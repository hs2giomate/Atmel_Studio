
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001e8b8  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001e8b8  0001e8b8  0002e8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000bd4  20000000  0001e8c0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00030bd4  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00030bd4  2**0
                  CONTENTS
  5 .bss          00004ce8  20000bd8  0001f498  00030bd4  2**3
                  ALLOC
  6 .stack        00010000  200058c0  00024180  00030bd4  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00030bd4  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00030c02  2**0
                  CONTENTS, READONLY
  9 .debug_info   000daf8b  00000000  00000000  00030c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00011b80  00000000  00000000  0010bbe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000265ac  00000000  00000000  0011d766  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004508  00000000  00000000  00143d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004000  00000000  00000000  0014821a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00061848  00000000  00000000  0014c21a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0005f2ee  00000000  00000000  001ada62  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0014ac12  00000000  00000000  0020cd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00013054  00000000  00000000  00357964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 58 01 20 cd 0f 00 00 51 10 00 00 51 10 00 00     .X. ....Q...Q...
      10:	51 10 00 00 51 10 00 00 51 10 00 00 00 00 00 00     Q...Q...Q.......
	...
      2c:	51 10 00 00 51 10 00 00 00 00 00 00 51 10 00 00     Q...Q.......Q...
      3c:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
      4c:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
      5c:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
      6c:	a9 94 00 00 9d 7e 00 00 51 10 00 00 51 10 00 00     .....~..Q...Q...
      7c:	51 10 00 00 ad 7e 00 00 bd 7e 00 00 cd 7e 00 00     Q....~...~...~..
      8c:	dd 7e 00 00 51 10 00 00 51 10 00 00 51 10 00 00     .~..Q...Q...Q...
      9c:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
      ac:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
      bc:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
      cc:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
      dc:	51 10 00 00 51 10 00 00 51 10 00 00 00 00 00 00     Q...Q...Q.......
	...
      f4:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
     104:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
     114:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
     124:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
     134:	51 10 00 00 65 ac 00 00 81 ac 00 00 9d ac 00 00     Q...e...........
     144:	b9 ac 00 00 d5 ac 00 00 f1 ac 00 00 0d ad 00 00     ................
     154:	29 ad 00 00 51 10 00 00 51 10 00 00 51 10 00 00     )...Q...Q...Q...
     164:	51 10 00 00 45 ad 00 00 61 ad 00 00 7d ad 00 00     Q...E...a...}...
     174:	99 ad 00 00 51 10 00 00 d9 70 00 00 01 e8 00 00     ....Q....p......
     184:	11 e8 00 00 21 e8 00 00 31 e8 00 00 51 10 00 00     ....!...1...Q...
     194:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
     1a4:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
     1b4:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
     1c4:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
     1d4:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
     1e4:	51 10 00 00 51 10 00 00 cd be 00 00 e9 be 00 00     Q...Q...........
     1f4:	05 bf 00 00 21 bf 00 00 3d bf 00 00 59 bf 00 00     ....!...=...Y...
     204:	51 10 00 00 75 bf 00 00 51 10 00 00 51 10 00 00     Q...u...Q...Q...
     214:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
     224:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
     234:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
     244:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...
     254:	51 10 00 00 51 10 00 00 51 10 00 00 51 10 00 00     Q...Q...Q...Q...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000bd8 	.word	0x20000bd8
     280:	00000000 	.word	0x00000000
     284:	0001e8c0 	.word	0x0001e8c0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001e8c0 	.word	0x0001e8c0
     2c4:	20000bdc 	.word	0x20000bdc
     2c8:	0001e8c0 	.word	0x0001e8c0
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
     2d8:	6039      	str	r1, [r7, #0]
	{
	data = v;
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	683a      	ldr	r2, [r7, #0]
     2de:	601a      	str	r2, [r3, #0]
	}
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	4618      	mov	r0, r3
     2e4:	370c      	adds	r7, #12
     2e6:	46bd      	mov	sp, r7
     2e8:	bc80      	pop	{r7}
     2ea:	4770      	bx	lr

000002ec <_ZL11ARINCTimeUpPK10timer_task>:
#include "MemoryManagment_Class.h"
#include "CDC_Class.h"
#include "DateTime_Class.h"
#include "N25Q256_Class.h"
ALU_Class	*ptrALUClass;
static void ARINCTimeUp(const struct timer_task *const timer_task){
     2ec:	b480      	push	{r7}
     2ee:	b083      	sub	sp, #12
     2f0:	af00      	add	r7, sp, #0
     2f2:	6078      	str	r0, [r7, #4]
	ptrALUClass->arincTXTimeUP=true;
     2f4:	4b04      	ldr	r3, [pc, #16]	; (308 <_ZL11ARINCTimeUpPK10timer_task+0x1c>)
     2f6:	681b      	ldr	r3, [r3, #0]
     2f8:	2201      	movs	r2, #1
     2fa:	751a      	strb	r2, [r3, #20]
}
     2fc:	bf00      	nop
     2fe:	370c      	adds	r7, #12
     300:	46bd      	mov	sp, r7
     302:	bc80      	pop	{r7}
     304:	4770      	bx	lr
     306:	bf00      	nop
     308:	20000bf4 	.word	0x20000bf4

0000030c <_ZN9ALU_ClassC1Ev>:

// default constructor
ALU_Class::ALU_Class()
     30c:	b480      	push	{r7}
     30e:	b083      	sub	sp, #12
     310:	af00      	add	r7, sp, #0
     312:	6078      	str	r0, [r7, #4]
{
	ptrPbit=&pBIT;
     314:	687b      	ldr	r3, [r7, #4]
     316:	4a05      	ldr	r2, [pc, #20]	; (32c <_ZN9ALU_ClassC1Ev+0x20>)
     318:	611a      	str	r2, [r3, #16]
	ptrALUClass=this;
     31a:	4a05      	ldr	r2, [pc, #20]	; (330 <_ZN9ALU_ClassC1Ev+0x24>)
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	6013      	str	r3, [r2, #0]
} //ALU_Class
     320:	687b      	ldr	r3, [r7, #4]
     322:	4618      	mov	r0, r3
     324:	370c      	adds	r7, #12
     326:	46bd      	mov	sp, r7
     328:	bc80      	pop	{r7}
     32a:	4770      	bx	lr
     32c:	20002f34 	.word	0x20002f34
     330:	20000bf4 	.word	0x20000bf4

00000334 <_ZN9ALU_ClassD1Ev>:

// default destructor
ALU_Class::~ALU_Class()
     334:	b480      	push	{r7}
     336:	b083      	sub	sp, #12
     338:	af00      	add	r7, sp, #0
     33a:	6078      	str	r0, [r7, #4]
{
} //~ALU_Class
     33c:	687b      	ldr	r3, [r7, #4]
     33e:	4618      	mov	r0, r3
     340:	370c      	adds	r7, #12
     342:	46bd      	mov	sp, r7
     344:	bc80      	pop	{r7}
     346:	4770      	bx	lr

00000348 <_ZN9ALU_Class4InitEv>:

uint32_t	ALU_Class::Init(void){
     348:	b580      	push	{r7, lr}
     34a:	b086      	sub	sp, #24
     34c:	af00      	add	r7, sp, #0
     34e:	6078      	str	r0, [r7, #4]
	uint32_t	s;
	StartLivePulse();
     350:	6878      	ldr	r0, [r7, #4]
     352:	4b2f      	ldr	r3, [pc, #188]	; (410 <_ZN9ALU_Class4InitEv+0xc8>)
     354:	4798      	blx	r3
		
	cBit.statusBits.hvacOK=hvac.Init();
     356:	482f      	ldr	r0, [pc, #188]	; (414 <_ZN9ALU_Class4InitEv+0xcc>)
     358:	4b2f      	ldr	r3, [pc, #188]	; (418 <_ZN9ALU_Class4InitEv+0xd0>)
     35a:	4798      	blx	r3
     35c:	4603      	mov	r3, r0
     35e:	461a      	mov	r2, r3
     360:	4b2e      	ldr	r3, [pc, #184]	; (41c <_ZN9ALU_Class4InitEv+0xd4>)
     362:	701a      	strb	r2, [r3, #0]
	
	hvac.SetCRCConfigData();
     364:	482b      	ldr	r0, [pc, #172]	; (414 <_ZN9ALU_Class4InitEv+0xcc>)
     366:	4b2e      	ldr	r3, [pc, #184]	; (420 <_ZN9ALU_Class4InitEv+0xd8>)
     368:	4798      	blx	r3
	SetInitialConfiguration(configuration);
     36a:	687b      	ldr	r3, [r7, #4]
     36c:	331c      	adds	r3, #28
     36e:	4619      	mov	r1, r3
     370:	6878      	ldr	r0, [r7, #4]
     372:	4b2c      	ldr	r3, [pc, #176]	; (424 <_ZN9ALU_Class4InitEv+0xdc>)
     374:	4798      	blx	r3
	memory.WriteDefaultState();
     376:	482c      	ldr	r0, [pc, #176]	; (428 <_ZN9ALU_Class4InitEv+0xe0>)
     378:	4b2c      	ldr	r3, [pc, #176]	; (42c <_ZN9ALU_Class4InitEv+0xe4>)
     37a:	4798      	blx	r3
	hvac.SetInitialState();
     37c:	4825      	ldr	r0, [pc, #148]	; (414 <_ZN9ALU_Class4InitEv+0xcc>)
     37e:	4b2c      	ldr	r3, [pc, #176]	; (430 <_ZN9ALU_Class4InitEv+0xe8>)
     380:	4798      	blx	r3
	uhr.Init();
     382:	482c      	ldr	r0, [pc, #176]	; (434 <_ZN9ALU_Class4InitEv+0xec>)
     384:	4b2c      	ldr	r3, [pc, #176]	; (438 <_ZN9ALU_Class4InitEv+0xf0>)
     386:	4798      	blx	r3
	hvac.saveCurrentState();
     388:	4822      	ldr	r0, [pc, #136]	; (414 <_ZN9ALU_Class4InitEv+0xcc>)
     38a:	4b2c      	ldr	r3, [pc, #176]	; (43c <_ZN9ALU_Class4InitEv+0xf4>)
     38c:	4798      	blx	r3
	
	if (!(interfaces.Init()))
     38e:	482c      	ldr	r0, [pc, #176]	; (440 <_ZN9ALU_Class4InitEv+0xf8>)
     390:	4b2c      	ldr	r3, [pc, #176]	; (444 <_ZN9ALU_Class4InitEv+0xfc>)
     392:	4798      	blx	r3
     394:	4603      	mov	r3, r0
     396:	f083 0301 	eor.w	r3, r3, #1
     39a:	b2db      	uxtb	r3, r3
     39c:	2b00      	cmp	r3, #0
     39e:	d00e      	beq.n	3be <_ZN9ALU_Class4InitEv+0x76>
	{	
		NotifyError(kARINCINnterfaceError,s);
     3a0:	f107 030c 	add.w	r3, r7, #12
     3a4:	6979      	ldr	r1, [r7, #20]
     3a6:	4618      	mov	r0, r3
     3a8:	4b27      	ldr	r3, [pc, #156]	; (448 <_ZN9ALU_Class4InitEv+0x100>)
     3aa:	4798      	blx	r3
     3ac:	f107 030c 	add.w	r3, r7, #12
     3b0:	461a      	mov	r2, r3
     3b2:	2100      	movs	r1, #0
     3b4:	6878      	ldr	r0, [r7, #4]
     3b6:	4b25      	ldr	r3, [pc, #148]	; (44c <_ZN9ALU_Class4InitEv+0x104>)
     3b8:	4798      	blx	r3
		return s;
     3ba:	697b      	ldr	r3, [r7, #20]
     3bc:	e024      	b.n	408 <_ZN9ALU_Class4InitEv+0xc0>
	} 
	else
	{
		arincTimer.Start_periodic_task(FUNC_PTR(ARINCTimeUp),500);
     3be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     3c2:	4923      	ldr	r1, [pc, #140]	; (450 <_ZN9ALU_Class4InitEv+0x108>)
     3c4:	4823      	ldr	r0, [pc, #140]	; (454 <_ZN9ALU_Class4InitEv+0x10c>)
     3c6:	4b24      	ldr	r3, [pc, #144]	; (458 <_ZN9ALU_Class4InitEv+0x110>)
     3c8:	4798      	blx	r3
		
		s=pBIT.CheckCurrentStatus(status);
     3ca:	687b      	ldr	r3, [r7, #4]
     3cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
     3d0:	4619      	mov	r1, r3
     3d2:	4822      	ldr	r0, [pc, #136]	; (45c <_ZN9ALU_Class4InitEv+0x114>)
     3d4:	4b22      	ldr	r3, [pc, #136]	; (460 <_ZN9ALU_Class4InitEv+0x118>)
     3d6:	4798      	blx	r3
     3d8:	6178      	str	r0, [r7, #20]
		if (s>0)
     3da:	697b      	ldr	r3, [r7, #20]
     3dc:	2b00      	cmp	r3, #0
     3de:	d00e      	beq.n	3fe <_ZN9ALU_Class4InitEv+0xb6>
		{
			NotifyError(kpBITError,s);
     3e0:	f107 0310 	add.w	r3, r7, #16
     3e4:	6979      	ldr	r1, [r7, #20]
     3e6:	4618      	mov	r0, r3
     3e8:	4b17      	ldr	r3, [pc, #92]	; (448 <_ZN9ALU_Class4InitEv+0x100>)
     3ea:	4798      	blx	r3
     3ec:	f107 0310 	add.w	r3, r7, #16
     3f0:	461a      	mov	r2, r3
     3f2:	2101      	movs	r1, #1
     3f4:	6878      	ldr	r0, [r7, #4]
     3f6:	4b15      	ldr	r3, [pc, #84]	; (44c <_ZN9ALU_Class4InitEv+0x104>)
     3f8:	4798      	blx	r3
			return s;
     3fa:	697b      	ldr	r3, [r7, #20]
     3fc:	e004      	b.n	408 <_ZN9ALU_Class4InitEv+0xc0>
		} 
		else
		{
			hvac.Start(0);
     3fe:	2100      	movs	r1, #0
     400:	4804      	ldr	r0, [pc, #16]	; (414 <_ZN9ALU_Class4InitEv+0xcc>)
     402:	4b18      	ldr	r3, [pc, #96]	; (464 <_ZN9ALU_Class4InitEv+0x11c>)
     404:	4798      	blx	r3
		}
	}
	  
	return s;
     406:	697b      	ldr	r3, [r7, #20]
}
     408:	4618      	mov	r0, r3
     40a:	3718      	adds	r7, #24
     40c:	46bd      	mov	sp, r7
     40e:	bd80      	pop	{r7, pc}
     410:	00000549 	.word	0x00000549
     414:	20002f48 	.word	0x20002f48
     418:	00002455 	.word	0x00002455
     41c:	20001350 	.word	0x20001350
     420:	00003041 	.word	0x00003041
     424:	00000595 	.word	0x00000595
     428:	20001b00 	.word	0x20001b00
     42c:	00001df1 	.word	0x00001df1
     430:	00000a59 	.word	0x00000a59
     434:	20001358 	.word	0x20001358
     438:	00000f25 	.word	0x00000f25
     43c:	00002ee9 	.word	0x00002ee9
     440:	20001418 	.word	0x20001418
     444:	000012ad 	.word	0x000012ad
     448:	000002d1 	.word	0x000002d1
     44c:	000006bd 	.word	0x000006bd
     450:	000002ed 	.word	0x000002ed
     454:	200052e0 	.word	0x200052e0
     458:	000151c5 	.word	0x000151c5
     45c:	20002f34 	.word	0x20002f34
     460:	00001f91 	.word	0x00001f91
     464:	000024c1 	.word	0x000024c1

00000468 <_ZN9ALU_Class13RunControllerEv>:

uint32_t	ALU_Class::RunController(void){
     468:	b580      	push	{r7, lr}
     46a:	b084      	sub	sp, #16
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		while (!arincTXTimeUP)
     470:	687b      	ldr	r3, [r7, #4]
     472:	7d1b      	ldrb	r3, [r3, #20]
     474:	b2db      	uxtb	r3, r3
     476:	f083 0301 	eor.w	r3, r3, #1
     47a:	b2db      	uxtb	r3, r3
     47c:	2b00      	cmp	r3, #0
     47e:	d018      	beq.n	4b2 <_ZN9ALU_Class13RunControllerEv+0x4a>
		{
			if (!pBIT)
     480:	480f      	ldr	r0, [pc, #60]	; (4c0 <_ZN9ALU_Class13RunControllerEv+0x58>)
     482:	4b10      	ldr	r3, [pc, #64]	; (4c4 <_ZN9ALU_Class13RunControllerEv+0x5c>)
     484:	4798      	blx	r3
     486:	4603      	mov	r3, r0
     488:	f083 0301 	eor.w	r3, r3, #1
     48c:	b2db      	uxtb	r3, r3
     48e:	2b00      	cmp	r3, #0
     490:	d004      	beq.n	49c <_ZN9ALU_Class13RunControllerEv+0x34>
			{
				hvac.Stop(0);
     492:	2100      	movs	r1, #0
     494:	480c      	ldr	r0, [pc, #48]	; (4c8 <_ZN9ALU_Class13RunControllerEv+0x60>)
     496:	4b0d      	ldr	r3, [pc, #52]	; (4cc <_ZN9ALU_Class13RunControllerEv+0x64>)
     498:	4798      	blx	r3
     49a:	e003      	b.n	4a4 <_ZN9ALU_Class13RunControllerEv+0x3c>
			}
			else
			{
				hvac.Resume(0);
     49c:	2100      	movs	r1, #0
     49e:	480a      	ldr	r0, [pc, #40]	; (4c8 <_ZN9ALU_Class13RunControllerEv+0x60>)
     4a0:	4b0b      	ldr	r3, [pc, #44]	; (4d0 <_ZN9ALU_Class13RunControllerEv+0x68>)
     4a2:	4798      	blx	r3
			}
			interfaces.CheckCommunication();
     4a4:	f107 0308 	add.w	r3, r7, #8
     4a8:	490a      	ldr	r1, [pc, #40]	; (4d4 <_ZN9ALU_Class13RunControllerEv+0x6c>)
     4aa:	4618      	mov	r0, r3
     4ac:	4b0a      	ldr	r3, [pc, #40]	; (4d8 <_ZN9ALU_Class13RunControllerEv+0x70>)
     4ae:	4798      	blx	r3
		while (!arincTXTimeUP)
     4b0:	e7de      	b.n	470 <_ZN9ALU_Class13RunControllerEv+0x8>
		}
		arinc.TrasmitSingleLabel();
     4b2:	480a      	ldr	r0, [pc, #40]	; (4dc <_ZN9ALU_Class13RunControllerEv+0x74>)
     4b4:	4b0a      	ldr	r3, [pc, #40]	; (4e0 <_ZN9ALU_Class13RunControllerEv+0x78>)
     4b6:	4798      	blx	r3
		
		arincTXTimeUP=false;
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	2200      	movs	r2, #0
     4bc:	751a      	strb	r2, [r3, #20]
	while (1)
     4be:	e7d7      	b.n	470 <_ZN9ALU_Class13RunControllerEv+0x8>
     4c0:	20002f34 	.word	0x20002f34
     4c4:	00001f79 	.word	0x00001f79
     4c8:	20002f48 	.word	0x20002f48
     4cc:	00002f79 	.word	0x00002f79
     4d0:	00002475 	.word	0x00002475
     4d4:	20001418 	.word	0x20001418
     4d8:	0000132d 	.word	0x0000132d
     4dc:	20003a4c 	.word	0x20003a4c
     4e0:	000116e5 	.word	0x000116e5

000004e4 <_ZN9ALU_Class15GetSelectedAMMCEv>:
	}
	
}

uint8_t	ALU_Class::GetSelectedAMMC(void){
     4e4:	b580      	push	{r7, lr}
     4e6:	b082      	sub	sp, #8
     4e8:	af00      	add	r7, sp, #0
     4ea:	6078      	str	r0, [r7, #4]
	activeLine=arinc.GetActiveLine();
     4ec:	4811      	ldr	r0, [pc, #68]	; (534 <_ZN9ALU_Class15GetSelectedAMMCEv+0x50>)
     4ee:	4b12      	ldr	r3, [pc, #72]	; (538 <_ZN9ALU_Class15GetSelectedAMMCEv+0x54>)
     4f0:	4798      	blx	r3
     4f2:	4603      	mov	r3, r0
     4f4:	461a      	mov	r2, r3
     4f6:	687b      	ldr	r3, [r7, #4]
     4f8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		switch (activeLine)
     4fc:	687b      	ldr	r3, [r7, #4]
     4fe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
     502:	2b01      	cmp	r3, #1
     504:	d002      	beq.n	50c <_ZN9ALU_Class15GetSelectedAMMCEv+0x28>
     506:	2b02      	cmp	r3, #2
     508:	d004      	beq.n	514 <_ZN9ALU_Class15GetSelectedAMMCEv+0x30>
     50a:	e007      	b.n	51c <_ZN9ALU_Class15GetSelectedAMMCEv+0x38>
		{
			case 1:
			ammc=&ammc1;
     50c:	4b0b      	ldr	r3, [pc, #44]	; (53c <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     50e:	4a0c      	ldr	r2, [pc, #48]	; (540 <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     510:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     512:	e007      	b.n	524 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			
			case 2:
			ammc=&ammc2;
     514:	4b09      	ldr	r3, [pc, #36]	; (53c <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     516:	4a0b      	ldr	r2, [pc, #44]	; (544 <_ZN9ALU_Class15GetSelectedAMMCEv+0x60>)
     518:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     51a:	e003      	b.n	524 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			default:
			ammc=&ammc1;
     51c:	4b07      	ldr	r3, [pc, #28]	; (53c <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     51e:	4a08      	ldr	r2, [pc, #32]	; (540 <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     520:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     522:	bf00      	nop
		}
	return activeLine;	
     524:	687b      	ldr	r3, [r7, #4]
     526:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
}
     52a:	4618      	mov	r0, r3
     52c:	3708      	adds	r7, #8
     52e:	46bd      	mov	sp, r7
     530:	bd80      	pop	{r7, pc}
     532:	bf00      	nop
     534:	20003a4c 	.word	0x20003a4c
     538:	000121d3 	.word	0x000121d3
     53c:	2000134c 	.word	0x2000134c
     540:	20000d2c 	.word	0x20000d2c
     544:	2000103c 	.word	0x2000103c

00000548 <_ZN9ALU_Class14StartLivePulseEv>:
	
}
int32_t	ALU_Class::FeedWatchDog(void){
	return wdt_feed(&WATCHDOG);
}
uint8_t	ALU_Class::StartLivePulse(void){
     548:	b580      	push	{r7, lr}
     54a:	b084      	sub	sp, #16
     54c:	af00      	add	r7, sp, #0
     54e:	6078      	str	r0, [r7, #4]
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     550:	4909      	ldr	r1, [pc, #36]	; (578 <_ZN9ALU_Class14StartLivePulseEv+0x30>)
     552:	480a      	ldr	r0, [pc, #40]	; (57c <_ZN9ALU_Class14StartLivePulseEv+0x34>)
     554:	4b0a      	ldr	r3, [pc, #40]	; (580 <_ZN9ALU_Class14StartLivePulseEv+0x38>)
     556:	4798      	blx	r3
     558:	4603      	mov	r3, r0
     55a:	490a      	ldr	r1, [pc, #40]	; (584 <_ZN9ALU_Class14StartLivePulseEv+0x3c>)
     55c:	4618      	mov	r0, r3
     55e:	4b0a      	ldr	r3, [pc, #40]	; (588 <_ZN9ALU_Class14StartLivePulseEv+0x40>)
     560:	4798      	blx	r3
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     562:	480a      	ldr	r0, [pc, #40]	; (58c <_ZN9ALU_Class14StartLivePulseEv+0x44>)
     564:	4b0a      	ldr	r3, [pc, #40]	; (590 <_ZN9ALU_Class14StartLivePulseEv+0x48>)
     566:	4798      	blx	r3
     568:	4603      	mov	r3, r0
     56a:	60fb      	str	r3, [r7, #12]
	return p;
     56c:	68fb      	ldr	r3, [r7, #12]
     56e:	b2db      	uxtb	r3, r3
}
     570:	4618      	mov	r0, r3
     572:	3710      	adds	r7, #16
     574:	46bd      	mov	sp, r7
     576:	bd80      	pop	{r7, pc}
     578:	0001c7dc 	.word	0x0001c7dc
     57c:	20005304 	.word	0x20005304
     580:	00000731 	.word	0x00000731
     584:	0001c7d8 	.word	0x0001c7d8
     588:	00000711 	.word	0x00000711
     58c:	200056a4 	.word	0x200056a4
     590:	000053d1 	.word	0x000053d1

00000594 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData>:
		nextUptimeUpdate = hvacTimer.Get_ticks()+ 1000;
	}
	
	return (alu.FeedWatchDog()>0);
}
uint32_t ALU_Class::SetInitialConfiguration(ConfigurationData& cd){
     594:	b580      	push	{r7, lr}
     596:	b088      	sub	sp, #32
     598:	af00      	add	r7, sp, #0
     59a:	6078      	str	r0, [r7, #4]
     59c:	6039      	str	r1, [r7, #0]
	uint32_t	w,crc,refCRC,e;
	w=0;
     59e:	2300      	movs	r3, #0
     5a0:	61bb      	str	r3, [r7, #24]
	uint32_t	r=memory.ReadLastConfigurationData(cd);
     5a2:	6839      	ldr	r1, [r7, #0]
     5a4:	4835      	ldr	r0, [pc, #212]	; (67c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     5a6:	4b36      	ldr	r3, [pc, #216]	; (680 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xec>)
     5a8:	4798      	blx	r3
     5aa:	61f8      	str	r0, [r7, #28]
	if (memory.IsConfigurationDataUpdated())
     5ac:	4835      	ldr	r0, [pc, #212]	; (684 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf0>)
     5ae:	4b36      	ldr	r3, [pc, #216]	; (688 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf4>)
     5b0:	4798      	blx	r3
     5b2:	4603      	mov	r3, r0
     5b4:	2b00      	cmp	r3, #0
     5b6:	d007      	beq.n	5c8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x34>
	{
		r=memory.ReadUpdatedConfigurationData(configuration);
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	331c      	adds	r3, #28
     5bc:	4619      	mov	r1, r3
     5be:	482f      	ldr	r0, [pc, #188]	; (67c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     5c0:	4b32      	ldr	r3, [pc, #200]	; (68c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf8>)
     5c2:	4798      	blx	r3
     5c4:	61f8      	str	r0, [r7, #28]
     5c6:	e04d      	b.n	664 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd0>
		
	}
	else
	{
		crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(configuration));
     5c8:	22ac      	movs	r2, #172	; 0xac
     5ca:	6839      	ldr	r1, [r7, #0]
     5cc:	482d      	ldr	r0, [pc, #180]	; (684 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf0>)
     5ce:	4b30      	ldr	r3, [pc, #192]	; (690 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xfc>)
     5d0:	4798      	blx	r3
     5d2:	6178      	str	r0, [r7, #20]
		refCRC=memory.ReadCRCConfigurationData();
     5d4:	4829      	ldr	r0, [pc, #164]	; (67c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     5d6:	4b2f      	ldr	r3, [pc, #188]	; (694 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x100>)
     5d8:	4798      	blx	r3
     5da:	6138      	str	r0, [r7, #16]
		if (crc==refCRC)
     5dc:	697a      	ldr	r2, [r7, #20]
     5de:	693b      	ldr	r3, [r7, #16]
     5e0:	429a      	cmp	r2, r3
     5e2:	d108      	bne.n	5f6 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x62>
		{
			configuration=cd;
     5e4:	687b      	ldr	r3, [r7, #4]
     5e6:	683a      	ldr	r2, [r7, #0]
     5e8:	331c      	adds	r3, #28
     5ea:	4611      	mov	r1, r2
     5ec:	22ac      	movs	r2, #172	; 0xac
     5ee:	4618      	mov	r0, r3
     5f0:	4b29      	ldr	r3, [pc, #164]	; (698 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x104>)
     5f2:	4798      	blx	r3
     5f4:	e036      	b.n	664 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd0>
		
		} 
		else
		{
		
			r=memory.ReadDefaultConfigurationData(configuration);
     5f6:	687b      	ldr	r3, [r7, #4]
     5f8:	331c      	adds	r3, #28
     5fa:	4619      	mov	r1, r3
     5fc:	481f      	ldr	r0, [pc, #124]	; (67c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     5fe:	4b27      	ldr	r3, [pc, #156]	; (69c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     600:	4798      	blx	r3
     602:	61f8      	str	r0, [r7, #28]
			crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
     604:	687b      	ldr	r3, [r7, #4]
     606:	331c      	adds	r3, #28
     608:	22ac      	movs	r2, #172	; 0xac
     60a:	4619      	mov	r1, r3
     60c:	481d      	ldr	r0, [pc, #116]	; (684 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf0>)
     60e:	4b20      	ldr	r3, [pc, #128]	; (690 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xfc>)
     610:	4798      	blx	r3
     612:	6178      	str	r0, [r7, #20]
			if (crc==hvac.CRC32)
     614:	4b22      	ldr	r3, [pc, #136]	; (6a0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     616:	f8d3 24d0 	ldr.w	r2, [r3, #1232]	; 0x4d0
     61a:	697b      	ldr	r3, [r7, #20]
     61c:	429a      	cmp	r2, r3
     61e:	d105      	bne.n	62c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x98>
			{
				w=memory.WriteCRCConfigurationData(crc);
     620:	6979      	ldr	r1, [r7, #20]
     622:	4816      	ldr	r0, [pc, #88]	; (67c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     624:	4b1f      	ldr	r3, [pc, #124]	; (6a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     626:	4798      	blx	r3
     628:	61b8      	str	r0, [r7, #24]
     62a:	e01b      	b.n	664 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd0>
				
			}
			else
			{
							
				configuration=factoryDefaultsConfiguration;
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	4a1e      	ldr	r2, [pc, #120]	; (6a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x114>)
     630:	331c      	adds	r3, #28
     632:	4611      	mov	r1, r2
     634:	22ac      	movs	r2, #172	; 0xac
     636:	4618      	mov	r0, r3
     638:	4b17      	ldr	r3, [pc, #92]	; (698 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x104>)
     63a:	4798      	blx	r3
				e=qspiFlash.Erase(0);
     63c:	2100      	movs	r1, #0
     63e:	481b      	ldr	r0, [pc, #108]	; (6ac <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x118>)
     640:	4b1b      	ldr	r3, [pc, #108]	; (6b0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     642:	4798      	blx	r3
     644:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultConfiguration(configuration);
     646:	687b      	ldr	r3, [r7, #4]
     648:	331c      	adds	r3, #28
     64a:	4619      	mov	r1, r3
     64c:	480b      	ldr	r0, [pc, #44]	; (67c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     64e:	4b19      	ldr	r3, [pc, #100]	; (6b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x120>)
     650:	4798      	blx	r3
     652:	61b8      	str	r0, [r7, #24]
				w=memory.WriteCRCConfigurationData(hvac.CRC32);
     654:	4b12      	ldr	r3, [pc, #72]	; (6a0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     656:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
     65a:	4619      	mov	r1, r3
     65c:	4807      	ldr	r0, [pc, #28]	; (67c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     65e:	4b11      	ldr	r3, [pc, #68]	; (6a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     660:	4798      	blx	r3
     662:	61b8      	str	r0, [r7, #24]
			
		}
		
		
	}
	hvac.SetConfigurationData(configuration);
     664:	687b      	ldr	r3, [r7, #4]
     666:	331c      	adds	r3, #28
     668:	4619      	mov	r1, r3
     66a:	480d      	ldr	r0, [pc, #52]	; (6a0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     66c:	4b12      	ldr	r3, [pc, #72]	; (6b8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     66e:	4798      	blx	r3
	return r;
     670:	69fb      	ldr	r3, [r7, #28]
};
     672:	4618      	mov	r0, r3
     674:	3720      	adds	r7, #32
     676:	46bd      	mov	sp, r7
     678:	bd80      	pop	{r7, pc}
     67a:	bf00      	nop
     67c:	20001b00 	.word	0x20001b00
     680:	00001c81 	.word	0x00001c81
     684:	2000197c 	.word	0x2000197c
     688:	000021c5 	.word	0x000021c5
     68c:	00001cb1 	.word	0x00001cb1
     690:	00000d99 	.word	0x00000d99
     694:	00001d19 	.word	0x00001d19
     698:	00018b59 	.word	0x00018b59
     69c:	00001c51 	.word	0x00001c51
     6a0:	20002f48 	.word	0x20002f48
     6a4:	00001e55 	.word	0x00001e55
     6a8:	0001c8a4 	.word	0x0001c8a4
     6ac:	20004ee4 	.word	0x20004ee4
     6b0:	000142e1 	.word	0x000142e1
     6b4:	00001dc1 	.word	0x00001dc1
     6b8:	00002ff1 	.word	0x00002ff1

000006bc <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData>:

void ALU_Class::NotifyError(Internal_Fault_List ifl,const eventData& data)
{
     6bc:	b580      	push	{r7, lr}
     6be:	b084      	sub	sp, #16
     6c0:	af00      	add	r7, sp, #0
     6c2:	60f8      	str	r0, [r7, #12]
     6c4:	460b      	mov	r3, r1
     6c6:	607a      	str	r2, [r7, #4]
     6c8:	72fb      	strb	r3, [r7, #11]
	listener.SendErrorSelf(uint16_t(ifl),data);
     6ca:	7afb      	ldrb	r3, [r7, #11]
     6cc:	b29b      	uxth	r3, r3
     6ce:	687a      	ldr	r2, [r7, #4]
     6d0:	4619      	mov	r1, r3
     6d2:	4803      	ldr	r0, [pc, #12]	; (6e0 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x24>)
     6d4:	4b03      	ldr	r3, [pc, #12]	; (6e4 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x28>)
     6d6:	4798      	blx	r3
}
     6d8:	bf00      	nop
     6da:	3710      	adds	r7, #16
     6dc:	46bd      	mov	sp, r7
     6de:	bd80      	pop	{r7, pc}
     6e0:	20004d9c 	.word	0x20004d9c
     6e4:	00012835 	.word	0x00012835

000006e8 <_ZlsIhER5PrintS1_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     6e8:	b580      	push	{r7, lr}
     6ea:	b082      	sub	sp, #8
     6ec:	af00      	add	r7, sp, #0
     6ee:	6078      	str	r0, [r7, #4]
     6f0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     6f2:	683b      	ldr	r3, [r7, #0]
     6f4:	781b      	ldrb	r3, [r3, #0]
     6f6:	220a      	movs	r2, #10
     6f8:	4619      	mov	r1, r3
     6fa:	6878      	ldr	r0, [r7, #4]
     6fc:	4b03      	ldr	r3, [pc, #12]	; (70c <_ZlsIhER5PrintS1_RKT_+0x24>)
     6fe:	4798      	blx	r3
     700:	687b      	ldr	r3, [r7, #4]
     702:	4618      	mov	r0, r3
     704:	3708      	adds	r7, #8
     706:	46bd      	mov	sp, r7
     708:	bd80      	pop	{r7, pc}
     70a:	bf00      	nop
     70c:	00015a0d 	.word	0x00015a0d

00000710 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     710:	b580      	push	{r7, lr}
     712:	b082      	sub	sp, #8
     714:	af00      	add	r7, sp, #0
     716:	6078      	str	r0, [r7, #4]
     718:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     71a:	6839      	ldr	r1, [r7, #0]
     71c:	6878      	ldr	r0, [r7, #4]
     71e:	4b03      	ldr	r3, [pc, #12]	; (72c <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     720:	4798      	blx	r3
     722:	687b      	ldr	r3, [r7, #4]
     724:	4618      	mov	r0, r3
     726:	3708      	adds	r7, #8
     728:	46bd      	mov	sp, r7
     72a:	bd80      	pop	{r7, pc}
     72c:	000159c9 	.word	0x000159c9

00000730 <_ZlsIA30_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     730:	b580      	push	{r7, lr}
     732:	b082      	sub	sp, #8
     734:	af00      	add	r7, sp, #0
     736:	6078      	str	r0, [r7, #4]
     738:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     73a:	6839      	ldr	r1, [r7, #0]
     73c:	6878      	ldr	r0, [r7, #4]
     73e:	4b03      	ldr	r3, [pc, #12]	; (74c <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     740:	4798      	blx	r3
     742:	687b      	ldr	r3, [r7, #4]
     744:	4618      	mov	r0, r3
     746:	3708      	adds	r7, #8
     748:	46bd      	mov	sp, r7
     74a:	bd80      	pop	{r7, pc}
     74c:	000159c9 	.word	0x000159c9

00000750 <_Z41__static_initialization_and_destruction_0ii>:
void ALU_Class::NotifyError(Fault_List fl,const eventData& data)
{
	listener.SendErrorSelf(uint16_t(fl),data);
}
     750:	b580      	push	{r7, lr}
     752:	b082      	sub	sp, #8
     754:	af00      	add	r7, sp, #0
     756:	6078      	str	r0, [r7, #4]
     758:	6039      	str	r1, [r7, #0]
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	2b01      	cmp	r3, #1
     75e:	d10c      	bne.n	77a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     760:	683b      	ldr	r3, [r7, #0]
     762:	f64f 72ff 	movw	r2, #65535	; 0xffff
     766:	4293      	cmp	r3, r2
     768:	d107      	bne.n	77a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     76a:	4806      	ldr	r0, [pc, #24]	; (784 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     76c:	4b06      	ldr	r3, [pc, #24]	; (788 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     76e:	4798      	blx	r3
     770:	4a06      	ldr	r2, [pc, #24]	; (78c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     772:	4907      	ldr	r1, [pc, #28]	; (790 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     774:	4803      	ldr	r0, [pc, #12]	; (784 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     776:	4b07      	ldr	r3, [pc, #28]	; (794 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     778:	4798      	blx	r3
     77a:	bf00      	nop
     77c:	3708      	adds	r7, #8
     77e:	46bd      	mov	sp, r7
     780:	bd80      	pop	{r7, pc}
     782:	bf00      	nop
     784:	20000bf8 	.word	0x20000bf8
     788:	0000030d 	.word	0x0000030d
     78c:	20000000 	.word	0x20000000
     790:	00000335 	.word	0x00000335
     794:	000167bd 	.word	0x000167bd

00000798 <_GLOBAL__sub_I_ptrALUClass>:
     798:	b580      	push	{r7, lr}
     79a:	af00      	add	r7, sp, #0
     79c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     7a0:	2001      	movs	r0, #1
     7a2:	4b01      	ldr	r3, [pc, #4]	; (7a8 <_GLOBAL__sub_I_ptrALUClass+0x10>)
     7a4:	4798      	blx	r3
     7a6:	bd80      	pop	{r7, pc}
     7a8:	00000751 	.word	0x00000751

000007ac <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     7ac:	b580      	push	{r7, lr}
     7ae:	b082      	sub	sp, #8
     7b0:	af00      	add	r7, sp, #0
     7b2:	6078      	str	r0, [r7, #4]
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f503 7341 	add.w	r3, r3, #772	; 0x304
     7ba:	4618      	mov	r0, r3
     7bc:	4b0a      	ldr	r3, [pc, #40]	; (7e8 <_ZN10AMMC_ClassC1Ev+0x3c>)
     7be:	4798      	blx	r3
     7c0:	687b      	ldr	r3, [r7, #4]
     7c2:	4a0a      	ldr	r2, [pc, #40]	; (7ec <_ZN10AMMC_ClassC1Ev+0x40>)
     7c4:	4611      	mov	r1, r2
     7c6:	4618      	mov	r0, r3
     7c8:	4b09      	ldr	r3, [pc, #36]	; (7f0 <_ZN10AMMC_ClassC1Ev+0x44>)
     7ca:	4798      	blx	r3
     7cc:	4a09      	ldr	r2, [pc, #36]	; (7f4 <_ZN10AMMC_ClassC1Ev+0x48>)
     7ce:	687b      	ldr	r3, [r7, #4]
     7d0:	601a      	str	r2, [r3, #0]
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	f503 7341 	add.w	r3, r3, #772	; 0x304
     7d8:	4a07      	ldr	r2, [pc, #28]	; (7f8 <_ZN10AMMC_ClassC1Ev+0x4c>)
     7da:	601a      	str	r2, [r3, #0]
{
} //AMMC_Class
     7dc:	687b      	ldr	r3, [r7, #4]
     7de:	4618      	mov	r0, r3
     7e0:	3708      	adds	r7, #8
     7e2:	46bd      	mov	sp, r7
     7e4:	bd80      	pop	{r7, pc}
     7e6:	bf00      	nop
     7e8:	00010ed9 	.word	0x00010ed9
     7ec:	0001c830 	.word	0x0001c830
     7f0:	00011315 	.word	0x00011315
     7f4:	0001c808 	.word	0x0001c808
     7f8:	0001c824 	.word	0x0001c824

000007fc <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     7fc:	b580      	push	{r7, lr}
     7fe:	b082      	sub	sp, #8
     800:	af00      	add	r7, sp, #0
     802:	6078      	str	r0, [r7, #4]
     804:	4a0c      	ldr	r2, [pc, #48]	; (838 <_ZN10AMMC_ClassD1Ev+0x3c>)
     806:	687b      	ldr	r3, [r7, #4]
     808:	601a      	str	r2, [r3, #0]
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	f503 7341 	add.w	r3, r3, #772	; 0x304
     810:	4a0a      	ldr	r2, [pc, #40]	; (83c <_ZN10AMMC_ClassD1Ev+0x40>)
     812:	601a      	str	r2, [r3, #0]
     814:	687b      	ldr	r3, [r7, #4]
     816:	4a0a      	ldr	r2, [pc, #40]	; (840 <_ZN10AMMC_ClassD1Ev+0x44>)
     818:	4611      	mov	r1, r2
     81a:	4618      	mov	r0, r3
     81c:	4b09      	ldr	r3, [pc, #36]	; (844 <_ZN10AMMC_ClassD1Ev+0x48>)
     81e:	4798      	blx	r3
     820:	687b      	ldr	r3, [r7, #4]
     822:	f503 7341 	add.w	r3, r3, #772	; 0x304
     826:	4618      	mov	r0, r3
     828:	4b07      	ldr	r3, [pc, #28]	; (848 <_ZN10AMMC_ClassD1Ev+0x4c>)
     82a:	4798      	blx	r3
{
} //~AMMC_Class
     82c:	687b      	ldr	r3, [r7, #4]
     82e:	4618      	mov	r0, r3
     830:	3708      	adds	r7, #8
     832:	46bd      	mov	sp, r7
     834:	bd80      	pop	{r7, pc}
     836:	bf00      	nop
     838:	0001c808 	.word	0x0001c808
     83c:	0001c824 	.word	0x0001c824
     840:	0001c830 	.word	0x0001c830
     844:	000113d9 	.word	0x000113d9
     848:	00010ef9 	.word	0x00010ef9

0000084c <_ZN10AMMC_ClassD0Ev>:
AMMC_Class::~AMMC_Class()
     84c:	b580      	push	{r7, lr}
     84e:	b082      	sub	sp, #8
     850:	af00      	add	r7, sp, #0
     852:	6078      	str	r0, [r7, #4]
} //~AMMC_Class
     854:	6878      	ldr	r0, [r7, #4]
     856:	4b06      	ldr	r3, [pc, #24]	; (870 <_ZN10AMMC_ClassD0Ev+0x24>)
     858:	4798      	blx	r3
     85a:	f44f 7144 	mov.w	r1, #784	; 0x310
     85e:	6878      	ldr	r0, [r7, #4]
     860:	4b04      	ldr	r3, [pc, #16]	; (874 <_ZN10AMMC_ClassD0Ev+0x28>)
     862:	4798      	blx	r3
     864:	687b      	ldr	r3, [r7, #4]
     866:	4618      	mov	r0, r3
     868:	3708      	adds	r7, #8
     86a:	46bd      	mov	sp, r7
     86c:	bd80      	pop	{r7, pc}
     86e:	bf00      	nop
     870:	000007fd 	.word	0x000007fd
     874:	000167c9 	.word	0x000167c9

00000878 <_Z41__static_initialization_and_destruction_0ii>:
	return	selected;
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     878:	b580      	push	{r7, lr}
     87a:	b082      	sub	sp, #8
     87c:	af00      	add	r7, sp, #0
     87e:	6078      	str	r0, [r7, #4]
     880:	6039      	str	r1, [r7, #0]
     882:	687b      	ldr	r3, [r7, #4]
     884:	2b01      	cmp	r3, #1
     886:	d114      	bne.n	8b2 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     888:	683b      	ldr	r3, [r7, #0]
     88a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     88e:	4293      	cmp	r3, r2
     890:	d10f      	bne.n	8b2 <_Z41__static_initialization_and_destruction_0ii+0x3a>
AMMC_Class	ammc1;
     892:	480a      	ldr	r0, [pc, #40]	; (8bc <_Z41__static_initialization_and_destruction_0ii+0x44>)
     894:	4b0a      	ldr	r3, [pc, #40]	; (8c0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     896:	4798      	blx	r3
     898:	4a0a      	ldr	r2, [pc, #40]	; (8c4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     89a:	490b      	ldr	r1, [pc, #44]	; (8c8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     89c:	4807      	ldr	r0, [pc, #28]	; (8bc <_Z41__static_initialization_and_destruction_0ii+0x44>)
     89e:	4b0b      	ldr	r3, [pc, #44]	; (8cc <_Z41__static_initialization_and_destruction_0ii+0x54>)
     8a0:	4798      	blx	r3
AMMC_Class	ammc2;
     8a2:	480b      	ldr	r0, [pc, #44]	; (8d0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     8a4:	4b06      	ldr	r3, [pc, #24]	; (8c0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     8a6:	4798      	blx	r3
     8a8:	4a06      	ldr	r2, [pc, #24]	; (8c4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     8aa:	4907      	ldr	r1, [pc, #28]	; (8c8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     8ac:	4808      	ldr	r0, [pc, #32]	; (8d0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     8ae:	4b07      	ldr	r3, [pc, #28]	; (8cc <_Z41__static_initialization_and_destruction_0ii+0x54>)
     8b0:	4798      	blx	r3
     8b2:	bf00      	nop
     8b4:	3708      	adds	r7, #8
     8b6:	46bd      	mov	sp, r7
     8b8:	bd80      	pop	{r7, pc}
     8ba:	bf00      	nop
     8bc:	20000d2c 	.word	0x20000d2c
     8c0:	000007ad 	.word	0x000007ad
     8c4:	20000000 	.word	0x20000000
     8c8:	000007fd 	.word	0x000007fd
     8cc:	000167bd 	.word	0x000167bd
     8d0:	2000103c 	.word	0x2000103c

000008d4 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     8d4:	b580      	push	{r7, lr}
     8d6:	af00      	add	r7, sp, #0
     8d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     8dc:	2001      	movs	r0, #1
     8de:	4b01      	ldr	r3, [pc, #4]	; (8e4 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     8e0:	4798      	blx	r3
     8e2:	bd80      	pop	{r7, pc}
     8e4:	00000879 	.word	0x00000879

000008e8 <_ZN10CBIT_ClassC1Ev>:


#include "CBIT_Class.h"

// default constructor
CBIT_Class::CBIT_Class()
     8e8:	b480      	push	{r7}
     8ea:	b083      	sub	sp, #12
     8ec:	af00      	add	r7, sp, #0
     8ee:	6078      	str	r0, [r7, #4]
{
} //CBIT_Class
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	4618      	mov	r0, r3
     8f4:	370c      	adds	r7, #12
     8f6:	46bd      	mov	sp, r7
     8f8:	bc80      	pop	{r7}
     8fa:	4770      	bx	lr

000008fc <_ZN10CBIT_ClassD1Ev>:

// default destructor
CBIT_Class::~CBIT_Class()
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	6078      	str	r0, [r7, #4]
{
} //~CBIT_Class
     904:	687b      	ldr	r3, [r7, #4]
     906:	4618      	mov	r0, r3
     908:	370c      	adds	r7, #12
     90a:	46bd      	mov	sp, r7
     90c:	bc80      	pop	{r7}
     90e:	4770      	bx	lr

00000910 <_ZN10CBIT_Class4IsOKEv>:

bool	CBIT_Class::IsOK(void){
     910:	b480      	push	{r7}
     912:	b083      	sub	sp, #12
     914:	af00      	add	r7, sp, #0
     916:	6078      	str	r0, [r7, #4]
	return	isOK;
     918:	687b      	ldr	r3, [r7, #4]
     91a:	785b      	ldrb	r3, [r3, #1]
     91c:	b2db      	uxtb	r3, r3
}
     91e:	4618      	mov	r0, r3
     920:	370c      	adds	r7, #12
     922:	46bd      	mov	sp, r7
     924:	bc80      	pop	{r7}
     926:	4770      	bx	lr

00000928 <_Z41__static_initialization_and_destruction_0ii>:
CBIT_Class::operator bool(){
	return	isOK;
}

     928:	b580      	push	{r7, lr}
     92a:	b082      	sub	sp, #8
     92c:	af00      	add	r7, sp, #0
     92e:	6078      	str	r0, [r7, #4]
     930:	6039      	str	r1, [r7, #0]
     932:	687b      	ldr	r3, [r7, #4]
     934:	2b01      	cmp	r3, #1
     936:	d10c      	bne.n	952 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     938:	683b      	ldr	r3, [r7, #0]
     93a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     93e:	4293      	cmp	r3, r2
     940:	d107      	bne.n	952 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     942:	4806      	ldr	r0, [pc, #24]	; (95c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     944:	4b06      	ldr	r3, [pc, #24]	; (960 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     946:	4798      	blx	r3
     948:	4a06      	ldr	r2, [pc, #24]	; (964 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     94a:	4907      	ldr	r1, [pc, #28]	; (968 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     94c:	4803      	ldr	r0, [pc, #12]	; (95c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     94e:	4b07      	ldr	r3, [pc, #28]	; (96c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     950:	4798      	blx	r3
     952:	bf00      	nop
     954:	3708      	adds	r7, #8
     956:	46bd      	mov	sp, r7
     958:	bd80      	pop	{r7, pc}
     95a:	bf00      	nop
     95c:	20001350 	.word	0x20001350
     960:	000008e9 	.word	0x000008e9
     964:	20000000 	.word	0x20000000
     968:	000008fd 	.word	0x000008fd
     96c:	000167bd 	.word	0x000167bd

00000970 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
     970:	b580      	push	{r7, lr}
     972:	af00      	add	r7, sp, #0
     974:	f64f 71ff 	movw	r1, #65535	; 0xffff
     978:	2001      	movs	r0, #1
     97a:	4b01      	ldr	r3, [pc, #4]	; (980 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x10>)
     97c:	4798      	blx	r3
     97e:	bd80      	pop	{r7, pc}
     980:	00000929 	.word	0x00000929

00000984 <_ZN17ConfigState_ClassC1Ev>:
	
};


// default constructor
ConfigState_Class::ConfigState_Class()
     984:	b480      	push	{r7}
     986:	b083      	sub	sp, #12
     988:	af00      	add	r7, sp, #0
     98a:	6078      	str	r0, [r7, #4]
     98c:	4a12      	ldr	r2, [pc, #72]	; (9d8 <_ZN17ConfigState_ClassC1Ev+0x54>)
     98e:	687b      	ldr	r3, [r7, #4]
     990:	601a      	str	r2, [r3, #0]
{
	defaultState.currentState = kGAINStateReset;
     992:	687b      	ldr	r3, [r7, #4]
     994:	2200      	movs	r2, #0
     996:	621a      	str	r2, [r3, #32]
	defaultState.callingState = kGAINStateReset;
     998:	687b      	ldr	r3, [r7, #4]
     99a:	2200      	movs	r2, #0
     99c:	625a      	str	r2, [r3, #36]	; 0x24
	defaultState.internalCateringState = 0;
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	2200      	movs	r2, #0
     9a2:	629a      	str	r2, [r3, #40]	; 0x28
	//defaultState.targetUDC = 0.0;
	defaultState.cycleDuration = 0;
     9a4:	687b      	ldr	r3, [r7, #4]
     9a6:	2200      	movs	r2, #0
     9a8:	63da      	str	r2, [r3, #60]	; 0x3c
	defaultState.inStateTime = 0;
     9aa:	687b      	ldr	r3, [r7, #4]
     9ac:	2200      	movs	r2, #0
     9ae:	635a      	str	r2, [r3, #52]	; 0x34
	defaultState.remainingTime = 0;
     9b0:	687b      	ldr	r3, [r7, #4]
     9b2:	2200      	movs	r2, #0
     9b4:	641a      	str	r2, [r3, #64]	; 0x40
	defaultState.waitingExceededTime = 0;
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	2200      	movs	r2, #0
     9ba:	649a      	str	r2, [r3, #72]	; 0x48
	defaultState.fansOnAfterCateringCycleTime = forever;
     9bc:	4b07      	ldr	r3, [pc, #28]	; (9dc <_ZN17ConfigState_ClassC1Ev+0x58>)
     9be:	681a      	ldr	r2, [r3, #0]
     9c0:	687b      	ldr	r3, [r7, #4]
     9c2:	64da      	str	r2, [r3, #76]	; 0x4c
	defaultState.magic=0xCAFEBABE;
     9c4:	687b      	ldr	r3, [r7, #4]
     9c6:	4a06      	ldr	r2, [pc, #24]	; (9e0 <_ZN17ConfigState_ClassC1Ev+0x5c>)
     9c8:	605a      	str	r2, [r3, #4]
} //ConfigState_Class
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	4618      	mov	r0, r3
     9ce:	370c      	adds	r7, #12
     9d0:	46bd      	mov	sp, r7
     9d2:	bc80      	pop	{r7}
     9d4:	4770      	bx	lr
     9d6:	bf00      	nop
     9d8:	0001cc48 	.word	0x0001cc48
     9dc:	0001e478 	.word	0x0001e478
     9e0:	cafebabe 	.word	0xcafebabe

000009e4 <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
     9e4:	b480      	push	{r7}
     9e6:	b083      	sub	sp, #12
     9e8:	af00      	add	r7, sp, #0
     9ea:	6078      	str	r0, [r7, #4]
     9ec:	4a04      	ldr	r2, [pc, #16]	; (a00 <_ZN17ConfigState_ClassD1Ev+0x1c>)
     9ee:	687b      	ldr	r3, [r7, #4]
     9f0:	601a      	str	r2, [r3, #0]
{
} //~ConfigState_Class
     9f2:	687b      	ldr	r3, [r7, #4]
     9f4:	4618      	mov	r0, r3
     9f6:	370c      	adds	r7, #12
     9f8:	46bd      	mov	sp, r7
     9fa:	bc80      	pop	{r7}
     9fc:	4770      	bx	lr
     9fe:	bf00      	nop
     a00:	0001cc48 	.word	0x0001cc48

00000a04 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb>:

void ConfigState_Class::SetFactoryDefaults(uint32_t subPartNumber, bool config, bool cycles)
{
     a04:	b580      	push	{r7, lr}
     a06:	b084      	sub	sp, #16
     a08:	af00      	add	r7, sp, #0
     a0a:	60f8      	str	r0, [r7, #12]
     a0c:	60b9      	str	r1, [r7, #8]
     a0e:	4611      	mov	r1, r2
     a10:	461a      	mov	r2, r3
     a12:	460b      	mov	r3, r1
     a14:	71fb      	strb	r3, [r7, #7]
     a16:	4613      	mov	r3, r2
     a18:	71bb      	strb	r3, [r7, #6]
	
	if (config)
     a1a:	79fb      	ldrb	r3, [r7, #7]
     a1c:	2b00      	cmp	r3, #0
     a1e:	d00f      	beq.n	a40 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x3c>
	{
		memcpy(&configuration, &factoryDefaultsConfiguration, sizeof(configuration));
     a20:	68fb      	ldr	r3, [r7, #12]
     a22:	3364      	adds	r3, #100	; 0x64
     a24:	22ac      	movs	r2, #172	; 0xac
     a26:	4908      	ldr	r1, [pc, #32]	; (a48 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x44>)
     a28:	4618      	mov	r0, r3
     a2a:	4b08      	ldr	r3, [pc, #32]	; (a4c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x48>)
     a2c:	4798      	blx	r3
		configuration.commons.subPartNumber = subPartNumber;
     a2e:	68fb      	ldr	r3, [r7, #12]
     a30:	68ba      	ldr	r2, [r7, #8]
     a32:	671a      	str	r2, [r3, #112]	; 0x70
		memory.writeConfigurationDataArea(configuration);
     a34:	68fb      	ldr	r3, [r7, #12]
     a36:	3364      	adds	r3, #100	; 0x64
     a38:	4619      	mov	r1, r3
     a3a:	4805      	ldr	r0, [pc, #20]	; (a50 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x4c>)
     a3c:	4b05      	ldr	r3, [pc, #20]	; (a54 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x50>)
     a3e:	4798      	blx	r3
	}
	
	
}
     a40:	bf00      	nop
     a42:	3710      	adds	r7, #16
     a44:	46bd      	mov	sp, r7
     a46:	bd80      	pop	{r7, pc}
     a48:	0001c8a4 	.word	0x0001c8a4
     a4c:	00018b59 	.word	0x00018b59
     a50:	2000197c 	.word	0x2000197c
     a54:	00002075 	.word	0x00002075

00000a58 <_ZN17ConfigState_Class15SetInitialStateEv>:


uint32_t ConfigState_Class::SetInitialState(){
     a58:	b580      	push	{r7, lr}
     a5a:	b084      	sub	sp, #16
     a5c:	af00      	add	r7, sp, #0
     a5e:	6078      	str	r0, [r7, #4]
		uint32_t	r;
		r=memory.ReadApplicationState(lastState);
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
     a66:	4619      	mov	r1, r3
     a68:	4823      	ldr	r0, [pc, #140]	; (af8 <_ZN17ConfigState_Class15SetInitialStateEv+0xa0>)
     a6a:	4b24      	ldr	r3, [pc, #144]	; (afc <_ZN17ConfigState_Class15SetInitialStateEv+0xa4>)
     a6c:	4798      	blx	r3
     a6e:	60f8      	str	r0, [r7, #12]
		if (memory.IsStateDataValid(lastState))
     a70:	687b      	ldr	r3, [r7, #4]
     a72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
     a76:	4619      	mov	r1, r3
     a78:	4821      	ldr	r0, [pc, #132]	; (b00 <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
     a7a:	4b22      	ldr	r3, [pc, #136]	; (b04 <_ZN17ConfigState_Class15SetInitialStateEv+0xac>)
     a7c:	4798      	blx	r3
     a7e:	4603      	mov	r3, r0
     a80:	2b00      	cmp	r3, #0
     a82:	d007      	beq.n	a94 <_ZN17ConfigState_Class15SetInitialStateEv+0x3c>
		{
				hvac.SetCurrentState(lastState);
     a84:	687b      	ldr	r3, [r7, #4]
     a86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
     a8a:	4619      	mov	r1, r3
     a8c:	481e      	ldr	r0, [pc, #120]	; (b08 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     a8e:	4b1f      	ldr	r3, [pc, #124]	; (b0c <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
     a90:	4798      	blx	r3
     a92:	e02b      	b.n	aec <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
		} 
		else
		{	
			r=memory.ReadFastApplicationState(lastState);
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
     a9a:	4619      	mov	r1, r3
     a9c:	481c      	ldr	r0, [pc, #112]	; (b10 <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
     a9e:	4b1d      	ldr	r3, [pc, #116]	; (b14 <_ZN17ConfigState_Class15SetInitialStateEv+0xbc>)
     aa0:	4798      	blx	r3
     aa2:	60f8      	str	r0, [r7, #12]
			if (memory.IsFastStateDataValid(lastState))
     aa4:	687b      	ldr	r3, [r7, #4]
     aa6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
     aaa:	4619      	mov	r1, r3
     aac:	4814      	ldr	r0, [pc, #80]	; (b00 <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
     aae:	4b1a      	ldr	r3, [pc, #104]	; (b18 <_ZN17ConfigState_Class15SetInitialStateEv+0xc0>)
     ab0:	4798      	blx	r3
     ab2:	4603      	mov	r3, r0
     ab4:	2b00      	cmp	r3, #0
     ab6:	d00e      	beq.n	ad6 <_ZN17ConfigState_Class15SetInitialStateEv+0x7e>
			{
				hvac.SetCurrentState(lastState);
     ab8:	687b      	ldr	r3, [r7, #4]
     aba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
     abe:	4619      	mov	r1, r3
     ac0:	4811      	ldr	r0, [pc, #68]	; (b08 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     ac2:	4b12      	ldr	r3, [pc, #72]	; (b0c <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
     ac4:	4798      	blx	r3
				memory.SaveApplicationState(lastState);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
     acc:	4619      	mov	r1, r3
     ace:	4813      	ldr	r0, [pc, #76]	; (b1c <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
     ad0:	4b13      	ldr	r3, [pc, #76]	; (b20 <_ZN17ConfigState_Class15SetInitialStateEv+0xc8>)
     ad2:	4798      	blx	r3
     ad4:	e00a      	b.n	aec <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
			} 
			else
			{
				hvac.SetDefaultState();
     ad6:	480c      	ldr	r0, [pc, #48]	; (b08 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     ad8:	4b12      	ldr	r3, [pc, #72]	; (b24 <_ZN17ConfigState_Class15SetInitialStateEv+0xcc>)
     ada:	4798      	blx	r3
				memory.WriteValidApplicationState(hvac.defaultState);
     adc:	4912      	ldr	r1, [pc, #72]	; (b28 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
     ade:	480f      	ldr	r0, [pc, #60]	; (b1c <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
     ae0:	4b12      	ldr	r3, [pc, #72]	; (b2c <_ZN17ConfigState_Class15SetInitialStateEv+0xd4>)
     ae2:	4798      	blx	r3
				memory.WriteFastCurrentState(hvac.defaultState);
     ae4:	4910      	ldr	r1, [pc, #64]	; (b28 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
     ae6:	480a      	ldr	r0, [pc, #40]	; (b10 <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
     ae8:	4b11      	ldr	r3, [pc, #68]	; (b30 <_ZN17ConfigState_Class15SetInitialStateEv+0xd8>)
     aea:	4798      	blx	r3
			}
					
		
		}

		return r;
     aec:	68fb      	ldr	r3, [r7, #12]
	};
     aee:	4618      	mov	r0, r3
     af0:	3710      	adds	r7, #16
     af2:	46bd      	mov	sp, r7
     af4:	bd80      	pop	{r7, pc}
     af6:	bf00      	nop
     af8:	20001b00 	.word	0x20001b00
     afc:	00001ec5 	.word	0x00001ec5
     b00:	2000197c 	.word	0x2000197c
     b04:	00002279 	.word	0x00002279
     b08:	20002f48 	.word	0x20002f48
     b0c:	00003019 	.word	0x00003019
     b10:	20001af0 	.word	0x20001af0
     b14:	000010c1 	.word	0x000010c1
     b18:	000022bd 	.word	0x000022bd
     b1c:	20001490 	.word	0x20001490
     b20:	00001b21 	.word	0x00001b21
     b24:	00000c85 	.word	0x00000c85
     b28:	20002f4c 	.word	0x20002f4c
     b2c:	00001a81 	.word	0x00001a81
     b30:	00001109 	.word	0x00001109

00000b34 <_ZN17ConfigState_Class10PrintStateEv>:
		st=is;
	}
	s=uint32_t(st.rawStatus);
	return	s;
}
void	ConfigState_Class::PrintState(void){
     b34:	b580      	push	{r7, lr}
     b36:	b0a0      	sub	sp, #128	; 0x80
     b38:	af00      	add	r7, sp, #0
     b3a:	6078      	str	r0, [r7, #4]
	HVACState	hs;
	bool	done=false;
     b3c:	2300      	movs	r3, #0
     b3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	hvac.GetCurrentState(hs);
     b42:	f107 030c 	add.w	r3, r7, #12
     b46:	4619      	mov	r1, r3
     b48:	4840      	ldr	r0, [pc, #256]	; (c4c <_ZN17ConfigState_Class10PrintStateEv+0x118>)
     b4a:	4b41      	ldr	r3, [pc, #260]	; (c50 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
     b4c:	4798      	blx	r3
	uint32_t	nowTime=(uint32_t)hs.now;
     b4e:	693b      	ldr	r3, [r7, #16]
     b50:	60bb      	str	r3, [r7, #8]
	char *act=ctime((time_t *)&nowTime);
     b52:	f107 0308 	add.w	r3, r7, #8
     b56:	4618      	mov	r0, r3
     b58:	4b3e      	ldr	r3, [pc, #248]	; (c54 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
     b5a:	4798      	blx	r3
     b5c:	67b8      	str	r0, [r7, #120]	; 0x78
	k=sizeof(printableNamesHVACState)/(sizeof(char*));
     b5e:	687b      	ldr	r3, [r7, #4]
     b60:	2206      	movs	r2, #6
     b62:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
	for (i = 0; i < k; i++)
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	2200      	movs	r2, #0
     b6a:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
     b6e:	687b      	ldr	r3, [r7, #4]
     b70:	f893 327c 	ldrb.w	r3, [r3, #636]	; 0x27c
     b74:	461a      	mov	r2, r3
     b76:	687b      	ldr	r3, [r7, #4]
     b78:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
     b7c:	429a      	cmp	r2, r3
     b7e:	da61      	bge.n	c44 <_ZN17ConfigState_Class10PrintStateEv+0x110>
	{
	
		usb<<printableNamesHVACState[i]<<" : ";
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	f893 327c 	ldrb.w	r3, [r3, #636]	; 0x27c
     b86:	009b      	lsls	r3, r3, #2
     b88:	4a33      	ldr	r2, [pc, #204]	; (c58 <_ZN17ConfigState_Class10PrintStateEv+0x124>)
     b8a:	4413      	add	r3, r2
     b8c:	4619      	mov	r1, r3
     b8e:	4833      	ldr	r0, [pc, #204]	; (c5c <_ZN17ConfigState_Class10PrintStateEv+0x128>)
     b90:	4b33      	ldr	r3, [pc, #204]	; (c60 <_ZN17ConfigState_Class10PrintStateEv+0x12c>)
     b92:	4798      	blx	r3
     b94:	4603      	mov	r3, r0
     b96:	4933      	ldr	r1, [pc, #204]	; (c64 <_ZN17ConfigState_Class10PrintStateEv+0x130>)
     b98:	4618      	mov	r0, r3
     b9a:	4b33      	ldr	r3, [pc, #204]	; (c68 <_ZN17ConfigState_Class10PrintStateEv+0x134>)
     b9c:	4798      	blx	r3
	
		switch (i)
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	f893 327c 	ldrb.w	r3, [r3, #636]	; 0x27c
     ba4:	2b05      	cmp	r3, #5
     ba6:	d83a      	bhi.n	c1e <_ZN17ConfigState_Class10PrintStateEv+0xea>
     ba8:	a201      	add	r2, pc, #4	; (adr r2, bb0 <_ZN17ConfigState_Class10PrintStateEv+0x7c>)
     baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     bae:	bf00      	nop
     bb0:	00000bc9 	.word	0x00000bc9
     bb4:	00000bdb 	.word	0x00000bdb
     bb8:	00000bed 	.word	0x00000bed
     bbc:	00000c29 	.word	0x00000c29
     bc0:	00000bff 	.word	0x00000bff
     bc4:	00000c09 	.word	0x00000c09
		{
			case 0:
				usb<<(uint32_t)hs.currentState;
     bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
     bca:	66fb      	str	r3, [r7, #108]	; 0x6c
     bcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
     bd0:	4619      	mov	r1, r3
     bd2:	4822      	ldr	r0, [pc, #136]	; (c5c <_ZN17ConfigState_Class10PrintStateEv+0x128>)
     bd4:	4b25      	ldr	r3, [pc, #148]	; (c6c <_ZN17ConfigState_Class10PrintStateEv+0x138>)
     bd6:	4798      	blx	r3
			/* Your code here */
			break;
     bd8:	e027      	b.n	c2a <_ZN17ConfigState_Class10PrintStateEv+0xf6>
			case 1:
				usb<<(uint32_t)hs.cycleDuration;
     bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     bdc:	673b      	str	r3, [r7, #112]	; 0x70
     bde:	f107 0370 	add.w	r3, r7, #112	; 0x70
     be2:	4619      	mov	r1, r3
     be4:	481d      	ldr	r0, [pc, #116]	; (c5c <_ZN17ConfigState_Class10PrintStateEv+0x128>)
     be6:	4b21      	ldr	r3, [pc, #132]	; (c6c <_ZN17ConfigState_Class10PrintStateEv+0x138>)
     be8:	4798      	blx	r3
			/* Your code here */
			break;
     bea:	e01e      	b.n	c2a <_ZN17ConfigState_Class10PrintStateEv+0xf6>
			case 2:
				usb<<(uint32_t)hs.remainingTime;
     bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     bee:	677b      	str	r3, [r7, #116]	; 0x74
     bf0:	f107 0374 	add.w	r3, r7, #116	; 0x74
     bf4:	4619      	mov	r1, r3
     bf6:	4819      	ldr	r0, [pc, #100]	; (c5c <_ZN17ConfigState_Class10PrintStateEv+0x128>)
     bf8:	4b1c      	ldr	r3, [pc, #112]	; (c6c <_ZN17ConfigState_Class10PrintStateEv+0x138>)
     bfa:	4798      	blx	r3
			/* Your code here */
			break;
     bfc:	e015      	b.n	c2a <_ZN17ConfigState_Class10PrintStateEv+0xf6>
				//usb<<(uint32_t)hs.targetPower;
			/* Your code here */
			break;
			case 4:
				
				usb.print(act);
     bfe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
     c00:	4816      	ldr	r0, [pc, #88]	; (c5c <_ZN17ConfigState_Class10PrintStateEv+0x128>)
     c02:	4b1b      	ldr	r3, [pc, #108]	; (c70 <_ZN17ConfigState_Class10PrintStateEv+0x13c>)
     c04:	4798      	blx	r3
			/* Your code here */
			break;
     c06:	e010      	b.n	c2a <_ZN17ConfigState_Class10PrintStateEv+0xf6>
			case 5:
				usb<<"0x";
     c08:	491a      	ldr	r1, [pc, #104]	; (c74 <_ZN17ConfigState_Class10PrintStateEv+0x140>)
     c0a:	4814      	ldr	r0, [pc, #80]	; (c5c <_ZN17ConfigState_Class10PrintStateEv+0x128>)
     c0c:	4b1a      	ldr	r3, [pc, #104]	; (c78 <_ZN17ConfigState_Class10PrintStateEv+0x144>)
     c0e:	4798      	blx	r3
				usb.print(hs.magic,HEX);
     c10:	68fb      	ldr	r3, [r7, #12]
     c12:	2210      	movs	r2, #16
     c14:	4619      	mov	r1, r3
     c16:	4811      	ldr	r0, [pc, #68]	; (c5c <_ZN17ConfigState_Class10PrintStateEv+0x128>)
     c18:	4b18      	ldr	r3, [pc, #96]	; (c7c <_ZN17ConfigState_Class10PrintStateEv+0x148>)
     c1a:	4798      	blx	r3
			
				/* Your code here */
			break;
     c1c:	e005      	b.n	c2a <_ZN17ConfigState_Class10PrintStateEv+0xf6>
			default:
				i=sizeof(printableNamesHVACState);
     c1e:	687b      	ldr	r3, [r7, #4]
     c20:	2218      	movs	r2, #24
     c22:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
				
			/* Your code here */
			break;
     c26:	e000      	b.n	c2a <_ZN17ConfigState_Class10PrintStateEv+0xf6>
			break;
     c28:	bf00      	nop
		}
		usb<<NEWLINE;
     c2a:	4915      	ldr	r1, [pc, #84]	; (c80 <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     c2c:	480b      	ldr	r0, [pc, #44]	; (c5c <_ZN17ConfigState_Class10PrintStateEv+0x128>)
     c2e:	4b12      	ldr	r3, [pc, #72]	; (c78 <_ZN17ConfigState_Class10PrintStateEv+0x144>)
     c30:	4798      	blx	r3
	for (i = 0; i < k; i++)
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	f893 327c 	ldrb.w	r3, [r3, #636]	; 0x27c
     c38:	3301      	adds	r3, #1
     c3a:	b2da      	uxtb	r2, r3
     c3c:	687b      	ldr	r3, [r7, #4]
     c3e:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
     c42:	e794      	b.n	b6e <_ZN17ConfigState_Class10PrintStateEv+0x3a>
			
	}
	
}
     c44:	bf00      	nop
     c46:	3780      	adds	r7, #128	; 0x80
     c48:	46bd      	mov	sp, r7
     c4a:	bd80      	pop	{r7, pc}
     c4c:	20002f48 	.word	0x20002f48
     c50:	00002fc9 	.word	0x00002fc9
     c54:	00018871 	.word	0x00018871
     c58:	20000050 	.word	0x20000050
     c5c:	20005304 	.word	0x20005304
     c60:	00000ca9 	.word	0x00000ca9
     c64:	0001cc34 	.word	0x0001cc34
     c68:	00000ccd 	.word	0x00000ccd
     c6c:	00000ced 	.word	0x00000ced
     c70:	000159c9 	.word	0x000159c9
     c74:	0001cc38 	.word	0x0001cc38
     c78:	00000711 	.word	0x00000711
     c7c:	00015a35 	.word	0x00015a35
     c80:	0001cc3c 	.word	0x0001cc3c

00000c84 <_ZN17ConfigState_Class15SetDefaultStateEv>:
void	ConfigState_Class::SetDefaultState(void){
     c84:	b580      	push	{r7, lr}
     c86:	b082      	sub	sp, #8
     c88:	af00      	add	r7, sp, #0
     c8a:	6078      	str	r0, [r7, #4]
	hvac.SetCurrentState(defaultState);
     c8c:	687b      	ldr	r3, [r7, #4]
     c8e:	3304      	adds	r3, #4
     c90:	4619      	mov	r1, r3
     c92:	4803      	ldr	r0, [pc, #12]	; (ca0 <_ZN17ConfigState_Class15SetDefaultStateEv+0x1c>)
     c94:	4b03      	ldr	r3, [pc, #12]	; (ca4 <_ZN17ConfigState_Class15SetDefaultStateEv+0x20>)
     c96:	4798      	blx	r3

}
     c98:	bf00      	nop
     c9a:	3708      	adds	r7, #8
     c9c:	46bd      	mov	sp, r7
     c9e:	bd80      	pop	{r7, pc}
     ca0:	20002f48 	.word	0x20002f48
     ca4:	00003019 	.word	0x00003019

00000ca8 <_ZlsIPKcER5PrintS3_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     ca8:	b580      	push	{r7, lr}
     caa:	b082      	sub	sp, #8
     cac:	af00      	add	r7, sp, #0
     cae:	6078      	str	r0, [r7, #4]
     cb0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     cb2:	683b      	ldr	r3, [r7, #0]
     cb4:	681b      	ldr	r3, [r3, #0]
     cb6:	4619      	mov	r1, r3
     cb8:	6878      	ldr	r0, [r7, #4]
     cba:	4b03      	ldr	r3, [pc, #12]	; (cc8 <_ZlsIPKcER5PrintS3_RKT_+0x20>)
     cbc:	4798      	blx	r3
     cbe:	687b      	ldr	r3, [r7, #4]
     cc0:	4618      	mov	r0, r3
     cc2:	3708      	adds	r7, #8
     cc4:	46bd      	mov	sp, r7
     cc6:	bd80      	pop	{r7, pc}
     cc8:	000159c9 	.word	0x000159c9

00000ccc <_ZlsIA4_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     ccc:	b580      	push	{r7, lr}
     cce:	b082      	sub	sp, #8
     cd0:	af00      	add	r7, sp, #0
     cd2:	6078      	str	r0, [r7, #4]
     cd4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     cd6:	6839      	ldr	r1, [r7, #0]
     cd8:	6878      	ldr	r0, [r7, #4]
     cda:	4b03      	ldr	r3, [pc, #12]	; (ce8 <_ZlsIA4_cER5PrintS2_RKT_+0x1c>)
     cdc:	4798      	blx	r3
     cde:	687b      	ldr	r3, [r7, #4]
     ce0:	4618      	mov	r0, r3
     ce2:	3708      	adds	r7, #8
     ce4:	46bd      	mov	sp, r7
     ce6:	bd80      	pop	{r7, pc}
     ce8:	000159c9 	.word	0x000159c9

00000cec <_ZlsImER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     cec:	b580      	push	{r7, lr}
     cee:	b082      	sub	sp, #8
     cf0:	af00      	add	r7, sp, #0
     cf2:	6078      	str	r0, [r7, #4]
     cf4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     cf6:	683b      	ldr	r3, [r7, #0]
     cf8:	681b      	ldr	r3, [r3, #0]
     cfa:	220a      	movs	r2, #10
     cfc:	4619      	mov	r1, r3
     cfe:	6878      	ldr	r0, [r7, #4]
     d00:	4b03      	ldr	r3, [pc, #12]	; (d10 <_ZlsImER5PrintS1_RKT_+0x24>)
     d02:	4798      	blx	r3
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	4618      	mov	r0, r3
     d08:	3708      	adds	r7, #8
     d0a:	46bd      	mov	sp, r7
     d0c:	bd80      	pop	{r7, pc}
     d0e:	bf00      	nop
     d10:	00015a35 	.word	0x00015a35

00000d14 <_ZN11CRC32_ClassC1Ev>:

#include "CRC32_Class.h"
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
     d14:	b480      	push	{r7}
     d16:	b083      	sub	sp, #12
     d18:	af00      	add	r7, sp, #0
     d1a:	6078      	str	r0, [r7, #4]
{
} //CRC32_Class
     d1c:	687b      	ldr	r3, [r7, #4]
     d1e:	4618      	mov	r0, r3
     d20:	370c      	adds	r7, #12
     d22:	46bd      	mov	sp, r7
     d24:	bc80      	pop	{r7}
     d26:	4770      	bx	lr

00000d28 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
     d28:	b480      	push	{r7}
     d2a:	b083      	sub	sp, #12
     d2c:	af00      	add	r7, sp, #0
     d2e:	6078      	str	r0, [r7, #4]
{
} //~CRC32_Class
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	4618      	mov	r0, r3
     d34:	370c      	adds	r7, #12
     d36:	46bd      	mov	sp, r7
     d38:	bc80      	pop	{r7}
     d3a:	4770      	bx	lr

00000d3c <_ZN11CRC32_Class4InitEm>:

uint32_t	CRC32_Class::Init(uint32_t refCRC/* =0xFFFFFFFF */){
     d3c:	b580      	push	{r7, lr}
     d3e:	b082      	sub	sp, #8
     d40:	af00      	add	r7, sp, #0
     d42:	6078      	str	r0, [r7, #4]
     d44:	6039      	str	r1, [r7, #0]
	crc_sync_enable(&CRC_CALC);
     d46:	4806      	ldr	r0, [pc, #24]	; (d60 <_ZN11CRC32_Class4InitEm+0x24>)
     d48:	4b06      	ldr	r3, [pc, #24]	; (d64 <_ZN11CRC32_Class4InitEm+0x28>)
     d4a:	4798      	blx	r3
	refCRC32=refCRC;
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	683a      	ldr	r2, [r7, #0]
     d50:	601a      	str	r2, [r3, #0]
	return	refCRC32;
     d52:	687b      	ldr	r3, [r7, #4]
     d54:	681b      	ldr	r3, [r3, #0]
}
     d56:	4618      	mov	r0, r3
     d58:	3708      	adds	r7, #8
     d5a:	46bd      	mov	sp, r7
     d5c:	bd80      	pop	{r7, pc}
     d5e:	bf00      	nop
     d60:	20005800 	.word	0x20005800
     d64:	00004d4d 	.word	0x00004d4d

00000d68 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
     d68:	b590      	push	{r4, r7, lr}
     d6a:	b083      	sub	sp, #12
     d6c:	af00      	add	r7, sp, #0
     d6e:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
     d70:	4b07      	ldr	r3, [pc, #28]	; (d90 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
     d72:	6878      	ldr	r0, [r7, #4]
     d74:	4798      	blx	r3
     d76:	4603      	mov	r3, r0
     d78:	460c      	mov	r4, r1
     d7a:	4618      	mov	r0, r3
     d7c:	4621      	mov	r1, r4
     d7e:	4b05      	ldr	r3, [pc, #20]	; (d94 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x2c>)
     d80:	4798      	blx	r3
     d82:	4603      	mov	r3, r0
     d84:	460c      	mov	r4, r1
     d86:	4618      	mov	r0, r3
     d88:	4621      	mov	r1, r4
     d8a:	370c      	adds	r7, #12
     d8c:	46bd      	mov	sp, r7
     d8e:	bd90      	pop	{r4, r7, pc}
     d90:	00017cb9 	.word	0x00017cb9
     d94:	000167d1 	.word	0x000167d1

00000d98 <_ZN11CRC32_Class12CalculateCRCEPmm>:
	uint32_t	lenght32=(uint32_t)floor(len/4);
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
	return (crc^0xFFFFFFFF);
}

uint32_t	CRC32_Class::CalculateCRC(uint32_t *const data, const uint32_t len){
     d98:	b590      	push	{r4, r7, lr}
     d9a:	b087      	sub	sp, #28
     d9c:	af00      	add	r7, sp, #0
     d9e:	60f8      	str	r0, [r7, #12]
     da0:	60b9      	str	r1, [r7, #8]
     da2:	607a      	str	r2, [r7, #4]
	uint32_t	lenght32=(uint32_t)floor(len/4);
     da4:	687b      	ldr	r3, [r7, #4]
     da6:	089b      	lsrs	r3, r3, #2
     da8:	4618      	mov	r0, r3
     daa:	4b0f      	ldr	r3, [pc, #60]	; (de8 <_ZN11CRC32_Class12CalculateCRCEPmm+0x50>)
     dac:	4798      	blx	r3
     dae:	460a      	mov	r2, r1
     db0:	4601      	mov	r1, r0
     db2:	4b0e      	ldr	r3, [pc, #56]	; (dec <_ZN11CRC32_Class12CalculateCRCEPmm+0x54>)
     db4:	4608      	mov	r0, r1
     db6:	4611      	mov	r1, r2
     db8:	4798      	blx	r3
     dba:	4603      	mov	r3, r0
     dbc:	617b      	str	r3, [r7, #20]
	uint32_t crc=Init();
     dbe:	f04f 31ff 	mov.w	r1, #4294967295
     dc2:	68f8      	ldr	r0, [r7, #12]
     dc4:	4b0a      	ldr	r3, [pc, #40]	; (df0 <_ZN11CRC32_Class12CalculateCRCEPmm+0x58>)
     dc6:	4798      	blx	r3
     dc8:	4603      	mov	r3, r0
     dca:	613b      	str	r3, [r7, #16]
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
     dcc:	f107 0310 	add.w	r3, r7, #16
     dd0:	697a      	ldr	r2, [r7, #20]
     dd2:	68b9      	ldr	r1, [r7, #8]
     dd4:	4807      	ldr	r0, [pc, #28]	; (df4 <_ZN11CRC32_Class12CalculateCRCEPmm+0x5c>)
     dd6:	4c08      	ldr	r4, [pc, #32]	; (df8 <_ZN11CRC32_Class12CalculateCRCEPmm+0x60>)
     dd8:	47a0      	blx	r4
	return (crc^0xFFFFFFFF);
     dda:	693b      	ldr	r3, [r7, #16]
     ddc:	43db      	mvns	r3, r3
     dde:	4618      	mov	r0, r3
     de0:	371c      	adds	r7, #28
     de2:	46bd      	mov	sp, r7
     de4:	bd90      	pop	{r4, r7, pc}
     de6:	bf00      	nop
     de8:	00000d69 	.word	0x00000d69
     dec:	00018305 	.word	0x00018305
     df0:	00000d3d 	.word	0x00000d3d
     df4:	20005800 	.word	0x20005800
     df8:	00004d89 	.word	0x00004d89

00000dfc <_ZN15DataLoger_ClassC1Ev>:
#include "ConfigurationData.h"
#include "MemoryStruct_Class.h"
#include "N25Q256_Class.h"

// default constructor
DataLoger_Class::DataLoger_Class()
     dfc:	b580      	push	{r7, lr}
     dfe:	b082      	sub	sp, #8
     e00:	af00      	add	r7, sp, #0
     e02:	6078      	str	r0, [r7, #4]
     e04:	687b      	ldr	r3, [r7, #4]
     e06:	4618      	mov	r0, r3
     e08:	4b06      	ldr	r3, [pc, #24]	; (e24 <_ZN15DataLoger_ClassC1Ev+0x28>)
     e0a:	4798      	blx	r3
     e0c:	687b      	ldr	r3, [r7, #4]
     e0e:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
     e12:	4618      	mov	r0, r3
     e14:	4b04      	ldr	r3, [pc, #16]	; (e28 <_ZN15DataLoger_ClassC1Ev+0x2c>)
     e16:	4798      	blx	r3
{
} //DataLoger_Class
     e18:	687b      	ldr	r3, [r7, #4]
     e1a:	4618      	mov	r0, r3
     e1c:	3708      	adds	r7, #8
     e1e:	46bd      	mov	sp, r7
     e20:	bd80      	pop	{r7, pc}
     e22:	bf00      	nop
     e24:	00014225 	.word	0x00014225
     e28:	00000e61 	.word	0x00000e61

00000e2c <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
     e2c:	b580      	push	{r7, lr}
     e2e:	b082      	sub	sp, #8
     e30:	af00      	add	r7, sp, #0
     e32:	6078      	str	r0, [r7, #4]
     e34:	687b      	ldr	r3, [r7, #4]
     e36:	4618      	mov	r0, r3
     e38:	4b03      	ldr	r3, [pc, #12]	; (e48 <_ZN15DataLoger_ClassD1Ev+0x1c>)
     e3a:	4798      	blx	r3
{
} //~DataLoger_Class
     e3c:	687b      	ldr	r3, [r7, #4]
     e3e:	4618      	mov	r0, r3
     e40:	3708      	adds	r7, #8
     e42:	46bd      	mov	sp, r7
     e44:	bd80      	pop	{r7, pc}
     e46:	bf00      	nop
     e48:	00014261 	.word	0x00014261

00000e4c <_ZN15DataLoger_Class13LogResetEventEv>:
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)PTR_CONFIG_DATA(cd),add,sizeof(dataOnMemory));
	
	return	r;
}

uint32_t	DataLoger_Class::LogResetEvent(void){
     e4c:	b480      	push	{r7}
     e4e:	b083      	sub	sp, #12
     e50:	af00      	add	r7, sp, #0
     e52:	6078      	str	r0, [r7, #4]
	return 0;
     e54:	2300      	movs	r3, #0
     e56:	4618      	mov	r0, r3
     e58:	370c      	adds	r7, #12
     e5a:	46bd      	mov	sp, r7
     e5c:	bc80      	pop	{r7}
     e5e:	4770      	bx	lr

00000e60 <_ZN11RingBufferNILi512EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
     e60:	b580      	push	{r7, lr}
     e62:	b082      	sub	sp, #8
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
     e6e:	2100      	movs	r1, #0
     e70:	4618      	mov	r0, r3
     e72:	4b05      	ldr	r3, [pc, #20]	; (e88 <_ZN11RingBufferNILi512EEC1Ev+0x28>)
     e74:	4798      	blx	r3
    clear();
     e76:	6878      	ldr	r0, [r7, #4]
     e78:	4b04      	ldr	r3, [pc, #16]	; (e8c <_ZN11RingBufferNILi512EEC1Ev+0x2c>)
     e7a:	4798      	blx	r3
}
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	4618      	mov	r0, r3
     e80:	3708      	adds	r7, #8
     e82:	46bd      	mov	sp, r7
     e84:	bd80      	pop	{r7, pc}
     e86:	bf00      	nop
     e88:	00018c8d 	.word	0x00018c8d
     e8c:	00000e91 	.word	0x00000e91

00000e90 <_ZN11RingBufferNILi512EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
     e90:	b480      	push	{r7}
     e92:	b083      	sub	sp, #12
     e94:	af00      	add	r7, sp, #0
     e96:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
     e98:	687b      	ldr	r3, [r7, #4]
     e9a:	2200      	movs	r2, #0
     e9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  _iTail = 0;
     ea0:	687b      	ldr	r3, [r7, #4]
     ea2:	2200      	movs	r2, #0
     ea4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
     ea8:	bf00      	nop
     eaa:	370c      	adds	r7, #12
     eac:	46bd      	mov	sp, r7
     eae:	bc80      	pop	{r7}
     eb0:	4770      	bx	lr
	...

00000eb4 <_ZN14DateTime_ClassC1Ev>:

#include "DateTime_Class.h"
#include "FastStorage_Class.h"

// default constructor
DateTime_Class::DateTime_Class()
     eb4:	b580      	push	{r7, lr}
     eb6:	b082      	sub	sp, #8
     eb8:	af00      	add	r7, sp, #0
     eba:	6078      	str	r0, [r7, #4]
     ebc:	687b      	ldr	r3, [r7, #4]
     ebe:	33a8      	adds	r3, #168	; 0xa8
     ec0:	4618      	mov	r0, r3
     ec2:	4b07      	ldr	r3, [pc, #28]	; (ee0 <_ZN14DateTime_ClassC1Ev+0x2c>)
     ec4:	4798      	blx	r3
     ec6:	687b      	ldr	r3, [r7, #4]
     ec8:	4618      	mov	r0, r3
     eca:	4b06      	ldr	r3, [pc, #24]	; (ee4 <_ZN14DateTime_ClassC1Ev+0x30>)
     ecc:	4798      	blx	r3
     ece:	4a06      	ldr	r2, [pc, #24]	; (ee8 <_ZN14DateTime_ClassC1Ev+0x34>)
     ed0:	687b      	ldr	r3, [r7, #4]
     ed2:	601a      	str	r2, [r3, #0]
{
} //DateTime_Class
     ed4:	687b      	ldr	r3, [r7, #4]
     ed6:	4618      	mov	r0, r3
     ed8:	3708      	adds	r7, #8
     eda:	46bd      	mov	sp, r7
     edc:	bd80      	pop	{r7, pc}
     ede:	bf00      	nop
     ee0:	00001057 	.word	0x00001057
     ee4:	00014635 	.word	0x00014635
     ee8:	0001cc54 	.word	0x0001cc54

00000eec <_ZN14DateTime_ClassD1Ev>:

// default destructor
DateTime_Class::~DateTime_Class()
     eec:	b580      	push	{r7, lr}
     eee:	b082      	sub	sp, #8
     ef0:	af00      	add	r7, sp, #0
     ef2:	6078      	str	r0, [r7, #4]
     ef4:	4a08      	ldr	r2, [pc, #32]	; (f18 <_ZN14DateTime_ClassD1Ev+0x2c>)
     ef6:	687b      	ldr	r3, [r7, #4]
     ef8:	601a      	str	r2, [r3, #0]
     efa:	687b      	ldr	r3, [r7, #4]
     efc:	4618      	mov	r0, r3
     efe:	4b07      	ldr	r3, [pc, #28]	; (f1c <_ZN14DateTime_ClassD1Ev+0x30>)
     f00:	4798      	blx	r3
     f02:	687b      	ldr	r3, [r7, #4]
     f04:	33a8      	adds	r3, #168	; 0xa8
     f06:	4618      	mov	r0, r3
     f08:	4b05      	ldr	r3, [pc, #20]	; (f20 <_ZN14DateTime_ClassD1Ev+0x34>)
     f0a:	4798      	blx	r3
{
} //~DateTime_Class
     f0c:	687b      	ldr	r3, [r7, #4]
     f0e:	4618      	mov	r0, r3
     f10:	3708      	adds	r7, #8
     f12:	46bd      	mov	sp, r7
     f14:	bd80      	pop	{r7, pc}
     f16:	bf00      	nop
     f18:	0001cc54 	.word	0x0001cc54
     f1c:	000146a5 	.word	0x000146a5
     f20:	0000106b 	.word	0x0000106b

00000f24 <_ZN14DateTime_Class4InitEv>:

void	DateTime_Class::Init(){
     f24:	b580      	push	{r7, lr}
     f26:	b084      	sub	sp, #16
     f28:	af00      	add	r7, sp, #0
     f2a:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&eepromMap->stack;
     f2c:	4b0b      	ldr	r3, [pc, #44]	; (f5c <_ZN14DateTime_Class4InitEv+0x38>)
     f2e:	681b      	ldr	r3, [r3, #0]
     f30:	3368      	adds	r3, #104	; 0x68
     f32:	60fb      	str	r3, [r7, #12]
	calendar.SetCalendarStackAddress(add);
     f34:	68f9      	ldr	r1, [r7, #12]
     f36:	480a      	ldr	r0, [pc, #40]	; (f60 <_ZN14DateTime_Class4InitEv+0x3c>)
     f38:	4b0a      	ldr	r3, [pc, #40]	; (f64 <_ZN14DateTime_Class4InitEv+0x40>)
     f3a:	4798      	blx	r3
	uint32_t	addTimeLogs=(uint32_t)&eepromMap->timeLogs[0];
     f3c:	4b07      	ldr	r3, [pc, #28]	; (f5c <_ZN14DateTime_Class4InitEv+0x38>)
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	336c      	adds	r3, #108	; 0x6c
     f42:	60bb      	str	r3, [r7, #8]
	calendar.SetCalendarAddress(addTimeLogs);
     f44:	68b9      	ldr	r1, [r7, #8]
     f46:	4806      	ldr	r0, [pc, #24]	; (f60 <_ZN14DateTime_Class4InitEv+0x3c>)
     f48:	4b07      	ldr	r3, [pc, #28]	; (f68 <_ZN14DateTime_Class4InitEv+0x44>)
     f4a:	4798      	blx	r3
	calendar.Init();
     f4c:	4804      	ldr	r0, [pc, #16]	; (f60 <_ZN14DateTime_Class4InitEv+0x3c>)
     f4e:	4b07      	ldr	r3, [pc, #28]	; (f6c <_ZN14DateTime_Class4InitEv+0x48>)
     f50:	4798      	blx	r3
	
}
     f52:	bf00      	nop
     f54:	3710      	adds	r7, #16
     f56:	46bd      	mov	sp, r7
     f58:	bd80      	pop	{r7, pc}
     f5a:	bf00      	nop
     f5c:	20001410 	.word	0x20001410
     f60:	20005120 	.word	0x20005120
     f64:	00014fa5 	.word	0x00014fa5
     f68:	00014fc5 	.word	0x00014fc5
     f6c:	000146cd 	.word	0x000146cd

00000f70 <_Z41__static_initialization_and_destruction_0ii>:

     f70:	b580      	push	{r7, lr}
     f72:	b082      	sub	sp, #8
     f74:	af00      	add	r7, sp, #0
     f76:	6078      	str	r0, [r7, #4]
     f78:	6039      	str	r1, [r7, #0]
     f7a:	687b      	ldr	r3, [r7, #4]
     f7c:	2b01      	cmp	r3, #1
     f7e:	d10c      	bne.n	f9a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     f80:	683b      	ldr	r3, [r7, #0]
     f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
     f86:	4293      	cmp	r3, r2
     f88:	d107      	bne.n	f9a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     f8a:	4806      	ldr	r0, [pc, #24]	; (fa4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     f8c:	4b06      	ldr	r3, [pc, #24]	; (fa8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     f8e:	4798      	blx	r3
     f90:	4a06      	ldr	r2, [pc, #24]	; (fac <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     f92:	4907      	ldr	r1, [pc, #28]	; (fb0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     f94:	4803      	ldr	r0, [pc, #12]	; (fa4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     f96:	4b07      	ldr	r3, [pc, #28]	; (fb4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     f98:	4798      	blx	r3
     f9a:	bf00      	nop
     f9c:	3708      	adds	r7, #8
     f9e:	46bd      	mov	sp, r7
     fa0:	bd80      	pop	{r7, pc}
     fa2:	bf00      	nop
     fa4:	20001358 	.word	0x20001358
     fa8:	00000eb5 	.word	0x00000eb5
     fac:	20000000 	.word	0x20000000
     fb0:	00000eed 	.word	0x00000eed
     fb4:	000167bd 	.word	0x000167bd

00000fb8 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev>:
     fb8:	b580      	push	{r7, lr}
     fba:	af00      	add	r7, sp, #0
     fbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
     fc0:	2001      	movs	r0, #1
     fc2:	4b01      	ldr	r3, [pc, #4]	; (fc8 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x10>)
     fc4:	4798      	blx	r3
     fc6:	bd80      	pop	{r7, pc}
     fc8:	00000f71 	.word	0x00000f71

00000fcc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     fcc:	b580      	push	{r7, lr}
     fce:	b082      	sub	sp, #8
     fd0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     fd2:	4b16      	ldr	r3, [pc, #88]	; (102c <Reset_Handler+0x60>)
     fd4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     fd6:	4b16      	ldr	r3, [pc, #88]	; (1030 <Reset_Handler+0x64>)
     fd8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     fda:	687a      	ldr	r2, [r7, #4]
     fdc:	683b      	ldr	r3, [r7, #0]
     fde:	429a      	cmp	r2, r3
     fe0:	d00c      	beq.n	ffc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     fe2:	e007      	b.n	ff4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     fe4:	683b      	ldr	r3, [r7, #0]
     fe6:	1d1a      	adds	r2, r3, #4
     fe8:	603a      	str	r2, [r7, #0]
     fea:	687a      	ldr	r2, [r7, #4]
     fec:	1d11      	adds	r1, r2, #4
     fee:	6079      	str	r1, [r7, #4]
     ff0:	6812      	ldr	r2, [r2, #0]
     ff2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     ff4:	683b      	ldr	r3, [r7, #0]
     ff6:	4a0f      	ldr	r2, [pc, #60]	; (1034 <Reset_Handler+0x68>)
     ff8:	4293      	cmp	r3, r2
     ffa:	d3f3      	bcc.n	fe4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     ffc:	4b0e      	ldr	r3, [pc, #56]	; (1038 <Reset_Handler+0x6c>)
     ffe:	603b      	str	r3, [r7, #0]
    1000:	e004      	b.n	100c <Reset_Handler+0x40>
                *pDest++ = 0;
    1002:	683b      	ldr	r3, [r7, #0]
    1004:	1d1a      	adds	r2, r3, #4
    1006:	603a      	str	r2, [r7, #0]
    1008:	2200      	movs	r2, #0
    100a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    100c:	683b      	ldr	r3, [r7, #0]
    100e:	4a0b      	ldr	r2, [pc, #44]	; (103c <Reset_Handler+0x70>)
    1010:	4293      	cmp	r3, r2
    1012:	d3f6      	bcc.n	1002 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1014:	4b0a      	ldr	r3, [pc, #40]	; (1040 <Reset_Handler+0x74>)
    1016:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1018:	4a0a      	ldr	r2, [pc, #40]	; (1044 <Reset_Handler+0x78>)
    101a:	687b      	ldr	r3, [r7, #4]
    101c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1020:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
    1022:	4b09      	ldr	r3, [pc, #36]	; (1048 <Reset_Handler+0x7c>)
    1024:	4798      	blx	r3

        /* Branch to main function */
        main();
    1026:	4b09      	ldr	r3, [pc, #36]	; (104c <Reset_Handler+0x80>)
    1028:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    102a:	e7fe      	b.n	102a <Reset_Handler+0x5e>
    102c:	0001e8c0 	.word	0x0001e8c0
    1030:	20000000 	.word	0x20000000
    1034:	20000bd4 	.word	0x20000bd4
    1038:	20000bd8 	.word	0x20000bd8
    103c:	200058c0 	.word	0x200058c0
    1040:	00000000 	.word	0x00000000
    1044:	e000ed00 	.word	0xe000ed00
    1048:	000188c1 	.word	0x000188c1
    104c:	00001609 	.word	0x00001609

00001050 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1050:	b480      	push	{r7}
    1052:	af00      	add	r7, sp, #0
        while (1) {
    1054:	e7fe      	b.n	1054 <Dummy_Handler+0x4>

00001056 <_ZN17FastStorage_ClassC1Ev>:
#include "MemoryManagment_Class.h"

EEPROMMemoryStruct		*eepromMap=NULL;

// default constructor
FastStorage_Class::FastStorage_Class()
    1056:	b480      	push	{r7}
    1058:	b083      	sub	sp, #12
    105a:	af00      	add	r7, sp, #0
    105c:	6078      	str	r0, [r7, #4]
{
} //FastStorage_Class
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	4618      	mov	r0, r3
    1062:	370c      	adds	r7, #12
    1064:	46bd      	mov	sp, r7
    1066:	bc80      	pop	{r7}
    1068:	4770      	bx	lr

0000106a <_ZN17FastStorage_ClassD1Ev>:

// default destructor
FastStorage_Class::~FastStorage_Class()
    106a:	b480      	push	{r7}
    106c:	b083      	sub	sp, #12
    106e:	af00      	add	r7, sp, #0
    1070:	6078      	str	r0, [r7, #4]
{
} //~FastStorage_Class
    1072:	687b      	ldr	r3, [r7, #4]
    1074:	4618      	mov	r0, r3
    1076:	370c      	adds	r7, #12
    1078:	46bd      	mov	sp, r7
    107a:	bc80      	pop	{r7}
    107c:	4770      	bx	lr
	...

00001080 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv>:


uint32_t	FastStorage_Class::ReadFastCRCApplicationState(void){
    1080:	b590      	push	{r4, r7, lr}
    1082:	b087      	sub	sp, #28
    1084:	af00      	add	r7, sp, #0
    1086:	6078      	str	r0, [r7, #4]
	uint32_t	crc,add32;
	add32=(uint32_t)&eepromMap->crcAppState;
    1088:	4b0a      	ldr	r3, [pc, #40]	; (10b4 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x34>)
    108a:	681b      	ldr	r3, [r3, #0]
    108c:	3304      	adds	r3, #4
    108e:	617b      	str	r3, [r7, #20]
	eepromAddress=(uint16_t)(0xffff&add32);
    1090:	697b      	ldr	r3, [r7, #20]
    1092:	b29a      	uxth	r2, r3
    1094:	687b      	ldr	r3, [r7, #4]
    1096:	819a      	strh	r2, [r3, #12]
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(&crc),eepromAddress,sizeof(uint32_t));
    1098:	687b      	ldr	r3, [r7, #4]
    109a:	899a      	ldrh	r2, [r3, #12]
    109c:	f107 010c 	add.w	r1, r7, #12
    10a0:	2304      	movs	r3, #4
    10a2:	4805      	ldr	r0, [pc, #20]	; (10b8 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x38>)
    10a4:	4c05      	ldr	r4, [pc, #20]	; (10bc <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x3c>)
    10a6:	47a0      	blx	r4
    10a8:	6138      	str	r0, [r7, #16]
	return	crc;
    10aa:	68fb      	ldr	r3, [r7, #12]
}
    10ac:	4618      	mov	r0, r3
    10ae:	371c      	adds	r7, #28
    10b0:	46bd      	mov	sp, r7
    10b2:	bd90      	pop	{r4, r7, pc}
    10b4:	20001410 	.word	0x20001410
    10b8:	20004e70 	.word	0x20004e70
    10bc:	00013b25 	.word	0x00013b25

000010c0 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState>:
uint32_t	FastStorage_Class::ReadFastApplicationState(HVACState& hs){
    10c0:	b590      	push	{r4, r7, lr}
    10c2:	b085      	sub	sp, #20
    10c4:	af00      	add	r7, sp, #0
    10c6:	6078      	str	r0, [r7, #4]
    10c8:	6039      	str	r1, [r7, #0]
	uint32_t	crc,add32,r;
	add32=(uint32_t)&eepromMap->appState;
    10ca:	4b0c      	ldr	r3, [pc, #48]	; (10fc <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x3c>)
    10cc:	681b      	ldr	r3, [r3, #0]
    10ce:	3308      	adds	r3, #8
    10d0:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    10d2:	68fb      	ldr	r3, [r7, #12]
    10d4:	b29a      	uxth	r2, r3
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	819a      	strh	r2, [r3, #12]
	handlerAppState=PTR_HVAC_STATE(&hs);
    10da:	683a      	ldr	r2, [r7, #0]
    10dc:	687b      	ldr	r3, [r7, #4]
    10de:	601a      	str	r2, [r3, #0]
	r=eeprom.ReadAddress((uint8_t*)handlerAppState,eepromAddress,sizeof(HVACState));
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	6819      	ldr	r1, [r3, #0]
    10e4:	687b      	ldr	r3, [r7, #4]
    10e6:	899a      	ldrh	r2, [r3, #12]
    10e8:	2360      	movs	r3, #96	; 0x60
    10ea:	4805      	ldr	r0, [pc, #20]	; (1100 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x40>)
    10ec:	4c05      	ldr	r4, [pc, #20]	; (1104 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x44>)
    10ee:	47a0      	blx	r4
    10f0:	60b8      	str	r0, [r7, #8]
	return	r;
    10f2:	68bb      	ldr	r3, [r7, #8]
}
    10f4:	4618      	mov	r0, r3
    10f6:	3714      	adds	r7, #20
    10f8:	46bd      	mov	sp, r7
    10fa:	bd90      	pop	{r4, r7, pc}
    10fc:	20001410 	.word	0x20001410
    1100:	20004e70 	.word	0x20004e70
    1104:	00013b25 	.word	0x00013b25

00001108 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState>:
	eepromAddress=(uint16_t)(0xffff&add32);
	handlerCalendar=(PTR_DATE_TIME)(&cdt);
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(handlerCalendar),(uint8_t)eepromAddress,sizeof(calendar_date_time)*AT24MAC_BUFFER_SIZE);
	return	r;
}
uint32_t	FastStorage_Class::WriteFastCurrentState(HVACState& hs){
    1108:	b580      	push	{r7, lr}
    110a:	b084      	sub	sp, #16
    110c:	af00      	add	r7, sp, #0
    110e:	6078      	str	r0, [r7, #4]
    1110:	6039      	str	r1, [r7, #0]
	uint32_t	add32=(uint32_t)&eepromMap->appState;
    1112:	4b12      	ldr	r3, [pc, #72]	; (115c <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x54>)
    1114:	681b      	ldr	r3, [r3, #0]
    1116:	3308      	adds	r3, #8
    1118:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    111a:	68fb      	ldr	r3, [r7, #12]
    111c:	b29a      	uxth	r2, r3
    111e:	687b      	ldr	r3, [r7, #4]
    1120:	819a      	strh	r2, [r3, #12]
	uint32_t	w=WriteFastAppState(hs,eepromAddress);
    1122:	687b      	ldr	r3, [r7, #4]
    1124:	899b      	ldrh	r3, [r3, #12]
    1126:	461a      	mov	r2, r3
    1128:	6839      	ldr	r1, [r7, #0]
    112a:	6878      	ldr	r0, [r7, #4]
    112c:	4b0c      	ldr	r3, [pc, #48]	; (1160 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x58>)
    112e:	4798      	blx	r3
    1130:	60b8      	str	r0, [r7, #8]
	crc32=		memory.CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    1132:	2260      	movs	r2, #96	; 0x60
    1134:	6839      	ldr	r1, [r7, #0]
    1136:	480b      	ldr	r0, [pc, #44]	; (1164 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x5c>)
    1138:	4b0b      	ldr	r3, [pc, #44]	; (1168 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x60>)
    113a:	4798      	blx	r3
    113c:	4602      	mov	r2, r0
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	609a      	str	r2, [r3, #8]
	w=WriteFastCRCAppState(crc32);
    1142:	687b      	ldr	r3, [r7, #4]
    1144:	689b      	ldr	r3, [r3, #8]
    1146:	4619      	mov	r1, r3
    1148:	6878      	ldr	r0, [r7, #4]
    114a:	4b08      	ldr	r3, [pc, #32]	; (116c <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x64>)
    114c:	4798      	blx	r3
    114e:	60b8      	str	r0, [r7, #8]
	return	w;
    1150:	68bb      	ldr	r3, [r7, #8]
}
    1152:	4618      	mov	r0, r3
    1154:	3710      	adds	r7, #16
    1156:	46bd      	mov	sp, r7
    1158:	bd80      	pop	{r7, pc}
    115a:	bf00      	nop
    115c:	20001410 	.word	0x20001410
    1160:	00001171 	.word	0x00001171
    1164:	2000197c 	.word	0x2000197c
    1168:	00000d99 	.word	0x00000d99
    116c:	000011a9 	.word	0x000011a9

00001170 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem>:
uint32_t	FastStorage_Class::WriteFastAppState(HVACState& hs,uint32_t add){
    1170:	b590      	push	{r4, r7, lr}
    1172:	b087      	sub	sp, #28
    1174:	af00      	add	r7, sp, #0
    1176:	60f8      	str	r0, [r7, #12]
    1178:	60b9      	str	r1, [r7, #8]
    117a:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    117c:	68ba      	ldr	r2, [r7, #8]
    117e:	68fb      	ldr	r3, [r7, #12]
    1180:	601a      	str	r2, [r3, #0]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)handlerAppState,(uint16_t)add,sizeof(HVACState));
    1182:	68fb      	ldr	r3, [r7, #12]
    1184:	6819      	ldr	r1, [r3, #0]
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	b29a      	uxth	r2, r3
    118a:	2360      	movs	r3, #96	; 0x60
    118c:	4804      	ldr	r0, [pc, #16]	; (11a0 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x30>)
    118e:	4c05      	ldr	r4, [pc, #20]	; (11a4 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x34>)
    1190:	47a0      	blx	r4
    1192:	6178      	str	r0, [r7, #20]
	return	w;
    1194:	697b      	ldr	r3, [r7, #20]
}
    1196:	4618      	mov	r0, r3
    1198:	371c      	adds	r7, #28
    119a:	46bd      	mov	sp, r7
    119c:	bd90      	pop	{r4, r7, pc}
    119e:	bf00      	nop
    11a0:	20004e70 	.word	0x20004e70
    11a4:	00013a21 	.word	0x00013a21

000011a8 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm>:
uint32_t	FastStorage_Class::WriteFastCRCAppState(uint32_t crc){
    11a8:	b590      	push	{r4, r7, lr}
    11aa:	b085      	sub	sp, #20
    11ac:	af00      	add	r7, sp, #0
    11ae:	6078      	str	r0, [r7, #4]
    11b0:	6039      	str	r1, [r7, #0]
	uint16_t	add=(uint32_t)&eepromMap->crcAppState;
    11b2:	4b08      	ldr	r3, [pc, #32]	; (11d4 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x2c>)
    11b4:	681b      	ldr	r3, [r3, #0]
    11b6:	3304      	adds	r3, #4
    11b8:	81fb      	strh	r3, [r7, #14]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&crc),(uint16_t)add,sizeof(uint32_t));
    11ba:	89fa      	ldrh	r2, [r7, #14]
    11bc:	4639      	mov	r1, r7
    11be:	2304      	movs	r3, #4
    11c0:	4805      	ldr	r0, [pc, #20]	; (11d8 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x30>)
    11c2:	4c06      	ldr	r4, [pc, #24]	; (11dc <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x34>)
    11c4:	47a0      	blx	r4
    11c6:	60b8      	str	r0, [r7, #8]
	return	w;
    11c8:	68bb      	ldr	r3, [r7, #8]
    11ca:	4618      	mov	r0, r3
    11cc:	3714      	adds	r7, #20
    11ce:	46bd      	mov	sp, r7
    11d0:	bd90      	pop	{r4, r7, pc}
    11d2:	bf00      	nop
    11d4:	20001410 	.word	0x20001410
    11d8:	20004e70 	.word	0x20004e70
    11dc:	00013a21 	.word	0x00013a21

000011e0 <_ZN18FlapperValve_ClassC1Ev>:

#include "FlapperValve_Class.h"
#include "MCP23017_Class.h"

// default constructor
FlapperValve_Class::FlapperValve_Class()
    11e0:	b480      	push	{r7}
    11e2:	b083      	sub	sp, #12
    11e4:	af00      	add	r7, sp, #0
    11e6:	6078      	str	r0, [r7, #4]
{
} //FlapperValve_Class
    11e8:	687b      	ldr	r3, [r7, #4]
    11ea:	4618      	mov	r0, r3
    11ec:	370c      	adds	r7, #12
    11ee:	46bd      	mov	sp, r7
    11f0:	bc80      	pop	{r7}
    11f2:	4770      	bx	lr

000011f4 <_ZN18FlapperValve_ClassD1Ev>:

// default destructor
FlapperValve_Class::~FlapperValve_Class()
    11f4:	b480      	push	{r7}
    11f6:	b083      	sub	sp, #12
    11f8:	af00      	add	r7, sp, #0
    11fa:	6078      	str	r0, [r7, #4]
{
} //~FlapperValve_Class
    11fc:	687b      	ldr	r3, [r7, #4]
    11fe:	4618      	mov	r0, r3
    1200:	370c      	adds	r7, #12
    1202:	46bd      	mov	sp, r7
    1204:	bc80      	pop	{r7}
    1206:	4770      	bx	lr

00001208 <_ZN18FlapperValve_Class4InitEv>:
bool	FlapperValve_Class::Init(void){
    1208:	b580      	push	{r7, lr}
    120a:	b082      	sub	sp, #8
    120c:	af00      	add	r7, sp, #0
    120e:	6078      	str	r0, [r7, #4]
		return	mcp.Init();
    1210:	4803      	ldr	r0, [pc, #12]	; (1220 <_ZN18FlapperValve_Class4InitEv+0x18>)
    1212:	4b04      	ldr	r3, [pc, #16]	; (1224 <_ZN18FlapperValve_Class4InitEv+0x1c>)
    1214:	4798      	blx	r3
    1216:	4603      	mov	r3, r0
}
    1218:	4618      	mov	r0, r3
    121a:	3708      	adds	r7, #8
    121c:	46bd      	mov	sp, r7
    121e:	bd80      	pop	{r7, pc}
    1220:	20004dbc 	.word	0x20004dbc
    1224:	000129f5 	.word	0x000129f5

00001228 <_Z41__static_initialization_and_destruction_0ii>:
    1228:	b580      	push	{r7, lr}
    122a:	b082      	sub	sp, #8
    122c:	af00      	add	r7, sp, #0
    122e:	6078      	str	r0, [r7, #4]
    1230:	6039      	str	r1, [r7, #0]
    1232:	687b      	ldr	r3, [r7, #4]
    1234:	2b01      	cmp	r3, #1
    1236:	d10c      	bne.n	1252 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1238:	683b      	ldr	r3, [r7, #0]
    123a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    123e:	4293      	cmp	r3, r2
    1240:	d107      	bne.n	1252 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1242:	4806      	ldr	r0, [pc, #24]	; (125c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1244:	4b06      	ldr	r3, [pc, #24]	; (1260 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1246:	4798      	blx	r3
    1248:	4a06      	ldr	r2, [pc, #24]	; (1264 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    124a:	4907      	ldr	r1, [pc, #28]	; (1268 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    124c:	4803      	ldr	r0, [pc, #12]	; (125c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    124e:	4b07      	ldr	r3, [pc, #28]	; (126c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1250:	4798      	blx	r3
    1252:	bf00      	nop
    1254:	3708      	adds	r7, #8
    1256:	46bd      	mov	sp, r7
    1258:	bd80      	pop	{r7, pc}
    125a:	bf00      	nop
    125c:	20001414 	.word	0x20001414
    1260:	000011e1 	.word	0x000011e1
    1264:	20000000 	.word	0x20000000
    1268:	000011f5 	.word	0x000011f5
    126c:	000167bd 	.word	0x000167bd

00001270 <_GLOBAL__sub_I__ZN18FlapperValve_ClassC2Ev>:
    1270:	b580      	push	{r7, lr}
    1272:	af00      	add	r7, sp, #0
    1274:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1278:	2001      	movs	r0, #1
    127a:	4b01      	ldr	r3, [pc, #4]	; (1280 <_GLOBAL__sub_I__ZN18FlapperValve_ClassC2Ev+0x10>)
    127c:	4798      	blx	r3
    127e:	bd80      	pop	{r7, pc}
    1280:	00001229 	.word	0x00001229

00001284 <_ZN16Interfaces_ClassC1Ev>:
#include "ALU_Class.h"
#include "Error_Labelling_Class.h"
#include "Maintenance_Tool.h"

// default constructor
Interfaces_Class::Interfaces_Class()
    1284:	b480      	push	{r7}
    1286:	b083      	sub	sp, #12
    1288:	af00      	add	r7, sp, #0
    128a:	6078      	str	r0, [r7, #4]
{
} //Interfaces_Class
    128c:	687b      	ldr	r3, [r7, #4]
    128e:	4618      	mov	r0, r3
    1290:	370c      	adds	r7, #12
    1292:	46bd      	mov	sp, r7
    1294:	bc80      	pop	{r7}
    1296:	4770      	bx	lr

00001298 <_ZN16Interfaces_ClassD1Ev>:

// default destructor
Interfaces_Class::~Interfaces_Class()
    1298:	b480      	push	{r7}
    129a:	b083      	sub	sp, #12
    129c:	af00      	add	r7, sp, #0
    129e:	6078      	str	r0, [r7, #4]
{
} //~Interfaces_Class
    12a0:	687b      	ldr	r3, [r7, #4]
    12a2:	4618      	mov	r0, r3
    12a4:	370c      	adds	r7, #12
    12a6:	46bd      	mov	sp, r7
    12a8:	bc80      	pop	{r7}
    12aa:	4770      	bx	lr

000012ac <_ZN16Interfaces_Class4InitEv>:

bool	Interfaces_Class::Init(){
    12ac:	b580      	push	{r7, lr}
    12ae:	b084      	sub	sp, #16
    12b0:	af00      	add	r7, sp, #0
    12b2:	6078      	str	r0, [r7, #4]
	result=arinc.Init();
    12b4:	4815      	ldr	r0, [pc, #84]	; (130c <_ZN16Interfaces_Class4InitEv+0x60>)
    12b6:	4b16      	ldr	r3, [pc, #88]	; (1310 <_ZN16Interfaces_Class4InitEv+0x64>)
    12b8:	4798      	blx	r3
    12ba:	4603      	mov	r3, r0
    12bc:	461a      	mov	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	66da      	str	r2, [r3, #108]	; 0x6c
	if (result==0x01)
    12c2:	687b      	ldr	r3, [r7, #4]
    12c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    12c6:	2b01      	cmp	r3, #1
    12c8:	d106      	bne.n	12d8 <_ZN16Interfaces_Class4InitEv+0x2c>
	{
		arinc.TrasmitSingleLabel();
    12ca:	4810      	ldr	r0, [pc, #64]	; (130c <_ZN16Interfaces_Class4InitEv+0x60>)
    12cc:	4b11      	ldr	r3, [pc, #68]	; (1314 <_ZN16Interfaces_Class4InitEv+0x68>)
    12ce:	4798      	blx	r3
		if (maintenance.IsAppConnected())
    12d0:	4811      	ldr	r0, [pc, #68]	; (1318 <_ZN16Interfaces_Class4InitEv+0x6c>)
    12d2:	4b12      	ldr	r3, [pc, #72]	; (131c <_ZN16Interfaces_Class4InitEv+0x70>)
    12d4:	4798      	blx	r3
    12d6:	e00e      	b.n	12f6 <_ZN16Interfaces_Class4InitEv+0x4a>
		{
		}
	} 
	else
	{
		alu.NotifyError(kARINCINnterfaceError,result);
    12d8:	687b      	ldr	r3, [r7, #4]
    12da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    12dc:	f107 030c 	add.w	r3, r7, #12
    12e0:	4611      	mov	r1, r2
    12e2:	4618      	mov	r0, r3
    12e4:	4b0e      	ldr	r3, [pc, #56]	; (1320 <_ZN16Interfaces_Class4InitEv+0x74>)
    12e6:	4798      	blx	r3
    12e8:	f107 030c 	add.w	r3, r7, #12
    12ec:	461a      	mov	r2, r3
    12ee:	2100      	movs	r1, #0
    12f0:	480c      	ldr	r0, [pc, #48]	; (1324 <_ZN16Interfaces_Class4InitEv+0x78>)
    12f2:	4b0d      	ldr	r3, [pc, #52]	; (1328 <_ZN16Interfaces_Class4InitEv+0x7c>)
    12f4:	4798      	blx	r3
	}
	return result;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    12fa:	2b00      	cmp	r3, #0
    12fc:	bf14      	ite	ne
    12fe:	2301      	movne	r3, #1
    1300:	2300      	moveq	r3, #0
    1302:	b2db      	uxtb	r3, r3
}
    1304:	4618      	mov	r0, r3
    1306:	3710      	adds	r7, #16
    1308:	46bd      	mov	sp, r7
    130a:	bd80      	pop	{r7, pc}
    130c:	20003a4c 	.word	0x20003a4c
    1310:	000114b9 	.word	0x000114b9
    1314:	000116e5 	.word	0x000116e5
    1318:	20005458 	.word	0x20005458
    131c:	00016669 	.word	0x00016669
    1320:	000002d1 	.word	0x000002d1
    1324:	20000bf8 	.word	0x20000bf8
    1328:	000006bd 	.word	0x000006bd

0000132c <_ZN16Interfaces_Class18CheckCommunicationEv>:

CommunicationRequest Interfaces_Class::CheckCommunication(void)
{
    132c:	b580      	push	{r7, lr}
    132e:	b082      	sub	sp, #8
    1330:	af00      	add	r7, sp, #0
    1332:	6078      	str	r0, [r7, #4]
    1334:	6039      	str	r1, [r7, #0]
	CommunicationRequest	r;
	CheckInternalCommunication();
    1336:	6838      	ldr	r0, [r7, #0]
    1338:	4b08      	ldr	r3, [pc, #32]	; (135c <_ZN16Interfaces_Class18CheckCommunicationEv+0x30>)
    133a:	4798      	blx	r3
	CheckExternalCommunication();
    133c:	6838      	ldr	r0, [r7, #0]
    133e:	4b08      	ldr	r3, [pc, #32]	; (1360 <_ZN16Interfaces_Class18CheckCommunicationEv+0x34>)
    1340:	4798      	blx	r3
	r=request;
    1342:	687a      	ldr	r2, [r7, #4]
    1344:	683b      	ldr	r3, [r7, #0]
    1346:	3370      	adds	r3, #112	; 0x70
    1348:	6818      	ldr	r0, [r3, #0]
    134a:	6010      	str	r0, [r2, #0]
    134c:	791b      	ldrb	r3, [r3, #4]
    134e:	7113      	strb	r3, [r2, #4]
	
	return	r;
    1350:	bf00      	nop
}
    1352:	6878      	ldr	r0, [r7, #4]
    1354:	3708      	adds	r7, #8
    1356:	46bd      	mov	sp, r7
    1358:	bd80      	pop	{r7, pc}
    135a:	bf00      	nop
    135c:	00001365 	.word	0x00001365
    1360:	000013a5 	.word	0x000013a5

00001364 <_ZN16Interfaces_Class26CheckInternalCommunicationEv>:

uint32_t Interfaces_Class::CheckInternalCommunication(void)
{
    1364:	b580      	push	{r7, lr}
    1366:	b084      	sub	sp, #16
    1368:	af00      	add	r7, sp, #0
    136a:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    136c:	2300      	movs	r3, #0
    136e:	60fb      	str	r3, [r7, #12]
	request.internRequest.I2CExpanderGotMessage=CheckI2CExpander(1);
    1370:	2101      	movs	r1, #1
    1372:	6878      	ldr	r0, [r7, #4]
    1374:	4b09      	ldr	r3, [pc, #36]	; (139c <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x38>)
    1376:	4798      	blx	r3
    1378:	4603      	mov	r3, r0
    137a:	461a      	mov	r2, r3
    137c:	687b      	ldr	r3, [r7, #4]
    137e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	request.internRequest.LTC2983GotMessage=CheckLTC2983();
    1382:	6878      	ldr	r0, [r7, #4]
    1384:	4b06      	ldr	r3, [pc, #24]	; (13a0 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x3c>)
    1386:	4798      	blx	r3
    1388:	4603      	mov	r3, r0
    138a:	461a      	mov	r2, r3
    138c:	687b      	ldr	r3, [r7, #4]
    138e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	return	0;
    1392:	2300      	movs	r3, #0
}
    1394:	4618      	mov	r0, r3
    1396:	3710      	adds	r7, #16
    1398:	46bd      	mov	sp, r7
    139a:	bd80      	pop	{r7, pc}
    139c:	000013ed 	.word	0x000013ed
    13a0:	000014a9 	.word	0x000014a9

000013a4 <_ZN16Interfaces_Class26CheckExternalCommunicationEv>:
uint32_t Interfaces_Class::CheckExternalCommunication(void)
{
    13a4:	b580      	push	{r7, lr}
    13a6:	b084      	sub	sp, #16
    13a8:	af00      	add	r7, sp, #0
    13aa:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    13ac:	2300      	movs	r3, #0
    13ae:	60fb      	str	r3, [r7, #12]

	request.externRequest.arinc1GotMessage=arinc.newMessageR1;
    13b0:	4b0c      	ldr	r3, [pc, #48]	; (13e4 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x40>)
    13b2:	7c1b      	ldrb	r3, [r3, #16]
    13b4:	b2da      	uxtb	r2, r3
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	request.externRequest.arinc1GotMessage=arinc.newMessageR2;
    13bc:	4b09      	ldr	r3, [pc, #36]	; (13e4 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x40>)
    13be:	7c5b      	ldrb	r3, [r3, #17]
    13c0:	b2da      	uxtb	r2, r3
    13c2:	687b      	ldr	r3, [r7, #4]
    13c4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	request.externRequest.USBGotMessage=CheckUSBInterface();
    13c8:	6878      	ldr	r0, [r7, #4]
    13ca:	4b07      	ldr	r3, [pc, #28]	; (13e8 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x44>)
    13cc:	4798      	blx	r3
    13ce:	4603      	mov	r3, r0
    13d0:	461a      	mov	r2, r3
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	return	0;
    13d8:	2300      	movs	r3, #0
}
    13da:	4618      	mov	r0, r3
    13dc:	3710      	adds	r7, #16
    13de:	46bd      	mov	sp, r7
    13e0:	bd80      	pop	{r7, pc}
    13e2:	bf00      	nop
    13e4:	20003a4c 	.word	0x20003a4c
    13e8:	00001425 	.word	0x00001425

000013ec <_ZN16Interfaces_Class16CheckI2CExpanderEh>:
bool	Interfaces_Class::CheckI2CExpander(uint8_t add){
    13ec:	b580      	push	{r7, lr}
    13ee:	b082      	sub	sp, #8
    13f0:	af00      	add	r7, sp, #0
    13f2:	6078      	str	r0, [r7, #4]
    13f4:	460b      	mov	r3, r1
    13f6:	70fb      	strb	r3, [r7, #3]
		if (mcp.hasChanged)
    13f8:	4b08      	ldr	r3, [pc, #32]	; (141c <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    13fa:	785b      	ldrb	r3, [r3, #1]
    13fc:	b2db      	uxtb	r3, r3
    13fe:	2b00      	cmp	r3, #0
    1400:	d005      	beq.n	140e <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x22>
		{
			mcp.SavePorts();
    1402:	4806      	ldr	r0, [pc, #24]	; (141c <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    1404:	4b06      	ldr	r3, [pc, #24]	; (1420 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x34>)
    1406:	4798      	blx	r3
			mcp.hasChanged=false;
    1408:	4b04      	ldr	r3, [pc, #16]	; (141c <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    140a:	2200      	movs	r2, #0
    140c:	705a      	strb	r2, [r3, #1]
		}
		return	mcp.hasChanged;
    140e:	4b03      	ldr	r3, [pc, #12]	; (141c <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    1410:	785b      	ldrb	r3, [r3, #1]
    1412:	b2db      	uxtb	r3, r3
}
    1414:	4618      	mov	r0, r3
    1416:	3708      	adds	r7, #8
    1418:	46bd      	mov	sp, r7
    141a:	bd80      	pop	{r7, pc}
    141c:	20004dbc 	.word	0x20004dbc
    1420:	0001300d 	.word	0x0001300d

00001424 <_ZN16Interfaces_Class17CheckUSBInterfaceEv>:
bool	Interfaces_Class::CheckUSBInterface(void){
    1424:	b580      	push	{r7, lr}
    1426:	b082      	sub	sp, #8
    1428:	af00      	add	r7, sp, #0
    142a:	6078      	str	r0, [r7, #4]
		if (usb.connected)
    142c:	4b13      	ldr	r3, [pc, #76]	; (147c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    142e:	7c1b      	ldrb	r3, [r3, #16]
    1430:	b2db      	uxtb	r3, r3
    1432:	2b00      	cmp	r3, #0
    1434:	d01b      	beq.n	146e <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x4a>
		{
			if (maintenance.IsAppConnected())
    1436:	4812      	ldr	r0, [pc, #72]	; (1480 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x5c>)
    1438:	4b12      	ldr	r3, [pc, #72]	; (1484 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x60>)
    143a:	4798      	blx	r3
    143c:	4603      	mov	r3, r0
    143e:	2b00      	cmp	r3, #0
    1440:	d009      	beq.n	1456 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x32>
			{
				usb<<"Maintenance Tool Locked"<<NEWLINE;
    1442:	4911      	ldr	r1, [pc, #68]	; (1488 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x64>)
    1444:	480d      	ldr	r0, [pc, #52]	; (147c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    1446:	4b11      	ldr	r3, [pc, #68]	; (148c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x68>)
    1448:	4798      	blx	r3
    144a:	4603      	mov	r3, r0
    144c:	4910      	ldr	r1, [pc, #64]	; (1490 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x6c>)
    144e:	4618      	mov	r0, r3
    1450:	4b10      	ldr	r3, [pc, #64]	; (1494 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x70>)
    1452:	4798      	blx	r3
    1454:	e008      	b.n	1468 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x44>
			} 
			else
			{
				usb<<"Remote operation Disabled"<<NEWLINE;
    1456:	4910      	ldr	r1, [pc, #64]	; (1498 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x74>)
    1458:	4808      	ldr	r0, [pc, #32]	; (147c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    145a:	4b10      	ldr	r3, [pc, #64]	; (149c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x78>)
    145c:	4798      	blx	r3
    145e:	4603      	mov	r3, r0
    1460:	490b      	ldr	r1, [pc, #44]	; (1490 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x6c>)
    1462:	4618      	mov	r0, r3
    1464:	4b0b      	ldr	r3, [pc, #44]	; (1494 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x70>)
    1466:	4798      	blx	r3
			}
			hvac.PrintState();
    1468:	480d      	ldr	r0, [pc, #52]	; (14a0 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x7c>)
    146a:	4b0e      	ldr	r3, [pc, #56]	; (14a4 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x80>)
    146c:	4798      	blx	r3
		}else{
						
		}
		return	usb.connected;
    146e:	4b03      	ldr	r3, [pc, #12]	; (147c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    1470:	7c1b      	ldrb	r3, [r3, #16]
    1472:	b2db      	uxtb	r3, r3
}
    1474:	4618      	mov	r0, r3
    1476:	3708      	adds	r7, #8
    1478:	46bd      	mov	sp, r7
    147a:	bd80      	pop	{r7, pc}
    147c:	20005304 	.word	0x20005304
    1480:	20005458 	.word	0x20005458
    1484:	00016669 	.word	0x00016669
    1488:	0001cc5c 	.word	0x0001cc5c
    148c:	0000156d 	.word	0x0000156d
    1490:	0001cc74 	.word	0x0001cc74
    1494:	00000711 	.word	0x00000711
    1498:	0001cc78 	.word	0x0001cc78
    149c:	0000158d 	.word	0x0000158d
    14a0:	20002f48 	.word	0x20002f48
    14a4:	00000b35 	.word	0x00000b35

000014a8 <_ZN16Interfaces_Class12CheckLTC2983Ev>:

bool	Interfaces_Class::CheckLTC2983(void){
    14a8:	b580      	push	{r7, lr}
    14aa:	b082      	sub	sp, #8
    14ac:	af00      	add	r7, sp, #0
    14ae:	6078      	str	r0, [r7, #4]
	if (temperatures.conversionFinished)
    14b0:	4b15      	ldr	r3, [pc, #84]	; (1508 <_ZN16Interfaces_Class12CheckLTC2983Ev+0x60>)
    14b2:	7a5b      	ldrb	r3, [r3, #9]
    14b4:	b2db      	uxtb	r3, r3
    14b6:	2b00      	cmp	r3, #0
    14b8:	d01f      	beq.n	14fa <_ZN16Interfaces_Class12CheckLTC2983Ev+0x52>
	{
		for (i = 0; i <NUMBER_TEMPERATURE_CHANNELS ; i++)
    14ba:	687b      	ldr	r3, [r7, #4]
    14bc:	2200      	movs	r2, #0
    14be:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    14c8:	2b02      	cmp	r3, #2
    14ca:	dc13      	bgt.n	14f4 <_ZN16Interfaces_Class12CheckLTC2983Ev+0x4c>
		{
			temperatures.SaveChannelValue(temperatures.activeChannels[i]);
    14cc:	687b      	ldr	r3, [r7, #4]
    14ce:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    14d2:	461a      	mov	r2, r3
    14d4:	4b0c      	ldr	r3, [pc, #48]	; (1508 <_ZN16Interfaces_Class12CheckLTC2983Ev+0x60>)
    14d6:	4413      	add	r3, r2
    14d8:	7a9b      	ldrb	r3, [r3, #10]
    14da:	4619      	mov	r1, r3
    14dc:	480a      	ldr	r0, [pc, #40]	; (1508 <_ZN16Interfaces_Class12CheckLTC2983Ev+0x60>)
    14de:	4b0b      	ldr	r3, [pc, #44]	; (150c <_ZN16Interfaces_Class12CheckLTC2983Ev+0x64>)
    14e0:	4798      	blx	r3
		for (i = 0; i <NUMBER_TEMPERATURE_CHANNELS ; i++)
    14e2:	687b      	ldr	r3, [r7, #4]
    14e4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    14e8:	3301      	adds	r3, #1
    14ea:	b2da      	uxtb	r2, r3
    14ec:	687b      	ldr	r3, [r7, #4]
    14ee:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    14f2:	e7e6      	b.n	14c2 <_ZN16Interfaces_Class12CheckLTC2983Ev+0x1a>
		}
		temperatures.conversionFinished=0;
    14f4:	4b04      	ldr	r3, [pc, #16]	; (1508 <_ZN16Interfaces_Class12CheckLTC2983Ev+0x60>)
    14f6:	2200      	movs	r2, #0
    14f8:	725a      	strb	r2, [r3, #9]
	} 
	else
	{
	}
	return	temperatures.conversionFinished;
    14fa:	4b03      	ldr	r3, [pc, #12]	; (1508 <_ZN16Interfaces_Class12CheckLTC2983Ev+0x60>)
    14fc:	7a5b      	ldrb	r3, [r3, #9]
    14fe:	b2db      	uxtb	r3, r3
}
    1500:	4618      	mov	r0, r3
    1502:	3708      	adds	r7, #8
    1504:	46bd      	mov	sp, r7
    1506:	bd80      	pop	{r7, pc}
    1508:	20004e04 	.word	0x20004e04
    150c:	0001321d 	.word	0x0001321d

00001510 <_ZN16Interfaces_Class9GetStatusER10HVACStatus>:
	{
		
	}
	return	arinc.newMessageR1||arinc.newMessageR2;
}
uint32_t	Interfaces_Class::GetStatus(HVACStatus& s){
    1510:	b480      	push	{r7}
    1512:	b085      	sub	sp, #20
    1514:	af00      	add	r7, sp, #0
    1516:	6078      	str	r0, [r7, #4]
    1518:	6039      	str	r1, [r7, #0]
	s=status;
    151a:	683a      	ldr	r2, [r7, #0]
    151c:	687b      	ldr	r3, [r7, #4]
    151e:	3360      	adds	r3, #96	; 0x60
    1520:	e893 0003 	ldmia.w	r3, {r0, r1}
    1524:	e882 0003 	stmia.w	r2, {r0, r1}
	uint32_t	*p=(uint32_t*)(&s.statusBits);
    1528:	683b      	ldr	r3, [r7, #0]
    152a:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    152c:	2300      	movs	r3, #0
    152e:	60bb      	str	r3, [r7, #8]
    1530:	68bb      	ldr	r3, [r7, #8]
    1532:	2b03      	cmp	r3, #3
    1534:	d812      	bhi.n	155c <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x4c>
	{
		s.rawStatus+=(*p)&(0x01<<i);
    1536:	683b      	ldr	r3, [r7, #0]
    1538:	685a      	ldr	r2, [r3, #4]
    153a:	68fb      	ldr	r3, [r7, #12]
    153c:	681b      	ldr	r3, [r3, #0]
    153e:	2001      	movs	r0, #1
    1540:	68b9      	ldr	r1, [r7, #8]
    1542:	fa00 f101 	lsl.w	r1, r0, r1
    1546:	400b      	ands	r3, r1
    1548:	441a      	add	r2, r3
    154a:	683b      	ldr	r3, [r7, #0]
    154c:	605a      	str	r2, [r3, #4]
		p++;
    154e:	68fb      	ldr	r3, [r7, #12]
    1550:	3304      	adds	r3, #4
    1552:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    1554:	68bb      	ldr	r3, [r7, #8]
    1556:	3301      	adds	r3, #1
    1558:	60bb      	str	r3, [r7, #8]
    155a:	e7e9      	b.n	1530 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x20>
	}
	return	status.rawStatus;
    155c:	687b      	ldr	r3, [r7, #4]
    155e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    1560:	4618      	mov	r0, r3
    1562:	3714      	adds	r7, #20
    1564:	46bd      	mov	sp, r7
    1566:	bc80      	pop	{r7}
    1568:	4770      	bx	lr
	...

0000156c <_ZlsIA24_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    156c:	b580      	push	{r7, lr}
    156e:	b082      	sub	sp, #8
    1570:	af00      	add	r7, sp, #0
    1572:	6078      	str	r0, [r7, #4]
    1574:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1576:	6839      	ldr	r1, [r7, #0]
    1578:	6878      	ldr	r0, [r7, #4]
    157a:	4b03      	ldr	r3, [pc, #12]	; (1588 <_ZlsIA24_cER5PrintS2_RKT_+0x1c>)
    157c:	4798      	blx	r3
    157e:	687b      	ldr	r3, [r7, #4]
    1580:	4618      	mov	r0, r3
    1582:	3708      	adds	r7, #8
    1584:	46bd      	mov	sp, r7
    1586:	bd80      	pop	{r7, pc}
    1588:	000159c9 	.word	0x000159c9

0000158c <_ZlsIA26_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    158c:	b580      	push	{r7, lr}
    158e:	b082      	sub	sp, #8
    1590:	af00      	add	r7, sp, #0
    1592:	6078      	str	r0, [r7, #4]
    1594:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1596:	6839      	ldr	r1, [r7, #0]
    1598:	6878      	ldr	r0, [r7, #4]
    159a:	4b03      	ldr	r3, [pc, #12]	; (15a8 <_ZlsIA26_cER5PrintS2_RKT_+0x1c>)
    159c:	4798      	blx	r3
    159e:	687b      	ldr	r3, [r7, #4]
    15a0:	4618      	mov	r0, r3
    15a2:	3708      	adds	r7, #8
    15a4:	46bd      	mov	sp, r7
    15a6:	bd80      	pop	{r7, pc}
    15a8:	000159c9 	.word	0x000159c9

000015ac <_Z41__static_initialization_and_destruction_0ii>:

    15ac:	b580      	push	{r7, lr}
    15ae:	b082      	sub	sp, #8
    15b0:	af00      	add	r7, sp, #0
    15b2:	6078      	str	r0, [r7, #4]
    15b4:	6039      	str	r1, [r7, #0]
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	2b01      	cmp	r3, #1
    15ba:	d10c      	bne.n	15d6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    15bc:	683b      	ldr	r3, [r7, #0]
    15be:	f64f 72ff 	movw	r2, #65535	; 0xffff
    15c2:	4293      	cmp	r3, r2
    15c4:	d107      	bne.n	15d6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    15c6:	4806      	ldr	r0, [pc, #24]	; (15e0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    15c8:	4b06      	ldr	r3, [pc, #24]	; (15e4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    15ca:	4798      	blx	r3
    15cc:	4a06      	ldr	r2, [pc, #24]	; (15e8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    15ce:	4907      	ldr	r1, [pc, #28]	; (15ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
    15d0:	4803      	ldr	r0, [pc, #12]	; (15e0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    15d2:	4b07      	ldr	r3, [pc, #28]	; (15f0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    15d4:	4798      	blx	r3
    15d6:	bf00      	nop
    15d8:	3708      	adds	r7, #8
    15da:	46bd      	mov	sp, r7
    15dc:	bd80      	pop	{r7, pc}
    15de:	bf00      	nop
    15e0:	20001418 	.word	0x20001418
    15e4:	00001285 	.word	0x00001285
    15e8:	20000000 	.word	0x20000000
    15ec:	00001299 	.word	0x00001299
    15f0:	000167bd 	.word	0x000167bd

000015f4 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:
    15f4:	b580      	push	{r7, lr}
    15f6:	af00      	add	r7, sp, #0
    15f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    15fc:	2001      	movs	r0, #1
    15fe:	4b01      	ldr	r3, [pc, #4]	; (1604 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x10>)
    1600:	4798      	blx	r3
    1602:	bd80      	pop	{r7, pc}
    1604:	000015ad 	.word	0x000015ad

00001608 <main>:
		
	}
}

int main(void)
{
    1608:	b580      	push	{r7, lr}
    160a:	b082      	sub	sp, #8
    160c:	af00      	add	r7, sp, #0
	atmel_start_init();
    160e:	4b40      	ldr	r3, [pc, #256]	; (1710 <main+0x108>)
    1610:	4798      	blx	r3
	
	usb.Init();
    1612:	4840      	ldr	r0, [pc, #256]	; (1714 <main+0x10c>)
    1614:	4b40      	ldr	r3, [pc, #256]	; (1718 <main+0x110>)
    1616:	4798      	blx	r3
	delay_ms(100);
    1618:	2064      	movs	r0, #100	; 0x64
    161a:	4b40      	ldr	r3, [pc, #256]	; (171c <main+0x114>)
    161c:	4798      	blx	r3
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    161e:	4940      	ldr	r1, [pc, #256]	; (1720 <main+0x118>)
    1620:	483c      	ldr	r0, [pc, #240]	; (1714 <main+0x10c>)
    1622:	4b40      	ldr	r3, [pc, #256]	; (1724 <main+0x11c>)
    1624:	4798      	blx	r3
    1626:	4603      	mov	r3, r0
    1628:	493d      	ldr	r1, [pc, #244]	; (1720 <main+0x118>)
    162a:	4618      	mov	r0, r3
    162c:	4b3d      	ldr	r3, [pc, #244]	; (1724 <main+0x11c>)
    162e:	4798      	blx	r3
    1630:	4603      	mov	r3, r0
    1632:	493d      	ldr	r1, [pc, #244]	; (1728 <main+0x120>)
    1634:	4618      	mov	r0, r3
    1636:	4b3d      	ldr	r3, [pc, #244]	; (172c <main+0x124>)
    1638:	4798      	blx	r3
    163a:	4603      	mov	r3, r0
    163c:	4938      	ldr	r1, [pc, #224]	; (1720 <main+0x118>)
    163e:	4618      	mov	r0, r3
    1640:	4b38      	ldr	r3, [pc, #224]	; (1724 <main+0x11c>)
    1642:	4798      	blx	r3
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
    1644:	493a      	ldr	r1, [pc, #232]	; (1730 <main+0x128>)
    1646:	4833      	ldr	r0, [pc, #204]	; (1714 <main+0x10c>)
    1648:	4b3a      	ldr	r3, [pc, #232]	; (1734 <main+0x12c>)
    164a:	4798      	blx	r3
    164c:	4603      	mov	r3, r0
    164e:	493a      	ldr	r1, [pc, #232]	; (1738 <main+0x130>)
    1650:	4618      	mov	r0, r3
    1652:	4b38      	ldr	r3, [pc, #224]	; (1734 <main+0x12c>)
    1654:	4798      	blx	r3
    1656:	4603      	mov	r3, r0
    1658:	4938      	ldr	r1, [pc, #224]	; (173c <main+0x134>)
    165a:	4618      	mov	r0, r3
    165c:	4b38      	ldr	r3, [pc, #224]	; (1740 <main+0x138>)
    165e:	4798      	blx	r3
    1660:	4603      	mov	r3, r0
    1662:	4938      	ldr	r1, [pc, #224]	; (1744 <main+0x13c>)
    1664:	4618      	mov	r0, r3
    1666:	4b38      	ldr	r3, [pc, #224]	; (1748 <main+0x140>)
    1668:	4798      	blx	r3
    166a:	4603      	mov	r3, r0
    166c:	492c      	ldr	r1, [pc, #176]	; (1720 <main+0x118>)
    166e:	4618      	mov	r0, r3
    1670:	4b2c      	ldr	r3, [pc, #176]	; (1724 <main+0x11c>)
    1672:	4798      	blx	r3
    1674:	4603      	mov	r3, r0
    1676:	492a      	ldr	r1, [pc, #168]	; (1720 <main+0x118>)
    1678:	4618      	mov	r0, r3
    167a:	4b2a      	ldr	r3, [pc, #168]	; (1724 <main+0x11c>)
    167c:	4798      	blx	r3
	//QSPIDriverTest();
	memory.Init();
    167e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    1682:	4832      	ldr	r0, [pc, #200]	; (174c <main+0x144>)
    1684:	4b32      	ldr	r3, [pc, #200]	; (1750 <main+0x148>)
    1686:	4798      	blx	r3
	alu.Init();
    1688:	4832      	ldr	r0, [pc, #200]	; (1754 <main+0x14c>)
    168a:	4b33      	ldr	r3, [pc, #204]	; (1758 <main+0x150>)
    168c:	4798      	blx	r3
	alu.RunController();
    168e:	4831      	ldr	r0, [pc, #196]	; (1754 <main+0x14c>)
    1690:	4b32      	ldr	r3, [pc, #200]	; (175c <main+0x154>)
    1692:	4798      	blx	r3
	usb<<"*** ALU initiated ***"<<NEWLINE;
    1694:	4932      	ldr	r1, [pc, #200]	; (1760 <main+0x158>)
    1696:	481f      	ldr	r0, [pc, #124]	; (1714 <main+0x10c>)
    1698:	4b32      	ldr	r3, [pc, #200]	; (1764 <main+0x15c>)
    169a:	4798      	blx	r3
    169c:	4603      	mov	r3, r0
    169e:	4920      	ldr	r1, [pc, #128]	; (1720 <main+0x118>)
    16a0:	4618      	mov	r0, r3
    16a2:	4b20      	ldr	r3, [pc, #128]	; (1724 <main+0x11c>)
    16a4:	4798      	blx	r3
	uint8_t	line= alu.GetSelectedAMMC();
    16a6:	482b      	ldr	r0, [pc, #172]	; (1754 <main+0x14c>)
    16a8:	4b2f      	ldr	r3, [pc, #188]	; (1768 <main+0x160>)
    16aa:	4798      	blx	r3
    16ac:	4603      	mov	r3, r0
    16ae:	71fb      	strb	r3, [r7, #7]
	usb<<"Active line: "<<line<<NEWLINE;
    16b0:	492e      	ldr	r1, [pc, #184]	; (176c <main+0x164>)
    16b2:	4818      	ldr	r0, [pc, #96]	; (1714 <main+0x10c>)
    16b4:	4b2e      	ldr	r3, [pc, #184]	; (1770 <main+0x168>)
    16b6:	4798      	blx	r3
    16b8:	4602      	mov	r2, r0
    16ba:	1dfb      	adds	r3, r7, #7
    16bc:	4619      	mov	r1, r3
    16be:	4610      	mov	r0, r2
    16c0:	4b2c      	ldr	r3, [pc, #176]	; (1774 <main+0x16c>)
    16c2:	4798      	blx	r3
    16c4:	4603      	mov	r3, r0
    16c6:	4916      	ldr	r1, [pc, #88]	; (1720 <main+0x118>)
    16c8:	4618      	mov	r0, r3
    16ca:	4b16      	ldr	r3, [pc, #88]	; (1724 <main+0x11c>)
    16cc:	4798      	blx	r3
	if (!pBIT)
    16ce:	482a      	ldr	r0, [pc, #168]	; (1778 <main+0x170>)
    16d0:	4b2a      	ldr	r3, [pc, #168]	; (177c <main+0x174>)
    16d2:	4798      	blx	r3
    16d4:	4603      	mov	r3, r0
    16d6:	f083 0301 	eor.w	r3, r3, #1
    16da:	b2db      	uxtb	r3, r3
    16dc:	2b00      	cmp	r3, #0
    16de:	d004      	beq.n	16ea <main+0xe2>
	{
		hvac.Stop(0);
    16e0:	2100      	movs	r1, #0
    16e2:	4827      	ldr	r0, [pc, #156]	; (1780 <main+0x178>)
    16e4:	4b27      	ldr	r3, [pc, #156]	; (1784 <main+0x17c>)
    16e6:	4798      	blx	r3
    16e8:	e003      	b.n	16f2 <main+0xea>
	} 
	else
	{
		hvac.Start(0);
    16ea:	2100      	movs	r1, #0
    16ec:	4824      	ldr	r0, [pc, #144]	; (1780 <main+0x178>)
    16ee:	4b26      	ldr	r3, [pc, #152]	; (1788 <main+0x180>)
    16f0:	4798      	blx	r3
	}
    /* Replace with your application code */
    while (1) 
    {
		delay_ms(1000);
    16f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    16f6:	4b09      	ldr	r3, [pc, #36]	; (171c <main+0x114>)
    16f8:	4798      	blx	r3
		usb<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    16fa:	490b      	ldr	r1, [pc, #44]	; (1728 <main+0x120>)
    16fc:	4805      	ldr	r0, [pc, #20]	; (1714 <main+0x10c>)
    16fe:	4b0b      	ldr	r3, [pc, #44]	; (172c <main+0x124>)
    1700:	4798      	blx	r3
    1702:	4603      	mov	r3, r0
    1704:	4906      	ldr	r1, [pc, #24]	; (1720 <main+0x118>)
    1706:	4618      	mov	r0, r3
    1708:	4b06      	ldr	r3, [pc, #24]	; (1724 <main+0x11c>)
    170a:	4798      	blx	r3
		delay_ms(1000);
    170c:	e7f1      	b.n	16f2 <main+0xea>
    170e:	bf00      	nop
    1710:	000031b1 	.word	0x000031b1
    1714:	20005304 	.word	0x20005304
    1718:	00015569 	.word	0x00015569
    171c:	00004e1d 	.word	0x00004e1d
    1720:	0001ccd8 	.word	0x0001ccd8
    1724:	00000711 	.word	0x00000711
    1728:	0001cd10 	.word	0x0001cd10
    172c:	0000178d 	.word	0x0000178d
    1730:	0001cd34 	.word	0x0001cd34
    1734:	000017ad 	.word	0x000017ad
    1738:	0001cd40 	.word	0x0001cd40
    173c:	0001cd4c 	.word	0x0001cd4c
    1740:	000017cd 	.word	0x000017cd
    1744:	0001cd54 	.word	0x0001cd54
    1748:	000017ed 	.word	0x000017ed
    174c:	20001490 	.word	0x20001490
    1750:	0000193d 	.word	0x0000193d
    1754:	20000bf8 	.word	0x20000bf8
    1758:	00000349 	.word	0x00000349
    175c:	00000469 	.word	0x00000469
    1760:	0001cd60 	.word	0x0001cd60
    1764:	0000180d 	.word	0x0000180d
    1768:	000004e5 	.word	0x000004e5
    176c:	0001cd78 	.word	0x0001cd78
    1770:	0000182d 	.word	0x0000182d
    1774:	000006e9 	.word	0x000006e9
    1778:	20002f34 	.word	0x20002f34
    177c:	00001f79 	.word	0x00001f79
    1780:	20002f48 	.word	0x20002f48
    1784:	00002f79 	.word	0x00002f79
    1788:	000024c1 	.word	0x000024c1

0000178c <_ZlsIA33_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    178c:	b580      	push	{r7, lr}
    178e:	b082      	sub	sp, #8
    1790:	af00      	add	r7, sp, #0
    1792:	6078      	str	r0, [r7, #4]
    1794:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1796:	6839      	ldr	r1, [r7, #0]
    1798:	6878      	ldr	r0, [r7, #4]
    179a:	4b03      	ldr	r3, [pc, #12]	; (17a8 <_ZlsIA33_cER5PrintS2_RKT_+0x1c>)
    179c:	4798      	blx	r3
    179e:	687b      	ldr	r3, [r7, #4]
    17a0:	4618      	mov	r0, r3
    17a2:	3708      	adds	r7, #8
    17a4:	46bd      	mov	sp, r7
    17a6:	bd80      	pop	{r7, pc}
    17a8:	000159c9 	.word	0x000159c9

000017ac <_ZlsIA12_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    17ac:	b580      	push	{r7, lr}
    17ae:	b082      	sub	sp, #8
    17b0:	af00      	add	r7, sp, #0
    17b2:	6078      	str	r0, [r7, #4]
    17b4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    17b6:	6839      	ldr	r1, [r7, #0]
    17b8:	6878      	ldr	r0, [r7, #4]
    17ba:	4b03      	ldr	r3, [pc, #12]	; (17c8 <_ZlsIA12_cER5PrintS2_RKT_+0x1c>)
    17bc:	4798      	blx	r3
    17be:	687b      	ldr	r3, [r7, #4]
    17c0:	4618      	mov	r0, r3
    17c2:	3708      	adds	r7, #8
    17c4:	46bd      	mov	sp, r7
    17c6:	bd80      	pop	{r7, pc}
    17c8:	000159c9 	.word	0x000159c9

000017cc <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    17cc:	b580      	push	{r7, lr}
    17ce:	b082      	sub	sp, #8
    17d0:	af00      	add	r7, sp, #0
    17d2:	6078      	str	r0, [r7, #4]
    17d4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    17d6:	6839      	ldr	r1, [r7, #0]
    17d8:	6878      	ldr	r0, [r7, #4]
    17da:	4b03      	ldr	r3, [pc, #12]	; (17e8 <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
    17dc:	4798      	blx	r3
    17de:	687b      	ldr	r3, [r7, #4]
    17e0:	4618      	mov	r0, r3
    17e2:	3708      	adds	r7, #8
    17e4:	46bd      	mov	sp, r7
    17e6:	bd80      	pop	{r7, pc}
    17e8:	000159c9 	.word	0x000159c9

000017ec <_ZlsIA9_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    17ec:	b580      	push	{r7, lr}
    17ee:	b082      	sub	sp, #8
    17f0:	af00      	add	r7, sp, #0
    17f2:	6078      	str	r0, [r7, #4]
    17f4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    17f6:	6839      	ldr	r1, [r7, #0]
    17f8:	6878      	ldr	r0, [r7, #4]
    17fa:	4b03      	ldr	r3, [pc, #12]	; (1808 <_ZlsIA9_cER5PrintS2_RKT_+0x1c>)
    17fc:	4798      	blx	r3
    17fe:	687b      	ldr	r3, [r7, #4]
    1800:	4618      	mov	r0, r3
    1802:	3708      	adds	r7, #8
    1804:	46bd      	mov	sp, r7
    1806:	bd80      	pop	{r7, pc}
    1808:	000159c9 	.word	0x000159c9

0000180c <_ZlsIA22_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    180c:	b580      	push	{r7, lr}
    180e:	b082      	sub	sp, #8
    1810:	af00      	add	r7, sp, #0
    1812:	6078      	str	r0, [r7, #4]
    1814:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1816:	6839      	ldr	r1, [r7, #0]
    1818:	6878      	ldr	r0, [r7, #4]
    181a:	4b03      	ldr	r3, [pc, #12]	; (1828 <_ZlsIA22_cER5PrintS2_RKT_+0x1c>)
    181c:	4798      	blx	r3
    181e:	687b      	ldr	r3, [r7, #4]
    1820:	4618      	mov	r0, r3
    1822:	3708      	adds	r7, #8
    1824:	46bd      	mov	sp, r7
    1826:	bd80      	pop	{r7, pc}
    1828:	000159c9 	.word	0x000159c9

0000182c <_ZlsIA14_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    182c:	b580      	push	{r7, lr}
    182e:	b082      	sub	sp, #8
    1830:	af00      	add	r7, sp, #0
    1832:	6078      	str	r0, [r7, #4]
    1834:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1836:	6839      	ldr	r1, [r7, #0]
    1838:	6878      	ldr	r0, [r7, #4]
    183a:	4b03      	ldr	r3, [pc, #12]	; (1848 <_ZlsIA14_cER5PrintS2_RKT_+0x1c>)
    183c:	4798      	blx	r3
    183e:	687b      	ldr	r3, [r7, #4]
    1840:	4618      	mov	r0, r3
    1842:	3708      	adds	r7, #8
    1844:	46bd      	mov	sp, r7
    1846:	bd80      	pop	{r7, pc}
    1848:	000159c9 	.word	0x000159c9

0000184c <_ZN19PersistenceServicesD1Ev>:

/*
 	Dient dem Zugriff auf software customization area, hardware description area,
	heating program area und dem persistentes Speichern von aktuellem Heizzustand.
*/
class PersistenceServices: public	CRC32_Class
    184c:	b580      	push	{r7, lr}
    184e:	b082      	sub	sp, #8
    1850:	af00      	add	r7, sp, #0
    1852:	6078      	str	r0, [r7, #4]
    1854:	687b      	ldr	r3, [r7, #4]
    1856:	4618      	mov	r0, r3
    1858:	4b03      	ldr	r3, [pc, #12]	; (1868 <_ZN19PersistenceServicesD1Ev+0x1c>)
    185a:	4798      	blx	r3
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	4618      	mov	r0, r3
    1860:	3708      	adds	r7, #8
    1862:	46bd      	mov	sp, r7
    1864:	bd80      	pop	{r7, pc}
    1866:	bf00      	nop
    1868:	00000d29 	.word	0x00000d29

0000186c <_ZN21MemoryManagment_ClassC1Ev>:
#include "MemoryManagment_Class.h"
#include "AT24MAC_Class.h"
#include "CDC_Class.h"

// default constructor
MemoryManagment_Class::MemoryManagment_Class()
    186c:	b580      	push	{r7, lr}
    186e:	b082      	sub	sp, #8
    1870:	af00      	add	r7, sp, #0
    1872:	6078      	str	r0, [r7, #4]
    1874:	687b      	ldr	r3, [r7, #4]
    1876:	4618      	mov	r0, r3
    1878:	4b17      	ldr	r3, [pc, #92]	; (18d8 <_ZN21MemoryManagment_ClassC1Ev+0x6c>)
    187a:	4798      	blx	r3
    187c:	687b      	ldr	r3, [r7, #4]
    187e:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    1882:	4618      	mov	r0, r3
    1884:	4b15      	ldr	r3, [pc, #84]	; (18dc <_ZN21MemoryManagment_ClassC1Ev+0x70>)
    1886:	4798      	blx	r3
    1888:	687b      	ldr	r3, [r7, #4]
    188a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
    188e:	4618      	mov	r0, r3
    1890:	4b13      	ldr	r3, [pc, #76]	; (18e0 <_ZN21MemoryManagment_ClassC1Ev+0x74>)
    1892:	4798      	blx	r3
    1894:	687b      	ldr	r3, [r7, #4]
    1896:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
    189a:	4618      	mov	r0, r3
    189c:	4b11      	ldr	r3, [pc, #68]	; (18e4 <_ZN21MemoryManagment_ClassC1Ev+0x78>)
    189e:	4798      	blx	r3
    18a0:	687b      	ldr	r3, [r7, #4]
    18a2:	f203 732c 	addw	r3, r3, #1836	; 0x72c
    18a6:	4618      	mov	r0, r3
    18a8:	4b0f      	ldr	r3, [pc, #60]	; (18e8 <_ZN21MemoryManagment_ClassC1Ev+0x7c>)
    18aa:	4798      	blx	r3
    18ac:	687b      	ldr	r3, [r7, #4]
    18ae:	2200      	movs	r2, #0
    18b0:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
{
	_currentAddress=0;
    18b4:	687b      	ldr	r3, [r7, #4]
    18b6:	2200      	movs	r2, #0
    18b8:	f8c3 294c 	str.w	r2, [r3, #2380]	; 0x94c
	head=512;
    18bc:	687b      	ldr	r3, [r7, #4]
    18be:	f44f 7200 	mov.w	r2, #512	; 0x200
    18c2:	f8c3 2964 	str.w	r2, [r3, #2404]	; 0x964
	tail=0;
    18c6:	687b      	ldr	r3, [r7, #4]
    18c8:	2200      	movs	r2, #0
    18ca:	f8c3 2968 	str.w	r2, [r3, #2408]	; 0x968

	
} //MemoryManagment_Class
    18ce:	687b      	ldr	r3, [r7, #4]
    18d0:	4618      	mov	r0, r3
    18d2:	3708      	adds	r7, #8
    18d4:	46bd      	mov	sp, r7
    18d6:	bd80      	pop	{r7, pc}
    18d8:	00000dfd 	.word	0x00000dfd
    18dc:	0000204d 	.word	0x0000204d
    18e0:	00001057 	.word	0x00001057
    18e4:	00001c29 	.word	0x00001c29
    18e8:	00000e61 	.word	0x00000e61

000018ec <_ZN21MemoryManagment_ClassD1Ev>:



// default destructor
MemoryManagment_Class::~MemoryManagment_Class()
    18ec:	b580      	push	{r7, lr}
    18ee:	b082      	sub	sp, #8
    18f0:	af00      	add	r7, sp, #0
    18f2:	6078      	str	r0, [r7, #4]
    18f4:	687b      	ldr	r3, [r7, #4]
    18f6:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
    18fa:	4618      	mov	r0, r3
    18fc:	4b0b      	ldr	r3, [pc, #44]	; (192c <_ZN21MemoryManagment_ClassD1Ev+0x40>)
    18fe:	4798      	blx	r3
    1900:	687b      	ldr	r3, [r7, #4]
    1902:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
    1906:	4618      	mov	r0, r3
    1908:	4b09      	ldr	r3, [pc, #36]	; (1930 <_ZN21MemoryManagment_ClassD1Ev+0x44>)
    190a:	4798      	blx	r3
    190c:	687b      	ldr	r3, [r7, #4]
    190e:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    1912:	4618      	mov	r0, r3
    1914:	4b07      	ldr	r3, [pc, #28]	; (1934 <_ZN21MemoryManagment_ClassD1Ev+0x48>)
    1916:	4798      	blx	r3
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	4618      	mov	r0, r3
    191c:	4b06      	ldr	r3, [pc, #24]	; (1938 <_ZN21MemoryManagment_ClassD1Ev+0x4c>)
    191e:	4798      	blx	r3
{
} //~MemoryManagment_Class
    1920:	687b      	ldr	r3, [r7, #4]
    1922:	4618      	mov	r0, r3
    1924:	3708      	adds	r7, #8
    1926:	46bd      	mov	sp, r7
    1928:	bd80      	pop	{r7, pc}
    192a:	bf00      	nop
    192c:	00001c3d 	.word	0x00001c3d
    1930:	0000106b 	.word	0x0000106b
    1934:	0000184d 	.word	0x0000184d
    1938:	00000e2d 	.word	0x00000e2d

0000193c <_ZN21MemoryManagment_Class4InitEm>:

bool	MemoryManagment_Class::Init(uint32_t flashChipSize){
    193c:	b580      	push	{r7, lr}
    193e:	b082      	sub	sp, #8
    1940:	af00      	add	r7, sp, #0
    1942:	6078      	str	r0, [r7, #4]
    1944:	6039      	str	r1, [r7, #0]
		if (qspiFlash.Init())
    1946:	481d      	ldr	r0, [pc, #116]	; (19bc <_ZN21MemoryManagment_Class4InitEm+0x80>)
    1948:	4b1d      	ldr	r3, [pc, #116]	; (19c0 <_ZN21MemoryManagment_Class4InitEm+0x84>)
    194a:	4798      	blx	r3
    194c:	4603      	mov	r3, r0
    194e:	2b00      	cmp	r3, #0
    1950:	d009      	beq.n	1966 <_ZN21MemoryManagment_Class4InitEm+0x2a>
		{
			usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
    1952:	491c      	ldr	r1, [pc, #112]	; (19c4 <_ZN21MemoryManagment_Class4InitEm+0x88>)
    1954:	481c      	ldr	r0, [pc, #112]	; (19c8 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    1956:	4b1d      	ldr	r3, [pc, #116]	; (19cc <_ZN21MemoryManagment_Class4InitEm+0x90>)
    1958:	4798      	blx	r3
    195a:	4603      	mov	r3, r0
    195c:	491c      	ldr	r1, [pc, #112]	; (19d0 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    195e:	4618      	mov	r0, r3
    1960:	4b1c      	ldr	r3, [pc, #112]	; (19d4 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    1962:	4798      	blx	r3
    1964:	e008      	b.n	1978 <_ZN21MemoryManagment_Class4InitEm+0x3c>
		} 
		else
		{
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
    1966:	491c      	ldr	r1, [pc, #112]	; (19d8 <_ZN21MemoryManagment_Class4InitEm+0x9c>)
    1968:	4817      	ldr	r0, [pc, #92]	; (19c8 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    196a:	4b18      	ldr	r3, [pc, #96]	; (19cc <_ZN21MemoryManagment_Class4InitEm+0x90>)
    196c:	4798      	blx	r3
    196e:	4603      	mov	r3, r0
    1970:	4917      	ldr	r1, [pc, #92]	; (19d0 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    1972:	4618      	mov	r0, r3
    1974:	4b17      	ldr	r3, [pc, #92]	; (19d4 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    1976:	4798      	blx	r3
		}
		if (eeprom.Init())
    1978:	4818      	ldr	r0, [pc, #96]	; (19dc <_ZN21MemoryManagment_Class4InitEm+0xa0>)
    197a:	4b19      	ldr	r3, [pc, #100]	; (19e0 <_ZN21MemoryManagment_Class4InitEm+0xa4>)
    197c:	4798      	blx	r3
    197e:	4603      	mov	r3, r0
    1980:	2b00      	cmp	r3, #0
    1982:	d009      	beq.n	1998 <_ZN21MemoryManagment_Class4InitEm+0x5c>
		{
			usb<<"EEPROM Memory SelfTest PASSED"<<NEWLINE;
    1984:	4917      	ldr	r1, [pc, #92]	; (19e4 <_ZN21MemoryManagment_Class4InitEm+0xa8>)
    1986:	4810      	ldr	r0, [pc, #64]	; (19c8 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    1988:	4b17      	ldr	r3, [pc, #92]	; (19e8 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    198a:	4798      	blx	r3
    198c:	4603      	mov	r3, r0
    198e:	4910      	ldr	r1, [pc, #64]	; (19d0 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    1990:	4618      	mov	r0, r3
    1992:	4b10      	ldr	r3, [pc, #64]	; (19d4 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    1994:	4798      	blx	r3
    1996:	e008      	b.n	19aa <_ZN21MemoryManagment_Class4InitEm+0x6e>
		
		} 
		else
		{
			usb<<"EEPROM Memory SelfTest FAILED"<<NEWLINE;
    1998:	4914      	ldr	r1, [pc, #80]	; (19ec <_ZN21MemoryManagment_Class4InitEm+0xb0>)
    199a:	480b      	ldr	r0, [pc, #44]	; (19c8 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    199c:	4b12      	ldr	r3, [pc, #72]	; (19e8 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    199e:	4798      	blx	r3
    19a0:	4603      	mov	r3, r0
    19a2:	490b      	ldr	r1, [pc, #44]	; (19d0 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    19a4:	4618      	mov	r0, r3
    19a6:	4b0b      	ldr	r3, [pc, #44]	; (19d4 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    19a8:	4798      	blx	r3
		}
		
		SetChipID(flashChipSize);
    19aa:	6839      	ldr	r1, [r7, #0]
    19ac:	6878      	ldr	r0, [r7, #4]
    19ae:	4b10      	ldr	r3, [pc, #64]	; (19f0 <_ZN21MemoryManagment_Class4InitEm+0xb4>)
    19b0:	4798      	blx	r3
}
    19b2:	bf00      	nop
    19b4:	4618      	mov	r0, r3
    19b6:	3708      	adds	r7, #8
    19b8:	46bd      	mov	sp, r7
    19ba:	bd80      	pop	{r7, pc}
    19bc:	20004ee4 	.word	0x20004ee4
    19c0:	00014275 	.word	0x00014275
    19c4:	0001cd88 	.word	0x0001cd88
    19c8:	20005304 	.word	0x20005304
    19cc:	00001bad 	.word	0x00001bad
    19d0:	0001cda8 	.word	0x0001cda8
    19d4:	00000711 	.word	0x00000711
    19d8:	0001cdac 	.word	0x0001cdac
    19dc:	20004e70 	.word	0x20004e70
    19e0:	000138bd 	.word	0x000138bd
    19e4:	0001cdcc 	.word	0x0001cdcc
    19e8:	00000731 	.word	0x00000731
    19ec:	0001cdec 	.word	0x0001cdec
    19f0:	00001a21 	.word	0x00001a21

000019f4 <_ZN21MemoryManagment_Class13_troubleshootEhb>:
 uint8_t	MemoryManagment_Class::GetErrorCode(){
	 
	 // PLease don forget to do the real impelementation
	 return	0;
 }
  void MemoryManagment_Class::_troubleshoot(uint8_t _code, bool printoverride) {
    19f4:	b580      	push	{r7, lr}
    19f6:	b082      	sub	sp, #8
    19f8:	af00      	add	r7, sp, #0
    19fa:	6078      	str	r0, [r7, #4]
    19fc:	460b      	mov	r3, r1
    19fe:	70fb      	strb	r3, [r7, #3]
    1a00:	4613      	mov	r3, r2
    1a02:	70bb      	strb	r3, [r7, #2]
	  diagnostics.troubleshoot(_code, printoverride);
    1a04:	78ba      	ldrb	r2, [r7, #2]
    1a06:	78fb      	ldrb	r3, [r7, #3]
    1a08:	4619      	mov	r1, r3
    1a0a:	4803      	ldr	r0, [pc, #12]	; (1a18 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x24>)
    1a0c:	4b03      	ldr	r3, [pc, #12]	; (1a1c <_ZN21MemoryManagment_Class13_troubleshootEhb+0x28>)
    1a0e:	4798      	blx	r3
  }
    1a10:	bf00      	nop
    1a12:	3708      	adds	r7, #8
    1a14:	46bd      	mov	sp, r7
    1a16:	bd80      	pop	{r7, pc}
    1a18:	20003d80 	.word	0x20003d80
    1a1c:	000122b9 	.word	0x000122b9

00001a20 <_ZN21MemoryManagment_Class9SetChipIDEm>:

 bool MemoryManagment_Class::SetChipID(uint32_t flashChipSize) {
    1a20:	b580      	push	{r7, lr}
    1a22:	b082      	sub	sp, #8
    1a24:	af00      	add	r7, sp, #0
    1a26:	6078      	str	r0, [r7, #4]
    1a28:	6039      	str	r1, [r7, #0]
	 //set some default values

	 logArea.capacity =GetMemoryCapacity();
    1a2a:	687b      	ldr	r3, [r7, #4]
    1a2c:	4618      	mov	r0, r3
    1a2e:	4b12      	ldr	r3, [pc, #72]	; (1a78 <_ZN21MemoryManagment_Class9SetChipIDEm+0x58>)
    1a30:	4798      	blx	r3
    1a32:	4602      	mov	r2, r0
    1a34:	687b      	ldr	r3, [r7, #4]
    1a36:	f8c3 2958 	str.w	r2, [r3, #2392]	; 0x958


	 if (!logArea.capacity) {
    1a3a:	687b      	ldr	r3, [r7, #4]
    1a3c:	f8d3 3958 	ldr.w	r3, [r3, #2392]	; 0x958
    1a40:	2b00      	cmp	r3, #0
    1a42:	d113      	bne.n	1a6c <_ZN21MemoryManagment_Class9SetChipIDEm+0x4c>
		 #ifdef RUNDIAGNOSTIC
		 usb.println(F("Chip capacity cannot be identified"));
		 #endif
		 if (flashChipSize) {
    1a44:	683b      	ldr	r3, [r7, #0]
    1a46:	2b00      	cmp	r3, #0
    1a48:	d009      	beq.n	1a5e <_ZN21MemoryManagment_Class9SetChipIDEm+0x3e>
			 // If a custom chip size is defined
			 #ifdef RUNDIAGNOSTIC
			 usb.println(F("Custom Chipsize defined"));
			 #endif
			 logArea.capacity = flashChipSize;
    1a4a:	687b      	ldr	r3, [r7, #4]
    1a4c:	683a      	ldr	r2, [r7, #0]
    1a4e:	f8c3 2958 	str.w	r2, [r3, #2392]	; 0x958
			 logArea.supported = false;
    1a52:	687b      	ldr	r3, [r7, #4]
    1a54:	2200      	movs	r2, #0
    1a56:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
			 return true;
    1a5a:	2301      	movs	r3, #1
    1a5c:	e007      	b.n	1a6e <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

		 else {
			 _troubleshoot(UNKNOWNCAP);
    1a5e:	2200      	movs	r2, #0
    1a60:	2103      	movs	r1, #3
    1a62:	6878      	ldr	r0, [r7, #4]
    1a64:	4b05      	ldr	r3, [pc, #20]	; (1a7c <_ZN21MemoryManagment_Class9SetChipIDEm+0x5c>)
    1a66:	4798      	blx	r3
			 return false;
    1a68:	2300      	movs	r3, #0
    1a6a:	e000      	b.n	1a6e <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

	 }
	 return true;
    1a6c:	2301      	movs	r3, #1
 }
    1a6e:	4618      	mov	r0, r3
    1a70:	3708      	adds	r7, #8
    1a72:	46bd      	mov	sp, r7
    1a74:	bd80      	pop	{r7, pc}
    1a76:	bf00      	nop
    1a78:	000143f5 	.word	0x000143f5
    1a7c:	000019f5 	.word	0x000019f5

00001a80 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState>:
	handlerAppState=PTR_HVAC_STATE(&as);
	uint32_t	add=(uint32_t )(&flashMap->hvacDefaultState);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
	return	r;
}
 uint32_t	MemoryManagment_Class::WriteValidApplicationState(HVACState& hs ){
    1a80:	b580      	push	{r7, lr}
    1a82:	b084      	sub	sp, #16
    1a84:	af00      	add	r7, sp, #0
    1a86:	6078      	str	r0, [r7, #4]
    1a88:	6039      	str	r1, [r7, #0]
	uint32_t w=  WriteCurrentState(hs);
    1a8a:	687b      	ldr	r3, [r7, #4]
    1a8c:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
    1a90:	6839      	ldr	r1, [r7, #0]
    1a92:	4618      	mov	r0, r3
    1a94:	4b0f      	ldr	r3, [pc, #60]	; (1ad4 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x54>)
    1a96:	4798      	blx	r3
    1a98:	60f8      	str	r0, [r7, #12]
	crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    1a9a:	687b      	ldr	r3, [r7, #4]
    1a9c:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    1aa0:	2260      	movs	r2, #96	; 0x60
    1aa2:	6839      	ldr	r1, [r7, #0]
    1aa4:	4618      	mov	r0, r3
    1aa6:	4b0c      	ldr	r3, [pc, #48]	; (1ad8 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x58>)
    1aa8:	4798      	blx	r3
    1aaa:	4602      	mov	r2, r0
    1aac:	687b      	ldr	r3, [r7, #4]
    1aae:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	w=WriteCRCAppState(crc32);
    1ab2:	687b      	ldr	r3, [r7, #4]
    1ab4:	f503 62ce 	add.w	r2, r3, #1648	; 0x670
    1ab8:	687b      	ldr	r3, [r7, #4]
    1aba:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
    1abe:	4619      	mov	r1, r3
    1ac0:	4610      	mov	r0, r2
    1ac2:	4b06      	ldr	r3, [pc, #24]	; (1adc <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x5c>)
    1ac4:	4798      	blx	r3
    1ac6:	60f8      	str	r0, [r7, #12]
	return	w;
    1ac8:	68fb      	ldr	r3, [r7, #12]
 }
    1aca:	4618      	mov	r0, r3
    1acc:	3710      	adds	r7, #16
    1ace:	46bd      	mov	sp, r7
    1ad0:	bd80      	pop	{r7, pc}
    1ad2:	bf00      	nop
    1ad4:	00001e25 	.word	0x00001e25
    1ad8:	00000d99 	.word	0x00000d99
    1adc:	00001e8d 	.word	0x00001e8d

00001ae0 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState>:
 uint32_t	MemoryManagment_Class::WriteValidConfigurationData(ConfigurationData& cd){
	 uint32_t	w=WriteCurrentConfigurationData(cd);
	 crc32=CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(ConfigurationData));
	 w=WriteCRCConfigurationData(crc32);
 };
 uint32_t	MemoryManagment_Class::SaveCurrentState(HVACState& hs){
    1ae0:	b580      	push	{r7, lr}
    1ae2:	b084      	sub	sp, #16
    1ae4:	af00      	add	r7, sp, #0
    1ae6:	6078      	str	r0, [r7, #4]
    1ae8:	6039      	str	r1, [r7, #0]
	 uint32_t	add=(uint32_t)&flashMap->hvacState;
    1aea:	4b0b      	ldr	r3, [pc, #44]	; (1b18 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x38>)
    1aec:	681b      	ldr	r3, [r3, #0]
    1aee:	33cc      	adds	r3, #204	; 0xcc
    1af0:	60fb      	str	r3, [r7, #12]
	 uint32_t	bufferAddres=((uint32_t)&flashBuffer);
    1af2:	687b      	ldr	r3, [r7, #4]
    1af4:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
    1af8:	60bb      	str	r3, [r7, #8]
	 bufferAddres+=add;
    1afa:	68ba      	ldr	r2, [r7, #8]
    1afc:	68fb      	ldr	r3, [r7, #12]
    1afe:	4413      	add	r3, r2
    1b00:	60bb      	str	r3, [r7, #8]
	 memcpy((void*)bufferAddres,&hs,sizeof(HVACState));
    1b02:	68bb      	ldr	r3, [r7, #8]
    1b04:	2260      	movs	r2, #96	; 0x60
    1b06:	6839      	ldr	r1, [r7, #0]
    1b08:	4618      	mov	r0, r3
    1b0a:	4b04      	ldr	r3, [pc, #16]	; (1b1c <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x3c>)
    1b0c:	4798      	blx	r3
	 return	bufferAddres;
    1b0e:	68bb      	ldr	r3, [r7, #8]
 }
    1b10:	4618      	mov	r0, r3
    1b12:	3710      	adds	r7, #16
    1b14:	46bd      	mov	sp, r7
    1b16:	bd80      	pop	{r7, pc}
    1b18:	20002f30 	.word	0x20002f30
    1b1c:	00018b59 	.word	0x00018b59

00001b20 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState>:
uint32_t	MemoryManagment_Class::SaveApplicationState(HVACState& hs ){
    1b20:	b580      	push	{r7, lr}
    1b22:	b084      	sub	sp, #16
    1b24:	af00      	add	r7, sp, #0
    1b26:	6078      	str	r0, [r7, #4]
    1b28:	6039      	str	r1, [r7, #0]
	  uint32_t w=  SaveCurrentState(hs);
    1b2a:	6839      	ldr	r1, [r7, #0]
    1b2c:	6878      	ldr	r0, [r7, #4]
    1b2e:	4b0e      	ldr	r3, [pc, #56]	; (1b68 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x48>)
    1b30:	4798      	blx	r3
    1b32:	60f8      	str	r0, [r7, #12]
	  crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    1b34:	687b      	ldr	r3, [r7, #4]
    1b36:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    1b3a:	2260      	movs	r2, #96	; 0x60
    1b3c:	6839      	ldr	r1, [r7, #0]
    1b3e:	4618      	mov	r0, r3
    1b40:	4b0a      	ldr	r3, [pc, #40]	; (1b6c <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x4c>)
    1b42:	4798      	blx	r3
    1b44:	4602      	mov	r2, r0
    1b46:	687b      	ldr	r3, [r7, #4]
    1b48:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	  w=SaveCRCAppState(crc32);
    1b4c:	687b      	ldr	r3, [r7, #4]
    1b4e:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
    1b52:	4619      	mov	r1, r3
    1b54:	6878      	ldr	r0, [r7, #4]
    1b56:	4b06      	ldr	r3, [pc, #24]	; (1b70 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x50>)
    1b58:	4798      	blx	r3
    1b5a:	60f8      	str	r0, [r7, #12]
	  return	w;
    1b5c:	68fb      	ldr	r3, [r7, #12]
  }
    1b5e:	4618      	mov	r0, r3
    1b60:	3710      	adds	r7, #16
    1b62:	46bd      	mov	sp, r7
    1b64:	bd80      	pop	{r7, pc}
    1b66:	bf00      	nop
    1b68:	00001ae1 	.word	0x00001ae1
    1b6c:	00000d99 	.word	0x00000d99
    1b70:	00001b75 	.word	0x00001b75

00001b74 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm>:
uint32_t	MemoryManagment_Class::SaveCRCAppState(uint32_t crc){
    1b74:	b480      	push	{r7}
    1b76:	b085      	sub	sp, #20
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->crcAppState;
    1b7e:	4b0a      	ldr	r3, [pc, #40]	; (1ba8 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm+0x34>)
    1b80:	681b      	ldr	r3, [r3, #0]
    1b82:	33cc      	adds	r3, #204	; 0xcc
    1b84:	60fb      	str	r3, [r7, #12]
	uint32_t	bufferAddres=((uint32_t)&flashBuffer)+add;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
    1b8c:	461a      	mov	r2, r3
    1b8e:	68fb      	ldr	r3, [r7, #12]
    1b90:	4413      	add	r3, r2
    1b92:	60bb      	str	r3, [r7, #8]
	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
    1b94:	68bb      	ldr	r3, [r7, #8]
    1b96:	683a      	ldr	r2, [r7, #0]
    1b98:	601a      	str	r2, [r3, #0]
	return	bufferAddres;
    1b9a:	68bb      	ldr	r3, [r7, #8]
}
    1b9c:	4618      	mov	r0, r3
    1b9e:	3714      	adds	r7, #20
    1ba0:	46bd      	mov	sp, r7
    1ba2:	bc80      	pop	{r7}
    1ba4:	4770      	bx	lr
    1ba6:	bf00      	nop
    1ba8:	20002f30 	.word	0x20002f30

00001bac <_ZlsIA29_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1bac:	b580      	push	{r7, lr}
    1bae:	b082      	sub	sp, #8
    1bb0:	af00      	add	r7, sp, #0
    1bb2:	6078      	str	r0, [r7, #4]
    1bb4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1bb6:	6839      	ldr	r1, [r7, #0]
    1bb8:	6878      	ldr	r0, [r7, #4]
    1bba:	4b03      	ldr	r3, [pc, #12]	; (1bc8 <_ZlsIA29_cER5PrintS2_RKT_+0x1c>)
    1bbc:	4798      	blx	r3
    1bbe:	687b      	ldr	r3, [r7, #4]
    1bc0:	4618      	mov	r0, r3
    1bc2:	3708      	adds	r7, #8
    1bc4:	46bd      	mov	sp, r7
    1bc6:	bd80      	pop	{r7, pc}
    1bc8:	000159c9 	.word	0x000159c9

00001bcc <_Z41__static_initialization_and_destruction_0ii>:
 
    1bcc:	b580      	push	{r7, lr}
    1bce:	b082      	sub	sp, #8
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
    1bd4:	6039      	str	r1, [r7, #0]
    1bd6:	687b      	ldr	r3, [r7, #4]
    1bd8:	2b01      	cmp	r3, #1
    1bda:	d10c      	bne.n	1bf6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1bdc:	683b      	ldr	r3, [r7, #0]
    1bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1be2:	4293      	cmp	r3, r2
    1be4:	d107      	bne.n	1bf6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1be6:	4806      	ldr	r0, [pc, #24]	; (1c00 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1be8:	4b06      	ldr	r3, [pc, #24]	; (1c04 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1bea:	4798      	blx	r3
    1bec:	4a06      	ldr	r2, [pc, #24]	; (1c08 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1bee:	4907      	ldr	r1, [pc, #28]	; (1c0c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1bf0:	4803      	ldr	r0, [pc, #12]	; (1c00 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1bf2:	4b07      	ldr	r3, [pc, #28]	; (1c10 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1bf4:	4798      	blx	r3
    1bf6:	bf00      	nop
    1bf8:	3708      	adds	r7, #8
    1bfa:	46bd      	mov	sp, r7
    1bfc:	bd80      	pop	{r7, pc}
    1bfe:	bf00      	nop
    1c00:	20001490 	.word	0x20001490
    1c04:	0000186d 	.word	0x0000186d
    1c08:	20000000 	.word	0x20000000
    1c0c:	000018ed 	.word	0x000018ed
    1c10:	000167bd 	.word	0x000167bd

00001c14 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev>:
    1c14:	b580      	push	{r7, lr}
    1c16:	af00      	add	r7, sp, #0
    1c18:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1c1c:	2001      	movs	r0, #1
    1c1e:	4b01      	ldr	r3, [pc, #4]	; (1c24 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x10>)
    1c20:	4798      	blx	r3
    1c22:	bd80      	pop	{r7, pc}
    1c24:	00001bcd 	.word	0x00001bcd

00001c28 <_ZN18MemoryStruct_ClassC1Ev>:
#include "MemoryManagment_Class.h"

MemoryFlashStruct	*flashMap=NULL;

// default constructor
MemoryStruct_Class::MemoryStruct_Class()
    1c28:	b480      	push	{r7}
    1c2a:	b083      	sub	sp, #12
    1c2c:	af00      	add	r7, sp, #0
    1c2e:	6078      	str	r0, [r7, #4]
{
} //MemoryStruct_Class
    1c30:	687b      	ldr	r3, [r7, #4]
    1c32:	4618      	mov	r0, r3
    1c34:	370c      	adds	r7, #12
    1c36:	46bd      	mov	sp, r7
    1c38:	bc80      	pop	{r7}
    1c3a:	4770      	bx	lr

00001c3c <_ZN18MemoryStruct_ClassD1Ev>:

// default destructor
MemoryStruct_Class::~MemoryStruct_Class()
    1c3c:	b480      	push	{r7}
    1c3e:	b083      	sub	sp, #12
    1c40:	af00      	add	r7, sp, #0
    1c42:	6078      	str	r0, [r7, #4]
{
} //~MemoryStruct_Class
    1c44:	687b      	ldr	r3, [r7, #4]
    1c46:	4618      	mov	r0, r3
    1c48:	370c      	adds	r7, #12
    1c4a:	46bd      	mov	sp, r7
    1c4c:	bc80      	pop	{r7}
    1c4e:	4770      	bx	lr

00001c50 <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData>:

uint32_t	MemoryStruct_Class::ReadDefaultConfigurationData(ConfigurationData& cd){
    1c50:	b580      	push	{r7, lr}
    1c52:	b084      	sub	sp, #16
    1c54:	af00      	add	r7, sp, #0
    1c56:	6078      	str	r0, [r7, #4]
    1c58:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->defaultConfiguration;
    1c5a:	4b07      	ldr	r3, [pc, #28]	; (1c78 <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x28>)
    1c5c:	681b      	ldr	r3, [r3, #0]
    1c5e:	3310      	adds	r3, #16
    1c60:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    1c62:	68fa      	ldr	r2, [r7, #12]
    1c64:	6839      	ldr	r1, [r7, #0]
    1c66:	6878      	ldr	r0, [r7, #4]
    1c68:	4b04      	ldr	r3, [pc, #16]	; (1c7c <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x2c>)
    1c6a:	4798      	blx	r3
    1c6c:	60b8      	str	r0, [r7, #8]
	return	r;
    1c6e:	68bb      	ldr	r3, [r7, #8]
}
    1c70:	4618      	mov	r0, r3
    1c72:	3710      	adds	r7, #16
    1c74:	46bd      	mov	sp, r7
    1c76:	bd80      	pop	{r7, pc}
    1c78:	20002f30 	.word	0x20002f30
    1c7c:	00001ce1 	.word	0x00001ce1

00001c80 <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData>:
uint32_t	MemoryStruct_Class::ReadLastConfigurationData(ConfigurationData& cd){
    1c80:	b580      	push	{r7, lr}
    1c82:	b084      	sub	sp, #16
    1c84:	af00      	add	r7, sp, #0
    1c86:	6078      	str	r0, [r7, #4]
    1c88:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->lastConfiguracion;
    1c8a:	4b07      	ldr	r3, [pc, #28]	; (1ca8 <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData+0x28>)
    1c8c:	681b      	ldr	r3, [r3, #0]
    1c8e:	3310      	adds	r3, #16
    1c90:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    1c92:	68fa      	ldr	r2, [r7, #12]
    1c94:	6839      	ldr	r1, [r7, #0]
    1c96:	6878      	ldr	r0, [r7, #4]
    1c98:	4b04      	ldr	r3, [pc, #16]	; (1cac <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData+0x2c>)
    1c9a:	4798      	blx	r3
    1c9c:	60b8      	str	r0, [r7, #8]
	return	r;
    1c9e:	68bb      	ldr	r3, [r7, #8]
}
    1ca0:	4618      	mov	r0, r3
    1ca2:	3710      	adds	r7, #16
    1ca4:	46bd      	mov	sp, r7
    1ca6:	bd80      	pop	{r7, pc}
    1ca8:	20002f30 	.word	0x20002f30
    1cac:	00001ce1 	.word	0x00001ce1

00001cb0 <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData>:
uint32_t	MemoryStruct_Class::ReadUpdatedConfigurationData(ConfigurationData& cd){
    1cb0:	b580      	push	{r7, lr}
    1cb2:	b084      	sub	sp, #16
    1cb4:	af00      	add	r7, sp, #0
    1cb6:	6078      	str	r0, [r7, #4]
    1cb8:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->updatedConfiguration;
    1cba:	4b07      	ldr	r3, [pc, #28]	; (1cd8 <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x28>)
    1cbc:	681b      	ldr	r3, [r3, #0]
    1cbe:	3310      	adds	r3, #16
    1cc0:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    1cc2:	68fa      	ldr	r2, [r7, #12]
    1cc4:	6839      	ldr	r1, [r7, #0]
    1cc6:	6878      	ldr	r0, [r7, #4]
    1cc8:	4b04      	ldr	r3, [pc, #16]	; (1cdc <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x2c>)
    1cca:	4798      	blx	r3
    1ccc:	60b8      	str	r0, [r7, #8]
	return	r;
    1cce:	68bb      	ldr	r3, [r7, #8]
}
    1cd0:	4618      	mov	r0, r3
    1cd2:	3710      	adds	r7, #16
    1cd4:	46bd      	mov	sp, r7
    1cd6:	bd80      	pop	{r7, pc}
    1cd8:	20002f30 	.word	0x20002f30
    1cdc:	00001ce1 	.word	0x00001ce1

00001ce0 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam>:

uint32_t	MemoryStruct_Class::ReadConfigurationData(ConfigurationData& cd,uint32_t add){
    1ce0:	b590      	push	{r4, r7, lr}
    1ce2:	b087      	sub	sp, #28
    1ce4:	af00      	add	r7, sp, #0
    1ce6:	60f8      	str	r0, [r7, #12]
    1ce8:	60b9      	str	r1, [r7, #8]
    1cea:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    1cec:	68ba      	ldr	r2, [r7, #8]
    1cee:	68fb      	ldr	r3, [r7, #12]
    1cf0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    1cf4:	68fb      	ldr	r3, [r7, #12]
    1cf6:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    1cfa:	23ac      	movs	r3, #172	; 0xac
    1cfc:	687a      	ldr	r2, [r7, #4]
    1cfe:	4804      	ldr	r0, [pc, #16]	; (1d10 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam+0x30>)
    1d00:	4c04      	ldr	r4, [pc, #16]	; (1d14 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam+0x34>)
    1d02:	47a0      	blx	r4
    1d04:	6178      	str	r0, [r7, #20]
	return	r;
    1d06:	697b      	ldr	r3, [r7, #20]
}
    1d08:	4618      	mov	r0, r3
    1d0a:	371c      	adds	r7, #28
    1d0c:	46bd      	mov	sp, r7
    1d0e:	bd90      	pop	{r4, r7, pc}
    1d10:	20004ee4 	.word	0x20004ee4
    1d14:	00014345 	.word	0x00014345

00001d18 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv>:

uint32_t	MemoryStruct_Class::ReadCRCConfigurationData(void){
    1d18:	b590      	push	{r4, r7, lr}
    1d1a:	b087      	sub	sp, #28
    1d1c:	af00      	add	r7, sp, #0
    1d1e:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	uint32_t	add=(uint32_t)&flashMap->crcConfigData;
    1d20:	4b08      	ldr	r3, [pc, #32]	; (1d44 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x2c>)
    1d22:	681b      	ldr	r3, [r3, #0]
    1d24:	3310      	adds	r3, #16
    1d26:	617b      	str	r3, [r7, #20]
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    1d28:	f107 010c 	add.w	r1, r7, #12
    1d2c:	2304      	movs	r3, #4
    1d2e:	697a      	ldr	r2, [r7, #20]
    1d30:	4805      	ldr	r0, [pc, #20]	; (1d48 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x30>)
    1d32:	4c06      	ldr	r4, [pc, #24]	; (1d4c <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x34>)
    1d34:	47a0      	blx	r4
    1d36:	6138      	str	r0, [r7, #16]
	return	crc;
    1d38:	68fb      	ldr	r3, [r7, #12]
}
    1d3a:	4618      	mov	r0, r3
    1d3c:	371c      	adds	r7, #28
    1d3e:	46bd      	mov	sp, r7
    1d40:	bd90      	pop	{r4, r7, pc}
    1d42:	bf00      	nop
    1d44:	20002f30 	.word	0x20002f30
    1d48:	20004ee4 	.word	0x20004ee4
    1d4c:	00014345 	.word	0x00014345

00001d50 <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam>:
uint32_t	MemoryStruct_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
    1d50:	b590      	push	{r4, r7, lr}
    1d52:	b087      	sub	sp, #28
    1d54:	af00      	add	r7, sp, #0
    1d56:	60f8      	str	r0, [r7, #12]
    1d58:	60b9      	str	r1, [r7, #8]
    1d5a:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    1d5c:	68ba      	ldr	r2, [r7, #8]
    1d5e:	68fb      	ldr	r3, [r7, #12]
    1d60:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    1d64:	68fb      	ldr	r3, [r7, #12]
    1d66:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    1d6a:	23ac      	movs	r3, #172	; 0xac
    1d6c:	687a      	ldr	r2, [r7, #4]
    1d6e:	4804      	ldr	r0, [pc, #16]	; (1d80 <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam+0x30>)
    1d70:	4c04      	ldr	r4, [pc, #16]	; (1d84 <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam+0x34>)
    1d72:	47a0      	blx	r4
    1d74:	6178      	str	r0, [r7, #20]
	return	w;
    1d76:	697b      	ldr	r3, [r7, #20]
}
    1d78:	4618      	mov	r0, r3
    1d7a:	371c      	adds	r7, #28
    1d7c:	46bd      	mov	sp, r7
    1d7e:	bd90      	pop	{r4, r7, pc}
    1d80:	20004ee4 	.word	0x20004ee4
    1d84:	00014311 	.word	0x00014311

00001d88 <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem>:
uint32_t	MemoryStruct_Class::WriteApplicationState(HVACState& hs,uint32_t add){
    1d88:	b590      	push	{r4, r7, lr}
    1d8a:	b087      	sub	sp, #28
    1d8c:	af00      	add	r7, sp, #0
    1d8e:	60f8      	str	r0, [r7, #12]
    1d90:	60b9      	str	r1, [r7, #8]
    1d92:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    1d94:	68ba      	ldr	r2, [r7, #8]
    1d96:	68fb      	ldr	r3, [r7, #12]
    1d98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
    1d9c:	68fb      	ldr	r3, [r7, #12]
    1d9e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    1da2:	2360      	movs	r3, #96	; 0x60
    1da4:	687a      	ldr	r2, [r7, #4]
    1da6:	4804      	ldr	r0, [pc, #16]	; (1db8 <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem+0x30>)
    1da8:	4c04      	ldr	r4, [pc, #16]	; (1dbc <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem+0x34>)
    1daa:	47a0      	blx	r4
    1dac:	6178      	str	r0, [r7, #20]
	return	w;
    1dae:	697b      	ldr	r3, [r7, #20]
}
    1db0:	4618      	mov	r0, r3
    1db2:	371c      	adds	r7, #28
    1db4:	46bd      	mov	sp, r7
    1db6:	bd90      	pop	{r4, r7, pc}
    1db8:	20004ee4 	.word	0x20004ee4
    1dbc:	00014311 	.word	0x00014311

00001dc0 <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData>:
uint32_t	MemoryStruct_Class::WriteDefaultConfiguration(ConfigurationData& cd){
    1dc0:	b580      	push	{r7, lr}
    1dc2:	b084      	sub	sp, #16
    1dc4:	af00      	add	r7, sp, #0
    1dc6:	6078      	str	r0, [r7, #4]
    1dc8:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->defaultConfiguration;
    1dca:	4b07      	ldr	r3, [pc, #28]	; (1de8 <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData+0x28>)
    1dcc:	681b      	ldr	r3, [r3, #0]
    1dce:	3310      	adds	r3, #16
    1dd0:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteConfigurationData(cd,add);
    1dd2:	68fa      	ldr	r2, [r7, #12]
    1dd4:	6839      	ldr	r1, [r7, #0]
    1dd6:	6878      	ldr	r0, [r7, #4]
    1dd8:	4b04      	ldr	r3, [pc, #16]	; (1dec <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData+0x2c>)
    1dda:	4798      	blx	r3
    1ddc:	60b8      	str	r0, [r7, #8]
	return	w;
    1dde:	68bb      	ldr	r3, [r7, #8]
}
    1de0:	4618      	mov	r0, r3
    1de2:	3710      	adds	r7, #16
    1de4:	46bd      	mov	sp, r7
    1de6:	bd80      	pop	{r7, pc}
    1de8:	20002f30 	.word	0x20002f30
    1dec:	00001d51 	.word	0x00001d51

00001df0 <_ZN18MemoryStruct_Class17WriteDefaultStateEv>:
uint32_t	MemoryStruct_Class::WriteDefaultState(void){
    1df0:	b580      	push	{r7, lr}
    1df2:	b084      	sub	sp, #16
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&flashMap->hvacDefaultState;
    1df8:	4b07      	ldr	r3, [pc, #28]	; (1e18 <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x28>)
    1dfa:	681b      	ldr	r3, [r3, #0]
    1dfc:	33cc      	adds	r3, #204	; 0xcc
    1dfe:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hvac.defaultState,add);
    1e00:	68fa      	ldr	r2, [r7, #12]
    1e02:	4906      	ldr	r1, [pc, #24]	; (1e1c <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x2c>)
    1e04:	6878      	ldr	r0, [r7, #4]
    1e06:	4b06      	ldr	r3, [pc, #24]	; (1e20 <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x30>)
    1e08:	4798      	blx	r3
    1e0a:	60b8      	str	r0, [r7, #8]
	return	w;
    1e0c:	68bb      	ldr	r3, [r7, #8]
}
    1e0e:	4618      	mov	r0, r3
    1e10:	3710      	adds	r7, #16
    1e12:	46bd      	mov	sp, r7
    1e14:	bd80      	pop	{r7, pc}
    1e16:	bf00      	nop
    1e18:	20002f30 	.word	0x20002f30
    1e1c:	20002f4c 	.word	0x20002f4c
    1e20:	00001d89 	.word	0x00001d89

00001e24 <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState>:

uint32_t	MemoryStruct_Class::WriteCurrentState(HVACState& hs){
    1e24:	b580      	push	{r7, lr}
    1e26:	b084      	sub	sp, #16
    1e28:	af00      	add	r7, sp, #0
    1e2a:	6078      	str	r0, [r7, #4]
    1e2c:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacState;
    1e2e:	4b07      	ldr	r3, [pc, #28]	; (1e4c <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState+0x28>)
    1e30:	681b      	ldr	r3, [r3, #0]
    1e32:	33cc      	adds	r3, #204	; 0xcc
    1e34:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hs,add);
    1e36:	68fa      	ldr	r2, [r7, #12]
    1e38:	6839      	ldr	r1, [r7, #0]
    1e3a:	6878      	ldr	r0, [r7, #4]
    1e3c:	4b04      	ldr	r3, [pc, #16]	; (1e50 <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState+0x2c>)
    1e3e:	4798      	blx	r3
    1e40:	60b8      	str	r0, [r7, #8]
	return	w;
    1e42:	68bb      	ldr	r3, [r7, #8]
}
    1e44:	4618      	mov	r0, r3
    1e46:	3710      	adds	r7, #16
    1e48:	46bd      	mov	sp, r7
    1e4a:	bd80      	pop	{r7, pc}
    1e4c:	20002f30 	.word	0x20002f30
    1e50:	00001d89 	.word	0x00001d89

00001e54 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm>:

uint32_t	MemoryStruct_Class::WriteCRCConfigurationData(uint32_t crc){
    1e54:	b590      	push	{r4, r7, lr}
    1e56:	b085      	sub	sp, #20
    1e58:	af00      	add	r7, sp, #0
    1e5a:	6078      	str	r0, [r7, #4]
    1e5c:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->crcConfigData;
    1e5e:	4b08      	ldr	r3, [pc, #32]	; (1e80 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x2c>)
    1e60:	681b      	ldr	r3, [r3, #0]
    1e62:	3310      	adds	r3, #16
    1e64:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    1e66:	4639      	mov	r1, r7
    1e68:	2304      	movs	r3, #4
    1e6a:	68fa      	ldr	r2, [r7, #12]
    1e6c:	4805      	ldr	r0, [pc, #20]	; (1e84 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x30>)
    1e6e:	4c06      	ldr	r4, [pc, #24]	; (1e88 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x34>)
    1e70:	47a0      	blx	r4
    1e72:	60b8      	str	r0, [r7, #8]
	return	w;
    1e74:	68bb      	ldr	r3, [r7, #8]
}
    1e76:	4618      	mov	r0, r3
    1e78:	3714      	adds	r7, #20
    1e7a:	46bd      	mov	sp, r7
    1e7c:	bd90      	pop	{r4, r7, pc}
    1e7e:	bf00      	nop
    1e80:	20002f30 	.word	0x20002f30
    1e84:	20004ee4 	.word	0x20004ee4
    1e88:	00014311 	.word	0x00014311

00001e8c <_ZN18MemoryStruct_Class16WriteCRCAppStateEm>:
uint32_t	MemoryStruct_Class::WriteCRCAppState(uint32_t crc){
    1e8c:	b590      	push	{r4, r7, lr}
    1e8e:	b085      	sub	sp, #20
    1e90:	af00      	add	r7, sp, #0
    1e92:	6078      	str	r0, [r7, #4]
    1e94:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->crcAppState;
    1e96:	4b08      	ldr	r3, [pc, #32]	; (1eb8 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x2c>)
    1e98:	681b      	ldr	r3, [r3, #0]
    1e9a:	33cc      	adds	r3, #204	; 0xcc
    1e9c:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    1e9e:	4639      	mov	r1, r7
    1ea0:	2304      	movs	r3, #4
    1ea2:	68fa      	ldr	r2, [r7, #12]
    1ea4:	4805      	ldr	r0, [pc, #20]	; (1ebc <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x30>)
    1ea6:	4c06      	ldr	r4, [pc, #24]	; (1ec0 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x34>)
    1ea8:	47a0      	blx	r4
    1eaa:	60b8      	str	r0, [r7, #8]
	return	w;
    1eac:	68bb      	ldr	r3, [r7, #8]
}
    1eae:	4618      	mov	r0, r3
    1eb0:	3714      	adds	r7, #20
    1eb2:	46bd      	mov	sp, r7
    1eb4:	bd90      	pop	{r4, r7, pc}
    1eb6:	bf00      	nop
    1eb8:	20002f30 	.word	0x20002f30
    1ebc:	20004ee4 	.word	0x20004ee4
    1ec0:	00014311 	.word	0x00014311

00001ec4 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState>:
uint32_t	MemoryStruct_Class::WriteLastConfigurationData(ConfigurationData& cd){
	uint32_t	add=(uint32_t)&flashMap->lastConfiguracion;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	MemoryStruct_Class::ReadApplicationState(HVACState& as){
    1ec4:	b590      	push	{r4, r7, lr}
    1ec6:	b085      	sub	sp, #20
    1ec8:	af00      	add	r7, sp, #0
    1eca:	6078      	str	r0, [r7, #4]
    1ecc:	6039      	str	r1, [r7, #0]
	flashAddress=(uint32_t)&flashMap->hvacState;
    1ece:	4b0d      	ldr	r3, [pc, #52]	; (1f04 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x40>)
    1ed0:	681b      	ldr	r3, [r3, #0]
    1ed2:	33cc      	adds	r3, #204	; 0xcc
    1ed4:	461a      	mov	r2, r3
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	handlerAppState=PTR_HVAC_STATE(&as);
    1edc:	683a      	ldr	r2, [r7, #0]
    1ede:	687b      	ldr	r3, [r7, #4]
    1ee0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,flashAddress,sizeof(HVACState));
    1ee4:	687b      	ldr	r3, [r7, #4]
    1ee6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    1eea:	687b      	ldr	r3, [r7, #4]
    1eec:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    1ef0:	2360      	movs	r3, #96	; 0x60
    1ef2:	4805      	ldr	r0, [pc, #20]	; (1f08 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x44>)
    1ef4:	4c05      	ldr	r4, [pc, #20]	; (1f0c <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x48>)
    1ef6:	47a0      	blx	r4
    1ef8:	60f8      	str	r0, [r7, #12]
	return	r;
    1efa:	68fb      	ldr	r3, [r7, #12]
}
    1efc:	4618      	mov	r0, r3
    1efe:	3714      	adds	r7, #20
    1f00:	46bd      	mov	sp, r7
    1f02:	bd90      	pop	{r4, r7, pc}
    1f04:	20002f30 	.word	0x20002f30
    1f08:	20004ee4 	.word	0x20004ee4
    1f0c:	00014345 	.word	0x00014345

00001f10 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv>:
uint32_t	MemoryStruct_Class::ReadCRCApplicationState(void){
    1f10:	b590      	push	{r4, r7, lr}
    1f12:	b085      	sub	sp, #20
    1f14:	af00      	add	r7, sp, #0
    1f16:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	flashAddress=(uint32_t)&flashMap->crcAppState;
    1f18:	4b0a      	ldr	r3, [pc, #40]	; (1f44 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x34>)
    1f1a:	681b      	ldr	r3, [r3, #0]
    1f1c:	33cc      	adds	r3, #204	; 0xcc
    1f1e:	461a      	mov	r2, r3
    1f20:	687b      	ldr	r3, [r7, #4]
    1f22:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),flashAddress,sizeof(uint32_t));
    1f26:	687b      	ldr	r3, [r7, #4]
    1f28:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    1f2c:	f107 0108 	add.w	r1, r7, #8
    1f30:	2304      	movs	r3, #4
    1f32:	4805      	ldr	r0, [pc, #20]	; (1f48 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x38>)
    1f34:	4c05      	ldr	r4, [pc, #20]	; (1f4c <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x3c>)
    1f36:	47a0      	blx	r4
    1f38:	60f8      	str	r0, [r7, #12]
	return	crc;
    1f3a:	68bb      	ldr	r3, [r7, #8]
    1f3c:	4618      	mov	r0, r3
    1f3e:	3714      	adds	r7, #20
    1f40:	46bd      	mov	sp, r7
    1f42:	bd90      	pop	{r4, r7, pc}
    1f44:	20002f30 	.word	0x20002f30
    1f48:	20004ee4 	.word	0x20004ee4
    1f4c:	00014345 	.word	0x00014345

00001f50 <_ZN10PBIT_ClassC1Ev>:

#include "PBIT_Class.h"
#include "Interfaces_Class.h"

// default constructor
PBIT_Class::PBIT_Class()
    1f50:	b480      	push	{r7}
    1f52:	b083      	sub	sp, #12
    1f54:	af00      	add	r7, sp, #0
    1f56:	6078      	str	r0, [r7, #4]
{
} //PBIT_Class
    1f58:	687b      	ldr	r3, [r7, #4]
    1f5a:	4618      	mov	r0, r3
    1f5c:	370c      	adds	r7, #12
    1f5e:	46bd      	mov	sp, r7
    1f60:	bc80      	pop	{r7}
    1f62:	4770      	bx	lr

00001f64 <_ZN10PBIT_ClassD1Ev>:

// default destructor
PBIT_Class::~PBIT_Class()
    1f64:	b480      	push	{r7}
    1f66:	b083      	sub	sp, #12
    1f68:	af00      	add	r7, sp, #0
    1f6a:	6078      	str	r0, [r7, #4]
{
} //~PBIT_Class
    1f6c:	687b      	ldr	r3, [r7, #4]
    1f6e:	4618      	mov	r0, r3
    1f70:	370c      	adds	r7, #12
    1f72:	46bd      	mov	sp, r7
    1f74:	bc80      	pop	{r7}
    1f76:	4770      	bx	lr

00001f78 <_ZN10PBIT_ClasscvbEv>:
		isOK=true;
	}
	return isOK;
}

PBIT_Class::operator bool(){
    1f78:	b480      	push	{r7}
    1f7a:	b083      	sub	sp, #12
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	6078      	str	r0, [r7, #4]
	return	isOK;
    1f80:	687b      	ldr	r3, [r7, #4]
    1f82:	781b      	ldrb	r3, [r3, #0]
    1f84:	b2db      	uxtb	r3, r3
}
    1f86:	4618      	mov	r0, r3
    1f88:	370c      	adds	r7, #12
    1f8a:	46bd      	mov	sp, r7
    1f8c:	bc80      	pop	{r7}
    1f8e:	4770      	bx	lr

00001f90 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus>:

uint32_t  PBIT_Class::CheckCurrentStatus(HVACStatus& cs){
    1f90:	b580      	push	{r7, lr}
    1f92:	b086      	sub	sp, #24
    1f94:	af00      	add	r7, sp, #0
    1f96:	6078      	str	r0, [r7, #4]
    1f98:	6039      	str	r1, [r7, #0]
	interfaces.GetStatus(cs);
    1f9a:	6839      	ldr	r1, [r7, #0]
    1f9c:	4812      	ldr	r0, [pc, #72]	; (1fe8 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x58>)
    1f9e:	4b13      	ldr	r3, [pc, #76]	; (1fec <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x5c>)
    1fa0:	4798      	blx	r3
	uint32_t	*s=(uint32_t*)&cs.statusBits;
    1fa2:	683b      	ldr	r3, [r7, #0]
    1fa4:	613b      	str	r3, [r7, #16]
	uint32_t	v=*s;
    1fa6:	693b      	ldr	r3, [r7, #16]
    1fa8:	681b      	ldr	r3, [r3, #0]
    1faa:	60fb      	str	r3, [r7, #12]

	for (int i=0;i<32;i++)
    1fac:	2300      	movs	r3, #0
    1fae:	617b      	str	r3, [r7, #20]
    1fb0:	697b      	ldr	r3, [r7, #20]
    1fb2:	2b1f      	cmp	r3, #31
    1fb4:	dc0d      	bgt.n	1fd2 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x42>
	{
		v+=(0x01<<i)&(v);
    1fb6:	2201      	movs	r2, #1
    1fb8:	697b      	ldr	r3, [r7, #20]
    1fba:	fa02 f303 	lsl.w	r3, r2, r3
    1fbe:	461a      	mov	r2, r3
    1fc0:	68fb      	ldr	r3, [r7, #12]
    1fc2:	401a      	ands	r2, r3
    1fc4:	68fb      	ldr	r3, [r7, #12]
    1fc6:	4413      	add	r3, r2
    1fc8:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<32;i++)
    1fca:	697b      	ldr	r3, [r7, #20]
    1fcc:	3301      	adds	r3, #1
    1fce:	617b      	str	r3, [r7, #20]
    1fd0:	e7ee      	b.n	1fb0 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x20>
		
	}
	if (v==0)
    1fd2:	68fb      	ldr	r3, [r7, #12]
    1fd4:	2b00      	cmp	r3, #0
    1fd6:	d102      	bne.n	1fde <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x4e>
	{
		isOK=true;
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	2201      	movs	r2, #1
    1fdc:	701a      	strb	r2, [r3, #0]
	}
	return	v;
    1fde:	68fb      	ldr	r3, [r7, #12]
}
    1fe0:	4618      	mov	r0, r3
    1fe2:	3718      	adds	r7, #24
    1fe4:	46bd      	mov	sp, r7
    1fe6:	bd80      	pop	{r7, pc}
    1fe8:	20001418 	.word	0x20001418
    1fec:	00001511 	.word	0x00001511

00001ff0 <_Z41__static_initialization_and_destruction_0ii>:

    1ff0:	b580      	push	{r7, lr}
    1ff2:	b082      	sub	sp, #8
    1ff4:	af00      	add	r7, sp, #0
    1ff6:	6078      	str	r0, [r7, #4]
    1ff8:	6039      	str	r1, [r7, #0]
    1ffa:	687b      	ldr	r3, [r7, #4]
    1ffc:	2b01      	cmp	r3, #1
    1ffe:	d10c      	bne.n	201a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2000:	683b      	ldr	r3, [r7, #0]
    2002:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2006:	4293      	cmp	r3, r2
    2008:	d107      	bne.n	201a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    200a:	4806      	ldr	r0, [pc, #24]	; (2024 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    200c:	4b06      	ldr	r3, [pc, #24]	; (2028 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    200e:	4798      	blx	r3
    2010:	4a06      	ldr	r2, [pc, #24]	; (202c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2012:	4907      	ldr	r1, [pc, #28]	; (2030 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2014:	4803      	ldr	r0, [pc, #12]	; (2024 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2016:	4b07      	ldr	r3, [pc, #28]	; (2034 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2018:	4798      	blx	r3
    201a:	bf00      	nop
    201c:	3708      	adds	r7, #8
    201e:	46bd      	mov	sp, r7
    2020:	bd80      	pop	{r7, pc}
    2022:	bf00      	nop
    2024:	20002f34 	.word	0x20002f34
    2028:	00001f51 	.word	0x00001f51
    202c:	20000000 	.word	0x20000000
    2030:	00001f65 	.word	0x00001f65
    2034:	000167bd 	.word	0x000167bd

00002038 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:
    2038:	b580      	push	{r7, lr}
    203a:	af00      	add	r7, sp, #0
    203c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2040:	2001      	movs	r0, #1
    2042:	4b01      	ldr	r3, [pc, #4]	; (2048 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x10>)
    2044:	4798      	blx	r3
    2046:	bd80      	pop	{r7, pc}
    2048:	00001ff1 	.word	0x00001ff1

0000204c <_ZN19PersistenceServicesC1Ev>:
tick_t PersistenceServices::lastUpdate[kNumberOfUsageTimeCounters + kNumberOfCycleDescriptions];	




PersistenceServices::PersistenceServices(void)
    204c:	b580      	push	{r7, lr}
    204e:	b082      	sub	sp, #8
    2050:	af00      	add	r7, sp, #0
    2052:	6078      	str	r0, [r7, #4]
	:lastValidSaveWorkingStateForGAINIndex(0)
    2054:	687b      	ldr	r3, [r7, #4]
    2056:	4618      	mov	r0, r3
    2058:	4b05      	ldr	r3, [pc, #20]	; (2070 <_ZN19PersistenceServicesC1Ev+0x24>)
    205a:	4798      	blx	r3
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	2200      	movs	r2, #0
    2060:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
	{
	}
    2064:	687b      	ldr	r3, [r7, #4]
    2066:	4618      	mov	r0, r3
    2068:	3708      	adds	r7, #8
    206a:	46bd      	mov	sp, r7
    206c:	bd80      	pop	{r7, pc}
    206e:	bf00      	nop
    2070:	00000d15 	.word	0x00000d15

00002074 <_ZN19PersistenceServices26writeConfigurationDataAreaER17ConfigurationData>:
	
	return result;
	}

bool PersistenceServices::writeConfigurationDataArea(ConfigurationData& data)
	{
    2074:	b480      	push	{r7}
    2076:	b085      	sub	sp, #20
    2078:	af00      	add	r7, sp, #0
    207a:	6078      	str	r0, [r7, #4]
    207c:	6039      	str	r1, [r7, #0]
	bool	result(true);
    207e:	2301      	movs	r3, #1
    2080:	73fb      	strb	r3, [r7, #15]

	data.commons.version = kConfigurationDataVersion;
    2082:	683b      	ldr	r3, [r7, #0]
    2084:	2204      	movs	r2, #4
    2086:	605a      	str	r2, [r3, #4]
	data.commons.size = kConfigurationDataSize;
    2088:	683b      	ldr	r3, [r7, #0]
    208a:	22ac      	movs	r2, #172	; 0xac
    208c:	601a      	str	r2, [r3, #0]
	data.commons.partNumber = PARTNUMBER;
    208e:	683b      	ldr	r3, [r7, #0]
    2090:	f240 720c 	movw	r2, #1804	; 0x70c
    2094:	609a      	str	r2, [r3, #8]



	

	return result;
    2096:	7bfb      	ldrb	r3, [r7, #15]
	}
    2098:	4618      	mov	r0, r3
    209a:	3714      	adds	r7, #20
    209c:	46bd      	mov	sp, r7
    209e:	bc80      	pop	{r7}
    20a0:	4770      	bx	lr

000020a2 <_ZN19PersistenceServices20readCycleDescriptionER16CycleDescriptionh>:
	
	return result;
	}

bool PersistenceServices::readCycleDescription(CycleDescription& cycle, uint8 id)
	{
    20a2:	b480      	push	{r7}
    20a4:	b087      	sub	sp, #28
    20a6:	af00      	add	r7, sp, #0
    20a8:	60f8      	str	r0, [r7, #12]
    20aa:	60b9      	str	r1, [r7, #8]
    20ac:	4613      	mov	r3, r2
    20ae:	71fb      	strb	r3, [r7, #7]
	bool		result(false);
    20b0:	2300      	movs	r3, #0
    20b2:	75fb      	strb	r3, [r7, #23]
		{


		}

	return result;
    20b4:	7dfb      	ldrb	r3, [r7, #23]
	}
    20b6:	4618      	mov	r0, r3
    20b8:	371c      	adds	r7, #28
    20ba:	46bd      	mov	sp, r7
    20bc:	bc80      	pop	{r7}
    20be:	4770      	bx	lr

000020c0 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData>:
	invalidatePersistentArea(kNVM2,FRAMProxy.persistentConfigurationArea.header);

	}

bool PersistenceServices::readPersistentConfigurationDataArea(PersistentConfigurationData& data)
	{
    20c0:	b590      	push	{r4, r7, lr}
    20c2:	b085      	sub	sp, #20
    20c4:	af00      	add	r7, sp, #0
    20c6:	6078      	str	r0, [r7, #4]
    20c8:	6039      	str	r1, [r7, #0]
	bool		result;

	result = isPersistentAreaValid(kNVM2, FRAMProxy.persistentConfigurationArea.header, sizeof(PersistentConfigurationDataArea));
    20ca:	2300      	movs	r3, #0
    20cc:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
    20d0:	2344      	movs	r3, #68	; 0x44
    20d2:	2102      	movs	r1, #2
    20d4:	6878      	ldr	r0, [r7, #4]
    20d6:	4c1e      	ldr	r4, [pc, #120]	; (2150 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData+0x90>)
    20d8:	47a0      	blx	r4
    20da:	4603      	mov	r3, r0
    20dc:	73fb      	strb	r3, [r7, #15]
	if (result)
    20de:	7bfb      	ldrb	r3, [r7, #15]
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData+0x2c>
		{
		int32	address((int32)&FRAMProxy.persistentConfigurationArea.configuration);
    20e4:	2300      	movs	r3, #0
    20e6:	f203 5314 	addw	r3, r3, #1300	; 0x514
    20ea:	60bb      	str	r3, [r7, #8]
	
		}

	result &= (data.version == kPersistentConfigurationDataVersion);
    20ec:	7bfb      	ldrb	r3, [r7, #15]
    20ee:	683a      	ldr	r2, [r7, #0]
    20f0:	6852      	ldr	r2, [r2, #4]
    20f2:	2a02      	cmp	r2, #2
    20f4:	bf0c      	ite	eq
    20f6:	2201      	moveq	r2, #1
    20f8:	2200      	movne	r2, #0
    20fa:	b2d2      	uxtb	r2, r2
    20fc:	4013      	ands	r3, r2
    20fe:	2b00      	cmp	r3, #0
    2100:	bf14      	ite	ne
    2102:	2301      	movne	r3, #1
    2104:	2300      	moveq	r3, #0
    2106:	73fb      	strb	r3, [r7, #15]
	result &= (data.size == kPersistentConfigurationDataSize);
    2108:	7bfb      	ldrb	r3, [r7, #15]
    210a:	683a      	ldr	r2, [r7, #0]
    210c:	6812      	ldr	r2, [r2, #0]
    210e:	2a38      	cmp	r2, #56	; 0x38
    2110:	bf0c      	ite	eq
    2112:	2201      	moveq	r2, #1
    2114:	2200      	movne	r2, #0
    2116:	b2d2      	uxtb	r2, r2
    2118:	4013      	ands	r3, r2
    211a:	2b00      	cmp	r3, #0
    211c:	bf14      	ite	ne
    211e:	2301      	movne	r3, #1
    2120:	2300      	moveq	r3, #0
    2122:	73fb      	strb	r3, [r7, #15]
	result &= (data.partNumber == PARTNUMBER);
    2124:	7bfb      	ldrb	r3, [r7, #15]
    2126:	683a      	ldr	r2, [r7, #0]
    2128:	6892      	ldr	r2, [r2, #8]
    212a:	f240 710c 	movw	r1, #1804	; 0x70c
    212e:	428a      	cmp	r2, r1
    2130:	bf0c      	ite	eq
    2132:	2201      	moveq	r2, #1
    2134:	2200      	movne	r2, #0
    2136:	b2d2      	uxtb	r2, r2
    2138:	4013      	ands	r3, r2
    213a:	2b00      	cmp	r3, #0
    213c:	bf14      	ite	ne
    213e:	2301      	movne	r3, #1
    2140:	2300      	moveq	r3, #0
    2142:	73fb      	strb	r3, [r7, #15]
	return result;
    2144:	7bfb      	ldrb	r3, [r7, #15]
	}
    2146:	4618      	mov	r0, r3
    2148:	3714      	adds	r7, #20
    214a:	46bd      	mov	sp, r7
    214c:	bd90      	pop	{r4, r7, pc}
    214e:	bf00      	nop
    2150:	00002241 	.word	0x00002241

00002154 <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData>:
	
bool PersistenceServices::writePersistentConfigurationDataArea(PersistentConfigurationData& data)
	{
    2154:	b590      	push	{r4, r7, lr}
    2156:	b085      	sub	sp, #20
    2158:	af00      	add	r7, sp, #0
    215a:	6078      	str	r0, [r7, #4]
    215c:	6039      	str	r1, [r7, #0]
	bool		result(true);
    215e:	2301      	movs	r3, #1
    2160:	73fb      	strb	r3, [r7, #15]

	data.version = kPersistentConfigurationDataVersion;
    2162:	683b      	ldr	r3, [r7, #0]
    2164:	2202      	movs	r2, #2
    2166:	605a      	str	r2, [r3, #4]
	data.size = kPersistentConfigurationDataSize;
    2168:	683b      	ldr	r3, [r7, #0]
    216a:	2238      	movs	r2, #56	; 0x38
    216c:	601a      	str	r2, [r3, #0]
	data.partNumber = PARTNUMBER;
    216e:	683b      	ldr	r3, [r7, #0]
    2170:	f240 720c 	movw	r2, #1804	; 0x70c
    2174:	609a      	str	r2, [r3, #8]

	int32	address((int32)&FRAMProxy.persistentConfigurationArea.configuration);
    2176:	2300      	movs	r3, #0
    2178:	f203 5314 	addw	r3, r3, #1300	; 0x514
    217c:	60bb      	str	r3, [r7, #8]

    invalidatePersistentArea(kNVM2, FRAMProxy.persistentConfigurationArea.header);
    217e:	2300      	movs	r3, #0
    2180:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
    2184:	461a      	mov	r2, r3
    2186:	2102      	movs	r1, #2
    2188:	6878      	ldr	r0, [r7, #4]
    218a:	4b07      	ldr	r3, [pc, #28]	; (21a8 <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData+0x54>)
    218c:	4798      	blx	r3
	 validatePersistentArea(kNVM2, FRAMProxy.persistentConfigurationArea.header, sizeof(PersistentConfigurationDataArea));
    218e:	2300      	movs	r3, #0
    2190:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
    2194:	2344      	movs	r3, #68	; 0x44
    2196:	2102      	movs	r1, #2
    2198:	6878      	ldr	r0, [r7, #4]
    219a:	4c04      	ldr	r4, [pc, #16]	; (21ac <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData+0x58>)
    219c:	47a0      	blx	r4


	return result;
    219e:	7bfb      	ldrb	r3, [r7, #15]
	}
    21a0:	4618      	mov	r0, r3
    21a2:	3714      	adds	r7, #20
    21a4:	46bd      	mov	sp, r7
    21a6:	bd90      	pop	{r4, r7, pc}
    21a8:	00002301 	.word	0x00002301
    21ac:	00002321 	.word	0x00002321

000021b0 <_ZN19PersistenceServices26restoreWorkingStateForGAINER9HVACState>:


	}

void PersistenceServices::restoreWorkingStateForGAIN(HVACState& v)
	{
    21b0:	b480      	push	{r7}
    21b2:	b083      	sub	sp, #12
    21b4:	af00      	add	r7, sp, #0
    21b6:	6078      	str	r0, [r7, #4]
    21b8:	6039      	str	r1, [r7, #0]
	int32	address;
	


	}
    21ba:	bf00      	nop
    21bc:	370c      	adds	r7, #12
    21be:	46bd      	mov	sp, r7
    21c0:	bc80      	pop	{r7}
    21c2:	4770      	bx	lr

000021c4 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv>:
	value += increment;

	}
	
bool PersistenceServices::IsConfigurationDataUpdated()
{
    21c4:	b580      	push	{r7, lr}
    21c6:	b086      	sub	sp, #24
    21c8:	af00      	add	r7, sp, #0
    21ca:	6078      	str	r0, [r7, #4]
	uint32_t	ver=factoryDefaultsConfiguration.commons.version;
    21cc:	4b17      	ldr	r3, [pc, #92]	; (222c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x68>)
    21ce:	685b      	ldr	r3, [r3, #4]
    21d0:	617b      	str	r3, [r7, #20]
	uint32_t	verUp=memory.ReadUpdatedConfigurationData(configuration);
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	33c4      	adds	r3, #196	; 0xc4
    21d6:	4619      	mov	r1, r3
    21d8:	4815      	ldr	r0, [pc, #84]	; (2230 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    21da:	4b16      	ldr	r3, [pc, #88]	; (2234 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x70>)
    21dc:	4798      	blx	r3
    21de:	6138      	str	r0, [r7, #16]

	if ((verUp>0))
    21e0:	693b      	ldr	r3, [r7, #16]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d001      	beq.n	21ea <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x26>
	{
		return false;
    21e6:	2300      	movs	r3, #0
    21e8:	e01c      	b.n	2224 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
	} 
	else
	{
		uint32_t	refCRC=memory.ReadCRCConfigurationData();
    21ea:	4811      	ldr	r0, [pc, #68]	; (2230 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    21ec:	4b12      	ldr	r3, [pc, #72]	; (2238 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x74>)
    21ee:	4798      	blx	r3
    21f0:	60f8      	str	r0, [r7, #12]
		uint32_t	crc=CalculateCRC((uint32_t *)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
    21f2:	6878      	ldr	r0, [r7, #4]
    21f4:	687b      	ldr	r3, [r7, #4]
    21f6:	33c4      	adds	r3, #196	; 0xc4
    21f8:	22ac      	movs	r2, #172	; 0xac
    21fa:	4619      	mov	r1, r3
    21fc:	4b0f      	ldr	r3, [pc, #60]	; (223c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x78>)
    21fe:	4798      	blx	r3
    2200:	60b8      	str	r0, [r7, #8]
		if (refCRC==crc)
    2202:	68fa      	ldr	r2, [r7, #12]
    2204:	68bb      	ldr	r3, [r7, #8]
    2206:	429a      	cmp	r2, r3
    2208:	d10b      	bne.n	2222 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x5e>
		{
			verUp=configuration.commons.version;
    220a:	687b      	ldr	r3, [r7, #4]
    220c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
    2210:	613b      	str	r3, [r7, #16]
			return (verUp>ver);
    2212:	693a      	ldr	r2, [r7, #16]
    2214:	697b      	ldr	r3, [r7, #20]
    2216:	429a      	cmp	r2, r3
    2218:	bf8c      	ite	hi
    221a:	2301      	movhi	r3, #1
    221c:	2300      	movls	r3, #0
    221e:	b2db      	uxtb	r3, r3
    2220:	e000      	b.n	2224 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
		} 
		else
		{
			return	false;
    2222:	2300      	movs	r3, #0
		}
		
	}
	return	false;

}
    2224:	4618      	mov	r0, r3
    2226:	3718      	adds	r7, #24
    2228:	46bd      	mov	sp, r7
    222a:	bd80      	pop	{r7, pc}
    222c:	0001c8a4 	.word	0x0001c8a4
    2230:	20001b00 	.word	0x20001b00
    2234:	00001cb1 	.word	0x00001cb1
    2238:	00001d19 	.word	0x00001d19
    223c:	00000d99 	.word	0x00000d99

00002240 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm>:
    }
#endif


bool PersistenceServices::isPersistentAreaValid(uint8 nvm, NVMHeader& adr, uint32 size)
	{
    2240:	b480      	push	{r7}
    2242:	b089      	sub	sp, #36	; 0x24
    2244:	af00      	add	r7, sp, #0
    2246:	60f8      	str	r0, [r7, #12]
    2248:	607a      	str	r2, [r7, #4]
    224a:	603b      	str	r3, [r7, #0]
    224c:	460b      	mov	r3, r1
    224e:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;
	bool		result;


	result = (header.magic == validMagic) && (header.size == size);
    2250:	693b      	ldr	r3, [r7, #16]
    2252:	4a08      	ldr	r2, [pc, #32]	; (2274 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x34>)
    2254:	4293      	cmp	r3, r2
    2256:	d105      	bne.n	2264 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x24>
    2258:	697a      	ldr	r2, [r7, #20]
    225a:	683b      	ldr	r3, [r7, #0]
    225c:	429a      	cmp	r2, r3
    225e:	d101      	bne.n	2264 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x24>
    2260:	2301      	movs	r3, #1
    2262:	e000      	b.n	2266 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x26>
    2264:	2300      	movs	r3, #0
    2266:	77fb      	strb	r3, [r7, #31]
	

	return result;
    2268:	7ffb      	ldrb	r3, [r7, #31]
	}
    226a:	4618      	mov	r0, r3
    226c:	3724      	adds	r7, #36	; 0x24
    226e:	46bd      	mov	sp, r7
    2270:	bc80      	pop	{r7}
    2272:	4770      	bx	lr
    2274:	14031869 	.word	0x14031869

00002278 <_ZN19PersistenceServices16IsStateDataValidER9HVACState>:
bool PersistenceServices::IsStateDataValid(HVACState& as)
{
    2278:	b580      	push	{r7, lr}
    227a:	b084      	sub	sp, #16
    227c:	af00      	add	r7, sp, #0
    227e:	6078      	str	r0, [r7, #4]
    2280:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadCRCApplicationState();
    2282:	480b      	ldr	r0, [pc, #44]	; (22b0 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x38>)
    2284:	4b0b      	ldr	r3, [pc, #44]	; (22b4 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x3c>)
    2286:	4798      	blx	r3
    2288:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(lastState));
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	2260      	movs	r2, #96	; 0x60
    228e:	6839      	ldr	r1, [r7, #0]
    2290:	4618      	mov	r0, r3
    2292:	4b09      	ldr	r3, [pc, #36]	; (22b8 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x40>)
    2294:	4798      	blx	r3
    2296:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    2298:	68fa      	ldr	r2, [r7, #12]
    229a:	68bb      	ldr	r3, [r7, #8]
    229c:	429a      	cmp	r2, r3
    229e:	bf0c      	ite	eq
    22a0:	2301      	moveq	r3, #1
    22a2:	2300      	movne	r3, #0
    22a4:	b2db      	uxtb	r3, r3
}
    22a6:	4618      	mov	r0, r3
    22a8:	3710      	adds	r7, #16
    22aa:	46bd      	mov	sp, r7
    22ac:	bd80      	pop	{r7, pc}
    22ae:	bf00      	nop
    22b0:	20001b00 	.word	0x20001b00
    22b4:	00001f11 	.word	0x00001f11
    22b8:	00000d99 	.word	0x00000d99

000022bc <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState>:
bool PersistenceServices::IsFastStateDataValid(HVACState& as)
{
    22bc:	b580      	push	{r7, lr}
    22be:	b084      	sub	sp, #16
    22c0:	af00      	add	r7, sp, #0
    22c2:	6078      	str	r0, [r7, #4]
    22c4:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadFastCRCApplicationState();
    22c6:	480b      	ldr	r0, [pc, #44]	; (22f4 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x38>)
    22c8:	4b0b      	ldr	r3, [pc, #44]	; (22f8 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x3c>)
    22ca:	4798      	blx	r3
    22cc:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(HVACState));
    22ce:	687b      	ldr	r3, [r7, #4]
    22d0:	2260      	movs	r2, #96	; 0x60
    22d2:	6839      	ldr	r1, [r7, #0]
    22d4:	4618      	mov	r0, r3
    22d6:	4b09      	ldr	r3, [pc, #36]	; (22fc <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x40>)
    22d8:	4798      	blx	r3
    22da:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    22dc:	68fa      	ldr	r2, [r7, #12]
    22de:	68bb      	ldr	r3, [r7, #8]
    22e0:	429a      	cmp	r2, r3
    22e2:	bf0c      	ite	eq
    22e4:	2301      	moveq	r3, #1
    22e6:	2300      	movne	r3, #0
    22e8:	b2db      	uxtb	r3, r3
}
    22ea:	4618      	mov	r0, r3
    22ec:	3710      	adds	r7, #16
    22ee:	46bd      	mov	sp, r7
    22f0:	bd80      	pop	{r7, pc}
    22f2:	bf00      	nop
    22f4:	20001af0 	.word	0x20001af0
    22f8:	00001081 	.word	0x00001081
    22fc:	00000d99 	.word	0x00000d99

00002300 <_ZN19PersistenceServices24invalidatePersistentAreaEhR9NVMHeader>:

void PersistenceServices::invalidatePersistentArea(uint8 nvm, NVMHeader& adr)
	{
    2300:	b480      	push	{r7}
    2302:	b089      	sub	sp, #36	; 0x24
    2304:	af00      	add	r7, sp, #0
    2306:	60f8      	str	r0, [r7, #12]
    2308:	460b      	mov	r3, r1
    230a:	607a      	str	r2, [r7, #4]
    230c:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;

	header.magic = 0;
    230e:	2300      	movs	r3, #0
    2310:	617b      	str	r3, [r7, #20]
	header.size = 0;
    2312:	2300      	movs	r3, #0
    2314:	61bb      	str	r3, [r7, #24]

	}
    2316:	bf00      	nop
    2318:	3724      	adds	r7, #36	; 0x24
    231a:	46bd      	mov	sp, r7
    231c:	bc80      	pop	{r7}
    231e:	4770      	bx	lr

00002320 <_ZN19PersistenceServices22validatePersistentAreaEhR9NVMHeaderm>:

void PersistenceServices::validatePersistentArea(uint8 nvm, NVMHeader& adr, uint32 size)
	{
    2320:	b480      	push	{r7}
    2322:	b089      	sub	sp, #36	; 0x24
    2324:	af00      	add	r7, sp, #0
    2326:	60f8      	str	r0, [r7, #12]
    2328:	607a      	str	r2, [r7, #4]
    232a:	603b      	str	r3, [r7, #0]
    232c:	460b      	mov	r3, r1
    232e:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;

	header.magic = validMagic;
    2330:	4b04      	ldr	r3, [pc, #16]	; (2344 <_ZN19PersistenceServices22validatePersistentAreaEhR9NVMHeaderm+0x24>)
    2332:	617b      	str	r3, [r7, #20]
	header.size = size;
    2334:	683b      	ldr	r3, [r7, #0]
    2336:	61bb      	str	r3, [r7, #24]


	

	}
    2338:	bf00      	nop
    233a:	3724      	adds	r7, #36	; 0x24
    233c:	46bd      	mov	sp, r7
    233e:	bc80      	pop	{r7}
    2340:	4770      	bx	lr
    2342:	bf00      	nop
    2344:	14031869 	.word	0x14031869

00002348 <_ZN5eventC1Ev>:
		tick_t		timestamp;
		eventData	data;
		event*		next;
	};

inline event::event()
    2348:	b580      	push	{r7, lr}
    234a:	b082      	sub	sp, #8
    234c:	af00      	add	r7, sp, #0
    234e:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    2350:	687b      	ldr	r3, [r7, #4]
    2352:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2356:	801a      	strh	r2, [r3, #0]
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    235e:	805a      	strh	r2, [r3, #2]
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	2200      	movs	r2, #0
    2364:	605a      	str	r2, [r3, #4]
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	3308      	adds	r3, #8
    236a:	2100      	movs	r1, #0
    236c:	4618      	mov	r0, r3
    236e:	4b05      	ldr	r3, [pc, #20]	; (2384 <_ZN5eventC1Ev+0x3c>)
    2370:	4798      	blx	r3
    2372:	687b      	ldr	r3, [r7, #4]
    2374:	2200      	movs	r2, #0
    2376:	60da      	str	r2, [r3, #12]
	{
	}
    2378:	687b      	ldr	r3, [r7, #4]
    237a:	4618      	mov	r0, r3
    237c:	3708      	adds	r7, #8
    237e:	46bd      	mov	sp, r7
    2380:	bd80      	pop	{r7, pc}
    2382:	bf00      	nop
    2384:	000002d1 	.word	0x000002d1

00002388 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    2388:	b590      	push	{r4, r7, lr}
    238a:	b083      	sub	sp, #12
    238c:	af00      	add	r7, sp, #0
    238e:	6078      	str	r0, [r7, #4]
    2390:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    2392:	683b      	ldr	r3, [r7, #0]
    2394:	2b00      	cmp	r3, #0
    2396:	d101      	bne.n	239c <_ZN5Print5writeEPKc+0x14>
    2398:	2300      	movs	r3, #0
    239a:	e00c      	b.n	23b6 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	681b      	ldr	r3, [r3, #0]
    23a0:	3304      	adds	r3, #4
    23a2:	681c      	ldr	r4, [r3, #0]
    23a4:	6838      	ldr	r0, [r7, #0]
    23a6:	4b06      	ldr	r3, [pc, #24]	; (23c0 <_ZN5Print5writeEPKc+0x38>)
    23a8:	4798      	blx	r3
    23aa:	4603      	mov	r3, r0
    23ac:	461a      	mov	r2, r3
    23ae:	6839      	ldr	r1, [r7, #0]
    23b0:	6878      	ldr	r0, [r7, #4]
    23b2:	47a0      	blx	r4
    23b4:	4603      	mov	r3, r0
    }
    23b6:	4618      	mov	r0, r3
    23b8:	370c      	adds	r7, #12
    23ba:	46bd      	mov	sp, r7
    23bc:	bd90      	pop	{r4, r7, pc}
    23be:	bf00      	nop
    23c0:	00018d81 	.word	0x00018d81

000023c4 <_ZN12States_ClassC1Ev>:
#include "ALU_Class.h"
#include "CBIT_Class.h"
#include "FlapperValve_Class.h"

	// default constructor
States_Class::States_Class(void)
    23c4:	b580      	push	{r7, lr}
    23c6:	b082      	sub	sp, #8
    23c8:	af00      	add	r7, sp, #0
    23ca:	6078      	str	r0, [r7, #4]
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	4618      	mov	r0, r3
    23d0:	4b0d      	ldr	r3, [pc, #52]	; (2408 <_ZN12States_ClassC1Ev+0x44>)
    23d2:	4798      	blx	r3
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
    23da:	4618      	mov	r0, r3
    23dc:	4b0b      	ldr	r3, [pc, #44]	; (240c <_ZN12States_ClassC1Ev+0x48>)
    23de:	4798      	blx	r3
    23e0:	4a0b      	ldr	r2, [pc, #44]	; (2410 <_ZN12States_ClassC1Ev+0x4c>)
    23e2:	687b      	ldr	r3, [r7, #4]
    23e4:	601a      	str	r2, [r3, #0]
	{
	listener.eventHandler = NULL;
    23e6:	4b0b      	ldr	r3, [pc, #44]	; (2414 <_ZN12States_ClassC1Ev+0x50>)
    23e8:	2200      	movs	r2, #0
    23ea:	605a      	str	r2, [r3, #4]
state=defaultState;
    23ec:	687a      	ldr	r2, [r7, #4]
    23ee:	687b      	ldr	r3, [r7, #4]
    23f0:	f502 7057 	add.w	r0, r2, #860	; 0x35c
    23f4:	3304      	adds	r3, #4
    23f6:	2260      	movs	r2, #96	; 0x60
    23f8:	4619      	mov	r1, r3
    23fa:	4b07      	ldr	r3, [pc, #28]	; (2418 <_ZN12States_ClassC1Ev+0x54>)
    23fc:	4798      	blx	r3
	}
    23fe:	687b      	ldr	r3, [r7, #4]
    2400:	4618      	mov	r0, r3
    2402:	3708      	adds	r7, #8
    2404:	46bd      	mov	sp, r7
    2406:	bd80      	pop	{r7, pc}
    2408:	00000985 	.word	0x00000985
    240c:	00001285 	.word	0x00001285
    2410:	0001cf2c 	.word	0x0001cf2c
    2414:	20004d9c 	.word	0x20004d9c
    2418:	00018b59 	.word	0x00018b59

0000241c <_ZN12States_ClassD1Ev>:

// default destructor
States_Class::~States_Class()
    241c:	b580      	push	{r7, lr}
    241e:	b082      	sub	sp, #8
    2420:	af00      	add	r7, sp, #0
    2422:	6078      	str	r0, [r7, #4]
    2424:	4a08      	ldr	r2, [pc, #32]	; (2448 <_ZN12States_ClassD1Ev+0x2c>)
    2426:	687b      	ldr	r3, [r7, #4]
    2428:	601a      	str	r2, [r3, #0]
    242a:	687b      	ldr	r3, [r7, #4]
    242c:	f503 7320 	add.w	r3, r3, #640	; 0x280
    2430:	4618      	mov	r0, r3
    2432:	4b06      	ldr	r3, [pc, #24]	; (244c <_ZN12States_ClassD1Ev+0x30>)
    2434:	4798      	blx	r3
    2436:	687b      	ldr	r3, [r7, #4]
    2438:	4618      	mov	r0, r3
    243a:	4b05      	ldr	r3, [pc, #20]	; (2450 <_ZN12States_ClassD1Ev+0x34>)
    243c:	4798      	blx	r3
{
} //~States_Class
    243e:	687b      	ldr	r3, [r7, #4]
    2440:	4618      	mov	r0, r3
    2442:	3708      	adds	r7, #8
    2444:	46bd      	mov	sp, r7
    2446:	bd80      	pop	{r7, pc}
    2448:	0001cf2c 	.word	0x0001cf2c
    244c:	00001299 	.word	0x00001299
    2450:	000009e5 	.word	0x000009e5

00002454 <_ZN12States_Class4InitEv>:

bool States_Class::Init(void){
    2454:	b580      	push	{r7, lr}
    2456:	b082      	sub	sp, #8
    2458:	af00      	add	r7, sp, #0
    245a:	6078      	str	r0, [r7, #4]
	return fv1.Init();
    245c:	4803      	ldr	r0, [pc, #12]	; (246c <_ZN12States_Class4InitEv+0x18>)
    245e:	4b04      	ldr	r3, [pc, #16]	; (2470 <_ZN12States_Class4InitEv+0x1c>)
    2460:	4798      	blx	r3
    2462:	4603      	mov	r3, r0
	
}
    2464:	4618      	mov	r0, r3
    2466:	3708      	adds	r7, #8
    2468:	46bd      	mov	sp, r7
    246a:	bd80      	pop	{r7, pc}
    246c:	20001414 	.word	0x20001414
    2470:	00001209 	.word	0x00001209

00002474 <_ZN12States_Class6ResumeEh>:
void States_Class::Resume(uint8_t	operationMode){
    2474:	b580      	push	{r7, lr}
    2476:	b082      	sub	sp, #8
    2478:	af00      	add	r7, sp, #0
    247a:	6078      	str	r0, [r7, #4]
    247c:	460b      	mov	r3, r1
    247e:	70fb      	strb	r3, [r7, #3]
		if (operationMode==0)
    2480:	78fb      	ldrb	r3, [r7, #3]
    2482:	2b00      	cmp	r3, #0
    2484:	d10d      	bne.n	24a2 <_ZN12States_Class6ResumeEh+0x2e>
		{
			usb<<"Air Conditioning System Operating"<<NEWLINE;
    2486:	4908      	ldr	r1, [pc, #32]	; (24a8 <_ZN12States_Class6ResumeEh+0x34>)
    2488:	4808      	ldr	r0, [pc, #32]	; (24ac <_ZN12States_Class6ResumeEh+0x38>)
    248a:	4b09      	ldr	r3, [pc, #36]	; (24b0 <_ZN12States_Class6ResumeEh+0x3c>)
    248c:	4798      	blx	r3
    248e:	4603      	mov	r3, r0
    2490:	4908      	ldr	r1, [pc, #32]	; (24b4 <_ZN12States_Class6ResumeEh+0x40>)
    2492:	4618      	mov	r0, r3
    2494:	4b08      	ldr	r3, [pc, #32]	; (24b8 <_ZN12States_Class6ResumeEh+0x44>)
    2496:	4798      	blx	r3
			delay_ms(1000);
    2498:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    249c:	4b07      	ldr	r3, [pc, #28]	; (24bc <_ZN12States_Class6ResumeEh+0x48>)
    249e:	4798      	blx	r3
			return;
    24a0:	bf00      	nop
		}
		
}
    24a2:	3708      	adds	r7, #8
    24a4:	46bd      	mov	sp, r7
    24a6:	bd80      	pop	{r7, pc}
    24a8:	0001ce0c 	.word	0x0001ce0c
    24ac:	20005304 	.word	0x20005304
    24b0:	00003071 	.word	0x00003071
    24b4:	0001ce30 	.word	0x0001ce30
    24b8:	00000711 	.word	0x00000711
    24bc:	00004e1d 	.word	0x00004e1d

000024c0 <_ZN12States_Class5StartEh>:

void States_Class::Start(uint8_t	operationMode)
	{
    24c0:	b590      	push	{r4, r7, lr}
    24c2:	b08b      	sub	sp, #44	; 0x2c
    24c4:	af02      	add	r7, sp, #8
    24c6:	6078      	str	r0, [r7, #4]
    24c8:	460b      	mov	r3, r1
    24ca:	70fb      	strb	r3, [r7, #3]
	if (operationMode==0)
    24cc:	78fb      	ldrb	r3, [r7, #3]
    24ce:	2b00      	cmp	r3, #0
    24d0:	d10d      	bne.n	24ee <_ZN12States_Class5StartEh+0x2e>
	{
		usb<<"Air Conditioning System Started"<<NEWLINE;
    24d2:	495a      	ldr	r1, [pc, #360]	; (263c <_ZN12States_Class5StartEh+0x17c>)
    24d4:	485a      	ldr	r0, [pc, #360]	; (2640 <_ZN12States_Class5StartEh+0x180>)
    24d6:	4b5b      	ldr	r3, [pc, #364]	; (2644 <_ZN12States_Class5StartEh+0x184>)
    24d8:	4798      	blx	r3
    24da:	4603      	mov	r3, r0
    24dc:	495a      	ldr	r1, [pc, #360]	; (2648 <_ZN12States_Class5StartEh+0x188>)
    24de:	4618      	mov	r0, r3
    24e0:	4b5a      	ldr	r3, [pc, #360]	; (264c <_ZN12States_Class5StartEh+0x18c>)
    24e2:	4798      	blx	r3
		delay_ms(1000);
    24e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    24e8:	4b59      	ldr	r3, [pc, #356]	; (2650 <_ZN12States_Class5StartEh+0x190>)
    24ea:	4798      	blx	r3
    24ec:	e0a2      	b.n	2634 <_ZN12States_Class5StartEh+0x174>
		return;
	}
		
		
	event	e;
    24ee:	f107 0308 	add.w	r3, r7, #8
    24f2:	4618      	mov	r0, r3
    24f4:	4b57      	ldr	r3, [pc, #348]	; (2654 <_ZN12States_Class5StartEh+0x194>)
    24f6:	4798      	blx	r3
    tick_t	timerValue = 0L;
    24f8:	2300      	movs	r3, #0
    24fa:	61fb      	str	r3, [r7, #28]
    bool	isCurrentStateValid = false;
    24fc:	2300      	movs	r3, #0
    24fe:	76fb      	strb	r3, [r7, #27]
	memory.ReadFastApplicationState(lastState);
    2500:	687b      	ldr	r3, [r7, #4]
    2502:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2506:	4619      	mov	r1, r3
    2508:	4853      	ldr	r0, [pc, #332]	; (2658 <_ZN12States_Class5StartEh+0x198>)
    250a:	4b54      	ldr	r3, [pc, #336]	; (265c <_ZN12States_Class5StartEh+0x19c>)
    250c:	4798      	blx	r3
	state.currentState = kGAINStateReset;
    250e:	687b      	ldr	r3, [r7, #4]
    2510:	2200      	movs	r2, #0
    2512:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
	if (calendar.WasInterrupted())
    2516:	4852      	ldr	r0, [pc, #328]	; (2660 <_ZN12States_Class5StartEh+0x1a0>)
    2518:	4b52      	ldr	r3, [pc, #328]	; (2664 <_ZN12States_Class5StartEh+0x1a4>)
    251a:	4798      	blx	r3
    251c:	4603      	mov	r3, r0
    251e:	2b00      	cmp	r3, #0
    2520:	d019      	beq.n	2556 <_ZN12States_Class5StartEh+0x96>
	{
		powerInterruptDuration = calendar.GetPowerInterrupTime();
    2522:	484f      	ldr	r0, [pc, #316]	; (2660 <_ZN12States_Class5StartEh+0x1a0>)
    2524:	4b50      	ldr	r3, [pc, #320]	; (2668 <_ZN12States_Class5StartEh+0x1a8>)
    2526:	4798      	blx	r3
    2528:	4602      	mov	r2, r0
    252a:	687b      	ldr	r3, [r7, #4]
    252c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
		#ifdef OFFLINE
		resumeLastStateValid = ((powerInterruptDuration > 0) && (powerInterruptDuration < 5000L));
		#else
		resumeLastStateValid = ((powerInterruptDuration >= 0) && (powerInterruptDuration < 5000L));
    2530:	687b      	ldr	r3, [r7, #4]
    2532:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2536:	2b00      	cmp	r3, #0
    2538:	db08      	blt.n	254c <_ZN12States_Class5StartEh+0x8c>
    253a:	687b      	ldr	r3, [r7, #4]
    253c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2540:	f241 3287 	movw	r2, #4999	; 0x1387
    2544:	4293      	cmp	r3, r2
    2546:	dc01      	bgt.n	254c <_ZN12States_Class5StartEh+0x8c>
    2548:	2201      	movs	r2, #1
    254a:	e000      	b.n	254e <_ZN12States_Class5StartEh+0x8e>
    254c:	2200      	movs	r2, #0
    254e:	687b      	ldr	r3, [r7, #4]
    2550:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    2554:	e002      	b.n	255c <_ZN12States_Class5StartEh+0x9c>

		usb << "powerInterruptDuration was " << powerInterruptDuration << (resumeLastStateValid?" 200msec":" power resume") << newline;
		
		#endif
	}else{
		memory.LogResetEvent();
    2556:	4845      	ldr	r0, [pc, #276]	; (266c <_ZN12States_Class5StartEh+0x1ac>)
    2558:	4b45      	ldr	r3, [pc, #276]	; (2670 <_ZN12States_Class5StartEh+0x1b0>)
    255a:	4798      	blx	r3
	}

	

	//	Check persistent memory
	if (SetInitialState()<0){
    255c:	687b      	ldr	r3, [r7, #4]
    255e:	4618      	mov	r0, r3
    2560:	4b44      	ldr	r3, [pc, #272]	; (2674 <_ZN12States_Class5StartEh+0x1b4>)
    2562:	4798      	blx	r3
    2564:	2300      	movs	r3, #0
    2566:	2b00      	cmp	r3, #0
    2568:	d003      	beq.n	2572 <_ZN12States_Class5StartEh+0xb2>
		SetDefaultState();
    256a:	687b      	ldr	r3, [r7, #4]
    256c:	4618      	mov	r0, r3
    256e:	4b42      	ldr	r3, [pc, #264]	; (2678 <_ZN12States_Class5StartEh+0x1b8>)
    2570:	4798      	blx	r3
	}



	readResult=memory.ReadLastConfigurationData(configuration);
    2572:	687b      	ldr	r3, [r7, #4]
    2574:	f203 4324 	addw	r3, r3, #1060	; 0x424
    2578:	4619      	mov	r1, r3
    257a:	4840      	ldr	r0, [pc, #256]	; (267c <_ZN12States_Class5StartEh+0x1bc>)
    257c:	4b40      	ldr	r3, [pc, #256]	; (2680 <_ZN12States_Class5StartEh+0x1c0>)
    257e:	4798      	blx	r3
    2580:	4602      	mov	r2, r0
    2582:	687b      	ldr	r3, [r7, #4]
    2584:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4
	if (readResult>0)
    2588:	687b      	ldr	r3, [r7, #4]
    258a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
    258e:	2b00      	cmp	r3, #0
    2590:	d005      	beq.n	259e <_ZN12States_Class5StartEh+0xde>
		{
	#if __DEBUG__ > 3
		usb << "readConfigurationDataArea failed!" << newline;
	#endif
		SetFactoryDefaults(0, true, false);
    2592:	6878      	ldr	r0, [r7, #4]
    2594:	2300      	movs	r3, #0
    2596:	2201      	movs	r2, #1
    2598:	2100      	movs	r1, #0
    259a:	4c3a      	ldr	r4, [pc, #232]	; (2684 <_ZN12States_Class5StartEh+0x1c4>)
    259c:	47a0      	blx	r4
		usb << "configuration.m == " << configuration.m << newline;
		usb << "configuration.zA0 == " << configuration.zA0 << newline;
		}
#endif

	if (!memory.readPersistentConfigurationDataArea(persistentConfiguration))
    259e:	687b      	ldr	r3, [r7, #4]
    25a0:	f503 7347 	add.w	r3, r3, #796	; 0x31c
    25a4:	4619      	mov	r1, r3
    25a6:	4838      	ldr	r0, [pc, #224]	; (2688 <_ZN12States_Class5StartEh+0x1c8>)
    25a8:	4b38      	ldr	r3, [pc, #224]	; (268c <_ZN12States_Class5StartEh+0x1cc>)
    25aa:	4798      	blx	r3
    25ac:	4603      	mov	r3, r0
    25ae:	f083 0301 	eor.w	r3, r3, #1
    25b2:	b2db      	uxtb	r3, r3
    25b4:	2b00      	cmp	r3, #0
    25b6:	d002      	beq.n	25be <_ZN12States_Class5StartEh+0xfe>
		{
	#if __DEBUG__ > 2
		usb << "readPersistentConfigurationDataArea failed!" << memory.getUptime() << newline;
	#endif
		setPersistentConfigurationDefaults();
    25b8:	6878      	ldr	r0, [r7, #4]
    25ba:	4b35      	ldr	r3, [pc, #212]	; (2690 <_ZN12States_Class5StartEh+0x1d0>)
    25bc:	4798      	blx	r3
					<< ", duration == " << persistentConfiguration.cycle.duration << ", maximum time == " << persistentConfiguration.cycle.maximumDuration
					<< ", flags == " << persistentConfiguration.cycle.cycleFlags << newline;
#endif
	

	interfaces.CheckInternalCommunication();
    25be:	4835      	ldr	r0, [pc, #212]	; (2694 <_ZN12States_Class5StartEh+0x1d4>)
    25c0:	4b35      	ldr	r3, [pc, #212]	; (2698 <_ZN12States_Class5StartEh+0x1d8>)
    25c2:	4798      	blx	r3

	if (isCurrentStateValid)
    25c4:	7efb      	ldrb	r3, [r7, #27]
    25c6:	2b00      	cmp	r3, #0
    25c8:	d007      	beq.n	25da <_ZN12States_Class5StartEh+0x11a>
    {
		prepareStateChangeEvent(e, kGAINStateResume);
    25ca:	f107 0108 	add.w	r1, r7, #8
    25ce:	2300      	movs	r3, #0
    25d0:	2202      	movs	r2, #2
    25d2:	6878      	ldr	r0, [r7, #4]
    25d4:	4c31      	ldr	r4, [pc, #196]	; (269c <_ZN12States_Class5StartEh+0x1dc>)
    25d6:	47a0      	blx	r4
    25d8:	e006      	b.n	25e8 <_ZN12States_Class5StartEh+0x128>
    }else{
		prepareStateChangeEvent(e, kGAINStateInitialize);
    25da:	f107 0108 	add.w	r1, r7, #8
    25de:	2300      	movs	r3, #0
    25e0:	2201      	movs	r2, #1
    25e2:	6878      	ldr	r0, [r7, #4]
    25e4:	4c2d      	ldr	r4, [pc, #180]	; (269c <_ZN12States_Class5StartEh+0x1dc>)
    25e6:	47a0      	blx	r4
    }

	listener.SendEventSelf(e);
    25e8:	f107 0308 	add.w	r3, r7, #8
    25ec:	4619      	mov	r1, r3
    25ee:	482c      	ldr	r0, [pc, #176]	; (26a0 <_ZN12States_Class5StartEh+0x1e0>)
    25f0:	4b2c      	ldr	r3, [pc, #176]	; (26a4 <_ZN12States_Class5StartEh+0x1e4>)
    25f2:	4798      	blx	r3



    while (cBit.IsOK())
    25f4:	482c      	ldr	r0, [pc, #176]	; (26a8 <_ZN12States_Class5StartEh+0x1e8>)
    25f6:	4b2d      	ldr	r3, [pc, #180]	; (26ac <_ZN12States_Class5StartEh+0x1ec>)
    25f8:	4798      	blx	r3
    25fa:	4603      	mov	r3, r0
    25fc:	2b00      	cmp	r3, #0
    25fe:	d015      	beq.n	262c <_ZN12States_Class5StartEh+0x16c>
		{
		if (listener.WaitForEvent(e, kGAINEventClass, kGAINSwitchStateEvent))
    2600:	4b2b      	ldr	r3, [pc, #172]	; (26b0 <_ZN12States_Class5StartEh+0x1f0>)
    2602:	681b      	ldr	r3, [r3, #0]
    2604:	f107 0108 	add.w	r1, r7, #8
    2608:	9300      	str	r3, [sp, #0]
    260a:	f44f 7300 	mov.w	r3, #512	; 0x200
    260e:	f44f 7200 	mov.w	r2, #512	; 0x200
    2612:	4823      	ldr	r0, [pc, #140]	; (26a0 <_ZN12States_Class5StartEh+0x1e0>)
    2614:	4c27      	ldr	r4, [pc, #156]	; (26b4 <_ZN12States_Class5StartEh+0x1f4>)
    2616:	47a0      	blx	r4
    2618:	4603      	mov	r3, r0
    261a:	2b00      	cmp	r3, #0
    261c:	d0ea      	beq.n	25f4 <_ZN12States_Class5StartEh+0x134>
			{
			handleHVACEvent(e);
    261e:	f107 0308 	add.w	r3, r7, #8
    2622:	4619      	mov	r1, r3
    2624:	6878      	ldr	r0, [r7, #4]
    2626:	4b24      	ldr	r3, [pc, #144]	; (26b8 <_ZN12States_Class5StartEh+0x1f8>)
    2628:	4798      	blx	r3
    while (cBit.IsOK())
    262a:	e7e3      	b.n	25f4 <_ZN12States_Class5StartEh+0x134>
			}
        else{

        }
		}
		Stop(0);
    262c:	2100      	movs	r1, #0
    262e:	6878      	ldr	r0, [r7, #4]
    2630:	4b22      	ldr	r3, [pc, #136]	; (26bc <_ZN12States_Class5StartEh+0x1fc>)
    2632:	4798      	blx	r3
	}
    2634:	3724      	adds	r7, #36	; 0x24
    2636:	46bd      	mov	sp, r7
    2638:	bd90      	pop	{r4, r7, pc}
    263a:	bf00      	nop
    263c:	0001ce34 	.word	0x0001ce34
    2640:	20005304 	.word	0x20005304
    2644:	00003091 	.word	0x00003091
    2648:	0001ce30 	.word	0x0001ce30
    264c:	00000711 	.word	0x00000711
    2650:	00004e1d 	.word	0x00004e1d
    2654:	00002349 	.word	0x00002349
    2658:	20001af0 	.word	0x20001af0
    265c:	000010c1 	.word	0x000010c1
    2660:	20005120 	.word	0x20005120
    2664:	00014e99 	.word	0x00014e99
    2668:	00014dc1 	.word	0x00014dc1
    266c:	20001490 	.word	0x20001490
    2670:	00000e4d 	.word	0x00000e4d
    2674:	00000a59 	.word	0x00000a59
    2678:	00000c85 	.word	0x00000c85
    267c:	20001b00 	.word	0x20001b00
    2680:	00001c81 	.word	0x00001c81
    2684:	00000a05 	.word	0x00000a05
    2688:	2000197c 	.word	0x2000197c
    268c:	000020c1 	.word	0x000020c1
    2690:	000026c1 	.word	0x000026c1
    2694:	20001418 	.word	0x20001418
    2698:	00001365 	.word	0x00001365
    269c:	00002e89 	.word	0x00002e89
    26a0:	20004d9c 	.word	0x20004d9c
    26a4:	00012791 	.word	0x00012791
    26a8:	20001350 	.word	0x20001350
    26ac:	00000911 	.word	0x00000911
    26b0:	0001e478 	.word	0x0001e478
    26b4:	000125b9 	.word	0x000125b9
    26b8:	00002765 	.word	0x00002765
    26bc:	00002f79 	.word	0x00002f79

000026c0 <_ZN12States_Class34setPersistentConfigurationDefaultsEv>:


void States_Class::setPersistentConfigurationDefaults(void)
	{
    26c0:	b580      	push	{r7, lr}
    26c2:	b082      	sub	sp, #8
    26c4:	af00      	add	r7, sp, #0
    26c6:	6078      	str	r0, [r7, #4]
	setPersistentConfiguration(0);
    26c8:	2100      	movs	r1, #0
    26ca:	6878      	ldr	r0, [r7, #4]
    26cc:	4b02      	ldr	r3, [pc, #8]	; (26d8 <_ZN12States_Class34setPersistentConfigurationDefaultsEv+0x18>)
    26ce:	4798      	blx	r3
	}
    26d0:	bf00      	nop
    26d2:	3708      	adds	r7, #8
    26d4:	46bd      	mov	sp, r7
    26d6:	bd80      	pop	{r7, pc}
    26d8:	000026dd 	.word	0x000026dd

000026dc <_ZN12States_Class26setPersistentConfigurationEh>:

void States_Class::setPersistentConfiguration(uint8 cycleID)
	{
    26dc:	b580      	push	{r7, lr}
    26de:	b082      	sub	sp, #8
    26e0:	af00      	add	r7, sp, #0
    26e2:	6078      	str	r0, [r7, #4]
    26e4:	460b      	mov	r3, r1
    26e6:	70fb      	strb	r3, [r7, #3]
	persistentConfiguration.cycleDescriptionID = cycleID;
    26e8:	78fa      	ldrb	r2, [r7, #3]
    26ea:	687b      	ldr	r3, [r7, #4]
    26ec:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	readCycleDescription(persistentConfiguration.cycle, persistentConfiguration.cycleDescriptionID);
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	f503 714b 	add.w	r1, r3, #812	; 0x32c
    26f6:	687b      	ldr	r3, [r7, #4]
    26f8:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
    26fc:	b2db      	uxtb	r3, r3
    26fe:	461a      	mov	r2, r3
    2700:	6878      	ldr	r0, [r7, #4]
    2702:	4b09      	ldr	r3, [pc, #36]	; (2728 <_ZN12States_Class26setPersistentConfigurationEh+0x4c>)
    2704:	4798      	blx	r3
   writeResult=memory.writePersistentConfigurationDataArea(persistentConfiguration);
    2706:	687b      	ldr	r3, [r7, #4]
    2708:	f503 7347 	add.w	r3, r3, #796	; 0x31c
    270c:	4619      	mov	r1, r3
    270e:	4807      	ldr	r0, [pc, #28]	; (272c <_ZN12States_Class26setPersistentConfigurationEh+0x50>)
    2710:	4b07      	ldr	r3, [pc, #28]	; (2730 <_ZN12States_Class26setPersistentConfigurationEh+0x54>)
    2712:	4798      	blx	r3
    2714:	4603      	mov	r3, r0
    2716:	461a      	mov	r2, r3
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
	} 	
    271e:	bf00      	nop
    2720:	3708      	adds	r7, #8
    2722:	46bd      	mov	sp, r7
    2724:	bd80      	pop	{r7, pc}
    2726:	bf00      	nop
    2728:	00002735 	.word	0x00002735
    272c:	2000197c 	.word	0x2000197c
    2730:	00002155 	.word	0x00002155

00002734 <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh>:



bool States_Class::readCycleDescription(CycleDescription& cycle, uint8 id)
	{
    2734:	b580      	push	{r7, lr}
    2736:	b086      	sub	sp, #24
    2738:	af00      	add	r7, sp, #0
    273a:	60f8      	str	r0, [r7, #12]
    273c:	60b9      	str	r1, [r7, #8]
    273e:	4613      	mov	r3, r2
    2740:	71fb      	strb	r3, [r7, #7]
	bool	result(memory.readCycleDescription(cycle, id));
    2742:	79fb      	ldrb	r3, [r7, #7]
    2744:	461a      	mov	r2, r3
    2746:	68b9      	ldr	r1, [r7, #8]
    2748:	4804      	ldr	r0, [pc, #16]	; (275c <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh+0x28>)
    274a:	4b05      	ldr	r3, [pc, #20]	; (2760 <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh+0x2c>)
    274c:	4798      	blx	r3
    274e:	4603      	mov	r3, r0
    2750:	75fb      	strb	r3, [r7, #23]

	return result;
    2752:	7dfb      	ldrb	r3, [r7, #23]
	}
    2754:	4618      	mov	r0, r3
    2756:	3718      	adds	r7, #24
    2758:	46bd      	mov	sp, r7
    275a:	bd80      	pop	{r7, pc}
    275c:	2000197c 	.word	0x2000197c
    2760:	000020a3 	.word	0x000020a3

00002764 <_ZN12States_Class15handleHVACEventER5event>:


void States_Class::handleHVACEvent(event& e)
	{
    2764:	b580      	push	{r7, lr}
    2766:	b084      	sub	sp, #16
    2768:	af00      	add	r7, sp, #0
    276a:	6078      	str	r0, [r7, #4]
    276c:	6039      	str	r1, [r7, #0]
	if (state.currentState != kGAINStateResume)
    276e:	687b      	ldr	r3, [r7, #4]
    2770:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    2774:	2b02      	cmp	r3, #2
    2776:	d005      	beq.n	2784 <_ZN12States_Class15handleHVACEventER5event+0x20>
		state.callingState = state.currentState;
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	f8d3 2378 	ldr.w	r2, [r3, #888]	; 0x378
    277e:	687b      	ldr	r3, [r7, #4]
    2780:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
	state.currentState = e.data.wordData[0];
    2784:	683b      	ldr	r3, [r7, #0]
    2786:	891b      	ldrh	r3, [r3, #8]
    2788:	461a      	mov	r2, r3
    278a:	687b      	ldr	r3, [r7, #4]
    278c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
	state.stateFlags = e.data.wordData[1];
    2790:	683b      	ldr	r3, [r7, #0]
    2792:	895b      	ldrh	r3, [r3, #10]
    2794:	461a      	mov	r2, r3
    2796:	687b      	ldr	r3, [r7, #4]
    2798:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
	state.stateEntryTime = hvacTimer.Get_ticks();
    279c:	486a      	ldr	r0, [pc, #424]	; (2948 <_ZN12States_Class15handleHVACEventER5event+0x1e4>)
    279e:	4b6b      	ldr	r3, [pc, #428]	; (294c <_ZN12States_Class15handleHVACEventER5event+0x1e8>)
    27a0:	4798      	blx	r3
    27a2:	4603      	mov	r3, r0
    27a4:	461a      	mov	r2, r3
    27a6:	687b      	ldr	r3, [r7, #4]
    27a8:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388

#if __DEBUG__ > 0
	
	usb << "handleGAINEvent received: switching from ";
    27ac:	4968      	ldr	r1, [pc, #416]	; (2950 <_ZN12States_Class15handleHVACEventER5event+0x1ec>)
    27ae:	4869      	ldr	r0, [pc, #420]	; (2954 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    27b0:	4b69      	ldr	r3, [pc, #420]	; (2958 <_ZN12States_Class15handleHVACEventER5event+0x1f4>)
    27b2:	4798      	blx	r3
	usb.write(gainStateDescription[state.callingState]);
    27b4:	687b      	ldr	r3, [r7, #4]
    27b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
    27ba:	4a68      	ldr	r2, [pc, #416]	; (295c <_ZN12States_Class15handleHVACEventER5event+0x1f8>)
    27bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    27c0:	4619      	mov	r1, r3
    27c2:	4864      	ldr	r0, [pc, #400]	; (2954 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    27c4:	4b66      	ldr	r3, [pc, #408]	; (2960 <_ZN12States_Class15handleHVACEventER5event+0x1fc>)
    27c6:	4798      	blx	r3
	usb << " to ";
    27c8:	4966      	ldr	r1, [pc, #408]	; (2964 <_ZN12States_Class15handleHVACEventER5event+0x200>)
    27ca:	4862      	ldr	r0, [pc, #392]	; (2954 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    27cc:	4b66      	ldr	r3, [pc, #408]	; (2968 <_ZN12States_Class15handleHVACEventER5event+0x204>)
    27ce:	4798      	blx	r3
	usb.write(gainStateDescription[state.currentState]);
    27d0:	687b      	ldr	r3, [r7, #4]
    27d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    27d6:	4a61      	ldr	r2, [pc, #388]	; (295c <_ZN12States_Class15handleHVACEventER5event+0x1f8>)
    27d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    27dc:	4619      	mov	r1, r3
    27de:	485d      	ldr	r0, [pc, #372]	; (2954 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    27e0:	4b5f      	ldr	r3, [pc, #380]	; (2960 <_ZN12States_Class15handleHVACEventER5event+0x1fc>)
    27e2:	4798      	blx	r3
	usb << " (flags == " << state.stateFlags << ')' << NEWLINE;
    27e4:	4961      	ldr	r1, [pc, #388]	; (296c <_ZN12States_Class15handleHVACEventER5event+0x208>)
    27e6:	485b      	ldr	r0, [pc, #364]	; (2954 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    27e8:	4b61      	ldr	r3, [pc, #388]	; (2970 <_ZN12States_Class15handleHVACEventER5event+0x20c>)
    27ea:	4798      	blx	r3
    27ec:	4602      	mov	r2, r0
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	f503 7361 	add.w	r3, r3, #900	; 0x384
    27f4:	4619      	mov	r1, r3
    27f6:	4610      	mov	r0, r2
    27f8:	4b5e      	ldr	r3, [pc, #376]	; (2974 <_ZN12States_Class15handleHVACEventER5event+0x210>)
    27fa:	4798      	blx	r3
    27fc:	4602      	mov	r2, r0
    27fe:	2329      	movs	r3, #41	; 0x29
    2800:	73fb      	strb	r3, [r7, #15]
    2802:	f107 030f 	add.w	r3, r7, #15
    2806:	4619      	mov	r1, r3
    2808:	4610      	mov	r0, r2
    280a:	4b5b      	ldr	r3, [pc, #364]	; (2978 <_ZN12States_Class15handleHVACEventER5event+0x214>)
    280c:	4798      	blx	r3
    280e:	4603      	mov	r3, r0
    2810:	495a      	ldr	r1, [pc, #360]	; (297c <_ZN12States_Class15handleHVACEventER5event+0x218>)
    2812:	4618      	mov	r0, r3
    2814:	4b5a      	ldr	r3, [pc, #360]	; (2980 <_ZN12States_Class15handleHVACEventER5event+0x21c>)
    2816:	4798      	blx	r3
	
#endif

	saveCurrentState();
    2818:	6878      	ldr	r0, [r7, #4]
    281a:	4b5a      	ldr	r3, [pc, #360]	; (2984 <_ZN12States_Class15handleHVACEventER5event+0x220>)
    281c:	4798      	blx	r3

	switch (state.currentState)
    281e:	687b      	ldr	r3, [r7, #4]
    2820:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    2824:	3b01      	subs	r3, #1
    2826:	2b0f      	cmp	r3, #15
    2828:	f200 8084 	bhi.w	2934 <_ZN12States_Class15handleHVACEventER5event+0x1d0>
    282c:	a201      	add	r2, pc, #4	; (adr r2, 2834 <_ZN12States_Class15handleHVACEventER5event+0xd0>)
    282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2832:	bf00      	nop
    2834:	00002875 	.word	0x00002875
    2838:	00002885 	.word	0x00002885
    283c:	00002895 	.word	0x00002895
    2840:	000028a5 	.word	0x000028a5
    2844:	000028b5 	.word	0x000028b5
    2848:	000028c5 	.word	0x000028c5
    284c:	00002935 	.word	0x00002935
    2850:	00002935 	.word	0x00002935
    2854:	000028d5 	.word	0x000028d5
    2858:	000028f5 	.word	0x000028f5
    285c:	00002935 	.word	0x00002935
    2860:	000028e5 	.word	0x000028e5
    2864:	00002935 	.word	0x00002935
    2868:	00002905 	.word	0x00002905
    286c:	00002915 	.word	0x00002915
    2870:	00002925 	.word	0x00002925
		{
		case kGAINStateInitialize:
			handleStateInitialize(state.stateFlags);
    2874:	687b      	ldr	r3, [r7, #4]
    2876:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    287a:	4619      	mov	r1, r3
    287c:	6878      	ldr	r0, [r7, #4]
    287e:	4b42      	ldr	r3, [pc, #264]	; (2988 <_ZN12States_Class15handleHVACEventER5event+0x224>)
    2880:	4798      	blx	r3
			break;
    2882:	e05c      	b.n	293e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateResume:
			handleStateResume(state.stateFlags);
    2884:	687b      	ldr	r3, [r7, #4]
    2886:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    288a:	4619      	mov	r1, r3
    288c:	6878      	ldr	r0, [r7, #4]
    288e:	4b3f      	ldr	r3, [pc, #252]	; (298c <_ZN12States_Class15handleHVACEventER5event+0x228>)
    2890:	4798      	blx	r3
			break;
    2892:	e054      	b.n	293e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyOFF:
			handleStateStandbyOFF(state.stateFlags);
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    289a:	4619      	mov	r1, r3
    289c:	6878      	ldr	r0, [r7, #4]
    289e:	4b3c      	ldr	r3, [pc, #240]	; (2990 <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    28a0:	4798      	blx	r3
			break;
    28a2:	e04c      	b.n	293e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStatePrepareStandbyON:
			handleStatePrepareStandbyON(state.stateFlags);
    28a4:	687b      	ldr	r3, [r7, #4]
    28a6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    28aa:	4619      	mov	r1, r3
    28ac:	6878      	ldr	r0, [r7, #4]
    28ae:	4b39      	ldr	r3, [pc, #228]	; (2994 <_ZN12States_Class15handleHVACEventER5event+0x230>)
    28b0:	4798      	blx	r3
			break;
    28b2:	e044      	b.n	293e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyON:
			handleStateStandbyON(state.stateFlags);
    28b4:	687b      	ldr	r3, [r7, #4]
    28b6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    28ba:	4619      	mov	r1, r3
    28bc:	6878      	ldr	r0, [r7, #4]
    28be:	4b36      	ldr	r3, [pc, #216]	; (2998 <_ZN12States_Class15handleHVACEventER5event+0x234>)
    28c0:	4798      	blx	r3
			break;
    28c2:	e03c      	b.n	293e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyReady:
			handleStateStandbyReady(state.stateFlags);
    28c4:	687b      	ldr	r3, [r7, #4]
    28c6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    28ca:	4619      	mov	r1, r3
    28cc:	6878      	ldr	r0, [r7, #4]
    28ce:	4b33      	ldr	r3, [pc, #204]	; (299c <_ZN12States_Class15handleHVACEventER5event+0x238>)
    28d0:	4798      	blx	r3
			break;
    28d2:	e034      	b.n	293e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateON:
			handleStateON(state.stateFlags);
    28d4:	687b      	ldr	r3, [r7, #4]
    28d6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    28da:	4619      	mov	r1, r3
    28dc:	6878      	ldr	r0, [r7, #4]
    28de:	4b30      	ldr	r3, [pc, #192]	; (29a0 <_ZN12States_Class15handleHVACEventER5event+0x23c>)
    28e0:	4798      	blx	r3
			break;
    28e2:	e02c      	b.n	293e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateFinished:
			handleStateFinished(state.stateFlags);
    28e4:	687b      	ldr	r3, [r7, #4]
    28e6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    28ea:	4619      	mov	r1, r3
    28ec:	6878      	ldr	r0, [r7, #4]
    28ee:	4b2d      	ldr	r3, [pc, #180]	; (29a4 <_ZN12States_Class15handleHVACEventER5event+0x240>)
    28f0:	4798      	blx	r3
			break;
    28f2:	e024      	b.n	293e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStoppedProcess:
			handleStateStoppedProcess(state.stateFlags);
    28f4:	687b      	ldr	r3, [r7, #4]
    28f6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    28fa:	4619      	mov	r1, r3
    28fc:	6878      	ldr	r0, [r7, #4]
    28fe:	4b2a      	ldr	r3, [pc, #168]	; (29a8 <_ZN12States_Class15handleHVACEventER5event+0x244>)
    2900:	4798      	blx	r3
			break;
    2902:	e01c      	b.n	293e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateSelfProtect:
			handleStateSelfProtect(state.stateFlags);
    2904:	687b      	ldr	r3, [r7, #4]
    2906:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    290a:	4619      	mov	r1, r3
    290c:	6878      	ldr	r0, [r7, #4]
    290e:	4b27      	ldr	r3, [pc, #156]	; (29ac <_ZN12States_Class15handleHVACEventER5event+0x248>)
    2910:	4798      	blx	r3
			break;
    2912:	e014      	b.n	293e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateError:
			handleStateError(state.stateFlags);
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    291a:	4619      	mov	r1, r3
    291c:	6878      	ldr	r0, [r7, #4]
    291e:	4b24      	ldr	r3, [pc, #144]	; (29b0 <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    2920:	4798      	blx	r3
			break;
    2922:	e00c      	b.n	293e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateMaintenance:
			handleStateMaintenance(state.stateFlags);
    2924:	687b      	ldr	r3, [r7, #4]
    2926:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    292a:	4619      	mov	r1, r3
    292c:	6878      	ldr	r0, [r7, #4]
    292e:	4b21      	ldr	r3, [pc, #132]	; (29b4 <_ZN12States_Class15handleHVACEventER5event+0x250>)
    2930:	4798      	blx	r3
			break;
    2932:	e004      	b.n	293e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		default:
			handleStateError(kGAINErrorIllegalStateTransition);
    2934:	2102      	movs	r1, #2
    2936:	6878      	ldr	r0, [r7, #4]
    2938:	4b1d      	ldr	r3, [pc, #116]	; (29b0 <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    293a:	4798      	blx	r3
			break;
    293c:	bf00      	nop
		}
	}
    293e:	bf00      	nop
    2940:	3710      	adds	r7, #16
    2942:	46bd      	mov	sp, r7
    2944:	bd80      	pop	{r7, pc}
    2946:	bf00      	nop
    2948:	200052a0 	.word	0x200052a0
    294c:	00015259 	.word	0x00015259
    2950:	0001ce54 	.word	0x0001ce54
    2954:	20005304 	.word	0x20005304
    2958:	000030b1 	.word	0x000030b1
    295c:	20000004 	.word	0x20000004
    2960:	00002389 	.word	0x00002389
    2964:	0001ce80 	.word	0x0001ce80
    2968:	000030d1 	.word	0x000030d1
    296c:	0001ce88 	.word	0x0001ce88
    2970:	000017ad 	.word	0x000017ad
    2974:	00000ced 	.word	0x00000ced
    2978:	000030f1 	.word	0x000030f1
    297c:	0001ce30 	.word	0x0001ce30
    2980:	00000711 	.word	0x00000711
    2984:	00002ee9 	.word	0x00002ee9
    2988:	000029b9 	.word	0x000029b9
    298c:	00002a95 	.word	0x00002a95
    2990:	00002b55 	.word	0x00002b55
    2994:	00002bed 	.word	0x00002bed
    2998:	00002c7d 	.word	0x00002c7d
    299c:	00002ce5 	.word	0x00002ce5
    29a0:	00002d1d 	.word	0x00002d1d
    29a4:	00002d69 	.word	0x00002d69
    29a8:	00002da1 	.word	0x00002da1
    29ac:	00002de1 	.word	0x00002de1
    29b0:	00002e19 	.word	0x00002e19
    29b4:	00002e51 	.word	0x00002e51

000029b8 <_ZN12States_Class21handleStateInitializeEm>:


void States_Class::handleStateInitialize(uint32 flags)
	{
    29b8:	b590      	push	{r4, r7, lr}
    29ba:	b089      	sub	sp, #36	; 0x24
    29bc:	af00      	add	r7, sp, #0
    29be:	6078      	str	r0, [r7, #4]
    29c0:	6039      	str	r1, [r7, #0]
	event	e;
    29c2:	f107 030c 	add.w	r3, r7, #12
    29c6:	4618      	mov	r0, r3
    29c8:	4b22      	ldr	r3, [pc, #136]	; (2a54 <_ZN12States_Class21handleStateInitializeEm+0x9c>)
    29ca:	4798      	blx	r3
   	uint16	selfTestResult(kGAINNoError);
    29cc:	2300      	movs	r3, #0
    29ce:	83fb      	strh	r3, [r7, #30]
	
#if __DEBUG__ > 0
	
	usb << "handleStateInitialize: flags == 0x" << flags << NEWLINE;
    29d0:	4921      	ldr	r1, [pc, #132]	; (2a58 <_ZN12States_Class21handleStateInitializeEm+0xa0>)
    29d2:	4822      	ldr	r0, [pc, #136]	; (2a5c <_ZN12States_Class21handleStateInitializeEm+0xa4>)
    29d4:	4b22      	ldr	r3, [pc, #136]	; (2a60 <_ZN12States_Class21handleStateInitializeEm+0xa8>)
    29d6:	4798      	blx	r3
    29d8:	4602      	mov	r2, r0
    29da:	463b      	mov	r3, r7
    29dc:	4619      	mov	r1, r3
    29de:	4610      	mov	r0, r2
    29e0:	4b20      	ldr	r3, [pc, #128]	; (2a64 <_ZN12States_Class21handleStateInitializeEm+0xac>)
    29e2:	4798      	blx	r3
    29e4:	4603      	mov	r3, r0
    29e6:	4920      	ldr	r1, [pc, #128]	; (2a68 <_ZN12States_Class21handleStateInitializeEm+0xb0>)
    29e8:	4618      	mov	r0, r3
    29ea:	4b20      	ldr	r3, [pc, #128]	; (2a6c <_ZN12States_Class21handleStateInitializeEm+0xb4>)
    29ec:	4798      	blx	r3
		
#endif
	
	
	listener.CheckEvent();
    29ee:	4820      	ldr	r0, [pc, #128]	; (2a70 <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    29f0:	4b20      	ldr	r3, [pc, #128]	; (2a74 <_ZN12States_Class21handleStateInitializeEm+0xbc>)
    29f2:	4798      	blx	r3
	if (pBIT.isOK)
    29f4:	4b20      	ldr	r3, [pc, #128]	; (2a78 <_ZN12States_Class21handleStateInitializeEm+0xc0>)
    29f6:	781b      	ldrb	r3, [r3, #0]
    29f8:	b2db      	uxtb	r3, r3
    29fa:	2b00      	cmp	r3, #0
    29fc:	d021      	beq.n	2a42 <_ZN12States_Class21handleStateInitializeEm+0x8a>
	{
		#if __DEBUG__ > 0
		
		usb << "handleStateInitialize" << NEWLINE;
    29fe:	491f      	ldr	r1, [pc, #124]	; (2a7c <_ZN12States_Class21handleStateInitializeEm+0xc4>)
    2a00:	4816      	ldr	r0, [pc, #88]	; (2a5c <_ZN12States_Class21handleStateInitializeEm+0xa4>)
    2a02:	4b1f      	ldr	r3, [pc, #124]	; (2a80 <_ZN12States_Class21handleStateInitializeEm+0xc8>)
    2a04:	4798      	blx	r3
    2a06:	4603      	mov	r3, r0
    2a08:	4917      	ldr	r1, [pc, #92]	; (2a68 <_ZN12States_Class21handleStateInitializeEm+0xb0>)
    2a0a:	4618      	mov	r0, r3
    2a0c:	4b17      	ldr	r3, [pc, #92]	; (2a6c <_ZN12States_Class21handleStateInitializeEm+0xb4>)
    2a0e:	4798      	blx	r3

		#ifdef _OFFLINE
		prepareStateChangeEvent(e, kGAINStateInterrupted);
		listener.SendEventSelf(e);
		#else
		selfTestResult = handlePowerOnSelftest();
    2a10:	6878      	ldr	r0, [r7, #4]
    2a12:	4b1c      	ldr	r3, [pc, #112]	; (2a84 <_ZN12States_Class21handleStateInitializeEm+0xcc>)
    2a14:	4798      	blx	r3
    2a16:	4603      	mov	r3, r0
    2a18:	83fb      	strh	r3, [r7, #30]
		if (selfTestResult == kGAINNoError)
    2a1a:	8bfb      	ldrh	r3, [r7, #30]
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	d10c      	bne.n	2a3a <_ZN12States_Class21handleStateInitializeEm+0x82>
		{
			prepareStateChangeEvent(e, kGAINStateStandbyOFF);
    2a20:	f107 010c 	add.w	r1, r7, #12
    2a24:	2300      	movs	r3, #0
    2a26:	2203      	movs	r2, #3
    2a28:	6878      	ldr	r0, [r7, #4]
    2a2a:	4c17      	ldr	r4, [pc, #92]	; (2a88 <_ZN12States_Class21handleStateInitializeEm+0xd0>)
    2a2c:	47a0      	blx	r4
			listener.SendEventSelf(e);
    2a2e:	f107 030c 	add.w	r3, r7, #12
    2a32:	4619      	mov	r1, r3
    2a34:	480e      	ldr	r0, [pc, #56]	; (2a70 <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    2a36:	4b15      	ldr	r3, [pc, #84]	; (2a8c <_ZN12States_Class21handleStateInitializeEm+0xd4>)
    2a38:	4798      	blx	r3
		}
		#endif

		listener.CheckEvent();
    2a3a:	480d      	ldr	r0, [pc, #52]	; (2a70 <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    2a3c:	4b0d      	ldr	r3, [pc, #52]	; (2a74 <_ZN12States_Class21handleStateInitializeEm+0xbc>)
    2a3e:	4798      	blx	r3
	}



	
	}
    2a40:	e003      	b.n	2a4a <_ZN12States_Class21handleStateInitializeEm+0x92>
		Stop();
    2a42:	2100      	movs	r1, #0
    2a44:	6878      	ldr	r0, [r7, #4]
    2a46:	4b12      	ldr	r3, [pc, #72]	; (2a90 <_ZN12States_Class21handleStateInitializeEm+0xd8>)
    2a48:	4798      	blx	r3
	}
    2a4a:	bf00      	nop
    2a4c:	3724      	adds	r7, #36	; 0x24
    2a4e:	46bd      	mov	sp, r7
    2a50:	bd90      	pop	{r4, r7, pc}
    2a52:	bf00      	nop
    2a54:	00002349 	.word	0x00002349
    2a58:	0001ce94 	.word	0x0001ce94
    2a5c:	20005304 	.word	0x20005304
    2a60:	00003115 	.word	0x00003115
    2a64:	00000ced 	.word	0x00000ced
    2a68:	0001ce30 	.word	0x0001ce30
    2a6c:	00000711 	.word	0x00000711
    2a70:	20004d9c 	.word	0x20004d9c
    2a74:	00012879 	.word	0x00012879
    2a78:	20002f34 	.word	0x20002f34
    2a7c:	0001ceb8 	.word	0x0001ceb8
    2a80:	0000180d 	.word	0x0000180d
    2a84:	00002ec5 	.word	0x00002ec5
    2a88:	00002e89 	.word	0x00002e89
    2a8c:	00012791 	.word	0x00012791
    2a90:	00002f79 	.word	0x00002f79

00002a94 <_ZN12States_Class17handleStateResumeEm>:


void States_Class::handleStateResume(uint32 flags)
	{
    2a94:	b590      	push	{r4, r7, lr}
    2a96:	b089      	sub	sp, #36	; 0x24
    2a98:	af00      	add	r7, sp, #0
    2a9a:	6078      	str	r0, [r7, #4]
    2a9c:	6039      	str	r1, [r7, #0]
	event	e;
    2a9e:	f107 030c 	add.w	r3, r7, #12
    2aa2:	4618      	mov	r0, r3
    2aa4:	4b24      	ldr	r3, [pc, #144]	; (2b38 <_ZN12States_Class17handleStateResumeEm+0xa4>)
    2aa6:	4798      	blx	r3
	uint8	currentState(state.currentState);
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    2aae:	77fb      	strb	r3, [r7, #31]
    uint16	selfTestResult(kGAINNoError);
    2ab0:	2300      	movs	r3, #0
    2ab2:	83bb      	strh	r3, [r7, #28]
#endif

#if __DEBUG__ > 3
	usb << "state.currentState (before) " << state.currentState << newline;
#endif
	memory.restoreWorkingStateForGAIN(state);
    2ab4:	687b      	ldr	r3, [r7, #4]
    2ab6:	f503 7357 	add.w	r3, r3, #860	; 0x35c
    2aba:	4619      	mov	r1, r3
    2abc:	481f      	ldr	r0, [pc, #124]	; (2b3c <_ZN12States_Class17handleStateResumeEm+0xa8>)
    2abe:	4b20      	ldr	r3, [pc, #128]	; (2b40 <_ZN12States_Class17handleStateResumeEm+0xac>)
    2ac0:	4798      	blx	r3
	usb << "state.currentState (after) " << state.currentState << newline;
#endif


    //Switch into current state if no error occured
    if(selfTestResult == kGAINNoError)
    2ac2:	8bbb      	ldrh	r3, [r7, #28]
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d125      	bne.n	2b14 <_ZN12States_Class17handleStateResumeEm+0x80>
    {
        switch (state.currentState)
    2ac8:	687b      	ldr	r3, [r7, #4]
    2aca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    2ace:	2b09      	cmp	r3, #9
    2ad0:	d002      	beq.n	2ad8 <_ZN12States_Class17handleStateResumeEm+0x44>
    2ad2:	2b0a      	cmp	r3, #10
    2ad4:	d00b      	beq.n	2aee <_ZN12States_Class17handleStateResumeEm+0x5a>
    2ad6:	e012      	b.n	2afe <_ZN12States_Class17handleStateResumeEm+0x6a>
        {
        case kGAINStateON:
            prepareStateChangeEvent(e, state.currentState, true);
    2ad8:	687b      	ldr	r3, [r7, #4]
    2ada:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    2ade:	b29a      	uxth	r2, r3
    2ae0:	f107 010c 	add.w	r1, r7, #12
    2ae4:	2301      	movs	r3, #1
    2ae6:	6878      	ldr	r0, [r7, #4]
    2ae8:	4c16      	ldr	r4, [pc, #88]	; (2b44 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    2aea:	47a0      	blx	r4
            break;
    2aec:	e012      	b.n	2b14 <_ZN12States_Class17handleStateResumeEm+0x80>

        case kGAINStateStoppedProcess:
            prepareStateChangeEvent(e, kGAINStateStoppedProcess);
    2aee:	f107 010c 	add.w	r1, r7, #12
    2af2:	2300      	movs	r3, #0
    2af4:	220a      	movs	r2, #10
    2af6:	6878      	ldr	r0, [r7, #4]
    2af8:	4c12      	ldr	r4, [pc, #72]	; (2b44 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    2afa:	47a0      	blx	r4
            break;
    2afc:	e00a      	b.n	2b14 <_ZN12States_Class17handleStateResumeEm+0x80>

        default:
            prepareStateChangeEvent(e, state.currentState);
    2afe:	687b      	ldr	r3, [r7, #4]
    2b00:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    2b04:	b29a      	uxth	r2, r3
    2b06:	f107 010c 	add.w	r1, r7, #12
    2b0a:	2300      	movs	r3, #0
    2b0c:	6878      	ldr	r0, [r7, #4]
    2b0e:	4c0d      	ldr	r4, [pc, #52]	; (2b44 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    2b10:	47a0      	blx	r4
            break;
    2b12:	bf00      	nop
        }
    }

	state.currentState = currentState;
    2b14:	7ffa      	ldrb	r2, [r7, #31]
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

	listener.CheckEvent();
    2b1c:	480a      	ldr	r0, [pc, #40]	; (2b48 <_ZN12States_Class17handleStateResumeEm+0xb4>)
    2b1e:	4b0b      	ldr	r3, [pc, #44]	; (2b4c <_ZN12States_Class17handleStateResumeEm+0xb8>)
    2b20:	4798      	blx	r3
	listener.SendEventSelf(e);
    2b22:	f107 030c 	add.w	r3, r7, #12
    2b26:	4619      	mov	r1, r3
    2b28:	4807      	ldr	r0, [pc, #28]	; (2b48 <_ZN12States_Class17handleStateResumeEm+0xb4>)
    2b2a:	4b09      	ldr	r3, [pc, #36]	; (2b50 <_ZN12States_Class17handleStateResumeEm+0xbc>)
    2b2c:	4798      	blx	r3
	}
    2b2e:	bf00      	nop
    2b30:	3724      	adds	r7, #36	; 0x24
    2b32:	46bd      	mov	sp, r7
    2b34:	bd90      	pop	{r4, r7, pc}
    2b36:	bf00      	nop
    2b38:	00002349 	.word	0x00002349
    2b3c:	2000197c 	.word	0x2000197c
    2b40:	000021b1 	.word	0x000021b1
    2b44:	00002e89 	.word	0x00002e89
    2b48:	20004d9c 	.word	0x20004d9c
    2b4c:	00012879 	.word	0x00012879
    2b50:	00012791 	.word	0x00012791

00002b54 <_ZN12States_Class21handleStateStandbyOFFEm>:
				
void States_Class::handleStateStandbyOFF(uint32 flags)
	{
    2b54:	b580      	push	{r7, lr}
    2b56:	b088      	sub	sp, #32
    2b58:	af00      	add	r7, sp, #0
    2b5a:	6078      	str	r0, [r7, #4]
    2b5c:	6039      	str	r1, [r7, #0]
	event	e;
    2b5e:	f107 030c 	add.w	r3, r7, #12
    2b62:	4618      	mov	r0, r3
    2b64:	4b18      	ldr	r3, [pc, #96]	; (2bc8 <_ZN12States_Class21handleStateStandbyOFFEm+0x74>)
    2b66:	4798      	blx	r3
	bool	done(false);
    2b68:	2300      	movs	r3, #0
    2b6a:	77fb      	strb	r3, [r7, #31]
   	
#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    2b6c:	4917      	ldr	r1, [pc, #92]	; (2bcc <_ZN12States_Class21handleStateStandbyOFFEm+0x78>)
    2b6e:	4818      	ldr	r0, [pc, #96]	; (2bd0 <_ZN12States_Class21handleStateStandbyOFFEm+0x7c>)
    2b70:	4b18      	ldr	r3, [pc, #96]	; (2bd4 <_ZN12States_Class21handleStateStandbyOFFEm+0x80>)
    2b72:	4798      	blx	r3
    2b74:	4603      	mov	r3, r0
    2b76:	4918      	ldr	r1, [pc, #96]	; (2bd8 <_ZN12States_Class21handleStateStandbyOFFEm+0x84>)
    2b78:	4618      	mov	r0, r3
    2b7a:	4b18      	ldr	r3, [pc, #96]	; (2bdc <_ZN12States_Class21handleStateStandbyOFFEm+0x88>)
    2b7c:	4798      	blx	r3
		
#endif

	state.smpsTemperatureOutOfRangeEventSent = false;
    2b7e:	687a      	ldr	r2, [r7, #4]
    2b80:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
    2b84:	f36f 0341 	bfc	r3, #1, #1
    2b88:	f882 33b8 	strb.w	r3, [r2, #952]	; 0x3b8
	state.magnetronTemperatureOutOfRangeEventSent = false;
    2b8c:	687a      	ldr	r2, [r7, #4]
    2b8e:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
    2b92:	f36f 03c3 	bfc	r3, #3, #1
    2b96:	f882 33b8 	strb.w	r3, [r2, #952]	; 0x3b8
	state.exhaustTemperatureOutOfRangeEventSent = false;
    2b9a:	687a      	ldr	r2, [r7, #4]
    2b9c:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
    2ba0:	f36f 0382 	bfc	r3, #2, #1
    2ba4:	f882 33b8 	strb.w	r3, [r2, #952]	; 0x3b8

	state.magnetronFanFailureDetectionTime = forever;
    2ba8:	4b0d      	ldr	r3, [pc, #52]	; (2be0 <_ZN12States_Class21handleStateStandbyOFFEm+0x8c>)
    2baa:	681a      	ldr	r2, [r3, #0]
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0




	listener.SendEventSelf(e);
    2bb2:	f107 030c 	add.w	r3, r7, #12
    2bb6:	4619      	mov	r1, r3
    2bb8:	480a      	ldr	r0, [pc, #40]	; (2be4 <_ZN12States_Class21handleStateStandbyOFFEm+0x90>)
    2bba:	4b0b      	ldr	r3, [pc, #44]	; (2be8 <_ZN12States_Class21handleStateStandbyOFFEm+0x94>)
    2bbc:	4798      	blx	r3
	}
    2bbe:	bf00      	nop
    2bc0:	3720      	adds	r7, #32
    2bc2:	46bd      	mov	sp, r7
    2bc4:	bd80      	pop	{r7, pc}
    2bc6:	bf00      	nop
    2bc8:	00002349 	.word	0x00002349
    2bcc:	0001ced0 	.word	0x0001ced0
    2bd0:	20005304 	.word	0x20005304
    2bd4:	0000180d 	.word	0x0000180d
    2bd8:	0001ce30 	.word	0x0001ce30
    2bdc:	00000711 	.word	0x00000711
    2be0:	0001e478 	.word	0x0001e478
    2be4:	20004d9c 	.word	0x20004d9c
    2be8:	00012791 	.word	0x00012791

00002bec <_ZN12States_Class27handleStatePrepareStandbyONEm>:

void States_Class::handleStatePrepareStandbyON(uint32 flags)
	{
    2bec:	b580      	push	{r7, lr}
    2bee:	b08a      	sub	sp, #40	; 0x28
    2bf0:	af00      	add	r7, sp, #0
    2bf2:	6078      	str	r0, [r7, #4]
    2bf4:	6039      	str	r1, [r7, #0]
	event	e;
    2bf6:	f107 030c 	add.w	r3, r7, #12
    2bfa:	4618      	mov	r0, r3
    2bfc:	4b15      	ldr	r3, [pc, #84]	; (2c54 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x68>)
    2bfe:	4798      	blx	r3
	bool	done(false);
    2c00:	2300      	movs	r3, #0
    2c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32	connectFlags(state.alarmState?kConnectFlagsAlarmOn:0);
    2c06:	687b      	ldr	r3, [r7, #4]
    2c08:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
    2c0c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    2c10:	b2db      	uxtb	r3, r3
    2c12:	2b00      	cmp	r3, #0
    2c14:	d001      	beq.n	2c1a <_ZN12States_Class27handleStatePrepareStandbyONEm+0x2e>
    2c16:	2301      	movs	r3, #1
    2c18:	e000      	b.n	2c1c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x30>
    2c1a:	2300      	movs	r3, #0
    2c1c:	623b      	str	r3, [r7, #32]
	   	
#ifdef __DEBUG__
	
	usb << "handleStatePrepareStandbyON" << NEWLINE;
    2c1e:	490e      	ldr	r1, [pc, #56]	; (2c58 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x6c>)
    2c20:	480e      	ldr	r0, [pc, #56]	; (2c5c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x70>)
    2c22:	4b0f      	ldr	r3, [pc, #60]	; (2c60 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x74>)
    2c24:	4798      	blx	r3
    2c26:	4603      	mov	r3, r0
    2c28:	490e      	ldr	r1, [pc, #56]	; (2c64 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x78>)
    2c2a:	4618      	mov	r0, r3
    2c2c:	4b0e      	ldr	r3, [pc, #56]	; (2c68 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x7c>)
    2c2e:	4798      	blx	r3
		
#endif

	
	tick_t	leaveDisplayTime = hvacTimer.Get_ticks() + 4000;
    2c30:	480e      	ldr	r0, [pc, #56]	; (2c6c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x80>)
    2c32:	4b0f      	ldr	r3, [pc, #60]	; (2c70 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x84>)
    2c34:	4798      	blx	r3
    2c36:	4603      	mov	r3, r0
    2c38:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
    2c3c:	61fb      	str	r3, [r7, #28]

	

	listener.SendEventSelf(e);
    2c3e:	f107 030c 	add.w	r3, r7, #12
    2c42:	4619      	mov	r1, r3
    2c44:	480b      	ldr	r0, [pc, #44]	; (2c74 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x88>)
    2c46:	4b0c      	ldr	r3, [pc, #48]	; (2c78 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x8c>)
    2c48:	4798      	blx	r3
	}
    2c4a:	bf00      	nop
    2c4c:	3728      	adds	r7, #40	; 0x28
    2c4e:	46bd      	mov	sp, r7
    2c50:	bd80      	pop	{r7, pc}
    2c52:	bf00      	nop
    2c54:	00002349 	.word	0x00002349
    2c58:	0001cee8 	.word	0x0001cee8
    2c5c:	20005304 	.word	0x20005304
    2c60:	00003135 	.word	0x00003135
    2c64:	0001ce30 	.word	0x0001ce30
    2c68:	00000711 	.word	0x00000711
    2c6c:	200052a0 	.word	0x200052a0
    2c70:	00015259 	.word	0x00015259
    2c74:	20004d9c 	.word	0x20004d9c
    2c78:	00012791 	.word	0x00012791

00002c7c <_ZN12States_Class20handleStateStandbyONEm>:

void States_Class::handleStateStandbyON(uint32 flags)
	{
    2c7c:	b580      	push	{r7, lr}
    2c7e:	b088      	sub	sp, #32
    2c80:	af00      	add	r7, sp, #0
    2c82:	6078      	str	r0, [r7, #4]
    2c84:	6039      	str	r1, [r7, #0]
	event	e;
    2c86:	f107 030c 	add.w	r3, r7, #12
    2c8a:	4618      	mov	r0, r3
    2c8c:	4b12      	ldr	r3, [pc, #72]	; (2cd8 <_ZN12States_Class20handleStateStandbyONEm+0x5c>)
    2c8e:	4798      	blx	r3
	bool	done(false);
    2c90:	2300      	movs	r3, #0
    2c92:	77fb      	strb	r3, [r7, #31]
	
	usb << "handleStateStandbyON" << newline;
		
#endif

	state.latchClosedConfirmPending = false;
    2c94:	687a      	ldr	r2, [r7, #4]
    2c96:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
    2c9a:	f36f 1345 	bfc	r3, #5, #1
    2c9e:	f882 33b8 	strb.w	r3, [r2, #952]	; 0x3b8
    state.remainingTime = (tick_t)persistentConfiguration.cycle.duration * 1000L;
    2ca2:	687b      	ldr	r3, [r7, #4]
    2ca4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
    2ca8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2cac:	fb02 f203 	mul.w	r2, r2, r3
    2cb0:	687b      	ldr	r3, [r7, #4]
    2cb2:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

	
	state.reedRelayOpen = false;
    2cb6:	687a      	ldr	r2, [r7, #4]
    2cb8:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
    2cbc:	f36f 1304 	bfc	r3, #4, #1
    2cc0:	f882 33b8 	strb.w	r3, [r2, #952]	; 0x3b8
	
	listener.SendEventSelf(e);
    2cc4:	f107 030c 	add.w	r3, r7, #12
    2cc8:	4619      	mov	r1, r3
    2cca:	4804      	ldr	r0, [pc, #16]	; (2cdc <_ZN12States_Class20handleStateStandbyONEm+0x60>)
    2ccc:	4b04      	ldr	r3, [pc, #16]	; (2ce0 <_ZN12States_Class20handleStateStandbyONEm+0x64>)
    2cce:	4798      	blx	r3
	}
    2cd0:	bf00      	nop
    2cd2:	3720      	adds	r7, #32
    2cd4:	46bd      	mov	sp, r7
    2cd6:	bd80      	pop	{r7, pc}
    2cd8:	00002349 	.word	0x00002349
    2cdc:	20004d9c 	.word	0x20004d9c
    2ce0:	00012791 	.word	0x00012791

00002ce4 <_ZN12States_Class23handleStateStandbyReadyEm>:

void States_Class::handleStateStandbyReady(uint32 flags)
	{
    2ce4:	b580      	push	{r7, lr}
    2ce6:	b088      	sub	sp, #32
    2ce8:	af00      	add	r7, sp, #0
    2cea:	6078      	str	r0, [r7, #4]
    2cec:	6039      	str	r1, [r7, #0]
	event	e;
    2cee:	f107 030c 	add.w	r3, r7, #12
    2cf2:	4618      	mov	r0, r3
    2cf4:	4b06      	ldr	r3, [pc, #24]	; (2d10 <_ZN12States_Class23handleStateStandbyReadyEm+0x2c>)
    2cf6:	4798      	blx	r3
	bool	done(false);
    2cf8:	2300      	movs	r3, #0
    2cfa:	77fb      	strb	r3, [r7, #31]

	
	listener.SendEventSelf(e);
    2cfc:	f107 030c 	add.w	r3, r7, #12
    2d00:	4619      	mov	r1, r3
    2d02:	4804      	ldr	r0, [pc, #16]	; (2d14 <_ZN12States_Class23handleStateStandbyReadyEm+0x30>)
    2d04:	4b04      	ldr	r3, [pc, #16]	; (2d18 <_ZN12States_Class23handleStateStandbyReadyEm+0x34>)
    2d06:	4798      	blx	r3
	}
    2d08:	bf00      	nop
    2d0a:	3720      	adds	r7, #32
    2d0c:	46bd      	mov	sp, r7
    2d0e:	bd80      	pop	{r7, pc}
    2d10:	00002349 	.word	0x00002349
    2d14:	20004d9c 	.word	0x20004d9c
    2d18:	00012791 	.word	0x00012791

00002d1c <_ZN12States_Class13handleStateONEm>:

	listener.SendEventSelf(e);
	}

void States_Class::handleStateON(uint32 flags)
	{
    2d1c:	b580      	push	{r7, lr}
    2d1e:	b088      	sub	sp, #32
    2d20:	af00      	add	r7, sp, #0
    2d22:	6078      	str	r0, [r7, #4]
    2d24:	6039      	str	r1, [r7, #0]
	event	e;
    2d26:	f107 030c 	add.w	r3, r7, #12
    2d2a:	4618      	mov	r0, r3
    2d2c:	4b0b      	ldr	r3, [pc, #44]	; (2d5c <_ZN12States_Class13handleStateONEm+0x40>)
    2d2e:	4798      	blx	r3
	bool	done(false);
    2d30:	2300      	movs	r3, #0
    2d32:	77fb      	strb	r3, [r7, #31]
	bool	checkForEmptyCavity(true);
    2d34:	2301      	movs	r3, #1
    2d36:	77bb      	strb	r3, [r7, #30]
	bool	checkForSMPSTemperature(true);
    2d38:	2301      	movs	r3, #1
    2d3a:	777b      	strb	r3, [r7, #29]
	bool	resume(flags != 0);		
    2d3c:	683b      	ldr	r3, [r7, #0]
    2d3e:	2b00      	cmp	r3, #0
    2d40:	bf14      	ite	ne
    2d42:	2301      	movne	r3, #1
    2d44:	2300      	moveq	r3, #0
    2d46:	773b      	strb	r3, [r7, #28]
	usb << "handleStateON: resume == " << (resume?"true":"false") << newline;
		
#endif


	listener.SendEventSelf(e);
    2d48:	f107 030c 	add.w	r3, r7, #12
    2d4c:	4619      	mov	r1, r3
    2d4e:	4804      	ldr	r0, [pc, #16]	; (2d60 <_ZN12States_Class13handleStateONEm+0x44>)
    2d50:	4b04      	ldr	r3, [pc, #16]	; (2d64 <_ZN12States_Class13handleStateONEm+0x48>)
    2d52:	4798      	blx	r3
	}
    2d54:	bf00      	nop
    2d56:	3720      	adds	r7, #32
    2d58:	46bd      	mov	sp, r7
    2d5a:	bd80      	pop	{r7, pc}
    2d5c:	00002349 	.word	0x00002349
    2d60:	20004d9c 	.word	0x20004d9c
    2d64:	00012791 	.word	0x00012791

00002d68 <_ZN12States_Class19handleStateFinishedEm>:

void States_Class::handleStateFinished(uint32 flags)
	{
    2d68:	b580      	push	{r7, lr}
    2d6a:	b088      	sub	sp, #32
    2d6c:	af00      	add	r7, sp, #0
    2d6e:	6078      	str	r0, [r7, #4]
    2d70:	6039      	str	r1, [r7, #0]
	event	e;
    2d72:	f107 030c 	add.w	r3, r7, #12
    2d76:	4618      	mov	r0, r3
    2d78:	4b06      	ldr	r3, [pc, #24]	; (2d94 <_ZN12States_Class19handleStateFinishedEm+0x2c>)
    2d7a:	4798      	blx	r3
	bool	done(false);
    2d7c:	2300      	movs	r3, #0
    2d7e:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    2d80:	f107 030c 	add.w	r3, r7, #12
    2d84:	4619      	mov	r1, r3
    2d86:	4804      	ldr	r0, [pc, #16]	; (2d98 <_ZN12States_Class19handleStateFinishedEm+0x30>)
    2d88:	4b04      	ldr	r3, [pc, #16]	; (2d9c <_ZN12States_Class19handleStateFinishedEm+0x34>)
    2d8a:	4798      	blx	r3
	}
    2d8c:	bf00      	nop
    2d8e:	3720      	adds	r7, #32
    2d90:	46bd      	mov	sp, r7
    2d92:	bd80      	pop	{r7, pc}
    2d94:	00002349 	.word	0x00002349
    2d98:	20004d9c 	.word	0x20004d9c
    2d9c:	00012791 	.word	0x00012791

00002da0 <_ZN12States_Class25handleStateStoppedProcessEm>:

void States_Class::handleStateStoppedProcess(uint32 flags)
	{
    2da0:	b580      	push	{r7, lr}
    2da2:	b088      	sub	sp, #32
    2da4:	af00      	add	r7, sp, #0
    2da6:	6078      	str	r0, [r7, #4]
    2da8:	6039      	str	r1, [r7, #0]
	event	e;
    2daa:	f107 030c 	add.w	r3, r7, #12
    2dae:	4618      	mov	r0, r3
    2db0:	4b08      	ldr	r3, [pc, #32]	; (2dd4 <_ZN12States_Class25handleStateStoppedProcessEm+0x34>)
    2db2:	4798      	blx	r3
 	bool	done(false);
    2db4:	2300      	movs	r3, #0
    2db6:	77fb      	strb	r3, [r7, #31]
 	bool	abortCycle(true);
    2db8:	2301      	movs	r3, #1
    2dba:	77bb      	strb	r3, [r7, #30]
    uint16	resumeFlags(flags);
    2dbc:	683b      	ldr	r3, [r7, #0]
    2dbe:	83bb      	strh	r3, [r7, #28]
	listener.SendEventSelf(e);
    2dc0:	f107 030c 	add.w	r3, r7, #12
    2dc4:	4619      	mov	r1, r3
    2dc6:	4804      	ldr	r0, [pc, #16]	; (2dd8 <_ZN12States_Class25handleStateStoppedProcessEm+0x38>)
    2dc8:	4b04      	ldr	r3, [pc, #16]	; (2ddc <_ZN12States_Class25handleStateStoppedProcessEm+0x3c>)
    2dca:	4798      	blx	r3
	}
    2dcc:	bf00      	nop
    2dce:	3720      	adds	r7, #32
    2dd0:	46bd      	mov	sp, r7
    2dd2:	bd80      	pop	{r7, pc}
    2dd4:	00002349 	.word	0x00002349
    2dd8:	20004d9c 	.word	0x20004d9c
    2ddc:	00012791 	.word	0x00012791

00002de0 <_ZN12States_Class22handleStateSelfProtectEm>:

void States_Class::handleStateSelfProtect(uint32_t error)
	{
    2de0:	b580      	push	{r7, lr}
    2de2:	b088      	sub	sp, #32
    2de4:	af00      	add	r7, sp, #0
    2de6:	6078      	str	r0, [r7, #4]
    2de8:	6039      	str	r1, [r7, #0]
	event	e;
    2dea:	f107 030c 	add.w	r3, r7, #12
    2dee:	4618      	mov	r0, r3
    2df0:	4b06      	ldr	r3, [pc, #24]	; (2e0c <_ZN12States_Class22handleStateSelfProtectEm+0x2c>)
    2df2:	4798      	blx	r3
	bool	done(false);
    2df4:	2300      	movs	r3, #0
    2df6:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    2df8:	f107 030c 	add.w	r3, r7, #12
    2dfc:	4619      	mov	r1, r3
    2dfe:	4804      	ldr	r0, [pc, #16]	; (2e10 <_ZN12States_Class22handleStateSelfProtectEm+0x30>)
    2e00:	4b04      	ldr	r3, [pc, #16]	; (2e14 <_ZN12States_Class22handleStateSelfProtectEm+0x34>)
    2e02:	4798      	blx	r3
	}
    2e04:	bf00      	nop
    2e06:	3720      	adds	r7, #32
    2e08:	46bd      	mov	sp, r7
    2e0a:	bd80      	pop	{r7, pc}
    2e0c:	00002349 	.word	0x00002349
    2e10:	20004d9c 	.word	0x20004d9c
    2e14:	00012791 	.word	0x00012791

00002e18 <_ZN12States_Class16handleStateErrorEm>:

void States_Class::handleStateError(uint32_t error)
	{
    2e18:	b580      	push	{r7, lr}
    2e1a:	b088      	sub	sp, #32
    2e1c:	af00      	add	r7, sp, #0
    2e1e:	6078      	str	r0, [r7, #4]
    2e20:	6039      	str	r1, [r7, #0]
	event	e;
    2e22:	f107 030c 	add.w	r3, r7, #12
    2e26:	4618      	mov	r0, r3
    2e28:	4b06      	ldr	r3, [pc, #24]	; (2e44 <_ZN12States_Class16handleStateErrorEm+0x2c>)
    2e2a:	4798      	blx	r3
	bool	done(false);
    2e2c:	2300      	movs	r3, #0
    2e2e:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    2e30:	f107 030c 	add.w	r3, r7, #12
    2e34:	4619      	mov	r1, r3
    2e36:	4804      	ldr	r0, [pc, #16]	; (2e48 <_ZN12States_Class16handleStateErrorEm+0x30>)
    2e38:	4b04      	ldr	r3, [pc, #16]	; (2e4c <_ZN12States_Class16handleStateErrorEm+0x34>)
    2e3a:	4798      	blx	r3
	}
    2e3c:	bf00      	nop
    2e3e:	3720      	adds	r7, #32
    2e40:	46bd      	mov	sp, r7
    2e42:	bd80      	pop	{r7, pc}
    2e44:	00002349 	.word	0x00002349
    2e48:	20004d9c 	.word	0x20004d9c
    2e4c:	00012791 	.word	0x00012791

00002e50 <_ZN12States_Class22handleStateMaintenanceEm>:

void States_Class::handleStateMaintenance(uint32 flags)
	{
    2e50:	b580      	push	{r7, lr}
    2e52:	b088      	sub	sp, #32
    2e54:	af00      	add	r7, sp, #0
    2e56:	6078      	str	r0, [r7, #4]
    2e58:	6039      	str	r1, [r7, #0]
	event	e;
    2e5a:	f107 030c 	add.w	r3, r7, #12
    2e5e:	4618      	mov	r0, r3
    2e60:	4b06      	ldr	r3, [pc, #24]	; (2e7c <_ZN12States_Class22handleStateMaintenanceEm+0x2c>)
    2e62:	4798      	blx	r3
	bool	done(false);
    2e64:	2300      	movs	r3, #0
    2e66:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    2e68:	f107 030c 	add.w	r3, r7, #12
    2e6c:	4619      	mov	r1, r3
    2e6e:	4804      	ldr	r0, [pc, #16]	; (2e80 <_ZN12States_Class22handleStateMaintenanceEm+0x30>)
    2e70:	4b04      	ldr	r3, [pc, #16]	; (2e84 <_ZN12States_Class22handleStateMaintenanceEm+0x34>)
    2e72:	4798      	blx	r3
	}
    2e74:	bf00      	nop
    2e76:	3720      	adds	r7, #32
    2e78:	46bd      	mov	sp, r7
    2e7a:	bd80      	pop	{r7, pc}
    2e7c:	00002349 	.word	0x00002349
    2e80:	20004d9c 	.word	0x20004d9c
    2e84:	00012791 	.word	0x00012791

00002e88 <_ZN12States_Class23prepareStateChangeEventER5eventtt>:
	done = false;
	return result;
	}

void States_Class::prepareStateChangeEvent(event& e, uint16 newState, uint16 data)
	{
    2e88:	b480      	push	{r7}
    2e8a:	b085      	sub	sp, #20
    2e8c:	af00      	add	r7, sp, #0
    2e8e:	60f8      	str	r0, [r7, #12]
    2e90:	60b9      	str	r1, [r7, #8]
    2e92:	4611      	mov	r1, r2
    2e94:	461a      	mov	r2, r3
    2e96:	460b      	mov	r3, r1
    2e98:	80fb      	strh	r3, [r7, #6]
    2e9a:	4613      	mov	r3, r2
    2e9c:	80bb      	strh	r3, [r7, #4]
	e.eventClass =(EventClass)kGAINEventClass;
    2e9e:	68bb      	ldr	r3, [r7, #8]
    2ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
    2ea4:	801a      	strh	r2, [r3, #0]
	e.eventType = (EventType)kGAINSwitchStateEvent;
    2ea6:	68bb      	ldr	r3, [r7, #8]
    2ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
    2eac:	805a      	strh	r2, [r3, #2]
	e.data.wordData[0] = newState;
    2eae:	68bb      	ldr	r3, [r7, #8]
    2eb0:	88fa      	ldrh	r2, [r7, #6]
    2eb2:	811a      	strh	r2, [r3, #8]
	e.data.wordData[1] = data;
    2eb4:	68bb      	ldr	r3, [r7, #8]
    2eb6:	88ba      	ldrh	r2, [r7, #4]
    2eb8:	815a      	strh	r2, [r3, #10]
	}
    2eba:	bf00      	nop
    2ebc:	3714      	adds	r7, #20
    2ebe:	46bd      	mov	sp, r7
    2ec0:	bc80      	pop	{r7}
    2ec2:	4770      	bx	lr

00002ec4 <_ZN12States_Class21handlePowerOnSelftestEv>:

uint32_t States_Class::handlePowerOnSelftest(void)
	{
    2ec4:	b580      	push	{r7, lr}
    2ec6:	b088      	sub	sp, #32
    2ec8:	af00      	add	r7, sp, #0
    2eca:	6078      	str	r0, [r7, #4]
	event	e;
    2ecc:	f107 030c 	add.w	r3, r7, #12
    2ed0:	4618      	mov	r0, r3
    2ed2:	4b04      	ldr	r3, [pc, #16]	; (2ee4 <_ZN12States_Class21handlePowerOnSelftestEv+0x20>)
    2ed4:	4798      	blx	r3
	uint16	selfTestResult(kGAINNoError);
    2ed6:	2300      	movs	r3, #0
    2ed8:	83fb      	strh	r3, [r7, #30]
	bool	moduleAvailable;
	int16	temperature;
		
	return selfTestResult;
    2eda:	8bfb      	ldrh	r3, [r7, #30]
	}
    2edc:	4618      	mov	r0, r3
    2ede:	3720      	adds	r7, #32
    2ee0:	46bd      	mov	sp, r7
    2ee2:	bd80      	pop	{r7, pc}
    2ee4:	00002349 	.word	0x00002349

00002ee8 <_ZN12States_Class16saveCurrentStateEv>:


void States_Class::saveCurrentState(void){
    2ee8:	b580      	push	{r7, lr}
    2eea:	b084      	sub	sp, #16
    2eec:	af00      	add	r7, sp, #0
    2eee:	6078      	str	r0, [r7, #4]
		calendar_date_time	cdt;
		calendar.GetDateTime(&cdt);
    2ef0:	f107 0308 	add.w	r3, r7, #8
    2ef4:	4619      	mov	r1, r3
    2ef6:	4819      	ldr	r0, [pc, #100]	; (2f5c <_ZN12States_Class16saveCurrentStateEv+0x74>)
    2ef8:	4b19      	ldr	r3, [pc, #100]	; (2f60 <_ZN12States_Class16saveCurrentStateEv+0x78>)
    2efa:	4798      	blx	r3
		state.dateTime=cdt;
    2efc:	687b      	ldr	r3, [r7, #4]
    2efe:	f503 7359 	add.w	r3, r3, #868	; 0x364
    2f02:	f107 0208 	add.w	r2, r7, #8
    2f06:	e892 0003 	ldmia.w	r2, {r0, r1}
    2f0a:	e883 0003 	stmia.w	r3, {r0, r1}
		state.now = calendar.convert_datetime_to_timestamp(&cdt);
    2f0e:	f107 0308 	add.w	r3, r7, #8
    2f12:	4619      	mov	r1, r3
    2f14:	4811      	ldr	r0, [pc, #68]	; (2f5c <_ZN12States_Class16saveCurrentStateEv+0x74>)
    2f16:	4b13      	ldr	r3, [pc, #76]	; (2f64 <_ZN12States_Class16saveCurrentStateEv+0x7c>)
    2f18:	4798      	blx	r3
    2f1a:	4603      	mov	r3, r0
    2f1c:	461a      	mov	r2, r3
    2f1e:	687b      	ldr	r3, [r7, #4]
    2f20:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
	if (state.currentState!=kGAINStateMaintenance){
    2f24:	687b      	ldr	r3, [r7, #4]
    2f26:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    2f2a:	2b10      	cmp	r3, #16
    2f2c:	d012      	beq.n	2f54 <_ZN12States_Class16saveCurrentStateEv+0x6c>
		memory.WriteFastCurrentState(state);
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	f503 7357 	add.w	r3, r3, #860	; 0x35c
    2f34:	4619      	mov	r1, r3
    2f36:	480c      	ldr	r0, [pc, #48]	; (2f68 <_ZN12States_Class16saveCurrentStateEv+0x80>)
    2f38:	4b0c      	ldr	r3, [pc, #48]	; (2f6c <_ZN12States_Class16saveCurrentStateEv+0x84>)
    2f3a:	4798      	blx	r3
		//memory.ReadFastApplicationState(lastState);
		if (state.currentState==0)
    2f3c:	687b      	ldr	r3, [r7, #4]
    2f3e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    2f42:	2b00      	cmp	r3, #0
    2f44:	d106      	bne.n	2f54 <_ZN12States_Class16saveCurrentStateEv+0x6c>
		{
			memory.SaveApplicationState(state);
    2f46:	687b      	ldr	r3, [r7, #4]
    2f48:	f503 7357 	add.w	r3, r3, #860	; 0x35c
    2f4c:	4619      	mov	r1, r3
    2f4e:	4808      	ldr	r0, [pc, #32]	; (2f70 <_ZN12States_Class16saveCurrentStateEv+0x88>)
    2f50:	4b08      	ldr	r3, [pc, #32]	; (2f74 <_ZN12States_Class16saveCurrentStateEv+0x8c>)
    2f52:	4798      	blx	r3
// 		 if (state.currentState > kGAINStateResume){
// 			 
// 			memory.clearWorkingStateForGAIN();
// 		 }
	}
}
    2f54:	bf00      	nop
    2f56:	3710      	adds	r7, #16
    2f58:	46bd      	mov	sp, r7
    2f5a:	bd80      	pop	{r7, pc}
    2f5c:	20005120 	.word	0x20005120
    2f60:	00014a31 	.word	0x00014a31
    2f64:	00014b21 	.word	0x00014b21
    2f68:	20001af0 	.word	0x20001af0
    2f6c:	00001109 	.word	0x00001109
    2f70:	20001490 	.word	0x20001490
    2f74:	00001b21 	.word	0x00001b21

00002f78 <_ZN12States_Class4StopEh>:


uint8_t	States_Class::Stop(uint8_t	layer){
    2f78:	b580      	push	{r7, lr}
    2f7a:	b082      	sub	sp, #8
    2f7c:	af00      	add	r7, sp, #0
    2f7e:	6078      	str	r0, [r7, #4]
    2f80:	460b      	mov	r3, r1
    2f82:	70fb      	strb	r3, [r7, #3]
		if (layer==0)
    2f84:	78fb      	ldrb	r3, [r7, #3]
    2f86:	2b00      	cmp	r3, #0
    2f88:	d10d      	bne.n	2fa6 <_ZN12States_Class4StopEh+0x2e>
		{
			usb<<"Air Conditioning System Stopped"<<NEWLINE;
    2f8a:	4909      	ldr	r1, [pc, #36]	; (2fb0 <_ZN12States_Class4StopEh+0x38>)
    2f8c:	4809      	ldr	r0, [pc, #36]	; (2fb4 <_ZN12States_Class4StopEh+0x3c>)
    2f8e:	4b0a      	ldr	r3, [pc, #40]	; (2fb8 <_ZN12States_Class4StopEh+0x40>)
    2f90:	4798      	blx	r3
    2f92:	4603      	mov	r3, r0
    2f94:	4909      	ldr	r1, [pc, #36]	; (2fbc <_ZN12States_Class4StopEh+0x44>)
    2f96:	4618      	mov	r0, r3
    2f98:	4b09      	ldr	r3, [pc, #36]	; (2fc0 <_ZN12States_Class4StopEh+0x48>)
    2f9a:	4798      	blx	r3
			delay_ms(100);
    2f9c:	2064      	movs	r0, #100	; 0x64
    2f9e:	4b09      	ldr	r3, [pc, #36]	; (2fc4 <_ZN12States_Class4StopEh+0x4c>)
    2fa0:	4798      	blx	r3
			return layer;
    2fa2:	78fb      	ldrb	r3, [r7, #3]
    2fa4:	e000      	b.n	2fa8 <_ZN12States_Class4StopEh+0x30>
		}
	return	layer;
    2fa6:	78fb      	ldrb	r3, [r7, #3]
}
    2fa8:	4618      	mov	r0, r3
    2faa:	3708      	adds	r7, #8
    2fac:	46bd      	mov	sp, r7
    2fae:	bd80      	pop	{r7, pc}
    2fb0:	0001cf04 	.word	0x0001cf04
    2fb4:	20005304 	.word	0x20005304
    2fb8:	00003091 	.word	0x00003091
    2fbc:	0001ce30 	.word	0x0001ce30
    2fc0:	00000711 	.word	0x00000711
    2fc4:	00004e1d 	.word	0x00004e1d

00002fc8 <_ZN12States_Class15GetCurrentStateER9HVACState>:

void	States_Class::GetCurrentConfiguration(ConfigurationData *cd){
	cd=&configuration;
}
void	States_Class::GetCurrentState(HVACState& hs){
    2fc8:	b580      	push	{r7, lr}
    2fca:	b082      	sub	sp, #8
    2fcc:	af00      	add	r7, sp, #0
    2fce:	6078      	str	r0, [r7, #4]
    2fd0:	6039      	str	r1, [r7, #0]
	hs=state;
    2fd2:	683a      	ldr	r2, [r7, #0]
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	4610      	mov	r0, r2
    2fd8:	f503 7357 	add.w	r3, r3, #860	; 0x35c
    2fdc:	2260      	movs	r2, #96	; 0x60
    2fde:	4619      	mov	r1, r3
    2fe0:	4b02      	ldr	r3, [pc, #8]	; (2fec <_ZN12States_Class15GetCurrentStateER9HVACState+0x24>)
    2fe2:	4798      	blx	r3
}
    2fe4:	bf00      	nop
    2fe6:	3708      	adds	r7, #8
    2fe8:	46bd      	mov	sp, r7
    2fea:	bd80      	pop	{r7, pc}
    2fec:	00018b59 	.word	0x00018b59

00002ff0 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData>:
void	States_Class::SetConfigurationData(ConfigurationData& cd){
    2ff0:	b580      	push	{r7, lr}
    2ff2:	b082      	sub	sp, #8
    2ff4:	af00      	add	r7, sp, #0
    2ff6:	6078      	str	r0, [r7, #4]
    2ff8:	6039      	str	r1, [r7, #0]
	configuration=cd;
    2ffa:	687b      	ldr	r3, [r7, #4]
    2ffc:	683a      	ldr	r2, [r7, #0]
    2ffe:	f203 4324 	addw	r3, r3, #1060	; 0x424
    3002:	4611      	mov	r1, r2
    3004:	22ac      	movs	r2, #172	; 0xac
    3006:	4618      	mov	r0, r3
    3008:	4b02      	ldr	r3, [pc, #8]	; (3014 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData+0x24>)
    300a:	4798      	blx	r3
}
    300c:	bf00      	nop
    300e:	3708      	adds	r7, #8
    3010:	46bd      	mov	sp, r7
    3012:	bd80      	pop	{r7, pc}
    3014:	00018b59 	.word	0x00018b59

00003018 <_ZN12States_Class15SetCurrentStateER9HVACState>:
void	States_Class::SetCurrentState(HVACState& hs){
    3018:	b580      	push	{r7, lr}
    301a:	b082      	sub	sp, #8
    301c:	af00      	add	r7, sp, #0
    301e:	6078      	str	r0, [r7, #4]
    3020:	6039      	str	r1, [r7, #0]
	state=hs;
    3022:	687b      	ldr	r3, [r7, #4]
    3024:	683a      	ldr	r2, [r7, #0]
    3026:	f503 7357 	add.w	r3, r3, #860	; 0x35c
    302a:	4611      	mov	r1, r2
    302c:	2260      	movs	r2, #96	; 0x60
    302e:	4618      	mov	r0, r3
    3030:	4b02      	ldr	r3, [pc, #8]	; (303c <_ZN12States_Class15SetCurrentStateER9HVACState+0x24>)
    3032:	4798      	blx	r3
}
    3034:	bf00      	nop
    3036:	3708      	adds	r7, #8
    3038:	46bd      	mov	sp, r7
    303a:	bd80      	pop	{r7, pc}
    303c:	00018b59 	.word	0x00018b59

00003040 <_ZN12States_Class16SetCRCConfigDataEv>:
void	States_Class::SetCRCConfigData(void){
    3040:	b580      	push	{r7, lr}
    3042:	b082      	sub	sp, #8
    3044:	af00      	add	r7, sp, #0
    3046:	6078      	str	r0, [r7, #4]
	CRC32=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&factoryDefaultsConfiguration),sizeof(factoryDefaultsConfiguration));
    3048:	22ac      	movs	r2, #172	; 0xac
    304a:	4906      	ldr	r1, [pc, #24]	; (3064 <_ZN12States_Class16SetCRCConfigDataEv+0x24>)
    304c:	4806      	ldr	r0, [pc, #24]	; (3068 <_ZN12States_Class16SetCRCConfigDataEv+0x28>)
    304e:	4b07      	ldr	r3, [pc, #28]	; (306c <_ZN12States_Class16SetCRCConfigDataEv+0x2c>)
    3050:	4798      	blx	r3
    3052:	4602      	mov	r2, r0
    3054:	687b      	ldr	r3, [r7, #4]
    3056:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
}
    305a:	bf00      	nop
    305c:	3708      	adds	r7, #8
    305e:	46bd      	mov	sp, r7
    3060:	bd80      	pop	{r7, pc}
    3062:	bf00      	nop
    3064:	0001c8a4 	.word	0x0001c8a4
    3068:	2000197c 	.word	0x2000197c
    306c:	00000d99 	.word	0x00000d99

00003070 <_ZlsIA34_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3070:	b580      	push	{r7, lr}
    3072:	b082      	sub	sp, #8
    3074:	af00      	add	r7, sp, #0
    3076:	6078      	str	r0, [r7, #4]
    3078:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    307a:	6839      	ldr	r1, [r7, #0]
    307c:	6878      	ldr	r0, [r7, #4]
    307e:	4b03      	ldr	r3, [pc, #12]	; (308c <_ZlsIA34_cER5PrintS2_RKT_+0x1c>)
    3080:	4798      	blx	r3
    3082:	687b      	ldr	r3, [r7, #4]
    3084:	4618      	mov	r0, r3
    3086:	3708      	adds	r7, #8
    3088:	46bd      	mov	sp, r7
    308a:	bd80      	pop	{r7, pc}
    308c:	000159c9 	.word	0x000159c9

00003090 <_ZlsIA32_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3090:	b580      	push	{r7, lr}
    3092:	b082      	sub	sp, #8
    3094:	af00      	add	r7, sp, #0
    3096:	6078      	str	r0, [r7, #4]
    3098:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    309a:	6839      	ldr	r1, [r7, #0]
    309c:	6878      	ldr	r0, [r7, #4]
    309e:	4b03      	ldr	r3, [pc, #12]	; (30ac <_ZlsIA32_cER5PrintS2_RKT_+0x1c>)
    30a0:	4798      	blx	r3
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	4618      	mov	r0, r3
    30a6:	3708      	adds	r7, #8
    30a8:	46bd      	mov	sp, r7
    30aa:	bd80      	pop	{r7, pc}
    30ac:	000159c9 	.word	0x000159c9

000030b0 <_ZlsIA42_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    30b0:	b580      	push	{r7, lr}
    30b2:	b082      	sub	sp, #8
    30b4:	af00      	add	r7, sp, #0
    30b6:	6078      	str	r0, [r7, #4]
    30b8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    30ba:	6839      	ldr	r1, [r7, #0]
    30bc:	6878      	ldr	r0, [r7, #4]
    30be:	4b03      	ldr	r3, [pc, #12]	; (30cc <_ZlsIA42_cER5PrintS2_RKT_+0x1c>)
    30c0:	4798      	blx	r3
    30c2:	687b      	ldr	r3, [r7, #4]
    30c4:	4618      	mov	r0, r3
    30c6:	3708      	adds	r7, #8
    30c8:	46bd      	mov	sp, r7
    30ca:	bd80      	pop	{r7, pc}
    30cc:	000159c9 	.word	0x000159c9

000030d0 <_ZlsIA5_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    30d0:	b580      	push	{r7, lr}
    30d2:	b082      	sub	sp, #8
    30d4:	af00      	add	r7, sp, #0
    30d6:	6078      	str	r0, [r7, #4]
    30d8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    30da:	6839      	ldr	r1, [r7, #0]
    30dc:	6878      	ldr	r0, [r7, #4]
    30de:	4b03      	ldr	r3, [pc, #12]	; (30ec <_ZlsIA5_cER5PrintS2_RKT_+0x1c>)
    30e0:	4798      	blx	r3
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	4618      	mov	r0, r3
    30e6:	3708      	adds	r7, #8
    30e8:	46bd      	mov	sp, r7
    30ea:	bd80      	pop	{r7, pc}
    30ec:	000159c9 	.word	0x000159c9

000030f0 <_ZlsIcER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    30f0:	b580      	push	{r7, lr}
    30f2:	b082      	sub	sp, #8
    30f4:	af00      	add	r7, sp, #0
    30f6:	6078      	str	r0, [r7, #4]
    30f8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    30fa:	683b      	ldr	r3, [r7, #0]
    30fc:	781b      	ldrb	r3, [r3, #0]
    30fe:	4619      	mov	r1, r3
    3100:	6878      	ldr	r0, [r7, #4]
    3102:	4b03      	ldr	r3, [pc, #12]	; (3110 <_ZlsIcER5PrintS1_RKT_+0x20>)
    3104:	4798      	blx	r3
    3106:	687b      	ldr	r3, [r7, #4]
    3108:	4618      	mov	r0, r3
    310a:	3708      	adds	r7, #8
    310c:	46bd      	mov	sp, r7
    310e:	bd80      	pop	{r7, pc}
    3110:	000159e9 	.word	0x000159e9

00003114 <_ZlsIA35_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3114:	b580      	push	{r7, lr}
    3116:	b082      	sub	sp, #8
    3118:	af00      	add	r7, sp, #0
    311a:	6078      	str	r0, [r7, #4]
    311c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    311e:	6839      	ldr	r1, [r7, #0]
    3120:	6878      	ldr	r0, [r7, #4]
    3122:	4b03      	ldr	r3, [pc, #12]	; (3130 <_ZlsIA35_cER5PrintS2_RKT_+0x1c>)
    3124:	4798      	blx	r3
    3126:	687b      	ldr	r3, [r7, #4]
    3128:	4618      	mov	r0, r3
    312a:	3708      	adds	r7, #8
    312c:	46bd      	mov	sp, r7
    312e:	bd80      	pop	{r7, pc}
    3130:	000159c9 	.word	0x000159c9

00003134 <_ZlsIA28_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3134:	b580      	push	{r7, lr}
    3136:	b082      	sub	sp, #8
    3138:	af00      	add	r7, sp, #0
    313a:	6078      	str	r0, [r7, #4]
    313c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    313e:	6839      	ldr	r1, [r7, #0]
    3140:	6878      	ldr	r0, [r7, #4]
    3142:	4b03      	ldr	r3, [pc, #12]	; (3150 <_ZlsIA28_cER5PrintS2_RKT_+0x1c>)
    3144:	4798      	blx	r3
    3146:	687b      	ldr	r3, [r7, #4]
    3148:	4618      	mov	r0, r3
    314a:	3708      	adds	r7, #8
    314c:	46bd      	mov	sp, r7
    314e:	bd80      	pop	{r7, pc}
    3150:	000159c9 	.word	0x000159c9

00003154 <_Z41__static_initialization_and_destruction_0ii>:
	s=state.status;
	return	state.status.rawStatus;
}


    3154:	b580      	push	{r7, lr}
    3156:	b082      	sub	sp, #8
    3158:	af00      	add	r7, sp, #0
    315a:	6078      	str	r0, [r7, #4]
    315c:	6039      	str	r1, [r7, #0]
    315e:	687b      	ldr	r3, [r7, #4]
    3160:	2b01      	cmp	r3, #1
    3162:	d10c      	bne.n	317e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    3164:	683b      	ldr	r3, [r7, #0]
    3166:	f64f 72ff 	movw	r2, #65535	; 0xffff
    316a:	4293      	cmp	r3, r2
    316c:	d107      	bne.n	317e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    316e:	4806      	ldr	r0, [pc, #24]	; (3188 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    3170:	4b06      	ldr	r3, [pc, #24]	; (318c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    3172:	4798      	blx	r3
    3174:	4a06      	ldr	r2, [pc, #24]	; (3190 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    3176:	4907      	ldr	r1, [pc, #28]	; (3194 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    3178:	4803      	ldr	r0, [pc, #12]	; (3188 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    317a:	4b07      	ldr	r3, [pc, #28]	; (3198 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    317c:	4798      	blx	r3
    317e:	bf00      	nop
    3180:	3708      	adds	r7, #8
    3182:	46bd      	mov	sp, r7
    3184:	bd80      	pop	{r7, pc}
    3186:	bf00      	nop
    3188:	20002f48 	.word	0x20002f48
    318c:	000023c5 	.word	0x000023c5
    3190:	20000000 	.word	0x20000000
    3194:	0000241d 	.word	0x0000241d
    3198:	000167bd 	.word	0x000167bd

0000319c <_GLOBAL__sub_I__ZN12States_ClassC2Ev>:
    319c:	b580      	push	{r7, lr}
    319e:	af00      	add	r7, sp, #0
    31a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    31a4:	2001      	movs	r0, #1
    31a6:	4b01      	ldr	r3, [pc, #4]	; (31ac <_GLOBAL__sub_I__ZN12States_ClassC2Ev+0x10>)
    31a8:	4798      	blx	r3
    31aa:	bd80      	pop	{r7, pc}
    31ac:	00003155 	.word	0x00003155

000031b0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    31b0:	b580      	push	{r7, lr}
    31b2:	af00      	add	r7, sp, #0
	system_init();
    31b4:	4b03      	ldr	r3, [pc, #12]	; (31c4 <atmel_start_init+0x14>)
    31b6:	4798      	blx	r3
	usb_init();
    31b8:	4b03      	ldr	r3, [pc, #12]	; (31c8 <atmel_start_init+0x18>)
    31ba:	4798      	blx	r3
	spi_nor_flash_init();
    31bc:	4b03      	ldr	r3, [pc, #12]	; (31cc <atmel_start_init+0x1c>)
    31be:	4798      	blx	r3
}
    31c0:	bf00      	nop
    31c2:	bd80      	pop	{r7, pc}
    31c4:	00004529 	.word	0x00004529
    31c8:	0000ef05 	.word	0x0000ef05
    31cc:	0000ee99 	.word	0x0000ee99

000031d0 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    31d0:	b480      	push	{r7}
    31d2:	b085      	sub	sp, #20
    31d4:	af00      	add	r7, sp, #0
    31d6:	60f8      	str	r0, [r7, #12]
    31d8:	460b      	mov	r3, r1
    31da:	607a      	str	r2, [r7, #4]
    31dc:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    31de:	7afa      	ldrb	r2, [r7, #11]
    31e0:	68fb      	ldr	r3, [r7, #12]
    31e2:	3220      	adds	r2, #32
    31e4:	6879      	ldr	r1, [r7, #4]
    31e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    31ea:	bf00      	nop
    31ec:	3714      	adds	r7, #20
    31ee:	46bd      	mov	sp, r7
    31f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    31f4:	4770      	bx	lr

000031f6 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    31f6:	b480      	push	{r7}
    31f8:	b083      	sub	sp, #12
    31fa:	af00      	add	r7, sp, #0
    31fc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    31fe:	687b      	ldr	r3, [r7, #4]
    3200:	691b      	ldr	r3, [r3, #16]
    3202:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    3206:	687b      	ldr	r3, [r7, #4]
    3208:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    320a:	bf00      	nop
    320c:	370c      	adds	r7, #12
    320e:	46bd      	mov	sp, r7
    3210:	f85d 7b04 	ldr.w	r7, [sp], #4
    3214:	4770      	bx	lr

00003216 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    3216:	b480      	push	{r7}
    3218:	b083      	sub	sp, #12
    321a:	af00      	add	r7, sp, #0
    321c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    321e:	687b      	ldr	r3, [r7, #4]
    3220:	691b      	ldr	r3, [r3, #16]
    3222:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    3226:	687b      	ldr	r3, [r7, #4]
    3228:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    322a:	bf00      	nop
    322c:	370c      	adds	r7, #12
    322e:	46bd      	mov	sp, r7
    3230:	f85d 7b04 	ldr.w	r7, [sp], #4
    3234:	4770      	bx	lr

00003236 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    3236:	b480      	push	{r7}
    3238:	b083      	sub	sp, #12
    323a:	af00      	add	r7, sp, #0
    323c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    323e:	687b      	ldr	r3, [r7, #4]
    3240:	691b      	ldr	r3, [r3, #16]
    3242:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    324a:	bf00      	nop
    324c:	370c      	adds	r7, #12
    324e:	46bd      	mov	sp, r7
    3250:	f85d 7b04 	ldr.w	r7, [sp], #4
    3254:	4770      	bx	lr

00003256 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    3256:	b480      	push	{r7}
    3258:	b083      	sub	sp, #12
    325a:	af00      	add	r7, sp, #0
    325c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    325e:	687b      	ldr	r3, [r7, #4]
    3260:	691b      	ldr	r3, [r3, #16]
    3262:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    3266:	687b      	ldr	r3, [r7, #4]
    3268:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    326a:	bf00      	nop
    326c:	370c      	adds	r7, #12
    326e:	46bd      	mov	sp, r7
    3270:	f85d 7b04 	ldr.w	r7, [sp], #4
    3274:	4770      	bx	lr

00003276 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    3276:	b480      	push	{r7}
    3278:	b083      	sub	sp, #12
    327a:	af00      	add	r7, sp, #0
    327c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    327e:	687b      	ldr	r3, [r7, #4]
    3280:	695b      	ldr	r3, [r3, #20]
    3282:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    3286:	687b      	ldr	r3, [r7, #4]
    3288:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    328a:	bf00      	nop
    328c:	370c      	adds	r7, #12
    328e:	46bd      	mov	sp, r7
    3290:	f85d 7b04 	ldr.w	r7, [sp], #4
    3294:	4770      	bx	lr

00003296 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    3296:	b480      	push	{r7}
    3298:	b083      	sub	sp, #12
    329a:	af00      	add	r7, sp, #0
    329c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    329e:	687b      	ldr	r3, [r7, #4]
    32a0:	695b      	ldr	r3, [r3, #20]
    32a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    32a6:	687b      	ldr	r3, [r7, #4]
    32a8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    32aa:	bf00      	nop
    32ac:	370c      	adds	r7, #12
    32ae:	46bd      	mov	sp, r7
    32b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32b4:	4770      	bx	lr

000032b6 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    32b6:	b480      	push	{r7}
    32b8:	b083      	sub	sp, #12
    32ba:	af00      	add	r7, sp, #0
    32bc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    32be:	687b      	ldr	r3, [r7, #4]
    32c0:	695b      	ldr	r3, [r3, #20]
    32c2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    32c6:	687b      	ldr	r3, [r7, #4]
    32c8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    32ca:	bf00      	nop
    32cc:	370c      	adds	r7, #12
    32ce:	46bd      	mov	sp, r7
    32d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32d4:	4770      	bx	lr

000032d6 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    32d6:	b480      	push	{r7}
    32d8:	b083      	sub	sp, #12
    32da:	af00      	add	r7, sp, #0
    32dc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    32de:	687b      	ldr	r3, [r7, #4]
    32e0:	695b      	ldr	r3, [r3, #20]
    32e2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    32e6:	687b      	ldr	r3, [r7, #4]
    32e8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    32ea:	bf00      	nop
    32ec:	370c      	adds	r7, #12
    32ee:	46bd      	mov	sp, r7
    32f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32f4:	4770      	bx	lr

000032f6 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    32f6:	b480      	push	{r7}
    32f8:	b083      	sub	sp, #12
    32fa:	af00      	add	r7, sp, #0
    32fc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    32fe:	687b      	ldr	r3, [r7, #4]
    3300:	695b      	ldr	r3, [r3, #20]
    3302:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    3306:	687b      	ldr	r3, [r7, #4]
    3308:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    330a:	bf00      	nop
    330c:	370c      	adds	r7, #12
    330e:	46bd      	mov	sp, r7
    3310:	f85d 7b04 	ldr.w	r7, [sp], #4
    3314:	4770      	bx	lr

00003316 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    3316:	b480      	push	{r7}
    3318:	b083      	sub	sp, #12
    331a:	af00      	add	r7, sp, #0
    331c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    331e:	687b      	ldr	r3, [r7, #4]
    3320:	695b      	ldr	r3, [r3, #20]
    3322:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    3326:	687b      	ldr	r3, [r7, #4]
    3328:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    332a:	bf00      	nop
    332c:	370c      	adds	r7, #12
    332e:	46bd      	mov	sp, r7
    3330:	f85d 7b04 	ldr.w	r7, [sp], #4
    3334:	4770      	bx	lr

00003336 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    3336:	b480      	push	{r7}
    3338:	b083      	sub	sp, #12
    333a:	af00      	add	r7, sp, #0
    333c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    333e:	687b      	ldr	r3, [r7, #4]
    3340:	699b      	ldr	r3, [r3, #24]
    3342:	f043 0201 	orr.w	r2, r3, #1
    3346:	687b      	ldr	r3, [r7, #4]
    3348:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    334a:	bf00      	nop
    334c:	370c      	adds	r7, #12
    334e:	46bd      	mov	sp, r7
    3350:	f85d 7b04 	ldr.w	r7, [sp], #4
    3354:	4770      	bx	lr

00003356 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    3356:	b480      	push	{r7}
    3358:	b083      	sub	sp, #12
    335a:	af00      	add	r7, sp, #0
    335c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    335e:	687b      	ldr	r3, [r7, #4]
    3360:	699b      	ldr	r3, [r3, #24]
    3362:	f043 0202 	orr.w	r2, r3, #2
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    336a:	bf00      	nop
    336c:	370c      	adds	r7, #12
    336e:	46bd      	mov	sp, r7
    3370:	f85d 7b04 	ldr.w	r7, [sp], #4
    3374:	4770      	bx	lr

00003376 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    3376:	b480      	push	{r7}
    3378:	b083      	sub	sp, #12
    337a:	af00      	add	r7, sp, #0
    337c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    337e:	687b      	ldr	r3, [r7, #4]
    3380:	699b      	ldr	r3, [r3, #24]
    3382:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    3386:	687b      	ldr	r3, [r7, #4]
    3388:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    338a:	bf00      	nop
    338c:	370c      	adds	r7, #12
    338e:	46bd      	mov	sp, r7
    3390:	f85d 7b04 	ldr.w	r7, [sp], #4
    3394:	4770      	bx	lr

00003396 <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
    3396:	b480      	push	{r7}
    3398:	b083      	sub	sp, #12
    339a:	af00      	add	r7, sp, #0
    339c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    339e:	687b      	ldr	r3, [r7, #4]
    33a0:	699b      	ldr	r3, [r3, #24]
    33a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    33a6:	687b      	ldr	r3, [r7, #4]
    33a8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    33aa:	bf00      	nop
    33ac:	370c      	adds	r7, #12
    33ae:	46bd      	mov	sp, r7
    33b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    33b4:	4770      	bx	lr

000033b6 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    33b6:	b480      	push	{r7}
    33b8:	b083      	sub	sp, #12
    33ba:	af00      	add	r7, sp, #0
    33bc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    33be:	687b      	ldr	r3, [r7, #4]
    33c0:	699b      	ldr	r3, [r3, #24]
    33c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    33c6:	687b      	ldr	r3, [r7, #4]
    33c8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    33ca:	bf00      	nop
    33cc:	370c      	adds	r7, #12
    33ce:	46bd      	mov	sp, r7
    33d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    33d4:	4770      	bx	lr

000033d6 <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
    33d6:	b480      	push	{r7}
    33d8:	b083      	sub	sp, #12
    33da:	af00      	add	r7, sp, #0
    33dc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    33de:	687b      	ldr	r3, [r7, #4]
    33e0:	699b      	ldr	r3, [r3, #24]
    33e2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    33e6:	687b      	ldr	r3, [r7, #4]
    33e8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    33ea:	bf00      	nop
    33ec:	370c      	adds	r7, #12
    33ee:	46bd      	mov	sp, r7
    33f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    33f4:	4770      	bx	lr

000033f6 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    33f6:	b480      	push	{r7}
    33f8:	b083      	sub	sp, #12
    33fa:	af00      	add	r7, sp, #0
    33fc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    33fe:	687b      	ldr	r3, [r7, #4]
    3400:	69db      	ldr	r3, [r3, #28]
    3402:	f043 0220 	orr.w	r2, r3, #32
    3406:	687b      	ldr	r3, [r7, #4]
    3408:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    340a:	bf00      	nop
    340c:	370c      	adds	r7, #12
    340e:	46bd      	mov	sp, r7
    3410:	f85d 7b04 	ldr.w	r7, [sp], #4
    3414:	4770      	bx	lr

00003416 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    3416:	b480      	push	{r7}
    3418:	b083      	sub	sp, #12
    341a:	af00      	add	r7, sp, #0
    341c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    341e:	687b      	ldr	r3, [r7, #4]
    3420:	69db      	ldr	r3, [r3, #28]
    3422:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    3426:	687b      	ldr	r3, [r7, #4]
    3428:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    342a:	bf00      	nop
    342c:	370c      	adds	r7, #12
    342e:	46bd      	mov	sp, r7
    3430:	f85d 7b04 	ldr.w	r7, [sp], #4
    3434:	4770      	bx	lr

00003436 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    3436:	b480      	push	{r7}
    3438:	b083      	sub	sp, #12
    343a:	af00      	add	r7, sp, #0
    343c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    343e:	687b      	ldr	r3, [r7, #4]
    3440:	69db      	ldr	r3, [r3, #28]
    3442:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    3446:	687b      	ldr	r3, [r7, #4]
    3448:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    344a:	bf00      	nop
    344c:	370c      	adds	r7, #12
    344e:	46bd      	mov	sp, r7
    3450:	f85d 7b04 	ldr.w	r7, [sp], #4
    3454:	4770      	bx	lr

00003456 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    3456:	b480      	push	{r7}
    3458:	b083      	sub	sp, #12
    345a:	af00      	add	r7, sp, #0
    345c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    345e:	687b      	ldr	r3, [r7, #4]
    3460:	6a1b      	ldr	r3, [r3, #32]
    3462:	f043 0201 	orr.w	r2, r3, #1
    3466:	687b      	ldr	r3, [r7, #4]
    3468:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    346a:	bf00      	nop
    346c:	370c      	adds	r7, #12
    346e:	46bd      	mov	sp, r7
    3470:	f85d 7b04 	ldr.w	r7, [sp], #4
    3474:	4770      	bx	lr

00003476 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    3476:	b480      	push	{r7}
    3478:	b083      	sub	sp, #12
    347a:	af00      	add	r7, sp, #0
    347c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    347e:	687b      	ldr	r3, [r7, #4]
    3480:	6a1b      	ldr	r3, [r3, #32]
    3482:	f043 0202 	orr.w	r2, r3, #2
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    348a:	bf00      	nop
    348c:	370c      	adds	r7, #12
    348e:	46bd      	mov	sp, r7
    3490:	f85d 7b04 	ldr.w	r7, [sp], #4
    3494:	4770      	bx	lr

00003496 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    3496:	b480      	push	{r7}
    3498:	b083      	sub	sp, #12
    349a:	af00      	add	r7, sp, #0
    349c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    349e:	687b      	ldr	r3, [r7, #4]
    34a0:	6a1b      	ldr	r3, [r3, #32]
    34a2:	f043 0204 	orr.w	r2, r3, #4
    34a6:	687b      	ldr	r3, [r7, #4]
    34a8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    34aa:	bf00      	nop
    34ac:	370c      	adds	r7, #12
    34ae:	46bd      	mov	sp, r7
    34b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    34b4:	4770      	bx	lr

000034b6 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    34b6:	b480      	push	{r7}
    34b8:	b083      	sub	sp, #12
    34ba:	af00      	add	r7, sp, #0
    34bc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    34be:	687b      	ldr	r3, [r7, #4]
    34c0:	6a1b      	ldr	r3, [r3, #32]
    34c2:	f043 0208 	orr.w	r2, r3, #8
    34c6:	687b      	ldr	r3, [r7, #4]
    34c8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    34ca:	bf00      	nop
    34cc:	370c      	adds	r7, #12
    34ce:	46bd      	mov	sp, r7
    34d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    34d4:	4770      	bx	lr

000034d6 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    34d6:	b480      	push	{r7}
    34d8:	b083      	sub	sp, #12
    34da:	af00      	add	r7, sp, #0
    34dc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    34de:	687b      	ldr	r3, [r7, #4]
    34e0:	6a1b      	ldr	r3, [r3, #32]
    34e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    34e6:	687b      	ldr	r3, [r7, #4]
    34e8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    34ea:	bf00      	nop
    34ec:	370c      	adds	r7, #12
    34ee:	46bd      	mov	sp, r7
    34f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    34f4:	4770      	bx	lr

000034f6 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    34f6:	b480      	push	{r7}
    34f8:	b085      	sub	sp, #20
    34fa:	af00      	add	r7, sp, #0
    34fc:	60f8      	str	r0, [r7, #12]
    34fe:	460b      	mov	r3, r1
    3500:	607a      	str	r2, [r7, #4]
    3502:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3504:	7afb      	ldrb	r3, [r7, #11]
    3506:	68fa      	ldr	r2, [r7, #12]
    3508:	01db      	lsls	r3, r3, #7
    350a:	4413      	add	r3, r2
    350c:	3308      	adds	r3, #8
    350e:	687a      	ldr	r2, [r7, #4]
    3510:	601a      	str	r2, [r3, #0]
}
    3512:	bf00      	nop
    3514:	3714      	adds	r7, #20
    3516:	46bd      	mov	sp, r7
    3518:	f85d 7b04 	ldr.w	r7, [sp], #4
    351c:	4770      	bx	lr

0000351e <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    351e:	b480      	push	{r7}
    3520:	b085      	sub	sp, #20
    3522:	af00      	add	r7, sp, #0
    3524:	60f8      	str	r0, [r7, #12]
    3526:	460b      	mov	r3, r1
    3528:	607a      	str	r2, [r7, #4]
    352a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    352c:	7afb      	ldrb	r3, [r7, #11]
    352e:	68fa      	ldr	r2, [r7, #12]
    3530:	01db      	lsls	r3, r3, #7
    3532:	4413      	add	r3, r2
    3534:	3304      	adds	r3, #4
    3536:	687a      	ldr	r2, [r7, #4]
    3538:	601a      	str	r2, [r3, #0]
}
    353a:	bf00      	nop
    353c:	3714      	adds	r7, #20
    353e:	46bd      	mov	sp, r7
    3540:	f85d 7b04 	ldr.w	r7, [sp], #4
    3544:	4770      	bx	lr

00003546 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    3546:	b480      	push	{r7}
    3548:	b085      	sub	sp, #20
    354a:	af00      	add	r7, sp, #0
    354c:	60f8      	str	r0, [r7, #12]
    354e:	460b      	mov	r3, r1
    3550:	607a      	str	r2, [r7, #4]
    3552:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3554:	7afb      	ldrb	r3, [r7, #11]
    3556:	68fa      	ldr	r2, [r7, #12]
    3558:	01db      	lsls	r3, r3, #7
    355a:	4413      	add	r3, r2
    355c:	3318      	adds	r3, #24
    355e:	687a      	ldr	r2, [r7, #4]
    3560:	601a      	str	r2, [r3, #0]
}
    3562:	bf00      	nop
    3564:	3714      	adds	r7, #20
    3566:	46bd      	mov	sp, r7
    3568:	f85d 7b04 	ldr.w	r7, [sp], #4
    356c:	4770      	bx	lr

0000356e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    356e:	b480      	push	{r7}
    3570:	b085      	sub	sp, #20
    3572:	af00      	add	r7, sp, #0
    3574:	60f8      	str	r0, [r7, #12]
    3576:	460b      	mov	r3, r1
    3578:	607a      	str	r2, [r7, #4]
    357a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    357c:	7afb      	ldrb	r3, [r7, #11]
    357e:	68fa      	ldr	r2, [r7, #12]
    3580:	01db      	lsls	r3, r3, #7
    3582:	4413      	add	r3, r2
    3584:	3314      	adds	r3, #20
    3586:	687a      	ldr	r2, [r7, #4]
    3588:	601a      	str	r2, [r3, #0]
}
    358a:	bf00      	nop
    358c:	3714      	adds	r7, #20
    358e:	46bd      	mov	sp, r7
    3590:	f85d 7b04 	ldr.w	r7, [sp], #4
    3594:	4770      	bx	lr

00003596 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    3596:	b480      	push	{r7}
    3598:	b085      	sub	sp, #20
    359a:	af00      	add	r7, sp, #0
    359c:	6078      	str	r0, [r7, #4]
    359e:	4608      	mov	r0, r1
    35a0:	4611      	mov	r1, r2
    35a2:	461a      	mov	r2, r3
    35a4:	4603      	mov	r3, r0
    35a6:	70fb      	strb	r3, [r7, #3]
    35a8:	460b      	mov	r3, r1
    35aa:	70bb      	strb	r3, [r7, #2]
    35ac:	4613      	mov	r3, r2
    35ae:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    35b0:	78fa      	ldrb	r2, [r7, #3]
    35b2:	78bb      	ldrb	r3, [r7, #2]
    35b4:	6879      	ldr	r1, [r7, #4]
    35b6:	01d2      	lsls	r2, r2, #7
    35b8:	440a      	add	r2, r1
    35ba:	4413      	add	r3, r2
    35bc:	3330      	adds	r3, #48	; 0x30
    35be:	781b      	ldrb	r3, [r3, #0]
    35c0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    35c2:	7bfb      	ldrb	r3, [r7, #15]
    35c4:	f023 030f 	bic.w	r3, r3, #15
    35c8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    35ca:	787b      	ldrb	r3, [r7, #1]
    35cc:	f003 030f 	and.w	r3, r3, #15
    35d0:	b2da      	uxtb	r2, r3
    35d2:	7bfb      	ldrb	r3, [r7, #15]
    35d4:	4313      	orrs	r3, r2
    35d6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    35d8:	78fa      	ldrb	r2, [r7, #3]
    35da:	78bb      	ldrb	r3, [r7, #2]
    35dc:	6879      	ldr	r1, [r7, #4]
    35de:	01d2      	lsls	r2, r2, #7
    35e0:	440a      	add	r2, r1
    35e2:	4413      	add	r3, r2
    35e4:	3330      	adds	r3, #48	; 0x30
    35e6:	7bfa      	ldrb	r2, [r7, #15]
    35e8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    35ea:	bf00      	nop
    35ec:	3714      	adds	r7, #20
    35ee:	46bd      	mov	sp, r7
    35f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    35f4:	4770      	bx	lr

000035f6 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    35f6:	b480      	push	{r7}
    35f8:	b085      	sub	sp, #20
    35fa:	af00      	add	r7, sp, #0
    35fc:	6078      	str	r0, [r7, #4]
    35fe:	4608      	mov	r0, r1
    3600:	4611      	mov	r1, r2
    3602:	461a      	mov	r2, r3
    3604:	4603      	mov	r3, r0
    3606:	70fb      	strb	r3, [r7, #3]
    3608:	460b      	mov	r3, r1
    360a:	70bb      	strb	r3, [r7, #2]
    360c:	4613      	mov	r3, r2
    360e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3610:	78fa      	ldrb	r2, [r7, #3]
    3612:	78bb      	ldrb	r3, [r7, #2]
    3614:	6879      	ldr	r1, [r7, #4]
    3616:	01d2      	lsls	r2, r2, #7
    3618:	440a      	add	r2, r1
    361a:	4413      	add	r3, r2
    361c:	3330      	adds	r3, #48	; 0x30
    361e:	781b      	ldrb	r3, [r3, #0]
    3620:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3622:	7bfb      	ldrb	r3, [r7, #15]
    3624:	f003 030f 	and.w	r3, r3, #15
    3628:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    362a:	787b      	ldrb	r3, [r7, #1]
    362c:	011b      	lsls	r3, r3, #4
    362e:	b2da      	uxtb	r2, r3
    3630:	7bfb      	ldrb	r3, [r7, #15]
    3632:	4313      	orrs	r3, r2
    3634:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3636:	78fa      	ldrb	r2, [r7, #3]
    3638:	78bb      	ldrb	r3, [r7, #2]
    363a:	6879      	ldr	r1, [r7, #4]
    363c:	01d2      	lsls	r2, r2, #7
    363e:	440a      	add	r2, r1
    3640:	4413      	add	r3, r2
    3642:	3330      	adds	r3, #48	; 0x30
    3644:	7bfa      	ldrb	r2, [r7, #15]
    3646:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3648:	bf00      	nop
    364a:	3714      	adds	r7, #20
    364c:	46bd      	mov	sp, r7
    364e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3652:	4770      	bx	lr

00003654 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    3654:	b480      	push	{r7}
    3656:	b085      	sub	sp, #20
    3658:	af00      	add	r7, sp, #0
    365a:	6078      	str	r0, [r7, #4]
    365c:	4608      	mov	r0, r1
    365e:	4611      	mov	r1, r2
    3660:	461a      	mov	r2, r3
    3662:	4603      	mov	r3, r0
    3664:	70fb      	strb	r3, [r7, #3]
    3666:	460b      	mov	r3, r1
    3668:	70bb      	strb	r3, [r7, #2]
    366a:	4613      	mov	r3, r2
    366c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    366e:	78fa      	ldrb	r2, [r7, #3]
    3670:	78bb      	ldrb	r3, [r7, #2]
    3672:	6879      	ldr	r1, [r7, #4]
    3674:	01d2      	lsls	r2, r2, #7
    3676:	440a      	add	r2, r1
    3678:	4413      	add	r3, r2
    367a:	3340      	adds	r3, #64	; 0x40
    367c:	781b      	ldrb	r3, [r3, #0]
    367e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3680:	7bfb      	ldrb	r3, [r7, #15]
    3682:	f023 0301 	bic.w	r3, r3, #1
    3686:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3688:	787a      	ldrb	r2, [r7, #1]
    368a:	7bfb      	ldrb	r3, [r7, #15]
    368c:	4313      	orrs	r3, r2
    368e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3690:	78fa      	ldrb	r2, [r7, #3]
    3692:	78bb      	ldrb	r3, [r7, #2]
    3694:	6879      	ldr	r1, [r7, #4]
    3696:	01d2      	lsls	r2, r2, #7
    3698:	440a      	add	r2, r1
    369a:	4413      	add	r3, r2
    369c:	3340      	adds	r3, #64	; 0x40
    369e:	7bfa      	ldrb	r2, [r7, #15]
    36a0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    36a2:	bf00      	nop
    36a4:	3714      	adds	r7, #20
    36a6:	46bd      	mov	sp, r7
    36a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    36ac:	4770      	bx	lr

000036ae <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    36ae:	b490      	push	{r4, r7}
    36b0:	b082      	sub	sp, #8
    36b2:	af00      	add	r7, sp, #0
    36b4:	6078      	str	r0, [r7, #4]
    36b6:	460b      	mov	r3, r1
    36b8:	70fb      	strb	r3, [r7, #3]
    36ba:	4613      	mov	r3, r2
    36bc:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    36be:	78fa      	ldrb	r2, [r7, #3]
    36c0:	78bb      	ldrb	r3, [r7, #2]
    36c2:	78f8      	ldrb	r0, [r7, #3]
    36c4:	78b9      	ldrb	r1, [r7, #2]
    36c6:	687c      	ldr	r4, [r7, #4]
    36c8:	01c0      	lsls	r0, r0, #7
    36ca:	4420      	add	r0, r4
    36cc:	4401      	add	r1, r0
    36ce:	3140      	adds	r1, #64	; 0x40
    36d0:	7809      	ldrb	r1, [r1, #0]
    36d2:	b2c9      	uxtb	r1, r1
    36d4:	f041 0104 	orr.w	r1, r1, #4
    36d8:	b2c8      	uxtb	r0, r1
    36da:	6879      	ldr	r1, [r7, #4]
    36dc:	01d2      	lsls	r2, r2, #7
    36de:	440a      	add	r2, r1
    36e0:	4413      	add	r3, r2
    36e2:	3340      	adds	r3, #64	; 0x40
    36e4:	4602      	mov	r2, r0
    36e6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    36e8:	bf00      	nop
    36ea:	3708      	adds	r7, #8
    36ec:	46bd      	mov	sp, r7
    36ee:	bc90      	pop	{r4, r7}
    36f0:	4770      	bx	lr

000036f2 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    36f2:	b490      	push	{r4, r7}
    36f4:	b082      	sub	sp, #8
    36f6:	af00      	add	r7, sp, #0
    36f8:	6078      	str	r0, [r7, #4]
    36fa:	460b      	mov	r3, r1
    36fc:	70fb      	strb	r3, [r7, #3]
    36fe:	4613      	mov	r3, r2
    3700:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    3702:	78fa      	ldrb	r2, [r7, #3]
    3704:	78bb      	ldrb	r3, [r7, #2]
    3706:	78f8      	ldrb	r0, [r7, #3]
    3708:	78b9      	ldrb	r1, [r7, #2]
    370a:	687c      	ldr	r4, [r7, #4]
    370c:	01c0      	lsls	r0, r0, #7
    370e:	4420      	add	r0, r4
    3710:	4401      	add	r1, r0
    3712:	3140      	adds	r1, #64	; 0x40
    3714:	7809      	ldrb	r1, [r1, #0]
    3716:	b2c9      	uxtb	r1, r1
    3718:	f021 0104 	bic.w	r1, r1, #4
    371c:	b2c8      	uxtb	r0, r1
    371e:	6879      	ldr	r1, [r7, #4]
    3720:	01d2      	lsls	r2, r2, #7
    3722:	440a      	add	r2, r1
    3724:	4413      	add	r3, r2
    3726:	3340      	adds	r3, #64	; 0x40
    3728:	4602      	mov	r2, r0
    372a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    372c:	bf00      	nop
    372e:	3708      	adds	r7, #8
    3730:	46bd      	mov	sp, r7
    3732:	bc90      	pop	{r4, r7}
    3734:	4770      	bx	lr

00003736 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    3736:	b480      	push	{r7}
    3738:	b085      	sub	sp, #20
    373a:	af00      	add	r7, sp, #0
    373c:	60f8      	str	r0, [r7, #12]
    373e:	460b      	mov	r3, r1
    3740:	607a      	str	r2, [r7, #4]
    3742:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3744:	7afb      	ldrb	r3, [r7, #11]
    3746:	68fa      	ldr	r2, [r7, #12]
    3748:	01db      	lsls	r3, r3, #7
    374a:	4413      	add	r3, r2
    374c:	3328      	adds	r3, #40	; 0x28
    374e:	687a      	ldr	r2, [r7, #4]
    3750:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3752:	bf00      	nop
    3754:	3714      	adds	r7, #20
    3756:	46bd      	mov	sp, r7
    3758:	f85d 7b04 	ldr.w	r7, [sp], #4
    375c:	4770      	bx	lr
	...

00003760 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    3760:	b580      	push	{r7, lr}
    3762:	b082      	sub	sp, #8
    3764:	af00      	add	r7, sp, #0
    3766:	4603      	mov	r3, r0
    3768:	6039      	str	r1, [r7, #0]
    376a:	71fb      	strb	r3, [r7, #7]
    376c:	4613      	mov	r3, r2
    376e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    3770:	79bb      	ldrb	r3, [r7, #6]
    3772:	2b01      	cmp	r3, #1
    3774:	d01c      	beq.n	37b0 <_gpio_set_direction+0x50>
    3776:	2b02      	cmp	r3, #2
    3778:	d037      	beq.n	37ea <_gpio_set_direction+0x8a>
    377a:	2b00      	cmp	r3, #0
    377c:	d14e      	bne.n	381c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    377e:	79fb      	ldrb	r3, [r7, #7]
    3780:	683a      	ldr	r2, [r7, #0]
    3782:	4619      	mov	r1, r3
    3784:	482a      	ldr	r0, [pc, #168]	; (3830 <_gpio_set_direction+0xd0>)
    3786:	4b2b      	ldr	r3, [pc, #172]	; (3834 <_gpio_set_direction+0xd4>)
    3788:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    378a:	683b      	ldr	r3, [r7, #0]
    378c:	b29b      	uxth	r3, r3
    378e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    3792:	79fb      	ldrb	r3, [r7, #7]
    3794:	4619      	mov	r1, r3
    3796:	4826      	ldr	r0, [pc, #152]	; (3830 <_gpio_set_direction+0xd0>)
    3798:	4b27      	ldr	r3, [pc, #156]	; (3838 <_gpio_set_direction+0xd8>)
    379a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    379c:	683b      	ldr	r3, [r7, #0]
    379e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    37a0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    37a4:	79fb      	ldrb	r3, [r7, #7]
    37a6:	4619      	mov	r1, r3
    37a8:	4821      	ldr	r0, [pc, #132]	; (3830 <_gpio_set_direction+0xd0>)
    37aa:	4b23      	ldr	r3, [pc, #140]	; (3838 <_gpio_set_direction+0xd8>)
    37ac:	4798      	blx	r3
		break;
    37ae:	e03a      	b.n	3826 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    37b0:	79fb      	ldrb	r3, [r7, #7]
    37b2:	683a      	ldr	r2, [r7, #0]
    37b4:	4619      	mov	r1, r3
    37b6:	481e      	ldr	r0, [pc, #120]	; (3830 <_gpio_set_direction+0xd0>)
    37b8:	4b1e      	ldr	r3, [pc, #120]	; (3834 <_gpio_set_direction+0xd4>)
    37ba:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    37bc:	683b      	ldr	r3, [r7, #0]
    37be:	b29b      	uxth	r3, r3
    37c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    37c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    37c8:	79f9      	ldrb	r1, [r7, #7]
    37ca:	461a      	mov	r2, r3
    37cc:	4818      	ldr	r0, [pc, #96]	; (3830 <_gpio_set_direction+0xd0>)
    37ce:	4b1a      	ldr	r3, [pc, #104]	; (3838 <_gpio_set_direction+0xd8>)
    37d0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    37d2:	683b      	ldr	r3, [r7, #0]
    37d4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    37d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    37da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    37de:	79f9      	ldrb	r1, [r7, #7]
    37e0:	461a      	mov	r2, r3
    37e2:	4813      	ldr	r0, [pc, #76]	; (3830 <_gpio_set_direction+0xd0>)
    37e4:	4b14      	ldr	r3, [pc, #80]	; (3838 <_gpio_set_direction+0xd8>)
    37e6:	4798      	blx	r3
		break;
    37e8:	e01d      	b.n	3826 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    37ea:	79fb      	ldrb	r3, [r7, #7]
    37ec:	683a      	ldr	r2, [r7, #0]
    37ee:	4619      	mov	r1, r3
    37f0:	480f      	ldr	r0, [pc, #60]	; (3830 <_gpio_set_direction+0xd0>)
    37f2:	4b12      	ldr	r3, [pc, #72]	; (383c <_gpio_set_direction+0xdc>)
    37f4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    37f6:	683b      	ldr	r3, [r7, #0]
    37f8:	b29b      	uxth	r3, r3
    37fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    37fe:	79fb      	ldrb	r3, [r7, #7]
    3800:	4619      	mov	r1, r3
    3802:	480b      	ldr	r0, [pc, #44]	; (3830 <_gpio_set_direction+0xd0>)
    3804:	4b0c      	ldr	r3, [pc, #48]	; (3838 <_gpio_set_direction+0xd8>)
    3806:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3808:	683b      	ldr	r3, [r7, #0]
    380a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    380c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    3810:	79fb      	ldrb	r3, [r7, #7]
    3812:	4619      	mov	r1, r3
    3814:	4806      	ldr	r0, [pc, #24]	; (3830 <_gpio_set_direction+0xd0>)
    3816:	4b08      	ldr	r3, [pc, #32]	; (3838 <_gpio_set_direction+0xd8>)
    3818:	4798      	blx	r3
		break;
    381a:	e004      	b.n	3826 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    381c:	2246      	movs	r2, #70	; 0x46
    381e:	4908      	ldr	r1, [pc, #32]	; (3840 <_gpio_set_direction+0xe0>)
    3820:	2000      	movs	r0, #0
    3822:	4b08      	ldr	r3, [pc, #32]	; (3844 <_gpio_set_direction+0xe4>)
    3824:	4798      	blx	r3
	}
}
    3826:	bf00      	nop
    3828:	3708      	adds	r7, #8
    382a:	46bd      	mov	sp, r7
    382c:	bd80      	pop	{r7, pc}
    382e:	bf00      	nop
    3830:	41008000 	.word	0x41008000
    3834:	0000351f 	.word	0x0000351f
    3838:	00003737 	.word	0x00003737
    383c:	000034f7 	.word	0x000034f7
    3840:	0001cf30 	.word	0x0001cf30
    3844:	00006991 	.word	0x00006991

00003848 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    3848:	b580      	push	{r7, lr}
    384a:	b082      	sub	sp, #8
    384c:	af00      	add	r7, sp, #0
    384e:	4603      	mov	r3, r0
    3850:	6039      	str	r1, [r7, #0]
    3852:	71fb      	strb	r3, [r7, #7]
    3854:	4613      	mov	r3, r2
    3856:	71bb      	strb	r3, [r7, #6]
	if (level) {
    3858:	79bb      	ldrb	r3, [r7, #6]
    385a:	2b00      	cmp	r3, #0
    385c:	d006      	beq.n	386c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    385e:	79fb      	ldrb	r3, [r7, #7]
    3860:	683a      	ldr	r2, [r7, #0]
    3862:	4619      	mov	r1, r3
    3864:	4806      	ldr	r0, [pc, #24]	; (3880 <_gpio_set_level+0x38>)
    3866:	4b07      	ldr	r3, [pc, #28]	; (3884 <_gpio_set_level+0x3c>)
    3868:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    386a:	e005      	b.n	3878 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    386c:	79fb      	ldrb	r3, [r7, #7]
    386e:	683a      	ldr	r2, [r7, #0]
    3870:	4619      	mov	r1, r3
    3872:	4803      	ldr	r0, [pc, #12]	; (3880 <_gpio_set_level+0x38>)
    3874:	4b04      	ldr	r3, [pc, #16]	; (3888 <_gpio_set_level+0x40>)
    3876:	4798      	blx	r3
}
    3878:	bf00      	nop
    387a:	3708      	adds	r7, #8
    387c:	46bd      	mov	sp, r7
    387e:	bd80      	pop	{r7, pc}
    3880:	41008000 	.word	0x41008000
    3884:	00003547 	.word	0x00003547
    3888:	0000356f 	.word	0x0000356f

0000388c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    388c:	b580      	push	{r7, lr}
    388e:	b082      	sub	sp, #8
    3890:	af00      	add	r7, sp, #0
    3892:	4603      	mov	r3, r0
    3894:	71fb      	strb	r3, [r7, #7]
    3896:	460b      	mov	r3, r1
    3898:	71bb      	strb	r3, [r7, #6]
    389a:	4613      	mov	r3, r2
    389c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    389e:	797b      	ldrb	r3, [r7, #5]
    38a0:	2b01      	cmp	r3, #1
    38a2:	d00a      	beq.n	38ba <_gpio_set_pin_pull_mode+0x2e>
    38a4:	2b02      	cmp	r3, #2
    38a6:	d01f      	beq.n	38e8 <_gpio_set_pin_pull_mode+0x5c>
    38a8:	2b00      	cmp	r3, #0
    38aa:	d134      	bne.n	3916 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    38ac:	79ba      	ldrb	r2, [r7, #6]
    38ae:	79fb      	ldrb	r3, [r7, #7]
    38b0:	4619      	mov	r1, r3
    38b2:	481e      	ldr	r0, [pc, #120]	; (392c <_gpio_set_pin_pull_mode+0xa0>)
    38b4:	4b1e      	ldr	r3, [pc, #120]	; (3930 <_gpio_set_pin_pull_mode+0xa4>)
    38b6:	4798      	blx	r3
		break;
    38b8:	e033      	b.n	3922 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    38ba:	79bb      	ldrb	r3, [r7, #6]
    38bc:	2201      	movs	r2, #1
    38be:	409a      	lsls	r2, r3
    38c0:	79fb      	ldrb	r3, [r7, #7]
    38c2:	4619      	mov	r1, r3
    38c4:	4819      	ldr	r0, [pc, #100]	; (392c <_gpio_set_pin_pull_mode+0xa0>)
    38c6:	4b1b      	ldr	r3, [pc, #108]	; (3934 <_gpio_set_pin_pull_mode+0xa8>)
    38c8:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    38ca:	79ba      	ldrb	r2, [r7, #6]
    38cc:	79fb      	ldrb	r3, [r7, #7]
    38ce:	4619      	mov	r1, r3
    38d0:	4816      	ldr	r0, [pc, #88]	; (392c <_gpio_set_pin_pull_mode+0xa0>)
    38d2:	4b19      	ldr	r3, [pc, #100]	; (3938 <_gpio_set_pin_pull_mode+0xac>)
    38d4:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    38d6:	79bb      	ldrb	r3, [r7, #6]
    38d8:	2201      	movs	r2, #1
    38da:	409a      	lsls	r2, r3
    38dc:	79fb      	ldrb	r3, [r7, #7]
    38de:	4619      	mov	r1, r3
    38e0:	4812      	ldr	r0, [pc, #72]	; (392c <_gpio_set_pin_pull_mode+0xa0>)
    38e2:	4b16      	ldr	r3, [pc, #88]	; (393c <_gpio_set_pin_pull_mode+0xb0>)
    38e4:	4798      	blx	r3
		break;
    38e6:	e01c      	b.n	3922 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    38e8:	79bb      	ldrb	r3, [r7, #6]
    38ea:	2201      	movs	r2, #1
    38ec:	409a      	lsls	r2, r3
    38ee:	79fb      	ldrb	r3, [r7, #7]
    38f0:	4619      	mov	r1, r3
    38f2:	480e      	ldr	r0, [pc, #56]	; (392c <_gpio_set_pin_pull_mode+0xa0>)
    38f4:	4b0f      	ldr	r3, [pc, #60]	; (3934 <_gpio_set_pin_pull_mode+0xa8>)
    38f6:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    38f8:	79ba      	ldrb	r2, [r7, #6]
    38fa:	79fb      	ldrb	r3, [r7, #7]
    38fc:	4619      	mov	r1, r3
    38fe:	480b      	ldr	r0, [pc, #44]	; (392c <_gpio_set_pin_pull_mode+0xa0>)
    3900:	4b0d      	ldr	r3, [pc, #52]	; (3938 <_gpio_set_pin_pull_mode+0xac>)
    3902:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    3904:	79bb      	ldrb	r3, [r7, #6]
    3906:	2201      	movs	r2, #1
    3908:	409a      	lsls	r2, r3
    390a:	79fb      	ldrb	r3, [r7, #7]
    390c:	4619      	mov	r1, r3
    390e:	4807      	ldr	r0, [pc, #28]	; (392c <_gpio_set_pin_pull_mode+0xa0>)
    3910:	4b0b      	ldr	r3, [pc, #44]	; (3940 <_gpio_set_pin_pull_mode+0xb4>)
    3912:	4798      	blx	r3
		break;
    3914:	e005      	b.n	3922 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    3916:	2289      	movs	r2, #137	; 0x89
    3918:	490a      	ldr	r1, [pc, #40]	; (3944 <_gpio_set_pin_pull_mode+0xb8>)
    391a:	2000      	movs	r0, #0
    391c:	4b0a      	ldr	r3, [pc, #40]	; (3948 <_gpio_set_pin_pull_mode+0xbc>)
    391e:	4798      	blx	r3
		break;
    3920:	bf00      	nop
	}
}
    3922:	bf00      	nop
    3924:	3708      	adds	r7, #8
    3926:	46bd      	mov	sp, r7
    3928:	bd80      	pop	{r7, pc}
    392a:	bf00      	nop
    392c:	41008000 	.word	0x41008000
    3930:	000036f3 	.word	0x000036f3
    3934:	0000351f 	.word	0x0000351f
    3938:	000036af 	.word	0x000036af
    393c:	00003547 	.word	0x00003547
    3940:	0000356f 	.word	0x0000356f
    3944:	0001cf30 	.word	0x0001cf30
    3948:	00006991 	.word	0x00006991

0000394c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    394c:	b590      	push	{r4, r7, lr}
    394e:	b085      	sub	sp, #20
    3950:	af00      	add	r7, sp, #0
    3952:	6078      	str	r0, [r7, #4]
    3954:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    3956:	687b      	ldr	r3, [r7, #4]
    3958:	095b      	lsrs	r3, r3, #5
    395a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    395c:	687b      	ldr	r3, [r7, #4]
    395e:	b2db      	uxtb	r3, r3
    3960:	f003 031f 	and.w	r3, r3, #31
    3964:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    3966:	683b      	ldr	r3, [r7, #0]
    3968:	f1b3 3fff 	cmp.w	r3, #4294967295
    396c:	d106      	bne.n	397c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    396e:	7bba      	ldrb	r2, [r7, #14]
    3970:	7bf9      	ldrb	r1, [r7, #15]
    3972:	2300      	movs	r3, #0
    3974:	4812      	ldr	r0, [pc, #72]	; (39c0 <_gpio_set_pin_function+0x74>)
    3976:	4c13      	ldr	r4, [pc, #76]	; (39c4 <_gpio_set_pin_function+0x78>)
    3978:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    397a:	e01d      	b.n	39b8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    397c:	7bba      	ldrb	r2, [r7, #14]
    397e:	7bf9      	ldrb	r1, [r7, #15]
    3980:	2301      	movs	r3, #1
    3982:	480f      	ldr	r0, [pc, #60]	; (39c0 <_gpio_set_pin_function+0x74>)
    3984:	4c0f      	ldr	r4, [pc, #60]	; (39c4 <_gpio_set_pin_function+0x78>)
    3986:	47a0      	blx	r4
		if (pin & 1) {
    3988:	7bbb      	ldrb	r3, [r7, #14]
    398a:	f003 0301 	and.w	r3, r3, #1
    398e:	2b00      	cmp	r3, #0
    3990:	d009      	beq.n	39a6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    3992:	7bbb      	ldrb	r3, [r7, #14]
    3994:	085b      	lsrs	r3, r3, #1
    3996:	b2da      	uxtb	r2, r3
    3998:	683b      	ldr	r3, [r7, #0]
    399a:	b2db      	uxtb	r3, r3
    399c:	7bf9      	ldrb	r1, [r7, #15]
    399e:	4808      	ldr	r0, [pc, #32]	; (39c0 <_gpio_set_pin_function+0x74>)
    39a0:	4c09      	ldr	r4, [pc, #36]	; (39c8 <_gpio_set_pin_function+0x7c>)
    39a2:	47a0      	blx	r4
}
    39a4:	e008      	b.n	39b8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    39a6:	7bbb      	ldrb	r3, [r7, #14]
    39a8:	085b      	lsrs	r3, r3, #1
    39aa:	b2da      	uxtb	r2, r3
    39ac:	683b      	ldr	r3, [r7, #0]
    39ae:	b2db      	uxtb	r3, r3
    39b0:	7bf9      	ldrb	r1, [r7, #15]
    39b2:	4803      	ldr	r0, [pc, #12]	; (39c0 <_gpio_set_pin_function+0x74>)
    39b4:	4c05      	ldr	r4, [pc, #20]	; (39cc <_gpio_set_pin_function+0x80>)
    39b6:	47a0      	blx	r4
}
    39b8:	bf00      	nop
    39ba:	3714      	adds	r7, #20
    39bc:	46bd      	mov	sp, r7
    39be:	bd90      	pop	{r4, r7, pc}
    39c0:	41008000 	.word	0x41008000
    39c4:	00003655 	.word	0x00003655
    39c8:	000035f7 	.word	0x000035f7
    39cc:	00003597 	.word	0x00003597

000039d0 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    39d0:	b580      	push	{r7, lr}
    39d2:	b082      	sub	sp, #8
    39d4:	af00      	add	r7, sp, #0
    39d6:	4603      	mov	r3, r0
    39d8:	460a      	mov	r2, r1
    39da:	71fb      	strb	r3, [r7, #7]
    39dc:	4613      	mov	r3, r2
    39de:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    39e0:	79fb      	ldrb	r3, [r7, #7]
    39e2:	095b      	lsrs	r3, r3, #5
    39e4:	b2d8      	uxtb	r0, r3
    39e6:	79fb      	ldrb	r3, [r7, #7]
    39e8:	f003 031f 	and.w	r3, r3, #31
    39ec:	b2db      	uxtb	r3, r3
    39ee:	79ba      	ldrb	r2, [r7, #6]
    39f0:	4619      	mov	r1, r3
    39f2:	4b03      	ldr	r3, [pc, #12]	; (3a00 <gpio_set_pin_pull_mode+0x30>)
    39f4:	4798      	blx	r3
}
    39f6:	bf00      	nop
    39f8:	3708      	adds	r7, #8
    39fa:	46bd      	mov	sp, r7
    39fc:	bd80      	pop	{r7, pc}
    39fe:	bf00      	nop
    3a00:	0000388d 	.word	0x0000388d

00003a04 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    3a04:	b580      	push	{r7, lr}
    3a06:	b082      	sub	sp, #8
    3a08:	af00      	add	r7, sp, #0
    3a0a:	6078      	str	r0, [r7, #4]
    3a0c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    3a0e:	6839      	ldr	r1, [r7, #0]
    3a10:	6878      	ldr	r0, [r7, #4]
    3a12:	4b03      	ldr	r3, [pc, #12]	; (3a20 <gpio_set_pin_function+0x1c>)
    3a14:	4798      	blx	r3
}
    3a16:	bf00      	nop
    3a18:	3708      	adds	r7, #8
    3a1a:	46bd      	mov	sp, r7
    3a1c:	bd80      	pop	{r7, pc}
    3a1e:	bf00      	nop
    3a20:	0000394d 	.word	0x0000394d

00003a24 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    3a24:	b580      	push	{r7, lr}
    3a26:	b082      	sub	sp, #8
    3a28:	af00      	add	r7, sp, #0
    3a2a:	4603      	mov	r3, r0
    3a2c:	460a      	mov	r2, r1
    3a2e:	71fb      	strb	r3, [r7, #7]
    3a30:	4613      	mov	r3, r2
    3a32:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    3a34:	79fb      	ldrb	r3, [r7, #7]
    3a36:	095b      	lsrs	r3, r3, #5
    3a38:	b2d8      	uxtb	r0, r3
    3a3a:	79fb      	ldrb	r3, [r7, #7]
    3a3c:	f003 031f 	and.w	r3, r3, #31
    3a40:	2201      	movs	r2, #1
    3a42:	fa02 f303 	lsl.w	r3, r2, r3
    3a46:	79ba      	ldrb	r2, [r7, #6]
    3a48:	4619      	mov	r1, r3
    3a4a:	4b03      	ldr	r3, [pc, #12]	; (3a58 <gpio_set_pin_direction+0x34>)
    3a4c:	4798      	blx	r3
}
    3a4e:	bf00      	nop
    3a50:	3708      	adds	r7, #8
    3a52:	46bd      	mov	sp, r7
    3a54:	bd80      	pop	{r7, pc}
    3a56:	bf00      	nop
    3a58:	00003761 	.word	0x00003761

00003a5c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    3a5c:	b580      	push	{r7, lr}
    3a5e:	b082      	sub	sp, #8
    3a60:	af00      	add	r7, sp, #0
    3a62:	4603      	mov	r3, r0
    3a64:	460a      	mov	r2, r1
    3a66:	71fb      	strb	r3, [r7, #7]
    3a68:	4613      	mov	r3, r2
    3a6a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3a6c:	79fb      	ldrb	r3, [r7, #7]
    3a6e:	095b      	lsrs	r3, r3, #5
    3a70:	b2d8      	uxtb	r0, r3
    3a72:	79fb      	ldrb	r3, [r7, #7]
    3a74:	f003 031f 	and.w	r3, r3, #31
    3a78:	2201      	movs	r2, #1
    3a7a:	fa02 f303 	lsl.w	r3, r2, r3
    3a7e:	79ba      	ldrb	r2, [r7, #6]
    3a80:	4619      	mov	r1, r3
    3a82:	4b03      	ldr	r3, [pc, #12]	; (3a90 <gpio_set_pin_level+0x34>)
    3a84:	4798      	blx	r3
}
    3a86:	bf00      	nop
    3a88:	3708      	adds	r7, #8
    3a8a:	46bd      	mov	sp, r7
    3a8c:	bd80      	pop	{r7, pc}
    3a8e:	bf00      	nop
    3a90:	00003849 	.word	0x00003849

00003a94 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    3a94:	b580      	push	{r7, lr}
    3a96:	af00      	add	r7, sp, #0
	_init_chip();
    3a98:	4b01      	ldr	r3, [pc, #4]	; (3aa0 <init_mcu+0xc>)
    3a9a:	4798      	blx	r3
}
    3a9c:	bf00      	nop
    3a9e:	bd80      	pop	{r7, pc}
    3aa0:	00007599 	.word	0x00007599

00003aa4 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    3aa4:	b580      	push	{r7, lr}
    3aa6:	b082      	sub	sp, #8
    3aa8:	af00      	add	r7, sp, #0
    3aaa:	6078      	str	r0, [r7, #4]
    3aac:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    3aae:	687b      	ldr	r3, [r7, #4]
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d004      	beq.n	3abe <wdt_init+0x1a>
    3ab4:	683b      	ldr	r3, [r7, #0]
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d001      	beq.n	3abe <wdt_init+0x1a>
    3aba:	2301      	movs	r3, #1
    3abc:	e000      	b.n	3ac0 <wdt_init+0x1c>
    3abe:	2300      	movs	r3, #0
    3ac0:	f003 0301 	and.w	r3, r3, #1
    3ac4:	b2db      	uxtb	r3, r3
    3ac6:	2248      	movs	r2, #72	; 0x48
    3ac8:	4907      	ldr	r1, [pc, #28]	; (3ae8 <wdt_init+0x44>)
    3aca:	4618      	mov	r0, r3
    3acc:	4b07      	ldr	r3, [pc, #28]	; (3aec <wdt_init+0x48>)
    3ace:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    3ad0:	687b      	ldr	r3, [r7, #4]
    3ad2:	683a      	ldr	r2, [r7, #0]
    3ad4:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    3ad6:	687b      	ldr	r3, [r7, #4]
    3ad8:	4618      	mov	r0, r3
    3ada:	4b05      	ldr	r3, [pc, #20]	; (3af0 <wdt_init+0x4c>)
    3adc:	4798      	blx	r3
    3ade:	4603      	mov	r3, r0
}
    3ae0:	4618      	mov	r0, r3
    3ae2:	3708      	adds	r7, #8
    3ae4:	46bd      	mov	sp, r7
    3ae6:	bd80      	pop	{r7, pc}
    3ae8:	0001cf4c 	.word	0x0001cf4c
    3aec:	00006991 	.word	0x00006991
    3af0:	0000e93d 	.word	0x0000e93d

00003af4 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    3af4:	b580      	push	{r7, lr}
    3af6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    3af8:	4804      	ldr	r0, [pc, #16]	; (3b0c <CRC_CALC_init+0x18>)
    3afa:	4b05      	ldr	r3, [pc, #20]	; (3b10 <CRC_CALC_init+0x1c>)
    3afc:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    3afe:	4905      	ldr	r1, [pc, #20]	; (3b14 <CRC_CALC_init+0x20>)
    3b00:	4805      	ldr	r0, [pc, #20]	; (3b18 <CRC_CALC_init+0x24>)
    3b02:	4b06      	ldr	r3, [pc, #24]	; (3b1c <CRC_CALC_init+0x28>)
    3b04:	4798      	blx	r3
}
    3b06:	bf00      	nop
    3b08:	bd80      	pop	{r7, pc}
    3b0a:	bf00      	nop
    3b0c:	40000800 	.word	0x40000800
    3b10:	00003357 	.word	0x00003357
    3b14:	41002000 	.word	0x41002000
    3b18:	20005800 	.word	0x20005800
    3b1c:	00004d01 	.word	0x00004d01

00003b20 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    3b20:	b580      	push	{r7, lr}
    3b22:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b24:	2244      	movs	r2, #68	; 0x44
    3b26:	2104      	movs	r1, #4
    3b28:	4825      	ldr	r0, [pc, #148]	; (3bc0 <EXTERNAL_IRQ_0_init+0xa0>)
    3b2a:	4b26      	ldr	r3, [pc, #152]	; (3bc4 <EXTERNAL_IRQ_0_init+0xa4>)
    3b2c:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    3b2e:	4826      	ldr	r0, [pc, #152]	; (3bc8 <EXTERNAL_IRQ_0_init+0xa8>)
    3b30:	4b26      	ldr	r3, [pc, #152]	; (3bcc <EXTERNAL_IRQ_0_init+0xac>)
    3b32:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    3b34:	2101      	movs	r1, #1
    3b36:	2040      	movs	r0, #64	; 0x40
    3b38:	4b25      	ldr	r3, [pc, #148]	; (3bd0 <EXTERNAL_IRQ_0_init+0xb0>)
    3b3a:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    3b3c:	2100      	movs	r1, #0
    3b3e:	2040      	movs	r0, #64	; 0x40
    3b40:	4b24      	ldr	r3, [pc, #144]	; (3bd4 <EXTERNAL_IRQ_0_init+0xb4>)
    3b42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    3b44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    3b48:	2040      	movs	r0, #64	; 0x40
    3b4a:	4b23      	ldr	r3, [pc, #140]	; (3bd8 <EXTERNAL_IRQ_0_init+0xb8>)
    3b4c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    3b4e:	2101      	movs	r1, #1
    3b50:	2004      	movs	r0, #4
    3b52:	4b1f      	ldr	r3, [pc, #124]	; (3bd0 <EXTERNAL_IRQ_0_init+0xb0>)
    3b54:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    3b56:	2102      	movs	r1, #2
    3b58:	2004      	movs	r0, #4
    3b5a:	4b1e      	ldr	r3, [pc, #120]	; (3bd4 <EXTERNAL_IRQ_0_init+0xb4>)
    3b5c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    3b5e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    3b62:	2004      	movs	r0, #4
    3b64:	4b1c      	ldr	r3, [pc, #112]	; (3bd8 <EXTERNAL_IRQ_0_init+0xb8>)
    3b66:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    3b68:	2101      	movs	r1, #1
    3b6a:	2005      	movs	r0, #5
    3b6c:	4b18      	ldr	r3, [pc, #96]	; (3bd0 <EXTERNAL_IRQ_0_init+0xb0>)
    3b6e:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    3b70:	2102      	movs	r1, #2
    3b72:	2005      	movs	r0, #5
    3b74:	4b17      	ldr	r3, [pc, #92]	; (3bd4 <EXTERNAL_IRQ_0_init+0xb4>)
    3b76:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    3b78:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    3b7c:	2005      	movs	r0, #5
    3b7e:	4b16      	ldr	r3, [pc, #88]	; (3bd8 <EXTERNAL_IRQ_0_init+0xb8>)
    3b80:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    3b82:	2101      	movs	r1, #1
    3b84:	2056      	movs	r0, #86	; 0x56
    3b86:	4b12      	ldr	r3, [pc, #72]	; (3bd0 <EXTERNAL_IRQ_0_init+0xb0>)
    3b88:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    3b8a:	2102      	movs	r1, #2
    3b8c:	2056      	movs	r0, #86	; 0x56
    3b8e:	4b11      	ldr	r3, [pc, #68]	; (3bd4 <EXTERNAL_IRQ_0_init+0xb4>)
    3b90:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    3b92:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    3b96:	2056      	movs	r0, #86	; 0x56
    3b98:	4b0f      	ldr	r3, [pc, #60]	; (3bd8 <EXTERNAL_IRQ_0_init+0xb8>)
    3b9a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    3b9c:	2101      	movs	r1, #1
    3b9e:	2057      	movs	r0, #87	; 0x57
    3ba0:	4b0b      	ldr	r3, [pc, #44]	; (3bd0 <EXTERNAL_IRQ_0_init+0xb0>)
    3ba2:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    3ba4:	2102      	movs	r1, #2
    3ba6:	2057      	movs	r0, #87	; 0x57
    3ba8:	4b0a      	ldr	r3, [pc, #40]	; (3bd4 <EXTERNAL_IRQ_0_init+0xb4>)
    3baa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    3bac:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    3bb0:	2057      	movs	r0, #87	; 0x57
    3bb2:	4b09      	ldr	r3, [pc, #36]	; (3bd8 <EXTERNAL_IRQ_0_init+0xb8>)
    3bb4:	4798      	blx	r3

	ext_irq_init();
    3bb6:	4b09      	ldr	r3, [pc, #36]	; (3bdc <EXTERNAL_IRQ_0_init+0xbc>)
    3bb8:	4798      	blx	r3
}
    3bba:	bf00      	nop
    3bbc:	bd80      	pop	{r7, pc}
    3bbe:	bf00      	nop
    3bc0:	40001c00 	.word	0x40001c00
    3bc4:	000031d1 	.word	0x000031d1
    3bc8:	40000800 	.word	0x40000800
    3bcc:	000032b7 	.word	0x000032b7
    3bd0:	00003a25 	.word	0x00003a25
    3bd4:	000039d1 	.word	0x000039d1
    3bd8:	00003a05 	.word	0x00003a05
    3bdc:	00004e65 	.word	0x00004e65

00003be0 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    3be0:	b580      	push	{r7, lr}
    3be2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3be4:	2244      	movs	r2, #68	; 0x44
    3be6:	210b      	movs	r1, #11
    3be8:	4804      	ldr	r0, [pc, #16]	; (3bfc <EVENT_SYSTEM_0_init+0x1c>)
    3bea:	4b05      	ldr	r3, [pc, #20]	; (3c00 <EVENT_SYSTEM_0_init+0x20>)
    3bec:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    3bee:	4805      	ldr	r0, [pc, #20]	; (3c04 <EVENT_SYSTEM_0_init+0x24>)
    3bf0:	4b05      	ldr	r3, [pc, #20]	; (3c08 <EVENT_SYSTEM_0_init+0x28>)
    3bf2:	4798      	blx	r3

	event_system_init();
    3bf4:	4b05      	ldr	r3, [pc, #20]	; (3c0c <EVENT_SYSTEM_0_init+0x2c>)
    3bf6:	4798      	blx	r3
}
    3bf8:	bf00      	nop
    3bfa:	bd80      	pop	{r7, pc}
    3bfc:	40001c00 	.word	0x40001c00
    3c00:	000031d1 	.word	0x000031d1
    3c04:	40000800 	.word	0x40000800
    3c08:	00003377 	.word	0x00003377
    3c0c:	00004e51 	.word	0x00004e51

00003c10 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    3c10:	b580      	push	{r7, lr}
    3c12:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    3c14:	2101      	movs	r1, #1
    3c16:	202b      	movs	r0, #43	; 0x2b
    3c18:	4b2b      	ldr	r3, [pc, #172]	; (3cc8 <QSPI_N25Q256_PORT_init+0xb8>)
    3c1a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    3c1c:	2100      	movs	r1, #0
    3c1e:	202b      	movs	r0, #43	; 0x2b
    3c20:	4b2a      	ldr	r3, [pc, #168]	; (3ccc <QSPI_N25Q256_PORT_init+0xbc>)
    3c22:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    3c24:	492a      	ldr	r1, [pc, #168]	; (3cd0 <QSPI_N25Q256_PORT_init+0xc0>)
    3c26:	202b      	movs	r0, #43	; 0x2b
    3c28:	4b2a      	ldr	r3, [pc, #168]	; (3cd4 <QSPI_N25Q256_PORT_init+0xc4>)
    3c2a:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    3c2c:	2102      	movs	r1, #2
    3c2e:	2008      	movs	r0, #8
    3c30:	4b25      	ldr	r3, [pc, #148]	; (3cc8 <QSPI_N25Q256_PORT_init+0xb8>)
    3c32:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    3c34:	2100      	movs	r1, #0
    3c36:	2008      	movs	r0, #8
    3c38:	4b27      	ldr	r3, [pc, #156]	; (3cd8 <QSPI_N25Q256_PORT_init+0xc8>)
    3c3a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    3c3c:	2100      	movs	r1, #0
    3c3e:	2008      	movs	r0, #8
    3c40:	4b22      	ldr	r3, [pc, #136]	; (3ccc <QSPI_N25Q256_PORT_init+0xbc>)
    3c42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    3c44:	4925      	ldr	r1, [pc, #148]	; (3cdc <QSPI_N25Q256_PORT_init+0xcc>)
    3c46:	2008      	movs	r0, #8
    3c48:	4b22      	ldr	r3, [pc, #136]	; (3cd4 <QSPI_N25Q256_PORT_init+0xc4>)
    3c4a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    3c4c:	2102      	movs	r1, #2
    3c4e:	2009      	movs	r0, #9
    3c50:	4b1d      	ldr	r3, [pc, #116]	; (3cc8 <QSPI_N25Q256_PORT_init+0xb8>)
    3c52:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    3c54:	2100      	movs	r1, #0
    3c56:	2009      	movs	r0, #9
    3c58:	4b1f      	ldr	r3, [pc, #124]	; (3cd8 <QSPI_N25Q256_PORT_init+0xc8>)
    3c5a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    3c5c:	2100      	movs	r1, #0
    3c5e:	2009      	movs	r0, #9
    3c60:	4b1a      	ldr	r3, [pc, #104]	; (3ccc <QSPI_N25Q256_PORT_init+0xbc>)
    3c62:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    3c64:	491e      	ldr	r1, [pc, #120]	; (3ce0 <QSPI_N25Q256_PORT_init+0xd0>)
    3c66:	2009      	movs	r0, #9
    3c68:	4b1a      	ldr	r3, [pc, #104]	; (3cd4 <QSPI_N25Q256_PORT_init+0xc4>)
    3c6a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    3c6c:	2102      	movs	r1, #2
    3c6e:	200a      	movs	r0, #10
    3c70:	4b15      	ldr	r3, [pc, #84]	; (3cc8 <QSPI_N25Q256_PORT_init+0xb8>)
    3c72:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    3c74:	2100      	movs	r1, #0
    3c76:	200a      	movs	r0, #10
    3c78:	4b17      	ldr	r3, [pc, #92]	; (3cd8 <QSPI_N25Q256_PORT_init+0xc8>)
    3c7a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    3c7c:	2100      	movs	r1, #0
    3c7e:	200a      	movs	r0, #10
    3c80:	4b12      	ldr	r3, [pc, #72]	; (3ccc <QSPI_N25Q256_PORT_init+0xbc>)
    3c82:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    3c84:	4917      	ldr	r1, [pc, #92]	; (3ce4 <QSPI_N25Q256_PORT_init+0xd4>)
    3c86:	200a      	movs	r0, #10
    3c88:	4b12      	ldr	r3, [pc, #72]	; (3cd4 <QSPI_N25Q256_PORT_init+0xc4>)
    3c8a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    3c8c:	2102      	movs	r1, #2
    3c8e:	200b      	movs	r0, #11
    3c90:	4b0d      	ldr	r3, [pc, #52]	; (3cc8 <QSPI_N25Q256_PORT_init+0xb8>)
    3c92:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    3c94:	2100      	movs	r1, #0
    3c96:	200b      	movs	r0, #11
    3c98:	4b0f      	ldr	r3, [pc, #60]	; (3cd8 <QSPI_N25Q256_PORT_init+0xc8>)
    3c9a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    3c9c:	2100      	movs	r1, #0
    3c9e:	200b      	movs	r0, #11
    3ca0:	4b0a      	ldr	r3, [pc, #40]	; (3ccc <QSPI_N25Q256_PORT_init+0xbc>)
    3ca2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    3ca4:	4910      	ldr	r1, [pc, #64]	; (3ce8 <QSPI_N25Q256_PORT_init+0xd8>)
    3ca6:	200b      	movs	r0, #11
    3ca8:	4b0a      	ldr	r3, [pc, #40]	; (3cd4 <QSPI_N25Q256_PORT_init+0xc4>)
    3caa:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    3cac:	2101      	movs	r1, #1
    3cae:	202a      	movs	r0, #42	; 0x2a
    3cb0:	4b05      	ldr	r3, [pc, #20]	; (3cc8 <QSPI_N25Q256_PORT_init+0xb8>)
    3cb2:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    3cb4:	2100      	movs	r1, #0
    3cb6:	202a      	movs	r0, #42	; 0x2a
    3cb8:	4b04      	ldr	r3, [pc, #16]	; (3ccc <QSPI_N25Q256_PORT_init+0xbc>)
    3cba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    3cbc:	490b      	ldr	r1, [pc, #44]	; (3cec <QSPI_N25Q256_PORT_init+0xdc>)
    3cbe:	202a      	movs	r0, #42	; 0x2a
    3cc0:	4b04      	ldr	r3, [pc, #16]	; (3cd4 <QSPI_N25Q256_PORT_init+0xc4>)
    3cc2:	4798      	blx	r3
}
    3cc4:	bf00      	nop
    3cc6:	bd80      	pop	{r7, pc}
    3cc8:	00003a25 	.word	0x00003a25
    3ccc:	000039d1 	.word	0x000039d1
    3cd0:	002b0007 	.word	0x002b0007
    3cd4:	00003a05 	.word	0x00003a05
    3cd8:	00003a5d 	.word	0x00003a5d
    3cdc:	00080007 	.word	0x00080007
    3ce0:	00090007 	.word	0x00090007
    3ce4:	000a0007 	.word	0x000a0007
    3ce8:	000b0007 	.word	0x000b0007
    3cec:	002a0007 	.word	0x002a0007

00003cf0 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    3cf0:	b580      	push	{r7, lr}
    3cf2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    3cf4:	4805      	ldr	r0, [pc, #20]	; (3d0c <QSPI_N25Q256_CLOCK_init+0x1c>)
    3cf6:	4b06      	ldr	r3, [pc, #24]	; (3d10 <QSPI_N25Q256_CLOCK_init+0x20>)
    3cf8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    3cfa:	4804      	ldr	r0, [pc, #16]	; (3d0c <QSPI_N25Q256_CLOCK_init+0x1c>)
    3cfc:	4b05      	ldr	r3, [pc, #20]	; (3d14 <QSPI_N25Q256_CLOCK_init+0x24>)
    3cfe:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    3d00:	4802      	ldr	r0, [pc, #8]	; (3d0c <QSPI_N25Q256_CLOCK_init+0x1c>)
    3d02:	4b05      	ldr	r3, [pc, #20]	; (3d18 <QSPI_N25Q256_CLOCK_init+0x28>)
    3d04:	4798      	blx	r3
}
    3d06:	bf00      	nop
    3d08:	bd80      	pop	{r7, pc}
    3d0a:	bf00      	nop
    3d0c:	40000800 	.word	0x40000800
    3d10:	00003217 	.word	0x00003217
    3d14:	00003257 	.word	0x00003257
    3d18:	00003437 	.word	0x00003437

00003d1c <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    3d1c:	b580      	push	{r7, lr}
    3d1e:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    3d20:	4b04      	ldr	r3, [pc, #16]	; (3d34 <QSPI_N25Q256_init+0x18>)
    3d22:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    3d24:	4904      	ldr	r1, [pc, #16]	; (3d38 <QSPI_N25Q256_init+0x1c>)
    3d26:	4805      	ldr	r0, [pc, #20]	; (3d3c <QSPI_N25Q256_init+0x20>)
    3d28:	4b05      	ldr	r3, [pc, #20]	; (3d40 <QSPI_N25Q256_init+0x24>)
    3d2a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    3d2c:	4b05      	ldr	r3, [pc, #20]	; (3d44 <QSPI_N25Q256_init+0x28>)
    3d2e:	4798      	blx	r3
}
    3d30:	bf00      	nop
    3d32:	bd80      	pop	{r7, pc}
    3d34:	00003cf1 	.word	0x00003cf1
    3d38:	42003400 	.word	0x42003400
    3d3c:	20005668 	.word	0x20005668
    3d40:	0000546d 	.word	0x0000546d
    3d44:	00003c11 	.word	0x00003c11

00003d48 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    3d48:	b580      	push	{r7, lr}
    3d4a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    3d4c:	4802      	ldr	r0, [pc, #8]	; (3d58 <DATETIME_CLOCK_CLOCK_init+0x10>)
    3d4e:	4b03      	ldr	r3, [pc, #12]	; (3d5c <DATETIME_CLOCK_CLOCK_init+0x14>)
    3d50:	4798      	blx	r3
}
    3d52:	bf00      	nop
    3d54:	bd80      	pop	{r7, pc}
    3d56:	bf00      	nop
    3d58:	40000800 	.word	0x40000800
    3d5c:	00003297 	.word	0x00003297

00003d60 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    3d60:	b580      	push	{r7, lr}
    3d62:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    3d64:	4b03      	ldr	r3, [pc, #12]	; (3d74 <DATETIME_CLOCK_init+0x14>)
    3d66:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    3d68:	4903      	ldr	r1, [pc, #12]	; (3d78 <DATETIME_CLOCK_init+0x18>)
    3d6a:	4804      	ldr	r0, [pc, #16]	; (3d7c <DATETIME_CLOCK_init+0x1c>)
    3d6c:	4b04      	ldr	r3, [pc, #16]	; (3d80 <DATETIME_CLOCK_init+0x20>)
    3d6e:	4798      	blx	r3
}
    3d70:	bf00      	nop
    3d72:	bd80      	pop	{r7, pc}
    3d74:	00003d49 	.word	0x00003d49
    3d78:	40002400 	.word	0x40002400
    3d7c:	200057dc 	.word	0x200057dc
    3d80:	00004a05 	.word	0x00004a05

00003d84 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    3d84:	b580      	push	{r7, lr}
    3d86:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    3d88:	2100      	movs	r1, #0
    3d8a:	2010      	movs	r0, #16
    3d8c:	4b11      	ldr	r3, [pc, #68]	; (3dd4 <SPI_MEMORIES_PORT_init+0x50>)
    3d8e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    3d90:	2102      	movs	r1, #2
    3d92:	2010      	movs	r0, #16
    3d94:	4b10      	ldr	r3, [pc, #64]	; (3dd8 <SPI_MEMORIES_PORT_init+0x54>)
    3d96:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    3d98:	4910      	ldr	r1, [pc, #64]	; (3ddc <SPI_MEMORIES_PORT_init+0x58>)
    3d9a:	2010      	movs	r0, #16
    3d9c:	4b10      	ldr	r3, [pc, #64]	; (3de0 <SPI_MEMORIES_PORT_init+0x5c>)
    3d9e:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    3da0:	2100      	movs	r1, #0
    3da2:	2011      	movs	r0, #17
    3da4:	4b0b      	ldr	r3, [pc, #44]	; (3dd4 <SPI_MEMORIES_PORT_init+0x50>)
    3da6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    3da8:	2102      	movs	r1, #2
    3daa:	2011      	movs	r0, #17
    3dac:	4b0a      	ldr	r3, [pc, #40]	; (3dd8 <SPI_MEMORIES_PORT_init+0x54>)
    3dae:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    3db0:	490c      	ldr	r1, [pc, #48]	; (3de4 <SPI_MEMORIES_PORT_init+0x60>)
    3db2:	2011      	movs	r0, #17
    3db4:	4b0a      	ldr	r3, [pc, #40]	; (3de0 <SPI_MEMORIES_PORT_init+0x5c>)
    3db6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    3db8:	2101      	movs	r1, #1
    3dba:	2012      	movs	r0, #18
    3dbc:	4b06      	ldr	r3, [pc, #24]	; (3dd8 <SPI_MEMORIES_PORT_init+0x54>)
    3dbe:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    3dc0:	2100      	movs	r1, #0
    3dc2:	2012      	movs	r0, #18
    3dc4:	4b08      	ldr	r3, [pc, #32]	; (3de8 <SPI_MEMORIES_PORT_init+0x64>)
    3dc6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    3dc8:	4908      	ldr	r1, [pc, #32]	; (3dec <SPI_MEMORIES_PORT_init+0x68>)
    3dca:	2012      	movs	r0, #18
    3dcc:	4b04      	ldr	r3, [pc, #16]	; (3de0 <SPI_MEMORIES_PORT_init+0x5c>)
    3dce:	4798      	blx	r3
}
    3dd0:	bf00      	nop
    3dd2:	bd80      	pop	{r7, pc}
    3dd4:	00003a5d 	.word	0x00003a5d
    3dd8:	00003a25 	.word	0x00003a25
    3ddc:	00100002 	.word	0x00100002
    3de0:	00003a05 	.word	0x00003a05
    3de4:	00110002 	.word	0x00110002
    3de8:	000039d1 	.word	0x000039d1
    3dec:	00120002 	.word	0x00120002

00003df0 <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    3df0:	b580      	push	{r7, lr}
    3df2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3df4:	2245      	movs	r2, #69	; 0x45
    3df6:	2108      	movs	r1, #8
    3df8:	4806      	ldr	r0, [pc, #24]	; (3e14 <SPI_MEMORIES_CLOCK_init+0x24>)
    3dfa:	4b07      	ldr	r3, [pc, #28]	; (3e18 <SPI_MEMORIES_CLOCK_init+0x28>)
    3dfc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3dfe:	224a      	movs	r2, #74	; 0x4a
    3e00:	2103      	movs	r1, #3
    3e02:	4804      	ldr	r0, [pc, #16]	; (3e14 <SPI_MEMORIES_CLOCK_init+0x24>)
    3e04:	4b04      	ldr	r3, [pc, #16]	; (3e18 <SPI_MEMORIES_CLOCK_init+0x28>)
    3e06:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    3e08:	4804      	ldr	r0, [pc, #16]	; (3e1c <SPI_MEMORIES_CLOCK_init+0x2c>)
    3e0a:	4b05      	ldr	r3, [pc, #20]	; (3e20 <SPI_MEMORIES_CLOCK_init+0x30>)
    3e0c:	4798      	blx	r3
}
    3e0e:	bf00      	nop
    3e10:	bd80      	pop	{r7, pc}
    3e12:	bf00      	nop
    3e14:	40001c00 	.word	0x40001c00
    3e18:	000031d1 	.word	0x000031d1
    3e1c:	40000800 	.word	0x40000800
    3e20:	000032d7 	.word	0x000032d7

00003e24 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    3e24:	b580      	push	{r7, lr}
    3e26:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    3e28:	4b04      	ldr	r3, [pc, #16]	; (3e3c <SPI_MEMORIES_init+0x18>)
    3e2a:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    3e2c:	4904      	ldr	r1, [pc, #16]	; (3e40 <SPI_MEMORIES_init+0x1c>)
    3e2e:	4805      	ldr	r0, [pc, #20]	; (3e44 <SPI_MEMORIES_init+0x20>)
    3e30:	4b05      	ldr	r3, [pc, #20]	; (3e48 <SPI_MEMORIES_init+0x24>)
    3e32:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    3e34:	4b05      	ldr	r3, [pc, #20]	; (3e4c <SPI_MEMORIES_init+0x28>)
    3e36:	4798      	blx	r3
}
    3e38:	bf00      	nop
    3e3a:	bd80      	pop	{r7, pc}
    3e3c:	00003df1 	.word	0x00003df1
    3e40:	40003400 	.word	0x40003400
    3e44:	200055d4 	.word	0x200055d4
    3e48:	00005949 	.word	0x00005949
    3e4c:	00003d85 	.word	0x00003d85

00003e50 <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    3e50:	b580      	push	{r7, lr}
    3e52:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA12,
    3e54:	2100      	movs	r1, #0
    3e56:	200c      	movs	r0, #12
    3e58:	4b07      	ldr	r3, [pc, #28]	; (3e78 <I2C_SHARED_PORT_init+0x28>)
    3e5a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);
    3e5c:	4907      	ldr	r1, [pc, #28]	; (3e7c <I2C_SHARED_PORT_init+0x2c>)
    3e5e:	200c      	movs	r0, #12
    3e60:	4b07      	ldr	r3, [pc, #28]	; (3e80 <I2C_SHARED_PORT_init+0x30>)
    3e62:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA13,
    3e64:	2100      	movs	r1, #0
    3e66:	200d      	movs	r0, #13
    3e68:	4b03      	ldr	r3, [pc, #12]	; (3e78 <I2C_SHARED_PORT_init+0x28>)
    3e6a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
    3e6c:	4905      	ldr	r1, [pc, #20]	; (3e84 <I2C_SHARED_PORT_init+0x34>)
    3e6e:	200d      	movs	r0, #13
    3e70:	4b03      	ldr	r3, [pc, #12]	; (3e80 <I2C_SHARED_PORT_init+0x30>)
    3e72:	4798      	blx	r3
}
    3e74:	bf00      	nop
    3e76:	bd80      	pop	{r7, pc}
    3e78:	000039d1 	.word	0x000039d1
    3e7c:	000c0002 	.word	0x000c0002
    3e80:	00003a05 	.word	0x00003a05
    3e84:	000d0002 	.word	0x000d0002

00003e88 <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    3e88:	b580      	push	{r7, lr}
    3e8a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3e8c:	2242      	movs	r2, #66	; 0x42
    3e8e:	2117      	movs	r1, #23
    3e90:	4806      	ldr	r0, [pc, #24]	; (3eac <I2C_SHARED_CLOCK_init+0x24>)
    3e92:	4b07      	ldr	r3, [pc, #28]	; (3eb0 <I2C_SHARED_CLOCK_init+0x28>)
    3e94:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3e96:	224a      	movs	r2, #74	; 0x4a
    3e98:	2103      	movs	r1, #3
    3e9a:	4804      	ldr	r0, [pc, #16]	; (3eac <I2C_SHARED_CLOCK_init+0x24>)
    3e9c:	4b04      	ldr	r3, [pc, #16]	; (3eb0 <I2C_SHARED_CLOCK_init+0x28>)
    3e9e:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
    3ea0:	4804      	ldr	r0, [pc, #16]	; (3eb4 <I2C_SHARED_CLOCK_init+0x2c>)
    3ea2:	4b05      	ldr	r3, [pc, #20]	; (3eb8 <I2C_SHARED_CLOCK_init+0x30>)
    3ea4:	4798      	blx	r3
}
    3ea6:	bf00      	nop
    3ea8:	bd80      	pop	{r7, pc}
    3eaa:	bf00      	nop
    3eac:	40001c00 	.word	0x40001c00
    3eb0:	000031d1 	.word	0x000031d1
    3eb4:	40000800 	.word	0x40000800
    3eb8:	00003397 	.word	0x00003397

00003ebc <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    3ebc:	b580      	push	{r7, lr}
    3ebe:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    3ec0:	4b04      	ldr	r3, [pc, #16]	; (3ed4 <I2C_SHARED_init+0x18>)
    3ec2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM2);
    3ec4:	4904      	ldr	r1, [pc, #16]	; (3ed8 <I2C_SHARED_init+0x1c>)
    3ec6:	4805      	ldr	r0, [pc, #20]	; (3edc <I2C_SHARED_init+0x20>)
    3ec8:	4b05      	ldr	r3, [pc, #20]	; (3ee0 <I2C_SHARED_init+0x24>)
    3eca:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    3ecc:	4b05      	ldr	r3, [pc, #20]	; (3ee4 <I2C_SHARED_init+0x28>)
    3ece:	4798      	blx	r3
}
    3ed0:	bf00      	nop
    3ed2:	bd80      	pop	{r7, pc}
    3ed4:	00003e89 	.word	0x00003e89
    3ed8:	41012000 	.word	0x41012000
    3edc:	20005760 	.word	0x20005760
    3ee0:	0000efb5 	.word	0x0000efb5
    3ee4:	00003e51 	.word	0x00003e51

00003ee8 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    3eec:	2100      	movs	r1, #0
    3eee:	203b      	movs	r0, #59	; 0x3b
    3ef0:	4b11      	ldr	r3, [pc, #68]	; (3f38 <SPI_TEMP_PORT_init+0x50>)
    3ef2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    3ef4:	2102      	movs	r1, #2
    3ef6:	203b      	movs	r0, #59	; 0x3b
    3ef8:	4b10      	ldr	r3, [pc, #64]	; (3f3c <SPI_TEMP_PORT_init+0x54>)
    3efa:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    3efc:	4910      	ldr	r1, [pc, #64]	; (3f40 <SPI_TEMP_PORT_init+0x58>)
    3efe:	203b      	movs	r0, #59	; 0x3b
    3f00:	4b10      	ldr	r3, [pc, #64]	; (3f44 <SPI_TEMP_PORT_init+0x5c>)
    3f02:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    3f04:	2100      	movs	r1, #0
    3f06:	203a      	movs	r0, #58	; 0x3a
    3f08:	4b0b      	ldr	r3, [pc, #44]	; (3f38 <SPI_TEMP_PORT_init+0x50>)
    3f0a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    3f0c:	2102      	movs	r1, #2
    3f0e:	203a      	movs	r0, #58	; 0x3a
    3f10:	4b0a      	ldr	r3, [pc, #40]	; (3f3c <SPI_TEMP_PORT_init+0x54>)
    3f12:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    3f14:	490c      	ldr	r1, [pc, #48]	; (3f48 <SPI_TEMP_PORT_init+0x60>)
    3f16:	203a      	movs	r0, #58	; 0x3a
    3f18:	4b0a      	ldr	r3, [pc, #40]	; (3f44 <SPI_TEMP_PORT_init+0x5c>)
    3f1a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    3f1c:	2101      	movs	r1, #1
    3f1e:	203c      	movs	r0, #60	; 0x3c
    3f20:	4b06      	ldr	r3, [pc, #24]	; (3f3c <SPI_TEMP_PORT_init+0x54>)
    3f22:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    3f24:	2100      	movs	r1, #0
    3f26:	203c      	movs	r0, #60	; 0x3c
    3f28:	4b08      	ldr	r3, [pc, #32]	; (3f4c <SPI_TEMP_PORT_init+0x64>)
    3f2a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    3f2c:	4908      	ldr	r1, [pc, #32]	; (3f50 <SPI_TEMP_PORT_init+0x68>)
    3f2e:	203c      	movs	r0, #60	; 0x3c
    3f30:	4b04      	ldr	r3, [pc, #16]	; (3f44 <SPI_TEMP_PORT_init+0x5c>)
    3f32:	4798      	blx	r3
}
    3f34:	bf00      	nop
    3f36:	bd80      	pop	{r7, pc}
    3f38:	00003a5d 	.word	0x00003a5d
    3f3c:	00003a25 	.word	0x00003a25
    3f40:	003b0003 	.word	0x003b0003
    3f44:	00003a05 	.word	0x00003a05
    3f48:	003a0003 	.word	0x003a0003
    3f4c:	000039d1 	.word	0x000039d1
    3f50:	003c0003 	.word	0x003c0003

00003f54 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    3f54:	b580      	push	{r7, lr}
    3f56:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3f58:	2242      	movs	r2, #66	; 0x42
    3f5a:	2122      	movs	r1, #34	; 0x22
    3f5c:	4806      	ldr	r0, [pc, #24]	; (3f78 <SPI_TEMP_CLOCK_init+0x24>)
    3f5e:	4b07      	ldr	r3, [pc, #28]	; (3f7c <SPI_TEMP_CLOCK_init+0x28>)
    3f60:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3f62:	224a      	movs	r2, #74	; 0x4a
    3f64:	2103      	movs	r1, #3
    3f66:	4804      	ldr	r0, [pc, #16]	; (3f78 <SPI_TEMP_CLOCK_init+0x24>)
    3f68:	4b04      	ldr	r3, [pc, #16]	; (3f7c <SPI_TEMP_CLOCK_init+0x28>)
    3f6a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    3f6c:	4804      	ldr	r0, [pc, #16]	; (3f80 <SPI_TEMP_CLOCK_init+0x2c>)
    3f6e:	4b05      	ldr	r3, [pc, #20]	; (3f84 <SPI_TEMP_CLOCK_init+0x30>)
    3f70:	4798      	blx	r3
}
    3f72:	bf00      	nop
    3f74:	bd80      	pop	{r7, pc}
    3f76:	bf00      	nop
    3f78:	40001c00 	.word	0x40001c00
    3f7c:	000031d1 	.word	0x000031d1
    3f80:	40000800 	.word	0x40000800
    3f84:	00003457 	.word	0x00003457

00003f88 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    3f88:	b580      	push	{r7, lr}
    3f8a:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    3f8c:	4b05      	ldr	r3, [pc, #20]	; (3fa4 <SPI_TEMP_init+0x1c>)
    3f8e:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    3f90:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    3f94:	4804      	ldr	r0, [pc, #16]	; (3fa8 <SPI_TEMP_init+0x20>)
    3f96:	4b05      	ldr	r3, [pc, #20]	; (3fac <SPI_TEMP_init+0x24>)
    3f98:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    3f9a:	4b05      	ldr	r3, [pc, #20]	; (3fb0 <SPI_TEMP_init+0x28>)
    3f9c:	4798      	blx	r3
}
    3f9e:	bf00      	nop
    3fa0:	bd80      	pop	{r7, pc}
    3fa2:	bf00      	nop
    3fa4:	00003f55 	.word	0x00003f55
    3fa8:	20005604 	.word	0x20005604
    3fac:	00005795 	.word	0x00005795
    3fb0:	00003ee9 	.word	0x00003ee9

00003fb4 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    3fb4:	b580      	push	{r7, lr}
    3fb6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    3fb8:	2100      	movs	r1, #0
    3fba:	2017      	movs	r0, #23
    3fbc:	4b07      	ldr	r3, [pc, #28]	; (3fdc <I2C_EXPANDER_PORT_init+0x28>)
    3fbe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    3fc0:	4907      	ldr	r1, [pc, #28]	; (3fe0 <I2C_EXPANDER_PORT_init+0x2c>)
    3fc2:	2017      	movs	r0, #23
    3fc4:	4b07      	ldr	r3, [pc, #28]	; (3fe4 <I2C_EXPANDER_PORT_init+0x30>)
    3fc6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    3fc8:	2100      	movs	r1, #0
    3fca:	2016      	movs	r0, #22
    3fcc:	4b03      	ldr	r3, [pc, #12]	; (3fdc <I2C_EXPANDER_PORT_init+0x28>)
    3fce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    3fd0:	4905      	ldr	r1, [pc, #20]	; (3fe8 <I2C_EXPANDER_PORT_init+0x34>)
    3fd2:	2016      	movs	r0, #22
    3fd4:	4b03      	ldr	r3, [pc, #12]	; (3fe4 <I2C_EXPANDER_PORT_init+0x30>)
    3fd6:	4798      	blx	r3
}
    3fd8:	bf00      	nop
    3fda:	bd80      	pop	{r7, pc}
    3fdc:	000039d1 	.word	0x000039d1
    3fe0:	00170003 	.word	0x00170003
    3fe4:	00003a05 	.word	0x00003a05
    3fe8:	00160003 	.word	0x00160003

00003fec <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    3fec:	b580      	push	{r7, lr}
    3fee:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3ff0:	2242      	movs	r2, #66	; 0x42
    3ff2:	2123      	movs	r1, #35	; 0x23
    3ff4:	4806      	ldr	r0, [pc, #24]	; (4010 <I2C_EXPANDER_CLOCK_init+0x24>)
    3ff6:	4b07      	ldr	r3, [pc, #28]	; (4014 <I2C_EXPANDER_CLOCK_init+0x28>)
    3ff8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3ffa:	2246      	movs	r2, #70	; 0x46
    3ffc:	2103      	movs	r1, #3
    3ffe:	4804      	ldr	r0, [pc, #16]	; (4010 <I2C_EXPANDER_CLOCK_init+0x24>)
    4000:	4b04      	ldr	r3, [pc, #16]	; (4014 <I2C_EXPANDER_CLOCK_init+0x28>)
    4002:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    4004:	4804      	ldr	r0, [pc, #16]	; (4018 <I2C_EXPANDER_CLOCK_init+0x2c>)
    4006:	4b05      	ldr	r3, [pc, #20]	; (401c <I2C_EXPANDER_CLOCK_init+0x30>)
    4008:	4798      	blx	r3
}
    400a:	bf00      	nop
    400c:	bd80      	pop	{r7, pc}
    400e:	bf00      	nop
    4010:	40001c00 	.word	0x40001c00
    4014:	000031d1 	.word	0x000031d1
    4018:	40000800 	.word	0x40000800
    401c:	00003477 	.word	0x00003477

00004020 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    4020:	b580      	push	{r7, lr}
    4022:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    4024:	4b04      	ldr	r3, [pc, #16]	; (4038 <I2C_EXPANDER_init+0x18>)
    4026:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    4028:	4904      	ldr	r1, [pc, #16]	; (403c <I2C_EXPANDER_init+0x1c>)
    402a:	4805      	ldr	r0, [pc, #20]	; (4040 <I2C_EXPANDER_init+0x20>)
    402c:	4b05      	ldr	r3, [pc, #20]	; (4044 <I2C_EXPANDER_init+0x24>)
    402e:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    4030:	4b05      	ldr	r3, [pc, #20]	; (4048 <I2C_EXPANDER_init+0x28>)
    4032:	4798      	blx	r3
}
    4034:	bf00      	nop
    4036:	bd80      	pop	{r7, pc}
    4038:	00003fed 	.word	0x00003fed
    403c:	43000400 	.word	0x43000400
    4040:	20005720 	.word	0x20005720
    4044:	000051c9 	.word	0x000051c9
    4048:	00003fb5 	.word	0x00003fb5

0000404c <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    404c:	b580      	push	{r7, lr}
    404e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    4050:	2100      	movs	r1, #0
    4052:	2044      	movs	r0, #68	; 0x44
    4054:	4b11      	ldr	r3, [pc, #68]	; (409c <SPI_HI3593_PORT_init+0x50>)
    4056:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    4058:	2102      	movs	r1, #2
    405a:	2044      	movs	r0, #68	; 0x44
    405c:	4b10      	ldr	r3, [pc, #64]	; (40a0 <SPI_HI3593_PORT_init+0x54>)
    405e:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    4060:	4910      	ldr	r1, [pc, #64]	; (40a4 <SPI_HI3593_PORT_init+0x58>)
    4062:	2044      	movs	r0, #68	; 0x44
    4064:	4b10      	ldr	r3, [pc, #64]	; (40a8 <SPI_HI3593_PORT_init+0x5c>)
    4066:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    4068:	2100      	movs	r1, #0
    406a:	2045      	movs	r0, #69	; 0x45
    406c:	4b0b      	ldr	r3, [pc, #44]	; (409c <SPI_HI3593_PORT_init+0x50>)
    406e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    4070:	2102      	movs	r1, #2
    4072:	2045      	movs	r0, #69	; 0x45
    4074:	4b0a      	ldr	r3, [pc, #40]	; (40a0 <SPI_HI3593_PORT_init+0x54>)
    4076:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    4078:	490c      	ldr	r1, [pc, #48]	; (40ac <SPI_HI3593_PORT_init+0x60>)
    407a:	2045      	movs	r0, #69	; 0x45
    407c:	4b0a      	ldr	r3, [pc, #40]	; (40a8 <SPI_HI3593_PORT_init+0x5c>)
    407e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    4080:	2101      	movs	r1, #1
    4082:	2047      	movs	r0, #71	; 0x47
    4084:	4b06      	ldr	r3, [pc, #24]	; (40a0 <SPI_HI3593_PORT_init+0x54>)
    4086:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    4088:	2100      	movs	r1, #0
    408a:	2047      	movs	r0, #71	; 0x47
    408c:	4b08      	ldr	r3, [pc, #32]	; (40b0 <SPI_HI3593_PORT_init+0x64>)
    408e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    4090:	4908      	ldr	r1, [pc, #32]	; (40b4 <SPI_HI3593_PORT_init+0x68>)
    4092:	2047      	movs	r0, #71	; 0x47
    4094:	4b04      	ldr	r3, [pc, #16]	; (40a8 <SPI_HI3593_PORT_init+0x5c>)
    4096:	4798      	blx	r3
}
    4098:	bf00      	nop
    409a:	bd80      	pop	{r7, pc}
    409c:	00003a5d 	.word	0x00003a5d
    40a0:	00003a25 	.word	0x00003a25
    40a4:	00440002 	.word	0x00440002
    40a8:	00003a05 	.word	0x00003a05
    40ac:	00450002 	.word	0x00450002
    40b0:	000039d1 	.word	0x000039d1
    40b4:	00470002 	.word	0x00470002

000040b8 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    40b8:	b580      	push	{r7, lr}
    40ba:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    40bc:	2242      	movs	r2, #66	; 0x42
    40be:	2124      	movs	r1, #36	; 0x24
    40c0:	4806      	ldr	r0, [pc, #24]	; (40dc <SPI_HI3593_CLOCK_init+0x24>)
    40c2:	4b07      	ldr	r3, [pc, #28]	; (40e0 <SPI_HI3593_CLOCK_init+0x28>)
    40c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    40c6:	224a      	movs	r2, #74	; 0x4a
    40c8:	2103      	movs	r1, #3
    40ca:	4804      	ldr	r0, [pc, #16]	; (40dc <SPI_HI3593_CLOCK_init+0x24>)
    40cc:	4b04      	ldr	r3, [pc, #16]	; (40e0 <SPI_HI3593_CLOCK_init+0x28>)
    40ce:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    40d0:	4804      	ldr	r0, [pc, #16]	; (40e4 <SPI_HI3593_CLOCK_init+0x2c>)
    40d2:	4b05      	ldr	r3, [pc, #20]	; (40e8 <SPI_HI3593_CLOCK_init+0x30>)
    40d4:	4798      	blx	r3
}
    40d6:	bf00      	nop
    40d8:	bd80      	pop	{r7, pc}
    40da:	bf00      	nop
    40dc:	40001c00 	.word	0x40001c00
    40e0:	000031d1 	.word	0x000031d1
    40e4:	40000800 	.word	0x40000800
    40e8:	00003497 	.word	0x00003497

000040ec <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    40ec:	b580      	push	{r7, lr}
    40ee:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    40f0:	4b04      	ldr	r3, [pc, #16]	; (4104 <SPI_HI3593_init+0x18>)
    40f2:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    40f4:	4904      	ldr	r1, [pc, #16]	; (4108 <SPI_HI3593_init+0x1c>)
    40f6:	4805      	ldr	r0, [pc, #20]	; (410c <SPI_HI3593_init+0x20>)
    40f8:	4b05      	ldr	r3, [pc, #20]	; (4110 <SPI_HI3593_init+0x24>)
    40fa:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    40fc:	4b05      	ldr	r3, [pc, #20]	; (4114 <SPI_HI3593_init+0x28>)
    40fe:	4798      	blx	r3
}
    4100:	bf00      	nop
    4102:	bd80      	pop	{r7, pc}
    4104:	000040b9 	.word	0x000040b9
    4108:	43000800 	.word	0x43000800
    410c:	200055ec 	.word	0x200055ec
    4110:	00005949 	.word	0x00005949
    4114:	0000404d 	.word	0x0000404d

00004118 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    4118:	b580      	push	{r7, lr}
    411a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    411c:	2100      	movs	r1, #0
    411e:	2068      	movs	r0, #104	; 0x68
    4120:	4b07      	ldr	r3, [pc, #28]	; (4140 <I2C_EEPROM_PORT_init+0x28>)
    4122:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    4124:	4907      	ldr	r1, [pc, #28]	; (4144 <I2C_EEPROM_PORT_init+0x2c>)
    4126:	2068      	movs	r0, #104	; 0x68
    4128:	4b07      	ldr	r3, [pc, #28]	; (4148 <I2C_EEPROM_PORT_init+0x30>)
    412a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    412c:	2100      	movs	r1, #0
    412e:	2069      	movs	r0, #105	; 0x69
    4130:	4b03      	ldr	r3, [pc, #12]	; (4140 <I2C_EEPROM_PORT_init+0x28>)
    4132:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    4134:	4905      	ldr	r1, [pc, #20]	; (414c <I2C_EEPROM_PORT_init+0x34>)
    4136:	2069      	movs	r0, #105	; 0x69
    4138:	4b03      	ldr	r3, [pc, #12]	; (4148 <I2C_EEPROM_PORT_init+0x30>)
    413a:	4798      	blx	r3
}
    413c:	bf00      	nop
    413e:	bd80      	pop	{r7, pc}
    4140:	000039d1 	.word	0x000039d1
    4144:	00680002 	.word	0x00680002
    4148:	00003a05 	.word	0x00003a05
    414c:	00690002 	.word	0x00690002

00004150 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    4150:	b580      	push	{r7, lr}
    4152:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4154:	2242      	movs	r2, #66	; 0x42
    4156:	2125      	movs	r1, #37	; 0x25
    4158:	4806      	ldr	r0, [pc, #24]	; (4174 <I2C_EEPROM_CLOCK_init+0x24>)
    415a:	4b07      	ldr	r3, [pc, #28]	; (4178 <I2C_EEPROM_CLOCK_init+0x28>)
    415c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    415e:	224a      	movs	r2, #74	; 0x4a
    4160:	2103      	movs	r1, #3
    4162:	4804      	ldr	r0, [pc, #16]	; (4174 <I2C_EEPROM_CLOCK_init+0x24>)
    4164:	4b04      	ldr	r3, [pc, #16]	; (4178 <I2C_EEPROM_CLOCK_init+0x28>)
    4166:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    4168:	4804      	ldr	r0, [pc, #16]	; (417c <I2C_EEPROM_CLOCK_init+0x2c>)
    416a:	4b05      	ldr	r3, [pc, #20]	; (4180 <I2C_EEPROM_CLOCK_init+0x30>)
    416c:	4798      	blx	r3
}
    416e:	bf00      	nop
    4170:	bd80      	pop	{r7, pc}
    4172:	bf00      	nop
    4174:	40001c00 	.word	0x40001c00
    4178:	000031d1 	.word	0x000031d1
    417c:	40000800 	.word	0x40000800
    4180:	000034b7 	.word	0x000034b7

00004184 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    4184:	b580      	push	{r7, lr}
    4186:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    4188:	4b04      	ldr	r3, [pc, #16]	; (419c <I2C_EEPROM_init+0x18>)
    418a:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    418c:	4904      	ldr	r1, [pc, #16]	; (41a0 <I2C_EEPROM_init+0x1c>)
    418e:	4805      	ldr	r0, [pc, #20]	; (41a4 <I2C_EEPROM_init+0x20>)
    4190:	4b05      	ldr	r3, [pc, #20]	; (41a8 <I2C_EEPROM_init+0x24>)
    4192:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    4194:	4b05      	ldr	r3, [pc, #20]	; (41ac <I2C_EEPROM_init+0x28>)
    4196:	4798      	blx	r3
}
    4198:	bf00      	nop
    419a:	bd80      	pop	{r7, pc}
    419c:	00004151 	.word	0x00004151
    41a0:	43000c00 	.word	0x43000c00
    41a4:	2000579c 	.word	0x2000579c
    41a8:	000051c9 	.word	0x000051c9
    41ac:	00004119 	.word	0x00004119

000041b0 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    41b0:	b580      	push	{r7, lr}
    41b2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    41b4:	4808      	ldr	r0, [pc, #32]	; (41d8 <TIMER_USB_init+0x28>)
    41b6:	4b09      	ldr	r3, [pc, #36]	; (41dc <TIMER_USB_init+0x2c>)
    41b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    41ba:	2243      	movs	r2, #67	; 0x43
    41bc:	2109      	movs	r1, #9
    41be:	4808      	ldr	r0, [pc, #32]	; (41e0 <TIMER_USB_init+0x30>)
    41c0:	4b08      	ldr	r3, [pc, #32]	; (41e4 <TIMER_USB_init+0x34>)
    41c2:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    41c4:	4b08      	ldr	r3, [pc, #32]	; (41e8 <TIMER_USB_init+0x38>)
    41c6:	4798      	blx	r3
    41c8:	4603      	mov	r3, r0
    41ca:	461a      	mov	r2, r3
    41cc:	4907      	ldr	r1, [pc, #28]	; (41ec <TIMER_USB_init+0x3c>)
    41ce:	4808      	ldr	r0, [pc, #32]	; (41f0 <TIMER_USB_init+0x40>)
    41d0:	4b08      	ldr	r3, [pc, #32]	; (41f4 <TIMER_USB_init+0x44>)
    41d2:	4798      	blx	r3
}
    41d4:	bf00      	nop
    41d6:	bd80      	pop	{r7, pc}
    41d8:	40000800 	.word	0x40000800
    41dc:	000032f7 	.word	0x000032f7
    41e0:	40001c00 	.word	0x40001c00
    41e4:	000031d1 	.word	0x000031d1
    41e8:	0000bda9 	.word	0x0000bda9
    41ec:	40003800 	.word	0x40003800
    41f0:	20005704 	.word	0x20005704
    41f4:	00005bd9 	.word	0x00005bd9

000041f8 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    41f8:	b580      	push	{r7, lr}
    41fa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    41fc:	4808      	ldr	r0, [pc, #32]	; (4220 <TIMER_EVENT_init+0x28>)
    41fe:	4b09      	ldr	r3, [pc, #36]	; (4224 <TIMER_EVENT_init+0x2c>)
    4200:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4202:	2245      	movs	r2, #69	; 0x45
    4204:	2109      	movs	r1, #9
    4206:	4808      	ldr	r0, [pc, #32]	; (4228 <TIMER_EVENT_init+0x30>)
    4208:	4b08      	ldr	r3, [pc, #32]	; (422c <TIMER_EVENT_init+0x34>)
    420a:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    420c:	4b08      	ldr	r3, [pc, #32]	; (4230 <TIMER_EVENT_init+0x38>)
    420e:	4798      	blx	r3
    4210:	4603      	mov	r3, r0
    4212:	461a      	mov	r2, r3
    4214:	4907      	ldr	r1, [pc, #28]	; (4234 <TIMER_EVENT_init+0x3c>)
    4216:	4808      	ldr	r0, [pc, #32]	; (4238 <TIMER_EVENT_init+0x40>)
    4218:	4b08      	ldr	r3, [pc, #32]	; (423c <TIMER_EVENT_init+0x44>)
    421a:	4798      	blx	r3
}
    421c:	bf00      	nop
    421e:	bd80      	pop	{r7, pc}
    4220:	40000800 	.word	0x40000800
    4224:	00003317 	.word	0x00003317
    4228:	40001c00 	.word	0x40001c00
    422c:	000031d1 	.word	0x000031d1
    4230:	0000bda9 	.word	0x0000bda9
    4234:	40003c00 	.word	0x40003c00
    4238:	2000566c 	.word	0x2000566c
    423c:	00005bd9 	.word	0x00005bd9

00004240 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    4240:	b580      	push	{r7, lr}
    4242:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    4244:	4808      	ldr	r0, [pc, #32]	; (4268 <TIMER_ARINC_init+0x28>)
    4246:	4b09      	ldr	r3, [pc, #36]	; (426c <TIMER_ARINC_init+0x2c>)
    4248:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    424a:	2244      	movs	r2, #68	; 0x44
    424c:	211a      	movs	r1, #26
    424e:	4808      	ldr	r0, [pc, #32]	; (4270 <TIMER_ARINC_init+0x30>)
    4250:	4b08      	ldr	r3, [pc, #32]	; (4274 <TIMER_ARINC_init+0x34>)
    4252:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    4254:	4b08      	ldr	r3, [pc, #32]	; (4278 <TIMER_ARINC_init+0x38>)
    4256:	4798      	blx	r3
    4258:	4603      	mov	r3, r0
    425a:	461a      	mov	r2, r3
    425c:	4907      	ldr	r1, [pc, #28]	; (427c <TIMER_ARINC_init+0x3c>)
    425e:	4808      	ldr	r0, [pc, #32]	; (4280 <TIMER_ARINC_init+0x40>)
    4260:	4b08      	ldr	r3, [pc, #32]	; (4284 <TIMER_ARINC_init+0x44>)
    4262:	4798      	blx	r3
}
    4264:	bf00      	nop
    4266:	bd80      	pop	{r7, pc}
    4268:	40000800 	.word	0x40000800
    426c:	000033b7 	.word	0x000033b7
    4270:	40001c00 	.word	0x40001c00
    4274:	000031d1 	.word	0x000031d1
    4278:	0000bda9 	.word	0x0000bda9
    427c:	4101a000 	.word	0x4101a000
    4280:	200056e8 	.word	0x200056e8
    4284:	00005bd9 	.word	0x00005bd9

00004288 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    4288:	b580      	push	{r7, lr}
    428a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    428c:	4808      	ldr	r0, [pc, #32]	; (42b0 <TIMER_HVAC_init+0x28>)
    428e:	4b09      	ldr	r3, [pc, #36]	; (42b4 <TIMER_HVAC_init+0x2c>)
    4290:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4292:	2245      	movs	r2, #69	; 0x45
    4294:	211a      	movs	r1, #26
    4296:	4808      	ldr	r0, [pc, #32]	; (42b8 <TIMER_HVAC_init+0x30>)
    4298:	4b08      	ldr	r3, [pc, #32]	; (42bc <TIMER_HVAC_init+0x34>)
    429a:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    429c:	4b08      	ldr	r3, [pc, #32]	; (42c0 <TIMER_HVAC_init+0x38>)
    429e:	4798      	blx	r3
    42a0:	4603      	mov	r3, r0
    42a2:	461a      	mov	r2, r3
    42a4:	4907      	ldr	r1, [pc, #28]	; (42c4 <TIMER_HVAC_init+0x3c>)
    42a6:	4808      	ldr	r0, [pc, #32]	; (42c8 <TIMER_HVAC_init+0x40>)
    42a8:	4b08      	ldr	r3, [pc, #32]	; (42cc <TIMER_HVAC_init+0x44>)
    42aa:	4798      	blx	r3
}
    42ac:	bf00      	nop
    42ae:	bd80      	pop	{r7, pc}
    42b0:	40000800 	.word	0x40000800
    42b4:	000033d7 	.word	0x000033d7
    42b8:	40001c00 	.word	0x40001c00
    42bc:	000031d1 	.word	0x000031d1
    42c0:	0000bda9 	.word	0x0000bda9
    42c4:	4101c000 	.word	0x4101c000
    42c8:	20005780 	.word	0x20005780
    42cc:	00005bd9 	.word	0x00005bd9

000042d0 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    42d0:	b580      	push	{r7, lr}
    42d2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    42d4:	4808      	ldr	r0, [pc, #32]	; (42f8 <TIMER_MAINTENANCE_init+0x28>)
    42d6:	4b09      	ldr	r3, [pc, #36]	; (42fc <TIMER_MAINTENANCE_init+0x2c>)
    42d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    42da:	2246      	movs	r2, #70	; 0x46
    42dc:	211e      	movs	r1, #30
    42de:	4808      	ldr	r0, [pc, #32]	; (4300 <TIMER_MAINTENANCE_init+0x30>)
    42e0:	4b08      	ldr	r3, [pc, #32]	; (4304 <TIMER_MAINTENANCE_init+0x34>)
    42e2:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    42e4:	4b08      	ldr	r3, [pc, #32]	; (4308 <TIMER_MAINTENANCE_init+0x38>)
    42e6:	4798      	blx	r3
    42e8:	4603      	mov	r3, r0
    42ea:	461a      	mov	r2, r3
    42ec:	4907      	ldr	r1, [pc, #28]	; (430c <TIMER_MAINTENANCE_init+0x3c>)
    42ee:	4808      	ldr	r0, [pc, #32]	; (4310 <TIMER_MAINTENANCE_init+0x40>)
    42f0:	4b08      	ldr	r3, [pc, #32]	; (4314 <TIMER_MAINTENANCE_init+0x44>)
    42f2:	4798      	blx	r3
}
    42f4:	bf00      	nop
    42f6:	bd80      	pop	{r7, pc}
    42f8:	40000800 	.word	0x40000800
    42fc:	000033f7 	.word	0x000033f7
    4300:	40001c00 	.word	0x40001c00
    4304:	000031d1 	.word	0x000031d1
    4308:	0000bda9 	.word	0x0000bda9
    430c:	42001400 	.word	0x42001400
    4310:	2000564c 	.word	0x2000564c
    4314:	00005bd9 	.word	0x00005bd9

00004318 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    4318:	b580      	push	{r7, lr}
    431a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    431c:	4808      	ldr	r0, [pc, #32]	; (4340 <TIMER_INTERFACE_init+0x28>)
    431e:	4b09      	ldr	r3, [pc, #36]	; (4344 <TIMER_INTERFACE_init+0x2c>)
    4320:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4322:	2246      	movs	r2, #70	; 0x46
    4324:	211e      	movs	r1, #30
    4326:	4808      	ldr	r0, [pc, #32]	; (4348 <TIMER_INTERFACE_init+0x30>)
    4328:	4b08      	ldr	r3, [pc, #32]	; (434c <TIMER_INTERFACE_init+0x34>)
    432a:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    432c:	4b08      	ldr	r3, [pc, #32]	; (4350 <TIMER_INTERFACE_init+0x38>)
    432e:	4798      	blx	r3
    4330:	4603      	mov	r3, r0
    4332:	461a      	mov	r2, r3
    4334:	4907      	ldr	r1, [pc, #28]	; (4354 <TIMER_INTERFACE_init+0x3c>)
    4336:	4808      	ldr	r0, [pc, #32]	; (4358 <TIMER_INTERFACE_init+0x40>)
    4338:	4b08      	ldr	r3, [pc, #32]	; (435c <TIMER_INTERFACE_init+0x44>)
    433a:	4798      	blx	r3
}
    433c:	bf00      	nop
    433e:	bd80      	pop	{r7, pc}
    4340:	40000800 	.word	0x40000800
    4344:	00003417 	.word	0x00003417
    4348:	40001c00 	.word	0x40001c00
    434c:	000031d1 	.word	0x000031d1
    4350:	0000bda9 	.word	0x0000bda9
    4354:	42001800 	.word	0x42001800
    4358:	20005688 	.word	0x20005688
    435c:	00005bd9 	.word	0x00005bd9

00004360 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    4360:	b480      	push	{r7}
    4362:	af00      	add	r7, sp, #0
}
    4364:	bf00      	nop
    4366:	46bd      	mov	sp, r7
    4368:	f85d 7b04 	ldr.w	r7, [sp], #4
    436c:	4770      	bx	lr
	...

00004370 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    4370:	b580      	push	{r7, lr}
    4372:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    4374:	4804      	ldr	r0, [pc, #16]	; (4388 <LIVE_PULSE_CLOCK_init+0x18>)
    4376:	4b05      	ldr	r3, [pc, #20]	; (438c <LIVE_PULSE_CLOCK_init+0x1c>)
    4378:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    437a:	224b      	movs	r2, #75	; 0x4b
    437c:	2127      	movs	r1, #39	; 0x27
    437e:	4804      	ldr	r0, [pc, #16]	; (4390 <LIVE_PULSE_CLOCK_init+0x20>)
    4380:	4b04      	ldr	r3, [pc, #16]	; (4394 <LIVE_PULSE_CLOCK_init+0x24>)
    4382:	4798      	blx	r3
}
    4384:	bf00      	nop
    4386:	bd80      	pop	{r7, pc}
    4388:	40000800 	.word	0x40000800
    438c:	000034d7 	.word	0x000034d7
    4390:	40001c00 	.word	0x40001c00
    4394:	000031d1 	.word	0x000031d1

00004398 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    4398:	b580      	push	{r7, lr}
    439a:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    439c:	4b06      	ldr	r3, [pc, #24]	; (43b8 <LIVE_PULSE_init+0x20>)
    439e:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    43a0:	4b06      	ldr	r3, [pc, #24]	; (43bc <LIVE_PULSE_init+0x24>)
    43a2:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    43a4:	4b06      	ldr	r3, [pc, #24]	; (43c0 <LIVE_PULSE_init+0x28>)
    43a6:	4798      	blx	r3
    43a8:	4603      	mov	r3, r0
    43aa:	461a      	mov	r2, r3
    43ac:	4905      	ldr	r1, [pc, #20]	; (43c4 <LIVE_PULSE_init+0x2c>)
    43ae:	4806      	ldr	r0, [pc, #24]	; (43c8 <LIVE_PULSE_init+0x30>)
    43b0:	4b06      	ldr	r3, [pc, #24]	; (43cc <LIVE_PULSE_init+0x34>)
    43b2:	4798      	blx	r3
}
    43b4:	bf00      	nop
    43b6:	bd80      	pop	{r7, pc}
    43b8:	00004371 	.word	0x00004371
    43bc:	00004361 	.word	0x00004361
    43c0:	0000bdb9 	.word	0x0000bdb9
    43c4:	43001800 	.word	0x43001800
    43c8:	200056a4 	.word	0x200056a4
    43cc:	0000536d 	.word	0x0000536d

000043d0 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    43d0:	b580      	push	{r7, lr}
    43d2:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    43d4:	2102      	movs	r1, #2
    43d6:	2018      	movs	r0, #24
    43d8:	4b0f      	ldr	r3, [pc, #60]	; (4418 <CDCUSB_PORT_init+0x48>)
    43da:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    43dc:	2100      	movs	r1, #0
    43de:	2018      	movs	r0, #24
    43e0:	4b0e      	ldr	r3, [pc, #56]	; (441c <CDCUSB_PORT_init+0x4c>)
    43e2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    43e4:	2100      	movs	r1, #0
    43e6:	2018      	movs	r0, #24
    43e8:	4b0d      	ldr	r3, [pc, #52]	; (4420 <CDCUSB_PORT_init+0x50>)
    43ea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    43ec:	490d      	ldr	r1, [pc, #52]	; (4424 <CDCUSB_PORT_init+0x54>)
    43ee:	2018      	movs	r0, #24
    43f0:	4b0d      	ldr	r3, [pc, #52]	; (4428 <CDCUSB_PORT_init+0x58>)
    43f2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    43f4:	2102      	movs	r1, #2
    43f6:	2019      	movs	r0, #25
    43f8:	4b07      	ldr	r3, [pc, #28]	; (4418 <CDCUSB_PORT_init+0x48>)
    43fa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    43fc:	2100      	movs	r1, #0
    43fe:	2019      	movs	r0, #25
    4400:	4b06      	ldr	r3, [pc, #24]	; (441c <CDCUSB_PORT_init+0x4c>)
    4402:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    4404:	2100      	movs	r1, #0
    4406:	2019      	movs	r0, #25
    4408:	4b05      	ldr	r3, [pc, #20]	; (4420 <CDCUSB_PORT_init+0x50>)
    440a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    440c:	4907      	ldr	r1, [pc, #28]	; (442c <CDCUSB_PORT_init+0x5c>)
    440e:	2019      	movs	r0, #25
    4410:	4b05      	ldr	r3, [pc, #20]	; (4428 <CDCUSB_PORT_init+0x58>)
    4412:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    4414:	bf00      	nop
    4416:	bd80      	pop	{r7, pc}
    4418:	00003a25 	.word	0x00003a25
    441c:	00003a5d 	.word	0x00003a5d
    4420:	000039d1 	.word	0x000039d1
    4424:	00180007 	.word	0x00180007
    4428:	00003a05 	.word	0x00003a05
    442c:	00190007 	.word	0x00190007

00004430 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    4430:	b580      	push	{r7, lr}
    4432:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    4434:	2242      	movs	r2, #66	; 0x42
    4436:	210a      	movs	r1, #10
    4438:	4805      	ldr	r0, [pc, #20]	; (4450 <CDCUSB_CLOCK_init+0x20>)
    443a:	4b06      	ldr	r3, [pc, #24]	; (4454 <CDCUSB_CLOCK_init+0x24>)
    443c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    443e:	4806      	ldr	r0, [pc, #24]	; (4458 <CDCUSB_CLOCK_init+0x28>)
    4440:	4b06      	ldr	r3, [pc, #24]	; (445c <CDCUSB_CLOCK_init+0x2c>)
    4442:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    4444:	4804      	ldr	r0, [pc, #16]	; (4458 <CDCUSB_CLOCK_init+0x28>)
    4446:	4b06      	ldr	r3, [pc, #24]	; (4460 <CDCUSB_CLOCK_init+0x30>)
    4448:	4798      	blx	r3
}
    444a:	bf00      	nop
    444c:	bd80      	pop	{r7, pc}
    444e:	bf00      	nop
    4450:	40001c00 	.word	0x40001c00
    4454:	000031d1 	.word	0x000031d1
    4458:	40000800 	.word	0x40000800
    445c:	000031f7 	.word	0x000031f7
    4460:	00003337 	.word	0x00003337

00004464 <CDCUSB_init>:

void CDCUSB_init(void)
{
    4464:	b580      	push	{r7, lr}
    4466:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    4468:	4b03      	ldr	r3, [pc, #12]	; (4478 <CDCUSB_init+0x14>)
    446a:	4798      	blx	r3
	usb_d_init();
    446c:	4b03      	ldr	r3, [pc, #12]	; (447c <CDCUSB_init+0x18>)
    446e:	4798      	blx	r3
	CDCUSB_PORT_init();
    4470:	4b03      	ldr	r3, [pc, #12]	; (4480 <CDCUSB_init+0x1c>)
    4472:	4798      	blx	r3
}
    4474:	bf00      	nop
    4476:	bd80      	pop	{r7, pc}
    4478:	00004431 	.word	0x00004431
    447c:	000063e9 	.word	0x000063e9
    4480:	000043d1 	.word	0x000043d1

00004484 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    4484:	b580      	push	{r7, lr}
    4486:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    4488:	4802      	ldr	r0, [pc, #8]	; (4494 <WATCHDOG_CLOCK_init+0x10>)
    448a:	4b03      	ldr	r3, [pc, #12]	; (4498 <WATCHDOG_CLOCK_init+0x14>)
    448c:	4798      	blx	r3
}
    448e:	bf00      	nop
    4490:	bd80      	pop	{r7, pc}
    4492:	bf00      	nop
    4494:	40000800 	.word	0x40000800
    4498:	00003277 	.word	0x00003277

0000449c <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    449c:	b580      	push	{r7, lr}
    449e:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    44a0:	4b03      	ldr	r3, [pc, #12]	; (44b0 <WATCHDOG_init+0x14>)
    44a2:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    44a4:	4903      	ldr	r1, [pc, #12]	; (44b4 <WATCHDOG_init+0x18>)
    44a6:	4804      	ldr	r0, [pc, #16]	; (44b8 <WATCHDOG_init+0x1c>)
    44a8:	4b04      	ldr	r3, [pc, #16]	; (44bc <WATCHDOG_init+0x20>)
    44aa:	4798      	blx	r3
}
    44ac:	bf00      	nop
    44ae:	bd80      	pop	{r7, pc}
    44b0:	00004485 	.word	0x00004485
    44b4:	40002000 	.word	0x40002000
    44b8:	200057fc 	.word	0x200057fc
    44bc:	00003aa5 	.word	0x00003aa5

000044c0 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    44c0:	b580      	push	{r7, lr}
    44c2:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    44c4:	4904      	ldr	r1, [pc, #16]	; (44d8 <CAN_CCU_PORT_init+0x18>)
    44c6:	202d      	movs	r0, #45	; 0x2d
    44c8:	4b04      	ldr	r3, [pc, #16]	; (44dc <CAN_CCU_PORT_init+0x1c>)
    44ca:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    44cc:	4904      	ldr	r1, [pc, #16]	; (44e0 <CAN_CCU_PORT_init+0x20>)
    44ce:	202c      	movs	r0, #44	; 0x2c
    44d0:	4b02      	ldr	r3, [pc, #8]	; (44dc <CAN_CCU_PORT_init+0x1c>)
    44d2:	4798      	blx	r3
}
    44d4:	bf00      	nop
    44d6:	bd80      	pop	{r7, pc}
    44d8:	002d0007 	.word	0x002d0007
    44dc:	00003a05 	.word	0x00003a05
    44e0:	002c0007 	.word	0x002c0007

000044e4 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    44e4:	b580      	push	{r7, lr}
    44e6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    44e8:	4807      	ldr	r0, [pc, #28]	; (4508 <CAN_CCU_init+0x24>)
    44ea:	4b08      	ldr	r3, [pc, #32]	; (450c <CAN_CCU_init+0x28>)
    44ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    44ee:	2243      	movs	r2, #67	; 0x43
    44f0:	211c      	movs	r1, #28
    44f2:	4807      	ldr	r0, [pc, #28]	; (4510 <CAN_CCU_init+0x2c>)
    44f4:	4b07      	ldr	r3, [pc, #28]	; (4514 <CAN_CCU_init+0x30>)
    44f6:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    44f8:	4907      	ldr	r1, [pc, #28]	; (4518 <CAN_CCU_init+0x34>)
    44fa:	4808      	ldr	r0, [pc, #32]	; (451c <CAN_CCU_init+0x38>)
    44fc:	4b08      	ldr	r3, [pc, #32]	; (4520 <CAN_CCU_init+0x3c>)
    44fe:	4798      	blx	r3
	CAN_CCU_PORT_init();
    4500:	4b08      	ldr	r3, [pc, #32]	; (4524 <CAN_CCU_init+0x40>)
    4502:	4798      	blx	r3
}
    4504:	bf00      	nop
    4506:	bd80      	pop	{r7, pc}
    4508:	40000800 	.word	0x40000800
    450c:	00003237 	.word	0x00003237
    4510:	40001c00 	.word	0x40001c00
    4514:	000031d1 	.word	0x000031d1
    4518:	42000400 	.word	0x42000400
    451c:	200056c0 	.word	0x200056c0
    4520:	00004c15 	.word	0x00004c15
    4524:	000044c1 	.word	0x000044c1

00004528 <system_init>:

void system_init(void)
{
    4528:	b580      	push	{r7, lr}
    452a:	af00      	add	r7, sp, #0
	init_mcu();
    452c:	4b51      	ldr	r3, [pc, #324]	; (4674 <system_init+0x14c>)
    452e:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    4530:	2101      	movs	r1, #1
    4532:	200f      	movs	r0, #15
    4534:	4b50      	ldr	r3, [pc, #320]	; (4678 <system_init+0x150>)
    4536:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    4538:	2102      	movs	r1, #2
    453a:	200f      	movs	r0, #15
    453c:	4b4f      	ldr	r3, [pc, #316]	; (467c <system_init+0x154>)
    453e:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    4540:	f04f 31ff 	mov.w	r1, #4294967295
    4544:	200f      	movs	r0, #15
    4546:	4b4e      	ldr	r3, [pc, #312]	; (4680 <system_init+0x158>)
    4548:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    454a:	2101      	movs	r1, #1
    454c:	2013      	movs	r0, #19
    454e:	4b4a      	ldr	r3, [pc, #296]	; (4678 <system_init+0x150>)
    4550:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    4552:	2102      	movs	r1, #2
    4554:	2013      	movs	r0, #19
    4556:	4b49      	ldr	r3, [pc, #292]	; (467c <system_init+0x154>)
    4558:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    455a:	f04f 31ff 	mov.w	r1, #4294967295
    455e:	2013      	movs	r0, #19
    4560:	4b47      	ldr	r3, [pc, #284]	; (4680 <system_init+0x158>)
    4562:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    4564:	2101      	movs	r1, #1
    4566:	2027      	movs	r0, #39	; 0x27
    4568:	4b44      	ldr	r3, [pc, #272]	; (467c <system_init+0x154>)
    456a:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    456c:	2102      	movs	r1, #2
    456e:	2027      	movs	r0, #39	; 0x27
    4570:	4b44      	ldr	r3, [pc, #272]	; (4684 <system_init+0x15c>)
    4572:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    4574:	f04f 31ff 	mov.w	r1, #4294967295
    4578:	2027      	movs	r0, #39	; 0x27
    457a:	4b41      	ldr	r3, [pc, #260]	; (4680 <system_init+0x158>)
    457c:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    457e:	2101      	movs	r1, #1
    4580:	203d      	movs	r0, #61	; 0x3d
    4582:	4b3d      	ldr	r3, [pc, #244]	; (4678 <system_init+0x150>)
    4584:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    4586:	2102      	movs	r1, #2
    4588:	203d      	movs	r0, #61	; 0x3d
    458a:	4b3c      	ldr	r3, [pc, #240]	; (467c <system_init+0x154>)
    458c:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    458e:	f04f 31ff 	mov.w	r1, #4294967295
    4592:	203d      	movs	r0, #61	; 0x3d
    4594:	4b3a      	ldr	r3, [pc, #232]	; (4680 <system_init+0x158>)
    4596:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    4598:	2101      	movs	r1, #1
    459a:	203f      	movs	r0, #63	; 0x3f
    459c:	4b37      	ldr	r3, [pc, #220]	; (467c <system_init+0x154>)
    459e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    45a0:	2101      	movs	r1, #1
    45a2:	203f      	movs	r0, #63	; 0x3f
    45a4:	4b37      	ldr	r3, [pc, #220]	; (4684 <system_init+0x15c>)
    45a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    45a8:	f04f 31ff 	mov.w	r1, #4294967295
    45ac:	203f      	movs	r0, #63	; 0x3f
    45ae:	4b34      	ldr	r3, [pc, #208]	; (4680 <system_init+0x158>)
    45b0:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    45b2:	2100      	movs	r1, #0
    45b4:	204d      	movs	r0, #77	; 0x4d
    45b6:	4b30      	ldr	r3, [pc, #192]	; (4678 <system_init+0x150>)
    45b8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    45ba:	2102      	movs	r1, #2
    45bc:	204d      	movs	r0, #77	; 0x4d
    45be:	4b2f      	ldr	r3, [pc, #188]	; (467c <system_init+0x154>)
    45c0:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    45c2:	f04f 31ff 	mov.w	r1, #4294967295
    45c6:	204d      	movs	r0, #77	; 0x4d
    45c8:	4b2d      	ldr	r3, [pc, #180]	; (4680 <system_init+0x158>)
    45ca:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    45cc:	2101      	movs	r1, #1
    45ce:	204e      	movs	r0, #78	; 0x4e
    45d0:	4b29      	ldr	r3, [pc, #164]	; (4678 <system_init+0x150>)
    45d2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    45d4:	2102      	movs	r1, #2
    45d6:	204e      	movs	r0, #78	; 0x4e
    45d8:	4b28      	ldr	r3, [pc, #160]	; (467c <system_init+0x154>)
    45da:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    45dc:	f04f 31ff 	mov.w	r1, #4294967295
    45e0:	204e      	movs	r0, #78	; 0x4e
    45e2:	4b27      	ldr	r3, [pc, #156]	; (4680 <system_init+0x158>)
    45e4:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    45e6:	2100      	movs	r1, #0
    45e8:	204f      	movs	r0, #79	; 0x4f
    45ea:	4b23      	ldr	r3, [pc, #140]	; (4678 <system_init+0x150>)
    45ec:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    45ee:	2102      	movs	r1, #2
    45f0:	204f      	movs	r0, #79	; 0x4f
    45f2:	4b22      	ldr	r3, [pc, #136]	; (467c <system_init+0x154>)
    45f4:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    45f6:	f04f 31ff 	mov.w	r1, #4294967295
    45fa:	204f      	movs	r0, #79	; 0x4f
    45fc:	4b20      	ldr	r3, [pc, #128]	; (4680 <system_init+0x158>)
    45fe:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    4600:	2100      	movs	r1, #0
    4602:	2052      	movs	r0, #82	; 0x52
    4604:	4b1c      	ldr	r3, [pc, #112]	; (4678 <system_init+0x150>)
    4606:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    4608:	2102      	movs	r1, #2
    460a:	2052      	movs	r0, #82	; 0x52
    460c:	4b1b      	ldr	r3, [pc, #108]	; (467c <system_init+0x154>)
    460e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    4610:	f04f 31ff 	mov.w	r1, #4294967295
    4614:	2052      	movs	r0, #82	; 0x52
    4616:	4b1a      	ldr	r3, [pc, #104]	; (4680 <system_init+0x158>)
    4618:	4798      	blx	r3

	CRC_CALC_init();
    461a:	4b1b      	ldr	r3, [pc, #108]	; (4688 <system_init+0x160>)
    461c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    461e:	4b1b      	ldr	r3, [pc, #108]	; (468c <system_init+0x164>)
    4620:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    4622:	4b1b      	ldr	r3, [pc, #108]	; (4690 <system_init+0x168>)
    4624:	4798      	blx	r3

	QSPI_N25Q256_init();
    4626:	4b1b      	ldr	r3, [pc, #108]	; (4694 <system_init+0x16c>)
    4628:	4798      	blx	r3

	DATETIME_CLOCK_init();
    462a:	4b1b      	ldr	r3, [pc, #108]	; (4698 <system_init+0x170>)
    462c:	4798      	blx	r3

	SPI_MEMORIES_init();
    462e:	4b1b      	ldr	r3, [pc, #108]	; (469c <system_init+0x174>)
    4630:	4798      	blx	r3

	I2C_SHARED_init();
    4632:	4b1b      	ldr	r3, [pc, #108]	; (46a0 <system_init+0x178>)
    4634:	4798      	blx	r3

	SPI_TEMP_init();
    4636:	4b1b      	ldr	r3, [pc, #108]	; (46a4 <system_init+0x17c>)
    4638:	4798      	blx	r3

	I2C_EXPANDER_init();
    463a:	4b1b      	ldr	r3, [pc, #108]	; (46a8 <system_init+0x180>)
    463c:	4798      	blx	r3

	SPI_HI3593_init();
    463e:	4b1b      	ldr	r3, [pc, #108]	; (46ac <system_init+0x184>)
    4640:	4798      	blx	r3

	I2C_EEPROM_init();
    4642:	4b1b      	ldr	r3, [pc, #108]	; (46b0 <system_init+0x188>)
    4644:	4798      	blx	r3

	TIMER_USB_init();
    4646:	4b1b      	ldr	r3, [pc, #108]	; (46b4 <system_init+0x18c>)
    4648:	4798      	blx	r3
	TIMER_EVENT_init();
    464a:	4b1b      	ldr	r3, [pc, #108]	; (46b8 <system_init+0x190>)
    464c:	4798      	blx	r3
	TIMER_ARINC_init();
    464e:	4b1b      	ldr	r3, [pc, #108]	; (46bc <system_init+0x194>)
    4650:	4798      	blx	r3
	TIMER_HVAC_init();
    4652:	4b1b      	ldr	r3, [pc, #108]	; (46c0 <system_init+0x198>)
    4654:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    4656:	4b1b      	ldr	r3, [pc, #108]	; (46c4 <system_init+0x19c>)
    4658:	4798      	blx	r3
	TIMER_INTERFACE_init();
    465a:	4b1b      	ldr	r3, [pc, #108]	; (46c8 <system_init+0x1a0>)
    465c:	4798      	blx	r3
	LIVE_PULSE_init();
    465e:	4b1b      	ldr	r3, [pc, #108]	; (46cc <system_init+0x1a4>)
    4660:	4798      	blx	r3

	CDCUSB_init();
    4662:	4b1b      	ldr	r3, [pc, #108]	; (46d0 <system_init+0x1a8>)
    4664:	4798      	blx	r3

	WATCHDOG_init();
    4666:	4b1b      	ldr	r3, [pc, #108]	; (46d4 <system_init+0x1ac>)
    4668:	4798      	blx	r3
	CAN_CCU_init();
    466a:	4b1b      	ldr	r3, [pc, #108]	; (46d8 <system_init+0x1b0>)
    466c:	4798      	blx	r3
}
    466e:	bf00      	nop
    4670:	bd80      	pop	{r7, pc}
    4672:	bf00      	nop
    4674:	00003a95 	.word	0x00003a95
    4678:	00003a5d 	.word	0x00003a5d
    467c:	00003a25 	.word	0x00003a25
    4680:	00003a05 	.word	0x00003a05
    4684:	000039d1 	.word	0x000039d1
    4688:	00003af5 	.word	0x00003af5
    468c:	00003b21 	.word	0x00003b21
    4690:	00003be1 	.word	0x00003be1
    4694:	00003d1d 	.word	0x00003d1d
    4698:	00003d61 	.word	0x00003d61
    469c:	00003e25 	.word	0x00003e25
    46a0:	00003ebd 	.word	0x00003ebd
    46a4:	00003f89 	.word	0x00003f89
    46a8:	00004021 	.word	0x00004021
    46ac:	000040ed 	.word	0x000040ed
    46b0:	00004185 	.word	0x00004185
    46b4:	000041b1 	.word	0x000041b1
    46b8:	000041f9 	.word	0x000041f9
    46bc:	00004241 	.word	0x00004241
    46c0:	00004289 	.word	0x00004289
    46c4:	000042d1 	.word	0x000042d1
    46c8:	00004319 	.word	0x00004319
    46cc:	00004399 	.word	0x00004399
    46d0:	00004465 	.word	0x00004465
    46d4:	0000449d 	.word	0x0000449d
    46d8:	000044e5 	.word	0x000044e5

000046dc <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    46dc:	b480      	push	{r7}
    46de:	b083      	sub	sp, #12
    46e0:	af00      	add	r7, sp, #0
    46e2:	4603      	mov	r3, r0
    46e4:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    46e6:	88fb      	ldrh	r3, [r7, #6]
    46e8:	f003 0303 	and.w	r3, r3, #3
    46ec:	2b00      	cmp	r3, #0
    46ee:	d001      	beq.n	46f4 <leap_year+0x18>
		return false;
    46f0:	2300      	movs	r3, #0
    46f2:	e000      	b.n	46f6 <leap_year+0x1a>
	} else {
		return true;
    46f4:	2301      	movs	r3, #1
	}
}
    46f6:	4618      	mov	r0, r3
    46f8:	370c      	adds	r7, #12
    46fa:	46bd      	mov	sp, r7
    46fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4700:	4770      	bx	lr
	...

00004704 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    4704:	b580      	push	{r7, lr}
    4706:	b084      	sub	sp, #16
    4708:	af00      	add	r7, sp, #0
    470a:	6078      	str	r0, [r7, #4]
    470c:	460b      	mov	r3, r1
    470e:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    4710:	2300      	movs	r3, #0
    4712:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    4714:	687b      	ldr	r3, [r7, #4]
    4716:	b29b      	uxth	r3, r3
    4718:	4618      	mov	r0, r3
    471a:	4b2f      	ldr	r3, [pc, #188]	; (47d8 <get_secs_in_month+0xd4>)
    471c:	4798      	blx	r3
    471e:	4603      	mov	r3, r0
    4720:	2b00      	cmp	r3, #0
    4722:	d028      	beq.n	4776 <get_secs_in_month+0x72>
		switch (month) {
    4724:	78fb      	ldrb	r3, [r7, #3]
    4726:	3b01      	subs	r3, #1
    4728:	2b0b      	cmp	r3, #11
    472a:	d84c      	bhi.n	47c6 <get_secs_in_month+0xc2>
    472c:	a201      	add	r2, pc, #4	; (adr r2, 4734 <get_secs_in_month+0x30>)
    472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4732:	bf00      	nop
    4734:	00004765 	.word	0x00004765
    4738:	0000476b 	.word	0x0000476b
    473c:	00004765 	.word	0x00004765
    4740:	00004771 	.word	0x00004771
    4744:	00004765 	.word	0x00004765
    4748:	00004771 	.word	0x00004771
    474c:	00004765 	.word	0x00004765
    4750:	00004765 	.word	0x00004765
    4754:	00004771 	.word	0x00004771
    4758:	00004765 	.word	0x00004765
    475c:	00004771 	.word	0x00004771
    4760:	00004765 	.word	0x00004765
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    4764:	4b1d      	ldr	r3, [pc, #116]	; (47dc <get_secs_in_month+0xd8>)
    4766:	60fb      	str	r3, [r7, #12]
			break;
    4768:	e030      	b.n	47cc <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    476a:	4b1d      	ldr	r3, [pc, #116]	; (47e0 <get_secs_in_month+0xdc>)
    476c:	60fb      	str	r3, [r7, #12]
			break;
    476e:	e02d      	b.n	47cc <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    4770:	4b1c      	ldr	r3, [pc, #112]	; (47e4 <get_secs_in_month+0xe0>)
    4772:	60fb      	str	r3, [r7, #12]
			break;
    4774:	e02a      	b.n	47cc <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    4776:	78fb      	ldrb	r3, [r7, #3]
    4778:	3b01      	subs	r3, #1
    477a:	2b0b      	cmp	r3, #11
    477c:	d825      	bhi.n	47ca <get_secs_in_month+0xc6>
    477e:	a201      	add	r2, pc, #4	; (adr r2, 4784 <get_secs_in_month+0x80>)
    4780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4784:	000047b5 	.word	0x000047b5
    4788:	000047bb 	.word	0x000047bb
    478c:	000047b5 	.word	0x000047b5
    4790:	000047c1 	.word	0x000047c1
    4794:	000047b5 	.word	0x000047b5
    4798:	000047c1 	.word	0x000047c1
    479c:	000047b5 	.word	0x000047b5
    47a0:	000047b5 	.word	0x000047b5
    47a4:	000047c1 	.word	0x000047c1
    47a8:	000047b5 	.word	0x000047b5
    47ac:	000047c1 	.word	0x000047c1
    47b0:	000047b5 	.word	0x000047b5
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    47b4:	4b09      	ldr	r3, [pc, #36]	; (47dc <get_secs_in_month+0xd8>)
    47b6:	60fb      	str	r3, [r7, #12]
			break;
    47b8:	e008      	b.n	47cc <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    47ba:	4b0b      	ldr	r3, [pc, #44]	; (47e8 <get_secs_in_month+0xe4>)
    47bc:	60fb      	str	r3, [r7, #12]
			break;
    47be:	e005      	b.n	47cc <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    47c0:	4b08      	ldr	r3, [pc, #32]	; (47e4 <get_secs_in_month+0xe0>)
    47c2:	60fb      	str	r3, [r7, #12]
			break;
    47c4:	e002      	b.n	47cc <get_secs_in_month+0xc8>
			break;
    47c6:	bf00      	nop
    47c8:	e000      	b.n	47cc <get_secs_in_month+0xc8>
		default:
			break;
    47ca:	bf00      	nop
		}
	}

	return sec_in_month;
    47cc:	68fb      	ldr	r3, [r7, #12]
}
    47ce:	4618      	mov	r0, r3
    47d0:	3710      	adds	r7, #16
    47d2:	46bd      	mov	sp, r7
    47d4:	bd80      	pop	{r7, pc}
    47d6:	bf00      	nop
    47d8:	000046dd 	.word	0x000046dd
    47dc:	0028de80 	.word	0x0028de80
    47e0:	00263b80 	.word	0x00263b80
    47e4:	00278d00 	.word	0x00278d00
    47e8:	0024ea00 	.word	0x0024ea00

000047ec <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    47ec:	b580      	push	{r7, lr}
    47ee:	b08a      	sub	sp, #40	; 0x28
    47f0:	af00      	add	r7, sp, #0
    47f2:	60f8      	str	r0, [r7, #12]
    47f4:	60b9      	str	r1, [r7, #8]
    47f6:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    47f8:	68fb      	ldr	r3, [r7, #12]
    47fa:	699b      	ldr	r3, [r3, #24]
    47fc:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    47fe:	2301      	movs	r3, #1
    4800:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    4802:	2301      	movs	r3, #1
    4804:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    4806:	2300      	movs	r3, #0
    4808:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    480a:	2300      	movs	r3, #0
    480c:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    480e:	68bb      	ldr	r3, [r7, #8]
    4810:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    4812:	6a3b      	ldr	r3, [r7, #32]
    4814:	b29b      	uxth	r3, r3
    4816:	4618      	mov	r0, r3
    4818:	4b32      	ldr	r3, [pc, #200]	; (48e4 <convert_timestamp_to_datetime+0xf8>)
    481a:	4798      	blx	r3
    481c:	4603      	mov	r3, r0
    481e:	2b00      	cmp	r3, #0
    4820:	d001      	beq.n	4826 <convert_timestamp_to_datetime+0x3a>
    4822:	4b31      	ldr	r3, [pc, #196]	; (48e8 <convert_timestamp_to_datetime+0xfc>)
    4824:	e000      	b.n	4828 <convert_timestamp_to_datetime+0x3c>
    4826:	4b31      	ldr	r3, [pc, #196]	; (48ec <convert_timestamp_to_datetime+0x100>)
    4828:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    482a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    482c:	69bb      	ldr	r3, [r7, #24]
    482e:	429a      	cmp	r2, r3
    4830:	d307      	bcc.n	4842 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    4832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4834:	69bb      	ldr	r3, [r7, #24]
    4836:	1ad3      	subs	r3, r2, r3
    4838:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    483a:	6a3b      	ldr	r3, [r7, #32]
    483c:	3301      	adds	r3, #1
    483e:	623b      	str	r3, [r7, #32]
    4840:	e7e7      	b.n	4812 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    4842:	7ffb      	ldrb	r3, [r7, #31]
    4844:	4619      	mov	r1, r3
    4846:	6a38      	ldr	r0, [r7, #32]
    4848:	4b29      	ldr	r3, [pc, #164]	; (48f0 <convert_timestamp_to_datetime+0x104>)
    484a:	4798      	blx	r3
    484c:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    484e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4850:	697b      	ldr	r3, [r7, #20]
    4852:	429a      	cmp	r2, r3
    4854:	d307      	bcc.n	4866 <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    4856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4858:	697b      	ldr	r3, [r7, #20]
    485a:	1ad3      	subs	r3, r2, r3
    485c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    485e:	7ffb      	ldrb	r3, [r7, #31]
    4860:	3301      	adds	r3, #1
    4862:	77fb      	strb	r3, [r7, #31]
    4864:	e7ed      	b.n	4842 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    4866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4868:	4a22      	ldr	r2, [pc, #136]	; (48f4 <convert_timestamp_to_datetime+0x108>)
    486a:	4293      	cmp	r3, r2
    486c:	d909      	bls.n	4882 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4870:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    4874:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    4878:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    487a:	7fbb      	ldrb	r3, [r7, #30]
    487c:	3301      	adds	r3, #1
    487e:	77bb      	strb	r3, [r7, #30]
    4880:	e7f1      	b.n	4866 <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    4882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4884:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    4888:	d307      	bcc.n	489a <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    488c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    4890:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    4892:	7f7b      	ldrb	r3, [r7, #29]
    4894:	3301      	adds	r3, #1
    4896:	777b      	strb	r3, [r7, #29]
    4898:	e7f3      	b.n	4882 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    489c:	2b3b      	cmp	r3, #59	; 0x3b
    489e:	d906      	bls.n	48ae <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    48a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48a2:	3b3c      	subs	r3, #60	; 0x3c
    48a4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    48a6:	7f3b      	ldrb	r3, [r7, #28]
    48a8:	3301      	adds	r3, #1
    48aa:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    48ac:	e7f5      	b.n	489a <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    48ae:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    48b0:	6a3b      	ldr	r3, [r7, #32]
    48b2:	b29a      	uxth	r2, r3
    48b4:	687b      	ldr	r3, [r7, #4]
    48b6:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    48b8:	687b      	ldr	r3, [r7, #4]
    48ba:	7ffa      	ldrb	r2, [r7, #31]
    48bc:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    48be:	687b      	ldr	r3, [r7, #4]
    48c0:	7fba      	ldrb	r2, [r7, #30]
    48c2:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    48c4:	687b      	ldr	r3, [r7, #4]
    48c6:	7f7a      	ldrb	r2, [r7, #29]
    48c8:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	7f3a      	ldrb	r2, [r7, #28]
    48ce:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    48d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48d2:	b2da      	uxtb	r2, r3
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    48d8:	2300      	movs	r3, #0
}
    48da:	4618      	mov	r0, r3
    48dc:	3728      	adds	r7, #40	; 0x28
    48de:	46bd      	mov	sp, r7
    48e0:	bd80      	pop	{r7, pc}
    48e2:	bf00      	nop
    48e4:	000046dd 	.word	0x000046dd
    48e8:	01e28500 	.word	0x01e28500
    48ec:	01e13380 	.word	0x01e13380
    48f0:	00004705 	.word	0x00004705
    48f4:	0001517f 	.word	0x0001517f

000048f8 <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    48f8:	b580      	push	{r7, lr}
    48fa:	b086      	sub	sp, #24
    48fc:	af00      	add	r7, sp, #0
    48fe:	6078      	str	r0, [r7, #4]
    4900:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    4902:	2300      	movs	r3, #0
    4904:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    4906:	2300      	movs	r3, #0
    4908:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    490a:	683b      	ldr	r3, [r7, #0]
    490c:	88db      	ldrh	r3, [r3, #6]
    490e:	b2da      	uxtb	r2, r3
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	699b      	ldr	r3, [r3, #24]
    4914:	b2db      	uxtb	r3, r3
    4916:	1ad3      	subs	r3, r2, r3
    4918:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    491a:	683b      	ldr	r3, [r7, #0]
    491c:	795b      	ldrb	r3, [r3, #5]
    491e:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    4920:	683b      	ldr	r3, [r7, #0]
    4922:	791b      	ldrb	r3, [r3, #4]
    4924:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    4926:	683b      	ldr	r3, [r7, #0]
    4928:	789b      	ldrb	r3, [r3, #2]
    492a:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    492c:	683b      	ldr	r3, [r7, #0]
    492e:	785b      	ldrb	r3, [r3, #1]
    4930:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    4932:	683b      	ldr	r3, [r7, #0]
    4934:	781b      	ldrb	r3, [r3, #0]
    4936:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    4938:	2300      	movs	r3, #0
    493a:	613b      	str	r3, [r7, #16]
    493c:	e01a      	b.n	4974 <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    493e:	687b      	ldr	r3, [r7, #4]
    4940:	699b      	ldr	r3, [r3, #24]
    4942:	b29a      	uxth	r2, r3
    4944:	693b      	ldr	r3, [r7, #16]
    4946:	b29b      	uxth	r3, r3
    4948:	4413      	add	r3, r2
    494a:	b29b      	uxth	r3, r3
    494c:	4618      	mov	r0, r3
    494e:	4b29      	ldr	r3, [pc, #164]	; (49f4 <convert_datetime_to_timestamp+0xfc>)
    4950:	4798      	blx	r3
    4952:	4603      	mov	r3, r0
    4954:	2b00      	cmp	r3, #0
    4956:	d006      	beq.n	4966 <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    4958:	697b      	ldr	r3, [r7, #20]
    495a:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    495e:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    4962:	617b      	str	r3, [r7, #20]
    4964:	e003      	b.n	496e <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    4966:	697a      	ldr	r2, [r7, #20]
    4968:	4b23      	ldr	r3, [pc, #140]	; (49f8 <convert_datetime_to_timestamp+0x100>)
    496a:	4413      	add	r3, r2
    496c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    496e:	693b      	ldr	r3, [r7, #16]
    4970:	3301      	adds	r3, #1
    4972:	613b      	str	r3, [r7, #16]
    4974:	7bfa      	ldrb	r2, [r7, #15]
    4976:	693b      	ldr	r3, [r7, #16]
    4978:	429a      	cmp	r2, r3
    497a:	d8e0      	bhi.n	493e <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    497c:	2301      	movs	r3, #1
    497e:	613b      	str	r3, [r7, #16]
    4980:	e00f      	b.n	49a2 <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    4982:	683b      	ldr	r3, [r7, #0]
    4984:	88db      	ldrh	r3, [r3, #6]
    4986:	461a      	mov	r2, r3
    4988:	693b      	ldr	r3, [r7, #16]
    498a:	b2db      	uxtb	r3, r3
    498c:	4619      	mov	r1, r3
    498e:	4610      	mov	r0, r2
    4990:	4b1a      	ldr	r3, [pc, #104]	; (49fc <convert_datetime_to_timestamp+0x104>)
    4992:	4798      	blx	r3
    4994:	4602      	mov	r2, r0
    4996:	697b      	ldr	r3, [r7, #20]
    4998:	4413      	add	r3, r2
    499a:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    499c:	693b      	ldr	r3, [r7, #16]
    499e:	3301      	adds	r3, #1
    49a0:	613b      	str	r3, [r7, #16]
    49a2:	7bba      	ldrb	r2, [r7, #14]
    49a4:	693b      	ldr	r3, [r7, #16]
    49a6:	429a      	cmp	r2, r3
    49a8:	d8eb      	bhi.n	4982 <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    49aa:	7b7b      	ldrb	r3, [r7, #13]
    49ac:	3b01      	subs	r3, #1
    49ae:	4a14      	ldr	r2, [pc, #80]	; (4a00 <convert_datetime_to_timestamp+0x108>)
    49b0:	fb02 f303 	mul.w	r3, r2, r3
    49b4:	461a      	mov	r2, r3
    49b6:	697b      	ldr	r3, [r7, #20]
    49b8:	4413      	add	r3, r2
    49ba:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    49bc:	7b3b      	ldrb	r3, [r7, #12]
    49be:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    49c2:	fb02 f303 	mul.w	r3, r2, r3
    49c6:	461a      	mov	r2, r3
    49c8:	697b      	ldr	r3, [r7, #20]
    49ca:	4413      	add	r3, r2
    49cc:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    49ce:	7afa      	ldrb	r2, [r7, #11]
    49d0:	4613      	mov	r3, r2
    49d2:	011b      	lsls	r3, r3, #4
    49d4:	1a9b      	subs	r3, r3, r2
    49d6:	009b      	lsls	r3, r3, #2
    49d8:	461a      	mov	r2, r3
    49da:	697b      	ldr	r3, [r7, #20]
    49dc:	4413      	add	r3, r2
    49de:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    49e0:	7abb      	ldrb	r3, [r7, #10]
    49e2:	697a      	ldr	r2, [r7, #20]
    49e4:	4413      	add	r3, r2
    49e6:	617b      	str	r3, [r7, #20]

	return tmp;
    49e8:	697b      	ldr	r3, [r7, #20]
}
    49ea:	4618      	mov	r0, r3
    49ec:	3718      	adds	r7, #24
    49ee:	46bd      	mov	sp, r7
    49f0:	bd80      	pop	{r7, pc}
    49f2:	bf00      	nop
    49f4:	000046dd 	.word	0x000046dd
    49f8:	01e13380 	.word	0x01e13380
    49fc:	00004705 	.word	0x00004705
    4a00:	00015180 	.word	0x00015180

00004a04 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    4a04:	b580      	push	{r7, lr}
    4a06:	b084      	sub	sp, #16
    4a08:	af00      	add	r7, sp, #0
    4a0a:	6078      	str	r0, [r7, #4]
    4a0c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    4a0e:	2300      	movs	r3, #0
    4a10:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    4a12:	687b      	ldr	r3, [r7, #4]
    4a14:	2b00      	cmp	r3, #0
    4a16:	bf14      	ite	ne
    4a18:	2301      	movne	r3, #1
    4a1a:	2300      	moveq	r3, #0
    4a1c:	b2db      	uxtb	r3, r3
    4a1e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    4a22:	4911      	ldr	r1, [pc, #68]	; (4a68 <calendar_init+0x64>)
    4a24:	4618      	mov	r0, r3
    4a26:	4b11      	ldr	r3, [pc, #68]	; (4a6c <calendar_init+0x68>)
    4a28:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    4a2a:	687b      	ldr	r3, [r7, #4]
    4a2c:	681a      	ldr	r2, [r3, #0]
    4a2e:	683b      	ldr	r3, [r7, #0]
    4a30:	429a      	cmp	r2, r3
    4a32:	d101      	bne.n	4a38 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    4a34:	2300      	movs	r3, #0
    4a36:	e013      	b.n	4a60 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    4a38:	687b      	ldr	r3, [r7, #4]
    4a3a:	681b      	ldr	r3, [r3, #0]
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	d002      	beq.n	4a46 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    4a40:	f06f 0311 	mvn.w	r3, #17
    4a44:	e00c      	b.n	4a60 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    4a46:	687b      	ldr	r3, [r7, #4]
    4a48:	683a      	ldr	r2, [r7, #0]
    4a4a:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    4a4c:	687b      	ldr	r3, [r7, #4]
    4a4e:	4618      	mov	r0, r3
    4a50:	4b07      	ldr	r3, [pc, #28]	; (4a70 <calendar_init+0x6c>)
    4a52:	4798      	blx	r3
    4a54:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    4a56:	687b      	ldr	r3, [r7, #4]
    4a58:	f240 72b2 	movw	r2, #1970	; 0x7b2
    4a5c:	619a      	str	r2, [r3, #24]

	return ret;
    4a5e:	68fb      	ldr	r3, [r7, #12]
}
    4a60:	4618      	mov	r0, r3
    4a62:	3710      	adds	r7, #16
    4a64:	46bd      	mov	sp, r7
    4a66:	bd80      	pop	{r7, pc}
    4a68:	0001cf68 	.word	0x0001cf68
    4a6c:	00006991 	.word	0x00006991
    4a70:	00009285 	.word	0x00009285

00004a74 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    4a74:	b580      	push	{r7, lr}
    4a76:	b082      	sub	sp, #8
    4a78:	af00      	add	r7, sp, #0
    4a7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    4a7c:	687b      	ldr	r3, [r7, #4]
    4a7e:	2b00      	cmp	r3, #0
    4a80:	bf14      	ite	ne
    4a82:	2301      	movne	r3, #1
    4a84:	2300      	moveq	r3, #0
    4a86:	b2db      	uxtb	r3, r3
    4a88:	f240 12e5 	movw	r2, #485	; 0x1e5
    4a8c:	4906      	ldr	r1, [pc, #24]	; (4aa8 <calendar_enable+0x34>)
    4a8e:	4618      	mov	r0, r3
    4a90:	4b06      	ldr	r3, [pc, #24]	; (4aac <calendar_enable+0x38>)
    4a92:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    4a94:	687b      	ldr	r3, [r7, #4]
    4a96:	4618      	mov	r0, r3
    4a98:	4b05      	ldr	r3, [pc, #20]	; (4ab0 <calendar_enable+0x3c>)
    4a9a:	4798      	blx	r3

	return ERR_NONE;
    4a9c:	2300      	movs	r3, #0
}
    4a9e:	4618      	mov	r0, r3
    4aa0:	3708      	adds	r7, #8
    4aa2:	46bd      	mov	sp, r7
    4aa4:	bd80      	pop	{r7, pc}
    4aa6:	bf00      	nop
    4aa8:	0001cf68 	.word	0x0001cf68
    4aac:	00006991 	.word	0x00006991
    4ab0:	0000933d 	.word	0x0000933d

00004ab4 <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    4ab4:	b580      	push	{r7, lr}
    4ab6:	b086      	sub	sp, #24
    4ab8:	af00      	add	r7, sp, #0
    4aba:	6078      	str	r0, [r7, #4]
    4abc:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    4abe:	687b      	ldr	r3, [r7, #4]
    4ac0:	2b00      	cmp	r3, #0
    4ac2:	bf14      	ite	ne
    4ac4:	2301      	movne	r3, #1
    4ac6:	2300      	moveq	r3, #0
    4ac8:	b2db      	uxtb	r3, r3
    4aca:	f44f 7203 	mov.w	r2, #524	; 0x20c
    4ace:	4915      	ldr	r1, [pc, #84]	; (4b24 <calendar_set_time+0x70>)
    4ad0:	4618      	mov	r0, r3
    4ad2:	4b15      	ldr	r3, [pc, #84]	; (4b28 <calendar_set_time+0x74>)
    4ad4:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    4ad6:	687b      	ldr	r3, [r7, #4]
    4ad8:	4618      	mov	r0, r3
    4ada:	4b14      	ldr	r3, [pc, #80]	; (4b2c <calendar_set_time+0x78>)
    4adc:	4798      	blx	r3
    4ade:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    4ae0:	f107 0308 	add.w	r3, r7, #8
    4ae4:	461a      	mov	r2, r3
    4ae6:	6979      	ldr	r1, [r7, #20]
    4ae8:	6878      	ldr	r0, [r7, #4]
    4aea:	4b11      	ldr	r3, [pc, #68]	; (4b30 <calendar_set_time+0x7c>)
    4aec:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    4aee:	683b      	ldr	r3, [r7, #0]
    4af0:	781b      	ldrb	r3, [r3, #0]
    4af2:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    4af4:	683b      	ldr	r3, [r7, #0]
    4af6:	785b      	ldrb	r3, [r3, #1]
    4af8:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    4afa:	683b      	ldr	r3, [r7, #0]
    4afc:	789b      	ldrb	r3, [r3, #2]
    4afe:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    4b00:	f107 0308 	add.w	r3, r7, #8
    4b04:	4619      	mov	r1, r3
    4b06:	6878      	ldr	r0, [r7, #4]
    4b08:	4b0a      	ldr	r3, [pc, #40]	; (4b34 <calendar_set_time+0x80>)
    4b0a:	4798      	blx	r3
    4b0c:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    4b0e:	687b      	ldr	r3, [r7, #4]
    4b10:	6939      	ldr	r1, [r7, #16]
    4b12:	4618      	mov	r0, r3
    4b14:	4b08      	ldr	r3, [pc, #32]	; (4b38 <calendar_set_time+0x84>)
    4b16:	4798      	blx	r3

	return ERR_NONE;
    4b18:	2300      	movs	r3, #0
}
    4b1a:	4618      	mov	r0, r3
    4b1c:	3718      	adds	r7, #24
    4b1e:	46bd      	mov	sp, r7
    4b20:	bd80      	pop	{r7, pc}
    4b22:	bf00      	nop
    4b24:	0001cf68 	.word	0x0001cf68
    4b28:	00006991 	.word	0x00006991
    4b2c:	000093d9 	.word	0x000093d9
    4b30:	000047ed 	.word	0x000047ed
    4b34:	000048f9 	.word	0x000048f9
    4b38:	00009389 	.word	0x00009389

00004b3c <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    4b3c:	b580      	push	{r7, lr}
    4b3e:	b086      	sub	sp, #24
    4b40:	af00      	add	r7, sp, #0
    4b42:	6078      	str	r0, [r7, #4]
    4b44:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    4b46:	687b      	ldr	r3, [r7, #4]
    4b48:	2b00      	cmp	r3, #0
    4b4a:	bf14      	ite	ne
    4b4c:	2301      	movne	r3, #1
    4b4e:	2300      	moveq	r3, #0
    4b50:	b2db      	uxtb	r3, r3
    4b52:	f44f 7209 	mov.w	r2, #548	; 0x224
    4b56:	4915      	ldr	r1, [pc, #84]	; (4bac <calendar_set_date+0x70>)
    4b58:	4618      	mov	r0, r3
    4b5a:	4b15      	ldr	r3, [pc, #84]	; (4bb0 <calendar_set_date+0x74>)
    4b5c:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    4b5e:	687b      	ldr	r3, [r7, #4]
    4b60:	4618      	mov	r0, r3
    4b62:	4b14      	ldr	r3, [pc, #80]	; (4bb4 <calendar_set_date+0x78>)
    4b64:	4798      	blx	r3
    4b66:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    4b68:	f107 0308 	add.w	r3, r7, #8
    4b6c:	461a      	mov	r2, r3
    4b6e:	6979      	ldr	r1, [r7, #20]
    4b70:	6878      	ldr	r0, [r7, #4]
    4b72:	4b11      	ldr	r3, [pc, #68]	; (4bb8 <calendar_set_date+0x7c>)
    4b74:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    4b76:	683b      	ldr	r3, [r7, #0]
    4b78:	781b      	ldrb	r3, [r3, #0]
    4b7a:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    4b7c:	683b      	ldr	r3, [r7, #0]
    4b7e:	785b      	ldrb	r3, [r3, #1]
    4b80:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    4b82:	683b      	ldr	r3, [r7, #0]
    4b84:	885b      	ldrh	r3, [r3, #2]
    4b86:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    4b88:	f107 0308 	add.w	r3, r7, #8
    4b8c:	4619      	mov	r1, r3
    4b8e:	6878      	ldr	r0, [r7, #4]
    4b90:	4b0a      	ldr	r3, [pc, #40]	; (4bbc <calendar_set_date+0x80>)
    4b92:	4798      	blx	r3
    4b94:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    4b96:	687b      	ldr	r3, [r7, #4]
    4b98:	6939      	ldr	r1, [r7, #16]
    4b9a:	4618      	mov	r0, r3
    4b9c:	4b08      	ldr	r3, [pc, #32]	; (4bc0 <calendar_set_date+0x84>)
    4b9e:	4798      	blx	r3

	return ERR_NONE;
    4ba0:	2300      	movs	r3, #0
}
    4ba2:	4618      	mov	r0, r3
    4ba4:	3718      	adds	r7, #24
    4ba6:	46bd      	mov	sp, r7
    4ba8:	bd80      	pop	{r7, pc}
    4baa:	bf00      	nop
    4bac:	0001cf68 	.word	0x0001cf68
    4bb0:	00006991 	.word	0x00006991
    4bb4:	000093d9 	.word	0x000093d9
    4bb8:	000047ed 	.word	0x000047ed
    4bbc:	000048f9 	.word	0x000048f9
    4bc0:	00009389 	.word	0x00009389

00004bc4 <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    4bc4:	b580      	push	{r7, lr}
    4bc6:	b084      	sub	sp, #16
    4bc8:	af00      	add	r7, sp, #0
    4bca:	6078      	str	r0, [r7, #4]
    4bcc:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    4bce:	687b      	ldr	r3, [r7, #4]
    4bd0:	2b00      	cmp	r3, #0
    4bd2:	bf14      	ite	ne
    4bd4:	2301      	movne	r3, #1
    4bd6:	2300      	moveq	r3, #0
    4bd8:	b2db      	uxtb	r3, r3
    4bda:	f240 223b 	movw	r2, #571	; 0x23b
    4bde:	4909      	ldr	r1, [pc, #36]	; (4c04 <calendar_get_date_time+0x40>)
    4be0:	4618      	mov	r0, r3
    4be2:	4b09      	ldr	r3, [pc, #36]	; (4c08 <calendar_get_date_time+0x44>)
    4be4:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    4be6:	687b      	ldr	r3, [r7, #4]
    4be8:	4618      	mov	r0, r3
    4bea:	4b08      	ldr	r3, [pc, #32]	; (4c0c <calendar_get_date_time+0x48>)
    4bec:	4798      	blx	r3
    4bee:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    4bf0:	683a      	ldr	r2, [r7, #0]
    4bf2:	68f9      	ldr	r1, [r7, #12]
    4bf4:	6878      	ldr	r0, [r7, #4]
    4bf6:	4b06      	ldr	r3, [pc, #24]	; (4c10 <calendar_get_date_time+0x4c>)
    4bf8:	4798      	blx	r3

	return ERR_NONE;
    4bfa:	2300      	movs	r3, #0
}
    4bfc:	4618      	mov	r0, r3
    4bfe:	3710      	adds	r7, #16
    4c00:	46bd      	mov	sp, r7
    4c02:	bd80      	pop	{r7, pc}
    4c04:	0001cf68 	.word	0x0001cf68
    4c08:	00006991 	.word	0x00006991
    4c0c:	000093d9 	.word	0x000093d9
    4c10:	000047ed 	.word	0x000047ed

00004c14 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    4c14:	b580      	push	{r7, lr}
    4c16:	b084      	sub	sp, #16
    4c18:	af00      	add	r7, sp, #0
    4c1a:	6078      	str	r0, [r7, #4]
    4c1c:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    4c1e:	687b      	ldr	r3, [r7, #4]
    4c20:	2b00      	cmp	r3, #0
    4c22:	d004      	beq.n	4c2e <can_async_init+0x1a>
    4c24:	683b      	ldr	r3, [r7, #0]
    4c26:	2b00      	cmp	r3, #0
    4c28:	d001      	beq.n	4c2e <can_async_init+0x1a>
    4c2a:	2301      	movs	r3, #1
    4c2c:	e000      	b.n	4c30 <can_async_init+0x1c>
    4c2e:	2300      	movs	r3, #0
    4c30:	f003 0301 	and.w	r3, r3, #1
    4c34:	b2db      	uxtb	r3, r3
    4c36:	2241      	movs	r2, #65	; 0x41
    4c38:	490e      	ldr	r1, [pc, #56]	; (4c74 <can_async_init+0x60>)
    4c3a:	4618      	mov	r0, r3
    4c3c:	4b0e      	ldr	r3, [pc, #56]	; (4c78 <can_async_init+0x64>)
    4c3e:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    4c40:	687b      	ldr	r3, [r7, #4]
    4c42:	6839      	ldr	r1, [r7, #0]
    4c44:	4618      	mov	r0, r3
    4c46:	4b0d      	ldr	r3, [pc, #52]	; (4c7c <can_async_init+0x68>)
    4c48:	4798      	blx	r3
    4c4a:	60f8      	str	r0, [r7, #12]
	if (rc) {
    4c4c:	68fb      	ldr	r3, [r7, #12]
    4c4e:	2b00      	cmp	r3, #0
    4c50:	d001      	beq.n	4c56 <can_async_init+0x42>
		return rc;
    4c52:	68fb      	ldr	r3, [r7, #12]
    4c54:	e009      	b.n	4c6a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    4c56:	687b      	ldr	r3, [r7, #4]
    4c58:	4a09      	ldr	r2, [pc, #36]	; (4c80 <can_async_init+0x6c>)
    4c5a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    4c5c:	687b      	ldr	r3, [r7, #4]
    4c5e:	4a09      	ldr	r2, [pc, #36]	; (4c84 <can_async_init+0x70>)
    4c60:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    4c62:	687b      	ldr	r3, [r7, #4]
    4c64:	4a08      	ldr	r2, [pc, #32]	; (4c88 <can_async_init+0x74>)
    4c66:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    4c68:	2300      	movs	r3, #0
}
    4c6a:	4618      	mov	r0, r3
    4c6c:	3710      	adds	r7, #16
    4c6e:	46bd      	mov	sp, r7
    4c70:	bd80      	pop	{r7, pc}
    4c72:	bf00      	nop
    4c74:	0001cf84 	.word	0x0001cf84
    4c78:	00006991 	.word	0x00006991
    4c7c:	00006eed 	.word	0x00006eed
    4c80:	00004c8d 	.word	0x00004c8d
    4c84:	00004cb1 	.word	0x00004cb1
    4c88:	00004cd5 	.word	0x00004cd5

00004c8c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    4c8c:	b580      	push	{r7, lr}
    4c8e:	b084      	sub	sp, #16
    4c90:	af00      	add	r7, sp, #0
    4c92:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4c94:	687b      	ldr	r3, [r7, #4]
    4c96:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    4c98:	68fb      	ldr	r3, [r7, #12]
    4c9a:	69db      	ldr	r3, [r3, #28]
    4c9c:	2b00      	cmp	r3, #0
    4c9e:	d003      	beq.n	4ca8 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    4ca0:	68fb      	ldr	r3, [r7, #12]
    4ca2:	69db      	ldr	r3, [r3, #28]
    4ca4:	68f8      	ldr	r0, [r7, #12]
    4ca6:	4798      	blx	r3
	}
}
    4ca8:	bf00      	nop
    4caa:	3710      	adds	r7, #16
    4cac:	46bd      	mov	sp, r7
    4cae:	bd80      	pop	{r7, pc}

00004cb0 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    4cb0:	b580      	push	{r7, lr}
    4cb2:	b084      	sub	sp, #16
    4cb4:	af00      	add	r7, sp, #0
    4cb6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    4cbc:	68fb      	ldr	r3, [r7, #12]
    4cbe:	6a1b      	ldr	r3, [r3, #32]
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d003      	beq.n	4ccc <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    4cc4:	68fb      	ldr	r3, [r7, #12]
    4cc6:	6a1b      	ldr	r3, [r3, #32]
    4cc8:	68f8      	ldr	r0, [r7, #12]
    4cca:	4798      	blx	r3
	}
}
    4ccc:	bf00      	nop
    4cce:	3710      	adds	r7, #16
    4cd0:	46bd      	mov	sp, r7
    4cd2:	bd80      	pop	{r7, pc}

00004cd4 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    4cd4:	b580      	push	{r7, lr}
    4cd6:	b084      	sub	sp, #16
    4cd8:	af00      	add	r7, sp, #0
    4cda:	6078      	str	r0, [r7, #4]
    4cdc:	460b      	mov	r3, r1
    4cde:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4ce0:	687b      	ldr	r3, [r7, #4]
    4ce2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    4ce4:	68fb      	ldr	r3, [r7, #12]
    4ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d005      	beq.n	4cf8 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    4cec:	68fb      	ldr	r3, [r7, #12]
    4cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4cf0:	78fa      	ldrb	r2, [r7, #3]
    4cf2:	4611      	mov	r1, r2
    4cf4:	68f8      	ldr	r0, [r7, #12]
    4cf6:	4798      	blx	r3
	}
}
    4cf8:	bf00      	nop
    4cfa:	3710      	adds	r7, #16
    4cfc:	46bd      	mov	sp, r7
    4cfe:	bd80      	pop	{r7, pc}

00004d00 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    4d00:	b580      	push	{r7, lr}
    4d02:	b082      	sub	sp, #8
    4d04:	af00      	add	r7, sp, #0
    4d06:	6078      	str	r0, [r7, #4]
    4d08:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	2b00      	cmp	r3, #0
    4d0e:	d004      	beq.n	4d1a <crc_sync_init+0x1a>
    4d10:	683b      	ldr	r3, [r7, #0]
    4d12:	2b00      	cmp	r3, #0
    4d14:	d001      	beq.n	4d1a <crc_sync_init+0x1a>
    4d16:	2301      	movs	r3, #1
    4d18:	e000      	b.n	4d1c <crc_sync_init+0x1c>
    4d1a:	2300      	movs	r3, #0
    4d1c:	f003 0301 	and.w	r3, r3, #1
    4d20:	b2db      	uxtb	r3, r3
    4d22:	222b      	movs	r2, #43	; 0x2b
    4d24:	4906      	ldr	r1, [pc, #24]	; (4d40 <crc_sync_init+0x40>)
    4d26:	4618      	mov	r0, r3
    4d28:	4b06      	ldr	r3, [pc, #24]	; (4d44 <crc_sync_init+0x44>)
    4d2a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    4d2c:	687b      	ldr	r3, [r7, #4]
    4d2e:	6839      	ldr	r1, [r7, #0]
    4d30:	4618      	mov	r0, r3
    4d32:	4b05      	ldr	r3, [pc, #20]	; (4d48 <crc_sync_init+0x48>)
    4d34:	4798      	blx	r3
    4d36:	4603      	mov	r3, r0
}
    4d38:	4618      	mov	r0, r3
    4d3a:	3708      	adds	r7, #8
    4d3c:	46bd      	mov	sp, r7
    4d3e:	bd80      	pop	{r7, pc}
    4d40:	0001cfa0 	.word	0x0001cfa0
    4d44:	00006991 	.word	0x00006991
    4d48:	00007715 	.word	0x00007715

00004d4c <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
    4d4c:	b580      	push	{r7, lr}
    4d4e:	b082      	sub	sp, #8
    4d50:	af00      	add	r7, sp, #0
    4d52:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    4d54:	687b      	ldr	r3, [r7, #4]
    4d56:	2b00      	cmp	r3, #0
    4d58:	bf14      	ite	ne
    4d5a:	2301      	movne	r3, #1
    4d5c:	2300      	moveq	r3, #0
    4d5e:	b2db      	uxtb	r3, r3
    4d60:	223f      	movs	r2, #63	; 0x3f
    4d62:	4906      	ldr	r1, [pc, #24]	; (4d7c <crc_sync_enable+0x30>)
    4d64:	4618      	mov	r0, r3
    4d66:	4b06      	ldr	r3, [pc, #24]	; (4d80 <crc_sync_enable+0x34>)
    4d68:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	4618      	mov	r0, r3
    4d6e:	4b05      	ldr	r3, [pc, #20]	; (4d84 <crc_sync_enable+0x38>)
    4d70:	4798      	blx	r3
    4d72:	4603      	mov	r3, r0
}
    4d74:	4618      	mov	r0, r3
    4d76:	3708      	adds	r7, #8
    4d78:	46bd      	mov	sp, r7
    4d7a:	bd80      	pop	{r7, pc}
    4d7c:	0001cfa0 	.word	0x0001cfa0
    4d80:	00006991 	.word	0x00006991
    4d84:	00007733 	.word	0x00007733

00004d88 <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
    4d88:	b590      	push	{r4, r7, lr}
    4d8a:	b085      	sub	sp, #20
    4d8c:	af00      	add	r7, sp, #0
    4d8e:	60f8      	str	r0, [r7, #12]
    4d90:	60b9      	str	r1, [r7, #8]
    4d92:	607a      	str	r2, [r7, #4]
    4d94:	603b      	str	r3, [r7, #0]
	ASSERT(descr && data && len && pcrc);
    4d96:	68fb      	ldr	r3, [r7, #12]
    4d98:	2b00      	cmp	r3, #0
    4d9a:	d00a      	beq.n	4db2 <crc_sync_crc32+0x2a>
    4d9c:	68bb      	ldr	r3, [r7, #8]
    4d9e:	2b00      	cmp	r3, #0
    4da0:	d007      	beq.n	4db2 <crc_sync_crc32+0x2a>
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	2b00      	cmp	r3, #0
    4da6:	d004      	beq.n	4db2 <crc_sync_crc32+0x2a>
    4da8:	683b      	ldr	r3, [r7, #0]
    4daa:	2b00      	cmp	r3, #0
    4dac:	d001      	beq.n	4db2 <crc_sync_crc32+0x2a>
    4dae:	2301      	movs	r3, #1
    4db0:	e000      	b.n	4db4 <crc_sync_crc32+0x2c>
    4db2:	2300      	movs	r3, #0
    4db4:	f003 0301 	and.w	r3, r3, #1
    4db8:	b2db      	uxtb	r3, r3
    4dba:	2253      	movs	r2, #83	; 0x53
    4dbc:	4907      	ldr	r1, [pc, #28]	; (4ddc <crc_sync_crc32+0x54>)
    4dbe:	4618      	mov	r0, r3
    4dc0:	4b07      	ldr	r3, [pc, #28]	; (4de0 <crc_sync_crc32+0x58>)
    4dc2:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
    4dc4:	68f8      	ldr	r0, [r7, #12]
    4dc6:	683b      	ldr	r3, [r7, #0]
    4dc8:	687a      	ldr	r2, [r7, #4]
    4dca:	68b9      	ldr	r1, [r7, #8]
    4dcc:	4c05      	ldr	r4, [pc, #20]	; (4de4 <crc_sync_crc32+0x5c>)
    4dce:	47a0      	blx	r4
    4dd0:	4603      	mov	r3, r0
}
    4dd2:	4618      	mov	r0, r3
    4dd4:	3714      	adds	r7, #20
    4dd6:	46bd      	mov	sp, r7
    4dd8:	bd90      	pop	{r4, r7, pc}
    4dda:	bf00      	nop
    4ddc:	0001cfa0 	.word	0x0001cfa0
    4de0:	00006991 	.word	0x00006991
    4de4:	00007749 	.word	0x00007749

00004de8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    4de8:	b590      	push	{r4, r7, lr}
    4dea:	b083      	sub	sp, #12
    4dec:	af00      	add	r7, sp, #0
    4dee:	4603      	mov	r3, r0
    4df0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    4df2:	4b07      	ldr	r3, [pc, #28]	; (4e10 <delay_us+0x28>)
    4df4:	681c      	ldr	r4, [r3, #0]
    4df6:	88fb      	ldrh	r3, [r7, #6]
    4df8:	4618      	mov	r0, r3
    4dfa:	4b06      	ldr	r3, [pc, #24]	; (4e14 <delay_us+0x2c>)
    4dfc:	4798      	blx	r3
    4dfe:	4603      	mov	r3, r0
    4e00:	4619      	mov	r1, r3
    4e02:	4620      	mov	r0, r4
    4e04:	4b04      	ldr	r3, [pc, #16]	; (4e18 <delay_us+0x30>)
    4e06:	4798      	blx	r3
}
    4e08:	bf00      	nop
    4e0a:	370c      	adds	r7, #12
    4e0c:	46bd      	mov	sp, r7
    4e0e:	bd90      	pop	{r4, r7, pc}
    4e10:	20003424 	.word	0x20003424
    4e14:	00007345 	.word	0x00007345
    4e18:	000074d9 	.word	0x000074d9

00004e1c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4e1c:	b590      	push	{r4, r7, lr}
    4e1e:	b083      	sub	sp, #12
    4e20:	af00      	add	r7, sp, #0
    4e22:	4603      	mov	r3, r0
    4e24:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    4e26:	4b07      	ldr	r3, [pc, #28]	; (4e44 <delay_ms+0x28>)
    4e28:	681c      	ldr	r4, [r3, #0]
    4e2a:	88fb      	ldrh	r3, [r7, #6]
    4e2c:	4618      	mov	r0, r3
    4e2e:	4b06      	ldr	r3, [pc, #24]	; (4e48 <delay_ms+0x2c>)
    4e30:	4798      	blx	r3
    4e32:	4603      	mov	r3, r0
    4e34:	4619      	mov	r1, r3
    4e36:	4620      	mov	r0, r4
    4e38:	4b04      	ldr	r3, [pc, #16]	; (4e4c <delay_ms+0x30>)
    4e3a:	4798      	blx	r3
}
    4e3c:	bf00      	nop
    4e3e:	370c      	adds	r7, #12
    4e40:	46bd      	mov	sp, r7
    4e42:	bd90      	pop	{r4, r7, pc}
    4e44:	20003424 	.word	0x20003424
    4e48:	000074b1 	.word	0x000074b1
    4e4c:	000074d9 	.word	0x000074d9

00004e50 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4e50:	b580      	push	{r7, lr}
    4e52:	af00      	add	r7, sp, #0
	return _event_system_init();
    4e54:	4b02      	ldr	r3, [pc, #8]	; (4e60 <event_system_init+0x10>)
    4e56:	4798      	blx	r3
    4e58:	4603      	mov	r3, r0
}
    4e5a:	4618      	mov	r0, r3
    4e5c:	bd80      	pop	{r7, pc}
    4e5e:	bf00      	nop
    4e60:	00007f79 	.word	0x00007f79

00004e64 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    4e64:	b580      	push	{r7, lr}
    4e66:	b082      	sub	sp, #8
    4e68:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4e6a:	2300      	movs	r3, #0
    4e6c:	80fb      	strh	r3, [r7, #6]
    4e6e:	e00e      	b.n	4e8e <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    4e70:	88fb      	ldrh	r3, [r7, #6]
    4e72:	4a0c      	ldr	r2, [pc, #48]	; (4ea4 <ext_irq_init+0x40>)
    4e74:	00db      	lsls	r3, r3, #3
    4e76:	4413      	add	r3, r2
    4e78:	f04f 32ff 	mov.w	r2, #4294967295
    4e7c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    4e7e:	88fb      	ldrh	r3, [r7, #6]
    4e80:	4a08      	ldr	r2, [pc, #32]	; (4ea4 <ext_irq_init+0x40>)
    4e82:	2100      	movs	r1, #0
    4e84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4e88:	88fb      	ldrh	r3, [r7, #6]
    4e8a:	3301      	adds	r3, #1
    4e8c:	80fb      	strh	r3, [r7, #6]
    4e8e:	88fb      	ldrh	r3, [r7, #6]
    4e90:	2b04      	cmp	r3, #4
    4e92:	d9ed      	bls.n	4e70 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    4e94:	4804      	ldr	r0, [pc, #16]	; (4ea8 <ext_irq_init+0x44>)
    4e96:	4b05      	ldr	r3, [pc, #20]	; (4eac <ext_irq_init+0x48>)
    4e98:	4798      	blx	r3
    4e9a:	4603      	mov	r3, r0
}
    4e9c:	4618      	mov	r0, r3
    4e9e:	3708      	adds	r7, #8
    4ea0:	46bd      	mov	sp, r7
    4ea2:	bd80      	pop	{r7, pc}
    4ea4:	20003428 	.word	0x20003428
    4ea8:	00005009 	.word	0x00005009
    4eac:	00007b85 	.word	0x00007b85

00004eb0 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    4eb0:	b580      	push	{r7, lr}
    4eb2:	b086      	sub	sp, #24
    4eb4:	af00      	add	r7, sp, #0
    4eb6:	6078      	str	r0, [r7, #4]
    4eb8:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    4eba:	2300      	movs	r3, #0
    4ebc:	75fb      	strb	r3, [r7, #23]
    4ebe:	2300      	movs	r3, #0
    4ec0:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    4ec2:	2300      	movs	r3, #0
    4ec4:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    4ec6:	e012      	b.n	4eee <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    4ec8:	7dfb      	ldrb	r3, [r7, #23]
    4eca:	4a4d      	ldr	r2, [pc, #308]	; (5000 <ext_irq_register+0x150>)
    4ecc:	00db      	lsls	r3, r3, #3
    4ece:	4413      	add	r3, r2
    4ed0:	685a      	ldr	r2, [r3, #4]
    4ed2:	687b      	ldr	r3, [r7, #4]
    4ed4:	429a      	cmp	r2, r3
    4ed6:	d107      	bne.n	4ee8 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    4ed8:	7dfb      	ldrb	r3, [r7, #23]
    4eda:	4949      	ldr	r1, [pc, #292]	; (5000 <ext_irq_register+0x150>)
    4edc:	683a      	ldr	r2, [r7, #0]
    4ede:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    4ee2:	2301      	movs	r3, #1
    4ee4:	757b      	strb	r3, [r7, #21]
			break;
    4ee6:	e005      	b.n	4ef4 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    4ee8:	7dfb      	ldrb	r3, [r7, #23]
    4eea:	3301      	adds	r3, #1
    4eec:	75fb      	strb	r3, [r7, #23]
    4eee:	7dfb      	ldrb	r3, [r7, #23]
    4ef0:	2b04      	cmp	r3, #4
    4ef2:	d9e9      	bls.n	4ec8 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    4ef4:	683b      	ldr	r3, [r7, #0]
    4ef6:	2b00      	cmp	r3, #0
    4ef8:	d10e      	bne.n	4f18 <ext_irq_register+0x68>
		if (!found) {
    4efa:	7d7b      	ldrb	r3, [r7, #21]
    4efc:	f083 0301 	eor.w	r3, r3, #1
    4f00:	b2db      	uxtb	r3, r3
    4f02:	2b00      	cmp	r3, #0
    4f04:	d002      	beq.n	4f0c <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    4f06:	f06f 030c 	mvn.w	r3, #12
    4f0a:	e074      	b.n	4ff6 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    4f0c:	2100      	movs	r1, #0
    4f0e:	6878      	ldr	r0, [r7, #4]
    4f10:	4b3c      	ldr	r3, [pc, #240]	; (5004 <ext_irq_register+0x154>)
    4f12:	4798      	blx	r3
    4f14:	4603      	mov	r3, r0
    4f16:	e06e      	b.n	4ff6 <ext_irq_register+0x146>
	}

	if (!found) {
    4f18:	7d7b      	ldrb	r3, [r7, #21]
    4f1a:	f083 0301 	eor.w	r3, r3, #1
    4f1e:	b2db      	uxtb	r3, r3
    4f20:	2b00      	cmp	r3, #0
    4f22:	d05a      	beq.n	4fda <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4f24:	2300      	movs	r3, #0
    4f26:	75fb      	strb	r3, [r7, #23]
    4f28:	e016      	b.n	4f58 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    4f2a:	7dfb      	ldrb	r3, [r7, #23]
    4f2c:	4a34      	ldr	r2, [pc, #208]	; (5000 <ext_irq_register+0x150>)
    4f2e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4f32:	2b00      	cmp	r3, #0
    4f34:	d10d      	bne.n	4f52 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    4f36:	7dfb      	ldrb	r3, [r7, #23]
    4f38:	4931      	ldr	r1, [pc, #196]	; (5000 <ext_irq_register+0x150>)
    4f3a:	683a      	ldr	r2, [r7, #0]
    4f3c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    4f40:	7dfb      	ldrb	r3, [r7, #23]
    4f42:	4a2f      	ldr	r2, [pc, #188]	; (5000 <ext_irq_register+0x150>)
    4f44:	00db      	lsls	r3, r3, #3
    4f46:	4413      	add	r3, r2
    4f48:	687a      	ldr	r2, [r7, #4]
    4f4a:	605a      	str	r2, [r3, #4]
				found           = true;
    4f4c:	2301      	movs	r3, #1
    4f4e:	757b      	strb	r3, [r7, #21]
				break;
    4f50:	e005      	b.n	4f5e <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4f52:	7dfb      	ldrb	r3, [r7, #23]
    4f54:	3301      	adds	r3, #1
    4f56:	75fb      	strb	r3, [r7, #23]
    4f58:	7dfb      	ldrb	r3, [r7, #23]
    4f5a:	2b04      	cmp	r3, #4
    4f5c:	d9e5      	bls.n	4f2a <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    4f5e:	e036      	b.n	4fce <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    4f60:	7dfb      	ldrb	r3, [r7, #23]
    4f62:	4a27      	ldr	r2, [pc, #156]	; (5000 <ext_irq_register+0x150>)
    4f64:	00db      	lsls	r3, r3, #3
    4f66:	4413      	add	r3, r2
    4f68:	685a      	ldr	r2, [r3, #4]
    4f6a:	7dbb      	ldrb	r3, [r7, #22]
    4f6c:	4924      	ldr	r1, [pc, #144]	; (5000 <ext_irq_register+0x150>)
    4f6e:	00db      	lsls	r3, r3, #3
    4f70:	440b      	add	r3, r1
    4f72:	685b      	ldr	r3, [r3, #4]
    4f74:	429a      	cmp	r2, r3
    4f76:	d227      	bcs.n	4fc8 <ext_irq_register+0x118>
    4f78:	7dbb      	ldrb	r3, [r7, #22]
    4f7a:	4a21      	ldr	r2, [pc, #132]	; (5000 <ext_irq_register+0x150>)
    4f7c:	00db      	lsls	r3, r3, #3
    4f7e:	4413      	add	r3, r2
    4f80:	685b      	ldr	r3, [r3, #4]
    4f82:	f1b3 3fff 	cmp.w	r3, #4294967295
    4f86:	d01f      	beq.n	4fc8 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    4f88:	7dbb      	ldrb	r3, [r7, #22]
    4f8a:	491d      	ldr	r1, [pc, #116]	; (5000 <ext_irq_register+0x150>)
    4f8c:	f107 020c 	add.w	r2, r7, #12
    4f90:	00db      	lsls	r3, r3, #3
    4f92:	440b      	add	r3, r1
    4f94:	e893 0003 	ldmia.w	r3, {r0, r1}
    4f98:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    4f9c:	7dbb      	ldrb	r3, [r7, #22]
    4f9e:	7dfa      	ldrb	r2, [r7, #23]
    4fa0:	4817      	ldr	r0, [pc, #92]	; (5000 <ext_irq_register+0x150>)
    4fa2:	4917      	ldr	r1, [pc, #92]	; (5000 <ext_irq_register+0x150>)
    4fa4:	00db      	lsls	r3, r3, #3
    4fa6:	4403      	add	r3, r0
    4fa8:	00d2      	lsls	r2, r2, #3
    4faa:	440a      	add	r2, r1
    4fac:	e892 0003 	ldmia.w	r2, {r0, r1}
    4fb0:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    4fb4:	7dfb      	ldrb	r3, [r7, #23]
    4fb6:	4a12      	ldr	r2, [pc, #72]	; (5000 <ext_irq_register+0x150>)
    4fb8:	00db      	lsls	r3, r3, #3
    4fba:	4413      	add	r3, r2
    4fbc:	f107 020c 	add.w	r2, r7, #12
    4fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
    4fc4:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    4fc8:	7dbb      	ldrb	r3, [r7, #22]
    4fca:	3301      	adds	r3, #1
    4fcc:	75bb      	strb	r3, [r7, #22]
    4fce:	7dbb      	ldrb	r3, [r7, #22]
    4fd0:	2b04      	cmp	r3, #4
    4fd2:	d802      	bhi.n	4fda <ext_irq_register+0x12a>
    4fd4:	7dfb      	ldrb	r3, [r7, #23]
    4fd6:	2b04      	cmp	r3, #4
    4fd8:	d9c2      	bls.n	4f60 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    4fda:	7d7b      	ldrb	r3, [r7, #21]
    4fdc:	f083 0301 	eor.w	r3, r3, #1
    4fe0:	b2db      	uxtb	r3, r3
    4fe2:	2b00      	cmp	r3, #0
    4fe4:	d002      	beq.n	4fec <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    4fe6:	f06f 030c 	mvn.w	r3, #12
    4fea:	e004      	b.n	4ff6 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    4fec:	2101      	movs	r1, #1
    4fee:	6878      	ldr	r0, [r7, #4]
    4ff0:	4b04      	ldr	r3, [pc, #16]	; (5004 <ext_irq_register+0x154>)
    4ff2:	4798      	blx	r3
    4ff4:	4603      	mov	r3, r0
}
    4ff6:	4618      	mov	r0, r3
    4ff8:	3718      	adds	r7, #24
    4ffa:	46bd      	mov	sp, r7
    4ffc:	bd80      	pop	{r7, pc}
    4ffe:	bf00      	nop
    5000:	20003428 	.word	0x20003428
    5004:	00007cd1 	.word	0x00007cd1

00005008 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    5008:	b580      	push	{r7, lr}
    500a:	b084      	sub	sp, #16
    500c:	af00      	add	r7, sp, #0
    500e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    5010:	2300      	movs	r3, #0
    5012:	73fb      	strb	r3, [r7, #15]
    5014:	2305      	movs	r3, #5
    5016:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    5018:	e02a      	b.n	5070 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    501a:	7bba      	ldrb	r2, [r7, #14]
    501c:	7bfb      	ldrb	r3, [r7, #15]
    501e:	4413      	add	r3, r2
    5020:	105b      	asrs	r3, r3, #1
    5022:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    5024:	7b7b      	ldrb	r3, [r7, #13]
    5026:	2b04      	cmp	r3, #4
    5028:	d827      	bhi.n	507a <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    502a:	7b7b      	ldrb	r3, [r7, #13]
    502c:	4a16      	ldr	r2, [pc, #88]	; (5088 <process_ext_irq+0x80>)
    502e:	00db      	lsls	r3, r3, #3
    5030:	4413      	add	r3, r2
    5032:	685a      	ldr	r2, [r3, #4]
    5034:	687b      	ldr	r3, [r7, #4]
    5036:	429a      	cmp	r2, r3
    5038:	d10b      	bne.n	5052 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    503a:	7b7b      	ldrb	r3, [r7, #13]
    503c:	4a12      	ldr	r2, [pc, #72]	; (5088 <process_ext_irq+0x80>)
    503e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    5042:	2b00      	cmp	r3, #0
    5044:	d01b      	beq.n	507e <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    5046:	7b7b      	ldrb	r3, [r7, #13]
    5048:	4a0f      	ldr	r2, [pc, #60]	; (5088 <process_ext_irq+0x80>)
    504a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    504e:	4798      	blx	r3
			}
			return;
    5050:	e015      	b.n	507e <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    5052:	7b7b      	ldrb	r3, [r7, #13]
    5054:	4a0c      	ldr	r2, [pc, #48]	; (5088 <process_ext_irq+0x80>)
    5056:	00db      	lsls	r3, r3, #3
    5058:	4413      	add	r3, r2
    505a:	685a      	ldr	r2, [r3, #4]
    505c:	687b      	ldr	r3, [r7, #4]
    505e:	429a      	cmp	r2, r3
    5060:	d203      	bcs.n	506a <process_ext_irq+0x62>
			lower = middle + 1;
    5062:	7b7b      	ldrb	r3, [r7, #13]
    5064:	3301      	adds	r3, #1
    5066:	73fb      	strb	r3, [r7, #15]
    5068:	e002      	b.n	5070 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    506a:	7b7b      	ldrb	r3, [r7, #13]
    506c:	3b01      	subs	r3, #1
    506e:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    5070:	7bba      	ldrb	r2, [r7, #14]
    5072:	7bfb      	ldrb	r3, [r7, #15]
    5074:	429a      	cmp	r2, r3
    5076:	d2d0      	bcs.n	501a <process_ext_irq+0x12>
    5078:	e002      	b.n	5080 <process_ext_irq+0x78>
			return;
    507a:	bf00      	nop
    507c:	e000      	b.n	5080 <process_ext_irq+0x78>
			return;
    507e:	bf00      	nop
		}
	}
}
    5080:	3710      	adds	r7, #16
    5082:	46bd      	mov	sp, r7
    5084:	bd80      	pop	{r7, pc}
    5086:	bf00      	nop
    5088:	20003428 	.word	0x20003428

0000508c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    508c:	b580      	push	{r7, lr}
    508e:	b084      	sub	sp, #16
    5090:	af00      	add	r7, sp, #0
    5092:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    5094:	687b      	ldr	r3, [r7, #4]
    5096:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5098:	687b      	ldr	r3, [r7, #4]
    509a:	885b      	ldrh	r3, [r3, #2]
    509c:	b29b      	uxth	r3, r3
    509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    50a2:	2b00      	cmp	r3, #0
    50a4:	d107      	bne.n	50b6 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    50a6:	68fb      	ldr	r3, [r7, #12]
    50a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    50aa:	2b00      	cmp	r3, #0
    50ac:	d003      	beq.n	50b6 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    50ae:	68fb      	ldr	r3, [r7, #12]
    50b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    50b2:	68f8      	ldr	r0, [r7, #12]
    50b4:	4798      	blx	r3
		}
	}
}
    50b6:	bf00      	nop
    50b8:	3710      	adds	r7, #16
    50ba:	46bd      	mov	sp, r7
    50bc:	bd80      	pop	{r7, pc}

000050be <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    50be:	b580      	push	{r7, lr}
    50c0:	b084      	sub	sp, #16
    50c2:	af00      	add	r7, sp, #0
    50c4:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    50c6:	687b      	ldr	r3, [r7, #4]
    50c8:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    50ca:	687b      	ldr	r3, [r7, #4]
    50cc:	885b      	ldrh	r3, [r3, #2]
    50ce:	b29b      	uxth	r3, r3
    50d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    50d4:	2b00      	cmp	r3, #0
    50d6:	d107      	bne.n	50e8 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    50d8:	68fb      	ldr	r3, [r7, #12]
    50da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    50dc:	2b00      	cmp	r3, #0
    50de:	d003      	beq.n	50e8 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    50e0:	68fb      	ldr	r3, [r7, #12]
    50e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    50e4:	68f8      	ldr	r0, [r7, #12]
    50e6:	4798      	blx	r3
		}
	}
}
    50e8:	bf00      	nop
    50ea:	3710      	adds	r7, #16
    50ec:	46bd      	mov	sp, r7
    50ee:	bd80      	pop	{r7, pc}

000050f0 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    50f0:	b580      	push	{r7, lr}
    50f2:	b084      	sub	sp, #16
    50f4:	af00      	add	r7, sp, #0
    50f6:	6078      	str	r0, [r7, #4]
    50f8:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    50fa:	687b      	ldr	r3, [r7, #4]
    50fc:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    50fe:	687b      	ldr	r3, [r7, #4]
    5100:	885b      	ldrh	r3, [r3, #2]
    5102:	b29b      	uxth	r3, r3
    5104:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5108:	2b00      	cmp	r3, #0
    510a:	d108      	bne.n	511e <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    510c:	68fb      	ldr	r3, [r7, #12]
    510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5110:	2b00      	cmp	r3, #0
    5112:	d004      	beq.n	511e <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    5114:	68fb      	ldr	r3, [r7, #12]
    5116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5118:	6839      	ldr	r1, [r7, #0]
    511a:	68f8      	ldr	r0, [r7, #12]
    511c:	4798      	blx	r3
		}
	}
}
    511e:	bf00      	nop
    5120:	3710      	adds	r7, #16
    5122:	46bd      	mov	sp, r7
    5124:	bd80      	pop	{r7, pc}
	...

00005128 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    5128:	b580      	push	{r7, lr}
    512a:	b08a      	sub	sp, #40	; 0x28
    512c:	af00      	add	r7, sp, #0
    512e:	60f8      	str	r0, [r7, #12]
    5130:	60b9      	str	r1, [r7, #8]
    5132:	4613      	mov	r3, r2
    5134:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    5136:	68fb      	ldr	r3, [r7, #12]
    5138:	3b28      	subs	r3, #40	; 0x28
    513a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    513e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    5140:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    5142:	88fb      	ldrh	r3, [r7, #6]
    5144:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    5146:	f248 0301 	movw	r3, #32769	; 0x8001
    514a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    514c:	68bb      	ldr	r3, [r7, #8]
    514e:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    5150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5152:	f107 0214 	add.w	r2, r7, #20
    5156:	4611      	mov	r1, r2
    5158:	4618      	mov	r0, r3
    515a:	4b06      	ldr	r3, [pc, #24]	; (5174 <i2c_m_async_read+0x4c>)
    515c:	4798      	blx	r3
    515e:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    5160:	6a3b      	ldr	r3, [r7, #32]
    5162:	2b00      	cmp	r3, #0
    5164:	d001      	beq.n	516a <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    5166:	6a3b      	ldr	r3, [r7, #32]
    5168:	e000      	b.n	516c <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    516a:	88fb      	ldrh	r3, [r7, #6]
}
    516c:	4618      	mov	r0, r3
    516e:	3728      	adds	r7, #40	; 0x28
    5170:	46bd      	mov	sp, r7
    5172:	bd80      	pop	{r7, pc}
    5174:	0000a381 	.word	0x0000a381

00005178 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    5178:	b580      	push	{r7, lr}
    517a:	b08a      	sub	sp, #40	; 0x28
    517c:	af00      	add	r7, sp, #0
    517e:	60f8      	str	r0, [r7, #12]
    5180:	60b9      	str	r1, [r7, #8]
    5182:	4613      	mov	r3, r2
    5184:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    5186:	68fb      	ldr	r3, [r7, #12]
    5188:	3b28      	subs	r3, #40	; 0x28
    518a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    518e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    5190:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    5192:	88fb      	ldrh	r3, [r7, #6]
    5194:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    5196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    519a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    519c:	68bb      	ldr	r3, [r7, #8]
    519e:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    51a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51a2:	f107 0214 	add.w	r2, r7, #20
    51a6:	4611      	mov	r1, r2
    51a8:	4618      	mov	r0, r3
    51aa:	4b06      	ldr	r3, [pc, #24]	; (51c4 <i2c_m_async_write+0x4c>)
    51ac:	4798      	blx	r3
    51ae:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    51b0:	6a3b      	ldr	r3, [r7, #32]
    51b2:	2b00      	cmp	r3, #0
    51b4:	d001      	beq.n	51ba <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    51b6:	6a3b      	ldr	r3, [r7, #32]
    51b8:	e000      	b.n	51bc <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    51ba:	88fb      	ldrh	r3, [r7, #6]
}
    51bc:	4618      	mov	r0, r3
    51be:	3728      	adds	r7, #40	; 0x28
    51c0:	46bd      	mov	sp, r7
    51c2:	bd80      	pop	{r7, pc}
    51c4:	0000a381 	.word	0x0000a381

000051c8 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    51c8:	b580      	push	{r7, lr}
    51ca:	b084      	sub	sp, #16
    51cc:	af00      	add	r7, sp, #0
    51ce:	6078      	str	r0, [r7, #4]
    51d0:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    51d2:	687b      	ldr	r3, [r7, #4]
    51d4:	2b00      	cmp	r3, #0
    51d6:	bf14      	ite	ne
    51d8:	2301      	movne	r3, #1
    51da:	2300      	moveq	r3, #0
    51dc:	b2db      	uxtb	r3, r3
    51de:	2289      	movs	r2, #137	; 0x89
    51e0:	4915      	ldr	r1, [pc, #84]	; (5238 <i2c_m_async_init+0x70>)
    51e2:	4618      	mov	r0, r3
    51e4:	4b15      	ldr	r3, [pc, #84]	; (523c <i2c_m_async_init+0x74>)
    51e6:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    51e8:	687b      	ldr	r3, [r7, #4]
    51ea:	6839      	ldr	r1, [r7, #0]
    51ec:	4618      	mov	r0, r3
    51ee:	4b14      	ldr	r3, [pc, #80]	; (5240 <i2c_m_async_init+0x78>)
    51f0:	4798      	blx	r3
    51f2:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    51f4:	68fb      	ldr	r3, [r7, #12]
    51f6:	2b00      	cmp	r3, #0
    51f8:	d001      	beq.n	51fe <i2c_m_async_init+0x36>
		return init_status;
    51fa:	68fb      	ldr	r3, [r7, #12]
    51fc:	e018      	b.n	5230 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    51fe:	687b      	ldr	r3, [r7, #4]
    5200:	4a10      	ldr	r2, [pc, #64]	; (5244 <i2c_m_async_init+0x7c>)
    5202:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	4a10      	ldr	r2, [pc, #64]	; (5248 <i2c_m_async_init+0x80>)
    5208:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    520a:	687b      	ldr	r3, [r7, #4]
    520c:	4a0f      	ldr	r2, [pc, #60]	; (524c <i2c_m_async_init+0x84>)
    520e:	2101      	movs	r1, #1
    5210:	4618      	mov	r0, r3
    5212:	4b0f      	ldr	r3, [pc, #60]	; (5250 <i2c_m_async_init+0x88>)
    5214:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    5216:	687b      	ldr	r3, [r7, #4]
    5218:	4a0e      	ldr	r2, [pc, #56]	; (5254 <i2c_m_async_init+0x8c>)
    521a:	2102      	movs	r1, #2
    521c:	4618      	mov	r0, r3
    521e:	4b0c      	ldr	r3, [pc, #48]	; (5250 <i2c_m_async_init+0x88>)
    5220:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    5222:	687b      	ldr	r3, [r7, #4]
    5224:	4a0c      	ldr	r2, [pc, #48]	; (5258 <i2c_m_async_init+0x90>)
    5226:	2100      	movs	r1, #0
    5228:	4618      	mov	r0, r3
    522a:	4b09      	ldr	r3, [pc, #36]	; (5250 <i2c_m_async_init+0x88>)
    522c:	4798      	blx	r3

	return ERR_NONE;
    522e:	2300      	movs	r3, #0
}
    5230:	4618      	mov	r0, r3
    5232:	3710      	adds	r7, #16
    5234:	46bd      	mov	sp, r7
    5236:	bd80      	pop	{r7, pc}
    5238:	0001cfbc 	.word	0x0001cfbc
    523c:	00006991 	.word	0x00006991
    5240:	0000a1d1 	.word	0x0000a1d1
    5244:	00005129 	.word	0x00005129
    5248:	00005179 	.word	0x00005179
    524c:	0000508d 	.word	0x0000508d
    5250:	0000a455 	.word	0x0000a455
    5254:	000050bf 	.word	0x000050bf
    5258:	000050f1 	.word	0x000050f1

0000525c <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    525c:	b580      	push	{r7, lr}
    525e:	b084      	sub	sp, #16
    5260:	af00      	add	r7, sp, #0
    5262:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    5264:	687b      	ldr	r3, [r7, #4]
    5266:	2b00      	cmp	r3, #0
    5268:	bf14      	ite	ne
    526a:	2301      	movne	r3, #1
    526c:	2300      	moveq	r3, #0
    526e:	b2db      	uxtb	r3, r3
    5270:	22b9      	movs	r2, #185	; 0xb9
    5272:	4911      	ldr	r1, [pc, #68]	; (52b8 <i2c_m_async_enable+0x5c>)
    5274:	4618      	mov	r0, r3
    5276:	4b11      	ldr	r3, [pc, #68]	; (52bc <i2c_m_async_enable+0x60>)
    5278:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    527a:	687b      	ldr	r3, [r7, #4]
    527c:	4618      	mov	r0, r3
    527e:	4b10      	ldr	r3, [pc, #64]	; (52c0 <i2c_m_async_enable+0x64>)
    5280:	4798      	blx	r3
    5282:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    5284:	68fb      	ldr	r3, [r7, #12]
    5286:	2b00      	cmp	r3, #0
    5288:	d111      	bne.n	52ae <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    528a:	687b      	ldr	r3, [r7, #4]
    528c:	2201      	movs	r2, #1
    528e:	2101      	movs	r1, #1
    5290:	4618      	mov	r0, r3
    5292:	4b0c      	ldr	r3, [pc, #48]	; (52c4 <i2c_m_async_enable+0x68>)
    5294:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    5296:	687b      	ldr	r3, [r7, #4]
    5298:	2201      	movs	r2, #1
    529a:	2102      	movs	r1, #2
    529c:	4618      	mov	r0, r3
    529e:	4b09      	ldr	r3, [pc, #36]	; (52c4 <i2c_m_async_enable+0x68>)
    52a0:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    52a2:	687b      	ldr	r3, [r7, #4]
    52a4:	2201      	movs	r2, #1
    52a6:	2100      	movs	r1, #0
    52a8:	4618      	mov	r0, r3
    52aa:	4b06      	ldr	r3, [pc, #24]	; (52c4 <i2c_m_async_enable+0x68>)
    52ac:	4798      	blx	r3
	}
	return rc;
    52ae:	68fb      	ldr	r3, [r7, #12]
}
    52b0:	4618      	mov	r0, r3
    52b2:	3710      	adds	r7, #16
    52b4:	46bd      	mov	sp, r7
    52b6:	bd80      	pop	{r7, pc}
    52b8:	0001cfbc 	.word	0x0001cfbc
    52bc:	00006991 	.word	0x00006991
    52c0:	0000a16d 	.word	0x0000a16d
    52c4:	0000a4e1 	.word	0x0000a4e1

000052c8 <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    52c8:	b480      	push	{r7}
    52ca:	b085      	sub	sp, #20
    52cc:	af00      	add	r7, sp, #0
    52ce:	60f8      	str	r0, [r7, #12]
    52d0:	460b      	mov	r3, r1
    52d2:	607a      	str	r2, [r7, #4]
    52d4:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    52d6:	897b      	ldrh	r3, [r7, #10]
    52d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    52dc:	b21a      	sxth	r2, r3
    52de:	687b      	ldr	r3, [r7, #4]
    52e0:	b21b      	sxth	r3, r3
    52e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    52e6:	b21b      	sxth	r3, r3
    52e8:	4313      	orrs	r3, r2
    52ea:	b21b      	sxth	r3, r3
    52ec:	b29a      	uxth	r2, r3
    52ee:	68fb      	ldr	r3, [r7, #12]
    52f0:	879a      	strh	r2, [r3, #60]	; 0x3c
    52f2:	68fb      	ldr	r3, [r7, #12]
    52f4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    52f6:	4618      	mov	r0, r3
    52f8:	3714      	adds	r7, #20
    52fa:	46bd      	mov	sp, r7
    52fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5300:	4770      	bx	lr

00005302 <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    5302:	b480      	push	{r7}
    5304:	b085      	sub	sp, #20
    5306:	af00      	add	r7, sp, #0
    5308:	60f8      	str	r0, [r7, #12]
    530a:	460b      	mov	r3, r1
    530c:	607a      	str	r2, [r7, #4]
    530e:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    5310:	7afb      	ldrb	r3, [r7, #11]
    5312:	2b01      	cmp	r3, #1
    5314:	d007      	beq.n	5326 <i2c_m_async_register_callback+0x24>
    5316:	2b02      	cmp	r3, #2
    5318:	d009      	beq.n	532e <i2c_m_async_register_callback+0x2c>
    531a:	2b00      	cmp	r3, #0
    531c:	d10b      	bne.n	5336 <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    531e:	68fb      	ldr	r3, [r7, #12]
    5320:	687a      	ldr	r2, [r7, #4]
    5322:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    5324:	e00a      	b.n	533c <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    5326:	68fb      	ldr	r3, [r7, #12]
    5328:	687a      	ldr	r2, [r7, #4]
    532a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    532c:	e006      	b.n	533c <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    532e:	68fb      	ldr	r3, [r7, #12]
    5330:	687a      	ldr	r2, [r7, #4]
    5332:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    5334:	e002      	b.n	533c <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    5336:	f06f 030c 	mvn.w	r3, #12
    533a:	e000      	b.n	533e <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    533c:	2300      	movs	r3, #0
}
    533e:	4618      	mov	r0, r3
    5340:	3714      	adds	r7, #20
    5342:	46bd      	mov	sp, r7
    5344:	f85d 7b04 	ldr.w	r7, [sp], #4
    5348:	4770      	bx	lr

0000534a <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    534a:	b480      	push	{r7}
    534c:	b083      	sub	sp, #12
    534e:	af00      	add	r7, sp, #0
    5350:	6078      	str	r0, [r7, #4]
    5352:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    5354:	687b      	ldr	r3, [r7, #4]
    5356:	f103 0228 	add.w	r2, r3, #40	; 0x28
    535a:	683b      	ldr	r3, [r7, #0]
    535c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    535e:	2300      	movs	r3, #0
}
    5360:	4618      	mov	r0, r3
    5362:	370c      	adds	r7, #12
    5364:	46bd      	mov	sp, r7
    5366:	f85d 7b04 	ldr.w	r7, [sp], #4
    536a:	4770      	bx	lr

0000536c <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    536c:	b580      	push	{r7, lr}
    536e:	b084      	sub	sp, #16
    5370:	af00      	add	r7, sp, #0
    5372:	60f8      	str	r0, [r7, #12]
    5374:	60b9      	str	r1, [r7, #8]
    5376:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    5378:	68fb      	ldr	r3, [r7, #12]
    537a:	2b00      	cmp	r3, #0
    537c:	d004      	beq.n	5388 <pwm_init+0x1c>
    537e:	68bb      	ldr	r3, [r7, #8]
    5380:	2b00      	cmp	r3, #0
    5382:	d001      	beq.n	5388 <pwm_init+0x1c>
    5384:	2301      	movs	r3, #1
    5386:	e000      	b.n	538a <pwm_init+0x1e>
    5388:	2300      	movs	r3, #0
    538a:	f003 0301 	and.w	r3, r3, #1
    538e:	b2db      	uxtb	r3, r3
    5390:	2233      	movs	r2, #51	; 0x33
    5392:	490a      	ldr	r1, [pc, #40]	; (53bc <pwm_init+0x50>)
    5394:	4618      	mov	r0, r3
    5396:	4b0a      	ldr	r3, [pc, #40]	; (53c0 <pwm_init+0x54>)
    5398:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    539a:	68fb      	ldr	r3, [r7, #12]
    539c:	68b9      	ldr	r1, [r7, #8]
    539e:	4618      	mov	r0, r3
    53a0:	4b08      	ldr	r3, [pc, #32]	; (53c4 <pwm_init+0x58>)
    53a2:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    53a4:	68fb      	ldr	r3, [r7, #12]
    53a6:	4a08      	ldr	r2, [pc, #32]	; (53c8 <pwm_init+0x5c>)
    53a8:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    53aa:	68fb      	ldr	r3, [r7, #12]
    53ac:	4a07      	ldr	r2, [pc, #28]	; (53cc <pwm_init+0x60>)
    53ae:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    53b0:	2300      	movs	r3, #0
}
    53b2:	4618      	mov	r0, r3
    53b4:	3710      	adds	r7, #16
    53b6:	46bd      	mov	sp, r7
    53b8:	bd80      	pop	{r7, pc}
    53ba:	bf00      	nop
    53bc:	0001cfdc 	.word	0x0001cfdc
    53c0:	00006991 	.word	0x00006991
    53c4:	0000baed 	.word	0x0000baed
    53c8:	00005425 	.word	0x00005425
    53cc:	00005449 	.word	0x00005449

000053d0 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    53d0:	b580      	push	{r7, lr}
    53d2:	b082      	sub	sp, #8
    53d4:	af00      	add	r7, sp, #0
    53d6:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    53d8:	687b      	ldr	r3, [r7, #4]
    53da:	2b00      	cmp	r3, #0
    53dc:	bf14      	ite	ne
    53de:	2301      	movne	r3, #1
    53e0:	2300      	moveq	r3, #0
    53e2:	b2db      	uxtb	r3, r3
    53e4:	224a      	movs	r2, #74	; 0x4a
    53e6:	490b      	ldr	r1, [pc, #44]	; (5414 <pwm_enable+0x44>)
    53e8:	4618      	mov	r0, r3
    53ea:	4b0b      	ldr	r3, [pc, #44]	; (5418 <pwm_enable+0x48>)
    53ec:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    53ee:	687b      	ldr	r3, [r7, #4]
    53f0:	4618      	mov	r0, r3
    53f2:	4b0a      	ldr	r3, [pc, #40]	; (541c <pwm_enable+0x4c>)
    53f4:	4798      	blx	r3
    53f6:	4603      	mov	r3, r0
    53f8:	2b00      	cmp	r3, #0
    53fa:	d002      	beq.n	5402 <pwm_enable+0x32>
		return ERR_DENIED;
    53fc:	f06f 0310 	mvn.w	r3, #16
    5400:	e004      	b.n	540c <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    5402:	687b      	ldr	r3, [r7, #4]
    5404:	4618      	mov	r0, r3
    5406:	4b06      	ldr	r3, [pc, #24]	; (5420 <pwm_enable+0x50>)
    5408:	4798      	blx	r3

	return ERR_NONE;
    540a:	2300      	movs	r3, #0
}
    540c:	4618      	mov	r0, r3
    540e:	3708      	adds	r7, #8
    5410:	46bd      	mov	sp, r7
    5412:	bd80      	pop	{r7, pc}
    5414:	0001cfdc 	.word	0x0001cfdc
    5418:	00006991 	.word	0x00006991
    541c:	0000bd89 	.word	0x0000bd89
    5420:	0000bd29 	.word	0x0000bd29

00005424 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    5424:	b580      	push	{r7, lr}
    5426:	b084      	sub	sp, #16
    5428:	af00      	add	r7, sp, #0
    542a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    542c:	687b      	ldr	r3, [r7, #4]
    542e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    5430:	68fb      	ldr	r3, [r7, #12]
    5432:	695b      	ldr	r3, [r3, #20]
    5434:	2b00      	cmp	r3, #0
    5436:	d003      	beq.n	5440 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    5438:	68fb      	ldr	r3, [r7, #12]
    543a:	695b      	ldr	r3, [r3, #20]
    543c:	68f8      	ldr	r0, [r7, #12]
    543e:	4798      	blx	r3
	}
}
    5440:	bf00      	nop
    5442:	3710      	adds	r7, #16
    5444:	46bd      	mov	sp, r7
    5446:	bd80      	pop	{r7, pc}

00005448 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    5448:	b580      	push	{r7, lr}
    544a:	b084      	sub	sp, #16
    544c:	af00      	add	r7, sp, #0
    544e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    5450:	687b      	ldr	r3, [r7, #4]
    5452:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    5454:	68fb      	ldr	r3, [r7, #12]
    5456:	699b      	ldr	r3, [r3, #24]
    5458:	2b00      	cmp	r3, #0
    545a:	d003      	beq.n	5464 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    545c:	68fb      	ldr	r3, [r7, #12]
    545e:	699b      	ldr	r3, [r3, #24]
    5460:	68f8      	ldr	r0, [r7, #12]
    5462:	4798      	blx	r3
	}
}
    5464:	bf00      	nop
    5466:	3710      	adds	r7, #16
    5468:	46bd      	mov	sp, r7
    546a:	bd80      	pop	{r7, pc}

0000546c <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    546c:	b580      	push	{r7, lr}
    546e:	b082      	sub	sp, #8
    5470:	af00      	add	r7, sp, #0
    5472:	6078      	str	r0, [r7, #4]
    5474:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    5476:	687b      	ldr	r3, [r7, #4]
    5478:	2b00      	cmp	r3, #0
    547a:	d004      	beq.n	5486 <qspi_sync_init+0x1a>
    547c:	683b      	ldr	r3, [r7, #0]
    547e:	2b00      	cmp	r3, #0
    5480:	d001      	beq.n	5486 <qspi_sync_init+0x1a>
    5482:	2301      	movs	r3, #1
    5484:	e000      	b.n	5488 <qspi_sync_init+0x1c>
    5486:	2300      	movs	r3, #0
    5488:	f003 0301 	and.w	r3, r3, #1
    548c:	b2db      	uxtb	r3, r3
    548e:	2231      	movs	r2, #49	; 0x31
    5490:	4906      	ldr	r1, [pc, #24]	; (54ac <qspi_sync_init+0x40>)
    5492:	4618      	mov	r0, r3
    5494:	4b06      	ldr	r3, [pc, #24]	; (54b0 <qspi_sync_init+0x44>)
    5496:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    5498:	687b      	ldr	r3, [r7, #4]
    549a:	6839      	ldr	r1, [r7, #0]
    549c:	4618      	mov	r0, r3
    549e:	4b05      	ldr	r3, [pc, #20]	; (54b4 <qspi_sync_init+0x48>)
    54a0:	4798      	blx	r3
    54a2:	4603      	mov	r3, r0
}
    54a4:	4618      	mov	r0, r3
    54a6:	3708      	adds	r7, #8
    54a8:	46bd      	mov	sp, r7
    54aa:	bd80      	pop	{r7, pc}
    54ac:	0001cff4 	.word	0x0001cff4
    54b0:	00006991 	.word	0x00006991
    54b4:	00008e4d 	.word	0x00008e4d

000054b8 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    54b8:	b580      	push	{r7, lr}
    54ba:	b082      	sub	sp, #8
    54bc:	af00      	add	r7, sp, #0
    54be:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    54c0:	687b      	ldr	r3, [r7, #4]
    54c2:	2b00      	cmp	r3, #0
    54c4:	bf14      	ite	ne
    54c6:	2301      	movne	r3, #1
    54c8:	2300      	moveq	r3, #0
    54ca:	b2db      	uxtb	r3, r3
    54cc:	223f      	movs	r2, #63	; 0x3f
    54ce:	4906      	ldr	r1, [pc, #24]	; (54e8 <qspi_sync_enable+0x30>)
    54d0:	4618      	mov	r0, r3
    54d2:	4b06      	ldr	r3, [pc, #24]	; (54ec <qspi_sync_enable+0x34>)
    54d4:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    54d6:	687b      	ldr	r3, [r7, #4]
    54d8:	4618      	mov	r0, r3
    54da:	4b05      	ldr	r3, [pc, #20]	; (54f0 <qspi_sync_enable+0x38>)
    54dc:	4798      	blx	r3
    54de:	4603      	mov	r3, r0
}
    54e0:	4618      	mov	r0, r3
    54e2:	3708      	adds	r7, #8
    54e4:	46bd      	mov	sp, r7
    54e6:	bd80      	pop	{r7, pc}
    54e8:	0001cff4 	.word	0x0001cff4
    54ec:	00006991 	.word	0x00006991
    54f0:	00008ec1 	.word	0x00008ec1

000054f4 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    54f4:	b580      	push	{r7, lr}
    54f6:	b082      	sub	sp, #8
    54f8:	af00      	add	r7, sp, #0
    54fa:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    54fc:	687b      	ldr	r3, [r7, #4]
    54fe:	2b00      	cmp	r3, #0
    5500:	bf14      	ite	ne
    5502:	2301      	movne	r3, #1
    5504:	2300      	moveq	r3, #0
    5506:	b2db      	uxtb	r3, r3
    5508:	2246      	movs	r2, #70	; 0x46
    550a:	4906      	ldr	r1, [pc, #24]	; (5524 <qspi_sync_disable+0x30>)
    550c:	4618      	mov	r0, r3
    550e:	4b06      	ldr	r3, [pc, #24]	; (5528 <qspi_sync_disable+0x34>)
    5510:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    5512:	687b      	ldr	r3, [r7, #4]
    5514:	4618      	mov	r0, r3
    5516:	4b05      	ldr	r3, [pc, #20]	; (552c <qspi_sync_disable+0x38>)
    5518:	4798      	blx	r3
    551a:	4603      	mov	r3, r0
}
    551c:	4618      	mov	r0, r3
    551e:	3708      	adds	r7, #8
    5520:	46bd      	mov	sp, r7
    5522:	bd80      	pop	{r7, pc}
    5524:	0001cff4 	.word	0x0001cff4
    5528:	00006991 	.word	0x00006991
    552c:	00008ee5 	.word	0x00008ee5

00005530 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    5530:	b580      	push	{r7, lr}
    5532:	b082      	sub	sp, #8
    5534:	af00      	add	r7, sp, #0
    5536:	6078      	str	r0, [r7, #4]
    5538:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    553a:	687b      	ldr	r3, [r7, #4]
    553c:	2b00      	cmp	r3, #0
    553e:	d004      	beq.n	554a <qspi_sync_serial_run_command+0x1a>
    5540:	683b      	ldr	r3, [r7, #0]
    5542:	2b00      	cmp	r3, #0
    5544:	d001      	beq.n	554a <qspi_sync_serial_run_command+0x1a>
    5546:	2301      	movs	r3, #1
    5548:	e000      	b.n	554c <qspi_sync_serial_run_command+0x1c>
    554a:	2300      	movs	r3, #0
    554c:	f003 0301 	and.w	r3, r3, #1
    5550:	b2db      	uxtb	r3, r3
    5552:	224d      	movs	r2, #77	; 0x4d
    5554:	4906      	ldr	r1, [pc, #24]	; (5570 <qspi_sync_serial_run_command+0x40>)
    5556:	4618      	mov	r0, r3
    5558:	4b06      	ldr	r3, [pc, #24]	; (5574 <qspi_sync_serial_run_command+0x44>)
    555a:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    555c:	687b      	ldr	r3, [r7, #4]
    555e:	6839      	ldr	r1, [r7, #0]
    5560:	4618      	mov	r0, r3
    5562:	4b05      	ldr	r3, [pc, #20]	; (5578 <qspi_sync_serial_run_command+0x48>)
    5564:	4798      	blx	r3
    5566:	4603      	mov	r3, r0
}
    5568:	4618      	mov	r0, r3
    556a:	3708      	adds	r7, #8
    556c:	46bd      	mov	sp, r7
    556e:	bd80      	pop	{r7, pc}
    5570:	0001cff4 	.word	0x0001cff4
    5574:	00006991 	.word	0x00006991
    5578:	00009031 	.word	0x00009031

0000557c <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    557c:	b580      	push	{r7, lr}
    557e:	b084      	sub	sp, #16
    5580:	af00      	add	r7, sp, #0
    5582:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    5584:	687b      	ldr	r3, [r7, #4]
    5586:	3b04      	subs	r3, #4
    5588:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    558a:	687b      	ldr	r3, [r7, #4]
    558c:	791b      	ldrb	r3, [r3, #4]
    558e:	2b01      	cmp	r3, #1
    5590:	d80e      	bhi.n	55b0 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    5592:	68fb      	ldr	r3, [r7, #12]
    5594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5596:	68fb      	ldr	r3, [r7, #12]
    5598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    559a:	1c58      	adds	r0, r3, #1
    559c:	68f9      	ldr	r1, [r7, #12]
    559e:	6448      	str	r0, [r1, #68]	; 0x44
    55a0:	4413      	add	r3, r2
    55a2:	781b      	ldrb	r3, [r3, #0]
    55a4:	b29b      	uxth	r3, r3
    55a6:	4619      	mov	r1, r3
    55a8:	6878      	ldr	r0, [r7, #4]
    55aa:	4b11      	ldr	r3, [pc, #68]	; (55f0 <_spi_dev_tx+0x74>)
    55ac:	4798      	blx	r3
    55ae:	e00d      	b.n	55cc <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    55b0:	68fb      	ldr	r3, [r7, #12]
    55b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    55b4:	68fb      	ldr	r3, [r7, #12]
    55b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    55b8:	1c58      	adds	r0, r3, #1
    55ba:	68f9      	ldr	r1, [r7, #12]
    55bc:	6448      	str	r0, [r1, #68]	; 0x44
    55be:	005b      	lsls	r3, r3, #1
    55c0:	4413      	add	r3, r2
    55c2:	881b      	ldrh	r3, [r3, #0]
    55c4:	4619      	mov	r1, r3
    55c6:	6878      	ldr	r0, [r7, #4]
    55c8:	4b09      	ldr	r3, [pc, #36]	; (55f0 <_spi_dev_tx+0x74>)
    55ca:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    55cc:	68fb      	ldr	r3, [r7, #12]
    55ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    55d0:	68fb      	ldr	r3, [r7, #12]
    55d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    55d4:	429a      	cmp	r2, r3
    55d6:	d107      	bne.n	55e8 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    55d8:	2100      	movs	r1, #0
    55da:	6878      	ldr	r0, [r7, #4]
    55dc:	4b05      	ldr	r3, [pc, #20]	; (55f4 <_spi_dev_tx+0x78>)
    55de:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    55e0:	2101      	movs	r1, #1
    55e2:	6878      	ldr	r0, [r7, #4]
    55e4:	4b04      	ldr	r3, [pc, #16]	; (55f8 <_spi_dev_tx+0x7c>)
    55e6:	4798      	blx	r3
	}
}
    55e8:	bf00      	nop
    55ea:	3710      	adds	r7, #16
    55ec:	46bd      	mov	sp, r7
    55ee:	bd80      	pop	{r7, pc}
    55f0:	0000b39d 	.word	0x0000b39d
    55f4:	0000b261 	.word	0x0000b261
    55f8:	0000b335 	.word	0x0000b335

000055fc <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    55fc:	b590      	push	{r4, r7, lr}
    55fe:	b085      	sub	sp, #20
    5600:	af00      	add	r7, sp, #0
    5602:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    5604:	687b      	ldr	r3, [r7, #4]
    5606:	3b04      	subs	r3, #4
    5608:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    560a:	68fb      	ldr	r3, [r7, #12]
    560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    560e:	2b00      	cmp	r3, #0
    5610:	d021      	beq.n	5656 <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    5612:	687b      	ldr	r3, [r7, #4]
    5614:	791b      	ldrb	r3, [r3, #4]
    5616:	2b01      	cmp	r3, #1
    5618:	d80e      	bhi.n	5638 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    561a:	68fb      	ldr	r3, [r7, #12]
    561c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    561e:	68fb      	ldr	r3, [r7, #12]
    5620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5622:	1c58      	adds	r0, r3, #1
    5624:	68f9      	ldr	r1, [r7, #12]
    5626:	6448      	str	r0, [r1, #68]	; 0x44
    5628:	18d4      	adds	r4, r2, r3
    562a:	6878      	ldr	r0, [r7, #4]
    562c:	4b2e      	ldr	r3, [pc, #184]	; (56e8 <_spi_dev_rx+0xec>)
    562e:	4798      	blx	r3
    5630:	4603      	mov	r3, r0
    5632:	b2db      	uxtb	r3, r3
    5634:	7023      	strb	r3, [r4, #0]
    5636:	e016      	b.n	5666 <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    5638:	68fb      	ldr	r3, [r7, #12]
    563a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    563c:	68fb      	ldr	r3, [r7, #12]
    563e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5640:	1c58      	adds	r0, r3, #1
    5642:	68f9      	ldr	r1, [r7, #12]
    5644:	6448      	str	r0, [r1, #68]	; 0x44
    5646:	005b      	lsls	r3, r3, #1
    5648:	18d4      	adds	r4, r2, r3
    564a:	6878      	ldr	r0, [r7, #4]
    564c:	4b26      	ldr	r3, [pc, #152]	; (56e8 <_spi_dev_rx+0xec>)
    564e:	4798      	blx	r3
    5650:	4603      	mov	r3, r0
    5652:	8023      	strh	r3, [r4, #0]
    5654:	e007      	b.n	5666 <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    5656:	6878      	ldr	r0, [r7, #4]
    5658:	4b23      	ldr	r3, [pc, #140]	; (56e8 <_spi_dev_rx+0xec>)
    565a:	4798      	blx	r3
		spi->xfercnt++;
    565c:	68fb      	ldr	r3, [r7, #12]
    565e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5660:	1c5a      	adds	r2, r3, #1
    5662:	68fb      	ldr	r3, [r7, #12]
    5664:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    5666:	68fb      	ldr	r3, [r7, #12]
    5668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    566a:	68fb      	ldr	r3, [r7, #12]
    566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    566e:	429a      	cmp	r2, r3
    5670:	d226      	bcs.n	56c0 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    5672:	68fb      	ldr	r3, [r7, #12]
    5674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5676:	2b00      	cmp	r3, #0
    5678:	d01b      	beq.n	56b2 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    567a:	687b      	ldr	r3, [r7, #4]
    567c:	791b      	ldrb	r3, [r3, #4]
    567e:	2b01      	cmp	r3, #1
    5680:	d80b      	bhi.n	569a <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    5682:	68fb      	ldr	r3, [r7, #12]
    5684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5686:	68fb      	ldr	r3, [r7, #12]
    5688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    568a:	4413      	add	r3, r2
    568c:	781b      	ldrb	r3, [r3, #0]
    568e:	b29b      	uxth	r3, r3
    5690:	4619      	mov	r1, r3
    5692:	6878      	ldr	r0, [r7, #4]
    5694:	4b15      	ldr	r3, [pc, #84]	; (56ec <_spi_dev_rx+0xf0>)
    5696:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    5698:	e022      	b.n	56e0 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    569a:	68fb      	ldr	r3, [r7, #12]
    569c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    569e:	68fb      	ldr	r3, [r7, #12]
    56a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    56a2:	005b      	lsls	r3, r3, #1
    56a4:	4413      	add	r3, r2
    56a6:	881b      	ldrh	r3, [r3, #0]
    56a8:	4619      	mov	r1, r3
    56aa:	6878      	ldr	r0, [r7, #4]
    56ac:	4b0f      	ldr	r3, [pc, #60]	; (56ec <_spi_dev_rx+0xf0>)
    56ae:	4798      	blx	r3
}
    56b0:	e016      	b.n	56e0 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    56b2:	687b      	ldr	r3, [r7, #4]
    56b4:	88db      	ldrh	r3, [r3, #6]
    56b6:	4619      	mov	r1, r3
    56b8:	6878      	ldr	r0, [r7, #4]
    56ba:	4b0c      	ldr	r3, [pc, #48]	; (56ec <_spi_dev_rx+0xf0>)
    56bc:	4798      	blx	r3
}
    56be:	e00f      	b.n	56e0 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    56c0:	2100      	movs	r1, #0
    56c2:	6878      	ldr	r0, [r7, #4]
    56c4:	4b0a      	ldr	r3, [pc, #40]	; (56f0 <_spi_dev_rx+0xf4>)
    56c6:	4798      	blx	r3
		spi->stat = 0;
    56c8:	68fb      	ldr	r3, [r7, #12]
    56ca:	2200      	movs	r2, #0
    56cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    56d0:	68fb      	ldr	r3, [r7, #12]
    56d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    56d4:	2b00      	cmp	r3, #0
    56d6:	d003      	beq.n	56e0 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    56d8:	68fb      	ldr	r3, [r7, #12]
    56da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    56dc:	68f8      	ldr	r0, [r7, #12]
    56de:	4798      	blx	r3
}
    56e0:	bf00      	nop
    56e2:	3714      	adds	r7, #20
    56e4:	46bd      	mov	sp, r7
    56e6:	bd90      	pop	{r4, r7, pc}
    56e8:	0000b3f5 	.word	0x0000b3f5
    56ec:	0000b39d 	.word	0x0000b39d
    56f0:	0000b2c5 	.word	0x0000b2c5

000056f4 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    56f4:	b580      	push	{r7, lr}
    56f6:	b084      	sub	sp, #16
    56f8:	af00      	add	r7, sp, #0
    56fa:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    56fc:	687b      	ldr	r3, [r7, #4]
    56fe:	3b04      	subs	r3, #4
    5700:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    5702:	68fb      	ldr	r3, [r7, #12]
    5704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    5706:	68fb      	ldr	r3, [r7, #12]
    5708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    570a:	429a      	cmp	r2, r3
    570c:	d30f      	bcc.n	572e <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    570e:	2100      	movs	r1, #0
    5710:	6878      	ldr	r0, [r7, #4]
    5712:	4b09      	ldr	r3, [pc, #36]	; (5738 <_spi_dev_complete+0x44>)
    5714:	4798      	blx	r3
		spi->stat = 0;
    5716:	68fb      	ldr	r3, [r7, #12]
    5718:	2200      	movs	r2, #0
    571a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    571e:	68fb      	ldr	r3, [r7, #12]
    5720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5722:	2b00      	cmp	r3, #0
    5724:	d003      	beq.n	572e <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    5726:	68fb      	ldr	r3, [r7, #12]
    5728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    572a:	68f8      	ldr	r0, [r7, #12]
    572c:	4798      	blx	r3
		}
	}
}
    572e:	bf00      	nop
    5730:	3710      	adds	r7, #16
    5732:	46bd      	mov	sp, r7
    5734:	bd80      	pop	{r7, pc}
    5736:	bf00      	nop
    5738:	0000b335 	.word	0x0000b335

0000573c <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    573c:	b580      	push	{r7, lr}
    573e:	b084      	sub	sp, #16
    5740:	af00      	add	r7, sp, #0
    5742:	6078      	str	r0, [r7, #4]
    5744:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    5746:	687b      	ldr	r3, [r7, #4]
    5748:	3b04      	subs	r3, #4
    574a:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    574c:	2100      	movs	r1, #0
    574e:	6878      	ldr	r0, [r7, #4]
    5750:	4b0d      	ldr	r3, [pc, #52]	; (5788 <_spi_dev_error+0x4c>)
    5752:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    5754:	2100      	movs	r1, #0
    5756:	6878      	ldr	r0, [r7, #4]
    5758:	4b0c      	ldr	r3, [pc, #48]	; (578c <_spi_dev_error+0x50>)
    575a:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    575c:	2100      	movs	r1, #0
    575e:	6878      	ldr	r0, [r7, #4]
    5760:	4b0b      	ldr	r3, [pc, #44]	; (5790 <_spi_dev_error+0x54>)
    5762:	4798      	blx	r3
	spi->stat = 0;
    5764:	68fb      	ldr	r3, [r7, #12]
    5766:	2200      	movs	r2, #0
    5768:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    576c:	68fb      	ldr	r3, [r7, #12]
    576e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5770:	2b00      	cmp	r3, #0
    5772:	d004      	beq.n	577e <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    5774:	68fb      	ldr	r3, [r7, #12]
    5776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5778:	6839      	ldr	r1, [r7, #0]
    577a:	68f8      	ldr	r0, [r7, #12]
    577c:	4798      	blx	r3
	}
}
    577e:	bf00      	nop
    5780:	3710      	adds	r7, #16
    5782:	46bd      	mov	sp, r7
    5784:	bd80      	pop	{r7, pc}
    5786:	bf00      	nop
    5788:	0000b261 	.word	0x0000b261
    578c:	0000b2c5 	.word	0x0000b2c5
    5790:	0000b335 	.word	0x0000b335

00005794 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    5794:	b580      	push	{r7, lr}
    5796:	b084      	sub	sp, #16
    5798:	af00      	add	r7, sp, #0
    579a:	6078      	str	r0, [r7, #4]
    579c:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    579e:	2300      	movs	r3, #0
    57a0:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    57a2:	687b      	ldr	r3, [r7, #4]
    57a4:	2b00      	cmp	r3, #0
    57a6:	d004      	beq.n	57b2 <spi_m_async_init+0x1e>
    57a8:	683b      	ldr	r3, [r7, #0]
    57aa:	2b00      	cmp	r3, #0
    57ac:	d001      	beq.n	57b2 <spi_m_async_init+0x1e>
    57ae:	2301      	movs	r3, #1
    57b0:	e000      	b.n	57b4 <spi_m_async_init+0x20>
    57b2:	2300      	movs	r3, #0
    57b4:	f003 0301 	and.w	r3, r3, #1
    57b8:	b2db      	uxtb	r3, r3
    57ba:	22a5      	movs	r2, #165	; 0xa5
    57bc:	491c      	ldr	r1, [pc, #112]	; (5830 <spi_m_async_init+0x9c>)
    57be:	4618      	mov	r0, r3
    57c0:	4b1c      	ldr	r3, [pc, #112]	; (5834 <spi_m_async_init+0xa0>)
    57c2:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    57c4:	687b      	ldr	r3, [r7, #4]
    57c6:	683a      	ldr	r2, [r7, #0]
    57c8:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    57ca:	687b      	ldr	r3, [r7, #4]
    57cc:	3304      	adds	r3, #4
    57ce:	6839      	ldr	r1, [r7, #0]
    57d0:	4618      	mov	r0, r3
    57d2:	4b19      	ldr	r3, [pc, #100]	; (5838 <spi_m_async_init+0xa4>)
    57d4:	4798      	blx	r3
    57d6:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    57d8:	68fb      	ldr	r3, [r7, #12]
    57da:	2b00      	cmp	r3, #0
    57dc:	db23      	blt.n	5826 <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    57de:	687b      	ldr	r3, [r7, #4]
    57e0:	3304      	adds	r3, #4
    57e2:	4a16      	ldr	r2, [pc, #88]	; (583c <spi_m_async_init+0xa8>)
    57e4:	2100      	movs	r1, #0
    57e6:	4618      	mov	r0, r3
    57e8:	4b15      	ldr	r3, [pc, #84]	; (5840 <spi_m_async_init+0xac>)
    57ea:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    57ec:	687b      	ldr	r3, [r7, #4]
    57ee:	3304      	adds	r3, #4
    57f0:	4a14      	ldr	r2, [pc, #80]	; (5844 <spi_m_async_init+0xb0>)
    57f2:	2101      	movs	r1, #1
    57f4:	4618      	mov	r0, r3
    57f6:	4b12      	ldr	r3, [pc, #72]	; (5840 <spi_m_async_init+0xac>)
    57f8:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    57fa:	687b      	ldr	r3, [r7, #4]
    57fc:	3304      	adds	r3, #4
    57fe:	4a12      	ldr	r2, [pc, #72]	; (5848 <spi_m_async_init+0xb4>)
    5800:	2102      	movs	r1, #2
    5802:	4618      	mov	r0, r3
    5804:	4b0e      	ldr	r3, [pc, #56]	; (5840 <spi_m_async_init+0xac>)
    5806:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    5808:	687b      	ldr	r3, [r7, #4]
    580a:	3304      	adds	r3, #4
    580c:	4a0f      	ldr	r2, [pc, #60]	; (584c <spi_m_async_init+0xb8>)
    580e:	2103      	movs	r1, #3
    5810:	4618      	mov	r0, r3
    5812:	4b0b      	ldr	r3, [pc, #44]	; (5840 <spi_m_async_init+0xac>)
    5814:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    5816:	687b      	ldr	r3, [r7, #4]
    5818:	4a0d      	ldr	r2, [pc, #52]	; (5850 <spi_m_async_init+0xbc>)
    581a:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    581c:	687b      	ldr	r3, [r7, #4]
    581e:	4a0d      	ldr	r2, [pc, #52]	; (5854 <spi_m_async_init+0xc0>)
    5820:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    5822:	2300      	movs	r3, #0
    5824:	e000      	b.n	5828 <spi_m_async_init+0x94>
		return rc;
    5826:	68fb      	ldr	r3, [r7, #12]
}
    5828:	4618      	mov	r0, r3
    582a:	3710      	adds	r7, #16
    582c:	46bd      	mov	sp, r7
    582e:	bd80      	pop	{r7, pc}
    5830:	0001d010 	.word	0x0001d010
    5834:	00006991 	.word	0x00006991
    5838:	0000aec1 	.word	0x0000aec1
    583c:	0000557d 	.word	0x0000557d
    5840:	0000b445 	.word	0x0000b445
    5844:	000055fd 	.word	0x000055fd
    5848:	000056f5 	.word	0x000056f5
    584c:	0000573d 	.word	0x0000573d
    5850:	00005859 	.word	0x00005859
    5854:	000058d9 	.word	0x000058d9

00005858 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    5858:	b580      	push	{r7, lr}
    585a:	b086      	sub	sp, #24
    585c:	af00      	add	r7, sp, #0
    585e:	60f8      	str	r0, [r7, #12]
    5860:	60b9      	str	r1, [r7, #8]
    5862:	4613      	mov	r3, r2
    5864:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    5866:	68fb      	ldr	r3, [r7, #12]
    5868:	2b00      	cmp	r3, #0
    586a:	bf14      	ite	ne
    586c:	2301      	movne	r3, #1
    586e:	2300      	moveq	r3, #0
    5870:	b2db      	uxtb	r3, r3
    5872:	f240 1205 	movw	r2, #261	; 0x105
    5876:	4914      	ldr	r1, [pc, #80]	; (58c8 <_spi_m_async_io_read+0x70>)
    5878:	4618      	mov	r0, r3
    587a:	4b14      	ldr	r3, [pc, #80]	; (58cc <_spi_m_async_io_read+0x74>)
    587c:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    587e:	68fb      	ldr	r3, [r7, #12]
    5880:	3b24      	subs	r3, #36	; 0x24
    5882:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    5884:	697b      	ldr	r3, [r7, #20]
    5886:	68ba      	ldr	r2, [r7, #8]
    5888:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    588a:	697b      	ldr	r3, [r7, #20]
    588c:	2200      	movs	r2, #0
    588e:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    5890:	88fa      	ldrh	r2, [r7, #6]
    5892:	697b      	ldr	r3, [r7, #20]
    5894:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    5896:	697b      	ldr	r3, [r7, #20]
    5898:	2200      	movs	r2, #0
    589a:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    589c:	697b      	ldr	r3, [r7, #20]
    589e:	2210      	movs	r2, #16
    58a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    58a4:	697b      	ldr	r3, [r7, #20]
    58a6:	3304      	adds	r3, #4
    58a8:	2101      	movs	r1, #1
    58aa:	4618      	mov	r0, r3
    58ac:	4b08      	ldr	r3, [pc, #32]	; (58d0 <_spi_m_async_io_read+0x78>)
    58ae:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    58b0:	697b      	ldr	r3, [r7, #20]
    58b2:	3304      	adds	r3, #4
    58b4:	f240 11ff 	movw	r1, #511	; 0x1ff
    58b8:	4618      	mov	r0, r3
    58ba:	4b06      	ldr	r3, [pc, #24]	; (58d4 <_spi_m_async_io_read+0x7c>)
    58bc:	4798      	blx	r3

	return ERR_NONE;
    58be:	2300      	movs	r3, #0
}
    58c0:	4618      	mov	r0, r3
    58c2:	3718      	adds	r7, #24
    58c4:	46bd      	mov	sp, r7
    58c6:	bd80      	pop	{r7, pc}
    58c8:	0001d010 	.word	0x0001d010
    58cc:	00006991 	.word	0x00006991
    58d0:	0000b2c5 	.word	0x0000b2c5
    58d4:	0000b39d 	.word	0x0000b39d

000058d8 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    58d8:	b580      	push	{r7, lr}
    58da:	b086      	sub	sp, #24
    58dc:	af00      	add	r7, sp, #0
    58de:	60f8      	str	r0, [r7, #12]
    58e0:	60b9      	str	r1, [r7, #8]
    58e2:	4613      	mov	r3, r2
    58e4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    58e6:	68fb      	ldr	r3, [r7, #12]
    58e8:	2b00      	cmp	r3, #0
    58ea:	bf14      	ite	ne
    58ec:	2301      	movne	r3, #1
    58ee:	2300      	moveq	r3, #0
    58f0:	b2db      	uxtb	r3, r3
    58f2:	f240 1227 	movw	r2, #295	; 0x127
    58f6:	4911      	ldr	r1, [pc, #68]	; (593c <_spi_m_async_io_write+0x64>)
    58f8:	4618      	mov	r0, r3
    58fa:	4b11      	ldr	r3, [pc, #68]	; (5940 <_spi_m_async_io_write+0x68>)
    58fc:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    58fe:	68fb      	ldr	r3, [r7, #12]
    5900:	3b24      	subs	r3, #36	; 0x24
    5902:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    5904:	697b      	ldr	r3, [r7, #20]
    5906:	2200      	movs	r2, #0
    5908:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    590a:	697b      	ldr	r3, [r7, #20]
    590c:	68ba      	ldr	r2, [r7, #8]
    590e:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    5910:	88fa      	ldrh	r2, [r7, #6]
    5912:	697b      	ldr	r3, [r7, #20]
    5914:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    5916:	697b      	ldr	r3, [r7, #20]
    5918:	2200      	movs	r2, #0
    591a:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    591c:	697b      	ldr	r3, [r7, #20]
    591e:	2210      	movs	r2, #16
    5920:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    5924:	697b      	ldr	r3, [r7, #20]
    5926:	3304      	adds	r3, #4
    5928:	2101      	movs	r1, #1
    592a:	4618      	mov	r0, r3
    592c:	4b05      	ldr	r3, [pc, #20]	; (5944 <_spi_m_async_io_write+0x6c>)
    592e:	4798      	blx	r3

	return ERR_NONE;
    5930:	2300      	movs	r3, #0
}
    5932:	4618      	mov	r0, r3
    5934:	3718      	adds	r7, #24
    5936:	46bd      	mov	sp, r7
    5938:	bd80      	pop	{r7, pc}
    593a:	bf00      	nop
    593c:	0001d010 	.word	0x0001d010
    5940:	00006991 	.word	0x00006991
    5944:	0000b261 	.word	0x0000b261

00005948 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    5948:	b580      	push	{r7, lr}
    594a:	b084      	sub	sp, #16
    594c:	af00      	add	r7, sp, #0
    594e:	6078      	str	r0, [r7, #4]
    5950:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    5952:	2300      	movs	r3, #0
    5954:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    5956:	687b      	ldr	r3, [r7, #4]
    5958:	2b00      	cmp	r3, #0
    595a:	d004      	beq.n	5966 <spi_m_sync_init+0x1e>
    595c:	683b      	ldr	r3, [r7, #0]
    595e:	2b00      	cmp	r3, #0
    5960:	d001      	beq.n	5966 <spi_m_sync_init+0x1e>
    5962:	2301      	movs	r3, #1
    5964:	e000      	b.n	5968 <spi_m_sync_init+0x20>
    5966:	2300      	movs	r3, #0
    5968:	f003 0301 	and.w	r3, r3, #1
    596c:	b2db      	uxtb	r3, r3
    596e:	2240      	movs	r2, #64	; 0x40
    5970:	4910      	ldr	r1, [pc, #64]	; (59b4 <spi_m_sync_init+0x6c>)
    5972:	4618      	mov	r0, r3
    5974:	4b10      	ldr	r3, [pc, #64]	; (59b8 <spi_m_sync_init+0x70>)
    5976:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    5978:	687b      	ldr	r3, [r7, #4]
    597a:	683a      	ldr	r2, [r7, #0]
    597c:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    597e:	687b      	ldr	r3, [r7, #4]
    5980:	3304      	adds	r3, #4
    5982:	6839      	ldr	r1, [r7, #0]
    5984:	4618      	mov	r0, r3
    5986:	4b0d      	ldr	r3, [pc, #52]	; (59bc <spi_m_sync_init+0x74>)
    5988:	4798      	blx	r3
    598a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    598c:	68fb      	ldr	r3, [r7, #12]
    598e:	2b00      	cmp	r3, #0
    5990:	da01      	bge.n	5996 <spi_m_sync_init+0x4e>
		return rc;
    5992:	68fb      	ldr	r3, [r7, #12]
    5994:	e00a      	b.n	59ac <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    5996:	687b      	ldr	r3, [r7, #4]
    5998:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    599c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    599e:	687b      	ldr	r3, [r7, #4]
    59a0:	4a07      	ldr	r2, [pc, #28]	; (59c0 <spi_m_sync_init+0x78>)
    59a2:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    59a4:	687b      	ldr	r3, [r7, #4]
    59a6:	4a07      	ldr	r2, [pc, #28]	; (59c4 <spi_m_sync_init+0x7c>)
    59a8:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    59aa:	2300      	movs	r3, #0
}
    59ac:	4618      	mov	r0, r3
    59ae:	3710      	adds	r7, #16
    59b0:	46bd      	mov	sp, r7
    59b2:	bd80      	pop	{r7, pc}
    59b4:	0001d030 	.word	0x0001d030
    59b8:	00006991 	.word	0x00006991
    59bc:	0000adb5 	.word	0x0000adb5
    59c0:	00005a41 	.word	0x00005a41
    59c4:	00005a99 	.word	0x00005a99

000059c8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    59c8:	b580      	push	{r7, lr}
    59ca:	b082      	sub	sp, #8
    59cc:	af00      	add	r7, sp, #0
    59ce:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    59d0:	687b      	ldr	r3, [r7, #4]
    59d2:	2b00      	cmp	r3, #0
    59d4:	bf14      	ite	ne
    59d6:	2301      	movne	r3, #1
    59d8:	2300      	moveq	r3, #0
    59da:	b2db      	uxtb	r3, r3
    59dc:	2257      	movs	r2, #87	; 0x57
    59de:	4906      	ldr	r1, [pc, #24]	; (59f8 <spi_m_sync_enable+0x30>)
    59e0:	4618      	mov	r0, r3
    59e2:	4b06      	ldr	r3, [pc, #24]	; (59fc <spi_m_sync_enable+0x34>)
    59e4:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    59e6:	687b      	ldr	r3, [r7, #4]
    59e8:	3304      	adds	r3, #4
    59ea:	4618      	mov	r0, r3
    59ec:	4b04      	ldr	r3, [pc, #16]	; (5a00 <spi_m_sync_enable+0x38>)
    59ee:	4798      	blx	r3
}
    59f0:	bf00      	nop
    59f2:	3708      	adds	r7, #8
    59f4:	46bd      	mov	sp, r7
    59f6:	bd80      	pop	{r7, pc}
    59f8:	0001d030 	.word	0x0001d030
    59fc:	00006991 	.word	0x00006991
    5a00:	0000af51 	.word	0x0000af51

00005a04 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    5a04:	b580      	push	{r7, lr}
    5a06:	b082      	sub	sp, #8
    5a08:	af00      	add	r7, sp, #0
    5a0a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    5a0c:	687b      	ldr	r3, [r7, #4]
    5a0e:	2b00      	cmp	r3, #0
    5a10:	bf14      	ite	ne
    5a12:	2301      	movne	r3, #1
    5a14:	2300      	moveq	r3, #0
    5a16:	b2db      	uxtb	r3, r3
    5a18:	225d      	movs	r2, #93	; 0x5d
    5a1a:	4906      	ldr	r1, [pc, #24]	; (5a34 <spi_m_sync_disable+0x30>)
    5a1c:	4618      	mov	r0, r3
    5a1e:	4b06      	ldr	r3, [pc, #24]	; (5a38 <spi_m_sync_disable+0x34>)
    5a20:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    5a22:	687b      	ldr	r3, [r7, #4]
    5a24:	3304      	adds	r3, #4
    5a26:	4618      	mov	r0, r3
    5a28:	4b04      	ldr	r3, [pc, #16]	; (5a3c <spi_m_sync_disable+0x38>)
    5a2a:	4798      	blx	r3
}
    5a2c:	bf00      	nop
    5a2e:	3708      	adds	r7, #8
    5a30:	46bd      	mov	sp, r7
    5a32:	bd80      	pop	{r7, pc}
    5a34:	0001d030 	.word	0x0001d030
    5a38:	00006991 	.word	0x00006991
    5a3c:	0000afa1 	.word	0x0000afa1

00005a40 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    5a40:	b580      	push	{r7, lr}
    5a42:	b088      	sub	sp, #32
    5a44:	af00      	add	r7, sp, #0
    5a46:	60f8      	str	r0, [r7, #12]
    5a48:	60b9      	str	r1, [r7, #8]
    5a4a:	4613      	mov	r3, r2
    5a4c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    5a4e:	68fb      	ldr	r3, [r7, #12]
    5a50:	2b00      	cmp	r3, #0
    5a52:	bf14      	ite	ne
    5a54:	2301      	movne	r3, #1
    5a56:	2300      	moveq	r3, #0
    5a58:	b2db      	uxtb	r3, r3
    5a5a:	2287      	movs	r2, #135	; 0x87
    5a5c:	490b      	ldr	r1, [pc, #44]	; (5a8c <_spi_m_sync_io_read+0x4c>)
    5a5e:	4618      	mov	r0, r3
    5a60:	4b0b      	ldr	r3, [pc, #44]	; (5a90 <_spi_m_sync_io_read+0x50>)
    5a62:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    5a64:	68fb      	ldr	r3, [r7, #12]
    5a66:	3b0c      	subs	r3, #12
    5a68:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    5a6a:	68bb      	ldr	r3, [r7, #8]
    5a6c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    5a6e:	2300      	movs	r3, #0
    5a70:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    5a72:	88fb      	ldrh	r3, [r7, #6]
    5a74:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    5a76:	f107 0310 	add.w	r3, r7, #16
    5a7a:	4619      	mov	r1, r3
    5a7c:	69f8      	ldr	r0, [r7, #28]
    5a7e:	4b05      	ldr	r3, [pc, #20]	; (5a94 <_spi_m_sync_io_read+0x54>)
    5a80:	4798      	blx	r3
    5a82:	4603      	mov	r3, r0
}
    5a84:	4618      	mov	r0, r3
    5a86:	3720      	adds	r7, #32
    5a88:	46bd      	mov	sp, r7
    5a8a:	bd80      	pop	{r7, pc}
    5a8c:	0001d030 	.word	0x0001d030
    5a90:	00006991 	.word	0x00006991
    5a94:	00005af1 	.word	0x00005af1

00005a98 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    5a98:	b580      	push	{r7, lr}
    5a9a:	b088      	sub	sp, #32
    5a9c:	af00      	add	r7, sp, #0
    5a9e:	60f8      	str	r0, [r7, #12]
    5aa0:	60b9      	str	r1, [r7, #8]
    5aa2:	4613      	mov	r3, r2
    5aa4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    5aa6:	68fb      	ldr	r3, [r7, #12]
    5aa8:	2b00      	cmp	r3, #0
    5aaa:	bf14      	ite	ne
    5aac:	2301      	movne	r3, #1
    5aae:	2300      	moveq	r3, #0
    5ab0:	b2db      	uxtb	r3, r3
    5ab2:	22a3      	movs	r2, #163	; 0xa3
    5ab4:	490b      	ldr	r1, [pc, #44]	; (5ae4 <_spi_m_sync_io_write+0x4c>)
    5ab6:	4618      	mov	r0, r3
    5ab8:	4b0b      	ldr	r3, [pc, #44]	; (5ae8 <_spi_m_sync_io_write+0x50>)
    5aba:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    5abc:	68fb      	ldr	r3, [r7, #12]
    5abe:	3b0c      	subs	r3, #12
    5ac0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    5ac2:	2300      	movs	r3, #0
    5ac4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    5ac6:	68bb      	ldr	r3, [r7, #8]
    5ac8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    5aca:	88fb      	ldrh	r3, [r7, #6]
    5acc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    5ace:	f107 0310 	add.w	r3, r7, #16
    5ad2:	4619      	mov	r1, r3
    5ad4:	69f8      	ldr	r0, [r7, #28]
    5ad6:	4b05      	ldr	r3, [pc, #20]	; (5aec <_spi_m_sync_io_write+0x54>)
    5ad8:	4798      	blx	r3
    5ada:	4603      	mov	r3, r0
}
    5adc:	4618      	mov	r0, r3
    5ade:	3720      	adds	r7, #32
    5ae0:	46bd      	mov	sp, r7
    5ae2:	bd80      	pop	{r7, pc}
    5ae4:	0001d030 	.word	0x0001d030
    5ae8:	00006991 	.word	0x00006991
    5aec:	00005af1 	.word	0x00005af1

00005af0 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    5af0:	b580      	push	{r7, lr}
    5af2:	b086      	sub	sp, #24
    5af4:	af00      	add	r7, sp, #0
    5af6:	6078      	str	r0, [r7, #4]
    5af8:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    5afa:	687b      	ldr	r3, [r7, #4]
    5afc:	2b00      	cmp	r3, #0
    5afe:	d004      	beq.n	5b0a <spi_m_sync_transfer+0x1a>
    5b00:	683b      	ldr	r3, [r7, #0]
    5b02:	2b00      	cmp	r3, #0
    5b04:	d001      	beq.n	5b0a <spi_m_sync_transfer+0x1a>
    5b06:	2301      	movs	r3, #1
    5b08:	e000      	b.n	5b0c <spi_m_sync_transfer+0x1c>
    5b0a:	2300      	movs	r3, #0
    5b0c:	f003 0301 	and.w	r3, r3, #1
    5b10:	b2db      	uxtb	r3, r3
    5b12:	22b3      	movs	r2, #179	; 0xb3
    5b14:	490c      	ldr	r1, [pc, #48]	; (5b48 <spi_m_sync_transfer+0x58>)
    5b16:	4618      	mov	r0, r3
    5b18:	4b0c      	ldr	r3, [pc, #48]	; (5b4c <spi_m_sync_transfer+0x5c>)
    5b1a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    5b1c:	683b      	ldr	r3, [r7, #0]
    5b1e:	681b      	ldr	r3, [r3, #0]
    5b20:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    5b22:	683b      	ldr	r3, [r7, #0]
    5b24:	685b      	ldr	r3, [r3, #4]
    5b26:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    5b28:	683b      	ldr	r3, [r7, #0]
    5b2a:	689b      	ldr	r3, [r3, #8]
    5b2c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    5b2e:	687b      	ldr	r3, [r7, #4]
    5b30:	3304      	adds	r3, #4
    5b32:	f107 020c 	add.w	r2, r7, #12
    5b36:	4611      	mov	r1, r2
    5b38:	4618      	mov	r0, r3
    5b3a:	4b05      	ldr	r3, [pc, #20]	; (5b50 <spi_m_sync_transfer+0x60>)
    5b3c:	4798      	blx	r3
    5b3e:	4603      	mov	r3, r0
}
    5b40:	4618      	mov	r0, r3
    5b42:	3718      	adds	r7, #24
    5b44:	46bd      	mov	sp, r7
    5b46:	bd80      	pop	{r7, pc}
    5b48:	0001d030 	.word	0x0001d030
    5b4c:	00006991 	.word	0x00006991
    5b50:	0000b145 	.word	0x0000b145

00005b54 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    5b54:	b580      	push	{r7, lr}
    5b56:	b082      	sub	sp, #8
    5b58:	af00      	add	r7, sp, #0
    5b5a:	6078      	str	r0, [r7, #4]
    5b5c:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    5b5e:	687b      	ldr	r3, [r7, #4]
    5b60:	2b00      	cmp	r3, #0
    5b62:	d004      	beq.n	5b6e <spi_m_sync_get_io_descriptor+0x1a>
    5b64:	683b      	ldr	r3, [r7, #0]
    5b66:	2b00      	cmp	r3, #0
    5b68:	d001      	beq.n	5b6e <spi_m_sync_get_io_descriptor+0x1a>
    5b6a:	2301      	movs	r3, #1
    5b6c:	e000      	b.n	5b70 <spi_m_sync_get_io_descriptor+0x1c>
    5b6e:	2300      	movs	r3, #0
    5b70:	f003 0301 	and.w	r3, r3, #1
    5b74:	b2db      	uxtb	r3, r3
    5b76:	22bd      	movs	r2, #189	; 0xbd
    5b78:	4906      	ldr	r1, [pc, #24]	; (5b94 <spi_m_sync_get_io_descriptor+0x40>)
    5b7a:	4618      	mov	r0, r3
    5b7c:	4b06      	ldr	r3, [pc, #24]	; (5b98 <spi_m_sync_get_io_descriptor+0x44>)
    5b7e:	4798      	blx	r3
	*io = &spi->io;
    5b80:	687b      	ldr	r3, [r7, #4]
    5b82:	f103 020c 	add.w	r2, r3, #12
    5b86:	683b      	ldr	r3, [r7, #0]
    5b88:	601a      	str	r2, [r3, #0]
	return 0;
    5b8a:	2300      	movs	r3, #0
}
    5b8c:	4618      	mov	r0, r3
    5b8e:	3708      	adds	r7, #8
    5b90:	46bd      	mov	sp, r7
    5b92:	bd80      	pop	{r7, pc}
    5b94:	0001d030 	.word	0x0001d030
    5b98:	00006991 	.word	0x00006991

00005b9c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    5b9c:	b480      	push	{r7}
    5b9e:	b083      	sub	sp, #12
    5ba0:	af00      	add	r7, sp, #0
    5ba2:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    5ba4:	687b      	ldr	r3, [r7, #4]
    5ba6:	681b      	ldr	r3, [r3, #0]
}
    5ba8:	4618      	mov	r0, r3
    5baa:	370c      	adds	r7, #12
    5bac:	46bd      	mov	sp, r7
    5bae:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bb2:	4770      	bx	lr

00005bb4 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    5bb4:	b480      	push	{r7}
    5bb6:	b083      	sub	sp, #12
    5bb8:	af00      	add	r7, sp, #0
    5bba:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    5bbc:	687b      	ldr	r3, [r7, #4]
    5bbe:	2b00      	cmp	r3, #0
    5bc0:	d002      	beq.n	5bc8 <list_get_next_element+0x14>
    5bc2:	687b      	ldr	r3, [r7, #4]
    5bc4:	681b      	ldr	r3, [r3, #0]
    5bc6:	e000      	b.n	5bca <list_get_next_element+0x16>
    5bc8:	2300      	movs	r3, #0
}
    5bca:	4618      	mov	r0, r3
    5bcc:	370c      	adds	r7, #12
    5bce:	46bd      	mov	sp, r7
    5bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bd4:	4770      	bx	lr
	...

00005bd8 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    5bd8:	b580      	push	{r7, lr}
    5bda:	b084      	sub	sp, #16
    5bdc:	af00      	add	r7, sp, #0
    5bde:	60f8      	str	r0, [r7, #12]
    5be0:	60b9      	str	r1, [r7, #8]
    5be2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    5be4:	68fb      	ldr	r3, [r7, #12]
    5be6:	2b00      	cmp	r3, #0
    5be8:	d004      	beq.n	5bf4 <timer_init+0x1c>
    5bea:	68bb      	ldr	r3, [r7, #8]
    5bec:	2b00      	cmp	r3, #0
    5bee:	d001      	beq.n	5bf4 <timer_init+0x1c>
    5bf0:	2301      	movs	r3, #1
    5bf2:	e000      	b.n	5bf6 <timer_init+0x1e>
    5bf4:	2300      	movs	r3, #0
    5bf6:	f003 0301 	and.w	r3, r3, #1
    5bfa:	b2db      	uxtb	r3, r3
    5bfc:	223b      	movs	r2, #59	; 0x3b
    5bfe:	490a      	ldr	r1, [pc, #40]	; (5c28 <timer_init+0x50>)
    5c00:	4618      	mov	r0, r3
    5c02:	4b0a      	ldr	r3, [pc, #40]	; (5c2c <timer_init+0x54>)
    5c04:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    5c06:	68fb      	ldr	r3, [r7, #12]
    5c08:	68b9      	ldr	r1, [r7, #8]
    5c0a:	4618      	mov	r0, r3
    5c0c:	4b08      	ldr	r3, [pc, #32]	; (5c30 <timer_init+0x58>)
    5c0e:	4798      	blx	r3
	descr->time                           = 0;
    5c10:	68fb      	ldr	r3, [r7, #12]
    5c12:	2200      	movs	r2, #0
    5c14:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    5c16:	68fb      	ldr	r3, [r7, #12]
    5c18:	4a06      	ldr	r2, [pc, #24]	; (5c34 <timer_init+0x5c>)
    5c1a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    5c1c:	2300      	movs	r3, #0
}
    5c1e:	4618      	mov	r0, r3
    5c20:	3710      	adds	r7, #16
    5c22:	46bd      	mov	sp, r7
    5c24:	bd80      	pop	{r7, pc}
    5c26:	bf00      	nop
    5c28:	0001d04c 	.word	0x0001d04c
    5c2c:	00006991 	.word	0x00006991
    5c30:	0000b83d 	.word	0x0000b83d
    5c34:	00005f81 	.word	0x00005f81

00005c38 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    5c38:	b580      	push	{r7, lr}
    5c3a:	b082      	sub	sp, #8
    5c3c:	af00      	add	r7, sp, #0
    5c3e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5c40:	687b      	ldr	r3, [r7, #4]
    5c42:	2b00      	cmp	r3, #0
    5c44:	bf14      	ite	ne
    5c46:	2301      	movne	r3, #1
    5c48:	2300      	moveq	r3, #0
    5c4a:	b2db      	uxtb	r3, r3
    5c4c:	2253      	movs	r2, #83	; 0x53
    5c4e:	490b      	ldr	r1, [pc, #44]	; (5c7c <timer_start+0x44>)
    5c50:	4618      	mov	r0, r3
    5c52:	4b0b      	ldr	r3, [pc, #44]	; (5c80 <timer_start+0x48>)
    5c54:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    5c56:	687b      	ldr	r3, [r7, #4]
    5c58:	4618      	mov	r0, r3
    5c5a:	4b0a      	ldr	r3, [pc, #40]	; (5c84 <timer_start+0x4c>)
    5c5c:	4798      	blx	r3
    5c5e:	4603      	mov	r3, r0
    5c60:	2b00      	cmp	r3, #0
    5c62:	d002      	beq.n	5c6a <timer_start+0x32>
		return ERR_DENIED;
    5c64:	f06f 0310 	mvn.w	r3, #16
    5c68:	e004      	b.n	5c74 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    5c6a:	687b      	ldr	r3, [r7, #4]
    5c6c:	4618      	mov	r0, r3
    5c6e:	4b06      	ldr	r3, [pc, #24]	; (5c88 <timer_start+0x50>)
    5c70:	4798      	blx	r3

	return ERR_NONE;
    5c72:	2300      	movs	r3, #0
}
    5c74:	4618      	mov	r0, r3
    5c76:	3708      	adds	r7, #8
    5c78:	46bd      	mov	sp, r7
    5c7a:	bd80      	pop	{r7, pc}
    5c7c:	0001d04c 	.word	0x0001d04c
    5c80:	00006991 	.word	0x00006991
    5c84:	0000bd69 	.word	0x0000bd69
    5c88:	0000bd09 	.word	0x0000bd09

00005c8c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    5c8c:	b580      	push	{r7, lr}
    5c8e:	b082      	sub	sp, #8
    5c90:	af00      	add	r7, sp, #0
    5c92:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5c94:	687b      	ldr	r3, [r7, #4]
    5c96:	2b00      	cmp	r3, #0
    5c98:	bf14      	ite	ne
    5c9a:	2301      	movne	r3, #1
    5c9c:	2300      	moveq	r3, #0
    5c9e:	b2db      	uxtb	r3, r3
    5ca0:	2261      	movs	r2, #97	; 0x61
    5ca2:	490d      	ldr	r1, [pc, #52]	; (5cd8 <timer_stop+0x4c>)
    5ca4:	4618      	mov	r0, r3
    5ca6:	4b0d      	ldr	r3, [pc, #52]	; (5cdc <timer_stop+0x50>)
    5ca8:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    5caa:	687b      	ldr	r3, [r7, #4]
    5cac:	4618      	mov	r0, r3
    5cae:	4b0c      	ldr	r3, [pc, #48]	; (5ce0 <timer_stop+0x54>)
    5cb0:	4798      	blx	r3
    5cb2:	4603      	mov	r3, r0
    5cb4:	f083 0301 	eor.w	r3, r3, #1
    5cb8:	b2db      	uxtb	r3, r3
    5cba:	2b00      	cmp	r3, #0
    5cbc:	d002      	beq.n	5cc4 <timer_stop+0x38>
		return ERR_DENIED;
    5cbe:	f06f 0310 	mvn.w	r3, #16
    5cc2:	e004      	b.n	5cce <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    5cc4:	687b      	ldr	r3, [r7, #4]
    5cc6:	4618      	mov	r0, r3
    5cc8:	4b06      	ldr	r3, [pc, #24]	; (5ce4 <timer_stop+0x58>)
    5cca:	4798      	blx	r3

	return ERR_NONE;
    5ccc:	2300      	movs	r3, #0
}
    5cce:	4618      	mov	r0, r3
    5cd0:	3708      	adds	r7, #8
    5cd2:	46bd      	mov	sp, r7
    5cd4:	bd80      	pop	{r7, pc}
    5cd6:	bf00      	nop
    5cd8:	0001d04c 	.word	0x0001d04c
    5cdc:	00006991 	.word	0x00006991
    5ce0:	0000bd69 	.word	0x0000bd69
    5ce4:	0000bd49 	.word	0x0000bd49

00005ce8 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    5ce8:	b580      	push	{r7, lr}
    5cea:	b084      	sub	sp, #16
    5cec:	af00      	add	r7, sp, #0
    5cee:	6078      	str	r0, [r7, #4]
    5cf0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    5cf2:	687b      	ldr	r3, [r7, #4]
    5cf4:	2b00      	cmp	r3, #0
    5cf6:	d004      	beq.n	5d02 <timer_add_task+0x1a>
    5cf8:	683b      	ldr	r3, [r7, #0]
    5cfa:	2b00      	cmp	r3, #0
    5cfc:	d001      	beq.n	5d02 <timer_add_task+0x1a>
    5cfe:	2301      	movs	r3, #1
    5d00:	e000      	b.n	5d04 <timer_add_task+0x1c>
    5d02:	2300      	movs	r3, #0
    5d04:	f003 0301 	and.w	r3, r3, #1
    5d08:	b2db      	uxtb	r3, r3
    5d0a:	227a      	movs	r2, #122	; 0x7a
    5d0c:	492d      	ldr	r1, [pc, #180]	; (5dc4 <timer_add_task+0xdc>)
    5d0e:	4618      	mov	r0, r3
    5d10:	4b2d      	ldr	r3, [pc, #180]	; (5dc8 <timer_add_task+0xe0>)
    5d12:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    5d14:	687b      	ldr	r3, [r7, #4]
    5d16:	7e1b      	ldrb	r3, [r3, #24]
    5d18:	b2db      	uxtb	r3, r3
    5d1a:	f043 0301 	orr.w	r3, r3, #1
    5d1e:	b2da      	uxtb	r2, r3
    5d20:	687b      	ldr	r3, [r7, #4]
    5d22:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    5d24:	687b      	ldr	r3, [r7, #4]
    5d26:	3314      	adds	r3, #20
    5d28:	6839      	ldr	r1, [r7, #0]
    5d2a:	4618      	mov	r0, r3
    5d2c:	4b27      	ldr	r3, [pc, #156]	; (5dcc <timer_add_task+0xe4>)
    5d2e:	4798      	blx	r3
    5d30:	4603      	mov	r3, r0
    5d32:	2b00      	cmp	r3, #0
    5d34:	d00f      	beq.n	5d56 <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5d36:	687b      	ldr	r3, [r7, #4]
    5d38:	7e1b      	ldrb	r3, [r3, #24]
    5d3a:	b2db      	uxtb	r3, r3
    5d3c:	f023 0301 	bic.w	r3, r3, #1
    5d40:	b2da      	uxtb	r2, r3
    5d42:	687b      	ldr	r3, [r7, #4]
    5d44:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    5d46:	227f      	movs	r2, #127	; 0x7f
    5d48:	491e      	ldr	r1, [pc, #120]	; (5dc4 <timer_add_task+0xdc>)
    5d4a:	2000      	movs	r0, #0
    5d4c:	4b1e      	ldr	r3, [pc, #120]	; (5dc8 <timer_add_task+0xe0>)
    5d4e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    5d50:	f06f 0311 	mvn.w	r3, #17
    5d54:	e032      	b.n	5dbc <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    5d56:	687b      	ldr	r3, [r7, #4]
    5d58:	691a      	ldr	r2, [r3, #16]
    5d5a:	683b      	ldr	r3, [r7, #0]
    5d5c:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    5d5e:	687b      	ldr	r3, [r7, #4]
    5d60:	f103 0014 	add.w	r0, r3, #20
    5d64:	687b      	ldr	r3, [r7, #4]
    5d66:	691b      	ldr	r3, [r3, #16]
    5d68:	461a      	mov	r2, r3
    5d6a:	6839      	ldr	r1, [r7, #0]
    5d6c:	4b18      	ldr	r3, [pc, #96]	; (5dd0 <timer_add_task+0xe8>)
    5d6e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5d70:	687b      	ldr	r3, [r7, #4]
    5d72:	7e1b      	ldrb	r3, [r3, #24]
    5d74:	b2db      	uxtb	r3, r3
    5d76:	f023 0301 	bic.w	r3, r3, #1
    5d7a:	b2da      	uxtb	r2, r3
    5d7c:	687b      	ldr	r3, [r7, #4]
    5d7e:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    5d80:	687b      	ldr	r3, [r7, #4]
    5d82:	7e1b      	ldrb	r3, [r3, #24]
    5d84:	b2db      	uxtb	r3, r3
    5d86:	f003 0302 	and.w	r3, r3, #2
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	d015      	beq.n	5dba <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    5d8e:	f107 030c 	add.w	r3, r7, #12
    5d92:	4618      	mov	r0, r3
    5d94:	4b0f      	ldr	r3, [pc, #60]	; (5dd4 <timer_add_task+0xec>)
    5d96:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    5d98:	687b      	ldr	r3, [r7, #4]
    5d9a:	7e1b      	ldrb	r3, [r3, #24]
    5d9c:	b2db      	uxtb	r3, r3
    5d9e:	f023 0302 	bic.w	r3, r3, #2
    5da2:	b2da      	uxtb	r2, r3
    5da4:	687b      	ldr	r3, [r7, #4]
    5da6:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    5da8:	687b      	ldr	r3, [r7, #4]
    5daa:	4618      	mov	r0, r3
    5dac:	4b0a      	ldr	r3, [pc, #40]	; (5dd8 <timer_add_task+0xf0>)
    5dae:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5db0:	f107 030c 	add.w	r3, r7, #12
    5db4:	4618      	mov	r0, r3
    5db6:	4b09      	ldr	r3, [pc, #36]	; (5ddc <timer_add_task+0xf4>)
    5db8:	4798      	blx	r3
	}

	return ERR_NONE;
    5dba:	2300      	movs	r3, #0
}
    5dbc:	4618      	mov	r0, r3
    5dbe:	3710      	adds	r7, #16
    5dc0:	46bd      	mov	sp, r7
    5dc2:	bd80      	pop	{r7, pc}
    5dc4:	0001d04c 	.word	0x0001d04c
    5dc8:	00006991 	.word	0x00006991
    5dcc:	000069b9 	.word	0x000069b9
    5dd0:	00005ed1 	.word	0x00005ed1
    5dd4:	0000f015 	.word	0x0000f015
    5dd8:	0000bdc9 	.word	0x0000bdc9
    5ddc:	0000f03b 	.word	0x0000f03b

00005de0 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    5de0:	b580      	push	{r7, lr}
    5de2:	b084      	sub	sp, #16
    5de4:	af00      	add	r7, sp, #0
    5de6:	6078      	str	r0, [r7, #4]
    5de8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    5dea:	687b      	ldr	r3, [r7, #4]
    5dec:	2b00      	cmp	r3, #0
    5dee:	d004      	beq.n	5dfa <timer_remove_task+0x1a>
    5df0:	683b      	ldr	r3, [r7, #0]
    5df2:	2b00      	cmp	r3, #0
    5df4:	d001      	beq.n	5dfa <timer_remove_task+0x1a>
    5df6:	2301      	movs	r3, #1
    5df8:	e000      	b.n	5dfc <timer_remove_task+0x1c>
    5dfa:	2300      	movs	r3, #0
    5dfc:	f003 0301 	and.w	r3, r3, #1
    5e00:	b2db      	uxtb	r3, r3
    5e02:	2295      	movs	r2, #149	; 0x95
    5e04:	492b      	ldr	r1, [pc, #172]	; (5eb4 <timer_remove_task+0xd4>)
    5e06:	4618      	mov	r0, r3
    5e08:	4b2b      	ldr	r3, [pc, #172]	; (5eb8 <timer_remove_task+0xd8>)
    5e0a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    5e0c:	687b      	ldr	r3, [r7, #4]
    5e0e:	7e1b      	ldrb	r3, [r3, #24]
    5e10:	b2db      	uxtb	r3, r3
    5e12:	f043 0301 	orr.w	r3, r3, #1
    5e16:	b2da      	uxtb	r2, r3
    5e18:	687b      	ldr	r3, [r7, #4]
    5e1a:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    5e1c:	687b      	ldr	r3, [r7, #4]
    5e1e:	3314      	adds	r3, #20
    5e20:	6839      	ldr	r1, [r7, #0]
    5e22:	4618      	mov	r0, r3
    5e24:	4b25      	ldr	r3, [pc, #148]	; (5ebc <timer_remove_task+0xdc>)
    5e26:	4798      	blx	r3
    5e28:	4603      	mov	r3, r0
    5e2a:	f083 0301 	eor.w	r3, r3, #1
    5e2e:	b2db      	uxtb	r3, r3
    5e30:	2b00      	cmp	r3, #0
    5e32:	d00f      	beq.n	5e54 <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5e34:	687b      	ldr	r3, [r7, #4]
    5e36:	7e1b      	ldrb	r3, [r3, #24]
    5e38:	b2db      	uxtb	r3, r3
    5e3a:	f023 0301 	bic.w	r3, r3, #1
    5e3e:	b2da      	uxtb	r2, r3
    5e40:	687b      	ldr	r3, [r7, #4]
    5e42:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    5e44:	229a      	movs	r2, #154	; 0x9a
    5e46:	491b      	ldr	r1, [pc, #108]	; (5eb4 <timer_remove_task+0xd4>)
    5e48:	2000      	movs	r0, #0
    5e4a:	4b1b      	ldr	r3, [pc, #108]	; (5eb8 <timer_remove_task+0xd8>)
    5e4c:	4798      	blx	r3
		return ERR_NOT_FOUND;
    5e4e:	f06f 0309 	mvn.w	r3, #9
    5e52:	e02b      	b.n	5eac <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    5e54:	687b      	ldr	r3, [r7, #4]
    5e56:	3314      	adds	r3, #20
    5e58:	6839      	ldr	r1, [r7, #0]
    5e5a:	4618      	mov	r0, r3
    5e5c:	4b18      	ldr	r3, [pc, #96]	; (5ec0 <timer_remove_task+0xe0>)
    5e5e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5e60:	687b      	ldr	r3, [r7, #4]
    5e62:	7e1b      	ldrb	r3, [r3, #24]
    5e64:	b2db      	uxtb	r3, r3
    5e66:	f023 0301 	bic.w	r3, r3, #1
    5e6a:	b2da      	uxtb	r2, r3
    5e6c:	687b      	ldr	r3, [r7, #4]
    5e6e:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    5e70:	687b      	ldr	r3, [r7, #4]
    5e72:	7e1b      	ldrb	r3, [r3, #24]
    5e74:	b2db      	uxtb	r3, r3
    5e76:	f003 0302 	and.w	r3, r3, #2
    5e7a:	2b00      	cmp	r3, #0
    5e7c:	d015      	beq.n	5eaa <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    5e7e:	f107 030c 	add.w	r3, r7, #12
    5e82:	4618      	mov	r0, r3
    5e84:	4b0f      	ldr	r3, [pc, #60]	; (5ec4 <timer_remove_task+0xe4>)
    5e86:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    5e88:	687b      	ldr	r3, [r7, #4]
    5e8a:	7e1b      	ldrb	r3, [r3, #24]
    5e8c:	b2db      	uxtb	r3, r3
    5e8e:	f023 0302 	bic.w	r3, r3, #2
    5e92:	b2da      	uxtb	r2, r3
    5e94:	687b      	ldr	r3, [r7, #4]
    5e96:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    5e98:	687b      	ldr	r3, [r7, #4]
    5e9a:	4618      	mov	r0, r3
    5e9c:	4b0a      	ldr	r3, [pc, #40]	; (5ec8 <timer_remove_task+0xe8>)
    5e9e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5ea0:	f107 030c 	add.w	r3, r7, #12
    5ea4:	4618      	mov	r0, r3
    5ea6:	4b09      	ldr	r3, [pc, #36]	; (5ecc <timer_remove_task+0xec>)
    5ea8:	4798      	blx	r3
	}

	return ERR_NONE;
    5eaa:	2300      	movs	r3, #0
}
    5eac:	4618      	mov	r0, r3
    5eae:	3710      	adds	r7, #16
    5eb0:	46bd      	mov	sp, r7
    5eb2:	bd80      	pop	{r7, pc}
    5eb4:	0001d04c 	.word	0x0001d04c
    5eb8:	00006991 	.word	0x00006991
    5ebc:	000069b9 	.word	0x000069b9
    5ec0:	00006b1b 	.word	0x00006b1b
    5ec4:	0000f015 	.word	0x0000f015
    5ec8:	0000bdc9 	.word	0x0000bdc9
    5ecc:	0000f03b 	.word	0x0000f03b

00005ed0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    5ed0:	b580      	push	{r7, lr}
    5ed2:	b088      	sub	sp, #32
    5ed4:	af00      	add	r7, sp, #0
    5ed6:	60f8      	str	r0, [r7, #12]
    5ed8:	60b9      	str	r1, [r7, #8]
    5eda:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    5edc:	2300      	movs	r3, #0
    5ede:	61bb      	str	r3, [r7, #24]
    5ee0:	68f8      	ldr	r0, [r7, #12]
    5ee2:	4b23      	ldr	r3, [pc, #140]	; (5f70 <timer_add_timer_task+0xa0>)
    5ee4:	4798      	blx	r3
    5ee6:	6138      	str	r0, [r7, #16]

	if (!head) {
    5ee8:	693b      	ldr	r3, [r7, #16]
    5eea:	2b00      	cmp	r3, #0
    5eec:	d104      	bne.n	5ef8 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    5eee:	68b9      	ldr	r1, [r7, #8]
    5ef0:	68f8      	ldr	r0, [r7, #12]
    5ef2:	4b20      	ldr	r3, [pc, #128]	; (5f74 <timer_add_timer_task+0xa4>)
    5ef4:	4798      	blx	r3
		return;
    5ef6:	e037      	b.n	5f68 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5ef8:	693b      	ldr	r3, [r7, #16]
    5efa:	61fb      	str	r3, [r7, #28]
    5efc:	e022      	b.n	5f44 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    5efe:	69fb      	ldr	r3, [r7, #28]
    5f00:	685a      	ldr	r2, [r3, #4]
    5f02:	687b      	ldr	r3, [r7, #4]
    5f04:	429a      	cmp	r2, r3
    5f06:	d808      	bhi.n	5f1a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    5f08:	69fb      	ldr	r3, [r7, #28]
    5f0a:	689a      	ldr	r2, [r3, #8]
    5f0c:	69fb      	ldr	r3, [r7, #28]
    5f0e:	6859      	ldr	r1, [r3, #4]
    5f10:	687b      	ldr	r3, [r7, #4]
    5f12:	1acb      	subs	r3, r1, r3
    5f14:	4413      	add	r3, r2
    5f16:	617b      	str	r3, [r7, #20]
    5f18:	e009      	b.n	5f2e <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    5f1a:	69fb      	ldr	r3, [r7, #28]
    5f1c:	689a      	ldr	r2, [r3, #8]
    5f1e:	69fb      	ldr	r3, [r7, #28]
    5f20:	685b      	ldr	r3, [r3, #4]
    5f22:	441a      	add	r2, r3
    5f24:	687b      	ldr	r3, [r7, #4]
    5f26:	425b      	negs	r3, r3
    5f28:	4413      	add	r3, r2
    5f2a:	3301      	adds	r3, #1
    5f2c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    5f2e:	68bb      	ldr	r3, [r7, #8]
    5f30:	689a      	ldr	r2, [r3, #8]
    5f32:	697b      	ldr	r3, [r7, #20]
    5f34:	429a      	cmp	r2, r3
    5f36:	d909      	bls.n	5f4c <timer_add_timer_task+0x7c>
			break;
		prev = it;
    5f38:	69fb      	ldr	r3, [r7, #28]
    5f3a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5f3c:	69f8      	ldr	r0, [r7, #28]
    5f3e:	4b0e      	ldr	r3, [pc, #56]	; (5f78 <timer_add_timer_task+0xa8>)
    5f40:	4798      	blx	r3
    5f42:	61f8      	str	r0, [r7, #28]
    5f44:	69fb      	ldr	r3, [r7, #28]
    5f46:	2b00      	cmp	r3, #0
    5f48:	d1d9      	bne.n	5efe <timer_add_timer_task+0x2e>
    5f4a:	e000      	b.n	5f4e <timer_add_timer_task+0x7e>
			break;
    5f4c:	bf00      	nop
	}

	if (it == head) {
    5f4e:	69fa      	ldr	r2, [r7, #28]
    5f50:	693b      	ldr	r3, [r7, #16]
    5f52:	429a      	cmp	r2, r3
    5f54:	d104      	bne.n	5f60 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    5f56:	68b9      	ldr	r1, [r7, #8]
    5f58:	68f8      	ldr	r0, [r7, #12]
    5f5a:	4b06      	ldr	r3, [pc, #24]	; (5f74 <timer_add_timer_task+0xa4>)
    5f5c:	4798      	blx	r3
    5f5e:	e003      	b.n	5f68 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    5f60:	68b9      	ldr	r1, [r7, #8]
    5f62:	69b8      	ldr	r0, [r7, #24]
    5f64:	4b05      	ldr	r3, [pc, #20]	; (5f7c <timer_add_timer_task+0xac>)
    5f66:	4798      	blx	r3
	}
}
    5f68:	3720      	adds	r7, #32
    5f6a:	46bd      	mov	sp, r7
    5f6c:	bd80      	pop	{r7, pc}
    5f6e:	bf00      	nop
    5f70:	00005b9d 	.word	0x00005b9d
    5f74:	000069f1 	.word	0x000069f1
    5f78:	00005bb5 	.word	0x00005bb5
    5f7c:	00006a49 	.word	0x00006a49

00005f80 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    5f80:	b580      	push	{r7, lr}
    5f82:	b086      	sub	sp, #24
    5f84:	af00      	add	r7, sp, #0
    5f86:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    5f88:	687b      	ldr	r3, [r7, #4]
    5f8a:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    5f8c:	693b      	ldr	r3, [r7, #16]
    5f8e:	3314      	adds	r3, #20
    5f90:	4618      	mov	r0, r3
    5f92:	4b27      	ldr	r3, [pc, #156]	; (6030 <timer_process_counted+0xb0>)
    5f94:	4798      	blx	r3
    5f96:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    5f98:	693b      	ldr	r3, [r7, #16]
    5f9a:	691b      	ldr	r3, [r3, #16]
    5f9c:	1c5a      	adds	r2, r3, #1
    5f9e:	693b      	ldr	r3, [r7, #16]
    5fa0:	611a      	str	r2, [r3, #16]
    5fa2:	693b      	ldr	r3, [r7, #16]
    5fa4:	691b      	ldr	r3, [r3, #16]
    5fa6:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    5fa8:	693b      	ldr	r3, [r7, #16]
    5faa:	7e1b      	ldrb	r3, [r3, #24]
    5fac:	b2db      	uxtb	r3, r3
    5fae:	f003 0301 	and.w	r3, r3, #1
    5fb2:	2b00      	cmp	r3, #0
    5fb4:	d106      	bne.n	5fc4 <timer_process_counted+0x44>
    5fb6:	693b      	ldr	r3, [r7, #16]
    5fb8:	7e1b      	ldrb	r3, [r3, #24]
    5fba:	b2db      	uxtb	r3, r3
    5fbc:	f003 0302 	and.w	r3, r3, #2
    5fc0:	2b00      	cmp	r3, #0
    5fc2:	d027      	beq.n	6014 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    5fc4:	693b      	ldr	r3, [r7, #16]
    5fc6:	7e1b      	ldrb	r3, [r3, #24]
    5fc8:	b2db      	uxtb	r3, r3
    5fca:	f043 0302 	orr.w	r3, r3, #2
    5fce:	b2da      	uxtb	r2, r3
    5fd0:	693b      	ldr	r3, [r7, #16]
    5fd2:	761a      	strb	r2, [r3, #24]
		return;
    5fd4:	e029      	b.n	602a <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    5fd6:	697b      	ldr	r3, [r7, #20]
    5fd8:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    5fda:	693b      	ldr	r3, [r7, #16]
    5fdc:	3314      	adds	r3, #20
    5fde:	4618      	mov	r0, r3
    5fe0:	4b14      	ldr	r3, [pc, #80]	; (6034 <timer_process_counted+0xb4>)
    5fe2:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    5fe4:	68bb      	ldr	r3, [r7, #8]
    5fe6:	7c1b      	ldrb	r3, [r3, #16]
    5fe8:	2b01      	cmp	r3, #1
    5fea:	d109      	bne.n	6000 <timer_process_counted+0x80>
			tmp->time_label = time;
    5fec:	68bb      	ldr	r3, [r7, #8]
    5fee:	68fa      	ldr	r2, [r7, #12]
    5ff0:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    5ff2:	693b      	ldr	r3, [r7, #16]
    5ff4:	3314      	adds	r3, #20
    5ff6:	68fa      	ldr	r2, [r7, #12]
    5ff8:	68b9      	ldr	r1, [r7, #8]
    5ffa:	4618      	mov	r0, r3
    5ffc:	4b0e      	ldr	r3, [pc, #56]	; (6038 <timer_process_counted+0xb8>)
    5ffe:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    6000:	693b      	ldr	r3, [r7, #16]
    6002:	3314      	adds	r3, #20
    6004:	4618      	mov	r0, r3
    6006:	4b0a      	ldr	r3, [pc, #40]	; (6030 <timer_process_counted+0xb0>)
    6008:	4798      	blx	r3
    600a:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    600c:	68bb      	ldr	r3, [r7, #8]
    600e:	68db      	ldr	r3, [r3, #12]
    6010:	68b8      	ldr	r0, [r7, #8]
    6012:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    6014:	697b      	ldr	r3, [r7, #20]
    6016:	2b00      	cmp	r3, #0
    6018:	d007      	beq.n	602a <timer_process_counted+0xaa>
    601a:	697b      	ldr	r3, [r7, #20]
    601c:	685b      	ldr	r3, [r3, #4]
    601e:	68fa      	ldr	r2, [r7, #12]
    6020:	1ad2      	subs	r2, r2, r3
    6022:	697b      	ldr	r3, [r7, #20]
    6024:	689b      	ldr	r3, [r3, #8]
    6026:	429a      	cmp	r2, r3
    6028:	d2d5      	bcs.n	5fd6 <timer_process_counted+0x56>
	}
}
    602a:	3718      	adds	r7, #24
    602c:	46bd      	mov	sp, r7
    602e:	bd80      	pop	{r7, pc}
    6030:	00005b9d 	.word	0x00005b9d
    6034:	00006ae9 	.word	0x00006ae9
    6038:	00005ed1 	.word	0x00005ed1

0000603c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    603c:	b480      	push	{r7}
    603e:	b085      	sub	sp, #20
    6040:	af00      	add	r7, sp, #0
    6042:	4603      	mov	r3, r0
    6044:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6046:	2300      	movs	r3, #0
    6048:	73fb      	strb	r3, [r7, #15]
    604a:	e029      	b.n	60a0 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    604c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6050:	4a19      	ldr	r2, [pc, #100]	; (60b8 <_usb_d_find_ep+0x7c>)
    6052:	015b      	lsls	r3, r3, #5
    6054:	4413      	add	r3, r2
    6056:	3301      	adds	r3, #1
    6058:	781b      	ldrb	r3, [r3, #0]
    605a:	79fa      	ldrb	r2, [r7, #7]
    605c:	429a      	cmp	r2, r3
    605e:	d102      	bne.n	6066 <_usb_d_find_ep+0x2a>
			return i;
    6060:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6064:	e022      	b.n	60ac <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    6066:	f997 300f 	ldrsb.w	r3, [r7, #15]
    606a:	4a13      	ldr	r2, [pc, #76]	; (60b8 <_usb_d_find_ep+0x7c>)
    606c:	015b      	lsls	r3, r3, #5
    606e:	4413      	add	r3, r2
    6070:	781b      	ldrb	r3, [r3, #0]
    6072:	2b00      	cmp	r3, #0
    6074:	d10e      	bne.n	6094 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    6076:	79fb      	ldrb	r3, [r7, #7]
    6078:	f003 030f 	and.w	r3, r3, #15
    607c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    6080:	490d      	ldr	r1, [pc, #52]	; (60b8 <_usb_d_find_ep+0x7c>)
    6082:	0152      	lsls	r2, r2, #5
    6084:	440a      	add	r2, r1
    6086:	3201      	adds	r2, #1
    6088:	7812      	ldrb	r2, [r2, #0]
    608a:	4293      	cmp	r3, r2
    608c:	d102      	bne.n	6094 <_usb_d_find_ep+0x58>
			return i;
    608e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6092:	e00b      	b.n	60ac <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6094:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6098:	b2db      	uxtb	r3, r3
    609a:	3301      	adds	r3, #1
    609c:	b2db      	uxtb	r3, r3
    609e:	73fb      	strb	r3, [r7, #15]
    60a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    60a4:	2b03      	cmp	r3, #3
    60a6:	ddd1      	ble.n	604c <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    60a8:	f04f 33ff 	mov.w	r3, #4294967295
}
    60ac:	4618      	mov	r0, r3
    60ae:	3714      	adds	r7, #20
    60b0:	46bd      	mov	sp, r7
    60b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    60b6:	4770      	bx	lr
    60b8:	20003450 	.word	0x20003450

000060bc <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    60bc:	b580      	push	{r7, lr}
    60be:	b088      	sub	sp, #32
    60c0:	af00      	add	r7, sp, #0
    60c2:	60ba      	str	r2, [r7, #8]
    60c4:	607b      	str	r3, [r7, #4]
    60c6:	4603      	mov	r3, r0
    60c8:	73fb      	strb	r3, [r7, #15]
    60ca:	460b      	mov	r3, r1
    60cc:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    60ce:	68bb      	ldr	r3, [r7, #8]
    60d0:	617b      	str	r3, [r7, #20]
    60d2:	687b      	ldr	r3, [r7, #4]
    60d4:	61bb      	str	r3, [r7, #24]
    60d6:	7bbb      	ldrb	r3, [r7, #14]
    60d8:	2b00      	cmp	r3, #0
    60da:	d004      	beq.n	60e6 <_usb_d_trans+0x2a>
    60dc:	7bfb      	ldrb	r3, [r7, #15]
    60de:	f063 037f 	orn	r3, r3, #127	; 0x7f
    60e2:	b2db      	uxtb	r3, r3
    60e4:	e003      	b.n	60ee <_usb_d_trans+0x32>
    60e6:	7bfb      	ldrb	r3, [r7, #15]
    60e8:	f003 030f 	and.w	r3, r3, #15
    60ec:	b2db      	uxtb	r3, r3
    60ee:	773b      	strb	r3, [r7, #28]
    60f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    60f4:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    60f6:	f107 0314 	add.w	r3, r7, #20
    60fa:	4618      	mov	r0, r3
    60fc:	4b03      	ldr	r3, [pc, #12]	; (610c <_usb_d_trans+0x50>)
    60fe:	4798      	blx	r3
    6100:	4603      	mov	r3, r0
}
    6102:	4618      	mov	r0, r3
    6104:	3720      	adds	r7, #32
    6106:	46bd      	mov	sp, r7
    6108:	bd80      	pop	{r7, pc}
    610a:	bf00      	nop
    610c:	0000e549 	.word	0x0000e549

00006110 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    6110:	b480      	push	{r7}
    6112:	b085      	sub	sp, #20
    6114:	af00      	add	r7, sp, #0
    6116:	60f8      	str	r0, [r7, #12]
    6118:	60b9      	str	r1, [r7, #8]
    611a:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    611c:	2300      	movs	r3, #0
}
    611e:	4618      	mov	r0, r3
    6120:	3714      	adds	r7, #20
    6122:	46bd      	mov	sp, r7
    6124:	f85d 7b04 	ldr.w	r7, [sp], #4
    6128:	4770      	bx	lr
	...

0000612c <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    612c:	b580      	push	{r7, lr}
    612e:	b086      	sub	sp, #24
    6130:	af00      	add	r7, sp, #0
    6132:	4603      	mov	r3, r0
    6134:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6136:	79fb      	ldrb	r3, [r7, #7]
    6138:	4618      	mov	r0, r3
    613a:	4b2a      	ldr	r3, [pc, #168]	; (61e4 <usb_d_cb_trans_setup+0xb8>)
    613c:	4798      	blx	r3
    613e:	4603      	mov	r3, r0
    6140:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6142:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6146:	015b      	lsls	r3, r3, #5
    6148:	4a27      	ldr	r2, [pc, #156]	; (61e8 <usb_d_cb_trans_setup+0xbc>)
    614a:	4413      	add	r3, r2
    614c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    614e:	693b      	ldr	r3, [r7, #16]
    6150:	330c      	adds	r3, #12
    6152:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    6154:	79fb      	ldrb	r3, [r7, #7]
    6156:	68f9      	ldr	r1, [r7, #12]
    6158:	4618      	mov	r0, r3
    615a:	4b24      	ldr	r3, [pc, #144]	; (61ec <usb_d_cb_trans_setup+0xc0>)
    615c:	4798      	blx	r3
    615e:	4603      	mov	r3, r0
    6160:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    6162:	7afb      	ldrb	r3, [r7, #11]
    6164:	2b08      	cmp	r3, #8
    6166:	d00d      	beq.n	6184 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6168:	79fb      	ldrb	r3, [r7, #7]
    616a:	2101      	movs	r1, #1
    616c:	4618      	mov	r0, r3
    616e:	4b20      	ldr	r3, [pc, #128]	; (61f0 <usb_d_cb_trans_setup+0xc4>)
    6170:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6172:	79fb      	ldrb	r3, [r7, #7]
    6174:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6178:	b2db      	uxtb	r3, r3
    617a:	2101      	movs	r1, #1
    617c:	4618      	mov	r0, r3
    617e:	4b1c      	ldr	r3, [pc, #112]	; (61f0 <usb_d_cb_trans_setup+0xc4>)
    6180:	4798      	blx	r3
		return;
    6182:	e02b      	b.n	61dc <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6184:	79fb      	ldrb	r3, [r7, #7]
    6186:	2100      	movs	r1, #0
    6188:	4618      	mov	r0, r3
    618a:	4b19      	ldr	r3, [pc, #100]	; (61f0 <usb_d_cb_trans_setup+0xc4>)
    618c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    618e:	79fb      	ldrb	r3, [r7, #7]
    6190:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6194:	b2db      	uxtb	r3, r3
    6196:	2100      	movs	r1, #0
    6198:	4618      	mov	r0, r3
    619a:	4b15      	ldr	r3, [pc, #84]	; (61f0 <usb_d_cb_trans_setup+0xc4>)
    619c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    619e:	693b      	ldr	r3, [r7, #16]
    61a0:	2201      	movs	r2, #1
    61a2:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    61a4:	693b      	ldr	r3, [r7, #16]
    61a6:	695b      	ldr	r3, [r3, #20]
    61a8:	79fa      	ldrb	r2, [r7, #7]
    61aa:	68f9      	ldr	r1, [r7, #12]
    61ac:	4610      	mov	r0, r2
    61ae:	4798      	blx	r3
    61b0:	4603      	mov	r3, r0
    61b2:	f083 0301 	eor.w	r3, r3, #1
    61b6:	b2db      	uxtb	r3, r3
    61b8:	2b00      	cmp	r3, #0
    61ba:	d00f      	beq.n	61dc <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    61bc:	693b      	ldr	r3, [r7, #16]
    61be:	2205      	movs	r2, #5
    61c0:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    61c2:	79fb      	ldrb	r3, [r7, #7]
    61c4:	2101      	movs	r1, #1
    61c6:	4618      	mov	r0, r3
    61c8:	4b09      	ldr	r3, [pc, #36]	; (61f0 <usb_d_cb_trans_setup+0xc4>)
    61ca:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    61cc:	79fb      	ldrb	r3, [r7, #7]
    61ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
    61d2:	b2db      	uxtb	r3, r3
    61d4:	2101      	movs	r1, #1
    61d6:	4618      	mov	r0, r3
    61d8:	4b05      	ldr	r3, [pc, #20]	; (61f0 <usb_d_cb_trans_setup+0xc4>)
    61da:	4798      	blx	r3
	}
}
    61dc:	3718      	adds	r7, #24
    61de:	46bd      	mov	sp, r7
    61e0:	bd80      	pop	{r7, pc}
    61e2:	bf00      	nop
    61e4:	0000603d 	.word	0x0000603d
    61e8:	20003450 	.word	0x20003450
    61ec:	0000e4a1 	.word	0x0000e4a1
    61f0:	0000e319 	.word	0x0000e319

000061f4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    61f4:	b580      	push	{r7, lr}
    61f6:	b084      	sub	sp, #16
    61f8:	af00      	add	r7, sp, #0
    61fa:	4603      	mov	r3, r0
    61fc:	6039      	str	r1, [r7, #0]
    61fe:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6200:	79fb      	ldrb	r3, [r7, #7]
    6202:	4618      	mov	r0, r3
    6204:	4b0d      	ldr	r3, [pc, #52]	; (623c <usb_d_cb_trans_more+0x48>)
    6206:	4798      	blx	r3
    6208:	4603      	mov	r3, r0
    620a:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    620c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6210:	015b      	lsls	r3, r3, #5
    6212:	4a0b      	ldr	r2, [pc, #44]	; (6240 <usb_d_cb_trans_more+0x4c>)
    6214:	4413      	add	r3, r2
    6216:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    6218:	68bb      	ldr	r3, [r7, #8]
    621a:	789b      	ldrb	r3, [r3, #2]
    621c:	2b03      	cmp	r3, #3
    621e:	d107      	bne.n	6230 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    6220:	68bb      	ldr	r3, [r7, #8]
    6222:	699b      	ldr	r3, [r3, #24]
    6224:	79fa      	ldrb	r2, [r7, #7]
    6226:	6839      	ldr	r1, [r7, #0]
    6228:	4610      	mov	r0, r2
    622a:	4798      	blx	r3
    622c:	4603      	mov	r3, r0
    622e:	e000      	b.n	6232 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    6230:	2300      	movs	r3, #0
}
    6232:	4618      	mov	r0, r3
    6234:	3710      	adds	r7, #16
    6236:	46bd      	mov	sp, r7
    6238:	bd80      	pop	{r7, pc}
    623a:	bf00      	nop
    623c:	0000603d 	.word	0x0000603d
    6240:	20003450 	.word	0x20003450

00006244 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    6244:	b590      	push	{r4, r7, lr}
    6246:	b087      	sub	sp, #28
    6248:	af02      	add	r7, sp, #8
    624a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	789b      	ldrb	r3, [r3, #2]
    6250:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    6252:	687b      	ldr	r3, [r7, #4]
    6254:	7b1b      	ldrb	r3, [r3, #12]
    6256:	f003 0380 	and.w	r3, r3, #128	; 0x80
    625a:	2b00      	cmp	r3, #0
    625c:	bf14      	ite	ne
    625e:	2301      	movne	r3, #1
    6260:	2300      	moveq	r3, #0
    6262:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    6264:	7bfb      	ldrb	r3, [r7, #15]
    6266:	2b03      	cmp	r3, #3
    6268:	d13a      	bne.n	62e0 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    626a:	687b      	ldr	r3, [r7, #4]
    626c:	69db      	ldr	r3, [r3, #28]
    626e:	687a      	ldr	r2, [r7, #4]
    6270:	7850      	ldrb	r0, [r2, #1]
    6272:	687a      	ldr	r2, [r7, #4]
    6274:	320c      	adds	r2, #12
    6276:	2101      	movs	r1, #1
    6278:	4798      	blx	r3
    627a:	4603      	mov	r3, r0
    627c:	737b      	strb	r3, [r7, #13]
		if (err) {
    627e:	7b7b      	ldrb	r3, [r7, #13]
    6280:	2b00      	cmp	r3, #0
    6282:	d015      	beq.n	62b0 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    6284:	687b      	ldr	r3, [r7, #4]
    6286:	2205      	movs	r2, #5
    6288:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    628a:	687b      	ldr	r3, [r7, #4]
    628c:	2202      	movs	r2, #2
    628e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    6290:	7bbb      	ldrb	r3, [r7, #14]
    6292:	2b00      	cmp	r3, #0
    6294:	d002      	beq.n	629c <usb_d_ctrl_trans_done+0x58>
    6296:	687b      	ldr	r3, [r7, #4]
    6298:	785b      	ldrb	r3, [r3, #1]
    629a:	e004      	b.n	62a6 <usb_d_ctrl_trans_done+0x62>
    629c:	687b      	ldr	r3, [r7, #4]
    629e:	785b      	ldrb	r3, [r3, #1]
    62a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    62a4:	b2db      	uxtb	r3, r3
    62a6:	2101      	movs	r1, #1
    62a8:	4618      	mov	r0, r3
    62aa:	4b15      	ldr	r3, [pc, #84]	; (6300 <usb_d_ctrl_trans_done+0xbc>)
    62ac:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    62ae:	e022      	b.n	62f6 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    62b0:	687b      	ldr	r3, [r7, #4]
    62b2:	2204      	movs	r2, #4
    62b4:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    62b6:	687b      	ldr	r3, [r7, #4]
    62b8:	7858      	ldrb	r0, [r3, #1]
    62ba:	7bbb      	ldrb	r3, [r7, #14]
    62bc:	2b00      	cmp	r3, #0
    62be:	bf14      	ite	ne
    62c0:	2301      	movne	r3, #1
    62c2:	2300      	moveq	r3, #0
    62c4:	b2db      	uxtb	r3, r3
    62c6:	f083 0301 	eor.w	r3, r3, #1
    62ca:	b2db      	uxtb	r3, r3
    62cc:	f003 0301 	and.w	r3, r3, #1
    62d0:	b2d9      	uxtb	r1, r3
    62d2:	2301      	movs	r3, #1
    62d4:	9300      	str	r3, [sp, #0]
    62d6:	2300      	movs	r3, #0
    62d8:	2200      	movs	r2, #0
    62da:	4c0a      	ldr	r4, [pc, #40]	; (6304 <usb_d_ctrl_trans_done+0xc0>)
    62dc:	47a0      	blx	r4
}
    62de:	e00a      	b.n	62f6 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    62e0:	687b      	ldr	r3, [r7, #4]
    62e2:	69db      	ldr	r3, [r3, #28]
    62e4:	687a      	ldr	r2, [r7, #4]
    62e6:	7850      	ldrb	r0, [r2, #1]
    62e8:	687a      	ldr	r2, [r7, #4]
    62ea:	320c      	adds	r2, #12
    62ec:	2100      	movs	r1, #0
    62ee:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    62f0:	687b      	ldr	r3, [r7, #4]
    62f2:	2202      	movs	r2, #2
    62f4:	709a      	strb	r2, [r3, #2]
}
    62f6:	bf00      	nop
    62f8:	3714      	adds	r7, #20
    62fa:	46bd      	mov	sp, r7
    62fc:	bd90      	pop	{r4, r7, pc}
    62fe:	bf00      	nop
    6300:	0000e319 	.word	0x0000e319
    6304:	000060bd 	.word	0x000060bd

00006308 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    6308:	b580      	push	{r7, lr}
    630a:	b086      	sub	sp, #24
    630c:	af00      	add	r7, sp, #0
    630e:	4603      	mov	r3, r0
    6310:	60b9      	str	r1, [r7, #8]
    6312:	607a      	str	r2, [r7, #4]
    6314:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6316:	7bfb      	ldrb	r3, [r7, #15]
    6318:	4618      	mov	r0, r3
    631a:	4b2f      	ldr	r3, [pc, #188]	; (63d8 <_usb_d_cb_trans_done+0xd0>)
    631c:	4798      	blx	r3
    631e:	4603      	mov	r3, r0
    6320:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6322:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6326:	015b      	lsls	r3, r3, #5
    6328:	4a2c      	ldr	r2, [pc, #176]	; (63dc <_usb_d_cb_trans_done+0xd4>)
    632a:	4413      	add	r3, r2
    632c:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    632e:	68bb      	ldr	r3, [r7, #8]
    6330:	2b00      	cmp	r3, #0
    6332:	d10e      	bne.n	6352 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    6334:	693b      	ldr	r3, [r7, #16]
    6336:	2200      	movs	r2, #0
    6338:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    633a:	693b      	ldr	r3, [r7, #16]
    633c:	781b      	ldrb	r3, [r3, #0]
    633e:	2b00      	cmp	r3, #0
    6340:	d103      	bne.n	634a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    6342:	6938      	ldr	r0, [r7, #16]
    6344:	4b26      	ldr	r3, [pc, #152]	; (63e0 <_usb_d_cb_trans_done+0xd8>)
    6346:	4798      	blx	r3
			return;
    6348:	e043      	b.n	63d2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    634a:	693b      	ldr	r3, [r7, #16]
    634c:	2201      	movs	r2, #1
    634e:	709a      	strb	r2, [r3, #2]
    6350:	e038      	b.n	63c4 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    6352:	68bb      	ldr	r3, [r7, #8]
    6354:	2b01      	cmp	r3, #1
    6356:	d113      	bne.n	6380 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    6358:	693b      	ldr	r3, [r7, #16]
    635a:	2202      	movs	r2, #2
    635c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    635e:	693b      	ldr	r3, [r7, #16]
    6360:	781b      	ldrb	r3, [r3, #0]
    6362:	2b00      	cmp	r3, #0
    6364:	d108      	bne.n	6378 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6366:	693b      	ldr	r3, [r7, #16]
    6368:	2202      	movs	r2, #2
    636a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    636c:	7bfb      	ldrb	r3, [r7, #15]
    636e:	2100      	movs	r1, #0
    6370:	4618      	mov	r0, r3
    6372:	4b1c      	ldr	r3, [pc, #112]	; (63e4 <_usb_d_cb_trans_done+0xdc>)
    6374:	4798      	blx	r3
    6376:	e025      	b.n	63c4 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    6378:	693b      	ldr	r3, [r7, #16]
    637a:	2205      	movs	r2, #5
    637c:	709a      	strb	r2, [r3, #2]
    637e:	e021      	b.n	63c4 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    6380:	68bb      	ldr	r3, [r7, #8]
    6382:	2b02      	cmp	r3, #2
    6384:	d10e      	bne.n	63a4 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    6386:	693b      	ldr	r3, [r7, #16]
    6388:	2204      	movs	r2, #4
    638a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    638c:	693b      	ldr	r3, [r7, #16]
    638e:	781b      	ldrb	r3, [r3, #0]
    6390:	2b00      	cmp	r3, #0
    6392:	d103      	bne.n	639c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6394:	693b      	ldr	r3, [r7, #16]
    6396:	2202      	movs	r2, #2
    6398:	709a      	strb	r2, [r3, #2]
			return;
    639a:	e01a      	b.n	63d2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    639c:	693b      	ldr	r3, [r7, #16]
    639e:	2201      	movs	r2, #1
    63a0:	709a      	strb	r2, [r3, #2]
    63a2:	e00f      	b.n	63c4 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    63a4:	68bb      	ldr	r3, [r7, #8]
    63a6:	2b03      	cmp	r3, #3
    63a8:	d106      	bne.n	63b8 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    63aa:	693b      	ldr	r3, [r7, #16]
    63ac:	2200      	movs	r2, #0
    63ae:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    63b0:	693b      	ldr	r3, [r7, #16]
    63b2:	2205      	movs	r2, #5
    63b4:	70da      	strb	r2, [r3, #3]
    63b6:	e005      	b.n	63c4 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    63b8:	693b      	ldr	r3, [r7, #16]
    63ba:	2206      	movs	r2, #6
    63bc:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    63be:	693b      	ldr	r3, [r7, #16]
    63c0:	2206      	movs	r2, #6
    63c2:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    63c4:	693b      	ldr	r3, [r7, #16]
    63c6:	69db      	ldr	r3, [r3, #28]
    63c8:	693a      	ldr	r2, [r7, #16]
    63ca:	78d1      	ldrb	r1, [r2, #3]
    63cc:	687a      	ldr	r2, [r7, #4]
    63ce:	7bf8      	ldrb	r0, [r7, #15]
    63d0:	4798      	blx	r3
}
    63d2:	3718      	adds	r7, #24
    63d4:	46bd      	mov	sp, r7
    63d6:	bd80      	pop	{r7, pc}
    63d8:	0000603d 	.word	0x0000603d
    63dc:	20003450 	.word	0x20003450
    63e0:	00006245 	.word	0x00006245
    63e4:	0000e319 	.word	0x0000e319

000063e8 <usb_d_init>:

int32_t usb_d_init(void)
{
    63e8:	b580      	push	{r7, lr}
    63ea:	b082      	sub	sp, #8
    63ec:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    63ee:	4b21      	ldr	r3, [pc, #132]	; (6474 <usb_d_init+0x8c>)
    63f0:	4798      	blx	r3
    63f2:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    63f4:	683b      	ldr	r3, [r7, #0]
    63f6:	2b00      	cmp	r3, #0
    63f8:	da01      	bge.n	63fe <usb_d_init+0x16>
		return rc;
    63fa:	683b      	ldr	r3, [r7, #0]
    63fc:	e036      	b.n	646c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    63fe:	2280      	movs	r2, #128	; 0x80
    6400:	2100      	movs	r1, #0
    6402:	481d      	ldr	r0, [pc, #116]	; (6478 <usb_d_init+0x90>)
    6404:	4b1d      	ldr	r3, [pc, #116]	; (647c <usb_d_init+0x94>)
    6406:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6408:	2300      	movs	r3, #0
    640a:	71fb      	strb	r3, [r7, #7]
    640c:	e01e      	b.n	644c <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    640e:	79fb      	ldrb	r3, [r7, #7]
    6410:	4a19      	ldr	r2, [pc, #100]	; (6478 <usb_d_init+0x90>)
    6412:	015b      	lsls	r3, r3, #5
    6414:	4413      	add	r3, r2
    6416:	3301      	adds	r3, #1
    6418:	22ff      	movs	r2, #255	; 0xff
    641a:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    641c:	79fb      	ldrb	r3, [r7, #7]
    641e:	4a16      	ldr	r2, [pc, #88]	; (6478 <usb_d_init+0x90>)
    6420:	015b      	lsls	r3, r3, #5
    6422:	4413      	add	r3, r2
    6424:	3314      	adds	r3, #20
    6426:	4a16      	ldr	r2, [pc, #88]	; (6480 <usb_d_init+0x98>)
    6428:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    642a:	79fb      	ldrb	r3, [r7, #7]
    642c:	4a12      	ldr	r2, [pc, #72]	; (6478 <usb_d_init+0x90>)
    642e:	015b      	lsls	r3, r3, #5
    6430:	4413      	add	r3, r2
    6432:	3318      	adds	r3, #24
    6434:	4a12      	ldr	r2, [pc, #72]	; (6480 <usb_d_init+0x98>)
    6436:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    6438:	79fb      	ldrb	r3, [r7, #7]
    643a:	4a0f      	ldr	r2, [pc, #60]	; (6478 <usb_d_init+0x90>)
    643c:	015b      	lsls	r3, r3, #5
    643e:	4413      	add	r3, r2
    6440:	331c      	adds	r3, #28
    6442:	4a0f      	ldr	r2, [pc, #60]	; (6480 <usb_d_init+0x98>)
    6444:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6446:	79fb      	ldrb	r3, [r7, #7]
    6448:	3301      	adds	r3, #1
    644a:	71fb      	strb	r3, [r7, #7]
    644c:	79fb      	ldrb	r3, [r7, #7]
    644e:	2b03      	cmp	r3, #3
    6450:	d9dd      	bls.n	640e <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    6452:	490c      	ldr	r1, [pc, #48]	; (6484 <usb_d_init+0x9c>)
    6454:	2000      	movs	r0, #0
    6456:	4b0c      	ldr	r3, [pc, #48]	; (6488 <usb_d_init+0xa0>)
    6458:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    645a:	490c      	ldr	r1, [pc, #48]	; (648c <usb_d_init+0xa4>)
    645c:	2001      	movs	r0, #1
    645e:	4b0a      	ldr	r3, [pc, #40]	; (6488 <usb_d_init+0xa0>)
    6460:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    6462:	490b      	ldr	r1, [pc, #44]	; (6490 <usb_d_init+0xa8>)
    6464:	2002      	movs	r0, #2
    6466:	4b08      	ldr	r3, [pc, #32]	; (6488 <usb_d_init+0xa0>)
    6468:	4798      	blx	r3
	return ERR_NONE;
    646a:	2300      	movs	r3, #0
}
    646c:	4618      	mov	r0, r3
    646e:	3708      	adds	r7, #8
    6470:	46bd      	mov	sp, r7
    6472:	bd80      	pop	{r7, pc}
    6474:	0000db61 	.word	0x0000db61
    6478:	20003450 	.word	0x20003450
    647c:	00018c8d 	.word	0x00018c8d
    6480:	00006111 	.word	0x00006111
    6484:	0000612d 	.word	0x0000612d
    6488:	0000e7a9 	.word	0x0000e7a9
    648c:	000061f5 	.word	0x000061f5
    6490:	00006309 	.word	0x00006309

00006494 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    6494:	b580      	push	{r7, lr}
    6496:	b082      	sub	sp, #8
    6498:	af00      	add	r7, sp, #0
    649a:	4603      	mov	r3, r0
    649c:	6039      	str	r1, [r7, #0]
    649e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    64a0:	79fb      	ldrb	r3, [r7, #7]
    64a2:	6839      	ldr	r1, [r7, #0]
    64a4:	4618      	mov	r0, r3
    64a6:	4b03      	ldr	r3, [pc, #12]	; (64b4 <usb_d_register_callback+0x20>)
    64a8:	4798      	blx	r3
}
    64aa:	bf00      	nop
    64ac:	3708      	adds	r7, #8
    64ae:	46bd      	mov	sp, r7
    64b0:	bd80      	pop	{r7, pc}
    64b2:	bf00      	nop
    64b4:	0000e761 	.word	0x0000e761

000064b8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    64b8:	b580      	push	{r7, lr}
    64ba:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    64bc:	4b02      	ldr	r3, [pc, #8]	; (64c8 <usb_d_enable+0x10>)
    64be:	4798      	blx	r3
    64c0:	4603      	mov	r3, r0
}
    64c2:	4618      	mov	r0, r3
    64c4:	bd80      	pop	{r7, pc}
    64c6:	bf00      	nop
    64c8:	0000dc51 	.word	0x0000dc51

000064cc <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    64cc:	b580      	push	{r7, lr}
    64ce:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    64d0:	4b01      	ldr	r3, [pc, #4]	; (64d8 <usb_d_attach+0xc>)
    64d2:	4798      	blx	r3
}
    64d4:	bf00      	nop
    64d6:	bd80      	pop	{r7, pc}
    64d8:	0000dcd5 	.word	0x0000dcd5

000064dc <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    64dc:	b580      	push	{r7, lr}
    64de:	b082      	sub	sp, #8
    64e0:	af00      	add	r7, sp, #0
    64e2:	4603      	mov	r3, r0
    64e4:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    64e6:	79fb      	ldrb	r3, [r7, #7]
    64e8:	4618      	mov	r0, r3
    64ea:	4b03      	ldr	r3, [pc, #12]	; (64f8 <usb_d_set_address+0x1c>)
    64ec:	4798      	blx	r3
}
    64ee:	bf00      	nop
    64f0:	3708      	adds	r7, #8
    64f2:	46bd      	mov	sp, r7
    64f4:	bd80      	pop	{r7, pc}
    64f6:	bf00      	nop
    64f8:	0000dce9 	.word	0x0000dce9

000064fc <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    64fc:	b580      	push	{r7, lr}
    64fe:	b082      	sub	sp, #8
    6500:	af00      	add	r7, sp, #0
    6502:	4603      	mov	r3, r0
    6504:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    6506:	79fb      	ldrb	r3, [r7, #7]
    6508:	b29b      	uxth	r3, r3
    650a:	461a      	mov	r2, r3
    650c:	2100      	movs	r1, #0
    650e:	2000      	movs	r0, #0
    6510:	4b03      	ldr	r3, [pc, #12]	; (6520 <usb_d_ep0_init+0x24>)
    6512:	4798      	blx	r3
    6514:	4603      	mov	r3, r0
}
    6516:	4618      	mov	r0, r3
    6518:	3708      	adds	r7, #8
    651a:	46bd      	mov	sp, r7
    651c:	bd80      	pop	{r7, pc}
    651e:	bf00      	nop
    6520:	00006525 	.word	0x00006525

00006524 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    6524:	b580      	push	{r7, lr}
    6526:	b086      	sub	sp, #24
    6528:	af00      	add	r7, sp, #0
    652a:	4603      	mov	r3, r0
    652c:	71fb      	strb	r3, [r7, #7]
    652e:	460b      	mov	r3, r1
    6530:	71bb      	strb	r3, [r7, #6]
    6532:	4613      	mov	r3, r2
    6534:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    6536:	79fb      	ldrb	r3, [r7, #7]
    6538:	4618      	mov	r0, r3
    653a:	4b1e      	ldr	r3, [pc, #120]	; (65b4 <usb_d_ep_init+0x90>)
    653c:	4798      	blx	r3
    653e:	4603      	mov	r3, r0
    6540:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6542:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6546:	015b      	lsls	r3, r3, #5
    6548:	4a1b      	ldr	r2, [pc, #108]	; (65b8 <usb_d_ep_init+0x94>)
    654a:	4413      	add	r3, r2
    654c:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    654e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6552:	2b00      	cmp	r3, #0
    6554:	db02      	blt.n	655c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    6556:	f06f 0313 	mvn.w	r3, #19
    655a:	e027      	b.n	65ac <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    655c:	20ff      	movs	r0, #255	; 0xff
    655e:	4b15      	ldr	r3, [pc, #84]	; (65b4 <usb_d_ep_init+0x90>)
    6560:	4798      	blx	r3
    6562:	4603      	mov	r3, r0
    6564:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    6566:	f997 3017 	ldrsb.w	r3, [r7, #23]
    656a:	2b00      	cmp	r3, #0
    656c:	da02      	bge.n	6574 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    656e:	f06f 0314 	mvn.w	r3, #20
    6572:	e01b      	b.n	65ac <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    6574:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6578:	015b      	lsls	r3, r3, #5
    657a:	4a0f      	ldr	r2, [pc, #60]	; (65b8 <usb_d_ep_init+0x94>)
    657c:	4413      	add	r3, r2
    657e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    6580:	88ba      	ldrh	r2, [r7, #4]
    6582:	79b9      	ldrb	r1, [r7, #6]
    6584:	79fb      	ldrb	r3, [r7, #7]
    6586:	4618      	mov	r0, r3
    6588:	4b0c      	ldr	r3, [pc, #48]	; (65bc <usb_d_ep_init+0x98>)
    658a:	4798      	blx	r3
    658c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    658e:	68fb      	ldr	r3, [r7, #12]
    6590:	2b00      	cmp	r3, #0
    6592:	da01      	bge.n	6598 <usb_d_ep_init+0x74>
		return rc;
    6594:	68fb      	ldr	r3, [r7, #12]
    6596:	e009      	b.n	65ac <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    6598:	693b      	ldr	r3, [r7, #16]
    659a:	79fa      	ldrb	r2, [r7, #7]
    659c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    659e:	79bb      	ldrb	r3, [r7, #6]
    65a0:	f003 0303 	and.w	r3, r3, #3
    65a4:	b2da      	uxtb	r2, r3
    65a6:	693b      	ldr	r3, [r7, #16]
    65a8:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    65aa:	2300      	movs	r3, #0
}
    65ac:	4618      	mov	r0, r3
    65ae:	3718      	adds	r7, #24
    65b0:	46bd      	mov	sp, r7
    65b2:	bd80      	pop	{r7, pc}
    65b4:	0000603d 	.word	0x0000603d
    65b8:	20003450 	.word	0x20003450
    65bc:	0000dd89 	.word	0x0000dd89

000065c0 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    65c0:	b580      	push	{r7, lr}
    65c2:	b084      	sub	sp, #16
    65c4:	af00      	add	r7, sp, #0
    65c6:	4603      	mov	r3, r0
    65c8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    65ca:	79fb      	ldrb	r3, [r7, #7]
    65cc:	4618      	mov	r0, r3
    65ce:	4b0d      	ldr	r3, [pc, #52]	; (6604 <usb_d_ep_deinit+0x44>)
    65d0:	4798      	blx	r3
    65d2:	4603      	mov	r3, r0
    65d4:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    65d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    65da:	015b      	lsls	r3, r3, #5
    65dc:	4a0a      	ldr	r2, [pc, #40]	; (6608 <usb_d_ep_deinit+0x48>)
    65de:	4413      	add	r3, r2
    65e0:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    65e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    65e6:	2b00      	cmp	r3, #0
    65e8:	db07      	blt.n	65fa <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    65ea:	79fb      	ldrb	r3, [r7, #7]
    65ec:	4618      	mov	r0, r3
    65ee:	4b07      	ldr	r3, [pc, #28]	; (660c <usb_d_ep_deinit+0x4c>)
    65f0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    65f2:	68bb      	ldr	r3, [r7, #8]
    65f4:	22ff      	movs	r2, #255	; 0xff
    65f6:	705a      	strb	r2, [r3, #1]
    65f8:	e000      	b.n	65fc <usb_d_ep_deinit+0x3c>
		return;
    65fa:	bf00      	nop
}
    65fc:	3710      	adds	r7, #16
    65fe:	46bd      	mov	sp, r7
    6600:	bd80      	pop	{r7, pc}
    6602:	bf00      	nop
    6604:	0000603d 	.word	0x0000603d
    6608:	20003450 	.word	0x20003450
    660c:	0000debd 	.word	0x0000debd

00006610 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    6610:	b580      	push	{r7, lr}
    6612:	b086      	sub	sp, #24
    6614:	af00      	add	r7, sp, #0
    6616:	4603      	mov	r3, r0
    6618:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    661a:	79fb      	ldrb	r3, [r7, #7]
    661c:	4618      	mov	r0, r3
    661e:	4b15      	ldr	r3, [pc, #84]	; (6674 <usb_d_ep_enable+0x64>)
    6620:	4798      	blx	r3
    6622:	4603      	mov	r3, r0
    6624:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6626:	f997 3017 	ldrsb.w	r3, [r7, #23]
    662a:	015b      	lsls	r3, r3, #5
    662c:	4a12      	ldr	r2, [pc, #72]	; (6678 <usb_d_ep_enable+0x68>)
    662e:	4413      	add	r3, r2
    6630:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    6632:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6636:	2b00      	cmp	r3, #0
    6638:	da02      	bge.n	6640 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    663a:	f06f 0311 	mvn.w	r3, #17
    663e:	e014      	b.n	666a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    6640:	693b      	ldr	r3, [r7, #16]
    6642:	781b      	ldrb	r3, [r3, #0]
    6644:	2b00      	cmp	r3, #0
    6646:	d101      	bne.n	664c <usb_d_ep_enable+0x3c>
    6648:	2202      	movs	r2, #2
    664a:	e000      	b.n	664e <usb_d_ep_enable+0x3e>
    664c:	2201      	movs	r2, #1
    664e:	693b      	ldr	r3, [r7, #16]
    6650:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    6652:	79fb      	ldrb	r3, [r7, #7]
    6654:	4618      	mov	r0, r3
    6656:	4b09      	ldr	r3, [pc, #36]	; (667c <usb_d_ep_enable+0x6c>)
    6658:	4798      	blx	r3
    665a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    665c:	68fb      	ldr	r3, [r7, #12]
    665e:	2b00      	cmp	r3, #0
    6660:	da02      	bge.n	6668 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    6662:	693b      	ldr	r3, [r7, #16]
    6664:	2200      	movs	r2, #0
    6666:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    6668:	68fb      	ldr	r3, [r7, #12]
}
    666a:	4618      	mov	r0, r3
    666c:	3718      	adds	r7, #24
    666e:	46bd      	mov	sp, r7
    6670:	bd80      	pop	{r7, pc}
    6672:	bf00      	nop
    6674:	0000603d 	.word	0x0000603d
    6678:	20003450 	.word	0x20003450
    667c:	0000dfa1 	.word	0x0000dfa1

00006680 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    6680:	b590      	push	{r4, r7, lr}
    6682:	b08d      	sub	sp, #52	; 0x34
    6684:	af02      	add	r7, sp, #8
    6686:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    6688:	687b      	ldr	r3, [r7, #4]
    668a:	7a1b      	ldrb	r3, [r3, #8]
    668c:	4618      	mov	r0, r3
    668e:	4b51      	ldr	r3, [pc, #324]	; (67d4 <usb_d_ep_transfer+0x154>)
    6690:	4798      	blx	r3
    6692:	4603      	mov	r3, r0
    6694:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    6696:	f997 301f 	ldrsb.w	r3, [r7, #31]
    669a:	015b      	lsls	r3, r3, #5
    669c:	4a4e      	ldr	r2, [pc, #312]	; (67d8 <usb_d_ep_transfer+0x158>)
    669e:	4413      	add	r3, r2
    66a0:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    66a2:	687b      	ldr	r3, [r7, #4]
    66a4:	7a1b      	ldrb	r3, [r3, #8]
    66a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    66aa:	2b00      	cmp	r3, #0
    66ac:	bf14      	ite	ne
    66ae:	2301      	movne	r3, #1
    66b0:	2300      	moveq	r3, #0
    66b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    66b6:	687b      	ldr	r3, [r7, #4]
    66b8:	7a5b      	ldrb	r3, [r3, #9]
    66ba:	2b00      	cmp	r3, #0
    66bc:	bf14      	ite	ne
    66be:	2301      	movne	r3, #1
    66c0:	2300      	moveq	r3, #0
    66c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    66c6:	687b      	ldr	r3, [r7, #4]
    66c8:	685b      	ldr	r3, [r3, #4]
    66ca:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    66cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
    66d0:	2b00      	cmp	r3, #0
    66d2:	da02      	bge.n	66da <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    66d4:	f06f 0311 	mvn.w	r3, #17
    66d8:	e077      	b.n	67ca <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    66da:	f107 0308 	add.w	r3, r7, #8
    66de:	4618      	mov	r0, r3
    66e0:	4b3e      	ldr	r3, [pc, #248]	; (67dc <usb_d_ep_transfer+0x15c>)
    66e2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    66e4:	69bb      	ldr	r3, [r7, #24]
    66e6:	789b      	ldrb	r3, [r3, #2]
    66e8:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    66ea:	7bfb      	ldrb	r3, [r7, #15]
    66ec:	b2db      	uxtb	r3, r3
    66ee:	2b01      	cmp	r3, #1
    66f0:	d10c      	bne.n	670c <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    66f2:	69bb      	ldr	r3, [r7, #24]
    66f4:	2203      	movs	r2, #3
    66f6:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    66f8:	f107 0308 	add.w	r3, r7, #8
    66fc:	4618      	mov	r0, r3
    66fe:	4b38      	ldr	r3, [pc, #224]	; (67e0 <usb_d_ep_transfer+0x160>)
    6700:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6702:	69bb      	ldr	r3, [r7, #24]
    6704:	781b      	ldrb	r3, [r3, #0]
    6706:	2b00      	cmp	r3, #0
    6708:	d151      	bne.n	67ae <usb_d_ep_transfer+0x12e>
    670a:	e017      	b.n	673c <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    670c:	f107 0308 	add.w	r3, r7, #8
    6710:	4618      	mov	r0, r3
    6712:	4b33      	ldr	r3, [pc, #204]	; (67e0 <usb_d_ep_transfer+0x160>)
    6714:	4798      	blx	r3
		switch (state) {
    6716:	7bfb      	ldrb	r3, [r7, #15]
    6718:	b2db      	uxtb	r3, r3
    671a:	2b05      	cmp	r3, #5
    671c:	d004      	beq.n	6728 <usb_d_ep_transfer+0xa8>
    671e:	2b06      	cmp	r3, #6
    6720:	d004      	beq.n	672c <usb_d_ep_transfer+0xac>
    6722:	2b00      	cmp	r3, #0
    6724:	d005      	beq.n	6732 <usb_d_ep_transfer+0xb2>
    6726:	e007      	b.n	6738 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    6728:	2302      	movs	r3, #2
    672a:	e04e      	b.n	67ca <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    672c:	f06f 030f 	mvn.w	r3, #15
    6730:	e04b      	b.n	67ca <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    6732:	f06f 0312 	mvn.w	r3, #18
    6736:	e048      	b.n	67ca <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    6738:	2301      	movs	r3, #1
    673a:	e046      	b.n	67ca <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    673c:	69bb      	ldr	r3, [r7, #24]
    673e:	7c9b      	ldrb	r3, [r3, #18]
    6740:	b29a      	uxth	r2, r3
    6742:	69bb      	ldr	r3, [r7, #24]
    6744:	7cdb      	ldrb	r3, [r3, #19]
    6746:	b29b      	uxth	r3, r3
    6748:	021b      	lsls	r3, r3, #8
    674a:	b29b      	uxth	r3, r3
    674c:	4413      	add	r3, r2
    674e:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    6750:	8afb      	ldrh	r3, [r7, #22]
    6752:	2b00      	cmp	r3, #0
    6754:	d10b      	bne.n	676e <usb_d_ep_transfer+0xee>
			dir                 = true;
    6756:	2301      	movs	r3, #1
    6758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    675c:	2300      	movs	r3, #0
    675e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    6760:	2301      	movs	r3, #1
    6762:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    6766:	69bb      	ldr	r3, [r7, #24]
    6768:	2204      	movs	r2, #4
    676a:	709a      	strb	r2, [r3, #2]
    676c:	e01f      	b.n	67ae <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    676e:	69bb      	ldr	r3, [r7, #24]
    6770:	7b1b      	ldrb	r3, [r3, #12]
    6772:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6776:	2b00      	cmp	r3, #0
    6778:	bf14      	ite	ne
    677a:	2301      	movne	r3, #1
    677c:	2300      	moveq	r3, #0
    677e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    6782:	8afa      	ldrh	r2, [r7, #22]
    6784:	6a3b      	ldr	r3, [r7, #32]
    6786:	429a      	cmp	r2, r3
    6788:	d201      	bcs.n	678e <usb_d_ep_transfer+0x10e>
				len = req_len;
    678a:	8afb      	ldrh	r3, [r7, #22]
    678c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    678e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    6792:	2b00      	cmp	r3, #0
    6794:	d008      	beq.n	67a8 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    6796:	8afa      	ldrh	r2, [r7, #22]
    6798:	6a3b      	ldr	r3, [r7, #32]
    679a:	429a      	cmp	r2, r3
    679c:	bf8c      	ite	hi
    679e:	2301      	movhi	r3, #1
    67a0:	2300      	movls	r3, #0
    67a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    67a6:	e002      	b.n	67ae <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    67a8:	2300      	movs	r3, #0
    67aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    67ae:	687b      	ldr	r3, [r7, #4]
    67b0:	7a18      	ldrb	r0, [r3, #8]
    67b2:	687b      	ldr	r3, [r7, #4]
    67b4:	681a      	ldr	r2, [r3, #0]
    67b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    67ba:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    67be:	9300      	str	r3, [sp, #0]
    67c0:	6a3b      	ldr	r3, [r7, #32]
    67c2:	4c08      	ldr	r4, [pc, #32]	; (67e4 <usb_d_ep_transfer+0x164>)
    67c4:	47a0      	blx	r4
    67c6:	6138      	str	r0, [r7, #16]
	return rc;
    67c8:	693b      	ldr	r3, [r7, #16]
}
    67ca:	4618      	mov	r0, r3
    67cc:	372c      	adds	r7, #44	; 0x2c
    67ce:	46bd      	mov	sp, r7
    67d0:	bd90      	pop	{r4, r7, pc}
    67d2:	bf00      	nop
    67d4:	0000603d 	.word	0x0000603d
    67d8:	20003450 	.word	0x20003450
    67dc:	0000f015 	.word	0x0000f015
    67e0:	0000f03b 	.word	0x0000f03b
    67e4:	000060bd 	.word	0x000060bd

000067e8 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    67e8:	b580      	push	{r7, lr}
    67ea:	b084      	sub	sp, #16
    67ec:	af00      	add	r7, sp, #0
    67ee:	4603      	mov	r3, r0
    67f0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    67f2:	79fb      	ldrb	r3, [r7, #7]
    67f4:	4618      	mov	r0, r3
    67f6:	4b0e      	ldr	r3, [pc, #56]	; (6830 <usb_d_ep_abort+0x48>)
    67f8:	4798      	blx	r3
    67fa:	4603      	mov	r3, r0
    67fc:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    67fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6802:	015b      	lsls	r3, r3, #5
    6804:	4a0b      	ldr	r2, [pc, #44]	; (6834 <usb_d_ep_abort+0x4c>)
    6806:	4413      	add	r3, r2
    6808:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    680a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    680e:	2b00      	cmp	r3, #0
    6810:	db0a      	blt.n	6828 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    6812:	79fb      	ldrb	r3, [r7, #7]
    6814:	4618      	mov	r0, r3
    6816:	4b08      	ldr	r3, [pc, #32]	; (6838 <usb_d_ep_abort+0x50>)
    6818:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    681a:	68bb      	ldr	r3, [r7, #8]
    681c:	2201      	movs	r2, #1
    681e:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    6820:	68bb      	ldr	r3, [r7, #8]
    6822:	2204      	movs	r2, #4
    6824:	70da      	strb	r2, [r3, #3]
    6826:	e000      	b.n	682a <usb_d_ep_abort+0x42>
		return;
    6828:	bf00      	nop
}
    682a:	3710      	adds	r7, #16
    682c:	46bd      	mov	sp, r7
    682e:	bd80      	pop	{r7, pc}
    6830:	0000603d 	.word	0x0000603d
    6834:	20003450 	.word	0x20003450
    6838:	0000e70d 	.word	0x0000e70d

0000683c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    683c:	b580      	push	{r7, lr}
    683e:	b086      	sub	sp, #24
    6840:	af00      	add	r7, sp, #0
    6842:	4603      	mov	r3, r0
    6844:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6846:	79fb      	ldrb	r3, [r7, #7]
    6848:	4618      	mov	r0, r3
    684a:	4b1a      	ldr	r3, [pc, #104]	; (68b4 <_usb_d_ep_halt_clr+0x78>)
    684c:	4798      	blx	r3
    684e:	4603      	mov	r3, r0
    6850:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6852:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6856:	015b      	lsls	r3, r3, #5
    6858:	4a17      	ldr	r2, [pc, #92]	; (68b8 <_usb_d_ep_halt_clr+0x7c>)
    685a:	4413      	add	r3, r2
    685c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    685e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6862:	2b00      	cmp	r3, #0
    6864:	da02      	bge.n	686c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    6866:	f06f 0311 	mvn.w	r3, #17
    686a:	e01f      	b.n	68ac <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    686c:	79fb      	ldrb	r3, [r7, #7]
    686e:	2102      	movs	r1, #2
    6870:	4618      	mov	r0, r3
    6872:	4b12      	ldr	r3, [pc, #72]	; (68bc <_usb_d_ep_halt_clr+0x80>)
    6874:	4798      	blx	r3
    6876:	4603      	mov	r3, r0
    6878:	2b00      	cmp	r3, #0
    687a:	d016      	beq.n	68aa <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    687c:	79fb      	ldrb	r3, [r7, #7]
    687e:	2100      	movs	r1, #0
    6880:	4618      	mov	r0, r3
    6882:	4b0e      	ldr	r3, [pc, #56]	; (68bc <_usb_d_ep_halt_clr+0x80>)
    6884:	4798      	blx	r3
    6886:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    6888:	68fb      	ldr	r3, [r7, #12]
    688a:	2b00      	cmp	r3, #0
    688c:	da01      	bge.n	6892 <_usb_d_ep_halt_clr+0x56>
			return rc;
    688e:	68fb      	ldr	r3, [r7, #12]
    6890:	e00c      	b.n	68ac <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    6892:	693b      	ldr	r3, [r7, #16]
    6894:	2201      	movs	r2, #1
    6896:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    6898:	693b      	ldr	r3, [r7, #16]
    689a:	2203      	movs	r2, #3
    689c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    689e:	693b      	ldr	r3, [r7, #16]
    68a0:	69db      	ldr	r3, [r3, #28]
    68a2:	79f8      	ldrb	r0, [r7, #7]
    68a4:	2200      	movs	r2, #0
    68a6:	2103      	movs	r1, #3
    68a8:	4798      	blx	r3
	}
	return ERR_NONE;
    68aa:	2300      	movs	r3, #0
}
    68ac:	4618      	mov	r0, r3
    68ae:	3718      	adds	r7, #24
    68b0:	46bd      	mov	sp, r7
    68b2:	bd80      	pop	{r7, pc}
    68b4:	0000603d 	.word	0x0000603d
    68b8:	20003450 	.word	0x20003450
    68bc:	0000e319 	.word	0x0000e319

000068c0 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    68c0:	b580      	push	{r7, lr}
    68c2:	b082      	sub	sp, #8
    68c4:	af00      	add	r7, sp, #0
    68c6:	4603      	mov	r3, r0
    68c8:	460a      	mov	r2, r1
    68ca:	71fb      	strb	r3, [r7, #7]
    68cc:	4613      	mov	r3, r2
    68ce:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    68d0:	79bb      	ldrb	r3, [r7, #6]
    68d2:	2b00      	cmp	r3, #0
    68d4:	d105      	bne.n	68e2 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    68d6:	79fb      	ldrb	r3, [r7, #7]
    68d8:	4618      	mov	r0, r3
    68da:	4b0c      	ldr	r3, [pc, #48]	; (690c <usb_d_ep_halt+0x4c>)
    68dc:	4798      	blx	r3
    68de:	4603      	mov	r3, r0
    68e0:	e00f      	b.n	6902 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    68e2:	79bb      	ldrb	r3, [r7, #6]
    68e4:	2b01      	cmp	r3, #1
    68e6:	d106      	bne.n	68f6 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    68e8:	79fb      	ldrb	r3, [r7, #7]
    68ea:	2101      	movs	r1, #1
    68ec:	4618      	mov	r0, r3
    68ee:	4b08      	ldr	r3, [pc, #32]	; (6910 <usb_d_ep_halt+0x50>)
    68f0:	4798      	blx	r3
    68f2:	4603      	mov	r3, r0
    68f4:	e005      	b.n	6902 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    68f6:	79fb      	ldrb	r3, [r7, #7]
    68f8:	2102      	movs	r1, #2
    68fa:	4618      	mov	r0, r3
    68fc:	4b04      	ldr	r3, [pc, #16]	; (6910 <usb_d_ep_halt+0x50>)
    68fe:	4798      	blx	r3
    6900:	4603      	mov	r3, r0
	}
}
    6902:	4618      	mov	r0, r3
    6904:	3708      	adds	r7, #8
    6906:	46bd      	mov	sp, r7
    6908:	bd80      	pop	{r7, pc}
    690a:	bf00      	nop
    690c:	0000683d 	.word	0x0000683d
    6910:	0000e319 	.word	0x0000e319

00006914 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    6914:	b580      	push	{r7, lr}
    6916:	b086      	sub	sp, #24
    6918:	af00      	add	r7, sp, #0
    691a:	4603      	mov	r3, r0
    691c:	603a      	str	r2, [r7, #0]
    691e:	71fb      	strb	r3, [r7, #7]
    6920:	460b      	mov	r3, r1
    6922:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6924:	79fb      	ldrb	r3, [r7, #7]
    6926:	4618      	mov	r0, r3
    6928:	4b16      	ldr	r3, [pc, #88]	; (6984 <usb_d_ep_register_callback+0x70>)
    692a:	4798      	blx	r3
    692c:	4603      	mov	r3, r0
    692e:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6930:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6934:	015b      	lsls	r3, r3, #5
    6936:	4a14      	ldr	r2, [pc, #80]	; (6988 <usb_d_ep_register_callback+0x74>)
    6938:	4413      	add	r3, r2
    693a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    693c:	683b      	ldr	r3, [r7, #0]
    693e:	2b00      	cmp	r3, #0
    6940:	d001      	beq.n	6946 <usb_d_ep_register_callback+0x32>
    6942:	683b      	ldr	r3, [r7, #0]
    6944:	e000      	b.n	6948 <usb_d_ep_register_callback+0x34>
    6946:	4b11      	ldr	r3, [pc, #68]	; (698c <usb_d_ep_register_callback+0x78>)
    6948:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    694a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    694e:	2b00      	cmp	r3, #0
    6950:	db13      	blt.n	697a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    6952:	79bb      	ldrb	r3, [r7, #6]
    6954:	2b01      	cmp	r3, #1
    6956:	d008      	beq.n	696a <usb_d_ep_register_callback+0x56>
    6958:	2b02      	cmp	r3, #2
    695a:	d00a      	beq.n	6972 <usb_d_ep_register_callback+0x5e>
    695c:	2b00      	cmp	r3, #0
    695e:	d000      	beq.n	6962 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    6960:	e00c      	b.n	697c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    6962:	693b      	ldr	r3, [r7, #16]
    6964:	68fa      	ldr	r2, [r7, #12]
    6966:	615a      	str	r2, [r3, #20]
		break;
    6968:	e008      	b.n	697c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    696a:	693b      	ldr	r3, [r7, #16]
    696c:	68fa      	ldr	r2, [r7, #12]
    696e:	619a      	str	r2, [r3, #24]
		break;
    6970:	e004      	b.n	697c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    6972:	693b      	ldr	r3, [r7, #16]
    6974:	68fa      	ldr	r2, [r7, #12]
    6976:	61da      	str	r2, [r3, #28]
		break;
    6978:	e000      	b.n	697c <usb_d_ep_register_callback+0x68>
		return;
    697a:	bf00      	nop
	}
}
    697c:	3718      	adds	r7, #24
    697e:	46bd      	mov	sp, r7
    6980:	bd80      	pop	{r7, pc}
    6982:	bf00      	nop
    6984:	0000603d 	.word	0x0000603d
    6988:	20003450 	.word	0x20003450
    698c:	00006111 	.word	0x00006111

00006990 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    6990:	b480      	push	{r7}
    6992:	b085      	sub	sp, #20
    6994:	af00      	add	r7, sp, #0
    6996:	4603      	mov	r3, r0
    6998:	60b9      	str	r1, [r7, #8]
    699a:	607a      	str	r2, [r7, #4]
    699c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    699e:	7bfb      	ldrb	r3, [r7, #15]
    69a0:	f083 0301 	eor.w	r3, r3, #1
    69a4:	b2db      	uxtb	r3, r3
    69a6:	2b00      	cmp	r3, #0
    69a8:	d000      	beq.n	69ac <assert+0x1c>
		__asm("BKPT #0");
    69aa:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    69ac:	bf00      	nop
    69ae:	3714      	adds	r7, #20
    69b0:	46bd      	mov	sp, r7
    69b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    69b6:	4770      	bx	lr

000069b8 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    69b8:	b480      	push	{r7}
    69ba:	b085      	sub	sp, #20
    69bc:	af00      	add	r7, sp, #0
    69be:	6078      	str	r0, [r7, #4]
    69c0:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    69c2:	687b      	ldr	r3, [r7, #4]
    69c4:	681b      	ldr	r3, [r3, #0]
    69c6:	60fb      	str	r3, [r7, #12]
    69c8:	e008      	b.n	69dc <is_list_element+0x24>
		if (it == element) {
    69ca:	68fa      	ldr	r2, [r7, #12]
    69cc:	683b      	ldr	r3, [r7, #0]
    69ce:	429a      	cmp	r2, r3
    69d0:	d101      	bne.n	69d6 <is_list_element+0x1e>
			return true;
    69d2:	2301      	movs	r3, #1
    69d4:	e006      	b.n	69e4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    69d6:	68fb      	ldr	r3, [r7, #12]
    69d8:	681b      	ldr	r3, [r3, #0]
    69da:	60fb      	str	r3, [r7, #12]
    69dc:	68fb      	ldr	r3, [r7, #12]
    69de:	2b00      	cmp	r3, #0
    69e0:	d1f3      	bne.n	69ca <is_list_element+0x12>
		}
	}

	return false;
    69e2:	2300      	movs	r3, #0
}
    69e4:	4618      	mov	r0, r3
    69e6:	3714      	adds	r7, #20
    69e8:	46bd      	mov	sp, r7
    69ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    69ee:	4770      	bx	lr

000069f0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    69f0:	b580      	push	{r7, lr}
    69f2:	b082      	sub	sp, #8
    69f4:	af00      	add	r7, sp, #0
    69f6:	6078      	str	r0, [r7, #4]
    69f8:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    69fa:	6839      	ldr	r1, [r7, #0]
    69fc:	6878      	ldr	r0, [r7, #4]
    69fe:	4b0f      	ldr	r3, [pc, #60]	; (6a3c <list_insert_as_head+0x4c>)
    6a00:	4798      	blx	r3
    6a02:	4603      	mov	r3, r0
    6a04:	2b00      	cmp	r3, #0
    6a06:	bf14      	ite	ne
    6a08:	2301      	movne	r3, #1
    6a0a:	2300      	moveq	r3, #0
    6a0c:	b2db      	uxtb	r3, r3
    6a0e:	f083 0301 	eor.w	r3, r3, #1
    6a12:	b2db      	uxtb	r3, r3
    6a14:	f003 0301 	and.w	r3, r3, #1
    6a18:	b2db      	uxtb	r3, r3
    6a1a:	2239      	movs	r2, #57	; 0x39
    6a1c:	4908      	ldr	r1, [pc, #32]	; (6a40 <list_insert_as_head+0x50>)
    6a1e:	4618      	mov	r0, r3
    6a20:	4b08      	ldr	r3, [pc, #32]	; (6a44 <list_insert_as_head+0x54>)
    6a22:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    6a24:	687b      	ldr	r3, [r7, #4]
    6a26:	681a      	ldr	r2, [r3, #0]
    6a28:	683b      	ldr	r3, [r7, #0]
    6a2a:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    6a2c:	687b      	ldr	r3, [r7, #4]
    6a2e:	683a      	ldr	r2, [r7, #0]
    6a30:	601a      	str	r2, [r3, #0]
}
    6a32:	bf00      	nop
    6a34:	3708      	adds	r7, #8
    6a36:	46bd      	mov	sp, r7
    6a38:	bd80      	pop	{r7, pc}
    6a3a:	bf00      	nop
    6a3c:	000069b9 	.word	0x000069b9
    6a40:	0001d064 	.word	0x0001d064
    6a44:	00006991 	.word	0x00006991

00006a48 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    6a48:	b480      	push	{r7}
    6a4a:	b083      	sub	sp, #12
    6a4c:	af00      	add	r7, sp, #0
    6a4e:	6078      	str	r0, [r7, #4]
    6a50:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    6a52:	687b      	ldr	r3, [r7, #4]
    6a54:	681a      	ldr	r2, [r3, #0]
    6a56:	683b      	ldr	r3, [r7, #0]
    6a58:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    6a5a:	687b      	ldr	r3, [r7, #4]
    6a5c:	683a      	ldr	r2, [r7, #0]
    6a5e:	601a      	str	r2, [r3, #0]
}
    6a60:	bf00      	nop
    6a62:	370c      	adds	r7, #12
    6a64:	46bd      	mov	sp, r7
    6a66:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a6a:	4770      	bx	lr

00006a6c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    6a6c:	b580      	push	{r7, lr}
    6a6e:	b084      	sub	sp, #16
    6a70:	af00      	add	r7, sp, #0
    6a72:	6078      	str	r0, [r7, #4]
    6a74:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    6a76:	687b      	ldr	r3, [r7, #4]
    6a78:	681b      	ldr	r3, [r3, #0]
    6a7a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    6a7c:	6839      	ldr	r1, [r7, #0]
    6a7e:	6878      	ldr	r0, [r7, #4]
    6a80:	4b16      	ldr	r3, [pc, #88]	; (6adc <list_insert_at_end+0x70>)
    6a82:	4798      	blx	r3
    6a84:	4603      	mov	r3, r0
    6a86:	2b00      	cmp	r3, #0
    6a88:	bf14      	ite	ne
    6a8a:	2301      	movne	r3, #1
    6a8c:	2300      	moveq	r3, #0
    6a8e:	b2db      	uxtb	r3, r3
    6a90:	f083 0301 	eor.w	r3, r3, #1
    6a94:	b2db      	uxtb	r3, r3
    6a96:	f003 0301 	and.w	r3, r3, #1
    6a9a:	b2db      	uxtb	r3, r3
    6a9c:	224f      	movs	r2, #79	; 0x4f
    6a9e:	4910      	ldr	r1, [pc, #64]	; (6ae0 <list_insert_at_end+0x74>)
    6aa0:	4618      	mov	r0, r3
    6aa2:	4b10      	ldr	r3, [pc, #64]	; (6ae4 <list_insert_at_end+0x78>)
    6aa4:	4798      	blx	r3

	if (!list->head) {
    6aa6:	687b      	ldr	r3, [r7, #4]
    6aa8:	681b      	ldr	r3, [r3, #0]
    6aaa:	2b00      	cmp	r3, #0
    6aac:	d109      	bne.n	6ac2 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    6aae:	687b      	ldr	r3, [r7, #4]
    6ab0:	683a      	ldr	r2, [r7, #0]
    6ab2:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    6ab4:	683b      	ldr	r3, [r7, #0]
    6ab6:	2200      	movs	r2, #0
    6ab8:	601a      	str	r2, [r3, #0]
		return;
    6aba:	e00c      	b.n	6ad6 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    6abc:	68fb      	ldr	r3, [r7, #12]
    6abe:	681b      	ldr	r3, [r3, #0]
    6ac0:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    6ac2:	68fb      	ldr	r3, [r7, #12]
    6ac4:	681b      	ldr	r3, [r3, #0]
    6ac6:	2b00      	cmp	r3, #0
    6ac8:	d1f8      	bne.n	6abc <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    6aca:	68fb      	ldr	r3, [r7, #12]
    6acc:	683a      	ldr	r2, [r7, #0]
    6ace:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    6ad0:	683b      	ldr	r3, [r7, #0]
    6ad2:	2200      	movs	r2, #0
    6ad4:	601a      	str	r2, [r3, #0]
}
    6ad6:	3710      	adds	r7, #16
    6ad8:	46bd      	mov	sp, r7
    6ada:	bd80      	pop	{r7, pc}
    6adc:	000069b9 	.word	0x000069b9
    6ae0:	0001d064 	.word	0x0001d064
    6ae4:	00006991 	.word	0x00006991

00006ae8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    6ae8:	b480      	push	{r7}
    6aea:	b085      	sub	sp, #20
    6aec:	af00      	add	r7, sp, #0
    6aee:	6078      	str	r0, [r7, #4]
	if (list->head) {
    6af0:	687b      	ldr	r3, [r7, #4]
    6af2:	681b      	ldr	r3, [r3, #0]
    6af4:	2b00      	cmp	r3, #0
    6af6:	d009      	beq.n	6b0c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    6af8:	687b      	ldr	r3, [r7, #4]
    6afa:	681b      	ldr	r3, [r3, #0]
    6afc:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    6afe:	687b      	ldr	r3, [r7, #4]
    6b00:	681b      	ldr	r3, [r3, #0]
    6b02:	681a      	ldr	r2, [r3, #0]
    6b04:	687b      	ldr	r3, [r7, #4]
    6b06:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    6b08:	68fb      	ldr	r3, [r7, #12]
    6b0a:	e000      	b.n	6b0e <list_remove_head+0x26>
	}

	return NULL;
    6b0c:	2300      	movs	r3, #0
}
    6b0e:	4618      	mov	r0, r3
    6b10:	3714      	adds	r7, #20
    6b12:	46bd      	mov	sp, r7
    6b14:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b18:	4770      	bx	lr

00006b1a <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    6b1a:	b480      	push	{r7}
    6b1c:	b085      	sub	sp, #20
    6b1e:	af00      	add	r7, sp, #0
    6b20:	6078      	str	r0, [r7, #4]
    6b22:	6039      	str	r1, [r7, #0]
	if (!element) {
    6b24:	683b      	ldr	r3, [r7, #0]
    6b26:	2b00      	cmp	r3, #0
    6b28:	d101      	bne.n	6b2e <list_delete_element+0x14>
		return false;
    6b2a:	2300      	movs	r3, #0
    6b2c:	e024      	b.n	6b78 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    6b2e:	687b      	ldr	r3, [r7, #4]
    6b30:	681a      	ldr	r2, [r3, #0]
    6b32:	683b      	ldr	r3, [r7, #0]
    6b34:	429a      	cmp	r2, r3
    6b36:	d106      	bne.n	6b46 <list_delete_element+0x2c>
		list->head = list->head->next;
    6b38:	687b      	ldr	r3, [r7, #4]
    6b3a:	681b      	ldr	r3, [r3, #0]
    6b3c:	681a      	ldr	r2, [r3, #0]
    6b3e:	687b      	ldr	r3, [r7, #4]
    6b40:	601a      	str	r2, [r3, #0]
		return true;
    6b42:	2301      	movs	r3, #1
    6b44:	e018      	b.n	6b78 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    6b46:	687b      	ldr	r3, [r7, #4]
    6b48:	681b      	ldr	r3, [r3, #0]
    6b4a:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    6b4c:	e002      	b.n	6b54 <list_delete_element+0x3a>
			it = it->next;
    6b4e:	68fb      	ldr	r3, [r7, #12]
    6b50:	681b      	ldr	r3, [r3, #0]
    6b52:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    6b54:	68fb      	ldr	r3, [r7, #12]
    6b56:	2b00      	cmp	r3, #0
    6b58:	d004      	beq.n	6b64 <list_delete_element+0x4a>
    6b5a:	68fb      	ldr	r3, [r7, #12]
    6b5c:	681a      	ldr	r2, [r3, #0]
    6b5e:	683b      	ldr	r3, [r7, #0]
    6b60:	429a      	cmp	r2, r3
    6b62:	d1f4      	bne.n	6b4e <list_delete_element+0x34>
		}
		if (it) {
    6b64:	68fb      	ldr	r3, [r7, #12]
    6b66:	2b00      	cmp	r3, #0
    6b68:	d005      	beq.n	6b76 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    6b6a:	683b      	ldr	r3, [r7, #0]
    6b6c:	681a      	ldr	r2, [r3, #0]
    6b6e:	68fb      	ldr	r3, [r7, #12]
    6b70:	601a      	str	r2, [r3, #0]
			return true;
    6b72:	2301      	movs	r3, #1
    6b74:	e000      	b.n	6b78 <list_delete_element+0x5e>
		}
	}

	return false;
    6b76:	2300      	movs	r3, #0
}
    6b78:	4618      	mov	r0, r3
    6b7a:	3714      	adds	r7, #20
    6b7c:	46bd      	mov	sp, r7
    6b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b82:	4770      	bx	lr

00006b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    6b84:	b480      	push	{r7}
    6b86:	b083      	sub	sp, #12
    6b88:	af00      	add	r7, sp, #0
    6b8a:	4603      	mov	r3, r0
    6b8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6b92:	2b00      	cmp	r3, #0
    6b94:	db0b      	blt.n	6bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b96:	4909      	ldr	r1, [pc, #36]	; (6bbc <__NVIC_EnableIRQ+0x38>)
    6b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6b9c:	095b      	lsrs	r3, r3, #5
    6b9e:	88fa      	ldrh	r2, [r7, #6]
    6ba0:	f002 021f 	and.w	r2, r2, #31
    6ba4:	2001      	movs	r0, #1
    6ba6:	fa00 f202 	lsl.w	r2, r0, r2
    6baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    6bae:	bf00      	nop
    6bb0:	370c      	adds	r7, #12
    6bb2:	46bd      	mov	sp, r7
    6bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bb8:	4770      	bx	lr
    6bba:	bf00      	nop
    6bbc:	e000e100 	.word	0xe000e100

00006bc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    6bc0:	b480      	push	{r7}
    6bc2:	b083      	sub	sp, #12
    6bc4:	af00      	add	r7, sp, #0
    6bc6:	4603      	mov	r3, r0
    6bc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6bce:	2b00      	cmp	r3, #0
    6bd0:	db10      	blt.n	6bf4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6bd2:	490b      	ldr	r1, [pc, #44]	; (6c00 <__NVIC_DisableIRQ+0x40>)
    6bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6bd8:	095b      	lsrs	r3, r3, #5
    6bda:	88fa      	ldrh	r2, [r7, #6]
    6bdc:	f002 021f 	and.w	r2, r2, #31
    6be0:	2001      	movs	r0, #1
    6be2:	fa00 f202 	lsl.w	r2, r0, r2
    6be6:	3320      	adds	r3, #32
    6be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    6bec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6bf0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    6bf4:	bf00      	nop
    6bf6:	370c      	adds	r7, #12
    6bf8:	46bd      	mov	sp, r7
    6bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bfe:	4770      	bx	lr
    6c00:	e000e100 	.word	0xe000e100

00006c04 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    6c04:	b480      	push	{r7}
    6c06:	b083      	sub	sp, #12
    6c08:	af00      	add	r7, sp, #0
    6c0a:	4603      	mov	r3, r0
    6c0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c12:	2b00      	cmp	r3, #0
    6c14:	db0c      	blt.n	6c30 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c16:	4909      	ldr	r1, [pc, #36]	; (6c3c <__NVIC_ClearPendingIRQ+0x38>)
    6c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c1c:	095b      	lsrs	r3, r3, #5
    6c1e:	88fa      	ldrh	r2, [r7, #6]
    6c20:	f002 021f 	and.w	r2, r2, #31
    6c24:	2001      	movs	r0, #1
    6c26:	fa00 f202 	lsl.w	r2, r0, r2
    6c2a:	3360      	adds	r3, #96	; 0x60
    6c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    6c30:	bf00      	nop
    6c32:	370c      	adds	r7, #12
    6c34:	46bd      	mov	sp, r7
    6c36:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c3a:	4770      	bx	lr
    6c3c:	e000e100 	.word	0xe000e100

00006c40 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    6c40:	b480      	push	{r7}
    6c42:	b083      	sub	sp, #12
    6c44:	af00      	add	r7, sp, #0
    6c46:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    6c48:	687b      	ldr	r3, [r7, #4]
    6c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6c4c:	095b      	lsrs	r3, r3, #5
    6c4e:	f003 0301 	and.w	r3, r3, #1
    6c52:	2b00      	cmp	r3, #0
    6c54:	bf14      	ite	ne
    6c56:	2301      	movne	r3, #1
    6c58:	2300      	moveq	r3, #0
    6c5a:	b2db      	uxtb	r3, r3
}
    6c5c:	4618      	mov	r0, r3
    6c5e:	370c      	adds	r7, #12
    6c60:	46bd      	mov	sp, r7
    6c62:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c66:	4770      	bx	lr

00006c68 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    6c68:	b480      	push	{r7}
    6c6a:	b083      	sub	sp, #12
    6c6c:	af00      	add	r7, sp, #0
    6c6e:	6078      	str	r0, [r7, #4]
    6c70:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    6c72:	687b      	ldr	r3, [r7, #4]
    6c74:	683a      	ldr	r2, [r7, #0]
    6c76:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6c78:	bf00      	nop
    6c7a:	370c      	adds	r7, #12
    6c7c:	46bd      	mov	sp, r7
    6c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c82:	4770      	bx	lr

00006c84 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    6c84:	b480      	push	{r7}
    6c86:	b083      	sub	sp, #12
    6c88:	af00      	add	r7, sp, #0
    6c8a:	6078      	str	r0, [r7, #4]
    6c8c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    6c8e:	687b      	ldr	r3, [r7, #4]
    6c90:	683a      	ldr	r2, [r7, #0]
    6c92:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6c94:	bf00      	nop
    6c96:	370c      	adds	r7, #12
    6c98:	46bd      	mov	sp, r7
    6c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c9e:	4770      	bx	lr

00006ca0 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    6ca0:	b480      	push	{r7}
    6ca2:	b083      	sub	sp, #12
    6ca4:	af00      	add	r7, sp, #0
    6ca6:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    6ca8:	687b      	ldr	r3, [r7, #4]
    6caa:	699b      	ldr	r3, [r3, #24]
    6cac:	f043 0201 	orr.w	r2, r3, #1
    6cb0:	687b      	ldr	r3, [r7, #4]
    6cb2:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6cb4:	bf00      	nop
    6cb6:	370c      	adds	r7, #12
    6cb8:	46bd      	mov	sp, r7
    6cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cbe:	4770      	bx	lr

00006cc0 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    6cc0:	b480      	push	{r7}
    6cc2:	b085      	sub	sp, #20
    6cc4:	af00      	add	r7, sp, #0
    6cc6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    6cc8:	687b      	ldr	r3, [r7, #4]
    6cca:	699b      	ldr	r3, [r3, #24]
    6ccc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    6cce:	68fb      	ldr	r3, [r7, #12]
    6cd0:	f003 0301 	and.w	r3, r3, #1
    6cd4:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6cd6:	68fb      	ldr	r3, [r7, #12]
    6cd8:	2b00      	cmp	r3, #0
    6cda:	bf14      	ite	ne
    6cdc:	2301      	movne	r3, #1
    6cde:	2300      	moveq	r3, #0
    6ce0:	b2db      	uxtb	r3, r3
}
    6ce2:	4618      	mov	r0, r3
    6ce4:	3714      	adds	r7, #20
    6ce6:	46bd      	mov	sp, r7
    6ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cec:	4770      	bx	lr

00006cee <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    6cee:	b480      	push	{r7}
    6cf0:	b083      	sub	sp, #12
    6cf2:	af00      	add	r7, sp, #0
    6cf4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    6cf6:	687b      	ldr	r3, [r7, #4]
    6cf8:	699b      	ldr	r3, [r3, #24]
    6cfa:	f023 0201 	bic.w	r2, r3, #1
    6cfe:	687b      	ldr	r3, [r7, #4]
    6d00:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6d02:	bf00      	nop
    6d04:	370c      	adds	r7, #12
    6d06:	46bd      	mov	sp, r7
    6d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d0c:	4770      	bx	lr

00006d0e <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    6d0e:	b480      	push	{r7}
    6d10:	b083      	sub	sp, #12
    6d12:	af00      	add	r7, sp, #0
    6d14:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    6d16:	687b      	ldr	r3, [r7, #4]
    6d18:	699b      	ldr	r3, [r3, #24]
    6d1a:	f043 0202 	orr.w	r2, r3, #2
    6d1e:	687b      	ldr	r3, [r7, #4]
    6d20:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6d22:	bf00      	nop
    6d24:	370c      	adds	r7, #12
    6d26:	46bd      	mov	sp, r7
    6d28:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d2c:	4770      	bx	lr

00006d2e <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    6d2e:	b480      	push	{r7}
    6d30:	b083      	sub	sp, #12
    6d32:	af00      	add	r7, sp, #0
    6d34:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    6d36:	687b      	ldr	r3, [r7, #4]
    6d38:	699b      	ldr	r3, [r3, #24]
    6d3a:	f023 0202 	bic.w	r2, r3, #2
    6d3e:	687b      	ldr	r3, [r7, #4]
    6d40:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6d42:	bf00      	nop
    6d44:	370c      	adds	r7, #12
    6d46:	46bd      	mov	sp, r7
    6d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d4c:	4770      	bx	lr

00006d4e <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    6d4e:	b480      	push	{r7}
    6d50:	b083      	sub	sp, #12
    6d52:	af00      	add	r7, sp, #0
    6d54:	6078      	str	r0, [r7, #4]
    6d56:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    6d58:	687b      	ldr	r3, [r7, #4]
    6d5a:	699a      	ldr	r2, [r3, #24]
    6d5c:	683b      	ldr	r3, [r7, #0]
    6d5e:	431a      	orrs	r2, r3
    6d60:	687b      	ldr	r3, [r7, #4]
    6d62:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6d64:	bf00      	nop
    6d66:	370c      	adds	r7, #12
    6d68:	46bd      	mov	sp, r7
    6d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d6e:	4770      	bx	lr

00006d70 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    6d70:	b480      	push	{r7}
    6d72:	b083      	sub	sp, #12
    6d74:	af00      	add	r7, sp, #0
    6d76:	6078      	str	r0, [r7, #4]
    6d78:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    6d7a:	687b      	ldr	r3, [r7, #4]
    6d7c:	683a      	ldr	r2, [r7, #0]
    6d7e:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6d80:	bf00      	nop
    6d82:	370c      	adds	r7, #12
    6d84:	46bd      	mov	sp, r7
    6d86:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d8a:	4770      	bx	lr

00006d8c <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    6d8c:	b480      	push	{r7}
    6d8e:	b083      	sub	sp, #12
    6d90:	af00      	add	r7, sp, #0
    6d92:	6078      	str	r0, [r7, #4]
    6d94:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    6d96:	687b      	ldr	r3, [r7, #4]
    6d98:	683a      	ldr	r2, [r7, #0]
    6d9a:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    6d9c:	bf00      	nop
    6d9e:	370c      	adds	r7, #12
    6da0:	46bd      	mov	sp, r7
    6da2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6da6:	4770      	bx	lr

00006da8 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    6da8:	b480      	push	{r7}
    6daa:	b083      	sub	sp, #12
    6dac:	af00      	add	r7, sp, #0
    6dae:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    6db0:	687b      	ldr	r3, [r7, #4]
    6db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    6db4:	4618      	mov	r0, r3
    6db6:	370c      	adds	r7, #12
    6db8:	46bd      	mov	sp, r7
    6dba:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dbe:	4770      	bx	lr

00006dc0 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    6dc0:	b480      	push	{r7}
    6dc2:	b083      	sub	sp, #12
    6dc4:	af00      	add	r7, sp, #0
    6dc6:	6078      	str	r0, [r7, #4]
    6dc8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    6dca:	687b      	ldr	r3, [r7, #4]
    6dcc:	683a      	ldr	r2, [r7, #0]
    6dce:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    6dd0:	bf00      	nop
    6dd2:	370c      	adds	r7, #12
    6dd4:	46bd      	mov	sp, r7
    6dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dda:	4770      	bx	lr

00006ddc <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    6ddc:	b480      	push	{r7}
    6dde:	b083      	sub	sp, #12
    6de0:	af00      	add	r7, sp, #0
    6de2:	6078      	str	r0, [r7, #4]
    6de4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    6de6:	687b      	ldr	r3, [r7, #4]
    6de8:	683a      	ldr	r2, [r7, #0]
    6dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    6dee:	bf00      	nop
    6df0:	370c      	adds	r7, #12
    6df2:	46bd      	mov	sp, r7
    6df4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6df8:	4770      	bx	lr

00006dfa <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    6dfa:	b480      	push	{r7}
    6dfc:	b083      	sub	sp, #12
    6dfe:	af00      	add	r7, sp, #0
    6e00:	6078      	str	r0, [r7, #4]
    6e02:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    6e04:	687b      	ldr	r3, [r7, #4]
    6e06:	683a      	ldr	r2, [r7, #0]
    6e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    6e0c:	bf00      	nop
    6e0e:	370c      	adds	r7, #12
    6e10:	46bd      	mov	sp, r7
    6e12:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e16:	4770      	bx	lr

00006e18 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    6e18:	b480      	push	{r7}
    6e1a:	b083      	sub	sp, #12
    6e1c:	af00      	add	r7, sp, #0
    6e1e:	6078      	str	r0, [r7, #4]
    6e20:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    6e22:	687b      	ldr	r3, [r7, #4]
    6e24:	683a      	ldr	r2, [r7, #0]
    6e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    6e2a:	bf00      	nop
    6e2c:	370c      	adds	r7, #12
    6e2e:	46bd      	mov	sp, r7
    6e30:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e34:	4770      	bx	lr

00006e36 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    6e36:	b480      	push	{r7}
    6e38:	b083      	sub	sp, #12
    6e3a:	af00      	add	r7, sp, #0
    6e3c:	6078      	str	r0, [r7, #4]
    6e3e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    6e40:	687b      	ldr	r3, [r7, #4]
    6e42:	683a      	ldr	r2, [r7, #0]
    6e44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    6e48:	bf00      	nop
    6e4a:	370c      	adds	r7, #12
    6e4c:	46bd      	mov	sp, r7
    6e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e52:	4770      	bx	lr

00006e54 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    6e54:	b480      	push	{r7}
    6e56:	b083      	sub	sp, #12
    6e58:	af00      	add	r7, sp, #0
    6e5a:	6078      	str	r0, [r7, #4]
    6e5c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    6e5e:	687b      	ldr	r3, [r7, #4]
    6e60:	683a      	ldr	r2, [r7, #0]
    6e62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6e66:	bf00      	nop
    6e68:	370c      	adds	r7, #12
    6e6a:	46bd      	mov	sp, r7
    6e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e70:	4770      	bx	lr

00006e72 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    6e72:	b480      	push	{r7}
    6e74:	b083      	sub	sp, #12
    6e76:	af00      	add	r7, sp, #0
    6e78:	6078      	str	r0, [r7, #4]
    6e7a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    6e7c:	687b      	ldr	r3, [r7, #4]
    6e7e:	683a      	ldr	r2, [r7, #0]
    6e80:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    6e84:	bf00      	nop
    6e86:	370c      	adds	r7, #12
    6e88:	46bd      	mov	sp, r7
    6e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e8e:	4770      	bx	lr

00006e90 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    6e90:	b480      	push	{r7}
    6e92:	b083      	sub	sp, #12
    6e94:	af00      	add	r7, sp, #0
    6e96:	6078      	str	r0, [r7, #4]
    6e98:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    6e9a:	687b      	ldr	r3, [r7, #4]
    6e9c:	683a      	ldr	r2, [r7, #0]
    6e9e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6ea2:	bf00      	nop
    6ea4:	370c      	adds	r7, #12
    6ea6:	46bd      	mov	sp, r7
    6ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eac:	4770      	bx	lr

00006eae <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    6eae:	b480      	push	{r7}
    6eb0:	b083      	sub	sp, #12
    6eb2:	af00      	add	r7, sp, #0
    6eb4:	6078      	str	r0, [r7, #4]
    6eb6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    6eb8:	687b      	ldr	r3, [r7, #4]
    6eba:	683a      	ldr	r2, [r7, #0]
    6ebc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    6ec0:	bf00      	nop
    6ec2:	370c      	adds	r7, #12
    6ec4:	46bd      	mov	sp, r7
    6ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eca:	4770      	bx	lr

00006ecc <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    6ecc:	b480      	push	{r7}
    6ece:	b083      	sub	sp, #12
    6ed0:	af00      	add	r7, sp, #0
    6ed2:	6078      	str	r0, [r7, #4]
    6ed4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    6ed6:	687b      	ldr	r3, [r7, #4]
    6ed8:	683a      	ldr	r2, [r7, #0]
    6eda:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6ede:	bf00      	nop
    6ee0:	370c      	adds	r7, #12
    6ee2:	46bd      	mov	sp, r7
    6ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ee8:	4770      	bx	lr
	...

00006eec <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    6eec:	b580      	push	{r7, lr}
    6eee:	b082      	sub	sp, #8
    6ef0:	af00      	add	r7, sp, #0
    6ef2:	6078      	str	r0, [r7, #4]
    6ef4:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    6ef6:	687b      	ldr	r3, [r7, #4]
    6ef8:	683a      	ldr	r2, [r7, #0]
    6efa:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    6efc:	687b      	ldr	r3, [r7, #4]
    6efe:	681b      	ldr	r3, [r3, #0]
    6f00:	4618      	mov	r0, r3
    6f02:	4b55      	ldr	r3, [pc, #340]	; (7058 <_can_async_init+0x16c>)
    6f04:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    6f06:	bf00      	nop
    6f08:	687b      	ldr	r3, [r7, #4]
    6f0a:	681b      	ldr	r3, [r3, #0]
    6f0c:	4618      	mov	r0, r3
    6f0e:	4b53      	ldr	r3, [pc, #332]	; (705c <_can_async_init+0x170>)
    6f10:	4798      	blx	r3
    6f12:	4603      	mov	r3, r0
    6f14:	f083 0301 	eor.w	r3, r3, #1
    6f18:	b2db      	uxtb	r3, r3
    6f1a:	2b00      	cmp	r3, #0
    6f1c:	d1f4      	bne.n	6f08 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    6f1e:	687b      	ldr	r3, [r7, #4]
    6f20:	681b      	ldr	r3, [r3, #0]
    6f22:	4618      	mov	r0, r3
    6f24:	4b4e      	ldr	r3, [pc, #312]	; (7060 <_can_async_init+0x174>)
    6f26:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    6f28:	683b      	ldr	r3, [r7, #0]
    6f2a:	4a4e      	ldr	r2, [pc, #312]	; (7064 <_can_async_init+0x178>)
    6f2c:	4293      	cmp	r3, r2
    6f2e:	d17a      	bne.n	7026 <_can_async_init+0x13a>
		_can1_dev    = dev;
    6f30:	4a4d      	ldr	r2, [pc, #308]	; (7068 <_can_async_init+0x17c>)
    6f32:	687b      	ldr	r3, [r7, #4]
    6f34:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    6f36:	687b      	ldr	r3, [r7, #4]
    6f38:	4a4c      	ldr	r2, [pc, #304]	; (706c <_can_async_init+0x180>)
    6f3a:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    6f3c:	687b      	ldr	r3, [r7, #4]
    6f3e:	681b      	ldr	r3, [r3, #0]
    6f40:	f44f 7140 	mov.w	r1, #768	; 0x300
    6f44:	4618      	mov	r0, r3
    6f46:	4b4a      	ldr	r3, [pc, #296]	; (7070 <_can_async_init+0x184>)
    6f48:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    6f4a:	687b      	ldr	r3, [r7, #4]
    6f4c:	681b      	ldr	r3, [r3, #0]
    6f4e:	2102      	movs	r1, #2
    6f50:	4618      	mov	r0, r3
    6f52:	4b48      	ldr	r3, [pc, #288]	; (7074 <_can_async_init+0x188>)
    6f54:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    6f56:	687b      	ldr	r3, [r7, #4]
    6f58:	681b      	ldr	r3, [r3, #0]
    6f5a:	4947      	ldr	r1, [pc, #284]	; (7078 <_can_async_init+0x18c>)
    6f5c:	4618      	mov	r0, r3
    6f5e:	4b47      	ldr	r3, [pc, #284]	; (707c <_can_async_init+0x190>)
    6f60:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    6f62:	687b      	ldr	r3, [r7, #4]
    6f64:	681b      	ldr	r3, [r3, #0]
    6f66:	4946      	ldr	r1, [pc, #280]	; (7080 <_can_async_init+0x194>)
    6f68:	4618      	mov	r0, r3
    6f6a:	4b46      	ldr	r3, [pc, #280]	; (7084 <_can_async_init+0x198>)
    6f6c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    6f6e:	687b      	ldr	r3, [r7, #4]
    6f70:	681a      	ldr	r2, [r3, #0]
    6f72:	4b45      	ldr	r3, [pc, #276]	; (7088 <_can_async_init+0x19c>)
    6f74:	b29b      	uxth	r3, r3
    6f76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6f7e:	4619      	mov	r1, r3
    6f80:	4610      	mov	r0, r2
    6f82:	4b42      	ldr	r3, [pc, #264]	; (708c <_can_async_init+0x1a0>)
    6f84:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    6f86:	687b      	ldr	r3, [r7, #4]
    6f88:	681b      	ldr	r3, [r3, #0]
    6f8a:	2107      	movs	r1, #7
    6f8c:	4618      	mov	r0, r3
    6f8e:	4b40      	ldr	r3, [pc, #256]	; (7090 <_can_async_init+0x1a4>)
    6f90:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    6f92:	687b      	ldr	r3, [r7, #4]
    6f94:	681b      	ldr	r3, [r3, #0]
    6f96:	2107      	movs	r1, #7
    6f98:	4618      	mov	r0, r3
    6f9a:	4b3e      	ldr	r3, [pc, #248]	; (7094 <_can_async_init+0x1a8>)
    6f9c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    6f9e:	687b      	ldr	r3, [r7, #4]
    6fa0:	681a      	ldr	r2, [r3, #0]
    6fa2:	4b3d      	ldr	r3, [pc, #244]	; (7098 <_can_async_init+0x1ac>)
    6fa4:	b29b      	uxth	r3, r3
    6fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    6faa:	4619      	mov	r1, r3
    6fac:	4610      	mov	r0, r2
    6fae:	4b3b      	ldr	r3, [pc, #236]	; (709c <_can_async_init+0x1b0>)
    6fb0:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    6fb2:	687b      	ldr	r3, [r7, #4]
    6fb4:	681a      	ldr	r2, [r3, #0]
    6fb6:	4b3a      	ldr	r3, [pc, #232]	; (70a0 <_can_async_init+0x1b4>)
    6fb8:	b29b      	uxth	r3, r3
    6fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6fbe:	4619      	mov	r1, r3
    6fc0:	4610      	mov	r0, r2
    6fc2:	4b38      	ldr	r3, [pc, #224]	; (70a4 <_can_async_init+0x1b8>)
    6fc4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    6fc6:	687b      	ldr	r3, [r7, #4]
    6fc8:	681b      	ldr	r3, [r3, #0]
    6fca:	2108      	movs	r1, #8
    6fcc:	4618      	mov	r0, r3
    6fce:	4b36      	ldr	r3, [pc, #216]	; (70a8 <_can_async_init+0x1bc>)
    6fd0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    6fd2:	687b      	ldr	r3, [r7, #4]
    6fd4:	681a      	ldr	r2, [r3, #0]
    6fd6:	4b35      	ldr	r3, [pc, #212]	; (70ac <_can_async_init+0x1c0>)
    6fd8:	b29b      	uxth	r3, r3
    6fda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    6fde:	4619      	mov	r1, r3
    6fe0:	4610      	mov	r0, r2
    6fe2:	4b33      	ldr	r3, [pc, #204]	; (70b0 <_can_async_init+0x1c4>)
    6fe4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    6fe6:	687b      	ldr	r3, [r7, #4]
    6fe8:	681a      	ldr	r2, [r3, #0]
    6fea:	4b32      	ldr	r3, [pc, #200]	; (70b4 <_can_async_init+0x1c8>)
    6fec:	b29b      	uxth	r3, r3
    6fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6ff2:	4619      	mov	r1, r3
    6ff4:	4610      	mov	r0, r2
    6ff6:	4b30      	ldr	r3, [pc, #192]	; (70b8 <_can_async_init+0x1cc>)
    6ff8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    6ffa:	687b      	ldr	r3, [r7, #4]
    6ffc:	681b      	ldr	r3, [r3, #0]
    6ffe:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    7002:	4618      	mov	r0, r3
    7004:	4b2d      	ldr	r3, [pc, #180]	; (70bc <_can_async_init+0x1d0>)
    7006:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    7008:	204f      	movs	r0, #79	; 0x4f
    700a:	4b2d      	ldr	r3, [pc, #180]	; (70c0 <_can_async_init+0x1d4>)
    700c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    700e:	204f      	movs	r0, #79	; 0x4f
    7010:	4b2c      	ldr	r3, [pc, #176]	; (70c4 <_can_async_init+0x1d8>)
    7012:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    7014:	204f      	movs	r0, #79	; 0x4f
    7016:	4b2c      	ldr	r3, [pc, #176]	; (70c8 <_can_async_init+0x1dc>)
    7018:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    701a:	687b      	ldr	r3, [r7, #4]
    701c:	681b      	ldr	r3, [r3, #0]
    701e:	2101      	movs	r1, #1
    7020:	4618      	mov	r0, r3
    7022:	4b2a      	ldr	r3, [pc, #168]	; (70cc <_can_async_init+0x1e0>)
    7024:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    7026:	687b      	ldr	r3, [r7, #4]
    7028:	681b      	ldr	r3, [r3, #0]
    702a:	4618      	mov	r0, r3
    702c:	4b28      	ldr	r3, [pc, #160]	; (70d0 <_can_async_init+0x1e4>)
    702e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    7030:	687b      	ldr	r3, [r7, #4]
    7032:	681b      	ldr	r3, [r3, #0]
    7034:	4618      	mov	r0, r3
    7036:	4b27      	ldr	r3, [pc, #156]	; (70d4 <_can_async_init+0x1e8>)
    7038:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    703a:	bf00      	nop
    703c:	687b      	ldr	r3, [r7, #4]
    703e:	681b      	ldr	r3, [r3, #0]
    7040:	4618      	mov	r0, r3
    7042:	4b06      	ldr	r3, [pc, #24]	; (705c <_can_async_init+0x170>)
    7044:	4798      	blx	r3
    7046:	4603      	mov	r3, r0
    7048:	2b00      	cmp	r3, #0
    704a:	d1f7      	bne.n	703c <_can_async_init+0x150>
	};

	return ERR_NONE;
    704c:	2300      	movs	r3, #0
}
    704e:	4618      	mov	r0, r3
    7050:	3708      	adds	r7, #8
    7052:	46bd      	mov	sp, r7
    7054:	bd80      	pop	{r7, pc}
    7056:	bf00      	nop
    7058:	00006ca1 	.word	0x00006ca1
    705c:	00006cc1 	.word	0x00006cc1
    7060:	00006d0f 	.word	0x00006d0f
    7064:	42000400 	.word	0x42000400
    7068:	20003570 	.word	0x20003570
    706c:	20000068 	.word	0x20000068
    7070:	00006d4f 	.word	0x00006d4f
    7074:	00006c69 	.word	0x00006c69
    7078:	00010c01 	.word	0x00010c01
    707c:	00006d71 	.word	0x00006d71
    7080:	00010c10 	.word	0x00010c10
    7084:	00006c85 	.word	0x00006c85
    7088:	2000584c 	.word	0x2000584c
    708c:	00006e55 	.word	0x00006e55
    7090:	00006e73 	.word	0x00006e73
    7094:	00006eaf 	.word	0x00006eaf
    7098:	20005804 	.word	0x20005804
    709c:	00006e91 	.word	0x00006e91
    70a0:	200034d0 	.word	0x200034d0
    70a4:	00006ecd 	.word	0x00006ecd
    70a8:	00006ddd 	.word	0x00006ddd
    70ac:	200034e0 	.word	0x200034e0
    70b0:	00006dfb 	.word	0x00006dfb
    70b4:	20003560 	.word	0x20003560
    70b8:	00006e19 	.word	0x00006e19
    70bc:	00006e37 	.word	0x00006e37
    70c0:	00006bc1 	.word	0x00006bc1
    70c4:	00006c05 	.word	0x00006c05
    70c8:	00006b85 	.word	0x00006b85
    70cc:	00006dc1 	.word	0x00006dc1
    70d0:	00006d2f 	.word	0x00006d2f
    70d4:	00006cef 	.word	0x00006cef

000070d8 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    70d8:	b590      	push	{r4, r7, lr}
    70da:	b083      	sub	sp, #12
    70dc:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    70de:	4b2c      	ldr	r3, [pc, #176]	; (7190 <CAN1_Handler+0xb8>)
    70e0:	681b      	ldr	r3, [r3, #0]
    70e2:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    70e4:	687b      	ldr	r3, [r7, #4]
    70e6:	681b      	ldr	r3, [r3, #0]
    70e8:	4618      	mov	r0, r3
    70ea:	4b2a      	ldr	r3, [pc, #168]	; (7194 <CAN1_Handler+0xbc>)
    70ec:	4798      	blx	r3
    70ee:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    70f0:	683b      	ldr	r3, [r7, #0]
    70f2:	f003 0301 	and.w	r3, r3, #1
    70f6:	2b00      	cmp	r3, #0
    70f8:	d003      	beq.n	7102 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    70fa:	687b      	ldr	r3, [r7, #4]
    70fc:	689b      	ldr	r3, [r3, #8]
    70fe:	6878      	ldr	r0, [r7, #4]
    7100:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    7102:	683b      	ldr	r3, [r7, #0]
    7104:	f403 7300 	and.w	r3, r3, #512	; 0x200
    7108:	2b00      	cmp	r3, #0
    710a:	d003      	beq.n	7114 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    710c:	687b      	ldr	r3, [r7, #4]
    710e:	685b      	ldr	r3, [r3, #4]
    7110:	6878      	ldr	r0, [r7, #4]
    7112:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    7114:	683b      	ldr	r3, [r7, #0]
    7116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    711a:	2b00      	cmp	r3, #0
    711c:	d004      	beq.n	7128 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    711e:	687b      	ldr	r3, [r7, #4]
    7120:	68db      	ldr	r3, [r3, #12]
    7122:	2103      	movs	r1, #3
    7124:	6878      	ldr	r0, [r7, #4]
    7126:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    7128:	683b      	ldr	r3, [r7, #0]
    712a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    712e:	2b00      	cmp	r3, #0
    7130:	d004      	beq.n	713c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    7132:	687b      	ldr	r3, [r7, #4]
    7134:	68db      	ldr	r3, [r3, #12]
    7136:	2100      	movs	r1, #0
    7138:	6878      	ldr	r0, [r7, #4]
    713a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    713c:	683b      	ldr	r3, [r7, #0]
    713e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    7142:	2b00      	cmp	r3, #0
    7144:	d00f      	beq.n	7166 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    7146:	687b      	ldr	r3, [r7, #4]
    7148:	68dc      	ldr	r4, [r3, #12]
    714a:	687b      	ldr	r3, [r7, #4]
    714c:	681b      	ldr	r3, [r3, #0]
    714e:	4618      	mov	r0, r3
    7150:	4b11      	ldr	r3, [pc, #68]	; (7198 <CAN1_Handler+0xc0>)
    7152:	4798      	blx	r3
    7154:	4603      	mov	r3, r0
    7156:	2b00      	cmp	r3, #0
    7158:	d001      	beq.n	715e <CAN1_Handler+0x86>
    715a:	2302      	movs	r3, #2
    715c:	e000      	b.n	7160 <CAN1_Handler+0x88>
    715e:	2301      	movs	r3, #1
    7160:	4619      	mov	r1, r3
    7162:	6878      	ldr	r0, [r7, #4]
    7164:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    7166:	683b      	ldr	r3, [r7, #0]
    7168:	f003 0308 	and.w	r3, r3, #8
    716c:	2b00      	cmp	r3, #0
    716e:	d004      	beq.n	717a <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    7170:	687b      	ldr	r3, [r7, #4]
    7172:	68db      	ldr	r3, [r3, #12]
    7174:	2104      	movs	r1, #4
    7176:	6878      	ldr	r0, [r7, #4]
    7178:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    717a:	687b      	ldr	r3, [r7, #4]
    717c:	681b      	ldr	r3, [r3, #0]
    717e:	6839      	ldr	r1, [r7, #0]
    7180:	4618      	mov	r0, r3
    7182:	4b06      	ldr	r3, [pc, #24]	; (719c <CAN1_Handler+0xc4>)
    7184:	4798      	blx	r3
}
    7186:	bf00      	nop
    7188:	370c      	adds	r7, #12
    718a:	46bd      	mov	sp, r7
    718c:	bd90      	pop	{r4, r7, pc}
    718e:	bf00      	nop
    7190:	20003570 	.word	0x20003570
    7194:	00006da9 	.word	0x00006da9
    7198:	00006c41 	.word	0x00006c41
    719c:	00006d8d 	.word	0x00006d8d

000071a0 <__NVIC_SetPendingIRQ>:
{
    71a0:	b480      	push	{r7}
    71a2:	b083      	sub	sp, #12
    71a4:	af00      	add	r7, sp, #0
    71a6:	4603      	mov	r3, r0
    71a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    71aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71ae:	2b00      	cmp	r3, #0
    71b0:	db0c      	blt.n	71cc <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    71b2:	4909      	ldr	r1, [pc, #36]	; (71d8 <__NVIC_SetPendingIRQ+0x38>)
    71b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71b8:	095b      	lsrs	r3, r3, #5
    71ba:	88fa      	ldrh	r2, [r7, #6]
    71bc:	f002 021f 	and.w	r2, r2, #31
    71c0:	2001      	movs	r0, #1
    71c2:	fa00 f202 	lsl.w	r2, r0, r2
    71c6:	3340      	adds	r3, #64	; 0x40
    71c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    71cc:	bf00      	nop
    71ce:	370c      	adds	r7, #12
    71d0:	46bd      	mov	sp, r7
    71d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    71d6:	4770      	bx	lr
    71d8:	e000e100 	.word	0xe000e100

000071dc <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    71dc:	b580      	push	{r7, lr}
    71de:	b082      	sub	sp, #8
    71e0:	af00      	add	r7, sp, #0
    71e2:	4603      	mov	r3, r0
    71e4:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    71e6:	79fb      	ldrb	r3, [r7, #7]
    71e8:	b21b      	sxth	r3, r3
    71ea:	4618      	mov	r0, r3
    71ec:	4b02      	ldr	r3, [pc, #8]	; (71f8 <_irq_set+0x1c>)
    71ee:	4798      	blx	r3
}
    71f0:	bf00      	nop
    71f2:	3708      	adds	r7, #8
    71f4:	46bd      	mov	sp, r7
    71f6:	bd80      	pop	{r7, pc}
    71f8:	000071a1 	.word	0x000071a1

000071fc <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    71fc:	b480      	push	{r7}
    71fe:	b083      	sub	sp, #12
    7200:	af00      	add	r7, sp, #0
    7202:	4603      	mov	r3, r0
    7204:	6039      	str	r1, [r7, #0]
    7206:	80fb      	strh	r3, [r7, #6]
    7208:	4613      	mov	r3, r2
    720a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    720c:	797b      	ldrb	r3, [r7, #5]
    720e:	3b04      	subs	r3, #4
    7210:	2b05      	cmp	r3, #5
    7212:	d86b      	bhi.n	72ec <_get_cycles_for_us_internal+0xf0>
    7214:	a201      	add	r2, pc, #4	; (adr r2, 721c <_get_cycles_for_us_internal+0x20>)
    7216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    721a:	bf00      	nop
    721c:	000072cb 	.word	0x000072cb
    7220:	000072ab 	.word	0x000072ab
    7224:	0000728d 	.word	0x0000728d
    7228:	0000726f 	.word	0x0000726f
    722c:	00007251 	.word	0x00007251
    7230:	00007235 	.word	0x00007235
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    7234:	88fb      	ldrh	r3, [r7, #6]
    7236:	683a      	ldr	r2, [r7, #0]
    7238:	4935      	ldr	r1, [pc, #212]	; (7310 <_get_cycles_for_us_internal+0x114>)
    723a:	fba1 1202 	umull	r1, r2, r1, r2
    723e:	0c92      	lsrs	r2, r2, #18
    7240:	fb02 f303 	mul.w	r3, r2, r3
    7244:	3302      	adds	r3, #2
    7246:	4a33      	ldr	r2, [pc, #204]	; (7314 <_get_cycles_for_us_internal+0x118>)
    7248:	fba2 2303 	umull	r2, r3, r2, r3
    724c:	085b      	lsrs	r3, r3, #1
    724e:	e059      	b.n	7304 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    7250:	88fb      	ldrh	r3, [r7, #6]
    7252:	683a      	ldr	r2, [r7, #0]
    7254:	0952      	lsrs	r2, r2, #5
    7256:	4930      	ldr	r1, [pc, #192]	; (7318 <_get_cycles_for_us_internal+0x11c>)
    7258:	fba1 1202 	umull	r1, r2, r1, r2
    725c:	09d2      	lsrs	r2, r2, #7
    725e:	fb02 f303 	mul.w	r3, r2, r3
    7262:	331d      	adds	r3, #29
    7264:	4a2d      	ldr	r2, [pc, #180]	; (731c <_get_cycles_for_us_internal+0x120>)
    7266:	fba2 2303 	umull	r2, r3, r2, r3
    726a:	091b      	lsrs	r3, r3, #4
    726c:	e04a      	b.n	7304 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    726e:	88fb      	ldrh	r3, [r7, #6]
    7270:	683a      	ldr	r2, [r7, #0]
    7272:	492b      	ldr	r1, [pc, #172]	; (7320 <_get_cycles_for_us_internal+0x124>)
    7274:	fba1 1202 	umull	r1, r2, r1, r2
    7278:	0b52      	lsrs	r2, r2, #13
    727a:	fb02 f303 	mul.w	r3, r2, r3
    727e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    7282:	4a28      	ldr	r2, [pc, #160]	; (7324 <_get_cycles_for_us_internal+0x128>)
    7284:	fba2 2303 	umull	r2, r3, r2, r3
    7288:	095b      	lsrs	r3, r3, #5
    728a:	e03b      	b.n	7304 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    728c:	88fb      	ldrh	r3, [r7, #6]
    728e:	683a      	ldr	r2, [r7, #0]
    7290:	4925      	ldr	r1, [pc, #148]	; (7328 <_get_cycles_for_us_internal+0x12c>)
    7292:	fba1 1202 	umull	r1, r2, r1, r2
    7296:	0992      	lsrs	r2, r2, #6
    7298:	fb02 f303 	mul.w	r3, r2, r3
    729c:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    72a0:	4a22      	ldr	r2, [pc, #136]	; (732c <_get_cycles_for_us_internal+0x130>)
    72a2:	fba2 2303 	umull	r2, r3, r2, r3
    72a6:	099b      	lsrs	r3, r3, #6
    72a8:	e02c      	b.n	7304 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    72aa:	88fb      	ldrh	r3, [r7, #6]
    72ac:	683a      	ldr	r2, [r7, #0]
    72ae:	4920      	ldr	r1, [pc, #128]	; (7330 <_get_cycles_for_us_internal+0x134>)
    72b0:	fba1 1202 	umull	r1, r2, r1, r2
    72b4:	0952      	lsrs	r2, r2, #5
    72b6:	fb02 f303 	mul.w	r3, r2, r3
    72ba:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    72be:	332f      	adds	r3, #47	; 0x2f
    72c0:	4a1c      	ldr	r2, [pc, #112]	; (7334 <_get_cycles_for_us_internal+0x138>)
    72c2:	fba2 2303 	umull	r2, r3, r2, r3
    72c6:	0b5b      	lsrs	r3, r3, #13
    72c8:	e01c      	b.n	7304 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    72ca:	88fb      	ldrh	r3, [r7, #6]
    72cc:	683a      	ldr	r2, [r7, #0]
    72ce:	491a      	ldr	r1, [pc, #104]	; (7338 <_get_cycles_for_us_internal+0x13c>)
    72d0:	fba1 1202 	umull	r1, r2, r1, r2
    72d4:	08d2      	lsrs	r2, r2, #3
    72d6:	fb02 f303 	mul.w	r3, r2, r3
    72da:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    72de:	f203 33df 	addw	r3, r3, #991	; 0x3df
    72e2:	4a16      	ldr	r2, [pc, #88]	; (733c <_get_cycles_for_us_internal+0x140>)
    72e4:	fba2 2303 	umull	r2, r3, r2, r3
    72e8:	0c5b      	lsrs	r3, r3, #17
    72ea:	e00b      	b.n	7304 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    72ec:	88fb      	ldrh	r3, [r7, #6]
    72ee:	683a      	ldr	r2, [r7, #0]
    72f0:	fb02 f303 	mul.w	r3, r2, r3
    72f4:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    72f8:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    72fc:	4a10      	ldr	r2, [pc, #64]	; (7340 <_get_cycles_for_us_internal+0x144>)
    72fe:	fba2 2303 	umull	r2, r3, r2, r3
    7302:	0c9b      	lsrs	r3, r3, #18
	}
}
    7304:	4618      	mov	r0, r3
    7306:	370c      	adds	r7, #12
    7308:	46bd      	mov	sp, r7
    730a:	f85d 7b04 	ldr.w	r7, [sp], #4
    730e:	4770      	bx	lr
    7310:	431bde83 	.word	0x431bde83
    7314:	aaaaaaab 	.word	0xaaaaaaab
    7318:	0a7c5ac5 	.word	0x0a7c5ac5
    731c:	88888889 	.word	0x88888889
    7320:	d1b71759 	.word	0xd1b71759
    7324:	1b4e81b5 	.word	0x1b4e81b5
    7328:	10624dd3 	.word	0x10624dd3
    732c:	057619f1 	.word	0x057619f1
    7330:	51eb851f 	.word	0x51eb851f
    7334:	45e7b273 	.word	0x45e7b273
    7338:	cccccccd 	.word	0xcccccccd
    733c:	6fd91d85 	.word	0x6fd91d85
    7340:	165e9f81 	.word	0x165e9f81

00007344 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    7344:	b580      	push	{r7, lr}
    7346:	b082      	sub	sp, #8
    7348:	af00      	add	r7, sp, #0
    734a:	4603      	mov	r3, r0
    734c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    734e:	88fb      	ldrh	r3, [r7, #6]
    7350:	2209      	movs	r2, #9
    7352:	4904      	ldr	r1, [pc, #16]	; (7364 <_get_cycles_for_us+0x20>)
    7354:	4618      	mov	r0, r3
    7356:	4b04      	ldr	r3, [pc, #16]	; (7368 <_get_cycles_for_us+0x24>)
    7358:	4798      	blx	r3
    735a:	4603      	mov	r3, r0
}
    735c:	4618      	mov	r0, r3
    735e:	3708      	adds	r7, #8
    7360:	46bd      	mov	sp, r7
    7362:	bd80      	pop	{r7, pc}
    7364:	07270e00 	.word	0x07270e00
    7368:	000071fd 	.word	0x000071fd

0000736c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    736c:	b480      	push	{r7}
    736e:	b083      	sub	sp, #12
    7370:	af00      	add	r7, sp, #0
    7372:	4603      	mov	r3, r0
    7374:	6039      	str	r1, [r7, #0]
    7376:	80fb      	strh	r3, [r7, #6]
    7378:	4613      	mov	r3, r2
    737a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    737c:	797b      	ldrb	r3, [r7, #5]
    737e:	3b04      	subs	r3, #4
    7380:	2b05      	cmp	r3, #5
    7382:	d870      	bhi.n	7466 <_get_cycles_for_ms_internal+0xfa>
    7384:	a201      	add	r2, pc, #4	; (adr r2, 738c <_get_cycles_for_ms_internal+0x20>)
    7386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    738a:	bf00      	nop
    738c:	00007449 	.word	0x00007449
    7390:	0000742d 	.word	0x0000742d
    7394:	00007411 	.word	0x00007411
    7398:	000073ed 	.word	0x000073ed
    739c:	000073c9 	.word	0x000073c9
    73a0:	000073a5 	.word	0x000073a5
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    73a4:	88fb      	ldrh	r3, [r7, #6]
    73a6:	683a      	ldr	r2, [r7, #0]
    73a8:	4937      	ldr	r1, [pc, #220]	; (7488 <_get_cycles_for_ms_internal+0x11c>)
    73aa:	fba1 1202 	umull	r1, r2, r1, r2
    73ae:	0c92      	lsrs	r2, r2, #18
    73b0:	fb02 f303 	mul.w	r3, r2, r3
    73b4:	3302      	adds	r3, #2
    73b6:	4a35      	ldr	r2, [pc, #212]	; (748c <_get_cycles_for_ms_internal+0x120>)
    73b8:	fba2 2303 	umull	r2, r3, r2, r3
    73bc:	085b      	lsrs	r3, r3, #1
    73be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    73c2:	fb02 f303 	mul.w	r3, r2, r3
    73c6:	e058      	b.n	747a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    73c8:	88fb      	ldrh	r3, [r7, #6]
    73ca:	683a      	ldr	r2, [r7, #0]
    73cc:	0952      	lsrs	r2, r2, #5
    73ce:	4930      	ldr	r1, [pc, #192]	; (7490 <_get_cycles_for_ms_internal+0x124>)
    73d0:	fba1 1202 	umull	r1, r2, r1, r2
    73d4:	09d2      	lsrs	r2, r2, #7
    73d6:	fb02 f303 	mul.w	r3, r2, r3
    73da:	3302      	adds	r3, #2
    73dc:	4a2b      	ldr	r2, [pc, #172]	; (748c <_get_cycles_for_ms_internal+0x120>)
    73de:	fba2 2303 	umull	r2, r3, r2, r3
    73e2:	085b      	lsrs	r3, r3, #1
    73e4:	2264      	movs	r2, #100	; 0x64
    73e6:	fb02 f303 	mul.w	r3, r2, r3
    73ea:	e046      	b.n	747a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    73ec:	88fb      	ldrh	r3, [r7, #6]
    73ee:	683a      	ldr	r2, [r7, #0]
    73f0:	4928      	ldr	r1, [pc, #160]	; (7494 <_get_cycles_for_ms_internal+0x128>)
    73f2:	fba1 1202 	umull	r1, r2, r1, r2
    73f6:	0b52      	lsrs	r2, r2, #13
    73f8:	fb02 f303 	mul.w	r3, r2, r3
    73fc:	3302      	adds	r3, #2
    73fe:	4a23      	ldr	r2, [pc, #140]	; (748c <_get_cycles_for_ms_internal+0x120>)
    7400:	fba2 2303 	umull	r2, r3, r2, r3
    7404:	085a      	lsrs	r2, r3, #1
    7406:	4613      	mov	r3, r2
    7408:	009b      	lsls	r3, r3, #2
    740a:	4413      	add	r3, r2
    740c:	005b      	lsls	r3, r3, #1
    740e:	e034      	b.n	747a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    7410:	88fb      	ldrh	r3, [r7, #6]
    7412:	683a      	ldr	r2, [r7, #0]
    7414:	4920      	ldr	r1, [pc, #128]	; (7498 <_get_cycles_for_ms_internal+0x12c>)
    7416:	fba1 1202 	umull	r1, r2, r1, r2
    741a:	0992      	lsrs	r2, r2, #6
    741c:	fb02 f303 	mul.w	r3, r2, r3
    7420:	3302      	adds	r3, #2
    7422:	4a1a      	ldr	r2, [pc, #104]	; (748c <_get_cycles_for_ms_internal+0x120>)
    7424:	fba2 2303 	umull	r2, r3, r2, r3
    7428:	085b      	lsrs	r3, r3, #1
    742a:	e026      	b.n	747a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    742c:	88fb      	ldrh	r3, [r7, #6]
    742e:	683a      	ldr	r2, [r7, #0]
    7430:	491a      	ldr	r1, [pc, #104]	; (749c <_get_cycles_for_ms_internal+0x130>)
    7432:	fba1 1202 	umull	r1, r2, r1, r2
    7436:	0952      	lsrs	r2, r2, #5
    7438:	fb02 f303 	mul.w	r3, r2, r3
    743c:	331d      	adds	r3, #29
    743e:	4a18      	ldr	r2, [pc, #96]	; (74a0 <_get_cycles_for_ms_internal+0x134>)
    7440:	fba2 2303 	umull	r2, r3, r2, r3
    7444:	091b      	lsrs	r3, r3, #4
    7446:	e018      	b.n	747a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    7448:	88fb      	ldrh	r3, [r7, #6]
    744a:	683a      	ldr	r2, [r7, #0]
    744c:	4915      	ldr	r1, [pc, #84]	; (74a4 <_get_cycles_for_ms_internal+0x138>)
    744e:	fba1 1202 	umull	r1, r2, r1, r2
    7452:	08d2      	lsrs	r2, r2, #3
    7454:	fb02 f303 	mul.w	r3, r2, r3
    7458:	f203 132b 	addw	r3, r3, #299	; 0x12b
    745c:	4a12      	ldr	r2, [pc, #72]	; (74a8 <_get_cycles_for_ms_internal+0x13c>)
    745e:	fba2 2303 	umull	r2, r3, r2, r3
    7462:	095b      	lsrs	r3, r3, #5
    7464:	e009      	b.n	747a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    7466:	88fb      	ldrh	r3, [r7, #6]
    7468:	683a      	ldr	r2, [r7, #0]
    746a:	fb02 f303 	mul.w	r3, r2, r3
    746e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    7472:	4a0e      	ldr	r2, [pc, #56]	; (74ac <_get_cycles_for_ms_internal+0x140>)
    7474:	fba2 2303 	umull	r2, r3, r2, r3
    7478:	099b      	lsrs	r3, r3, #6
	}
}
    747a:	4618      	mov	r0, r3
    747c:	370c      	adds	r7, #12
    747e:	46bd      	mov	sp, r7
    7480:	f85d 7b04 	ldr.w	r7, [sp], #4
    7484:	4770      	bx	lr
    7486:	bf00      	nop
    7488:	431bde83 	.word	0x431bde83
    748c:	aaaaaaab 	.word	0xaaaaaaab
    7490:	0a7c5ac5 	.word	0x0a7c5ac5
    7494:	d1b71759 	.word	0xd1b71759
    7498:	10624dd3 	.word	0x10624dd3
    749c:	51eb851f 	.word	0x51eb851f
    74a0:	88888889 	.word	0x88888889
    74a4:	cccccccd 	.word	0xcccccccd
    74a8:	1b4e81b5 	.word	0x1b4e81b5
    74ac:	057619f1 	.word	0x057619f1

000074b0 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    74b0:	b580      	push	{r7, lr}
    74b2:	b082      	sub	sp, #8
    74b4:	af00      	add	r7, sp, #0
    74b6:	4603      	mov	r3, r0
    74b8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    74ba:	88fb      	ldrh	r3, [r7, #6]
    74bc:	2209      	movs	r2, #9
    74be:	4904      	ldr	r1, [pc, #16]	; (74d0 <_get_cycles_for_ms+0x20>)
    74c0:	4618      	mov	r0, r3
    74c2:	4b04      	ldr	r3, [pc, #16]	; (74d4 <_get_cycles_for_ms+0x24>)
    74c4:	4798      	blx	r3
    74c6:	4603      	mov	r3, r0
}
    74c8:	4618      	mov	r0, r3
    74ca:	3708      	adds	r7, #8
    74cc:	46bd      	mov	sp, r7
    74ce:	bd80      	pop	{r7, pc}
    74d0:	07270e00 	.word	0x07270e00
    74d4:	0000736d 	.word	0x0000736d

000074d8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    74d8:	b480      	push	{r7}
    74da:	b083      	sub	sp, #12
    74dc:	af00      	add	r7, sp, #0
    74de:	6078      	str	r0, [r7, #4]
    74e0:	6039      	str	r1, [r7, #0]
    74e2:	bf00      	nop
    74e4:	f3af 8000 	nop.w

000074e8 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    74e8:	3901      	subs	r1, #1
    74ea:	d8fd      	bhi.n	74e8 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    74ec:	bf00      	nop
    74ee:	370c      	adds	r7, #12
    74f0:	46bd      	mov	sp, r7
    74f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    74f6:	4770      	bx	lr

000074f8 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    74f8:	b480      	push	{r7}
    74fa:	b083      	sub	sp, #12
    74fc:	af00      	add	r7, sp, #0
    74fe:	6078      	str	r0, [r7, #4]
    7500:	460b      	mov	r3, r1
    7502:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    7504:	687b      	ldr	r3, [r7, #4]
    7506:	881b      	ldrh	r3, [r3, #0]
    7508:	b29a      	uxth	r2, r3
    750a:	887b      	ldrh	r3, [r7, #2]
    750c:	021b      	lsls	r3, r3, #8
    750e:	b29b      	uxth	r3, r3
    7510:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    7514:	b29b      	uxth	r3, r3
    7516:	4313      	orrs	r3, r2
    7518:	b29a      	uxth	r2, r3
    751a:	687b      	ldr	r3, [r7, #4]
    751c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    751e:	bf00      	nop
    7520:	370c      	adds	r7, #12
    7522:	46bd      	mov	sp, r7
    7524:	f85d 7b04 	ldr.w	r7, [sp], #4
    7528:	4770      	bx	lr

0000752a <hri_port_set_EVCTRL_reg>:
{
    752a:	b480      	push	{r7}
    752c:	b085      	sub	sp, #20
    752e:	af00      	add	r7, sp, #0
    7530:	60f8      	str	r0, [r7, #12]
    7532:	460b      	mov	r3, r1
    7534:	607a      	str	r2, [r7, #4]
    7536:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    7538:	7afb      	ldrb	r3, [r7, #11]
    753a:	7afa      	ldrb	r2, [r7, #11]
    753c:	68f9      	ldr	r1, [r7, #12]
    753e:	01d2      	lsls	r2, r2, #7
    7540:	440a      	add	r2, r1
    7542:	322c      	adds	r2, #44	; 0x2c
    7544:	6811      	ldr	r1, [r2, #0]
    7546:	687a      	ldr	r2, [r7, #4]
    7548:	430a      	orrs	r2, r1
    754a:	68f9      	ldr	r1, [r7, #12]
    754c:	01db      	lsls	r3, r3, #7
    754e:	440b      	add	r3, r1
    7550:	332c      	adds	r3, #44	; 0x2c
    7552:	601a      	str	r2, [r3, #0]
}
    7554:	bf00      	nop
    7556:	3714      	adds	r7, #20
    7558:	46bd      	mov	sp, r7
    755a:	f85d 7b04 	ldr.w	r7, [sp], #4
    755e:	4770      	bx	lr

00007560 <_port_event_init>:

static inline void _port_event_init()
{
    7560:	b580      	push	{r7, lr}
    7562:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    7564:	2200      	movs	r2, #0
    7566:	2100      	movs	r1, #0
    7568:	4809      	ldr	r0, [pc, #36]	; (7590 <_port_event_init+0x30>)
    756a:	4b0a      	ldr	r3, [pc, #40]	; (7594 <_port_event_init+0x34>)
    756c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    756e:	2200      	movs	r2, #0
    7570:	2101      	movs	r1, #1
    7572:	4807      	ldr	r0, [pc, #28]	; (7590 <_port_event_init+0x30>)
    7574:	4b07      	ldr	r3, [pc, #28]	; (7594 <_port_event_init+0x34>)
    7576:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    7578:	22ef      	movs	r2, #239	; 0xef
    757a:	2102      	movs	r1, #2
    757c:	4804      	ldr	r0, [pc, #16]	; (7590 <_port_event_init+0x30>)
    757e:	4b05      	ldr	r3, [pc, #20]	; (7594 <_port_event_init+0x34>)
    7580:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    7582:	2200      	movs	r2, #0
    7584:	2103      	movs	r1, #3
    7586:	4802      	ldr	r0, [pc, #8]	; (7590 <_port_event_init+0x30>)
    7588:	4b02      	ldr	r3, [pc, #8]	; (7594 <_port_event_init+0x34>)
    758a:	4798      	blx	r3
}
    758c:	bf00      	nop
    758e:	bd80      	pop	{r7, pc}
    7590:	41008000 	.word	0x41008000
    7594:	0000752b 	.word	0x0000752b

00007598 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    7598:	b580      	push	{r7, lr}
    759a:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    759c:	2104      	movs	r1, #4
    759e:	480b      	ldr	r0, [pc, #44]	; (75cc <_init_chip+0x34>)
    75a0:	4b0b      	ldr	r3, [pc, #44]	; (75d0 <_init_chip+0x38>)
    75a2:	4798      	blx	r3

	_osc32kctrl_init_sources();
    75a4:	4b0b      	ldr	r3, [pc, #44]	; (75d4 <_init_chip+0x3c>)
    75a6:	4798      	blx	r3
	_oscctrl_init_sources();
    75a8:	4b0b      	ldr	r3, [pc, #44]	; (75d8 <_init_chip+0x40>)
    75aa:	4798      	blx	r3
	_mclk_init();
    75ac:	4b0b      	ldr	r3, [pc, #44]	; (75dc <_init_chip+0x44>)
    75ae:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    75b0:	f44f 6084 	mov.w	r0, #1056	; 0x420
    75b4:	4b0a      	ldr	r3, [pc, #40]	; (75e0 <_init_chip+0x48>)
    75b6:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    75b8:	4b0a      	ldr	r3, [pc, #40]	; (75e4 <_init_chip+0x4c>)
    75ba:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    75bc:	f640 30df 	movw	r0, #3039	; 0xbdf
    75c0:	4b07      	ldr	r3, [pc, #28]	; (75e0 <_init_chip+0x48>)
    75c2:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    75c4:	4b08      	ldr	r3, [pc, #32]	; (75e8 <_init_chip+0x50>)
    75c6:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    75c8:	bf00      	nop
    75ca:	bd80      	pop	{r7, pc}
    75cc:	41004000 	.word	0x41004000
    75d0:	000074f9 	.word	0x000074f9
    75d4:	00008279 	.word	0x00008279
    75d8:	00008741 	.word	0x00008741
    75dc:	00008199 	.word	0x00008199
    75e0:	00008059 	.word	0x00008059
    75e4:	00008781 	.word	0x00008781
    75e8:	00007561 	.word	0x00007561

000075ec <hri_dsu_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
    75ec:	b480      	push	{r7}
    75ee:	b083      	sub	sp, #12
    75f0:	af00      	add	r7, sp, #0
    75f2:	6078      	str	r0, [r7, #4]
    75f4:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    75f6:	687b      	ldr	r3, [r7, #4]
    75f8:	683a      	ldr	r2, [r7, #0]
    75fa:	605a      	str	r2, [r3, #4]
	DSU_CRITICAL_SECTION_LEAVE();
}
    75fc:	bf00      	nop
    75fe:	370c      	adds	r7, #12
    7600:	46bd      	mov	sp, r7
    7602:	f85d 7b04 	ldr.w	r7, [sp], #4
    7606:	4770      	bx	lr

00007608 <hri_dsu_write_LENGTH_LENGTH_bf>:
	tmp = (tmp & DSU_LENGTH_LENGTH(mask)) >> DSU_LENGTH_LENGTH_Pos;
	return tmp;
}

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
    7608:	b480      	push	{r7}
    760a:	b085      	sub	sp, #20
    760c:	af00      	add	r7, sp, #0
    760e:	6078      	str	r0, [r7, #4]
    7610:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    7612:	687b      	ldr	r3, [r7, #4]
    7614:	689b      	ldr	r3, [r3, #8]
    7616:	60fb      	str	r3, [r7, #12]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    7618:	68fb      	ldr	r3, [r7, #12]
    761a:	f003 0303 	and.w	r3, r3, #3
    761e:	60fb      	str	r3, [r7, #12]
	tmp |= DSU_LENGTH_LENGTH(data);
    7620:	683b      	ldr	r3, [r7, #0]
    7622:	009b      	lsls	r3, r3, #2
    7624:	68fa      	ldr	r2, [r7, #12]
    7626:	4313      	orrs	r3, r2
    7628:	60fb      	str	r3, [r7, #12]
	((Dsu *)hw)->LENGTH.reg = tmp;
    762a:	687b      	ldr	r3, [r7, #4]
    762c:	68fa      	ldr	r2, [r7, #12]
    762e:	609a      	str	r2, [r3, #8]
	DSU_CRITICAL_SECTION_LEAVE();
}
    7630:	bf00      	nop
    7632:	3714      	adds	r7, #20
    7634:	46bd      	mov	sp, r7
    7636:	f85d 7b04 	ldr.w	r7, [sp], #4
    763a:	4770      	bx	lr

0000763c <hri_dsu_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
    763c:	b480      	push	{r7}
    763e:	b083      	sub	sp, #12
    7640:	af00      	add	r7, sp, #0
    7642:	6078      	str	r0, [r7, #4]
    7644:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    7646:	687b      	ldr	r3, [r7, #4]
    7648:	683a      	ldr	r2, [r7, #0]
    764a:	60da      	str	r2, [r3, #12]
	DSU_CRITICAL_SECTION_LEAVE();
}
    764c:	bf00      	nop
    764e:	370c      	adds	r7, #12
    7650:	46bd      	mov	sp, r7
    7652:	f85d 7b04 	ldr.w	r7, [sp], #4
    7656:	4770      	bx	lr

00007658 <hri_dsu_read_DATA_reg>:
	((Dsu *)hw)->DATA.reg ^= mask;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline hri_dsu_data_reg_t hri_dsu_read_DATA_reg(const void *const hw)
{
    7658:	b480      	push	{r7}
    765a:	b083      	sub	sp, #12
    765c:	af00      	add	r7, sp, #0
    765e:	6078      	str	r0, [r7, #4]
	return ((Dsu *)hw)->DATA.reg;
    7660:	687b      	ldr	r3, [r7, #4]
    7662:	68db      	ldr	r3, [r3, #12]
}
    7664:	4618      	mov	r0, r3
    7666:	370c      	adds	r7, #12
    7668:	46bd      	mov	sp, r7
    766a:	f85d 7b04 	ldr.w	r7, [sp], #4
    766e:	4770      	bx	lr

00007670 <hri_dsu_get_STATUSA_DONE_bit>:
{
	return ((Dsu *)hw)->CFG.reg;
}

static inline bool hri_dsu_get_STATUSA_DONE_bit(const void *const hw)
{
    7670:	b480      	push	{r7}
    7672:	b083      	sub	sp, #12
    7674:	af00      	add	r7, sp, #0
    7676:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    7678:	687b      	ldr	r3, [r7, #4]
    767a:	785b      	ldrb	r3, [r3, #1]
    767c:	b2db      	uxtb	r3, r3
    767e:	f003 0301 	and.w	r3, r3, #1
    7682:	2b00      	cmp	r3, #0
    7684:	bf14      	ite	ne
    7686:	2301      	movne	r3, #1
    7688:	2300      	moveq	r3, #0
    768a:	b2db      	uxtb	r3, r3
}
    768c:	4618      	mov	r0, r3
    768e:	370c      	adds	r7, #12
    7690:	46bd      	mov	sp, r7
    7692:	f85d 7b04 	ldr.w	r7, [sp], #4
    7696:	4770      	bx	lr

00007698 <hri_dsu_clear_STATUSA_DONE_bit>:

static inline void hri_dsu_clear_STATUSA_DONE_bit(const void *const hw)
{
    7698:	b480      	push	{r7}
    769a:	b083      	sub	sp, #12
    769c:	af00      	add	r7, sp, #0
    769e:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    76a0:	687b      	ldr	r3, [r7, #4]
    76a2:	2201      	movs	r2, #1
    76a4:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    76a6:	bf00      	nop
    76a8:	370c      	adds	r7, #12
    76aa:	46bd      	mov	sp, r7
    76ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    76b0:	4770      	bx	lr

000076b2 <hri_dsu_get_STATUSA_BERR_bit>:
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_CRSTEXT;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dsu_get_STATUSA_BERR_bit(const void *const hw)
{
    76b2:	b480      	push	{r7}
    76b4:	b083      	sub	sp, #12
    76b6:	af00      	add	r7, sp, #0
    76b8:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    76ba:	687b      	ldr	r3, [r7, #4]
    76bc:	785b      	ldrb	r3, [r3, #1]
    76be:	b2db      	uxtb	r3, r3
    76c0:	089b      	lsrs	r3, r3, #2
    76c2:	f003 0301 	and.w	r3, r3, #1
    76c6:	2b00      	cmp	r3, #0
    76c8:	bf14      	ite	ne
    76ca:	2301      	movne	r3, #1
    76cc:	2300      	moveq	r3, #0
    76ce:	b2db      	uxtb	r3, r3
}
    76d0:	4618      	mov	r0, r3
    76d2:	370c      	adds	r7, #12
    76d4:	46bd      	mov	sp, r7
    76d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    76da:	4770      	bx	lr

000076dc <hri_dsu_clear_STATUSA_BERR_bit>:

static inline void hri_dsu_clear_STATUSA_BERR_bit(const void *const hw)
{
    76dc:	b480      	push	{r7}
    76de:	b083      	sub	sp, #12
    76e0:	af00      	add	r7, sp, #0
    76e2:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    76e4:	687b      	ldr	r3, [r7, #4]
    76e6:	2204      	movs	r2, #4
    76e8:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    76ea:	bf00      	nop
    76ec:	370c      	adds	r7, #12
    76ee:	46bd      	mov	sp, r7
    76f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    76f4:	4770      	bx	lr

000076f6 <hri_dsu_write_CTRL_reg>:
{
	return ((Dsu *)hw)->STATUSA.reg;
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
    76f6:	b480      	push	{r7}
    76f8:	b083      	sub	sp, #12
    76fa:	af00      	add	r7, sp, #0
    76fc:	6078      	str	r0, [r7, #4]
    76fe:	460b      	mov	r3, r1
    7700:	70fb      	strb	r3, [r7, #3]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    7702:	687b      	ldr	r3, [r7, #4]
    7704:	78fa      	ldrb	r2, [r7, #3]
    7706:	701a      	strb	r2, [r3, #0]
	DSU_CRITICAL_SECTION_LEAVE();
}
    7708:	bf00      	nop
    770a:	370c      	adds	r7, #12
    770c:	46bd      	mov	sp, r7
    770e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7712:	4770      	bx	lr

00007714 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    7714:	b480      	push	{r7}
    7716:	b083      	sub	sp, #12
    7718:	af00      	add	r7, sp, #0
    771a:	6078      	str	r0, [r7, #4]
    771c:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    771e:	687b      	ldr	r3, [r7, #4]
    7720:	683a      	ldr	r2, [r7, #0]
    7722:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    7724:	2300      	movs	r3, #0
}
    7726:	4618      	mov	r0, r3
    7728:	370c      	adds	r7, #12
    772a:	46bd      	mov	sp, r7
    772c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7730:	4770      	bx	lr

00007732 <_crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
    7732:	b480      	push	{r7}
    7734:	b083      	sub	sp, #12
    7736:	af00      	add	r7, sp, #0
    7738:	6078      	str	r0, [r7, #4]
	(void)device;

	return ERR_NONE;
    773a:	2300      	movs	r3, #0
}
    773c:	4618      	mov	r0, r3
    773e:	370c      	adds	r7, #12
    7740:	46bd      	mov	sp, r7
    7742:	f85d 7b04 	ldr.w	r7, [sp], #4
    7746:	4770      	bx	lr

00007748 <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    7748:	b580      	push	{r7, lr}
    774a:	b086      	sub	sp, #24
    774c:	af00      	add	r7, sp, #0
    774e:	60f8      	str	r0, [r7, #12]
    7750:	60b9      	str	r1, [r7, #8]
    7752:	607a      	str	r2, [r7, #4]
    7754:	603b      	str	r3, [r7, #0]
	int32_t rc = ERR_NONE;
    7756:	2300      	movs	r3, #0
    7758:	617b      	str	r3, [r7, #20]
	if (((uint32_t)data) & 0x00000003) {
    775a:	68bb      	ldr	r3, [r7, #8]
    775c:	f003 0303 	and.w	r3, r3, #3
    7760:	2b00      	cmp	r3, #0
    7762:	d002      	beq.n	776a <_crc_sync_crc32+0x22>
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
    7764:	f06f 030c 	mvn.w	r3, #12
    7768:	e05e      	b.n	7828 <_crc_sync_crc32+0xe0>
	}

	CRITICAL_SECTION_ENTER()
    776a:	f107 0310 	add.w	r3, r7, #16
    776e:	4618      	mov	r0, r3
    7770:	4b2f      	ldr	r3, [pc, #188]	; (7830 <_crc_sync_crc32+0xe8>)
    7772:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    7774:	68fb      	ldr	r3, [r7, #12]
    7776:	681b      	ldr	r3, [r3, #0]
    7778:	4618      	mov	r0, r3
    777a:	4b2e      	ldr	r3, [pc, #184]	; (7834 <_crc_sync_crc32+0xec>)
    777c:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    777e:	68fb      	ldr	r3, [r7, #12]
    7780:	681b      	ldr	r3, [r3, #0]
    7782:	68ba      	ldr	r2, [r7, #8]
    7784:	4611      	mov	r1, r2
    7786:	4618      	mov	r0, r3
    7788:	4b2b      	ldr	r3, [pc, #172]	; (7838 <_crc_sync_crc32+0xf0>)
    778a:	4798      	blx	r3
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    778c:	68fb      	ldr	r3, [r7, #12]
    778e:	681b      	ldr	r3, [r3, #0]
    7790:	6879      	ldr	r1, [r7, #4]
    7792:	4618      	mov	r0, r3
    7794:	4b29      	ldr	r3, [pc, #164]	; (783c <_crc_sync_crc32+0xf4>)
    7796:	4798      	blx	r3
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    7798:	68fb      	ldr	r3, [r7, #12]
    779a:	681a      	ldr	r2, [r3, #0]
    779c:	683b      	ldr	r3, [r7, #0]
    779e:	681b      	ldr	r3, [r3, #0]
    77a0:	4619      	mov	r1, r3
    77a2:	4610      	mov	r0, r2
    77a4:	4b26      	ldr	r3, [pc, #152]	; (7840 <_crc_sync_crc32+0xf8>)
    77a6:	4798      	blx	r3
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    77a8:	68fb      	ldr	r3, [r7, #12]
    77aa:	681b      	ldr	r3, [r3, #0]
    77ac:	2104      	movs	r1, #4
    77ae:	4618      	mov	r0, r3
    77b0:	4b24      	ldr	r3, [pc, #144]	; (7844 <_crc_sync_crc32+0xfc>)
    77b2:	4798      	blx	r3

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    77b4:	bf00      	nop
    77b6:	68fb      	ldr	r3, [r7, #12]
    77b8:	681b      	ldr	r3, [r3, #0]
    77ba:	4618      	mov	r0, r3
    77bc:	4b22      	ldr	r3, [pc, #136]	; (7848 <_crc_sync_crc32+0x100>)
    77be:	4798      	blx	r3
    77c0:	4603      	mov	r3, r0
    77c2:	f083 0301 	eor.w	r3, r3, #1
    77c6:	b2db      	uxtb	r3, r3
    77c8:	2b00      	cmp	r3, #0
    77ca:	d1f4      	bne.n	77b6 <_crc_sync_crc32+0x6e>
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    77cc:	68fb      	ldr	r3, [r7, #12]
    77ce:	681b      	ldr	r3, [r3, #0]
    77d0:	4618      	mov	r0, r3
    77d2:	4b1e      	ldr	r3, [pc, #120]	; (784c <_crc_sync_crc32+0x104>)
    77d4:	4798      	blx	r3
    77d6:	4603      	mov	r3, r0
    77d8:	2b00      	cmp	r3, #0
    77da:	d00d      	beq.n	77f8 <_crc_sync_crc32+0xb0>
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
    77dc:	68fb      	ldr	r3, [r7, #12]
    77de:	681b      	ldr	r3, [r3, #0]
    77e0:	4618      	mov	r0, r3
    77e2:	4b1b      	ldr	r3, [pc, #108]	; (7850 <_crc_sync_crc32+0x108>)
    77e4:	4798      	blx	r3
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    77e6:	68fb      	ldr	r3, [r7, #12]
    77e8:	681b      	ldr	r3, [r3, #0]
    77ea:	4618      	mov	r0, r3
    77ec:	4b19      	ldr	r3, [pc, #100]	; (7854 <_crc_sync_crc32+0x10c>)
    77ee:	4798      	blx	r3
		rc = ERR_IO;
    77f0:	f06f 0305 	mvn.w	r3, #5
    77f4:	617b      	str	r3, [r7, #20]
    77f6:	e007      	b.n	7808 <_crc_sync_crc32+0xc0>
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    77f8:	68fb      	ldr	r3, [r7, #12]
    77fa:	681b      	ldr	r3, [r3, #0]
    77fc:	4618      	mov	r0, r3
    77fe:	4b16      	ldr	r3, [pc, #88]	; (7858 <_crc_sync_crc32+0x110>)
    7800:	4798      	blx	r3
    7802:	4602      	mov	r2, r0
    7804:	683b      	ldr	r3, [r7, #0]
    7806:	601a      	str	r2, [r3, #0]
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    7808:	68fb      	ldr	r3, [r7, #12]
    780a:	681b      	ldr	r3, [r3, #0]
    780c:	4618      	mov	r0, r3
    780e:	4b11      	ldr	r3, [pc, #68]	; (7854 <_crc_sync_crc32+0x10c>)
    7810:	4798      	blx	r3

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    7812:	68fb      	ldr	r3, [r7, #12]
    7814:	681b      	ldr	r3, [r3, #0]
    7816:	4618      	mov	r0, r3
    7818:	4b10      	ldr	r3, [pc, #64]	; (785c <_crc_sync_crc32+0x114>)
    781a:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    781c:	f107 0310 	add.w	r3, r7, #16
    7820:	4618      	mov	r0, r3
    7822:	4b0f      	ldr	r3, [pc, #60]	; (7860 <_crc_sync_crc32+0x118>)
    7824:	4798      	blx	r3

	return rc;
    7826:	697b      	ldr	r3, [r7, #20]
}
    7828:	4618      	mov	r0, r3
    782a:	3718      	adds	r7, #24
    782c:	46bd      	mov	sp, r7
    782e:	bd80      	pop	{r7, pc}
    7830:	0000f015 	.word	0x0000f015
    7834:	00008b21 	.word	0x00008b21
    7838:	000075ed 	.word	0x000075ed
    783c:	00007609 	.word	0x00007609
    7840:	0000763d 	.word	0x0000763d
    7844:	000076f7 	.word	0x000076f7
    7848:	00007671 	.word	0x00007671
    784c:	000076b3 	.word	0x000076b3
    7850:	000076dd 	.word	0x000076dd
    7854:	00007699 	.word	0x00007699
    7858:	00007659 	.word	0x00007659
    785c:	00008a95 	.word	0x00008a95
    7860:	0000f03b 	.word	0x0000f03b

00007864 <__NVIC_EnableIRQ>:
{
    7864:	b480      	push	{r7}
    7866:	b083      	sub	sp, #12
    7868:	af00      	add	r7, sp, #0
    786a:	4603      	mov	r3, r0
    786c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    786e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7872:	2b00      	cmp	r3, #0
    7874:	db0b      	blt.n	788e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7876:	4909      	ldr	r1, [pc, #36]	; (789c <__NVIC_EnableIRQ+0x38>)
    7878:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    787c:	095b      	lsrs	r3, r3, #5
    787e:	88fa      	ldrh	r2, [r7, #6]
    7880:	f002 021f 	and.w	r2, r2, #31
    7884:	2001      	movs	r0, #1
    7886:	fa00 f202 	lsl.w	r2, r0, r2
    788a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    788e:	bf00      	nop
    7890:	370c      	adds	r7, #12
    7892:	46bd      	mov	sp, r7
    7894:	f85d 7b04 	ldr.w	r7, [sp], #4
    7898:	4770      	bx	lr
    789a:	bf00      	nop
    789c:	e000e100 	.word	0xe000e100

000078a0 <__NVIC_DisableIRQ>:
{
    78a0:	b480      	push	{r7}
    78a2:	b083      	sub	sp, #12
    78a4:	af00      	add	r7, sp, #0
    78a6:	4603      	mov	r3, r0
    78a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    78aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78ae:	2b00      	cmp	r3, #0
    78b0:	db10      	blt.n	78d4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    78b2:	490b      	ldr	r1, [pc, #44]	; (78e0 <__NVIC_DisableIRQ+0x40>)
    78b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78b8:	095b      	lsrs	r3, r3, #5
    78ba:	88fa      	ldrh	r2, [r7, #6]
    78bc:	f002 021f 	and.w	r2, r2, #31
    78c0:	2001      	movs	r0, #1
    78c2:	fa00 f202 	lsl.w	r2, r0, r2
    78c6:	3320      	adds	r3, #32
    78c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    78cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    78d0:	f3bf 8f6f 	isb	sy
}
    78d4:	bf00      	nop
    78d6:	370c      	adds	r7, #12
    78d8:	46bd      	mov	sp, r7
    78da:	f85d 7b04 	ldr.w	r7, [sp], #4
    78de:	4770      	bx	lr
    78e0:	e000e100 	.word	0xe000e100

000078e4 <__NVIC_ClearPendingIRQ>:
{
    78e4:	b480      	push	{r7}
    78e6:	b083      	sub	sp, #12
    78e8:	af00      	add	r7, sp, #0
    78ea:	4603      	mov	r3, r0
    78ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    78ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78f2:	2b00      	cmp	r3, #0
    78f4:	db0c      	blt.n	7910 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    78f6:	4909      	ldr	r1, [pc, #36]	; (791c <__NVIC_ClearPendingIRQ+0x38>)
    78f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78fc:	095b      	lsrs	r3, r3, #5
    78fe:	88fa      	ldrh	r2, [r7, #6]
    7900:	f002 021f 	and.w	r2, r2, #31
    7904:	2001      	movs	r0, #1
    7906:	fa00 f202 	lsl.w	r2, r0, r2
    790a:	3360      	adds	r3, #96	; 0x60
    790c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7910:	bf00      	nop
    7912:	370c      	adds	r7, #12
    7914:	46bd      	mov	sp, r7
    7916:	f85d 7b04 	ldr.w	r7, [sp], #4
    791a:	4770      	bx	lr
    791c:	e000e100 	.word	0xe000e100

00007920 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    7920:	b480      	push	{r7}
    7922:	b083      	sub	sp, #12
    7924:	af00      	add	r7, sp, #0
    7926:	6078      	str	r0, [r7, #4]
    7928:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    792a:	bf00      	nop
    792c:	687b      	ldr	r3, [r7, #4]
    792e:	685a      	ldr	r2, [r3, #4]
    7930:	683b      	ldr	r3, [r7, #0]
    7932:	4013      	ands	r3, r2
    7934:	2b00      	cmp	r3, #0
    7936:	d1f9      	bne.n	792c <hri_eic_wait_for_sync+0xc>
	};
}
    7938:	bf00      	nop
    793a:	370c      	adds	r7, #12
    793c:	46bd      	mov	sp, r7
    793e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7942:	4770      	bx	lr

00007944 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    7944:	b480      	push	{r7}
    7946:	b083      	sub	sp, #12
    7948:	af00      	add	r7, sp, #0
    794a:	6078      	str	r0, [r7, #4]
    794c:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    794e:	687b      	ldr	r3, [r7, #4]
    7950:	685a      	ldr	r2, [r3, #4]
    7952:	683b      	ldr	r3, [r7, #0]
    7954:	4013      	ands	r3, r2
    7956:	2b00      	cmp	r3, #0
    7958:	bf14      	ite	ne
    795a:	2301      	movne	r3, #1
    795c:	2300      	moveq	r3, #0
    795e:	b2db      	uxtb	r3, r3
}
    7960:	4618      	mov	r0, r3
    7962:	370c      	adds	r7, #12
    7964:	46bd      	mov	sp, r7
    7966:	f85d 7b04 	ldr.w	r7, [sp], #4
    796a:	4770      	bx	lr

0000796c <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    796c:	b480      	push	{r7}
    796e:	b083      	sub	sp, #12
    7970:	af00      	add	r7, sp, #0
    7972:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    7974:	687b      	ldr	r3, [r7, #4]
    7976:	695b      	ldr	r3, [r3, #20]
}
    7978:	4618      	mov	r0, r3
    797a:	370c      	adds	r7, #12
    797c:	46bd      	mov	sp, r7
    797e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7982:	4770      	bx	lr

00007984 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    7984:	b480      	push	{r7}
    7986:	b083      	sub	sp, #12
    7988:	af00      	add	r7, sp, #0
    798a:	6078      	str	r0, [r7, #4]
    798c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    798e:	687b      	ldr	r3, [r7, #4]
    7990:	683a      	ldr	r2, [r7, #0]
    7992:	615a      	str	r2, [r3, #20]
}
    7994:	bf00      	nop
    7996:	370c      	adds	r7, #12
    7998:	46bd      	mov	sp, r7
    799a:	f85d 7b04 	ldr.w	r7, [sp], #4
    799e:	4770      	bx	lr

000079a0 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    79a0:	b480      	push	{r7}
    79a2:	b083      	sub	sp, #12
    79a4:	af00      	add	r7, sp, #0
    79a6:	6078      	str	r0, [r7, #4]
    79a8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    79aa:	687b      	ldr	r3, [r7, #4]
    79ac:	683a      	ldr	r2, [r7, #0]
    79ae:	611a      	str	r2, [r3, #16]
}
    79b0:	bf00      	nop
    79b2:	370c      	adds	r7, #12
    79b4:	46bd      	mov	sp, r7
    79b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    79ba:	4770      	bx	lr

000079bc <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    79bc:	b480      	push	{r7}
    79be:	b083      	sub	sp, #12
    79c0:	af00      	add	r7, sp, #0
    79c2:	6078      	str	r0, [r7, #4]
    79c4:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    79c6:	687b      	ldr	r3, [r7, #4]
    79c8:	683a      	ldr	r2, [r7, #0]
    79ca:	60da      	str	r2, [r3, #12]
}
    79cc:	bf00      	nop
    79ce:	370c      	adds	r7, #12
    79d0:	46bd      	mov	sp, r7
    79d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    79d6:	4770      	bx	lr

000079d8 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    79d8:	b580      	push	{r7, lr}
    79da:	b082      	sub	sp, #8
    79dc:	af00      	add	r7, sp, #0
    79de:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    79e0:	687b      	ldr	r3, [r7, #4]
    79e2:	781b      	ldrb	r3, [r3, #0]
    79e4:	b2db      	uxtb	r3, r3
    79e6:	f043 0302 	orr.w	r3, r3, #2
    79ea:	b2da      	uxtb	r2, r3
    79ec:	687b      	ldr	r3, [r7, #4]
    79ee:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    79f0:	2103      	movs	r1, #3
    79f2:	6878      	ldr	r0, [r7, #4]
    79f4:	4b02      	ldr	r3, [pc, #8]	; (7a00 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    79f6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    79f8:	bf00      	nop
    79fa:	3708      	adds	r7, #8
    79fc:	46bd      	mov	sp, r7
    79fe:	bd80      	pop	{r7, pc}
    7a00:	00007921 	.word	0x00007921

00007a04 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7a04:	b580      	push	{r7, lr}
    7a06:	b082      	sub	sp, #8
    7a08:	af00      	add	r7, sp, #0
    7a0a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    7a0c:	687b      	ldr	r3, [r7, #4]
    7a0e:	781b      	ldrb	r3, [r3, #0]
    7a10:	b2db      	uxtb	r3, r3
    7a12:	f023 0302 	bic.w	r3, r3, #2
    7a16:	b2da      	uxtb	r2, r3
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    7a1c:	2103      	movs	r1, #3
    7a1e:	6878      	ldr	r0, [r7, #4]
    7a20:	4b02      	ldr	r3, [pc, #8]	; (7a2c <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    7a22:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    7a24:	bf00      	nop
    7a26:	3708      	adds	r7, #8
    7a28:	46bd      	mov	sp, r7
    7a2a:	bd80      	pop	{r7, pc}
    7a2c:	00007921 	.word	0x00007921

00007a30 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    7a30:	b580      	push	{r7, lr}
    7a32:	b084      	sub	sp, #16
    7a34:	af00      	add	r7, sp, #0
    7a36:	6078      	str	r0, [r7, #4]
    7a38:	460b      	mov	r3, r1
    7a3a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    7a3c:	687b      	ldr	r3, [r7, #4]
    7a3e:	781b      	ldrb	r3, [r3, #0]
    7a40:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    7a42:	7bfb      	ldrb	r3, [r7, #15]
    7a44:	f023 0310 	bic.w	r3, r3, #16
    7a48:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    7a4a:	78fb      	ldrb	r3, [r7, #3]
    7a4c:	011b      	lsls	r3, r3, #4
    7a4e:	b25a      	sxtb	r2, r3
    7a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7a54:	4313      	orrs	r3, r2
    7a56:	b25b      	sxtb	r3, r3
    7a58:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    7a5a:	687b      	ldr	r3, [r7, #4]
    7a5c:	7bfa      	ldrb	r2, [r7, #15]
    7a5e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    7a60:	2103      	movs	r1, #3
    7a62:	6878      	ldr	r0, [r7, #4]
    7a64:	4b02      	ldr	r3, [pc, #8]	; (7a70 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    7a66:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    7a68:	bf00      	nop
    7a6a:	3710      	adds	r7, #16
    7a6c:	46bd      	mov	sp, r7
    7a6e:	bd80      	pop	{r7, pc}
    7a70:	00007921 	.word	0x00007921

00007a74 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    7a74:	b580      	push	{r7, lr}
    7a76:	b084      	sub	sp, #16
    7a78:	af00      	add	r7, sp, #0
    7a7a:	6078      	str	r0, [r7, #4]
    7a7c:	460b      	mov	r3, r1
    7a7e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    7a80:	2103      	movs	r1, #3
    7a82:	6878      	ldr	r0, [r7, #4]
    7a84:	4b06      	ldr	r3, [pc, #24]	; (7aa0 <hri_eic_get_CTRLA_reg+0x2c>)
    7a86:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    7a88:	687b      	ldr	r3, [r7, #4]
    7a8a:	781b      	ldrb	r3, [r3, #0]
    7a8c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7a8e:	7bfa      	ldrb	r2, [r7, #15]
    7a90:	78fb      	ldrb	r3, [r7, #3]
    7a92:	4013      	ands	r3, r2
    7a94:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7a96:	7bfb      	ldrb	r3, [r7, #15]
}
    7a98:	4618      	mov	r0, r3
    7a9a:	3710      	adds	r7, #16
    7a9c:	46bd      	mov	sp, r7
    7a9e:	bd80      	pop	{r7, pc}
    7aa0:	00007921 	.word	0x00007921

00007aa4 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    7aa4:	b580      	push	{r7, lr}
    7aa6:	b082      	sub	sp, #8
    7aa8:	af00      	add	r7, sp, #0
    7aaa:	6078      	str	r0, [r7, #4]
    7aac:	460b      	mov	r3, r1
    7aae:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    7ab0:	687b      	ldr	r3, [r7, #4]
    7ab2:	78fa      	ldrb	r2, [r7, #3]
    7ab4:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    7ab6:	2103      	movs	r1, #3
    7ab8:	6878      	ldr	r0, [r7, #4]
    7aba:	4b03      	ldr	r3, [pc, #12]	; (7ac8 <hri_eic_write_CTRLA_reg+0x24>)
    7abc:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    7abe:	bf00      	nop
    7ac0:	3708      	adds	r7, #8
    7ac2:	46bd      	mov	sp, r7
    7ac4:	bd80      	pop	{r7, pc}
    7ac6:	bf00      	nop
    7ac8:	00007921 	.word	0x00007921

00007acc <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    7acc:	b480      	push	{r7}
    7ace:	b083      	sub	sp, #12
    7ad0:	af00      	add	r7, sp, #0
    7ad2:	6078      	str	r0, [r7, #4]
    7ad4:	460b      	mov	r3, r1
    7ad6:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    7ad8:	687b      	ldr	r3, [r7, #4]
    7ada:	78fa      	ldrb	r2, [r7, #3]
    7adc:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7ade:	bf00      	nop
    7ae0:	370c      	adds	r7, #12
    7ae2:	46bd      	mov	sp, r7
    7ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ae8:	4770      	bx	lr

00007aea <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    7aea:	b480      	push	{r7}
    7aec:	b083      	sub	sp, #12
    7aee:	af00      	add	r7, sp, #0
    7af0:	6078      	str	r0, [r7, #4]
    7af2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	683a      	ldr	r2, [r7, #0]
    7af8:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7afa:	bf00      	nop
    7afc:	370c      	adds	r7, #12
    7afe:	46bd      	mov	sp, r7
    7b00:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b04:	4770      	bx	lr

00007b06 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    7b06:	b480      	push	{r7}
    7b08:	b083      	sub	sp, #12
    7b0a:	af00      	add	r7, sp, #0
    7b0c:	6078      	str	r0, [r7, #4]
    7b0e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    7b10:	687b      	ldr	r3, [r7, #4]
    7b12:	683a      	ldr	r2, [r7, #0]
    7b14:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7b16:	bf00      	nop
    7b18:	370c      	adds	r7, #12
    7b1a:	46bd      	mov	sp, r7
    7b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b20:	4770      	bx	lr

00007b22 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    7b22:	b480      	push	{r7}
    7b24:	b085      	sub	sp, #20
    7b26:	af00      	add	r7, sp, #0
    7b28:	60f8      	str	r0, [r7, #12]
    7b2a:	460b      	mov	r3, r1
    7b2c:	607a      	str	r2, [r7, #4]
    7b2e:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    7b30:	7afb      	ldrb	r3, [r7, #11]
    7b32:	68fa      	ldr	r2, [r7, #12]
    7b34:	3306      	adds	r3, #6
    7b36:	009b      	lsls	r3, r3, #2
    7b38:	4413      	add	r3, r2
    7b3a:	687a      	ldr	r2, [r7, #4]
    7b3c:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7b3e:	bf00      	nop
    7b40:	3714      	adds	r7, #20
    7b42:	46bd      	mov	sp, r7
    7b44:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b48:	4770      	bx	lr

00007b4a <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    7b4a:	b480      	push	{r7}
    7b4c:	b083      	sub	sp, #12
    7b4e:	af00      	add	r7, sp, #0
    7b50:	6078      	str	r0, [r7, #4]
    7b52:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    7b54:	687b      	ldr	r3, [r7, #4]
    7b56:	683a      	ldr	r2, [r7, #0]
    7b58:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    7b5a:	bf00      	nop
    7b5c:	370c      	adds	r7, #12
    7b5e:	46bd      	mov	sp, r7
    7b60:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b64:	4770      	bx	lr

00007b66 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    7b66:	b480      	push	{r7}
    7b68:	b083      	sub	sp, #12
    7b6a:	af00      	add	r7, sp, #0
    7b6c:	6078      	str	r0, [r7, #4]
    7b6e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    7b70:	687b      	ldr	r3, [r7, #4]
    7b72:	683a      	ldr	r2, [r7, #0]
    7b74:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    7b76:	bf00      	nop
    7b78:	370c      	adds	r7, #12
    7b7a:	46bd      	mov	sp, r7
    7b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b80:	4770      	bx	lr
	...

00007b84 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    7b84:	b580      	push	{r7, lr}
    7b86:	b082      	sub	sp, #8
    7b88:	af00      	add	r7, sp, #0
    7b8a:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    7b8c:	2101      	movs	r1, #1
    7b8e:	483d      	ldr	r0, [pc, #244]	; (7c84 <_ext_irq_init+0x100>)
    7b90:	4b3d      	ldr	r3, [pc, #244]	; (7c88 <_ext_irq_init+0x104>)
    7b92:	4798      	blx	r3
    7b94:	4603      	mov	r3, r0
    7b96:	f083 0301 	eor.w	r3, r3, #1
    7b9a:	b2db      	uxtb	r3, r3
    7b9c:	2b00      	cmp	r3, #0
    7b9e:	d011      	beq.n	7bc4 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    7ba0:	2102      	movs	r1, #2
    7ba2:	4838      	ldr	r0, [pc, #224]	; (7c84 <_ext_irq_init+0x100>)
    7ba4:	4b39      	ldr	r3, [pc, #228]	; (7c8c <_ext_irq_init+0x108>)
    7ba6:	4798      	blx	r3
    7ba8:	4603      	mov	r3, r0
    7baa:	2b00      	cmp	r3, #0
    7bac:	d006      	beq.n	7bbc <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    7bae:	4835      	ldr	r0, [pc, #212]	; (7c84 <_ext_irq_init+0x100>)
    7bb0:	4b37      	ldr	r3, [pc, #220]	; (7c90 <_ext_irq_init+0x10c>)
    7bb2:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    7bb4:	2102      	movs	r1, #2
    7bb6:	4833      	ldr	r0, [pc, #204]	; (7c84 <_ext_irq_init+0x100>)
    7bb8:	4b36      	ldr	r3, [pc, #216]	; (7c94 <_ext_irq_init+0x110>)
    7bba:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    7bbc:	2101      	movs	r1, #1
    7bbe:	4831      	ldr	r0, [pc, #196]	; (7c84 <_ext_irq_init+0x100>)
    7bc0:	4b35      	ldr	r3, [pc, #212]	; (7c98 <_ext_irq_init+0x114>)
    7bc2:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    7bc4:	2101      	movs	r1, #1
    7bc6:	482f      	ldr	r0, [pc, #188]	; (7c84 <_ext_irq_init+0x100>)
    7bc8:	4b32      	ldr	r3, [pc, #200]	; (7c94 <_ext_irq_init+0x110>)
    7bca:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    7bcc:	2100      	movs	r1, #0
    7bce:	482d      	ldr	r0, [pc, #180]	; (7c84 <_ext_irq_init+0x100>)
    7bd0:	4b32      	ldr	r3, [pc, #200]	; (7c9c <_ext_irq_init+0x118>)
    7bd2:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    7bd4:	2100      	movs	r1, #0
    7bd6:	482b      	ldr	r0, [pc, #172]	; (7c84 <_ext_irq_init+0x100>)
    7bd8:	4b31      	ldr	r3, [pc, #196]	; (7ca0 <_ext_irq_init+0x11c>)
    7bda:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    7bdc:	2100      	movs	r1, #0
    7bde:	4829      	ldr	r0, [pc, #164]	; (7c84 <_ext_irq_init+0x100>)
    7be0:	4b30      	ldr	r3, [pc, #192]	; (7ca4 <_ext_irq_init+0x120>)
    7be2:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    7be4:	f240 3131 	movw	r1, #817	; 0x331
    7be8:	4826      	ldr	r0, [pc, #152]	; (7c84 <_ext_irq_init+0x100>)
    7bea:	4b2f      	ldr	r3, [pc, #188]	; (7ca8 <_ext_irq_init+0x124>)
    7bec:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    7bee:	f240 3131 	movw	r1, #817	; 0x331
    7bf2:	4824      	ldr	r0, [pc, #144]	; (7c84 <_ext_irq_init+0x100>)
    7bf4:	4b2d      	ldr	r3, [pc, #180]	; (7cac <_ext_irq_init+0x128>)
    7bf6:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    7bf8:	2100      	movs	r1, #0
    7bfa:	4822      	ldr	r0, [pc, #136]	; (7c84 <_ext_irq_init+0x100>)
    7bfc:	4b2c      	ldr	r3, [pc, #176]	; (7cb0 <_ext_irq_init+0x12c>)
    7bfe:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    7c00:	4a2c      	ldr	r2, [pc, #176]	; (7cb4 <_ext_irq_init+0x130>)
    7c02:	2100      	movs	r1, #0
    7c04:	481f      	ldr	r0, [pc, #124]	; (7c84 <_ext_irq_init+0x100>)
    7c06:	4b2c      	ldr	r3, [pc, #176]	; (7cb8 <_ext_irq_init+0x134>)
    7c08:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    7c0a:	2211      	movs	r2, #17
    7c0c:	2101      	movs	r1, #1
    7c0e:	481d      	ldr	r0, [pc, #116]	; (7c84 <_ext_irq_init+0x100>)
    7c10:	4b29      	ldr	r3, [pc, #164]	; (7cb8 <_ext_irq_init+0x134>)
    7c12:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    7c14:	481b      	ldr	r0, [pc, #108]	; (7c84 <_ext_irq_init+0x100>)
    7c16:	4b29      	ldr	r3, [pc, #164]	; (7cbc <_ext_irq_init+0x138>)
    7c18:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    7c1a:	200c      	movs	r0, #12
    7c1c:	4b28      	ldr	r3, [pc, #160]	; (7cc0 <_ext_irq_init+0x13c>)
    7c1e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    7c20:	200c      	movs	r0, #12
    7c22:	4b28      	ldr	r3, [pc, #160]	; (7cc4 <_ext_irq_init+0x140>)
    7c24:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    7c26:	200c      	movs	r0, #12
    7c28:	4b27      	ldr	r3, [pc, #156]	; (7cc8 <_ext_irq_init+0x144>)
    7c2a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    7c2c:	2010      	movs	r0, #16
    7c2e:	4b24      	ldr	r3, [pc, #144]	; (7cc0 <_ext_irq_init+0x13c>)
    7c30:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    7c32:	2010      	movs	r0, #16
    7c34:	4b23      	ldr	r3, [pc, #140]	; (7cc4 <_ext_irq_init+0x140>)
    7c36:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    7c38:	2010      	movs	r0, #16
    7c3a:	4b23      	ldr	r3, [pc, #140]	; (7cc8 <_ext_irq_init+0x144>)
    7c3c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    7c3e:	2011      	movs	r0, #17
    7c40:	4b1f      	ldr	r3, [pc, #124]	; (7cc0 <_ext_irq_init+0x13c>)
    7c42:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    7c44:	2011      	movs	r0, #17
    7c46:	4b1f      	ldr	r3, [pc, #124]	; (7cc4 <_ext_irq_init+0x140>)
    7c48:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    7c4a:	2011      	movs	r0, #17
    7c4c:	4b1e      	ldr	r3, [pc, #120]	; (7cc8 <_ext_irq_init+0x144>)
    7c4e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    7c50:	2012      	movs	r0, #18
    7c52:	4b1b      	ldr	r3, [pc, #108]	; (7cc0 <_ext_irq_init+0x13c>)
    7c54:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    7c56:	2012      	movs	r0, #18
    7c58:	4b1a      	ldr	r3, [pc, #104]	; (7cc4 <_ext_irq_init+0x140>)
    7c5a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    7c5c:	2012      	movs	r0, #18
    7c5e:	4b1a      	ldr	r3, [pc, #104]	; (7cc8 <_ext_irq_init+0x144>)
    7c60:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    7c62:	2013      	movs	r0, #19
    7c64:	4b16      	ldr	r3, [pc, #88]	; (7cc0 <_ext_irq_init+0x13c>)
    7c66:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    7c68:	2013      	movs	r0, #19
    7c6a:	4b16      	ldr	r3, [pc, #88]	; (7cc4 <_ext_irq_init+0x140>)
    7c6c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    7c6e:	2013      	movs	r0, #19
    7c70:	4b15      	ldr	r3, [pc, #84]	; (7cc8 <_ext_irq_init+0x144>)
    7c72:	4798      	blx	r3

	callback = cb;
    7c74:	4a15      	ldr	r2, [pc, #84]	; (7ccc <_ext_irq_init+0x148>)
    7c76:	687b      	ldr	r3, [r7, #4]
    7c78:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    7c7a:	2300      	movs	r3, #0
}
    7c7c:	4618      	mov	r0, r3
    7c7e:	3708      	adds	r7, #8
    7c80:	46bd      	mov	sp, r7
    7c82:	bd80      	pop	{r7, pc}
    7c84:	40002800 	.word	0x40002800
    7c88:	00007945 	.word	0x00007945
    7c8c:	00007a75 	.word	0x00007a75
    7c90:	00007a05 	.word	0x00007a05
    7c94:	00007921 	.word	0x00007921
    7c98:	00007aa5 	.word	0x00007aa5
    7c9c:	00007a31 	.word	0x00007a31
    7ca0:	00007acd 	.word	0x00007acd
    7ca4:	00007aeb 	.word	0x00007aeb
    7ca8:	00007b07 	.word	0x00007b07
    7cac:	00007b4b 	.word	0x00007b4b
    7cb0:	00007b67 	.word	0x00007b67
    7cb4:	00990003 	.word	0x00990003
    7cb8:	00007b23 	.word	0x00007b23
    7cbc:	000079d9 	.word	0x000079d9
    7cc0:	000078a1 	.word	0x000078a1
    7cc4:	000078e5 	.word	0x000078e5
    7cc8:	00007865 	.word	0x00007865
    7ccc:	20003574 	.word	0x20003574

00007cd0 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    7cd0:	b580      	push	{r7, lr}
    7cd2:	b084      	sub	sp, #16
    7cd4:	af00      	add	r7, sp, #0
    7cd6:	6078      	str	r0, [r7, #4]
    7cd8:	460b      	mov	r3, r1
    7cda:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    7cdc:	23ff      	movs	r3, #255	; 0xff
    7cde:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    7ce0:	2300      	movs	r3, #0
    7ce2:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    7ce4:	e010      	b.n	7d08 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    7ce6:	7bbb      	ldrb	r3, [r7, #14]
    7ce8:	4a1c      	ldr	r2, [pc, #112]	; (7d5c <_ext_irq_enable+0x8c>)
    7cea:	00db      	lsls	r3, r3, #3
    7cec:	4413      	add	r3, r2
    7cee:	685a      	ldr	r2, [r3, #4]
    7cf0:	687b      	ldr	r3, [r7, #4]
    7cf2:	429a      	cmp	r2, r3
    7cf4:	d105      	bne.n	7d02 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    7cf6:	7bbb      	ldrb	r3, [r7, #14]
    7cf8:	4a18      	ldr	r2, [pc, #96]	; (7d5c <_ext_irq_enable+0x8c>)
    7cfa:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    7cfe:	73fb      	strb	r3, [r7, #15]
			break;
    7d00:	e005      	b.n	7d0e <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    7d02:	7bbb      	ldrb	r3, [r7, #14]
    7d04:	3301      	adds	r3, #1
    7d06:	73bb      	strb	r3, [r7, #14]
    7d08:	7bbb      	ldrb	r3, [r7, #14]
    7d0a:	2b04      	cmp	r3, #4
    7d0c:	d9eb      	bls.n	7ce6 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    7d0e:	7bfb      	ldrb	r3, [r7, #15]
    7d10:	2bff      	cmp	r3, #255	; 0xff
    7d12:	d102      	bne.n	7d1a <_ext_irq_enable+0x4a>
		return -1;
    7d14:	f04f 33ff 	mov.w	r3, #4294967295
    7d18:	e01c      	b.n	7d54 <_ext_irq_enable+0x84>
	}

	if (enable) {
    7d1a:	78fb      	ldrb	r3, [r7, #3]
    7d1c:	2b00      	cmp	r3, #0
    7d1e:	d008      	beq.n	7d32 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    7d20:	7bfb      	ldrb	r3, [r7, #15]
    7d22:	2201      	movs	r2, #1
    7d24:	fa02 f303 	lsl.w	r3, r2, r3
    7d28:	4619      	mov	r1, r3
    7d2a:	480d      	ldr	r0, [pc, #52]	; (7d60 <_ext_irq_enable+0x90>)
    7d2c:	4b0d      	ldr	r3, [pc, #52]	; (7d64 <_ext_irq_enable+0x94>)
    7d2e:	4798      	blx	r3
    7d30:	e00f      	b.n	7d52 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    7d32:	7bfb      	ldrb	r3, [r7, #15]
    7d34:	2201      	movs	r2, #1
    7d36:	fa02 f303 	lsl.w	r3, r2, r3
    7d3a:	4619      	mov	r1, r3
    7d3c:	4808      	ldr	r0, [pc, #32]	; (7d60 <_ext_irq_enable+0x90>)
    7d3e:	4b0a      	ldr	r3, [pc, #40]	; (7d68 <_ext_irq_enable+0x98>)
    7d40:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    7d42:	7bfb      	ldrb	r3, [r7, #15]
    7d44:	2201      	movs	r2, #1
    7d46:	fa02 f303 	lsl.w	r3, r2, r3
    7d4a:	4619      	mov	r1, r3
    7d4c:	4804      	ldr	r0, [pc, #16]	; (7d60 <_ext_irq_enable+0x90>)
    7d4e:	4b07      	ldr	r3, [pc, #28]	; (7d6c <_ext_irq_enable+0x9c>)
    7d50:	4798      	blx	r3
	}

	return ERR_NONE;
    7d52:	2300      	movs	r3, #0
}
    7d54:	4618      	mov	r0, r3
    7d56:	3710      	adds	r7, #16
    7d58:	46bd      	mov	sp, r7
    7d5a:	bd80      	pop	{r7, pc}
    7d5c:	0001d084 	.word	0x0001d084
    7d60:	40002800 	.word	0x40002800
    7d64:	000079a1 	.word	0x000079a1
    7d68:	000079bd 	.word	0x000079bd
    7d6c:	00007985 	.word	0x00007985

00007d70 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    7d70:	b580      	push	{r7, lr}
    7d72:	b084      	sub	sp, #16
    7d74:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    7d76:	4841      	ldr	r0, [pc, #260]	; (7e7c <_ext_irq_handler+0x10c>)
    7d78:	4b41      	ldr	r3, [pc, #260]	; (7e80 <_ext_irq_handler+0x110>)
    7d7a:	4798      	blx	r3
    7d7c:	4603      	mov	r3, r0
    7d7e:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    7d80:	f04f 33ff 	mov.w	r3, #4294967295
    7d84:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    7d86:	683b      	ldr	r3, [r7, #0]
    7d88:	4619      	mov	r1, r3
    7d8a:	483c      	ldr	r0, [pc, #240]	; (7e7c <_ext_irq_handler+0x10c>)
    7d8c:	4b3d      	ldr	r3, [pc, #244]	; (7e84 <_ext_irq_handler+0x114>)
    7d8e:	4798      	blx	r3

	ASSERT(callback);
    7d90:	4b3d      	ldr	r3, [pc, #244]	; (7e88 <_ext_irq_handler+0x118>)
    7d92:	681b      	ldr	r3, [r3, #0]
    7d94:	2b00      	cmp	r3, #0
    7d96:	bf14      	ite	ne
    7d98:	2301      	movne	r3, #1
    7d9a:	2300      	moveq	r3, #0
    7d9c:	b2db      	uxtb	r3, r3
    7d9e:	22f8      	movs	r2, #248	; 0xf8
    7da0:	493a      	ldr	r1, [pc, #232]	; (7e8c <_ext_irq_handler+0x11c>)
    7da2:	4618      	mov	r0, r3
    7da4:	4b3a      	ldr	r3, [pc, #232]	; (7e90 <_ext_irq_handler+0x120>)
    7da6:	4798      	blx	r3

	while (flags) {
    7da8:	e060      	b.n	7e6c <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    7daa:	683b      	ldr	r3, [r7, #0]
    7dac:	4618      	mov	r0, r3
    7dae:	4b39      	ldr	r3, [pc, #228]	; (7e94 <_ext_irq_handler+0x124>)
    7db0:	4798      	blx	r3
    7db2:	4603      	mov	r3, r0
    7db4:	b2db      	uxtb	r3, r3
    7db6:	3b01      	subs	r3, #1
    7db8:	b2db      	uxtb	r3, r3
    7dba:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    7dbc:	e047      	b.n	7e4e <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    7dbe:	2300      	movs	r3, #0
    7dc0:	71fb      	strb	r3, [r7, #7]
    7dc2:	2305      	movs	r3, #5
    7dc4:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    7dc6:	e024      	b.n	7e12 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    7dc8:	79ba      	ldrb	r2, [r7, #6]
    7dca:	79fb      	ldrb	r3, [r7, #7]
    7dcc:	4413      	add	r3, r2
    7dce:	105b      	asrs	r3, r3, #1
    7dd0:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    7dd2:	797b      	ldrb	r3, [r7, #5]
    7dd4:	4a30      	ldr	r2, [pc, #192]	; (7e98 <_ext_irq_handler+0x128>)
    7dd6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    7dda:	461a      	mov	r2, r3
    7ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7de0:	429a      	cmp	r2, r3
    7de2:	d106      	bne.n	7df2 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    7de4:	797b      	ldrb	r3, [r7, #5]
    7de6:	4a2c      	ldr	r2, [pc, #176]	; (7e98 <_ext_irq_handler+0x128>)
    7de8:	00db      	lsls	r3, r3, #3
    7dea:	4413      	add	r3, r2
    7dec:	685b      	ldr	r3, [r3, #4]
    7dee:	60bb      	str	r3, [r7, #8]
					break;
    7df0:	e013      	b.n	7e1a <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    7df2:	797b      	ldrb	r3, [r7, #5]
    7df4:	4a28      	ldr	r2, [pc, #160]	; (7e98 <_ext_irq_handler+0x128>)
    7df6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    7dfa:	461a      	mov	r2, r3
    7dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7e00:	429a      	cmp	r2, r3
    7e02:	da03      	bge.n	7e0c <_ext_irq_handler+0x9c>
					lower = middle + 1;
    7e04:	797b      	ldrb	r3, [r7, #5]
    7e06:	3301      	adds	r3, #1
    7e08:	71fb      	strb	r3, [r7, #7]
    7e0a:	e002      	b.n	7e12 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    7e0c:	797b      	ldrb	r3, [r7, #5]
    7e0e:	3b01      	subs	r3, #1
    7e10:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    7e12:	79ba      	ldrb	r2, [r7, #6]
    7e14:	79fb      	ldrb	r3, [r7, #7]
    7e16:	429a      	cmp	r2, r3
    7e18:	d2d6      	bcs.n	7dc8 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    7e1a:	68bb      	ldr	r3, [r7, #8]
    7e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
    7e20:	d003      	beq.n	7e2a <_ext_irq_handler+0xba>
				callback(pin);
    7e22:	4b19      	ldr	r3, [pc, #100]	; (7e88 <_ext_irq_handler+0x118>)
    7e24:	681b      	ldr	r3, [r3, #0]
    7e26:	68b8      	ldr	r0, [r7, #8]
    7e28:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    7e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7e2e:	2201      	movs	r2, #1
    7e30:	fa02 f303 	lsl.w	r3, r2, r3
    7e34:	43da      	mvns	r2, r3
    7e36:	683b      	ldr	r3, [r7, #0]
    7e38:	4013      	ands	r3, r2
    7e3a:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    7e3c:	683b      	ldr	r3, [r7, #0]
    7e3e:	4618      	mov	r0, r3
    7e40:	4b14      	ldr	r3, [pc, #80]	; (7e94 <_ext_irq_handler+0x124>)
    7e42:	4798      	blx	r3
    7e44:	4603      	mov	r3, r0
    7e46:	b2db      	uxtb	r3, r3
    7e48:	3b01      	subs	r3, #1
    7e4a:	b2db      	uxtb	r3, r3
    7e4c:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    7e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7e52:	f1b3 3fff 	cmp.w	r3, #4294967295
    7e56:	d1b2      	bne.n	7dbe <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    7e58:	4808      	ldr	r0, [pc, #32]	; (7e7c <_ext_irq_handler+0x10c>)
    7e5a:	4b09      	ldr	r3, [pc, #36]	; (7e80 <_ext_irq_handler+0x110>)
    7e5c:	4798      	blx	r3
    7e5e:	4603      	mov	r3, r0
    7e60:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    7e62:	683b      	ldr	r3, [r7, #0]
    7e64:	4619      	mov	r1, r3
    7e66:	4805      	ldr	r0, [pc, #20]	; (7e7c <_ext_irq_handler+0x10c>)
    7e68:	4b06      	ldr	r3, [pc, #24]	; (7e84 <_ext_irq_handler+0x114>)
    7e6a:	4798      	blx	r3
	while (flags) {
    7e6c:	683b      	ldr	r3, [r7, #0]
    7e6e:	2b00      	cmp	r3, #0
    7e70:	d19b      	bne.n	7daa <_ext_irq_handler+0x3a>
	}
}
    7e72:	bf00      	nop
    7e74:	3710      	adds	r7, #16
    7e76:	46bd      	mov	sp, r7
    7e78:	bd80      	pop	{r7, pc}
    7e7a:	bf00      	nop
    7e7c:	40002800 	.word	0x40002800
    7e80:	0000796d 	.word	0x0000796d
    7e84:	00007985 	.word	0x00007985
    7e88:	20003574 	.word	0x20003574
    7e8c:	0001d0ac 	.word	0x0001d0ac
    7e90:	00006991 	.word	0x00006991
    7e94:	000188a5 	.word	0x000188a5
    7e98:	0001d084 	.word	0x0001d084

00007e9c <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    7e9c:	b580      	push	{r7, lr}
    7e9e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7ea0:	4b01      	ldr	r3, [pc, #4]	; (7ea8 <EIC_0_Handler+0xc>)
    7ea2:	4798      	blx	r3
} /**
    7ea4:	bf00      	nop
    7ea6:	bd80      	pop	{r7, pc}
    7ea8:	00007d71 	.word	0x00007d71

00007eac <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    7eac:	b580      	push	{r7, lr}
    7eae:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7eb0:	4b01      	ldr	r3, [pc, #4]	; (7eb8 <EIC_4_Handler+0xc>)
    7eb2:	4798      	blx	r3
} /**
    7eb4:	bf00      	nop
    7eb6:	bd80      	pop	{r7, pc}
    7eb8:	00007d71 	.word	0x00007d71

00007ebc <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    7ebc:	b580      	push	{r7, lr}
    7ebe:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7ec0:	4b01      	ldr	r3, [pc, #4]	; (7ec8 <EIC_5_Handler+0xc>)
    7ec2:	4798      	blx	r3
} /**
    7ec4:	bf00      	nop
    7ec6:	bd80      	pop	{r7, pc}
    7ec8:	00007d71 	.word	0x00007d71

00007ecc <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    7ecc:	b580      	push	{r7, lr}
    7ece:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7ed0:	4b01      	ldr	r3, [pc, #4]	; (7ed8 <EIC_6_Handler+0xc>)
    7ed2:	4798      	blx	r3
} /**
    7ed4:	bf00      	nop
    7ed6:	bd80      	pop	{r7, pc}
    7ed8:	00007d71 	.word	0x00007d71

00007edc <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    7edc:	b580      	push	{r7, lr}
    7ede:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7ee0:	4b01      	ldr	r3, [pc, #4]	; (7ee8 <EIC_7_Handler+0xc>)
    7ee2:	4798      	blx	r3
}
    7ee4:	bf00      	nop
    7ee6:	bd80      	pop	{r7, pc}
    7ee8:	00007d71 	.word	0x00007d71

00007eec <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    7eec:	b480      	push	{r7}
    7eee:	b085      	sub	sp, #20
    7ef0:	af00      	add	r7, sp, #0
    7ef2:	60f8      	str	r0, [r7, #12]
    7ef4:	460b      	mov	r3, r1
    7ef6:	607a      	str	r2, [r7, #4]
    7ef8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    7efa:	7afa      	ldrb	r2, [r7, #11]
    7efc:	68fb      	ldr	r3, [r7, #12]
    7efe:	3248      	adds	r2, #72	; 0x48
    7f00:	6879      	ldr	r1, [r7, #4]
    7f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    7f06:	bf00      	nop
    7f08:	3714      	adds	r7, #20
    7f0a:	46bd      	mov	sp, r7
    7f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f10:	4770      	bx	lr

00007f12 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    7f12:	b480      	push	{r7}
    7f14:	b083      	sub	sp, #12
    7f16:	af00      	add	r7, sp, #0
    7f18:	6078      	str	r0, [r7, #4]
    7f1a:	460b      	mov	r3, r1
    7f1c:	70fb      	strb	r3, [r7, #3]
    7f1e:	4613      	mov	r3, r2
    7f20:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    7f22:	78fb      	ldrb	r3, [r7, #3]
    7f24:	687a      	ldr	r2, [r7, #4]
    7f26:	3304      	adds	r3, #4
    7f28:	00db      	lsls	r3, r3, #3
    7f2a:	4413      	add	r3, r2
    7f2c:	78ba      	ldrb	r2, [r7, #2]
    7f2e:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    7f30:	78fb      	ldrb	r3, [r7, #3]
    7f32:	78ba      	ldrb	r2, [r7, #2]
    7f34:	43d2      	mvns	r2, r2
    7f36:	b2d1      	uxtb	r1, r2
    7f38:	687a      	ldr	r2, [r7, #4]
    7f3a:	3304      	adds	r3, #4
    7f3c:	00db      	lsls	r3, r3, #3
    7f3e:	4413      	add	r3, r2
    7f40:	460a      	mov	r2, r1
    7f42:	711a      	strb	r2, [r3, #4]
}
    7f44:	bf00      	nop
    7f46:	370c      	adds	r7, #12
    7f48:	46bd      	mov	sp, r7
    7f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f4e:	4770      	bx	lr

00007f50 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    7f50:	b480      	push	{r7}
    7f52:	b085      	sub	sp, #20
    7f54:	af00      	add	r7, sp, #0
    7f56:	60f8      	str	r0, [r7, #12]
    7f58:	460b      	mov	r3, r1
    7f5a:	607a      	str	r2, [r7, #4]
    7f5c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    7f5e:	7afa      	ldrb	r2, [r7, #11]
    7f60:	68fb      	ldr	r3, [r7, #12]
    7f62:	3204      	adds	r2, #4
    7f64:	6879      	ldr	r1, [r7, #4]
    7f66:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    7f6a:	bf00      	nop
    7f6c:	3714      	adds	r7, #20
    7f6e:	46bd      	mov	sp, r7
    7f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f74:	4770      	bx	lr
	...

00007f78 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    7f78:	b580      	push	{r7, lr}
    7f7a:	b082      	sub	sp, #8
    7f7c:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    7f7e:	2300      	movs	r3, #0
    7f80:	71fb      	strb	r3, [r7, #7]
    7f82:	e00b      	b.n	7f9c <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    7f84:	79fb      	ldrb	r3, [r7, #7]
    7f86:	4a18      	ldr	r2, [pc, #96]	; (7fe8 <_event_system_init+0x70>)
    7f88:	5cd3      	ldrb	r3, [r2, r3]
    7f8a:	461a      	mov	r2, r3
    7f8c:	79fb      	ldrb	r3, [r7, #7]
    7f8e:	4619      	mov	r1, r3
    7f90:	4816      	ldr	r0, [pc, #88]	; (7fec <_event_system_init+0x74>)
    7f92:	4b17      	ldr	r3, [pc, #92]	; (7ff0 <_event_system_init+0x78>)
    7f94:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    7f96:	79fb      	ldrb	r3, [r7, #7]
    7f98:	3301      	adds	r3, #1
    7f9a:	71fb      	strb	r3, [r7, #7]
    7f9c:	79fb      	ldrb	r3, [r7, #7]
    7f9e:	2b42      	cmp	r3, #66	; 0x42
    7fa0:	d9f0      	bls.n	7f84 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    7fa2:	2300      	movs	r3, #0
    7fa4:	71fb      	strb	r3, [r7, #7]
    7fa6:	e016      	b.n	7fd6 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    7fa8:	79fb      	ldrb	r3, [r7, #7]
    7faa:	4a12      	ldr	r2, [pc, #72]	; (7ff4 <_event_system_init+0x7c>)
    7fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    7fb0:	461a      	mov	r2, r3
    7fb2:	79fb      	ldrb	r3, [r7, #7]
    7fb4:	4619      	mov	r1, r3
    7fb6:	480d      	ldr	r0, [pc, #52]	; (7fec <_event_system_init+0x74>)
    7fb8:	4b0f      	ldr	r3, [pc, #60]	; (7ff8 <_event_system_init+0x80>)
    7fba:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    7fbc:	79fb      	ldrb	r3, [r7, #7]
    7fbe:	4a0f      	ldr	r2, [pc, #60]	; (7ffc <_event_system_init+0x84>)
    7fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fc4:	b2da      	uxtb	r2, r3
    7fc6:	79fb      	ldrb	r3, [r7, #7]
    7fc8:	4619      	mov	r1, r3
    7fca:	4808      	ldr	r0, [pc, #32]	; (7fec <_event_system_init+0x74>)
    7fcc:	4b0c      	ldr	r3, [pc, #48]	; (8000 <_event_system_init+0x88>)
    7fce:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    7fd0:	79fb      	ldrb	r3, [r7, #7]
    7fd2:	3301      	adds	r3, #1
    7fd4:	71fb      	strb	r3, [r7, #7]
    7fd6:	79fb      	ldrb	r3, [r7, #7]
    7fd8:	2b1f      	cmp	r3, #31
    7fda:	d9e5      	bls.n	7fa8 <_event_system_init+0x30>
	}

	return ERR_NONE;
    7fdc:	2300      	movs	r3, #0
}
    7fde:	4618      	mov	r0, r3
    7fe0:	3708      	adds	r7, #8
    7fe2:	46bd      	mov	sp, r7
    7fe4:	bd80      	pop	{r7, pc}
    7fe6:	bf00      	nop
    7fe8:	0001d0c4 	.word	0x0001d0c4
    7fec:	4100e000 	.word	0x4100e000
    7ff0:	00007eed 	.word	0x00007eed
    7ff4:	0001d108 	.word	0x0001d108
    7ff8:	00007f51 	.word	0x00007f51
    7ffc:	0001d148 	.word	0x0001d148
    8000:	00007f13 	.word	0x00007f13

00008004 <hri_gclk_wait_for_sync>:
{
    8004:	b480      	push	{r7}
    8006:	b083      	sub	sp, #12
    8008:	af00      	add	r7, sp, #0
    800a:	6078      	str	r0, [r7, #4]
    800c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    800e:	bf00      	nop
    8010:	687b      	ldr	r3, [r7, #4]
    8012:	685a      	ldr	r2, [r3, #4]
    8014:	683b      	ldr	r3, [r7, #0]
    8016:	4013      	ands	r3, r2
    8018:	2b00      	cmp	r3, #0
    801a:	d1f9      	bne.n	8010 <hri_gclk_wait_for_sync+0xc>
}
    801c:	bf00      	nop
    801e:	370c      	adds	r7, #12
    8020:	46bd      	mov	sp, r7
    8022:	f85d 7b04 	ldr.w	r7, [sp], #4
    8026:	4770      	bx	lr

00008028 <hri_gclk_write_GENCTRL_reg>:
{
    8028:	b580      	push	{r7, lr}
    802a:	b084      	sub	sp, #16
    802c:	af00      	add	r7, sp, #0
    802e:	60f8      	str	r0, [r7, #12]
    8030:	460b      	mov	r3, r1
    8032:	607a      	str	r2, [r7, #4]
    8034:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    8036:	7afa      	ldrb	r2, [r7, #11]
    8038:	68fb      	ldr	r3, [r7, #12]
    803a:	3208      	adds	r2, #8
    803c:	6879      	ldr	r1, [r7, #4]
    803e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    8042:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    8046:	68f8      	ldr	r0, [r7, #12]
    8048:	4b02      	ldr	r3, [pc, #8]	; (8054 <hri_gclk_write_GENCTRL_reg+0x2c>)
    804a:	4798      	blx	r3
}
    804c:	bf00      	nop
    804e:	3710      	adds	r7, #16
    8050:	46bd      	mov	sp, r7
    8052:	bd80      	pop	{r7, pc}
    8054:	00008005 	.word	0x00008005

00008058 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    8058:	b580      	push	{r7, lr}
    805a:	b082      	sub	sp, #8
    805c:	af00      	add	r7, sp, #0
    805e:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    8060:	687b      	ldr	r3, [r7, #4]
    8062:	f003 0301 	and.w	r3, r3, #1
    8066:	2b00      	cmp	r3, #0
    8068:	d004      	beq.n	8074 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    806a:	4a36      	ldr	r2, [pc, #216]	; (8144 <_gclk_init_generators_by_fref+0xec>)
    806c:	2100      	movs	r1, #0
    806e:	4836      	ldr	r0, [pc, #216]	; (8148 <_gclk_init_generators_by_fref+0xf0>)
    8070:	4b36      	ldr	r3, [pc, #216]	; (814c <_gclk_init_generators_by_fref+0xf4>)
    8072:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    8074:	687b      	ldr	r3, [r7, #4]
    8076:	f003 0302 	and.w	r3, r3, #2
    807a:	2b00      	cmp	r3, #0
    807c:	d004      	beq.n	8088 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    807e:	4a34      	ldr	r2, [pc, #208]	; (8150 <_gclk_init_generators_by_fref+0xf8>)
    8080:	2101      	movs	r1, #1
    8082:	4831      	ldr	r0, [pc, #196]	; (8148 <_gclk_init_generators_by_fref+0xf0>)
    8084:	4b31      	ldr	r3, [pc, #196]	; (814c <_gclk_init_generators_by_fref+0xf4>)
    8086:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    8088:	687b      	ldr	r3, [r7, #4]
    808a:	f003 0304 	and.w	r3, r3, #4
    808e:	2b00      	cmp	r3, #0
    8090:	d004      	beq.n	809c <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    8092:	4a30      	ldr	r2, [pc, #192]	; (8154 <_gclk_init_generators_by_fref+0xfc>)
    8094:	2102      	movs	r1, #2
    8096:	482c      	ldr	r0, [pc, #176]	; (8148 <_gclk_init_generators_by_fref+0xf0>)
    8098:	4b2c      	ldr	r3, [pc, #176]	; (814c <_gclk_init_generators_by_fref+0xf4>)
    809a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    809c:	687b      	ldr	r3, [r7, #4]
    809e:	f003 0308 	and.w	r3, r3, #8
    80a2:	2b00      	cmp	r3, #0
    80a4:	d004      	beq.n	80b0 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    80a6:	4a2c      	ldr	r2, [pc, #176]	; (8158 <_gclk_init_generators_by_fref+0x100>)
    80a8:	2103      	movs	r1, #3
    80aa:	4827      	ldr	r0, [pc, #156]	; (8148 <_gclk_init_generators_by_fref+0xf0>)
    80ac:	4b27      	ldr	r3, [pc, #156]	; (814c <_gclk_init_generators_by_fref+0xf4>)
    80ae:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    80b0:	687b      	ldr	r3, [r7, #4]
    80b2:	f003 0310 	and.w	r3, r3, #16
    80b6:	2b00      	cmp	r3, #0
    80b8:	d004      	beq.n	80c4 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    80ba:	4a28      	ldr	r2, [pc, #160]	; (815c <_gclk_init_generators_by_fref+0x104>)
    80bc:	2104      	movs	r1, #4
    80be:	4822      	ldr	r0, [pc, #136]	; (8148 <_gclk_init_generators_by_fref+0xf0>)
    80c0:	4b22      	ldr	r3, [pc, #136]	; (814c <_gclk_init_generators_by_fref+0xf4>)
    80c2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    80c4:	687b      	ldr	r3, [r7, #4]
    80c6:	f003 0320 	and.w	r3, r3, #32
    80ca:	2b00      	cmp	r3, #0
    80cc:	d004      	beq.n	80d8 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    80ce:	4a24      	ldr	r2, [pc, #144]	; (8160 <_gclk_init_generators_by_fref+0x108>)
    80d0:	2105      	movs	r1, #5
    80d2:	481d      	ldr	r0, [pc, #116]	; (8148 <_gclk_init_generators_by_fref+0xf0>)
    80d4:	4b1d      	ldr	r3, [pc, #116]	; (814c <_gclk_init_generators_by_fref+0xf4>)
    80d6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    80d8:	687b      	ldr	r3, [r7, #4]
    80da:	f003 0340 	and.w	r3, r3, #64	; 0x40
    80de:	2b00      	cmp	r3, #0
    80e0:	d004      	beq.n	80ec <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    80e2:	4a20      	ldr	r2, [pc, #128]	; (8164 <_gclk_init_generators_by_fref+0x10c>)
    80e4:	2106      	movs	r1, #6
    80e6:	4818      	ldr	r0, [pc, #96]	; (8148 <_gclk_init_generators_by_fref+0xf0>)
    80e8:	4b18      	ldr	r3, [pc, #96]	; (814c <_gclk_init_generators_by_fref+0xf4>)
    80ea:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    80ec:	687b      	ldr	r3, [r7, #4]
    80ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    80f2:	2b00      	cmp	r3, #0
    80f4:	d004      	beq.n	8100 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    80f6:	4a1c      	ldr	r2, [pc, #112]	; (8168 <_gclk_init_generators_by_fref+0x110>)
    80f8:	2107      	movs	r1, #7
    80fa:	4813      	ldr	r0, [pc, #76]	; (8148 <_gclk_init_generators_by_fref+0xf0>)
    80fc:	4b13      	ldr	r3, [pc, #76]	; (814c <_gclk_init_generators_by_fref+0xf4>)
    80fe:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    8100:	687b      	ldr	r3, [r7, #4]
    8102:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8106:	2b00      	cmp	r3, #0
    8108:	d004      	beq.n	8114 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    810a:	4a18      	ldr	r2, [pc, #96]	; (816c <_gclk_init_generators_by_fref+0x114>)
    810c:	2108      	movs	r1, #8
    810e:	480e      	ldr	r0, [pc, #56]	; (8148 <_gclk_init_generators_by_fref+0xf0>)
    8110:	4b0e      	ldr	r3, [pc, #56]	; (814c <_gclk_init_generators_by_fref+0xf4>)
    8112:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    8114:	687b      	ldr	r3, [r7, #4]
    8116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    811a:	2b00      	cmp	r3, #0
    811c:	d004      	beq.n	8128 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    811e:	4a14      	ldr	r2, [pc, #80]	; (8170 <_gclk_init_generators_by_fref+0x118>)
    8120:	210a      	movs	r1, #10
    8122:	4809      	ldr	r0, [pc, #36]	; (8148 <_gclk_init_generators_by_fref+0xf0>)
    8124:	4b09      	ldr	r3, [pc, #36]	; (814c <_gclk_init_generators_by_fref+0xf4>)
    8126:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    8128:	687b      	ldr	r3, [r7, #4]
    812a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    812e:	2b00      	cmp	r3, #0
    8130:	d004      	beq.n	813c <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    8132:	4a10      	ldr	r2, [pc, #64]	; (8174 <_gclk_init_generators_by_fref+0x11c>)
    8134:	210b      	movs	r1, #11
    8136:	4804      	ldr	r0, [pc, #16]	; (8148 <_gclk_init_generators_by_fref+0xf0>)
    8138:	4b04      	ldr	r3, [pc, #16]	; (814c <_gclk_init_generators_by_fref+0xf4>)
    813a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    813c:	bf00      	nop
    813e:	3708      	adds	r7, #8
    8140:	46bd      	mov	sp, r7
    8142:	bd80      	pop	{r7, pc}
    8144:	00010107 	.word	0x00010107
    8148:	40001c00 	.word	0x40001c00
    814c:	00008029 	.word	0x00008029
    8150:	00010907 	.word	0x00010907
    8154:	00010906 	.word	0x00010906
    8158:	00020908 	.word	0x00020908
    815c:	00010901 	.word	0x00010901
    8160:	00062901 	.word	0x00062901
    8164:	000c2901 	.word	0x000c2901
    8168:	00082908 	.word	0x00082908
    816c:	00032901 	.word	0x00032901
    8170:	00010905 	.word	0x00010905
    8174:	00041905 	.word	0x00041905

00008178 <hri_mclk_write_CPUDIV_reg>:
{
    8178:	b480      	push	{r7}
    817a:	b083      	sub	sp, #12
    817c:	af00      	add	r7, sp, #0
    817e:	6078      	str	r0, [r7, #4]
    8180:	460b      	mov	r3, r1
    8182:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    8184:	687b      	ldr	r3, [r7, #4]
    8186:	78fa      	ldrb	r2, [r7, #3]
    8188:	715a      	strb	r2, [r3, #5]
}
    818a:	bf00      	nop
    818c:	370c      	adds	r7, #12
    818e:	46bd      	mov	sp, r7
    8190:	f85d 7b04 	ldr.w	r7, [sp], #4
    8194:	4770      	bx	lr
	...

00008198 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    8198:	b580      	push	{r7, lr}
    819a:	b082      	sub	sp, #8
    819c:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    819e:	4b05      	ldr	r3, [pc, #20]	; (81b4 <_mclk_init+0x1c>)
    81a0:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    81a2:	2101      	movs	r1, #1
    81a4:	6878      	ldr	r0, [r7, #4]
    81a6:	4b04      	ldr	r3, [pc, #16]	; (81b8 <_mclk_init+0x20>)
    81a8:	4798      	blx	r3
}
    81aa:	bf00      	nop
    81ac:	3708      	adds	r7, #8
    81ae:	46bd      	mov	sp, r7
    81b0:	bd80      	pop	{r7, pc}
    81b2:	bf00      	nop
    81b4:	40000800 	.word	0x40000800
    81b8:	00008179 	.word	0x00008179

000081bc <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    81bc:	b480      	push	{r7}
    81be:	b083      	sub	sp, #12
    81c0:	af00      	add	r7, sp, #0
    81c2:	6078      	str	r0, [r7, #4]
    81c4:	460b      	mov	r3, r1
    81c6:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    81c8:	687b      	ldr	r3, [r7, #4]
    81ca:	78fa      	ldrb	r2, [r7, #3]
    81cc:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    81ce:	bf00      	nop
    81d0:	370c      	adds	r7, #12
    81d2:	46bd      	mov	sp, r7
    81d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    81d8:	4770      	bx	lr

000081da <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    81da:	b480      	push	{r7}
    81dc:	b083      	sub	sp, #12
    81de:	af00      	add	r7, sp, #0
    81e0:	6078      	str	r0, [r7, #4]
    81e2:	460b      	mov	r3, r1
    81e4:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    81e6:	687b      	ldr	r3, [r7, #4]
    81e8:	887a      	ldrh	r2, [r7, #2]
    81ea:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    81ec:	bf00      	nop
    81ee:	370c      	adds	r7, #12
    81f0:	46bd      	mov	sp, r7
    81f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    81f6:	4770      	bx	lr

000081f8 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    81f8:	b480      	push	{r7}
    81fa:	b083      	sub	sp, #12
    81fc:	af00      	add	r7, sp, #0
    81fe:	6078      	str	r0, [r7, #4]
    8200:	460b      	mov	r3, r1
    8202:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    8204:	687b      	ldr	r3, [r7, #4]
    8206:	78fa      	ldrb	r2, [r7, #3]
    8208:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    820a:	bf00      	nop
    820c:	370c      	adds	r7, #12
    820e:	46bd      	mov	sp, r7
    8210:	f85d 7b04 	ldr.w	r7, [sp], #4
    8214:	4770      	bx	lr

00008216 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    8216:	b480      	push	{r7}
    8218:	b083      	sub	sp, #12
    821a:	af00      	add	r7, sp, #0
    821c:	6078      	str	r0, [r7, #4]
    821e:	460b      	mov	r3, r1
    8220:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    8222:	687b      	ldr	r3, [r7, #4]
    8224:	78fa      	ldrb	r2, [r7, #3]
    8226:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    8228:	bf00      	nop
    822a:	370c      	adds	r7, #12
    822c:	46bd      	mov	sp, r7
    822e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8232:	4770      	bx	lr

00008234 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    8234:	b480      	push	{r7}
    8236:	b085      	sub	sp, #20
    8238:	af00      	add	r7, sp, #0
    823a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    823c:	687b      	ldr	r3, [r7, #4]
    823e:	69db      	ldr	r3, [r3, #28]
    8240:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    8242:	68fb      	ldr	r3, [r7, #12]
    8244:	0a1b      	lsrs	r3, r3, #8
    8246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    824a:	60fb      	str	r3, [r7, #12]
	return tmp;
    824c:	68fb      	ldr	r3, [r7, #12]
}
    824e:	4618      	mov	r0, r3
    8250:	3714      	adds	r7, #20
    8252:	46bd      	mov	sp, r7
    8254:	f85d 7b04 	ldr.w	r7, [sp], #4
    8258:	4770      	bx	lr

0000825a <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    825a:	b480      	push	{r7}
    825c:	b083      	sub	sp, #12
    825e:	af00      	add	r7, sp, #0
    8260:	6078      	str	r0, [r7, #4]
    8262:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    8264:	687b      	ldr	r3, [r7, #4]
    8266:	683a      	ldr	r2, [r7, #0]
    8268:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    826a:	bf00      	nop
    826c:	370c      	adds	r7, #12
    826e:	46bd      	mov	sp, r7
    8270:	f85d 7b04 	ldr.w	r7, [sp], #4
    8274:	4770      	bx	lr
	...

00008278 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    8278:	b580      	push	{r7, lr}
    827a:	b082      	sub	sp, #8
    827c:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    827e:	4b13      	ldr	r3, [pc, #76]	; (82cc <_osc32kctrl_init_sources+0x54>)
    8280:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    8282:	2300      	movs	r3, #0
    8284:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    8286:	f242 018e 	movw	r1, #8334	; 0x208e
    828a:	6878      	ldr	r0, [r7, #4]
    828c:	4b10      	ldr	r3, [pc, #64]	; (82d0 <_osc32kctrl_init_sources+0x58>)
    828e:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    8290:	2100      	movs	r1, #0
    8292:	6878      	ldr	r0, [r7, #4]
    8294:	4b0f      	ldr	r3, [pc, #60]	; (82d4 <_osc32kctrl_init_sources+0x5c>)
    8296:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    8298:	2100      	movs	r1, #0
    829a:	6878      	ldr	r0, [r7, #4]
    829c:	4b0e      	ldr	r3, [pc, #56]	; (82d8 <_osc32kctrl_init_sources+0x60>)
    829e:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    82a0:	6878      	ldr	r0, [r7, #4]
    82a2:	4b0e      	ldr	r3, [pc, #56]	; (82dc <_osc32kctrl_init_sources+0x64>)
    82a4:	4798      	blx	r3
    82a6:	4603      	mov	r3, r0
    82a8:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    82aa:	887b      	ldrh	r3, [r7, #2]
    82ac:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    82ae:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    82b2:	4619      	mov	r1, r3
    82b4:	6878      	ldr	r0, [r7, #4]
    82b6:	4b0a      	ldr	r3, [pc, #40]	; (82e0 <_osc32kctrl_init_sources+0x68>)
    82b8:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    82ba:	2100      	movs	r1, #0
    82bc:	6878      	ldr	r0, [r7, #4]
    82be:	4b09      	ldr	r3, [pc, #36]	; (82e4 <_osc32kctrl_init_sources+0x6c>)
    82c0:	4798      	blx	r3
	(void)calib;
}
    82c2:	bf00      	nop
    82c4:	3708      	adds	r7, #8
    82c6:	46bd      	mov	sp, r7
    82c8:	bd80      	pop	{r7, pc}
    82ca:	bf00      	nop
    82cc:	40001400 	.word	0x40001400
    82d0:	000081db 	.word	0x000081db
    82d4:	000081f9 	.word	0x000081f9
    82d8:	00008217 	.word	0x00008217
    82dc:	00008235 	.word	0x00008235
    82e0:	0000825b 	.word	0x0000825b
    82e4:	000081bd 	.word	0x000081bd

000082e8 <hri_gclk_wait_for_sync>:
{
    82e8:	b480      	push	{r7}
    82ea:	b083      	sub	sp, #12
    82ec:	af00      	add	r7, sp, #0
    82ee:	6078      	str	r0, [r7, #4]
    82f0:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    82f2:	bf00      	nop
    82f4:	687b      	ldr	r3, [r7, #4]
    82f6:	685a      	ldr	r2, [r3, #4]
    82f8:	683b      	ldr	r3, [r7, #0]
    82fa:	4013      	ands	r3, r2
    82fc:	2b00      	cmp	r3, #0
    82fe:	d1f9      	bne.n	82f4 <hri_gclk_wait_for_sync+0xc>
}
    8300:	bf00      	nop
    8302:	370c      	adds	r7, #12
    8304:	46bd      	mov	sp, r7
    8306:	f85d 7b04 	ldr.w	r7, [sp], #4
    830a:	4770      	bx	lr

0000830c <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    830c:	b480      	push	{r7}
    830e:	b083      	sub	sp, #12
    8310:	af00      	add	r7, sp, #0
    8312:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    8314:	687b      	ldr	r3, [r7, #4]
    8316:	685b      	ldr	r3, [r3, #4]
    8318:	089b      	lsrs	r3, r3, #2
    831a:	f003 0301 	and.w	r3, r3, #1
    831e:	2b00      	cmp	r3, #0
    8320:	bf14      	ite	ne
    8322:	2301      	movne	r3, #1
    8324:	2300      	moveq	r3, #0
    8326:	b2db      	uxtb	r3, r3
}
    8328:	4618      	mov	r0, r3
    832a:	370c      	adds	r7, #12
    832c:	46bd      	mov	sp, r7
    832e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8332:	4770      	bx	lr

00008334 <hri_gclk_read_SYNCBUSY_reg>:
{
    8334:	b480      	push	{r7}
    8336:	b083      	sub	sp, #12
    8338:	af00      	add	r7, sp, #0
    833a:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    833c:	687b      	ldr	r3, [r7, #4]
    833e:	685b      	ldr	r3, [r3, #4]
}
    8340:	4618      	mov	r0, r3
    8342:	370c      	adds	r7, #12
    8344:	46bd      	mov	sp, r7
    8346:	f85d 7b04 	ldr.w	r7, [sp], #4
    834a:	4770      	bx	lr

0000834c <hri_gclk_write_GENCTRL_SRC_bf>:
{
    834c:	b580      	push	{r7, lr}
    834e:	b086      	sub	sp, #24
    8350:	af00      	add	r7, sp, #0
    8352:	60f8      	str	r0, [r7, #12]
    8354:	460b      	mov	r3, r1
    8356:	607a      	str	r2, [r7, #4]
    8358:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    835a:	7afa      	ldrb	r2, [r7, #11]
    835c:	68fb      	ldr	r3, [r7, #12]
    835e:	3208      	adds	r2, #8
    8360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8364:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    8366:	697b      	ldr	r3, [r7, #20]
    8368:	f023 030f 	bic.w	r3, r3, #15
    836c:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    836e:	687b      	ldr	r3, [r7, #4]
    8370:	f003 030f 	and.w	r3, r3, #15
    8374:	697a      	ldr	r2, [r7, #20]
    8376:	4313      	orrs	r3, r2
    8378:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    837a:	7afa      	ldrb	r2, [r7, #11]
    837c:	68fb      	ldr	r3, [r7, #12]
    837e:	3208      	adds	r2, #8
    8380:	6979      	ldr	r1, [r7, #20]
    8382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    8386:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    838a:	68f8      	ldr	r0, [r7, #12]
    838c:	4b02      	ldr	r3, [pc, #8]	; (8398 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    838e:	4798      	blx	r3
}
    8390:	bf00      	nop
    8392:	3718      	adds	r7, #24
    8394:	46bd      	mov	sp, r7
    8396:	bd80      	pop	{r7, pc}
    8398:	000082e9 	.word	0x000082e9

0000839c <hri_gclk_write_PCHCTRL_reg>:
{
    839c:	b480      	push	{r7}
    839e:	b085      	sub	sp, #20
    83a0:	af00      	add	r7, sp, #0
    83a2:	60f8      	str	r0, [r7, #12]
    83a4:	460b      	mov	r3, r1
    83a6:	607a      	str	r2, [r7, #4]
    83a8:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    83aa:	7afa      	ldrb	r2, [r7, #11]
    83ac:	68fb      	ldr	r3, [r7, #12]
    83ae:	3220      	adds	r2, #32
    83b0:	6879      	ldr	r1, [r7, #4]
    83b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    83b6:	bf00      	nop
    83b8:	3714      	adds	r7, #20
    83ba:	46bd      	mov	sp, r7
    83bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    83c0:	4770      	bx	lr

000083c2 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    83c2:	b480      	push	{r7}
    83c4:	b085      	sub	sp, #20
    83c6:	af00      	add	r7, sp, #0
    83c8:	60f8      	str	r0, [r7, #12]
    83ca:	460b      	mov	r3, r1
    83cc:	607a      	str	r2, [r7, #4]
    83ce:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    83d0:	bf00      	nop
    83d2:	7afa      	ldrb	r2, [r7, #11]
    83d4:	68f9      	ldr	r1, [r7, #12]
    83d6:	4613      	mov	r3, r2
    83d8:	009b      	lsls	r3, r3, #2
    83da:	4413      	add	r3, r2
    83dc:	009b      	lsls	r3, r3, #2
    83de:	440b      	add	r3, r1
    83e0:	333c      	adds	r3, #60	; 0x3c
    83e2:	681a      	ldr	r2, [r3, #0]
    83e4:	687b      	ldr	r3, [r7, #4]
    83e6:	4013      	ands	r3, r2
    83e8:	2b00      	cmp	r3, #0
    83ea:	d1f2      	bne.n	83d2 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    83ec:	bf00      	nop
    83ee:	3714      	adds	r7, #20
    83f0:	46bd      	mov	sp, r7
    83f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83f6:	4770      	bx	lr

000083f8 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    83f8:	b480      	push	{r7}
    83fa:	b083      	sub	sp, #12
    83fc:	af00      	add	r7, sp, #0
    83fe:	6078      	str	r0, [r7, #4]
    8400:	460b      	mov	r3, r1
    8402:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    8404:	78fa      	ldrb	r2, [r7, #3]
    8406:	6879      	ldr	r1, [r7, #4]
    8408:	4613      	mov	r3, r2
    840a:	009b      	lsls	r3, r3, #2
    840c:	4413      	add	r3, r2
    840e:	009b      	lsls	r3, r3, #2
    8410:	440b      	add	r3, r1
    8412:	3340      	adds	r3, #64	; 0x40
    8414:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    8416:	f003 0301 	and.w	r3, r3, #1
    841a:	2b00      	cmp	r3, #0
    841c:	bf14      	ite	ne
    841e:	2301      	movne	r3, #1
    8420:	2300      	moveq	r3, #0
    8422:	b2db      	uxtb	r3, r3
}
    8424:	4618      	mov	r0, r3
    8426:	370c      	adds	r7, #12
    8428:	46bd      	mov	sp, r7
    842a:	f85d 7b04 	ldr.w	r7, [sp], #4
    842e:	4770      	bx	lr

00008430 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    8430:	b480      	push	{r7}
    8432:	b083      	sub	sp, #12
    8434:	af00      	add	r7, sp, #0
    8436:	6078      	str	r0, [r7, #4]
    8438:	460b      	mov	r3, r1
    843a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    843c:	78fa      	ldrb	r2, [r7, #3]
    843e:	6879      	ldr	r1, [r7, #4]
    8440:	4613      	mov	r3, r2
    8442:	009b      	lsls	r3, r3, #2
    8444:	4413      	add	r3, r2
    8446:	009b      	lsls	r3, r3, #2
    8448:	440b      	add	r3, r1
    844a:	3340      	adds	r3, #64	; 0x40
    844c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    844e:	085b      	lsrs	r3, r3, #1
    8450:	f003 0301 	and.w	r3, r3, #1
    8454:	2b00      	cmp	r3, #0
    8456:	bf14      	ite	ne
    8458:	2301      	movne	r3, #1
    845a:	2300      	moveq	r3, #0
    845c:	b2db      	uxtb	r3, r3
}
    845e:	4618      	mov	r0, r3
    8460:	370c      	adds	r7, #12
    8462:	46bd      	mov	sp, r7
    8464:	f85d 7b04 	ldr.w	r7, [sp], #4
    8468:	4770      	bx	lr
	...

0000846c <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    846c:	b580      	push	{r7, lr}
    846e:	b082      	sub	sp, #8
    8470:	af00      	add	r7, sp, #0
    8472:	6078      	str	r0, [r7, #4]
    8474:	460b      	mov	r3, r1
    8476:	70fb      	strb	r3, [r7, #3]
    8478:	4613      	mov	r3, r2
    847a:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    847c:	78fa      	ldrb	r2, [r7, #3]
    847e:	6879      	ldr	r1, [r7, #4]
    8480:	4613      	mov	r3, r2
    8482:	009b      	lsls	r3, r3, #2
    8484:	4413      	add	r3, r2
    8486:	009b      	lsls	r3, r3, #2
    8488:	440b      	add	r3, r1
    848a:	3330      	adds	r3, #48	; 0x30
    848c:	78ba      	ldrb	r2, [r7, #2]
    848e:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    8490:	78fb      	ldrb	r3, [r7, #3]
    8492:	2202      	movs	r2, #2
    8494:	4619      	mov	r1, r3
    8496:	6878      	ldr	r0, [r7, #4]
    8498:	4b02      	ldr	r3, [pc, #8]	; (84a4 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    849a:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    849c:	bf00      	nop
    849e:	3708      	adds	r7, #8
    84a0:	46bd      	mov	sp, r7
    84a2:	bd80      	pop	{r7, pc}
    84a4:	000083c3 	.word	0x000083c3

000084a8 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    84a8:	b580      	push	{r7, lr}
    84aa:	b084      	sub	sp, #16
    84ac:	af00      	add	r7, sp, #0
    84ae:	60f8      	str	r0, [r7, #12]
    84b0:	460b      	mov	r3, r1
    84b2:	607a      	str	r2, [r7, #4]
    84b4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    84b6:	7afa      	ldrb	r2, [r7, #11]
    84b8:	68f9      	ldr	r1, [r7, #12]
    84ba:	4613      	mov	r3, r2
    84bc:	009b      	lsls	r3, r3, #2
    84be:	4413      	add	r3, r2
    84c0:	009b      	lsls	r3, r3, #2
    84c2:	440b      	add	r3, r1
    84c4:	3334      	adds	r3, #52	; 0x34
    84c6:	687a      	ldr	r2, [r7, #4]
    84c8:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    84ca:	7afb      	ldrb	r3, [r7, #11]
    84cc:	2206      	movs	r2, #6
    84ce:	4619      	mov	r1, r3
    84d0:	68f8      	ldr	r0, [r7, #12]
    84d2:	4b03      	ldr	r3, [pc, #12]	; (84e0 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    84d4:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    84d6:	bf00      	nop
    84d8:	3710      	adds	r7, #16
    84da:	46bd      	mov	sp, r7
    84dc:	bd80      	pop	{r7, pc}
    84de:	bf00      	nop
    84e0:	000083c3 	.word	0x000083c3

000084e4 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    84e4:	b480      	push	{r7}
    84e6:	b085      	sub	sp, #20
    84e8:	af00      	add	r7, sp, #0
    84ea:	60f8      	str	r0, [r7, #12]
    84ec:	460b      	mov	r3, r1
    84ee:	607a      	str	r2, [r7, #4]
    84f0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    84f2:	7afa      	ldrb	r2, [r7, #11]
    84f4:	68f9      	ldr	r1, [r7, #12]
    84f6:	4613      	mov	r3, r2
    84f8:	009b      	lsls	r3, r3, #2
    84fa:	4413      	add	r3, r2
    84fc:	009b      	lsls	r3, r3, #2
    84fe:	440b      	add	r3, r1
    8500:	3338      	adds	r3, #56	; 0x38
    8502:	687a      	ldr	r2, [r7, #4]
    8504:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    8506:	bf00      	nop
    8508:	3714      	adds	r7, #20
    850a:	46bd      	mov	sp, r7
    850c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8510:	4770      	bx	lr

00008512 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    8512:	b480      	push	{r7}
    8514:	b083      	sub	sp, #12
    8516:	af00      	add	r7, sp, #0
    8518:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    851a:	687b      	ldr	r3, [r7, #4]
    851c:	691b      	ldr	r3, [r3, #16]
    851e:	085b      	lsrs	r3, r3, #1
    8520:	f003 0301 	and.w	r3, r3, #1
    8524:	2b00      	cmp	r3, #0
    8526:	bf14      	ite	ne
    8528:	2301      	movne	r3, #1
    852a:	2300      	moveq	r3, #0
    852c:	b2db      	uxtb	r3, r3
}
    852e:	4618      	mov	r0, r3
    8530:	370c      	adds	r7, #12
    8532:	46bd      	mov	sp, r7
    8534:	f85d 7b04 	ldr.w	r7, [sp], #4
    8538:	4770      	bx	lr

0000853a <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    853a:	b480      	push	{r7}
    853c:	b083      	sub	sp, #12
    853e:	af00      	add	r7, sp, #0
    8540:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    8542:	687b      	ldr	r3, [r7, #4]
    8544:	691b      	ldr	r3, [r3, #16]
    8546:	0a1b      	lsrs	r3, r3, #8
    8548:	f003 0301 	and.w	r3, r3, #1
    854c:	2b00      	cmp	r3, #0
    854e:	bf14      	ite	ne
    8550:	2301      	movne	r3, #1
    8552:	2300      	moveq	r3, #0
    8554:	b2db      	uxtb	r3, r3
}
    8556:	4618      	mov	r0, r3
    8558:	370c      	adds	r7, #12
    855a:	46bd      	mov	sp, r7
    855c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8560:	4770      	bx	lr

00008562 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    8562:	b480      	push	{r7}
    8564:	b085      	sub	sp, #20
    8566:	af00      	add	r7, sp, #0
    8568:	6078      	str	r0, [r7, #4]
    856a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    856c:	687b      	ldr	r3, [r7, #4]
    856e:	691b      	ldr	r3, [r3, #16]
    8570:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8572:	68fa      	ldr	r2, [r7, #12]
    8574:	683b      	ldr	r3, [r7, #0]
    8576:	4013      	ands	r3, r2
    8578:	60fb      	str	r3, [r7, #12]
	return tmp;
    857a:	68fb      	ldr	r3, [r7, #12]
}
    857c:	4618      	mov	r0, r3
    857e:	3714      	adds	r7, #20
    8580:	46bd      	mov	sp, r7
    8582:	f85d 7b04 	ldr.w	r7, [sp], #4
    8586:	4770      	bx	lr

00008588 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    8588:	b480      	push	{r7}
    858a:	b085      	sub	sp, #20
    858c:	af00      	add	r7, sp, #0
    858e:	60f8      	str	r0, [r7, #12]
    8590:	460b      	mov	r3, r1
    8592:	607a      	str	r2, [r7, #4]
    8594:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    8596:	7afb      	ldrb	r3, [r7, #11]
    8598:	68fa      	ldr	r2, [r7, #12]
    859a:	3304      	adds	r3, #4
    859c:	009b      	lsls	r3, r3, #2
    859e:	4413      	add	r3, r2
    85a0:	687a      	ldr	r2, [r7, #4]
    85a2:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    85a4:	bf00      	nop
    85a6:	3714      	adds	r7, #20
    85a8:	46bd      	mov	sp, r7
    85aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ae:	4770      	bx	lr

000085b0 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    85b0:	b480      	push	{r7}
    85b2:	b083      	sub	sp, #12
    85b4:	af00      	add	r7, sp, #0
    85b6:	6078      	str	r0, [r7, #4]
    85b8:	460b      	mov	r3, r1
    85ba:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    85bc:	687b      	ldr	r3, [r7, #4]
    85be:	78fa      	ldrb	r2, [r7, #3]
    85c0:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    85c2:	bf00      	nop
    85c4:	370c      	adds	r7, #12
    85c6:	46bd      	mov	sp, r7
    85c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    85cc:	4770      	bx	lr

000085ce <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    85ce:	b480      	push	{r7}
    85d0:	b085      	sub	sp, #20
    85d2:	af00      	add	r7, sp, #0
    85d4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    85d6:	687b      	ldr	r3, [r7, #4]
    85d8:	f893 3020 	ldrb.w	r3, [r3, #32]
    85dc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    85de:	7bfb      	ldrb	r3, [r7, #15]
    85e0:	f003 0301 	and.w	r3, r3, #1
    85e4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    85e6:	7bfb      	ldrb	r3, [r7, #15]
    85e8:	2b00      	cmp	r3, #0
    85ea:	bf14      	ite	ne
    85ec:	2301      	movne	r3, #1
    85ee:	2300      	moveq	r3, #0
    85f0:	b2db      	uxtb	r3, r3
}
    85f2:	4618      	mov	r0, r3
    85f4:	3714      	adds	r7, #20
    85f6:	46bd      	mov	sp, r7
    85f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    85fc:	4770      	bx	lr

000085fe <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    85fe:	b480      	push	{r7}
    8600:	b083      	sub	sp, #12
    8602:	af00      	add	r7, sp, #0
    8604:	6078      	str	r0, [r7, #4]
    8606:	460b      	mov	r3, r1
    8608:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    860a:	687b      	ldr	r3, [r7, #4]
    860c:	78fa      	ldrb	r2, [r7, #3]
    860e:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    8612:	bf00      	nop
    8614:	370c      	adds	r7, #12
    8616:	46bd      	mov	sp, r7
    8618:	f85d 7b04 	ldr.w	r7, [sp], #4
    861c:	4770      	bx	lr

0000861e <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    861e:	b480      	push	{r7}
    8620:	b083      	sub	sp, #12
    8622:	af00      	add	r7, sp, #0
    8624:	6078      	str	r0, [r7, #4]
    8626:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    8628:	687b      	ldr	r3, [r7, #4]
    862a:	683a      	ldr	r2, [r7, #0]
    862c:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    862e:	bf00      	nop
    8630:	370c      	adds	r7, #12
    8632:	46bd      	mov	sp, r7
    8634:	f85d 7b04 	ldr.w	r7, [sp], #4
    8638:	4770      	bx	lr

0000863a <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    863a:	b480      	push	{r7}
    863c:	b083      	sub	sp, #12
    863e:	af00      	add	r7, sp, #0
    8640:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    8642:	687b      	ldr	r3, [r7, #4]
    8644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    8646:	4618      	mov	r0, r3
    8648:	370c      	adds	r7, #12
    864a:	46bd      	mov	sp, r7
    864c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8650:	4770      	bx	lr

00008652 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    8652:	b480      	push	{r7}
    8654:	b083      	sub	sp, #12
    8656:	af00      	add	r7, sp, #0
    8658:	6078      	str	r0, [r7, #4]
    865a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    865c:	687b      	ldr	r3, [r7, #4]
    865e:	683a      	ldr	r2, [r7, #0]
    8660:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    8662:	bf00      	nop
    8664:	370c      	adds	r7, #12
    8666:	46bd      	mov	sp, r7
    8668:	f85d 7b04 	ldr.w	r7, [sp], #4
    866c:	4770      	bx	lr

0000866e <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    866e:	b480      	push	{r7}
    8670:	b085      	sub	sp, #20
    8672:	af00      	add	r7, sp, #0
    8674:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    8676:	687b      	ldr	r3, [r7, #4]
    8678:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    867c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    867e:	7bfb      	ldrb	r3, [r7, #15]
    8680:	085b      	lsrs	r3, r3, #1
    8682:	b2db      	uxtb	r3, r3
    8684:	f003 0301 	and.w	r3, r3, #1
    8688:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    868a:	7bfb      	ldrb	r3, [r7, #15]
    868c:	2b00      	cmp	r3, #0
    868e:	bf14      	ite	ne
    8690:	2301      	movne	r3, #1
    8692:	2300      	moveq	r3, #0
    8694:	b2db      	uxtb	r3, r3
}
    8696:	4618      	mov	r0, r3
    8698:	3714      	adds	r7, #20
    869a:	46bd      	mov	sp, r7
    869c:	f85d 7b04 	ldr.w	r7, [sp], #4
    86a0:	4770      	bx	lr

000086a2 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    86a2:	b480      	push	{r7}
    86a4:	b085      	sub	sp, #20
    86a6:	af00      	add	r7, sp, #0
    86a8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    86aa:	687b      	ldr	r3, [r7, #4]
    86ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    86b0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    86b2:	7bfb      	ldrb	r3, [r7, #15]
    86b4:	089b      	lsrs	r3, r3, #2
    86b6:	b2db      	uxtb	r3, r3
    86b8:	f003 0301 	and.w	r3, r3, #1
    86bc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    86be:	7bfb      	ldrb	r3, [r7, #15]
    86c0:	2b00      	cmp	r3, #0
    86c2:	bf14      	ite	ne
    86c4:	2301      	movne	r3, #1
    86c6:	2300      	moveq	r3, #0
    86c8:	b2db      	uxtb	r3, r3
}
    86ca:	4618      	mov	r0, r3
    86cc:	3714      	adds	r7, #20
    86ce:	46bd      	mov	sp, r7
    86d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    86d4:	4770      	bx	lr

000086d6 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    86d6:	b480      	push	{r7}
    86d8:	b085      	sub	sp, #20
    86da:	af00      	add	r7, sp, #0
    86dc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    86de:	687b      	ldr	r3, [r7, #4]
    86e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    86e4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    86e6:	7bfb      	ldrb	r3, [r7, #15]
    86e8:	08db      	lsrs	r3, r3, #3
    86ea:	b2db      	uxtb	r3, r3
    86ec:	f003 0301 	and.w	r3, r3, #1
    86f0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    86f2:	7bfb      	ldrb	r3, [r7, #15]
    86f4:	2b00      	cmp	r3, #0
    86f6:	bf14      	ite	ne
    86f8:	2301      	movne	r3, #1
    86fa:	2300      	moveq	r3, #0
    86fc:	b2db      	uxtb	r3, r3
}
    86fe:	4618      	mov	r0, r3
    8700:	3714      	adds	r7, #20
    8702:	46bd      	mov	sp, r7
    8704:	f85d 7b04 	ldr.w	r7, [sp], #4
    8708:	4770      	bx	lr

0000870a <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    870a:	b480      	push	{r7}
    870c:	b085      	sub	sp, #20
    870e:	af00      	add	r7, sp, #0
    8710:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    8712:	687b      	ldr	r3, [r7, #4]
    8714:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    8718:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    871a:	7bfb      	ldrb	r3, [r7, #15]
    871c:	091b      	lsrs	r3, r3, #4
    871e:	b2db      	uxtb	r3, r3
    8720:	f003 0301 	and.w	r3, r3, #1
    8724:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8726:	7bfb      	ldrb	r3, [r7, #15]
    8728:	2b00      	cmp	r3, #0
    872a:	bf14      	ite	ne
    872c:	2301      	movne	r3, #1
    872e:	2300      	moveq	r3, #0
    8730:	b2db      	uxtb	r3, r3
}
    8732:	4618      	mov	r0, r3
    8734:	3714      	adds	r7, #20
    8736:	46bd      	mov	sp, r7
    8738:	f85d 7b04 	ldr.w	r7, [sp], #4
    873c:	4770      	bx	lr
	...

00008740 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    8740:	b580      	push	{r7, lr}
    8742:	b082      	sub	sp, #8
    8744:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    8746:	4b0a      	ldr	r3, [pc, #40]	; (8770 <_oscctrl_init_sources+0x30>)
    8748:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    874a:	4a0a      	ldr	r2, [pc, #40]	; (8774 <_oscctrl_init_sources+0x34>)
    874c:	2101      	movs	r1, #1
    874e:	6878      	ldr	r0, [r7, #4]
    8750:	4b09      	ldr	r3, [pc, #36]	; (8778 <_oscctrl_init_sources+0x38>)
    8752:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    8754:	bf00      	nop
    8756:	6878      	ldr	r0, [r7, #4]
    8758:	4b08      	ldr	r3, [pc, #32]	; (877c <_oscctrl_init_sources+0x3c>)
    875a:	4798      	blx	r3
    875c:	4603      	mov	r3, r0
    875e:	f083 0301 	eor.w	r3, r3, #1
    8762:	b2db      	uxtb	r3, r3
    8764:	2b00      	cmp	r3, #0
    8766:	d1f6      	bne.n	8756 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    8768:	bf00      	nop
    876a:	3708      	adds	r7, #8
    876c:	46bd      	mov	sp, r7
    876e:	bd80      	pop	{r7, pc}
    8770:	40001000 	.word	0x40001000
    8774:	03002646 	.word	0x03002646
    8778:	00008589 	.word	0x00008589
    877c:	00008513 	.word	0x00008513

00008780 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    8780:	b580      	push	{r7, lr}
    8782:	b084      	sub	sp, #16
    8784:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    8786:	4b6b      	ldr	r3, [pc, #428]	; (8934 <_oscctrl_init_referenced_generators+0x1b4>)
    8788:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    878a:	2204      	movs	r2, #4
    878c:	2100      	movs	r1, #0
    878e:	486a      	ldr	r0, [pc, #424]	; (8938 <_oscctrl_init_referenced_generators+0x1b8>)
    8790:	4b6a      	ldr	r3, [pc, #424]	; (893c <_oscctrl_init_referenced_generators+0x1bc>)
    8792:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    8794:	bf00      	nop
    8796:	4868      	ldr	r0, [pc, #416]	; (8938 <_oscctrl_init_referenced_generators+0x1b8>)
    8798:	4b69      	ldr	r3, [pc, #420]	; (8940 <_oscctrl_init_referenced_generators+0x1c0>)
    879a:	4798      	blx	r3
    879c:	4603      	mov	r3, r0
    879e:	2b00      	cmp	r3, #0
    87a0:	d1f9      	bne.n	8796 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    87a2:	2100      	movs	r1, #0
    87a4:	68f8      	ldr	r0, [r7, #12]
    87a6:	4b67      	ldr	r3, [pc, #412]	; (8944 <_oscctrl_init_referenced_generators+0x1c4>)
    87a8:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    87aa:	4967      	ldr	r1, [pc, #412]	; (8948 <_oscctrl_init_referenced_generators+0x1c8>)
    87ac:	68f8      	ldr	r0, [r7, #12]
    87ae:	4b67      	ldr	r3, [pc, #412]	; (894c <_oscctrl_init_referenced_generators+0x1cc>)
    87b0:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    87b2:	bf00      	nop
    87b4:	68f8      	ldr	r0, [r7, #12]
    87b6:	4b66      	ldr	r3, [pc, #408]	; (8950 <_oscctrl_init_referenced_generators+0x1d0>)
    87b8:	4798      	blx	r3
    87ba:	4603      	mov	r3, r0
    87bc:	2b00      	cmp	r3, #0
    87be:	d1f9      	bne.n	87b4 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    87c0:	2100      	movs	r1, #0
    87c2:	68f8      	ldr	r0, [r7, #12]
    87c4:	4b63      	ldr	r3, [pc, #396]	; (8954 <_oscctrl_init_referenced_generators+0x1d4>)
    87c6:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    87c8:	bf00      	nop
    87ca:	68f8      	ldr	r0, [r7, #12]
    87cc:	4b62      	ldr	r3, [pc, #392]	; (8958 <_oscctrl_init_referenced_generators+0x1d8>)
    87ce:	4798      	blx	r3
    87d0:	4603      	mov	r3, r0
    87d2:	2b00      	cmp	r3, #0
    87d4:	d1f9      	bne.n	87ca <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    87d6:	2302      	movs	r3, #2
    87d8:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    87da:	7afb      	ldrb	r3, [r7, #11]
    87dc:	4619      	mov	r1, r3
    87de:	68f8      	ldr	r0, [r7, #12]
    87e0:	4b58      	ldr	r3, [pc, #352]	; (8944 <_oscctrl_init_referenced_generators+0x1c4>)
    87e2:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    87e4:	bf00      	nop
    87e6:	68f8      	ldr	r0, [r7, #12]
    87e8:	4b5c      	ldr	r3, [pc, #368]	; (895c <_oscctrl_init_referenced_generators+0x1dc>)
    87ea:	4798      	blx	r3
    87ec:	4603      	mov	r3, r0
    87ee:	2b00      	cmp	r3, #0
    87f0:	d1f9      	bne.n	87e6 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    87f2:	68f8      	ldr	r0, [r7, #12]
    87f4:	4b5a      	ldr	r3, [pc, #360]	; (8960 <_oscctrl_init_referenced_generators+0x1e0>)
    87f6:	4798      	blx	r3
    87f8:	4603      	mov	r3, r0
    87fa:	4619      	mov	r1, r3
    87fc:	68f8      	ldr	r0, [r7, #12]
    87fe:	4b59      	ldr	r3, [pc, #356]	; (8964 <_oscctrl_init_referenced_generators+0x1e4>)
    8800:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    8802:	bf00      	nop
    8804:	68f8      	ldr	r0, [r7, #12]
    8806:	4b58      	ldr	r3, [pc, #352]	; (8968 <_oscctrl_init_referenced_generators+0x1e8>)
    8808:	4798      	blx	r3
    880a:	4603      	mov	r3, r0
    880c:	2b00      	cmp	r3, #0
    880e:	d1f9      	bne.n	8804 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    8810:	2319      	movs	r3, #25
    8812:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    8814:	7afb      	ldrb	r3, [r7, #11]
    8816:	4619      	mov	r1, r3
    8818:	68f8      	ldr	r0, [r7, #12]
    881a:	4b4e      	ldr	r3, [pc, #312]	; (8954 <_oscctrl_init_referenced_generators+0x1d4>)
    881c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    881e:	bf00      	nop
    8820:	68f8      	ldr	r0, [r7, #12]
    8822:	4b4d      	ldr	r3, [pc, #308]	; (8958 <_oscctrl_init_referenced_generators+0x1d8>)
    8824:	4798      	blx	r3
    8826:	4603      	mov	r3, r0
    8828:	2b00      	cmp	r3, #0
    882a:	d1f9      	bne.n	8820 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    882c:	2245      	movs	r2, #69	; 0x45
    882e:	2101      	movs	r1, #1
    8830:	4841      	ldr	r0, [pc, #260]	; (8938 <_oscctrl_init_referenced_generators+0x1b8>)
    8832:	4b4e      	ldr	r3, [pc, #312]	; (896c <_oscctrl_init_referenced_generators+0x1ec>)
    8834:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    8836:	223b      	movs	r2, #59	; 0x3b
    8838:	2100      	movs	r1, #0
    883a:	68f8      	ldr	r0, [r7, #12]
    883c:	4b4c      	ldr	r3, [pc, #304]	; (8970 <_oscctrl_init_referenced_generators+0x1f0>)
    883e:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    8840:	f44f 6201 	mov.w	r2, #2064	; 0x810
    8844:	2100      	movs	r1, #0
    8846:	68f8      	ldr	r0, [r7, #12]
    8848:	4b4a      	ldr	r3, [pc, #296]	; (8974 <_oscctrl_init_referenced_generators+0x1f4>)
    884a:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    884c:	2242      	movs	r2, #66	; 0x42
    884e:	2100      	movs	r1, #0
    8850:	68f8      	ldr	r0, [r7, #12]
    8852:	4b49      	ldr	r3, [pc, #292]	; (8978 <_oscctrl_init_referenced_generators+0x1f8>)
    8854:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    8856:	4a49      	ldr	r2, [pc, #292]	; (897c <_oscctrl_init_referenced_generators+0x1fc>)
    8858:	2101      	movs	r1, #1
    885a:	68f8      	ldr	r0, [r7, #12]
    885c:	4b44      	ldr	r3, [pc, #272]	; (8970 <_oscctrl_init_referenced_generators+0x1f0>)
    885e:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    8860:	f44f 6203 	mov.w	r2, #2096	; 0x830
    8864:	2101      	movs	r1, #1
    8866:	68f8      	ldr	r0, [r7, #12]
    8868:	4b42      	ldr	r3, [pc, #264]	; (8974 <_oscctrl_init_referenced_generators+0x1f4>)
    886a:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    886c:	2202      	movs	r2, #2
    886e:	2101      	movs	r1, #1
    8870:	68f8      	ldr	r0, [r7, #12]
    8872:	4b41      	ldr	r3, [pc, #260]	; (8978 <_oscctrl_init_referenced_generators+0x1f8>)
    8874:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    8876:	68f8      	ldr	r0, [r7, #12]
    8878:	4b41      	ldr	r3, [pc, #260]	; (8980 <_oscctrl_init_referenced_generators+0x200>)
    887a:	4798      	blx	r3
    887c:	4603      	mov	r3, r0
    887e:	2b00      	cmp	r3, #0
    8880:	d00c      	beq.n	889c <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    8882:	f44f 6310 	mov.w	r3, #2304	; 0x900
    8886:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    8888:	bf00      	nop
    888a:	6879      	ldr	r1, [r7, #4]
    888c:	68f8      	ldr	r0, [r7, #12]
    888e:	4b3d      	ldr	r3, [pc, #244]	; (8984 <_oscctrl_init_referenced_generators+0x204>)
    8890:	4798      	blx	r3
    8892:	4602      	mov	r2, r0
    8894:	687b      	ldr	r3, [r7, #4]
    8896:	429a      	cmp	r2, r3
    8898:	d1f7      	bne.n	888a <_oscctrl_init_referenced_generators+0x10a>
    889a:	e009      	b.n	88b0 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    889c:	bf00      	nop
    889e:	68f8      	ldr	r0, [r7, #12]
    88a0:	4b39      	ldr	r3, [pc, #228]	; (8988 <_oscctrl_init_referenced_generators+0x208>)
    88a2:	4798      	blx	r3
    88a4:	4603      	mov	r3, r0
    88a6:	f083 0301 	eor.w	r3, r3, #1
    88aa:	b2db      	uxtb	r3, r3
    88ac:	2b00      	cmp	r3, #0
    88ae:	d1f6      	bne.n	889e <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    88b0:	bf00      	nop
    88b2:	2100      	movs	r1, #0
    88b4:	68f8      	ldr	r0, [r7, #12]
    88b6:	4b35      	ldr	r3, [pc, #212]	; (898c <_oscctrl_init_referenced_generators+0x20c>)
    88b8:	4798      	blx	r3
    88ba:	4603      	mov	r3, r0
    88bc:	f083 0301 	eor.w	r3, r3, #1
    88c0:	b2db      	uxtb	r3, r3
    88c2:	2b00      	cmp	r3, #0
    88c4:	d009      	beq.n	88da <_oscctrl_init_referenced_generators+0x15a>
    88c6:	2100      	movs	r1, #0
    88c8:	68f8      	ldr	r0, [r7, #12]
    88ca:	4b31      	ldr	r3, [pc, #196]	; (8990 <_oscctrl_init_referenced_generators+0x210>)
    88cc:	4798      	blx	r3
    88ce:	4603      	mov	r3, r0
    88d0:	f083 0301 	eor.w	r3, r3, #1
    88d4:	b2db      	uxtb	r3, r3
    88d6:	2b00      	cmp	r3, #0
    88d8:	d1eb      	bne.n	88b2 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    88da:	bf00      	nop
    88dc:	2101      	movs	r1, #1
    88de:	68f8      	ldr	r0, [r7, #12]
    88e0:	4b2a      	ldr	r3, [pc, #168]	; (898c <_oscctrl_init_referenced_generators+0x20c>)
    88e2:	4798      	blx	r3
    88e4:	4603      	mov	r3, r0
    88e6:	f083 0301 	eor.w	r3, r3, #1
    88ea:	b2db      	uxtb	r3, r3
    88ec:	2b00      	cmp	r3, #0
    88ee:	d009      	beq.n	8904 <_oscctrl_init_referenced_generators+0x184>
    88f0:	2101      	movs	r1, #1
    88f2:	68f8      	ldr	r0, [r7, #12]
    88f4:	4b26      	ldr	r3, [pc, #152]	; (8990 <_oscctrl_init_referenced_generators+0x210>)
    88f6:	4798      	blx	r3
    88f8:	4603      	mov	r3, r0
    88fa:	f083 0301 	eor.w	r3, r3, #1
    88fe:	b2db      	uxtb	r3, r3
    8900:	2b00      	cmp	r3, #0
    8902:	d1eb      	bne.n	88dc <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    8904:	bf00      	nop
    8906:	480c      	ldr	r0, [pc, #48]	; (8938 <_oscctrl_init_referenced_generators+0x1b8>)
    8908:	4b22      	ldr	r3, [pc, #136]	; (8994 <_oscctrl_init_referenced_generators+0x214>)
    890a:	4798      	blx	r3
    890c:	4603      	mov	r3, r0
    890e:	2b00      	cmp	r3, #0
    8910:	d1f9      	bne.n	8906 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    8912:	2207      	movs	r2, #7
    8914:	2100      	movs	r1, #0
    8916:	4808      	ldr	r0, [pc, #32]	; (8938 <_oscctrl_init_referenced_generators+0x1b8>)
    8918:	4b08      	ldr	r3, [pc, #32]	; (893c <_oscctrl_init_referenced_generators+0x1bc>)
    891a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    891c:	bf00      	nop
    891e:	4806      	ldr	r0, [pc, #24]	; (8938 <_oscctrl_init_referenced_generators+0x1b8>)
    8920:	4b07      	ldr	r3, [pc, #28]	; (8940 <_oscctrl_init_referenced_generators+0x1c0>)
    8922:	4798      	blx	r3
    8924:	4603      	mov	r3, r0
    8926:	2b00      	cmp	r3, #0
    8928:	d1f9      	bne.n	891e <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    892a:	bf00      	nop
    892c:	3710      	adds	r7, #16
    892e:	46bd      	mov	sp, r7
    8930:	bd80      	pop	{r7, pc}
    8932:	bf00      	nop
    8934:	40001000 	.word	0x40001000
    8938:	40001c00 	.word	0x40001c00
    893c:	0000834d 	.word	0x0000834d
    8940:	0000830d 	.word	0x0000830d
    8944:	000085b1 	.word	0x000085b1
    8948:	0401bb80 	.word	0x0401bb80
    894c:	00008653 	.word	0x00008653
    8950:	0000870b 	.word	0x0000870b
    8954:	000085ff 	.word	0x000085ff
    8958:	000086a3 	.word	0x000086a3
    895c:	0000866f 	.word	0x0000866f
    8960:	0000863b 	.word	0x0000863b
    8964:	0000861f 	.word	0x0000861f
    8968:	000086d7 	.word	0x000086d7
    896c:	0000839d 	.word	0x0000839d
    8970:	000084a9 	.word	0x000084a9
    8974:	000084e5 	.word	0x000084e5
    8978:	0000846d 	.word	0x0000846d
    897c:	000407a0 	.word	0x000407a0
    8980:	000085cf 	.word	0x000085cf
    8984:	00008563 	.word	0x00008563
    8988:	0000853b 	.word	0x0000853b
    898c:	000083f9 	.word	0x000083f9
    8990:	00008431 	.word	0x00008431
    8994:	00008335 	.word	0x00008335

00008998 <hri_pac_get_STATUSA_reg>:
{
	return (((Pac *)hw)->STATUSA.reg & PAC_STATUSA_TC1) >> PAC_STATUSA_TC1_Pos;
}

static inline hri_pac_statusa_reg_t hri_pac_get_STATUSA_reg(const void *const hw, hri_pac_statusa_reg_t mask)
{
    8998:	b480      	push	{r7}
    899a:	b085      	sub	sp, #20
    899c:	af00      	add	r7, sp, #0
    899e:	6078      	str	r0, [r7, #4]
    89a0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSA.reg;
    89a2:	687b      	ldr	r3, [r7, #4]
    89a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    89a6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    89a8:	68fa      	ldr	r2, [r7, #12]
    89aa:	683b      	ldr	r3, [r7, #0]
    89ac:	4013      	ands	r3, r2
    89ae:	60fb      	str	r3, [r7, #12]
	return tmp;
    89b0:	68fb      	ldr	r3, [r7, #12]
}
    89b2:	4618      	mov	r0, r3
    89b4:	3714      	adds	r7, #20
    89b6:	46bd      	mov	sp, r7
    89b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    89bc:	4770      	bx	lr

000089be <hri_pac_get_STATUSB_reg>:
{
	return (((Pac *)hw)->STATUSB.reg & PAC_STATUSB_RAMECC) >> PAC_STATUSB_RAMECC_Pos;
}

static inline hri_pac_statusb_reg_t hri_pac_get_STATUSB_reg(const void *const hw, hri_pac_statusb_reg_t mask)
{
    89be:	b480      	push	{r7}
    89c0:	b085      	sub	sp, #20
    89c2:	af00      	add	r7, sp, #0
    89c4:	6078      	str	r0, [r7, #4]
    89c6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSB.reg;
    89c8:	687b      	ldr	r3, [r7, #4]
    89ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    89cc:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    89ce:	68fa      	ldr	r2, [r7, #12]
    89d0:	683b      	ldr	r3, [r7, #0]
    89d2:	4013      	ands	r3, r2
    89d4:	60fb      	str	r3, [r7, #12]
	return tmp;
    89d6:	68fb      	ldr	r3, [r7, #12]
}
    89d8:	4618      	mov	r0, r3
    89da:	3714      	adds	r7, #20
    89dc:	46bd      	mov	sp, r7
    89de:	f85d 7b04 	ldr.w	r7, [sp], #4
    89e2:	4770      	bx	lr

000089e4 <hri_pac_get_STATUSC_reg>:
{
	return (((Pac *)hw)->STATUSC.reg & PAC_STATUSC_CCL) >> PAC_STATUSC_CCL_Pos;
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
    89e4:	b480      	push	{r7}
    89e6:	b085      	sub	sp, #20
    89e8:	af00      	add	r7, sp, #0
    89ea:	6078      	str	r0, [r7, #4]
    89ec:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    89ee:	687b      	ldr	r3, [r7, #4]
    89f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    89f2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    89f4:	68fa      	ldr	r2, [r7, #12]
    89f6:	683b      	ldr	r3, [r7, #0]
    89f8:	4013      	ands	r3, r2
    89fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    89fc:	68fb      	ldr	r3, [r7, #12]
}
    89fe:	4618      	mov	r0, r3
    8a00:	3714      	adds	r7, #20
    8a02:	46bd      	mov	sp, r7
    8a04:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a08:	4770      	bx	lr

00008a0a <hri_pac_get_STATUSD_reg>:
{
	return (((Pac *)hw)->STATUSD.reg & PAC_STATUSD_PCC) >> PAC_STATUSD_PCC_Pos;
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
    8a0a:	b480      	push	{r7}
    8a0c:	b085      	sub	sp, #20
    8a0e:	af00      	add	r7, sp, #0
    8a10:	6078      	str	r0, [r7, #4]
    8a12:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    8a14:	687b      	ldr	r3, [r7, #4]
    8a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8a18:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8a1a:	68fa      	ldr	r2, [r7, #12]
    8a1c:	683b      	ldr	r3, [r7, #0]
    8a1e:	4013      	ands	r3, r2
    8a20:	60fb      	str	r3, [r7, #12]
	return tmp;
    8a22:	68fb      	ldr	r3, [r7, #12]
}
    8a24:	4618      	mov	r0, r3
    8a26:	3714      	adds	r7, #20
    8a28:	46bd      	mov	sp, r7
    8a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a2e:	4770      	bx	lr

00008a30 <hri_pac_write_WRCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
    8a30:	b480      	push	{r7}
    8a32:	b083      	sub	sp, #12
    8a34:	af00      	add	r7, sp, #0
    8a36:	6078      	str	r0, [r7, #4]
    8a38:	6039      	str	r1, [r7, #0]
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    8a3a:	687b      	ldr	r3, [r7, #4]
    8a3c:	683a      	ldr	r2, [r7, #0]
    8a3e:	601a      	str	r2, [r3, #0]
	PAC_CRITICAL_SECTION_LEAVE();
}
    8a40:	bf00      	nop
    8a42:	370c      	adds	r7, #12
    8a44:	46bd      	mov	sp, r7
    8a46:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a4a:	4770      	bx	lr

00008a4c <_pac_get_peripheral_id>:
#include <compiler.h>
#include <utils_assert.h>
#include <hpl_pac.h>

static uint32_t _pac_get_peripheral_id(const void *const module)
{
    8a4c:	b480      	push	{r7}
    8a4e:	b085      	sub	sp, #20
    8a50:	af00      	add	r7, sp, #0
    8a52:	6078      	str	r0, [r7, #4]
	uint32_t peripheral = 10;
    8a54:	230a      	movs	r3, #10
    8a56:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    8a58:	687b      	ldr	r3, [r7, #4]
    8a5a:	f003 4382 	and.w	r3, r3, #1090519040	; 0x41000000
    8a5e:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    8a62:	d101      	bne.n	8a68 <_pac_get_peripheral_id+0x1c>
		peripheral = 13;
    8a64:	230d      	movs	r3, #13
    8a66:	60fb      	str	r3, [r7, #12]
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    8a68:	687b      	ldr	r3, [r7, #4]
    8a6a:	0e1b      	lsrs	r3, r3, #24
    8a6c:	f003 030f 	and.w	r3, r3, #15
    8a70:	015a      	lsls	r2, r3, #5
    8a72:	6879      	ldr	r1, [r7, #4]
    8a74:	4b06      	ldr	r3, [pc, #24]	; (8a90 <_pac_get_peripheral_id+0x44>)
    8a76:	400b      	ands	r3, r1
    8a78:	68f9      	ldr	r1, [r7, #12]
    8a7a:	40cb      	lsrs	r3, r1
    8a7c:	4413      	add	r3, r2
    8a7e:	60fb      	str	r3, [r7, #12]

	return peripheral;
    8a80:	68fb      	ldr	r3, [r7, #12]
}
    8a82:	4618      	mov	r0, r3
    8a84:	3714      	adds	r7, #20
    8a86:	46bd      	mov	sp, r7
    8a88:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a8c:	4770      	bx	lr
    8a8e:	bf00      	nop
    8a90:	000fff00 	.word	0x000fff00

00008a94 <_periph_lock>:

/**
 * \brief Enable write protect for the given hardware module
 */
int32_t _periph_lock(const void *const module)
{
    8a94:	b580      	push	{r7, lr}
    8a96:	b086      	sub	sp, #24
    8a98:	af00      	add	r7, sp, #0
    8a9a:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    8a9c:	687b      	ldr	r3, [r7, #4]
    8a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    8aa2:	bf8c      	ite	hi
    8aa4:	2301      	movhi	r3, #1
    8aa6:	2300      	movls	r3, #0
    8aa8:	b2db      	uxtb	r3, r3
    8aaa:	2239      	movs	r2, #57	; 0x39
    8aac:	4917      	ldr	r1, [pc, #92]	; (8b0c <_periph_lock+0x78>)
    8aae:	4618      	mov	r0, r3
    8ab0:	4b17      	ldr	r3, [pc, #92]	; (8b10 <_periph_lock+0x7c>)
    8ab2:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    8ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8ab8:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    8aba:	6878      	ldr	r0, [r7, #4]
    8abc:	4b15      	ldr	r3, [pc, #84]	; (8b14 <_periph_lock+0x80>)
    8abe:	4798      	blx	r3
    8ac0:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    8ac2:	693b      	ldr	r3, [r7, #16]
    8ac4:	b29b      	uxth	r3, r3
    8ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8aca:	4619      	mov	r1, r3
    8acc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8ad0:	4b11      	ldr	r3, [pc, #68]	; (8b18 <_periph_lock+0x84>)
    8ad2:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    8ad4:	f107 030f 	add.w	r3, r7, #15
    8ad8:	4619      	mov	r1, r3
    8ada:	6878      	ldr	r0, [r7, #4]
    8adc:	4b0f      	ldr	r3, [pc, #60]	; (8b1c <_periph_lock+0x88>)
    8ade:	4798      	blx	r3
	} while (!stat && timeout--);
    8ae0:	7bfb      	ldrb	r3, [r7, #15]
    8ae2:	f083 0301 	eor.w	r3, r3, #1
    8ae6:	b2db      	uxtb	r3, r3
    8ae8:	2b00      	cmp	r3, #0
    8aea:	d004      	beq.n	8af6 <_periph_lock+0x62>
    8aec:	697b      	ldr	r3, [r7, #20]
    8aee:	1e5a      	subs	r2, r3, #1
    8af0:	617a      	str	r2, [r7, #20]
    8af2:	2b00      	cmp	r3, #0
    8af4:	d1ee      	bne.n	8ad4 <_periph_lock+0x40>

	if (timeout < 0) {
    8af6:	697b      	ldr	r3, [r7, #20]
    8af8:	2b00      	cmp	r3, #0
    8afa:	da02      	bge.n	8b02 <_periph_lock+0x6e>
		return ERR_TIMEOUT;
    8afc:	f06f 0307 	mvn.w	r3, #7
    8b00:	e000      	b.n	8b04 <_periph_lock+0x70>
	}

	return ERR_NONE;
    8b02:	2300      	movs	r3, #0
}
    8b04:	4618      	mov	r0, r3
    8b06:	3718      	adds	r7, #24
    8b08:	46bd      	mov	sp, r7
    8b0a:	bd80      	pop	{r7, pc}
    8b0c:	0001d1c8 	.word	0x0001d1c8
    8b10:	00006991 	.word	0x00006991
    8b14:	00008a4d 	.word	0x00008a4d
    8b18:	00008a31 	.word	0x00008a31
    8b1c:	00008ba9 	.word	0x00008ba9

00008b20 <_periph_unlock>:

/**
 * \brief Disable write protect for the given hardware module
 */
int32_t _periph_unlock(const void *const module)
{
    8b20:	b580      	push	{r7, lr}
    8b22:	b086      	sub	sp, #24
    8b24:	af00      	add	r7, sp, #0
    8b26:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    8b28:	687b      	ldr	r3, [r7, #4]
    8b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    8b2e:	bf8c      	ite	hi
    8b30:	2301      	movhi	r3, #1
    8b32:	2300      	movls	r3, #0
    8b34:	b2db      	uxtb	r3, r3
    8b36:	2253      	movs	r2, #83	; 0x53
    8b38:	4916      	ldr	r1, [pc, #88]	; (8b94 <_periph_unlock+0x74>)
    8b3a:	4618      	mov	r0, r3
    8b3c:	4b16      	ldr	r3, [pc, #88]	; (8b98 <_periph_unlock+0x78>)
    8b3e:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    8b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8b44:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    8b46:	6878      	ldr	r0, [r7, #4]
    8b48:	4b14      	ldr	r3, [pc, #80]	; (8b9c <_periph_unlock+0x7c>)
    8b4a:	4798      	blx	r3
    8b4c:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    8b4e:	693b      	ldr	r3, [r7, #16]
    8b50:	b29b      	uxth	r3, r3
    8b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8b56:	4619      	mov	r1, r3
    8b58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8b5c:	4b10      	ldr	r3, [pc, #64]	; (8ba0 <_periph_unlock+0x80>)
    8b5e:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    8b60:	f107 030f 	add.w	r3, r7, #15
    8b64:	4619      	mov	r1, r3
    8b66:	6878      	ldr	r0, [r7, #4]
    8b68:	4b0e      	ldr	r3, [pc, #56]	; (8ba4 <_periph_unlock+0x84>)
    8b6a:	4798      	blx	r3
	} while (stat && timeout--);
    8b6c:	7bfb      	ldrb	r3, [r7, #15]
    8b6e:	2b00      	cmp	r3, #0
    8b70:	d004      	beq.n	8b7c <_periph_unlock+0x5c>
    8b72:	697b      	ldr	r3, [r7, #20]
    8b74:	1e5a      	subs	r2, r3, #1
    8b76:	617a      	str	r2, [r7, #20]
    8b78:	2b00      	cmp	r3, #0
    8b7a:	d1f1      	bne.n	8b60 <_periph_unlock+0x40>

	if (timeout < 0) {
    8b7c:	697b      	ldr	r3, [r7, #20]
    8b7e:	2b00      	cmp	r3, #0
    8b80:	da02      	bge.n	8b88 <_periph_unlock+0x68>
		return ERR_TIMEOUT;
    8b82:	f06f 0307 	mvn.w	r3, #7
    8b86:	e000      	b.n	8b8a <_periph_unlock+0x6a>
	}

	return ERR_NONE;
    8b88:	2300      	movs	r3, #0
}
    8b8a:	4618      	mov	r0, r3
    8b8c:	3718      	adds	r7, #24
    8b8e:	46bd      	mov	sp, r7
    8b90:	bd80      	pop	{r7, pc}
    8b92:	bf00      	nop
    8b94:	0001d1c8 	.word	0x0001d1c8
    8b98:	00006991 	.word	0x00006991
    8b9c:	00008a4d 	.word	0x00008a4d
    8ba0:	00008a31 	.word	0x00008a31
    8ba4:	00008ba9 	.word	0x00008ba9

00008ba8 <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    8ba8:	b580      	push	{r7, lr}
    8baa:	b084      	sub	sp, #16
    8bac:	af00      	add	r7, sp, #0
    8bae:	6078      	str	r0, [r7, #4]
    8bb0:	6039      	str	r1, [r7, #0]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    8bb2:	687b      	ldr	r3, [r7, #4]
    8bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    8bb8:	bf8c      	ite	hi
    8bba:	2301      	movhi	r3, #1
    8bbc:	2300      	movls	r3, #0
    8bbe:	b2db      	uxtb	r3, r3
    8bc0:	226d      	movs	r2, #109	; 0x6d
    8bc2:	4931      	ldr	r1, [pc, #196]	; (8c88 <_periph_get_lock_state+0xe0>)
    8bc4:	4618      	mov	r0, r3
    8bc6:	4b31      	ldr	r3, [pc, #196]	; (8c8c <_periph_get_lock_state+0xe4>)
    8bc8:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    8bca:	6878      	ldr	r0, [r7, #4]
    8bcc:	4b30      	ldr	r3, [pc, #192]	; (8c90 <_periph_get_lock_state+0xe8>)
    8bce:	4798      	blx	r3
    8bd0:	4603      	mov	r3, r0
    8bd2:	f003 031f 	and.w	r3, r3, #31
    8bd6:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    8bd8:	687b      	ldr	r3, [r7, #4]
    8bda:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    8bde:	d211      	bcs.n	8c04 <_periph_get_lock_state+0x5c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    8be0:	2201      	movs	r2, #1
    8be2:	68fb      	ldr	r3, [r7, #12]
    8be4:	fa02 f303 	lsl.w	r3, r2, r3
    8be8:	4619      	mov	r1, r3
    8bea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8bee:	4b29      	ldr	r3, [pc, #164]	; (8c94 <_periph_get_lock_state+0xec>)
    8bf0:	4798      	blx	r3
    8bf2:	4603      	mov	r3, r0
    8bf4:	2b00      	cmp	r3, #0
    8bf6:	bf14      	ite	ne
    8bf8:	2301      	movne	r3, #1
    8bfa:	2300      	moveq	r3, #0
    8bfc:	b2da      	uxtb	r2, r3
    8bfe:	683b      	ldr	r3, [r7, #0]
    8c00:	701a      	strb	r2, [r3, #0]
    8c02:	e03c      	b.n	8c7e <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    8c04:	687b      	ldr	r3, [r7, #4]
    8c06:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    8c0a:	d211      	bcs.n	8c30 <_periph_get_lock_state+0x88>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    8c0c:	2201      	movs	r2, #1
    8c0e:	68fb      	ldr	r3, [r7, #12]
    8c10:	fa02 f303 	lsl.w	r3, r2, r3
    8c14:	4619      	mov	r1, r3
    8c16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8c1a:	4b1f      	ldr	r3, [pc, #124]	; (8c98 <_periph_get_lock_state+0xf0>)
    8c1c:	4798      	blx	r3
    8c1e:	4603      	mov	r3, r0
    8c20:	2b00      	cmp	r3, #0
    8c22:	bf14      	ite	ne
    8c24:	2301      	movne	r3, #1
    8c26:	2300      	moveq	r3, #0
    8c28:	b2da      	uxtb	r2, r3
    8c2a:	683b      	ldr	r3, [r7, #0]
    8c2c:	701a      	strb	r2, [r3, #0]
    8c2e:	e026      	b.n	8c7e <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    8c30:	687b      	ldr	r3, [r7, #4]
    8c32:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    8c36:	d211      	bcs.n	8c5c <_periph_get_lock_state+0xb4>
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
    8c38:	2201      	movs	r2, #1
    8c3a:	68fb      	ldr	r3, [r7, #12]
    8c3c:	fa02 f303 	lsl.w	r3, r2, r3
    8c40:	4619      	mov	r1, r3
    8c42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8c46:	4b15      	ldr	r3, [pc, #84]	; (8c9c <_periph_get_lock_state+0xf4>)
    8c48:	4798      	blx	r3
    8c4a:	4603      	mov	r3, r0
    8c4c:	2b00      	cmp	r3, #0
    8c4e:	bf14      	ite	ne
    8c50:	2301      	movne	r3, #1
    8c52:	2300      	moveq	r3, #0
    8c54:	b2da      	uxtb	r2, r3
    8c56:	683b      	ldr	r3, [r7, #0]
    8c58:	701a      	strb	r2, [r3, #0]
    8c5a:	e010      	b.n	8c7e <_periph_get_lock_state+0xd6>
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    8c5c:	2201      	movs	r2, #1
    8c5e:	68fb      	ldr	r3, [r7, #12]
    8c60:	fa02 f303 	lsl.w	r3, r2, r3
    8c64:	4619      	mov	r1, r3
    8c66:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8c6a:	4b0d      	ldr	r3, [pc, #52]	; (8ca0 <_periph_get_lock_state+0xf8>)
    8c6c:	4798      	blx	r3
    8c6e:	4603      	mov	r3, r0
    8c70:	2b00      	cmp	r3, #0
    8c72:	bf14      	ite	ne
    8c74:	2301      	movne	r3, #1
    8c76:	2300      	moveq	r3, #0
    8c78:	b2da      	uxtb	r2, r3
    8c7a:	683b      	ldr	r3, [r7, #0]
    8c7c:	701a      	strb	r2, [r3, #0]
	}

	return ERR_NONE;
    8c7e:	2300      	movs	r3, #0
}
    8c80:	4618      	mov	r0, r3
    8c82:	3710      	adds	r7, #16
    8c84:	46bd      	mov	sp, r7
    8c86:	bd80      	pop	{r7, pc}
    8c88:	0001d1c8 	.word	0x0001d1c8
    8c8c:	00006991 	.word	0x00006991
    8c90:	00008a4d 	.word	0x00008a4d
    8c94:	00008999 	.word	0x00008999
    8c98:	000089bf 	.word	0x000089bf
    8c9c:	000089e5 	.word	0x000089e5
    8ca0:	00008a0b 	.word	0x00008a0b

00008ca4 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    8ca4:	b480      	push	{r7}
    8ca6:	b083      	sub	sp, #12
    8ca8:	af00      	add	r7, sp, #0
    8caa:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    8cac:	687b      	ldr	r3, [r7, #4]
    8cae:	69db      	ldr	r3, [r3, #28]
    8cb0:	0a9b      	lsrs	r3, r3, #10
    8cb2:	f003 0301 	and.w	r3, r3, #1
    8cb6:	2b00      	cmp	r3, #0
    8cb8:	bf14      	ite	ne
    8cba:	2301      	movne	r3, #1
    8cbc:	2300      	moveq	r3, #0
    8cbe:	b2db      	uxtb	r3, r3
}
    8cc0:	4618      	mov	r0, r3
    8cc2:	370c      	adds	r7, #12
    8cc4:	46bd      	mov	sp, r7
    8cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cca:	4770      	bx	lr

00008ccc <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    8ccc:	b480      	push	{r7}
    8cce:	b083      	sub	sp, #12
    8cd0:	af00      	add	r7, sp, #0
    8cd2:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    8cd4:	687b      	ldr	r3, [r7, #4]
    8cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8cda:	61da      	str	r2, [r3, #28]
}
    8cdc:	bf00      	nop
    8cde:	370c      	adds	r7, #12
    8ce0:	46bd      	mov	sp, r7
    8ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ce6:	4770      	bx	lr

00008ce8 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    8ce8:	b480      	push	{r7}
    8cea:	b083      	sub	sp, #12
    8cec:	af00      	add	r7, sp, #0
    8cee:	6078      	str	r0, [r7, #4]
    8cf0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    8cf2:	687b      	ldr	r3, [r7, #4]
    8cf4:	683a      	ldr	r2, [r7, #0]
    8cf6:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8cf8:	bf00      	nop
    8cfa:	370c      	adds	r7, #12
    8cfc:	46bd      	mov	sp, r7
    8cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d02:	4770      	bx	lr

00008d04 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    8d04:	b480      	push	{r7}
    8d06:	b083      	sub	sp, #12
    8d08:	af00      	add	r7, sp, #0
    8d0a:	6078      	str	r0, [r7, #4]
    8d0c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    8d0e:	687b      	ldr	r3, [r7, #4]
    8d10:	683a      	ldr	r2, [r7, #0]
    8d12:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8d14:	bf00      	nop
    8d16:	370c      	adds	r7, #12
    8d18:	46bd      	mov	sp, r7
    8d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d1e:	4770      	bx	lr

00008d20 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    8d20:	b480      	push	{r7}
    8d22:	b083      	sub	sp, #12
    8d24:	af00      	add	r7, sp, #0
    8d26:	6078      	str	r0, [r7, #4]
    8d28:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    8d2a:	687b      	ldr	r3, [r7, #4]
    8d2c:	683a      	ldr	r2, [r7, #0]
    8d2e:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8d30:	bf00      	nop
    8d32:	370c      	adds	r7, #12
    8d34:	46bd      	mov	sp, r7
    8d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d3a:	4770      	bx	lr

00008d3c <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    8d3c:	b480      	push	{r7}
    8d3e:	b083      	sub	sp, #12
    8d40:	af00      	add	r7, sp, #0
    8d42:	6078      	str	r0, [r7, #4]
    8d44:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    8d46:	687b      	ldr	r3, [r7, #4]
    8d48:	683a      	ldr	r2, [r7, #0]
    8d4a:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8d4c:	bf00      	nop
    8d4e:	370c      	adds	r7, #12
    8d50:	46bd      	mov	sp, r7
    8d52:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d56:	4770      	bx	lr

00008d58 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    8d58:	b480      	push	{r7}
    8d5a:	b085      	sub	sp, #20
    8d5c:	af00      	add	r7, sp, #0
    8d5e:	6078      	str	r0, [r7, #4]
    8d60:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    8d62:	687b      	ldr	r3, [r7, #4]
    8d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8d66:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    8d68:	68fb      	ldr	r3, [r7, #12]
    8d6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    8d6e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    8d70:	683b      	ldr	r3, [r7, #0]
    8d72:	b2db      	uxtb	r3, r3
    8d74:	68fa      	ldr	r2, [r7, #12]
    8d76:	4313      	orrs	r3, r2
    8d78:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    8d7a:	687b      	ldr	r3, [r7, #4]
    8d7c:	68fa      	ldr	r2, [r7, #12]
    8d7e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8d80:	bf00      	nop
    8d82:	3714      	adds	r7, #20
    8d84:	46bd      	mov	sp, r7
    8d86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d8a:	4770      	bx	lr

00008d8c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    8d8c:	b480      	push	{r7}
    8d8e:	b085      	sub	sp, #20
    8d90:	af00      	add	r7, sp, #0
    8d92:	6078      	str	r0, [r7, #4]
    8d94:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    8d96:	687b      	ldr	r3, [r7, #4]
    8d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8d9a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    8d9c:	68fb      	ldr	r3, [r7, #12]
    8d9e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    8da2:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    8da4:	683b      	ldr	r3, [r7, #0]
    8da6:	041b      	lsls	r3, r3, #16
    8da8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    8dac:	68fa      	ldr	r2, [r7, #12]
    8dae:	4313      	orrs	r3, r2
    8db0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    8db2:	687b      	ldr	r3, [r7, #4]
    8db4:	68fa      	ldr	r2, [r7, #12]
    8db6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8db8:	bf00      	nop
    8dba:	3714      	adds	r7, #20
    8dbc:	46bd      	mov	sp, r7
    8dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dc2:	4770      	bx	lr

00008dc4 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    8dc4:	b480      	push	{r7}
    8dc6:	b083      	sub	sp, #12
    8dc8:	af00      	add	r7, sp, #0
    8dca:	6078      	str	r0, [r7, #4]
    8dcc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    8dce:	687b      	ldr	r3, [r7, #4]
    8dd0:	683a      	ldr	r2, [r7, #0]
    8dd2:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8dd4:	bf00      	nop
    8dd6:	370c      	adds	r7, #12
    8dd8:	46bd      	mov	sp, r7
    8dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dde:	4770      	bx	lr

00008de0 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    8de0:	b480      	push	{r7}
    8de2:	b083      	sub	sp, #12
    8de4:	af00      	add	r7, sp, #0
    8de6:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    8de8:	687b      	ldr	r3, [r7, #4]
    8dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    8dec:	4618      	mov	r0, r3
    8dee:	370c      	adds	r7, #12
    8df0:	46bd      	mov	sp, r7
    8df2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8df6:	4770      	bx	lr

00008df8 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    8df8:	b480      	push	{r7}
    8dfa:	b085      	sub	sp, #20
    8dfc:	af00      	add	r7, sp, #0
    8dfe:	60f8      	str	r0, [r7, #12]
    8e00:	60b9      	str	r1, [r7, #8]
    8e02:	607a      	str	r2, [r7, #4]
	while (count--) {
    8e04:	e007      	b.n	8e16 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    8e06:	68fb      	ldr	r3, [r7, #12]
    8e08:	1c5a      	adds	r2, r3, #1
    8e0a:	60fa      	str	r2, [r7, #12]
    8e0c:	68ba      	ldr	r2, [r7, #8]
    8e0e:	1c51      	adds	r1, r2, #1
    8e10:	60b9      	str	r1, [r7, #8]
    8e12:	7812      	ldrb	r2, [r2, #0]
    8e14:	701a      	strb	r2, [r3, #0]
	while (count--) {
    8e16:	687b      	ldr	r3, [r7, #4]
    8e18:	1e5a      	subs	r2, r3, #1
    8e1a:	607a      	str	r2, [r7, #4]
    8e1c:	2b00      	cmp	r3, #0
    8e1e:	d1f2      	bne.n	8e06 <_qspi_memcpy+0xe>
	}
}
    8e20:	bf00      	nop
    8e22:	3714      	adds	r7, #20
    8e24:	46bd      	mov	sp, r7
    8e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e2a:	4770      	bx	lr

00008e2c <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    8e2c:	b580      	push	{r7, lr}
    8e2e:	b082      	sub	sp, #8
    8e30:	af00      	add	r7, sp, #0
    8e32:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    8e34:	4903      	ldr	r1, [pc, #12]	; (8e44 <_qspi_end_transfer+0x18>)
    8e36:	6878      	ldr	r0, [r7, #4]
    8e38:	4b03      	ldr	r3, [pc, #12]	; (8e48 <_qspi_end_transfer+0x1c>)
    8e3a:	4798      	blx	r3
}
    8e3c:	bf00      	nop
    8e3e:	3708      	adds	r7, #8
    8e40:	46bd      	mov	sp, r7
    8e42:	bd80      	pop	{r7, pc}
    8e44:	01000002 	.word	0x01000002
    8e48:	00008ce9 	.word	0x00008ce9

00008e4c <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    8e4c:	b580      	push	{r7, lr}
    8e4e:	b082      	sub	sp, #8
    8e50:	af00      	add	r7, sp, #0
    8e52:	6078      	str	r0, [r7, #4]
    8e54:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    8e56:	687b      	ldr	r3, [r7, #4]
    8e58:	2b00      	cmp	r3, #0
    8e5a:	d004      	beq.n	8e66 <_qspi_sync_init+0x1a>
    8e5c:	683b      	ldr	r3, [r7, #0]
    8e5e:	2b00      	cmp	r3, #0
    8e60:	d001      	beq.n	8e66 <_qspi_sync_init+0x1a>
    8e62:	2301      	movs	r3, #1
    8e64:	e000      	b.n	8e68 <_qspi_sync_init+0x1c>
    8e66:	2300      	movs	r3, #0
    8e68:	f003 0301 	and.w	r3, r3, #1
    8e6c:	b2db      	uxtb	r3, r3
    8e6e:	2240      	movs	r2, #64	; 0x40
    8e70:	490c      	ldr	r1, [pc, #48]	; (8ea4 <_qspi_sync_init+0x58>)
    8e72:	4618      	mov	r0, r3
    8e74:	4b0c      	ldr	r3, [pc, #48]	; (8ea8 <_qspi_sync_init+0x5c>)
    8e76:	4798      	blx	r3
	dev->prvt = hw;
    8e78:	687b      	ldr	r3, [r7, #4]
    8e7a:	683a      	ldr	r2, [r7, #0]
    8e7c:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    8e7e:	687b      	ldr	r3, [r7, #4]
    8e80:	681b      	ldr	r3, [r3, #0]
    8e82:	2101      	movs	r1, #1
    8e84:	4618      	mov	r0, r3
    8e86:	4b09      	ldr	r3, [pc, #36]	; (8eac <_qspi_sync_init+0x60>)
    8e88:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    8e8a:	4909      	ldr	r1, [pc, #36]	; (8eb0 <_qspi_sync_init+0x64>)
    8e8c:	6838      	ldr	r0, [r7, #0]
    8e8e:	4b09      	ldr	r3, [pc, #36]	; (8eb4 <_qspi_sync_init+0x68>)
    8e90:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    8e92:	4909      	ldr	r1, [pc, #36]	; (8eb8 <_qspi_sync_init+0x6c>)
    8e94:	6838      	ldr	r0, [r7, #0]
    8e96:	4b09      	ldr	r3, [pc, #36]	; (8ebc <_qspi_sync_init+0x70>)
    8e98:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    8e9a:	2300      	movs	r3, #0
}
    8e9c:	4618      	mov	r0, r3
    8e9e:	3708      	adds	r7, #8
    8ea0:	46bd      	mov	sp, r7
    8ea2:	bd80      	pop	{r7, pc}
    8ea4:	0001d1e0 	.word	0x0001d1e0
    8ea8:	00006991 	.word	0x00006991
    8eac:	00008ce9 	.word	0x00008ce9
    8eb0:	06000011 	.word	0x06000011
    8eb4:	00008d05 	.word	0x00008d05
    8eb8:	00241300 	.word	0x00241300
    8ebc:	00008d21 	.word	0x00008d21

00008ec0 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    8ec0:	b580      	push	{r7, lr}
    8ec2:	b082      	sub	sp, #8
    8ec4:	af00      	add	r7, sp, #0
    8ec6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    8ec8:	687b      	ldr	r3, [r7, #4]
    8eca:	681b      	ldr	r3, [r3, #0]
    8ecc:	2102      	movs	r1, #2
    8ece:	4618      	mov	r0, r3
    8ed0:	4b03      	ldr	r3, [pc, #12]	; (8ee0 <_qspi_sync_enable+0x20>)
    8ed2:	4798      	blx	r3
	return ERR_NONE;
    8ed4:	2300      	movs	r3, #0
}
    8ed6:	4618      	mov	r0, r3
    8ed8:	3708      	adds	r7, #8
    8eda:	46bd      	mov	sp, r7
    8edc:	bd80      	pop	{r7, pc}
    8ede:	bf00      	nop
    8ee0:	00008ce9 	.word	0x00008ce9

00008ee4 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    8ee4:	b580      	push	{r7, lr}
    8ee6:	b082      	sub	sp, #8
    8ee8:	af00      	add	r7, sp, #0
    8eea:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    8eec:	687b      	ldr	r3, [r7, #4]
    8eee:	681b      	ldr	r3, [r3, #0]
    8ef0:	2100      	movs	r1, #0
    8ef2:	4618      	mov	r0, r3
    8ef4:	4b03      	ldr	r3, [pc, #12]	; (8f04 <_qspi_sync_disable+0x20>)
    8ef6:	4798      	blx	r3
	return ERR_NONE;
    8ef8:	2300      	movs	r3, #0
}
    8efa:	4618      	mov	r0, r3
    8efc:	3708      	adds	r7, #8
    8efe:	46bd      	mov	sp, r7
    8f00:	bd80      	pop	{r7, pc}
    8f02:	bf00      	nop
    8f04:	00008ce9 	.word	0x00008ce9

00008f08 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8f08:	b580      	push	{r7, lr}
    8f0a:	b084      	sub	sp, #16
    8f0c:	af00      	add	r7, sp, #0
    8f0e:	6078      	str	r0, [r7, #4]
    8f10:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    8f12:	687b      	ldr	r3, [r7, #4]
    8f14:	681b      	ldr	r3, [r3, #0]
    8f16:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    8f18:	683b      	ldr	r3, [r7, #0]
    8f1a:	781b      	ldrb	r3, [r3, #0]
    8f1c:	f003 0320 	and.w	r3, r3, #32
    8f20:	b2db      	uxtb	r3, r3
    8f22:	2b00      	cmp	r3, #0
    8f24:	d005      	beq.n	8f32 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    8f26:	683b      	ldr	r3, [r7, #0]
    8f28:	689b      	ldr	r3, [r3, #8]
    8f2a:	4619      	mov	r1, r3
    8f2c:	68f8      	ldr	r0, [r7, #12]
    8f2e:	4b13      	ldr	r3, [pc, #76]	; (8f7c <_qspi_sync_command_set_ifr+0x74>)
    8f30:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    8f32:	683b      	ldr	r3, [r7, #0]
    8f34:	781b      	ldrb	r3, [r3, #0]
    8f36:	f003 0310 	and.w	r3, r3, #16
    8f3a:	b2db      	uxtb	r3, r3
    8f3c:	2b00      	cmp	r3, #0
    8f3e:	d005      	beq.n	8f4c <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    8f40:	683b      	ldr	r3, [r7, #0]
    8f42:	791b      	ldrb	r3, [r3, #4]
    8f44:	4619      	mov	r1, r3
    8f46:	68f8      	ldr	r0, [r7, #12]
    8f48:	4b0d      	ldr	r3, [pc, #52]	; (8f80 <_qspi_sync_command_set_ifr+0x78>)
    8f4a:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    8f4c:	683b      	ldr	r3, [r7, #0]
    8f4e:	781b      	ldrb	r3, [r3, #0]
    8f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8f54:	b2db      	uxtb	r3, r3
    8f56:	2b00      	cmp	r3, #0
    8f58:	d005      	beq.n	8f66 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    8f5a:	683b      	ldr	r3, [r7, #0]
    8f5c:	795b      	ldrb	r3, [r3, #5]
    8f5e:	4619      	mov	r1, r3
    8f60:	68f8      	ldr	r0, [r7, #12]
    8f62:	4b08      	ldr	r3, [pc, #32]	; (8f84 <_qspi_sync_command_set_ifr+0x7c>)
    8f64:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    8f66:	683b      	ldr	r3, [r7, #0]
    8f68:	681b      	ldr	r3, [r3, #0]
    8f6a:	4619      	mov	r1, r3
    8f6c:	68f8      	ldr	r0, [r7, #12]
    8f6e:	4b06      	ldr	r3, [pc, #24]	; (8f88 <_qspi_sync_command_set_ifr+0x80>)
    8f70:	4798      	blx	r3
}
    8f72:	bf00      	nop
    8f74:	3710      	adds	r7, #16
    8f76:	46bd      	mov	sp, r7
    8f78:	bd80      	pop	{r7, pc}
    8f7a:	bf00      	nop
    8f7c:	00008d3d 	.word	0x00008d3d
    8f80:	00008d59 	.word	0x00008d59
    8f84:	00008d8d 	.word	0x00008d8d
    8f88:	00008dc5 	.word	0x00008dc5

00008f8c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8f8c:	b580      	push	{r7, lr}
    8f8e:	b084      	sub	sp, #16
    8f90:	af00      	add	r7, sp, #0
    8f92:	6078      	str	r0, [r7, #4]
    8f94:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    8f96:	687b      	ldr	r3, [r7, #4]
    8f98:	681b      	ldr	r3, [r3, #0]
    8f9a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    8f9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    8fa0:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    8fa2:	683b      	ldr	r3, [r7, #0]
    8fa4:	781b      	ldrb	r3, [r3, #0]
    8fa6:	f003 0320 	and.w	r3, r3, #32
    8faa:	b2db      	uxtb	r3, r3
    8fac:	2b00      	cmp	r3, #0
    8fae:	d004      	beq.n	8fba <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    8fb0:	683b      	ldr	r3, [r7, #0]
    8fb2:	689b      	ldr	r3, [r3, #8]
    8fb4:	68fa      	ldr	r2, [r7, #12]
    8fb6:	4413      	add	r3, r2
    8fb8:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    8fba:	68b8      	ldr	r0, [r7, #8]
    8fbc:	4b18      	ldr	r3, [pc, #96]	; (9020 <_qspi_sync_run_transfer+0x94>)
    8fbe:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    8fc0:	683b      	ldr	r3, [r7, #0]
    8fc2:	691b      	ldr	r3, [r3, #16]
    8fc4:	2b00      	cmp	r3, #0
    8fc6:	d103      	bne.n	8fd0 <_qspi_sync_run_transfer+0x44>
    8fc8:	683b      	ldr	r3, [r7, #0]
    8fca:	695b      	ldr	r3, [r3, #20]
    8fcc:	2b00      	cmp	r3, #0
    8fce:	d001      	beq.n	8fd4 <_qspi_sync_run_transfer+0x48>
    8fd0:	2301      	movs	r3, #1
    8fd2:	e000      	b.n	8fd6 <_qspi_sync_run_transfer+0x4a>
    8fd4:	2300      	movs	r3, #0
    8fd6:	f003 0301 	and.w	r3, r3, #1
    8fda:	b2db      	uxtb	r3, r3
    8fdc:	2282      	movs	r2, #130	; 0x82
    8fde:	4911      	ldr	r1, [pc, #68]	; (9024 <_qspi_sync_run_transfer+0x98>)
    8fe0:	4618      	mov	r0, r3
    8fe2:	4b11      	ldr	r3, [pc, #68]	; (9028 <_qspi_sync_run_transfer+0x9c>)
    8fe4:	4798      	blx	r3

	if (cmd->tx_buf) {
    8fe6:	683b      	ldr	r3, [r7, #0]
    8fe8:	691b      	ldr	r3, [r3, #16]
    8fea:	2b00      	cmp	r3, #0
    8fec:	d008      	beq.n	9000 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    8fee:	683b      	ldr	r3, [r7, #0]
    8ff0:	6919      	ldr	r1, [r3, #16]
    8ff2:	683b      	ldr	r3, [r7, #0]
    8ff4:	68db      	ldr	r3, [r3, #12]
    8ff6:	461a      	mov	r2, r3
    8ff8:	68f8      	ldr	r0, [r7, #12]
    8ffa:	4b0c      	ldr	r3, [pc, #48]	; (902c <_qspi_sync_run_transfer+0xa0>)
    8ffc:	4798      	blx	r3
    8ffe:	e007      	b.n	9010 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    9000:	683b      	ldr	r3, [r7, #0]
    9002:	6958      	ldr	r0, [r3, #20]
    9004:	683b      	ldr	r3, [r7, #0]
    9006:	68db      	ldr	r3, [r3, #12]
    9008:	461a      	mov	r2, r3
    900a:	68f9      	ldr	r1, [r7, #12]
    900c:	4b07      	ldr	r3, [pc, #28]	; (902c <_qspi_sync_run_transfer+0xa0>)
    900e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    9010:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9014:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    9018:	bf00      	nop
    901a:	3710      	adds	r7, #16
    901c:	46bd      	mov	sp, r7
    901e:	bd80      	pop	{r7, pc}
    9020:	00008de1 	.word	0x00008de1
    9024:	0001d1e0 	.word	0x0001d1e0
    9028:	00006991 	.word	0x00006991
    902c:	00008df9 	.word	0x00008df9

00009030 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    9030:	b580      	push	{r7, lr}
    9032:	b082      	sub	sp, #8
    9034:	af00      	add	r7, sp, #0
    9036:	6078      	str	r0, [r7, #4]
    9038:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    903a:	6839      	ldr	r1, [r7, #0]
    903c:	6878      	ldr	r0, [r7, #4]
    903e:	4b14      	ldr	r3, [pc, #80]	; (9090 <_qspi_sync_serial_run_command+0x60>)
    9040:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    9042:	683b      	ldr	r3, [r7, #0]
    9044:	781b      	ldrb	r3, [r3, #0]
    9046:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    904a:	b2db      	uxtb	r3, r3
    904c:	2b00      	cmp	r3, #0
    904e:	d003      	beq.n	9058 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    9050:	6839      	ldr	r1, [r7, #0]
    9052:	6878      	ldr	r0, [r7, #4]
    9054:	4b0f      	ldr	r3, [pc, #60]	; (9094 <_qspi_sync_serial_run_command+0x64>)
    9056:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    9058:	687b      	ldr	r3, [r7, #4]
    905a:	681b      	ldr	r3, [r3, #0]
    905c:	4618      	mov	r0, r3
    905e:	4b0e      	ldr	r3, [pc, #56]	; (9098 <_qspi_sync_serial_run_command+0x68>)
    9060:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    9062:	bf00      	nop
    9064:	687b      	ldr	r3, [r7, #4]
    9066:	681b      	ldr	r3, [r3, #0]
    9068:	4618      	mov	r0, r3
    906a:	4b0c      	ldr	r3, [pc, #48]	; (909c <_qspi_sync_serial_run_command+0x6c>)
    906c:	4798      	blx	r3
    906e:	4603      	mov	r3, r0
    9070:	f083 0301 	eor.w	r3, r3, #1
    9074:	b2db      	uxtb	r3, r3
    9076:	2b00      	cmp	r3, #0
    9078:	d1f4      	bne.n	9064 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    907a:	687b      	ldr	r3, [r7, #4]
    907c:	681b      	ldr	r3, [r3, #0]
    907e:	4618      	mov	r0, r3
    9080:	4b07      	ldr	r3, [pc, #28]	; (90a0 <_qspi_sync_serial_run_command+0x70>)
    9082:	4798      	blx	r3
	return ERR_NONE;
    9084:	2300      	movs	r3, #0
}
    9086:	4618      	mov	r0, r3
    9088:	3708      	adds	r7, #8
    908a:	46bd      	mov	sp, r7
    908c:	bd80      	pop	{r7, pc}
    908e:	bf00      	nop
    9090:	00008f09 	.word	0x00008f09
    9094:	00008f8d 	.word	0x00008f8d
    9098:	00008e2d 	.word	0x00008e2d
    909c:	00008ca5 	.word	0x00008ca5
    90a0:	00008ccd 	.word	0x00008ccd

000090a4 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    90a4:	b480      	push	{r7}
    90a6:	b083      	sub	sp, #12
    90a8:	af00      	add	r7, sp, #0
    90aa:	6078      	str	r0, [r7, #4]
    90ac:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    90ae:	bf00      	nop
    90b0:	687b      	ldr	r3, [r7, #4]
    90b2:	691a      	ldr	r2, [r3, #16]
    90b4:	683b      	ldr	r3, [r7, #0]
    90b6:	4013      	ands	r3, r2
    90b8:	2b00      	cmp	r3, #0
    90ba:	d1f9      	bne.n	90b0 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    90bc:	bf00      	nop
    90be:	370c      	adds	r7, #12
    90c0:	46bd      	mov	sp, r7
    90c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    90c6:	4770      	bx	lr

000090c8 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    90c8:	b480      	push	{r7}
    90ca:	b083      	sub	sp, #12
    90cc:	af00      	add	r7, sp, #0
    90ce:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    90d0:	687b      	ldr	r3, [r7, #4]
    90d2:	f44f 7280 	mov.w	r2, #256	; 0x100
    90d6:	819a      	strh	r2, [r3, #12]
}
    90d8:	bf00      	nop
    90da:	370c      	adds	r7, #12
    90dc:	46bd      	mov	sp, r7
    90de:	f85d 7b04 	ldr.w	r7, [sp], #4
    90e2:	4770      	bx	lr

000090e4 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    90e4:	b480      	push	{r7}
    90e6:	b083      	sub	sp, #12
    90e8:	af00      	add	r7, sp, #0
    90ea:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    90ec:	687b      	ldr	r3, [r7, #4]
    90ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    90f2:	819a      	strh	r2, [r3, #12]
}
    90f4:	bf00      	nop
    90f6:	370c      	adds	r7, #12
    90f8:	46bd      	mov	sp, r7
    90fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    90fe:	4770      	bx	lr

00009100 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    9100:	b480      	push	{r7}
    9102:	b083      	sub	sp, #12
    9104:	af00      	add	r7, sp, #0
    9106:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    9108:	687b      	ldr	r3, [r7, #4]
    910a:	899b      	ldrh	r3, [r3, #12]
    910c:	b29b      	uxth	r3, r3
}
    910e:	4618      	mov	r0, r3
    9110:	370c      	adds	r7, #12
    9112:	46bd      	mov	sp, r7
    9114:	f85d 7b04 	ldr.w	r7, [sp], #4
    9118:	4770      	bx	lr

0000911a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    911a:	b480      	push	{r7}
    911c:	b083      	sub	sp, #12
    911e:	af00      	add	r7, sp, #0
    9120:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    9122:	687b      	ldr	r3, [r7, #4]
    9124:	895b      	ldrh	r3, [r3, #10]
    9126:	b29b      	uxth	r3, r3
}
    9128:	4618      	mov	r0, r3
    912a:	370c      	adds	r7, #12
    912c:	46bd      	mov	sp, r7
    912e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9132:	4770      	bx	lr

00009134 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    9134:	b580      	push	{r7, lr}
    9136:	b082      	sub	sp, #8
    9138:	af00      	add	r7, sp, #0
    913a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    913c:	687b      	ldr	r3, [r7, #4]
    913e:	881b      	ldrh	r3, [r3, #0]
    9140:	b29b      	uxth	r3, r3
    9142:	f043 0301 	orr.w	r3, r3, #1
    9146:	b29a      	uxth	r2, r3
    9148:	687b      	ldr	r3, [r7, #4]
    914a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    914c:	2101      	movs	r1, #1
    914e:	6878      	ldr	r0, [r7, #4]
    9150:	4b02      	ldr	r3, [pc, #8]	; (915c <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    9152:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    9154:	bf00      	nop
    9156:	3708      	adds	r7, #8
    9158:	46bd      	mov	sp, r7
    915a:	bd80      	pop	{r7, pc}
    915c:	000090a5 	.word	0x000090a5

00009160 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9160:	b580      	push	{r7, lr}
    9162:	b082      	sub	sp, #8
    9164:	af00      	add	r7, sp, #0
    9166:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    9168:	687b      	ldr	r3, [r7, #4]
    916a:	881b      	ldrh	r3, [r3, #0]
    916c:	b29b      	uxth	r3, r3
    916e:	f043 0302 	orr.w	r3, r3, #2
    9172:	b29a      	uxth	r2, r3
    9174:	687b      	ldr	r3, [r7, #4]
    9176:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    9178:	f248 0103 	movw	r1, #32771	; 0x8003
    917c:	6878      	ldr	r0, [r7, #4]
    917e:	4b03      	ldr	r3, [pc, #12]	; (918c <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    9180:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    9182:	bf00      	nop
    9184:	3708      	adds	r7, #8
    9186:	46bd      	mov	sp, r7
    9188:	bd80      	pop	{r7, pc}
    918a:	bf00      	nop
    918c:	000090a5 	.word	0x000090a5

00009190 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9190:	b580      	push	{r7, lr}
    9192:	b084      	sub	sp, #16
    9194:	af00      	add	r7, sp, #0
    9196:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    9198:	f248 0103 	movw	r1, #32771	; 0x8003
    919c:	6878      	ldr	r0, [r7, #4]
    919e:	4b0a      	ldr	r3, [pc, #40]	; (91c8 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    91a0:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    91a2:	687b      	ldr	r3, [r7, #4]
    91a4:	881b      	ldrh	r3, [r3, #0]
    91a6:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    91a8:	89fb      	ldrh	r3, [r7, #14]
    91aa:	085b      	lsrs	r3, r3, #1
    91ac:	b29b      	uxth	r3, r3
    91ae:	f003 0301 	and.w	r3, r3, #1
    91b2:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    91b4:	89fb      	ldrh	r3, [r7, #14]
    91b6:	2b00      	cmp	r3, #0
    91b8:	bf14      	ite	ne
    91ba:	2301      	movne	r3, #1
    91bc:	2300      	moveq	r3, #0
    91be:	b2db      	uxtb	r3, r3
}
    91c0:	4618      	mov	r0, r3
    91c2:	3710      	adds	r7, #16
    91c4:	46bd      	mov	sp, r7
    91c6:	bd80      	pop	{r7, pc}
    91c8:	000090a5 	.word	0x000090a5

000091cc <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    91cc:	b580      	push	{r7, lr}
    91ce:	b082      	sub	sp, #8
    91d0:	af00      	add	r7, sp, #0
    91d2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    91d4:	687b      	ldr	r3, [r7, #4]
    91d6:	881b      	ldrh	r3, [r3, #0]
    91d8:	b29b      	uxth	r3, r3
    91da:	f023 0302 	bic.w	r3, r3, #2
    91de:	b29a      	uxth	r2, r3
    91e0:	687b      	ldr	r3, [r7, #4]
    91e2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    91e4:	f248 0103 	movw	r1, #32771	; 0x8003
    91e8:	6878      	ldr	r0, [r7, #4]
    91ea:	4b03      	ldr	r3, [pc, #12]	; (91f8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    91ec:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    91ee:	bf00      	nop
    91f0:	3708      	adds	r7, #8
    91f2:	46bd      	mov	sp, r7
    91f4:	bd80      	pop	{r7, pc}
    91f6:	bf00      	nop
    91f8:	000090a5 	.word	0x000090a5

000091fc <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    91fc:	b580      	push	{r7, lr}
    91fe:	b082      	sub	sp, #8
    9200:	af00      	add	r7, sp, #0
    9202:	6078      	str	r0, [r7, #4]
    9204:	460b      	mov	r3, r1
    9206:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    9208:	687b      	ldr	r3, [r7, #4]
    920a:	887a      	ldrh	r2, [r7, #2]
    920c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    920e:	f248 0103 	movw	r1, #32771	; 0x8003
    9212:	6878      	ldr	r0, [r7, #4]
    9214:	4b02      	ldr	r3, [pc, #8]	; (9220 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    9216:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    9218:	bf00      	nop
    921a:	3708      	adds	r7, #8
    921c:	46bd      	mov	sp, r7
    921e:	bd80      	pop	{r7, pc}
    9220:	000090a5 	.word	0x000090a5

00009224 <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    9224:	b580      	push	{r7, lr}
    9226:	b082      	sub	sp, #8
    9228:	af00      	add	r7, sp, #0
    922a:	6078      	str	r0, [r7, #4]
    922c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    922e:	687b      	ldr	r3, [r7, #4]
    9230:	683a      	ldr	r2, [r7, #0]
    9232:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    9234:	2108      	movs	r1, #8
    9236:	6878      	ldr	r0, [r7, #4]
    9238:	4b02      	ldr	r3, [pc, #8]	; (9244 <hri_rtcmode0_write_COUNT_reg+0x20>)
    923a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    923c:	bf00      	nop
    923e:	3708      	adds	r7, #8
    9240:	46bd      	mov	sp, r7
    9242:	bd80      	pop	{r7, pc}
    9244:	000090a5 	.word	0x000090a5

00009248 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    9248:	b580      	push	{r7, lr}
    924a:	b082      	sub	sp, #8
    924c:	af00      	add	r7, sp, #0
    924e:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    9250:	2108      	movs	r1, #8
    9252:	6878      	ldr	r0, [r7, #4]
    9254:	4b03      	ldr	r3, [pc, #12]	; (9264 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    9256:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    9258:	687b      	ldr	r3, [r7, #4]
    925a:	699b      	ldr	r3, [r3, #24]
}
    925c:	4618      	mov	r0, r3
    925e:	3708      	adds	r7, #8
    9260:	46bd      	mov	sp, r7
    9262:	bd80      	pop	{r7, pc}
    9264:	000090a5 	.word	0x000090a5

00009268 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    9268:	b480      	push	{r7}
    926a:	b083      	sub	sp, #12
    926c:	af00      	add	r7, sp, #0
    926e:	6078      	str	r0, [r7, #4]
    9270:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    9272:	687b      	ldr	r3, [r7, #4]
    9274:	683a      	ldr	r2, [r7, #0]
    9276:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    9278:	bf00      	nop
    927a:	370c      	adds	r7, #12
    927c:	46bd      	mov	sp, r7
    927e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9282:	4770      	bx	lr

00009284 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    9284:	b580      	push	{r7, lr}
    9286:	b082      	sub	sp, #8
    9288:	af00      	add	r7, sp, #0
    928a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    928c:	687b      	ldr	r3, [r7, #4]
    928e:	2b00      	cmp	r3, #0
    9290:	d005      	beq.n	929e <_calendar_init+0x1a>
    9292:	687b      	ldr	r3, [r7, #4]
    9294:	681b      	ldr	r3, [r3, #0]
    9296:	2b00      	cmp	r3, #0
    9298:	d001      	beq.n	929e <_calendar_init+0x1a>
    929a:	2301      	movs	r3, #1
    929c:	e000      	b.n	92a0 <_calendar_init+0x1c>
    929e:	2300      	movs	r3, #0
    92a0:	f003 0301 	and.w	r3, r3, #1
    92a4:	b2db      	uxtb	r3, r3
    92a6:	222f      	movs	r2, #47	; 0x2f
    92a8:	491b      	ldr	r1, [pc, #108]	; (9318 <_calendar_init+0x94>)
    92aa:	4618      	mov	r0, r3
    92ac:	4b1b      	ldr	r3, [pc, #108]	; (931c <_calendar_init+0x98>)
    92ae:	4798      	blx	r3

	_rtc_dev = dev;
    92b0:	4a1b      	ldr	r2, [pc, #108]	; (9320 <_calendar_init+0x9c>)
    92b2:	687b      	ldr	r3, [r7, #4]
    92b4:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    92b6:	687b      	ldr	r3, [r7, #4]
    92b8:	681b      	ldr	r3, [r3, #0]
    92ba:	4618      	mov	r0, r3
    92bc:	4b19      	ldr	r3, [pc, #100]	; (9324 <_calendar_init+0xa0>)
    92be:	4798      	blx	r3
    92c0:	4603      	mov	r3, r0
    92c2:	2b00      	cmp	r3, #0
    92c4:	d00a      	beq.n	92dc <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    92c6:	687b      	ldr	r3, [r7, #4]
    92c8:	681b      	ldr	r3, [r3, #0]
    92ca:	4618      	mov	r0, r3
    92cc:	4b16      	ldr	r3, [pc, #88]	; (9328 <_calendar_init+0xa4>)
    92ce:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    92d0:	687b      	ldr	r3, [r7, #4]
    92d2:	681b      	ldr	r3, [r3, #0]
    92d4:	2102      	movs	r1, #2
    92d6:	4618      	mov	r0, r3
    92d8:	4b14      	ldr	r3, [pc, #80]	; (932c <_calendar_init+0xa8>)
    92da:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    92dc:	687b      	ldr	r3, [r7, #4]
    92de:	681b      	ldr	r3, [r3, #0]
    92e0:	4618      	mov	r0, r3
    92e2:	4b13      	ldr	r3, [pc, #76]	; (9330 <_calendar_init+0xac>)
    92e4:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    92e6:	687b      	ldr	r3, [r7, #4]
    92e8:	681b      	ldr	r3, [r3, #0]
    92ea:	2101      	movs	r1, #1
    92ec:	4618      	mov	r0, r3
    92ee:	4b0f      	ldr	r3, [pc, #60]	; (932c <_calendar_init+0xa8>)
    92f0:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    92f2:	687b      	ldr	r3, [r7, #4]
    92f4:	681b      	ldr	r3, [r3, #0]
    92f6:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    92fa:	4618      	mov	r0, r3
    92fc:	4b0d      	ldr	r3, [pc, #52]	; (9334 <_calendar_init+0xb0>)
    92fe:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    9300:	687b      	ldr	r3, [r7, #4]
    9302:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    9304:	2100      	movs	r1, #0
    9306:	4618      	mov	r0, r3
    9308:	4b0b      	ldr	r3, [pc, #44]	; (9338 <_calendar_init+0xb4>)
    930a:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    930c:	2300      	movs	r3, #0
}
    930e:	4618      	mov	r0, r3
    9310:	3708      	adds	r7, #8
    9312:	46bd      	mov	sp, r7
    9314:	bd80      	pop	{r7, pc}
    9316:	bf00      	nop
    9318:	0001d1f8 	.word	0x0001d1f8
    931c:	00006991 	.word	0x00006991
    9320:	20003578 	.word	0x20003578
    9324:	00009191 	.word	0x00009191
    9328:	000091cd 	.word	0x000091cd
    932c:	000090a5 	.word	0x000090a5
    9330:	00009135 	.word	0x00009135
    9334:	000091fd 	.word	0x000091fd
    9338:	00009269 	.word	0x00009269

0000933c <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    933c:	b580      	push	{r7, lr}
    933e:	b082      	sub	sp, #8
    9340:	af00      	add	r7, sp, #0
    9342:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    9344:	687b      	ldr	r3, [r7, #4]
    9346:	2b00      	cmp	r3, #0
    9348:	d005      	beq.n	9356 <_calendar_enable+0x1a>
    934a:	687b      	ldr	r3, [r7, #4]
    934c:	681b      	ldr	r3, [r3, #0]
    934e:	2b00      	cmp	r3, #0
    9350:	d001      	beq.n	9356 <_calendar_enable+0x1a>
    9352:	2301      	movs	r3, #1
    9354:	e000      	b.n	9358 <_calendar_enable+0x1c>
    9356:	2300      	movs	r3, #0
    9358:	f003 0301 	and.w	r3, r3, #1
    935c:	b2db      	uxtb	r3, r3
    935e:	2275      	movs	r2, #117	; 0x75
    9360:	4906      	ldr	r1, [pc, #24]	; (937c <_calendar_enable+0x40>)
    9362:	4618      	mov	r0, r3
    9364:	4b06      	ldr	r3, [pc, #24]	; (9380 <_calendar_enable+0x44>)
    9366:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    9368:	687b      	ldr	r3, [r7, #4]
    936a:	681b      	ldr	r3, [r3, #0]
    936c:	4618      	mov	r0, r3
    936e:	4b05      	ldr	r3, [pc, #20]	; (9384 <_calendar_enable+0x48>)
    9370:	4798      	blx	r3

	return ERR_NONE;
    9372:	2300      	movs	r3, #0
}
    9374:	4618      	mov	r0, r3
    9376:	3708      	adds	r7, #8
    9378:	46bd      	mov	sp, r7
    937a:	bd80      	pop	{r7, pc}
    937c:	0001d1f8 	.word	0x0001d1f8
    9380:	00006991 	.word	0x00006991
    9384:	00009161 	.word	0x00009161

00009388 <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    9388:	b580      	push	{r7, lr}
    938a:	b082      	sub	sp, #8
    938c:	af00      	add	r7, sp, #0
    938e:	6078      	str	r0, [r7, #4]
    9390:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    9392:	687b      	ldr	r3, [r7, #4]
    9394:	2b00      	cmp	r3, #0
    9396:	d005      	beq.n	93a4 <_calendar_set_counter+0x1c>
    9398:	687b      	ldr	r3, [r7, #4]
    939a:	681b      	ldr	r3, [r3, #0]
    939c:	2b00      	cmp	r3, #0
    939e:	d001      	beq.n	93a4 <_calendar_set_counter+0x1c>
    93a0:	2301      	movs	r3, #1
    93a2:	e000      	b.n	93a6 <_calendar_set_counter+0x1e>
    93a4:	2300      	movs	r3, #0
    93a6:	f003 0301 	and.w	r3, r3, #1
    93aa:	b2db      	uxtb	r3, r3
    93ac:	228d      	movs	r2, #141	; 0x8d
    93ae:	4907      	ldr	r1, [pc, #28]	; (93cc <_calendar_set_counter+0x44>)
    93b0:	4618      	mov	r0, r3
    93b2:	4b07      	ldr	r3, [pc, #28]	; (93d0 <_calendar_set_counter+0x48>)
    93b4:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    93b6:	687b      	ldr	r3, [r7, #4]
    93b8:	681b      	ldr	r3, [r3, #0]
    93ba:	6839      	ldr	r1, [r7, #0]
    93bc:	4618      	mov	r0, r3
    93be:	4b05      	ldr	r3, [pc, #20]	; (93d4 <_calendar_set_counter+0x4c>)
    93c0:	4798      	blx	r3

	return ERR_NONE;
    93c2:	2300      	movs	r3, #0
}
    93c4:	4618      	mov	r0, r3
    93c6:	3708      	adds	r7, #8
    93c8:	46bd      	mov	sp, r7
    93ca:	bd80      	pop	{r7, pc}
    93cc:	0001d1f8 	.word	0x0001d1f8
    93d0:	00006991 	.word	0x00006991
    93d4:	00009225 	.word	0x00009225

000093d8 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    93d8:	b580      	push	{r7, lr}
    93da:	b082      	sub	sp, #8
    93dc:	af00      	add	r7, sp, #0
    93de:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    93e0:	687b      	ldr	r3, [r7, #4]
    93e2:	2b00      	cmp	r3, #0
    93e4:	d005      	beq.n	93f2 <_calendar_get_counter+0x1a>
    93e6:	687b      	ldr	r3, [r7, #4]
    93e8:	681b      	ldr	r3, [r3, #0]
    93ea:	2b00      	cmp	r3, #0
    93ec:	d001      	beq.n	93f2 <_calendar_get_counter+0x1a>
    93ee:	2301      	movs	r3, #1
    93f0:	e000      	b.n	93f4 <_calendar_get_counter+0x1c>
    93f2:	2300      	movs	r3, #0
    93f4:	f003 0301 	and.w	r3, r3, #1
    93f8:	b2db      	uxtb	r3, r3
    93fa:	2299      	movs	r2, #153	; 0x99
    93fc:	4906      	ldr	r1, [pc, #24]	; (9418 <_calendar_get_counter+0x40>)
    93fe:	4618      	mov	r0, r3
    9400:	4b06      	ldr	r3, [pc, #24]	; (941c <_calendar_get_counter+0x44>)
    9402:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    9404:	687b      	ldr	r3, [r7, #4]
    9406:	681b      	ldr	r3, [r3, #0]
    9408:	4618      	mov	r0, r3
    940a:	4b05      	ldr	r3, [pc, #20]	; (9420 <_calendar_get_counter+0x48>)
    940c:	4798      	blx	r3
    940e:	4603      	mov	r3, r0
}
    9410:	4618      	mov	r0, r3
    9412:	3708      	adds	r7, #8
    9414:	46bd      	mov	sp, r7
    9416:	bd80      	pop	{r7, pc}
    9418:	0001d1f8 	.word	0x0001d1f8
    941c:	00006991 	.word	0x00006991
    9420:	00009249 	.word	0x00009249

00009424 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    9424:	b580      	push	{r7, lr}
    9426:	b084      	sub	sp, #16
    9428:	af00      	add	r7, sp, #0
    942a:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    942c:	687b      	ldr	r3, [r7, #4]
    942e:	681b      	ldr	r3, [r3, #0]
    9430:	4618      	mov	r0, r3
    9432:	4b19      	ldr	r3, [pc, #100]	; (9498 <_rtc_interrupt_handler+0x74>)
    9434:	4798      	blx	r3
    9436:	4603      	mov	r3, r0
    9438:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    943a:	687b      	ldr	r3, [r7, #4]
    943c:	681b      	ldr	r3, [r3, #0]
    943e:	4618      	mov	r0, r3
    9440:	4b16      	ldr	r3, [pc, #88]	; (949c <_rtc_interrupt_handler+0x78>)
    9442:	4798      	blx	r3
    9444:	4603      	mov	r3, r0
    9446:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    9448:	89fa      	ldrh	r2, [r7, #14]
    944a:	89bb      	ldrh	r3, [r7, #12]
    944c:	4013      	ands	r3, r2
    944e:	b29b      	uxth	r3, r3
    9450:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9454:	2b00      	cmp	r3, #0
    9456:	d009      	beq.n	946c <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    9458:	687b      	ldr	r3, [r7, #4]
    945a:	685b      	ldr	r3, [r3, #4]
    945c:	6878      	ldr	r0, [r7, #4]
    945e:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    9460:	687b      	ldr	r3, [r7, #4]
    9462:	681b      	ldr	r3, [r3, #0]
    9464:	4618      	mov	r0, r3
    9466:	4b0e      	ldr	r3, [pc, #56]	; (94a0 <_rtc_interrupt_handler+0x7c>)
    9468:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    946a:	e010      	b.n	948e <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    946c:	89fa      	ldrh	r2, [r7, #14]
    946e:	89bb      	ldrh	r3, [r7, #12]
    9470:	4013      	ands	r3, r2
    9472:	b29b      	uxth	r3, r3
    9474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9478:	2b00      	cmp	r3, #0
    947a:	d008      	beq.n	948e <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    947c:	687b      	ldr	r3, [r7, #4]
    947e:	689b      	ldr	r3, [r3, #8]
    9480:	6878      	ldr	r0, [r7, #4]
    9482:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    9484:	687b      	ldr	r3, [r7, #4]
    9486:	681b      	ldr	r3, [r3, #0]
    9488:	4618      	mov	r0, r3
    948a:	4b06      	ldr	r3, [pc, #24]	; (94a4 <_rtc_interrupt_handler+0x80>)
    948c:	4798      	blx	r3
}
    948e:	bf00      	nop
    9490:	3710      	adds	r7, #16
    9492:	46bd      	mov	sp, r7
    9494:	bd80      	pop	{r7, pc}
    9496:	bf00      	nop
    9498:	00009101 	.word	0x00009101
    949c:	0000911b 	.word	0x0000911b
    94a0:	000090c9 	.word	0x000090c9
    94a4:	000090e5 	.word	0x000090e5

000094a8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    94a8:	b580      	push	{r7, lr}
    94aa:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    94ac:	4b03      	ldr	r3, [pc, #12]	; (94bc <RTC_Handler+0x14>)
    94ae:	681b      	ldr	r3, [r3, #0]
    94b0:	4618      	mov	r0, r3
    94b2:	4b03      	ldr	r3, [pc, #12]	; (94c0 <RTC_Handler+0x18>)
    94b4:	4798      	blx	r3
}
    94b6:	bf00      	nop
    94b8:	bd80      	pop	{r7, pc}
    94ba:	bf00      	nop
    94bc:	20003578 	.word	0x20003578
    94c0:	00009425 	.word	0x00009425

000094c4 <__NVIC_EnableIRQ>:
{
    94c4:	b480      	push	{r7}
    94c6:	b083      	sub	sp, #12
    94c8:	af00      	add	r7, sp, #0
    94ca:	4603      	mov	r3, r0
    94cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    94ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    94d2:	2b00      	cmp	r3, #0
    94d4:	db0b      	blt.n	94ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    94d6:	4909      	ldr	r1, [pc, #36]	; (94fc <__NVIC_EnableIRQ+0x38>)
    94d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    94dc:	095b      	lsrs	r3, r3, #5
    94de:	88fa      	ldrh	r2, [r7, #6]
    94e0:	f002 021f 	and.w	r2, r2, #31
    94e4:	2001      	movs	r0, #1
    94e6:	fa00 f202 	lsl.w	r2, r0, r2
    94ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    94ee:	bf00      	nop
    94f0:	370c      	adds	r7, #12
    94f2:	46bd      	mov	sp, r7
    94f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    94f8:	4770      	bx	lr
    94fa:	bf00      	nop
    94fc:	e000e100 	.word	0xe000e100

00009500 <__NVIC_DisableIRQ>:
{
    9500:	b480      	push	{r7}
    9502:	b083      	sub	sp, #12
    9504:	af00      	add	r7, sp, #0
    9506:	4603      	mov	r3, r0
    9508:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    950a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    950e:	2b00      	cmp	r3, #0
    9510:	db10      	blt.n	9534 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9512:	490b      	ldr	r1, [pc, #44]	; (9540 <__NVIC_DisableIRQ+0x40>)
    9514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9518:	095b      	lsrs	r3, r3, #5
    951a:	88fa      	ldrh	r2, [r7, #6]
    951c:	f002 021f 	and.w	r2, r2, #31
    9520:	2001      	movs	r0, #1
    9522:	fa00 f202 	lsl.w	r2, r0, r2
    9526:	3320      	adds	r3, #32
    9528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    952c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9530:	f3bf 8f6f 	isb	sy
}
    9534:	bf00      	nop
    9536:	370c      	adds	r7, #12
    9538:	46bd      	mov	sp, r7
    953a:	f85d 7b04 	ldr.w	r7, [sp], #4
    953e:	4770      	bx	lr
    9540:	e000e100 	.word	0xe000e100

00009544 <__NVIC_ClearPendingIRQ>:
{
    9544:	b480      	push	{r7}
    9546:	b083      	sub	sp, #12
    9548:	af00      	add	r7, sp, #0
    954a:	4603      	mov	r3, r0
    954c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    954e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9552:	2b00      	cmp	r3, #0
    9554:	db0c      	blt.n	9570 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9556:	4909      	ldr	r1, [pc, #36]	; (957c <__NVIC_ClearPendingIRQ+0x38>)
    9558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    955c:	095b      	lsrs	r3, r3, #5
    955e:	88fa      	ldrh	r2, [r7, #6]
    9560:	f002 021f 	and.w	r2, r2, #31
    9564:	2001      	movs	r0, #1
    9566:	fa00 f202 	lsl.w	r2, r0, r2
    956a:	3360      	adds	r3, #96	; 0x60
    956c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9570:	bf00      	nop
    9572:	370c      	adds	r7, #12
    9574:	46bd      	mov	sp, r7
    9576:	f85d 7b04 	ldr.w	r7, [sp], #4
    957a:	4770      	bx	lr
    957c:	e000e100 	.word	0xe000e100

00009580 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    9580:	b480      	push	{r7}
    9582:	b083      	sub	sp, #12
    9584:	af00      	add	r7, sp, #0
    9586:	6078      	str	r0, [r7, #4]
    9588:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    958a:	bf00      	nop
    958c:	687b      	ldr	r3, [r7, #4]
    958e:	69da      	ldr	r2, [r3, #28]
    9590:	683b      	ldr	r3, [r7, #0]
    9592:	4013      	ands	r3, r2
    9594:	2b00      	cmp	r3, #0
    9596:	d1f9      	bne.n	958c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    9598:	bf00      	nop
    959a:	370c      	adds	r7, #12
    959c:	46bd      	mov	sp, r7
    959e:	f85d 7b04 	ldr.w	r7, [sp], #4
    95a2:	4770      	bx	lr

000095a4 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    95a4:	b480      	push	{r7}
    95a6:	b083      	sub	sp, #12
    95a8:	af00      	add	r7, sp, #0
    95aa:	6078      	str	r0, [r7, #4]
    95ac:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    95ae:	687b      	ldr	r3, [r7, #4]
    95b0:	69da      	ldr	r2, [r3, #28]
    95b2:	683b      	ldr	r3, [r7, #0]
    95b4:	4013      	ands	r3, r2
    95b6:	2b00      	cmp	r3, #0
    95b8:	bf14      	ite	ne
    95ba:	2301      	movne	r3, #1
    95bc:	2300      	moveq	r3, #0
    95be:	b2db      	uxtb	r3, r3
}
    95c0:	4618      	mov	r0, r3
    95c2:	370c      	adds	r7, #12
    95c4:	46bd      	mov	sp, r7
    95c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    95ca:	4770      	bx	lr

000095cc <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    95cc:	b480      	push	{r7}
    95ce:	b083      	sub	sp, #12
    95d0:	af00      	add	r7, sp, #0
    95d2:	6078      	str	r0, [r7, #4]
    95d4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    95d6:	bf00      	nop
    95d8:	687b      	ldr	r3, [r7, #4]
    95da:	69da      	ldr	r2, [r3, #28]
    95dc:	683b      	ldr	r3, [r7, #0]
    95de:	4013      	ands	r3, r2
    95e0:	2b00      	cmp	r3, #0
    95e2:	d1f9      	bne.n	95d8 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    95e4:	bf00      	nop
    95e6:	370c      	adds	r7, #12
    95e8:	46bd      	mov	sp, r7
    95ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    95ee:	4770      	bx	lr

000095f0 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    95f0:	b480      	push	{r7}
    95f2:	b083      	sub	sp, #12
    95f4:	af00      	add	r7, sp, #0
    95f6:	6078      	str	r0, [r7, #4]
    95f8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    95fa:	687b      	ldr	r3, [r7, #4]
    95fc:	69da      	ldr	r2, [r3, #28]
    95fe:	683b      	ldr	r3, [r7, #0]
    9600:	4013      	ands	r3, r2
    9602:	2b00      	cmp	r3, #0
    9604:	bf14      	ite	ne
    9606:	2301      	movne	r3, #1
    9608:	2300      	moveq	r3, #0
    960a:	b2db      	uxtb	r3, r3
}
    960c:	4618      	mov	r0, r3
    960e:	370c      	adds	r7, #12
    9610:	46bd      	mov	sp, r7
    9612:	f85d 7b04 	ldr.w	r7, [sp], #4
    9616:	4770      	bx	lr

00009618 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    9618:	b480      	push	{r7}
    961a:	b083      	sub	sp, #12
    961c:	af00      	add	r7, sp, #0
    961e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    9620:	687b      	ldr	r3, [r7, #4]
    9622:	2201      	movs	r2, #1
    9624:	761a      	strb	r2, [r3, #24]
}
    9626:	bf00      	nop
    9628:	370c      	adds	r7, #12
    962a:	46bd      	mov	sp, r7
    962c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9630:	4770      	bx	lr

00009632 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    9632:	b480      	push	{r7}
    9634:	b083      	sub	sp, #12
    9636:	af00      	add	r7, sp, #0
    9638:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    963a:	687b      	ldr	r3, [r7, #4]
    963c:	2202      	movs	r2, #2
    963e:	761a      	strb	r2, [r3, #24]
}
    9640:	bf00      	nop
    9642:	370c      	adds	r7, #12
    9644:	46bd      	mov	sp, r7
    9646:	f85d 7b04 	ldr.w	r7, [sp], #4
    964a:	4770      	bx	lr

0000964c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    964c:	b480      	push	{r7}
    964e:	b083      	sub	sp, #12
    9650:	af00      	add	r7, sp, #0
    9652:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    9654:	687b      	ldr	r3, [r7, #4]
    9656:	7e1b      	ldrb	r3, [r3, #24]
    9658:	b2db      	uxtb	r3, r3
}
    965a:	4618      	mov	r0, r3
    965c:	370c      	adds	r7, #12
    965e:	46bd      	mov	sp, r7
    9660:	f85d 7b04 	ldr.w	r7, [sp], #4
    9664:	4770      	bx	lr

00009666 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    9666:	b480      	push	{r7}
    9668:	b083      	sub	sp, #12
    966a:	af00      	add	r7, sp, #0
    966c:	6078      	str	r0, [r7, #4]
    966e:	460b      	mov	r3, r1
    9670:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    9672:	687b      	ldr	r3, [r7, #4]
    9674:	78fa      	ldrb	r2, [r7, #3]
    9676:	761a      	strb	r2, [r3, #24]
}
    9678:	bf00      	nop
    967a:	370c      	adds	r7, #12
    967c:	46bd      	mov	sp, r7
    967e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9682:	4770      	bx	lr

00009684 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    9684:	b480      	push	{r7}
    9686:	b085      	sub	sp, #20
    9688:	af00      	add	r7, sp, #0
    968a:	6078      	str	r0, [r7, #4]
    968c:	460b      	mov	r3, r1
    968e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    9690:	687b      	ldr	r3, [r7, #4]
    9692:	7e1b      	ldrb	r3, [r3, #24]
    9694:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9696:	7bfa      	ldrb	r2, [r7, #15]
    9698:	78fb      	ldrb	r3, [r7, #3]
    969a:	4013      	ands	r3, r2
    969c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    969e:	7bfb      	ldrb	r3, [r7, #15]
}
    96a0:	4618      	mov	r0, r3
    96a2:	3714      	adds	r7, #20
    96a4:	46bd      	mov	sp, r7
    96a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    96aa:	4770      	bx	lr

000096ac <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    96ac:	b480      	push	{r7}
    96ae:	b083      	sub	sp, #12
    96b0:	af00      	add	r7, sp, #0
    96b2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    96b4:	687b      	ldr	r3, [r7, #4]
    96b6:	7e1b      	ldrb	r3, [r3, #24]
    96b8:	b2db      	uxtb	r3, r3
}
    96ba:	4618      	mov	r0, r3
    96bc:	370c      	adds	r7, #12
    96be:	46bd      	mov	sp, r7
    96c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    96c4:	4770      	bx	lr

000096c6 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    96c6:	b480      	push	{r7}
    96c8:	b083      	sub	sp, #12
    96ca:	af00      	add	r7, sp, #0
    96cc:	6078      	str	r0, [r7, #4]
    96ce:	460b      	mov	r3, r1
    96d0:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    96d2:	687b      	ldr	r3, [r7, #4]
    96d4:	78fa      	ldrb	r2, [r7, #3]
    96d6:	761a      	strb	r2, [r3, #24]
}
    96d8:	bf00      	nop
    96da:	370c      	adds	r7, #12
    96dc:	46bd      	mov	sp, r7
    96de:	f85d 7b04 	ldr.w	r7, [sp], #4
    96e2:	4770      	bx	lr

000096e4 <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    96e4:	b480      	push	{r7}
    96e6:	b083      	sub	sp, #12
    96e8:	af00      	add	r7, sp, #0
    96ea:	6078      	str	r0, [r7, #4]
    96ec:	460b      	mov	r3, r1
    96ee:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    96f0:	78fb      	ldrb	r3, [r7, #3]
    96f2:	f083 0301 	eor.w	r3, r3, #1
    96f6:	b2db      	uxtb	r3, r3
    96f8:	2b00      	cmp	r3, #0
    96fa:	d003      	beq.n	9704 <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    96fc:	687b      	ldr	r3, [r7, #4]
    96fe:	2201      	movs	r2, #1
    9700:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    9702:	e002      	b.n	970a <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    9704:	687b      	ldr	r3, [r7, #4]
    9706:	2201      	movs	r2, #1
    9708:	759a      	strb	r2, [r3, #22]
}
    970a:	bf00      	nop
    970c:	370c      	adds	r7, #12
    970e:	46bd      	mov	sp, r7
    9710:	f85d 7b04 	ldr.w	r7, [sp], #4
    9714:	4770      	bx	lr

00009716 <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    9716:	b480      	push	{r7}
    9718:	b083      	sub	sp, #12
    971a:	af00      	add	r7, sp, #0
    971c:	6078      	str	r0, [r7, #4]
    971e:	460b      	mov	r3, r1
    9720:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    9722:	78fb      	ldrb	r3, [r7, #3]
    9724:	f083 0301 	eor.w	r3, r3, #1
    9728:	b2db      	uxtb	r3, r3
    972a:	2b00      	cmp	r3, #0
    972c:	d003      	beq.n	9736 <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    972e:	687b      	ldr	r3, [r7, #4]
    9730:	2202      	movs	r2, #2
    9732:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    9734:	e002      	b.n	973c <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    9736:	687b      	ldr	r3, [r7, #4]
    9738:	2202      	movs	r2, #2
    973a:	759a      	strb	r2, [r3, #22]
}
    973c:	bf00      	nop
    973e:	370c      	adds	r7, #12
    9740:	46bd      	mov	sp, r7
    9742:	f85d 7b04 	ldr.w	r7, [sp], #4
    9746:	4770      	bx	lr

00009748 <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    9748:	b480      	push	{r7}
    974a:	b083      	sub	sp, #12
    974c:	af00      	add	r7, sp, #0
    974e:	6078      	str	r0, [r7, #4]
    9750:	460b      	mov	r3, r1
    9752:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    9754:	78fb      	ldrb	r3, [r7, #3]
    9756:	f083 0301 	eor.w	r3, r3, #1
    975a:	b2db      	uxtb	r3, r3
    975c:	2b00      	cmp	r3, #0
    975e:	d003      	beq.n	9768 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    9760:	687b      	ldr	r3, [r7, #4]
    9762:	2280      	movs	r2, #128	; 0x80
    9764:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    9766:	e002      	b.n	976e <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    9768:	687b      	ldr	r3, [r7, #4]
    976a:	2280      	movs	r2, #128	; 0x80
    976c:	759a      	strb	r2, [r3, #22]
}
    976e:	bf00      	nop
    9770:	370c      	adds	r7, #12
    9772:	46bd      	mov	sp, r7
    9774:	f85d 7b04 	ldr.w	r7, [sp], #4
    9778:	4770      	bx	lr

0000977a <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    977a:	b480      	push	{r7}
    977c:	b083      	sub	sp, #12
    977e:	af00      	add	r7, sp, #0
    9780:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    9782:	687b      	ldr	r3, [r7, #4]
    9784:	2201      	movs	r2, #1
    9786:	759a      	strb	r2, [r3, #22]
}
    9788:	bf00      	nop
    978a:	370c      	adds	r7, #12
    978c:	46bd      	mov	sp, r7
    978e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9792:	4770      	bx	lr

00009794 <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    9794:	b480      	push	{r7}
    9796:	b083      	sub	sp, #12
    9798:	af00      	add	r7, sp, #0
    979a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    979c:	687b      	ldr	r3, [r7, #4]
    979e:	2201      	movs	r2, #1
    97a0:	751a      	strb	r2, [r3, #20]
}
    97a2:	bf00      	nop
    97a4:	370c      	adds	r7, #12
    97a6:	46bd      	mov	sp, r7
    97a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    97ac:	4770      	bx	lr

000097ae <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    97ae:	b480      	push	{r7}
    97b0:	b083      	sub	sp, #12
    97b2:	af00      	add	r7, sp, #0
    97b4:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    97b6:	687b      	ldr	r3, [r7, #4]
    97b8:	2202      	movs	r2, #2
    97ba:	759a      	strb	r2, [r3, #22]
}
    97bc:	bf00      	nop
    97be:	370c      	adds	r7, #12
    97c0:	46bd      	mov	sp, r7
    97c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    97c6:	4770      	bx	lr

000097c8 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    97c8:	b480      	push	{r7}
    97ca:	b083      	sub	sp, #12
    97cc:	af00      	add	r7, sp, #0
    97ce:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    97d0:	687b      	ldr	r3, [r7, #4]
    97d2:	2202      	movs	r2, #2
    97d4:	751a      	strb	r2, [r3, #20]
}
    97d6:	bf00      	nop
    97d8:	370c      	adds	r7, #12
    97da:	46bd      	mov	sp, r7
    97dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    97e0:	4770      	bx	lr

000097e2 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    97e2:	b480      	push	{r7}
    97e4:	b083      	sub	sp, #12
    97e6:	af00      	add	r7, sp, #0
    97e8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    97ea:	687b      	ldr	r3, [r7, #4]
    97ec:	2204      	movs	r2, #4
    97ee:	759a      	strb	r2, [r3, #22]
}
    97f0:	bf00      	nop
    97f2:	370c      	adds	r7, #12
    97f4:	46bd      	mov	sp, r7
    97f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    97fa:	4770      	bx	lr

000097fc <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    97fc:	b480      	push	{r7}
    97fe:	b083      	sub	sp, #12
    9800:	af00      	add	r7, sp, #0
    9802:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    9804:	687b      	ldr	r3, [r7, #4]
    9806:	2204      	movs	r2, #4
    9808:	751a      	strb	r2, [r3, #20]
}
    980a:	bf00      	nop
    980c:	370c      	adds	r7, #12
    980e:	46bd      	mov	sp, r7
    9810:	f85d 7b04 	ldr.w	r7, [sp], #4
    9814:	4770      	bx	lr

00009816 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    9816:	b480      	push	{r7}
    9818:	b083      	sub	sp, #12
    981a:	af00      	add	r7, sp, #0
    981c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    981e:	687b      	ldr	r3, [r7, #4]
    9820:	7d9b      	ldrb	r3, [r3, #22]
    9822:	b2db      	uxtb	r3, r3
}
    9824:	4618      	mov	r0, r3
    9826:	370c      	adds	r7, #12
    9828:	46bd      	mov	sp, r7
    982a:	f85d 7b04 	ldr.w	r7, [sp], #4
    982e:	4770      	bx	lr

00009830 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9830:	b580      	push	{r7, lr}
    9832:	b082      	sub	sp, #8
    9834:	af00      	add	r7, sp, #0
    9836:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    9838:	687b      	ldr	r3, [r7, #4]
    983a:	681b      	ldr	r3, [r3, #0]
    983c:	f043 0202 	orr.w	r2, r3, #2
    9840:	687b      	ldr	r3, [r7, #4]
    9842:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9844:	2103      	movs	r1, #3
    9846:	6878      	ldr	r0, [r7, #4]
    9848:	4b02      	ldr	r3, [pc, #8]	; (9854 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    984a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    984c:	bf00      	nop
    984e:	3708      	adds	r7, #8
    9850:	46bd      	mov	sp, r7
    9852:	bd80      	pop	{r7, pc}
    9854:	00009581 	.word	0x00009581

00009858 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9858:	b580      	push	{r7, lr}
    985a:	b082      	sub	sp, #8
    985c:	af00      	add	r7, sp, #0
    985e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    9860:	687b      	ldr	r3, [r7, #4]
    9862:	681b      	ldr	r3, [r3, #0]
    9864:	f023 0202 	bic.w	r2, r3, #2
    9868:	687b      	ldr	r3, [r7, #4]
    986a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    986c:	2103      	movs	r1, #3
    986e:	6878      	ldr	r0, [r7, #4]
    9870:	4b02      	ldr	r3, [pc, #8]	; (987c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    9872:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9874:	bf00      	nop
    9876:	3708      	adds	r7, #8
    9878:	46bd      	mov	sp, r7
    987a:	bd80      	pop	{r7, pc}
    987c:	00009581 	.word	0x00009581

00009880 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    9880:	b480      	push	{r7}
    9882:	b085      	sub	sp, #20
    9884:	af00      	add	r7, sp, #0
    9886:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    9888:	687b      	ldr	r3, [r7, #4]
    988a:	681b      	ldr	r3, [r3, #0]
    988c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    988e:	68fb      	ldr	r3, [r7, #12]
    9890:	0edb      	lsrs	r3, r3, #27
    9892:	f003 0301 	and.w	r3, r3, #1
    9896:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9898:	68fb      	ldr	r3, [r7, #12]
    989a:	2b00      	cmp	r3, #0
    989c:	bf14      	ite	ne
    989e:	2301      	movne	r3, #1
    98a0:	2300      	moveq	r3, #0
    98a2:	b2db      	uxtb	r3, r3
}
    98a4:	4618      	mov	r0, r3
    98a6:	3714      	adds	r7, #20
    98a8:	46bd      	mov	sp, r7
    98aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    98ae:	4770      	bx	lr

000098b0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    98b0:	b580      	push	{r7, lr}
    98b2:	b084      	sub	sp, #16
    98b4:	af00      	add	r7, sp, #0
    98b6:	6078      	str	r0, [r7, #4]
    98b8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    98ba:	2103      	movs	r1, #3
    98bc:	6878      	ldr	r0, [r7, #4]
    98be:	4b07      	ldr	r3, [pc, #28]	; (98dc <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    98c0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    98c2:	687b      	ldr	r3, [r7, #4]
    98c4:	681b      	ldr	r3, [r3, #0]
    98c6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    98c8:	68fa      	ldr	r2, [r7, #12]
    98ca:	683b      	ldr	r3, [r7, #0]
    98cc:	4013      	ands	r3, r2
    98ce:	60fb      	str	r3, [r7, #12]
	return tmp;
    98d0:	68fb      	ldr	r3, [r7, #12]
}
    98d2:	4618      	mov	r0, r3
    98d4:	3710      	adds	r7, #16
    98d6:	46bd      	mov	sp, r7
    98d8:	bd80      	pop	{r7, pc}
    98da:	bf00      	nop
    98dc:	00009581 	.word	0x00009581

000098e0 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    98e0:	b580      	push	{r7, lr}
    98e2:	b082      	sub	sp, #8
    98e4:	af00      	add	r7, sp, #0
    98e6:	6078      	str	r0, [r7, #4]
    98e8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    98ea:	687b      	ldr	r3, [r7, #4]
    98ec:	683a      	ldr	r2, [r7, #0]
    98ee:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    98f0:	2103      	movs	r1, #3
    98f2:	6878      	ldr	r0, [r7, #4]
    98f4:	4b02      	ldr	r3, [pc, #8]	; (9900 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    98f6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    98f8:	bf00      	nop
    98fa:	3708      	adds	r7, #8
    98fc:	46bd      	mov	sp, r7
    98fe:	bd80      	pop	{r7, pc}
    9900:	00009581 	.word	0x00009581

00009904 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9904:	b580      	push	{r7, lr}
    9906:	b082      	sub	sp, #8
    9908:	af00      	add	r7, sp, #0
    990a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    990c:	687b      	ldr	r3, [r7, #4]
    990e:	681b      	ldr	r3, [r3, #0]
    9910:	f043 0202 	orr.w	r2, r3, #2
    9914:	687b      	ldr	r3, [r7, #4]
    9916:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9918:	2103      	movs	r1, #3
    991a:	6878      	ldr	r0, [r7, #4]
    991c:	4b02      	ldr	r3, [pc, #8]	; (9928 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    991e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9920:	bf00      	nop
    9922:	3708      	adds	r7, #8
    9924:	46bd      	mov	sp, r7
    9926:	bd80      	pop	{r7, pc}
    9928:	000095cd 	.word	0x000095cd

0000992c <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    992c:	b580      	push	{r7, lr}
    992e:	b084      	sub	sp, #16
    9930:	af00      	add	r7, sp, #0
    9932:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9934:	2103      	movs	r1, #3
    9936:	6878      	ldr	r0, [r7, #4]
    9938:	4b09      	ldr	r3, [pc, #36]	; (9960 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    993a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    993c:	687b      	ldr	r3, [r7, #4]
    993e:	681b      	ldr	r3, [r3, #0]
    9940:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    9942:	68fb      	ldr	r3, [r7, #12]
    9944:	085b      	lsrs	r3, r3, #1
    9946:	f003 0301 	and.w	r3, r3, #1
    994a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    994c:	68fb      	ldr	r3, [r7, #12]
    994e:	2b00      	cmp	r3, #0
    9950:	bf14      	ite	ne
    9952:	2301      	movne	r3, #1
    9954:	2300      	moveq	r3, #0
    9956:	b2db      	uxtb	r3, r3
}
    9958:	4618      	mov	r0, r3
    995a:	3710      	adds	r7, #16
    995c:	46bd      	mov	sp, r7
    995e:	bd80      	pop	{r7, pc}
    9960:	000095cd 	.word	0x000095cd

00009964 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9964:	b580      	push	{r7, lr}
    9966:	b082      	sub	sp, #8
    9968:	af00      	add	r7, sp, #0
    996a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    996c:	687b      	ldr	r3, [r7, #4]
    996e:	681b      	ldr	r3, [r3, #0]
    9970:	f023 0202 	bic.w	r2, r3, #2
    9974:	687b      	ldr	r3, [r7, #4]
    9976:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9978:	2103      	movs	r1, #3
    997a:	6878      	ldr	r0, [r7, #4]
    997c:	4b02      	ldr	r3, [pc, #8]	; (9988 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    997e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9980:	bf00      	nop
    9982:	3708      	adds	r7, #8
    9984:	46bd      	mov	sp, r7
    9986:	bd80      	pop	{r7, pc}
    9988:	000095cd 	.word	0x000095cd

0000998c <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    998c:	b580      	push	{r7, lr}
    998e:	b084      	sub	sp, #16
    9990:	af00      	add	r7, sp, #0
    9992:	6078      	str	r0, [r7, #4]
    9994:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9996:	2103      	movs	r1, #3
    9998:	6878      	ldr	r0, [r7, #4]
    999a:	4b07      	ldr	r3, [pc, #28]	; (99b8 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    999c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    999e:	687b      	ldr	r3, [r7, #4]
    99a0:	681b      	ldr	r3, [r3, #0]
    99a2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    99a4:	68fa      	ldr	r2, [r7, #12]
    99a6:	683b      	ldr	r3, [r7, #0]
    99a8:	4013      	ands	r3, r2
    99aa:	60fb      	str	r3, [r7, #12]
	return tmp;
    99ac:	68fb      	ldr	r3, [r7, #12]
}
    99ae:	4618      	mov	r0, r3
    99b0:	3710      	adds	r7, #16
    99b2:	46bd      	mov	sp, r7
    99b4:	bd80      	pop	{r7, pc}
    99b6:	bf00      	nop
    99b8:	000095cd 	.word	0x000095cd

000099bc <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    99bc:	b580      	push	{r7, lr}
    99be:	b082      	sub	sp, #8
    99c0:	af00      	add	r7, sp, #0
    99c2:	6078      	str	r0, [r7, #4]
    99c4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    99c6:	687b      	ldr	r3, [r7, #4]
    99c8:	683a      	ldr	r2, [r7, #0]
    99ca:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    99cc:	2103      	movs	r1, #3
    99ce:	6878      	ldr	r0, [r7, #4]
    99d0:	4b02      	ldr	r3, [pc, #8]	; (99dc <hri_sercomspi_write_CTRLA_reg+0x20>)
    99d2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    99d4:	bf00      	nop
    99d6:	3708      	adds	r7, #8
    99d8:	46bd      	mov	sp, r7
    99da:	bd80      	pop	{r7, pc}
    99dc:	000095cd 	.word	0x000095cd

000099e0 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    99e0:	b580      	push	{r7, lr}
    99e2:	b082      	sub	sp, #8
    99e4:	af00      	add	r7, sp, #0
    99e6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    99e8:	687b      	ldr	r3, [r7, #4]
    99ea:	685b      	ldr	r3, [r3, #4]
    99ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    99f0:	687b      	ldr	r3, [r7, #4]
    99f2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    99f4:	2104      	movs	r1, #4
    99f6:	6878      	ldr	r0, [r7, #4]
    99f8:	4b02      	ldr	r3, [pc, #8]	; (9a04 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    99fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    99fc:	bf00      	nop
    99fe:	3708      	adds	r7, #8
    9a00:	46bd      	mov	sp, r7
    9a02:	bd80      	pop	{r7, pc}
    9a04:	00009581 	.word	0x00009581

00009a08 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    9a08:	b580      	push	{r7, lr}
    9a0a:	b082      	sub	sp, #8
    9a0c:	af00      	add	r7, sp, #0
    9a0e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    9a10:	687b      	ldr	r3, [r7, #4]
    9a12:	685b      	ldr	r3, [r3, #4]
    9a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    9a18:	687b      	ldr	r3, [r7, #4]
    9a1a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9a1c:	2104      	movs	r1, #4
    9a1e:	6878      	ldr	r0, [r7, #4]
    9a20:	4b02      	ldr	r3, [pc, #8]	; (9a2c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    9a22:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9a24:	bf00      	nop
    9a26:	3708      	adds	r7, #8
    9a28:	46bd      	mov	sp, r7
    9a2a:	bd80      	pop	{r7, pc}
    9a2c:	00009581 	.word	0x00009581

00009a30 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    9a30:	b580      	push	{r7, lr}
    9a32:	b082      	sub	sp, #8
    9a34:	af00      	add	r7, sp, #0
    9a36:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9a38:	687b      	ldr	r3, [r7, #4]
    9a3a:	685b      	ldr	r3, [r3, #4]
    9a3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    9a40:	687b      	ldr	r3, [r7, #4]
    9a42:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9a44:	2104      	movs	r1, #4
    9a46:	6878      	ldr	r0, [r7, #4]
    9a48:	4b02      	ldr	r3, [pc, #8]	; (9a54 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    9a4a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9a4c:	bf00      	nop
    9a4e:	3708      	adds	r7, #8
    9a50:	46bd      	mov	sp, r7
    9a52:	bd80      	pop	{r7, pc}
    9a54:	00009581 	.word	0x00009581

00009a58 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    9a58:	b580      	push	{r7, lr}
    9a5a:	b082      	sub	sp, #8
    9a5c:	af00      	add	r7, sp, #0
    9a5e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    9a60:	687b      	ldr	r3, [r7, #4]
    9a62:	685b      	ldr	r3, [r3, #4]
    9a64:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    9a68:	687b      	ldr	r3, [r7, #4]
    9a6a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9a6c:	2104      	movs	r1, #4
    9a6e:	6878      	ldr	r0, [r7, #4]
    9a70:	4b02      	ldr	r3, [pc, #8]	; (9a7c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    9a72:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9a74:	bf00      	nop
    9a76:	3708      	adds	r7, #8
    9a78:	46bd      	mov	sp, r7
    9a7a:	bd80      	pop	{r7, pc}
    9a7c:	00009581 	.word	0x00009581

00009a80 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    9a80:	b580      	push	{r7, lr}
    9a82:	b082      	sub	sp, #8
    9a84:	af00      	add	r7, sp, #0
    9a86:	6078      	str	r0, [r7, #4]
    9a88:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    9a8a:	687b      	ldr	r3, [r7, #4]
    9a8c:	685a      	ldr	r2, [r3, #4]
    9a8e:	683b      	ldr	r3, [r7, #0]
    9a90:	041b      	lsls	r3, r3, #16
    9a92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    9a96:	431a      	orrs	r2, r3
    9a98:	687b      	ldr	r3, [r7, #4]
    9a9a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9a9c:	2104      	movs	r1, #4
    9a9e:	6878      	ldr	r0, [r7, #4]
    9aa0:	4b02      	ldr	r3, [pc, #8]	; (9aac <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    9aa2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9aa4:	bf00      	nop
    9aa6:	3708      	adds	r7, #8
    9aa8:	46bd      	mov	sp, r7
    9aaa:	bd80      	pop	{r7, pc}
    9aac:	00009581 	.word	0x00009581

00009ab0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    9ab0:	b580      	push	{r7, lr}
    9ab2:	b082      	sub	sp, #8
    9ab4:	af00      	add	r7, sp, #0
    9ab6:	6078      	str	r0, [r7, #4]
    9ab8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    9aba:	687b      	ldr	r3, [r7, #4]
    9abc:	683a      	ldr	r2, [r7, #0]
    9abe:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9ac0:	2104      	movs	r1, #4
    9ac2:	6878      	ldr	r0, [r7, #4]
    9ac4:	4b02      	ldr	r3, [pc, #8]	; (9ad0 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    9ac6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9ac8:	bf00      	nop
    9aca:	3708      	adds	r7, #8
    9acc:	46bd      	mov	sp, r7
    9ace:	bd80      	pop	{r7, pc}
    9ad0:	00009581 	.word	0x00009581

00009ad4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    9ad4:	b580      	push	{r7, lr}
    9ad6:	b082      	sub	sp, #8
    9ad8:	af00      	add	r7, sp, #0
    9ada:	6078      	str	r0, [r7, #4]
    9adc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    9ade:	687b      	ldr	r3, [r7, #4]
    9ae0:	683a      	ldr	r2, [r7, #0]
    9ae2:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    9ae4:	2117      	movs	r1, #23
    9ae6:	6878      	ldr	r0, [r7, #4]
    9ae8:	4b02      	ldr	r3, [pc, #8]	; (9af4 <hri_sercomspi_write_CTRLB_reg+0x20>)
    9aea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9aec:	bf00      	nop
    9aee:	3708      	adds	r7, #8
    9af0:	46bd      	mov	sp, r7
    9af2:	bd80      	pop	{r7, pc}
    9af4:	000095cd 	.word	0x000095cd

00009af8 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    9af8:	b480      	push	{r7}
    9afa:	b083      	sub	sp, #12
    9afc:	af00      	add	r7, sp, #0
    9afe:	6078      	str	r0, [r7, #4]
    9b00:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    9b02:	687b      	ldr	r3, [r7, #4]
    9b04:	683a      	ldr	r2, [r7, #0]
    9b06:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9b08:	bf00      	nop
    9b0a:	370c      	adds	r7, #12
    9b0c:	46bd      	mov	sp, r7
    9b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b12:	4770      	bx	lr

00009b14 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    9b14:	b480      	push	{r7}
    9b16:	b083      	sub	sp, #12
    9b18:	af00      	add	r7, sp, #0
    9b1a:	6078      	str	r0, [r7, #4]
    9b1c:	460b      	mov	r3, r1
    9b1e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    9b20:	687b      	ldr	r3, [r7, #4]
    9b22:	78fa      	ldrb	r2, [r7, #3]
    9b24:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9b26:	bf00      	nop
    9b28:	370c      	adds	r7, #12
    9b2a:	46bd      	mov	sp, r7
    9b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b30:	4770      	bx	lr
	...

00009b34 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    9b34:	b580      	push	{r7, lr}
    9b36:	b084      	sub	sp, #16
    9b38:	af00      	add	r7, sp, #0
    9b3a:	6078      	str	r0, [r7, #4]
    9b3c:	460b      	mov	r3, r1
    9b3e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    9b40:	687b      	ldr	r3, [r7, #4]
    9b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9b44:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    9b46:	68fb      	ldr	r3, [r7, #12]
    9b48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    9b4c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    9b4e:	78fb      	ldrb	r3, [r7, #3]
    9b50:	039b      	lsls	r3, r3, #14
    9b52:	461a      	mov	r2, r3
    9b54:	68fb      	ldr	r3, [r7, #12]
    9b56:	4313      	orrs	r3, r2
    9b58:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    9b5a:	687b      	ldr	r3, [r7, #4]
    9b5c:	68fa      	ldr	r2, [r7, #12]
    9b5e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9b60:	2104      	movs	r1, #4
    9b62:	6878      	ldr	r0, [r7, #4]
    9b64:	4b02      	ldr	r3, [pc, #8]	; (9b70 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    9b66:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9b68:	bf00      	nop
    9b6a:	3710      	adds	r7, #16
    9b6c:	46bd      	mov	sp, r7
    9b6e:	bd80      	pop	{r7, pc}
    9b70:	00009581 	.word	0x00009581

00009b74 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    9b74:	b580      	push	{r7, lr}
    9b76:	b082      	sub	sp, #8
    9b78:	af00      	add	r7, sp, #0
    9b7a:	6078      	str	r0, [r7, #4]
    9b7c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    9b7e:	687b      	ldr	r3, [r7, #4]
    9b80:	683a      	ldr	r2, [r7, #0]
    9b82:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9b84:	2104      	movs	r1, #4
    9b86:	6878      	ldr	r0, [r7, #4]
    9b88:	4b02      	ldr	r3, [pc, #8]	; (9b94 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    9b8a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9b8c:	bf00      	nop
    9b8e:	3708      	adds	r7, #8
    9b90:	46bd      	mov	sp, r7
    9b92:	bd80      	pop	{r7, pc}
    9b94:	00009581 	.word	0x00009581

00009b98 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    9b98:	b580      	push	{r7, lr}
    9b9a:	b082      	sub	sp, #8
    9b9c:	af00      	add	r7, sp, #0
    9b9e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9ba0:	2104      	movs	r1, #4
    9ba2:	6878      	ldr	r0, [r7, #4]
    9ba4:	4b03      	ldr	r3, [pc, #12]	; (9bb4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    9ba6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    9ba8:	687b      	ldr	r3, [r7, #4]
    9baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    9bac:	4618      	mov	r0, r3
    9bae:	3708      	adds	r7, #8
    9bb0:	46bd      	mov	sp, r7
    9bb2:	bd80      	pop	{r7, pc}
    9bb4:	00009581 	.word	0x00009581

00009bb8 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    9bb8:	b480      	push	{r7}
    9bba:	b083      	sub	sp, #12
    9bbc:	af00      	add	r7, sp, #0
    9bbe:	6078      	str	r0, [r7, #4]
    9bc0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    9bc2:	687b      	ldr	r3, [r7, #4]
    9bc4:	683a      	ldr	r2, [r7, #0]
    9bc6:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9bc8:	bf00      	nop
    9bca:	370c      	adds	r7, #12
    9bcc:	46bd      	mov	sp, r7
    9bce:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bd2:	4770      	bx	lr

00009bd4 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    9bd4:	b580      	push	{r7, lr}
    9bd6:	b082      	sub	sp, #8
    9bd8:	af00      	add	r7, sp, #0
    9bda:	6078      	str	r0, [r7, #4]
    9bdc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    9bde:	687b      	ldr	r3, [r7, #4]
    9be0:	683a      	ldr	r2, [r7, #0]
    9be2:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9be4:	2104      	movs	r1, #4
    9be6:	6878      	ldr	r0, [r7, #4]
    9be8:	4b02      	ldr	r3, [pc, #8]	; (9bf4 <hri_sercomi2cm_write_DATA_reg+0x20>)
    9bea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9bec:	bf00      	nop
    9bee:	3708      	adds	r7, #8
    9bf0:	46bd      	mov	sp, r7
    9bf2:	bd80      	pop	{r7, pc}
    9bf4:	00009581 	.word	0x00009581

00009bf8 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    9bf8:	b580      	push	{r7, lr}
    9bfa:	b082      	sub	sp, #8
    9bfc:	af00      	add	r7, sp, #0
    9bfe:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9c00:	2104      	movs	r1, #4
    9c02:	6878      	ldr	r0, [r7, #4]
    9c04:	4b03      	ldr	r3, [pc, #12]	; (9c14 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    9c06:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    9c08:	687b      	ldr	r3, [r7, #4]
    9c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    9c0c:	4618      	mov	r0, r3
    9c0e:	3708      	adds	r7, #8
    9c10:	46bd      	mov	sp, r7
    9c12:	bd80      	pop	{r7, pc}
    9c14:	00009581 	.word	0x00009581

00009c18 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    9c18:	b480      	push	{r7}
    9c1a:	b083      	sub	sp, #12
    9c1c:	af00      	add	r7, sp, #0
    9c1e:	6078      	str	r0, [r7, #4]
    9c20:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    9c22:	687b      	ldr	r3, [r7, #4]
    9c24:	683a      	ldr	r2, [r7, #0]
    9c26:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9c28:	bf00      	nop
    9c2a:	370c      	adds	r7, #12
    9c2c:	46bd      	mov	sp, r7
    9c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c32:	4770      	bx	lr

00009c34 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    9c34:	b480      	push	{r7}
    9c36:	b083      	sub	sp, #12
    9c38:	af00      	add	r7, sp, #0
    9c3a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    9c3c:	687b      	ldr	r3, [r7, #4]
    9c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    9c40:	4618      	mov	r0, r3
    9c42:	370c      	adds	r7, #12
    9c44:	46bd      	mov	sp, r7
    9c46:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c4a:	4770      	bx	lr

00009c4c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    9c4c:	b480      	push	{r7}
    9c4e:	b083      	sub	sp, #12
    9c50:	af00      	add	r7, sp, #0
    9c52:	6078      	str	r0, [r7, #4]
    9c54:	460b      	mov	r3, r1
    9c56:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    9c58:	687b      	ldr	r3, [r7, #4]
    9c5a:	78fa      	ldrb	r2, [r7, #3]
    9c5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9c60:	bf00      	nop
    9c62:	370c      	adds	r7, #12
    9c64:	46bd      	mov	sp, r7
    9c66:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c6a:	4770      	bx	lr

00009c6c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    9c6c:	b480      	push	{r7}
    9c6e:	b083      	sub	sp, #12
    9c70:	af00      	add	r7, sp, #0
    9c72:	6078      	str	r0, [r7, #4]
    9c74:	460b      	mov	r3, r1
    9c76:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    9c78:	687b      	ldr	r3, [r7, #4]
    9c7a:	887a      	ldrh	r2, [r7, #2]
    9c7c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9c7e:	bf00      	nop
    9c80:	370c      	adds	r7, #12
    9c82:	46bd      	mov	sp, r7
    9c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c88:	4770      	bx	lr
	...

00009c8c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    9c8c:	b580      	push	{r7, lr}
    9c8e:	b082      	sub	sp, #8
    9c90:	af00      	add	r7, sp, #0
    9c92:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9c94:	2104      	movs	r1, #4
    9c96:	6878      	ldr	r0, [r7, #4]
    9c98:	4b06      	ldr	r3, [pc, #24]	; (9cb4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    9c9a:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    9c9c:	687b      	ldr	r3, [r7, #4]
    9c9e:	8b5b      	ldrh	r3, [r3, #26]
    9ca0:	b29b      	uxth	r3, r3
    9ca2:	091b      	lsrs	r3, r3, #4
    9ca4:	b29b      	uxth	r3, r3
    9ca6:	f003 0303 	and.w	r3, r3, #3
    9caa:	b29b      	uxth	r3, r3
}
    9cac:	4618      	mov	r0, r3
    9cae:	3708      	adds	r7, #8
    9cb0:	46bd      	mov	sp, r7
    9cb2:	bd80      	pop	{r7, pc}
    9cb4:	00009581 	.word	0x00009581

00009cb8 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    9cb8:	b580      	push	{r7, lr}
    9cba:	b082      	sub	sp, #8
    9cbc:	af00      	add	r7, sp, #0
    9cbe:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9cc0:	2104      	movs	r1, #4
    9cc2:	6878      	ldr	r0, [r7, #4]
    9cc4:	4b04      	ldr	r3, [pc, #16]	; (9cd8 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    9cc6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    9cc8:	687b      	ldr	r3, [r7, #4]
    9cca:	8b5b      	ldrh	r3, [r3, #26]
    9ccc:	b29b      	uxth	r3, r3
}
    9cce:	4618      	mov	r0, r3
    9cd0:	3708      	adds	r7, #8
    9cd2:	46bd      	mov	sp, r7
    9cd4:	bd80      	pop	{r7, pc}
    9cd6:	bf00      	nop
    9cd8:	00009581 	.word	0x00009581

00009cdc <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    9cdc:	b580      	push	{r7, lr}
    9cde:	b082      	sub	sp, #8
    9ce0:	af00      	add	r7, sp, #0
    9ce2:	6078      	str	r0, [r7, #4]
    9ce4:	460b      	mov	r3, r1
    9ce6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    9ce8:	687b      	ldr	r3, [r7, #4]
    9cea:	887a      	ldrh	r2, [r7, #2]
    9cec:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9cee:	2104      	movs	r1, #4
    9cf0:	6878      	ldr	r0, [r7, #4]
    9cf2:	4b03      	ldr	r3, [pc, #12]	; (9d00 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    9cf4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9cf6:	bf00      	nop
    9cf8:	3708      	adds	r7, #8
    9cfa:	46bd      	mov	sp, r7
    9cfc:	bd80      	pop	{r7, pc}
    9cfe:	bf00      	nop
    9d00:	00009581 	.word	0x00009581

00009d04 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    9d04:	b4b0      	push	{r4, r5, r7}
    9d06:	b08d      	sub	sp, #52	; 0x34
    9d08:	af00      	add	r7, sp, #0
    9d0a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    9d0c:	4b13      	ldr	r3, [pc, #76]	; (9d5c <_sercom_get_hardware_index+0x58>)
    9d0e:	f107 040c 	add.w	r4, r7, #12
    9d12:	461d      	mov	r5, r3
    9d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9d18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9d1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9d20:	2300      	movs	r3, #0
    9d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    9d24:	e010      	b.n	9d48 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    9d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9d28:	009b      	lsls	r3, r3, #2
    9d2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    9d2e:	4413      	add	r3, r2
    9d30:	f853 3c24 	ldr.w	r3, [r3, #-36]
    9d34:	461a      	mov	r2, r3
    9d36:	687b      	ldr	r3, [r7, #4]
    9d38:	429a      	cmp	r2, r3
    9d3a:	d102      	bne.n	9d42 <_sercom_get_hardware_index+0x3e>
			return i;
    9d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9d3e:	b2db      	uxtb	r3, r3
    9d40:	e006      	b.n	9d50 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9d44:	3301      	adds	r3, #1
    9d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    9d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9d4a:	2b07      	cmp	r3, #7
    9d4c:	d9eb      	bls.n	9d26 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    9d4e:	2300      	movs	r3, #0
}
    9d50:	4618      	mov	r0, r3
    9d52:	3734      	adds	r7, #52	; 0x34
    9d54:	46bd      	mov	sp, r7
    9d56:	bcb0      	pop	{r4, r5, r7}
    9d58:	4770      	bx	lr
    9d5a:	bf00      	nop
    9d5c:	0001d22c 	.word	0x0001d22c

00009d60 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    9d60:	b480      	push	{r7}
    9d62:	b083      	sub	sp, #12
    9d64:	af00      	add	r7, sp, #0
    9d66:	6078      	str	r0, [r7, #4]
    9d68:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    9d6a:	687b      	ldr	r3, [r7, #4]
    9d6c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    9d70:	d102      	bne.n	9d78 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    9d72:	4a0b      	ldr	r2, [pc, #44]	; (9da0 <_sercom_init_irq_param+0x40>)
    9d74:	683b      	ldr	r3, [r7, #0]
    9d76:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    9d78:	687b      	ldr	r3, [r7, #4]
    9d7a:	4a0a      	ldr	r2, [pc, #40]	; (9da4 <_sercom_init_irq_param+0x44>)
    9d7c:	4293      	cmp	r3, r2
    9d7e:	d102      	bne.n	9d86 <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    9d80:	4a09      	ldr	r2, [pc, #36]	; (9da8 <_sercom_init_irq_param+0x48>)
    9d82:	683b      	ldr	r3, [r7, #0]
    9d84:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    9d86:	687b      	ldr	r3, [r7, #4]
    9d88:	4a08      	ldr	r2, [pc, #32]	; (9dac <_sercom_init_irq_param+0x4c>)
    9d8a:	4293      	cmp	r3, r2
    9d8c:	d102      	bne.n	9d94 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    9d8e:	4a08      	ldr	r2, [pc, #32]	; (9db0 <_sercom_init_irq_param+0x50>)
    9d90:	683b      	ldr	r3, [r7, #0]
    9d92:	6013      	str	r3, [r2, #0]
	}
}
    9d94:	bf00      	nop
    9d96:	370c      	adds	r7, #12
    9d98:	46bd      	mov	sp, r7
    9d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d9e:	4770      	bx	lr
    9da0:	20003594 	.word	0x20003594
    9da4:	43000400 	.word	0x43000400
    9da8:	20003598 	.word	0x20003598
    9dac:	43000c00 	.word	0x43000c00
    9db0:	2000359c 	.word	0x2000359c

00009db4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    9db4:	b580      	push	{r7, lr}
    9db6:	b084      	sub	sp, #16
    9db8:	af00      	add	r7, sp, #0
    9dba:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    9dbc:	6878      	ldr	r0, [r7, #4]
    9dbe:	4b13      	ldr	r3, [pc, #76]	; (9e0c <_get_i2cm_index+0x58>)
    9dc0:	4798      	blx	r3
    9dc2:	4603      	mov	r3, r0
    9dc4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    9dc6:	2300      	movs	r3, #0
    9dc8:	73fb      	strb	r3, [r7, #15]
    9dca:	e010      	b.n	9dee <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    9dcc:	7bfa      	ldrb	r2, [r7, #15]
    9dce:	4910      	ldr	r1, [pc, #64]	; (9e10 <_get_i2cm_index+0x5c>)
    9dd0:	4613      	mov	r3, r2
    9dd2:	005b      	lsls	r3, r3, #1
    9dd4:	4413      	add	r3, r2
    9dd6:	00db      	lsls	r3, r3, #3
    9dd8:	440b      	add	r3, r1
    9dda:	781b      	ldrb	r3, [r3, #0]
    9ddc:	7bba      	ldrb	r2, [r7, #14]
    9dde:	429a      	cmp	r2, r3
    9de0:	d102      	bne.n	9de8 <_get_i2cm_index+0x34>
			return i;
    9de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9de6:	e00d      	b.n	9e04 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    9de8:	7bfb      	ldrb	r3, [r7, #15]
    9dea:	3301      	adds	r3, #1
    9dec:	73fb      	strb	r3, [r7, #15]
    9dee:	7bfb      	ldrb	r3, [r7, #15]
    9df0:	2b02      	cmp	r3, #2
    9df2:	d9eb      	bls.n	9dcc <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    9df4:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    9df8:	4906      	ldr	r1, [pc, #24]	; (9e14 <_get_i2cm_index+0x60>)
    9dfa:	2000      	movs	r0, #0
    9dfc:	4b06      	ldr	r3, [pc, #24]	; (9e18 <_get_i2cm_index+0x64>)
    9dfe:	4798      	blx	r3
	return -1;
    9e00:	f04f 33ff 	mov.w	r3, #4294967295
}
    9e04:	4618      	mov	r0, r3
    9e06:	3710      	adds	r7, #16
    9e08:	46bd      	mov	sp, r7
    9e0a:	bd80      	pop	{r7, pc}
    9e0c:	00009d05 	.word	0x00009d05
    9e10:	2000007c 	.word	0x2000007c
    9e14:	0001d210 	.word	0x0001d210
    9e18:	00006991 	.word	0x00006991

00009e1c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    9e1c:	b580      	push	{r7, lr}
    9e1e:	b082      	sub	sp, #8
    9e20:	af00      	add	r7, sp, #0
    9e22:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    9e24:	2103      	movs	r1, #3
    9e26:	6878      	ldr	r0, [r7, #4]
    9e28:	4b02      	ldr	r3, [pc, #8]	; (9e34 <_sercom_i2c_send_stop+0x18>)
    9e2a:	4798      	blx	r3
}
    9e2c:	bf00      	nop
    9e2e:	3708      	adds	r7, #8
    9e30:	46bd      	mov	sp, r7
    9e32:	bd80      	pop	{r7, pc}
    9e34:	00009a81 	.word	0x00009a81

00009e38 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    9e38:	b590      	push	{r4, r7, lr}
    9e3a:	b087      	sub	sp, #28
    9e3c:	af00      	add	r7, sp, #0
    9e3e:	60f8      	str	r0, [r7, #12]
    9e40:	60b9      	str	r1, [r7, #8]
    9e42:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    9e44:	68f8      	ldr	r0, [r7, #12]
    9e46:	4b7d      	ldr	r3, [pc, #500]	; (a03c <_sercom_i2c_sync_analyse_flags+0x204>)
    9e48:	4798      	blx	r3
    9e4a:	4603      	mov	r3, r0
    9e4c:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    9e4e:	68f8      	ldr	r0, [r7, #12]
    9e50:	4b7b      	ldr	r3, [pc, #492]	; (a040 <_sercom_i2c_sync_analyse_flags+0x208>)
    9e52:	4798      	blx	r3
    9e54:	4603      	mov	r3, r0
    9e56:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    9e58:	68bb      	ldr	r3, [r7, #8]
    9e5a:	f003 0301 	and.w	r3, r3, #1
    9e5e:	2b00      	cmp	r3, #0
    9e60:	f000 8095 	beq.w	9f8e <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    9e64:	8a7b      	ldrh	r3, [r7, #18]
    9e66:	f003 0302 	and.w	r3, r3, #2
    9e6a:	2b00      	cmp	r3, #0
    9e6c:	d01d      	beq.n	9eaa <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    9e6e:	68f8      	ldr	r0, [r7, #12]
    9e70:	4b74      	ldr	r3, [pc, #464]	; (a044 <_sercom_i2c_sync_analyse_flags+0x20c>)
    9e72:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    9e74:	687b      	ldr	r3, [r7, #4]
    9e76:	885b      	ldrh	r3, [r3, #2]
    9e78:	b29b      	uxth	r3, r3
    9e7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    9e7e:	b29a      	uxth	r2, r3
    9e80:	687b      	ldr	r3, [r7, #4]
    9e82:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    9e84:	687b      	ldr	r3, [r7, #4]
    9e86:	885b      	ldrh	r3, [r3, #2]
    9e88:	b29b      	uxth	r3, r3
    9e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9e8e:	b29a      	uxth	r2, r3
    9e90:	687b      	ldr	r3, [r7, #4]
    9e92:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    9e94:	8a7b      	ldrh	r3, [r7, #18]
    9e96:	f003 0301 	and.w	r3, r3, #1
    9e9a:	2b00      	cmp	r3, #0
    9e9c:	d002      	beq.n	9ea4 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    9e9e:	f06f 0304 	mvn.w	r3, #4
    9ea2:	e0c6      	b.n	a032 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    9ea4:	f06f 0303 	mvn.w	r3, #3
    9ea8:	e0c3      	b.n	a032 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    9eaa:	8a7b      	ldrh	r3, [r7, #18]
    9eac:	f003 0304 	and.w	r3, r3, #4
    9eb0:	2b00      	cmp	r3, #0
    9eb2:	d01f      	beq.n	9ef4 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    9eb4:	687b      	ldr	r3, [r7, #4]
    9eb6:	685b      	ldr	r3, [r3, #4]
    9eb8:	2b00      	cmp	r3, #0
    9eba:	dd07      	ble.n	9ecc <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    9ebc:	687b      	ldr	r3, [r7, #4]
    9ebe:	885b      	ldrh	r3, [r3, #2]
    9ec0:	b29b      	uxth	r3, r3
    9ec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    9ec6:	b29a      	uxth	r2, r3
    9ec8:	687b      	ldr	r3, [r7, #4]
    9eca:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    9ecc:	687b      	ldr	r3, [r7, #4]
    9ece:	885b      	ldrh	r3, [r3, #2]
    9ed0:	b29b      	uxth	r3, r3
    9ed2:	b21b      	sxth	r3, r3
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	da02      	bge.n	9ede <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    9ed8:	68f8      	ldr	r0, [r7, #12]
    9eda:	4b5b      	ldr	r3, [pc, #364]	; (a048 <_sercom_i2c_sync_analyse_flags+0x210>)
    9edc:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    9ede:	687b      	ldr	r3, [r7, #4]
    9ee0:	885b      	ldrh	r3, [r3, #2]
    9ee2:	b29b      	uxth	r3, r3
    9ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9ee8:	b29a      	uxth	r2, r3
    9eea:	687b      	ldr	r3, [r7, #4]
    9eec:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    9eee:	f06f 0301 	mvn.w	r3, #1
    9ef2:	e09e      	b.n	a032 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    9ef4:	687b      	ldr	r3, [r7, #4]
    9ef6:	885b      	ldrh	r3, [r3, #2]
    9ef8:	b29b      	uxth	r3, r3
    9efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9efe:	2b00      	cmp	r3, #0
    9f00:	d01c      	beq.n	9f3c <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    9f02:	687b      	ldr	r3, [r7, #4]
    9f04:	881b      	ldrh	r3, [r3, #0]
    9f06:	121b      	asrs	r3, r3, #8
    9f08:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    9f0a:	f003 0406 	and.w	r4, r3, #6
    9f0e:	68f8      	ldr	r0, [r7, #12]
    9f10:	4b4e      	ldr	r3, [pc, #312]	; (a04c <_sercom_i2c_sync_analyse_flags+0x214>)
    9f12:	4798      	blx	r3
    9f14:	4603      	mov	r3, r0
    9f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9f1a:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    9f1c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    9f20:	4619      	mov	r1, r3
    9f22:	68f8      	ldr	r0, [r7, #12]
    9f24:	4b4a      	ldr	r3, [pc, #296]	; (a050 <_sercom_i2c_sync_analyse_flags+0x218>)
    9f26:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    9f28:	687b      	ldr	r3, [r7, #4]
    9f2a:	885b      	ldrh	r3, [r3, #2]
    9f2c:	b29b      	uxth	r3, r3
    9f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    9f32:	b29a      	uxth	r2, r3
    9f34:	687b      	ldr	r3, [r7, #4]
    9f36:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    9f38:	2300      	movs	r3, #0
    9f3a:	e07a      	b.n	a032 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    9f3c:	687b      	ldr	r3, [r7, #4]
    9f3e:	685b      	ldr	r3, [r3, #4]
    9f40:	2b00      	cmp	r3, #0
    9f42:	d111      	bne.n	9f68 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    9f44:	687b      	ldr	r3, [r7, #4]
    9f46:	885b      	ldrh	r3, [r3, #2]
    9f48:	b29b      	uxth	r3, r3
    9f4a:	b21b      	sxth	r3, r3
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	da02      	bge.n	9f56 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    9f50:	68f8      	ldr	r0, [r7, #12]
    9f52:	4b3d      	ldr	r3, [pc, #244]	; (a048 <_sercom_i2c_sync_analyse_flags+0x210>)
    9f54:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    9f56:	687b      	ldr	r3, [r7, #4]
    9f58:	885b      	ldrh	r3, [r3, #2]
    9f5a:	b29b      	uxth	r3, r3
    9f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9f60:	b29a      	uxth	r2, r3
    9f62:	687b      	ldr	r3, [r7, #4]
    9f64:	805a      	strh	r2, [r3, #2]
    9f66:	e010      	b.n	9f8a <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    9f68:	687b      	ldr	r3, [r7, #4]
    9f6a:	689b      	ldr	r3, [r3, #8]
    9f6c:	781b      	ldrb	r3, [r3, #0]
    9f6e:	4619      	mov	r1, r3
    9f70:	68f8      	ldr	r0, [r7, #12]
    9f72:	4b38      	ldr	r3, [pc, #224]	; (a054 <_sercom_i2c_sync_analyse_flags+0x21c>)
    9f74:	4798      	blx	r3
				msg->buffer++;
    9f76:	687b      	ldr	r3, [r7, #4]
    9f78:	689b      	ldr	r3, [r3, #8]
    9f7a:	1c5a      	adds	r2, r3, #1
    9f7c:	687b      	ldr	r3, [r7, #4]
    9f7e:	609a      	str	r2, [r3, #8]
				msg->len--;
    9f80:	687b      	ldr	r3, [r7, #4]
    9f82:	685b      	ldr	r3, [r3, #4]
    9f84:	1e5a      	subs	r2, r3, #1
    9f86:	687b      	ldr	r3, [r7, #4]
    9f88:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    9f8a:	2300      	movs	r3, #0
    9f8c:	e051      	b.n	a032 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    9f8e:	68bb      	ldr	r3, [r7, #8]
    9f90:	f003 0302 	and.w	r3, r3, #2
    9f94:	2b00      	cmp	r3, #0
    9f96:	d04b      	beq.n	a030 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    9f98:	687b      	ldr	r3, [r7, #4]
    9f9a:	685b      	ldr	r3, [r3, #4]
    9f9c:	2b00      	cmp	r3, #0
    9f9e:	d041      	beq.n	a024 <_sercom_i2c_sync_analyse_flags+0x1ec>
    9fa0:	8a7b      	ldrh	r3, [r7, #18]
    9fa2:	f003 0304 	and.w	r3, r3, #4
    9fa6:	2b00      	cmp	r3, #0
    9fa8:	d13c      	bne.n	a024 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    9faa:	687b      	ldr	r3, [r7, #4]
    9fac:	685b      	ldr	r3, [r3, #4]
    9fae:	1e5a      	subs	r2, r3, #1
    9fb0:	687b      	ldr	r3, [r7, #4]
    9fb2:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    9fb4:	687b      	ldr	r3, [r7, #4]
    9fb6:	685b      	ldr	r3, [r3, #4]
    9fb8:	2b00      	cmp	r3, #0
    9fba:	d102      	bne.n	9fc2 <_sercom_i2c_sync_analyse_flags+0x18a>
    9fbc:	697b      	ldr	r3, [r7, #20]
    9fbe:	2b00      	cmp	r3, #0
    9fc0:	d006      	beq.n	9fd0 <_sercom_i2c_sync_analyse_flags+0x198>
    9fc2:	687b      	ldr	r3, [r7, #4]
    9fc4:	685b      	ldr	r3, [r3, #4]
    9fc6:	2b01      	cmp	r3, #1
    9fc8:	d105      	bne.n	9fd6 <_sercom_i2c_sync_analyse_flags+0x19e>
    9fca:	697b      	ldr	r3, [r7, #20]
    9fcc:	2b00      	cmp	r3, #0
    9fce:	d002      	beq.n	9fd6 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    9fd0:	68f8      	ldr	r0, [r7, #12]
    9fd2:	4b21      	ldr	r3, [pc, #132]	; (a058 <_sercom_i2c_sync_analyse_flags+0x220>)
    9fd4:	4798      	blx	r3
			}

			if (msg->len == 0) {
    9fd6:	687b      	ldr	r3, [r7, #4]
    9fd8:	685b      	ldr	r3, [r3, #4]
    9fda:	2b00      	cmp	r3, #0
    9fdc:	d113      	bne.n	a006 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    9fde:	687b      	ldr	r3, [r7, #4]
    9fe0:	885b      	ldrh	r3, [r3, #2]
    9fe2:	b29b      	uxth	r3, r3
    9fe4:	b21b      	sxth	r3, r3
    9fe6:	2b00      	cmp	r3, #0
    9fe8:	da05      	bge.n	9ff6 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    9fea:	68f8      	ldr	r0, [r7, #12]
    9fec:	4b1b      	ldr	r3, [pc, #108]	; (a05c <_sercom_i2c_sync_analyse_flags+0x224>)
    9fee:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    9ff0:	68f8      	ldr	r0, [r7, #12]
    9ff2:	4b15      	ldr	r3, [pc, #84]	; (a048 <_sercom_i2c_sync_analyse_flags+0x210>)
    9ff4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    9ff6:	687b      	ldr	r3, [r7, #4]
    9ff8:	885b      	ldrh	r3, [r3, #2]
    9ffa:	b29b      	uxth	r3, r3
    9ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a000:	b29a      	uxth	r2, r3
    a002:	687b      	ldr	r3, [r7, #4]
    a004:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    a006:	687b      	ldr	r3, [r7, #4]
    a008:	689c      	ldr	r4, [r3, #8]
    a00a:	1c62      	adds	r2, r4, #1
    a00c:	687b      	ldr	r3, [r7, #4]
    a00e:	609a      	str	r2, [r3, #8]
    a010:	68f8      	ldr	r0, [r7, #12]
    a012:	4b13      	ldr	r3, [pc, #76]	; (a060 <_sercom_i2c_sync_analyse_flags+0x228>)
    a014:	4798      	blx	r3
    a016:	4603      	mov	r3, r0
    a018:	b2db      	uxtb	r3, r3
    a01a:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    a01c:	68f8      	ldr	r0, [r7, #12]
    a01e:	4b11      	ldr	r3, [pc, #68]	; (a064 <_sercom_i2c_sync_analyse_flags+0x22c>)
    a020:	4798      	blx	r3
    a022:	e005      	b.n	a030 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    a024:	68f8      	ldr	r0, [r7, #12]
    a026:	4b0f      	ldr	r3, [pc, #60]	; (a064 <_sercom_i2c_sync_analyse_flags+0x22c>)
    a028:	4798      	blx	r3
			return I2C_NACK;
    a02a:	f06f 0301 	mvn.w	r3, #1
    a02e:	e000      	b.n	a032 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    a030:	2300      	movs	r3, #0
}
    a032:	4618      	mov	r0, r3
    a034:	371c      	adds	r7, #28
    a036:	46bd      	mov	sp, r7
    a038:	bd90      	pop	{r4, r7, pc}
    a03a:	bf00      	nop
    a03c:	00009881 	.word	0x00009881
    a040:	00009cb9 	.word	0x00009cb9
    a044:	00009619 	.word	0x00009619
    a048:	00009e1d 	.word	0x00009e1d
    a04c:	00009b99 	.word	0x00009b99
    a050:	00009b75 	.word	0x00009b75
    a054:	00009bd5 	.word	0x00009bd5
    a058:	00009a31 	.word	0x00009a31
    a05c:	00009a09 	.word	0x00009a09
    a060:	00009bf9 	.word	0x00009bf9
    a064:	00009633 	.word	0x00009633

0000a068 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    a068:	b580      	push	{r7, lr}
    a06a:	b086      	sub	sp, #24
    a06c:	af00      	add	r7, sp, #0
    a06e:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    a070:	687b      	ldr	r3, [r7, #4]
    a072:	691b      	ldr	r3, [r3, #16]
    a074:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    a076:	6938      	ldr	r0, [r7, #16]
    a078:	4b37      	ldr	r3, [pc, #220]	; (a158 <_sercom_i2c_m_irq_handler+0xf0>)
    a07a:	4798      	blx	r3
    a07c:	4603      	mov	r3, r0
    a07e:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    a080:	2300      	movs	r3, #0
    a082:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    a084:	687b      	ldr	r3, [r7, #4]
    a086:	2b00      	cmp	r3, #0
    a088:	bf14      	ite	ne
    a08a:	2301      	movne	r3, #1
    a08c:	2300      	moveq	r3, #0
    a08e:	b2db      	uxtb	r3, r3
    a090:	f240 422a 	movw	r2, #1066	; 0x42a
    a094:	4931      	ldr	r1, [pc, #196]	; (a15c <_sercom_i2c_m_irq_handler+0xf4>)
    a096:	4618      	mov	r0, r3
    a098:	4b31      	ldr	r3, [pc, #196]	; (a160 <_sercom_i2c_m_irq_handler+0xf8>)
    a09a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    a09c:	687b      	ldr	r3, [r7, #4]
    a09e:	691b      	ldr	r3, [r3, #16]
    a0a0:	2b00      	cmp	r3, #0
    a0a2:	bf14      	ite	ne
    a0a4:	2301      	movne	r3, #1
    a0a6:	2300      	moveq	r3, #0
    a0a8:	b2db      	uxtb	r3, r3
    a0aa:	f240 422b 	movw	r2, #1067	; 0x42b
    a0ae:	492b      	ldr	r1, [pc, #172]	; (a15c <_sercom_i2c_m_irq_handler+0xf4>)
    a0b0:	4618      	mov	r0, r3
    a0b2:	4b2b      	ldr	r3, [pc, #172]	; (a160 <_sercom_i2c_m_irq_handler+0xf8>)
    a0b4:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    a0b6:	bf00      	nop
    a0b8:	68fb      	ldr	r3, [r7, #12]
    a0ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a0be:	2b00      	cmp	r3, #0
    a0c0:	d126      	bne.n	a110 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    a0c2:	687b      	ldr	r3, [r7, #4]
    a0c4:	461a      	mov	r2, r3
    a0c6:	68f9      	ldr	r1, [r7, #12]
    a0c8:	6938      	ldr	r0, [r7, #16]
    a0ca:	4b26      	ldr	r3, [pc, #152]	; (a164 <_sercom_i2c_m_irq_handler+0xfc>)
    a0cc:	4798      	blx	r3
    a0ce:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    a0d0:	697b      	ldr	r3, [r7, #20]
    a0d2:	2b00      	cmp	r3, #0
    a0d4:	d11b      	bne.n	a10e <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    a0d6:	68fb      	ldr	r3, [r7, #12]
    a0d8:	f003 0301 	and.w	r3, r3, #1
    a0dc:	2b00      	cmp	r3, #0
    a0de:	d008      	beq.n	a0f2 <_sercom_i2c_m_irq_handler+0x8a>
    a0e0:	687b      	ldr	r3, [r7, #4]
    a0e2:	699b      	ldr	r3, [r3, #24]
    a0e4:	2b00      	cmp	r3, #0
    a0e6:	d004      	beq.n	a0f2 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    a0e8:	687b      	ldr	r3, [r7, #4]
    a0ea:	699b      	ldr	r3, [r3, #24]
    a0ec:	6878      	ldr	r0, [r7, #4]
    a0ee:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    a0f0:	e02e      	b.n	a150 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    a0f2:	68fb      	ldr	r3, [r7, #12]
    a0f4:	f003 0302 	and.w	r3, r3, #2
    a0f8:	2b00      	cmp	r3, #0
    a0fa:	d029      	beq.n	a150 <_sercom_i2c_m_irq_handler+0xe8>
    a0fc:	687b      	ldr	r3, [r7, #4]
    a0fe:	69db      	ldr	r3, [r3, #28]
    a100:	2b00      	cmp	r3, #0
    a102:	d025      	beq.n	a150 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    a104:	687b      	ldr	r3, [r7, #4]
    a106:	69db      	ldr	r3, [r3, #28]
    a108:	6878      	ldr	r0, [r7, #4]
    a10a:	4798      	blx	r3
		return;
    a10c:	e020      	b.n	a150 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    a10e:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    a110:	687b      	ldr	r3, [r7, #4]
    a112:	885b      	ldrh	r3, [r3, #2]
    a114:	b29b      	uxth	r3, r3
    a116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a11a:	b29a      	uxth	r2, r3
    a11c:	687b      	ldr	r3, [r7, #4]
    a11e:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    a120:	687b      	ldr	r3, [r7, #4]
    a122:	695b      	ldr	r3, [r3, #20]
    a124:	2b00      	cmp	r3, #0
    a126:	d014      	beq.n	a152 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    a128:	697b      	ldr	r3, [r7, #20]
    a12a:	2b00      	cmp	r3, #0
    a12c:	d005      	beq.n	a13a <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    a12e:	687b      	ldr	r3, [r7, #4]
    a130:	695b      	ldr	r3, [r3, #20]
    a132:	6979      	ldr	r1, [r7, #20]
    a134:	6878      	ldr	r0, [r7, #4]
    a136:	4798      	blx	r3
    a138:	e005      	b.n	a146 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    a13a:	687b      	ldr	r3, [r7, #4]
    a13c:	695b      	ldr	r3, [r3, #20]
    a13e:	f06f 0104 	mvn.w	r1, #4
    a142:	6878      	ldr	r0, [r7, #4]
    a144:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    a146:	2180      	movs	r1, #128	; 0x80
    a148:	6938      	ldr	r0, [r7, #16]
    a14a:	4b07      	ldr	r3, [pc, #28]	; (a168 <_sercom_i2c_m_irq_handler+0x100>)
    a14c:	4798      	blx	r3
    a14e:	e000      	b.n	a152 <_sercom_i2c_m_irq_handler+0xea>
		return;
    a150:	bf00      	nop
	}
}
    a152:	3718      	adds	r7, #24
    a154:	46bd      	mov	sp, r7
    a156:	bd80      	pop	{r7, pc}
    a158:	0000964d 	.word	0x0000964d
    a15c:	0001d210 	.word	0x0001d210
    a160:	00006991 	.word	0x00006991
    a164:	00009e39 	.word	0x00009e39
    a168:	00009667 	.word	0x00009667

0000a16c <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    a16c:	b580      	push	{r7, lr}
    a16e:	b082      	sub	sp, #8
    a170:	af00      	add	r7, sp, #0
    a172:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    a174:	687b      	ldr	r3, [r7, #4]
    a176:	2b00      	cmp	r3, #0
    a178:	bf14      	ite	ne
    a17a:	2301      	movne	r3, #1
    a17c:	2300      	moveq	r3, #0
    a17e:	b2db      	uxtb	r3, r3
    a180:	f44f 628a 	mov.w	r2, #1104	; 0x450
    a184:	4906      	ldr	r1, [pc, #24]	; (a1a0 <_i2c_m_async_enable+0x34>)
    a186:	4618      	mov	r0, r3
    a188:	4b06      	ldr	r3, [pc, #24]	; (a1a4 <_i2c_m_async_enable+0x38>)
    a18a:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    a18c:	687b      	ldr	r3, [r7, #4]
    a18e:	691b      	ldr	r3, [r3, #16]
    a190:	4618      	mov	r0, r3
    a192:	4b05      	ldr	r3, [pc, #20]	; (a1a8 <_i2c_m_async_enable+0x3c>)
    a194:	4798      	blx	r3
    a196:	4603      	mov	r3, r0
}
    a198:	4618      	mov	r0, r3
    a19a:	3708      	adds	r7, #8
    a19c:	46bd      	mov	sp, r7
    a19e:	bd80      	pop	{r7, pc}
    a1a0:	0001d210 	.word	0x0001d210
    a1a4:	00006991 	.word	0x00006991
    a1a8:	0000a7ed 	.word	0x0000a7ed

0000a1ac <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    a1ac:	b580      	push	{r7, lr}
    a1ae:	b082      	sub	sp, #8
    a1b0:	af00      	add	r7, sp, #0
    a1b2:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    a1b4:	6878      	ldr	r0, [r7, #4]
    a1b6:	4b05      	ldr	r3, [pc, #20]	; (a1cc <_sercom_get_irq_num+0x20>)
    a1b8:	4798      	blx	r3
    a1ba:	4603      	mov	r3, r0
    a1bc:	009b      	lsls	r3, r3, #2
    a1be:	b2db      	uxtb	r3, r3
    a1c0:	332e      	adds	r3, #46	; 0x2e
    a1c2:	b2db      	uxtb	r3, r3
}
    a1c4:	4618      	mov	r0, r3
    a1c6:	3708      	adds	r7, #8
    a1c8:	46bd      	mov	sp, r7
    a1ca:	bd80      	pop	{r7, pc}
    a1cc:	00009d05 	.word	0x00009d05

0000a1d0 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    a1d0:	b580      	push	{r7, lr}
    a1d2:	b086      	sub	sp, #24
    a1d4:	af00      	add	r7, sp, #0
    a1d6:	6078      	str	r0, [r7, #4]
    a1d8:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    a1da:	687b      	ldr	r3, [r7, #4]
    a1dc:	2b00      	cmp	r3, #0
    a1de:	bf14      	ite	ne
    a1e0:	2301      	movne	r3, #1
    a1e2:	2300      	moveq	r3, #0
    a1e4:	b2db      	uxtb	r3, r3
    a1e6:	f240 429e 	movw	r2, #1182	; 0x49e
    a1ea:	491d      	ldr	r1, [pc, #116]	; (a260 <_i2c_m_async_init+0x90>)
    a1ec:	4618      	mov	r0, r3
    a1ee:	4b1d      	ldr	r3, [pc, #116]	; (a264 <_i2c_m_async_init+0x94>)
    a1f0:	4798      	blx	r3

	i2c_dev->hw = hw;
    a1f2:	687b      	ldr	r3, [r7, #4]
    a1f4:	683a      	ldr	r2, [r7, #0]
    a1f6:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    a1f8:	687b      	ldr	r3, [r7, #4]
    a1fa:	6839      	ldr	r1, [r7, #0]
    a1fc:	4618      	mov	r0, r3
    a1fe:	4b1a      	ldr	r3, [pc, #104]	; (a268 <_i2c_m_async_init+0x98>)
    a200:	4798      	blx	r3
    a202:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    a204:	68fb      	ldr	r3, [r7, #12]
    a206:	2b00      	cmp	r3, #0
    a208:	d001      	beq.n	a20e <_i2c_m_async_init+0x3e>
		return init_status;
    a20a:	68fb      	ldr	r3, [r7, #12]
    a20c:	e024      	b.n	a258 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    a20e:	6879      	ldr	r1, [r7, #4]
    a210:	6838      	ldr	r0, [r7, #0]
    a212:	4b16      	ldr	r3, [pc, #88]	; (a26c <_i2c_m_async_init+0x9c>)
    a214:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    a216:	6838      	ldr	r0, [r7, #0]
    a218:	4b15      	ldr	r3, [pc, #84]	; (a270 <_i2c_m_async_init+0xa0>)
    a21a:	4798      	blx	r3
    a21c:	4603      	mov	r3, r0
    a21e:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    a220:	2300      	movs	r3, #0
    a222:	613b      	str	r3, [r7, #16]
    a224:	e014      	b.n	a250 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    a226:	7dfb      	ldrb	r3, [r7, #23]
    a228:	b21b      	sxth	r3, r3
    a22a:	4618      	mov	r0, r3
    a22c:	4b11      	ldr	r3, [pc, #68]	; (a274 <_i2c_m_async_init+0xa4>)
    a22e:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    a230:	7dfb      	ldrb	r3, [r7, #23]
    a232:	b21b      	sxth	r3, r3
    a234:	4618      	mov	r0, r3
    a236:	4b10      	ldr	r3, [pc, #64]	; (a278 <_i2c_m_async_init+0xa8>)
    a238:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    a23a:	7dfb      	ldrb	r3, [r7, #23]
    a23c:	b21b      	sxth	r3, r3
    a23e:	4618      	mov	r0, r3
    a240:	4b0e      	ldr	r3, [pc, #56]	; (a27c <_i2c_m_async_init+0xac>)
    a242:	4798      	blx	r3
		irq++;
    a244:	7dfb      	ldrb	r3, [r7, #23]
    a246:	3301      	adds	r3, #1
    a248:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    a24a:	693b      	ldr	r3, [r7, #16]
    a24c:	3301      	adds	r3, #1
    a24e:	613b      	str	r3, [r7, #16]
    a250:	693b      	ldr	r3, [r7, #16]
    a252:	2b03      	cmp	r3, #3
    a254:	d9e7      	bls.n	a226 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    a256:	2300      	movs	r3, #0
}
    a258:	4618      	mov	r0, r3
    a25a:	3718      	adds	r7, #24
    a25c:	46bd      	mov	sp, r7
    a25e:	bd80      	pop	{r7, pc}
    a260:	0001d210 	.word	0x0001d210
    a264:	00006991 	.word	0x00006991
    a268:	0000a879 	.word	0x0000a879
    a26c:	00009d61 	.word	0x00009d61
    a270:	0000a1ad 	.word	0x0000a1ad
    a274:	00009501 	.word	0x00009501
    a278:	00009545 	.word	0x00009545
    a27c:	000094c5 	.word	0x000094c5

0000a280 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    a280:	b590      	push	{r4, r7, lr}
    a282:	b087      	sub	sp, #28
    a284:	af00      	add	r7, sp, #0
    a286:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    a288:	687b      	ldr	r3, [r7, #4]
    a28a:	691b      	ldr	r3, [r3, #16]
    a28c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    a28e:	687b      	ldr	r3, [r7, #4]
    a290:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    a292:	6978      	ldr	r0, [r7, #20]
    a294:	4b33      	ldr	r3, [pc, #204]	; (a364 <_sercom_i2c_send_address+0xe4>)
    a296:	4798      	blx	r3
    a298:	4603      	mov	r3, r0
    a29a:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    a29c:	687b      	ldr	r3, [r7, #4]
    a29e:	2b00      	cmp	r3, #0
    a2a0:	bf14      	ite	ne
    a2a2:	2301      	movne	r3, #1
    a2a4:	2300      	moveq	r3, #0
    a2a6:	b2db      	uxtb	r3, r3
    a2a8:	f240 42cc 	movw	r2, #1228	; 0x4cc
    a2ac:	492e      	ldr	r1, [pc, #184]	; (a368 <_sercom_i2c_send_address+0xe8>)
    a2ae:	4618      	mov	r0, r3
    a2b0:	4b2e      	ldr	r3, [pc, #184]	; (a36c <_sercom_i2c_send_address+0xec>)
    a2b2:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    a2b4:	693b      	ldr	r3, [r7, #16]
    a2b6:	685b      	ldr	r3, [r3, #4]
    a2b8:	2b01      	cmp	r3, #1
    a2ba:	d106      	bne.n	a2ca <_sercom_i2c_send_address+0x4a>
    a2bc:	68fb      	ldr	r3, [r7, #12]
    a2be:	2b00      	cmp	r3, #0
    a2c0:	d003      	beq.n	a2ca <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    a2c2:	6978      	ldr	r0, [r7, #20]
    a2c4:	4b2a      	ldr	r3, [pc, #168]	; (a370 <_sercom_i2c_send_address+0xf0>)
    a2c6:	4798      	blx	r3
    a2c8:	e002      	b.n	a2d0 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    a2ca:	6978      	ldr	r0, [r7, #20]
    a2cc:	4b29      	ldr	r3, [pc, #164]	; (a374 <_sercom_i2c_send_address+0xf4>)
    a2ce:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    a2d0:	693b      	ldr	r3, [r7, #16]
    a2d2:	881b      	ldrh	r3, [r3, #0]
    a2d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a2d8:	2b00      	cmp	r3, #0
    a2da:	d022      	beq.n	a322 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    a2dc:	693b      	ldr	r3, [r7, #16]
    a2de:	885b      	ldrh	r3, [r3, #2]
    a2e0:	b29b      	uxth	r3, r3
    a2e2:	f003 0301 	and.w	r3, r3, #1
    a2e6:	2b00      	cmp	r3, #0
    a2e8:	d007      	beq.n	a2fa <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    a2ea:	693b      	ldr	r3, [r7, #16]
    a2ec:	885b      	ldrh	r3, [r3, #2]
    a2ee:	b29b      	uxth	r3, r3
    a2f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    a2f4:	b29a      	uxth	r2, r3
    a2f6:	693b      	ldr	r3, [r7, #16]
    a2f8:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    a2fa:	693b      	ldr	r3, [r7, #16]
    a2fc:	881b      	ldrh	r3, [r3, #0]
    a2fe:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    a300:	f240 74fe 	movw	r4, #2046	; 0x7fe
    a304:	401c      	ands	r4, r3
    a306:	6978      	ldr	r0, [r7, #20]
    a308:	4b1b      	ldr	r3, [pc, #108]	; (a378 <_sercom_i2c_send_address+0xf8>)
    a30a:	4798      	blx	r3
    a30c:	4603      	mov	r3, r0
    a30e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a312:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    a314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a318:	4619      	mov	r1, r3
    a31a:	6978      	ldr	r0, [r7, #20]
    a31c:	4b17      	ldr	r3, [pc, #92]	; (a37c <_sercom_i2c_send_address+0xfc>)
    a31e:	4798      	blx	r3
    a320:	e01a      	b.n	a358 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    a322:	693b      	ldr	r3, [r7, #16]
    a324:	881b      	ldrh	r3, [r3, #0]
    a326:	005b      	lsls	r3, r3, #1
    a328:	b2db      	uxtb	r3, r3
    a32a:	693a      	ldr	r2, [r7, #16]
    a32c:	8852      	ldrh	r2, [r2, #2]
    a32e:	b292      	uxth	r2, r2
    a330:	f002 0201 	and.w	r2, r2, #1
    a334:	2a00      	cmp	r2, #0
    a336:	bf14      	ite	ne
    a338:	2201      	movne	r2, #1
    a33a:	2200      	moveq	r2, #0
    a33c:	b2d2      	uxtb	r2, r2
    a33e:	4313      	orrs	r3, r2
    a340:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    a342:	6978      	ldr	r0, [r7, #20]
    a344:	4b0c      	ldr	r3, [pc, #48]	; (a378 <_sercom_i2c_send_address+0xf8>)
    a346:	4798      	blx	r3
    a348:	4603      	mov	r3, r0
    a34a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    a34e:	4323      	orrs	r3, r4
    a350:	4619      	mov	r1, r3
    a352:	6978      	ldr	r0, [r7, #20]
    a354:	4b09      	ldr	r3, [pc, #36]	; (a37c <_sercom_i2c_send_address+0xfc>)
    a356:	4798      	blx	r3
	}

	return ERR_NONE;
    a358:	2300      	movs	r3, #0
}
    a35a:	4618      	mov	r0, r3
    a35c:	371c      	adds	r7, #28
    a35e:	46bd      	mov	sp, r7
    a360:	bd90      	pop	{r4, r7, pc}
    a362:	bf00      	nop
    a364:	00009881 	.word	0x00009881
    a368:	0001d210 	.word	0x0001d210
    a36c:	00006991 	.word	0x00006991
    a370:	00009a31 	.word	0x00009a31
    a374:	00009a59 	.word	0x00009a59
    a378:	00009b99 	.word	0x00009b99
    a37c:	00009b75 	.word	0x00009b75

0000a380 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    a380:	b580      	push	{r7, lr}
    a382:	b084      	sub	sp, #16
    a384:	af00      	add	r7, sp, #0
    a386:	6078      	str	r0, [r7, #4]
    a388:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    a38a:	687b      	ldr	r3, [r7, #4]
    a38c:	2b00      	cmp	r3, #0
    a38e:	bf14      	ite	ne
    a390:	2301      	movne	r3, #1
    a392:	2300      	moveq	r3, #0
    a394:	b2db      	uxtb	r3, r3
    a396:	f240 42f4 	movw	r2, #1268	; 0x4f4
    a39a:	492a      	ldr	r1, [pc, #168]	; (a444 <_i2c_m_async_transfer+0xc4>)
    a39c:	4618      	mov	r0, r3
    a39e:	4b2a      	ldr	r3, [pc, #168]	; (a448 <_i2c_m_async_transfer+0xc8>)
    a3a0:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    a3a2:	687b      	ldr	r3, [r7, #4]
    a3a4:	691b      	ldr	r3, [r3, #16]
    a3a6:	2b00      	cmp	r3, #0
    a3a8:	bf14      	ite	ne
    a3aa:	2301      	movne	r3, #1
    a3ac:	2300      	moveq	r3, #0
    a3ae:	b2db      	uxtb	r3, r3
    a3b0:	f240 42f5 	movw	r2, #1269	; 0x4f5
    a3b4:	4923      	ldr	r1, [pc, #140]	; (a444 <_i2c_m_async_transfer+0xc4>)
    a3b6:	4618      	mov	r0, r3
    a3b8:	4b23      	ldr	r3, [pc, #140]	; (a448 <_i2c_m_async_transfer+0xc8>)
    a3ba:	4798      	blx	r3
	ASSERT(msg);
    a3bc:	683b      	ldr	r3, [r7, #0]
    a3be:	2b00      	cmp	r3, #0
    a3c0:	bf14      	ite	ne
    a3c2:	2301      	movne	r3, #1
    a3c4:	2300      	moveq	r3, #0
    a3c6:	b2db      	uxtb	r3, r3
    a3c8:	f240 42f6 	movw	r2, #1270	; 0x4f6
    a3cc:	491d      	ldr	r1, [pc, #116]	; (a444 <_i2c_m_async_transfer+0xc4>)
    a3ce:	4618      	mov	r0, r3
    a3d0:	4b1d      	ldr	r3, [pc, #116]	; (a448 <_i2c_m_async_transfer+0xc8>)
    a3d2:	4798      	blx	r3

	if (msg->len == 0) {
    a3d4:	683b      	ldr	r3, [r7, #0]
    a3d6:	685b      	ldr	r3, [r3, #4]
    a3d8:	2b00      	cmp	r3, #0
    a3da:	d101      	bne.n	a3e0 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    a3dc:	2300      	movs	r3, #0
    a3de:	e02d      	b.n	a43c <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    a3e0:	687b      	ldr	r3, [r7, #4]
    a3e2:	885b      	ldrh	r3, [r3, #2]
    a3e4:	b29b      	uxth	r3, r3
    a3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a3ea:	2b00      	cmp	r3, #0
    a3ec:	d002      	beq.n	a3f4 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    a3ee:	f06f 0303 	mvn.w	r3, #3
    a3f2:	e023      	b.n	a43c <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    a3f4:	683b      	ldr	r3, [r7, #0]
    a3f6:	885b      	ldrh	r3, [r3, #2]
    a3f8:	b29b      	uxth	r3, r3
    a3fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a3fe:	b29a      	uxth	r2, r3
    a400:	683b      	ldr	r3, [r7, #0]
    a402:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    a404:	687b      	ldr	r3, [r7, #4]
    a406:	683a      	ldr	r2, [r7, #0]
    a408:	ca07      	ldmia	r2, {r0, r1, r2}
    a40a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    a40e:	687b      	ldr	r3, [r7, #4]
    a410:	691b      	ldr	r3, [r3, #16]
    a412:	4618      	mov	r0, r3
    a414:	4b0d      	ldr	r3, [pc, #52]	; (a44c <_i2c_m_async_transfer+0xcc>)
    a416:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    a418:	6878      	ldr	r0, [r7, #4]
    a41a:	4b0d      	ldr	r3, [pc, #52]	; (a450 <_i2c_m_async_transfer+0xd0>)
    a41c:	4798      	blx	r3
    a41e:	60f8      	str	r0, [r7, #12]

	if (ret) {
    a420:	68fb      	ldr	r3, [r7, #12]
    a422:	2b00      	cmp	r3, #0
    a424:	d009      	beq.n	a43a <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    a426:	687b      	ldr	r3, [r7, #4]
    a428:	885b      	ldrh	r3, [r3, #2]
    a42a:	b29b      	uxth	r3, r3
    a42c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a430:	b29a      	uxth	r2, r3
    a432:	687b      	ldr	r3, [r7, #4]
    a434:	805a      	strh	r2, [r3, #2]

		return ret;
    a436:	68fb      	ldr	r3, [r7, #12]
    a438:	e000      	b.n	a43c <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    a43a:	2300      	movs	r3, #0
}
    a43c:	4618      	mov	r0, r3
    a43e:	3710      	adds	r7, #16
    a440:	46bd      	mov	sp, r7
    a442:	bd80      	pop	{r7, pc}
    a444:	0001d210 	.word	0x0001d210
    a448:	00006991 	.word	0x00006991
    a44c:	000099e1 	.word	0x000099e1
    a450:	0000a281 	.word	0x0000a281

0000a454 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    a454:	b480      	push	{r7}
    a456:	b085      	sub	sp, #20
    a458:	af00      	add	r7, sp, #0
    a45a:	60f8      	str	r0, [r7, #12]
    a45c:	460b      	mov	r3, r1
    a45e:	607a      	str	r2, [r7, #4]
    a460:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    a462:	7afb      	ldrb	r3, [r7, #11]
    a464:	2b01      	cmp	r3, #1
    a466:	d008      	beq.n	a47a <_i2c_m_async_register_callback+0x26>
    a468:	2b02      	cmp	r3, #2
    a46a:	d00a      	beq.n	a482 <_i2c_m_async_register_callback+0x2e>
    a46c:	2b00      	cmp	r3, #0
    a46e:	d000      	beq.n	a472 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    a470:	e00b      	b.n	a48a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    a472:	68fb      	ldr	r3, [r7, #12]
    a474:	687a      	ldr	r2, [r7, #4]
    a476:	615a      	str	r2, [r3, #20]
		break;
    a478:	e007      	b.n	a48a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    a47a:	68fb      	ldr	r3, [r7, #12]
    a47c:	687a      	ldr	r2, [r7, #4]
    a47e:	619a      	str	r2, [r3, #24]
		break;
    a480:	e003      	b.n	a48a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    a482:	68fb      	ldr	r3, [r7, #12]
    a484:	687a      	ldr	r2, [r7, #4]
    a486:	61da      	str	r2, [r3, #28]
		break;
    a488:	bf00      	nop
	}

	return ERR_NONE;
    a48a:	2300      	movs	r3, #0
}
    a48c:	4618      	mov	r0, r3
    a48e:	3714      	adds	r7, #20
    a490:	46bd      	mov	sp, r7
    a492:	f85d 7b04 	ldr.w	r7, [sp], #4
    a496:	4770      	bx	lr

0000a498 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    a498:	b580      	push	{r7, lr}
    a49a:	b082      	sub	sp, #8
    a49c:	af00      	add	r7, sp, #0
    a49e:	6078      	str	r0, [r7, #4]
    a4a0:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    a4a2:	687b      	ldr	r3, [r7, #4]
    a4a4:	2b00      	cmp	r3, #0
    a4a6:	bf14      	ite	ne
    a4a8:	2301      	movne	r3, #1
    a4aa:	2300      	moveq	r3, #0
    a4ac:	b2db      	uxtb	r3, r3
    a4ae:	f240 5254 	movw	r2, #1364	; 0x554
    a4b2:	4908      	ldr	r1, [pc, #32]	; (a4d4 <_i2c_m_sync_init+0x3c>)
    a4b4:	4618      	mov	r0, r3
    a4b6:	4b08      	ldr	r3, [pc, #32]	; (a4d8 <_i2c_m_sync_init+0x40>)
    a4b8:	4798      	blx	r3

	i2c_dev->hw = hw;
    a4ba:	687b      	ldr	r3, [r7, #4]
    a4bc:	683a      	ldr	r2, [r7, #0]
    a4be:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    a4c0:	687b      	ldr	r3, [r7, #4]
    a4c2:	6839      	ldr	r1, [r7, #0]
    a4c4:	4618      	mov	r0, r3
    a4c6:	4b05      	ldr	r3, [pc, #20]	; (a4dc <_i2c_m_sync_init+0x44>)
    a4c8:	4798      	blx	r3
    a4ca:	4603      	mov	r3, r0
}
    a4cc:	4618      	mov	r0, r3
    a4ce:	3708      	adds	r7, #8
    a4d0:	46bd      	mov	sp, r7
    a4d2:	bd80      	pop	{r7, pc}
    a4d4:	0001d210 	.word	0x0001d210
    a4d8:	00006991 	.word	0x00006991
    a4dc:	0000a879 	.word	0x0000a879

0000a4e0 <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    a4e0:	b580      	push	{r7, lr}
    a4e2:	b082      	sub	sp, #8
    a4e4:	af00      	add	r7, sp, #0
    a4e6:	6078      	str	r0, [r7, #4]
    a4e8:	460b      	mov	r3, r1
    a4ea:	70fb      	strb	r3, [r7, #3]
    a4ec:	4613      	mov	r3, r2
    a4ee:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    a4f0:	78fb      	ldrb	r3, [r7, #3]
    a4f2:	2b01      	cmp	r3, #1
    a4f4:	d002      	beq.n	a4fc <_i2c_m_async_set_irq_state+0x1c>
    a4f6:	78fb      	ldrb	r3, [r7, #3]
    a4f8:	2b02      	cmp	r3, #2
    a4fa:	d10e      	bne.n	a51a <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    a4fc:	687b      	ldr	r3, [r7, #4]
    a4fe:	691b      	ldr	r3, [r3, #16]
    a500:	78ba      	ldrb	r2, [r7, #2]
    a502:	4611      	mov	r1, r2
    a504:	4618      	mov	r0, r3
    a506:	4b0c      	ldr	r3, [pc, #48]	; (a538 <_i2c_m_async_set_irq_state+0x58>)
    a508:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    a50a:	687b      	ldr	r3, [r7, #4]
    a50c:	691b      	ldr	r3, [r3, #16]
    a50e:	78ba      	ldrb	r2, [r7, #2]
    a510:	4611      	mov	r1, r2
    a512:	4618      	mov	r0, r3
    a514:	4b09      	ldr	r3, [pc, #36]	; (a53c <_i2c_m_async_set_irq_state+0x5c>)
    a516:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    a518:	e009      	b.n	a52e <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    a51a:	78fb      	ldrb	r3, [r7, #3]
    a51c:	2b00      	cmp	r3, #0
    a51e:	d106      	bne.n	a52e <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    a520:	687b      	ldr	r3, [r7, #4]
    a522:	691b      	ldr	r3, [r3, #16]
    a524:	78ba      	ldrb	r2, [r7, #2]
    a526:	4611      	mov	r1, r2
    a528:	4618      	mov	r0, r3
    a52a:	4b05      	ldr	r3, [pc, #20]	; (a540 <_i2c_m_async_set_irq_state+0x60>)
    a52c:	4798      	blx	r3
}
    a52e:	bf00      	nop
    a530:	3708      	adds	r7, #8
    a532:	46bd      	mov	sp, r7
    a534:	bd80      	pop	{r7, pc}
    a536:	bf00      	nop
    a538:	00009717 	.word	0x00009717
    a53c:	000096e5 	.word	0x000096e5
    a540:	00009749 	.word	0x00009749

0000a544 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    a544:	b580      	push	{r7, lr}
    a546:	b084      	sub	sp, #16
    a548:	af00      	add	r7, sp, #0
    a54a:	6078      	str	r0, [r7, #4]
    a54c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    a54e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a552:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    a554:	687b      	ldr	r3, [r7, #4]
    a556:	691b      	ldr	r3, [r3, #16]
    a558:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    a55a:	68b8      	ldr	r0, [r7, #8]
    a55c:	4b0f      	ldr	r3, [pc, #60]	; (a59c <_sercom_i2c_sync_wait_bus+0x58>)
    a55e:	4798      	blx	r3
    a560:	4603      	mov	r3, r0
    a562:	461a      	mov	r2, r3
    a564:	683b      	ldr	r3, [r7, #0]
    a566:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    a568:	68fb      	ldr	r3, [r7, #12]
    a56a:	1e5a      	subs	r2, r3, #1
    a56c:	60fa      	str	r2, [r7, #12]
    a56e:	2b00      	cmp	r3, #0
    a570:	d102      	bne.n	a578 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    a572:	f06f 0304 	mvn.w	r3, #4
    a576:	e00c      	b.n	a592 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    a578:	683b      	ldr	r3, [r7, #0]
    a57a:	681b      	ldr	r3, [r3, #0]
    a57c:	f003 0301 	and.w	r3, r3, #1
    a580:	2b00      	cmp	r3, #0
    a582:	d105      	bne.n	a590 <_sercom_i2c_sync_wait_bus+0x4c>
    a584:	683b      	ldr	r3, [r7, #0]
    a586:	681b      	ldr	r3, [r3, #0]
    a588:	f003 0302 	and.w	r3, r3, #2
    a58c:	2b00      	cmp	r3, #0
    a58e:	d0e4      	beq.n	a55a <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    a590:	2300      	movs	r3, #0
}
    a592:	4618      	mov	r0, r3
    a594:	3710      	adds	r7, #16
    a596:	46bd      	mov	sp, r7
    a598:	bd80      	pop	{r7, pc}
    a59a:	bf00      	nop
    a59c:	0000964d 	.word	0x0000964d

0000a5a0 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    a5a0:	b590      	push	{r4, r7, lr}
    a5a2:	b087      	sub	sp, #28
    a5a4:	af00      	add	r7, sp, #0
    a5a6:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    a5a8:	687b      	ldr	r3, [r7, #4]
    a5aa:	691b      	ldr	r3, [r3, #16]
    a5ac:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    a5ae:	687b      	ldr	r3, [r7, #4]
    a5b0:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    a5b2:	6978      	ldr	r0, [r7, #20]
    a5b4:	4b39      	ldr	r3, [pc, #228]	; (a69c <_sercom_i2c_sync_send_address+0xfc>)
    a5b6:	4798      	blx	r3
    a5b8:	4603      	mov	r3, r0
    a5ba:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    a5bc:	687b      	ldr	r3, [r7, #4]
    a5be:	2b00      	cmp	r3, #0
    a5c0:	bf14      	ite	ne
    a5c2:	2301      	movne	r3, #1
    a5c4:	2300      	moveq	r3, #0
    a5c6:	b2db      	uxtb	r3, r3
    a5c8:	f240 52e1 	movw	r2, #1505	; 0x5e1
    a5cc:	4934      	ldr	r1, [pc, #208]	; (a6a0 <_sercom_i2c_sync_send_address+0x100>)
    a5ce:	4618      	mov	r0, r3
    a5d0:	4b34      	ldr	r3, [pc, #208]	; (a6a4 <_sercom_i2c_sync_send_address+0x104>)
    a5d2:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    a5d4:	693b      	ldr	r3, [r7, #16]
    a5d6:	685b      	ldr	r3, [r3, #4]
    a5d8:	2b01      	cmp	r3, #1
    a5da:	d106      	bne.n	a5ea <_sercom_i2c_sync_send_address+0x4a>
    a5dc:	68fb      	ldr	r3, [r7, #12]
    a5de:	2b00      	cmp	r3, #0
    a5e0:	d003      	beq.n	a5ea <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    a5e2:	6978      	ldr	r0, [r7, #20]
    a5e4:	4b30      	ldr	r3, [pc, #192]	; (a6a8 <_sercom_i2c_sync_send_address+0x108>)
    a5e6:	4798      	blx	r3
    a5e8:	e002      	b.n	a5f0 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    a5ea:	6978      	ldr	r0, [r7, #20]
    a5ec:	4b2f      	ldr	r3, [pc, #188]	; (a6ac <_sercom_i2c_sync_send_address+0x10c>)
    a5ee:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    a5f0:	693b      	ldr	r3, [r7, #16]
    a5f2:	881b      	ldrh	r3, [r3, #0]
    a5f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a5f8:	2b00      	cmp	r3, #0
    a5fa:	d022      	beq.n	a642 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    a5fc:	693b      	ldr	r3, [r7, #16]
    a5fe:	885b      	ldrh	r3, [r3, #2]
    a600:	b29b      	uxth	r3, r3
    a602:	f003 0301 	and.w	r3, r3, #1
    a606:	2b00      	cmp	r3, #0
    a608:	d007      	beq.n	a61a <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    a60a:	693b      	ldr	r3, [r7, #16]
    a60c:	885b      	ldrh	r3, [r3, #2]
    a60e:	b29b      	uxth	r3, r3
    a610:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    a614:	b29a      	uxth	r2, r3
    a616:	693b      	ldr	r3, [r7, #16]
    a618:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    a61a:	693b      	ldr	r3, [r7, #16]
    a61c:	881b      	ldrh	r3, [r3, #0]
    a61e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    a620:	f240 74fe 	movw	r4, #2046	; 0x7fe
    a624:	401c      	ands	r4, r3
    a626:	6978      	ldr	r0, [r7, #20]
    a628:	4b21      	ldr	r3, [pc, #132]	; (a6b0 <_sercom_i2c_sync_send_address+0x110>)
    a62a:	4798      	blx	r3
    a62c:	4603      	mov	r3, r0
    a62e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a632:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    a634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a638:	4619      	mov	r1, r3
    a63a:	6978      	ldr	r0, [r7, #20]
    a63c:	4b1d      	ldr	r3, [pc, #116]	; (a6b4 <_sercom_i2c_sync_send_address+0x114>)
    a63e:	4798      	blx	r3
    a640:	e01a      	b.n	a678 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    a642:	693b      	ldr	r3, [r7, #16]
    a644:	881b      	ldrh	r3, [r3, #0]
    a646:	005b      	lsls	r3, r3, #1
    a648:	b2db      	uxtb	r3, r3
    a64a:	693a      	ldr	r2, [r7, #16]
    a64c:	8852      	ldrh	r2, [r2, #2]
    a64e:	b292      	uxth	r2, r2
    a650:	f002 0201 	and.w	r2, r2, #1
    a654:	2a00      	cmp	r2, #0
    a656:	bf14      	ite	ne
    a658:	2201      	movne	r2, #1
    a65a:	2200      	moveq	r2, #0
    a65c:	b2d2      	uxtb	r2, r2
    a65e:	4313      	orrs	r3, r2
    a660:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    a662:	6978      	ldr	r0, [r7, #20]
    a664:	4b12      	ldr	r3, [pc, #72]	; (a6b0 <_sercom_i2c_sync_send_address+0x110>)
    a666:	4798      	blx	r3
    a668:	4603      	mov	r3, r0
    a66a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    a66e:	4323      	orrs	r3, r4
    a670:	4619      	mov	r1, r3
    a672:	6978      	ldr	r0, [r7, #20]
    a674:	4b0f      	ldr	r3, [pc, #60]	; (a6b4 <_sercom_i2c_sync_send_address+0x114>)
    a676:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    a678:	f107 0308 	add.w	r3, r7, #8
    a67c:	4619      	mov	r1, r3
    a67e:	6878      	ldr	r0, [r7, #4]
    a680:	4b0d      	ldr	r3, [pc, #52]	; (a6b8 <_sercom_i2c_sync_send_address+0x118>)
    a682:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    a684:	68bb      	ldr	r3, [r7, #8]
    a686:	693a      	ldr	r2, [r7, #16]
    a688:	4619      	mov	r1, r3
    a68a:	6978      	ldr	r0, [r7, #20]
    a68c:	4b0b      	ldr	r3, [pc, #44]	; (a6bc <_sercom_i2c_sync_send_address+0x11c>)
    a68e:	4798      	blx	r3
    a690:	4603      	mov	r3, r0
}
    a692:	4618      	mov	r0, r3
    a694:	371c      	adds	r7, #28
    a696:	46bd      	mov	sp, r7
    a698:	bd90      	pop	{r4, r7, pc}
    a69a:	bf00      	nop
    a69c:	00009881 	.word	0x00009881
    a6a0:	0001d210 	.word	0x0001d210
    a6a4:	00006991 	.word	0x00006991
    a6a8:	00009a31 	.word	0x00009a31
    a6ac:	00009a59 	.word	0x00009a59
    a6b0:	00009b99 	.word	0x00009b99
    a6b4:	00009b75 	.word	0x00009b75
    a6b8:	0000a545 	.word	0x0000a545
    a6bc:	00009e39 	.word	0x00009e39

0000a6c0 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    a6c0:	b580      	push	{r7, lr}
    a6c2:	b086      	sub	sp, #24
    a6c4:	af00      	add	r7, sp, #0
    a6c6:	6078      	str	r0, [r7, #4]
    a6c8:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    a6ca:	687b      	ldr	r3, [r7, #4]
    a6cc:	691b      	ldr	r3, [r3, #16]
    a6ce:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    a6d0:	687b      	ldr	r3, [r7, #4]
    a6d2:	2b00      	cmp	r3, #0
    a6d4:	bf14      	ite	ne
    a6d6:	2301      	movne	r3, #1
    a6d8:	2300      	moveq	r3, #0
    a6da:	b2db      	uxtb	r3, r3
    a6dc:	f240 620c 	movw	r2, #1548	; 0x60c
    a6e0:	493b      	ldr	r1, [pc, #236]	; (a7d0 <_i2c_m_sync_transfer+0x110>)
    a6e2:	4618      	mov	r0, r3
    a6e4:	4b3b      	ldr	r3, [pc, #236]	; (a7d4 <_i2c_m_sync_transfer+0x114>)
    a6e6:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    a6e8:	687b      	ldr	r3, [r7, #4]
    a6ea:	691b      	ldr	r3, [r3, #16]
    a6ec:	2b00      	cmp	r3, #0
    a6ee:	bf14      	ite	ne
    a6f0:	2301      	movne	r3, #1
    a6f2:	2300      	moveq	r3, #0
    a6f4:	b2db      	uxtb	r3, r3
    a6f6:	f240 620d 	movw	r2, #1549	; 0x60d
    a6fa:	4935      	ldr	r1, [pc, #212]	; (a7d0 <_i2c_m_sync_transfer+0x110>)
    a6fc:	4618      	mov	r0, r3
    a6fe:	4b35      	ldr	r3, [pc, #212]	; (a7d4 <_i2c_m_sync_transfer+0x114>)
    a700:	4798      	blx	r3
	ASSERT(msg);
    a702:	683b      	ldr	r3, [r7, #0]
    a704:	2b00      	cmp	r3, #0
    a706:	bf14      	ite	ne
    a708:	2301      	movne	r3, #1
    a70a:	2300      	moveq	r3, #0
    a70c:	b2db      	uxtb	r3, r3
    a70e:	f240 620e 	movw	r2, #1550	; 0x60e
    a712:	492f      	ldr	r1, [pc, #188]	; (a7d0 <_i2c_m_sync_transfer+0x110>)
    a714:	4618      	mov	r0, r3
    a716:	4b2f      	ldr	r3, [pc, #188]	; (a7d4 <_i2c_m_sync_transfer+0x114>)
    a718:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    a71a:	687b      	ldr	r3, [r7, #4]
    a71c:	885b      	ldrh	r3, [r3, #2]
    a71e:	b29b      	uxth	r3, r3
    a720:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a724:	2b00      	cmp	r3, #0
    a726:	d002      	beq.n	a72e <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    a728:	f06f 0305 	mvn.w	r3, #5
    a72c:	e04c      	b.n	a7c8 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    a72e:	683b      	ldr	r3, [r7, #0]
    a730:	885b      	ldrh	r3, [r3, #2]
    a732:	b29b      	uxth	r3, r3
    a734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a738:	b29a      	uxth	r2, r3
    a73a:	683b      	ldr	r3, [r7, #0]
    a73c:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    a73e:	687b      	ldr	r3, [r7, #4]
    a740:	683a      	ldr	r2, [r7, #0]
    a742:	ca07      	ldmia	r2, {r0, r1, r2}
    a744:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    a748:	6938      	ldr	r0, [r7, #16]
    a74a:	4b23      	ldr	r3, [pc, #140]	; (a7d8 <_i2c_m_sync_transfer+0x118>)
    a74c:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    a74e:	6878      	ldr	r0, [r7, #4]
    a750:	4b22      	ldr	r3, [pc, #136]	; (a7dc <_i2c_m_sync_transfer+0x11c>)
    a752:	4798      	blx	r3
    a754:	6178      	str	r0, [r7, #20]

	if (ret) {
    a756:	697b      	ldr	r3, [r7, #20]
    a758:	2b00      	cmp	r3, #0
    a75a:	d02d      	beq.n	a7b8 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    a75c:	687b      	ldr	r3, [r7, #4]
    a75e:	885b      	ldrh	r3, [r3, #2]
    a760:	b29b      	uxth	r3, r3
    a762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a766:	b29a      	uxth	r2, r3
    a768:	687b      	ldr	r3, [r7, #4]
    a76a:	805a      	strh	r2, [r3, #2]

		return ret;
    a76c:	697b      	ldr	r3, [r7, #20]
    a76e:	e02b      	b.n	a7c8 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    a770:	f107 030c 	add.w	r3, r7, #12
    a774:	4619      	mov	r1, r3
    a776:	6878      	ldr	r0, [r7, #4]
    a778:	4b19      	ldr	r3, [pc, #100]	; (a7e0 <_i2c_m_sync_transfer+0x120>)
    a77a:	4798      	blx	r3
    a77c:	6178      	str	r0, [r7, #20]

		if (ret) {
    a77e:	697b      	ldr	r3, [r7, #20]
    a780:	2b00      	cmp	r3, #0
    a782:	d012      	beq.n	a7aa <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    a784:	683b      	ldr	r3, [r7, #0]
    a786:	885b      	ldrh	r3, [r3, #2]
    a788:	b29b      	uxth	r3, r3
    a78a:	b21b      	sxth	r3, r3
    a78c:	2b00      	cmp	r3, #0
    a78e:	da02      	bge.n	a796 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    a790:	6938      	ldr	r0, [r7, #16]
    a792:	4b14      	ldr	r3, [pc, #80]	; (a7e4 <_i2c_m_sync_transfer+0x124>)
    a794:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    a796:	687b      	ldr	r3, [r7, #4]
    a798:	885b      	ldrh	r3, [r3, #2]
    a79a:	b29b      	uxth	r3, r3
    a79c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a7a0:	b29a      	uxth	r2, r3
    a7a2:	687b      	ldr	r3, [r7, #4]
    a7a4:	805a      	strh	r2, [r3, #2]

			return ret;
    a7a6:	697b      	ldr	r3, [r7, #20]
    a7a8:	e00e      	b.n	a7c8 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    a7aa:	68fb      	ldr	r3, [r7, #12]
    a7ac:	687a      	ldr	r2, [r7, #4]
    a7ae:	4619      	mov	r1, r3
    a7b0:	6938      	ldr	r0, [r7, #16]
    a7b2:	4b0d      	ldr	r3, [pc, #52]	; (a7e8 <_i2c_m_sync_transfer+0x128>)
    a7b4:	4798      	blx	r3
    a7b6:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    a7b8:	687b      	ldr	r3, [r7, #4]
    a7ba:	885b      	ldrh	r3, [r3, #2]
    a7bc:	b29b      	uxth	r3, r3
    a7be:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a7c2:	2b00      	cmp	r3, #0
    a7c4:	d1d4      	bne.n	a770 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    a7c6:	697b      	ldr	r3, [r7, #20]
}
    a7c8:	4618      	mov	r0, r3
    a7ca:	3718      	adds	r7, #24
    a7cc:	46bd      	mov	sp, r7
    a7ce:	bd80      	pop	{r7, pc}
    a7d0:	0001d210 	.word	0x0001d210
    a7d4:	00006991 	.word	0x00006991
    a7d8:	000099e1 	.word	0x000099e1
    a7dc:	0000a5a1 	.word	0x0000a5a1
    a7e0:	0000a545 	.word	0x0000a545
    a7e4:	00009e1d 	.word	0x00009e1d
    a7e8:	00009e39 	.word	0x00009e39

0000a7ec <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    a7ec:	b580      	push	{r7, lr}
    a7ee:	b084      	sub	sp, #16
    a7f0:	af00      	add	r7, sp, #0
    a7f2:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    a7f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a7f8:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    a7fa:	2304      	movs	r3, #4
    a7fc:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    a7fe:	687b      	ldr	r3, [r7, #4]
    a800:	2b00      	cmp	r3, #0
    a802:	bf14      	ite	ne
    a804:	2301      	movne	r3, #1
    a806:	2300      	moveq	r3, #0
    a808:	b2db      	uxtb	r3, r3
    a80a:	f240 6241 	movw	r2, #1601	; 0x641
    a80e:	4915      	ldr	r1, [pc, #84]	; (a864 <_i2c_m_enable_implementation+0x78>)
    a810:	4618      	mov	r0, r3
    a812:	4b15      	ldr	r3, [pc, #84]	; (a868 <_i2c_m_enable_implementation+0x7c>)
    a814:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    a816:	6878      	ldr	r0, [r7, #4]
    a818:	4b14      	ldr	r3, [pc, #80]	; (a86c <_i2c_m_enable_implementation+0x80>)
    a81a:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    a81c:	e016      	b.n	a84c <_i2c_m_enable_implementation+0x60>
		timeout--;
    a81e:	68fb      	ldr	r3, [r7, #12]
    a820:	3b01      	subs	r3, #1
    a822:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    a824:	68fb      	ldr	r3, [r7, #12]
    a826:	2b00      	cmp	r3, #0
    a828:	dc10      	bgt.n	a84c <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    a82a:	68bb      	ldr	r3, [r7, #8]
    a82c:	3b01      	subs	r3, #1
    a82e:	60bb      	str	r3, [r7, #8]
    a830:	68bb      	ldr	r3, [r7, #8]
    a832:	2b00      	cmp	r3, #0
    a834:	d007      	beq.n	a846 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    a836:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a83a:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    a83c:	2110      	movs	r1, #16
    a83e:	6878      	ldr	r0, [r7, #4]
    a840:	4b0b      	ldr	r3, [pc, #44]	; (a870 <_i2c_m_enable_implementation+0x84>)
    a842:	4798      	blx	r3
    a844:	e002      	b.n	a84c <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    a846:	f06f 0305 	mvn.w	r3, #5
    a84a:	e006      	b.n	a85a <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    a84c:	6878      	ldr	r0, [r7, #4]
    a84e:	4b09      	ldr	r3, [pc, #36]	; (a874 <_i2c_m_enable_implementation+0x88>)
    a850:	4798      	blx	r3
    a852:	4603      	mov	r3, r0
    a854:	2b01      	cmp	r3, #1
    a856:	d1e2      	bne.n	a81e <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    a858:	2300      	movs	r3, #0
}
    a85a:	4618      	mov	r0, r3
    a85c:	3710      	adds	r7, #16
    a85e:	46bd      	mov	sp, r7
    a860:	bd80      	pop	{r7, pc}
    a862:	bf00      	nop
    a864:	0001d210 	.word	0x0001d210
    a868:	00006991 	.word	0x00006991
    a86c:	00009831 	.word	0x00009831
    a870:	00009cdd 	.word	0x00009cdd
    a874:	00009c8d 	.word	0x00009c8d

0000a878 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    a878:	b580      	push	{r7, lr}
    a87a:	b084      	sub	sp, #16
    a87c:	af00      	add	r7, sp, #0
    a87e:	6078      	str	r0, [r7, #4]
    a880:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    a882:	6838      	ldr	r0, [r7, #0]
    a884:	4b42      	ldr	r3, [pc, #264]	; (a990 <_i2c_m_sync_init_impl+0x118>)
    a886:	4798      	blx	r3
    a888:	4603      	mov	r3, r0
    a88a:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    a88c:	2101      	movs	r1, #1
    a88e:	6838      	ldr	r0, [r7, #0]
    a890:	4b40      	ldr	r3, [pc, #256]	; (a994 <_i2c_m_sync_init_impl+0x11c>)
    a892:	4798      	blx	r3
    a894:	4603      	mov	r3, r0
    a896:	f083 0301 	eor.w	r3, r3, #1
    a89a:	b2db      	uxtb	r3, r3
    a89c:	2b00      	cmp	r3, #0
    a89e:	d020      	beq.n	a8e2 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    a8a0:	7bfa      	ldrb	r2, [r7, #15]
    a8a2:	493d      	ldr	r1, [pc, #244]	; (a998 <_i2c_m_sync_init_impl+0x120>)
    a8a4:	4613      	mov	r3, r2
    a8a6:	005b      	lsls	r3, r3, #1
    a8a8:	4413      	add	r3, r2
    a8aa:	00db      	lsls	r3, r3, #3
    a8ac:	440b      	add	r3, r1
    a8ae:	3304      	adds	r3, #4
    a8b0:	681b      	ldr	r3, [r3, #0]
    a8b2:	f003 031c 	and.w	r3, r3, #28
    a8b6:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    a8b8:	2102      	movs	r1, #2
    a8ba:	6838      	ldr	r0, [r7, #0]
    a8bc:	4b37      	ldr	r3, [pc, #220]	; (a99c <_i2c_m_sync_init_impl+0x124>)
    a8be:	4798      	blx	r3
    a8c0:	4603      	mov	r3, r0
    a8c2:	2b00      	cmp	r3, #0
    a8c4:	d006      	beq.n	a8d4 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    a8c6:	6838      	ldr	r0, [r7, #0]
    a8c8:	4b35      	ldr	r3, [pc, #212]	; (a9a0 <_i2c_m_sync_init_impl+0x128>)
    a8ca:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    a8cc:	2102      	movs	r1, #2
    a8ce:	6838      	ldr	r0, [r7, #0]
    a8d0:	4b34      	ldr	r3, [pc, #208]	; (a9a4 <_i2c_m_sync_init_impl+0x12c>)
    a8d2:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    a8d4:	68bb      	ldr	r3, [r7, #8]
    a8d6:	f043 0301 	orr.w	r3, r3, #1
    a8da:	4619      	mov	r1, r3
    a8dc:	6838      	ldr	r0, [r7, #0]
    a8de:	4b32      	ldr	r3, [pc, #200]	; (a9a8 <_i2c_m_sync_init_impl+0x130>)
    a8e0:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    a8e2:	2101      	movs	r1, #1
    a8e4:	6838      	ldr	r0, [r7, #0]
    a8e6:	4b2f      	ldr	r3, [pc, #188]	; (a9a4 <_i2c_m_sync_init_impl+0x12c>)
    a8e8:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    a8ea:	7bfa      	ldrb	r2, [r7, #15]
    a8ec:	492a      	ldr	r1, [pc, #168]	; (a998 <_i2c_m_sync_init_impl+0x120>)
    a8ee:	4613      	mov	r3, r2
    a8f0:	005b      	lsls	r3, r3, #1
    a8f2:	4413      	add	r3, r2
    a8f4:	00db      	lsls	r3, r3, #3
    a8f6:	440b      	add	r3, r1
    a8f8:	3304      	adds	r3, #4
    a8fa:	681b      	ldr	r3, [r3, #0]
    a8fc:	4619      	mov	r1, r3
    a8fe:	6838      	ldr	r0, [r7, #0]
    a900:	4b29      	ldr	r3, [pc, #164]	; (a9a8 <_i2c_m_sync_init_impl+0x130>)
    a902:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    a904:	7bfa      	ldrb	r2, [r7, #15]
    a906:	4924      	ldr	r1, [pc, #144]	; (a998 <_i2c_m_sync_init_impl+0x120>)
    a908:	4613      	mov	r3, r2
    a90a:	005b      	lsls	r3, r3, #1
    a90c:	4413      	add	r3, r2
    a90e:	00db      	lsls	r3, r3, #3
    a910:	440b      	add	r3, r1
    a912:	3308      	adds	r3, #8
    a914:	681b      	ldr	r3, [r3, #0]
    a916:	4619      	mov	r1, r3
    a918:	6838      	ldr	r0, [r7, #0]
    a91a:	4b24      	ldr	r3, [pc, #144]	; (a9ac <_i2c_m_sync_init_impl+0x134>)
    a91c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    a91e:	7bfa      	ldrb	r2, [r7, #15]
    a920:	491d      	ldr	r1, [pc, #116]	; (a998 <_i2c_m_sync_init_impl+0x120>)
    a922:	4613      	mov	r3, r2
    a924:	005b      	lsls	r3, r3, #1
    a926:	4413      	add	r3, r2
    a928:	00db      	lsls	r3, r3, #3
    a92a:	440b      	add	r3, r1
    a92c:	330c      	adds	r3, #12
    a92e:	681b      	ldr	r3, [r3, #0]
    a930:	4619      	mov	r1, r3
    a932:	6838      	ldr	r0, [r7, #0]
    a934:	4b1e      	ldr	r3, [pc, #120]	; (a9b0 <_i2c_m_sync_init_impl+0x138>)
    a936:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    a938:	7bfa      	ldrb	r2, [r7, #15]
    a93a:	4917      	ldr	r1, [pc, #92]	; (a998 <_i2c_m_sync_init_impl+0x120>)
    a93c:	4613      	mov	r3, r2
    a93e:	005b      	lsls	r3, r3, #1
    a940:	4413      	add	r3, r2
    a942:	00db      	lsls	r3, r3, #3
    a944:	440b      	add	r3, r1
    a946:	3304      	adds	r3, #4
    a948:	681b      	ldr	r3, [r3, #0]
    a94a:	0e1b      	lsrs	r3, r3, #24
    a94c:	b29b      	uxth	r3, r3
    a94e:	f003 0303 	and.w	r3, r3, #3
    a952:	b29a      	uxth	r2, r3
    a954:	687b      	ldr	r3, [r7, #4]
    a956:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    a958:	687b      	ldr	r3, [r7, #4]
    a95a:	899b      	ldrh	r3, [r3, #12]
    a95c:	2b01      	cmp	r3, #1
    a95e:	bf8c      	ite	hi
    a960:	2301      	movhi	r3, #1
    a962:	2300      	movls	r3, #0
    a964:	b2db      	uxtb	r3, r3
    a966:	4619      	mov	r1, r3
    a968:	6838      	ldr	r0, [r7, #0]
    a96a:	4b12      	ldr	r3, [pc, #72]	; (a9b4 <_i2c_m_sync_init_impl+0x13c>)
    a96c:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    a96e:	7bfa      	ldrb	r2, [r7, #15]
    a970:	4909      	ldr	r1, [pc, #36]	; (a998 <_i2c_m_sync_init_impl+0x120>)
    a972:	4613      	mov	r3, r2
    a974:	005b      	lsls	r3, r3, #1
    a976:	4413      	add	r3, r2
    a978:	00db      	lsls	r3, r3, #3
    a97a:	440b      	add	r3, r1
    a97c:	3312      	adds	r3, #18
    a97e:	881a      	ldrh	r2, [r3, #0]
    a980:	687b      	ldr	r3, [r7, #4]
    a982:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    a984:	2300      	movs	r3, #0
}
    a986:	4618      	mov	r0, r3
    a988:	3710      	adds	r7, #16
    a98a:	46bd      	mov	sp, r7
    a98c:	bd80      	pop	{r7, pc}
    a98e:	bf00      	nop
    a990:	00009db5 	.word	0x00009db5
    a994:	000095a5 	.word	0x000095a5
    a998:	2000007c 	.word	0x2000007c
    a99c:	000098b1 	.word	0x000098b1
    a9a0:	00009859 	.word	0x00009859
    a9a4:	00009581 	.word	0x00009581
    a9a8:	000098e1 	.word	0x000098e1
    a9ac:	00009ab1 	.word	0x00009ab1
    a9b0:	00009af9 	.word	0x00009af9
    a9b4:	00009b35 	.word	0x00009b35

0000a9b8 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    a9b8:	b580      	push	{r7, lr}
    a9ba:	b082      	sub	sp, #8
    a9bc:	af00      	add	r7, sp, #0
    a9be:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    a9c0:	2101      	movs	r1, #1
    a9c2:	6878      	ldr	r0, [r7, #4]
    a9c4:	4b07      	ldr	r3, [pc, #28]	; (a9e4 <_spi_sync_enable+0x2c>)
    a9c6:	4798      	blx	r3
    a9c8:	4603      	mov	r3, r0
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	d002      	beq.n	a9d4 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    a9ce:	f06f 0303 	mvn.w	r3, #3
    a9d2:	e003      	b.n	a9dc <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    a9d4:	6878      	ldr	r0, [r7, #4]
    a9d6:	4b04      	ldr	r3, [pc, #16]	; (a9e8 <_spi_sync_enable+0x30>)
    a9d8:	4798      	blx	r3

	return ERR_NONE;
    a9da:	2300      	movs	r3, #0
}
    a9dc:	4618      	mov	r0, r3
    a9de:	3708      	adds	r7, #8
    a9e0:	46bd      	mov	sp, r7
    a9e2:	bd80      	pop	{r7, pc}
    a9e4:	000095f1 	.word	0x000095f1
    a9e8:	00009905 	.word	0x00009905

0000a9ec <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    a9ec:	b580      	push	{r7, lr}
    a9ee:	b082      	sub	sp, #8
    a9f0:	af00      	add	r7, sp, #0
    a9f2:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    a9f4:	2101      	movs	r1, #1
    a9f6:	6878      	ldr	r0, [r7, #4]
    a9f8:	4b07      	ldr	r3, [pc, #28]	; (aa18 <_spi_sync_disable+0x2c>)
    a9fa:	4798      	blx	r3
    a9fc:	4603      	mov	r3, r0
    a9fe:	2b00      	cmp	r3, #0
    aa00:	d002      	beq.n	aa08 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    aa02:	f06f 0303 	mvn.w	r3, #3
    aa06:	e003      	b.n	aa10 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    aa08:	6878      	ldr	r0, [r7, #4]
    aa0a:	4b04      	ldr	r3, [pc, #16]	; (aa1c <_spi_sync_disable+0x30>)
    aa0c:	4798      	blx	r3

	return ERR_NONE;
    aa0e:	2300      	movs	r3, #0
}
    aa10:	4618      	mov	r0, r3
    aa12:	3708      	adds	r7, #8
    aa14:	46bd      	mov	sp, r7
    aa16:	bd80      	pop	{r7, pc}
    aa18:	000095f1 	.word	0x000095f1
    aa1c:	00009965 	.word	0x00009965

0000aa20 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    aa20:	b580      	push	{r7, lr}
    aa22:	b082      	sub	sp, #8
    aa24:	af00      	add	r7, sp, #0
    aa26:	6078      	str	r0, [r7, #4]
    aa28:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    aa2a:	687b      	ldr	r3, [r7, #4]
    aa2c:	2b00      	cmp	r3, #0
    aa2e:	d004      	beq.n	aa3a <_spi_load_regs_master+0x1a>
    aa30:	683b      	ldr	r3, [r7, #0]
    aa32:	2b00      	cmp	r3, #0
    aa34:	d001      	beq.n	aa3a <_spi_load_regs_master+0x1a>
    aa36:	2301      	movs	r3, #1
    aa38:	e000      	b.n	aa3c <_spi_load_regs_master+0x1c>
    aa3a:	2300      	movs	r3, #0
    aa3c:	f003 0301 	and.w	r3, r3, #1
    aa40:	b2db      	uxtb	r3, r3
    aa42:	f640 1245 	movw	r2, #2373	; 0x945
    aa46:	4915      	ldr	r1, [pc, #84]	; (aa9c <_spi_load_regs_master+0x7c>)
    aa48:	4618      	mov	r0, r3
    aa4a:	4b15      	ldr	r3, [pc, #84]	; (aaa0 <_spi_load_regs_master+0x80>)
    aa4c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    aa4e:	683b      	ldr	r3, [r7, #0]
    aa50:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    aa52:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    aa56:	f023 0301 	bic.w	r3, r3, #1
    aa5a:	4619      	mov	r1, r3
    aa5c:	6878      	ldr	r0, [r7, #4]
    aa5e:	4b11      	ldr	r3, [pc, #68]	; (aaa4 <_spi_load_regs_master+0x84>)
    aa60:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    aa62:	683b      	ldr	r3, [r7, #0]
    aa64:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    aa66:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    aa6a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    aa6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    aa72:	4619      	mov	r1, r3
    aa74:	6878      	ldr	r0, [r7, #4]
    aa76:	4b0c      	ldr	r3, [pc, #48]	; (aaa8 <_spi_load_regs_master+0x88>)
    aa78:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    aa7a:	683b      	ldr	r3, [r7, #0]
    aa7c:	7b1b      	ldrb	r3, [r3, #12]
    aa7e:	4619      	mov	r1, r3
    aa80:	6878      	ldr	r0, [r7, #4]
    aa82:	4b0a      	ldr	r3, [pc, #40]	; (aaac <_spi_load_regs_master+0x8c>)
    aa84:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    aa86:	683b      	ldr	r3, [r7, #0]
    aa88:	7b5b      	ldrb	r3, [r3, #13]
    aa8a:	4619      	mov	r1, r3
    aa8c:	6878      	ldr	r0, [r7, #4]
    aa8e:	4b08      	ldr	r3, [pc, #32]	; (aab0 <_spi_load_regs_master+0x90>)
    aa90:	4798      	blx	r3
}
    aa92:	bf00      	nop
    aa94:	3708      	adds	r7, #8
    aa96:	46bd      	mov	sp, r7
    aa98:	bd80      	pop	{r7, pc}
    aa9a:	bf00      	nop
    aa9c:	0001d210 	.word	0x0001d210
    aaa0:	00006991 	.word	0x00006991
    aaa4:	000099bd 	.word	0x000099bd
    aaa8:	00009ad5 	.word	0x00009ad5
    aaac:	00009b15 	.word	0x00009b15
    aab0:	00009c4d 	.word	0x00009c4d

0000aab4 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    aab4:	b580      	push	{r7, lr}
    aab6:	b082      	sub	sp, #8
    aab8:	af00      	add	r7, sp, #0
    aaba:	6078      	str	r0, [r7, #4]
    aabc:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    aabe:	687b      	ldr	r3, [r7, #4]
    aac0:	2b00      	cmp	r3, #0
    aac2:	d004      	beq.n	aace <_spi_load_regs_slave+0x1a>
    aac4:	683b      	ldr	r3, [r7, #0]
    aac6:	2b00      	cmp	r3, #0
    aac8:	d001      	beq.n	aace <_spi_load_regs_slave+0x1a>
    aaca:	2301      	movs	r3, #1
    aacc:	e000      	b.n	aad0 <_spi_load_regs_slave+0x1c>
    aace:	2300      	movs	r3, #0
    aad0:	f003 0301 	and.w	r3, r3, #1
    aad4:	b2db      	uxtb	r3, r3
    aad6:	f640 1259 	movw	r2, #2393	; 0x959
    aada:	491a      	ldr	r1, [pc, #104]	; (ab44 <_spi_load_regs_slave+0x90>)
    aadc:	4618      	mov	r0, r3
    aade:	4b1a      	ldr	r3, [pc, #104]	; (ab48 <_spi_load_regs_slave+0x94>)
    aae0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    aae2:	683b      	ldr	r3, [r7, #0]
    aae4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    aae6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    aaea:	f023 0301 	bic.w	r3, r3, #1
    aaee:	4619      	mov	r1, r3
    aaf0:	6878      	ldr	r0, [r7, #4]
    aaf2:	4b16      	ldr	r3, [pc, #88]	; (ab4c <_spi_load_regs_slave+0x98>)
    aaf4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    aaf6:	683b      	ldr	r3, [r7, #0]
    aaf8:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    aafa:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    aafe:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    ab02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ab06:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    ab0a:	4619      	mov	r1, r3
    ab0c:	6878      	ldr	r0, [r7, #4]
    ab0e:	4b10      	ldr	r3, [pc, #64]	; (ab50 <_spi_load_regs_slave+0x9c>)
    ab10:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    ab12:	683b      	ldr	r3, [r7, #0]
    ab14:	689b      	ldr	r3, [r3, #8]
    ab16:	4619      	mov	r1, r3
    ab18:	6878      	ldr	r0, [r7, #4]
    ab1a:	4b0e      	ldr	r3, [pc, #56]	; (ab54 <_spi_load_regs_slave+0xa0>)
    ab1c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    ab1e:	683b      	ldr	r3, [r7, #0]
    ab20:	7b5b      	ldrb	r3, [r3, #13]
    ab22:	4619      	mov	r1, r3
    ab24:	6878      	ldr	r0, [r7, #4]
    ab26:	4b0c      	ldr	r3, [pc, #48]	; (ab58 <_spi_load_regs_slave+0xa4>)
    ab28:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    ab2a:	bf00      	nop
    ab2c:	f04f 31ff 	mov.w	r1, #4294967295
    ab30:	6878      	ldr	r0, [r7, #4]
    ab32:	4b0a      	ldr	r3, [pc, #40]	; (ab5c <_spi_load_regs_slave+0xa8>)
    ab34:	4798      	blx	r3
    ab36:	4603      	mov	r3, r0
    ab38:	2b00      	cmp	r3, #0
    ab3a:	d1f7      	bne.n	ab2c <_spi_load_regs_slave+0x78>
		;
}
    ab3c:	bf00      	nop
    ab3e:	3708      	adds	r7, #8
    ab40:	46bd      	mov	sp, r7
    ab42:	bd80      	pop	{r7, pc}
    ab44:	0001d210 	.word	0x0001d210
    ab48:	00006991 	.word	0x00006991
    ab4c:	000099bd 	.word	0x000099bd
    ab50:	00009ad5 	.word	0x00009ad5
    ab54:	00009bb9 	.word	0x00009bb9
    ab58:	00009c4d 	.word	0x00009c4d
    ab5c:	000095f1 	.word	0x000095f1

0000ab60 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    ab60:	b580      	push	{r7, lr}
    ab62:	b084      	sub	sp, #16
    ab64:	af00      	add	r7, sp, #0
    ab66:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    ab68:	687b      	ldr	r3, [r7, #4]
    ab6a:	4618      	mov	r0, r3
    ab6c:	4b11      	ldr	r3, [pc, #68]	; (abb4 <_spi_get_regs+0x54>)
    ab6e:	4798      	blx	r3
    ab70:	4603      	mov	r3, r0
    ab72:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    ab74:	2300      	movs	r3, #0
    ab76:	73fb      	strb	r3, [r7, #15]
    ab78:	e014      	b.n	aba4 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    ab7a:	7bfa      	ldrb	r2, [r7, #15]
    ab7c:	490e      	ldr	r1, [pc, #56]	; (abb8 <_spi_get_regs+0x58>)
    ab7e:	4613      	mov	r3, r2
    ab80:	011b      	lsls	r3, r3, #4
    ab82:	4413      	add	r3, r2
    ab84:	440b      	add	r3, r1
    ab86:	3310      	adds	r3, #16
    ab88:	781b      	ldrb	r3, [r3, #0]
    ab8a:	7bba      	ldrb	r2, [r7, #14]
    ab8c:	429a      	cmp	r2, r3
    ab8e:	d106      	bne.n	ab9e <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    ab90:	7bfa      	ldrb	r2, [r7, #15]
    ab92:	4613      	mov	r3, r2
    ab94:	011b      	lsls	r3, r3, #4
    ab96:	4413      	add	r3, r2
    ab98:	4a07      	ldr	r2, [pc, #28]	; (abb8 <_spi_get_regs+0x58>)
    ab9a:	4413      	add	r3, r2
    ab9c:	e006      	b.n	abac <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    ab9e:	7bfb      	ldrb	r3, [r7, #15]
    aba0:	3301      	adds	r3, #1
    aba2:	73fb      	strb	r3, [r7, #15]
    aba4:	7bfb      	ldrb	r3, [r7, #15]
    aba6:	2b02      	cmp	r3, #2
    aba8:	d9e7      	bls.n	ab7a <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    abaa:	2300      	movs	r3, #0
}
    abac:	4618      	mov	r0, r3
    abae:	3710      	adds	r7, #16
    abb0:	46bd      	mov	sp, r7
    abb2:	bd80      	pop	{r7, pc}
    abb4:	00009d05 	.word	0x00009d05
    abb8:	0001d24c 	.word	0x0001d24c

0000abbc <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    abbc:	b580      	push	{r7, lr}
    abbe:	b084      	sub	sp, #16
    abc0:	af00      	add	r7, sp, #0
    abc2:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    abc4:	687b      	ldr	r3, [r7, #4]
    abc6:	681b      	ldr	r3, [r3, #0]
    abc8:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    abca:	68f8      	ldr	r0, [r7, #12]
    abcc:	4b21      	ldr	r3, [pc, #132]	; (ac54 <_spi_handler+0x98>)
    abce:	4798      	blx	r3
    abd0:	4603      	mov	r3, r0
    abd2:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    abd4:	68f8      	ldr	r0, [r7, #12]
    abd6:	4b20      	ldr	r3, [pc, #128]	; (ac58 <_spi_handler+0x9c>)
    abd8:	4798      	blx	r3
    abda:	4603      	mov	r3, r0
    abdc:	461a      	mov	r2, r3
    abde:	7afb      	ldrb	r3, [r7, #11]
    abe0:	4013      	ands	r3, r2
    abe2:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    abe4:	7afb      	ldrb	r3, [r7, #11]
    abe6:	f003 0301 	and.w	r3, r3, #1
    abea:	2b00      	cmp	r3, #0
    abec:	d004      	beq.n	abf8 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    abee:	687b      	ldr	r3, [r7, #4]
    abf0:	689b      	ldr	r3, [r3, #8]
    abf2:	6878      	ldr	r0, [r7, #4]
    abf4:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    abf6:	e029      	b.n	ac4c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    abf8:	7afb      	ldrb	r3, [r7, #11]
    abfa:	f003 0304 	and.w	r3, r3, #4
    abfe:	2b00      	cmp	r3, #0
    ac00:	d004      	beq.n	ac0c <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    ac02:	687b      	ldr	r3, [r7, #4]
    ac04:	68db      	ldr	r3, [r3, #12]
    ac06:	6878      	ldr	r0, [r7, #4]
    ac08:	4798      	blx	r3
}
    ac0a:	e01f      	b.n	ac4c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    ac0c:	7afb      	ldrb	r3, [r7, #11]
    ac0e:	f003 0302 	and.w	r3, r3, #2
    ac12:	2b00      	cmp	r3, #0
    ac14:	d008      	beq.n	ac28 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    ac16:	2102      	movs	r1, #2
    ac18:	68f8      	ldr	r0, [r7, #12]
    ac1a:	4b10      	ldr	r3, [pc, #64]	; (ac5c <_spi_handler+0xa0>)
    ac1c:	4798      	blx	r3
		dev->callbacks.complete(dev);
    ac1e:	687b      	ldr	r3, [r7, #4]
    ac20:	691b      	ldr	r3, [r3, #16]
    ac22:	6878      	ldr	r0, [r7, #4]
    ac24:	4798      	blx	r3
}
    ac26:	e011      	b.n	ac4c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    ac28:	f997 300b 	ldrsb.w	r3, [r7, #11]
    ac2c:	2b00      	cmp	r3, #0
    ac2e:	da0d      	bge.n	ac4c <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    ac30:	2104      	movs	r1, #4
    ac32:	68f8      	ldr	r0, [r7, #12]
    ac34:	4b0a      	ldr	r3, [pc, #40]	; (ac60 <_spi_handler+0xa4>)
    ac36:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    ac38:	2180      	movs	r1, #128	; 0x80
    ac3a:	68f8      	ldr	r0, [r7, #12]
    ac3c:	4b07      	ldr	r3, [pc, #28]	; (ac5c <_spi_handler+0xa0>)
    ac3e:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    ac40:	687b      	ldr	r3, [r7, #4]
    ac42:	695b      	ldr	r3, [r3, #20]
    ac44:	f06f 0112 	mvn.w	r1, #18
    ac48:	6878      	ldr	r0, [r7, #4]
    ac4a:	4798      	blx	r3
}
    ac4c:	bf00      	nop
    ac4e:	3710      	adds	r7, #16
    ac50:	46bd      	mov	sp, r7
    ac52:	bd80      	pop	{r7, pc}
    ac54:	000096ad 	.word	0x000096ad
    ac58:	00009817 	.word	0x00009817
    ac5c:	000096c7 	.word	0x000096c7
    ac60:	00009c6d 	.word	0x00009c6d

0000ac64 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    ac64:	b580      	push	{r7, lr}
    ac66:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    ac68:	4b03      	ldr	r3, [pc, #12]	; (ac78 <SERCOM4_0_Handler+0x14>)
    ac6a:	681b      	ldr	r3, [r3, #0]
    ac6c:	4618      	mov	r0, r3
    ac6e:	4b03      	ldr	r3, [pc, #12]	; (ac7c <SERCOM4_0_Handler+0x18>)
    ac70:	4798      	blx	r3
}
    ac72:	bf00      	nop
    ac74:	bd80      	pop	{r7, pc}
    ac76:	bf00      	nop
    ac78:	20003594 	.word	0x20003594
    ac7c:	0000abbd 	.word	0x0000abbd

0000ac80 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    ac80:	b580      	push	{r7, lr}
    ac82:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    ac84:	4b03      	ldr	r3, [pc, #12]	; (ac94 <SERCOM4_1_Handler+0x14>)
    ac86:	681b      	ldr	r3, [r3, #0]
    ac88:	4618      	mov	r0, r3
    ac8a:	4b03      	ldr	r3, [pc, #12]	; (ac98 <SERCOM4_1_Handler+0x18>)
    ac8c:	4798      	blx	r3
}
    ac8e:	bf00      	nop
    ac90:	bd80      	pop	{r7, pc}
    ac92:	bf00      	nop
    ac94:	20003594 	.word	0x20003594
    ac98:	0000abbd 	.word	0x0000abbd

0000ac9c <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    ac9c:	b580      	push	{r7, lr}
    ac9e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    aca0:	4b03      	ldr	r3, [pc, #12]	; (acb0 <SERCOM4_2_Handler+0x14>)
    aca2:	681b      	ldr	r3, [r3, #0]
    aca4:	4618      	mov	r0, r3
    aca6:	4b03      	ldr	r3, [pc, #12]	; (acb4 <SERCOM4_2_Handler+0x18>)
    aca8:	4798      	blx	r3
}
    acaa:	bf00      	nop
    acac:	bd80      	pop	{r7, pc}
    acae:	bf00      	nop
    acb0:	20003594 	.word	0x20003594
    acb4:	0000abbd 	.word	0x0000abbd

0000acb8 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    acb8:	b580      	push	{r7, lr}
    acba:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    acbc:	4b03      	ldr	r3, [pc, #12]	; (accc <SERCOM4_3_Handler+0x14>)
    acbe:	681b      	ldr	r3, [r3, #0]
    acc0:	4618      	mov	r0, r3
    acc2:	4b03      	ldr	r3, [pc, #12]	; (acd0 <SERCOM4_3_Handler+0x18>)
    acc4:	4798      	blx	r3
}
    acc6:	bf00      	nop
    acc8:	bd80      	pop	{r7, pc}
    acca:	bf00      	nop
    accc:	20003594 	.word	0x20003594
    acd0:	0000abbd 	.word	0x0000abbd

0000acd4 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    acd4:	b580      	push	{r7, lr}
    acd6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    acd8:	4b03      	ldr	r3, [pc, #12]	; (ace8 <SERCOM5_0_Handler+0x14>)
    acda:	681b      	ldr	r3, [r3, #0]
    acdc:	4618      	mov	r0, r3
    acde:	4b03      	ldr	r3, [pc, #12]	; (acec <SERCOM5_0_Handler+0x18>)
    ace0:	4798      	blx	r3
}
    ace2:	bf00      	nop
    ace4:	bd80      	pop	{r7, pc}
    ace6:	bf00      	nop
    ace8:	20003598 	.word	0x20003598
    acec:	0000a069 	.word	0x0000a069

0000acf0 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    acf0:	b580      	push	{r7, lr}
    acf2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    acf4:	4b03      	ldr	r3, [pc, #12]	; (ad04 <SERCOM5_1_Handler+0x14>)
    acf6:	681b      	ldr	r3, [r3, #0]
    acf8:	4618      	mov	r0, r3
    acfa:	4b03      	ldr	r3, [pc, #12]	; (ad08 <SERCOM5_1_Handler+0x18>)
    acfc:	4798      	blx	r3
}
    acfe:	bf00      	nop
    ad00:	bd80      	pop	{r7, pc}
    ad02:	bf00      	nop
    ad04:	20003598 	.word	0x20003598
    ad08:	0000a069 	.word	0x0000a069

0000ad0c <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    ad0c:	b580      	push	{r7, lr}
    ad0e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    ad10:	4b03      	ldr	r3, [pc, #12]	; (ad20 <SERCOM5_2_Handler+0x14>)
    ad12:	681b      	ldr	r3, [r3, #0]
    ad14:	4618      	mov	r0, r3
    ad16:	4b03      	ldr	r3, [pc, #12]	; (ad24 <SERCOM5_2_Handler+0x18>)
    ad18:	4798      	blx	r3
}
    ad1a:	bf00      	nop
    ad1c:	bd80      	pop	{r7, pc}
    ad1e:	bf00      	nop
    ad20:	20003598 	.word	0x20003598
    ad24:	0000a069 	.word	0x0000a069

0000ad28 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    ad28:	b580      	push	{r7, lr}
    ad2a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    ad2c:	4b03      	ldr	r3, [pc, #12]	; (ad3c <SERCOM5_3_Handler+0x14>)
    ad2e:	681b      	ldr	r3, [r3, #0]
    ad30:	4618      	mov	r0, r3
    ad32:	4b03      	ldr	r3, [pc, #12]	; (ad40 <SERCOM5_3_Handler+0x18>)
    ad34:	4798      	blx	r3
}
    ad36:	bf00      	nop
    ad38:	bd80      	pop	{r7, pc}
    ad3a:	bf00      	nop
    ad3c:	20003598 	.word	0x20003598
    ad40:	0000a069 	.word	0x0000a069

0000ad44 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    ad44:	b580      	push	{r7, lr}
    ad46:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    ad48:	4b03      	ldr	r3, [pc, #12]	; (ad58 <SERCOM7_0_Handler+0x14>)
    ad4a:	681b      	ldr	r3, [r3, #0]
    ad4c:	4618      	mov	r0, r3
    ad4e:	4b03      	ldr	r3, [pc, #12]	; (ad5c <SERCOM7_0_Handler+0x18>)
    ad50:	4798      	blx	r3
}
    ad52:	bf00      	nop
    ad54:	bd80      	pop	{r7, pc}
    ad56:	bf00      	nop
    ad58:	2000359c 	.word	0x2000359c
    ad5c:	0000a069 	.word	0x0000a069

0000ad60 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    ad60:	b580      	push	{r7, lr}
    ad62:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    ad64:	4b03      	ldr	r3, [pc, #12]	; (ad74 <SERCOM7_1_Handler+0x14>)
    ad66:	681b      	ldr	r3, [r3, #0]
    ad68:	4618      	mov	r0, r3
    ad6a:	4b03      	ldr	r3, [pc, #12]	; (ad78 <SERCOM7_1_Handler+0x18>)
    ad6c:	4798      	blx	r3
}
    ad6e:	bf00      	nop
    ad70:	bd80      	pop	{r7, pc}
    ad72:	bf00      	nop
    ad74:	2000359c 	.word	0x2000359c
    ad78:	0000a069 	.word	0x0000a069

0000ad7c <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    ad7c:	b580      	push	{r7, lr}
    ad7e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    ad80:	4b03      	ldr	r3, [pc, #12]	; (ad90 <SERCOM7_2_Handler+0x14>)
    ad82:	681b      	ldr	r3, [r3, #0]
    ad84:	4618      	mov	r0, r3
    ad86:	4b03      	ldr	r3, [pc, #12]	; (ad94 <SERCOM7_2_Handler+0x18>)
    ad88:	4798      	blx	r3
}
    ad8a:	bf00      	nop
    ad8c:	bd80      	pop	{r7, pc}
    ad8e:	bf00      	nop
    ad90:	2000359c 	.word	0x2000359c
    ad94:	0000a069 	.word	0x0000a069

0000ad98 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    ad98:	b580      	push	{r7, lr}
    ad9a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    ad9c:	4b03      	ldr	r3, [pc, #12]	; (adac <SERCOM7_3_Handler+0x14>)
    ad9e:	681b      	ldr	r3, [r3, #0]
    ada0:	4618      	mov	r0, r3
    ada2:	4b03      	ldr	r3, [pc, #12]	; (adb0 <SERCOM7_3_Handler+0x18>)
    ada4:	4798      	blx	r3
}
    ada6:	bf00      	nop
    ada8:	bd80      	pop	{r7, pc}
    adaa:	bf00      	nop
    adac:	2000359c 	.word	0x2000359c
    adb0:	0000a069 	.word	0x0000a069

0000adb4 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    adb4:	b580      	push	{r7, lr}
    adb6:	b084      	sub	sp, #16
    adb8:	af00      	add	r7, sp, #0
    adba:	6078      	str	r0, [r7, #4]
    adbc:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    adbe:	683b      	ldr	r3, [r7, #0]
    adc0:	4618      	mov	r0, r3
    adc2:	4b35      	ldr	r3, [pc, #212]	; (ae98 <_spi_m_sync_init+0xe4>)
    adc4:	4798      	blx	r3
    adc6:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    adc8:	687b      	ldr	r3, [r7, #4]
    adca:	2b00      	cmp	r3, #0
    adcc:	d004      	beq.n	add8 <_spi_m_sync_init+0x24>
    adce:	683b      	ldr	r3, [r7, #0]
    add0:	2b00      	cmp	r3, #0
    add2:	d001      	beq.n	add8 <_spi_m_sync_init+0x24>
    add4:	2301      	movs	r3, #1
    add6:	e000      	b.n	adda <_spi_m_sync_init+0x26>
    add8:	2300      	movs	r3, #0
    adda:	f003 0301 	and.w	r3, r3, #1
    adde:	b2db      	uxtb	r3, r3
    ade0:	f640 12ec 	movw	r2, #2540	; 0x9ec
    ade4:	492d      	ldr	r1, [pc, #180]	; (ae9c <_spi_m_sync_init+0xe8>)
    ade6:	4618      	mov	r0, r3
    ade8:	4b2d      	ldr	r3, [pc, #180]	; (aea0 <_spi_m_sync_init+0xec>)
    adea:	4798      	blx	r3

	if (regs == NULL) {
    adec:	68fb      	ldr	r3, [r7, #12]
    adee:	2b00      	cmp	r3, #0
    adf0:	d102      	bne.n	adf8 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    adf2:	f06f 030c 	mvn.w	r3, #12
    adf6:	e04a      	b.n	ae8e <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    adf8:	2101      	movs	r1, #1
    adfa:	6838      	ldr	r0, [r7, #0]
    adfc:	4b29      	ldr	r3, [pc, #164]	; (aea4 <_spi_m_sync_init+0xf0>)
    adfe:	4798      	blx	r3
    ae00:	4603      	mov	r3, r0
    ae02:	f083 0301 	eor.w	r3, r3, #1
    ae06:	b2db      	uxtb	r3, r3
    ae08:	2b00      	cmp	r3, #0
    ae0a:	d019      	beq.n	ae40 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    ae0c:	68fb      	ldr	r3, [r7, #12]
    ae0e:	681b      	ldr	r3, [r3, #0]
    ae10:	f003 031c 	and.w	r3, r3, #28
    ae14:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    ae16:	2102      	movs	r1, #2
    ae18:	6838      	ldr	r0, [r7, #0]
    ae1a:	4b23      	ldr	r3, [pc, #140]	; (aea8 <_spi_m_sync_init+0xf4>)
    ae1c:	4798      	blx	r3
    ae1e:	4603      	mov	r3, r0
    ae20:	2b00      	cmp	r3, #0
    ae22:	d006      	beq.n	ae32 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    ae24:	6838      	ldr	r0, [r7, #0]
    ae26:	4b21      	ldr	r3, [pc, #132]	; (aeac <_spi_m_sync_init+0xf8>)
    ae28:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    ae2a:	2102      	movs	r1, #2
    ae2c:	6838      	ldr	r0, [r7, #0]
    ae2e:	4b20      	ldr	r3, [pc, #128]	; (aeb0 <_spi_m_sync_init+0xfc>)
    ae30:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    ae32:	68bb      	ldr	r3, [r7, #8]
    ae34:	f043 0301 	orr.w	r3, r3, #1
    ae38:	4619      	mov	r1, r3
    ae3a:	6838      	ldr	r0, [r7, #0]
    ae3c:	4b1d      	ldr	r3, [pc, #116]	; (aeb4 <_spi_m_sync_init+0x100>)
    ae3e:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    ae40:	2101      	movs	r1, #1
    ae42:	6838      	ldr	r0, [r7, #0]
    ae44:	4b1a      	ldr	r3, [pc, #104]	; (aeb0 <_spi_m_sync_init+0xfc>)
    ae46:	4798      	blx	r3

	dev->prvt = hw;
    ae48:	687b      	ldr	r3, [r7, #4]
    ae4a:	683a      	ldr	r2, [r7, #0]
    ae4c:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    ae4e:	68fb      	ldr	r3, [r7, #12]
    ae50:	681b      	ldr	r3, [r3, #0]
    ae52:	f003 031c 	and.w	r3, r3, #28
    ae56:	2b08      	cmp	r3, #8
    ae58:	d104      	bne.n	ae64 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    ae5a:	68f9      	ldr	r1, [r7, #12]
    ae5c:	6838      	ldr	r0, [r7, #0]
    ae5e:	4b16      	ldr	r3, [pc, #88]	; (aeb8 <_spi_m_sync_init+0x104>)
    ae60:	4798      	blx	r3
    ae62:	e003      	b.n	ae6c <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    ae64:	68f9      	ldr	r1, [r7, #12]
    ae66:	6838      	ldr	r0, [r7, #0]
    ae68:	4b14      	ldr	r3, [pc, #80]	; (aebc <_spi_m_sync_init+0x108>)
    ae6a:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    ae6c:	68fb      	ldr	r3, [r7, #12]
    ae6e:	685b      	ldr	r3, [r3, #4]
    ae70:	f003 0307 	and.w	r3, r3, #7
    ae74:	2b00      	cmp	r3, #0
    ae76:	d101      	bne.n	ae7c <_spi_m_sync_init+0xc8>
    ae78:	2201      	movs	r2, #1
    ae7a:	e000      	b.n	ae7e <_spi_m_sync_init+0xca>
    ae7c:	2202      	movs	r2, #2
    ae7e:	687b      	ldr	r3, [r7, #4]
    ae80:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    ae82:	68fb      	ldr	r3, [r7, #12]
    ae84:	89db      	ldrh	r3, [r3, #14]
    ae86:	b29a      	uxth	r2, r3
    ae88:	687b      	ldr	r3, [r7, #4]
    ae8a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    ae8c:	2300      	movs	r3, #0
}
    ae8e:	4618      	mov	r0, r3
    ae90:	3710      	adds	r7, #16
    ae92:	46bd      	mov	sp, r7
    ae94:	bd80      	pop	{r7, pc}
    ae96:	bf00      	nop
    ae98:	0000ab61 	.word	0x0000ab61
    ae9c:	0001d210 	.word	0x0001d210
    aea0:	00006991 	.word	0x00006991
    aea4:	000095f1 	.word	0x000095f1
    aea8:	0000998d 	.word	0x0000998d
    aeac:	00009965 	.word	0x00009965
    aeb0:	000095cd 	.word	0x000095cd
    aeb4:	000099bd 	.word	0x000099bd
    aeb8:	0000aab5 	.word	0x0000aab5
    aebc:	0000aa21 	.word	0x0000aa21

0000aec0 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    aec0:	b580      	push	{r7, lr}
    aec2:	b086      	sub	sp, #24
    aec4:	af00      	add	r7, sp, #0
    aec6:	6078      	str	r0, [r7, #4]
    aec8:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    aeca:	687b      	ldr	r3, [r7, #4]
    aecc:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    aece:	6839      	ldr	r1, [r7, #0]
    aed0:	6878      	ldr	r0, [r7, #4]
    aed2:	4b1a      	ldr	r3, [pc, #104]	; (af3c <_spi_m_async_init+0x7c>)
    aed4:	4798      	blx	r3
    aed6:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    aed8:	68bb      	ldr	r3, [r7, #8]
    aeda:	2b00      	cmp	r3, #0
    aedc:	da01      	bge.n	aee2 <_spi_m_async_init+0x22>
		return rc;
    aede:	68bb      	ldr	r3, [r7, #8]
    aee0:	e028      	b.n	af34 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    aee2:	6879      	ldr	r1, [r7, #4]
    aee4:	6838      	ldr	r0, [r7, #0]
    aee6:	4b16      	ldr	r3, [pc, #88]	; (af40 <_spi_m_async_init+0x80>)
    aee8:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    aeea:	68fb      	ldr	r3, [r7, #12]
    aeec:	2200      	movs	r2, #0
    aeee:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    aef0:	68fb      	ldr	r3, [r7, #12]
    aef2:	2200      	movs	r2, #0
    aef4:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    aef6:	68fb      	ldr	r3, [r7, #12]
    aef8:	2200      	movs	r2, #0
    aefa:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    aefc:	6838      	ldr	r0, [r7, #0]
    aefe:	4b11      	ldr	r3, [pc, #68]	; (af44 <_spi_m_async_init+0x84>)
    af00:	4798      	blx	r3
    af02:	4603      	mov	r3, r0
    af04:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    af06:	2300      	movs	r3, #0
    af08:	613b      	str	r3, [r7, #16]
    af0a:	e00f      	b.n	af2c <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    af0c:	7dfb      	ldrb	r3, [r7, #23]
    af0e:	b21b      	sxth	r3, r3
    af10:	4618      	mov	r0, r3
    af12:	4b0d      	ldr	r3, [pc, #52]	; (af48 <_spi_m_async_init+0x88>)
    af14:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    af16:	7dfb      	ldrb	r3, [r7, #23]
    af18:	b21b      	sxth	r3, r3
    af1a:	4618      	mov	r0, r3
    af1c:	4b0b      	ldr	r3, [pc, #44]	; (af4c <_spi_m_async_init+0x8c>)
    af1e:	4798      	blx	r3
		irq++;
    af20:	7dfb      	ldrb	r3, [r7, #23]
    af22:	3301      	adds	r3, #1
    af24:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    af26:	693b      	ldr	r3, [r7, #16]
    af28:	3301      	adds	r3, #1
    af2a:	613b      	str	r3, [r7, #16]
    af2c:	693b      	ldr	r3, [r7, #16]
    af2e:	2b03      	cmp	r3, #3
    af30:	d9ec      	bls.n	af0c <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    af32:	2300      	movs	r3, #0
}
    af34:	4618      	mov	r0, r3
    af36:	3718      	adds	r7, #24
    af38:	46bd      	mov	sp, r7
    af3a:	bd80      	pop	{r7, pc}
    af3c:	0000adb5 	.word	0x0000adb5
    af40:	00009d61 	.word	0x00009d61
    af44:	0000a1ad 	.word	0x0000a1ad
    af48:	00009501 	.word	0x00009501
    af4c:	00009545 	.word	0x00009545

0000af50 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    af50:	b580      	push	{r7, lr}
    af52:	b082      	sub	sp, #8
    af54:	af00      	add	r7, sp, #0
    af56:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    af58:	687b      	ldr	r3, [r7, #4]
    af5a:	2b00      	cmp	r3, #0
    af5c:	d005      	beq.n	af6a <_spi_m_sync_enable+0x1a>
    af5e:	687b      	ldr	r3, [r7, #4]
    af60:	681b      	ldr	r3, [r3, #0]
    af62:	2b00      	cmp	r3, #0
    af64:	d001      	beq.n	af6a <_spi_m_sync_enable+0x1a>
    af66:	2301      	movs	r3, #1
    af68:	e000      	b.n	af6c <_spi_m_sync_enable+0x1c>
    af6a:	2300      	movs	r3, #0
    af6c:	f003 0301 	and.w	r3, r3, #1
    af70:	b2db      	uxtb	r3, r3
    af72:	f640 224b 	movw	r2, #2635	; 0xa4b
    af76:	4907      	ldr	r1, [pc, #28]	; (af94 <_spi_m_sync_enable+0x44>)
    af78:	4618      	mov	r0, r3
    af7a:	4b07      	ldr	r3, [pc, #28]	; (af98 <_spi_m_sync_enable+0x48>)
    af7c:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    af7e:	687b      	ldr	r3, [r7, #4]
    af80:	681b      	ldr	r3, [r3, #0]
    af82:	4618      	mov	r0, r3
    af84:	4b05      	ldr	r3, [pc, #20]	; (af9c <_spi_m_sync_enable+0x4c>)
    af86:	4798      	blx	r3
    af88:	4603      	mov	r3, r0
}
    af8a:	4618      	mov	r0, r3
    af8c:	3708      	adds	r7, #8
    af8e:	46bd      	mov	sp, r7
    af90:	bd80      	pop	{r7, pc}
    af92:	bf00      	nop
    af94:	0001d210 	.word	0x0001d210
    af98:	00006991 	.word	0x00006991
    af9c:	0000a9b9 	.word	0x0000a9b9

0000afa0 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    afa0:	b580      	push	{r7, lr}
    afa2:	b082      	sub	sp, #8
    afa4:	af00      	add	r7, sp, #0
    afa6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    afa8:	687b      	ldr	r3, [r7, #4]
    afaa:	2b00      	cmp	r3, #0
    afac:	d005      	beq.n	afba <_spi_m_sync_disable+0x1a>
    afae:	687b      	ldr	r3, [r7, #4]
    afb0:	681b      	ldr	r3, [r3, #0]
    afb2:	2b00      	cmp	r3, #0
    afb4:	d001      	beq.n	afba <_spi_m_sync_disable+0x1a>
    afb6:	2301      	movs	r3, #1
    afb8:	e000      	b.n	afbc <_spi_m_sync_disable+0x1c>
    afba:	2300      	movs	r3, #0
    afbc:	f003 0301 	and.w	r3, r3, #1
    afc0:	b2db      	uxtb	r3, r3
    afc2:	f640 2267 	movw	r2, #2663	; 0xa67
    afc6:	4907      	ldr	r1, [pc, #28]	; (afe4 <_spi_m_sync_disable+0x44>)
    afc8:	4618      	mov	r0, r3
    afca:	4b07      	ldr	r3, [pc, #28]	; (afe8 <_spi_m_sync_disable+0x48>)
    afcc:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    afce:	687b      	ldr	r3, [r7, #4]
    afd0:	681b      	ldr	r3, [r3, #0]
    afd2:	4618      	mov	r0, r3
    afd4:	4b05      	ldr	r3, [pc, #20]	; (afec <_spi_m_sync_disable+0x4c>)
    afd6:	4798      	blx	r3
    afd8:	4603      	mov	r3, r0
}
    afda:	4618      	mov	r0, r3
    afdc:	3708      	adds	r7, #8
    afde:	46bd      	mov	sp, r7
    afe0:	bd80      	pop	{r7, pc}
    afe2:	bf00      	nop
    afe4:	0001d210 	.word	0x0001d210
    afe8:	00006991 	.word	0x00006991
    afec:	0000a9ed 	.word	0x0000a9ed

0000aff0 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    aff0:	b580      	push	{r7, lr}
    aff2:	b082      	sub	sp, #8
    aff4:	af00      	add	r7, sp, #0
    aff6:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    aff8:	bf00      	nop
    affa:	2103      	movs	r1, #3
    affc:	6878      	ldr	r0, [r7, #4]
    affe:	4b06      	ldr	r3, [pc, #24]	; (b018 <_spi_wait_bus_idle+0x28>)
    b000:	4798      	blx	r3
    b002:	4603      	mov	r3, r0
    b004:	2b00      	cmp	r3, #0
    b006:	d0f8      	beq.n	affa <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    b008:	2103      	movs	r1, #3
    b00a:	6878      	ldr	r0, [r7, #4]
    b00c:	4b03      	ldr	r3, [pc, #12]	; (b01c <_spi_wait_bus_idle+0x2c>)
    b00e:	4798      	blx	r3
}
    b010:	bf00      	nop
    b012:	3708      	adds	r7, #8
    b014:	46bd      	mov	sp, r7
    b016:	bd80      	pop	{r7, pc}
    b018:	00009685 	.word	0x00009685
    b01c:	000096c7 	.word	0x000096c7

0000b020 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    b020:	b580      	push	{r7, lr}
    b022:	b086      	sub	sp, #24
    b024:	af00      	add	r7, sp, #0
    b026:	60f8      	str	r0, [r7, #12]
    b028:	60b9      	str	r1, [r7, #8]
    b02a:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    b02c:	68bb      	ldr	r3, [r7, #8]
    b02e:	f003 0304 	and.w	r3, r3, #4
    b032:	2b00      	cmp	r3, #0
    b034:	d101      	bne.n	b03a <_spi_rx_check_and_receive+0x1a>
		return false;
    b036:	2300      	movs	r3, #0
    b038:	e022      	b.n	b080 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    b03a:	68f8      	ldr	r0, [r7, #12]
    b03c:	4b12      	ldr	r3, [pc, #72]	; (b088 <_spi_rx_check_and_receive+0x68>)
    b03e:	4798      	blx	r3
    b040:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    b042:	687b      	ldr	r3, [r7, #4]
    b044:	685b      	ldr	r3, [r3, #4]
    b046:	2b00      	cmp	r3, #0
    b048:	d014      	beq.n	b074 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    b04a:	687b      	ldr	r3, [r7, #4]
    b04c:	685b      	ldr	r3, [r3, #4]
    b04e:	1c59      	adds	r1, r3, #1
    b050:	687a      	ldr	r2, [r7, #4]
    b052:	6051      	str	r1, [r2, #4]
    b054:	697a      	ldr	r2, [r7, #20]
    b056:	b2d2      	uxtb	r2, r2
    b058:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    b05a:	687b      	ldr	r3, [r7, #4]
    b05c:	7c1b      	ldrb	r3, [r3, #16]
    b05e:	2b01      	cmp	r3, #1
    b060:	d908      	bls.n	b074 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    b062:	687b      	ldr	r3, [r7, #4]
    b064:	685b      	ldr	r3, [r3, #4]
    b066:	1c59      	adds	r1, r3, #1
    b068:	687a      	ldr	r2, [r7, #4]
    b06a:	6051      	str	r1, [r2, #4]
    b06c:	697a      	ldr	r2, [r7, #20]
    b06e:	0a12      	lsrs	r2, r2, #8
    b070:	b2d2      	uxtb	r2, r2
    b072:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    b074:	687b      	ldr	r3, [r7, #4]
    b076:	68db      	ldr	r3, [r3, #12]
    b078:	1c5a      	adds	r2, r3, #1
    b07a:	687b      	ldr	r3, [r7, #4]
    b07c:	60da      	str	r2, [r3, #12]

	return true;
    b07e:	2301      	movs	r3, #1
}
    b080:	4618      	mov	r0, r3
    b082:	3718      	adds	r7, #24
    b084:	46bd      	mov	sp, r7
    b086:	bd80      	pop	{r7, pc}
    b088:	00009c35 	.word	0x00009c35

0000b08c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    b08c:	b580      	push	{r7, lr}
    b08e:	b086      	sub	sp, #24
    b090:	af00      	add	r7, sp, #0
    b092:	60f8      	str	r0, [r7, #12]
    b094:	60b9      	str	r1, [r7, #8]
    b096:	607a      	str	r2, [r7, #4]
    b098:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    b09a:	68bb      	ldr	r3, [r7, #8]
    b09c:	f003 0301 	and.w	r3, r3, #1
    b0a0:	2b00      	cmp	r3, #0
    b0a2:	d028      	beq.n	b0f6 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    b0a4:	687b      	ldr	r3, [r7, #4]
    b0a6:	681b      	ldr	r3, [r3, #0]
    b0a8:	2b00      	cmp	r3, #0
    b0aa:	d018      	beq.n	b0de <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    b0ac:	687b      	ldr	r3, [r7, #4]
    b0ae:	681b      	ldr	r3, [r3, #0]
    b0b0:	1c59      	adds	r1, r3, #1
    b0b2:	687a      	ldr	r2, [r7, #4]
    b0b4:	6011      	str	r1, [r2, #0]
    b0b6:	781b      	ldrb	r3, [r3, #0]
    b0b8:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    b0ba:	687b      	ldr	r3, [r7, #4]
    b0bc:	7c1b      	ldrb	r3, [r3, #16]
    b0be:	2b01      	cmp	r3, #1
    b0c0:	d90f      	bls.n	b0e2 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    b0c2:	687b      	ldr	r3, [r7, #4]
    b0c4:	681b      	ldr	r3, [r3, #0]
    b0c6:	781b      	ldrb	r3, [r3, #0]
    b0c8:	021b      	lsls	r3, r3, #8
    b0ca:	461a      	mov	r2, r3
    b0cc:	697b      	ldr	r3, [r7, #20]
    b0ce:	4313      	orrs	r3, r2
    b0d0:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    b0d2:	687b      	ldr	r3, [r7, #4]
    b0d4:	681b      	ldr	r3, [r3, #0]
    b0d6:	1c5a      	adds	r2, r3, #1
    b0d8:	687b      	ldr	r3, [r7, #4]
    b0da:	601a      	str	r2, [r3, #0]
    b0dc:	e001      	b.n	b0e2 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    b0de:	887b      	ldrh	r3, [r7, #2]
    b0e0:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    b0e2:	687b      	ldr	r3, [r7, #4]
    b0e4:	689b      	ldr	r3, [r3, #8]
    b0e6:	1c5a      	adds	r2, r3, #1
    b0e8:	687b      	ldr	r3, [r7, #4]
    b0ea:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    b0ec:	6979      	ldr	r1, [r7, #20]
    b0ee:	68f8      	ldr	r0, [r7, #12]
    b0f0:	4b03      	ldr	r3, [pc, #12]	; (b100 <_spi_tx_check_and_send+0x74>)
    b0f2:	4798      	blx	r3
    b0f4:	e000      	b.n	b0f8 <_spi_tx_check_and_send+0x6c>
		return;
    b0f6:	bf00      	nop
}
    b0f8:	3718      	adds	r7, #24
    b0fa:	46bd      	mov	sp, r7
    b0fc:	bd80      	pop	{r7, pc}
    b0fe:	bf00      	nop
    b100:	00009c19 	.word	0x00009c19

0000b104 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    b104:	b580      	push	{r7, lr}
    b106:	b082      	sub	sp, #8
    b108:	af00      	add	r7, sp, #0
    b10a:	6078      	str	r0, [r7, #4]
    b10c:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    b10e:	687b      	ldr	r3, [r7, #4]
    b110:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b114:	2b00      	cmp	r3, #0
    b116:	d00b      	beq.n	b130 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    b118:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b11c:	6838      	ldr	r0, [r7, #0]
    b11e:	4b07      	ldr	r3, [pc, #28]	; (b13c <_spi_err_check+0x38>)
    b120:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    b122:	2180      	movs	r1, #128	; 0x80
    b124:	6838      	ldr	r0, [r7, #0]
    b126:	4b06      	ldr	r3, [pc, #24]	; (b140 <_spi_err_check+0x3c>)
    b128:	4798      	blx	r3
		return ERR_OVERFLOW;
    b12a:	f06f 0312 	mvn.w	r3, #18
    b12e:	e000      	b.n	b132 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    b130:	2300      	movs	r3, #0
}
    b132:	4618      	mov	r0, r3
    b134:	3708      	adds	r7, #8
    b136:	46bd      	mov	sp, r7
    b138:	bd80      	pop	{r7, pc}
    b13a:	bf00      	nop
    b13c:	00009c6d 	.word	0x00009c6d
    b140:	000096c7 	.word	0x000096c7

0000b144 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    b144:	b590      	push	{r4, r7, lr}
    b146:	b08b      	sub	sp, #44	; 0x2c
    b148:	af00      	add	r7, sp, #0
    b14a:	6078      	str	r0, [r7, #4]
    b14c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    b14e:	687b      	ldr	r3, [r7, #4]
    b150:	681b      	ldr	r3, [r3, #0]
    b152:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    b154:	2300      	movs	r3, #0
    b156:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    b158:	683b      	ldr	r3, [r7, #0]
    b15a:	681b      	ldr	r3, [r3, #0]
    b15c:	60bb      	str	r3, [r7, #8]
    b15e:	683b      	ldr	r3, [r7, #0]
    b160:	685b      	ldr	r3, [r3, #4]
    b162:	60fb      	str	r3, [r7, #12]
    b164:	2300      	movs	r3, #0
    b166:	613b      	str	r3, [r7, #16]
    b168:	2300      	movs	r3, #0
    b16a:	617b      	str	r3, [r7, #20]
    b16c:	687b      	ldr	r3, [r7, #4]
    b16e:	791b      	ldrb	r3, [r3, #4]
    b170:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    b172:	687b      	ldr	r3, [r7, #4]
    b174:	2b00      	cmp	r3, #0
    b176:	d004      	beq.n	b182 <_spi_m_sync_trans+0x3e>
    b178:	6a3b      	ldr	r3, [r7, #32]
    b17a:	2b00      	cmp	r3, #0
    b17c:	d001      	beq.n	b182 <_spi_m_sync_trans+0x3e>
    b17e:	2301      	movs	r3, #1
    b180:	e000      	b.n	b184 <_spi_m_sync_trans+0x40>
    b182:	2300      	movs	r3, #0
    b184:	f003 0301 	and.w	r3, r3, #1
    b188:	b2db      	uxtb	r3, r3
    b18a:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    b18e:	492b      	ldr	r1, [pc, #172]	; (b23c <_spi_m_sync_trans+0xf8>)
    b190:	4618      	mov	r0, r3
    b192:	4b2b      	ldr	r3, [pc, #172]	; (b240 <_spi_m_sync_trans+0xfc>)
    b194:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    b196:	2107      	movs	r1, #7
    b198:	6a38      	ldr	r0, [r7, #32]
    b19a:	4b2a      	ldr	r3, [pc, #168]	; (b244 <_spi_m_sync_trans+0x100>)
    b19c:	4798      	blx	r3
    b19e:	4603      	mov	r3, r0
    b1a0:	2b00      	cmp	r3, #0
    b1a2:	d002      	beq.n	b1aa <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    b1a4:	f06f 0303 	mvn.w	r3, #3
    b1a8:	e043      	b.n	b232 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    b1aa:	6a38      	ldr	r0, [r7, #32]
    b1ac:	4b26      	ldr	r3, [pc, #152]	; (b248 <_spi_m_sync_trans+0x104>)
    b1ae:	4798      	blx	r3
    b1b0:	4603      	mov	r3, r0
    b1b2:	f083 0301 	eor.w	r3, r3, #1
    b1b6:	b2db      	uxtb	r3, r3
    b1b8:	2b00      	cmp	r3, #0
    b1ba:	d002      	beq.n	b1c2 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    b1bc:	f06f 0313 	mvn.w	r3, #19
    b1c0:	e037      	b.n	b232 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    b1c2:	6a38      	ldr	r0, [r7, #32]
    b1c4:	4b21      	ldr	r3, [pc, #132]	; (b24c <_spi_m_sync_trans+0x108>)
    b1c6:	4798      	blx	r3
    b1c8:	4603      	mov	r3, r0
    b1ca:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    b1cc:	f107 0308 	add.w	r3, r7, #8
    b1d0:	461a      	mov	r2, r3
    b1d2:	69f9      	ldr	r1, [r7, #28]
    b1d4:	6a38      	ldr	r0, [r7, #32]
    b1d6:	4b1e      	ldr	r3, [pc, #120]	; (b250 <_spi_m_sync_trans+0x10c>)
    b1d8:	4798      	blx	r3
    b1da:	4603      	mov	r3, r0
    b1dc:	f083 0301 	eor.w	r3, r3, #1
    b1e0:	b2db      	uxtb	r3, r3
    b1e2:	2b00      	cmp	r3, #0
    b1e4:	d00b      	beq.n	b1fe <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    b1e6:	697a      	ldr	r2, [r7, #20]
    b1e8:	693b      	ldr	r3, [r7, #16]
    b1ea:	429a      	cmp	r2, r3
    b1ec:	d307      	bcc.n	b1fe <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    b1ee:	687b      	ldr	r3, [r7, #4]
    b1f0:	88db      	ldrh	r3, [r3, #6]
    b1f2:	f107 0208 	add.w	r2, r7, #8
    b1f6:	69f9      	ldr	r1, [r7, #28]
    b1f8:	6a38      	ldr	r0, [r7, #32]
    b1fa:	4c16      	ldr	r4, [pc, #88]	; (b254 <_spi_m_sync_trans+0x110>)
    b1fc:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    b1fe:	6a39      	ldr	r1, [r7, #32]
    b200:	69f8      	ldr	r0, [r7, #28]
    b202:	4b15      	ldr	r3, [pc, #84]	; (b258 <_spi_m_sync_trans+0x114>)
    b204:	4798      	blx	r3
    b206:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b20a:	2b00      	cmp	r3, #0
    b20c:	db0c      	blt.n	b228 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    b20e:	693a      	ldr	r2, [r7, #16]
    b210:	683b      	ldr	r3, [r7, #0]
    b212:	689b      	ldr	r3, [r3, #8]
    b214:	429a      	cmp	r2, r3
    b216:	d3d4      	bcc.n	b1c2 <_spi_m_sync_trans+0x7e>
    b218:	697a      	ldr	r2, [r7, #20]
    b21a:	683b      	ldr	r3, [r7, #0]
    b21c:	689b      	ldr	r3, [r3, #8]
    b21e:	429a      	cmp	r2, r3
    b220:	d3cf      	bcc.n	b1c2 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    b222:	693b      	ldr	r3, [r7, #16]
    b224:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    b226:	e000      	b.n	b22a <_spi_m_sync_trans+0xe6>
			break;
    b228:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    b22a:	6a38      	ldr	r0, [r7, #32]
    b22c:	4b0b      	ldr	r3, [pc, #44]	; (b25c <_spi_m_sync_trans+0x118>)
    b22e:	4798      	blx	r3

	return rc;
    b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b232:	4618      	mov	r0, r3
    b234:	372c      	adds	r7, #44	; 0x2c
    b236:	46bd      	mov	sp, r7
    b238:	bd90      	pop	{r4, r7, pc}
    b23a:	bf00      	nop
    b23c:	0001d210 	.word	0x0001d210
    b240:	00006991 	.word	0x00006991
    b244:	000095f1 	.word	0x000095f1
    b248:	0000992d 	.word	0x0000992d
    b24c:	000096ad 	.word	0x000096ad
    b250:	0000b021 	.word	0x0000b021
    b254:	0000b08d 	.word	0x0000b08d
    b258:	0000b105 	.word	0x0000b105
    b25c:	0000aff1 	.word	0x0000aff1

0000b260 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    b260:	b580      	push	{r7, lr}
    b262:	b084      	sub	sp, #16
    b264:	af00      	add	r7, sp, #0
    b266:	6078      	str	r0, [r7, #4]
    b268:	460b      	mov	r3, r1
    b26a:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    b26c:	687b      	ldr	r3, [r7, #4]
    b26e:	681b      	ldr	r3, [r3, #0]
    b270:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    b272:	687b      	ldr	r3, [r7, #4]
    b274:	2b00      	cmp	r3, #0
    b276:	d004      	beq.n	b282 <_spi_m_async_enable_tx+0x22>
    b278:	68fb      	ldr	r3, [r7, #12]
    b27a:	2b00      	cmp	r3, #0
    b27c:	d001      	beq.n	b282 <_spi_m_async_enable_tx+0x22>
    b27e:	2301      	movs	r3, #1
    b280:	e000      	b.n	b284 <_spi_m_async_enable_tx+0x24>
    b282:	2300      	movs	r3, #0
    b284:	f003 0301 	and.w	r3, r3, #1
    b288:	b2db      	uxtb	r3, r3
    b28a:	f640 327c 	movw	r2, #2940	; 0xb7c
    b28e:	4909      	ldr	r1, [pc, #36]	; (b2b4 <_spi_m_async_enable_tx+0x54>)
    b290:	4618      	mov	r0, r3
    b292:	4b09      	ldr	r3, [pc, #36]	; (b2b8 <_spi_m_async_enable_tx+0x58>)
    b294:	4798      	blx	r3

	if (state) {
    b296:	78fb      	ldrb	r3, [r7, #3]
    b298:	2b00      	cmp	r3, #0
    b29a:	d003      	beq.n	b2a4 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    b29c:	68f8      	ldr	r0, [r7, #12]
    b29e:	4b07      	ldr	r3, [pc, #28]	; (b2bc <_spi_m_async_enable_tx+0x5c>)
    b2a0:	4798      	blx	r3
    b2a2:	e002      	b.n	b2aa <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    b2a4:	68f8      	ldr	r0, [r7, #12]
    b2a6:	4b06      	ldr	r3, [pc, #24]	; (b2c0 <_spi_m_async_enable_tx+0x60>)
    b2a8:	4798      	blx	r3
	}

	return ERR_NONE;
    b2aa:	2300      	movs	r3, #0
}
    b2ac:	4618      	mov	r0, r3
    b2ae:	3710      	adds	r7, #16
    b2b0:	46bd      	mov	sp, r7
    b2b2:	bd80      	pop	{r7, pc}
    b2b4:	0001d210 	.word	0x0001d210
    b2b8:	00006991 	.word	0x00006991
    b2bc:	0000977b 	.word	0x0000977b
    b2c0:	00009795 	.word	0x00009795

0000b2c4 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    b2c4:	b580      	push	{r7, lr}
    b2c6:	b084      	sub	sp, #16
    b2c8:	af00      	add	r7, sp, #0
    b2ca:	6078      	str	r0, [r7, #4]
    b2cc:	460b      	mov	r3, r1
    b2ce:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    b2d0:	687b      	ldr	r3, [r7, #4]
    b2d2:	681b      	ldr	r3, [r3, #0]
    b2d4:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    b2d6:	687b      	ldr	r3, [r7, #4]
    b2d8:	2b00      	cmp	r3, #0
    b2da:	bf14      	ite	ne
    b2dc:	2301      	movne	r3, #1
    b2de:	2300      	moveq	r3, #0
    b2e0:	b2db      	uxtb	r3, r3
    b2e2:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    b2e6:	490f      	ldr	r1, [pc, #60]	; (b324 <_spi_m_async_enable_rx+0x60>)
    b2e8:	4618      	mov	r0, r3
    b2ea:	4b0f      	ldr	r3, [pc, #60]	; (b328 <_spi_m_async_enable_rx+0x64>)
    b2ec:	4798      	blx	r3
	ASSERT(hw);
    b2ee:	68fb      	ldr	r3, [r7, #12]
    b2f0:	2b00      	cmp	r3, #0
    b2f2:	bf14      	ite	ne
    b2f4:	2301      	movne	r3, #1
    b2f6:	2300      	moveq	r3, #0
    b2f8:	b2db      	uxtb	r3, r3
    b2fa:	f640 3291 	movw	r2, #2961	; 0xb91
    b2fe:	4909      	ldr	r1, [pc, #36]	; (b324 <_spi_m_async_enable_rx+0x60>)
    b300:	4618      	mov	r0, r3
    b302:	4b09      	ldr	r3, [pc, #36]	; (b328 <_spi_m_async_enable_rx+0x64>)
    b304:	4798      	blx	r3

	if (state) {
    b306:	78fb      	ldrb	r3, [r7, #3]
    b308:	2b00      	cmp	r3, #0
    b30a:	d003      	beq.n	b314 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    b30c:	68f8      	ldr	r0, [r7, #12]
    b30e:	4b07      	ldr	r3, [pc, #28]	; (b32c <_spi_m_async_enable_rx+0x68>)
    b310:	4798      	blx	r3
    b312:	e002      	b.n	b31a <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    b314:	68f8      	ldr	r0, [r7, #12]
    b316:	4b06      	ldr	r3, [pc, #24]	; (b330 <_spi_m_async_enable_rx+0x6c>)
    b318:	4798      	blx	r3
	}

	return ERR_NONE;
    b31a:	2300      	movs	r3, #0
}
    b31c:	4618      	mov	r0, r3
    b31e:	3710      	adds	r7, #16
    b320:	46bd      	mov	sp, r7
    b322:	bd80      	pop	{r7, pc}
    b324:	0001d210 	.word	0x0001d210
    b328:	00006991 	.word	0x00006991
    b32c:	000097e3 	.word	0x000097e3
    b330:	000097fd 	.word	0x000097fd

0000b334 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    b334:	b580      	push	{r7, lr}
    b336:	b082      	sub	sp, #8
    b338:	af00      	add	r7, sp, #0
    b33a:	6078      	str	r0, [r7, #4]
    b33c:	460b      	mov	r3, r1
    b33e:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    b340:	687b      	ldr	r3, [r7, #4]
    b342:	2b00      	cmp	r3, #0
    b344:	d005      	beq.n	b352 <_spi_m_async_enable_tx_complete+0x1e>
    b346:	687b      	ldr	r3, [r7, #4]
    b348:	681b      	ldr	r3, [r3, #0]
    b34a:	2b00      	cmp	r3, #0
    b34c:	d001      	beq.n	b352 <_spi_m_async_enable_tx_complete+0x1e>
    b34e:	2301      	movs	r3, #1
    b350:	e000      	b.n	b354 <_spi_m_async_enable_tx_complete+0x20>
    b352:	2300      	movs	r3, #0
    b354:	f003 0301 	and.w	r3, r3, #1
    b358:	b2db      	uxtb	r3, r3
    b35a:	f640 32a3 	movw	r2, #2979	; 0xba3
    b35e:	490b      	ldr	r1, [pc, #44]	; (b38c <_spi_m_async_enable_tx_complete+0x58>)
    b360:	4618      	mov	r0, r3
    b362:	4b0b      	ldr	r3, [pc, #44]	; (b390 <_spi_m_async_enable_tx_complete+0x5c>)
    b364:	4798      	blx	r3

	if (state) {
    b366:	78fb      	ldrb	r3, [r7, #3]
    b368:	2b00      	cmp	r3, #0
    b36a:	d005      	beq.n	b378 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    b36c:	687b      	ldr	r3, [r7, #4]
    b36e:	681b      	ldr	r3, [r3, #0]
    b370:	4618      	mov	r0, r3
    b372:	4b08      	ldr	r3, [pc, #32]	; (b394 <_spi_m_async_enable_tx_complete+0x60>)
    b374:	4798      	blx	r3
    b376:	e004      	b.n	b382 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    b378:	687b      	ldr	r3, [r7, #4]
    b37a:	681b      	ldr	r3, [r3, #0]
    b37c:	4618      	mov	r0, r3
    b37e:	4b06      	ldr	r3, [pc, #24]	; (b398 <_spi_m_async_enable_tx_complete+0x64>)
    b380:	4798      	blx	r3
	}

	return ERR_NONE;
    b382:	2300      	movs	r3, #0
}
    b384:	4618      	mov	r0, r3
    b386:	3708      	adds	r7, #8
    b388:	46bd      	mov	sp, r7
    b38a:	bd80      	pop	{r7, pc}
    b38c:	0001d210 	.word	0x0001d210
    b390:	00006991 	.word	0x00006991
    b394:	000097af 	.word	0x000097af
    b398:	000097c9 	.word	0x000097c9

0000b39c <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    b39c:	b580      	push	{r7, lr}
    b39e:	b082      	sub	sp, #8
    b3a0:	af00      	add	r7, sp, #0
    b3a2:	6078      	str	r0, [r7, #4]
    b3a4:	460b      	mov	r3, r1
    b3a6:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    b3a8:	687b      	ldr	r3, [r7, #4]
    b3aa:	2b00      	cmp	r3, #0
    b3ac:	d005      	beq.n	b3ba <_spi_m_async_write_one+0x1e>
    b3ae:	687b      	ldr	r3, [r7, #4]
    b3b0:	681b      	ldr	r3, [r3, #0]
    b3b2:	2b00      	cmp	r3, #0
    b3b4:	d001      	beq.n	b3ba <_spi_m_async_write_one+0x1e>
    b3b6:	2301      	movs	r3, #1
    b3b8:	e000      	b.n	b3bc <_spi_m_async_write_one+0x20>
    b3ba:	2300      	movs	r3, #0
    b3bc:	f003 0301 	and.w	r3, r3, #1
    b3c0:	b2db      	uxtb	r3, r3
    b3c2:	f640 32b5 	movw	r2, #2997	; 0xbb5
    b3c6:	4908      	ldr	r1, [pc, #32]	; (b3e8 <_spi_m_async_write_one+0x4c>)
    b3c8:	4618      	mov	r0, r3
    b3ca:	4b08      	ldr	r3, [pc, #32]	; (b3ec <_spi_m_async_write_one+0x50>)
    b3cc:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    b3ce:	687b      	ldr	r3, [r7, #4]
    b3d0:	681b      	ldr	r3, [r3, #0]
    b3d2:	887a      	ldrh	r2, [r7, #2]
    b3d4:	4611      	mov	r1, r2
    b3d6:	4618      	mov	r0, r3
    b3d8:	4b05      	ldr	r3, [pc, #20]	; (b3f0 <_spi_m_async_write_one+0x54>)
    b3da:	4798      	blx	r3

	return ERR_NONE;
    b3dc:	2300      	movs	r3, #0
}
    b3de:	4618      	mov	r0, r3
    b3e0:	3708      	adds	r7, #8
    b3e2:	46bd      	mov	sp, r7
    b3e4:	bd80      	pop	{r7, pc}
    b3e6:	bf00      	nop
    b3e8:	0001d210 	.word	0x0001d210
    b3ec:	00006991 	.word	0x00006991
    b3f0:	00009c19 	.word	0x00009c19

0000b3f4 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    b3f4:	b580      	push	{r7, lr}
    b3f6:	b082      	sub	sp, #8
    b3f8:	af00      	add	r7, sp, #0
    b3fa:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    b3fc:	687b      	ldr	r3, [r7, #4]
    b3fe:	2b00      	cmp	r3, #0
    b400:	d005      	beq.n	b40e <_spi_m_async_read_one+0x1a>
    b402:	687b      	ldr	r3, [r7, #4]
    b404:	681b      	ldr	r3, [r3, #0]
    b406:	2b00      	cmp	r3, #0
    b408:	d001      	beq.n	b40e <_spi_m_async_read_one+0x1a>
    b40a:	2301      	movs	r3, #1
    b40c:	e000      	b.n	b410 <_spi_m_async_read_one+0x1c>
    b40e:	2300      	movs	r3, #0
    b410:	f003 0301 	and.w	r3, r3, #1
    b414:	b2db      	uxtb	r3, r3
    b416:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
    b41a:	4907      	ldr	r1, [pc, #28]	; (b438 <_spi_m_async_read_one+0x44>)
    b41c:	4618      	mov	r0, r3
    b41e:	4b07      	ldr	r3, [pc, #28]	; (b43c <_spi_m_async_read_one+0x48>)
    b420:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    b422:	687b      	ldr	r3, [r7, #4]
    b424:	681b      	ldr	r3, [r3, #0]
    b426:	4618      	mov	r0, r3
    b428:	4b05      	ldr	r3, [pc, #20]	; (b440 <_spi_m_async_read_one+0x4c>)
    b42a:	4798      	blx	r3
    b42c:	4603      	mov	r3, r0
    b42e:	b29b      	uxth	r3, r3
}
    b430:	4618      	mov	r0, r3
    b432:	3708      	adds	r7, #8
    b434:	46bd      	mov	sp, r7
    b436:	bd80      	pop	{r7, pc}
    b438:	0001d210 	.word	0x0001d210
    b43c:	00006991 	.word	0x00006991
    b440:	00009c35 	.word	0x00009c35

0000b444 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    b444:	b580      	push	{r7, lr}
    b446:	b086      	sub	sp, #24
    b448:	af00      	add	r7, sp, #0
    b44a:	60f8      	str	r0, [r7, #12]
    b44c:	460b      	mov	r3, r1
    b44e:	607a      	str	r2, [r7, #4]
    b450:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    b452:	68fb      	ldr	r3, [r7, #12]
    b454:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    b456:	68fb      	ldr	r3, [r7, #12]
    b458:	2b00      	cmp	r3, #0
    b45a:	d004      	beq.n	b466 <_spi_m_async_register_callback+0x22>
    b45c:	7afb      	ldrb	r3, [r7, #11]
    b45e:	2b03      	cmp	r3, #3
    b460:	d801      	bhi.n	b466 <_spi_m_async_register_callback+0x22>
    b462:	2301      	movs	r3, #1
    b464:	e000      	b.n	b468 <_spi_m_async_register_callback+0x24>
    b466:	2300      	movs	r3, #0
    b468:	f003 0301 	and.w	r3, r3, #1
    b46c:	b2db      	uxtb	r3, r3
    b46e:	f640 32e9 	movw	r2, #3049	; 0xbe9
    b472:	4909      	ldr	r1, [pc, #36]	; (b498 <_spi_m_async_register_callback+0x54>)
    b474:	4618      	mov	r0, r3
    b476:	4b09      	ldr	r3, [pc, #36]	; (b49c <_spi_m_async_register_callback+0x58>)
    b478:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    b47a:	697b      	ldr	r3, [r7, #20]
    b47c:	3308      	adds	r3, #8
    b47e:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    b480:	7afb      	ldrb	r3, [r7, #11]
    b482:	009b      	lsls	r3, r3, #2
    b484:	693a      	ldr	r2, [r7, #16]
    b486:	4413      	add	r3, r2
    b488:	687a      	ldr	r2, [r7, #4]
    b48a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    b48c:	2300      	movs	r3, #0
}
    b48e:	4618      	mov	r0, r3
    b490:	3718      	adds	r7, #24
    b492:	46bd      	mov	sp, r7
    b494:	bd80      	pop	{r7, pc}
    b496:	bf00      	nop
    b498:	0001d210 	.word	0x0001d210
    b49c:	00006991 	.word	0x00006991

0000b4a0 <__NVIC_EnableIRQ>:
{
    b4a0:	b480      	push	{r7}
    b4a2:	b083      	sub	sp, #12
    b4a4:	af00      	add	r7, sp, #0
    b4a6:	4603      	mov	r3, r0
    b4a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b4aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b4ae:	2b00      	cmp	r3, #0
    b4b0:	db0b      	blt.n	b4ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b4b2:	4909      	ldr	r1, [pc, #36]	; (b4d8 <__NVIC_EnableIRQ+0x38>)
    b4b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b4b8:	095b      	lsrs	r3, r3, #5
    b4ba:	88fa      	ldrh	r2, [r7, #6]
    b4bc:	f002 021f 	and.w	r2, r2, #31
    b4c0:	2001      	movs	r0, #1
    b4c2:	fa00 f202 	lsl.w	r2, r0, r2
    b4c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b4ca:	bf00      	nop
    b4cc:	370c      	adds	r7, #12
    b4ce:	46bd      	mov	sp, r7
    b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4d4:	4770      	bx	lr
    b4d6:	bf00      	nop
    b4d8:	e000e100 	.word	0xe000e100

0000b4dc <__NVIC_DisableIRQ>:
{
    b4dc:	b480      	push	{r7}
    b4de:	b083      	sub	sp, #12
    b4e0:	af00      	add	r7, sp, #0
    b4e2:	4603      	mov	r3, r0
    b4e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b4e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b4ea:	2b00      	cmp	r3, #0
    b4ec:	db10      	blt.n	b510 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b4ee:	490b      	ldr	r1, [pc, #44]	; (b51c <__NVIC_DisableIRQ+0x40>)
    b4f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b4f4:	095b      	lsrs	r3, r3, #5
    b4f6:	88fa      	ldrh	r2, [r7, #6]
    b4f8:	f002 021f 	and.w	r2, r2, #31
    b4fc:	2001      	movs	r0, #1
    b4fe:	fa00 f202 	lsl.w	r2, r0, r2
    b502:	3320      	adds	r3, #32
    b504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    b508:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b50c:	f3bf 8f6f 	isb	sy
}
    b510:	bf00      	nop
    b512:	370c      	adds	r7, #12
    b514:	46bd      	mov	sp, r7
    b516:	f85d 7b04 	ldr.w	r7, [sp], #4
    b51a:	4770      	bx	lr
    b51c:	e000e100 	.word	0xe000e100

0000b520 <__NVIC_ClearPendingIRQ>:
{
    b520:	b480      	push	{r7}
    b522:	b083      	sub	sp, #12
    b524:	af00      	add	r7, sp, #0
    b526:	4603      	mov	r3, r0
    b528:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b52a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b52e:	2b00      	cmp	r3, #0
    b530:	db0c      	blt.n	b54c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b532:	4909      	ldr	r1, [pc, #36]	; (b558 <__NVIC_ClearPendingIRQ+0x38>)
    b534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b538:	095b      	lsrs	r3, r3, #5
    b53a:	88fa      	ldrh	r2, [r7, #6]
    b53c:	f002 021f 	and.w	r2, r2, #31
    b540:	2001      	movs	r0, #1
    b542:	fa00 f202 	lsl.w	r2, r0, r2
    b546:	3360      	adds	r3, #96	; 0x60
    b548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b54c:	bf00      	nop
    b54e:	370c      	adds	r7, #12
    b550:	46bd      	mov	sp, r7
    b552:	f85d 7b04 	ldr.w	r7, [sp], #4
    b556:	4770      	bx	lr
    b558:	e000e100 	.word	0xe000e100

0000b55c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    b55c:	b480      	push	{r7}
    b55e:	b083      	sub	sp, #12
    b560:	af00      	add	r7, sp, #0
    b562:	6078      	str	r0, [r7, #4]
    b564:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    b566:	bf00      	nop
    b568:	687b      	ldr	r3, [r7, #4]
    b56a:	691a      	ldr	r2, [r3, #16]
    b56c:	683b      	ldr	r3, [r7, #0]
    b56e:	4013      	ands	r3, r2
    b570:	2b00      	cmp	r3, #0
    b572:	d1f9      	bne.n	b568 <hri_tc_wait_for_sync+0xc>
	};
}
    b574:	bf00      	nop
    b576:	370c      	adds	r7, #12
    b578:	46bd      	mov	sp, r7
    b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b57e:	4770      	bx	lr

0000b580 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    b580:	b480      	push	{r7}
    b582:	b083      	sub	sp, #12
    b584:	af00      	add	r7, sp, #0
    b586:	6078      	str	r0, [r7, #4]
    b588:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    b58a:	687b      	ldr	r3, [r7, #4]
    b58c:	691a      	ldr	r2, [r3, #16]
    b58e:	683b      	ldr	r3, [r7, #0]
    b590:	4013      	ands	r3, r2
    b592:	2b00      	cmp	r3, #0
    b594:	bf14      	ite	ne
    b596:	2301      	movne	r3, #1
    b598:	2300      	moveq	r3, #0
    b59a:	b2db      	uxtb	r3, r3
}
    b59c:	4618      	mov	r0, r3
    b59e:	370c      	adds	r7, #12
    b5a0:	46bd      	mov	sp, r7
    b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5a6:	4770      	bx	lr

0000b5a8 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    b5a8:	b480      	push	{r7}
    b5aa:	b083      	sub	sp, #12
    b5ac:	af00      	add	r7, sp, #0
    b5ae:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    b5b0:	687b      	ldr	r3, [r7, #4]
    b5b2:	7a9b      	ldrb	r3, [r3, #10]
    b5b4:	b2db      	uxtb	r3, r3
    b5b6:	f003 0301 	and.w	r3, r3, #1
    b5ba:	2b00      	cmp	r3, #0
    b5bc:	bf14      	ite	ne
    b5be:	2301      	movne	r3, #1
    b5c0:	2300      	moveq	r3, #0
    b5c2:	b2db      	uxtb	r3, r3
}
    b5c4:	4618      	mov	r0, r3
    b5c6:	370c      	adds	r7, #12
    b5c8:	46bd      	mov	sp, r7
    b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5ce:	4770      	bx	lr

0000b5d0 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    b5d0:	b480      	push	{r7}
    b5d2:	b083      	sub	sp, #12
    b5d4:	af00      	add	r7, sp, #0
    b5d6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    b5d8:	687b      	ldr	r3, [r7, #4]
    b5da:	2201      	movs	r2, #1
    b5dc:	729a      	strb	r2, [r3, #10]
}
    b5de:	bf00      	nop
    b5e0:	370c      	adds	r7, #12
    b5e2:	46bd      	mov	sp, r7
    b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5e8:	4770      	bx	lr

0000b5ea <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    b5ea:	b480      	push	{r7}
    b5ec:	b083      	sub	sp, #12
    b5ee:	af00      	add	r7, sp, #0
    b5f0:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    b5f2:	687b      	ldr	r3, [r7, #4]
    b5f4:	2202      	movs	r2, #2
    b5f6:	729a      	strb	r2, [r3, #10]
}
    b5f8:	bf00      	nop
    b5fa:	370c      	adds	r7, #12
    b5fc:	46bd      	mov	sp, r7
    b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    b602:	4770      	bx	lr

0000b604 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    b604:	b480      	push	{r7}
    b606:	b083      	sub	sp, #12
    b608:	af00      	add	r7, sp, #0
    b60a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    b60c:	687b      	ldr	r3, [r7, #4]
    b60e:	2201      	movs	r2, #1
    b610:	725a      	strb	r2, [r3, #9]
}
    b612:	bf00      	nop
    b614:	370c      	adds	r7, #12
    b616:	46bd      	mov	sp, r7
    b618:	f85d 7b04 	ldr.w	r7, [sp], #4
    b61c:	4770      	bx	lr

0000b61e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    b61e:	b480      	push	{r7}
    b620:	b083      	sub	sp, #12
    b622:	af00      	add	r7, sp, #0
    b624:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    b626:	687b      	ldr	r3, [r7, #4]
    b628:	7a5b      	ldrb	r3, [r3, #9]
    b62a:	b2db      	uxtb	r3, r3
    b62c:	085b      	lsrs	r3, r3, #1
    b62e:	f003 0301 	and.w	r3, r3, #1
    b632:	2b00      	cmp	r3, #0
    b634:	bf14      	ite	ne
    b636:	2301      	movne	r3, #1
    b638:	2300      	moveq	r3, #0
    b63a:	b2db      	uxtb	r3, r3
}
    b63c:	4618      	mov	r0, r3
    b63e:	370c      	adds	r7, #12
    b640:	46bd      	mov	sp, r7
    b642:	f85d 7b04 	ldr.w	r7, [sp], #4
    b646:	4770      	bx	lr

0000b648 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    b648:	b580      	push	{r7, lr}
    b64a:	b082      	sub	sp, #8
    b64c:	af00      	add	r7, sp, #0
    b64e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    b650:	687b      	ldr	r3, [r7, #4]
    b652:	681b      	ldr	r3, [r3, #0]
    b654:	f043 0202 	orr.w	r2, r3, #2
    b658:	687b      	ldr	r3, [r7, #4]
    b65a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b65c:	2103      	movs	r1, #3
    b65e:	6878      	ldr	r0, [r7, #4]
    b660:	4b02      	ldr	r3, [pc, #8]	; (b66c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    b662:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b664:	bf00      	nop
    b666:	3708      	adds	r7, #8
    b668:	46bd      	mov	sp, r7
    b66a:	bd80      	pop	{r7, pc}
    b66c:	0000b55d 	.word	0x0000b55d

0000b670 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b670:	b580      	push	{r7, lr}
    b672:	b084      	sub	sp, #16
    b674:	af00      	add	r7, sp, #0
    b676:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b678:	2103      	movs	r1, #3
    b67a:	6878      	ldr	r0, [r7, #4]
    b67c:	4b09      	ldr	r3, [pc, #36]	; (b6a4 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    b67e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    b680:	687b      	ldr	r3, [r7, #4]
    b682:	681b      	ldr	r3, [r3, #0]
    b684:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    b686:	68fb      	ldr	r3, [r7, #12]
    b688:	085b      	lsrs	r3, r3, #1
    b68a:	f003 0301 	and.w	r3, r3, #1
    b68e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    b690:	68fb      	ldr	r3, [r7, #12]
    b692:	2b00      	cmp	r3, #0
    b694:	bf14      	ite	ne
    b696:	2301      	movne	r3, #1
    b698:	2300      	moveq	r3, #0
    b69a:	b2db      	uxtb	r3, r3
}
    b69c:	4618      	mov	r0, r3
    b69e:	3710      	adds	r7, #16
    b6a0:	46bd      	mov	sp, r7
    b6a2:	bd80      	pop	{r7, pc}
    b6a4:	0000b55d 	.word	0x0000b55d

0000b6a8 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    b6a8:	b580      	push	{r7, lr}
    b6aa:	b082      	sub	sp, #8
    b6ac:	af00      	add	r7, sp, #0
    b6ae:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    b6b0:	687b      	ldr	r3, [r7, #4]
    b6b2:	681b      	ldr	r3, [r3, #0]
    b6b4:	f023 0202 	bic.w	r2, r3, #2
    b6b8:	687b      	ldr	r3, [r7, #4]
    b6ba:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b6bc:	2103      	movs	r1, #3
    b6be:	6878      	ldr	r0, [r7, #4]
    b6c0:	4b02      	ldr	r3, [pc, #8]	; (b6cc <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    b6c2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b6c4:	bf00      	nop
    b6c6:	3708      	adds	r7, #8
    b6c8:	46bd      	mov	sp, r7
    b6ca:	bd80      	pop	{r7, pc}
    b6cc:	0000b55d 	.word	0x0000b55d

0000b6d0 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    b6d0:	b580      	push	{r7, lr}
    b6d2:	b084      	sub	sp, #16
    b6d4:	af00      	add	r7, sp, #0
    b6d6:	6078      	str	r0, [r7, #4]
    b6d8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b6da:	2103      	movs	r1, #3
    b6dc:	6878      	ldr	r0, [r7, #4]
    b6de:	4b07      	ldr	r3, [pc, #28]	; (b6fc <hri_tc_get_CTRLA_reg+0x2c>)
    b6e0:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    b6e2:	687b      	ldr	r3, [r7, #4]
    b6e4:	681b      	ldr	r3, [r3, #0]
    b6e6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    b6e8:	68fa      	ldr	r2, [r7, #12]
    b6ea:	683b      	ldr	r3, [r7, #0]
    b6ec:	4013      	ands	r3, r2
    b6ee:	60fb      	str	r3, [r7, #12]
	return tmp;
    b6f0:	68fb      	ldr	r3, [r7, #12]
}
    b6f2:	4618      	mov	r0, r3
    b6f4:	3710      	adds	r7, #16
    b6f6:	46bd      	mov	sp, r7
    b6f8:	bd80      	pop	{r7, pc}
    b6fa:	bf00      	nop
    b6fc:	0000b55d 	.word	0x0000b55d

0000b700 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    b700:	b580      	push	{r7, lr}
    b702:	b082      	sub	sp, #8
    b704:	af00      	add	r7, sp, #0
    b706:	6078      	str	r0, [r7, #4]
    b708:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    b70a:	687b      	ldr	r3, [r7, #4]
    b70c:	683a      	ldr	r2, [r7, #0]
    b70e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b710:	2103      	movs	r1, #3
    b712:	6878      	ldr	r0, [r7, #4]
    b714:	4b02      	ldr	r3, [pc, #8]	; (b720 <hri_tc_write_CTRLA_reg+0x20>)
    b716:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b718:	bf00      	nop
    b71a:	3708      	adds	r7, #8
    b71c:	46bd      	mov	sp, r7
    b71e:	bd80      	pop	{r7, pc}
    b720:	0000b55d 	.word	0x0000b55d

0000b724 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    b724:	b480      	push	{r7}
    b726:	b083      	sub	sp, #12
    b728:	af00      	add	r7, sp, #0
    b72a:	6078      	str	r0, [r7, #4]
    b72c:	460b      	mov	r3, r1
    b72e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    b730:	687b      	ldr	r3, [r7, #4]
    b732:	887a      	ldrh	r2, [r7, #2]
    b734:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    b736:	bf00      	nop
    b738:	370c      	adds	r7, #12
    b73a:	46bd      	mov	sp, r7
    b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b740:	4770      	bx	lr

0000b742 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    b742:	b480      	push	{r7}
    b744:	b083      	sub	sp, #12
    b746:	af00      	add	r7, sp, #0
    b748:	6078      	str	r0, [r7, #4]
    b74a:	460b      	mov	r3, r1
    b74c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    b74e:	687b      	ldr	r3, [r7, #4]
    b750:	78fa      	ldrb	r2, [r7, #3]
    b752:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    b754:	bf00      	nop
    b756:	370c      	adds	r7, #12
    b758:	46bd      	mov	sp, r7
    b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b75e:	4770      	bx	lr

0000b760 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    b760:	b480      	push	{r7}
    b762:	b083      	sub	sp, #12
    b764:	af00      	add	r7, sp, #0
    b766:	6078      	str	r0, [r7, #4]
    b768:	460b      	mov	r3, r1
    b76a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    b76c:	687b      	ldr	r3, [r7, #4]
    b76e:	78fa      	ldrb	r2, [r7, #3]
    b770:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    b772:	bf00      	nop
    b774:	370c      	adds	r7, #12
    b776:	46bd      	mov	sp, r7
    b778:	f85d 7b04 	ldr.w	r7, [sp], #4
    b77c:	4770      	bx	lr
	...

0000b780 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    b780:	b580      	push	{r7, lr}
    b782:	b082      	sub	sp, #8
    b784:	af00      	add	r7, sp, #0
    b786:	6078      	str	r0, [r7, #4]
    b788:	460b      	mov	r3, r1
    b78a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    b78c:	687b      	ldr	r3, [r7, #4]
    b78e:	78fa      	ldrb	r2, [r7, #3]
    b790:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    b792:	2120      	movs	r1, #32
    b794:	6878      	ldr	r0, [r7, #4]
    b796:	4b03      	ldr	r3, [pc, #12]	; (b7a4 <hri_tccount8_write_PER_reg+0x24>)
    b798:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b79a:	bf00      	nop
    b79c:	3708      	adds	r7, #8
    b79e:	46bd      	mov	sp, r7
    b7a0:	bd80      	pop	{r7, pc}
    b7a2:	bf00      	nop
    b7a4:	0000b55d 	.word	0x0000b55d

0000b7a8 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    b7a8:	b580      	push	{r7, lr}
    b7aa:	b082      	sub	sp, #8
    b7ac:	af00      	add	r7, sp, #0
    b7ae:	6078      	str	r0, [r7, #4]
    b7b0:	460b      	mov	r3, r1
    b7b2:	70fb      	strb	r3, [r7, #3]
    b7b4:	4613      	mov	r3, r2
    b7b6:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    b7b8:	78fb      	ldrb	r3, [r7, #3]
    b7ba:	687a      	ldr	r2, [r7, #4]
    b7bc:	4413      	add	r3, r2
    b7be:	78ba      	ldrb	r2, [r7, #2]
    b7c0:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    b7c2:	21c0      	movs	r1, #192	; 0xc0
    b7c4:	6878      	ldr	r0, [r7, #4]
    b7c6:	4b03      	ldr	r3, [pc, #12]	; (b7d4 <hri_tccount8_write_CC_reg+0x2c>)
    b7c8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b7ca:	bf00      	nop
    b7cc:	3708      	adds	r7, #8
    b7ce:	46bd      	mov	sp, r7
    b7d0:	bd80      	pop	{r7, pc}
    b7d2:	bf00      	nop
    b7d4:	0000b55d 	.word	0x0000b55d

0000b7d8 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    b7d8:	b580      	push	{r7, lr}
    b7da:	b082      	sub	sp, #8
    b7dc:	af00      	add	r7, sp, #0
    b7de:	6078      	str	r0, [r7, #4]
    b7e0:	460b      	mov	r3, r1
    b7e2:	70fb      	strb	r3, [r7, #3]
    b7e4:	4613      	mov	r3, r2
    b7e6:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    b7e8:	78fb      	ldrb	r3, [r7, #3]
    b7ea:	687a      	ldr	r2, [r7, #4]
    b7ec:	330c      	adds	r3, #12
    b7ee:	005b      	lsls	r3, r3, #1
    b7f0:	4413      	add	r3, r2
    b7f2:	883a      	ldrh	r2, [r7, #0]
    b7f4:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    b7f6:	21c0      	movs	r1, #192	; 0xc0
    b7f8:	6878      	ldr	r0, [r7, #4]
    b7fa:	4b03      	ldr	r3, [pc, #12]	; (b808 <hri_tccount16_write_CC_reg+0x30>)
    b7fc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b7fe:	bf00      	nop
    b800:	3708      	adds	r7, #8
    b802:	46bd      	mov	sp, r7
    b804:	bd80      	pop	{r7, pc}
    b806:	bf00      	nop
    b808:	0000b55d 	.word	0x0000b55d

0000b80c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    b80c:	b580      	push	{r7, lr}
    b80e:	b084      	sub	sp, #16
    b810:	af00      	add	r7, sp, #0
    b812:	60f8      	str	r0, [r7, #12]
    b814:	460b      	mov	r3, r1
    b816:	607a      	str	r2, [r7, #4]
    b818:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    b81a:	7afb      	ldrb	r3, [r7, #11]
    b81c:	68fa      	ldr	r2, [r7, #12]
    b81e:	3306      	adds	r3, #6
    b820:	009b      	lsls	r3, r3, #2
    b822:	4413      	add	r3, r2
    b824:	687a      	ldr	r2, [r7, #4]
    b826:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    b828:	21c0      	movs	r1, #192	; 0xc0
    b82a:	68f8      	ldr	r0, [r7, #12]
    b82c:	4b02      	ldr	r3, [pc, #8]	; (b838 <hri_tccount32_write_CC_reg+0x2c>)
    b82e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b830:	bf00      	nop
    b832:	3710      	adds	r7, #16
    b834:	46bd      	mov	sp, r7
    b836:	bd80      	pop	{r7, pc}
    b838:	0000b55d 	.word	0x0000b55d

0000b83c <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    b83c:	b580      	push	{r7, lr}
    b83e:	b084      	sub	sp, #16
    b840:	af00      	add	r7, sp, #0
    b842:	6078      	str	r0, [r7, #4]
    b844:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    b846:	6838      	ldr	r0, [r7, #0]
    b848:	4b93      	ldr	r3, [pc, #588]	; (ba98 <_timer_init+0x25c>)
    b84a:	4798      	blx	r3
    b84c:	4603      	mov	r3, r0
    b84e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    b850:	687b      	ldr	r3, [r7, #4]
    b852:	683a      	ldr	r2, [r7, #0]
    b854:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    b856:	2299      	movs	r2, #153	; 0x99
    b858:	4990      	ldr	r1, [pc, #576]	; (ba9c <_timer_init+0x260>)
    b85a:	2001      	movs	r0, #1
    b85c:	4b90      	ldr	r3, [pc, #576]	; (baa0 <_timer_init+0x264>)
    b85e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    b860:	2101      	movs	r1, #1
    b862:	6838      	ldr	r0, [r7, #0]
    b864:	4b8f      	ldr	r3, [pc, #572]	; (baa4 <_timer_init+0x268>)
    b866:	4798      	blx	r3
    b868:	4603      	mov	r3, r0
    b86a:	f083 0301 	eor.w	r3, r3, #1
    b86e:	b2db      	uxtb	r3, r3
    b870:	2b00      	cmp	r3, #0
    b872:	d011      	beq.n	b898 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    b874:	2102      	movs	r1, #2
    b876:	6838      	ldr	r0, [r7, #0]
    b878:	4b8b      	ldr	r3, [pc, #556]	; (baa8 <_timer_init+0x26c>)
    b87a:	4798      	blx	r3
    b87c:	4603      	mov	r3, r0
    b87e:	2b00      	cmp	r3, #0
    b880:	d006      	beq.n	b890 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    b882:	6838      	ldr	r0, [r7, #0]
    b884:	4b89      	ldr	r3, [pc, #548]	; (baac <_timer_init+0x270>)
    b886:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    b888:	2102      	movs	r1, #2
    b88a:	6838      	ldr	r0, [r7, #0]
    b88c:	4b88      	ldr	r3, [pc, #544]	; (bab0 <_timer_init+0x274>)
    b88e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    b890:	2101      	movs	r1, #1
    b892:	6838      	ldr	r0, [r7, #0]
    b894:	4b87      	ldr	r3, [pc, #540]	; (bab4 <_timer_init+0x278>)
    b896:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    b898:	2101      	movs	r1, #1
    b89a:	6838      	ldr	r0, [r7, #0]
    b89c:	4b84      	ldr	r3, [pc, #528]	; (bab0 <_timer_init+0x274>)
    b89e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    b8a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b8a4:	4984      	ldr	r1, [pc, #528]	; (bab8 <_timer_init+0x27c>)
    b8a6:	4613      	mov	r3, r2
    b8a8:	009b      	lsls	r3, r3, #2
    b8aa:	4413      	add	r3, r2
    b8ac:	009b      	lsls	r3, r3, #2
    b8ae:	440b      	add	r3, r1
    b8b0:	3304      	adds	r3, #4
    b8b2:	681b      	ldr	r3, [r3, #0]
    b8b4:	4619      	mov	r1, r3
    b8b6:	6838      	ldr	r0, [r7, #0]
    b8b8:	4b7e      	ldr	r3, [pc, #504]	; (bab4 <_timer_init+0x278>)
    b8ba:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    b8bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b8c0:	497d      	ldr	r1, [pc, #500]	; (bab8 <_timer_init+0x27c>)
    b8c2:	4613      	mov	r3, r2
    b8c4:	009b      	lsls	r3, r3, #2
    b8c6:	4413      	add	r3, r2
    b8c8:	009b      	lsls	r3, r3, #2
    b8ca:	440b      	add	r3, r1
    b8cc:	330a      	adds	r3, #10
    b8ce:	781b      	ldrb	r3, [r3, #0]
    b8d0:	4619      	mov	r1, r3
    b8d2:	6838      	ldr	r0, [r7, #0]
    b8d4:	4b79      	ldr	r3, [pc, #484]	; (babc <_timer_init+0x280>)
    b8d6:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    b8d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b8dc:	4976      	ldr	r1, [pc, #472]	; (bab8 <_timer_init+0x27c>)
    b8de:	4613      	mov	r3, r2
    b8e0:	009b      	lsls	r3, r3, #2
    b8e2:	4413      	add	r3, r2
    b8e4:	009b      	lsls	r3, r3, #2
    b8e6:	440b      	add	r3, r1
    b8e8:	3308      	adds	r3, #8
    b8ea:	881b      	ldrh	r3, [r3, #0]
    b8ec:	4619      	mov	r1, r3
    b8ee:	6838      	ldr	r0, [r7, #0]
    b8f0:	4b73      	ldr	r3, [pc, #460]	; (bac0 <_timer_init+0x284>)
    b8f2:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    b8f4:	2101      	movs	r1, #1
    b8f6:	6838      	ldr	r0, [r7, #0]
    b8f8:	4b72      	ldr	r3, [pc, #456]	; (bac4 <_timer_init+0x288>)
    b8fa:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    b8fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b900:	496d      	ldr	r1, [pc, #436]	; (bab8 <_timer_init+0x27c>)
    b902:	4613      	mov	r3, r2
    b904:	009b      	lsls	r3, r3, #2
    b906:	4413      	add	r3, r2
    b908:	009b      	lsls	r3, r3, #2
    b90a:	440b      	add	r3, r1
    b90c:	3304      	adds	r3, #4
    b90e:	681b      	ldr	r3, [r3, #0]
    b910:	f003 030c 	and.w	r3, r3, #12
    b914:	2b08      	cmp	r3, #8
    b916:	d11e      	bne.n	b956 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    b918:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b91c:	4966      	ldr	r1, [pc, #408]	; (bab8 <_timer_init+0x27c>)
    b91e:	4613      	mov	r3, r2
    b920:	009b      	lsls	r3, r3, #2
    b922:	4413      	add	r3, r2
    b924:	009b      	lsls	r3, r3, #2
    b926:	440b      	add	r3, r1
    b928:	330c      	adds	r3, #12
    b92a:	681b      	ldr	r3, [r3, #0]
    b92c:	461a      	mov	r2, r3
    b92e:	2100      	movs	r1, #0
    b930:	6838      	ldr	r0, [r7, #0]
    b932:	4b65      	ldr	r3, [pc, #404]	; (bac8 <_timer_init+0x28c>)
    b934:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    b936:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b93a:	495f      	ldr	r1, [pc, #380]	; (bab8 <_timer_init+0x27c>)
    b93c:	4613      	mov	r3, r2
    b93e:	009b      	lsls	r3, r3, #2
    b940:	4413      	add	r3, r2
    b942:	009b      	lsls	r3, r3, #2
    b944:	440b      	add	r3, r1
    b946:	3310      	adds	r3, #16
    b948:	681b      	ldr	r3, [r3, #0]
    b94a:	461a      	mov	r2, r3
    b94c:	2101      	movs	r1, #1
    b94e:	6838      	ldr	r0, [r7, #0]
    b950:	4b5d      	ldr	r3, [pc, #372]	; (bac8 <_timer_init+0x28c>)
    b952:	4798      	blx	r3
    b954:	e06a      	b.n	ba2c <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    b956:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b95a:	4957      	ldr	r1, [pc, #348]	; (bab8 <_timer_init+0x27c>)
    b95c:	4613      	mov	r3, r2
    b95e:	009b      	lsls	r3, r3, #2
    b960:	4413      	add	r3, r2
    b962:	009b      	lsls	r3, r3, #2
    b964:	440b      	add	r3, r1
    b966:	3304      	adds	r3, #4
    b968:	681b      	ldr	r3, [r3, #0]
    b96a:	f003 030c 	and.w	r3, r3, #12
    b96e:	2b00      	cmp	r3, #0
    b970:	d120      	bne.n	b9b4 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    b972:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b976:	4950      	ldr	r1, [pc, #320]	; (bab8 <_timer_init+0x27c>)
    b978:	4613      	mov	r3, r2
    b97a:	009b      	lsls	r3, r3, #2
    b97c:	4413      	add	r3, r2
    b97e:	009b      	lsls	r3, r3, #2
    b980:	440b      	add	r3, r1
    b982:	330c      	adds	r3, #12
    b984:	681b      	ldr	r3, [r3, #0]
    b986:	b29b      	uxth	r3, r3
    b988:	461a      	mov	r2, r3
    b98a:	2100      	movs	r1, #0
    b98c:	6838      	ldr	r0, [r7, #0]
    b98e:	4b4f      	ldr	r3, [pc, #316]	; (bacc <_timer_init+0x290>)
    b990:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    b992:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b996:	4948      	ldr	r1, [pc, #288]	; (bab8 <_timer_init+0x27c>)
    b998:	4613      	mov	r3, r2
    b99a:	009b      	lsls	r3, r3, #2
    b99c:	4413      	add	r3, r2
    b99e:	009b      	lsls	r3, r3, #2
    b9a0:	440b      	add	r3, r1
    b9a2:	3310      	adds	r3, #16
    b9a4:	681b      	ldr	r3, [r3, #0]
    b9a6:	b29b      	uxth	r3, r3
    b9a8:	461a      	mov	r2, r3
    b9aa:	2101      	movs	r1, #1
    b9ac:	6838      	ldr	r0, [r7, #0]
    b9ae:	4b47      	ldr	r3, [pc, #284]	; (bacc <_timer_init+0x290>)
    b9b0:	4798      	blx	r3
    b9b2:	e03b      	b.n	ba2c <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    b9b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b9b8:	493f      	ldr	r1, [pc, #252]	; (bab8 <_timer_init+0x27c>)
    b9ba:	4613      	mov	r3, r2
    b9bc:	009b      	lsls	r3, r3, #2
    b9be:	4413      	add	r3, r2
    b9c0:	009b      	lsls	r3, r3, #2
    b9c2:	440b      	add	r3, r1
    b9c4:	3304      	adds	r3, #4
    b9c6:	681b      	ldr	r3, [r3, #0]
    b9c8:	f003 030c 	and.w	r3, r3, #12
    b9cc:	2b04      	cmp	r3, #4
    b9ce:	d12d      	bne.n	ba2c <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    b9d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b9d4:	4938      	ldr	r1, [pc, #224]	; (bab8 <_timer_init+0x27c>)
    b9d6:	4613      	mov	r3, r2
    b9d8:	009b      	lsls	r3, r3, #2
    b9da:	4413      	add	r3, r2
    b9dc:	009b      	lsls	r3, r3, #2
    b9de:	440b      	add	r3, r1
    b9e0:	330c      	adds	r3, #12
    b9e2:	681b      	ldr	r3, [r3, #0]
    b9e4:	b2db      	uxtb	r3, r3
    b9e6:	461a      	mov	r2, r3
    b9e8:	2100      	movs	r1, #0
    b9ea:	6838      	ldr	r0, [r7, #0]
    b9ec:	4b38      	ldr	r3, [pc, #224]	; (bad0 <_timer_init+0x294>)
    b9ee:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    b9f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b9f4:	4930      	ldr	r1, [pc, #192]	; (bab8 <_timer_init+0x27c>)
    b9f6:	4613      	mov	r3, r2
    b9f8:	009b      	lsls	r3, r3, #2
    b9fa:	4413      	add	r3, r2
    b9fc:	009b      	lsls	r3, r3, #2
    b9fe:	440b      	add	r3, r1
    ba00:	3310      	adds	r3, #16
    ba02:	681b      	ldr	r3, [r3, #0]
    ba04:	b2db      	uxtb	r3, r3
    ba06:	461a      	mov	r2, r3
    ba08:	2101      	movs	r1, #1
    ba0a:	6838      	ldr	r0, [r7, #0]
    ba0c:	4b30      	ldr	r3, [pc, #192]	; (bad0 <_timer_init+0x294>)
    ba0e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    ba10:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ba14:	4928      	ldr	r1, [pc, #160]	; (bab8 <_timer_init+0x27c>)
    ba16:	4613      	mov	r3, r2
    ba18:	009b      	lsls	r3, r3, #2
    ba1a:	4413      	add	r3, r2
    ba1c:	009b      	lsls	r3, r3, #2
    ba1e:	440b      	add	r3, r1
    ba20:	330b      	adds	r3, #11
    ba22:	781b      	ldrb	r3, [r3, #0]
    ba24:	4619      	mov	r1, r3
    ba26:	6838      	ldr	r0, [r7, #0]
    ba28:	4b2a      	ldr	r3, [pc, #168]	; (bad4 <_timer_init+0x298>)
    ba2a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    ba2c:	6838      	ldr	r0, [r7, #0]
    ba2e:	4b2a      	ldr	r3, [pc, #168]	; (bad8 <_timer_init+0x29c>)
    ba30:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    ba32:	6879      	ldr	r1, [r7, #4]
    ba34:	6838      	ldr	r0, [r7, #0]
    ba36:	4b29      	ldr	r3, [pc, #164]	; (badc <_timer_init+0x2a0>)
    ba38:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    ba3a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ba3e:	491e      	ldr	r1, [pc, #120]	; (bab8 <_timer_init+0x27c>)
    ba40:	4613      	mov	r3, r2
    ba42:	009b      	lsls	r3, r3, #2
    ba44:	4413      	add	r3, r2
    ba46:	009b      	lsls	r3, r3, #2
    ba48:	440b      	add	r3, r1
    ba4a:	3302      	adds	r3, #2
    ba4c:	f9b3 3000 	ldrsh.w	r3, [r3]
    ba50:	4618      	mov	r0, r3
    ba52:	4b23      	ldr	r3, [pc, #140]	; (bae0 <_timer_init+0x2a4>)
    ba54:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    ba56:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ba5a:	4917      	ldr	r1, [pc, #92]	; (bab8 <_timer_init+0x27c>)
    ba5c:	4613      	mov	r3, r2
    ba5e:	009b      	lsls	r3, r3, #2
    ba60:	4413      	add	r3, r2
    ba62:	009b      	lsls	r3, r3, #2
    ba64:	440b      	add	r3, r1
    ba66:	3302      	adds	r3, #2
    ba68:	f9b3 3000 	ldrsh.w	r3, [r3]
    ba6c:	4618      	mov	r0, r3
    ba6e:	4b1d      	ldr	r3, [pc, #116]	; (bae4 <_timer_init+0x2a8>)
    ba70:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    ba72:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ba76:	4910      	ldr	r1, [pc, #64]	; (bab8 <_timer_init+0x27c>)
    ba78:	4613      	mov	r3, r2
    ba7a:	009b      	lsls	r3, r3, #2
    ba7c:	4413      	add	r3, r2
    ba7e:	009b      	lsls	r3, r3, #2
    ba80:	440b      	add	r3, r1
    ba82:	3302      	adds	r3, #2
    ba84:	f9b3 3000 	ldrsh.w	r3, [r3]
    ba88:	4618      	mov	r0, r3
    ba8a:	4b17      	ldr	r3, [pc, #92]	; (bae8 <_timer_init+0x2ac>)
    ba8c:	4798      	blx	r3

	return ERR_NONE;
    ba8e:	2300      	movs	r3, #0
}
    ba90:	4618      	mov	r0, r3
    ba92:	3710      	adds	r7, #16
    ba94:	46bd      	mov	sp, r7
    ba96:	bd80      	pop	{r7, pc}
    ba98:	0000bf91 	.word	0x0000bf91
    ba9c:	0001d280 	.word	0x0001d280
    baa0:	00006991 	.word	0x00006991
    baa4:	0000b581 	.word	0x0000b581
    baa8:	0000b6d1 	.word	0x0000b6d1
    baac:	0000b6a9 	.word	0x0000b6a9
    bab0:	0000b55d 	.word	0x0000b55d
    bab4:	0000b701 	.word	0x0000b701
    bab8:	200000c4 	.word	0x200000c4
    babc:	0000b761 	.word	0x0000b761
    bac0:	0000b725 	.word	0x0000b725
    bac4:	0000b743 	.word	0x0000b743
    bac8:	0000b80d 	.word	0x0000b80d
    bacc:	0000b7d9 	.word	0x0000b7d9
    bad0:	0000b7a9 	.word	0x0000b7a9
    bad4:	0000b781 	.word	0x0000b781
    bad8:	0000b605 	.word	0x0000b605
    badc:	0000bff9 	.word	0x0000bff9
    bae0:	0000b4dd 	.word	0x0000b4dd
    bae4:	0000b521 	.word	0x0000b521
    bae8:	0000b4a1 	.word	0x0000b4a1

0000baec <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    baec:	b580      	push	{r7, lr}
    baee:	b084      	sub	sp, #16
    baf0:	af00      	add	r7, sp, #0
    baf2:	6078      	str	r0, [r7, #4]
    baf4:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    baf6:	6838      	ldr	r0, [r7, #0]
    baf8:	4b73      	ldr	r3, [pc, #460]	; (bcc8 <_pwm_init+0x1dc>)
    bafa:	4798      	blx	r3
    bafc:	4603      	mov	r3, r0
    bafe:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    bb00:	687b      	ldr	r3, [r7, #4]
    bb02:	683a      	ldr	r2, [r7, #0]
    bb04:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    bb06:	2101      	movs	r1, #1
    bb08:	6838      	ldr	r0, [r7, #0]
    bb0a:	4b70      	ldr	r3, [pc, #448]	; (bccc <_pwm_init+0x1e0>)
    bb0c:	4798      	blx	r3
    bb0e:	4603      	mov	r3, r0
    bb10:	f083 0301 	eor.w	r3, r3, #1
    bb14:	b2db      	uxtb	r3, r3
    bb16:	2b00      	cmp	r3, #0
    bb18:	d011      	beq.n	bb3e <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    bb1a:	2102      	movs	r1, #2
    bb1c:	6838      	ldr	r0, [r7, #0]
    bb1e:	4b6c      	ldr	r3, [pc, #432]	; (bcd0 <_pwm_init+0x1e4>)
    bb20:	4798      	blx	r3
    bb22:	4603      	mov	r3, r0
    bb24:	2b00      	cmp	r3, #0
    bb26:	d006      	beq.n	bb36 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    bb28:	6838      	ldr	r0, [r7, #0]
    bb2a:	4b6a      	ldr	r3, [pc, #424]	; (bcd4 <_pwm_init+0x1e8>)
    bb2c:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    bb2e:	2102      	movs	r1, #2
    bb30:	6838      	ldr	r0, [r7, #0]
    bb32:	4b69      	ldr	r3, [pc, #420]	; (bcd8 <_pwm_init+0x1ec>)
    bb34:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    bb36:	2101      	movs	r1, #1
    bb38:	6838      	ldr	r0, [r7, #0]
    bb3a:	4b68      	ldr	r3, [pc, #416]	; (bcdc <_pwm_init+0x1f0>)
    bb3c:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    bb3e:	2101      	movs	r1, #1
    bb40:	6838      	ldr	r0, [r7, #0]
    bb42:	4b65      	ldr	r3, [pc, #404]	; (bcd8 <_pwm_init+0x1ec>)
    bb44:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    bb46:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bb4a:	4965      	ldr	r1, [pc, #404]	; (bce0 <_pwm_init+0x1f4>)
    bb4c:	4613      	mov	r3, r2
    bb4e:	009b      	lsls	r3, r3, #2
    bb50:	4413      	add	r3, r2
    bb52:	009b      	lsls	r3, r3, #2
    bb54:	440b      	add	r3, r1
    bb56:	3304      	adds	r3, #4
    bb58:	681b      	ldr	r3, [r3, #0]
    bb5a:	4619      	mov	r1, r3
    bb5c:	6838      	ldr	r0, [r7, #0]
    bb5e:	4b5f      	ldr	r3, [pc, #380]	; (bcdc <_pwm_init+0x1f0>)
    bb60:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    bb62:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bb66:	495e      	ldr	r1, [pc, #376]	; (bce0 <_pwm_init+0x1f4>)
    bb68:	4613      	mov	r3, r2
    bb6a:	009b      	lsls	r3, r3, #2
    bb6c:	4413      	add	r3, r2
    bb6e:	009b      	lsls	r3, r3, #2
    bb70:	440b      	add	r3, r1
    bb72:	330a      	adds	r3, #10
    bb74:	781b      	ldrb	r3, [r3, #0]
    bb76:	4619      	mov	r1, r3
    bb78:	6838      	ldr	r0, [r7, #0]
    bb7a:	4b5a      	ldr	r3, [pc, #360]	; (bce4 <_pwm_init+0x1f8>)
    bb7c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    bb7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bb82:	4957      	ldr	r1, [pc, #348]	; (bce0 <_pwm_init+0x1f4>)
    bb84:	4613      	mov	r3, r2
    bb86:	009b      	lsls	r3, r3, #2
    bb88:	4413      	add	r3, r2
    bb8a:	009b      	lsls	r3, r3, #2
    bb8c:	440b      	add	r3, r1
    bb8e:	3308      	adds	r3, #8
    bb90:	881b      	ldrh	r3, [r3, #0]
    bb92:	4619      	mov	r1, r3
    bb94:	6838      	ldr	r0, [r7, #0]
    bb96:	4b54      	ldr	r3, [pc, #336]	; (bce8 <_pwm_init+0x1fc>)
    bb98:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    bb9a:	2103      	movs	r1, #3
    bb9c:	6838      	ldr	r0, [r7, #0]
    bb9e:	4b53      	ldr	r3, [pc, #332]	; (bcec <_pwm_init+0x200>)
    bba0:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    bba2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bba6:	494e      	ldr	r1, [pc, #312]	; (bce0 <_pwm_init+0x1f4>)
    bba8:	4613      	mov	r3, r2
    bbaa:	009b      	lsls	r3, r3, #2
    bbac:	4413      	add	r3, r2
    bbae:	009b      	lsls	r3, r3, #2
    bbb0:	440b      	add	r3, r1
    bbb2:	3304      	adds	r3, #4
    bbb4:	681b      	ldr	r3, [r3, #0]
    bbb6:	f003 030c 	and.w	r3, r3, #12
    bbba:	2b08      	cmp	r3, #8
    bbbc:	d11e      	bne.n	bbfc <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    bbbe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bbc2:	4947      	ldr	r1, [pc, #284]	; (bce0 <_pwm_init+0x1f4>)
    bbc4:	4613      	mov	r3, r2
    bbc6:	009b      	lsls	r3, r3, #2
    bbc8:	4413      	add	r3, r2
    bbca:	009b      	lsls	r3, r3, #2
    bbcc:	440b      	add	r3, r1
    bbce:	330c      	adds	r3, #12
    bbd0:	681b      	ldr	r3, [r3, #0]
    bbd2:	461a      	mov	r2, r3
    bbd4:	2100      	movs	r1, #0
    bbd6:	6838      	ldr	r0, [r7, #0]
    bbd8:	4b45      	ldr	r3, [pc, #276]	; (bcf0 <_pwm_init+0x204>)
    bbda:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    bbdc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bbe0:	493f      	ldr	r1, [pc, #252]	; (bce0 <_pwm_init+0x1f4>)
    bbe2:	4613      	mov	r3, r2
    bbe4:	009b      	lsls	r3, r3, #2
    bbe6:	4413      	add	r3, r2
    bbe8:	009b      	lsls	r3, r3, #2
    bbea:	440b      	add	r3, r1
    bbec:	3310      	adds	r3, #16
    bbee:	681b      	ldr	r3, [r3, #0]
    bbf0:	461a      	mov	r2, r3
    bbf2:	2101      	movs	r1, #1
    bbf4:	6838      	ldr	r0, [r7, #0]
    bbf6:	4b3e      	ldr	r3, [pc, #248]	; (bcf0 <_pwm_init+0x204>)
    bbf8:	4798      	blx	r3
    bbfa:	e031      	b.n	bc60 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    bbfc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bc00:	4937      	ldr	r1, [pc, #220]	; (bce0 <_pwm_init+0x1f4>)
    bc02:	4613      	mov	r3, r2
    bc04:	009b      	lsls	r3, r3, #2
    bc06:	4413      	add	r3, r2
    bc08:	009b      	lsls	r3, r3, #2
    bc0a:	440b      	add	r3, r1
    bc0c:	3304      	adds	r3, #4
    bc0e:	681b      	ldr	r3, [r3, #0]
    bc10:	f003 030c 	and.w	r3, r3, #12
    bc14:	2b00      	cmp	r3, #0
    bc16:	d120      	bne.n	bc5a <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    bc18:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bc1c:	4930      	ldr	r1, [pc, #192]	; (bce0 <_pwm_init+0x1f4>)
    bc1e:	4613      	mov	r3, r2
    bc20:	009b      	lsls	r3, r3, #2
    bc22:	4413      	add	r3, r2
    bc24:	009b      	lsls	r3, r3, #2
    bc26:	440b      	add	r3, r1
    bc28:	330c      	adds	r3, #12
    bc2a:	681b      	ldr	r3, [r3, #0]
    bc2c:	b29b      	uxth	r3, r3
    bc2e:	461a      	mov	r2, r3
    bc30:	2100      	movs	r1, #0
    bc32:	6838      	ldr	r0, [r7, #0]
    bc34:	4b2f      	ldr	r3, [pc, #188]	; (bcf4 <_pwm_init+0x208>)
    bc36:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    bc38:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bc3c:	4928      	ldr	r1, [pc, #160]	; (bce0 <_pwm_init+0x1f4>)
    bc3e:	4613      	mov	r3, r2
    bc40:	009b      	lsls	r3, r3, #2
    bc42:	4413      	add	r3, r2
    bc44:	009b      	lsls	r3, r3, #2
    bc46:	440b      	add	r3, r1
    bc48:	3310      	adds	r3, #16
    bc4a:	681b      	ldr	r3, [r3, #0]
    bc4c:	b29b      	uxth	r3, r3
    bc4e:	461a      	mov	r2, r3
    bc50:	2101      	movs	r1, #1
    bc52:	6838      	ldr	r0, [r7, #0]
    bc54:	4b27      	ldr	r3, [pc, #156]	; (bcf4 <_pwm_init+0x208>)
    bc56:	4798      	blx	r3
    bc58:	e002      	b.n	bc60 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    bc5a:	f04f 33ff 	mov.w	r3, #4294967295
    bc5e:	e02e      	b.n	bcbe <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    bc60:	6879      	ldr	r1, [r7, #4]
    bc62:	6838      	ldr	r0, [r7, #0]
    bc64:	4b24      	ldr	r3, [pc, #144]	; (bcf8 <_pwm_init+0x20c>)
    bc66:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    bc68:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bc6c:	491c      	ldr	r1, [pc, #112]	; (bce0 <_pwm_init+0x1f4>)
    bc6e:	4613      	mov	r3, r2
    bc70:	009b      	lsls	r3, r3, #2
    bc72:	4413      	add	r3, r2
    bc74:	009b      	lsls	r3, r3, #2
    bc76:	440b      	add	r3, r1
    bc78:	3302      	adds	r3, #2
    bc7a:	f9b3 3000 	ldrsh.w	r3, [r3]
    bc7e:	4618      	mov	r0, r3
    bc80:	4b1e      	ldr	r3, [pc, #120]	; (bcfc <_pwm_init+0x210>)
    bc82:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    bc84:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bc88:	4915      	ldr	r1, [pc, #84]	; (bce0 <_pwm_init+0x1f4>)
    bc8a:	4613      	mov	r3, r2
    bc8c:	009b      	lsls	r3, r3, #2
    bc8e:	4413      	add	r3, r2
    bc90:	009b      	lsls	r3, r3, #2
    bc92:	440b      	add	r3, r1
    bc94:	3302      	adds	r3, #2
    bc96:	f9b3 3000 	ldrsh.w	r3, [r3]
    bc9a:	4618      	mov	r0, r3
    bc9c:	4b18      	ldr	r3, [pc, #96]	; (bd00 <_pwm_init+0x214>)
    bc9e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    bca0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bca4:	490e      	ldr	r1, [pc, #56]	; (bce0 <_pwm_init+0x1f4>)
    bca6:	4613      	mov	r3, r2
    bca8:	009b      	lsls	r3, r3, #2
    bcaa:	4413      	add	r3, r2
    bcac:	009b      	lsls	r3, r3, #2
    bcae:	440b      	add	r3, r1
    bcb0:	3302      	adds	r3, #2
    bcb2:	f9b3 3000 	ldrsh.w	r3, [r3]
    bcb6:	4618      	mov	r0, r3
    bcb8:	4b12      	ldr	r3, [pc, #72]	; (bd04 <_pwm_init+0x218>)
    bcba:	4798      	blx	r3

	return 0;
    bcbc:	2300      	movs	r3, #0
}
    bcbe:	4618      	mov	r0, r3
    bcc0:	3710      	adds	r7, #16
    bcc2:	46bd      	mov	sp, r7
    bcc4:	bd80      	pop	{r7, pc}
    bcc6:	bf00      	nop
    bcc8:	0000bf91 	.word	0x0000bf91
    bccc:	0000b581 	.word	0x0000b581
    bcd0:	0000b6d1 	.word	0x0000b6d1
    bcd4:	0000b6a9 	.word	0x0000b6a9
    bcd8:	0000b55d 	.word	0x0000b55d
    bcdc:	0000b701 	.word	0x0000b701
    bce0:	200000c4 	.word	0x200000c4
    bce4:	0000b761 	.word	0x0000b761
    bce8:	0000b725 	.word	0x0000b725
    bcec:	0000b743 	.word	0x0000b743
    bcf0:	0000b80d 	.word	0x0000b80d
    bcf4:	0000b7d9 	.word	0x0000b7d9
    bcf8:	0000bff9 	.word	0x0000bff9
    bcfc:	0000b4dd 	.word	0x0000b4dd
    bd00:	0000b521 	.word	0x0000b521
    bd04:	0000b4a1 	.word	0x0000b4a1

0000bd08 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    bd08:	b580      	push	{r7, lr}
    bd0a:	b082      	sub	sp, #8
    bd0c:	af00      	add	r7, sp, #0
    bd0e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    bd10:	687b      	ldr	r3, [r7, #4]
    bd12:	68db      	ldr	r3, [r3, #12]
    bd14:	4618      	mov	r0, r3
    bd16:	4b03      	ldr	r3, [pc, #12]	; (bd24 <_timer_start+0x1c>)
    bd18:	4798      	blx	r3
}
    bd1a:	bf00      	nop
    bd1c:	3708      	adds	r7, #8
    bd1e:	46bd      	mov	sp, r7
    bd20:	bd80      	pop	{r7, pc}
    bd22:	bf00      	nop
    bd24:	0000b649 	.word	0x0000b649

0000bd28 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    bd28:	b580      	push	{r7, lr}
    bd2a:	b082      	sub	sp, #8
    bd2c:	af00      	add	r7, sp, #0
    bd2e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    bd30:	687b      	ldr	r3, [r7, #4]
    bd32:	691b      	ldr	r3, [r3, #16]
    bd34:	4618      	mov	r0, r3
    bd36:	4b03      	ldr	r3, [pc, #12]	; (bd44 <_pwm_enable+0x1c>)
    bd38:	4798      	blx	r3
}
    bd3a:	bf00      	nop
    bd3c:	3708      	adds	r7, #8
    bd3e:	46bd      	mov	sp, r7
    bd40:	bd80      	pop	{r7, pc}
    bd42:	bf00      	nop
    bd44:	0000b649 	.word	0x0000b649

0000bd48 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    bd48:	b580      	push	{r7, lr}
    bd4a:	b082      	sub	sp, #8
    bd4c:	af00      	add	r7, sp, #0
    bd4e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    bd50:	687b      	ldr	r3, [r7, #4]
    bd52:	68db      	ldr	r3, [r3, #12]
    bd54:	4618      	mov	r0, r3
    bd56:	4b03      	ldr	r3, [pc, #12]	; (bd64 <_timer_stop+0x1c>)
    bd58:	4798      	blx	r3
}
    bd5a:	bf00      	nop
    bd5c:	3708      	adds	r7, #8
    bd5e:	46bd      	mov	sp, r7
    bd60:	bd80      	pop	{r7, pc}
    bd62:	bf00      	nop
    bd64:	0000b6a9 	.word	0x0000b6a9

0000bd68 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    bd68:	b580      	push	{r7, lr}
    bd6a:	b082      	sub	sp, #8
    bd6c:	af00      	add	r7, sp, #0
    bd6e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    bd70:	687b      	ldr	r3, [r7, #4]
    bd72:	68db      	ldr	r3, [r3, #12]
    bd74:	4618      	mov	r0, r3
    bd76:	4b03      	ldr	r3, [pc, #12]	; (bd84 <_timer_is_started+0x1c>)
    bd78:	4798      	blx	r3
    bd7a:	4603      	mov	r3, r0
}
    bd7c:	4618      	mov	r0, r3
    bd7e:	3708      	adds	r7, #8
    bd80:	46bd      	mov	sp, r7
    bd82:	bd80      	pop	{r7, pc}
    bd84:	0000b671 	.word	0x0000b671

0000bd88 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    bd88:	b580      	push	{r7, lr}
    bd8a:	b082      	sub	sp, #8
    bd8c:	af00      	add	r7, sp, #0
    bd8e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    bd90:	687b      	ldr	r3, [r7, #4]
    bd92:	691b      	ldr	r3, [r3, #16]
    bd94:	4618      	mov	r0, r3
    bd96:	4b03      	ldr	r3, [pc, #12]	; (bda4 <_pwm_is_enabled+0x1c>)
    bd98:	4798      	blx	r3
    bd9a:	4603      	mov	r3, r0
}
    bd9c:	4618      	mov	r0, r3
    bd9e:	3708      	adds	r7, #8
    bda0:	46bd      	mov	sp, r7
    bda2:	bd80      	pop	{r7, pc}
    bda4:	0000b671 	.word	0x0000b671

0000bda8 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    bda8:	b480      	push	{r7}
    bdaa:	af00      	add	r7, sp, #0
	return NULL;
    bdac:	2300      	movs	r3, #0
}
    bdae:	4618      	mov	r0, r3
    bdb0:	46bd      	mov	sp, r7
    bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdb6:	4770      	bx	lr

0000bdb8 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    bdb8:	b480      	push	{r7}
    bdba:	af00      	add	r7, sp, #0
	return NULL;
    bdbc:	2300      	movs	r3, #0
}
    bdbe:	4618      	mov	r0, r3
    bdc0:	46bd      	mov	sp, r7
    bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdc6:	4770      	bx	lr

0000bdc8 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    bdc8:	b580      	push	{r7, lr}
    bdca:	b084      	sub	sp, #16
    bdcc:	af00      	add	r7, sp, #0
    bdce:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    bdd0:	687b      	ldr	r3, [r7, #4]
    bdd2:	68db      	ldr	r3, [r3, #12]
    bdd4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    bdd6:	68f8      	ldr	r0, [r7, #12]
    bdd8:	4b0e      	ldr	r3, [pc, #56]	; (be14 <_timer_set_irq+0x4c>)
    bdda:	4798      	blx	r3
    bddc:	4603      	mov	r3, r0
    bdde:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    bde0:	f240 12a7 	movw	r2, #423	; 0x1a7
    bde4:	490c      	ldr	r1, [pc, #48]	; (be18 <_timer_set_irq+0x50>)
    bde6:	2001      	movs	r0, #1
    bde8:	4b0c      	ldr	r3, [pc, #48]	; (be1c <_timer_set_irq+0x54>)
    bdea:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    bdec:	f997 200b 	ldrsb.w	r2, [r7, #11]
    bdf0:	490b      	ldr	r1, [pc, #44]	; (be20 <_timer_set_irq+0x58>)
    bdf2:	4613      	mov	r3, r2
    bdf4:	009b      	lsls	r3, r3, #2
    bdf6:	4413      	add	r3, r2
    bdf8:	009b      	lsls	r3, r3, #2
    bdfa:	440b      	add	r3, r1
    bdfc:	3302      	adds	r3, #2
    bdfe:	f9b3 3000 	ldrsh.w	r3, [r3]
    be02:	b2db      	uxtb	r3, r3
    be04:	4618      	mov	r0, r3
    be06:	4b07      	ldr	r3, [pc, #28]	; (be24 <_timer_set_irq+0x5c>)
    be08:	4798      	blx	r3
}
    be0a:	bf00      	nop
    be0c:	3710      	adds	r7, #16
    be0e:	46bd      	mov	sp, r7
    be10:	bd80      	pop	{r7, pc}
    be12:	bf00      	nop
    be14:	0000bf91 	.word	0x0000bf91
    be18:	0001d280 	.word	0x0001d280
    be1c:	00006991 	.word	0x00006991
    be20:	200000c4 	.word	0x200000c4
    be24:	000071dd 	.word	0x000071dd

0000be28 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    be28:	b580      	push	{r7, lr}
    be2a:	b084      	sub	sp, #16
    be2c:	af00      	add	r7, sp, #0
    be2e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    be30:	687b      	ldr	r3, [r7, #4]
    be32:	68db      	ldr	r3, [r3, #12]
    be34:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    be36:	68f8      	ldr	r0, [r7, #12]
    be38:	4b07      	ldr	r3, [pc, #28]	; (be58 <tc_interrupt_handler+0x30>)
    be3a:	4798      	blx	r3
    be3c:	4603      	mov	r3, r0
    be3e:	2b00      	cmp	r3, #0
    be40:	d006      	beq.n	be50 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    be42:	68f8      	ldr	r0, [r7, #12]
    be44:	4b05      	ldr	r3, [pc, #20]	; (be5c <tc_interrupt_handler+0x34>)
    be46:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    be48:	687b      	ldr	r3, [r7, #4]
    be4a:	681b      	ldr	r3, [r3, #0]
    be4c:	6878      	ldr	r0, [r7, #4]
    be4e:	4798      	blx	r3
	}
}
    be50:	bf00      	nop
    be52:	3710      	adds	r7, #16
    be54:	46bd      	mov	sp, r7
    be56:	bd80      	pop	{r7, pc}
    be58:	0000b5a9 	.word	0x0000b5a9
    be5c:	0000b5d1 	.word	0x0000b5d1

0000be60 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    be60:	b580      	push	{r7, lr}
    be62:	b084      	sub	sp, #16
    be64:	af00      	add	r7, sp, #0
    be66:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    be68:	687b      	ldr	r3, [r7, #4]
    be6a:	691b      	ldr	r3, [r3, #16]
    be6c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    be6e:	68f8      	ldr	r0, [r7, #12]
    be70:	4b12      	ldr	r3, [pc, #72]	; (bebc <tc_pwm_interrupt_handler+0x5c>)
    be72:	4798      	blx	r3
    be74:	4603      	mov	r3, r0
    be76:	2b00      	cmp	r3, #0
    be78:	d00a      	beq.n	be90 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    be7a:	68f8      	ldr	r0, [r7, #12]
    be7c:	4b10      	ldr	r3, [pc, #64]	; (bec0 <tc_pwm_interrupt_handler+0x60>)
    be7e:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    be80:	687b      	ldr	r3, [r7, #4]
    be82:	681b      	ldr	r3, [r3, #0]
    be84:	2b00      	cmp	r3, #0
    be86:	d003      	beq.n	be90 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    be88:	687b      	ldr	r3, [r7, #4]
    be8a:	681b      	ldr	r3, [r3, #0]
    be8c:	6878      	ldr	r0, [r7, #4]
    be8e:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    be90:	68f8      	ldr	r0, [r7, #12]
    be92:	4b0c      	ldr	r3, [pc, #48]	; (bec4 <tc_pwm_interrupt_handler+0x64>)
    be94:	4798      	blx	r3
    be96:	4603      	mov	r3, r0
    be98:	2b00      	cmp	r3, #0
    be9a:	d00a      	beq.n	beb2 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    be9c:	68f8      	ldr	r0, [r7, #12]
    be9e:	4b0a      	ldr	r3, [pc, #40]	; (bec8 <tc_pwm_interrupt_handler+0x68>)
    bea0:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    bea2:	687b      	ldr	r3, [r7, #4]
    bea4:	685b      	ldr	r3, [r3, #4]
    bea6:	2b00      	cmp	r3, #0
    bea8:	d003      	beq.n	beb2 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    beaa:	687b      	ldr	r3, [r7, #4]
    beac:	685b      	ldr	r3, [r3, #4]
    beae:	6878      	ldr	r0, [r7, #4]
    beb0:	4798      	blx	r3
		}
	}
}
    beb2:	bf00      	nop
    beb4:	3710      	adds	r7, #16
    beb6:	46bd      	mov	sp, r7
    beb8:	bd80      	pop	{r7, pc}
    beba:	bf00      	nop
    bebc:	0000b5a9 	.word	0x0000b5a9
    bec0:	0000b5d1 	.word	0x0000b5d1
    bec4:	0000b61f 	.word	0x0000b61f
    bec8:	0000b5eb 	.word	0x0000b5eb

0000becc <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    becc:	b580      	push	{r7, lr}
    bece:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    bed0:	4b03      	ldr	r3, [pc, #12]	; (bee0 <TC0_Handler+0x14>)
    bed2:	681b      	ldr	r3, [r3, #0]
    bed4:	4618      	mov	r0, r3
    bed6:	4b03      	ldr	r3, [pc, #12]	; (bee4 <TC0_Handler+0x18>)
    bed8:	4798      	blx	r3
}
    beda:	bf00      	nop
    bedc:	bd80      	pop	{r7, pc}
    bede:	bf00      	nop
    bee0:	200035b0 	.word	0x200035b0
    bee4:	0000be29 	.word	0x0000be29

0000bee8 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    bee8:	b580      	push	{r7, lr}
    beea:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    beec:	4b03      	ldr	r3, [pc, #12]	; (befc <TC1_Handler+0x14>)
    beee:	681b      	ldr	r3, [r3, #0]
    bef0:	4618      	mov	r0, r3
    bef2:	4b03      	ldr	r3, [pc, #12]	; (bf00 <TC1_Handler+0x18>)
    bef4:	4798      	blx	r3
}
    bef6:	bf00      	nop
    bef8:	bd80      	pop	{r7, pc}
    befa:	bf00      	nop
    befc:	200035b4 	.word	0x200035b4
    bf00:	0000be29 	.word	0x0000be29

0000bf04 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    bf04:	b580      	push	{r7, lr}
    bf06:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    bf08:	4b03      	ldr	r3, [pc, #12]	; (bf18 <TC2_Handler+0x14>)
    bf0a:	681b      	ldr	r3, [r3, #0]
    bf0c:	4618      	mov	r0, r3
    bf0e:	4b03      	ldr	r3, [pc, #12]	; (bf1c <TC2_Handler+0x18>)
    bf10:	4798      	blx	r3
}
    bf12:	bf00      	nop
    bf14:	bd80      	pop	{r7, pc}
    bf16:	bf00      	nop
    bf18:	200035b8 	.word	0x200035b8
    bf1c:	0000be29 	.word	0x0000be29

0000bf20 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    bf20:	b580      	push	{r7, lr}
    bf22:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    bf24:	4b03      	ldr	r3, [pc, #12]	; (bf34 <TC3_Handler+0x14>)
    bf26:	681b      	ldr	r3, [r3, #0]
    bf28:	4618      	mov	r0, r3
    bf2a:	4b03      	ldr	r3, [pc, #12]	; (bf38 <TC3_Handler+0x18>)
    bf2c:	4798      	blx	r3
}
    bf2e:	bf00      	nop
    bf30:	bd80      	pop	{r7, pc}
    bf32:	bf00      	nop
    bf34:	200035bc 	.word	0x200035bc
    bf38:	0000be29 	.word	0x0000be29

0000bf3c <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    bf3c:	b580      	push	{r7, lr}
    bf3e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    bf40:	4b03      	ldr	r3, [pc, #12]	; (bf50 <TC4_Handler+0x14>)
    bf42:	681b      	ldr	r3, [r3, #0]
    bf44:	4618      	mov	r0, r3
    bf46:	4b03      	ldr	r3, [pc, #12]	; (bf54 <TC4_Handler+0x18>)
    bf48:	4798      	blx	r3
}
    bf4a:	bf00      	nop
    bf4c:	bd80      	pop	{r7, pc}
    bf4e:	bf00      	nop
    bf50:	200035c0 	.word	0x200035c0
    bf54:	0000be29 	.word	0x0000be29

0000bf58 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    bf58:	b580      	push	{r7, lr}
    bf5a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    bf5c:	4b03      	ldr	r3, [pc, #12]	; (bf6c <TC5_Handler+0x14>)
    bf5e:	681b      	ldr	r3, [r3, #0]
    bf60:	4618      	mov	r0, r3
    bf62:	4b03      	ldr	r3, [pc, #12]	; (bf70 <TC5_Handler+0x18>)
    bf64:	4798      	blx	r3
}
    bf66:	bf00      	nop
    bf68:	bd80      	pop	{r7, pc}
    bf6a:	bf00      	nop
    bf6c:	200035c4 	.word	0x200035c4
    bf70:	0000be29 	.word	0x0000be29

0000bf74 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    bf74:	b580      	push	{r7, lr}
    bf76:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    bf78:	4b03      	ldr	r3, [pc, #12]	; (bf88 <TC7_Handler+0x14>)
    bf7a:	681b      	ldr	r3, [r3, #0]
    bf7c:	4618      	mov	r0, r3
    bf7e:	4b03      	ldr	r3, [pc, #12]	; (bf8c <TC7_Handler+0x18>)
    bf80:	4798      	blx	r3
}
    bf82:	bf00      	nop
    bf84:	bd80      	pop	{r7, pc}
    bf86:	bf00      	nop
    bf88:	200035c8 	.word	0x200035c8
    bf8c:	0000be61 	.word	0x0000be61

0000bf90 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    bf90:	b580      	push	{r7, lr}
    bf92:	b084      	sub	sp, #16
    bf94:	af00      	add	r7, sp, #0
    bf96:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    bf98:	6878      	ldr	r0, [r7, #4]
    bf9a:	4b13      	ldr	r3, [pc, #76]	; (bfe8 <get_tc_index+0x58>)
    bf9c:	4798      	blx	r3
    bf9e:	4603      	mov	r3, r0
    bfa0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    bfa2:	2300      	movs	r3, #0
    bfa4:	73fb      	strb	r3, [r7, #15]
    bfa6:	e010      	b.n	bfca <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    bfa8:	7bfa      	ldrb	r2, [r7, #15]
    bfaa:	4910      	ldr	r1, [pc, #64]	; (bfec <get_tc_index+0x5c>)
    bfac:	4613      	mov	r3, r2
    bfae:	009b      	lsls	r3, r3, #2
    bfb0:	4413      	add	r3, r2
    bfb2:	009b      	lsls	r3, r3, #2
    bfb4:	440b      	add	r3, r1
    bfb6:	781b      	ldrb	r3, [r3, #0]
    bfb8:	7bba      	ldrb	r2, [r7, #14]
    bfba:	429a      	cmp	r2, r3
    bfbc:	d102      	bne.n	bfc4 <get_tc_index+0x34>
			return i;
    bfbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    bfc2:	e00d      	b.n	bfe0 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    bfc4:	7bfb      	ldrb	r3, [r7, #15]
    bfc6:	3301      	adds	r3, #1
    bfc8:	73fb      	strb	r3, [r7, #15]
    bfca:	7bfb      	ldrb	r3, [r7, #15]
    bfcc:	2b06      	cmp	r3, #6
    bfce:	d9eb      	bls.n	bfa8 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    bfd0:	f240 221a 	movw	r2, #538	; 0x21a
    bfd4:	4906      	ldr	r1, [pc, #24]	; (bff0 <get_tc_index+0x60>)
    bfd6:	2000      	movs	r0, #0
    bfd8:	4b06      	ldr	r3, [pc, #24]	; (bff4 <get_tc_index+0x64>)
    bfda:	4798      	blx	r3
	return -1;
    bfdc:	f04f 33ff 	mov.w	r3, #4294967295
}
    bfe0:	4618      	mov	r0, r3
    bfe2:	3710      	adds	r7, #16
    bfe4:	46bd      	mov	sp, r7
    bfe6:	bd80      	pop	{r7, pc}
    bfe8:	0000c0a9 	.word	0x0000c0a9
    bfec:	200000c4 	.word	0x200000c4
    bff0:	0001d280 	.word	0x0001d280
    bff4:	00006991 	.word	0x00006991

0000bff8 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    bff8:	b480      	push	{r7}
    bffa:	b083      	sub	sp, #12
    bffc:	af00      	add	r7, sp, #0
    bffe:	6078      	str	r0, [r7, #4]
    c000:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    c002:	687b      	ldr	r3, [r7, #4]
    c004:	4a1a      	ldr	r2, [pc, #104]	; (c070 <_tc_init_irq_param+0x78>)
    c006:	4293      	cmp	r3, r2
    c008:	d102      	bne.n	c010 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    c00a:	4a1a      	ldr	r2, [pc, #104]	; (c074 <_tc_init_irq_param+0x7c>)
    c00c:	683b      	ldr	r3, [r7, #0]
    c00e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    c010:	687b      	ldr	r3, [r7, #4]
    c012:	4a19      	ldr	r2, [pc, #100]	; (c078 <_tc_init_irq_param+0x80>)
    c014:	4293      	cmp	r3, r2
    c016:	d102      	bne.n	c01e <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    c018:	4a18      	ldr	r2, [pc, #96]	; (c07c <_tc_init_irq_param+0x84>)
    c01a:	683b      	ldr	r3, [r7, #0]
    c01c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    c01e:	687b      	ldr	r3, [r7, #4]
    c020:	4a17      	ldr	r2, [pc, #92]	; (c080 <_tc_init_irq_param+0x88>)
    c022:	4293      	cmp	r3, r2
    c024:	d102      	bne.n	c02c <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    c026:	4a17      	ldr	r2, [pc, #92]	; (c084 <_tc_init_irq_param+0x8c>)
    c028:	683b      	ldr	r3, [r7, #0]
    c02a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    c02c:	687b      	ldr	r3, [r7, #4]
    c02e:	4a16      	ldr	r2, [pc, #88]	; (c088 <_tc_init_irq_param+0x90>)
    c030:	4293      	cmp	r3, r2
    c032:	d102      	bne.n	c03a <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    c034:	4a15      	ldr	r2, [pc, #84]	; (c08c <_tc_init_irq_param+0x94>)
    c036:	683b      	ldr	r3, [r7, #0]
    c038:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    c03a:	687b      	ldr	r3, [r7, #4]
    c03c:	4a14      	ldr	r2, [pc, #80]	; (c090 <_tc_init_irq_param+0x98>)
    c03e:	4293      	cmp	r3, r2
    c040:	d102      	bne.n	c048 <_tc_init_irq_param+0x50>
		_tc4_dev = (struct _timer_device *)dev;
    c042:	4a14      	ldr	r2, [pc, #80]	; (c094 <_tc_init_irq_param+0x9c>)
    c044:	683b      	ldr	r3, [r7, #0]
    c046:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    c048:	687b      	ldr	r3, [r7, #4]
    c04a:	4a13      	ldr	r2, [pc, #76]	; (c098 <_tc_init_irq_param+0xa0>)
    c04c:	4293      	cmp	r3, r2
    c04e:	d102      	bne.n	c056 <_tc_init_irq_param+0x5e>
		_tc5_dev = (struct _timer_device *)dev;
    c050:	4a12      	ldr	r2, [pc, #72]	; (c09c <_tc_init_irq_param+0xa4>)
    c052:	683b      	ldr	r3, [r7, #0]
    c054:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    c056:	687b      	ldr	r3, [r7, #4]
    c058:	4a11      	ldr	r2, [pc, #68]	; (c0a0 <_tc_init_irq_param+0xa8>)
    c05a:	4293      	cmp	r3, r2
    c05c:	d102      	bne.n	c064 <_tc_init_irq_param+0x6c>
		_tc7_dev = (struct _pwm_device *)dev;
    c05e:	4a11      	ldr	r2, [pc, #68]	; (c0a4 <_tc_init_irq_param+0xac>)
    c060:	683b      	ldr	r3, [r7, #0]
    c062:	6013      	str	r3, [r2, #0]
	}
}
    c064:	bf00      	nop
    c066:	370c      	adds	r7, #12
    c068:	46bd      	mov	sp, r7
    c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c06e:	4770      	bx	lr
    c070:	40003800 	.word	0x40003800
    c074:	200035b0 	.word	0x200035b0
    c078:	40003c00 	.word	0x40003c00
    c07c:	200035b4 	.word	0x200035b4
    c080:	4101a000 	.word	0x4101a000
    c084:	200035b8 	.word	0x200035b8
    c088:	4101c000 	.word	0x4101c000
    c08c:	200035bc 	.word	0x200035bc
    c090:	42001400 	.word	0x42001400
    c094:	200035c0 	.word	0x200035c0
    c098:	42001800 	.word	0x42001800
    c09c:	200035c4 	.word	0x200035c4
    c0a0:	43001800 	.word	0x43001800
    c0a4:	200035c8 	.word	0x200035c8

0000c0a8 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    c0a8:	b4b0      	push	{r4, r5, r7}
    c0aa:	b08d      	sub	sp, #52	; 0x34
    c0ac:	af00      	add	r7, sp, #0
    c0ae:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    c0b0:	4b13      	ldr	r3, [pc, #76]	; (c100 <_get_hardware_offset+0x58>)
    c0b2:	f107 040c 	add.w	r4, r7, #12
    c0b6:	461d      	mov	r5, r3
    c0b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c0ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c0bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    c0c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    c0c4:	2300      	movs	r3, #0
    c0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    c0c8:	e010      	b.n	c0ec <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    c0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c0cc:	009b      	lsls	r3, r3, #2
    c0ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c0d2:	4413      	add	r3, r2
    c0d4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    c0d8:	461a      	mov	r2, r3
    c0da:	687b      	ldr	r3, [r7, #4]
    c0dc:	429a      	cmp	r2, r3
    c0de:	d102      	bne.n	c0e6 <_get_hardware_offset+0x3e>
			return i;
    c0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c0e2:	b2db      	uxtb	r3, r3
    c0e4:	e006      	b.n	c0f4 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    c0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c0e8:	3301      	adds	r3, #1
    c0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    c0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c0ee:	2b07      	cmp	r3, #7
    c0f0:	d9eb      	bls.n	c0ca <_get_hardware_offset+0x22>
		}
	}
	return 0;
    c0f2:	2300      	movs	r3, #0
}
    c0f4:	4618      	mov	r0, r3
    c0f6:	3734      	adds	r7, #52	; 0x34
    c0f8:	46bd      	mov	sp, r7
    c0fa:	bcb0      	pop	{r4, r5, r7}
    c0fc:	4770      	bx	lr
    c0fe:	bf00      	nop
    c100:	0001d294 	.word	0x0001d294

0000c104 <__NVIC_EnableIRQ>:
{
    c104:	b480      	push	{r7}
    c106:	b083      	sub	sp, #12
    c108:	af00      	add	r7, sp, #0
    c10a:	4603      	mov	r3, r0
    c10c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c10e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c112:	2b00      	cmp	r3, #0
    c114:	db0b      	blt.n	c12e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c116:	4909      	ldr	r1, [pc, #36]	; (c13c <__NVIC_EnableIRQ+0x38>)
    c118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c11c:	095b      	lsrs	r3, r3, #5
    c11e:	88fa      	ldrh	r2, [r7, #6]
    c120:	f002 021f 	and.w	r2, r2, #31
    c124:	2001      	movs	r0, #1
    c126:	fa00 f202 	lsl.w	r2, r0, r2
    c12a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c12e:	bf00      	nop
    c130:	370c      	adds	r7, #12
    c132:	46bd      	mov	sp, r7
    c134:	f85d 7b04 	ldr.w	r7, [sp], #4
    c138:	4770      	bx	lr
    c13a:	bf00      	nop
    c13c:	e000e100 	.word	0xe000e100

0000c140 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    c140:	b480      	push	{r7}
    c142:	b087      	sub	sp, #28
    c144:	af00      	add	r7, sp, #0
    c146:	60f8      	str	r0, [r7, #12]
    c148:	460b      	mov	r3, r1
    c14a:	607a      	str	r2, [r7, #4]
    c14c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    c14e:	7afa      	ldrb	r2, [r7, #11]
    c150:	68f9      	ldr	r1, [r7, #12]
    c152:	4613      	mov	r3, r2
    c154:	009b      	lsls	r3, r3, #2
    c156:	4413      	add	r3, r2
    c158:	009b      	lsls	r3, r3, #2
    c15a:	440b      	add	r3, r1
    c15c:	3340      	adds	r3, #64	; 0x40
    c15e:	681b      	ldr	r3, [r3, #0]
    c160:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    c162:	697a      	ldr	r2, [r7, #20]
    c164:	687b      	ldr	r3, [r7, #4]
    c166:	4013      	ands	r3, r2
    c168:	617b      	str	r3, [r7, #20]
	return tmp;
    c16a:	697b      	ldr	r3, [r7, #20]
}
    c16c:	4618      	mov	r0, r3
    c16e:	371c      	adds	r7, #28
    c170:	46bd      	mov	sp, r7
    c172:	f85d 7b04 	ldr.w	r7, [sp], #4
    c176:	4770      	bx	lr

0000c178 <hri_oscctrl_get_STATUS_reg>:
{
    c178:	b480      	push	{r7}
    c17a:	b085      	sub	sp, #20
    c17c:	af00      	add	r7, sp, #0
    c17e:	6078      	str	r0, [r7, #4]
    c180:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    c182:	687b      	ldr	r3, [r7, #4]
    c184:	691b      	ldr	r3, [r3, #16]
    c186:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    c188:	68fa      	ldr	r2, [r7, #12]
    c18a:	683b      	ldr	r3, [r7, #0]
    c18c:	4013      	ands	r3, r2
    c18e:	60fb      	str	r3, [r7, #12]
	return tmp;
    c190:	68fb      	ldr	r3, [r7, #12]
}
    c192:	4618      	mov	r0, r3
    c194:	3714      	adds	r7, #20
    c196:	46bd      	mov	sp, r7
    c198:	f85d 7b04 	ldr.w	r7, [sp], #4
    c19c:	4770      	bx	lr

0000c19e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    c19e:	b480      	push	{r7}
    c1a0:	b085      	sub	sp, #20
    c1a2:	af00      	add	r7, sp, #0
    c1a4:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    c1a6:	687b      	ldr	r3, [r7, #4]
    c1a8:	f893 3020 	ldrb.w	r3, [r3, #32]
    c1ac:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    c1ae:	7bfb      	ldrb	r3, [r7, #15]
    c1b0:	f003 0301 	and.w	r3, r3, #1
    c1b4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    c1b6:	7bfb      	ldrb	r3, [r7, #15]
    c1b8:	2b00      	cmp	r3, #0
    c1ba:	bf14      	ite	ne
    c1bc:	2301      	movne	r3, #1
    c1be:	2300      	moveq	r3, #0
    c1c0:	b2db      	uxtb	r3, r3
}
    c1c2:	4618      	mov	r0, r3
    c1c4:	3714      	adds	r7, #20
    c1c6:	46bd      	mov	sp, r7
    c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1cc:	4770      	bx	lr

0000c1ce <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    c1ce:	b480      	push	{r7}
    c1d0:	b083      	sub	sp, #12
    c1d2:	af00      	add	r7, sp, #0
    c1d4:	6078      	str	r0, [r7, #4]
    c1d6:	460b      	mov	r3, r1
    c1d8:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c1da:	bf00      	nop
    c1dc:	687b      	ldr	r3, [r7, #4]
    c1de:	789b      	ldrb	r3, [r3, #2]
    c1e0:	b2da      	uxtb	r2, r3
    c1e2:	78fb      	ldrb	r3, [r7, #3]
    c1e4:	4013      	ands	r3, r2
    c1e6:	b2db      	uxtb	r3, r3
    c1e8:	2b00      	cmp	r3, #0
    c1ea:	d1f7      	bne.n	c1dc <hri_usb_wait_for_sync+0xe>
	};
}
    c1ec:	bf00      	nop
    c1ee:	370c      	adds	r7, #12
    c1f0:	46bd      	mov	sp, r7
    c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1f6:	4770      	bx	lr

0000c1f8 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    c1f8:	b480      	push	{r7}
    c1fa:	b083      	sub	sp, #12
    c1fc:	af00      	add	r7, sp, #0
    c1fe:	6078      	str	r0, [r7, #4]
    c200:	460b      	mov	r3, r1
    c202:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    c204:	687b      	ldr	r3, [r7, #4]
    c206:	789b      	ldrb	r3, [r3, #2]
    c208:	b2da      	uxtb	r2, r3
    c20a:	78fb      	ldrb	r3, [r7, #3]
    c20c:	4013      	ands	r3, r2
    c20e:	b2db      	uxtb	r3, r3
    c210:	2b00      	cmp	r3, #0
    c212:	bf14      	ite	ne
    c214:	2301      	movne	r3, #1
    c216:	2300      	moveq	r3, #0
    c218:	b2db      	uxtb	r3, r3
}
    c21a:	4618      	mov	r0, r3
    c21c:	370c      	adds	r7, #12
    c21e:	46bd      	mov	sp, r7
    c220:	f85d 7b04 	ldr.w	r7, [sp], #4
    c224:	4770      	bx	lr

0000c226 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    c226:	b480      	push	{r7}
    c228:	b085      	sub	sp, #20
    c22a:	af00      	add	r7, sp, #0
    c22c:	6078      	str	r0, [r7, #4]
    c22e:	460b      	mov	r3, r1
    c230:	70fb      	strb	r3, [r7, #3]
    c232:	4613      	mov	r3, r2
    c234:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    c236:	78fb      	ldrb	r3, [r7, #3]
    c238:	687a      	ldr	r2, [r7, #4]
    c23a:	3308      	adds	r3, #8
    c23c:	015b      	lsls	r3, r3, #5
    c23e:	4413      	add	r3, r2
    c240:	3307      	adds	r3, #7
    c242:	781b      	ldrb	r3, [r3, #0]
    c244:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    c246:	7bfa      	ldrb	r2, [r7, #15]
    c248:	78bb      	ldrb	r3, [r7, #2]
    c24a:	4013      	ands	r3, r2
    c24c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    c24e:	7bfb      	ldrb	r3, [r7, #15]
}
    c250:	4618      	mov	r0, r3
    c252:	3714      	adds	r7, #20
    c254:	46bd      	mov	sp, r7
    c256:	f85d 7b04 	ldr.w	r7, [sp], #4
    c25a:	4770      	bx	lr

0000c25c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    c25c:	b480      	push	{r7}
    c25e:	b083      	sub	sp, #12
    c260:	af00      	add	r7, sp, #0
    c262:	6078      	str	r0, [r7, #4]
    c264:	460b      	mov	r3, r1
    c266:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    c268:	78fb      	ldrb	r3, [r7, #3]
    c26a:	687a      	ldr	r2, [r7, #4]
    c26c:	3308      	adds	r3, #8
    c26e:	015b      	lsls	r3, r3, #5
    c270:	4413      	add	r3, r2
    c272:	3307      	adds	r3, #7
    c274:	781b      	ldrb	r3, [r3, #0]
    c276:	b2db      	uxtb	r3, r3
}
    c278:	4618      	mov	r0, r3
    c27a:	370c      	adds	r7, #12
    c27c:	46bd      	mov	sp, r7
    c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c282:	4770      	bx	lr

0000c284 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    c284:	b480      	push	{r7}
    c286:	b083      	sub	sp, #12
    c288:	af00      	add	r7, sp, #0
    c28a:	6078      	str	r0, [r7, #4]
    c28c:	460b      	mov	r3, r1
    c28e:	70fb      	strb	r3, [r7, #3]
    c290:	4613      	mov	r3, r2
    c292:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c294:	78fb      	ldrb	r3, [r7, #3]
    c296:	687a      	ldr	r2, [r7, #4]
    c298:	3308      	adds	r3, #8
    c29a:	015b      	lsls	r3, r3, #5
    c29c:	4413      	add	r3, r2
    c29e:	3307      	adds	r3, #7
    c2a0:	78ba      	ldrb	r2, [r7, #2]
    c2a2:	701a      	strb	r2, [r3, #0]
}
    c2a4:	bf00      	nop
    c2a6:	370c      	adds	r7, #12
    c2a8:	46bd      	mov	sp, r7
    c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2ae:	4770      	bx	lr

0000c2b0 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    c2b0:	b480      	push	{r7}
    c2b2:	b083      	sub	sp, #12
    c2b4:	af00      	add	r7, sp, #0
    c2b6:	6078      	str	r0, [r7, #4]
    c2b8:	460b      	mov	r3, r1
    c2ba:	70fb      	strb	r3, [r7, #3]
    c2bc:	4613      	mov	r3, r2
    c2be:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c2c0:	78fb      	ldrb	r3, [r7, #3]
    c2c2:	687a      	ldr	r2, [r7, #4]
    c2c4:	3308      	adds	r3, #8
    c2c6:	015b      	lsls	r3, r3, #5
    c2c8:	4413      	add	r3, r2
    c2ca:	3305      	adds	r3, #5
    c2cc:	78ba      	ldrb	r2, [r7, #2]
    c2ce:	701a      	strb	r2, [r3, #0]
}
    c2d0:	bf00      	nop
    c2d2:	370c      	adds	r7, #12
    c2d4:	46bd      	mov	sp, r7
    c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2da:	4770      	bx	lr

0000c2dc <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    c2dc:	b480      	push	{r7}
    c2de:	b083      	sub	sp, #12
    c2e0:	af00      	add	r7, sp, #0
    c2e2:	6078      	str	r0, [r7, #4]
    c2e4:	460b      	mov	r3, r1
    c2e6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    c2e8:	78fb      	ldrb	r3, [r7, #3]
    c2ea:	687a      	ldr	r2, [r7, #4]
    c2ec:	3308      	adds	r3, #8
    c2ee:	015b      	lsls	r3, r3, #5
    c2f0:	4413      	add	r3, r2
    c2f2:	3306      	adds	r3, #6
    c2f4:	781b      	ldrb	r3, [r3, #0]
    c2f6:	b2db      	uxtb	r3, r3
}
    c2f8:	4618      	mov	r0, r3
    c2fa:	370c      	adds	r7, #12
    c2fc:	46bd      	mov	sp, r7
    c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    c302:	4770      	bx	lr

0000c304 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    c304:	b480      	push	{r7}
    c306:	b083      	sub	sp, #12
    c308:	af00      	add	r7, sp, #0
    c30a:	6078      	str	r0, [r7, #4]
    c30c:	460b      	mov	r3, r1
    c30e:	70fb      	strb	r3, [r7, #3]
    c310:	4613      	mov	r3, r2
    c312:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c314:	78fb      	ldrb	r3, [r7, #3]
    c316:	687a      	ldr	r2, [r7, #4]
    c318:	3308      	adds	r3, #8
    c31a:	015b      	lsls	r3, r3, #5
    c31c:	4413      	add	r3, r2
    c31e:	3304      	adds	r3, #4
    c320:	78ba      	ldrb	r2, [r7, #2]
    c322:	701a      	strb	r2, [r3, #0]
}
    c324:	bf00      	nop
    c326:	370c      	adds	r7, #12
    c328:	46bd      	mov	sp, r7
    c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c32e:	4770      	bx	lr

0000c330 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    c330:	b480      	push	{r7}
    c332:	b083      	sub	sp, #12
    c334:	af00      	add	r7, sp, #0
    c336:	6078      	str	r0, [r7, #4]
    c338:	460b      	mov	r3, r1
    c33a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    c33c:	78fb      	ldrb	r3, [r7, #3]
    c33e:	687a      	ldr	r2, [r7, #4]
    c340:	015b      	lsls	r3, r3, #5
    c342:	4413      	add	r3, r2
    c344:	f503 7384 	add.w	r3, r3, #264	; 0x108
    c348:	2210      	movs	r2, #16
    c34a:	701a      	strb	r2, [r3, #0]
}
    c34c:	bf00      	nop
    c34e:	370c      	adds	r7, #12
    c350:	46bd      	mov	sp, r7
    c352:	f85d 7b04 	ldr.w	r7, [sp], #4
    c356:	4770      	bx	lr

0000c358 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    c358:	b480      	push	{r7}
    c35a:	b083      	sub	sp, #12
    c35c:	af00      	add	r7, sp, #0
    c35e:	6078      	str	r0, [r7, #4]
    c360:	460b      	mov	r3, r1
    c362:	70fb      	strb	r3, [r7, #3]
    c364:	4613      	mov	r3, r2
    c366:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    c368:	78fb      	ldrb	r3, [r7, #3]
    c36a:	687a      	ldr	r2, [r7, #4]
    c36c:	015b      	lsls	r3, r3, #5
    c36e:	4413      	add	r3, r2
    c370:	f203 1309 	addw	r3, r3, #265	; 0x109
    c374:	78ba      	ldrb	r2, [r7, #2]
    c376:	701a      	strb	r2, [r3, #0]
}
    c378:	bf00      	nop
    c37a:	370c      	adds	r7, #12
    c37c:	46bd      	mov	sp, r7
    c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c382:	4770      	bx	lr

0000c384 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    c384:	b480      	push	{r7}
    c386:	b083      	sub	sp, #12
    c388:	af00      	add	r7, sp, #0
    c38a:	6078      	str	r0, [r7, #4]
    c38c:	460b      	mov	r3, r1
    c38e:	70fb      	strb	r3, [r7, #3]
    c390:	4613      	mov	r3, r2
    c392:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c394:	78fb      	ldrb	r3, [r7, #3]
    c396:	687a      	ldr	r2, [r7, #4]
    c398:	015b      	lsls	r3, r3, #5
    c39a:	4413      	add	r3, r2
    c39c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    c3a0:	78ba      	ldrb	r2, [r7, #2]
    c3a2:	701a      	strb	r2, [r3, #0]
}
    c3a4:	bf00      	nop
    c3a6:	370c      	adds	r7, #12
    c3a8:	46bd      	mov	sp, r7
    c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3ae:	4770      	bx	lr

0000c3b0 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    c3b0:	b480      	push	{r7}
    c3b2:	b085      	sub	sp, #20
    c3b4:	af00      	add	r7, sp, #0
    c3b6:	6078      	str	r0, [r7, #4]
    c3b8:	460b      	mov	r3, r1
    c3ba:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c3bc:	78fb      	ldrb	r3, [r7, #3]
    c3be:	687a      	ldr	r2, [r7, #4]
    c3c0:	3308      	adds	r3, #8
    c3c2:	015b      	lsls	r3, r3, #5
    c3c4:	4413      	add	r3, r2
    c3c6:	781b      	ldrb	r3, [r3, #0]
    c3c8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    c3ca:	7bfb      	ldrb	r3, [r7, #15]
    c3cc:	f003 0307 	and.w	r3, r3, #7
    c3d0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    c3d2:	7bfb      	ldrb	r3, [r7, #15]
}
    c3d4:	4618      	mov	r0, r3
    c3d6:	3714      	adds	r7, #20
    c3d8:	46bd      	mov	sp, r7
    c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3de:	4770      	bx	lr

0000c3e0 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    c3e0:	b480      	push	{r7}
    c3e2:	b085      	sub	sp, #20
    c3e4:	af00      	add	r7, sp, #0
    c3e6:	6078      	str	r0, [r7, #4]
    c3e8:	460b      	mov	r3, r1
    c3ea:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c3ec:	78fb      	ldrb	r3, [r7, #3]
    c3ee:	687a      	ldr	r2, [r7, #4]
    c3f0:	3308      	adds	r3, #8
    c3f2:	015b      	lsls	r3, r3, #5
    c3f4:	4413      	add	r3, r2
    c3f6:	781b      	ldrb	r3, [r3, #0]
    c3f8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    c3fa:	7bfb      	ldrb	r3, [r7, #15]
    c3fc:	091b      	lsrs	r3, r3, #4
    c3fe:	b2db      	uxtb	r3, r3
    c400:	f003 0307 	and.w	r3, r3, #7
    c404:	73fb      	strb	r3, [r7, #15]
	return tmp;
    c406:	7bfb      	ldrb	r3, [r7, #15]
}
    c408:	4618      	mov	r0, r3
    c40a:	3714      	adds	r7, #20
    c40c:	46bd      	mov	sp, r7
    c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c412:	4770      	bx	lr

0000c414 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    c414:	b480      	push	{r7}
    c416:	b083      	sub	sp, #12
    c418:	af00      	add	r7, sp, #0
    c41a:	6078      	str	r0, [r7, #4]
    c41c:	460b      	mov	r3, r1
    c41e:	70fb      	strb	r3, [r7, #3]
    c420:	4613      	mov	r3, r2
    c422:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    c424:	78fb      	ldrb	r3, [r7, #3]
    c426:	687a      	ldr	r2, [r7, #4]
    c428:	3308      	adds	r3, #8
    c42a:	015b      	lsls	r3, r3, #5
    c42c:	4413      	add	r3, r2
    c42e:	78ba      	ldrb	r2, [r7, #2]
    c430:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    c432:	bf00      	nop
    c434:	370c      	adds	r7, #12
    c436:	46bd      	mov	sp, r7
    c438:	f85d 7b04 	ldr.w	r7, [sp], #4
    c43c:	4770      	bx	lr

0000c43e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    c43e:	b480      	push	{r7}
    c440:	b083      	sub	sp, #12
    c442:	af00      	add	r7, sp, #0
    c444:	6078      	str	r0, [r7, #4]
    c446:	460b      	mov	r3, r1
    c448:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c44a:	78fb      	ldrb	r3, [r7, #3]
    c44c:	687a      	ldr	r2, [r7, #4]
    c44e:	3308      	adds	r3, #8
    c450:	015b      	lsls	r3, r3, #5
    c452:	4413      	add	r3, r2
    c454:	781b      	ldrb	r3, [r3, #0]
    c456:	b2db      	uxtb	r3, r3
}
    c458:	4618      	mov	r0, r3
    c45a:	370c      	adds	r7, #12
    c45c:	46bd      	mov	sp, r7
    c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c462:	4770      	bx	lr

0000c464 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    c464:	b480      	push	{r7}
    c466:	b083      	sub	sp, #12
    c468:	af00      	add	r7, sp, #0
    c46a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    c46c:	687b      	ldr	r3, [r7, #4]
    c46e:	8b9b      	ldrh	r3, [r3, #28]
    c470:	b29b      	uxth	r3, r3
}
    c472:	4618      	mov	r0, r3
    c474:	370c      	adds	r7, #12
    c476:	46bd      	mov	sp, r7
    c478:	f85d 7b04 	ldr.w	r7, [sp], #4
    c47c:	4770      	bx	lr

0000c47e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    c47e:	b480      	push	{r7}
    c480:	b083      	sub	sp, #12
    c482:	af00      	add	r7, sp, #0
    c484:	6078      	str	r0, [r7, #4]
    c486:	460b      	mov	r3, r1
    c488:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c48a:	687b      	ldr	r3, [r7, #4]
    c48c:	887a      	ldrh	r2, [r7, #2]
    c48e:	839a      	strh	r2, [r3, #28]
}
    c490:	bf00      	nop
    c492:	370c      	adds	r7, #12
    c494:	46bd      	mov	sp, r7
    c496:	f85d 7b04 	ldr.w	r7, [sp], #4
    c49a:	4770      	bx	lr

0000c49c <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    c49c:	b480      	push	{r7}
    c49e:	b083      	sub	sp, #12
    c4a0:	af00      	add	r7, sp, #0
    c4a2:	6078      	str	r0, [r7, #4]
    c4a4:	460b      	mov	r3, r1
    c4a6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c4a8:	687b      	ldr	r3, [r7, #4]
    c4aa:	887a      	ldrh	r2, [r7, #2]
    c4ac:	831a      	strh	r2, [r3, #24]
}
    c4ae:	bf00      	nop
    c4b0:	370c      	adds	r7, #12
    c4b2:	46bd      	mov	sp, r7
    c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4b8:	4770      	bx	lr

0000c4ba <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    c4ba:	b480      	push	{r7}
    c4bc:	b083      	sub	sp, #12
    c4be:	af00      	add	r7, sp, #0
    c4c0:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    c4c2:	687b      	ldr	r3, [r7, #4]
    c4c4:	8b1b      	ldrh	r3, [r3, #24]
    c4c6:	b29b      	uxth	r3, r3
}
    c4c8:	4618      	mov	r0, r3
    c4ca:	370c      	adds	r7, #12
    c4cc:	46bd      	mov	sp, r7
    c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4d2:	4770      	bx	lr

0000c4d4 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    c4d4:	b480      	push	{r7}
    c4d6:	b083      	sub	sp, #12
    c4d8:	af00      	add	r7, sp, #0
    c4da:	6078      	str	r0, [r7, #4]
    c4dc:	460b      	mov	r3, r1
    c4de:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c4e0:	687b      	ldr	r3, [r7, #4]
    c4e2:	887a      	ldrh	r2, [r7, #2]
    c4e4:	829a      	strh	r2, [r3, #20]
}
    c4e6:	bf00      	nop
    c4e8:	370c      	adds	r7, #12
    c4ea:	46bd      	mov	sp, r7
    c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4f0:	4770      	bx	lr

0000c4f2 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    c4f2:	b480      	push	{r7}
    c4f4:	b085      	sub	sp, #20
    c4f6:	af00      	add	r7, sp, #0
    c4f8:	6078      	str	r0, [r7, #4]
    c4fa:	460b      	mov	r3, r1
    c4fc:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    c4fe:	687b      	ldr	r3, [r7, #4]
    c500:	789b      	ldrb	r3, [r3, #2]
    c502:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    c504:	7bfa      	ldrb	r2, [r7, #15]
    c506:	78fb      	ldrb	r3, [r7, #3]
    c508:	4013      	ands	r3, r2
    c50a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    c50c:	7bfb      	ldrb	r3, [r7, #15]
}
    c50e:	4618      	mov	r0, r3
    c510:	3714      	adds	r7, #20
    c512:	46bd      	mov	sp, r7
    c514:	f85d 7b04 	ldr.w	r7, [sp], #4
    c518:	4770      	bx	lr
	...

0000c51c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    c51c:	b580      	push	{r7, lr}
    c51e:	b082      	sub	sp, #8
    c520:	af00      	add	r7, sp, #0
    c522:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    c524:	687b      	ldr	r3, [r7, #4]
    c526:	781b      	ldrb	r3, [r3, #0]
    c528:	b2db      	uxtb	r3, r3
    c52a:	f023 0302 	bic.w	r3, r3, #2
    c52e:	b2da      	uxtb	r2, r3
    c530:	687b      	ldr	r3, [r7, #4]
    c532:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    c534:	2103      	movs	r1, #3
    c536:	6878      	ldr	r0, [r7, #4]
    c538:	4b02      	ldr	r3, [pc, #8]	; (c544 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    c53a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    c53c:	bf00      	nop
    c53e:	3708      	adds	r7, #8
    c540:	46bd      	mov	sp, r7
    c542:	bd80      	pop	{r7, pc}
    c544:	0000c1cf 	.word	0x0000c1cf

0000c548 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    c548:	b580      	push	{r7, lr}
    c54a:	b084      	sub	sp, #16
    c54c:	af00      	add	r7, sp, #0
    c54e:	6078      	str	r0, [r7, #4]
    c550:	460b      	mov	r3, r1
    c552:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    c554:	2103      	movs	r1, #3
    c556:	6878      	ldr	r0, [r7, #4]
    c558:	4b06      	ldr	r3, [pc, #24]	; (c574 <hri_usb_get_CTRLA_reg+0x2c>)
    c55a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    c55c:	687b      	ldr	r3, [r7, #4]
    c55e:	781b      	ldrb	r3, [r3, #0]
    c560:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    c562:	7bfa      	ldrb	r2, [r7, #15]
    c564:	78fb      	ldrb	r3, [r7, #3]
    c566:	4013      	ands	r3, r2
    c568:	73fb      	strb	r3, [r7, #15]
	return tmp;
    c56a:	7bfb      	ldrb	r3, [r7, #15]
}
    c56c:	4618      	mov	r0, r3
    c56e:	3710      	adds	r7, #16
    c570:	46bd      	mov	sp, r7
    c572:	bd80      	pop	{r7, pc}
    c574:	0000c1cf 	.word	0x0000c1cf

0000c578 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    c578:	b580      	push	{r7, lr}
    c57a:	b082      	sub	sp, #8
    c57c:	af00      	add	r7, sp, #0
    c57e:	6078      	str	r0, [r7, #4]
    c580:	460b      	mov	r3, r1
    c582:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    c584:	687b      	ldr	r3, [r7, #4]
    c586:	78fa      	ldrb	r2, [r7, #3]
    c588:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    c58a:	2103      	movs	r1, #3
    c58c:	6878      	ldr	r0, [r7, #4]
    c58e:	4b03      	ldr	r3, [pc, #12]	; (c59c <hri_usb_write_CTRLA_reg+0x24>)
    c590:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    c592:	bf00      	nop
    c594:	3708      	adds	r7, #8
    c596:	46bd      	mov	sp, r7
    c598:	bd80      	pop	{r7, pc}
    c59a:	bf00      	nop
    c59c:	0000c1cf 	.word	0x0000c1cf

0000c5a0 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    c5a0:	b580      	push	{r7, lr}
    c5a2:	b082      	sub	sp, #8
    c5a4:	af00      	add	r7, sp, #0
    c5a6:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    c5a8:	2103      	movs	r1, #3
    c5aa:	6878      	ldr	r0, [r7, #4]
    c5ac:	4b04      	ldr	r3, [pc, #16]	; (c5c0 <hri_usb_read_CTRLA_reg+0x20>)
    c5ae:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    c5b0:	687b      	ldr	r3, [r7, #4]
    c5b2:	781b      	ldrb	r3, [r3, #0]
    c5b4:	b2db      	uxtb	r3, r3
}
    c5b6:	4618      	mov	r0, r3
    c5b8:	3708      	adds	r7, #8
    c5ba:	46bd      	mov	sp, r7
    c5bc:	bd80      	pop	{r7, pc}
    c5be:	bf00      	nop
    c5c0:	0000c1cf 	.word	0x0000c1cf

0000c5c4 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    c5c4:	b480      	push	{r7}
    c5c6:	b083      	sub	sp, #12
    c5c8:	af00      	add	r7, sp, #0
    c5ca:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    c5cc:	687b      	ldr	r3, [r7, #4]
    c5ce:	891b      	ldrh	r3, [r3, #8]
    c5d0:	b29b      	uxth	r3, r3
    c5d2:	f023 0301 	bic.w	r3, r3, #1
    c5d6:	b29a      	uxth	r2, r3
    c5d8:	687b      	ldr	r3, [r7, #4]
    c5da:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    c5dc:	bf00      	nop
    c5de:	370c      	adds	r7, #12
    c5e0:	46bd      	mov	sp, r7
    c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5e6:	4770      	bx	lr

0000c5e8 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    c5e8:	b480      	push	{r7}
    c5ea:	b083      	sub	sp, #12
    c5ec:	af00      	add	r7, sp, #0
    c5ee:	6078      	str	r0, [r7, #4]
    c5f0:	460b      	mov	r3, r1
    c5f2:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    c5f4:	687b      	ldr	r3, [r7, #4]
    c5f6:	887a      	ldrh	r2, [r7, #2]
    c5f8:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    c5fa:	bf00      	nop
    c5fc:	370c      	adds	r7, #12
    c5fe:	46bd      	mov	sp, r7
    c600:	f85d 7b04 	ldr.w	r7, [sp], #4
    c604:	4770      	bx	lr

0000c606 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    c606:	b480      	push	{r7}
    c608:	b083      	sub	sp, #12
    c60a:	af00      	add	r7, sp, #0
    c60c:	6078      	str	r0, [r7, #4]
    c60e:	460b      	mov	r3, r1
    c610:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    c612:	687b      	ldr	r3, [r7, #4]
    c614:	78fa      	ldrb	r2, [r7, #3]
    c616:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    c618:	bf00      	nop
    c61a:	370c      	adds	r7, #12
    c61c:	46bd      	mov	sp, r7
    c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c622:	4770      	bx	lr

0000c624 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    c624:	b480      	push	{r7}
    c626:	b083      	sub	sp, #12
    c628:	af00      	add	r7, sp, #0
    c62a:	6078      	str	r0, [r7, #4]
    c62c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    c62e:	687b      	ldr	r3, [r7, #4]
    c630:	683a      	ldr	r2, [r7, #0]
    c632:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    c634:	bf00      	nop
    c636:	370c      	adds	r7, #12
    c638:	46bd      	mov	sp, r7
    c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c63e:	4770      	bx	lr

0000c640 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    c640:	b480      	push	{r7}
    c642:	b083      	sub	sp, #12
    c644:	af00      	add	r7, sp, #0
    c646:	6078      	str	r0, [r7, #4]
    c648:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    c64a:	2300      	movs	r3, #0
}
    c64c:	4618      	mov	r0, r3
    c64e:	370c      	adds	r7, #12
    c650:	46bd      	mov	sp, r7
    c652:	f85d 7b04 	ldr.w	r7, [sp], #4
    c656:	4770      	bx	lr

0000c658 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    c658:	b480      	push	{r7}
    c65a:	b085      	sub	sp, #20
    c65c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    c65e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c662:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    c664:	4b28      	ldr	r3, [pc, #160]	; (c708 <_usb_load_calib+0xb0>)
    c666:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    c668:	f003 031f 	and.w	r3, r3, #31
    c66c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    c66e:	4b26      	ldr	r3, [pc, #152]	; (c708 <_usb_load_calib+0xb0>)
    c670:	681b      	ldr	r3, [r3, #0]
    c672:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    c674:	f003 031f 	and.w	r3, r3, #31
    c678:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    c67a:	4b23      	ldr	r3, [pc, #140]	; (c708 <_usb_load_calib+0xb0>)
    c67c:	681b      	ldr	r3, [r3, #0]
    c67e:	0a9b      	lsrs	r3, r3, #10
    c680:	f003 0307 	and.w	r3, r3, #7
    c684:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    c686:	68fb      	ldr	r3, [r7, #12]
    c688:	2b00      	cmp	r3, #0
    c68a:	d002      	beq.n	c692 <_usb_load_calib+0x3a>
    c68c:	68fb      	ldr	r3, [r7, #12]
    c68e:	2b1f      	cmp	r3, #31
    c690:	d101      	bne.n	c696 <_usb_load_calib+0x3e>
		pad_transn = 9;
    c692:	2309      	movs	r3, #9
    c694:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    c696:	68bb      	ldr	r3, [r7, #8]
    c698:	2b00      	cmp	r3, #0
    c69a:	d002      	beq.n	c6a2 <_usb_load_calib+0x4a>
    c69c:	68bb      	ldr	r3, [r7, #8]
    c69e:	2b1f      	cmp	r3, #31
    c6a0:	d101      	bne.n	c6a6 <_usb_load_calib+0x4e>
		pad_transp = 25;
    c6a2:	2319      	movs	r3, #25
    c6a4:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    c6a6:	687b      	ldr	r3, [r7, #4]
    c6a8:	2b00      	cmp	r3, #0
    c6aa:	d002      	beq.n	c6b2 <_usb_load_calib+0x5a>
    c6ac:	687b      	ldr	r3, [r7, #4]
    c6ae:	2b07      	cmp	r3, #7
    c6b0:	d101      	bne.n	c6b6 <_usb_load_calib+0x5e>
		pad_trim = 6;
    c6b2:	2306      	movs	r3, #6
    c6b4:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    c6b6:	68fb      	ldr	r3, [r7, #12]
    c6b8:	b29b      	uxth	r3, r3
    c6ba:	019b      	lsls	r3, r3, #6
    c6bc:	b29b      	uxth	r3, r3
    c6be:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    c6c2:	b29a      	uxth	r2, r3
    c6c4:	68bb      	ldr	r3, [r7, #8]
    c6c6:	b29b      	uxth	r3, r3
    c6c8:	f003 031f 	and.w	r3, r3, #31
    c6cc:	b29b      	uxth	r3, r3
    c6ce:	4313      	orrs	r3, r2
    c6d0:	b29a      	uxth	r2, r3
    c6d2:	687b      	ldr	r3, [r7, #4]
    c6d4:	b29b      	uxth	r3, r3
    c6d6:	031b      	lsls	r3, r3, #12
    c6d8:	b29b      	uxth	r3, r3
    c6da:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    c6de:	b29b      	uxth	r3, r3
    c6e0:	4313      	orrs	r3, r2
    c6e2:	b29a      	uxth	r2, r3
    c6e4:	683b      	ldr	r3, [r7, #0]
    c6e6:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    c6e8:	683a      	ldr	r2, [r7, #0]
    c6ea:	78d3      	ldrb	r3, [r2, #3]
    c6ec:	f043 0303 	orr.w	r3, r3, #3
    c6f0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    c6f2:	683a      	ldr	r2, [r7, #0]
    c6f4:	78d3      	ldrb	r3, [r2, #3]
    c6f6:	f043 030c 	orr.w	r3, r3, #12
    c6fa:	70d3      	strb	r3, [r2, #3]
}
    c6fc:	bf00      	nop
    c6fe:	3714      	adds	r7, #20
    c700:	46bd      	mov	sp, r7
    c702:	f85d 7b04 	ldr.w	r7, [sp], #4
    c706:	4770      	bx	lr
    c708:	00800084 	.word	0x00800084

0000c70c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    c70c:	b580      	push	{r7, lr}
    c70e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    c710:	bf00      	nop
    c712:	2203      	movs	r2, #3
    c714:	2100      	movs	r1, #0
    c716:	4804      	ldr	r0, [pc, #16]	; (c728 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    c718:	4b04      	ldr	r3, [pc, #16]	; (c72c <_usb_d_dev_wait_dpll_rdy+0x20>)
    c71a:	4798      	blx	r3
    c71c:	4603      	mov	r3, r0
    c71e:	2b03      	cmp	r3, #3
    c720:	d1f7      	bne.n	c712 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    c722:	bf00      	nop
    c724:	bd80      	pop	{r7, pc}
    c726:	bf00      	nop
    c728:	40001000 	.word	0x40001000
    c72c:	0000c141 	.word	0x0000c141

0000c730 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    c730:	b580      	push	{r7, lr}
    c732:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    c734:	480e      	ldr	r0, [pc, #56]	; (c770 <_usb_d_dev_wait_dfll_rdy+0x40>)
    c736:	4b0f      	ldr	r3, [pc, #60]	; (c774 <_usb_d_dev_wait_dfll_rdy+0x44>)
    c738:	4798      	blx	r3
    c73a:	4603      	mov	r3, r0
    c73c:	2b00      	cmp	r3, #0
    c73e:	d00a      	beq.n	c756 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    c740:	bf00      	nop
    c742:	f44f 6110 	mov.w	r1, #2304	; 0x900
    c746:	480a      	ldr	r0, [pc, #40]	; (c770 <_usb_d_dev_wait_dfll_rdy+0x40>)
    c748:	4b0b      	ldr	r3, [pc, #44]	; (c778 <_usb_d_dev_wait_dfll_rdy+0x48>)
    c74a:	4798      	blx	r3
    c74c:	4603      	mov	r3, r0
    c74e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    c752:	d1f6      	bne.n	c742 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    c754:	e009      	b.n	c76a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    c756:	bf00      	nop
    c758:	f44f 7180 	mov.w	r1, #256	; 0x100
    c75c:	4804      	ldr	r0, [pc, #16]	; (c770 <_usb_d_dev_wait_dfll_rdy+0x40>)
    c75e:	4b06      	ldr	r3, [pc, #24]	; (c778 <_usb_d_dev_wait_dfll_rdy+0x48>)
    c760:	4798      	blx	r3
    c762:	4603      	mov	r3, r0
    c764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c768:	d1f6      	bne.n	c758 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    c76a:	bf00      	nop
    c76c:	bd80      	pop	{r7, pc}
    c76e:	bf00      	nop
    c770:	40001000 	.word	0x40001000
    c774:	0000c19f 	.word	0x0000c19f
    c778:	0000c179 	.word	0x0000c179

0000c77c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    c77c:	b580      	push	{r7, lr}
    c77e:	b082      	sub	sp, #8
    c780:	af00      	add	r7, sp, #0
    c782:	4603      	mov	r3, r0
    c784:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    c786:	79fb      	ldrb	r3, [r7, #7]
    c788:	2b00      	cmp	r3, #0
    c78a:	d102      	bne.n	c792 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    c78c:	4b05      	ldr	r3, [pc, #20]	; (c7a4 <_usb_d_dev_wait_clk_rdy+0x28>)
    c78e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    c790:	e004      	b.n	c79c <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    c792:	79fb      	ldrb	r3, [r7, #7]
    c794:	2b01      	cmp	r3, #1
    c796:	d101      	bne.n	c79c <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    c798:	4b03      	ldr	r3, [pc, #12]	; (c7a8 <_usb_d_dev_wait_clk_rdy+0x2c>)
    c79a:	4798      	blx	r3
}
    c79c:	bf00      	nop
    c79e:	3708      	adds	r7, #8
    c7a0:	46bd      	mov	sp, r7
    c7a2:	bd80      	pop	{r7, pc}
    c7a4:	0000c731 	.word	0x0000c731
    c7a8:	0000c70d 	.word	0x0000c70d

0000c7ac <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    c7ac:	b580      	push	{r7, lr}
    c7ae:	b082      	sub	sp, #8
    c7b0:	af00      	add	r7, sp, #0
    c7b2:	4603      	mov	r3, r0
    c7b4:	6039      	str	r1, [r7, #0]
    c7b6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    c7b8:	683b      	ldr	r3, [r7, #0]
    c7ba:	b2da      	uxtb	r2, r3
    c7bc:	79fb      	ldrb	r3, [r7, #7]
    c7be:	4619      	mov	r1, r3
    c7c0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c7c4:	4b02      	ldr	r3, [pc, #8]	; (c7d0 <_usbd_ep_int_ack+0x24>)
    c7c6:	4798      	blx	r3
}
    c7c8:	bf00      	nop
    c7ca:	3708      	adds	r7, #8
    c7cc:	46bd      	mov	sp, r7
    c7ce:	bd80      	pop	{r7, pc}
    c7d0:	0000c285 	.word	0x0000c285

0000c7d4 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    c7d4:	b580      	push	{r7, lr}
    c7d6:	b082      	sub	sp, #8
    c7d8:	af00      	add	r7, sp, #0
    c7da:	4603      	mov	r3, r0
    c7dc:	6039      	str	r1, [r7, #0]
    c7de:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    c7e0:	683b      	ldr	r3, [r7, #0]
    c7e2:	b2da      	uxtb	r2, r3
    c7e4:	79fb      	ldrb	r3, [r7, #7]
    c7e6:	4619      	mov	r1, r3
    c7e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c7ec:	4b02      	ldr	r3, [pc, #8]	; (c7f8 <_usbd_ep_int_en+0x24>)
    c7ee:	4798      	blx	r3
}
    c7f0:	bf00      	nop
    c7f2:	3708      	adds	r7, #8
    c7f4:	46bd      	mov	sp, r7
    c7f6:	bd80      	pop	{r7, pc}
    c7f8:	0000c359 	.word	0x0000c359

0000c7fc <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    c7fc:	b580      	push	{r7, lr}
    c7fe:	b082      	sub	sp, #8
    c800:	af00      	add	r7, sp, #0
    c802:	4603      	mov	r3, r0
    c804:	6039      	str	r1, [r7, #0]
    c806:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    c808:	683b      	ldr	r3, [r7, #0]
    c80a:	b2da      	uxtb	r2, r3
    c80c:	79fb      	ldrb	r3, [r7, #7]
    c80e:	4619      	mov	r1, r3
    c810:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c814:	4b02      	ldr	r3, [pc, #8]	; (c820 <_usbd_ep_int_dis+0x24>)
    c816:	4798      	blx	r3
}
    c818:	bf00      	nop
    c81a:	3708      	adds	r7, #8
    c81c:	46bd      	mov	sp, r7
    c81e:	bd80      	pop	{r7, pc}
    c820:	0000c385 	.word	0x0000c385

0000c824 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    c824:	b580      	push	{r7, lr}
    c826:	b082      	sub	sp, #8
    c828:	af00      	add	r7, sp, #0
    c82a:	4603      	mov	r3, r0
    c82c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    c82e:	79fb      	ldrb	r3, [r7, #7]
    c830:	4619      	mov	r1, r3
    c832:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c836:	4b06      	ldr	r3, [pc, #24]	; (c850 <_usbd_ep_is_ctrl+0x2c>)
    c838:	4798      	blx	r3
    c83a:	4603      	mov	r3, r0
    c83c:	2b11      	cmp	r3, #17
    c83e:	bf0c      	ite	eq
    c840:	2301      	moveq	r3, #1
    c842:	2300      	movne	r3, #0
    c844:	b2db      	uxtb	r3, r3
}
    c846:	4618      	mov	r0, r3
    c848:	3708      	adds	r7, #8
    c84a:	46bd      	mov	sp, r7
    c84c:	bd80      	pop	{r7, pc}
    c84e:	bf00      	nop
    c850:	0000c43f 	.word	0x0000c43f

0000c854 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    c854:	b580      	push	{r7, lr}
    c856:	b082      	sub	sp, #8
    c858:	af00      	add	r7, sp, #0
    c85a:	4603      	mov	r3, r0
    c85c:	71fb      	strb	r3, [r7, #7]
    c85e:	460b      	mov	r3, r1
    c860:	71bb      	strb	r3, [r7, #6]
    c862:	4613      	mov	r3, r2
    c864:	717b      	strb	r3, [r7, #5]
	if (st) {
    c866:	797b      	ldrb	r3, [r7, #5]
    c868:	2b00      	cmp	r3, #0
    c86a:	d00b      	beq.n	c884 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    c86c:	79bb      	ldrb	r3, [r7, #6]
    c86e:	2210      	movs	r2, #16
    c870:	fa02 f303 	lsl.w	r3, r2, r3
    c874:	b2da      	uxtb	r2, r3
    c876:	79fb      	ldrb	r3, [r7, #7]
    c878:	4619      	mov	r1, r3
    c87a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c87e:	4b09      	ldr	r3, [pc, #36]	; (c8a4 <_usbd_ep_set_stall+0x50>)
    c880:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    c882:	e00a      	b.n	c89a <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    c884:	79bb      	ldrb	r3, [r7, #6]
    c886:	2210      	movs	r2, #16
    c888:	fa02 f303 	lsl.w	r3, r2, r3
    c88c:	b2da      	uxtb	r2, r3
    c88e:	79fb      	ldrb	r3, [r7, #7]
    c890:	4619      	mov	r1, r3
    c892:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c896:	4b04      	ldr	r3, [pc, #16]	; (c8a8 <_usbd_ep_set_stall+0x54>)
    c898:	4798      	blx	r3
}
    c89a:	bf00      	nop
    c89c:	3708      	adds	r7, #8
    c89e:	46bd      	mov	sp, r7
    c8a0:	bd80      	pop	{r7, pc}
    c8a2:	bf00      	nop
    c8a4:	0000c2b1 	.word	0x0000c2b1
    c8a8:	0000c305 	.word	0x0000c305

0000c8ac <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    c8ac:	b580      	push	{r7, lr}
    c8ae:	b084      	sub	sp, #16
    c8b0:	af00      	add	r7, sp, #0
    c8b2:	4603      	mov	r3, r0
    c8b4:	460a      	mov	r2, r1
    c8b6:	71fb      	strb	r3, [r7, #7]
    c8b8:	4613      	mov	r3, r2
    c8ba:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    c8bc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c8c0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    c8c2:	79fb      	ldrb	r3, [r7, #7]
    c8c4:	4619      	mov	r1, r3
    c8c6:	68f8      	ldr	r0, [r7, #12]
    c8c8:	4b08      	ldr	r3, [pc, #32]	; (c8ec <_usbd_ep_is_stalled+0x40>)
    c8ca:	4798      	blx	r3
    c8cc:	4603      	mov	r3, r0
    c8ce:	4619      	mov	r1, r3
    c8d0:	79bb      	ldrb	r3, [r7, #6]
    c8d2:	2210      	movs	r2, #16
    c8d4:	fa02 f303 	lsl.w	r3, r2, r3
    c8d8:	400b      	ands	r3, r1
    c8da:	2b00      	cmp	r3, #0
    c8dc:	bf14      	ite	ne
    c8de:	2301      	movne	r3, #1
    c8e0:	2300      	moveq	r3, #0
    c8e2:	b2db      	uxtb	r3, r3
}
    c8e4:	4618      	mov	r0, r3
    c8e6:	3710      	adds	r7, #16
    c8e8:	46bd      	mov	sp, r7
    c8ea:	bd80      	pop	{r7, pc}
    c8ec:	0000c2dd 	.word	0x0000c2dd

0000c8f0 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    c8f0:	b580      	push	{r7, lr}
    c8f2:	b084      	sub	sp, #16
    c8f4:	af00      	add	r7, sp, #0
    c8f6:	4603      	mov	r3, r0
    c8f8:	460a      	mov	r2, r1
    c8fa:	71fb      	strb	r3, [r7, #7]
    c8fc:	4613      	mov	r3, r2
    c8fe:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    c900:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c904:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    c906:	79fb      	ldrb	r3, [r7, #7]
    c908:	4619      	mov	r1, r3
    c90a:	68f8      	ldr	r0, [r7, #12]
    c90c:	4b08      	ldr	r3, [pc, #32]	; (c930 <_usbd_ep_is_stall_sent+0x40>)
    c90e:	4798      	blx	r3
    c910:	4603      	mov	r3, r0
    c912:	4619      	mov	r1, r3
    c914:	79bb      	ldrb	r3, [r7, #6]
    c916:	2220      	movs	r2, #32
    c918:	fa02 f303 	lsl.w	r3, r2, r3
    c91c:	400b      	ands	r3, r1
    c91e:	2b00      	cmp	r3, #0
    c920:	bf14      	ite	ne
    c922:	2301      	movne	r3, #1
    c924:	2300      	moveq	r3, #0
    c926:	b2db      	uxtb	r3, r3
}
    c928:	4618      	mov	r0, r3
    c92a:	3710      	adds	r7, #16
    c92c:	46bd      	mov	sp, r7
    c92e:	bd80      	pop	{r7, pc}
    c930:	0000c25d 	.word	0x0000c25d

0000c934 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    c934:	b580      	push	{r7, lr}
    c936:	b082      	sub	sp, #8
    c938:	af00      	add	r7, sp, #0
    c93a:	4603      	mov	r3, r0
    c93c:	460a      	mov	r2, r1
    c93e:	71fb      	strb	r3, [r7, #7]
    c940:	4613      	mov	r3, r2
    c942:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    c944:	79bb      	ldrb	r3, [r7, #6]
    c946:	2220      	movs	r2, #32
    c948:	409a      	lsls	r2, r3
    c94a:	79fb      	ldrb	r3, [r7, #7]
    c94c:	4611      	mov	r1, r2
    c94e:	4618      	mov	r0, r3
    c950:	4b02      	ldr	r3, [pc, #8]	; (c95c <_usbd_ep_ack_stall+0x28>)
    c952:	4798      	blx	r3
}
    c954:	bf00      	nop
    c956:	3708      	adds	r7, #8
    c958:	46bd      	mov	sp, r7
    c95a:	bd80      	pop	{r7, pc}
    c95c:	0000c7ad 	.word	0x0000c7ad

0000c960 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    c960:	b580      	push	{r7, lr}
    c962:	b082      	sub	sp, #8
    c964:	af00      	add	r7, sp, #0
    c966:	4603      	mov	r3, r0
    c968:	71fb      	strb	r3, [r7, #7]
    c96a:	460b      	mov	r3, r1
    c96c:	71bb      	strb	r3, [r7, #6]
    c96e:	4613      	mov	r3, r2
    c970:	717b      	strb	r3, [r7, #5]
	if (en) {
    c972:	797b      	ldrb	r3, [r7, #5]
    c974:	2b00      	cmp	r3, #0
    c976:	d008      	beq.n	c98a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    c978:	79bb      	ldrb	r3, [r7, #6]
    c97a:	2220      	movs	r2, #32
    c97c:	409a      	lsls	r2, r3
    c97e:	79fb      	ldrb	r3, [r7, #7]
    c980:	4611      	mov	r1, r2
    c982:	4618      	mov	r0, r3
    c984:	4b07      	ldr	r3, [pc, #28]	; (c9a4 <_usbd_ep_int_stall_en+0x44>)
    c986:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    c988:	e007      	b.n	c99a <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    c98a:	79bb      	ldrb	r3, [r7, #6]
    c98c:	2220      	movs	r2, #32
    c98e:	409a      	lsls	r2, r3
    c990:	79fb      	ldrb	r3, [r7, #7]
    c992:	4611      	mov	r1, r2
    c994:	4618      	mov	r0, r3
    c996:	4b04      	ldr	r3, [pc, #16]	; (c9a8 <_usbd_ep_int_stall_en+0x48>)
    c998:	4798      	blx	r3
}
    c99a:	bf00      	nop
    c99c:	3708      	adds	r7, #8
    c99e:	46bd      	mov	sp, r7
    c9a0:	bd80      	pop	{r7, pc}
    c9a2:	bf00      	nop
    c9a4:	0000c7d5 	.word	0x0000c7d5
    c9a8:	0000c7fd 	.word	0x0000c7fd

0000c9ac <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    c9ac:	b580      	push	{r7, lr}
    c9ae:	b082      	sub	sp, #8
    c9b0:	af00      	add	r7, sp, #0
    c9b2:	4603      	mov	r3, r0
    c9b4:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    c9b6:	79fb      	ldrb	r3, [r7, #7]
    c9b8:	4619      	mov	r1, r3
    c9ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c9be:	4b03      	ldr	r3, [pc, #12]	; (c9cc <_usbd_ep_stop_setup+0x20>)
    c9c0:	4798      	blx	r3
}
    c9c2:	bf00      	nop
    c9c4:	3708      	adds	r7, #8
    c9c6:	46bd      	mov	sp, r7
    c9c8:	bd80      	pop	{r7, pc}
    c9ca:	bf00      	nop
    c9cc:	0000c331 	.word	0x0000c331

0000c9d0 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    c9d0:	b580      	push	{r7, lr}
    c9d2:	b082      	sub	sp, #8
    c9d4:	af00      	add	r7, sp, #0
    c9d6:	4603      	mov	r3, r0
    c9d8:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    c9da:	79fb      	ldrb	r3, [r7, #7]
    c9dc:	2210      	movs	r2, #16
    c9de:	4619      	mov	r1, r3
    c9e0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c9e4:	4b05      	ldr	r3, [pc, #20]	; (c9fc <_usbd_ep_is_setup+0x2c>)
    c9e6:	4798      	blx	r3
    c9e8:	4603      	mov	r3, r0
    c9ea:	2b00      	cmp	r3, #0
    c9ec:	bf14      	ite	ne
    c9ee:	2301      	movne	r3, #1
    c9f0:	2300      	moveq	r3, #0
    c9f2:	b2db      	uxtb	r3, r3
}
    c9f4:	4618      	mov	r0, r3
    c9f6:	3708      	adds	r7, #8
    c9f8:	46bd      	mov	sp, r7
    c9fa:	bd80      	pop	{r7, pc}
    c9fc:	0000c227 	.word	0x0000c227

0000ca00 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    ca00:	b580      	push	{r7, lr}
    ca02:	b082      	sub	sp, #8
    ca04:	af00      	add	r7, sp, #0
    ca06:	4603      	mov	r3, r0
    ca08:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    ca0a:	79fb      	ldrb	r3, [r7, #7]
    ca0c:	2110      	movs	r1, #16
    ca0e:	4618      	mov	r0, r3
    ca10:	4b02      	ldr	r3, [pc, #8]	; (ca1c <_usbd_ep_ack_setup+0x1c>)
    ca12:	4798      	blx	r3
}
    ca14:	bf00      	nop
    ca16:	3708      	adds	r7, #8
    ca18:	46bd      	mov	sp, r7
    ca1a:	bd80      	pop	{r7, pc}
    ca1c:	0000c7ad 	.word	0x0000c7ad

0000ca20 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    ca20:	b580      	push	{r7, lr}
    ca22:	b082      	sub	sp, #8
    ca24:	af00      	add	r7, sp, #0
    ca26:	4603      	mov	r3, r0
    ca28:	71fb      	strb	r3, [r7, #7]
    ca2a:	460b      	mov	r3, r1
    ca2c:	71bb      	strb	r3, [r7, #6]
    ca2e:	4613      	mov	r3, r2
    ca30:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    ca32:	797b      	ldrb	r3, [r7, #5]
    ca34:	2b00      	cmp	r3, #0
    ca36:	d00b      	beq.n	ca50 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    ca38:	79bb      	ldrb	r3, [r7, #6]
    ca3a:	2201      	movs	r2, #1
    ca3c:	fa02 f303 	lsl.w	r3, r2, r3
    ca40:	b2da      	uxtb	r2, r3
    ca42:	79fb      	ldrb	r3, [r7, #7]
    ca44:	4619      	mov	r1, r3
    ca46:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ca4a:	4b09      	ldr	r3, [pc, #36]	; (ca70 <_usbd_ep_set_toggle+0x50>)
    ca4c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    ca4e:	e00a      	b.n	ca66 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    ca50:	79bb      	ldrb	r3, [r7, #6]
    ca52:	2201      	movs	r2, #1
    ca54:	fa02 f303 	lsl.w	r3, r2, r3
    ca58:	b2da      	uxtb	r2, r3
    ca5a:	79fb      	ldrb	r3, [r7, #7]
    ca5c:	4619      	mov	r1, r3
    ca5e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ca62:	4b04      	ldr	r3, [pc, #16]	; (ca74 <_usbd_ep_set_toggle+0x54>)
    ca64:	4798      	blx	r3
}
    ca66:	bf00      	nop
    ca68:	3708      	adds	r7, #8
    ca6a:	46bd      	mov	sp, r7
    ca6c:	bd80      	pop	{r7, pc}
    ca6e:	bf00      	nop
    ca70:	0000c2b1 	.word	0x0000c2b1
    ca74:	0000c305 	.word	0x0000c305

0000ca78 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    ca78:	b580      	push	{r7, lr}
    ca7a:	b082      	sub	sp, #8
    ca7c:	af00      	add	r7, sp, #0
    ca7e:	4603      	mov	r3, r0
    ca80:	460a      	mov	r2, r1
    ca82:	71fb      	strb	r3, [r7, #7]
    ca84:	4613      	mov	r3, r2
    ca86:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    ca88:	79bb      	ldrb	r3, [r7, #6]
    ca8a:	2201      	movs	r2, #1
    ca8c:	409a      	lsls	r2, r3
    ca8e:	79fb      	ldrb	r3, [r7, #7]
    ca90:	4611      	mov	r1, r2
    ca92:	4618      	mov	r0, r3
    ca94:	4b02      	ldr	r3, [pc, #8]	; (caa0 <_usbd_ep_ack_io_cpt+0x28>)
    ca96:	4798      	blx	r3
}
    ca98:	bf00      	nop
    ca9a:	3708      	adds	r7, #8
    ca9c:	46bd      	mov	sp, r7
    ca9e:	bd80      	pop	{r7, pc}
    caa0:	0000c7ad 	.word	0x0000c7ad

0000caa4 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    caa4:	b480      	push	{r7}
    caa6:	b085      	sub	sp, #20
    caa8:	af00      	add	r7, sp, #0
    caaa:	4603      	mov	r3, r0
    caac:	603a      	str	r2, [r7, #0]
    caae:	71fb      	strb	r3, [r7, #7]
    cab0:	460b      	mov	r3, r1
    cab2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    cab4:	79fa      	ldrb	r2, [r7, #7]
    cab6:	79bb      	ldrb	r3, [r7, #6]
    cab8:	0052      	lsls	r2, r2, #1
    caba:	4413      	add	r3, r2
    cabc:	011b      	lsls	r3, r3, #4
    cabe:	4a06      	ldr	r2, [pc, #24]	; (cad8 <_usbd_ep_set_buf+0x34>)
    cac0:	4413      	add	r3, r2
    cac2:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    cac4:	68fb      	ldr	r3, [r7, #12]
    cac6:	683a      	ldr	r2, [r7, #0]
    cac8:	601a      	str	r2, [r3, #0]
}
    caca:	bf00      	nop
    cacc:	3714      	adds	r7, #20
    cace:	46bd      	mov	sp, r7
    cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cad4:	4770      	bx	lr
    cad6:	bf00      	nop
    cad8:	200038d4 	.word	0x200038d4

0000cadc <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    cadc:	b480      	push	{r7}
    cade:	b085      	sub	sp, #20
    cae0:	af00      	add	r7, sp, #0
    cae2:	4603      	mov	r3, r0
    cae4:	71fb      	strb	r3, [r7, #7]
    cae6:	460b      	mov	r3, r1
    cae8:	71bb      	strb	r3, [r7, #6]
    caea:	4613      	mov	r3, r2
    caec:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    caee:	79fa      	ldrb	r2, [r7, #7]
    caf0:	79bb      	ldrb	r3, [r7, #6]
    caf2:	0052      	lsls	r2, r2, #1
    caf4:	4413      	add	r3, r2
    caf6:	011b      	lsls	r3, r3, #4
    caf8:	4a08      	ldr	r2, [pc, #32]	; (cb1c <_usbd_ep_set_in_count+0x40>)
    cafa:	4413      	add	r3, r2
    cafc:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    cafe:	88bb      	ldrh	r3, [r7, #4]
    cb00:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cb04:	b299      	uxth	r1, r3
    cb06:	68fa      	ldr	r2, [r7, #12]
    cb08:	6853      	ldr	r3, [r2, #4]
    cb0a:	f361 339b 	bfi	r3, r1, #14, #14
    cb0e:	6053      	str	r3, [r2, #4]
}
    cb10:	bf00      	nop
    cb12:	3714      	adds	r7, #20
    cb14:	46bd      	mov	sp, r7
    cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb1a:	4770      	bx	lr
    cb1c:	200038d4 	.word	0x200038d4

0000cb20 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    cb20:	b480      	push	{r7}
    cb22:	b085      	sub	sp, #20
    cb24:	af00      	add	r7, sp, #0
    cb26:	4603      	mov	r3, r0
    cb28:	71fb      	strb	r3, [r7, #7]
    cb2a:	460b      	mov	r3, r1
    cb2c:	71bb      	strb	r3, [r7, #6]
    cb2e:	4613      	mov	r3, r2
    cb30:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    cb32:	79fa      	ldrb	r2, [r7, #7]
    cb34:	79bb      	ldrb	r3, [r7, #6]
    cb36:	0052      	lsls	r2, r2, #1
    cb38:	4413      	add	r3, r2
    cb3a:	011b      	lsls	r3, r3, #4
    cb3c:	4a08      	ldr	r2, [pc, #32]	; (cb60 <_usbd_ep_set_in_size+0x40>)
    cb3e:	4413      	add	r3, r2
    cb40:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    cb42:	88bb      	ldrh	r3, [r7, #4]
    cb44:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cb48:	b299      	uxth	r1, r3
    cb4a:	68fa      	ldr	r2, [r7, #12]
    cb4c:	6853      	ldr	r3, [r2, #4]
    cb4e:	f361 030d 	bfi	r3, r1, #0, #14
    cb52:	6053      	str	r3, [r2, #4]
}
    cb54:	bf00      	nop
    cb56:	3714      	adds	r7, #20
    cb58:	46bd      	mov	sp, r7
    cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb5e:	4770      	bx	lr
    cb60:	200038d4 	.word	0x200038d4

0000cb64 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    cb64:	b480      	push	{r7}
    cb66:	b085      	sub	sp, #20
    cb68:	af00      	add	r7, sp, #0
    cb6a:	4603      	mov	r3, r0
    cb6c:	71fb      	strb	r3, [r7, #7]
    cb6e:	460b      	mov	r3, r1
    cb70:	71bb      	strb	r3, [r7, #6]
    cb72:	4613      	mov	r3, r2
    cb74:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    cb76:	79fa      	ldrb	r2, [r7, #7]
    cb78:	79bb      	ldrb	r3, [r7, #6]
    cb7a:	0052      	lsls	r2, r2, #1
    cb7c:	4413      	add	r3, r2
    cb7e:	011b      	lsls	r3, r3, #4
    cb80:	4a08      	ldr	r2, [pc, #32]	; (cba4 <_usbd_ep_set_out_count+0x40>)
    cb82:	4413      	add	r3, r2
    cb84:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    cb86:	88bb      	ldrh	r3, [r7, #4]
    cb88:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cb8c:	b299      	uxth	r1, r3
    cb8e:	68fa      	ldr	r2, [r7, #12]
    cb90:	6853      	ldr	r3, [r2, #4]
    cb92:	f361 030d 	bfi	r3, r1, #0, #14
    cb96:	6053      	str	r3, [r2, #4]
}
    cb98:	bf00      	nop
    cb9a:	3714      	adds	r7, #20
    cb9c:	46bd      	mov	sp, r7
    cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cba2:	4770      	bx	lr
    cba4:	200038d4 	.word	0x200038d4

0000cba8 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    cba8:	b480      	push	{r7}
    cbaa:	b085      	sub	sp, #20
    cbac:	af00      	add	r7, sp, #0
    cbae:	4603      	mov	r3, r0
    cbb0:	71fb      	strb	r3, [r7, #7]
    cbb2:	460b      	mov	r3, r1
    cbb4:	71bb      	strb	r3, [r7, #6]
    cbb6:	4613      	mov	r3, r2
    cbb8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    cbba:	79fa      	ldrb	r2, [r7, #7]
    cbbc:	79bb      	ldrb	r3, [r7, #6]
    cbbe:	0052      	lsls	r2, r2, #1
    cbc0:	4413      	add	r3, r2
    cbc2:	011b      	lsls	r3, r3, #4
    cbc4:	4a08      	ldr	r2, [pc, #32]	; (cbe8 <_usbd_ep_set_out_size+0x40>)
    cbc6:	4413      	add	r3, r2
    cbc8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    cbca:	88bb      	ldrh	r3, [r7, #4]
    cbcc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cbd0:	b299      	uxth	r1, r3
    cbd2:	68fa      	ldr	r2, [r7, #12]
    cbd4:	6853      	ldr	r3, [r2, #4]
    cbd6:	f361 339b 	bfi	r3, r1, #14, #14
    cbda:	6053      	str	r3, [r2, #4]
}
    cbdc:	bf00      	nop
    cbde:	3714      	adds	r7, #20
    cbe0:	46bd      	mov	sp, r7
    cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbe6:	4770      	bx	lr
    cbe8:	200038d4 	.word	0x200038d4

0000cbec <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    cbec:	b580      	push	{r7, lr}
    cbee:	b084      	sub	sp, #16
    cbf0:	af00      	add	r7, sp, #0
    cbf2:	60ba      	str	r2, [r7, #8]
    cbf4:	607b      	str	r3, [r7, #4]
    cbf6:	4603      	mov	r3, r0
    cbf8:	73fb      	strb	r3, [r7, #15]
    cbfa:	460b      	mov	r3, r1
    cbfc:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    cbfe:	68bb      	ldr	r3, [r7, #8]
    cc00:	b29a      	uxth	r2, r3
    cc02:	7bb9      	ldrb	r1, [r7, #14]
    cc04:	7bfb      	ldrb	r3, [r7, #15]
    cc06:	4618      	mov	r0, r3
    cc08:	4b06      	ldr	r3, [pc, #24]	; (cc24 <_usbd_ep_set_in_trans+0x38>)
    cc0a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    cc0c:	687b      	ldr	r3, [r7, #4]
    cc0e:	b29a      	uxth	r2, r3
    cc10:	7bb9      	ldrb	r1, [r7, #14]
    cc12:	7bfb      	ldrb	r3, [r7, #15]
    cc14:	4618      	mov	r0, r3
    cc16:	4b04      	ldr	r3, [pc, #16]	; (cc28 <_usbd_ep_set_in_trans+0x3c>)
    cc18:	4798      	blx	r3
}
    cc1a:	bf00      	nop
    cc1c:	3710      	adds	r7, #16
    cc1e:	46bd      	mov	sp, r7
    cc20:	bd80      	pop	{r7, pc}
    cc22:	bf00      	nop
    cc24:	0000cb21 	.word	0x0000cb21
    cc28:	0000cadd 	.word	0x0000cadd

0000cc2c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    cc2c:	b580      	push	{r7, lr}
    cc2e:	b084      	sub	sp, #16
    cc30:	af00      	add	r7, sp, #0
    cc32:	60ba      	str	r2, [r7, #8]
    cc34:	607b      	str	r3, [r7, #4]
    cc36:	4603      	mov	r3, r0
    cc38:	73fb      	strb	r3, [r7, #15]
    cc3a:	460b      	mov	r3, r1
    cc3c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    cc3e:	68bb      	ldr	r3, [r7, #8]
    cc40:	b29a      	uxth	r2, r3
    cc42:	7bb9      	ldrb	r1, [r7, #14]
    cc44:	7bfb      	ldrb	r3, [r7, #15]
    cc46:	4618      	mov	r0, r3
    cc48:	4b06      	ldr	r3, [pc, #24]	; (cc64 <_usbd_ep_set_out_trans+0x38>)
    cc4a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    cc4c:	687b      	ldr	r3, [r7, #4]
    cc4e:	b29a      	uxth	r2, r3
    cc50:	7bb9      	ldrb	r1, [r7, #14]
    cc52:	7bfb      	ldrb	r3, [r7, #15]
    cc54:	4618      	mov	r0, r3
    cc56:	4b04      	ldr	r3, [pc, #16]	; (cc68 <_usbd_ep_set_out_trans+0x3c>)
    cc58:	4798      	blx	r3
}
    cc5a:	bf00      	nop
    cc5c:	3710      	adds	r7, #16
    cc5e:	46bd      	mov	sp, r7
    cc60:	bd80      	pop	{r7, pc}
    cc62:	bf00      	nop
    cc64:	0000cba9 	.word	0x0000cba9
    cc68:	0000cb65 	.word	0x0000cb65

0000cc6c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    cc6c:	b480      	push	{r7}
    cc6e:	b085      	sub	sp, #20
    cc70:	af00      	add	r7, sp, #0
    cc72:	4603      	mov	r3, r0
    cc74:	460a      	mov	r2, r1
    cc76:	71fb      	strb	r3, [r7, #7]
    cc78:	4613      	mov	r3, r2
    cc7a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    cc7c:	79fa      	ldrb	r2, [r7, #7]
    cc7e:	79bb      	ldrb	r3, [r7, #6]
    cc80:	0052      	lsls	r2, r2, #1
    cc82:	4413      	add	r3, r2
    cc84:	011b      	lsls	r3, r3, #4
    cc86:	4a06      	ldr	r2, [pc, #24]	; (cca0 <_usbd_ep_clear_bank_status+0x34>)
    cc88:	4413      	add	r3, r2
    cc8a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    cc8c:	68fb      	ldr	r3, [r7, #12]
    cc8e:	2200      	movs	r2, #0
    cc90:	729a      	strb	r2, [r3, #10]
}
    cc92:	bf00      	nop
    cc94:	3714      	adds	r7, #20
    cc96:	46bd      	mov	sp, r7
    cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc9c:	4770      	bx	lr
    cc9e:	bf00      	nop
    cca0:	200038d4 	.word	0x200038d4

0000cca4 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    cca4:	b580      	push	{r7, lr}
    cca6:	b082      	sub	sp, #8
    cca8:	af00      	add	r7, sp, #0
    ccaa:	4603      	mov	r3, r0
    ccac:	71fb      	strb	r3, [r7, #7]
    ccae:	460b      	mov	r3, r1
    ccb0:	71bb      	strb	r3, [r7, #6]
    ccb2:	4613      	mov	r3, r2
    ccb4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    ccb6:	797b      	ldrb	r3, [r7, #5]
    ccb8:	2b00      	cmp	r3, #0
    ccba:	d00b      	beq.n	ccd4 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ccbc:	79bb      	ldrb	r3, [r7, #6]
    ccbe:	2240      	movs	r2, #64	; 0x40
    ccc0:	fa02 f303 	lsl.w	r3, r2, r3
    ccc4:	b2da      	uxtb	r2, r3
    ccc6:	79fb      	ldrb	r3, [r7, #7]
    ccc8:	4619      	mov	r1, r3
    ccca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ccce:	4b09      	ldr	r3, [pc, #36]	; (ccf4 <_usbd_ep_set_in_rdy+0x50>)
    ccd0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    ccd2:	e00a      	b.n	ccea <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ccd4:	79bb      	ldrb	r3, [r7, #6]
    ccd6:	2240      	movs	r2, #64	; 0x40
    ccd8:	fa02 f303 	lsl.w	r3, r2, r3
    ccdc:	b2da      	uxtb	r2, r3
    ccde:	79fb      	ldrb	r3, [r7, #7]
    cce0:	4619      	mov	r1, r3
    cce2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cce6:	4b04      	ldr	r3, [pc, #16]	; (ccf8 <_usbd_ep_set_in_rdy+0x54>)
    cce8:	4798      	blx	r3
}
    ccea:	bf00      	nop
    ccec:	3708      	adds	r7, #8
    ccee:	46bd      	mov	sp, r7
    ccf0:	bd80      	pop	{r7, pc}
    ccf2:	bf00      	nop
    ccf4:	0000c2b1 	.word	0x0000c2b1
    ccf8:	0000c305 	.word	0x0000c305

0000ccfc <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    ccfc:	b580      	push	{r7, lr}
    ccfe:	b082      	sub	sp, #8
    cd00:	af00      	add	r7, sp, #0
    cd02:	4603      	mov	r3, r0
    cd04:	71fb      	strb	r3, [r7, #7]
    cd06:	460b      	mov	r3, r1
    cd08:	71bb      	strb	r3, [r7, #6]
    cd0a:	4613      	mov	r3, r2
    cd0c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    cd0e:	797b      	ldrb	r3, [r7, #5]
    cd10:	2b00      	cmp	r3, #0
    cd12:	d00b      	beq.n	cd2c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    cd14:	79bb      	ldrb	r3, [r7, #6]
    cd16:	2240      	movs	r2, #64	; 0x40
    cd18:	fa02 f303 	lsl.w	r3, r2, r3
    cd1c:	b2da      	uxtb	r2, r3
    cd1e:	79fb      	ldrb	r3, [r7, #7]
    cd20:	4619      	mov	r1, r3
    cd22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cd26:	4b09      	ldr	r3, [pc, #36]	; (cd4c <_usbd_ep_set_out_rdy+0x50>)
    cd28:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    cd2a:	e00a      	b.n	cd42 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    cd2c:	79bb      	ldrb	r3, [r7, #6]
    cd2e:	2240      	movs	r2, #64	; 0x40
    cd30:	fa02 f303 	lsl.w	r3, r2, r3
    cd34:	b2da      	uxtb	r2, r3
    cd36:	79fb      	ldrb	r3, [r7, #7]
    cd38:	4619      	mov	r1, r3
    cd3a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cd3e:	4b04      	ldr	r3, [pc, #16]	; (cd50 <_usbd_ep_set_out_rdy+0x54>)
    cd40:	4798      	blx	r3
}
    cd42:	bf00      	nop
    cd44:	3708      	adds	r7, #8
    cd46:	46bd      	mov	sp, r7
    cd48:	bd80      	pop	{r7, pc}
    cd4a:	bf00      	nop
    cd4c:	0000c305 	.word	0x0000c305
    cd50:	0000c2b1 	.word	0x0000c2b1

0000cd54 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    cd54:	b480      	push	{r7}
    cd56:	b083      	sub	sp, #12
    cd58:	af00      	add	r7, sp, #0
    cd5a:	4603      	mov	r3, r0
    cd5c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    cd5e:	88fb      	ldrh	r3, [r7, #6]
    cd60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    cd64:	d820      	bhi.n	cda8 <_usbd_ep_pcksize_size+0x54>
    cd66:	88fb      	ldrh	r3, [r7, #6]
    cd68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    cd6c:	d81a      	bhi.n	cda4 <_usbd_ep_pcksize_size+0x50>
    cd6e:	88fb      	ldrh	r3, [r7, #6]
    cd70:	2b80      	cmp	r3, #128	; 0x80
    cd72:	d815      	bhi.n	cda0 <_usbd_ep_pcksize_size+0x4c>
    cd74:	88fb      	ldrh	r3, [r7, #6]
    cd76:	2b40      	cmp	r3, #64	; 0x40
    cd78:	d810      	bhi.n	cd9c <_usbd_ep_pcksize_size+0x48>
    cd7a:	88fb      	ldrh	r3, [r7, #6]
    cd7c:	2b20      	cmp	r3, #32
    cd7e:	d80b      	bhi.n	cd98 <_usbd_ep_pcksize_size+0x44>
    cd80:	88fb      	ldrh	r3, [r7, #6]
    cd82:	2b10      	cmp	r3, #16
    cd84:	d806      	bhi.n	cd94 <_usbd_ep_pcksize_size+0x40>
    cd86:	88fb      	ldrh	r3, [r7, #6]
    cd88:	2b08      	cmp	r3, #8
    cd8a:	bf8c      	ite	hi
    cd8c:	2301      	movhi	r3, #1
    cd8e:	2300      	movls	r3, #0
    cd90:	b2db      	uxtb	r3, r3
    cd92:	e00a      	b.n	cdaa <_usbd_ep_pcksize_size+0x56>
    cd94:	2302      	movs	r3, #2
    cd96:	e008      	b.n	cdaa <_usbd_ep_pcksize_size+0x56>
    cd98:	2303      	movs	r3, #3
    cd9a:	e006      	b.n	cdaa <_usbd_ep_pcksize_size+0x56>
    cd9c:	2304      	movs	r3, #4
    cd9e:	e004      	b.n	cdaa <_usbd_ep_pcksize_size+0x56>
    cda0:	2305      	movs	r3, #5
    cda2:	e002      	b.n	cdaa <_usbd_ep_pcksize_size+0x56>
    cda4:	2306      	movs	r3, #6
    cda6:	e000      	b.n	cdaa <_usbd_ep_pcksize_size+0x56>
    cda8:	2307      	movs	r3, #7
}
    cdaa:	4618      	mov	r0, r3
    cdac:	370c      	adds	r7, #12
    cdae:	46bd      	mov	sp, r7
    cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdb4:	4770      	bx	lr
	...

0000cdb8 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    cdb8:	b480      	push	{r7}
    cdba:	b085      	sub	sp, #20
    cdbc:	af00      	add	r7, sp, #0
    cdbe:	4603      	mov	r3, r0
    cdc0:	460a      	mov	r2, r1
    cdc2:	71fb      	strb	r3, [r7, #7]
    cdc4:	4613      	mov	r3, r2
    cdc6:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    cdc8:	79fb      	ldrb	r3, [r7, #7]
    cdca:	2b00      	cmp	r3, #0
    cdcc:	d008      	beq.n	cde0 <_usb_d_dev_ept+0x28>
    cdce:	79bb      	ldrb	r3, [r7, #6]
    cdd0:	2b00      	cmp	r3, #0
    cdd2:	d003      	beq.n	cddc <_usb_d_dev_ept+0x24>
    cdd4:	79fb      	ldrb	r3, [r7, #7]
    cdd6:	3304      	adds	r3, #4
    cdd8:	b2db      	uxtb	r3, r3
    cdda:	e002      	b.n	cde2 <_usb_d_dev_ept+0x2a>
    cddc:	79fb      	ldrb	r3, [r7, #7]
    cdde:	e000      	b.n	cde2 <_usb_d_dev_ept+0x2a>
    cde0:	2300      	movs	r3, #0
    cde2:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    cde4:	7bfa      	ldrb	r2, [r7, #15]
    cde6:	4613      	mov	r3, r2
    cde8:	009b      	lsls	r3, r3, #2
    cdea:	4413      	add	r3, r2
    cdec:	009b      	lsls	r3, r3, #2
    cdee:	3310      	adds	r3, #16
    cdf0:	4a04      	ldr	r2, [pc, #16]	; (ce04 <_usb_d_dev_ept+0x4c>)
    cdf2:	4413      	add	r3, r2
    cdf4:	3304      	adds	r3, #4
}
    cdf6:	4618      	mov	r0, r3
    cdf8:	3714      	adds	r7, #20
    cdfa:	46bd      	mov	sp, r7
    cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce00:	4770      	bx	lr
    ce02:	bf00      	nop
    ce04:	2000380c 	.word	0x2000380c

0000ce08 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    ce08:	b580      	push	{r7, lr}
    ce0a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    ce0c:	2104      	movs	r1, #4
    ce0e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ce12:	4b03      	ldr	r3, [pc, #12]	; (ce20 <_usb_d_dev_sof+0x18>)
    ce14:	4798      	blx	r3
	dev_inst.callbacks.sof();
    ce16:	4b03      	ldr	r3, [pc, #12]	; (ce24 <_usb_d_dev_sof+0x1c>)
    ce18:	681b      	ldr	r3, [r3, #0]
    ce1a:	4798      	blx	r3
}
    ce1c:	bf00      	nop
    ce1e:	bd80      	pop	{r7, pc}
    ce20:	0000c47f 	.word	0x0000c47f
    ce24:	2000380c 	.word	0x2000380c

0000ce28 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    ce28:	b580      	push	{r7, lr}
    ce2a:	b084      	sub	sp, #16
    ce2c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    ce2e:	2300      	movs	r3, #0
    ce30:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ce32:	f240 2101 	movw	r1, #513	; 0x201
    ce36:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ce3a:	4b1a      	ldr	r3, [pc, #104]	; (cea4 <_usb_d_dev_lpmsusp+0x7c>)
    ce3c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ce3e:	f240 2101 	movw	r1, #513	; 0x201
    ce42:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ce46:	4b18      	ldr	r3, [pc, #96]	; (cea8 <_usb_d_dev_lpmsusp+0x80>)
    ce48:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ce4a:	2170      	movs	r1, #112	; 0x70
    ce4c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ce50:	4b16      	ldr	r3, [pc, #88]	; (ceac <_usb_d_dev_lpmsusp+0x84>)
    ce52:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    ce54:	2300      	movs	r3, #0
    ce56:	73fb      	strb	r3, [r7, #15]
    ce58:	e018      	b.n	ce8c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    ce5a:	7bfb      	ldrb	r3, [r7, #15]
    ce5c:	015b      	lsls	r3, r3, #5
    ce5e:	4a14      	ldr	r2, [pc, #80]	; (ceb0 <_usb_d_dev_lpmsusp+0x88>)
    ce60:	4413      	add	r3, r2
    ce62:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    ce64:	687b      	ldr	r3, [r7, #4]
    ce66:	891b      	ldrh	r3, [r3, #8]
    ce68:	f3c3 0303 	ubfx	r3, r3, #0, #4
    ce6c:	b2db      	uxtb	r3, r3
    ce6e:	2b03      	cmp	r3, #3
    ce70:	d109      	bne.n	ce86 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    ce72:	687b      	ldr	r3, [r7, #4]
    ce74:	891b      	ldrh	r3, [r3, #8]
    ce76:	f3c3 130a 	ubfx	r3, r3, #4, #11
    ce7a:	b29b      	uxth	r3, r3
    ce7c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    ce7e:	687b      	ldr	r3, [r7, #4]
    ce80:	2200      	movs	r2, #0
    ce82:	811a      	strh	r2, [r3, #8]
			break;
    ce84:	e005      	b.n	ce92 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    ce86:	7bfb      	ldrb	r3, [r7, #15]
    ce88:	3301      	adds	r3, #1
    ce8a:	73fb      	strb	r3, [r7, #15]
    ce8c:	7bfb      	ldrb	r3, [r7, #15]
    ce8e:	2b03      	cmp	r3, #3
    ce90:	d9e3      	bls.n	ce5a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    ce92:	4b08      	ldr	r3, [pc, #32]	; (ceb4 <_usb_d_dev_lpmsusp+0x8c>)
    ce94:	685b      	ldr	r3, [r3, #4]
    ce96:	68b9      	ldr	r1, [r7, #8]
    ce98:	2003      	movs	r0, #3
    ce9a:	4798      	blx	r3
}
    ce9c:	bf00      	nop
    ce9e:	3710      	adds	r7, #16
    cea0:	46bd      	mov	sp, r7
    cea2:	bd80      	pop	{r7, pc}
    cea4:	0000c47f 	.word	0x0000c47f
    cea8:	0000c4d5 	.word	0x0000c4d5
    ceac:	0000c49d 	.word	0x0000c49d
    ceb0:	200038d4 	.word	0x200038d4
    ceb4:	2000380c 	.word	0x2000380c

0000ceb8 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    ceb8:	b580      	push	{r7, lr}
    ceba:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    cebc:	2180      	movs	r1, #128	; 0x80
    cebe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cec2:	4b04      	ldr	r3, [pc, #16]	; (ced4 <_usb_d_dev_ramerr+0x1c>)
    cec4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    cec6:	4b04      	ldr	r3, [pc, #16]	; (ced8 <_usb_d_dev_ramerr+0x20>)
    cec8:	685b      	ldr	r3, [r3, #4]
    ceca:	2100      	movs	r1, #0
    cecc:	2005      	movs	r0, #5
    cece:	4798      	blx	r3
}
    ced0:	bf00      	nop
    ced2:	bd80      	pop	{r7, pc}
    ced4:	0000c47f 	.word	0x0000c47f
    ced8:	2000380c 	.word	0x2000380c

0000cedc <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    cedc:	b580      	push	{r7, lr}
    cede:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    cee0:	2170      	movs	r1, #112	; 0x70
    cee2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cee6:	4b0b      	ldr	r3, [pc, #44]	; (cf14 <_usb_d_dev_wakeup+0x38>)
    cee8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ceea:	2170      	movs	r1, #112	; 0x70
    ceec:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cef0:	4b09      	ldr	r3, [pc, #36]	; (cf18 <_usb_d_dev_wakeup+0x3c>)
    cef2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    cef4:	f240 2101 	movw	r1, #513	; 0x201
    cef8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cefc:	4b07      	ldr	r3, [pc, #28]	; (cf1c <_usb_d_dev_wakeup+0x40>)
    cefe:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    cf00:	2000      	movs	r0, #0
    cf02:	4b07      	ldr	r3, [pc, #28]	; (cf20 <_usb_d_dev_wakeup+0x44>)
    cf04:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    cf06:	4b07      	ldr	r3, [pc, #28]	; (cf24 <_usb_d_dev_wakeup+0x48>)
    cf08:	685b      	ldr	r3, [r3, #4]
    cf0a:	2100      	movs	r1, #0
    cf0c:	2002      	movs	r0, #2
    cf0e:	4798      	blx	r3
}
    cf10:	bf00      	nop
    cf12:	bd80      	pop	{r7, pc}
    cf14:	0000c47f 	.word	0x0000c47f
    cf18:	0000c4d5 	.word	0x0000c4d5
    cf1c:	0000c49d 	.word	0x0000c49d
    cf20:	0000c77d 	.word	0x0000c77d
    cf24:	2000380c 	.word	0x2000380c

0000cf28 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    cf28:	b580      	push	{r7, lr}
    cf2a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    cf2c:	2200      	movs	r2, #0
    cf2e:	2100      	movs	r1, #0
    cf30:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cf34:	4b0d      	ldr	r3, [pc, #52]	; (cf6c <_usb_d_dev_reset+0x44>)
    cf36:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    cf38:	2108      	movs	r1, #8
    cf3a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cf3e:	4b0c      	ldr	r3, [pc, #48]	; (cf70 <_usb_d_dev_reset+0x48>)
    cf40:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    cf42:	2170      	movs	r1, #112	; 0x70
    cf44:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cf48:	4b0a      	ldr	r3, [pc, #40]	; (cf74 <_usb_d_dev_reset+0x4c>)
    cf4a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    cf4c:	f240 2101 	movw	r1, #513	; 0x201
    cf50:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cf54:	4b08      	ldr	r3, [pc, #32]	; (cf78 <_usb_d_dev_reset+0x50>)
    cf56:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    cf58:	4b08      	ldr	r3, [pc, #32]	; (cf7c <_usb_d_dev_reset+0x54>)
    cf5a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    cf5c:	4b08      	ldr	r3, [pc, #32]	; (cf80 <_usb_d_dev_reset+0x58>)
    cf5e:	685b      	ldr	r3, [r3, #4]
    cf60:	2100      	movs	r1, #0
    cf62:	2001      	movs	r0, #1
    cf64:	4798      	blx	r3
}
    cf66:	bf00      	nop
    cf68:	bd80      	pop	{r7, pc}
    cf6a:	bf00      	nop
    cf6c:	0000c415 	.word	0x0000c415
    cf70:	0000c47f 	.word	0x0000c47f
    cf74:	0000c4d5 	.word	0x0000c4d5
    cf78:	0000c49d 	.word	0x0000c49d
    cf7c:	0000dae5 	.word	0x0000dae5
    cf80:	2000380c 	.word	0x2000380c

0000cf84 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    cf84:	b580      	push	{r7, lr}
    cf86:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    cf88:	f240 2101 	movw	r1, #513	; 0x201
    cf8c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cf90:	4b09      	ldr	r3, [pc, #36]	; (cfb8 <_usb_d_dev_suspend+0x34>)
    cf92:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    cf94:	f240 2101 	movw	r1, #513	; 0x201
    cf98:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cf9c:	4b07      	ldr	r3, [pc, #28]	; (cfbc <_usb_d_dev_suspend+0x38>)
    cf9e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    cfa0:	2170      	movs	r1, #112	; 0x70
    cfa2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cfa6:	4b06      	ldr	r3, [pc, #24]	; (cfc0 <_usb_d_dev_suspend+0x3c>)
    cfa8:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    cfaa:	4b06      	ldr	r3, [pc, #24]	; (cfc4 <_usb_d_dev_suspend+0x40>)
    cfac:	685b      	ldr	r3, [r3, #4]
    cfae:	2100      	movs	r1, #0
    cfb0:	2004      	movs	r0, #4
    cfb2:	4798      	blx	r3
}
    cfb4:	bf00      	nop
    cfb6:	bd80      	pop	{r7, pc}
    cfb8:	0000c47f 	.word	0x0000c47f
    cfbc:	0000c4d5 	.word	0x0000c4d5
    cfc0:	0000c49d 	.word	0x0000c49d
    cfc4:	2000380c 	.word	0x2000380c

0000cfc8 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    cfc8:	b580      	push	{r7, lr}
    cfca:	b082      	sub	sp, #8
    cfcc:	af00      	add	r7, sp, #0
	bool     rc    = true;
    cfce:	2301      	movs	r3, #1
    cfd0:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    cfd2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cfd6:	4b22      	ldr	r3, [pc, #136]	; (d060 <_usb_d_dev_handle_nep+0x98>)
    cfd8:	4798      	blx	r3
    cfda:	4603      	mov	r3, r0
    cfdc:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    cfde:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cfe2:	4b20      	ldr	r3, [pc, #128]	; (d064 <_usb_d_dev_handle_nep+0x9c>)
    cfe4:	4798      	blx	r3
    cfe6:	4603      	mov	r3, r0
    cfe8:	461a      	mov	r2, r3
    cfea:	88bb      	ldrh	r3, [r7, #4]
    cfec:	4013      	ands	r3, r2
    cfee:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    cff0:	88bb      	ldrh	r3, [r7, #4]
    cff2:	f003 0304 	and.w	r3, r3, #4
    cff6:	2b00      	cmp	r3, #0
    cff8:	d003      	beq.n	d002 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    cffa:	4b1b      	ldr	r3, [pc, #108]	; (d068 <_usb_d_dev_handle_nep+0xa0>)
    cffc:	4798      	blx	r3
		return true;
    cffe:	2301      	movs	r3, #1
    d000:	e02a      	b.n	d058 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    d002:	88bb      	ldrh	r3, [r7, #4]
    d004:	f403 7300 	and.w	r3, r3, #512	; 0x200
    d008:	2b00      	cmp	r3, #0
    d00a:	d002      	beq.n	d012 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    d00c:	4b17      	ldr	r3, [pc, #92]	; (d06c <_usb_d_dev_handle_nep+0xa4>)
    d00e:	4798      	blx	r3
    d010:	e021      	b.n	d056 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    d012:	88bb      	ldrh	r3, [r7, #4]
    d014:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d018:	2b00      	cmp	r3, #0
    d01a:	d002      	beq.n	d022 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    d01c:	4b14      	ldr	r3, [pc, #80]	; (d070 <_usb_d_dev_handle_nep+0xa8>)
    d01e:	4798      	blx	r3
    d020:	e019      	b.n	d056 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    d022:	88bb      	ldrh	r3, [r7, #4]
    d024:	f003 0370 	and.w	r3, r3, #112	; 0x70
    d028:	2b00      	cmp	r3, #0
    d02a:	d002      	beq.n	d032 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    d02c:	4b11      	ldr	r3, [pc, #68]	; (d074 <_usb_d_dev_handle_nep+0xac>)
    d02e:	4798      	blx	r3
    d030:	e011      	b.n	d056 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    d032:	88bb      	ldrh	r3, [r7, #4]
    d034:	f003 0308 	and.w	r3, r3, #8
    d038:	2b00      	cmp	r3, #0
    d03a:	d002      	beq.n	d042 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    d03c:	4b0e      	ldr	r3, [pc, #56]	; (d078 <_usb_d_dev_handle_nep+0xb0>)
    d03e:	4798      	blx	r3
    d040:	e009      	b.n	d056 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    d042:	88bb      	ldrh	r3, [r7, #4]
    d044:	f003 0301 	and.w	r3, r3, #1
    d048:	2b00      	cmp	r3, #0
    d04a:	d002      	beq.n	d052 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    d04c:	4b0b      	ldr	r3, [pc, #44]	; (d07c <_usb_d_dev_handle_nep+0xb4>)
    d04e:	4798      	blx	r3
    d050:	e001      	b.n	d056 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    d052:	2300      	movs	r3, #0
    d054:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    d056:	79fb      	ldrb	r3, [r7, #7]
}
    d058:	4618      	mov	r0, r3
    d05a:	3708      	adds	r7, #8
    d05c:	46bd      	mov	sp, r7
    d05e:	bd80      	pop	{r7, pc}
    d060:	0000c465 	.word	0x0000c465
    d064:	0000c4bb 	.word	0x0000c4bb
    d068:	0000ce09 	.word	0x0000ce09
    d06c:	0000ce29 	.word	0x0000ce29
    d070:	0000ceb9 	.word	0x0000ceb9
    d074:	0000cedd 	.word	0x0000cedd
    d078:	0000cf29 	.word	0x0000cf29
    d07c:	0000cf85 	.word	0x0000cf85

0000d080 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    d080:	b590      	push	{r4, r7, lr}
    d082:	b089      	sub	sp, #36	; 0x24
    d084:	af00      	add	r7, sp, #0
    d086:	6078      	str	r0, [r7, #4]
    d088:	460b      	mov	r3, r1
    d08a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    d08c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d090:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    d092:	687b      	ldr	r3, [r7, #4]
    d094:	7c9b      	ldrb	r3, [r3, #18]
    d096:	f003 030f 	and.w	r3, r3, #15
    d09a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    d09c:	7dfb      	ldrb	r3, [r7, #23]
    d09e:	015b      	lsls	r3, r3, #5
    d0a0:	4a73      	ldr	r2, [pc, #460]	; (d270 <_usb_d_dev_in_next+0x1f0>)
    d0a2:	4413      	add	r3, r2
    d0a4:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    d0a6:	78fb      	ldrb	r3, [r7, #3]
    d0a8:	2b00      	cmp	r3, #0
    d0aa:	d006      	beq.n	d0ba <_usb_d_dev_in_next+0x3a>
    d0ac:	693b      	ldr	r3, [r7, #16]
    d0ae:	3310      	adds	r3, #16
    d0b0:	685b      	ldr	r3, [r3, #4]
    d0b2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d0b6:	b29b      	uxth	r3, r3
    d0b8:	e000      	b.n	d0bc <_usb_d_dev_in_next+0x3c>
    d0ba:	2300      	movs	r3, #0
    d0bc:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    d0be:	687b      	ldr	r3, [r7, #4]
    d0c0:	8a1b      	ldrh	r3, [r3, #16]
    d0c2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    d0c6:	4293      	cmp	r3, r2
    d0c8:	d103      	bne.n	d0d2 <_usb_d_dev_in_next+0x52>
    d0ca:	687b      	ldr	r3, [r7, #4]
    d0cc:	8a1b      	ldrh	r3, [r3, #16]
    d0ce:	b21b      	sxth	r3, r3
    d0d0:	e004      	b.n	d0dc <_usb_d_dev_in_next+0x5c>
    d0d2:	687b      	ldr	r3, [r7, #4]
    d0d4:	8a1b      	ldrh	r3, [r3, #16]
    d0d6:	3b01      	subs	r3, #1
    d0d8:	b29b      	uxth	r3, r3
    d0da:	b21b      	sxth	r3, r3
    d0dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    d0e0:	4013      	ands	r3, r2
    d0e2:	b21b      	sxth	r3, r3
    d0e4:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    d0e6:	2300      	movs	r3, #0
    d0e8:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    d0ea:	687b      	ldr	r3, [r7, #4]
    d0ec:	7cdb      	ldrb	r3, [r3, #19]
    d0ee:	f003 0307 	and.w	r3, r3, #7
    d0f2:	b2db      	uxtb	r3, r3
    d0f4:	2b01      	cmp	r3, #1
    d0f6:	bf0c      	ite	eq
    d0f8:	2301      	moveq	r3, #1
    d0fa:	2300      	movne	r3, #0
    d0fc:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    d0fe:	78fb      	ldrb	r3, [r7, #3]
    d100:	2b00      	cmp	r3, #0
    d102:	d004      	beq.n	d10e <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    d104:	7dfb      	ldrb	r3, [r7, #23]
    d106:	2101      	movs	r1, #1
    d108:	4618      	mov	r0, r3
    d10a:	4b5a      	ldr	r3, [pc, #360]	; (d274 <_usb_d_dev_in_next+0x1f4>)
    d10c:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    d10e:	687b      	ldr	r3, [r7, #4]
    d110:	689a      	ldr	r2, [r3, #8]
    d112:	89fb      	ldrh	r3, [r7, #14]
    d114:	441a      	add	r2, r3
    d116:	687b      	ldr	r3, [r7, #4]
    d118:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    d11a:	687b      	ldr	r3, [r7, #4]
    d11c:	689a      	ldr	r2, [r3, #8]
    d11e:	687b      	ldr	r3, [r7, #4]
    d120:	685b      	ldr	r3, [r3, #4]
    d122:	429a      	cmp	r2, r3
    d124:	d243      	bcs.n	d1ae <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    d126:	687b      	ldr	r3, [r7, #4]
    d128:	685b      	ldr	r3, [r3, #4]
    d12a:	b29a      	uxth	r2, r3
    d12c:	687b      	ldr	r3, [r7, #4]
    d12e:	689b      	ldr	r3, [r3, #8]
    d130:	b29b      	uxth	r3, r3
    d132:	1ad3      	subs	r3, r2, r3
    d134:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    d136:	687b      	ldr	r3, [r7, #4]
    d138:	7cdb      	ldrb	r3, [r3, #19]
    d13a:	f003 0320 	and.w	r3, r3, #32
    d13e:	b2db      	uxtb	r3, r3
    d140:	2b00      	cmp	r3, #0
    d142:	d01b      	beq.n	d17c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    d144:	687b      	ldr	r3, [r7, #4]
    d146:	8a1b      	ldrh	r3, [r3, #16]
    d148:	8bfa      	ldrh	r2, [r7, #30]
    d14a:	429a      	cmp	r2, r3
    d14c:	d902      	bls.n	d154 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    d14e:	687b      	ldr	r3, [r7, #4]
    d150:	8a1b      	ldrh	r3, [r3, #16]
    d152:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    d154:	687b      	ldr	r3, [r7, #4]
    d156:	68d8      	ldr	r0, [r3, #12]
    d158:	687b      	ldr	r3, [r7, #4]
    d15a:	681a      	ldr	r2, [r3, #0]
    d15c:	687b      	ldr	r3, [r7, #4]
    d15e:	689b      	ldr	r3, [r3, #8]
    d160:	4413      	add	r3, r2
    d162:	8bfa      	ldrh	r2, [r7, #30]
    d164:	4619      	mov	r1, r3
    d166:	4b44      	ldr	r3, [pc, #272]	; (d278 <_usb_d_dev_in_next+0x1f8>)
    d168:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    d16a:	687b      	ldr	r3, [r7, #4]
    d16c:	68db      	ldr	r3, [r3, #12]
    d16e:	461a      	mov	r2, r3
    d170:	7dfb      	ldrb	r3, [r7, #23]
    d172:	2101      	movs	r1, #1
    d174:	4618      	mov	r0, r3
    d176:	4b41      	ldr	r3, [pc, #260]	; (d27c <_usb_d_dev_in_next+0x1fc>)
    d178:	4798      	blx	r3
    d17a:	e011      	b.n	d1a0 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    d17c:	8bfb      	ldrh	r3, [r7, #30]
    d17e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    d182:	d902      	bls.n	d18a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    d184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    d188:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    d18a:	687b      	ldr	r3, [r7, #4]
    d18c:	681a      	ldr	r2, [r3, #0]
    d18e:	687b      	ldr	r3, [r7, #4]
    d190:	689b      	ldr	r3, [r3, #8]
    d192:	4413      	add	r3, r2
    d194:	461a      	mov	r2, r3
    d196:	7dfb      	ldrb	r3, [r7, #23]
    d198:	2101      	movs	r1, #1
    d19a:	4618      	mov	r0, r3
    d19c:	4b37      	ldr	r3, [pc, #220]	; (d27c <_usb_d_dev_in_next+0x1fc>)
    d19e:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    d1a0:	8bfa      	ldrh	r2, [r7, #30]
    d1a2:	7df8      	ldrb	r0, [r7, #23]
    d1a4:	2300      	movs	r3, #0
    d1a6:	2101      	movs	r1, #1
    d1a8:	4c35      	ldr	r4, [pc, #212]	; (d280 <_usb_d_dev_in_next+0x200>)
    d1aa:	47a0      	blx	r4
		goto _in_tx_exec;
    d1ac:	e041      	b.n	d232 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    d1ae:	687b      	ldr	r3, [r7, #4]
    d1b0:	7cdb      	ldrb	r3, [r3, #19]
    d1b2:	f003 0310 	and.w	r3, r3, #16
    d1b6:	b2db      	uxtb	r3, r3
    d1b8:	2b00      	cmp	r3, #0
    d1ba:	d00b      	beq.n	d1d4 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    d1bc:	687a      	ldr	r2, [r7, #4]
    d1be:	7cd3      	ldrb	r3, [r2, #19]
    d1c0:	f36f 1304 	bfc	r3, #4, #1
    d1c4:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    d1c6:	7df8      	ldrb	r0, [r7, #23]
    d1c8:	2300      	movs	r3, #0
    d1ca:	2200      	movs	r2, #0
    d1cc:	2101      	movs	r1, #1
    d1ce:	4c2c      	ldr	r4, [pc, #176]	; (d280 <_usb_d_dev_in_next+0x200>)
    d1d0:	47a0      	blx	r4
		goto _in_tx_exec;
    d1d2:	e02e      	b.n	d232 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    d1d4:	7afb      	ldrb	r3, [r7, #11]
    d1d6:	2b00      	cmp	r3, #0
    d1d8:	d006      	beq.n	d1e8 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    d1da:	7dfb      	ldrb	r3, [r7, #23]
    d1dc:	224b      	movs	r2, #75	; 0x4b
    d1de:	4619      	mov	r1, r3
    d1e0:	69b8      	ldr	r0, [r7, #24]
    d1e2:	4b28      	ldr	r3, [pc, #160]	; (d284 <_usb_d_dev_in_next+0x204>)
    d1e4:	4798      	blx	r3
    d1e6:	e005      	b.n	d1f4 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    d1e8:	7dfb      	ldrb	r3, [r7, #23]
    d1ea:	224a      	movs	r2, #74	; 0x4a
    d1ec:	4619      	mov	r1, r3
    d1ee:	69b8      	ldr	r0, [r7, #24]
    d1f0:	4b24      	ldr	r3, [pc, #144]	; (d284 <_usb_d_dev_in_next+0x204>)
    d1f2:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    d1f4:	687b      	ldr	r3, [r7, #4]
    d1f6:	8a1b      	ldrh	r3, [r3, #16]
    d1f8:	89ba      	ldrh	r2, [r7, #12]
    d1fa:	429a      	cmp	r2, r3
    d1fc:	d114      	bne.n	d228 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    d1fe:	687a      	ldr	r2, [r7, #4]
    d200:	7cd3      	ldrb	r3, [r2, #19]
    d202:	f36f 1386 	bfc	r3, #6, #1
    d206:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    d208:	4b1f      	ldr	r3, [pc, #124]	; (d288 <_usb_d_dev_in_next+0x208>)
    d20a:	68db      	ldr	r3, [r3, #12]
    d20c:	687a      	ldr	r2, [r7, #4]
    d20e:	7c90      	ldrb	r0, [r2, #18]
    d210:	687a      	ldr	r2, [r7, #4]
    d212:	6892      	ldr	r2, [r2, #8]
    d214:	4611      	mov	r1, r2
    d216:	4798      	blx	r3
    d218:	4603      	mov	r3, r0
    d21a:	2b00      	cmp	r3, #0
    d21c:	d124      	bne.n	d268 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    d21e:	687a      	ldr	r2, [r7, #4]
    d220:	7cd3      	ldrb	r3, [r2, #19]
    d222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d226:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    d228:	2100      	movs	r1, #0
    d22a:	6878      	ldr	r0, [r7, #4]
    d22c:	4b17      	ldr	r3, [pc, #92]	; (d28c <_usb_d_dev_in_next+0x20c>)
    d22e:	4798      	blx	r3
	return;
    d230:	e01b      	b.n	d26a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    d232:	78fb      	ldrb	r3, [r7, #3]
    d234:	f083 0301 	eor.w	r3, r3, #1
    d238:	b2db      	uxtb	r3, r3
    d23a:	2b00      	cmp	r3, #0
    d23c:	d00d      	beq.n	d25a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    d23e:	7afb      	ldrb	r3, [r7, #11]
    d240:	2b00      	cmp	r3, #0
    d242:	d002      	beq.n	d24a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    d244:	234e      	movs	r3, #78	; 0x4e
    d246:	777b      	strb	r3, [r7, #29]
    d248:	e001      	b.n	d24e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    d24a:	234a      	movs	r3, #74	; 0x4a
    d24c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    d24e:	7f7a      	ldrb	r2, [r7, #29]
    d250:	7dfb      	ldrb	r3, [r7, #23]
    d252:	4619      	mov	r1, r3
    d254:	69b8      	ldr	r0, [r7, #24]
    d256:	4b0e      	ldr	r3, [pc, #56]	; (d290 <_usb_d_dev_in_next+0x210>)
    d258:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    d25a:	7dfb      	ldrb	r3, [r7, #23]
    d25c:	2201      	movs	r2, #1
    d25e:	2101      	movs	r1, #1
    d260:	4618      	mov	r0, r3
    d262:	4b0c      	ldr	r3, [pc, #48]	; (d294 <_usb_d_dev_in_next+0x214>)
    d264:	4798      	blx	r3
    d266:	e000      	b.n	d26a <_usb_d_dev_in_next+0x1ea>
			return;
    d268:	bf00      	nop
}
    d26a:	3724      	adds	r7, #36	; 0x24
    d26c:	46bd      	mov	sp, r7
    d26e:	bd90      	pop	{r4, r7, pc}
    d270:	200038d4 	.word	0x200038d4
    d274:	0000ca79 	.word	0x0000ca79
    d278:	00018b59 	.word	0x00018b59
    d27c:	0000caa5 	.word	0x0000caa5
    d280:	0000cbed 	.word	0x0000cbed
    d284:	0000c385 	.word	0x0000c385
    d288:	2000380c 	.word	0x2000380c
    d28c:	0000e3a9 	.word	0x0000e3a9
    d290:	0000c359 	.word	0x0000c359
    d294:	0000cca5 	.word	0x0000cca5

0000d298 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    d298:	b590      	push	{r4, r7, lr}
    d29a:	b08b      	sub	sp, #44	; 0x2c
    d29c:	af00      	add	r7, sp, #0
    d29e:	6078      	str	r0, [r7, #4]
    d2a0:	460b      	mov	r3, r1
    d2a2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    d2a4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d2a8:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    d2aa:	687b      	ldr	r3, [r7, #4]
    d2ac:	7c9b      	ldrb	r3, [r3, #18]
    d2ae:	f003 030f 	and.w	r3, r3, #15
    d2b2:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    d2b4:	7ffb      	ldrb	r3, [r7, #31]
    d2b6:	015b      	lsls	r3, r3, #5
    d2b8:	4a94      	ldr	r2, [pc, #592]	; (d50c <_usb_d_dev_out_next+0x274>)
    d2ba:	4413      	add	r3, r2
    d2bc:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    d2be:	78fb      	ldrb	r3, [r7, #3]
    d2c0:	2b00      	cmp	r3, #0
    d2c2:	d005      	beq.n	d2d0 <_usb_d_dev_out_next+0x38>
    d2c4:	69bb      	ldr	r3, [r7, #24]
    d2c6:	685b      	ldr	r3, [r3, #4]
    d2c8:	f3c3 338d 	ubfx	r3, r3, #14, #14
    d2cc:	b29b      	uxth	r3, r3
    d2ce:	e000      	b.n	d2d2 <_usb_d_dev_out_next+0x3a>
    d2d0:	2300      	movs	r3, #0
    d2d2:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    d2d4:	78fb      	ldrb	r3, [r7, #3]
    d2d6:	2b00      	cmp	r3, #0
    d2d8:	d005      	beq.n	d2e6 <_usb_d_dev_out_next+0x4e>
    d2da:	69bb      	ldr	r3, [r7, #24]
    d2dc:	685b      	ldr	r3, [r3, #4]
    d2de:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d2e2:	b29b      	uxth	r3, r3
    d2e4:	e000      	b.n	d2e8 <_usb_d_dev_out_next+0x50>
    d2e6:	2300      	movs	r3, #0
    d2e8:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    d2ea:	687b      	ldr	r3, [r7, #4]
    d2ec:	8a1b      	ldrh	r3, [r3, #16]
    d2ee:	f240 32ff 	movw	r2, #1023	; 0x3ff
    d2f2:	4293      	cmp	r3, r2
    d2f4:	d004      	beq.n	d300 <_usb_d_dev_out_next+0x68>
    d2f6:	687b      	ldr	r3, [r7, #4]
    d2f8:	8a1b      	ldrh	r3, [r3, #16]
    d2fa:	3b01      	subs	r3, #1
    d2fc:	b29b      	uxth	r3, r3
    d2fe:	e001      	b.n	d304 <_usb_d_dev_out_next+0x6c>
    d300:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d304:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    d306:	8aba      	ldrh	r2, [r7, #20]
    d308:	8a7b      	ldrh	r3, [r7, #18]
    d30a:	4013      	ands	r3, r2
    d30c:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    d30e:	687b      	ldr	r3, [r7, #4]
    d310:	7cdb      	ldrb	r3, [r3, #19]
    d312:	f003 0307 	and.w	r3, r3, #7
    d316:	b2db      	uxtb	r3, r3
    d318:	2b01      	cmp	r3, #1
    d31a:	bf0c      	ite	eq
    d31c:	2301      	moveq	r3, #1
    d31e:	2300      	movne	r3, #0
    d320:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    d322:	78fb      	ldrb	r3, [r7, #3]
    d324:	2b00      	cmp	r3, #0
    d326:	d004      	beq.n	d332 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    d328:	7ffb      	ldrb	r3, [r7, #31]
    d32a:	2100      	movs	r1, #0
    d32c:	4618      	mov	r0, r3
    d32e:	4b78      	ldr	r3, [pc, #480]	; (d510 <_usb_d_dev_out_next+0x278>)
    d330:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    d332:	687b      	ldr	r3, [r7, #4]
    d334:	7cdb      	ldrb	r3, [r3, #19]
    d336:	f003 0320 	and.w	r3, r3, #32
    d33a:	b2db      	uxtb	r3, r3
    d33c:	2b00      	cmp	r3, #0
    d33e:	d01c      	beq.n	d37a <_usb_d_dev_out_next+0xe2>
    d340:	687b      	ldr	r3, [r7, #4]
    d342:	685b      	ldr	r3, [r3, #4]
    d344:	2b00      	cmp	r3, #0
    d346:	d018      	beq.n	d37a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    d348:	687b      	ldr	r3, [r7, #4]
    d34a:	685b      	ldr	r3, [r3, #4]
    d34c:	b29a      	uxth	r2, r3
    d34e:	687b      	ldr	r3, [r7, #4]
    d350:	689b      	ldr	r3, [r3, #8]
    d352:	b29b      	uxth	r3, r3
    d354:	1ad3      	subs	r3, r2, r3
    d356:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    d358:	687b      	ldr	r3, [r7, #4]
    d35a:	681a      	ldr	r2, [r3, #0]
    d35c:	687b      	ldr	r3, [r7, #4]
    d35e:	689b      	ldr	r3, [r3, #8]
    d360:	18d0      	adds	r0, r2, r3
    d362:	687b      	ldr	r3, [r7, #4]
    d364:	68d9      	ldr	r1, [r3, #12]
    d366:	89ba      	ldrh	r2, [r7, #12]
    d368:	8a3b      	ldrh	r3, [r7, #16]
    d36a:	429a      	cmp	r2, r3
    d36c:	d901      	bls.n	d372 <_usb_d_dev_out_next+0xda>
    d36e:	8a3b      	ldrh	r3, [r7, #16]
    d370:	e000      	b.n	d374 <_usb_d_dev_out_next+0xdc>
    d372:	89bb      	ldrh	r3, [r7, #12]
    d374:	461a      	mov	r2, r3
    d376:	4b67      	ldr	r3, [pc, #412]	; (d514 <_usb_d_dev_out_next+0x27c>)
    d378:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    d37a:	687b      	ldr	r3, [r7, #4]
    d37c:	685b      	ldr	r3, [r3, #4]
    d37e:	2b00      	cmp	r3, #0
    d380:	d121      	bne.n	d3c6 <_usb_d_dev_out_next+0x12e>
    d382:	687b      	ldr	r3, [r7, #4]
    d384:	7cdb      	ldrb	r3, [r3, #19]
    d386:	f003 0310 	and.w	r3, r3, #16
    d38a:	b2db      	uxtb	r3, r3
    d38c:	2b00      	cmp	r3, #0
    d38e:	d01a      	beq.n	d3c6 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    d390:	687a      	ldr	r2, [r7, #4]
    d392:	7cd3      	ldrb	r3, [r2, #19]
    d394:	f36f 1304 	bfc	r3, #4, #1
    d398:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    d39a:	687a      	ldr	r2, [r7, #4]
    d39c:	7cd3      	ldrb	r3, [r2, #19]
    d39e:	f043 0320 	orr.w	r3, r3, #32
    d3a2:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    d3a4:	687b      	ldr	r3, [r7, #4]
    d3a6:	68db      	ldr	r3, [r3, #12]
    d3a8:	461a      	mov	r2, r3
    d3aa:	7ffb      	ldrb	r3, [r7, #31]
    d3ac:	2100      	movs	r1, #0
    d3ae:	4618      	mov	r0, r3
    d3b0:	4b59      	ldr	r3, [pc, #356]	; (d518 <_usb_d_dev_out_next+0x280>)
    d3b2:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    d3b4:	687b      	ldr	r3, [r7, #4]
    d3b6:	8a1b      	ldrh	r3, [r3, #16]
    d3b8:	461a      	mov	r2, r3
    d3ba:	7ff8      	ldrb	r0, [r7, #31]
    d3bc:	2300      	movs	r3, #0
    d3be:	2100      	movs	r1, #0
    d3c0:	4c56      	ldr	r4, [pc, #344]	; (d51c <_usb_d_dev_out_next+0x284>)
    d3c2:	47a0      	blx	r4
		goto _out_rx_exec;
    d3c4:	e090      	b.n	d4e8 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    d3c6:	78fb      	ldrb	r3, [r7, #3]
    d3c8:	2b00      	cmp	r3, #0
    d3ca:	d010      	beq.n	d3ee <_usb_d_dev_out_next+0x156>
    d3cc:	687b      	ldr	r3, [r7, #4]
    d3ce:	8a1b      	ldrh	r3, [r3, #16]
    d3d0:	8a3a      	ldrh	r2, [r7, #16]
    d3d2:	429a      	cmp	r2, r3
    d3d4:	d20b      	bcs.n	d3ee <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    d3d6:	687a      	ldr	r2, [r7, #4]
    d3d8:	7cd3      	ldrb	r3, [r2, #19]
    d3da:	f36f 1304 	bfc	r3, #4, #1
    d3de:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    d3e0:	687b      	ldr	r3, [r7, #4]
    d3e2:	689a      	ldr	r2, [r3, #8]
    d3e4:	8abb      	ldrh	r3, [r7, #20]
    d3e6:	441a      	add	r2, r3
    d3e8:	687b      	ldr	r3, [r7, #4]
    d3ea:	609a      	str	r2, [r3, #8]
    d3ec:	e05c      	b.n	d4a8 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    d3ee:	687b      	ldr	r3, [r7, #4]
    d3f0:	689a      	ldr	r2, [r3, #8]
    d3f2:	8afb      	ldrh	r3, [r7, #22]
    d3f4:	441a      	add	r2, r3
    d3f6:	687b      	ldr	r3, [r7, #4]
    d3f8:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    d3fa:	687b      	ldr	r3, [r7, #4]
    d3fc:	689a      	ldr	r2, [r3, #8]
    d3fe:	687b      	ldr	r3, [r7, #4]
    d400:	685b      	ldr	r3, [r3, #4]
    d402:	429a      	cmp	r2, r3
    d404:	d250      	bcs.n	d4a8 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    d406:	687b      	ldr	r3, [r7, #4]
    d408:	685b      	ldr	r3, [r3, #4]
    d40a:	b29a      	uxth	r2, r3
    d40c:	687b      	ldr	r3, [r7, #4]
    d40e:	689b      	ldr	r3, [r3, #8]
    d410:	b29b      	uxth	r3, r3
    d412:	1ad3      	subs	r3, r2, r3
    d414:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    d416:	687b      	ldr	r3, [r7, #4]
    d418:	7cdb      	ldrb	r3, [r3, #19]
    d41a:	f003 0320 	and.w	r3, r3, #32
    d41e:	b2db      	uxtb	r3, r3
    d420:	2b00      	cmp	r3, #0
    d422:	d010      	beq.n	d446 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    d424:	687b      	ldr	r3, [r7, #4]
    d426:	8a1b      	ldrh	r3, [r3, #16]
    d428:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d42a:	429a      	cmp	r2, r3
    d42c:	d902      	bls.n	d434 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    d42e:	687b      	ldr	r3, [r7, #4]
    d430:	8a1b      	ldrh	r3, [r3, #16]
    d432:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    d434:	687b      	ldr	r3, [r7, #4]
    d436:	68db      	ldr	r3, [r3, #12]
    d438:	461a      	mov	r2, r3
    d43a:	7ffb      	ldrb	r3, [r7, #31]
    d43c:	2100      	movs	r1, #0
    d43e:	4618      	mov	r0, r3
    d440:	4b35      	ldr	r3, [pc, #212]	; (d518 <_usb_d_dev_out_next+0x280>)
    d442:	4798      	blx	r3
    d444:	e029      	b.n	d49a <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    d446:	687b      	ldr	r3, [r7, #4]
    d448:	8a1b      	ldrh	r3, [r3, #16]
    d44a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d44c:	429a      	cmp	r2, r3
    d44e:	d90f      	bls.n	d470 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    d450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    d452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    d456:	d903      	bls.n	d460 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    d458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    d45c:	84fb      	strh	r3, [r7, #38]	; 0x26
    d45e:	e011      	b.n	d484 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    d460:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d462:	8a7b      	ldrh	r3, [r7, #18]
    d464:	4013      	ands	r3, r2
    d466:	b29b      	uxth	r3, r3
    d468:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d46a:	1ad3      	subs	r3, r2, r3
    d46c:	84fb      	strh	r3, [r7, #38]	; 0x26
    d46e:	e009      	b.n	d484 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    d470:	687b      	ldr	r3, [r7, #4]
    d472:	8a1b      	ldrh	r3, [r3, #16]
    d474:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d476:	429a      	cmp	r2, r3
    d478:	d204      	bcs.n	d484 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    d47a:	687a      	ldr	r2, [r7, #4]
    d47c:	7cd3      	ldrb	r3, [r2, #19]
    d47e:	f043 0320 	orr.w	r3, r3, #32
    d482:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    d484:	687b      	ldr	r3, [r7, #4]
    d486:	681a      	ldr	r2, [r3, #0]
    d488:	687b      	ldr	r3, [r7, #4]
    d48a:	689b      	ldr	r3, [r3, #8]
    d48c:	4413      	add	r3, r2
    d48e:	461a      	mov	r2, r3
    d490:	7ffb      	ldrb	r3, [r7, #31]
    d492:	2100      	movs	r1, #0
    d494:	4618      	mov	r0, r3
    d496:	4b20      	ldr	r3, [pc, #128]	; (d518 <_usb_d_dev_out_next+0x280>)
    d498:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    d49a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d49c:	7ff8      	ldrb	r0, [r7, #31]
    d49e:	2300      	movs	r3, #0
    d4a0:	2100      	movs	r1, #0
    d4a2:	4c1e      	ldr	r4, [pc, #120]	; (d51c <_usb_d_dev_out_next+0x284>)
    d4a4:	47a0      	blx	r4
			goto _out_rx_exec;
    d4a6:	e01f      	b.n	d4e8 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    d4a8:	7bfb      	ldrb	r3, [r7, #15]
    d4aa:	2b00      	cmp	r3, #0
    d4ac:	d006      	beq.n	d4bc <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    d4ae:	7ffb      	ldrb	r3, [r7, #31]
    d4b0:	222d      	movs	r2, #45	; 0x2d
    d4b2:	4619      	mov	r1, r3
    d4b4:	6a38      	ldr	r0, [r7, #32]
    d4b6:	4b1a      	ldr	r3, [pc, #104]	; (d520 <_usb_d_dev_out_next+0x288>)
    d4b8:	4798      	blx	r3
    d4ba:	e005      	b.n	d4c8 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    d4bc:	7ffb      	ldrb	r3, [r7, #31]
    d4be:	2225      	movs	r2, #37	; 0x25
    d4c0:	4619      	mov	r1, r3
    d4c2:	6a38      	ldr	r0, [r7, #32]
    d4c4:	4b16      	ldr	r3, [pc, #88]	; (d520 <_usb_d_dev_out_next+0x288>)
    d4c6:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    d4c8:	7ffb      	ldrb	r3, [r7, #31]
    d4ca:	2b00      	cmp	r3, #0
    d4cc:	d107      	bne.n	d4de <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    d4ce:	687b      	ldr	r3, [r7, #4]
    d4d0:	68db      	ldr	r3, [r3, #12]
    d4d2:	461a      	mov	r2, r3
    d4d4:	7ffb      	ldrb	r3, [r7, #31]
    d4d6:	2100      	movs	r1, #0
    d4d8:	4618      	mov	r0, r3
    d4da:	4b0f      	ldr	r3, [pc, #60]	; (d518 <_usb_d_dev_out_next+0x280>)
    d4dc:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    d4de:	2100      	movs	r1, #0
    d4e0:	6878      	ldr	r0, [r7, #4]
    d4e2:	4b10      	ldr	r3, [pc, #64]	; (d524 <_usb_d_dev_out_next+0x28c>)
    d4e4:	4798      	blx	r3
	return;
    d4e6:	e031      	b.n	d54c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    d4e8:	78fb      	ldrb	r3, [r7, #3]
    d4ea:	f083 0301 	eor.w	r3, r3, #1
    d4ee:	b2db      	uxtb	r3, r3
    d4f0:	2b00      	cmp	r3, #0
    d4f2:	d025      	beq.n	d540 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    d4f4:	7bfb      	ldrb	r3, [r7, #15]
    d4f6:	2b00      	cmp	r3, #0
    d4f8:	d018      	beq.n	d52c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    d4fa:	7ffb      	ldrb	r3, [r7, #31]
    d4fc:	2101      	movs	r1, #1
    d4fe:	4618      	mov	r0, r3
    d500:	4b09      	ldr	r3, [pc, #36]	; (d528 <_usb_d_dev_out_next+0x290>)
    d502:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    d504:	232d      	movs	r3, #45	; 0x2d
    d506:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    d50a:	e012      	b.n	d532 <_usb_d_dev_out_next+0x29a>
    d50c:	200038d4 	.word	0x200038d4
    d510:	0000ca79 	.word	0x0000ca79
    d514:	00018b59 	.word	0x00018b59
    d518:	0000caa5 	.word	0x0000caa5
    d51c:	0000cc2d 	.word	0x0000cc2d
    d520:	0000c385 	.word	0x0000c385
    d524:	0000e3a9 	.word	0x0000e3a9
    d528:	0000cc6d 	.word	0x0000cc6d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    d52c:	2325      	movs	r3, #37	; 0x25
    d52e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    d532:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    d536:	7ffb      	ldrb	r3, [r7, #31]
    d538:	4619      	mov	r1, r3
    d53a:	6a38      	ldr	r0, [r7, #32]
    d53c:	4b05      	ldr	r3, [pc, #20]	; (d554 <_usb_d_dev_out_next+0x2bc>)
    d53e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    d540:	7ffb      	ldrb	r3, [r7, #31]
    d542:	2201      	movs	r2, #1
    d544:	2100      	movs	r1, #0
    d546:	4618      	mov	r0, r3
    d548:	4b03      	ldr	r3, [pc, #12]	; (d558 <_usb_d_dev_out_next+0x2c0>)
    d54a:	4798      	blx	r3
}
    d54c:	372c      	adds	r7, #44	; 0x2c
    d54e:	46bd      	mov	sp, r7
    d550:	bd90      	pop	{r4, r7, pc}
    d552:	bf00      	nop
    d554:	0000c359 	.word	0x0000c359
    d558:	0000ccfd 	.word	0x0000ccfd

0000d55c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    d55c:	b580      	push	{r7, lr}
    d55e:	b084      	sub	sp, #16
    d560:	af00      	add	r7, sp, #0
    d562:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    d564:	687b      	ldr	r3, [r7, #4]
    d566:	7c9b      	ldrb	r3, [r3, #18]
    d568:	f003 030f 	and.w	r3, r3, #15
    d56c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    d56e:	687b      	ldr	r3, [r7, #4]
    d570:	7cdb      	ldrb	r3, [r3, #19]
    d572:	f003 0307 	and.w	r3, r3, #7
    d576:	b2db      	uxtb	r3, r3
    d578:	2b01      	cmp	r3, #1
    d57a:	bf0c      	ite	eq
    d57c:	2301      	moveq	r3, #1
    d57e:	2300      	movne	r3, #0
    d580:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    d582:	7bbb      	ldrb	r3, [r7, #14]
    d584:	f083 0301 	eor.w	r3, r3, #1
    d588:	b2db      	uxtb	r3, r3
    d58a:	2b00      	cmp	r3, #0
    d58c:	d008      	beq.n	d5a0 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    d58e:	7bfb      	ldrb	r3, [r7, #15]
    d590:	4618      	mov	r0, r3
    d592:	4b20      	ldr	r3, [pc, #128]	; (d614 <_usb_d_dev_handle_setup+0xb8>)
    d594:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    d596:	7bfb      	ldrb	r3, [r7, #15]
    d598:	4618      	mov	r0, r3
    d59a:	4b1f      	ldr	r3, [pc, #124]	; (d618 <_usb_d_dev_handle_setup+0xbc>)
    d59c:	4798      	blx	r3
		return;
    d59e:	e036      	b.n	d60e <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    d5a0:	687b      	ldr	r3, [r7, #4]
    d5a2:	7cdb      	ldrb	r3, [r3, #19]
    d5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d5a8:	b2db      	uxtb	r3, r3
    d5aa:	2b00      	cmp	r3, #0
    d5ac:	d010      	beq.n	d5d0 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    d5ae:	687a      	ldr	r2, [r7, #4]
    d5b0:	7cd3      	ldrb	r3, [r2, #19]
    d5b2:	f36f 1386 	bfc	r3, #6, #1
    d5b6:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    d5b8:	7bfb      	ldrb	r3, [r7, #15]
    d5ba:	2200      	movs	r2, #0
    d5bc:	2101      	movs	r1, #1
    d5be:	4618      	mov	r0, r3
    d5c0:	4b16      	ldr	r3, [pc, #88]	; (d61c <_usb_d_dev_handle_setup+0xc0>)
    d5c2:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    d5c4:	7bfb      	ldrb	r3, [r7, #15]
    d5c6:	2200      	movs	r2, #0
    d5c8:	2100      	movs	r1, #0
    d5ca:	4618      	mov	r0, r3
    d5cc:	4b14      	ldr	r3, [pc, #80]	; (d620 <_usb_d_dev_handle_setup+0xc4>)
    d5ce:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    d5d0:	687a      	ldr	r2, [r7, #4]
    d5d2:	7cd3      	ldrb	r3, [r2, #19]
    d5d4:	f36f 03c3 	bfc	r3, #3, #1
    d5d8:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    d5da:	7bfb      	ldrb	r3, [r7, #15]
    d5dc:	2100      	movs	r1, #0
    d5de:	4618      	mov	r0, r3
    d5e0:	4b10      	ldr	r3, [pc, #64]	; (d624 <_usb_d_dev_handle_setup+0xc8>)
    d5e2:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    d5e4:	7bfb      	ldrb	r3, [r7, #15]
    d5e6:	2101      	movs	r1, #1
    d5e8:	4618      	mov	r0, r3
    d5ea:	4b0e      	ldr	r3, [pc, #56]	; (d624 <_usb_d_dev_handle_setup+0xc8>)
    d5ec:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    d5ee:	7bfb      	ldrb	r3, [r7, #15]
    d5f0:	216f      	movs	r1, #111	; 0x6f
    d5f2:	4618      	mov	r0, r3
    d5f4:	4b0c      	ldr	r3, [pc, #48]	; (d628 <_usb_d_dev_handle_setup+0xcc>)
    d5f6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    d5f8:	7bfb      	ldrb	r3, [r7, #15]
    d5fa:	216f      	movs	r1, #111	; 0x6f
    d5fc:	4618      	mov	r0, r3
    d5fe:	4b0b      	ldr	r3, [pc, #44]	; (d62c <_usb_d_dev_handle_setup+0xd0>)
    d600:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    d602:	4b0b      	ldr	r3, [pc, #44]	; (d630 <_usb_d_dev_handle_setup+0xd4>)
    d604:	689b      	ldr	r3, [r3, #8]
    d606:	687a      	ldr	r2, [r7, #4]
    d608:	7c92      	ldrb	r2, [r2, #18]
    d60a:	4610      	mov	r0, r2
    d60c:	4798      	blx	r3
}
    d60e:	3710      	adds	r7, #16
    d610:	46bd      	mov	sp, r7
    d612:	bd80      	pop	{r7, pc}
    d614:	0000ca01 	.word	0x0000ca01
    d618:	0000c9ad 	.word	0x0000c9ad
    d61c:	0000cca5 	.word	0x0000cca5
    d620:	0000ccfd 	.word	0x0000ccfd
    d624:	0000cc6d 	.word	0x0000cc6d
    d628:	0000c7ad 	.word	0x0000c7ad
    d62c:	0000c7fd 	.word	0x0000c7fd
    d630:	2000380c 	.word	0x2000380c

0000d634 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    d634:	b580      	push	{r7, lr}
    d636:	b084      	sub	sp, #16
    d638:	af00      	add	r7, sp, #0
    d63a:	6078      	str	r0, [r7, #4]
    d63c:	460b      	mov	r3, r1
    d63e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d640:	687b      	ldr	r3, [r7, #4]
    d642:	7c9b      	ldrb	r3, [r3, #18]
    d644:	f003 030f 	and.w	r3, r3, #15
    d648:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    d64a:	78f9      	ldrb	r1, [r7, #3]
    d64c:	7bfb      	ldrb	r3, [r7, #15]
    d64e:	2200      	movs	r2, #0
    d650:	4618      	mov	r0, r3
    d652:	4b07      	ldr	r3, [pc, #28]	; (d670 <_usb_d_dev_handle_stall+0x3c>)
    d654:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    d656:	4b07      	ldr	r3, [pc, #28]	; (d674 <_usb_d_dev_handle_stall+0x40>)
    d658:	691b      	ldr	r3, [r3, #16]
    d65a:	687a      	ldr	r2, [r7, #4]
    d65c:	7c90      	ldrb	r0, [r2, #18]
    d65e:	687a      	ldr	r2, [r7, #4]
    d660:	6892      	ldr	r2, [r2, #8]
    d662:	2101      	movs	r1, #1
    d664:	4798      	blx	r3
}
    d666:	bf00      	nop
    d668:	3710      	adds	r7, #16
    d66a:	46bd      	mov	sp, r7
    d66c:	bd80      	pop	{r7, pc}
    d66e:	bf00      	nop
    d670:	0000c961 	.word	0x0000c961
    d674:	2000380c 	.word	0x2000380c

0000d678 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    d678:	b580      	push	{r7, lr}
    d67a:	b088      	sub	sp, #32
    d67c:	af00      	add	r7, sp, #0
    d67e:	6078      	str	r0, [r7, #4]
    d680:	460b      	mov	r3, r1
    d682:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    d684:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d688:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    d68a:	687b      	ldr	r3, [r7, #4]
    d68c:	7c9b      	ldrb	r3, [r3, #18]
    d68e:	f003 030f 	and.w	r3, r3, #15
    d692:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    d694:	4b61      	ldr	r3, [pc, #388]	; (d81c <_usb_d_dev_handle_trfail+0x1a4>)
    d696:	881b      	ldrh	r3, [r3, #0]
    d698:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    d69a:	7efb      	ldrb	r3, [r7, #27]
    d69c:	015b      	lsls	r3, r3, #5
    d69e:	4a60      	ldr	r2, [pc, #384]	; (d820 <_usb_d_dev_handle_trfail+0x1a8>)
    d6a0:	4413      	add	r3, r2
    d6a2:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    d6a4:	78fb      	ldrb	r3, [r7, #3]
    d6a6:	2b00      	cmp	r3, #0
    d6a8:	d006      	beq.n	d6b8 <_usb_d_dev_handle_trfail+0x40>
    d6aa:	7efb      	ldrb	r3, [r7, #27]
    d6ac:	4619      	mov	r1, r3
    d6ae:	69f8      	ldr	r0, [r7, #28]
    d6b0:	4b5c      	ldr	r3, [pc, #368]	; (d824 <_usb_d_dev_handle_trfail+0x1ac>)
    d6b2:	4798      	blx	r3
    d6b4:	4603      	mov	r3, r0
    d6b6:	e005      	b.n	d6c4 <_usb_d_dev_handle_trfail+0x4c>
    d6b8:	7efb      	ldrb	r3, [r7, #27]
    d6ba:	4619      	mov	r1, r3
    d6bc:	69f8      	ldr	r0, [r7, #28]
    d6be:	4b5a      	ldr	r3, [pc, #360]	; (d828 <_usb_d_dev_handle_trfail+0x1b0>)
    d6c0:	4798      	blx	r3
    d6c2:	4603      	mov	r3, r0
    d6c4:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    d6c6:	687b      	ldr	r3, [r7, #4]
    d6c8:	7cdb      	ldrb	r3, [r3, #19]
    d6ca:	f003 0307 	and.w	r3, r3, #7
    d6ce:	b2db      	uxtb	r3, r3
    d6d0:	2b01      	cmp	r3, #1
    d6d2:	bf0c      	ite	eq
    d6d4:	2301      	moveq	r3, #1
    d6d6:	2300      	movne	r3, #0
    d6d8:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    d6da:	78fb      	ldrb	r3, [r7, #3]
    d6dc:	011b      	lsls	r3, r3, #4
    d6de:	697a      	ldr	r2, [r7, #20]
    d6e0:	4413      	add	r3, r2
    d6e2:	7a9b      	ldrb	r3, [r3, #10]
    d6e4:	b2db      	uxtb	r3, r3
    d6e6:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    d6e8:	7cfb      	ldrb	r3, [r7, #19]
    d6ea:	2b02      	cmp	r3, #2
    d6ec:	d12f      	bne.n	d74e <_usb_d_dev_handle_trfail+0xd6>
    d6ee:	7b3b      	ldrb	r3, [r7, #12]
    d6f0:	f003 0301 	and.w	r3, r3, #1
    d6f4:	b2db      	uxtb	r3, r3
    d6f6:	2b00      	cmp	r3, #0
    d6f8:	d029      	beq.n	d74e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    d6fa:	78fb      	ldrb	r3, [r7, #3]
    d6fc:	011b      	lsls	r3, r3, #4
    d6fe:	697a      	ldr	r2, [r7, #20]
    d700:	441a      	add	r2, r3
    d702:	7a93      	ldrb	r3, [r2, #10]
    d704:	f36f 0300 	bfc	r3, #0, #1
    d708:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    d70a:	78fb      	ldrb	r3, [r7, #3]
    d70c:	f107 0220 	add.w	r2, r7, #32
    d710:	4413      	add	r3, r2
    d712:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    d716:	7efb      	ldrb	r3, [r7, #27]
    d718:	4619      	mov	r1, r3
    d71a:	69f8      	ldr	r0, [r7, #28]
    d71c:	4b43      	ldr	r3, [pc, #268]	; (d82c <_usb_d_dev_handle_trfail+0x1b4>)
    d71e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    d720:	78fb      	ldrb	r3, [r7, #3]
    d722:	f107 0220 	add.w	r2, r7, #32
    d726:	4413      	add	r3, r2
    d728:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    d72c:	7efb      	ldrb	r3, [r7, #27]
    d72e:	4619      	mov	r1, r3
    d730:	69f8      	ldr	r0, [r7, #28]
    d732:	4b3f      	ldr	r3, [pc, #252]	; (d830 <_usb_d_dev_handle_trfail+0x1b8>)
    d734:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    d736:	78fb      	ldrb	r3, [r7, #3]
    d738:	2b00      	cmp	r3, #0
    d73a:	bf14      	ite	ne
    d73c:	2301      	movne	r3, #1
    d73e:	2300      	moveq	r3, #0
    d740:	b2db      	uxtb	r3, r3
    d742:	2204      	movs	r2, #4
    d744:	4619      	mov	r1, r3
    d746:	6878      	ldr	r0, [r7, #4]
    d748:	4b3a      	ldr	r3, [pc, #232]	; (d834 <_usb_d_dev_handle_trfail+0x1bc>)
    d74a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    d74c:	e062      	b.n	d814 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    d74e:	7b3b      	ldrb	r3, [r7, #12]
    d750:	f003 0302 	and.w	r3, r3, #2
    d754:	b2db      	uxtb	r3, r3
    d756:	2b00      	cmp	r3, #0
    d758:	d040      	beq.n	d7dc <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    d75a:	78fb      	ldrb	r3, [r7, #3]
    d75c:	011b      	lsls	r3, r3, #4
    d75e:	697a      	ldr	r2, [r7, #20]
    d760:	441a      	add	r2, r3
    d762:	7a93      	ldrb	r3, [r2, #10]
    d764:	f36f 0341 	bfc	r3, #1, #1
    d768:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    d76a:	78fb      	ldrb	r3, [r7, #3]
    d76c:	f107 0220 	add.w	r2, r7, #32
    d770:	4413      	add	r3, r2
    d772:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    d776:	7efb      	ldrb	r3, [r7, #27]
    d778:	4619      	mov	r1, r3
    d77a:	69f8      	ldr	r0, [r7, #28]
    d77c:	4b2b      	ldr	r3, [pc, #172]	; (d82c <_usb_d_dev_handle_trfail+0x1b4>)
    d77e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    d780:	78fb      	ldrb	r3, [r7, #3]
    d782:	f107 0220 	add.w	r2, r7, #32
    d786:	4413      	add	r3, r2
    d788:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    d78c:	7efb      	ldrb	r3, [r7, #27]
    d78e:	4619      	mov	r1, r3
    d790:	69f8      	ldr	r0, [r7, #28]
    d792:	4b27      	ldr	r3, [pc, #156]	; (d830 <_usb_d_dev_handle_trfail+0x1b8>)
    d794:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    d796:	7cbb      	ldrb	r3, [r7, #18]
    d798:	2b00      	cmp	r3, #0
    d79a:	d03b      	beq.n	d814 <_usb_d_dev_handle_trfail+0x19c>
    d79c:	687b      	ldr	r3, [r7, #4]
    d79e:	7cdb      	ldrb	r3, [r3, #19]
    d7a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d7a4:	b2db      	uxtb	r3, r3
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	d034      	beq.n	d814 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    d7aa:	687b      	ldr	r3, [r7, #4]
    d7ac:	7cdb      	ldrb	r3, [r3, #19]
    d7ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    d7b2:	b2db      	uxtb	r3, r3
    d7b4:	461a      	mov	r2, r3
    d7b6:	78fb      	ldrb	r3, [r7, #3]
    d7b8:	4293      	cmp	r3, r2
    d7ba:	d02b      	beq.n	d814 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    d7bc:	687b      	ldr	r3, [r7, #4]
    d7be:	7cdb      	ldrb	r3, [r3, #19]
    d7c0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    d7c4:	b2db      	uxtb	r3, r3
    d7c6:	2b00      	cmp	r3, #0
    d7c8:	bf14      	ite	ne
    d7ca:	2301      	movne	r3, #1
    d7cc:	2300      	moveq	r3, #0
    d7ce:	b2db      	uxtb	r3, r3
    d7d0:	2200      	movs	r2, #0
    d7d2:	4619      	mov	r1, r3
    d7d4:	6878      	ldr	r0, [r7, #4]
    d7d6:	4b17      	ldr	r3, [pc, #92]	; (d834 <_usb_d_dev_handle_trfail+0x1bc>)
    d7d8:	4798      	blx	r3
}
    d7da:	e01b      	b.n	d814 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    d7dc:	78fa      	ldrb	r2, [r7, #3]
    d7de:	7efb      	ldrb	r3, [r7, #27]
    d7e0:	4611      	mov	r1, r2
    d7e2:	4618      	mov	r0, r3
    d7e4:	4b14      	ldr	r3, [pc, #80]	; (d838 <_usb_d_dev_handle_trfail+0x1c0>)
    d7e6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    d7e8:	78fb      	ldrb	r3, [r7, #3]
    d7ea:	f107 0220 	add.w	r2, r7, #32
    d7ee:	4413      	add	r3, r2
    d7f0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    d7f4:	7efb      	ldrb	r3, [r7, #27]
    d7f6:	4619      	mov	r1, r3
    d7f8:	69f8      	ldr	r0, [r7, #28]
    d7fa:	4b0c      	ldr	r3, [pc, #48]	; (d82c <_usb_d_dev_handle_trfail+0x1b4>)
    d7fc:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    d7fe:	78fb      	ldrb	r3, [r7, #3]
    d800:	f107 0220 	add.w	r2, r7, #32
    d804:	4413      	add	r3, r2
    d806:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    d80a:	7efb      	ldrb	r3, [r7, #27]
    d80c:	4619      	mov	r1, r3
    d80e:	69f8      	ldr	r0, [r7, #28]
    d810:	4b07      	ldr	r3, [pc, #28]	; (d830 <_usb_d_dev_handle_trfail+0x1b8>)
    d812:	4798      	blx	r3
}
    d814:	bf00      	nop
    d816:	3720      	adds	r7, #32
    d818:	46bd      	mov	sp, r7
    d81a:	bd80      	pop	{r7, pc}
    d81c:	0001d2f0 	.word	0x0001d2f0
    d820:	200038d4 	.word	0x200038d4
    d824:	0000c3e1 	.word	0x0000c3e1
    d828:	0000c3b1 	.word	0x0000c3b1
    d82c:	0000c285 	.word	0x0000c285
    d830:	0000c385 	.word	0x0000c385
    d834:	0000e3f1 	.word	0x0000e3f1
    d838:	0000cc6d 	.word	0x0000cc6d

0000d83c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    d83c:	b580      	push	{r7, lr}
    d83e:	b082      	sub	sp, #8
    d840:	af00      	add	r7, sp, #0
    d842:	6078      	str	r0, [r7, #4]
    d844:	460b      	mov	r3, r1
    d846:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    d848:	78fb      	ldrb	r3, [r7, #3]
    d84a:	f003 0310 	and.w	r3, r3, #16
    d84e:	2b00      	cmp	r3, #0
    d850:	d003      	beq.n	d85a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    d852:	6878      	ldr	r0, [r7, #4]
    d854:	4b0c      	ldr	r3, [pc, #48]	; (d888 <_usb_d_dev_trans_setup_isr+0x4c>)
    d856:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    d858:	e012      	b.n	d880 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    d85a:	78fb      	ldrb	r3, [r7, #3]
    d85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d860:	2b00      	cmp	r3, #0
    d862:	d004      	beq.n	d86e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    d864:	2101      	movs	r1, #1
    d866:	6878      	ldr	r0, [r7, #4]
    d868:	4b08      	ldr	r3, [pc, #32]	; (d88c <_usb_d_dev_trans_setup_isr+0x50>)
    d86a:	4798      	blx	r3
}
    d86c:	e008      	b.n	d880 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    d86e:	78fb      	ldrb	r3, [r7, #3]
    d870:	f003 0320 	and.w	r3, r3, #32
    d874:	2b00      	cmp	r3, #0
    d876:	d003      	beq.n	d880 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    d878:	2100      	movs	r1, #0
    d87a:	6878      	ldr	r0, [r7, #4]
    d87c:	4b03      	ldr	r3, [pc, #12]	; (d88c <_usb_d_dev_trans_setup_isr+0x50>)
    d87e:	4798      	blx	r3
}
    d880:	bf00      	nop
    d882:	3708      	adds	r7, #8
    d884:	46bd      	mov	sp, r7
    d886:	bd80      	pop	{r7, pc}
    d888:	0000d55d 	.word	0x0000d55d
    d88c:	0000d635 	.word	0x0000d635

0000d890 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    d890:	b580      	push	{r7, lr}
    d892:	b082      	sub	sp, #8
    d894:	af00      	add	r7, sp, #0
    d896:	6078      	str	r0, [r7, #4]
    d898:	460b      	mov	r3, r1
    d89a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    d89c:	78fb      	ldrb	r3, [r7, #3]
    d89e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d8a2:	2b00      	cmp	r3, #0
    d8a4:	d004      	beq.n	d8b0 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    d8a6:	2101      	movs	r1, #1
    d8a8:	6878      	ldr	r0, [r7, #4]
    d8aa:	4b1a      	ldr	r3, [pc, #104]	; (d914 <_usb_d_dev_trans_in_isr+0x84>)
    d8ac:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    d8ae:	e02c      	b.n	d90a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    d8b0:	78fb      	ldrb	r3, [r7, #3]
    d8b2:	f003 0308 	and.w	r3, r3, #8
    d8b6:	2b00      	cmp	r3, #0
    d8b8:	d004      	beq.n	d8c4 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    d8ba:	2101      	movs	r1, #1
    d8bc:	6878      	ldr	r0, [r7, #4]
    d8be:	4b16      	ldr	r3, [pc, #88]	; (d918 <_usb_d_dev_trans_in_isr+0x88>)
    d8c0:	4798      	blx	r3
}
    d8c2:	e022      	b.n	d90a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    d8c4:	78fb      	ldrb	r3, [r7, #3]
    d8c6:	f003 0302 	and.w	r3, r3, #2
    d8ca:	2b00      	cmp	r3, #0
    d8cc:	d004      	beq.n	d8d8 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    d8ce:	2101      	movs	r1, #1
    d8d0:	6878      	ldr	r0, [r7, #4]
    d8d2:	4b12      	ldr	r3, [pc, #72]	; (d91c <_usb_d_dev_trans_in_isr+0x8c>)
    d8d4:	4798      	blx	r3
}
    d8d6:	e018      	b.n	d90a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    d8d8:	687b      	ldr	r3, [r7, #4]
    d8da:	7cdb      	ldrb	r3, [r3, #19]
    d8dc:	f003 0307 	and.w	r3, r3, #7
    d8e0:	b2db      	uxtb	r3, r3
    d8e2:	2b01      	cmp	r3, #1
    d8e4:	d111      	bne.n	d90a <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    d8e6:	78fb      	ldrb	r3, [r7, #3]
    d8e8:	f003 0304 	and.w	r3, r3, #4
    d8ec:	2b00      	cmp	r3, #0
    d8ee:	d004      	beq.n	d8fa <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    d8f0:	2100      	movs	r1, #0
    d8f2:	6878      	ldr	r0, [r7, #4]
    d8f4:	4b08      	ldr	r3, [pc, #32]	; (d918 <_usb_d_dev_trans_in_isr+0x88>)
    d8f6:	4798      	blx	r3
}
    d8f8:	e007      	b.n	d90a <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    d8fa:	78fb      	ldrb	r3, [r7, #3]
    d8fc:	f003 0310 	and.w	r3, r3, #16
    d900:	2b00      	cmp	r3, #0
    d902:	d002      	beq.n	d90a <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    d904:	6878      	ldr	r0, [r7, #4]
    d906:	4b06      	ldr	r3, [pc, #24]	; (d920 <_usb_d_dev_trans_in_isr+0x90>)
    d908:	4798      	blx	r3
}
    d90a:	bf00      	nop
    d90c:	3708      	adds	r7, #8
    d90e:	46bd      	mov	sp, r7
    d910:	bd80      	pop	{r7, pc}
    d912:	bf00      	nop
    d914:	0000d635 	.word	0x0000d635
    d918:	0000d679 	.word	0x0000d679
    d91c:	0000d081 	.word	0x0000d081
    d920:	0000d55d 	.word	0x0000d55d

0000d924 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    d924:	b580      	push	{r7, lr}
    d926:	b082      	sub	sp, #8
    d928:	af00      	add	r7, sp, #0
    d92a:	6078      	str	r0, [r7, #4]
    d92c:	460b      	mov	r3, r1
    d92e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    d930:	78fb      	ldrb	r3, [r7, #3]
    d932:	f003 0320 	and.w	r3, r3, #32
    d936:	2b00      	cmp	r3, #0
    d938:	d004      	beq.n	d944 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    d93a:	2100      	movs	r1, #0
    d93c:	6878      	ldr	r0, [r7, #4]
    d93e:	4b1a      	ldr	r3, [pc, #104]	; (d9a8 <_usb_d_dev_trans_out_isr+0x84>)
    d940:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    d942:	e02c      	b.n	d99e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    d944:	78fb      	ldrb	r3, [r7, #3]
    d946:	f003 0304 	and.w	r3, r3, #4
    d94a:	2b00      	cmp	r3, #0
    d94c:	d004      	beq.n	d958 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    d94e:	2100      	movs	r1, #0
    d950:	6878      	ldr	r0, [r7, #4]
    d952:	4b16      	ldr	r3, [pc, #88]	; (d9ac <_usb_d_dev_trans_out_isr+0x88>)
    d954:	4798      	blx	r3
}
    d956:	e022      	b.n	d99e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    d958:	78fb      	ldrb	r3, [r7, #3]
    d95a:	f003 0301 	and.w	r3, r3, #1
    d95e:	2b00      	cmp	r3, #0
    d960:	d004      	beq.n	d96c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    d962:	2101      	movs	r1, #1
    d964:	6878      	ldr	r0, [r7, #4]
    d966:	4b12      	ldr	r3, [pc, #72]	; (d9b0 <_usb_d_dev_trans_out_isr+0x8c>)
    d968:	4798      	blx	r3
}
    d96a:	e018      	b.n	d99e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    d96c:	687b      	ldr	r3, [r7, #4]
    d96e:	7cdb      	ldrb	r3, [r3, #19]
    d970:	f003 0307 	and.w	r3, r3, #7
    d974:	b2db      	uxtb	r3, r3
    d976:	2b01      	cmp	r3, #1
    d978:	d111      	bne.n	d99e <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    d97a:	78fb      	ldrb	r3, [r7, #3]
    d97c:	f003 0308 	and.w	r3, r3, #8
    d980:	2b00      	cmp	r3, #0
    d982:	d004      	beq.n	d98e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    d984:	2101      	movs	r1, #1
    d986:	6878      	ldr	r0, [r7, #4]
    d988:	4b08      	ldr	r3, [pc, #32]	; (d9ac <_usb_d_dev_trans_out_isr+0x88>)
    d98a:	4798      	blx	r3
}
    d98c:	e007      	b.n	d99e <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    d98e:	78fb      	ldrb	r3, [r7, #3]
    d990:	f003 0310 	and.w	r3, r3, #16
    d994:	2b00      	cmp	r3, #0
    d996:	d002      	beq.n	d99e <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    d998:	6878      	ldr	r0, [r7, #4]
    d99a:	4b06      	ldr	r3, [pc, #24]	; (d9b4 <_usb_d_dev_trans_out_isr+0x90>)
    d99c:	4798      	blx	r3
}
    d99e:	bf00      	nop
    d9a0:	3708      	adds	r7, #8
    d9a2:	46bd      	mov	sp, r7
    d9a4:	bd80      	pop	{r7, pc}
    d9a6:	bf00      	nop
    d9a8:	0000d635 	.word	0x0000d635
    d9ac:	0000d679 	.word	0x0000d679
    d9b0:	0000d299 	.word	0x0000d299
    d9b4:	0000d55d 	.word	0x0000d55d

0000d9b8 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    d9b8:	b580      	push	{r7, lr}
    d9ba:	b084      	sub	sp, #16
    d9bc:	af00      	add	r7, sp, #0
    d9be:	6078      	str	r0, [r7, #4]
    d9c0:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    d9c2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d9c6:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d9c8:	683b      	ldr	r3, [r7, #0]
    d9ca:	7c9b      	ldrb	r3, [r3, #18]
    d9cc:	f003 030f 	and.w	r3, r3, #15
    d9d0:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    d9d2:	7afb      	ldrb	r3, [r7, #11]
    d9d4:	2201      	movs	r2, #1
    d9d6:	409a      	lsls	r2, r3
    d9d8:	687b      	ldr	r3, [r7, #4]
    d9da:	4013      	ands	r3, r2
    d9dc:	2b00      	cmp	r3, #0
    d9de:	d03d      	beq.n	da5c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    d9e0:	7afb      	ldrb	r3, [r7, #11]
    d9e2:	68fa      	ldr	r2, [r7, #12]
    d9e4:	3308      	adds	r3, #8
    d9e6:	015b      	lsls	r3, r3, #5
    d9e8:	4413      	add	r3, r2
    d9ea:	3307      	adds	r3, #7
    d9ec:	781b      	ldrb	r3, [r3, #0]
    d9ee:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    d9f0:	7afb      	ldrb	r3, [r7, #11]
    d9f2:	68fa      	ldr	r2, [r7, #12]
    d9f4:	015b      	lsls	r3, r3, #5
    d9f6:	4413      	add	r3, r2
    d9f8:	f203 1309 	addw	r3, r3, #265	; 0x109
    d9fc:	781b      	ldrb	r3, [r3, #0]
    d9fe:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    da00:	7aba      	ldrb	r2, [r7, #10]
    da02:	7a7b      	ldrb	r3, [r7, #9]
    da04:	4013      	ands	r3, r2
    da06:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    da08:	7abb      	ldrb	r3, [r7, #10]
    da0a:	2b00      	cmp	r3, #0
    da0c:	d027      	beq.n	da5e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    da0e:	683b      	ldr	r3, [r7, #0]
    da10:	7cdb      	ldrb	r3, [r3, #19]
    da12:	f003 0307 	and.w	r3, r3, #7
    da16:	b2db      	uxtb	r3, r3
    da18:	2b01      	cmp	r3, #1
    da1a:	d10c      	bne.n	da36 <_usb_d_dev_handle_eps+0x7e>
    da1c:	683b      	ldr	r3, [r7, #0]
    da1e:	7cdb      	ldrb	r3, [r3, #19]
    da20:	f003 0340 	and.w	r3, r3, #64	; 0x40
    da24:	b2db      	uxtb	r3, r3
    da26:	2b00      	cmp	r3, #0
    da28:	d105      	bne.n	da36 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    da2a:	7abb      	ldrb	r3, [r7, #10]
    da2c:	4619      	mov	r1, r3
    da2e:	6838      	ldr	r0, [r7, #0]
    da30:	4b0c      	ldr	r3, [pc, #48]	; (da64 <_usb_d_dev_handle_eps+0xac>)
    da32:	4798      	blx	r3
    da34:	e013      	b.n	da5e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    da36:	683b      	ldr	r3, [r7, #0]
    da38:	7cdb      	ldrb	r3, [r3, #19]
    da3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    da3e:	b2db      	uxtb	r3, r3
    da40:	2b00      	cmp	r3, #0
    da42:	d005      	beq.n	da50 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    da44:	7abb      	ldrb	r3, [r7, #10]
    da46:	4619      	mov	r1, r3
    da48:	6838      	ldr	r0, [r7, #0]
    da4a:	4b07      	ldr	r3, [pc, #28]	; (da68 <_usb_d_dev_handle_eps+0xb0>)
    da4c:	4798      	blx	r3
    da4e:	e006      	b.n	da5e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    da50:	7abb      	ldrb	r3, [r7, #10]
    da52:	4619      	mov	r1, r3
    da54:	6838      	ldr	r0, [r7, #0]
    da56:	4b05      	ldr	r3, [pc, #20]	; (da6c <_usb_d_dev_handle_eps+0xb4>)
    da58:	4798      	blx	r3
    da5a:	e000      	b.n	da5e <_usb_d_dev_handle_eps+0xa6>
		return;
    da5c:	bf00      	nop
		}
	}
}
    da5e:	3710      	adds	r7, #16
    da60:	46bd      	mov	sp, r7
    da62:	bd80      	pop	{r7, pc}
    da64:	0000d83d 	.word	0x0000d83d
    da68:	0000d891 	.word	0x0000d891
    da6c:	0000d925 	.word	0x0000d925

0000da70 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    da70:	b580      	push	{r7, lr}
    da72:	b084      	sub	sp, #16
    da74:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    da76:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    da7a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    da7c:	68bb      	ldr	r3, [r7, #8]
    da7e:	8c1b      	ldrh	r3, [r3, #32]
    da80:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    da82:	88fb      	ldrh	r3, [r7, #6]
    da84:	2b00      	cmp	r3, #0
    da86:	d104      	bne.n	da92 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    da88:	4b13      	ldr	r3, [pc, #76]	; (dad8 <_usb_d_dev_handler+0x68>)
    da8a:	4798      	blx	r3
    da8c:	4603      	mov	r3, r0
    da8e:	2b00      	cmp	r3, #0
    da90:	d11e      	bne.n	dad0 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    da92:	2300      	movs	r3, #0
    da94:	73fb      	strb	r3, [r7, #15]
    da96:	e017      	b.n	dac8 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    da98:	7bfa      	ldrb	r2, [r7, #15]
    da9a:	4613      	mov	r3, r2
    da9c:	009b      	lsls	r3, r3, #2
    da9e:	4413      	add	r3, r2
    daa0:	009b      	lsls	r3, r3, #2
    daa2:	3310      	adds	r3, #16
    daa4:	4a0d      	ldr	r2, [pc, #52]	; (dadc <_usb_d_dev_handler+0x6c>)
    daa6:	4413      	add	r3, r2
    daa8:	3304      	adds	r3, #4
    daaa:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    daac:	683b      	ldr	r3, [r7, #0]
    daae:	7c9b      	ldrb	r3, [r3, #18]
    dab0:	2bff      	cmp	r3, #255	; 0xff
    dab2:	d005      	beq.n	dac0 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    dab4:	88fb      	ldrh	r3, [r7, #6]
    dab6:	6839      	ldr	r1, [r7, #0]
    dab8:	4618      	mov	r0, r3
    daba:	4b09      	ldr	r3, [pc, #36]	; (dae0 <_usb_d_dev_handler+0x70>)
    dabc:	4798      	blx	r3
    dabe:	e000      	b.n	dac2 <_usb_d_dev_handler+0x52>
			continue;
    dac0:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    dac2:	7bfb      	ldrb	r3, [r7, #15]
    dac4:	3301      	adds	r3, #1
    dac6:	73fb      	strb	r3, [r7, #15]
    dac8:	7bfb      	ldrb	r3, [r7, #15]
    daca:	2b08      	cmp	r3, #8
    dacc:	d9e4      	bls.n	da98 <_usb_d_dev_handler+0x28>
    dace:	e000      	b.n	dad2 <_usb_d_dev_handler+0x62>
			return;
    dad0:	bf00      	nop
	}
}
    dad2:	3710      	adds	r7, #16
    dad4:	46bd      	mov	sp, r7
    dad6:	bd80      	pop	{r7, pc}
    dad8:	0000cfc9 	.word	0x0000cfc9
    dadc:	2000380c 	.word	0x2000380c
    dae0:	0000d9b9 	.word	0x0000d9b9

0000dae4 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    dae4:	b580      	push	{r7, lr}
    dae6:	b082      	sub	sp, #8
    dae8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    daea:	2300      	movs	r3, #0
    daec:	71fb      	strb	r3, [r7, #7]
    daee:	e023      	b.n	db38 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    daf0:	79fa      	ldrb	r2, [r7, #7]
    daf2:	4613      	mov	r3, r2
    daf4:	009b      	lsls	r3, r3, #2
    daf6:	4413      	add	r3, r2
    daf8:	009b      	lsls	r3, r3, #2
    dafa:	3310      	adds	r3, #16
    dafc:	4a14      	ldr	r2, [pc, #80]	; (db50 <_usb_d_dev_reset_epts+0x6c>)
    dafe:	4413      	add	r3, r2
    db00:	3304      	adds	r3, #4
    db02:	2103      	movs	r1, #3
    db04:	4618      	mov	r0, r3
    db06:	4b13      	ldr	r3, [pc, #76]	; (db54 <_usb_d_dev_reset_epts+0x70>)
    db08:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    db0a:	79fa      	ldrb	r2, [r7, #7]
    db0c:	4910      	ldr	r1, [pc, #64]	; (db50 <_usb_d_dev_reset_epts+0x6c>)
    db0e:	4613      	mov	r3, r2
    db10:	009b      	lsls	r3, r3, #2
    db12:	4413      	add	r3, r2
    db14:	009b      	lsls	r3, r3, #2
    db16:	440b      	add	r3, r1
    db18:	3326      	adds	r3, #38	; 0x26
    db1a:	22ff      	movs	r2, #255	; 0xff
    db1c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    db1e:	79fa      	ldrb	r2, [r7, #7]
    db20:	490b      	ldr	r1, [pc, #44]	; (db50 <_usb_d_dev_reset_epts+0x6c>)
    db22:	4613      	mov	r3, r2
    db24:	009b      	lsls	r3, r3, #2
    db26:	4413      	add	r3, r2
    db28:	009b      	lsls	r3, r3, #2
    db2a:	440b      	add	r3, r1
    db2c:	3327      	adds	r3, #39	; 0x27
    db2e:	2200      	movs	r2, #0
    db30:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    db32:	79fb      	ldrb	r3, [r7, #7]
    db34:	3301      	adds	r3, #1
    db36:	71fb      	strb	r3, [r7, #7]
    db38:	79fb      	ldrb	r3, [r7, #7]
    db3a:	2b08      	cmp	r3, #8
    db3c:	d9d8      	bls.n	daf0 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    db3e:	22a0      	movs	r2, #160	; 0xa0
    db40:	2100      	movs	r1, #0
    db42:	4805      	ldr	r0, [pc, #20]	; (db58 <_usb_d_dev_reset_epts+0x74>)
    db44:	4b05      	ldr	r3, [pc, #20]	; (db5c <_usb_d_dev_reset_epts+0x78>)
    db46:	4798      	blx	r3
}
    db48:	bf00      	nop
    db4a:	3708      	adds	r7, #8
    db4c:	46bd      	mov	sp, r7
    db4e:	bd80      	pop	{r7, pc}
    db50:	2000380c 	.word	0x2000380c
    db54:	0000e3a9 	.word	0x0000e3a9
    db58:	200038d4 	.word	0x200038d4
    db5c:	00018c8d 	.word	0x00018c8d

0000db60 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    db60:	b580      	push	{r7, lr}
    db62:	b084      	sub	sp, #16
    db64:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    db66:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    db6a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    db6c:	2301      	movs	r3, #1
    db6e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    db70:	2304      	movs	r3, #4
    db72:	713b      	strb	r3, [r7, #4]
    db74:	2300      	movs	r3, #0
    db76:	717b      	strb	r3, [r7, #5]
    db78:	2300      	movs	r3, #0
    db7a:	71bb      	strb	r3, [r7, #6]
    db7c:	2300      	movs	r3, #0
    db7e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    db80:	2101      	movs	r1, #1
    db82:	68f8      	ldr	r0, [r7, #12]
    db84:	4b26      	ldr	r3, [pc, #152]	; (dc20 <_usb_d_dev_init+0xc0>)
    db86:	4798      	blx	r3
    db88:	4603      	mov	r3, r0
    db8a:	f083 0301 	eor.w	r3, r3, #1
    db8e:	b2db      	uxtb	r3, r3
    db90:	2b00      	cmp	r3, #0
    db92:	d011      	beq.n	dbb8 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    db94:	2102      	movs	r1, #2
    db96:	68f8      	ldr	r0, [r7, #12]
    db98:	4b22      	ldr	r3, [pc, #136]	; (dc24 <_usb_d_dev_init+0xc4>)
    db9a:	4798      	blx	r3
    db9c:	4603      	mov	r3, r0
    db9e:	2b00      	cmp	r3, #0
    dba0:	d006      	beq.n	dbb0 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    dba2:	68f8      	ldr	r0, [r7, #12]
    dba4:	4b20      	ldr	r3, [pc, #128]	; (dc28 <_usb_d_dev_init+0xc8>)
    dba6:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    dba8:	2102      	movs	r1, #2
    dbaa:	68f8      	ldr	r0, [r7, #12]
    dbac:	4b1f      	ldr	r3, [pc, #124]	; (dc2c <_usb_d_dev_init+0xcc>)
    dbae:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    dbb0:	2101      	movs	r1, #1
    dbb2:	68f8      	ldr	r0, [r7, #12]
    dbb4:	4b1e      	ldr	r3, [pc, #120]	; (dc30 <_usb_d_dev_init+0xd0>)
    dbb6:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    dbb8:	2101      	movs	r1, #1
    dbba:	68f8      	ldr	r0, [r7, #12]
    dbbc:	4b1b      	ldr	r3, [pc, #108]	; (dc2c <_usb_d_dev_init+0xcc>)
    dbbe:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    dbc0:	4b1c      	ldr	r3, [pc, #112]	; (dc34 <_usb_d_dev_init+0xd4>)
    dbc2:	4a1d      	ldr	r2, [pc, #116]	; (dc38 <_usb_d_dev_init+0xd8>)
    dbc4:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    dbc6:	4b1b      	ldr	r3, [pc, #108]	; (dc34 <_usb_d_dev_init+0xd4>)
    dbc8:	4a1b      	ldr	r2, [pc, #108]	; (dc38 <_usb_d_dev_init+0xd8>)
    dbca:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    dbcc:	4b19      	ldr	r3, [pc, #100]	; (dc34 <_usb_d_dev_init+0xd4>)
    dbce:	4a1a      	ldr	r2, [pc, #104]	; (dc38 <_usb_d_dev_init+0xd8>)
    dbd0:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    dbd2:	4b18      	ldr	r3, [pc, #96]	; (dc34 <_usb_d_dev_init+0xd4>)
    dbd4:	4a18      	ldr	r2, [pc, #96]	; (dc38 <_usb_d_dev_init+0xd8>)
    dbd6:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    dbd8:	4b16      	ldr	r3, [pc, #88]	; (dc34 <_usb_d_dev_init+0xd4>)
    dbda:	4a17      	ldr	r2, [pc, #92]	; (dc38 <_usb_d_dev_init+0xd8>)
    dbdc:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    dbde:	4b17      	ldr	r3, [pc, #92]	; (dc3c <_usb_d_dev_init+0xdc>)
    dbe0:	4798      	blx	r3

	_usb_load_calib();
    dbe2:	4b17      	ldr	r3, [pc, #92]	; (dc40 <_usb_d_dev_init+0xe0>)
    dbe4:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    dbe6:	2104      	movs	r1, #4
    dbe8:	68f8      	ldr	r0, [r7, #12]
    dbea:	4b11      	ldr	r3, [pc, #68]	; (dc30 <_usb_d_dev_init+0xd0>)
    dbec:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    dbee:	4b15      	ldr	r3, [pc, #84]	; (dc44 <_usb_d_dev_init+0xe4>)
    dbf0:	4619      	mov	r1, r3
    dbf2:	68f8      	ldr	r0, [r7, #12]
    dbf4:	4b14      	ldr	r3, [pc, #80]	; (dc48 <_usb_d_dev_init+0xe8>)
    dbf6:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    dbf8:	7afb      	ldrb	r3, [r7, #11]
    dbfa:	f107 0210 	add.w	r2, r7, #16
    dbfe:	4413      	add	r3, r2
    dc00:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    dc04:	f043 0301 	orr.w	r3, r3, #1
    dc08:	b2db      	uxtb	r3, r3
    dc0a:	b29b      	uxth	r3, r3
    dc0c:	4619      	mov	r1, r3
    dc0e:	68f8      	ldr	r0, [r7, #12]
    dc10:	4b0e      	ldr	r3, [pc, #56]	; (dc4c <_usb_d_dev_init+0xec>)
    dc12:	4798      	blx	r3

	return ERR_NONE;
    dc14:	2300      	movs	r3, #0
}
    dc16:	4618      	mov	r0, r3
    dc18:	3710      	adds	r7, #16
    dc1a:	46bd      	mov	sp, r7
    dc1c:	bd80      	pop	{r7, pc}
    dc1e:	bf00      	nop
    dc20:	0000c1f9 	.word	0x0000c1f9
    dc24:	0000c549 	.word	0x0000c549
    dc28:	0000c51d 	.word	0x0000c51d
    dc2c:	0000c1cf 	.word	0x0000c1cf
    dc30:	0000c579 	.word	0x0000c579
    dc34:	2000380c 	.word	0x2000380c
    dc38:	0000c641 	.word	0x0000c641
    dc3c:	0000dae5 	.word	0x0000dae5
    dc40:	0000c659 	.word	0x0000c659
    dc44:	200038d4 	.word	0x200038d4
    dc48:	0000c625 	.word	0x0000c625
    dc4c:	0000c5e9 	.word	0x0000c5e9

0000dc50 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    dc50:	b580      	push	{r7, lr}
    dc52:	b082      	sub	sp, #8
    dc54:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    dc56:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    dc5a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    dc5c:	2103      	movs	r1, #3
    dc5e:	6878      	ldr	r0, [r7, #4]
    dc60:	4b17      	ldr	r3, [pc, #92]	; (dcc0 <_usb_d_dev_enable+0x70>)
    dc62:	4798      	blx	r3
    dc64:	4603      	mov	r3, r0
    dc66:	2b00      	cmp	r3, #0
    dc68:	d002      	beq.n	dc70 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    dc6a:	f06f 0310 	mvn.w	r3, #16
    dc6e:	e023      	b.n	dcb8 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    dc70:	6878      	ldr	r0, [r7, #4]
    dc72:	4b14      	ldr	r3, [pc, #80]	; (dcc4 <_usb_d_dev_enable+0x74>)
    dc74:	4798      	blx	r3
    dc76:	4603      	mov	r3, r0
    dc78:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    dc7a:	78fb      	ldrb	r3, [r7, #3]
    dc7c:	f003 0302 	and.w	r3, r3, #2
    dc80:	2b00      	cmp	r3, #0
    dc82:	d107      	bne.n	dc94 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    dc84:	78fb      	ldrb	r3, [r7, #3]
    dc86:	f043 0302 	orr.w	r3, r3, #2
    dc8a:	b2db      	uxtb	r3, r3
    dc8c:	4619      	mov	r1, r3
    dc8e:	6878      	ldr	r0, [r7, #4]
    dc90:	4b0d      	ldr	r3, [pc, #52]	; (dcc8 <_usb_d_dev_enable+0x78>)
    dc92:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    dc94:	2050      	movs	r0, #80	; 0x50
    dc96:	4b0d      	ldr	r3, [pc, #52]	; (dccc <_usb_d_dev_enable+0x7c>)
    dc98:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    dc9a:	2051      	movs	r0, #81	; 0x51
    dc9c:	4b0b      	ldr	r3, [pc, #44]	; (dccc <_usb_d_dev_enable+0x7c>)
    dc9e:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    dca0:	2052      	movs	r0, #82	; 0x52
    dca2:	4b0a      	ldr	r3, [pc, #40]	; (dccc <_usb_d_dev_enable+0x7c>)
    dca4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    dca6:	2053      	movs	r0, #83	; 0x53
    dca8:	4b08      	ldr	r3, [pc, #32]	; (dccc <_usb_d_dev_enable+0x7c>)
    dcaa:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    dcac:	f240 218d 	movw	r1, #653	; 0x28d
    dcb0:	6878      	ldr	r0, [r7, #4]
    dcb2:	4b07      	ldr	r3, [pc, #28]	; (dcd0 <_usb_d_dev_enable+0x80>)
    dcb4:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    dcb6:	2300      	movs	r3, #0
}
    dcb8:	4618      	mov	r0, r3
    dcba:	3708      	adds	r7, #8
    dcbc:	46bd      	mov	sp, r7
    dcbe:	bd80      	pop	{r7, pc}
    dcc0:	0000c4f3 	.word	0x0000c4f3
    dcc4:	0000c5a1 	.word	0x0000c5a1
    dcc8:	0000c579 	.word	0x0000c579
    dccc:	0000c105 	.word	0x0000c105
    dcd0:	0000c49d 	.word	0x0000c49d

0000dcd4 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    dcd4:	b580      	push	{r7, lr}
    dcd6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    dcd8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dcdc:	4b01      	ldr	r3, [pc, #4]	; (dce4 <_usb_d_dev_attach+0x10>)
    dcde:	4798      	blx	r3
}
    dce0:	bf00      	nop
    dce2:	bd80      	pop	{r7, pc}
    dce4:	0000c5c5 	.word	0x0000c5c5

0000dce8 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    dce8:	b580      	push	{r7, lr}
    dcea:	b082      	sub	sp, #8
    dcec:	af00      	add	r7, sp, #0
    dcee:	4603      	mov	r3, r0
    dcf0:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    dcf2:	79fb      	ldrb	r3, [r7, #7]
    dcf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    dcf8:	b2db      	uxtb	r3, r3
    dcfa:	4619      	mov	r1, r3
    dcfc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dd00:	4b02      	ldr	r3, [pc, #8]	; (dd0c <_usb_d_dev_set_address+0x24>)
    dd02:	4798      	blx	r3
}
    dd04:	bf00      	nop
    dd06:	3708      	adds	r7, #8
    dd08:	46bd      	mov	sp, r7
    dd0a:	bd80      	pop	{r7, pc}
    dd0c:	0000c607 	.word	0x0000c607

0000dd10 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    dd10:	b590      	push	{r4, r7, lr}
    dd12:	b085      	sub	sp, #20
    dd14:	af00      	add	r7, sp, #0
    dd16:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    dd18:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    dd1c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    dd1e:	687b      	ldr	r3, [r7, #4]
    dd20:	7c9b      	ldrb	r3, [r3, #18]
    dd22:	f003 030f 	and.w	r3, r3, #15
    dd26:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    dd28:	687b      	ldr	r3, [r7, #4]
    dd2a:	68db      	ldr	r3, [r3, #12]
    dd2c:	461a      	mov	r2, r3
    dd2e:	7afb      	ldrb	r3, [r7, #11]
    dd30:	2100      	movs	r1, #0
    dd32:	4618      	mov	r0, r3
    dd34:	4b0f      	ldr	r3, [pc, #60]	; (dd74 <_usb_d_dev_trans_setup+0x64>)
    dd36:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    dd38:	687b      	ldr	r3, [r7, #4]
    dd3a:	8a1b      	ldrh	r3, [r3, #16]
    dd3c:	461a      	mov	r2, r3
    dd3e:	7af8      	ldrb	r0, [r7, #11]
    dd40:	2300      	movs	r3, #0
    dd42:	2100      	movs	r1, #0
    dd44:	4c0c      	ldr	r4, [pc, #48]	; (dd78 <_usb_d_dev_trans_setup+0x68>)
    dd46:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    dd48:	7afb      	ldrb	r3, [r7, #11]
    dd4a:	22b0      	movs	r2, #176	; 0xb0
    dd4c:	4619      	mov	r1, r3
    dd4e:	68f8      	ldr	r0, [r7, #12]
    dd50:	4b0a      	ldr	r3, [pc, #40]	; (dd7c <_usb_d_dev_trans_setup+0x6c>)
    dd52:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    dd54:	7afb      	ldrb	r3, [r7, #11]
    dd56:	2200      	movs	r2, #0
    dd58:	2100      	movs	r1, #0
    dd5a:	4618      	mov	r0, r3
    dd5c:	4b08      	ldr	r3, [pc, #32]	; (dd80 <_usb_d_dev_trans_setup+0x70>)
    dd5e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    dd60:	7afb      	ldrb	r3, [r7, #11]
    dd62:	2210      	movs	r2, #16
    dd64:	4619      	mov	r1, r3
    dd66:	68f8      	ldr	r0, [r7, #12]
    dd68:	4b06      	ldr	r3, [pc, #24]	; (dd84 <_usb_d_dev_trans_setup+0x74>)
    dd6a:	4798      	blx	r3
}
    dd6c:	bf00      	nop
    dd6e:	3714      	adds	r7, #20
    dd70:	46bd      	mov	sp, r7
    dd72:	bd90      	pop	{r4, r7, pc}
    dd74:	0000caa5 	.word	0x0000caa5
    dd78:	0000cc2d 	.word	0x0000cc2d
    dd7c:	0000c305 	.word	0x0000c305
    dd80:	0000ccfd 	.word	0x0000ccfd
    dd84:	0000c359 	.word	0x0000c359

0000dd88 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    dd88:	b580      	push	{r7, lr}
    dd8a:	b088      	sub	sp, #32
    dd8c:	af00      	add	r7, sp, #0
    dd8e:	4603      	mov	r3, r0
    dd90:	71fb      	strb	r3, [r7, #7]
    dd92:	460b      	mov	r3, r1
    dd94:	71bb      	strb	r3, [r7, #6]
    dd96:	4613      	mov	r3, r2
    dd98:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    dd9a:	79fb      	ldrb	r3, [r7, #7]
    dd9c:	f003 030f 	and.w	r3, r3, #15
    dda0:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    dda2:	79fb      	ldrb	r3, [r7, #7]
    dda4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    dda8:	2b00      	cmp	r3, #0
    ddaa:	bf14      	ite	ne
    ddac:	2301      	movne	r3, #1
    ddae:	2300      	moveq	r3, #0
    ddb0:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ddb2:	7fba      	ldrb	r2, [r7, #30]
    ddb4:	7ffb      	ldrb	r3, [r7, #31]
    ddb6:	4611      	mov	r1, r2
    ddb8:	4618      	mov	r0, r3
    ddba:	4b3e      	ldr	r3, [pc, #248]	; (deb4 <_usb_d_dev_ep_init+0x12c>)
    ddbc:	4798      	blx	r3
    ddbe:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    ddc0:	79bb      	ldrb	r3, [r7, #6]
    ddc2:	f003 0303 	and.w	r3, r3, #3
    ddc6:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    ddc8:	7ffa      	ldrb	r2, [r7, #31]
    ddca:	4613      	mov	r3, r2
    ddcc:	005b      	lsls	r3, r3, #1
    ddce:	4413      	add	r3, r2
    ddd0:	009b      	lsls	r3, r3, #2
    ddd2:	4a39      	ldr	r2, [pc, #228]	; (deb8 <_usb_d_dev_ep_init+0x130>)
    ddd4:	4413      	add	r3, r2
    ddd6:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    ddd8:	7ffb      	ldrb	r3, [r7, #31]
    ddda:	2b04      	cmp	r3, #4
    dddc:	d902      	bls.n	dde4 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    ddde:	f06f 0311 	mvn.w	r3, #17
    dde2:	e063      	b.n	deac <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    dde4:	69bb      	ldr	r3, [r7, #24]
    dde6:	7c9b      	ldrb	r3, [r3, #18]
    dde8:	2bff      	cmp	r3, #255	; 0xff
    ddea:	d002      	beq.n	ddf2 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    ddec:	f06f 0313 	mvn.w	r3, #19
    ddf0:	e05c      	b.n	deac <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    ddf2:	7dfb      	ldrb	r3, [r7, #23]
    ddf4:	2b00      	cmp	r3, #0
    ddf6:	d11f      	bne.n	de38 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    ddf8:	7fbb      	ldrb	r3, [r7, #30]
    ddfa:	2b00      	cmp	r3, #0
    ddfc:	bf14      	ite	ne
    ddfe:	2301      	movne	r3, #1
    de00:	2300      	moveq	r3, #0
    de02:	b2db      	uxtb	r3, r3
    de04:	f083 0301 	eor.w	r3, r3, #1
    de08:	b2db      	uxtb	r3, r3
    de0a:	f003 0301 	and.w	r3, r3, #1
    de0e:	b2da      	uxtb	r2, r3
    de10:	7ffb      	ldrb	r3, [r7, #31]
    de12:	4611      	mov	r1, r2
    de14:	4618      	mov	r0, r3
    de16:	4b27      	ldr	r3, [pc, #156]	; (deb4 <_usb_d_dev_ep_init+0x12c>)
    de18:	4798      	blx	r3
    de1a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    de1c:	68fb      	ldr	r3, [r7, #12]
    de1e:	7c9b      	ldrb	r3, [r3, #18]
    de20:	2bff      	cmp	r3, #255	; 0xff
    de22:	d002      	beq.n	de2a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    de24:	f06f 0313 	mvn.w	r3, #19
    de28:	e040      	b.n	deac <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    de2a:	693b      	ldr	r3, [r7, #16]
    de2c:	681b      	ldr	r3, [r3, #0]
    de2e:	2b00      	cmp	r3, #0
    de30:	d102      	bne.n	de38 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    de32:	f06f 0312 	mvn.w	r3, #18
    de36:	e039      	b.n	deac <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    de38:	7fbb      	ldrb	r3, [r7, #30]
    de3a:	2b00      	cmp	r3, #0
    de3c:	d007      	beq.n	de4e <_usb_d_dev_ep_init+0xc6>
    de3e:	693b      	ldr	r3, [r7, #16]
    de40:	685b      	ldr	r3, [r3, #4]
    de42:	2b00      	cmp	r3, #0
    de44:	bf14      	ite	ne
    de46:	2301      	movne	r3, #1
    de48:	2300      	moveq	r3, #0
    de4a:	b2db      	uxtb	r3, r3
    de4c:	e006      	b.n	de5c <_usb_d_dev_ep_init+0xd4>
    de4e:	693b      	ldr	r3, [r7, #16]
    de50:	681b      	ldr	r3, [r3, #0]
    de52:	2b00      	cmp	r3, #0
    de54:	bf14      	ite	ne
    de56:	2301      	movne	r3, #1
    de58:	2300      	moveq	r3, #0
    de5a:	b2db      	uxtb	r3, r3
    de5c:	2b00      	cmp	r3, #0
    de5e:	d00f      	beq.n	de80 <_usb_d_dev_ep_init+0xf8>
    de60:	7fbb      	ldrb	r3, [r7, #30]
    de62:	2b00      	cmp	r3, #0
    de64:	d003      	beq.n	de6e <_usb_d_dev_ep_init+0xe6>
    de66:	693b      	ldr	r3, [r7, #16]
    de68:	895b      	ldrh	r3, [r3, #10]
    de6a:	461a      	mov	r2, r3
    de6c:	e002      	b.n	de74 <_usb_d_dev_ep_init+0xec>
    de6e:	693b      	ldr	r3, [r7, #16]
    de70:	891b      	ldrh	r3, [r3, #8]
    de72:	461a      	mov	r2, r3
    de74:	88bb      	ldrh	r3, [r7, #4]
    de76:	429a      	cmp	r2, r3
    de78:	da02      	bge.n	de80 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    de7a:	f06f 0312 	mvn.w	r3, #18
    de7e:	e015      	b.n	deac <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    de80:	7fbb      	ldrb	r3, [r7, #30]
    de82:	2b00      	cmp	r3, #0
    de84:	d002      	beq.n	de8c <_usb_d_dev_ep_init+0x104>
    de86:	693b      	ldr	r3, [r7, #16]
    de88:	685b      	ldr	r3, [r3, #4]
    de8a:	e001      	b.n	de90 <_usb_d_dev_ep_init+0x108>
    de8c:	693b      	ldr	r3, [r7, #16]
    de8e:	681b      	ldr	r3, [r3, #0]
    de90:	69ba      	ldr	r2, [r7, #24]
    de92:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    de94:	69bb      	ldr	r3, [r7, #24]
    de96:	88ba      	ldrh	r2, [r7, #4]
    de98:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    de9a:	7dfb      	ldrb	r3, [r7, #23]
    de9c:	3301      	adds	r3, #1
    de9e:	b2da      	uxtb	r2, r3
    dea0:	69bb      	ldr	r3, [r7, #24]
    dea2:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    dea4:	69bb      	ldr	r3, [r7, #24]
    dea6:	79fa      	ldrb	r2, [r7, #7]
    dea8:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    deaa:	2300      	movs	r3, #0
}
    deac:	4618      	mov	r0, r3
    deae:	3720      	adds	r7, #32
    deb0:	46bd      	mov	sp, r7
    deb2:	bd80      	pop	{r7, pc}
    deb4:	0000cdb9 	.word	0x0000cdb9
    deb8:	0001d2b4 	.word	0x0001d2b4

0000debc <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    debc:	b580      	push	{r7, lr}
    debe:	b086      	sub	sp, #24
    dec0:	af00      	add	r7, sp, #0
    dec2:	4603      	mov	r3, r0
    dec4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    dec6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    deca:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    decc:	79fb      	ldrb	r3, [r7, #7]
    dece:	f003 030f 	and.w	r3, r3, #15
    ded2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ded4:	79fb      	ldrb	r3, [r7, #7]
    ded6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    deda:	2b00      	cmp	r3, #0
    dedc:	bf14      	ite	ne
    dede:	2301      	movne	r3, #1
    dee0:	2300      	moveq	r3, #0
    dee2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    dee4:	7cba      	ldrb	r2, [r7, #18]
    dee6:	7cfb      	ldrb	r3, [r7, #19]
    dee8:	4611      	mov	r1, r2
    deea:	4618      	mov	r0, r3
    deec:	4b2a      	ldr	r3, [pc, #168]	; (df98 <_usb_d_dev_ep_deinit+0xdc>)
    deee:	4798      	blx	r3
    def0:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    def2:	7cfb      	ldrb	r3, [r7, #19]
    def4:	2b04      	cmp	r3, #4
    def6:	d84a      	bhi.n	df8e <_usb_d_dev_ep_deinit+0xd2>
    def8:	68fb      	ldr	r3, [r7, #12]
    defa:	7c9b      	ldrb	r3, [r3, #18]
    defc:	2bff      	cmp	r3, #255	; 0xff
    defe:	d046      	beq.n	df8e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    df00:	7cbb      	ldrb	r3, [r7, #18]
    df02:	2203      	movs	r2, #3
    df04:	4619      	mov	r1, r3
    df06:	68f8      	ldr	r0, [r7, #12]
    df08:	4b24      	ldr	r3, [pc, #144]	; (df9c <_usb_d_dev_ep_deinit+0xe0>)
    df0a:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    df0c:	68fb      	ldr	r3, [r7, #12]
    df0e:	7cdb      	ldrb	r3, [r3, #19]
    df10:	f003 0307 	and.w	r3, r3, #7
    df14:	b2db      	uxtb	r3, r3
    df16:	2b01      	cmp	r3, #1
    df18:	d107      	bne.n	df2a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    df1a:	79fb      	ldrb	r3, [r7, #7]
    df1c:	697a      	ldr	r2, [r7, #20]
    df1e:	3308      	adds	r3, #8
    df20:	015b      	lsls	r3, r3, #5
    df22:	4413      	add	r3, r2
    df24:	2200      	movs	r2, #0
    df26:	701a      	strb	r2, [r3, #0]
    df28:	e02a      	b.n	df80 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    df2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    df2e:	2b00      	cmp	r3, #0
    df30:	da15      	bge.n	df5e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    df32:	79fb      	ldrb	r3, [r7, #7]
    df34:	f003 030f 	and.w	r3, r3, #15
    df38:	79fa      	ldrb	r2, [r7, #7]
    df3a:	f002 020f 	and.w	r2, r2, #15
    df3e:	6979      	ldr	r1, [r7, #20]
    df40:	3208      	adds	r2, #8
    df42:	0152      	lsls	r2, r2, #5
    df44:	440a      	add	r2, r1
    df46:	7812      	ldrb	r2, [r2, #0]
    df48:	b2d2      	uxtb	r2, r2
    df4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    df4e:	b2d1      	uxtb	r1, r2
    df50:	697a      	ldr	r2, [r7, #20]
    df52:	3308      	adds	r3, #8
    df54:	015b      	lsls	r3, r3, #5
    df56:	4413      	add	r3, r2
    df58:	460a      	mov	r2, r1
    df5a:	701a      	strb	r2, [r3, #0]
    df5c:	e010      	b.n	df80 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    df5e:	79fb      	ldrb	r3, [r7, #7]
    df60:	79fa      	ldrb	r2, [r7, #7]
    df62:	6979      	ldr	r1, [r7, #20]
    df64:	3208      	adds	r2, #8
    df66:	0152      	lsls	r2, r2, #5
    df68:	440a      	add	r2, r1
    df6a:	7812      	ldrb	r2, [r2, #0]
    df6c:	b2d2      	uxtb	r2, r2
    df6e:	f022 0207 	bic.w	r2, r2, #7
    df72:	b2d1      	uxtb	r1, r2
    df74:	697a      	ldr	r2, [r7, #20]
    df76:	3308      	adds	r3, #8
    df78:	015b      	lsls	r3, r3, #5
    df7a:	4413      	add	r3, r2
    df7c:	460a      	mov	r2, r1
    df7e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    df80:	68fb      	ldr	r3, [r7, #12]
    df82:	2200      	movs	r2, #0
    df84:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    df86:	68fb      	ldr	r3, [r7, #12]
    df88:	22ff      	movs	r2, #255	; 0xff
    df8a:	749a      	strb	r2, [r3, #18]
    df8c:	e000      	b.n	df90 <_usb_d_dev_ep_deinit+0xd4>
		return;
    df8e:	bf00      	nop
}
    df90:	3718      	adds	r7, #24
    df92:	46bd      	mov	sp, r7
    df94:	bd80      	pop	{r7, pc}
    df96:	bf00      	nop
    df98:	0000cdb9 	.word	0x0000cdb9
    df9c:	0000e3f1 	.word	0x0000e3f1

0000dfa0 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    dfa0:	b5b0      	push	{r4, r5, r7, lr}
    dfa2:	b088      	sub	sp, #32
    dfa4:	af00      	add	r7, sp, #0
    dfa6:	4603      	mov	r3, r0
    dfa8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    dfaa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    dfae:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    dfb0:	79fb      	ldrb	r3, [r7, #7]
    dfb2:	f003 030f 	and.w	r3, r3, #15
    dfb6:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    dfb8:	79fb      	ldrb	r3, [r7, #7]
    dfba:	f003 0380 	and.w	r3, r3, #128	; 0x80
    dfbe:	2b00      	cmp	r3, #0
    dfc0:	bf14      	ite	ne
    dfc2:	2301      	movne	r3, #1
    dfc4:	2300      	moveq	r3, #0
    dfc6:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    dfc8:	7eba      	ldrb	r2, [r7, #26]
    dfca:	7efb      	ldrb	r3, [r7, #27]
    dfcc:	4611      	mov	r1, r2
    dfce:	4618      	mov	r0, r3
    dfd0:	4b70      	ldr	r3, [pc, #448]	; (e194 <_usb_d_dev_ep_enable+0x1f4>)
    dfd2:	4798      	blx	r3
    dfd4:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    dfd6:	7efb      	ldrb	r3, [r7, #27]
    dfd8:	4619      	mov	r1, r3
    dfda:	69f8      	ldr	r0, [r7, #28]
    dfdc:	4b6e      	ldr	r3, [pc, #440]	; (e198 <_usb_d_dev_ep_enable+0x1f8>)
    dfde:	4798      	blx	r3
    dfe0:	4603      	mov	r3, r0
    dfe2:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    dfe4:	7efb      	ldrb	r3, [r7, #27]
    dfe6:	2b04      	cmp	r3, #4
    dfe8:	d803      	bhi.n	dff2 <_usb_d_dev_ep_enable+0x52>
    dfea:	697b      	ldr	r3, [r7, #20]
    dfec:	7c9b      	ldrb	r3, [r3, #18]
    dfee:	2bff      	cmp	r3, #255	; 0xff
    dff0:	d102      	bne.n	dff8 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    dff2:	f06f 0311 	mvn.w	r3, #17
    dff6:	e0c8      	b.n	e18a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    dff8:	7efb      	ldrb	r3, [r7, #27]
    dffa:	015b      	lsls	r3, r3, #5
    dffc:	4a67      	ldr	r2, [pc, #412]	; (e19c <_usb_d_dev_ep_enable+0x1fc>)
    dffe:	4413      	add	r3, r2
    e000:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    e002:	697b      	ldr	r3, [r7, #20]
    e004:	7cdb      	ldrb	r3, [r3, #19]
    e006:	f003 0307 	and.w	r3, r3, #7
    e00a:	b2db      	uxtb	r3, r3
    e00c:	2b01      	cmp	r3, #1
    e00e:	d14b      	bne.n	e0a8 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    e010:	7cfb      	ldrb	r3, [r7, #19]
    e012:	f003 0377 	and.w	r3, r3, #119	; 0x77
    e016:	2b00      	cmp	r3, #0
    e018:	d002      	beq.n	e020 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    e01a:	f06f 0313 	mvn.w	r3, #19
    e01e:	e0b4      	b.n	e18a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    e020:	7efb      	ldrb	r3, [r7, #27]
    e022:	2211      	movs	r2, #17
    e024:	4619      	mov	r1, r3
    e026:	69f8      	ldr	r0, [r7, #28]
    e028:	4b5d      	ldr	r3, [pc, #372]	; (e1a0 <_usb_d_dev_ep_enable+0x200>)
    e02a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    e02c:	697b      	ldr	r3, [r7, #20]
    e02e:	8a1b      	ldrh	r3, [r3, #16]
    e030:	039b      	lsls	r3, r3, #14
    e032:	4c5c      	ldr	r4, [pc, #368]	; (e1a4 <_usb_d_dev_ep_enable+0x204>)
    e034:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    e036:	697b      	ldr	r3, [r7, #20]
    e038:	8a1b      	ldrh	r3, [r3, #16]
    e03a:	4618      	mov	r0, r3
    e03c:	4b5a      	ldr	r3, [pc, #360]	; (e1a8 <_usb_d_dev_ep_enable+0x208>)
    e03e:	4798      	blx	r3
    e040:	4603      	mov	r3, r0
    e042:	071b      	lsls	r3, r3, #28
    e044:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    e048:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    e04c:	68fb      	ldr	r3, [r7, #12]
    e04e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    e050:	68fb      	ldr	r3, [r7, #12]
    e052:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    e056:	697b      	ldr	r3, [r7, #20]
    e058:	8a1b      	ldrh	r3, [r3, #16]
    e05a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    e05e:	697b      	ldr	r3, [r7, #20]
    e060:	8a1b      	ldrh	r3, [r3, #16]
    e062:	4618      	mov	r0, r3
    e064:	4b50      	ldr	r3, [pc, #320]	; (e1a8 <_usb_d_dev_ep_enable+0x208>)
    e066:	4798      	blx	r3
    e068:	4603      	mov	r3, r0
    e06a:	071b      	lsls	r3, r3, #28
    e06c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    e070:	432b      	orrs	r3, r5
    e072:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    e074:	7efb      	ldrb	r3, [r7, #27]
    e076:	2200      	movs	r2, #0
    e078:	2100      	movs	r1, #0
    e07a:	4618      	mov	r0, r3
    e07c:	4b4b      	ldr	r3, [pc, #300]	; (e1ac <_usb_d_dev_ep_enable+0x20c>)
    e07e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    e080:	7efb      	ldrb	r3, [r7, #27]
    e082:	2200      	movs	r2, #0
    e084:	2101      	movs	r1, #1
    e086:	4618      	mov	r0, r3
    e088:	4b49      	ldr	r3, [pc, #292]	; (e1b0 <_usb_d_dev_ep_enable+0x210>)
    e08a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    e08c:	7efb      	ldrb	r3, [r7, #27]
    e08e:	2100      	movs	r1, #0
    e090:	4618      	mov	r0, r3
    e092:	4b48      	ldr	r3, [pc, #288]	; (e1b4 <_usb_d_dev_ep_enable+0x214>)
    e094:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    e096:	7efb      	ldrb	r3, [r7, #27]
    e098:	2101      	movs	r1, #1
    e09a:	4618      	mov	r0, r3
    e09c:	4b45      	ldr	r3, [pc, #276]	; (e1b4 <_usb_d_dev_ep_enable+0x214>)
    e09e:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    e0a0:	6978      	ldr	r0, [r7, #20]
    e0a2:	4b45      	ldr	r3, [pc, #276]	; (e1b8 <_usb_d_dev_ep_enable+0x218>)
    e0a4:	4798      	blx	r3
    e0a6:	e06f      	b.n	e188 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    e0a8:	7ebb      	ldrb	r3, [r7, #26]
    e0aa:	2b00      	cmp	r3, #0
    e0ac:	d038      	beq.n	e120 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    e0ae:	7cfb      	ldrb	r3, [r7, #19]
    e0b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e0b4:	2b00      	cmp	r3, #0
    e0b6:	d002      	beq.n	e0be <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    e0b8:	f06f 0313 	mvn.w	r3, #19
    e0bc:	e065      	b.n	e18a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    e0be:	697b      	ldr	r3, [r7, #20]
    e0c0:	7cdb      	ldrb	r3, [r3, #19]
    e0c2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e0c6:	b2db      	uxtb	r3, r3
    e0c8:	011b      	lsls	r3, r3, #4
    e0ca:	b2db      	uxtb	r3, r3
    e0cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e0d0:	b2da      	uxtb	r2, r3
    e0d2:	7cfb      	ldrb	r3, [r7, #19]
    e0d4:	4313      	orrs	r3, r2
    e0d6:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    e0d8:	7cfa      	ldrb	r2, [r7, #19]
    e0da:	7efb      	ldrb	r3, [r7, #27]
    e0dc:	4619      	mov	r1, r3
    e0de:	69f8      	ldr	r0, [r7, #28]
    e0e0:	4b2f      	ldr	r3, [pc, #188]	; (e1a0 <_usb_d_dev_ep_enable+0x200>)
    e0e2:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    e0e4:	68fb      	ldr	r3, [r7, #12]
    e0e6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    e0ea:	697b      	ldr	r3, [r7, #20]
    e0ec:	8a1b      	ldrh	r3, [r3, #16]
    e0ee:	f3c3 050d 	ubfx	r5, r3, #0, #14
    e0f2:	697b      	ldr	r3, [r7, #20]
    e0f4:	8a1b      	ldrh	r3, [r3, #16]
    e0f6:	4618      	mov	r0, r3
    e0f8:	4b2b      	ldr	r3, [pc, #172]	; (e1a8 <_usb_d_dev_ep_enable+0x208>)
    e0fa:	4798      	blx	r3
    e0fc:	4603      	mov	r3, r0
    e0fe:	071b      	lsls	r3, r3, #28
    e100:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    e104:	432b      	orrs	r3, r5
    e106:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    e108:	7efb      	ldrb	r3, [r7, #27]
    e10a:	2200      	movs	r2, #0
    e10c:	2101      	movs	r1, #1
    e10e:	4618      	mov	r0, r3
    e110:	4b27      	ldr	r3, [pc, #156]	; (e1b0 <_usb_d_dev_ep_enable+0x210>)
    e112:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    e114:	7efb      	ldrb	r3, [r7, #27]
    e116:	2101      	movs	r1, #1
    e118:	4618      	mov	r0, r3
    e11a:	4b26      	ldr	r3, [pc, #152]	; (e1b4 <_usb_d_dev_ep_enable+0x214>)
    e11c:	4798      	blx	r3
    e11e:	e033      	b.n	e188 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    e120:	7cfb      	ldrb	r3, [r7, #19]
    e122:	f003 0307 	and.w	r3, r3, #7
    e126:	2b00      	cmp	r3, #0
    e128:	d002      	beq.n	e130 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    e12a:	f06f 0313 	mvn.w	r3, #19
    e12e:	e02c      	b.n	e18a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    e130:	697b      	ldr	r3, [r7, #20]
    e132:	7cdb      	ldrb	r3, [r3, #19]
    e134:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e138:	b2db      	uxtb	r3, r3
    e13a:	461a      	mov	r2, r3
    e13c:	7cfb      	ldrb	r3, [r7, #19]
    e13e:	4313      	orrs	r3, r2
    e140:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    e142:	7cfa      	ldrb	r2, [r7, #19]
    e144:	7efb      	ldrb	r3, [r7, #27]
    e146:	4619      	mov	r1, r3
    e148:	69f8      	ldr	r0, [r7, #28]
    e14a:	4b15      	ldr	r3, [pc, #84]	; (e1a0 <_usb_d_dev_ep_enable+0x200>)
    e14c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    e14e:	697b      	ldr	r3, [r7, #20]
    e150:	8a1b      	ldrh	r3, [r3, #16]
    e152:	039b      	lsls	r3, r3, #14
    e154:	4c13      	ldr	r4, [pc, #76]	; (e1a4 <_usb_d_dev_ep_enable+0x204>)
    e156:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    e158:	697b      	ldr	r3, [r7, #20]
    e15a:	8a1b      	ldrh	r3, [r3, #16]
    e15c:	4618      	mov	r0, r3
    e15e:	4b12      	ldr	r3, [pc, #72]	; (e1a8 <_usb_d_dev_ep_enable+0x208>)
    e160:	4798      	blx	r3
    e162:	4603      	mov	r3, r0
    e164:	071b      	lsls	r3, r3, #28
    e166:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    e16a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    e16e:	68fb      	ldr	r3, [r7, #12]
    e170:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    e172:	7efb      	ldrb	r3, [r7, #27]
    e174:	2200      	movs	r2, #0
    e176:	2100      	movs	r1, #0
    e178:	4618      	mov	r0, r3
    e17a:	4b0c      	ldr	r3, [pc, #48]	; (e1ac <_usb_d_dev_ep_enable+0x20c>)
    e17c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    e17e:	7efb      	ldrb	r3, [r7, #27]
    e180:	2100      	movs	r1, #0
    e182:	4618      	mov	r0, r3
    e184:	4b0b      	ldr	r3, [pc, #44]	; (e1b4 <_usb_d_dev_ep_enable+0x214>)
    e186:	4798      	blx	r3
	}

	return USB_OK;
    e188:	2300      	movs	r3, #0
}
    e18a:	4618      	mov	r0, r3
    e18c:	3720      	adds	r7, #32
    e18e:	46bd      	mov	sp, r7
    e190:	bdb0      	pop	{r4, r5, r7, pc}
    e192:	bf00      	nop
    e194:	0000cdb9 	.word	0x0000cdb9
    e198:	0000c43f 	.word	0x0000c43f
    e19c:	200038d4 	.word	0x200038d4
    e1a0:	0000c415 	.word	0x0000c415
    e1a4:	0fffc000 	.word	0x0fffc000
    e1a8:	0000cd55 	.word	0x0000cd55
    e1ac:	0000ccfd 	.word	0x0000ccfd
    e1b0:	0000cca5 	.word	0x0000cca5
    e1b4:	0000cc6d 	.word	0x0000cc6d
    e1b8:	0000dd11 	.word	0x0000dd11

0000e1bc <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    e1bc:	b580      	push	{r7, lr}
    e1be:	b084      	sub	sp, #16
    e1c0:	af00      	add	r7, sp, #0
    e1c2:	6078      	str	r0, [r7, #4]
    e1c4:	460b      	mov	r3, r1
    e1c6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    e1c8:	687b      	ldr	r3, [r7, #4]
    e1ca:	7c9b      	ldrb	r3, [r3, #18]
    e1cc:	f003 030f 	and.w	r3, r3, #15
    e1d0:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    e1d2:	78fa      	ldrb	r2, [r7, #3]
    e1d4:	7bfb      	ldrb	r3, [r7, #15]
    e1d6:	4611      	mov	r1, r2
    e1d8:	4618      	mov	r0, r3
    e1da:	4b03      	ldr	r3, [pc, #12]	; (e1e8 <_usb_d_dev_ep_stall_get+0x2c>)
    e1dc:	4798      	blx	r3
    e1de:	4603      	mov	r3, r0
}
    e1e0:	4618      	mov	r0, r3
    e1e2:	3710      	adds	r7, #16
    e1e4:	46bd      	mov	sp, r7
    e1e6:	bd80      	pop	{r7, pc}
    e1e8:	0000c8ad 	.word	0x0000c8ad

0000e1ec <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    e1ec:	b580      	push	{r7, lr}
    e1ee:	b084      	sub	sp, #16
    e1f0:	af00      	add	r7, sp, #0
    e1f2:	6078      	str	r0, [r7, #4]
    e1f4:	460b      	mov	r3, r1
    e1f6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    e1f8:	687b      	ldr	r3, [r7, #4]
    e1fa:	7c9b      	ldrb	r3, [r3, #18]
    e1fc:	f003 030f 	and.w	r3, r3, #15
    e200:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    e202:	78f9      	ldrb	r1, [r7, #3]
    e204:	7bfb      	ldrb	r3, [r7, #15]
    e206:	2201      	movs	r2, #1
    e208:	4618      	mov	r0, r3
    e20a:	4b0a      	ldr	r3, [pc, #40]	; (e234 <_usb_d_dev_ep_stall_set+0x48>)
    e20c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    e20e:	78fb      	ldrb	r3, [r7, #3]
    e210:	2220      	movs	r2, #32
    e212:	409a      	lsls	r2, r3
    e214:	7bfb      	ldrb	r3, [r7, #15]
    e216:	4611      	mov	r1, r2
    e218:	4618      	mov	r0, r3
    e21a:	4b07      	ldr	r3, [pc, #28]	; (e238 <_usb_d_dev_ep_stall_set+0x4c>)
    e21c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    e21e:	687a      	ldr	r2, [r7, #4]
    e220:	7cd3      	ldrb	r3, [r2, #19]
    e222:	f043 0308 	orr.w	r3, r3, #8
    e226:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    e228:	2300      	movs	r3, #0
}
    e22a:	4618      	mov	r0, r3
    e22c:	3710      	adds	r7, #16
    e22e:	46bd      	mov	sp, r7
    e230:	bd80      	pop	{r7, pc}
    e232:	bf00      	nop
    e234:	0000c855 	.word	0x0000c855
    e238:	0000c7d5 	.word	0x0000c7d5

0000e23c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    e23c:	b580      	push	{r7, lr}
    e23e:	b084      	sub	sp, #16
    e240:	af00      	add	r7, sp, #0
    e242:	6078      	str	r0, [r7, #4]
    e244:	460b      	mov	r3, r1
    e246:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    e248:	687b      	ldr	r3, [r7, #4]
    e24a:	7c9b      	ldrb	r3, [r3, #18]
    e24c:	f003 030f 	and.w	r3, r3, #15
    e250:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    e252:	78fa      	ldrb	r2, [r7, #3]
    e254:	7bfb      	ldrb	r3, [r7, #15]
    e256:	4611      	mov	r1, r2
    e258:	4618      	mov	r0, r3
    e25a:	4b28      	ldr	r3, [pc, #160]	; (e2fc <_usb_d_dev_ep_stall_clr+0xc0>)
    e25c:	4798      	blx	r3
    e25e:	4603      	mov	r3, r0
    e260:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    e262:	7bbb      	ldrb	r3, [r7, #14]
    e264:	f083 0301 	eor.w	r3, r3, #1
    e268:	b2db      	uxtb	r3, r3
    e26a:	2b00      	cmp	r3, #0
    e26c:	d001      	beq.n	e272 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    e26e:	2300      	movs	r3, #0
    e270:	e040      	b.n	e2f4 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    e272:	78f9      	ldrb	r1, [r7, #3]
    e274:	7bfb      	ldrb	r3, [r7, #15]
    e276:	2200      	movs	r2, #0
    e278:	4618      	mov	r0, r3
    e27a:	4b21      	ldr	r3, [pc, #132]	; (e300 <_usb_d_dev_ep_stall_clr+0xc4>)
    e27c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    e27e:	78fb      	ldrb	r3, [r7, #3]
    e280:	2220      	movs	r2, #32
    e282:	409a      	lsls	r2, r3
    e284:	7bfb      	ldrb	r3, [r7, #15]
    e286:	4611      	mov	r1, r2
    e288:	4618      	mov	r0, r3
    e28a:	4b1e      	ldr	r3, [pc, #120]	; (e304 <_usb_d_dev_ep_stall_clr+0xc8>)
    e28c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    e28e:	78fa      	ldrb	r2, [r7, #3]
    e290:	7bfb      	ldrb	r3, [r7, #15]
    e292:	4611      	mov	r1, r2
    e294:	4618      	mov	r0, r3
    e296:	4b1c      	ldr	r3, [pc, #112]	; (e308 <_usb_d_dev_ep_stall_clr+0xcc>)
    e298:	4798      	blx	r3
    e29a:	4603      	mov	r3, r0
    e29c:	2b00      	cmp	r3, #0
    e29e:	d00b      	beq.n	e2b8 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    e2a0:	78fa      	ldrb	r2, [r7, #3]
    e2a2:	7bfb      	ldrb	r3, [r7, #15]
    e2a4:	4611      	mov	r1, r2
    e2a6:	4618      	mov	r0, r3
    e2a8:	4b18      	ldr	r3, [pc, #96]	; (e30c <_usb_d_dev_ep_stall_clr+0xd0>)
    e2aa:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    e2ac:	78f9      	ldrb	r1, [r7, #3]
    e2ae:	7bfb      	ldrb	r3, [r7, #15]
    e2b0:	2200      	movs	r2, #0
    e2b2:	4618      	mov	r0, r3
    e2b4:	4b16      	ldr	r3, [pc, #88]	; (e310 <_usb_d_dev_ep_stall_clr+0xd4>)
    e2b6:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    e2b8:	687b      	ldr	r3, [r7, #4]
    e2ba:	7cdb      	ldrb	r3, [r3, #19]
    e2bc:	f003 0307 	and.w	r3, r3, #7
    e2c0:	b2db      	uxtb	r3, r3
    e2c2:	2b01      	cmp	r3, #1
    e2c4:	d110      	bne.n	e2e8 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    e2c6:	7bfb      	ldrb	r3, [r7, #15]
    e2c8:	4619      	mov	r1, r3
    e2ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e2ce:	4b11      	ldr	r3, [pc, #68]	; (e314 <_usb_d_dev_ep_stall_clr+0xd8>)
    e2d0:	4798      	blx	r3
    e2d2:	4603      	mov	r3, r0
    e2d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    e2d8:	2b00      	cmp	r3, #0
    e2da:	d10a      	bne.n	e2f2 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    e2dc:	687a      	ldr	r2, [r7, #4]
    e2de:	7cd3      	ldrb	r3, [r2, #19]
    e2e0:	f36f 03c3 	bfc	r3, #3, #1
    e2e4:	74d3      	strb	r3, [r2, #19]
    e2e6:	e004      	b.n	e2f2 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    e2e8:	687a      	ldr	r2, [r7, #4]
    e2ea:	7cd3      	ldrb	r3, [r2, #19]
    e2ec:	f36f 03c3 	bfc	r3, #3, #1
    e2f0:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    e2f2:	2300      	movs	r3, #0
}
    e2f4:	4618      	mov	r0, r3
    e2f6:	3710      	adds	r7, #16
    e2f8:	46bd      	mov	sp, r7
    e2fa:	bd80      	pop	{r7, pc}
    e2fc:	0000c8ad 	.word	0x0000c8ad
    e300:	0000c855 	.word	0x0000c855
    e304:	0000c7fd 	.word	0x0000c7fd
    e308:	0000c8f1 	.word	0x0000c8f1
    e30c:	0000c935 	.word	0x0000c935
    e310:	0000ca21 	.word	0x0000ca21
    e314:	0000c2dd 	.word	0x0000c2dd

0000e318 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    e318:	b580      	push	{r7, lr}
    e31a:	b086      	sub	sp, #24
    e31c:	af00      	add	r7, sp, #0
    e31e:	4603      	mov	r3, r0
    e320:	460a      	mov	r2, r1
    e322:	71fb      	strb	r3, [r7, #7]
    e324:	4613      	mov	r3, r2
    e326:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    e328:	79fb      	ldrb	r3, [r7, #7]
    e32a:	f003 030f 	and.w	r3, r3, #15
    e32e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    e330:	79fb      	ldrb	r3, [r7, #7]
    e332:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e336:	2b00      	cmp	r3, #0
    e338:	bf14      	ite	ne
    e33a:	2301      	movne	r3, #1
    e33c:	2300      	moveq	r3, #0
    e33e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    e340:	7cba      	ldrb	r2, [r7, #18]
    e342:	7cfb      	ldrb	r3, [r7, #19]
    e344:	4611      	mov	r1, r2
    e346:	4618      	mov	r0, r3
    e348:	4b13      	ldr	r3, [pc, #76]	; (e398 <_usb_d_dev_ep_stall+0x80>)
    e34a:	4798      	blx	r3
    e34c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    e34e:	7cfb      	ldrb	r3, [r7, #19]
    e350:	2b04      	cmp	r3, #4
    e352:	d902      	bls.n	e35a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    e354:	f06f 0311 	mvn.w	r3, #17
    e358:	e01a      	b.n	e390 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    e35a:	79bb      	ldrb	r3, [r7, #6]
    e35c:	2b01      	cmp	r3, #1
    e35e:	d106      	bne.n	e36e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    e360:	7cbb      	ldrb	r3, [r7, #18]
    e362:	4619      	mov	r1, r3
    e364:	68f8      	ldr	r0, [r7, #12]
    e366:	4b0d      	ldr	r3, [pc, #52]	; (e39c <_usb_d_dev_ep_stall+0x84>)
    e368:	4798      	blx	r3
    e36a:	6178      	str	r0, [r7, #20]
    e36c:	e00f      	b.n	e38e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    e36e:	79bb      	ldrb	r3, [r7, #6]
    e370:	2b00      	cmp	r3, #0
    e372:	d106      	bne.n	e382 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    e374:	7cbb      	ldrb	r3, [r7, #18]
    e376:	4619      	mov	r1, r3
    e378:	68f8      	ldr	r0, [r7, #12]
    e37a:	4b09      	ldr	r3, [pc, #36]	; (e3a0 <_usb_d_dev_ep_stall+0x88>)
    e37c:	4798      	blx	r3
    e37e:	6178      	str	r0, [r7, #20]
    e380:	e005      	b.n	e38e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    e382:	7cbb      	ldrb	r3, [r7, #18]
    e384:	4619      	mov	r1, r3
    e386:	68f8      	ldr	r0, [r7, #12]
    e388:	4b06      	ldr	r3, [pc, #24]	; (e3a4 <_usb_d_dev_ep_stall+0x8c>)
    e38a:	4798      	blx	r3
    e38c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    e38e:	697b      	ldr	r3, [r7, #20]
}
    e390:	4618      	mov	r0, r3
    e392:	3718      	adds	r7, #24
    e394:	46bd      	mov	sp, r7
    e396:	bd80      	pop	{r7, pc}
    e398:	0000cdb9 	.word	0x0000cdb9
    e39c:	0000e1ed 	.word	0x0000e1ed
    e3a0:	0000e23d 	.word	0x0000e23d
    e3a4:	0000e1bd 	.word	0x0000e1bd

0000e3a8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    e3a8:	b580      	push	{r7, lr}
    e3aa:	b082      	sub	sp, #8
    e3ac:	af00      	add	r7, sp, #0
    e3ae:	6078      	str	r0, [r7, #4]
    e3b0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    e3b2:	687b      	ldr	r3, [r7, #4]
    e3b4:	7c9b      	ldrb	r3, [r3, #18]
    e3b6:	2bff      	cmp	r3, #255	; 0xff
    e3b8:	d014      	beq.n	e3e4 <_usb_d_dev_trans_done+0x3c>
    e3ba:	687b      	ldr	r3, [r7, #4]
    e3bc:	7cdb      	ldrb	r3, [r3, #19]
    e3be:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e3c2:	b2db      	uxtb	r3, r3
    e3c4:	2b00      	cmp	r3, #0
    e3c6:	d00d      	beq.n	e3e4 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    e3c8:	687a      	ldr	r2, [r7, #4]
    e3ca:	7cd3      	ldrb	r3, [r2, #19]
    e3cc:	f36f 1386 	bfc	r3, #6, #1
    e3d0:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    e3d2:	4b06      	ldr	r3, [pc, #24]	; (e3ec <_usb_d_dev_trans_done+0x44>)
    e3d4:	691b      	ldr	r3, [r3, #16]
    e3d6:	687a      	ldr	r2, [r7, #4]
    e3d8:	7c90      	ldrb	r0, [r2, #18]
    e3da:	687a      	ldr	r2, [r7, #4]
    e3dc:	6892      	ldr	r2, [r2, #8]
    e3de:	6839      	ldr	r1, [r7, #0]
    e3e0:	4798      	blx	r3
    e3e2:	e000      	b.n	e3e6 <_usb_d_dev_trans_done+0x3e>
		return;
    e3e4:	bf00      	nop
}
    e3e6:	3708      	adds	r7, #8
    e3e8:	46bd      	mov	sp, r7
    e3ea:	bd80      	pop	{r7, pc}
    e3ec:	2000380c 	.word	0x2000380c

0000e3f0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    e3f0:	b580      	push	{r7, lr}
    e3f2:	b086      	sub	sp, #24
    e3f4:	af00      	add	r7, sp, #0
    e3f6:	60f8      	str	r0, [r7, #12]
    e3f8:	460b      	mov	r3, r1
    e3fa:	607a      	str	r2, [r7, #4]
    e3fc:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    e3fe:	68fb      	ldr	r3, [r7, #12]
    e400:	7c9b      	ldrb	r3, [r3, #18]
    e402:	f003 030f 	and.w	r3, r3, #15
    e406:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    e408:	4b1f      	ldr	r3, [pc, #124]	; (e488 <_usb_d_dev_trans_stop+0x98>)
    e40a:	881b      	ldrh	r3, [r3, #0]
    e40c:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    e40e:	68fb      	ldr	r3, [r7, #12]
    e410:	7c9b      	ldrb	r3, [r3, #18]
    e412:	2bff      	cmp	r3, #255	; 0xff
    e414:	d033      	beq.n	e47e <_usb_d_dev_trans_stop+0x8e>
    e416:	68fb      	ldr	r3, [r7, #12]
    e418:	7cdb      	ldrb	r3, [r3, #19]
    e41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e41e:	b2db      	uxtb	r3, r3
    e420:	2b00      	cmp	r3, #0
    e422:	d02c      	beq.n	e47e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    e424:	7afb      	ldrb	r3, [r7, #11]
    e426:	2b00      	cmp	r3, #0
    e428:	d006      	beq.n	e438 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    e42a:	7dfb      	ldrb	r3, [r7, #23]
    e42c:	2200      	movs	r2, #0
    e42e:	2101      	movs	r1, #1
    e430:	4618      	mov	r0, r3
    e432:	4b16      	ldr	r3, [pc, #88]	; (e48c <_usb_d_dev_trans_stop+0x9c>)
    e434:	4798      	blx	r3
    e436:	e005      	b.n	e444 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    e438:	7dfb      	ldrb	r3, [r7, #23]
    e43a:	2200      	movs	r2, #0
    e43c:	2100      	movs	r1, #0
    e43e:	4618      	mov	r0, r3
    e440:	4b13      	ldr	r3, [pc, #76]	; (e490 <_usb_d_dev_trans_stop+0xa0>)
    e442:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    e444:	7afb      	ldrb	r3, [r7, #11]
    e446:	f107 0218 	add.w	r2, r7, #24
    e44a:	4413      	add	r3, r2
    e44c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    e450:	461a      	mov	r2, r3
    e452:	7dfb      	ldrb	r3, [r7, #23]
    e454:	4611      	mov	r1, r2
    e456:	4618      	mov	r0, r3
    e458:	4b0e      	ldr	r3, [pc, #56]	; (e494 <_usb_d_dev_trans_stop+0xa4>)
    e45a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    e45c:	7afb      	ldrb	r3, [r7, #11]
    e45e:	f107 0218 	add.w	r2, r7, #24
    e462:	4413      	add	r3, r2
    e464:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    e468:	461a      	mov	r2, r3
    e46a:	7dfb      	ldrb	r3, [r7, #23]
    e46c:	4611      	mov	r1, r2
    e46e:	4618      	mov	r0, r3
    e470:	4b09      	ldr	r3, [pc, #36]	; (e498 <_usb_d_dev_trans_stop+0xa8>)
    e472:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    e474:	6879      	ldr	r1, [r7, #4]
    e476:	68f8      	ldr	r0, [r7, #12]
    e478:	4b08      	ldr	r3, [pc, #32]	; (e49c <_usb_d_dev_trans_stop+0xac>)
    e47a:	4798      	blx	r3
    e47c:	e000      	b.n	e480 <_usb_d_dev_trans_stop+0x90>
		return;
    e47e:	bf00      	nop
}
    e480:	3718      	adds	r7, #24
    e482:	46bd      	mov	sp, r7
    e484:	bd80      	pop	{r7, pc}
    e486:	bf00      	nop
    e488:	0001d2f4 	.word	0x0001d2f4
    e48c:	0000cca5 	.word	0x0000cca5
    e490:	0000ccfd 	.word	0x0000ccfd
    e494:	0000c7ad 	.word	0x0000c7ad
    e498:	0000c7fd 	.word	0x0000c7fd
    e49c:	0000e3a9 	.word	0x0000e3a9

0000e4a0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    e4a0:	b580      	push	{r7, lr}
    e4a2:	b086      	sub	sp, #24
    e4a4:	af00      	add	r7, sp, #0
    e4a6:	4603      	mov	r3, r0
    e4a8:	6039      	str	r1, [r7, #0]
    e4aa:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    e4ac:	79fb      	ldrb	r3, [r7, #7]
    e4ae:	f003 030f 	and.w	r3, r3, #15
    e4b2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    e4b4:	7dfb      	ldrb	r3, [r7, #23]
    e4b6:	015b      	lsls	r3, r3, #5
    e4b8:	4a1e      	ldr	r2, [pc, #120]	; (e534 <_usb_d_dev_ep_read_req+0x94>)
    e4ba:	4413      	add	r3, r2
    e4bc:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    e4be:	693b      	ldr	r3, [r7, #16]
    e4c0:	681b      	ldr	r3, [r3, #0]
    e4c2:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    e4c4:	693b      	ldr	r3, [r7, #16]
    e4c6:	685b      	ldr	r3, [r3, #4]
    e4c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e4cc:	b29b      	uxth	r3, r3
    e4ce:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    e4d0:	7dfb      	ldrb	r3, [r7, #23]
    e4d2:	2b04      	cmp	r3, #4
    e4d4:	d802      	bhi.n	e4dc <_usb_d_dev_ep_read_req+0x3c>
    e4d6:	683b      	ldr	r3, [r7, #0]
    e4d8:	2b00      	cmp	r3, #0
    e4da:	d102      	bne.n	e4e2 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    e4dc:	f06f 0311 	mvn.w	r3, #17
    e4e0:	e023      	b.n	e52a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    e4e2:	7dfb      	ldrb	r3, [r7, #23]
    e4e4:	4618      	mov	r0, r3
    e4e6:	4b14      	ldr	r3, [pc, #80]	; (e538 <_usb_d_dev_ep_read_req+0x98>)
    e4e8:	4798      	blx	r3
    e4ea:	4603      	mov	r3, r0
    e4ec:	f083 0301 	eor.w	r3, r3, #1
    e4f0:	b2db      	uxtb	r3, r3
    e4f2:	2b00      	cmp	r3, #0
    e4f4:	d002      	beq.n	e4fc <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    e4f6:	f06f 0312 	mvn.w	r3, #18
    e4fa:	e016      	b.n	e52a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    e4fc:	7dfb      	ldrb	r3, [r7, #23]
    e4fe:	4618      	mov	r0, r3
    e500:	4b0e      	ldr	r3, [pc, #56]	; (e53c <_usb_d_dev_ep_read_req+0x9c>)
    e502:	4798      	blx	r3
    e504:	4603      	mov	r3, r0
    e506:	f083 0301 	eor.w	r3, r3, #1
    e50a:	b2db      	uxtb	r3, r3
    e50c:	2b00      	cmp	r3, #0
    e50e:	d001      	beq.n	e514 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    e510:	2300      	movs	r3, #0
    e512:	e00a      	b.n	e52a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    e514:	68fb      	ldr	r3, [r7, #12]
    e516:	2208      	movs	r2, #8
    e518:	4619      	mov	r1, r3
    e51a:	6838      	ldr	r0, [r7, #0]
    e51c:	4b08      	ldr	r3, [pc, #32]	; (e540 <_usb_d_dev_ep_read_req+0xa0>)
    e51e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    e520:	7dfb      	ldrb	r3, [r7, #23]
    e522:	4618      	mov	r0, r3
    e524:	4b07      	ldr	r3, [pc, #28]	; (e544 <_usb_d_dev_ep_read_req+0xa4>)
    e526:	4798      	blx	r3

	return bytes;
    e528:	897b      	ldrh	r3, [r7, #10]
}
    e52a:	4618      	mov	r0, r3
    e52c:	3718      	adds	r7, #24
    e52e:	46bd      	mov	sp, r7
    e530:	bd80      	pop	{r7, pc}
    e532:	bf00      	nop
    e534:	200038d4 	.word	0x200038d4
    e538:	0000c825 	.word	0x0000c825
    e53c:	0000c9d1 	.word	0x0000c9d1
    e540:	00018b59 	.word	0x00018b59
    e544:	0000ca01 	.word	0x0000ca01

0000e548 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    e548:	b580      	push	{r7, lr}
    e54a:	b086      	sub	sp, #24
    e54c:	af00      	add	r7, sp, #0
    e54e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    e550:	687b      	ldr	r3, [r7, #4]
    e552:	7a1b      	ldrb	r3, [r3, #8]
    e554:	f003 030f 	and.w	r3, r3, #15
    e558:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    e55a:	687b      	ldr	r3, [r7, #4]
    e55c:	7a1b      	ldrb	r3, [r3, #8]
    e55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e562:	2b00      	cmp	r3, #0
    e564:	bf14      	ite	ne
    e566:	2301      	movne	r3, #1
    e568:	2300      	moveq	r3, #0
    e56a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    e56c:	7d7a      	ldrb	r2, [r7, #21]
    e56e:	7dbb      	ldrb	r3, [r7, #22]
    e570:	4611      	mov	r1, r2
    e572:	4618      	mov	r0, r3
    e574:	4b5f      	ldr	r3, [pc, #380]	; (e6f4 <_usb_d_dev_ep_trans+0x1ac>)
    e576:	4798      	blx	r3
    e578:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    e57a:	693b      	ldr	r3, [r7, #16]
    e57c:	8a1b      	ldrh	r3, [r3, #16]
    e57e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    e582:	4293      	cmp	r3, r2
    e584:	d004      	beq.n	e590 <_usb_d_dev_ep_trans+0x48>
    e586:	693b      	ldr	r3, [r7, #16]
    e588:	8a1b      	ldrh	r3, [r3, #16]
    e58a:	3b01      	subs	r3, #1
    e58c:	b29b      	uxth	r3, r3
    e58e:	e001      	b.n	e594 <_usb_d_dev_ep_trans+0x4c>
    e590:	f240 33ff 	movw	r3, #1023	; 0x3ff
    e594:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    e596:	687b      	ldr	r3, [r7, #4]
    e598:	685a      	ldr	r2, [r3, #4]
    e59a:	89fb      	ldrh	r3, [r7, #14]
    e59c:	4013      	ands	r3, r2
    e59e:	2b00      	cmp	r3, #0
    e5a0:	bf14      	ite	ne
    e5a2:	2301      	movne	r3, #1
    e5a4:	2300      	moveq	r3, #0
    e5a6:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    e5a8:	2300      	movs	r3, #0
    e5aa:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    e5ac:	7dbb      	ldrb	r3, [r7, #22]
    e5ae:	2b04      	cmp	r3, #4
    e5b0:	d902      	bls.n	e5b8 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    e5b2:	f06f 0311 	mvn.w	r3, #17
    e5b6:	e098      	b.n	e6ea <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    e5b8:	687b      	ldr	r3, [r7, #4]
    e5ba:	681b      	ldr	r3, [r3, #0]
    e5bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    e5c0:	d31a      	bcc.n	e5f8 <_usb_d_dev_ep_trans+0xb0>
    e5c2:	687b      	ldr	r3, [r7, #4]
    e5c4:	681b      	ldr	r3, [r3, #0]
    e5c6:	461a      	mov	r2, r3
    e5c8:	687b      	ldr	r3, [r7, #4]
    e5ca:	685b      	ldr	r3, [r3, #4]
    e5cc:	4413      	add	r3, r2
    e5ce:	4a4a      	ldr	r2, [pc, #296]	; (e6f8 <_usb_d_dev_ep_trans+0x1b0>)
    e5d0:	4293      	cmp	r3, r2
    e5d2:	d811      	bhi.n	e5f8 <_usb_d_dev_ep_trans+0xb0>
    e5d4:	687b      	ldr	r3, [r7, #4]
    e5d6:	681b      	ldr	r3, [r3, #0]
    e5d8:	f003 0303 	and.w	r3, r3, #3
    e5dc:	2b00      	cmp	r3, #0
    e5de:	d10b      	bne.n	e5f8 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    e5e0:	7d7b      	ldrb	r3, [r7, #21]
    e5e2:	f083 0301 	eor.w	r3, r3, #1
    e5e6:	b2db      	uxtb	r3, r3
    e5e8:	2b00      	cmp	r3, #0
    e5ea:	d00e      	beq.n	e60a <_usb_d_dev_ep_trans+0xc2>
    e5ec:	687b      	ldr	r3, [r7, #4]
    e5ee:	685b      	ldr	r3, [r3, #4]
    e5f0:	693a      	ldr	r2, [r7, #16]
    e5f2:	8a12      	ldrh	r2, [r2, #16]
    e5f4:	4293      	cmp	r3, r2
    e5f6:	d208      	bcs.n	e60a <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    e5f8:	693b      	ldr	r3, [r7, #16]
    e5fa:	68db      	ldr	r3, [r3, #12]
    e5fc:	2b00      	cmp	r3, #0
    e5fe:	d102      	bne.n	e606 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    e600:	f06f 0312 	mvn.w	r3, #18
    e604:	e071      	b.n	e6ea <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    e606:	2301      	movs	r3, #1
    e608:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    e60a:	7d7b      	ldrb	r3, [r7, #21]
    e60c:	f083 0301 	eor.w	r3, r3, #1
    e610:	b2db      	uxtb	r3, r3
    e612:	2b00      	cmp	r3, #0
    e614:	d009      	beq.n	e62a <_usb_d_dev_ep_trans+0xe2>
    e616:	7b7b      	ldrb	r3, [r7, #13]
    e618:	2b00      	cmp	r3, #0
    e61a:	d006      	beq.n	e62a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    e61c:	693b      	ldr	r3, [r7, #16]
    e61e:	68db      	ldr	r3, [r3, #12]
    e620:	2b00      	cmp	r3, #0
    e622:	d102      	bne.n	e62a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    e624:	f06f 0311 	mvn.w	r3, #17
    e628:	e05f      	b.n	e6ea <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    e62a:	693b      	ldr	r3, [r7, #16]
    e62c:	7cdb      	ldrb	r3, [r3, #19]
    e62e:	f003 0308 	and.w	r3, r3, #8
    e632:	b2db      	uxtb	r3, r3
    e634:	2b00      	cmp	r3, #0
    e636:	d001      	beq.n	e63c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    e638:	2302      	movs	r3, #2
    e63a:	e056      	b.n	e6ea <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    e63c:	f107 0308 	add.w	r3, r7, #8
    e640:	4618      	mov	r0, r3
    e642:	4b2e      	ldr	r3, [pc, #184]	; (e6fc <_usb_d_dev_ep_trans+0x1b4>)
    e644:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    e646:	693b      	ldr	r3, [r7, #16]
    e648:	7cdb      	ldrb	r3, [r3, #19]
    e64a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e64e:	b2db      	uxtb	r3, r3
    e650:	2b00      	cmp	r3, #0
    e652:	d006      	beq.n	e662 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    e654:	f107 0308 	add.w	r3, r7, #8
    e658:	4618      	mov	r0, r3
    e65a:	4b29      	ldr	r3, [pc, #164]	; (e700 <_usb_d_dev_ep_trans+0x1b8>)
    e65c:	4798      	blx	r3
		return USB_BUSY;
    e65e:	2301      	movs	r3, #1
    e660:	e043      	b.n	e6ea <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    e662:	693a      	ldr	r2, [r7, #16]
    e664:	7cd3      	ldrb	r3, [r2, #19]
    e666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e66a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    e66c:	f107 0308 	add.w	r3, r7, #8
    e670:	4618      	mov	r0, r3
    e672:	4b23      	ldr	r3, [pc, #140]	; (e700 <_usb_d_dev_ep_trans+0x1b8>)
    e674:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    e676:	687b      	ldr	r3, [r7, #4]
    e678:	681a      	ldr	r2, [r3, #0]
    e67a:	693b      	ldr	r3, [r7, #16]
    e67c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    e67e:	687b      	ldr	r3, [r7, #4]
    e680:	685a      	ldr	r2, [r3, #4]
    e682:	693b      	ldr	r3, [r7, #16]
    e684:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    e686:	693b      	ldr	r3, [r7, #16]
    e688:	2200      	movs	r2, #0
    e68a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    e68c:	693a      	ldr	r2, [r7, #16]
    e68e:	7cd3      	ldrb	r3, [r2, #19]
    e690:	7d79      	ldrb	r1, [r7, #21]
    e692:	f361 13c7 	bfi	r3, r1, #7, #1
    e696:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    e698:	693a      	ldr	r2, [r7, #16]
    e69a:	7cd3      	ldrb	r3, [r2, #19]
    e69c:	7df9      	ldrb	r1, [r7, #23]
    e69e:	f361 1345 	bfi	r3, r1, #5, #1
    e6a2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    e6a4:	687b      	ldr	r3, [r7, #4]
    e6a6:	7a5b      	ldrb	r3, [r3, #9]
    e6a8:	2b00      	cmp	r3, #0
    e6aa:	d007      	beq.n	e6bc <_usb_d_dev_ep_trans+0x174>
    e6ac:	7b7b      	ldrb	r3, [r7, #13]
    e6ae:	f083 0301 	eor.w	r3, r3, #1
    e6b2:	b2db      	uxtb	r3, r3
    e6b4:	2b00      	cmp	r3, #0
    e6b6:	d001      	beq.n	e6bc <_usb_d_dev_ep_trans+0x174>
    e6b8:	2301      	movs	r3, #1
    e6ba:	e000      	b.n	e6be <_usb_d_dev_ep_trans+0x176>
    e6bc:	2300      	movs	r3, #0
    e6be:	b2db      	uxtb	r3, r3
    e6c0:	f003 0301 	and.w	r3, r3, #1
    e6c4:	b2d9      	uxtb	r1, r3
    e6c6:	693a      	ldr	r2, [r7, #16]
    e6c8:	7cd3      	ldrb	r3, [r2, #19]
    e6ca:	f361 1304 	bfi	r3, r1, #4, #1
    e6ce:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    e6d0:	7d7b      	ldrb	r3, [r7, #21]
    e6d2:	2b00      	cmp	r3, #0
    e6d4:	d004      	beq.n	e6e0 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    e6d6:	2100      	movs	r1, #0
    e6d8:	6938      	ldr	r0, [r7, #16]
    e6da:	4b0a      	ldr	r3, [pc, #40]	; (e704 <_usb_d_dev_ep_trans+0x1bc>)
    e6dc:	4798      	blx	r3
    e6de:	e003      	b.n	e6e8 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    e6e0:	2100      	movs	r1, #0
    e6e2:	6938      	ldr	r0, [r7, #16]
    e6e4:	4b08      	ldr	r3, [pc, #32]	; (e708 <_usb_d_dev_ep_trans+0x1c0>)
    e6e6:	4798      	blx	r3
	}

	return ERR_NONE;
    e6e8:	2300      	movs	r3, #0
}
    e6ea:	4618      	mov	r0, r3
    e6ec:	3718      	adds	r7, #24
    e6ee:	46bd      	mov	sp, r7
    e6f0:	bd80      	pop	{r7, pc}
    e6f2:	bf00      	nop
    e6f4:	0000cdb9 	.word	0x0000cdb9
    e6f8:	20041fff 	.word	0x20041fff
    e6fc:	0000f015 	.word	0x0000f015
    e700:	0000f03b 	.word	0x0000f03b
    e704:	0000d081 	.word	0x0000d081
    e708:	0000d299 	.word	0x0000d299

0000e70c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    e70c:	b580      	push	{r7, lr}
    e70e:	b084      	sub	sp, #16
    e710:	af00      	add	r7, sp, #0
    e712:	4603      	mov	r3, r0
    e714:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    e716:	79fb      	ldrb	r3, [r7, #7]
    e718:	f003 030f 	and.w	r3, r3, #15
    e71c:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    e71e:	79fb      	ldrb	r3, [r7, #7]
    e720:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e724:	2b00      	cmp	r3, #0
    e726:	bf14      	ite	ne
    e728:	2301      	movne	r3, #1
    e72a:	2300      	moveq	r3, #0
    e72c:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    e72e:	7bba      	ldrb	r2, [r7, #14]
    e730:	7bfb      	ldrb	r3, [r7, #15]
    e732:	4611      	mov	r1, r2
    e734:	4618      	mov	r0, r3
    e736:	4b08      	ldr	r3, [pc, #32]	; (e758 <_usb_d_dev_ep_abort+0x4c>)
    e738:	4798      	blx	r3
    e73a:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    e73c:	7bfb      	ldrb	r3, [r7, #15]
    e73e:	2b04      	cmp	r3, #4
    e740:	d806      	bhi.n	e750 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    e742:	7bbb      	ldrb	r3, [r7, #14]
    e744:	2202      	movs	r2, #2
    e746:	4619      	mov	r1, r3
    e748:	68b8      	ldr	r0, [r7, #8]
    e74a:	4b04      	ldr	r3, [pc, #16]	; (e75c <_usb_d_dev_ep_abort+0x50>)
    e74c:	4798      	blx	r3
    e74e:	e000      	b.n	e752 <_usb_d_dev_ep_abort+0x46>
		return;
    e750:	bf00      	nop
}
    e752:	3710      	adds	r7, #16
    e754:	46bd      	mov	sp, r7
    e756:	bd80      	pop	{r7, pc}
    e758:	0000cdb9 	.word	0x0000cdb9
    e75c:	0000e3f1 	.word	0x0000e3f1

0000e760 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    e760:	b480      	push	{r7}
    e762:	b085      	sub	sp, #20
    e764:	af00      	add	r7, sp, #0
    e766:	4603      	mov	r3, r0
    e768:	6039      	str	r1, [r7, #0]
    e76a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    e76c:	683b      	ldr	r3, [r7, #0]
    e76e:	2b00      	cmp	r3, #0
    e770:	d001      	beq.n	e776 <_usb_d_dev_register_callback+0x16>
    e772:	683b      	ldr	r3, [r7, #0]
    e774:	e000      	b.n	e778 <_usb_d_dev_register_callback+0x18>
    e776:	4b0a      	ldr	r3, [pc, #40]	; (e7a0 <_usb_d_dev_register_callback+0x40>)
    e778:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    e77a:	79fb      	ldrb	r3, [r7, #7]
    e77c:	2b01      	cmp	r3, #1
    e77e:	d103      	bne.n	e788 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    e780:	4a08      	ldr	r2, [pc, #32]	; (e7a4 <_usb_d_dev_register_callback+0x44>)
    e782:	68fb      	ldr	r3, [r7, #12]
    e784:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    e786:	e005      	b.n	e794 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    e788:	79fb      	ldrb	r3, [r7, #7]
    e78a:	2b00      	cmp	r3, #0
    e78c:	d102      	bne.n	e794 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    e78e:	4a05      	ldr	r2, [pc, #20]	; (e7a4 <_usb_d_dev_register_callback+0x44>)
    e790:	68fb      	ldr	r3, [r7, #12]
    e792:	6013      	str	r3, [r2, #0]
}
    e794:	bf00      	nop
    e796:	3714      	adds	r7, #20
    e798:	46bd      	mov	sp, r7
    e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e79e:	4770      	bx	lr
    e7a0:	0000c641 	.word	0x0000c641
    e7a4:	2000380c 	.word	0x2000380c

0000e7a8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    e7a8:	b480      	push	{r7}
    e7aa:	b085      	sub	sp, #20
    e7ac:	af00      	add	r7, sp, #0
    e7ae:	4603      	mov	r3, r0
    e7b0:	6039      	str	r1, [r7, #0]
    e7b2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    e7b4:	683b      	ldr	r3, [r7, #0]
    e7b6:	2b00      	cmp	r3, #0
    e7b8:	d001      	beq.n	e7be <_usb_d_dev_register_ep_callback+0x16>
    e7ba:	683b      	ldr	r3, [r7, #0]
    e7bc:	e000      	b.n	e7c0 <_usb_d_dev_register_ep_callback+0x18>
    e7be:	4b0e      	ldr	r3, [pc, #56]	; (e7f8 <_usb_d_dev_register_ep_callback+0x50>)
    e7c0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    e7c2:	79fb      	ldrb	r3, [r7, #7]
    e7c4:	2b00      	cmp	r3, #0
    e7c6:	d103      	bne.n	e7d0 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    e7c8:	4a0c      	ldr	r2, [pc, #48]	; (e7fc <_usb_d_dev_register_ep_callback+0x54>)
    e7ca:	68fb      	ldr	r3, [r7, #12]
    e7cc:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    e7ce:	e00c      	b.n	e7ea <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    e7d0:	79fb      	ldrb	r3, [r7, #7]
    e7d2:	2b01      	cmp	r3, #1
    e7d4:	d103      	bne.n	e7de <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    e7d6:	4a09      	ldr	r2, [pc, #36]	; (e7fc <_usb_d_dev_register_ep_callback+0x54>)
    e7d8:	68fb      	ldr	r3, [r7, #12]
    e7da:	60d3      	str	r3, [r2, #12]
}
    e7dc:	e005      	b.n	e7ea <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    e7de:	79fb      	ldrb	r3, [r7, #7]
    e7e0:	2b02      	cmp	r3, #2
    e7e2:	d102      	bne.n	e7ea <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    e7e4:	4a05      	ldr	r2, [pc, #20]	; (e7fc <_usb_d_dev_register_ep_callback+0x54>)
    e7e6:	68fb      	ldr	r3, [r7, #12]
    e7e8:	6113      	str	r3, [r2, #16]
}
    e7ea:	bf00      	nop
    e7ec:	3714      	adds	r7, #20
    e7ee:	46bd      	mov	sp, r7
    e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e7f4:	4770      	bx	lr
    e7f6:	bf00      	nop
    e7f8:	0000c641 	.word	0x0000c641
    e7fc:	2000380c 	.word	0x2000380c

0000e800 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    e800:	b580      	push	{r7, lr}
    e802:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    e804:	4b01      	ldr	r3, [pc, #4]	; (e80c <USB_0_Handler+0xc>)
    e806:	4798      	blx	r3
}
    e808:	bf00      	nop
    e80a:	bd80      	pop	{r7, pc}
    e80c:	0000da71 	.word	0x0000da71

0000e810 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    e810:	b580      	push	{r7, lr}
    e812:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    e814:	4b01      	ldr	r3, [pc, #4]	; (e81c <USB_1_Handler+0xc>)
    e816:	4798      	blx	r3
}
    e818:	bf00      	nop
    e81a:	bd80      	pop	{r7, pc}
    e81c:	0000da71 	.word	0x0000da71

0000e820 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    e820:	b580      	push	{r7, lr}
    e822:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    e824:	4b01      	ldr	r3, [pc, #4]	; (e82c <USB_2_Handler+0xc>)
    e826:	4798      	blx	r3
}
    e828:	bf00      	nop
    e82a:	bd80      	pop	{r7, pc}
    e82c:	0000da71 	.word	0x0000da71

0000e830 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    e830:	b580      	push	{r7, lr}
    e832:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    e834:	4b01      	ldr	r3, [pc, #4]	; (e83c <USB_3_Handler+0xc>)
    e836:	4798      	blx	r3
}
    e838:	bf00      	nop
    e83a:	bd80      	pop	{r7, pc}
    e83c:	0000da71 	.word	0x0000da71

0000e840 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    e840:	b480      	push	{r7}
    e842:	b083      	sub	sp, #12
    e844:	af00      	add	r7, sp, #0
    e846:	6078      	str	r0, [r7, #4]
    e848:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    e84a:	bf00      	nop
    e84c:	687b      	ldr	r3, [r7, #4]
    e84e:	689a      	ldr	r2, [r3, #8]
    e850:	683b      	ldr	r3, [r7, #0]
    e852:	4013      	ands	r3, r2
    e854:	2b00      	cmp	r3, #0
    e856:	d1f9      	bne.n	e84c <hri_wdt_wait_for_sync+0xc>
	};
}
    e858:	bf00      	nop
    e85a:	370c      	adds	r7, #12
    e85c:	46bd      	mov	sp, r7
    e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e862:	4770      	bx	lr

0000e864 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    e864:	b580      	push	{r7, lr}
    e866:	b084      	sub	sp, #16
    e868:	af00      	add	r7, sp, #0
    e86a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    e86c:	210e      	movs	r1, #14
    e86e:	6878      	ldr	r0, [r7, #4]
    e870:	4b0a      	ldr	r3, [pc, #40]	; (e89c <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    e872:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    e874:	687b      	ldr	r3, [r7, #4]
    e876:	781b      	ldrb	r3, [r3, #0]
    e878:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    e87a:	7bfb      	ldrb	r3, [r7, #15]
    e87c:	085b      	lsrs	r3, r3, #1
    e87e:	b2db      	uxtb	r3, r3
    e880:	f003 0301 	and.w	r3, r3, #1
    e884:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    e886:	7bfb      	ldrb	r3, [r7, #15]
    e888:	2b00      	cmp	r3, #0
    e88a:	bf14      	ite	ne
    e88c:	2301      	movne	r3, #1
    e88e:	2300      	moveq	r3, #0
    e890:	b2db      	uxtb	r3, r3
}
    e892:	4618      	mov	r0, r3
    e894:	3710      	adds	r7, #16
    e896:	46bd      	mov	sp, r7
    e898:	bd80      	pop	{r7, pc}
    e89a:	bf00      	nop
    e89c:	0000e841 	.word	0x0000e841

0000e8a0 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    e8a0:	b580      	push	{r7, lr}
    e8a2:	b082      	sub	sp, #8
    e8a4:	af00      	add	r7, sp, #0
    e8a6:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    e8a8:	687b      	ldr	r3, [r7, #4]
    e8aa:	781b      	ldrb	r3, [r3, #0]
    e8ac:	b2db      	uxtb	r3, r3
    e8ae:	f023 0304 	bic.w	r3, r3, #4
    e8b2:	b2da      	uxtb	r2, r3
    e8b4:	687b      	ldr	r3, [r7, #4]
    e8b6:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    e8b8:	210e      	movs	r1, #14
    e8ba:	6878      	ldr	r0, [r7, #4]
    e8bc:	4b02      	ldr	r3, [pc, #8]	; (e8c8 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    e8be:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    e8c0:	bf00      	nop
    e8c2:	3708      	adds	r7, #8
    e8c4:	46bd      	mov	sp, r7
    e8c6:	bd80      	pop	{r7, pc}
    e8c8:	0000e841 	.word	0x0000e841

0000e8cc <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    e8cc:	b580      	push	{r7, lr}
    e8ce:	b084      	sub	sp, #16
    e8d0:	af00      	add	r7, sp, #0
    e8d2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    e8d4:	210e      	movs	r1, #14
    e8d6:	6878      	ldr	r0, [r7, #4]
    e8d8:	4b08      	ldr	r3, [pc, #32]	; (e8fc <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    e8da:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    e8dc:	687b      	ldr	r3, [r7, #4]
    e8de:	781b      	ldrb	r3, [r3, #0]
    e8e0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    e8e2:	7bfb      	ldrb	r3, [r7, #15]
    e8e4:	09db      	lsrs	r3, r3, #7
    e8e6:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    e8e8:	7bfb      	ldrb	r3, [r7, #15]
    e8ea:	2b00      	cmp	r3, #0
    e8ec:	bf14      	ite	ne
    e8ee:	2301      	movne	r3, #1
    e8f0:	2300      	moveq	r3, #0
    e8f2:	b2db      	uxtb	r3, r3
}
    e8f4:	4618      	mov	r0, r3
    e8f6:	3710      	adds	r7, #16
    e8f8:	46bd      	mov	sp, r7
    e8fa:	bd80      	pop	{r7, pc}
    e8fc:	0000e841 	.word	0x0000e841

0000e900 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    e900:	b480      	push	{r7}
    e902:	b085      	sub	sp, #20
    e904:	af00      	add	r7, sp, #0
    e906:	6078      	str	r0, [r7, #4]
    e908:	460b      	mov	r3, r1
    e90a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    e90c:	687b      	ldr	r3, [r7, #4]
    e90e:	785b      	ldrb	r3, [r3, #1]
    e910:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    e912:	7bfb      	ldrb	r3, [r7, #15]
    e914:	f023 030f 	bic.w	r3, r3, #15
    e918:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    e91a:	78fb      	ldrb	r3, [r7, #3]
    e91c:	f003 030f 	and.w	r3, r3, #15
    e920:	b2da      	uxtb	r2, r3
    e922:	7bfb      	ldrb	r3, [r7, #15]
    e924:	4313      	orrs	r3, r2
    e926:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    e928:	687b      	ldr	r3, [r7, #4]
    e92a:	7bfa      	ldrb	r2, [r7, #15]
    e92c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    e92e:	bf00      	nop
    e930:	3714      	adds	r7, #20
    e932:	46bd      	mov	sp, r7
    e934:	f85d 7b04 	ldr.w	r7, [sp], #4
    e938:	4770      	bx	lr
	...

0000e93c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    e93c:	b580      	push	{r7, lr}
    e93e:	b082      	sub	sp, #8
    e940:	af00      	add	r7, sp, #0
    e942:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    e944:	687b      	ldr	r3, [r7, #4]
    e946:	2b00      	cmp	r3, #0
    e948:	d005      	beq.n	e956 <_wdt_init+0x1a>
    e94a:	687b      	ldr	r3, [r7, #4]
    e94c:	681b      	ldr	r3, [r3, #0]
    e94e:	2b00      	cmp	r3, #0
    e950:	d001      	beq.n	e956 <_wdt_init+0x1a>
    e952:	2301      	movs	r3, #1
    e954:	e000      	b.n	e958 <_wdt_init+0x1c>
    e956:	2300      	movs	r3, #0
    e958:	f003 0301 	and.w	r3, r3, #1
    e95c:	b2db      	uxtb	r3, r3
    e95e:	2250      	movs	r2, #80	; 0x50
    e960:	4913      	ldr	r1, [pc, #76]	; (e9b0 <_wdt_init+0x74>)
    e962:	4618      	mov	r0, r3
    e964:	4b13      	ldr	r3, [pc, #76]	; (e9b4 <_wdt_init+0x78>)
    e966:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    e968:	687b      	ldr	r3, [r7, #4]
    e96a:	681b      	ldr	r3, [r3, #0]
    e96c:	4618      	mov	r0, r3
    e96e:	4b12      	ldr	r3, [pc, #72]	; (e9b8 <_wdt_init+0x7c>)
    e970:	4798      	blx	r3
    e972:	4603      	mov	r3, r0
    e974:	2b00      	cmp	r3, #0
    e976:	d107      	bne.n	e988 <_wdt_init+0x4c>
    e978:	687b      	ldr	r3, [r7, #4]
    e97a:	681b      	ldr	r3, [r3, #0]
    e97c:	4618      	mov	r0, r3
    e97e:	4b0f      	ldr	r3, [pc, #60]	; (e9bc <_wdt_init+0x80>)
    e980:	4798      	blx	r3
    e982:	4603      	mov	r3, r0
    e984:	2b00      	cmp	r3, #0
    e986:	d002      	beq.n	e98e <_wdt_init+0x52>
		return ERR_DENIED;
    e988:	f06f 0310 	mvn.w	r3, #16
    e98c:	e00b      	b.n	e9a6 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    e98e:	687b      	ldr	r3, [r7, #4]
    e990:	681b      	ldr	r3, [r3, #0]
    e992:	4618      	mov	r0, r3
    e994:	4b0a      	ldr	r3, [pc, #40]	; (e9c0 <_wdt_init+0x84>)
    e996:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    e998:	687b      	ldr	r3, [r7, #4]
    e99a:	681b      	ldr	r3, [r3, #0]
    e99c:	210b      	movs	r1, #11
    e99e:	4618      	mov	r0, r3
    e9a0:	4b08      	ldr	r3, [pc, #32]	; (e9c4 <_wdt_init+0x88>)
    e9a2:	4798      	blx	r3
	}

	return ERR_NONE;
    e9a4:	2300      	movs	r3, #0
}
    e9a6:	4618      	mov	r0, r3
    e9a8:	3708      	adds	r7, #8
    e9aa:	46bd      	mov	sp, r7
    e9ac:	bd80      	pop	{r7, pc}
    e9ae:	bf00      	nop
    e9b0:	0001d2f8 	.word	0x0001d2f8
    e9b4:	00006991 	.word	0x00006991
    e9b8:	0000e8cd 	.word	0x0000e8cd
    e9bc:	0000e865 	.word	0x0000e865
    e9c0:	0000e8a1 	.word	0x0000e8a1
    e9c4:	0000e901 	.word	0x0000e901

0000e9c8 <hri_port_set_DIR_reg>:
{
    e9c8:	b480      	push	{r7}
    e9ca:	b085      	sub	sp, #20
    e9cc:	af00      	add	r7, sp, #0
    e9ce:	60f8      	str	r0, [r7, #12]
    e9d0:	460b      	mov	r3, r1
    e9d2:	607a      	str	r2, [r7, #4]
    e9d4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    e9d6:	7afb      	ldrb	r3, [r7, #11]
    e9d8:	68fa      	ldr	r2, [r7, #12]
    e9da:	01db      	lsls	r3, r3, #7
    e9dc:	4413      	add	r3, r2
    e9de:	3308      	adds	r3, #8
    e9e0:	687a      	ldr	r2, [r7, #4]
    e9e2:	601a      	str	r2, [r3, #0]
}
    e9e4:	bf00      	nop
    e9e6:	3714      	adds	r7, #20
    e9e8:	46bd      	mov	sp, r7
    e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    e9ee:	4770      	bx	lr

0000e9f0 <hri_port_clear_DIR_reg>:
{
    e9f0:	b480      	push	{r7}
    e9f2:	b085      	sub	sp, #20
    e9f4:	af00      	add	r7, sp, #0
    e9f6:	60f8      	str	r0, [r7, #12]
    e9f8:	460b      	mov	r3, r1
    e9fa:	607a      	str	r2, [r7, #4]
    e9fc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    e9fe:	7afb      	ldrb	r3, [r7, #11]
    ea00:	68fa      	ldr	r2, [r7, #12]
    ea02:	01db      	lsls	r3, r3, #7
    ea04:	4413      	add	r3, r2
    ea06:	3304      	adds	r3, #4
    ea08:	687a      	ldr	r2, [r7, #4]
    ea0a:	601a      	str	r2, [r3, #0]
}
    ea0c:	bf00      	nop
    ea0e:	3714      	adds	r7, #20
    ea10:	46bd      	mov	sp, r7
    ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
    ea16:	4770      	bx	lr

0000ea18 <hri_port_set_OUT_reg>:
{
    ea18:	b480      	push	{r7}
    ea1a:	b085      	sub	sp, #20
    ea1c:	af00      	add	r7, sp, #0
    ea1e:	60f8      	str	r0, [r7, #12]
    ea20:	460b      	mov	r3, r1
    ea22:	607a      	str	r2, [r7, #4]
    ea24:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    ea26:	7afb      	ldrb	r3, [r7, #11]
    ea28:	68fa      	ldr	r2, [r7, #12]
    ea2a:	01db      	lsls	r3, r3, #7
    ea2c:	4413      	add	r3, r2
    ea2e:	3318      	adds	r3, #24
    ea30:	687a      	ldr	r2, [r7, #4]
    ea32:	601a      	str	r2, [r3, #0]
}
    ea34:	bf00      	nop
    ea36:	3714      	adds	r7, #20
    ea38:	46bd      	mov	sp, r7
    ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ea3e:	4770      	bx	lr

0000ea40 <hri_port_clear_OUT_reg>:
{
    ea40:	b480      	push	{r7}
    ea42:	b085      	sub	sp, #20
    ea44:	af00      	add	r7, sp, #0
    ea46:	60f8      	str	r0, [r7, #12]
    ea48:	460b      	mov	r3, r1
    ea4a:	607a      	str	r2, [r7, #4]
    ea4c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ea4e:	7afb      	ldrb	r3, [r7, #11]
    ea50:	68fa      	ldr	r2, [r7, #12]
    ea52:	01db      	lsls	r3, r3, #7
    ea54:	4413      	add	r3, r2
    ea56:	3314      	adds	r3, #20
    ea58:	687a      	ldr	r2, [r7, #4]
    ea5a:	601a      	str	r2, [r3, #0]
}
    ea5c:	bf00      	nop
    ea5e:	3714      	adds	r7, #20
    ea60:	46bd      	mov	sp, r7
    ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
    ea66:	4770      	bx	lr

0000ea68 <hri_port_write_PMUX_PMUXE_bf>:
{
    ea68:	b480      	push	{r7}
    ea6a:	b085      	sub	sp, #20
    ea6c:	af00      	add	r7, sp, #0
    ea6e:	6078      	str	r0, [r7, #4]
    ea70:	4608      	mov	r0, r1
    ea72:	4611      	mov	r1, r2
    ea74:	461a      	mov	r2, r3
    ea76:	4603      	mov	r3, r0
    ea78:	70fb      	strb	r3, [r7, #3]
    ea7a:	460b      	mov	r3, r1
    ea7c:	70bb      	strb	r3, [r7, #2]
    ea7e:	4613      	mov	r3, r2
    ea80:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ea82:	78fa      	ldrb	r2, [r7, #3]
    ea84:	78bb      	ldrb	r3, [r7, #2]
    ea86:	6879      	ldr	r1, [r7, #4]
    ea88:	01d2      	lsls	r2, r2, #7
    ea8a:	440a      	add	r2, r1
    ea8c:	4413      	add	r3, r2
    ea8e:	3330      	adds	r3, #48	; 0x30
    ea90:	781b      	ldrb	r3, [r3, #0]
    ea92:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ea94:	7bfb      	ldrb	r3, [r7, #15]
    ea96:	f023 030f 	bic.w	r3, r3, #15
    ea9a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ea9c:	787b      	ldrb	r3, [r7, #1]
    ea9e:	f003 030f 	and.w	r3, r3, #15
    eaa2:	b2da      	uxtb	r2, r3
    eaa4:	7bfb      	ldrb	r3, [r7, #15]
    eaa6:	4313      	orrs	r3, r2
    eaa8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    eaaa:	78fa      	ldrb	r2, [r7, #3]
    eaac:	78bb      	ldrb	r3, [r7, #2]
    eaae:	6879      	ldr	r1, [r7, #4]
    eab0:	01d2      	lsls	r2, r2, #7
    eab2:	440a      	add	r2, r1
    eab4:	4413      	add	r3, r2
    eab6:	3330      	adds	r3, #48	; 0x30
    eab8:	7bfa      	ldrb	r2, [r7, #15]
    eaba:	701a      	strb	r2, [r3, #0]
}
    eabc:	bf00      	nop
    eabe:	3714      	adds	r7, #20
    eac0:	46bd      	mov	sp, r7
    eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    eac6:	4770      	bx	lr

0000eac8 <hri_port_write_PMUX_PMUXO_bf>:
{
    eac8:	b480      	push	{r7}
    eaca:	b085      	sub	sp, #20
    eacc:	af00      	add	r7, sp, #0
    eace:	6078      	str	r0, [r7, #4]
    ead0:	4608      	mov	r0, r1
    ead2:	4611      	mov	r1, r2
    ead4:	461a      	mov	r2, r3
    ead6:	4603      	mov	r3, r0
    ead8:	70fb      	strb	r3, [r7, #3]
    eada:	460b      	mov	r3, r1
    eadc:	70bb      	strb	r3, [r7, #2]
    eade:	4613      	mov	r3, r2
    eae0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    eae2:	78fa      	ldrb	r2, [r7, #3]
    eae4:	78bb      	ldrb	r3, [r7, #2]
    eae6:	6879      	ldr	r1, [r7, #4]
    eae8:	01d2      	lsls	r2, r2, #7
    eaea:	440a      	add	r2, r1
    eaec:	4413      	add	r3, r2
    eaee:	3330      	adds	r3, #48	; 0x30
    eaf0:	781b      	ldrb	r3, [r3, #0]
    eaf2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    eaf4:	7bfb      	ldrb	r3, [r7, #15]
    eaf6:	f003 030f 	and.w	r3, r3, #15
    eafa:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    eafc:	787b      	ldrb	r3, [r7, #1]
    eafe:	011b      	lsls	r3, r3, #4
    eb00:	b2da      	uxtb	r2, r3
    eb02:	7bfb      	ldrb	r3, [r7, #15]
    eb04:	4313      	orrs	r3, r2
    eb06:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    eb08:	78fa      	ldrb	r2, [r7, #3]
    eb0a:	78bb      	ldrb	r3, [r7, #2]
    eb0c:	6879      	ldr	r1, [r7, #4]
    eb0e:	01d2      	lsls	r2, r2, #7
    eb10:	440a      	add	r2, r1
    eb12:	4413      	add	r3, r2
    eb14:	3330      	adds	r3, #48	; 0x30
    eb16:	7bfa      	ldrb	r2, [r7, #15]
    eb18:	701a      	strb	r2, [r3, #0]
}
    eb1a:	bf00      	nop
    eb1c:	3714      	adds	r7, #20
    eb1e:	46bd      	mov	sp, r7
    eb20:	f85d 7b04 	ldr.w	r7, [sp], #4
    eb24:	4770      	bx	lr

0000eb26 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    eb26:	b480      	push	{r7}
    eb28:	b085      	sub	sp, #20
    eb2a:	af00      	add	r7, sp, #0
    eb2c:	6078      	str	r0, [r7, #4]
    eb2e:	4608      	mov	r0, r1
    eb30:	4611      	mov	r1, r2
    eb32:	461a      	mov	r2, r3
    eb34:	4603      	mov	r3, r0
    eb36:	70fb      	strb	r3, [r7, #3]
    eb38:	460b      	mov	r3, r1
    eb3a:	70bb      	strb	r3, [r7, #2]
    eb3c:	4613      	mov	r3, r2
    eb3e:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    eb40:	78fa      	ldrb	r2, [r7, #3]
    eb42:	78bb      	ldrb	r3, [r7, #2]
    eb44:	6879      	ldr	r1, [r7, #4]
    eb46:	01d2      	lsls	r2, r2, #7
    eb48:	440a      	add	r2, r1
    eb4a:	4413      	add	r3, r2
    eb4c:	3340      	adds	r3, #64	; 0x40
    eb4e:	781b      	ldrb	r3, [r3, #0]
    eb50:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    eb52:	7bfb      	ldrb	r3, [r7, #15]
    eb54:	f023 0301 	bic.w	r3, r3, #1
    eb58:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    eb5a:	787a      	ldrb	r2, [r7, #1]
    eb5c:	7bfb      	ldrb	r3, [r7, #15]
    eb5e:	4313      	orrs	r3, r2
    eb60:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    eb62:	78fa      	ldrb	r2, [r7, #3]
    eb64:	78bb      	ldrb	r3, [r7, #2]
    eb66:	6879      	ldr	r1, [r7, #4]
    eb68:	01d2      	lsls	r2, r2, #7
    eb6a:	440a      	add	r2, r1
    eb6c:	4413      	add	r3, r2
    eb6e:	3340      	adds	r3, #64	; 0x40
    eb70:	7bfa      	ldrb	r2, [r7, #15]
    eb72:	701a      	strb	r2, [r3, #0]
}
    eb74:	bf00      	nop
    eb76:	3714      	adds	r7, #20
    eb78:	46bd      	mov	sp, r7
    eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    eb7e:	4770      	bx	lr

0000eb80 <hri_port_write_WRCONFIG_reg>:
{
    eb80:	b480      	push	{r7}
    eb82:	b085      	sub	sp, #20
    eb84:	af00      	add	r7, sp, #0
    eb86:	60f8      	str	r0, [r7, #12]
    eb88:	460b      	mov	r3, r1
    eb8a:	607a      	str	r2, [r7, #4]
    eb8c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    eb8e:	7afb      	ldrb	r3, [r7, #11]
    eb90:	68fa      	ldr	r2, [r7, #12]
    eb92:	01db      	lsls	r3, r3, #7
    eb94:	4413      	add	r3, r2
    eb96:	3328      	adds	r3, #40	; 0x28
    eb98:	687a      	ldr	r2, [r7, #4]
    eb9a:	601a      	str	r2, [r3, #0]
}
    eb9c:	bf00      	nop
    eb9e:	3714      	adds	r7, #20
    eba0:	46bd      	mov	sp, r7
    eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    eba6:	4770      	bx	lr

0000eba8 <_gpio_set_direction>:
{
    eba8:	b580      	push	{r7, lr}
    ebaa:	b082      	sub	sp, #8
    ebac:	af00      	add	r7, sp, #0
    ebae:	4603      	mov	r3, r0
    ebb0:	6039      	str	r1, [r7, #0]
    ebb2:	71fb      	strb	r3, [r7, #7]
    ebb4:	4613      	mov	r3, r2
    ebb6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    ebb8:	79bb      	ldrb	r3, [r7, #6]
    ebba:	2b01      	cmp	r3, #1
    ebbc:	d01c      	beq.n	ebf8 <_gpio_set_direction+0x50>
    ebbe:	2b02      	cmp	r3, #2
    ebc0:	d037      	beq.n	ec32 <_gpio_set_direction+0x8a>
    ebc2:	2b00      	cmp	r3, #0
    ebc4:	d14e      	bne.n	ec64 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ebc6:	79fb      	ldrb	r3, [r7, #7]
    ebc8:	683a      	ldr	r2, [r7, #0]
    ebca:	4619      	mov	r1, r3
    ebcc:	482a      	ldr	r0, [pc, #168]	; (ec78 <_gpio_set_direction+0xd0>)
    ebce:	4b2b      	ldr	r3, [pc, #172]	; (ec7c <_gpio_set_direction+0xd4>)
    ebd0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ebd2:	683b      	ldr	r3, [r7, #0]
    ebd4:	b29b      	uxth	r3, r3
    ebd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ebda:	79fb      	ldrb	r3, [r7, #7]
    ebdc:	4619      	mov	r1, r3
    ebde:	4826      	ldr	r0, [pc, #152]	; (ec78 <_gpio_set_direction+0xd0>)
    ebe0:	4b27      	ldr	r3, [pc, #156]	; (ec80 <_gpio_set_direction+0xd8>)
    ebe2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ebe4:	683b      	ldr	r3, [r7, #0]
    ebe6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ebe8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ebec:	79fb      	ldrb	r3, [r7, #7]
    ebee:	4619      	mov	r1, r3
    ebf0:	4821      	ldr	r0, [pc, #132]	; (ec78 <_gpio_set_direction+0xd0>)
    ebf2:	4b23      	ldr	r3, [pc, #140]	; (ec80 <_gpio_set_direction+0xd8>)
    ebf4:	4798      	blx	r3
		break;
    ebf6:	e03a      	b.n	ec6e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ebf8:	79fb      	ldrb	r3, [r7, #7]
    ebfa:	683a      	ldr	r2, [r7, #0]
    ebfc:	4619      	mov	r1, r3
    ebfe:	481e      	ldr	r0, [pc, #120]	; (ec78 <_gpio_set_direction+0xd0>)
    ec00:	4b1e      	ldr	r3, [pc, #120]	; (ec7c <_gpio_set_direction+0xd4>)
    ec02:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    ec04:	683b      	ldr	r3, [r7, #0]
    ec06:	b29b      	uxth	r3, r3
    ec08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ec0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ec10:	79f9      	ldrb	r1, [r7, #7]
    ec12:	461a      	mov	r2, r3
    ec14:	4818      	ldr	r0, [pc, #96]	; (ec78 <_gpio_set_direction+0xd0>)
    ec16:	4b1a      	ldr	r3, [pc, #104]	; (ec80 <_gpio_set_direction+0xd8>)
    ec18:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    ec1a:	683b      	ldr	r3, [r7, #0]
    ec1c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    ec1e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    ec22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ec26:	79f9      	ldrb	r1, [r7, #7]
    ec28:	461a      	mov	r2, r3
    ec2a:	4813      	ldr	r0, [pc, #76]	; (ec78 <_gpio_set_direction+0xd0>)
    ec2c:	4b14      	ldr	r3, [pc, #80]	; (ec80 <_gpio_set_direction+0xd8>)
    ec2e:	4798      	blx	r3
		break;
    ec30:	e01d      	b.n	ec6e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ec32:	79fb      	ldrb	r3, [r7, #7]
    ec34:	683a      	ldr	r2, [r7, #0]
    ec36:	4619      	mov	r1, r3
    ec38:	480f      	ldr	r0, [pc, #60]	; (ec78 <_gpio_set_direction+0xd0>)
    ec3a:	4b12      	ldr	r3, [pc, #72]	; (ec84 <_gpio_set_direction+0xdc>)
    ec3c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ec3e:	683b      	ldr	r3, [r7, #0]
    ec40:	b29b      	uxth	r3, r3
    ec42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ec46:	79fb      	ldrb	r3, [r7, #7]
    ec48:	4619      	mov	r1, r3
    ec4a:	480b      	ldr	r0, [pc, #44]	; (ec78 <_gpio_set_direction+0xd0>)
    ec4c:	4b0c      	ldr	r3, [pc, #48]	; (ec80 <_gpio_set_direction+0xd8>)
    ec4e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ec50:	683b      	ldr	r3, [r7, #0]
    ec52:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ec54:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ec58:	79fb      	ldrb	r3, [r7, #7]
    ec5a:	4619      	mov	r1, r3
    ec5c:	4806      	ldr	r0, [pc, #24]	; (ec78 <_gpio_set_direction+0xd0>)
    ec5e:	4b08      	ldr	r3, [pc, #32]	; (ec80 <_gpio_set_direction+0xd8>)
    ec60:	4798      	blx	r3
		break;
    ec62:	e004      	b.n	ec6e <_gpio_set_direction+0xc6>
		ASSERT(false);
    ec64:	2246      	movs	r2, #70	; 0x46
    ec66:	4908      	ldr	r1, [pc, #32]	; (ec88 <_gpio_set_direction+0xe0>)
    ec68:	2000      	movs	r0, #0
    ec6a:	4b08      	ldr	r3, [pc, #32]	; (ec8c <_gpio_set_direction+0xe4>)
    ec6c:	4798      	blx	r3
}
    ec6e:	bf00      	nop
    ec70:	3708      	adds	r7, #8
    ec72:	46bd      	mov	sp, r7
    ec74:	bd80      	pop	{r7, pc}
    ec76:	bf00      	nop
    ec78:	41008000 	.word	0x41008000
    ec7c:	0000e9f1 	.word	0x0000e9f1
    ec80:	0000eb81 	.word	0x0000eb81
    ec84:	0000e9c9 	.word	0x0000e9c9
    ec88:	0001d310 	.word	0x0001d310
    ec8c:	00006991 	.word	0x00006991

0000ec90 <_gpio_set_level>:
{
    ec90:	b580      	push	{r7, lr}
    ec92:	b082      	sub	sp, #8
    ec94:	af00      	add	r7, sp, #0
    ec96:	4603      	mov	r3, r0
    ec98:	6039      	str	r1, [r7, #0]
    ec9a:	71fb      	strb	r3, [r7, #7]
    ec9c:	4613      	mov	r3, r2
    ec9e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    eca0:	79bb      	ldrb	r3, [r7, #6]
    eca2:	2b00      	cmp	r3, #0
    eca4:	d006      	beq.n	ecb4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    eca6:	79fb      	ldrb	r3, [r7, #7]
    eca8:	683a      	ldr	r2, [r7, #0]
    ecaa:	4619      	mov	r1, r3
    ecac:	4806      	ldr	r0, [pc, #24]	; (ecc8 <_gpio_set_level+0x38>)
    ecae:	4b07      	ldr	r3, [pc, #28]	; (eccc <_gpio_set_level+0x3c>)
    ecb0:	4798      	blx	r3
}
    ecb2:	e005      	b.n	ecc0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ecb4:	79fb      	ldrb	r3, [r7, #7]
    ecb6:	683a      	ldr	r2, [r7, #0]
    ecb8:	4619      	mov	r1, r3
    ecba:	4803      	ldr	r0, [pc, #12]	; (ecc8 <_gpio_set_level+0x38>)
    ecbc:	4b04      	ldr	r3, [pc, #16]	; (ecd0 <_gpio_set_level+0x40>)
    ecbe:	4798      	blx	r3
}
    ecc0:	bf00      	nop
    ecc2:	3708      	adds	r7, #8
    ecc4:	46bd      	mov	sp, r7
    ecc6:	bd80      	pop	{r7, pc}
    ecc8:	41008000 	.word	0x41008000
    eccc:	0000ea19 	.word	0x0000ea19
    ecd0:	0000ea41 	.word	0x0000ea41

0000ecd4 <_gpio_set_pin_function>:
{
    ecd4:	b590      	push	{r4, r7, lr}
    ecd6:	b085      	sub	sp, #20
    ecd8:	af00      	add	r7, sp, #0
    ecda:	6078      	str	r0, [r7, #4]
    ecdc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    ecde:	687b      	ldr	r3, [r7, #4]
    ece0:	095b      	lsrs	r3, r3, #5
    ece2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    ece4:	687b      	ldr	r3, [r7, #4]
    ece6:	b2db      	uxtb	r3, r3
    ece8:	f003 031f 	and.w	r3, r3, #31
    ecec:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    ecee:	683b      	ldr	r3, [r7, #0]
    ecf0:	f1b3 3fff 	cmp.w	r3, #4294967295
    ecf4:	d106      	bne.n	ed04 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    ecf6:	7bba      	ldrb	r2, [r7, #14]
    ecf8:	7bf9      	ldrb	r1, [r7, #15]
    ecfa:	2300      	movs	r3, #0
    ecfc:	4812      	ldr	r0, [pc, #72]	; (ed48 <_gpio_set_pin_function+0x74>)
    ecfe:	4c13      	ldr	r4, [pc, #76]	; (ed4c <_gpio_set_pin_function+0x78>)
    ed00:	47a0      	blx	r4
}
    ed02:	e01d      	b.n	ed40 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    ed04:	7bba      	ldrb	r2, [r7, #14]
    ed06:	7bf9      	ldrb	r1, [r7, #15]
    ed08:	2301      	movs	r3, #1
    ed0a:	480f      	ldr	r0, [pc, #60]	; (ed48 <_gpio_set_pin_function+0x74>)
    ed0c:	4c0f      	ldr	r4, [pc, #60]	; (ed4c <_gpio_set_pin_function+0x78>)
    ed0e:	47a0      	blx	r4
		if (pin & 1) {
    ed10:	7bbb      	ldrb	r3, [r7, #14]
    ed12:	f003 0301 	and.w	r3, r3, #1
    ed16:	2b00      	cmp	r3, #0
    ed18:	d009      	beq.n	ed2e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    ed1a:	7bbb      	ldrb	r3, [r7, #14]
    ed1c:	085b      	lsrs	r3, r3, #1
    ed1e:	b2da      	uxtb	r2, r3
    ed20:	683b      	ldr	r3, [r7, #0]
    ed22:	b2db      	uxtb	r3, r3
    ed24:	7bf9      	ldrb	r1, [r7, #15]
    ed26:	4808      	ldr	r0, [pc, #32]	; (ed48 <_gpio_set_pin_function+0x74>)
    ed28:	4c09      	ldr	r4, [pc, #36]	; (ed50 <_gpio_set_pin_function+0x7c>)
    ed2a:	47a0      	blx	r4
}
    ed2c:	e008      	b.n	ed40 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    ed2e:	7bbb      	ldrb	r3, [r7, #14]
    ed30:	085b      	lsrs	r3, r3, #1
    ed32:	b2da      	uxtb	r2, r3
    ed34:	683b      	ldr	r3, [r7, #0]
    ed36:	b2db      	uxtb	r3, r3
    ed38:	7bf9      	ldrb	r1, [r7, #15]
    ed3a:	4803      	ldr	r0, [pc, #12]	; (ed48 <_gpio_set_pin_function+0x74>)
    ed3c:	4c05      	ldr	r4, [pc, #20]	; (ed54 <_gpio_set_pin_function+0x80>)
    ed3e:	47a0      	blx	r4
}
    ed40:	bf00      	nop
    ed42:	3714      	adds	r7, #20
    ed44:	46bd      	mov	sp, r7
    ed46:	bd90      	pop	{r4, r7, pc}
    ed48:	41008000 	.word	0x41008000
    ed4c:	0000eb27 	.word	0x0000eb27
    ed50:	0000eac9 	.word	0x0000eac9
    ed54:	0000ea69 	.word	0x0000ea69

0000ed58 <gpio_set_pin_function>:
{
    ed58:	b580      	push	{r7, lr}
    ed5a:	b082      	sub	sp, #8
    ed5c:	af00      	add	r7, sp, #0
    ed5e:	6078      	str	r0, [r7, #4]
    ed60:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    ed62:	6839      	ldr	r1, [r7, #0]
    ed64:	6878      	ldr	r0, [r7, #4]
    ed66:	4b03      	ldr	r3, [pc, #12]	; (ed74 <gpio_set_pin_function+0x1c>)
    ed68:	4798      	blx	r3
}
    ed6a:	bf00      	nop
    ed6c:	3708      	adds	r7, #8
    ed6e:	46bd      	mov	sp, r7
    ed70:	bd80      	pop	{r7, pc}
    ed72:	bf00      	nop
    ed74:	0000ecd5 	.word	0x0000ecd5

0000ed78 <gpio_set_pin_direction>:
{
    ed78:	b580      	push	{r7, lr}
    ed7a:	b082      	sub	sp, #8
    ed7c:	af00      	add	r7, sp, #0
    ed7e:	4603      	mov	r3, r0
    ed80:	460a      	mov	r2, r1
    ed82:	71fb      	strb	r3, [r7, #7]
    ed84:	4613      	mov	r3, r2
    ed86:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    ed88:	79fb      	ldrb	r3, [r7, #7]
    ed8a:	095b      	lsrs	r3, r3, #5
    ed8c:	b2d8      	uxtb	r0, r3
    ed8e:	79fb      	ldrb	r3, [r7, #7]
    ed90:	f003 031f 	and.w	r3, r3, #31
    ed94:	2201      	movs	r2, #1
    ed96:	fa02 f303 	lsl.w	r3, r2, r3
    ed9a:	79ba      	ldrb	r2, [r7, #6]
    ed9c:	4619      	mov	r1, r3
    ed9e:	4b03      	ldr	r3, [pc, #12]	; (edac <gpio_set_pin_direction+0x34>)
    eda0:	4798      	blx	r3
}
    eda2:	bf00      	nop
    eda4:	3708      	adds	r7, #8
    eda6:	46bd      	mov	sp, r7
    eda8:	bd80      	pop	{r7, pc}
    edaa:	bf00      	nop
    edac:	0000eba9 	.word	0x0000eba9

0000edb0 <gpio_set_pin_level>:
{
    edb0:	b580      	push	{r7, lr}
    edb2:	b082      	sub	sp, #8
    edb4:	af00      	add	r7, sp, #0
    edb6:	4603      	mov	r3, r0
    edb8:	460a      	mov	r2, r1
    edba:	71fb      	strb	r3, [r7, #7]
    edbc:	4613      	mov	r3, r2
    edbe:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    edc0:	79fb      	ldrb	r3, [r7, #7]
    edc2:	095b      	lsrs	r3, r3, #5
    edc4:	b2d8      	uxtb	r0, r3
    edc6:	79fb      	ldrb	r3, [r7, #7]
    edc8:	f003 031f 	and.w	r3, r3, #31
    edcc:	2201      	movs	r2, #1
    edce:	fa02 f303 	lsl.w	r3, r2, r3
    edd2:	79ba      	ldrb	r2, [r7, #6]
    edd4:	4619      	mov	r1, r3
    edd6:	4b03      	ldr	r3, [pc, #12]	; (ede4 <gpio_set_pin_level+0x34>)
    edd8:	4798      	blx	r3
}
    edda:	bf00      	nop
    eddc:	3708      	adds	r7, #8
    edde:	46bd      	mov	sp, r7
    ede0:	bd80      	pop	{r7, pc}
    ede2:	bf00      	nop
    ede4:	0000ec91 	.word	0x0000ec91

0000ede8 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    ede8:	b580      	push	{r7, lr}
    edea:	b082      	sub	sp, #8
    edec:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    edee:	2100      	movs	r1, #0
    edf0:	2008      	movs	r0, #8
    edf2:	4b24      	ldr	r3, [pc, #144]	; (ee84 <QSPI_N25Q256_exit_xip+0x9c>)
    edf4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    edf6:	2100      	movs	r1, #0
    edf8:	202b      	movs	r0, #43	; 0x2b
    edfa:	4b22      	ldr	r3, [pc, #136]	; (ee84 <QSPI_N25Q256_exit_xip+0x9c>)
    edfc:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    edfe:	2100      	movs	r1, #0
    ee00:	202a      	movs	r0, #42	; 0x2a
    ee02:	4b20      	ldr	r3, [pc, #128]	; (ee84 <QSPI_N25Q256_exit_xip+0x9c>)
    ee04:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    ee06:	2102      	movs	r1, #2
    ee08:	2008      	movs	r0, #8
    ee0a:	4b1f      	ldr	r3, [pc, #124]	; (ee88 <QSPI_N25Q256_exit_xip+0xa0>)
    ee0c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    ee0e:	2102      	movs	r1, #2
    ee10:	202b      	movs	r0, #43	; 0x2b
    ee12:	4b1d      	ldr	r3, [pc, #116]	; (ee88 <QSPI_N25Q256_exit_xip+0xa0>)
    ee14:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    ee16:	2102      	movs	r1, #2
    ee18:	202a      	movs	r0, #42	; 0x2a
    ee1a:	4b1b      	ldr	r3, [pc, #108]	; (ee88 <QSPI_N25Q256_exit_xip+0xa0>)
    ee1c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    ee1e:	2101      	movs	r1, #1
    ee20:	2008      	movs	r0, #8
    ee22:	4b1a      	ldr	r3, [pc, #104]	; (ee8c <QSPI_N25Q256_exit_xip+0xa4>)
    ee24:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    ee26:	2100      	movs	r1, #0
    ee28:	202b      	movs	r0, #43	; 0x2b
    ee2a:	4b18      	ldr	r3, [pc, #96]	; (ee8c <QSPI_N25Q256_exit_xip+0xa4>)
    ee2c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    ee2e:	2100      	movs	r1, #0
    ee30:	202a      	movs	r0, #42	; 0x2a
    ee32:	4b16      	ldr	r3, [pc, #88]	; (ee8c <QSPI_N25Q256_exit_xip+0xa4>)
    ee34:	4798      	blx	r3

	delay_us(1);
    ee36:	2001      	movs	r0, #1
    ee38:	4b15      	ldr	r3, [pc, #84]	; (ee90 <QSPI_N25Q256_exit_xip+0xa8>)
    ee3a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    ee3c:	2300      	movs	r3, #0
    ee3e:	607b      	str	r3, [r7, #4]
    ee40:	e010      	b.n	ee64 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    ee42:	2101      	movs	r1, #1
    ee44:	202a      	movs	r0, #42	; 0x2a
    ee46:	4b11      	ldr	r3, [pc, #68]	; (ee8c <QSPI_N25Q256_exit_xip+0xa4>)
    ee48:	4798      	blx	r3
		delay_us(1);
    ee4a:	2001      	movs	r0, #1
    ee4c:	4b10      	ldr	r3, [pc, #64]	; (ee90 <QSPI_N25Q256_exit_xip+0xa8>)
    ee4e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    ee50:	2100      	movs	r1, #0
    ee52:	202a      	movs	r0, #42	; 0x2a
    ee54:	4b0d      	ldr	r3, [pc, #52]	; (ee8c <QSPI_N25Q256_exit_xip+0xa4>)
    ee56:	4798      	blx	r3
		delay_us(1);
    ee58:	2001      	movs	r0, #1
    ee5a:	4b0d      	ldr	r3, [pc, #52]	; (ee90 <QSPI_N25Q256_exit_xip+0xa8>)
    ee5c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    ee5e:	687b      	ldr	r3, [r7, #4]
    ee60:	3301      	adds	r3, #1
    ee62:	607b      	str	r3, [r7, #4]
    ee64:	687b      	ldr	r3, [r7, #4]
    ee66:	2b06      	cmp	r3, #6
    ee68:	ddeb      	ble.n	ee42 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    ee6a:	2101      	movs	r1, #1
    ee6c:	202b      	movs	r0, #43	; 0x2b
    ee6e:	4b07      	ldr	r3, [pc, #28]	; (ee8c <QSPI_N25Q256_exit_xip+0xa4>)
    ee70:	4798      	blx	r3
	delay_us(1);
    ee72:	2001      	movs	r0, #1
    ee74:	4b06      	ldr	r3, [pc, #24]	; (ee90 <QSPI_N25Q256_exit_xip+0xa8>)
    ee76:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    ee78:	4b06      	ldr	r3, [pc, #24]	; (ee94 <QSPI_N25Q256_exit_xip+0xac>)
    ee7a:	4798      	blx	r3
}
    ee7c:	bf00      	nop
    ee7e:	3708      	adds	r7, #8
    ee80:	46bd      	mov	sp, r7
    ee82:	bd80      	pop	{r7, pc}
    ee84:	0000ed59 	.word	0x0000ed59
    ee88:	0000ed79 	.word	0x0000ed79
    ee8c:	0000edb1 	.word	0x0000edb1
    ee90:	00004de9 	.word	0x00004de9
    ee94:	00003c11 	.word	0x00003c11

0000ee98 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    ee98:	b598      	push	{r3, r4, r7, lr}
    ee9a:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    ee9c:	4806      	ldr	r0, [pc, #24]	; (eeb8 <spi_nor_flash_init+0x20>)
    ee9e:	4b07      	ldr	r3, [pc, #28]	; (eebc <spi_nor_flash_init+0x24>)
    eea0:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    eea2:	2300      	movs	r3, #0
    eea4:	4a06      	ldr	r2, [pc, #24]	; (eec0 <spi_nor_flash_init+0x28>)
    eea6:	4904      	ldr	r1, [pc, #16]	; (eeb8 <spi_nor_flash_init+0x20>)
    eea8:	4806      	ldr	r0, [pc, #24]	; (eec4 <spi_nor_flash_init+0x2c>)
    eeaa:	4c07      	ldr	r4, [pc, #28]	; (eec8 <spi_nor_flash_init+0x30>)
    eeac:	47a0      	blx	r4
    eeae:	4602      	mov	r2, r0
    eeb0:	4b06      	ldr	r3, [pc, #24]	; (eecc <spi_nor_flash_init+0x34>)
    eeb2:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    eeb4:	bf00      	nop
    eeb6:	bd98      	pop	{r3, r4, r7, pc}
    eeb8:	20005668 	.word	0x20005668
    eebc:	000054b9 	.word	0x000054b9
    eec0:	0000ede9 	.word	0x0000ede9
    eec4:	20003974 	.word	0x20003974
    eec8:	0000f405 	.word	0x0000f405
    eecc:	20005894 	.word	0x20005894

0000eed0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    eed0:	b580      	push	{r7, lr}
    eed2:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    eed4:	4805      	ldr	r0, [pc, #20]	; (eeec <cdc_device_acm_init+0x1c>)
    eed6:	4b06      	ldr	r3, [pc, #24]	; (eef0 <cdc_device_acm_init+0x20>)
    eed8:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    eeda:	4b06      	ldr	r3, [pc, #24]	; (eef4 <cdc_device_acm_init+0x24>)
    eedc:	4798      	blx	r3

	usbdc_start(single_desc);
    eede:	4806      	ldr	r0, [pc, #24]	; (eef8 <cdc_device_acm_init+0x28>)
    eee0:	4b06      	ldr	r3, [pc, #24]	; (eefc <cdc_device_acm_init+0x2c>)
    eee2:	4798      	blx	r3
	usbdc_attach();
    eee4:	4b06      	ldr	r3, [pc, #24]	; (ef00 <cdc_device_acm_init+0x30>)
    eee6:	4798      	blx	r3
}
    eee8:	bf00      	nop
    eeea:	bd80      	pop	{r7, pc}
    eeec:	200039c4 	.word	0x200039c4
    eef0:	00010b2d 	.word	0x00010b2d
    eef4:	0000fda5 	.word	0x0000fda5
    eef8:	200001a8 	.word	0x200001a8
    eefc:	00010bc9 	.word	0x00010bc9
    ef00:	00010c19 	.word	0x00010c19

0000ef04 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    ef04:	b580      	push	{r7, lr}
    ef06:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    ef08:	4b01      	ldr	r3, [pc, #4]	; (ef10 <usb_init+0xc>)
    ef0a:	4798      	blx	r3
}
    ef0c:	bf00      	nop
    ef0e:	bd80      	pop	{r7, pc}
    ef10:	0000eed1 	.word	0x0000eed1

0000ef14 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    ef14:	b580      	push	{r7, lr}
    ef16:	b08a      	sub	sp, #40	; 0x28
    ef18:	af00      	add	r7, sp, #0
    ef1a:	60f8      	str	r0, [r7, #12]
    ef1c:	60b9      	str	r1, [r7, #8]
    ef1e:	4613      	mov	r3, r2
    ef20:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    ef22:	68fb      	ldr	r3, [r7, #12]
    ef24:	3b14      	subs	r3, #20
    ef26:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    ef28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ef2a:	8b9b      	ldrh	r3, [r3, #28]
    ef2c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    ef2e:	88fb      	ldrh	r3, [r7, #6]
    ef30:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    ef32:	f248 0301 	movw	r3, #32769	; 0x8001
    ef36:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    ef38:	68bb      	ldr	r3, [r7, #8]
    ef3a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    ef3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ef3e:	f107 0214 	add.w	r2, r7, #20
    ef42:	4611      	mov	r1, r2
    ef44:	4618      	mov	r0, r3
    ef46:	4b06      	ldr	r3, [pc, #24]	; (ef60 <i2c_m_sync_read+0x4c>)
    ef48:	4798      	blx	r3
    ef4a:	6238      	str	r0, [r7, #32]

	if (ret) {
    ef4c:	6a3b      	ldr	r3, [r7, #32]
    ef4e:	2b00      	cmp	r3, #0
    ef50:	d001      	beq.n	ef56 <i2c_m_sync_read+0x42>
		return ret;
    ef52:	6a3b      	ldr	r3, [r7, #32]
    ef54:	e000      	b.n	ef58 <i2c_m_sync_read+0x44>
	}

	return n;
    ef56:	88fb      	ldrh	r3, [r7, #6]
}
    ef58:	4618      	mov	r0, r3
    ef5a:	3728      	adds	r7, #40	; 0x28
    ef5c:	46bd      	mov	sp, r7
    ef5e:	bd80      	pop	{r7, pc}
    ef60:	0000a6c1 	.word	0x0000a6c1

0000ef64 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    ef64:	b580      	push	{r7, lr}
    ef66:	b08a      	sub	sp, #40	; 0x28
    ef68:	af00      	add	r7, sp, #0
    ef6a:	60f8      	str	r0, [r7, #12]
    ef6c:	60b9      	str	r1, [r7, #8]
    ef6e:	4613      	mov	r3, r2
    ef70:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    ef72:	68fb      	ldr	r3, [r7, #12]
    ef74:	3b14      	subs	r3, #20
    ef76:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    ef78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ef7a:	8b9b      	ldrh	r3, [r3, #28]
    ef7c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    ef7e:	88fb      	ldrh	r3, [r7, #6]
    ef80:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    ef82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    ef86:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    ef88:	68bb      	ldr	r3, [r7, #8]
    ef8a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    ef8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ef8e:	f107 0214 	add.w	r2, r7, #20
    ef92:	4611      	mov	r1, r2
    ef94:	4618      	mov	r0, r3
    ef96:	4b06      	ldr	r3, [pc, #24]	; (efb0 <i2c_m_sync_write+0x4c>)
    ef98:	4798      	blx	r3
    ef9a:	6238      	str	r0, [r7, #32]

	if (ret) {
    ef9c:	6a3b      	ldr	r3, [r7, #32]
    ef9e:	2b00      	cmp	r3, #0
    efa0:	d001      	beq.n	efa6 <i2c_m_sync_write+0x42>
		return ret;
    efa2:	6a3b      	ldr	r3, [r7, #32]
    efa4:	e000      	b.n	efa8 <i2c_m_sync_write+0x44>
	}

	return n;
    efa6:	88fb      	ldrh	r3, [r7, #6]
}
    efa8:	4618      	mov	r0, r3
    efaa:	3728      	adds	r7, #40	; 0x28
    efac:	46bd      	mov	sp, r7
    efae:	bd80      	pop	{r7, pc}
    efb0:	0000a6c1 	.word	0x0000a6c1

0000efb4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    efb4:	b580      	push	{r7, lr}
    efb6:	b084      	sub	sp, #16
    efb8:	af00      	add	r7, sp, #0
    efba:	6078      	str	r0, [r7, #4]
    efbc:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    efbe:	687b      	ldr	r3, [r7, #4]
    efc0:	2b00      	cmp	r3, #0
    efc2:	bf14      	ite	ne
    efc4:	2301      	movne	r3, #1
    efc6:	2300      	moveq	r3, #0
    efc8:	b2db      	uxtb	r3, r3
    efca:	225e      	movs	r2, #94	; 0x5e
    efcc:	490c      	ldr	r1, [pc, #48]	; (f000 <i2c_m_sync_init+0x4c>)
    efce:	4618      	mov	r0, r3
    efd0:	4b0c      	ldr	r3, [pc, #48]	; (f004 <i2c_m_sync_init+0x50>)
    efd2:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    efd4:	687b      	ldr	r3, [r7, #4]
    efd6:	6839      	ldr	r1, [r7, #0]
    efd8:	4618      	mov	r0, r3
    efda:	4b0b      	ldr	r3, [pc, #44]	; (f008 <i2c_m_sync_init+0x54>)
    efdc:	4798      	blx	r3
    efde:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    efe0:	68fb      	ldr	r3, [r7, #12]
    efe2:	2b00      	cmp	r3, #0
    efe4:	d001      	beq.n	efea <i2c_m_sync_init+0x36>
		return init_status;
    efe6:	68fb      	ldr	r3, [r7, #12]
    efe8:	e006      	b.n	eff8 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    efea:	687b      	ldr	r3, [r7, #4]
    efec:	4a07      	ldr	r2, [pc, #28]	; (f00c <i2c_m_sync_init+0x58>)
    efee:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    eff0:	687b      	ldr	r3, [r7, #4]
    eff2:	4a07      	ldr	r2, [pc, #28]	; (f010 <i2c_m_sync_init+0x5c>)
    eff4:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    eff6:	2300      	movs	r3, #0
}
    eff8:	4618      	mov	r0, r3
    effa:	3710      	adds	r7, #16
    effc:	46bd      	mov	sp, r7
    effe:	bd80      	pop	{r7, pc}
    f000:	0001d32c 	.word	0x0001d32c
    f004:	00006991 	.word	0x00006991
    f008:	0000a499 	.word	0x0000a499
    f00c:	0000ef15 	.word	0x0000ef15
    f010:	0000ef65 	.word	0x0000ef65

0000f014 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    f014:	b480      	push	{r7}
    f016:	b085      	sub	sp, #20
    f018:	af00      	add	r7, sp, #0
    f01a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    f01c:	f3ef 8310 	mrs	r3, PRIMASK
    f020:	60fb      	str	r3, [r7, #12]
  return(result);
    f022:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    f024:	687b      	ldr	r3, [r7, #4]
    f026:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    f028:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    f02a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    f02e:	bf00      	nop
    f030:	3714      	adds	r7, #20
    f032:	46bd      	mov	sp, r7
    f034:	f85d 7b04 	ldr.w	r7, [sp], #4
    f038:	4770      	bx	lr

0000f03a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    f03a:	b480      	push	{r7}
    f03c:	b085      	sub	sp, #20
    f03e:	af00      	add	r7, sp, #0
    f040:	6078      	str	r0, [r7, #4]
    f042:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    f046:	687b      	ldr	r3, [r7, #4]
    f048:	681b      	ldr	r3, [r3, #0]
    f04a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    f04c:	68fb      	ldr	r3, [r7, #12]
    f04e:	f383 8810 	msr	PRIMASK, r3
}
    f052:	bf00      	nop
    f054:	3714      	adds	r7, #20
    f056:	46bd      	mov	sp, r7
    f058:	f85d 7b04 	ldr.w	r7, [sp], #4
    f05c:	4770      	bx	lr
	...

0000f060 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    f060:	b580      	push	{r7, lr}
    f062:	b08c      	sub	sp, #48	; 0x30
    f064:	af00      	add	r7, sp, #0
    f066:	6078      	str	r0, [r7, #4]
    f068:	460b      	mov	r3, r1
    f06a:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f06c:	687b      	ldr	r3, [r7, #4]
    f06e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f070:	687b      	ldr	r3, [r7, #4]
    f072:	681b      	ldr	r3, [r3, #0]
    f074:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    f076:	f107 030c 	add.w	r3, r7, #12
    f07a:	2200      	movs	r2, #0
    f07c:	601a      	str	r2, [r3, #0]
    f07e:	605a      	str	r2, [r3, #4]
    f080:	609a      	str	r2, [r3, #8]
    f082:	60da      	str	r2, [r3, #12]
    f084:	611a      	str	r2, [r3, #16]
    f086:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    f088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f08a:	7b1b      	ldrb	r3, [r3, #12]
    f08c:	2b00      	cmp	r3, #0
    f08e:	d001      	beq.n	f094 <n25q256a_xip_confirm+0x34>
    f090:	2206      	movs	r2, #6
    f092:	e000      	b.n	f096 <n25q256a_xip_confirm+0x36>
    f094:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    f096:	7b3b      	ldrb	r3, [r7, #12]
    f098:	f362 0302 	bfi	r3, r2, #0, #3
    f09c:	733b      	strb	r3, [r7, #12]
    f09e:	7b3b      	ldrb	r3, [r7, #12]
    f0a0:	f043 0310 	orr.w	r3, r3, #16
    f0a4:	733b      	strb	r3, [r7, #12]
    f0a6:	7b3b      	ldrb	r3, [r7, #12]
    f0a8:	f043 0320 	orr.w	r3, r3, #32
    f0ac:	733b      	strb	r3, [r7, #12]
    f0ae:	7b3b      	ldrb	r3, [r7, #12]
    f0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f0b4:	733b      	strb	r3, [r7, #12]
    f0b6:	7b3b      	ldrb	r3, [r7, #12]
    f0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f0bc:	733b      	strb	r3, [r7, #12]
    f0be:	7b7b      	ldrb	r3, [r7, #13]
    f0c0:	f043 0303 	orr.w	r3, r3, #3
    f0c4:	737b      	strb	r3, [r7, #13]
    f0c6:	7b7b      	ldrb	r3, [r7, #13]
    f0c8:	2201      	movs	r2, #1
    f0ca:	f362 1305 	bfi	r3, r2, #4, #2
    f0ce:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    f0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f0d2:	7b1b      	ldrb	r3, [r3, #12]
    f0d4:	2b00      	cmp	r3, #0
    f0d6:	d001      	beq.n	f0dc <n25q256a_xip_confirm+0x7c>
    f0d8:	2208      	movs	r2, #8
    f0da:	e000      	b.n	f0de <n25q256a_xip_confirm+0x7e>
    f0dc:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    f0de:	7bbb      	ldrb	r3, [r7, #14]
    f0e0:	f362 0304 	bfi	r3, r2, #0, #5
    f0e4:	73bb      	strb	r3, [r7, #14]
    f0e6:	230b      	movs	r3, #11
    f0e8:	743b      	strb	r3, [r7, #16]
    f0ea:	78fb      	ldrb	r3, [r7, #3]
    f0ec:	2b00      	cmp	r3, #0
    f0ee:	d001      	beq.n	f0f4 <n25q256a_xip_confirm+0x94>
    f0f0:	2300      	movs	r3, #0
    f0f2:	e000      	b.n	f0f6 <n25q256a_xip_confirm+0x96>
    f0f4:	23ff      	movs	r3, #255	; 0xff
    f0f6:	747b      	strb	r3, [r7, #17]
    f0f8:	2301      	movs	r3, #1
    f0fa:	61bb      	str	r3, [r7, #24]
    f0fc:	f107 0327 	add.w	r3, r7, #39	; 0x27
    f100:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    f102:	f107 030c 	add.w	r3, r7, #12
    f106:	4619      	mov	r1, r3
    f108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f10a:	4b07      	ldr	r3, [pc, #28]	; (f128 <n25q256a_xip_confirm+0xc8>)
    f10c:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    f10e:	78fb      	ldrb	r3, [r7, #3]
    f110:	2b00      	cmp	r3, #0
    f112:	d001      	beq.n	f118 <n25q256a_xip_confirm+0xb8>
    f114:	2202      	movs	r2, #2
    f116:	e000      	b.n	f11a <n25q256a_xip_confirm+0xba>
    f118:	2201      	movs	r2, #1
    f11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f11c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    f11e:	2300      	movs	r3, #0
}
    f120:	4618      	mov	r0, r3
    f122:	3730      	adds	r7, #48	; 0x30
    f124:	46bd      	mov	sp, r7
    f126:	bd80      	pop	{r7, pc}
    f128:	00005531 	.word	0x00005531

0000f12c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    f12c:	b580      	push	{r7, lr}
    f12e:	b08c      	sub	sp, #48	; 0x30
    f130:	af00      	add	r7, sp, #0
    f132:	6078      	str	r0, [r7, #4]
    f134:	460b      	mov	r3, r1
    f136:	70fb      	strb	r3, [r7, #3]
    f138:	4613      	mov	r3, r2
    f13a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    f13c:	2300      	movs	r3, #0
    f13e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    f140:	687b      	ldr	r3, [r7, #4]
    f142:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    f144:	687b      	ldr	r3, [r7, #4]
    f146:	681b      	ldr	r3, [r3, #0]
    f148:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    f14a:	f107 030c 	add.w	r3, r7, #12
    f14e:	2200      	movs	r2, #0
    f150:	601a      	str	r2, [r3, #0]
    f152:	605a      	str	r2, [r3, #4]
    f154:	609a      	str	r2, [r3, #8]
    f156:	60da      	str	r2, [r3, #12]
    f158:	611a      	str	r2, [r3, #16]
    f15a:	615a      	str	r2, [r3, #20]
    f15c:	78fb      	ldrb	r3, [r7, #3]
    f15e:	f003 0307 	and.w	r3, r3, #7
    f162:	b2da      	uxtb	r2, r3
    f164:	7b3b      	ldrb	r3, [r7, #12]
    f166:	f362 0302 	bfi	r3, r2, #0, #3
    f16a:	733b      	strb	r3, [r7, #12]
    f16c:	7b3b      	ldrb	r3, [r7, #12]
    f16e:	f043 0310 	orr.w	r3, r3, #16
    f172:	733b      	strb	r3, [r7, #12]
    f174:	7b3b      	ldrb	r3, [r7, #12]
    f176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f17a:	733b      	strb	r3, [r7, #12]
    f17c:	78bb      	ldrb	r3, [r7, #2]
    f17e:	743b      	strb	r3, [r7, #16]
    f180:	2301      	movs	r3, #1
    f182:	61bb      	str	r3, [r7, #24]
    f184:	f107 0324 	add.w	r3, r7, #36	; 0x24
    f188:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    f18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f18c:	7b5b      	ldrb	r3, [r3, #13]
    f18e:	2b00      	cmp	r3, #0
    f190:	d003      	beq.n	f19a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    f192:	2100      	movs	r1, #0
    f194:	6878      	ldr	r0, [r7, #4]
    f196:	4b0a      	ldr	r3, [pc, #40]	; (f1c0 <n25q256a_read_reg+0x94>)
    f198:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    f19a:	f107 030c 	add.w	r3, r7, #12
    f19e:	4619      	mov	r1, r3
    f1a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f1a2:	4b08      	ldr	r3, [pc, #32]	; (f1c4 <n25q256a_read_reg+0x98>)
    f1a4:	4798      	blx	r3
	if (n25q->xip_mode) {
    f1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f1a8:	7b5b      	ldrb	r3, [r3, #13]
    f1aa:	2b00      	cmp	r3, #0
    f1ac:	d003      	beq.n	f1b6 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    f1ae:	2101      	movs	r1, #1
    f1b0:	6878      	ldr	r0, [r7, #4]
    f1b2:	4b03      	ldr	r3, [pc, #12]	; (f1c0 <n25q256a_read_reg+0x94>)
    f1b4:	4798      	blx	r3
	}
	return status;
    f1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    f1b8:	4618      	mov	r0, r3
    f1ba:	3730      	adds	r7, #48	; 0x30
    f1bc:	46bd      	mov	sp, r7
    f1be:	bd80      	pop	{r7, pc}
    f1c0:	0000f061 	.word	0x0000f061
    f1c4:	00005531 	.word	0x00005531

0000f1c8 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    f1c8:	b580      	push	{r7, lr}
    f1ca:	b08c      	sub	sp, #48	; 0x30
    f1cc:	af00      	add	r7, sp, #0
    f1ce:	60f8      	str	r0, [r7, #12]
    f1d0:	607b      	str	r3, [r7, #4]
    f1d2:	460b      	mov	r3, r1
    f1d4:	72fb      	strb	r3, [r7, #11]
    f1d6:	4613      	mov	r3, r2
    f1d8:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f1da:	68fb      	ldr	r3, [r7, #12]
    f1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f1de:	68fb      	ldr	r3, [r7, #12]
    f1e0:	681b      	ldr	r3, [r3, #0]
    f1e2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    f1e4:	f107 0310 	add.w	r3, r7, #16
    f1e8:	2200      	movs	r2, #0
    f1ea:	601a      	str	r2, [r3, #0]
    f1ec:	605a      	str	r2, [r3, #4]
    f1ee:	609a      	str	r2, [r3, #8]
    f1f0:	60da      	str	r2, [r3, #12]
    f1f2:	611a      	str	r2, [r3, #16]
    f1f4:	615a      	str	r2, [r3, #20]
    f1f6:	7afb      	ldrb	r3, [r7, #11]
    f1f8:	f003 0307 	and.w	r3, r3, #7
    f1fc:	b2da      	uxtb	r2, r3
    f1fe:	7c3b      	ldrb	r3, [r7, #16]
    f200:	f362 0302 	bfi	r3, r2, #0, #3
    f204:	743b      	strb	r3, [r7, #16]
    f206:	7c3b      	ldrb	r3, [r7, #16]
    f208:	f043 0310 	orr.w	r3, r3, #16
    f20c:	743b      	strb	r3, [r7, #16]
    f20e:	7c3b      	ldrb	r3, [r7, #16]
    f210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f214:	743b      	strb	r3, [r7, #16]
    f216:	7c7b      	ldrb	r3, [r7, #17]
    f218:	2202      	movs	r2, #2
    f21a:	f362 1305 	bfi	r3, r2, #4, #2
    f21e:	747b      	strb	r3, [r7, #17]
    f220:	7abb      	ldrb	r3, [r7, #10]
    f222:	753b      	strb	r3, [r7, #20]
    f224:	2301      	movs	r3, #1
    f226:	61fb      	str	r3, [r7, #28]
    f228:	1d3b      	adds	r3, r7, #4
    f22a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    f22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f22e:	7b5b      	ldrb	r3, [r3, #13]
    f230:	2b00      	cmp	r3, #0
    f232:	d003      	beq.n	f23c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    f234:	2100      	movs	r1, #0
    f236:	68f8      	ldr	r0, [r7, #12]
    f238:	4b09      	ldr	r3, [pc, #36]	; (f260 <n25q256a_write_reg+0x98>)
    f23a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    f23c:	f107 0310 	add.w	r3, r7, #16
    f240:	4619      	mov	r1, r3
    f242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f244:	4b07      	ldr	r3, [pc, #28]	; (f264 <n25q256a_write_reg+0x9c>)
    f246:	4798      	blx	r3
	if (n25q->xip_mode) {
    f248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f24a:	7b5b      	ldrb	r3, [r3, #13]
    f24c:	2b00      	cmp	r3, #0
    f24e:	d003      	beq.n	f258 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    f250:	2101      	movs	r1, #1
    f252:	68f8      	ldr	r0, [r7, #12]
    f254:	4b02      	ldr	r3, [pc, #8]	; (f260 <n25q256a_write_reg+0x98>)
    f256:	4798      	blx	r3
	}
}
    f258:	bf00      	nop
    f25a:	3730      	adds	r7, #48	; 0x30
    f25c:	46bd      	mov	sp, r7
    f25e:	bd80      	pop	{r7, pc}
    f260:	0000f061 	.word	0x0000f061
    f264:	00005531 	.word	0x00005531

0000f268 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    f268:	b580      	push	{r7, lr}
    f26a:	b090      	sub	sp, #64	; 0x40
    f26c:	af00      	add	r7, sp, #0
    f26e:	6078      	str	r0, [r7, #4]
    f270:	460b      	mov	r3, r1
    f272:	70fb      	strb	r3, [r7, #3]
    f274:	4613      	mov	r3, r2
    f276:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f278:	687b      	ldr	r3, [r7, #4]
    f27a:	681b      	ldr	r3, [r3, #0]
    f27c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    f27e:	78bb      	ldrb	r3, [r7, #2]
    f280:	2b00      	cmp	r3, #0
    f282:	d001      	beq.n	f288 <n25q256a_write_enable+0x20>
    f284:	2306      	movs	r3, #6
    f286:	e000      	b.n	f28a <n25q256a_write_enable+0x22>
    f288:	2304      	movs	r3, #4
    f28a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    f28e:	f107 0320 	add.w	r3, r7, #32
    f292:	2200      	movs	r2, #0
    f294:	601a      	str	r2, [r3, #0]
    f296:	605a      	str	r2, [r3, #4]
    f298:	609a      	str	r2, [r3, #8]
    f29a:	60da      	str	r2, [r3, #12]
    f29c:	611a      	str	r2, [r3, #16]
    f29e:	615a      	str	r2, [r3, #20]
    f2a0:	78fb      	ldrb	r3, [r7, #3]
    f2a2:	f003 0307 	and.w	r3, r3, #7
    f2a6:	b2da      	uxtb	r2, r3
    f2a8:	f897 3020 	ldrb.w	r3, [r7, #32]
    f2ac:	f362 0302 	bfi	r3, r2, #0, #3
    f2b0:	f887 3020 	strb.w	r3, [r7, #32]
    f2b4:	f897 3020 	ldrb.w	r3, [r7, #32]
    f2b8:	f043 0310 	orr.w	r3, r3, #16
    f2bc:	f887 3020 	strb.w	r3, [r7, #32]
    f2c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    f2c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    f2c8:	f107 0308 	add.w	r3, r7, #8
    f2cc:	2200      	movs	r2, #0
    f2ce:	601a      	str	r2, [r3, #0]
    f2d0:	605a      	str	r2, [r3, #4]
    f2d2:	609a      	str	r2, [r3, #8]
    f2d4:	60da      	str	r2, [r3, #12]
    f2d6:	611a      	str	r2, [r3, #16]
    f2d8:	615a      	str	r2, [r3, #20]
    f2da:	78fb      	ldrb	r3, [r7, #3]
    f2dc:	f003 0307 	and.w	r3, r3, #7
    f2e0:	b2da      	uxtb	r2, r3
    f2e2:	7a3b      	ldrb	r3, [r7, #8]
    f2e4:	f362 0302 	bfi	r3, r2, #0, #3
    f2e8:	723b      	strb	r3, [r7, #8]
    f2ea:	7a3b      	ldrb	r3, [r7, #8]
    f2ec:	f043 0310 	orr.w	r3, r3, #16
    f2f0:	723b      	strb	r3, [r7, #8]
    f2f2:	7a3b      	ldrb	r3, [r7, #8]
    f2f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f2f8:	723b      	strb	r3, [r7, #8]
    f2fa:	2305      	movs	r3, #5
    f2fc:	733b      	strb	r3, [r7, #12]
    f2fe:	2301      	movs	r3, #1
    f300:	617b      	str	r3, [r7, #20]
    f302:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    f306:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    f308:	f107 0320 	add.w	r3, r7, #32
    f30c:	4619      	mov	r1, r3
    f30e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    f310:	4b08      	ldr	r3, [pc, #32]	; (f334 <n25q256a_write_enable+0xcc>)
    f312:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    f314:	f107 0308 	add.w	r3, r7, #8
    f318:	4619      	mov	r1, r3
    f31a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    f31c:	4b05      	ldr	r3, [pc, #20]	; (f334 <n25q256a_write_enable+0xcc>)
    f31e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    f320:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    f324:	f003 0302 	and.w	r3, r3, #2
    f328:	2b00      	cmp	r3, #0
    f32a:	d0ed      	beq.n	f308 <n25q256a_write_enable+0xa0>
}
    f32c:	bf00      	nop
    f32e:	3740      	adds	r7, #64	; 0x40
    f330:	46bd      	mov	sp, r7
    f332:	bd80      	pop	{r7, pc}
    f334:	00005531 	.word	0x00005531

0000f338 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    f338:	b590      	push	{r4, r7, lr}
    f33a:	b087      	sub	sp, #28
    f33c:	af00      	add	r7, sp, #0
    f33e:	6078      	str	r0, [r7, #4]
    f340:	460b      	mov	r3, r1
    f342:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    f344:	687b      	ldr	r3, [r7, #4]
    f346:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    f348:	68fb      	ldr	r3, [r7, #12]
    f34a:	7b1b      	ldrb	r3, [r3, #12]
    f34c:	2b00      	cmp	r3, #0
    f34e:	d001      	beq.n	f354 <n25q256a_switch_mode+0x1c>
    f350:	2306      	movs	r3, #6
    f352:	e000      	b.n	f356 <n25q256a_switch_mode+0x1e>
    f354:	2300      	movs	r3, #0
    f356:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    f358:	7afb      	ldrb	r3, [r7, #11]
    f35a:	2265      	movs	r2, #101	; 0x65
    f35c:	4619      	mov	r1, r3
    f35e:	6878      	ldr	r0, [r7, #4]
    f360:	4b25      	ldr	r3, [pc, #148]	; (f3f8 <n25q256a_switch_mode+0xc0>)
    f362:	4798      	blx	r3
    f364:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    f366:	2300      	movs	r3, #0
    f368:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    f36a:	68fb      	ldr	r3, [r7, #12]
    f36c:	7b1b      	ldrb	r3, [r3, #12]
    f36e:	78fa      	ldrb	r2, [r7, #3]
    f370:	429a      	cmp	r2, r3
    f372:	d03d      	beq.n	f3f0 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    f374:	78fb      	ldrb	r3, [r7, #3]
    f376:	2b00      	cmp	r3, #0
    f378:	d00b      	beq.n	f392 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    f37a:	697b      	ldr	r3, [r7, #20]
    f37c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f380:	2b00      	cmp	r3, #0
    f382:	d011      	beq.n	f3a8 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    f384:	697b      	ldr	r3, [r7, #20]
    f386:	f003 031f 	and.w	r3, r3, #31
    f38a:	617b      	str	r3, [r7, #20]
			modify = 1;
    f38c:	2301      	movs	r3, #1
    f38e:	74fb      	strb	r3, [r7, #19]
    f390:	e00a      	b.n	f3a8 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    f392:	697b      	ldr	r3, [r7, #20]
    f394:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f398:	2b00      	cmp	r3, #0
    f39a:	d105      	bne.n	f3a8 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    f39c:	697b      	ldr	r3, [r7, #20]
    f39e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    f3a2:	617b      	str	r3, [r7, #20]
			modify = 1;
    f3a4:	2301      	movs	r3, #1
    f3a6:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    f3a8:	7cfb      	ldrb	r3, [r7, #19]
    f3aa:	2b00      	cmp	r3, #0
    f3ac:	d021      	beq.n	f3f2 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    f3ae:	68fb      	ldr	r3, [r7, #12]
    f3b0:	78fa      	ldrb	r2, [r7, #3]
    f3b2:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    f3b4:	7afb      	ldrb	r3, [r7, #11]
    f3b6:	2201      	movs	r2, #1
    f3b8:	4619      	mov	r1, r3
    f3ba:	6878      	ldr	r0, [r7, #4]
    f3bc:	4b0f      	ldr	r3, [pc, #60]	; (f3fc <n25q256a_switch_mode+0xc4>)
    f3be:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    f3c0:	7af9      	ldrb	r1, [r7, #11]
    f3c2:	697b      	ldr	r3, [r7, #20]
    f3c4:	2261      	movs	r2, #97	; 0x61
    f3c6:	6878      	ldr	r0, [r7, #4]
    f3c8:	4c0d      	ldr	r4, [pc, #52]	; (f400 <n25q256a_switch_mode+0xc8>)
    f3ca:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    f3cc:	78fb      	ldrb	r3, [r7, #3]
    f3ce:	2b00      	cmp	r3, #0
    f3d0:	d001      	beq.n	f3d6 <n25q256a_switch_mode+0x9e>
    f3d2:	2306      	movs	r3, #6
    f3d4:	e000      	b.n	f3d8 <n25q256a_switch_mode+0xa0>
    f3d6:	2300      	movs	r3, #0
    f3d8:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    f3da:	7afb      	ldrb	r3, [r7, #11]
    f3dc:	2265      	movs	r2, #101	; 0x65
    f3de:	4619      	mov	r1, r3
    f3e0:	6878      	ldr	r0, [r7, #4]
    f3e2:	4b05      	ldr	r3, [pc, #20]	; (f3f8 <n25q256a_switch_mode+0xc0>)
    f3e4:	4798      	blx	r3
    f3e6:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    f3e8:	68fb      	ldr	r3, [r7, #12]
    f3ea:	78fa      	ldrb	r2, [r7, #3]
    f3ec:	731a      	strb	r2, [r3, #12]
    f3ee:	e000      	b.n	f3f2 <n25q256a_switch_mode+0xba>
		return;
    f3f0:	bf00      	nop
	}
}
    f3f2:	371c      	adds	r7, #28
    f3f4:	46bd      	mov	sp, r7
    f3f6:	bd90      	pop	{r4, r7, pc}
    f3f8:	0000f12d 	.word	0x0000f12d
    f3fc:	0000f269 	.word	0x0000f269
    f400:	0000f1c9 	.word	0x0000f1c9

0000f404 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    f404:	b580      	push	{r7, lr}
    f406:	b086      	sub	sp, #24
    f408:	af00      	add	r7, sp, #0
    f40a:	60f8      	str	r0, [r7, #12]
    f40c:	60b9      	str	r1, [r7, #8]
    f40e:	607a      	str	r2, [r7, #4]
    f410:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    f412:	68fb      	ldr	r3, [r7, #12]
    f414:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    f416:	4a0c      	ldr	r2, [pc, #48]	; (f448 <n25q256a_construct+0x44>)
    f418:	68b9      	ldr	r1, [r7, #8]
    f41a:	68f8      	ldr	r0, [r7, #12]
    f41c:	4b0b      	ldr	r3, [pc, #44]	; (f44c <n25q256a_construct+0x48>)
    f41e:	4798      	blx	r3
	n25q->quad_mode    = 0;
    f420:	697b      	ldr	r3, [r7, #20]
    f422:	2200      	movs	r2, #0
    f424:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    f426:	697b      	ldr	r3, [r7, #20]
    f428:	2200      	movs	r2, #0
    f42a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    f42c:	697b      	ldr	r3, [r7, #20]
    f42e:	687a      	ldr	r2, [r7, #4]
    f430:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    f432:	78fb      	ldrb	r3, [r7, #3]
    f434:	4619      	mov	r1, r3
    f436:	68f8      	ldr	r0, [r7, #12]
    f438:	4b05      	ldr	r3, [pc, #20]	; (f450 <n25q256a_construct+0x4c>)
    f43a:	4798      	blx	r3
	return me;
    f43c:	68fb      	ldr	r3, [r7, #12]
}
    f43e:	4618      	mov	r0, r3
    f440:	3718      	adds	r7, #24
    f442:	46bd      	mov	sp, r7
    f444:	bd80      	pop	{r7, pc}
    f446:	bf00      	nop
    f448:	0001d348 	.word	0x0001d348
    f44c:	0000f8e1 	.word	0x0000f8e1
    f450:	0000f339 	.word	0x0000f339

0000f454 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    f454:	b580      	push	{r7, lr}
    f456:	b08c      	sub	sp, #48	; 0x30
    f458:	af00      	add	r7, sp, #0
    f45a:	60f8      	str	r0, [r7, #12]
    f45c:	60b9      	str	r1, [r7, #8]
    f45e:	607a      	str	r2, [r7, #4]
    f460:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f462:	68fb      	ldr	r3, [r7, #12]
    f464:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f466:	68fb      	ldr	r3, [r7, #12]
    f468:	681b      	ldr	r3, [r3, #0]
    f46a:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    f46c:	f107 0310 	add.w	r3, r7, #16
    f470:	2200      	movs	r2, #0
    f472:	601a      	str	r2, [r3, #0]
    f474:	605a      	str	r2, [r3, #4]
    f476:	609a      	str	r2, [r3, #8]
    f478:	60da      	str	r2, [r3, #12]
    f47a:	611a      	str	r2, [r3, #16]
    f47c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    f47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f480:	7b1b      	ldrb	r3, [r3, #12]
    f482:	2b00      	cmp	r3, #0
    f484:	d001      	beq.n	f48a <n25q256a_read+0x36>
    f486:	2206      	movs	r2, #6
    f488:	e000      	b.n	f48c <n25q256a_read+0x38>
    f48a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    f48c:	7c3b      	ldrb	r3, [r7, #16]
    f48e:	f362 0302 	bfi	r3, r2, #0, #3
    f492:	743b      	strb	r3, [r7, #16]
    f494:	7c3b      	ldrb	r3, [r7, #16]
    f496:	f043 0310 	orr.w	r3, r3, #16
    f49a:	743b      	strb	r3, [r7, #16]
    f49c:	7c3b      	ldrb	r3, [r7, #16]
    f49e:	f043 0320 	orr.w	r3, r3, #32
    f4a2:	743b      	strb	r3, [r7, #16]
    f4a4:	7c3b      	ldrb	r3, [r7, #16]
    f4a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f4aa:	743b      	strb	r3, [r7, #16]
    f4ac:	7c7b      	ldrb	r3, [r7, #17]
    f4ae:	2201      	movs	r2, #1
    f4b0:	f362 1305 	bfi	r3, r2, #4, #2
    f4b4:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    f4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f4b8:	7b1b      	ldrb	r3, [r3, #12]
    f4ba:	2b00      	cmp	r3, #0
    f4bc:	d001      	beq.n	f4c2 <n25q256a_read+0x6e>
    f4be:	220a      	movs	r2, #10
    f4c0:	e000      	b.n	f4c4 <n25q256a_read+0x70>
    f4c2:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    f4c4:	7cbb      	ldrb	r3, [r7, #18]
    f4c6:	f362 0304 	bfi	r3, r2, #0, #5
    f4ca:	74bb      	strb	r3, [r7, #18]
    f4cc:	230b      	movs	r3, #11
    f4ce:	753b      	strb	r3, [r7, #20]
    f4d0:	687b      	ldr	r3, [r7, #4]
    f4d2:	61bb      	str	r3, [r7, #24]
    f4d4:	683b      	ldr	r3, [r7, #0]
    f4d6:	61fb      	str	r3, [r7, #28]
    f4d8:	68bb      	ldr	r3, [r7, #8]
    f4da:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    f4dc:	f107 0310 	add.w	r3, r7, #16
    f4e0:	4619      	mov	r1, r3
    f4e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f4e4:	4b03      	ldr	r3, [pc, #12]	; (f4f4 <n25q256a_read+0xa0>)
    f4e6:	4798      	blx	r3
	return ERR_NONE;
    f4e8:	2300      	movs	r3, #0
}
    f4ea:	4618      	mov	r0, r3
    f4ec:	3730      	adds	r7, #48	; 0x30
    f4ee:	46bd      	mov	sp, r7
    f4f0:	bd80      	pop	{r7, pc}
    f4f2:	bf00      	nop
    f4f4:	00005531 	.word	0x00005531

0000f4f8 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    f4f8:	b580      	push	{r7, lr}
    f4fa:	b08c      	sub	sp, #48	; 0x30
    f4fc:	af00      	add	r7, sp, #0
    f4fe:	60f8      	str	r0, [r7, #12]
    f500:	60b9      	str	r1, [r7, #8]
    f502:	607a      	str	r2, [r7, #4]
    f504:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f506:	68fb      	ldr	r3, [r7, #12]
    f508:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f50a:	68fb      	ldr	r3, [r7, #12]
    f50c:	681b      	ldr	r3, [r3, #0]
    f50e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    f510:	f107 0310 	add.w	r3, r7, #16
    f514:	2200      	movs	r2, #0
    f516:	601a      	str	r2, [r3, #0]
    f518:	605a      	str	r2, [r3, #4]
    f51a:	609a      	str	r2, [r3, #8]
    f51c:	60da      	str	r2, [r3, #12]
    f51e:	611a      	str	r2, [r3, #16]
    f520:	615a      	str	r2, [r3, #20]
    f522:	7c3b      	ldrb	r3, [r7, #16]
    f524:	f043 0310 	orr.w	r3, r3, #16
    f528:	743b      	strb	r3, [r7, #16]
    f52a:	7c3b      	ldrb	r3, [r7, #16]
    f52c:	f043 0320 	orr.w	r3, r3, #32
    f530:	743b      	strb	r3, [r7, #16]
    f532:	7c3b      	ldrb	r3, [r7, #16]
    f534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f538:	743b      	strb	r3, [r7, #16]
    f53a:	7c7b      	ldrb	r3, [r7, #17]
    f53c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    f540:	747b      	strb	r3, [r7, #17]
    f542:	2302      	movs	r3, #2
    f544:	753b      	strb	r3, [r7, #20]
    f546:	687b      	ldr	r3, [r7, #4]
    f548:	61bb      	str	r3, [r7, #24]
    f54a:	683b      	ldr	r3, [r7, #0]
    f54c:	61fb      	str	r3, [r7, #28]
    f54e:	68bb      	ldr	r3, [r7, #8]
    f550:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    f552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f554:	7b1b      	ldrb	r3, [r3, #12]
    f556:	2b00      	cmp	r3, #0
    f558:	d001      	beq.n	f55e <n25q256a_write+0x66>
    f55a:	2206      	movs	r2, #6
    f55c:	e000      	b.n	f560 <n25q256a_write+0x68>
    f55e:	2200      	movs	r2, #0
    f560:	7c3b      	ldrb	r3, [r7, #16]
    f562:	f362 0302 	bfi	r3, r2, #0, #3
    f566:	743b      	strb	r3, [r7, #16]
	while (length) {
    f568:	e035      	b.n	f5d6 <n25q256a_write+0xde>
		cmd.address = address;
    f56a:	687b      	ldr	r3, [r7, #4]
    f56c:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    f56e:	683b      	ldr	r3, [r7, #0]
    f570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    f574:	d802      	bhi.n	f57c <n25q256a_write+0x84>
			cmd.buf_len = length;
    f576:	683b      	ldr	r3, [r7, #0]
    f578:	61fb      	str	r3, [r7, #28]
    f57a:	e002      	b.n	f582 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    f57c:	f44f 7380 	mov.w	r3, #256	; 0x100
    f580:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    f582:	7c3b      	ldrb	r3, [r7, #16]
    f584:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f588:	b2db      	uxtb	r3, r3
    f58a:	2201      	movs	r2, #1
    f58c:	4619      	mov	r1, r3
    f58e:	68f8      	ldr	r0, [r7, #12]
    f590:	4b19      	ldr	r3, [pc, #100]	; (f5f8 <n25q256a_write+0x100>)
    f592:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    f594:	f107 0310 	add.w	r3, r7, #16
    f598:	4619      	mov	r1, r3
    f59a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f59c:	4b17      	ldr	r3, [pc, #92]	; (f5fc <n25q256a_write+0x104>)
    f59e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    f5a0:	bf00      	nop
    f5a2:	7c3b      	ldrb	r3, [r7, #16]
    f5a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f5a8:	b2db      	uxtb	r3, r3
    f5aa:	2270      	movs	r2, #112	; 0x70
    f5ac:	4619      	mov	r1, r3
    f5ae:	68f8      	ldr	r0, [r7, #12]
    f5b0:	4b13      	ldr	r3, [pc, #76]	; (f600 <n25q256a_write+0x108>)
    f5b2:	4798      	blx	r3
    f5b4:	4603      	mov	r3, r0
    f5b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f5ba:	2b00      	cmp	r3, #0
    f5bc:	d0f1      	beq.n	f5a2 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    f5be:	6a3a      	ldr	r2, [r7, #32]
    f5c0:	69fb      	ldr	r3, [r7, #28]
    f5c2:	4413      	add	r3, r2
    f5c4:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    f5c6:	69fb      	ldr	r3, [r7, #28]
    f5c8:	683a      	ldr	r2, [r7, #0]
    f5ca:	1ad3      	subs	r3, r2, r3
    f5cc:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    f5ce:	69fb      	ldr	r3, [r7, #28]
    f5d0:	687a      	ldr	r2, [r7, #4]
    f5d2:	4413      	add	r3, r2
    f5d4:	607b      	str	r3, [r7, #4]
	while (length) {
    f5d6:	683b      	ldr	r3, [r7, #0]
    f5d8:	2b00      	cmp	r3, #0
    f5da:	d1c6      	bne.n	f56a <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    f5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f5de:	7b5b      	ldrb	r3, [r3, #13]
    f5e0:	2b00      	cmp	r3, #0
    f5e2:	d003      	beq.n	f5ec <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    f5e4:	2101      	movs	r1, #1
    f5e6:	68f8      	ldr	r0, [r7, #12]
    f5e8:	4b06      	ldr	r3, [pc, #24]	; (f604 <n25q256a_write+0x10c>)
    f5ea:	4798      	blx	r3
	}
	return ERR_NONE;
    f5ec:	2300      	movs	r3, #0
}
    f5ee:	4618      	mov	r0, r3
    f5f0:	3730      	adds	r7, #48	; 0x30
    f5f2:	46bd      	mov	sp, r7
    f5f4:	bd80      	pop	{r7, pc}
    f5f6:	bf00      	nop
    f5f8:	0000f269 	.word	0x0000f269
    f5fc:	00005531 	.word	0x00005531
    f600:	0000f12d 	.word	0x0000f12d
    f604:	0000f061 	.word	0x0000f061

0000f608 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    f608:	b580      	push	{r7, lr}
    f60a:	b090      	sub	sp, #64	; 0x40
    f60c:	af00      	add	r7, sp, #0
    f60e:	60f8      	str	r0, [r7, #12]
    f610:	60b9      	str	r1, [r7, #8]
    f612:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f614:	68fb      	ldr	r3, [r7, #12]
    f616:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f618:	68fb      	ldr	r3, [r7, #12]
    f61a:	681b      	ldr	r3, [r3, #0]
    f61c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    f61e:	f107 0314 	add.w	r3, r7, #20
    f622:	2200      	movs	r2, #0
    f624:	601a      	str	r2, [r3, #0]
    f626:	605a      	str	r2, [r3, #4]
    f628:	609a      	str	r2, [r3, #8]
    f62a:	60da      	str	r2, [r3, #12]
    f62c:	611a      	str	r2, [r3, #16]
    f62e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    f630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f632:	7b1b      	ldrb	r3, [r3, #12]
    f634:	2b00      	cmp	r3, #0
    f636:	d001      	beq.n	f63c <n25q256a_erase+0x34>
    f638:	2206      	movs	r2, #6
    f63a:	e000      	b.n	f63e <n25q256a_erase+0x36>
    f63c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    f63e:	7d3b      	ldrb	r3, [r7, #20]
    f640:	f362 0302 	bfi	r3, r2, #0, #3
    f644:	753b      	strb	r3, [r7, #20]
    f646:	7d3b      	ldrb	r3, [r7, #20]
    f648:	f043 0310 	orr.w	r3, r3, #16
    f64c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    f64e:	687b      	ldr	r3, [r7, #4]
    f650:	4a56      	ldr	r2, [pc, #344]	; (f7ac <n25q256a_erase+0x1a4>)
    f652:	4293      	cmp	r3, r2
    f654:	bf94      	ite	ls
    f656:	2301      	movls	r3, #1
    f658:	2300      	movhi	r3, #0
    f65a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    f65c:	7d3b      	ldrb	r3, [r7, #20]
    f65e:	f362 1345 	bfi	r3, r2, #5, #1
    f662:	753b      	strb	r3, [r7, #20]
    f664:	7d7b      	ldrb	r3, [r7, #21]
    f666:	2202      	movs	r2, #2
    f668:	f362 1305 	bfi	r3, r2, #4, #2
    f66c:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    f66e:	68bb      	ldr	r3, [r7, #8]
    f670:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    f672:	687b      	ldr	r3, [r7, #4]
    f674:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    f676:	2300      	movs	r3, #0
    f678:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    f67a:	687b      	ldr	r3, [r7, #4]
    f67c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    f680:	2b00      	cmp	r3, #0
    f682:	d104      	bne.n	f68e <n25q256a_erase+0x86>
    f684:	68bb      	ldr	r3, [r7, #8]
    f686:	f3c3 030b 	ubfx	r3, r3, #0, #12
    f68a:	2b00      	cmp	r3, #0
    f68c:	d002      	beq.n	f694 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    f68e:	f06f 030c 	mvn.w	r3, #12
    f692:	e087      	b.n	f7a4 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    f694:	687b      	ldr	r3, [r7, #4]
    f696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    f69a:	d368      	bcc.n	f76e <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    f69c:	23c7      	movs	r3, #199	; 0xc7
    f69e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    f6a0:	7d3b      	ldrb	r3, [r7, #20]
    f6a2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f6a6:	b2db      	uxtb	r3, r3
    f6a8:	2201      	movs	r2, #1
    f6aa:	4619      	mov	r1, r3
    f6ac:	68f8      	ldr	r0, [r7, #12]
    f6ae:	4b40      	ldr	r3, [pc, #256]	; (f7b0 <n25q256a_erase+0x1a8>)
    f6b0:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    f6b2:	f107 0314 	add.w	r3, r7, #20
    f6b6:	4619      	mov	r1, r3
    f6b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    f6ba:	4b3e      	ldr	r3, [pc, #248]	; (f7b4 <n25q256a_erase+0x1ac>)
    f6bc:	4798      	blx	r3
    f6be:	e059      	b.n	f774 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    f6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f6c2:	b29b      	uxth	r3, r3
    f6c4:	2b00      	cmp	r3, #0
    f6c6:	d11f      	bne.n	f708 <n25q256a_erase+0x100>
    f6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f6ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    f6ce:	d31b      	bcc.n	f708 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    f6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f6d2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    f6d4:	23d8      	movs	r3, #216	; 0xd8
    f6d6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    f6d8:	7d3b      	ldrb	r3, [r7, #20]
    f6da:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f6de:	b2db      	uxtb	r3, r3
    f6e0:	2201      	movs	r2, #1
    f6e2:	4619      	mov	r1, r3
    f6e4:	68f8      	ldr	r0, [r7, #12]
    f6e6:	4b32      	ldr	r3, [pc, #200]	; (f7b0 <n25q256a_erase+0x1a8>)
    f6e8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    f6ea:	f107 0314 	add.w	r3, r7, #20
    f6ee:	4619      	mov	r1, r3
    f6f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    f6f2:	4b30      	ldr	r3, [pc, #192]	; (f7b4 <n25q256a_erase+0x1ac>)
    f6f4:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    f6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f6f8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    f6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    f6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f700:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    f704:	63bb      	str	r3, [r7, #56]	; 0x38
    f706:	e023      	b.n	f750 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    f708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f70a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    f70e:	d31b      	bcc.n	f748 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    f710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f712:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    f714:	2320      	movs	r3, #32
    f716:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    f718:	7d3b      	ldrb	r3, [r7, #20]
    f71a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f71e:	b2db      	uxtb	r3, r3
    f720:	2201      	movs	r2, #1
    f722:	4619      	mov	r1, r3
    f724:	68f8      	ldr	r0, [r7, #12]
    f726:	4b22      	ldr	r3, [pc, #136]	; (f7b0 <n25q256a_erase+0x1a8>)
    f728:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    f72a:	f107 0314 	add.w	r3, r7, #20
    f72e:	4619      	mov	r1, r3
    f730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    f732:	4b20      	ldr	r3, [pc, #128]	; (f7b4 <n25q256a_erase+0x1ac>)
    f734:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    f736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    f73c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    f73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f740:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    f744:	63bb      	str	r3, [r7, #56]	; 0x38
    f746:	e003      	b.n	f750 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    f748:	f06f 030c 	mvn.w	r3, #12
    f74c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    f74e:	e011      	b.n	f774 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    f750:	bf00      	nop
    f752:	7d3b      	ldrb	r3, [r7, #20]
    f754:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f758:	b2db      	uxtb	r3, r3
    f75a:	2270      	movs	r2, #112	; 0x70
    f75c:	4619      	mov	r1, r3
    f75e:	68f8      	ldr	r0, [r7, #12]
    f760:	4b15      	ldr	r3, [pc, #84]	; (f7b8 <n25q256a_erase+0x1b0>)
    f762:	4798      	blx	r3
    f764:	4603      	mov	r3, r0
    f766:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f76a:	2b00      	cmp	r3, #0
    f76c:	d0f1      	beq.n	f752 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    f76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f770:	2b00      	cmp	r3, #0
    f772:	d1a5      	bne.n	f6c0 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    f774:	bf00      	nop
    f776:	7d3b      	ldrb	r3, [r7, #20]
    f778:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f77c:	b2db      	uxtb	r3, r3
    f77e:	2270      	movs	r2, #112	; 0x70
    f780:	4619      	mov	r1, r3
    f782:	68f8      	ldr	r0, [r7, #12]
    f784:	4b0c      	ldr	r3, [pc, #48]	; (f7b8 <n25q256a_erase+0x1b0>)
    f786:	4798      	blx	r3
    f788:	4603      	mov	r3, r0
    f78a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f78e:	2b00      	cmp	r3, #0
    f790:	d0f1      	beq.n	f776 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    f792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f794:	7b5b      	ldrb	r3, [r3, #13]
    f796:	2b00      	cmp	r3, #0
    f798:	d003      	beq.n	f7a2 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    f79a:	2101      	movs	r1, #1
    f79c:	68f8      	ldr	r0, [r7, #12]
    f79e:	4b07      	ldr	r3, [pc, #28]	; (f7bc <n25q256a_erase+0x1b4>)
    f7a0:	4798      	blx	r3
	}
	return rc;
    f7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    f7a4:	4618      	mov	r0, r3
    f7a6:	3740      	adds	r7, #64	; 0x40
    f7a8:	46bd      	mov	sp, r7
    f7aa:	bd80      	pop	{r7, pc}
    f7ac:	001fffff 	.word	0x001fffff
    f7b0:	0000f269 	.word	0x0000f269
    f7b4:	00005531 	.word	0x00005531
    f7b8:	0000f12d 	.word	0x0000f12d
    f7bc:	0000f061 	.word	0x0000f061

0000f7c0 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    f7c0:	b590      	push	{r4, r7, lr}
    f7c2:	b085      	sub	sp, #20
    f7c4:	af00      	add	r7, sp, #0
    f7c6:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    f7c8:	687b      	ldr	r3, [r7, #4]
    f7ca:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    f7cc:	68fb      	ldr	r3, [r7, #12]
    f7ce:	7b1b      	ldrb	r3, [r3, #12]
    f7d0:	2b00      	cmp	r3, #0
    f7d2:	d001      	beq.n	f7d8 <n25q256a_enable_xip+0x18>
    f7d4:	2306      	movs	r3, #6
    f7d6:	e000      	b.n	f7da <n25q256a_enable_xip+0x1a>
    f7d8:	2300      	movs	r3, #0
    f7da:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    f7dc:	68fb      	ldr	r3, [r7, #12]
    f7de:	7b5b      	ldrb	r3, [r3, #13]
    f7e0:	2b00      	cmp	r3, #0
    f7e2:	d129      	bne.n	f838 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    f7e4:	7afb      	ldrb	r3, [r7, #11]
    f7e6:	2285      	movs	r2, #133	; 0x85
    f7e8:	4619      	mov	r1, r3
    f7ea:	6878      	ldr	r0, [r7, #4]
    f7ec:	4b15      	ldr	r3, [pc, #84]	; (f844 <n25q256a_enable_xip+0x84>)
    f7ee:	4798      	blx	r3
    f7f0:	4603      	mov	r3, r0
    f7f2:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    f7f4:	7abb      	ldrb	r3, [r7, #10]
    f7f6:	f003 0308 	and.w	r3, r3, #8
    f7fa:	2b00      	cmp	r3, #0
    f7fc:	d015      	beq.n	f82a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    f7fe:	7abb      	ldrb	r3, [r7, #10]
    f800:	f023 0308 	bic.w	r3, r3, #8
    f804:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    f806:	7abb      	ldrb	r3, [r7, #10]
    f808:	7af9      	ldrb	r1, [r7, #11]
    f80a:	2281      	movs	r2, #129	; 0x81
    f80c:	6878      	ldr	r0, [r7, #4]
    f80e:	4c0e      	ldr	r4, [pc, #56]	; (f848 <n25q256a_enable_xip+0x88>)
    f810:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    f812:	bf00      	nop
    f814:	7afb      	ldrb	r3, [r7, #11]
    f816:	2270      	movs	r2, #112	; 0x70
    f818:	4619      	mov	r1, r3
    f81a:	6878      	ldr	r0, [r7, #4]
    f81c:	4b09      	ldr	r3, [pc, #36]	; (f844 <n25q256a_enable_xip+0x84>)
    f81e:	4798      	blx	r3
    f820:	4603      	mov	r3, r0
    f822:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f826:	2b00      	cmp	r3, #0
    f828:	d0f4      	beq.n	f814 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    f82a:	68fb      	ldr	r3, [r7, #12]
    f82c:	2201      	movs	r2, #1
    f82e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    f830:	2101      	movs	r1, #1
    f832:	6878      	ldr	r0, [r7, #4]
    f834:	4b05      	ldr	r3, [pc, #20]	; (f84c <n25q256a_enable_xip+0x8c>)
    f836:	4798      	blx	r3
	}
	return ERR_NONE;
    f838:	2300      	movs	r3, #0
}
    f83a:	4618      	mov	r0, r3
    f83c:	3714      	adds	r7, #20
    f83e:	46bd      	mov	sp, r7
    f840:	bd90      	pop	{r4, r7, pc}
    f842:	bf00      	nop
    f844:	0000f12d 	.word	0x0000f12d
    f848:	0000f1c9 	.word	0x0000f1c9
    f84c:	0000f061 	.word	0x0000f061

0000f850 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    f850:	b580      	push	{r7, lr}
    f852:	b086      	sub	sp, #24
    f854:	af00      	add	r7, sp, #0
    f856:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f858:	687b      	ldr	r3, [r7, #4]
    f85a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f85c:	687b      	ldr	r3, [r7, #4]
    f85e:	681b      	ldr	r3, [r3, #0]
    f860:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    f862:	697b      	ldr	r3, [r7, #20]
    f864:	7b1b      	ldrb	r3, [r3, #12]
    f866:	2b00      	cmp	r3, #0
    f868:	d001      	beq.n	f86e <n25q256a_disable_xip+0x1e>
    f86a:	2306      	movs	r3, #6
    f86c:	e000      	b.n	f870 <n25q256a_disable_xip+0x20>
    f86e:	2300      	movs	r3, #0
    f870:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    f872:	2100      	movs	r1, #0
    f874:	6878      	ldr	r0, [r7, #4]
    f876:	4b15      	ldr	r3, [pc, #84]	; (f8cc <n25q256a_disable_xip+0x7c>)
    f878:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    f87a:	7bfb      	ldrb	r3, [r7, #15]
    f87c:	2285      	movs	r2, #133	; 0x85
    f87e:	4619      	mov	r1, r3
    f880:	6878      	ldr	r0, [r7, #4]
    f882:	4b13      	ldr	r3, [pc, #76]	; (f8d0 <n25q256a_disable_xip+0x80>)
    f884:	4798      	blx	r3
    f886:	4603      	mov	r3, r0
    f888:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    f88a:	7bbb      	ldrb	r3, [r7, #14]
    f88c:	f003 0308 	and.w	r3, r3, #8
    f890:	2b00      	cmp	r3, #0
    f892:	d113      	bne.n	f8bc <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    f894:	697b      	ldr	r3, [r7, #20]
    f896:	689b      	ldr	r3, [r3, #8]
    f898:	2b00      	cmp	r3, #0
    f89a:	d00f      	beq.n	f8bc <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    f89c:	693b      	ldr	r3, [r7, #16]
    f89e:	681b      	ldr	r3, [r3, #0]
    f8a0:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    f8a2:	6938      	ldr	r0, [r7, #16]
    f8a4:	4b0b      	ldr	r3, [pc, #44]	; (f8d4 <n25q256a_disable_xip+0x84>)
    f8a6:	4798      	blx	r3
			n25q->pin_exit_xip();
    f8a8:	697b      	ldr	r3, [r7, #20]
    f8aa:	689b      	ldr	r3, [r3, #8]
    f8ac:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    f8ae:	68b9      	ldr	r1, [r7, #8]
    f8b0:	6938      	ldr	r0, [r7, #16]
    f8b2:	4b09      	ldr	r3, [pc, #36]	; (f8d8 <n25q256a_disable_xip+0x88>)
    f8b4:	4798      	blx	r3
			qspi_sync_enable(descr);
    f8b6:	6938      	ldr	r0, [r7, #16]
    f8b8:	4b08      	ldr	r3, [pc, #32]	; (f8dc <n25q256a_disable_xip+0x8c>)
    f8ba:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    f8bc:	697b      	ldr	r3, [r7, #20]
    f8be:	2200      	movs	r2, #0
    f8c0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    f8c2:	2300      	movs	r3, #0
}
    f8c4:	4618      	mov	r0, r3
    f8c6:	3718      	adds	r7, #24
    f8c8:	46bd      	mov	sp, r7
    f8ca:	bd80      	pop	{r7, pc}
    f8cc:	0000f061 	.word	0x0000f061
    f8d0:	0000f12d 	.word	0x0000f12d
    f8d4:	000054f5 	.word	0x000054f5
    f8d8:	0000546d 	.word	0x0000546d
    f8dc:	000054b9 	.word	0x000054b9

0000f8e0 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    f8e0:	b480      	push	{r7}
    f8e2:	b085      	sub	sp, #20
    f8e4:	af00      	add	r7, sp, #0
    f8e6:	60f8      	str	r0, [r7, #12]
    f8e8:	60b9      	str	r1, [r7, #8]
    f8ea:	607a      	str	r2, [r7, #4]
	me->io        = io;
    f8ec:	68fb      	ldr	r3, [r7, #12]
    f8ee:	68ba      	ldr	r2, [r7, #8]
    f8f0:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    f8f2:	68fb      	ldr	r3, [r7, #12]
    f8f4:	687a      	ldr	r2, [r7, #4]
    f8f6:	605a      	str	r2, [r3, #4]

	return me;
    f8f8:	68fb      	ldr	r3, [r7, #12]
}
    f8fa:	4618      	mov	r0, r3
    f8fc:	3714      	adds	r7, #20
    f8fe:	46bd      	mov	sp, r7
    f900:	f85d 7b04 	ldr.w	r7, [sp], #4
    f904:	4770      	bx	lr

0000f906 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    f906:	b480      	push	{r7}
    f908:	b083      	sub	sp, #12
    f90a:	af00      	add	r7, sp, #0
    f90c:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    f90e:	687b      	ldr	r3, [r7, #4]
    f910:	781b      	ldrb	r3, [r3, #0]
    f912:	b29a      	uxth	r2, r3
    f914:	687b      	ldr	r3, [r7, #4]
    f916:	3301      	adds	r3, #1
    f918:	781b      	ldrb	r3, [r3, #0]
    f91a:	b29b      	uxth	r3, r3
    f91c:	021b      	lsls	r3, r3, #8
    f91e:	b29b      	uxth	r3, r3
    f920:	4413      	add	r3, r2
    f922:	b29b      	uxth	r3, r3
}
    f924:	4618      	mov	r0, r3
    f926:	370c      	adds	r7, #12
    f928:	46bd      	mov	sp, r7
    f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
    f92e:	4770      	bx	lr

0000f930 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    f930:	b480      	push	{r7}
    f932:	b083      	sub	sp, #12
    f934:	af00      	add	r7, sp, #0
    f936:	6078      	str	r0, [r7, #4]
	return desc[0];
    f938:	687b      	ldr	r3, [r7, #4]
    f93a:	781b      	ldrb	r3, [r3, #0]
}
    f93c:	4618      	mov	r0, r3
    f93e:	370c      	adds	r7, #12
    f940:	46bd      	mov	sp, r7
    f942:	f85d 7b04 	ldr.w	r7, [sp], #4
    f946:	4770      	bx	lr

0000f948 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    f948:	b580      	push	{r7, lr}
    f94a:	b082      	sub	sp, #8
    f94c:	af00      	add	r7, sp, #0
    f94e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    f950:	6878      	ldr	r0, [r7, #4]
    f952:	4b05      	ldr	r3, [pc, #20]	; (f968 <usb_desc_next+0x20>)
    f954:	4798      	blx	r3
    f956:	4603      	mov	r3, r0
    f958:	461a      	mov	r2, r3
    f95a:	687b      	ldr	r3, [r7, #4]
    f95c:	4413      	add	r3, r2
}
    f95e:	4618      	mov	r0, r3
    f960:	3708      	adds	r7, #8
    f962:	46bd      	mov	sp, r7
    f964:	bd80      	pop	{r7, pc}
    f966:	bf00      	nop
    f968:	0000f931 	.word	0x0000f931

0000f96c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    f96c:	b580      	push	{r7, lr}
    f96e:	b08c      	sub	sp, #48	; 0x30
    f970:	af00      	add	r7, sp, #0
    f972:	6078      	str	r0, [r7, #4]
    f974:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    f976:	687b      	ldr	r3, [r7, #4]
    f978:	689b      	ldr	r3, [r3, #8]
    f97a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    f97c:	683b      	ldr	r3, [r7, #0]
    f97e:	681b      	ldr	r3, [r3, #0]
    f980:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    f982:	2300      	movs	r3, #0
    f984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f988:	e08f      	b.n	faaa <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    f98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f98c:	2b00      	cmp	r3, #0
    f98e:	d102      	bne.n	f996 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    f990:	f06f 0309 	mvn.w	r3, #9
    f994:	e092      	b.n	fabc <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    f996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f998:	789b      	ldrb	r3, [r3, #2]
    f99a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    f99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f99e:	795b      	ldrb	r3, [r3, #5]
    f9a0:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    f9a2:	7c7b      	ldrb	r3, [r7, #17]
    f9a4:	2b02      	cmp	r3, #2
    f9a6:	d002      	beq.n	f9ae <cdcdf_acm_enable+0x42>
    f9a8:	7c7b      	ldrb	r3, [r7, #17]
    f9aa:	2b0a      	cmp	r3, #10
    f9ac:	d121      	bne.n	f9f2 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    f9ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f9b2:	6a3a      	ldr	r2, [r7, #32]
    f9b4:	5cd2      	ldrb	r2, [r2, r3]
    f9b6:	7bbb      	ldrb	r3, [r7, #14]
    f9b8:	429a      	cmp	r2, r3
    f9ba:	d102      	bne.n	f9c2 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    f9bc:	f06f 0311 	mvn.w	r3, #17
    f9c0:	e07c      	b.n	fabc <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    f9c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f9c6:	6a3a      	ldr	r2, [r7, #32]
    f9c8:	5cd3      	ldrb	r3, [r2, r3]
    f9ca:	2bff      	cmp	r3, #255	; 0xff
    f9cc:	d002      	beq.n	f9d4 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    f9ce:	f06f 031b 	mvn.w	r3, #27
    f9d2:	e073      	b.n	fabc <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    f9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f9d8:	7bb9      	ldrb	r1, [r7, #14]
    f9da:	6a3a      	ldr	r2, [r7, #32]
    f9dc:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    f9de:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    f9e0:	683b      	ldr	r3, [r7, #0]
    f9e2:	685b      	ldr	r3, [r3, #4]
    f9e4:	2205      	movs	r2, #5
    f9e6:	4619      	mov	r1, r3
    f9e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    f9ea:	4b36      	ldr	r3, [pc, #216]	; (fac4 <cdcdf_acm_enable+0x158>)
    f9ec:	4798      	blx	r3
    f9ee:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    f9f0:	e047      	b.n	fa82 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    f9f2:	f06f 0309 	mvn.w	r3, #9
    f9f6:	e061      	b.n	fabc <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    f9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f9fa:	789b      	ldrb	r3, [r3, #2]
    f9fc:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    f9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fa00:	78db      	ldrb	r3, [r3, #3]
    fa02:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    fa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fa06:	3304      	adds	r3, #4
    fa08:	4618      	mov	r0, r3
    fa0a:	4b2f      	ldr	r3, [pc, #188]	; (fac8 <cdcdf_acm_enable+0x15c>)
    fa0c:	4798      	blx	r3
    fa0e:	4603      	mov	r3, r0
    fa10:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    fa12:	7ebb      	ldrb	r3, [r7, #26]
    fa14:	7ef9      	ldrb	r1, [r7, #27]
    fa16:	8bba      	ldrh	r2, [r7, #28]
    fa18:	4618      	mov	r0, r3
    fa1a:	4b2c      	ldr	r3, [pc, #176]	; (facc <cdcdf_acm_enable+0x160>)
    fa1c:	4798      	blx	r3
    fa1e:	4603      	mov	r3, r0
    fa20:	2b00      	cmp	r3, #0
    fa22:	d002      	beq.n	fa2a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    fa24:	f06f 0313 	mvn.w	r3, #19
    fa28:	e048      	b.n	fabc <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    fa2a:	7ebb      	ldrb	r3, [r7, #26]
    fa2c:	b25b      	sxtb	r3, r3
    fa2e:	2b00      	cmp	r3, #0
    fa30:	da0f      	bge.n	fa52 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    fa32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fa36:	7eb9      	ldrb	r1, [r7, #26]
    fa38:	6a3a      	ldr	r2, [r7, #32]
    fa3a:	4413      	add	r3, r2
    fa3c:	460a      	mov	r2, r1
    fa3e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    fa40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fa44:	6a3a      	ldr	r2, [r7, #32]
    fa46:	4413      	add	r3, r2
    fa48:	789b      	ldrb	r3, [r3, #2]
    fa4a:	4618      	mov	r0, r3
    fa4c:	4b20      	ldr	r3, [pc, #128]	; (fad0 <cdcdf_acm_enable+0x164>)
    fa4e:	4798      	blx	r3
    fa50:	e007      	b.n	fa62 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    fa52:	7eba      	ldrb	r2, [r7, #26]
    fa54:	6a3b      	ldr	r3, [r7, #32]
    fa56:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    fa58:	6a3b      	ldr	r3, [r7, #32]
    fa5a:	791b      	ldrb	r3, [r3, #4]
    fa5c:	4618      	mov	r0, r3
    fa5e:	4b1c      	ldr	r3, [pc, #112]	; (fad0 <cdcdf_acm_enable+0x164>)
    fa60:	4798      	blx	r3
			}
			desc->sod = ep;
    fa62:	683b      	ldr	r3, [r7, #0]
    fa64:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fa66:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    fa68:	683b      	ldr	r3, [r7, #0]
    fa6a:	681b      	ldr	r3, [r3, #0]
    fa6c:	4618      	mov	r0, r3
    fa6e:	4b19      	ldr	r3, [pc, #100]	; (fad4 <cdcdf_acm_enable+0x168>)
    fa70:	4798      	blx	r3
    fa72:	4602      	mov	r2, r0
    fa74:	683b      	ldr	r3, [r7, #0]
    fa76:	685b      	ldr	r3, [r3, #4]
    fa78:	4619      	mov	r1, r3
    fa7a:	4610      	mov	r0, r2
    fa7c:	4b16      	ldr	r3, [pc, #88]	; (fad8 <cdcdf_acm_enable+0x16c>)
    fa7e:	4798      	blx	r3
    fa80:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    fa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fa84:	2b00      	cmp	r3, #0
    fa86:	d1b7      	bne.n	f9f8 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    fa88:	683b      	ldr	r3, [r7, #0]
    fa8a:	681b      	ldr	r3, [r3, #0]
    fa8c:	4618      	mov	r0, r3
    fa8e:	4b11      	ldr	r3, [pc, #68]	; (fad4 <cdcdf_acm_enable+0x168>)
    fa90:	4798      	blx	r3
    fa92:	683b      	ldr	r3, [r7, #0]
    fa94:	685b      	ldr	r3, [r3, #4]
    fa96:	2204      	movs	r2, #4
    fa98:	4619      	mov	r1, r3
    fa9a:	4b0a      	ldr	r3, [pc, #40]	; (fac4 <cdcdf_acm_enable+0x158>)
    fa9c:	4798      	blx	r3
    fa9e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    faa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    faa4:	3301      	adds	r3, #1
    faa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    faaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    faae:	2b01      	cmp	r3, #1
    fab0:	f67f af6b 	bls.w	f98a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    fab4:	4b09      	ldr	r3, [pc, #36]	; (fadc <cdcdf_acm_enable+0x170>)
    fab6:	2201      	movs	r2, #1
    fab8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    faba:	2300      	movs	r3, #0
}
    fabc:	4618      	mov	r0, r3
    fabe:	3730      	adds	r7, #48	; 0x30
    fac0:	46bd      	mov	sp, r7
    fac2:	bd80      	pop	{r7, pc}
    fac4:	00010d2d 	.word	0x00010d2d
    fac8:	0000f907 	.word	0x0000f907
    facc:	00006525 	.word	0x00006525
    fad0:	00006611 	.word	0x00006611
    fad4:	0000f949 	.word	0x0000f949
    fad8:	00010d89 	.word	0x00010d89
    fadc:	20003a10 	.word	0x20003a10

0000fae0 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    fae0:	b580      	push	{r7, lr}
    fae2:	b088      	sub	sp, #32
    fae4:	af00      	add	r7, sp, #0
    fae6:	6078      	str	r0, [r7, #4]
    fae8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    faea:	687b      	ldr	r3, [r7, #4]
    faec:	689b      	ldr	r3, [r3, #8]
    faee:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    faf0:	683b      	ldr	r3, [r7, #0]
    faf2:	2b00      	cmp	r3, #0
    faf4:	d00c      	beq.n	fb10 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    faf6:	683b      	ldr	r3, [r7, #0]
    faf8:	681b      	ldr	r3, [r3, #0]
    fafa:	795b      	ldrb	r3, [r3, #5]
    fafc:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    fafe:	7c7b      	ldrb	r3, [r7, #17]
    fb00:	2b02      	cmp	r3, #2
    fb02:	d005      	beq.n	fb10 <cdcdf_acm_disable+0x30>
    fb04:	7c7b      	ldrb	r3, [r7, #17]
    fb06:	2b0a      	cmp	r3, #10
    fb08:	d002      	beq.n	fb10 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    fb0a:	f06f 0309 	mvn.w	r3, #9
    fb0e:	e035      	b.n	fb7c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    fb10:	2300      	movs	r3, #0
    fb12:	77fb      	strb	r3, [r7, #31]
    fb14:	e01f      	b.n	fb56 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    fb16:	7ffb      	ldrb	r3, [r7, #31]
    fb18:	69ba      	ldr	r2, [r7, #24]
    fb1a:	5cd3      	ldrb	r3, [r2, r3]
    fb1c:	2bff      	cmp	r3, #255	; 0xff
    fb1e:	d016      	beq.n	fb4e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    fb20:	7ffb      	ldrb	r3, [r7, #31]
    fb22:	69ba      	ldr	r2, [r7, #24]
    fb24:	21ff      	movs	r1, #255	; 0xff
    fb26:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    fb28:	7ffb      	ldrb	r3, [r7, #31]
    fb2a:	69ba      	ldr	r2, [r7, #24]
    fb2c:	4413      	add	r3, r2
    fb2e:	789b      	ldrb	r3, [r3, #2]
    fb30:	2bff      	cmp	r3, #255	; 0xff
    fb32:	d00d      	beq.n	fb50 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    fb34:	7ffb      	ldrb	r3, [r7, #31]
    fb36:	69ba      	ldr	r2, [r7, #24]
    fb38:	4413      	add	r3, r2
    fb3a:	789b      	ldrb	r3, [r3, #2]
    fb3c:	4618      	mov	r0, r3
    fb3e:	4b11      	ldr	r3, [pc, #68]	; (fb84 <cdcdf_acm_disable+0xa4>)
    fb40:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    fb42:	7ffb      	ldrb	r3, [r7, #31]
    fb44:	69ba      	ldr	r2, [r7, #24]
    fb46:	4413      	add	r3, r2
    fb48:	22ff      	movs	r2, #255	; 0xff
    fb4a:	709a      	strb	r2, [r3, #2]
    fb4c:	e000      	b.n	fb50 <cdcdf_acm_disable+0x70>
			continue;
    fb4e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    fb50:	7ffb      	ldrb	r3, [r7, #31]
    fb52:	3301      	adds	r3, #1
    fb54:	77fb      	strb	r3, [r7, #31]
    fb56:	7ffb      	ldrb	r3, [r7, #31]
    fb58:	2b01      	cmp	r3, #1
    fb5a:	d9dc      	bls.n	fb16 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    fb5c:	69bb      	ldr	r3, [r7, #24]
    fb5e:	791b      	ldrb	r3, [r3, #4]
    fb60:	2bff      	cmp	r3, #255	; 0xff
    fb62:	d007      	beq.n	fb74 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    fb64:	69bb      	ldr	r3, [r7, #24]
    fb66:	791b      	ldrb	r3, [r3, #4]
    fb68:	4618      	mov	r0, r3
    fb6a:	4b06      	ldr	r3, [pc, #24]	; (fb84 <cdcdf_acm_disable+0xa4>)
    fb6c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    fb6e:	69bb      	ldr	r3, [r7, #24]
    fb70:	22ff      	movs	r2, #255	; 0xff
    fb72:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    fb74:	4b04      	ldr	r3, [pc, #16]	; (fb88 <cdcdf_acm_disable+0xa8>)
    fb76:	2200      	movs	r2, #0
    fb78:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    fb7a:	2300      	movs	r3, #0
}
    fb7c:	4618      	mov	r0, r3
    fb7e:	3720      	adds	r7, #32
    fb80:	46bd      	mov	sp, r7
    fb82:	bd80      	pop	{r7, pc}
    fb84:	000065c1 	.word	0x000065c1
    fb88:	20003a10 	.word	0x20003a10

0000fb8c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    fb8c:	b580      	push	{r7, lr}
    fb8e:	b084      	sub	sp, #16
    fb90:	af00      	add	r7, sp, #0
    fb92:	60f8      	str	r0, [r7, #12]
    fb94:	460b      	mov	r3, r1
    fb96:	607a      	str	r2, [r7, #4]
    fb98:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    fb9a:	7afb      	ldrb	r3, [r7, #11]
    fb9c:	2b01      	cmp	r3, #1
    fb9e:	d009      	beq.n	fbb4 <cdcdf_acm_ctrl+0x28>
    fba0:	2b02      	cmp	r3, #2
    fba2:	d00d      	beq.n	fbc0 <cdcdf_acm_ctrl+0x34>
    fba4:	2b00      	cmp	r3, #0
    fba6:	d10e      	bne.n	fbc6 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    fba8:	6879      	ldr	r1, [r7, #4]
    fbaa:	68f8      	ldr	r0, [r7, #12]
    fbac:	4b09      	ldr	r3, [pc, #36]	; (fbd4 <cdcdf_acm_ctrl+0x48>)
    fbae:	4798      	blx	r3
    fbb0:	4603      	mov	r3, r0
    fbb2:	e00a      	b.n	fbca <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    fbb4:	6879      	ldr	r1, [r7, #4]
    fbb6:	68f8      	ldr	r0, [r7, #12]
    fbb8:	4b07      	ldr	r3, [pc, #28]	; (fbd8 <cdcdf_acm_ctrl+0x4c>)
    fbba:	4798      	blx	r3
    fbbc:	4603      	mov	r3, r0
    fbbe:	e004      	b.n	fbca <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    fbc0:	f06f 031a 	mvn.w	r3, #26
    fbc4:	e001      	b.n	fbca <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    fbc6:	f06f 030c 	mvn.w	r3, #12
	}
}
    fbca:	4618      	mov	r0, r3
    fbcc:	3710      	adds	r7, #16
    fbce:	46bd      	mov	sp, r7
    fbd0:	bd80      	pop	{r7, pc}
    fbd2:	bf00      	nop
    fbd4:	0000f96d 	.word	0x0000f96d
    fbd8:	0000fae1 	.word	0x0000fae1

0000fbdc <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    fbdc:	b590      	push	{r4, r7, lr}
    fbde:	b087      	sub	sp, #28
    fbe0:	af00      	add	r7, sp, #0
    fbe2:	4603      	mov	r3, r0
    fbe4:	6039      	str	r1, [r7, #0]
    fbe6:	71fb      	strb	r3, [r7, #7]
    fbe8:	4613      	mov	r3, r2
    fbea:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    fbec:	683b      	ldr	r3, [r7, #0]
    fbee:	799a      	ldrb	r2, [r3, #6]
    fbf0:	79db      	ldrb	r3, [r3, #7]
    fbf2:	021b      	lsls	r3, r3, #8
    fbf4:	4313      	orrs	r3, r2
    fbf6:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    fbf8:	4b2b      	ldr	r3, [pc, #172]	; (fca8 <cdcdf_acm_set_req+0xcc>)
    fbfa:	4798      	blx	r3
    fbfc:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    fbfe:	683b      	ldr	r3, [r7, #0]
    fc00:	785b      	ldrb	r3, [r3, #1]
    fc02:	2b20      	cmp	r3, #32
    fc04:	d002      	beq.n	fc0c <cdcdf_acm_set_req+0x30>
    fc06:	2b22      	cmp	r3, #34	; 0x22
    fc08:	d034      	beq.n	fc74 <cdcdf_acm_set_req+0x98>
    fc0a:	e046      	b.n	fc9a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    fc0c:	8afb      	ldrh	r3, [r7, #22]
    fc0e:	2b07      	cmp	r3, #7
    fc10:	d002      	beq.n	fc18 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    fc12:	f04f 33ff 	mov.w	r3, #4294967295
    fc16:	e042      	b.n	fc9e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    fc18:	79bb      	ldrb	r3, [r7, #6]
    fc1a:	2b00      	cmp	r3, #0
    fc1c:	d107      	bne.n	fc2e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    fc1e:	8afa      	ldrh	r2, [r7, #22]
    fc20:	79f8      	ldrb	r0, [r7, #7]
    fc22:	2300      	movs	r3, #0
    fc24:	6939      	ldr	r1, [r7, #16]
    fc26:	4c21      	ldr	r4, [pc, #132]	; (fcac <cdcdf_acm_set_req+0xd0>)
    fc28:	47a0      	blx	r4
    fc2a:	4603      	mov	r3, r0
    fc2c:	e037      	b.n	fc9e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    fc2e:	693a      	ldr	r2, [r7, #16]
    fc30:	f107 0308 	add.w	r3, r7, #8
    fc34:	6810      	ldr	r0, [r2, #0]
    fc36:	6018      	str	r0, [r3, #0]
    fc38:	8891      	ldrh	r1, [r2, #4]
    fc3a:	7992      	ldrb	r2, [r2, #6]
    fc3c:	8099      	strh	r1, [r3, #4]
    fc3e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    fc40:	4b1b      	ldr	r3, [pc, #108]	; (fcb0 <cdcdf_acm_set_req+0xd4>)
    fc42:	681b      	ldr	r3, [r3, #0]
    fc44:	2b00      	cmp	r3, #0
    fc46:	d008      	beq.n	fc5a <cdcdf_acm_set_req+0x7e>
    fc48:	4b19      	ldr	r3, [pc, #100]	; (fcb0 <cdcdf_acm_set_req+0xd4>)
    fc4a:	681b      	ldr	r3, [r3, #0]
    fc4c:	f107 0208 	add.w	r2, r7, #8
    fc50:	4610      	mov	r0, r2
    fc52:	4798      	blx	r3
    fc54:	4603      	mov	r3, r0
    fc56:	2b00      	cmp	r3, #0
    fc58:	d00a      	beq.n	fc70 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    fc5a:	4b16      	ldr	r3, [pc, #88]	; (fcb4 <cdcdf_acm_set_req+0xd8>)
    fc5c:	f107 0208 	add.w	r2, r7, #8
    fc60:	e892 0003 	ldmia.w	r2, {r0, r1}
    fc64:	6018      	str	r0, [r3, #0]
    fc66:	3304      	adds	r3, #4
    fc68:	8019      	strh	r1, [r3, #0]
    fc6a:	3302      	adds	r3, #2
    fc6c:	0c0a      	lsrs	r2, r1, #16
    fc6e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    fc70:	2300      	movs	r3, #0
    fc72:	e014      	b.n	fc9e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    fc74:	2300      	movs	r3, #0
    fc76:	2200      	movs	r2, #0
    fc78:	2100      	movs	r1, #0
    fc7a:	2000      	movs	r0, #0
    fc7c:	4c0b      	ldr	r4, [pc, #44]	; (fcac <cdcdf_acm_set_req+0xd0>)
    fc7e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    fc80:	4b0d      	ldr	r3, [pc, #52]	; (fcb8 <cdcdf_acm_set_req+0xdc>)
    fc82:	681b      	ldr	r3, [r3, #0]
    fc84:	2b00      	cmp	r3, #0
    fc86:	d006      	beq.n	fc96 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    fc88:	4b0b      	ldr	r3, [pc, #44]	; (fcb8 <cdcdf_acm_set_req+0xdc>)
    fc8a:	681b      	ldr	r3, [r3, #0]
    fc8c:	683a      	ldr	r2, [r7, #0]
    fc8e:	8852      	ldrh	r2, [r2, #2]
    fc90:	b292      	uxth	r2, r2
    fc92:	4610      	mov	r0, r2
    fc94:	4798      	blx	r3
		}
		return ERR_NONE;
    fc96:	2300      	movs	r3, #0
    fc98:	e001      	b.n	fc9e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    fc9a:	f06f 030c 	mvn.w	r3, #12
	}
}
    fc9e:	4618      	mov	r0, r3
    fca0:	371c      	adds	r7, #28
    fca2:	46bd      	mov	sp, r7
    fca4:	bd90      	pop	{r4, r7, pc}
    fca6:	bf00      	nop
    fca8:	00010c29 	.word	0x00010c29
    fcac:	00010a9d 	.word	0x00010a9d
    fcb0:	20003a24 	.word	0x20003a24
    fcb4:	20003a18 	.word	0x20003a18
    fcb8:	20003a20 	.word	0x20003a20

0000fcbc <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    fcbc:	b590      	push	{r4, r7, lr}
    fcbe:	b085      	sub	sp, #20
    fcc0:	af00      	add	r7, sp, #0
    fcc2:	4603      	mov	r3, r0
    fcc4:	6039      	str	r1, [r7, #0]
    fcc6:	71fb      	strb	r3, [r7, #7]
    fcc8:	4613      	mov	r3, r2
    fcca:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    fccc:	683b      	ldr	r3, [r7, #0]
    fcce:	799a      	ldrb	r2, [r3, #6]
    fcd0:	79db      	ldrb	r3, [r3, #7]
    fcd2:	021b      	lsls	r3, r3, #8
    fcd4:	4313      	orrs	r3, r2
    fcd6:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    fcd8:	79bb      	ldrb	r3, [r7, #6]
    fcda:	2b01      	cmp	r3, #1
    fcdc:	d101      	bne.n	fce2 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    fcde:	2300      	movs	r3, #0
    fce0:	e013      	b.n	fd0a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    fce2:	683b      	ldr	r3, [r7, #0]
    fce4:	785b      	ldrb	r3, [r3, #1]
    fce6:	2b21      	cmp	r3, #33	; 0x21
    fce8:	d10d      	bne.n	fd06 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    fcea:	89fb      	ldrh	r3, [r7, #14]
    fcec:	2b07      	cmp	r3, #7
    fcee:	d002      	beq.n	fcf6 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    fcf0:	f04f 33ff 	mov.w	r3, #4294967295
    fcf4:	e009      	b.n	fd0a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    fcf6:	89fa      	ldrh	r2, [r7, #14]
    fcf8:	79f8      	ldrb	r0, [r7, #7]
    fcfa:	2300      	movs	r3, #0
    fcfc:	4905      	ldr	r1, [pc, #20]	; (fd14 <cdcdf_acm_get_req+0x58>)
    fcfe:	4c06      	ldr	r4, [pc, #24]	; (fd18 <cdcdf_acm_get_req+0x5c>)
    fd00:	47a0      	blx	r4
    fd02:	4603      	mov	r3, r0
    fd04:	e001      	b.n	fd0a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    fd06:	f06f 030c 	mvn.w	r3, #12
	}
}
    fd0a:	4618      	mov	r0, r3
    fd0c:	3714      	adds	r7, #20
    fd0e:	46bd      	mov	sp, r7
    fd10:	bd90      	pop	{r4, r7, pc}
    fd12:	bf00      	nop
    fd14:	20003a18 	.word	0x20003a18
    fd18:	00010a9d 	.word	0x00010a9d

0000fd1c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    fd1c:	b580      	push	{r7, lr}
    fd1e:	b082      	sub	sp, #8
    fd20:	af00      	add	r7, sp, #0
    fd22:	4603      	mov	r3, r0
    fd24:	6039      	str	r1, [r7, #0]
    fd26:	71fb      	strb	r3, [r7, #7]
    fd28:	4613      	mov	r3, r2
    fd2a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    fd2c:	683b      	ldr	r3, [r7, #0]
    fd2e:	781b      	ldrb	r3, [r3, #0]
    fd30:	095b      	lsrs	r3, r3, #5
    fd32:	b2db      	uxtb	r3, r3
    fd34:	f003 0303 	and.w	r3, r3, #3
    fd38:	2b01      	cmp	r3, #1
    fd3a:	d002      	beq.n	fd42 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    fd3c:	f06f 0309 	mvn.w	r3, #9
    fd40:	e026      	b.n	fd90 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    fd42:	683b      	ldr	r3, [r7, #0]
    fd44:	889b      	ldrh	r3, [r3, #4]
    fd46:	b29a      	uxth	r2, r3
    fd48:	4b13      	ldr	r3, [pc, #76]	; (fd98 <cdcdf_acm_req+0x7c>)
    fd4a:	781b      	ldrb	r3, [r3, #0]
    fd4c:	b29b      	uxth	r3, r3
    fd4e:	429a      	cmp	r2, r3
    fd50:	d007      	beq.n	fd62 <cdcdf_acm_req+0x46>
    fd52:	683b      	ldr	r3, [r7, #0]
    fd54:	889b      	ldrh	r3, [r3, #4]
    fd56:	b29a      	uxth	r2, r3
    fd58:	4b0f      	ldr	r3, [pc, #60]	; (fd98 <cdcdf_acm_req+0x7c>)
    fd5a:	785b      	ldrb	r3, [r3, #1]
    fd5c:	b29b      	uxth	r3, r3
    fd5e:	429a      	cmp	r2, r3
    fd60:	d114      	bne.n	fd8c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    fd62:	683b      	ldr	r3, [r7, #0]
    fd64:	781b      	ldrb	r3, [r3, #0]
    fd66:	b25b      	sxtb	r3, r3
    fd68:	2b00      	cmp	r3, #0
    fd6a:	da07      	bge.n	fd7c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    fd6c:	79ba      	ldrb	r2, [r7, #6]
    fd6e:	79fb      	ldrb	r3, [r7, #7]
    fd70:	6839      	ldr	r1, [r7, #0]
    fd72:	4618      	mov	r0, r3
    fd74:	4b09      	ldr	r3, [pc, #36]	; (fd9c <cdcdf_acm_req+0x80>)
    fd76:	4798      	blx	r3
    fd78:	4603      	mov	r3, r0
    fd7a:	e009      	b.n	fd90 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    fd7c:	79ba      	ldrb	r2, [r7, #6]
    fd7e:	79fb      	ldrb	r3, [r7, #7]
    fd80:	6839      	ldr	r1, [r7, #0]
    fd82:	4618      	mov	r0, r3
    fd84:	4b06      	ldr	r3, [pc, #24]	; (fda0 <cdcdf_acm_req+0x84>)
    fd86:	4798      	blx	r3
    fd88:	4603      	mov	r3, r0
    fd8a:	e001      	b.n	fd90 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    fd8c:	f06f 0309 	mvn.w	r3, #9
	}
}
    fd90:	4618      	mov	r0, r3
    fd92:	3708      	adds	r7, #8
    fd94:	46bd      	mov	sp, r7
    fd96:	bd80      	pop	{r7, pc}
    fd98:	20003a10 	.word	0x20003a10
    fd9c:	0000fcbd 	.word	0x0000fcbd
    fda0:	0000fbdd 	.word	0x0000fbdd

0000fda4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    fda4:	b580      	push	{r7, lr}
    fda6:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    fda8:	4b0b      	ldr	r3, [pc, #44]	; (fdd8 <cdcdf_acm_init+0x34>)
    fdaa:	4798      	blx	r3
    fdac:	4603      	mov	r3, r0
    fdae:	2b01      	cmp	r3, #1
    fdb0:	d902      	bls.n	fdb8 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    fdb2:	f06f 0310 	mvn.w	r3, #16
    fdb6:	e00d      	b.n	fdd4 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    fdb8:	4b08      	ldr	r3, [pc, #32]	; (fddc <cdcdf_acm_init+0x38>)
    fdba:	4a09      	ldr	r2, [pc, #36]	; (fde0 <cdcdf_acm_init+0x3c>)
    fdbc:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    fdbe:	4b07      	ldr	r3, [pc, #28]	; (fddc <cdcdf_acm_init+0x38>)
    fdc0:	4a08      	ldr	r2, [pc, #32]	; (fde4 <cdcdf_acm_init+0x40>)
    fdc2:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    fdc4:	4805      	ldr	r0, [pc, #20]	; (fddc <cdcdf_acm_init+0x38>)
    fdc6:	4b08      	ldr	r3, [pc, #32]	; (fde8 <cdcdf_acm_init+0x44>)
    fdc8:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    fdca:	4908      	ldr	r1, [pc, #32]	; (fdec <cdcdf_acm_init+0x48>)
    fdcc:	2001      	movs	r0, #1
    fdce:	4b08      	ldr	r3, [pc, #32]	; (fdf0 <cdcdf_acm_init+0x4c>)
    fdd0:	4798      	blx	r3
	return ERR_NONE;
    fdd2:	2300      	movs	r3, #0
}
    fdd4:	4618      	mov	r0, r3
    fdd6:	bd80      	pop	{r7, pc}
    fdd8:	00010c41 	.word	0x00010c41
    fddc:	20003a04 	.word	0x20003a04
    fde0:	0000fb8d 	.word	0x0000fb8d
    fde4:	20003a10 	.word	0x20003a10
    fde8:	00010ba9 	.word	0x00010ba9
    fdec:	200001b0 	.word	0x200001b0
    fdf0:	00010ad9 	.word	0x00010ad9

0000fdf4 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    fdf4:	b590      	push	{r4, r7, lr}
    fdf6:	b083      	sub	sp, #12
    fdf8:	af00      	add	r7, sp, #0
    fdfa:	6078      	str	r0, [r7, #4]
    fdfc:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    fdfe:	4b0b      	ldr	r3, [pc, #44]	; (fe2c <cdcdf_acm_read+0x38>)
    fe00:	4798      	blx	r3
    fe02:	4603      	mov	r3, r0
    fe04:	f083 0301 	eor.w	r3, r3, #1
    fe08:	b2db      	uxtb	r3, r3
    fe0a:	2b00      	cmp	r3, #0
    fe0c:	d002      	beq.n	fe14 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    fe0e:	f06f 0310 	mvn.w	r3, #16
    fe12:	e007      	b.n	fe24 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    fe14:	4b06      	ldr	r3, [pc, #24]	; (fe30 <cdcdf_acm_read+0x3c>)
    fe16:	7918      	ldrb	r0, [r3, #4]
    fe18:	2300      	movs	r3, #0
    fe1a:	683a      	ldr	r2, [r7, #0]
    fe1c:	6879      	ldr	r1, [r7, #4]
    fe1e:	4c05      	ldr	r4, [pc, #20]	; (fe34 <cdcdf_acm_read+0x40>)
    fe20:	47a0      	blx	r4
    fe22:	4603      	mov	r3, r0
}
    fe24:	4618      	mov	r0, r3
    fe26:	370c      	adds	r7, #12
    fe28:	46bd      	mov	sp, r7
    fe2a:	bd90      	pop	{r4, r7, pc}
    fe2c:	0000ff19 	.word	0x0000ff19
    fe30:	20003a10 	.word	0x20003a10
    fe34:	00010a9d 	.word	0x00010a9d

0000fe38 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    fe38:	b590      	push	{r4, r7, lr}
    fe3a:	b083      	sub	sp, #12
    fe3c:	af00      	add	r7, sp, #0
    fe3e:	6078      	str	r0, [r7, #4]
    fe40:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    fe42:	4b0b      	ldr	r3, [pc, #44]	; (fe70 <cdcdf_acm_write+0x38>)
    fe44:	4798      	blx	r3
    fe46:	4603      	mov	r3, r0
    fe48:	f083 0301 	eor.w	r3, r3, #1
    fe4c:	b2db      	uxtb	r3, r3
    fe4e:	2b00      	cmp	r3, #0
    fe50:	d002      	beq.n	fe58 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    fe52:	f06f 0310 	mvn.w	r3, #16
    fe56:	e007      	b.n	fe68 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    fe58:	4b06      	ldr	r3, [pc, #24]	; (fe74 <cdcdf_acm_write+0x3c>)
    fe5a:	78d8      	ldrb	r0, [r3, #3]
    fe5c:	2301      	movs	r3, #1
    fe5e:	683a      	ldr	r2, [r7, #0]
    fe60:	6879      	ldr	r1, [r7, #4]
    fe62:	4c05      	ldr	r4, [pc, #20]	; (fe78 <cdcdf_acm_write+0x40>)
    fe64:	47a0      	blx	r4
    fe66:	4603      	mov	r3, r0
}
    fe68:	4618      	mov	r0, r3
    fe6a:	370c      	adds	r7, #12
    fe6c:	46bd      	mov	sp, r7
    fe6e:	bd90      	pop	{r4, r7, pc}
    fe70:	0000ff19 	.word	0x0000ff19
    fe74:	20003a10 	.word	0x20003a10
    fe78:	00010a9d 	.word	0x00010a9d

0000fe7c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    fe7c:	b580      	push	{r7, lr}
    fe7e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    fe80:	4b05      	ldr	r3, [pc, #20]	; (fe98 <cdcdf_acm_stop_xfer+0x1c>)
    fe82:	78db      	ldrb	r3, [r3, #3]
    fe84:	4618      	mov	r0, r3
    fe86:	4b05      	ldr	r3, [pc, #20]	; (fe9c <cdcdf_acm_stop_xfer+0x20>)
    fe88:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    fe8a:	4b03      	ldr	r3, [pc, #12]	; (fe98 <cdcdf_acm_stop_xfer+0x1c>)
    fe8c:	791b      	ldrb	r3, [r3, #4]
    fe8e:	4618      	mov	r0, r3
    fe90:	4b02      	ldr	r3, [pc, #8]	; (fe9c <cdcdf_acm_stop_xfer+0x20>)
    fe92:	4798      	blx	r3
}
    fe94:	bf00      	nop
    fe96:	bd80      	pop	{r7, pc}
    fe98:	20003a10 	.word	0x20003a10
    fe9c:	000067e9 	.word	0x000067e9

0000fea0 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    fea0:	b580      	push	{r7, lr}
    fea2:	b082      	sub	sp, #8
    fea4:	af00      	add	r7, sp, #0
    fea6:	4603      	mov	r3, r0
    fea8:	6039      	str	r1, [r7, #0]
    feaa:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    feac:	79fb      	ldrb	r3, [r7, #7]
    feae:	2b03      	cmp	r3, #3
    feb0:	d822      	bhi.n	fef8 <cdcdf_acm_register_callback+0x58>
    feb2:	a201      	add	r2, pc, #4	; (adr r2, feb8 <cdcdf_acm_register_callback+0x18>)
    feb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    feb8:	0000fec9 	.word	0x0000fec9
    febc:	0000fed9 	.word	0x0000fed9
    fec0:	0000fee9 	.word	0x0000fee9
    fec4:	0000fef1 	.word	0x0000fef1
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    fec8:	4b0f      	ldr	r3, [pc, #60]	; (ff08 <cdcdf_acm_register_callback+0x68>)
    feca:	791b      	ldrb	r3, [r3, #4]
    fecc:	683a      	ldr	r2, [r7, #0]
    fece:	2102      	movs	r1, #2
    fed0:	4618      	mov	r0, r3
    fed2:	4b0e      	ldr	r3, [pc, #56]	; (ff0c <cdcdf_acm_register_callback+0x6c>)
    fed4:	4798      	blx	r3
		break;
    fed6:	e012      	b.n	fefe <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    fed8:	4b0b      	ldr	r3, [pc, #44]	; (ff08 <cdcdf_acm_register_callback+0x68>)
    feda:	78db      	ldrb	r3, [r3, #3]
    fedc:	683a      	ldr	r2, [r7, #0]
    fede:	2102      	movs	r1, #2
    fee0:	4618      	mov	r0, r3
    fee2:	4b0a      	ldr	r3, [pc, #40]	; (ff0c <cdcdf_acm_register_callback+0x6c>)
    fee4:	4798      	blx	r3
		break;
    fee6:	e00a      	b.n	fefe <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    fee8:	4a09      	ldr	r2, [pc, #36]	; (ff10 <cdcdf_acm_register_callback+0x70>)
    feea:	683b      	ldr	r3, [r7, #0]
    feec:	6013      	str	r3, [r2, #0]
		break;
    feee:	e006      	b.n	fefe <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    fef0:	4a08      	ldr	r2, [pc, #32]	; (ff14 <cdcdf_acm_register_callback+0x74>)
    fef2:	683b      	ldr	r3, [r7, #0]
    fef4:	6013      	str	r3, [r2, #0]
		break;
    fef6:	e002      	b.n	fefe <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    fef8:	f06f 030c 	mvn.w	r3, #12
    fefc:	e000      	b.n	ff00 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    fefe:	2300      	movs	r3, #0
}
    ff00:	4618      	mov	r0, r3
    ff02:	3708      	adds	r7, #8
    ff04:	46bd      	mov	sp, r7
    ff06:	bd80      	pop	{r7, pc}
    ff08:	20003a10 	.word	0x20003a10
    ff0c:	00006915 	.word	0x00006915
    ff10:	20003a24 	.word	0x20003a24
    ff14:	20003a20 	.word	0x20003a20

0000ff18 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    ff18:	b480      	push	{r7}
    ff1a:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    ff1c:	4b03      	ldr	r3, [pc, #12]	; (ff2c <cdcdf_acm_is_enabled+0x14>)
    ff1e:	795b      	ldrb	r3, [r3, #5]
}
    ff20:	4618      	mov	r0, r3
    ff22:	46bd      	mov	sp, r7
    ff24:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff28:	4770      	bx	lr
    ff2a:	bf00      	nop
    ff2c:	20003a10 	.word	0x20003a10

0000ff30 <usb_get_u16>:
{
    ff30:	b480      	push	{r7}
    ff32:	b083      	sub	sp, #12
    ff34:	af00      	add	r7, sp, #0
    ff36:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ff38:	687b      	ldr	r3, [r7, #4]
    ff3a:	781b      	ldrb	r3, [r3, #0]
    ff3c:	b29a      	uxth	r2, r3
    ff3e:	687b      	ldr	r3, [r7, #4]
    ff40:	3301      	adds	r3, #1
    ff42:	781b      	ldrb	r3, [r3, #0]
    ff44:	b29b      	uxth	r3, r3
    ff46:	021b      	lsls	r3, r3, #8
    ff48:	b29b      	uxth	r3, r3
    ff4a:	4413      	add	r3, r2
    ff4c:	b29b      	uxth	r3, r3
}
    ff4e:	4618      	mov	r0, r3
    ff50:	370c      	adds	r7, #12
    ff52:	46bd      	mov	sp, r7
    ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff58:	4770      	bx	lr

0000ff5a <usb_desc_len>:
{
    ff5a:	b480      	push	{r7}
    ff5c:	b083      	sub	sp, #12
    ff5e:	af00      	add	r7, sp, #0
    ff60:	6078      	str	r0, [r7, #4]
	return desc[0];
    ff62:	687b      	ldr	r3, [r7, #4]
    ff64:	781b      	ldrb	r3, [r3, #0]
}
    ff66:	4618      	mov	r0, r3
    ff68:	370c      	adds	r7, #12
    ff6a:	46bd      	mov	sp, r7
    ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff70:	4770      	bx	lr
	...

0000ff74 <usb_desc_next>:
{
    ff74:	b580      	push	{r7, lr}
    ff76:	b082      	sub	sp, #8
    ff78:	af00      	add	r7, sp, #0
    ff7a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ff7c:	6878      	ldr	r0, [r7, #4]
    ff7e:	4b05      	ldr	r3, [pc, #20]	; (ff94 <usb_desc_next+0x20>)
    ff80:	4798      	blx	r3
    ff82:	4603      	mov	r3, r0
    ff84:	461a      	mov	r2, r3
    ff86:	687b      	ldr	r3, [r7, #4]
    ff88:	4413      	add	r3, r2
}
    ff8a:	4618      	mov	r0, r3
    ff8c:	3708      	adds	r7, #8
    ff8e:	46bd      	mov	sp, r7
    ff90:	bd80      	pop	{r7, pc}
    ff92:	bf00      	nop
    ff94:	0000ff5b 	.word	0x0000ff5b

0000ff98 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    ff98:	b580      	push	{r7, lr}
    ff9a:	b082      	sub	sp, #8
    ff9c:	af00      	add	r7, sp, #0
    ff9e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    ffa0:	687b      	ldr	r3, [r7, #4]
    ffa2:	3302      	adds	r3, #2
    ffa4:	4618      	mov	r0, r3
    ffa6:	4b03      	ldr	r3, [pc, #12]	; (ffb4 <usb_cfg_desc_total_len+0x1c>)
    ffa8:	4798      	blx	r3
    ffaa:	4603      	mov	r3, r0
}
    ffac:	4618      	mov	r0, r3
    ffae:	3708      	adds	r7, #8
    ffb0:	46bd      	mov	sp, r7
    ffb2:	bd80      	pop	{r7, pc}
    ffb4:	0000ff31 	.word	0x0000ff31

0000ffb8 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    ffb8:	b590      	push	{r4, r7, lr}
    ffba:	b085      	sub	sp, #20
    ffbc:	af00      	add	r7, sp, #0
    ffbe:	4603      	mov	r3, r0
    ffc0:	6039      	str	r1, [r7, #0]
    ffc2:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    ffc4:	2300      	movs	r3, #0
    ffc6:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    ffc8:	683b      	ldr	r3, [r7, #0]
    ffca:	799a      	ldrb	r2, [r3, #6]
    ffcc:	79db      	ldrb	r3, [r3, #7]
    ffce:	021b      	lsls	r3, r3, #8
    ffd0:	4313      	orrs	r3, r2
    ffd2:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    ffd4:	897b      	ldrh	r3, [r7, #10]
    ffd6:	2b12      	cmp	r3, #18
    ffd8:	d901      	bls.n	ffde <usbdc_get_dev_desc+0x26>
		length = 0x12;
    ffda:	2312      	movs	r3, #18
    ffdc:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    ffde:	68fb      	ldr	r3, [r7, #12]
    ffe0:	2b00      	cmp	r3, #0
    ffe2:	d10a      	bne.n	fffa <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    ffe4:	4b0f      	ldr	r3, [pc, #60]	; (10024 <STACK_SIZE+0x24>)
    ffe6:	681b      	ldr	r3, [r3, #0]
    ffe8:	6818      	ldr	r0, [r3, #0]
    ffea:	4b0e      	ldr	r3, [pc, #56]	; (10024 <STACK_SIZE+0x24>)
    ffec:	681b      	ldr	r3, [r3, #0]
    ffee:	685b      	ldr	r3, [r3, #4]
    fff0:	2201      	movs	r2, #1
    fff2:	4619      	mov	r1, r3
    fff4:	4b0c      	ldr	r3, [pc, #48]	; (10028 <STACK_SIZE+0x28>)
    fff6:	4798      	blx	r3
    fff8:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    fffa:	68fb      	ldr	r3, [r7, #12]
    fffc:	2b00      	cmp	r3, #0
    fffe:	d101      	bne.n	10004 <STACK_SIZE+0x4>
		return false;
   10000:	2300      	movs	r3, #0
   10002:	e00b      	b.n	1001c <STACK_SIZE+0x1c>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   10004:	897a      	ldrh	r2, [r7, #10]
   10006:	79f8      	ldrb	r0, [r7, #7]
   10008:	2300      	movs	r3, #0
   1000a:	68f9      	ldr	r1, [r7, #12]
   1000c:	4c07      	ldr	r4, [pc, #28]	; (1002c <STACK_SIZE+0x2c>)
   1000e:	47a0      	blx	r4
   10010:	4603      	mov	r3, r0
   10012:	2b00      	cmp	r3, #0
   10014:	d001      	beq.n	1001a <STACK_SIZE+0x1a>
		return false;
   10016:	2300      	movs	r3, #0
   10018:	e000      	b.n	1001c <STACK_SIZE+0x1c>
	}
	return true;
   1001a:	2301      	movs	r3, #1
}
   1001c:	4618      	mov	r0, r3
   1001e:	3714      	adds	r7, #20
   10020:	46bd      	mov	sp, r7
   10022:	bd90      	pop	{r4, r7, pc}
   10024:	20003a28 	.word	0x20003a28
   10028:	00010d2d 	.word	0x00010d2d
   1002c:	00010a9d 	.word	0x00010a9d

00010030 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
   10030:	b590      	push	{r4, r7, lr}
   10032:	b087      	sub	sp, #28
   10034:	af00      	add	r7, sp, #0
   10036:	4603      	mov	r3, r0
   10038:	6039      	str	r1, [r7, #0]
   1003a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
   1003c:	2300      	movs	r3, #0
   1003e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
   10040:	683b      	ldr	r3, [r7, #0]
   10042:	799a      	ldrb	r2, [r3, #6]
   10044:	79db      	ldrb	r3, [r3, #7]
   10046:	021b      	lsls	r3, r3, #8
   10048:	4313      	orrs	r3, r2
   1004a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
   1004c:	683b      	ldr	r3, [r7, #0]
   1004e:	885b      	ldrh	r3, [r3, #2]
   10050:	b29b      	uxth	r3, r3
   10052:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   10054:	8a7a      	ldrh	r2, [r7, #18]
   10056:	4b1e      	ldr	r3, [pc, #120]	; (100d0 <usbdc_get_cfg_desc+0xa0>)
   10058:	7f1b      	ldrb	r3, [r3, #28]
   1005a:	3b01      	subs	r3, #1
   1005c:	4013      	ands	r3, r2
   1005e:	2b00      	cmp	r3, #0
   10060:	bf0c      	ite	eq
   10062:	2301      	moveq	r3, #1
   10064:	2300      	movne	r3, #0
   10066:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   10068:	697b      	ldr	r3, [r7, #20]
   1006a:	2b00      	cmp	r3, #0
   1006c:	d10c      	bne.n	10088 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   1006e:	4b18      	ldr	r3, [pc, #96]	; (100d0 <usbdc_get_cfg_desc+0xa0>)
   10070:	681b      	ldr	r3, [r3, #0]
   10072:	6818      	ldr	r0, [r3, #0]
   10074:	4b16      	ldr	r3, [pc, #88]	; (100d0 <usbdc_get_cfg_desc+0xa0>)
   10076:	681b      	ldr	r3, [r3, #0]
   10078:	6859      	ldr	r1, [r3, #4]
   1007a:	7c3b      	ldrb	r3, [r7, #16]
   1007c:	3301      	adds	r3, #1
   1007e:	b2db      	uxtb	r3, r3
   10080:	461a      	mov	r2, r3
   10082:	4b14      	ldr	r3, [pc, #80]	; (100d4 <usbdc_get_cfg_desc+0xa4>)
   10084:	4798      	blx	r3
   10086:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
   10088:	697b      	ldr	r3, [r7, #20]
   1008a:	2b00      	cmp	r3, #0
   1008c:	d101      	bne.n	10092 <usbdc_get_cfg_desc+0x62>
		return false;
   1008e:	2300      	movs	r3, #0
   10090:	e019      	b.n	100c6 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
   10092:	6978      	ldr	r0, [r7, #20]
   10094:	4b10      	ldr	r3, [pc, #64]	; (100d8 <usbdc_get_cfg_desc+0xa8>)
   10096:	4798      	blx	r3
   10098:	4603      	mov	r3, r0
   1009a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
   1009c:	8a7a      	ldrh	r2, [r7, #18]
   1009e:	89fb      	ldrh	r3, [r7, #14]
   100a0:	429a      	cmp	r2, r3
   100a2:	d802      	bhi.n	100aa <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
   100a4:	2300      	movs	r3, #0
   100a6:	747b      	strb	r3, [r7, #17]
   100a8:	e001      	b.n	100ae <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
   100aa:	89fb      	ldrh	r3, [r7, #14]
   100ac:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
   100ae:	8a7a      	ldrh	r2, [r7, #18]
   100b0:	7c7b      	ldrb	r3, [r7, #17]
   100b2:	79f8      	ldrb	r0, [r7, #7]
   100b4:	6979      	ldr	r1, [r7, #20]
   100b6:	4c09      	ldr	r4, [pc, #36]	; (100dc <usbdc_get_cfg_desc+0xac>)
   100b8:	47a0      	blx	r4
   100ba:	4603      	mov	r3, r0
   100bc:	2b00      	cmp	r3, #0
   100be:	d001      	beq.n	100c4 <usbdc_get_cfg_desc+0x94>
		return false;
   100c0:	2300      	movs	r3, #0
   100c2:	e000      	b.n	100c6 <usbdc_get_cfg_desc+0x96>
	}
	return true;
   100c4:	2301      	movs	r3, #1
}
   100c6:	4618      	mov	r0, r3
   100c8:	371c      	adds	r7, #28
   100ca:	46bd      	mov	sp, r7
   100cc:	bd90      	pop	{r4, r7, pc}
   100ce:	bf00      	nop
   100d0:	20003a28 	.word	0x20003a28
   100d4:	00010ded 	.word	0x00010ded
   100d8:	0000ff99 	.word	0x0000ff99
   100dc:	00010a9d 	.word	0x00010a9d

000100e0 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
   100e0:	b590      	push	{r4, r7, lr}
   100e2:	b085      	sub	sp, #20
   100e4:	af00      	add	r7, sp, #0
   100e6:	4603      	mov	r3, r0
   100e8:	6039      	str	r1, [r7, #0]
   100ea:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
   100ec:	683b      	ldr	r3, [r7, #0]
   100ee:	799a      	ldrb	r2, [r3, #6]
   100f0:	79db      	ldrb	r3, [r3, #7]
   100f2:	021b      	lsls	r3, r3, #8
   100f4:	4313      	orrs	r3, r2
   100f6:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
   100f8:	683b      	ldr	r3, [r7, #0]
   100fa:	885b      	ldrh	r3, [r3, #2]
   100fc:	b29b      	uxth	r3, r3
   100fe:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   10100:	89fa      	ldrh	r2, [r7, #14]
   10102:	4b1a      	ldr	r3, [pc, #104]	; (1016c <usbdc_get_str_desc+0x8c>)
   10104:	7f1b      	ldrb	r3, [r3, #28]
   10106:	3b01      	subs	r3, #1
   10108:	4013      	ands	r3, r2
   1010a:	2b00      	cmp	r3, #0
   1010c:	bf0c      	ite	eq
   1010e:	2301      	moveq	r3, #1
   10110:	2300      	movne	r3, #0
   10112:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   10114:	4b15      	ldr	r3, [pc, #84]	; (1016c <usbdc_get_str_desc+0x8c>)
   10116:	681b      	ldr	r3, [r3, #0]
   10118:	6818      	ldr	r0, [r3, #0]
   1011a:	4b14      	ldr	r3, [pc, #80]	; (1016c <usbdc_get_str_desc+0x8c>)
   1011c:	681b      	ldr	r3, [r3, #0]
   1011e:	685b      	ldr	r3, [r3, #4]
   10120:	7b3a      	ldrb	r2, [r7, #12]
   10122:	4619      	mov	r1, r3
   10124:	4b12      	ldr	r3, [pc, #72]	; (10170 <usbdc_get_str_desc+0x90>)
   10126:	4798      	blx	r3
   10128:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
   1012a:	68bb      	ldr	r3, [r7, #8]
   1012c:	2b00      	cmp	r3, #0
   1012e:	d101      	bne.n	10134 <usbdc_get_str_desc+0x54>
		return false;
   10130:	2300      	movs	r3, #0
   10132:	e017      	b.n	10164 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
   10134:	68bb      	ldr	r3, [r7, #8]
   10136:	781b      	ldrb	r3, [r3, #0]
   10138:	b29b      	uxth	r3, r3
   1013a:	89fa      	ldrh	r2, [r7, #14]
   1013c:	429a      	cmp	r2, r3
   1013e:	d802      	bhi.n	10146 <usbdc_get_str_desc+0x66>
		need_zlp = false;
   10140:	2300      	movs	r3, #0
   10142:	737b      	strb	r3, [r7, #13]
   10144:	e002      	b.n	1014c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
   10146:	68bb      	ldr	r3, [r7, #8]
   10148:	781b      	ldrb	r3, [r3, #0]
   1014a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   1014c:	89fa      	ldrh	r2, [r7, #14]
   1014e:	7b7b      	ldrb	r3, [r7, #13]
   10150:	79f8      	ldrb	r0, [r7, #7]
   10152:	68b9      	ldr	r1, [r7, #8]
   10154:	4c07      	ldr	r4, [pc, #28]	; (10174 <usbdc_get_str_desc+0x94>)
   10156:	47a0      	blx	r4
   10158:	4603      	mov	r3, r0
   1015a:	2b00      	cmp	r3, #0
   1015c:	d001      	beq.n	10162 <usbdc_get_str_desc+0x82>
		return false;
   1015e:	2300      	movs	r3, #0
   10160:	e000      	b.n	10164 <usbdc_get_str_desc+0x84>
	}
	return true;
   10162:	2301      	movs	r3, #1
}
   10164:	4618      	mov	r0, r3
   10166:	3714      	adds	r7, #20
   10168:	46bd      	mov	sp, r7
   1016a:	bd90      	pop	{r4, r7, pc}
   1016c:	20003a28 	.word	0x20003a28
   10170:	00010e65 	.word	0x00010e65
   10174:	00010a9d 	.word	0x00010a9d

00010178 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
   10178:	b580      	push	{r7, lr}
   1017a:	b084      	sub	sp, #16
   1017c:	af00      	add	r7, sp, #0
   1017e:	4603      	mov	r3, r0
   10180:	6039      	str	r1, [r7, #0]
   10182:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
   10184:	683b      	ldr	r3, [r7, #0]
   10186:	885b      	ldrh	r3, [r3, #2]
   10188:	b29b      	uxth	r3, r3
   1018a:	0a1b      	lsrs	r3, r3, #8
   1018c:	b29b      	uxth	r3, r3
   1018e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
   10190:	7bfb      	ldrb	r3, [r7, #15]
   10192:	2b02      	cmp	r3, #2
   10194:	d00d      	beq.n	101b2 <usbdc_get_desc_req+0x3a>
   10196:	2b03      	cmp	r3, #3
   10198:	d012      	beq.n	101c0 <usbdc_get_desc_req+0x48>
   1019a:	2b01      	cmp	r3, #1
   1019c:	d002      	beq.n	101a4 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
   1019e:	bf00      	nop
	}
	return false;
   101a0:	2300      	movs	r3, #0
   101a2:	e013      	b.n	101cc <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
   101a4:	79fb      	ldrb	r3, [r7, #7]
   101a6:	6839      	ldr	r1, [r7, #0]
   101a8:	4618      	mov	r0, r3
   101aa:	4b0a      	ldr	r3, [pc, #40]	; (101d4 <usbdc_get_desc_req+0x5c>)
   101ac:	4798      	blx	r3
   101ae:	4603      	mov	r3, r0
   101b0:	e00c      	b.n	101cc <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
   101b2:	79fb      	ldrb	r3, [r7, #7]
   101b4:	6839      	ldr	r1, [r7, #0]
   101b6:	4618      	mov	r0, r3
   101b8:	4b07      	ldr	r3, [pc, #28]	; (101d8 <usbdc_get_desc_req+0x60>)
   101ba:	4798      	blx	r3
   101bc:	4603      	mov	r3, r0
   101be:	e005      	b.n	101cc <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
   101c0:	79fb      	ldrb	r3, [r7, #7]
   101c2:	6839      	ldr	r1, [r7, #0]
   101c4:	4618      	mov	r0, r3
   101c6:	4b05      	ldr	r3, [pc, #20]	; (101dc <usbdc_get_desc_req+0x64>)
   101c8:	4798      	blx	r3
   101ca:	4603      	mov	r3, r0
}
   101cc:	4618      	mov	r0, r3
   101ce:	3710      	adds	r7, #16
   101d0:	46bd      	mov	sp, r7
   101d2:	bd80      	pop	{r7, pc}
   101d4:	0000ffb9 	.word	0x0000ffb9
   101d8:	00010031 	.word	0x00010031
   101dc:	000100e1 	.word	0x000100e1

000101e0 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
   101e0:	b590      	push	{r4, r7, lr}
   101e2:	b085      	sub	sp, #20
   101e4:	af00      	add	r7, sp, #0
   101e6:	4603      	mov	r3, r0
   101e8:	6039      	str	r1, [r7, #0]
   101ea:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   101ec:	683b      	ldr	r3, [r7, #0]
   101ee:	781b      	ldrb	r3, [r3, #0]
   101f0:	f003 031f 	and.w	r3, r3, #31
   101f4:	2b00      	cmp	r3, #0
   101f6:	db1b      	blt.n	10230 <usbdc_get_status_req+0x50>
   101f8:	2b01      	cmp	r3, #1
   101fa:	dd02      	ble.n	10202 <usbdc_get_status_req+0x22>
   101fc:	2b02      	cmp	r3, #2
   101fe:	d003      	beq.n	10208 <usbdc_get_status_req+0x28>
   10200:	e016      	b.n	10230 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
   10202:	2300      	movs	r3, #0
   10204:	60fb      	str	r3, [r7, #12]
		break;
   10206:	e015      	b.n	10234 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   10208:	683b      	ldr	r3, [r7, #0]
   1020a:	889b      	ldrh	r3, [r3, #4]
   1020c:	b29b      	uxth	r3, r3
   1020e:	b2db      	uxtb	r3, r3
   10210:	2102      	movs	r1, #2
   10212:	4618      	mov	r0, r3
   10214:	4b0f      	ldr	r3, [pc, #60]	; (10254 <usbdc_get_status_req+0x74>)
   10216:	4798      	blx	r3
   10218:	4603      	mov	r3, r0
   1021a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
   1021c:	68fb      	ldr	r3, [r7, #12]
   1021e:	2b00      	cmp	r3, #0
   10220:	da01      	bge.n	10226 <usbdc_get_status_req+0x46>
			return false;
   10222:	2300      	movs	r3, #0
   10224:	e012      	b.n	1024c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
   10226:	68fb      	ldr	r3, [r7, #12]
   10228:	f003 0301 	and.w	r3, r3, #1
   1022c:	60fb      	str	r3, [r7, #12]
		break;
   1022e:	e001      	b.n	10234 <usbdc_get_status_req+0x54>
	default:
		return false;
   10230:	2300      	movs	r3, #0
   10232:	e00b      	b.n	1024c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
   10234:	4b08      	ldr	r3, [pc, #32]	; (10258 <usbdc_get_status_req+0x78>)
   10236:	695b      	ldr	r3, [r3, #20]
   10238:	89ba      	ldrh	r2, [r7, #12]
   1023a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   1023c:	4b06      	ldr	r3, [pc, #24]	; (10258 <usbdc_get_status_req+0x78>)
   1023e:	6959      	ldr	r1, [r3, #20]
   10240:	79f8      	ldrb	r0, [r7, #7]
   10242:	2300      	movs	r3, #0
   10244:	2202      	movs	r2, #2
   10246:	4c05      	ldr	r4, [pc, #20]	; (1025c <usbdc_get_status_req+0x7c>)
   10248:	47a0      	blx	r4
	return true;
   1024a:	2301      	movs	r3, #1
}
   1024c:	4618      	mov	r0, r3
   1024e:	3714      	adds	r7, #20
   10250:	46bd      	mov	sp, r7
   10252:	bd90      	pop	{r4, r7, pc}
   10254:	000068c1 	.word	0x000068c1
   10258:	20003a28 	.word	0x20003a28
   1025c:	00010a9d 	.word	0x00010a9d

00010260 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
   10260:	b590      	push	{r4, r7, lr}
   10262:	b085      	sub	sp, #20
   10264:	af00      	add	r7, sp, #0
   10266:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   10268:	4b1f      	ldr	r3, [pc, #124]	; (102e8 <usbdc_get_interface+0x88>)
   1026a:	691b      	ldr	r3, [r3, #16]
   1026c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   1026e:	4b1e      	ldr	r3, [pc, #120]	; (102e8 <usbdc_get_interface+0x88>)
   10270:	7f5b      	ldrb	r3, [r3, #29]
   10272:	461a      	mov	r2, r3
   10274:	687b      	ldr	r3, [r7, #4]
   10276:	889b      	ldrh	r3, [r3, #4]
   10278:	b29b      	uxth	r3, r3
   1027a:	fa42 f303 	asr.w	r3, r2, r3
   1027e:	f003 0301 	and.w	r3, r3, #1
   10282:	2b00      	cmp	r3, #0
   10284:	d128      	bne.n	102d8 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
   10286:	4b18      	ldr	r3, [pc, #96]	; (102e8 <usbdc_get_interface+0x88>)
   10288:	695b      	ldr	r3, [r3, #20]
   1028a:	2200      	movs	r2, #0
   1028c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   1028e:	4b16      	ldr	r3, [pc, #88]	; (102e8 <usbdc_get_interface+0x88>)
   10290:	6959      	ldr	r1, [r3, #20]
   10292:	2300      	movs	r3, #0
   10294:	2201      	movs	r2, #1
   10296:	2000      	movs	r0, #0
   10298:	4c14      	ldr	r4, [pc, #80]	; (102ec <usbdc_get_interface+0x8c>)
   1029a:	47a0      	blx	r4
		return true;
   1029c:	2301      	movs	r3, #1
   1029e:	e01f      	b.n	102e0 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   102a0:	68fb      	ldr	r3, [r7, #12]
   102a2:	685b      	ldr	r3, [r3, #4]
   102a4:	687a      	ldr	r2, [r7, #4]
   102a6:	2102      	movs	r1, #2
   102a8:	68f8      	ldr	r0, [r7, #12]
   102aa:	4798      	blx	r3
   102ac:	60b8      	str	r0, [r7, #8]
   102ae:	68bb      	ldr	r3, [r7, #8]
   102b0:	2b00      	cmp	r3, #0
   102b2:	da03      	bge.n	102bc <usbdc_get_interface+0x5c>
			func = func->next;
   102b4:	68fb      	ldr	r3, [r7, #12]
   102b6:	681b      	ldr	r3, [r3, #0]
   102b8:	60fb      	str	r3, [r7, #12]
   102ba:	e00d      	b.n	102d8 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   102bc:	4b0a      	ldr	r3, [pc, #40]	; (102e8 <usbdc_get_interface+0x88>)
   102be:	695b      	ldr	r3, [r3, #20]
   102c0:	68ba      	ldr	r2, [r7, #8]
   102c2:	b2d2      	uxtb	r2, r2
   102c4:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   102c6:	4b08      	ldr	r3, [pc, #32]	; (102e8 <usbdc_get_interface+0x88>)
   102c8:	6959      	ldr	r1, [r3, #20]
   102ca:	2300      	movs	r3, #0
   102cc:	2201      	movs	r2, #1
   102ce:	2000      	movs	r0, #0
   102d0:	4c06      	ldr	r4, [pc, #24]	; (102ec <usbdc_get_interface+0x8c>)
   102d2:	47a0      	blx	r4
			return true;
   102d4:	2301      	movs	r3, #1
   102d6:	e003      	b.n	102e0 <usbdc_get_interface+0x80>
	while (NULL != func) {
   102d8:	68fb      	ldr	r3, [r7, #12]
   102da:	2b00      	cmp	r3, #0
   102dc:	d1e0      	bne.n	102a0 <usbdc_get_interface+0x40>
		}
	}
	return false;
   102de:	2300      	movs	r3, #0
}
   102e0:	4618      	mov	r0, r3
   102e2:	3714      	adds	r7, #20
   102e4:	46bd      	mov	sp, r7
   102e6:	bd90      	pop	{r4, r7, pc}
   102e8:	20003a28 	.word	0x20003a28
   102ec:	00010a9d 	.word	0x00010a9d

000102f0 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
   102f0:	b590      	push	{r4, r7, lr}
   102f2:	b083      	sub	sp, #12
   102f4:	af00      	add	r7, sp, #0
   102f6:	4603      	mov	r3, r0
   102f8:	6039      	str	r1, [r7, #0]
   102fa:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   102fc:	683b      	ldr	r3, [r7, #0]
   102fe:	785b      	ldrb	r3, [r3, #1]
   10300:	2b0a      	cmp	r3, #10
   10302:	d83a      	bhi.n	1037a <usbdc_get_req+0x8a>
   10304:	a201      	add	r2, pc, #4	; (adr r2, 1030c <usbdc_get_req+0x1c>)
   10306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1030a:	bf00      	nop
   1030c:	00010363 	.word	0x00010363
   10310:	0001037b 	.word	0x0001037b
   10314:	0001037b 	.word	0x0001037b
   10318:	0001037b 	.word	0x0001037b
   1031c:	0001037b 	.word	0x0001037b
   10320:	0001037b 	.word	0x0001037b
   10324:	00010339 	.word	0x00010339
   10328:	0001037b 	.word	0x0001037b
   1032c:	00010347 	.word	0x00010347
   10330:	0001037b 	.word	0x0001037b
   10334:	00010371 	.word	0x00010371
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
   10338:	79fb      	ldrb	r3, [r7, #7]
   1033a:	6839      	ldr	r1, [r7, #0]
   1033c:	4618      	mov	r0, r3
   1033e:	4b11      	ldr	r3, [pc, #68]	; (10384 <usbdc_get_req+0x94>)
   10340:	4798      	blx	r3
   10342:	4603      	mov	r3, r0
   10344:	e01a      	b.n	1037c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   10346:	4b10      	ldr	r3, [pc, #64]	; (10388 <usbdc_get_req+0x98>)
   10348:	695b      	ldr	r3, [r3, #20]
   1034a:	4a0f      	ldr	r2, [pc, #60]	; (10388 <usbdc_get_req+0x98>)
   1034c:	7ed2      	ldrb	r2, [r2, #27]
   1034e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   10350:	4b0d      	ldr	r3, [pc, #52]	; (10388 <usbdc_get_req+0x98>)
   10352:	6959      	ldr	r1, [r3, #20]
   10354:	79f8      	ldrb	r0, [r7, #7]
   10356:	2300      	movs	r3, #0
   10358:	2201      	movs	r2, #1
   1035a:	4c0c      	ldr	r4, [pc, #48]	; (1038c <usbdc_get_req+0x9c>)
   1035c:	47a0      	blx	r4
		return true;
   1035e:	2301      	movs	r3, #1
   10360:	e00c      	b.n	1037c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
   10362:	79fb      	ldrb	r3, [r7, #7]
   10364:	6839      	ldr	r1, [r7, #0]
   10366:	4618      	mov	r0, r3
   10368:	4b09      	ldr	r3, [pc, #36]	; (10390 <usbdc_get_req+0xa0>)
   1036a:	4798      	blx	r3
   1036c:	4603      	mov	r3, r0
   1036e:	e005      	b.n	1037c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
   10370:	6838      	ldr	r0, [r7, #0]
   10372:	4b08      	ldr	r3, [pc, #32]	; (10394 <usbdc_get_req+0xa4>)
   10374:	4798      	blx	r3
   10376:	4603      	mov	r3, r0
   10378:	e000      	b.n	1037c <usbdc_get_req+0x8c>
	default:
		return false;
   1037a:	2300      	movs	r3, #0
	}
}
   1037c:	4618      	mov	r0, r3
   1037e:	370c      	adds	r7, #12
   10380:	46bd      	mov	sp, r7
   10382:	bd90      	pop	{r4, r7, pc}
   10384:	00010179 	.word	0x00010179
   10388:	20003a28 	.word	0x20003a28
   1038c:	00010a9d 	.word	0x00010a9d
   10390:	000101e1 	.word	0x000101e1
   10394:	00010261 	.word	0x00010261

00010398 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   10398:	b590      	push	{r4, r7, lr}
   1039a:	b083      	sub	sp, #12
   1039c:	af00      	add	r7, sp, #0
   1039e:	4603      	mov	r3, r0
   103a0:	6039      	str	r1, [r7, #0]
   103a2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   103a4:	683b      	ldr	r3, [r7, #0]
   103a6:	781b      	ldrb	r3, [r3, #0]
   103a8:	f003 031f 	and.w	r3, r3, #31
   103ac:	2b02      	cmp	r3, #2
   103ae:	d116      	bne.n	103de <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   103b0:	683b      	ldr	r3, [r7, #0]
   103b2:	88db      	ldrh	r3, [r3, #6]
   103b4:	b29b      	uxth	r3, r3
   103b6:	2b00      	cmp	r3, #0
   103b8:	d001      	beq.n	103be <usbdc_clear_ftr_req+0x26>
			return false;
   103ba:	2300      	movs	r3, #0
   103bc:	e010      	b.n	103e0 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   103be:	683b      	ldr	r3, [r7, #0]
   103c0:	889b      	ldrh	r3, [r3, #4]
   103c2:	b29b      	uxth	r3, r3
   103c4:	b2db      	uxtb	r3, r3
   103c6:	2100      	movs	r1, #0
   103c8:	4618      	mov	r0, r3
   103ca:	4b07      	ldr	r3, [pc, #28]	; (103e8 <usbdc_clear_ftr_req+0x50>)
   103cc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   103ce:	79f8      	ldrb	r0, [r7, #7]
   103d0:	2301      	movs	r3, #1
   103d2:	2200      	movs	r2, #0
   103d4:	2100      	movs	r1, #0
   103d6:	4c05      	ldr	r4, [pc, #20]	; (103ec <usbdc_clear_ftr_req+0x54>)
   103d8:	47a0      	blx	r4
		return true;
   103da:	2301      	movs	r3, #1
   103dc:	e000      	b.n	103e0 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
   103de:	2300      	movs	r3, #0
	}
}
   103e0:	4618      	mov	r0, r3
   103e2:	370c      	adds	r7, #12
   103e4:	46bd      	mov	sp, r7
   103e6:	bd90      	pop	{r4, r7, pc}
   103e8:	000068c1 	.word	0x000068c1
   103ec:	00010a9d 	.word	0x00010a9d

000103f0 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   103f0:	b590      	push	{r4, r7, lr}
   103f2:	b083      	sub	sp, #12
   103f4:	af00      	add	r7, sp, #0
   103f6:	4603      	mov	r3, r0
   103f8:	6039      	str	r1, [r7, #0]
   103fa:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   103fc:	683b      	ldr	r3, [r7, #0]
   103fe:	781b      	ldrb	r3, [r3, #0]
   10400:	f003 031f 	and.w	r3, r3, #31
   10404:	2b02      	cmp	r3, #2
   10406:	d116      	bne.n	10436 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   10408:	683b      	ldr	r3, [r7, #0]
   1040a:	88db      	ldrh	r3, [r3, #6]
   1040c:	b29b      	uxth	r3, r3
   1040e:	2b00      	cmp	r3, #0
   10410:	d001      	beq.n	10416 <usbdc_set_ftr_req+0x26>
			return false;
   10412:	2300      	movs	r3, #0
   10414:	e010      	b.n	10438 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   10416:	683b      	ldr	r3, [r7, #0]
   10418:	889b      	ldrh	r3, [r3, #4]
   1041a:	b29b      	uxth	r3, r3
   1041c:	b2db      	uxtb	r3, r3
   1041e:	2101      	movs	r1, #1
   10420:	4618      	mov	r0, r3
   10422:	4b07      	ldr	r3, [pc, #28]	; (10440 <usbdc_set_ftr_req+0x50>)
   10424:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   10426:	79f8      	ldrb	r0, [r7, #7]
   10428:	2301      	movs	r3, #1
   1042a:	2200      	movs	r2, #0
   1042c:	2100      	movs	r1, #0
   1042e:	4c05      	ldr	r4, [pc, #20]	; (10444 <usbdc_set_ftr_req+0x54>)
   10430:	47a0      	blx	r4
		return true;
   10432:	2301      	movs	r3, #1
   10434:	e000      	b.n	10438 <usbdc_set_ftr_req+0x48>
	default:
		return false;
   10436:	2300      	movs	r3, #0
	}
}
   10438:	4618      	mov	r0, r3
   1043a:	370c      	adds	r7, #12
   1043c:	46bd      	mov	sp, r7
   1043e:	bd90      	pop	{r4, r7, pc}
   10440:	000068c1 	.word	0x000068c1
   10444:	00010a9d 	.word	0x00010a9d

00010448 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
   10448:	b580      	push	{r7, lr}
   1044a:	b082      	sub	sp, #8
   1044c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   1044e:	4b0a      	ldr	r3, [pc, #40]	; (10478 <usbdc_unconfig+0x30>)
   10450:	691b      	ldr	r3, [r3, #16]
   10452:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   10454:	e008      	b.n	10468 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
   10456:	687b      	ldr	r3, [r7, #4]
   10458:	685b      	ldr	r3, [r3, #4]
   1045a:	2200      	movs	r2, #0
   1045c:	2101      	movs	r1, #1
   1045e:	6878      	ldr	r0, [r7, #4]
   10460:	4798      	blx	r3
		func = func->next;
   10462:	687b      	ldr	r3, [r7, #4]
   10464:	681b      	ldr	r3, [r3, #0]
   10466:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   10468:	687b      	ldr	r3, [r7, #4]
   1046a:	2b00      	cmp	r3, #0
   1046c:	d1f3      	bne.n	10456 <usbdc_unconfig+0xe>
	}
}
   1046e:	bf00      	nop
   10470:	3708      	adds	r7, #8
   10472:	46bd      	mov	sp, r7
   10474:	bd80      	pop	{r7, pc}
   10476:	bf00      	nop
   10478:	20003a28 	.word	0x20003a28

0001047c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
   1047c:	b580      	push	{r7, lr}
   1047e:	b088      	sub	sp, #32
   10480:	af00      	add	r7, sp, #0
   10482:	4603      	mov	r3, r0
   10484:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
   10486:	2300      	movs	r3, #0
   10488:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
   1048a:	23ff      	movs	r3, #255	; 0xff
   1048c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
   1048e:	79fb      	ldrb	r3, [r7, #7]
   10490:	2b00      	cmp	r3, #0
   10492:	d103      	bne.n	1049c <usbdc_set_config+0x20>
		usbdc_unconfig();
   10494:	4b2e      	ldr	r3, [pc, #184]	; (10550 <usbdc_set_config+0xd4>)
   10496:	4798      	blx	r3
		return true;
   10498:	2301      	movs	r3, #1
   1049a:	e055      	b.n	10548 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   1049c:	69bb      	ldr	r3, [r7, #24]
   1049e:	2b00      	cmp	r3, #0
   104a0:	d10a      	bne.n	104b8 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   104a2:	4b2c      	ldr	r3, [pc, #176]	; (10554 <usbdc_set_config+0xd8>)
   104a4:	681b      	ldr	r3, [r3, #0]
   104a6:	6818      	ldr	r0, [r3, #0]
   104a8:	4b2a      	ldr	r3, [pc, #168]	; (10554 <usbdc_set_config+0xd8>)
   104aa:	681b      	ldr	r3, [r3, #0]
   104ac:	685b      	ldr	r3, [r3, #4]
   104ae:	79fa      	ldrb	r2, [r7, #7]
   104b0:	4619      	mov	r1, r3
   104b2:	4b29      	ldr	r3, [pc, #164]	; (10558 <usbdc_set_config+0xdc>)
   104b4:	4798      	blx	r3
   104b6:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
   104b8:	69bb      	ldr	r3, [r7, #24]
   104ba:	2b00      	cmp	r3, #0
   104bc:	d101      	bne.n	104c2 <usbdc_set_config+0x46>
		return false;
   104be:	2300      	movs	r3, #0
   104c0:	e042      	b.n	10548 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
   104c2:	69b8      	ldr	r0, [r7, #24]
   104c4:	4b25      	ldr	r3, [pc, #148]	; (1055c <usbdc_set_config+0xe0>)
   104c6:	4798      	blx	r3
   104c8:	4603      	mov	r3, r0
   104ca:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
   104cc:	8abb      	ldrh	r3, [r7, #20]
   104ce:	69ba      	ldr	r2, [r7, #24]
   104d0:	4413      	add	r3, r2
   104d2:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   104d4:	693b      	ldr	r3, [r7, #16]
   104d6:	2204      	movs	r2, #4
   104d8:	4619      	mov	r1, r3
   104da:	69b8      	ldr	r0, [r7, #24]
   104dc:	4b20      	ldr	r3, [pc, #128]	; (10560 <usbdc_set_config+0xe4>)
   104de:	4798      	blx	r3
   104e0:	4603      	mov	r3, r0
   104e2:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
   104e4:	e02c      	b.n	10540 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   104e6:	68fb      	ldr	r3, [r7, #12]
   104e8:	3302      	adds	r3, #2
   104ea:	781b      	ldrb	r3, [r3, #0]
   104ec:	7dfa      	ldrb	r2, [r7, #23]
   104ee:	429a      	cmp	r2, r3
   104f0:	d018      	beq.n	10524 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
   104f2:	68fb      	ldr	r3, [r7, #12]
   104f4:	789b      	ldrb	r3, [r3, #2]
   104f6:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   104f8:	4b16      	ldr	r3, [pc, #88]	; (10554 <usbdc_set_config+0xd8>)
   104fa:	691b      	ldr	r3, [r3, #16]
   104fc:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   104fe:	e00c      	b.n	1051a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   10500:	69fb      	ldr	r3, [r7, #28]
   10502:	685b      	ldr	r3, [r3, #4]
   10504:	f107 020c 	add.w	r2, r7, #12
   10508:	2100      	movs	r1, #0
   1050a:	69f8      	ldr	r0, [r7, #28]
   1050c:	4798      	blx	r3
   1050e:	4603      	mov	r3, r0
   10510:	2b00      	cmp	r3, #0
   10512:	d006      	beq.n	10522 <usbdc_set_config+0xa6>
					func = func->next;
   10514:	69fb      	ldr	r3, [r7, #28]
   10516:	681b      	ldr	r3, [r3, #0]
   10518:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   1051a:	69fb      	ldr	r3, [r7, #28]
   1051c:	2b00      	cmp	r3, #0
   1051e:	d1ef      	bne.n	10500 <usbdc_set_config+0x84>
   10520:	e000      	b.n	10524 <usbdc_set_config+0xa8>
				} else {
					break;
   10522:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
   10524:	68fb      	ldr	r3, [r7, #12]
   10526:	4618      	mov	r0, r3
   10528:	4b0e      	ldr	r3, [pc, #56]	; (10564 <usbdc_set_config+0xe8>)
   1052a:	4798      	blx	r3
   1052c:	4603      	mov	r3, r0
   1052e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   10530:	68fb      	ldr	r3, [r7, #12]
   10532:	6939      	ldr	r1, [r7, #16]
   10534:	2204      	movs	r2, #4
   10536:	4618      	mov	r0, r3
   10538:	4b09      	ldr	r3, [pc, #36]	; (10560 <usbdc_set_config+0xe4>)
   1053a:	4798      	blx	r3
   1053c:	4603      	mov	r3, r0
   1053e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
   10540:	68fb      	ldr	r3, [r7, #12]
   10542:	2b00      	cmp	r3, #0
   10544:	d1cf      	bne.n	104e6 <usbdc_set_config+0x6a>
	}
	return true;
   10546:	2301      	movs	r3, #1
}
   10548:	4618      	mov	r0, r3
   1054a:	3720      	adds	r7, #32
   1054c:	46bd      	mov	sp, r7
   1054e:	bd80      	pop	{r7, pc}
   10550:	00010449 	.word	0x00010449
   10554:	20003a28 	.word	0x20003a28
   10558:	00010ded 	.word	0x00010ded
   1055c:	0000ff99 	.word	0x0000ff99
   10560:	00010d2d 	.word	0x00010d2d
   10564:	0000ff75 	.word	0x0000ff75

00010568 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
   10568:	b580      	push	{r7, lr}
   1056a:	b082      	sub	sp, #8
   1056c:	af00      	add	r7, sp, #0
   1056e:	4603      	mov	r3, r0
   10570:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
   10572:	79fb      	ldrb	r3, [r7, #7]
   10574:	4618      	mov	r0, r3
   10576:	4b03      	ldr	r3, [pc, #12]	; (10584 <usbdc_set_address+0x1c>)
   10578:	4798      	blx	r3
}
   1057a:	bf00      	nop
   1057c:	3708      	adds	r7, #8
   1057e:	46bd      	mov	sp, r7
   10580:	bd80      	pop	{r7, pc}
   10582:	bf00      	nop
   10584:	000064dd 	.word	0x000064dd

00010588 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
   10588:	b590      	push	{r4, r7, lr}
   1058a:	b087      	sub	sp, #28
   1058c:	af00      	add	r7, sp, #0
   1058e:	4603      	mov	r3, r0
   10590:	460a      	mov	r2, r1
   10592:	80fb      	strh	r3, [r7, #6]
   10594:	4613      	mov	r3, r2
   10596:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
   10598:	2300      	movs	r3, #0
   1059a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
   1059c:	693b      	ldr	r3, [r7, #16]
   1059e:	2b00      	cmp	r3, #0
   105a0:	d10b      	bne.n	105ba <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   105a2:	4b43      	ldr	r3, [pc, #268]	; (106b0 <usbdc_set_interface+0x128>)
   105a4:	681b      	ldr	r3, [r3, #0]
   105a6:	6818      	ldr	r0, [r3, #0]
   105a8:	4b41      	ldr	r3, [pc, #260]	; (106b0 <usbdc_set_interface+0x128>)
   105aa:	681b      	ldr	r3, [r3, #0]
   105ac:	6859      	ldr	r1, [r3, #4]
   105ae:	4b40      	ldr	r3, [pc, #256]	; (106b0 <usbdc_set_interface+0x128>)
   105b0:	7edb      	ldrb	r3, [r3, #27]
   105b2:	461a      	mov	r2, r3
   105b4:	4b3f      	ldr	r3, [pc, #252]	; (106b4 <usbdc_set_interface+0x12c>)
   105b6:	4798      	blx	r3
   105b8:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
   105ba:	693b      	ldr	r3, [r7, #16]
   105bc:	2b00      	cmp	r3, #0
   105be:	d101      	bne.n	105c4 <usbdc_set_interface+0x3c>
		return false;
   105c0:	2300      	movs	r3, #0
   105c2:	e071      	b.n	106a8 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
   105c4:	693b      	ldr	r3, [r7, #16]
   105c6:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   105c8:	6938      	ldr	r0, [r7, #16]
   105ca:	4b3b      	ldr	r3, [pc, #236]	; (106b8 <usbdc_set_interface+0x130>)
   105cc:	4798      	blx	r3
   105ce:	4603      	mov	r3, r0
   105d0:	461a      	mov	r2, r3
   105d2:	693b      	ldr	r3, [r7, #16]
   105d4:	4413      	add	r3, r2
   105d6:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   105d8:	68bb      	ldr	r3, [r7, #8]
   105da:	68f9      	ldr	r1, [r7, #12]
   105dc:	2204      	movs	r2, #4
   105de:	4618      	mov	r0, r3
   105e0:	4b36      	ldr	r3, [pc, #216]	; (106bc <usbdc_set_interface+0x134>)
   105e2:	4798      	blx	r3
   105e4:	6138      	str	r0, [r7, #16]
   105e6:	693b      	ldr	r3, [r7, #16]
   105e8:	2b00      	cmp	r3, #0
   105ea:	d113      	bne.n	10614 <usbdc_set_interface+0x8c>
		return false;
   105ec:	2300      	movs	r3, #0
   105ee:	e05b      	b.n	106a8 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
   105f0:	68bb      	ldr	r3, [r7, #8]
   105f2:	4618      	mov	r0, r3
   105f4:	4b32      	ldr	r3, [pc, #200]	; (106c0 <usbdc_set_interface+0x138>)
   105f6:	4798      	blx	r3
   105f8:	4603      	mov	r3, r0
   105fa:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   105fc:	68bb      	ldr	r3, [r7, #8]
   105fe:	68f9      	ldr	r1, [r7, #12]
   10600:	2204      	movs	r2, #4
   10602:	4618      	mov	r0, r3
   10604:	4b2d      	ldr	r3, [pc, #180]	; (106bc <usbdc_set_interface+0x134>)
   10606:	4798      	blx	r3
   10608:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
   1060a:	693b      	ldr	r3, [r7, #16]
   1060c:	2b00      	cmp	r3, #0
   1060e:	d101      	bne.n	10614 <usbdc_set_interface+0x8c>
			return false;
   10610:	2300      	movs	r3, #0
   10612:	e049      	b.n	106a8 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   10614:	693b      	ldr	r3, [r7, #16]
   10616:	3302      	adds	r3, #2
   10618:	781b      	ldrb	r3, [r3, #0]
   1061a:	b29b      	uxth	r3, r3
   1061c:	88ba      	ldrh	r2, [r7, #4]
   1061e:	429a      	cmp	r2, r3
   10620:	d1e6      	bne.n	105f0 <usbdc_set_interface+0x68>
   10622:	693b      	ldr	r3, [r7, #16]
   10624:	3303      	adds	r3, #3
   10626:	781b      	ldrb	r3, [r3, #0]
   10628:	b29b      	uxth	r3, r3
   1062a:	88fa      	ldrh	r2, [r7, #6]
   1062c:	429a      	cmp	r2, r3
   1062e:	d1df      	bne.n	105f0 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
   10630:	693b      	ldr	r3, [r7, #16]
   10632:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   10634:	4b1e      	ldr	r3, [pc, #120]	; (106b0 <usbdc_set_interface+0x128>)
   10636:	691b      	ldr	r3, [r3, #16]
   10638:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
   1063a:	e031      	b.n	106a0 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   1063c:	697b      	ldr	r3, [r7, #20]
   1063e:	685b      	ldr	r3, [r3, #4]
   10640:	f107 0208 	add.w	r2, r7, #8
   10644:	2101      	movs	r1, #1
   10646:	6978      	ldr	r0, [r7, #20]
   10648:	4798      	blx	r3
   1064a:	4603      	mov	r3, r0
   1064c:	2b00      	cmp	r3, #0
   1064e:	d003      	beq.n	10658 <usbdc_set_interface+0xd0>
			func = func->next;
   10650:	697b      	ldr	r3, [r7, #20]
   10652:	681b      	ldr	r3, [r3, #0]
   10654:	617b      	str	r3, [r7, #20]
   10656:	e023      	b.n	106a0 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   10658:	697b      	ldr	r3, [r7, #20]
   1065a:	685b      	ldr	r3, [r3, #4]
   1065c:	f107 0208 	add.w	r2, r7, #8
   10660:	2100      	movs	r1, #0
   10662:	6978      	ldr	r0, [r7, #20]
   10664:	4798      	blx	r3
   10666:	4603      	mov	r3, r0
   10668:	2b00      	cmp	r3, #0
   1066a:	d117      	bne.n	1069c <usbdc_set_interface+0x114>
			if (alt_set) {
   1066c:	88fb      	ldrh	r3, [r7, #6]
   1066e:	2b00      	cmp	r3, #0
   10670:	d00c      	beq.n	1068c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
   10672:	4b0f      	ldr	r3, [pc, #60]	; (106b0 <usbdc_set_interface+0x128>)
   10674:	7f5b      	ldrb	r3, [r3, #29]
   10676:	b25a      	sxtb	r2, r3
   10678:	88bb      	ldrh	r3, [r7, #4]
   1067a:	2101      	movs	r1, #1
   1067c:	fa01 f303 	lsl.w	r3, r1, r3
   10680:	b25b      	sxtb	r3, r3
   10682:	4313      	orrs	r3, r2
   10684:	b25b      	sxtb	r3, r3
   10686:	b2da      	uxtb	r2, r3
   10688:	4b09      	ldr	r3, [pc, #36]	; (106b0 <usbdc_set_interface+0x128>)
   1068a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
   1068c:	2300      	movs	r3, #0
   1068e:	2200      	movs	r2, #0
   10690:	2100      	movs	r1, #0
   10692:	2000      	movs	r0, #0
   10694:	4c0b      	ldr	r4, [pc, #44]	; (106c4 <usbdc_set_interface+0x13c>)
   10696:	47a0      	blx	r4
			return true;
   10698:	2301      	movs	r3, #1
   1069a:	e005      	b.n	106a8 <usbdc_set_interface+0x120>
		} else {
			return false;
   1069c:	2300      	movs	r3, #0
   1069e:	e003      	b.n	106a8 <usbdc_set_interface+0x120>
	while (NULL != func) {
   106a0:	697b      	ldr	r3, [r7, #20]
   106a2:	2b00      	cmp	r3, #0
   106a4:	d1ca      	bne.n	1063c <usbdc_set_interface+0xb4>
		}
	}

	return false;
   106a6:	2300      	movs	r3, #0
}
   106a8:	4618      	mov	r0, r3
   106aa:	371c      	adds	r7, #28
   106ac:	46bd      	mov	sp, r7
   106ae:	bd90      	pop	{r4, r7, pc}
   106b0:	20003a28 	.word	0x20003a28
   106b4:	00010ded 	.word	0x00010ded
   106b8:	0000ff99 	.word	0x0000ff99
   106bc:	00010d2d 	.word	0x00010d2d
   106c0:	0000ff75 	.word	0x0000ff75
   106c4:	00010a9d 	.word	0x00010a9d

000106c8 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
   106c8:	b590      	push	{r4, r7, lr}
   106ca:	b083      	sub	sp, #12
   106cc:	af00      	add	r7, sp, #0
   106ce:	4603      	mov	r3, r0
   106d0:	6039      	str	r1, [r7, #0]
   106d2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   106d4:	683b      	ldr	r3, [r7, #0]
   106d6:	785b      	ldrb	r3, [r3, #1]
   106d8:	3b01      	subs	r3, #1
   106da:	2b0a      	cmp	r3, #10
   106dc:	d85b      	bhi.n	10796 <usbdc_set_req+0xce>
   106de:	a201      	add	r2, pc, #4	; (adr r2, 106e4 <usbdc_set_req+0x1c>)
   106e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   106e4:	00010763 	.word	0x00010763
   106e8:	00010797 	.word	0x00010797
   106ec:	00010771 	.word	0x00010771
   106f0:	00010797 	.word	0x00010797
   106f4:	00010711 	.word	0x00010711
   106f8:	00010797 	.word	0x00010797
   106fc:	00010797 	.word	0x00010797
   10700:	00010797 	.word	0x00010797
   10704:	0001072b 	.word	0x0001072b
   10708:	00010797 	.word	0x00010797
   1070c:	0001077f 	.word	0x0001077f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   10710:	79f8      	ldrb	r0, [r7, #7]
   10712:	2301      	movs	r3, #1
   10714:	2200      	movs	r2, #0
   10716:	2100      	movs	r1, #0
   10718:	4c21      	ldr	r4, [pc, #132]	; (107a0 <usbdc_set_req+0xd8>)
   1071a:	47a0      	blx	r4
   1071c:	4603      	mov	r3, r0
   1071e:	2b00      	cmp	r3, #0
   10720:	bf0c      	ite	eq
   10722:	2301      	moveq	r3, #1
   10724:	2300      	movne	r3, #0
   10726:	b2db      	uxtb	r3, r3
   10728:	e036      	b.n	10798 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
   1072a:	683b      	ldr	r3, [r7, #0]
   1072c:	885b      	ldrh	r3, [r3, #2]
   1072e:	b29b      	uxth	r3, r3
   10730:	b2db      	uxtb	r3, r3
   10732:	4618      	mov	r0, r3
   10734:	4b1b      	ldr	r3, [pc, #108]	; (107a4 <usbdc_set_req+0xdc>)
   10736:	4798      	blx	r3
   10738:	4603      	mov	r3, r0
   1073a:	f083 0301 	eor.w	r3, r3, #1
   1073e:	b2db      	uxtb	r3, r3
   10740:	2b00      	cmp	r3, #0
   10742:	d001      	beq.n	10748 <usbdc_set_req+0x80>
			return false;
   10744:	2300      	movs	r3, #0
   10746:	e027      	b.n	10798 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   10748:	79f8      	ldrb	r0, [r7, #7]
   1074a:	2301      	movs	r3, #1
   1074c:	2200      	movs	r2, #0
   1074e:	2100      	movs	r1, #0
   10750:	4c13      	ldr	r4, [pc, #76]	; (107a0 <usbdc_set_req+0xd8>)
   10752:	47a0      	blx	r4
   10754:	4603      	mov	r3, r0
   10756:	2b00      	cmp	r3, #0
   10758:	bf0c      	ite	eq
   1075a:	2301      	moveq	r3, #1
   1075c:	2300      	movne	r3, #0
   1075e:	b2db      	uxtb	r3, r3
   10760:	e01a      	b.n	10798 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
   10762:	79fb      	ldrb	r3, [r7, #7]
   10764:	6839      	ldr	r1, [r7, #0]
   10766:	4618      	mov	r0, r3
   10768:	4b0f      	ldr	r3, [pc, #60]	; (107a8 <usbdc_set_req+0xe0>)
   1076a:	4798      	blx	r3
   1076c:	4603      	mov	r3, r0
   1076e:	e013      	b.n	10798 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
   10770:	79fb      	ldrb	r3, [r7, #7]
   10772:	6839      	ldr	r1, [r7, #0]
   10774:	4618      	mov	r0, r3
   10776:	4b0d      	ldr	r3, [pc, #52]	; (107ac <usbdc_set_req+0xe4>)
   10778:	4798      	blx	r3
   1077a:	4603      	mov	r3, r0
   1077c:	e00c      	b.n	10798 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
   1077e:	683b      	ldr	r3, [r7, #0]
   10780:	885b      	ldrh	r3, [r3, #2]
   10782:	b29a      	uxth	r2, r3
   10784:	683b      	ldr	r3, [r7, #0]
   10786:	889b      	ldrh	r3, [r3, #4]
   10788:	b29b      	uxth	r3, r3
   1078a:	4619      	mov	r1, r3
   1078c:	4610      	mov	r0, r2
   1078e:	4b08      	ldr	r3, [pc, #32]	; (107b0 <usbdc_set_req+0xe8>)
   10790:	4798      	blx	r3
   10792:	4603      	mov	r3, r0
   10794:	e000      	b.n	10798 <usbdc_set_req+0xd0>
	default:
		return false;
   10796:	2300      	movs	r3, #0
	}
}
   10798:	4618      	mov	r0, r3
   1079a:	370c      	adds	r7, #12
   1079c:	46bd      	mov	sp, r7
   1079e:	bd90      	pop	{r4, r7, pc}
   107a0:	00010a9d 	.word	0x00010a9d
   107a4:	0001047d 	.word	0x0001047d
   107a8:	00010399 	.word	0x00010399
   107ac:	000103f1 	.word	0x000103f1
   107b0:	00010589 	.word	0x00010589

000107b4 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
   107b4:	b580      	push	{r7, lr}
   107b6:	b082      	sub	sp, #8
   107b8:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   107ba:	4b0a      	ldr	r3, [pc, #40]	; (107e4 <usbdc_sof_notify+0x30>)
   107bc:	685b      	ldr	r3, [r3, #4]
   107be:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
   107c0:	e009      	b.n	107d6 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
   107c2:	687b      	ldr	r3, [r7, #4]
   107c4:	685b      	ldr	r3, [r3, #4]
   107c6:	2b00      	cmp	r3, #0
   107c8:	d002      	beq.n	107d0 <usbdc_sof_notify+0x1c>
			sof->cb();
   107ca:	687b      	ldr	r3, [r7, #4]
   107cc:	685b      	ldr	r3, [r3, #4]
   107ce:	4798      	blx	r3
		}
		sof = sof->next;
   107d0:	687b      	ldr	r3, [r7, #4]
   107d2:	681b      	ldr	r3, [r3, #0]
   107d4:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
   107d6:	687b      	ldr	r3, [r7, #4]
   107d8:	2b00      	cmp	r3, #0
   107da:	d1f2      	bne.n	107c2 <usbdc_sof_notify+0xe>
	}
}
   107dc:	bf00      	nop
   107de:	3708      	adds	r7, #8
   107e0:	46bd      	mov	sp, r7
   107e2:	bd80      	pop	{r7, pc}
   107e4:	20003a28 	.word	0x20003a28

000107e8 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
   107e8:	b580      	push	{r7, lr}
   107ea:	b084      	sub	sp, #16
   107ec:	af00      	add	r7, sp, #0
   107ee:	4603      	mov	r3, r0
   107f0:	6039      	str	r1, [r7, #0]
   107f2:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   107f4:	4b0b      	ldr	r3, [pc, #44]	; (10824 <usbdc_change_notify+0x3c>)
   107f6:	68db      	ldr	r3, [r3, #12]
   107f8:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
   107fa:	e00c      	b.n	10816 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
   107fc:	68fb      	ldr	r3, [r7, #12]
   107fe:	685b      	ldr	r3, [r3, #4]
   10800:	2b00      	cmp	r3, #0
   10802:	d005      	beq.n	10810 <usbdc_change_notify+0x28>
			cg->cb(change, value);
   10804:	68fb      	ldr	r3, [r7, #12]
   10806:	685b      	ldr	r3, [r3, #4]
   10808:	79fa      	ldrb	r2, [r7, #7]
   1080a:	6839      	ldr	r1, [r7, #0]
   1080c:	4610      	mov	r0, r2
   1080e:	4798      	blx	r3
		}
		cg = cg->next;
   10810:	68fb      	ldr	r3, [r7, #12]
   10812:	681b      	ldr	r3, [r3, #0]
   10814:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
   10816:	68fb      	ldr	r3, [r7, #12]
   10818:	2b00      	cmp	r3, #0
   1081a:	d1ef      	bne.n	107fc <usbdc_change_notify+0x14>
	}
}
   1081c:	bf00      	nop
   1081e:	3710      	adds	r7, #16
   10820:	46bd      	mov	sp, r7
   10822:	bd80      	pop	{r7, pc}
   10824:	20003a28 	.word	0x20003a28

00010828 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   10828:	b580      	push	{r7, lr}
   1082a:	b084      	sub	sp, #16
   1082c:	af00      	add	r7, sp, #0
   1082e:	4603      	mov	r3, r0
   10830:	6039      	str	r1, [r7, #0]
   10832:	71fb      	strb	r3, [r7, #7]
   10834:	4613      	mov	r3, r2
   10836:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   10838:	4b12      	ldr	r3, [pc, #72]	; (10884 <usbdc_request_handler+0x5c>)
   1083a:	689b      	ldr	r3, [r3, #8]
   1083c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
   1083e:	e019      	b.n	10874 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
   10840:	68fb      	ldr	r3, [r7, #12]
   10842:	685b      	ldr	r3, [r3, #4]
   10844:	2b00      	cmp	r3, #0
   10846:	d012      	beq.n	1086e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
   10848:	68fb      	ldr	r3, [r7, #12]
   1084a:	685b      	ldr	r3, [r3, #4]
   1084c:	79ba      	ldrb	r2, [r7, #6]
   1084e:	79f8      	ldrb	r0, [r7, #7]
   10850:	6839      	ldr	r1, [r7, #0]
   10852:	4798      	blx	r3
   10854:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
   10856:	68bb      	ldr	r3, [r7, #8]
   10858:	2b00      	cmp	r3, #0
   1085a:	d101      	bne.n	10860 <usbdc_request_handler+0x38>
				return true;
   1085c:	2301      	movs	r3, #1
   1085e:	e00d      	b.n	1087c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
   10860:	68bb      	ldr	r3, [r7, #8]
   10862:	f113 0f0a 	cmn.w	r3, #10
   10866:	d002      	beq.n	1086e <usbdc_request_handler+0x46>
				return -1;
   10868:	f04f 33ff 	mov.w	r3, #4294967295
   1086c:	e006      	b.n	1087c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
   1086e:	68fb      	ldr	r3, [r7, #12]
   10870:	681b      	ldr	r3, [r3, #0]
   10872:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
   10874:	68fb      	ldr	r3, [r7, #12]
   10876:	2b00      	cmp	r3, #0
   10878:	d1e2      	bne.n	10840 <usbdc_request_handler+0x18>
	}
	return false;
   1087a:	2300      	movs	r3, #0
}
   1087c:	4618      	mov	r0, r3
   1087e:	3710      	adds	r7, #16
   10880:	46bd      	mov	sp, r7
   10882:	bd80      	pop	{r7, pc}
   10884:	20003a28 	.word	0x20003a28

00010888 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   10888:	b580      	push	{r7, lr}
   1088a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
   1088c:	4b01      	ldr	r3, [pc, #4]	; (10894 <usbd_sof_cb+0xc>)
   1088e:	4798      	blx	r3
}
   10890:	bf00      	nop
   10892:	bd80      	pop	{r7, pc}
   10894:	000107b5 	.word	0x000107b5

00010898 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
   10898:	b580      	push	{r7, lr}
   1089a:	b082      	sub	sp, #8
   1089c:	af00      	add	r7, sp, #0
   1089e:	4603      	mov	r3, r0
   108a0:	6039      	str	r1, [r7, #0]
   108a2:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   108a4:	79fb      	ldrb	r3, [r7, #7]
   108a6:	2200      	movs	r2, #0
   108a8:	6839      	ldr	r1, [r7, #0]
   108aa:	4618      	mov	r0, r3
   108ac:	4b14      	ldr	r3, [pc, #80]	; (10900 <usbdc_cb_ctl_req+0x68>)
   108ae:	4798      	blx	r3
   108b0:	4603      	mov	r3, r0
   108b2:	f1b3 3fff 	cmp.w	r3, #4294967295
   108b6:	d00b      	beq.n	108d0 <usbdc_cb_ctl_req+0x38>
   108b8:	2b01      	cmp	r3, #1
   108ba:	d007      	beq.n	108cc <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
   108bc:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   108be:	683b      	ldr	r3, [r7, #0]
   108c0:	781b      	ldrb	r3, [r3, #0]
   108c2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   108c6:	2b00      	cmp	r3, #0
   108c8:	d007      	beq.n	108da <usbdc_cb_ctl_req+0x42>
   108ca:	e003      	b.n	108d4 <usbdc_cb_ctl_req+0x3c>
		return true;
   108cc:	2301      	movs	r3, #1
   108ce:	e013      	b.n	108f8 <usbdc_cb_ctl_req+0x60>
		return false;
   108d0:	2300      	movs	r3, #0
   108d2:	e011      	b.n	108f8 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   108d4:	2b80      	cmp	r3, #128	; 0x80
   108d6:	d007      	beq.n	108e8 <usbdc_cb_ctl_req+0x50>
   108d8:	e00d      	b.n	108f6 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
   108da:	79fb      	ldrb	r3, [r7, #7]
   108dc:	6839      	ldr	r1, [r7, #0]
   108de:	4618      	mov	r0, r3
   108e0:	4b08      	ldr	r3, [pc, #32]	; (10904 <usbdc_cb_ctl_req+0x6c>)
   108e2:	4798      	blx	r3
   108e4:	4603      	mov	r3, r0
   108e6:	e007      	b.n	108f8 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
   108e8:	79fb      	ldrb	r3, [r7, #7]
   108ea:	6839      	ldr	r1, [r7, #0]
   108ec:	4618      	mov	r0, r3
   108ee:	4b06      	ldr	r3, [pc, #24]	; (10908 <usbdc_cb_ctl_req+0x70>)
   108f0:	4798      	blx	r3
   108f2:	4603      	mov	r3, r0
   108f4:	e000      	b.n	108f8 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
   108f6:	2300      	movs	r3, #0
	}
}
   108f8:	4618      	mov	r0, r3
   108fa:	3708      	adds	r7, #8
   108fc:	46bd      	mov	sp, r7
   108fe:	bd80      	pop	{r7, pc}
   10900:	00010829 	.word	0x00010829
   10904:	000106c9 	.word	0x000106c9
   10908:	000102f1 	.word	0x000102f1

0001090c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
   1090c:	b580      	push	{r7, lr}
   1090e:	b082      	sub	sp, #8
   10910:	af00      	add	r7, sp, #0
   10912:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   10914:	687b      	ldr	r3, [r7, #4]
   10916:	781b      	ldrb	r3, [r3, #0]
   10918:	2b00      	cmp	r3, #0
   1091a:	d135      	bne.n	10988 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
   1091c:	687b      	ldr	r3, [r7, #4]
   1091e:	785b      	ldrb	r3, [r3, #1]
   10920:	2b05      	cmp	r3, #5
   10922:	d019      	beq.n	10958 <usbdc_ctrl_status_end+0x4c>
   10924:	2b09      	cmp	r3, #9
   10926:	d000      	beq.n	1092a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
   10928:	e02f      	b.n	1098a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
   1092a:	687b      	ldr	r3, [r7, #4]
   1092c:	885b      	ldrh	r3, [r3, #2]
   1092e:	b29b      	uxth	r3, r3
   10930:	b2da      	uxtb	r2, r3
   10932:	4b17      	ldr	r3, [pc, #92]	; (10990 <usbdc_ctrl_status_end+0x84>)
   10934:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   10936:	687b      	ldr	r3, [r7, #4]
   10938:	885b      	ldrh	r3, [r3, #2]
   1093a:	b29b      	uxth	r3, r3
   1093c:	2b00      	cmp	r3, #0
   1093e:	d001      	beq.n	10944 <usbdc_ctrl_status_end+0x38>
   10940:	2204      	movs	r2, #4
   10942:	e000      	b.n	10946 <usbdc_ctrl_status_end+0x3a>
   10944:	2203      	movs	r2, #3
   10946:	4b12      	ldr	r3, [pc, #72]	; (10990 <usbdc_ctrl_status_end+0x84>)
   10948:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   1094a:	4b11      	ldr	r3, [pc, #68]	; (10990 <usbdc_ctrl_status_end+0x84>)
   1094c:	7e9b      	ldrb	r3, [r3, #26]
   1094e:	4619      	mov	r1, r3
   10950:	2001      	movs	r0, #1
   10952:	4b10      	ldr	r3, [pc, #64]	; (10994 <usbdc_ctrl_status_end+0x88>)
   10954:	4798      	blx	r3
		break;
   10956:	e018      	b.n	1098a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
   10958:	687b      	ldr	r3, [r7, #4]
   1095a:	885b      	ldrh	r3, [r3, #2]
   1095c:	b29b      	uxth	r3, r3
   1095e:	b2db      	uxtb	r3, r3
   10960:	4618      	mov	r0, r3
   10962:	4b0d      	ldr	r3, [pc, #52]	; (10998 <usbdc_ctrl_status_end+0x8c>)
   10964:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   10966:	687b      	ldr	r3, [r7, #4]
   10968:	885b      	ldrh	r3, [r3, #2]
   1096a:	b29b      	uxth	r3, r3
   1096c:	2b00      	cmp	r3, #0
   1096e:	d001      	beq.n	10974 <usbdc_ctrl_status_end+0x68>
   10970:	2203      	movs	r2, #3
   10972:	e000      	b.n	10976 <usbdc_ctrl_status_end+0x6a>
   10974:	2202      	movs	r2, #2
   10976:	4b06      	ldr	r3, [pc, #24]	; (10990 <usbdc_ctrl_status_end+0x84>)
   10978:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   1097a:	4b05      	ldr	r3, [pc, #20]	; (10990 <usbdc_ctrl_status_end+0x84>)
   1097c:	7e9b      	ldrb	r3, [r3, #26]
   1097e:	4619      	mov	r1, r3
   10980:	2001      	movs	r0, #1
   10982:	4b04      	ldr	r3, [pc, #16]	; (10994 <usbdc_ctrl_status_end+0x88>)
   10984:	4798      	blx	r3
		break;
   10986:	e000      	b.n	1098a <usbdc_ctrl_status_end+0x7e>
		return;
   10988:	bf00      	nop
	}
}
   1098a:	3708      	adds	r7, #8
   1098c:	46bd      	mov	sp, r7
   1098e:	bd80      	pop	{r7, pc}
   10990:	20003a28 	.word	0x20003a28
   10994:	000107e9 	.word	0x000107e9
   10998:	00010569 	.word	0x00010569

0001099c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
   1099c:	b580      	push	{r7, lr}
   1099e:	b082      	sub	sp, #8
   109a0:	af00      	add	r7, sp, #0
   109a2:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   109a4:	2201      	movs	r2, #1
   109a6:	6879      	ldr	r1, [r7, #4]
   109a8:	2000      	movs	r0, #0
   109aa:	4b03      	ldr	r3, [pc, #12]	; (109b8 <usbdc_ctrl_data_end+0x1c>)
   109ac:	4798      	blx	r3
	return false;
   109ae:	2300      	movs	r3, #0
}
   109b0:	4618      	mov	r0, r3
   109b2:	3708      	adds	r7, #8
   109b4:	46bd      	mov	sp, r7
   109b6:	bd80      	pop	{r7, pc}
   109b8:	00010829 	.word	0x00010829

000109bc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   109bc:	b580      	push	{r7, lr}
   109be:	b082      	sub	sp, #8
   109c0:	af00      	add	r7, sp, #0
   109c2:	4603      	mov	r3, r0
   109c4:	603a      	str	r2, [r7, #0]
   109c6:	71fb      	strb	r3, [r7, #7]
   109c8:	460b      	mov	r3, r1
   109ca:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
   109cc:	79bb      	ldrb	r3, [r7, #6]
   109ce:	2b00      	cmp	r3, #0
   109d0:	d002      	beq.n	109d8 <usbdc_cb_ctl_done+0x1c>
   109d2:	2b01      	cmp	r3, #1
   109d4:	d004      	beq.n	109e0 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
   109d6:	e008      	b.n	109ea <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
   109d8:	6838      	ldr	r0, [r7, #0]
   109da:	4b06      	ldr	r3, [pc, #24]	; (109f4 <usbdc_cb_ctl_done+0x38>)
   109dc:	4798      	blx	r3
		break;
   109de:	e004      	b.n	109ea <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
   109e0:	6838      	ldr	r0, [r7, #0]
   109e2:	4b05      	ldr	r3, [pc, #20]	; (109f8 <usbdc_cb_ctl_done+0x3c>)
   109e4:	4798      	blx	r3
   109e6:	4603      	mov	r3, r0
   109e8:	e000      	b.n	109ec <usbdc_cb_ctl_done+0x30>
	}
	return false;
   109ea:	2300      	movs	r3, #0
}
   109ec:	4618      	mov	r0, r3
   109ee:	3708      	adds	r7, #8
   109f0:	46bd      	mov	sp, r7
   109f2:	bd80      	pop	{r7, pc}
   109f4:	0001090d 	.word	0x0001090d
   109f8:	0001099d 	.word	0x0001099d

000109fc <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   109fc:	b580      	push	{r7, lr}
   109fe:	af00      	add	r7, sp, #0
	usbdc_unconfig();
   10a00:	4b10      	ldr	r3, [pc, #64]	; (10a44 <usbdc_reset+0x48>)
   10a02:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
   10a04:	4b10      	ldr	r3, [pc, #64]	; (10a48 <usbdc_reset+0x4c>)
   10a06:	2202      	movs	r2, #2
   10a08:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
   10a0a:	4b0f      	ldr	r3, [pc, #60]	; (10a48 <usbdc_reset+0x4c>)
   10a0c:	2200      	movs	r2, #0
   10a0e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
   10a10:	4b0d      	ldr	r3, [pc, #52]	; (10a48 <usbdc_reset+0x4c>)
   10a12:	2200      	movs	r2, #0
   10a14:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
   10a16:	2000      	movs	r0, #0
   10a18:	4b0c      	ldr	r3, [pc, #48]	; (10a4c <usbdc_reset+0x50>)
   10a1a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   10a1c:	4b0a      	ldr	r3, [pc, #40]	; (10a48 <usbdc_reset+0x4c>)
   10a1e:	7f1b      	ldrb	r3, [r3, #28]
   10a20:	4618      	mov	r0, r3
   10a22:	4b0b      	ldr	r3, [pc, #44]	; (10a50 <usbdc_reset+0x54>)
   10a24:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   10a26:	4a0b      	ldr	r2, [pc, #44]	; (10a54 <usbdc_reset+0x58>)
   10a28:	2100      	movs	r1, #0
   10a2a:	2000      	movs	r0, #0
   10a2c:	4b0a      	ldr	r3, [pc, #40]	; (10a58 <usbdc_reset+0x5c>)
   10a2e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   10a30:	4a0a      	ldr	r2, [pc, #40]	; (10a5c <usbdc_reset+0x60>)
   10a32:	2102      	movs	r1, #2
   10a34:	2000      	movs	r0, #0
   10a36:	4b08      	ldr	r3, [pc, #32]	; (10a58 <usbdc_reset+0x5c>)
   10a38:	4798      	blx	r3
	usb_d_ep_enable(0);
   10a3a:	2000      	movs	r0, #0
   10a3c:	4b08      	ldr	r3, [pc, #32]	; (10a60 <usbdc_reset+0x64>)
   10a3e:	4798      	blx	r3
}
   10a40:	bf00      	nop
   10a42:	bd80      	pop	{r7, pc}
   10a44:	00010449 	.word	0x00010449
   10a48:	20003a28 	.word	0x20003a28
   10a4c:	000065c1 	.word	0x000065c1
   10a50:	000064fd 	.word	0x000064fd
   10a54:	00010899 	.word	0x00010899
   10a58:	00006915 	.word	0x00006915
   10a5c:	000109bd 	.word	0x000109bd
   10a60:	00006611 	.word	0x00006611

00010a64 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
   10a64:	b580      	push	{r7, lr}
   10a66:	b082      	sub	sp, #8
   10a68:	af00      	add	r7, sp, #0
   10a6a:	4603      	mov	r3, r0
   10a6c:	6039      	str	r1, [r7, #0]
   10a6e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
   10a70:	79fb      	ldrb	r3, [r7, #7]
   10a72:	2b00      	cmp	r3, #0
   10a74:	d002      	beq.n	10a7c <usbd_event_cb+0x18>
   10a76:	2b01      	cmp	r3, #1
   10a78:	d005      	beq.n	10a86 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   10a7a:	e007      	b.n	10a8c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
   10a7c:	6839      	ldr	r1, [r7, #0]
   10a7e:	2000      	movs	r0, #0
   10a80:	4b04      	ldr	r3, [pc, #16]	; (10a94 <usbd_event_cb+0x30>)
   10a82:	4798      	blx	r3
		break;
   10a84:	e002      	b.n	10a8c <usbd_event_cb+0x28>
		usbdc_reset();
   10a86:	4b04      	ldr	r3, [pc, #16]	; (10a98 <usbd_event_cb+0x34>)
   10a88:	4798      	blx	r3
		break;
   10a8a:	bf00      	nop
	}
}
   10a8c:	bf00      	nop
   10a8e:	3708      	adds	r7, #8
   10a90:	46bd      	mov	sp, r7
   10a92:	bd80      	pop	{r7, pc}
   10a94:	000107e9 	.word	0x000107e9
   10a98:	000109fd 	.word	0x000109fd

00010a9c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   10a9c:	b580      	push	{r7, lr}
   10a9e:	b088      	sub	sp, #32
   10aa0:	af00      	add	r7, sp, #0
   10aa2:	60b9      	str	r1, [r7, #8]
   10aa4:	607a      	str	r2, [r7, #4]
   10aa6:	461a      	mov	r2, r3
   10aa8:	4603      	mov	r3, r0
   10aaa:	73fb      	strb	r3, [r7, #15]
   10aac:	4613      	mov	r3, r2
   10aae:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   10ab0:	68bb      	ldr	r3, [r7, #8]
   10ab2:	617b      	str	r3, [r7, #20]
   10ab4:	687b      	ldr	r3, [r7, #4]
   10ab6:	61bb      	str	r3, [r7, #24]
   10ab8:	7bfb      	ldrb	r3, [r7, #15]
   10aba:	773b      	strb	r3, [r7, #28]
   10abc:	7bbb      	ldrb	r3, [r7, #14]
   10abe:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   10ac0:	f107 0314 	add.w	r3, r7, #20
   10ac4:	4618      	mov	r0, r3
   10ac6:	4b03      	ldr	r3, [pc, #12]	; (10ad4 <usbdc_xfer+0x38>)
   10ac8:	4798      	blx	r3
   10aca:	4603      	mov	r3, r0
}
   10acc:	4618      	mov	r0, r3
   10ace:	3720      	adds	r7, #32
   10ad0:	46bd      	mov	sp, r7
   10ad2:	bd80      	pop	{r7, pc}
   10ad4:	00006681 	.word	0x00006681

00010ad8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   10ad8:	b580      	push	{r7, lr}
   10ada:	b082      	sub	sp, #8
   10adc:	af00      	add	r7, sp, #0
   10ade:	4603      	mov	r3, r0
   10ae0:	6039      	str	r1, [r7, #0]
   10ae2:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   10ae4:	79fb      	ldrb	r3, [r7, #7]
   10ae6:	2b01      	cmp	r3, #1
   10ae8:	d009      	beq.n	10afe <usbdc_register_handler+0x26>
   10aea:	2b02      	cmp	r3, #2
   10aec:	d00c      	beq.n	10b08 <usbdc_register_handler+0x30>
   10aee:	2b00      	cmp	r3, #0
   10af0:	d000      	beq.n	10af4 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   10af2:	e00e      	b.n	10b12 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   10af4:	6839      	ldr	r1, [r7, #0]
   10af6:	4809      	ldr	r0, [pc, #36]	; (10b1c <usbdc_register_handler+0x44>)
   10af8:	4b09      	ldr	r3, [pc, #36]	; (10b20 <usbdc_register_handler+0x48>)
   10afa:	4798      	blx	r3
		break;
   10afc:	e009      	b.n	10b12 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   10afe:	6839      	ldr	r1, [r7, #0]
   10b00:	4808      	ldr	r0, [pc, #32]	; (10b24 <usbdc_register_handler+0x4c>)
   10b02:	4b07      	ldr	r3, [pc, #28]	; (10b20 <usbdc_register_handler+0x48>)
   10b04:	4798      	blx	r3
		break;
   10b06:	e004      	b.n	10b12 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   10b08:	6839      	ldr	r1, [r7, #0]
   10b0a:	4807      	ldr	r0, [pc, #28]	; (10b28 <usbdc_register_handler+0x50>)
   10b0c:	4b04      	ldr	r3, [pc, #16]	; (10b20 <usbdc_register_handler+0x48>)
   10b0e:	4798      	blx	r3
		break;
   10b10:	bf00      	nop
	}
}
   10b12:	bf00      	nop
   10b14:	3708      	adds	r7, #8
   10b16:	46bd      	mov	sp, r7
   10b18:	bd80      	pop	{r7, pc}
   10b1a:	bf00      	nop
   10b1c:	20003a2c 	.word	0x20003a2c
   10b20:	00006a6d 	.word	0x00006a6d
   10b24:	20003a30 	.word	0x20003a30
   10b28:	20003a34 	.word	0x20003a34

00010b2c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   10b2c:	b580      	push	{r7, lr}
   10b2e:	b084      	sub	sp, #16
   10b30:	af00      	add	r7, sp, #0
   10b32:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   10b34:	687b      	ldr	r3, [r7, #4]
   10b36:	2b00      	cmp	r3, #0
   10b38:	bf14      	ite	ne
   10b3a:	2301      	movne	r3, #1
   10b3c:	2300      	moveq	r3, #0
   10b3e:	b2db      	uxtb	r3, r3
   10b40:	f240 3255 	movw	r2, #853	; 0x355
   10b44:	4910      	ldr	r1, [pc, #64]	; (10b88 <usbdc_init+0x5c>)
   10b46:	4618      	mov	r0, r3
   10b48:	4b10      	ldr	r3, [pc, #64]	; (10b8c <usbdc_init+0x60>)
   10b4a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   10b4c:	4b10      	ldr	r3, [pc, #64]	; (10b90 <usbdc_init+0x64>)
   10b4e:	4798      	blx	r3
   10b50:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   10b52:	68fb      	ldr	r3, [r7, #12]
   10b54:	2b00      	cmp	r3, #0
   10b56:	da01      	bge.n	10b5c <usbdc_init+0x30>
		return rc;
   10b58:	68fb      	ldr	r3, [r7, #12]
   10b5a:	e010      	b.n	10b7e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   10b5c:	2220      	movs	r2, #32
   10b5e:	2100      	movs	r1, #0
   10b60:	480c      	ldr	r0, [pc, #48]	; (10b94 <usbdc_init+0x68>)
   10b62:	4b0d      	ldr	r3, [pc, #52]	; (10b98 <usbdc_init+0x6c>)
   10b64:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   10b66:	4a0b      	ldr	r2, [pc, #44]	; (10b94 <usbdc_init+0x68>)
   10b68:	687b      	ldr	r3, [r7, #4]
   10b6a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   10b6c:	490b      	ldr	r1, [pc, #44]	; (10b9c <usbdc_init+0x70>)
   10b6e:	2000      	movs	r0, #0
   10b70:	4b0b      	ldr	r3, [pc, #44]	; (10ba0 <usbdc_init+0x74>)
   10b72:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   10b74:	490b      	ldr	r1, [pc, #44]	; (10ba4 <usbdc_init+0x78>)
   10b76:	2001      	movs	r0, #1
   10b78:	4b09      	ldr	r3, [pc, #36]	; (10ba0 <usbdc_init+0x74>)
   10b7a:	4798      	blx	r3

	return 0;
   10b7c:	2300      	movs	r3, #0
}
   10b7e:	4618      	mov	r0, r3
   10b80:	3710      	adds	r7, #16
   10b82:	46bd      	mov	sp, r7
   10b84:	bd80      	pop	{r7, pc}
   10b86:	bf00      	nop
   10b88:	0001d35c 	.word	0x0001d35c
   10b8c:	00006991 	.word	0x00006991
   10b90:	000063e9 	.word	0x000063e9
   10b94:	20003a28 	.word	0x20003a28
   10b98:	00018c8d 	.word	0x00018c8d
   10b9c:	00010889 	.word	0x00010889
   10ba0:	00006495 	.word	0x00006495
   10ba4:	00010a65 	.word	0x00010a65

00010ba8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   10ba8:	b580      	push	{r7, lr}
   10baa:	b082      	sub	sp, #8
   10bac:	af00      	add	r7, sp, #0
   10bae:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   10bb0:	6879      	ldr	r1, [r7, #4]
   10bb2:	4803      	ldr	r0, [pc, #12]	; (10bc0 <usbdc_register_function+0x18>)
   10bb4:	4b03      	ldr	r3, [pc, #12]	; (10bc4 <usbdc_register_function+0x1c>)
   10bb6:	4798      	blx	r3
}
   10bb8:	bf00      	nop
   10bba:	3708      	adds	r7, #8
   10bbc:	46bd      	mov	sp, r7
   10bbe:	bd80      	pop	{r7, pc}
   10bc0:	20003a38 	.word	0x20003a38
   10bc4:	00006a6d 	.word	0x00006a6d

00010bc8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   10bc8:	b580      	push	{r7, lr}
   10bca:	b082      	sub	sp, #8
   10bcc:	af00      	add	r7, sp, #0
   10bce:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   10bd0:	4b0f      	ldr	r3, [pc, #60]	; (10c10 <usbdc_start+0x48>)
   10bd2:	7e9b      	ldrb	r3, [r3, #26]
   10bd4:	2b00      	cmp	r3, #0
   10bd6:	d002      	beq.n	10bde <usbdc_start+0x16>
		return ERR_BUSY;
   10bd8:	f06f 0303 	mvn.w	r3, #3
   10bdc:	e013      	b.n	10c06 <usbdc_start+0x3e>
	}

	if (desces) {
   10bde:	687b      	ldr	r3, [r7, #4]
   10be0:	2b00      	cmp	r3, #0
   10be2:	d00e      	beq.n	10c02 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   10be4:	4a0a      	ldr	r2, [pc, #40]	; (10c10 <usbdc_start+0x48>)
   10be6:	687b      	ldr	r3, [r7, #4]
   10be8:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   10bea:	687b      	ldr	r3, [r7, #4]
   10bec:	681b      	ldr	r3, [r3, #0]
   10bee:	79da      	ldrb	r2, [r3, #7]
   10bf0:	4b07      	ldr	r3, [pc, #28]	; (10c10 <usbdc_start+0x48>)
   10bf2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   10bf4:	4b06      	ldr	r3, [pc, #24]	; (10c10 <usbdc_start+0x48>)
   10bf6:	2201      	movs	r2, #1
   10bf8:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   10bfa:	4b06      	ldr	r3, [pc, #24]	; (10c14 <usbdc_start+0x4c>)
   10bfc:	4798      	blx	r3
	return ERR_NONE;
   10bfe:	2300      	movs	r3, #0
   10c00:	e001      	b.n	10c06 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   10c02:	f06f 0308 	mvn.w	r3, #8
}
   10c06:	4618      	mov	r0, r3
   10c08:	3708      	adds	r7, #8
   10c0a:	46bd      	mov	sp, r7
   10c0c:	bd80      	pop	{r7, pc}
   10c0e:	bf00      	nop
   10c10:	20003a28 	.word	0x20003a28
   10c14:	000064b9 	.word	0x000064b9

00010c18 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   10c18:	b580      	push	{r7, lr}
   10c1a:	af00      	add	r7, sp, #0
	usb_d_attach();
   10c1c:	4b01      	ldr	r3, [pc, #4]	; (10c24 <usbdc_attach+0xc>)
   10c1e:	4798      	blx	r3
}
   10c20:	bf00      	nop
   10c22:	bd80      	pop	{r7, pc}
   10c24:	000064cd 	.word	0x000064cd

00010c28 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   10c28:	b480      	push	{r7}
   10c2a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   10c2c:	4b03      	ldr	r3, [pc, #12]	; (10c3c <usbdc_get_ctrl_buffer+0x14>)
   10c2e:	695b      	ldr	r3, [r3, #20]
}
   10c30:	4618      	mov	r0, r3
   10c32:	46bd      	mov	sp, r7
   10c34:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c38:	4770      	bx	lr
   10c3a:	bf00      	nop
   10c3c:	20003a28 	.word	0x20003a28

00010c40 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   10c40:	b480      	push	{r7}
   10c42:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   10c44:	4b07      	ldr	r3, [pc, #28]	; (10c64 <usbdc_get_state+0x24>)
   10c46:	7e9b      	ldrb	r3, [r3, #26]
   10c48:	f003 0310 	and.w	r3, r3, #16
   10c4c:	2b00      	cmp	r3, #0
   10c4e:	d001      	beq.n	10c54 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   10c50:	2310      	movs	r3, #16
   10c52:	e001      	b.n	10c58 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   10c54:	4b03      	ldr	r3, [pc, #12]	; (10c64 <usbdc_get_state+0x24>)
   10c56:	7e9b      	ldrb	r3, [r3, #26]
}
   10c58:	4618      	mov	r0, r3
   10c5a:	46bd      	mov	sp, r7
   10c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c60:	4770      	bx	lr
   10c62:	bf00      	nop
   10c64:	20003a28 	.word	0x20003a28

00010c68 <usb_get_u16>:
{
   10c68:	b480      	push	{r7}
   10c6a:	b083      	sub	sp, #12
   10c6c:	af00      	add	r7, sp, #0
   10c6e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   10c70:	687b      	ldr	r3, [r7, #4]
   10c72:	781b      	ldrb	r3, [r3, #0]
   10c74:	b29a      	uxth	r2, r3
   10c76:	687b      	ldr	r3, [r7, #4]
   10c78:	3301      	adds	r3, #1
   10c7a:	781b      	ldrb	r3, [r3, #0]
   10c7c:	b29b      	uxth	r3, r3
   10c7e:	021b      	lsls	r3, r3, #8
   10c80:	b29b      	uxth	r3, r3
   10c82:	4413      	add	r3, r2
   10c84:	b29b      	uxth	r3, r3
}
   10c86:	4618      	mov	r0, r3
   10c88:	370c      	adds	r7, #12
   10c8a:	46bd      	mov	sp, r7
   10c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c90:	4770      	bx	lr

00010c92 <usb_desc_len>:
{
   10c92:	b480      	push	{r7}
   10c94:	b083      	sub	sp, #12
   10c96:	af00      	add	r7, sp, #0
   10c98:	6078      	str	r0, [r7, #4]
	return desc[0];
   10c9a:	687b      	ldr	r3, [r7, #4]
   10c9c:	781b      	ldrb	r3, [r3, #0]
}
   10c9e:	4618      	mov	r0, r3
   10ca0:	370c      	adds	r7, #12
   10ca2:	46bd      	mov	sp, r7
   10ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ca8:	4770      	bx	lr

00010caa <usb_desc_type>:
{
   10caa:	b480      	push	{r7}
   10cac:	b083      	sub	sp, #12
   10cae:	af00      	add	r7, sp, #0
   10cb0:	6078      	str	r0, [r7, #4]
	return desc[1];
   10cb2:	687b      	ldr	r3, [r7, #4]
   10cb4:	3301      	adds	r3, #1
   10cb6:	781b      	ldrb	r3, [r3, #0]
}
   10cb8:	4618      	mov	r0, r3
   10cba:	370c      	adds	r7, #12
   10cbc:	46bd      	mov	sp, r7
   10cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
   10cc2:	4770      	bx	lr

00010cc4 <usb_desc_next>:
{
   10cc4:	b580      	push	{r7, lr}
   10cc6:	b082      	sub	sp, #8
   10cc8:	af00      	add	r7, sp, #0
   10cca:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   10ccc:	6878      	ldr	r0, [r7, #4]
   10cce:	4b05      	ldr	r3, [pc, #20]	; (10ce4 <usb_desc_next+0x20>)
   10cd0:	4798      	blx	r3
   10cd2:	4603      	mov	r3, r0
   10cd4:	461a      	mov	r2, r3
   10cd6:	687b      	ldr	r3, [r7, #4]
   10cd8:	4413      	add	r3, r2
}
   10cda:	4618      	mov	r0, r3
   10cdc:	3708      	adds	r7, #8
   10cde:	46bd      	mov	sp, r7
   10ce0:	bd80      	pop	{r7, pc}
   10ce2:	bf00      	nop
   10ce4:	00010c93 	.word	0x00010c93

00010ce8 <usb_cfg_desc_total_len>:
{
   10ce8:	b580      	push	{r7, lr}
   10cea:	b082      	sub	sp, #8
   10cec:	af00      	add	r7, sp, #0
   10cee:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   10cf0:	687b      	ldr	r3, [r7, #4]
   10cf2:	3302      	adds	r3, #2
   10cf4:	4618      	mov	r0, r3
   10cf6:	4b03      	ldr	r3, [pc, #12]	; (10d04 <usb_cfg_desc_total_len+0x1c>)
   10cf8:	4798      	blx	r3
   10cfa:	4603      	mov	r3, r0
}
   10cfc:	4618      	mov	r0, r3
   10cfe:	3708      	adds	r7, #8
   10d00:	46bd      	mov	sp, r7
   10d02:	bd80      	pop	{r7, pc}
   10d04:	00010c69 	.word	0x00010c69

00010d08 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   10d08:	b580      	push	{r7, lr}
   10d0a:	b082      	sub	sp, #8
   10d0c:	af00      	add	r7, sp, #0
   10d0e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   10d10:	6878      	ldr	r0, [r7, #4]
   10d12:	4b05      	ldr	r3, [pc, #20]	; (10d28 <usb_cfg_desc_next+0x20>)
   10d14:	4798      	blx	r3
   10d16:	4603      	mov	r3, r0
   10d18:	461a      	mov	r2, r3
   10d1a:	687b      	ldr	r3, [r7, #4]
   10d1c:	4413      	add	r3, r2
}
   10d1e:	4618      	mov	r0, r3
   10d20:	3708      	adds	r7, #8
   10d22:	46bd      	mov	sp, r7
   10d24:	bd80      	pop	{r7, pc}
   10d26:	bf00      	nop
   10d28:	00010ce9 	.word	0x00010ce9

00010d2c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   10d2c:	b580      	push	{r7, lr}
   10d2e:	b084      	sub	sp, #16
   10d30:	af00      	add	r7, sp, #0
   10d32:	60f8      	str	r0, [r7, #12]
   10d34:	60b9      	str	r1, [r7, #8]
   10d36:	4613      	mov	r3, r2
   10d38:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   10d3a:	e015      	b.n	10d68 <usb_find_desc+0x3c>
		_desc_len_check();
   10d3c:	68f8      	ldr	r0, [r7, #12]
   10d3e:	4b0f      	ldr	r3, [pc, #60]	; (10d7c <usb_find_desc+0x50>)
   10d40:	4798      	blx	r3
   10d42:	4603      	mov	r3, r0
   10d44:	2b01      	cmp	r3, #1
   10d46:	d801      	bhi.n	10d4c <usb_find_desc+0x20>
   10d48:	2300      	movs	r3, #0
   10d4a:	e012      	b.n	10d72 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   10d4c:	68f8      	ldr	r0, [r7, #12]
   10d4e:	4b0c      	ldr	r3, [pc, #48]	; (10d80 <usb_find_desc+0x54>)
   10d50:	4798      	blx	r3
   10d52:	4603      	mov	r3, r0
   10d54:	461a      	mov	r2, r3
   10d56:	79fb      	ldrb	r3, [r7, #7]
   10d58:	4293      	cmp	r3, r2
   10d5a:	d101      	bne.n	10d60 <usb_find_desc+0x34>
			return desc;
   10d5c:	68fb      	ldr	r3, [r7, #12]
   10d5e:	e008      	b.n	10d72 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   10d60:	68f8      	ldr	r0, [r7, #12]
   10d62:	4b08      	ldr	r3, [pc, #32]	; (10d84 <usb_find_desc+0x58>)
   10d64:	4798      	blx	r3
   10d66:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   10d68:	68fa      	ldr	r2, [r7, #12]
   10d6a:	68bb      	ldr	r3, [r7, #8]
   10d6c:	429a      	cmp	r2, r3
   10d6e:	d3e5      	bcc.n	10d3c <usb_find_desc+0x10>
	}
	return NULL;
   10d70:	2300      	movs	r3, #0
}
   10d72:	4618      	mov	r0, r3
   10d74:	3710      	adds	r7, #16
   10d76:	46bd      	mov	sp, r7
   10d78:	bd80      	pop	{r7, pc}
   10d7a:	bf00      	nop
   10d7c:	00010c93 	.word	0x00010c93
   10d80:	00010cab 	.word	0x00010cab
   10d84:	00010cc5 	.word	0x00010cc5

00010d88 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   10d88:	b580      	push	{r7, lr}
   10d8a:	b082      	sub	sp, #8
   10d8c:	af00      	add	r7, sp, #0
   10d8e:	6078      	str	r0, [r7, #4]
   10d90:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   10d92:	e019      	b.n	10dc8 <usb_find_ep_desc+0x40>
		_desc_len_check();
   10d94:	6878      	ldr	r0, [r7, #4]
   10d96:	4b12      	ldr	r3, [pc, #72]	; (10de0 <usb_find_ep_desc+0x58>)
   10d98:	4798      	blx	r3
   10d9a:	4603      	mov	r3, r0
   10d9c:	2b01      	cmp	r3, #1
   10d9e:	d801      	bhi.n	10da4 <usb_find_ep_desc+0x1c>
   10da0:	2300      	movs	r3, #0
   10da2:	e018      	b.n	10dd6 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   10da4:	6878      	ldr	r0, [r7, #4]
   10da6:	4b0f      	ldr	r3, [pc, #60]	; (10de4 <usb_find_ep_desc+0x5c>)
   10da8:	4798      	blx	r3
   10daa:	4603      	mov	r3, r0
   10dac:	2b04      	cmp	r3, #4
   10dae:	d010      	beq.n	10dd2 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   10db0:	6878      	ldr	r0, [r7, #4]
   10db2:	4b0c      	ldr	r3, [pc, #48]	; (10de4 <usb_find_ep_desc+0x5c>)
   10db4:	4798      	blx	r3
   10db6:	4603      	mov	r3, r0
   10db8:	2b05      	cmp	r3, #5
   10dba:	d101      	bne.n	10dc0 <usb_find_ep_desc+0x38>
			return desc;
   10dbc:	687b      	ldr	r3, [r7, #4]
   10dbe:	e00a      	b.n	10dd6 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   10dc0:	6878      	ldr	r0, [r7, #4]
   10dc2:	4b09      	ldr	r3, [pc, #36]	; (10de8 <usb_find_ep_desc+0x60>)
   10dc4:	4798      	blx	r3
   10dc6:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   10dc8:	687a      	ldr	r2, [r7, #4]
   10dca:	683b      	ldr	r3, [r7, #0]
   10dcc:	429a      	cmp	r2, r3
   10dce:	d3e1      	bcc.n	10d94 <usb_find_ep_desc+0xc>
   10dd0:	e000      	b.n	10dd4 <usb_find_ep_desc+0x4c>
			break;
   10dd2:	bf00      	nop
	}
	return NULL;
   10dd4:	2300      	movs	r3, #0
}
   10dd6:	4618      	mov	r0, r3
   10dd8:	3708      	adds	r7, #8
   10dda:	46bd      	mov	sp, r7
   10ddc:	bd80      	pop	{r7, pc}
   10dde:	bf00      	nop
   10de0:	00010c93 	.word	0x00010c93
   10de4:	00010cab 	.word	0x00010cab
   10de8:	00010cc5 	.word	0x00010cc5

00010dec <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   10dec:	b580      	push	{r7, lr}
   10dee:	b084      	sub	sp, #16
   10df0:	af00      	add	r7, sp, #0
   10df2:	60f8      	str	r0, [r7, #12]
   10df4:	60b9      	str	r1, [r7, #8]
   10df6:	4613      	mov	r3, r2
   10df8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   10dfa:	2202      	movs	r2, #2
   10dfc:	68b9      	ldr	r1, [r7, #8]
   10dfe:	68f8      	ldr	r0, [r7, #12]
   10e00:	4b15      	ldr	r3, [pc, #84]	; (10e58 <usb_find_cfg_desc+0x6c>)
   10e02:	4798      	blx	r3
   10e04:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   10e06:	68fb      	ldr	r3, [r7, #12]
   10e08:	2b00      	cmp	r3, #0
   10e0a:	d11a      	bne.n	10e42 <usb_find_cfg_desc+0x56>
		return NULL;
   10e0c:	2300      	movs	r3, #0
   10e0e:	e01f      	b.n	10e50 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   10e10:	68f8      	ldr	r0, [r7, #12]
   10e12:	4b12      	ldr	r3, [pc, #72]	; (10e5c <usb_find_cfg_desc+0x70>)
   10e14:	4798      	blx	r3
   10e16:	4603      	mov	r3, r0
   10e18:	2b01      	cmp	r3, #1
   10e1a:	d801      	bhi.n	10e20 <usb_find_cfg_desc+0x34>
   10e1c:	2300      	movs	r3, #0
   10e1e:	e017      	b.n	10e50 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   10e20:	68fb      	ldr	r3, [r7, #12]
   10e22:	3301      	adds	r3, #1
   10e24:	781b      	ldrb	r3, [r3, #0]
   10e26:	2b02      	cmp	r3, #2
   10e28:	d110      	bne.n	10e4c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   10e2a:	68fb      	ldr	r3, [r7, #12]
   10e2c:	3305      	adds	r3, #5
   10e2e:	781b      	ldrb	r3, [r3, #0]
   10e30:	79fa      	ldrb	r2, [r7, #7]
   10e32:	429a      	cmp	r2, r3
   10e34:	d101      	bne.n	10e3a <usb_find_cfg_desc+0x4e>
			return desc;
   10e36:	68fb      	ldr	r3, [r7, #12]
   10e38:	e00a      	b.n	10e50 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   10e3a:	68f8      	ldr	r0, [r7, #12]
   10e3c:	4b08      	ldr	r3, [pc, #32]	; (10e60 <usb_find_cfg_desc+0x74>)
   10e3e:	4798      	blx	r3
   10e40:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   10e42:	68fa      	ldr	r2, [r7, #12]
   10e44:	68bb      	ldr	r3, [r7, #8]
   10e46:	429a      	cmp	r2, r3
   10e48:	d3e2      	bcc.n	10e10 <usb_find_cfg_desc+0x24>
   10e4a:	e000      	b.n	10e4e <usb_find_cfg_desc+0x62>
			break;
   10e4c:	bf00      	nop
	}
	return NULL;
   10e4e:	2300      	movs	r3, #0
}
   10e50:	4618      	mov	r0, r3
   10e52:	3710      	adds	r7, #16
   10e54:	46bd      	mov	sp, r7
   10e56:	bd80      	pop	{r7, pc}
   10e58:	00010d2d 	.word	0x00010d2d
   10e5c:	00010c93 	.word	0x00010c93
   10e60:	00010d09 	.word	0x00010d09

00010e64 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   10e64:	b580      	push	{r7, lr}
   10e66:	b086      	sub	sp, #24
   10e68:	af00      	add	r7, sp, #0
   10e6a:	60f8      	str	r0, [r7, #12]
   10e6c:	60b9      	str	r1, [r7, #8]
   10e6e:	4613      	mov	r3, r2
   10e70:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   10e72:	2300      	movs	r3, #0
   10e74:	75fb      	strb	r3, [r7, #23]
   10e76:	e020      	b.n	10eba <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   10e78:	2203      	movs	r2, #3
   10e7a:	68b9      	ldr	r1, [r7, #8]
   10e7c:	68f8      	ldr	r0, [r7, #12]
   10e7e:	4b13      	ldr	r3, [pc, #76]	; (10ecc <usb_find_str_desc+0x68>)
   10e80:	4798      	blx	r3
   10e82:	60f8      	str	r0, [r7, #12]
		if (desc) {
   10e84:	68fb      	ldr	r3, [r7, #12]
   10e86:	2b00      	cmp	r3, #0
   10e88:	d015      	beq.n	10eb6 <usb_find_str_desc+0x52>
			_desc_len_check();
   10e8a:	68f8      	ldr	r0, [r7, #12]
   10e8c:	4b10      	ldr	r3, [pc, #64]	; (10ed0 <usb_find_str_desc+0x6c>)
   10e8e:	4798      	blx	r3
   10e90:	4603      	mov	r3, r0
   10e92:	2b01      	cmp	r3, #1
   10e94:	d801      	bhi.n	10e9a <usb_find_str_desc+0x36>
   10e96:	2300      	movs	r3, #0
   10e98:	e014      	b.n	10ec4 <usb_find_str_desc+0x60>
			if (i == str_index) {
   10e9a:	7dfa      	ldrb	r2, [r7, #23]
   10e9c:	79fb      	ldrb	r3, [r7, #7]
   10e9e:	429a      	cmp	r2, r3
   10ea0:	d101      	bne.n	10ea6 <usb_find_str_desc+0x42>
				return desc;
   10ea2:	68fb      	ldr	r3, [r7, #12]
   10ea4:	e00e      	b.n	10ec4 <usb_find_str_desc+0x60>
			}
			i++;
   10ea6:	7dfb      	ldrb	r3, [r7, #23]
   10ea8:	3301      	adds	r3, #1
   10eaa:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   10eac:	68f8      	ldr	r0, [r7, #12]
   10eae:	4b09      	ldr	r3, [pc, #36]	; (10ed4 <usb_find_str_desc+0x70>)
   10eb0:	4798      	blx	r3
   10eb2:	60f8      	str	r0, [r7, #12]
   10eb4:	e001      	b.n	10eba <usb_find_str_desc+0x56>
		} else {
			return NULL;
   10eb6:	2300      	movs	r3, #0
   10eb8:	e004      	b.n	10ec4 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   10eba:	68fa      	ldr	r2, [r7, #12]
   10ebc:	68bb      	ldr	r3, [r7, #8]
   10ebe:	429a      	cmp	r2, r3
   10ec0:	d3da      	bcc.n	10e78 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   10ec2:	2300      	movs	r3, #0
}
   10ec4:	4618      	mov	r0, r3
   10ec6:	3718      	adds	r7, #24
   10ec8:	46bd      	mov	sp, r7
   10eca:	bd80      	pop	{r7, pc}
   10ecc:	00010d2d 	.word	0x00010d2d
   10ed0:	00010c93 	.word	0x00010c93
   10ed4:	00010cc5 	.word	0x00010cc5

00010ed8 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
   10ed8:	b480      	push	{r7}
   10eda:	b083      	sub	sp, #12
   10edc:	af00      	add	r7, sp, #0
   10ede:	6078      	str	r0, [r7, #4]
   10ee0:	4a04      	ldr	r2, [pc, #16]	; (10ef4 <_ZN17ARINC_ConversionsC1Ev+0x1c>)
   10ee2:	687b      	ldr	r3, [r7, #4]
   10ee4:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
   10ee6:	687b      	ldr	r3, [r7, #4]
   10ee8:	4618      	mov	r0, r3
   10eea:	370c      	adds	r7, #12
   10eec:	46bd      	mov	sp, r7
   10eee:	bc80      	pop	{r7}
   10ef0:	4770      	bx	lr
   10ef2:	bf00      	nop
   10ef4:	0001d37c 	.word	0x0001d37c

00010ef8 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
   10ef8:	b480      	push	{r7}
   10efa:	b083      	sub	sp, #12
   10efc:	af00      	add	r7, sp, #0
   10efe:	6078      	str	r0, [r7, #4]
   10f00:	4a04      	ldr	r2, [pc, #16]	; (10f14 <_ZN17ARINC_ConversionsD1Ev+0x1c>)
   10f02:	687b      	ldr	r3, [r7, #4]
   10f04:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
   10f06:	687b      	ldr	r3, [r7, #4]
   10f08:	4618      	mov	r0, r3
   10f0a:	370c      	adds	r7, #12
   10f0c:	46bd      	mov	sp, r7
   10f0e:	bc80      	pop	{r7}
   10f10:	4770      	bx	lr
   10f12:	bf00      	nop
   10f14:	0001d37c 	.word	0x0001d37c

00010f18 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   10f18:	b5b0      	push	{r4, r5, r7, lr}
   10f1a:	b082      	sub	sp, #8
   10f1c:	af00      	add	r7, sp, #0
   10f1e:	6078      	str	r0, [r7, #4]
   10f20:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   10f22:	4b0a      	ldr	r3, [pc, #40]	; (10f4c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   10f24:	6878      	ldr	r0, [r7, #4]
   10f26:	4798      	blx	r3
   10f28:	4604      	mov	r4, r0
   10f2a:	460d      	mov	r5, r1
   10f2c:	4b07      	ldr	r3, [pc, #28]	; (10f4c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   10f2e:	6838      	ldr	r0, [r7, #0]
   10f30:	4798      	blx	r3
   10f32:	4602      	mov	r2, r0
   10f34:	460b      	mov	r3, r1
   10f36:	4620      	mov	r0, r4
   10f38:	4629      	mov	r1, r5
   10f3a:	4c05      	ldr	r4, [pc, #20]	; (10f50 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
   10f3c:	47a0      	blx	r4
   10f3e:	4603      	mov	r3, r0
   10f40:	460c      	mov	r4, r1
    }
   10f42:	4618      	mov	r0, r3
   10f44:	4621      	mov	r1, r4
   10f46:	3708      	adds	r7, #8
   10f48:	46bd      	mov	sp, r7
   10f4a:	bdb0      	pop	{r4, r5, r7, pc}
   10f4c:	00017cd9 	.word	0x00017cd9
   10f50:	000168e9 	.word	0x000168e9

00010f54 <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
   10f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10f58:	b085      	sub	sp, #20
   10f5a:	af00      	add	r7, sp, #0
   10f5c:	6078      	str	r0, [r7, #4]
   10f5e:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
   10f60:	2300      	movs	r3, #0
   10f62:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   10f64:	2300      	movs	r3, #0
   10f66:	73bb      	strb	r3, [r7, #14]
   10f68:	7bbb      	ldrb	r3, [r7, #14]
   10f6a:	2b02      	cmp	r3, #2
   10f6c:	d86d      	bhi.n	1104a <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
   10f6e:	7bbb      	ldrb	r3, [r7, #14]
   10f70:	f1c3 0402 	rsb	r4, r3, #2
   10f74:	4b3c      	ldr	r3, [pc, #240]	; (11068 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   10f76:	6838      	ldr	r0, [r7, #0]
   10f78:	4798      	blx	r3
   10f7a:	4680      	mov	r8, r0
   10f7c:	4689      	mov	r9, r1
   10f7e:	7bbb      	ldrb	r3, [r7, #14]
   10f80:	f1c3 0302 	rsb	r3, r3, #2
   10f84:	4619      	mov	r1, r3
   10f86:	200a      	movs	r0, #10
   10f88:	4b38      	ldr	r3, [pc, #224]	; (1106c <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   10f8a:	4798      	blx	r3
   10f8c:	4602      	mov	r2, r0
   10f8e:	460b      	mov	r3, r1
   10f90:	4d37      	ldr	r5, [pc, #220]	; (11070 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
   10f92:	4640      	mov	r0, r8
   10f94:	4649      	mov	r1, r9
   10f96:	47a8      	blx	r5
   10f98:	4602      	mov	r2, r0
   10f9a:	460b      	mov	r3, r1
   10f9c:	4611      	mov	r1, r2
   10f9e:	461a      	mov	r2, r3
   10fa0:	4b34      	ldr	r3, [pc, #208]	; (11074 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   10fa2:	4608      	mov	r0, r1
   10fa4:	4611      	mov	r1, r2
   10fa6:	4798      	blx	r3
   10fa8:	4603      	mov	r3, r0
   10faa:	b2da      	uxtb	r2, r3
   10fac:	f107 0310 	add.w	r3, r7, #16
   10fb0:	4423      	add	r3, r4
   10fb2:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
   10fb6:	7bbb      	ldrb	r3, [r7, #14]
   10fb8:	f1c3 0302 	rsb	r3, r3, #2
   10fbc:	f107 0210 	add.w	r2, r7, #16
   10fc0:	4413      	add	r3, r2
   10fc2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   10fc6:	461a      	mov	r2, r3
   10fc8:	4b2b      	ldr	r3, [pc, #172]	; (11078 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
   10fca:	4610      	mov	r0, r2
   10fcc:	4798      	blx	r3
   10fce:	4605      	mov	r5, r0
   10fd0:	460e      	mov	r6, r1
   10fd2:	7bbb      	ldrb	r3, [r7, #14]
   10fd4:	f1c3 0302 	rsb	r3, r3, #2
   10fd8:	4619      	mov	r1, r3
   10fda:	200a      	movs	r0, #10
   10fdc:	4b23      	ldr	r3, [pc, #140]	; (1106c <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   10fde:	4798      	blx	r3
   10fe0:	4602      	mov	r2, r0
   10fe2:	460b      	mov	r3, r1
   10fe4:	4c25      	ldr	r4, [pc, #148]	; (1107c <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
   10fe6:	4628      	mov	r0, r5
   10fe8:	4631      	mov	r1, r6
   10fea:	47a0      	blx	r4
   10fec:	4603      	mov	r3, r0
   10fee:	460c      	mov	r4, r1
   10ff0:	461d      	mov	r5, r3
   10ff2:	4626      	mov	r6, r4
   10ff4:	4b1c      	ldr	r3, [pc, #112]	; (11068 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   10ff6:	6838      	ldr	r0, [r7, #0]
   10ff8:	4798      	blx	r3
   10ffa:	4c21      	ldr	r4, [pc, #132]	; (11080 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
   10ffc:	462a      	mov	r2, r5
   10ffe:	4633      	mov	r3, r6
   11000:	47a0      	blx	r4
   11002:	4603      	mov	r3, r0
   11004:	460c      	mov	r4, r1
   11006:	4619      	mov	r1, r3
   11008:	4622      	mov	r2, r4
   1100a:	4b1a      	ldr	r3, [pc, #104]	; (11074 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   1100c:	4608      	mov	r0, r1
   1100e:	4611      	mov	r1, r2
   11010:	4798      	blx	r3
   11012:	4603      	mov	r3, r0
   11014:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
   11016:	7bbb      	ldrb	r3, [r7, #14]
   11018:	f1c3 0302 	rsb	r3, r3, #2
   1101c:	f107 0210 	add.w	r2, r7, #16
   11020:	4413      	add	r3, r2
   11022:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   11026:	461a      	mov	r2, r3
   11028:	7bbb      	ldrb	r3, [r7, #14]
   1102a:	4619      	mov	r1, r3
   1102c:	009b      	lsls	r3, r3, #2
   1102e:	1acb      	subs	r3, r1, r3
   11030:	3306      	adds	r3, #6
   11032:	fa02 f303 	lsl.w	r3, r2, r3
   11036:	b25a      	sxtb	r2, r3
   11038:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1103c:	4313      	orrs	r3, r2
   1103e:	b25b      	sxtb	r3, r3
   11040:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   11042:	7bbb      	ldrb	r3, [r7, #14]
   11044:	3301      	adds	r3, #1
   11046:	73bb      	strb	r3, [r7, #14]
   11048:	e78e      	b.n	10f68 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
   1104a:	687b      	ldr	r3, [r7, #4]
   1104c:	681b      	ldr	r3, [r3, #0]
   1104e:	681b      	ldr	r3, [r3, #0]
   11050:	7bfa      	ldrb	r2, [r7, #15]
   11052:	4611      	mov	r1, r2
   11054:	6878      	ldr	r0, [r7, #4]
   11056:	4798      	blx	r3
   11058:	4603      	mov	r3, r0
   1105a:	73fb      	strb	r3, [r7, #15]
	return result;
   1105c:	7bfb      	ldrb	r3, [r7, #15]
	
}
   1105e:	4618      	mov	r0, r3
   11060:	3714      	adds	r7, #20
   11062:	46bd      	mov	sp, r7
   11064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11068:	00017cb9 	.word	0x00017cb9
   1106c:	00010f19 	.word	0x00010f19
   11070:	00017ff9 	.word	0x00017ff9
   11074:	00018305 	.word	0x00018305
   11078:	00017cd9 	.word	0x00017cd9
   1107c:	00017da5 	.word	0x00017da5
   11080:	00017a3d 	.word	0x00017a3d

00011084 <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
   11084:	b480      	push	{r7}
   11086:	b085      	sub	sp, #20
   11088:	af00      	add	r7, sp, #0
   1108a:	6078      	str	r0, [r7, #4]
   1108c:	460b      	mov	r3, r1
   1108e:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
   11090:	2300      	movs	r3, #0
   11092:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   11094:	2300      	movs	r3, #0
   11096:	60bb      	str	r3, [r7, #8]
   11098:	68bb      	ldr	r3, [r7, #8]
   1109a:	2b07      	cmp	r3, #7
   1109c:	dc13      	bgt.n	110c6 <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
   1109e:	7bfb      	ldrb	r3, [r7, #15]
   110a0:	005b      	lsls	r3, r3, #1
   110a2:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   110a4:	78fa      	ldrb	r2, [r7, #3]
   110a6:	68bb      	ldr	r3, [r7, #8]
   110a8:	fa42 f303 	asr.w	r3, r2, r3
   110ac:	b25b      	sxtb	r3, r3
   110ae:	f003 0301 	and.w	r3, r3, #1
   110b2:	b25a      	sxtb	r2, r3
   110b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
   110b8:	4313      	orrs	r3, r2
   110ba:	b25b      	sxtb	r3, r3
   110bc:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   110be:	68bb      	ldr	r3, [r7, #8]
   110c0:	3301      	adds	r3, #1
   110c2:	60bb      	str	r3, [r7, #8]
   110c4:	e7e8      	b.n	11098 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
   110c6:	7bfb      	ldrb	r3, [r7, #15]
}
   110c8:	4618      	mov	r0, r3
   110ca:	3714      	adds	r7, #20
   110cc:	46bd      	mov	sp, r7
   110ce:	bc80      	pop	{r7}
   110d0:	4770      	bx	lr

000110d2 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh>:
uint8_t ARINC_Conversions::GetIndexTXLabelarray(uint8_t l, uint8_t* arr){
   110d2:	b480      	push	{r7}
   110d4:	b085      	sub	sp, #20
   110d6:	af00      	add	r7, sp, #0
   110d8:	60f8      	str	r0, [r7, #12]
   110da:	460b      	mov	r3, r1
   110dc:	607a      	str	r2, [r7, #4]
   110de:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < 32; i++)
   110e0:	68fb      	ldr	r3, [r7, #12]
   110e2:	2200      	movs	r2, #0
   110e4:	711a      	strb	r2, [r3, #4]
   110e6:	68fb      	ldr	r3, [r7, #12]
   110e8:	791b      	ldrb	r3, [r3, #4]
   110ea:	2b1f      	cmp	r3, #31
   110ec:	dc12      	bgt.n	11114 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x42>
	{
		if (arr[i]==l)
   110ee:	68fb      	ldr	r3, [r7, #12]
   110f0:	791b      	ldrb	r3, [r3, #4]
   110f2:	461a      	mov	r2, r3
   110f4:	687b      	ldr	r3, [r7, #4]
   110f6:	4413      	add	r3, r2
   110f8:	781b      	ldrb	r3, [r3, #0]
   110fa:	7afa      	ldrb	r2, [r7, #11]
   110fc:	429a      	cmp	r2, r3
   110fe:	d102      	bne.n	11106 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x34>
		{
			return i;
   11100:	68fb      	ldr	r3, [r7, #12]
   11102:	791b      	ldrb	r3, [r3, #4]
   11104:	e007      	b.n	11116 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x44>
	for (i = 0; i < 32; i++)
   11106:	68fb      	ldr	r3, [r7, #12]
   11108:	791b      	ldrb	r3, [r3, #4]
   1110a:	3301      	adds	r3, #1
   1110c:	b2da      	uxtb	r2, r3
   1110e:	68fb      	ldr	r3, [r7, #12]
   11110:	711a      	strb	r2, [r3, #4]
   11112:	e7e8      	b.n	110e6 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x14>
		}
		
	}
	return 32;
   11114:	2320      	movs	r3, #32
}
   11116:	4618      	mov	r0, r3
   11118:	3714      	adds	r7, #20
   1111a:	46bd      	mov	sp, r7
   1111c:	bc80      	pop	{r7}
   1111e:	4770      	bx	lr

00011120 <_ZN17ARINC_Conversions21PrepareSingleTXBufferEPhS0_>:

void ARINC_Conversions::PrepareSingleTXBuffer(uint8_t* buff, uint8_t* src){
   11120:	b480      	push	{r7}
   11122:	b085      	sub	sp, #20
   11124:	af00      	add	r7, sp, #0
   11126:	60f8      	str	r0, [r7, #12]
   11128:	60b9      	str	r1, [r7, #8]
   1112a:	607a      	str	r2, [r7, #4]

	for (i = 0; i < 4; i++)
   1112c:	68fb      	ldr	r3, [r7, #12]
   1112e:	2200      	movs	r2, #0
   11130:	711a      	strb	r2, [r3, #4]
   11132:	68fb      	ldr	r3, [r7, #12]
   11134:	791b      	ldrb	r3, [r3, #4]
   11136:	2b03      	cmp	r3, #3
   11138:	dc14      	bgt.n	11164 <_ZN17ARINC_Conversions21PrepareSingleTXBufferEPhS0_+0x44>
	{
		buff[3-i]=src[i];
   1113a:	68fb      	ldr	r3, [r7, #12]
   1113c:	791b      	ldrb	r3, [r3, #4]
   1113e:	f1c3 0303 	rsb	r3, r3, #3
   11142:	461a      	mov	r2, r3
   11144:	68bb      	ldr	r3, [r7, #8]
   11146:	4413      	add	r3, r2
   11148:	68fa      	ldr	r2, [r7, #12]
   1114a:	7912      	ldrb	r2, [r2, #4]
   1114c:	4611      	mov	r1, r2
   1114e:	687a      	ldr	r2, [r7, #4]
   11150:	440a      	add	r2, r1
   11152:	7812      	ldrb	r2, [r2, #0]
   11154:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++)
   11156:	68fb      	ldr	r3, [r7, #12]
   11158:	791b      	ldrb	r3, [r3, #4]
   1115a:	3301      	adds	r3, #1
   1115c:	b2da      	uxtb	r2, r3
   1115e:	68fb      	ldr	r3, [r7, #12]
   11160:	711a      	strb	r2, [r3, #4]
   11162:	e7e6      	b.n	11132 <_ZN17ARINC_Conversions21PrepareSingleTXBufferEPhS0_+0x12>
	
		
	}


}
   11164:	bf00      	nop
   11166:	3714      	adds	r7, #20
   11168:	46bd      	mov	sp, r7
   1116a:	bc80      	pop	{r7}
   1116c:	4770      	bx	lr

0001116e <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh>:
uint32_t	ARINC_Conversions::FourBytesArray2Uint32(uint8_t* arr){
   1116e:	b480      	push	{r7}
   11170:	b083      	sub	sp, #12
   11172:	af00      	add	r7, sp, #0
   11174:	6078      	str	r0, [r7, #4]
   11176:	6039      	str	r1, [r7, #0]

		result=0;
   11178:	687b      	ldr	r3, [r7, #4]
   1117a:	2200      	movs	r2, #0
   1117c:	609a      	str	r2, [r3, #8]
		for (i = 0; i < 4; i++)
   1117e:	687b      	ldr	r3, [r7, #4]
   11180:	2200      	movs	r2, #0
   11182:	711a      	strb	r2, [r3, #4]
   11184:	687b      	ldr	r3, [r7, #4]
   11186:	791b      	ldrb	r3, [r3, #4]
   11188:	2b03      	cmp	r3, #3
   1118a:	dc18      	bgt.n	111be <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x50>
		{
			result|=((uint32_t)arr[i])<<(3-i);
   1118c:	687b      	ldr	r3, [r7, #4]
   1118e:	689a      	ldr	r2, [r3, #8]
   11190:	687b      	ldr	r3, [r7, #4]
   11192:	791b      	ldrb	r3, [r3, #4]
   11194:	4619      	mov	r1, r3
   11196:	683b      	ldr	r3, [r7, #0]
   11198:	440b      	add	r3, r1
   1119a:	781b      	ldrb	r3, [r3, #0]
   1119c:	4619      	mov	r1, r3
   1119e:	687b      	ldr	r3, [r7, #4]
   111a0:	791b      	ldrb	r3, [r3, #4]
   111a2:	f1c3 0303 	rsb	r3, r3, #3
   111a6:	fa01 f303 	lsl.w	r3, r1, r3
   111aa:	431a      	orrs	r2, r3
   111ac:	687b      	ldr	r3, [r7, #4]
   111ae:	609a      	str	r2, [r3, #8]
		for (i = 0; i < 4; i++)
   111b0:	687b      	ldr	r3, [r7, #4]
   111b2:	791b      	ldrb	r3, [r3, #4]
   111b4:	3301      	adds	r3, #1
   111b6:	b2da      	uxtb	r2, r3
   111b8:	687b      	ldr	r3, [r7, #4]
   111ba:	711a      	strb	r2, [r3, #4]
   111bc:	e7e2      	b.n	11184 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x16>

		}
		return result;
   111be:	687b      	ldr	r3, [r7, #4]
   111c0:	689b      	ldr	r3, [r3, #8]
   111c2:	4618      	mov	r0, r3
   111c4:	370c      	adds	r7, #12
   111c6:	46bd      	mov	sp, r7
   111c8:	bc80      	pop	{r7}
   111ca:	4770      	bx	lr

000111cc <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   111cc:	b480      	push	{r7}
   111ce:	b085      	sub	sp, #20
   111d0:	af00      	add	r7, sp, #0
   111d2:	60f8      	str	r0, [r7, #12]
   111d4:	460b      	mov	r3, r1
   111d6:	607a      	str	r2, [r7, #4]
   111d8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   111da:	7afb      	ldrb	r3, [r7, #11]
   111dc:	68fa      	ldr	r2, [r7, #12]
   111de:	01db      	lsls	r3, r3, #7
   111e0:	4413      	add	r3, r2
   111e2:	3318      	adds	r3, #24
   111e4:	687a      	ldr	r2, [r7, #4]
   111e6:	601a      	str	r2, [r3, #0]
}
   111e8:	bf00      	nop
   111ea:	3714      	adds	r7, #20
   111ec:	46bd      	mov	sp, r7
   111ee:	bc80      	pop	{r7}
   111f0:	4770      	bx	lr

000111f2 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   111f2:	b480      	push	{r7}
   111f4:	b085      	sub	sp, #20
   111f6:	af00      	add	r7, sp, #0
   111f8:	60f8      	str	r0, [r7, #12]
   111fa:	460b      	mov	r3, r1
   111fc:	607a      	str	r2, [r7, #4]
   111fe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   11200:	7afb      	ldrb	r3, [r7, #11]
   11202:	68fa      	ldr	r2, [r7, #12]
   11204:	01db      	lsls	r3, r3, #7
   11206:	4413      	add	r3, r2
   11208:	3314      	adds	r3, #20
   1120a:	687a      	ldr	r2, [r7, #4]
   1120c:	601a      	str	r2, [r3, #0]
}
   1120e:	bf00      	nop
   11210:	3714      	adds	r7, #20
   11212:	46bd      	mov	sp, r7
   11214:	bc80      	pop	{r7}
   11216:	4770      	bx	lr

00011218 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
   11218:	b580      	push	{r7, lr}
   1121a:	b082      	sub	sp, #8
   1121c:	af00      	add	r7, sp, #0
   1121e:	4603      	mov	r3, r0
   11220:	6039      	str	r1, [r7, #0]
   11222:	71fb      	strb	r3, [r7, #7]
   11224:	4613      	mov	r3, r2
   11226:	71bb      	strb	r3, [r7, #6]
	if (level) {
   11228:	79bb      	ldrb	r3, [r7, #6]
   1122a:	2b00      	cmp	r3, #0
   1122c:	d006      	beq.n	1123c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   1122e:	79fb      	ldrb	r3, [r7, #7]
   11230:	683a      	ldr	r2, [r7, #0]
   11232:	4619      	mov	r1, r3
   11234:	4806      	ldr	r0, [pc, #24]	; (11250 <_gpio_set_level+0x38>)
   11236:	4b07      	ldr	r3, [pc, #28]	; (11254 <_gpio_set_level+0x3c>)
   11238:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
   1123a:	e005      	b.n	11248 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   1123c:	79fb      	ldrb	r3, [r7, #7]
   1123e:	683a      	ldr	r2, [r7, #0]
   11240:	4619      	mov	r1, r3
   11242:	4803      	ldr	r0, [pc, #12]	; (11250 <_gpio_set_level+0x38>)
   11244:	4b04      	ldr	r3, [pc, #16]	; (11258 <_gpio_set_level+0x40>)
   11246:	4798      	blx	r3
}
   11248:	bf00      	nop
   1124a:	3708      	adds	r7, #8
   1124c:	46bd      	mov	sp, r7
   1124e:	bd80      	pop	{r7, pc}
   11250:	41008000 	.word	0x41008000
   11254:	000111cd 	.word	0x000111cd
   11258:	000111f3 	.word	0x000111f3

0001125c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
   1125c:	b580      	push	{r7, lr}
   1125e:	b082      	sub	sp, #8
   11260:	af00      	add	r7, sp, #0
   11262:	4603      	mov	r3, r0
   11264:	460a      	mov	r2, r1
   11266:	71fb      	strb	r3, [r7, #7]
   11268:	4613      	mov	r3, r2
   1126a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   1126c:	79fb      	ldrb	r3, [r7, #7]
   1126e:	115b      	asrs	r3, r3, #5
   11270:	b2d8      	uxtb	r0, r3
   11272:	79fb      	ldrb	r3, [r7, #7]
   11274:	f003 031f 	and.w	r3, r3, #31
   11278:	2201      	movs	r2, #1
   1127a:	fa02 f303 	lsl.w	r3, r2, r3
   1127e:	79ba      	ldrb	r2, [r7, #6]
   11280:	4619      	mov	r1, r3
   11282:	4b03      	ldr	r3, [pc, #12]	; (11290 <gpio_set_pin_level+0x34>)
   11284:	4798      	blx	r3
}
   11286:	bf00      	nop
   11288:	3708      	adds	r7, #8
   1128a:	46bd      	mov	sp, r7
   1128c:	bd80      	pop	{r7, pc}
   1128e:	bf00      	nop
   11290:	00011219 	.word	0x00011219

00011294 <_ZL10blink_LED0PK10timer_task>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(const struct timer_task *const timer_task){
   11294:	b480      	push	{r7}
   11296:	b083      	sub	sp, #12
   11298:	af00      	add	r7, sp, #0
   1129a:	6078      	str	r0, [r7, #4]
	//gpio_toggle_pin_level(LED0);
}
   1129c:	bf00      	nop
   1129e:	370c      	adds	r7, #12
   112a0:	46bd      	mov	sp, r7
   112a2:	bc80      	pop	{r7}
   112a4:	4770      	bx	lr
	...

000112a8 <_ZL9TxTimeoutPK10timer_task>:
static void TxTimeout(const struct timer_task *const timer_task){
   112a8:	b480      	push	{r7}
   112aa:	b083      	sub	sp, #12
   112ac:	af00      	add	r7, sp, #0
   112ae:	6078      	str	r0, [r7, #4]
	ptrARINCInterface->txTimeout=true;
   112b0:	4b04      	ldr	r3, [pc, #16]	; (112c4 <_ZL9TxTimeoutPK10timer_task+0x1c>)
   112b2:	681b      	ldr	r3, [r3, #0]
   112b4:	2201      	movs	r2, #1
   112b6:	749a      	strb	r2, [r3, #18]
}
   112b8:	bf00      	nop
   112ba:	370c      	adds	r7, #12
   112bc:	46bd      	mov	sp, r7
   112be:	bc80      	pop	{r7}
   112c0:	4770      	bx	lr
   112c2:	bf00      	nop
   112c4:	20003a48 	.word	0x20003a48

000112c8 <_ZL12Receiver1Intv>:

static void Receiver1Int(void){
   112c8:	b480      	push	{r7}
   112ca:	af00      	add	r7, sp, #0
	ptrARINCInterface->newMessageR1=true;
   112cc:	4b03      	ldr	r3, [pc, #12]	; (112dc <_ZL12Receiver1Intv+0x14>)
   112ce:	681b      	ldr	r3, [r3, #0]
   112d0:	2201      	movs	r2, #1
   112d2:	741a      	strb	r2, [r3, #16]
}
   112d4:	bf00      	nop
   112d6:	46bd      	mov	sp, r7
   112d8:	bc80      	pop	{r7}
   112da:	4770      	bx	lr
   112dc:	20003a48 	.word	0x20003a48

000112e0 <_ZN14Protocol_ClassC2Ev>:
uint32_t	rawWord;
}Datagram;



class Protocol_Class: public virtual ARINC_Conversions
   112e0:	b480      	push	{r7}
   112e2:	b083      	sub	sp, #12
   112e4:	af00      	add	r7, sp, #0
   112e6:	6078      	str	r0, [r7, #4]
   112e8:	6039      	str	r1, [r7, #0]
   112ea:	683b      	ldr	r3, [r7, #0]
   112ec:	681a      	ldr	r2, [r3, #0]
   112ee:	687b      	ldr	r3, [r7, #4]
   112f0:	601a      	str	r2, [r3, #0]
   112f2:	687b      	ldr	r3, [r7, #4]
   112f4:	681b      	ldr	r3, [r3, #0]
   112f6:	3b0c      	subs	r3, #12
   112f8:	681b      	ldr	r3, [r3, #0]
   112fa:	461a      	mov	r2, r3
   112fc:	687b      	ldr	r3, [r7, #4]
   112fe:	4413      	add	r3, r2
   11300:	683a      	ldr	r2, [r7, #0]
   11302:	6852      	ldr	r2, [r2, #4]
   11304:	601a      	str	r2, [r3, #0]
   11306:	687b      	ldr	r3, [r7, #4]
   11308:	4618      	mov	r0, r3
   1130a:	370c      	adds	r7, #12
   1130c:	46bd      	mov	sp, r7
   1130e:	bc80      	pop	{r7}
   11310:	4770      	bx	lr
	...

00011314 <_ZN15ARINC_InterfaceC2Ev>:

// default constructor
ARINC_Interface::ARINC_Interface()
   11314:	b580      	push	{r7, lr}
   11316:	b082      	sub	sp, #8
   11318:	af00      	add	r7, sp, #0
   1131a:	6078      	str	r0, [r7, #4]
   1131c:	6039      	str	r1, [r7, #0]
   1131e:	687a      	ldr	r2, [r7, #4]
   11320:	683b      	ldr	r3, [r7, #0]
   11322:	3304      	adds	r3, #4
   11324:	4619      	mov	r1, r3
   11326:	4610      	mov	r0, r2
   11328:	4b0e      	ldr	r3, [pc, #56]	; (11364 <_ZN15ARINC_InterfaceC2Ev+0x50>)
   1132a:	4798      	blx	r3
   1132c:	683b      	ldr	r3, [r7, #0]
   1132e:	681a      	ldr	r2, [r3, #0]
   11330:	687b      	ldr	r3, [r7, #4]
   11332:	601a      	str	r2, [r3, #0]
   11334:	687b      	ldr	r3, [r7, #4]
   11336:	681b      	ldr	r3, [r3, #0]
   11338:	3b0c      	subs	r3, #12
   1133a:	681b      	ldr	r3, [r3, #0]
   1133c:	461a      	mov	r2, r3
   1133e:	687b      	ldr	r3, [r7, #4]
   11340:	4413      	add	r3, r2
   11342:	683a      	ldr	r2, [r7, #0]
   11344:	68d2      	ldr	r2, [r2, #12]
   11346:	601a      	str	r2, [r3, #0]
   11348:	687b      	ldr	r3, [r7, #4]
   1134a:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
   1134e:	4618      	mov	r0, r3
   11350:	4b05      	ldr	r3, [pc, #20]	; (11368 <_ZN15ARINC_InterfaceC2Ev+0x54>)
   11352:	4798      	blx	r3
{
	ptrARINCInterface=this;
   11354:	4a05      	ldr	r2, [pc, #20]	; (1136c <_ZN15ARINC_InterfaceC2Ev+0x58>)
   11356:	687b      	ldr	r3, [r7, #4]
   11358:	6013      	str	r3, [r2, #0]

	//converter=ptrConverter;
} //ARINC_Interface
   1135a:	687b      	ldr	r3, [r7, #4]
   1135c:	4618      	mov	r0, r3
   1135e:	3708      	adds	r7, #8
   11360:	46bd      	mov	sp, r7
   11362:	bd80      	pop	{r7, pc}
   11364:	000112e1 	.word	0x000112e1
   11368:	00011a69 	.word	0x00011a69
   1136c:	20003a48 	.word	0x20003a48

00011370 <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
   11370:	b580      	push	{r7, lr}
   11372:	b082      	sub	sp, #8
   11374:	af00      	add	r7, sp, #0
   11376:	6078      	str	r0, [r7, #4]
   11378:	687b      	ldr	r3, [r7, #4]
   1137a:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1137e:	4618      	mov	r0, r3
   11380:	4b0e      	ldr	r3, [pc, #56]	; (113bc <_ZN15ARINC_InterfaceC1Ev+0x4c>)
   11382:	4798      	blx	r3
   11384:	687b      	ldr	r3, [r7, #4]
   11386:	4a0e      	ldr	r2, [pc, #56]	; (113c0 <_ZN15ARINC_InterfaceC1Ev+0x50>)
   11388:	4611      	mov	r1, r2
   1138a:	4618      	mov	r0, r3
   1138c:	4b0d      	ldr	r3, [pc, #52]	; (113c4 <_ZN15ARINC_InterfaceC1Ev+0x54>)
   1138e:	4798      	blx	r3
   11390:	4a0d      	ldr	r2, [pc, #52]	; (113c8 <_ZN15ARINC_InterfaceC1Ev+0x58>)
   11392:	687b      	ldr	r3, [r7, #4]
   11394:	601a      	str	r2, [r3, #0]
   11396:	687b      	ldr	r3, [r7, #4]
   11398:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1139c:	4a0b      	ldr	r2, [pc, #44]	; (113cc <_ZN15ARINC_InterfaceC1Ev+0x5c>)
   1139e:	601a      	str	r2, [r3, #0]
   113a0:	687b      	ldr	r3, [r7, #4]
   113a2:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
   113a6:	4618      	mov	r0, r3
   113a8:	4b09      	ldr	r3, [pc, #36]	; (113d0 <_ZN15ARINC_InterfaceC1Ev+0x60>)
   113aa:	4798      	blx	r3
	ptrARINCInterface=this;
   113ac:	4a09      	ldr	r2, [pc, #36]	; (113d4 <_ZN15ARINC_InterfaceC1Ev+0x64>)
   113ae:	687b      	ldr	r3, [r7, #4]
   113b0:	6013      	str	r3, [r2, #0]
} //ARINC_Interface
   113b2:	687b      	ldr	r3, [r7, #4]
   113b4:	4618      	mov	r0, r3
   113b6:	3708      	adds	r7, #8
   113b8:	46bd      	mov	sp, r7
   113ba:	bd80      	pop	{r7, pc}
   113bc:	00010ed9 	.word	0x00010ed9
   113c0:	0001ddfc 	.word	0x0001ddfc
   113c4:	000112e1 	.word	0x000112e1
   113c8:	0001ddd4 	.word	0x0001ddd4
   113cc:	0001ddf0 	.word	0x0001ddf0
   113d0:	00011a69 	.word	0x00011a69
   113d4:	20003a48 	.word	0x20003a48

000113d8 <_ZN15ARINC_InterfaceD2Ev>:


// default destructor
ARINC_Interface::~ARINC_Interface()
   113d8:	b580      	push	{r7, lr}
   113da:	b082      	sub	sp, #8
   113dc:	af00      	add	r7, sp, #0
   113de:	6078      	str	r0, [r7, #4]
   113e0:	6039      	str	r1, [r7, #0]
   113e2:	683b      	ldr	r3, [r7, #0]
   113e4:	681a      	ldr	r2, [r3, #0]
   113e6:	687b      	ldr	r3, [r7, #4]
   113e8:	601a      	str	r2, [r3, #0]
   113ea:	687b      	ldr	r3, [r7, #4]
   113ec:	681b      	ldr	r3, [r3, #0]
   113ee:	3b0c      	subs	r3, #12
   113f0:	681b      	ldr	r3, [r3, #0]
   113f2:	461a      	mov	r2, r3
   113f4:	687b      	ldr	r3, [r7, #4]
   113f6:	4413      	add	r3, r2
   113f8:	683a      	ldr	r2, [r7, #0]
   113fa:	68d2      	ldr	r2, [r2, #12]
   113fc:	601a      	str	r2, [r3, #0]
   113fe:	687b      	ldr	r3, [r7, #4]
   11400:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
   11404:	4618      	mov	r0, r3
   11406:	4b07      	ldr	r3, [pc, #28]	; (11424 <_ZN15ARINC_InterfaceD2Ev+0x4c>)
   11408:	4798      	blx	r3
   1140a:	687a      	ldr	r2, [r7, #4]
   1140c:	683b      	ldr	r3, [r7, #0]
   1140e:	3304      	adds	r3, #4
   11410:	4619      	mov	r1, r3
   11412:	4610      	mov	r0, r2
   11414:	4b04      	ldr	r3, [pc, #16]	; (11428 <_ZN15ARINC_InterfaceD2Ev+0x50>)
   11416:	4798      	blx	r3
{
} //~ARINC_Interface
   11418:	687b      	ldr	r3, [r7, #4]
   1141a:	4618      	mov	r0, r3
   1141c:	3708      	adds	r7, #8
   1141e:	46bd      	mov	sp, r7
   11420:	bd80      	pop	{r7, pc}
   11422:	bf00      	nop
   11424:	00011a89 	.word	0x00011a89
   11428:	000121a1 	.word	0x000121a1

0001142c <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
   1142c:	b580      	push	{r7, lr}
   1142e:	b082      	sub	sp, #8
   11430:	af00      	add	r7, sp, #0
   11432:	6078      	str	r0, [r7, #4]
   11434:	4a0f      	ldr	r2, [pc, #60]	; (11474 <_ZN15ARINC_InterfaceD1Ev+0x48>)
   11436:	687b      	ldr	r3, [r7, #4]
   11438:	601a      	str	r2, [r3, #0]
   1143a:	687b      	ldr	r3, [r7, #4]
   1143c:	f503 7340 	add.w	r3, r3, #768	; 0x300
   11440:	4a0d      	ldr	r2, [pc, #52]	; (11478 <_ZN15ARINC_InterfaceD1Ev+0x4c>)
   11442:	601a      	str	r2, [r3, #0]
   11444:	687b      	ldr	r3, [r7, #4]
   11446:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
   1144a:	4618      	mov	r0, r3
   1144c:	4b0b      	ldr	r3, [pc, #44]	; (1147c <_ZN15ARINC_InterfaceD1Ev+0x50>)
   1144e:	4798      	blx	r3
   11450:	687b      	ldr	r3, [r7, #4]
   11452:	4a0b      	ldr	r2, [pc, #44]	; (11480 <_ZN15ARINC_InterfaceD1Ev+0x54>)
   11454:	4611      	mov	r1, r2
   11456:	4618      	mov	r0, r3
   11458:	4b0a      	ldr	r3, [pc, #40]	; (11484 <_ZN15ARINC_InterfaceD1Ev+0x58>)
   1145a:	4798      	blx	r3
   1145c:	687b      	ldr	r3, [r7, #4]
   1145e:	f503 7340 	add.w	r3, r3, #768	; 0x300
   11462:	4618      	mov	r0, r3
   11464:	4b08      	ldr	r3, [pc, #32]	; (11488 <_ZN15ARINC_InterfaceD1Ev+0x5c>)
   11466:	4798      	blx	r3
} //~ARINC_Interface
   11468:	687b      	ldr	r3, [r7, #4]
   1146a:	4618      	mov	r0, r3
   1146c:	3708      	adds	r7, #8
   1146e:	46bd      	mov	sp, r7
   11470:	bd80      	pop	{r7, pc}
   11472:	bf00      	nop
   11474:	0001ddd4 	.word	0x0001ddd4
   11478:	0001ddf0 	.word	0x0001ddf0
   1147c:	00011a89 	.word	0x00011a89
   11480:	0001ddfc 	.word	0x0001ddfc
   11484:	000121a1 	.word	0x000121a1
   11488:	00010ef9 	.word	0x00010ef9

0001148c <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
   1148c:	b580      	push	{r7, lr}
   1148e:	b082      	sub	sp, #8
   11490:	af00      	add	r7, sp, #0
   11492:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
   11494:	6878      	ldr	r0, [r7, #4]
   11496:	4b06      	ldr	r3, [pc, #24]	; (114b0 <_ZN15ARINC_InterfaceD0Ev+0x24>)
   11498:	4798      	blx	r3
   1149a:	f44f 7143 	mov.w	r1, #780	; 0x30c
   1149e:	6878      	ldr	r0, [r7, #4]
   114a0:	4b04      	ldr	r3, [pc, #16]	; (114b4 <_ZN15ARINC_InterfaceD0Ev+0x28>)
   114a2:	4798      	blx	r3
   114a4:	687b      	ldr	r3, [r7, #4]
   114a6:	4618      	mov	r0, r3
   114a8:	3708      	adds	r7, #8
   114aa:	46bd      	mov	sp, r7
   114ac:	bd80      	pop	{r7, pc}
   114ae:	bf00      	nop
   114b0:	0001142d 	.word	0x0001142d
   114b4:	000167c9 	.word	0x000167c9

000114b8 <_ZN15ARINC_Interface4InitEv>:




bool	ARINC_Interface::Init(void){
   114b8:	b590      	push	{r4, r7, lr}
   114ba:	b083      	sub	sp, #12
   114bc:	af00      	add	r7, sp, #0
   114be:	6078      	str	r0, [r7, #4]
	MessageCount=0; MessageCount1=0; MessageCount2=0;
   114c0:	687b      	ldr	r3, [r7, #4]
   114c2:	2200      	movs	r2, #0
   114c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   114c8:	687b      	ldr	r3, [r7, #4]
   114ca:	2200      	movs	r2, #0
   114cc:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
   114d0:	687b      	ldr	r3, [r7, #4]
   114d2:	2200      	movs	r2, #0
   114d4:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
	BITRATE0=false;
   114d8:	687b      	ldr	r3, [r7, #4]
   114da:	2200      	movs	r2, #0
   114dc:	731a      	strb	r2, [r3, #12]
	BITRATE1=false;
   114de:	687b      	ldr	r3, [r7, #4]
   114e0:	2200      	movs	r2, #0
   114e2:	735a      	strb	r2, [r3, #13]
	BITRATE2=false;
   114e4:	687b      	ldr	r3, [r7, #4]
   114e6:	2200      	movs	r2, #0
   114e8:	739a      	strb	r2, [r3, #14]

	PARITY=false;
   114ea:	687b      	ldr	r3, [r7, #4]
   114ec:	2200      	movs	r2, #0
   114ee:	73da      	strb	r2, [r3, #15]
	HW_RESET();
   114f0:	6878      	ldr	r0, [r7, #4]
   114f2:	4b52      	ldr	r3, [pc, #328]	; (1163c <_ZN15ARINC_Interface4InitEv+0x184>)
   114f4:	4798      	blx	r3
	statusHolt=HI3593.Init();
   114f6:	687b      	ldr	r3, [r7, #4]
   114f8:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
   114fc:	4618      	mov	r0, r3
   114fe:	4b50      	ldr	r3, [pc, #320]	; (11640 <_ZN15ARINC_Interface4InitEv+0x188>)
   11500:	4798      	blx	r3
   11502:	4603      	mov	r3, r0
   11504:	461a      	mov	r2, r3
   11506:	687b      	ldr	r3, [r7, #4]
   11508:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
	if (statusHolt!=TSR_Default){
   1150c:	687b      	ldr	r3, [r7, #4]
   1150e:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
   11512:	2b01      	cmp	r3, #1
   11514:	d008      	beq.n	11528 <_ZN15ARINC_Interface4InitEv+0x70>
		usb.println("\n\rHI-3593 failed to Initilize\n\r");
   11516:	494b      	ldr	r1, [pc, #300]	; (11644 <_ZN15ARINC_Interface4InitEv+0x18c>)
   11518:	484b      	ldr	r0, [pc, #300]	; (11648 <_ZN15ARINC_Interface4InitEv+0x190>)
   1151a:	4b4c      	ldr	r3, [pc, #304]	; (1164c <_ZN15ARINC_Interface4InitEv+0x194>)
   1151c:	4798      	blx	r3
		isOK=false;
   1151e:	687b      	ldr	r3, [r7, #4]
   11520:	2200      	movs	r2, #0
   11522:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
   11526:	e06c      	b.n	11602 <_ZN15ARINC_Interface4InitEv+0x14a>
	}else{
		isOK=true;
   11528:	687b      	ldr	r3, [r7, #4]
   1152a:	2201      	movs	r2, #1
   1152c:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
		newMessageR1=false;
   11530:	687b      	ldr	r3, [r7, #4]
   11532:	2200      	movs	r2, #0
   11534:	741a      	strb	r2, [r3, #16]
		newMessageR2=false;
   11536:	687b      	ldr	r3, [r7, #4]
   11538:	2200      	movs	r2, #0
   1153a:	745a      	strb	r2, [r3, #17]
		BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
   1153c:	687b      	ldr	r3, [r7, #4]
   1153e:	2200      	movs	r2, #0
   11540:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		MessageCount=0;
   11544:	687b      	ldr	r3, [r7, #4]
   11546:	2200      	movs	r2, #0
   11548:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		ARINCLabel = 0x1D;         // Write ARINC Label
   1154c:	687b      	ldr	r3, [r7, #4]
   1154e:	221d      	movs	r2, #29
   11550:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
		Arate=0;
   11554:	687b      	ldr	r3, [r7, #4]
   11556:	2200      	movs	r2, #0
   11558:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		
		(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
   1155c:	687b      	ldr	r3, [r7, #4]
   1155e:	3313      	adds	r3, #19
   11560:	2210      	movs	r2, #16
   11562:	2100      	movs	r1, #0
   11564:	4618      	mov	r0, r3
   11566:	4b3a      	ldr	r3, [pc, #232]	; (11650 <_ZN15ARINC_Interface4InitEv+0x198>)
   11568:	4798      	blx	r3
			
		// Setup the Labels
		HI3593.initReceiver1Labels();     // initial Rec1 labels
   1156a:	687b      	ldr	r3, [r7, #4]
   1156c:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
   11570:	4618      	mov	r0, r3
   11572:	4b38      	ldr	r3, [pc, #224]	; (11654 <_ZN15ARINC_Interface4InitEv+0x19c>)
   11574:	4798      	blx	r3
		HI3593.initReceiver2Labels();     // initial Rec2 labels
   11576:	687b      	ldr	r3, [r7, #4]
   11578:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
   1157c:	4618      	mov	r0, r3
   1157e:	4b36      	ldr	r3, [pc, #216]	; (11658 <_ZN15ARINC_Interface4InitEv+0x1a0>)
   11580:	4798      	blx	r3
		HI3593.MultiByteRead(REC1MEMORY, 32, LabelsArrayTX); // read in all Rec-1 labels into the passed array
   11582:	687b      	ldr	r3, [r7, #4]
   11584:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
   11588:	687b      	ldr	r3, [r7, #4]
   1158a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1158e:	2220      	movs	r2, #32
   11590:	2198      	movs	r1, #152	; 0x98
   11592:	4c32      	ldr	r4, [pc, #200]	; (1165c <_ZN15ARINC_Interface4InitEv+0x1a4>)
   11594:	47a0      	blx	r4
		HI3593.MultiByteRead(REC2MEMORY, 32, LabelsArrayRX1); // read in all Rec-2 labels into the passed array
   11596:	687b      	ldr	r3, [r7, #4]
   11598:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
   1159c:	687b      	ldr	r3, [r7, #4]
   1159e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
   115a2:	2220      	movs	r2, #32
   115a4:	21b8      	movs	r1, #184	; 0xb8
   115a6:	4c2d      	ldr	r4, [pc, #180]	; (1165c <_ZN15ARINC_Interface4InitEv+0x1a4>)
   115a8:	47a0      	blx	r4

		Rec1Parity =0;
   115aa:	687b      	ldr	r3, [r7, #4]
   115ac:	2200      	movs	r2, #0
   115ae:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
		Rec2Parity =0;
   115b2:	687b      	ldr	r3, [r7, #4]
   115b4:	2200      	movs	r2, #0
   115b6:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf

		HI3593.W_CommandValue(REC1CR,RFLIP | PLON | LABREC | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
   115ba:	687b      	ldr	r3, [r7, #4]
   115bc:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
   115c0:	687b      	ldr	r3, [r7, #4]
   115c2:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
   115c6:	687b      	ldr	r3, [r7, #4]
   115c8:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
   115cc:	4313      	orrs	r3, r2
   115ce:	b2db      	uxtb	r3, r3
   115d0:	f063 0379 	orn	r3, r3, #121	; 0x79
   115d4:	b2db      	uxtb	r3, r3
   115d6:	461a      	mov	r2, r3
   115d8:	2110      	movs	r1, #16
   115da:	4b21      	ldr	r3, [pc, #132]	; (11660 <_ZN15ARINC_Interface4InitEv+0x1a8>)
   115dc:	4798      	blx	r3
		HI3593.W_CommandValue(REC2CR,RFLIP | PLON | LABREC | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
   115de:	687b      	ldr	r3, [r7, #4]
   115e0:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
   115e4:	687b      	ldr	r3, [r7, #4]
   115e6:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
   115ea:	687b      	ldr	r3, [r7, #4]
   115ec:	f893 31cf 	ldrb.w	r3, [r3, #463]	; 0x1cf
   115f0:	4313      	orrs	r3, r2
   115f2:	b2db      	uxtb	r3, r3
   115f4:	f063 0379 	orn	r3, r3, #121	; 0x79
   115f8:	b2db      	uxtb	r3, r3
   115fa:	461a      	mov	r2, r3
   115fc:	2124      	movs	r1, #36	; 0x24
   115fe:	4b18      	ldr	r3, [pc, #96]	; (11660 <_ZN15ARINC_Interface4InitEv+0x1a8>)
   11600:	4798      	blx	r3
	}
	
	arincTimer.Init();
   11602:	4818      	ldr	r0, [pc, #96]	; (11664 <_ZN15ARINC_Interface4InitEv+0x1ac>)
   11604:	4b18      	ldr	r3, [pc, #96]	; (11668 <_ZN15ARINC_Interface4InitEv+0x1b0>)
   11606:	4798      	blx	r3
	arincTimer.add_periodic_task(FUNC_PTR(blink_LED0),1000);
   11608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1160c:	4917      	ldr	r1, [pc, #92]	; (1166c <_ZN15ARINC_Interface4InitEv+0x1b4>)
   1160e:	4815      	ldr	r0, [pc, #84]	; (11664 <_ZN15ARINC_Interface4InitEv+0x1ac>)
   11610:	4b17      	ldr	r3, [pc, #92]	; (11670 <_ZN15ARINC_Interface4InitEv+0x1b8>)
   11612:	4798      	blx	r3
	arincTimer.add_periodic_task(FUNC_PTR(TxTimeout),500);
   11614:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   11618:	4916      	ldr	r1, [pc, #88]	; (11674 <_ZN15ARINC_Interface4InitEv+0x1bc>)
   1161a:	4812      	ldr	r0, [pc, #72]	; (11664 <_ZN15ARINC_Interface4InitEv+0x1ac>)
   1161c:	4b14      	ldr	r3, [pc, #80]	; (11670 <_ZN15ARINC_Interface4InitEv+0x1b8>)
   1161e:	4798      	blx	r3
	ext_irq_register(ARINCR1Int, Receiver1Int);
   11620:	4915      	ldr	r1, [pc, #84]	; (11678 <_ZN15ARINC_Interface4InitEv+0x1c0>)
   11622:	2057      	movs	r0, #87	; 0x57
   11624:	4b15      	ldr	r3, [pc, #84]	; (1167c <_ZN15ARINC_Interface4InitEv+0x1c4>)
   11626:	4798      	blx	r3
	arincTimer.start();
   11628:	480e      	ldr	r0, [pc, #56]	; (11664 <_ZN15ARINC_Interface4InitEv+0x1ac>)
   1162a:	4b15      	ldr	r3, [pc, #84]	; (11680 <_ZN15ARINC_Interface4InitEv+0x1c8>)
   1162c:	4798      	blx	r3
	//HI3893.InitPriorityLabels();
	return isOK;
   1162e:	687b      	ldr	r3, [r7, #4]
   11630:	f893 31c4 	ldrb.w	r3, [r3, #452]	; 0x1c4
}
   11634:	4618      	mov	r0, r3
   11636:	370c      	adds	r7, #12
   11638:	46bd      	mov	sp, r7
   1163a:	bd90      	pop	{r4, r7, pc}
   1163c:	00011929 	.word	0x00011929
   11640:	00011aa9 	.word	0x00011aa9
   11644:	0001d3bc 	.word	0x0001d3bc
   11648:	20005304 	.word	0x20005304
   1164c:	00015ad1 	.word	0x00015ad1
   11650:	00018c8d 	.word	0x00018c8d
   11654:	00011d05 	.word	0x00011d05
   11658:	00011e6d 	.word	0x00011e6d
   1165c:	00011ed9 	.word	0x00011ed9
   11660:	000120ad 	.word	0x000120ad
   11664:	200052e0 	.word	0x200052e0
   11668:	0001511d 	.word	0x0001511d
   1166c:	00011295 	.word	0x00011295
   11670:	000151f9 	.word	0x000151f9
   11674:	000112a9 	.word	0x000112a9
   11678:	000112c9 	.word	0x000112c9
   1167c:	00004eb1 	.word	0x00004eb1
   11680:	00015151 	.word	0x00015151

00011684 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
   11684:	b480      	push	{r7}
   11686:	b085      	sub	sp, #20
   11688:	af00      	add	r7, sp, #0
   1168a:	6078      	str	r0, [r7, #4]
   1168c:	460b      	mov	r3, r1
   1168e:	70fb      	strb	r3, [r7, #3]
	uint32_t *data;
	uint8_t	j;
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   11690:	2300      	movs	r3, #0
   11692:	73fb      	strb	r3, [r7, #15]
   11694:	7bfb      	ldrb	r3, [r7, #15]
   11696:	2b3f      	cmp	r3, #63	; 0x3f
   11698:	dc1e      	bgt.n	116d8 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x54>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
   1169a:	687b      	ldr	r3, [r7, #4]
   1169c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   116a0:	7bfb      	ldrb	r3, [r7, #15]
   116a2:	4413      	add	r3, r2
   116a4:	b2db      	uxtb	r3, r3
   116a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   116aa:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
   116ac:	7bbb      	ldrb	r3, [r7, #14]
   116ae:	687a      	ldr	r2, [r7, #4]
   116b0:	009b      	lsls	r3, r3, #2
   116b2:	4413      	add	r3, r2
   116b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   116b8:	78fa      	ldrb	r2, [r7, #3]
   116ba:	429a      	cmp	r2, r3
   116bc:	d108      	bne.n	116d0 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x4c>
		{
			data=(uint32_t*)receiverBuffer[j];
   116be:	7bbb      	ldrb	r3, [r7, #14]
   116c0:	3310      	adds	r3, #16
   116c2:	009b      	lsls	r3, r3, #2
   116c4:	687a      	ldr	r2, [r7, #4]
   116c6:	4413      	add	r3, r2
   116c8:	60bb      	str	r3, [r7, #8]
			return *data;
   116ca:	68bb      	ldr	r3, [r7, #8]
   116cc:	681b      	ldr	r3, [r3, #0]
   116ce:	e004      	b.n	116da <_ZN15ARINC_Interface15ReadBufferLabelEh+0x56>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   116d0:	7bfb      	ldrb	r3, [r7, #15]
   116d2:	3301      	adds	r3, #1
   116d4:	73fb      	strb	r3, [r7, #15]
   116d6:	e7dd      	b.n	11694 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
		}
		
	}

	return 0;
   116d8:	2300      	movs	r3, #0
}
   116da:	4618      	mov	r0, r3
   116dc:	3714      	adds	r7, #20
   116de:	46bd      	mov	sp, r7
   116e0:	bc80      	pop	{r7}
   116e2:	4770      	bx	lr

000116e4 <_ZN15ARINC_Interface18TrasmitSingleLabelEv>:
uint32_t ARINC_Interface::ReadBufferLabel(int label){
	uint8_t	l=Label2Byte((uint32_t)label);
	return (uint32_t)ReadBufferLabel(l);
}
uint32_t ARINC_Interface::TrasmitSingleLabel(void){
   116e4:	b580      	push	{r7, lr}
   116e6:	b082      	sub	sp, #8
   116e8:	af00      	add	r7, sp, #0
   116ea:	6078      	str	r0, [r7, #4]
	return	TrasmitSingleLabel(DEFAULT_LABEL);
   116ec:	f44f 7187 	mov.w	r1, #270	; 0x10e
   116f0:	6878      	ldr	r0, [r7, #4]
   116f2:	4b03      	ldr	r3, [pc, #12]	; (11700 <_ZN15ARINC_Interface18TrasmitSingleLabelEv+0x1c>)
   116f4:	4798      	blx	r3
   116f6:	4603      	mov	r3, r0
}
   116f8:	4618      	mov	r0, r3
   116fa:	3708      	adds	r7, #8
   116fc:	46bd      	mov	sp, r7
   116fe:	bd80      	pop	{r7, pc}
   11700:	00011705 	.word	0x00011705

00011704 <_ZN15ARINC_Interface18TrasmitSingleLabelEm>:

uint32_t ARINC_Interface::TrasmitSingleLabel(uint32_t l){
   11704:	b580      	push	{r7, lr}
   11706:	b084      	sub	sp, #16
   11708:	af00      	add	r7, sp, #0
   1170a:	6078      	str	r0, [r7, #4]
   1170c:	6039      	str	r1, [r7, #0]
	gpio_set_pin_level(LED0,true);
   1170e:	2101      	movs	r1, #1
   11710:	2052      	movs	r0, #82	; 0x52
   11712:	4b41      	ldr	r3, [pc, #260]	; (11818 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x114>)
   11714:	4798      	blx	r3
	ARINCLabel=Label2Byte(l);
   11716:	687b      	ldr	r3, [r7, #4]
   11718:	681b      	ldr	r3, [r3, #0]
   1171a:	3b0c      	subs	r3, #12
   1171c:	681b      	ldr	r3, [r3, #0]
   1171e:	461a      	mov	r2, r3
   11720:	687b      	ldr	r3, [r7, #4]
   11722:	4413      	add	r3, r2
   11724:	681b      	ldr	r3, [r3, #0]
   11726:	3304      	adds	r3, #4
   11728:	681b      	ldr	r3, [r3, #0]
   1172a:	687a      	ldr	r2, [r7, #4]
   1172c:	6812      	ldr	r2, [r2, #0]
   1172e:	3a0c      	subs	r2, #12
   11730:	6812      	ldr	r2, [r2, #0]
   11732:	4611      	mov	r1, r2
   11734:	687a      	ldr	r2, [r7, #4]
   11736:	440a      	add	r2, r1
   11738:	6839      	ldr	r1, [r7, #0]
   1173a:	4610      	mov	r0, r2
   1173c:	4798      	blx	r3
   1173e:	4603      	mov	r3, r0
   11740:	461a      	mov	r2, r3
   11742:	687b      	ldr	r3, [r7, #4]
   11744:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
	index=GetIndexTXLabelarray(l,LabelsArrayTX);
   11748:	687b      	ldr	r3, [r7, #4]
   1174a:	681b      	ldr	r3, [r3, #0]
   1174c:	3b0c      	subs	r3, #12
   1174e:	681b      	ldr	r3, [r3, #0]
   11750:	461a      	mov	r2, r3
   11752:	687b      	ldr	r3, [r7, #4]
   11754:	1898      	adds	r0, r3, r2
   11756:	683b      	ldr	r3, [r7, #0]
   11758:	b2d9      	uxtb	r1, r3
   1175a:	687b      	ldr	r3, [r7, #4]
   1175c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   11760:	461a      	mov	r2, r3
   11762:	4b2e      	ldr	r3, [pc, #184]	; (1181c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x118>)
   11764:	4798      	blx	r3
   11766:	4603      	mov	r3, r0
   11768:	461a      	mov	r2, r3
   1176a:	687b      	ldr	r3, [r7, #4]
   1176c:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
	uint8_t localBuffer[4];
	memcpy(localBuffer,&transmitBuffer[index][0],4);
   11770:	687b      	ldr	r3, [r7, #4]
   11772:	f893 31d3 	ldrb.w	r3, [r3, #467]	; 0x1d3
   11776:	3330      	adds	r3, #48	; 0x30
   11778:	009b      	lsls	r3, r3, #2
   1177a:	687a      	ldr	r2, [r7, #4]
   1177c:	4413      	add	r3, r2
   1177e:	681b      	ldr	r3, [r3, #0]
   11780:	60fb      	str	r3, [r7, #12]
	PrepareSingleTXBuffer(TXBuffer,LabelsArrayTX);
   11782:	687b      	ldr	r3, [r7, #4]
   11784:	681b      	ldr	r3, [r3, #0]
   11786:	3b0c      	subs	r3, #12
   11788:	681b      	ldr	r3, [r3, #0]
   1178a:	461a      	mov	r2, r3
   1178c:	687b      	ldr	r3, [r7, #4]
   1178e:	1898      	adds	r0, r3, r2
   11790:	687b      	ldr	r3, [r7, #4]
   11792:	f103 0113 	add.w	r1, r3, #19
   11796:	687b      	ldr	r3, [r7, #4]
   11798:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1179c:	461a      	mov	r2, r3
   1179e:	4b20      	ldr	r3, [pc, #128]	; (11820 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x11c>)
   117a0:	4798      	blx	r3
	usb.println(" transmitting...");
   117a2:	4920      	ldr	r1, [pc, #128]	; (11824 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x120>)
   117a4:	4820      	ldr	r0, [pc, #128]	; (11828 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x124>)
   117a6:	4b21      	ldr	r3, [pc, #132]	; (1182c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x128>)
   117a8:	4798      	blx	r3
	cpu_irq_disable();
   117aa:	6878      	ldr	r0, [r7, #4]
   117ac:	4b20      	ldr	r3, [pc, #128]	; (11830 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x12c>)
   117ae:	4798      	blx	r3
	HI3593.TransmitCommandAndData(TXFIFO,TXBuffer);
   117b0:	687b      	ldr	r3, [r7, #4]
   117b2:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
   117b6:	687b      	ldr	r3, [r7, #4]
   117b8:	3313      	adds	r3, #19
   117ba:	461a      	mov	r2, r3
   117bc:	210c      	movs	r1, #12
   117be:	4b1d      	ldr	r3, [pc, #116]	; (11834 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   117c0:	4798      	blx	r3
	cpu_irq_enable();
   117c2:	6878      	ldr	r0, [r7, #4]
   117c4:	4b1c      	ldr	r3, [pc, #112]	; (11838 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   117c6:	4798      	blx	r3
	usb.println(" Transmitted!");
   117c8:	491c      	ldr	r1, [pc, #112]	; (1183c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x138>)
   117ca:	4817      	ldr	r0, [pc, #92]	; (11828 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x124>)
   117cc:	4b17      	ldr	r3, [pc, #92]	; (1182c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x128>)
   117ce:	4798      	blx	r3
	usb.println(">");
   117d0:	491b      	ldr	r1, [pc, #108]	; (11840 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x13c>)
   117d2:	4815      	ldr	r0, [pc, #84]	; (11828 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x124>)
   117d4:	4b15      	ldr	r3, [pc, #84]	; (1182c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x128>)
   117d6:	4798      	blx	r3
	printARINCTXData(TXBuffer);
   117d8:	687b      	ldr	r3, [r7, #4]
   117da:	3313      	adds	r3, #19
   117dc:	4619      	mov	r1, r3
   117de:	6878      	ldr	r0, [r7, #4]
   117e0:	4b18      	ldr	r3, [pc, #96]	; (11844 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x140>)
   117e2:	4798      	blx	r3
	txTimeout=false;
   117e4:	687b      	ldr	r3, [r7, #4]
   117e6:	2200      	movs	r2, #0
   117e8:	749a      	strb	r2, [r3, #18]
	gpio_set_pin_level(LED0,false);
   117ea:	2100      	movs	r1, #0
   117ec:	2052      	movs	r0, #82	; 0x52
   117ee:	4b0a      	ldr	r3, [pc, #40]	; (11818 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x114>)
   117f0:	4798      	blx	r3
	return FourBytesArray2Uint32(TXBuffer);
   117f2:	687b      	ldr	r3, [r7, #4]
   117f4:	681b      	ldr	r3, [r3, #0]
   117f6:	3b0c      	subs	r3, #12
   117f8:	681b      	ldr	r3, [r3, #0]
   117fa:	461a      	mov	r2, r3
   117fc:	687b      	ldr	r3, [r7, #4]
   117fe:	441a      	add	r2, r3
   11800:	687b      	ldr	r3, [r7, #4]
   11802:	3313      	adds	r3, #19
   11804:	4619      	mov	r1, r3
   11806:	4610      	mov	r0, r2
   11808:	4b0f      	ldr	r3, [pc, #60]	; (11848 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x144>)
   1180a:	4798      	blx	r3
   1180c:	4603      	mov	r3, r0
}
   1180e:	4618      	mov	r0, r3
   11810:	3710      	adds	r7, #16
   11812:	46bd      	mov	sp, r7
   11814:	bd80      	pop	{r7, pc}
   11816:	bf00      	nop
   11818:	0001125d 	.word	0x0001125d
   1181c:	000110d3 	.word	0x000110d3
   11820:	00011121 	.word	0x00011121
   11824:	0001d418 	.word	0x0001d418
   11828:	20005304 	.word	0x20005304
   1182c:	00015ad1 	.word	0x00015ad1
   11830:	00011865 	.word	0x00011865
   11834:	00011fad 	.word	0x00011fad
   11838:	0001184d 	.word	0x0001184d
   1183c:	0001d42c 	.word	0x0001d42c
   11840:	0001d43c 	.word	0x0001d43c
   11844:	000118b5 	.word	0x000118b5
   11848:	0001116f 	.word	0x0001116f

0001184c <_ZN15ARINC_Interface14cpu_irq_enableEv>:
	usb.println("  I = Increment Message and Transmit. Explorer Mode  - ONLY!");
	usb.println("  M = Enter Custom Message. Explorer Mode  - ONLY!");
	usb.println("  ENTER= Transmit next message. Explorer Mode  - ONLY!");
}

void	ARINC_Interface::cpu_irq_enable(void){
   1184c:	b480      	push	{r7}
   1184e:	b083      	sub	sp, #12
   11850:	af00      	add	r7, sp, #0
   11852:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   11854:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   11858:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
   1185a:	bf00      	nop
   1185c:	370c      	adds	r7, #12
   1185e:	46bd      	mov	sp, r7
   11860:	bc80      	pop	{r7}
   11862:	4770      	bx	lr

00011864 <_ZN15ARINC_Interface15cpu_irq_disableEv>:
void	ARINC_Interface::cpu_irq_disable(void){
   11864:	b480      	push	{r7}
   11866:	b083      	sub	sp, #12
   11868:	af00      	add	r7, sp, #0
   1186a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   1186c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   11870:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
   11872:	bf00      	nop
   11874:	370c      	adds	r7, #12
   11876:	46bd      	mov	sp, r7
   11878:	bc80      	pop	{r7}
   1187a:	4770      	bx	lr

0001187c <_ZN15ARINC_Interface12PrintHexByteEh>:
	usb.write(&p,1);
	p=0x0D;
	usb.write(&p,1);
}
void ARINC_Interface::PrintHexByte(uint8_t c)
{
   1187c:	b580      	push	{r7, lr}
   1187e:	b082      	sub	sp, #8
   11880:	af00      	add	r7, sp, #0
   11882:	6078      	str	r0, [r7, #4]
   11884:	460b      	mov	r3, r1
   11886:	70fb      	strb	r3, [r7, #3]
	usb<<"0x ";
   11888:	4906      	ldr	r1, [pc, #24]	; (118a4 <_ZN15ARINC_Interface12PrintHexByteEh+0x28>)
   1188a:	4807      	ldr	r0, [pc, #28]	; (118a8 <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   1188c:	4b07      	ldr	r3, [pc, #28]	; (118ac <_ZN15ARINC_Interface12PrintHexByteEh+0x30>)
   1188e:	4798      	blx	r3
	usb.println(c,HEX);
   11890:	78fb      	ldrb	r3, [r7, #3]
   11892:	2210      	movs	r2, #16
   11894:	4619      	mov	r1, r3
   11896:	4804      	ldr	r0, [pc, #16]	; (118a8 <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   11898:	4b05      	ldr	r3, [pc, #20]	; (118b0 <_ZN15ARINC_Interface12PrintHexByteEh+0x34>)
   1189a:	4798      	blx	r3
	
}
   1189c:	bf00      	nop
   1189e:	3708      	adds	r7, #8
   118a0:	46bd      	mov	sp, r7
   118a2:	bd80      	pop	{r7, pc}
   118a4:	0001d8dc 	.word	0x0001d8dc
   118a8:	20005304 	.word	0x20005304
   118ac:	00000ccd 	.word	0x00000ccd
   118b0:	00015b05 	.word	0x00015b05

000118b4 <_ZN15ARINC_Interface16printARINCTXDataEPh>:
		usb.println("\n\rLabels 192-255:  ");
	}
	
}

void ARINC_Interface::printARINCTXData(unsigned char *array) {
   118b4:	b580      	push	{r7, lr}
   118b6:	b084      	sub	sp, #16
   118b8:	af00      	add	r7, sp, #0
   118ba:	6078      	str	r0, [r7, #4]
   118bc:	6039      	str	r1, [r7, #0]
	unsigned char i;
	
	usb.println("\n\r>TX    Data:");
   118be:	4914      	ldr	r1, [pc, #80]	; (11910 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x5c>)
   118c0:	4814      	ldr	r0, [pc, #80]	; (11914 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   118c2:	4b15      	ldr	r3, [pc, #84]	; (11918 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   118c4:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   118c6:	2300      	movs	r3, #0
   118c8:	73fb      	strb	r3, [r7, #15]
   118ca:	7bfb      	ldrb	r3, [r7, #15]
   118cc:	2b02      	cmp	r3, #2
   118ce:	dc0b      	bgt.n	118e8 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x34>
		PrintHexByte(array[i]);          // Output the data
   118d0:	7bfb      	ldrb	r3, [r7, #15]
   118d2:	683a      	ldr	r2, [r7, #0]
   118d4:	4413      	add	r3, r2
   118d6:	781b      	ldrb	r3, [r3, #0]
   118d8:	4619      	mov	r1, r3
   118da:	6878      	ldr	r0, [r7, #4]
   118dc:	4b0f      	ldr	r3, [pc, #60]	; (1191c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   118de:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   118e0:	7bfb      	ldrb	r3, [r7, #15]
   118e2:	3301      	adds	r3, #1
   118e4:	73fb      	strb	r3, [r7, #15]
   118e6:	e7f0      	b.n	118ca <_ZN15ARINC_Interface16printARINCTXDataEPh+0x16>
	}
	usb.println("Label:");
   118e8:	490d      	ldr	r1, [pc, #52]	; (11920 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x6c>)
   118ea:	480a      	ldr	r0, [pc, #40]	; (11914 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   118ec:	4b0a      	ldr	r3, [pc, #40]	; (11918 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   118ee:	4798      	blx	r3
	PrintHexByte(array[3]);             // Output the label data
   118f0:	683b      	ldr	r3, [r7, #0]
   118f2:	3303      	adds	r3, #3
   118f4:	781b      	ldrb	r3, [r3, #0]
   118f6:	4619      	mov	r1, r3
   118f8:	6878      	ldr	r0, [r7, #4]
   118fa:	4b08      	ldr	r3, [pc, #32]	; (1191c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   118fc:	4798      	blx	r3
	
	//crlf();
	usb.println(">");
   118fe:	4909      	ldr	r1, [pc, #36]	; (11924 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x70>)
   11900:	4804      	ldr	r0, [pc, #16]	; (11914 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   11902:	4b05      	ldr	r3, [pc, #20]	; (11918 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   11904:	4798      	blx	r3
}
   11906:	bf00      	nop
   11908:	3710      	adds	r7, #16
   1190a:	46bd      	mov	sp, r7
   1190c:	bd80      	pop	{r7, pc}
   1190e:	bf00      	nop
   11910:	0001daa0 	.word	0x0001daa0
   11914:	20005304 	.word	0x20005304
   11918:	00015ad1 	.word	0x00015ad1
   1191c:	0001187d 	.word	0x0001187d
   11920:	0001dab0 	.word	0x0001dab0
   11924:	0001d43c 	.word	0x0001d43c

00011928 <_ZN15ARINC_Interface8HW_RESETEv>:
	//crlf();
	usb.println("\n\r");
	usb.println(">");
}

void ARINC_Interface::HW_RESET(void){
   11928:	b580      	push	{r7, lr}
   1192a:	b082      	sub	sp, #8
   1192c:	af00      	add	r7, sp, #0
   1192e:	6078      	str	r0, [r7, #4]
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
   11930:	2001      	movs	r0, #1
   11932:	4b03      	ldr	r3, [pc, #12]	; (11940 <_ZN15ARINC_Interface8HW_RESETEv+0x18>)
   11934:	4798      	blx	r3
	//gpio_set_pin_level(MR,false);
}
   11936:	bf00      	nop
   11938:	3708      	adds	r7, #8
   1193a:	46bd      	mov	sp, r7
   1193c:	bd80      	pop	{r7, pc}
   1193e:	bf00      	nop
   11940:	00004de9 	.word	0x00004de9

00011944 <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

   11944:	b580      	push	{r7, lr}
   11946:	b082      	sub	sp, #8
   11948:	af00      	add	r7, sp, #0
   1194a:	6078      	str	r0, [r7, #4]
   1194c:	6039      	str	r1, [r7, #0]
   1194e:	687b      	ldr	r3, [r7, #4]
   11950:	2b01      	cmp	r3, #1
   11952:	d10c      	bne.n	1196e <_Z41__static_initialization_and_destruction_0ii+0x2a>
   11954:	683b      	ldr	r3, [r7, #0]
   11956:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1195a:	4293      	cmp	r3, r2
   1195c:	d107      	bne.n	1196e <_Z41__static_initialization_and_destruction_0ii+0x2a>
   1195e:	4806      	ldr	r0, [pc, #24]	; (11978 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11960:	4b06      	ldr	r3, [pc, #24]	; (1197c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11962:	4798      	blx	r3
   11964:	4a06      	ldr	r2, [pc, #24]	; (11980 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11966:	4907      	ldr	r1, [pc, #28]	; (11984 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   11968:	4803      	ldr	r0, [pc, #12]	; (11978 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1196a:	4b07      	ldr	r3, [pc, #28]	; (11988 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1196c:	4798      	blx	r3
   1196e:	bf00      	nop
   11970:	3708      	adds	r7, #8
   11972:	46bd      	mov	sp, r7
   11974:	bd80      	pop	{r7, pc}
   11976:	bf00      	nop
   11978:	20003a4c 	.word	0x20003a4c
   1197c:	00011371 	.word	0x00011371
   11980:	20000000 	.word	0x20000000
   11984:	0001142d 	.word	0x0001142d
   11988:	000167bd 	.word	0x000167bd

0001198c <_GLOBAL__sub_I_HexSymbols>:
   1198c:	b580      	push	{r7, lr}
   1198e:	af00      	add	r7, sp, #0
   11990:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11994:	2001      	movs	r0, #1
   11996:	4b01      	ldr	r3, [pc, #4]	; (1199c <_GLOBAL__sub_I_HexSymbols+0x10>)
   11998:	4798      	blx	r3
   1199a:	bd80      	pop	{r7, pc}
   1199c:	00011945 	.word	0x00011945

000119a0 <hri_port_set_OUT_reg>:
{
   119a0:	b480      	push	{r7}
   119a2:	b085      	sub	sp, #20
   119a4:	af00      	add	r7, sp, #0
   119a6:	60f8      	str	r0, [r7, #12]
   119a8:	460b      	mov	r3, r1
   119aa:	607a      	str	r2, [r7, #4]
   119ac:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   119ae:	7afb      	ldrb	r3, [r7, #11]
   119b0:	68fa      	ldr	r2, [r7, #12]
   119b2:	01db      	lsls	r3, r3, #7
   119b4:	4413      	add	r3, r2
   119b6:	3318      	adds	r3, #24
   119b8:	687a      	ldr	r2, [r7, #4]
   119ba:	601a      	str	r2, [r3, #0]
}
   119bc:	bf00      	nop
   119be:	3714      	adds	r7, #20
   119c0:	46bd      	mov	sp, r7
   119c2:	bc80      	pop	{r7}
   119c4:	4770      	bx	lr

000119c6 <hri_port_clear_OUT_reg>:
{
   119c6:	b480      	push	{r7}
   119c8:	b085      	sub	sp, #20
   119ca:	af00      	add	r7, sp, #0
   119cc:	60f8      	str	r0, [r7, #12]
   119ce:	460b      	mov	r3, r1
   119d0:	607a      	str	r2, [r7, #4]
   119d2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   119d4:	7afb      	ldrb	r3, [r7, #11]
   119d6:	68fa      	ldr	r2, [r7, #12]
   119d8:	01db      	lsls	r3, r3, #7
   119da:	4413      	add	r3, r2
   119dc:	3314      	adds	r3, #20
   119de:	687a      	ldr	r2, [r7, #4]
   119e0:	601a      	str	r2, [r3, #0]
}
   119e2:	bf00      	nop
   119e4:	3714      	adds	r7, #20
   119e6:	46bd      	mov	sp, r7
   119e8:	bc80      	pop	{r7}
   119ea:	4770      	bx	lr

000119ec <_gpio_set_level>:
{
   119ec:	b580      	push	{r7, lr}
   119ee:	b082      	sub	sp, #8
   119f0:	af00      	add	r7, sp, #0
   119f2:	4603      	mov	r3, r0
   119f4:	6039      	str	r1, [r7, #0]
   119f6:	71fb      	strb	r3, [r7, #7]
   119f8:	4613      	mov	r3, r2
   119fa:	71bb      	strb	r3, [r7, #6]
	if (level) {
   119fc:	79bb      	ldrb	r3, [r7, #6]
   119fe:	2b00      	cmp	r3, #0
   11a00:	d006      	beq.n	11a10 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   11a02:	79fb      	ldrb	r3, [r7, #7]
   11a04:	683a      	ldr	r2, [r7, #0]
   11a06:	4619      	mov	r1, r3
   11a08:	4806      	ldr	r0, [pc, #24]	; (11a24 <_gpio_set_level+0x38>)
   11a0a:	4b07      	ldr	r3, [pc, #28]	; (11a28 <_gpio_set_level+0x3c>)
   11a0c:	4798      	blx	r3
}
   11a0e:	e005      	b.n	11a1c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   11a10:	79fb      	ldrb	r3, [r7, #7]
   11a12:	683a      	ldr	r2, [r7, #0]
   11a14:	4619      	mov	r1, r3
   11a16:	4803      	ldr	r0, [pc, #12]	; (11a24 <_gpio_set_level+0x38>)
   11a18:	4b04      	ldr	r3, [pc, #16]	; (11a2c <_gpio_set_level+0x40>)
   11a1a:	4798      	blx	r3
}
   11a1c:	bf00      	nop
   11a1e:	3708      	adds	r7, #8
   11a20:	46bd      	mov	sp, r7
   11a22:	bd80      	pop	{r7, pc}
   11a24:	41008000 	.word	0x41008000
   11a28:	000119a1 	.word	0x000119a1
   11a2c:	000119c7 	.word	0x000119c7

00011a30 <gpio_set_pin_level>:
{
   11a30:	b580      	push	{r7, lr}
   11a32:	b082      	sub	sp, #8
   11a34:	af00      	add	r7, sp, #0
   11a36:	4603      	mov	r3, r0
   11a38:	460a      	mov	r2, r1
   11a3a:	71fb      	strb	r3, [r7, #7]
   11a3c:	4613      	mov	r3, r2
   11a3e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   11a40:	79fb      	ldrb	r3, [r7, #7]
   11a42:	115b      	asrs	r3, r3, #5
   11a44:	b2d8      	uxtb	r0, r3
   11a46:	79fb      	ldrb	r3, [r7, #7]
   11a48:	f003 031f 	and.w	r3, r3, #31
   11a4c:	2201      	movs	r2, #1
   11a4e:	fa02 f303 	lsl.w	r3, r2, r3
   11a52:	79ba      	ldrb	r2, [r7, #6]
   11a54:	4619      	mov	r1, r3
   11a56:	4b03      	ldr	r3, [pc, #12]	; (11a64 <gpio_set_pin_level+0x34>)
   11a58:	4798      	blx	r3
}
   11a5a:	bf00      	nop
   11a5c:	3708      	adds	r7, #8
   11a5e:	46bd      	mov	sp, r7
   11a60:	bd80      	pop	{r7, pc}
   11a62:	bf00      	nop
   11a64:	000119ed 	.word	0x000119ed

00011a68 <_ZN15Holt_3593_ClassC1Ev>:
#include "Holt_3593_Class.h"
#include "ARINC_Interface.h"
#include "string.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
   11a68:	b580      	push	{r7, lr}
   11a6a:	b082      	sub	sp, #8
   11a6c:	af00      	add	r7, sp, #0
   11a6e:	6078      	str	r0, [r7, #4]
   11a70:	687b      	ldr	r3, [r7, #4]
   11a72:	4618      	mov	r0, r3
   11a74:	4b03      	ldr	r3, [pc, #12]	; (11a84 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
   11a76:	4798      	blx	r3
{
} //Holt_3593_Class
   11a78:	687b      	ldr	r3, [r7, #4]
   11a7a:	4618      	mov	r0, r3
   11a7c:	3708      	adds	r7, #8
   11a7e:	46bd      	mov	sp, r7
   11a80:	bd80      	pop	{r7, pc}
   11a82:	bf00      	nop
   11a84:	000136b9 	.word	0x000136b9

00011a88 <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
   11a88:	b580      	push	{r7, lr}
   11a8a:	b082      	sub	sp, #8
   11a8c:	af00      	add	r7, sp, #0
   11a8e:	6078      	str	r0, [r7, #4]
   11a90:	687b      	ldr	r3, [r7, #4]
   11a92:	4618      	mov	r0, r3
   11a94:	4b03      	ldr	r3, [pc, #12]	; (11aa4 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
   11a96:	4798      	blx	r3
{
} //~Holt_3593_Class
   11a98:	687b      	ldr	r3, [r7, #4]
   11a9a:	4618      	mov	r0, r3
   11a9c:	3708      	adds	r7, #8
   11a9e:	46bd      	mov	sp, r7
   11aa0:	bd80      	pop	{r7, pc}
   11aa2:	bf00      	nop
   11aa4:	000136d9 	.word	0x000136d9

00011aa8 <_ZN15Holt_3593_Class4InitEv>:

// Priority Label-1 Table     
unsigned char LabelPriority2 [3];

  
 uint8_t	Holt_3593_Class::Init(void){
   11aa8:	b590      	push	{r4, r7, lr}
   11aaa:	b089      	sub	sp, #36	; 0x24
   11aac:	af02      	add	r7, sp, #8
   11aae:	6078      	str	r0, [r7, #4]
	 
	 spi.SetDescriptor(&SPI_HI3593);
   11ab0:	687b      	ldr	r3, [r7, #4]
   11ab2:	493e      	ldr	r1, [pc, #248]	; (11bac <_ZN15Holt_3593_Class4InitEv+0x104>)
   11ab4:	4618      	mov	r0, r3
   11ab6:	4b3e      	ldr	r3, [pc, #248]	; (11bb0 <_ZN15Holt_3593_Class4InitEv+0x108>)
   11ab8:	4798      	blx	r3
	  spi.init();
   11aba:	687b      	ldr	r3, [r7, #4]
   11abc:	4618      	mov	r0, r3
   11abe:	4b3d      	ldr	r3, [pc, #244]	; (11bb4 <_ZN15Holt_3593_Class4InitEv+0x10c>)
   11ac0:	4798      	blx	r3
	 uint8_t	status=	Init3593(ACLKDIV,  // ARINC clock divisor
	 TMODE,    // Transmit mode. Set for "send as soon as possible"
	 SELFTEST_OFF, // Selftest defined by Mode switches
	 BITRATE,    // Arinc speed and if Parity is enabled by the switch
	 TFLIP );
   11ac2:	2340      	movs	r3, #64	; 0x40
   11ac4:	9301      	str	r3, [sp, #4]
   11ac6:	2300      	movs	r3, #0
   11ac8:	9300      	str	r3, [sp, #0]
   11aca:	2300      	movs	r3, #0
   11acc:	2201      	movs	r2, #1
   11ace:	2104      	movs	r1, #4
   11ad0:	6878      	ldr	r0, [r7, #4]
   11ad2:	4c39      	ldr	r4, [pc, #228]	; (11bb8 <_ZN15Holt_3593_Class4InitEv+0x110>)
   11ad4:	47a0      	blx	r4
   11ad6:	4603      	mov	r3, r0
   11ad8:	73fb      	strb	r3, [r7, #15]

	for (int i=0;i<32;i++)
   11ada:	2300      	movs	r3, #0
   11adc:	617b      	str	r3, [r7, #20]
   11ade:	697b      	ldr	r3, [r7, #20]
   11ae0:	2b1f      	cmp	r3, #31
   11ae2:	dc3c      	bgt.n	11b5e <_ZN15Holt_3593_Class4InitEv+0xb6>
	{
		LabelArray_2[i]=FlipByte(LabelArray_1[i]);
   11ae4:	4a35      	ldr	r2, [pc, #212]	; (11bbc <_ZN15Holt_3593_Class4InitEv+0x114>)
   11ae6:	697b      	ldr	r3, [r7, #20]
   11ae8:	4413      	add	r3, r2
   11aea:	781b      	ldrb	r3, [r3, #0]
   11aec:	4619      	mov	r1, r3
   11aee:	6878      	ldr	r0, [r7, #4]
   11af0:	4b33      	ldr	r3, [pc, #204]	; (11bc0 <_ZN15Holt_3593_Class4InitEv+0x118>)
   11af2:	4798      	blx	r3
   11af4:	4603      	mov	r3, r0
   11af6:	4619      	mov	r1, r3
   11af8:	4a32      	ldr	r2, [pc, #200]	; (11bc4 <_ZN15Holt_3593_Class4InitEv+0x11c>)
   11afa:	697b      	ldr	r3, [r7, #20]
   11afc:	4413      	add	r3, r2
   11afe:	460a      	mov	r2, r1
   11b00:	701a      	strb	r2, [r3, #0]
		LabelArray_1[i]=LabelArray_2[i];
   11b02:	4a30      	ldr	r2, [pc, #192]	; (11bc4 <_ZN15Holt_3593_Class4InitEv+0x11c>)
   11b04:	697b      	ldr	r3, [r7, #20]
   11b06:	4413      	add	r3, r2
   11b08:	7819      	ldrb	r1, [r3, #0]
   11b0a:	4a2c      	ldr	r2, [pc, #176]	; (11bbc <_ZN15Holt_3593_Class4InitEv+0x114>)
   11b0c:	697b      	ldr	r3, [r7, #20]
   11b0e:	4413      	add	r3, r2
   11b10:	460a      	mov	r2, r1
   11b12:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayRX1[i]=LabelArray_2[i];
   11b14:	4a2b      	ldr	r2, [pc, #172]	; (11bc4 <_ZN15Holt_3593_Class4InitEv+0x11c>)
   11b16:	697b      	ldr	r3, [r7, #20]
   11b18:	4413      	add	r3, r2
   11b1a:	7819      	ldrb	r1, [r3, #0]
   11b1c:	4a2a      	ldr	r2, [pc, #168]	; (11bc8 <_ZN15Holt_3593_Class4InitEv+0x120>)
   11b1e:	697b      	ldr	r3, [r7, #20]
   11b20:	4413      	add	r3, r2
   11b22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
   11b26:	460a      	mov	r2, r1
   11b28:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayRX2[i]=LabelArray_2[i];
   11b2a:	4a26      	ldr	r2, [pc, #152]	; (11bc4 <_ZN15Holt_3593_Class4InitEv+0x11c>)
   11b2c:	697b      	ldr	r3, [r7, #20]
   11b2e:	4413      	add	r3, r2
   11b30:	7819      	ldrb	r1, [r3, #0]
   11b32:	4a25      	ldr	r2, [pc, #148]	; (11bc8 <_ZN15Holt_3593_Class4InitEv+0x120>)
   11b34:	697b      	ldr	r3, [r7, #20]
   11b36:	4413      	add	r3, r2
   11b38:	f503 73c2 	add.w	r3, r3, #388	; 0x184
   11b3c:	460a      	mov	r2, r1
   11b3e:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayTX[i]=LabelArray_2[i];
   11b40:	4a20      	ldr	r2, [pc, #128]	; (11bc4 <_ZN15Holt_3593_Class4InitEv+0x11c>)
   11b42:	697b      	ldr	r3, [r7, #20]
   11b44:	4413      	add	r3, r2
   11b46:	7819      	ldrb	r1, [r3, #0]
   11b48:	4a1f      	ldr	r2, [pc, #124]	; (11bc8 <_ZN15Holt_3593_Class4InitEv+0x120>)
   11b4a:	697b      	ldr	r3, [r7, #20]
   11b4c:	4413      	add	r3, r2
   11b4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   11b52:	460a      	mov	r2, r1
   11b54:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<32;i++)
   11b56:	697b      	ldr	r3, [r7, #20]
   11b58:	3301      	adds	r3, #1
   11b5a:	617b      	str	r3, [r7, #20]
   11b5c:	e7bf      	b.n	11ade <_ZN15Holt_3593_Class4InitEv+0x36>
	}
	for (int i=0;i<3;i++)
   11b5e:	2300      	movs	r3, #0
   11b60:	613b      	str	r3, [r7, #16]
   11b62:	693b      	ldr	r3, [r7, #16]
   11b64:	2b02      	cmp	r3, #2
   11b66:	dc1b      	bgt.n	11ba0 <_ZN15Holt_3593_Class4InitEv+0xf8>
	{
		LabelPriority2[i]=FlipByte(LabelPriority1[i]);
   11b68:	4a18      	ldr	r2, [pc, #96]	; (11bcc <_ZN15Holt_3593_Class4InitEv+0x124>)
   11b6a:	693b      	ldr	r3, [r7, #16]
   11b6c:	4413      	add	r3, r2
   11b6e:	781b      	ldrb	r3, [r3, #0]
   11b70:	4619      	mov	r1, r3
   11b72:	6878      	ldr	r0, [r7, #4]
   11b74:	4b12      	ldr	r3, [pc, #72]	; (11bc0 <_ZN15Holt_3593_Class4InitEv+0x118>)
   11b76:	4798      	blx	r3
   11b78:	4603      	mov	r3, r0
   11b7a:	4619      	mov	r1, r3
   11b7c:	4a14      	ldr	r2, [pc, #80]	; (11bd0 <_ZN15Holt_3593_Class4InitEv+0x128>)
   11b7e:	693b      	ldr	r3, [r7, #16]
   11b80:	4413      	add	r3, r2
   11b82:	460a      	mov	r2, r1
   11b84:	701a      	strb	r2, [r3, #0]
		LabelPriority1[i]=LabelPriority2[i];
   11b86:	4a12      	ldr	r2, [pc, #72]	; (11bd0 <_ZN15Holt_3593_Class4InitEv+0x128>)
   11b88:	693b      	ldr	r3, [r7, #16]
   11b8a:	4413      	add	r3, r2
   11b8c:	7819      	ldrb	r1, [r3, #0]
   11b8e:	4a0f      	ldr	r2, [pc, #60]	; (11bcc <_ZN15Holt_3593_Class4InitEv+0x124>)
   11b90:	693b      	ldr	r3, [r7, #16]
   11b92:	4413      	add	r3, r2
   11b94:	460a      	mov	r2, r1
   11b96:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<3;i++)
   11b98:	693b      	ldr	r3, [r7, #16]
   11b9a:	3301      	adds	r3, #1
   11b9c:	613b      	str	r3, [r7, #16]
   11b9e:	e7e0      	b.n	11b62 <_ZN15Holt_3593_Class4InitEv+0xba>
	}
	//memcpy(arinc.LabelsArrayRX1,LabelArray_1,LABEL_ARRAY_SIZE);	
//	memcpy(arinc.LabelsArrayRX2,LabelArray_2,LABEL_ARRAY_SIZE);	
	//memcpy(arinc.LabelsArrayTX,LabelArray_2,LABEL_ARRAY_SIZE);		
	return	status;
   11ba0:	7bfb      	ldrb	r3, [r7, #15]
 } 
   11ba2:	4618      	mov	r0, r3
   11ba4:	371c      	adds	r7, #28
   11ba6:	46bd      	mov	sp, r7
   11ba8:	bd90      	pop	{r4, r7, pc}
   11baa:	bf00      	nop
   11bac:	200055ec 	.word	0x200055ec
   11bb0:	00013725 	.word	0x00013725
   11bb4:	000136ed 	.word	0x000136ed
   11bb8:	00011bd5 	.word	0x00011bd5
   11bbc:	200001b8 	.word	0x200001b8
   11bc0:	00011d71 	.word	0x00011d71
   11bc4:	20003d58 	.word	0x20003d58
   11bc8:	20003a4c 	.word	0x20003a4c
   11bcc:	200001d8 	.word	0x200001d8
   11bd0:	20003d78 	.word	0x20003d78

00011bd4 <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 
 // ------------------------------------------------------------------
 // Initialize the HI-3593
 // ------------------------------------------------------------------
 uint8_t Holt_3593_Class::Init3593(uint8_t AclkDiv, uint8_t tmode, uint8_t selftest, uint8_t arate, uint8_t tflip )
 {
   11bd4:	b580      	push	{r7, lr}
   11bd6:	b084      	sub	sp, #16
   11bd8:	af00      	add	r7, sp, #0
   11bda:	6078      	str	r0, [r7, #4]
   11bdc:	4608      	mov	r0, r1
   11bde:	4611      	mov	r1, r2
   11be0:	461a      	mov	r2, r3
   11be2:	4603      	mov	r3, r0
   11be4:	70fb      	strb	r3, [r7, #3]
   11be6:	460b      	mov	r3, r1
   11be8:	70bb      	strb	r3, [r7, #2]
   11bea:	4613      	mov	r3, r2
   11bec:	707b      	strb	r3, [r7, #1]
	 unsigned char cmd=0;
   11bee:	2300      	movs	r3, #0
   11bf0:	73fb      	strb	r3, [r7, #15]
	 
	 W_Command(RESETCMD);                // Reset the HI-3593
   11bf2:	2104      	movs	r1, #4
   11bf4:	6878      	ldr	r0, [r7, #4]
   11bf6:	4b18      	ldr	r3, [pc, #96]	; (11c58 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x84>)
   11bf8:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
   11bfa:	78fb      	ldrb	r3, [r7, #3]
   11bfc:	461a      	mov	r2, r3
   11bfe:	2138      	movs	r1, #56	; 0x38
   11c00:	6878      	ldr	r0, [r7, #4]
   11c02:	4b16      	ldr	r3, [pc, #88]	; (11c5c <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   11c04:	4798      	blx	r3
	 cmd =  arate;
   11c06:	7e3b      	ldrb	r3, [r7, #24]
   11c08:	73fb      	strb	r3, [r7, #15]
	 cmd |= selftest << 4;
   11c0a:	787b      	ldrb	r3, [r7, #1]
   11c0c:	011b      	lsls	r3, r3, #4
   11c0e:	b25a      	sxtb	r2, r3
   11c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11c14:	4313      	orrs	r3, r2
   11c16:	b25b      	sxtb	r3, r3
   11c18:	73fb      	strb	r3, [r7, #15]
	 cmd |= tmode << 5;
   11c1a:	78bb      	ldrb	r3, [r7, #2]
   11c1c:	015b      	lsls	r3, r3, #5
   11c1e:	b25a      	sxtb	r2, r3
   11c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11c24:	4313      	orrs	r3, r2
   11c26:	b25b      	sxtb	r3, r3
   11c28:	73fb      	strb	r3, [r7, #15]
	 cmd |= tflip << 6;                  // TFLIP on
   11c2a:	7f3b      	ldrb	r3, [r7, #28]
   11c2c:	019b      	lsls	r3, r3, #6
   11c2e:	b25a      	sxtb	r2, r3
   11c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11c34:	4313      	orrs	r3, r2
   11c36:	b25b      	sxtb	r3, r3
   11c38:	73fb      	strb	r3, [r7, #15]
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
   11c3a:	7bfb      	ldrb	r3, [r7, #15]
   11c3c:	461a      	mov	r2, r3
   11c3e:	2108      	movs	r1, #8
   11c40:	6878      	ldr	r0, [r7, #4]
   11c42:	4b06      	ldr	r3, [pc, #24]	; (11c5c <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   11c44:	4798      	blx	r3
	 return R_Register (R_TSR);
   11c46:	2180      	movs	r1, #128	; 0x80
   11c48:	6878      	ldr	r0, [r7, #4]
   11c4a:	4b05      	ldr	r3, [pc, #20]	; (11c60 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x8c>)
   11c4c:	4798      	blx	r3
   11c4e:	4603      	mov	r3, r0
	 
	 
 }
   11c50:	4618      	mov	r0, r3
   11c52:	3710      	adds	r7, #16
   11c54:	46bd      	mov	sp, r7
   11c56:	bd80      	pop	{r7, pc}
   11c58:	00012059 	.word	0x00012059
   11c5c:	000120ad 	.word	0x000120ad
   11c60:	00012121 	.word	0x00012121

00011c64 <_ZN15Holt_3593_Class4openEv>:
 
 void Holt_3593_Class::open(){
   11c64:	b580      	push	{r7, lr}
   11c66:	b082      	sub	sp, #8
   11c68:	af00      	add	r7, sp, #0
   11c6a:	6078      	str	r0, [r7, #4]
	 	spi.enable();
   11c6c:	687b      	ldr	r3, [r7, #4]
   11c6e:	4618      	mov	r0, r3
   11c70:	4b04      	ldr	r3, [pc, #16]	; (11c84 <_ZN15Holt_3593_Class4openEv+0x20>)
   11c72:	4798      	blx	r3
		 SS_Low();
   11c74:	6878      	ldr	r0, [r7, #4]
   11c76:	4b04      	ldr	r3, [pc, #16]	; (11c88 <_ZN15Holt_3593_Class4openEv+0x24>)
   11c78:	4798      	blx	r3
 }
   11c7a:	bf00      	nop
   11c7c:	3708      	adds	r7, #8
   11c7e:	46bd      	mov	sp, r7
   11c80:	bd80      	pop	{r7, pc}
   11c82:	bf00      	nop
   11c84:	00013749 	.word	0x00013749
   11c88:	00012169 	.word	0x00012169

00011c8c <_ZN15Holt_3593_Class5closeEv>:
  void Holt_3593_Class::close(){
   11c8c:	b580      	push	{r7, lr}
   11c8e:	b082      	sub	sp, #8
   11c90:	af00      	add	r7, sp, #0
   11c92:	6078      	str	r0, [r7, #4]
	    SS_High();
   11c94:	6878      	ldr	r0, [r7, #4]
   11c96:	4b05      	ldr	r3, [pc, #20]	; (11cac <_ZN15Holt_3593_Class5closeEv+0x20>)
   11c98:	4798      	blx	r3
	  spi.disable();
   11c9a:	687b      	ldr	r3, [r7, #4]
   11c9c:	4618      	mov	r0, r3
   11c9e:	4b04      	ldr	r3, [pc, #16]	; (11cb0 <_ZN15Holt_3593_Class5closeEv+0x24>)
   11ca0:	4798      	blx	r3
	
  }
   11ca2:	bf00      	nop
   11ca4:	3708      	adds	r7, #8
   11ca6:	46bd      	mov	sp, r7
   11ca8:	bd80      	pop	{r7, pc}
   11caa:	bf00      	nop
   11cac:	00012185 	.word	0x00012185
   11cb0:	0001380d 	.word	0x0001380d

00011cb4 <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
 
// ------------------------------------------------------------------
//  SPI function to load 8 bits of label data
// ------------------------------------------------------------------   
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
   11cb4:	b580      	push	{r7, lr}
   11cb6:	b084      	sub	sp, #16
   11cb8:	af00      	add	r7, sp, #0
   11cba:	6078      	str	r0, [r7, #4]
   11cbc:	460b      	mov	r3, r1
   11cbe:	70fb      	strb	r3, [r7, #3]
   11cc0:	4613      	mov	r3, r2
   11cc2:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;    
 // rxbyte = Get_Byte();         // clear SPI status register
  uint8_t	p(txbyte);
   11cc4:	78fb      	ldrb	r3, [r7, #3]
   11cc6:	73fb      	strb	r3, [r7, #15]
  Send_Byte(p)    ;   // write Data Register to begin transfer  
   11cc8:	7bfb      	ldrb	r3, [r7, #15]
   11cca:	4619      	mov	r1, r3
   11ccc:	6878      	ldr	r0, [r7, #4]
   11cce:	4b0b      	ldr	r3, [pc, #44]	; (11cfc <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x48>)
   11cd0:	4798      	blx	r3
	  
  if (return_when_done) {  // optional wait for SPIF flag
   11cd2:	78bb      	ldrb	r3, [r7, #2]
   11cd4:	2b00      	cmp	r3, #0
   11cd6:	d00a      	beq.n	11cee <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    while (!spi.isSPIReady());     
   11cd8:	687b      	ldr	r3, [r7, #4]
   11cda:	4618      	mov	r0, r3
   11cdc:	4b08      	ldr	r3, [pc, #32]	; (11d00 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x4c>)
   11cde:	4798      	blx	r3
   11ce0:	4603      	mov	r3, r0
   11ce2:	f083 0301 	eor.w	r3, r3, #1
   11ce6:	b2db      	uxtb	r3, r3
   11ce8:	2b00      	cmp	r3, #0
   11cea:	d000      	beq.n	11cee <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
   11cec:	e7f4      	b.n	11cd8 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x24>
  }
  return rxbyte = txbyte;
   11cee:	78fb      	ldrb	r3, [r7, #3]
   11cf0:	73bb      	strb	r3, [r7, #14]
   11cf2:	7bbb      	ldrb	r3, [r7, #14]
  
}
   11cf4:	4618      	mov	r0, r3
   11cf6:	3710      	adds	r7, #16
   11cf8:	46bd      	mov	sp, r7
   11cfa:	bd80      	pop	{r7, pc}
   11cfc:	00011dc1 	.word	0x00011dc1
   11d00:	0001382d 	.word	0x0001382d

00011d04 <_ZN15Holt_3593_Class19initReceiver1LabelsEv>:

// ------------------------------------------------------------------
//  Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------                              */
void Holt_3593_Class::initReceiver1Labels(void)
{
   11d04:	b580      	push	{r7, lr}
   11d06:	b084      	sub	sp, #16
   11d08:	af00      	add	r7, sp, #0
   11d0a:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
  open();
   11d0c:	6878      	ldr	r0, [r7, #4]
   11d0e:	4b14      	ldr	r3, [pc, #80]	; (11d60 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x5c>)
   11d10:	4798      	blx	r3

  dummy = txrx8bits_8(0x14,1);  
   11d12:	2201      	movs	r2, #1
   11d14:	2114      	movs	r1, #20
   11d16:	6878      	ldr	r0, [r7, #4]
   11d18:	4b12      	ldr	r3, [pc, #72]	; (11d64 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x60>)
   11d1a:	4798      	blx	r3
   11d1c:	4603      	mov	r3, r0
   11d1e:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   11d20:	231f      	movs	r3, #31
   11d22:	73fb      	strb	r3, [r7, #15]
   11d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11d28:	2b00      	cmp	r3, #0
   11d2a:	db11      	blt.n	11d50 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_1[i],1);       
   11d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11d30:	4a0d      	ldr	r2, [pc, #52]	; (11d68 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x64>)
   11d32:	5cd3      	ldrb	r3, [r2, r3]
   11d34:	2201      	movs	r2, #1
   11d36:	4619      	mov	r1, r3
   11d38:	6878      	ldr	r0, [r7, #4]
   11d3a:	4b0a      	ldr	r3, [pc, #40]	; (11d64 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x60>)
   11d3c:	4798      	blx	r3
   11d3e:	4603      	mov	r3, r0
   11d40:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   11d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11d46:	b2db      	uxtb	r3, r3
   11d48:	3b01      	subs	r3, #1
   11d4a:	b2db      	uxtb	r3, r3
   11d4c:	73fb      	strb	r3, [r7, #15]
   11d4e:	e7e9      	b.n	11d24 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x20>
  }    
 	  
	close();
   11d50:	6878      	ldr	r0, [r7, #4]
   11d52:	4b06      	ldr	r3, [pc, #24]	; (11d6c <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x68>)
   11d54:	4798      	blx	r3
}
   11d56:	bf00      	nop
   11d58:	3710      	adds	r7, #16
   11d5a:	46bd      	mov	sp, r7
   11d5c:	bd80      	pop	{r7, pc}
   11d5e:	bf00      	nop
   11d60:	00011c65 	.word	0x00011c65
   11d64:	00011cb5 	.word	0x00011cb5
   11d68:	200001b8 	.word	0x200001b8
   11d6c:	00011c8d 	.word	0x00011c8d

00011d70 <_ZN15Holt_3593_Class8FlipByteEh>:
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
}

unsigned char Holt_3593_Class::FlipByte(unsigned char byte){
   11d70:	b480      	push	{r7}
   11d72:	b085      	sub	sp, #20
   11d74:	af00      	add	r7, sp, #0
   11d76:	6078      	str	r0, [r7, #4]
   11d78:	460b      	mov	r3, r1
   11d7a:	70fb      	strb	r3, [r7, #3]
	unsigned char rev=0;
   11d7c:	2300      	movs	r3, #0
   11d7e:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   11d80:	2300      	movs	r3, #0
   11d82:	60bb      	str	r3, [r7, #8]
   11d84:	68bb      	ldr	r3, [r7, #8]
   11d86:	2b07      	cmp	r3, #7
   11d88:	dc13      	bgt.n	11db2 <_ZN15Holt_3593_Class8FlipByteEh+0x42>
	{
		rev=rev<<1;
   11d8a:	7bfb      	ldrb	r3, [r7, #15]
   11d8c:	005b      	lsls	r3, r3, #1
   11d8e:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   11d90:	78fa      	ldrb	r2, [r7, #3]
   11d92:	68bb      	ldr	r3, [r7, #8]
   11d94:	fa42 f303 	asr.w	r3, r2, r3
   11d98:	b25b      	sxtb	r3, r3
   11d9a:	f003 0301 	and.w	r3, r3, #1
   11d9e:	b25a      	sxtb	r2, r3
   11da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11da4:	4313      	orrs	r3, r2
   11da6:	b25b      	sxtb	r3, r3
   11da8:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   11daa:	68bb      	ldr	r3, [r7, #8]
   11dac:	3301      	adds	r3, #1
   11dae:	60bb      	str	r3, [r7, #8]
   11db0:	e7e8      	b.n	11d84 <_ZN15Holt_3593_Class8FlipByteEh+0x14>
	}
	return rev;
   11db2:	7bfb      	ldrb	r3, [r7, #15]
}
   11db4:	4618      	mov	r0, r3
   11db6:	3714      	adds	r7, #20
   11db8:	46bd      	mov	sp, r7
   11dba:	bc80      	pop	{r7}
   11dbc:	4770      	bx	lr
	...

00011dc0 <_ZN15Holt_3593_Class9Send_ByteEh>:

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
   11dc0:	b580      	push	{r7, lr}
   11dc2:	b082      	sub	sp, #8
   11dc4:	af00      	add	r7, sp, #0
   11dc6:	6078      	str	r0, [r7, #4]
   11dc8:	460b      	mov	r3, r1
   11dca:	70fb      	strb	r3, [r7, #3]
	while (!spi.isSPIReady()); 
   11dcc:	687b      	ldr	r3, [r7, #4]
   11dce:	4618      	mov	r0, r3
   11dd0:	4b0f      	ldr	r3, [pc, #60]	; (11e10 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   11dd2:	4798      	blx	r3
   11dd4:	4603      	mov	r3, r0
   11dd6:	f083 0301 	eor.w	r3, r3, #1
   11dda:	b2db      	uxtb	r3, r3
   11ddc:	2b00      	cmp	r3, #0
   11dde:	d000      	beq.n	11de2 <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
   11de0:	e7f4      	b.n	11dcc <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi.write(&byte,1);
   11de2:	687b      	ldr	r3, [r7, #4]
   11de4:	1cf9      	adds	r1, r7, #3
   11de6:	2201      	movs	r2, #1
   11de8:	4618      	mov	r0, r3
   11dea:	4b0a      	ldr	r3, [pc, #40]	; (11e14 <_ZN15Holt_3593_Class9Send_ByteEh+0x54>)
   11dec:	4798      	blx	r3
	while (!spi.isSPIReady());  
   11dee:	687b      	ldr	r3, [r7, #4]
   11df0:	4618      	mov	r0, r3
   11df2:	4b07      	ldr	r3, [pc, #28]	; (11e10 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   11df4:	4798      	blx	r3
   11df6:	4603      	mov	r3, r0
   11df8:	f083 0301 	eor.w	r3, r3, #1
   11dfc:	b2db      	uxtb	r3, r3
   11dfe:	2b00      	cmp	r3, #0
   11e00:	d000      	beq.n	11e04 <_ZN15Holt_3593_Class9Send_ByteEh+0x44>
   11e02:	e7f4      	b.n	11dee <_ZN15Holt_3593_Class9Send_ByteEh+0x2e>
	return byte;
   11e04:	78fb      	ldrb	r3, [r7, #3]
}
   11e06:	4618      	mov	r0, r3
   11e08:	3708      	adds	r7, #8
   11e0a:	46bd      	mov	sp, r7
   11e0c:	bd80      	pop	{r7, pc}
   11e0e:	bf00      	nop
   11e10:	0001382d 	.word	0x0001382d
   11e14:	00013785 	.word	0x00013785

00011e18 <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
   11e18:	b580      	push	{r7, lr}
   11e1a:	b084      	sub	sp, #16
   11e1c:	af00      	add	r7, sp, #0
   11e1e:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	
	while (!spi.isSPIReady());
   11e20:	687b      	ldr	r3, [r7, #4]
   11e22:	4618      	mov	r0, r3
   11e24:	4b0f      	ldr	r3, [pc, #60]	; (11e64 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   11e26:	4798      	blx	r3
   11e28:	4603      	mov	r3, r0
   11e2a:	f083 0301 	eor.w	r3, r3, #1
   11e2e:	b2db      	uxtb	r3, r3
   11e30:	2b00      	cmp	r3, #0
   11e32:	d000      	beq.n	11e36 <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>
   11e34:	e7f4      	b.n	11e20 <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi.read(&byte,1);
   11e36:	687b      	ldr	r3, [r7, #4]
   11e38:	f107 010f 	add.w	r1, r7, #15
   11e3c:	2201      	movs	r2, #1
   11e3e:	4618      	mov	r0, r3
   11e40:	4b09      	ldr	r3, [pc, #36]	; (11e68 <_ZN15Holt_3593_Class8Get_ByteEv+0x50>)
   11e42:	4798      	blx	r3
	while (!spi.isSPIReady());
   11e44:	687b      	ldr	r3, [r7, #4]
   11e46:	4618      	mov	r0, r3
   11e48:	4b06      	ldr	r3, [pc, #24]	; (11e64 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   11e4a:	4798      	blx	r3
   11e4c:	4603      	mov	r3, r0
   11e4e:	f083 0301 	eor.w	r3, r3, #1
   11e52:	b2db      	uxtb	r3, r3
   11e54:	2b00      	cmp	r3, #0
   11e56:	d000      	beq.n	11e5a <_ZN15Holt_3593_Class8Get_ByteEv+0x42>
   11e58:	e7f4      	b.n	11e44 <_ZN15Holt_3593_Class8Get_ByteEv+0x2c>


	
	return byte;
   11e5a:	7bfb      	ldrb	r3, [r7, #15]
}	
   11e5c:	4618      	mov	r0, r3
   11e5e:	3710      	adds	r7, #16
   11e60:	46bd      	mov	sp, r7
   11e62:	bd80      	pop	{r7, pc}
   11e64:	0001382d 	.word	0x0001382d
   11e68:	000137c9 	.word	0x000137c9

00011e6c <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
   11e6c:	b580      	push	{r7, lr}
   11e6e:	b084      	sub	sp, #16
   11e70:	af00      	add	r7, sp, #0
   11e72:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
   11e74:	6878      	ldr	r0, [r7, #4]
   11e76:	4b14      	ldr	r3, [pc, #80]	; (11ec8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x5c>)
   11e78:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
   11e7a:	2201      	movs	r2, #1
   11e7c:	2128      	movs	r1, #40	; 0x28
   11e7e:	6878      	ldr	r0, [r7, #4]
   11e80:	4b12      	ldr	r3, [pc, #72]	; (11ecc <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   11e82:	4798      	blx	r3
   11e84:	4603      	mov	r3, r0
   11e86:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   11e88:	231f      	movs	r3, #31
   11e8a:	73fb      	strb	r3, [r7, #15]
   11e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11e90:	2b00      	cmp	r3, #0
   11e92:	db11      	blt.n	11eb8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
   11e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11e98:	4a0d      	ldr	r2, [pc, #52]	; (11ed0 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x64>)
   11e9a:	5cd3      	ldrb	r3, [r2, r3]
   11e9c:	2201      	movs	r2, #1
   11e9e:	4619      	mov	r1, r3
   11ea0:	6878      	ldr	r0, [r7, #4]
   11ea2:	4b0a      	ldr	r3, [pc, #40]	; (11ecc <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   11ea4:	4798      	blx	r3
   11ea6:	4603      	mov	r3, r0
   11ea8:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   11eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11eae:	b2db      	uxtb	r3, r3
   11eb0:	3b01      	subs	r3, #1
   11eb2:	b2db      	uxtb	r3, r3
   11eb4:	73fb      	strb	r3, [r7, #15]
   11eb6:	e7e9      	b.n	11e8c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x20>
  }    
 	  
	close();
   11eb8:	6878      	ldr	r0, [r7, #4]
   11eba:	4b06      	ldr	r3, [pc, #24]	; (11ed4 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x68>)
   11ebc:	4798      	blx	r3
}
   11ebe:	bf00      	nop
   11ec0:	3710      	adds	r7, #16
   11ec2:	46bd      	mov	sp, r7
   11ec4:	bd80      	pop	{r7, pc}
   11ec6:	bf00      	nop
   11ec8:	00011c65 	.word	0x00011c65
   11ecc:	00011cb5 	.word	0x00011cb5
   11ed0:	20003d58 	.word	0x20003d58
   11ed4:	00011c8d 	.word	0x00011c8d

00011ed8 <_ZN15Holt_3593_Class13MultiByteReadEhhPh>:
//          count=number of bytes to read
//
// Output:  *passedArray = pointer to the array that gets loaded
// ------------------------------------------------------
void Holt_3593_Class::MultiByteRead(uint8_t ReadCommand, uint8_t count, unsigned char *passedArray)
{
   11ed8:	b580      	push	{r7, lr}
   11eda:	b086      	sub	sp, #24
   11edc:	af00      	add	r7, sp, #0
   11ede:	60f8      	str	r0, [r7, #12]
   11ee0:	607b      	str	r3, [r7, #4]
   11ee2:	460b      	mov	r3, r1
   11ee4:	72fb      	strb	r3, [r7, #11]
   11ee6:	4613      	mov	r3, r2
   11ee8:	72bb      	strb	r3, [r7, #10]
   uint8_t dummy, ByteCount;
   open();
   11eea:	68f8      	ldr	r0, [r7, #12]
   11eec:	4b16      	ldr	r3, [pc, #88]	; (11f48 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x70>)
   11eee:	4798      	blx	r3
   //dummy = Get_Byte();                  // clear SPI status register    
   Send_Byte(ReadCommand);
   11ef0:	7afb      	ldrb	r3, [r7, #11]
   11ef2:	4619      	mov	r1, r3
   11ef4:	68f8      	ldr	r0, [r7, #12]
   11ef6:	4b15      	ldr	r3, [pc, #84]	; (11f4c <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x74>)
   11ef8:	4798      	blx	r3
     
   while (!spi.isSPIReady());            // wait for SPIF flag assertion    
   11efa:	68fb      	ldr	r3, [r7, #12]
   11efc:	4618      	mov	r0, r3
   11efe:	4b14      	ldr	r3, [pc, #80]	; (11f50 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x78>)
   11f00:	4798      	blx	r3
   11f02:	4603      	mov	r3, r0
   11f04:	f083 0301 	eor.w	r3, r3, #1
   11f08:	b2db      	uxtb	r3, r3
   11f0a:	2b00      	cmp	r3, #0
   11f0c:	d000      	beq.n	11f10 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x38>
   11f0e:	e7f4      	b.n	11efa <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x22>
  // dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   11f10:	2300      	movs	r3, #0
   11f12:	75fb      	strb	r3, [r7, #23]
   11f14:	7dfa      	ldrb	r2, [r7, #23]
   11f16:	7abb      	ldrb	r3, [r7, #10]
   11f18:	429a      	cmp	r2, r3
   11f1a:	da0d      	bge.n	11f38 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x60>
      dummy =Get_Byte(); 
   11f1c:	68f8      	ldr	r0, [r7, #12]
   11f1e:	4b0d      	ldr	r3, [pc, #52]	; (11f54 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x7c>)
   11f20:	4798      	blx	r3
   11f22:	4603      	mov	r3, r0
   11f24:	75bb      	strb	r3, [r7, #22]
      passedArray[ByteCount] = dummy; 
   11f26:	7dfb      	ldrb	r3, [r7, #23]
   11f28:	687a      	ldr	r2, [r7, #4]
   11f2a:	4413      	add	r3, r2
   11f2c:	7dba      	ldrb	r2, [r7, #22]
   11f2e:	701a      	strb	r2, [r3, #0]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   11f30:	7dfb      	ldrb	r3, [r7, #23]
   11f32:	3301      	adds	r3, #1
   11f34:	75fb      	strb	r3, [r7, #23]
   11f36:	e7ed      	b.n	11f14 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x3c>
     }

  close();
   11f38:	68f8      	ldr	r0, [r7, #12]
   11f3a:	4b07      	ldr	r3, [pc, #28]	; (11f58 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x80>)
   11f3c:	4798      	blx	r3
  
}
   11f3e:	bf00      	nop
   11f40:	3718      	adds	r7, #24
   11f42:	46bd      	mov	sp, r7
   11f44:	bd80      	pop	{r7, pc}
   11f46:	bf00      	nop
   11f48:	00011c65 	.word	0x00011c65
   11f4c:	00011dc1 	.word	0x00011dc1
   11f50:	0001382d 	.word	0x0001382d
   11f54:	00011e19 	.word	0x00011e19
   11f58:	00011c8d 	.word	0x00011c8d

00011f5c <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
   11f5c:	b580      	push	{r7, lr}
   11f5e:	b084      	sub	sp, #16
   11f60:	af00      	add	r7, sp, #0
   11f62:	6078      	str	r0, [r7, #4]
   11f64:	460b      	mov	r3, r1
   11f66:	70fb      	strb	r3, [r7, #3]
   11f68:	4613      	mov	r3, r2
   11f6a:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
   11f6c:	78fb      	ldrb	r3, [r7, #3]
   11f6e:	73fb      	strb	r3, [r7, #15]
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
   11f70:	7bfb      	ldrb	r3, [r7, #15]
   11f72:	4619      	mov	r1, r3
   11f74:	6878      	ldr	r0, [r7, #4]
   11f76:	4b0b      	ldr	r3, [pc, #44]	; (11fa4 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x48>)
   11f78:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
   11f7a:	78bb      	ldrb	r3, [r7, #2]
   11f7c:	2b00      	cmp	r3, #0
   11f7e:	d00a      	beq.n	11f96 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
		while (!spi.isSPIReady());      
   11f80:	687b      	ldr	r3, [r7, #4]
   11f82:	4618      	mov	r0, r3
   11f84:	4b08      	ldr	r3, [pc, #32]	; (11fa8 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x4c>)
   11f86:	4798      	blx	r3
   11f88:	4603      	mov	r3, r0
   11f8a:	f083 0301 	eor.w	r3, r3, #1
   11f8e:	b2db      	uxtb	r3, r3
   11f90:	2b00      	cmp	r3, #0
   11f92:	d000      	beq.n	11f96 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
   11f94:	e7f4      	b.n	11f80 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x24>
    }

  rxbyte = txbyte;  // get received data byte from Data Register
   11f96:	78fb      	ldrb	r3, [r7, #3]
   11f98:	73bb      	strb	r3, [r7, #14]

  return rxbyte;
   11f9a:	7bbb      	ldrb	r3, [r7, #14]
  
 }
   11f9c:	4618      	mov	r0, r3
   11f9e:	3710      	adds	r7, #16
   11fa0:	46bd      	mov	sp, r7
   11fa2:	bd80      	pop	{r7, pc}
   11fa4:	00011dc1 	.word	0x00011dc1
   11fa8:	0001382d 	.word	0x0001382d

00011fac <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh>:
// ------------------------------------------------------------------
// Transmits the Message Command and data contained in the passed array pointer
// Transmit the 0x0C Opcode command + 4 bytes of ARINC data per Figure 1, pg 8 of the data sheet
// ------------------------------------------------------------------
 void Holt_3593_Class::TransmitCommandAndData(uint8_t cmd, uint8_t *TXBuffer)
 {              
   11fac:	b580      	push	{r7, lr}
   11fae:	b084      	sub	sp, #16
   11fb0:	af00      	add	r7, sp, #0
   11fb2:	60f8      	str	r0, [r7, #12]
   11fb4:	460b      	mov	r3, r1
   11fb6:	607a      	str	r2, [r7, #4]
   11fb8:	72fb      	strb	r3, [r7, #11]
 uint8_t static ByteCount,dummy,transmitCount;
 
	open();
   11fba:	68f8      	ldr	r0, [r7, #12]
   11fbc:	4b20      	ldr	r3, [pc, #128]	; (12040 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x94>)
   11fbe:	4798      	blx	r3
   
   transmitCount=4;                                // Standard messages are 4 bytes
   11fc0:	4b20      	ldr	r3, [pc, #128]	; (12044 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   11fc2:	2204      	movs	r2, #4
   11fc4:	701a      	strb	r2, [r3, #0]
   if(cmd==W_PL1Match || cmd==W_PL2Match)          // if writing PL Match registers send only 3 bytes
   11fc6:	7afb      	ldrb	r3, [r7, #11]
   11fc8:	2b18      	cmp	r3, #24
   11fca:	d002      	beq.n	11fd2 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x26>
   11fcc:	7afb      	ldrb	r3, [r7, #11]
   11fce:	2b2c      	cmp	r3, #44	; 0x2c
   11fd0:	d105      	bne.n	11fde <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x32>
      transmitCount--;
   11fd2:	4b1c      	ldr	r3, [pc, #112]	; (12044 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   11fd4:	781b      	ldrb	r3, [r3, #0]
   11fd6:	3b01      	subs	r3, #1
   11fd8:	b2da      	uxtb	r2, r3
   11fda:	4b1a      	ldr	r3, [pc, #104]	; (12044 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   11fdc:	701a      	strb	r2, [r3, #0]
   
   dummy = txrx8bits(cmd, 1);      // Transmit the whole message, ignore return values 
   11fde:	7afb      	ldrb	r3, [r7, #11]
   11fe0:	2201      	movs	r2, #1
   11fe2:	4619      	mov	r1, r3
   11fe4:	68f8      	ldr	r0, [r7, #12]
   11fe6:	4b18      	ldr	r3, [pc, #96]	; (12048 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   11fe8:	4798      	blx	r3
   11fea:	4603      	mov	r3, r0
   11fec:	461a      	mov	r2, r3
   11fee:	4b17      	ldr	r3, [pc, #92]	; (1204c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   11ff0:	701a      	strb	r2, [r3, #0]

   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   11ff2:	4b17      	ldr	r3, [pc, #92]	; (12050 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   11ff4:	2200      	movs	r2, #0
   11ff6:	701a      	strb	r2, [r3, #0]
   11ff8:	4b15      	ldr	r3, [pc, #84]	; (12050 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   11ffa:	781b      	ldrb	r3, [r3, #0]
   11ffc:	461a      	mov	r2, r3
   11ffe:	4b11      	ldr	r3, [pc, #68]	; (12044 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   12000:	781b      	ldrb	r3, [r3, #0]
   12002:	429a      	cmp	r2, r3
   12004:	da15      	bge.n	12032 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x86>
      {              
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
   12006:	4b12      	ldr	r3, [pc, #72]	; (12050 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   12008:	781b      	ldrb	r3, [r3, #0]
   1200a:	461a      	mov	r2, r3
   1200c:	687b      	ldr	r3, [r7, #4]
   1200e:	4413      	add	r3, r2
   12010:	781b      	ldrb	r3, [r3, #0]
   12012:	2201      	movs	r2, #1
   12014:	4619      	mov	r1, r3
   12016:	68f8      	ldr	r0, [r7, #12]
   12018:	4b0b      	ldr	r3, [pc, #44]	; (12048 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   1201a:	4798      	blx	r3
   1201c:	4603      	mov	r3, r0
   1201e:	461a      	mov	r2, r3
   12020:	4b0a      	ldr	r3, [pc, #40]	; (1204c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   12022:	701a      	strb	r2, [r3, #0]
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   12024:	4b0a      	ldr	r3, [pc, #40]	; (12050 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   12026:	781b      	ldrb	r3, [r3, #0]
   12028:	3301      	adds	r3, #1
   1202a:	b2da      	uxtb	r2, r3
   1202c:	4b08      	ldr	r3, [pc, #32]	; (12050 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   1202e:	701a      	strb	r2, [r3, #0]
   12030:	e7e2      	b.n	11ff8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x4c>
      }   
 close();
   12032:	68f8      	ldr	r0, [r7, #12]
   12034:	4b07      	ldr	r3, [pc, #28]	; (12054 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa8>)
   12036:	4798      	blx	r3
}
   12038:	bf00      	nop
   1203a:	3710      	adds	r7, #16
   1203c:	46bd      	mov	sp, r7
   1203e:	bd80      	pop	{r7, pc}
   12040:	00011c65 	.word	0x00011c65
   12044:	20003d7d 	.word	0x20003d7d
   12048:	00011f5d 	.word	0x00011f5d
   1204c:	20003d7c 	.word	0x20003d7c
   12050:	20003d7b 	.word	0x20003d7b
   12054:	00011c8d 	.word	0x00011c8d

00012058 <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
   12058:	b580      	push	{r7, lr}
   1205a:	b084      	sub	sp, #16
   1205c:	af00      	add	r7, sp, #0
   1205e:	6078      	str	r0, [r7, #4]
   12060:	460b      	mov	r3, r1
   12062:	70fb      	strb	r3, [r7, #3]

 	  uint8_t p(cmd); 
   12064:	78fb      	ldrb	r3, [r7, #3]
   12066:	73fb      	strb	r3, [r7, #15]
  open();
   12068:	6878      	ldr	r0, [r7, #4]
   1206a:	4b0c      	ldr	r3, [pc, #48]	; (1209c <_ZN15Holt_3593_Class9W_CommandEc+0x44>)
   1206c:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
   1206e:	7bfb      	ldrb	r3, [r7, #15]
   12070:	4619      	mov	r1, r3
   12072:	6878      	ldr	r0, [r7, #4]
   12074:	4b0a      	ldr	r3, [pc, #40]	; (120a0 <_ZN15Holt_3593_Class9W_CommandEc+0x48>)
   12076:	4798      	blx	r3
  while (!spi.isSPIReady()) {;}      // Wait for data to come back in.
   12078:	687b      	ldr	r3, [r7, #4]
   1207a:	4618      	mov	r0, r3
   1207c:	4b09      	ldr	r3, [pc, #36]	; (120a4 <_ZN15Holt_3593_Class9W_CommandEc+0x4c>)
   1207e:	4798      	blx	r3
   12080:	4603      	mov	r3, r0
   12082:	f083 0301 	eor.w	r3, r3, #1
   12086:	b2db      	uxtb	r3, r3
   12088:	2b00      	cmp	r3, #0
   1208a:	d000      	beq.n	1208e <_ZN15Holt_3593_Class9W_CommandEc+0x36>
   1208c:	e7f4      	b.n	12078 <_ZN15Holt_3593_Class9W_CommandEc+0x20>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
   1208e:	6878      	ldr	r0, [r7, #4]
   12090:	4b05      	ldr	r3, [pc, #20]	; (120a8 <_ZN15Holt_3593_Class9W_CommandEc+0x50>)
   12092:	4798      	blx	r3
}
   12094:	bf00      	nop
   12096:	3710      	adds	r7, #16
   12098:	46bd      	mov	sp, r7
   1209a:	bd80      	pop	{r7, pc}
   1209c:	00011c65 	.word	0x00011c65
   120a0:	00011dc1 	.word	0x00011dc1
   120a4:	0001382d 	.word	0x0001382d
   120a8:	00011c8d 	.word	0x00011c8d

000120ac <_ZN15Holt_3593_Class14W_CommandValueEhh>:

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
   120ac:	b580      	push	{r7, lr}
   120ae:	b082      	sub	sp, #8
   120b0:	af00      	add	r7, sp, #0
   120b2:	6078      	str	r0, [r7, #4]
   120b4:	460b      	mov	r3, r1
   120b6:	70fb      	strb	r3, [r7, #3]
   120b8:	4613      	mov	r3, r2
   120ba:	70bb      	strb	r3, [r7, #2]

  	
  open();                             // assert the SPI0 /SS strobe
   120bc:	6878      	ldr	r0, [r7, #4]
   120be:	4b14      	ldr	r3, [pc, #80]	; (12110 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x64>)
   120c0:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
   120c2:	78fb      	ldrb	r3, [r7, #3]
   120c4:	4619      	mov	r1, r3
   120c6:	6878      	ldr	r0, [r7, #4]
   120c8:	4b12      	ldr	r3, [pc, #72]	; (12114 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   120ca:	4798      	blx	r3
  while (!spi.isSPIReady());    
   120cc:	687b      	ldr	r3, [r7, #4]
   120ce:	4618      	mov	r0, r3
   120d0:	4b11      	ldr	r3, [pc, #68]	; (12118 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   120d2:	4798      	blx	r3
   120d4:	4603      	mov	r3, r0
   120d6:	f083 0301 	eor.w	r3, r3, #1
   120da:	b2db      	uxtb	r3, r3
   120dc:	2b00      	cmp	r3, #0
   120de:	d000      	beq.n	120e2 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x36>
   120e0:	e7f4      	b.n	120cc <_ZN15Holt_3593_Class14W_CommandValueEhh+0x20>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
   120e2:	78bb      	ldrb	r3, [r7, #2]
   120e4:	4619      	mov	r1, r3
   120e6:	6878      	ldr	r0, [r7, #4]
   120e8:	4b0a      	ldr	r3, [pc, #40]	; (12114 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   120ea:	4798      	blx	r3
  while (!spi.isSPIReady());    
   120ec:	687b      	ldr	r3, [r7, #4]
   120ee:	4618      	mov	r0, r3
   120f0:	4b09      	ldr	r3, [pc, #36]	; (12118 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   120f2:	4798      	blx	r3
   120f4:	4603      	mov	r3, r0
   120f6:	f083 0301 	eor.w	r3, r3, #1
   120fa:	b2db      	uxtb	r3, r3
   120fc:	2b00      	cmp	r3, #0
   120fe:	d000      	beq.n	12102 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x56>
   12100:	e7f4      	b.n	120ec <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
   12102:	6878      	ldr	r0, [r7, #4]
   12104:	4b05      	ldr	r3, [pc, #20]	; (1211c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x70>)
   12106:	4798      	blx	r3
}
   12108:	bf00      	nop
   1210a:	3708      	adds	r7, #8
   1210c:	46bd      	mov	sp, r7
   1210e:	bd80      	pop	{r7, pc}
   12110:	00011c65 	.word	0x00011c65
   12114:	00011dc1 	.word	0x00011dc1
   12118:	0001382d 	.word	0x0001382d
   1211c:	00011c8d 	.word	0x00011c8d

00012120 <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
   12120:	b580      	push	{r7, lr}
   12122:	b084      	sub	sp, #16
   12124:	af00      	add	r7, sp, #0
   12126:	6078      	str	r0, [r7, #4]
   12128:	460b      	mov	r3, r1
   1212a:	70fb      	strb	r3, [r7, #3]
  unsigned char R_Reg;
	
  open();
   1212c:	6878      	ldr	r0, [r7, #4]
   1212e:	4b0a      	ldr	r3, [pc, #40]	; (12158 <_ZN15Holt_3593_Class10R_RegisterEc+0x38>)
   12130:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
   12132:	78fb      	ldrb	r3, [r7, #3]
   12134:	2201      	movs	r2, #1
   12136:	4619      	mov	r1, r3
   12138:	6878      	ldr	r0, [r7, #4]
   1213a:	4b08      	ldr	r3, [pc, #32]	; (1215c <_ZN15Holt_3593_Class10R_RegisterEc+0x3c>)
   1213c:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
   1213e:	6878      	ldr	r0, [r7, #4]
   12140:	4b07      	ldr	r3, [pc, #28]	; (12160 <_ZN15Holt_3593_Class10R_RegisterEc+0x40>)
   12142:	4798      	blx	r3
   12144:	4603      	mov	r3, r0
   12146:	73fb      	strb	r3, [r7, #15]
         
  close();
   12148:	6878      	ldr	r0, [r7, #4]
   1214a:	4b06      	ldr	r3, [pc, #24]	; (12164 <_ZN15Holt_3593_Class10R_RegisterEc+0x44>)
   1214c:	4798      	blx	r3
  return R_Reg;
   1214e:	7bfb      	ldrb	r3, [r7, #15]
}
   12150:	4618      	mov	r0, r3
   12152:	3710      	adds	r7, #16
   12154:	46bd      	mov	sp, r7
   12156:	bd80      	pop	{r7, pc}
   12158:	00011c65 	.word	0x00011c65
   1215c:	00011f5d 	.word	0x00011f5d
   12160:	00011e19 	.word	0x00011e19
   12164:	00011c8d 	.word	0x00011c8d

00012168 <_ZN15Holt_3593_Class6SS_LowEv>:
  //--------------------------------------------    
	open();                             // assert the SPI0 /SS strobe
  } 

void Holt_3593_Class::SS_Low(void)
{
   12168:	b580      	push	{r7, lr}
   1216a:	b082      	sub	sp, #8
   1216c:	af00      	add	r7, sp, #0
   1216e:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);
   12170:	2100      	movs	r1, #0
   12172:	204e      	movs	r0, #78	; 0x4e
   12174:	4b02      	ldr	r3, [pc, #8]	; (12180 <_ZN15Holt_3593_Class6SS_LowEv+0x18>)
   12176:	4798      	blx	r3
}
   12178:	bf00      	nop
   1217a:	3708      	adds	r7, #8
   1217c:	46bd      	mov	sp, r7
   1217e:	bd80      	pop	{r7, pc}
   12180:	00011a31 	.word	0x00011a31

00012184 <_ZN15Holt_3593_Class7SS_HighEv>:
void Holt_3593_Class::SS_High(void)
{
   12184:	b580      	push	{r7, lr}
   12186:	b082      	sub	sp, #8
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
   1218c:	2101      	movs	r1, #1
   1218e:	204e      	movs	r0, #78	; 0x4e
   12190:	4b02      	ldr	r3, [pc, #8]	; (1219c <_ZN15Holt_3593_Class7SS_HighEv+0x18>)
   12192:	4798      	blx	r3
}
   12194:	bf00      	nop
   12196:	3708      	adds	r7, #8
   12198:	46bd      	mov	sp, r7
   1219a:	bd80      	pop	{r7, pc}
   1219c:	00011a31 	.word	0x00011a31

000121a0 <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
   121a0:	b480      	push	{r7}
   121a2:	b083      	sub	sp, #12
   121a4:	af00      	add	r7, sp, #0
   121a6:	6078      	str	r0, [r7, #4]
   121a8:	6039      	str	r1, [r7, #0]
   121aa:	683b      	ldr	r3, [r7, #0]
   121ac:	681a      	ldr	r2, [r3, #0]
   121ae:	687b      	ldr	r3, [r7, #4]
   121b0:	601a      	str	r2, [r3, #0]
   121b2:	687b      	ldr	r3, [r7, #4]
   121b4:	681b      	ldr	r3, [r3, #0]
   121b6:	3b0c      	subs	r3, #12
   121b8:	681b      	ldr	r3, [r3, #0]
   121ba:	461a      	mov	r2, r3
   121bc:	687b      	ldr	r3, [r7, #4]
   121be:	4413      	add	r3, r2
   121c0:	683a      	ldr	r2, [r7, #0]
   121c2:	6852      	ldr	r2, [r2, #4]
   121c4:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
   121c6:	687b      	ldr	r3, [r7, #4]
   121c8:	4618      	mov	r0, r3
   121ca:	370c      	adds	r7, #12
   121cc:	46bd      	mov	sp, r7
   121ce:	bc80      	pop	{r7}
   121d0:	4770      	bx	lr

000121d2 <_ZN14Protocol_Class13GetActiveLineEv>:

uint8_t	Protocol_Class::GetActiveLine(void){
   121d2:	b590      	push	{r4, r7, lr}
   121d4:	b085      	sub	sp, #20
   121d6:	af00      	add	r7, sp, #0
   121d8:	6078      	str	r0, [r7, #4]
	uint32_t	data=ReadBufferLabel(Label2Byte(270));
   121da:	687b      	ldr	r3, [r7, #4]
   121dc:	681b      	ldr	r3, [r3, #0]
   121de:	3308      	adds	r3, #8
   121e0:	681c      	ldr	r4, [r3, #0]
   121e2:	687b      	ldr	r3, [r7, #4]
   121e4:	681b      	ldr	r3, [r3, #0]
   121e6:	3b0c      	subs	r3, #12
   121e8:	681b      	ldr	r3, [r3, #0]
   121ea:	461a      	mov	r2, r3
   121ec:	687b      	ldr	r3, [r7, #4]
   121ee:	4413      	add	r3, r2
   121f0:	681b      	ldr	r3, [r3, #0]
   121f2:	3304      	adds	r3, #4
   121f4:	681b      	ldr	r3, [r3, #0]
   121f6:	687a      	ldr	r2, [r7, #4]
   121f8:	6812      	ldr	r2, [r2, #0]
   121fa:	3a0c      	subs	r2, #12
   121fc:	6812      	ldr	r2, [r2, #0]
   121fe:	4611      	mov	r1, r2
   12200:	687a      	ldr	r2, [r7, #4]
   12202:	440a      	add	r2, r1
   12204:	f44f 7187 	mov.w	r1, #270	; 0x10e
   12208:	4610      	mov	r0, r2
   1220a:	4798      	blx	r3
   1220c:	4603      	mov	r3, r0
   1220e:	4619      	mov	r1, r3
   12210:	6878      	ldr	r0, [r7, #4]
   12212:	47a0      	blx	r4
   12214:	60f8      	str	r0, [r7, #12]
	uint8_t	key=uint8_t((data&0xc0000)>>18);
   12216:	68fb      	ldr	r3, [r7, #12]
   12218:	0c9b      	lsrs	r3, r3, #18
   1221a:	b2db      	uxtb	r3, r3
   1221c:	f003 0303 	and.w	r3, r3, #3
   12220:	72fb      	strb	r3, [r7, #11]

	return key;
   12222:	7afb      	ldrb	r3, [r7, #11]
}
   12224:	4618      	mov	r0, r3
   12226:	3714      	adds	r7, #20
   12228:	46bd      	mov	sp, r7
   1222a:	bd90      	pop	{r4, r7, pc}

0001222c <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   1222c:	b480      	push	{r7}
   1222e:	b083      	sub	sp, #12
   12230:	af00      	add	r7, sp, #0
   12232:	6078      	str	r0, [r7, #4]
    return (void *)0;
   12234:	2300      	movs	r3, #0
	}
   12236:	4618      	mov	r0, r3
   12238:	370c      	adds	r7, #12
   1223a:	46bd      	mov	sp, r7
   1223c:	bc80      	pop	{r7}
   1223e:	4770      	bx	lr

00012240 <free>:
//............................................................................
extern "C" void free(void *)
	{
   12240:	b480      	push	{r7}
   12242:	b083      	sub	sp, #12
   12244:	af00      	add	r7, sp, #0
   12246:	6078      	str	r0, [r7, #4]
	}
   12248:	bf00      	nop
   1224a:	370c      	adds	r7, #12
   1224c:	46bd      	mov	sp, r7
   1224e:	bc80      	pop	{r7}
   12250:	4770      	bx	lr

00012252 <_sbrk>:

extern "C" void *_sbrk (ptrdiff_t)
	{
   12252:	b480      	push	{r7}
   12254:	b083      	sub	sp, #12
   12256:	af00      	add	r7, sp, #0
   12258:	6078      	str	r0, [r7, #4]
    return (void *)0;
   1225a:	2300      	movs	r3, #0
	}
   1225c:	4618      	mov	r0, r3
   1225e:	370c      	adds	r7, #12
   12260:	46bd      	mov	sp, r7
   12262:	bc80      	pop	{r7}
   12264:	4770      	bx	lr

00012266 <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   12266:	b480      	push	{r7}
   12268:	af00      	add	r7, sp, #0
		}
   1226a:	bf00      	nop
   1226c:	46bd      	mov	sp, r7
   1226e:	bc80      	pop	{r7}
   12270:	4770      	bx	lr
	...

00012274 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
   12274:	b580      	push	{r7, lr}
   12276:	b082      	sub	sp, #8
   12278:	af00      	add	r7, sp, #0
   1227a:	6078      	str	r0, [r7, #4]
	free(p);
   1227c:	6878      	ldr	r0, [r7, #4]
   1227e:	4b03      	ldr	r3, [pc, #12]	; (1228c <_ZdlPv+0x18>)
   12280:	4798      	blx	r3
	}
   12282:	bf00      	nop
   12284:	3708      	adds	r7, #8
   12286:	46bd      	mov	sp, r7
   12288:	bd80      	pop	{r7, pc}
   1228a:	bf00      	nop
   1228c:	00012241 	.word	0x00012241

00012290 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
   12290:	b480      	push	{r7}
   12292:	b083      	sub	sp, #12
   12294:	af00      	add	r7, sp, #0
   12296:	6078      	str	r0, [r7, #4]
   12298:	687b      	ldr	r3, [r7, #4]
   1229a:	4618      	mov	r0, r3
   1229c:	370c      	adds	r7, #12
   1229e:	46bd      	mov	sp, r7
   122a0:	bc80      	pop	{r7}
   122a2:	4770      	bx	lr

000122a4 <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
   122a4:	b480      	push	{r7}
   122a6:	b083      	sub	sp, #12
   122a8:	af00      	add	r7, sp, #0
   122aa:	6078      	str	r0, [r7, #4]
   122ac:	687b      	ldr	r3, [r7, #4]
   122ae:	4618      	mov	r0, r3
   122b0:	370c      	adds	r7, #12
   122b2:	46bd      	mov	sp, r7
   122b4:	bc80      	pop	{r7}
   122b6:	4770      	bx	lr

000122b8 <_ZN11Diagnostics12troubleshootEhb>:
#include "diagnostics.h"
#include "CDC_Class.h"


//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
   122b8:	b580      	push	{r7, lr}
   122ba:	b084      	sub	sp, #16
   122bc:	af00      	add	r7, sp, #0
   122be:	6078      	str	r0, [r7, #4]
   122c0:	460b      	mov	r3, r1
   122c2:	70fb      	strb	r3, [r7, #3]
   122c4:	4613      	mov	r3, r2
   122c6:	70bb      	strb	r3, [r7, #2]
  bool _printoverride;
  errorcode = _code;
   122c8:	687b      	ldr	r3, [r7, #4]
   122ca:	78fa      	ldrb	r2, [r7, #3]
   122cc:	701a      	strb	r2, [r3, #0]
  _printoverride = true;
#elif defined (RUNDIAGNOSTIC) && defined (ARDUINO_ARCH_AVR)
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
   122ce:	78bb      	ldrb	r3, [r7, #2]
   122d0:	73fb      	strb	r3, [r7, #15]
#endif
  if (_printoverride) {
   122d2:	7bfb      	ldrb	r3, [r7, #15]
   122d4:	2b00      	cmp	r3, #0
   122d6:	f000 80ba 	beq.w	1244e <_ZN11Diagnostics12troubleshootEhb+0x196>
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
   122da:	78fb      	ldrb	r3, [r7, #3]
   122dc:	2b14      	cmp	r3, #20
   122de:	f200 80a2 	bhi.w	12426 <_ZN11Diagnostics12troubleshootEhb+0x16e>
   122e2:	a201      	add	r2, pc, #4	; (adr r2, 122e8 <_ZN11Diagnostics12troubleshootEhb+0x30>)
   122e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   122e8:	0001233d 	.word	0x0001233d
   122ec:	00012351 	.word	0x00012351
   122f0:	0001235b 	.word	0x0001235b
   122f4:	00012365 	.word	0x00012365
   122f8:	0001236f 	.word	0x0001236f
   122fc:	00012381 	.word	0x00012381
   12300:	0001238b 	.word	0x0001238b
   12304:	0001239d 	.word	0x0001239d
   12308:	000123af 	.word	0x000123af
   1230c:	000123c3 	.word	0x000123c3
   12310:	000123cd 	.word	0x000123cd
   12314:	00012347 	.word	0x00012347
   12318:	000123b9 	.word	0x000123b9
   1231c:	000123d7 	.word	0x000123d7
   12320:	000123e1 	.word	0x000123e1
   12324:	000123eb 	.word	0x000123eb
   12328:	000123f5 	.word	0x000123f5
   1232c:	000123ff 	.word	0x000123ff
   12330:	00012409 	.word	0x00012409
   12334:	00012413 	.word	0x00012413
   12338:	0001241d 	.word	0x0001241d
      case SUCCESS:
      usb.println(F("Function executed successfully"));
   1233c:	4946      	ldr	r1, [pc, #280]	; (12458 <_ZN11Diagnostics12troubleshootEhb+0x1a0>)
   1233e:	4847      	ldr	r0, [pc, #284]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   12340:	4b47      	ldr	r3, [pc, #284]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   12342:	4798      	blx	r3
      break;
   12344:	e074      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NORESPONSE:
      usb.println(F("Check your wiring. Flash chip is non-responsive."));
   12346:	4947      	ldr	r1, [pc, #284]	; (12464 <_ZN11Diagnostics12troubleshootEhb+0x1ac>)
   12348:	4844      	ldr	r0, [pc, #272]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1234a:	4b45      	ldr	r3, [pc, #276]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1234c:	4798      	blx	r3
      break;
   1234e:	e06f      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CALLBEGIN:
      usb.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
   12350:	4945      	ldr	r1, [pc, #276]	; (12468 <_ZN11Diagnostics12troubleshootEhb+0x1b0>)
   12352:	4842      	ldr	r0, [pc, #264]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   12354:	4b42      	ldr	r3, [pc, #264]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   12356:	4798      	blx	r3
      break;
   12358:	e06a      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCHIP:
      usb.println(F("Unable to identify chip. Are you sure this chip is supported?"));
   1235a:	4944      	ldr	r1, [pc, #272]	; (1246c <_ZN11Diagnostics12troubleshootEhb+0x1b4>)
   1235c:	483f      	ldr	r0, [pc, #252]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1235e:	4b40      	ldr	r3, [pc, #256]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   12360:	4798      	blx	r3
      //usb.println(F("Chip details:"));
      //TODO: Insert a diagnostics subroutine here.
      break;
   12362:	e065      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCAP:
      usb.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
   12364:	4942      	ldr	r1, [pc, #264]	; (12470 <_ZN11Diagnostics12troubleshootEhb+0x1b8>)
   12366:	483d      	ldr	r0, [pc, #244]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   12368:	4b3d      	ldr	r3, [pc, #244]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1236a:	4798      	blx	r3
      break;
   1236c:	e060      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPBUSY:
      usb.println(F("Chip is busy."));
   1236e:	4941      	ldr	r1, [pc, #260]	; (12474 <_ZN11Diagnostics12troubleshootEhb+0x1bc>)
   12370:	483a      	ldr	r0, [pc, #232]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   12372:	4b3b      	ldr	r3, [pc, #236]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   12374:	4798      	blx	r3
      usb.println(F("Make sure all pins have been connected properly"));
   12376:	4940      	ldr	r1, [pc, #256]	; (12478 <_ZN11Diagnostics12troubleshootEhb+0x1c0>)
   12378:	4838      	ldr	r0, [pc, #224]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1237a:	4b39      	ldr	r3, [pc, #228]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1237c:	4798      	blx	r3
      break;
   1237e:	e057      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case OUTOFBOUNDS:
      usb.println(F("Page overflow has been disabled and the address called exceeds the memory"));
   12380:	493e      	ldr	r1, [pc, #248]	; (1247c <_ZN11Diagnostics12troubleshootEhb+0x1c4>)
   12382:	4836      	ldr	r0, [pc, #216]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   12384:	4b36      	ldr	r3, [pc, #216]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   12386:	4798      	blx	r3
      break;
   12388:	e052      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CANTENWRITE:
      usb.println(F("Unable to Enable Writing to chip."));
   1238a:	493d      	ldr	r1, [pc, #244]	; (12480 <_ZN11Diagnostics12troubleshootEhb+0x1c8>)
   1238c:	4833      	ldr	r0, [pc, #204]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1238e:	4b34      	ldr	r3, [pc, #208]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   12390:	4798      	blx	r3
      usb.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
   12392:	493c      	ldr	r1, [pc, #240]	; (12484 <_ZN11Diagnostics12troubleshootEhb+0x1cc>)
   12394:	4831      	ldr	r0, [pc, #196]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   12396:	4b32      	ldr	r3, [pc, #200]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   12398:	4798      	blx	r3
      break;
   1239a:	e049      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case PREVWRITTEN:
      usb.println(F("This sector already contains data."));
   1239c:	493a      	ldr	r1, [pc, #232]	; (12488 <_ZN11Diagnostics12troubleshootEhb+0x1d0>)
   1239e:	482f      	ldr	r0, [pc, #188]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   123a0:	4b2f      	ldr	r3, [pc, #188]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   123a2:	4798      	blx	r3
      usb.println(F("Please make sure the sectors being written to are erased."));
   123a4:	4939      	ldr	r1, [pc, #228]	; (1248c <_ZN11Diagnostics12troubleshootEhb+0x1d4>)
   123a6:	482d      	ldr	r0, [pc, #180]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   123a8:	4b2d      	ldr	r3, [pc, #180]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   123aa:	4798      	blx	r3
      break;
   123ac:	e040      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case LOWRAM:
      usb.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
   123ae:	4938      	ldr	r1, [pc, #224]	; (12490 <_ZN11Diagnostics12troubleshootEhb+0x1d8>)
   123b0:	482a      	ldr	r0, [pc, #168]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   123b2:	4b2b      	ldr	r3, [pc, #172]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   123b4:	4798      	blx	r3
      /*#if defined (ARDUINO_ARCH_SAM)
        usb.print(F("Current Free SRAM: "));
        usb.println(freeRAM());
      #endif*/
      break;
   123b6:	e03b      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNSUPPORTEDFUNC:
      usb.println(F("This function is not supported by the flash memory hardware."));
   123b8:	4936      	ldr	r1, [pc, #216]	; (12494 <_ZN11Diagnostics12troubleshootEhb+0x1dc>)
   123ba:	4828      	ldr	r0, [pc, #160]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   123bc:	4b28      	ldr	r3, [pc, #160]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   123be:	4798      	blx	r3
      break;
   123c0:	e036      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case SYSSUSPEND:
      usb.println(F("Unable to suspend/resume operation."));
   123c2:	4935      	ldr	r1, [pc, #212]	; (12498 <_ZN11Diagnostics12troubleshootEhb+0x1e0>)
   123c4:	4825      	ldr	r0, [pc, #148]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   123c6:	4b26      	ldr	r3, [pc, #152]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   123c8:	4798      	blx	r3
      break;
   123ca:	e031      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case ERRORCHKFAIL:
      usb.println(F("Write Function has failed errorcheck."));
   123cc:	4933      	ldr	r1, [pc, #204]	; (1249c <_ZN11Diagnostics12troubleshootEhb+0x1e4>)
   123ce:	4823      	ldr	r0, [pc, #140]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   123d0:	4b23      	ldr	r3, [pc, #140]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   123d2:	4798      	blx	r3
      break;
   123d4:	e02c      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO4BYTE:
      usb.println(F("Unable to enable 4-byte addressing."));
   123d6:	4932      	ldr	r1, [pc, #200]	; (124a0 <_ZN11Diagnostics12troubleshootEhb+0x1e8>)
   123d8:	4820      	ldr	r0, [pc, #128]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   123da:	4b21      	ldr	r3, [pc, #132]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   123dc:	4798      	blx	r3
      break;
   123de:	e027      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO3BYTE:
      usb.println(F("Unable to disable 4-byte addressing."));
   123e0:	4930      	ldr	r1, [pc, #192]	; (124a4 <_ZN11Diagnostics12troubleshootEhb+0x1ec>)
   123e2:	481e      	ldr	r0, [pc, #120]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   123e4:	4b1e      	ldr	r3, [pc, #120]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   123e6:	4798      	blx	r3
      break;
   123e8:	e022      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPISPOWEREDDOWN:
      usb.println(F("The chip is currently powered down."));
   123ea:	492f      	ldr	r1, [pc, #188]	; (124a8 <_ZN11Diagnostics12troubleshootEhb+0x1f0>)
   123ec:	481b      	ldr	r0, [pc, #108]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   123ee:	4b1c      	ldr	r3, [pc, #112]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   123f0:	4798      	blx	r3
      break;
   123f2:	e01d      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDP:
      usb.println(F("The Flash chip does not support SFDP."));
   123f4:	492d      	ldr	r1, [pc, #180]	; (124ac <_ZN11Diagnostics12troubleshootEhb+0x1f4>)
   123f6:	4819      	ldr	r0, [pc, #100]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   123f8:	4b19      	ldr	r3, [pc, #100]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   123fa:	4798      	blx	r3
      break;
   123fc:	e018      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASEPARAM:
      usb.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
   123fe:	492c      	ldr	r1, [pc, #176]	; (124b0 <_ZN11Diagnostics12troubleshootEhb+0x1f8>)
   12400:	4816      	ldr	r0, [pc, #88]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   12402:	4b17      	ldr	r3, [pc, #92]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   12404:	4798      	blx	r3
      break;
   12406:	e013      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASETIME:
      usb.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
   12408:	492a      	ldr	r1, [pc, #168]	; (124b4 <_ZN11Diagnostics12troubleshootEhb+0x1fc>)
   1240a:	4814      	ldr	r0, [pc, #80]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1240c:	4b14      	ldr	r3, [pc, #80]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1240e:	4798      	blx	r3
      break;
   12410:	e00e      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPPROGRAMTIMEPARAM:
      usb.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
   12412:	4929      	ldr	r1, [pc, #164]	; (124b8 <_ZN11Diagnostics12troubleshootEhb+0x200>)
   12414:	4811      	ldr	r0, [pc, #68]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   12416:	4b12      	ldr	r3, [pc, #72]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   12418:	4798      	blx	r3
      break;
   1241a:	e009      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOCHIPSELECTDECLARED:
      usb.println(F("No Chip Select pin defined in the custom SPI Array."));
   1241c:	4927      	ldr	r1, [pc, #156]	; (124bc <_ZN11Diagnostics12troubleshootEhb+0x204>)
   1241e:	480f      	ldr	r0, [pc, #60]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   12420:	4b0f      	ldr	r3, [pc, #60]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   12422:	4798      	blx	r3
      break;
   12424:	e004      	b.n	12430 <_ZN11Diagnostics12troubleshootEhb+0x178>

      default:
      usb.println(F("Unknown error"));
   12426:	4926      	ldr	r1, [pc, #152]	; (124c0 <_ZN11Diagnostics12troubleshootEhb+0x208>)
   12428:	480c      	ldr	r0, [pc, #48]	; (1245c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1242a:	4b0d      	ldr	r3, [pc, #52]	; (12460 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1242c:	4798      	blx	r3
      break;
   1242e:	bf00      	nop
    }
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
   12430:	78fb      	ldrb	r3, [r7, #3]
   12432:	2b0a      	cmp	r3, #10
   12434:	d008      	beq.n	12448 <_ZN11Diagnostics12troubleshootEhb+0x190>
   12436:	78fb      	ldrb	r3, [r7, #3]
   12438:	2b06      	cmp	r3, #6
   1243a:	d005      	beq.n	12448 <_ZN11Diagnostics12troubleshootEhb+0x190>
   1243c:	78fb      	ldrb	r3, [r7, #3]
   1243e:	2b02      	cmp	r3, #2
   12440:	d002      	beq.n	12448 <_ZN11Diagnostics12troubleshootEhb+0x190>
   12442:	78fb      	ldrb	r3, [r7, #3]
   12444:	2b0b      	cmp	r3, #11
   12446:	d102      	bne.n	1244e <_ZN11Diagnostics12troubleshootEhb+0x196>
      _printSupportLink();
   12448:	6878      	ldr	r0, [r7, #4]
   1244a:	4b1e      	ldr	r3, [pc, #120]	; (124c4 <_ZN11Diagnostics12troubleshootEhb+0x20c>)
   1244c:	4798      	blx	r3
    }
  #endif
  }
}
   1244e:	bf00      	nop
   12450:	3710      	adds	r7, #16
   12452:	46bd      	mov	sp, r7
   12454:	bd80      	pop	{r7, pc}
   12456:	bf00      	nop
   12458:	0001de38 	.word	0x0001de38
   1245c:	20005304 	.word	0x20005304
   12460:	00015a79 	.word	0x00015a79
   12464:	0001de58 	.word	0x0001de58
   12468:	0001de8c 	.word	0x0001de8c
   1246c:	0001decc 	.word	0x0001decc
   12470:	0001df0c 	.word	0x0001df0c
   12474:	0001dfa4 	.word	0x0001dfa4
   12478:	0001dfb4 	.word	0x0001dfb4
   1247c:	0001dfe4 	.word	0x0001dfe4
   12480:	0001e030 	.word	0x0001e030
   12484:	0001e054 	.word	0x0001e054
   12488:	0001e098 	.word	0x0001e098
   1248c:	0001e0bc 	.word	0x0001e0bc
   12490:	0001e0f8 	.word	0x0001e0f8
   12494:	0001e148 	.word	0x0001e148
   12498:	0001e188 	.word	0x0001e188
   1249c:	0001e1ac 	.word	0x0001e1ac
   124a0:	0001e1d4 	.word	0x0001e1d4
   124a4:	0001e1f8 	.word	0x0001e1f8
   124a8:	0001e220 	.word	0x0001e220
   124ac:	0001e244 	.word	0x0001e244
   124b0:	0001e26c 	.word	0x0001e26c
   124b4:	0001e2b8 	.word	0x0001e2b8
   124b8:	0001e308 	.word	0x0001e308
   124bc:	0001e358 	.word	0x0001e358
   124c0:	0001e38c 	.word	0x0001e38c
   124c4:	000124c9 	.word	0x000124c9

000124c8 <_ZN11Diagnostics17_printSupportLinkEv>:
		usb.print(F("0"));
	}
	usb.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
   124c8:	b580      	push	{r7, lr}
   124ca:	b082      	sub	sp, #8
   124cc:	af00      	add	r7, sp, #0
   124ce:	6078      	str	r0, [r7, #4]
	usb.print(F("If this does not help resolve/clarify this issue, "));
   124d0:	4905      	ldr	r1, [pc, #20]	; (124e8 <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
   124d2:	4806      	ldr	r0, [pc, #24]	; (124ec <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   124d4:	4b06      	ldr	r3, [pc, #24]	; (124f0 <_ZN11Diagnostics17_printSupportLinkEv+0x28>)
   124d6:	4798      	blx	r3
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
   124d8:	4906      	ldr	r1, [pc, #24]	; (124f4 <_ZN11Diagnostics17_printSupportLinkEv+0x2c>)
   124da:	4804      	ldr	r0, [pc, #16]	; (124ec <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   124dc:	4b06      	ldr	r3, [pc, #24]	; (124f8 <_ZN11Diagnostics17_printSupportLinkEv+0x30>)
   124de:	4798      	blx	r3
}
   124e0:	bf00      	nop
   124e2:	3708      	adds	r7, #8
   124e4:	46bd      	mov	sp, r7
   124e6:	bd80      	pop	{r7, pc}
   124e8:	0001e3b0 	.word	0x0001e3b0
   124ec:	20005304 	.word	0x20005304
   124f0:	000159a9 	.word	0x000159a9
   124f4:	0001e3e4 	.word	0x0001e3e4
   124f8:	00015a79 	.word	0x00015a79

000124fc <_Z41__static_initialization_and_destruction_0ii>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
   124fc:	b580      	push	{r7, lr}
   124fe:	b082      	sub	sp, #8
   12500:	af00      	add	r7, sp, #0
   12502:	6078      	str	r0, [r7, #4]
   12504:	6039      	str	r1, [r7, #0]
   12506:	687b      	ldr	r3, [r7, #4]
   12508:	2b01      	cmp	r3, #1
   1250a:	d10c      	bne.n	12526 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   1250c:	683b      	ldr	r3, [r7, #0]
   1250e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12512:	4293      	cmp	r3, r2
   12514:	d107      	bne.n	12526 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   12516:	4806      	ldr	r0, [pc, #24]	; (12530 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12518:	4b06      	ldr	r3, [pc, #24]	; (12534 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1251a:	4798      	blx	r3
   1251c:	4a06      	ldr	r2, [pc, #24]	; (12538 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1251e:	4907      	ldr	r1, [pc, #28]	; (1253c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12520:	4803      	ldr	r0, [pc, #12]	; (12530 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12522:	4b07      	ldr	r3, [pc, #28]	; (12540 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   12524:	4798      	blx	r3
   12526:	bf00      	nop
   12528:	3708      	adds	r7, #8
   1252a:	46bd      	mov	sp, r7
   1252c:	bd80      	pop	{r7, pc}
   1252e:	bf00      	nop
   12530:	20003d80 	.word	0x20003d80
   12534:	00012291 	.word	0x00012291
   12538:	20000000 	.word	0x20000000
   1253c:	000122a5 	.word	0x000122a5
   12540:	000167bd 	.word	0x000167bd

00012544 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
   12544:	b580      	push	{r7, lr}
   12546:	af00      	add	r7, sp, #0
   12548:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1254c:	2001      	movs	r0, #1
   1254e:	4b01      	ldr	r3, [pc, #4]	; (12554 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
   12550:	4798      	blx	r3
   12552:	bd80      	pop	{r7, pc}
   12554:	000124fd 	.word	0x000124fd

00012558 <_ZL14EventTimerTaskPK10timer_task>:
#define CHECK_EVENT_PERIOD 50
#endif
const tick_t	forever = 0x7fffffff;
EventHandler_Class	*ptrEventHandlerClass;

static void	EventTimerTask(const struct timer_task *const timer_task){
   12558:	b480      	push	{r7}
   1255a:	b083      	sub	sp, #12
   1255c:	af00      	add	r7, sp, #0
   1255e:	6078      	str	r0, [r7, #4]
	ptrEventHandlerClass->eventTimeout=true;
   12560:	4b04      	ldr	r3, [pc, #16]	; (12574 <_ZL14EventTimerTaskPK10timer_task+0x1c>)
   12562:	681b      	ldr	r3, [r3, #0]
   12564:	2201      	movs	r2, #1
   12566:	701a      	strb	r2, [r3, #0]
}
   12568:	bf00      	nop
   1256a:	370c      	adds	r7, #12
   1256c:	46bd      	mov	sp, r7
   1256e:	bc80      	pop	{r7}
   12570:	4770      	bx	lr
   12572:	bf00      	nop
   12574:	20004d8c 	.word	0x20004d8c

00012578 <_ZN18EventHandler_ClassC1Ev>:


// default constructor
EventHandler_Class::EventHandler_Class()
   12578:	b480      	push	{r7}
   1257a:	b083      	sub	sp, #12
   1257c:	af00      	add	r7, sp, #0
   1257e:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   12580:	4a04      	ldr	r2, [pc, #16]	; (12594 <_ZN18EventHandler_ClassC1Ev+0x1c>)
   12582:	687b      	ldr	r3, [r7, #4]
   12584:	6013      	str	r3, [r2, #0]
} //EventHandler_Class
   12586:	687b      	ldr	r3, [r7, #4]
   12588:	4618      	mov	r0, r3
   1258a:	370c      	adds	r7, #12
   1258c:	46bd      	mov	sp, r7
   1258e:	bc80      	pop	{r7}
   12590:	4770      	bx	lr
   12592:	bf00      	nop
   12594:	20004d8c 	.word	0x20004d8c

00012598 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
   12598:	b480      	push	{r7}
   1259a:	b083      	sub	sp, #12
   1259c:	af00      	add	r7, sp, #0
   1259e:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   125a0:	4a04      	ldr	r2, [pc, #16]	; (125b4 <_ZN18EventHandler_ClassD1Ev+0x1c>)
   125a2:	687b      	ldr	r3, [r7, #4]
   125a4:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
   125a6:	687b      	ldr	r3, [r7, #4]
   125a8:	4618      	mov	r0, r3
   125aa:	370c      	adds	r7, #12
   125ac:	46bd      	mov	sp, r7
   125ae:	bc80      	pop	{r7}
   125b0:	4770      	bx	lr
   125b2:	bf00      	nop
   125b4:	20004d8c 	.word	0x20004d8c

000125b8 <_ZN18EventHandler_Class12WaitForEventER5eventttl>:
		usb<< "initializeEvents: event #" << i << " == " << (void*)&eventStorage[i] << ", next == " << (void*)eventStorage[i].next << newline;
	}

	#endif
}
bool	EventHandler_Class::WaitForEvent(event& e, uint16 eventClass, uint16 eventType, tick_t timeout){
   125b8:	b590      	push	{r4, r7, lr}
   125ba:	b087      	sub	sp, #28
   125bc:	af02      	add	r7, sp, #8
   125be:	60f8      	str	r0, [r7, #12]
   125c0:	60b9      	str	r1, [r7, #8]
   125c2:	4611      	mov	r1, r2
   125c4:	461a      	mov	r2, r3
   125c6:	460b      	mov	r3, r1
   125c8:	80fb      	strh	r3, [r7, #6]
   125ca:	4613      	mov	r3, r2
   125cc:	80bb      	strh	r3, [r7, #4]
	return	WaitForEvent(e,(EventClass)eventClass,(EventType)eventType,timeout);
   125ce:	88b9      	ldrh	r1, [r7, #4]
   125d0:	88fa      	ldrh	r2, [r7, #6]
   125d2:	6a3b      	ldr	r3, [r7, #32]
   125d4:	9300      	str	r3, [sp, #0]
   125d6:	460b      	mov	r3, r1
   125d8:	68b9      	ldr	r1, [r7, #8]
   125da:	68f8      	ldr	r0, [r7, #12]
   125dc:	4c03      	ldr	r4, [pc, #12]	; (125ec <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x34>)
   125de:	47a0      	blx	r4
   125e0:	4603      	mov	r3, r0
}
   125e2:	4618      	mov	r0, r3
   125e4:	3714      	adds	r7, #20
   125e6:	46bd      	mov	sp, r7
   125e8:	bd90      	pop	{r4, r7, pc}
   125ea:	bf00      	nop
   125ec:	000125f1 	.word	0x000125f1

000125f0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel>:

bool	EventHandler_Class::WaitForEvent(event& e, EventClass eventClass, EventType eventType, tick_t timeout)
{
   125f0:	b590      	push	{r4, r7, lr}
   125f2:	b08b      	sub	sp, #44	; 0x2c
   125f4:	af00      	add	r7, sp, #0
   125f6:	60f8      	str	r0, [r7, #12]
   125f8:	60b9      	str	r1, [r7, #8]
   125fa:	4611      	mov	r1, r2
   125fc:	461a      	mov	r2, r3
   125fe:	460b      	mov	r3, r1
   12600:	80fb      	strh	r3, [r7, #6]
   12602:	4613      	mov	r3, r2
   12604:	80bb      	strh	r3, [r7, #4]
	bool	result(false);
   12606:	2300      	movs	r3, #0
   12608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	event*	queue;
	event*	queuePrev(NULL);
   1260c:	2300      	movs	r3, #0
   1260e:	61fb      	str	r3, [r7, #28]
	
	
	e.eventClass = eventClass;
   12610:	68bb      	ldr	r3, [r7, #8]
   12612:	88fa      	ldrh	r2, [r7, #6]
   12614:	801a      	strh	r2, [r3, #0]
	e.eventType = eventType;
   12616:	68bb      	ldr	r3, [r7, #8]
   12618:	88ba      	ldrh	r2, [r7, #4]
   1261a:	805a      	strh	r2, [r3, #2]

	tick_t	timeoutTime;
	
	if (timeout != forever)
   1261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1261e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   12622:	4293      	cmp	r3, r2
   12624:	d007      	beq.n	12636 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x46>
	timeoutTime = (eventTimer.Get_ticks() + timeout);
   12626:	4853      	ldr	r0, [pc, #332]	; (12774 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   12628:	4b53      	ldr	r3, [pc, #332]	; (12778 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   1262a:	4798      	blx	r3
   1262c:	4602      	mov	r2, r0
   1262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12630:	4413      	add	r3, r2
   12632:	61bb      	str	r3, [r7, #24]
   12634:	e002      	b.n	1263c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
	else
	timeoutTime = forever;
   12636:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1263a:	61bb      	str	r3, [r7, #24]

	while (!result && (eventTimer.Get_ticks() < timeoutTime))
   1263c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   12640:	f083 0301 	eor.w	r3, r3, #1
   12644:	b2db      	uxtb	r3, r3
   12646:	2b00      	cmp	r3, #0
   12648:	d008      	beq.n	1265c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6c>
   1264a:	484a      	ldr	r0, [pc, #296]	; (12774 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   1264c:	4b4a      	ldr	r3, [pc, #296]	; (12778 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   1264e:	4798      	blx	r3
   12650:	4602      	mov	r2, r0
   12652:	69bb      	ldr	r3, [r7, #24]
   12654:	429a      	cmp	r2, r3
   12656:	d201      	bcs.n	1265c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6c>
   12658:	2301      	movs	r3, #1
   1265a:	e000      	b.n	1265e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6e>
   1265c:	2300      	movs	r3, #0
   1265e:	2b00      	cmp	r3, #0
   12660:	f000 8081 	beq.w	12766 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x176>
	{
		if (eventHandler)
   12664:	68fb      	ldr	r3, [r7, #12]
   12666:	685b      	ldr	r3, [r3, #4]
   12668:	2b00      	cmp	r3, #0
   1266a:	d002      	beq.n	12672 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x82>
		{
			eventHandler();
   1266c:	68fb      	ldr	r3, [r7, #12]
   1266e:	685b      	ldr	r3, [r3, #4]
   12670:	4798      	blx	r3
		}

		queue = (event*)mainThreadEventQueue;
   12672:	4b42      	ldr	r3, [pc, #264]	; (1277c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x18c>)
   12674:	681b      	ldr	r3, [r3, #0]
   12676:	623b      	str	r3, [r7, #32]

		while (queue)
   12678:	6a3b      	ldr	r3, [r7, #32]
   1267a:	2b00      	cmp	r3, #0
   1267c:	d041      	beq.n	12702 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x112>
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
		
			#endif
			if (
			((e.eventClass == kAnyEventClass) ||
   1267e:	68bb      	ldr	r3, [r7, #8]
   12680:	881b      	ldrh	r3, [r3, #0]
			if (
   12682:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12686:	4293      	cmp	r3, r2
   12688:	d005      	beq.n	12696 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xa6>
			(queue->eventClass == e.eventClass))
   1268a:	6a3b      	ldr	r3, [r7, #32]
   1268c:	881a      	ldrh	r2, [r3, #0]
   1268e:	68bb      	ldr	r3, [r7, #8]
   12690:	881b      	ldrh	r3, [r3, #0]
			((e.eventClass == kAnyEventClass) ||
   12692:	429a      	cmp	r2, r3
   12694:	d12f      	bne.n	126f6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x106>
			&&
			((e.eventType == kAnyEventType) ||
   12696:	68bb      	ldr	r3, [r7, #8]
   12698:	885b      	ldrh	r3, [r3, #2]
			&&
   1269a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1269e:	4293      	cmp	r3, r2
   126a0:	d005      	beq.n	126ae <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xbe>
			(queue->eventType == e.eventType))
   126a2:	6a3b      	ldr	r3, [r7, #32]
   126a4:	885a      	ldrh	r2, [r3, #2]
   126a6:	68bb      	ldr	r3, [r7, #8]
   126a8:	885b      	ldrh	r3, [r3, #2]
			((e.eventType == kAnyEventType) ||
   126aa:	429a      	cmp	r2, r3
   126ac:	d123      	bne.n	126f6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x106>
			)
			{
				if (queuePrev)
   126ae:	69fb      	ldr	r3, [r7, #28]
   126b0:	2b00      	cmp	r3, #0
   126b2:	d004      	beq.n	126be <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xce>
				{
					queuePrev->next = queue->next;
   126b4:	6a3b      	ldr	r3, [r7, #32]
   126b6:	68da      	ldr	r2, [r3, #12]
   126b8:	69fb      	ldr	r3, [r7, #28]
   126ba:	60da      	str	r2, [r3, #12]
   126bc:	e003      	b.n	126c6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xd6>
				}
				else
				{
					mainThreadEventQueue = queue->next;
   126be:	6a3b      	ldr	r3, [r7, #32]
   126c0:	68db      	ldr	r3, [r3, #12]
   126c2:	4a2e      	ldr	r2, [pc, #184]	; (1277c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x18c>)
   126c4:	6013      	str	r3, [r2, #0]
				}
				
				e = *queue;
   126c6:	68ba      	ldr	r2, [r7, #8]
   126c8:	6a3b      	ldr	r3, [r7, #32]
   126ca:	4614      	mov	r4, r2
   126cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   126ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				queue->next = eventQueue;
   126d2:	4b2b      	ldr	r3, [pc, #172]	; (12780 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x190>)
   126d4:	681a      	ldr	r2, [r3, #0]
   126d6:	6a3b      	ldr	r3, [r7, #32]
   126d8:	60da      	str	r2, [r3, #12]
				eventQueue = queue;
   126da:	4a29      	ldr	r2, [pc, #164]	; (12780 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x190>)
   126dc:	6a3b      	ldr	r3, [r7, #32]
   126de:	6013      	str	r3, [r2, #0]
				
				eventsInUse--;
   126e0:	68fb      	ldr	r3, [r7, #12]
   126e2:	689b      	ldr	r3, [r3, #8]
   126e4:	1e5a      	subs	r2, r3, #1
   126e6:	68fb      	ldr	r3, [r7, #12]
   126e8:	609a      	str	r2, [r3, #8]

				queue = NULL;
   126ea:	2300      	movs	r3, #0
   126ec:	623b      	str	r3, [r7, #32]
				result = true;
   126ee:	2301      	movs	r3, #1
   126f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   126f4:	e004      	b.n	12700 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x110>
			}
			else
			{
				queuePrev = queue;
   126f6:	6a3b      	ldr	r3, [r7, #32]
   126f8:	61fb      	str	r3, [r7, #28]
				queue = queue->next;
   126fa:	6a3b      	ldr	r3, [r7, #32]
   126fc:	68db      	ldr	r3, [r3, #12]
   126fe:	623b      	str	r3, [r7, #32]
		while (queue)
   12700:	e7ba      	b.n	12678 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x88>
			}
		}

		if (result)
   12702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   12706:	2b00      	cmp	r3, #0
   12708:	d198      	bne.n	1263c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
		
			#endif
		}
		else
		{
			tick_t	timeRemaining(timeoutTime - eventTimer.Get_ticks());
   1270a:	69bc      	ldr	r4, [r7, #24]
   1270c:	4819      	ldr	r0, [pc, #100]	; (12774 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   1270e:	4b1a      	ldr	r3, [pc, #104]	; (12778 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   12710:	4798      	blx	r3
   12712:	4603      	mov	r3, r0
   12714:	1ae3      	subs	r3, r4, r3
   12716:	617b      	str	r3, [r7, #20]
			eventTimeout=false;
   12718:	68fb      	ldr	r3, [r7, #12]
   1271a:	2200      	movs	r2, #0
   1271c:	701a      	strb	r2, [r3, #0]
			if (timeRemaining > CHECK_EVENT_PERIOD){
   1271e:	697b      	ldr	r3, [r7, #20]
   12720:	2b32      	cmp	r3, #50	; 0x32
   12722:	dd05      	ble.n	12730 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x140>
				eventTimer.add_oneShot_task((FUNC_PTR)EventTimerTask,CHECK_EVENT_PERIOD);
   12724:	2232      	movs	r2, #50	; 0x32
   12726:	4917      	ldr	r1, [pc, #92]	; (12784 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x194>)
   12728:	4812      	ldr	r0, [pc, #72]	; (12774 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   1272a:	4b17      	ldr	r3, [pc, #92]	; (12788 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x198>)
   1272c:	4798      	blx	r3
   1272e:	e00d      	b.n	1274c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x15c>
			}else if (timeRemaining > 0){
   12730:	697b      	ldr	r3, [r7, #20]
   12732:	2b00      	cmp	r3, #0
   12734:	dd0a      	ble.n	1274c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x15c>
				eventTimer.add_oneShot_task((FUNC_PTR)EventTimerTask,timeoutTime - eventTimer.Get_ticks());
   12736:	69bc      	ldr	r4, [r7, #24]
   12738:	480e      	ldr	r0, [pc, #56]	; (12774 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   1273a:	4b0f      	ldr	r3, [pc, #60]	; (12778 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   1273c:	4798      	blx	r3
   1273e:	4603      	mov	r3, r0
   12740:	1ae3      	subs	r3, r4, r3
   12742:	461a      	mov	r2, r3
   12744:	490f      	ldr	r1, [pc, #60]	; (12784 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x194>)
   12746:	480b      	ldr	r0, [pc, #44]	; (12774 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   12748:	4b0f      	ldr	r3, [pc, #60]	; (12788 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x198>)
   1274a:	4798      	blx	r3
			}
			eventTimer.start();
   1274c:	4809      	ldr	r0, [pc, #36]	; (12774 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   1274e:	4b0f      	ldr	r3, [pc, #60]	; (1278c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x19c>)
   12750:	4798      	blx	r3
			while (!eventTimeout);
   12752:	68fb      	ldr	r3, [r7, #12]
   12754:	781b      	ldrb	r3, [r3, #0]
   12756:	b2db      	uxtb	r3, r3
   12758:	f083 0301 	eor.w	r3, r3, #1
   1275c:	b2db      	uxtb	r3, r3
   1275e:	2b00      	cmp	r3, #0
   12760:	f43f af6c 	beq.w	1263c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
   12764:	e7f5      	b.n	12752 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x162>
		
		}
	}

	return result;
   12766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
   1276a:	4618      	mov	r0, r3
   1276c:	372c      	adds	r7, #44	; 0x2c
   1276e:	46bd      	mov	sp, r7
   12770:	bd90      	pop	{r4, r7, pc}
   12772:	bf00      	nop
   12774:	20005280 	.word	0x20005280
   12778:	00015259 	.word	0x00015259
   1277c:	20004d88 	.word	0x20004d88
   12780:	20004d84 	.word	0x20004d84
   12784:	00012559 	.word	0x00012559
   12788:	00015221 	.word	0x00015221
   1278c:	00015151 	.word	0x00015151

00012790 <_ZN18EventHandler_Class13SendEventSelfERK5event>:
{
	SendEventSelf(e);
}

void EventHandler_Class::SendEventSelf(const event& e)
{
   12790:	b580      	push	{r7, lr}
   12792:	b084      	sub	sp, #16
   12794:	af00      	add	r7, sp, #0
   12796:	6078      	str	r0, [r7, #4]
   12798:	6039      	str	r1, [r7, #0]
	usb << "send event:\r";
	usb << "     class:   " << (uint16)e.eventClass << newline;
	usb << "     type:    " << (uint16)e.eventType << newline;
	
	#endif
	event*	theEvent(eventQueue);
   1279a:	4b22      	ldr	r3, [pc, #136]	; (12824 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   1279c:	681b      	ldr	r3, [r3, #0]
   1279e:	60bb      	str	r3, [r7, #8]
	
	if (theEvent)
   127a0:	68bb      	ldr	r3, [r7, #8]
   127a2:	2b00      	cmp	r3, #0
   127a4:	d035      	beq.n	12812 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x82>
	{
		eventQueue = eventQueue->next;
   127a6:	4b1f      	ldr	r3, [pc, #124]	; (12824 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   127a8:	681b      	ldr	r3, [r3, #0]
   127aa:	68db      	ldr	r3, [r3, #12]
   127ac:	4a1d      	ldr	r2, [pc, #116]	; (12824 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   127ae:	6013      	str	r3, [r2, #0]
		theEvent->next = NULL;
   127b0:	68bb      	ldr	r3, [r7, #8]
   127b2:	2200      	movs	r2, #0
   127b4:	60da      	str	r2, [r3, #12]
		eventsInUse++;
   127b6:	687b      	ldr	r3, [r7, #4]
   127b8:	689b      	ldr	r3, [r3, #8]
   127ba:	1c5a      	adds	r2, r3, #1
   127bc:	687b      	ldr	r3, [r7, #4]
   127be:	609a      	str	r2, [r3, #8]

		event*	threadQueue((event*)mainThreadEventQueue);
   127c0:	4b19      	ldr	r3, [pc, #100]	; (12828 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>)
   127c2:	681b      	ldr	r3, [r3, #0]
   127c4:	60fb      	str	r3, [r7, #12]
		if (threadQueue == NULL)
   127c6:	68fb      	ldr	r3, [r7, #12]
   127c8:	2b00      	cmp	r3, #0
   127ca:	d103      	bne.n	127d4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
		mainThreadEventQueue = theEvent;
   127cc:	4a16      	ldr	r2, [pc, #88]	; (12828 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>)
   127ce:	68bb      	ldr	r3, [r7, #8]
   127d0:	6013      	str	r3, [r2, #0]
   127d2:	e00a      	b.n	127ea <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
		else
		{
			while (threadQueue->next)
   127d4:	68fb      	ldr	r3, [r7, #12]
   127d6:	68db      	ldr	r3, [r3, #12]
   127d8:	2b00      	cmp	r3, #0
   127da:	d003      	beq.n	127e4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x54>
			threadQueue = threadQueue->next;
   127dc:	68fb      	ldr	r3, [r7, #12]
   127de:	68db      	ldr	r3, [r3, #12]
   127e0:	60fb      	str	r3, [r7, #12]
			while (threadQueue->next)
   127e2:	e7f7      	b.n	127d4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
			threadQueue->next = theEvent;
   127e4:	68fb      	ldr	r3, [r7, #12]
   127e6:	68ba      	ldr	r2, [r7, #8]
   127e8:	60da      	str	r2, [r3, #12]
			usb << "eventsInUsePeak => " << eventsInUsePeak << newline;
			
		}
		#endif

		(*theEvent).eventClass = e.eventClass;
   127ea:	683b      	ldr	r3, [r7, #0]
   127ec:	881a      	ldrh	r2, [r3, #0]
   127ee:	68bb      	ldr	r3, [r7, #8]
   127f0:	801a      	strh	r2, [r3, #0]
		(*theEvent).eventType = e.eventType;
   127f2:	683b      	ldr	r3, [r7, #0]
   127f4:	885a      	ldrh	r2, [r3, #2]
   127f6:	68bb      	ldr	r3, [r7, #8]
   127f8:	805a      	strh	r2, [r3, #2]
		(*theEvent).data = e.data;
   127fa:	68bb      	ldr	r3, [r7, #8]
   127fc:	683a      	ldr	r2, [r7, #0]
   127fe:	6892      	ldr	r2, [r2, #8]
   12800:	609a      	str	r2, [r3, #8]
		(*theEvent).timestamp = eventTimer.Get_ticks();
   12802:	480a      	ldr	r0, [pc, #40]	; (1282c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x9c>)
   12804:	4b0a      	ldr	r3, [pc, #40]	; (12830 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa0>)
   12806:	4798      	blx	r3
   12808:	4603      	mov	r3, r0
   1280a:	461a      	mov	r2, r3
   1280c:	68bb      	ldr	r3, [r7, #8]
   1280e:	605a      	str	r2, [r3, #4]
		usb << "     type:    " << (uint16)e.eventType << newline;
		
		#endif
		eventQueueUnderflow++;
	}
}
   12810:	e004      	b.n	1281c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x8c>
		eventQueueUnderflow++;
   12812:	687b      	ldr	r3, [r7, #4]
   12814:	699b      	ldr	r3, [r3, #24]
   12816:	1c5a      	adds	r2, r3, #1
   12818:	687b      	ldr	r3, [r7, #4]
   1281a:	619a      	str	r2, [r3, #24]
}
   1281c:	bf00      	nop
   1281e:	3710      	adds	r7, #16
   12820:	46bd      	mov	sp, r7
   12822:	bd80      	pop	{r7, pc}
   12824:	20004d84 	.word	0x20004d84
   12828:	20004d88 	.word	0x20004d88
   1282c:	20005280 	.word	0x20005280
   12830:	00015259 	.word	0x00015259

00012834 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData>:
	
	SendEventSelf(theEvent);
}

void EventHandler_Class::SendErrorSelf(uint16_t et,const eventData& data)
{
   12834:	b580      	push	{r7, lr}
   12836:	b088      	sub	sp, #32
   12838:	af00      	add	r7, sp, #0
   1283a:	60f8      	str	r0, [r7, #12]
   1283c:	460b      	mov	r3, r1
   1283e:	607a      	str	r2, [r7, #4]
   12840:	817b      	strh	r3, [r7, #10]
	event		theEvent;
   12842:	f107 0310 	add.w	r3, r7, #16
   12846:	4618      	mov	r0, r3
   12848:	4b09      	ldr	r3, [pc, #36]	; (12870 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x3c>)
   1284a:	4798      	blx	r3
	theEvent.eventClass = kErrorEventClass;
   1284c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   12850:	823b      	strh	r3, [r7, #16]
	theEvent.eventType =(EventType)et ;
   12852:	897b      	ldrh	r3, [r7, #10]
   12854:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   12856:	687b      	ldr	r3, [r7, #4]
   12858:	681b      	ldr	r3, [r3, #0]
   1285a:	61bb      	str	r3, [r7, #24]
	SendEventSelf(theEvent);
   1285c:	f107 0310 	add.w	r3, r7, #16
   12860:	4619      	mov	r1, r3
   12862:	68f8      	ldr	r0, [r7, #12]
   12864:	4b03      	ldr	r3, [pc, #12]	; (12874 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x40>)
   12866:	4798      	blx	r3
}
   12868:	bf00      	nop
   1286a:	3720      	adds	r7, #32
   1286c:	46bd      	mov	sp, r7
   1286e:	bd80      	pop	{r7, pc}
   12870:	00002349 	.word	0x00002349
   12874:	00012791 	.word	0x00012791

00012878 <_ZN18EventHandler_Class10CheckEventEv>:
uint32_t EventHandler_Class::CheckEvent(void)
{
   12878:	b580      	push	{r7, lr}
   1287a:	b08a      	sub	sp, #40	; 0x28
   1287c:	af00      	add	r7, sp, #0
   1287e:	6078      	str	r0, [r7, #4]
	
	float	temperatureSMPST = 0.0;	//stores temp value for fan off function
   12880:	f04f 0300 	mov.w	r3, #0
   12884:	627b      	str	r3, [r7, #36]	; 0x24
	float 	temperatureExhaust = 0.0;
   12886:	f04f 0300 	mov.w	r3, #0
   1288a:	623b      	str	r3, [r7, #32]
	float	temperatureMagnetron = 0.0;
   1288c:	f04f 0300 	mov.w	r3, #0
   12890:	61fb      	str	r3, [r7, #28]

	
	#if __DEBUG__ > 4
	usb<< "checkEvent" << newline;
	#endif
	event	e;
   12892:	f107 030c 	add.w	r3, r7, #12
   12896:	4618      	mov	r0, r3
   12898:	4b03      	ldr	r3, [pc, #12]	; (128a8 <_ZN18EventHandler_Class10CheckEventEv+0x30>)
   1289a:	4798      	blx	r3
	//Alive beacon function: i2cAlive is reset by a successful coreI2Cread to true and checked here.
	//If coreI2Cread was unsuccessful I2C is reseted



	return	(uint32_t)eventsInUse;
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	689b      	ldr	r3, [r3, #8]
	
}
   128a0:	4618      	mov	r0, r3
   128a2:	3728      	adds	r7, #40	; 0x28
   128a4:	46bd      	mov	sp, r7
   128a6:	bd80      	pop	{r7, pc}
   128a8:	00002349 	.word	0x00002349

000128ac <_Z41__static_initialization_and_destruction_0ii>:


   128ac:	b5b0      	push	{r4, r5, r7, lr}
   128ae:	b082      	sub	sp, #8
   128b0:	af00      	add	r7, sp, #0
   128b2:	6078      	str	r0, [r7, #4]
   128b4:	6039      	str	r1, [r7, #0]
   128b6:	687b      	ldr	r3, [r7, #4]
   128b8:	2b01      	cmp	r3, #1
   128ba:	d117      	bne.n	128ec <_Z41__static_initialization_and_destruction_0ii+0x40>
   128bc:	683b      	ldr	r3, [r7, #0]
   128be:	f64f 72ff 	movw	r2, #65535	; 0xffff
   128c2:	4293      	cmp	r3, r2
   128c4:	d112      	bne.n	128ec <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
   128c6:	4b0b      	ldr	r3, [pc, #44]	; (128f4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   128c8:	24ff      	movs	r4, #255	; 0xff
   128ca:	461d      	mov	r5, r3
   128cc:	2c00      	cmp	r4, #0
   128ce:	db05      	blt.n	128dc <_Z41__static_initialization_and_destruction_0ii+0x30>
   128d0:	4628      	mov	r0, r5
   128d2:	4b09      	ldr	r3, [pc, #36]	; (128f8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   128d4:	4798      	blx	r3
   128d6:	3510      	adds	r5, #16
   128d8:	3c01      	subs	r4, #1
   128da:	e7f7      	b.n	128cc <_Z41__static_initialization_and_destruction_0ii+0x20>
   128dc:	4807      	ldr	r0, [pc, #28]	; (128fc <_Z41__static_initialization_and_destruction_0ii+0x50>)
   128de:	4b08      	ldr	r3, [pc, #32]	; (12900 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   128e0:	4798      	blx	r3
   128e2:	4a08      	ldr	r2, [pc, #32]	; (12904 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   128e4:	4908      	ldr	r1, [pc, #32]	; (12908 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   128e6:	4805      	ldr	r0, [pc, #20]	; (128fc <_Z41__static_initialization_and_destruction_0ii+0x50>)
   128e8:	4b08      	ldr	r3, [pc, #32]	; (1290c <_Z41__static_initialization_and_destruction_0ii+0x60>)
   128ea:	4798      	blx	r3
   128ec:	bf00      	nop
   128ee:	3708      	adds	r7, #8
   128f0:	46bd      	mov	sp, r7
   128f2:	bdb0      	pop	{r4, r5, r7, pc}
   128f4:	20003d84 	.word	0x20003d84
   128f8:	00002349 	.word	0x00002349
   128fc:	20004d9c 	.word	0x20004d9c
   12900:	00012579 	.word	0x00012579
   12904:	20000000 	.word	0x20000000
   12908:	00012599 	.word	0x00012599
   1290c:	000167bd 	.word	0x000167bd

00012910 <_GLOBAL__sub_I_maxEventCount>:
   12910:	b580      	push	{r7, lr}
   12912:	af00      	add	r7, sp, #0
   12914:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12918:	2001      	movs	r0, #1
   1291a:	4b01      	ldr	r3, [pc, #4]	; (12920 <_GLOBAL__sub_I_maxEventCount+0x10>)
   1291c:	4798      	blx	r3
   1291e:	bd80      	pop	{r7, pc}
   12920:	000128ad 	.word	0x000128ad

00012924 <_ZL13MCPHadChangedv>:



MCP23017_Class	*ptrMCP23017Class;

static void	MCPHadChanged(void){
   12924:	b480      	push	{r7}
   12926:	af00      	add	r7, sp, #0
	
			ptrMCP23017Class->hasChanged=true;
   12928:	4b03      	ldr	r3, [pc, #12]	; (12938 <_ZL13MCPHadChangedv+0x14>)
   1292a:	681b      	ldr	r3, [r3, #0]
   1292c:	2201      	movs	r2, #1
   1292e:	705a      	strb	r2, [r3, #1]

}
   12930:	bf00      	nop
   12932:	46bd      	mov	sp, r7
   12934:	bc80      	pop	{r7}
   12936:	4770      	bx	lr
   12938:	20004db8 	.word	0x20004db8

0001293c <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc>:

MCP23017_Class::MCP23017_Class()
{
	ptrMCP23017Class=this;
} //AT24MAC_Class
MCP23017_Class::MCP23017_Class(i2c_m_async_desc *i2c)
   1293c:	b580      	push	{r7, lr}
   1293e:	b082      	sub	sp, #8
   12940:	af00      	add	r7, sp, #0
   12942:	6078      	str	r0, [r7, #4]
   12944:	6039      	str	r1, [r7, #0]
   12946:	687b      	ldr	r3, [r7, #4]
   12948:	3304      	adds	r3, #4
   1294a:	4618      	mov	r0, r3
   1294c:	4b06      	ldr	r3, [pc, #24]	; (12968 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x2c>)
   1294e:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
   12950:	687b      	ldr	r3, [r7, #4]
   12952:	683a      	ldr	r2, [r7, #0]
   12954:	635a      	str	r2, [r3, #52]	; 0x34
	ptrMCP23017Class=this;
   12956:	4a05      	ldr	r2, [pc, #20]	; (1296c <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x30>)
   12958:	687b      	ldr	r3, [r7, #4]
   1295a:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
   1295c:	687b      	ldr	r3, [r7, #4]
   1295e:	4618      	mov	r0, r3
   12960:	3708      	adds	r7, #8
   12962:	46bd      	mov	sp, r7
   12964:	bd80      	pop	{r7, pc}
   12966:	bf00      	nop
   12968:	00016265 	.word	0x00016265
   1296c:	20004db8 	.word	0x20004db8

00012970 <_ZN14MCP23017_ClassD1Ev>:

// default destructor
MCP23017_Class::~MCP23017_Class()
   12970:	b580      	push	{r7, lr}
   12972:	b082      	sub	sp, #8
   12974:	af00      	add	r7, sp, #0
   12976:	6078      	str	r0, [r7, #4]
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	3304      	adds	r3, #4
   1297c:	4618      	mov	r0, r3
   1297e:	4b03      	ldr	r3, [pc, #12]	; (1298c <_ZN14MCP23017_ClassD1Ev+0x1c>)
   12980:	4798      	blx	r3
{
} //~AT24MAC_Class
   12982:	687b      	ldr	r3, [r7, #4]
   12984:	4618      	mov	r0, r3
   12986:	3708      	adds	r7, #8
   12988:	46bd      	mov	sp, r7
   1298a:	bd80      	pop	{r7, pc}
   1298c:	0001629d 	.word	0x0001629d

00012990 <_ZN14MCP23017_Class4InitEh>:

void MCP23017_Class::Init(uint8_t addr) {
   12990:	b580      	push	{r7, lr}
   12992:	b082      	sub	sp, #8
   12994:	af00      	add	r7, sp, #0
   12996:	6078      	str	r0, [r7, #4]
   12998:	460b      	mov	r3, r1
   1299a:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   1299c:	687b      	ldr	r3, [r7, #4]
   1299e:	78fa      	ldrb	r2, [r7, #3]
   129a0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	i2ca.Set_descriptor(ptrI2CDescr);
   129a4:	687b      	ldr	r3, [r7, #4]
   129a6:	1d1a      	adds	r2, r3, #4
   129a8:	687b      	ldr	r3, [r7, #4]
   129aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   129ac:	4619      	mov	r1, r3
   129ae:	4610      	mov	r0, r2
   129b0:	4b0c      	ldr	r3, [pc, #48]	; (129e4 <_ZN14MCP23017_Class4InitEh+0x54>)
   129b2:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
   129b4:	687b      	ldr	r3, [r7, #4]
   129b6:	3304      	adds	r3, #4
   129b8:	78fa      	ldrb	r2, [r7, #3]
   129ba:	4611      	mov	r1, r2
   129bc:	4618      	mov	r0, r3
   129be:	4b0a      	ldr	r3, [pc, #40]	; (129e8 <_ZN14MCP23017_Class4InitEh+0x58>)
   129c0:	4798      	blx	r3
   129c2:	4603      	mov	r3, r0
   129c4:	2b00      	cmp	r3, #0
   129c6:	bf0c      	ite	eq
   129c8:	2301      	moveq	r3, #1
   129ca:	2300      	movne	r3, #0
   129cc:	b2da      	uxtb	r2, r3
   129ce:	687b      	ldr	r3, [r7, #4]
   129d0:	701a      	strb	r2, [r3, #0]
	ext_irq_register(PIN_PA04,FUNC_PTR(MCPHadChanged));
   129d2:	4906      	ldr	r1, [pc, #24]	; (129ec <_ZN14MCP23017_Class4InitEh+0x5c>)
   129d4:	2004      	movs	r0, #4
   129d6:	4b06      	ldr	r3, [pc, #24]	; (129f0 <_ZN14MCP23017_Class4InitEh+0x60>)
   129d8:	4798      	blx	r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   129da:	bf00      	nop
   129dc:	3708      	adds	r7, #8
   129de:	46bd      	mov	sp, r7
   129e0:	bd80      	pop	{r7, pc}
   129e2:	bf00      	nop
   129e4:	000162bd 	.word	0x000162bd
   129e8:	00016395 	.word	0x00016395
   129ec:	00012925 	.word	0x00012925
   129f0:	00004eb1 	.word	0x00004eb1

000129f4 <_ZN14MCP23017_Class4InitEv>:
}

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
bool MCP23017_Class::Init(void) {
   129f4:	b580      	push	{r7, lr}
   129f6:	b082      	sub	sp, #8
   129f8:	af00      	add	r7, sp, #0
   129fa:	6078      	str	r0, [r7, #4]
    Init((uint8_t)MCP23017_ADDRESS);
   129fc:	2127      	movs	r1, #39	; 0x27
   129fe:	6878      	ldr	r0, [r7, #4]
   12a00:	4b04      	ldr	r3, [pc, #16]	; (12a14 <_ZN14MCP23017_Class4InitEv+0x20>)
   12a02:	4798      	blx	r3
	return	SelfTest();	
   12a04:	6878      	ldr	r0, [r7, #4]
   12a06:	4b04      	ldr	r3, [pc, #16]	; (12a18 <_ZN14MCP23017_Class4InitEv+0x24>)
   12a08:	4798      	blx	r3
   12a0a:	4603      	mov	r3, r0
}
   12a0c:	4618      	mov	r0, r3
   12a0e:	3708      	adds	r7, #8
   12a10:	46bd      	mov	sp, r7
   12a12:	bd80      	pop	{r7, pc}
   12a14:	00012991 	.word	0x00012991
   12a18:	00013085 	.word	0x00013085

00012a1c <_ZN14MCP23017_Class9bitForPinEh>:
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23017_Class::bitForPin(uint8_t pin){
   12a1c:	b480      	push	{r7}
   12a1e:	b083      	sub	sp, #12
   12a20:	af00      	add	r7, sp, #0
   12a22:	6078      	str	r0, [r7, #4]
   12a24:	460b      	mov	r3, r1
   12a26:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   12a28:	78fb      	ldrb	r3, [r7, #3]
   12a2a:	f003 0307 	and.w	r3, r3, #7
   12a2e:	b2db      	uxtb	r3, r3
}
   12a30:	4618      	mov	r0, r3
   12a32:	370c      	adds	r7, #12
   12a34:	46bd      	mov	sp, r7
   12a36:	bc80      	pop	{r7}
   12a38:	4770      	bx	lr

00012a3a <_ZN14MCP23017_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23017_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   12a3a:	b480      	push	{r7}
   12a3c:	b083      	sub	sp, #12
   12a3e:	af00      	add	r7, sp, #0
   12a40:	6078      	str	r0, [r7, #4]
   12a42:	4608      	mov	r0, r1
   12a44:	4611      	mov	r1, r2
   12a46:	461a      	mov	r2, r3
   12a48:	4603      	mov	r3, r0
   12a4a:	70fb      	strb	r3, [r7, #3]
   12a4c:	460b      	mov	r3, r1
   12a4e:	70bb      	strb	r3, [r7, #2]
   12a50:	4613      	mov	r3, r2
   12a52:	707b      	strb	r3, [r7, #1]
    return(pin<8) ?portAaddr:portBaddr;
   12a54:	78fb      	ldrb	r3, [r7, #3]
   12a56:	2b07      	cmp	r3, #7
   12a58:	dc01      	bgt.n	12a5e <_ZN14MCP23017_Class9regForPinEhhh+0x24>
   12a5a:	78bb      	ldrb	r3, [r7, #2]
   12a5c:	e000      	b.n	12a60 <_ZN14MCP23017_Class9regForPinEhhh+0x26>
   12a5e:	787b      	ldrb	r3, [r7, #1]
}
   12a60:	4618      	mov	r0, r3
   12a62:	370c      	adds	r7, #12
   12a64:	46bd      	mov	sp, r7
   12a66:	bc80      	pop	{r7}
   12a68:	4770      	bx	lr
	...

00012a6c <_ZN14MCP23017_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23017_Class::readRegister(uint8_t addr){
   12a6c:	b580      	push	{r7, lr}
   12a6e:	b082      	sub	sp, #8
   12a70:	af00      	add	r7, sp, #0
   12a72:	6078      	str	r0, [r7, #4]
   12a74:	460b      	mov	r3, r1
   12a76:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
   12a78:	687b      	ldr	r3, [r7, #4]
   12a7a:	3304      	adds	r3, #4
   12a7c:	1cf9      	adds	r1, r7, #3
   12a7e:	2201      	movs	r2, #1
   12a80:	4618      	mov	r0, r3
   12a82:	4b11      	ldr	r3, [pc, #68]	; (12ac8 <_ZN14MCP23017_Class12readRegisterEh+0x5c>)
   12a84:	4798      	blx	r3
	while(!i2ca.txReady);
   12a86:	687b      	ldr	r3, [r7, #4]
   12a88:	7d1b      	ldrb	r3, [r3, #20]
   12a8a:	b2db      	uxtb	r3, r3
   12a8c:	f083 0301 	eor.w	r3, r3, #1
   12a90:	b2db      	uxtb	r3, r3
   12a92:	2b00      	cmp	r3, #0
   12a94:	d000      	beq.n	12a98 <_ZN14MCP23017_Class12readRegisterEh+0x2c>
   12a96:	e7f6      	b.n	12a86 <_ZN14MCP23017_Class12readRegisterEh+0x1a>
	i2ca.Read(&registerValue,1);
   12a98:	687b      	ldr	r3, [r7, #4]
   12a9a:	1d18      	adds	r0, r3, #4
   12a9c:	687b      	ldr	r3, [r7, #4]
   12a9e:	333c      	adds	r3, #60	; 0x3c
   12aa0:	2201      	movs	r2, #1
   12aa2:	4619      	mov	r1, r3
   12aa4:	4b09      	ldr	r3, [pc, #36]	; (12acc <_ZN14MCP23017_Class12readRegisterEh+0x60>)
   12aa6:	4798      	blx	r3
	while(!i2ca.rxReady);
   12aa8:	687b      	ldr	r3, [r7, #4]
   12aaa:	7d5b      	ldrb	r3, [r3, #21]
   12aac:	b2db      	uxtb	r3, r3
   12aae:	f083 0301 	eor.w	r3, r3, #1
   12ab2:	b2db      	uxtb	r3, r3
   12ab4:	2b00      	cmp	r3, #0
   12ab6:	d000      	beq.n	12aba <_ZN14MCP23017_Class12readRegisterEh+0x4e>
   12ab8:	e7f6      	b.n	12aa8 <_ZN14MCP23017_Class12readRegisterEh+0x3c>
	return registerValue;
   12aba:	687b      	ldr	r3, [r7, #4]
   12abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
}
   12ac0:	4618      	mov	r0, r3
   12ac2:	3708      	adds	r7, #8
   12ac4:	46bd      	mov	sp, r7
   12ac6:	bd80      	pop	{r7, pc}
   12ac8:	000163dd 	.word	0x000163dd
   12acc:	00016421 	.word	0x00016421

00012ad0 <_ZN14MCP23017_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
void MCP23017_Class::writeRegister(uint8_t addr, uint8_t value){
   12ad0:	b580      	push	{r7, lr}
   12ad2:	b084      	sub	sp, #16
   12ad4:	af00      	add	r7, sp, #0
   12ad6:	6078      	str	r0, [r7, #4]
   12ad8:	460b      	mov	r3, r1
   12ada:	70fb      	strb	r3, [r7, #3]
   12adc:	4613      	mov	r3, r2
   12ade:	70bb      	strb	r3, [r7, #2]
	// Write the register
	isReady=false;
   12ae0:	687b      	ldr	r3, [r7, #4]
   12ae2:	2200      	movs	r2, #0
   12ae4:	701a      	strb	r2, [r3, #0]
	uint8_t array[2];
	array[0]=addr;
   12ae6:	78fb      	ldrb	r3, [r7, #3]
   12ae8:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   12aea:	78bb      	ldrb	r3, [r7, #2]
   12aec:	737b      	strb	r3, [r7, #13]
	i2ca.Write(array,2);
   12aee:	687b      	ldr	r3, [r7, #4]
   12af0:	3304      	adds	r3, #4
   12af2:	f107 010c 	add.w	r1, r7, #12
   12af6:	2202      	movs	r2, #2
   12af8:	4618      	mov	r0, r3
   12afa:	4b07      	ldr	r3, [pc, #28]	; (12b18 <_ZN14MCP23017_Class13writeRegisterEhh+0x48>)
   12afc:	4798      	blx	r3
	while(!i2ca.txReady);
   12afe:	687b      	ldr	r3, [r7, #4]
   12b00:	7d1b      	ldrb	r3, [r3, #20]
   12b02:	b2db      	uxtb	r3, r3
   12b04:	f083 0301 	eor.w	r3, r3, #1
   12b08:	b2db      	uxtb	r3, r3
   12b0a:	2b00      	cmp	r3, #0
   12b0c:	d000      	beq.n	12b10 <_ZN14MCP23017_Class13writeRegisterEhh+0x40>
   12b0e:	e7f6      	b.n	12afe <_ZN14MCP23017_Class13writeRegisterEhh+0x2e>
}
   12b10:	bf00      	nop
   12b12:	3710      	adds	r7, #16
   12b14:	46bd      	mov	sp, r7
   12b16:	bd80      	pop	{r7, pc}
   12b18:	000163dd 	.word	0x000163dd

00012b1c <_ZN14MCP23017_Class13SetPortAInputEv>:

void	MCP23017_Class::SetPortAInput(void){
   12b1c:	b580      	push	{r7, lr}
   12b1e:	b082      	sub	sp, #8
   12b20:	af00      	add	r7, sp, #0
   12b22:	6078      	str	r0, [r7, #4]
	for (i=0;i<8;i++)
   12b24:	687b      	ldr	r3, [r7, #4]
   12b26:	2200      	movs	r2, #0
   12b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   12b2c:	687b      	ldr	r3, [r7, #4]
   12b2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12b32:	2b07      	cmp	r3, #7
   12b34:	dc18      	bgt.n	12b68 <_ZN14MCP23017_Class13SetPortAInputEv+0x4c>
	{
		pinMode(i,INPUT);
   12b36:	687b      	ldr	r3, [r7, #4]
   12b38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12b3c:	2200      	movs	r2, #0
   12b3e:	4619      	mov	r1, r3
   12b40:	6878      	ldr	r0, [r7, #4]
   12b42:	4b0b      	ldr	r3, [pc, #44]	; (12b70 <_ZN14MCP23017_Class13SetPortAInputEv+0x54>)
   12b44:	4798      	blx	r3
		pullUp(i,HIGH);
   12b46:	687b      	ldr	r3, [r7, #4]
   12b48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12b4c:	2201      	movs	r2, #1
   12b4e:	4619      	mov	r1, r3
   12b50:	6878      	ldr	r0, [r7, #4]
   12b52:	4b08      	ldr	r3, [pc, #32]	; (12b74 <_ZN14MCP23017_Class13SetPortAInputEv+0x58>)
   12b54:	4798      	blx	r3
	for (i=0;i<8;i++)
   12b56:	687b      	ldr	r3, [r7, #4]
   12b58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12b5c:	3301      	adds	r3, #1
   12b5e:	b2da      	uxtb	r2, r3
   12b60:	687b      	ldr	r3, [r7, #4]
   12b62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   12b66:	e7e1      	b.n	12b2c <_ZN14MCP23017_Class13SetPortAInputEv+0x10>
	}
}
   12b68:	bf00      	nop
   12b6a:	3708      	adds	r7, #8
   12b6c:	46bd      	mov	sp, r7
   12b6e:	bd80      	pop	{r7, pc}
   12b70:	00012c5d 	.word	0x00012c5d
   12b74:	00012dc5 	.word	0x00012dc5

00012b78 <_ZN14MCP23017_Class14SetPortBOutputEv>:
void	MCP23017_Class::SetPortBOutput(void){
   12b78:	b580      	push	{r7, lr}
   12b7a:	b082      	sub	sp, #8
   12b7c:	af00      	add	r7, sp, #0
   12b7e:	6078      	str	r0, [r7, #4]
	for (i=8;i<16;i++)
   12b80:	687b      	ldr	r3, [r7, #4]
   12b82:	2208      	movs	r2, #8
   12b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   12b88:	687b      	ldr	r3, [r7, #4]
   12b8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12b8e:	2b0f      	cmp	r3, #15
   12b90:	dc10      	bgt.n	12bb4 <_ZN14MCP23017_Class14SetPortBOutputEv+0x3c>
	{
		pinMode(i,OUTPUT);
   12b92:	687b      	ldr	r3, [r7, #4]
   12b94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12b98:	2201      	movs	r2, #1
   12b9a:	4619      	mov	r1, r3
   12b9c:	6878      	ldr	r0, [r7, #4]
   12b9e:	4b07      	ldr	r3, [pc, #28]	; (12bbc <_ZN14MCP23017_Class14SetPortBOutputEv+0x44>)
   12ba0:	4798      	blx	r3
	for (i=8;i<16;i++)
   12ba2:	687b      	ldr	r3, [r7, #4]
   12ba4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12ba8:	3301      	adds	r3, #1
   12baa:	b2da      	uxtb	r2, r3
   12bac:	687b      	ldr	r3, [r7, #4]
   12bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   12bb2:	e7e9      	b.n	12b88 <_ZN14MCP23017_Class14SetPortBOutputEv+0x10>
	}
}
   12bb4:	bf00      	nop
   12bb6:	3708      	adds	r7, #8
   12bb8:	46bd      	mov	sp, r7
   12bba:	bd80      	pop	{r7, pc}
   12bbc:	00012c5d 	.word	0x00012c5d

00012bc0 <_ZN14MCP23017_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23017_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   12bc0:	b590      	push	{r4, r7, lr}
   12bc2:	b085      	sub	sp, #20
   12bc4:	af00      	add	r7, sp, #0
   12bc6:	6078      	str	r0, [r7, #4]
   12bc8:	4608      	mov	r0, r1
   12bca:	4611      	mov	r1, r2
   12bcc:	461a      	mov	r2, r3
   12bce:	4603      	mov	r3, r0
   12bd0:	70fb      	strb	r3, [r7, #3]
   12bd2:	460b      	mov	r3, r1
   12bd4:	70bb      	strb	r3, [r7, #2]
   12bd6:	4613      	mov	r3, r2
   12bd8:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
   12bda:	f897 3020 	ldrb.w	r3, [r7, #32]
   12bde:	787a      	ldrb	r2, [r7, #1]
   12be0:	78f9      	ldrb	r1, [r7, #3]
   12be2:	6878      	ldr	r0, [r7, #4]
   12be4:	4c19      	ldr	r4, [pc, #100]	; (12c4c <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x8c>)
   12be6:	47a0      	blx	r4
   12be8:	4603      	mov	r3, r0
   12bea:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   12bec:	78fb      	ldrb	r3, [r7, #3]
   12bee:	4619      	mov	r1, r3
   12bf0:	6878      	ldr	r0, [r7, #4]
   12bf2:	4b17      	ldr	r3, [pc, #92]	; (12c50 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x90>)
   12bf4:	4798      	blx	r3
   12bf6:	4603      	mov	r3, r0
   12bf8:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   12bfa:	7bfb      	ldrb	r3, [r7, #15]
   12bfc:	4619      	mov	r1, r3
   12bfe:	6878      	ldr	r0, [r7, #4]
   12c00:	4b14      	ldr	r3, [pc, #80]	; (12c54 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x94>)
   12c02:	4798      	blx	r3
   12c04:	4603      	mov	r3, r0
   12c06:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   12c08:	78bb      	ldrb	r3, [r7, #2]
   12c0a:	2b00      	cmp	r3, #0
   12c0c:	d009      	beq.n	12c22 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x62>
   12c0e:	7bba      	ldrb	r2, [r7, #14]
   12c10:	7b7b      	ldrb	r3, [r7, #13]
   12c12:	4619      	mov	r1, r3
   12c14:	2301      	movs	r3, #1
   12c16:	408b      	lsls	r3, r1
   12c18:	b2db      	uxtb	r3, r3
   12c1a:	4313      	orrs	r3, r2
   12c1c:	b2db      	uxtb	r3, r3
   12c1e:	73bb      	strb	r3, [r7, #14]
   12c20:	e00a      	b.n	12c38 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x78>
   12c22:	7bba      	ldrb	r2, [r7, #14]
   12c24:	7b7b      	ldrb	r3, [r7, #13]
   12c26:	4619      	mov	r1, r3
   12c28:	2301      	movs	r3, #1
   12c2a:	408b      	lsls	r3, r1
   12c2c:	b2db      	uxtb	r3, r3
   12c2e:	43db      	mvns	r3, r3
   12c30:	b2db      	uxtb	r3, r3
   12c32:	4013      	ands	r3, r2
   12c34:	b2db      	uxtb	r3, r3
   12c36:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   12c38:	7bba      	ldrb	r2, [r7, #14]
   12c3a:	7bfb      	ldrb	r3, [r7, #15]
   12c3c:	4619      	mov	r1, r3
   12c3e:	6878      	ldr	r0, [r7, #4]
   12c40:	4b05      	ldr	r3, [pc, #20]	; (12c58 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x98>)
   12c42:	4798      	blx	r3
}
   12c44:	bf00      	nop
   12c46:	3714      	adds	r7, #20
   12c48:	46bd      	mov	sp, r7
   12c4a:	bd90      	pop	{r4, r7, pc}
   12c4c:	00012a3b 	.word	0x00012a3b
   12c50:	00012a1d 	.word	0x00012a1d
   12c54:	00012a6d 	.word	0x00012a6d
   12c58:	00012ad1 	.word	0x00012ad1

00012c5c <_ZN14MCP23017_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23017_Class::pinMode(uint8_t p, uint8_t d) {
   12c5c:	b590      	push	{r4, r7, lr}
   12c5e:	b085      	sub	sp, #20
   12c60:	af02      	add	r7, sp, #8
   12c62:	6078      	str	r0, [r7, #4]
   12c64:	460b      	mov	r3, r1
   12c66:	70fb      	strb	r3, [r7, #3]
   12c68:	4613      	mov	r3, r2
   12c6a:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   12c6c:	78bb      	ldrb	r3, [r7, #2]
   12c6e:	2b00      	cmp	r3, #0
   12c70:	bf0c      	ite	eq
   12c72:	2301      	moveq	r3, #1
   12c74:	2300      	movne	r3, #0
   12c76:	b2db      	uxtb	r3, r3
   12c78:	461a      	mov	r2, r3
   12c7a:	78f9      	ldrb	r1, [r7, #3]
   12c7c:	2301      	movs	r3, #1
   12c7e:	9300      	str	r3, [sp, #0]
   12c80:	2300      	movs	r3, #0
   12c82:	6878      	ldr	r0, [r7, #4]
   12c84:	4c02      	ldr	r4, [pc, #8]	; (12c90 <_ZN14MCP23017_Class7pinModeEhh+0x34>)
   12c86:	47a0      	blx	r4
}
   12c88:	bf00      	nop
   12c8a:	370c      	adds	r7, #12
   12c8c:	46bd      	mov	sp, r7
   12c8e:	bd90      	pop	{r4, r7, pc}
   12c90:	00012bc1 	.word	0x00012bc1

00012c94 <_ZN14MCP23017_Class8readGPIOEh>:

/**
 * Read a single port, A or B, and return its current 8 bit value.
 * Parameter b should be 0 for GPIOA, and 1 for GPIOB.
 */
uint8_t MCP23017_Class::readGPIO(uint8_t b) {
   12c94:	b580      	push	{r7, lr}
   12c96:	b082      	sub	sp, #8
   12c98:	af00      	add	r7, sp, #0
   12c9a:	6078      	str	r0, [r7, #4]
   12c9c:	460b      	mov	r3, r1
   12c9e:	70fb      	strb	r3, [r7, #3]

	if (b == 0){
   12ca0:	78fb      	ldrb	r3, [r7, #3]
   12ca2:	2b00      	cmp	r3, #0
   12ca4:	d10c      	bne.n	12cc0 <_ZN14MCP23017_Class8readGPIOEh+0x2c>
		regAddress=MCP23017_GPIOA;
   12ca6:	687b      	ldr	r3, [r7, #4]
   12ca8:	2212      	movs	r2, #18
   12caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		i2ca.Write(&regAddress,1);
   12cae:	687b      	ldr	r3, [r7, #4]
   12cb0:	1d18      	adds	r0, r3, #4
   12cb2:	687b      	ldr	r3, [r7, #4]
   12cb4:	333d      	adds	r3, #61	; 0x3d
   12cb6:	2201      	movs	r2, #1
   12cb8:	4619      	mov	r1, r3
   12cba:	4b18      	ldr	r3, [pc, #96]	; (12d1c <_ZN14MCP23017_Class8readGPIOEh+0x88>)
   12cbc:	4798      	blx	r3
   12cbe:	e00b      	b.n	12cd8 <_ZN14MCP23017_Class8readGPIOEh+0x44>
	}else {
		regAddress=MCP23017_GPIOB;
   12cc0:	687b      	ldr	r3, [r7, #4]
   12cc2:	2213      	movs	r2, #19
   12cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		i2ca.Write(&regAddress,1);
   12cc8:	687b      	ldr	r3, [r7, #4]
   12cca:	1d18      	adds	r0, r3, #4
   12ccc:	687b      	ldr	r3, [r7, #4]
   12cce:	333d      	adds	r3, #61	; 0x3d
   12cd0:	2201      	movs	r2, #1
   12cd2:	4619      	mov	r1, r3
   12cd4:	4b11      	ldr	r3, [pc, #68]	; (12d1c <_ZN14MCP23017_Class8readGPIOEh+0x88>)
   12cd6:	4798      	blx	r3
	}


		while(!i2ca.txReady);
   12cd8:	687b      	ldr	r3, [r7, #4]
   12cda:	7d1b      	ldrb	r3, [r3, #20]
   12cdc:	b2db      	uxtb	r3, r3
   12cde:	f083 0301 	eor.w	r3, r3, #1
   12ce2:	b2db      	uxtb	r3, r3
   12ce4:	2b00      	cmp	r3, #0
   12ce6:	d000      	beq.n	12cea <_ZN14MCP23017_Class8readGPIOEh+0x56>
   12ce8:	e7f6      	b.n	12cd8 <_ZN14MCP23017_Class8readGPIOEh+0x44>
		i2ca.Read(&registerValue,1);
   12cea:	687b      	ldr	r3, [r7, #4]
   12cec:	1d18      	adds	r0, r3, #4
   12cee:	687b      	ldr	r3, [r7, #4]
   12cf0:	333c      	adds	r3, #60	; 0x3c
   12cf2:	2201      	movs	r2, #1
   12cf4:	4619      	mov	r1, r3
   12cf6:	4b0a      	ldr	r3, [pc, #40]	; (12d20 <_ZN14MCP23017_Class8readGPIOEh+0x8c>)
   12cf8:	4798      	blx	r3
		while(!i2ca.rxReady);
   12cfa:	687b      	ldr	r3, [r7, #4]
   12cfc:	7d5b      	ldrb	r3, [r3, #21]
   12cfe:	b2db      	uxtb	r3, r3
   12d00:	f083 0301 	eor.w	r3, r3, #1
   12d04:	b2db      	uxtb	r3, r3
   12d06:	2b00      	cmp	r3, #0
   12d08:	d000      	beq.n	12d0c <_ZN14MCP23017_Class8readGPIOEh+0x78>
   12d0a:	e7f6      	b.n	12cfa <_ZN14MCP23017_Class8readGPIOEh+0x66>
		return	registerValue;
   12d0c:	687b      	ldr	r3, [r7, #4]
   12d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
}
   12d12:	4618      	mov	r0, r3
   12d14:	3708      	adds	r7, #8
   12d16:	46bd      	mov	sp, r7
   12d18:	bd80      	pop	{r7, pc}
   12d1a:	bf00      	nop
   12d1c:	000163dd 	.word	0x000163dd
   12d20:	00016421 	.word	0x00016421

00012d24 <_ZN14MCP23017_Class12digitalWriteEhh>:
	array[2]=(uint8_t)(ba)&(0xff);
	i2ca.Write(array,3);
	//while(!i2ca.txReady);
}

void MCP23017_Class::digitalWrite(uint8_t pin, uint8_t d) {
   12d24:	b590      	push	{r4, r7, lr}
   12d26:	b085      	sub	sp, #20
   12d28:	af00      	add	r7, sp, #0
   12d2a:	6078      	str	r0, [r7, #4]
   12d2c:	460b      	mov	r3, r1
   12d2e:	70fb      	strb	r3, [r7, #3]
   12d30:	4613      	mov	r3, r2
   12d32:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   12d34:	78fb      	ldrb	r3, [r7, #3]
   12d36:	4619      	mov	r1, r3
   12d38:	6878      	ldr	r0, [r7, #4]
   12d3a:	4b1e      	ldr	r3, [pc, #120]	; (12db4 <_ZN14MCP23017_Class12digitalWriteEhh+0x90>)
   12d3c:	4798      	blx	r3
   12d3e:	4603      	mov	r3, r0
   12d40:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
   12d42:	78f9      	ldrb	r1, [r7, #3]
   12d44:	2315      	movs	r3, #21
   12d46:	2214      	movs	r2, #20
   12d48:	6878      	ldr	r0, [r7, #4]
   12d4a:	4c1b      	ldr	r4, [pc, #108]	; (12db8 <_ZN14MCP23017_Class12digitalWriteEhh+0x94>)
   12d4c:	47a0      	blx	r4
   12d4e:	4603      	mov	r3, r0
   12d50:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   12d52:	7bfb      	ldrb	r3, [r7, #15]
   12d54:	4619      	mov	r1, r3
   12d56:	6878      	ldr	r0, [r7, #4]
   12d58:	4b18      	ldr	r3, [pc, #96]	; (12dbc <_ZN14MCP23017_Class12digitalWriteEhh+0x98>)
   12d5a:	4798      	blx	r3
   12d5c:	4603      	mov	r3, r0
   12d5e:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,d);
   12d60:	78bb      	ldrb	r3, [r7, #2]
   12d62:	2b00      	cmp	r3, #0
   12d64:	d009      	beq.n	12d7a <_ZN14MCP23017_Class12digitalWriteEhh+0x56>
   12d66:	7bba      	ldrb	r2, [r7, #14]
   12d68:	7b7b      	ldrb	r3, [r7, #13]
   12d6a:	4619      	mov	r1, r3
   12d6c:	2301      	movs	r3, #1
   12d6e:	408b      	lsls	r3, r1
   12d70:	b2db      	uxtb	r3, r3
   12d72:	4313      	orrs	r3, r2
   12d74:	b2db      	uxtb	r3, r3
   12d76:	73bb      	strb	r3, [r7, #14]
   12d78:	e00a      	b.n	12d90 <_ZN14MCP23017_Class12digitalWriteEhh+0x6c>
   12d7a:	7bba      	ldrb	r2, [r7, #14]
   12d7c:	7b7b      	ldrb	r3, [r7, #13]
   12d7e:	4619      	mov	r1, r3
   12d80:	2301      	movs	r3, #1
   12d82:	408b      	lsls	r3, r1
   12d84:	b2db      	uxtb	r3, r3
   12d86:	43db      	mvns	r3, r3
   12d88:	b2db      	uxtb	r3, r3
   12d8a:	4013      	ands	r3, r2
   12d8c:	b2db      	uxtb	r3, r3
   12d8e:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
   12d90:	78f9      	ldrb	r1, [r7, #3]
   12d92:	2313      	movs	r3, #19
   12d94:	2212      	movs	r2, #18
   12d96:	6878      	ldr	r0, [r7, #4]
   12d98:	4c07      	ldr	r4, [pc, #28]	; (12db8 <_ZN14MCP23017_Class12digitalWriteEhh+0x94>)
   12d9a:	47a0      	blx	r4
   12d9c:	4603      	mov	r3, r0
   12d9e:	73fb      	strb	r3, [r7, #15]
	writeRegister(regAddr,gpio);
   12da0:	7bba      	ldrb	r2, [r7, #14]
   12da2:	7bfb      	ldrb	r3, [r7, #15]
   12da4:	4619      	mov	r1, r3
   12da6:	6878      	ldr	r0, [r7, #4]
   12da8:	4b05      	ldr	r3, [pc, #20]	; (12dc0 <_ZN14MCP23017_Class12digitalWriteEhh+0x9c>)
   12daa:	4798      	blx	r3
}
   12dac:	bf00      	nop
   12dae:	3714      	adds	r7, #20
   12db0:	46bd      	mov	sp, r7
   12db2:	bd90      	pop	{r4, r7, pc}
   12db4:	00012a1d 	.word	0x00012a1d
   12db8:	00012a3b 	.word	0x00012a3b
   12dbc:	00012a6d 	.word	0x00012a6d
   12dc0:	00012ad1 	.word	0x00012ad1

00012dc4 <_ZN14MCP23017_Class6pullUpEhh>:

void MCP23017_Class::pullUp(uint8_t p, uint8_t d) {
   12dc4:	b590      	push	{r4, r7, lr}
   12dc6:	b085      	sub	sp, #20
   12dc8:	af02      	add	r7, sp, #8
   12dca:	6078      	str	r0, [r7, #4]
   12dcc:	460b      	mov	r3, r1
   12dce:	70fb      	strb	r3, [r7, #3]
   12dd0:	4613      	mov	r3, r2
   12dd2:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   12dd4:	78ba      	ldrb	r2, [r7, #2]
   12dd6:	78f9      	ldrb	r1, [r7, #3]
   12dd8:	230d      	movs	r3, #13
   12dda:	9300      	str	r3, [sp, #0]
   12ddc:	230c      	movs	r3, #12
   12dde:	6878      	ldr	r0, [r7, #4]
   12de0:	4c02      	ldr	r4, [pc, #8]	; (12dec <_ZN14MCP23017_Class6pullUpEhh+0x28>)
   12de2:	47a0      	blx	r4
}
   12de4:	bf00      	nop
   12de6:	370c      	adds	r7, #12
   12de8:	46bd      	mov	sp, r7
   12dea:	bd90      	pop	{r4, r7, pc}
   12dec:	00012bc1 	.word	0x00012bc1

00012df0 <_ZN14MCP23017_Class11digitalReadEh>:

uint8_t MCP23017_Class::digitalRead(uint8_t pin) {
   12df0:	b590      	push	{r4, r7, lr}
   12df2:	b085      	sub	sp, #20
   12df4:	af00      	add	r7, sp, #0
   12df6:	6078      	str	r0, [r7, #4]
   12df8:	460b      	mov	r3, r1
   12dfa:	70fb      	strb	r3, [r7, #3]
	uint8_t bit=bitForPin(pin);
   12dfc:	78fb      	ldrb	r3, [r7, #3]
   12dfe:	4619      	mov	r1, r3
   12e00:	6878      	ldr	r0, [r7, #4]
   12e02:	4b0f      	ldr	r3, [pc, #60]	; (12e40 <_ZN14MCP23017_Class11digitalReadEh+0x50>)
   12e04:	4798      	blx	r3
   12e06:	4603      	mov	r3, r0
   12e08:	73fb      	strb	r3, [r7, #15]
	uint8_t regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
   12e0a:	78f9      	ldrb	r1, [r7, #3]
   12e0c:	2313      	movs	r3, #19
   12e0e:	2212      	movs	r2, #18
   12e10:	6878      	ldr	r0, [r7, #4]
   12e12:	4c0c      	ldr	r4, [pc, #48]	; (12e44 <_ZN14MCP23017_Class11digitalReadEh+0x54>)
   12e14:	47a0      	blx	r4
   12e16:	4603      	mov	r3, r0
   12e18:	73bb      	strb	r3, [r7, #14]
	return (readRegister(regAddr) >> bit) & 0x1;
   12e1a:	7bbb      	ldrb	r3, [r7, #14]
   12e1c:	4619      	mov	r1, r3
   12e1e:	6878      	ldr	r0, [r7, #4]
   12e20:	4b09      	ldr	r3, [pc, #36]	; (12e48 <_ZN14MCP23017_Class11digitalReadEh+0x58>)
   12e22:	4798      	blx	r3
   12e24:	4603      	mov	r3, r0
   12e26:	461a      	mov	r2, r3
   12e28:	7bfb      	ldrb	r3, [r7, #15]
   12e2a:	fa42 f303 	asr.w	r3, r2, r3
   12e2e:	b2db      	uxtb	r3, r3
   12e30:	f003 0301 	and.w	r3, r3, #1
   12e34:	b2db      	uxtb	r3, r3
}
   12e36:	4618      	mov	r0, r3
   12e38:	3714      	adds	r7, #20
   12e3a:	46bd      	mov	sp, r7
   12e3c:	bd90      	pop	{r4, r7, pc}
   12e3e:	bf00      	nop
   12e40:	00012a1d 	.word	0x00012a1d
   12e44:	00012a3b 	.word	0x00012a3b
   12e48:	00012a6d 	.word	0x00012a6d

00012e4c <_ZN14MCP23017_Class15setupInterruptsEhhh>:
 * polarity will set LOW or HIGH on interrupt.
 * Default values after Power On Reset are: (false, false, LOW)
 * If you are connecting the INTA/B pin to arduino 2/3, you should configure the interupt handling as FALLING with
 * the default configuration.
 */
void MCP23017_Class::setupInterrupts(uint8_t mirroring, uint8_t openDrain, uint8_t polarity){
   12e4c:	b580      	push	{r7, lr}
   12e4e:	b084      	sub	sp, #16
   12e50:	af00      	add	r7, sp, #0
   12e52:	6078      	str	r0, [r7, #4]
   12e54:	4608      	mov	r0, r1
   12e56:	4611      	mov	r1, r2
   12e58:	461a      	mov	r2, r3
   12e5a:	4603      	mov	r3, r0
   12e5c:	70fb      	strb	r3, [r7, #3]
   12e5e:	460b      	mov	r3, r1
   12e60:	70bb      	strb	r3, [r7, #2]
   12e62:	4613      	mov	r3, r2
   12e64:	707b      	strb	r3, [r7, #1]
	// configure the port A
	uint8_t ioconfValue=readRegister(MCP23017_IOCONA);
   12e66:	210a      	movs	r1, #10
   12e68:	6878      	ldr	r0, [r7, #4]
   12e6a:	4b37      	ldr	r3, [pc, #220]	; (12f48 <_ZN14MCP23017_Class15setupInterruptsEhhh+0xfc>)
   12e6c:	4798      	blx	r3
   12e6e:	4603      	mov	r3, r0
   12e70:	73fb      	strb	r3, [r7, #15]
	bitWrite(ioconfValue,6,mirroring);
   12e72:	78fb      	ldrb	r3, [r7, #3]
   12e74:	2b00      	cmp	r3, #0
   12e76:	d005      	beq.n	12e84 <_ZN14MCP23017_Class15setupInterruptsEhhh+0x38>
   12e78:	7bfb      	ldrb	r3, [r7, #15]
   12e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12e7e:	b2db      	uxtb	r3, r3
   12e80:	73fb      	strb	r3, [r7, #15]
   12e82:	e004      	b.n	12e8e <_ZN14MCP23017_Class15setupInterruptsEhhh+0x42>
   12e84:	7bfb      	ldrb	r3, [r7, #15]
   12e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   12e8a:	b2db      	uxtb	r3, r3
   12e8c:	73fb      	strb	r3, [r7, #15]
	bitWrite(ioconfValue,2,openDrain);
   12e8e:	78bb      	ldrb	r3, [r7, #2]
   12e90:	2b00      	cmp	r3, #0
   12e92:	d005      	beq.n	12ea0 <_ZN14MCP23017_Class15setupInterruptsEhhh+0x54>
   12e94:	7bfb      	ldrb	r3, [r7, #15]
   12e96:	f043 0304 	orr.w	r3, r3, #4
   12e9a:	b2db      	uxtb	r3, r3
   12e9c:	73fb      	strb	r3, [r7, #15]
   12e9e:	e004      	b.n	12eaa <_ZN14MCP23017_Class15setupInterruptsEhhh+0x5e>
   12ea0:	7bfb      	ldrb	r3, [r7, #15]
   12ea2:	f023 0304 	bic.w	r3, r3, #4
   12ea6:	b2db      	uxtb	r3, r3
   12ea8:	73fb      	strb	r3, [r7, #15]
	bitWrite(ioconfValue,1,polarity);
   12eaa:	787b      	ldrb	r3, [r7, #1]
   12eac:	2b00      	cmp	r3, #0
   12eae:	d005      	beq.n	12ebc <_ZN14MCP23017_Class15setupInterruptsEhhh+0x70>
   12eb0:	7bfb      	ldrb	r3, [r7, #15]
   12eb2:	f043 0302 	orr.w	r3, r3, #2
   12eb6:	b2db      	uxtb	r3, r3
   12eb8:	73fb      	strb	r3, [r7, #15]
   12eba:	e004      	b.n	12ec6 <_ZN14MCP23017_Class15setupInterruptsEhhh+0x7a>
   12ebc:	7bfb      	ldrb	r3, [r7, #15]
   12ebe:	f023 0302 	bic.w	r3, r3, #2
   12ec2:	b2db      	uxtb	r3, r3
   12ec4:	73fb      	strb	r3, [r7, #15]
	writeRegister(MCP23017_IOCONA,ioconfValue);
   12ec6:	7bfb      	ldrb	r3, [r7, #15]
   12ec8:	461a      	mov	r2, r3
   12eca:	210a      	movs	r1, #10
   12ecc:	6878      	ldr	r0, [r7, #4]
   12ece:	4b1f      	ldr	r3, [pc, #124]	; (12f4c <_ZN14MCP23017_Class15setupInterruptsEhhh+0x100>)
   12ed0:	4798      	blx	r3

	// Configure the port B
	ioconfValue=readRegister(MCP23017_IOCONB);
   12ed2:	210b      	movs	r1, #11
   12ed4:	6878      	ldr	r0, [r7, #4]
   12ed6:	4b1c      	ldr	r3, [pc, #112]	; (12f48 <_ZN14MCP23017_Class15setupInterruptsEhhh+0xfc>)
   12ed8:	4798      	blx	r3
   12eda:	4603      	mov	r3, r0
   12edc:	73fb      	strb	r3, [r7, #15]
	bitWrite(ioconfValue,6,mirroring);
   12ede:	78fb      	ldrb	r3, [r7, #3]
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d005      	beq.n	12ef0 <_ZN14MCP23017_Class15setupInterruptsEhhh+0xa4>
   12ee4:	7bfb      	ldrb	r3, [r7, #15]
   12ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12eea:	b2db      	uxtb	r3, r3
   12eec:	73fb      	strb	r3, [r7, #15]
   12eee:	e004      	b.n	12efa <_ZN14MCP23017_Class15setupInterruptsEhhh+0xae>
   12ef0:	7bfb      	ldrb	r3, [r7, #15]
   12ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   12ef6:	b2db      	uxtb	r3, r3
   12ef8:	73fb      	strb	r3, [r7, #15]
	bitWrite(ioconfValue,2,openDrain);
   12efa:	78bb      	ldrb	r3, [r7, #2]
   12efc:	2b00      	cmp	r3, #0
   12efe:	d005      	beq.n	12f0c <_ZN14MCP23017_Class15setupInterruptsEhhh+0xc0>
   12f00:	7bfb      	ldrb	r3, [r7, #15]
   12f02:	f043 0304 	orr.w	r3, r3, #4
   12f06:	b2db      	uxtb	r3, r3
   12f08:	73fb      	strb	r3, [r7, #15]
   12f0a:	e004      	b.n	12f16 <_ZN14MCP23017_Class15setupInterruptsEhhh+0xca>
   12f0c:	7bfb      	ldrb	r3, [r7, #15]
   12f0e:	f023 0304 	bic.w	r3, r3, #4
   12f12:	b2db      	uxtb	r3, r3
   12f14:	73fb      	strb	r3, [r7, #15]
	bitWrite(ioconfValue,1,polarity);
   12f16:	787b      	ldrb	r3, [r7, #1]
   12f18:	2b00      	cmp	r3, #0
   12f1a:	d005      	beq.n	12f28 <_ZN14MCP23017_Class15setupInterruptsEhhh+0xdc>
   12f1c:	7bfb      	ldrb	r3, [r7, #15]
   12f1e:	f043 0302 	orr.w	r3, r3, #2
   12f22:	b2db      	uxtb	r3, r3
   12f24:	73fb      	strb	r3, [r7, #15]
   12f26:	e004      	b.n	12f32 <_ZN14MCP23017_Class15setupInterruptsEhhh+0xe6>
   12f28:	7bfb      	ldrb	r3, [r7, #15]
   12f2a:	f023 0302 	bic.w	r3, r3, #2
   12f2e:	b2db      	uxtb	r3, r3
   12f30:	73fb      	strb	r3, [r7, #15]
	writeRegister(MCP23017_IOCONB,ioconfValue);
   12f32:	7bfb      	ldrb	r3, [r7, #15]
   12f34:	461a      	mov	r2, r3
   12f36:	210b      	movs	r1, #11
   12f38:	6878      	ldr	r0, [r7, #4]
   12f3a:	4b04      	ldr	r3, [pc, #16]	; (12f4c <_ZN14MCP23017_Class15setupInterruptsEhhh+0x100>)
   12f3c:	4798      	blx	r3
}
   12f3e:	bf00      	nop
   12f40:	3710      	adds	r7, #16
   12f42:	46bd      	mov	sp, r7
   12f44:	bd80      	pop	{r7, pc}
   12f46:	bf00      	nop
   12f48:	00012a6d 	.word	0x00012a6d
   12f4c:	00012ad1 	.word	0x00012ad1

00012f50 <_ZN14MCP23017_Class17setupInterruptPinEhh>:
 *
 * Note that the interrupt condition finishes when you read the information about the port / value
 * that caused the interrupt or you read the port itself. Check the datasheet can be confusing.
 *
 */
void MCP23017_Class::setupInterruptPin(uint8_t pin, uint8_t mode) {
   12f50:	b590      	push	{r4, r7, lr}
   12f52:	b085      	sub	sp, #20
   12f54:	af02      	add	r7, sp, #8
   12f56:	6078      	str	r0, [r7, #4]
   12f58:	460b      	mov	r3, r1
   12f5a:	70fb      	strb	r3, [r7, #3]
   12f5c:	4613      	mov	r3, r2
   12f5e:	70bb      	strb	r3, [r7, #2]

	// set the pin interrupt control (0 means change, 1 means compare against given value);
	updateRegisterBit(pin,(mode!=CHANGE),MCP23017_INTCONA,MCP23017_INTCONB);
   12f60:	78bb      	ldrb	r3, [r7, #2]
   12f62:	2b02      	cmp	r3, #2
   12f64:	bf14      	ite	ne
   12f66:	2301      	movne	r3, #1
   12f68:	2300      	moveq	r3, #0
   12f6a:	b2db      	uxtb	r3, r3
   12f6c:	461a      	mov	r2, r3
   12f6e:	78f9      	ldrb	r1, [r7, #3]
   12f70:	2309      	movs	r3, #9
   12f72:	9300      	str	r3, [sp, #0]
   12f74:	2308      	movs	r3, #8
   12f76:	6878      	ldr	r0, [r7, #4]
   12f78:	4c0d      	ldr	r4, [pc, #52]	; (12fb0 <_ZN14MCP23017_Class17setupInterruptPinEhh+0x60>)
   12f7a:	47a0      	blx	r4
	// if the mode is not CHANGE, we need to set up a default value, different value triggers interrupt

	// In a RISING interrupt the default value is 0, interrupt is triggered when the pin goes to 1.
	// In a FALLING interrupt the default value is 1, interrupt is triggered when pin goes to 0.
	updateRegisterBit(pin,(mode==FALLING),MCP23017_DEFVALA,MCP23017_DEFVALB);
   12f7c:	78bb      	ldrb	r3, [r7, #2]
   12f7e:	2b03      	cmp	r3, #3
   12f80:	bf0c      	ite	eq
   12f82:	2301      	moveq	r3, #1
   12f84:	2300      	movne	r3, #0
   12f86:	b2db      	uxtb	r3, r3
   12f88:	461a      	mov	r2, r3
   12f8a:	78f9      	ldrb	r1, [r7, #3]
   12f8c:	2307      	movs	r3, #7
   12f8e:	9300      	str	r3, [sp, #0]
   12f90:	2306      	movs	r3, #6
   12f92:	6878      	ldr	r0, [r7, #4]
   12f94:	4c06      	ldr	r4, [pc, #24]	; (12fb0 <_ZN14MCP23017_Class17setupInterruptPinEhh+0x60>)
   12f96:	47a0      	blx	r4

	// enable the pin for interrupt
	updateRegisterBit(pin,HIGH,MCP23017_GPINTENA,MCP23017_GPINTENB);
   12f98:	78f9      	ldrb	r1, [r7, #3]
   12f9a:	2305      	movs	r3, #5
   12f9c:	9300      	str	r3, [sp, #0]
   12f9e:	2304      	movs	r3, #4
   12fa0:	2201      	movs	r2, #1
   12fa2:	6878      	ldr	r0, [r7, #4]
   12fa4:	4c02      	ldr	r4, [pc, #8]	; (12fb0 <_ZN14MCP23017_Class17setupInterruptPinEhh+0x60>)
   12fa6:	47a0      	blx	r4

}
   12fa8:	bf00      	nop
   12faa:	370c      	adds	r7, #12
   12fac:	46bd      	mov	sp, r7
   12fae:	bd90      	pop	{r4, r7, pc}
   12fb0:	00012bc1 	.word	0x00012bc1

00012fb4 <_ZN14MCP23017_Class25SetChangeInterruptAllPinsEv>:

void MCP23017_Class::SetChangeInterruptAllPins(){
   12fb4:	b590      	push	{r4, r7, lr}
   12fb6:	b083      	sub	sp, #12
   12fb8:	af00      	add	r7, sp, #0
   12fba:	6078      	str	r0, [r7, #4]
	setupInterrupts(false,false,HIGH);
   12fbc:	2301      	movs	r3, #1
   12fbe:	2200      	movs	r2, #0
   12fc0:	2100      	movs	r1, #0
   12fc2:	6878      	ldr	r0, [r7, #4]
   12fc4:	4c0f      	ldr	r4, [pc, #60]	; (13004 <_ZN14MCP23017_Class25SetChangeInterruptAllPinsEv+0x50>)
   12fc6:	47a0      	blx	r4
	for (i = 0; i <MCP23017_NUMBER_PINS ; i++)
   12fc8:	687b      	ldr	r3, [r7, #4]
   12fca:	2200      	movs	r2, #0
   12fcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   12fd0:	687b      	ldr	r3, [r7, #4]
   12fd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12fd6:	2b0f      	cmp	r3, #15
   12fd8:	dc10      	bgt.n	12ffc <_ZN14MCP23017_Class25SetChangeInterruptAllPinsEv+0x48>
	{
		setupInterruptPin(i,CHANGE);
   12fda:	687b      	ldr	r3, [r7, #4]
   12fdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12fe0:	2202      	movs	r2, #2
   12fe2:	4619      	mov	r1, r3
   12fe4:	6878      	ldr	r0, [r7, #4]
   12fe6:	4b08      	ldr	r3, [pc, #32]	; (13008 <_ZN14MCP23017_Class25SetChangeInterruptAllPinsEv+0x54>)
   12fe8:	4798      	blx	r3
	for (i = 0; i <MCP23017_NUMBER_PINS ; i++)
   12fea:	687b      	ldr	r3, [r7, #4]
   12fec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12ff0:	3301      	adds	r3, #1
   12ff2:	b2da      	uxtb	r2, r3
   12ff4:	687b      	ldr	r3, [r7, #4]
   12ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   12ffa:	e7e9      	b.n	12fd0 <_ZN14MCP23017_Class25SetChangeInterruptAllPinsEv+0x1c>
	}
}
   12ffc:	bf00      	nop
   12ffe:	370c      	adds	r7, #12
   13000:	46bd      	mov	sp, r7
   13002:	bd90      	pop	{r4, r7, pc}
   13004:	00012e4d 	.word	0x00012e4d
   13008:	00012f51 	.word	0x00012f51

0001300c <_ZN14MCP23017_Class9SavePortsEv>:
	for(int i=0;i<8;i++) if (bitRead(intf,i)) return i+8;

	return MCP23017_INT_ERR;

}
uint8_t	MCP23017_Class::SavePorts(void){
   1300c:	b580      	push	{r7, lr}
   1300e:	b082      	sub	sp, #8
   13010:	af00      	add	r7, sp, #0
   13012:	6078      	str	r0, [r7, #4]
	portA=readGPIO(0);
   13014:	2100      	movs	r1, #0
   13016:	6878      	ldr	r0, [r7, #4]
   13018:	4b0f      	ldr	r3, [pc, #60]	; (13058 <_ZN14MCP23017_Class9SavePortsEv+0x4c>)
   1301a:	4798      	blx	r3
   1301c:	4603      	mov	r3, r0
   1301e:	461a      	mov	r2, r3
   13020:	687b      	ldr	r3, [r7, #4]
   13022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	portB=readGPIO(1);
   13026:	2101      	movs	r1, #1
   13028:	6878      	ldr	r0, [r7, #4]
   1302a:	4b0b      	ldr	r3, [pc, #44]	; (13058 <_ZN14MCP23017_Class9SavePortsEv+0x4c>)
   1302c:	4798      	blx	r3
   1302e:	4603      	mov	r3, r0
   13030:	461a      	mov	r2, r3
   13032:	687b      	ldr	r3, [r7, #4]
   13034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	if (hasChanged)
   13038:	687b      	ldr	r3, [r7, #4]
   1303a:	785b      	ldrb	r3, [r3, #1]
   1303c:	b2db      	uxtb	r3, r3
   1303e:	2b00      	cmp	r3, #0
   13040:	d002      	beq.n	13048 <_ZN14MCP23017_Class9SavePortsEv+0x3c>
	{
		ClearIntRegisters();
   13042:	6878      	ldr	r0, [r7, #4]
   13044:	4b05      	ldr	r3, [pc, #20]	; (1305c <_ZN14MCP23017_Class9SavePortsEv+0x50>)
   13046:	4798      	blx	r3
	}
	return portA;
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
}
   1304e:	4618      	mov	r0, r3
   13050:	3708      	adds	r7, #8
   13052:	46bd      	mov	sp, r7
   13054:	bd80      	pop	{r7, pc}
   13056:	bf00      	nop
   13058:	00012c95 	.word	0x00012c95
   1305c:	00013061 	.word	0x00013061

00013060 <_ZN14MCP23017_Class17ClearIntRegistersEv>:
void MCP23017_Class::ClearIntRegisters(){
   13060:	b580      	push	{r7, lr}
   13062:	b082      	sub	sp, #8
   13064:	af00      	add	r7, sp, #0
   13066:	6078      	str	r0, [r7, #4]
		readRegister(MCP23017_INTCAPA);
   13068:	2110      	movs	r1, #16
   1306a:	6878      	ldr	r0, [r7, #4]
   1306c:	4b04      	ldr	r3, [pc, #16]	; (13080 <_ZN14MCP23017_Class17ClearIntRegistersEv+0x20>)
   1306e:	4798      	blx	r3
	readRegister(MCP23017_INTCAPB);
   13070:	2111      	movs	r1, #17
   13072:	6878      	ldr	r0, [r7, #4]
   13074:	4b02      	ldr	r3, [pc, #8]	; (13080 <_ZN14MCP23017_Class17ClearIntRegistersEv+0x20>)
   13076:	4798      	blx	r3
}
   13078:	bf00      	nop
   1307a:	3708      	adds	r7, #8
   1307c:	46bd      	mov	sp, r7
   1307e:	bd80      	pop	{r7, pc}
   13080:	00012a6d 	.word	0x00012a6d

00013084 <_ZN14MCP23017_Class8SelfTestEv>:
		return (readRegister(intcapreg)>>bit) & (0x01);
	}

	return MCP23017_INT_ERR;
}
bool	MCP23017_Class::SelfTest(void){
   13084:	b590      	push	{r4, r7, lr}
   13086:	b085      	sub	sp, #20
   13088:	af00      	add	r7, sp, #0
   1308a:	6078      	str	r0, [r7, #4]
	SetPortAInput();
   1308c:	6878      	ldr	r0, [r7, #4]
   1308e:	4b2f      	ldr	r3, [pc, #188]	; (1314c <_ZN14MCP23017_Class8SelfTestEv+0xc8>)
   13090:	4798      	blx	r3
	controlRegisterA=readRegister(MCP23017_GPIOA);
   13092:	2112      	movs	r1, #18
   13094:	6878      	ldr	r0, [r7, #4]
   13096:	4b2e      	ldr	r3, [pc, #184]	; (13150 <_ZN14MCP23017_Class8SelfTestEv+0xcc>)
   13098:	4798      	blx	r3
   1309a:	4603      	mov	r3, r0
   1309c:	461a      	mov	r2, r3
   1309e:	687b      	ldr	r3, [r7, #4]
   130a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	SetPortBOutput();
   130a4:	6878      	ldr	r0, [r7, #4]
   130a6:	4b2b      	ldr	r3, [pc, #172]	; (13154 <_ZN14MCP23017_Class8SelfTestEv+0xd0>)
   130a8:	4798      	blx	r3
	SetChangeInterruptAllPins();
   130aa:	6878      	ldr	r0, [r7, #4]
   130ac:	4b2a      	ldr	r3, [pc, #168]	; (13158 <_ZN14MCP23017_Class8SelfTestEv+0xd4>)
   130ae:	4798      	blx	r3
	ClearIntRegisters();
   130b0:	6878      	ldr	r0, [r7, #4]
   130b2:	4b2a      	ldr	r3, [pc, #168]	; (1315c <_ZN14MCP23017_Class8SelfTestEv+0xd8>)
   130b4:	4798      	blx	r3
	hasChanged=false;
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	2200      	movs	r2, #0
   130ba:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 8; i++)
   130bc:	2300      	movs	r3, #0
   130be:	60fb      	str	r3, [r7, #12]
   130c0:	68fb      	ldr	r3, [r7, #12]
   130c2:	2b07      	cmp	r3, #7
   130c4:	dc13      	bgt.n	130ee <_ZN14MCP23017_Class8SelfTestEv+0x6a>
	{
		mcp.digitalWrite(8+i,mcp.digitalRead(i));
   130c6:	68fb      	ldr	r3, [r7, #12]
   130c8:	b2db      	uxtb	r3, r3
   130ca:	3308      	adds	r3, #8
   130cc:	b2dc      	uxtb	r4, r3
   130ce:	68fb      	ldr	r3, [r7, #12]
   130d0:	b2db      	uxtb	r3, r3
   130d2:	4619      	mov	r1, r3
   130d4:	4822      	ldr	r0, [pc, #136]	; (13160 <_ZN14MCP23017_Class8SelfTestEv+0xdc>)
   130d6:	4b23      	ldr	r3, [pc, #140]	; (13164 <_ZN14MCP23017_Class8SelfTestEv+0xe0>)
   130d8:	4798      	blx	r3
   130da:	4603      	mov	r3, r0
   130dc:	461a      	mov	r2, r3
   130de:	4621      	mov	r1, r4
   130e0:	481f      	ldr	r0, [pc, #124]	; (13160 <_ZN14MCP23017_Class8SelfTestEv+0xdc>)
   130e2:	4b21      	ldr	r3, [pc, #132]	; (13168 <_ZN14MCP23017_Class8SelfTestEv+0xe4>)
   130e4:	4798      	blx	r3
	for (int i = 0; i < 8; i++)
   130e6:	68fb      	ldr	r3, [r7, #12]
   130e8:	3301      	adds	r3, #1
   130ea:	60fb      	str	r3, [r7, #12]
   130ec:	e7e8      	b.n	130c0 <_ZN14MCP23017_Class8SelfTestEv+0x3c>
	}
		
	controlRegisterB=readRegister(MCP23017_GPIOB);
   130ee:	2113      	movs	r1, #19
   130f0:	6878      	ldr	r0, [r7, #4]
   130f2:	4b17      	ldr	r3, [pc, #92]	; (13150 <_ZN14MCP23017_Class8SelfTestEv+0xcc>)
   130f4:	4798      	blx	r3
   130f6:	4603      	mov	r3, r0
   130f8:	461a      	mov	r2, r3
   130fa:	687b      	ldr	r3, [r7, #4]
   130fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	ClearIntRegisters();
   13100:	6878      	ldr	r0, [r7, #4]
   13102:	4b16      	ldr	r3, [pc, #88]	; (1315c <_ZN14MCP23017_Class8SelfTestEv+0xd8>)
   13104:	4798      	blx	r3
	if (controlRegisterA==controlRegisterB)
   13106:	687b      	ldr	r3, [r7, #4]
   13108:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   13112:	429a      	cmp	r2, r3
   13114:	d10e      	bne.n	13134 <_ZN14MCP23017_Class8SelfTestEv+0xb0>
	{
		if (hasChanged==true)
   13116:	687b      	ldr	r3, [r7, #4]
   13118:	785b      	ldrb	r3, [r3, #1]
   1311a:	b2db      	uxtb	r3, r3
   1311c:	2b00      	cmp	r3, #0
   1311e:	d004      	beq.n	1312a <_ZN14MCP23017_Class8SelfTestEv+0xa6>
		{
			isOK=true;
   13120:	687b      	ldr	r3, [r7, #4]
   13122:	2201      	movs	r2, #1
   13124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
   13128:	e008      	b.n	1313c <_ZN14MCP23017_Class8SelfTestEv+0xb8>
		} 
		else
		{
			isOK=false;
   1312a:	687b      	ldr	r3, [r7, #4]
   1312c:	2200      	movs	r2, #0
   1312e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
   13132:	e003      	b.n	1313c <_ZN14MCP23017_Class8SelfTestEv+0xb8>
		}
		
	} 
	else
	{
		isOK=false;
   13134:	687b      	ldr	r3, [r7, #4]
   13136:	2200      	movs	r2, #0
   13138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}
	return isOK;
   1313c:	687b      	ldr	r3, [r7, #4]
   1313e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
}
   13142:	4618      	mov	r0, r3
   13144:	3714      	adds	r7, #20
   13146:	46bd      	mov	sp, r7
   13148:	bd90      	pop	{r4, r7, pc}
   1314a:	bf00      	nop
   1314c:	00012b1d 	.word	0x00012b1d
   13150:	00012a6d 	.word	0x00012a6d
   13154:	00012b79 	.word	0x00012b79
   13158:	00012fb5 	.word	0x00012fb5
   1315c:	00013061 	.word	0x00013061
   13160:	20004dbc 	.word	0x20004dbc
   13164:	00012df1 	.word	0x00012df1
   13168:	00012d25 	.word	0x00012d25

0001316c <_Z41__static_initialization_and_destruction_0ii>:
   1316c:	b580      	push	{r7, lr}
   1316e:	b082      	sub	sp, #8
   13170:	af00      	add	r7, sp, #0
   13172:	6078      	str	r0, [r7, #4]
   13174:	6039      	str	r1, [r7, #0]
   13176:	687b      	ldr	r3, [r7, #4]
   13178:	2b01      	cmp	r3, #1
   1317a:	d10d      	bne.n	13198 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1317c:	683b      	ldr	r3, [r7, #0]
   1317e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13182:	4293      	cmp	r3, r2
   13184:	d108      	bne.n	13198 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13186:	4906      	ldr	r1, [pc, #24]	; (131a0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13188:	4806      	ldr	r0, [pc, #24]	; (131a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1318a:	4b07      	ldr	r3, [pc, #28]	; (131a8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1318c:	4798      	blx	r3
   1318e:	4a07      	ldr	r2, [pc, #28]	; (131ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13190:	4907      	ldr	r1, [pc, #28]	; (131b0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13192:	4804      	ldr	r0, [pc, #16]	; (131a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13194:	4b07      	ldr	r3, [pc, #28]	; (131b4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   13196:	4798      	blx	r3
   13198:	bf00      	nop
   1319a:	3708      	adds	r7, #8
   1319c:	46bd      	mov	sp, r7
   1319e:	bd80      	pop	{r7, pc}
   131a0:	20005720 	.word	0x20005720
   131a4:	20004dbc 	.word	0x20004dbc
   131a8:	0001293d 	.word	0x0001293d
   131ac:	20000000 	.word	0x20000000
   131b0:	00012971 	.word	0x00012971
   131b4:	000167bd 	.word	0x000167bd

000131b8 <_GLOBAL__sub_I_ptrMCP23017Class>:
   131b8:	b580      	push	{r7, lr}
   131ba:	af00      	add	r7, sp, #0
   131bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   131c0:	2001      	movs	r0, #1
   131c2:	4b01      	ldr	r3, [pc, #4]	; (131c8 <_GLOBAL__sub_I_ptrMCP23017Class+0x10>)
   131c4:	4798      	blx	r3
   131c6:	bd80      	pop	{r7, pc}
   131c8:	0001316d 	.word	0x0001316d

000131cc <_ZN13LTC2983_ClassD1Ev>:
LTC2983_Class::LTC2983_Class()
{
} //LTC2983_Class

// default destructor
LTC2983_Class::~LTC2983_Class()
   131cc:	b580      	push	{r7, lr}
   131ce:	b082      	sub	sp, #8
   131d0:	af00      	add	r7, sp, #0
   131d2:	6078      	str	r0, [r7, #4]
   131d4:	687b      	ldr	r3, [r7, #4]
   131d6:	4618      	mov	r0, r3
   131d8:	4b03      	ldr	r3, [pc, #12]	; (131e8 <_ZN13LTC2983_ClassD1Ev+0x1c>)
   131da:	4798      	blx	r3
{
} //~LTC2983_Class
   131dc:	687b      	ldr	r3, [r7, #4]
   131de:	4618      	mov	r0, r3
   131e0:	3708      	adds	r7, #8
   131e2:	46bd      	mov	sp, r7
   131e4:	bd80      	pop	{r7, pc}
   131e6:	bf00      	nop
   131e8:	00013485 	.word	0x00013485

000131ec <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor>:

LTC2983_Class::LTC2983_Class(spi_m_async_descriptor *SPI_LTC){
   131ec:	b580      	push	{r7, lr}
   131ee:	b082      	sub	sp, #8
   131f0:	af00      	add	r7, sp, #0
   131f2:	6078      	str	r0, [r7, #4]
   131f4:	6039      	str	r1, [r7, #0]
   131f6:	687b      	ldr	r3, [r7, #4]
   131f8:	4618      	mov	r0, r3
   131fa:	4b06      	ldr	r3, [pc, #24]	; (13214 <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor+0x28>)
   131fc:	4798      	blx	r3
	ptrLTCClass=this;
   131fe:	4a06      	ldr	r2, [pc, #24]	; (13218 <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor+0x2c>)
   13200:	687b      	ldr	r3, [r7, #4]
   13202:	6013      	str	r3, [r2, #0]
	SPIA=SPI_LTC;
   13204:	687b      	ldr	r3, [r7, #4]
   13206:	683a      	ldr	r2, [r7, #0]
   13208:	615a      	str	r2, [r3, #20]
	};
   1320a:	687b      	ldr	r3, [r7, #4]
   1320c:	4618      	mov	r0, r3
   1320e:	3708      	adds	r7, #8
   13210:	46bd      	mov	sp, r7
   13212:	bd80      	pop	{r7, pc}
   13214:	00013465 	.word	0x00013465
   13218:	20004e00 	.word	0x20004e00

0001321c <_ZN13LTC2983_Class16SaveChannelValueEh>:

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}
uint32_t	LTC2983_Class::SaveChannelValue(uint8_t ch){
   1321c:	b590      	push	{r4, r7, lr}
   1321e:	b085      	sub	sp, #20
   13220:	af02      	add	r7, sp, #8
   13222:	6078      	str	r0, [r7, #4]
   13224:	460b      	mov	r3, r1
   13226:	70fb      	strb	r3, [r7, #3]
		start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, ch);
   13228:	78fb      	ldrb	r3, [r7, #3]
   1322a:	461a      	mov	r2, r3
   1322c:	2110      	movs	r1, #16
   1322e:	6878      	ldr	r0, [r7, #4]
   13230:	4b11      	ldr	r3, [pc, #68]	; (13278 <_ZN13LTC2983_Class16SaveChannelValueEh+0x5c>)
   13232:	4798      	blx	r3
   13234:	4603      	mov	r3, r0
   13236:	461a      	mov	r2, r3
   13238:	687b      	ldr	r3, [r7, #4]
   1323a:	869a      	strh	r2, [r3, #52]	; 0x34
		raw_data = transfer_four_bytes(CHIP_SELECT, READ_FROM_RAM, start_address, 0);
   1323c:	687b      	ldr	r3, [r7, #4]
   1323e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   13240:	2300      	movs	r3, #0
   13242:	9300      	str	r3, [sp, #0]
   13244:	4613      	mov	r3, r2
   13246:	2203      	movs	r2, #3
   13248:	213d      	movs	r1, #61	; 0x3d
   1324a:	6878      	ldr	r0, [r7, #4]
   1324c:	4c0b      	ldr	r4, [pc, #44]	; (1327c <_ZN13LTC2983_Class16SaveChannelValueEh+0x60>)
   1324e:	47a0      	blx	r4
   13250:	4602      	mov	r2, r0
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	629a      	str	r2, [r3, #40]	; 0x28
		channelsRawData[ch]=raw_data;
   13256:	78fc      	ldrb	r4, [r7, #3]
   13258:	687b      	ldr	r3, [r7, #4]
   1325a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1325c:	4b08      	ldr	r3, [pc, #32]	; (13280 <_ZN13LTC2983_Class16SaveChannelValueEh+0x64>)
   1325e:	4610      	mov	r0, r2
   13260:	4798      	blx	r3
   13262:	4601      	mov	r1, r0
   13264:	687b      	ldr	r3, [r7, #4]
   13266:	1da2      	adds	r2, r4, #6
   13268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return	raw_data;
   1326c:	687b      	ldr	r3, [r7, #4]
   1326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
   13270:	4618      	mov	r0, r3
   13272:	370c      	adds	r7, #12
   13274:	46bd      	mov	sp, r7
   13276:	bd90      	pop	{r4, r7, pc}
   13278:	00013311 	.word	0x00013311
   1327c:	00013285 	.word	0x00013285
   13280:	000184b1 	.word	0x000184b1

00013284 <_ZN13LTC2983_Class19transfer_four_bytesEhhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint8_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   13284:	b590      	push	{r4, r7, lr}
   13286:	b08b      	sub	sp, #44	; 0x2c
   13288:	af02      	add	r7, sp, #8
   1328a:	6078      	str	r0, [r7, #4]
   1328c:	4608      	mov	r0, r1
   1328e:	4611      	mov	r1, r2
   13290:	461a      	mov	r2, r3
   13292:	4603      	mov	r3, r0
   13294:	70fb      	strb	r3, [r7, #3]
   13296:	460b      	mov	r3, r1
   13298:	70bb      	strb	r3, [r7, #2]
   1329a:	4613      	mov	r3, r2
   1329c:	803b      	strh	r3, [r7, #0]
	uint32_t output_data;
	volatile uint8_t tx[7], rx[7];

	tx[0] = ram_read_or_write;
   1329e:	78bb      	ldrb	r3, [r7, #2]
   132a0:	753b      	strb	r3, [r7, #20]
	tx[1] = highByte(start_address);
   132a2:	883b      	ldrh	r3, [r7, #0]
   132a4:	121b      	asrs	r3, r3, #8
   132a6:	b2db      	uxtb	r3, r3
   132a8:	757b      	strb	r3, [r7, #21]
	tx[2] = lowByte(start_address);
   132aa:	883b      	ldrh	r3, [r7, #0]
   132ac:	b2db      	uxtb	r3, r3
   132ae:	75bb      	strb	r3, [r7, #22]
	tx[3] = (uint8_t)(input_data >> 24);
   132b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   132b2:	0e1b      	lsrs	r3, r3, #24
   132b4:	b2db      	uxtb	r3, r3
   132b6:	75fb      	strb	r3, [r7, #23]
	tx[4] = (uint8_t)(input_data >> 16);
   132b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   132ba:	0c1b      	lsrs	r3, r3, #16
   132bc:	b2db      	uxtb	r3, r3
   132be:	763b      	strb	r3, [r7, #24]
	tx[5] = (uint8_t)(input_data >> 8);
   132c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   132c2:	0a1b      	lsrs	r3, r3, #8
   132c4:	b2db      	uxtb	r3, r3
   132c6:	767b      	strb	r3, [r7, #25]
	tx[6] = (uint8_t) input_data;
   132c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   132ca:	b2db      	uxtb	r3, r3
   132cc:	76bb      	strb	r3, [r7, #26]

	spiLT.spi_transfer_block(chip_select,(uint8_t*)tx,(uint8_t*)rx, 7);
   132ce:	6878      	ldr	r0, [r7, #4]
   132d0:	f107 040c 	add.w	r4, r7, #12
   132d4:	f107 0214 	add.w	r2, r7, #20
   132d8:	78f9      	ldrb	r1, [r7, #3]
   132da:	2307      	movs	r3, #7
   132dc:	9300      	str	r3, [sp, #0]
   132de:	4623      	mov	r3, r4
   132e0:	4c0a      	ldr	r4, [pc, #40]	; (1330c <_ZN13LTC2983_Class19transfer_four_bytesEhhtm+0x88>)
   132e2:	47a0      	blx	r4

	output_data = (uint32_t) rx[3] << 24 |
   132e4:	7bfb      	ldrb	r3, [r7, #15]
   132e6:	b2db      	uxtb	r3, r3
   132e8:	061a      	lsls	r2, r3, #24
	(uint32_t) rx[4] << 16 |
   132ea:	7c3b      	ldrb	r3, [r7, #16]
   132ec:	b2db      	uxtb	r3, r3
   132ee:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx[3] << 24 |
   132f0:	431a      	orrs	r2, r3
	(uint32_t) rx[5] << 8  |
   132f2:	7c7b      	ldrb	r3, [r7, #17]
   132f4:	b2db      	uxtb	r3, r3
   132f6:	021b      	lsls	r3, r3, #8
	(uint32_t) rx[4] << 16 |
   132f8:	4313      	orrs	r3, r2
	(uint32_t) rx[6];
   132fa:	7cba      	ldrb	r2, [r7, #18]
   132fc:	b2d2      	uxtb	r2, r2
	output_data = (uint32_t) rx[3] << 24 |
   132fe:	4313      	orrs	r3, r2
   13300:	61fb      	str	r3, [r7, #28]

	return output_data;
   13302:	69fb      	ldr	r3, [r7, #28]
}
   13304:	4618      	mov	r0, r3
   13306:	3724      	adds	r7, #36	; 0x24
   13308:	46bd      	mov	sp, r7
   1330a:	bd90      	pop	{r4, r7, pc}
   1330c:	00013499 	.word	0x00013499

00013310 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   13310:	b480      	push	{r7}
   13312:	b083      	sub	sp, #12
   13314:	af00      	add	r7, sp, #0
   13316:	6078      	str	r0, [r7, #4]
   13318:	460b      	mov	r3, r1
   1331a:	807b      	strh	r3, [r7, #2]
   1331c:	4613      	mov	r3, r2
   1331e:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   13320:	787b      	ldrb	r3, [r7, #1]
   13322:	3b01      	subs	r3, #1
   13324:	b29b      	uxth	r3, r3
   13326:	009b      	lsls	r3, r3, #2
   13328:	b29a      	uxth	r2, r3
   1332a:	887b      	ldrh	r3, [r7, #2]
   1332c:	4413      	add	r3, r2
   1332e:	b29b      	uxth	r3, r3
}
   13330:	4618      	mov	r0, r3
   13332:	370c      	adds	r7, #12
   13334:	46bd      	mov	sp, r7
   13336:	bc80      	pop	{r7}
   13338:	4770      	bx	lr
	...

0001333c <_Z41__static_initialization_and_destruction_0ii>:
	}
	isOK=process_finished==1?true:false;
	return	isOK;
	}

LTC2983_Class	temperatures(&SPI_TEMP);
   1333c:	b580      	push	{r7, lr}
   1333e:	b082      	sub	sp, #8
   13340:	af00      	add	r7, sp, #0
   13342:	6078      	str	r0, [r7, #4]
   13344:	6039      	str	r1, [r7, #0]
   13346:	687b      	ldr	r3, [r7, #4]
   13348:	2b01      	cmp	r3, #1
   1334a:	d10d      	bne.n	13368 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1334c:	683b      	ldr	r3, [r7, #0]
   1334e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13352:	4293      	cmp	r3, r2
   13354:	d108      	bne.n	13368 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13356:	4906      	ldr	r1, [pc, #24]	; (13370 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13358:	4806      	ldr	r0, [pc, #24]	; (13374 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1335a:	4b07      	ldr	r3, [pc, #28]	; (13378 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1335c:	4798      	blx	r3
   1335e:	4a07      	ldr	r2, [pc, #28]	; (1337c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13360:	4907      	ldr	r1, [pc, #28]	; (13380 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13362:	4804      	ldr	r0, [pc, #16]	; (13374 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13364:	4b07      	ldr	r3, [pc, #28]	; (13384 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   13366:	4798      	blx	r3
   13368:	bf00      	nop
   1336a:	3708      	adds	r7, #8
   1336c:	46bd      	mov	sp, r7
   1336e:	bd80      	pop	{r7, pc}
   13370:	20005604 	.word	0x20005604
   13374:	20004e04 	.word	0x20004e04
   13378:	000131ed 	.word	0x000131ed
   1337c:	20000000 	.word	0x20000000
   13380:	000131cd 	.word	0x000131cd
   13384:	000167bd 	.word	0x000167bd

00013388 <_GLOBAL__sub_I_ptrLTCClass>:
   13388:	b580      	push	{r7, lr}
   1338a:	af00      	add	r7, sp, #0
   1338c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13390:	2001      	movs	r0, #1
   13392:	4b01      	ldr	r3, [pc, #4]	; (13398 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
   13394:	4798      	blx	r3
   13396:	bd80      	pop	{r7, pc}
   13398:	0001333d 	.word	0x0001333d

0001339c <hri_port_set_OUT_reg>:
{
   1339c:	b480      	push	{r7}
   1339e:	b085      	sub	sp, #20
   133a0:	af00      	add	r7, sp, #0
   133a2:	60f8      	str	r0, [r7, #12]
   133a4:	460b      	mov	r3, r1
   133a6:	607a      	str	r2, [r7, #4]
   133a8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   133aa:	7afb      	ldrb	r3, [r7, #11]
   133ac:	68fa      	ldr	r2, [r7, #12]
   133ae:	01db      	lsls	r3, r3, #7
   133b0:	4413      	add	r3, r2
   133b2:	3318      	adds	r3, #24
   133b4:	687a      	ldr	r2, [r7, #4]
   133b6:	601a      	str	r2, [r3, #0]
}
   133b8:	bf00      	nop
   133ba:	3714      	adds	r7, #20
   133bc:	46bd      	mov	sp, r7
   133be:	bc80      	pop	{r7}
   133c0:	4770      	bx	lr

000133c2 <hri_port_clear_OUT_reg>:
{
   133c2:	b480      	push	{r7}
   133c4:	b085      	sub	sp, #20
   133c6:	af00      	add	r7, sp, #0
   133c8:	60f8      	str	r0, [r7, #12]
   133ca:	460b      	mov	r3, r1
   133cc:	607a      	str	r2, [r7, #4]
   133ce:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   133d0:	7afb      	ldrb	r3, [r7, #11]
   133d2:	68fa      	ldr	r2, [r7, #12]
   133d4:	01db      	lsls	r3, r3, #7
   133d6:	4413      	add	r3, r2
   133d8:	3314      	adds	r3, #20
   133da:	687a      	ldr	r2, [r7, #4]
   133dc:	601a      	str	r2, [r3, #0]
}
   133de:	bf00      	nop
   133e0:	3714      	adds	r7, #20
   133e2:	46bd      	mov	sp, r7
   133e4:	bc80      	pop	{r7}
   133e6:	4770      	bx	lr

000133e8 <_gpio_set_level>:
{
   133e8:	b580      	push	{r7, lr}
   133ea:	b082      	sub	sp, #8
   133ec:	af00      	add	r7, sp, #0
   133ee:	4603      	mov	r3, r0
   133f0:	6039      	str	r1, [r7, #0]
   133f2:	71fb      	strb	r3, [r7, #7]
   133f4:	4613      	mov	r3, r2
   133f6:	71bb      	strb	r3, [r7, #6]
	if (level) {
   133f8:	79bb      	ldrb	r3, [r7, #6]
   133fa:	2b00      	cmp	r3, #0
   133fc:	d006      	beq.n	1340c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   133fe:	79fb      	ldrb	r3, [r7, #7]
   13400:	683a      	ldr	r2, [r7, #0]
   13402:	4619      	mov	r1, r3
   13404:	4806      	ldr	r0, [pc, #24]	; (13420 <_gpio_set_level+0x38>)
   13406:	4b07      	ldr	r3, [pc, #28]	; (13424 <_gpio_set_level+0x3c>)
   13408:	4798      	blx	r3
}
   1340a:	e005      	b.n	13418 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   1340c:	79fb      	ldrb	r3, [r7, #7]
   1340e:	683a      	ldr	r2, [r7, #0]
   13410:	4619      	mov	r1, r3
   13412:	4803      	ldr	r0, [pc, #12]	; (13420 <_gpio_set_level+0x38>)
   13414:	4b04      	ldr	r3, [pc, #16]	; (13428 <_gpio_set_level+0x40>)
   13416:	4798      	blx	r3
}
   13418:	bf00      	nop
   1341a:	3708      	adds	r7, #8
   1341c:	46bd      	mov	sp, r7
   1341e:	bd80      	pop	{r7, pc}
   13420:	41008000 	.word	0x41008000
   13424:	0001339d 	.word	0x0001339d
   13428:	000133c3 	.word	0x000133c3

0001342c <gpio_set_pin_level>:
{
   1342c:	b580      	push	{r7, lr}
   1342e:	b082      	sub	sp, #8
   13430:	af00      	add	r7, sp, #0
   13432:	4603      	mov	r3, r0
   13434:	460a      	mov	r2, r1
   13436:	71fb      	strb	r3, [r7, #7]
   13438:	4613      	mov	r3, r2
   1343a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   1343c:	79fb      	ldrb	r3, [r7, #7]
   1343e:	115b      	asrs	r3, r3, #5
   13440:	b2d8      	uxtb	r0, r3
   13442:	79fb      	ldrb	r3, [r7, #7]
   13444:	f003 031f 	and.w	r3, r3, #31
   13448:	2201      	movs	r2, #1
   1344a:	fa02 f303 	lsl.w	r3, r2, r3
   1344e:	79ba      	ldrb	r2, [r7, #6]
   13450:	4619      	mov	r1, r3
   13452:	4b03      	ldr	r3, [pc, #12]	; (13460 <gpio_set_pin_level+0x34>)
   13454:	4798      	blx	r3
}
   13456:	bf00      	nop
   13458:	3708      	adds	r7, #8
   1345a:	46bd      	mov	sp, r7
   1345c:	bd80      	pop	{r7, pc}
   1345e:	bf00      	nop
   13460:	000133e9 	.word	0x000133e9

00013464 <_ZN6LT_SPIC1Ev>:

SPI_Asyn_Class LT_SPI::spiTemp;


// default constructor
LT_SPI::LT_SPI()
   13464:	b480      	push	{r7}
   13466:	b083      	sub	sp, #12
   13468:	af00      	add	r7, sp, #0
   1346a:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   1346c:	4a04      	ldr	r2, [pc, #16]	; (13480 <_ZN6LT_SPIC1Ev+0x1c>)
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	6013      	str	r3, [r2, #0]
} //LT_SPI
   13472:	687b      	ldr	r3, [r7, #4]
   13474:	4618      	mov	r0, r3
   13476:	370c      	adds	r7, #12
   13478:	46bd      	mov	sp, r7
   1347a:	bc80      	pop	{r7}
   1347c:	4770      	bx	lr
   1347e:	bf00      	nop
   13480:	20004e3c 	.word	0x20004e3c

00013484 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   13484:	b480      	push	{r7}
   13486:	b083      	sub	sp, #12
   13488:	af00      	add	r7, sp, #0
   1348a:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   1348c:	687b      	ldr	r3, [r7, #4]
   1348e:	4618      	mov	r0, r3
   13490:	370c      	adds	r7, #12
   13492:	46bd      	mov	sp, r7
   13494:	bc80      	pop	{r7}
   13496:	4770      	bx	lr

00013498 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint8_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   13498:	b580      	push	{r7, lr}
   1349a:	b086      	sub	sp, #24
   1349c:	af00      	add	r7, sp, #0
   1349e:	60f8      	str	r0, [r7, #12]
   134a0:	607a      	str	r2, [r7, #4]
   134a2:	603b      	str	r3, [r7, #0]
   134a4:	460b      	mov	r3, r1
   134a6:	72fb      	strb	r3, [r7, #11]
	uint8_t rOrw=*tx;
   134a8:	687b      	ldr	r3, [r7, #4]
   134aa:	781b      	ldrb	r3, [r3, #0]
   134ac:	75bb      	strb	r3, [r7, #22]
	gpio_set_pin_level(cs_pin,false)  ;               //! 1) Pull CS low
   134ae:	7afb      	ldrb	r3, [r7, #11]
   134b0:	2100      	movs	r1, #0
   134b2:	4618      	mov	r0, r3
   134b4:	4b31      	ldr	r3, [pc, #196]	; (1357c <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe4>)
   134b6:	4798      	blx	r3
	
	switch(rOrw){
   134b8:	7dbb      	ldrb	r3, [r7, #22]
   134ba:	2b02      	cmp	r3, #2
   134bc:	d002      	beq.n	134c4 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x2c>
   134be:	2b03      	cmp	r3, #3
   134c0:	d010      	beq.n	134e4 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x4c>
   134c2:	e038      	b.n	13536 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x9e>
		case WRITE_TO_RAM:
			spiTemp.write(tx,length);				//! 2) Read byte and send byte
   134c4:	f897 3020 	ldrb.w	r3, [r7, #32]
   134c8:	461a      	mov	r2, r3
   134ca:	6879      	ldr	r1, [r7, #4]
   134cc:	482c      	ldr	r0, [pc, #176]	; (13580 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   134ce:	4b2d      	ldr	r3, [pc, #180]	; (13584 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xec>)
   134d0:	4798      	blx	r3
			while(!spiTemp.xferDone);
   134d2:	4b2b      	ldr	r3, [pc, #172]	; (13580 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   134d4:	781b      	ldrb	r3, [r3, #0]
   134d6:	b2db      	uxtb	r3, r3
   134d8:	f083 0301 	eor.w	r3, r3, #1
   134dc:	b2db      	uxtb	r3, r3
   134de:	2b00      	cmp	r3, #0
   134e0:	d042      	beq.n	13568 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xd0>
   134e2:	e7f6      	b.n	134d2 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x3a>
			break;
		case READ_FROM_RAM:
			spiTemp.write(tx,3); 
   134e4:	2203      	movs	r2, #3
   134e6:	6879      	ldr	r1, [r7, #4]
   134e8:	4825      	ldr	r0, [pc, #148]	; (13580 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   134ea:	4b26      	ldr	r3, [pc, #152]	; (13584 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xec>)
   134ec:	4798      	blx	r3
			//while(!spiTemp.xferDone);
			if (length>4)
   134ee:	f897 3020 	ldrb.w	r3, [r7, #32]
   134f2:	2b04      	cmp	r3, #4
   134f4:	dd19      	ble.n	1352a <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x92>
			{
				for (uint8_t i=0;i<length;i++)
   134f6:	2300      	movs	r3, #0
   134f8:	75fb      	strb	r3, [r7, #23]
   134fa:	7dfa      	ldrb	r2, [r7, #23]
   134fc:	f897 3020 	ldrb.w	r3, [r7, #32]
   13500:	429a      	cmp	r2, r3
   13502:	da0b      	bge.n	1351c <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x84>
				{
					//spiTemp.write(tx,1); tx++;
					//while(!spiTemp.xferDone);
					spiTemp.read(rx,1); rx++;
   13504:	2201      	movs	r2, #1
   13506:	6839      	ldr	r1, [r7, #0]
   13508:	481d      	ldr	r0, [pc, #116]	; (13580 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   1350a:	4b1f      	ldr	r3, [pc, #124]	; (13588 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xf0>)
   1350c:	4798      	blx	r3
   1350e:	683b      	ldr	r3, [r7, #0]
   13510:	3301      	adds	r3, #1
   13512:	603b      	str	r3, [r7, #0]
				for (uint8_t i=0;i<length;i++)
   13514:	7dfb      	ldrb	r3, [r7, #23]
   13516:	3301      	adds	r3, #1
   13518:	75fb      	strb	r3, [r7, #23]
   1351a:	e7ee      	b.n	134fa <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x62>
							
				}
				rx-=length;
   1351c:	f897 3020 	ldrb.w	r3, [r7, #32]
   13520:	425b      	negs	r3, r3
   13522:	683a      	ldr	r2, [r7, #0]
   13524:	4413      	add	r3, r2
   13526:	603b      	str	r3, [r7, #0]
			else
			{
				spiTemp.read(rx,1);
			}
	
			break;
   13528:	e01f      	b.n	1356a <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xd2>
				spiTemp.read(rx,1);
   1352a:	2201      	movs	r2, #1
   1352c:	6839      	ldr	r1, [r7, #0]
   1352e:	4814      	ldr	r0, [pc, #80]	; (13580 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   13530:	4b15      	ldr	r3, [pc, #84]	; (13588 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xf0>)
   13532:	4798      	blx	r3
			break;
   13534:	e019      	b.n	1356a <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xd2>
		default:
			spiTemp.write(tx,length);             //! 2) Read byte and send byte
   13536:	f897 3020 	ldrb.w	r3, [r7, #32]
   1353a:	461a      	mov	r2, r3
   1353c:	6879      	ldr	r1, [r7, #4]
   1353e:	4810      	ldr	r0, [pc, #64]	; (13580 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   13540:	4b10      	ldr	r3, [pc, #64]	; (13584 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xec>)
   13542:	4798      	blx	r3
			while(!spiTemp.xferDone);
   13544:	4b0e      	ldr	r3, [pc, #56]	; (13580 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   13546:	781b      	ldrb	r3, [r3, #0]
   13548:	b2db      	uxtb	r3, r3
   1354a:	f083 0301 	eor.w	r3, r3, #1
   1354e:	b2db      	uxtb	r3, r3
   13550:	2b00      	cmp	r3, #0
   13552:	d000      	beq.n	13556 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xbe>
   13554:	e7f6      	b.n	13544 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xac>
			spiTemp.read(rx,length-3);
   13556:	f897 3020 	ldrb.w	r3, [r7, #32]
   1355a:	3b03      	subs	r3, #3
   1355c:	461a      	mov	r2, r3
   1355e:	6839      	ldr	r1, [r7, #0]
   13560:	4807      	ldr	r0, [pc, #28]	; (13580 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   13562:	4b09      	ldr	r3, [pc, #36]	; (13588 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xf0>)
   13564:	4798      	blx	r3
			break;
   13566:	e000      	b.n	1356a <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xd2>
			break;
   13568:	bf00      	nop


	


	gpio_set_pin_level(cs_pin,true)   ;              //! 3) Pull CS high
   1356a:	7afb      	ldrb	r3, [r7, #11]
   1356c:	2101      	movs	r1, #1
   1356e:	4618      	mov	r0, r3
   13570:	4b02      	ldr	r3, [pc, #8]	; (1357c <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe4>)
   13572:	4798      	blx	r3
}
   13574:	bf00      	nop
   13576:	3718      	adds	r7, #24
   13578:	46bd      	mov	sp, r7
   1357a:	bd80      	pop	{r7, pc}
   1357c:	0001342d 	.word	0x0001342d
   13580:	20004e40 	.word	0x20004e40
   13584:	0001361d 	.word	0x0001361d
   13588:	00013661 	.word	0x00013661

0001358c <_Z41__static_initialization_and_destruction_0ii>:
{
	uint8_t rx;
	spiTemp.read(&rx,1);
	return	(int8_t)rx;

}
   1358c:	b580      	push	{r7, lr}
   1358e:	b082      	sub	sp, #8
   13590:	af00      	add	r7, sp, #0
   13592:	6078      	str	r0, [r7, #4]
   13594:	6039      	str	r1, [r7, #0]
   13596:	687b      	ldr	r3, [r7, #4]
   13598:	2b01      	cmp	r3, #1
   1359a:	d10c      	bne.n	135b6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   1359c:	683b      	ldr	r3, [r7, #0]
   1359e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   135a2:	4293      	cmp	r3, r2
   135a4:	d107      	bne.n	135b6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
SPI_Asyn_Class LT_SPI::spiTemp;
   135a6:	4806      	ldr	r0, [pc, #24]	; (135c0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   135a8:	4b06      	ldr	r3, [pc, #24]	; (135c4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   135aa:	4798      	blx	r3
   135ac:	4a06      	ldr	r2, [pc, #24]	; (135c8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   135ae:	4907      	ldr	r1, [pc, #28]	; (135cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
   135b0:	4803      	ldr	r0, [pc, #12]	; (135c0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   135b2:	4b07      	ldr	r3, [pc, #28]	; (135d0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   135b4:	4798      	blx	r3
}
   135b6:	bf00      	nop
   135b8:	3708      	adds	r7, #8
   135ba:	46bd      	mov	sp, r7
   135bc:	bd80      	pop	{r7, pc}
   135be:	bf00      	nop
   135c0:	20004e40 	.word	0x20004e40
   135c4:	000135e9 	.word	0x000135e9
   135c8:	20000000 	.word	0x20000000
   135cc:	00013609 	.word	0x00013609
   135d0:	000167bd 	.word	0x000167bd

000135d4 <_GLOBAL__sub_I_ptrLTSPIClass>:
   135d4:	b580      	push	{r7, lr}
   135d6:	af00      	add	r7, sp, #0
   135d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   135dc:	2001      	movs	r0, #1
   135de:	4b01      	ldr	r3, [pc, #4]	; (135e4 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   135e0:	4798      	blx	r3
   135e2:	bd80      	pop	{r7, pc}
   135e4:	0001358d 	.word	0x0001358d

000135e8 <_ZN14SPI_Asyn_ClassC1Ev>:
SPI_Asyn_Class::SPI_Asyn_Class(spi_m_async_descriptor *spi)
{
	SPIA=spi;
	ptrSPIAClass=this;
} //SPI_Asyn_Class
SPI_Asyn_Class::SPI_Asyn_Class()
   135e8:	b480      	push	{r7}
   135ea:	b083      	sub	sp, #12
   135ec:	af00      	add	r7, sp, #0
   135ee:	6078      	str	r0, [r7, #4]
{
	ptrSPIAClass=this;
   135f0:	4a04      	ldr	r2, [pc, #16]	; (13604 <_ZN14SPI_Asyn_ClassC1Ev+0x1c>)
   135f2:	687b      	ldr	r3, [r7, #4]
   135f4:	6013      	str	r3, [r2, #0]
} //SPI_Asyn_Class
   135f6:	687b      	ldr	r3, [r7, #4]
   135f8:	4618      	mov	r0, r3
   135fa:	370c      	adds	r7, #12
   135fc:	46bd      	mov	sp, r7
   135fe:	bc80      	pop	{r7}
   13600:	4770      	bx	lr
   13602:	bf00      	nop
   13604:	20004e60 	.word	0x20004e60

00013608 <_ZN14SPI_Asyn_ClassD1Ev>:

// default destructor
SPI_Asyn_Class::~SPI_Asyn_Class()
   13608:	b480      	push	{r7}
   1360a:	b083      	sub	sp, #12
   1360c:	af00      	add	r7, sp, #0
   1360e:	6078      	str	r0, [r7, #4]
{
} //~SPI_Asyn_Class
   13610:	687b      	ldr	r3, [r7, #4]
   13612:	4618      	mov	r0, r3
   13614:	370c      	adds	r7, #12
   13616:	46bd      	mov	sp, r7
   13618:	bc80      	pop	{r7}
   1361a:	4770      	bx	lr

0001361c <_ZN14SPI_Asyn_Class5writeEPKhl>:
	xferDone=true;

	return 0;
}

int32_t  SPI_Asyn_Class::write(const uint8_t * p, int32_t n){
   1361c:	b580      	push	{r7, lr}
   1361e:	b086      	sub	sp, #24
   13620:	af00      	add	r7, sp, #0
   13622:	60f8      	str	r0, [r7, #12]
   13624:	60b9      	str	r1, [r7, #8]
   13626:	607a      	str	r2, [r7, #4]

	while(!xferDone);
   13628:	68fb      	ldr	r3, [r7, #12]
   1362a:	781b      	ldrb	r3, [r3, #0]
   1362c:	b2db      	uxtb	r3, r3
   1362e:	f083 0301 	eor.w	r3, r3, #1
   13632:	b2db      	uxtb	r3, r3
   13634:	2b00      	cmp	r3, #0
   13636:	d000      	beq.n	1363a <_ZN14SPI_Asyn_Class5writeEPKhl+0x1e>
   13638:	e7f6      	b.n	13628 <_ZN14SPI_Asyn_Class5writeEPKhl+0xc>
	xferDone=false;
   1363a:	68fb      	ldr	r3, [r7, #12]
   1363c:	2200      	movs	r2, #0
   1363e:	701a      	strb	r2, [r3, #0]
	int32_t w= io_write(spio,p,(uint16_t)n);
   13640:	68fb      	ldr	r3, [r7, #12]
   13642:	691b      	ldr	r3, [r3, #16]
   13644:	687a      	ldr	r2, [r7, #4]
   13646:	b292      	uxth	r2, r2
   13648:	68b9      	ldr	r1, [r7, #8]
   1364a:	4618      	mov	r0, r3
   1364c:	4b03      	ldr	r3, [pc, #12]	; (1365c <_ZN14SPI_Asyn_Class5writeEPKhl+0x40>)
   1364e:	4798      	blx	r3
   13650:	6178      	str	r0, [r7, #20]
	 return w;
   13652:	697b      	ldr	r3, [r7, #20]
	
}
   13654:	4618      	mov	r0, r3
   13656:	3718      	adds	r7, #24
   13658:	46bd      	mov	sp, r7
   1365a:	bd80      	pop	{r7, pc}
   1365c:	0001671d 	.word	0x0001671d

00013660 <_ZN14SPI_Asyn_Class4readEPhl>:
int32_t  SPI_Asyn_Class::read(uint8_t * p, int32_t n){
   13660:	b580      	push	{r7, lr}
   13662:	b086      	sub	sp, #24
   13664:	af00      	add	r7, sp, #0
   13666:	60f8      	str	r0, [r7, #12]
   13668:	60b9      	str	r1, [r7, #8]
   1366a:	607a      	str	r2, [r7, #4]
	while(!xferDone);
   1366c:	68fb      	ldr	r3, [r7, #12]
   1366e:	781b      	ldrb	r3, [r3, #0]
   13670:	b2db      	uxtb	r3, r3
   13672:	f083 0301 	eor.w	r3, r3, #1
   13676:	b2db      	uxtb	r3, r3
   13678:	2b00      	cmp	r3, #0
   1367a:	d000      	beq.n	1367e <_ZN14SPI_Asyn_Class4readEPhl+0x1e>
   1367c:	e7f6      	b.n	1366c <_ZN14SPI_Asyn_Class4readEPhl+0xc>
	xferDone=false;
   1367e:	68fb      	ldr	r3, [r7, #12]
   13680:	2200      	movs	r2, #0
   13682:	701a      	strb	r2, [r3, #0]
	int32_t r=io_read(spio,p,(uint16_t)n);
   13684:	68fb      	ldr	r3, [r7, #12]
   13686:	691b      	ldr	r3, [r3, #16]
   13688:	687a      	ldr	r2, [r7, #4]
   1368a:	b292      	uxth	r2, r2
   1368c:	68b9      	ldr	r1, [r7, #8]
   1368e:	4618      	mov	r0, r3
   13690:	4b08      	ldr	r3, [pc, #32]	; (136b4 <_ZN14SPI_Asyn_Class4readEPhl+0x54>)
   13692:	4798      	blx	r3
   13694:	6178      	str	r0, [r7, #20]
	while((!xferDone));
   13696:	68fb      	ldr	r3, [r7, #12]
   13698:	781b      	ldrb	r3, [r3, #0]
   1369a:	b2db      	uxtb	r3, r3
   1369c:	f083 0301 	eor.w	r3, r3, #1
   136a0:	b2db      	uxtb	r3, r3
   136a2:	2b00      	cmp	r3, #0
   136a4:	d000      	beq.n	136a8 <_ZN14SPI_Asyn_Class4readEPhl+0x48>
   136a6:	e7f6      	b.n	13696 <_ZN14SPI_Asyn_Class4readEPhl+0x36>
	return  r;
   136a8:	697b      	ldr	r3, [r7, #20]
}
   136aa:	4618      	mov	r0, r3
   136ac:	3718      	adds	r7, #24
   136ae:	46bd      	mov	sp, r7
   136b0:	bd80      	pop	{r7, pc}
   136b2:	bf00      	nop
   136b4:	0001676d 	.word	0x0001676d

000136b8 <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   136b8:	b480      	push	{r7}
   136ba:	b083      	sub	sp, #12
   136bc:	af00      	add	r7, sp, #0
   136be:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   136c0:	4a04      	ldr	r2, [pc, #16]	; (136d4 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   136c2:	687b      	ldr	r3, [r7, #4]
   136c4:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   136c6:	687b      	ldr	r3, [r7, #4]
   136c8:	4618      	mov	r0, r3
   136ca:	370c      	adds	r7, #12
   136cc:	46bd      	mov	sp, r7
   136ce:	bc80      	pop	{r7}
   136d0:	4770      	bx	lr
   136d2:	bf00      	nop
   136d4:	20004e64 	.word	0x20004e64

000136d8 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   136d8:	b480      	push	{r7}
   136da:	b083      	sub	sp, #12
   136dc:	af00      	add	r7, sp, #0
   136de:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   136e0:	687b      	ldr	r3, [r7, #4]
   136e2:	4618      	mov	r0, r3
   136e4:	370c      	adds	r7, #12
   136e6:	46bd      	mov	sp, r7
   136e8:	bc80      	pop	{r7}
   136ea:	4770      	bx	lr

000136ec <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   136ec:	b580      	push	{r7, lr}
   136ee:	b082      	sub	sp, #8
   136f0:	af00      	add	r7, sp, #0
   136f2:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   136f4:	687b      	ldr	r3, [r7, #4]
   136f6:	685a      	ldr	r2, [r3, #4]
   136f8:	687b      	ldr	r3, [r7, #4]
   136fa:	3308      	adds	r3, #8
   136fc:	4619      	mov	r1, r3
   136fe:	4610      	mov	r0, r2
   13700:	4b06      	ldr	r3, [pc, #24]	; (1371c <_ZN13SPI_Syn_Class4initEv+0x30>)
   13702:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   13704:	687b      	ldr	r3, [r7, #4]
   13706:	685b      	ldr	r3, [r3, #4]
   13708:	4618      	mov	r0, r3
   1370a:	4b05      	ldr	r3, [pc, #20]	; (13720 <_ZN13SPI_Syn_Class4initEv+0x34>)
   1370c:	4798      	blx	r3
	
	ready=true;
   1370e:	687b      	ldr	r3, [r7, #4]
   13710:	2201      	movs	r2, #1
   13712:	701a      	strb	r2, [r3, #0]
	
}
   13714:	bf00      	nop
   13716:	3708      	adds	r7, #8
   13718:	46bd      	mov	sp, r7
   1371a:	bd80      	pop	{r7, pc}
   1371c:	00005b55 	.word	0x00005b55
   13720:	000059c9 	.word	0x000059c9

00013724 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   13724:	b480      	push	{r7}
   13726:	b083      	sub	sp, #12
   13728:	af00      	add	r7, sp, #0
   1372a:	6078      	str	r0, [r7, #4]
   1372c:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   1372e:	4a05      	ldr	r2, [pc, #20]	; (13744 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   13730:	687b      	ldr	r3, [r7, #4]
   13732:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   13734:	687b      	ldr	r3, [r7, #4]
   13736:	683a      	ldr	r2, [r7, #0]
   13738:	605a      	str	r2, [r3, #4]
}
   1373a:	bf00      	nop
   1373c:	370c      	adds	r7, #12
   1373e:	46bd      	mov	sp, r7
   13740:	bc80      	pop	{r7}
   13742:	4770      	bx	lr
   13744:	20004e64 	.word	0x20004e64

00013748 <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
   13748:	b580      	push	{r7, lr}
   1374a:	b082      	sub	sp, #8
   1374c:	af00      	add	r7, sp, #0
   1374e:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   13750:	687b      	ldr	r3, [r7, #4]
   13752:	685a      	ldr	r2, [r3, #4]
   13754:	687b      	ldr	r3, [r7, #4]
   13756:	3308      	adds	r3, #8
   13758:	4619      	mov	r1, r3
   1375a:	4610      	mov	r0, r2
   1375c:	4b07      	ldr	r3, [pc, #28]	; (1377c <_ZN13SPI_Syn_Class6enableEv+0x34>)
   1375e:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   13760:	687b      	ldr	r3, [r7, #4]
   13762:	685b      	ldr	r3, [r3, #4]
   13764:	4618      	mov	r0, r3
   13766:	4b06      	ldr	r3, [pc, #24]	; (13780 <_ZN13SPI_Syn_Class6enableEv+0x38>)
   13768:	4798      	blx	r3
	ready=true;
   1376a:	687b      	ldr	r3, [r7, #4]
   1376c:	2201      	movs	r2, #1
   1376e:	701a      	strb	r2, [r3, #0]
	return 0;
   13770:	2300      	movs	r3, #0
}
   13772:	4618      	mov	r0, r3
   13774:	3708      	adds	r7, #8
   13776:	46bd      	mov	sp, r7
   13778:	bd80      	pop	{r7, pc}
   1377a:	bf00      	nop
   1377c:	00005b55 	.word	0x00005b55
   13780:	000059c9 	.word	0x000059c9

00013784 <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
   13784:	b580      	push	{r7, lr}
   13786:	b086      	sub	sp, #24
   13788:	af00      	add	r7, sp, #0
   1378a:	60f8      	str	r0, [r7, #12]
   1378c:	60b9      	str	r1, [r7, #8]
   1378e:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   13790:	68fb      	ldr	r3, [r7, #12]
   13792:	2201      	movs	r2, #1
   13794:	741a      	strb	r2, [r3, #16]
	w= io_write(spio,p,(uint16_t)n);
   13796:	68fb      	ldr	r3, [r7, #12]
   13798:	689b      	ldr	r3, [r3, #8]
   1379a:	687a      	ldr	r2, [r7, #4]
   1379c:	b292      	uxth	r2, r2
   1379e:	68b9      	ldr	r1, [r7, #8]
   137a0:	4618      	mov	r0, r3
   137a2:	4b08      	ldr	r3, [pc, #32]	; (137c4 <_ZN13SPI_Syn_Class5writeEPKhl+0x40>)
   137a4:	4798      	blx	r3
   137a6:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   137a8:	697b      	ldr	r3, [r7, #20]
   137aa:	2b00      	cmp	r3, #0
   137ac:	bf14      	ite	ne
   137ae:	2301      	movne	r3, #1
   137b0:	2300      	moveq	r3, #0
   137b2:	b2da      	uxtb	r2, r3
   137b4:	68fb      	ldr	r3, [r7, #12]
   137b6:	741a      	strb	r2, [r3, #16]
	 return w;
   137b8:	697b      	ldr	r3, [r7, #20]
	
}
   137ba:	4618      	mov	r0, r3
   137bc:	3718      	adds	r7, #24
   137be:	46bd      	mov	sp, r7
   137c0:	bd80      	pop	{r7, pc}
   137c2:	bf00      	nop
   137c4:	0001671d 	.word	0x0001671d

000137c8 <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
   137c8:	b580      	push	{r7, lr}
   137ca:	b086      	sub	sp, #24
   137cc:	af00      	add	r7, sp, #0
   137ce:	60f8      	str	r0, [r7, #12]
   137d0:	60b9      	str	r1, [r7, #8]
   137d2:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   137d4:	68fb      	ldr	r3, [r7, #12]
   137d6:	2201      	movs	r2, #1
   137d8:	745a      	strb	r2, [r3, #17]
	r=io_read(spio,p,(uint16_t)n);
   137da:	68fb      	ldr	r3, [r7, #12]
   137dc:	689b      	ldr	r3, [r3, #8]
   137de:	687a      	ldr	r2, [r7, #4]
   137e0:	b292      	uxth	r2, r2
   137e2:	68b9      	ldr	r1, [r7, #8]
   137e4:	4618      	mov	r0, r3
   137e6:	4b08      	ldr	r3, [pc, #32]	; (13808 <_ZN13SPI_Syn_Class4readEPhl+0x40>)
   137e8:	4798      	blx	r3
   137ea:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   137ec:	697b      	ldr	r3, [r7, #20]
   137ee:	2b00      	cmp	r3, #0
   137f0:	bf14      	ite	ne
   137f2:	2301      	movne	r3, #1
   137f4:	2300      	moveq	r3, #0
   137f6:	b2da      	uxtb	r2, r3
   137f8:	68fb      	ldr	r3, [r7, #12]
   137fa:	745a      	strb	r2, [r3, #17]
	return  r;
   137fc:	697b      	ldr	r3, [r7, #20]
}
   137fe:	4618      	mov	r0, r3
   13800:	3718      	adds	r7, #24
   13802:	46bd      	mov	sp, r7
   13804:	bd80      	pop	{r7, pc}
   13806:	bf00      	nop
   13808:	0001676d 	.word	0x0001676d

0001380c <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
   1380c:	b580      	push	{r7, lr}
   1380e:	b082      	sub	sp, #8
   13810:	af00      	add	r7, sp, #0
   13812:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   13814:	687b      	ldr	r3, [r7, #4]
   13816:	685b      	ldr	r3, [r3, #4]
   13818:	4618      	mov	r0, r3
   1381a:	4b03      	ldr	r3, [pc, #12]	; (13828 <_ZN13SPI_Syn_Class7disableEv+0x1c>)
   1381c:	4798      	blx	r3
	
}
   1381e:	bf00      	nop
   13820:	3708      	adds	r7, #8
   13822:	46bd      	mov	sp, r7
   13824:	bd80      	pop	{r7, pc}
   13826:	bf00      	nop
   13828:	00005a05 	.word	0x00005a05

0001382c <_ZN13SPI_Syn_Class10isSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::isSPIReady(void){
   1382c:	b480      	push	{r7}
   1382e:	b083      	sub	sp, #12
   13830:	af00      	add	r7, sp, #0
   13832:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
   13834:	687b      	ldr	r3, [r7, #4]
   13836:	7c5b      	ldrb	r3, [r3, #17]
   13838:	b2db      	uxtb	r3, r3
   1383a:	2b00      	cmp	r3, #0
   1383c:	d103      	bne.n	13846 <_ZN13SPI_Syn_Class10isSPIReadyEv+0x1a>
   1383e:	687b      	ldr	r3, [r7, #4]
   13840:	7c1b      	ldrb	r3, [r3, #16]
   13842:	b2db      	uxtb	r3, r3
   13844:	2b00      	cmp	r3, #0
   13846:	687b      	ldr	r3, [r7, #4]
   13848:	2201      	movs	r2, #1
   1384a:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
   1384c:	687b      	ldr	r3, [r7, #4]
   1384e:	781b      	ldrb	r3, [r3, #0]
   13850:	b2db      	uxtb	r3, r3
   13852:	2b00      	cmp	r3, #0
   13854:	d001      	beq.n	1385a <_ZN13SPI_Syn_Class10isSPIReadyEv+0x2e>
	{
		
		return true;
   13856:	2301      	movs	r3, #1
   13858:	e000      	b.n	1385c <_ZN13SPI_Syn_Class10isSPIReadyEv+0x30>
	} 
	else
	{
		return false;
   1385a:	2300      	movs	r3, #0
	}
	return ready;
	
}
   1385c:	4618      	mov	r0, r3
   1385e:	370c      	adds	r7, #12
   13860:	46bd      	mov	sp, r7
   13862:	bc80      	pop	{r7}
   13864:	4770      	bx	lr
	...

00013868 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
   13868:	b580      	push	{r7, lr}
   1386a:	b082      	sub	sp, #8
   1386c:	af00      	add	r7, sp, #0
   1386e:	6078      	str	r0, [r7, #4]
   13870:	6039      	str	r1, [r7, #0]
   13872:	687b      	ldr	r3, [r7, #4]
   13874:	3304      	adds	r3, #4
   13876:	4618      	mov	r0, r3
   13878:	4b06      	ldr	r3, [pc, #24]	; (13894 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
   1387a:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
   1387c:	687b      	ldr	r3, [r7, #4]
   1387e:	683a      	ldr	r2, [r7, #0]
   13880:	635a      	str	r2, [r3, #52]	; 0x34
	ptrAT24MACClass=this;
   13882:	4a05      	ldr	r2, [pc, #20]	; (13898 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
   13884:	687b      	ldr	r3, [r7, #4]
   13886:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
   13888:	687b      	ldr	r3, [r7, #4]
   1388a:	4618      	mov	r0, r3
   1388c:	3708      	adds	r7, #8
   1388e:	46bd      	mov	sp, r7
   13890:	bd80      	pop	{r7, pc}
   13892:	bf00      	nop
   13894:	00016265 	.word	0x00016265
   13898:	20004e68 	.word	0x20004e68

0001389c <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
   1389c:	b580      	push	{r7, lr}
   1389e:	b082      	sub	sp, #8
   138a0:	af00      	add	r7, sp, #0
   138a2:	6078      	str	r0, [r7, #4]
   138a4:	687b      	ldr	r3, [r7, #4]
   138a6:	3304      	adds	r3, #4
   138a8:	4618      	mov	r0, r3
   138aa:	4b03      	ldr	r3, [pc, #12]	; (138b8 <_ZN13AT24MAC_ClassD1Ev+0x1c>)
   138ac:	4798      	blx	r3
{
} //~AT24MAC_Class
   138ae:	687b      	ldr	r3, [r7, #4]
   138b0:	4618      	mov	r0, r3
   138b2:	3708      	adds	r7, #8
   138b4:	46bd      	mov	sp, r7
   138b6:	bd80      	pop	{r7, pc}
   138b8:	0001629d 	.word	0x0001629d

000138bc <_ZN13AT24MAC_Class4InitEv>:


bool AT24MAC_Class::Init(void){
   138bc:	b580      	push	{r7, lr}
   138be:	b082      	sub	sp, #8
   138c0:	af00      	add	r7, sp, #0
   138c2:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
   138c4:	2156      	movs	r1, #86	; 0x56
   138c6:	6878      	ldr	r0, [r7, #4]
   138c8:	4b04      	ldr	r3, [pc, #16]	; (138dc <_ZN13AT24MAC_Class4InitEv+0x20>)
   138ca:	4798      	blx	r3
	return SelfTest();
   138cc:	6878      	ldr	r0, [r7, #4]
   138ce:	4b04      	ldr	r3, [pc, #16]	; (138e0 <_ZN13AT24MAC_Class4InitEv+0x24>)
   138d0:	4798      	blx	r3
   138d2:	4603      	mov	r3, r0
}
   138d4:	4618      	mov	r0, r3
   138d6:	3708      	adds	r7, #8
   138d8:	46bd      	mov	sp, r7
   138da:	bd80      	pop	{r7, pc}
   138dc:	000138e5 	.word	0x000138e5
   138e0:	00013bc9 	.word	0x00013bc9

000138e4 <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
   138e4:	b580      	push	{r7, lr}
   138e6:	b082      	sub	sp, #8
   138e8:	af00      	add	r7, sp, #0
   138ea:	6078      	str	r0, [r7, #4]
   138ec:	460b      	mov	r3, r1
   138ee:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   138f0:	687b      	ldr	r3, [r7, #4]
   138f2:	78fa      	ldrb	r2, [r7, #3]
   138f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	i2ca.Set_descriptor(ptrI2CDescr);
   138f8:	687b      	ldr	r3, [r7, #4]
   138fa:	1d1a      	adds	r2, r3, #4
   138fc:	687b      	ldr	r3, [r7, #4]
   138fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13900:	4619      	mov	r1, r3
   13902:	4610      	mov	r0, r2
   13904:	4b0a      	ldr	r3, [pc, #40]	; (13930 <_ZN13AT24MAC_Class4InitEh+0x4c>)
   13906:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
   13908:	687b      	ldr	r3, [r7, #4]
   1390a:	3304      	adds	r3, #4
   1390c:	78fa      	ldrb	r2, [r7, #3]
   1390e:	4611      	mov	r1, r2
   13910:	4618      	mov	r0, r3
   13912:	4b08      	ldr	r3, [pc, #32]	; (13934 <_ZN13AT24MAC_Class4InitEh+0x50>)
   13914:	4798      	blx	r3
   13916:	4603      	mov	r3, r0
   13918:	2b00      	cmp	r3, #0
   1391a:	bf0c      	ite	eq
   1391c:	2301      	moveq	r3, #1
   1391e:	2300      	movne	r3, #0
   13920:	b2da      	uxtb	r2, r3
   13922:	687b      	ldr	r3, [r7, #4]
   13924:	701a      	strb	r2, [r3, #0]
}
   13926:	bf00      	nop
   13928:	3708      	adds	r7, #8
   1392a:	46bd      	mov	sp, r7
   1392c:	bd80      	pop	{r7, pc}
   1392e:	bf00      	nop
   13930:	000162bd 	.word	0x000162bd
   13934:	00016395 	.word	0x00016395

00013938 <_ZN13AT24MAC_Class10Write_byteEhh>:


int32_t AT24MAC_Class::Write_byte(uint8_t addr, uint8_t value){
   13938:	b580      	push	{r7, lr}
   1393a:	b084      	sub	sp, #16
   1393c:	af00      	add	r7, sp, #0
   1393e:	6078      	str	r0, [r7, #4]
   13940:	460b      	mov	r3, r1
   13942:	70fb      	strb	r3, [r7, #3]
   13944:	4613      	mov	r3, r2
   13946:	70bb      	strb	r3, [r7, #2]
	
	isReady=false;
   13948:	687b      	ldr	r3, [r7, #4]
   1394a:	2200      	movs	r2, #0
   1394c:	701a      	strb	r2, [r3, #0]
	uint8_t array[2];
	array[0]=addr;
   1394e:	78fb      	ldrb	r3, [r7, #3]
   13950:	723b      	strb	r3, [r7, #8]
	array[1]=value;
   13952:	78bb      	ldrb	r3, [r7, #2]
   13954:	727b      	strb	r3, [r7, #9]
	uint32_t w= i2ca.Write(array,2);
   13956:	687b      	ldr	r3, [r7, #4]
   13958:	3304      	adds	r3, #4
   1395a:	f107 0108 	add.w	r1, r7, #8
   1395e:	2202      	movs	r2, #2
   13960:	4618      	mov	r0, r3
   13962:	4b09      	ldr	r3, [pc, #36]	; (13988 <_ZN13AT24MAC_Class10Write_byteEhh+0x50>)
   13964:	4798      	blx	r3
   13966:	4603      	mov	r3, r0
   13968:	60fb      	str	r3, [r7, #12]
	while(!i2ca.txReady);
   1396a:	687b      	ldr	r3, [r7, #4]
   1396c:	7d1b      	ldrb	r3, [r3, #20]
   1396e:	b2db      	uxtb	r3, r3
   13970:	f083 0301 	eor.w	r3, r3, #1
   13974:	b2db      	uxtb	r3, r3
   13976:	2b00      	cmp	r3, #0
   13978:	d000      	beq.n	1397c <_ZN13AT24MAC_Class10Write_byteEhh+0x44>
   1397a:	e7f6      	b.n	1396a <_ZN13AT24MAC_Class10Write_byteEhh+0x32>
	return	w;
   1397c:	68fb      	ldr	r3, [r7, #12]
}
   1397e:	4618      	mov	r0, r3
   13980:	3710      	adds	r7, #16
   13982:	46bd      	mov	sp, r7
   13984:	bd80      	pop	{r7, pc}
   13986:	bf00      	nop
   13988:	000163dd 	.word	0x000163dd

0001398c <_ZN13AT24MAC_Class12WriteAddressEPhhh>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint8_t addr, uint8_t size){
   1398c:	b580      	push	{r7, lr}
   1398e:	b086      	sub	sp, #24
   13990:	af00      	add	r7, sp, #0
   13992:	60f8      	str	r0, [r7, #12]
   13994:	60b9      	str	r1, [r7, #8]
   13996:	4611      	mov	r1, r2
   13998:	461a      	mov	r2, r3
   1399a:	460b      	mov	r3, r1
   1399c:	71fb      	strb	r3, [r7, #7]
   1399e:	4613      	mov	r3, r2
   139a0:	71bb      	strb	r3, [r7, #6]
	uint32_t w;
	for (int i = 0; i < size; i++)
   139a2:	2300      	movs	r3, #0
   139a4:	613b      	str	r3, [r7, #16]
   139a6:	79ba      	ldrb	r2, [r7, #6]
   139a8:	693b      	ldr	r3, [r7, #16]
   139aa:	429a      	cmp	r2, r3
   139ac:	dd2a      	ble.n	13a04 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x78>
	{
		while(!IsReady());
   139ae:	68f8      	ldr	r0, [r7, #12]
   139b0:	4b17      	ldr	r3, [pc, #92]	; (13a10 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x84>)
   139b2:	4798      	blx	r3
   139b4:	4603      	mov	r3, r0
   139b6:	f083 0301 	eor.w	r3, r3, #1
   139ba:	b2db      	uxtb	r3, r3
   139bc:	2b00      	cmp	r3, #0
   139be:	d000      	beq.n	139c2 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x36>
   139c0:	e7f5      	b.n	139ae <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x22>
		w=Write_byte(addr+i,*p);
   139c2:	693b      	ldr	r3, [r7, #16]
   139c4:	b2da      	uxtb	r2, r3
   139c6:	79fb      	ldrb	r3, [r7, #7]
   139c8:	4413      	add	r3, r2
   139ca:	b2d9      	uxtb	r1, r3
   139cc:	68bb      	ldr	r3, [r7, #8]
   139ce:	781b      	ldrb	r3, [r3, #0]
   139d0:	461a      	mov	r2, r3
   139d2:	68f8      	ldr	r0, [r7, #12]
   139d4:	4b0f      	ldr	r3, [pc, #60]	; (13a14 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x88>)
   139d6:	4798      	blx	r3
   139d8:	4603      	mov	r3, r0
   139da:	617b      	str	r3, [r7, #20]
		p++;
   139dc:	68bb      	ldr	r3, [r7, #8]
   139de:	3301      	adds	r3, #1
   139e0:	60bb      	str	r3, [r7, #8]
		delay_ms(2);
   139e2:	2002      	movs	r0, #2
   139e4:	4b0c      	ldr	r3, [pc, #48]	; (13a18 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x8c>)
   139e6:	4798      	blx	r3
		while(!AcknolledgePolling());
   139e8:	68f8      	ldr	r0, [r7, #12]
   139ea:	4b0c      	ldr	r3, [pc, #48]	; (13a1c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x90>)
   139ec:	4798      	blx	r3
   139ee:	4603      	mov	r3, r0
   139f0:	f083 0301 	eor.w	r3, r3, #1
   139f4:	b2db      	uxtb	r3, r3
   139f6:	2b00      	cmp	r3, #0
   139f8:	d000      	beq.n	139fc <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x70>
   139fa:	e7f5      	b.n	139e8 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x5c>
	for (int i = 0; i < size; i++)
   139fc:	693b      	ldr	r3, [r7, #16]
   139fe:	3301      	adds	r3, #1
   13a00:	613b      	str	r3, [r7, #16]
   13a02:	e7d0      	b.n	139a6 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x1a>
// 		array[i]=value;
// 		p++;
// 	}
// 	w= i2ca.Write(array,1+size);
// 	while(!i2ca.txReady);
	return	w;
   13a04:	697b      	ldr	r3, [r7, #20]
}
   13a06:	4618      	mov	r0, r3
   13a08:	3718      	adds	r7, #24
   13a0a:	46bd      	mov	sp, r7
   13a0c:	bd80      	pop	{r7, pc}
   13a0e:	bf00      	nop
   13a10:	00013cc1 	.word	0x00013cc1
   13a14:	00013939 	.word	0x00013939
   13a18:	00004e1d 	.word	0x00004e1d
   13a1c:	00013b91 	.word	0x00013b91

00013a20 <_ZN13AT24MAC_Class12WriteAddressEPhth>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint16_t addr, uint8_t size){
   13a20:	b590      	push	{r4, r7, lr}
   13a22:	b087      	sub	sp, #28
   13a24:	af00      	add	r7, sp, #0
   13a26:	60f8      	str	r0, [r7, #12]
   13a28:	60b9      	str	r1, [r7, #8]
   13a2a:	4611      	mov	r1, r2
   13a2c:	461a      	mov	r2, r3
   13a2e:	460b      	mov	r3, r1
   13a30:	80fb      	strh	r3, [r7, #6]
   13a32:	4613      	mov	r3, r2
   13a34:	717b      	strb	r3, [r7, #5]
	

	uint8_t add=(uint8_t)(0xff&addr);
   13a36:	88fb      	ldrh	r3, [r7, #6]
   13a38:	75fb      	strb	r3, [r7, #23]
	return	WriteAddress(p,add,size);
   13a3a:	797b      	ldrb	r3, [r7, #5]
   13a3c:	7dfa      	ldrb	r2, [r7, #23]
   13a3e:	68b9      	ldr	r1, [r7, #8]
   13a40:	68f8      	ldr	r0, [r7, #12]
   13a42:	4c03      	ldr	r4, [pc, #12]	; (13a50 <_ZN13AT24MAC_Class12WriteAddressEPhth+0x30>)
   13a44:	47a0      	blx	r4
   13a46:	4603      	mov	r3, r0
}
   13a48:	4618      	mov	r0, r3
   13a4a:	371c      	adds	r7, #28
   13a4c:	46bd      	mov	sp, r7
   13a4e:	bd90      	pop	{r4, r7, pc}
   13a50:	0001398d 	.word	0x0001398d

00013a54 <_ZN13AT24MAC_Class9Read_byteEh>:
	}
	//uint8_t cmd=(uint8_t)AT24MAC_WRITE_CMD;
	return i2ca.Write(frame,17);
}

uint8_t AT24MAC_Class::Read_byte(uint8_t addr){
   13a54:	b580      	push	{r7, lr}
   13a56:	b084      	sub	sp, #16
   13a58:	af00      	add	r7, sp, #0
   13a5a:	6078      	str	r0, [r7, #4]
   13a5c:	460b      	mov	r3, r1
   13a5e:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
   13a60:	687b      	ldr	r3, [r7, #4]
   13a62:	3304      	adds	r3, #4
   13a64:	1cf9      	adds	r1, r7, #3
   13a66:	2201      	movs	r2, #1
   13a68:	4618      	mov	r0, r3
   13a6a:	4b10      	ldr	r3, [pc, #64]	; (13aac <_ZN13AT24MAC_Class9Read_byteEh+0x58>)
   13a6c:	4798      	blx	r3
	while(!i2ca.txReady);
   13a6e:	687b      	ldr	r3, [r7, #4]
   13a70:	7d1b      	ldrb	r3, [r3, #20]
   13a72:	b2db      	uxtb	r3, r3
   13a74:	f083 0301 	eor.w	r3, r3, #1
   13a78:	b2db      	uxtb	r3, r3
   13a7a:	2b00      	cmp	r3, #0
   13a7c:	d000      	beq.n	13a80 <_ZN13AT24MAC_Class9Read_byteEh+0x2c>
   13a7e:	e7f6      	b.n	13a6e <_ZN13AT24MAC_Class9Read_byteEh+0x1a>
	i2ca.Read(&value,1);
   13a80:	687b      	ldr	r3, [r7, #4]
   13a82:	3304      	adds	r3, #4
   13a84:	f107 010f 	add.w	r1, r7, #15
   13a88:	2201      	movs	r2, #1
   13a8a:	4618      	mov	r0, r3
   13a8c:	4b08      	ldr	r3, [pc, #32]	; (13ab0 <_ZN13AT24MAC_Class9Read_byteEh+0x5c>)
   13a8e:	4798      	blx	r3
	while(!i2ca.rxReady);
   13a90:	687b      	ldr	r3, [r7, #4]
   13a92:	7d5b      	ldrb	r3, [r3, #21]
   13a94:	b2db      	uxtb	r3, r3
   13a96:	f083 0301 	eor.w	r3, r3, #1
   13a9a:	b2db      	uxtb	r3, r3
   13a9c:	2b00      	cmp	r3, #0
   13a9e:	d000      	beq.n	13aa2 <_ZN13AT24MAC_Class9Read_byteEh+0x4e>
   13aa0:	e7f6      	b.n	13a90 <_ZN13AT24MAC_Class9Read_byteEh+0x3c>
	return value;
   13aa2:	7bfb      	ldrb	r3, [r7, #15]
}
   13aa4:	4618      	mov	r0, r3
   13aa6:	3710      	adds	r7, #16
   13aa8:	46bd      	mov	sp, r7
   13aaa:	bd80      	pop	{r7, pc}
   13aac:	000163dd 	.word	0x000163dd
   13ab0:	00016421 	.word	0x00016421

00013ab4 <_ZN13AT24MAC_Class11ReadAddressEPhhh>:

uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint8_t addr, uint8_t size){
   13ab4:	b580      	push	{r7, lr}
   13ab6:	b086      	sub	sp, #24
   13ab8:	af00      	add	r7, sp, #0
   13aba:	60f8      	str	r0, [r7, #12]
   13abc:	60b9      	str	r1, [r7, #8]
   13abe:	4611      	mov	r1, r2
   13ac0:	461a      	mov	r2, r3
   13ac2:	460b      	mov	r3, r1
   13ac4:	71fb      	strb	r3, [r7, #7]
   13ac6:	4613      	mov	r3, r2
   13ac8:	71bb      	strb	r3, [r7, #6]
	
	uint32_t r;
	uint8_t	value;
	i2ca.Write(&addr,1);
   13aca:	68fb      	ldr	r3, [r7, #12]
   13acc:	3304      	adds	r3, #4
   13ace:	1df9      	adds	r1, r7, #7
   13ad0:	2201      	movs	r2, #1
   13ad2:	4618      	mov	r0, r3
   13ad4:	4b11      	ldr	r3, [pc, #68]	; (13b1c <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x68>)
   13ad6:	4798      	blx	r3
	while(!i2ca.txReady);
   13ad8:	68fb      	ldr	r3, [r7, #12]
   13ada:	7d1b      	ldrb	r3, [r3, #20]
   13adc:	b2db      	uxtb	r3, r3
   13ade:	f083 0301 	eor.w	r3, r3, #1
   13ae2:	b2db      	uxtb	r3, r3
   13ae4:	2b00      	cmp	r3, #0
   13ae6:	d000      	beq.n	13aea <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x36>
   13ae8:	e7f6      	b.n	13ad8 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x24>
	r= i2ca.Read(p,size);
   13aea:	68fb      	ldr	r3, [r7, #12]
   13aec:	3304      	adds	r3, #4
   13aee:	79ba      	ldrb	r2, [r7, #6]
   13af0:	b292      	uxth	r2, r2
   13af2:	68b9      	ldr	r1, [r7, #8]
   13af4:	4618      	mov	r0, r3
   13af6:	4b0a      	ldr	r3, [pc, #40]	; (13b20 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x6c>)
   13af8:	4798      	blx	r3
   13afa:	4603      	mov	r3, r0
   13afc:	617b      	str	r3, [r7, #20]
	while(!i2ca.rxReady);
   13afe:	68fb      	ldr	r3, [r7, #12]
   13b00:	7d5b      	ldrb	r3, [r3, #21]
   13b02:	b2db      	uxtb	r3, r3
   13b04:	f083 0301 	eor.w	r3, r3, #1
   13b08:	b2db      	uxtb	r3, r3
   13b0a:	2b00      	cmp	r3, #0
   13b0c:	d000      	beq.n	13b10 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x5c>
   13b0e:	e7f6      	b.n	13afe <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x4a>
			localAddress+=localSize;
		}
	}
	*/
	
	return r;
   13b10:	697b      	ldr	r3, [r7, #20]
}
   13b12:	4618      	mov	r0, r3
   13b14:	3718      	adds	r7, #24
   13b16:	46bd      	mov	sp, r7
   13b18:	bd80      	pop	{r7, pc}
   13b1a:	bf00      	nop
   13b1c:	000163dd 	.word	0x000163dd
   13b20:	00016421 	.word	0x00016421

00013b24 <_ZN13AT24MAC_Class11ReadAddressEPhth>:
uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint16_t addr, uint8_t size){
   13b24:	b590      	push	{r4, r7, lr}
   13b26:	b087      	sub	sp, #28
   13b28:	af00      	add	r7, sp, #0
   13b2a:	60f8      	str	r0, [r7, #12]
   13b2c:	60b9      	str	r1, [r7, #8]
   13b2e:	4611      	mov	r1, r2
   13b30:	461a      	mov	r2, r3
   13b32:	460b      	mov	r3, r1
   13b34:	80fb      	strh	r3, [r7, #6]
   13b36:	4613      	mov	r3, r2
   13b38:	717b      	strb	r3, [r7, #5]
	uint8_t add=(uint8_t)(0xff&addr);
   13b3a:	88fb      	ldrh	r3, [r7, #6]
   13b3c:	75fb      	strb	r3, [r7, #23]
	
	return ReadAddress(p,add,size);
   13b3e:	797b      	ldrb	r3, [r7, #5]
   13b40:	7dfa      	ldrb	r2, [r7, #23]
   13b42:	68b9      	ldr	r1, [r7, #8]
   13b44:	68f8      	ldr	r0, [r7, #12]
   13b46:	4c03      	ldr	r4, [pc, #12]	; (13b54 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x30>)
   13b48:	47a0      	blx	r4
   13b4a:	4603      	mov	r3, r0
}
   13b4c:	4618      	mov	r0, r3
   13b4e:	371c      	adds	r7, #28
   13b50:	46bd      	mov	sp, r7
   13b52:	bd90      	pop	{r4, r7, pc}
   13b54:	00013ab5 	.word	0x00013ab5

00013b58 <_ZN13AT24MAC_Class14GetAcknowledgeEv>:
bool	AT24MAC_Class::GetAcknowledge(void){
   13b58:	b580      	push	{r7, lr}
   13b5a:	b082      	sub	sp, #8
   13b5c:	af00      	add	r7, sp, #0
   13b5e:	6078      	str	r0, [r7, #4]
	byte=Read_byte(0);
   13b60:	2100      	movs	r1, #0
   13b62:	6878      	ldr	r0, [r7, #4]
   13b64:	4b09      	ldr	r3, [pc, #36]	; (13b8c <_ZN13AT24MAC_Class14GetAcknowledgeEv+0x34>)
   13b66:	4798      	blx	r3
   13b68:	4603      	mov	r3, r0
   13b6a:	461a      	mov	r2, r3
   13b6c:	687b      	ldr	r3, [r7, #4]
   13b6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	return	byte>0;
   13b72:	687b      	ldr	r3, [r7, #4]
   13b74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   13b78:	2b00      	cmp	r3, #0
   13b7a:	bfcc      	ite	gt
   13b7c:	2301      	movgt	r3, #1
   13b7e:	2300      	movle	r3, #0
   13b80:	b2db      	uxtb	r3, r3
}
   13b82:	4618      	mov	r0, r3
   13b84:	3708      	adds	r7, #8
   13b86:	46bd      	mov	sp, r7
   13b88:	bd80      	pop	{r7, pc}
   13b8a:	bf00      	nop
   13b8c:	00013a55 	.word	0x00013a55

00013b90 <_ZN13AT24MAC_Class18AcknolledgePollingEv>:
bool AT24MAC_Class::AcknolledgePolling(void){
   13b90:	b580      	push	{r7, lr}
   13b92:	b082      	sub	sp, #8
   13b94:	af00      	add	r7, sp, #0
   13b96:	6078      	str	r0, [r7, #4]
	do 
	{
		GetAcknowledge();
   13b98:	6878      	ldr	r0, [r7, #4]
   13b9a:	4b09      	ldr	r3, [pc, #36]	; (13bc0 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x30>)
   13b9c:	4798      	blx	r3
	} while (!IsReady());
   13b9e:	6878      	ldr	r0, [r7, #4]
   13ba0:	4b08      	ldr	r3, [pc, #32]	; (13bc4 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x34>)
   13ba2:	4798      	blx	r3
   13ba4:	4603      	mov	r3, r0
	do 
   13ba6:	f083 0301 	eor.w	r3, r3, #1
   13baa:	b2db      	uxtb	r3, r3
   13bac:	2b00      	cmp	r3, #0
   13bae:	d000      	beq.n	13bb2 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x22>
   13bb0:	e7f2      	b.n	13b98 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x8>
	return isReady;
   13bb2:	687b      	ldr	r3, [r7, #4]
   13bb4:	781b      	ldrb	r3, [r3, #0]
   13bb6:	b2db      	uxtb	r3, r3
}
   13bb8:	4618      	mov	r0, r3
   13bba:	3708      	adds	r7, #8
   13bbc:	46bd      	mov	sp, r7
   13bbe:	bd80      	pop	{r7, pc}
   13bc0:	00013b59 	.word	0x00013b59
   13bc4:	00013cc1 	.word	0x00013cc1

00013bc8 <_ZN13AT24MAC_Class8SelfTestEv>:

bool	AT24MAC_Class::SelfTest(void){
   13bc8:	b590      	push	{r4, r7, lr}
   13bca:	b085      	sub	sp, #20
   13bcc:	af00      	add	r7, sp, #0
   13bce:	6078      	str	r0, [r7, #4]
	currentAddress=AT24MAC_MEMORY_SIZE-AT24MAC_BUFFER_SIZE*2;
   13bd0:	687b      	ldr	r3, [r7, #4]
   13bd2:	22e0      	movs	r2, #224	; 0xe0
   13bd4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   13bd8:	2300      	movs	r3, #0
   13bda:	60fb      	str	r3, [r7, #12]
   13bdc:	68fb      	ldr	r3, [r7, #12]
   13bde:	2b0f      	cmp	r3, #15
   13be0:	dc18      	bgt.n	13c14 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
		tx_buffer[i] = (uint8_t)rand();
   13be2:	4b33      	ldr	r3, [pc, #204]	; (13cb0 <_ZN13AT24MAC_Class8SelfTestEv+0xe8>)
   13be4:	4798      	blx	r3
   13be6:	4603      	mov	r3, r0
   13be8:	b2d9      	uxtb	r1, r3
   13bea:	687a      	ldr	r2, [r7, #4]
   13bec:	68fb      	ldr	r3, [r7, #12]
   13bee:	4413      	add	r3, r2
   13bf0:	333a      	adds	r3, #58	; 0x3a
   13bf2:	460a      	mov	r2, r1
   13bf4:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = (uint8_t)(AT24MAC_BUFFER_SIZE-i);
   13bf6:	68fb      	ldr	r3, [r7, #12]
   13bf8:	b2db      	uxtb	r3, r3
   13bfa:	f1c3 0310 	rsb	r3, r3, #16
   13bfe:	b2d9      	uxtb	r1, r3
   13c00:	687a      	ldr	r2, [r7, #4]
   13c02:	68fb      	ldr	r3, [r7, #12]
   13c04:	4413      	add	r3, r2
   13c06:	334a      	adds	r3, #74	; 0x4a
   13c08:	460a      	mov	r2, r1
   13c0a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   13c0c:	68fb      	ldr	r3, [r7, #12]
   13c0e:	3301      	adds	r3, #1
   13c10:	60fb      	str	r3, [r7, #12]
   13c12:	e7e3      	b.n	13bdc <_ZN13AT24MAC_Class8SelfTestEv+0x14>
	}

	while(!IsReady());
   13c14:	6878      	ldr	r0, [r7, #4]
   13c16:	4b27      	ldr	r3, [pc, #156]	; (13cb4 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   13c18:	4798      	blx	r3
   13c1a:	4603      	mov	r3, r0
   13c1c:	f083 0301 	eor.w	r3, r3, #1
   13c20:	b2db      	uxtb	r3, r3
   13c22:	2b00      	cmp	r3, #0
   13c24:	d000      	beq.n	13c28 <_ZN13AT24MAC_Class8SelfTestEv+0x60>
   13c26:	e7f5      	b.n	13c14 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
	WriteAddress(tx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   13c28:	687b      	ldr	r3, [r7, #4]
   13c2a:	f103 013a 	add.w	r1, r3, #58	; 0x3a
   13c2e:	687b      	ldr	r3, [r7, #4]
   13c30:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
   13c34:	2310      	movs	r3, #16
   13c36:	6878      	ldr	r0, [r7, #4]
   13c38:	4c1f      	ldr	r4, [pc, #124]	; (13cb8 <_ZN13AT24MAC_Class8SelfTestEv+0xf0>)
   13c3a:	47a0      	blx	r4
	while(!IsReady());
   13c3c:	6878      	ldr	r0, [r7, #4]
   13c3e:	4b1d      	ldr	r3, [pc, #116]	; (13cb4 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   13c40:	4798      	blx	r3
   13c42:	4603      	mov	r3, r0
   13c44:	f083 0301 	eor.w	r3, r3, #1
   13c48:	b2db      	uxtb	r3, r3
   13c4a:	2b00      	cmp	r3, #0
   13c4c:	d000      	beq.n	13c50 <_ZN13AT24MAC_Class8SelfTestEv+0x88>
   13c4e:	e7f5      	b.n	13c3c <_ZN13AT24MAC_Class8SelfTestEv+0x74>
	ReadAddress(rx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   13c50:	687b      	ldr	r3, [r7, #4]
   13c52:	f103 014a 	add.w	r1, r3, #74	; 0x4a
   13c56:	687b      	ldr	r3, [r7, #4]
   13c58:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
   13c5c:	2310      	movs	r3, #16
   13c5e:	6878      	ldr	r0, [r7, #4]
   13c60:	4c16      	ldr	r4, [pc, #88]	; (13cbc <_ZN13AT24MAC_Class8SelfTestEv+0xf4>)
   13c62:	47a0      	blx	r4
	isOK = true;
   13c64:	687b      	ldr	r3, [r7, #4]
   13c66:	2201      	movs	r2, #1
   13c68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   13c6c:	2300      	movs	r3, #0
   13c6e:	60bb      	str	r3, [r7, #8]
   13c70:	68bb      	ldr	r3, [r7, #8]
   13c72:	2b0f      	cmp	r3, #15
   13c74:	dc14      	bgt.n	13ca0 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
		if (tx_buffer[i] != rx_buffer[i]) {
   13c76:	687a      	ldr	r2, [r7, #4]
   13c78:	68bb      	ldr	r3, [r7, #8]
   13c7a:	4413      	add	r3, r2
   13c7c:	333a      	adds	r3, #58	; 0x3a
   13c7e:	781a      	ldrb	r2, [r3, #0]
   13c80:	6879      	ldr	r1, [r7, #4]
   13c82:	68bb      	ldr	r3, [r7, #8]
   13c84:	440b      	add	r3, r1
   13c86:	334a      	adds	r3, #74	; 0x4a
   13c88:	781b      	ldrb	r3, [r3, #0]
   13c8a:	429a      	cmp	r2, r3
   13c8c:	d004      	beq.n	13c98 <_ZN13AT24MAC_Class8SelfTestEv+0xd0>
			isOK = false;
   13c8e:	687b      	ldr	r3, [r7, #4]
   13c90:	2200      	movs	r2, #0
   13c92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
// 			usb.print("EEPROM verification failed. Address: ");
// 			usb.print(addr,HEX);
// 			usb<<" bit :"<<i<<NEWLINE;
			//flashAddress=0;
			
			break;
   13c96:	e003      	b.n	13ca0 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   13c98:	68bb      	ldr	r3, [r7, #8]
   13c9a:	3301      	adds	r3, #1
   13c9c:	60bb      	str	r3, [r7, #8]
   13c9e:	e7e7      	b.n	13c70 <_ZN13AT24MAC_Class8SelfTestEv+0xa8>
		}
		
	}
	return isOK;
   13ca0:	687b      	ldr	r3, [r7, #4]
   13ca2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
}
   13ca6:	4618      	mov	r0, r3
   13ca8:	3714      	adds	r7, #20
   13caa:	46bd      	mov	sp, r7
   13cac:	bd90      	pop	{r4, r7, pc}
   13cae:	bf00      	nop
   13cb0:	00018d29 	.word	0x00018d29
   13cb4:	00013cc1 	.word	0x00013cc1
   13cb8:	0001398d 	.word	0x0001398d
   13cbc:	00013ab5 	.word	0x00013ab5

00013cc0 <_ZN13AT24MAC_Class7IsReadyEv>:


bool AT24MAC_Class::IsReady(void){
   13cc0:	b480      	push	{r7}
   13cc2:	b083      	sub	sp, #12
   13cc4:	af00      	add	r7, sp, #0
   13cc6:	6078      	str	r0, [r7, #4]

	if (i2ca.txReady && i2ca.rxReady)
   13cc8:	687b      	ldr	r3, [r7, #4]
   13cca:	7d1b      	ldrb	r3, [r3, #20]
   13ccc:	b2db      	uxtb	r3, r3
   13cce:	2b00      	cmp	r3, #0
   13cd0:	d006      	beq.n	13ce0 <_ZN13AT24MAC_Class7IsReadyEv+0x20>
   13cd2:	687b      	ldr	r3, [r7, #4]
   13cd4:	7d5b      	ldrb	r3, [r3, #21]
   13cd6:	b2db      	uxtb	r3, r3
   13cd8:	2b00      	cmp	r3, #0
   13cda:	d001      	beq.n	13ce0 <_ZN13AT24MAC_Class7IsReadyEv+0x20>
   13cdc:	2301      	movs	r3, #1
   13cde:	e000      	b.n	13ce2 <_ZN13AT24MAC_Class7IsReadyEv+0x22>
   13ce0:	2300      	movs	r3, #0
   13ce2:	2b00      	cmp	r3, #0
   13ce4:	d003      	beq.n	13cee <_ZN13AT24MAC_Class7IsReadyEv+0x2e>
	{
		isReady=true;
   13ce6:	687b      	ldr	r3, [r7, #4]
   13ce8:	2201      	movs	r2, #1
   13cea:	701a      	strb	r2, [r3, #0]
   13cec:	e002      	b.n	13cf4 <_ZN13AT24MAC_Class7IsReadyEv+0x34>
	}
	else
	{
		isReady=false;
   13cee:	687b      	ldr	r3, [r7, #4]
   13cf0:	2200      	movs	r2, #0
   13cf2:	701a      	strb	r2, [r3, #0]
	}
	return isReady;	
   13cf4:	687b      	ldr	r3, [r7, #4]
   13cf6:	781b      	ldrb	r3, [r3, #0]
   13cf8:	b2db      	uxtb	r3, r3
}
   13cfa:	4618      	mov	r0, r3
   13cfc:	370c      	adds	r7, #12
   13cfe:	46bd      	mov	sp, r7
   13d00:	bc80      	pop	{r7}
   13d02:	4770      	bx	lr

00013d04 <_Z41__static_initialization_and_destruction_0ii>:

   13d04:	b580      	push	{r7, lr}
   13d06:	b082      	sub	sp, #8
   13d08:	af00      	add	r7, sp, #0
   13d0a:	6078      	str	r0, [r7, #4]
   13d0c:	6039      	str	r1, [r7, #0]
   13d0e:	687b      	ldr	r3, [r7, #4]
   13d10:	2b01      	cmp	r3, #1
   13d12:	d10d      	bne.n	13d30 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13d14:	683b      	ldr	r3, [r7, #0]
   13d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13d1a:	4293      	cmp	r3, r2
   13d1c:	d108      	bne.n	13d30 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13d1e:	4906      	ldr	r1, [pc, #24]	; (13d38 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13d20:	4806      	ldr	r0, [pc, #24]	; (13d3c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13d22:	4b07      	ldr	r3, [pc, #28]	; (13d40 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13d24:	4798      	blx	r3
   13d26:	4a07      	ldr	r2, [pc, #28]	; (13d44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13d28:	4907      	ldr	r1, [pc, #28]	; (13d48 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13d2a:	4804      	ldr	r0, [pc, #16]	; (13d3c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13d2c:	4b07      	ldr	r3, [pc, #28]	; (13d4c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   13d2e:	4798      	blx	r3
   13d30:	bf00      	nop
   13d32:	3708      	adds	r7, #8
   13d34:	46bd      	mov	sp, r7
   13d36:	bd80      	pop	{r7, pc}
   13d38:	2000579c 	.word	0x2000579c
   13d3c:	20004e70 	.word	0x20004e70
   13d40:	00013869 	.word	0x00013869
   13d44:	20000000 	.word	0x20000000
   13d48:	0001389d 	.word	0x0001389d
   13d4c:	000167bd 	.word	0x000167bd

00013d50 <_GLOBAL__sub_I_ptrAT24MACClass>:
   13d50:	b580      	push	{r7, lr}
   13d52:	af00      	add	r7, sp, #0
   13d54:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13d58:	2001      	movs	r0, #1
   13d5a:	4b01      	ldr	r3, [pc, #4]	; (13d60 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
   13d5c:	4798      	blx	r3
   13d5e:	bd80      	pop	{r7, pc}
   13d60:	00013d05 	.word	0x00013d05

00013d64 <hri_port_set_DIR_reg>:
{
   13d64:	b480      	push	{r7}
   13d66:	b085      	sub	sp, #20
   13d68:	af00      	add	r7, sp, #0
   13d6a:	60f8      	str	r0, [r7, #12]
   13d6c:	460b      	mov	r3, r1
   13d6e:	607a      	str	r2, [r7, #4]
   13d70:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   13d72:	7afb      	ldrb	r3, [r7, #11]
   13d74:	68fa      	ldr	r2, [r7, #12]
   13d76:	01db      	lsls	r3, r3, #7
   13d78:	4413      	add	r3, r2
   13d7a:	3308      	adds	r3, #8
   13d7c:	687a      	ldr	r2, [r7, #4]
   13d7e:	601a      	str	r2, [r3, #0]
}
   13d80:	bf00      	nop
   13d82:	3714      	adds	r7, #20
   13d84:	46bd      	mov	sp, r7
   13d86:	bc80      	pop	{r7}
   13d88:	4770      	bx	lr

00013d8a <hri_port_clear_DIR_reg>:
{
   13d8a:	b480      	push	{r7}
   13d8c:	b085      	sub	sp, #20
   13d8e:	af00      	add	r7, sp, #0
   13d90:	60f8      	str	r0, [r7, #12]
   13d92:	460b      	mov	r3, r1
   13d94:	607a      	str	r2, [r7, #4]
   13d96:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   13d98:	7afb      	ldrb	r3, [r7, #11]
   13d9a:	68fa      	ldr	r2, [r7, #12]
   13d9c:	01db      	lsls	r3, r3, #7
   13d9e:	4413      	add	r3, r2
   13da0:	3304      	adds	r3, #4
   13da2:	687a      	ldr	r2, [r7, #4]
   13da4:	601a      	str	r2, [r3, #0]
}
   13da6:	bf00      	nop
   13da8:	3714      	adds	r7, #20
   13daa:	46bd      	mov	sp, r7
   13dac:	bc80      	pop	{r7}
   13dae:	4770      	bx	lr

00013db0 <hri_port_set_OUT_reg>:
{
   13db0:	b480      	push	{r7}
   13db2:	b085      	sub	sp, #20
   13db4:	af00      	add	r7, sp, #0
   13db6:	60f8      	str	r0, [r7, #12]
   13db8:	460b      	mov	r3, r1
   13dba:	607a      	str	r2, [r7, #4]
   13dbc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   13dbe:	7afb      	ldrb	r3, [r7, #11]
   13dc0:	68fa      	ldr	r2, [r7, #12]
   13dc2:	01db      	lsls	r3, r3, #7
   13dc4:	4413      	add	r3, r2
   13dc6:	3318      	adds	r3, #24
   13dc8:	687a      	ldr	r2, [r7, #4]
   13dca:	601a      	str	r2, [r3, #0]
}
   13dcc:	bf00      	nop
   13dce:	3714      	adds	r7, #20
   13dd0:	46bd      	mov	sp, r7
   13dd2:	bc80      	pop	{r7}
   13dd4:	4770      	bx	lr

00013dd6 <hri_port_clear_OUT_reg>:
{
   13dd6:	b480      	push	{r7}
   13dd8:	b085      	sub	sp, #20
   13dda:	af00      	add	r7, sp, #0
   13ddc:	60f8      	str	r0, [r7, #12]
   13dde:	460b      	mov	r3, r1
   13de0:	607a      	str	r2, [r7, #4]
   13de2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   13de4:	7afb      	ldrb	r3, [r7, #11]
   13de6:	68fa      	ldr	r2, [r7, #12]
   13de8:	01db      	lsls	r3, r3, #7
   13dea:	4413      	add	r3, r2
   13dec:	3314      	adds	r3, #20
   13dee:	687a      	ldr	r2, [r7, #4]
   13df0:	601a      	str	r2, [r3, #0]
}
   13df2:	bf00      	nop
   13df4:	3714      	adds	r7, #20
   13df6:	46bd      	mov	sp, r7
   13df8:	bc80      	pop	{r7}
   13dfa:	4770      	bx	lr

00013dfc <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   13dfc:	b480      	push	{r7}
   13dfe:	b085      	sub	sp, #20
   13e00:	af00      	add	r7, sp, #0
   13e02:	6078      	str	r0, [r7, #4]
   13e04:	4608      	mov	r0, r1
   13e06:	4611      	mov	r1, r2
   13e08:	461a      	mov	r2, r3
   13e0a:	4603      	mov	r3, r0
   13e0c:	70fb      	strb	r3, [r7, #3]
   13e0e:	460b      	mov	r3, r1
   13e10:	70bb      	strb	r3, [r7, #2]
   13e12:	4613      	mov	r3, r2
   13e14:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   13e16:	78fa      	ldrb	r2, [r7, #3]
   13e18:	78bb      	ldrb	r3, [r7, #2]
   13e1a:	6879      	ldr	r1, [r7, #4]
   13e1c:	01d2      	lsls	r2, r2, #7
   13e1e:	440a      	add	r2, r1
   13e20:	4413      	add	r3, r2
   13e22:	3330      	adds	r3, #48	; 0x30
   13e24:	781b      	ldrb	r3, [r3, #0]
   13e26:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   13e28:	7bfb      	ldrb	r3, [r7, #15]
   13e2a:	f023 030f 	bic.w	r3, r3, #15
   13e2e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   13e30:	787b      	ldrb	r3, [r7, #1]
   13e32:	f003 030f 	and.w	r3, r3, #15
   13e36:	b2da      	uxtb	r2, r3
   13e38:	7bfb      	ldrb	r3, [r7, #15]
   13e3a:	4313      	orrs	r3, r2
   13e3c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   13e3e:	78fa      	ldrb	r2, [r7, #3]
   13e40:	78bb      	ldrb	r3, [r7, #2]
   13e42:	6879      	ldr	r1, [r7, #4]
   13e44:	01d2      	lsls	r2, r2, #7
   13e46:	440a      	add	r2, r1
   13e48:	4413      	add	r3, r2
   13e4a:	3330      	adds	r3, #48	; 0x30
   13e4c:	7bfa      	ldrb	r2, [r7, #15]
   13e4e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   13e50:	bf00      	nop
   13e52:	3714      	adds	r7, #20
   13e54:	46bd      	mov	sp, r7
   13e56:	bc80      	pop	{r7}
   13e58:	4770      	bx	lr

00013e5a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   13e5a:	b480      	push	{r7}
   13e5c:	b085      	sub	sp, #20
   13e5e:	af00      	add	r7, sp, #0
   13e60:	6078      	str	r0, [r7, #4]
   13e62:	4608      	mov	r0, r1
   13e64:	4611      	mov	r1, r2
   13e66:	461a      	mov	r2, r3
   13e68:	4603      	mov	r3, r0
   13e6a:	70fb      	strb	r3, [r7, #3]
   13e6c:	460b      	mov	r3, r1
   13e6e:	70bb      	strb	r3, [r7, #2]
   13e70:	4613      	mov	r3, r2
   13e72:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   13e74:	78fa      	ldrb	r2, [r7, #3]
   13e76:	78bb      	ldrb	r3, [r7, #2]
   13e78:	6879      	ldr	r1, [r7, #4]
   13e7a:	01d2      	lsls	r2, r2, #7
   13e7c:	440a      	add	r2, r1
   13e7e:	4413      	add	r3, r2
   13e80:	3330      	adds	r3, #48	; 0x30
   13e82:	781b      	ldrb	r3, [r3, #0]
   13e84:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   13e86:	7bfb      	ldrb	r3, [r7, #15]
   13e88:	f003 030f 	and.w	r3, r3, #15
   13e8c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   13e8e:	787b      	ldrb	r3, [r7, #1]
   13e90:	011b      	lsls	r3, r3, #4
   13e92:	b2da      	uxtb	r2, r3
   13e94:	7bfb      	ldrb	r3, [r7, #15]
   13e96:	4313      	orrs	r3, r2
   13e98:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   13e9a:	78fa      	ldrb	r2, [r7, #3]
   13e9c:	78bb      	ldrb	r3, [r7, #2]
   13e9e:	6879      	ldr	r1, [r7, #4]
   13ea0:	01d2      	lsls	r2, r2, #7
   13ea2:	440a      	add	r2, r1
   13ea4:	4413      	add	r3, r2
   13ea6:	3330      	adds	r3, #48	; 0x30
   13ea8:	7bfa      	ldrb	r2, [r7, #15]
   13eaa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   13eac:	bf00      	nop
   13eae:	3714      	adds	r7, #20
   13eb0:	46bd      	mov	sp, r7
   13eb2:	bc80      	pop	{r7}
   13eb4:	4770      	bx	lr

00013eb6 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   13eb6:	b480      	push	{r7}
   13eb8:	b085      	sub	sp, #20
   13eba:	af00      	add	r7, sp, #0
   13ebc:	6078      	str	r0, [r7, #4]
   13ebe:	4608      	mov	r0, r1
   13ec0:	4611      	mov	r1, r2
   13ec2:	461a      	mov	r2, r3
   13ec4:	4603      	mov	r3, r0
   13ec6:	70fb      	strb	r3, [r7, #3]
   13ec8:	460b      	mov	r3, r1
   13eca:	70bb      	strb	r3, [r7, #2]
   13ecc:	4613      	mov	r3, r2
   13ece:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   13ed0:	78fa      	ldrb	r2, [r7, #3]
   13ed2:	78bb      	ldrb	r3, [r7, #2]
   13ed4:	6879      	ldr	r1, [r7, #4]
   13ed6:	01d2      	lsls	r2, r2, #7
   13ed8:	440a      	add	r2, r1
   13eda:	4413      	add	r3, r2
   13edc:	3340      	adds	r3, #64	; 0x40
   13ede:	781b      	ldrb	r3, [r3, #0]
   13ee0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   13ee2:	7bfb      	ldrb	r3, [r7, #15]
   13ee4:	f023 0301 	bic.w	r3, r3, #1
   13ee8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   13eea:	787a      	ldrb	r2, [r7, #1]
   13eec:	7bfb      	ldrb	r3, [r7, #15]
   13eee:	4313      	orrs	r3, r2
   13ef0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   13ef2:	78fa      	ldrb	r2, [r7, #3]
   13ef4:	78bb      	ldrb	r3, [r7, #2]
   13ef6:	6879      	ldr	r1, [r7, #4]
   13ef8:	01d2      	lsls	r2, r2, #7
   13efa:	440a      	add	r2, r1
   13efc:	4413      	add	r3, r2
   13efe:	3340      	adds	r3, #64	; 0x40
   13f00:	7bfa      	ldrb	r2, [r7, #15]
   13f02:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   13f04:	bf00      	nop
   13f06:	3714      	adds	r7, #20
   13f08:	46bd      	mov	sp, r7
   13f0a:	bc80      	pop	{r7}
   13f0c:	4770      	bx	lr

00013f0e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   13f0e:	b480      	push	{r7}
   13f10:	b085      	sub	sp, #20
   13f12:	af00      	add	r7, sp, #0
   13f14:	60f8      	str	r0, [r7, #12]
   13f16:	460b      	mov	r3, r1
   13f18:	607a      	str	r2, [r7, #4]
   13f1a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   13f1c:	7afb      	ldrb	r3, [r7, #11]
   13f1e:	68fa      	ldr	r2, [r7, #12]
   13f20:	01db      	lsls	r3, r3, #7
   13f22:	4413      	add	r3, r2
   13f24:	3328      	adds	r3, #40	; 0x28
   13f26:	687a      	ldr	r2, [r7, #4]
   13f28:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   13f2a:	bf00      	nop
   13f2c:	3714      	adds	r7, #20
   13f2e:	46bd      	mov	sp, r7
   13f30:	bc80      	pop	{r7}
   13f32:	4770      	bx	lr

00013f34 <_gpio_set_direction>:
{
   13f34:	b580      	push	{r7, lr}
   13f36:	b082      	sub	sp, #8
   13f38:	af00      	add	r7, sp, #0
   13f3a:	4603      	mov	r3, r0
   13f3c:	6039      	str	r1, [r7, #0]
   13f3e:	71fb      	strb	r3, [r7, #7]
   13f40:	4613      	mov	r3, r2
   13f42:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   13f44:	79bb      	ldrb	r3, [r7, #6]
   13f46:	2b01      	cmp	r3, #1
   13f48:	d01c      	beq.n	13f84 <_gpio_set_direction+0x50>
   13f4a:	2b02      	cmp	r3, #2
   13f4c:	d037      	beq.n	13fbe <_gpio_set_direction+0x8a>
   13f4e:	2b00      	cmp	r3, #0
   13f50:	d14e      	bne.n	13ff0 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   13f52:	79fb      	ldrb	r3, [r7, #7]
   13f54:	683a      	ldr	r2, [r7, #0]
   13f56:	4619      	mov	r1, r3
   13f58:	482a      	ldr	r0, [pc, #168]	; (14004 <_gpio_set_direction+0xd0>)
   13f5a:	4b2b      	ldr	r3, [pc, #172]	; (14008 <_gpio_set_direction+0xd4>)
   13f5c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   13f5e:	683b      	ldr	r3, [r7, #0]
   13f60:	b29b      	uxth	r3, r3
   13f62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   13f66:	79fb      	ldrb	r3, [r7, #7]
   13f68:	4619      	mov	r1, r3
   13f6a:	4826      	ldr	r0, [pc, #152]	; (14004 <_gpio_set_direction+0xd0>)
   13f6c:	4b27      	ldr	r3, [pc, #156]	; (1400c <_gpio_set_direction+0xd8>)
   13f6e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   13f70:	683b      	ldr	r3, [r7, #0]
   13f72:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   13f74:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   13f78:	79fb      	ldrb	r3, [r7, #7]
   13f7a:	4619      	mov	r1, r3
   13f7c:	4821      	ldr	r0, [pc, #132]	; (14004 <_gpio_set_direction+0xd0>)
   13f7e:	4b23      	ldr	r3, [pc, #140]	; (1400c <_gpio_set_direction+0xd8>)
   13f80:	4798      	blx	r3
		break;
   13f82:	e03a      	b.n	13ffa <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   13f84:	79fb      	ldrb	r3, [r7, #7]
   13f86:	683a      	ldr	r2, [r7, #0]
   13f88:	4619      	mov	r1, r3
   13f8a:	481e      	ldr	r0, [pc, #120]	; (14004 <_gpio_set_direction+0xd0>)
   13f8c:	4b1e      	ldr	r3, [pc, #120]	; (14008 <_gpio_set_direction+0xd4>)
   13f8e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   13f90:	683b      	ldr	r3, [r7, #0]
   13f92:	b29b      	uxth	r3, r3
   13f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   13f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13f9c:	79f9      	ldrb	r1, [r7, #7]
   13f9e:	461a      	mov	r2, r3
   13fa0:	4818      	ldr	r0, [pc, #96]	; (14004 <_gpio_set_direction+0xd0>)
   13fa2:	4b1a      	ldr	r3, [pc, #104]	; (1400c <_gpio_set_direction+0xd8>)
   13fa4:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   13fa6:	683b      	ldr	r3, [r7, #0]
   13fa8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   13faa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   13fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   13fb2:	79f9      	ldrb	r1, [r7, #7]
   13fb4:	461a      	mov	r2, r3
   13fb6:	4813      	ldr	r0, [pc, #76]	; (14004 <_gpio_set_direction+0xd0>)
   13fb8:	4b14      	ldr	r3, [pc, #80]	; (1400c <_gpio_set_direction+0xd8>)
   13fba:	4798      	blx	r3
		break;
   13fbc:	e01d      	b.n	13ffa <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   13fbe:	79fb      	ldrb	r3, [r7, #7]
   13fc0:	683a      	ldr	r2, [r7, #0]
   13fc2:	4619      	mov	r1, r3
   13fc4:	480f      	ldr	r0, [pc, #60]	; (14004 <_gpio_set_direction+0xd0>)
   13fc6:	4b12      	ldr	r3, [pc, #72]	; (14010 <_gpio_set_direction+0xdc>)
   13fc8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   13fca:	683b      	ldr	r3, [r7, #0]
   13fcc:	b29b      	uxth	r3, r3
   13fce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   13fd2:	79fb      	ldrb	r3, [r7, #7]
   13fd4:	4619      	mov	r1, r3
   13fd6:	480b      	ldr	r0, [pc, #44]	; (14004 <_gpio_set_direction+0xd0>)
   13fd8:	4b0c      	ldr	r3, [pc, #48]	; (1400c <_gpio_set_direction+0xd8>)
   13fda:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   13fdc:	683b      	ldr	r3, [r7, #0]
   13fde:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   13fe0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   13fe4:	79fb      	ldrb	r3, [r7, #7]
   13fe6:	4619      	mov	r1, r3
   13fe8:	4806      	ldr	r0, [pc, #24]	; (14004 <_gpio_set_direction+0xd0>)
   13fea:	4b08      	ldr	r3, [pc, #32]	; (1400c <_gpio_set_direction+0xd8>)
   13fec:	4798      	blx	r3
		break;
   13fee:	e004      	b.n	13ffa <_gpio_set_direction+0xc6>
		ASSERT(false);
   13ff0:	2246      	movs	r2, #70	; 0x46
   13ff2:	4908      	ldr	r1, [pc, #32]	; (14014 <_gpio_set_direction+0xe0>)
   13ff4:	2000      	movs	r0, #0
   13ff6:	4b08      	ldr	r3, [pc, #32]	; (14018 <_gpio_set_direction+0xe4>)
   13ff8:	4798      	blx	r3
}
   13ffa:	bf00      	nop
   13ffc:	3708      	adds	r7, #8
   13ffe:	46bd      	mov	sp, r7
   14000:	bd80      	pop	{r7, pc}
   14002:	bf00      	nop
   14004:	41008000 	.word	0x41008000
   14008:	00013d8b 	.word	0x00013d8b
   1400c:	00013f0f 	.word	0x00013f0f
   14010:	00013d65 	.word	0x00013d65
   14014:	0001e47c 	.word	0x0001e47c
   14018:	00006991 	.word	0x00006991

0001401c <_gpio_set_level>:
{
   1401c:	b580      	push	{r7, lr}
   1401e:	b082      	sub	sp, #8
   14020:	af00      	add	r7, sp, #0
   14022:	4603      	mov	r3, r0
   14024:	6039      	str	r1, [r7, #0]
   14026:	71fb      	strb	r3, [r7, #7]
   14028:	4613      	mov	r3, r2
   1402a:	71bb      	strb	r3, [r7, #6]
	if (level) {
   1402c:	79bb      	ldrb	r3, [r7, #6]
   1402e:	2b00      	cmp	r3, #0
   14030:	d006      	beq.n	14040 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   14032:	79fb      	ldrb	r3, [r7, #7]
   14034:	683a      	ldr	r2, [r7, #0]
   14036:	4619      	mov	r1, r3
   14038:	4806      	ldr	r0, [pc, #24]	; (14054 <_gpio_set_level+0x38>)
   1403a:	4b07      	ldr	r3, [pc, #28]	; (14058 <_gpio_set_level+0x3c>)
   1403c:	4798      	blx	r3
}
   1403e:	e005      	b.n	1404c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   14040:	79fb      	ldrb	r3, [r7, #7]
   14042:	683a      	ldr	r2, [r7, #0]
   14044:	4619      	mov	r1, r3
   14046:	4803      	ldr	r0, [pc, #12]	; (14054 <_gpio_set_level+0x38>)
   14048:	4b04      	ldr	r3, [pc, #16]	; (1405c <_gpio_set_level+0x40>)
   1404a:	4798      	blx	r3
}
   1404c:	bf00      	nop
   1404e:	3708      	adds	r7, #8
   14050:	46bd      	mov	sp, r7
   14052:	bd80      	pop	{r7, pc}
   14054:	41008000 	.word	0x41008000
   14058:	00013db1 	.word	0x00013db1
   1405c:	00013dd7 	.word	0x00013dd7

00014060 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   14060:	b590      	push	{r4, r7, lr}
   14062:	b085      	sub	sp, #20
   14064:	af00      	add	r7, sp, #0
   14066:	6078      	str	r0, [r7, #4]
   14068:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   1406a:	687b      	ldr	r3, [r7, #4]
   1406c:	095b      	lsrs	r3, r3, #5
   1406e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   14070:	687b      	ldr	r3, [r7, #4]
   14072:	b2db      	uxtb	r3, r3
   14074:	f003 031f 	and.w	r3, r3, #31
   14078:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   1407a:	683b      	ldr	r3, [r7, #0]
   1407c:	f1b3 3fff 	cmp.w	r3, #4294967295
   14080:	d106      	bne.n	14090 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   14082:	7bba      	ldrb	r2, [r7, #14]
   14084:	7bf9      	ldrb	r1, [r7, #15]
   14086:	2300      	movs	r3, #0
   14088:	4812      	ldr	r0, [pc, #72]	; (140d4 <_gpio_set_pin_function+0x74>)
   1408a:	4c13      	ldr	r4, [pc, #76]	; (140d8 <_gpio_set_pin_function+0x78>)
   1408c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   1408e:	e01d      	b.n	140cc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   14090:	7bba      	ldrb	r2, [r7, #14]
   14092:	7bf9      	ldrb	r1, [r7, #15]
   14094:	2301      	movs	r3, #1
   14096:	480f      	ldr	r0, [pc, #60]	; (140d4 <_gpio_set_pin_function+0x74>)
   14098:	4c0f      	ldr	r4, [pc, #60]	; (140d8 <_gpio_set_pin_function+0x78>)
   1409a:	47a0      	blx	r4
		if (pin & 1) {
   1409c:	7bbb      	ldrb	r3, [r7, #14]
   1409e:	f003 0301 	and.w	r3, r3, #1
   140a2:	2b00      	cmp	r3, #0
   140a4:	d009      	beq.n	140ba <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   140a6:	7bbb      	ldrb	r3, [r7, #14]
   140a8:	105b      	asrs	r3, r3, #1
   140aa:	b2da      	uxtb	r2, r3
   140ac:	683b      	ldr	r3, [r7, #0]
   140ae:	b2db      	uxtb	r3, r3
   140b0:	7bf9      	ldrb	r1, [r7, #15]
   140b2:	4808      	ldr	r0, [pc, #32]	; (140d4 <_gpio_set_pin_function+0x74>)
   140b4:	4c09      	ldr	r4, [pc, #36]	; (140dc <_gpio_set_pin_function+0x7c>)
   140b6:	47a0      	blx	r4
}
   140b8:	e008      	b.n	140cc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   140ba:	7bbb      	ldrb	r3, [r7, #14]
   140bc:	105b      	asrs	r3, r3, #1
   140be:	b2da      	uxtb	r2, r3
   140c0:	683b      	ldr	r3, [r7, #0]
   140c2:	b2db      	uxtb	r3, r3
   140c4:	7bf9      	ldrb	r1, [r7, #15]
   140c6:	4803      	ldr	r0, [pc, #12]	; (140d4 <_gpio_set_pin_function+0x74>)
   140c8:	4c05      	ldr	r4, [pc, #20]	; (140e0 <_gpio_set_pin_function+0x80>)
   140ca:	47a0      	blx	r4
}
   140cc:	bf00      	nop
   140ce:	3714      	adds	r7, #20
   140d0:	46bd      	mov	sp, r7
   140d2:	bd90      	pop	{r4, r7, pc}
   140d4:	41008000 	.word	0x41008000
   140d8:	00013eb7 	.word	0x00013eb7
   140dc:	00013e5b 	.word	0x00013e5b
   140e0:	00013dfd 	.word	0x00013dfd

000140e4 <gpio_set_pin_function>:
{
   140e4:	b580      	push	{r7, lr}
   140e6:	b082      	sub	sp, #8
   140e8:	af00      	add	r7, sp, #0
   140ea:	6078      	str	r0, [r7, #4]
   140ec:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   140ee:	6839      	ldr	r1, [r7, #0]
   140f0:	6878      	ldr	r0, [r7, #4]
   140f2:	4b03      	ldr	r3, [pc, #12]	; (14100 <gpio_set_pin_function+0x1c>)
   140f4:	4798      	blx	r3
}
   140f6:	bf00      	nop
   140f8:	3708      	adds	r7, #8
   140fa:	46bd      	mov	sp, r7
   140fc:	bd80      	pop	{r7, pc}
   140fe:	bf00      	nop
   14100:	00014061 	.word	0x00014061

00014104 <gpio_set_pin_direction>:
{
   14104:	b580      	push	{r7, lr}
   14106:	b082      	sub	sp, #8
   14108:	af00      	add	r7, sp, #0
   1410a:	4603      	mov	r3, r0
   1410c:	460a      	mov	r2, r1
   1410e:	71fb      	strb	r3, [r7, #7]
   14110:	4613      	mov	r3, r2
   14112:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   14114:	79fb      	ldrb	r3, [r7, #7]
   14116:	115b      	asrs	r3, r3, #5
   14118:	b2d8      	uxtb	r0, r3
   1411a:	79fb      	ldrb	r3, [r7, #7]
   1411c:	f003 031f 	and.w	r3, r3, #31
   14120:	2201      	movs	r2, #1
   14122:	fa02 f303 	lsl.w	r3, r2, r3
   14126:	79ba      	ldrb	r2, [r7, #6]
   14128:	4619      	mov	r1, r3
   1412a:	4b03      	ldr	r3, [pc, #12]	; (14138 <gpio_set_pin_direction+0x34>)
   1412c:	4798      	blx	r3
}
   1412e:	bf00      	nop
   14130:	3708      	adds	r7, #8
   14132:	46bd      	mov	sp, r7
   14134:	bd80      	pop	{r7, pc}
   14136:	bf00      	nop
   14138:	00013f35 	.word	0x00013f35

0001413c <gpio_set_pin_level>:
{
   1413c:	b580      	push	{r7, lr}
   1413e:	b082      	sub	sp, #8
   14140:	af00      	add	r7, sp, #0
   14142:	4603      	mov	r3, r0
   14144:	460a      	mov	r2, r1
   14146:	71fb      	strb	r3, [r7, #7]
   14148:	4613      	mov	r3, r2
   1414a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   1414c:	79fb      	ldrb	r3, [r7, #7]
   1414e:	115b      	asrs	r3, r3, #5
   14150:	b2d8      	uxtb	r0, r3
   14152:	79fb      	ldrb	r3, [r7, #7]
   14154:	f003 031f 	and.w	r3, r3, #31
   14158:	2201      	movs	r2, #1
   1415a:	fa02 f303 	lsl.w	r3, r2, r3
   1415e:	79ba      	ldrb	r2, [r7, #6]
   14160:	4619      	mov	r1, r3
   14162:	4b03      	ldr	r3, [pc, #12]	; (14170 <gpio_set_pin_level+0x34>)
   14164:	4798      	blx	r3
}
   14166:	bf00      	nop
   14168:	3708      	adds	r7, #8
   1416a:	46bd      	mov	sp, r7
   1416c:	bd80      	pop	{r7, pc}
   1416e:	bf00      	nop
   14170:	0001401d 	.word	0x0001401d

00014174 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   14174:	b580      	push	{r7, lr}
   14176:	b082      	sub	sp, #8
   14178:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   1417a:	2100      	movs	r1, #0
   1417c:	2008      	movs	r0, #8
   1417e:	4b24      	ldr	r3, [pc, #144]	; (14210 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   14180:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   14182:	2100      	movs	r1, #0
   14184:	202b      	movs	r0, #43	; 0x2b
   14186:	4b22      	ldr	r3, [pc, #136]	; (14210 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   14188:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   1418a:	2100      	movs	r1, #0
   1418c:	202a      	movs	r0, #42	; 0x2a
   1418e:	4b20      	ldr	r3, [pc, #128]	; (14210 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   14190:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   14192:	2102      	movs	r1, #2
   14194:	2008      	movs	r0, #8
   14196:	4b1f      	ldr	r3, [pc, #124]	; (14214 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   14198:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   1419a:	2102      	movs	r1, #2
   1419c:	202b      	movs	r0, #43	; 0x2b
   1419e:	4b1d      	ldr	r3, [pc, #116]	; (14214 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   141a0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   141a2:	2102      	movs	r1, #2
   141a4:	202a      	movs	r0, #42	; 0x2a
   141a6:	4b1b      	ldr	r3, [pc, #108]	; (14214 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   141a8:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   141aa:	2101      	movs	r1, #1
   141ac:	2008      	movs	r0, #8
   141ae:	4b1a      	ldr	r3, [pc, #104]	; (14218 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   141b0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   141b2:	2100      	movs	r1, #0
   141b4:	202b      	movs	r0, #43	; 0x2b
   141b6:	4b18      	ldr	r3, [pc, #96]	; (14218 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   141b8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   141ba:	2100      	movs	r1, #0
   141bc:	202a      	movs	r0, #42	; 0x2a
   141be:	4b16      	ldr	r3, [pc, #88]	; (14218 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   141c0:	4798      	blx	r3

	delay_us(1);
   141c2:	2001      	movs	r0, #1
   141c4:	4b15      	ldr	r3, [pc, #84]	; (1421c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   141c6:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   141c8:	2300      	movs	r3, #0
   141ca:	607b      	str	r3, [r7, #4]
   141cc:	687b      	ldr	r3, [r7, #4]
   141ce:	2b06      	cmp	r3, #6
   141d0:	dc11      	bgt.n	141f6 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   141d2:	2101      	movs	r1, #1
   141d4:	202a      	movs	r0, #42	; 0x2a
   141d6:	4b10      	ldr	r3, [pc, #64]	; (14218 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   141d8:	4798      	blx	r3
		delay_us(1);
   141da:	2001      	movs	r0, #1
   141dc:	4b0f      	ldr	r3, [pc, #60]	; (1421c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   141de:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   141e0:	2100      	movs	r1, #0
   141e2:	202a      	movs	r0, #42	; 0x2a
   141e4:	4b0c      	ldr	r3, [pc, #48]	; (14218 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   141e6:	4798      	blx	r3
		delay_us(1);
   141e8:	2001      	movs	r0, #1
   141ea:	4b0c      	ldr	r3, [pc, #48]	; (1421c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   141ec:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   141ee:	687b      	ldr	r3, [r7, #4]
   141f0:	3301      	adds	r3, #1
   141f2:	607b      	str	r3, [r7, #4]
   141f4:	e7ea      	b.n	141cc <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   141f6:	2101      	movs	r1, #1
   141f8:	202b      	movs	r0, #43	; 0x2b
   141fa:	4b07      	ldr	r3, [pc, #28]	; (14218 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   141fc:	4798      	blx	r3
	delay_us(1);
   141fe:	2001      	movs	r0, #1
   14200:	4b06      	ldr	r3, [pc, #24]	; (1421c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   14202:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   14204:	4b06      	ldr	r3, [pc, #24]	; (14220 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   14206:	4798      	blx	r3
}
   14208:	bf00      	nop
   1420a:	3708      	adds	r7, #8
   1420c:	46bd      	mov	sp, r7
   1420e:	bd80      	pop	{r7, pc}
   14210:	000140e5 	.word	0x000140e5
   14214:	00014105 	.word	0x00014105
   14218:	0001413d 	.word	0x0001413d
   1421c:	00004de9 	.word	0x00004de9
   14220:	00003c11 	.word	0x00003c11

00014224 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   14224:	b480      	push	{r7}
   14226:	b083      	sub	sp, #12
   14228:	af00      	add	r7, sp, #0
   1422a:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   1422c:	687b      	ldr	r3, [r7, #4]
   1422e:	4618      	mov	r0, r3
   14230:	370c      	adds	r7, #12
   14232:	46bd      	mov	sp, r7
   14234:	bc80      	pop	{r7}
   14236:	4770      	bx	lr

00014238 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   14238:	b480      	push	{r7}
   1423a:	b083      	sub	sp, #12
   1423c:	af00      	add	r7, sp, #0
   1423e:	6078      	str	r0, [r7, #4]
   14240:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   14242:	687b      	ldr	r3, [r7, #4]
   14244:	683a      	ldr	r2, [r7, #0]
   14246:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   14248:	687b      	ldr	r3, [r7, #4]
   1424a:	4a04      	ldr	r2, [pc, #16]	; (1425c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   1424c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   14250:	687b      	ldr	r3, [r7, #4]
   14252:	4618      	mov	r0, r3
   14254:	370c      	adds	r7, #12
   14256:	46bd      	mov	sp, r7
   14258:	bc80      	pop	{r7}
   1425a:	4770      	bx	lr
   1425c:	001fff00 	.word	0x001fff00

00014260 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   14260:	b480      	push	{r7}
   14262:	b083      	sub	sp, #12
   14264:	af00      	add	r7, sp, #0
   14266:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   14268:	687b      	ldr	r3, [r7, #4]
   1426a:	4618      	mov	r0, r3
   1426c:	370c      	adds	r7, #12
   1426e:	46bd      	mov	sp, r7
   14270:	bc80      	pop	{r7}
   14272:	4770      	bx	lr

00014274 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   14274:	b580      	push	{r7, lr}
   14276:	b082      	sub	sp, #8
   14278:	af00      	add	r7, sp, #0
   1427a:	6078      	str	r0, [r7, #4]
	xferDone=false;
   1427c:	687b      	ldr	r3, [r7, #4]
   1427e:	2200      	movs	r2, #0
   14280:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   14282:	6878      	ldr	r0, [r7, #4]
   14284:	4b04      	ldr	r3, [pc, #16]	; (14298 <_ZN13N25Q256_Class4InitEv+0x24>)
   14286:	4798      	blx	r3
	return SelfTest();
   14288:	6878      	ldr	r0, [r7, #4]
   1428a:	4b04      	ldr	r3, [pc, #16]	; (1429c <_ZN13N25Q256_Class4InitEv+0x28>)
   1428c:	4798      	blx	r3
   1428e:	4603      	mov	r3, r0
}
   14290:	4618      	mov	r0, r3
   14292:	3708      	adds	r7, #8
   14294:	46bd      	mov	sp, r7
   14296:	bd80      	pop	{r7, pc}
   14298:	000142a1 	.word	0x000142a1
   1429c:	00014455 	.word	0x00014455

000142a0 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   142a0:	b590      	push	{r4, r7, lr}
   142a2:	b083      	sub	sp, #12
   142a4:	af00      	add	r7, sp, #0
   142a6:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   142a8:	687b      	ldr	r3, [r7, #4]
   142aa:	685b      	ldr	r3, [r3, #4]
   142ac:	4618      	mov	r0, r3
   142ae:	4b08      	ldr	r3, [pc, #32]	; (142d0 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   142b0:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   142b2:	687b      	ldr	r3, [r7, #4]
   142b4:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   142b6:	2300      	movs	r3, #0
   142b8:	4a06      	ldr	r2, [pc, #24]	; (142d4 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   142ba:	4807      	ldr	r0, [pc, #28]	; (142d8 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   142bc:	4c07      	ldr	r4, [pc, #28]	; (142dc <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   142be:	47a0      	blx	r4
   142c0:	4602      	mov	r2, r0
   142c2:	687b      	ldr	r3, [r7, #4]
   142c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   142c8:	bf00      	nop
   142ca:	370c      	adds	r7, #12
   142cc:	46bd      	mov	sp, r7
   142ce:	bd90      	pop	{r4, r7, pc}
   142d0:	000054b9 	.word	0x000054b9
   142d4:	00014175 	.word	0x00014175
   142d8:	20004ed4 	.word	0x20004ed4
   142dc:	0000f405 	.word	0x0000f405

000142e0 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   142e0:	b580      	push	{r7, lr}
   142e2:	b084      	sub	sp, #16
   142e4:	af00      	add	r7, sp, #0
   142e6:	6078      	str	r0, [r7, #4]
   142e8:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   142ea:	687b      	ldr	r3, [r7, #4]
   142ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   142f0:	685b      	ldr	r3, [r3, #4]
   142f2:	689b      	ldr	r3, [r3, #8]
   142f4:	687a      	ldr	r2, [r7, #4]
   142f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   142fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   142fe:	6839      	ldr	r1, [r7, #0]
   14300:	4798      	blx	r3
   14302:	4603      	mov	r3, r0
   14304:	60fb      	str	r3, [r7, #12]
	return	e;
   14306:	68fb      	ldr	r3, [r7, #12]
}
   14308:	4618      	mov	r0, r3
   1430a:	3710      	adds	r7, #16
   1430c:	46bd      	mov	sp, r7
   1430e:	bd80      	pop	{r7, pc}

00014310 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   14310:	b590      	push	{r4, r7, lr}
   14312:	b087      	sub	sp, #28
   14314:	af00      	add	r7, sp, #0
   14316:	60f8      	str	r0, [r7, #12]
   14318:	60b9      	str	r1, [r7, #8]
   1431a:	607a      	str	r2, [r7, #4]
   1431c:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   1431e:	68fb      	ldr	r3, [r7, #12]
   14320:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   14324:	685b      	ldr	r3, [r3, #4]
   14326:	685c      	ldr	r4, [r3, #4]
   14328:	68fb      	ldr	r3, [r7, #12]
   1432a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   1432e:	683b      	ldr	r3, [r7, #0]
   14330:	687a      	ldr	r2, [r7, #4]
   14332:	68b9      	ldr	r1, [r7, #8]
   14334:	47a0      	blx	r4
   14336:	4603      	mov	r3, r0
   14338:	617b      	str	r3, [r7, #20]
	return	w;
   1433a:	697b      	ldr	r3, [r7, #20]
}
   1433c:	4618      	mov	r0, r3
   1433e:	371c      	adds	r7, #28
   14340:	46bd      	mov	sp, r7
   14342:	bd90      	pop	{r4, r7, pc}

00014344 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   14344:	b590      	push	{r4, r7, lr}
   14346:	b087      	sub	sp, #28
   14348:	af00      	add	r7, sp, #0
   1434a:	60f8      	str	r0, [r7, #12]
   1434c:	60b9      	str	r1, [r7, #8]
   1434e:	607a      	str	r2, [r7, #4]
   14350:	603b      	str	r3, [r7, #0]
	xferDone=false;
   14352:	68fb      	ldr	r3, [r7, #12]
   14354:	2200      	movs	r2, #0
   14356:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   14358:	68fb      	ldr	r3, [r7, #12]
   1435a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1435e:	685b      	ldr	r3, [r3, #4]
   14360:	681c      	ldr	r4, [r3, #0]
   14362:	68fb      	ldr	r3, [r7, #12]
   14364:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   14368:	683b      	ldr	r3, [r7, #0]
   1436a:	687a      	ldr	r2, [r7, #4]
   1436c:	68b9      	ldr	r1, [r7, #8]
   1436e:	47a0      	blx	r4
   14370:	4603      	mov	r3, r0
   14372:	617b      	str	r3, [r7, #20]
	return	r;
   14374:	697b      	ldr	r3, [r7, #20]
}
   14376:	4618      	mov	r0, r3
   14378:	371c      	adds	r7, #28
   1437a:	46bd      	mov	sp, r7
   1437c:	bd90      	pop	{r4, r7, pc}
	...

00014380 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   14380:	b580      	push	{r7, lr}
   14382:	b082      	sub	sp, #8
   14384:	af00      	add	r7, sp, #0
   14386:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   14388:	687a      	ldr	r2, [r7, #4]
   1438a:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   1438e:	f043 0310 	orr.w	r3, r3, #16
   14392:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   14396:	687a      	ldr	r2, [r7, #4]
   14398:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   1439c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   143a0:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   143a4:	687a      	ldr	r2, [r7, #4]
   143a6:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   143aa:	f36f 1305 	bfc	r3, #4, #2
   143ae:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   143b2:	687b      	ldr	r3, [r7, #4]
   143b4:	2205      	movs	r2, #5
   143b6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   143ba:	687b      	ldr	r3, [r7, #4]
   143bc:	2201      	movs	r2, #1
   143be:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   143c2:	687b      	ldr	r3, [r7, #4]
   143c4:	f203 2212 	addw	r2, r3, #530	; 0x212
   143c8:	687b      	ldr	r3, [r7, #4]
   143ca:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   143ce:	687b      	ldr	r3, [r7, #4]
   143d0:	685a      	ldr	r2, [r3, #4]
   143d2:	687b      	ldr	r3, [r7, #4]
   143d4:	f503 7305 	add.w	r3, r3, #532	; 0x214
   143d8:	4619      	mov	r1, r3
   143da:	4610      	mov	r0, r2
   143dc:	4b04      	ldr	r3, [pc, #16]	; (143f0 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   143de:	4798      	blx	r3
		return status;
   143e0:	687b      	ldr	r3, [r7, #4]
   143e2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   143e6:	4618      	mov	r0, r3
   143e8:	3708      	adds	r7, #8
   143ea:	46bd      	mov	sp, r7
   143ec:	bd80      	pop	{r7, pc}
   143ee:	bf00      	nop
   143f0:	00005531 	.word	0x00005531

000143f4 <_ZN13N25Q256_Class17GetMemoryCapacityEv>:
uint32_t	N25Q256_Class::GetMemoryCapacity(){
   143f4:	b480      	push	{r7}
   143f6:	b083      	sub	sp, #12
   143f8:	af00      	add	r7, sp, #0
   143fa:	6078      	str	r0, [r7, #4]
	return	memoryCapacity;
   143fc:	687b      	ldr	r3, [r7, #4]
   143fe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
}
   14402:	4618      	mov	r0, r3
   14404:	370c      	adds	r7, #12
   14406:	46bd      	mov	sp, r7
   14408:	bc80      	pop	{r7}
   1440a:	4770      	bx	lr

0001440c <_ZN13N25Q256_Class10WaitOnBusyEv>:
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   1440c:	b580      	push	{r7, lr}
   1440e:	b082      	sub	sp, #8
   14410:	af00      	add	r7, sp, #0
   14412:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   14414:	6878      	ldr	r0, [r7, #4]
   14416:	4b0e      	ldr	r3, [pc, #56]	; (14450 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   14418:	4798      	blx	r3
   1441a:	4603      	mov	r3, r0
   1441c:	461a      	mov	r2, r3
   1441e:	687b      	ldr	r3, [r7, #4]
   14420:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   14424:	687b      	ldr	r3, [r7, #4]
   14426:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   1442a:	f003 0301 	and.w	r3, r3, #1
   1442e:	2b00      	cmp	r3, #0
   14430:	d000      	beq.n	14434 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   14432:	e7ef      	b.n	14414 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   14434:	687b      	ldr	r3, [r7, #4]
   14436:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   1443a:	f003 0301 	and.w	r3, r3, #1
   1443e:	2b00      	cmp	r3, #0
   14440:	bf0c      	ite	eq
   14442:	2301      	moveq	r3, #1
   14444:	2300      	movne	r3, #0
   14446:	b2db      	uxtb	r3, r3
}
   14448:	4618      	mov	r0, r3
   1444a:	3708      	adds	r7, #8
   1444c:	46bd      	mov	sp, r7
   1444e:	bd80      	pop	{r7, pc}
   14450:	00014381 	.word	0x00014381

00014454 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   14454:	b590      	push	{r4, r7, lr}
   14456:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   1445a:	b085      	sub	sp, #20
   1445c:	af00      	add	r7, sp, #0
   1445e:	f107 0310 	add.w	r3, r7, #16
   14462:	3b0c      	subs	r3, #12
   14464:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   14466:	f107 0310 	add.w	r3, r7, #16
   1446a:	3b0c      	subs	r3, #12
   1446c:	681b      	ldr	r3, [r3, #0]
   1446e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   14472:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   14476:	f107 0310 	add.w	r3, r7, #16
   1447a:	3b0c      	subs	r3, #12
   1447c:	681b      	ldr	r3, [r3, #0]
   1447e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   14482:	f107 0110 	add.w	r1, r7, #16
   14486:	3904      	subs	r1, #4
   14488:	f107 0010 	add.w	r0, r7, #16
   1448c:	380c      	subs	r0, #12
   1448e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   14492:	6800      	ldr	r0, [r0, #0]
   14494:	4c4b      	ldr	r4, [pc, #300]	; (145c4 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   14496:	47a0      	blx	r4
	WaitOnBusy();
   14498:	f107 0310 	add.w	r3, r7, #16
   1449c:	3b0c      	subs	r3, #12
   1449e:	6818      	ldr	r0, [r3, #0]
   144a0:	4b49      	ldr	r3, [pc, #292]	; (145c8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   144a2:	4798      	blx	r3
	Erase(currentAddress);
   144a4:	f107 0310 	add.w	r3, r7, #16
   144a8:	3b0c      	subs	r3, #12
   144aa:	681b      	ldr	r3, [r3, #0]
   144ac:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   144b0:	f107 0310 	add.w	r3, r7, #16
   144b4:	3b0c      	subs	r3, #12
   144b6:	4611      	mov	r1, r2
   144b8:	6818      	ldr	r0, [r3, #0]
   144ba:	4b44      	ldr	r3, [pc, #272]	; (145cc <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   144bc:	4798      	blx	r3
	WaitOnBusy();
   144be:	f107 0310 	add.w	r3, r7, #16
   144c2:	3b0c      	subs	r3, #12
   144c4:	6818      	ldr	r0, [r3, #0]
   144c6:	4b40      	ldr	r3, [pc, #256]	; (145c8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   144c8:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   144ca:	f107 0310 	add.w	r3, r7, #16
   144ce:	3b0c      	subs	r3, #12
   144d0:	681b      	ldr	r3, [r3, #0]
   144d2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   144d6:	f107 0110 	add.w	r1, r7, #16
   144da:	3904      	subs	r1, #4
   144dc:	f107 0010 	add.w	r0, r7, #16
   144e0:	380c      	subs	r0, #12
   144e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   144e6:	6800      	ldr	r0, [r0, #0]
   144e8:	4c39      	ldr	r4, [pc, #228]	; (145d0 <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   144ea:	47a0      	blx	r4
	WaitOnBusy();
   144ec:	f107 0310 	add.w	r3, r7, #16
   144f0:	3b0c      	subs	r3, #12
   144f2:	6818      	ldr	r0, [r3, #0]
   144f4:	4b34      	ldr	r3, [pc, #208]	; (145c8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   144f6:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   144f8:	f107 0310 	add.w	r3, r7, #16
   144fc:	3b0c      	subs	r3, #12
   144fe:	681b      	ldr	r3, [r3, #0]
   14500:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   14504:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   14508:	f101 0110 	add.w	r1, r1, #16
   1450c:	3904      	subs	r1, #4
   1450e:	f107 0010 	add.w	r0, r7, #16
   14512:	380c      	subs	r0, #12
   14514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   14518:	6800      	ldr	r0, [r0, #0]
   1451a:	4c2a      	ldr	r4, [pc, #168]	; (145c4 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   1451c:	47a0      	blx	r4
	WaitOnBusy();
   1451e:	f107 0310 	add.w	r3, r7, #16
   14522:	3b0c      	subs	r3, #12
   14524:	6818      	ldr	r0, [r3, #0]
   14526:	4b28      	ldr	r3, [pc, #160]	; (145c8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   14528:	4798      	blx	r3
	isOK	 = true;
   1452a:	f107 0310 	add.w	r3, r7, #16
   1452e:	3b0c      	subs	r3, #12
   14530:	681b      	ldr	r3, [r3, #0]
   14532:	2201      	movs	r2, #1
   14534:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   14538:	2300      	movs	r3, #0
   1453a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1453e:	f102 020c 	add.w	r2, r2, #12
   14542:	6013      	str	r3, [r2, #0]
   14544:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   14548:	f103 030c 	add.w	r3, r3, #12
   1454c:	681b      	ldr	r3, [r3, #0]
   1454e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   14552:	da2b      	bge.n	145ac <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   14554:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   14558:	f103 0310 	add.w	r3, r3, #16
   1455c:	3b04      	subs	r3, #4
   1455e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   14562:	f102 020c 	add.w	r2, r2, #12
   14566:	6812      	ldr	r2, [r2, #0]
   14568:	4413      	add	r3, r2
   1456a:	781a      	ldrb	r2, [r3, #0]
   1456c:	f107 0310 	add.w	r3, r7, #16
   14570:	3b04      	subs	r3, #4
   14572:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   14576:	f101 010c 	add.w	r1, r1, #12
   1457a:	6809      	ldr	r1, [r1, #0]
   1457c:	440b      	add	r3, r1
   1457e:	781b      	ldrb	r3, [r3, #0]
   14580:	429a      	cmp	r2, r3
   14582:	d007      	beq.n	14594 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   14584:	f107 0310 	add.w	r3, r7, #16
   14588:	3b0c      	subs	r3, #12
   1458a:	681b      	ldr	r3, [r3, #0]
   1458c:	2200      	movs	r2, #0
   1458e:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   14592:	e00b      	b.n	145ac <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   14594:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   14598:	f103 030c 	add.w	r3, r3, #12
   1459c:	681b      	ldr	r3, [r3, #0]
   1459e:	3301      	adds	r3, #1
   145a0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   145a4:	f102 020c 	add.w	r2, r2, #12
   145a8:	6013      	str	r3, [r2, #0]
   145aa:	e7cb      	b.n	14544 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   145ac:	f107 0310 	add.w	r3, r7, #16
   145b0:	3b0c      	subs	r3, #12
   145b2:	681b      	ldr	r3, [r3, #0]
   145b4:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   145b8:	4618      	mov	r0, r3
   145ba:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   145be:	3714      	adds	r7, #20
   145c0:	46bd      	mov	sp, r7
   145c2:	bd90      	pop	{r4, r7, pc}
   145c4:	00014345 	.word	0x00014345
   145c8:	0001440d 	.word	0x0001440d
   145cc:	000142e1 	.word	0x000142e1
   145d0:	00014311 	.word	0x00014311

000145d4 <_Z41__static_initialization_and_destruction_0ii>:
   145d4:	b580      	push	{r7, lr}
   145d6:	b082      	sub	sp, #8
   145d8:	af00      	add	r7, sp, #0
   145da:	6078      	str	r0, [r7, #4]
   145dc:	6039      	str	r1, [r7, #0]
   145de:	687b      	ldr	r3, [r7, #4]
   145e0:	2b01      	cmp	r3, #1
   145e2:	d10d      	bne.n	14600 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   145e4:	683b      	ldr	r3, [r7, #0]
   145e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   145ea:	4293      	cmp	r3, r2
   145ec:	d108      	bne.n	14600 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   145ee:	4906      	ldr	r1, [pc, #24]	; (14608 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   145f0:	4806      	ldr	r0, [pc, #24]	; (1460c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   145f2:	4b07      	ldr	r3, [pc, #28]	; (14610 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   145f4:	4798      	blx	r3
   145f6:	4a07      	ldr	r2, [pc, #28]	; (14614 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   145f8:	4907      	ldr	r1, [pc, #28]	; (14618 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   145fa:	4804      	ldr	r0, [pc, #16]	; (1460c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   145fc:	4b07      	ldr	r3, [pc, #28]	; (1461c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   145fe:	4798      	blx	r3
   14600:	bf00      	nop
   14602:	3708      	adds	r7, #8
   14604:	46bd      	mov	sp, r7
   14606:	bd80      	pop	{r7, pc}
   14608:	20005668 	.word	0x20005668
   1460c:	20004ee4 	.word	0x20004ee4
   14610:	00014239 	.word	0x00014239
   14614:	20000000 	.word	0x20000000
   14618:	00014261 	.word	0x00014261
   1461c:	000167bd 	.word	0x000167bd

00014620 <_GLOBAL__sub_I_ptrN25Q256Class>:
   14620:	b580      	push	{r7, lr}
   14622:	af00      	add	r7, sp, #0
   14624:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14628:	2001      	movs	r0, #1
   1462a:	4b01      	ldr	r3, [pc, #4]	; (14630 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   1462c:	4798      	blx	r3
   1462e:	bd80      	pop	{r7, pc}
   14630:	000145d5 	.word	0x000145d5

00014634 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   14634:	b580      	push	{r7, lr}
   14636:	b082      	sub	sp, #8
   14638:	af00      	add	r7, sp, #0
   1463a:	6078      	str	r0, [r7, #4]
   1463c:	687b      	ldr	r3, [r7, #4]
   1463e:	4618      	mov	r0, r3
   14640:	4b06      	ldr	r3, [pc, #24]	; (1465c <_ZN14Calendar_ClassC1Ev+0x28>)
   14642:	4798      	blx	r3
   14644:	4a06      	ldr	r2, [pc, #24]	; (14660 <_ZN14Calendar_ClassC1Ev+0x2c>)
   14646:	687b      	ldr	r3, [r7, #4]
   14648:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   1464a:	4a06      	ldr	r2, [pc, #24]	; (14664 <_ZN14Calendar_ClassC1Ev+0x30>)
   1464c:	687b      	ldr	r3, [r7, #4]
   1464e:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   14650:	687b      	ldr	r3, [r7, #4]
   14652:	4618      	mov	r0, r3
   14654:	3708      	adds	r7, #8
   14656:	46bd      	mov	sp, r7
   14658:	bd80      	pop	{r7, pc}
   1465a:	bf00      	nop
   1465c:	00014d81 	.word	0x00014d81
   14660:	0001e4bc 	.word	0x0001e4bc
   14664:	20005118 	.word	0x20005118

00014668 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   14668:	b580      	push	{r7, lr}
   1466a:	b082      	sub	sp, #8
   1466c:	af00      	add	r7, sp, #0
   1466e:	6078      	str	r0, [r7, #4]
   14670:	6039      	str	r1, [r7, #0]
   14672:	687b      	ldr	r3, [r7, #4]
   14674:	4618      	mov	r0, r3
   14676:	4b08      	ldr	r3, [pc, #32]	; (14698 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   14678:	4798      	blx	r3
   1467a:	4a08      	ldr	r2, [pc, #32]	; (1469c <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   1467c:	687b      	ldr	r3, [r7, #4]
   1467e:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   14680:	687b      	ldr	r3, [r7, #4]
   14682:	683a      	ldr	r2, [r7, #0]
   14684:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
   14688:	4a05      	ldr	r2, [pc, #20]	; (146a0 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   1468a:	687b      	ldr	r3, [r7, #4]
   1468c:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   1468e:	687b      	ldr	r3, [r7, #4]
   14690:	4618      	mov	r0, r3
   14692:	3708      	adds	r7, #8
   14694:	46bd      	mov	sp, r7
   14696:	bd80      	pop	{r7, pc}
   14698:	00014d81 	.word	0x00014d81
   1469c:	0001e4bc 	.word	0x0001e4bc
   146a0:	20005118 	.word	0x20005118

000146a4 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   146a4:	b580      	push	{r7, lr}
   146a6:	b082      	sub	sp, #8
   146a8:	af00      	add	r7, sp, #0
   146aa:	6078      	str	r0, [r7, #4]
   146ac:	4a05      	ldr	r2, [pc, #20]	; (146c4 <_ZN14Calendar_ClassD1Ev+0x20>)
   146ae:	687b      	ldr	r3, [r7, #4]
   146b0:	601a      	str	r2, [r3, #0]
   146b2:	687b      	ldr	r3, [r7, #4]
   146b4:	4618      	mov	r0, r3
   146b6:	4b04      	ldr	r3, [pc, #16]	; (146c8 <_ZN14Calendar_ClassD1Ev+0x24>)
   146b8:	4798      	blx	r3
{
} //~Calendar_Class
   146ba:	687b      	ldr	r3, [r7, #4]
   146bc:	4618      	mov	r0, r3
   146be:	3708      	adds	r7, #8
   146c0:	46bd      	mov	sp, r7
   146c2:	bd80      	pop	{r7, pc}
   146c4:	0001e4bc 	.word	0x0001e4bc
   146c8:	00014da1 	.word	0x00014da1

000146cc <_ZN14Calendar_Class4InitEv>:

void	Calendar_Class::Init(void){
   146cc:	b580      	push	{r7, lr}
   146ce:	b082      	sub	sp, #8
   146d0:	af00      	add	r7, sp, #0
   146d2:	6078      	str	r0, [r7, #4]
	ptrMemory=&eeprom;
   146d4:	687b      	ldr	r3, [r7, #4]
   146d6:	4a50      	ldr	r2, [pc, #320]	; (14818 <_ZN14Calendar_Class4InitEv+0x14c>)
   146d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	calendar_enable(ptrCalendar);
   146dc:	687b      	ldr	r3, [r7, #4]
   146de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   146e2:	4618      	mov	r0, r3
   146e4:	4b4d      	ldr	r3, [pc, #308]	; (1481c <_ZN14Calendar_Class4InitEv+0x150>)
   146e6:	4798      	blx	r3
	
	InitMaxDate();
   146e8:	6878      	ldr	r0, [r7, #4]
   146ea:	4b4d      	ldr	r3, [pc, #308]	; (14820 <_ZN14Calendar_Class4InitEv+0x154>)
   146ec:	4798      	blx	r3
	
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	ReadLastDateTime();
   146ee:	687b      	ldr	r3, [r7, #4]
   146f0:	4618      	mov	r0, r3
   146f2:	4b4c      	ldr	r3, [pc, #304]	; (14824 <_ZN14Calendar_Class4InitEv+0x158>)
   146f4:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   146f6:	687b      	ldr	r3, [r7, #4]
   146f8:	681b      	ldr	r3, [r3, #0]
   146fa:	3304      	adds	r3, #4
   146fc:	681b      	ldr	r3, [r3, #0]
   146fe:	687a      	ldr	r2, [r7, #4]
   14700:	3260      	adds	r2, #96	; 0x60
   14702:	4611      	mov	r1, r2
   14704:	6878      	ldr	r0, [r7, #4]
   14706:	4798      	blx	r3
   14708:	4602      	mov	r2, r0
   1470a:	687b      	ldr	r3, [r7, #4]
   1470c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   14710:	687b      	ldr	r3, [r7, #4]
   14712:	681b      	ldr	r3, [r3, #0]
   14714:	3304      	adds	r3, #4
   14716:	681b      	ldr	r3, [r3, #0]
   14718:	687a      	ldr	r2, [r7, #4]
   1471a:	326c      	adds	r2, #108	; 0x6c
   1471c:	4611      	mov	r1, r2
   1471e:	6878      	ldr	r0, [r7, #4]
   14720:	4798      	blx	r3
   14722:	4602      	mov	r2, r0
   14724:	687b      	ldr	r3, [r7, #4]
   14726:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   1472a:	687b      	ldr	r3, [r7, #4]
   1472c:	681b      	ldr	r3, [r3, #0]
   1472e:	3304      	adds	r3, #4
   14730:	681b      	ldr	r3, [r3, #0]
   14732:	687a      	ldr	r2, [r7, #4]
   14734:	327c      	adds	r2, #124	; 0x7c
   14736:	4611      	mov	r1, r2
   14738:	6878      	ldr	r0, [r7, #4]
   1473a:	4798      	blx	r3
   1473c:	4602      	mov	r2, r0
   1473e:	687b      	ldr	r3, [r7, #4]
   14740:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   14744:	687b      	ldr	r3, [r7, #4]
   14746:	681b      	ldr	r3, [r3, #0]
   14748:	3304      	adds	r3, #4
   1474a:	681b      	ldr	r3, [r3, #0]
   1474c:	687a      	ldr	r2, [r7, #4]
   1474e:	3284      	adds	r2, #132	; 0x84
   14750:	4611      	mov	r1, r2
   14752:	6878      	ldr	r0, [r7, #4]
   14754:	4798      	blx	r3
   14756:	4602      	mov	r2, r0
   14758:	687b      	ldr	r3, [r7, #4]
   1475a:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   1475c:	6878      	ldr	r0, [r7, #4]
   1475e:	4b32      	ldr	r3, [pc, #200]	; (14828 <_ZN14Calendar_Class4InitEv+0x15c>)
   14760:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   14762:	687b      	ldr	r3, [r7, #4]
   14764:	681b      	ldr	r3, [r3, #0]
   14766:	3304      	adds	r3, #4
   14768:	681b      	ldr	r3, [r3, #0]
   1476a:	687a      	ldr	r2, [r7, #4]
   1476c:	3274      	adds	r2, #116	; 0x74
   1476e:	4611      	mov	r1, r2
   14770:	6878      	ldr	r0, [r7, #4]
   14772:	4798      	blx	r3
   14774:	4602      	mov	r2, r0
   14776:	687b      	ldr	r3, [r7, #4]
   14778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   1477c:	687b      	ldr	r3, [r7, #4]
   1477e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   14782:	687b      	ldr	r3, [r7, #4]
   14784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   14788:	429a      	cmp	r2, r3
   1478a:	d80e      	bhi.n	147aa <_ZN14Calendar_Class4InitEv+0xde>
   1478c:	687b      	ldr	r3, [r7, #4]
   1478e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   14792:	687b      	ldr	r3, [r7, #4]
   14794:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   14798:	429a      	cmp	r2, r3
   1479a:	d006      	beq.n	147aa <_ZN14Calendar_Class4InitEv+0xde>
   1479c:	687b      	ldr	r3, [r7, #4]
   1479e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   147a2:	687b      	ldr	r3, [r7, #4]
   147a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   147a6:	429a      	cmp	r2, r3
   147a8:	d106      	bne.n	147b8 <_ZN14Calendar_Class4InitEv+0xec>
	{
		SetDateTime(&compilationDateTime);
   147aa:	687b      	ldr	r3, [r7, #4]
   147ac:	3374      	adds	r3, #116	; 0x74
   147ae:	4619      	mov	r1, r3
   147b0:	6878      	ldr	r0, [r7, #4]
   147b2:	4b1e      	ldr	r3, [pc, #120]	; (1482c <_ZN14Calendar_Class4InitEv+0x160>)
   147b4:	4798      	blx	r3
   147b6:	e022      	b.n	147fe <_ZN14Calendar_Class4InitEv+0x132>
	}
	else
	{
		if (lastTimestamp<currentTimestamp)
   147b8:	687b      	ldr	r3, [r7, #4]
   147ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   147be:	687b      	ldr	r3, [r7, #4]
   147c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   147c4:	429a      	cmp	r2, r3
   147c6:	d206      	bcs.n	147d6 <_ZN14Calendar_Class4InitEv+0x10a>
		{
			SetDateTime(&compilationDateTime);
   147c8:	687b      	ldr	r3, [r7, #4]
   147ca:	3374      	adds	r3, #116	; 0x74
   147cc:	4619      	mov	r1, r3
   147ce:	6878      	ldr	r0, [r7, #4]
   147d0:	4b16      	ldr	r3, [pc, #88]	; (1482c <_ZN14Calendar_Class4InitEv+0x160>)
   147d2:	4798      	blx	r3
   147d4:	e013      	b.n	147fe <_ZN14Calendar_Class4InitEv+0x132>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   147d6:	687b      	ldr	r3, [r7, #4]
   147d8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   147dc:	687b      	ldr	r3, [r7, #4]
   147de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   147e0:	429a      	cmp	r2, r3
   147e2:	d106      	bne.n	147f2 <_ZN14Calendar_Class4InitEv+0x126>
			{
				SetDateTime(&compilationDateTime);
   147e4:	687b      	ldr	r3, [r7, #4]
   147e6:	3374      	adds	r3, #116	; 0x74
   147e8:	4619      	mov	r1, r3
   147ea:	6878      	ldr	r0, [r7, #4]
   147ec:	4b0f      	ldr	r3, [pc, #60]	; (1482c <_ZN14Calendar_Class4InitEv+0x160>)
   147ee:	4798      	blx	r3
   147f0:	e005      	b.n	147fe <_ZN14Calendar_Class4InitEv+0x132>
			} 
			else
			{
				SetDateTime(&lastDateTime);
   147f2:	687b      	ldr	r3, [r7, #4]
   147f4:	3360      	adds	r3, #96	; 0x60
   147f6:	4619      	mov	r1, r3
   147f8:	6878      	ldr	r0, [r7, #4]
   147fa:	4b0c      	ldr	r3, [pc, #48]	; (1482c <_ZN14Calendar_Class4InitEv+0x160>)
   147fc:	4798      	blx	r3
			}
		
		}
	}
	enlapsedTime=false;
   147fe:	687b      	ldr	r3, [r7, #4]
   14800:	2200      	movs	r2, #0
   14802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SaveCurrentDateTime();
   14806:	687b      	ldr	r3, [r7, #4]
   14808:	4618      	mov	r0, r3
   1480a:	4b09      	ldr	r3, [pc, #36]	; (14830 <_ZN14Calendar_Class4InitEv+0x164>)
   1480c:	4798      	blx	r3
	
}
   1480e:	bf00      	nop
   14810:	3708      	adds	r7, #8
   14812:	46bd      	mov	sp, r7
   14814:	bd80      	pop	{r7, pc}
   14816:	bf00      	nop
   14818:	20004e70 	.word	0x20004e70
   1481c:	00004a75 	.word	0x00004a75
   14820:	00014835 	.word	0x00014835
   14824:	00015055 	.word	0x00015055
   14828:	000148db 	.word	0x000148db
   1482c:	00014ad1 	.word	0x00014ad1
   14830:	00014fe5 	.word	0x00014fe5

00014834 <_ZN14Calendar_Class11InitMaxDateEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitMaxDate(void){
   14834:	b480      	push	{r7}
   14836:	b083      	sub	sp, #12
   14838:	af00      	add	r7, sp, #0
   1483a:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   1483c:	687b      	ldr	r3, [r7, #4]
   1483e:	f640 0202 	movw	r2, #2050	; 0x802
   14842:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   14846:	687b      	ldr	r3, [r7, #4]
   14848:	220c      	movs	r2, #12
   1484a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   1484e:	687b      	ldr	r3, [r7, #4]
   14850:	221f      	movs	r2, #31
   14852:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   14856:	687b      	ldr	r3, [r7, #4]
   14858:	220c      	movs	r2, #12
   1485a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   1485e:	687b      	ldr	r3, [r7, #4]
   14860:	223b      	movs	r2, #59	; 0x3b
   14862:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   14866:	687b      	ldr	r3, [r7, #4]
   14868:	223b      	movs	r2, #59	; 0x3b
   1486a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   1486e:	687b      	ldr	r3, [r7, #4]
   14870:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14874:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   14878:	687b      	ldr	r3, [r7, #4]
   1487a:	22ff      	movs	r2, #255	; 0xff
   1487c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   14880:	687b      	ldr	r3, [r7, #4]
   14882:	22ff      	movs	r2, #255	; 0xff
   14884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   14888:	687b      	ldr	r3, [r7, #4]
   1488a:	22ff      	movs	r2, #255	; 0xff
   1488c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   14890:	687b      	ldr	r3, [r7, #4]
   14892:	22ff      	movs	r2, #255	; 0xff
   14894:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   14898:	687b      	ldr	r3, [r7, #4]
   1489a:	22ff      	movs	r2, #255	; 0xff
   1489c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   148a0:	687b      	ldr	r3, [r7, #4]
   148a2:	2200      	movs	r2, #0
   148a4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   148a8:	687b      	ldr	r3, [r7, #4]
   148aa:	2200      	movs	r2, #0
   148ac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   148b0:	687b      	ldr	r3, [r7, #4]
   148b2:	2200      	movs	r2, #0
   148b4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   148b8:	687b      	ldr	r3, [r7, #4]
   148ba:	2200      	movs	r2, #0
   148bc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   148c0:	687b      	ldr	r3, [r7, #4]
   148c2:	2200      	movs	r2, #0
   148c4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   148c8:	687b      	ldr	r3, [r7, #4]
   148ca:	2200      	movs	r2, #0
   148cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   148d0:	bf00      	nop
   148d2:	370c      	adds	r7, #12
   148d4:	46bd      	mov	sp, r7
   148d6:	bc80      	pop	{r7}
   148d8:	4770      	bx	lr

000148da <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   148da:	b480      	push	{r7}
   148dc:	b083      	sub	sp, #12
   148de:	af00      	add	r7, sp, #0
   148e0:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   148e2:	2332      	movs	r3, #50	; 0x32
   148e4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   148e8:	4613      	mov	r3, r2
   148ea:	009b      	lsls	r3, r3, #2
   148ec:	4413      	add	r3, r2
   148ee:	005b      	lsls	r3, r3, #1
   148f0:	461a      	mov	r2, r3
   148f2:	2330      	movs	r3, #48	; 0x30
   148f4:	3b30      	subs	r3, #48	; 0x30
   148f6:	441a      	add	r2, r3
   148f8:	4613      	mov	r3, r2
   148fa:	009b      	lsls	r3, r3, #2
   148fc:	4413      	add	r3, r2
   148fe:	005b      	lsls	r3, r3, #1
   14900:	461a      	mov	r2, r3
   14902:	2332      	movs	r3, #50	; 0x32
   14904:	3b30      	subs	r3, #48	; 0x30
   14906:	4413      	add	r3, r2
   14908:	b29b      	uxth	r3, r3
   1490a:	461a      	mov	r2, r3
   1490c:	0092      	lsls	r2, r2, #2
   1490e:	4413      	add	r3, r2
   14910:	005b      	lsls	r3, r3, #1
   14912:	b29a      	uxth	r2, r3
   14914:	2330      	movs	r3, #48	; 0x30
   14916:	b29b      	uxth	r3, r3
   14918:	4413      	add	r3, r2
   1491a:	b29b      	uxth	r3, r3
   1491c:	3b30      	subs	r3, #48	; 0x30
   1491e:	b29a      	uxth	r2, r3
   14920:	687b      	ldr	r3, [r7, #4]
   14922:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   14926:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   14928:	2b6e      	cmp	r3, #110	; 0x6e
   1492a:	d106      	bne.n	1493a <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   1492c:	2363      	movs	r3, #99	; 0x63
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1492e:	2b61      	cmp	r3, #97	; 0x61
   14930:	d101      	bne.n	14936 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   14932:	2301      	movs	r3, #1
   14934:	e02f      	b.n	14996 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   14936:	2306      	movs	r3, #6
   14938:	e02d      	b.n	14996 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   1493a:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1493c:	2b62      	cmp	r3, #98	; 0x62
   1493e:	d029      	beq.n	14994 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   14940:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   14942:	2b72      	cmp	r3, #114	; 0x72
   14944:	d106      	bne.n	14954 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   14946:	234f      	movs	r3, #79	; 0x4f
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   14948:	2b4d      	cmp	r3, #77	; 0x4d
   1494a:	d101      	bne.n	14950 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   1494c:	2303      	movs	r3, #3
   1494e:	e022      	b.n	14996 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   14950:	2304      	movs	r3, #4
   14952:	e020      	b.n	14996 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   14954:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   14956:	2b79      	cmp	r3, #121	; 0x79
   14958:	d01a      	beq.n	14990 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   1495a:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1495c:	2b6c      	cmp	r3, #108	; 0x6c
   1495e:	d015      	beq.n	1498c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   14960:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   14962:	2b67      	cmp	r3, #103	; 0x67
   14964:	d010      	beq.n	14988 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   14966:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   14968:	2b70      	cmp	r3, #112	; 0x70
   1496a:	d00b      	beq.n	14984 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   1496c:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1496e:	2b74      	cmp	r3, #116	; 0x74
   14970:	d006      	beq.n	14980 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   14972:	2374      	movs	r3, #116	; 0x74
   14974:	2b76      	cmp	r3, #118	; 0x76
   14976:	d101      	bne.n	1497c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   14978:	230b      	movs	r3, #11
   1497a:	e00c      	b.n	14996 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1497c:	230c      	movs	r3, #12
   1497e:	e00a      	b.n	14996 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   14980:	230a      	movs	r3, #10
   14982:	e008      	b.n	14996 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   14984:	2309      	movs	r3, #9
   14986:	e006      	b.n	14996 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   14988:	2308      	movs	r3, #8
   1498a:	e004      	b.n	14996 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1498c:	2307      	movs	r3, #7
   1498e:	e002      	b.n	14996 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   14990:	2305      	movs	r3, #5
   14992:	e000      	b.n	14996 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   14994:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   14996:	687a      	ldr	r2, [r7, #4]
   14998:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   1499c:	2320      	movs	r3, #32
   1499e:	2b20      	cmp	r3, #32
   149a0:	d008      	beq.n	149b4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   149a2:	2320      	movs	r3, #32
   149a4:	3b30      	subs	r3, #48	; 0x30
   149a6:	b2db      	uxtb	r3, r3
   149a8:	461a      	mov	r2, r3
   149aa:	0092      	lsls	r2, r2, #2
   149ac:	4413      	add	r3, r2
   149ae:	005b      	lsls	r3, r3, #1
   149b0:	b2db      	uxtb	r3, r3
   149b2:	e000      	b.n	149b6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   149b4:	2300      	movs	r3, #0
   149b6:	2232      	movs	r2, #50	; 0x32
   149b8:	4413      	add	r3, r2
   149ba:	b2db      	uxtb	r3, r3
   149bc:	3b30      	subs	r3, #48	; 0x30
   149be:	b2da      	uxtb	r2, r3
   149c0:	687b      	ldr	r3, [r7, #4]
   149c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   149c6:	2331      	movs	r3, #49	; 0x31
   149c8:	3b30      	subs	r3, #48	; 0x30
   149ca:	b2db      	uxtb	r3, r3
   149cc:	461a      	mov	r2, r3
   149ce:	0092      	lsls	r2, r2, #2
   149d0:	4413      	add	r3, r2
   149d2:	005b      	lsls	r3, r3, #1
   149d4:	b2db      	uxtb	r3, r3
   149d6:	2235      	movs	r2, #53	; 0x35
   149d8:	4413      	add	r3, r2
   149da:	b2db      	uxtb	r3, r3
   149dc:	3b30      	subs	r3, #48	; 0x30
   149de:	b2da      	uxtb	r2, r3
   149e0:	687b      	ldr	r3, [r7, #4]
   149e2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   149e6:	2330      	movs	r3, #48	; 0x30
   149e8:	3b30      	subs	r3, #48	; 0x30
   149ea:	b2db      	uxtb	r3, r3
   149ec:	461a      	mov	r2, r3
   149ee:	0092      	lsls	r2, r2, #2
   149f0:	4413      	add	r3, r2
   149f2:	005b      	lsls	r3, r3, #1
   149f4:	b2db      	uxtb	r3, r3
   149f6:	2239      	movs	r2, #57	; 0x39
   149f8:	4413      	add	r3, r2
   149fa:	b2db      	uxtb	r3, r3
   149fc:	3b30      	subs	r3, #48	; 0x30
   149fe:	b2da      	uxtb	r2, r3
   14a00:	687b      	ldr	r3, [r7, #4]
   14a02:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   14a06:	2331      	movs	r3, #49	; 0x31
   14a08:	3b30      	subs	r3, #48	; 0x30
   14a0a:	b2db      	uxtb	r3, r3
   14a0c:	461a      	mov	r2, r3
   14a0e:	0092      	lsls	r2, r2, #2
   14a10:	4413      	add	r3, r2
   14a12:	005b      	lsls	r3, r3, #1
   14a14:	b2db      	uxtb	r3, r3
   14a16:	2234      	movs	r2, #52	; 0x34
   14a18:	4413      	add	r3, r2
   14a1a:	b2db      	uxtb	r3, r3
   14a1c:	3b30      	subs	r3, #48	; 0x30
   14a1e:	b2da      	uxtb	r2, r3
   14a20:	687b      	ldr	r3, [r7, #4]
   14a22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
   14a26:	bf00      	nop
   14a28:	370c      	adds	r7, #12
   14a2a:	46bd      	mov	sp, r7
   14a2c:	bc80      	pop	{r7}
   14a2e:	4770      	bx	lr

00014a30 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   14a30:	b580      	push	{r7, lr}
   14a32:	b082      	sub	sp, #8
   14a34:	af00      	add	r7, sp, #0
   14a36:	6078      	str	r0, [r7, #4]
   14a38:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   14a3a:	687b      	ldr	r3, [r7, #4]
   14a3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   14a40:	6839      	ldr	r1, [r7, #0]
   14a42:	4618      	mov	r0, r3
   14a44:	4b03      	ldr	r3, [pc, #12]	; (14a54 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   14a46:	4798      	blx	r3
   14a48:	4603      	mov	r3, r0
}
   14a4a:	4618      	mov	r0, r3
   14a4c:	3708      	adds	r7, #8
   14a4e:	46bd      	mov	sp, r7
   14a50:	bd80      	pop	{r7, pc}
   14a52:	bf00      	nop
   14a54:	00004bc5 	.word	0x00004bc5

00014a58 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   14a58:	b480      	push	{r7}
   14a5a:	b083      	sub	sp, #12
   14a5c:	af00      	add	r7, sp, #0
   14a5e:	6078      	str	r0, [r7, #4]
   14a60:	460b      	mov	r3, r1
   14a62:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   14a64:	887b      	ldrh	r3, [r7, #2]
   14a66:	f003 0303 	and.w	r3, r3, #3
   14a6a:	2b00      	cmp	r3, #0
   14a6c:	d001      	beq.n	14a72 <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   14a6e:	2300      	movs	r3, #0
   14a70:	e000      	b.n	14a74 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   14a72:	2301      	movs	r3, #1
	}
}
   14a74:	4618      	mov	r0, r3
   14a76:	370c      	adds	r7, #12
   14a78:	46bd      	mov	sp, r7
   14a7a:	bc80      	pop	{r7}
   14a7c:	4770      	bx	lr
	...

00014a80 <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   14a80:	b580      	push	{r7, lr}
   14a82:	b082      	sub	sp, #8
   14a84:	af00      	add	r7, sp, #0
   14a86:	6078      	str	r0, [r7, #4]
   14a88:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   14a8a:	687b      	ldr	r3, [r7, #4]
   14a8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   14a90:	6839      	ldr	r1, [r7, #0]
   14a92:	4618      	mov	r0, r3
   14a94:	4b03      	ldr	r3, [pc, #12]	; (14aa4 <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   14a96:	4798      	blx	r3
   14a98:	4603      	mov	r3, r0
}
   14a9a:	4618      	mov	r0, r3
   14a9c:	3708      	adds	r7, #8
   14a9e:	46bd      	mov	sp, r7
   14aa0:	bd80      	pop	{r7, pc}
   14aa2:	bf00      	nop
   14aa4:	00004ab5 	.word	0x00004ab5

00014aa8 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   14aa8:	b580      	push	{r7, lr}
   14aaa:	b082      	sub	sp, #8
   14aac:	af00      	add	r7, sp, #0
   14aae:	6078      	str	r0, [r7, #4]
   14ab0:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   14ab2:	687b      	ldr	r3, [r7, #4]
   14ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   14ab8:	6839      	ldr	r1, [r7, #0]
   14aba:	4618      	mov	r0, r3
   14abc:	4b03      	ldr	r3, [pc, #12]	; (14acc <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   14abe:	4798      	blx	r3
   14ac0:	4603      	mov	r3, r0
}
   14ac2:	4618      	mov	r0, r3
   14ac4:	3708      	adds	r7, #8
   14ac6:	46bd      	mov	sp, r7
   14ac8:	bd80      	pop	{r7, pc}
   14aca:	bf00      	nop
   14acc:	00004b3d 	.word	0x00004b3d

00014ad0 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   14ad0:	b580      	push	{r7, lr}
   14ad2:	b084      	sub	sp, #16
   14ad4:	af00      	add	r7, sp, #0
   14ad6:	6078      	str	r0, [r7, #4]
   14ad8:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   14ada:	683a      	ldr	r2, [r7, #0]
   14adc:	f107 030c 	add.w	r3, r7, #12
   14ae0:	3204      	adds	r2, #4
   14ae2:	6810      	ldr	r0, [r2, #0]
   14ae4:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   14ae6:	f107 030c 	add.w	r3, r7, #12
   14aea:	4619      	mov	r1, r3
   14aec:	6878      	ldr	r0, [r7, #4]
   14aee:	4b0a      	ldr	r3, [pc, #40]	; (14b18 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   14af0:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   14af2:	683a      	ldr	r2, [r7, #0]
   14af4:	f107 0308 	add.w	r3, r7, #8
   14af8:	8811      	ldrh	r1, [r2, #0]
   14afa:	7892      	ldrb	r2, [r2, #2]
   14afc:	8019      	strh	r1, [r3, #0]
   14afe:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   14b00:	f107 0308 	add.w	r3, r7, #8
   14b04:	4619      	mov	r1, r3
   14b06:	6878      	ldr	r0, [r7, #4]
   14b08:	4b04      	ldr	r3, [pc, #16]	; (14b1c <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   14b0a:	4798      	blx	r3
   14b0c:	4603      	mov	r3, r0
			
}
   14b0e:	4618      	mov	r0, r3
   14b10:	3710      	adds	r7, #16
   14b12:	46bd      	mov	sp, r7
   14b14:	bd80      	pop	{r7, pc}
   14b16:	bf00      	nop
   14b18:	00014aa9 	.word	0x00014aa9
   14b1c:	00014a81 	.word	0x00014a81

00014b20 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   14b20:	b580      	push	{r7, lr}
   14b22:	b086      	sub	sp, #24
   14b24:	af00      	add	r7, sp, #0
   14b26:	6078      	str	r0, [r7, #4]
   14b28:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   14b2a:	2300      	movs	r3, #0
   14b2c:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   14b2e:	2300      	movs	r3, #0
   14b30:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   14b32:	683b      	ldr	r3, [r7, #0]
   14b34:	88db      	ldrh	r3, [r3, #6]
   14b36:	b2da      	uxtb	r2, r3
   14b38:	687b      	ldr	r3, [r7, #4]
   14b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   14b3e:	699b      	ldr	r3, [r3, #24]
   14b40:	b2db      	uxtb	r3, r3
   14b42:	1ad3      	subs	r3, r2, r3
   14b44:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   14b46:	683b      	ldr	r3, [r7, #0]
   14b48:	795b      	ldrb	r3, [r3, #5]
   14b4a:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   14b4c:	683b      	ldr	r3, [r7, #0]
   14b4e:	791b      	ldrb	r3, [r3, #4]
   14b50:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   14b52:	683b      	ldr	r3, [r7, #0]
   14b54:	789b      	ldrb	r3, [r3, #2]
   14b56:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   14b58:	683b      	ldr	r3, [r7, #0]
   14b5a:	785b      	ldrb	r3, [r3, #1]
   14b5c:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   14b5e:	683b      	ldr	r3, [r7, #0]
   14b60:	781b      	ldrb	r3, [r3, #0]
   14b62:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   14b64:	2300      	movs	r3, #0
   14b66:	613b      	str	r3, [r7, #16]
   14b68:	7bfa      	ldrb	r2, [r7, #15]
   14b6a:	693b      	ldr	r3, [r7, #16]
   14b6c:	429a      	cmp	r2, r3
   14b6e:	d91e      	bls.n	14bae <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   14b70:	687b      	ldr	r3, [r7, #4]
   14b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   14b76:	699b      	ldr	r3, [r3, #24]
   14b78:	b29a      	uxth	r2, r3
   14b7a:	693b      	ldr	r3, [r7, #16]
   14b7c:	b29b      	uxth	r3, r3
   14b7e:	4413      	add	r3, r2
   14b80:	b29b      	uxth	r3, r3
   14b82:	4619      	mov	r1, r3
   14b84:	6878      	ldr	r0, [r7, #4]
   14b86:	4b27      	ldr	r3, [pc, #156]	; (14c24 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   14b88:	4798      	blx	r3
   14b8a:	4603      	mov	r3, r0
   14b8c:	2b00      	cmp	r3, #0
   14b8e:	d006      	beq.n	14b9e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   14b90:	697b      	ldr	r3, [r7, #20]
   14b92:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   14b96:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   14b9a:	617b      	str	r3, [r7, #20]
   14b9c:	e003      	b.n	14ba6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   14b9e:	697a      	ldr	r2, [r7, #20]
   14ba0:	4b21      	ldr	r3, [pc, #132]	; (14c28 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   14ba2:	4413      	add	r3, r2
   14ba4:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   14ba6:	693b      	ldr	r3, [r7, #16]
   14ba8:	3301      	adds	r3, #1
   14baa:	613b      	str	r3, [r7, #16]
   14bac:	e7dc      	b.n	14b68 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   14bae:	2301      	movs	r3, #1
   14bb0:	613b      	str	r3, [r7, #16]
   14bb2:	7bba      	ldrb	r2, [r7, #14]
   14bb4:	693b      	ldr	r3, [r7, #16]
   14bb6:	429a      	cmp	r2, r3
   14bb8:	d910      	bls.n	14bdc <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   14bba:	683b      	ldr	r3, [r7, #0]
   14bbc:	88db      	ldrh	r3, [r3, #6]
   14bbe:	4619      	mov	r1, r3
   14bc0:	693b      	ldr	r3, [r7, #16]
   14bc2:	b2db      	uxtb	r3, r3
   14bc4:	461a      	mov	r2, r3
   14bc6:	6878      	ldr	r0, [r7, #4]
   14bc8:	4b18      	ldr	r3, [pc, #96]	; (14c2c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   14bca:	4798      	blx	r3
   14bcc:	4602      	mov	r2, r0
   14bce:	697b      	ldr	r3, [r7, #20]
   14bd0:	4413      	add	r3, r2
   14bd2:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   14bd4:	693b      	ldr	r3, [r7, #16]
   14bd6:	3301      	adds	r3, #1
   14bd8:	613b      	str	r3, [r7, #16]
   14bda:	e7ea      	b.n	14bb2 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   14bdc:	7b7b      	ldrb	r3, [r7, #13]
   14bde:	3b01      	subs	r3, #1
   14be0:	4a13      	ldr	r2, [pc, #76]	; (14c30 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   14be2:	fb02 f303 	mul.w	r3, r2, r3
   14be6:	461a      	mov	r2, r3
   14be8:	697b      	ldr	r3, [r7, #20]
   14bea:	4413      	add	r3, r2
   14bec:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   14bee:	7b3b      	ldrb	r3, [r7, #12]
   14bf0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   14bf4:	fb02 f303 	mul.w	r3, r2, r3
   14bf8:	461a      	mov	r2, r3
   14bfa:	697b      	ldr	r3, [r7, #20]
   14bfc:	4413      	add	r3, r2
   14bfe:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   14c00:	7afa      	ldrb	r2, [r7, #11]
   14c02:	4613      	mov	r3, r2
   14c04:	011b      	lsls	r3, r3, #4
   14c06:	1a9b      	subs	r3, r3, r2
   14c08:	009b      	lsls	r3, r3, #2
   14c0a:	461a      	mov	r2, r3
   14c0c:	697b      	ldr	r3, [r7, #20]
   14c0e:	4413      	add	r3, r2
   14c10:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   14c12:	7abb      	ldrb	r3, [r7, #10]
   14c14:	697a      	ldr	r2, [r7, #20]
   14c16:	4413      	add	r3, r2
   14c18:	617b      	str	r3, [r7, #20]

	return tmp;
   14c1a:	697b      	ldr	r3, [r7, #20]
}
   14c1c:	4618      	mov	r0, r3
   14c1e:	3718      	adds	r7, #24
   14c20:	46bd      	mov	sp, r7
   14c22:	bd80      	pop	{r7, pc}
   14c24:	00014a59 	.word	0x00014a59
   14c28:	01e13380 	.word	0x01e13380
   14c2c:	00014c35 	.word	0x00014c35
   14c30:	00015180 	.word	0x00015180

00014c34 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   14c34:	b580      	push	{r7, lr}
   14c36:	b086      	sub	sp, #24
   14c38:	af00      	add	r7, sp, #0
   14c3a:	60f8      	str	r0, [r7, #12]
   14c3c:	60b9      	str	r1, [r7, #8]
   14c3e:	4613      	mov	r3, r2
   14c40:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   14c42:	2300      	movs	r3, #0
   14c44:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   14c46:	68bb      	ldr	r3, [r7, #8]
   14c48:	b29b      	uxth	r3, r3
   14c4a:	4619      	mov	r1, r3
   14c4c:	68f8      	ldr	r0, [r7, #12]
   14c4e:	4b2f      	ldr	r3, [pc, #188]	; (14d0c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   14c50:	4798      	blx	r3
   14c52:	4603      	mov	r3, r0
   14c54:	2b00      	cmp	r3, #0
   14c56:	d028      	beq.n	14caa <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   14c58:	79fb      	ldrb	r3, [r7, #7]
   14c5a:	3b01      	subs	r3, #1
   14c5c:	2b0b      	cmp	r3, #11
   14c5e:	d84c      	bhi.n	14cfa <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   14c60:	a201      	add	r2, pc, #4	; (adr r2, 14c68 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   14c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14c66:	bf00      	nop
   14c68:	00014c99 	.word	0x00014c99
   14c6c:	00014c9f 	.word	0x00014c9f
   14c70:	00014c99 	.word	0x00014c99
   14c74:	00014ca5 	.word	0x00014ca5
   14c78:	00014c99 	.word	0x00014c99
   14c7c:	00014ca5 	.word	0x00014ca5
   14c80:	00014c99 	.word	0x00014c99
   14c84:	00014c99 	.word	0x00014c99
   14c88:	00014ca5 	.word	0x00014ca5
   14c8c:	00014c99 	.word	0x00014c99
   14c90:	00014ca5 	.word	0x00014ca5
   14c94:	00014c99 	.word	0x00014c99
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   14c98:	4b1d      	ldr	r3, [pc, #116]	; (14d10 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   14c9a:	617b      	str	r3, [r7, #20]
			break;
   14c9c:	e030      	b.n	14d00 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   14c9e:	4b1d      	ldr	r3, [pc, #116]	; (14d14 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   14ca0:	617b      	str	r3, [r7, #20]
			break;
   14ca2:	e02d      	b.n	14d00 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   14ca4:	4b1c      	ldr	r3, [pc, #112]	; (14d18 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   14ca6:	617b      	str	r3, [r7, #20]
			break;
   14ca8:	e02a      	b.n	14d00 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   14caa:	79fb      	ldrb	r3, [r7, #7]
   14cac:	3b01      	subs	r3, #1
   14cae:	2b0b      	cmp	r3, #11
   14cb0:	d825      	bhi.n	14cfe <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   14cb2:	a201      	add	r2, pc, #4	; (adr r2, 14cb8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   14cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14cb8:	00014ce9 	.word	0x00014ce9
   14cbc:	00014cef 	.word	0x00014cef
   14cc0:	00014ce9 	.word	0x00014ce9
   14cc4:	00014cf5 	.word	0x00014cf5
   14cc8:	00014ce9 	.word	0x00014ce9
   14ccc:	00014cf5 	.word	0x00014cf5
   14cd0:	00014ce9 	.word	0x00014ce9
   14cd4:	00014ce9 	.word	0x00014ce9
   14cd8:	00014cf5 	.word	0x00014cf5
   14cdc:	00014ce9 	.word	0x00014ce9
   14ce0:	00014cf5 	.word	0x00014cf5
   14ce4:	00014ce9 	.word	0x00014ce9
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   14ce8:	4b09      	ldr	r3, [pc, #36]	; (14d10 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   14cea:	617b      	str	r3, [r7, #20]
			break;
   14cec:	e008      	b.n	14d00 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   14cee:	4b0b      	ldr	r3, [pc, #44]	; (14d1c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   14cf0:	617b      	str	r3, [r7, #20]
			break;
   14cf2:	e005      	b.n	14d00 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   14cf4:	4b08      	ldr	r3, [pc, #32]	; (14d18 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   14cf6:	617b      	str	r3, [r7, #20]
			break;
   14cf8:	e002      	b.n	14d00 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   14cfa:	bf00      	nop
   14cfc:	e000      	b.n	14d00 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   14cfe:	bf00      	nop
		}
	}

	return sec_in_month;
   14d00:	697b      	ldr	r3, [r7, #20]
}
   14d02:	4618      	mov	r0, r3
   14d04:	3718      	adds	r7, #24
   14d06:	46bd      	mov	sp, r7
   14d08:	bd80      	pop	{r7, pc}
   14d0a:	bf00      	nop
   14d0c:	00014a59 	.word	0x00014a59
   14d10:	0028de80 	.word	0x0028de80
   14d14:	00263b80 	.word	0x00263b80
   14d18:	00278d00 	.word	0x00278d00
   14d1c:	0024ea00 	.word	0x0024ea00

00014d20 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.min   = tmp_minutes;
	dt->time.sec   = tmp;

	return ERR_NONE;
}
   14d20:	b580      	push	{r7, lr}
   14d22:	b082      	sub	sp, #8
   14d24:	af00      	add	r7, sp, #0
   14d26:	6078      	str	r0, [r7, #4]
   14d28:	6039      	str	r1, [r7, #0]
   14d2a:	687b      	ldr	r3, [r7, #4]
   14d2c:	2b01      	cmp	r3, #1
   14d2e:	d10d      	bne.n	14d4c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   14d30:	683b      	ldr	r3, [r7, #0]
   14d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14d36:	4293      	cmp	r3, r2
   14d38:	d108      	bne.n	14d4c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   14d3a:	4906      	ldr	r1, [pc, #24]	; (14d54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   14d3c:	4806      	ldr	r0, [pc, #24]	; (14d58 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   14d3e:	4b07      	ldr	r3, [pc, #28]	; (14d5c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   14d40:	4798      	blx	r3
   14d42:	4a07      	ldr	r2, [pc, #28]	; (14d60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   14d44:	4907      	ldr	r1, [pc, #28]	; (14d64 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   14d46:	4804      	ldr	r0, [pc, #16]	; (14d58 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   14d48:	4b07      	ldr	r3, [pc, #28]	; (14d68 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   14d4a:	4798      	blx	r3
   14d4c:	bf00      	nop
   14d4e:	3708      	adds	r7, #8
   14d50:	46bd      	mov	sp, r7
   14d52:	bd80      	pop	{r7, pc}
   14d54:	200057dc 	.word	0x200057dc
   14d58:	20005120 	.word	0x20005120
   14d5c:	00014669 	.word	0x00014669
   14d60:	20000000 	.word	0x20000000
   14d64:	000146a5 	.word	0x000146a5
   14d68:	000167bd 	.word	0x000167bd

00014d6c <_GLOBAL__sub_I_ptrCalendarClass>:
   14d6c:	b580      	push	{r7, lr}
   14d6e:	af00      	add	r7, sp, #0
   14d70:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14d74:	2001      	movs	r0, #1
   14d76:	4b01      	ldr	r3, [pc, #4]	; (14d7c <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   14d78:	4798      	blx	r3
   14d7a:	bd80      	pop	{r7, pc}
   14d7c:	00014d21 	.word	0x00014d21

00014d80 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   14d80:	b480      	push	{r7}
   14d82:	b083      	sub	sp, #12
   14d84:	af00      	add	r7, sp, #0
   14d86:	6078      	str	r0, [r7, #4]
   14d88:	4a04      	ldr	r2, [pc, #16]	; (14d9c <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   14d8a:	687b      	ldr	r3, [r7, #4]
   14d8c:	601a      	str	r2, [r3, #0]
{
} //~D
   14d8e:	687b      	ldr	r3, [r7, #4]
   14d90:	4618      	mov	r0, r3
   14d92:	370c      	adds	r7, #12
   14d94:	46bd      	mov	sp, r7
   14d96:	bc80      	pop	{r7}
   14d98:	4770      	bx	lr
   14d9a:	bf00      	nop
   14d9c:	0001e4cc 	.word	0x0001e4cc

00014da0 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   14da0:	b480      	push	{r7}
   14da2:	b083      	sub	sp, #12
   14da4:	af00      	add	r7, sp, #0
   14da6:	6078      	str	r0, [r7, #4]
   14da8:	4a04      	ldr	r2, [pc, #16]	; (14dbc <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   14daa:	687b      	ldr	r3, [r7, #4]
   14dac:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   14dae:	687b      	ldr	r3, [r7, #4]
   14db0:	4618      	mov	r0, r3
   14db2:	370c      	adds	r7, #12
   14db4:	46bd      	mov	sp, r7
   14db6:	bc80      	pop	{r7}
   14db8:	4770      	bx	lr
   14dba:	bf00      	nop
   14dbc:	0001e4cc 	.word	0x0001e4cc

00014dc0 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv>:

tick_t	DateTimeLog_Class::GetPowerInterrupTime(void){
   14dc0:	b590      	push	{r4, r7, lr}
   14dc2:	b085      	sub	sp, #20
   14dc4:	af00      	add	r7, sp, #0
   14dc6:	6078      	str	r0, [r7, #4]

	GetDateTime(&dateTime);
   14dc8:	687b      	ldr	r3, [r7, #4]
   14dca:	681b      	ldr	r3, [r3, #0]
   14dcc:	681b      	ldr	r3, [r3, #0]
   14dce:	687a      	ldr	r2, [r7, #4]
   14dd0:	3226      	adds	r2, #38	; 0x26
   14dd2:	4611      	mov	r1, r2
   14dd4:	6878      	ldr	r0, [r7, #4]
   14dd6:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&dateTime);
   14dd8:	687b      	ldr	r3, [r7, #4]
   14dda:	681b      	ldr	r3, [r3, #0]
   14ddc:	3304      	adds	r3, #4
   14dde:	681b      	ldr	r3, [r3, #0]
   14de0:	687a      	ldr	r2, [r7, #4]
   14de2:	3226      	adds	r2, #38	; 0x26
   14de4:	4611      	mov	r1, r2
   14de6:	6878      	ldr	r0, [r7, #4]
   14de8:	4798      	blx	r3
   14dea:	4602      	mov	r2, r0
   14dec:	687b      	ldr	r3, [r7, #4]
   14dee:	609a      	str	r2, [r3, #8]
	ReadLastDateTime();
   14df0:	6878      	ldr	r0, [r7, #4]
   14df2:	4b1a      	ldr	r3, [pc, #104]	; (14e5c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x9c>)
   14df4:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   14df6:	687b      	ldr	r3, [r7, #4]
   14df8:	681b      	ldr	r3, [r3, #0]
   14dfa:	3304      	adds	r3, #4
   14dfc:	681b      	ldr	r3, [r3, #0]
   14dfe:	687a      	ldr	r2, [r7, #4]
   14e00:	322e      	adds	r2, #46	; 0x2e
   14e02:	4611      	mov	r1, r2
   14e04:	6878      	ldr	r0, [r7, #4]
   14e06:	4798      	blx	r3
   14e08:	4602      	mov	r2, r0
   14e0a:	687b      	ldr	r3, [r7, #4]
   14e0c:	60da      	str	r2, [r3, #12]
	tick_t diferencia;
	if (lastTimestamp==calendar.nullTimestamp)
   14e0e:	687b      	ldr	r3, [r7, #4]
   14e10:	68da      	ldr	r2, [r3, #12]
   14e12:	4b13      	ldr	r3, [pc, #76]	; (14e60 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa0>)
   14e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   14e16:	429a      	cmp	r2, r3
   14e18:	d103      	bne.n	14e22 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x62>
	{
		diferencia=UPDATE_TIME_MAX*2;
   14e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14e1e:	60fb      	str	r3, [r7, #12]
   14e20:	e016      	b.n	14e50 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x90>
	} 
	else
	{
		timeDifference=difftime((time_t)currentTimestamp,(time_t)lastTimestamp);
   14e22:	687b      	ldr	r3, [r7, #4]
   14e24:	689b      	ldr	r3, [r3, #8]
   14e26:	461a      	mov	r2, r3
   14e28:	687b      	ldr	r3, [r7, #4]
   14e2a:	68db      	ldr	r3, [r3, #12]
   14e2c:	4619      	mov	r1, r3
   14e2e:	4610      	mov	r0, r2
   14e30:	4b0c      	ldr	r3, [pc, #48]	; (14e64 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa4>)
   14e32:	4798      	blx	r3
   14e34:	4603      	mov	r3, r0
   14e36:	460c      	mov	r4, r1
   14e38:	687a      	ldr	r2, [r7, #4]
   14e3a:	e9c2 3406 	strd	r3, r4, [r2, #24]
		diferencia=(uint32_t)timeDifference;
   14e3e:	687b      	ldr	r3, [r7, #4]
   14e40:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
   14e44:	4a08      	ldr	r2, [pc, #32]	; (14e68 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa8>)
   14e46:	4618      	mov	r0, r3
   14e48:	4621      	mov	r1, r4
   14e4a:	4790      	blx	r2
   14e4c:	4603      	mov	r3, r0
   14e4e:	60fb      	str	r3, [r7, #12]
	}

	return	diferencia;
   14e50:	68fb      	ldr	r3, [r7, #12]
}
   14e52:	4618      	mov	r0, r3
   14e54:	3714      	adds	r7, #20
   14e56:	46bd      	mov	sp, r7
   14e58:	bd90      	pop	{r4, r7, pc}
   14e5a:	bf00      	nop
   14e5c:	00015055 	.word	0x00015055
   14e60:	20005120 	.word	0x20005120
   14e64:	0001888d 	.word	0x0001888d
   14e68:	00018305 	.word	0x00018305

00014e6c <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    abs(_Tp __x)
   14e6c:	b5b0      	push	{r4, r5, r7, lr}
   14e6e:	b082      	sub	sp, #8
   14e70:	af00      	add	r7, sp, #0
   14e72:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
   14e74:	4b07      	ldr	r3, [pc, #28]	; (14e94 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
   14e76:	6878      	ldr	r0, [r7, #4]
   14e78:	4798      	blx	r3
   14e7a:	4602      	mov	r2, r0
   14e7c:	460b      	mov	r3, r1
   14e7e:	4614      	mov	r4, r2
   14e80:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   14e84:	4623      	mov	r3, r4
   14e86:	462c      	mov	r4, r5
   14e88:	4618      	mov	r0, r3
   14e8a:	4621      	mov	r1, r4
   14e8c:	3708      	adds	r7, #8
   14e8e:	46bd      	mov	sp, r7
   14e90:	bdb0      	pop	{r4, r5, r7, pc}
   14e92:	bf00      	nop
   14e94:	00017cd9 	.word	0x00017cd9

00014e98 <_ZN17DateTimeLog_Class14WasInterruptedEv>:

bool	DateTimeLog_Class::WasInterrupted(void){
   14e98:	b5b0      	push	{r4, r5, r7, lr}
   14e9a:	b082      	sub	sp, #8
   14e9c:	af00      	add	r7, sp, #0
   14e9e:	6078      	str	r0, [r7, #4]
	
	if (abs(GetPowerInterrupTime()-UPDATE_TIME_MAX)>UPDATE_ERROR)
   14ea0:	6878      	ldr	r0, [r7, #4]
   14ea2:	4b12      	ldr	r3, [pc, #72]	; (14eec <_ZN17DateTimeLog_Class14WasInterruptedEv+0x54>)
   14ea4:	4798      	blx	r3
   14ea6:	4603      	mov	r3, r0
   14ea8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   14eac:	4618      	mov	r0, r3
   14eae:	4b10      	ldr	r3, [pc, #64]	; (14ef0 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x58>)
   14eb0:	4798      	blx	r3
   14eb2:	2301      	movs	r3, #1
   14eb4:	461d      	mov	r5, r3
   14eb6:	4c0f      	ldr	r4, [pc, #60]	; (14ef4 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x5c>)
   14eb8:	f04f 0200 	mov.w	r2, #0
   14ebc:	4b0e      	ldr	r3, [pc, #56]	; (14ef8 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x60>)
   14ebe:	47a0      	blx	r4
   14ec0:	4603      	mov	r3, r0
   14ec2:	2b00      	cmp	r3, #0
   14ec4:	d101      	bne.n	14eca <_ZN17DateTimeLog_Class14WasInterruptedEv+0x32>
   14ec6:	2300      	movs	r3, #0
   14ec8:	461d      	mov	r5, r3
   14eca:	b2eb      	uxtb	r3, r5
   14ecc:	2b00      	cmp	r3, #0
   14ece:	d003      	beq.n	14ed8 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x40>
	{
		powerInterrupt=true;
   14ed0:	687b      	ldr	r3, [r7, #4]
   14ed2:	2201      	movs	r2, #1
   14ed4:	711a      	strb	r2, [r3, #4]
   14ed6:	e002      	b.n	14ede <_ZN17DateTimeLog_Class14WasInterruptedEv+0x46>
	} 
	else
	{
		powerInterrupt=false;
   14ed8:	687b      	ldr	r3, [r7, #4]
   14eda:	2200      	movs	r2, #0
   14edc:	711a      	strb	r2, [r3, #4]
	}
	return	powerInterrupt;
   14ede:	687b      	ldr	r3, [r7, #4]
   14ee0:	791b      	ldrb	r3, [r3, #4]
   14ee2:	b2db      	uxtb	r3, r3
}
   14ee4:	4618      	mov	r0, r3
   14ee6:	3708      	adds	r7, #8
   14ee8:	46bd      	mov	sp, r7
   14eea:	bdb0      	pop	{r4, r5, r7, pc}
   14eec:	00014dc1 	.word	0x00014dc1
   14ef0:	00014e6d 	.word	0x00014e6d
   14ef4:	000182c5 	.word	0x000182c5
   14ef8:	40490000 	.word	0x40490000

00014efc <_ZN17DateTimeLog_Class20IncrementMemoryStackEv>:

uint32_t	DateTimeLog_Class::IncrementMemoryStack(){
   14efc:	b590      	push	{r4, r7, lr}
   14efe:	b085      	sub	sp, #20
   14f00:	af00      	add	r7, sp, #0
   14f02:	6078      	str	r0, [r7, #4]
	
	uint32_t r=	eeprom.ReadAddress((uint8_t*)&stackValue,stackAdress,1);
   14f04:	687b      	ldr	r3, [r7, #4]
   14f06:	f103 0122 	add.w	r1, r3, #34	; 0x22
   14f0a:	687b      	ldr	r3, [r7, #4]
   14f0c:	8c1a      	ldrh	r2, [r3, #32]
   14f0e:	2301      	movs	r3, #1
   14f10:	480c      	ldr	r0, [pc, #48]	; (14f44 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   14f12:	4c0d      	ldr	r4, [pc, #52]	; (14f48 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x4c>)
   14f14:	47a0      	blx	r4
   14f16:	60f8      	str	r0, [r7, #12]
	stackValue=(uint16_t)RollStack();
   14f18:	6878      	ldr	r0, [r7, #4]
   14f1a:	4b0c      	ldr	r3, [pc, #48]	; (14f4c <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x50>)
   14f1c:	4798      	blx	r3
   14f1e:	4603      	mov	r3, r0
   14f20:	b29a      	uxth	r2, r3
   14f22:	687b      	ldr	r3, [r7, #4]
   14f24:	845a      	strh	r2, [r3, #34]	; 0x22
	r=	eeprom.WriteAddress((uint8_t*)&stackValue,stackAdress,1);
   14f26:	687b      	ldr	r3, [r7, #4]
   14f28:	f103 0122 	add.w	r1, r3, #34	; 0x22
   14f2c:	687b      	ldr	r3, [r7, #4]
   14f2e:	8c1a      	ldrh	r2, [r3, #32]
   14f30:	2301      	movs	r3, #1
   14f32:	4804      	ldr	r0, [pc, #16]	; (14f44 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   14f34:	4c06      	ldr	r4, [pc, #24]	; (14f50 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x54>)
   14f36:	47a0      	blx	r4
   14f38:	60f8      	str	r0, [r7, #12]
	return r;
   14f3a:	68fb      	ldr	r3, [r7, #12]
}
   14f3c:	4618      	mov	r0, r3
   14f3e:	3714      	adds	r7, #20
   14f40:	46bd      	mov	sp, r7
   14f42:	bd90      	pop	{r4, r7, pc}
   14f44:	20004e70 	.word	0x20004e70
   14f48:	00013b25 	.word	0x00013b25
   14f4c:	00014f55 	.word	0x00014f55
   14f50:	00013a21 	.word	0x00013a21

00014f54 <_ZN17DateTimeLog_Class9RollStackEv>:
 uint8_t DateTimeLog_Class::RollStack(void)
 {
   14f54:	b480      	push	{r7}
   14f56:	b083      	sub	sp, #12
   14f58:	af00      	add	r7, sp, #0
   14f5a:	6078      	str	r0, [r7, #4]
	 return (uint8_t)(stackValue +1 ) % AT24MAC_BUFFER_SIZE;
   14f5c:	687b      	ldr	r3, [r7, #4]
   14f5e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   14f60:	b2db      	uxtb	r3, r3
   14f62:	3301      	adds	r3, #1
   14f64:	b2db      	uxtb	r3, r3
   14f66:	f003 030f 	and.w	r3, r3, #15
   14f6a:	b2db      	uxtb	r3, r3
 }
   14f6c:	4618      	mov	r0, r3
   14f6e:	370c      	adds	r7, #12
   14f70:	46bd      	mov	sp, r7
   14f72:	bc80      	pop	{r7}
   14f74:	4770      	bx	lr
	...

00014f78 <_ZN17DateTimeLog_Class14ReadStackValueEv>:
 
 uint8_t	DateTimeLog_Class::ReadStackValue(void){
   14f78:	b590      	push	{r4, r7, lr}
   14f7a:	b085      	sub	sp, #20
   14f7c:	af00      	add	r7, sp, #0
   14f7e:	6078      	str	r0, [r7, #4]
	 uint8_t s;
	eeprom.ReadAddress(&s,stackAdress,1);
   14f80:	687b      	ldr	r3, [r7, #4]
   14f82:	8c1a      	ldrh	r2, [r3, #32]
   14f84:	f107 010f 	add.w	r1, r7, #15
   14f88:	2301      	movs	r3, #1
   14f8a:	4804      	ldr	r0, [pc, #16]	; (14f9c <_ZN17DateTimeLog_Class14ReadStackValueEv+0x24>)
   14f8c:	4c04      	ldr	r4, [pc, #16]	; (14fa0 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x28>)
   14f8e:	47a0      	blx	r4
	 return	s;
   14f90:	7bfb      	ldrb	r3, [r7, #15]
 }
   14f92:	4618      	mov	r0, r3
   14f94:	3714      	adds	r7, #20
   14f96:	46bd      	mov	sp, r7
   14f98:	bd90      	pop	{r4, r7, pc}
   14f9a:	bf00      	nop
   14f9c:	20004e70 	.word	0x20004e70
   14fa0:	00013b25 	.word	0x00013b25

00014fa4 <_ZN17DateTimeLog_Class23SetCalendarStackAddressEm>:
 
 uint16_t	DateTimeLog_Class::SetCalendarStackAddress(uint32_t add){
   14fa4:	b480      	push	{r7}
   14fa6:	b083      	sub	sp, #12
   14fa8:	af00      	add	r7, sp, #0
   14faa:	6078      	str	r0, [r7, #4]
   14fac:	6039      	str	r1, [r7, #0]
	 stackAdress=(uint16_t)(add&0xffff);
   14fae:	683b      	ldr	r3, [r7, #0]
   14fb0:	b29a      	uxth	r2, r3
   14fb2:	687b      	ldr	r3, [r7, #4]
   14fb4:	841a      	strh	r2, [r3, #32]
	 return	stackAdress;
   14fb6:	687b      	ldr	r3, [r7, #4]
   14fb8:	8c1b      	ldrh	r3, [r3, #32]
 }
   14fba:	4618      	mov	r0, r3
   14fbc:	370c      	adds	r7, #12
   14fbe:	46bd      	mov	sp, r7
   14fc0:	bc80      	pop	{r7}
   14fc2:	4770      	bx	lr

00014fc4 <_ZN17DateTimeLog_Class18SetCalendarAddressEm>:
uint16_t	DateTimeLog_Class::SetCalendarAddress(uint32_t add){
   14fc4:	b480      	push	{r7}
   14fc6:	b083      	sub	sp, #12
   14fc8:	af00      	add	r7, sp, #0
   14fca:	6078      	str	r0, [r7, #4]
   14fcc:	6039      	str	r1, [r7, #0]
	dataTimeLogsAddress=(uint16_t)(add&0xffff);
   14fce:	683b      	ldr	r3, [r7, #0]
   14fd0:	b29a      	uxth	r2, r3
   14fd2:	687b      	ldr	r3, [r7, #4]
   14fd4:	849a      	strh	r2, [r3, #36]	; 0x24
	return	dataTimeLogsAddress;
   14fd6:	687b      	ldr	r3, [r7, #4]
   14fd8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
   14fda:	4618      	mov	r0, r3
   14fdc:	370c      	adds	r7, #12
   14fde:	46bd      	mov	sp, r7
   14fe0:	bc80      	pop	{r7}
   14fe2:	4770      	bx	lr

00014fe4 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv>:
uint32_t	DateTimeLog_Class::SaveCurrentDateTime(void){
   14fe4:	b590      	push	{r4, r7, lr}
   14fe6:	b085      	sub	sp, #20
   14fe8:	af00      	add	r7, sp, #0
   14fea:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   14fec:	6878      	ldr	r0, [r7, #4]
   14fee:	4b15      	ldr	r3, [pc, #84]	; (15044 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x60>)
   14ff0:	4798      	blx	r3
   14ff2:	4603      	mov	r3, r0
   14ff4:	b29a      	uxth	r2, r3
   14ff6:	687b      	ldr	r3, [r7, #4]
   14ff8:	845a      	strh	r2, [r3, #34]	; 0x22
	GetDateTime(&dateTime);
   14ffa:	687b      	ldr	r3, [r7, #4]
   14ffc:	681b      	ldr	r3, [r3, #0]
   14ffe:	681b      	ldr	r3, [r3, #0]
   15000:	687a      	ldr	r2, [r7, #4]
   15002:	3226      	adds	r2, #38	; 0x26
   15004:	4611      	mov	r1, r2
   15006:	6878      	ldr	r0, [r7, #4]
   15008:	4798      	blx	r3
	handler=(PTR_DATE_TIME)(&dateTime);
   1500a:	687b      	ldr	r3, [r7, #4]
   1500c:	3326      	adds	r3, #38	; 0x26
   1500e:	461a      	mov	r2, r3
   15010:	687b      	ldr	r3, [r7, #4]
   15012:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t	w= eeprom.WriteAddress((uint8_t*)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   15014:	687b      	ldr	r3, [r7, #4]
   15016:	6b99      	ldr	r1, [r3, #56]	; 0x38
   15018:	687b      	ldr	r3, [r7, #4]
   1501a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1501c:	b2da      	uxtb	r2, r3
   1501e:	687b      	ldr	r3, [r7, #4]
   15020:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   15022:	b2db      	uxtb	r3, r3
   15024:	4413      	add	r3, r2
   15026:	b2da      	uxtb	r2, r3
   15028:	2308      	movs	r3, #8
   1502a:	4807      	ldr	r0, [pc, #28]	; (15048 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x64>)
   1502c:	4c07      	ldr	r4, [pc, #28]	; (1504c <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x68>)
   1502e:	47a0      	blx	r4
   15030:	60f8      	str	r0, [r7, #12]
	IncrementMemoryStack();
   15032:	6878      	ldr	r0, [r7, #4]
   15034:	4b06      	ldr	r3, [pc, #24]	; (15050 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x6c>)
   15036:	4798      	blx	r3
	return	w;
   15038:	68fb      	ldr	r3, [r7, #12]
}
   1503a:	4618      	mov	r0, r3
   1503c:	3714      	adds	r7, #20
   1503e:	46bd      	mov	sp, r7
   15040:	bd90      	pop	{r4, r7, pc}
   15042:	bf00      	nop
   15044:	00014f79 	.word	0x00014f79
   15048:	20004e70 	.word	0x20004e70
   1504c:	0001398d 	.word	0x0001398d
   15050:	00014efd 	.word	0x00014efd

00015054 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv>:

uint32_t	DateTimeLog_Class::ReadLastDateTime(void){
   15054:	b590      	push	{r4, r7, lr}
   15056:	b085      	sub	sp, #20
   15058:	af00      	add	r7, sp, #0
   1505a:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   1505c:	6878      	ldr	r0, [r7, #4]
   1505e:	4b0f      	ldr	r3, [pc, #60]	; (1509c <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x48>)
   15060:	4798      	blx	r3
   15062:	4603      	mov	r3, r0
   15064:	b29a      	uxth	r2, r3
   15066:	687b      	ldr	r3, [r7, #4]
   15068:	845a      	strh	r2, [r3, #34]	; 0x22
	handler=(PTR_DATE_TIME)(&lastDateTime);
   1506a:	687b      	ldr	r3, [r7, #4]
   1506c:	332e      	adds	r3, #46	; 0x2e
   1506e:	461a      	mov	r2, r3
   15070:	687b      	ldr	r3, [r7, #4]
   15072:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t r=	eeprom.ReadAddress((uint8_t *)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   15074:	687b      	ldr	r3, [r7, #4]
   15076:	6b99      	ldr	r1, [r3, #56]	; 0x38
   15078:	687b      	ldr	r3, [r7, #4]
   1507a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1507c:	b2da      	uxtb	r2, r3
   1507e:	687b      	ldr	r3, [r7, #4]
   15080:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   15082:	b2db      	uxtb	r3, r3
   15084:	4413      	add	r3, r2
   15086:	b2da      	uxtb	r2, r3
   15088:	2308      	movs	r3, #8
   1508a:	4805      	ldr	r0, [pc, #20]	; (150a0 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x4c>)
   1508c:	4c05      	ldr	r4, [pc, #20]	; (150a4 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x50>)
   1508e:	47a0      	blx	r4
   15090:	60f8      	str	r0, [r7, #12]
	return	r;
   15092:	68fb      	ldr	r3, [r7, #12]
}
   15094:	4618      	mov	r0, r3
   15096:	3714      	adds	r7, #20
   15098:	46bd      	mov	sp, r7
   1509a:	bd90      	pop	{r4, r7, pc}
   1509c:	00014f79 	.word	0x00014f79
   150a0:	20004e70 	.word	0x20004e70
   150a4:	00013ab5 	.word	0x00013ab5

000150a8 <_ZL10CountTicksPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerClass->handler();
}
static void CountTicks(const struct timer_task *const timer_task)
{
   150a8:	b480      	push	{r7}
   150aa:	b083      	sub	sp, #12
   150ac:	af00      	add	r7, sp, #0
   150ae:	6078      	str	r0, [r7, #4]
	ptrTimerClass->ticks++;
   150b0:	4b04      	ldr	r3, [pc, #16]	; (150c4 <_ZL10CountTicksPK10timer_task+0x1c>)
   150b2:	681b      	ldr	r3, [r3, #0]
   150b4:	689a      	ldr	r2, [r3, #8]
   150b6:	3201      	adds	r2, #1
   150b8:	609a      	str	r2, [r3, #8]
}
   150ba:	bf00      	nop
   150bc:	370c      	adds	r7, #12
   150be:	46bd      	mov	sp, r7
   150c0:	bc80      	pop	{r7}
   150c2:	4770      	bx	lr
   150c4:	200051c8 	.word	0x200051c8

000150c8 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   150c8:	b480      	push	{r7}
   150ca:	b083      	sub	sp, #12
   150cc:	af00      	add	r7, sp, #0
   150ce:	6078      	str	r0, [r7, #4]
   150d0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   150d2:	687b      	ldr	r3, [r7, #4]
   150d4:	683a      	ldr	r2, [r7, #0]
   150d6:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
   150d8:	4a07      	ldr	r2, [pc, #28]	; (150f8 <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
   150da:	687b      	ldr	r3, [r7, #4]
   150dc:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   150de:	687b      	ldr	r3, [r7, #4]
   150e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   150e4:	615a      	str	r2, [r3, #20]
	task=&countTicks;
   150e6:	687b      	ldr	r3, [r7, #4]
   150e8:	4a04      	ldr	r2, [pc, #16]	; (150fc <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
   150ea:	619a      	str	r2, [r3, #24]
	//task->cb=task_cb;
} //Timer_Class
   150ec:	687b      	ldr	r3, [r7, #4]
   150ee:	4618      	mov	r0, r3
   150f0:	370c      	adds	r7, #12
   150f2:	46bd      	mov	sp, r7
   150f4:	bc80      	pop	{r7}
   150f6:	4770      	bx	lr
   150f8:	200051c8 	.word	0x200051c8
   150fc:	2000526c 	.word	0x2000526c

00015100 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   15100:	b480      	push	{r7}
   15102:	b083      	sub	sp, #12
   15104:	af00      	add	r7, sp, #0
   15106:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   15108:	687b      	ldr	r3, [r7, #4]
   1510a:	2200      	movs	r2, #0
   1510c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   1510e:	687b      	ldr	r3, [r7, #4]
   15110:	4618      	mov	r0, r3
   15112:	370c      	adds	r7, #12
   15114:	46bd      	mov	sp, r7
   15116:	bc80      	pop	{r7}
   15118:	4770      	bx	lr
	...

0001511c <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
void Timer_Class::Init(void){
   1511c:	b580      	push	{r7, lr}
   1511e:	b082      	sub	sp, #8
   15120:	af00      	add	r7, sp, #0
   15122:	6078      	str	r0, [r7, #4]
	ticks=0;
   15124:	687b      	ldr	r3, [r7, #4]
   15126:	2200      	movs	r2, #0
   15128:	609a      	str	r2, [r3, #8]
	add_periodic_task(FUNC_PTR(CountTicks),1);
   1512a:	2201      	movs	r2, #1
   1512c:	4905      	ldr	r1, [pc, #20]	; (15144 <_ZN11Timer_Class4InitEv+0x28>)
   1512e:	6878      	ldr	r0, [r7, #4]
   15130:	4b05      	ldr	r3, [pc, #20]	; (15148 <_ZN11Timer_Class4InitEv+0x2c>)
   15132:	4798      	blx	r3
	start();
   15134:	6878      	ldr	r0, [r7, #4]
   15136:	4b05      	ldr	r3, [pc, #20]	; (1514c <_ZN11Timer_Class4InitEv+0x30>)
   15138:	4798      	blx	r3
}
   1513a:	bf00      	nop
   1513c:	3708      	adds	r7, #8
   1513e:	46bd      	mov	sp, r7
   15140:	bd80      	pop	{r7, pc}
   15142:	bf00      	nop
   15144:	000150a9 	.word	0x000150a9
   15148:	000151f9 	.word	0x000151f9
   1514c:	00015151 	.word	0x00015151

00015150 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
   15150:	b580      	push	{r7, lr}
   15152:	b084      	sub	sp, #16
   15154:	af00      	add	r7, sp, #0
   15156:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   15158:	687b      	ldr	r3, [r7, #4]
   1515a:	68db      	ldr	r3, [r3, #12]
   1515c:	4618      	mov	r0, r3
   1515e:	4b04      	ldr	r3, [pc, #16]	; (15170 <_ZN11Timer_Class5startEv+0x20>)
   15160:	4798      	blx	r3
   15162:	60f8      	str	r0, [r7, #12]
	return status;
   15164:	68fb      	ldr	r3, [r7, #12]
	
}
   15166:	4618      	mov	r0, r3
   15168:	3710      	adds	r7, #16
   1516a:	46bd      	mov	sp, r7
   1516c:	bd80      	pop	{r7, pc}
   1516e:	bf00      	nop
   15170:	00005c39 	.word	0x00005c39

00015174 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   15174:	b580      	push	{r7, lr}
   15176:	b086      	sub	sp, #24
   15178:	af00      	add	r7, sp, #0
   1517a:	60f8      	str	r0, [r7, #12]
   1517c:	60b9      	str	r1, [r7, #8]
   1517e:	607a      	str	r2, [r7, #4]
   15180:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   15182:	68f8      	ldr	r0, [r7, #12]
   15184:	4b0d      	ldr	r3, [pc, #52]	; (151bc <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   15186:	4798      	blx	r3
	task->interval = interval;
   15188:	68fb      	ldr	r3, [r7, #12]
   1518a:	699b      	ldr	r3, [r3, #24]
   1518c:	687a      	ldr	r2, [r7, #4]
   1518e:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   15190:	68fb      	ldr	r3, [r7, #12]
   15192:	699b      	ldr	r3, [r3, #24]
   15194:	68ba      	ldr	r2, [r7, #8]
   15196:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   15198:	68fb      	ldr	r3, [r7, #12]
   1519a:	699b      	ldr	r3, [r3, #24]
   1519c:	78fa      	ldrb	r2, [r7, #3]
   1519e:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   151a0:	68fb      	ldr	r3, [r7, #12]
   151a2:	68da      	ldr	r2, [r3, #12]
   151a4:	68fb      	ldr	r3, [r7, #12]
   151a6:	699b      	ldr	r3, [r3, #24]
   151a8:	4619      	mov	r1, r3
   151aa:	4610      	mov	r0, r2
   151ac:	4b04      	ldr	r3, [pc, #16]	; (151c0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   151ae:	4798      	blx	r3
   151b0:	6178      	str	r0, [r7, #20]
	
	return status;
   151b2:	697b      	ldr	r3, [r7, #20]
}
   151b4:	4618      	mov	r0, r3
   151b6:	3718      	adds	r7, #24
   151b8:	46bd      	mov	sp, r7
   151ba:	bd80      	pop	{r7, pc}
   151bc:	00015271 	.word	0x00015271
   151c0:	00005ce9 	.word	0x00005ce9

000151c4 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
   151c4:	b580      	push	{r7, lr}
   151c6:	b084      	sub	sp, #16
   151c8:	af00      	add	r7, sp, #0
   151ca:	60f8      	str	r0, [r7, #12]
   151cc:	60b9      	str	r1, [r7, #8]
   151ce:	607a      	str	r2, [r7, #4]
	 add_periodic_task(func,interval);
   151d0:	687a      	ldr	r2, [r7, #4]
   151d2:	68b9      	ldr	r1, [r7, #8]
   151d4:	68f8      	ldr	r0, [r7, #12]
   151d6:	4b06      	ldr	r3, [pc, #24]	; (151f0 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x2c>)
   151d8:	4798      	blx	r3
	 return timer_start(timer_descr);
   151da:	68fb      	ldr	r3, [r7, #12]
   151dc:	68db      	ldr	r3, [r3, #12]
   151de:	4618      	mov	r0, r3
   151e0:	4b04      	ldr	r3, [pc, #16]	; (151f4 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x30>)
   151e2:	4798      	blx	r3
   151e4:	4603      	mov	r3, r0
}
   151e6:	4618      	mov	r0, r3
   151e8:	3710      	adds	r7, #16
   151ea:	46bd      	mov	sp, r7
   151ec:	bd80      	pop	{r7, pc}
   151ee:	bf00      	nop
   151f0:	000151f9 	.word	0x000151f9
   151f4:	00005c39 	.word	0x00005c39

000151f8 <_ZN11Timer_Class17add_periodic_taskEPFvvEm>:
int32_t Timer_Class::add_periodic_task(FUNC_PTR func,uint32_t interval){
   151f8:	b590      	push	{r4, r7, lr}
   151fa:	b087      	sub	sp, #28
   151fc:	af00      	add	r7, sp, #0
   151fe:	60f8      	str	r0, [r7, #12]
   15200:	60b9      	str	r1, [r7, #8]
   15202:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   15204:	2301      	movs	r3, #1
   15206:	687a      	ldr	r2, [r7, #4]
   15208:	68b9      	ldr	r1, [r7, #8]
   1520a:	68f8      	ldr	r0, [r7, #12]
   1520c:	4c03      	ldr	r4, [pc, #12]	; (1521c <_ZN11Timer_Class17add_periodic_taskEPFvvEm+0x24>)
   1520e:	47a0      	blx	r4
   15210:	6178      	str	r0, [r7, #20]
		return status;
   15212:	697b      	ldr	r3, [r7, #20]
}
   15214:	4618      	mov	r0, r3
   15216:	371c      	adds	r7, #28
   15218:	46bd      	mov	sp, r7
   1521a:	bd90      	pop	{r4, r7, pc}
   1521c:	00015175 	.word	0x00015175

00015220 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm>:
int32_t Timer_Class::add_oneShot_task(FUNC_PTR func,uint32_t interval){
   15220:	b590      	push	{r4, r7, lr}
   15222:	b087      	sub	sp, #28
   15224:	af00      	add	r7, sp, #0
   15226:	60f8      	str	r0, [r7, #12]
   15228:	60b9      	str	r1, [r7, #8]
   1522a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   1522c:	2300      	movs	r3, #0
   1522e:	687a      	ldr	r2, [r7, #4]
   15230:	68b9      	ldr	r1, [r7, #8]
   15232:	68f8      	ldr	r0, [r7, #12]
   15234:	4c06      	ldr	r4, [pc, #24]	; (15250 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm+0x30>)
   15236:	47a0      	blx	r4
   15238:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   1523a:	68fb      	ldr	r3, [r7, #12]
   1523c:	68db      	ldr	r3, [r3, #12]
   1523e:	4618      	mov	r0, r3
   15240:	4b04      	ldr	r3, [pc, #16]	; (15254 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm+0x34>)
   15242:	4798      	blx	r3
   15244:	6178      	str	r0, [r7, #20]
	return status;
   15246:	697b      	ldr	r3, [r7, #20]
}
   15248:	4618      	mov	r0, r3
   1524a:	371c      	adds	r7, #28
   1524c:	46bd      	mov	sp, r7
   1524e:	bd90      	pop	{r4, r7, pc}
   15250:	00015175 	.word	0x00015175
   15254:	00005c39 	.word	0x00005c39

00015258 <_ZN11Timer_Class9Get_ticksEv>:
	task->cb=NULL;
}



uint32_t	Timer_Class::Get_ticks(void){
   15258:	b480      	push	{r7}
   1525a:	b083      	sub	sp, #12
   1525c:	af00      	add	r7, sp, #0
   1525e:	6078      	str	r0, [r7, #4]
	
		return ticks;
   15260:	687b      	ldr	r3, [r7, #4]
   15262:	689b      	ldr	r3, [r3, #8]
}
   15264:	4618      	mov	r0, r3
   15266:	370c      	adds	r7, #12
   15268:	46bd      	mov	sp, r7
   1526a:	bc80      	pop	{r7}
   1526c:	4770      	bx	lr
	...

00015270 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}
void	Timer_Class::ChooseAvailableTimerTask(void){
   15270:	b480      	push	{r7}
   15272:	b083      	sub	sp, #12
   15274:	af00      	add	r7, sp, #0
   15276:	6078      	str	r0, [r7, #4]
	for (i = 0; i < TASK_NUMBER; i++)
   15278:	687b      	ldr	r3, [r7, #4]
   1527a:	2200      	movs	r2, #0
   1527c:	771a      	strb	r2, [r3, #28]
   1527e:	687b      	ldr	r3, [r7, #4]
   15280:	7f1b      	ldrb	r3, [r3, #28]
   15282:	2b07      	cmp	r3, #7
   15284:	dc1f      	bgt.n	152c6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x56>
	{
		if (taskArray[i].cb==NULL)
   15286:	687b      	ldr	r3, [r7, #4]
   15288:	7f1b      	ldrb	r3, [r3, #28]
   1528a:	4619      	mov	r1, r3
   1528c:	4a11      	ldr	r2, [pc, #68]	; (152d4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x64>)
   1528e:	460b      	mov	r3, r1
   15290:	009b      	lsls	r3, r3, #2
   15292:	440b      	add	r3, r1
   15294:	009b      	lsls	r3, r3, #2
   15296:	4413      	add	r3, r2
   15298:	330c      	adds	r3, #12
   1529a:	681b      	ldr	r3, [r3, #0]
   1529c:	2b00      	cmp	r3, #0
   1529e:	d10b      	bne.n	152b8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x48>
		{
			
			task=&taskArray[i];
   152a0:	687b      	ldr	r3, [r7, #4]
   152a2:	7f1b      	ldrb	r3, [r3, #28]
   152a4:	461a      	mov	r2, r3
   152a6:	4613      	mov	r3, r2
   152a8:	009b      	lsls	r3, r3, #2
   152aa:	4413      	add	r3, r2
   152ac:	009b      	lsls	r3, r3, #2
   152ae:	4a09      	ldr	r2, [pc, #36]	; (152d4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x64>)
   152b0:	441a      	add	r2, r3
   152b2:	687b      	ldr	r3, [r7, #4]
   152b4:	619a      	str	r2, [r3, #24]
			return;
   152b6:	e009      	b.n	152cc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < TASK_NUMBER; i++)
   152b8:	687b      	ldr	r3, [r7, #4]
   152ba:	7f1b      	ldrb	r3, [r3, #28]
   152bc:	3301      	adds	r3, #1
   152be:	b2da      	uxtb	r2, r3
   152c0:	687b      	ldr	r3, [r7, #4]
   152c2:	771a      	strb	r2, [r3, #28]
   152c4:	e7db      	b.n	1527e <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xe>
			
		}
	}
	task=&taskArray[0];
   152c6:	687b      	ldr	r3, [r7, #4]
   152c8:	4a02      	ldr	r2, [pc, #8]	; (152d4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x64>)
   152ca:	619a      	str	r2, [r3, #24]

}
   152cc:	370c      	adds	r7, #12
   152ce:	46bd      	mov	sp, r7
   152d0:	bc80      	pop	{r7}
   152d2:	4770      	bx	lr
   152d4:	200051cc 	.word	0x200051cc

000152d8 <_Z41__static_initialization_and_destruction_0ii>:
}

Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
   152d8:	b580      	push	{r7, lr}
   152da:	b082      	sub	sp, #8
   152dc:	af00      	add	r7, sp, #0
   152de:	6078      	str	r0, [r7, #4]
   152e0:	6039      	str	r1, [r7, #0]
   152e2:	687b      	ldr	r3, [r7, #4]
   152e4:	2b01      	cmp	r3, #1
   152e6:	d128      	bne.n	1533a <_Z41__static_initialization_and_destruction_0ii+0x62>
   152e8:	683b      	ldr	r3, [r7, #0]
   152ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   152ee:	4293      	cmp	r3, r2
   152f0:	d123      	bne.n	1533a <_Z41__static_initialization_and_destruction_0ii+0x62>
Timer_Class eventTimer(&TIMER_EVENT);
   152f2:	4914      	ldr	r1, [pc, #80]	; (15344 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   152f4:	4814      	ldr	r0, [pc, #80]	; (15348 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   152f6:	4b15      	ldr	r3, [pc, #84]	; (1534c <_Z41__static_initialization_and_destruction_0ii+0x74>)
   152f8:	4798      	blx	r3
   152fa:	4a15      	ldr	r2, [pc, #84]	; (15350 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   152fc:	4915      	ldr	r1, [pc, #84]	; (15354 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   152fe:	4812      	ldr	r0, [pc, #72]	; (15348 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   15300:	4b15      	ldr	r3, [pc, #84]	; (15358 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   15302:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
   15304:	4915      	ldr	r1, [pc, #84]	; (1535c <_Z41__static_initialization_and_destruction_0ii+0x84>)
   15306:	4816      	ldr	r0, [pc, #88]	; (15360 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   15308:	4b10      	ldr	r3, [pc, #64]	; (1534c <_Z41__static_initialization_and_destruction_0ii+0x74>)
   1530a:	4798      	blx	r3
   1530c:	4a10      	ldr	r2, [pc, #64]	; (15350 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   1530e:	4911      	ldr	r1, [pc, #68]	; (15354 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   15310:	4813      	ldr	r0, [pc, #76]	; (15360 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   15312:	4b11      	ldr	r3, [pc, #68]	; (15358 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   15314:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
   15316:	4913      	ldr	r1, [pc, #76]	; (15364 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   15318:	4813      	ldr	r0, [pc, #76]	; (15368 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   1531a:	4b0c      	ldr	r3, [pc, #48]	; (1534c <_Z41__static_initialization_and_destruction_0ii+0x74>)
   1531c:	4798      	blx	r3
   1531e:	4a0c      	ldr	r2, [pc, #48]	; (15350 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   15320:	490c      	ldr	r1, [pc, #48]	; (15354 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   15322:	4811      	ldr	r0, [pc, #68]	; (15368 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   15324:	4b0c      	ldr	r3, [pc, #48]	; (15358 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   15326:	4798      	blx	r3
   15328:	4910      	ldr	r1, [pc, #64]	; (1536c <_Z41__static_initialization_and_destruction_0ii+0x94>)
   1532a:	4811      	ldr	r0, [pc, #68]	; (15370 <_Z41__static_initialization_and_destruction_0ii+0x98>)
   1532c:	4b07      	ldr	r3, [pc, #28]	; (1534c <_Z41__static_initialization_and_destruction_0ii+0x74>)
   1532e:	4798      	blx	r3
   15330:	4a07      	ldr	r2, [pc, #28]	; (15350 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   15332:	4908      	ldr	r1, [pc, #32]	; (15354 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   15334:	480e      	ldr	r0, [pc, #56]	; (15370 <_Z41__static_initialization_and_destruction_0ii+0x98>)
   15336:	4b08      	ldr	r3, [pc, #32]	; (15358 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   15338:	4798      	blx	r3
   1533a:	bf00      	nop
   1533c:	3708      	adds	r7, #8
   1533e:	46bd      	mov	sp, r7
   15340:	bd80      	pop	{r7, pc}
   15342:	bf00      	nop
   15344:	2000566c 	.word	0x2000566c
   15348:	20005280 	.word	0x20005280
   1534c:	000150c9 	.word	0x000150c9
   15350:	20000000 	.word	0x20000000
   15354:	00015101 	.word	0x00015101
   15358:	000167bd 	.word	0x000167bd
   1535c:	20005780 	.word	0x20005780
   15360:	200052a0 	.word	0x200052a0
   15364:	20005688 	.word	0x20005688
   15368:	200052c0 	.word	0x200052c0
   1536c:	200056e8 	.word	0x200056e8
   15370:	200052e0 	.word	0x200052e0

00015374 <_GLOBAL__sub_I_ptrTimerClass>:
   15374:	b580      	push	{r7, lr}
   15376:	af00      	add	r7, sp, #0
   15378:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1537c:	2001      	movs	r0, #1
   1537e:	4b01      	ldr	r3, [pc, #4]	; (15384 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   15380:	4798      	blx	r3
   15382:	bd80      	pop	{r7, pc}
   15384:	000152d9 	.word	0x000152d9

00015388 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   15388:	b480      	push	{r7}
   1538a:	b083      	sub	sp, #12
   1538c:	af00      	add	r7, sp, #0
   1538e:	6078      	str	r0, [r7, #4]
   15390:	4a05      	ldr	r2, [pc, #20]	; (153a8 <_ZN5PrintC1Ev+0x20>)
   15392:	687b      	ldr	r3, [r7, #4]
   15394:	601a      	str	r2, [r3, #0]
   15396:	687b      	ldr	r3, [r7, #4]
   15398:	2200      	movs	r2, #0
   1539a:	605a      	str	r2, [r3, #4]
   1539c:	687b      	ldr	r3, [r7, #4]
   1539e:	4618      	mov	r0, r3
   153a0:	370c      	adds	r7, #12
   153a2:	46bd      	mov	sp, r7
   153a4:	bc80      	pop	{r7}
   153a6:	4770      	bx	lr
   153a8:	0001e548 	.word	0x0001e548

000153ac <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   153ac:	b480      	push	{r7}
   153ae:	b083      	sub	sp, #12
   153b0:	af00      	add	r7, sp, #0
   153b2:	6078      	str	r0, [r7, #4]
   153b4:	2300      	movs	r3, #0
   153b6:	4618      	mov	r0, r3
   153b8:	370c      	adds	r7, #12
   153ba:	46bd      	mov	sp, r7
   153bc:	bc80      	pop	{r7}
   153be:	4770      	bx	lr

000153c0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   153c0:	b480      	push	{r7}
   153c2:	b083      	sub	sp, #12
   153c4:	af00      	add	r7, sp, #0
   153c6:	6078      	str	r0, [r7, #4]
   153c8:	bf00      	nop
   153ca:	370c      	adds	r7, #12
   153cc:	46bd      	mov	sp, r7
   153ce:	bc80      	pop	{r7}
   153d0:	4770      	bx	lr
	...

000153d4 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   153d4:	b580      	push	{r7, lr}
   153d6:	b082      	sub	sp, #8
   153d8:	af00      	add	r7, sp, #0
   153da:	6078      	str	r0, [r7, #4]
   153dc:	687b      	ldr	r3, [r7, #4]
   153de:	4618      	mov	r0, r3
   153e0:	4b06      	ldr	r3, [pc, #24]	; (153fc <_ZN6StreamC1Ev+0x28>)
   153e2:	4798      	blx	r3
   153e4:	4a06      	ldr	r2, [pc, #24]	; (15400 <_ZN6StreamC1Ev+0x2c>)
   153e6:	687b      	ldr	r3, [r7, #4]
   153e8:	601a      	str	r2, [r3, #0]
   153ea:	687b      	ldr	r3, [r7, #4]
   153ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   153f0:	609a      	str	r2, [r3, #8]
   153f2:	687b      	ldr	r3, [r7, #4]
   153f4:	4618      	mov	r0, r3
   153f6:	3708      	adds	r7, #8
   153f8:	46bd      	mov	sp, r7
   153fa:	bd80      	pop	{r7, pc}
   153fc:	00015389 	.word	0x00015389
   15400:	0001e50c 	.word	0x0001e50c

00015404 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
   15404:	b480      	push	{r7}
   15406:	b083      	sub	sp, #12
   15408:	af00      	add	r7, sp, #0
   1540a:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
   1540c:	4b06      	ldr	r3, [pc, #24]	; (15428 <_ZL10USBTimeoutPK10timer_task+0x24>)
   1540e:	681b      	ldr	r3, [r3, #0]
   15410:	2201      	movs	r2, #1
   15412:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
   15414:	4b04      	ldr	r3, [pc, #16]	; (15428 <_ZL10USBTimeoutPK10timer_task+0x24>)
   15416:	681b      	ldr	r3, [r3, #0]
   15418:	2200      	movs	r2, #0
   1541a:	741a      	strb	r2, [r3, #16]
	
}
   1541c:	bf00      	nop
   1541e:	370c      	adds	r7, #12
   15420:	46bd      	mov	sp, r7
   15422:	bc80      	pop	{r7}
   15424:	4770      	bx	lr
   15426:	bf00      	nop
   15428:	20005300 	.word	0x20005300

0001542c <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   1542c:	b480      	push	{r7}
   1542e:	b083      	sub	sp, #12
   15430:	af00      	add	r7, sp, #0
   15432:	4603      	mov	r3, r0
   15434:	603a      	str	r2, [r7, #0]
   15436:	71fb      	strb	r3, [r7, #7]
   15438:	460b      	mov	r3, r1
   1543a:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   1543c:	4b08      	ldr	r3, [pc, #32]	; (15460 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   1543e:	681b      	ldr	r3, [r3, #0]
   15440:	2201      	movs	r2, #1
   15442:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
   15444:	4b06      	ldr	r3, [pc, #24]	; (15460 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   15446:	681b      	ldr	r3, [r3, #0]
   15448:	2201      	movs	r2, #1
   1544a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   1544c:	4b04      	ldr	r3, [pc, #16]	; (15460 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   1544e:	681b      	ldr	r3, [r3, #0]
   15450:	2201      	movs	r2, #1
   15452:	741a      	strb	r2, [r3, #16]


	return false;
   15454:	2300      	movs	r3, #0
}
   15456:	4618      	mov	r0, r3
   15458:	370c      	adds	r7, #12
   1545a:	46bd      	mov	sp, r7
   1545c:	bc80      	pop	{r7}
   1545e:	4770      	bx	lr
   15460:	20005300 	.word	0x20005300

00015464 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   15464:	b480      	push	{r7}
   15466:	b083      	sub	sp, #12
   15468:	af00      	add	r7, sp, #0
   1546a:	4603      	mov	r3, r0
   1546c:	603a      	str	r2, [r7, #0]
   1546e:	71fb      	strb	r3, [r7, #7]
   15470:	460b      	mov	r3, r1
   15472:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   15474:	4b08      	ldr	r3, [pc, #32]	; (15498 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   15476:	681b      	ldr	r3, [r3, #0]
   15478:	2201      	movs	r2, #1
   1547a:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
   1547c:	4b06      	ldr	r3, [pc, #24]	; (15498 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1547e:	681b      	ldr	r3, [r3, #0]
   15480:	2201      	movs	r2, #1
   15482:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   15484:	4b04      	ldr	r3, [pc, #16]	; (15498 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   15486:	681b      	ldr	r3, [r3, #0]
   15488:	2201      	movs	r2, #1
   1548a:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   1548c:	2300      	movs	r3, #0
}
   1548e:	4618      	mov	r0, r3
   15490:	370c      	adds	r7, #12
   15492:	46bd      	mov	sp, r7
   15494:	bc80      	pop	{r7}
   15496:	4770      	bx	lr
   15498:	20005300 	.word	0x20005300

0001549c <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   1549c:	b580      	push	{r7, lr}
   1549e:	b082      	sub	sp, #8
   154a0:	af00      	add	r7, sp, #0
   154a2:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   154a4:	793b      	ldrb	r3, [r7, #4]
   154a6:	f003 0301 	and.w	r3, r3, #1
   154aa:	b2db      	uxtb	r3, r3
   154ac:	2b00      	cmp	r3, #0
   154ae:	d013      	beq.n	154d8 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   154b0:	490c      	ldr	r1, [pc, #48]	; (154e4 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   154b2:	2000      	movs	r0, #0
   154b4:	4b0c      	ldr	r3, [pc, #48]	; (154e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   154b6:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   154b8:	490c      	ldr	r1, [pc, #48]	; (154ec <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   154ba:	2001      	movs	r0, #1
   154bc:	4b0a      	ldr	r3, [pc, #40]	; (154e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   154be:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   154c0:	4b0b      	ldr	r3, [pc, #44]	; (154f0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   154c2:	681b      	ldr	r3, [r3, #0]
   154c4:	2201      	movs	r2, #1
   154c6:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   154c8:	4b09      	ldr	r3, [pc, #36]	; (154f0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   154ca:	681b      	ldr	r3, [r3, #0]
   154cc:	2201      	movs	r2, #1
   154ce:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
   154d0:	4b07      	ldr	r3, [pc, #28]	; (154f0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   154d2:	681b      	ldr	r3, [r3, #0]
   154d4:	2201      	movs	r2, #1
   154d6:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   154d8:	2300      	movs	r3, #0
}
   154da:	4618      	mov	r0, r3
   154dc:	3708      	adds	r7, #8
   154de:	46bd      	mov	sp, r7
   154e0:	bd80      	pop	{r7, pc}
   154e2:	bf00      	nop
   154e4:	0001542d 	.word	0x0001542d
   154e8:	0000fea1 	.word	0x0000fea1
   154ec:	00015465 	.word	0x00015465
   154f0:	20005300 	.word	0x20005300

000154f4 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   154f4:	b580      	push	{r7, lr}
   154f6:	b082      	sub	sp, #8
   154f8:	af00      	add	r7, sp, #0
   154fa:	6078      	str	r0, [r7, #4]
   154fc:	687b      	ldr	r3, [r7, #4]
   154fe:	4618      	mov	r0, r3
   15500:	4b0a      	ldr	r3, [pc, #40]	; (1552c <_ZN9CDC_ClassC1Ev+0x38>)
   15502:	4798      	blx	r3
   15504:	687b      	ldr	r3, [r7, #4]
   15506:	3310      	adds	r3, #16
   15508:	4618      	mov	r0, r3
   1550a:	4b09      	ldr	r3, [pc, #36]	; (15530 <_ZN9CDC_ClassC1Ev+0x3c>)
   1550c:	4798      	blx	r3
   1550e:	4a09      	ldr	r2, [pc, #36]	; (15534 <_ZN9CDC_ClassC1Ev+0x40>)
   15510:	687b      	ldr	r3, [r7, #4]
   15512:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   15514:	687b      	ldr	r3, [r7, #4]
   15516:	f04f 32ff 	mov.w	r2, #4294967295
   1551a:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   1551c:	4a06      	ldr	r2, [pc, #24]	; (15538 <_ZN9CDC_ClassC1Ev+0x44>)
   1551e:	687b      	ldr	r3, [r7, #4]
   15520:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   15522:	687b      	ldr	r3, [r7, #4]
   15524:	4618      	mov	r0, r3
   15526:	3708      	adds	r7, #8
   15528:	46bd      	mov	sp, r7
   1552a:	bd80      	pop	{r7, pc}
   1552c:	000153d5 	.word	0x000153d5
   15530:	00015d3d 	.word	0x00015d3d
   15534:	0001e4dc 	.word	0x0001e4dc
   15538:	20005300 	.word	0x20005300

0001553c <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   1553c:	b580      	push	{r7, lr}
   1553e:	b082      	sub	sp, #8
   15540:	af00      	add	r7, sp, #0
   15542:	6078      	str	r0, [r7, #4]
   15544:	4a06      	ldr	r2, [pc, #24]	; (15560 <_ZN9CDC_ClassD1Ev+0x24>)
   15546:	687b      	ldr	r3, [r7, #4]
   15548:	601a      	str	r2, [r3, #0]
   1554a:	687b      	ldr	r3, [r7, #4]
   1554c:	3310      	adds	r3, #16
   1554e:	4618      	mov	r0, r3
   15550:	4b04      	ldr	r3, [pc, #16]	; (15564 <_ZN9CDC_ClassD1Ev+0x28>)
   15552:	4798      	blx	r3
{
} //~CDC_Class
   15554:	687b      	ldr	r3, [r7, #4]
   15556:	4618      	mov	r0, r3
   15558:	3708      	adds	r7, #8
   1555a:	46bd      	mov	sp, r7
   1555c:	bd80      	pop	{r7, pc}
   1555e:	bf00      	nop
   15560:	0001e4dc 	.word	0x0001e4dc
   15564:	00015d5d 	.word	0x00015d5d

00015568 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   15568:	b580      	push	{r7, lr}
   1556a:	b082      	sub	sp, #8
   1556c:	af00      	add	r7, sp, #0
   1556e:	6078      	str	r0, [r7, #4]
	
	OnInit();
   15570:	687b      	ldr	r3, [r7, #4]
   15572:	3310      	adds	r3, #16
   15574:	4618      	mov	r0, r3
   15576:	4b07      	ldr	r3, [pc, #28]	; (15594 <_ZN9CDC_Class4InitEv+0x2c>)
   15578:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   1557a:	4907      	ldr	r1, [pc, #28]	; (15598 <_ZN9CDC_Class4InitEv+0x30>)
   1557c:	2003      	movs	r0, #3
   1557e:	4b07      	ldr	r3, [pc, #28]	; (1559c <_ZN9CDC_Class4InitEv+0x34>)
   15580:	4798      	blx	r3
	
		
	if (connected)
   15582:	687b      	ldr	r3, [r7, #4]
   15584:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(200);
   15586:	20c8      	movs	r0, #200	; 0xc8
   15588:	4b05      	ldr	r3, [pc, #20]	; (155a0 <_ZN9CDC_Class4InitEv+0x38>)
   1558a:	4798      	blx	r3

}
   1558c:	bf00      	nop
   1558e:	3708      	adds	r7, #8
   15590:	46bd      	mov	sp, r7
   15592:	bd80      	pop	{r7, pc}
   15594:	00015d71 	.word	0x00015d71
   15598:	0001549d 	.word	0x0001549d
   1559c:	0000fea1 	.word	0x0000fea1
   155a0:	00004e1d 	.word	0x00004e1d

000155a4 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   155a4:	b580      	push	{r7, lr}
   155a6:	b082      	sub	sp, #8
   155a8:	af00      	add	r7, sp, #0
   155aa:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   155ac:	4b03      	ldr	r3, [pc, #12]	; (155bc <_ZN9CDC_Class9IsEnabledEv+0x18>)
   155ae:	4798      	blx	r3
   155b0:	4603      	mov	r3, r0
	
}
   155b2:	4618      	mov	r0, r3
   155b4:	3708      	adds	r7, #8
   155b6:	46bd      	mov	sp, r7
   155b8:	bd80      	pop	{r7, pc}
   155ba:	bf00      	nop
   155bc:	0000ff19 	.word	0x0000ff19

000155c0 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   155c0:	b580      	push	{r7, lr}
   155c2:	b084      	sub	sp, #16
   155c4:	af00      	add	r7, sp, #0
   155c6:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   155c8:	687b      	ldr	r3, [r7, #4]
   155ca:	699b      	ldr	r3, [r3, #24]
   155cc:	f1b3 3fff 	cmp.w	r3, #4294967295
   155d0:	bf14      	ite	ne
   155d2:	2301      	movne	r3, #1
   155d4:	2300      	moveq	r3, #0
   155d6:	b2db      	uxtb	r3, r3
   155d8:	2b00      	cmp	r3, #0
   155da:	d002      	beq.n	155e2 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   155dc:	687b      	ldr	r3, [r7, #4]
   155de:	699b      	ldr	r3, [r3, #24]
   155e0:	e011      	b.n	15606 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   155e2:	687b      	ldr	r3, [r7, #4]
   155e4:	681b      	ldr	r3, [r3, #0]
   155e6:	331c      	adds	r3, #28
   155e8:	681b      	ldr	r3, [r3, #0]
   155ea:	f107 010f 	add.w	r1, r7, #15
   155ee:	2201      	movs	r2, #1
   155f0:	6878      	ldr	r0, [r7, #4]
   155f2:	4798      	blx	r3
   155f4:	4602      	mov	r2, r0
   155f6:	687b      	ldr	r3, [r7, #4]
   155f8:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   155fa:	7bfb      	ldrb	r3, [r7, #15]
   155fc:	461a      	mov	r2, r3
   155fe:	687b      	ldr	r3, [r7, #4]
   15600:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   15602:	687b      	ldr	r3, [r7, #4]
   15604:	699b      	ldr	r3, [r3, #24]
}
   15606:	4618      	mov	r0, r3
   15608:	3710      	adds	r7, #16
   1560a:	46bd      	mov	sp, r7
   1560c:	bd80      	pop	{r7, pc}
	...

00015610 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   15610:	b580      	push	{r7, lr}
   15612:	b086      	sub	sp, #24
   15614:	af00      	add	r7, sp, #0
   15616:	60f8      	str	r0, [r7, #12]
   15618:	60b9      	str	r1, [r7, #8]
   1561a:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
   1561c:	68fb      	ldr	r3, [r7, #12]
   1561e:	7c1b      	ldrb	r3, [r3, #16]
   15620:	b2db      	uxtb	r3, r3
   15622:	2b00      	cmp	r3, #0
   15624:	d02e      	beq.n	15684 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   15626:	687a      	ldr	r2, [r7, #4]
   15628:	4613      	mov	r3, r2
   1562a:	009b      	lsls	r3, r3, #2
   1562c:	4413      	add	r3, r2
   1562e:	005b      	lsls	r3, r3, #1
   15630:	461a      	mov	r2, r3
   15632:	4918      	ldr	r1, [pc, #96]	; (15694 <_ZN9CDC_Class8readDataEPvl+0x84>)
   15634:	4818      	ldr	r0, [pc, #96]	; (15698 <_ZN9CDC_Class8readDataEPvl+0x88>)
   15636:	4b19      	ldr	r3, [pc, #100]	; (1569c <_ZN9CDC_Class8readDataEPvl+0x8c>)
   15638:	4798      	blx	r3
		rxReady=false;
   1563a:	68fb      	ldr	r3, [r7, #12]
   1563c:	2200      	movs	r2, #0
   1563e:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
   15640:	687b      	ldr	r3, [r7, #4]
   15642:	4619      	mov	r1, r3
   15644:	68b8      	ldr	r0, [r7, #8]
   15646:	4b16      	ldr	r3, [pc, #88]	; (156a0 <_ZN9CDC_Class8readDataEPvl+0x90>)
   15648:	4798      	blx	r3
   1564a:	4603      	mov	r3, r0
   1564c:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
   1564e:	68fb      	ldr	r3, [r7, #12]
   15650:	7d5b      	ldrb	r3, [r3, #21]
   15652:	b2db      	uxtb	r3, r3
   15654:	f083 0301 	eor.w	r3, r3, #1
   15658:	b2db      	uxtb	r3, r3
   1565a:	2b00      	cmp	r3, #0
   1565c:	d006      	beq.n	1566c <_ZN9CDC_Class8readDataEPvl+0x5c>
   1565e:	68fb      	ldr	r3, [r7, #12]
   15660:	7c1b      	ldrb	r3, [r3, #16]
   15662:	b2db      	uxtb	r3, r3
   15664:	2b00      	cmp	r3, #0
   15666:	d001      	beq.n	1566c <_ZN9CDC_Class8readDataEPvl+0x5c>
   15668:	2301      	movs	r3, #1
   1566a:	e000      	b.n	1566e <_ZN9CDC_Class8readDataEPvl+0x5e>
   1566c:	2300      	movs	r3, #0
   1566e:	2b00      	cmp	r3, #0
   15670:	d000      	beq.n	15674 <_ZN9CDC_Class8readDataEPvl+0x64>
   15672:	e7ec      	b.n	1564e <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
   15674:	4808      	ldr	r0, [pc, #32]	; (15698 <_ZN9CDC_Class8readDataEPvl+0x88>)
   15676:	4b0b      	ldr	r3, [pc, #44]	; (156a4 <_ZN9CDC_Class8readDataEPvl+0x94>)
   15678:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   1567a:	4906      	ldr	r1, [pc, #24]	; (15694 <_ZN9CDC_Class8readDataEPvl+0x84>)
   1567c:	4806      	ldr	r0, [pc, #24]	; (15698 <_ZN9CDC_Class8readDataEPvl+0x88>)
   1567e:	4b0a      	ldr	r3, [pc, #40]	; (156a8 <_ZN9CDC_Class8readDataEPvl+0x98>)
   15680:	4798      	blx	r3
   15682:	e001      	b.n	15688 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
   15684:	2300      	movs	r3, #0
   15686:	75fb      	strb	r3, [r7, #23]
	}

	return r;
   15688:	7dfb      	ldrb	r3, [r7, #23]
}
   1568a:	4618      	mov	r0, r3
   1568c:	3718      	adds	r7, #24
   1568e:	46bd      	mov	sp, r7
   15690:	bd80      	pop	{r7, pc}
   15692:	bf00      	nop
   15694:	00015405 	.word	0x00015405
   15698:	2000540c 	.word	0x2000540c
   1569c:	00015f9d 	.word	0x00015f9d
   156a0:	0000fdf5 	.word	0x0000fdf5
   156a4:	00015ebd 	.word	0x00015ebd
   156a8:	00016001 	.word	0x00016001

000156ac <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
   156ac:	b580      	push	{r7, lr}
   156ae:	b086      	sub	sp, #24
   156b0:	af00      	add	r7, sp, #0
   156b2:	60f8      	str	r0, [r7, #12]
   156b4:	60b9      	str	r1, [r7, #8]
   156b6:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
   156b8:	68fb      	ldr	r3, [r7, #12]
   156ba:	2200      	movs	r2, #0
   156bc:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   156be:	687b      	ldr	r3, [r7, #4]
   156c0:	4619      	mov	r1, r3
   156c2:	68b8      	ldr	r0, [r7, #8]
   156c4:	4b04      	ldr	r3, [pc, #16]	; (156d8 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
   156c6:	4798      	blx	r3
   156c8:	4603      	mov	r3, r0
   156ca:	617b      	str	r3, [r7, #20]
	return r;
   156cc:	697b      	ldr	r3, [r7, #20]
}
   156ce:	4618      	mov	r0, r3
   156d0:	3718      	adds	r7, #24
   156d2:	46bd      	mov	sp, r7
   156d4:	bd80      	pop	{r7, pc}
   156d6:	bf00      	nop
   156d8:	0000fdf5 	.word	0x0000fdf5

000156dc <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   156dc:	b580      	push	{r7, lr}
   156de:	b084      	sub	sp, #16
   156e0:	af00      	add	r7, sp, #0
   156e2:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   156e4:	687b      	ldr	r3, [r7, #4]
   156e6:	2200      	movs	r2, #0
   156e8:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   156ea:	f107 030f 	add.w	r3, r7, #15
   156ee:	2101      	movs	r1, #1
   156f0:	4618      	mov	r0, r3
   156f2:	4b08      	ldr	r3, [pc, #32]	; (15714 <_ZN9CDC_Class4readEv+0x38>)
   156f4:	4798      	blx	r3
	while(!rxReady);
   156f6:	687b      	ldr	r3, [r7, #4]
   156f8:	7d5b      	ldrb	r3, [r3, #21]
   156fa:	b2db      	uxtb	r3, r3
   156fc:	f083 0301 	eor.w	r3, r3, #1
   15700:	b2db      	uxtb	r3, r3
   15702:	2b00      	cmp	r3, #0
   15704:	d000      	beq.n	15708 <_ZN9CDC_Class4readEv+0x2c>
   15706:	e7f6      	b.n	156f6 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   15708:	7bfb      	ldrb	r3, [r7, #15]
}
   1570a:	4618      	mov	r0, r3
   1570c:	3710      	adds	r7, #16
   1570e:	46bd      	mov	sp, r7
   15710:	bd80      	pop	{r7, pc}
   15712:	bf00      	nop
   15714:	0000fdf5 	.word	0x0000fdf5

00015718 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
   15718:	b580      	push	{r7, lr}
   1571a:	b082      	sub	sp, #8
   1571c:	af00      	add	r7, sp, #0
   1571e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   15720:	687b      	ldr	r3, [r7, #4]
   15722:	331c      	adds	r3, #28
   15724:	2140      	movs	r1, #64	; 0x40
   15726:	4618      	mov	r0, r3
   15728:	4b02      	ldr	r3, [pc, #8]	; (15734 <_ZN9CDC_Class5flushEv+0x1c>)
   1572a:	4798      	blx	r3
}
   1572c:	bf00      	nop
   1572e:	3708      	adds	r7, #8
   15730:	46bd      	mov	sp, r7
   15732:	bd80      	pop	{r7, pc}
   15734:	0000fe39 	.word	0x0000fe39

00015738 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   15738:	b580      	push	{r7, lr}
   1573a:	b082      	sub	sp, #8
   1573c:	af00      	add	r7, sp, #0
   1573e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   15740:	4b02      	ldr	r3, [pc, #8]	; (1574c <_ZN9CDC_Class5clearEv+0x14>)
   15742:	4798      	blx	r3
}
   15744:	bf00      	nop
   15746:	3708      	adds	r7, #8
   15748:	46bd      	mov	sp, r7
   1574a:	bd80      	pop	{r7, pc}
   1574c:	0000fe7d 	.word	0x0000fe7d

00015750 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   15750:	b580      	push	{r7, lr}
   15752:	b082      	sub	sp, #8
   15754:	af00      	add	r7, sp, #0
   15756:	6078      	str	r0, [r7, #4]
   15758:	460b      	mov	r3, r1
   1575a:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
   1575c:	687b      	ldr	r3, [r7, #4]
   1575e:	7d1b      	ldrb	r3, [r3, #20]
   15760:	b2db      	uxtb	r3, r3
   15762:	f083 0301 	eor.w	r3, r3, #1
   15766:	b2db      	uxtb	r3, r3
   15768:	2b00      	cmp	r3, #0
   1576a:	d000      	beq.n	1576e <_ZN9CDC_Class5writeEh+0x1e>
   1576c:	e7f6      	b.n	1575c <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
   1576e:	687b      	ldr	r3, [r7, #4]
   15770:	681b      	ldr	r3, [r3, #0]
   15772:	3324      	adds	r3, #36	; 0x24
   15774:	681b      	ldr	r3, [r3, #0]
   15776:	1cf9      	adds	r1, r7, #3
   15778:	2201      	movs	r2, #1
   1577a:	6878      	ldr	r0, [r7, #4]
   1577c:	4798      	blx	r3
   1577e:	4603      	mov	r3, r0
}
   15780:	4618      	mov	r0, r3
   15782:	3708      	adds	r7, #8
   15784:	46bd      	mov	sp, r7
   15786:	bd80      	pop	{r7, pc}

00015788 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   15788:	b580      	push	{r7, lr}
   1578a:	b086      	sub	sp, #24
   1578c:	af00      	add	r7, sp, #0
   1578e:	60f8      	str	r0, [r7, #12]
   15790:	60b9      	str	r1, [r7, #8]
   15792:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
   15794:	68fb      	ldr	r3, [r7, #12]
   15796:	7c1b      	ldrb	r3, [r3, #16]
   15798:	b2db      	uxtb	r3, r3
   1579a:	2b00      	cmp	r3, #0
   1579c:	d02f      	beq.n	157fe <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   1579e:	687a      	ldr	r2, [r7, #4]
   157a0:	4613      	mov	r3, r2
   157a2:	009b      	lsls	r3, r3, #2
   157a4:	4413      	add	r3, r2
   157a6:	005b      	lsls	r3, r3, #1
   157a8:	461a      	mov	r2, r3
   157aa:	4917      	ldr	r1, [pc, #92]	; (15808 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   157ac:	4817      	ldr	r0, [pc, #92]	; (1580c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   157ae:	4b18      	ldr	r3, [pc, #96]	; (15810 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
   157b0:	4798      	blx	r3
		txReady=false;
   157b2:	68fb      	ldr	r3, [r7, #12]
   157b4:	2200      	movs	r2, #0
   157b6:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   157b8:	687b      	ldr	r3, [r7, #4]
   157ba:	4619      	mov	r1, r3
   157bc:	68b8      	ldr	r0, [r7, #8]
   157be:	4b15      	ldr	r3, [pc, #84]	; (15814 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
   157c0:	4798      	blx	r3
   157c2:	4603      	mov	r3, r0
   157c4:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
   157c6:	68fb      	ldr	r3, [r7, #12]
   157c8:	7d1b      	ldrb	r3, [r3, #20]
   157ca:	b2db      	uxtb	r3, r3
   157cc:	f083 0301 	eor.w	r3, r3, #1
   157d0:	b2db      	uxtb	r3, r3
   157d2:	2b00      	cmp	r3, #0
   157d4:	d006      	beq.n	157e4 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   157d6:	68fb      	ldr	r3, [r7, #12]
   157d8:	7c1b      	ldrb	r3, [r3, #16]
   157da:	b2db      	uxtb	r3, r3
   157dc:	2b00      	cmp	r3, #0
   157de:	d001      	beq.n	157e4 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   157e0:	2301      	movs	r3, #1
   157e2:	e000      	b.n	157e6 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
   157e4:	2300      	movs	r3, #0
   157e6:	2b00      	cmp	r3, #0
   157e8:	d000      	beq.n	157ec <_ZN9CDC_Class9writeDataEPKvl+0x64>
   157ea:	e7ec      	b.n	157c6 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
   157ec:	4807      	ldr	r0, [pc, #28]	; (1580c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   157ee:	4b0a      	ldr	r3, [pc, #40]	; (15818 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
   157f0:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   157f2:	4905      	ldr	r1, [pc, #20]	; (15808 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   157f4:	4805      	ldr	r0, [pc, #20]	; (1580c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   157f6:	4b09      	ldr	r3, [pc, #36]	; (1581c <_ZN9CDC_Class9writeDataEPKvl+0x94>)
   157f8:	4798      	blx	r3
		return r;
   157fa:	697b      	ldr	r3, [r7, #20]
   157fc:	e000      	b.n	15800 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
   157fe:	2300      	movs	r3, #0
	}
	

}
   15800:	4618      	mov	r0, r3
   15802:	3718      	adds	r7, #24
   15804:	46bd      	mov	sp, r7
   15806:	bd80      	pop	{r7, pc}
   15808:	00015405 	.word	0x00015405
   1580c:	2000540c 	.word	0x2000540c
   15810:	00015f9d 	.word	0x00015f9d
   15814:	0000fe39 	.word	0x0000fe39
   15818:	00015ebd 	.word	0x00015ebd
   1581c:	00016001 	.word	0x00016001

00015820 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   15820:	b580      	push	{r7, lr}
   15822:	b086      	sub	sp, #24
   15824:	af00      	add	r7, sp, #0
   15826:	60f8      	str	r0, [r7, #12]
   15828:	60b9      	str	r1, [r7, #8]
   1582a:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   1582c:	68fb      	ldr	r3, [r7, #12]
   1582e:	2200      	movs	r2, #0
   15830:	751a      	strb	r2, [r3, #20]

 	if (connected){
   15832:	68fb      	ldr	r3, [r7, #12]
   15834:	7c1b      	ldrb	r3, [r3, #16]
   15836:	b2db      	uxtb	r3, r3
   15838:	2b00      	cmp	r3, #0
   1583a:	d02a      	beq.n	15892 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   1583c:	687a      	ldr	r2, [r7, #4]
   1583e:	4613      	mov	r3, r2
   15840:	009b      	lsls	r3, r3, #2
   15842:	4413      	add	r3, r2
   15844:	005b      	lsls	r3, r3, #1
   15846:	461a      	mov	r2, r3
   15848:	4915      	ldr	r1, [pc, #84]	; (158a0 <_ZN9CDC_Class5writeEPKhj+0x80>)
   1584a:	4816      	ldr	r0, [pc, #88]	; (158a4 <_ZN9CDC_Class5writeEPKhj+0x84>)
   1584c:	4b16      	ldr	r3, [pc, #88]	; (158a8 <_ZN9CDC_Class5writeEPKhj+0x88>)
   1584e:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   15850:	6879      	ldr	r1, [r7, #4]
   15852:	68b8      	ldr	r0, [r7, #8]
   15854:	4b15      	ldr	r3, [pc, #84]	; (158ac <_ZN9CDC_Class5writeEPKhj+0x8c>)
   15856:	4798      	blx	r3
   15858:	4603      	mov	r3, r0
   1585a:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
   1585c:	68fb      	ldr	r3, [r7, #12]
   1585e:	7d1b      	ldrb	r3, [r3, #20]
   15860:	b2db      	uxtb	r3, r3
   15862:	f083 0301 	eor.w	r3, r3, #1
   15866:	b2db      	uxtb	r3, r3
   15868:	2b00      	cmp	r3, #0
   1586a:	d006      	beq.n	1587a <_ZN9CDC_Class5writeEPKhj+0x5a>
   1586c:	68fb      	ldr	r3, [r7, #12]
   1586e:	7c1b      	ldrb	r3, [r3, #16]
   15870:	b2db      	uxtb	r3, r3
   15872:	2b00      	cmp	r3, #0
   15874:	d001      	beq.n	1587a <_ZN9CDC_Class5writeEPKhj+0x5a>
   15876:	2301      	movs	r3, #1
   15878:	e000      	b.n	1587c <_ZN9CDC_Class5writeEPKhj+0x5c>
   1587a:	2300      	movs	r3, #0
   1587c:	2b00      	cmp	r3, #0
   1587e:	d000      	beq.n	15882 <_ZN9CDC_Class5writeEPKhj+0x62>
   15880:	e7ec      	b.n	1585c <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
   15882:	4808      	ldr	r0, [pc, #32]	; (158a4 <_ZN9CDC_Class5writeEPKhj+0x84>)
   15884:	4b0a      	ldr	r3, [pc, #40]	; (158b0 <_ZN9CDC_Class5writeEPKhj+0x90>)
   15886:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   15888:	4905      	ldr	r1, [pc, #20]	; (158a0 <_ZN9CDC_Class5writeEPKhj+0x80>)
   1588a:	4806      	ldr	r0, [pc, #24]	; (158a4 <_ZN9CDC_Class5writeEPKhj+0x84>)
   1588c:	4b09      	ldr	r3, [pc, #36]	; (158b4 <_ZN9CDC_Class5writeEPKhj+0x94>)
   1588e:	4798      	blx	r3
   15890:	e001      	b.n	15896 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
   15892:	2300      	movs	r3, #0
   15894:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   15896:	697b      	ldr	r3, [r7, #20]
}
   15898:	4618      	mov	r0, r3
   1589a:	3718      	adds	r7, #24
   1589c:	46bd      	mov	sp, r7
   1589e:	bd80      	pop	{r7, pc}
   158a0:	00015405 	.word	0x00015405
   158a4:	2000540c 	.word	0x2000540c
   158a8:	00015f9d 	.word	0x00015f9d
   158ac:	0000fe39 	.word	0x0000fe39
   158b0:	00015ebd 	.word	0x00015ebd
   158b4:	00016001 	.word	0x00016001

000158b8 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   158b8:	b480      	push	{r7}
   158ba:	b083      	sub	sp, #12
   158bc:	af00      	add	r7, sp, #0
   158be:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   158c0:	687b      	ldr	r3, [r7, #4]
   158c2:	7d5b      	ldrb	r3, [r3, #21]
   158c4:	b2db      	uxtb	r3, r3
   158c6:	2b00      	cmp	r3, #0
   158c8:	d006      	beq.n	158d8 <_ZN9CDC_Class9availableEv+0x20>
   158ca:	687b      	ldr	r3, [r7, #4]
   158cc:	7d1b      	ldrb	r3, [r3, #20]
   158ce:	b2db      	uxtb	r3, r3
   158d0:	2b00      	cmp	r3, #0
   158d2:	d001      	beq.n	158d8 <_ZN9CDC_Class9availableEv+0x20>
   158d4:	2301      	movs	r3, #1
   158d6:	e000      	b.n	158da <_ZN9CDC_Class9availableEv+0x22>
   158d8:	2300      	movs	r3, #0
   158da:	2b00      	cmp	r3, #0
   158dc:	d001      	beq.n	158e2 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   158de:	2301      	movs	r3, #1
   158e0:	e000      	b.n	158e4 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   158e2:	2300      	movs	r3, #0
	}
	
}
   158e4:	4618      	mov	r0, r3
   158e6:	370c      	adds	r7, #12
   158e8:	46bd      	mov	sp, r7
   158ea:	bc80      	pop	{r7}
   158ec:	4770      	bx	lr
	...

000158f0 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   158f0:	b580      	push	{r7, lr}
   158f2:	b082      	sub	sp, #8
   158f4:	af00      	add	r7, sp, #0
   158f6:	6078      	str	r0, [r7, #4]
   158f8:	6039      	str	r1, [r7, #0]
   158fa:	687b      	ldr	r3, [r7, #4]
   158fc:	2b01      	cmp	r3, #1
   158fe:	d10c      	bne.n	1591a <_Z41__static_initialization_and_destruction_0ii+0x2a>
   15900:	683b      	ldr	r3, [r7, #0]
   15902:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15906:	4293      	cmp	r3, r2
   15908:	d107      	bne.n	1591a <_Z41__static_initialization_and_destruction_0ii+0x2a>
   1590a:	4806      	ldr	r0, [pc, #24]	; (15924 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1590c:	4b06      	ldr	r3, [pc, #24]	; (15928 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1590e:	4798      	blx	r3
   15910:	4a06      	ldr	r2, [pc, #24]	; (1592c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   15912:	4907      	ldr	r1, [pc, #28]	; (15930 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   15914:	4803      	ldr	r0, [pc, #12]	; (15924 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   15916:	4b07      	ldr	r3, [pc, #28]	; (15934 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15918:	4798      	blx	r3
   1591a:	bf00      	nop
   1591c:	3708      	adds	r7, #8
   1591e:	46bd      	mov	sp, r7
   15920:	bd80      	pop	{r7, pc}
   15922:	bf00      	nop
   15924:	20005304 	.word	0x20005304
   15928:	000154f5 	.word	0x000154f5
   1592c:	20000000 	.word	0x20000000
   15930:	0001553d 	.word	0x0001553d
   15934:	000167bd 	.word	0x000167bd

00015938 <_GLOBAL__sub_I_ptrCDCClass>:
   15938:	b580      	push	{r7, lr}
   1593a:	af00      	add	r7, sp, #0
   1593c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15940:	2001      	movs	r0, #1
   15942:	4b01      	ldr	r3, [pc, #4]	; (15948 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   15944:	4798      	blx	r3
   15946:	bd80      	pop	{r7, pc}
   15948:	000158f1 	.word	0x000158f1

0001594c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   1594c:	b580      	push	{r7, lr}
   1594e:	b086      	sub	sp, #24
   15950:	af00      	add	r7, sp, #0
   15952:	60f8      	str	r0, [r7, #12]
   15954:	60b9      	str	r1, [r7, #8]
   15956:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   15958:	2300      	movs	r3, #0
   1595a:	617b      	str	r3, [r7, #20]
  while (size--) {
   1595c:	687b      	ldr	r3, [r7, #4]
   1595e:	1e5a      	subs	r2, r3, #1
   15960:	607a      	str	r2, [r7, #4]
   15962:	2b00      	cmp	r3, #0
   15964:	bf14      	ite	ne
   15966:	2301      	movne	r3, #1
   15968:	2300      	moveq	r3, #0
   1596a:	b2db      	uxtb	r3, r3
   1596c:	2b00      	cmp	r3, #0
   1596e:	d016      	beq.n	1599e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   15970:	68fb      	ldr	r3, [r7, #12]
   15972:	681b      	ldr	r3, [r3, #0]
   15974:	681a      	ldr	r2, [r3, #0]
   15976:	68bb      	ldr	r3, [r7, #8]
   15978:	1c59      	adds	r1, r3, #1
   1597a:	60b9      	str	r1, [r7, #8]
   1597c:	781b      	ldrb	r3, [r3, #0]
   1597e:	4619      	mov	r1, r3
   15980:	68f8      	ldr	r0, [r7, #12]
   15982:	4790      	blx	r2
   15984:	4603      	mov	r3, r0
   15986:	2b00      	cmp	r3, #0
   15988:	bf14      	ite	ne
   1598a:	2301      	movne	r3, #1
   1598c:	2300      	moveq	r3, #0
   1598e:	b2db      	uxtb	r3, r3
   15990:	2b00      	cmp	r3, #0
   15992:	d003      	beq.n	1599c <_ZN5Print5writeEPKhj+0x50>
   15994:	697b      	ldr	r3, [r7, #20]
   15996:	3301      	adds	r3, #1
   15998:	617b      	str	r3, [r7, #20]
  while (size--) {
   1599a:	e7df      	b.n	1595c <_ZN5Print5writeEPKhj+0x10>
    else break;
   1599c:	bf00      	nop
  }
  return n;
   1599e:	697b      	ldr	r3, [r7, #20]
}
   159a0:	4618      	mov	r0, r3
   159a2:	3718      	adds	r7, #24
   159a4:	46bd      	mov	sp, r7
   159a6:	bd80      	pop	{r7, pc}

000159a8 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
   159a8:	b580      	push	{r7, lr}
   159aa:	b082      	sub	sp, #8
   159ac:	af00      	add	r7, sp, #0
   159ae:	6078      	str	r0, [r7, #4]
   159b0:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
   159b2:	6839      	ldr	r1, [r7, #0]
   159b4:	6878      	ldr	r0, [r7, #4]
   159b6:	4b03      	ldr	r3, [pc, #12]	; (159c4 <_ZN5Print5printEPK19__FlashStringHelper+0x1c>)
   159b8:	4798      	blx	r3
   159ba:	4603      	mov	r3, r0
}
   159bc:	4618      	mov	r0, r3
   159be:	3708      	adds	r7, #8
   159c0:	46bd      	mov	sp, r7
   159c2:	bd80      	pop	{r7, pc}
   159c4:	000159c9 	.word	0x000159c9

000159c8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
   159c8:	b580      	push	{r7, lr}
   159ca:	b082      	sub	sp, #8
   159cc:	af00      	add	r7, sp, #0
   159ce:	6078      	str	r0, [r7, #4]
   159d0:	6039      	str	r1, [r7, #0]
  return write(str);
   159d2:	6839      	ldr	r1, [r7, #0]
   159d4:	6878      	ldr	r0, [r7, #4]
   159d6:	4b03      	ldr	r3, [pc, #12]	; (159e4 <_ZN5Print5printEPKc+0x1c>)
   159d8:	4798      	blx	r3
   159da:	4603      	mov	r3, r0
}
   159dc:	4618      	mov	r0, r3
   159de:	3708      	adds	r7, #8
   159e0:	46bd      	mov	sp, r7
   159e2:	bd80      	pop	{r7, pc}
   159e4:	00002389 	.word	0x00002389

000159e8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
   159e8:	b580      	push	{r7, lr}
   159ea:	b082      	sub	sp, #8
   159ec:	af00      	add	r7, sp, #0
   159ee:	6078      	str	r0, [r7, #4]
   159f0:	460b      	mov	r3, r1
   159f2:	70fb      	strb	r3, [r7, #3]
  return write(c);
   159f4:	687b      	ldr	r3, [r7, #4]
   159f6:	681b      	ldr	r3, [r3, #0]
   159f8:	681b      	ldr	r3, [r3, #0]
   159fa:	78fa      	ldrb	r2, [r7, #3]
   159fc:	4611      	mov	r1, r2
   159fe:	6878      	ldr	r0, [r7, #4]
   15a00:	4798      	blx	r3
   15a02:	4603      	mov	r3, r0
}
   15a04:	4618      	mov	r0, r3
   15a06:	3708      	adds	r7, #8
   15a08:	46bd      	mov	sp, r7
   15a0a:	bd80      	pop	{r7, pc}

00015a0c <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
   15a0c:	b580      	push	{r7, lr}
   15a0e:	b084      	sub	sp, #16
   15a10:	af00      	add	r7, sp, #0
   15a12:	60f8      	str	r0, [r7, #12]
   15a14:	460b      	mov	r3, r1
   15a16:	607a      	str	r2, [r7, #4]
   15a18:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
   15a1a:	7afb      	ldrb	r3, [r7, #11]
   15a1c:	687a      	ldr	r2, [r7, #4]
   15a1e:	4619      	mov	r1, r3
   15a20:	68f8      	ldr	r0, [r7, #12]
   15a22:	4b03      	ldr	r3, [pc, #12]	; (15a30 <_ZN5Print5printEhi+0x24>)
   15a24:	4798      	blx	r3
   15a26:	4603      	mov	r3, r0
}
   15a28:	4618      	mov	r0, r3
   15a2a:	3710      	adds	r7, #16
   15a2c:	46bd      	mov	sp, r7
   15a2e:	bd80      	pop	{r7, pc}
   15a30:	00015a35 	.word	0x00015a35

00015a34 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   15a34:	b580      	push	{r7, lr}
   15a36:	b084      	sub	sp, #16
   15a38:	af00      	add	r7, sp, #0
   15a3a:	60f8      	str	r0, [r7, #12]
   15a3c:	60b9      	str	r1, [r7, #8]
   15a3e:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
   15a40:	687b      	ldr	r3, [r7, #4]
   15a42:	2b00      	cmp	r3, #0
   15a44:	d109      	bne.n	15a5a <_ZN5Print5printEmi+0x26>
   15a46:	68fb      	ldr	r3, [r7, #12]
   15a48:	681b      	ldr	r3, [r3, #0]
   15a4a:	681b      	ldr	r3, [r3, #0]
   15a4c:	68ba      	ldr	r2, [r7, #8]
   15a4e:	b2d2      	uxtb	r2, r2
   15a50:	4611      	mov	r1, r2
   15a52:	68f8      	ldr	r0, [r7, #12]
   15a54:	4798      	blx	r3
   15a56:	4603      	mov	r3, r0
   15a58:	e007      	b.n	15a6a <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
   15a5a:	687b      	ldr	r3, [r7, #4]
   15a5c:	b2db      	uxtb	r3, r3
   15a5e:	461a      	mov	r2, r3
   15a60:	68b9      	ldr	r1, [r7, #8]
   15a62:	68f8      	ldr	r0, [r7, #12]
   15a64:	4b03      	ldr	r3, [pc, #12]	; (15a74 <_ZN5Print5printEmi+0x40>)
   15a66:	4798      	blx	r3
   15a68:	4603      	mov	r3, r0
}
   15a6a:	4618      	mov	r0, r3
   15a6c:	3710      	adds	r7, #16
   15a6e:	46bd      	mov	sp, r7
   15a70:	bd80      	pop	{r7, pc}
   15a72:	bf00      	nop
   15a74:	00015b41 	.word	0x00015b41

00015a78 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
   15a78:	b580      	push	{r7, lr}
   15a7a:	b084      	sub	sp, #16
   15a7c:	af00      	add	r7, sp, #0
   15a7e:	6078      	str	r0, [r7, #4]
   15a80:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
   15a82:	6839      	ldr	r1, [r7, #0]
   15a84:	6878      	ldr	r0, [r7, #4]
   15a86:	4b07      	ldr	r3, [pc, #28]	; (15aa4 <_ZN5Print7printlnEPK19__FlashStringHelper+0x2c>)
   15a88:	4798      	blx	r3
   15a8a:	60f8      	str	r0, [r7, #12]
  n += println();
   15a8c:	6878      	ldr	r0, [r7, #4]
   15a8e:	4b06      	ldr	r3, [pc, #24]	; (15aa8 <_ZN5Print7printlnEPK19__FlashStringHelper+0x30>)
   15a90:	4798      	blx	r3
   15a92:	4602      	mov	r2, r0
   15a94:	68fb      	ldr	r3, [r7, #12]
   15a96:	4413      	add	r3, r2
   15a98:	60fb      	str	r3, [r7, #12]
  return n;
   15a9a:	68fb      	ldr	r3, [r7, #12]
}
   15a9c:	4618      	mov	r0, r3
   15a9e:	3710      	adds	r7, #16
   15aa0:	46bd      	mov	sp, r7
   15aa2:	bd80      	pop	{r7, pc}
   15aa4:	000159a9 	.word	0x000159a9
   15aa8:	00015aad 	.word	0x00015aad

00015aac <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   15aac:	b580      	push	{r7, lr}
   15aae:	b082      	sub	sp, #8
   15ab0:	af00      	add	r7, sp, #0
   15ab2:	6078      	str	r0, [r7, #4]
  return write("\r\n");
   15ab4:	4904      	ldr	r1, [pc, #16]	; (15ac8 <_ZN5Print7printlnEv+0x1c>)
   15ab6:	6878      	ldr	r0, [r7, #4]
   15ab8:	4b04      	ldr	r3, [pc, #16]	; (15acc <_ZN5Print7printlnEv+0x20>)
   15aba:	4798      	blx	r3
   15abc:	4603      	mov	r3, r0
}
   15abe:	4618      	mov	r0, r3
   15ac0:	3708      	adds	r7, #8
   15ac2:	46bd      	mov	sp, r7
   15ac4:	bd80      	pop	{r7, pc}
   15ac6:	bf00      	nop
   15ac8:	0001e530 	.word	0x0001e530
   15acc:	00002389 	.word	0x00002389

00015ad0 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
   15ad0:	b580      	push	{r7, lr}
   15ad2:	b084      	sub	sp, #16
   15ad4:	af00      	add	r7, sp, #0
   15ad6:	6078      	str	r0, [r7, #4]
   15ad8:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
   15ada:	6839      	ldr	r1, [r7, #0]
   15adc:	6878      	ldr	r0, [r7, #4]
   15ade:	4b07      	ldr	r3, [pc, #28]	; (15afc <_ZN5Print7printlnEPKc+0x2c>)
   15ae0:	4798      	blx	r3
   15ae2:	60f8      	str	r0, [r7, #12]
  n += println();
   15ae4:	6878      	ldr	r0, [r7, #4]
   15ae6:	4b06      	ldr	r3, [pc, #24]	; (15b00 <_ZN5Print7printlnEPKc+0x30>)
   15ae8:	4798      	blx	r3
   15aea:	4602      	mov	r2, r0
   15aec:	68fb      	ldr	r3, [r7, #12]
   15aee:	4413      	add	r3, r2
   15af0:	60fb      	str	r3, [r7, #12]
  return n;
   15af2:	68fb      	ldr	r3, [r7, #12]
}
   15af4:	4618      	mov	r0, r3
   15af6:	3710      	adds	r7, #16
   15af8:	46bd      	mov	sp, r7
   15afa:	bd80      	pop	{r7, pc}
   15afc:	000159c9 	.word	0x000159c9
   15b00:	00015aad 	.word	0x00015aad

00015b04 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   15b04:	b580      	push	{r7, lr}
   15b06:	b086      	sub	sp, #24
   15b08:	af00      	add	r7, sp, #0
   15b0a:	60f8      	str	r0, [r7, #12]
   15b0c:	460b      	mov	r3, r1
   15b0e:	607a      	str	r2, [r7, #4]
   15b10:	72fb      	strb	r3, [r7, #11]
  size_t n = print(b, base);
   15b12:	7afb      	ldrb	r3, [r7, #11]
   15b14:	687a      	ldr	r2, [r7, #4]
   15b16:	4619      	mov	r1, r3
   15b18:	68f8      	ldr	r0, [r7, #12]
   15b1a:	4b07      	ldr	r3, [pc, #28]	; (15b38 <_ZN5Print7printlnEhi+0x34>)
   15b1c:	4798      	blx	r3
   15b1e:	6178      	str	r0, [r7, #20]
  n += println();
   15b20:	68f8      	ldr	r0, [r7, #12]
   15b22:	4b06      	ldr	r3, [pc, #24]	; (15b3c <_ZN5Print7printlnEhi+0x38>)
   15b24:	4798      	blx	r3
   15b26:	4602      	mov	r2, r0
   15b28:	697b      	ldr	r3, [r7, #20]
   15b2a:	4413      	add	r3, r2
   15b2c:	617b      	str	r3, [r7, #20]
  return n;
   15b2e:	697b      	ldr	r3, [r7, #20]
}
   15b30:	4618      	mov	r0, r3
   15b32:	3718      	adds	r7, #24
   15b34:	46bd      	mov	sp, r7
   15b36:	bd80      	pop	{r7, pc}
   15b38:	00015a0d 	.word	0x00015a0d
   15b3c:	00015aad 	.word	0x00015aad

00015b40 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   15b40:	b580      	push	{r7, lr}
   15b42:	b08e      	sub	sp, #56	; 0x38
   15b44:	af00      	add	r7, sp, #0
   15b46:	60f8      	str	r0, [r7, #12]
   15b48:	60b9      	str	r1, [r7, #8]
   15b4a:	4613      	mov	r3, r2
   15b4c:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
   15b4e:	f107 0310 	add.w	r3, r7, #16
   15b52:	3320      	adds	r3, #32
   15b54:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
   15b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15b58:	2200      	movs	r2, #0
   15b5a:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   15b5c:	79fb      	ldrb	r3, [r7, #7]
   15b5e:	2b01      	cmp	r3, #1
   15b60:	dc01      	bgt.n	15b66 <_ZN5Print11printNumberEmh+0x26>
   15b62:	230a      	movs	r3, #10
   15b64:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
   15b66:	79fa      	ldrb	r2, [r7, #7]
   15b68:	68bb      	ldr	r3, [r7, #8]
   15b6a:	fbb3 f1f2 	udiv	r1, r3, r2
   15b6e:	fb02 f201 	mul.w	r2, r2, r1
   15b72:	1a9b      	subs	r3, r3, r2
   15b74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
   15b78:	79fb      	ldrb	r3, [r7, #7]
   15b7a:	68ba      	ldr	r2, [r7, #8]
   15b7c:	fbb2 f3f3 	udiv	r3, r2, r3
   15b80:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   15b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15b84:	3b01      	subs	r3, #1
   15b86:	637b      	str	r3, [r7, #52]	; 0x34
   15b88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   15b8c:	2b09      	cmp	r3, #9
   15b8e:	dc04      	bgt.n	15b9a <_ZN5Print11printNumberEmh+0x5a>
   15b90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   15b94:	3330      	adds	r3, #48	; 0x30
   15b96:	b2db      	uxtb	r3, r3
   15b98:	e003      	b.n	15ba2 <_ZN5Print11printNumberEmh+0x62>
   15b9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   15b9e:	3337      	adds	r3, #55	; 0x37
   15ba0:	b2db      	uxtb	r3, r3
   15ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   15ba4:	7013      	strb	r3, [r2, #0]
  } while(n);
   15ba6:	68bb      	ldr	r3, [r7, #8]
   15ba8:	2b00      	cmp	r3, #0
   15baa:	d000      	beq.n	15bae <_ZN5Print11printNumberEmh+0x6e>
  do {
   15bac:	e7db      	b.n	15b66 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
   15bae:	6b79      	ldr	r1, [r7, #52]	; 0x34
   15bb0:	68f8      	ldr	r0, [r7, #12]
   15bb2:	4b03      	ldr	r3, [pc, #12]	; (15bc0 <_ZN5Print11printNumberEmh+0x80>)
   15bb4:	4798      	blx	r3
   15bb6:	4603      	mov	r3, r0
}
   15bb8:	4618      	mov	r0, r3
   15bba:	3738      	adds	r7, #56	; 0x38
   15bbc:	46bd      	mov	sp, r7
   15bbe:	bd80      	pop	{r7, pc}
   15bc0:	00002389 	.word	0x00002389

00015bc4 <hri_port_read_DIR_reg>:
{
   15bc4:	b480      	push	{r7}
   15bc6:	b083      	sub	sp, #12
   15bc8:	af00      	add	r7, sp, #0
   15bca:	6078      	str	r0, [r7, #4]
   15bcc:	460b      	mov	r3, r1
   15bce:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   15bd0:	78fb      	ldrb	r3, [r7, #3]
   15bd2:	687a      	ldr	r2, [r7, #4]
   15bd4:	01db      	lsls	r3, r3, #7
   15bd6:	4413      	add	r3, r2
   15bd8:	681b      	ldr	r3, [r3, #0]
}
   15bda:	4618      	mov	r0, r3
   15bdc:	370c      	adds	r7, #12
   15bde:	46bd      	mov	sp, r7
   15be0:	bc80      	pop	{r7}
   15be2:	4770      	bx	lr

00015be4 <hri_port_read_OUT_reg>:
{
   15be4:	b480      	push	{r7}
   15be6:	b083      	sub	sp, #12
   15be8:	af00      	add	r7, sp, #0
   15bea:	6078      	str	r0, [r7, #4]
   15bec:	460b      	mov	r3, r1
   15bee:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   15bf0:	78fb      	ldrb	r3, [r7, #3]
   15bf2:	687a      	ldr	r2, [r7, #4]
   15bf4:	01db      	lsls	r3, r3, #7
   15bf6:	4413      	add	r3, r2
   15bf8:	3310      	adds	r3, #16
   15bfa:	681b      	ldr	r3, [r3, #0]
}
   15bfc:	4618      	mov	r0, r3
   15bfe:	370c      	adds	r7, #12
   15c00:	46bd      	mov	sp, r7
   15c02:	bc80      	pop	{r7}
   15c04:	4770      	bx	lr

00015c06 <hri_port_read_IN_reg>:
{
   15c06:	b480      	push	{r7}
   15c08:	b083      	sub	sp, #12
   15c0a:	af00      	add	r7, sp, #0
   15c0c:	6078      	str	r0, [r7, #4]
   15c0e:	460b      	mov	r3, r1
   15c10:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   15c12:	78fb      	ldrb	r3, [r7, #3]
   15c14:	687a      	ldr	r2, [r7, #4]
   15c16:	01db      	lsls	r3, r3, #7
   15c18:	4413      	add	r3, r2
   15c1a:	3320      	adds	r3, #32
   15c1c:	681b      	ldr	r3, [r3, #0]
}
   15c1e:	4618      	mov	r0, r3
   15c20:	370c      	adds	r7, #12
   15c22:	46bd      	mov	sp, r7
   15c24:	bc80      	pop	{r7}
   15c26:	4770      	bx	lr

00015c28 <_gpio_get_level>:
{
   15c28:	b580      	push	{r7, lr}
   15c2a:	b086      	sub	sp, #24
   15c2c:	af00      	add	r7, sp, #0
   15c2e:	4603      	mov	r3, r0
   15c30:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
   15c32:	f107 030c 	add.w	r3, r7, #12
   15c36:	4618      	mov	r0, r3
   15c38:	4b13      	ldr	r3, [pc, #76]	; (15c88 <_gpio_get_level+0x60>)
   15c3a:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   15c3c:	79fb      	ldrb	r3, [r7, #7]
   15c3e:	4619      	mov	r1, r3
   15c40:	4812      	ldr	r0, [pc, #72]	; (15c8c <_gpio_get_level+0x64>)
   15c42:	4b13      	ldr	r3, [pc, #76]	; (15c90 <_gpio_get_level+0x68>)
   15c44:	4798      	blx	r3
   15c46:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   15c48:	79fb      	ldrb	r3, [r7, #7]
   15c4a:	4619      	mov	r1, r3
   15c4c:	480f      	ldr	r0, [pc, #60]	; (15c8c <_gpio_get_level+0x64>)
   15c4e:	4b11      	ldr	r3, [pc, #68]	; (15c94 <_gpio_get_level+0x6c>)
   15c50:	4798      	blx	r3
   15c52:	4602      	mov	r2, r0
   15c54:	697b      	ldr	r3, [r7, #20]
   15c56:	43db      	mvns	r3, r3
   15c58:	4013      	ands	r3, r2
   15c5a:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   15c5c:	79fb      	ldrb	r3, [r7, #7]
   15c5e:	4619      	mov	r1, r3
   15c60:	480a      	ldr	r0, [pc, #40]	; (15c8c <_gpio_get_level+0x64>)
   15c62:	4b0d      	ldr	r3, [pc, #52]	; (15c98 <_gpio_get_level+0x70>)
   15c64:	4798      	blx	r3
   15c66:	4602      	mov	r2, r0
   15c68:	697b      	ldr	r3, [r7, #20]
   15c6a:	4013      	ands	r3, r2
   15c6c:	693a      	ldr	r2, [r7, #16]
   15c6e:	4313      	orrs	r3, r2
   15c70:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
   15c72:	f107 030c 	add.w	r3, r7, #12
   15c76:	4618      	mov	r0, r3
   15c78:	4b08      	ldr	r3, [pc, #32]	; (15c9c <_gpio_get_level+0x74>)
   15c7a:	4798      	blx	r3
	return tmp;
   15c7c:	693b      	ldr	r3, [r7, #16]
}
   15c7e:	4618      	mov	r0, r3
   15c80:	3718      	adds	r7, #24
   15c82:	46bd      	mov	sp, r7
   15c84:	bd80      	pop	{r7, pc}
   15c86:	bf00      	nop
   15c88:	0000f015 	.word	0x0000f015
   15c8c:	41008000 	.word	0x41008000
   15c90:	00015bc5 	.word	0x00015bc5
   15c94:	00015c07 	.word	0x00015c07
   15c98:	00015be5 	.word	0x00015be5
   15c9c:	0000f03b 	.word	0x0000f03b

00015ca0 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   15ca0:	b580      	push	{r7, lr}
   15ca2:	b082      	sub	sp, #8
   15ca4:	af00      	add	r7, sp, #0
   15ca6:	4603      	mov	r3, r0
   15ca8:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   15caa:	79fb      	ldrb	r3, [r7, #7]
   15cac:	115b      	asrs	r3, r3, #5
   15cae:	b2db      	uxtb	r3, r3
   15cb0:	4618      	mov	r0, r3
   15cb2:	4b09      	ldr	r3, [pc, #36]	; (15cd8 <gpio_get_pin_level+0x38>)
   15cb4:	4798      	blx	r3
   15cb6:	4601      	mov	r1, r0
   15cb8:	79fb      	ldrb	r3, [r7, #7]
   15cba:	f003 031f 	and.w	r3, r3, #31
   15cbe:	2201      	movs	r2, #1
   15cc0:	fa02 f303 	lsl.w	r3, r2, r3
   15cc4:	400b      	ands	r3, r1
   15cc6:	2b00      	cmp	r3, #0
   15cc8:	bf14      	ite	ne
   15cca:	2301      	movne	r3, #1
   15ccc:	2300      	moveq	r3, #0
   15cce:	b2db      	uxtb	r3, r3
}
   15cd0:	4618      	mov	r0, r3
   15cd2:	3708      	adds	r7, #8
   15cd4:	46bd      	mov	sp, r7
   15cd6:	bd80      	pop	{r7, pc}
   15cd8:	00015c29 	.word	0x00015c29

00015cdc <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   15cdc:	b480      	push	{r7}
   15cde:	b083      	sub	sp, #12
   15ce0:	af00      	add	r7, sp, #0
   15ce2:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   15ce4:	4b06      	ldr	r3, [pc, #24]	; (15d00 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   15ce6:	681b      	ldr	r3, [r3, #0]
   15ce8:	2201      	movs	r2, #1
   15cea:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
   15cec:	4b04      	ldr	r3, [pc, #16]	; (15d00 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   15cee:	681b      	ldr	r3, [r3, #0]
   15cf0:	2200      	movs	r2, #0
   15cf2:	705a      	strb	r2, [r3, #1]
}
   15cf4:	bf00      	nop
   15cf6:	370c      	adds	r7, #12
   15cf8:	46bd      	mov	sp, r7
   15cfa:	bc80      	pop	{r7}
   15cfc:	4770      	bx	lr
   15cfe:	bf00      	nop
   15d00:	20005364 	.word	0x20005364

00015d04 <_ZL10USBPluggedv>:

static void USBPlugged(void){
   15d04:	b580      	push	{r7, lr}
   15d06:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
   15d08:	2040      	movs	r0, #64	; 0x40
   15d0a:	4b0a      	ldr	r3, [pc, #40]	; (15d34 <_ZL10USBPluggedv+0x30>)
   15d0c:	4798      	blx	r3
   15d0e:	4603      	mov	r3, r0
   15d10:	2b00      	cmp	r3, #0
   15d12:	d004      	beq.n	15d1e <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
   15d14:	4b08      	ldr	r3, [pc, #32]	; (15d38 <_ZL10USBPluggedv+0x34>)
   15d16:	681b      	ldr	r3, [r3, #0]
   15d18:	2201      	movs	r2, #1
   15d1a:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
   15d1c:	e007      	b.n	15d2e <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
   15d1e:	4b06      	ldr	r3, [pc, #24]	; (15d38 <_ZL10USBPluggedv+0x34>)
   15d20:	681b      	ldr	r3, [r3, #0]
   15d22:	2200      	movs	r2, #0
   15d24:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
   15d26:	4b04      	ldr	r3, [pc, #16]	; (15d38 <_ZL10USBPluggedv+0x34>)
   15d28:	681b      	ldr	r3, [r3, #0]
   15d2a:	2200      	movs	r2, #0
   15d2c:	701a      	strb	r2, [r3, #0]
}
   15d2e:	bf00      	nop
   15d30:	bd80      	pop	{r7, pc}
   15d32:	bf00      	nop
   15d34:	00015ca1 	.word	0x00015ca1
   15d38:	20005364 	.word	0x20005364

00015d3c <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   15d3c:	b480      	push	{r7}
   15d3e:	b083      	sub	sp, #12
   15d40:	af00      	add	r7, sp, #0
   15d42:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   15d44:	4a04      	ldr	r2, [pc, #16]	; (15d58 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   15d46:	687b      	ldr	r3, [r7, #4]
   15d48:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
   15d4a:	687b      	ldr	r3, [r7, #4]
   15d4c:	4618      	mov	r0, r3
   15d4e:	370c      	adds	r7, #12
   15d50:	46bd      	mov	sp, r7
   15d52:	bc80      	pop	{r7}
   15d54:	4770      	bx	lr
   15d56:	bf00      	nop
   15d58:	20005364 	.word	0x20005364

00015d5c <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   15d5c:	b480      	push	{r7}
   15d5e:	b083      	sub	sp, #12
   15d60:	af00      	add	r7, sp, #0
   15d62:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   15d64:	687b      	ldr	r3, [r7, #4]
   15d66:	4618      	mov	r0, r3
   15d68:	370c      	adds	r7, #12
   15d6a:	46bd      	mov	sp, r7
   15d6c:	bc80      	pop	{r7}
   15d6e:	4770      	bx	lr

00015d70 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   15d70:	b580      	push	{r7, lr}
   15d72:	b082      	sub	sp, #8
   15d74:	af00      	add	r7, sp, #0
   15d76:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
   15d78:	491e      	ldr	r1, [pc, #120]	; (15df4 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   15d7a:	2040      	movs	r0, #64	; 0x40
   15d7c:	4b1e      	ldr	r3, [pc, #120]	; (15df8 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   15d7e:	4798      	blx	r3
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   15d80:	2040      	movs	r0, #64	; 0x40
   15d82:	4b1e      	ldr	r3, [pc, #120]	; (15dfc <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   15d84:	4798      	blx	r3
   15d86:	4603      	mov	r3, r0
   15d88:	461a      	mov	r2, r3
   15d8a:	687b      	ldr	r3, [r7, #4]
   15d8c:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   15d8e:	687b      	ldr	r3, [r7, #4]
   15d90:	78db      	ldrb	r3, [r3, #3]
   15d92:	2b00      	cmp	r3, #0
   15d94:	d024      	beq.n	15de0 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
   15d96:	687b      	ldr	r3, [r7, #4]
   15d98:	2200      	movs	r2, #0
   15d9a:	709a      	strb	r2, [r3, #2]
			plugged=true;
   15d9c:	687b      	ldr	r3, [r7, #4]
   15d9e:	2201      	movs	r2, #1
   15da0:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   15da2:	f44f 7216 	mov.w	r2, #600	; 0x258
   15da6:	4916      	ldr	r1, [pc, #88]	; (15e00 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   15da8:	4816      	ldr	r0, [pc, #88]	; (15e04 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   15daa:	4b17      	ldr	r3, [pc, #92]	; (15e08 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   15dac:	4798      	blx	r3
			usbTerminalTimer.Start();
   15dae:	4815      	ldr	r0, [pc, #84]	; (15e04 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   15db0:	4b16      	ldr	r3, [pc, #88]	; (15e0c <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
   15db2:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   15db4:	4816      	ldr	r0, [pc, #88]	; (15e10 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
   15db6:	4b17      	ldr	r3, [pc, #92]	; (15e14 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
   15db8:	4798      	blx	r3
   15dba:	4603      	mov	r3, r0
   15dbc:	f083 0301 	eor.w	r3, r3, #1
   15dc0:	b2db      	uxtb	r3, r3
   15dc2:	2b00      	cmp	r3, #0
   15dc4:	d008      	beq.n	15dd8 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
   15dc6:	687b      	ldr	r3, [r7, #4]
   15dc8:	789b      	ldrb	r3, [r3, #2]
   15dca:	b2db      	uxtb	r3, r3
   15dcc:	2b00      	cmp	r3, #0
   15dce:	d0f1      	beq.n	15db4 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
   15dd0:	687b      	ldr	r3, [r7, #4]
   15dd2:	2200      	movs	r2, #0
   15dd4:	701a      	strb	r2, [r3, #0]
					return;
   15dd6:	e009      	b.n	15dec <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   15dd8:	480a      	ldr	r0, [pc, #40]	; (15e04 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   15dda:	4b0f      	ldr	r3, [pc, #60]	; (15e18 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
   15ddc:	4798      	blx	r3
   15dde:	e005      	b.n	15dec <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
   15de0:	687b      	ldr	r3, [r7, #4]
   15de2:	2200      	movs	r2, #0
   15de4:	701a      	strb	r2, [r3, #0]
			plugged=false;
   15de6:	687b      	ldr	r3, [r7, #4]
   15de8:	2200      	movs	r2, #0
   15dea:	705a      	strb	r2, [r3, #1]
		}
		
}
   15dec:	3708      	adds	r7, #8
   15dee:	46bd      	mov	sp, r7
   15df0:	bd80      	pop	{r7, pc}
   15df2:	bf00      	nop
   15df4:	00015d05 	.word	0x00015d05
   15df8:	00004eb1 	.word	0x00004eb1
   15dfc:	00015ca1 	.word	0x00015ca1
   15e00:	00015cdd 	.word	0x00015cdd
   15e04:	2000540c 	.word	0x2000540c
   15e08:	00015f75 	.word	0x00015f75
   15e0c:	00015e99 	.word	0x00015e99
   15e10:	20005304 	.word	0x20005304
   15e14:	000155a5 	.word	0x000155a5
   15e18:	00015ebd 	.word	0x00015ebd

00015e1c <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   15e1c:	b580      	push	{r7, lr}
   15e1e:	b082      	sub	sp, #8
   15e20:	af00      	add	r7, sp, #0
   15e22:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
   15e24:	4b04      	ldr	r3, [pc, #16]	; (15e38 <_ZL7task_cbPK10timer_task+0x1c>)
   15e26:	681b      	ldr	r3, [r3, #0]
   15e28:	4618      	mov	r0, r3
   15e2a:	4b04      	ldr	r3, [pc, #16]	; (15e3c <_ZL7task_cbPK10timer_task+0x20>)
   15e2c:	4798      	blx	r3
}
   15e2e:	bf00      	nop
   15e30:	3708      	adds	r7, #8
   15e32:	46bd      	mov	sp, r7
   15e34:	bd80      	pop	{r7, pc}
   15e36:	bf00      	nop
   15e38:	20005368 	.word	0x20005368
   15e3c:	00015ee5 	.word	0x00015ee5

00015e40 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
   15e40:	b480      	push	{r7}
   15e42:	b083      	sub	sp, #12
   15e44:	af00      	add	r7, sp, #0
   15e46:	6078      	str	r0, [r7, #4]
   15e48:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   15e4a:	687b      	ldr	r3, [r7, #4]
   15e4c:	683a      	ldr	r2, [r7, #0]
   15e4e:	60da      	str	r2, [r3, #12]
	ptrTimerSerialClass=this;
   15e50:	4a08      	ldr	r2, [pc, #32]	; (15e74 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
   15e52:	687b      	ldr	r3, [r7, #4]
   15e54:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   15e56:	687b      	ldr	r3, [r7, #4]
   15e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15e5c:	615a      	str	r2, [r3, #20]
	task->cb=task_cb;
   15e5e:	687b      	ldr	r3, [r7, #4]
   15e60:	689b      	ldr	r3, [r3, #8]
   15e62:	4a05      	ldr	r2, [pc, #20]	; (15e78 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
   15e64:	60da      	str	r2, [r3, #12]
} //Timer_Class
   15e66:	687b      	ldr	r3, [r7, #4]
   15e68:	4618      	mov	r0, r3
   15e6a:	370c      	adds	r7, #12
   15e6c:	46bd      	mov	sp, r7
   15e6e:	bc80      	pop	{r7}
   15e70:	4770      	bx	lr
   15e72:	bf00      	nop
   15e74:	20005368 	.word	0x20005368
   15e78:	00015e1d 	.word	0x00015e1d

00015e7c <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
   15e7c:	b480      	push	{r7}
   15e7e:	b083      	sub	sp, #12
   15e80:	af00      	add	r7, sp, #0
   15e82:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   15e84:	687b      	ldr	r3, [r7, #4]
   15e86:	2200      	movs	r2, #0
   15e88:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   15e8a:	687b      	ldr	r3, [r7, #4]
   15e8c:	4618      	mov	r0, r3
   15e8e:	370c      	adds	r7, #12
   15e90:	46bd      	mov	sp, r7
   15e92:	bc80      	pop	{r7}
   15e94:	4770      	bx	lr
	...

00015e98 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
   15e98:	b580      	push	{r7, lr}
   15e9a:	b084      	sub	sp, #16
   15e9c:	af00      	add	r7, sp, #0
   15e9e:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   15ea0:	687b      	ldr	r3, [r7, #4]
   15ea2:	68db      	ldr	r3, [r3, #12]
   15ea4:	4618      	mov	r0, r3
   15ea6:	4b04      	ldr	r3, [pc, #16]	; (15eb8 <_ZN17TimerSerial_Class5StartEv+0x20>)
   15ea8:	4798      	blx	r3
   15eaa:	60f8      	str	r0, [r7, #12]
	return status;
   15eac:	68fb      	ldr	r3, [r7, #12]
	
}
   15eae:	4618      	mov	r0, r3
   15eb0:	3710      	adds	r7, #16
   15eb2:	46bd      	mov	sp, r7
   15eb4:	bd80      	pop	{r7, pc}
   15eb6:	bf00      	nop
   15eb8:	00005c39 	.word	0x00005c39

00015ebc <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
   15ebc:	b580      	push	{r7, lr}
   15ebe:	b084      	sub	sp, #16
   15ec0:	af00      	add	r7, sp, #0
   15ec2:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   15ec4:	687b      	ldr	r3, [r7, #4]
   15ec6:	68db      	ldr	r3, [r3, #12]
   15ec8:	4618      	mov	r0, r3
   15eca:	4b05      	ldr	r3, [pc, #20]	; (15ee0 <_ZN17TimerSerial_Class4StopEv+0x24>)
   15ecc:	4798      	blx	r3
   15ece:	60f8      	str	r0, [r7, #12]
	timeout=0;
   15ed0:	687b      	ldr	r3, [r7, #4]
   15ed2:	2200      	movs	r2, #0
   15ed4:	705a      	strb	r2, [r3, #1]
	return status;
   15ed6:	68fb      	ldr	r3, [r7, #12]
}
   15ed8:	4618      	mov	r0, r3
   15eda:	3710      	adds	r7, #16
   15edc:	46bd      	mov	sp, r7
   15ede:	bd80      	pop	{r7, pc}
   15ee0:	00005c8d 	.word	0x00005c8d

00015ee4 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
   15ee4:	b480      	push	{r7}
   15ee6:	b083      	sub	sp, #12
   15ee8:	af00      	add	r7, sp, #0
   15eea:	6078      	str	r0, [r7, #4]
	timeout=1;
   15eec:	687b      	ldr	r3, [r7, #4]
   15eee:	2201      	movs	r2, #1
   15ef0:	705a      	strb	r2, [r3, #1]
}
   15ef2:	bf00      	nop
   15ef4:	370c      	adds	r7, #12
   15ef6:	46bd      	mov	sp, r7
   15ef8:	bc80      	pop	{r7}
   15efa:	4770      	bx	lr

00015efc <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   15efc:	b580      	push	{r7, lr}
   15efe:	b086      	sub	sp, #24
   15f00:	af00      	add	r7, sp, #0
   15f02:	60f8      	str	r0, [r7, #12]
   15f04:	60b9      	str	r1, [r7, #8]
   15f06:	607a      	str	r2, [r7, #4]
   15f08:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   15f0a:	68f8      	ldr	r0, [r7, #12]
   15f0c:	4b0d      	ldr	r3, [pc, #52]	; (15f44 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   15f0e:	4798      	blx	r3
	task->interval = interval;
   15f10:	68fb      	ldr	r3, [r7, #12]
   15f12:	689b      	ldr	r3, [r3, #8]
   15f14:	687a      	ldr	r2, [r7, #4]
   15f16:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   15f18:	68fb      	ldr	r3, [r7, #12]
   15f1a:	689b      	ldr	r3, [r3, #8]
   15f1c:	68ba      	ldr	r2, [r7, #8]
   15f1e:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   15f20:	68fb      	ldr	r3, [r7, #12]
   15f22:	689b      	ldr	r3, [r3, #8]
   15f24:	78fa      	ldrb	r2, [r7, #3]
   15f26:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   15f28:	68fb      	ldr	r3, [r7, #12]
   15f2a:	68da      	ldr	r2, [r3, #12]
   15f2c:	68fb      	ldr	r3, [r7, #12]
   15f2e:	689b      	ldr	r3, [r3, #8]
   15f30:	4619      	mov	r1, r3
   15f32:	4610      	mov	r0, r2
   15f34:	4b04      	ldr	r3, [pc, #16]	; (15f48 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   15f36:	4798      	blx	r3
   15f38:	6178      	str	r0, [r7, #20]
	
	return status;
   15f3a:	697b      	ldr	r3, [r7, #20]
}
   15f3c:	4618      	mov	r0, r3
   15f3e:	3718      	adds	r7, #24
   15f40:	46bd      	mov	sp, r7
   15f42:	bd80      	pop	{r7, pc}
   15f44:	00016059 	.word	0x00016059
   15f48:	00005ce9 	.word	0x00005ce9

00015f4c <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   15f4c:	b590      	push	{r4, r7, lr}
   15f4e:	b087      	sub	sp, #28
   15f50:	af00      	add	r7, sp, #0
   15f52:	60f8      	str	r0, [r7, #12]
   15f54:	60b9      	str	r1, [r7, #8]
   15f56:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   15f58:	2301      	movs	r3, #1
   15f5a:	687a      	ldr	r2, [r7, #4]
   15f5c:	68b9      	ldr	r1, [r7, #8]
   15f5e:	68f8      	ldr	r0, [r7, #12]
   15f60:	4c03      	ldr	r4, [pc, #12]	; (15f70 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
   15f62:	47a0      	blx	r4
   15f64:	6178      	str	r0, [r7, #20]
		return status;
   15f66:	697b      	ldr	r3, [r7, #20]
}
   15f68:	4618      	mov	r0, r3
   15f6a:	371c      	adds	r7, #28
   15f6c:	46bd      	mov	sp, r7
   15f6e:	bd90      	pop	{r4, r7, pc}
   15f70:	00015efd 	.word	0x00015efd

00015f74 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
   15f74:	b590      	push	{r4, r7, lr}
   15f76:	b087      	sub	sp, #28
   15f78:	af00      	add	r7, sp, #0
   15f7a:	60f8      	str	r0, [r7, #12]
   15f7c:	60b9      	str	r1, [r7, #8]
   15f7e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   15f80:	2300      	movs	r3, #0
   15f82:	687a      	ldr	r2, [r7, #4]
   15f84:	68b9      	ldr	r1, [r7, #8]
   15f86:	68f8      	ldr	r0, [r7, #12]
   15f88:	4c03      	ldr	r4, [pc, #12]	; (15f98 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
   15f8a:	47a0      	blx	r4
   15f8c:	6178      	str	r0, [r7, #20]
	return status;
   15f8e:	697b      	ldr	r3, [r7, #20]
}
   15f90:	4618      	mov	r0, r3
   15f92:	371c      	adds	r7, #28
   15f94:	46bd      	mov	sp, r7
   15f96:	bd90      	pop	{r4, r7, pc}
   15f98:	00015efd 	.word	0x00015efd

00015f9c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   15f9c:	b590      	push	{r4, r7, lr}
   15f9e:	b087      	sub	sp, #28
   15fa0:	af00      	add	r7, sp, #0
   15fa2:	60f8      	str	r0, [r7, #12]
   15fa4:	60b9      	str	r1, [r7, #8]
   15fa6:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   15fa8:	2300      	movs	r3, #0
   15faa:	687a      	ldr	r2, [r7, #4]
   15fac:	68b9      	ldr	r1, [r7, #8]
   15fae:	68f8      	ldr	r0, [r7, #12]
   15fb0:	4c06      	ldr	r4, [pc, #24]	; (15fcc <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
   15fb2:	47a0      	blx	r4
   15fb4:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   15fb6:	68fb      	ldr	r3, [r7, #12]
   15fb8:	68db      	ldr	r3, [r3, #12]
   15fba:	4618      	mov	r0, r3
   15fbc:	4b04      	ldr	r3, [pc, #16]	; (15fd0 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
   15fbe:	4798      	blx	r3
   15fc0:	6178      	str	r0, [r7, #20]
	return status;
   15fc2:	697b      	ldr	r3, [r7, #20]
}
   15fc4:	4618      	mov	r0, r3
   15fc6:	371c      	adds	r7, #28
   15fc8:	46bd      	mov	sp, r7
   15fca:	bd90      	pop	{r4, r7, pc}
   15fcc:	00015efd 	.word	0x00015efd
   15fd0:	00005c39 	.word	0x00005c39

00015fd4 <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
   15fd4:	b580      	push	{r7, lr}
   15fd6:	b082      	sub	sp, #8
   15fd8:	af00      	add	r7, sp, #0
   15fda:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
   15fdc:	687b      	ldr	r3, [r7, #4]
   15fde:	68da      	ldr	r2, [r3, #12]
   15fe0:	687b      	ldr	r3, [r7, #4]
   15fe2:	689b      	ldr	r3, [r3, #8]
   15fe4:	4619      	mov	r1, r3
   15fe6:	4610      	mov	r0, r2
   15fe8:	4b04      	ldr	r3, [pc, #16]	; (15ffc <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
   15fea:	4798      	blx	r3
	task->cb=NULL;
   15fec:	687b      	ldr	r3, [r7, #4]
   15fee:	689b      	ldr	r3, [r3, #8]
   15ff0:	2200      	movs	r2, #0
   15ff2:	60da      	str	r2, [r3, #12]
}
   15ff4:	bf00      	nop
   15ff6:	3708      	adds	r7, #8
   15ff8:	46bd      	mov	sp, r7
   15ffa:	bd80      	pop	{r7, pc}
   15ffc:	00005de1 	.word	0x00005de1

00016000 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
   16000:	b580      	push	{r7, lr}
   16002:	b082      	sub	sp, #8
   16004:	af00      	add	r7, sp, #0
   16006:	6078      	str	r0, [r7, #4]
   16008:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   1600a:	6839      	ldr	r1, [r7, #0]
   1600c:	6878      	ldr	r0, [r7, #4]
   1600e:	4b0f      	ldr	r3, [pc, #60]	; (1604c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
   16010:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   16012:	687b      	ldr	r3, [r7, #4]
   16014:	68db      	ldr	r3, [r3, #12]
   16016:	f103 0214 	add.w	r2, r3, #20
   1601a:	687b      	ldr	r3, [r7, #4]
   1601c:	689b      	ldr	r3, [r3, #8]
   1601e:	4619      	mov	r1, r3
   16020:	4610      	mov	r0, r2
   16022:	4b0b      	ldr	r3, [pc, #44]	; (16050 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
   16024:	4798      	blx	r3
   16026:	4603      	mov	r3, r0
   16028:	2b00      	cmp	r3, #0
   1602a:	d007      	beq.n	1603c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   1602c:	687b      	ldr	r3, [r7, #4]
   1602e:	68da      	ldr	r2, [r3, #12]
   16030:	687b      	ldr	r3, [r7, #4]
   16032:	689b      	ldr	r3, [r3, #8]
   16034:	4619      	mov	r1, r3
   16036:	4610      	mov	r0, r2
   16038:	4b06      	ldr	r3, [pc, #24]	; (16054 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
   1603a:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   1603c:	687b      	ldr	r3, [r7, #4]
   1603e:	689b      	ldr	r3, [r3, #8]
   16040:	2200      	movs	r2, #0
   16042:	60da      	str	r2, [r3, #12]
}
   16044:	bf00      	nop
   16046:	3708      	adds	r7, #8
   16048:	46bd      	mov	sp, r7
   1604a:	bd80      	pop	{r7, pc}
   1604c:	000160c1 	.word	0x000160c1
   16050:	000069b9 	.word	0x000069b9
   16054:	00005de1 	.word	0x00005de1

00016058 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
   16058:	b480      	push	{r7}
   1605a:	b083      	sub	sp, #12
   1605c:	af00      	add	r7, sp, #0
   1605e:	6078      	str	r0, [r7, #4]
	for (i = 0; i < TASK_NUMBER; i++)
   16060:	687b      	ldr	r3, [r7, #4]
   16062:	2200      	movs	r2, #0
   16064:	771a      	strb	r2, [r3, #28]
   16066:	687b      	ldr	r3, [r7, #4]
   16068:	7f1b      	ldrb	r3, [r3, #28]
   1606a:	2b07      	cmp	r3, #7
   1606c:	dc1f      	bgt.n	160ae <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x56>
	{
			if (taskArray[i].cb==NULL)
   1606e:	687b      	ldr	r3, [r7, #4]
   16070:	7f1b      	ldrb	r3, [r3, #28]
   16072:	4619      	mov	r1, r3
   16074:	4a11      	ldr	r2, [pc, #68]	; (160bc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
   16076:	460b      	mov	r3, r1
   16078:	009b      	lsls	r3, r3, #2
   1607a:	440b      	add	r3, r1
   1607c:	009b      	lsls	r3, r3, #2
   1607e:	4413      	add	r3, r2
   16080:	330c      	adds	r3, #12
   16082:	681b      	ldr	r3, [r3, #0]
   16084:	2b00      	cmp	r3, #0
   16086:	d10b      	bne.n	160a0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x48>
			{
				
				task=&taskArray[i];
   16088:	687b      	ldr	r3, [r7, #4]
   1608a:	7f1b      	ldrb	r3, [r3, #28]
   1608c:	461a      	mov	r2, r3
   1608e:	4613      	mov	r3, r2
   16090:	009b      	lsls	r3, r3, #2
   16092:	4413      	add	r3, r2
   16094:	009b      	lsls	r3, r3, #2
   16096:	4a09      	ldr	r2, [pc, #36]	; (160bc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
   16098:	441a      	add	r2, r3
   1609a:	687b      	ldr	r3, [r7, #4]
   1609c:	609a      	str	r2, [r3, #8]
			return;
   1609e:	e009      	b.n	160b4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < TASK_NUMBER; i++)
   160a0:	687b      	ldr	r3, [r7, #4]
   160a2:	7f1b      	ldrb	r3, [r3, #28]
   160a4:	3301      	adds	r3, #1
   160a6:	b2da      	uxtb	r2, r3
   160a8:	687b      	ldr	r3, [r7, #4]
   160aa:	771a      	strb	r2, [r3, #28]
   160ac:	e7db      	b.n	16066 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xe>
				
			}
	}
	task=&taskArray[0];
   160ae:	687b      	ldr	r3, [r7, #4]
   160b0:	4a02      	ldr	r2, [pc, #8]	; (160bc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
   160b2:	609a      	str	r2, [r3, #8]

}
   160b4:	370c      	adds	r7, #12
   160b6:	46bd      	mov	sp, r7
   160b8:	bc80      	pop	{r7}
   160ba:	4770      	bx	lr
   160bc:	2000536c 	.word	0x2000536c

000160c0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
   160c0:	b480      	push	{r7}
   160c2:	b083      	sub	sp, #12
   160c4:	af00      	add	r7, sp, #0
   160c6:	6078      	str	r0, [r7, #4]
   160c8:	6039      	str	r1, [r7, #0]
	for (i = 0; i < TASK_NUMBER; i++)
   160ca:	687b      	ldr	r3, [r7, #4]
   160cc:	2200      	movs	r2, #0
   160ce:	771a      	strb	r2, [r3, #28]
   160d0:	687b      	ldr	r3, [r7, #4]
   160d2:	7f1b      	ldrb	r3, [r3, #28]
   160d4:	2b07      	cmp	r3, #7
   160d6:	dc20      	bgt.n	1611a <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	{
		if (taskArray[i].cb==(timer_cb_t)func)
   160d8:	687b      	ldr	r3, [r7, #4]
   160da:	7f1b      	ldrb	r3, [r3, #28]
   160dc:	4619      	mov	r1, r3
   160de:	4a11      	ldr	r2, [pc, #68]	; (16124 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
   160e0:	460b      	mov	r3, r1
   160e2:	009b      	lsls	r3, r3, #2
   160e4:	440b      	add	r3, r1
   160e6:	009b      	lsls	r3, r3, #2
   160e8:	4413      	add	r3, r2
   160ea:	330c      	adds	r3, #12
   160ec:	681a      	ldr	r2, [r3, #0]
   160ee:	683b      	ldr	r3, [r7, #0]
   160f0:	429a      	cmp	r2, r3
   160f2:	d10b      	bne.n	1610c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4c>
		{
			
			task=&taskArray[i];
   160f4:	687b      	ldr	r3, [r7, #4]
   160f6:	7f1b      	ldrb	r3, [r3, #28]
   160f8:	461a      	mov	r2, r3
   160fa:	4613      	mov	r3, r2
   160fc:	009b      	lsls	r3, r3, #2
   160fe:	4413      	add	r3, r2
   16100:	009b      	lsls	r3, r3, #2
   16102:	4a08      	ldr	r2, [pc, #32]	; (16124 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
   16104:	441a      	add	r2, r3
   16106:	687b      	ldr	r3, [r7, #4]
   16108:	609a      	str	r2, [r3, #8]
			return;
   1610a:	e006      	b.n	1611a <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	for (i = 0; i < TASK_NUMBER; i++)
   1610c:	687b      	ldr	r3, [r7, #4]
   1610e:	7f1b      	ldrb	r3, [r3, #28]
   16110:	3301      	adds	r3, #1
   16112:	b2da      	uxtb	r2, r3
   16114:	687b      	ldr	r3, [r7, #4]
   16116:	771a      	strb	r2, [r3, #28]
   16118:	e7da      	b.n	160d0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x10>
			
		}
	}


}
   1611a:	370c      	adds	r7, #12
   1611c:	46bd      	mov	sp, r7
   1611e:	bc80      	pop	{r7}
   16120:	4770      	bx	lr
   16122:	bf00      	nop
   16124:	2000536c 	.word	0x2000536c

00016128 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   16128:	b580      	push	{r7, lr}
   1612a:	b082      	sub	sp, #8
   1612c:	af00      	add	r7, sp, #0
   1612e:	6078      	str	r0, [r7, #4]
   16130:	6039      	str	r1, [r7, #0]
   16132:	687b      	ldr	r3, [r7, #4]
   16134:	2b01      	cmp	r3, #1
   16136:	d116      	bne.n	16166 <_Z41__static_initialization_and_destruction_0ii+0x3e>
   16138:	683b      	ldr	r3, [r7, #0]
   1613a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1613e:	4293      	cmp	r3, r2
   16140:	d111      	bne.n	16166 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
   16142:	490b      	ldr	r1, [pc, #44]	; (16170 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   16144:	480b      	ldr	r0, [pc, #44]	; (16174 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   16146:	4b0c      	ldr	r3, [pc, #48]	; (16178 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   16148:	4798      	blx	r3
   1614a:	4a0c      	ldr	r2, [pc, #48]	; (1617c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1614c:	490c      	ldr	r1, [pc, #48]	; (16180 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   1614e:	4809      	ldr	r0, [pc, #36]	; (16174 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   16150:	4b0c      	ldr	r3, [pc, #48]	; (16184 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   16152:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   16154:	490c      	ldr	r1, [pc, #48]	; (16188 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   16156:	480d      	ldr	r0, [pc, #52]	; (1618c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   16158:	4b07      	ldr	r3, [pc, #28]	; (16178 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   1615a:	4798      	blx	r3
   1615c:	4a07      	ldr	r2, [pc, #28]	; (1617c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1615e:	4908      	ldr	r1, [pc, #32]	; (16180 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   16160:	480a      	ldr	r0, [pc, #40]	; (1618c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   16162:	4b08      	ldr	r3, [pc, #32]	; (16184 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   16164:	4798      	blx	r3
   16166:	bf00      	nop
   16168:	3708      	adds	r7, #8
   1616a:	46bd      	mov	sp, r7
   1616c:	bd80      	pop	{r7, pc}
   1616e:	bf00      	nop
   16170:	20005704 	.word	0x20005704
   16174:	2000540c 	.word	0x2000540c
   16178:	00015e41 	.word	0x00015e41
   1617c:	20000000 	.word	0x20000000
   16180:	00015e7d 	.word	0x00015e7d
   16184:	000167bd 	.word	0x000167bd
   16188:	2000564c 	.word	0x2000564c
   1618c:	2000542c 	.word	0x2000542c

00016190 <_GLOBAL__sub_I_ptrTimerSerialClass>:
   16190:	b580      	push	{r7, lr}
   16192:	af00      	add	r7, sp, #0
   16194:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16198:	2001      	movs	r0, #1
   1619a:	4b01      	ldr	r3, [pc, #4]	; (161a0 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
   1619c:	4798      	blx	r3
   1619e:	bd80      	pop	{r7, pc}
   161a0:	00016129 	.word	0x00016129

000161a4 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc>:

I2C_Asyn_Class	*ptrI2C_Asyn_Class=NULL;
//static list_descriptor i2cList=NULL;
//i2cList=NULL;
list_descriptor i2cList;
static void GetRelativeClassPointer(i2c_m_async_desc*  i2c){
   161a4:	b580      	push	{r7, lr}
   161a6:	b084      	sub	sp, #16
   161a8:	af00      	add	r7, sp, #0
   161aa:	6078      	str	r0, [r7, #4]
	uint32_t  *ptr=(uint32_t*)ptrI2C_Asyn_Class->GetClassPointer(i2c);;
   161ac:	4b08      	ldr	r3, [pc, #32]	; (161d0 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   161ae:	681b      	ldr	r3, [r3, #0]
   161b0:	6879      	ldr	r1, [r7, #4]
   161b2:	4618      	mov	r0, r3
   161b4:	4b07      	ldr	r3, [pc, #28]	; (161d4 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x30>)
   161b6:	4798      	blx	r3
   161b8:	4603      	mov	r3, r0
   161ba:	60fb      	str	r3, [r7, #12]
	I2C_Asyn_Class	*ptrClass=(I2C_Asyn_Class*)ptr;
   161bc:	68fb      	ldr	r3, [r7, #12]
   161be:	60bb      	str	r3, [r7, #8]
	ptrI2C_Asyn_Class=ptrClass;
   161c0:	4a03      	ldr	r2, [pc, #12]	; (161d0 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   161c2:	68bb      	ldr	r3, [r7, #8]
   161c4:	6013      	str	r3, [r2, #0]
}
   161c6:	bf00      	nop
   161c8:	3710      	adds	r7, #16
   161ca:	46bd      	mov	sp, r7
   161cc:	bd80      	pop	{r7, pc}
   161ce:	bf00      	nop
   161d0:	2000544c 	.word	0x2000544c
   161d4:	00016581 	.word	0x00016581

000161d8 <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
   161d8:	b580      	push	{r7, lr}
   161da:	b082      	sub	sp, #8
   161dc:	af00      	add	r7, sp, #0
   161de:	6078      	str	r0, [r7, #4]
	
	GetRelativeClassPointer(i2c);
   161e0:	6878      	ldr	r0, [r7, #4]
   161e2:	4b05      	ldr	r3, [pc, #20]	; (161f8 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x20>)
   161e4:	4798      	blx	r3
	ptrI2C_Asyn_Class->txReady=true;
   161e6:	4b05      	ldr	r3, [pc, #20]	; (161fc <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x24>)
   161e8:	681b      	ldr	r3, [r3, #0]
   161ea:	2201      	movs	r2, #1
   161ec:	741a      	strb	r2, [r3, #16]


}
   161ee:	bf00      	nop
   161f0:	3708      	adds	r7, #8
   161f2:	46bd      	mov	sp, r7
   161f4:	bd80      	pop	{r7, pc}
   161f6:	bf00      	nop
   161f8:	000161a5 	.word	0x000161a5
   161fc:	2000544c 	.word	0x2000544c

00016200 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
   16200:	b580      	push	{r7, lr}
   16202:	b082      	sub	sp, #8
   16204:	af00      	add	r7, sp, #0
   16206:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   16208:	6878      	ldr	r0, [r7, #4]
   1620a:	4b05      	ldr	r3, [pc, #20]	; (16220 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x20>)
   1620c:	4798      	blx	r3
	ptrI2C_Asyn_Class->rxReady=true;
   1620e:	4b05      	ldr	r3, [pc, #20]	; (16224 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x24>)
   16210:	681b      	ldr	r3, [r3, #0]
   16212:	2201      	movs	r2, #1
   16214:	745a      	strb	r2, [r3, #17]
}
   16216:	bf00      	nop
   16218:	3708      	adds	r7, #8
   1621a:	46bd      	mov	sp, r7
   1621c:	bd80      	pop	{r7, pc}
   1621e:	bf00      	nop
   16220:	000161a5 	.word	0x000161a5
   16224:	2000544c 	.word	0x2000544c

00016228 <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
   16228:	b580      	push	{r7, lr}
   1622a:	b082      	sub	sp, #8
   1622c:	af00      	add	r7, sp, #0
   1622e:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   16230:	6878      	ldr	r0, [r7, #4]
   16232:	4b09      	ldr	r3, [pc, #36]	; (16258 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
   16234:	4798      	blx	r3
		ptrI2C_Asyn_Class->Clear_ack();
   16236:	4b09      	ldr	r3, [pc, #36]	; (1625c <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   16238:	681b      	ldr	r3, [r3, #0]
   1623a:	4618      	mov	r0, r3
   1623c:	4b08      	ldr	r3, [pc, #32]	; (16260 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x38>)
   1623e:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
   16240:	4b06      	ldr	r3, [pc, #24]	; (1625c <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   16242:	681b      	ldr	r3, [r3, #0]
   16244:	2201      	movs	r2, #1
   16246:	741a      	strb	r2, [r3, #16]
		ptrI2C_Asyn_Class->rxReady=true;
   16248:	4b04      	ldr	r3, [pc, #16]	; (1625c <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   1624a:	681b      	ldr	r3, [r3, #0]
   1624c:	2201      	movs	r2, #1
   1624e:	745a      	strb	r2, [r3, #17]
 }
   16250:	bf00      	nop
   16252:	3708      	adds	r7, #8
   16254:	46bd      	mov	sp, r7
   16256:	bd80      	pop	{r7, pc}
   16258:	000161a5 	.word	0x000161a5
   1625c:	2000544c 	.word	0x2000544c
   16260:	00016465 	.word	0x00016465

00016264 <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
   16264:	b580      	push	{r7, lr}
   16266:	b082      	sub	sp, #8
   16268:	af00      	add	r7, sp, #0
   1626a:	6078      	str	r0, [r7, #4]
   1626c:	687b      	ldr	r3, [r7, #4]
   1626e:	4618      	mov	r0, r3
   16270:	4b07      	ldr	r3, [pc, #28]	; (16290 <_ZN14I2C_Asyn_ClassC1Ev+0x2c>)
   16272:	4798      	blx	r3
{
	ptrI2CAsynDescr=&I2C_EXPANDER;
   16274:	687b      	ldr	r3, [r7, #4]
   16276:	4a07      	ldr	r2, [pc, #28]	; (16294 <_ZN14I2C_Asyn_ClassC1Ev+0x30>)
   16278:	61da      	str	r2, [r3, #28]
	ptrClass=this;
   1627a:	687b      	ldr	r3, [r7, #4]
   1627c:	687a      	ldr	r2, [r7, #4]
   1627e:	615a      	str	r2, [r3, #20]
	ptrI2C_Asyn_Class=this;
   16280:	4a05      	ldr	r2, [pc, #20]	; (16298 <_ZN14I2C_Asyn_ClassC1Ev+0x34>)
   16282:	687b      	ldr	r3, [r7, #4]
   16284:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
   16286:	687b      	ldr	r3, [r7, #4]
   16288:	4618      	mov	r0, r3
   1628a:	3708      	adds	r7, #8
   1628c:	46bd      	mov	sp, r7
   1628e:	bd80      	pop	{r7, pc}
   16290:	00016499 	.word	0x00016499
   16294:	20005720 	.word	0x20005720
   16298:	2000544c 	.word	0x2000544c

0001629c <_ZN14I2C_Asyn_ClassD1Ev>:
	ptrClass=this;
	ptrI2C_Asyn_Class=this;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
   1629c:	b580      	push	{r7, lr}
   1629e:	b082      	sub	sp, #8
   162a0:	af00      	add	r7, sp, #0
   162a2:	6078      	str	r0, [r7, #4]
   162a4:	687b      	ldr	r3, [r7, #4]
   162a6:	4618      	mov	r0, r3
   162a8:	4b03      	ldr	r3, [pc, #12]	; (162b8 <_ZN14I2C_Asyn_ClassD1Ev+0x1c>)
   162aa:	4798      	blx	r3
{

} //~I2C_Asyn_Class
   162ac:	687b      	ldr	r3, [r7, #4]
   162ae:	4618      	mov	r0, r3
   162b0:	3708      	adds	r7, #8
   162b2:	46bd      	mov	sp, r7
   162b4:	bd80      	pop	{r7, pc}
   162b6:	bf00      	nop
   162b8:	000164b9 	.word	0x000164b9

000162bc <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
   162bc:	b480      	push	{r7}
   162be:	b083      	sub	sp, #12
   162c0:	af00      	add	r7, sp, #0
   162c2:	6078      	str	r0, [r7, #4]
   162c4:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
   162c6:	687b      	ldr	r3, [r7, #4]
   162c8:	683a      	ldr	r2, [r7, #0]
   162ca:	61da      	str	r2, [r3, #28]
	ptrClass=this;
   162cc:	687b      	ldr	r3, [r7, #4]
   162ce:	687a      	ldr	r2, [r7, #4]
   162d0:	615a      	str	r2, [r3, #20]
	ptrI2C_Asyn_Class=this;
   162d2:	4a04      	ldr	r2, [pc, #16]	; (162e4 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x28>)
   162d4:	687b      	ldr	r3, [r7, #4]
   162d6:	6013      	str	r3, [r2, #0]
}
   162d8:	bf00      	nop
   162da:	370c      	adds	r7, #12
   162dc:	46bd      	mov	sp, r7
   162de:	bc80      	pop	{r7}
   162e0:	4770      	bx	lr
   162e2:	bf00      	nop
   162e4:	2000544c 	.word	0x2000544c

000162e8 <_ZN14I2C_Asyn_Class4InitEv>:

uint8_t	I2C_Asyn_Class::Init(void){
   162e8:	b580      	push	{r7, lr}
   162ea:	b084      	sub	sp, #16
   162ec:	af00      	add	r7, sp, #0
   162ee:	6078      	str	r0, [r7, #4]
	

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
   162f0:	687b      	ldr	r3, [r7, #4]
   162f2:	69da      	ldr	r2, [r3, #28]
   162f4:	687b      	ldr	r3, [r7, #4]
   162f6:	3318      	adds	r3, #24
   162f8:	4619      	mov	r1, r3
   162fa:	4610      	mov	r0, r2
   162fc:	4b1e      	ldr	r3, [pc, #120]	; (16378 <_ZN14I2C_Asyn_Class4InitEv+0x90>)
   162fe:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
   16300:	687b      	ldr	r3, [r7, #4]
   16302:	69db      	ldr	r3, [r3, #28]
   16304:	4618      	mov	r0, r3
   16306:	4b1d      	ldr	r3, [pc, #116]	; (1637c <_ZN14I2C_Asyn_Class4InitEv+0x94>)
   16308:	4798      	blx	r3
   1630a:	4603      	mov	r3, r0
   1630c:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
   1630e:	687b      	ldr	r3, [r7, #4]
   16310:	69db      	ldr	r3, [r3, #28]
   16312:	4a1b      	ldr	r2, [pc, #108]	; (16380 <_ZN14I2C_Asyn_Class4InitEv+0x98>)
   16314:	2101      	movs	r1, #1
   16316:	4618      	mov	r0, r3
   16318:	4b1a      	ldr	r3, [pc, #104]	; (16384 <_ZN14I2C_Asyn_Class4InitEv+0x9c>)
   1631a:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
   1631c:	687b      	ldr	r3, [r7, #4]
   1631e:	69db      	ldr	r3, [r3, #28]
   16320:	4a19      	ldr	r2, [pc, #100]	; (16388 <_ZN14I2C_Asyn_Class4InitEv+0xa0>)
   16322:	2102      	movs	r1, #2
   16324:	4618      	mov	r0, r3
   16326:	4b17      	ldr	r3, [pc, #92]	; (16384 <_ZN14I2C_Asyn_Class4InitEv+0x9c>)
   16328:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
   1632a:	687b      	ldr	r3, [r7, #4]
   1632c:	69db      	ldr	r3, [r3, #28]
   1632e:	4a17      	ldr	r2, [pc, #92]	; (1638c <_ZN14I2C_Asyn_Class4InitEv+0xa4>)
   16330:	2100      	movs	r1, #0
   16332:	4618      	mov	r0, r3
   16334:	4b13      	ldr	r3, [pc, #76]	; (16384 <_ZN14I2C_Asyn_Class4InitEv+0x9c>)
   16336:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	coupleKey.ptrI2CAsynClass=(uint32_t)ptrClass;
   16338:	687b      	ldr	r3, [r7, #4]
   1633a:	695b      	ldr	r3, [r3, #20]
   1633c:	461a      	mov	r2, r3
   1633e:	687b      	ldr	r3, [r7, #4]
   16340:	62da      	str	r2, [r3, #44]	; 0x2c
	coupleKey.i2cDescr=ptrI2CAsynDescr;
   16342:	687b      	ldr	r3, [r7, #4]
   16344:	69da      	ldr	r2, [r3, #28]
   16346:	687b      	ldr	r3, [r7, #4]
   16348:	629a      	str	r2, [r3, #40]	; 0x28
	coupleKey.dummy=(uint32_t)ptrClass;
   1634a:	687b      	ldr	r3, [r7, #4]
   1634c:	695b      	ldr	r3, [r3, #20]
   1634e:	461a      	mov	r2, r3
   16350:	687b      	ldr	r3, [r7, #4]
   16352:	625a      	str	r2, [r3, #36]	; 0x24
	AddI2CObject(coupleKey);
   16354:	687a      	ldr	r2, [r7, #4]
   16356:	687b      	ldr	r3, [r7, #4]
   16358:	3324      	adds	r3, #36	; 0x24
   1635a:	4619      	mov	r1, r3
   1635c:	4610      	mov	r0, r2
   1635e:	4b0c      	ldr	r3, [pc, #48]	; (16390 <_ZN14I2C_Asyn_Class4InitEv+0xa8>)
   16360:	4798      	blx	r3
	txReady=true;
   16362:	687b      	ldr	r3, [r7, #4]
   16364:	2201      	movs	r2, #1
   16366:	741a      	strb	r2, [r3, #16]
	rxReady=true;
   16368:	687b      	ldr	r3, [r7, #4]
   1636a:	2201      	movs	r2, #1
   1636c:	745a      	strb	r2, [r3, #17]
	return ena;
   1636e:	7bfb      	ldrb	r3, [r7, #15]
	
}
   16370:	4618      	mov	r0, r3
   16372:	3710      	adds	r7, #16
   16374:	46bd      	mov	sp, r7
   16376:	bd80      	pop	{r7, pc}
   16378:	0000534b 	.word	0x0000534b
   1637c:	0000525d 	.word	0x0000525d
   16380:	000161d9 	.word	0x000161d9
   16384:	00005303 	.word	0x00005303
   16388:	00016201 	.word	0x00016201
   1638c:	00016229 	.word	0x00016229
   16390:	000164cd 	.word	0x000164cd

00016394 <_ZN14I2C_Asyn_Class4InitEh>:
uint8_t	I2C_Asyn_Class::Init(uint8_t add){
   16394:	b580      	push	{r7, lr}
   16396:	b084      	sub	sp, #16
   16398:	af00      	add	r7, sp, #0
   1639a:	6078      	str	r0, [r7, #4]
   1639c:	460b      	mov	r3, r1
   1639e:	70fb      	strb	r3, [r7, #3]
	uint8_t ena=Init();
   163a0:	6878      	ldr	r0, [r7, #4]
   163a2:	4b0c      	ldr	r3, [pc, #48]	; (163d4 <_ZN14I2C_Asyn_Class4InitEh+0x40>)
   163a4:	4798      	blx	r3
   163a6:	4603      	mov	r3, r0
   163a8:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
   163aa:	687b      	ldr	r3, [r7, #4]
   163ac:	69db      	ldr	r3, [r3, #28]
   163ae:	78fa      	ldrb	r2, [r7, #3]
   163b0:	b211      	sxth	r1, r2
   163b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   163b6:	4618      	mov	r0, r3
   163b8:	4b07      	ldr	r3, [pc, #28]	; (163d8 <_ZN14I2C_Asyn_Class4InitEh+0x44>)
   163ba:	4798      	blx	r3
	txReady=true;
   163bc:	687b      	ldr	r3, [r7, #4]
   163be:	2201      	movs	r2, #1
   163c0:	741a      	strb	r2, [r3, #16]
	rxReady=true;
   163c2:	687b      	ldr	r3, [r7, #4]
   163c4:	2201      	movs	r2, #1
   163c6:	745a      	strb	r2, [r3, #17]
	return ena;
   163c8:	7bfb      	ldrb	r3, [r7, #15]
}
   163ca:	4618      	mov	r0, r3
   163cc:	3710      	adds	r7, #16
   163ce:	46bd      	mov	sp, r7
   163d0:	bd80      	pop	{r7, pc}
   163d2:	bf00      	nop
   163d4:	000162e9 	.word	0x000162e9
   163d8:	000052c9 	.word	0x000052c9

000163dc <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
   163dc:	b580      	push	{r7, lr}
   163de:	b084      	sub	sp, #16
   163e0:	af00      	add	r7, sp, #0
   163e2:	60f8      	str	r0, [r7, #12]
   163e4:	60b9      	str	r1, [r7, #8]
   163e6:	4613      	mov	r3, r2
   163e8:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
   163ea:	68fb      	ldr	r3, [r7, #12]
   163ec:	7c1b      	ldrb	r3, [r3, #16]
   163ee:	b2db      	uxtb	r3, r3
   163f0:	f083 0301 	eor.w	r3, r3, #1
   163f4:	b2db      	uxtb	r3, r3
   163f6:	2b00      	cmp	r3, #0
   163f8:	d000      	beq.n	163fc <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
   163fa:	e7f6      	b.n	163ea <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
   163fc:	68fb      	ldr	r3, [r7, #12]
   163fe:	2200      	movs	r2, #0
   16400:	741a      	strb	r2, [r3, #16]
	return io_write(I2C_io, buffer, lenght);
   16402:	68fb      	ldr	r3, [r7, #12]
   16404:	699b      	ldr	r3, [r3, #24]
   16406:	88fa      	ldrh	r2, [r7, #6]
   16408:	68b9      	ldr	r1, [r7, #8]
   1640a:	4618      	mov	r0, r3
   1640c:	4b03      	ldr	r3, [pc, #12]	; (1641c <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
   1640e:	4798      	blx	r3
   16410:	4603      	mov	r3, r0
}
   16412:	4618      	mov	r0, r3
   16414:	3710      	adds	r7, #16
   16416:	46bd      	mov	sp, r7
   16418:	bd80      	pop	{r7, pc}
   1641a:	bf00      	nop
   1641c:	0001671d 	.word	0x0001671d

00016420 <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
   16420:	b580      	push	{r7, lr}
   16422:	b084      	sub	sp, #16
   16424:	af00      	add	r7, sp, #0
   16426:	60f8      	str	r0, [r7, #12]
   16428:	60b9      	str	r1, [r7, #8]
   1642a:	4613      	mov	r3, r2
   1642c:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
   1642e:	68fb      	ldr	r3, [r7, #12]
   16430:	7c5b      	ldrb	r3, [r3, #17]
   16432:	b2db      	uxtb	r3, r3
   16434:	f083 0301 	eor.w	r3, r3, #1
   16438:	b2db      	uxtb	r3, r3
   1643a:	2b00      	cmp	r3, #0
   1643c:	d000      	beq.n	16440 <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
   1643e:	e7f6      	b.n	1642e <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
   16440:	68fb      	ldr	r3, [r7, #12]
   16442:	2200      	movs	r2, #0
   16444:	745a      	strb	r2, [r3, #17]
		return io_read(I2C_io, buffer, lenght);
   16446:	68fb      	ldr	r3, [r7, #12]
   16448:	699b      	ldr	r3, [r3, #24]
   1644a:	88fa      	ldrh	r2, [r7, #6]
   1644c:	68b9      	ldr	r1, [r7, #8]
   1644e:	4618      	mov	r0, r3
   16450:	4b03      	ldr	r3, [pc, #12]	; (16460 <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
   16452:	4798      	blx	r3
   16454:	4603      	mov	r3, r0
}
   16456:	4618      	mov	r0, r3
   16458:	3710      	adds	r7, #16
   1645a:	46bd      	mov	sp, r7
   1645c:	bd80      	pop	{r7, pc}
   1645e:	bf00      	nop
   16460:	0001676d 	.word	0x0001676d

00016464 <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
   16464:	b480      	push	{r7}
   16466:	b083      	sub	sp, #12
   16468:	af00      	add	r7, sp, #0
   1646a:	6078      	str	r0, [r7, #4]
	 ack=false;
   1646c:	687b      	ldr	r3, [r7, #4]
   1646e:	2200      	movs	r2, #0
   16470:	749a      	strb	r2, [r3, #18]
	 return ack;
   16472:	687b      	ldr	r3, [r7, #4]
   16474:	7c9b      	ldrb	r3, [r3, #18]
   16476:	b2db      	uxtb	r3, r3
   16478:	4618      	mov	r0, r3
   1647a:	370c      	adds	r7, #12
   1647c:	46bd      	mov	sp, r7
   1647e:	bc80      	pop	{r7}
   16480:	4770      	bx	lr

00016482 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
   16482:	b480      	push	{r7}
   16484:	b083      	sub	sp, #12
   16486:	af00      	add	r7, sp, #0
   16488:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
   1648a:	687b      	ldr	r3, [r7, #4]
   1648c:	681b      	ldr	r3, [r3, #0]
}
   1648e:	4618      	mov	r0, r3
   16490:	370c      	adds	r7, #12
   16492:	46bd      	mov	sp, r7
   16494:	bc80      	pop	{r7}
   16496:	4770      	bx	lr

00016498 <_ZN14I2C_ObjectListC1Ev>:

#include "I2C_ObjectList.h"
#include "I2C_Asyn_Class.h"

// default constructor
I2C_ObjectList::I2C_ObjectList()
   16498:	b480      	push	{r7}
   1649a:	b083      	sub	sp, #12
   1649c:	af00      	add	r7, sp, #0
   1649e:	6078      	str	r0, [r7, #4]
{
	objList=&i2cList;
   164a0:	687b      	ldr	r3, [r7, #4]
   164a2:	4a04      	ldr	r2, [pc, #16]	; (164b4 <_ZN14I2C_ObjectListC1Ev+0x1c>)
   164a4:	60da      	str	r2, [r3, #12]
} //I2C_ObjectList
   164a6:	687b      	ldr	r3, [r7, #4]
   164a8:	4618      	mov	r0, r3
   164aa:	370c      	adds	r7, #12
   164ac:	46bd      	mov	sp, r7
   164ae:	bc80      	pop	{r7}
   164b0:	4770      	bx	lr
   164b2:	bf00      	nop
   164b4:	20005450 	.word	0x20005450

000164b8 <_ZN14I2C_ObjectListD1Ev>:

// default destructor
I2C_ObjectList::~I2C_ObjectList()
   164b8:	b480      	push	{r7}
   164ba:	b083      	sub	sp, #12
   164bc:	af00      	add	r7, sp, #0
   164be:	6078      	str	r0, [r7, #4]
{
} //~I2C_ObjectList
   164c0:	687b      	ldr	r3, [r7, #4]
   164c2:	4618      	mov	r0, r3
   164c4:	370c      	adds	r7, #12
   164c6:	46bd      	mov	sp, r7
   164c8:	bc80      	pop	{r7}
   164ca:	4770      	bx	lr

000164cc <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor>:

int I2C_ObjectList::AddI2CObject(I2CPointerAndDescriptor& ck ){
   164cc:	b580      	push	{r7, lr}
   164ce:	b082      	sub	sp, #8
   164d0:	af00      	add	r7, sp, #0
   164d2:	6078      	str	r0, [r7, #4]
   164d4:	6039      	str	r1, [r7, #0]
	
		ASSERT((objList)&&(&ck));
   164d6:	687b      	ldr	r3, [r7, #4]
   164d8:	68db      	ldr	r3, [r3, #12]
   164da:	2b00      	cmp	r3, #0
   164dc:	d004      	beq.n	164e8 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   164de:	683b      	ldr	r3, [r7, #0]
   164e0:	2b00      	cmp	r3, #0
   164e2:	d001      	beq.n	164e8 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   164e4:	2301      	movs	r3, #1
   164e6:	e000      	b.n	164ea <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1e>
   164e8:	2300      	movs	r3, #0
   164ea:	2219      	movs	r2, #25
   164ec:	4910      	ldr	r1, [pc, #64]	; (16530 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   164ee:	4618      	mov	r0, r3
   164f0:	4b10      	ldr	r3, [pc, #64]	; (16534 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   164f2:	4798      	blx	r3
		if (is_list_element(objList,&ck)) {
   164f4:	687b      	ldr	r3, [r7, #4]
   164f6:	68db      	ldr	r3, [r3, #12]
   164f8:	6839      	ldr	r1, [r7, #0]
   164fa:	4618      	mov	r0, r3
   164fc:	4b0e      	ldr	r3, [pc, #56]	; (16538 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x6c>)
   164fe:	4798      	blx	r3
   16500:	4603      	mov	r3, r0
   16502:	2b00      	cmp	r3, #0
   16504:	d007      	beq.n	16516 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x4a>

			ASSERT(false);
   16506:	221c      	movs	r2, #28
   16508:	4909      	ldr	r1, [pc, #36]	; (16530 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   1650a:	2000      	movs	r0, #0
   1650c:	4b09      	ldr	r3, [pc, #36]	; (16534 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   1650e:	4798      	blx	r3
			return ERR_ALREADY_INITIALIZED;
   16510:	f06f 0311 	mvn.w	r3, #17
   16514:	e007      	b.n	16526 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x5a>
		}
		AddObject(objList,&ck);
   16516:	687b      	ldr	r3, [r7, #4]
   16518:	68db      	ldr	r3, [r3, #12]
   1651a:	683a      	ldr	r2, [r7, #0]
   1651c:	4619      	mov	r1, r3
   1651e:	6878      	ldr	r0, [r7, #4]
   16520:	4b06      	ldr	r3, [pc, #24]	; (1653c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x70>)
   16522:	4798      	blx	r3
		return ERR_NONE;
   16524:	2300      	movs	r3, #0
}
   16526:	4618      	mov	r0, r3
   16528:	3708      	adds	r7, #8
   1652a:	46bd      	mov	sp, r7
   1652c:	bd80      	pop	{r7, pc}
   1652e:	bf00      	nop
   16530:	0001e558 	.word	0x0001e558
   16534:	00006991 	.word	0x00006991
   16538:	000069b9 	.word	0x000069b9
   1653c:	00016541 	.word	0x00016541

00016540 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor>:
		coupleKey.i2cDescr=ptrI2C;
		ck=coupleKey;
			
}

void I2C_ObjectList::AddObject(list_descriptor *list,I2CPointerAndDescriptor* nck){
   16540:	b580      	push	{r7, lr}
   16542:	b086      	sub	sp, #24
   16544:	af00      	add	r7, sp, #0
   16546:	60f8      	str	r0, [r7, #12]
   16548:	60b9      	str	r1, [r7, #8]
   1654a:	607a      	str	r2, [r7, #4]
		I2CPointerAndDescriptor *it, *head = (I2CPointerAndDescriptor *)list_get_head(list);
   1654c:	68b8      	ldr	r0, [r7, #8]
   1654e:	4b09      	ldr	r3, [pc, #36]	; (16574 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x34>)
   16550:	4798      	blx	r3
   16552:	6178      	str	r0, [r7, #20]

		if (!head) {
   16554:	697b      	ldr	r3, [r7, #20]
   16556:	2b00      	cmp	r3, #0
   16558:	d104      	bne.n	16564 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x24>
			list_insert_as_head(list, nck);
   1655a:	6879      	ldr	r1, [r7, #4]
   1655c:	68b8      	ldr	r0, [r7, #8]
   1655e:	4b06      	ldr	r3, [pc, #24]	; (16578 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x38>)
   16560:	4798      	blx	r3
			return;
   16562:	e003      	b.n	1656c <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x2c>
		}else{
			list_insert_at_end(list,nck);
   16564:	6879      	ldr	r1, [r7, #4]
   16566:	68b8      	ldr	r0, [r7, #8]
   16568:	4b04      	ldr	r3, [pc, #16]	; (1657c <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x3c>)
   1656a:	4798      	blx	r3
		}
}
   1656c:	3718      	adds	r7, #24
   1656e:	46bd      	mov	sp, r7
   16570:	bd80      	pop	{r7, pc}
   16572:	bf00      	nop
   16574:	00016483 	.word	0x00016483
   16578:	000069f1 	.word	0x000069f1
   1657c:	00006a6d 	.word	0x00006a6d

00016580 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc>:

uint32_t I2C_ObjectList::GetClassPointer(i2c_m_async_desc*	i2cDescr){
   16580:	b480      	push	{r7}
   16582:	b087      	sub	sp, #28
   16584:	af00      	add	r7, sp, #0
   16586:	6078      	str	r0, [r7, #4]
   16588:	6039      	str	r1, [r7, #0]
		struct list_element *it;
		//I2CPointerAndDescriptor *it;
		I2CPointerAndDescriptor *k;
		uint32_t ptr;
		for (it = objList->head; it; it = it->next) {
   1658a:	687b      	ldr	r3, [r7, #4]
   1658c:	68db      	ldr	r3, [r3, #12]
   1658e:	681b      	ldr	r3, [r3, #0]
   16590:	617b      	str	r3, [r7, #20]
   16592:	697b      	ldr	r3, [r7, #20]
   16594:	2b00      	cmp	r3, #0
   16596:	d00f      	beq.n	165b8 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x38>
			k=(I2CPointerAndDescriptor*)it;
   16598:	697b      	ldr	r3, [r7, #20]
   1659a:	613b      	str	r3, [r7, #16]
			
			if (k->i2cDescr== i2cDescr){
   1659c:	693b      	ldr	r3, [r7, #16]
   1659e:	685a      	ldr	r2, [r3, #4]
   165a0:	683b      	ldr	r3, [r7, #0]
   165a2:	429a      	cmp	r2, r3
   165a4:	d104      	bne.n	165b0 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x30>
				ptr=k->ptrI2CAsynClass;
   165a6:	693b      	ldr	r3, [r7, #16]
   165a8:	689b      	ldr	r3, [r3, #8]
   165aa:	60fb      	str	r3, [r7, #12]
				return ptr;
   165ac:	68fb      	ldr	r3, [r7, #12]
   165ae:	e004      	b.n	165ba <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x3a>
		for (it = objList->head; it; it = it->next) {
   165b0:	697b      	ldr	r3, [r7, #20]
   165b2:	681b      	ldr	r3, [r3, #0]
   165b4:	617b      	str	r3, [r7, #20]
   165b6:	e7ec      	b.n	16592 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x12>
			}
		}

		return 0;
   165b8:	2300      	movs	r3, #0
   165ba:	4618      	mov	r0, r3
   165bc:	371c      	adds	r7, #28
   165be:	46bd      	mov	sp, r7
   165c0:	bc80      	pop	{r7}
   165c2:	4770      	bx	lr

000165c4 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
   165c4:	4b02      	ldr	r3, [pc, #8]	; (165d0 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
   165c6:	681a      	ldr	r2, [r3, #0]
   165c8:	6813      	ldr	r3, [r2, #0]
   165ca:	3301      	adds	r3, #1
   165cc:	6013      	str	r3, [r2, #0]
   165ce:	4770      	bx	lr
   165d0:	20005454 	.word	0x20005454

000165d4 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
   165d4:	4b02      	ldr	r3, [pc, #8]	; (165e0 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
   165d6:	681b      	ldr	r3, [r3, #0]
   165d8:	2200      	movs	r2, #0
   165da:	711a      	strb	r2, [r3, #4]
   165dc:	4770      	bx	lr
   165de:	bf00      	nop
   165e0:	20005454 	.word	0x20005454

000165e4 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
   165e4:	b538      	push	{r3, r4, r5, lr}
   165e6:	4604      	mov	r4, r0
{
	ticks=0;
   165e8:	2300      	movs	r3, #0
   165ea:	6003      	str	r3, [r0, #0]
	interfaceTimer.Stop();
   165ec:	4d04      	ldr	r5, [pc, #16]	; (16600 <_ZN16Maintenance_ToolD1Ev+0x1c>)
   165ee:	4628      	mov	r0, r5
   165f0:	4b04      	ldr	r3, [pc, #16]	; (16604 <_ZN16Maintenance_ToolD1Ev+0x20>)
   165f2:	4798      	blx	r3
	interfaceTimer.Remove_task();
   165f4:	4628      	mov	r0, r5
   165f6:	4b04      	ldr	r3, [pc, #16]	; (16608 <_ZN16Maintenance_ToolD1Ev+0x24>)
   165f8:	4798      	blx	r3
	
} //~Maintenance_Tool
   165fa:	4620      	mov	r0, r4
   165fc:	bd38      	pop	{r3, r4, r5, pc}
   165fe:	bf00      	nop
   16600:	2000542c 	.word	0x2000542c
   16604:	00015ebd 	.word	0x00015ebd
   16608:	00015fd5 	.word	0x00015fd5

0001660c <_ZN16Maintenance_ToolC1Ev>:
	ptrMaintenanceTool=this;
   1660c:	4a04      	ldr	r2, [pc, #16]	; (16620 <_ZN16Maintenance_ToolC1Ev+0x14>)
   1660e:	6010      	str	r0, [r2, #0]
	maintenanceIsConnected = false;
   16610:	2200      	movs	r2, #0
   16612:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
	nextMaintenanceSyncTime = 0;
   16616:	6482      	str	r2, [r0, #72]	; 0x48
	nextMaintenanceUsageTimerSyncTime = 0;
   16618:	64c2      	str	r2, [r0, #76]	; 0x4c
	ticks=0;
   1661a:	6002      	str	r2, [r0, #0]
} //Maintenance_Tool
   1661c:	4770      	bx	lr
   1661e:	bf00      	nop
   16620:	20005454 	.word	0x20005454

00016624 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
   16624:	b510      	push	{r4, lr}
		maintenanceIsConnected = isConnected;
   16626:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
		if (isConnected)
   1662a:	b919      	cbnz	r1, 16634 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
   1662c:	4808      	ldr	r0, [pc, #32]	; (16650 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   1662e:	4b09      	ldr	r3, [pc, #36]	; (16654 <_ZN16Maintenance_Tool12setConnectedEb+0x30>)
   16630:	4798      	blx	r3
   16632:	bd10      	pop	{r4, pc}
			interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
   16634:	4c06      	ldr	r4, [pc, #24]	; (16650 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   16636:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1663a:	4907      	ldr	r1, [pc, #28]	; (16658 <_ZN16Maintenance_Tool12setConnectedEb+0x34>)
   1663c:	4620      	mov	r0, r4
   1663e:	4b07      	ldr	r3, [pc, #28]	; (1665c <_ZN16Maintenance_Tool12setConnectedEb+0x38>)
   16640:	4798      	blx	r3
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
   16642:	f64e 2260 	movw	r2, #60000	; 0xea60
   16646:	4906      	ldr	r1, [pc, #24]	; (16660 <_ZN16Maintenance_Tool12setConnectedEb+0x3c>)
   16648:	4620      	mov	r0, r4
   1664a:	4b06      	ldr	r3, [pc, #24]	; (16664 <_ZN16Maintenance_Tool12setConnectedEb+0x40>)
   1664c:	4798      	blx	r3
   1664e:	bd10      	pop	{r4, pc}
   16650:	2000542c 	.word	0x2000542c
   16654:	00015ebd 	.word	0x00015ebd
   16658:	000165c5 	.word	0x000165c5
   1665c:	00015f4d 	.word	0x00015f4d
   16660:	000165d5 	.word	0x000165d5
   16664:	00015f9d 	.word	0x00015f9d

00016668 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
   16668:	b510      	push	{r4, lr}
   1666a:	4604      	mov	r4, r0
	result=false;
   1666c:	2300      	movs	r3, #0
   1666e:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	magic=0;
   16672:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
	if (gotAccess==true)
   16676:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
   1667a:	b12b      	cbz	r3, 16688 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
   1667c:	2301      	movs	r3, #1
   1667e:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	return	result;
   16682:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
}
   16686:	bd10      	pop	{r4, pc}
		if (usb.connected)
   16688:	4b15      	ldr	r3, [pc, #84]	; (166e0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   1668a:	7c1b      	ldrb	r3, [r3, #16]
   1668c:	2b00      	cmp	r3, #0
   1668e:	d0f8      	beq.n	16682 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
			if (usb.rxReady)
   16690:	4b13      	ldr	r3, [pc, #76]	; (166e0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   16692:	7d5b      	ldrb	r3, [r3, #21]
   16694:	b18b      	cbz	r3, 166ba <_ZN16Maintenance_Tool14IsAppConnectedEv+0x52>
   16696:	1d43      	adds	r3, r0, #5
   16698:	3009      	adds	r0, #9
   1669a:	2200      	movs	r2, #0
					magic|= localBuffer[i];
   1669c:	f813 1b01 	ldrb.w	r1, [r3], #1
   166a0:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
				for (int i = 0; i < 4; i++)
   166a4:	4283      	cmp	r3, r0
   166a6:	d1f9      	bne.n	1669c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x34>
   166a8:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
				xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
   166ac:	4b0d      	ldr	r3, [pc, #52]	; (166e4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
   166ae:	ea82 0103 	eor.w	r1, r2, r3
   166b2:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
				if (xorResult==0)
   166b6:	429a      	cmp	r2, r3
   166b8:	d005      	beq.n	166c6 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x5e>
			usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   166ba:	2240      	movs	r2, #64	; 0x40
   166bc:	1d61      	adds	r1, r4, #5
   166be:	4808      	ldr	r0, [pc, #32]	; (166e0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   166c0:	4b09      	ldr	r3, [pc, #36]	; (166e8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
   166c2:	4798      	blx	r3
   166c4:	e7dd      	b.n	16682 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
					gotAccess=true;
   166c6:	2101      	movs	r1, #1
   166c8:	f884 10f9 	strb.w	r1, [r4, #249]	; 0xf9
					result=true;
   166cc:	f884 10f8 	strb.w	r1, [r4, #248]	; 0xf8
					is_MTPC_Beaming=true;
   166d0:	7121      	strb	r1, [r4, #4]
					setConnected(true);
   166d2:	4620      	mov	r0, r4
   166d4:	4b05      	ldr	r3, [pc, #20]	; (166ec <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
   166d6:	4798      	blx	r3
					return	result;
   166d8:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
   166dc:	bd10      	pop	{r4, pc}
   166de:	bf00      	nop
   166e0:	20005304 	.word	0x20005304
   166e4:	61626364 	.word	0x61626364
   166e8:	000156ad 	.word	0x000156ad
   166ec:	00016625 	.word	0x00016625

000166f0 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
	}

}
   166f0:	b510      	push	{r4, lr}
   166f2:	4c05      	ldr	r4, [pc, #20]	; (16708 <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
   166f4:	4620      	mov	r0, r4
   166f6:	4b05      	ldr	r3, [pc, #20]	; (1670c <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
   166f8:	4798      	blx	r3
   166fa:	4a05      	ldr	r2, [pc, #20]	; (16710 <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
   166fc:	4905      	ldr	r1, [pc, #20]	; (16714 <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
   166fe:	4620      	mov	r0, r4
   16700:	4b05      	ldr	r3, [pc, #20]	; (16718 <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
   16702:	4798      	blx	r3
   16704:	bd10      	pop	{r4, pc}
   16706:	bf00      	nop
   16708:	20005458 	.word	0x20005458
   1670c:	0001660d 	.word	0x0001660d
   16710:	20000000 	.word	0x20000000
   16714:	000165e5 	.word	0x000165e5
   16718:	000167bd 	.word	0x000167bd

0001671c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   1671c:	b580      	push	{r7, lr}
   1671e:	b084      	sub	sp, #16
   16720:	af00      	add	r7, sp, #0
   16722:	60f8      	str	r0, [r7, #12]
   16724:	60b9      	str	r1, [r7, #8]
   16726:	4613      	mov	r3, r2
   16728:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   1672a:	68fb      	ldr	r3, [r7, #12]
   1672c:	2b00      	cmp	r3, #0
   1672e:	d004      	beq.n	1673a <io_write+0x1e>
   16730:	68bb      	ldr	r3, [r7, #8]
   16732:	2b00      	cmp	r3, #0
   16734:	d001      	beq.n	1673a <io_write+0x1e>
   16736:	2301      	movs	r3, #1
   16738:	e000      	b.n	1673c <io_write+0x20>
   1673a:	2300      	movs	r3, #0
   1673c:	f003 0301 	and.w	r3, r3, #1
   16740:	b2db      	uxtb	r3, r3
   16742:	2234      	movs	r2, #52	; 0x34
   16744:	4907      	ldr	r1, [pc, #28]	; (16764 <io_write+0x48>)
   16746:	4618      	mov	r0, r3
   16748:	4b07      	ldr	r3, [pc, #28]	; (16768 <io_write+0x4c>)
   1674a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   1674c:	68fb      	ldr	r3, [r7, #12]
   1674e:	681b      	ldr	r3, [r3, #0]
   16750:	88fa      	ldrh	r2, [r7, #6]
   16752:	68b9      	ldr	r1, [r7, #8]
   16754:	68f8      	ldr	r0, [r7, #12]
   16756:	4798      	blx	r3
   16758:	4603      	mov	r3, r0
}
   1675a:	4618      	mov	r0, r3
   1675c:	3710      	adds	r7, #16
   1675e:	46bd      	mov	sp, r7
   16760:	bd80      	pop	{r7, pc}
   16762:	bf00      	nop
   16764:	0001e574 	.word	0x0001e574
   16768:	00006991 	.word	0x00006991

0001676c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   1676c:	b580      	push	{r7, lr}
   1676e:	b084      	sub	sp, #16
   16770:	af00      	add	r7, sp, #0
   16772:	60f8      	str	r0, [r7, #12]
   16774:	60b9      	str	r1, [r7, #8]
   16776:	4613      	mov	r3, r2
   16778:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   1677a:	68fb      	ldr	r3, [r7, #12]
   1677c:	2b00      	cmp	r3, #0
   1677e:	d004      	beq.n	1678a <io_read+0x1e>
   16780:	68bb      	ldr	r3, [r7, #8]
   16782:	2b00      	cmp	r3, #0
   16784:	d001      	beq.n	1678a <io_read+0x1e>
   16786:	2301      	movs	r3, #1
   16788:	e000      	b.n	1678c <io_read+0x20>
   1678a:	2300      	movs	r3, #0
   1678c:	f003 0301 	and.w	r3, r3, #1
   16790:	b2db      	uxtb	r3, r3
   16792:	223d      	movs	r2, #61	; 0x3d
   16794:	4907      	ldr	r1, [pc, #28]	; (167b4 <io_read+0x48>)
   16796:	4618      	mov	r0, r3
   16798:	4b07      	ldr	r3, [pc, #28]	; (167b8 <io_read+0x4c>)
   1679a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   1679c:	68fb      	ldr	r3, [r7, #12]
   1679e:	685b      	ldr	r3, [r3, #4]
   167a0:	88fa      	ldrh	r2, [r7, #6]
   167a2:	68b9      	ldr	r1, [r7, #8]
   167a4:	68f8      	ldr	r0, [r7, #12]
   167a6:	4798      	blx	r3
   167a8:	4603      	mov	r3, r0
}
   167aa:	4618      	mov	r0, r3
   167ac:	3710      	adds	r7, #16
   167ae:	46bd      	mov	sp, r7
   167b0:	bd80      	pop	{r7, pc}
   167b2:	bf00      	nop
   167b4:	0001e574 	.word	0x0001e574
   167b8:	00006991 	.word	0x00006991

000167bc <__aeabi_atexit>:
   167bc:	460b      	mov	r3, r1
   167be:	4601      	mov	r1, r0
   167c0:	4618      	mov	r0, r3
   167c2:	f002 b85d 	b.w	18880 <__cxa_atexit>
   167c6:	bf00      	nop

000167c8 <_ZdlPvj>:
   167c8:	f7fb bd54 	b.w	12274 <_ZdlPv>
   167cc:	0000      	movs	r0, r0
	...

000167d0 <floor>:
   167d0:	f3c1 520a 	ubfx	r2, r1, #20, #11
   167d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   167d8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   167dc:	2e13      	cmp	r6, #19
   167de:	460b      	mov	r3, r1
   167e0:	460d      	mov	r5, r1
   167e2:	4604      	mov	r4, r0
   167e4:	4688      	mov	r8, r1
   167e6:	4607      	mov	r7, r0
   167e8:	dc1d      	bgt.n	16826 <floor+0x56>
   167ea:	2e00      	cmp	r6, #0
   167ec:	db40      	blt.n	16870 <floor+0xa0>
   167ee:	4a3c      	ldr	r2, [pc, #240]	; (168e0 <floor+0x110>)
   167f0:	fa42 f906 	asr.w	r9, r2, r6
   167f4:	ea01 0209 	and.w	r2, r1, r9
   167f8:	4302      	orrs	r2, r0
   167fa:	4686      	mov	lr, r0
   167fc:	d018      	beq.n	16830 <floor+0x60>
   167fe:	a336      	add	r3, pc, #216	; (adr r3, 168d8 <floor+0x108>)
   16800:	e9d3 2300 	ldrd	r2, r3, [r3]
   16804:	f001 f91c 	bl	17a40 <__adddf3>
   16808:	2200      	movs	r2, #0
   1680a:	2300      	movs	r3, #0
   1680c:	f001 fd5a 	bl	182c4 <__aeabi_dcmpgt>
   16810:	b120      	cbz	r0, 1681c <floor+0x4c>
   16812:	2d00      	cmp	r5, #0
   16814:	db42      	blt.n	1689c <floor+0xcc>
   16816:	ea28 0509 	bic.w	r5, r8, r9
   1681a:	2700      	movs	r7, #0
   1681c:	463c      	mov	r4, r7
   1681e:	4629      	mov	r1, r5
   16820:	4620      	mov	r0, r4
   16822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16826:	2e33      	cmp	r6, #51	; 0x33
   16828:	dd06      	ble.n	16838 <floor+0x68>
   1682a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1682e:	d02f      	beq.n	16890 <floor+0xc0>
   16830:	4619      	mov	r1, r3
   16832:	4620      	mov	r0, r4
   16834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16838:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   1683c:	f04f 39ff 	mov.w	r9, #4294967295
   16840:	fa29 f902 	lsr.w	r9, r9, r2
   16844:	ea10 0f09 	tst.w	r0, r9
   16848:	d0f2      	beq.n	16830 <floor+0x60>
   1684a:	a323      	add	r3, pc, #140	; (adr r3, 168d8 <floor+0x108>)
   1684c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16850:	f001 f8f6 	bl	17a40 <__adddf3>
   16854:	2200      	movs	r2, #0
   16856:	2300      	movs	r3, #0
   16858:	f001 fd34 	bl	182c4 <__aeabi_dcmpgt>
   1685c:	2800      	cmp	r0, #0
   1685e:	d0dd      	beq.n	1681c <floor+0x4c>
   16860:	2d00      	cmp	r5, #0
   16862:	db21      	blt.n	168a8 <floor+0xd8>
   16864:	4645      	mov	r5, r8
   16866:	ea27 0709 	bic.w	r7, r7, r9
   1686a:	463c      	mov	r4, r7
   1686c:	4629      	mov	r1, r5
   1686e:	e7d7      	b.n	16820 <floor+0x50>
   16870:	a319      	add	r3, pc, #100	; (adr r3, 168d8 <floor+0x108>)
   16872:	e9d3 2300 	ldrd	r2, r3, [r3]
   16876:	f001 f8e3 	bl	17a40 <__adddf3>
   1687a:	2200      	movs	r2, #0
   1687c:	2300      	movs	r3, #0
   1687e:	f001 fd21 	bl	182c4 <__aeabi_dcmpgt>
   16882:	2800      	cmp	r0, #0
   16884:	d0ca      	beq.n	1681c <floor+0x4c>
   16886:	2d00      	cmp	r5, #0
   16888:	db19      	blt.n	168be <floor+0xee>
   1688a:	2700      	movs	r7, #0
   1688c:	463d      	mov	r5, r7
   1688e:	e7c5      	b.n	1681c <floor+0x4c>
   16890:	4602      	mov	r2, r0
   16892:	460b      	mov	r3, r1
   16894:	f001 f8d4 	bl	17a40 <__adddf3>
   16898:	4604      	mov	r4, r0
   1689a:	e7ca      	b.n	16832 <floor+0x62>
   1689c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   168a0:	fa43 f606 	asr.w	r6, r3, r6
   168a4:	44b0      	add	r8, r6
   168a6:	e7b6      	b.n	16816 <floor+0x46>
   168a8:	2e14      	cmp	r6, #20
   168aa:	d010      	beq.n	168ce <floor+0xfe>
   168ac:	2301      	movs	r3, #1
   168ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   168b2:	fa03 f606 	lsl.w	r6, r3, r6
   168b6:	1937      	adds	r7, r6, r4
   168b8:	bf28      	it	cs
   168ba:	4498      	addcs	r8, r3
   168bc:	e7d2      	b.n	16864 <floor+0x94>
   168be:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   168c2:	4b08      	ldr	r3, [pc, #32]	; (168e4 <floor+0x114>)
   168c4:	4322      	orrs	r2, r4
   168c6:	bf18      	it	ne
   168c8:	461d      	movne	r5, r3
   168ca:	2700      	movs	r7, #0
   168cc:	e7a6      	b.n	1681c <floor+0x4c>
   168ce:	f105 0801 	add.w	r8, r5, #1
   168d2:	e7c7      	b.n	16864 <floor+0x94>
   168d4:	f3af 8000 	nop.w
   168d8:	8800759c 	.word	0x8800759c
   168dc:	7e37e43c 	.word	0x7e37e43c
   168e0:	000fffff 	.word	0x000fffff
   168e4:	bff00000 	.word	0xbff00000

000168e8 <pow>:
   168e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168ec:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 16be0 <pow+0x2f8>
   168f0:	b08d      	sub	sp, #52	; 0x34
   168f2:	4606      	mov	r6, r0
   168f4:	460f      	mov	r7, r1
   168f6:	4614      	mov	r4, r2
   168f8:	461d      	mov	r5, r3
   168fa:	f000 f975 	bl	16be8 <__ieee754_pow>
   168fe:	f999 8000 	ldrsb.w	r8, [r9]
   16902:	f1b8 3fff 	cmp.w	r8, #4294967295
   16906:	e9cd 0100 	strd	r0, r1, [sp]
   1690a:	d036      	beq.n	1697a <pow+0x92>
   1690c:	4622      	mov	r2, r4
   1690e:	462b      	mov	r3, r5
   16910:	4620      	mov	r0, r4
   16912:	4629      	mov	r1, r5
   16914:	f001 fce0 	bl	182d8 <__aeabi_dcmpun>
   16918:	4683      	mov	fp, r0
   1691a:	bb70      	cbnz	r0, 1697a <pow+0x92>
   1691c:	4632      	mov	r2, r6
   1691e:	463b      	mov	r3, r7
   16920:	4630      	mov	r0, r6
   16922:	4639      	mov	r1, r7
   16924:	f001 fcd8 	bl	182d8 <__aeabi_dcmpun>
   16928:	2200      	movs	r2, #0
   1692a:	4682      	mov	sl, r0
   1692c:	2300      	movs	r3, #0
   1692e:	2800      	cmp	r0, #0
   16930:	f040 80a0 	bne.w	16a74 <pow+0x18c>
   16934:	4630      	mov	r0, r6
   16936:	4639      	mov	r1, r7
   16938:	f001 fc9c 	bl	18274 <__aeabi_dcmpeq>
   1693c:	b310      	cbz	r0, 16984 <pow+0x9c>
   1693e:	2200      	movs	r2, #0
   16940:	2300      	movs	r3, #0
   16942:	4620      	mov	r0, r4
   16944:	4629      	mov	r1, r5
   16946:	f001 fc95 	bl	18274 <__aeabi_dcmpeq>
   1694a:	4683      	mov	fp, r0
   1694c:	2800      	cmp	r0, #0
   1694e:	d06a      	beq.n	16a26 <pow+0x13e>
   16950:	2201      	movs	r2, #1
   16952:	4b9c      	ldr	r3, [pc, #624]	; (16bc4 <pow+0x2dc>)
   16954:	9202      	str	r2, [sp, #8]
   16956:	2100      	movs	r1, #0
   16958:	2200      	movs	r2, #0
   1695a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1695e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   16962:	e9cd 4506 	strd	r4, r5, [sp, #24]
   16966:	e9cd 1208 	strd	r1, r2, [sp, #32]
   1696a:	9303      	str	r3, [sp, #12]
   1696c:	f1b8 0f00 	cmp.w	r8, #0
   16970:	d045      	beq.n	169fe <pow+0x116>
   16972:	4c95      	ldr	r4, [pc, #596]	; (16bc8 <pow+0x2e0>)
   16974:	2300      	movs	r3, #0
   16976:	e9cd 3400 	strd	r3, r4, [sp]
   1697a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1697e:	b00d      	add	sp, #52	; 0x34
   16980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16984:	e9dd 0100 	ldrd	r0, r1, [sp]
   16988:	f000 ff34 	bl	177f4 <finite>
   1698c:	4680      	mov	r8, r0
   1698e:	2800      	cmp	r0, #0
   16990:	f000 808b 	beq.w	16aaa <pow+0x1c2>
   16994:	f04f 0a00 	mov.w	sl, #0
   16998:	f04f 0b00 	mov.w	fp, #0
   1699c:	4652      	mov	r2, sl
   1699e:	465b      	mov	r3, fp
   169a0:	e9dd 0100 	ldrd	r0, r1, [sp]
   169a4:	f001 fc66 	bl	18274 <__aeabi_dcmpeq>
   169a8:	2800      	cmp	r0, #0
   169aa:	d0e6      	beq.n	1697a <pow+0x92>
   169ac:	4630      	mov	r0, r6
   169ae:	4639      	mov	r1, r7
   169b0:	f000 ff20 	bl	177f4 <finite>
   169b4:	2800      	cmp	r0, #0
   169b6:	d0e0      	beq.n	1697a <pow+0x92>
   169b8:	4620      	mov	r0, r4
   169ba:	4629      	mov	r1, r5
   169bc:	f000 ff1a 	bl	177f4 <finite>
   169c0:	2800      	cmp	r0, #0
   169c2:	d0da      	beq.n	1697a <pow+0x92>
   169c4:	f999 3000 	ldrsb.w	r3, [r9]
   169c8:	4a7e      	ldr	r2, [pc, #504]	; (16bc4 <pow+0x2dc>)
   169ca:	9203      	str	r2, [sp, #12]
   169cc:	2104      	movs	r1, #4
   169ce:	2200      	movs	r2, #0
   169d0:	2b02      	cmp	r3, #2
   169d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
   169d6:	e9cd 4506 	strd	r4, r5, [sp, #24]
   169da:	e9cd ab08 	strd	sl, fp, [sp, #32]
   169de:	9102      	str	r1, [sp, #8]
   169e0:	920a      	str	r2, [sp, #40]	; 0x28
   169e2:	d003      	beq.n	169ec <pow+0x104>
   169e4:	a802      	add	r0, sp, #8
   169e6:	f000 ff0b 	bl	17800 <matherr>
   169ea:	b968      	cbnz	r0, 16a08 <pow+0x120>
   169ec:	f001 ff54 	bl	18898 <__errno>
   169f0:	2322      	movs	r3, #34	; 0x22
   169f2:	6003      	str	r3, [r0, #0]
   169f4:	e008      	b.n	16a08 <pow+0x120>
   169f6:	2300      	movs	r3, #0
   169f8:	2400      	movs	r4, #0
   169fa:	e9cd 3408 	strd	r3, r4, [sp, #32]
   169fe:	a802      	add	r0, sp, #8
   16a00:	f000 fefe 	bl	17800 <matherr>
   16a04:	2800      	cmp	r0, #0
   16a06:	d030      	beq.n	16a6a <pow+0x182>
   16a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16a0a:	b11b      	cbz	r3, 16a14 <pow+0x12c>
   16a0c:	f001 ff44 	bl	18898 <__errno>
   16a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16a12:	6003      	str	r3, [r0, #0]
   16a14:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16a18:	e9cd 3400 	strd	r3, r4, [sp]
   16a1c:	e9dd 0100 	ldrd	r0, r1, [sp]
   16a20:	b00d      	add	sp, #52	; 0x34
   16a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a26:	4620      	mov	r0, r4
   16a28:	4629      	mov	r1, r5
   16a2a:	f000 fee3 	bl	177f4 <finite>
   16a2e:	2800      	cmp	r0, #0
   16a30:	d0a3      	beq.n	1697a <pow+0x92>
   16a32:	2200      	movs	r2, #0
   16a34:	2300      	movs	r3, #0
   16a36:	4620      	mov	r0, r4
   16a38:	4629      	mov	r1, r5
   16a3a:	f001 fc25 	bl	18288 <__aeabi_dcmplt>
   16a3e:	2800      	cmp	r0, #0
   16a40:	d09b      	beq.n	1697a <pow+0x92>
   16a42:	f999 3000 	ldrsb.w	r3, [r9]
   16a46:	4a5f      	ldr	r2, [pc, #380]	; (16bc4 <pow+0x2dc>)
   16a48:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   16a4c:	2101      	movs	r1, #1
   16a4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   16a52:	e9cd 4506 	strd	r4, r5, [sp, #24]
   16a56:	9102      	str	r1, [sp, #8]
   16a58:	9203      	str	r2, [sp, #12]
   16a5a:	2b00      	cmp	r3, #0
   16a5c:	d0cb      	beq.n	169f6 <pow+0x10e>
   16a5e:	495b      	ldr	r1, [pc, #364]	; (16bcc <pow+0x2e4>)
   16a60:	2000      	movs	r0, #0
   16a62:	2b02      	cmp	r3, #2
   16a64:	e9cd 0108 	strd	r0, r1, [sp, #32]
   16a68:	d1c9      	bne.n	169fe <pow+0x116>
   16a6a:	f001 ff15 	bl	18898 <__errno>
   16a6e:	2321      	movs	r3, #33	; 0x21
   16a70:	6003      	str	r3, [r0, #0]
   16a72:	e7c9      	b.n	16a08 <pow+0x120>
   16a74:	4620      	mov	r0, r4
   16a76:	4629      	mov	r1, r5
   16a78:	f001 fbfc 	bl	18274 <__aeabi_dcmpeq>
   16a7c:	2800      	cmp	r0, #0
   16a7e:	f43f af7c 	beq.w	1697a <pow+0x92>
   16a82:	4b51      	ldr	r3, [pc, #324]	; (16bc8 <pow+0x2e0>)
   16a84:	494f      	ldr	r1, [pc, #316]	; (16bc4 <pow+0x2dc>)
   16a86:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   16a8a:	2001      	movs	r0, #1
   16a8c:	2200      	movs	r2, #0
   16a8e:	f1b8 0f02 	cmp.w	r8, #2
   16a92:	e9cd 6704 	strd	r6, r7, [sp, #16]
   16a96:	e9cd 4506 	strd	r4, r5, [sp, #24]
   16a9a:	9002      	str	r0, [sp, #8]
   16a9c:	9103      	str	r1, [sp, #12]
   16a9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   16aa2:	d1ac      	bne.n	169fe <pow+0x116>
   16aa4:	e9cd 2300 	strd	r2, r3, [sp]
   16aa8:	e767      	b.n	1697a <pow+0x92>
   16aaa:	4630      	mov	r0, r6
   16aac:	4639      	mov	r1, r7
   16aae:	f000 fea1 	bl	177f4 <finite>
   16ab2:	2800      	cmp	r0, #0
   16ab4:	f43f af6e 	beq.w	16994 <pow+0xac>
   16ab8:	4620      	mov	r0, r4
   16aba:	4629      	mov	r1, r5
   16abc:	f000 fe9a 	bl	177f4 <finite>
   16ac0:	2800      	cmp	r0, #0
   16ac2:	f43f af67 	beq.w	16994 <pow+0xac>
   16ac6:	e9dd 2300 	ldrd	r2, r3, [sp]
   16aca:	4610      	mov	r0, r2
   16acc:	4619      	mov	r1, r3
   16ace:	f001 fc03 	bl	182d8 <__aeabi_dcmpun>
   16ad2:	2800      	cmp	r0, #0
   16ad4:	d158      	bne.n	16b88 <pow+0x2a0>
   16ad6:	2303      	movs	r3, #3
   16ad8:	f999 8000 	ldrsb.w	r8, [r9]
   16adc:	9302      	str	r3, [sp, #8]
   16ade:	4b39      	ldr	r3, [pc, #228]	; (16bc4 <pow+0x2dc>)
   16ae0:	900a      	str	r0, [sp, #40]	; 0x28
   16ae2:	9303      	str	r3, [sp, #12]
   16ae4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   16ae8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   16aec:	2200      	movs	r2, #0
   16aee:	2300      	movs	r3, #0
   16af0:	4630      	mov	r0, r6
   16af2:	4639      	mov	r1, r7
   16af4:	f1b8 0f00 	cmp.w	r8, #0
   16af8:	d126      	bne.n	16b48 <pow+0x260>
   16afa:	4f35      	ldr	r7, [pc, #212]	; (16bd0 <pow+0x2e8>)
   16afc:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   16b00:	e9cd 6708 	strd	r6, r7, [sp, #32]
   16b04:	f001 fbc0 	bl	18288 <__aeabi_dcmplt>
   16b08:	2800      	cmp	r0, #0
   16b0a:	f43f af6b 	beq.w	169e4 <pow+0xfc>
   16b0e:	2200      	movs	r2, #0
   16b10:	4b30      	ldr	r3, [pc, #192]	; (16bd4 <pow+0x2ec>)
   16b12:	4620      	mov	r0, r4
   16b14:	4629      	mov	r1, r5
   16b16:	f001 f945 	bl	17da4 <__aeabi_dmul>
   16b1a:	4604      	mov	r4, r0
   16b1c:	460d      	mov	r5, r1
   16b1e:	f000 fe77 	bl	17810 <rint>
   16b22:	4602      	mov	r2, r0
   16b24:	460b      	mov	r3, r1
   16b26:	4620      	mov	r0, r4
   16b28:	4629      	mov	r1, r5
   16b2a:	f001 fba3 	bl	18274 <__aeabi_dcmpeq>
   16b2e:	bb40      	cbnz	r0, 16b82 <pow+0x29a>
   16b30:	4b29      	ldr	r3, [pc, #164]	; (16bd8 <pow+0x2f0>)
   16b32:	f999 8000 	ldrsb.w	r8, [r9]
   16b36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   16b3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
   16b3e:	f1b8 0f02 	cmp.w	r8, #2
   16b42:	f47f af4f 	bne.w	169e4 <pow+0xfc>
   16b46:	e751      	b.n	169ec <pow+0x104>
   16b48:	4f24      	ldr	r7, [pc, #144]	; (16bdc <pow+0x2f4>)
   16b4a:	2600      	movs	r6, #0
   16b4c:	e9cd 6708 	strd	r6, r7, [sp, #32]
   16b50:	f001 fb9a 	bl	18288 <__aeabi_dcmplt>
   16b54:	2800      	cmp	r0, #0
   16b56:	d0f2      	beq.n	16b3e <pow+0x256>
   16b58:	2200      	movs	r2, #0
   16b5a:	4b1e      	ldr	r3, [pc, #120]	; (16bd4 <pow+0x2ec>)
   16b5c:	4620      	mov	r0, r4
   16b5e:	4629      	mov	r1, r5
   16b60:	f001 f920 	bl	17da4 <__aeabi_dmul>
   16b64:	4604      	mov	r4, r0
   16b66:	460d      	mov	r5, r1
   16b68:	f000 fe52 	bl	17810 <rint>
   16b6c:	4602      	mov	r2, r0
   16b6e:	460b      	mov	r3, r1
   16b70:	4620      	mov	r0, r4
   16b72:	4629      	mov	r1, r5
   16b74:	f001 fb7e 	bl	18274 <__aeabi_dcmpeq>
   16b78:	b918      	cbnz	r0, 16b82 <pow+0x29a>
   16b7a:	4b14      	ldr	r3, [pc, #80]	; (16bcc <pow+0x2e4>)
   16b7c:	2200      	movs	r2, #0
   16b7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   16b82:	f999 8000 	ldrsb.w	r8, [r9]
   16b86:	e7da      	b.n	16b3e <pow+0x256>
   16b88:	f999 9000 	ldrsb.w	r9, [r9]
   16b8c:	4b0d      	ldr	r3, [pc, #52]	; (16bc4 <pow+0x2dc>)
   16b8e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   16b92:	2201      	movs	r2, #1
   16b94:	e9cd 6704 	strd	r6, r7, [sp, #16]
   16b98:	e9cd 4506 	strd	r4, r5, [sp, #24]
   16b9c:	9202      	str	r2, [sp, #8]
   16b9e:	9303      	str	r3, [sp, #12]
   16ba0:	f1b9 0f00 	cmp.w	r9, #0
   16ba4:	f43f af27 	beq.w	169f6 <pow+0x10e>
   16ba8:	2200      	movs	r2, #0
   16baa:	2300      	movs	r3, #0
   16bac:	4610      	mov	r0, r2
   16bae:	4619      	mov	r1, r3
   16bb0:	f001 fa22 	bl	17ff8 <__aeabi_ddiv>
   16bb4:	f1b9 0f02 	cmp.w	r9, #2
   16bb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   16bbc:	f43f af55 	beq.w	16a6a <pow+0x182>
   16bc0:	e71d      	b.n	169fe <pow+0x116>
   16bc2:	bf00      	nop
   16bc4:	0001e588 	.word	0x0001e588
   16bc8:	3ff00000 	.word	0x3ff00000
   16bcc:	fff00000 	.word	0xfff00000
   16bd0:	47efffff 	.word	0x47efffff
   16bd4:	3fe00000 	.word	0x3fe00000
   16bd8:	c7efffff 	.word	0xc7efffff
   16bdc:	7ff00000 	.word	0x7ff00000
   16be0:	200001db 	.word	0x200001db
   16be4:	00000000 	.word	0x00000000

00016be8 <__ieee754_pow>:
   16be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bec:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   16bf0:	ea57 0402 	orrs.w	r4, r7, r2
   16bf4:	b093      	sub	sp, #76	; 0x4c
   16bf6:	d037      	beq.n	16c68 <__ieee754_pow+0x80>
   16bf8:	4c67      	ldr	r4, [pc, #412]	; (16d98 <__ieee754_pow+0x1b0>)
   16bfa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   16bfe:	42a6      	cmp	r6, r4
   16c00:	4683      	mov	fp, r0
   16c02:	460d      	mov	r5, r1
   16c04:	dc29      	bgt.n	16c5a <__ieee754_pow+0x72>
   16c06:	469a      	mov	sl, r3
   16c08:	4696      	mov	lr, r2
   16c0a:	d025      	beq.n	16c58 <__ieee754_pow+0x70>
   16c0c:	42a7      	cmp	r7, r4
   16c0e:	dc24      	bgt.n	16c5a <__ieee754_pow+0x72>
   16c10:	4c61      	ldr	r4, [pc, #388]	; (16d98 <__ieee754_pow+0x1b0>)
   16c12:	42a7      	cmp	r7, r4
   16c14:	d079      	beq.n	16d0a <__ieee754_pow+0x122>
   16c16:	2d00      	cmp	r5, #0
   16c18:	4689      	mov	r9, r1
   16c1a:	4680      	mov	r8, r0
   16c1c:	e9cd 2300 	strd	r2, r3, [sp]
   16c20:	db77      	blt.n	16d12 <__ieee754_pow+0x12a>
   16c22:	2400      	movs	r4, #0
   16c24:	f1be 0f00 	cmp.w	lr, #0
   16c28:	d12c      	bne.n	16c84 <__ieee754_pow+0x9c>
   16c2a:	4b5b      	ldr	r3, [pc, #364]	; (16d98 <__ieee754_pow+0x1b0>)
   16c2c:	429f      	cmp	r7, r3
   16c2e:	f000 808b 	beq.w	16d48 <__ieee754_pow+0x160>
   16c32:	4b5a      	ldr	r3, [pc, #360]	; (16d9c <__ieee754_pow+0x1b4>)
   16c34:	429f      	cmp	r7, r3
   16c36:	d061      	beq.n	16cfc <__ieee754_pow+0x114>
   16c38:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
   16c3c:	f000 83ba 	beq.w	173b4 <__ieee754_pow+0x7cc>
   16c40:	4b57      	ldr	r3, [pc, #348]	; (16da0 <__ieee754_pow+0x1b8>)
   16c42:	459a      	cmp	sl, r3
   16c44:	d11e      	bne.n	16c84 <__ieee754_pow+0x9c>
   16c46:	2d00      	cmp	r5, #0
   16c48:	db1c      	blt.n	16c84 <__ieee754_pow+0x9c>
   16c4a:	4640      	mov	r0, r8
   16c4c:	4649      	mov	r1, r9
   16c4e:	b013      	add	sp, #76	; 0x4c
   16c50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c54:	f000 bd0e 	b.w	17674 <__ieee754_sqrt>
   16c58:	b158      	cbz	r0, 16c72 <__ieee754_pow+0x8a>
   16c5a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   16c5e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   16c62:	ea56 030b 	orrs.w	r3, r6, fp
   16c66:	d106      	bne.n	16c76 <__ieee754_pow+0x8e>
   16c68:	494c      	ldr	r1, [pc, #304]	; (16d9c <__ieee754_pow+0x1b4>)
   16c6a:	2000      	movs	r0, #0
   16c6c:	b013      	add	sp, #76	; 0x4c
   16c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c72:	42b7      	cmp	r7, r6
   16c74:	ddcc      	ble.n	16c10 <__ieee754_pow+0x28>
   16c76:	484b      	ldr	r0, [pc, #300]	; (16da4 <__ieee754_pow+0x1bc>)
   16c78:	b013      	add	sp, #76	; 0x4c
   16c7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c7e:	f000 bdc1 	b.w	17804 <nan>
   16c82:	2400      	movs	r4, #0
   16c84:	4640      	mov	r0, r8
   16c86:	4649      	mov	r1, r9
   16c88:	f000 fdb0 	bl	177ec <fabs>
   16c8c:	f1bb 0f00 	cmp.w	fp, #0
   16c90:	d119      	bne.n	16cc6 <__ieee754_pow+0xde>
   16c92:	b126      	cbz	r6, 16c9e <__ieee754_pow+0xb6>
   16c94:	4b41      	ldr	r3, [pc, #260]	; (16d9c <__ieee754_pow+0x1b4>)
   16c96:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   16c9a:	429a      	cmp	r2, r3
   16c9c:	d113      	bne.n	16cc6 <__ieee754_pow+0xde>
   16c9e:	f1ba 0f00 	cmp.w	sl, #0
   16ca2:	f2c0 83bc 	blt.w	1741e <__ieee754_pow+0x836>
   16ca6:	2d00      	cmp	r5, #0
   16ca8:	dae0      	bge.n	16c6c <__ieee754_pow+0x84>
   16caa:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   16cae:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   16cb2:	ea56 0304 	orrs.w	r3, r6, r4
   16cb6:	f000 848f 	beq.w	175d8 <__ieee754_pow+0x9f0>
   16cba:	2c01      	cmp	r4, #1
   16cbc:	d1d6      	bne.n	16c6c <__ieee754_pow+0x84>
   16cbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   16cc2:	4619      	mov	r1, r3
   16cc4:	e7d2      	b.n	16c6c <__ieee754_pow+0x84>
   16cc6:	0fed      	lsrs	r5, r5, #31
   16cc8:	3d01      	subs	r5, #1
   16cca:	ea54 0305 	orrs.w	r3, r4, r5
   16cce:	d04e      	beq.n	16d6e <__ieee754_pow+0x186>
   16cd0:	4b35      	ldr	r3, [pc, #212]	; (16da8 <__ieee754_pow+0x1c0>)
   16cd2:	429f      	cmp	r7, r3
   16cd4:	dd6e      	ble.n	16db4 <__ieee754_pow+0x1cc>
   16cd6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   16cda:	429f      	cmp	r7, r3
   16cdc:	f340 83e8 	ble.w	174b0 <__ieee754_pow+0x8c8>
   16ce0:	4b32      	ldr	r3, [pc, #200]	; (16dac <__ieee754_pow+0x1c4>)
   16ce2:	429e      	cmp	r6, r3
   16ce4:	dd4e      	ble.n	16d84 <__ieee754_pow+0x19c>
   16ce6:	f1ba 0f00 	cmp.w	sl, #0
   16cea:	dd4e      	ble.n	16d8a <__ieee754_pow+0x1a2>
   16cec:	a328      	add	r3, pc, #160	; (adr r3, 16d90 <__ieee754_pow+0x1a8>)
   16cee:	e9d3 2300 	ldrd	r2, r3, [r3]
   16cf2:	4610      	mov	r0, r2
   16cf4:	4619      	mov	r1, r3
   16cf6:	f001 f855 	bl	17da4 <__aeabi_dmul>
   16cfa:	e7b7      	b.n	16c6c <__ieee754_pow+0x84>
   16cfc:	f1ba 0f00 	cmp.w	sl, #0
   16d00:	f2c0 843c 	blt.w	1757c <__ieee754_pow+0x994>
   16d04:	4640      	mov	r0, r8
   16d06:	4649      	mov	r1, r9
   16d08:	e7b0      	b.n	16c6c <__ieee754_pow+0x84>
   16d0a:	f1be 0f00 	cmp.w	lr, #0
   16d0e:	d082      	beq.n	16c16 <__ieee754_pow+0x2e>
   16d10:	e7a3      	b.n	16c5a <__ieee754_pow+0x72>
   16d12:	4b27      	ldr	r3, [pc, #156]	; (16db0 <__ieee754_pow+0x1c8>)
   16d14:	429f      	cmp	r7, r3
   16d16:	dc28      	bgt.n	16d6a <__ieee754_pow+0x182>
   16d18:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   16d1c:	429f      	cmp	r7, r3
   16d1e:	dd80      	ble.n	16c22 <__ieee754_pow+0x3a>
   16d20:	153b      	asrs	r3, r7, #20
   16d22:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   16d26:	2b14      	cmp	r3, #20
   16d28:	f340 843e 	ble.w	175a8 <__ieee754_pow+0x9c0>
   16d2c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   16d30:	fa2e f203 	lsr.w	r2, lr, r3
   16d34:	fa02 f303 	lsl.w	r3, r2, r3
   16d38:	459e      	cmp	lr, r3
   16d3a:	f47f af72 	bne.w	16c22 <__ieee754_pow+0x3a>
   16d3e:	f002 0201 	and.w	r2, r2, #1
   16d42:	f1c2 0402 	rsb	r4, r2, #2
   16d46:	e76d      	b.n	16c24 <__ieee754_pow+0x3c>
   16d48:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   16d4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   16d50:	ea53 030b 	orrs.w	r3, r3, fp
   16d54:	d088      	beq.n	16c68 <__ieee754_pow+0x80>
   16d56:	4b15      	ldr	r3, [pc, #84]	; (16dac <__ieee754_pow+0x1c4>)
   16d58:	429e      	cmp	r6, r3
   16d5a:	f340 8332 	ble.w	173c2 <__ieee754_pow+0x7da>
   16d5e:	f1ba 0f00 	cmp.w	sl, #0
   16d62:	db12      	blt.n	16d8a <__ieee754_pow+0x1a2>
   16d64:	e9dd 0100 	ldrd	r0, r1, [sp]
   16d68:	e780      	b.n	16c6c <__ieee754_pow+0x84>
   16d6a:	2402      	movs	r4, #2
   16d6c:	e75a      	b.n	16c24 <__ieee754_pow+0x3c>
   16d6e:	4642      	mov	r2, r8
   16d70:	464b      	mov	r3, r9
   16d72:	4640      	mov	r0, r8
   16d74:	4649      	mov	r1, r9
   16d76:	f000 fe61 	bl	17a3c <__aeabi_dsub>
   16d7a:	4602      	mov	r2, r0
   16d7c:	460b      	mov	r3, r1
   16d7e:	f001 f93b 	bl	17ff8 <__aeabi_ddiv>
   16d82:	e773      	b.n	16c6c <__ieee754_pow+0x84>
   16d84:	f1ba 0f00 	cmp.w	sl, #0
   16d88:	dbb0      	blt.n	16cec <__ieee754_pow+0x104>
   16d8a:	2000      	movs	r0, #0
   16d8c:	2100      	movs	r1, #0
   16d8e:	e76d      	b.n	16c6c <__ieee754_pow+0x84>
   16d90:	8800759c 	.word	0x8800759c
   16d94:	7e37e43c 	.word	0x7e37e43c
   16d98:	7ff00000 	.word	0x7ff00000
   16d9c:	3ff00000 	.word	0x3ff00000
   16da0:	3fe00000 	.word	0x3fe00000
   16da4:	0001e6c4 	.word	0x0001e6c4
   16da8:	41e00000 	.word	0x41e00000
   16dac:	3fefffff 	.word	0x3fefffff
   16db0:	433fffff 	.word	0x433fffff
   16db4:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   16db8:	f04f 0200 	mov.w	r2, #0
   16dbc:	da05      	bge.n	16dca <__ieee754_pow+0x1e2>
   16dbe:	4bd4      	ldr	r3, [pc, #848]	; (17110 <__ieee754_pow+0x528>)
   16dc0:	f000 fff0 	bl	17da4 <__aeabi_dmul>
   16dc4:	f06f 0234 	mvn.w	r2, #52	; 0x34
   16dc8:	460e      	mov	r6, r1
   16dca:	1533      	asrs	r3, r6, #20
   16dcc:	4fd1      	ldr	r7, [pc, #836]	; (17114 <__ieee754_pow+0x52c>)
   16dce:	f3c6 0613 	ubfx	r6, r6, #0, #20
   16dd2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   16dd6:	4413      	add	r3, r2
   16dd8:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   16ddc:	42be      	cmp	r6, r7
   16dde:	461a      	mov	r2, r3
   16de0:	930d      	str	r3, [sp, #52]	; 0x34
   16de2:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   16de6:	f340 8321 	ble.w	1742c <__ieee754_pow+0x844>
   16dea:	4bcb      	ldr	r3, [pc, #812]	; (17118 <__ieee754_pow+0x530>)
   16dec:	429e      	cmp	r6, r3
   16dee:	f340 83fd 	ble.w	175ec <__ieee754_pow+0xa04>
   16df2:	4613      	mov	r3, r2
   16df4:	3301      	adds	r3, #1
   16df6:	930d      	str	r3, [sp, #52]	; 0x34
   16df8:	4bc8      	ldr	r3, [pc, #800]	; (1711c <__ieee754_pow+0x534>)
   16dfa:	2200      	movs	r2, #0
   16dfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   16e00:	2700      	movs	r7, #0
   16e02:	2600      	movs	r6, #0
   16e04:	e9cd 6708 	strd	r6, r7, [sp, #32]
   16e08:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   16e0c:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   16e10:	2700      	movs	r7, #0
   16e12:	4602      	mov	r2, r0
   16e14:	4653      	mov	r3, sl
   16e16:	4651      	mov	r1, sl
   16e18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   16e1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   16e20:	f000 fe0c 	bl	17a3c <__aeabi_dsub>
   16e24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   16e28:	4680      	mov	r8, r0
   16e2a:	4689      	mov	r9, r1
   16e2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   16e30:	f000 fe06 	bl	17a40 <__adddf3>
   16e34:	4602      	mov	r2, r0
   16e36:	460b      	mov	r3, r1
   16e38:	2000      	movs	r0, #0
   16e3a:	49b8      	ldr	r1, [pc, #736]	; (1711c <__ieee754_pow+0x534>)
   16e3c:	f001 f8dc 	bl	17ff8 <__aeabi_ddiv>
   16e40:	460a      	mov	r2, r1
   16e42:	4601      	mov	r1, r0
   16e44:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   16e48:	4613      	mov	r3, r2
   16e4a:	4649      	mov	r1, r9
   16e4c:	4602      	mov	r2, r0
   16e4e:	4640      	mov	r0, r8
   16e50:	f000 ffa8 	bl	17da4 <__aeabi_dmul>
   16e54:	ea4f 036a 	mov.w	r3, sl, asr #1
   16e58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   16e5c:	468c      	mov	ip, r1
   16e5e:	4683      	mov	fp, r0
   16e60:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   16e64:	e9cd bc04 	strd	fp, ip, [sp, #16]
   16e68:	46da      	mov	sl, fp
   16e6a:	468b      	mov	fp, r1
   16e6c:	19d9      	adds	r1, r3, r7
   16e6e:	2300      	movs	r3, #0
   16e70:	e9cd ab02 	strd	sl, fp, [sp, #8]
   16e74:	9302      	str	r3, [sp, #8]
   16e76:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   16e7a:	2000      	movs	r0, #0
   16e7c:	4606      	mov	r6, r0
   16e7e:	460f      	mov	r7, r1
   16e80:	4602      	mov	r2, r0
   16e82:	460b      	mov	r3, r1
   16e84:	4650      	mov	r0, sl
   16e86:	4659      	mov	r1, fp
   16e88:	f000 ff8c 	bl	17da4 <__aeabi_dmul>
   16e8c:	4602      	mov	r2, r0
   16e8e:	460b      	mov	r3, r1
   16e90:	4640      	mov	r0, r8
   16e92:	4649      	mov	r1, r9
   16e94:	f000 fdd2 	bl	17a3c <__aeabi_dsub>
   16e98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   16e9c:	4680      	mov	r8, r0
   16e9e:	4689      	mov	r9, r1
   16ea0:	4630      	mov	r0, r6
   16ea2:	4639      	mov	r1, r7
   16ea4:	f000 fdca 	bl	17a3c <__aeabi_dsub>
   16ea8:	4602      	mov	r2, r0
   16eaa:	460b      	mov	r3, r1
   16eac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   16eb0:	f000 fdc4 	bl	17a3c <__aeabi_dsub>
   16eb4:	4652      	mov	r2, sl
   16eb6:	465b      	mov	r3, fp
   16eb8:	f000 ff74 	bl	17da4 <__aeabi_dmul>
   16ebc:	4602      	mov	r2, r0
   16ebe:	460b      	mov	r3, r1
   16ec0:	4640      	mov	r0, r8
   16ec2:	4649      	mov	r1, r9
   16ec4:	f000 fdba 	bl	17a3c <__aeabi_dsub>
   16ec8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   16ecc:	f000 ff6a 	bl	17da4 <__aeabi_dmul>
   16ed0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   16ed4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   16ed8:	4632      	mov	r2, r6
   16eda:	463b      	mov	r3, r7
   16edc:	4630      	mov	r0, r6
   16ede:	4639      	mov	r1, r7
   16ee0:	f000 ff60 	bl	17da4 <__aeabi_dmul>
   16ee4:	a378      	add	r3, pc, #480	; (adr r3, 170c8 <__ieee754_pow+0x4e0>)
   16ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
   16eea:	4606      	mov	r6, r0
   16eec:	460f      	mov	r7, r1
   16eee:	f000 ff59 	bl	17da4 <__aeabi_dmul>
   16ef2:	a377      	add	r3, pc, #476	; (adr r3, 170d0 <__ieee754_pow+0x4e8>)
   16ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ef8:	f000 fda2 	bl	17a40 <__adddf3>
   16efc:	4632      	mov	r2, r6
   16efe:	463b      	mov	r3, r7
   16f00:	f000 ff50 	bl	17da4 <__aeabi_dmul>
   16f04:	a374      	add	r3, pc, #464	; (adr r3, 170d8 <__ieee754_pow+0x4f0>)
   16f06:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f0a:	f000 fd99 	bl	17a40 <__adddf3>
   16f0e:	4632      	mov	r2, r6
   16f10:	463b      	mov	r3, r7
   16f12:	f000 ff47 	bl	17da4 <__aeabi_dmul>
   16f16:	a372      	add	r3, pc, #456	; (adr r3, 170e0 <__ieee754_pow+0x4f8>)
   16f18:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f1c:	f000 fd90 	bl	17a40 <__adddf3>
   16f20:	4632      	mov	r2, r6
   16f22:	463b      	mov	r3, r7
   16f24:	f000 ff3e 	bl	17da4 <__aeabi_dmul>
   16f28:	a36f      	add	r3, pc, #444	; (adr r3, 170e8 <__ieee754_pow+0x500>)
   16f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f2e:	f000 fd87 	bl	17a40 <__adddf3>
   16f32:	4632      	mov	r2, r6
   16f34:	463b      	mov	r3, r7
   16f36:	f000 ff35 	bl	17da4 <__aeabi_dmul>
   16f3a:	a36d      	add	r3, pc, #436	; (adr r3, 170f0 <__ieee754_pow+0x508>)
   16f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f40:	f000 fd7e 	bl	17a40 <__adddf3>
   16f44:	4632      	mov	r2, r6
   16f46:	4680      	mov	r8, r0
   16f48:	4689      	mov	r9, r1
   16f4a:	463b      	mov	r3, r7
   16f4c:	4630      	mov	r0, r6
   16f4e:	4639      	mov	r1, r7
   16f50:	f000 ff28 	bl	17da4 <__aeabi_dmul>
   16f54:	4602      	mov	r2, r0
   16f56:	460b      	mov	r3, r1
   16f58:	4640      	mov	r0, r8
   16f5a:	4649      	mov	r1, r9
   16f5c:	f000 ff22 	bl	17da4 <__aeabi_dmul>
   16f60:	4652      	mov	r2, sl
   16f62:	4606      	mov	r6, r0
   16f64:	460f      	mov	r7, r1
   16f66:	465b      	mov	r3, fp
   16f68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   16f6c:	f000 fd68 	bl	17a40 <__adddf3>
   16f70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   16f74:	f000 ff16 	bl	17da4 <__aeabi_dmul>
   16f78:	4632      	mov	r2, r6
   16f7a:	463b      	mov	r3, r7
   16f7c:	f000 fd60 	bl	17a40 <__adddf3>
   16f80:	4652      	mov	r2, sl
   16f82:	4680      	mov	r8, r0
   16f84:	4689      	mov	r9, r1
   16f86:	465b      	mov	r3, fp
   16f88:	4650      	mov	r0, sl
   16f8a:	4659      	mov	r1, fp
   16f8c:	f000 ff0a 	bl	17da4 <__aeabi_dmul>
   16f90:	2200      	movs	r2, #0
   16f92:	4b63      	ldr	r3, [pc, #396]	; (17120 <__ieee754_pow+0x538>)
   16f94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   16f98:	f000 fd52 	bl	17a40 <__adddf3>
   16f9c:	4642      	mov	r2, r8
   16f9e:	464b      	mov	r3, r9
   16fa0:	f000 fd4e 	bl	17a40 <__adddf3>
   16fa4:	9802      	ldr	r0, [sp, #8]
   16fa6:	460f      	mov	r7, r1
   16fa8:	4606      	mov	r6, r0
   16faa:	4632      	mov	r2, r6
   16fac:	463b      	mov	r3, r7
   16fae:	4650      	mov	r0, sl
   16fb0:	4659      	mov	r1, fp
   16fb2:	f000 fef7 	bl	17da4 <__aeabi_dmul>
   16fb6:	2200      	movs	r2, #0
   16fb8:	4682      	mov	sl, r0
   16fba:	468b      	mov	fp, r1
   16fbc:	4b58      	ldr	r3, [pc, #352]	; (17120 <__ieee754_pow+0x538>)
   16fbe:	4630      	mov	r0, r6
   16fc0:	4639      	mov	r1, r7
   16fc2:	f000 fd3b 	bl	17a3c <__aeabi_dsub>
   16fc6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   16fca:	f000 fd37 	bl	17a3c <__aeabi_dsub>
   16fce:	4602      	mov	r2, r0
   16fd0:	460b      	mov	r3, r1
   16fd2:	4640      	mov	r0, r8
   16fd4:	4649      	mov	r1, r9
   16fd6:	f000 fd31 	bl	17a3c <__aeabi_dsub>
   16fda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   16fde:	f000 fee1 	bl	17da4 <__aeabi_dmul>
   16fe2:	4632      	mov	r2, r6
   16fe4:	4680      	mov	r8, r0
   16fe6:	4689      	mov	r9, r1
   16fe8:	463b      	mov	r3, r7
   16fea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   16fee:	f000 fed9 	bl	17da4 <__aeabi_dmul>
   16ff2:	4602      	mov	r2, r0
   16ff4:	460b      	mov	r3, r1
   16ff6:	4640      	mov	r0, r8
   16ff8:	4649      	mov	r1, r9
   16ffa:	f000 fd21 	bl	17a40 <__adddf3>
   16ffe:	4680      	mov	r8, r0
   17000:	4689      	mov	r9, r1
   17002:	4602      	mov	r2, r0
   17004:	460b      	mov	r3, r1
   17006:	4650      	mov	r0, sl
   17008:	4659      	mov	r1, fp
   1700a:	e9cd ab04 	strd	sl, fp, [sp, #16]
   1700e:	f000 fd17 	bl	17a40 <__adddf3>
   17012:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   17016:	a338      	add	r3, pc, #224	; (adr r3, 170f8 <__ieee754_pow+0x510>)
   17018:	e9d3 2300 	ldrd	r2, r3, [r3]
   1701c:	4650      	mov	r0, sl
   1701e:	460f      	mov	r7, r1
   17020:	f000 fec0 	bl	17da4 <__aeabi_dmul>
   17024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   17028:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1702c:	4639      	mov	r1, r7
   1702e:	4650      	mov	r0, sl
   17030:	f000 fd04 	bl	17a3c <__aeabi_dsub>
   17034:	4602      	mov	r2, r0
   17036:	460b      	mov	r3, r1
   17038:	4640      	mov	r0, r8
   1703a:	4649      	mov	r1, r9
   1703c:	f000 fcfe 	bl	17a3c <__aeabi_dsub>
   17040:	a32f      	add	r3, pc, #188	; (adr r3, 17100 <__ieee754_pow+0x518>)
   17042:	e9d3 2300 	ldrd	r2, r3, [r3]
   17046:	f000 fead 	bl	17da4 <__aeabi_dmul>
   1704a:	a32f      	add	r3, pc, #188	; (adr r3, 17108 <__ieee754_pow+0x520>)
   1704c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17050:	4680      	mov	r8, r0
   17052:	4689      	mov	r9, r1
   17054:	4650      	mov	r0, sl
   17056:	4639      	mov	r1, r7
   17058:	f000 fea4 	bl	17da4 <__aeabi_dmul>
   1705c:	4602      	mov	r2, r0
   1705e:	460b      	mov	r3, r1
   17060:	4640      	mov	r0, r8
   17062:	4649      	mov	r1, r9
   17064:	f000 fcec 	bl	17a40 <__adddf3>
   17068:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1706c:	f000 fce8 	bl	17a40 <__adddf3>
   17070:	4680      	mov	r8, r0
   17072:	980d      	ldr	r0, [sp, #52]	; 0x34
   17074:	4689      	mov	r9, r1
   17076:	f000 fe2f 	bl	17cd8 <__aeabi_i2d>
   1707a:	4642      	mov	r2, r8
   1707c:	4606      	mov	r6, r0
   1707e:	460f      	mov	r7, r1
   17080:	464b      	mov	r3, r9
   17082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   17086:	f000 fcdb 	bl	17a40 <__adddf3>
   1708a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1708e:	f000 fcd7 	bl	17a40 <__adddf3>
   17092:	4632      	mov	r2, r6
   17094:	463b      	mov	r3, r7
   17096:	f000 fcd3 	bl	17a40 <__adddf3>
   1709a:	4632      	mov	r2, r6
   1709c:	463b      	mov	r3, r7
   1709e:	4650      	mov	r0, sl
   170a0:	468b      	mov	fp, r1
   170a2:	f000 fccb 	bl	17a3c <__aeabi_dsub>
   170a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   170aa:	f000 fcc7 	bl	17a3c <__aeabi_dsub>
   170ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   170b2:	f000 fcc3 	bl	17a3c <__aeabi_dsub>
   170b6:	4602      	mov	r2, r0
   170b8:	460b      	mov	r3, r1
   170ba:	4640      	mov	r0, r8
   170bc:	4649      	mov	r1, r9
   170be:	f000 fcbd 	bl	17a3c <__aeabi_dsub>
   170c2:	4680      	mov	r8, r0
   170c4:	e02e      	b.n	17124 <__ieee754_pow+0x53c>
   170c6:	bf00      	nop
   170c8:	4a454eef 	.word	0x4a454eef
   170cc:	3fca7e28 	.word	0x3fca7e28
   170d0:	93c9db65 	.word	0x93c9db65
   170d4:	3fcd864a 	.word	0x3fcd864a
   170d8:	a91d4101 	.word	0xa91d4101
   170dc:	3fd17460 	.word	0x3fd17460
   170e0:	518f264d 	.word	0x518f264d
   170e4:	3fd55555 	.word	0x3fd55555
   170e8:	db6fabff 	.word	0xdb6fabff
   170ec:	3fdb6db6 	.word	0x3fdb6db6
   170f0:	33333303 	.word	0x33333303
   170f4:	3fe33333 	.word	0x3fe33333
   170f8:	e0000000 	.word	0xe0000000
   170fc:	3feec709 	.word	0x3feec709
   17100:	dc3a03fd 	.word	0xdc3a03fd
   17104:	3feec709 	.word	0x3feec709
   17108:	145b01f5 	.word	0x145b01f5
   1710c:	be3e2fe0 	.word	0xbe3e2fe0
   17110:	43400000 	.word	0x43400000
   17114:	0003988e 	.word	0x0003988e
   17118:	000bb679 	.word	0x000bb679
   1711c:	3ff00000 	.word	0x3ff00000
   17120:	40080000 	.word	0x40080000
   17124:	4689      	mov	r9, r1
   17126:	3c01      	subs	r4, #1
   17128:	ea54 0305 	orrs.w	r3, r4, r5
   1712c:	e9dd 0100 	ldrd	r0, r1, [sp]
   17130:	bf14      	ite	ne
   17132:	4cd9      	ldrne	r4, [pc, #868]	; (17498 <__ieee754_pow+0x8b0>)
   17134:	4cd9      	ldreq	r4, [pc, #868]	; (1749c <__ieee754_pow+0x8b4>)
   17136:	2300      	movs	r3, #0
   17138:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1713c:	4603      	mov	r3, r0
   1713e:	460c      	mov	r4, r1
   17140:	e9cd 3402 	strd	r3, r4, [sp, #8]
   17144:	2300      	movs	r3, #0
   17146:	9302      	str	r3, [sp, #8]
   17148:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   1714c:	4622      	mov	r2, r4
   1714e:	462b      	mov	r3, r5
   17150:	f000 fc74 	bl	17a3c <__aeabi_dsub>
   17154:	4652      	mov	r2, sl
   17156:	465b      	mov	r3, fp
   17158:	f000 fe24 	bl	17da4 <__aeabi_dmul>
   1715c:	e9dd 2300 	ldrd	r2, r3, [sp]
   17160:	4606      	mov	r6, r0
   17162:	460f      	mov	r7, r1
   17164:	4640      	mov	r0, r8
   17166:	4649      	mov	r1, r9
   17168:	f000 fe1c 	bl	17da4 <__aeabi_dmul>
   1716c:	4602      	mov	r2, r0
   1716e:	460b      	mov	r3, r1
   17170:	4630      	mov	r0, r6
   17172:	4639      	mov	r1, r7
   17174:	f000 fc64 	bl	17a40 <__adddf3>
   17178:	4622      	mov	r2, r4
   1717a:	4680      	mov	r8, r0
   1717c:	4689      	mov	r9, r1
   1717e:	462b      	mov	r3, r5
   17180:	4650      	mov	r0, sl
   17182:	4659      	mov	r1, fp
   17184:	e9cd 8900 	strd	r8, r9, [sp]
   17188:	f000 fe0c 	bl	17da4 <__aeabi_dmul>
   1718c:	460b      	mov	r3, r1
   1718e:	4602      	mov	r2, r0
   17190:	4606      	mov	r6, r0
   17192:	460f      	mov	r7, r1
   17194:	4640      	mov	r0, r8
   17196:	4649      	mov	r1, r9
   17198:	f000 fc52 	bl	17a40 <__adddf3>
   1719c:	4bc0      	ldr	r3, [pc, #768]	; (174a0 <__ieee754_pow+0x8b8>)
   1719e:	4299      	cmp	r1, r3
   171a0:	4604      	mov	r4, r0
   171a2:	460d      	mov	r5, r1
   171a4:	468a      	mov	sl, r1
   171a6:	f340 8116 	ble.w	173d6 <__ieee754_pow+0x7ee>
   171aa:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   171ae:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   171b2:	4303      	orrs	r3, r0
   171b4:	f040 81ea 	bne.w	1758c <__ieee754_pow+0x9a4>
   171b8:	a3a3      	add	r3, pc, #652	; (adr r3, 17448 <__ieee754_pow+0x860>)
   171ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   171be:	e9dd 0100 	ldrd	r0, r1, [sp]
   171c2:	f000 fc3d 	bl	17a40 <__adddf3>
   171c6:	4632      	mov	r2, r6
   171c8:	4680      	mov	r8, r0
   171ca:	4689      	mov	r9, r1
   171cc:	463b      	mov	r3, r7
   171ce:	4620      	mov	r0, r4
   171d0:	4629      	mov	r1, r5
   171d2:	f000 fc33 	bl	17a3c <__aeabi_dsub>
   171d6:	4602      	mov	r2, r0
   171d8:	460b      	mov	r3, r1
   171da:	4640      	mov	r0, r8
   171dc:	4649      	mov	r1, r9
   171de:	f001 f871 	bl	182c4 <__aeabi_dcmpgt>
   171e2:	2800      	cmp	r0, #0
   171e4:	f040 81d2 	bne.w	1758c <__ieee754_pow+0x9a4>
   171e8:	46a8      	mov	r8, r5
   171ea:	ea4f 5328 	mov.w	r3, r8, asr #20
   171ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   171f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   171f6:	fa42 f303 	asr.w	r3, r2, r3
   171fa:	4453      	add	r3, sl
   171fc:	f3c3 520a 	ubfx	r2, r3, #20, #11
   17200:	4da8      	ldr	r5, [pc, #672]	; (174a4 <__ieee754_pow+0x8bc>)
   17202:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   17206:	4115      	asrs	r5, r2
   17208:	f3c3 0413 	ubfx	r4, r3, #0, #20
   1720c:	ea23 0105 	bic.w	r1, r3, r5
   17210:	2000      	movs	r0, #0
   17212:	f1c2 0b14 	rsb	fp, r2, #20
   17216:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   1721a:	f1ba 0f00 	cmp.w	sl, #0
   1721e:	4602      	mov	r2, r0
   17220:	460b      	mov	r3, r1
   17222:	fa44 fb0b 	asr.w	fp, r4, fp
   17226:	4630      	mov	r0, r6
   17228:	4639      	mov	r1, r7
   1722a:	bfb8      	it	lt
   1722c:	f1cb 0b00 	rsblt	fp, fp, #0
   17230:	f000 fc04 	bl	17a3c <__aeabi_dsub>
   17234:	4602      	mov	r2, r0
   17236:	460b      	mov	r3, r1
   17238:	4606      	mov	r6, r0
   1723a:	460f      	mov	r7, r1
   1723c:	e9dd 0100 	ldrd	r0, r1, [sp]
   17240:	f000 fbfe 	bl	17a40 <__adddf3>
   17244:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   17248:	460d      	mov	r5, r1
   1724a:	2400      	movs	r4, #0
   1724c:	a380      	add	r3, pc, #512	; (adr r3, 17450 <__ieee754_pow+0x868>)
   1724e:	e9d3 2300 	ldrd	r2, r3, [r3]
   17252:	4620      	mov	r0, r4
   17254:	4629      	mov	r1, r5
   17256:	f000 fda5 	bl	17da4 <__aeabi_dmul>
   1725a:	4632      	mov	r2, r6
   1725c:	4680      	mov	r8, r0
   1725e:	4689      	mov	r9, r1
   17260:	463b      	mov	r3, r7
   17262:	4620      	mov	r0, r4
   17264:	4629      	mov	r1, r5
   17266:	f000 fbe9 	bl	17a3c <__aeabi_dsub>
   1726a:	4602      	mov	r2, r0
   1726c:	460b      	mov	r3, r1
   1726e:	e9dd 0100 	ldrd	r0, r1, [sp]
   17272:	f000 fbe3 	bl	17a3c <__aeabi_dsub>
   17276:	a378      	add	r3, pc, #480	; (adr r3, 17458 <__ieee754_pow+0x870>)
   17278:	e9d3 2300 	ldrd	r2, r3, [r3]
   1727c:	f000 fd92 	bl	17da4 <__aeabi_dmul>
   17280:	a377      	add	r3, pc, #476	; (adr r3, 17460 <__ieee754_pow+0x878>)
   17282:	e9d3 2300 	ldrd	r2, r3, [r3]
   17286:	4606      	mov	r6, r0
   17288:	460f      	mov	r7, r1
   1728a:	4620      	mov	r0, r4
   1728c:	4629      	mov	r1, r5
   1728e:	f000 fd89 	bl	17da4 <__aeabi_dmul>
   17292:	4602      	mov	r2, r0
   17294:	460b      	mov	r3, r1
   17296:	4630      	mov	r0, r6
   17298:	4639      	mov	r1, r7
   1729a:	f000 fbd1 	bl	17a40 <__adddf3>
   1729e:	4606      	mov	r6, r0
   172a0:	460f      	mov	r7, r1
   172a2:	4602      	mov	r2, r0
   172a4:	460b      	mov	r3, r1
   172a6:	4640      	mov	r0, r8
   172a8:	4649      	mov	r1, r9
   172aa:	f000 fbc9 	bl	17a40 <__adddf3>
   172ae:	4642      	mov	r2, r8
   172b0:	464b      	mov	r3, r9
   172b2:	4604      	mov	r4, r0
   172b4:	460d      	mov	r5, r1
   172b6:	f000 fbc1 	bl	17a3c <__aeabi_dsub>
   172ba:	4602      	mov	r2, r0
   172bc:	460b      	mov	r3, r1
   172be:	4630      	mov	r0, r6
   172c0:	4639      	mov	r1, r7
   172c2:	f000 fbbb 	bl	17a3c <__aeabi_dsub>
   172c6:	4622      	mov	r2, r4
   172c8:	4680      	mov	r8, r0
   172ca:	4689      	mov	r9, r1
   172cc:	462b      	mov	r3, r5
   172ce:	4620      	mov	r0, r4
   172d0:	4629      	mov	r1, r5
   172d2:	f000 fd67 	bl	17da4 <__aeabi_dmul>
   172d6:	a364      	add	r3, pc, #400	; (adr r3, 17468 <__ieee754_pow+0x880>)
   172d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   172dc:	4606      	mov	r6, r0
   172de:	460f      	mov	r7, r1
   172e0:	f000 fd60 	bl	17da4 <__aeabi_dmul>
   172e4:	a362      	add	r3, pc, #392	; (adr r3, 17470 <__ieee754_pow+0x888>)
   172e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   172ea:	f000 fba7 	bl	17a3c <__aeabi_dsub>
   172ee:	4632      	mov	r2, r6
   172f0:	463b      	mov	r3, r7
   172f2:	f000 fd57 	bl	17da4 <__aeabi_dmul>
   172f6:	a360      	add	r3, pc, #384	; (adr r3, 17478 <__ieee754_pow+0x890>)
   172f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   172fc:	f000 fba0 	bl	17a40 <__adddf3>
   17300:	4632      	mov	r2, r6
   17302:	463b      	mov	r3, r7
   17304:	f000 fd4e 	bl	17da4 <__aeabi_dmul>
   17308:	a35d      	add	r3, pc, #372	; (adr r3, 17480 <__ieee754_pow+0x898>)
   1730a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1730e:	f000 fb95 	bl	17a3c <__aeabi_dsub>
   17312:	4632      	mov	r2, r6
   17314:	463b      	mov	r3, r7
   17316:	f000 fd45 	bl	17da4 <__aeabi_dmul>
   1731a:	a35b      	add	r3, pc, #364	; (adr r3, 17488 <__ieee754_pow+0x8a0>)
   1731c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17320:	f000 fb8e 	bl	17a40 <__adddf3>
   17324:	4632      	mov	r2, r6
   17326:	463b      	mov	r3, r7
   17328:	f000 fd3c 	bl	17da4 <__aeabi_dmul>
   1732c:	4602      	mov	r2, r0
   1732e:	460b      	mov	r3, r1
   17330:	4620      	mov	r0, r4
   17332:	4629      	mov	r1, r5
   17334:	f000 fb82 	bl	17a3c <__aeabi_dsub>
   17338:	4606      	mov	r6, r0
   1733a:	460f      	mov	r7, r1
   1733c:	4602      	mov	r2, r0
   1733e:	460b      	mov	r3, r1
   17340:	4620      	mov	r0, r4
   17342:	4629      	mov	r1, r5
   17344:	f000 fd2e 	bl	17da4 <__aeabi_dmul>
   17348:	2200      	movs	r2, #0
   1734a:	e9cd 0100 	strd	r0, r1, [sp]
   1734e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17352:	4630      	mov	r0, r6
   17354:	4639      	mov	r1, r7
   17356:	f000 fb71 	bl	17a3c <__aeabi_dsub>
   1735a:	4602      	mov	r2, r0
   1735c:	460b      	mov	r3, r1
   1735e:	e9dd 0100 	ldrd	r0, r1, [sp]
   17362:	f000 fe49 	bl	17ff8 <__aeabi_ddiv>
   17366:	4642      	mov	r2, r8
   17368:	4606      	mov	r6, r0
   1736a:	460f      	mov	r7, r1
   1736c:	464b      	mov	r3, r9
   1736e:	4620      	mov	r0, r4
   17370:	4629      	mov	r1, r5
   17372:	f000 fd17 	bl	17da4 <__aeabi_dmul>
   17376:	4642      	mov	r2, r8
   17378:	464b      	mov	r3, r9
   1737a:	f000 fb61 	bl	17a40 <__adddf3>
   1737e:	4602      	mov	r2, r0
   17380:	460b      	mov	r3, r1
   17382:	4630      	mov	r0, r6
   17384:	4639      	mov	r1, r7
   17386:	f000 fb59 	bl	17a3c <__aeabi_dsub>
   1738a:	4622      	mov	r2, r4
   1738c:	462b      	mov	r3, r5
   1738e:	f000 fb55 	bl	17a3c <__aeabi_dsub>
   17392:	4602      	mov	r2, r0
   17394:	460b      	mov	r3, r1
   17396:	2000      	movs	r0, #0
   17398:	493f      	ldr	r1, [pc, #252]	; (17498 <__ieee754_pow+0x8b0>)
   1739a:	f000 fb4f 	bl	17a3c <__aeabi_dsub>
   1739e:	448a      	add	sl, r1
   173a0:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   173a4:	f2c0 8133 	blt.w	1760e <__ieee754_pow+0xa26>
   173a8:	4651      	mov	r1, sl
   173aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   173ae:	f000 fcf9 	bl	17da4 <__aeabi_dmul>
   173b2:	e45b      	b.n	16c6c <__ieee754_pow+0x84>
   173b4:	4642      	mov	r2, r8
   173b6:	4640      	mov	r0, r8
   173b8:	464b      	mov	r3, r9
   173ba:	4649      	mov	r1, r9
   173bc:	f000 fcf2 	bl	17da4 <__aeabi_dmul>
   173c0:	e454      	b.n	16c6c <__ieee754_pow+0x84>
   173c2:	f1ba 0f00 	cmp.w	sl, #0
   173c6:	f6bf ace0 	bge.w	16d8a <__ieee754_pow+0x1a2>
   173ca:	e9dd 3400 	ldrd	r3, r4, [sp]
   173ce:	4618      	mov	r0, r3
   173d0:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   173d4:	e44a      	b.n	16c6c <__ieee754_pow+0x84>
   173d6:	4b34      	ldr	r3, [pc, #208]	; (174a8 <__ieee754_pow+0x8c0>)
   173d8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   173dc:	4598      	cmp	r8, r3
   173de:	f340 80f2 	ble.w	175c6 <__ieee754_pow+0x9de>
   173e2:	4b32      	ldr	r3, [pc, #200]	; (174ac <__ieee754_pow+0x8c4>)
   173e4:	440b      	add	r3, r1
   173e6:	4303      	orrs	r3, r0
   173e8:	d10c      	bne.n	17404 <__ieee754_pow+0x81c>
   173ea:	4632      	mov	r2, r6
   173ec:	463b      	mov	r3, r7
   173ee:	f000 fb25 	bl	17a3c <__aeabi_dsub>
   173f2:	4602      	mov	r2, r0
   173f4:	460b      	mov	r3, r1
   173f6:	e9dd 0100 	ldrd	r0, r1, [sp]
   173fa:	f000 ff4f 	bl	1829c <__aeabi_dcmple>
   173fe:	2800      	cmp	r0, #0
   17400:	f43f aef3 	beq.w	171ea <__ieee754_pow+0x602>
   17404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   17408:	a321      	add	r3, pc, #132	; (adr r3, 17490 <__ieee754_pow+0x8a8>)
   1740a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1740e:	f000 fcc9 	bl	17da4 <__aeabi_dmul>
   17412:	a31f      	add	r3, pc, #124	; (adr r3, 17490 <__ieee754_pow+0x8a8>)
   17414:	e9d3 2300 	ldrd	r2, r3, [r3]
   17418:	f000 fcc4 	bl	17da4 <__aeabi_dmul>
   1741c:	e426      	b.n	16c6c <__ieee754_pow+0x84>
   1741e:	4602      	mov	r2, r0
   17420:	460b      	mov	r3, r1
   17422:	2000      	movs	r0, #0
   17424:	491c      	ldr	r1, [pc, #112]	; (17498 <__ieee754_pow+0x8b0>)
   17426:	f000 fde7 	bl	17ff8 <__aeabi_ddiv>
   1742a:	e43c      	b.n	16ca6 <__ieee754_pow+0xbe>
   1742c:	2200      	movs	r2, #0
   1742e:	2300      	movs	r3, #0
   17430:	e9cd 2308 	strd	r2, r3, [sp, #32]
   17434:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   17438:	4b17      	ldr	r3, [pc, #92]	; (17498 <__ieee754_pow+0x8b0>)
   1743a:	2200      	movs	r2, #0
   1743c:	2700      	movs	r7, #0
   1743e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17442:	e4e6      	b.n	16e12 <__ieee754_pow+0x22a>
   17444:	f3af 8000 	nop.w
   17448:	652b82fe 	.word	0x652b82fe
   1744c:	3c971547 	.word	0x3c971547
   17450:	00000000 	.word	0x00000000
   17454:	3fe62e43 	.word	0x3fe62e43
   17458:	fefa39ef 	.word	0xfefa39ef
   1745c:	3fe62e42 	.word	0x3fe62e42
   17460:	0ca86c39 	.word	0x0ca86c39
   17464:	be205c61 	.word	0xbe205c61
   17468:	72bea4d0 	.word	0x72bea4d0
   1746c:	3e663769 	.word	0x3e663769
   17470:	c5d26bf1 	.word	0xc5d26bf1
   17474:	3ebbbd41 	.word	0x3ebbbd41
   17478:	af25de2c 	.word	0xaf25de2c
   1747c:	3f11566a 	.word	0x3f11566a
   17480:	16bebd93 	.word	0x16bebd93
   17484:	3f66c16c 	.word	0x3f66c16c
   17488:	5555553e 	.word	0x5555553e
   1748c:	3fc55555 	.word	0x3fc55555
   17490:	c2f8f359 	.word	0xc2f8f359
   17494:	01a56e1f 	.word	0x01a56e1f
   17498:	3ff00000 	.word	0x3ff00000
   1749c:	bff00000 	.word	0xbff00000
   174a0:	408fffff 	.word	0x408fffff
   174a4:	000fffff 	.word	0x000fffff
   174a8:	4090cbff 	.word	0x4090cbff
   174ac:	3f6f3400 	.word	0x3f6f3400
   174b0:	4b6b      	ldr	r3, [pc, #428]	; (17660 <__ieee754_pow+0xa78>)
   174b2:	429e      	cmp	r6, r3
   174b4:	f77f ac66 	ble.w	16d84 <__ieee754_pow+0x19c>
   174b8:	4b6a      	ldr	r3, [pc, #424]	; (17664 <__ieee754_pow+0xa7c>)
   174ba:	429e      	cmp	r6, r3
   174bc:	f73f ac13 	bgt.w	16ce6 <__ieee754_pow+0xfe>
   174c0:	2200      	movs	r2, #0
   174c2:	4b68      	ldr	r3, [pc, #416]	; (17664 <__ieee754_pow+0xa7c>)
   174c4:	f000 faba 	bl	17a3c <__aeabi_dsub>
   174c8:	a357      	add	r3, pc, #348	; (adr r3, 17628 <__ieee754_pow+0xa40>)
   174ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   174ce:	4606      	mov	r6, r0
   174d0:	460f      	mov	r7, r1
   174d2:	f000 fc67 	bl	17da4 <__aeabi_dmul>
   174d6:	a356      	add	r3, pc, #344	; (adr r3, 17630 <__ieee754_pow+0xa48>)
   174d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   174dc:	4680      	mov	r8, r0
   174de:	4689      	mov	r9, r1
   174e0:	4630      	mov	r0, r6
   174e2:	4639      	mov	r1, r7
   174e4:	f000 fc5e 	bl	17da4 <__aeabi_dmul>
   174e8:	2200      	movs	r2, #0
   174ea:	4682      	mov	sl, r0
   174ec:	468b      	mov	fp, r1
   174ee:	4b5e      	ldr	r3, [pc, #376]	; (17668 <__ieee754_pow+0xa80>)
   174f0:	4630      	mov	r0, r6
   174f2:	4639      	mov	r1, r7
   174f4:	f000 fc56 	bl	17da4 <__aeabi_dmul>
   174f8:	4602      	mov	r2, r0
   174fa:	460b      	mov	r3, r1
   174fc:	a14e      	add	r1, pc, #312	; (adr r1, 17638 <__ieee754_pow+0xa50>)
   174fe:	e9d1 0100 	ldrd	r0, r1, [r1]
   17502:	f000 fa9b 	bl	17a3c <__aeabi_dsub>
   17506:	4632      	mov	r2, r6
   17508:	463b      	mov	r3, r7
   1750a:	f000 fc4b 	bl	17da4 <__aeabi_dmul>
   1750e:	4602      	mov	r2, r0
   17510:	460b      	mov	r3, r1
   17512:	2000      	movs	r0, #0
   17514:	4955      	ldr	r1, [pc, #340]	; (1766c <__ieee754_pow+0xa84>)
   17516:	f000 fa91 	bl	17a3c <__aeabi_dsub>
   1751a:	4632      	mov	r2, r6
   1751c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17520:	463b      	mov	r3, r7
   17522:	4630      	mov	r0, r6
   17524:	4639      	mov	r1, r7
   17526:	f000 fc3d 	bl	17da4 <__aeabi_dmul>
   1752a:	4602      	mov	r2, r0
   1752c:	460b      	mov	r3, r1
   1752e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   17532:	f000 fc37 	bl	17da4 <__aeabi_dmul>
   17536:	a342      	add	r3, pc, #264	; (adr r3, 17640 <__ieee754_pow+0xa58>)
   17538:	e9d3 2300 	ldrd	r2, r3, [r3]
   1753c:	f000 fc32 	bl	17da4 <__aeabi_dmul>
   17540:	4602      	mov	r2, r0
   17542:	460b      	mov	r3, r1
   17544:	4650      	mov	r0, sl
   17546:	4659      	mov	r1, fp
   17548:	f000 fa78 	bl	17a3c <__aeabi_dsub>
   1754c:	4602      	mov	r2, r0
   1754e:	460b      	mov	r3, r1
   17550:	4606      	mov	r6, r0
   17552:	460f      	mov	r7, r1
   17554:	4640      	mov	r0, r8
   17556:	4649      	mov	r1, r9
   17558:	f000 fa72 	bl	17a40 <__adddf3>
   1755c:	4642      	mov	r2, r8
   1755e:	464b      	mov	r3, r9
   17560:	2000      	movs	r0, #0
   17562:	4682      	mov	sl, r0
   17564:	468b      	mov	fp, r1
   17566:	f000 fa69 	bl	17a3c <__aeabi_dsub>
   1756a:	4602      	mov	r2, r0
   1756c:	460b      	mov	r3, r1
   1756e:	4630      	mov	r0, r6
   17570:	4639      	mov	r1, r7
   17572:	f000 fa63 	bl	17a3c <__aeabi_dsub>
   17576:	4680      	mov	r8, r0
   17578:	4689      	mov	r9, r1
   1757a:	e5d4      	b.n	17126 <__ieee754_pow+0x53e>
   1757c:	4642      	mov	r2, r8
   1757e:	464b      	mov	r3, r9
   17580:	2000      	movs	r0, #0
   17582:	4938      	ldr	r1, [pc, #224]	; (17664 <__ieee754_pow+0xa7c>)
   17584:	f000 fd38 	bl	17ff8 <__aeabi_ddiv>
   17588:	f7ff bb70 	b.w	16c6c <__ieee754_pow+0x84>
   1758c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   17590:	a32d      	add	r3, pc, #180	; (adr r3, 17648 <__ieee754_pow+0xa60>)
   17592:	e9d3 2300 	ldrd	r2, r3, [r3]
   17596:	f000 fc05 	bl	17da4 <__aeabi_dmul>
   1759a:	a32b      	add	r3, pc, #172	; (adr r3, 17648 <__ieee754_pow+0xa60>)
   1759c:	e9d3 2300 	ldrd	r2, r3, [r3]
   175a0:	f000 fc00 	bl	17da4 <__aeabi_dmul>
   175a4:	f7ff bb62 	b.w	16c6c <__ieee754_pow+0x84>
   175a8:	f1be 0f00 	cmp.w	lr, #0
   175ac:	f47f ab69 	bne.w	16c82 <__ieee754_pow+0x9a>
   175b0:	f1c3 0314 	rsb	r3, r3, #20
   175b4:	fa47 f203 	asr.w	r2, r7, r3
   175b8:	fa02 f303 	lsl.w	r3, r2, r3
   175bc:	429f      	cmp	r7, r3
   175be:	d02a      	beq.n	17616 <__ieee754_pow+0xa2e>
   175c0:	4674      	mov	r4, lr
   175c2:	f7ff bb36 	b.w	16c32 <__ieee754_pow+0x4a>
   175c6:	4b29      	ldr	r3, [pc, #164]	; (1766c <__ieee754_pow+0xa84>)
   175c8:	4598      	cmp	r8, r3
   175ca:	f73f ae0e 	bgt.w	171ea <__ieee754_pow+0x602>
   175ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   175d2:	4692      	mov	sl, r2
   175d4:	4693      	mov	fp, r2
   175d6:	e638      	b.n	1724a <__ieee754_pow+0x662>
   175d8:	4602      	mov	r2, r0
   175da:	460b      	mov	r3, r1
   175dc:	f000 fa2e 	bl	17a3c <__aeabi_dsub>
   175e0:	4602      	mov	r2, r0
   175e2:	460b      	mov	r3, r1
   175e4:	f000 fd08 	bl	17ff8 <__aeabi_ddiv>
   175e8:	f7ff bb40 	b.w	16c6c <__ieee754_pow+0x84>
   175ec:	a318      	add	r3, pc, #96	; (adr r3, 17650 <__ieee754_pow+0xa68>)
   175ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   175f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
   175f6:	a318      	add	r3, pc, #96	; (adr r3, 17658 <__ieee754_pow+0xa70>)
   175f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   175fc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   17600:	4b1b      	ldr	r3, [pc, #108]	; (17670 <__ieee754_pow+0xa88>)
   17602:	2200      	movs	r2, #0
   17604:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   17608:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1760c:	e401      	b.n	16e12 <__ieee754_pow+0x22a>
   1760e:	465a      	mov	r2, fp
   17610:	f000 f98a 	bl	17928 <scalbn>
   17614:	e6c9      	b.n	173aa <__ieee754_pow+0x7c2>
   17616:	f002 0201 	and.w	r2, r2, #1
   1761a:	f1c2 0402 	rsb	r4, r2, #2
   1761e:	f7ff bb08 	b.w	16c32 <__ieee754_pow+0x4a>
   17622:	bf00      	nop
   17624:	f3af 8000 	nop.w
   17628:	60000000 	.word	0x60000000
   1762c:	3ff71547 	.word	0x3ff71547
   17630:	f85ddf44 	.word	0xf85ddf44
   17634:	3e54ae0b 	.word	0x3e54ae0b
   17638:	55555555 	.word	0x55555555
   1763c:	3fd55555 	.word	0x3fd55555
   17640:	652b82fe 	.word	0x652b82fe
   17644:	3ff71547 	.word	0x3ff71547
   17648:	8800759c 	.word	0x8800759c
   1764c:	7e37e43c 	.word	0x7e37e43c
   17650:	40000000 	.word	0x40000000
   17654:	3fe2b803 	.word	0x3fe2b803
   17658:	43cfd006 	.word	0x43cfd006
   1765c:	3e4cfdeb 	.word	0x3e4cfdeb
   17660:	3feffffe 	.word	0x3feffffe
   17664:	3ff00000 	.word	0x3ff00000
   17668:	3fd00000 	.word	0x3fd00000
   1766c:	3fe00000 	.word	0x3fe00000
   17670:	3ff80000 	.word	0x3ff80000

00017674 <__ieee754_sqrt>:
   17674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17678:	4f5b      	ldr	r7, [pc, #364]	; (177e8 <__ieee754_sqrt+0x174>)
   1767a:	438f      	bics	r7, r1
   1767c:	4605      	mov	r5, r0
   1767e:	460c      	mov	r4, r1
   17680:	f000 8092 	beq.w	177a8 <__ieee754_sqrt+0x134>
   17684:	2900      	cmp	r1, #0
   17686:	460b      	mov	r3, r1
   17688:	4602      	mov	r2, r0
   1768a:	dd6f      	ble.n	1776c <__ieee754_sqrt+0xf8>
   1768c:	150f      	asrs	r7, r1, #20
   1768e:	d07b      	beq.n	17788 <__ieee754_sqrt+0x114>
   17690:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   17694:	f3c3 0313 	ubfx	r3, r3, #0, #20
   17698:	07f8      	lsls	r0, r7, #31
   1769a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1769e:	d45c      	bmi.n	1775a <__ieee754_sqrt+0xe6>
   176a0:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   176a4:	2600      	movs	r6, #0
   176a6:	440b      	add	r3, r1
   176a8:	107f      	asrs	r7, r7, #1
   176aa:	0052      	lsls	r2, r2, #1
   176ac:	46b6      	mov	lr, r6
   176ae:	2016      	movs	r0, #22
   176b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   176b4:	eb0e 0401 	add.w	r4, lr, r1
   176b8:	429c      	cmp	r4, r3
   176ba:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   176be:	ea4f 0242 	mov.w	r2, r2, lsl #1
   176c2:	dc03      	bgt.n	176cc <__ieee754_sqrt+0x58>
   176c4:	1b1b      	subs	r3, r3, r4
   176c6:	eb04 0e01 	add.w	lr, r4, r1
   176ca:	440e      	add	r6, r1
   176cc:	3801      	subs	r0, #1
   176ce:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   176d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
   176d6:	d1ed      	bne.n	176b4 <__ieee754_sqrt+0x40>
   176d8:	4684      	mov	ip, r0
   176da:	2420      	movs	r4, #32
   176dc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   176e0:	e009      	b.n	176f6 <__ieee754_sqrt+0x82>
   176e2:	d020      	beq.n	17726 <__ieee754_sqrt+0xb2>
   176e4:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   176e8:	3c01      	subs	r4, #1
   176ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
   176ee:	442b      	add	r3, r5
   176f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
   176f4:	d020      	beq.n	17738 <__ieee754_sqrt+0xc4>
   176f6:	4573      	cmp	r3, lr
   176f8:	eb01 050c 	add.w	r5, r1, ip
   176fc:	ddf1      	ble.n	176e2 <__ieee754_sqrt+0x6e>
   176fe:	2d00      	cmp	r5, #0
   17700:	eb05 0c01 	add.w	ip, r5, r1
   17704:	db09      	blt.n	1771a <__ieee754_sqrt+0xa6>
   17706:	46f0      	mov	r8, lr
   17708:	4295      	cmp	r5, r2
   1770a:	eba3 030e 	sub.w	r3, r3, lr
   1770e:	d900      	bls.n	17712 <__ieee754_sqrt+0x9e>
   17710:	3b01      	subs	r3, #1
   17712:	1b52      	subs	r2, r2, r5
   17714:	4408      	add	r0, r1
   17716:	46c6      	mov	lr, r8
   17718:	e7e4      	b.n	176e4 <__ieee754_sqrt+0x70>
   1771a:	f1bc 0f00 	cmp.w	ip, #0
   1771e:	dbf2      	blt.n	17706 <__ieee754_sqrt+0x92>
   17720:	f10e 0801 	add.w	r8, lr, #1
   17724:	e7f0      	b.n	17708 <__ieee754_sqrt+0x94>
   17726:	4295      	cmp	r5, r2
   17728:	d8dc      	bhi.n	176e4 <__ieee754_sqrt+0x70>
   1772a:	2d00      	cmp	r5, #0
   1772c:	eb05 0c01 	add.w	ip, r5, r1
   17730:	db44      	blt.n	177bc <__ieee754_sqrt+0x148>
   17732:	4698      	mov	r8, r3
   17734:	2300      	movs	r3, #0
   17736:	e7ec      	b.n	17712 <__ieee754_sqrt+0x9e>
   17738:	4313      	orrs	r3, r2
   1773a:	d113      	bne.n	17764 <__ieee754_sqrt+0xf0>
   1773c:	0840      	lsrs	r0, r0, #1
   1773e:	1073      	asrs	r3, r6, #1
   17740:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   17744:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   17748:	07f2      	lsls	r2, r6, #31
   1774a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   1774e:	bf48      	it	mi
   17750:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   17754:	4649      	mov	r1, r9
   17756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1775a:	005b      	lsls	r3, r3, #1
   1775c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   17760:	0052      	lsls	r2, r2, #1
   17762:	e79d      	b.n	176a0 <__ieee754_sqrt+0x2c>
   17764:	1c41      	adds	r1, r0, #1
   17766:	d02d      	beq.n	177c4 <__ieee754_sqrt+0x150>
   17768:	3001      	adds	r0, #1
   1776a:	e7e7      	b.n	1773c <__ieee754_sqrt+0xc8>
   1776c:	4606      	mov	r6, r0
   1776e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   17772:	433e      	orrs	r6, r7
   17774:	d0ef      	beq.n	17756 <__ieee754_sqrt+0xe2>
   17776:	bb69      	cbnz	r1, 177d4 <__ieee754_sqrt+0x160>
   17778:	460f      	mov	r7, r1
   1777a:	0ad3      	lsrs	r3, r2, #11
   1777c:	3f15      	subs	r7, #21
   1777e:	0552      	lsls	r2, r2, #21
   17780:	2b00      	cmp	r3, #0
   17782:	d0fa      	beq.n	1777a <__ieee754_sqrt+0x106>
   17784:	02de      	lsls	r6, r3, #11
   17786:	d420      	bmi.n	177ca <__ieee754_sqrt+0x156>
   17788:	2400      	movs	r4, #0
   1778a:	e000      	b.n	1778e <__ieee754_sqrt+0x11a>
   1778c:	4604      	mov	r4, r0
   1778e:	005b      	lsls	r3, r3, #1
   17790:	02dd      	lsls	r5, r3, #11
   17792:	f104 0001 	add.w	r0, r4, #1
   17796:	d5f9      	bpl.n	1778c <__ieee754_sqrt+0x118>
   17798:	f1c0 0120 	rsb	r1, r0, #32
   1779c:	fa22 f101 	lsr.w	r1, r2, r1
   177a0:	430b      	orrs	r3, r1
   177a2:	1b3f      	subs	r7, r7, r4
   177a4:	4082      	lsls	r2, r0
   177a6:	e773      	b.n	17690 <__ieee754_sqrt+0x1c>
   177a8:	4602      	mov	r2, r0
   177aa:	460b      	mov	r3, r1
   177ac:	f000 fafa 	bl	17da4 <__aeabi_dmul>
   177b0:	462a      	mov	r2, r5
   177b2:	4623      	mov	r3, r4
   177b4:	f000 f944 	bl	17a40 <__adddf3>
   177b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   177bc:	f1bc 0f00 	cmp.w	ip, #0
   177c0:	daae      	bge.n	17720 <__ieee754_sqrt+0xac>
   177c2:	e7b6      	b.n	17732 <__ieee754_sqrt+0xbe>
   177c4:	3601      	adds	r6, #1
   177c6:	4620      	mov	r0, r4
   177c8:	e7b9      	b.n	1773e <__ieee754_sqrt+0xca>
   177ca:	2000      	movs	r0, #0
   177cc:	2120      	movs	r1, #32
   177ce:	f04f 34ff 	mov.w	r4, #4294967295
   177d2:	e7e3      	b.n	1779c <__ieee754_sqrt+0x128>
   177d4:	4602      	mov	r2, r0
   177d6:	460b      	mov	r3, r1
   177d8:	f000 f930 	bl	17a3c <__aeabi_dsub>
   177dc:	4602      	mov	r2, r0
   177de:	460b      	mov	r3, r1
   177e0:	f000 fc0a 	bl	17ff8 <__aeabi_ddiv>
   177e4:	e7b7      	b.n	17756 <__ieee754_sqrt+0xe2>
   177e6:	bf00      	nop
   177e8:	7ff00000 	.word	0x7ff00000

000177ec <fabs>:
   177ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   177f0:	4770      	bx	lr
   177f2:	bf00      	nop

000177f4 <finite>:
   177f4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   177f8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   177fc:	0fc0      	lsrs	r0, r0, #31
   177fe:	4770      	bx	lr

00017800 <matherr>:
   17800:	2000      	movs	r0, #0
   17802:	4770      	bx	lr

00017804 <nan>:
   17804:	2000      	movs	r0, #0
   17806:	4901      	ldr	r1, [pc, #4]	; (1780c <nan+0x8>)
   17808:	4770      	bx	lr
   1780a:	bf00      	nop
   1780c:	7ff80000 	.word	0x7ff80000

00017810 <rint>:
   17810:	b5f0      	push	{r4, r5, r6, r7, lr}
   17812:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   17816:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   1781a:	2e13      	cmp	r6, #19
   1781c:	b083      	sub	sp, #12
   1781e:	4602      	mov	r2, r0
   17820:	460b      	mov	r3, r1
   17822:	460c      	mov	r4, r1
   17824:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   17828:	4607      	mov	r7, r0
   1782a:	dc2e      	bgt.n	1788a <rint+0x7a>
   1782c:	2e00      	cmp	r6, #0
   1782e:	db49      	blt.n	178c4 <rint+0xb4>
   17830:	493a      	ldr	r1, [pc, #232]	; (1791c <rint+0x10c>)
   17832:	4131      	asrs	r1, r6
   17834:	ea03 0001 	and.w	r0, r3, r1
   17838:	4310      	orrs	r0, r2
   1783a:	d02b      	beq.n	17894 <rint+0x84>
   1783c:	0849      	lsrs	r1, r1, #1
   1783e:	400b      	ands	r3, r1
   17840:	ea53 0702 	orrs.w	r7, r3, r2
   17844:	d00c      	beq.n	17860 <rint+0x50>
   17846:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1784a:	2e13      	cmp	r6, #19
   1784c:	ea24 0101 	bic.w	r1, r4, r1
   17850:	fa43 f406 	asr.w	r4, r3, r6
   17854:	ea44 0401 	orr.w	r4, r4, r1
   17858:	bf0c      	ite	eq
   1785a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   1785e:	2700      	movne	r7, #0
   17860:	4b2f      	ldr	r3, [pc, #188]	; (17920 <rint+0x110>)
   17862:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   17866:	4621      	mov	r1, r4
   17868:	e9d5 4500 	ldrd	r4, r5, [r5]
   1786c:	4638      	mov	r0, r7
   1786e:	4622      	mov	r2, r4
   17870:	462b      	mov	r3, r5
   17872:	f000 f8e5 	bl	17a40 <__adddf3>
   17876:	e9cd 0100 	strd	r0, r1, [sp]
   1787a:	4622      	mov	r2, r4
   1787c:	462b      	mov	r3, r5
   1787e:	e9dd 0100 	ldrd	r0, r1, [sp]
   17882:	f000 f8db 	bl	17a3c <__aeabi_dsub>
   17886:	b003      	add	sp, #12
   17888:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1788a:	2e33      	cmp	r6, #51	; 0x33
   1788c:	dd06      	ble.n	1789c <rint+0x8c>
   1788e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   17892:	d040      	beq.n	17916 <rint+0x106>
   17894:	4610      	mov	r0, r2
   17896:	4619      	mov	r1, r3
   17898:	b003      	add	sp, #12
   1789a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1789c:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   178a0:	f04f 31ff 	mov.w	r1, #4294967295
   178a4:	fa21 f10e 	lsr.w	r1, r1, lr
   178a8:	4208      	tst	r0, r1
   178aa:	d0f3      	beq.n	17894 <rint+0x84>
   178ac:	0849      	lsrs	r1, r1, #1
   178ae:	4208      	tst	r0, r1
   178b0:	d0d6      	beq.n	17860 <rint+0x50>
   178b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   178b6:	ea20 0101 	bic.w	r1, r0, r1
   178ba:	fa43 fe0e 	asr.w	lr, r3, lr
   178be:	ea4e 0701 	orr.w	r7, lr, r1
   178c2:	e7cd      	b.n	17860 <rint+0x50>
   178c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   178c8:	4301      	orrs	r1, r0
   178ca:	d0e3      	beq.n	17894 <rint+0x84>
   178cc:	f3c3 0113 	ubfx	r1, r3, #0, #20
   178d0:	4e13      	ldr	r6, [pc, #76]	; (17920 <rint+0x110>)
   178d2:	4301      	orrs	r1, r0
   178d4:	f1c1 0c00 	rsb	ip, r1, #0
   178d8:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   178dc:	e9d6 6700 	ldrd	r6, r7, [r6]
   178e0:	ea4c 0c01 	orr.w	ip, ip, r1
   178e4:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   178e8:	0c5c      	lsrs	r4, r3, #17
   178ea:	0464      	lsls	r4, r4, #17
   178ec:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   178f0:	ea43 0104 	orr.w	r1, r3, r4
   178f4:	4632      	mov	r2, r6
   178f6:	463b      	mov	r3, r7
   178f8:	f000 f8a2 	bl	17a40 <__adddf3>
   178fc:	e9cd 0100 	strd	r0, r1, [sp]
   17900:	4632      	mov	r2, r6
   17902:	463b      	mov	r3, r7
   17904:	e9dd 0100 	ldrd	r0, r1, [sp]
   17908:	f000 f898 	bl	17a3c <__aeabi_dsub>
   1790c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   17910:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   17914:	e7c0      	b.n	17898 <rint+0x88>
   17916:	f000 f893 	bl	17a40 <__adddf3>
   1791a:	e7bd      	b.n	17898 <rint+0x88>
   1791c:	000fffff 	.word	0x000fffff
   17920:	0001e590 	.word	0x0001e590
   17924:	00000000 	.word	0x00000000

00017928 <scalbn>:
   17928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1792a:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1792e:	4604      	mov	r4, r0
   17930:	460d      	mov	r5, r1
   17932:	460b      	mov	r3, r1
   17934:	4617      	mov	r7, r2
   17936:	bb0e      	cbnz	r6, 1797c <scalbn+0x54>
   17938:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1793c:	4303      	orrs	r3, r0
   1793e:	4686      	mov	lr, r0
   17940:	d025      	beq.n	1798e <scalbn+0x66>
   17942:	2200      	movs	r2, #0
   17944:	4b34      	ldr	r3, [pc, #208]	; (17a18 <scalbn+0xf0>)
   17946:	f000 fa2d 	bl	17da4 <__aeabi_dmul>
   1794a:	4a34      	ldr	r2, [pc, #208]	; (17a1c <scalbn+0xf4>)
   1794c:	4297      	cmp	r7, r2
   1794e:	4604      	mov	r4, r0
   17950:	460d      	mov	r5, r1
   17952:	460b      	mov	r3, r1
   17954:	db2a      	blt.n	179ac <scalbn+0x84>
   17956:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1795a:	3e36      	subs	r6, #54	; 0x36
   1795c:	443e      	add	r6, r7
   1795e:	f240 72fe 	movw	r2, #2046	; 0x7fe
   17962:	4296      	cmp	r6, r2
   17964:	dc28      	bgt.n	179b8 <scalbn+0x90>
   17966:	2e00      	cmp	r6, #0
   17968:	dd12      	ble.n	17990 <scalbn+0x68>
   1796a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1796e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   17972:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   17976:	4620      	mov	r0, r4
   17978:	4629      	mov	r1, r5
   1797a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1797c:	f240 72ff 	movw	r2, #2047	; 0x7ff
   17980:	4296      	cmp	r6, r2
   17982:	d1eb      	bne.n	1795c <scalbn+0x34>
   17984:	4602      	mov	r2, r0
   17986:	460b      	mov	r3, r1
   17988:	f000 f85a 	bl	17a40 <__adddf3>
   1798c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1798e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17990:	f116 0f35 	cmn.w	r6, #53	; 0x35
   17994:	da1d      	bge.n	179d2 <scalbn+0xaa>
   17996:	f24c 3350 	movw	r3, #50000	; 0xc350
   1799a:	429f      	cmp	r7, r3
   1799c:	4622      	mov	r2, r4
   1799e:	462b      	mov	r3, r5
   179a0:	dc25      	bgt.n	179ee <scalbn+0xc6>
   179a2:	a119      	add	r1, pc, #100	; (adr r1, 17a08 <scalbn+0xe0>)
   179a4:	e9d1 0100 	ldrd	r0, r1, [r1]
   179a8:	f000 f83c 	bl	17a24 <copysign>
   179ac:	a316      	add	r3, pc, #88	; (adr r3, 17a08 <scalbn+0xe0>)
   179ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   179b2:	f000 f9f7 	bl	17da4 <__aeabi_dmul>
   179b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   179b8:	4622      	mov	r2, r4
   179ba:	462b      	mov	r3, r5
   179bc:	a114      	add	r1, pc, #80	; (adr r1, 17a10 <scalbn+0xe8>)
   179be:	e9d1 0100 	ldrd	r0, r1, [r1]
   179c2:	f000 f82f 	bl	17a24 <copysign>
   179c6:	a312      	add	r3, pc, #72	; (adr r3, 17a10 <scalbn+0xe8>)
   179c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   179cc:	f000 f9ea 	bl	17da4 <__aeabi_dmul>
   179d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   179d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   179d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   179da:	3636      	adds	r6, #54	; 0x36
   179dc:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   179e0:	4620      	mov	r0, r4
   179e2:	4629      	mov	r1, r5
   179e4:	2200      	movs	r2, #0
   179e6:	4b0e      	ldr	r3, [pc, #56]	; (17a20 <scalbn+0xf8>)
   179e8:	f000 f9dc 	bl	17da4 <__aeabi_dmul>
   179ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   179ee:	a108      	add	r1, pc, #32	; (adr r1, 17a10 <scalbn+0xe8>)
   179f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   179f4:	f000 f816 	bl	17a24 <copysign>
   179f8:	a305      	add	r3, pc, #20	; (adr r3, 17a10 <scalbn+0xe8>)
   179fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   179fe:	f000 f9d1 	bl	17da4 <__aeabi_dmul>
   17a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17a04:	f3af 8000 	nop.w
   17a08:	c2f8f359 	.word	0xc2f8f359
   17a0c:	01a56e1f 	.word	0x01a56e1f
   17a10:	8800759c 	.word	0x8800759c
   17a14:	7e37e43c 	.word	0x7e37e43c
   17a18:	43500000 	.word	0x43500000
   17a1c:	ffff3cb0 	.word	0xffff3cb0
   17a20:	3c900000 	.word	0x3c900000

00017a24 <copysign>:
   17a24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   17a28:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   17a2c:	ea42 0103 	orr.w	r1, r2, r3
   17a30:	4770      	bx	lr
   17a32:	bf00      	nop

00017a34 <__aeabi_drsub>:
   17a34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   17a38:	e002      	b.n	17a40 <__adddf3>
   17a3a:	bf00      	nop

00017a3c <__aeabi_dsub>:
   17a3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00017a40 <__adddf3>:
   17a40:	b530      	push	{r4, r5, lr}
   17a42:	ea4f 0441 	mov.w	r4, r1, lsl #1
   17a46:	ea4f 0543 	mov.w	r5, r3, lsl #1
   17a4a:	ea94 0f05 	teq	r4, r5
   17a4e:	bf08      	it	eq
   17a50:	ea90 0f02 	teqeq	r0, r2
   17a54:	bf1f      	itttt	ne
   17a56:	ea54 0c00 	orrsne.w	ip, r4, r0
   17a5a:	ea55 0c02 	orrsne.w	ip, r5, r2
   17a5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   17a62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17a66:	f000 80e2 	beq.w	17c2e <__adddf3+0x1ee>
   17a6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   17a6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   17a72:	bfb8      	it	lt
   17a74:	426d      	neglt	r5, r5
   17a76:	dd0c      	ble.n	17a92 <__adddf3+0x52>
   17a78:	442c      	add	r4, r5
   17a7a:	ea80 0202 	eor.w	r2, r0, r2
   17a7e:	ea81 0303 	eor.w	r3, r1, r3
   17a82:	ea82 0000 	eor.w	r0, r2, r0
   17a86:	ea83 0101 	eor.w	r1, r3, r1
   17a8a:	ea80 0202 	eor.w	r2, r0, r2
   17a8e:	ea81 0303 	eor.w	r3, r1, r3
   17a92:	2d36      	cmp	r5, #54	; 0x36
   17a94:	bf88      	it	hi
   17a96:	bd30      	pophi	{r4, r5, pc}
   17a98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17a9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17aa0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17aa4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   17aa8:	d002      	beq.n	17ab0 <__adddf3+0x70>
   17aaa:	4240      	negs	r0, r0
   17aac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17ab0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   17ab4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17ab8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   17abc:	d002      	beq.n	17ac4 <__adddf3+0x84>
   17abe:	4252      	negs	r2, r2
   17ac0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   17ac4:	ea94 0f05 	teq	r4, r5
   17ac8:	f000 80a7 	beq.w	17c1a <__adddf3+0x1da>
   17acc:	f1a4 0401 	sub.w	r4, r4, #1
   17ad0:	f1d5 0e20 	rsbs	lr, r5, #32
   17ad4:	db0d      	blt.n	17af2 <__adddf3+0xb2>
   17ad6:	fa02 fc0e 	lsl.w	ip, r2, lr
   17ada:	fa22 f205 	lsr.w	r2, r2, r5
   17ade:	1880      	adds	r0, r0, r2
   17ae0:	f141 0100 	adc.w	r1, r1, #0
   17ae4:	fa03 f20e 	lsl.w	r2, r3, lr
   17ae8:	1880      	adds	r0, r0, r2
   17aea:	fa43 f305 	asr.w	r3, r3, r5
   17aee:	4159      	adcs	r1, r3
   17af0:	e00e      	b.n	17b10 <__adddf3+0xd0>
   17af2:	f1a5 0520 	sub.w	r5, r5, #32
   17af6:	f10e 0e20 	add.w	lr, lr, #32
   17afa:	2a01      	cmp	r2, #1
   17afc:	fa03 fc0e 	lsl.w	ip, r3, lr
   17b00:	bf28      	it	cs
   17b02:	f04c 0c02 	orrcs.w	ip, ip, #2
   17b06:	fa43 f305 	asr.w	r3, r3, r5
   17b0a:	18c0      	adds	r0, r0, r3
   17b0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   17b10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17b14:	d507      	bpl.n	17b26 <__adddf3+0xe6>
   17b16:	f04f 0e00 	mov.w	lr, #0
   17b1a:	f1dc 0c00 	rsbs	ip, ip, #0
   17b1e:	eb7e 0000 	sbcs.w	r0, lr, r0
   17b22:	eb6e 0101 	sbc.w	r1, lr, r1
   17b26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   17b2a:	d31b      	bcc.n	17b64 <__adddf3+0x124>
   17b2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   17b30:	d30c      	bcc.n	17b4c <__adddf3+0x10c>
   17b32:	0849      	lsrs	r1, r1, #1
   17b34:	ea5f 0030 	movs.w	r0, r0, rrx
   17b38:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17b3c:	f104 0401 	add.w	r4, r4, #1
   17b40:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17b44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17b48:	f080 809a 	bcs.w	17c80 <__adddf3+0x240>
   17b4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17b50:	bf08      	it	eq
   17b52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17b56:	f150 0000 	adcs.w	r0, r0, #0
   17b5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17b5e:	ea41 0105 	orr.w	r1, r1, r5
   17b62:	bd30      	pop	{r4, r5, pc}
   17b64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17b68:	4140      	adcs	r0, r0
   17b6a:	eb41 0101 	adc.w	r1, r1, r1
   17b6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17b72:	f1a4 0401 	sub.w	r4, r4, #1
   17b76:	d1e9      	bne.n	17b4c <__adddf3+0x10c>
   17b78:	f091 0f00 	teq	r1, #0
   17b7c:	bf04      	itt	eq
   17b7e:	4601      	moveq	r1, r0
   17b80:	2000      	moveq	r0, #0
   17b82:	fab1 f381 	clz	r3, r1
   17b86:	bf08      	it	eq
   17b88:	3320      	addeq	r3, #32
   17b8a:	f1a3 030b 	sub.w	r3, r3, #11
   17b8e:	f1b3 0220 	subs.w	r2, r3, #32
   17b92:	da0c      	bge.n	17bae <__adddf3+0x16e>
   17b94:	320c      	adds	r2, #12
   17b96:	dd08      	ble.n	17baa <__adddf3+0x16a>
   17b98:	f102 0c14 	add.w	ip, r2, #20
   17b9c:	f1c2 020c 	rsb	r2, r2, #12
   17ba0:	fa01 f00c 	lsl.w	r0, r1, ip
   17ba4:	fa21 f102 	lsr.w	r1, r1, r2
   17ba8:	e00c      	b.n	17bc4 <__adddf3+0x184>
   17baa:	f102 0214 	add.w	r2, r2, #20
   17bae:	bfd8      	it	le
   17bb0:	f1c2 0c20 	rsble	ip, r2, #32
   17bb4:	fa01 f102 	lsl.w	r1, r1, r2
   17bb8:	fa20 fc0c 	lsr.w	ip, r0, ip
   17bbc:	bfdc      	itt	le
   17bbe:	ea41 010c 	orrle.w	r1, r1, ip
   17bc2:	4090      	lslle	r0, r2
   17bc4:	1ae4      	subs	r4, r4, r3
   17bc6:	bfa2      	ittt	ge
   17bc8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17bcc:	4329      	orrge	r1, r5
   17bce:	bd30      	popge	{r4, r5, pc}
   17bd0:	ea6f 0404 	mvn.w	r4, r4
   17bd4:	3c1f      	subs	r4, #31
   17bd6:	da1c      	bge.n	17c12 <__adddf3+0x1d2>
   17bd8:	340c      	adds	r4, #12
   17bda:	dc0e      	bgt.n	17bfa <__adddf3+0x1ba>
   17bdc:	f104 0414 	add.w	r4, r4, #20
   17be0:	f1c4 0220 	rsb	r2, r4, #32
   17be4:	fa20 f004 	lsr.w	r0, r0, r4
   17be8:	fa01 f302 	lsl.w	r3, r1, r2
   17bec:	ea40 0003 	orr.w	r0, r0, r3
   17bf0:	fa21 f304 	lsr.w	r3, r1, r4
   17bf4:	ea45 0103 	orr.w	r1, r5, r3
   17bf8:	bd30      	pop	{r4, r5, pc}
   17bfa:	f1c4 040c 	rsb	r4, r4, #12
   17bfe:	f1c4 0220 	rsb	r2, r4, #32
   17c02:	fa20 f002 	lsr.w	r0, r0, r2
   17c06:	fa01 f304 	lsl.w	r3, r1, r4
   17c0a:	ea40 0003 	orr.w	r0, r0, r3
   17c0e:	4629      	mov	r1, r5
   17c10:	bd30      	pop	{r4, r5, pc}
   17c12:	fa21 f004 	lsr.w	r0, r1, r4
   17c16:	4629      	mov	r1, r5
   17c18:	bd30      	pop	{r4, r5, pc}
   17c1a:	f094 0f00 	teq	r4, #0
   17c1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17c22:	bf06      	itte	eq
   17c24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17c28:	3401      	addeq	r4, #1
   17c2a:	3d01      	subne	r5, #1
   17c2c:	e74e      	b.n	17acc <__adddf3+0x8c>
   17c2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17c32:	bf18      	it	ne
   17c34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17c38:	d029      	beq.n	17c8e <__adddf3+0x24e>
   17c3a:	ea94 0f05 	teq	r4, r5
   17c3e:	bf08      	it	eq
   17c40:	ea90 0f02 	teqeq	r0, r2
   17c44:	d005      	beq.n	17c52 <__adddf3+0x212>
   17c46:	ea54 0c00 	orrs.w	ip, r4, r0
   17c4a:	bf04      	itt	eq
   17c4c:	4619      	moveq	r1, r3
   17c4e:	4610      	moveq	r0, r2
   17c50:	bd30      	pop	{r4, r5, pc}
   17c52:	ea91 0f03 	teq	r1, r3
   17c56:	bf1e      	ittt	ne
   17c58:	2100      	movne	r1, #0
   17c5a:	2000      	movne	r0, #0
   17c5c:	bd30      	popne	{r4, r5, pc}
   17c5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17c62:	d105      	bne.n	17c70 <__adddf3+0x230>
   17c64:	0040      	lsls	r0, r0, #1
   17c66:	4149      	adcs	r1, r1
   17c68:	bf28      	it	cs
   17c6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17c6e:	bd30      	pop	{r4, r5, pc}
   17c70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17c74:	bf3c      	itt	cc
   17c76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17c7a:	bd30      	popcc	{r4, r5, pc}
   17c7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17c80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17c84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17c88:	f04f 0000 	mov.w	r0, #0
   17c8c:	bd30      	pop	{r4, r5, pc}
   17c8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17c92:	bf1a      	itte	ne
   17c94:	4619      	movne	r1, r3
   17c96:	4610      	movne	r0, r2
   17c98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17c9c:	bf1c      	itt	ne
   17c9e:	460b      	movne	r3, r1
   17ca0:	4602      	movne	r2, r0
   17ca2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17ca6:	bf06      	itte	eq
   17ca8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17cac:	ea91 0f03 	teqeq	r1, r3
   17cb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17cb4:	bd30      	pop	{r4, r5, pc}
   17cb6:	bf00      	nop

00017cb8 <__aeabi_ui2d>:
   17cb8:	f090 0f00 	teq	r0, #0
   17cbc:	bf04      	itt	eq
   17cbe:	2100      	moveq	r1, #0
   17cc0:	4770      	bxeq	lr
   17cc2:	b530      	push	{r4, r5, lr}
   17cc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17cc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17ccc:	f04f 0500 	mov.w	r5, #0
   17cd0:	f04f 0100 	mov.w	r1, #0
   17cd4:	e750      	b.n	17b78 <__adddf3+0x138>
   17cd6:	bf00      	nop

00017cd8 <__aeabi_i2d>:
   17cd8:	f090 0f00 	teq	r0, #0
   17cdc:	bf04      	itt	eq
   17cde:	2100      	moveq	r1, #0
   17ce0:	4770      	bxeq	lr
   17ce2:	b530      	push	{r4, r5, lr}
   17ce4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17ce8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17cec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17cf0:	bf48      	it	mi
   17cf2:	4240      	negmi	r0, r0
   17cf4:	f04f 0100 	mov.w	r1, #0
   17cf8:	e73e      	b.n	17b78 <__adddf3+0x138>
   17cfa:	bf00      	nop

00017cfc <__aeabi_f2d>:
   17cfc:	0042      	lsls	r2, r0, #1
   17cfe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17d02:	ea4f 0131 	mov.w	r1, r1, rrx
   17d06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17d0a:	bf1f      	itttt	ne
   17d0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17d10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17d14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17d18:	4770      	bxne	lr
   17d1a:	f092 0f00 	teq	r2, #0
   17d1e:	bf14      	ite	ne
   17d20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17d24:	4770      	bxeq	lr
   17d26:	b530      	push	{r4, r5, lr}
   17d28:	f44f 7460 	mov.w	r4, #896	; 0x380
   17d2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17d30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17d34:	e720      	b.n	17b78 <__adddf3+0x138>
   17d36:	bf00      	nop

00017d38 <__aeabi_ul2d>:
   17d38:	ea50 0201 	orrs.w	r2, r0, r1
   17d3c:	bf08      	it	eq
   17d3e:	4770      	bxeq	lr
   17d40:	b530      	push	{r4, r5, lr}
   17d42:	f04f 0500 	mov.w	r5, #0
   17d46:	e00a      	b.n	17d5e <__aeabi_l2d+0x16>

00017d48 <__aeabi_l2d>:
   17d48:	ea50 0201 	orrs.w	r2, r0, r1
   17d4c:	bf08      	it	eq
   17d4e:	4770      	bxeq	lr
   17d50:	b530      	push	{r4, r5, lr}
   17d52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17d56:	d502      	bpl.n	17d5e <__aeabi_l2d+0x16>
   17d58:	4240      	negs	r0, r0
   17d5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17d5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17d62:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17d66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17d6a:	f43f aedc 	beq.w	17b26 <__adddf3+0xe6>
   17d6e:	f04f 0203 	mov.w	r2, #3
   17d72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17d76:	bf18      	it	ne
   17d78:	3203      	addne	r2, #3
   17d7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17d7e:	bf18      	it	ne
   17d80:	3203      	addne	r2, #3
   17d82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17d86:	f1c2 0320 	rsb	r3, r2, #32
   17d8a:	fa00 fc03 	lsl.w	ip, r0, r3
   17d8e:	fa20 f002 	lsr.w	r0, r0, r2
   17d92:	fa01 fe03 	lsl.w	lr, r1, r3
   17d96:	ea40 000e 	orr.w	r0, r0, lr
   17d9a:	fa21 f102 	lsr.w	r1, r1, r2
   17d9e:	4414      	add	r4, r2
   17da0:	e6c1      	b.n	17b26 <__adddf3+0xe6>
   17da2:	bf00      	nop

00017da4 <__aeabi_dmul>:
   17da4:	b570      	push	{r4, r5, r6, lr}
   17da6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17daa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17dae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17db2:	bf1d      	ittte	ne
   17db4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17db8:	ea94 0f0c 	teqne	r4, ip
   17dbc:	ea95 0f0c 	teqne	r5, ip
   17dc0:	f000 f8de 	bleq	17f80 <__aeabi_dmul+0x1dc>
   17dc4:	442c      	add	r4, r5
   17dc6:	ea81 0603 	eor.w	r6, r1, r3
   17dca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17dce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17dd2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17dd6:	bf18      	it	ne
   17dd8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17ddc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17de0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17de4:	d038      	beq.n	17e58 <__aeabi_dmul+0xb4>
   17de6:	fba0 ce02 	umull	ip, lr, r0, r2
   17dea:	f04f 0500 	mov.w	r5, #0
   17dee:	fbe1 e502 	umlal	lr, r5, r1, r2
   17df2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17df6:	fbe0 e503 	umlal	lr, r5, r0, r3
   17dfa:	f04f 0600 	mov.w	r6, #0
   17dfe:	fbe1 5603 	umlal	r5, r6, r1, r3
   17e02:	f09c 0f00 	teq	ip, #0
   17e06:	bf18      	it	ne
   17e08:	f04e 0e01 	orrne.w	lr, lr, #1
   17e0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17e10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17e14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17e18:	d204      	bcs.n	17e24 <__aeabi_dmul+0x80>
   17e1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17e1e:	416d      	adcs	r5, r5
   17e20:	eb46 0606 	adc.w	r6, r6, r6
   17e24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17e28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17e2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17e30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17e34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17e38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17e3c:	bf88      	it	hi
   17e3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17e42:	d81e      	bhi.n	17e82 <__aeabi_dmul+0xde>
   17e44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17e48:	bf08      	it	eq
   17e4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17e4e:	f150 0000 	adcs.w	r0, r0, #0
   17e52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17e56:	bd70      	pop	{r4, r5, r6, pc}
   17e58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17e5c:	ea46 0101 	orr.w	r1, r6, r1
   17e60:	ea40 0002 	orr.w	r0, r0, r2
   17e64:	ea81 0103 	eor.w	r1, r1, r3
   17e68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17e6c:	bfc2      	ittt	gt
   17e6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   17e72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17e76:	bd70      	popgt	{r4, r5, r6, pc}
   17e78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17e7c:	f04f 0e00 	mov.w	lr, #0
   17e80:	3c01      	subs	r4, #1
   17e82:	f300 80ab 	bgt.w	17fdc <__aeabi_dmul+0x238>
   17e86:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17e8a:	bfde      	ittt	le
   17e8c:	2000      	movle	r0, #0
   17e8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17e92:	bd70      	pople	{r4, r5, r6, pc}
   17e94:	f1c4 0400 	rsb	r4, r4, #0
   17e98:	3c20      	subs	r4, #32
   17e9a:	da35      	bge.n	17f08 <__aeabi_dmul+0x164>
   17e9c:	340c      	adds	r4, #12
   17e9e:	dc1b      	bgt.n	17ed8 <__aeabi_dmul+0x134>
   17ea0:	f104 0414 	add.w	r4, r4, #20
   17ea4:	f1c4 0520 	rsb	r5, r4, #32
   17ea8:	fa00 f305 	lsl.w	r3, r0, r5
   17eac:	fa20 f004 	lsr.w	r0, r0, r4
   17eb0:	fa01 f205 	lsl.w	r2, r1, r5
   17eb4:	ea40 0002 	orr.w	r0, r0, r2
   17eb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17ebc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17ec0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17ec4:	fa21 f604 	lsr.w	r6, r1, r4
   17ec8:	eb42 0106 	adc.w	r1, r2, r6
   17ecc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17ed0:	bf08      	it	eq
   17ed2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17ed6:	bd70      	pop	{r4, r5, r6, pc}
   17ed8:	f1c4 040c 	rsb	r4, r4, #12
   17edc:	f1c4 0520 	rsb	r5, r4, #32
   17ee0:	fa00 f304 	lsl.w	r3, r0, r4
   17ee4:	fa20 f005 	lsr.w	r0, r0, r5
   17ee8:	fa01 f204 	lsl.w	r2, r1, r4
   17eec:	ea40 0002 	orr.w	r0, r0, r2
   17ef0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17ef4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17ef8:	f141 0100 	adc.w	r1, r1, #0
   17efc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17f00:	bf08      	it	eq
   17f02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17f06:	bd70      	pop	{r4, r5, r6, pc}
   17f08:	f1c4 0520 	rsb	r5, r4, #32
   17f0c:	fa00 f205 	lsl.w	r2, r0, r5
   17f10:	ea4e 0e02 	orr.w	lr, lr, r2
   17f14:	fa20 f304 	lsr.w	r3, r0, r4
   17f18:	fa01 f205 	lsl.w	r2, r1, r5
   17f1c:	ea43 0302 	orr.w	r3, r3, r2
   17f20:	fa21 f004 	lsr.w	r0, r1, r4
   17f24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17f28:	fa21 f204 	lsr.w	r2, r1, r4
   17f2c:	ea20 0002 	bic.w	r0, r0, r2
   17f30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17f34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17f38:	bf08      	it	eq
   17f3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17f3e:	bd70      	pop	{r4, r5, r6, pc}
   17f40:	f094 0f00 	teq	r4, #0
   17f44:	d10f      	bne.n	17f66 <__aeabi_dmul+0x1c2>
   17f46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17f4a:	0040      	lsls	r0, r0, #1
   17f4c:	eb41 0101 	adc.w	r1, r1, r1
   17f50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17f54:	bf08      	it	eq
   17f56:	3c01      	subeq	r4, #1
   17f58:	d0f7      	beq.n	17f4a <__aeabi_dmul+0x1a6>
   17f5a:	ea41 0106 	orr.w	r1, r1, r6
   17f5e:	f095 0f00 	teq	r5, #0
   17f62:	bf18      	it	ne
   17f64:	4770      	bxne	lr
   17f66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17f6a:	0052      	lsls	r2, r2, #1
   17f6c:	eb43 0303 	adc.w	r3, r3, r3
   17f70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17f74:	bf08      	it	eq
   17f76:	3d01      	subeq	r5, #1
   17f78:	d0f7      	beq.n	17f6a <__aeabi_dmul+0x1c6>
   17f7a:	ea43 0306 	orr.w	r3, r3, r6
   17f7e:	4770      	bx	lr
   17f80:	ea94 0f0c 	teq	r4, ip
   17f84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17f88:	bf18      	it	ne
   17f8a:	ea95 0f0c 	teqne	r5, ip
   17f8e:	d00c      	beq.n	17faa <__aeabi_dmul+0x206>
   17f90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17f94:	bf18      	it	ne
   17f96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17f9a:	d1d1      	bne.n	17f40 <__aeabi_dmul+0x19c>
   17f9c:	ea81 0103 	eor.w	r1, r1, r3
   17fa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17fa4:	f04f 0000 	mov.w	r0, #0
   17fa8:	bd70      	pop	{r4, r5, r6, pc}
   17faa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17fae:	bf06      	itte	eq
   17fb0:	4610      	moveq	r0, r2
   17fb2:	4619      	moveq	r1, r3
   17fb4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17fb8:	d019      	beq.n	17fee <__aeabi_dmul+0x24a>
   17fba:	ea94 0f0c 	teq	r4, ip
   17fbe:	d102      	bne.n	17fc6 <__aeabi_dmul+0x222>
   17fc0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17fc4:	d113      	bne.n	17fee <__aeabi_dmul+0x24a>
   17fc6:	ea95 0f0c 	teq	r5, ip
   17fca:	d105      	bne.n	17fd8 <__aeabi_dmul+0x234>
   17fcc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17fd0:	bf1c      	itt	ne
   17fd2:	4610      	movne	r0, r2
   17fd4:	4619      	movne	r1, r3
   17fd6:	d10a      	bne.n	17fee <__aeabi_dmul+0x24a>
   17fd8:	ea81 0103 	eor.w	r1, r1, r3
   17fdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17fe0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17fe4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17fe8:	f04f 0000 	mov.w	r0, #0
   17fec:	bd70      	pop	{r4, r5, r6, pc}
   17fee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17ff2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17ff6:	bd70      	pop	{r4, r5, r6, pc}

00017ff8 <__aeabi_ddiv>:
   17ff8:	b570      	push	{r4, r5, r6, lr}
   17ffa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17ffe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18002:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18006:	bf1d      	ittte	ne
   18008:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1800c:	ea94 0f0c 	teqne	r4, ip
   18010:	ea95 0f0c 	teqne	r5, ip
   18014:	f000 f8a7 	bleq	18166 <__aeabi_ddiv+0x16e>
   18018:	eba4 0405 	sub.w	r4, r4, r5
   1801c:	ea81 0e03 	eor.w	lr, r1, r3
   18020:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18024:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18028:	f000 8088 	beq.w	1813c <__aeabi_ddiv+0x144>
   1802c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18030:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   18034:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   18038:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1803c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   18040:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   18044:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   18048:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1804c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   18050:	429d      	cmp	r5, r3
   18052:	bf08      	it	eq
   18054:	4296      	cmpeq	r6, r2
   18056:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1805a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1805e:	d202      	bcs.n	18066 <__aeabi_ddiv+0x6e>
   18060:	085b      	lsrs	r3, r3, #1
   18062:	ea4f 0232 	mov.w	r2, r2, rrx
   18066:	1ab6      	subs	r6, r6, r2
   18068:	eb65 0503 	sbc.w	r5, r5, r3
   1806c:	085b      	lsrs	r3, r3, #1
   1806e:	ea4f 0232 	mov.w	r2, r2, rrx
   18072:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   18076:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1807a:	ebb6 0e02 	subs.w	lr, r6, r2
   1807e:	eb75 0e03 	sbcs.w	lr, r5, r3
   18082:	bf22      	ittt	cs
   18084:	1ab6      	subcs	r6, r6, r2
   18086:	4675      	movcs	r5, lr
   18088:	ea40 000c 	orrcs.w	r0, r0, ip
   1808c:	085b      	lsrs	r3, r3, #1
   1808e:	ea4f 0232 	mov.w	r2, r2, rrx
   18092:	ebb6 0e02 	subs.w	lr, r6, r2
   18096:	eb75 0e03 	sbcs.w	lr, r5, r3
   1809a:	bf22      	ittt	cs
   1809c:	1ab6      	subcs	r6, r6, r2
   1809e:	4675      	movcs	r5, lr
   180a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   180a4:	085b      	lsrs	r3, r3, #1
   180a6:	ea4f 0232 	mov.w	r2, r2, rrx
   180aa:	ebb6 0e02 	subs.w	lr, r6, r2
   180ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   180b2:	bf22      	ittt	cs
   180b4:	1ab6      	subcs	r6, r6, r2
   180b6:	4675      	movcs	r5, lr
   180b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   180bc:	085b      	lsrs	r3, r3, #1
   180be:	ea4f 0232 	mov.w	r2, r2, rrx
   180c2:	ebb6 0e02 	subs.w	lr, r6, r2
   180c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   180ca:	bf22      	ittt	cs
   180cc:	1ab6      	subcs	r6, r6, r2
   180ce:	4675      	movcs	r5, lr
   180d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   180d4:	ea55 0e06 	orrs.w	lr, r5, r6
   180d8:	d018      	beq.n	1810c <__aeabi_ddiv+0x114>
   180da:	ea4f 1505 	mov.w	r5, r5, lsl #4
   180de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   180e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   180e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   180ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   180ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   180f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   180f6:	d1c0      	bne.n	1807a <__aeabi_ddiv+0x82>
   180f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   180fc:	d10b      	bne.n	18116 <__aeabi_ddiv+0x11e>
   180fe:	ea41 0100 	orr.w	r1, r1, r0
   18102:	f04f 0000 	mov.w	r0, #0
   18106:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1810a:	e7b6      	b.n	1807a <__aeabi_ddiv+0x82>
   1810c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18110:	bf04      	itt	eq
   18112:	4301      	orreq	r1, r0
   18114:	2000      	moveq	r0, #0
   18116:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1811a:	bf88      	it	hi
   1811c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18120:	f63f aeaf 	bhi.w	17e82 <__aeabi_dmul+0xde>
   18124:	ebb5 0c03 	subs.w	ip, r5, r3
   18128:	bf04      	itt	eq
   1812a:	ebb6 0c02 	subseq.w	ip, r6, r2
   1812e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18132:	f150 0000 	adcs.w	r0, r0, #0
   18136:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1813a:	bd70      	pop	{r4, r5, r6, pc}
   1813c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   18140:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   18144:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   18148:	bfc2      	ittt	gt
   1814a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1814e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18152:	bd70      	popgt	{r4, r5, r6, pc}
   18154:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18158:	f04f 0e00 	mov.w	lr, #0
   1815c:	3c01      	subs	r4, #1
   1815e:	e690      	b.n	17e82 <__aeabi_dmul+0xde>
   18160:	ea45 0e06 	orr.w	lr, r5, r6
   18164:	e68d      	b.n	17e82 <__aeabi_dmul+0xde>
   18166:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1816a:	ea94 0f0c 	teq	r4, ip
   1816e:	bf08      	it	eq
   18170:	ea95 0f0c 	teqeq	r5, ip
   18174:	f43f af3b 	beq.w	17fee <__aeabi_dmul+0x24a>
   18178:	ea94 0f0c 	teq	r4, ip
   1817c:	d10a      	bne.n	18194 <__aeabi_ddiv+0x19c>
   1817e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18182:	f47f af34 	bne.w	17fee <__aeabi_dmul+0x24a>
   18186:	ea95 0f0c 	teq	r5, ip
   1818a:	f47f af25 	bne.w	17fd8 <__aeabi_dmul+0x234>
   1818e:	4610      	mov	r0, r2
   18190:	4619      	mov	r1, r3
   18192:	e72c      	b.n	17fee <__aeabi_dmul+0x24a>
   18194:	ea95 0f0c 	teq	r5, ip
   18198:	d106      	bne.n	181a8 <__aeabi_ddiv+0x1b0>
   1819a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1819e:	f43f aefd 	beq.w	17f9c <__aeabi_dmul+0x1f8>
   181a2:	4610      	mov	r0, r2
   181a4:	4619      	mov	r1, r3
   181a6:	e722      	b.n	17fee <__aeabi_dmul+0x24a>
   181a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   181ac:	bf18      	it	ne
   181ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   181b2:	f47f aec5 	bne.w	17f40 <__aeabi_dmul+0x19c>
   181b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   181ba:	f47f af0d 	bne.w	17fd8 <__aeabi_dmul+0x234>
   181be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   181c2:	f47f aeeb 	bne.w	17f9c <__aeabi_dmul+0x1f8>
   181c6:	e712      	b.n	17fee <__aeabi_dmul+0x24a>

000181c8 <__gedf2>:
   181c8:	f04f 3cff 	mov.w	ip, #4294967295
   181cc:	e006      	b.n	181dc <__cmpdf2+0x4>
   181ce:	bf00      	nop

000181d0 <__ledf2>:
   181d0:	f04f 0c01 	mov.w	ip, #1
   181d4:	e002      	b.n	181dc <__cmpdf2+0x4>
   181d6:	bf00      	nop

000181d8 <__cmpdf2>:
   181d8:	f04f 0c01 	mov.w	ip, #1
   181dc:	f84d cd04 	str.w	ip, [sp, #-4]!
   181e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   181e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   181e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   181ec:	bf18      	it	ne
   181ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   181f2:	d01b      	beq.n	1822c <__cmpdf2+0x54>
   181f4:	b001      	add	sp, #4
   181f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   181fa:	bf0c      	ite	eq
   181fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   18200:	ea91 0f03 	teqne	r1, r3
   18204:	bf02      	ittt	eq
   18206:	ea90 0f02 	teqeq	r0, r2
   1820a:	2000      	moveq	r0, #0
   1820c:	4770      	bxeq	lr
   1820e:	f110 0f00 	cmn.w	r0, #0
   18212:	ea91 0f03 	teq	r1, r3
   18216:	bf58      	it	pl
   18218:	4299      	cmppl	r1, r3
   1821a:	bf08      	it	eq
   1821c:	4290      	cmpeq	r0, r2
   1821e:	bf2c      	ite	cs
   18220:	17d8      	asrcs	r0, r3, #31
   18222:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   18226:	f040 0001 	orr.w	r0, r0, #1
   1822a:	4770      	bx	lr
   1822c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18230:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18234:	d102      	bne.n	1823c <__cmpdf2+0x64>
   18236:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1823a:	d107      	bne.n	1824c <__cmpdf2+0x74>
   1823c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18240:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18244:	d1d6      	bne.n	181f4 <__cmpdf2+0x1c>
   18246:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1824a:	d0d3      	beq.n	181f4 <__cmpdf2+0x1c>
   1824c:	f85d 0b04 	ldr.w	r0, [sp], #4
   18250:	4770      	bx	lr
   18252:	bf00      	nop

00018254 <__aeabi_cdrcmple>:
   18254:	4684      	mov	ip, r0
   18256:	4610      	mov	r0, r2
   18258:	4662      	mov	r2, ip
   1825a:	468c      	mov	ip, r1
   1825c:	4619      	mov	r1, r3
   1825e:	4663      	mov	r3, ip
   18260:	e000      	b.n	18264 <__aeabi_cdcmpeq>
   18262:	bf00      	nop

00018264 <__aeabi_cdcmpeq>:
   18264:	b501      	push	{r0, lr}
   18266:	f7ff ffb7 	bl	181d8 <__cmpdf2>
   1826a:	2800      	cmp	r0, #0
   1826c:	bf48      	it	mi
   1826e:	f110 0f00 	cmnmi.w	r0, #0
   18272:	bd01      	pop	{r0, pc}

00018274 <__aeabi_dcmpeq>:
   18274:	f84d ed08 	str.w	lr, [sp, #-8]!
   18278:	f7ff fff4 	bl	18264 <__aeabi_cdcmpeq>
   1827c:	bf0c      	ite	eq
   1827e:	2001      	moveq	r0, #1
   18280:	2000      	movne	r0, #0
   18282:	f85d fb08 	ldr.w	pc, [sp], #8
   18286:	bf00      	nop

00018288 <__aeabi_dcmplt>:
   18288:	f84d ed08 	str.w	lr, [sp, #-8]!
   1828c:	f7ff ffea 	bl	18264 <__aeabi_cdcmpeq>
   18290:	bf34      	ite	cc
   18292:	2001      	movcc	r0, #1
   18294:	2000      	movcs	r0, #0
   18296:	f85d fb08 	ldr.w	pc, [sp], #8
   1829a:	bf00      	nop

0001829c <__aeabi_dcmple>:
   1829c:	f84d ed08 	str.w	lr, [sp, #-8]!
   182a0:	f7ff ffe0 	bl	18264 <__aeabi_cdcmpeq>
   182a4:	bf94      	ite	ls
   182a6:	2001      	movls	r0, #1
   182a8:	2000      	movhi	r0, #0
   182aa:	f85d fb08 	ldr.w	pc, [sp], #8
   182ae:	bf00      	nop

000182b0 <__aeabi_dcmpge>:
   182b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   182b4:	f7ff ffce 	bl	18254 <__aeabi_cdrcmple>
   182b8:	bf94      	ite	ls
   182ba:	2001      	movls	r0, #1
   182bc:	2000      	movhi	r0, #0
   182be:	f85d fb08 	ldr.w	pc, [sp], #8
   182c2:	bf00      	nop

000182c4 <__aeabi_dcmpgt>:
   182c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   182c8:	f7ff ffc4 	bl	18254 <__aeabi_cdrcmple>
   182cc:	bf34      	ite	cc
   182ce:	2001      	movcc	r0, #1
   182d0:	2000      	movcs	r0, #0
   182d2:	f85d fb08 	ldr.w	pc, [sp], #8
   182d6:	bf00      	nop

000182d8 <__aeabi_dcmpun>:
   182d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   182dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   182e0:	d102      	bne.n	182e8 <__aeabi_dcmpun+0x10>
   182e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   182e6:	d10a      	bne.n	182fe <__aeabi_dcmpun+0x26>
   182e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   182ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   182f0:	d102      	bne.n	182f8 <__aeabi_dcmpun+0x20>
   182f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   182f6:	d102      	bne.n	182fe <__aeabi_dcmpun+0x26>
   182f8:	f04f 0000 	mov.w	r0, #0
   182fc:	4770      	bx	lr
   182fe:	f04f 0001 	mov.w	r0, #1
   18302:	4770      	bx	lr

00018304 <__aeabi_d2uiz>:
   18304:	004a      	lsls	r2, r1, #1
   18306:	d211      	bcs.n	1832c <__aeabi_d2uiz+0x28>
   18308:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1830c:	d211      	bcs.n	18332 <__aeabi_d2uiz+0x2e>
   1830e:	d50d      	bpl.n	1832c <__aeabi_d2uiz+0x28>
   18310:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18314:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18318:	d40e      	bmi.n	18338 <__aeabi_d2uiz+0x34>
   1831a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1831e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18322:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18326:	fa23 f002 	lsr.w	r0, r3, r2
   1832a:	4770      	bx	lr
   1832c:	f04f 0000 	mov.w	r0, #0
   18330:	4770      	bx	lr
   18332:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18336:	d102      	bne.n	1833e <__aeabi_d2uiz+0x3a>
   18338:	f04f 30ff 	mov.w	r0, #4294967295
   1833c:	4770      	bx	lr
   1833e:	f04f 0000 	mov.w	r0, #0
   18342:	4770      	bx	lr

00018344 <__aeabi_frsub>:
   18344:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18348:	e002      	b.n	18350 <__addsf3>
   1834a:	bf00      	nop

0001834c <__aeabi_fsub>:
   1834c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018350 <__addsf3>:
   18350:	0042      	lsls	r2, r0, #1
   18352:	bf1f      	itttt	ne
   18354:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18358:	ea92 0f03 	teqne	r2, r3
   1835c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18360:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18364:	d06a      	beq.n	1843c <__addsf3+0xec>
   18366:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1836a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1836e:	bfc1      	itttt	gt
   18370:	18d2      	addgt	r2, r2, r3
   18372:	4041      	eorgt	r1, r0
   18374:	4048      	eorgt	r0, r1
   18376:	4041      	eorgt	r1, r0
   18378:	bfb8      	it	lt
   1837a:	425b      	neglt	r3, r3
   1837c:	2b19      	cmp	r3, #25
   1837e:	bf88      	it	hi
   18380:	4770      	bxhi	lr
   18382:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18386:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1838a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1838e:	bf18      	it	ne
   18390:	4240      	negne	r0, r0
   18392:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18396:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1839a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1839e:	bf18      	it	ne
   183a0:	4249      	negne	r1, r1
   183a2:	ea92 0f03 	teq	r2, r3
   183a6:	d03f      	beq.n	18428 <__addsf3+0xd8>
   183a8:	f1a2 0201 	sub.w	r2, r2, #1
   183ac:	fa41 fc03 	asr.w	ip, r1, r3
   183b0:	eb10 000c 	adds.w	r0, r0, ip
   183b4:	f1c3 0320 	rsb	r3, r3, #32
   183b8:	fa01 f103 	lsl.w	r1, r1, r3
   183bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   183c0:	d502      	bpl.n	183c8 <__addsf3+0x78>
   183c2:	4249      	negs	r1, r1
   183c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   183c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   183cc:	d313      	bcc.n	183f6 <__addsf3+0xa6>
   183ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   183d2:	d306      	bcc.n	183e2 <__addsf3+0x92>
   183d4:	0840      	lsrs	r0, r0, #1
   183d6:	ea4f 0131 	mov.w	r1, r1, rrx
   183da:	f102 0201 	add.w	r2, r2, #1
   183de:	2afe      	cmp	r2, #254	; 0xfe
   183e0:	d251      	bcs.n	18486 <__addsf3+0x136>
   183e2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   183e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   183ea:	bf08      	it	eq
   183ec:	f020 0001 	biceq.w	r0, r0, #1
   183f0:	ea40 0003 	orr.w	r0, r0, r3
   183f4:	4770      	bx	lr
   183f6:	0049      	lsls	r1, r1, #1
   183f8:	eb40 0000 	adc.w	r0, r0, r0
   183fc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   18400:	f1a2 0201 	sub.w	r2, r2, #1
   18404:	d1ed      	bne.n	183e2 <__addsf3+0x92>
   18406:	fab0 fc80 	clz	ip, r0
   1840a:	f1ac 0c08 	sub.w	ip, ip, #8
   1840e:	ebb2 020c 	subs.w	r2, r2, ip
   18412:	fa00 f00c 	lsl.w	r0, r0, ip
   18416:	bfaa      	itet	ge
   18418:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1841c:	4252      	neglt	r2, r2
   1841e:	4318      	orrge	r0, r3
   18420:	bfbc      	itt	lt
   18422:	40d0      	lsrlt	r0, r2
   18424:	4318      	orrlt	r0, r3
   18426:	4770      	bx	lr
   18428:	f092 0f00 	teq	r2, #0
   1842c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18430:	bf06      	itte	eq
   18432:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18436:	3201      	addeq	r2, #1
   18438:	3b01      	subne	r3, #1
   1843a:	e7b5      	b.n	183a8 <__addsf3+0x58>
   1843c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18440:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18444:	bf18      	it	ne
   18446:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1844a:	d021      	beq.n	18490 <__addsf3+0x140>
   1844c:	ea92 0f03 	teq	r2, r3
   18450:	d004      	beq.n	1845c <__addsf3+0x10c>
   18452:	f092 0f00 	teq	r2, #0
   18456:	bf08      	it	eq
   18458:	4608      	moveq	r0, r1
   1845a:	4770      	bx	lr
   1845c:	ea90 0f01 	teq	r0, r1
   18460:	bf1c      	itt	ne
   18462:	2000      	movne	r0, #0
   18464:	4770      	bxne	lr
   18466:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1846a:	d104      	bne.n	18476 <__addsf3+0x126>
   1846c:	0040      	lsls	r0, r0, #1
   1846e:	bf28      	it	cs
   18470:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18474:	4770      	bx	lr
   18476:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1847a:	bf3c      	itt	cc
   1847c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18480:	4770      	bxcc	lr
   18482:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18486:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1848a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1848e:	4770      	bx	lr
   18490:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18494:	bf16      	itet	ne
   18496:	4608      	movne	r0, r1
   18498:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1849c:	4601      	movne	r1, r0
   1849e:	0242      	lsls	r2, r0, #9
   184a0:	bf06      	itte	eq
   184a2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   184a6:	ea90 0f01 	teqeq	r0, r1
   184aa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   184ae:	4770      	bx	lr

000184b0 <__aeabi_ui2f>:
   184b0:	f04f 0300 	mov.w	r3, #0
   184b4:	e004      	b.n	184c0 <__aeabi_i2f+0x8>
   184b6:	bf00      	nop

000184b8 <__aeabi_i2f>:
   184b8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   184bc:	bf48      	it	mi
   184be:	4240      	negmi	r0, r0
   184c0:	ea5f 0c00 	movs.w	ip, r0
   184c4:	bf08      	it	eq
   184c6:	4770      	bxeq	lr
   184c8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   184cc:	4601      	mov	r1, r0
   184ce:	f04f 0000 	mov.w	r0, #0
   184d2:	e01c      	b.n	1850e <__aeabi_l2f+0x2a>

000184d4 <__aeabi_ul2f>:
   184d4:	ea50 0201 	orrs.w	r2, r0, r1
   184d8:	bf08      	it	eq
   184da:	4770      	bxeq	lr
   184dc:	f04f 0300 	mov.w	r3, #0
   184e0:	e00a      	b.n	184f8 <__aeabi_l2f+0x14>
   184e2:	bf00      	nop

000184e4 <__aeabi_l2f>:
   184e4:	ea50 0201 	orrs.w	r2, r0, r1
   184e8:	bf08      	it	eq
   184ea:	4770      	bxeq	lr
   184ec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   184f0:	d502      	bpl.n	184f8 <__aeabi_l2f+0x14>
   184f2:	4240      	negs	r0, r0
   184f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   184f8:	ea5f 0c01 	movs.w	ip, r1
   184fc:	bf02      	ittt	eq
   184fe:	4684      	moveq	ip, r0
   18500:	4601      	moveq	r1, r0
   18502:	2000      	moveq	r0, #0
   18504:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18508:	bf08      	it	eq
   1850a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1850e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18512:	fabc f28c 	clz	r2, ip
   18516:	3a08      	subs	r2, #8
   18518:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1851c:	db10      	blt.n	18540 <__aeabi_l2f+0x5c>
   1851e:	fa01 fc02 	lsl.w	ip, r1, r2
   18522:	4463      	add	r3, ip
   18524:	fa00 fc02 	lsl.w	ip, r0, r2
   18528:	f1c2 0220 	rsb	r2, r2, #32
   1852c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18530:	fa20 f202 	lsr.w	r2, r0, r2
   18534:	eb43 0002 	adc.w	r0, r3, r2
   18538:	bf08      	it	eq
   1853a:	f020 0001 	biceq.w	r0, r0, #1
   1853e:	4770      	bx	lr
   18540:	f102 0220 	add.w	r2, r2, #32
   18544:	fa01 fc02 	lsl.w	ip, r1, r2
   18548:	f1c2 0220 	rsb	r2, r2, #32
   1854c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18550:	fa21 f202 	lsr.w	r2, r1, r2
   18554:	eb43 0002 	adc.w	r0, r3, r2
   18558:	bf08      	it	eq
   1855a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1855e:	4770      	bx	lr

00018560 <__aeabi_uldivmod>:
   18560:	b953      	cbnz	r3, 18578 <__aeabi_uldivmod+0x18>
   18562:	b94a      	cbnz	r2, 18578 <__aeabi_uldivmod+0x18>
   18564:	2900      	cmp	r1, #0
   18566:	bf08      	it	eq
   18568:	2800      	cmpeq	r0, #0
   1856a:	bf1c      	itt	ne
   1856c:	f04f 31ff 	movne.w	r1, #4294967295
   18570:	f04f 30ff 	movne.w	r0, #4294967295
   18574:	f000 b97a 	b.w	1886c <__aeabi_idiv0>
   18578:	f1ad 0c08 	sub.w	ip, sp, #8
   1857c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18580:	f000 f806 	bl	18590 <__udivmoddi4>
   18584:	f8dd e004 	ldr.w	lr, [sp, #4]
   18588:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1858c:	b004      	add	sp, #16
   1858e:	4770      	bx	lr

00018590 <__udivmoddi4>:
   18590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18594:	468c      	mov	ip, r1
   18596:	460d      	mov	r5, r1
   18598:	4604      	mov	r4, r0
   1859a:	9e08      	ldr	r6, [sp, #32]
   1859c:	2b00      	cmp	r3, #0
   1859e:	d151      	bne.n	18644 <__udivmoddi4+0xb4>
   185a0:	428a      	cmp	r2, r1
   185a2:	4617      	mov	r7, r2
   185a4:	d96d      	bls.n	18682 <__udivmoddi4+0xf2>
   185a6:	fab2 fe82 	clz	lr, r2
   185aa:	f1be 0f00 	cmp.w	lr, #0
   185ae:	d00b      	beq.n	185c8 <__udivmoddi4+0x38>
   185b0:	f1ce 0c20 	rsb	ip, lr, #32
   185b4:	fa01 f50e 	lsl.w	r5, r1, lr
   185b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   185bc:	fa02 f70e 	lsl.w	r7, r2, lr
   185c0:	ea4c 0c05 	orr.w	ip, ip, r5
   185c4:	fa00 f40e 	lsl.w	r4, r0, lr
   185c8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   185cc:	0c25      	lsrs	r5, r4, #16
   185ce:	fbbc f8fa 	udiv	r8, ip, sl
   185d2:	fa1f f987 	uxth.w	r9, r7
   185d6:	fb0a cc18 	mls	ip, sl, r8, ip
   185da:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   185de:	fb08 f309 	mul.w	r3, r8, r9
   185e2:	42ab      	cmp	r3, r5
   185e4:	d90a      	bls.n	185fc <__udivmoddi4+0x6c>
   185e6:	19ed      	adds	r5, r5, r7
   185e8:	f108 32ff 	add.w	r2, r8, #4294967295
   185ec:	f080 8123 	bcs.w	18836 <__udivmoddi4+0x2a6>
   185f0:	42ab      	cmp	r3, r5
   185f2:	f240 8120 	bls.w	18836 <__udivmoddi4+0x2a6>
   185f6:	f1a8 0802 	sub.w	r8, r8, #2
   185fa:	443d      	add	r5, r7
   185fc:	1aed      	subs	r5, r5, r3
   185fe:	b2a4      	uxth	r4, r4
   18600:	fbb5 f0fa 	udiv	r0, r5, sl
   18604:	fb0a 5510 	mls	r5, sl, r0, r5
   18608:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1860c:	fb00 f909 	mul.w	r9, r0, r9
   18610:	45a1      	cmp	r9, r4
   18612:	d909      	bls.n	18628 <__udivmoddi4+0x98>
   18614:	19e4      	adds	r4, r4, r7
   18616:	f100 33ff 	add.w	r3, r0, #4294967295
   1861a:	f080 810a 	bcs.w	18832 <__udivmoddi4+0x2a2>
   1861e:	45a1      	cmp	r9, r4
   18620:	f240 8107 	bls.w	18832 <__udivmoddi4+0x2a2>
   18624:	3802      	subs	r0, #2
   18626:	443c      	add	r4, r7
   18628:	eba4 0409 	sub.w	r4, r4, r9
   1862c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   18630:	2100      	movs	r1, #0
   18632:	2e00      	cmp	r6, #0
   18634:	d061      	beq.n	186fa <__udivmoddi4+0x16a>
   18636:	fa24 f40e 	lsr.w	r4, r4, lr
   1863a:	2300      	movs	r3, #0
   1863c:	6034      	str	r4, [r6, #0]
   1863e:	6073      	str	r3, [r6, #4]
   18640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18644:	428b      	cmp	r3, r1
   18646:	d907      	bls.n	18658 <__udivmoddi4+0xc8>
   18648:	2e00      	cmp	r6, #0
   1864a:	d054      	beq.n	186f6 <__udivmoddi4+0x166>
   1864c:	2100      	movs	r1, #0
   1864e:	e886 0021 	stmia.w	r6, {r0, r5}
   18652:	4608      	mov	r0, r1
   18654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18658:	fab3 f183 	clz	r1, r3
   1865c:	2900      	cmp	r1, #0
   1865e:	f040 808e 	bne.w	1877e <__udivmoddi4+0x1ee>
   18662:	42ab      	cmp	r3, r5
   18664:	d302      	bcc.n	1866c <__udivmoddi4+0xdc>
   18666:	4282      	cmp	r2, r0
   18668:	f200 80fa 	bhi.w	18860 <__udivmoddi4+0x2d0>
   1866c:	1a84      	subs	r4, r0, r2
   1866e:	eb65 0503 	sbc.w	r5, r5, r3
   18672:	2001      	movs	r0, #1
   18674:	46ac      	mov	ip, r5
   18676:	2e00      	cmp	r6, #0
   18678:	d03f      	beq.n	186fa <__udivmoddi4+0x16a>
   1867a:	e886 1010 	stmia.w	r6, {r4, ip}
   1867e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18682:	b912      	cbnz	r2, 1868a <__udivmoddi4+0xfa>
   18684:	2701      	movs	r7, #1
   18686:	fbb7 f7f2 	udiv	r7, r7, r2
   1868a:	fab7 fe87 	clz	lr, r7
   1868e:	f1be 0f00 	cmp.w	lr, #0
   18692:	d134      	bne.n	186fe <__udivmoddi4+0x16e>
   18694:	1beb      	subs	r3, r5, r7
   18696:	0c3a      	lsrs	r2, r7, #16
   18698:	fa1f fc87 	uxth.w	ip, r7
   1869c:	2101      	movs	r1, #1
   1869e:	fbb3 f8f2 	udiv	r8, r3, r2
   186a2:	0c25      	lsrs	r5, r4, #16
   186a4:	fb02 3318 	mls	r3, r2, r8, r3
   186a8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   186ac:	fb0c f308 	mul.w	r3, ip, r8
   186b0:	42ab      	cmp	r3, r5
   186b2:	d907      	bls.n	186c4 <__udivmoddi4+0x134>
   186b4:	19ed      	adds	r5, r5, r7
   186b6:	f108 30ff 	add.w	r0, r8, #4294967295
   186ba:	d202      	bcs.n	186c2 <__udivmoddi4+0x132>
   186bc:	42ab      	cmp	r3, r5
   186be:	f200 80d1 	bhi.w	18864 <__udivmoddi4+0x2d4>
   186c2:	4680      	mov	r8, r0
   186c4:	1aed      	subs	r5, r5, r3
   186c6:	b2a3      	uxth	r3, r4
   186c8:	fbb5 f0f2 	udiv	r0, r5, r2
   186cc:	fb02 5510 	mls	r5, r2, r0, r5
   186d0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   186d4:	fb0c fc00 	mul.w	ip, ip, r0
   186d8:	45a4      	cmp	ip, r4
   186da:	d907      	bls.n	186ec <__udivmoddi4+0x15c>
   186dc:	19e4      	adds	r4, r4, r7
   186de:	f100 33ff 	add.w	r3, r0, #4294967295
   186e2:	d202      	bcs.n	186ea <__udivmoddi4+0x15a>
   186e4:	45a4      	cmp	ip, r4
   186e6:	f200 80b8 	bhi.w	1885a <__udivmoddi4+0x2ca>
   186ea:	4618      	mov	r0, r3
   186ec:	eba4 040c 	sub.w	r4, r4, ip
   186f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   186f4:	e79d      	b.n	18632 <__udivmoddi4+0xa2>
   186f6:	4631      	mov	r1, r6
   186f8:	4630      	mov	r0, r6
   186fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   186fe:	f1ce 0420 	rsb	r4, lr, #32
   18702:	fa05 f30e 	lsl.w	r3, r5, lr
   18706:	fa07 f70e 	lsl.w	r7, r7, lr
   1870a:	fa20 f804 	lsr.w	r8, r0, r4
   1870e:	0c3a      	lsrs	r2, r7, #16
   18710:	fa25 f404 	lsr.w	r4, r5, r4
   18714:	ea48 0803 	orr.w	r8, r8, r3
   18718:	fbb4 f1f2 	udiv	r1, r4, r2
   1871c:	ea4f 4518 	mov.w	r5, r8, lsr #16
   18720:	fb02 4411 	mls	r4, r2, r1, r4
   18724:	fa1f fc87 	uxth.w	ip, r7
   18728:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1872c:	fb01 f30c 	mul.w	r3, r1, ip
   18730:	42ab      	cmp	r3, r5
   18732:	fa00 f40e 	lsl.w	r4, r0, lr
   18736:	d909      	bls.n	1874c <__udivmoddi4+0x1bc>
   18738:	19ed      	adds	r5, r5, r7
   1873a:	f101 30ff 	add.w	r0, r1, #4294967295
   1873e:	f080 808a 	bcs.w	18856 <__udivmoddi4+0x2c6>
   18742:	42ab      	cmp	r3, r5
   18744:	f240 8087 	bls.w	18856 <__udivmoddi4+0x2c6>
   18748:	3902      	subs	r1, #2
   1874a:	443d      	add	r5, r7
   1874c:	1aeb      	subs	r3, r5, r3
   1874e:	fa1f f588 	uxth.w	r5, r8
   18752:	fbb3 f0f2 	udiv	r0, r3, r2
   18756:	fb02 3310 	mls	r3, r2, r0, r3
   1875a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1875e:	fb00 f30c 	mul.w	r3, r0, ip
   18762:	42ab      	cmp	r3, r5
   18764:	d907      	bls.n	18776 <__udivmoddi4+0x1e6>
   18766:	19ed      	adds	r5, r5, r7
   18768:	f100 38ff 	add.w	r8, r0, #4294967295
   1876c:	d26f      	bcs.n	1884e <__udivmoddi4+0x2be>
   1876e:	42ab      	cmp	r3, r5
   18770:	d96d      	bls.n	1884e <__udivmoddi4+0x2be>
   18772:	3802      	subs	r0, #2
   18774:	443d      	add	r5, r7
   18776:	1aeb      	subs	r3, r5, r3
   18778:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1877c:	e78f      	b.n	1869e <__udivmoddi4+0x10e>
   1877e:	f1c1 0720 	rsb	r7, r1, #32
   18782:	fa22 f807 	lsr.w	r8, r2, r7
   18786:	408b      	lsls	r3, r1
   18788:	fa05 f401 	lsl.w	r4, r5, r1
   1878c:	ea48 0303 	orr.w	r3, r8, r3
   18790:	fa20 fe07 	lsr.w	lr, r0, r7
   18794:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   18798:	40fd      	lsrs	r5, r7
   1879a:	ea4e 0e04 	orr.w	lr, lr, r4
   1879e:	fbb5 f9fc 	udiv	r9, r5, ip
   187a2:	ea4f 441e 	mov.w	r4, lr, lsr #16
   187a6:	fb0c 5519 	mls	r5, ip, r9, r5
   187aa:	fa1f f883 	uxth.w	r8, r3
   187ae:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   187b2:	fb09 f408 	mul.w	r4, r9, r8
   187b6:	42ac      	cmp	r4, r5
   187b8:	fa02 f201 	lsl.w	r2, r2, r1
   187bc:	fa00 fa01 	lsl.w	sl, r0, r1
   187c0:	d908      	bls.n	187d4 <__udivmoddi4+0x244>
   187c2:	18ed      	adds	r5, r5, r3
   187c4:	f109 30ff 	add.w	r0, r9, #4294967295
   187c8:	d243      	bcs.n	18852 <__udivmoddi4+0x2c2>
   187ca:	42ac      	cmp	r4, r5
   187cc:	d941      	bls.n	18852 <__udivmoddi4+0x2c2>
   187ce:	f1a9 0902 	sub.w	r9, r9, #2
   187d2:	441d      	add	r5, r3
   187d4:	1b2d      	subs	r5, r5, r4
   187d6:	fa1f fe8e 	uxth.w	lr, lr
   187da:	fbb5 f0fc 	udiv	r0, r5, ip
   187de:	fb0c 5510 	mls	r5, ip, r0, r5
   187e2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   187e6:	fb00 f808 	mul.w	r8, r0, r8
   187ea:	45a0      	cmp	r8, r4
   187ec:	d907      	bls.n	187fe <__udivmoddi4+0x26e>
   187ee:	18e4      	adds	r4, r4, r3
   187f0:	f100 35ff 	add.w	r5, r0, #4294967295
   187f4:	d229      	bcs.n	1884a <__udivmoddi4+0x2ba>
   187f6:	45a0      	cmp	r8, r4
   187f8:	d927      	bls.n	1884a <__udivmoddi4+0x2ba>
   187fa:	3802      	subs	r0, #2
   187fc:	441c      	add	r4, r3
   187fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   18802:	eba4 0408 	sub.w	r4, r4, r8
   18806:	fba0 8902 	umull	r8, r9, r0, r2
   1880a:	454c      	cmp	r4, r9
   1880c:	46c6      	mov	lr, r8
   1880e:	464d      	mov	r5, r9
   18810:	d315      	bcc.n	1883e <__udivmoddi4+0x2ae>
   18812:	d012      	beq.n	1883a <__udivmoddi4+0x2aa>
   18814:	b156      	cbz	r6, 1882c <__udivmoddi4+0x29c>
   18816:	ebba 030e 	subs.w	r3, sl, lr
   1881a:	eb64 0405 	sbc.w	r4, r4, r5
   1881e:	fa04 f707 	lsl.w	r7, r4, r7
   18822:	40cb      	lsrs	r3, r1
   18824:	431f      	orrs	r7, r3
   18826:	40cc      	lsrs	r4, r1
   18828:	6037      	str	r7, [r6, #0]
   1882a:	6074      	str	r4, [r6, #4]
   1882c:	2100      	movs	r1, #0
   1882e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18832:	4618      	mov	r0, r3
   18834:	e6f8      	b.n	18628 <__udivmoddi4+0x98>
   18836:	4690      	mov	r8, r2
   18838:	e6e0      	b.n	185fc <__udivmoddi4+0x6c>
   1883a:	45c2      	cmp	sl, r8
   1883c:	d2ea      	bcs.n	18814 <__udivmoddi4+0x284>
   1883e:	ebb8 0e02 	subs.w	lr, r8, r2
   18842:	eb69 0503 	sbc.w	r5, r9, r3
   18846:	3801      	subs	r0, #1
   18848:	e7e4      	b.n	18814 <__udivmoddi4+0x284>
   1884a:	4628      	mov	r0, r5
   1884c:	e7d7      	b.n	187fe <__udivmoddi4+0x26e>
   1884e:	4640      	mov	r0, r8
   18850:	e791      	b.n	18776 <__udivmoddi4+0x1e6>
   18852:	4681      	mov	r9, r0
   18854:	e7be      	b.n	187d4 <__udivmoddi4+0x244>
   18856:	4601      	mov	r1, r0
   18858:	e778      	b.n	1874c <__udivmoddi4+0x1bc>
   1885a:	3802      	subs	r0, #2
   1885c:	443c      	add	r4, r7
   1885e:	e745      	b.n	186ec <__udivmoddi4+0x15c>
   18860:	4608      	mov	r0, r1
   18862:	e708      	b.n	18676 <__udivmoddi4+0xe6>
   18864:	f1a8 0802 	sub.w	r8, r8, #2
   18868:	443d      	add	r5, r7
   1886a:	e72b      	b.n	186c4 <__udivmoddi4+0x134>

0001886c <__aeabi_idiv0>:
   1886c:	4770      	bx	lr
   1886e:	bf00      	nop

00018870 <ctime>:
   18870:	b508      	push	{r3, lr}
   18872:	f000 f84d 	bl	18910 <localtime>
   18876:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1887a:	f000 bdc5 	b.w	19408 <asctime>
   1887e:	bf00      	nop

00018880 <__cxa_atexit>:
   18880:	4613      	mov	r3, r2
   18882:	460a      	mov	r2, r1
   18884:	4601      	mov	r1, r0
   18886:	2002      	movs	r0, #2
   18888:	f000 bd52 	b.w	19330 <__register_exitproc>

0001888c <difftime>:
   1888c:	b508      	push	{r3, lr}
   1888e:	1a40      	subs	r0, r0, r1
   18890:	f7ff fa22 	bl	17cd8 <__aeabi_i2d>
   18894:	bd08      	pop	{r3, pc}
   18896:	bf00      	nop

00018898 <__errno>:
   18898:	4b01      	ldr	r3, [pc, #4]	; (188a0 <__errno+0x8>)
   1889a:	6818      	ldr	r0, [r3, #0]
   1889c:	4770      	bx	lr
   1889e:	bf00      	nop
   188a0:	200001dc 	.word	0x200001dc

000188a4 <ffs>:
   188a4:	b140      	cbz	r0, 188b8 <ffs+0x14>
   188a6:	2300      	movs	r3, #0
   188a8:	fa40 f103 	asr.w	r1, r0, r3
   188ac:	1c5a      	adds	r2, r3, #1
   188ae:	07c9      	lsls	r1, r1, #31
   188b0:	4613      	mov	r3, r2
   188b2:	d5f9      	bpl.n	188a8 <ffs+0x4>
   188b4:	4610      	mov	r0, r2
   188b6:	4770      	bx	lr
   188b8:	4602      	mov	r2, r0
   188ba:	4610      	mov	r0, r2
   188bc:	4770      	bx	lr
   188be:	bf00      	nop

000188c0 <__libc_init_array>:
   188c0:	b570      	push	{r4, r5, r6, lr}
   188c2:	4e0f      	ldr	r6, [pc, #60]	; (18900 <__libc_init_array+0x40>)
   188c4:	4d0f      	ldr	r5, [pc, #60]	; (18904 <__libc_init_array+0x44>)
   188c6:	1b76      	subs	r6, r6, r5
   188c8:	10b6      	asrs	r6, r6, #2
   188ca:	bf18      	it	ne
   188cc:	2400      	movne	r4, #0
   188ce:	d005      	beq.n	188dc <__libc_init_array+0x1c>
   188d0:	3401      	adds	r4, #1
   188d2:	f855 3b04 	ldr.w	r3, [r5], #4
   188d6:	4798      	blx	r3
   188d8:	42a6      	cmp	r6, r4
   188da:	d1f9      	bne.n	188d0 <__libc_init_array+0x10>
   188dc:	4e0a      	ldr	r6, [pc, #40]	; (18908 <__libc_init_array+0x48>)
   188de:	4d0b      	ldr	r5, [pc, #44]	; (1890c <__libc_init_array+0x4c>)
   188e0:	1b76      	subs	r6, r6, r5
   188e2:	f005 ffab 	bl	1e83c <_init>
   188e6:	10b6      	asrs	r6, r6, #2
   188e8:	bf18      	it	ne
   188ea:	2400      	movne	r4, #0
   188ec:	d006      	beq.n	188fc <__libc_init_array+0x3c>
   188ee:	3401      	adds	r4, #1
   188f0:	f855 3b04 	ldr.w	r3, [r5], #4
   188f4:	4798      	blx	r3
   188f6:	42a6      	cmp	r6, r4
   188f8:	d1f9      	bne.n	188ee <__libc_init_array+0x2e>
   188fa:	bd70      	pop	{r4, r5, r6, pc}
   188fc:	bd70      	pop	{r4, r5, r6, pc}
   188fe:	bf00      	nop
   18900:	0001e848 	.word	0x0001e848
   18904:	0001e848 	.word	0x0001e848
   18908:	0001e8a8 	.word	0x0001e8a8
   1890c:	0001e848 	.word	0x0001e848

00018910 <localtime>:
   18910:	4b02      	ldr	r3, [pc, #8]	; (1891c <localtime+0xc>)
   18912:	6819      	ldr	r1, [r3, #0]
   18914:	317c      	adds	r1, #124	; 0x7c
   18916:	f000 b803 	b.w	18920 <localtime_r>
   1891a:	bf00      	nop
   1891c:	200001dc 	.word	0x200001dc

00018920 <localtime_r>:
   18920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18924:	460c      	mov	r4, r1
   18926:	4607      	mov	r7, r0
   18928:	f000 fe02 	bl	19530 <__gettzinfo>
   1892c:	4621      	mov	r1, r4
   1892e:	4680      	mov	r8, r0
   18930:	4638      	mov	r0, r7
   18932:	f000 fe01 	bl	19538 <gmtime_r>
   18936:	6946      	ldr	r6, [r0, #20]
   18938:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1893c:	07b1      	lsls	r1, r6, #30
   1893e:	4604      	mov	r4, r0
   18940:	f000 80b9 	beq.w	18ab6 <localtime_r+0x196>
   18944:	17f5      	asrs	r5, r6, #31
   18946:	4b7f      	ldr	r3, [pc, #508]	; (18b44 <localtime_r+0x224>)
   18948:	fb83 2306 	smull	r2, r3, r3, r6
   1894c:	ebc5 15e3 	rsb	r5, r5, r3, asr #7
   18950:	f44f 73c8 	mov.w	r3, #400	; 0x190
   18954:	fb03 6515 	mls	r5, r3, r5, r6
   18958:	2d00      	cmp	r5, #0
   1895a:	bf0c      	ite	eq
   1895c:	2530      	moveq	r5, #48	; 0x30
   1895e:	2500      	movne	r5, #0
   18960:	4b79      	ldr	r3, [pc, #484]	; (18b48 <localtime_r+0x228>)
   18962:	441d      	add	r5, r3
   18964:	f000 fb3c 	bl	18fe0 <__tz_lock>
   18968:	f000 fb46 	bl	18ff8 <_tzset_unlocked>
   1896c:	4b77      	ldr	r3, [pc, #476]	; (18b4c <localtime_r+0x22c>)
   1896e:	681b      	ldr	r3, [r3, #0]
   18970:	b343      	cbz	r3, 189c4 <localtime_r+0xa4>
   18972:	f8d8 3004 	ldr.w	r3, [r8, #4]
   18976:	429e      	cmp	r6, r3
   18978:	d005      	beq.n	18986 <localtime_r+0x66>
   1897a:	4630      	mov	r0, r6
   1897c:	f000 fa6e 	bl	18e5c <__tzcalc_limits>
   18980:	2800      	cmp	r0, #0
   18982:	f000 80a6 	beq.w	18ad2 <localtime_r+0x1b2>
   18986:	f8d8 3000 	ldr.w	r3, [r8]
   1898a:	b983      	cbnz	r3, 189ae <localtime_r+0x8e>
   1898c:	683b      	ldr	r3, [r7, #0]
   1898e:	f8d8 201c 	ldr.w	r2, [r8, #28]
   18992:	4293      	cmp	r3, r2
   18994:	f280 80a1 	bge.w	18ada <localtime_r+0x1ba>
   18998:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   1899c:	4293      	cmp	r3, r2
   1899e:	bfb4      	ite	lt
   189a0:	2301      	movlt	r3, #1
   189a2:	2300      	movge	r3, #0
   189a4:	6223      	str	r3, [r4, #32]
   189a6:	da0e      	bge.n	189c6 <localtime_r+0xa6>
   189a8:	f8d8 603c 	ldr.w	r6, [r8, #60]	; 0x3c
   189ac:	e00d      	b.n	189ca <localtime_r+0xaa>
   189ae:	683b      	ldr	r3, [r7, #0]
   189b0:	f8d8 201c 	ldr.w	r2, [r8, #28]
   189b4:	4293      	cmp	r3, r2
   189b6:	db04      	blt.n	189c2 <localtime_r+0xa2>
   189b8:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   189bc:	4293      	cmp	r3, r2
   189be:	f2c0 808c 	blt.w	18ada <localtime_r+0x1ba>
   189c2:	2300      	movs	r3, #0
   189c4:	6223      	str	r3, [r4, #32]
   189c6:	f8d8 6020 	ldr.w	r6, [r8, #32]
   189ca:	4a61      	ldr	r2, [pc, #388]	; (18b50 <localtime_r+0x230>)
   189cc:	4f61      	ldr	r7, [pc, #388]	; (18b54 <localtime_r+0x234>)
   189ce:	68a1      	ldr	r1, [r4, #8]
   189d0:	fb82 3206 	smull	r3, r2, r2, r6
   189d4:	4432      	add	r2, r6
   189d6:	17f3      	asrs	r3, r6, #31
   189d8:	12d2      	asrs	r2, r2, #11
   189da:	1ad0      	subs	r0, r2, r3
   189dc:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   189e0:	fb0e 6010 	mls	r0, lr, r0, r6
   189e4:	fb87 6700 	smull	r6, r7, r7, r0
   189e8:	183e      	adds	r6, r7, r0
   189ea:	17c7      	asrs	r7, r0, #31
   189ec:	ebc7 1766 	rsb	r7, r7, r6, asr #5
   189f0:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
   189f4:	6826      	ldr	r6, [r4, #0]
   189f6:	1ad3      	subs	r3, r2, r3
   189f8:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
   189fc:	6862      	ldr	r2, [r4, #4]
   189fe:	1a30      	subs	r0, r6, r0
   18a00:	1acb      	subs	r3, r1, r3
   18a02:	1bd2      	subs	r2, r2, r7
   18a04:	283b      	cmp	r0, #59	; 0x3b
   18a06:	e884 000d 	stmia.w	r4, {r0, r2, r3}
   18a0a:	dd4d      	ble.n	18aa8 <localtime_r+0x188>
   18a0c:	3201      	adds	r2, #1
   18a0e:	383c      	subs	r0, #60	; 0x3c
   18a10:	e884 0005 	stmia.w	r4, {r0, r2}
   18a14:	2a3b      	cmp	r2, #59	; 0x3b
   18a16:	dd40      	ble.n	18a9a <localtime_r+0x17a>
   18a18:	3301      	adds	r3, #1
   18a1a:	3a3c      	subs	r2, #60	; 0x3c
   18a1c:	60a3      	str	r3, [r4, #8]
   18a1e:	6062      	str	r2, [r4, #4]
   18a20:	2b17      	cmp	r3, #23
   18a22:	dd1d      	ble.n	18a60 <localtime_r+0x140>
   18a24:	69a2      	ldr	r2, [r4, #24]
   18a26:	69e1      	ldr	r1, [r4, #28]
   18a28:	3201      	adds	r2, #1
   18a2a:	2a06      	cmp	r2, #6
   18a2c:	bfc8      	it	gt
   18a2e:	2200      	movgt	r2, #0
   18a30:	61a2      	str	r2, [r4, #24]
   18a32:	68e2      	ldr	r2, [r4, #12]
   18a34:	3101      	adds	r1, #1
   18a36:	61e1      	str	r1, [r4, #28]
   18a38:	3b18      	subs	r3, #24
   18a3a:	3201      	adds	r2, #1
   18a3c:	6921      	ldr	r1, [r4, #16]
   18a3e:	60a3      	str	r3, [r4, #8]
   18a40:	60e2      	str	r2, [r4, #12]
   18a42:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   18a46:	429a      	cmp	r2, r3
   18a48:	dd05      	ble.n	18a56 <localtime_r+0x136>
   18a4a:	3101      	adds	r1, #1
   18a4c:	1ad2      	subs	r2, r2, r3
   18a4e:	290c      	cmp	r1, #12
   18a50:	60e2      	str	r2, [r4, #12]
   18a52:	d045      	beq.n	18ae0 <localtime_r+0x1c0>
   18a54:	6121      	str	r1, [r4, #16]
   18a56:	f000 fac9 	bl	18fec <__tz_unlock>
   18a5a:	4620      	mov	r0, r4
   18a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18a60:	2b00      	cmp	r3, #0
   18a62:	daf8      	bge.n	18a56 <localtime_r+0x136>
   18a64:	69a2      	ldr	r2, [r4, #24]
   18a66:	69e1      	ldr	r1, [r4, #28]
   18a68:	3a01      	subs	r2, #1
   18a6a:	bf48      	it	mi
   18a6c:	2206      	movmi	r2, #6
   18a6e:	61a2      	str	r2, [r4, #24]
   18a70:	68e2      	ldr	r2, [r4, #12]
   18a72:	3901      	subs	r1, #1
   18a74:	3318      	adds	r3, #24
   18a76:	3a01      	subs	r2, #1
   18a78:	61e1      	str	r1, [r4, #28]
   18a7a:	60a3      	str	r3, [r4, #8]
   18a7c:	60e2      	str	r2, [r4, #12]
   18a7e:	2a00      	cmp	r2, #0
   18a80:	d1e9      	bne.n	18a56 <localtime_r+0x136>
   18a82:	6923      	ldr	r3, [r4, #16]
   18a84:	3b01      	subs	r3, #1
   18a86:	d432      	bmi.n	18aee <localtime_r+0x1ce>
   18a88:	6123      	str	r3, [r4, #16]
   18a8a:	009b      	lsls	r3, r3, #2
   18a8c:	58eb      	ldr	r3, [r5, r3]
   18a8e:	60e3      	str	r3, [r4, #12]
   18a90:	f000 faac 	bl	18fec <__tz_unlock>
   18a94:	4620      	mov	r0, r4
   18a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18a9a:	2a00      	cmp	r2, #0
   18a9c:	dac0      	bge.n	18a20 <localtime_r+0x100>
   18a9e:	3b01      	subs	r3, #1
   18aa0:	323c      	adds	r2, #60	; 0x3c
   18aa2:	60a3      	str	r3, [r4, #8]
   18aa4:	6062      	str	r2, [r4, #4]
   18aa6:	e7bb      	b.n	18a20 <localtime_r+0x100>
   18aa8:	2800      	cmp	r0, #0
   18aaa:	dab3      	bge.n	18a14 <localtime_r+0xf4>
   18aac:	3a01      	subs	r2, #1
   18aae:	303c      	adds	r0, #60	; 0x3c
   18ab0:	e884 0005 	stmia.w	r4, {r0, r2}
   18ab4:	e7ae      	b.n	18a14 <localtime_r+0xf4>
   18ab6:	4b23      	ldr	r3, [pc, #140]	; (18b44 <localtime_r+0x224>)
   18ab8:	17f5      	asrs	r5, r6, #31
   18aba:	fb83 2306 	smull	r2, r3, r3, r6
   18abe:	ebc5 1363 	rsb	r3, r5, r3, asr #5
   18ac2:	2264      	movs	r2, #100	; 0x64
   18ac4:	fb02 6313 	mls	r3, r2, r3, r6
   18ac8:	2b00      	cmp	r3, #0
   18aca:	f43f af3c 	beq.w	18946 <localtime_r+0x26>
   18ace:	2530      	movs	r5, #48	; 0x30
   18ad0:	e746      	b.n	18960 <localtime_r+0x40>
   18ad2:	f04f 33ff 	mov.w	r3, #4294967295
   18ad6:	6223      	str	r3, [r4, #32]
   18ad8:	e775      	b.n	189c6 <localtime_r+0xa6>
   18ada:	2301      	movs	r3, #1
   18adc:	6223      	str	r3, [r4, #32]
   18ade:	e763      	b.n	189a8 <localtime_r+0x88>
   18ae0:	6963      	ldr	r3, [r4, #20]
   18ae2:	2200      	movs	r2, #0
   18ae4:	3301      	adds	r3, #1
   18ae6:	6163      	str	r3, [r4, #20]
   18ae8:	6122      	str	r2, [r4, #16]
   18aea:	61e2      	str	r2, [r4, #28]
   18aec:	e7b3      	b.n	18a56 <localtime_r+0x136>
   18aee:	6963      	ldr	r3, [r4, #20]
   18af0:	1e5a      	subs	r2, r3, #1
   18af2:	210b      	movs	r1, #11
   18af4:	6162      	str	r2, [r4, #20]
   18af6:	0792      	lsls	r2, r2, #30
   18af8:	6121      	str	r1, [r4, #16]
   18afa:	d013      	beq.n	18b24 <localtime_r+0x204>
   18afc:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   18b00:	17d3      	asrs	r3, r2, #31
   18b02:	4910      	ldr	r1, [pc, #64]	; (18b44 <localtime_r+0x224>)
   18b04:	fb81 0102 	smull	r0, r1, r1, r2
   18b08:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
   18b0c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   18b10:	fb01 2313 	mls	r3, r1, r3, r2
   18b14:	fab3 f383 	clz	r3, r3
   18b18:	095b      	lsrs	r3, r3, #5
   18b1a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   18b1e:	61e3      	str	r3, [r4, #28]
   18b20:	232c      	movs	r3, #44	; 0x2c
   18b22:	e7b3      	b.n	18a8c <localtime_r+0x16c>
   18b24:	4907      	ldr	r1, [pc, #28]	; (18b44 <localtime_r+0x224>)
   18b26:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   18b2a:	fb81 3102 	smull	r3, r1, r1, r2
   18b2e:	17d3      	asrs	r3, r2, #31
   18b30:	ebc3 1161 	rsb	r1, r3, r1, asr #5
   18b34:	2064      	movs	r0, #100	; 0x64
   18b36:	fb00 2111 	mls	r1, r0, r1, r2
   18b3a:	2900      	cmp	r1, #0
   18b3c:	d0e1      	beq.n	18b02 <localtime_r+0x1e2>
   18b3e:	f240 136d 	movw	r3, #365	; 0x16d
   18b42:	e7ec      	b.n	18b1e <localtime_r+0x1fe>
   18b44:	51eb851f 	.word	0x51eb851f
   18b48:	0001e5a4 	.word	0x0001e5a4
   18b4c:	20005594 	.word	0x20005594
   18b50:	91a2b3c5 	.word	0x91a2b3c5
   18b54:	88888889 	.word	0x88888889

00018b58 <memcpy>:
   18b58:	4684      	mov	ip, r0
   18b5a:	ea41 0300 	orr.w	r3, r1, r0
   18b5e:	f013 0303 	ands.w	r3, r3, #3
   18b62:	d16d      	bne.n	18c40 <memcpy+0xe8>
   18b64:	3a40      	subs	r2, #64	; 0x40
   18b66:	d341      	bcc.n	18bec <memcpy+0x94>
   18b68:	f851 3b04 	ldr.w	r3, [r1], #4
   18b6c:	f840 3b04 	str.w	r3, [r0], #4
   18b70:	f851 3b04 	ldr.w	r3, [r1], #4
   18b74:	f840 3b04 	str.w	r3, [r0], #4
   18b78:	f851 3b04 	ldr.w	r3, [r1], #4
   18b7c:	f840 3b04 	str.w	r3, [r0], #4
   18b80:	f851 3b04 	ldr.w	r3, [r1], #4
   18b84:	f840 3b04 	str.w	r3, [r0], #4
   18b88:	f851 3b04 	ldr.w	r3, [r1], #4
   18b8c:	f840 3b04 	str.w	r3, [r0], #4
   18b90:	f851 3b04 	ldr.w	r3, [r1], #4
   18b94:	f840 3b04 	str.w	r3, [r0], #4
   18b98:	f851 3b04 	ldr.w	r3, [r1], #4
   18b9c:	f840 3b04 	str.w	r3, [r0], #4
   18ba0:	f851 3b04 	ldr.w	r3, [r1], #4
   18ba4:	f840 3b04 	str.w	r3, [r0], #4
   18ba8:	f851 3b04 	ldr.w	r3, [r1], #4
   18bac:	f840 3b04 	str.w	r3, [r0], #4
   18bb0:	f851 3b04 	ldr.w	r3, [r1], #4
   18bb4:	f840 3b04 	str.w	r3, [r0], #4
   18bb8:	f851 3b04 	ldr.w	r3, [r1], #4
   18bbc:	f840 3b04 	str.w	r3, [r0], #4
   18bc0:	f851 3b04 	ldr.w	r3, [r1], #4
   18bc4:	f840 3b04 	str.w	r3, [r0], #4
   18bc8:	f851 3b04 	ldr.w	r3, [r1], #4
   18bcc:	f840 3b04 	str.w	r3, [r0], #4
   18bd0:	f851 3b04 	ldr.w	r3, [r1], #4
   18bd4:	f840 3b04 	str.w	r3, [r0], #4
   18bd8:	f851 3b04 	ldr.w	r3, [r1], #4
   18bdc:	f840 3b04 	str.w	r3, [r0], #4
   18be0:	f851 3b04 	ldr.w	r3, [r1], #4
   18be4:	f840 3b04 	str.w	r3, [r0], #4
   18be8:	3a40      	subs	r2, #64	; 0x40
   18bea:	d2bd      	bcs.n	18b68 <memcpy+0x10>
   18bec:	3230      	adds	r2, #48	; 0x30
   18bee:	d311      	bcc.n	18c14 <memcpy+0xbc>
   18bf0:	f851 3b04 	ldr.w	r3, [r1], #4
   18bf4:	f840 3b04 	str.w	r3, [r0], #4
   18bf8:	f851 3b04 	ldr.w	r3, [r1], #4
   18bfc:	f840 3b04 	str.w	r3, [r0], #4
   18c00:	f851 3b04 	ldr.w	r3, [r1], #4
   18c04:	f840 3b04 	str.w	r3, [r0], #4
   18c08:	f851 3b04 	ldr.w	r3, [r1], #4
   18c0c:	f840 3b04 	str.w	r3, [r0], #4
   18c10:	3a10      	subs	r2, #16
   18c12:	d2ed      	bcs.n	18bf0 <memcpy+0x98>
   18c14:	320c      	adds	r2, #12
   18c16:	d305      	bcc.n	18c24 <memcpy+0xcc>
   18c18:	f851 3b04 	ldr.w	r3, [r1], #4
   18c1c:	f840 3b04 	str.w	r3, [r0], #4
   18c20:	3a04      	subs	r2, #4
   18c22:	d2f9      	bcs.n	18c18 <memcpy+0xc0>
   18c24:	3204      	adds	r2, #4
   18c26:	d008      	beq.n	18c3a <memcpy+0xe2>
   18c28:	07d2      	lsls	r2, r2, #31
   18c2a:	bf1c      	itt	ne
   18c2c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   18c30:	f800 3b01 	strbne.w	r3, [r0], #1
   18c34:	d301      	bcc.n	18c3a <memcpy+0xe2>
   18c36:	880b      	ldrh	r3, [r1, #0]
   18c38:	8003      	strh	r3, [r0, #0]
   18c3a:	4660      	mov	r0, ip
   18c3c:	4770      	bx	lr
   18c3e:	bf00      	nop
   18c40:	2a08      	cmp	r2, #8
   18c42:	d313      	bcc.n	18c6c <memcpy+0x114>
   18c44:	078b      	lsls	r3, r1, #30
   18c46:	d08d      	beq.n	18b64 <memcpy+0xc>
   18c48:	f010 0303 	ands.w	r3, r0, #3
   18c4c:	d08a      	beq.n	18b64 <memcpy+0xc>
   18c4e:	f1c3 0304 	rsb	r3, r3, #4
   18c52:	1ad2      	subs	r2, r2, r3
   18c54:	07db      	lsls	r3, r3, #31
   18c56:	bf1c      	itt	ne
   18c58:	f811 3b01 	ldrbne.w	r3, [r1], #1
   18c5c:	f800 3b01 	strbne.w	r3, [r0], #1
   18c60:	d380      	bcc.n	18b64 <memcpy+0xc>
   18c62:	f831 3b02 	ldrh.w	r3, [r1], #2
   18c66:	f820 3b02 	strh.w	r3, [r0], #2
   18c6a:	e77b      	b.n	18b64 <memcpy+0xc>
   18c6c:	3a04      	subs	r2, #4
   18c6e:	d3d9      	bcc.n	18c24 <memcpy+0xcc>
   18c70:	3a01      	subs	r2, #1
   18c72:	f811 3b01 	ldrb.w	r3, [r1], #1
   18c76:	f800 3b01 	strb.w	r3, [r0], #1
   18c7a:	d2f9      	bcs.n	18c70 <memcpy+0x118>
   18c7c:	780b      	ldrb	r3, [r1, #0]
   18c7e:	7003      	strb	r3, [r0, #0]
   18c80:	784b      	ldrb	r3, [r1, #1]
   18c82:	7043      	strb	r3, [r0, #1]
   18c84:	788b      	ldrb	r3, [r1, #2]
   18c86:	7083      	strb	r3, [r0, #2]
   18c88:	4660      	mov	r0, ip
   18c8a:	4770      	bx	lr

00018c8c <memset>:
   18c8c:	b470      	push	{r4, r5, r6}
   18c8e:	0786      	lsls	r6, r0, #30
   18c90:	d046      	beq.n	18d20 <memset+0x94>
   18c92:	1e54      	subs	r4, r2, #1
   18c94:	2a00      	cmp	r2, #0
   18c96:	d041      	beq.n	18d1c <memset+0x90>
   18c98:	b2ca      	uxtb	r2, r1
   18c9a:	4603      	mov	r3, r0
   18c9c:	e002      	b.n	18ca4 <memset+0x18>
   18c9e:	f114 34ff 	adds.w	r4, r4, #4294967295
   18ca2:	d33b      	bcc.n	18d1c <memset+0x90>
   18ca4:	f803 2b01 	strb.w	r2, [r3], #1
   18ca8:	079d      	lsls	r5, r3, #30
   18caa:	d1f8      	bne.n	18c9e <memset+0x12>
   18cac:	2c03      	cmp	r4, #3
   18cae:	d92e      	bls.n	18d0e <memset+0x82>
   18cb0:	b2cd      	uxtb	r5, r1
   18cb2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   18cb6:	2c0f      	cmp	r4, #15
   18cb8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   18cbc:	d919      	bls.n	18cf2 <memset+0x66>
   18cbe:	f103 0210 	add.w	r2, r3, #16
   18cc2:	4626      	mov	r6, r4
   18cc4:	3e10      	subs	r6, #16
   18cc6:	2e0f      	cmp	r6, #15
   18cc8:	f842 5c10 	str.w	r5, [r2, #-16]
   18ccc:	f842 5c0c 	str.w	r5, [r2, #-12]
   18cd0:	f842 5c08 	str.w	r5, [r2, #-8]
   18cd4:	f842 5c04 	str.w	r5, [r2, #-4]
   18cd8:	f102 0210 	add.w	r2, r2, #16
   18cdc:	d8f2      	bhi.n	18cc4 <memset+0x38>
   18cde:	f1a4 0210 	sub.w	r2, r4, #16
   18ce2:	f022 020f 	bic.w	r2, r2, #15
   18ce6:	f004 040f 	and.w	r4, r4, #15
   18cea:	3210      	adds	r2, #16
   18cec:	2c03      	cmp	r4, #3
   18cee:	4413      	add	r3, r2
   18cf0:	d90d      	bls.n	18d0e <memset+0x82>
   18cf2:	461e      	mov	r6, r3
   18cf4:	4622      	mov	r2, r4
   18cf6:	3a04      	subs	r2, #4
   18cf8:	2a03      	cmp	r2, #3
   18cfa:	f846 5b04 	str.w	r5, [r6], #4
   18cfe:	d8fa      	bhi.n	18cf6 <memset+0x6a>
   18d00:	1f22      	subs	r2, r4, #4
   18d02:	f022 0203 	bic.w	r2, r2, #3
   18d06:	3204      	adds	r2, #4
   18d08:	4413      	add	r3, r2
   18d0a:	f004 0403 	and.w	r4, r4, #3
   18d0e:	b12c      	cbz	r4, 18d1c <memset+0x90>
   18d10:	b2c9      	uxtb	r1, r1
   18d12:	441c      	add	r4, r3
   18d14:	f803 1b01 	strb.w	r1, [r3], #1
   18d18:	429c      	cmp	r4, r3
   18d1a:	d1fb      	bne.n	18d14 <memset+0x88>
   18d1c:	bc70      	pop	{r4, r5, r6}
   18d1e:	4770      	bx	lr
   18d20:	4614      	mov	r4, r2
   18d22:	4603      	mov	r3, r0
   18d24:	e7c2      	b.n	18cac <memset+0x20>
   18d26:	bf00      	nop

00018d28 <rand>:
   18d28:	b410      	push	{r4}
   18d2a:	4b0c      	ldr	r3, [pc, #48]	; (18d5c <rand+0x34>)
   18d2c:	480c      	ldr	r0, [pc, #48]	; (18d60 <rand+0x38>)
   18d2e:	6819      	ldr	r1, [r3, #0]
   18d30:	4c0c      	ldr	r4, [pc, #48]	; (18d64 <rand+0x3c>)
   18d32:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   18d36:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   18d3a:	fb00 f002 	mul.w	r0, r0, r2
   18d3e:	fb04 0003 	mla	r0, r4, r3, r0
   18d42:	fba2 2304 	umull	r2, r3, r2, r4
   18d46:	4403      	add	r3, r0
   18d48:	3201      	adds	r2, #1
   18d4a:	f143 0300 	adc.w	r3, r3, #0
   18d4e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   18d52:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   18d56:	bc10      	pop	{r4}
   18d58:	4770      	bx	lr
   18d5a:	bf00      	nop
   18d5c:	200001dc 	.word	0x200001dc
   18d60:	5851f42d 	.word	0x5851f42d
   18d64:	4c957f2d 	.word	0x4c957f2d
	...

00018d80 <strlen>:
   18d80:	f890 f000 	pld	[r0]
   18d84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   18d88:	f020 0107 	bic.w	r1, r0, #7
   18d8c:	f06f 0c00 	mvn.w	ip, #0
   18d90:	f010 0407 	ands.w	r4, r0, #7
   18d94:	f891 f020 	pld	[r1, #32]
   18d98:	f040 8049 	bne.w	18e2e <strlen+0xae>
   18d9c:	f04f 0400 	mov.w	r4, #0
   18da0:	f06f 0007 	mvn.w	r0, #7
   18da4:	e9d1 2300 	ldrd	r2, r3, [r1]
   18da8:	f891 f040 	pld	[r1, #64]	; 0x40
   18dac:	f100 0008 	add.w	r0, r0, #8
   18db0:	fa82 f24c 	uadd8	r2, r2, ip
   18db4:	faa4 f28c 	sel	r2, r4, ip
   18db8:	fa83 f34c 	uadd8	r3, r3, ip
   18dbc:	faa2 f38c 	sel	r3, r2, ip
   18dc0:	bb4b      	cbnz	r3, 18e16 <strlen+0x96>
   18dc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   18dc6:	fa82 f24c 	uadd8	r2, r2, ip
   18dca:	f100 0008 	add.w	r0, r0, #8
   18dce:	faa4 f28c 	sel	r2, r4, ip
   18dd2:	fa83 f34c 	uadd8	r3, r3, ip
   18dd6:	faa2 f38c 	sel	r3, r2, ip
   18dda:	b9e3      	cbnz	r3, 18e16 <strlen+0x96>
   18ddc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   18de0:	fa82 f24c 	uadd8	r2, r2, ip
   18de4:	f100 0008 	add.w	r0, r0, #8
   18de8:	faa4 f28c 	sel	r2, r4, ip
   18dec:	fa83 f34c 	uadd8	r3, r3, ip
   18df0:	faa2 f38c 	sel	r3, r2, ip
   18df4:	b97b      	cbnz	r3, 18e16 <strlen+0x96>
   18df6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   18dfa:	f101 0120 	add.w	r1, r1, #32
   18dfe:	fa82 f24c 	uadd8	r2, r2, ip
   18e02:	f100 0008 	add.w	r0, r0, #8
   18e06:	faa4 f28c 	sel	r2, r4, ip
   18e0a:	fa83 f34c 	uadd8	r3, r3, ip
   18e0e:	faa2 f38c 	sel	r3, r2, ip
   18e12:	2b00      	cmp	r3, #0
   18e14:	d0c6      	beq.n	18da4 <strlen+0x24>
   18e16:	2a00      	cmp	r2, #0
   18e18:	bf04      	itt	eq
   18e1a:	3004      	addeq	r0, #4
   18e1c:	461a      	moveq	r2, r3
   18e1e:	ba12      	rev	r2, r2
   18e20:	fab2 f282 	clz	r2, r2
   18e24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   18e28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   18e2c:	4770      	bx	lr
   18e2e:	e9d1 2300 	ldrd	r2, r3, [r1]
   18e32:	f004 0503 	and.w	r5, r4, #3
   18e36:	f1c4 0000 	rsb	r0, r4, #0
   18e3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   18e3e:	f014 0f04 	tst.w	r4, #4
   18e42:	f891 f040 	pld	[r1, #64]	; 0x40
   18e46:	fa0c f505 	lsl.w	r5, ip, r5
   18e4a:	ea62 0205 	orn	r2, r2, r5
   18e4e:	bf1c      	itt	ne
   18e50:	ea63 0305 	ornne	r3, r3, r5
   18e54:	4662      	movne	r2, ip
   18e56:	f04f 0400 	mov.w	r4, #0
   18e5a:	e7a9      	b.n	18db0 <strlen+0x30>

00018e5c <__tzcalc_limits>:
   18e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e60:	b083      	sub	sp, #12
   18e62:	4605      	mov	r5, r0
   18e64:	f000 fb64 	bl	19530 <__gettzinfo>
   18e68:	f240 73b1 	movw	r3, #1969	; 0x7b1
   18e6c:	429d      	cmp	r5, r3
   18e6e:	f340 8093 	ble.w	18f98 <__tzcalc_limits+0x13c>
   18e72:	4c57      	ldr	r4, [pc, #348]	; (18fd0 <__tzcalc_limits+0x174>)
   18e74:	f8df 8164 	ldr.w	r8, [pc, #356]	; 18fdc <__tzcalc_limits+0x180>
   18e78:	6045      	str	r5, [r0, #4]
   18e7a:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   18e7e:	18ee      	adds	r6, r5, r3
   18e80:	f2a5 726d 	subw	r2, r5, #1901	; 0x76d
   18e84:	fb84 3102 	smull	r3, r1, r4, r2
   18e88:	10b7      	asrs	r7, r6, #2
   18e8a:	f240 1e6d 	movw	lr, #365	; 0x16d
   18e8e:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
   18e92:	f2a5 76b2 	subw	r6, r5, #1970	; 0x7b2
   18e96:	17d2      	asrs	r2, r2, #31
   18e98:	eb05 030c 	add.w	r3, r5, ip
   18e9c:	fb0e 7606 	mla	r6, lr, r6, r7
   18ea0:	eba2 1261 	sub.w	r2, r2, r1, asr #5
   18ea4:	17ef      	asrs	r7, r5, #31
   18ea6:	fb84 c105 	smull	ip, r1, r4, r5
   18eaa:	4416      	add	r6, r2
   18eac:	fb84 e403 	smull	lr, r4, r4, r3
   18eb0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   18eb4:	ebc7 1ee1 	rsb	lr, r7, r1, asr #7
   18eb8:	17db      	asrs	r3, r3, #31
   18eba:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
   18ebe:	fb02 5e1e 	mls	lr, r2, lr, r5
   18ec2:	ebc7 1761 	rsb	r7, r7, r1, asr #5
   18ec6:	2264      	movs	r2, #100	; 0x64
   18ec8:	441e      	add	r6, r3
   18eca:	f1be 0f00 	cmp.w	lr, #0
   18ece:	bf0c      	ite	eq
   18ed0:	2330      	moveq	r3, #48	; 0x30
   18ed2:	2300      	movne	r3, #0
   18ed4:	fb02 5717 	mls	r7, r2, r7, r5
   18ed8:	9301      	str	r3, [sp, #4]
   18eda:	f005 0503 	and.w	r5, r5, #3
   18ede:	4604      	mov	r4, r0
   18ee0:	f100 0c38 	add.w	ip, r0, #56	; 0x38
   18ee4:	7a23      	ldrb	r3, [r4, #8]
   18ee6:	2b4a      	cmp	r3, #74	; 0x4a
   18ee8:	d05a      	beq.n	18fa0 <__tzcalc_limits+0x144>
   18eea:	2b44      	cmp	r3, #68	; 0x44
   18eec:	d068      	beq.n	18fc0 <__tzcalc_limits+0x164>
   18eee:	2d00      	cmp	r5, #0
   18ef0:	d04b      	beq.n	18f8a <__tzcalc_limits+0x12e>
   18ef2:	f8dd 9004 	ldr.w	r9, [sp, #4]
   18ef6:	68e3      	ldr	r3, [r4, #12]
   18ef8:	4a36      	ldr	r2, [pc, #216]	; (18fd4 <__tzcalc_limits+0x178>)
   18efa:	2b01      	cmp	r3, #1
   18efc:	4491      	add	r9, r2
   18efe:	dd62      	ble.n	18fc6 <__tzcalc_limits+0x16a>
   18f00:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
   18f04:	f1ab 0b02 	sub.w	fp, fp, #2
   18f08:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   18f0c:	eb09 0a0b 	add.w	sl, r9, fp
   18f10:	f1a9 0304 	sub.w	r3, r9, #4
   18f14:	4632      	mov	r2, r6
   18f16:	f853 1f04 	ldr.w	r1, [r3, #4]!
   18f1a:	459a      	cmp	sl, r3
   18f1c:	440a      	add	r2, r1
   18f1e:	d1fa      	bne.n	18f16 <__tzcalc_limits+0xba>
   18f20:	f10b 0b04 	add.w	fp, fp, #4
   18f24:	4b2c      	ldr	r3, [pc, #176]	; (18fd8 <__tzcalc_limits+0x17c>)
   18f26:	f859 900b 	ldr.w	r9, [r9, fp]
   18f2a:	1d11      	adds	r1, r2, #4
   18f2c:	fb83 a301 	smull	sl, r3, r3, r1
   18f30:	440b      	add	r3, r1
   18f32:	ea4f 7ae1 	mov.w	sl, r1, asr #31
   18f36:	ebca 0aa3 	rsb	sl, sl, r3, asr #2
   18f3a:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
   18f3e:	6963      	ldr	r3, [r4, #20]
   18f40:	eba1 010a 	sub.w	r1, r1, sl
   18f44:	1a59      	subs	r1, r3, r1
   18f46:	6923      	ldr	r3, [r4, #16]
   18f48:	f103 33ff 	add.w	r3, r3, #4294967295
   18f4c:	bf48      	it	mi
   18f4e:	3107      	addmi	r1, #7
   18f50:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18f54:	440b      	add	r3, r1
   18f56:	454b      	cmp	r3, r9
   18f58:	db02      	blt.n	18f60 <__tzcalc_limits+0x104>
   18f5a:	3b07      	subs	r3, #7
   18f5c:	454b      	cmp	r3, r9
   18f5e:	dafc      	bge.n	18f5a <__tzcalc_limits+0xfe>
   18f60:	441a      	add	r2, r3
   18f62:	69a1      	ldr	r1, [r4, #24]
   18f64:	6a23      	ldr	r3, [r4, #32]
   18f66:	fb08 1102 	mla	r1, r8, r2, r1
   18f6a:	440b      	add	r3, r1
   18f6c:	f844 3f1c 	str.w	r3, [r4, #28]!
   18f70:	45a4      	cmp	ip, r4
   18f72:	d1b7      	bne.n	18ee4 <__tzcalc_limits+0x88>
   18f74:	69c3      	ldr	r3, [r0, #28]
   18f76:	6b82      	ldr	r2, [r0, #56]	; 0x38
   18f78:	4293      	cmp	r3, r2
   18f7a:	bfac      	ite	ge
   18f7c:	2300      	movge	r3, #0
   18f7e:	2301      	movlt	r3, #1
   18f80:	6003      	str	r3, [r0, #0]
   18f82:	2001      	movs	r0, #1
   18f84:	b003      	add	sp, #12
   18f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f8a:	9b01      	ldr	r3, [sp, #4]
   18f8c:	2f00      	cmp	r7, #0
   18f8e:	bf0c      	ite	eq
   18f90:	4699      	moveq	r9, r3
   18f92:	f04f 0930 	movne.w	r9, #48	; 0x30
   18f96:	e7ae      	b.n	18ef6 <__tzcalc_limits+0x9a>
   18f98:	2000      	movs	r0, #0
   18f9a:	b003      	add	sp, #12
   18f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fa0:	6962      	ldr	r2, [r4, #20]
   18fa2:	18b1      	adds	r1, r6, r2
   18fa4:	b93d      	cbnz	r5, 18fb6 <__tzcalc_limits+0x15a>
   18fa6:	b137      	cbz	r7, 18fb6 <__tzcalc_limits+0x15a>
   18fa8:	2a3b      	cmp	r2, #59	; 0x3b
   18faa:	bfd4      	ite	le
   18fac:	2200      	movle	r2, #0
   18fae:	2201      	movgt	r2, #1
   18fb0:	440a      	add	r2, r1
   18fb2:	3a01      	subs	r2, #1
   18fb4:	e7d5      	b.n	18f62 <__tzcalc_limits+0x106>
   18fb6:	f1be 0f00 	cmp.w	lr, #0
   18fba:	d0f5      	beq.n	18fa8 <__tzcalc_limits+0x14c>
   18fbc:	2200      	movs	r2, #0
   18fbe:	e7f7      	b.n	18fb0 <__tzcalc_limits+0x154>
   18fc0:	6962      	ldr	r2, [r4, #20]
   18fc2:	4432      	add	r2, r6
   18fc4:	e7cd      	b.n	18f62 <__tzcalc_limits+0x106>
   18fc6:	4632      	mov	r2, r6
   18fc8:	f04f 0b00 	mov.w	fp, #0
   18fcc:	e7aa      	b.n	18f24 <__tzcalc_limits+0xc8>
   18fce:	bf00      	nop
   18fd0:	51eb851f 	.word	0x51eb851f
   18fd4:	0001e5a4 	.word	0x0001e5a4
   18fd8:	92492493 	.word	0x92492493
   18fdc:	00015180 	.word	0x00015180

00018fe0 <__tz_lock>:
   18fe0:	4801      	ldr	r0, [pc, #4]	; (18fe8 <__tz_lock+0x8>)
   18fe2:	f000 bb93 	b.w	1970c <__retarget_lock_acquire>
   18fe6:	bf00      	nop
   18fe8:	200058b4 	.word	0x200058b4

00018fec <__tz_unlock>:
   18fec:	4801      	ldr	r0, [pc, #4]	; (18ff4 <__tz_unlock+0x8>)
   18fee:	f000 bb91 	b.w	19714 <__retarget_lock_release>
   18ff2:	bf00      	nop
   18ff4:	200058b4 	.word	0x200058b4

00018ff8 <_tzset_unlocked>:
   18ff8:	4b01      	ldr	r3, [pc, #4]	; (19000 <_tzset_unlocked+0x8>)
   18ffa:	6818      	ldr	r0, [r3, #0]
   18ffc:	f000 b802 	b.w	19004 <_tzset_unlocked_r>
   19000:	200001dc 	.word	0x200001dc

00019004 <_tzset_unlocked_r>:
   19004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19008:	b08b      	sub	sp, #44	; 0x2c
   1900a:	4607      	mov	r7, r0
   1900c:	f000 fa90 	bl	19530 <__gettzinfo>
   19010:	49bb      	ldr	r1, [pc, #748]	; (19300 <_tzset_unlocked_r+0x2fc>)
   19012:	4dbc      	ldr	r5, [pc, #752]	; (19304 <_tzset_unlocked_r+0x300>)
   19014:	4606      	mov	r6, r0
   19016:	4638      	mov	r0, r7
   19018:	f000 fa82 	bl	19520 <_getenv_r>
   1901c:	4604      	mov	r4, r0
   1901e:	2800      	cmp	r0, #0
   19020:	f000 80f7 	beq.w	19212 <_tzset_unlocked_r+0x20e>
   19024:	6829      	ldr	r1, [r5, #0]
   19026:	b131      	cbz	r1, 19036 <_tzset_unlocked_r+0x32>
   19028:	f000 fefe 	bl	19e28 <strcmp>
   1902c:	b910      	cbnz	r0, 19034 <_tzset_unlocked_r+0x30>
   1902e:	b00b      	add	sp, #44	; 0x2c
   19030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19034:	6829      	ldr	r1, [r5, #0]
   19036:	4608      	mov	r0, r1
   19038:	f7f9 f902 	bl	12240 <free>
   1903c:	4620      	mov	r0, r4
   1903e:	f7ff fe9f 	bl	18d80 <strlen>
   19042:	1c41      	adds	r1, r0, #1
   19044:	4638      	mov	r0, r7
   19046:	f000 fb69 	bl	1971c <_malloc_r>
   1904a:	6028      	str	r0, [r5, #0]
   1904c:	b110      	cbz	r0, 19054 <_tzset_unlocked_r+0x50>
   1904e:	4621      	mov	r1, r4
   19050:	f001 f854 	bl	1a0fc <strcpy>
   19054:	7823      	ldrb	r3, [r4, #0]
   19056:	4aac      	ldr	r2, [pc, #688]	; (19308 <_tzset_unlocked_r+0x304>)
   19058:	49ac      	ldr	r1, [pc, #688]	; (1930c <_tzset_unlocked_r+0x308>)
   1905a:	2b3a      	cmp	r3, #58	; 0x3a
   1905c:	bf08      	it	eq
   1905e:	3401      	addeq	r4, #1
   19060:	ad08      	add	r5, sp, #32
   19062:	462b      	mov	r3, r5
   19064:	4620      	mov	r0, r4
   19066:	f000 fe9f 	bl	19da8 <siscanf>
   1906a:	2800      	cmp	r0, #0
   1906c:	dddf      	ble.n	1902e <_tzset_unlocked_r+0x2a>
   1906e:	9b08      	ldr	r3, [sp, #32]
   19070:	5ce2      	ldrb	r2, [r4, r3]
   19072:	2a2d      	cmp	r2, #45	; 0x2d
   19074:	441c      	add	r4, r3
   19076:	f000 80c8 	beq.w	1920a <_tzset_unlocked_r+0x206>
   1907a:	2a2b      	cmp	r2, #43	; 0x2b
   1907c:	bf08      	it	eq
   1907e:	3401      	addeq	r4, #1
   19080:	f04f 0801 	mov.w	r8, #1
   19084:	ab06      	add	r3, sp, #24
   19086:	9302      	str	r3, [sp, #8]
   19088:	f10d 0316 	add.w	r3, sp, #22
   1908c:	2700      	movs	r7, #0
   1908e:	9300      	str	r3, [sp, #0]
   19090:	9503      	str	r5, [sp, #12]
   19092:	9501      	str	r5, [sp, #4]
   19094:	aa05      	add	r2, sp, #20
   19096:	462b      	mov	r3, r5
   19098:	499d      	ldr	r1, [pc, #628]	; (19310 <_tzset_unlocked_r+0x30c>)
   1909a:	f8ad 7016 	strh.w	r7, [sp, #22]
   1909e:	4620      	mov	r0, r4
   190a0:	f8ad 7018 	strh.w	r7, [sp, #24]
   190a4:	f000 fe80 	bl	19da8 <siscanf>
   190a8:	42b8      	cmp	r0, r7
   190aa:	ddc0      	ble.n	1902e <_tzset_unlocked_r+0x2a>
   190ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   190b0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   190b4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   190b8:	9808      	ldr	r0, [sp, #32]
   190ba:	f8df a26c 	ldr.w	sl, [pc, #620]	; 19328 <_tzset_unlocked_r+0x324>
   190be:	f8df 925c 	ldr.w	r9, [pc, #604]	; 1931c <_tzset_unlocked_r+0x318>
   190c2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   190c6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   190ca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   190ce:	fb01 3302 	mla	r3, r1, r2, r3
   190d2:	fb08 f303 	mul.w	r3, r8, r3
   190d6:	6233      	str	r3, [r6, #32]
   190d8:	4404      	add	r4, r0
   190da:	4b8b      	ldr	r3, [pc, #556]	; (19308 <_tzset_unlocked_r+0x304>)
   190dc:	f8c9 3000 	str.w	r3, [r9]
   190e0:	4620      	mov	r0, r4
   190e2:	4652      	mov	r2, sl
   190e4:	4989      	ldr	r1, [pc, #548]	; (1930c <_tzset_unlocked_r+0x308>)
   190e6:	462b      	mov	r3, r5
   190e8:	f000 fe5e 	bl	19da8 <siscanf>
   190ec:	42b8      	cmp	r0, r7
   190ee:	f340 8082 	ble.w	191f6 <_tzset_unlocked_r+0x1f2>
   190f2:	9808      	ldr	r0, [sp, #32]
   190f4:	f8c9 a004 	str.w	sl, [r9, #4]
   190f8:	5c23      	ldrb	r3, [r4, r0]
   190fa:	2b2d      	cmp	r3, #45	; 0x2d
   190fc:	4404      	add	r4, r0
   190fe:	f000 8095 	beq.w	1922c <_tzset_unlocked_r+0x228>
   19102:	2b2b      	cmp	r3, #43	; 0x2b
   19104:	bf08      	it	eq
   19106:	3401      	addeq	r4, #1
   19108:	f04f 0801 	mov.w	r8, #1
   1910c:	ab06      	add	r3, sp, #24
   1910e:	9302      	str	r3, [sp, #8]
   19110:	f10d 0316 	add.w	r3, sp, #22
   19114:	2700      	movs	r7, #0
   19116:	9300      	str	r3, [sp, #0]
   19118:	9503      	str	r5, [sp, #12]
   1911a:	9501      	str	r5, [sp, #4]
   1911c:	462b      	mov	r3, r5
   1911e:	aa05      	add	r2, sp, #20
   19120:	497b      	ldr	r1, [pc, #492]	; (19310 <_tzset_unlocked_r+0x30c>)
   19122:	f8ad 7014 	strh.w	r7, [sp, #20]
   19126:	4620      	mov	r0, r4
   19128:	f8ad 7016 	strh.w	r7, [sp, #22]
   1912c:	f8ad 7018 	strh.w	r7, [sp, #24]
   19130:	9708      	str	r7, [sp, #32]
   19132:	f000 fe39 	bl	19da8 <siscanf>
   19136:	42b8      	cmp	r0, r7
   19138:	dd7c      	ble.n	19234 <_tzset_unlocked_r+0x230>
   1913a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1913e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   19142:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   19146:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1914a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1914e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   19152:	fb01 3302 	mla	r3, r1, r2, r3
   19156:	fb08 f303 	mul.w	r3, r8, r3
   1915a:	63f3      	str	r3, [r6, #60]	; 0x3c
   1915c:	9b08      	ldr	r3, [sp, #32]
   1915e:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 1932c <_tzset_unlocked_r+0x328>
   19162:	441c      	add	r4, r3
   19164:	46b0      	mov	r8, r6
   19166:	f04f 0a00 	mov.w	sl, #0
   1916a:	7827      	ldrb	r7, [r4, #0]
   1916c:	2f2c      	cmp	r7, #44	; 0x2c
   1916e:	bf04      	itt	eq
   19170:	7867      	ldrbeq	r7, [r4, #1]
   19172:	3401      	addeq	r4, #1
   19174:	2f4d      	cmp	r7, #77	; 0x4d
   19176:	d062      	beq.n	1923e <_tzset_unlocked_r+0x23a>
   19178:	2f4a      	cmp	r7, #74	; 0x4a
   1917a:	bf08      	it	eq
   1917c:	3401      	addeq	r4, #1
   1917e:	f04f 020a 	mov.w	r2, #10
   19182:	a909      	add	r1, sp, #36	; 0x24
   19184:	4620      	mov	r0, r4
   19186:	bf18      	it	ne
   19188:	2744      	movne	r7, #68	; 0x44
   1918a:	f001 f91d 	bl	1a3c8 <strtoul>
   1918e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   19192:	f8ad 001e 	strh.w	r0, [sp, #30]
   19196:	454c      	cmp	r4, r9
   19198:	f000 809c 	beq.w	192d4 <_tzset_unlocked_r+0x2d0>
   1919c:	b280      	uxth	r0, r0
   1919e:	f8c8 0014 	str.w	r0, [r8, #20]
   191a2:	f888 7008 	strb.w	r7, [r8, #8]
   191a6:	2400      	movs	r4, #0
   191a8:	2302      	movs	r3, #2
   191aa:	f8ad 3014 	strh.w	r3, [sp, #20]
   191ae:	f8ad 4016 	strh.w	r4, [sp, #22]
   191b2:	f8ad 4018 	strh.w	r4, [sp, #24]
   191b6:	9408      	str	r4, [sp, #32]
   191b8:	f899 3000 	ldrb.w	r3, [r9]
   191bc:	2b2f      	cmp	r3, #47	; 0x2f
   191be:	d06c      	beq.n	1929a <_tzset_unlocked_r+0x296>
   191c0:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   191c4:	f10a 0a01 	add.w	sl, sl, #1
   191c8:	f1ba 0f02 	cmp.w	sl, #2
   191cc:	f8c8 3018 	str.w	r3, [r8, #24]
   191d0:	444c      	add	r4, r9
   191d2:	f108 081c 	add.w	r8, r8, #28
   191d6:	d1c8      	bne.n	1916a <_tzset_unlocked_r+0x166>
   191d8:	6870      	ldr	r0, [r6, #4]
   191da:	f7ff fe3f 	bl	18e5c <__tzcalc_limits>
   191de:	6a32      	ldr	r2, [r6, #32]
   191e0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   191e2:	484c      	ldr	r0, [pc, #304]	; (19314 <_tzset_unlocked_r+0x310>)
   191e4:	494c      	ldr	r1, [pc, #304]	; (19318 <_tzset_unlocked_r+0x314>)
   191e6:	1a9b      	subs	r3, r3, r2
   191e8:	bf18      	it	ne
   191ea:	2301      	movne	r3, #1
   191ec:	6003      	str	r3, [r0, #0]
   191ee:	600a      	str	r2, [r1, #0]
   191f0:	b00b      	add	sp, #44	; 0x2c
   191f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191f6:	4948      	ldr	r1, [pc, #288]	; (19318 <_tzset_unlocked_r+0x314>)
   191f8:	4a46      	ldr	r2, [pc, #280]	; (19314 <_tzset_unlocked_r+0x310>)
   191fa:	6a30      	ldr	r0, [r6, #32]
   191fc:	f8d9 3000 	ldr.w	r3, [r9]
   19200:	6008      	str	r0, [r1, #0]
   19202:	6017      	str	r7, [r2, #0]
   19204:	f8c9 3004 	str.w	r3, [r9, #4]
   19208:	e711      	b.n	1902e <_tzset_unlocked_r+0x2a>
   1920a:	3401      	adds	r4, #1
   1920c:	f04f 38ff 	mov.w	r8, #4294967295
   19210:	e738      	b.n	19084 <_tzset_unlocked_r+0x80>
   19212:	4b42      	ldr	r3, [pc, #264]	; (1931c <_tzset_unlocked_r+0x318>)
   19214:	493f      	ldr	r1, [pc, #252]	; (19314 <_tzset_unlocked_r+0x310>)
   19216:	4e40      	ldr	r6, [pc, #256]	; (19318 <_tzset_unlocked_r+0x314>)
   19218:	4a41      	ldr	r2, [pc, #260]	; (19320 <_tzset_unlocked_r+0x31c>)
   1921a:	6828      	ldr	r0, [r5, #0]
   1921c:	6034      	str	r4, [r6, #0]
   1921e:	600c      	str	r4, [r1, #0]
   19220:	601a      	str	r2, [r3, #0]
   19222:	605a      	str	r2, [r3, #4]
   19224:	f7f9 f80c 	bl	12240 <free>
   19228:	602c      	str	r4, [r5, #0]
   1922a:	e700      	b.n	1902e <_tzset_unlocked_r+0x2a>
   1922c:	3401      	adds	r4, #1
   1922e:	f04f 38ff 	mov.w	r8, #4294967295
   19232:	e76b      	b.n	1910c <_tzset_unlocked_r+0x108>
   19234:	6a33      	ldr	r3, [r6, #32]
   19236:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   1923a:	63f3      	str	r3, [r6, #60]	; 0x3c
   1923c:	e78e      	b.n	1915c <_tzset_unlocked_r+0x158>
   1923e:	f10d 021e 	add.w	r2, sp, #30
   19242:	ab07      	add	r3, sp, #28
   19244:	9202      	str	r2, [sp, #8]
   19246:	9300      	str	r3, [sp, #0]
   19248:	9503      	str	r5, [sp, #12]
   1924a:	9501      	str	r5, [sp, #4]
   1924c:	462b      	mov	r3, r5
   1924e:	f10d 021a 	add.w	r2, sp, #26
   19252:	4659      	mov	r1, fp
   19254:	4620      	mov	r0, r4
   19256:	f000 fda7 	bl	19da8 <siscanf>
   1925a:	2803      	cmp	r0, #3
   1925c:	f47f aee7 	bne.w	1902e <_tzset_unlocked_r+0x2a>
   19260:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   19264:	1e5a      	subs	r2, r3, #1
   19266:	2a0b      	cmp	r2, #11
   19268:	f63f aee1 	bhi.w	1902e <_tzset_unlocked_r+0x2a>
   1926c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   19270:	1e51      	subs	r1, r2, #1
   19272:	2904      	cmp	r1, #4
   19274:	f63f aedb 	bhi.w	1902e <_tzset_unlocked_r+0x2a>
   19278:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   1927c:	2906      	cmp	r1, #6
   1927e:	f63f aed6 	bhi.w	1902e <_tzset_unlocked_r+0x2a>
   19282:	f888 7008 	strb.w	r7, [r8, #8]
   19286:	f8c8 300c 	str.w	r3, [r8, #12]
   1928a:	f8c8 2010 	str.w	r2, [r8, #16]
   1928e:	f8c8 1014 	str.w	r1, [r8, #20]
   19292:	9b08      	ldr	r3, [sp, #32]
   19294:	eb04 0903 	add.w	r9, r4, r3
   19298:	e785      	b.n	191a6 <_tzset_unlocked_r+0x1a2>
   1929a:	ab06      	add	r3, sp, #24
   1929c:	9302      	str	r3, [sp, #8]
   1929e:	f10d 0316 	add.w	r3, sp, #22
   192a2:	9300      	str	r3, [sp, #0]
   192a4:	aa05      	add	r2, sp, #20
   192a6:	462b      	mov	r3, r5
   192a8:	491e      	ldr	r1, [pc, #120]	; (19324 <_tzset_unlocked_r+0x320>)
   192aa:	9503      	str	r5, [sp, #12]
   192ac:	9501      	str	r5, [sp, #4]
   192ae:	4648      	mov	r0, r9
   192b0:	f000 fd7a 	bl	19da8 <siscanf>
   192b4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   192b8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   192bc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   192c0:	9c08      	ldr	r4, [sp, #32]
   192c2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   192c6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   192ca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   192ce:	fb01 2303 	mla	r3, r1, r3, r2
   192d2:	e777      	b.n	191c4 <_tzset_unlocked_r+0x1c0>
   192d4:	f1ba 0f00 	cmp.w	sl, #0
   192d8:	d009      	beq.n	192ee <_tzset_unlocked_r+0x2ea>
   192da:	224d      	movs	r2, #77	; 0x4d
   192dc:	230b      	movs	r3, #11
   192de:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
   192e2:	62b3      	str	r3, [r6, #40]	; 0x28
   192e4:	2201      	movs	r2, #1
   192e6:	2300      	movs	r3, #0
   192e8:	62f2      	str	r2, [r6, #44]	; 0x2c
   192ea:	6333      	str	r3, [r6, #48]	; 0x30
   192ec:	e75b      	b.n	191a6 <_tzset_unlocked_r+0x1a2>
   192ee:	234d      	movs	r3, #77	; 0x4d
   192f0:	2203      	movs	r2, #3
   192f2:	7233      	strb	r3, [r6, #8]
   192f4:	2302      	movs	r3, #2
   192f6:	f8c6 a014 	str.w	sl, [r6, #20]
   192fa:	60f2      	str	r2, [r6, #12]
   192fc:	6133      	str	r3, [r6, #16]
   192fe:	e752      	b.n	191a6 <_tzset_unlocked_r+0x1a2>
   19300:	0001e604 	.word	0x0001e604
   19304:	20005590 	.word	0x20005590
   19308:	20005584 	.word	0x20005584
   1930c:	0001e60c 	.word	0x0001e60c
   19310:	0001e61c 	.word	0x0001e61c
   19314:	20005594 	.word	0x20005594
   19318:	20005598 	.word	0x20005598
   1931c:	20000608 	.word	0x20000608
   19320:	0001e608 	.word	0x0001e608
   19324:	0001e644 	.word	0x0001e644
   19328:	20005578 	.word	0x20005578
   1932c:	0001e630 	.word	0x0001e630

00019330 <__register_exitproc>:
   19330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19334:	4d2c      	ldr	r5, [pc, #176]	; (193e8 <__register_exitproc+0xb8>)
   19336:	4606      	mov	r6, r0
   19338:	6828      	ldr	r0, [r5, #0]
   1933a:	4698      	mov	r8, r3
   1933c:	460f      	mov	r7, r1
   1933e:	4691      	mov	r9, r2
   19340:	f000 f9e6 	bl	19710 <__retarget_lock_acquire_recursive>
   19344:	4b29      	ldr	r3, [pc, #164]	; (193ec <__register_exitproc+0xbc>)
   19346:	681c      	ldr	r4, [r3, #0]
   19348:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1934c:	2b00      	cmp	r3, #0
   1934e:	d03e      	beq.n	193ce <__register_exitproc+0x9e>
   19350:	685a      	ldr	r2, [r3, #4]
   19352:	2a1f      	cmp	r2, #31
   19354:	dc1c      	bgt.n	19390 <__register_exitproc+0x60>
   19356:	f102 0e01 	add.w	lr, r2, #1
   1935a:	b176      	cbz	r6, 1937a <__register_exitproc+0x4a>
   1935c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   19360:	2401      	movs	r4, #1
   19362:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   19366:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   1936a:	4094      	lsls	r4, r2
   1936c:	4320      	orrs	r0, r4
   1936e:	2e02      	cmp	r6, #2
   19370:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   19374:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   19378:	d023      	beq.n	193c2 <__register_exitproc+0x92>
   1937a:	3202      	adds	r2, #2
   1937c:	f8c3 e004 	str.w	lr, [r3, #4]
   19380:	6828      	ldr	r0, [r5, #0]
   19382:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   19386:	f000 f9c7 	bl	19718 <__retarget_lock_release_recursive>
   1938a:	2000      	movs	r0, #0
   1938c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19390:	4b17      	ldr	r3, [pc, #92]	; (193f0 <__register_exitproc+0xc0>)
   19392:	b30b      	cbz	r3, 193d8 <__register_exitproc+0xa8>
   19394:	f44f 70c8 	mov.w	r0, #400	; 0x190
   19398:	f7f8 ff48 	bl	1222c <malloc>
   1939c:	4603      	mov	r3, r0
   1939e:	b1d8      	cbz	r0, 193d8 <__register_exitproc+0xa8>
   193a0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   193a4:	6002      	str	r2, [r0, #0]
   193a6:	2100      	movs	r1, #0
   193a8:	6041      	str	r1, [r0, #4]
   193aa:	460a      	mov	r2, r1
   193ac:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   193b0:	f04f 0e01 	mov.w	lr, #1
   193b4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   193b8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   193bc:	2e00      	cmp	r6, #0
   193be:	d0dc      	beq.n	1937a <__register_exitproc+0x4a>
   193c0:	e7cc      	b.n	1935c <__register_exitproc+0x2c>
   193c2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   193c6:	430c      	orrs	r4, r1
   193c8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   193cc:	e7d5      	b.n	1937a <__register_exitproc+0x4a>
   193ce:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   193d2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   193d6:	e7bb      	b.n	19350 <__register_exitproc+0x20>
   193d8:	6828      	ldr	r0, [r5, #0]
   193da:	f000 f99d 	bl	19718 <__retarget_lock_release_recursive>
   193de:	f04f 30ff 	mov.w	r0, #4294967295
   193e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   193e6:	bf00      	nop
   193e8:	20000610 	.word	0x20000610
   193ec:	0001e5a0 	.word	0x0001e5a0
   193f0:	0001222d 	.word	0x0001222d

000193f4 <register_fini>:
   193f4:	4b02      	ldr	r3, [pc, #8]	; (19400 <register_fini+0xc>)
   193f6:	b113      	cbz	r3, 193fe <register_fini+0xa>
   193f8:	4802      	ldr	r0, [pc, #8]	; (19404 <register_fini+0x10>)
   193fa:	f000 b833 	b.w	19464 <atexit>
   193fe:	4770      	bx	lr
   19400:	00000000 	.word	0x00000000
   19404:	00019471 	.word	0x00019471

00019408 <asctime>:
   19408:	4b02      	ldr	r3, [pc, #8]	; (19414 <asctime+0xc>)
   1940a:	6819      	ldr	r1, [r3, #0]
   1940c:	3160      	adds	r1, #96	; 0x60
   1940e:	f000 b803 	b.w	19418 <asctime_r>
   19412:	bf00      	nop
   19414:	200001dc 	.word	0x200001dc

00019418 <asctime_r>:
   19418:	b5f0      	push	{r4, r5, r6, r7, lr}
   1941a:	6946      	ldr	r6, [r0, #20]
   1941c:	6807      	ldr	r7, [r0, #0]
   1941e:	6905      	ldr	r5, [r0, #16]
   19420:	6984      	ldr	r4, [r0, #24]
   19422:	4b0d      	ldr	r3, [pc, #52]	; (19458 <asctime_r+0x40>)
   19424:	4a0d      	ldr	r2, [pc, #52]	; (1945c <asctime_r+0x44>)
   19426:	b087      	sub	sp, #28
   19428:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1942c:	9703      	str	r7, [sp, #12]
   1942e:	460f      	mov	r7, r1
   19430:	6841      	ldr	r1, [r0, #4]
   19432:	9604      	str	r6, [sp, #16]
   19434:	6886      	ldr	r6, [r0, #8]
   19436:	68c0      	ldr	r0, [r0, #12]
   19438:	9102      	str	r1, [sp, #8]
   1943a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1943e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   19442:	e88d 0041 	stmia.w	sp, {r0, r6}
   19446:	442b      	add	r3, r5
   19448:	4422      	add	r2, r4
   1944a:	4638      	mov	r0, r7
   1944c:	4904      	ldr	r1, [pc, #16]	; (19460 <asctime_r+0x48>)
   1944e:	f000 fc85 	bl	19d5c <siprintf>
   19452:	4638      	mov	r0, r7
   19454:	b007      	add	sp, #28
   19456:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19458:	0001e690 	.word	0x0001e690
   1945c:	0001e678 	.word	0x0001e678
   19460:	0001e658 	.word	0x0001e658

00019464 <atexit>:
   19464:	2300      	movs	r3, #0
   19466:	4601      	mov	r1, r0
   19468:	461a      	mov	r2, r3
   1946a:	4618      	mov	r0, r3
   1946c:	f7ff bf60 	b.w	19330 <__register_exitproc>

00019470 <__libc_fini_array>:
   19470:	b538      	push	{r3, r4, r5, lr}
   19472:	4c0a      	ldr	r4, [pc, #40]	; (1949c <__libc_fini_array+0x2c>)
   19474:	4d0a      	ldr	r5, [pc, #40]	; (194a0 <__libc_fini_array+0x30>)
   19476:	1b64      	subs	r4, r4, r5
   19478:	10a4      	asrs	r4, r4, #2
   1947a:	d00a      	beq.n	19492 <__libc_fini_array+0x22>
   1947c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   19480:	3b01      	subs	r3, #1
   19482:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   19486:	3c01      	subs	r4, #1
   19488:	f855 3904 	ldr.w	r3, [r5], #-4
   1948c:	4798      	blx	r3
   1948e:	2c00      	cmp	r4, #0
   19490:	d1f9      	bne.n	19486 <__libc_fini_array+0x16>
   19492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19496:	f005 ba07 	b.w	1e8a8 <_fini>
   1949a:	bf00      	nop
   1949c:	0001e8b8 	.word	0x0001e8b8
   194a0:	0001e8b4 	.word	0x0001e8b4

000194a4 <_findenv_r>:
   194a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   194a8:	4f1c      	ldr	r7, [pc, #112]	; (1951c <_findenv_r+0x78>)
   194aa:	460e      	mov	r6, r1
   194ac:	4691      	mov	r9, r2
   194ae:	4680      	mov	r8, r0
   194b0:	f002 faf2 	bl	1ba98 <__env_lock>
   194b4:	683d      	ldr	r5, [r7, #0]
   194b6:	b1f5      	cbz	r5, 194f6 <_findenv_r+0x52>
   194b8:	7834      	ldrb	r4, [r6, #0]
   194ba:	b15c      	cbz	r4, 194d4 <_findenv_r+0x30>
   194bc:	2c3d      	cmp	r4, #61	; 0x3d
   194be:	bf18      	it	ne
   194c0:	4634      	movne	r4, r6
   194c2:	d102      	bne.n	194ca <_findenv_r+0x26>
   194c4:	e017      	b.n	194f6 <_findenv_r+0x52>
   194c6:	2b3d      	cmp	r3, #61	; 0x3d
   194c8:	d015      	beq.n	194f6 <_findenv_r+0x52>
   194ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   194ce:	2b00      	cmp	r3, #0
   194d0:	d1f9      	bne.n	194c6 <_findenv_r+0x22>
   194d2:	1ba4      	subs	r4, r4, r6
   194d4:	6828      	ldr	r0, [r5, #0]
   194d6:	b170      	cbz	r0, 194f6 <_findenv_r+0x52>
   194d8:	4622      	mov	r2, r4
   194da:	4631      	mov	r1, r6
   194dc:	f000 fe6c 	bl	1a1b8 <strncmp>
   194e0:	b928      	cbnz	r0, 194ee <_findenv_r+0x4a>
   194e2:	6828      	ldr	r0, [r5, #0]
   194e4:	5d03      	ldrb	r3, [r0, r4]
   194e6:	2b3d      	cmp	r3, #61	; 0x3d
   194e8:	eb00 0a04 	add.w	sl, r0, r4
   194ec:	d009      	beq.n	19502 <_findenv_r+0x5e>
   194ee:	f855 0f04 	ldr.w	r0, [r5, #4]!
   194f2:	2800      	cmp	r0, #0
   194f4:	d1f0      	bne.n	194d8 <_findenv_r+0x34>
   194f6:	4640      	mov	r0, r8
   194f8:	f002 fad4 	bl	1baa4 <__env_unlock>
   194fc:	2000      	movs	r0, #0
   194fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19502:	683b      	ldr	r3, [r7, #0]
   19504:	1aed      	subs	r5, r5, r3
   19506:	10ad      	asrs	r5, r5, #2
   19508:	4640      	mov	r0, r8
   1950a:	f8c9 5000 	str.w	r5, [r9]
   1950e:	f002 fac9 	bl	1baa4 <__env_unlock>
   19512:	f10a 0001 	add.w	r0, sl, #1
   19516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1951a:	bf00      	nop
   1951c:	20000a64 	.word	0x20000a64

00019520 <_getenv_r>:
   19520:	b500      	push	{lr}
   19522:	b083      	sub	sp, #12
   19524:	aa01      	add	r2, sp, #4
   19526:	f7ff ffbd 	bl	194a4 <_findenv_r>
   1952a:	b003      	add	sp, #12
   1952c:	f85d fb04 	ldr.w	pc, [sp], #4

00019530 <__gettzinfo>:
   19530:	4800      	ldr	r0, [pc, #0]	; (19534 <__gettzinfo+0x4>)
   19532:	4770      	bx	lr
   19534:	20000614 	.word	0x20000614

00019538 <gmtime_r>:
   19538:	6800      	ldr	r0, [r0, #0]
   1953a:	4b65      	ldr	r3, [pc, #404]	; (196d0 <gmtime_r+0x198>)
   1953c:	fb83 2300 	smull	r2, r3, r3, r0
   19540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19544:	4403      	add	r3, r0
   19546:	4d63      	ldr	r5, [pc, #396]	; (196d4 <gmtime_r+0x19c>)
   19548:	17c2      	asrs	r2, r0, #31
   1954a:	ebc2 4323 	rsb	r3, r2, r3, asr #16
   1954e:	fb05 0513 	mls	r5, r5, r3, r0
   19552:	2d00      	cmp	r5, #0
   19554:	f2c0 80b3 	blt.w	196be <gmtime_r+0x186>
   19558:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   1955c:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
   19560:	4e5d      	ldr	r6, [pc, #372]	; (196d8 <gmtime_r+0x1a0>)
   19562:	485e      	ldr	r0, [pc, #376]	; (196dc <gmtime_r+0x1a4>)
   19564:	4a5e      	ldr	r2, [pc, #376]	; (196e0 <gmtime_r+0x1a8>)
   19566:	4c5f      	ldr	r4, [pc, #380]	; (196e4 <gmtime_r+0x1ac>)
   19568:	f8df c18c 	ldr.w	ip, [pc, #396]	; 196f8 <gmtime_r+0x1c0>
   1956c:	f8df e18c 	ldr.w	lr, [pc, #396]	; 196fc <gmtime_r+0x1c4>
   19570:	fb86 7603 	smull	r7, r6, r6, r3
   19574:	17df      	asrs	r7, r3, #31
   19576:	ebc7 36e6 	rsb	r6, r7, r6, asr #15
   1957a:	fb00 3006 	mla	r0, r0, r6, r3
   1957e:	0887      	lsrs	r7, r0, #2
   19580:	fba2 8207 	umull	r8, r2, r2, r7
   19584:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
   19588:	fba4 8707 	umull	r8, r7, r4, r7
   1958c:	ea4f 1810 	mov.w	r8, r0, lsr #4
   19590:	eba2 12d7 	sub.w	r2, r2, r7, lsr #7
   19594:	fbac c708 	umull	ip, r7, ip, r8
   19598:	eba2 1217 	sub.w	r2, r2, r7, lsr #4
   1959c:	f8df c160 	ldr.w	ip, [pc, #352]	; 19700 <gmtime_r+0x1c8>
   195a0:	4f51      	ldr	r7, [pc, #324]	; (196e8 <gmtime_r+0x1b0>)
   195a2:	fbae 8e02 	umull	r8, lr, lr, r2
   195a6:	fbac 9c02 	umull	r9, ip, ip, r2
   195aa:	eba2 080e 	sub.w	r8, r2, lr
   195ae:	0892      	lsrs	r2, r2, #2
   195b0:	eb0e 0e58 	add.w	lr, lr, r8, lsr #1
   195b4:	eb00 30dc 	add.w	r0, r0, ip, lsr #15
   195b8:	fba4 4202 	umull	r4, r2, r4, r2
   195bc:	eba0 12d2 	sub.w	r2, r0, r2, lsr #7
   195c0:	ea4f 241e 	mov.w	r4, lr, lsr #8
   195c4:	f240 106d 	movw	r0, #365	; 0x16d
   195c8:	fb00 2214 	mls	r2, r0, r4, r2
   195cc:	f8df 8134 	ldr.w	r8, [pc, #308]	; 19704 <gmtime_r+0x1cc>
   195d0:	fb87 0e05 	smull	r0, lr, r7, r5
   195d4:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   195d8:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   195dc:	44ae      	add	lr, r5
   195de:	3002      	adds	r0, #2
   195e0:	ebcc 2eee 	rsb	lr, ip, lr, asr #11
   195e4:	4f41      	ldr	r7, [pc, #260]	; (196ec <gmtime_r+0x1b4>)
   195e6:	f8c1 e008 	str.w	lr, [r1, #8]
   195ea:	f103 0c03 	add.w	ip, r3, #3
   195ee:	fba8 3000 	umull	r3, r0, r8, r0
   195f2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   195f6:	fb03 551e 	mls	r5, r3, lr, r5
   195fa:	4b3d      	ldr	r3, [pc, #244]	; (196f0 <gmtime_r+0x1b8>)
   195fc:	f8df 8108 	ldr.w	r8, [pc, #264]	; 19708 <gmtime_r+0x1d0>
   19600:	fb87 e705 	smull	lr, r7, r7, r5
   19604:	fb83 390c 	smull	r3, r9, r3, ip
   19608:	197b      	adds	r3, r7, r5
   1960a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   1960e:	fb07 4606 	mla	r6, r7, r6, r4
   19612:	17ef      	asrs	r7, r5, #31
   19614:	44e1      	add	r9, ip
   19616:	ebc7 1363 	rsb	r3, r7, r3, asr #5
   1961a:	ea4f 77ec 	mov.w	r7, ip, asr #31
   1961e:	09c0      	lsrs	r0, r0, #7
   19620:	ebc7 07a9 	rsb	r7, r7, r9, asr #2
   19624:	2809      	cmp	r0, #9
   19626:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
   1962a:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
   1962e:	ebac 0707 	sub.w	r7, ip, r7
   19632:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
   19636:	bf8c      	ite	hi
   19638:	f06f 0c09 	mvnhi.w	ip, #9
   1963c:	f04f 0c02 	movls.w	ip, #2
   19640:	4460      	add	r0, ip
   19642:	f10e 0e02 	add.w	lr, lr, #2
   19646:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
   1964a:	fba8 8e0e 	umull	r8, lr, r8, lr
   1964e:	eba5 058c 	sub.w	r5, r5, ip, lsl #2
   19652:	f102 0801 	add.w	r8, r2, #1
   19656:	2801      	cmp	r0, #1
   19658:	bf98      	it	ls
   1965a:	3601      	addls	r6, #1
   1965c:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
   19660:	eba8 0e9e 	sub.w	lr, r8, lr, lsr #2
   19664:	604b      	str	r3, [r1, #4]
   19666:	600d      	str	r5, [r1, #0]
   19668:	618f      	str	r7, [r1, #24]
   1966a:	d225      	bcs.n	196b8 <gmtime_r+0x180>
   1966c:	07a3      	lsls	r3, r4, #30
   1966e:	d018      	beq.n	196a2 <gmtime_r+0x16a>
   19670:	4b20      	ldr	r3, [pc, #128]	; (196f4 <gmtime_r+0x1bc>)
   19672:	fba3 5304 	umull	r5, r3, r3, r4
   19676:	09db      	lsrs	r3, r3, #7
   19678:	f44f 75c8 	mov.w	r5, #400	; 0x190
   1967c:	fb05 4413 	mls	r4, r5, r3, r4
   19680:	fab4 f484 	clz	r4, r4
   19684:	0964      	lsrs	r4, r4, #5
   19686:	323b      	adds	r2, #59	; 0x3b
   19688:	4422      	add	r2, r4
   1968a:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   1968e:	2300      	movs	r3, #0
   19690:	6108      	str	r0, [r1, #16]
   19692:	614e      	str	r6, [r1, #20]
   19694:	61ca      	str	r2, [r1, #28]
   19696:	f8c1 e00c 	str.w	lr, [r1, #12]
   1969a:	620b      	str	r3, [r1, #32]
   1969c:	4608      	mov	r0, r1
   1969e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   196a2:	4b14      	ldr	r3, [pc, #80]	; (196f4 <gmtime_r+0x1bc>)
   196a4:	fba3 5304 	umull	r5, r3, r3, r4
   196a8:	095b      	lsrs	r3, r3, #5
   196aa:	2564      	movs	r5, #100	; 0x64
   196ac:	fb05 4313 	mls	r3, r5, r3, r4
   196b0:	2b00      	cmp	r3, #0
   196b2:	d0dd      	beq.n	19670 <gmtime_r+0x138>
   196b4:	2401      	movs	r4, #1
   196b6:	e7e6      	b.n	19686 <gmtime_r+0x14e>
   196b8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
   196bc:	e7e5      	b.n	1968a <gmtime_r+0x152>
   196be:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
   196c2:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   196c6:	f505 75c0 	add.w	r5, r5, #384	; 0x180
   196ca:	f603 236b 	addw	r3, r3, #2667	; 0xa6b
   196ce:	e747      	b.n	19560 <gmtime_r+0x28>
   196d0:	c22e4507 	.word	0xc22e4507
   196d4:	00015180 	.word	0x00015180
   196d8:	396b06bd 	.word	0x396b06bd
   196dc:	fffdc54f 	.word	0xfffdc54f
   196e0:	396b207f 	.word	0x396b207f
   196e4:	59c67cd9 	.word	0x59c67cd9
   196e8:	91a2b3c5 	.word	0x91a2b3c5
   196ec:	88888889 	.word	0x88888889
   196f0:	92492493 	.word	0x92492493
   196f4:	51eb851f 	.word	0x51eb851f
   196f8:	0072d641 	.word	0x0072d641
   196fc:	6719f361 	.word	0x6719f361
   19700:	e5d32b1f 	.word	0xe5d32b1f
   19704:	d62b80d7 	.word	0xd62b80d7
   19708:	cccccccd 	.word	0xcccccccd

0001970c <__retarget_lock_acquire>:
   1970c:	4770      	bx	lr
   1970e:	bf00      	nop

00019710 <__retarget_lock_acquire_recursive>:
   19710:	4770      	bx	lr
   19712:	bf00      	nop

00019714 <__retarget_lock_release>:
   19714:	4770      	bx	lr
   19716:	bf00      	nop

00019718 <__retarget_lock_release_recursive>:
   19718:	4770      	bx	lr
   1971a:	bf00      	nop

0001971c <_malloc_r>:
   1971c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19720:	f101 060b 	add.w	r6, r1, #11
   19724:	2e16      	cmp	r6, #22
   19726:	b083      	sub	sp, #12
   19728:	4605      	mov	r5, r0
   1972a:	f240 809e 	bls.w	1986a <_malloc_r+0x14e>
   1972e:	f036 0607 	bics.w	r6, r6, #7
   19732:	f100 80bd 	bmi.w	198b0 <_malloc_r+0x194>
   19736:	42b1      	cmp	r1, r6
   19738:	f200 80ba 	bhi.w	198b0 <_malloc_r+0x194>
   1973c:	f000 faf0 	bl	19d20 <__malloc_lock>
   19740:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   19744:	f0c0 8293 	bcc.w	19c6e <_malloc_r+0x552>
   19748:	0a73      	lsrs	r3, r6, #9
   1974a:	f000 80b8 	beq.w	198be <_malloc_r+0x1a2>
   1974e:	2b04      	cmp	r3, #4
   19750:	f200 8179 	bhi.w	19a46 <_malloc_r+0x32a>
   19754:	09b3      	lsrs	r3, r6, #6
   19756:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1975a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1975e:	00c3      	lsls	r3, r0, #3
   19760:	4fbf      	ldr	r7, [pc, #764]	; (19a60 <_malloc_r+0x344>)
   19762:	443b      	add	r3, r7
   19764:	f1a3 0108 	sub.w	r1, r3, #8
   19768:	685c      	ldr	r4, [r3, #4]
   1976a:	42a1      	cmp	r1, r4
   1976c:	d106      	bne.n	1977c <_malloc_r+0x60>
   1976e:	e00c      	b.n	1978a <_malloc_r+0x6e>
   19770:	2a00      	cmp	r2, #0
   19772:	f280 80aa 	bge.w	198ca <_malloc_r+0x1ae>
   19776:	68e4      	ldr	r4, [r4, #12]
   19778:	42a1      	cmp	r1, r4
   1977a:	d006      	beq.n	1978a <_malloc_r+0x6e>
   1977c:	6863      	ldr	r3, [r4, #4]
   1977e:	f023 0303 	bic.w	r3, r3, #3
   19782:	1b9a      	subs	r2, r3, r6
   19784:	2a0f      	cmp	r2, #15
   19786:	ddf3      	ble.n	19770 <_malloc_r+0x54>
   19788:	4670      	mov	r0, lr
   1978a:	693c      	ldr	r4, [r7, #16]
   1978c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 19a74 <_malloc_r+0x358>
   19790:	4574      	cmp	r4, lr
   19792:	f000 81ab 	beq.w	19aec <_malloc_r+0x3d0>
   19796:	6863      	ldr	r3, [r4, #4]
   19798:	f023 0303 	bic.w	r3, r3, #3
   1979c:	1b9a      	subs	r2, r3, r6
   1979e:	2a0f      	cmp	r2, #15
   197a0:	f300 8190 	bgt.w	19ac4 <_malloc_r+0x3a8>
   197a4:	2a00      	cmp	r2, #0
   197a6:	f8c7 e014 	str.w	lr, [r7, #20]
   197aa:	f8c7 e010 	str.w	lr, [r7, #16]
   197ae:	f280 809d 	bge.w	198ec <_malloc_r+0x1d0>
   197b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   197b6:	f080 8161 	bcs.w	19a7c <_malloc_r+0x360>
   197ba:	08db      	lsrs	r3, r3, #3
   197bc:	f103 0c01 	add.w	ip, r3, #1
   197c0:	1099      	asrs	r1, r3, #2
   197c2:	687a      	ldr	r2, [r7, #4]
   197c4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   197c8:	f8c4 8008 	str.w	r8, [r4, #8]
   197cc:	2301      	movs	r3, #1
   197ce:	408b      	lsls	r3, r1
   197d0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   197d4:	4313      	orrs	r3, r2
   197d6:	3908      	subs	r1, #8
   197d8:	60e1      	str	r1, [r4, #12]
   197da:	607b      	str	r3, [r7, #4]
   197dc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   197e0:	f8c8 400c 	str.w	r4, [r8, #12]
   197e4:	1082      	asrs	r2, r0, #2
   197e6:	2401      	movs	r4, #1
   197e8:	4094      	lsls	r4, r2
   197ea:	429c      	cmp	r4, r3
   197ec:	f200 808b 	bhi.w	19906 <_malloc_r+0x1ea>
   197f0:	421c      	tst	r4, r3
   197f2:	d106      	bne.n	19802 <_malloc_r+0xe6>
   197f4:	f020 0003 	bic.w	r0, r0, #3
   197f8:	0064      	lsls	r4, r4, #1
   197fa:	421c      	tst	r4, r3
   197fc:	f100 0004 	add.w	r0, r0, #4
   19800:	d0fa      	beq.n	197f8 <_malloc_r+0xdc>
   19802:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   19806:	46cc      	mov	ip, r9
   19808:	4680      	mov	r8, r0
   1980a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1980e:	459c      	cmp	ip, r3
   19810:	d107      	bne.n	19822 <_malloc_r+0x106>
   19812:	e16d      	b.n	19af0 <_malloc_r+0x3d4>
   19814:	2a00      	cmp	r2, #0
   19816:	f280 817b 	bge.w	19b10 <_malloc_r+0x3f4>
   1981a:	68db      	ldr	r3, [r3, #12]
   1981c:	459c      	cmp	ip, r3
   1981e:	f000 8167 	beq.w	19af0 <_malloc_r+0x3d4>
   19822:	6859      	ldr	r1, [r3, #4]
   19824:	f021 0103 	bic.w	r1, r1, #3
   19828:	1b8a      	subs	r2, r1, r6
   1982a:	2a0f      	cmp	r2, #15
   1982c:	ddf2      	ble.n	19814 <_malloc_r+0xf8>
   1982e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   19832:	f8d3 8008 	ldr.w	r8, [r3, #8]
   19836:	9300      	str	r3, [sp, #0]
   19838:	199c      	adds	r4, r3, r6
   1983a:	4628      	mov	r0, r5
   1983c:	f046 0601 	orr.w	r6, r6, #1
   19840:	f042 0501 	orr.w	r5, r2, #1
   19844:	605e      	str	r6, [r3, #4]
   19846:	f8c8 c00c 	str.w	ip, [r8, #12]
   1984a:	f8cc 8008 	str.w	r8, [ip, #8]
   1984e:	617c      	str	r4, [r7, #20]
   19850:	613c      	str	r4, [r7, #16]
   19852:	f8c4 e00c 	str.w	lr, [r4, #12]
   19856:	f8c4 e008 	str.w	lr, [r4, #8]
   1985a:	6065      	str	r5, [r4, #4]
   1985c:	505a      	str	r2, [r3, r1]
   1985e:	f000 fa65 	bl	19d2c <__malloc_unlock>
   19862:	9b00      	ldr	r3, [sp, #0]
   19864:	f103 0408 	add.w	r4, r3, #8
   19868:	e01e      	b.n	198a8 <_malloc_r+0x18c>
   1986a:	2910      	cmp	r1, #16
   1986c:	d820      	bhi.n	198b0 <_malloc_r+0x194>
   1986e:	f000 fa57 	bl	19d20 <__malloc_lock>
   19872:	2610      	movs	r6, #16
   19874:	2318      	movs	r3, #24
   19876:	2002      	movs	r0, #2
   19878:	4f79      	ldr	r7, [pc, #484]	; (19a60 <_malloc_r+0x344>)
   1987a:	443b      	add	r3, r7
   1987c:	f1a3 0208 	sub.w	r2, r3, #8
   19880:	685c      	ldr	r4, [r3, #4]
   19882:	4294      	cmp	r4, r2
   19884:	f000 813d 	beq.w	19b02 <_malloc_r+0x3e6>
   19888:	6863      	ldr	r3, [r4, #4]
   1988a:	68e1      	ldr	r1, [r4, #12]
   1988c:	68a6      	ldr	r6, [r4, #8]
   1988e:	f023 0303 	bic.w	r3, r3, #3
   19892:	4423      	add	r3, r4
   19894:	4628      	mov	r0, r5
   19896:	685a      	ldr	r2, [r3, #4]
   19898:	60f1      	str	r1, [r6, #12]
   1989a:	f042 0201 	orr.w	r2, r2, #1
   1989e:	608e      	str	r6, [r1, #8]
   198a0:	605a      	str	r2, [r3, #4]
   198a2:	f000 fa43 	bl	19d2c <__malloc_unlock>
   198a6:	3408      	adds	r4, #8
   198a8:	4620      	mov	r0, r4
   198aa:	b003      	add	sp, #12
   198ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198b0:	2400      	movs	r4, #0
   198b2:	230c      	movs	r3, #12
   198b4:	4620      	mov	r0, r4
   198b6:	602b      	str	r3, [r5, #0]
   198b8:	b003      	add	sp, #12
   198ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198be:	2040      	movs	r0, #64	; 0x40
   198c0:	f44f 7300 	mov.w	r3, #512	; 0x200
   198c4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   198c8:	e74a      	b.n	19760 <_malloc_r+0x44>
   198ca:	4423      	add	r3, r4
   198cc:	68e1      	ldr	r1, [r4, #12]
   198ce:	685a      	ldr	r2, [r3, #4]
   198d0:	68a6      	ldr	r6, [r4, #8]
   198d2:	f042 0201 	orr.w	r2, r2, #1
   198d6:	60f1      	str	r1, [r6, #12]
   198d8:	4628      	mov	r0, r5
   198da:	608e      	str	r6, [r1, #8]
   198dc:	605a      	str	r2, [r3, #4]
   198de:	f000 fa25 	bl	19d2c <__malloc_unlock>
   198e2:	3408      	adds	r4, #8
   198e4:	4620      	mov	r0, r4
   198e6:	b003      	add	sp, #12
   198e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198ec:	4423      	add	r3, r4
   198ee:	4628      	mov	r0, r5
   198f0:	685a      	ldr	r2, [r3, #4]
   198f2:	f042 0201 	orr.w	r2, r2, #1
   198f6:	605a      	str	r2, [r3, #4]
   198f8:	f000 fa18 	bl	19d2c <__malloc_unlock>
   198fc:	3408      	adds	r4, #8
   198fe:	4620      	mov	r0, r4
   19900:	b003      	add	sp, #12
   19902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19906:	68bc      	ldr	r4, [r7, #8]
   19908:	6863      	ldr	r3, [r4, #4]
   1990a:	f023 0803 	bic.w	r8, r3, #3
   1990e:	45b0      	cmp	r8, r6
   19910:	d304      	bcc.n	1991c <_malloc_r+0x200>
   19912:	eba8 0306 	sub.w	r3, r8, r6
   19916:	2b0f      	cmp	r3, #15
   19918:	f300 8085 	bgt.w	19a26 <_malloc_r+0x30a>
   1991c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 19a78 <_malloc_r+0x35c>
   19920:	4b50      	ldr	r3, [pc, #320]	; (19a64 <_malloc_r+0x348>)
   19922:	f8d9 2000 	ldr.w	r2, [r9]
   19926:	681b      	ldr	r3, [r3, #0]
   19928:	3201      	adds	r2, #1
   1992a:	4433      	add	r3, r6
   1992c:	eb04 0a08 	add.w	sl, r4, r8
   19930:	f000 8155 	beq.w	19bde <_malloc_r+0x4c2>
   19934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   19938:	330f      	adds	r3, #15
   1993a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1993e:	f02b 0b0f 	bic.w	fp, fp, #15
   19942:	4659      	mov	r1, fp
   19944:	4628      	mov	r0, r5
   19946:	f000 f9f7 	bl	19d38 <_sbrk_r>
   1994a:	1c41      	adds	r1, r0, #1
   1994c:	4602      	mov	r2, r0
   1994e:	f000 80fc 	beq.w	19b4a <_malloc_r+0x42e>
   19952:	4582      	cmp	sl, r0
   19954:	f200 80f7 	bhi.w	19b46 <_malloc_r+0x42a>
   19958:	4b43      	ldr	r3, [pc, #268]	; (19a68 <_malloc_r+0x34c>)
   1995a:	6819      	ldr	r1, [r3, #0]
   1995c:	4459      	add	r1, fp
   1995e:	6019      	str	r1, [r3, #0]
   19960:	f000 814d 	beq.w	19bfe <_malloc_r+0x4e2>
   19964:	f8d9 0000 	ldr.w	r0, [r9]
   19968:	3001      	adds	r0, #1
   1996a:	bf1b      	ittet	ne
   1996c:	eba2 0a0a 	subne.w	sl, r2, sl
   19970:	4451      	addne	r1, sl
   19972:	f8c9 2000 	streq.w	r2, [r9]
   19976:	6019      	strne	r1, [r3, #0]
   19978:	f012 0107 	ands.w	r1, r2, #7
   1997c:	f000 8115 	beq.w	19baa <_malloc_r+0x48e>
   19980:	f1c1 0008 	rsb	r0, r1, #8
   19984:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   19988:	4402      	add	r2, r0
   1998a:	3108      	adds	r1, #8
   1998c:	eb02 090b 	add.w	r9, r2, fp
   19990:	f3c9 090b 	ubfx	r9, r9, #0, #12
   19994:	eba1 0909 	sub.w	r9, r1, r9
   19998:	4649      	mov	r1, r9
   1999a:	4628      	mov	r0, r5
   1999c:	9301      	str	r3, [sp, #4]
   1999e:	9200      	str	r2, [sp, #0]
   199a0:	f000 f9ca 	bl	19d38 <_sbrk_r>
   199a4:	1c43      	adds	r3, r0, #1
   199a6:	e89d 000c 	ldmia.w	sp, {r2, r3}
   199aa:	f000 8143 	beq.w	19c34 <_malloc_r+0x518>
   199ae:	1a80      	subs	r0, r0, r2
   199b0:	4448      	add	r0, r9
   199b2:	f040 0001 	orr.w	r0, r0, #1
   199b6:	6819      	ldr	r1, [r3, #0]
   199b8:	60ba      	str	r2, [r7, #8]
   199ba:	4449      	add	r1, r9
   199bc:	42bc      	cmp	r4, r7
   199be:	6050      	str	r0, [r2, #4]
   199c0:	6019      	str	r1, [r3, #0]
   199c2:	d017      	beq.n	199f4 <_malloc_r+0x2d8>
   199c4:	f1b8 0f0f 	cmp.w	r8, #15
   199c8:	f240 80fb 	bls.w	19bc2 <_malloc_r+0x4a6>
   199cc:	6860      	ldr	r0, [r4, #4]
   199ce:	f1a8 020c 	sub.w	r2, r8, #12
   199d2:	f022 0207 	bic.w	r2, r2, #7
   199d6:	eb04 0e02 	add.w	lr, r4, r2
   199da:	f000 0001 	and.w	r0, r0, #1
   199de:	f04f 0c05 	mov.w	ip, #5
   199e2:	4310      	orrs	r0, r2
   199e4:	2a0f      	cmp	r2, #15
   199e6:	6060      	str	r0, [r4, #4]
   199e8:	f8ce c004 	str.w	ip, [lr, #4]
   199ec:	f8ce c008 	str.w	ip, [lr, #8]
   199f0:	f200 8117 	bhi.w	19c22 <_malloc_r+0x506>
   199f4:	4b1d      	ldr	r3, [pc, #116]	; (19a6c <_malloc_r+0x350>)
   199f6:	68bc      	ldr	r4, [r7, #8]
   199f8:	681a      	ldr	r2, [r3, #0]
   199fa:	4291      	cmp	r1, r2
   199fc:	bf88      	it	hi
   199fe:	6019      	strhi	r1, [r3, #0]
   19a00:	4b1b      	ldr	r3, [pc, #108]	; (19a70 <_malloc_r+0x354>)
   19a02:	681a      	ldr	r2, [r3, #0]
   19a04:	4291      	cmp	r1, r2
   19a06:	6862      	ldr	r2, [r4, #4]
   19a08:	bf88      	it	hi
   19a0a:	6019      	strhi	r1, [r3, #0]
   19a0c:	f022 0203 	bic.w	r2, r2, #3
   19a10:	4296      	cmp	r6, r2
   19a12:	eba2 0306 	sub.w	r3, r2, r6
   19a16:	d801      	bhi.n	19a1c <_malloc_r+0x300>
   19a18:	2b0f      	cmp	r3, #15
   19a1a:	dc04      	bgt.n	19a26 <_malloc_r+0x30a>
   19a1c:	4628      	mov	r0, r5
   19a1e:	f000 f985 	bl	19d2c <__malloc_unlock>
   19a22:	2400      	movs	r4, #0
   19a24:	e740      	b.n	198a8 <_malloc_r+0x18c>
   19a26:	19a2      	adds	r2, r4, r6
   19a28:	f043 0301 	orr.w	r3, r3, #1
   19a2c:	f046 0601 	orr.w	r6, r6, #1
   19a30:	6066      	str	r6, [r4, #4]
   19a32:	4628      	mov	r0, r5
   19a34:	60ba      	str	r2, [r7, #8]
   19a36:	6053      	str	r3, [r2, #4]
   19a38:	f000 f978 	bl	19d2c <__malloc_unlock>
   19a3c:	3408      	adds	r4, #8
   19a3e:	4620      	mov	r0, r4
   19a40:	b003      	add	sp, #12
   19a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a46:	2b14      	cmp	r3, #20
   19a48:	d971      	bls.n	19b2e <_malloc_r+0x412>
   19a4a:	2b54      	cmp	r3, #84	; 0x54
   19a4c:	f200 80a3 	bhi.w	19b96 <_malloc_r+0x47a>
   19a50:	0b33      	lsrs	r3, r6, #12
   19a52:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   19a56:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   19a5a:	00c3      	lsls	r3, r0, #3
   19a5c:	e680      	b.n	19760 <_malloc_r+0x44>
   19a5e:	bf00      	nop
   19a60:	20000654 	.word	0x20000654
   19a64:	200055cc 	.word	0x200055cc
   19a68:	2000559c 	.word	0x2000559c
   19a6c:	200055c4 	.word	0x200055c4
   19a70:	200055c8 	.word	0x200055c8
   19a74:	2000065c 	.word	0x2000065c
   19a78:	20000a5c 	.word	0x20000a5c
   19a7c:	0a5a      	lsrs	r2, r3, #9
   19a7e:	2a04      	cmp	r2, #4
   19a80:	d95b      	bls.n	19b3a <_malloc_r+0x41e>
   19a82:	2a14      	cmp	r2, #20
   19a84:	f200 80ae 	bhi.w	19be4 <_malloc_r+0x4c8>
   19a88:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   19a8c:	00c9      	lsls	r1, r1, #3
   19a8e:	325b      	adds	r2, #91	; 0x5b
   19a90:	eb07 0c01 	add.w	ip, r7, r1
   19a94:	5879      	ldr	r1, [r7, r1]
   19a96:	f1ac 0c08 	sub.w	ip, ip, #8
   19a9a:	458c      	cmp	ip, r1
   19a9c:	f000 8088 	beq.w	19bb0 <_malloc_r+0x494>
   19aa0:	684a      	ldr	r2, [r1, #4]
   19aa2:	f022 0203 	bic.w	r2, r2, #3
   19aa6:	4293      	cmp	r3, r2
   19aa8:	d273      	bcs.n	19b92 <_malloc_r+0x476>
   19aaa:	6889      	ldr	r1, [r1, #8]
   19aac:	458c      	cmp	ip, r1
   19aae:	d1f7      	bne.n	19aa0 <_malloc_r+0x384>
   19ab0:	f8dc 200c 	ldr.w	r2, [ip, #12]
   19ab4:	687b      	ldr	r3, [r7, #4]
   19ab6:	60e2      	str	r2, [r4, #12]
   19ab8:	f8c4 c008 	str.w	ip, [r4, #8]
   19abc:	6094      	str	r4, [r2, #8]
   19abe:	f8cc 400c 	str.w	r4, [ip, #12]
   19ac2:	e68f      	b.n	197e4 <_malloc_r+0xc8>
   19ac4:	19a1      	adds	r1, r4, r6
   19ac6:	f046 0c01 	orr.w	ip, r6, #1
   19aca:	f042 0601 	orr.w	r6, r2, #1
   19ace:	f8c4 c004 	str.w	ip, [r4, #4]
   19ad2:	4628      	mov	r0, r5
   19ad4:	6179      	str	r1, [r7, #20]
   19ad6:	6139      	str	r1, [r7, #16]
   19ad8:	f8c1 e00c 	str.w	lr, [r1, #12]
   19adc:	f8c1 e008 	str.w	lr, [r1, #8]
   19ae0:	604e      	str	r6, [r1, #4]
   19ae2:	50e2      	str	r2, [r4, r3]
   19ae4:	f000 f922 	bl	19d2c <__malloc_unlock>
   19ae8:	3408      	adds	r4, #8
   19aea:	e6dd      	b.n	198a8 <_malloc_r+0x18c>
   19aec:	687b      	ldr	r3, [r7, #4]
   19aee:	e679      	b.n	197e4 <_malloc_r+0xc8>
   19af0:	f108 0801 	add.w	r8, r8, #1
   19af4:	f018 0f03 	tst.w	r8, #3
   19af8:	f10c 0c08 	add.w	ip, ip, #8
   19afc:	f47f ae85 	bne.w	1980a <_malloc_r+0xee>
   19b00:	e02d      	b.n	19b5e <_malloc_r+0x442>
   19b02:	68dc      	ldr	r4, [r3, #12]
   19b04:	42a3      	cmp	r3, r4
   19b06:	bf08      	it	eq
   19b08:	3002      	addeq	r0, #2
   19b0a:	f43f ae3e 	beq.w	1978a <_malloc_r+0x6e>
   19b0e:	e6bb      	b.n	19888 <_malloc_r+0x16c>
   19b10:	4419      	add	r1, r3
   19b12:	461c      	mov	r4, r3
   19b14:	684a      	ldr	r2, [r1, #4]
   19b16:	68db      	ldr	r3, [r3, #12]
   19b18:	f854 6f08 	ldr.w	r6, [r4, #8]!
   19b1c:	f042 0201 	orr.w	r2, r2, #1
   19b20:	604a      	str	r2, [r1, #4]
   19b22:	4628      	mov	r0, r5
   19b24:	60f3      	str	r3, [r6, #12]
   19b26:	609e      	str	r6, [r3, #8]
   19b28:	f000 f900 	bl	19d2c <__malloc_unlock>
   19b2c:	e6bc      	b.n	198a8 <_malloc_r+0x18c>
   19b2e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   19b32:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   19b36:	00c3      	lsls	r3, r0, #3
   19b38:	e612      	b.n	19760 <_malloc_r+0x44>
   19b3a:	099a      	lsrs	r2, r3, #6
   19b3c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   19b40:	00c9      	lsls	r1, r1, #3
   19b42:	3238      	adds	r2, #56	; 0x38
   19b44:	e7a4      	b.n	19a90 <_malloc_r+0x374>
   19b46:	42bc      	cmp	r4, r7
   19b48:	d054      	beq.n	19bf4 <_malloc_r+0x4d8>
   19b4a:	68bc      	ldr	r4, [r7, #8]
   19b4c:	6862      	ldr	r2, [r4, #4]
   19b4e:	f022 0203 	bic.w	r2, r2, #3
   19b52:	e75d      	b.n	19a10 <_malloc_r+0x2f4>
   19b54:	f859 3908 	ldr.w	r3, [r9], #-8
   19b58:	4599      	cmp	r9, r3
   19b5a:	f040 8086 	bne.w	19c6a <_malloc_r+0x54e>
   19b5e:	f010 0f03 	tst.w	r0, #3
   19b62:	f100 30ff 	add.w	r0, r0, #4294967295
   19b66:	d1f5      	bne.n	19b54 <_malloc_r+0x438>
   19b68:	687b      	ldr	r3, [r7, #4]
   19b6a:	ea23 0304 	bic.w	r3, r3, r4
   19b6e:	607b      	str	r3, [r7, #4]
   19b70:	0064      	lsls	r4, r4, #1
   19b72:	429c      	cmp	r4, r3
   19b74:	f63f aec7 	bhi.w	19906 <_malloc_r+0x1ea>
   19b78:	2c00      	cmp	r4, #0
   19b7a:	f43f aec4 	beq.w	19906 <_malloc_r+0x1ea>
   19b7e:	421c      	tst	r4, r3
   19b80:	4640      	mov	r0, r8
   19b82:	f47f ae3e 	bne.w	19802 <_malloc_r+0xe6>
   19b86:	0064      	lsls	r4, r4, #1
   19b88:	421c      	tst	r4, r3
   19b8a:	f100 0004 	add.w	r0, r0, #4
   19b8e:	d0fa      	beq.n	19b86 <_malloc_r+0x46a>
   19b90:	e637      	b.n	19802 <_malloc_r+0xe6>
   19b92:	468c      	mov	ip, r1
   19b94:	e78c      	b.n	19ab0 <_malloc_r+0x394>
   19b96:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   19b9a:	d815      	bhi.n	19bc8 <_malloc_r+0x4ac>
   19b9c:	0bf3      	lsrs	r3, r6, #15
   19b9e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   19ba2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   19ba6:	00c3      	lsls	r3, r0, #3
   19ba8:	e5da      	b.n	19760 <_malloc_r+0x44>
   19baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   19bae:	e6ed      	b.n	1998c <_malloc_r+0x270>
   19bb0:	687b      	ldr	r3, [r7, #4]
   19bb2:	1092      	asrs	r2, r2, #2
   19bb4:	2101      	movs	r1, #1
   19bb6:	fa01 f202 	lsl.w	r2, r1, r2
   19bba:	4313      	orrs	r3, r2
   19bbc:	607b      	str	r3, [r7, #4]
   19bbe:	4662      	mov	r2, ip
   19bc0:	e779      	b.n	19ab6 <_malloc_r+0x39a>
   19bc2:	2301      	movs	r3, #1
   19bc4:	6053      	str	r3, [r2, #4]
   19bc6:	e729      	b.n	19a1c <_malloc_r+0x300>
   19bc8:	f240 5254 	movw	r2, #1364	; 0x554
   19bcc:	4293      	cmp	r3, r2
   19bce:	d822      	bhi.n	19c16 <_malloc_r+0x4fa>
   19bd0:	0cb3      	lsrs	r3, r6, #18
   19bd2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   19bd6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   19bda:	00c3      	lsls	r3, r0, #3
   19bdc:	e5c0      	b.n	19760 <_malloc_r+0x44>
   19bde:	f103 0b10 	add.w	fp, r3, #16
   19be2:	e6ae      	b.n	19942 <_malloc_r+0x226>
   19be4:	2a54      	cmp	r2, #84	; 0x54
   19be6:	d829      	bhi.n	19c3c <_malloc_r+0x520>
   19be8:	0b1a      	lsrs	r2, r3, #12
   19bea:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   19bee:	00c9      	lsls	r1, r1, #3
   19bf0:	326e      	adds	r2, #110	; 0x6e
   19bf2:	e74d      	b.n	19a90 <_malloc_r+0x374>
   19bf4:	4b20      	ldr	r3, [pc, #128]	; (19c78 <_malloc_r+0x55c>)
   19bf6:	6819      	ldr	r1, [r3, #0]
   19bf8:	4459      	add	r1, fp
   19bfa:	6019      	str	r1, [r3, #0]
   19bfc:	e6b2      	b.n	19964 <_malloc_r+0x248>
   19bfe:	f3ca 000b 	ubfx	r0, sl, #0, #12
   19c02:	2800      	cmp	r0, #0
   19c04:	f47f aeae 	bne.w	19964 <_malloc_r+0x248>
   19c08:	eb08 030b 	add.w	r3, r8, fp
   19c0c:	68ba      	ldr	r2, [r7, #8]
   19c0e:	f043 0301 	orr.w	r3, r3, #1
   19c12:	6053      	str	r3, [r2, #4]
   19c14:	e6ee      	b.n	199f4 <_malloc_r+0x2d8>
   19c16:	207f      	movs	r0, #127	; 0x7f
   19c18:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   19c1c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   19c20:	e59e      	b.n	19760 <_malloc_r+0x44>
   19c22:	f104 0108 	add.w	r1, r4, #8
   19c26:	4628      	mov	r0, r5
   19c28:	9300      	str	r3, [sp, #0]
   19c2a:	f001 ff91 	bl	1bb50 <_free_r>
   19c2e:	9b00      	ldr	r3, [sp, #0]
   19c30:	6819      	ldr	r1, [r3, #0]
   19c32:	e6df      	b.n	199f4 <_malloc_r+0x2d8>
   19c34:	2001      	movs	r0, #1
   19c36:	f04f 0900 	mov.w	r9, #0
   19c3a:	e6bc      	b.n	199b6 <_malloc_r+0x29a>
   19c3c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   19c40:	d805      	bhi.n	19c4e <_malloc_r+0x532>
   19c42:	0bda      	lsrs	r2, r3, #15
   19c44:	f102 0178 	add.w	r1, r2, #120	; 0x78
   19c48:	00c9      	lsls	r1, r1, #3
   19c4a:	3277      	adds	r2, #119	; 0x77
   19c4c:	e720      	b.n	19a90 <_malloc_r+0x374>
   19c4e:	f240 5154 	movw	r1, #1364	; 0x554
   19c52:	428a      	cmp	r2, r1
   19c54:	d805      	bhi.n	19c62 <_malloc_r+0x546>
   19c56:	0c9a      	lsrs	r2, r3, #18
   19c58:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   19c5c:	00c9      	lsls	r1, r1, #3
   19c5e:	327c      	adds	r2, #124	; 0x7c
   19c60:	e716      	b.n	19a90 <_malloc_r+0x374>
   19c62:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   19c66:	227e      	movs	r2, #126	; 0x7e
   19c68:	e712      	b.n	19a90 <_malloc_r+0x374>
   19c6a:	687b      	ldr	r3, [r7, #4]
   19c6c:	e780      	b.n	19b70 <_malloc_r+0x454>
   19c6e:	08f0      	lsrs	r0, r6, #3
   19c70:	f106 0308 	add.w	r3, r6, #8
   19c74:	e600      	b.n	19878 <_malloc_r+0x15c>
   19c76:	bf00      	nop
   19c78:	2000559c 	.word	0x2000559c
   19c7c:	00000000 	.word	0x00000000

00019c80 <memchr>:
   19c80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   19c84:	2a10      	cmp	r2, #16
   19c86:	db2b      	blt.n	19ce0 <memchr+0x60>
   19c88:	f010 0f07 	tst.w	r0, #7
   19c8c:	d008      	beq.n	19ca0 <memchr+0x20>
   19c8e:	f810 3b01 	ldrb.w	r3, [r0], #1
   19c92:	3a01      	subs	r2, #1
   19c94:	428b      	cmp	r3, r1
   19c96:	d02d      	beq.n	19cf4 <memchr+0x74>
   19c98:	f010 0f07 	tst.w	r0, #7
   19c9c:	b342      	cbz	r2, 19cf0 <memchr+0x70>
   19c9e:	d1f6      	bne.n	19c8e <memchr+0xe>
   19ca0:	b4f0      	push	{r4, r5, r6, r7}
   19ca2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   19ca6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   19caa:	f022 0407 	bic.w	r4, r2, #7
   19cae:	f07f 0700 	mvns.w	r7, #0
   19cb2:	2300      	movs	r3, #0
   19cb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   19cb8:	3c08      	subs	r4, #8
   19cba:	ea85 0501 	eor.w	r5, r5, r1
   19cbe:	ea86 0601 	eor.w	r6, r6, r1
   19cc2:	fa85 f547 	uadd8	r5, r5, r7
   19cc6:	faa3 f587 	sel	r5, r3, r7
   19cca:	fa86 f647 	uadd8	r6, r6, r7
   19cce:	faa5 f687 	sel	r6, r5, r7
   19cd2:	b98e      	cbnz	r6, 19cf8 <memchr+0x78>
   19cd4:	d1ee      	bne.n	19cb4 <memchr+0x34>
   19cd6:	bcf0      	pop	{r4, r5, r6, r7}
   19cd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   19cdc:	f002 0207 	and.w	r2, r2, #7
   19ce0:	b132      	cbz	r2, 19cf0 <memchr+0x70>
   19ce2:	f810 3b01 	ldrb.w	r3, [r0], #1
   19ce6:	3a01      	subs	r2, #1
   19ce8:	ea83 0301 	eor.w	r3, r3, r1
   19cec:	b113      	cbz	r3, 19cf4 <memchr+0x74>
   19cee:	d1f8      	bne.n	19ce2 <memchr+0x62>
   19cf0:	2000      	movs	r0, #0
   19cf2:	4770      	bx	lr
   19cf4:	3801      	subs	r0, #1
   19cf6:	4770      	bx	lr
   19cf8:	2d00      	cmp	r5, #0
   19cfa:	bf06      	itte	eq
   19cfc:	4635      	moveq	r5, r6
   19cfe:	3803      	subeq	r0, #3
   19d00:	3807      	subne	r0, #7
   19d02:	f015 0f01 	tst.w	r5, #1
   19d06:	d107      	bne.n	19d18 <memchr+0x98>
   19d08:	3001      	adds	r0, #1
   19d0a:	f415 7f80 	tst.w	r5, #256	; 0x100
   19d0e:	bf02      	ittt	eq
   19d10:	3001      	addeq	r0, #1
   19d12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   19d16:	3001      	addeq	r0, #1
   19d18:	bcf0      	pop	{r4, r5, r6, r7}
   19d1a:	3801      	subs	r0, #1
   19d1c:	4770      	bx	lr
   19d1e:	bf00      	nop

00019d20 <__malloc_lock>:
   19d20:	4801      	ldr	r0, [pc, #4]	; (19d28 <__malloc_lock+0x8>)
   19d22:	f7ff bcf5 	b.w	19710 <__retarget_lock_acquire_recursive>
   19d26:	bf00      	nop
   19d28:	200058a8 	.word	0x200058a8

00019d2c <__malloc_unlock>:
   19d2c:	4801      	ldr	r0, [pc, #4]	; (19d34 <__malloc_unlock+0x8>)
   19d2e:	f7ff bcf3 	b.w	19718 <__retarget_lock_release_recursive>
   19d32:	bf00      	nop
   19d34:	200058a8 	.word	0x200058a8

00019d38 <_sbrk_r>:
   19d38:	b538      	push	{r3, r4, r5, lr}
   19d3a:	4c07      	ldr	r4, [pc, #28]	; (19d58 <_sbrk_r+0x20>)
   19d3c:	2300      	movs	r3, #0
   19d3e:	4605      	mov	r5, r0
   19d40:	4608      	mov	r0, r1
   19d42:	6023      	str	r3, [r4, #0]
   19d44:	f7f8 fa85 	bl	12252 <_sbrk>
   19d48:	1c43      	adds	r3, r0, #1
   19d4a:	d000      	beq.n	19d4e <_sbrk_r+0x16>
   19d4c:	bd38      	pop	{r3, r4, r5, pc}
   19d4e:	6823      	ldr	r3, [r4, #0]
   19d50:	2b00      	cmp	r3, #0
   19d52:	d0fb      	beq.n	19d4c <_sbrk_r+0x14>
   19d54:	602b      	str	r3, [r5, #0]
   19d56:	bd38      	pop	{r3, r4, r5, pc}
   19d58:	200058bc 	.word	0x200058bc

00019d5c <siprintf>:
   19d5c:	b40e      	push	{r1, r2, r3}
   19d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d60:	b09c      	sub	sp, #112	; 0x70
   19d62:	ab21      	add	r3, sp, #132	; 0x84
   19d64:	490f      	ldr	r1, [pc, #60]	; (19da4 <siprintf+0x48>)
   19d66:	f853 2b04 	ldr.w	r2, [r3], #4
   19d6a:	9301      	str	r3, [sp, #4]
   19d6c:	4605      	mov	r5, r0
   19d6e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   19d72:	6808      	ldr	r0, [r1, #0]
   19d74:	9502      	str	r5, [sp, #8]
   19d76:	f44f 7702 	mov.w	r7, #520	; 0x208
   19d7a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   19d7e:	a902      	add	r1, sp, #8
   19d80:	9506      	str	r5, [sp, #24]
   19d82:	f8ad 7014 	strh.w	r7, [sp, #20]
   19d86:	9404      	str	r4, [sp, #16]
   19d88:	9407      	str	r4, [sp, #28]
   19d8a:	f8ad 6016 	strh.w	r6, [sp, #22]
   19d8e:	f000 fbaf 	bl	1a4f0 <_svfiprintf_r>
   19d92:	9b02      	ldr	r3, [sp, #8]
   19d94:	2200      	movs	r2, #0
   19d96:	701a      	strb	r2, [r3, #0]
   19d98:	b01c      	add	sp, #112	; 0x70
   19d9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   19d9e:	b003      	add	sp, #12
   19da0:	4770      	bx	lr
   19da2:	bf00      	nop
   19da4:	200001dc 	.word	0x200001dc

00019da8 <siscanf>:
   19da8:	b40e      	push	{r1, r2, r3}
   19daa:	b5f0      	push	{r4, r5, r6, r7, lr}
   19dac:	b09c      	sub	sp, #112	; 0x70
   19dae:	ac21      	add	r4, sp, #132	; 0x84
   19db0:	f44f 7201 	mov.w	r2, #516	; 0x204
   19db4:	f854 6b04 	ldr.w	r6, [r4], #4
   19db8:	f8ad 2014 	strh.w	r2, [sp, #20]
   19dbc:	9002      	str	r0, [sp, #8]
   19dbe:	9006      	str	r0, [sp, #24]
   19dc0:	f7fe ffde 	bl	18d80 <strlen>
   19dc4:	4b0c      	ldr	r3, [pc, #48]	; (19df8 <siscanf+0x50>)
   19dc6:	9401      	str	r4, [sp, #4]
   19dc8:	4605      	mov	r5, r0
   19dca:	4632      	mov	r2, r6
   19dcc:	4f0b      	ldr	r7, [pc, #44]	; (19dfc <siscanf+0x54>)
   19dce:	6818      	ldr	r0, [r3, #0]
   19dd0:	9503      	str	r5, [sp, #12]
   19dd2:	4623      	mov	r3, r4
   19dd4:	f64f 76ff 	movw	r6, #65535	; 0xffff
   19dd8:	2400      	movs	r4, #0
   19dda:	a902      	add	r1, sp, #8
   19ddc:	9507      	str	r5, [sp, #28]
   19dde:	970a      	str	r7, [sp, #40]	; 0x28
   19de0:	940e      	str	r4, [sp, #56]	; 0x38
   19de2:	9413      	str	r4, [sp, #76]	; 0x4c
   19de4:	f8ad 6016 	strh.w	r6, [sp, #22]
   19de8:	f001 f94a 	bl	1b080 <__ssvfiscanf_r>
   19dec:	b01c      	add	sp, #112	; 0x70
   19dee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   19df2:	b003      	add	sp, #12
   19df4:	4770      	bx	lr
   19df6:	bf00      	nop
   19df8:	200001dc 	.word	0x200001dc
   19dfc:	00019e01 	.word	0x00019e01

00019e00 <__seofread>:
   19e00:	2000      	movs	r0, #0
   19e02:	4770      	bx	lr
	...
   19e20:	eba2 0003 	sub.w	r0, r2, r3
   19e24:	4770      	bx	lr
   19e26:	bf00      	nop

00019e28 <strcmp>:
   19e28:	7802      	ldrb	r2, [r0, #0]
   19e2a:	780b      	ldrb	r3, [r1, #0]
   19e2c:	2a01      	cmp	r2, #1
   19e2e:	bf28      	it	cs
   19e30:	429a      	cmpcs	r2, r3
   19e32:	d1f5      	bne.n	19e20 <__seofread+0x20>
   19e34:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   19e38:	ea40 0401 	orr.w	r4, r0, r1
   19e3c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   19e40:	f06f 0c00 	mvn.w	ip, #0
   19e44:	ea4f 7244 	mov.w	r2, r4, lsl #29
   19e48:	b312      	cbz	r2, 19e90 <strcmp+0x68>
   19e4a:	ea80 0401 	eor.w	r4, r0, r1
   19e4e:	f014 0f07 	tst.w	r4, #7
   19e52:	d16a      	bne.n	19f2a <strcmp+0x102>
   19e54:	f000 0407 	and.w	r4, r0, #7
   19e58:	f020 0007 	bic.w	r0, r0, #7
   19e5c:	f004 0503 	and.w	r5, r4, #3
   19e60:	f021 0107 	bic.w	r1, r1, #7
   19e64:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   19e68:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   19e6c:	f014 0f04 	tst.w	r4, #4
   19e70:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   19e74:	fa0c f405 	lsl.w	r4, ip, r5
   19e78:	ea62 0204 	orn	r2, r2, r4
   19e7c:	ea66 0604 	orn	r6, r6, r4
   19e80:	d00a      	beq.n	19e98 <strcmp+0x70>
   19e82:	ea63 0304 	orn	r3, r3, r4
   19e86:	4662      	mov	r2, ip
   19e88:	ea67 0704 	orn	r7, r7, r4
   19e8c:	4666      	mov	r6, ip
   19e8e:	e003      	b.n	19e98 <strcmp+0x70>
   19e90:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   19e94:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   19e98:	fa82 f54c 	uadd8	r5, r2, ip
   19e9c:	ea82 0406 	eor.w	r4, r2, r6
   19ea0:	faa4 f48c 	sel	r4, r4, ip
   19ea4:	bb6c      	cbnz	r4, 19f02 <strcmp+0xda>
   19ea6:	fa83 f54c 	uadd8	r5, r3, ip
   19eaa:	ea83 0507 	eor.w	r5, r3, r7
   19eae:	faa5 f58c 	sel	r5, r5, ip
   19eb2:	b995      	cbnz	r5, 19eda <strcmp+0xb2>
   19eb4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   19eb8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   19ebc:	fa82 f54c 	uadd8	r5, r2, ip
   19ec0:	ea82 0406 	eor.w	r4, r2, r6
   19ec4:	faa4 f48c 	sel	r4, r4, ip
   19ec8:	fa83 f54c 	uadd8	r5, r3, ip
   19ecc:	ea83 0507 	eor.w	r5, r3, r7
   19ed0:	faa5 f58c 	sel	r5, r5, ip
   19ed4:	4325      	orrs	r5, r4
   19ed6:	d0db      	beq.n	19e90 <strcmp+0x68>
   19ed8:	b99c      	cbnz	r4, 19f02 <strcmp+0xda>
   19eda:	ba2d      	rev	r5, r5
   19edc:	fab5 f485 	clz	r4, r5
   19ee0:	f024 0407 	bic.w	r4, r4, #7
   19ee4:	fa27 f104 	lsr.w	r1, r7, r4
   19ee8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   19eec:	fa23 f304 	lsr.w	r3, r3, r4
   19ef0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   19ef4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   19ef8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   19efc:	eba0 0001 	sub.w	r0, r0, r1
   19f00:	4770      	bx	lr
   19f02:	ba24      	rev	r4, r4
   19f04:	fab4 f484 	clz	r4, r4
   19f08:	f024 0407 	bic.w	r4, r4, #7
   19f0c:	fa26 f104 	lsr.w	r1, r6, r4
   19f10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   19f14:	fa22 f204 	lsr.w	r2, r2, r4
   19f18:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   19f1c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   19f20:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   19f24:	eba0 0001 	sub.w	r0, r0, r1
   19f28:	4770      	bx	lr
   19f2a:	f014 0f03 	tst.w	r4, #3
   19f2e:	d13c      	bne.n	19faa <strcmp+0x182>
   19f30:	f010 0403 	ands.w	r4, r0, #3
   19f34:	d128      	bne.n	19f88 <strcmp+0x160>
   19f36:	f850 2b08 	ldr.w	r2, [r0], #8
   19f3a:	f851 3b08 	ldr.w	r3, [r1], #8
   19f3e:	fa82 f54c 	uadd8	r5, r2, ip
   19f42:	ea82 0503 	eor.w	r5, r2, r3
   19f46:	faa5 f58c 	sel	r5, r5, ip
   19f4a:	b95d      	cbnz	r5, 19f64 <strcmp+0x13c>
   19f4c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   19f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
   19f54:	fa82 f54c 	uadd8	r5, r2, ip
   19f58:	ea82 0503 	eor.w	r5, r2, r3
   19f5c:	faa5 f58c 	sel	r5, r5, ip
   19f60:	2d00      	cmp	r5, #0
   19f62:	d0e8      	beq.n	19f36 <strcmp+0x10e>
   19f64:	ba2d      	rev	r5, r5
   19f66:	fab5 f485 	clz	r4, r5
   19f6a:	f024 0407 	bic.w	r4, r4, #7
   19f6e:	fa23 f104 	lsr.w	r1, r3, r4
   19f72:	fa22 f204 	lsr.w	r2, r2, r4
   19f76:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   19f7a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   19f7e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   19f82:	eba0 0001 	sub.w	r0, r0, r1
   19f86:	4770      	bx	lr
   19f88:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   19f8c:	f020 0003 	bic.w	r0, r0, #3
   19f90:	f850 2b08 	ldr.w	r2, [r0], #8
   19f94:	f021 0103 	bic.w	r1, r1, #3
   19f98:	f851 3b08 	ldr.w	r3, [r1], #8
   19f9c:	fa0c f404 	lsl.w	r4, ip, r4
   19fa0:	ea62 0204 	orn	r2, r2, r4
   19fa4:	ea63 0304 	orn	r3, r3, r4
   19fa8:	e7c9      	b.n	19f3e <strcmp+0x116>
   19faa:	f010 0403 	ands.w	r4, r0, #3
   19fae:	d01a      	beq.n	19fe6 <strcmp+0x1be>
   19fb0:	eba1 0104 	sub.w	r1, r1, r4
   19fb4:	f020 0003 	bic.w	r0, r0, #3
   19fb8:	07e4      	lsls	r4, r4, #31
   19fba:	f850 2b04 	ldr.w	r2, [r0], #4
   19fbe:	d006      	beq.n	19fce <strcmp+0x1a6>
   19fc0:	d20f      	bcs.n	19fe2 <strcmp+0x1ba>
   19fc2:	788b      	ldrb	r3, [r1, #2]
   19fc4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   19fc8:	1ae4      	subs	r4, r4, r3
   19fca:	d106      	bne.n	19fda <strcmp+0x1b2>
   19fcc:	b12b      	cbz	r3, 19fda <strcmp+0x1b2>
   19fce:	78cb      	ldrb	r3, [r1, #3]
   19fd0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   19fd4:	1ae4      	subs	r4, r4, r3
   19fd6:	d100      	bne.n	19fda <strcmp+0x1b2>
   19fd8:	b91b      	cbnz	r3, 19fe2 <strcmp+0x1ba>
   19fda:	4620      	mov	r0, r4
   19fdc:	f85d 4b10 	ldr.w	r4, [sp], #16
   19fe0:	4770      	bx	lr
   19fe2:	f101 0104 	add.w	r1, r1, #4
   19fe6:	f850 2b04 	ldr.w	r2, [r0], #4
   19fea:	07cc      	lsls	r4, r1, #31
   19fec:	f021 0103 	bic.w	r1, r1, #3
   19ff0:	f851 3b04 	ldr.w	r3, [r1], #4
   19ff4:	d848      	bhi.n	1a088 <strcmp+0x260>
   19ff6:	d224      	bcs.n	1a042 <strcmp+0x21a>
   19ff8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   19ffc:	fa82 f54c 	uadd8	r5, r2, ip
   1a000:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1a004:	faa5 f58c 	sel	r5, r5, ip
   1a008:	d10a      	bne.n	1a020 <strcmp+0x1f8>
   1a00a:	b965      	cbnz	r5, 1a026 <strcmp+0x1fe>
   1a00c:	f851 3b04 	ldr.w	r3, [r1], #4
   1a010:	ea84 0402 	eor.w	r4, r4, r2
   1a014:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1a018:	d10e      	bne.n	1a038 <strcmp+0x210>
   1a01a:	f850 2b04 	ldr.w	r2, [r0], #4
   1a01e:	e7eb      	b.n	19ff8 <strcmp+0x1d0>
   1a020:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1a024:	e055      	b.n	1a0d2 <strcmp+0x2aa>
   1a026:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1a02a:	d14d      	bne.n	1a0c8 <strcmp+0x2a0>
   1a02c:	7808      	ldrb	r0, [r1, #0]
   1a02e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1a032:	f1c0 0000 	rsb	r0, r0, #0
   1a036:	4770      	bx	lr
   1a038:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1a03c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1a040:	e047      	b.n	1a0d2 <strcmp+0x2aa>
   1a042:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1a046:	fa82 f54c 	uadd8	r5, r2, ip
   1a04a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1a04e:	faa5 f58c 	sel	r5, r5, ip
   1a052:	d10a      	bne.n	1a06a <strcmp+0x242>
   1a054:	b965      	cbnz	r5, 1a070 <strcmp+0x248>
   1a056:	f851 3b04 	ldr.w	r3, [r1], #4
   1a05a:	ea84 0402 	eor.w	r4, r4, r2
   1a05e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1a062:	d10c      	bne.n	1a07e <strcmp+0x256>
   1a064:	f850 2b04 	ldr.w	r2, [r0], #4
   1a068:	e7eb      	b.n	1a042 <strcmp+0x21a>
   1a06a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1a06e:	e030      	b.n	1a0d2 <strcmp+0x2aa>
   1a070:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1a074:	d128      	bne.n	1a0c8 <strcmp+0x2a0>
   1a076:	880b      	ldrh	r3, [r1, #0]
   1a078:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1a07c:	e029      	b.n	1a0d2 <strcmp+0x2aa>
   1a07e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1a082:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1a086:	e024      	b.n	1a0d2 <strcmp+0x2aa>
   1a088:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1a08c:	fa82 f54c 	uadd8	r5, r2, ip
   1a090:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1a094:	faa5 f58c 	sel	r5, r5, ip
   1a098:	d10a      	bne.n	1a0b0 <strcmp+0x288>
   1a09a:	b965      	cbnz	r5, 1a0b6 <strcmp+0x28e>
   1a09c:	f851 3b04 	ldr.w	r3, [r1], #4
   1a0a0:	ea84 0402 	eor.w	r4, r4, r2
   1a0a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1a0a8:	d109      	bne.n	1a0be <strcmp+0x296>
   1a0aa:	f850 2b04 	ldr.w	r2, [r0], #4
   1a0ae:	e7eb      	b.n	1a088 <strcmp+0x260>
   1a0b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1a0b4:	e00d      	b.n	1a0d2 <strcmp+0x2aa>
   1a0b6:	f015 0fff 	tst.w	r5, #255	; 0xff
   1a0ba:	d105      	bne.n	1a0c8 <strcmp+0x2a0>
   1a0bc:	680b      	ldr	r3, [r1, #0]
   1a0be:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1a0c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1a0c6:	e004      	b.n	1a0d2 <strcmp+0x2aa>
   1a0c8:	f04f 0000 	mov.w	r0, #0
   1a0cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1a0d0:	4770      	bx	lr
   1a0d2:	ba12      	rev	r2, r2
   1a0d4:	ba1b      	rev	r3, r3
   1a0d6:	fa82 f44c 	uadd8	r4, r2, ip
   1a0da:	ea82 0403 	eor.w	r4, r2, r3
   1a0de:	faa4 f58c 	sel	r5, r4, ip
   1a0e2:	fab5 f485 	clz	r4, r5
   1a0e6:	fa02 f204 	lsl.w	r2, r2, r4
   1a0ea:	fa03 f304 	lsl.w	r3, r3, r4
   1a0ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1a0f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1a0f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1a0fa:	4770      	bx	lr

0001a0fc <strcpy>:
   1a0fc:	ea80 0201 	eor.w	r2, r0, r1
   1a100:	4684      	mov	ip, r0
   1a102:	f012 0f03 	tst.w	r2, #3
   1a106:	d14f      	bne.n	1a1a8 <strcpy+0xac>
   1a108:	f011 0f03 	tst.w	r1, #3
   1a10c:	d132      	bne.n	1a174 <strcpy+0x78>
   1a10e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1a112:	f011 0f04 	tst.w	r1, #4
   1a116:	f851 3b04 	ldr.w	r3, [r1], #4
   1a11a:	d00b      	beq.n	1a134 <strcpy+0x38>
   1a11c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1a120:	439a      	bics	r2, r3
   1a122:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1a126:	bf04      	itt	eq
   1a128:	f84c 3b04 	streq.w	r3, [ip], #4
   1a12c:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a130:	d116      	bne.n	1a160 <strcpy+0x64>
   1a132:	bf00      	nop
   1a134:	f851 4b04 	ldr.w	r4, [r1], #4
   1a138:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1a13c:	439a      	bics	r2, r3
   1a13e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1a142:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1a146:	d10b      	bne.n	1a160 <strcpy+0x64>
   1a148:	f84c 3b04 	str.w	r3, [ip], #4
   1a14c:	43a2      	bics	r2, r4
   1a14e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1a152:	bf04      	itt	eq
   1a154:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a158:	f84c 4b04 	streq.w	r4, [ip], #4
   1a15c:	d0ea      	beq.n	1a134 <strcpy+0x38>
   1a15e:	4623      	mov	r3, r4
   1a160:	f80c 3b01 	strb.w	r3, [ip], #1
   1a164:	f013 0fff 	tst.w	r3, #255	; 0xff
   1a168:	ea4f 2333 	mov.w	r3, r3, ror #8
   1a16c:	d1f8      	bne.n	1a160 <strcpy+0x64>
   1a16e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a172:	4770      	bx	lr
   1a174:	f011 0f01 	tst.w	r1, #1
   1a178:	d006      	beq.n	1a188 <strcpy+0x8c>
   1a17a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1a17e:	f80c 2b01 	strb.w	r2, [ip], #1
   1a182:	2a00      	cmp	r2, #0
   1a184:	bf08      	it	eq
   1a186:	4770      	bxeq	lr
   1a188:	f011 0f02 	tst.w	r1, #2
   1a18c:	d0bf      	beq.n	1a10e <strcpy+0x12>
   1a18e:	f831 2b02 	ldrh.w	r2, [r1], #2
   1a192:	f012 0fff 	tst.w	r2, #255	; 0xff
   1a196:	bf16      	itet	ne
   1a198:	f82c 2b02 	strhne.w	r2, [ip], #2
   1a19c:	f88c 2000 	strbeq.w	r2, [ip]
   1a1a0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1a1a4:	d1b3      	bne.n	1a10e <strcpy+0x12>
   1a1a6:	4770      	bx	lr
   1a1a8:	f811 2b01 	ldrb.w	r2, [r1], #1
   1a1ac:	f80c 2b01 	strb.w	r2, [ip], #1
   1a1b0:	2a00      	cmp	r2, #0
   1a1b2:	d1f9      	bne.n	1a1a8 <strcpy+0xac>
   1a1b4:	4770      	bx	lr
   1a1b6:	bf00      	nop

0001a1b8 <strncmp>:
   1a1b8:	2a00      	cmp	r2, #0
   1a1ba:	d041      	beq.n	1a240 <strncmp+0x88>
   1a1bc:	ea40 0301 	orr.w	r3, r0, r1
   1a1c0:	f013 0303 	ands.w	r3, r3, #3
   1a1c4:	b4f0      	push	{r4, r5, r6, r7}
   1a1c6:	d125      	bne.n	1a214 <strncmp+0x5c>
   1a1c8:	2a03      	cmp	r2, #3
   1a1ca:	d923      	bls.n	1a214 <strncmp+0x5c>
   1a1cc:	6804      	ldr	r4, [r0, #0]
   1a1ce:	680d      	ldr	r5, [r1, #0]
   1a1d0:	42ac      	cmp	r4, r5
   1a1d2:	d11f      	bne.n	1a214 <strncmp+0x5c>
   1a1d4:	3a04      	subs	r2, #4
   1a1d6:	d038      	beq.n	1a24a <strncmp+0x92>
   1a1d8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1a1dc:	ea25 0404 	bic.w	r4, r5, r4
   1a1e0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1a1e4:	d12e      	bne.n	1a244 <strncmp+0x8c>
   1a1e6:	3004      	adds	r0, #4
   1a1e8:	3104      	adds	r1, #4
   1a1ea:	e00f      	b.n	1a20c <strncmp+0x54>
   1a1ec:	f850 3b04 	ldr.w	r3, [r0], #4
   1a1f0:	680e      	ldr	r6, [r1, #0]
   1a1f2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1a1f6:	42b3      	cmp	r3, r6
   1a1f8:	ea24 0403 	bic.w	r4, r4, r3
   1a1fc:	f101 0104 	add.w	r1, r1, #4
   1a200:	d126      	bne.n	1a250 <strncmp+0x98>
   1a202:	3a04      	subs	r2, #4
   1a204:	d021      	beq.n	1a24a <strncmp+0x92>
   1a206:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1a20a:	d11b      	bne.n	1a244 <strncmp+0x8c>
   1a20c:	2a03      	cmp	r2, #3
   1a20e:	4607      	mov	r7, r0
   1a210:	460d      	mov	r5, r1
   1a212:	d8eb      	bhi.n	1a1ec <strncmp+0x34>
   1a214:	7805      	ldrb	r5, [r0, #0]
   1a216:	780c      	ldrb	r4, [r1, #0]
   1a218:	42ac      	cmp	r4, r5
   1a21a:	f102 33ff 	add.w	r3, r2, #4294967295
   1a21e:	d11a      	bne.n	1a256 <strncmp+0x9e>
   1a220:	b183      	cbz	r3, 1a244 <strncmp+0x8c>
   1a222:	b914      	cbnz	r4, 1a22a <strncmp+0x72>
   1a224:	e00e      	b.n	1a244 <strncmp+0x8c>
   1a226:	b16b      	cbz	r3, 1a244 <strncmp+0x8c>
   1a228:	b17a      	cbz	r2, 1a24a <strncmp+0x92>
   1a22a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1a22e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1a232:	42a2      	cmp	r2, r4
   1a234:	f103 33ff 	add.w	r3, r3, #4294967295
   1a238:	d0f5      	beq.n	1a226 <strncmp+0x6e>
   1a23a:	1b10      	subs	r0, r2, r4
   1a23c:	bcf0      	pop	{r4, r5, r6, r7}
   1a23e:	4770      	bx	lr
   1a240:	4610      	mov	r0, r2
   1a242:	4770      	bx	lr
   1a244:	2000      	movs	r0, #0
   1a246:	bcf0      	pop	{r4, r5, r6, r7}
   1a248:	4770      	bx	lr
   1a24a:	4610      	mov	r0, r2
   1a24c:	bcf0      	pop	{r4, r5, r6, r7}
   1a24e:	4770      	bx	lr
   1a250:	4629      	mov	r1, r5
   1a252:	4638      	mov	r0, r7
   1a254:	e7de      	b.n	1a214 <strncmp+0x5c>
   1a256:	462a      	mov	r2, r5
   1a258:	e7ef      	b.n	1a23a <strncmp+0x82>
   1a25a:	bf00      	nop

0001a25c <_strtoul_l.isra.0>:
   1a25c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a260:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1a264:	460e      	mov	r6, r1
   1a266:	4607      	mov	r7, r0
   1a268:	4615      	mov	r5, r2
   1a26a:	4698      	mov	r8, r3
   1a26c:	468a      	mov	sl, r1
   1a26e:	e000      	b.n	1a272 <_strtoul_l.isra.0+0x16>
   1a270:	46a2      	mov	sl, r4
   1a272:	4654      	mov	r4, sl
   1a274:	4648      	mov	r0, r9
   1a276:	f814 bb01 	ldrb.w	fp, [r4], #1
   1a27a:	f001 fd6b 	bl	1bd54 <__locale_ctype_ptr_l>
   1a27e:	4458      	add	r0, fp
   1a280:	7840      	ldrb	r0, [r0, #1]
   1a282:	f010 0008 	ands.w	r0, r0, #8
   1a286:	d1f3      	bne.n	1a270 <_strtoul_l.isra.0+0x14>
   1a288:	4659      	mov	r1, fp
   1a28a:	292d      	cmp	r1, #45	; 0x2d
   1a28c:	d059      	beq.n	1a342 <_strtoul_l.isra.0+0xe6>
   1a28e:	292b      	cmp	r1, #43	; 0x2b
   1a290:	bf04      	itt	eq
   1a292:	7821      	ldrbeq	r1, [r4, #0]
   1a294:	f10a 0402 	addeq.w	r4, sl, #2
   1a298:	f1b8 0f00 	cmp.w	r8, #0
   1a29c:	d00c      	beq.n	1a2b8 <_strtoul_l.isra.0+0x5c>
   1a29e:	f1b8 0f10 	cmp.w	r8, #16
   1a2a2:	d053      	beq.n	1a34c <_strtoul_l.isra.0+0xf0>
   1a2a4:	f04f 3cff 	mov.w	ip, #4294967295
   1a2a8:	fbbc fcf8 	udiv	ip, ip, r8
   1a2ac:	fb08 fa0c 	mul.w	sl, r8, ip
   1a2b0:	ea6f 0a0a 	mvn.w	sl, sl
   1a2b4:	46c1      	mov	r9, r8
   1a2b6:	e008      	b.n	1a2ca <_strtoul_l.isra.0+0x6e>
   1a2b8:	2930      	cmp	r1, #48	; 0x30
   1a2ba:	d058      	beq.n	1a36e <_strtoul_l.isra.0+0x112>
   1a2bc:	f04f 080a 	mov.w	r8, #10
   1a2c0:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 1a3a0 <_strtoul_l.isra.0+0x144>
   1a2c4:	46c1      	mov	r9, r8
   1a2c6:	f04f 0a05 	mov.w	sl, #5
   1a2ca:	2300      	movs	r3, #0
   1a2cc:	469e      	mov	lr, r3
   1a2ce:	e005      	b.n	1a2dc <_strtoul_l.isra.0+0x80>
   1a2d0:	d02a      	beq.n	1a328 <_strtoul_l.isra.0+0xcc>
   1a2d2:	fb09 2e0e 	mla	lr, r9, lr, r2
   1a2d6:	2301      	movs	r3, #1
   1a2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
   1a2dc:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1a2e0:	2a09      	cmp	r2, #9
   1a2e2:	d905      	bls.n	1a2f0 <_strtoul_l.isra.0+0x94>
   1a2e4:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1a2e8:	2a19      	cmp	r2, #25
   1a2ea:	d80a      	bhi.n	1a302 <_strtoul_l.isra.0+0xa6>
   1a2ec:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   1a2f0:	4590      	cmp	r8, r2
   1a2f2:	dd0e      	ble.n	1a312 <_strtoul_l.isra.0+0xb6>
   1a2f4:	2b00      	cmp	r3, #0
   1a2f6:	db01      	blt.n	1a2fc <_strtoul_l.isra.0+0xa0>
   1a2f8:	45e6      	cmp	lr, ip
   1a2fa:	d9e9      	bls.n	1a2d0 <_strtoul_l.isra.0+0x74>
   1a2fc:	f04f 33ff 	mov.w	r3, #4294967295
   1a300:	e7ea      	b.n	1a2d8 <_strtoul_l.isra.0+0x7c>
   1a302:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1a306:	2a19      	cmp	r2, #25
   1a308:	d803      	bhi.n	1a312 <_strtoul_l.isra.0+0xb6>
   1a30a:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   1a30e:	4590      	cmp	r8, r2
   1a310:	dcf0      	bgt.n	1a2f4 <_strtoul_l.isra.0+0x98>
   1a312:	2b00      	cmp	r3, #0
   1a314:	db0d      	blt.n	1a332 <_strtoul_l.isra.0+0xd6>
   1a316:	b108      	cbz	r0, 1a31c <_strtoul_l.isra.0+0xc0>
   1a318:	f1ce 0e00 	rsb	lr, lr, #0
   1a31c:	b10d      	cbz	r5, 1a322 <_strtoul_l.isra.0+0xc6>
   1a31e:	b973      	cbnz	r3, 1a33e <_strtoul_l.isra.0+0xe2>
   1a320:	602e      	str	r6, [r5, #0]
   1a322:	4670      	mov	r0, lr
   1a324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a328:	4552      	cmp	r2, sl
   1a32a:	ddd2      	ble.n	1a2d2 <_strtoul_l.isra.0+0x76>
   1a32c:	f04f 33ff 	mov.w	r3, #4294967295
   1a330:	e7d2      	b.n	1a2d8 <_strtoul_l.isra.0+0x7c>
   1a332:	2322      	movs	r3, #34	; 0x22
   1a334:	603b      	str	r3, [r7, #0]
   1a336:	f04f 3eff 	mov.w	lr, #4294967295
   1a33a:	2d00      	cmp	r5, #0
   1a33c:	d0f1      	beq.n	1a322 <_strtoul_l.isra.0+0xc6>
   1a33e:	1e66      	subs	r6, r4, #1
   1a340:	e7ee      	b.n	1a320 <_strtoul_l.isra.0+0xc4>
   1a342:	7821      	ldrb	r1, [r4, #0]
   1a344:	2001      	movs	r0, #1
   1a346:	f10a 0402 	add.w	r4, sl, #2
   1a34a:	e7a5      	b.n	1a298 <_strtoul_l.isra.0+0x3c>
   1a34c:	2930      	cmp	r1, #48	; 0x30
   1a34e:	d11b      	bne.n	1a388 <_strtoul_l.isra.0+0x12c>
   1a350:	7823      	ldrb	r3, [r4, #0]
   1a352:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1a356:	2b58      	cmp	r3, #88	; 0x58
   1a358:	d11c      	bne.n	1a394 <_strtoul_l.isra.0+0x138>
   1a35a:	f04f 0910 	mov.w	r9, #16
   1a35e:	7861      	ldrb	r1, [r4, #1]
   1a360:	46c8      	mov	r8, r9
   1a362:	f04f 0a0f 	mov.w	sl, #15
   1a366:	3402      	adds	r4, #2
   1a368:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1a36c:	e7ad      	b.n	1a2ca <_strtoul_l.isra.0+0x6e>
   1a36e:	7823      	ldrb	r3, [r4, #0]
   1a370:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1a374:	2b58      	cmp	r3, #88	; 0x58
   1a376:	d0f0      	beq.n	1a35a <_strtoul_l.isra.0+0xfe>
   1a378:	f04f 0808 	mov.w	r8, #8
   1a37c:	46c1      	mov	r9, r8
   1a37e:	f04f 0a07 	mov.w	sl, #7
   1a382:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   1a386:	e7a0      	b.n	1a2ca <_strtoul_l.isra.0+0x6e>
   1a388:	f04f 0a0f 	mov.w	sl, #15
   1a38c:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1a390:	46c1      	mov	r9, r8
   1a392:	e79a      	b.n	1a2ca <_strtoul_l.isra.0+0x6e>
   1a394:	46c1      	mov	r9, r8
   1a396:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1a39a:	f04f 0a0f 	mov.w	sl, #15
   1a39e:	e794      	b.n	1a2ca <_strtoul_l.isra.0+0x6e>
   1a3a0:	19999999 	.word	0x19999999

0001a3a4 <_strtoul_r>:
   1a3a4:	b530      	push	{r4, r5, lr}
   1a3a6:	4c06      	ldr	r4, [pc, #24]	; (1a3c0 <_strtoul_r+0x1c>)
   1a3a8:	4d06      	ldr	r5, [pc, #24]	; (1a3c4 <_strtoul_r+0x20>)
   1a3aa:	6824      	ldr	r4, [r4, #0]
   1a3ac:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1a3ae:	b083      	sub	sp, #12
   1a3b0:	2c00      	cmp	r4, #0
   1a3b2:	bf08      	it	eq
   1a3b4:	462c      	moveq	r4, r5
   1a3b6:	9400      	str	r4, [sp, #0]
   1a3b8:	f7ff ff50 	bl	1a25c <_strtoul_l.isra.0>
   1a3bc:	b003      	add	sp, #12
   1a3be:	bd30      	pop	{r4, r5, pc}
   1a3c0:	200001dc 	.word	0x200001dc
   1a3c4:	20000a68 	.word	0x20000a68

0001a3c8 <strtoul>:
   1a3c8:	b530      	push	{r4, r5, lr}
   1a3ca:	4c08      	ldr	r4, [pc, #32]	; (1a3ec <strtoul+0x24>)
   1a3cc:	4b08      	ldr	r3, [pc, #32]	; (1a3f0 <strtoul+0x28>)
   1a3ce:	6825      	ldr	r5, [r4, #0]
   1a3d0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   1a3d2:	b083      	sub	sp, #12
   1a3d4:	2c00      	cmp	r4, #0
   1a3d6:	bf08      	it	eq
   1a3d8:	461c      	moveq	r4, r3
   1a3da:	9400      	str	r4, [sp, #0]
   1a3dc:	4613      	mov	r3, r2
   1a3de:	460a      	mov	r2, r1
   1a3e0:	4601      	mov	r1, r0
   1a3e2:	4628      	mov	r0, r5
   1a3e4:	f7ff ff3a 	bl	1a25c <_strtoul_l.isra.0>
   1a3e8:	b003      	add	sp, #12
   1a3ea:	bd30      	pop	{r4, r5, pc}
   1a3ec:	200001dc 	.word	0x200001dc
   1a3f0:	20000a68 	.word	0x20000a68

0001a3f4 <__ssprint_r>:
   1a3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3f8:	6893      	ldr	r3, [r2, #8]
   1a3fa:	b083      	sub	sp, #12
   1a3fc:	4690      	mov	r8, r2
   1a3fe:	2b00      	cmp	r3, #0
   1a400:	d070      	beq.n	1a4e4 <__ssprint_r+0xf0>
   1a402:	4682      	mov	sl, r0
   1a404:	460c      	mov	r4, r1
   1a406:	6817      	ldr	r7, [r2, #0]
   1a408:	688d      	ldr	r5, [r1, #8]
   1a40a:	6808      	ldr	r0, [r1, #0]
   1a40c:	e042      	b.n	1a494 <__ssprint_r+0xa0>
   1a40e:	89a3      	ldrh	r3, [r4, #12]
   1a410:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1a414:	d02e      	beq.n	1a474 <__ssprint_r+0x80>
   1a416:	6965      	ldr	r5, [r4, #20]
   1a418:	6921      	ldr	r1, [r4, #16]
   1a41a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1a41e:	eba0 0b01 	sub.w	fp, r0, r1
   1a422:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1a426:	f10b 0001 	add.w	r0, fp, #1
   1a42a:	106d      	asrs	r5, r5, #1
   1a42c:	4430      	add	r0, r6
   1a42e:	42a8      	cmp	r0, r5
   1a430:	462a      	mov	r2, r5
   1a432:	bf84      	itt	hi
   1a434:	4605      	movhi	r5, r0
   1a436:	462a      	movhi	r2, r5
   1a438:	055b      	lsls	r3, r3, #21
   1a43a:	d538      	bpl.n	1a4ae <__ssprint_r+0xba>
   1a43c:	4611      	mov	r1, r2
   1a43e:	4650      	mov	r0, sl
   1a440:	f7ff f96c 	bl	1971c <_malloc_r>
   1a444:	2800      	cmp	r0, #0
   1a446:	d03c      	beq.n	1a4c2 <__ssprint_r+0xce>
   1a448:	465a      	mov	r2, fp
   1a44a:	6921      	ldr	r1, [r4, #16]
   1a44c:	9001      	str	r0, [sp, #4]
   1a44e:	f7fe fb83 	bl	18b58 <memcpy>
   1a452:	89a2      	ldrh	r2, [r4, #12]
   1a454:	9b01      	ldr	r3, [sp, #4]
   1a456:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1a45a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1a45e:	81a2      	strh	r2, [r4, #12]
   1a460:	eba5 020b 	sub.w	r2, r5, fp
   1a464:	eb03 000b 	add.w	r0, r3, fp
   1a468:	6165      	str	r5, [r4, #20]
   1a46a:	6123      	str	r3, [r4, #16]
   1a46c:	6020      	str	r0, [r4, #0]
   1a46e:	60a2      	str	r2, [r4, #8]
   1a470:	4635      	mov	r5, r6
   1a472:	46b3      	mov	fp, r6
   1a474:	465a      	mov	r2, fp
   1a476:	4649      	mov	r1, r9
   1a478:	f001 fcc2 	bl	1be00 <memmove>
   1a47c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1a480:	68a2      	ldr	r2, [r4, #8]
   1a482:	6820      	ldr	r0, [r4, #0]
   1a484:	1b55      	subs	r5, r2, r5
   1a486:	4458      	add	r0, fp
   1a488:	1b9e      	subs	r6, r3, r6
   1a48a:	60a5      	str	r5, [r4, #8]
   1a48c:	6020      	str	r0, [r4, #0]
   1a48e:	f8c8 6008 	str.w	r6, [r8, #8]
   1a492:	b33e      	cbz	r6, 1a4e4 <__ssprint_r+0xf0>
   1a494:	687e      	ldr	r6, [r7, #4]
   1a496:	463b      	mov	r3, r7
   1a498:	3708      	adds	r7, #8
   1a49a:	2e00      	cmp	r6, #0
   1a49c:	d0fa      	beq.n	1a494 <__ssprint_r+0xa0>
   1a49e:	42ae      	cmp	r6, r5
   1a4a0:	f8d3 9000 	ldr.w	r9, [r3]
   1a4a4:	46ab      	mov	fp, r5
   1a4a6:	d2b2      	bcs.n	1a40e <__ssprint_r+0x1a>
   1a4a8:	4635      	mov	r5, r6
   1a4aa:	46b3      	mov	fp, r6
   1a4ac:	e7e2      	b.n	1a474 <__ssprint_r+0x80>
   1a4ae:	4650      	mov	r0, sl
   1a4b0:	f001 fd0a 	bl	1bec8 <_realloc_r>
   1a4b4:	4603      	mov	r3, r0
   1a4b6:	2800      	cmp	r0, #0
   1a4b8:	d1d2      	bne.n	1a460 <__ssprint_r+0x6c>
   1a4ba:	6921      	ldr	r1, [r4, #16]
   1a4bc:	4650      	mov	r0, sl
   1a4be:	f001 fb47 	bl	1bb50 <_free_r>
   1a4c2:	230c      	movs	r3, #12
   1a4c4:	f8ca 3000 	str.w	r3, [sl]
   1a4c8:	89a3      	ldrh	r3, [r4, #12]
   1a4ca:	2200      	movs	r2, #0
   1a4cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a4d0:	f04f 30ff 	mov.w	r0, #4294967295
   1a4d4:	81a3      	strh	r3, [r4, #12]
   1a4d6:	f8c8 2008 	str.w	r2, [r8, #8]
   1a4da:	f8c8 2004 	str.w	r2, [r8, #4]
   1a4de:	b003      	add	sp, #12
   1a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4e4:	2000      	movs	r0, #0
   1a4e6:	f8c8 0004 	str.w	r0, [r8, #4]
   1a4ea:	b003      	add	sp, #12
   1a4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a4f0 <_svfiprintf_r>:
   1a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4f4:	b0ad      	sub	sp, #180	; 0xb4
   1a4f6:	460c      	mov	r4, r1
   1a4f8:	9105      	str	r1, [sp, #20]
   1a4fa:	8989      	ldrh	r1, [r1, #12]
   1a4fc:	9307      	str	r3, [sp, #28]
   1a4fe:	060d      	lsls	r5, r1, #24
   1a500:	900a      	str	r0, [sp, #40]	; 0x28
   1a502:	d503      	bpl.n	1a50c <_svfiprintf_r+0x1c>
   1a504:	6923      	ldr	r3, [r4, #16]
   1a506:	2b00      	cmp	r3, #0
   1a508:	f000 84d6 	beq.w	1aeb8 <_svfiprintf_r+0x9c8>
   1a50c:	2300      	movs	r3, #0
   1a50e:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   1a512:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1a514:	930b      	str	r3, [sp, #44]	; 0x2c
   1a516:	4693      	mov	fp, r2
   1a518:	9311      	str	r3, [sp, #68]	; 0x44
   1a51a:	9310      	str	r3, [sp, #64]	; 0x40
   1a51c:	9302      	str	r3, [sp, #8]
   1a51e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   1a522:	46d1      	mov	r9, sl
   1a524:	f89b 3000 	ldrb.w	r3, [fp]
   1a528:	465c      	mov	r4, fp
   1a52a:	b1eb      	cbz	r3, 1a568 <_svfiprintf_r+0x78>
   1a52c:	2b25      	cmp	r3, #37	; 0x25
   1a52e:	d102      	bne.n	1a536 <_svfiprintf_r+0x46>
   1a530:	e01a      	b.n	1a568 <_svfiprintf_r+0x78>
   1a532:	2b25      	cmp	r3, #37	; 0x25
   1a534:	d003      	beq.n	1a53e <_svfiprintf_r+0x4e>
   1a536:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1a53a:	2b00      	cmp	r3, #0
   1a53c:	d1f9      	bne.n	1a532 <_svfiprintf_r+0x42>
   1a53e:	eba4 050b 	sub.w	r5, r4, fp
   1a542:	b18d      	cbz	r5, 1a568 <_svfiprintf_r+0x78>
   1a544:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a546:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1a548:	f8c9 b000 	str.w	fp, [r9]
   1a54c:	3301      	adds	r3, #1
   1a54e:	442a      	add	r2, r5
   1a550:	2b07      	cmp	r3, #7
   1a552:	f8c9 5004 	str.w	r5, [r9, #4]
   1a556:	9211      	str	r2, [sp, #68]	; 0x44
   1a558:	9310      	str	r3, [sp, #64]	; 0x40
   1a55a:	f300 83c3 	bgt.w	1ace4 <_svfiprintf_r+0x7f4>
   1a55e:	f109 0908 	add.w	r9, r9, #8
   1a562:	9b02      	ldr	r3, [sp, #8]
   1a564:	442b      	add	r3, r5
   1a566:	9302      	str	r3, [sp, #8]
   1a568:	7823      	ldrb	r3, [r4, #0]
   1a56a:	2b00      	cmp	r3, #0
   1a56c:	f000 834b 	beq.w	1ac06 <_svfiprintf_r+0x716>
   1a570:	2000      	movs	r0, #0
   1a572:	f04f 0300 	mov.w	r3, #0
   1a576:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1a57a:	f104 0b01 	add.w	fp, r4, #1
   1a57e:	7862      	ldrb	r2, [r4, #1]
   1a580:	4605      	mov	r5, r0
   1a582:	4603      	mov	r3, r0
   1a584:	f04f 38ff 	mov.w	r8, #4294967295
   1a588:	4604      	mov	r4, r0
   1a58a:	f10b 0b01 	add.w	fp, fp, #1
   1a58e:	f1a2 0120 	sub.w	r1, r2, #32
   1a592:	2958      	cmp	r1, #88	; 0x58
   1a594:	f200 826b 	bhi.w	1aa6e <_svfiprintf_r+0x57e>
   1a598:	e8df f011 	tbh	[pc, r1, lsl #1]
   1a59c:	026900bd 	.word	0x026900bd
   1a5a0:	00b80269 	.word	0x00b80269
   1a5a4:	02690269 	.word	0x02690269
   1a5a8:	02690269 	.word	0x02690269
   1a5ac:	02690269 	.word	0x02690269
   1a5b0:	00b30059 	.word	0x00b30059
   1a5b4:	00630269 	.word	0x00630269
   1a5b8:	026901c0 	.word	0x026901c0
   1a5bc:	01ad01bb 	.word	0x01ad01bb
   1a5c0:	01ad01ad 	.word	0x01ad01ad
   1a5c4:	01ad01ad 	.word	0x01ad01ad
   1a5c8:	01ad01ad 	.word	0x01ad01ad
   1a5cc:	01ad01ad 	.word	0x01ad01ad
   1a5d0:	02690269 	.word	0x02690269
   1a5d4:	02690269 	.word	0x02690269
   1a5d8:	02690269 	.word	0x02690269
   1a5dc:	02690269 	.word	0x02690269
   1a5e0:	02690269 	.word	0x02690269
   1a5e4:	0269015f 	.word	0x0269015f
   1a5e8:	02690269 	.word	0x02690269
   1a5ec:	02690269 	.word	0x02690269
   1a5f0:	02690269 	.word	0x02690269
   1a5f4:	02690269 	.word	0x02690269
   1a5f8:	014d0269 	.word	0x014d0269
   1a5fc:	02690269 	.word	0x02690269
   1a600:	02690269 	.word	0x02690269
   1a604:	013c0269 	.word	0x013c0269
   1a608:	02690269 	.word	0x02690269
   1a60c:	02690125 	.word	0x02690125
   1a610:	02690269 	.word	0x02690269
   1a614:	02690269 	.word	0x02690269
   1a618:	02690269 	.word	0x02690269
   1a61c:	02690269 	.word	0x02690269
   1a620:	00c50269 	.word	0x00c50269
   1a624:	02690200 	.word	0x02690200
   1a628:	02690269 	.word	0x02690269
   1a62c:	020001fb 	.word	0x020001fb
   1a630:	02690269 	.word	0x02690269
   1a634:	026901ee 	.word	0x026901ee
   1a638:	007a01da 	.word	0x007a01da
   1a63c:	02310236 	.word	0x02310236
   1a640:	020e0269 	.word	0x020e0269
   1a644:	00680269 	.word	0x00680269
   1a648:	02690269 	.word	0x02690269
   1a64c:	008f      	.short	0x008f
   1a64e:	9907      	ldr	r1, [sp, #28]
   1a650:	680c      	ldr	r4, [r1, #0]
   1a652:	460a      	mov	r2, r1
   1a654:	2c00      	cmp	r4, #0
   1a656:	f102 0204 	add.w	r2, r2, #4
   1a65a:	f280 83c9 	bge.w	1adf0 <_svfiprintf_r+0x900>
   1a65e:	4264      	negs	r4, r4
   1a660:	9207      	str	r2, [sp, #28]
   1a662:	f043 0304 	orr.w	r3, r3, #4
   1a666:	f89b 2000 	ldrb.w	r2, [fp]
   1a66a:	e78e      	b.n	1a58a <_svfiprintf_r+0x9a>
   1a66c:	9406      	str	r4, [sp, #24]
   1a66e:	069c      	lsls	r4, r3, #26
   1a670:	f100 80d6 	bmi.w	1a820 <_svfiprintf_r+0x330>
   1a674:	9907      	ldr	r1, [sp, #28]
   1a676:	06d8      	lsls	r0, r3, #27
   1a678:	460a      	mov	r2, r1
   1a67a:	f100 820a 	bmi.w	1aa92 <_svfiprintf_r+0x5a2>
   1a67e:	065e      	lsls	r6, r3, #25
   1a680:	f140 8207 	bpl.w	1aa92 <_svfiprintf_r+0x5a2>
   1a684:	880c      	ldrh	r4, [r1, #0]
   1a686:	3104      	adds	r1, #4
   1a688:	2500      	movs	r5, #0
   1a68a:	2201      	movs	r2, #1
   1a68c:	9107      	str	r1, [sp, #28]
   1a68e:	e1cc      	b.n	1aa2a <_svfiprintf_r+0x53a>
   1a690:	f013 0220 	ands.w	r2, r3, #32
   1a694:	9406      	str	r4, [sp, #24]
   1a696:	f040 80d5 	bne.w	1a844 <_svfiprintf_r+0x354>
   1a69a:	f013 0110 	ands.w	r1, r3, #16
   1a69e:	f040 81fe 	bne.w	1aa9e <_svfiprintf_r+0x5ae>
   1a6a2:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   1a6a6:	f000 81fa 	beq.w	1aa9e <_svfiprintf_r+0x5ae>
   1a6aa:	9807      	ldr	r0, [sp, #28]
   1a6ac:	460a      	mov	r2, r1
   1a6ae:	4601      	mov	r1, r0
   1a6b0:	3104      	adds	r1, #4
   1a6b2:	8804      	ldrh	r4, [r0, #0]
   1a6b4:	9107      	str	r1, [sp, #28]
   1a6b6:	2500      	movs	r5, #0
   1a6b8:	e1b7      	b.n	1aa2a <_svfiprintf_r+0x53a>
   1a6ba:	9406      	str	r4, [sp, #24]
   1a6bc:	2800      	cmp	r0, #0
   1a6be:	f040 8431 	bne.w	1af24 <_svfiprintf_r+0xa34>
   1a6c2:	49ba      	ldr	r1, [pc, #744]	; (1a9ac <_svfiprintf_r+0x4bc>)
   1a6c4:	910b      	str	r1, [sp, #44]	; 0x2c
   1a6c6:	069d      	lsls	r5, r3, #26
   1a6c8:	f100 8096 	bmi.w	1a7f8 <_svfiprintf_r+0x308>
   1a6cc:	9807      	ldr	r0, [sp, #28]
   1a6ce:	06dc      	lsls	r4, r3, #27
   1a6d0:	4601      	mov	r1, r0
   1a6d2:	d402      	bmi.n	1a6da <_svfiprintf_r+0x1ea>
   1a6d4:	0658      	lsls	r0, r3, #25
   1a6d6:	f100 83a9 	bmi.w	1ae2c <_svfiprintf_r+0x93c>
   1a6da:	680c      	ldr	r4, [r1, #0]
   1a6dc:	3104      	adds	r1, #4
   1a6de:	9107      	str	r1, [sp, #28]
   1a6e0:	2500      	movs	r5, #0
   1a6e2:	07d9      	lsls	r1, r3, #31
   1a6e4:	f140 8094 	bpl.w	1a810 <_svfiprintf_r+0x320>
   1a6e8:	ea54 0105 	orrs.w	r1, r4, r5
   1a6ec:	f000 8090 	beq.w	1a810 <_svfiprintf_r+0x320>
   1a6f0:	2130      	movs	r1, #48	; 0x30
   1a6f2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1a6f6:	f043 0302 	orr.w	r3, r3, #2
   1a6fa:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1a6fe:	2202      	movs	r2, #2
   1a700:	e193      	b.n	1aa2a <_svfiprintf_r+0x53a>
   1a702:	f89b 2000 	ldrb.w	r2, [fp]
   1a706:	2001      	movs	r0, #1
   1a708:	252b      	movs	r5, #43	; 0x2b
   1a70a:	e73e      	b.n	1a58a <_svfiprintf_r+0x9a>
   1a70c:	f043 0301 	orr.w	r3, r3, #1
   1a710:	f89b 2000 	ldrb.w	r2, [fp]
   1a714:	e739      	b.n	1a58a <_svfiprintf_r+0x9a>
   1a716:	f89b 2000 	ldrb.w	r2, [fp]
   1a71a:	2d00      	cmp	r5, #0
   1a71c:	f47f af35 	bne.w	1a58a <_svfiprintf_r+0x9a>
   1a720:	2001      	movs	r0, #1
   1a722:	2520      	movs	r5, #32
   1a724:	e731      	b.n	1a58a <_svfiprintf_r+0x9a>
   1a726:	9907      	ldr	r1, [sp, #28]
   1a728:	9406      	str	r4, [sp, #24]
   1a72a:	680a      	ldr	r2, [r1, #0]
   1a72c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1a730:	f04f 0000 	mov.w	r0, #0
   1a734:	460a      	mov	r2, r1
   1a736:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1a73a:	3204      	adds	r2, #4
   1a73c:	2001      	movs	r0, #1
   1a73e:	9000      	str	r0, [sp, #0]
   1a740:	9207      	str	r2, [sp, #28]
   1a742:	9004      	str	r0, [sp, #16]
   1a744:	ae12      	add	r6, sp, #72	; 0x48
   1a746:	9301      	str	r3, [sp, #4]
   1a748:	f04f 0800 	mov.w	r8, #0
   1a74c:	9b01      	ldr	r3, [sp, #4]
   1a74e:	f013 0302 	ands.w	r3, r3, #2
   1a752:	9308      	str	r3, [sp, #32]
   1a754:	d002      	beq.n	1a75c <_svfiprintf_r+0x26c>
   1a756:	9b00      	ldr	r3, [sp, #0]
   1a758:	3302      	adds	r3, #2
   1a75a:	9300      	str	r3, [sp, #0]
   1a75c:	9b01      	ldr	r3, [sp, #4]
   1a75e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   1a762:	9309      	str	r3, [sp, #36]	; 0x24
   1a764:	f040 81a2 	bne.w	1aaac <_svfiprintf_r+0x5bc>
   1a768:	9b06      	ldr	r3, [sp, #24]
   1a76a:	9a00      	ldr	r2, [sp, #0]
   1a76c:	1a9c      	subs	r4, r3, r2
   1a76e:	2c00      	cmp	r4, #0
   1a770:	f340 819c 	ble.w	1aaac <_svfiprintf_r+0x5bc>
   1a774:	2c10      	cmp	r4, #16
   1a776:	9911      	ldr	r1, [sp, #68]	; 0x44
   1a778:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1a77a:	4d8d      	ldr	r5, [pc, #564]	; (1a9b0 <_svfiprintf_r+0x4c0>)
   1a77c:	dd25      	ble.n	1a7ca <_svfiprintf_r+0x2da>
   1a77e:	4648      	mov	r0, r9
   1a780:	2310      	movs	r3, #16
   1a782:	46c1      	mov	r9, r8
   1a784:	46b0      	mov	r8, r6
   1a786:	9e05      	ldr	r6, [sp, #20]
   1a788:	e004      	b.n	1a794 <_svfiprintf_r+0x2a4>
   1a78a:	3c10      	subs	r4, #16
   1a78c:	2c10      	cmp	r4, #16
   1a78e:	f100 0008 	add.w	r0, r0, #8
   1a792:	dd17      	ble.n	1a7c4 <_svfiprintf_r+0x2d4>
   1a794:	3201      	adds	r2, #1
   1a796:	3110      	adds	r1, #16
   1a798:	2a07      	cmp	r2, #7
   1a79a:	9111      	str	r1, [sp, #68]	; 0x44
   1a79c:	9210      	str	r2, [sp, #64]	; 0x40
   1a79e:	6005      	str	r5, [r0, #0]
   1a7a0:	6043      	str	r3, [r0, #4]
   1a7a2:	ddf2      	ble.n	1a78a <_svfiprintf_r+0x29a>
   1a7a4:	aa0f      	add	r2, sp, #60	; 0x3c
   1a7a6:	4631      	mov	r1, r6
   1a7a8:	4638      	mov	r0, r7
   1a7aa:	9303      	str	r3, [sp, #12]
   1a7ac:	f7ff fe22 	bl	1a3f4 <__ssprint_r>
   1a7b0:	2800      	cmp	r0, #0
   1a7b2:	f040 822f 	bne.w	1ac14 <_svfiprintf_r+0x724>
   1a7b6:	3c10      	subs	r4, #16
   1a7b8:	2c10      	cmp	r4, #16
   1a7ba:	9911      	ldr	r1, [sp, #68]	; 0x44
   1a7bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1a7be:	9b03      	ldr	r3, [sp, #12]
   1a7c0:	4650      	mov	r0, sl
   1a7c2:	dce7      	bgt.n	1a794 <_svfiprintf_r+0x2a4>
   1a7c4:	4646      	mov	r6, r8
   1a7c6:	46c8      	mov	r8, r9
   1a7c8:	4681      	mov	r9, r0
   1a7ca:	1c53      	adds	r3, r2, #1
   1a7cc:	4421      	add	r1, r4
   1a7ce:	2b07      	cmp	r3, #7
   1a7d0:	9111      	str	r1, [sp, #68]	; 0x44
   1a7d2:	9310      	str	r3, [sp, #64]	; 0x40
   1a7d4:	f8c9 5000 	str.w	r5, [r9]
   1a7d8:	f8c9 4004 	str.w	r4, [r9, #4]
   1a7dc:	f300 82f2 	bgt.w	1adc4 <_svfiprintf_r+0x8d4>
   1a7e0:	f109 0908 	add.w	r9, r9, #8
   1a7e4:	e164      	b.n	1aab0 <_svfiprintf_r+0x5c0>
   1a7e6:	9406      	str	r4, [sp, #24]
   1a7e8:	2800      	cmp	r0, #0
   1a7ea:	f040 83a5 	bne.w	1af38 <_svfiprintf_r+0xa48>
   1a7ee:	4971      	ldr	r1, [pc, #452]	; (1a9b4 <_svfiprintf_r+0x4c4>)
   1a7f0:	910b      	str	r1, [sp, #44]	; 0x2c
   1a7f2:	069d      	lsls	r5, r3, #26
   1a7f4:	f57f af6a 	bpl.w	1a6cc <_svfiprintf_r+0x1dc>
   1a7f8:	9c07      	ldr	r4, [sp, #28]
   1a7fa:	3407      	adds	r4, #7
   1a7fc:	f024 0107 	bic.w	r1, r4, #7
   1a800:	f101 0008 	add.w	r0, r1, #8
   1a804:	e9d1 4500 	ldrd	r4, r5, [r1]
   1a808:	07d9      	lsls	r1, r3, #31
   1a80a:	9007      	str	r0, [sp, #28]
   1a80c:	f53f af6c 	bmi.w	1a6e8 <_svfiprintf_r+0x1f8>
   1a810:	2202      	movs	r2, #2
   1a812:	e10a      	b.n	1aa2a <_svfiprintf_r+0x53a>
   1a814:	f043 0310 	orr.w	r3, r3, #16
   1a818:	9406      	str	r4, [sp, #24]
   1a81a:	069c      	lsls	r4, r3, #26
   1a81c:	f57f af2a 	bpl.w	1a674 <_svfiprintf_r+0x184>
   1a820:	9c07      	ldr	r4, [sp, #28]
   1a822:	3407      	adds	r4, #7
   1a824:	f024 0207 	bic.w	r2, r4, #7
   1a828:	f102 0108 	add.w	r1, r2, #8
   1a82c:	e9d2 4500 	ldrd	r4, r5, [r2]
   1a830:	9107      	str	r1, [sp, #28]
   1a832:	2201      	movs	r2, #1
   1a834:	e0f9      	b.n	1aa2a <_svfiprintf_r+0x53a>
   1a836:	f043 0310 	orr.w	r3, r3, #16
   1a83a:	f013 0220 	ands.w	r2, r3, #32
   1a83e:	9406      	str	r4, [sp, #24]
   1a840:	f43f af2b 	beq.w	1a69a <_svfiprintf_r+0x1aa>
   1a844:	9c07      	ldr	r4, [sp, #28]
   1a846:	3407      	adds	r4, #7
   1a848:	f024 0207 	bic.w	r2, r4, #7
   1a84c:	f102 0108 	add.w	r1, r2, #8
   1a850:	e9d2 4500 	ldrd	r4, r5, [r2]
   1a854:	9107      	str	r1, [sp, #28]
   1a856:	2200      	movs	r2, #0
   1a858:	e0e7      	b.n	1aa2a <_svfiprintf_r+0x53a>
   1a85a:	9406      	str	r4, [sp, #24]
   1a85c:	2800      	cmp	r0, #0
   1a85e:	f040 8365 	bne.w	1af2c <_svfiprintf_r+0xa3c>
   1a862:	f043 0310 	orr.w	r3, r3, #16
   1a866:	069c      	lsls	r4, r3, #26
   1a868:	f100 82fa 	bmi.w	1ae60 <_svfiprintf_r+0x970>
   1a86c:	06d8      	lsls	r0, r3, #27
   1a86e:	d402      	bmi.n	1a876 <_svfiprintf_r+0x386>
   1a870:	0659      	lsls	r1, r3, #25
   1a872:	f100 82c4 	bmi.w	1adfe <_svfiprintf_r+0x90e>
   1a876:	9907      	ldr	r1, [sp, #28]
   1a878:	680c      	ldr	r4, [r1, #0]
   1a87a:	460a      	mov	r2, r1
   1a87c:	17e5      	asrs	r5, r4, #31
   1a87e:	3204      	adds	r2, #4
   1a880:	9207      	str	r2, [sp, #28]
   1a882:	4620      	mov	r0, r4
   1a884:	4629      	mov	r1, r5
   1a886:	2800      	cmp	r0, #0
   1a888:	f171 0200 	sbcs.w	r2, r1, #0
   1a88c:	f2c0 82c5 	blt.w	1ae1a <_svfiprintf_r+0x92a>
   1a890:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1a894:	9203      	str	r2, [sp, #12]
   1a896:	f1b8 3fff 	cmp.w	r8, #4294967295
   1a89a:	f04f 0201 	mov.w	r2, #1
   1a89e:	f040 80ce 	bne.w	1aa3e <_svfiprintf_r+0x54e>
   1a8a2:	ea54 0105 	orrs.w	r1, r4, r5
   1a8a6:	f000 820d 	beq.w	1acc4 <_svfiprintf_r+0x7d4>
   1a8aa:	9301      	str	r3, [sp, #4]
   1a8ac:	2a01      	cmp	r2, #1
   1a8ae:	f000 826b 	beq.w	1ad88 <_svfiprintf_r+0x898>
   1a8b2:	2a02      	cmp	r2, #2
   1a8b4:	f040 822d 	bne.w	1ad12 <_svfiprintf_r+0x822>
   1a8b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1a8ba:	4656      	mov	r6, sl
   1a8bc:	0923      	lsrs	r3, r4, #4
   1a8be:	f004 010f 	and.w	r1, r4, #15
   1a8c2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1a8c6:	092a      	lsrs	r2, r5, #4
   1a8c8:	461c      	mov	r4, r3
   1a8ca:	4615      	mov	r5, r2
   1a8cc:	5c43      	ldrb	r3, [r0, r1]
   1a8ce:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1a8d2:	ea54 0305 	orrs.w	r3, r4, r5
   1a8d6:	d1f1      	bne.n	1a8bc <_svfiprintf_r+0x3cc>
   1a8d8:	ebaa 0306 	sub.w	r3, sl, r6
   1a8dc:	9304      	str	r3, [sp, #16]
   1a8de:	9b04      	ldr	r3, [sp, #16]
   1a8e0:	9a03      	ldr	r2, [sp, #12]
   1a8e2:	4543      	cmp	r3, r8
   1a8e4:	bfb8      	it	lt
   1a8e6:	4643      	movlt	r3, r8
   1a8e8:	9300      	str	r3, [sp, #0]
   1a8ea:	2a00      	cmp	r2, #0
   1a8ec:	f43f af2e 	beq.w	1a74c <_svfiprintf_r+0x25c>
   1a8f0:	3301      	adds	r3, #1
   1a8f2:	9300      	str	r3, [sp, #0]
   1a8f4:	e72a      	b.n	1a74c <_svfiprintf_r+0x25c>
   1a8f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1a8fa:	2400      	movs	r4, #0
   1a8fc:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1a900:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1a904:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   1a908:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1a90c:	2909      	cmp	r1, #9
   1a90e:	d9f5      	bls.n	1a8fc <_svfiprintf_r+0x40c>
   1a910:	e63d      	b.n	1a58e <_svfiprintf_r+0x9e>
   1a912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a916:	f89b 2000 	ldrb.w	r2, [fp]
   1a91a:	e636      	b.n	1a58a <_svfiprintf_r+0x9a>
   1a91c:	f89b 2000 	ldrb.w	r2, [fp]
   1a920:	2a2a      	cmp	r2, #42	; 0x2a
   1a922:	f10b 0601 	add.w	r6, fp, #1
   1a926:	f000 82e7 	beq.w	1aef8 <_svfiprintf_r+0xa08>
   1a92a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1a92e:	2909      	cmp	r1, #9
   1a930:	46b3      	mov	fp, r6
   1a932:	f04f 0800 	mov.w	r8, #0
   1a936:	f63f ae2a 	bhi.w	1a58e <_svfiprintf_r+0x9e>
   1a93a:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1a93e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1a942:	eb01 0848 	add.w	r8, r1, r8, lsl #1
   1a946:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1a94a:	2909      	cmp	r1, #9
   1a94c:	d9f5      	bls.n	1a93a <_svfiprintf_r+0x44a>
   1a94e:	e61e      	b.n	1a58e <_svfiprintf_r+0x9e>
   1a950:	2800      	cmp	r0, #0
   1a952:	f040 82dd 	bne.w	1af10 <_svfiprintf_r+0xa20>
   1a956:	069a      	lsls	r2, r3, #26
   1a958:	f100 8276 	bmi.w	1ae48 <_svfiprintf_r+0x958>
   1a95c:	06de      	lsls	r6, r3, #27
   1a95e:	f100 8297 	bmi.w	1ae90 <_svfiprintf_r+0x9a0>
   1a962:	065d      	lsls	r5, r3, #25
   1a964:	f140 8294 	bpl.w	1ae90 <_svfiprintf_r+0x9a0>
   1a968:	9a07      	ldr	r2, [sp, #28]
   1a96a:	6813      	ldr	r3, [r2, #0]
   1a96c:	3204      	adds	r2, #4
   1a96e:	9207      	str	r2, [sp, #28]
   1a970:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1a974:	801a      	strh	r2, [r3, #0]
   1a976:	e5d5      	b.n	1a524 <_svfiprintf_r+0x34>
   1a978:	f89b 2000 	ldrb.w	r2, [fp]
   1a97c:	2a6c      	cmp	r2, #108	; 0x6c
   1a97e:	bf03      	ittte	eq
   1a980:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
   1a984:	f043 0320 	orreq.w	r3, r3, #32
   1a988:	f10b 0b01 	addeq.w	fp, fp, #1
   1a98c:	f043 0310 	orrne.w	r3, r3, #16
   1a990:	e5fb      	b.n	1a58a <_svfiprintf_r+0x9a>
   1a992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a996:	f89b 2000 	ldrb.w	r2, [fp]
   1a99a:	e5f6      	b.n	1a58a <_svfiprintf_r+0x9a>
   1a99c:	9406      	str	r4, [sp, #24]
   1a99e:	2800      	cmp	r0, #0
   1a9a0:	f43f af61 	beq.w	1a866 <_svfiprintf_r+0x376>
   1a9a4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1a9a8:	e75d      	b.n	1a866 <_svfiprintf_r+0x376>
   1a9aa:	bf00      	nop
   1a9ac:	0001e6c8 	.word	0x0001e6c8
   1a9b0:	0001e6e4 	.word	0x0001e6e4
   1a9b4:	0001e6b4 	.word	0x0001e6b4
   1a9b8:	9907      	ldr	r1, [sp, #28]
   1a9ba:	9406      	str	r4, [sp, #24]
   1a9bc:	680e      	ldr	r6, [r1, #0]
   1a9be:	f04f 0200 	mov.w	r2, #0
   1a9c2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1a9c6:	1d0c      	adds	r4, r1, #4
   1a9c8:	2e00      	cmp	r6, #0
   1a9ca:	f000 8283 	beq.w	1aed4 <_svfiprintf_r+0x9e4>
   1a9ce:	f1b8 3fff 	cmp.w	r8, #4294967295
   1a9d2:	f000 8265 	beq.w	1aea0 <_svfiprintf_r+0x9b0>
   1a9d6:	4642      	mov	r2, r8
   1a9d8:	2100      	movs	r1, #0
   1a9da:	4630      	mov	r0, r6
   1a9dc:	9300      	str	r3, [sp, #0]
   1a9de:	f7ff f94f 	bl	19c80 <memchr>
   1a9e2:	9b00      	ldr	r3, [sp, #0]
   1a9e4:	2800      	cmp	r0, #0
   1a9e6:	f000 827e 	beq.w	1aee6 <_svfiprintf_r+0x9f6>
   1a9ea:	1b82      	subs	r2, r0, r6
   1a9ec:	9301      	str	r3, [sp, #4]
   1a9ee:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1a9f2:	9204      	str	r2, [sp, #16]
   1a9f4:	9407      	str	r4, [sp, #28]
   1a9f6:	9303      	str	r3, [sp, #12]
   1a9f8:	f04f 0800 	mov.w	r8, #0
   1a9fc:	e76f      	b.n	1a8de <_svfiprintf_r+0x3ee>
   1a9fe:	f043 0320 	orr.w	r3, r3, #32
   1aa02:	f89b 2000 	ldrb.w	r2, [fp]
   1aa06:	e5c0      	b.n	1a58a <_svfiprintf_r+0x9a>
   1aa08:	9807      	ldr	r0, [sp, #28]
   1aa0a:	4ab3      	ldr	r2, [pc, #716]	; (1acd8 <_svfiprintf_r+0x7e8>)
   1aa0c:	9406      	str	r4, [sp, #24]
   1aa0e:	920b      	str	r2, [sp, #44]	; 0x2c
   1aa10:	6804      	ldr	r4, [r0, #0]
   1aa12:	2278      	movs	r2, #120	; 0x78
   1aa14:	2130      	movs	r1, #48	; 0x30
   1aa16:	3004      	adds	r0, #4
   1aa18:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1aa1c:	f043 0302 	orr.w	r3, r3, #2
   1aa20:	9007      	str	r0, [sp, #28]
   1aa22:	2500      	movs	r5, #0
   1aa24:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1aa28:	2202      	movs	r2, #2
   1aa2a:	f04f 0100 	mov.w	r1, #0
   1aa2e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   1aa32:	2100      	movs	r1, #0
   1aa34:	9103      	str	r1, [sp, #12]
   1aa36:	f1b8 3fff 	cmp.w	r8, #4294967295
   1aa3a:	f43f af32 	beq.w	1a8a2 <_svfiprintf_r+0x3b2>
   1aa3e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   1aa42:	9101      	str	r1, [sp, #4]
   1aa44:	ea54 0105 	orrs.w	r1, r4, r5
   1aa48:	f47f af30 	bne.w	1a8ac <_svfiprintf_r+0x3bc>
   1aa4c:	f1b8 0f00 	cmp.w	r8, #0
   1aa50:	f040 8137 	bne.w	1acc2 <_svfiprintf_r+0x7d2>
   1aa54:	2a00      	cmp	r2, #0
   1aa56:	f040 81b1 	bne.w	1adbc <_svfiprintf_r+0x8cc>
   1aa5a:	f013 0301 	ands.w	r3, r3, #1
   1aa5e:	9304      	str	r3, [sp, #16]
   1aa60:	f000 81cb 	beq.w	1adfa <_svfiprintf_r+0x90a>
   1aa64:	ae2c      	add	r6, sp, #176	; 0xb0
   1aa66:	2330      	movs	r3, #48	; 0x30
   1aa68:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1aa6c:	e737      	b.n	1a8de <_svfiprintf_r+0x3ee>
   1aa6e:	9406      	str	r4, [sp, #24]
   1aa70:	2800      	cmp	r0, #0
   1aa72:	f040 825e 	bne.w	1af32 <_svfiprintf_r+0xa42>
   1aa76:	2a00      	cmp	r2, #0
   1aa78:	f000 80c5 	beq.w	1ac06 <_svfiprintf_r+0x716>
   1aa7c:	2101      	movs	r1, #1
   1aa7e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1aa82:	f04f 0200 	mov.w	r2, #0
   1aa86:	9100      	str	r1, [sp, #0]
   1aa88:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1aa8c:	9104      	str	r1, [sp, #16]
   1aa8e:	ae12      	add	r6, sp, #72	; 0x48
   1aa90:	e659      	b.n	1a746 <_svfiprintf_r+0x256>
   1aa92:	3104      	adds	r1, #4
   1aa94:	6814      	ldr	r4, [r2, #0]
   1aa96:	9107      	str	r1, [sp, #28]
   1aa98:	2201      	movs	r2, #1
   1aa9a:	2500      	movs	r5, #0
   1aa9c:	e7c5      	b.n	1aa2a <_svfiprintf_r+0x53a>
   1aa9e:	9807      	ldr	r0, [sp, #28]
   1aaa0:	4601      	mov	r1, r0
   1aaa2:	3104      	adds	r1, #4
   1aaa4:	6804      	ldr	r4, [r0, #0]
   1aaa6:	9107      	str	r1, [sp, #28]
   1aaa8:	2500      	movs	r5, #0
   1aaaa:	e7be      	b.n	1aa2a <_svfiprintf_r+0x53a>
   1aaac:	9911      	ldr	r1, [sp, #68]	; 0x44
   1aaae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1aab0:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1aab4:	b16a      	cbz	r2, 1aad2 <_svfiprintf_r+0x5e2>
   1aab6:	3301      	adds	r3, #1
   1aab8:	3101      	adds	r1, #1
   1aaba:	f10d 0037 	add.w	r0, sp, #55	; 0x37
   1aabe:	2201      	movs	r2, #1
   1aac0:	2b07      	cmp	r3, #7
   1aac2:	9111      	str	r1, [sp, #68]	; 0x44
   1aac4:	9310      	str	r3, [sp, #64]	; 0x40
   1aac6:	e889 0005 	stmia.w	r9, {r0, r2}
   1aaca:	f300 8145 	bgt.w	1ad58 <_svfiprintf_r+0x868>
   1aace:	f109 0908 	add.w	r9, r9, #8
   1aad2:	9a08      	ldr	r2, [sp, #32]
   1aad4:	b162      	cbz	r2, 1aaf0 <_svfiprintf_r+0x600>
   1aad6:	3301      	adds	r3, #1
   1aad8:	3102      	adds	r1, #2
   1aada:	a80e      	add	r0, sp, #56	; 0x38
   1aadc:	2202      	movs	r2, #2
   1aade:	2b07      	cmp	r3, #7
   1aae0:	9111      	str	r1, [sp, #68]	; 0x44
   1aae2:	9310      	str	r3, [sp, #64]	; 0x40
   1aae4:	e889 0005 	stmia.w	r9, {r0, r2}
   1aae8:	f300 8142 	bgt.w	1ad70 <_svfiprintf_r+0x880>
   1aaec:	f109 0908 	add.w	r9, r9, #8
   1aaf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1aaf2:	2a80      	cmp	r2, #128	; 0x80
   1aaf4:	f000 809b 	beq.w	1ac2e <_svfiprintf_r+0x73e>
   1aaf8:	9a04      	ldr	r2, [sp, #16]
   1aafa:	eba8 0502 	sub.w	r5, r8, r2
   1aafe:	2d00      	cmp	r5, #0
   1ab00:	dd31      	ble.n	1ab66 <_svfiprintf_r+0x676>
   1ab02:	2d10      	cmp	r5, #16
   1ab04:	4c75      	ldr	r4, [pc, #468]	; (1acdc <_svfiprintf_r+0x7ec>)
   1ab06:	dd23      	ble.n	1ab50 <_svfiprintf_r+0x660>
   1ab08:	464a      	mov	r2, r9
   1ab0a:	f04f 0810 	mov.w	r8, #16
   1ab0e:	46b1      	mov	r9, r6
   1ab10:	4626      	mov	r6, r4
   1ab12:	9c05      	ldr	r4, [sp, #20]
   1ab14:	e004      	b.n	1ab20 <_svfiprintf_r+0x630>
   1ab16:	3d10      	subs	r5, #16
   1ab18:	2d10      	cmp	r5, #16
   1ab1a:	f102 0208 	add.w	r2, r2, #8
   1ab1e:	dd14      	ble.n	1ab4a <_svfiprintf_r+0x65a>
   1ab20:	3301      	adds	r3, #1
   1ab22:	3110      	adds	r1, #16
   1ab24:	2b07      	cmp	r3, #7
   1ab26:	9111      	str	r1, [sp, #68]	; 0x44
   1ab28:	9310      	str	r3, [sp, #64]	; 0x40
   1ab2a:	e882 0140 	stmia.w	r2, {r6, r8}
   1ab2e:	ddf2      	ble.n	1ab16 <_svfiprintf_r+0x626>
   1ab30:	aa0f      	add	r2, sp, #60	; 0x3c
   1ab32:	4621      	mov	r1, r4
   1ab34:	4638      	mov	r0, r7
   1ab36:	f7ff fc5d 	bl	1a3f4 <__ssprint_r>
   1ab3a:	2800      	cmp	r0, #0
   1ab3c:	d16a      	bne.n	1ac14 <_svfiprintf_r+0x724>
   1ab3e:	3d10      	subs	r5, #16
   1ab40:	2d10      	cmp	r5, #16
   1ab42:	9911      	ldr	r1, [sp, #68]	; 0x44
   1ab44:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ab46:	4652      	mov	r2, sl
   1ab48:	dcea      	bgt.n	1ab20 <_svfiprintf_r+0x630>
   1ab4a:	4634      	mov	r4, r6
   1ab4c:	464e      	mov	r6, r9
   1ab4e:	4691      	mov	r9, r2
   1ab50:	3301      	adds	r3, #1
   1ab52:	4429      	add	r1, r5
   1ab54:	2b07      	cmp	r3, #7
   1ab56:	9111      	str	r1, [sp, #68]	; 0x44
   1ab58:	9310      	str	r3, [sp, #64]	; 0x40
   1ab5a:	e889 0030 	stmia.w	r9, {r4, r5}
   1ab5e:	f300 80ca 	bgt.w	1acf6 <_svfiprintf_r+0x806>
   1ab62:	f109 0908 	add.w	r9, r9, #8
   1ab66:	9804      	ldr	r0, [sp, #16]
   1ab68:	f8c9 6000 	str.w	r6, [r9]
   1ab6c:	3301      	adds	r3, #1
   1ab6e:	4401      	add	r1, r0
   1ab70:	2b07      	cmp	r3, #7
   1ab72:	9111      	str	r1, [sp, #68]	; 0x44
   1ab74:	9310      	str	r3, [sp, #64]	; 0x40
   1ab76:	f8c9 0004 	str.w	r0, [r9, #4]
   1ab7a:	f300 8090 	bgt.w	1ac9e <_svfiprintf_r+0x7ae>
   1ab7e:	f109 0908 	add.w	r9, r9, #8
   1ab82:	9b01      	ldr	r3, [sp, #4]
   1ab84:	075b      	lsls	r3, r3, #29
   1ab86:	d530      	bpl.n	1abea <_svfiprintf_r+0x6fa>
   1ab88:	9b06      	ldr	r3, [sp, #24]
   1ab8a:	9a00      	ldr	r2, [sp, #0]
   1ab8c:	1a9c      	subs	r4, r3, r2
   1ab8e:	2c00      	cmp	r4, #0
   1ab90:	dd2b      	ble.n	1abea <_svfiprintf_r+0x6fa>
   1ab92:	2c10      	cmp	r4, #16
   1ab94:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ab96:	4d52      	ldr	r5, [pc, #328]	; (1ace0 <_svfiprintf_r+0x7f0>)
   1ab98:	dd1c      	ble.n	1abd4 <_svfiprintf_r+0x6e4>
   1ab9a:	2610      	movs	r6, #16
   1ab9c:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1aba0:	e004      	b.n	1abac <_svfiprintf_r+0x6bc>
   1aba2:	3c10      	subs	r4, #16
   1aba4:	2c10      	cmp	r4, #16
   1aba6:	f109 0908 	add.w	r9, r9, #8
   1abaa:	dd13      	ble.n	1abd4 <_svfiprintf_r+0x6e4>
   1abac:	3301      	adds	r3, #1
   1abae:	3110      	adds	r1, #16
   1abb0:	2b07      	cmp	r3, #7
   1abb2:	9111      	str	r1, [sp, #68]	; 0x44
   1abb4:	9310      	str	r3, [sp, #64]	; 0x40
   1abb6:	e889 0060 	stmia.w	r9, {r5, r6}
   1abba:	ddf2      	ble.n	1aba2 <_svfiprintf_r+0x6b2>
   1abbc:	aa0f      	add	r2, sp, #60	; 0x3c
   1abbe:	4641      	mov	r1, r8
   1abc0:	4638      	mov	r0, r7
   1abc2:	f7ff fc17 	bl	1a3f4 <__ssprint_r>
   1abc6:	bb28      	cbnz	r0, 1ac14 <_svfiprintf_r+0x724>
   1abc8:	3c10      	subs	r4, #16
   1abca:	2c10      	cmp	r4, #16
   1abcc:	9911      	ldr	r1, [sp, #68]	; 0x44
   1abce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1abd0:	46d1      	mov	r9, sl
   1abd2:	dceb      	bgt.n	1abac <_svfiprintf_r+0x6bc>
   1abd4:	3301      	adds	r3, #1
   1abd6:	4421      	add	r1, r4
   1abd8:	2b07      	cmp	r3, #7
   1abda:	9111      	str	r1, [sp, #68]	; 0x44
   1abdc:	9310      	str	r3, [sp, #64]	; 0x40
   1abde:	f8c9 5000 	str.w	r5, [r9]
   1abe2:	f8c9 4004 	str.w	r4, [r9, #4]
   1abe6:	f300 80f9 	bgt.w	1addc <_svfiprintf_r+0x8ec>
   1abea:	9b02      	ldr	r3, [sp, #8]
   1abec:	9a06      	ldr	r2, [sp, #24]
   1abee:	9800      	ldr	r0, [sp, #0]
   1abf0:	4282      	cmp	r2, r0
   1abf2:	bfac      	ite	ge
   1abf4:	189b      	addge	r3, r3, r2
   1abf6:	181b      	addlt	r3, r3, r0
   1abf8:	9302      	str	r3, [sp, #8]
   1abfa:	2900      	cmp	r1, #0
   1abfc:	d159      	bne.n	1acb2 <_svfiprintf_r+0x7c2>
   1abfe:	2300      	movs	r3, #0
   1ac00:	9310      	str	r3, [sp, #64]	; 0x40
   1ac02:	46d1      	mov	r9, sl
   1ac04:	e48e      	b.n	1a524 <_svfiprintf_r+0x34>
   1ac06:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ac08:	b123      	cbz	r3, 1ac14 <_svfiprintf_r+0x724>
   1ac0a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ac0c:	9905      	ldr	r1, [sp, #20]
   1ac0e:	aa0f      	add	r2, sp, #60	; 0x3c
   1ac10:	f7ff fbf0 	bl	1a3f4 <__ssprint_r>
   1ac14:	9b05      	ldr	r3, [sp, #20]
   1ac16:	899b      	ldrh	r3, [r3, #12]
   1ac18:	f013 0f40 	tst.w	r3, #64	; 0x40
   1ac1c:	9b02      	ldr	r3, [sp, #8]
   1ac1e:	bf18      	it	ne
   1ac20:	f04f 33ff 	movne.w	r3, #4294967295
   1ac24:	9302      	str	r3, [sp, #8]
   1ac26:	9802      	ldr	r0, [sp, #8]
   1ac28:	b02d      	add	sp, #180	; 0xb4
   1ac2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac2e:	9a06      	ldr	r2, [sp, #24]
   1ac30:	9800      	ldr	r0, [sp, #0]
   1ac32:	1a15      	subs	r5, r2, r0
   1ac34:	2d00      	cmp	r5, #0
   1ac36:	f77f af5f 	ble.w	1aaf8 <_svfiprintf_r+0x608>
   1ac3a:	2d10      	cmp	r5, #16
   1ac3c:	4c27      	ldr	r4, [pc, #156]	; (1acdc <_svfiprintf_r+0x7ec>)
   1ac3e:	dd22      	ble.n	1ac86 <_svfiprintf_r+0x796>
   1ac40:	464a      	mov	r2, r9
   1ac42:	46b1      	mov	r9, r6
   1ac44:	4626      	mov	r6, r4
   1ac46:	9c05      	ldr	r4, [sp, #20]
   1ac48:	e004      	b.n	1ac54 <_svfiprintf_r+0x764>
   1ac4a:	3d10      	subs	r5, #16
   1ac4c:	2d10      	cmp	r5, #16
   1ac4e:	f102 0208 	add.w	r2, r2, #8
   1ac52:	dd15      	ble.n	1ac80 <_svfiprintf_r+0x790>
   1ac54:	3301      	adds	r3, #1
   1ac56:	3110      	adds	r1, #16
   1ac58:	2010      	movs	r0, #16
   1ac5a:	2b07      	cmp	r3, #7
   1ac5c:	9111      	str	r1, [sp, #68]	; 0x44
   1ac5e:	9310      	str	r3, [sp, #64]	; 0x40
   1ac60:	6016      	str	r6, [r2, #0]
   1ac62:	6050      	str	r0, [r2, #4]
   1ac64:	ddf1      	ble.n	1ac4a <_svfiprintf_r+0x75a>
   1ac66:	aa0f      	add	r2, sp, #60	; 0x3c
   1ac68:	4621      	mov	r1, r4
   1ac6a:	4638      	mov	r0, r7
   1ac6c:	f7ff fbc2 	bl	1a3f4 <__ssprint_r>
   1ac70:	2800      	cmp	r0, #0
   1ac72:	d1cf      	bne.n	1ac14 <_svfiprintf_r+0x724>
   1ac74:	3d10      	subs	r5, #16
   1ac76:	2d10      	cmp	r5, #16
   1ac78:	9911      	ldr	r1, [sp, #68]	; 0x44
   1ac7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ac7c:	4652      	mov	r2, sl
   1ac7e:	dce9      	bgt.n	1ac54 <_svfiprintf_r+0x764>
   1ac80:	4634      	mov	r4, r6
   1ac82:	464e      	mov	r6, r9
   1ac84:	4691      	mov	r9, r2
   1ac86:	3301      	adds	r3, #1
   1ac88:	4429      	add	r1, r5
   1ac8a:	2b07      	cmp	r3, #7
   1ac8c:	9111      	str	r1, [sp, #68]	; 0x44
   1ac8e:	9310      	str	r3, [sp, #64]	; 0x40
   1ac90:	e889 0030 	stmia.w	r9, {r4, r5}
   1ac94:	f300 80f0 	bgt.w	1ae78 <_svfiprintf_r+0x988>
   1ac98:	f109 0908 	add.w	r9, r9, #8
   1ac9c:	e72c      	b.n	1aaf8 <_svfiprintf_r+0x608>
   1ac9e:	aa0f      	add	r2, sp, #60	; 0x3c
   1aca0:	9905      	ldr	r1, [sp, #20]
   1aca2:	4638      	mov	r0, r7
   1aca4:	f7ff fba6 	bl	1a3f4 <__ssprint_r>
   1aca8:	2800      	cmp	r0, #0
   1acaa:	d1b3      	bne.n	1ac14 <_svfiprintf_r+0x724>
   1acac:	9911      	ldr	r1, [sp, #68]	; 0x44
   1acae:	46d1      	mov	r9, sl
   1acb0:	e767      	b.n	1ab82 <_svfiprintf_r+0x692>
   1acb2:	aa0f      	add	r2, sp, #60	; 0x3c
   1acb4:	9905      	ldr	r1, [sp, #20]
   1acb6:	4638      	mov	r0, r7
   1acb8:	f7ff fb9c 	bl	1a3f4 <__ssprint_r>
   1acbc:	2800      	cmp	r0, #0
   1acbe:	d09e      	beq.n	1abfe <_svfiprintf_r+0x70e>
   1acc0:	e7a8      	b.n	1ac14 <_svfiprintf_r+0x724>
   1acc2:	9b01      	ldr	r3, [sp, #4]
   1acc4:	2a01      	cmp	r2, #1
   1acc6:	f000 80b7 	beq.w	1ae38 <_svfiprintf_r+0x948>
   1acca:	2a02      	cmp	r2, #2
   1accc:	d11e      	bne.n	1ad0c <_svfiprintf_r+0x81c>
   1acce:	9301      	str	r3, [sp, #4]
   1acd0:	2400      	movs	r4, #0
   1acd2:	2500      	movs	r5, #0
   1acd4:	e5f0      	b.n	1a8b8 <_svfiprintf_r+0x3c8>
   1acd6:	bf00      	nop
   1acd8:	0001e6c8 	.word	0x0001e6c8
   1acdc:	0001e6f4 	.word	0x0001e6f4
   1ace0:	0001e6e4 	.word	0x0001e6e4
   1ace4:	aa0f      	add	r2, sp, #60	; 0x3c
   1ace6:	9905      	ldr	r1, [sp, #20]
   1ace8:	4638      	mov	r0, r7
   1acea:	f7ff fb83 	bl	1a3f4 <__ssprint_r>
   1acee:	2800      	cmp	r0, #0
   1acf0:	d190      	bne.n	1ac14 <_svfiprintf_r+0x724>
   1acf2:	46d1      	mov	r9, sl
   1acf4:	e435      	b.n	1a562 <_svfiprintf_r+0x72>
   1acf6:	aa0f      	add	r2, sp, #60	; 0x3c
   1acf8:	9905      	ldr	r1, [sp, #20]
   1acfa:	4638      	mov	r0, r7
   1acfc:	f7ff fb7a 	bl	1a3f4 <__ssprint_r>
   1ad00:	2800      	cmp	r0, #0
   1ad02:	d187      	bne.n	1ac14 <_svfiprintf_r+0x724>
   1ad04:	9911      	ldr	r1, [sp, #68]	; 0x44
   1ad06:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ad08:	46d1      	mov	r9, sl
   1ad0a:	e72c      	b.n	1ab66 <_svfiprintf_r+0x676>
   1ad0c:	9301      	str	r3, [sp, #4]
   1ad0e:	2400      	movs	r4, #0
   1ad10:	2500      	movs	r5, #0
   1ad12:	4651      	mov	r1, sl
   1ad14:	e000      	b.n	1ad18 <_svfiprintf_r+0x828>
   1ad16:	4631      	mov	r1, r6
   1ad18:	08e2      	lsrs	r2, r4, #3
   1ad1a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1ad1e:	08e8      	lsrs	r0, r5, #3
   1ad20:	f004 0307 	and.w	r3, r4, #7
   1ad24:	4605      	mov	r5, r0
   1ad26:	4614      	mov	r4, r2
   1ad28:	3330      	adds	r3, #48	; 0x30
   1ad2a:	ea54 0205 	orrs.w	r2, r4, r5
   1ad2e:	f801 3c01 	strb.w	r3, [r1, #-1]
   1ad32:	f101 36ff 	add.w	r6, r1, #4294967295
   1ad36:	d1ee      	bne.n	1ad16 <_svfiprintf_r+0x826>
   1ad38:	9a01      	ldr	r2, [sp, #4]
   1ad3a:	07d2      	lsls	r2, r2, #31
   1ad3c:	f57f adcc 	bpl.w	1a8d8 <_svfiprintf_r+0x3e8>
   1ad40:	2b30      	cmp	r3, #48	; 0x30
   1ad42:	f43f adc9 	beq.w	1a8d8 <_svfiprintf_r+0x3e8>
   1ad46:	3902      	subs	r1, #2
   1ad48:	2330      	movs	r3, #48	; 0x30
   1ad4a:	f806 3c01 	strb.w	r3, [r6, #-1]
   1ad4e:	ebaa 0301 	sub.w	r3, sl, r1
   1ad52:	9304      	str	r3, [sp, #16]
   1ad54:	460e      	mov	r6, r1
   1ad56:	e5c2      	b.n	1a8de <_svfiprintf_r+0x3ee>
   1ad58:	aa0f      	add	r2, sp, #60	; 0x3c
   1ad5a:	9905      	ldr	r1, [sp, #20]
   1ad5c:	4638      	mov	r0, r7
   1ad5e:	f7ff fb49 	bl	1a3f4 <__ssprint_r>
   1ad62:	2800      	cmp	r0, #0
   1ad64:	f47f af56 	bne.w	1ac14 <_svfiprintf_r+0x724>
   1ad68:	9911      	ldr	r1, [sp, #68]	; 0x44
   1ad6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ad6c:	46d1      	mov	r9, sl
   1ad6e:	e6b0      	b.n	1aad2 <_svfiprintf_r+0x5e2>
   1ad70:	aa0f      	add	r2, sp, #60	; 0x3c
   1ad72:	9905      	ldr	r1, [sp, #20]
   1ad74:	4638      	mov	r0, r7
   1ad76:	f7ff fb3d 	bl	1a3f4 <__ssprint_r>
   1ad7a:	2800      	cmp	r0, #0
   1ad7c:	f47f af4a 	bne.w	1ac14 <_svfiprintf_r+0x724>
   1ad80:	9911      	ldr	r1, [sp, #68]	; 0x44
   1ad82:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ad84:	46d1      	mov	r9, sl
   1ad86:	e6b3      	b.n	1aaf0 <_svfiprintf_r+0x600>
   1ad88:	2d00      	cmp	r5, #0
   1ad8a:	bf08      	it	eq
   1ad8c:	2c0a      	cmpeq	r4, #10
   1ad8e:	d352      	bcc.n	1ae36 <_svfiprintf_r+0x946>
   1ad90:	4656      	mov	r6, sl
   1ad92:	4620      	mov	r0, r4
   1ad94:	4629      	mov	r1, r5
   1ad96:	220a      	movs	r2, #10
   1ad98:	2300      	movs	r3, #0
   1ad9a:	f7fd fbe1 	bl	18560 <__aeabi_uldivmod>
   1ad9e:	3230      	adds	r2, #48	; 0x30
   1ada0:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1ada4:	4620      	mov	r0, r4
   1ada6:	4629      	mov	r1, r5
   1ada8:	2300      	movs	r3, #0
   1adaa:	220a      	movs	r2, #10
   1adac:	f7fd fbd8 	bl	18560 <__aeabi_uldivmod>
   1adb0:	4604      	mov	r4, r0
   1adb2:	460d      	mov	r5, r1
   1adb4:	ea54 0305 	orrs.w	r3, r4, r5
   1adb8:	d1eb      	bne.n	1ad92 <_svfiprintf_r+0x8a2>
   1adba:	e58d      	b.n	1a8d8 <_svfiprintf_r+0x3e8>
   1adbc:	f8cd 8010 	str.w	r8, [sp, #16]
   1adc0:	4656      	mov	r6, sl
   1adc2:	e58c      	b.n	1a8de <_svfiprintf_r+0x3ee>
   1adc4:	aa0f      	add	r2, sp, #60	; 0x3c
   1adc6:	9905      	ldr	r1, [sp, #20]
   1adc8:	4638      	mov	r0, r7
   1adca:	f7ff fb13 	bl	1a3f4 <__ssprint_r>
   1adce:	2800      	cmp	r0, #0
   1add0:	f47f af20 	bne.w	1ac14 <_svfiprintf_r+0x724>
   1add4:	9911      	ldr	r1, [sp, #68]	; 0x44
   1add6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1add8:	46d1      	mov	r9, sl
   1adda:	e669      	b.n	1aab0 <_svfiprintf_r+0x5c0>
   1addc:	aa0f      	add	r2, sp, #60	; 0x3c
   1adde:	9905      	ldr	r1, [sp, #20]
   1ade0:	4638      	mov	r0, r7
   1ade2:	f7ff fb07 	bl	1a3f4 <__ssprint_r>
   1ade6:	2800      	cmp	r0, #0
   1ade8:	f47f af14 	bne.w	1ac14 <_svfiprintf_r+0x724>
   1adec:	9911      	ldr	r1, [sp, #68]	; 0x44
   1adee:	e6fc      	b.n	1abea <_svfiprintf_r+0x6fa>
   1adf0:	9207      	str	r2, [sp, #28]
   1adf2:	f89b 2000 	ldrb.w	r2, [fp]
   1adf6:	f7ff bbc8 	b.w	1a58a <_svfiprintf_r+0x9a>
   1adfa:	4656      	mov	r6, sl
   1adfc:	e56f      	b.n	1a8de <_svfiprintf_r+0x3ee>
   1adfe:	9e07      	ldr	r6, [sp, #28]
   1ae00:	f9b6 4000 	ldrsh.w	r4, [r6]
   1ae04:	4632      	mov	r2, r6
   1ae06:	17e5      	asrs	r5, r4, #31
   1ae08:	4620      	mov	r0, r4
   1ae0a:	3204      	adds	r2, #4
   1ae0c:	4629      	mov	r1, r5
   1ae0e:	2800      	cmp	r0, #0
   1ae10:	9207      	str	r2, [sp, #28]
   1ae12:	f171 0200 	sbcs.w	r2, r1, #0
   1ae16:	f6bf ad3b 	bge.w	1a890 <_svfiprintf_r+0x3a0>
   1ae1a:	222d      	movs	r2, #45	; 0x2d
   1ae1c:	4264      	negs	r4, r4
   1ae1e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1ae22:	9203      	str	r2, [sp, #12]
   1ae24:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1ae28:	2201      	movs	r2, #1
   1ae2a:	e604      	b.n	1aa36 <_svfiprintf_r+0x546>
   1ae2c:	880c      	ldrh	r4, [r1, #0]
   1ae2e:	3104      	adds	r1, #4
   1ae30:	2500      	movs	r5, #0
   1ae32:	9107      	str	r1, [sp, #28]
   1ae34:	e455      	b.n	1a6e2 <_svfiprintf_r+0x1f2>
   1ae36:	9b01      	ldr	r3, [sp, #4]
   1ae38:	9301      	str	r3, [sp, #4]
   1ae3a:	ae2c      	add	r6, sp, #176	; 0xb0
   1ae3c:	3430      	adds	r4, #48	; 0x30
   1ae3e:	2301      	movs	r3, #1
   1ae40:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1ae44:	9304      	str	r3, [sp, #16]
   1ae46:	e54a      	b.n	1a8de <_svfiprintf_r+0x3ee>
   1ae48:	9a07      	ldr	r2, [sp, #28]
   1ae4a:	9902      	ldr	r1, [sp, #8]
   1ae4c:	6813      	ldr	r3, [r2, #0]
   1ae4e:	17cd      	asrs	r5, r1, #31
   1ae50:	4608      	mov	r0, r1
   1ae52:	3204      	adds	r2, #4
   1ae54:	4629      	mov	r1, r5
   1ae56:	9207      	str	r2, [sp, #28]
   1ae58:	e9c3 0100 	strd	r0, r1, [r3]
   1ae5c:	f7ff bb62 	b.w	1a524 <_svfiprintf_r+0x34>
   1ae60:	9c07      	ldr	r4, [sp, #28]
   1ae62:	3407      	adds	r4, #7
   1ae64:	f024 0407 	bic.w	r4, r4, #7
   1ae68:	e9d4 0100 	ldrd	r0, r1, [r4]
   1ae6c:	f104 0208 	add.w	r2, r4, #8
   1ae70:	9207      	str	r2, [sp, #28]
   1ae72:	4604      	mov	r4, r0
   1ae74:	460d      	mov	r5, r1
   1ae76:	e506      	b.n	1a886 <_svfiprintf_r+0x396>
   1ae78:	aa0f      	add	r2, sp, #60	; 0x3c
   1ae7a:	9905      	ldr	r1, [sp, #20]
   1ae7c:	4638      	mov	r0, r7
   1ae7e:	f7ff fab9 	bl	1a3f4 <__ssprint_r>
   1ae82:	2800      	cmp	r0, #0
   1ae84:	f47f aec6 	bne.w	1ac14 <_svfiprintf_r+0x724>
   1ae88:	9911      	ldr	r1, [sp, #68]	; 0x44
   1ae8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ae8c:	46d1      	mov	r9, sl
   1ae8e:	e633      	b.n	1aaf8 <_svfiprintf_r+0x608>
   1ae90:	9a07      	ldr	r2, [sp, #28]
   1ae92:	6813      	ldr	r3, [r2, #0]
   1ae94:	3204      	adds	r2, #4
   1ae96:	9207      	str	r2, [sp, #28]
   1ae98:	9a02      	ldr	r2, [sp, #8]
   1ae9a:	601a      	str	r2, [r3, #0]
   1ae9c:	f7ff bb42 	b.w	1a524 <_svfiprintf_r+0x34>
   1aea0:	4630      	mov	r0, r6
   1aea2:	9301      	str	r3, [sp, #4]
   1aea4:	9407      	str	r4, [sp, #28]
   1aea6:	f7fd ff6b 	bl	18d80 <strlen>
   1aeaa:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1aeae:	9004      	str	r0, [sp, #16]
   1aeb0:	9303      	str	r3, [sp, #12]
   1aeb2:	f04f 0800 	mov.w	r8, #0
   1aeb6:	e512      	b.n	1a8de <_svfiprintf_r+0x3ee>
   1aeb8:	2140      	movs	r1, #64	; 0x40
   1aeba:	9200      	str	r2, [sp, #0]
   1aebc:	f7fe fc2e 	bl	1971c <_malloc_r>
   1aec0:	9a05      	ldr	r2, [sp, #20]
   1aec2:	6010      	str	r0, [r2, #0]
   1aec4:	6110      	str	r0, [r2, #16]
   1aec6:	9a00      	ldr	r2, [sp, #0]
   1aec8:	b328      	cbz	r0, 1af16 <_svfiprintf_r+0xa26>
   1aeca:	9905      	ldr	r1, [sp, #20]
   1aecc:	2340      	movs	r3, #64	; 0x40
   1aece:	614b      	str	r3, [r1, #20]
   1aed0:	f7ff bb1c 	b.w	1a50c <_svfiprintf_r+0x1c>
   1aed4:	4642      	mov	r2, r8
   1aed6:	2a06      	cmp	r2, #6
   1aed8:	bf28      	it	cs
   1aeda:	2206      	movcs	r2, #6
   1aedc:	9204      	str	r2, [sp, #16]
   1aede:	9407      	str	r4, [sp, #28]
   1aee0:	9200      	str	r2, [sp, #0]
   1aee2:	4e17      	ldr	r6, [pc, #92]	; (1af40 <_svfiprintf_r+0xa50>)
   1aee4:	e42f      	b.n	1a746 <_svfiprintf_r+0x256>
   1aee6:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1aeea:	f8cd 8010 	str.w	r8, [sp, #16]
   1aeee:	9203      	str	r2, [sp, #12]
   1aef0:	9407      	str	r4, [sp, #28]
   1aef2:	9301      	str	r3, [sp, #4]
   1aef4:	4680      	mov	r8, r0
   1aef6:	e4f2      	b.n	1a8de <_svfiprintf_r+0x3ee>
   1aef8:	9a07      	ldr	r2, [sp, #28]
   1aefa:	6811      	ldr	r1, [r2, #0]
   1aefc:	f89b 2001 	ldrb.w	r2, [fp, #1]
   1af00:	ea41 78e1 	orr.w	r8, r1, r1, asr #31
   1af04:	9907      	ldr	r1, [sp, #28]
   1af06:	3104      	adds	r1, #4
   1af08:	46b3      	mov	fp, r6
   1af0a:	9107      	str	r1, [sp, #28]
   1af0c:	f7ff bb3d 	b.w	1a58a <_svfiprintf_r+0x9a>
   1af10:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1af14:	e51f      	b.n	1a956 <_svfiprintf_r+0x466>
   1af16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1af18:	230c      	movs	r3, #12
   1af1a:	6013      	str	r3, [r2, #0]
   1af1c:	f04f 33ff 	mov.w	r3, #4294967295
   1af20:	9302      	str	r3, [sp, #8]
   1af22:	e680      	b.n	1ac26 <_svfiprintf_r+0x736>
   1af24:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1af28:	f7ff bbcb 	b.w	1a6c2 <_svfiprintf_r+0x1d2>
   1af2c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1af30:	e497      	b.n	1a862 <_svfiprintf_r+0x372>
   1af32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1af36:	e59e      	b.n	1aa76 <_svfiprintf_r+0x586>
   1af38:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1af3c:	e457      	b.n	1a7ee <_svfiprintf_r+0x2fe>
   1af3e:	bf00      	nop
   1af40:	0001e6dc 	.word	0x0001e6dc

0001af44 <_sungetc_r>:
   1af44:	b538      	push	{r3, r4, r5, lr}
   1af46:	1c4b      	adds	r3, r1, #1
   1af48:	d01a      	beq.n	1af80 <_sungetc_r+0x3c>
   1af4a:	8993      	ldrh	r3, [r2, #12]
   1af4c:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1af4e:	f023 0320 	bic.w	r3, r3, #32
   1af52:	b2cd      	uxtb	r5, r1
   1af54:	8193      	strh	r3, [r2, #12]
   1af56:	b1b4      	cbz	r4, 1af86 <_sungetc_r+0x42>
   1af58:	4614      	mov	r4, r2
   1af5a:	6852      	ldr	r2, [r2, #4]
   1af5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1af5e:	429a      	cmp	r2, r3
   1af60:	da09      	bge.n	1af76 <_sungetc_r+0x32>
   1af62:	6823      	ldr	r3, [r4, #0]
   1af64:	1e5a      	subs	r2, r3, #1
   1af66:	6022      	str	r2, [r4, #0]
   1af68:	f803 5c01 	strb.w	r5, [r3, #-1]
   1af6c:	6863      	ldr	r3, [r4, #4]
   1af6e:	3301      	adds	r3, #1
   1af70:	6063      	str	r3, [r4, #4]
   1af72:	4628      	mov	r0, r5
   1af74:	bd38      	pop	{r3, r4, r5, pc}
   1af76:	4621      	mov	r1, r4
   1af78:	f000 fd52 	bl	1ba20 <__submore>
   1af7c:	2800      	cmp	r0, #0
   1af7e:	d0f0      	beq.n	1af62 <_sungetc_r+0x1e>
   1af80:	f04f 35ff 	mov.w	r5, #4294967295
   1af84:	e7f5      	b.n	1af72 <_sungetc_r+0x2e>
   1af86:	6911      	ldr	r1, [r2, #16]
   1af88:	6813      	ldr	r3, [r2, #0]
   1af8a:	b129      	cbz	r1, 1af98 <_sungetc_r+0x54>
   1af8c:	4299      	cmp	r1, r3
   1af8e:	d203      	bcs.n	1af98 <_sungetc_r+0x54>
   1af90:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   1af94:	428d      	cmp	r5, r1
   1af96:	d00f      	beq.n	1afb8 <_sungetc_r+0x74>
   1af98:	6393      	str	r3, [r2, #56]	; 0x38
   1af9a:	4613      	mov	r3, r2
   1af9c:	6854      	ldr	r4, [r2, #4]
   1af9e:	63d4      	str	r4, [r2, #60]	; 0x3c
   1afa0:	f102 0040 	add.w	r0, r2, #64	; 0x40
   1afa4:	2103      	movs	r1, #3
   1afa6:	6310      	str	r0, [r2, #48]	; 0x30
   1afa8:	6351      	str	r1, [r2, #52]	; 0x34
   1afaa:	f803 5f42 	strb.w	r5, [r3, #66]!
   1afae:	2101      	movs	r1, #1
   1afb0:	6013      	str	r3, [r2, #0]
   1afb2:	6051      	str	r1, [r2, #4]
   1afb4:	4628      	mov	r0, r5
   1afb6:	bd38      	pop	{r3, r4, r5, pc}
   1afb8:	6851      	ldr	r1, [r2, #4]
   1afba:	3b01      	subs	r3, #1
   1afbc:	3101      	adds	r1, #1
   1afbe:	6013      	str	r3, [r2, #0]
   1afc0:	6051      	str	r1, [r2, #4]
   1afc2:	e7d6      	b.n	1af72 <_sungetc_r+0x2e>

0001afc4 <__ssrefill_r>:
   1afc4:	b510      	push	{r4, lr}
   1afc6:	460c      	mov	r4, r1
   1afc8:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1afca:	b169      	cbz	r1, 1afe8 <__ssrefill_r+0x24>
   1afcc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1afd0:	4299      	cmp	r1, r3
   1afd2:	d001      	beq.n	1afd8 <__ssrefill_r+0x14>
   1afd4:	f000 fdbc 	bl	1bb50 <_free_r>
   1afd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1afda:	6063      	str	r3, [r4, #4]
   1afdc:	2000      	movs	r0, #0
   1afde:	6320      	str	r0, [r4, #48]	; 0x30
   1afe0:	b113      	cbz	r3, 1afe8 <__ssrefill_r+0x24>
   1afe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1afe4:	6023      	str	r3, [r4, #0]
   1afe6:	bd10      	pop	{r4, pc}
   1afe8:	89a3      	ldrh	r3, [r4, #12]
   1afea:	6922      	ldr	r2, [r4, #16]
   1afec:	6022      	str	r2, [r4, #0]
   1afee:	f043 0320 	orr.w	r3, r3, #32
   1aff2:	2200      	movs	r2, #0
   1aff4:	81a3      	strh	r3, [r4, #12]
   1aff6:	6062      	str	r2, [r4, #4]
   1aff8:	f04f 30ff 	mov.w	r0, #4294967295
   1affc:	bd10      	pop	{r4, pc}
   1affe:	bf00      	nop

0001b000 <_sfread_r>:
   1b000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b004:	b083      	sub	sp, #12
   1b006:	fb02 f903 	mul.w	r9, r2, r3
   1b00a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1b00c:	f1b9 0f00 	cmp.w	r9, #0
   1b010:	d028      	beq.n	1b064 <_sfread_r+0x64>
   1b012:	4607      	mov	r7, r0
   1b014:	469a      	mov	sl, r3
   1b016:	9201      	str	r2, [sp, #4]
   1b018:	460d      	mov	r5, r1
   1b01a:	464e      	mov	r6, r9
   1b01c:	f04f 0800 	mov.w	r8, #0
   1b020:	e00f      	b.n	1b042 <_sfread_r+0x42>
   1b022:	6821      	ldr	r1, [r4, #0]
   1b024:	f7fd fd98 	bl	18b58 <memcpy>
   1b028:	6822      	ldr	r2, [r4, #0]
   1b02a:	f8c4 8004 	str.w	r8, [r4, #4]
   1b02e:	445a      	add	r2, fp
   1b030:	6022      	str	r2, [r4, #0]
   1b032:	4621      	mov	r1, r4
   1b034:	4638      	mov	r0, r7
   1b036:	445d      	add	r5, fp
   1b038:	eba6 060b 	sub.w	r6, r6, fp
   1b03c:	f7ff ffc2 	bl	1afc4 <__ssrefill_r>
   1b040:	b9a0      	cbnz	r0, 1b06c <_sfread_r+0x6c>
   1b042:	f8d4 b004 	ldr.w	fp, [r4, #4]
   1b046:	455e      	cmp	r6, fp
   1b048:	4628      	mov	r0, r5
   1b04a:	465a      	mov	r2, fp
   1b04c:	d8e9      	bhi.n	1b022 <_sfread_r+0x22>
   1b04e:	4632      	mov	r2, r6
   1b050:	6821      	ldr	r1, [r4, #0]
   1b052:	f7fd fd81 	bl	18b58 <memcpy>
   1b056:	6862      	ldr	r2, [r4, #4]
   1b058:	6823      	ldr	r3, [r4, #0]
   1b05a:	1b92      	subs	r2, r2, r6
   1b05c:	441e      	add	r6, r3
   1b05e:	46d1      	mov	r9, sl
   1b060:	6062      	str	r2, [r4, #4]
   1b062:	6026      	str	r6, [r4, #0]
   1b064:	4648      	mov	r0, r9
   1b066:	b003      	add	sp, #12
   1b068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b06c:	9b01      	ldr	r3, [sp, #4]
   1b06e:	eba9 0906 	sub.w	r9, r9, r6
   1b072:	fbb9 f9f3 	udiv	r9, r9, r3
   1b076:	4648      	mov	r0, r9
   1b078:	b003      	add	sp, #12
   1b07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b07e:	bf00      	nop

0001b080 <__ssvfiscanf_r>:
   1b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b084:	468b      	mov	fp, r1
   1b086:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   1b08a:	b0d9      	sub	sp, #356	; 0x164
   1b08c:	4607      	mov	r7, r0
   1b08e:	0488      	lsls	r0, r1, #18
   1b090:	9306      	str	r3, [sp, #24]
   1b092:	d409      	bmi.n	1b0a8 <__ssvfiscanf_r+0x28>
   1b094:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1b098:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1b09c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1b0a0:	f8ab 100c 	strh.w	r1, [fp, #12]
   1b0a4:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   1b0a8:	4614      	mov	r4, r2
   1b0aa:	4626      	mov	r6, r4
   1b0ac:	2300      	movs	r3, #0
   1b0ae:	9307      	str	r3, [sp, #28]
   1b0b0:	9304      	str	r3, [sp, #16]
   1b0b2:	469a      	mov	sl, r3
   1b0b4:	9305      	str	r3, [sp, #20]
   1b0b6:	f816 3b01 	ldrb.w	r3, [r6], #1
   1b0ba:	930b      	str	r3, [sp, #44]	; 0x2c
   1b0bc:	b363      	cbz	r3, 1b118 <__ssvfiscanf_r+0x98>
   1b0be:	f000 fe4d 	bl	1bd5c <__locale_ctype_ptr>
   1b0c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b0c4:	4418      	add	r0, r3
   1b0c6:	7845      	ldrb	r5, [r0, #1]
   1b0c8:	f015 0508 	ands.w	r5, r5, #8
   1b0cc:	d028      	beq.n	1b120 <__ssvfiscanf_r+0xa0>
   1b0ce:	f8db 2004 	ldr.w	r2, [fp, #4]
   1b0d2:	e012      	b.n	1b0fa <__ssvfiscanf_r+0x7a>
   1b0d4:	f000 fe42 	bl	1bd5c <__locale_ctype_ptr>
   1b0d8:	f8db 3000 	ldr.w	r3, [fp]
   1b0dc:	781a      	ldrb	r2, [r3, #0]
   1b0de:	4410      	add	r0, r2
   1b0e0:	3301      	adds	r3, #1
   1b0e2:	7842      	ldrb	r2, [r0, #1]
   1b0e4:	0712      	lsls	r2, r2, #28
   1b0e6:	d510      	bpl.n	1b10a <__ssvfiscanf_r+0x8a>
   1b0e8:	f8db 2004 	ldr.w	r2, [fp, #4]
   1b0ec:	f8cb 3000 	str.w	r3, [fp]
   1b0f0:	3a01      	subs	r2, #1
   1b0f2:	f10a 0a01 	add.w	sl, sl, #1
   1b0f6:	f8cb 2004 	str.w	r2, [fp, #4]
   1b0fa:	2a00      	cmp	r2, #0
   1b0fc:	dcea      	bgt.n	1b0d4 <__ssvfiscanf_r+0x54>
   1b0fe:	4659      	mov	r1, fp
   1b100:	4638      	mov	r0, r7
   1b102:	f7ff ff5f 	bl	1afc4 <__ssrefill_r>
   1b106:	2800      	cmp	r0, #0
   1b108:	d0e4      	beq.n	1b0d4 <__ssvfiscanf_r+0x54>
   1b10a:	4634      	mov	r4, r6
   1b10c:	4626      	mov	r6, r4
   1b10e:	f816 3b01 	ldrb.w	r3, [r6], #1
   1b112:	930b      	str	r3, [sp, #44]	; 0x2c
   1b114:	2b00      	cmp	r3, #0
   1b116:	d1d2      	bne.n	1b0be <__ssvfiscanf_r+0x3e>
   1b118:	9805      	ldr	r0, [sp, #20]
   1b11a:	b059      	add	sp, #356	; 0x164
   1b11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b120:	2b25      	cmp	r3, #37	; 0x25
   1b122:	f040 8084 	bne.w	1b22e <__ssvfiscanf_r+0x1ae>
   1b126:	f894 8001 	ldrb.w	r8, [r4, #1]
   1b12a:	462c      	mov	r4, r5
   1b12c:	1c73      	adds	r3, r6, #1
   1b12e:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
   1b132:	f200 8187 	bhi.w	1b444 <__ssvfiscanf_r+0x3c4>
   1b136:	e8df f018 	tbh	[pc, r8, lsl #1]
   1b13a:	0093      	.short	0x0093
   1b13c:	01850185 	.word	0x01850185
   1b140:	01850185 	.word	0x01850185
   1b144:	01850185 	.word	0x01850185
   1b148:	01850185 	.word	0x01850185
   1b14c:	01850185 	.word	0x01850185
   1b150:	01850185 	.word	0x01850185
   1b154:	01850185 	.word	0x01850185
   1b158:	01850185 	.word	0x01850185
   1b15c:	01850185 	.word	0x01850185
   1b160:	01850185 	.word	0x01850185
   1b164:	01850185 	.word	0x01850185
   1b168:	01850185 	.word	0x01850185
   1b16c:	01850185 	.word	0x01850185
   1b170:	01850185 	.word	0x01850185
   1b174:	01850185 	.word	0x01850185
   1b178:	01850185 	.word	0x01850185
   1b17c:	01850185 	.word	0x01850185
   1b180:	01850185 	.word	0x01850185
   1b184:	01850079 	.word	0x01850079
   1b188:	01850185 	.word	0x01850185
   1b18c:	017f0185 	.word	0x017f0185
   1b190:	01850185 	.word	0x01850185
   1b194:	01850185 	.word	0x01850185
   1b198:	01760185 	.word	0x01760185
   1b19c:	01760176 	.word	0x01760176
   1b1a0:	01760176 	.word	0x01760176
   1b1a4:	01760176 	.word	0x01760176
   1b1a8:	01760176 	.word	0x01760176
   1b1ac:	01850176 	.word	0x01850176
   1b1b0:	01850185 	.word	0x01850185
   1b1b4:	01850185 	.word	0x01850185
   1b1b8:	01850185 	.word	0x01850185
   1b1bc:	01850185 	.word	0x01850185
   1b1c0:	01720185 	.word	0x01720185
   1b1c4:	01850185 	.word	0x01850185
   1b1c8:	01850185 	.word	0x01850185
   1b1cc:	01850185 	.word	0x01850185
   1b1d0:	016c0185 	.word	0x016c0185
   1b1d4:	01850185 	.word	0x01850185
   1b1d8:	01850168 	.word	0x01850168
   1b1dc:	01850185 	.word	0x01850185
   1b1e0:	01850185 	.word	0x01850185
   1b1e4:	01850185 	.word	0x01850185
   1b1e8:	01640185 	.word	0x01640185
   1b1ec:	01850185 	.word	0x01850185
   1b1f0:	0185015b 	.word	0x0185015b
   1b1f4:	01850185 	.word	0x01850185
   1b1f8:	01850185 	.word	0x01850185
   1b1fc:	01850185 	.word	0x01850185
   1b200:	01030115 	.word	0x01030115
   1b204:	01850185 	.word	0x01850185
   1b208:	011a0185 	.word	0x011a0185
   1b20c:	0185009a 	.word	0x0185009a
   1b210:	01510185 	.word	0x01510185
   1b214:	013a0185 	.word	0x013a0185
   1b218:	012a0133 	.word	0x012a0133
   1b21c:	01850185 	.word	0x01850185
   1b220:	01850127 	.word	0x01850127
   1b224:	01850120 	.word	0x01850120
   1b228:	01640185 	.word	0x01640185
   1b22c:	461e      	mov	r6, r3
   1b22e:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b232:	2b00      	cmp	r3, #0
   1b234:	f340 8375 	ble.w	1b922 <__ssvfiscanf_r+0x8a2>
   1b238:	f8db 3000 	ldr.w	r3, [fp]
   1b23c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   1b240:	7819      	ldrb	r1, [r3, #0]
   1b242:	4291      	cmp	r1, r2
   1b244:	f47f af68 	bne.w	1b118 <__ssvfiscanf_r+0x98>
   1b248:	f8db 2004 	ldr.w	r2, [fp, #4]
   1b24c:	3301      	adds	r3, #1
   1b24e:	3a01      	subs	r2, #1
   1b250:	f8cb 3000 	str.w	r3, [fp]
   1b254:	f10a 0a01 	add.w	sl, sl, #1
   1b258:	f8cb 2004 	str.w	r2, [fp, #4]
   1b25c:	4634      	mov	r4, r6
   1b25e:	e755      	b.n	1b10c <__ssvfiscanf_r+0x8c>
   1b260:	f04f 33ff 	mov.w	r3, #4294967295
   1b264:	9305      	str	r3, [sp, #20]
   1b266:	9805      	ldr	r0, [sp, #20]
   1b268:	b059      	add	sp, #356	; 0x164
   1b26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b26e:	9303      	str	r3, [sp, #12]
   1b270:	4ba7      	ldr	r3, [pc, #668]	; (1b510 <__ssvfiscanf_r+0x490>)
   1b272:	9307      	str	r3, [sp, #28]
   1b274:	2300      	movs	r3, #0
   1b276:	9304      	str	r3, [sp, #16]
   1b278:	2603      	movs	r6, #3
   1b27a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b27e:	2b00      	cmp	r3, #0
   1b280:	dd69      	ble.n	1b356 <__ssvfiscanf_r+0x2d6>
   1b282:	0669      	lsls	r1, r5, #25
   1b284:	d533      	bpl.n	1b2ee <__ssvfiscanf_r+0x26e>
   1b286:	2e02      	cmp	r6, #2
   1b288:	f000 81f7 	beq.w	1b67a <__ssvfiscanf_r+0x5fa>
   1b28c:	2e03      	cmp	r6, #3
   1b28e:	f000 8143 	beq.w	1b518 <__ssvfiscanf_r+0x498>
   1b292:	2e01      	cmp	r6, #1
   1b294:	f000 810a 	beq.w	1b4ac <__ssvfiscanf_r+0x42c>
   1b298:	2c00      	cmp	r4, #0
   1b29a:	bf08      	it	eq
   1b29c:	2401      	moveq	r4, #1
   1b29e:	f015 0301 	ands.w	r3, r5, #1
   1b2a2:	f040 8247 	bne.w	1b734 <__ssvfiscanf_r+0x6b4>
   1b2a6:	06ed      	lsls	r5, r5, #27
   1b2a8:	f140 831c 	bpl.w	1b8e4 <__ssvfiscanf_r+0x864>
   1b2ac:	461d      	mov	r5, r3
   1b2ae:	e009      	b.n	1b2c4 <__ssvfiscanf_r+0x244>
   1b2b0:	4413      	add	r3, r2
   1b2b2:	f8cb 3000 	str.w	r3, [fp]
   1b2b6:	4415      	add	r5, r2
   1b2b8:	1aa4      	subs	r4, r4, r2
   1b2ba:	f7ff fe83 	bl	1afc4 <__ssrefill_r>
   1b2be:	2800      	cmp	r0, #0
   1b2c0:	f040 82d6 	bne.w	1b870 <__ssvfiscanf_r+0x7f0>
   1b2c4:	f8db 2004 	ldr.w	r2, [fp, #4]
   1b2c8:	f8db 3000 	ldr.w	r3, [fp]
   1b2cc:	42a2      	cmp	r2, r4
   1b2ce:	4659      	mov	r1, fp
   1b2d0:	4638      	mov	r0, r7
   1b2d2:	dbed      	blt.n	1b2b0 <__ssvfiscanf_r+0x230>
   1b2d4:	1b12      	subs	r2, r2, r4
   1b2d6:	4423      	add	r3, r4
   1b2d8:	f8cb 2004 	str.w	r2, [fp, #4]
   1b2dc:	4425      	add	r5, r4
   1b2de:	f8cb 3000 	str.w	r3, [fp]
   1b2e2:	9e03      	ldr	r6, [sp, #12]
   1b2e4:	44aa      	add	sl, r5
   1b2e6:	4634      	mov	r4, r6
   1b2e8:	e710      	b.n	1b10c <__ssvfiscanf_r+0x8c>
   1b2ea:	f8cb 3000 	str.w	r3, [fp]
   1b2ee:	f000 fd35 	bl	1bd5c <__locale_ctype_ptr>
   1b2f2:	f8db 3000 	ldr.w	r3, [fp]
   1b2f6:	781a      	ldrb	r2, [r3, #0]
   1b2f8:	4410      	add	r0, r2
   1b2fa:	3301      	adds	r3, #1
   1b2fc:	7842      	ldrb	r2, [r0, #1]
   1b2fe:	0712      	lsls	r2, r2, #28
   1b300:	d5c1      	bpl.n	1b286 <__ssvfiscanf_r+0x206>
   1b302:	f8db 2004 	ldr.w	r2, [fp, #4]
   1b306:	3a01      	subs	r2, #1
   1b308:	2a00      	cmp	r2, #0
   1b30a:	f10a 0a01 	add.w	sl, sl, #1
   1b30e:	f8cb 2004 	str.w	r2, [fp, #4]
   1b312:	dcea      	bgt.n	1b2ea <__ssvfiscanf_r+0x26a>
   1b314:	4659      	mov	r1, fp
   1b316:	4638      	mov	r0, r7
   1b318:	f7ff fe54 	bl	1afc4 <__ssrefill_r>
   1b31c:	2800      	cmp	r0, #0
   1b31e:	d0e6      	beq.n	1b2ee <__ssvfiscanf_r+0x26e>
   1b320:	9a05      	ldr	r2, [sp, #20]
   1b322:	2a00      	cmp	r2, #0
   1b324:	d09c      	beq.n	1b260 <__ssvfiscanf_r+0x1e0>
   1b326:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1b32a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b32e:	4613      	mov	r3, r2
   1b330:	bf18      	it	ne
   1b332:	f04f 33ff 	movne.w	r3, #4294967295
   1b336:	9305      	str	r3, [sp, #20]
   1b338:	9805      	ldr	r0, [sp, #20]
   1b33a:	b059      	add	sp, #356	; 0x164
   1b33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b340:	9303      	str	r3, [sp, #12]
   1b342:	4b73      	ldr	r3, [pc, #460]	; (1b510 <__ssvfiscanf_r+0x490>)
   1b344:	9307      	str	r3, [sp, #28]
   1b346:	230a      	movs	r3, #10
   1b348:	9304      	str	r3, [sp, #16]
   1b34a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b34e:	2b00      	cmp	r3, #0
   1b350:	f04f 0603 	mov.w	r6, #3
   1b354:	dc95      	bgt.n	1b282 <__ssvfiscanf_r+0x202>
   1b356:	4659      	mov	r1, fp
   1b358:	4638      	mov	r0, r7
   1b35a:	f7ff fe33 	bl	1afc4 <__ssrefill_r>
   1b35e:	2800      	cmp	r0, #0
   1b360:	d08f      	beq.n	1b282 <__ssvfiscanf_r+0x202>
   1b362:	e7dd      	b.n	1b320 <__ssvfiscanf_r+0x2a0>
   1b364:	9303      	str	r3, [sp, #12]
   1b366:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1b36a:	2600      	movs	r6, #0
   1b36c:	e785      	b.n	1b27a <__ssvfiscanf_r+0x1fa>
   1b36e:	f896 8001 	ldrb.w	r8, [r6, #1]
   1b372:	f045 0504 	orr.w	r5, r5, #4
   1b376:	461e      	mov	r6, r3
   1b378:	e6d8      	b.n	1b12c <__ssvfiscanf_r+0xac>
   1b37a:	9303      	str	r3, [sp, #12]
   1b37c:	4b65      	ldr	r3, [pc, #404]	; (1b514 <__ssvfiscanf_r+0x494>)
   1b37e:	9307      	str	r3, [sp, #28]
   1b380:	230a      	movs	r3, #10
   1b382:	9304      	str	r3, [sp, #16]
   1b384:	2603      	movs	r6, #3
   1b386:	e778      	b.n	1b27a <__ssvfiscanf_r+0x1fa>
   1b388:	9303      	str	r3, [sp, #12]
   1b38a:	2602      	movs	r6, #2
   1b38c:	e775      	b.n	1b27a <__ssvfiscanf_r+0x1fa>
   1b38e:	9303      	str	r3, [sp, #12]
   1b390:	f445 7508 	orr.w	r5, r5, #544	; 0x220
   1b394:	4b5f      	ldr	r3, [pc, #380]	; (1b514 <__ssvfiscanf_r+0x494>)
   1b396:	9307      	str	r3, [sp, #28]
   1b398:	2310      	movs	r3, #16
   1b39a:	9304      	str	r3, [sp, #16]
   1b39c:	2603      	movs	r6, #3
   1b39e:	e76c      	b.n	1b27a <__ssvfiscanf_r+0x1fa>
   1b3a0:	9303      	str	r3, [sp, #12]
   1b3a2:	4b5c      	ldr	r3, [pc, #368]	; (1b514 <__ssvfiscanf_r+0x494>)
   1b3a4:	9307      	str	r3, [sp, #28]
   1b3a6:	2308      	movs	r3, #8
   1b3a8:	9304      	str	r3, [sp, #16]
   1b3aa:	2603      	movs	r6, #3
   1b3ac:	e765      	b.n	1b27a <__ssvfiscanf_r+0x1fa>
   1b3ae:	9303      	str	r3, [sp, #12]
   1b3b0:	06eb      	lsls	r3, r5, #27
   1b3b2:	d478      	bmi.n	1b4a6 <__ssvfiscanf_r+0x426>
   1b3b4:	076e      	lsls	r6, r5, #29
   1b3b6:	f100 82d4 	bmi.w	1b962 <__ssvfiscanf_r+0x8e2>
   1b3ba:	07ec      	lsls	r4, r5, #31
   1b3bc:	f100 82c0 	bmi.w	1b940 <__ssvfiscanf_r+0x8c0>
   1b3c0:	07a8      	lsls	r0, r5, #30
   1b3c2:	f140 82bd 	bpl.w	1b940 <__ssvfiscanf_r+0x8c0>
   1b3c6:	9a06      	ldr	r2, [sp, #24]
   1b3c8:	9e03      	ldr	r6, [sp, #12]
   1b3ca:	6813      	ldr	r3, [r2, #0]
   1b3cc:	4650      	mov	r0, sl
   1b3ce:	17c1      	asrs	r1, r0, #31
   1b3d0:	3204      	adds	r2, #4
   1b3d2:	9206      	str	r2, [sp, #24]
   1b3d4:	e9c3 0100 	strd	r0, r1, [r3]
   1b3d8:	4634      	mov	r4, r6
   1b3da:	e697      	b.n	1b10c <__ssvfiscanf_r+0x8c>
   1b3dc:	f896 8001 	ldrb.w	r8, [r6, #1]
   1b3e0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1b3e4:	f000 82a5 	beq.w	1b932 <__ssvfiscanf_r+0x8b2>
   1b3e8:	f045 0501 	orr.w	r5, r5, #1
   1b3ec:	461e      	mov	r6, r3
   1b3ee:	e69d      	b.n	1b12c <__ssvfiscanf_r+0xac>
   1b3f0:	4619      	mov	r1, r3
   1b3f2:	a818      	add	r0, sp, #96	; 0x60
   1b3f4:	f000 ff0e 	bl	1c214 <__sccl>
   1b3f8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1b3fc:	9003      	str	r0, [sp, #12]
   1b3fe:	2601      	movs	r6, #1
   1b400:	e73b      	b.n	1b27a <__ssvfiscanf_r+0x1fa>
   1b402:	9303      	str	r3, [sp, #12]
   1b404:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   1b408:	e7c4      	b.n	1b394 <__ssvfiscanf_r+0x314>
   1b40a:	9303      	str	r3, [sp, #12]
   1b40c:	f045 0501 	orr.w	r5, r5, #1
   1b410:	e7c7      	b.n	1b3a2 <__ssvfiscanf_r+0x322>
   1b412:	f896 8001 	ldrb.w	r8, [r6, #1]
   1b416:	f045 0502 	orr.w	r5, r5, #2
   1b41a:	461e      	mov	r6, r3
   1b41c:	e686      	b.n	1b12c <__ssvfiscanf_r+0xac>
   1b41e:	9303      	str	r3, [sp, #12]
   1b420:	f045 0501 	orr.w	r5, r5, #1
   1b424:	e78d      	b.n	1b342 <__ssvfiscanf_r+0x2c2>
   1b426:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1b42a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
   1b42e:	3c30      	subs	r4, #48	; 0x30
   1b430:	f896 8001 	ldrb.w	r8, [r6, #1]
   1b434:	461e      	mov	r6, r3
   1b436:	e679      	b.n	1b12c <__ssvfiscanf_r+0xac>
   1b438:	f896 8001 	ldrb.w	r8, [r6, #1]
   1b43c:	f045 0510 	orr.w	r5, r5, #16
   1b440:	461e      	mov	r6, r3
   1b442:	e673      	b.n	1b12c <__ssvfiscanf_r+0xac>
   1b444:	9303      	str	r3, [sp, #12]
   1b446:	f000 fc89 	bl	1bd5c <__locale_ctype_ptr>
   1b44a:	4440      	add	r0, r8
   1b44c:	7843      	ldrb	r3, [r0, #1]
   1b44e:	f003 0303 	and.w	r3, r3, #3
   1b452:	2b01      	cmp	r3, #1
   1b454:	f47f af75 	bne.w	1b342 <__ssvfiscanf_r+0x2c2>
   1b458:	f045 0501 	orr.w	r5, r5, #1
   1b45c:	e771      	b.n	1b342 <__ssvfiscanf_r+0x2c2>
   1b45e:	ab0c      	add	r3, sp, #48	; 0x30
   1b460:	4618      	mov	r0, r3
   1b462:	2208      	movs	r2, #8
   1b464:	2100      	movs	r1, #0
   1b466:	9308      	str	r3, [sp, #32]
   1b468:	f7fd fc10 	bl	18c8c <memset>
   1b46c:	f015 0310 	ands.w	r3, r5, #16
   1b470:	9309      	str	r3, [sp, #36]	; 0x24
   1b472:	f000 81e1 	beq.w	1b838 <__ssvfiscanf_r+0x7b8>
   1b476:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   1b47a:	2600      	movs	r6, #0
   1b47c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1b480:	f000 fc6c 	bl	1bd5c <__locale_ctype_ptr>
   1b484:	f8db 3000 	ldr.w	r3, [fp]
   1b488:	781b      	ldrb	r3, [r3, #0]
   1b48a:	4403      	add	r3, r0
   1b48c:	785b      	ldrb	r3, [r3, #1]
   1b48e:	071a      	lsls	r2, r3, #28
   1b490:	d402      	bmi.n	1b498 <__ssvfiscanf_r+0x418>
   1b492:	2c00      	cmp	r4, #0
   1b494:	f040 8270 	bne.w	1b978 <__ssvfiscanf_r+0x8f8>
   1b498:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b49a:	b923      	cbnz	r3, 1b4a6 <__ssvfiscanf_r+0x426>
   1b49c:	f8c9 3000 	str.w	r3, [r9]
   1b4a0:	9b05      	ldr	r3, [sp, #20]
   1b4a2:	3301      	adds	r3, #1
   1b4a4:	9305      	str	r3, [sp, #20]
   1b4a6:	9e03      	ldr	r6, [sp, #12]
   1b4a8:	4634      	mov	r4, r6
   1b4aa:	e62f      	b.n	1b10c <__ssvfiscanf_r+0x8c>
   1b4ac:	2c00      	cmp	r4, #0
   1b4ae:	bf08      	it	eq
   1b4b0:	f04f 34ff 	moveq.w	r4, #4294967295
   1b4b4:	06e8      	lsls	r0, r5, #27
   1b4b6:	f140 810b 	bpl.w	1b6d0 <__ssvfiscanf_r+0x650>
   1b4ba:	f8db 2000 	ldr.w	r2, [fp]
   1b4be:	2500      	movs	r5, #0
   1b4c0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1b4c4:	7813      	ldrb	r3, [r2, #0]
   1b4c6:	f818 3003 	ldrb.w	r3, [r8, r3]
   1b4ca:	3201      	adds	r2, #1
   1b4cc:	b1db      	cbz	r3, 1b506 <__ssvfiscanf_r+0x486>
   1b4ce:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b4d2:	f8cb 2000 	str.w	r2, [fp]
   1b4d6:	3501      	adds	r5, #1
   1b4d8:	3b01      	subs	r3, #1
   1b4da:	42ac      	cmp	r4, r5
   1b4dc:	f8cb 3004 	str.w	r3, [fp, #4]
   1b4e0:	f43f aeff 	beq.w	1b2e2 <__ssvfiscanf_r+0x262>
   1b4e4:	2b00      	cmp	r3, #0
   1b4e6:	dced      	bgt.n	1b4c4 <__ssvfiscanf_r+0x444>
   1b4e8:	4659      	mov	r1, fp
   1b4ea:	4638      	mov	r0, r7
   1b4ec:	f7ff fd6a 	bl	1afc4 <__ssrefill_r>
   1b4f0:	2800      	cmp	r0, #0
   1b4f2:	f47f aef6 	bne.w	1b2e2 <__ssvfiscanf_r+0x262>
   1b4f6:	f8db 2000 	ldr.w	r2, [fp]
   1b4fa:	7813      	ldrb	r3, [r2, #0]
   1b4fc:	f818 3003 	ldrb.w	r3, [r8, r3]
   1b500:	3201      	adds	r2, #1
   1b502:	2b00      	cmp	r3, #0
   1b504:	d1e3      	bne.n	1b4ce <__ssvfiscanf_r+0x44e>
   1b506:	2d00      	cmp	r5, #0
   1b508:	f47f aeeb 	bne.w	1b2e2 <__ssvfiscanf_r+0x262>
   1b50c:	e604      	b.n	1b118 <__ssvfiscanf_r+0x98>
   1b50e:	bf00      	nop
   1b510:	0001c3b1 	.word	0x0001c3b1
   1b514:	0001a3a5 	.word	0x0001a3a5
   1b518:	1e63      	subs	r3, r4, #1
   1b51a:	2b26      	cmp	r3, #38	; 0x26
   1b51c:	bf8c      	ite	hi
   1b51e:	f1a4 0227 	subhi.w	r2, r4, #39	; 0x27
   1b522:	2200      	movls	r2, #0
   1b524:	f04f 0900 	mov.w	r9, #0
   1b528:	4611      	mov	r1, r2
   1b52a:	ae0e      	add	r6, sp, #56	; 0x38
   1b52c:	464b      	mov	r3, r9
   1b52e:	46b9      	mov	r9, r7
   1b530:	9f04      	ldr	r7, [sp, #16]
   1b532:	4652      	mov	r2, sl
   1b534:	bf88      	it	hi
   1b536:	2427      	movhi	r4, #39	; 0x27
   1b538:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
   1b53c:	46b0      	mov	r8, r6
   1b53e:	468a      	mov	sl, r1
   1b540:	f8db 0000 	ldr.w	r0, [fp]
   1b544:	f890 e000 	ldrb.w	lr, [r0]
   1b548:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
   1b54c:	294d      	cmp	r1, #77	; 0x4d
   1b54e:	d842      	bhi.n	1b5d6 <__ssvfiscanf_r+0x556>
   1b550:	e8df f001 	tbb	[pc, r1]
   1b554:	418e418e 	.word	0x418e418e
   1b558:	5d5d6341 	.word	0x5d5d6341
   1b55c:	5d5d5d5d 	.word	0x5d5d5d5d
   1b560:	4188885d 	.word	0x4188885d
   1b564:	41414141 	.word	0x41414141
   1b568:	58584141 	.word	0x58584141
   1b56c:	58585858 	.word	0x58585858
   1b570:	41414141 	.word	0x41414141
   1b574:	41414141 	.word	0x41414141
   1b578:	41414141 	.word	0x41414141
   1b57c:	41414141 	.word	0x41414141
   1b580:	41412741 	.word	0x41412741
   1b584:	41414141 	.word	0x41414141
   1b588:	58584141 	.word	0x58584141
   1b58c:	58585858 	.word	0x58585858
   1b590:	41414141 	.word	0x41414141
   1b594:	41414141 	.word	0x41414141
   1b598:	41414141 	.word	0x41414141
   1b59c:	41414141 	.word	0x41414141
   1b5a0:	2741      	.short	0x2741
   1b5a2:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
   1b5a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1b5aa:	d114      	bne.n	1b5d6 <__ssvfiscanf_r+0x556>
   1b5ac:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   1b5b0:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
   1b5b4:	2710      	movs	r7, #16
   1b5b6:	f8db 1004 	ldr.w	r1, [fp, #4]
   1b5ba:	f888 e000 	strb.w	lr, [r8]
   1b5be:	3901      	subs	r1, #1
   1b5c0:	2900      	cmp	r1, #0
   1b5c2:	f108 0801 	add.w	r8, r8, #1
   1b5c6:	f8cb 1004 	str.w	r1, [fp, #4]
   1b5ca:	dd40      	ble.n	1b64e <__ssvfiscanf_r+0x5ce>
   1b5cc:	3001      	adds	r0, #1
   1b5ce:	f8cb 0000 	str.w	r0, [fp]
   1b5d2:	3c01      	subs	r4, #1
   1b5d4:	d1b4      	bne.n	1b540 <__ssvfiscanf_r+0x4c0>
   1b5d6:	05e8      	lsls	r0, r5, #23
   1b5d8:	9704      	str	r7, [sp, #16]
   1b5da:	4692      	mov	sl, r2
   1b5dc:	464f      	mov	r7, r9
   1b5de:	4699      	mov	r9, r3
   1b5e0:	d505      	bpl.n	1b5ee <__ssvfiscanf_r+0x56e>
   1b5e2:	45b0      	cmp	r8, r6
   1b5e4:	f200 8194 	bhi.w	1b910 <__ssvfiscanf_r+0x890>
   1b5e8:	45b0      	cmp	r8, r6
   1b5ea:	f43f ad95 	beq.w	1b118 <__ssvfiscanf_r+0x98>
   1b5ee:	f015 0410 	ands.w	r4, r5, #16
   1b5f2:	f000 80e5 	beq.w	1b7c0 <__ssvfiscanf_r+0x740>
   1b5f6:	eba8 0606 	sub.w	r6, r8, r6
   1b5fa:	44b1      	add	r9, r6
   1b5fc:	9e03      	ldr	r6, [sp, #12]
   1b5fe:	44ca      	add	sl, r9
   1b600:	4634      	mov	r4, r6
   1b602:	e583      	b.n	1b10c <__ssvfiscanf_r+0x8c>
   1b604:	2f0a      	cmp	r7, #10
   1b606:	dde6      	ble.n	1b5d6 <__ssvfiscanf_r+0x556>
   1b608:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1b60c:	e7d3      	b.n	1b5b6 <__ssvfiscanf_r+0x536>
   1b60e:	49b3      	ldr	r1, [pc, #716]	; (1b8dc <__ssvfiscanf_r+0x85c>)
   1b610:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1b614:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1b618:	e7cd      	b.n	1b5b6 <__ssvfiscanf_r+0x536>
   1b61a:	0529      	lsls	r1, r5, #20
   1b61c:	d5cb      	bpl.n	1b5b6 <__ssvfiscanf_r+0x536>
   1b61e:	b917      	cbnz	r7, 1b626 <__ssvfiscanf_r+0x5a6>
   1b620:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   1b624:	2708      	movs	r7, #8
   1b626:	0569      	lsls	r1, r5, #21
   1b628:	f100 80fa 	bmi.w	1b820 <__ssvfiscanf_r+0x7a0>
   1b62c:	f425 7560 	bic.w	r5, r5, #896	; 0x380
   1b630:	f1ba 0f00 	cmp.w	sl, #0
   1b634:	d002      	beq.n	1b63c <__ssvfiscanf_r+0x5bc>
   1b636:	f10a 3aff 	add.w	sl, sl, #4294967295
   1b63a:	3401      	adds	r4, #1
   1b63c:	f8db 1004 	ldr.w	r1, [fp, #4]
   1b640:	3901      	subs	r1, #1
   1b642:	2900      	cmp	r1, #0
   1b644:	f103 0301 	add.w	r3, r3, #1
   1b648:	f8cb 1004 	str.w	r1, [fp, #4]
   1b64c:	dcbe      	bgt.n	1b5cc <__ssvfiscanf_r+0x54c>
   1b64e:	4659      	mov	r1, fp
   1b650:	4648      	mov	r0, r9
   1b652:	9308      	str	r3, [sp, #32]
   1b654:	9204      	str	r2, [sp, #16]
   1b656:	f7ff fcb5 	bl	1afc4 <__ssrefill_r>
   1b65a:	9a04      	ldr	r2, [sp, #16]
   1b65c:	9b08      	ldr	r3, [sp, #32]
   1b65e:	2800      	cmp	r0, #0
   1b660:	d0b7      	beq.n	1b5d2 <__ssvfiscanf_r+0x552>
   1b662:	e7b8      	b.n	1b5d6 <__ssvfiscanf_r+0x556>
   1b664:	499d      	ldr	r1, [pc, #628]	; (1b8dc <__ssvfiscanf_r+0x85c>)
   1b666:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1b66a:	2f08      	cmp	r7, #8
   1b66c:	dccc      	bgt.n	1b608 <__ssvfiscanf_r+0x588>
   1b66e:	e7b2      	b.n	1b5d6 <__ssvfiscanf_r+0x556>
   1b670:	0629      	lsls	r1, r5, #24
   1b672:	d5b0      	bpl.n	1b5d6 <__ssvfiscanf_r+0x556>
   1b674:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   1b678:	e79d      	b.n	1b5b6 <__ssvfiscanf_r+0x536>
   1b67a:	2c00      	cmp	r4, #0
   1b67c:	bf08      	it	eq
   1b67e:	f04f 34ff 	moveq.w	r4, #4294967295
   1b682:	f015 0601 	ands.w	r6, r5, #1
   1b686:	f47f aeea 	bne.w	1b45e <__ssvfiscanf_r+0x3de>
   1b68a:	06eb      	lsls	r3, r5, #27
   1b68c:	f140 80f4 	bpl.w	1b878 <__ssvfiscanf_r+0x7f8>
   1b690:	f000 fb64 	bl	1bd5c <__locale_ctype_ptr>
   1b694:	f8db 3000 	ldr.w	r3, [fp]
   1b698:	781a      	ldrb	r2, [r3, #0]
   1b69a:	4410      	add	r0, r2
   1b69c:	3301      	adds	r3, #1
   1b69e:	7842      	ldrb	r2, [r0, #1]
   1b6a0:	0715      	lsls	r5, r2, #28
   1b6a2:	d411      	bmi.n	1b6c8 <__ssvfiscanf_r+0x648>
   1b6a4:	f8db 2004 	ldr.w	r2, [fp, #4]
   1b6a8:	f8cb 3000 	str.w	r3, [fp]
   1b6ac:	3601      	adds	r6, #1
   1b6ae:	3a01      	subs	r2, #1
   1b6b0:	42b4      	cmp	r4, r6
   1b6b2:	f8cb 2004 	str.w	r2, [fp, #4]
   1b6b6:	d007      	beq.n	1b6c8 <__ssvfiscanf_r+0x648>
   1b6b8:	2a00      	cmp	r2, #0
   1b6ba:	dce9      	bgt.n	1b690 <__ssvfiscanf_r+0x610>
   1b6bc:	4659      	mov	r1, fp
   1b6be:	4638      	mov	r0, r7
   1b6c0:	f7ff fc80 	bl	1afc4 <__ssrefill_r>
   1b6c4:	2800      	cmp	r0, #0
   1b6c6:	d0e3      	beq.n	1b690 <__ssvfiscanf_r+0x610>
   1b6c8:	44b2      	add	sl, r6
   1b6ca:	9e03      	ldr	r6, [sp, #12]
   1b6cc:	4634      	mov	r4, r6
   1b6ce:	e51d      	b.n	1b10c <__ssvfiscanf_r+0x8c>
   1b6d0:	9a06      	ldr	r2, [sp, #24]
   1b6d2:	6815      	ldr	r5, [r2, #0]
   1b6d4:	1d16      	adds	r6, r2, #4
   1b6d6:	46a9      	mov	r9, r5
   1b6d8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1b6dc:	f8db 3000 	ldr.w	r3, [fp]
   1b6e0:	781a      	ldrb	r2, [r3, #0]
   1b6e2:	f818 2002 	ldrb.w	r2, [r8, r2]
   1b6e6:	1c59      	adds	r1, r3, #1
   1b6e8:	b1c2      	cbz	r2, 1b71c <__ssvfiscanf_r+0x69c>
   1b6ea:	f8db 2004 	ldr.w	r2, [fp, #4]
   1b6ee:	f8cb 1000 	str.w	r1, [fp]
   1b6f2:	3a01      	subs	r2, #1
   1b6f4:	f8cb 2004 	str.w	r2, [fp, #4]
   1b6f8:	781b      	ldrb	r3, [r3, #0]
   1b6fa:	f809 3b01 	strb.w	r3, [r9], #1
   1b6fe:	3c01      	subs	r4, #1
   1b700:	d00c      	beq.n	1b71c <__ssvfiscanf_r+0x69c>
   1b702:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b706:	2b00      	cmp	r3, #0
   1b708:	dce8      	bgt.n	1b6dc <__ssvfiscanf_r+0x65c>
   1b70a:	4659      	mov	r1, fp
   1b70c:	4638      	mov	r0, r7
   1b70e:	f7ff fc59 	bl	1afc4 <__ssrefill_r>
   1b712:	2800      	cmp	r0, #0
   1b714:	d0e2      	beq.n	1b6dc <__ssvfiscanf_r+0x65c>
   1b716:	454d      	cmp	r5, r9
   1b718:	f43f ae02 	beq.w	1b320 <__ssvfiscanf_r+0x2a0>
   1b71c:	ebb9 0505 	subs.w	r5, r9, r5
   1b720:	f43f acfa 	beq.w	1b118 <__ssvfiscanf_r+0x98>
   1b724:	9a05      	ldr	r2, [sp, #20]
   1b726:	9606      	str	r6, [sp, #24]
   1b728:	2300      	movs	r3, #0
   1b72a:	3201      	adds	r2, #1
   1b72c:	9205      	str	r2, [sp, #20]
   1b72e:	f889 3000 	strb.w	r3, [r9]
   1b732:	e5d6      	b.n	1b2e2 <__ssvfiscanf_r+0x262>
   1b734:	ab0c      	add	r3, sp, #48	; 0x30
   1b736:	4618      	mov	r0, r3
   1b738:	2208      	movs	r2, #8
   1b73a:	2100      	movs	r1, #0
   1b73c:	9308      	str	r3, [sp, #32]
   1b73e:	f7fd faa5 	bl	18c8c <memset>
   1b742:	f015 0310 	ands.w	r3, r5, #16
   1b746:	9309      	str	r3, [sp, #36]	; 0x24
   1b748:	d06d      	beq.n	1b826 <__ssvfiscanf_r+0x7a6>
   1b74a:	f04f 0900 	mov.w	r9, #0
   1b74e:	2c00      	cmp	r4, #0
   1b750:	f43f aea9 	beq.w	1b4a6 <__ssvfiscanf_r+0x426>
   1b754:	2500      	movs	r5, #0
   1b756:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1b75a:	f000 faed 	bl	1bd38 <__locale_mb_cur_max>
   1b75e:	4285      	cmp	r5, r0
   1b760:	f43f adde 	beq.w	1b320 <__ssvfiscanf_r+0x2a0>
   1b764:	e89b 000c 	ldmia.w	fp, {r2, r3}
   1b768:	f812 0b01 	ldrb.w	r0, [r2], #1
   1b76c:	f8cb 2000 	str.w	r2, [fp]
   1b770:	3b01      	subs	r3, #1
   1b772:	9a08      	ldr	r2, [sp, #32]
   1b774:	9200      	str	r2, [sp, #0]
   1b776:	1c6e      	adds	r6, r5, #1
   1b778:	f8cb 3004 	str.w	r3, [fp, #4]
   1b77c:	f808 0005 	strb.w	r0, [r8, r5]
   1b780:	4633      	mov	r3, r6
   1b782:	4642      	mov	r2, r8
   1b784:	4649      	mov	r1, r9
   1b786:	4638      	mov	r0, r7
   1b788:	f000 faf6 	bl	1bd78 <_mbrtowc_r>
   1b78c:	1c43      	adds	r3, r0, #1
   1b78e:	f43f adc7 	beq.w	1b320 <__ssvfiscanf_r+0x2a0>
   1b792:	2800      	cmp	r0, #0
   1b794:	d15d      	bne.n	1b852 <__ssvfiscanf_r+0x7d2>
   1b796:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b798:	2b00      	cmp	r3, #0
   1b79a:	d15e      	bne.n	1b85a <__ssvfiscanf_r+0x7da>
   1b79c:	f8c9 3000 	str.w	r3, [r9]
   1b7a0:	44b2      	add	sl, r6
   1b7a2:	3c01      	subs	r4, #1
   1b7a4:	f109 0904 	add.w	r9, r9, #4
   1b7a8:	2500      	movs	r5, #0
   1b7aa:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b7ae:	2b00      	cmp	r3, #0
   1b7b0:	dd2d      	ble.n	1b80e <__ssvfiscanf_r+0x78e>
   1b7b2:	2c00      	cmp	r4, #0
   1b7b4:	d1d1      	bne.n	1b75a <__ssvfiscanf_r+0x6da>
   1b7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b7b8:	2b00      	cmp	r3, #0
   1b7ba:	f43f ae71 	beq.w	1b4a0 <__ssvfiscanf_r+0x420>
   1b7be:	e672      	b.n	1b4a6 <__ssvfiscanf_r+0x426>
   1b7c0:	4622      	mov	r2, r4
   1b7c2:	4631      	mov	r1, r6
   1b7c4:	f888 4000 	strb.w	r4, [r8]
   1b7c8:	9b04      	ldr	r3, [sp, #16]
   1b7ca:	9c07      	ldr	r4, [sp, #28]
   1b7cc:	4638      	mov	r0, r7
   1b7ce:	47a0      	blx	r4
   1b7d0:	06a9      	lsls	r1, r5, #26
   1b7d2:	d438      	bmi.n	1b846 <__ssvfiscanf_r+0x7c6>
   1b7d4:	076a      	lsls	r2, r5, #29
   1b7d6:	f100 80be 	bmi.w	1b956 <__ssvfiscanf_r+0x8d6>
   1b7da:	f015 0201 	ands.w	r2, r5, #1
   1b7de:	d132      	bne.n	1b846 <__ssvfiscanf_r+0x7c6>
   1b7e0:	07ab      	lsls	r3, r5, #30
   1b7e2:	d530      	bpl.n	1b846 <__ssvfiscanf_r+0x7c6>
   1b7e4:	9b07      	ldr	r3, [sp, #28]
   1b7e6:	4619      	mov	r1, r3
   1b7e8:	4b3d      	ldr	r3, [pc, #244]	; (1b8e0 <__ssvfiscanf_r+0x860>)
   1b7ea:	4299      	cmp	r1, r3
   1b7ec:	4638      	mov	r0, r7
   1b7ee:	9b04      	ldr	r3, [sp, #16]
   1b7f0:	4631      	mov	r1, r6
   1b7f2:	f000 8105 	beq.w	1ba00 <__ssvfiscanf_r+0x980>
   1b7f6:	f000 febb 	bl	1c570 <_strtoll_r>
   1b7fa:	9a06      	ldr	r2, [sp, #24]
   1b7fc:	6813      	ldr	r3, [r2, #0]
   1b7fe:	e9c3 0100 	strd	r0, r1, [r3]
   1b802:	3204      	adds	r2, #4
   1b804:	9206      	str	r2, [sp, #24]
   1b806:	9b05      	ldr	r3, [sp, #20]
   1b808:	3301      	adds	r3, #1
   1b80a:	9305      	str	r3, [sp, #20]
   1b80c:	e6f3      	b.n	1b5f6 <__ssvfiscanf_r+0x576>
   1b80e:	4659      	mov	r1, fp
   1b810:	4638      	mov	r0, r7
   1b812:	f7ff fbd7 	bl	1afc4 <__ssrefill_r>
   1b816:	2800      	cmp	r0, #0
   1b818:	d0cb      	beq.n	1b7b2 <__ssvfiscanf_r+0x732>
   1b81a:	2d00      	cmp	r5, #0
   1b81c:	d0cb      	beq.n	1b7b6 <__ssvfiscanf_r+0x736>
   1b81e:	e57f      	b.n	1b320 <__ssvfiscanf_r+0x2a0>
   1b820:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
   1b824:	e6c7      	b.n	1b5b6 <__ssvfiscanf_r+0x536>
   1b826:	9a06      	ldr	r2, [sp, #24]
   1b828:	4613      	mov	r3, r2
   1b82a:	3304      	adds	r3, #4
   1b82c:	f8d2 9000 	ldr.w	r9, [r2]
   1b830:	9306      	str	r3, [sp, #24]
   1b832:	2c00      	cmp	r4, #0
   1b834:	d18e      	bne.n	1b754 <__ssvfiscanf_r+0x6d4>
   1b836:	e633      	b.n	1b4a0 <__ssvfiscanf_r+0x420>
   1b838:	9a06      	ldr	r2, [sp, #24]
   1b83a:	4613      	mov	r3, r2
   1b83c:	3304      	adds	r3, #4
   1b83e:	f8d2 9000 	ldr.w	r9, [r2]
   1b842:	9306      	str	r3, [sp, #24]
   1b844:	e619      	b.n	1b47a <__ssvfiscanf_r+0x3fa>
   1b846:	9a06      	ldr	r2, [sp, #24]
   1b848:	6813      	ldr	r3, [r2, #0]
   1b84a:	3204      	adds	r2, #4
   1b84c:	9206      	str	r2, [sp, #24]
   1b84e:	6018      	str	r0, [r3, #0]
   1b850:	e7d9      	b.n	1b806 <__ssvfiscanf_r+0x786>
   1b852:	3002      	adds	r0, #2
   1b854:	d105      	bne.n	1b862 <__ssvfiscanf_r+0x7e2>
   1b856:	4635      	mov	r5, r6
   1b858:	e7a7      	b.n	1b7aa <__ssvfiscanf_r+0x72a>
   1b85a:	44b2      	add	sl, r6
   1b85c:	3c01      	subs	r4, #1
   1b85e:	4605      	mov	r5, r0
   1b860:	e7a3      	b.n	1b7aa <__ssvfiscanf_r+0x72a>
   1b862:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b864:	44b2      	add	sl, r6
   1b866:	3c01      	subs	r4, #1
   1b868:	2b00      	cmp	r3, #0
   1b86a:	d09b      	beq.n	1b7a4 <__ssvfiscanf_r+0x724>
   1b86c:	2500      	movs	r5, #0
   1b86e:	e79c      	b.n	1b7aa <__ssvfiscanf_r+0x72a>
   1b870:	2d00      	cmp	r5, #0
   1b872:	f47f ad36 	bne.w	1b2e2 <__ssvfiscanf_r+0x262>
   1b876:	e553      	b.n	1b320 <__ssvfiscanf_r+0x2a0>
   1b878:	9a06      	ldr	r2, [sp, #24]
   1b87a:	6816      	ldr	r6, [r2, #0]
   1b87c:	f102 0804 	add.w	r8, r2, #4
   1b880:	4635      	mov	r5, r6
   1b882:	f000 fa6b 	bl	1bd5c <__locale_ctype_ptr>
   1b886:	f8db 2000 	ldr.w	r2, [fp]
   1b88a:	7813      	ldrb	r3, [r2, #0]
   1b88c:	4418      	add	r0, r3
   1b88e:	1c51      	adds	r1, r2, #1
   1b890:	7843      	ldrb	r3, [r0, #1]
   1b892:	0718      	lsls	r0, r3, #28
   1b894:	d415      	bmi.n	1b8c2 <__ssvfiscanf_r+0x842>
   1b896:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b89a:	f8cb 1000 	str.w	r1, [fp]
   1b89e:	3b01      	subs	r3, #1
   1b8a0:	f8cb 3004 	str.w	r3, [fp, #4]
   1b8a4:	7813      	ldrb	r3, [r2, #0]
   1b8a6:	f805 3b01 	strb.w	r3, [r5], #1
   1b8aa:	3c01      	subs	r4, #1
   1b8ac:	d009      	beq.n	1b8c2 <__ssvfiscanf_r+0x842>
   1b8ae:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b8b2:	2b00      	cmp	r3, #0
   1b8b4:	dce5      	bgt.n	1b882 <__ssvfiscanf_r+0x802>
   1b8b6:	4659      	mov	r1, fp
   1b8b8:	4638      	mov	r0, r7
   1b8ba:	f7ff fb83 	bl	1afc4 <__ssrefill_r>
   1b8be:	2800      	cmp	r0, #0
   1b8c0:	d0df      	beq.n	1b882 <__ssvfiscanf_r+0x802>
   1b8c2:	1bae      	subs	r6, r5, r6
   1b8c4:	9a05      	ldr	r2, [sp, #20]
   1b8c6:	f8cd 8018 	str.w	r8, [sp, #24]
   1b8ca:	44b2      	add	sl, r6
   1b8cc:	9e03      	ldr	r6, [sp, #12]
   1b8ce:	2300      	movs	r3, #0
   1b8d0:	3201      	adds	r2, #1
   1b8d2:	9205      	str	r2, [sp, #20]
   1b8d4:	702b      	strb	r3, [r5, #0]
   1b8d6:	4634      	mov	r4, r6
   1b8d8:	e418      	b.n	1b10c <__ssvfiscanf_r+0x8c>
   1b8da:	bf00      	nop
   1b8dc:	0001e704 	.word	0x0001e704
   1b8e0:	0001a3a5 	.word	0x0001a3a5
   1b8e4:	9d06      	ldr	r5, [sp, #24]
   1b8e6:	4623      	mov	r3, r4
   1b8e8:	6829      	ldr	r1, [r5, #0]
   1b8ea:	f8cd b000 	str.w	fp, [sp]
   1b8ee:	2201      	movs	r2, #1
   1b8f0:	4638      	mov	r0, r7
   1b8f2:	f7ff fb85 	bl	1b000 <_sfread_r>
   1b8f6:	1d2e      	adds	r6, r5, #4
   1b8f8:	2800      	cmp	r0, #0
   1b8fa:	f43f ad11 	beq.w	1b320 <__ssvfiscanf_r+0x2a0>
   1b8fe:	9b05      	ldr	r3, [sp, #20]
   1b900:	9606      	str	r6, [sp, #24]
   1b902:	9e03      	ldr	r6, [sp, #12]
   1b904:	3301      	adds	r3, #1
   1b906:	4482      	add	sl, r0
   1b908:	9305      	str	r3, [sp, #20]
   1b90a:	4634      	mov	r4, r6
   1b90c:	f7ff bbfe 	b.w	1b10c <__ssvfiscanf_r+0x8c>
   1b910:	f818 1c01 	ldrb.w	r1, [r8, #-1]
   1b914:	465a      	mov	r2, fp
   1b916:	4638      	mov	r0, r7
   1b918:	f7ff fb14 	bl	1af44 <_sungetc_r>
   1b91c:	f108 38ff 	add.w	r8, r8, #4294967295
   1b920:	e662      	b.n	1b5e8 <__ssvfiscanf_r+0x568>
   1b922:	4659      	mov	r1, fp
   1b924:	4638      	mov	r0, r7
   1b926:	f7ff fb4d 	bl	1afc4 <__ssrefill_r>
   1b92a:	2800      	cmp	r0, #0
   1b92c:	f43f ac84 	beq.w	1b238 <__ssvfiscanf_r+0x1b8>
   1b930:	e4f6      	b.n	1b320 <__ssvfiscanf_r+0x2a0>
   1b932:	f896 8002 	ldrb.w	r8, [r6, #2]
   1b936:	f045 0502 	orr.w	r5, r5, #2
   1b93a:	3602      	adds	r6, #2
   1b93c:	f7ff bbf6 	b.w	1b12c <__ssvfiscanf_r+0xac>
   1b940:	9a06      	ldr	r2, [sp, #24]
   1b942:	9e03      	ldr	r6, [sp, #12]
   1b944:	6813      	ldr	r3, [r2, #0]
   1b946:	f8c3 a000 	str.w	sl, [r3]
   1b94a:	4613      	mov	r3, r2
   1b94c:	3304      	adds	r3, #4
   1b94e:	9306      	str	r3, [sp, #24]
   1b950:	4634      	mov	r4, r6
   1b952:	f7ff bbdb 	b.w	1b10c <__ssvfiscanf_r+0x8c>
   1b956:	9a06      	ldr	r2, [sp, #24]
   1b958:	6813      	ldr	r3, [r2, #0]
   1b95a:	3204      	adds	r2, #4
   1b95c:	9206      	str	r2, [sp, #24]
   1b95e:	8018      	strh	r0, [r3, #0]
   1b960:	e751      	b.n	1b806 <__ssvfiscanf_r+0x786>
   1b962:	9a06      	ldr	r2, [sp, #24]
   1b964:	9e03      	ldr	r6, [sp, #12]
   1b966:	6813      	ldr	r3, [r2, #0]
   1b968:	f8a3 a000 	strh.w	sl, [r3]
   1b96c:	4613      	mov	r3, r2
   1b96e:	3304      	adds	r3, #4
   1b970:	9306      	str	r3, [sp, #24]
   1b972:	4634      	mov	r4, r6
   1b974:	f7ff bbca 	b.w	1b10c <__ssvfiscanf_r+0x8c>
   1b978:	f000 f9de 	bl	1bd38 <__locale_mb_cur_max>
   1b97c:	4286      	cmp	r6, r0
   1b97e:	f43f accf 	beq.w	1b320 <__ssvfiscanf_r+0x2a0>
   1b982:	e89b 000c 	ldmia.w	fp, {r2, r3}
   1b986:	f812 0b01 	ldrb.w	r0, [r2], #1
   1b98a:	f8cb 2000 	str.w	r2, [fp]
   1b98e:	3b01      	subs	r3, #1
   1b990:	9a08      	ldr	r2, [sp, #32]
   1b992:	9200      	str	r2, [sp, #0]
   1b994:	1c75      	adds	r5, r6, #1
   1b996:	f8cb 3004 	str.w	r3, [fp, #4]
   1b99a:	4649      	mov	r1, r9
   1b99c:	f808 0006 	strb.w	r0, [r8, r6]
   1b9a0:	462b      	mov	r3, r5
   1b9a2:	4642      	mov	r2, r8
   1b9a4:	4638      	mov	r0, r7
   1b9a6:	f000 f9e7 	bl	1bd78 <_mbrtowc_r>
   1b9aa:	1c41      	adds	r1, r0, #1
   1b9ac:	f43f acb8 	beq.w	1b320 <__ssvfiscanf_r+0x2a0>
   1b9b0:	b198      	cbz	r0, 1b9da <__ssvfiscanf_r+0x95a>
   1b9b2:	3002      	adds	r0, #2
   1b9b4:	bf08      	it	eq
   1b9b6:	462e      	moveq	r6, r5
   1b9b8:	d12e      	bne.n	1ba18 <__ssvfiscanf_r+0x998>
   1b9ba:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b9be:	2b00      	cmp	r3, #0
   1b9c0:	f73f ad5e 	bgt.w	1b480 <__ssvfiscanf_r+0x400>
   1b9c4:	4659      	mov	r1, fp
   1b9c6:	4638      	mov	r0, r7
   1b9c8:	f7ff fafc 	bl	1afc4 <__ssrefill_r>
   1b9cc:	2800      	cmp	r0, #0
   1b9ce:	f43f ad57 	beq.w	1b480 <__ssvfiscanf_r+0x400>
   1b9d2:	2e00      	cmp	r6, #0
   1b9d4:	f47f aca4 	bne.w	1b320 <__ssvfiscanf_r+0x2a0>
   1b9d8:	e55e      	b.n	1b498 <__ssvfiscanf_r+0x418>
   1b9da:	f8c9 0000 	str.w	r0, [r9]
   1b9de:	f000 f99d 	bl	1bd1c <iswspace>
   1b9e2:	4606      	mov	r6, r0
   1b9e4:	b178      	cbz	r0, 1ba06 <__ssvfiscanf_r+0x986>
   1b9e6:	2d00      	cmp	r5, #0
   1b9e8:	f43f ad56 	beq.w	1b498 <__ssvfiscanf_r+0x418>
   1b9ec:	4445      	add	r5, r8
   1b9ee:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1b9f2:	465a      	mov	r2, fp
   1b9f4:	4638      	mov	r0, r7
   1b9f6:	f7ff faa5 	bl	1af44 <_sungetc_r>
   1b9fa:	4545      	cmp	r5, r8
   1b9fc:	d1f7      	bne.n	1b9ee <__ssvfiscanf_r+0x96e>
   1b9fe:	e54b      	b.n	1b498 <__ssvfiscanf_r+0x418>
   1ba00:	f000 fea6 	bl	1c750 <_strtoull_r>
   1ba04:	e6f9      	b.n	1b7fa <__ssvfiscanf_r+0x77a>
   1ba06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ba08:	44aa      	add	sl, r5
   1ba0a:	3c01      	subs	r4, #1
   1ba0c:	2b00      	cmp	r3, #0
   1ba0e:	d1d4      	bne.n	1b9ba <__ssvfiscanf_r+0x93a>
   1ba10:	f109 0904 	add.w	r9, r9, #4
   1ba14:	461e      	mov	r6, r3
   1ba16:	e7d0      	b.n	1b9ba <__ssvfiscanf_r+0x93a>
   1ba18:	f8d9 0000 	ldr.w	r0, [r9]
   1ba1c:	e7df      	b.n	1b9de <__ssvfiscanf_r+0x95e>
   1ba1e:	bf00      	nop

0001ba20 <__submore>:
   1ba20:	f101 0340 	add.w	r3, r1, #64	; 0x40
   1ba24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba28:	460c      	mov	r4, r1
   1ba2a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1ba2c:	4299      	cmp	r1, r3
   1ba2e:	d014      	beq.n	1ba5a <__submore+0x3a>
   1ba30:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1ba32:	0077      	lsls	r7, r6, #1
   1ba34:	463a      	mov	r2, r7
   1ba36:	f000 fa47 	bl	1bec8 <_realloc_r>
   1ba3a:	4605      	mov	r5, r0
   1ba3c:	b340      	cbz	r0, 1ba90 <__submore+0x70>
   1ba3e:	eb00 0806 	add.w	r8, r0, r6
   1ba42:	4632      	mov	r2, r6
   1ba44:	4640      	mov	r0, r8
   1ba46:	4629      	mov	r1, r5
   1ba48:	f7fd f886 	bl	18b58 <memcpy>
   1ba4c:	f8c4 8000 	str.w	r8, [r4]
   1ba50:	6325      	str	r5, [r4, #48]	; 0x30
   1ba52:	6367      	str	r7, [r4, #52]	; 0x34
   1ba54:	2000      	movs	r0, #0
   1ba56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1ba5e:	f7fd fe5d 	bl	1971c <_malloc_r>
   1ba62:	b1a8      	cbz	r0, 1ba90 <__submore+0x70>
   1ba64:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1ba68:	6320      	str	r0, [r4, #48]	; 0x30
   1ba6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ba6e:	6362      	str	r2, [r4, #52]	; 0x34
   1ba70:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   1ba74:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1ba78:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1ba7c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1ba80:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   1ba84:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   1ba88:	6020      	str	r0, [r4, #0]
   1ba8a:	2000      	movs	r0, #0
   1ba8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba90:	f04f 30ff 	mov.w	r0, #4294967295
   1ba94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ba98 <__env_lock>:
   1ba98:	4801      	ldr	r0, [pc, #4]	; (1baa0 <__env_lock+0x8>)
   1ba9a:	f7fd be39 	b.w	19710 <__retarget_lock_acquire_recursive>
   1ba9e:	bf00      	nop
   1baa0:	200058a0 	.word	0x200058a0

0001baa4 <__env_unlock>:
   1baa4:	4801      	ldr	r0, [pc, #4]	; (1baac <__env_unlock+0x8>)
   1baa6:	f7fd be37 	b.w	19718 <__retarget_lock_release_recursive>
   1baaa:	bf00      	nop
   1baac:	200058a0 	.word	0x200058a0

0001bab0 <_malloc_trim_r>:
   1bab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bab2:	4f24      	ldr	r7, [pc, #144]	; (1bb44 <_malloc_trim_r+0x94>)
   1bab4:	460c      	mov	r4, r1
   1bab6:	4606      	mov	r6, r0
   1bab8:	f7fe f932 	bl	19d20 <__malloc_lock>
   1babc:	68bb      	ldr	r3, [r7, #8]
   1babe:	685d      	ldr	r5, [r3, #4]
   1bac0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   1bac4:	310f      	adds	r1, #15
   1bac6:	f025 0503 	bic.w	r5, r5, #3
   1baca:	4429      	add	r1, r5
   1bacc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   1bad0:	f021 010f 	bic.w	r1, r1, #15
   1bad4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   1bad8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1badc:	db07      	blt.n	1baee <_malloc_trim_r+0x3e>
   1bade:	2100      	movs	r1, #0
   1bae0:	4630      	mov	r0, r6
   1bae2:	f7fe f929 	bl	19d38 <_sbrk_r>
   1bae6:	68bb      	ldr	r3, [r7, #8]
   1bae8:	442b      	add	r3, r5
   1baea:	4298      	cmp	r0, r3
   1baec:	d004      	beq.n	1baf8 <_malloc_trim_r+0x48>
   1baee:	4630      	mov	r0, r6
   1baf0:	f7fe f91c 	bl	19d2c <__malloc_unlock>
   1baf4:	2000      	movs	r0, #0
   1baf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1baf8:	4261      	negs	r1, r4
   1bafa:	4630      	mov	r0, r6
   1bafc:	f7fe f91c 	bl	19d38 <_sbrk_r>
   1bb00:	3001      	adds	r0, #1
   1bb02:	d00d      	beq.n	1bb20 <_malloc_trim_r+0x70>
   1bb04:	4b10      	ldr	r3, [pc, #64]	; (1bb48 <_malloc_trim_r+0x98>)
   1bb06:	68ba      	ldr	r2, [r7, #8]
   1bb08:	6819      	ldr	r1, [r3, #0]
   1bb0a:	1b2d      	subs	r5, r5, r4
   1bb0c:	f045 0501 	orr.w	r5, r5, #1
   1bb10:	4630      	mov	r0, r6
   1bb12:	1b09      	subs	r1, r1, r4
   1bb14:	6055      	str	r5, [r2, #4]
   1bb16:	6019      	str	r1, [r3, #0]
   1bb18:	f7fe f908 	bl	19d2c <__malloc_unlock>
   1bb1c:	2001      	movs	r0, #1
   1bb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb20:	2100      	movs	r1, #0
   1bb22:	4630      	mov	r0, r6
   1bb24:	f7fe f908 	bl	19d38 <_sbrk_r>
   1bb28:	68ba      	ldr	r2, [r7, #8]
   1bb2a:	1a83      	subs	r3, r0, r2
   1bb2c:	2b0f      	cmp	r3, #15
   1bb2e:	ddde      	ble.n	1baee <_malloc_trim_r+0x3e>
   1bb30:	4c06      	ldr	r4, [pc, #24]	; (1bb4c <_malloc_trim_r+0x9c>)
   1bb32:	4905      	ldr	r1, [pc, #20]	; (1bb48 <_malloc_trim_r+0x98>)
   1bb34:	6824      	ldr	r4, [r4, #0]
   1bb36:	f043 0301 	orr.w	r3, r3, #1
   1bb3a:	1b00      	subs	r0, r0, r4
   1bb3c:	6053      	str	r3, [r2, #4]
   1bb3e:	6008      	str	r0, [r1, #0]
   1bb40:	e7d5      	b.n	1baee <_malloc_trim_r+0x3e>
   1bb42:	bf00      	nop
   1bb44:	20000654 	.word	0x20000654
   1bb48:	2000559c 	.word	0x2000559c
   1bb4c:	20000a5c 	.word	0x20000a5c

0001bb50 <_free_r>:
   1bb50:	2900      	cmp	r1, #0
   1bb52:	d044      	beq.n	1bbde <_free_r+0x8e>
   1bb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb58:	460d      	mov	r5, r1
   1bb5a:	4680      	mov	r8, r0
   1bb5c:	f7fe f8e0 	bl	19d20 <__malloc_lock>
   1bb60:	f855 7c04 	ldr.w	r7, [r5, #-4]
   1bb64:	4969      	ldr	r1, [pc, #420]	; (1bd0c <_free_r+0x1bc>)
   1bb66:	f027 0301 	bic.w	r3, r7, #1
   1bb6a:	f1a5 0408 	sub.w	r4, r5, #8
   1bb6e:	18e2      	adds	r2, r4, r3
   1bb70:	688e      	ldr	r6, [r1, #8]
   1bb72:	6850      	ldr	r0, [r2, #4]
   1bb74:	42b2      	cmp	r2, r6
   1bb76:	f020 0003 	bic.w	r0, r0, #3
   1bb7a:	d05e      	beq.n	1bc3a <_free_r+0xea>
   1bb7c:	07fe      	lsls	r6, r7, #31
   1bb7e:	6050      	str	r0, [r2, #4]
   1bb80:	d40b      	bmi.n	1bb9a <_free_r+0x4a>
   1bb82:	f855 7c08 	ldr.w	r7, [r5, #-8]
   1bb86:	1be4      	subs	r4, r4, r7
   1bb88:	f101 0e08 	add.w	lr, r1, #8
   1bb8c:	68a5      	ldr	r5, [r4, #8]
   1bb8e:	4575      	cmp	r5, lr
   1bb90:	443b      	add	r3, r7
   1bb92:	d06d      	beq.n	1bc70 <_free_r+0x120>
   1bb94:	68e7      	ldr	r7, [r4, #12]
   1bb96:	60ef      	str	r7, [r5, #12]
   1bb98:	60bd      	str	r5, [r7, #8]
   1bb9a:	1815      	adds	r5, r2, r0
   1bb9c:	686d      	ldr	r5, [r5, #4]
   1bb9e:	07ed      	lsls	r5, r5, #31
   1bba0:	d53e      	bpl.n	1bc20 <_free_r+0xd0>
   1bba2:	f043 0201 	orr.w	r2, r3, #1
   1bba6:	6062      	str	r2, [r4, #4]
   1bba8:	50e3      	str	r3, [r4, r3]
   1bbaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1bbae:	d217      	bcs.n	1bbe0 <_free_r+0x90>
   1bbb0:	08db      	lsrs	r3, r3, #3
   1bbb2:	1c58      	adds	r0, r3, #1
   1bbb4:	109a      	asrs	r2, r3, #2
   1bbb6:	684d      	ldr	r5, [r1, #4]
   1bbb8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   1bbbc:	60a7      	str	r7, [r4, #8]
   1bbbe:	2301      	movs	r3, #1
   1bbc0:	4093      	lsls	r3, r2
   1bbc2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   1bbc6:	432b      	orrs	r3, r5
   1bbc8:	3a08      	subs	r2, #8
   1bbca:	60e2      	str	r2, [r4, #12]
   1bbcc:	604b      	str	r3, [r1, #4]
   1bbce:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   1bbd2:	60fc      	str	r4, [r7, #12]
   1bbd4:	4640      	mov	r0, r8
   1bbd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bbda:	f7fe b8a7 	b.w	19d2c <__malloc_unlock>
   1bbde:	4770      	bx	lr
   1bbe0:	0a5a      	lsrs	r2, r3, #9
   1bbe2:	2a04      	cmp	r2, #4
   1bbe4:	d852      	bhi.n	1bc8c <_free_r+0x13c>
   1bbe6:	099a      	lsrs	r2, r3, #6
   1bbe8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   1bbec:	00ff      	lsls	r7, r7, #3
   1bbee:	f102 0538 	add.w	r5, r2, #56	; 0x38
   1bbf2:	19c8      	adds	r0, r1, r7
   1bbf4:	59ca      	ldr	r2, [r1, r7]
   1bbf6:	3808      	subs	r0, #8
   1bbf8:	4290      	cmp	r0, r2
   1bbfa:	d04f      	beq.n	1bc9c <_free_r+0x14c>
   1bbfc:	6851      	ldr	r1, [r2, #4]
   1bbfe:	f021 0103 	bic.w	r1, r1, #3
   1bc02:	428b      	cmp	r3, r1
   1bc04:	d232      	bcs.n	1bc6c <_free_r+0x11c>
   1bc06:	6892      	ldr	r2, [r2, #8]
   1bc08:	4290      	cmp	r0, r2
   1bc0a:	d1f7      	bne.n	1bbfc <_free_r+0xac>
   1bc0c:	68c3      	ldr	r3, [r0, #12]
   1bc0e:	60a0      	str	r0, [r4, #8]
   1bc10:	60e3      	str	r3, [r4, #12]
   1bc12:	609c      	str	r4, [r3, #8]
   1bc14:	60c4      	str	r4, [r0, #12]
   1bc16:	4640      	mov	r0, r8
   1bc18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bc1c:	f7fe b886 	b.w	19d2c <__malloc_unlock>
   1bc20:	6895      	ldr	r5, [r2, #8]
   1bc22:	4f3b      	ldr	r7, [pc, #236]	; (1bd10 <_free_r+0x1c0>)
   1bc24:	42bd      	cmp	r5, r7
   1bc26:	4403      	add	r3, r0
   1bc28:	d040      	beq.n	1bcac <_free_r+0x15c>
   1bc2a:	68d0      	ldr	r0, [r2, #12]
   1bc2c:	60e8      	str	r0, [r5, #12]
   1bc2e:	f043 0201 	orr.w	r2, r3, #1
   1bc32:	6085      	str	r5, [r0, #8]
   1bc34:	6062      	str	r2, [r4, #4]
   1bc36:	50e3      	str	r3, [r4, r3]
   1bc38:	e7b7      	b.n	1bbaa <_free_r+0x5a>
   1bc3a:	07ff      	lsls	r7, r7, #31
   1bc3c:	4403      	add	r3, r0
   1bc3e:	d407      	bmi.n	1bc50 <_free_r+0x100>
   1bc40:	f855 2c08 	ldr.w	r2, [r5, #-8]
   1bc44:	1aa4      	subs	r4, r4, r2
   1bc46:	4413      	add	r3, r2
   1bc48:	68a0      	ldr	r0, [r4, #8]
   1bc4a:	68e2      	ldr	r2, [r4, #12]
   1bc4c:	60c2      	str	r2, [r0, #12]
   1bc4e:	6090      	str	r0, [r2, #8]
   1bc50:	4a30      	ldr	r2, [pc, #192]	; (1bd14 <_free_r+0x1c4>)
   1bc52:	6812      	ldr	r2, [r2, #0]
   1bc54:	f043 0001 	orr.w	r0, r3, #1
   1bc58:	4293      	cmp	r3, r2
   1bc5a:	6060      	str	r0, [r4, #4]
   1bc5c:	608c      	str	r4, [r1, #8]
   1bc5e:	d3b9      	bcc.n	1bbd4 <_free_r+0x84>
   1bc60:	4b2d      	ldr	r3, [pc, #180]	; (1bd18 <_free_r+0x1c8>)
   1bc62:	4640      	mov	r0, r8
   1bc64:	6819      	ldr	r1, [r3, #0]
   1bc66:	f7ff ff23 	bl	1bab0 <_malloc_trim_r>
   1bc6a:	e7b3      	b.n	1bbd4 <_free_r+0x84>
   1bc6c:	4610      	mov	r0, r2
   1bc6e:	e7cd      	b.n	1bc0c <_free_r+0xbc>
   1bc70:	1811      	adds	r1, r2, r0
   1bc72:	6849      	ldr	r1, [r1, #4]
   1bc74:	07c9      	lsls	r1, r1, #31
   1bc76:	d444      	bmi.n	1bd02 <_free_r+0x1b2>
   1bc78:	6891      	ldr	r1, [r2, #8]
   1bc7a:	68d2      	ldr	r2, [r2, #12]
   1bc7c:	60ca      	str	r2, [r1, #12]
   1bc7e:	4403      	add	r3, r0
   1bc80:	f043 0001 	orr.w	r0, r3, #1
   1bc84:	6091      	str	r1, [r2, #8]
   1bc86:	6060      	str	r0, [r4, #4]
   1bc88:	50e3      	str	r3, [r4, r3]
   1bc8a:	e7a3      	b.n	1bbd4 <_free_r+0x84>
   1bc8c:	2a14      	cmp	r2, #20
   1bc8e:	d816      	bhi.n	1bcbe <_free_r+0x16e>
   1bc90:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   1bc94:	00ff      	lsls	r7, r7, #3
   1bc96:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   1bc9a:	e7aa      	b.n	1bbf2 <_free_r+0xa2>
   1bc9c:	10aa      	asrs	r2, r5, #2
   1bc9e:	2301      	movs	r3, #1
   1bca0:	684d      	ldr	r5, [r1, #4]
   1bca2:	4093      	lsls	r3, r2
   1bca4:	432b      	orrs	r3, r5
   1bca6:	604b      	str	r3, [r1, #4]
   1bca8:	4603      	mov	r3, r0
   1bcaa:	e7b0      	b.n	1bc0e <_free_r+0xbe>
   1bcac:	f043 0201 	orr.w	r2, r3, #1
   1bcb0:	614c      	str	r4, [r1, #20]
   1bcb2:	610c      	str	r4, [r1, #16]
   1bcb4:	60e5      	str	r5, [r4, #12]
   1bcb6:	60a5      	str	r5, [r4, #8]
   1bcb8:	6062      	str	r2, [r4, #4]
   1bcba:	50e3      	str	r3, [r4, r3]
   1bcbc:	e78a      	b.n	1bbd4 <_free_r+0x84>
   1bcbe:	2a54      	cmp	r2, #84	; 0x54
   1bcc0:	d806      	bhi.n	1bcd0 <_free_r+0x180>
   1bcc2:	0b1a      	lsrs	r2, r3, #12
   1bcc4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   1bcc8:	00ff      	lsls	r7, r7, #3
   1bcca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   1bcce:	e790      	b.n	1bbf2 <_free_r+0xa2>
   1bcd0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1bcd4:	d806      	bhi.n	1bce4 <_free_r+0x194>
   1bcd6:	0bda      	lsrs	r2, r3, #15
   1bcd8:	f102 0778 	add.w	r7, r2, #120	; 0x78
   1bcdc:	00ff      	lsls	r7, r7, #3
   1bcde:	f102 0577 	add.w	r5, r2, #119	; 0x77
   1bce2:	e786      	b.n	1bbf2 <_free_r+0xa2>
   1bce4:	f240 5054 	movw	r0, #1364	; 0x554
   1bce8:	4282      	cmp	r2, r0
   1bcea:	d806      	bhi.n	1bcfa <_free_r+0x1aa>
   1bcec:	0c9a      	lsrs	r2, r3, #18
   1bcee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   1bcf2:	00ff      	lsls	r7, r7, #3
   1bcf4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   1bcf8:	e77b      	b.n	1bbf2 <_free_r+0xa2>
   1bcfa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   1bcfe:	257e      	movs	r5, #126	; 0x7e
   1bd00:	e777      	b.n	1bbf2 <_free_r+0xa2>
   1bd02:	f043 0101 	orr.w	r1, r3, #1
   1bd06:	6061      	str	r1, [r4, #4]
   1bd08:	6013      	str	r3, [r2, #0]
   1bd0a:	e763      	b.n	1bbd4 <_free_r+0x84>
   1bd0c:	20000654 	.word	0x20000654
   1bd10:	2000065c 	.word	0x2000065c
   1bd14:	20000a60 	.word	0x20000a60
   1bd18:	200055cc 	.word	0x200055cc

0001bd1c <iswspace>:
   1bd1c:	28ff      	cmp	r0, #255	; 0xff
   1bd1e:	d901      	bls.n	1bd24 <iswspace+0x8>
   1bd20:	2000      	movs	r0, #0
   1bd22:	4770      	bx	lr
   1bd24:	b510      	push	{r4, lr}
   1bd26:	4604      	mov	r4, r0
   1bd28:	f000 f818 	bl	1bd5c <__locale_ctype_ptr>
   1bd2c:	4420      	add	r0, r4
   1bd2e:	7840      	ldrb	r0, [r0, #1]
   1bd30:	f000 0008 	and.w	r0, r0, #8
   1bd34:	bd10      	pop	{r4, pc}
   1bd36:	bf00      	nop

0001bd38 <__locale_mb_cur_max>:
   1bd38:	4b04      	ldr	r3, [pc, #16]	; (1bd4c <__locale_mb_cur_max+0x14>)
   1bd3a:	4a05      	ldr	r2, [pc, #20]	; (1bd50 <__locale_mb_cur_max+0x18>)
   1bd3c:	681b      	ldr	r3, [r3, #0]
   1bd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1bd40:	2b00      	cmp	r3, #0
   1bd42:	bf08      	it	eq
   1bd44:	4613      	moveq	r3, r2
   1bd46:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   1bd4a:	4770      	bx	lr
   1bd4c:	200001dc 	.word	0x200001dc
   1bd50:	20000a68 	.word	0x20000a68

0001bd54 <__locale_ctype_ptr_l>:
   1bd54:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   1bd58:	4770      	bx	lr
   1bd5a:	bf00      	nop

0001bd5c <__locale_ctype_ptr>:
   1bd5c:	4b04      	ldr	r3, [pc, #16]	; (1bd70 <__locale_ctype_ptr+0x14>)
   1bd5e:	4a05      	ldr	r2, [pc, #20]	; (1bd74 <__locale_ctype_ptr+0x18>)
   1bd60:	681b      	ldr	r3, [r3, #0]
   1bd62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1bd64:	2b00      	cmp	r3, #0
   1bd66:	bf08      	it	eq
   1bd68:	4613      	moveq	r3, r2
   1bd6a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1bd6e:	4770      	bx	lr
   1bd70:	200001dc 	.word	0x200001dc
   1bd74:	20000a68 	.word	0x20000a68

0001bd78 <_mbrtowc_r>:
   1bd78:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd7a:	b083      	sub	sp, #12
   1bd7c:	4607      	mov	r7, r0
   1bd7e:	9d08      	ldr	r5, [sp, #32]
   1bd80:	b192      	cbz	r2, 1bda8 <_mbrtowc_r+0x30>
   1bd82:	4c11      	ldr	r4, [pc, #68]	; (1bdc8 <_mbrtowc_r+0x50>)
   1bd84:	4e11      	ldr	r6, [pc, #68]	; (1bdcc <_mbrtowc_r+0x54>)
   1bd86:	6824      	ldr	r4, [r4, #0]
   1bd88:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1bd8a:	9500      	str	r5, [sp, #0]
   1bd8c:	2c00      	cmp	r4, #0
   1bd8e:	bf08      	it	eq
   1bd90:	4634      	moveq	r4, r6
   1bd92:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   1bd96:	47a0      	blx	r4
   1bd98:	1c43      	adds	r3, r0, #1
   1bd9a:	d103      	bne.n	1bda4 <_mbrtowc_r+0x2c>
   1bd9c:	2200      	movs	r2, #0
   1bd9e:	238a      	movs	r3, #138	; 0x8a
   1bda0:	602a      	str	r2, [r5, #0]
   1bda2:	603b      	str	r3, [r7, #0]
   1bda4:	b003      	add	sp, #12
   1bda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bda8:	4b07      	ldr	r3, [pc, #28]	; (1bdc8 <_mbrtowc_r+0x50>)
   1bdaa:	4908      	ldr	r1, [pc, #32]	; (1bdcc <_mbrtowc_r+0x54>)
   1bdac:	681b      	ldr	r3, [r3, #0]
   1bdae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1bdb0:	9500      	str	r5, [sp, #0]
   1bdb2:	2b00      	cmp	r3, #0
   1bdb4:	bf08      	it	eq
   1bdb6:	460b      	moveq	r3, r1
   1bdb8:	4614      	mov	r4, r2
   1bdba:	4621      	mov	r1, r4
   1bdbc:	4a04      	ldr	r2, [pc, #16]	; (1bdd0 <_mbrtowc_r+0x58>)
   1bdbe:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   1bdc2:	2301      	movs	r3, #1
   1bdc4:	47a0      	blx	r4
   1bdc6:	e7e7      	b.n	1bd98 <_mbrtowc_r+0x20>
   1bdc8:	200001dc 	.word	0x200001dc
   1bdcc:	20000a68 	.word	0x20000a68
   1bdd0:	0001e6c4 	.word	0x0001e6c4

0001bdd4 <__ascii_mbtowc>:
   1bdd4:	b082      	sub	sp, #8
   1bdd6:	b149      	cbz	r1, 1bdec <__ascii_mbtowc+0x18>
   1bdd8:	b15a      	cbz	r2, 1bdf2 <__ascii_mbtowc+0x1e>
   1bdda:	b16b      	cbz	r3, 1bdf8 <__ascii_mbtowc+0x24>
   1bddc:	7813      	ldrb	r3, [r2, #0]
   1bdde:	600b      	str	r3, [r1, #0]
   1bde0:	7812      	ldrb	r2, [r2, #0]
   1bde2:	1c10      	adds	r0, r2, #0
   1bde4:	bf18      	it	ne
   1bde6:	2001      	movne	r0, #1
   1bde8:	b002      	add	sp, #8
   1bdea:	4770      	bx	lr
   1bdec:	a901      	add	r1, sp, #4
   1bdee:	2a00      	cmp	r2, #0
   1bdf0:	d1f3      	bne.n	1bdda <__ascii_mbtowc+0x6>
   1bdf2:	4610      	mov	r0, r2
   1bdf4:	b002      	add	sp, #8
   1bdf6:	4770      	bx	lr
   1bdf8:	f06f 0001 	mvn.w	r0, #1
   1bdfc:	e7f4      	b.n	1bde8 <__ascii_mbtowc+0x14>
   1bdfe:	bf00      	nop

0001be00 <memmove>:
   1be00:	4288      	cmp	r0, r1
   1be02:	b5f0      	push	{r4, r5, r6, r7, lr}
   1be04:	d90d      	bls.n	1be22 <memmove+0x22>
   1be06:	188b      	adds	r3, r1, r2
   1be08:	4298      	cmp	r0, r3
   1be0a:	d20a      	bcs.n	1be22 <memmove+0x22>
   1be0c:	1884      	adds	r4, r0, r2
   1be0e:	2a00      	cmp	r2, #0
   1be10:	d051      	beq.n	1beb6 <memmove+0xb6>
   1be12:	4622      	mov	r2, r4
   1be14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1be18:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1be1c:	4299      	cmp	r1, r3
   1be1e:	d1f9      	bne.n	1be14 <memmove+0x14>
   1be20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1be22:	2a0f      	cmp	r2, #15
   1be24:	d948      	bls.n	1beb8 <memmove+0xb8>
   1be26:	ea41 0300 	orr.w	r3, r1, r0
   1be2a:	079b      	lsls	r3, r3, #30
   1be2c:	d146      	bne.n	1bebc <memmove+0xbc>
   1be2e:	f100 0410 	add.w	r4, r0, #16
   1be32:	f101 0310 	add.w	r3, r1, #16
   1be36:	4615      	mov	r5, r2
   1be38:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1be3c:	f844 6c10 	str.w	r6, [r4, #-16]
   1be40:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1be44:	f844 6c0c 	str.w	r6, [r4, #-12]
   1be48:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1be4c:	f844 6c08 	str.w	r6, [r4, #-8]
   1be50:	3d10      	subs	r5, #16
   1be52:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1be56:	f844 6c04 	str.w	r6, [r4, #-4]
   1be5a:	2d0f      	cmp	r5, #15
   1be5c:	f103 0310 	add.w	r3, r3, #16
   1be60:	f104 0410 	add.w	r4, r4, #16
   1be64:	d8e8      	bhi.n	1be38 <memmove+0x38>
   1be66:	f1a2 0310 	sub.w	r3, r2, #16
   1be6a:	f023 030f 	bic.w	r3, r3, #15
   1be6e:	f002 0e0f 	and.w	lr, r2, #15
   1be72:	3310      	adds	r3, #16
   1be74:	f1be 0f03 	cmp.w	lr, #3
   1be78:	4419      	add	r1, r3
   1be7a:	4403      	add	r3, r0
   1be7c:	d921      	bls.n	1bec2 <memmove+0xc2>
   1be7e:	1f1e      	subs	r6, r3, #4
   1be80:	460d      	mov	r5, r1
   1be82:	4674      	mov	r4, lr
   1be84:	3c04      	subs	r4, #4
   1be86:	f855 7b04 	ldr.w	r7, [r5], #4
   1be8a:	f846 7f04 	str.w	r7, [r6, #4]!
   1be8e:	2c03      	cmp	r4, #3
   1be90:	d8f8      	bhi.n	1be84 <memmove+0x84>
   1be92:	f1ae 0404 	sub.w	r4, lr, #4
   1be96:	f024 0403 	bic.w	r4, r4, #3
   1be9a:	3404      	adds	r4, #4
   1be9c:	4421      	add	r1, r4
   1be9e:	4423      	add	r3, r4
   1bea0:	f002 0203 	and.w	r2, r2, #3
   1bea4:	b162      	cbz	r2, 1bec0 <memmove+0xc0>
   1bea6:	3b01      	subs	r3, #1
   1bea8:	440a      	add	r2, r1
   1beaa:	f811 4b01 	ldrb.w	r4, [r1], #1
   1beae:	f803 4f01 	strb.w	r4, [r3, #1]!
   1beb2:	428a      	cmp	r2, r1
   1beb4:	d1f9      	bne.n	1beaa <memmove+0xaa>
   1beb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1beb8:	4603      	mov	r3, r0
   1beba:	e7f3      	b.n	1bea4 <memmove+0xa4>
   1bebc:	4603      	mov	r3, r0
   1bebe:	e7f2      	b.n	1bea6 <memmove+0xa6>
   1bec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bec2:	4672      	mov	r2, lr
   1bec4:	e7ee      	b.n	1bea4 <memmove+0xa4>
   1bec6:	bf00      	nop

0001bec8 <_realloc_r>:
   1bec8:	2900      	cmp	r1, #0
   1beca:	f000 8095 	beq.w	1bff8 <_realloc_r+0x130>
   1bece:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bed2:	460d      	mov	r5, r1
   1bed4:	4616      	mov	r6, r2
   1bed6:	b083      	sub	sp, #12
   1bed8:	4680      	mov	r8, r0
   1beda:	f106 070b 	add.w	r7, r6, #11
   1bede:	f7fd ff1f 	bl	19d20 <__malloc_lock>
   1bee2:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1bee6:	2f16      	cmp	r7, #22
   1bee8:	f02e 0403 	bic.w	r4, lr, #3
   1beec:	f1a5 0908 	sub.w	r9, r5, #8
   1bef0:	d83c      	bhi.n	1bf6c <_realloc_r+0xa4>
   1bef2:	2210      	movs	r2, #16
   1bef4:	4617      	mov	r7, r2
   1bef6:	42be      	cmp	r6, r7
   1bef8:	d83d      	bhi.n	1bf76 <_realloc_r+0xae>
   1befa:	4294      	cmp	r4, r2
   1befc:	da43      	bge.n	1bf86 <_realloc_r+0xbe>
   1befe:	4bc4      	ldr	r3, [pc, #784]	; (1c210 <_realloc_r+0x348>)
   1bf00:	6899      	ldr	r1, [r3, #8]
   1bf02:	eb09 0004 	add.w	r0, r9, r4
   1bf06:	4288      	cmp	r0, r1
   1bf08:	f000 80b4 	beq.w	1c074 <_realloc_r+0x1ac>
   1bf0c:	6843      	ldr	r3, [r0, #4]
   1bf0e:	f023 0101 	bic.w	r1, r3, #1
   1bf12:	4401      	add	r1, r0
   1bf14:	6849      	ldr	r1, [r1, #4]
   1bf16:	07c9      	lsls	r1, r1, #31
   1bf18:	d54c      	bpl.n	1bfb4 <_realloc_r+0xec>
   1bf1a:	f01e 0f01 	tst.w	lr, #1
   1bf1e:	f000 809b 	beq.w	1c058 <_realloc_r+0x190>
   1bf22:	4631      	mov	r1, r6
   1bf24:	4640      	mov	r0, r8
   1bf26:	f7fd fbf9 	bl	1971c <_malloc_r>
   1bf2a:	4606      	mov	r6, r0
   1bf2c:	2800      	cmp	r0, #0
   1bf2e:	d03a      	beq.n	1bfa6 <_realloc_r+0xde>
   1bf30:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1bf34:	f023 0301 	bic.w	r3, r3, #1
   1bf38:	444b      	add	r3, r9
   1bf3a:	f1a0 0208 	sub.w	r2, r0, #8
   1bf3e:	429a      	cmp	r2, r3
   1bf40:	f000 8121 	beq.w	1c186 <_realloc_r+0x2be>
   1bf44:	1f22      	subs	r2, r4, #4
   1bf46:	2a24      	cmp	r2, #36	; 0x24
   1bf48:	f200 8107 	bhi.w	1c15a <_realloc_r+0x292>
   1bf4c:	2a13      	cmp	r2, #19
   1bf4e:	f200 80db 	bhi.w	1c108 <_realloc_r+0x240>
   1bf52:	4603      	mov	r3, r0
   1bf54:	462a      	mov	r2, r5
   1bf56:	6811      	ldr	r1, [r2, #0]
   1bf58:	6019      	str	r1, [r3, #0]
   1bf5a:	6851      	ldr	r1, [r2, #4]
   1bf5c:	6059      	str	r1, [r3, #4]
   1bf5e:	6892      	ldr	r2, [r2, #8]
   1bf60:	609a      	str	r2, [r3, #8]
   1bf62:	4629      	mov	r1, r5
   1bf64:	4640      	mov	r0, r8
   1bf66:	f7ff fdf3 	bl	1bb50 <_free_r>
   1bf6a:	e01c      	b.n	1bfa6 <_realloc_r+0xde>
   1bf6c:	f027 0707 	bic.w	r7, r7, #7
   1bf70:	2f00      	cmp	r7, #0
   1bf72:	463a      	mov	r2, r7
   1bf74:	dabf      	bge.n	1bef6 <_realloc_r+0x2e>
   1bf76:	2600      	movs	r6, #0
   1bf78:	230c      	movs	r3, #12
   1bf7a:	4630      	mov	r0, r6
   1bf7c:	f8c8 3000 	str.w	r3, [r8]
   1bf80:	b003      	add	sp, #12
   1bf82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf86:	462e      	mov	r6, r5
   1bf88:	1be3      	subs	r3, r4, r7
   1bf8a:	2b0f      	cmp	r3, #15
   1bf8c:	d81e      	bhi.n	1bfcc <_realloc_r+0x104>
   1bf8e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1bf92:	f003 0301 	and.w	r3, r3, #1
   1bf96:	4323      	orrs	r3, r4
   1bf98:	444c      	add	r4, r9
   1bf9a:	f8c9 3004 	str.w	r3, [r9, #4]
   1bf9e:	6863      	ldr	r3, [r4, #4]
   1bfa0:	f043 0301 	orr.w	r3, r3, #1
   1bfa4:	6063      	str	r3, [r4, #4]
   1bfa6:	4640      	mov	r0, r8
   1bfa8:	f7fd fec0 	bl	19d2c <__malloc_unlock>
   1bfac:	4630      	mov	r0, r6
   1bfae:	b003      	add	sp, #12
   1bfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfb4:	f023 0303 	bic.w	r3, r3, #3
   1bfb8:	18e1      	adds	r1, r4, r3
   1bfba:	4291      	cmp	r1, r2
   1bfbc:	db1f      	blt.n	1bffe <_realloc_r+0x136>
   1bfbe:	68c3      	ldr	r3, [r0, #12]
   1bfc0:	6882      	ldr	r2, [r0, #8]
   1bfc2:	462e      	mov	r6, r5
   1bfc4:	60d3      	str	r3, [r2, #12]
   1bfc6:	460c      	mov	r4, r1
   1bfc8:	609a      	str	r2, [r3, #8]
   1bfca:	e7dd      	b.n	1bf88 <_realloc_r+0xc0>
   1bfcc:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1bfd0:	eb09 0107 	add.w	r1, r9, r7
   1bfd4:	f002 0201 	and.w	r2, r2, #1
   1bfd8:	444c      	add	r4, r9
   1bfda:	f043 0301 	orr.w	r3, r3, #1
   1bfde:	4317      	orrs	r7, r2
   1bfe0:	f8c9 7004 	str.w	r7, [r9, #4]
   1bfe4:	604b      	str	r3, [r1, #4]
   1bfe6:	6863      	ldr	r3, [r4, #4]
   1bfe8:	f043 0301 	orr.w	r3, r3, #1
   1bfec:	3108      	adds	r1, #8
   1bfee:	6063      	str	r3, [r4, #4]
   1bff0:	4640      	mov	r0, r8
   1bff2:	f7ff fdad 	bl	1bb50 <_free_r>
   1bff6:	e7d6      	b.n	1bfa6 <_realloc_r+0xde>
   1bff8:	4611      	mov	r1, r2
   1bffa:	f7fd bb8f 	b.w	1971c <_malloc_r>
   1bffe:	f01e 0f01 	tst.w	lr, #1
   1c002:	d18e      	bne.n	1bf22 <_realloc_r+0x5a>
   1c004:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1c008:	eba9 0a01 	sub.w	sl, r9, r1
   1c00c:	f8da 1004 	ldr.w	r1, [sl, #4]
   1c010:	f021 0103 	bic.w	r1, r1, #3
   1c014:	440b      	add	r3, r1
   1c016:	4423      	add	r3, r4
   1c018:	4293      	cmp	r3, r2
   1c01a:	db25      	blt.n	1c068 <_realloc_r+0x1a0>
   1c01c:	68c2      	ldr	r2, [r0, #12]
   1c01e:	6881      	ldr	r1, [r0, #8]
   1c020:	4656      	mov	r6, sl
   1c022:	60ca      	str	r2, [r1, #12]
   1c024:	6091      	str	r1, [r2, #8]
   1c026:	f8da 100c 	ldr.w	r1, [sl, #12]
   1c02a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1c02e:	1f22      	subs	r2, r4, #4
   1c030:	2a24      	cmp	r2, #36	; 0x24
   1c032:	60c1      	str	r1, [r0, #12]
   1c034:	6088      	str	r0, [r1, #8]
   1c036:	f200 8094 	bhi.w	1c162 <_realloc_r+0x29a>
   1c03a:	2a13      	cmp	r2, #19
   1c03c:	d96f      	bls.n	1c11e <_realloc_r+0x256>
   1c03e:	6829      	ldr	r1, [r5, #0]
   1c040:	f8ca 1008 	str.w	r1, [sl, #8]
   1c044:	6869      	ldr	r1, [r5, #4]
   1c046:	f8ca 100c 	str.w	r1, [sl, #12]
   1c04a:	2a1b      	cmp	r2, #27
   1c04c:	f200 80a2 	bhi.w	1c194 <_realloc_r+0x2cc>
   1c050:	3508      	adds	r5, #8
   1c052:	f10a 0210 	add.w	r2, sl, #16
   1c056:	e063      	b.n	1c120 <_realloc_r+0x258>
   1c058:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1c05c:	eba9 0a03 	sub.w	sl, r9, r3
   1c060:	f8da 1004 	ldr.w	r1, [sl, #4]
   1c064:	f021 0103 	bic.w	r1, r1, #3
   1c068:	1863      	adds	r3, r4, r1
   1c06a:	4293      	cmp	r3, r2
   1c06c:	f6ff af59 	blt.w	1bf22 <_realloc_r+0x5a>
   1c070:	4656      	mov	r6, sl
   1c072:	e7d8      	b.n	1c026 <_realloc_r+0x15e>
   1c074:	6841      	ldr	r1, [r0, #4]
   1c076:	f021 0b03 	bic.w	fp, r1, #3
   1c07a:	44a3      	add	fp, r4
   1c07c:	f107 0010 	add.w	r0, r7, #16
   1c080:	4583      	cmp	fp, r0
   1c082:	da56      	bge.n	1c132 <_realloc_r+0x26a>
   1c084:	f01e 0f01 	tst.w	lr, #1
   1c088:	f47f af4b 	bne.w	1bf22 <_realloc_r+0x5a>
   1c08c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1c090:	eba9 0a01 	sub.w	sl, r9, r1
   1c094:	f8da 1004 	ldr.w	r1, [sl, #4]
   1c098:	f021 0103 	bic.w	r1, r1, #3
   1c09c:	448b      	add	fp, r1
   1c09e:	4558      	cmp	r0, fp
   1c0a0:	dce2      	bgt.n	1c068 <_realloc_r+0x1a0>
   1c0a2:	4656      	mov	r6, sl
   1c0a4:	f8da 100c 	ldr.w	r1, [sl, #12]
   1c0a8:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1c0ac:	1f22      	subs	r2, r4, #4
   1c0ae:	2a24      	cmp	r2, #36	; 0x24
   1c0b0:	60c1      	str	r1, [r0, #12]
   1c0b2:	6088      	str	r0, [r1, #8]
   1c0b4:	f200 808f 	bhi.w	1c1d6 <_realloc_r+0x30e>
   1c0b8:	2a13      	cmp	r2, #19
   1c0ba:	f240 808a 	bls.w	1c1d2 <_realloc_r+0x30a>
   1c0be:	6829      	ldr	r1, [r5, #0]
   1c0c0:	f8ca 1008 	str.w	r1, [sl, #8]
   1c0c4:	6869      	ldr	r1, [r5, #4]
   1c0c6:	f8ca 100c 	str.w	r1, [sl, #12]
   1c0ca:	2a1b      	cmp	r2, #27
   1c0cc:	f200 808a 	bhi.w	1c1e4 <_realloc_r+0x31c>
   1c0d0:	3508      	adds	r5, #8
   1c0d2:	f10a 0210 	add.w	r2, sl, #16
   1c0d6:	6829      	ldr	r1, [r5, #0]
   1c0d8:	6011      	str	r1, [r2, #0]
   1c0da:	6869      	ldr	r1, [r5, #4]
   1c0dc:	6051      	str	r1, [r2, #4]
   1c0de:	68a9      	ldr	r1, [r5, #8]
   1c0e0:	6091      	str	r1, [r2, #8]
   1c0e2:	eb0a 0107 	add.w	r1, sl, r7
   1c0e6:	ebab 0207 	sub.w	r2, fp, r7
   1c0ea:	f042 0201 	orr.w	r2, r2, #1
   1c0ee:	6099      	str	r1, [r3, #8]
   1c0f0:	604a      	str	r2, [r1, #4]
   1c0f2:	f8da 3004 	ldr.w	r3, [sl, #4]
   1c0f6:	f003 0301 	and.w	r3, r3, #1
   1c0fa:	431f      	orrs	r7, r3
   1c0fc:	4640      	mov	r0, r8
   1c0fe:	f8ca 7004 	str.w	r7, [sl, #4]
   1c102:	f7fd fe13 	bl	19d2c <__malloc_unlock>
   1c106:	e751      	b.n	1bfac <_realloc_r+0xe4>
   1c108:	682b      	ldr	r3, [r5, #0]
   1c10a:	6003      	str	r3, [r0, #0]
   1c10c:	686b      	ldr	r3, [r5, #4]
   1c10e:	6043      	str	r3, [r0, #4]
   1c110:	2a1b      	cmp	r2, #27
   1c112:	d82d      	bhi.n	1c170 <_realloc_r+0x2a8>
   1c114:	f100 0308 	add.w	r3, r0, #8
   1c118:	f105 0208 	add.w	r2, r5, #8
   1c11c:	e71b      	b.n	1bf56 <_realloc_r+0x8e>
   1c11e:	4632      	mov	r2, r6
   1c120:	6829      	ldr	r1, [r5, #0]
   1c122:	6011      	str	r1, [r2, #0]
   1c124:	6869      	ldr	r1, [r5, #4]
   1c126:	6051      	str	r1, [r2, #4]
   1c128:	68a9      	ldr	r1, [r5, #8]
   1c12a:	6091      	str	r1, [r2, #8]
   1c12c:	461c      	mov	r4, r3
   1c12e:	46d1      	mov	r9, sl
   1c130:	e72a      	b.n	1bf88 <_realloc_r+0xc0>
   1c132:	eb09 0107 	add.w	r1, r9, r7
   1c136:	ebab 0b07 	sub.w	fp, fp, r7
   1c13a:	f04b 0201 	orr.w	r2, fp, #1
   1c13e:	6099      	str	r1, [r3, #8]
   1c140:	604a      	str	r2, [r1, #4]
   1c142:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1c146:	f003 0301 	and.w	r3, r3, #1
   1c14a:	431f      	orrs	r7, r3
   1c14c:	4640      	mov	r0, r8
   1c14e:	f845 7c04 	str.w	r7, [r5, #-4]
   1c152:	f7fd fdeb 	bl	19d2c <__malloc_unlock>
   1c156:	462e      	mov	r6, r5
   1c158:	e728      	b.n	1bfac <_realloc_r+0xe4>
   1c15a:	4629      	mov	r1, r5
   1c15c:	f7ff fe50 	bl	1be00 <memmove>
   1c160:	e6ff      	b.n	1bf62 <_realloc_r+0x9a>
   1c162:	4629      	mov	r1, r5
   1c164:	4630      	mov	r0, r6
   1c166:	461c      	mov	r4, r3
   1c168:	46d1      	mov	r9, sl
   1c16a:	f7ff fe49 	bl	1be00 <memmove>
   1c16e:	e70b      	b.n	1bf88 <_realloc_r+0xc0>
   1c170:	68ab      	ldr	r3, [r5, #8]
   1c172:	6083      	str	r3, [r0, #8]
   1c174:	68eb      	ldr	r3, [r5, #12]
   1c176:	60c3      	str	r3, [r0, #12]
   1c178:	2a24      	cmp	r2, #36	; 0x24
   1c17a:	d017      	beq.n	1c1ac <_realloc_r+0x2e4>
   1c17c:	f100 0310 	add.w	r3, r0, #16
   1c180:	f105 0210 	add.w	r2, r5, #16
   1c184:	e6e7      	b.n	1bf56 <_realloc_r+0x8e>
   1c186:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1c18a:	f023 0303 	bic.w	r3, r3, #3
   1c18e:	441c      	add	r4, r3
   1c190:	462e      	mov	r6, r5
   1c192:	e6f9      	b.n	1bf88 <_realloc_r+0xc0>
   1c194:	68a9      	ldr	r1, [r5, #8]
   1c196:	f8ca 1010 	str.w	r1, [sl, #16]
   1c19a:	68e9      	ldr	r1, [r5, #12]
   1c19c:	f8ca 1014 	str.w	r1, [sl, #20]
   1c1a0:	2a24      	cmp	r2, #36	; 0x24
   1c1a2:	d00c      	beq.n	1c1be <_realloc_r+0x2f6>
   1c1a4:	3510      	adds	r5, #16
   1c1a6:	f10a 0218 	add.w	r2, sl, #24
   1c1aa:	e7b9      	b.n	1c120 <_realloc_r+0x258>
   1c1ac:	692b      	ldr	r3, [r5, #16]
   1c1ae:	6103      	str	r3, [r0, #16]
   1c1b0:	696b      	ldr	r3, [r5, #20]
   1c1b2:	6143      	str	r3, [r0, #20]
   1c1b4:	f105 0218 	add.w	r2, r5, #24
   1c1b8:	f100 0318 	add.w	r3, r0, #24
   1c1bc:	e6cb      	b.n	1bf56 <_realloc_r+0x8e>
   1c1be:	692a      	ldr	r2, [r5, #16]
   1c1c0:	f8ca 2018 	str.w	r2, [sl, #24]
   1c1c4:	696a      	ldr	r2, [r5, #20]
   1c1c6:	f8ca 201c 	str.w	r2, [sl, #28]
   1c1ca:	3518      	adds	r5, #24
   1c1cc:	f10a 0220 	add.w	r2, sl, #32
   1c1d0:	e7a6      	b.n	1c120 <_realloc_r+0x258>
   1c1d2:	4632      	mov	r2, r6
   1c1d4:	e77f      	b.n	1c0d6 <_realloc_r+0x20e>
   1c1d6:	4629      	mov	r1, r5
   1c1d8:	4630      	mov	r0, r6
   1c1da:	9301      	str	r3, [sp, #4]
   1c1dc:	f7ff fe10 	bl	1be00 <memmove>
   1c1e0:	9b01      	ldr	r3, [sp, #4]
   1c1e2:	e77e      	b.n	1c0e2 <_realloc_r+0x21a>
   1c1e4:	68a9      	ldr	r1, [r5, #8]
   1c1e6:	f8ca 1010 	str.w	r1, [sl, #16]
   1c1ea:	68e9      	ldr	r1, [r5, #12]
   1c1ec:	f8ca 1014 	str.w	r1, [sl, #20]
   1c1f0:	2a24      	cmp	r2, #36	; 0x24
   1c1f2:	d003      	beq.n	1c1fc <_realloc_r+0x334>
   1c1f4:	3510      	adds	r5, #16
   1c1f6:	f10a 0218 	add.w	r2, sl, #24
   1c1fa:	e76c      	b.n	1c0d6 <_realloc_r+0x20e>
   1c1fc:	692a      	ldr	r2, [r5, #16]
   1c1fe:	f8ca 2018 	str.w	r2, [sl, #24]
   1c202:	696a      	ldr	r2, [r5, #20]
   1c204:	f8ca 201c 	str.w	r2, [sl, #28]
   1c208:	3518      	adds	r5, #24
   1c20a:	f10a 0220 	add.w	r2, sl, #32
   1c20e:	e762      	b.n	1c0d6 <_realloc_r+0x20e>
   1c210:	20000654 	.word	0x20000654

0001c214 <__sccl>:
   1c214:	b470      	push	{r4, r5, r6}
   1c216:	780c      	ldrb	r4, [r1, #0]
   1c218:	2c5e      	cmp	r4, #94	; 0x5e
   1c21a:	d02f      	beq.n	1c27c <__sccl+0x68>
   1c21c:	2200      	movs	r2, #0
   1c21e:	1c4d      	adds	r5, r1, #1
   1c220:	4616      	mov	r6, r2
   1c222:	1e43      	subs	r3, r0, #1
   1c224:	f100 01ff 	add.w	r1, r0, #255	; 0xff
   1c228:	f803 2f01 	strb.w	r2, [r3, #1]!
   1c22c:	428b      	cmp	r3, r1
   1c22e:	d1fb      	bne.n	1c228 <__sccl+0x14>
   1c230:	b174      	cbz	r4, 1c250 <__sccl+0x3c>
   1c232:	f086 0201 	eor.w	r2, r6, #1
   1c236:	5502      	strb	r2, [r0, r4]
   1c238:	1c6e      	adds	r6, r5, #1
   1c23a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1c23e:	2b2d      	cmp	r3, #45	; 0x2d
   1c240:	4631      	mov	r1, r6
   1c242:	d00d      	beq.n	1c260 <__sccl+0x4c>
   1c244:	2b5d      	cmp	r3, #93	; 0x5d
   1c246:	d004      	beq.n	1c252 <__sccl+0x3e>
   1c248:	b133      	cbz	r3, 1c258 <__sccl+0x44>
   1c24a:	461c      	mov	r4, r3
   1c24c:	4635      	mov	r5, r6
   1c24e:	e7f2      	b.n	1c236 <__sccl+0x22>
   1c250:	1e69      	subs	r1, r5, #1
   1c252:	4608      	mov	r0, r1
   1c254:	bc70      	pop	{r4, r5, r6}
   1c256:	4770      	bx	lr
   1c258:	4629      	mov	r1, r5
   1c25a:	4608      	mov	r0, r1
   1c25c:	bc70      	pop	{r4, r5, r6}
   1c25e:	4770      	bx	lr
   1c260:	7869      	ldrb	r1, [r5, #1]
   1c262:	295d      	cmp	r1, #93	; 0x5d
   1c264:	d0f1      	beq.n	1c24a <__sccl+0x36>
   1c266:	428c      	cmp	r4, r1
   1c268:	dcef      	bgt.n	1c24a <__sccl+0x36>
   1c26a:	3502      	adds	r5, #2
   1c26c:	1903      	adds	r3, r0, r4
   1c26e:	3401      	adds	r4, #1
   1c270:	42a1      	cmp	r1, r4
   1c272:	f803 2f01 	strb.w	r2, [r3, #1]!
   1c276:	dcfa      	bgt.n	1c26e <__sccl+0x5a>
   1c278:	3602      	adds	r6, #2
   1c27a:	e7de      	b.n	1c23a <__sccl+0x26>
   1c27c:	2201      	movs	r2, #1
   1c27e:	784c      	ldrb	r4, [r1, #1]
   1c280:	4616      	mov	r6, r2
   1c282:	1c8d      	adds	r5, r1, #2
   1c284:	e7cd      	b.n	1c222 <__sccl+0xe>
   1c286:	bf00      	nop

0001c288 <_strtol_l.isra.0>:
   1c288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c28c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1c290:	460f      	mov	r7, r1
   1c292:	4680      	mov	r8, r0
   1c294:	4616      	mov	r6, r2
   1c296:	461d      	mov	r5, r3
   1c298:	468a      	mov	sl, r1
   1c29a:	e000      	b.n	1c29e <_strtol_l.isra.0+0x16>
   1c29c:	46a2      	mov	sl, r4
   1c29e:	4654      	mov	r4, sl
   1c2a0:	4648      	mov	r0, r9
   1c2a2:	f814 bb01 	ldrb.w	fp, [r4], #1
   1c2a6:	f7ff fd55 	bl	1bd54 <__locale_ctype_ptr_l>
   1c2aa:	4458      	add	r0, fp
   1c2ac:	7842      	ldrb	r2, [r0, #1]
   1c2ae:	f012 0208 	ands.w	r2, r2, #8
   1c2b2:	d1f3      	bne.n	1c29c <_strtol_l.isra.0+0x14>
   1c2b4:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   1c2b8:	d04f      	beq.n	1c35a <_strtol_l.isra.0+0xd2>
   1c2ba:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   1c2be:	bf04      	itt	eq
   1c2c0:	f894 b000 	ldrbeq.w	fp, [r4]
   1c2c4:	f10a 0402 	addeq.w	r4, sl, #2
   1c2c8:	b11d      	cbz	r5, 1c2d2 <_strtol_l.isra.0+0x4a>
   1c2ca:	2d10      	cmp	r5, #16
   1c2cc:	d056      	beq.n	1c37c <_strtol_l.isra.0+0xf4>
   1c2ce:	46ac      	mov	ip, r5
   1c2d0:	e004      	b.n	1c2dc <_strtol_l.isra.0+0x54>
   1c2d2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1c2d6:	d060      	beq.n	1c39a <_strtol_l.isra.0+0x112>
   1c2d8:	250a      	movs	r5, #10
   1c2da:	46ac      	mov	ip, r5
   1c2dc:	2a00      	cmp	r2, #0
   1c2de:	bf0c      	ite	eq
   1c2e0:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   1c2e4:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   1c2e8:	2100      	movs	r1, #0
   1c2ea:	fbb9 fefc 	udiv	lr, r9, ip
   1c2ee:	4608      	mov	r0, r1
   1c2f0:	fb0c 9a1e 	mls	sl, ip, lr, r9
   1c2f4:	e005      	b.n	1c302 <_strtol_l.isra.0+0x7a>
   1c2f6:	d029      	beq.n	1c34c <_strtol_l.isra.0+0xc4>
   1c2f8:	fb0c 3000 	mla	r0, ip, r0, r3
   1c2fc:	2101      	movs	r1, #1
   1c2fe:	f814 bb01 	ldrb.w	fp, [r4], #1
   1c302:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   1c306:	2b09      	cmp	r3, #9
   1c308:	d905      	bls.n	1c316 <_strtol_l.isra.0+0x8e>
   1c30a:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   1c30e:	2b19      	cmp	r3, #25
   1c310:	d80b      	bhi.n	1c32a <_strtol_l.isra.0+0xa2>
   1c312:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   1c316:	429d      	cmp	r5, r3
   1c318:	dd0f      	ble.n	1c33a <_strtol_l.isra.0+0xb2>
   1c31a:	f1b1 3fff 	cmp.w	r1, #4294967295
   1c31e:	d0ee      	beq.n	1c2fe <_strtol_l.isra.0+0x76>
   1c320:	4586      	cmp	lr, r0
   1c322:	d2e8      	bcs.n	1c2f6 <_strtol_l.isra.0+0x6e>
   1c324:	f04f 31ff 	mov.w	r1, #4294967295
   1c328:	e7e9      	b.n	1c2fe <_strtol_l.isra.0+0x76>
   1c32a:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   1c32e:	2b19      	cmp	r3, #25
   1c330:	d803      	bhi.n	1c33a <_strtol_l.isra.0+0xb2>
   1c332:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   1c336:	429d      	cmp	r5, r3
   1c338:	dcef      	bgt.n	1c31a <_strtol_l.isra.0+0x92>
   1c33a:	1c4b      	adds	r3, r1, #1
   1c33c:	d013      	beq.n	1c366 <_strtol_l.isra.0+0xde>
   1c33e:	b102      	cbz	r2, 1c342 <_strtol_l.isra.0+0xba>
   1c340:	4240      	negs	r0, r0
   1c342:	b146      	cbz	r6, 1c356 <_strtol_l.isra.0+0xce>
   1c344:	b9c1      	cbnz	r1, 1c378 <_strtol_l.isra.0+0xf0>
   1c346:	6037      	str	r7, [r6, #0]
   1c348:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c34c:	459a      	cmp	sl, r3
   1c34e:	dad3      	bge.n	1c2f8 <_strtol_l.isra.0+0x70>
   1c350:	f04f 31ff 	mov.w	r1, #4294967295
   1c354:	e7d3      	b.n	1c2fe <_strtol_l.isra.0+0x76>
   1c356:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c35a:	f894 b000 	ldrb.w	fp, [r4]
   1c35e:	2201      	movs	r2, #1
   1c360:	f10a 0402 	add.w	r4, sl, #2
   1c364:	e7b0      	b.n	1c2c8 <_strtol_l.isra.0+0x40>
   1c366:	2322      	movs	r3, #34	; 0x22
   1c368:	f8c8 3000 	str.w	r3, [r8]
   1c36c:	b1ee      	cbz	r6, 1c3aa <_strtol_l.isra.0+0x122>
   1c36e:	1e67      	subs	r7, r4, #1
   1c370:	4648      	mov	r0, r9
   1c372:	6037      	str	r7, [r6, #0]
   1c374:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c378:	4681      	mov	r9, r0
   1c37a:	e7f8      	b.n	1c36e <_strtol_l.isra.0+0xe6>
   1c37c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1c380:	d1a5      	bne.n	1c2ce <_strtol_l.isra.0+0x46>
   1c382:	7823      	ldrb	r3, [r4, #0]
   1c384:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c388:	2b58      	cmp	r3, #88	; 0x58
   1c38a:	d1a0      	bne.n	1c2ce <_strtol_l.isra.0+0x46>
   1c38c:	f04f 0c10 	mov.w	ip, #16
   1c390:	f894 b001 	ldrb.w	fp, [r4, #1]
   1c394:	4665      	mov	r5, ip
   1c396:	3402      	adds	r4, #2
   1c398:	e7a0      	b.n	1c2dc <_strtol_l.isra.0+0x54>
   1c39a:	7823      	ldrb	r3, [r4, #0]
   1c39c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c3a0:	2b58      	cmp	r3, #88	; 0x58
   1c3a2:	d0f3      	beq.n	1c38c <_strtol_l.isra.0+0x104>
   1c3a4:	2508      	movs	r5, #8
   1c3a6:	46ac      	mov	ip, r5
   1c3a8:	e798      	b.n	1c2dc <_strtol_l.isra.0+0x54>
   1c3aa:	4648      	mov	r0, r9
   1c3ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c3b0 <_strtol_r>:
   1c3b0:	b530      	push	{r4, r5, lr}
   1c3b2:	4c06      	ldr	r4, [pc, #24]	; (1c3cc <_strtol_r+0x1c>)
   1c3b4:	4d06      	ldr	r5, [pc, #24]	; (1c3d0 <_strtol_r+0x20>)
   1c3b6:	6824      	ldr	r4, [r4, #0]
   1c3b8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1c3ba:	b083      	sub	sp, #12
   1c3bc:	2c00      	cmp	r4, #0
   1c3be:	bf08      	it	eq
   1c3c0:	462c      	moveq	r4, r5
   1c3c2:	9400      	str	r4, [sp, #0]
   1c3c4:	f7ff ff60 	bl	1c288 <_strtol_l.isra.0>
   1c3c8:	b003      	add	sp, #12
   1c3ca:	bd30      	pop	{r4, r5, pc}
   1c3cc:	200001dc 	.word	0x200001dc
   1c3d0:	20000a68 	.word	0x20000a68

0001c3d4 <_strtoll_l.isra.0>:
   1c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3d8:	b085      	sub	sp, #20
   1c3da:	461e      	mov	r6, r3
   1c3dc:	9102      	str	r1, [sp, #8]
   1c3de:	9003      	str	r0, [sp, #12]
   1c3e0:	9200      	str	r2, [sp, #0]
   1c3e2:	4688      	mov	r8, r1
   1c3e4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1c3e6:	e000      	b.n	1c3ea <_strtoll_l.isra.0+0x16>
   1c3e8:	46a8      	mov	r8, r5
   1c3ea:	4645      	mov	r5, r8
   1c3ec:	4638      	mov	r0, r7
   1c3ee:	f815 4b01 	ldrb.w	r4, [r5], #1
   1c3f2:	f7ff fcaf 	bl	1bd54 <__locale_ctype_ptr_l>
   1c3f6:	4420      	add	r0, r4
   1c3f8:	7843      	ldrb	r3, [r0, #1]
   1c3fa:	f013 0308 	ands.w	r3, r3, #8
   1c3fe:	d1f3      	bne.n	1c3e8 <_strtoll_l.isra.0+0x14>
   1c400:	2c2d      	cmp	r4, #45	; 0x2d
   1c402:	f000 8081 	beq.w	1c508 <_strtoll_l.isra.0+0x134>
   1c406:	2c2b      	cmp	r4, #43	; 0x2b
   1c408:	bf03      	ittte	eq
   1c40a:	782c      	ldrbeq	r4, [r5, #0]
   1c40c:	9301      	streq	r3, [sp, #4]
   1c40e:	f108 0502 	addeq.w	r5, r8, #2
   1c412:	9301      	strne	r3, [sp, #4]
   1c414:	b166      	cbz	r6, 1c430 <_strtoll_l.isra.0+0x5c>
   1c416:	2e10      	cmp	r6, #16
   1c418:	f000 8088 	beq.w	1c52c <_strtoll_l.isra.0+0x158>
   1c41c:	9b01      	ldr	r3, [sp, #4]
   1c41e:	46b0      	mov	r8, r6
   1c420:	ea4f 79e6 	mov.w	r9, r6, asr #31
   1c424:	b97b      	cbnz	r3, 1c446 <_strtoll_l.isra.0+0x72>
   1c426:	f04f 3aff 	mov.w	sl, #4294967295
   1c42a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
   1c42e:	e00e      	b.n	1c44e <_strtoll_l.isra.0+0x7a>
   1c430:	2c30      	cmp	r4, #48	; 0x30
   1c432:	f000 808a 	beq.w	1c54a <_strtoll_l.isra.0+0x176>
   1c436:	f04f 080a 	mov.w	r8, #10
   1c43a:	f04f 0900 	mov.w	r9, #0
   1c43e:	260a      	movs	r6, #10
   1c440:	9b01      	ldr	r3, [sp, #4]
   1c442:	2b00      	cmp	r3, #0
   1c444:	d0ef      	beq.n	1c426 <_strtoll_l.isra.0+0x52>
   1c446:	f04f 0a00 	mov.w	sl, #0
   1c44a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
   1c44e:	4642      	mov	r2, r8
   1c450:	464b      	mov	r3, r9
   1c452:	4650      	mov	r0, sl
   1c454:	4639      	mov	r1, r7
   1c456:	f7fc f883 	bl	18560 <__aeabi_uldivmod>
   1c45a:	464b      	mov	r3, r9
   1c45c:	4693      	mov	fp, r2
   1c45e:	4650      	mov	r0, sl
   1c460:	4642      	mov	r2, r8
   1c462:	4639      	mov	r1, r7
   1c464:	f7fc f87c 	bl	18560 <__aeabi_uldivmod>
   1c468:	f04f 0e00 	mov.w	lr, #0
   1c46c:	2200      	movs	r2, #0
   1c46e:	2300      	movs	r3, #0
   1c470:	e00f      	b.n	1c492 <_strtoll_l.isra.0+0xbe>
   1c472:	d044      	beq.n	1c4fe <_strtoll_l.isra.0+0x12a>
   1c474:	fb02 f409 	mul.w	r4, r2, r9
   1c478:	fb08 4403 	mla	r4, r8, r3, r4
   1c47c:	fba2 2308 	umull	r2, r3, r2, r8
   1c480:	4423      	add	r3, r4
   1c482:	eb12 020c 	adds.w	r2, r2, ip
   1c486:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
   1c48a:	f04f 0e01 	mov.w	lr, #1
   1c48e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1c492:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   1c496:	f1bc 0f09 	cmp.w	ip, #9
   1c49a:	d906      	bls.n	1c4aa <_strtoll_l.isra.0+0xd6>
   1c49c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   1c4a0:	f1bc 0f19 	cmp.w	ip, #25
   1c4a4:	d80d      	bhi.n	1c4c2 <_strtoll_l.isra.0+0xee>
   1c4a6:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
   1c4aa:	4566      	cmp	r6, ip
   1c4ac:	dd12      	ble.n	1c4d4 <_strtoll_l.isra.0+0x100>
   1c4ae:	f1be 3fff 	cmp.w	lr, #4294967295
   1c4b2:	d0ec      	beq.n	1c48e <_strtoll_l.isra.0+0xba>
   1c4b4:	4299      	cmp	r1, r3
   1c4b6:	bf08      	it	eq
   1c4b8:	4290      	cmpeq	r0, r2
   1c4ba:	d2da      	bcs.n	1c472 <_strtoll_l.isra.0+0x9e>
   1c4bc:	f04f 3eff 	mov.w	lr, #4294967295
   1c4c0:	e7e5      	b.n	1c48e <_strtoll_l.isra.0+0xba>
   1c4c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   1c4c6:	f1bc 0f19 	cmp.w	ip, #25
   1c4ca:	d803      	bhi.n	1c4d4 <_strtoll_l.isra.0+0x100>
   1c4cc:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
   1c4d0:	4566      	cmp	r6, ip
   1c4d2:	dcec      	bgt.n	1c4ae <_strtoll_l.isra.0+0xda>
   1c4d4:	f1be 3fff 	cmp.w	lr, #4294967295
   1c4d8:	d01c      	beq.n	1c514 <_strtoll_l.isra.0+0x140>
   1c4da:	9901      	ldr	r1, [sp, #4]
   1c4dc:	b111      	cbz	r1, 1c4e4 <_strtoll_l.isra.0+0x110>
   1c4de:	4252      	negs	r2, r2
   1c4e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4e4:	9900      	ldr	r1, [sp, #0]
   1c4e6:	b129      	cbz	r1, 1c4f4 <_strtoll_l.isra.0+0x120>
   1c4e8:	f1be 0f00 	cmp.w	lr, #0
   1c4ec:	d11b      	bne.n	1c526 <_strtoll_l.isra.0+0x152>
   1c4ee:	9d02      	ldr	r5, [sp, #8]
   1c4f0:	9900      	ldr	r1, [sp, #0]
   1c4f2:	600d      	str	r5, [r1, #0]
   1c4f4:	4610      	mov	r0, r2
   1c4f6:	4619      	mov	r1, r3
   1c4f8:	b005      	add	sp, #20
   1c4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4fe:	45e3      	cmp	fp, ip
   1c500:	dab8      	bge.n	1c474 <_strtoll_l.isra.0+0xa0>
   1c502:	f04f 3eff 	mov.w	lr, #4294967295
   1c506:	e7c2      	b.n	1c48e <_strtoll_l.isra.0+0xba>
   1c508:	2301      	movs	r3, #1
   1c50a:	782c      	ldrb	r4, [r5, #0]
   1c50c:	9301      	str	r3, [sp, #4]
   1c50e:	f108 0502 	add.w	r5, r8, #2
   1c512:	e77f      	b.n	1c414 <_strtoll_l.isra.0+0x40>
   1c514:	9a03      	ldr	r2, [sp, #12]
   1c516:	2322      	movs	r3, #34	; 0x22
   1c518:	6013      	str	r3, [r2, #0]
   1c51a:	9b00      	ldr	r3, [sp, #0]
   1c51c:	b32b      	cbz	r3, 1c56a <_strtoll_l.isra.0+0x196>
   1c51e:	4652      	mov	r2, sl
   1c520:	463b      	mov	r3, r7
   1c522:	3d01      	subs	r5, #1
   1c524:	e7e4      	b.n	1c4f0 <_strtoll_l.isra.0+0x11c>
   1c526:	4692      	mov	sl, r2
   1c528:	461f      	mov	r7, r3
   1c52a:	e7f8      	b.n	1c51e <_strtoll_l.isra.0+0x14a>
   1c52c:	2c30      	cmp	r4, #48	; 0x30
   1c52e:	d117      	bne.n	1c560 <_strtoll_l.isra.0+0x18c>
   1c530:	782b      	ldrb	r3, [r5, #0]
   1c532:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c536:	2b58      	cmp	r3, #88	; 0x58
   1c538:	d112      	bne.n	1c560 <_strtoll_l.isra.0+0x18c>
   1c53a:	786c      	ldrb	r4, [r5, #1]
   1c53c:	f04f 0810 	mov.w	r8, #16
   1c540:	f04f 0900 	mov.w	r9, #0
   1c544:	3502      	adds	r5, #2
   1c546:	2610      	movs	r6, #16
   1c548:	e77a      	b.n	1c440 <_strtoll_l.isra.0+0x6c>
   1c54a:	782b      	ldrb	r3, [r5, #0]
   1c54c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c550:	2b58      	cmp	r3, #88	; 0x58
   1c552:	d0f2      	beq.n	1c53a <_strtoll_l.isra.0+0x166>
   1c554:	f04f 0808 	mov.w	r8, #8
   1c558:	f04f 0900 	mov.w	r9, #0
   1c55c:	2608      	movs	r6, #8
   1c55e:	e76f      	b.n	1c440 <_strtoll_l.isra.0+0x6c>
   1c560:	f04f 0810 	mov.w	r8, #16
   1c564:	f04f 0900 	mov.w	r9, #0
   1c568:	e76a      	b.n	1c440 <_strtoll_l.isra.0+0x6c>
   1c56a:	4652      	mov	r2, sl
   1c56c:	463b      	mov	r3, r7
   1c56e:	e7c1      	b.n	1c4f4 <_strtoll_l.isra.0+0x120>

0001c570 <_strtoll_r>:
   1c570:	b530      	push	{r4, r5, lr}
   1c572:	4c06      	ldr	r4, [pc, #24]	; (1c58c <_strtoll_r+0x1c>)
   1c574:	4d06      	ldr	r5, [pc, #24]	; (1c590 <_strtoll_r+0x20>)
   1c576:	6824      	ldr	r4, [r4, #0]
   1c578:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1c57a:	b083      	sub	sp, #12
   1c57c:	2c00      	cmp	r4, #0
   1c57e:	bf08      	it	eq
   1c580:	462c      	moveq	r4, r5
   1c582:	9400      	str	r4, [sp, #0]
   1c584:	f7ff ff26 	bl	1c3d4 <_strtoll_l.isra.0>
   1c588:	b003      	add	sp, #12
   1c58a:	bd30      	pop	{r4, r5, pc}
   1c58c:	200001dc 	.word	0x200001dc
   1c590:	20000a68 	.word	0x20000a68

0001c594 <_strtoull_l.isra.0>:
   1c594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c598:	b085      	sub	sp, #20
   1c59a:	4693      	mov	fp, r2
   1c59c:	9102      	str	r1, [sp, #8]
   1c59e:	9003      	str	r0, [sp, #12]
   1c5a0:	469a      	mov	sl, r3
   1c5a2:	460f      	mov	r7, r1
   1c5a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1c5a6:	e000      	b.n	1c5aa <_strtoull_l.isra.0+0x16>
   1c5a8:	462f      	mov	r7, r5
   1c5aa:	463d      	mov	r5, r7
   1c5ac:	4630      	mov	r0, r6
   1c5ae:	f815 4b01 	ldrb.w	r4, [r5], #1
   1c5b2:	f7ff fbcf 	bl	1bd54 <__locale_ctype_ptr_l>
   1c5b6:	4420      	add	r0, r4
   1c5b8:	7843      	ldrb	r3, [r0, #1]
   1c5ba:	f013 0308 	ands.w	r3, r3, #8
   1c5be:	d1f3      	bne.n	1c5a8 <_strtoull_l.isra.0+0x14>
   1c5c0:	2c2d      	cmp	r4, #45	; 0x2d
   1c5c2:	f000 8089 	beq.w	1c6d8 <_strtoull_l.isra.0+0x144>
   1c5c6:	2c2b      	cmp	r4, #43	; 0x2b
   1c5c8:	bf03      	ittte	eq
   1c5ca:	782c      	ldrbeq	r4, [r5, #0]
   1c5cc:	9301      	streq	r3, [sp, #4]
   1c5ce:	1cbd      	addeq	r5, r7, #2
   1c5d0:	9301      	strne	r3, [sp, #4]
   1c5d2:	f1ba 0f00 	cmp.w	sl, #0
   1c5d6:	d019      	beq.n	1c60c <_strtoull_l.isra.0+0x78>
   1c5d8:	f1ba 0f10 	cmp.w	sl, #16
   1c5dc:	f000 8081 	beq.w	1c6e2 <_strtoull_l.isra.0+0x14e>
   1c5e0:	46d0      	mov	r8, sl
   1c5e2:	ea4f 79ea 	mov.w	r9, sl, asr #31
   1c5e6:	4642      	mov	r2, r8
   1c5e8:	464b      	mov	r3, r9
   1c5ea:	f04f 30ff 	mov.w	r0, #4294967295
   1c5ee:	f04f 31ff 	mov.w	r1, #4294967295
   1c5f2:	f7fb ffb5 	bl	18560 <__aeabi_uldivmod>
   1c5f6:	4642      	mov	r2, r8
   1c5f8:	4606      	mov	r6, r0
   1c5fa:	460f      	mov	r7, r1
   1c5fc:	464b      	mov	r3, r9
   1c5fe:	f04f 30ff 	mov.w	r0, #4294967295
   1c602:	f04f 31ff 	mov.w	r1, #4294967295
   1c606:	f7fb ffab 	bl	18560 <__aeabi_uldivmod>
   1c60a:	e00b      	b.n	1c624 <_strtoull_l.isra.0+0x90>
   1c60c:	2c30      	cmp	r4, #48	; 0x30
   1c60e:	d07d      	beq.n	1c70c <_strtoull_l.isra.0+0x178>
   1c610:	4f4e      	ldr	r7, [pc, #312]	; (1c74c <_strtoull_l.isra.0+0x1b8>)
   1c612:	2205      	movs	r2, #5
   1c614:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   1c618:	f04f 080a 	mov.w	r8, #10
   1c61c:	f04f 0900 	mov.w	r9, #0
   1c620:	f04f 0a0a 	mov.w	sl, #10
   1c624:	f04f 0e00 	mov.w	lr, #0
   1c628:	2000      	movs	r0, #0
   1c62a:	2100      	movs	r1, #0
   1c62c:	e011      	b.n	1c652 <_strtoull_l.isra.0+0xbe>
   1c62e:	42b9      	cmp	r1, r7
   1c630:	bf08      	it	eq
   1c632:	42b0      	cmpeq	r0, r6
   1c634:	d03f      	beq.n	1c6b6 <_strtoull_l.isra.0+0x122>
   1c636:	fb00 f409 	mul.w	r4, r0, r9
   1c63a:	fb08 4401 	mla	r4, r8, r1, r4
   1c63e:	fba0 0108 	umull	r0, r1, r0, r8
   1c642:	4421      	add	r1, r4
   1c644:	18c0      	adds	r0, r0, r3
   1c646:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   1c64a:	f04f 0e01 	mov.w	lr, #1
   1c64e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1c652:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1c656:	2b09      	cmp	r3, #9
   1c658:	d905      	bls.n	1c666 <_strtoull_l.isra.0+0xd2>
   1c65a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   1c65e:	2b19      	cmp	r3, #25
   1c660:	d80d      	bhi.n	1c67e <_strtoull_l.isra.0+0xea>
   1c662:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   1c666:	459a      	cmp	sl, r3
   1c668:	dd11      	ble.n	1c68e <_strtoull_l.isra.0+0xfa>
   1c66a:	f1be 0f00 	cmp.w	lr, #0
   1c66e:	db03      	blt.n	1c678 <_strtoull_l.isra.0+0xe4>
   1c670:	428f      	cmp	r7, r1
   1c672:	bf08      	it	eq
   1c674:	4286      	cmpeq	r6, r0
   1c676:	d2da      	bcs.n	1c62e <_strtoull_l.isra.0+0x9a>
   1c678:	f04f 3eff 	mov.w	lr, #4294967295
   1c67c:	e7e7      	b.n	1c64e <_strtoull_l.isra.0+0xba>
   1c67e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1c682:	2b19      	cmp	r3, #25
   1c684:	d803      	bhi.n	1c68e <_strtoull_l.isra.0+0xfa>
   1c686:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   1c68a:	459a      	cmp	sl, r3
   1c68c:	dced      	bgt.n	1c66a <_strtoull_l.isra.0+0xd6>
   1c68e:	f1be 0f00 	cmp.w	lr, #0
   1c692:	db15      	blt.n	1c6c0 <_strtoull_l.isra.0+0x12c>
   1c694:	9b01      	ldr	r3, [sp, #4]
   1c696:	b113      	cbz	r3, 1c69e <_strtoull_l.isra.0+0x10a>
   1c698:	4240      	negs	r0, r0
   1c69a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c69e:	f1bb 0f00 	cmp.w	fp, #0
   1c6a2:	d005      	beq.n	1c6b0 <_strtoull_l.isra.0+0x11c>
   1c6a4:	f1be 0f00 	cmp.w	lr, #0
   1c6a8:	d114      	bne.n	1c6d4 <_strtoull_l.isra.0+0x140>
   1c6aa:	9d02      	ldr	r5, [sp, #8]
   1c6ac:	f8cb 5000 	str.w	r5, [fp]
   1c6b0:	b005      	add	sp, #20
   1c6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6b6:	4293      	cmp	r3, r2
   1c6b8:	ddbd      	ble.n	1c636 <_strtoull_l.isra.0+0xa2>
   1c6ba:	f04f 3eff 	mov.w	lr, #4294967295
   1c6be:	e7c6      	b.n	1c64e <_strtoull_l.isra.0+0xba>
   1c6c0:	9a03      	ldr	r2, [sp, #12]
   1c6c2:	2322      	movs	r3, #34	; 0x22
   1c6c4:	6013      	str	r3, [r2, #0]
   1c6c6:	f04f 30ff 	mov.w	r0, #4294967295
   1c6ca:	f04f 31ff 	mov.w	r1, #4294967295
   1c6ce:	f1bb 0f00 	cmp.w	fp, #0
   1c6d2:	d0ed      	beq.n	1c6b0 <_strtoull_l.isra.0+0x11c>
   1c6d4:	3d01      	subs	r5, #1
   1c6d6:	e7e9      	b.n	1c6ac <_strtoull_l.isra.0+0x118>
   1c6d8:	2301      	movs	r3, #1
   1c6da:	782c      	ldrb	r4, [r5, #0]
   1c6dc:	9301      	str	r3, [sp, #4]
   1c6de:	1cbd      	adds	r5, r7, #2
   1c6e0:	e777      	b.n	1c5d2 <_strtoull_l.isra.0+0x3e>
   1c6e2:	2c30      	cmp	r4, #48	; 0x30
   1c6e4:	d123      	bne.n	1c72e <_strtoull_l.isra.0+0x19a>
   1c6e6:	782b      	ldrb	r3, [r5, #0]
   1c6e8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c6ec:	2b58      	cmp	r3, #88	; 0x58
   1c6ee:	d128      	bne.n	1c742 <_strtoull_l.isra.0+0x1ae>
   1c6f0:	786c      	ldrb	r4, [r5, #1]
   1c6f2:	220f      	movs	r2, #15
   1c6f4:	3502      	adds	r5, #2
   1c6f6:	f04f 36ff 	mov.w	r6, #4294967295
   1c6fa:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   1c6fe:	f04f 0810 	mov.w	r8, #16
   1c702:	f04f 0900 	mov.w	r9, #0
   1c706:	f04f 0a10 	mov.w	sl, #16
   1c70a:	e78b      	b.n	1c624 <_strtoull_l.isra.0+0x90>
   1c70c:	782b      	ldrb	r3, [r5, #0]
   1c70e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c712:	2b58      	cmp	r3, #88	; 0x58
   1c714:	d0ec      	beq.n	1c6f0 <_strtoull_l.isra.0+0x15c>
   1c716:	2207      	movs	r2, #7
   1c718:	f04f 36ff 	mov.w	r6, #4294967295
   1c71c:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   1c720:	f04f 0808 	mov.w	r8, #8
   1c724:	f04f 0900 	mov.w	r9, #0
   1c728:	f04f 0a08 	mov.w	sl, #8
   1c72c:	e77a      	b.n	1c624 <_strtoull_l.isra.0+0x90>
   1c72e:	220f      	movs	r2, #15
   1c730:	f04f 36ff 	mov.w	r6, #4294967295
   1c734:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   1c738:	f04f 0810 	mov.w	r8, #16
   1c73c:	f04f 0900 	mov.w	r9, #0
   1c740:	e770      	b.n	1c624 <_strtoull_l.isra.0+0x90>
   1c742:	f04f 0810 	mov.w	r8, #16
   1c746:	f04f 0900 	mov.w	r9, #0
   1c74a:	e74c      	b.n	1c5e6 <_strtoull_l.isra.0+0x52>
   1c74c:	19999999 	.word	0x19999999

0001c750 <_strtoull_r>:
   1c750:	b530      	push	{r4, r5, lr}
   1c752:	4c06      	ldr	r4, [pc, #24]	; (1c76c <_strtoull_r+0x1c>)
   1c754:	4d06      	ldr	r5, [pc, #24]	; (1c770 <_strtoull_r+0x20>)
   1c756:	6824      	ldr	r4, [r4, #0]
   1c758:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1c75a:	b083      	sub	sp, #12
   1c75c:	2c00      	cmp	r4, #0
   1c75e:	bf08      	it	eq
   1c760:	462c      	moveq	r4, r5
   1c762:	9400      	str	r4, [sp, #0]
   1c764:	f7ff ff16 	bl	1c594 <_strtoull_l.isra.0>
   1c768:	b003      	add	sp, #12
   1c76a:	bd30      	pop	{r4, r5, pc}
   1c76c:	200001dc 	.word	0x200001dc
   1c770:	20000a68 	.word	0x20000a68

0001c774 <__ascii_wctomb>:
   1c774:	b121      	cbz	r1, 1c780 <__ascii_wctomb+0xc>
   1c776:	2aff      	cmp	r2, #255	; 0xff
   1c778:	d804      	bhi.n	1c784 <__ascii_wctomb+0x10>
   1c77a:	700a      	strb	r2, [r1, #0]
   1c77c:	2001      	movs	r0, #1
   1c77e:	4770      	bx	lr
   1c780:	4608      	mov	r0, r1
   1c782:	4770      	bx	lr
   1c784:	238a      	movs	r3, #138	; 0x8a
   1c786:	6003      	str	r3, [r0, #0]
   1c788:	f04f 30ff 	mov.w	r0, #4294967295
   1c78c:	4770      	bx	lr
   1c78e:	bf00      	nop
   1c790:	2e2f2e2e 	.word	0x2e2f2e2e
   1c794:	2e2e2f2e 	.word	0x2e2e2f2e
   1c798:	554c412f 	.word	0x554c412f
   1c79c:	6972445f 	.word	0x6972445f
   1c7a0:	2f726576 	.word	0x2f726576
   1c7a4:	5f554c41 	.word	0x5f554c41
   1c7a8:	76697244 	.word	0x76697244
   1c7ac:	682f7265 	.word	0x682f7265
   1c7b0:	692f6c61 	.word	0x692f6c61
   1c7b4:	756c636e 	.word	0x756c636e
   1c7b8:	682f6564 	.word	0x682f6564
   1c7bc:	775f6c61 	.word	0x775f6c61
   1c7c0:	682e7464 	.word	0x682e7464
   1c7c4:	00000000 	.word	0x00000000
   1c7c8:	656c6553 	.word	0x656c6553
   1c7cc:	64657463 	.word	0x64657463
   1c7d0:	6e696c20 	.word	0x6e696c20
   1c7d4:	00003a65 	.word	0x00003a65
   1c7d8:	00000a0d 	.word	0x00000a0d
   1c7dc:	2a2a2a2a 	.word	0x2a2a2a2a
   1c7e0:	66694c20 	.word	0x66694c20
   1c7e4:	75502065 	.word	0x75502065
   1c7e8:	2065736c 	.word	0x2065736c
   1c7ec:	69746341 	.word	0x69746341
   1c7f0:	65746176 	.word	0x65746176
   1c7f4:	2a2a2a64 	.word	0x2a2a2a64
   1c7f8:	0000002a 	.word	0x0000002a

0001c7fc <_ZTV10AMMC_Class>:
   1c7fc:	00000304 00000000 00000000 000007fd     ................
   1c80c:	0000084d 00011685 00000000 00000000     M...............
   1c81c:	fffffcfc 00000000 00011085 00010f55     ............U...

0001c82c <_ZTT10AMMC_Class>:
   1c82c:	0001c808 0001c850 0001c880 0001c89c     ....P...........
   1c83c:	0001c86c 0001c824                       l...$...

0001c844 <_ZTC10AMMC_Class0_15ARINC_Interface>:
   1c844:	00000304 00000000 00000000 00000000     ................
   1c854:	00000000 00011685 00000000 00000000     ................
   1c864:	fffffcfc 00000000 00011085 00010f55     ............U...

0001c874 <_ZTC10AMMC_Class0_14Protocol_Class>:
   1c874:	00000304 00000000 00000000 00000000     ................
   1c884:	00000000 00012267 00000000 00000000     ....g"..........
   1c894:	fffffcfc 00000000 00011085 00010f55     ............U...

0001c8a4 <factoryDefaultsConfiguration>:
   1c8a4:	000000ac 00000004 0000070c 00000000     ................
   1c8b4:	00000000 00000001 000003e8 000003e8     ................
   1c8c4:	000003e8 00000000 00000000 00000000     ................
   1c8d4:	3e051eb8 c4128000 42aa0000 42700000     ...>.......B..pB
   1c8e4:	3e051eb8 c4128000 42960000 42480000     ...>.......B..HB
   1c8f4:	3de147ae 3e0f5c29 3e2e147b c3f68000     .G.=)\.>{..>....
   1c904:	c424c000 c444c000 43200000 42f00000     ..$...D... C...B
   1c914:	425c0000 444f8000 428c0000 43200000     ..\B..OD...B.. C
   1c924:	bc9ba5e3 41780000 3fbae148 42a00000     ......xAH..?...B
   1c934:	41200000 41200000 00000014 00000078     .. A.. A....x...
   1c944:	be23d70a 41d00000 00000078              ..#....Ax...

0001c950 <factoryDefaultsCycles>:
   1c950:	000001c0 00000005 0000000c 00000024     ............$...
   1c960:	756e614d 00006c61 00000000 00000000     Manual..........
   1c970:	00000000 00000001 00000258 0000000f     ........X.......
   1c980:	000004b0 63697551 7453206b 00747261     ....Quick Start.
	...
   1c998:	00000001 00000258 0000001e 0000012c     ....X.......,...
   1c9a8:	2030332b 73636573 00000000 00000000     +30 secs........
   1c9b8:	00000000 00000001 000000f0 0000001e     ................
   1c9c8:	0000001e 73657250 31207465 00000000     ....Preset 1....
	...
   1c9f0:	73657250 32207465 00000000 00000000     Preset 2........
	...
   1ca14:	73657250 33207465 00000000 00000000     Preset 3........
	...
   1ca38:	73657250 34207465 00000000 00000000     Preset 4........
	...
   1ca5c:	73657250 35207465 00000000 00000000     Preset 5........
	...
   1ca80:	73657250 36207465 00000000 00000000     Preset 6........
	...
   1caa4:	73657250 37207465 00000000 00000000     Preset 7........
	...
   1cac8:	73657250 38207465 00000000 00000000     Preset 8........
	...
   1caec:	73657250 39207465 00000000 00000000     Preset 9........
	...
   1cb10:	65736552 00000074 74696e49 696c6169     Reset...Initiali
   1cb20:	0000657a 75736552 0000656d 6e617453     ze..Resume..Stan
   1cb30:	4f796264 00004646 70657250 53657261     dbyOFF..PrepareS
   1cb40:	646e6174 4e4f7962 00000000 6e617453     tandbyON....Stan
   1cb50:	4f796264 0000004e 6e617453 52796264     dbyON...StandbyR
   1cb60:	79646165 00000000 616c6544 00646579     eady....Delayed.
   1cb70:	65746e49 70757272 00646574 00004e4f     Interrupted.ON..
   1cb80:	706f7453 50646570 65636f72 00007373     StoppedProcess..
   1cb90:	61656c43 0070756e 696e6946 64656873     Cleanup.Finished
   1cba0:	00000000 7065654b 00746f48 666c6553     ....KeepHot.Self
   1cbb0:	746f7250 00746365 6f727245 00000072     Protect.Error...
   1cbc0:	6e69614d 616e6574 0065636e 55494d48     Maintenance.HMIU
   1cbd0:	74616470 00000065 6d726946 65726177     pdate...Firmware
   1cbe0:	61647055 00006574 72727543 20746e65     Update..Current 
   1cbf0:	74617453 00000065 6c637943 75442065     State...Cycle Du
   1cc00:	69746172 00006e6f 616d6552 6e696e69     ration..Remainin
   1cc10:	69542067 0000656d 67726154 50207465     g Time..Target P
   1cc20:	7265776f 00000000 00776f4e 6967614d     ower....Now.Magi
   1cc30:	00000063 00203a20 00007830 00000a0d     c... : .0x......

0001cc40 <_ZTV17ConfigState_Class>:
	...
   1cc48:	00012267                                g"..

0001cc4c <_ZTV14DateTime_Class>:
	...
   1cc54:	00014a31 00014b21 6e69614d 616e6574     1J..!K..Maintena
   1cc64:	2065636e 6c6f6f54 636f4c20 0064656b     nce Tool Locked.
   1cc74:	00000a0d 6f6d6552 6f206574 61726570     ....Remote opera
   1cc84:	6e6f6974 73694420 656c6261 00000064     tion Disabled...
   1cc94:	49505351 6f725020 6d617267 61745320     QSPI Program Sta
   1cca4:	64657472 00000d0a 73616c46 61642068     rted....Flash da
   1ccb4:	76206174 66697265 74616369 206e6f69     ta verification 
   1ccc4:	6c696166 0a2e6465 0000000d 74696220     failed...... bit
   1ccd4:	00003a20 00000a0d 74697257 202d2065      :......Write - 
   1cce4:	64616552 20736920 63637573 66737365     Read is successf
   1ccf4:	69206c75 5351206e 46204950 6873616c     ul in QSPI Flash
   1cd04:	6d656d20 2079726f 00000000 202a2a2a      memory ....*** 
   1cd14:	72617453 20705574 6f676c41 68746972     StartUp Algorith
   1cd24:	206e656d 74736554 2a2a2a20 00000000     men Test ***....
   1cd34:	202a2a2a 65746144 0020203a 2074634f     *** Date:  .Oct 
   1cd44:	32203220 00303230 6d695420 00203a65      2 2020. Time: .
   1cd54:	333a3431 33353a39 00000000 202a2a2a     14:39:53....*** 
   1cd64:	20554c41 74696e69 65746169 2a2a2064     ALU initiated **
   1cd74:	0000002a 69746341 6c206576 3a656e69     *...Active line:
   1cd84:	00000020 73616c46 654d2068 79726f6d      ...Flash Memory
   1cd94:	6c655320 73655466 41502074 44455353      SelfTest PASSED
   1cda4:	00000000 00000a0d 73616c46 654d2068     ........Flash Me
   1cdb4:	79726f6d 6c655320 73655466 41462074     mory SelfTest FA
   1cdc4:	44454c49 00000000 52504545 4d204d4f     ILED....EEPROM M
   1cdd4:	726f6d65 65532079 6554666c 50207473     emory SelfTest P
   1cde4:	45535341 00000044 52504545 4d204d4f     ASSED...EEPROM M
   1cdf4:	726f6d65 65532079 6554666c 46207473     emory SelfTest F
   1ce04:	454c4941 00000044 20726941 646e6f43     AILED...Air Cond
   1ce14:	6f697469 676e696e 73795320 206d6574     itioning System 
   1ce24:	7265704f 6e697461 00000067 00000a0d     Operating.......
   1ce34:	20726941 646e6f43 6f697469 676e696e     Air Conditioning
   1ce44:	73795320 206d6574 72617453 00646574      System Started.
   1ce54:	646e6168 4147656c 76454e49 20746e65     handleGAINEvent 
   1ce64:	65636572 64657669 7773203a 68637469     received: switch
   1ce74:	20676e69 6d6f7266 00000020 206f7420     ing from ... to 
   1ce84:	00000000 6c662820 20736761 00203d3d     .... (flags == .
   1ce94:	646e6168 7453656c 49657461 6974696e     handleStateIniti
   1cea4:	7a696c61 66203a65 7367616c 203d3d20     alize: flags == 
   1ceb4:	00007830 646e6168 7453656c 49657461     0x..handleStateI
   1cec4:	6974696e 7a696c61 00000065 646e6168     nitialize...hand
   1ced4:	7453656c 53657461 646e6174 464f7962     leStateStandbyOF
   1cee4:	00000046 646e6168 7453656c 50657461     F...handleStateP
   1cef4:	61706572 74536572 62646e61 004e4f79     repareStandbyON.
   1cf04:	20726941 646e6f43 6f697469 676e696e     Air Conditioning
   1cf14:	73795320 206d6574 706f7453 00646570      System Stopped.

0001cf24 <_ZTV12States_Class>:
	...
   1cf2c:	00003019 682f2e2e 702f6c70 2f74726f     .0..../hpl/port/
   1cf3c:	5f6c7068 6f697067 7361625f 00682e65     hpl_gpio_base.h.
   1cf4c:	682f2e2e 692f6c61 756c636e 682f6564     ../hal/include/h
   1cf5c:	775f6c61 682e7464 00000000 682f2e2e     al_wdt.h....../h
   1cf6c:	732f6c61 682f6372 635f6c61 6e656c61     al/src/hal_calen
   1cf7c:	2e726164 00000063 682f2e2e 732f6c61     dar.c...../hal/s
   1cf8c:	682f6372 635f6c61 615f6e61 636e7973     rc/hal_can_async
   1cf9c:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   1cfac:	635f6c61 735f6372 2e636e79 00000063     al_crc_sync.c...
   1cfbc:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   1cfcc:	6d5f6332 7973615f 632e636e 00000000     2c_m_async.c....
   1cfdc:	682f2e2e 732f6c61 682f6372 705f6c61     ../hal/src/hal_p
   1cfec:	632e6d77 00000000 682f2e2e 732f6c61     wm.c....../hal/s
   1cffc:	682f6372 715f6c61 5f697073 636e7973     rc/hal_qspi_sync
   1d00c:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   1d01c:	735f6c61 6d5f6970 7973615f 632e636e     al_spi_m_async.c
   1d02c:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   1d03c:	735f6c61 6d5f6970 6e79735f 00632e63     al_spi_m_sync.c.
   1d04c:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
   1d05c:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
   1d06c:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   1d07c:	2e747369 00000063                       ist.c...

0001d084 <_map>:
   1d084:	00000000 00000040 00000004 00000004     ....@...........
   1d094:	00000005 00000005 00000006 00000056     ............V...
   1d0a4:	00000007 00000057 682f2e2e 652f6c70     ....W...../hpl/e
   1d0b4:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0001d0c4 <user_mux_confs>:
   1d0c4:	00000100 00000000 00000000 00000000     ................
	...

0001d108 <channel_confs>:
   1d108:	0000065e 00000000 00000000 00000000     ^...............
	...

0001d148 <interrupt_cfg>:
	...
   1d1c8:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
   1d1d8:	632e6361 00000000 682f2e2e 712f6c70     ac.c....../hpl/q
   1d1e8:	2f697073 5f6c7068 69707371 0000632e     spi/hpl_qspi.c..
   1d1f8:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
   1d208:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
   1d218:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   1d228:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
   1d238:	41014000 43000000 43000400 43000800     .@.A...C...C...C
   1d248:	43000c00                                ...C

0001d24c <sercomspi_regs>:
   1d24c:	0020008c 00020000 00000000 01ff0063     .. .........c...
   1d25c:	20000c01 02000000 00000000 ff00ef00     ... ............
   1d26c:	000c0401 00000030 00000002 00ef0000     ....0...........
   1d27c:	000601ff 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1d28c:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1d29c:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1d2ac:	43001400 43001800                       ...C...C

0001d2b4 <_usb_ep_cfgs>:
   1d2b4:	200035cc 00000000 00000040 2000360c     .5. ....@....6. 
   1d2c4:	2000364c 00400040 2000368c 200036cc     L6. @.@..6. .6. 
   1d2d4:	00400040 2000370c 2000374c 00400040     @.@..7. L7. @.@.
   1d2e4:	2000378c 200037cc 00400040 00000804     .7. .7. @.@.....
   1d2f4:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   1d304:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   1d314:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1d324:	7361625f 00682e65 682f2e2e 732f6c61     _base.h.../hal/s
   1d334:	682f6372 695f6c61 6d5f6332 6e79735f     rc/hal_i2c_m_syn
   1d344:	00632e63                                c.c.

0001d348 <n25q256a_interface>:
   1d348:	0000f455 0000f4f9 0000f609 0000f7c1     U...............
   1d358:	0000f851 752f2e2e 642f6273 63697665     Q...../usb/devic
   1d368:	73752f65 2e636462 00000063              e/usbdc.c...

0001d374 <_ZTV17ARINC_Conversions>:
	...
   1d37c:	00011085 00010f55                       ....U...

0001d384 <_ZL5Mesg1>:
   1d384:	4e495241 614c2043 3a6c6562 00000020     ARINC Label: ...

0001d394 <_ZL5Mesg2>:
   1d394:	61746144 0000203a                       Data: ..

0001d39c <_ZL10HexToAscii>:
   1d39c:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0001d3ac <_ZL11HistoryMesg>:
   1d3ac:	74736948 2079726f 4f464946 0000203a     History FIFO: ..
   1d3bc:	49480d0a 3935332d 61662033 64656c69     ..HI-3593 failed
   1d3cc:	206f7420 74696e49 7a696c69 000d0a65      to Initilize...
   1d3dc:	2d0a0d0a 68202d2d 41203273 434e4952     ...--- hs2 ARINC
   1d3ec:	746e4920 61667265 20206563 2d2d2d2d      Interface  ----
   1d3fc:	00000d0a 2d2d0a72 6f67212d 656d2074     ....r.---!got me
   1d40c:	67617373 2d2d2165 00002d2d 61727420     ssage!----.. tra
   1d41c:	696d736e 6e697474 2e2e2e67 00000000     nsmitting.......
   1d42c:	61725420 696d736e 64657474 00000021      Transmitted!...
   1d43c:	0000003e 72540d0a 6d736e61 26207469     >.....Transmit &
   1d44c:	63655220 65766965 74695720 614c2068      Receive With La
   1d45c:	736c6562 646f4d20 000d0a65 45530d0a     bels Mode.....SE
   1d46c:	542d464c 2c545345 746e4920 616e7265     LF-TEST, Interna
   1d47c:	6944206c 61746967 6f4c206c 622d706f     l Digital Loop-b
   1d48c:	2c6b6361 206f4e20 61746164 20736920     ack, No data is 
   1d49c:	6e617274 74696d73 20646574 65747865     transmitted exte
   1d4ac:	6c616e72 0d0a796c 00000000 6f200d0a     rnally........ o
   1d4bc:	6154206e 20656c62 6562616c 6120736c     n Table labels a
   1d4cc:	45206572 6c62616e 00006465 500a0d0a     re Enabled.....P
   1d4dc:	73736572 2d575320 6f742031 61747320     ress SW-1 to sta
   1d4ec:	69207472 6974696e 796c6c61 000a0d0a     rt initially....
   1d4fc:	202d2d2d 74747542 43206e6f 616d6d6f     --- Button Comma
   1d50c:	2073646e 0a2d2d2d 0000000d 70532020     nds ---.....  Sp
   1d51c:	20656361 20726142 44206f74 6c707369     ace Bar to Displ
   1d52c:	53207961 75746174 6e612073 6f432064     ay Status and Co
   1d53c:	6f72746e 6552206c 74736967 0a737265     ntrol Registers.
   1d54c:	0000000d 20702020 50206f74 65737561     ....  p to Pause
   1d55c:	00000d0a 206d2020 44206f74 6c707369     ....  m to Displ
   1d56c:	4c207961 6c656261 6d654d20 0079726f     ay Label Memory.
   1d57c:	003e0d0a 72540d0a 6d736e61 69747469     ..>...Transmitti
   1d58c:	0d0a676e 0000003e 49480d0a 3935332d     ng..>.....HI-359
   1d59c:	74532033 73757461 6f43202c 6f72746e     3 Status, Contro
   1d5ac:	6552206c 74736967 0d737265 0000000a     l Registers.....
   1d5bc:	20090d0a 2a2a2a20 50202a2a 73736572     ...  ***** Press
   1d5cc:	70732020 62656361 74207261 6f63206f       spacebar to co
   1d5dc:	6e69746e 2a206575 2a2a2a2a 0000002a     ntinue ******...
   1d5ec:	540d0a0a 736e6172 2074696d 73756150     ...Transmit Paus
   1d5fc:	0d0a6465 00000000 72500d0a 20737365     ed........Press 
   1d60c:	44454c4f 5455425f 2d4e4f54 6f742032     OLED_BUTTON-2 to
   1d61c:	61727420 696d736e 6e6f2074 72662065      transmit one fr
   1d62c:	20656d61 20646e61 73756170 000d0a65     ame and pause...
   1d63c:	72500d0a 20737365 44454c4f 5455425f     ..Press OLED_BUT
   1d64c:	2d4e4f54 6f742033 73655220 0a656d75     TON-3 to Resume.
   1d65c:	0000000d 72540d0a 6d736e61 65747469     ......Transmitte
   1d66c:	65522072 656d7573 2e2e2e64 00000d0a     r Resumed.......
   1d67c:	65520d0a 76696563 31207265 62614c20     ..Receiver 1 Lab
   1d68c:	0a736c65 0000000d 65520d0a 76696563     els.......Receiv
   1d69c:	32207265 62614c20 0a736c65 0000000d     er 2 Labels.....
   1d6ac:	72540d0a 6d736e61 26207469 63655220     ..Transmit & Rec
   1d6bc:	65766965 68634520 6f4d206f 0d0a6564     eive Echo Mode..
   1d6cc:	00000000 6c530d0a 5320776f 64656570     ......Slow Speed
   1d6dc:	00000000 61460d0a 53207473 64656570     ......Fast Speed
   1d6ec:	00000000 72540d0a 6d736e61 65747469     ......Transmitte
   1d6fc:	61502072 79746972 616e4520 64656c62     r Parity Enabled
   1d70c:	00000000 49480d0a 3935332d 61662033     ......HI-3593 fa
   1d71c:	64656c69 206f7420 74696e69 7a696c69     iled to initiliz
   1d72c:	000d0a65 61540d0a 20656c62 6562616c     e.....Table labe
   1d73c:	6120736c 45206572 6c62616e 00006465     ls are Enabled..
   1d74c:	2d0a0d0a 43202d2d 6f736e6f 4320656c     ...--- Console C
   1d75c:	616d6d6f 2073646e 706c6548 2d2d2d20     ommands Help ---
   1d76c:	00000000 20502020 6150203d 79746972     ....  P = Parity
   1d77c:	676f5420 20656c67 6f2f6e6f 00006666      Toggle on/off..
   1d78c:	20542020 4654203d 2050494c 676f5420       T = TFLIP  Tog
   1d79c:	20656c67 6f2f6e6f 00006666 20522020     gle on/off..  R 
   1d7ac:	4652203d 2050494c 676f5420 20656c67     = RFLIP  Toggle 
   1d7bc:	6f2f6e6f 00006666 20532020 4453203d     on/off..  S = SD
   1d7cc:	202c4e4f 2c394453 31445320 6f542030     ON, SD9, SD10 To
   1d7dc:	656c6767 2f6e6f20 0066666f 20482020     ggle on/off.  H 
   1d7ec:	6854203d 48207369 20706c65 65676150     = This Help Page
   1d7fc:	00000000 70532020 20656361 20726142     ....  Space Bar 
   1d80c:	6944203d 616c7073 74532079 73757461     = Display Status
   1d81c:	646e6120 6e6f4320 6c6f7274 67657220      and Control reg
   1d82c:	00000073 20492020 6e49203d 6d657263     s...  I = Increm
   1d83c:	20746e65 7373654d 20656761 20646e61     ent Message and 
   1d84c:	6e617254 74696d73 7845202e 726f6c70     Transmit. Explor
   1d85c:	4d207265 2065646f 4f202d20 21594c4e     er Mode  - ONLY!
   1d86c:	00000000 204d2020 6e45203d 20726574     ....  M = Enter 
   1d87c:	74737543 4d206d6f 61737365 202e6567     Custom Message. 
   1d88c:	6c707845 7265726f 646f4d20 2d202065     Explorer Mode  -
   1d89c:	4c4e4f20 00002159 4e452020 3d524554      ONLY!..  ENTER=
   1d8ac:	61725420 696d736e 656e2074 6d207478      Transmit next m
   1d8bc:	61737365 202e6567 6c707845 7265726f     essage. Explorer
   1d8cc:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
   1d8dc:	00207830 30307826 00002030 50205854     0x .&x000 ..TX P
   1d8ec:	74697261 4e4f2079 003e0d0a 50205854     arity ON..>.TX P
   1d8fc:	74697261 464f2079 3e0d0a46 00000000     arity OFF..>....
   1d90c:	494c4654 65532050 3e0d0a74 00000000     TFLIP Set..>....
   1d91c:	494c4654 6c432050 65726165 3e0d0a64     TFLIP Cleared..>
   1d92c:	00000000 2d434552 46522031 2050494c     ....REC-1 RFLIP 
   1d93c:	0a746553 00003e0d 2d434552 46522031     Set..>..REC-1 RF
   1d94c:	2050494c 61656c43 0a646572 00003e0d     LIP Cleared..>..
   1d95c:	2d434552 46522032 2050494c 0a746553     REC-2 RFLIP Set.
   1d96c:	00003e0d 2d434552 46522032 2050494c     .>..REC-2 RFLIP 
   1d97c:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
   1d98c:	44532031 532c4e4f 61203944 5320646e     1 SDON,SD9 and S
   1d99c:	20303144 0a746553 00003e0d 2d434552     D10 Set..>..REC-
   1d9ac:	44532031 532c4e4f 61203944 5320646e     1 SDON,SD9 and S
   1d9bc:	20303144 61656c43 0a646572 00003e0d     D10 Cleared..>..
   1d9cc:	2d434552 44532032 532c4e4f 61203944     REC-2 SDON,SD9 a
   1d9dc:	5320646e 20303144 0a746553 00003e0d     nd SD10 Set..>..
   1d9ec:	2d434552 44532032 532c4e4f 61203944     REC-2 SDON,SD9 a
   1d9fc:	5320646e 20303144 61656c43 0a646572     nd SD10 Cleared.
   1da0c:	00003e0d 500a0d0a 73736572 61705320     .>.....Press Spa
   1da1c:	42206563 6f207261 57532072 7420342d     ce Bar or SW-4 t
   1da2c:	6572206f 656d7573 00000000 6562614c     o resume....Labe
   1da3c:	2020736c 202d2030 203a3336 00000020     ls  0 - 63:  ...
   1da4c:	00000020 614c0d0a 736c6562 34362020      .....Labels  64
   1da5c:	3732312d 0020203a 614c0d0a 736c6562     -127:  ...Labels
   1da6c:	38323120 3139312d 0020203a 614c0d0a      128-191:  ...La
   1da7c:	736c6562 32393120 3535322d 0020203a     bels 192-255:  .
   1da8c:	614c0d0a 736c6562 20302020 3336202d     ..Labels  0 - 63
   1da9c:	0020203a 543e0d0a 20202058 74614420     :  ...>TX    Dat
   1daac:	00003a61 6562614c 00003a6c 2d636552     a:..Label:..Rec-
   1dabc:	61442031 003a6174 2d314c50 61442031     1 Data:.PL1-1 Da
   1dacc:	003a6174 6374614d 00003a68 2d314c50     ta:.Match:..PL1-
   1dadc:	61442032 003a6174 2d314c50 61442033     2 Data:.PL1-3 Da
   1daec:	003a6174 2d636552 61442032 003a6174     ta:.Rec-2 Data:.
   1dafc:	2d324c50 61442031 003a6174 2d324c50     PL2-1 Data:.PL2-
   1db0c:	61442032 003a6174 2d324c50 61442033     2 Data:.PL2-3 Da
   1db1c:	003a6174 00000d0a 78450d0a 726f6c70     ta:.......Explor
   1db2c:	4d207265 0a65646f 0000000d 6c200d0a     er Mode....... l
   1db3c:	6c656261 61542073 20656c62 45207369     abels Table is E
   1db4c:	6c62616e 00006465 2d0a0d0a 42202d2d     nabled.....--- B
   1db5c:	6f747475 6f43206e 6e616d6d 2d207364     utton Commands -
   1db6c:	00002d2d 20200d0a 63617073 72616265     --....  spacebar
   1db7c:	206f7420 70736944 2079616c 74617453      to Display Stat
   1db8c:	61207375 4320646e 72746e6f 52206c6f     us and Control R
   1db9c:	73696765 73726574 00000000 20200d0a     egisters......  
   1dbac:	44454c4f 5455422d 324e4f54 61727420     OLED-BUTTON2 tra
   1dbbc:	696d736e 6e6f2074 656d2065 67617373     nsmit one messag
   1dbcc:	72662065 74206d6f 736e6172 2074696d     e from transmit 
   1dbdc:	66667562 00007265 20200d0a 6f74204c     buffer....  L to
   1dbec:	69725020 4c20746e 6c656261 6d654d20      Print Label Mem
   1dbfc:	0a79726f 0000000d 72500d0a 20737365     ory.......Press 
   1dc0c:	45544e45 6f742052 61725420 696d736e     ENTER to Transmi
   1dc1c:	726f2074 65737520 65687420 294d2820     t or use the (M)
   1dc2c:	6d6f6320 646e616d 206f7420 65746e65      command to ente
   1dc3c:	20612072 74737563 6d206d6f 61737365     r a custom messa
   1dc4c:	00006567 73657250 57532073 726f2034     ge..Press SW4 or
   1dc5c:	61707320 61626563 6f742072 6e6f6320      spacebar to con
   1dc6c:	756e6974 00000065 73657250 70732073     tinue...Press sp
   1dc7c:	62656361 74207261 6f63206f 6e69746e     acebar to contin
   1dc8c:	00006575 433e0d0a 616d6d6f 4d20646e     ue....>Command M
   1dc9c:	00000000 6e450d0a 20726574 79622033     ......Enter 3 by
   1dcac:	20736574 414c202b 204c4542 54206f74     tes + LABEL to T
   1dcbc:	736e6172 2074696d 6c6c6f66 6465776f     ransmit followed
   1dccc:	20796220 45544e45 000d0a52 6f540d0a      by ENTER.....To
   1dcdc:	61725420 696d736e 65202c74 7265746e      Transmit, enter
   1dcec:	62203320 73657479 6c6f6620 65776f6c      3 bytes followe
   1dcfc:	79622064 4c206120 6c656261 74796220     d by a Label byt
   1dd0c:	6f662065 776f6c6c 62206465 4e452079     e followed by EN
   1dd1c:	0a524554 0000000d 6d726f46 203a7461     TER.....Format: 
   1dd2c:	73746942 322d3233 42202c35 32737469     Bits32-25, Bits2
   1dd3c:	37312d34 6942202c 36317374 202c392d     4-17, Bits16-9, 
   1dd4c:	4542414c 3a0d0a4c 00000000 6d617845     LABEL..:....Exam
   1dd5c:	3a656c70 20313020 34203332 37362035     ple: 01 23 45 67
   1dd6c:	544e4520 0d0a5245 0000003a 65725020      ENTER..:... Pre
   1dd7c:	52207373 52555445 0000004e 61725420     ss RETURN... Tra
   1dd8c:	696d736e 676e6974 002e2e2e 61725420     nsmiting.... Tra
   1dd9c:	696d736e 21646574 00000000 6d6d6f43     nsmited!....Comm
   1ddac:	20646e61 49203a49 6572636e 746e656d     and I: Increment
   1ddbc:	74616420 3e0d0a61 00000000               data..>....

0001ddc8 <_ZTV15ARINC_Interface>:
   1ddc8:	00000300 00000000 00000000 0001142d     ............-...
   1ddd8:	0001148d 00011685 00000000 00000000     ................
   1dde8:	fffffd00 00000000 00011085 00010f55     ............U...

0001ddf8 <_ZTT15ARINC_Interface>:
   1ddf8:	0001ddd4 0001de14 0001de30 0001ddf0     ........0.......

0001de08 <_ZTC15ARINC_Interface0_14Protocol_Class>:
   1de08:	00000300 00000000 00000000 00000000     ................
   1de18:	00000000 00012267 00000000 00000000     ....g"..........
   1de28:	fffffd00 00000000 00011085 00010f55     ............U...
   1de38:	636e7546 6e6f6974 65786520 65747563     Function execute
   1de48:	75732064 73656363 6c756673 0000796c     d successfully..
   1de58:	63656843 6f79206b 77207275 6e697269     Check your wirin
   1de68:	46202e67 6873616c 69686320 73692070     g. Flash chip is
   1de78:	6e6f6e20 7365722d 736e6f70 2e657669      non-responsive.
   1de88:	00000000 6e6f632a 75727473 726f7463     ....*constructor
   1de98:	5f666f5f 696f6863 2e2a6563 69676562     _of_choice*.begi
   1dea8:	2029286e 20736177 20746f6e 6c6c6163     n() was not call
   1deb8:	69206465 6f76206e 73206469 70757465     ed in void setup
   1dec8:	00002928 62616e55 7420656c 6469206f     ()..Unable to id
   1ded8:	69746e65 63207966 2e706968 65724120     entify chip. Are
   1dee8:	756f7920 72757320 68742065 63207369      you sure this c
   1def8:	20706968 73207369 6f707075 64657472     hip is supported
   1df08:	0000003f 62616e55 7420656c 6469206f     ?...Unable to id
   1df18:	69746e65 63207966 63617061 2e797469     entify capacity.
   1df28:	20734920 73696874 69686320 666f2070      Is this chip of
   1df38:	69636966 796c6c61 70757320 74726f70     ficially support
   1df48:	203f6465 6e206649 202c746f 61656c70     ed? If not, plea
   1df58:	64206573 6e696665 20612065 50414360     se define a `CAP
   1df68:	54494341 63206059 74736e6f 20746e61     ACITY` constant 
   1df78:	20646e61 6c636e69 20656475 69207469     and include it i
   1df88:	6c66206e 2e687361 69676562 4143286e     n flash.begin(CA
   1df98:	49434150 2e295954 00000000 70696843     PACITY).....Chip
   1dfa8:	20736920 79737562 0000002e 656b614d      is busy....Make
   1dfb8:	72757320 6c612065 6970206c 6820736e      sure all pins h
   1dfc8:	20657661 6e656562 6e6f6320 7463656e     ave been connect
   1dfd8:	70206465 65706f72 00796c72 65676150     ed properly.Page
   1dfe8:	65766f20 6f6c6672 61682077 65622073      overflow has be
   1dff8:	64206e65 62617369 2064656c 20646e61     en disabled and 
   1e008:	20656874 72646461 20737365 6c6c6163     the address call
   1e018:	65206465 65656378 74207364 6d206568     ed exceeds the m
   1e028:	726f6d65 00000079 62616e55 7420656c     emory...Unable t
   1e038:	6e45206f 656c6261 69725720 676e6974     o Enable Writing
   1e048:	206f7420 70696863 0000002e 61656c50      to chip....Plea
   1e058:	6d206573 20656b61 65727573 65687420     se make sure the
   1e068:	4c4f4820 20262044 54495257 4f525045      HOLD & WRITEPRO
   1e078:	54434554 6e697020 72612073 75702065     TECT pins are pu
   1e088:	64656c6c 20707520 56206f74 00004343     lled up to VCC..
   1e098:	73696854 63657320 20726f74 65726c61     This sector alre
   1e0a8:	20796461 746e6f63 736e6961 74616420     ady contains dat
   1e0b8:	00002e61 61656c50 6d206573 20656b61     a...Please make 
   1e0c8:	65727573 65687420 63657320 73726f74     sure the sectors
   1e0d8:	69656220 7720676e 74746972 74206e65      being written t
   1e0e8:	7261206f 72652065 64657361 0000002e     o are erased....
   1e0f8:	20756f59 20657261 6e6e7572 20676e69     You are running 
   1e108:	20776f6c 53206e6f 2e4d4152 656c5020     low on SRAM. Ple
   1e118:	20657361 6974706f 6573696d 756f7920     ase optimise you
   1e128:	72702072 6172676f 6f66206d 65622072     r program for be
   1e138:	72657474 4d415220 61737520 00006567     tter RAM usage..
   1e148:	73696854 6e756620 6f697463 7369206e     This function is
   1e158:	746f6e20 70757320 74726f70 62206465      not supported b
   1e168:	68742079 6c662065 20687361 6f6d656d     y the flash memo
   1e178:	68207972 77647261 2e657261 00000000     ry hardware.....
   1e188:	62616e55 7420656c 7573206f 6e657073     Unable to suspen
   1e198:	65722f64 656d7573 65706f20 69746172     d/resume operati
   1e1a8:	002e6e6f 74697257 75462065 6974636e     on..Write Functi
   1e1b8:	68206e6f 66207361 656c6961 72652064     on has failed er
   1e1c8:	63726f72 6b636568 0000002e 62616e55     rorcheck....Unab
   1e1d8:	7420656c 6e65206f 656c6261 622d3420     le to enable 4-b
   1e1e8:	20657479 72646461 69737365 002e676e     yte addressing..
   1e1f8:	62616e55 7420656c 6964206f 6c626173     Unable to disabl
   1e208:	2d342065 65747962 64646120 73736572     e 4-byte address
   1e218:	2e676e69 00000000 20656854 70696863     ing.....The chip
   1e228:	20736920 72727563 6c746e65 6f702079      is currently po
   1e238:	65726577 6f642064 002e6e77 20656854     wered down..The 
   1e248:	73616c46 68632068 64207069 2073656f     Flash chip does 
   1e258:	20746f6e 70707573 2074726f 50444653     not support SFDP
   1e268:	0000002e 62616e55 7420656c 6572206f     ....Unable to re
   1e278:	45206461 65736172 72615020 74656d61     ad Erase Paramet
   1e288:	20737265 6d6f7266 69686320 52202e70     ers from chip. R
   1e298:	72657665 676e6974 206f7420 7262696c     everting to libr
   1e2a8:	20797261 61666564 73746c75 0000002e     ary defaults....
   1e2b8:	62616e55 7420656c 6572206f 65206461     Unable to read e
   1e2c8:	65736172 6d697420 66207365 206d6f72     rase times from 
   1e2d8:	73616c66 656d2068 79726f6d 6552202e     flash memory. Re
   1e2e8:	74726576 20676e69 6c206f74 61726269     verting to libra
   1e2f8:	64207972 75616665 2e73746c 00000000     ry defaults.....
   1e308:	62616e55 7420656c 6572206f 70206461     Unable to read p
   1e318:	72676f72 74206d61 73656d69 6f726620     rogram times fro
   1e328:	6c66206d 20687361 6f6d656d 202e7972     m flash memory. 
   1e338:	65766552 6e697472 6f742067 62696c20     Reverting to lib
   1e348:	79726172 66656420 746c7561 00002e73     rary defaults...
   1e358:	43206f4e 20706968 656c6553 70207463     No Chip Select p
   1e368:	64206e69 6e696665 69206465 6874206e     in defined in th
   1e378:	75632065 6d6f7473 49505320 72724120     e custom SPI Arr
   1e388:	002e7961 6e6b6e55 206e776f 6f727265     ay..Unknown erro
   1e398:	00000072 6f727245 6f632072 203a6564     r...Error code: 
   1e3a8:	00007830 00000030 74206649 20736968     0x..0...If this 
   1e3b8:	73656f64 746f6e20 6c656820 65722070     does not help re
   1e3c8:	766c6f73 6c632f65 66697261 68742079     solve/clarify th
   1e3d8:	69207369 65757373 0000202c 61656c70     is issue, ..plea
   1e3e8:	72206573 65736961 206e6120 75737369     se raise an issu
   1e3f8:	74612065 74746820 2f2f3a70 2e777777     e at http://www.
   1e408:	2d327368 69676e65 7265656e 2e676e69     hs2-engineering.
   1e418:	692f6564 7865646e 7068702e 6e6f632f     de/index.php/con
   1e428:	74636174 6d74682e 6977206c 74206874     tact.html with t
   1e438:	64206568 69617465 6f20736c 68772066     he details of wh
   1e448:	79207461 2072756f 65726577 696f6420     at your were doi
   1e458:	7720676e 206e6568 73696874 72726520     ng when this err
   1e468:	6f20726f 72756363 00646572              or occurred.

0001e474 <maxEventCount>:
   1e474:	01000010                                         ..

0001e476 <sizeOfEventQueue>:
   1e476:	ffff0100                                         ..

0001e478 <forever>:
   1e478:	7fffffff 2e2f2e2e 2e2e2f2e 554c412f     ....../../../ALU
   1e488:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
   1e498:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
   1e4a8:	6f697067 7361625f 00682e65              gpio_base.h.

0001e4b4 <_ZTV14Calendar_Class>:
	...
   1e4bc:	00014a31 00014b21                       1J..!K..

0001e4c4 <_ZTV17DateTimeLog_Class>:
	...
   1e4cc:	00012267 00012267                       g"..g"..

0001e4d4 <_ZTV9CDC_Class>:
	...
   1e4dc:	00015751 00015821 000153ad 00015719     QW..!X...S...W..
   1e4ec:	000158b9 000156dd 000155c1 00015611     .X...V...U...V..
   1e4fc:	00015739 00015789                       9W...W..

0001e504 <_ZTV6Stream>:
	...
   1e50c:	00012267 0001594d 000153ad 000153c1     g"..MY...S...S..
   1e51c:	00012267 00012267 00012267 2e257830     g"..g"..g"..0x%.
   1e52c:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   1e53c:	0066766f                                ovf.

0001e540 <_ZTV5Print>:
	...
   1e548:	00012267 0001594d 000153ad 000153c1     g"..MY...S...S..
   1e558:	492f2e2e 492f4332 4f5f4332 63656a62     ../I2C/I2C_Objec
   1e568:	73694c74 70632e74 00000070 682f2e2e     tList.cpp...../h
   1e578:	732f6c61 682f6372 695f6c61 00632e6f     al/src/hal_io.c.
   1e588:	00776f70 00000000                       pow.....

0001e590 <TWO52>:
   1e590:	00000000 43300000 00000000 c3300000     ......0C......0.

0001e5a0 <_global_impure_ptr>:
   1e5a0:	200001e0                                ... 

0001e5a4 <__month_lengths>:
   1e5a4:	0000001f 0000001c 0000001f 0000001e     ................
   1e5b4:	0000001f 0000001e 0000001f 0000001f     ................
   1e5c4:	0000001e 0000001f 0000001e 0000001f     ................
   1e5d4:	0000001f 0000001d 0000001f 0000001e     ................
   1e5e4:	0000001f 0000001e 0000001f 0000001f     ................
   1e5f4:	0000001e 0000001f 0000001e 0000001f     ................
   1e604:	00005a54 00544d47 5b303125 392d305e     TZ..GMT.%10[^0-9
   1e614:	5d2d2b2c 00006e25 25756825 68253a6e     ,+-]%n..%hu%n:%h
   1e624:	3a6e2575 25756825 0000006e 7568254d     u%n:%hu%n...M%hu
   1e634:	252e6e25 6e257568 7568252e 00006e25     %n.%hu%n.%hu%n..
   1e644:	7568252f 253a6e25 6e257568 7568253a     /%hu%n:%hu%n:%hu
   1e654:	00006e25 73332e25 332e2520 64332573     %n..%.3s %.3s%3d
   1e664:	322e2520 2e253a64 253a6432 2064322e      %.2d:%.2d:%.2d 
   1e674:	000a6425                                %d..

0001e678 <day_name.4727>:
   1e678:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   1e688:	61536972 00000074                       riSat...

0001e690 <mon_name.4728>:
   1e690:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   1e6a0:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   1e6b0:	63654476 33323130 37363534 42413938     vDec0123456789AB
   1e6c0:	46454443 00000000 33323130 37363534     CDEF....01234567
   1e6d0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   1e6e0:	0000296c                                l)..

0001e6e4 <blanks.7203>:
   1e6e4:	20202020 20202020 20202020 20202020                     

0001e6f4 <zeroes.7204>:
   1e6f4:	30303030 30303030 30303030 30303030     0000000000000000

0001e704 <basefix.6796>:
   1e704:	0001000a 00030002 00050004 00070006     ................
   1e714:	00090008 000b000a 000d000c 000f000e     ................
   1e724:	00000010 00000043 49534f50 00000058     ....C...POSIX...
   1e734:	0000002e                                ....

0001e738 <_ctype_>:
   1e738:	20202000 20202020 28282020 20282828     .         ((((( 
   1e748:	20202020 20202020 20202020 20202020                     
   1e758:	10108820 10101010 10101010 10101010      ...............
   1e768:	04040410 04040404 10040404 10101010     ................
   1e778:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1e788:	01010101 01010101 01010101 10101010     ................
   1e798:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1e7a8:	02020202 02020202 02020202 10101010     ................
   1e7b8:	00000020 00000000 00000000 00000000      ...............
	...

0001e83c <_init>:
   1e83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e83e:	bf00      	nop
   1e840:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1e842:	bc08      	pop	{r3}
   1e844:	469e      	mov	lr, r3
   1e846:	4770      	bx	lr

0001e848 <__init_array_start>:
   1e848:	000193f5 	.word	0x000193f5

0001e84c <__frame_dummy_init_array_entry>:
   1e84c:	00000289 00000799 000008d5 00000971     ............q...
   1e85c:	00000fb9 00001271 000015f5 00001c15     ....q...........
   1e86c:	00002039 0000319d 0001198d 00012545     9 ...1......E%..
   1e87c:	00012911 000131b9 00013389 000135d5     .)...1...3...5..
   1e88c:	00013d51 00014621 00014d6d 00015375     Q=..!F..mM..uS..
   1e89c:	00015939 00016191 000166f1              9Y...a...f..

0001e8a8 <_fini>:
   1e8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e8aa:	bf00      	nop
   1e8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1e8ae:	bc08      	pop	{r3}
   1e8b0:	469e      	mov	lr, r3
   1e8b2:	4770      	bx	lr

0001e8b4 <__fini_array_start>:
   1e8b4:	00000265 	.word	0x00000265
