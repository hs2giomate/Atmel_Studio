
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00021eb0  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00021eb0  00021eb0  00031eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c44  20000000  00021eb8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00040c44  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00040c44  2**0
                  CONTENTS
  5 .bss          00009fe4  20000c48  00022b00  00040c44  2**3
                  ALLOC
  6 .stack        00010004  2000ac2c  0002cae4  00040c44  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00040c44  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00040c72  2**0
                  CONTENTS, READONLY
  9 .debug_info   000fbcfa  00000000  00000000  00040ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000133b8  00000000  00000000  0013c9c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00029cb1  00000000  00000000  0014fd7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004b10  00000000  00000000  00179a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004590  00000000  00000000  0017e53e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0006632f  00000000  00000000  00182ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00068cdf  00000000  00000000  001e8dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0014ed31  00000000  00000000  00251adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00014bd8  00000000  00000000  003a0810  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 ac 01 20 e1 15 00 00 65 16 00 00 65 16 00 00     0.. ....e...e...
      10:	65 16 00 00 65 16 00 00 65 16 00 00 00 00 00 00     e...e...e.......
	...
      2c:	65 16 00 00 65 16 00 00 00 00 00 00 65 16 00 00     e...e.......e...
      3c:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
      4c:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
      5c:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
      6c:	c1 a8 00 00 95 92 00 00 65 16 00 00 65 16 00 00     ........e...e...
      7c:	65 16 00 00 a5 92 00 00 b5 92 00 00 c5 92 00 00     e...............
      8c:	d5 92 00 00 e5 92 00 00 f5 92 00 00 65 16 00 00     ............e...
      9c:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
      ac:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
      bc:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
      cc:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
      dc:	65 16 00 00 65 16 00 00 65 16 00 00 00 00 00 00     e...e...e.......
	...
      f4:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
     104:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
     114:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
     124:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
     134:	65 16 00 00 01 c1 00 00 1d c1 00 00 39 c1 00 00     e...........9...
     144:	55 c1 00 00 71 c1 00 00 8d c1 00 00 a9 c1 00 00     U...q...........
     154:	c5 c1 00 00 65 16 00 00 65 16 00 00 65 16 00 00     ....e...e...e...
     164:	65 16 00 00 e1 c1 00 00 fd c1 00 00 19 c2 00 00     e...............
     174:	35 c2 00 00 65 16 00 00 a5 84 00 00 99 05 01 00     5...e...........
     184:	a9 05 01 00 b9 05 01 00 c9 05 01 00 65 16 00 00     ............e...
     194:	b5 cf 00 00 65 16 00 00 65 16 00 00 65 16 00 00     ....e...e...e...
     1a4:	65 16 00 00 65 16 00 00 65 16 00 00 d1 cf 00 00     e...e...e.......
     1b4:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
     1c4:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
     1d4:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
     1e4:	65 16 00 00 65 16 00 00 95 dc 00 00 b1 dc 00 00     e...e...........
     1f4:	cd dc 00 00 65 16 00 00 e9 dc 00 00 05 dd 00 00     ....e...........
     204:	21 dd 00 00 65 16 00 00 65 16 00 00 65 16 00 00     !...e...e...e...
     214:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
     224:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
     234:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
     244:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
     254:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000c48 	.word	0x20000c48
     280:	00000000 	.word	0x00000000
     284:	00021eb8 	.word	0x00021eb8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00021eb8 	.word	0x00021eb8
     2c4:	20000c4c 	.word	0x20000c4c
     2c8:	00021eb8 	.word	0x00021eb8
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
     2d8:	6039      	str	r1, [r7, #0]
	{
	data = v;
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	683a      	ldr	r2, [r7, #0]
     2de:	601a      	str	r2, [r3, #0]
	}
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	4618      	mov	r0, r3
     2e4:	370c      	adds	r7, #12
     2e6:	46bd      	mov	sp, r7
     2e8:	bc80      	pop	{r7}
     2ea:	4770      	bx	lr

000002ec <_ZN5eventC1Ev>:
	private:
		
		
	};

inline event::event()
     2ec:	b580      	push	{r7, lr}
     2ee:	b082      	sub	sp, #8
     2f0:	af00      	add	r7, sp, #0
     2f2:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     2fa:	801a      	strh	r2, [r3, #0]
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
     302:	805a      	strh	r2, [r3, #2]
     304:	687b      	ldr	r3, [r7, #4]
     306:	2200      	movs	r2, #0
     308:	605a      	str	r2, [r3, #4]
     30a:	687b      	ldr	r3, [r7, #4]
     30c:	3308      	adds	r3, #8
     30e:	2100      	movs	r1, #0
     310:	4618      	mov	r0, r3
     312:	4b05      	ldr	r3, [pc, #20]	; (328 <_ZN5eventC1Ev+0x3c>)
     314:	4798      	blx	r3
     316:	687b      	ldr	r3, [r7, #4]
     318:	2200      	movs	r2, #0
     31a:	60da      	str	r2, [r3, #12]
	{
		
	}
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	4618      	mov	r0, r3
     320:	3708      	adds	r7, #8
     322:	46bd      	mov	sp, r7
     324:	bd80      	pop	{r7, pc}
     326:	bf00      	nop
     328:	000002d1 	.word	0x000002d1

0000032c <_ZL11ARINCTimeUpPK10timer_task>:
ALU_Class	*ptrALUClass;

//static TaskHandler_Class*	taskList(NULL);

static void CheckPeriodicTask(void);
static void ARINCTimeUp(const struct timer_task *const timer_task){
     32c:	b480      	push	{r7}
     32e:	b083      	sub	sp, #12
     330:	af00      	add	r7, sp, #0
     332:	6078      	str	r0, [r7, #4]
	ptrALUClass->arincTXTimeUP=true;
     334:	4b04      	ldr	r3, [pc, #16]	; (348 <_ZL11ARINCTimeUpPK10timer_task+0x1c>)
     336:	681b      	ldr	r3, [r3, #0]
     338:	2201      	movs	r2, #1
     33a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
     33e:	bf00      	nop
     340:	370c      	adds	r7, #12
     342:	46bd      	mov	sp, r7
     344:	bc80      	pop	{r7}
     346:	4770      	bx	lr
     348:	20000ce4 	.word	0x20000ce4

0000034c <_ZN9ALU_ClassC1Ev>:


// default constructor
ALU_Class::ALU_Class()
     34c:	b580      	push	{r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
     352:	6078      	str	r0, [r7, #4]
     354:	687b      	ldr	r3, [r7, #4]
     356:	4618      	mov	r0, r3
     358:	4b04      	ldr	r3, [pc, #16]	; (36c <_ZN9ALU_ClassC1Ev+0x20>)
     35a:	4798      	blx	r3
{
	
	//taskList=(list_descriptor*)taskStorage;
	ptrALUClass=this;
     35c:	4a04      	ldr	r2, [pc, #16]	; (370 <_ZN9ALU_ClassC1Ev+0x24>)
     35e:	687b      	ldr	r3, [r7, #4]
     360:	6013      	str	r3, [r2, #0]
} //ALU_Class
     362:	687b      	ldr	r3, [r7, #4]
     364:	4618      	mov	r0, r3
     366:	3708      	adds	r7, #8
     368:	46bd      	mov	sp, r7
     36a:	bd80      	pop	{r7, pc}
     36c:	00003e95 	.word	0x00003e95
     370:	20000ce4 	.word	0x20000ce4

00000374 <_ZN9ALU_ClassD1Ev>:

// default destructor
ALU_Class::~ALU_Class()
     374:	b580      	push	{r7, lr}
     376:	b082      	sub	sp, #8
     378:	af00      	add	r7, sp, #0
     37a:	6078      	str	r0, [r7, #4]
     37c:	687b      	ldr	r3, [r7, #4]
     37e:	4618      	mov	r0, r3
     380:	4b03      	ldr	r3, [pc, #12]	; (390 <_ZN9ALU_ClassD1Ev+0x1c>)
     382:	4798      	blx	r3
{
} //~ALU_Class
     384:	687b      	ldr	r3, [r7, #4]
     386:	4618      	mov	r0, r3
     388:	3708      	adds	r7, #8
     38a:	46bd      	mov	sp, r7
     38c:	bd80      	pop	{r7, pc}
     38e:	bf00      	nop
     390:	00003eb5 	.word	0x00003eb5

00000394 <_ZN9ALU_Class4InitEv>:

uint32_t	ALU_Class::Init(void){
     394:	b580      	push	{r7, lr}
     396:	b08a      	sub	sp, #40	; 0x28
     398:	af00      	add	r7, sp, #0
     39a:	6078      	str	r0, [r7, #4]
	uint32_t	s;
	event	e;
     39c:	f107 030c 	add.w	r3, r7, #12
     3a0:	4618      	mov	r0, r3
     3a2:	4b37      	ldr	r3, [pc, #220]	; (480 <_ZN9ALU_Class4InitEv+0xec>)
     3a4:	4798      	blx	r3
	ptrPbit=&pBit;
     3a6:	687b      	ldr	r3, [r7, #4]
     3a8:	4a36      	ldr	r2, [pc, #216]	; (484 <_ZN9ALU_Class4InitEv+0xf0>)
     3aa:	621a      	str	r2, [r3, #32]
	StartLivePulse();
     3ac:	6878      	ldr	r0, [r7, #4]
     3ae:	4b36      	ldr	r3, [pc, #216]	; (488 <_ZN9ALU_Class4InitEv+0xf4>)
     3b0:	4798      	blx	r3
	if (hvac.Init())
     3b2:	4836      	ldr	r0, [pc, #216]	; (48c <_ZN9ALU_Class4InitEv+0xf8>)
     3b4:	4b36      	ldr	r3, [pc, #216]	; (490 <_ZN9ALU_Class4InitEv+0xfc>)
     3b6:	4798      	blx	r3
     3b8:	4603      	mov	r3, r0
     3ba:	2b00      	cmp	r3, #0
     3bc:	d05b      	beq.n	476 <_ZN9ALU_Class4InitEv+0xe2>
	{
		cBit.isOK=true;
     3be:	4b35      	ldr	r3, [pc, #212]	; (494 <_ZN9ALU_Class4InitEv+0x100>)
     3c0:	2201      	movs	r2, #1
     3c2:	701a      	strb	r2, [r3, #0]
		hvac.SetCRCConfigData();
     3c4:	4831      	ldr	r0, [pc, #196]	; (48c <_ZN9ALU_Class4InitEv+0xf8>)
     3c6:	4b34      	ldr	r3, [pc, #208]	; (498 <_ZN9ALU_Class4InitEv+0x104>)
     3c8:	4798      	blx	r3
		SetInitialConfiguration(configuration);
     3ca:	687b      	ldr	r3, [r7, #4]
     3cc:	332c      	adds	r3, #44	; 0x2c
     3ce:	4619      	mov	r1, r3
     3d0:	6878      	ldr	r0, [r7, #4]
     3d2:	4b32      	ldr	r3, [pc, #200]	; (49c <_ZN9ALU_Class4InitEv+0x108>)
     3d4:	4798      	blx	r3
		memory.WriteDefaultState();
     3d6:	4832      	ldr	r0, [pc, #200]	; (4a0 <_ZN9ALU_Class4InitEv+0x10c>)
     3d8:	4b32      	ldr	r3, [pc, #200]	; (4a4 <_ZN9ALU_Class4InitEv+0x110>)
     3da:	4798      	blx	r3
		hvac.SetInitialState();
     3dc:	482b      	ldr	r0, [pc, #172]	; (48c <_ZN9ALU_Class4InitEv+0xf8>)
     3de:	4b32      	ldr	r3, [pc, #200]	; (4a8 <_ZN9ALU_Class4InitEv+0x114>)
     3e0:	4798      	blx	r3
		uhr.Init();
     3e2:	4832      	ldr	r0, [pc, #200]	; (4ac <_ZN9ALU_Class4InitEv+0x118>)
     3e4:	4b32      	ldr	r3, [pc, #200]	; (4b0 <_ZN9ALU_Class4InitEv+0x11c>)
     3e6:	4798      	blx	r3
		hvac.saveCurrentState();
     3e8:	4828      	ldr	r0, [pc, #160]	; (48c <_ZN9ALU_Class4InitEv+0xf8>)
     3ea:	4b32      	ldr	r3, [pc, #200]	; (4b4 <_ZN9ALU_Class4InitEv+0x120>)
     3ec:	4798      	blx	r3
		listener.Init();
     3ee:	4832      	ldr	r0, [pc, #200]	; (4b8 <_ZN9ALU_Class4InitEv+0x124>)
     3f0:	4b32      	ldr	r3, [pc, #200]	; (4bc <_ZN9ALU_Class4InitEv+0x128>)
     3f2:	4798      	blx	r3
		
		if (!(interfaces.Init()))
     3f4:	4832      	ldr	r0, [pc, #200]	; (4c0 <_ZN9ALU_Class4InitEv+0x12c>)
     3f6:	4b33      	ldr	r3, [pc, #204]	; (4c4 <_ZN9ALU_Class4InitEv+0x130>)
     3f8:	4798      	blx	r3
     3fa:	4603      	mov	r3, r0
     3fc:	f083 0301 	eor.w	r3, r3, #1
     400:	b2db      	uxtb	r3, r3
     402:	2b00      	cmp	r3, #0
     404:	d00e      	beq.n	424 <_ZN9ALU_Class4InitEv+0x90>
		{
			NotifyError(kARINCINnterfaceError,s);
     406:	f107 031c 	add.w	r3, r7, #28
     40a:	6a79      	ldr	r1, [r7, #36]	; 0x24
     40c:	4618      	mov	r0, r3
     40e:	4b2e      	ldr	r3, [pc, #184]	; (4c8 <_ZN9ALU_Class4InitEv+0x134>)
     410:	4798      	blx	r3
     412:	f107 031c 	add.w	r3, r7, #28
     416:	461a      	mov	r2, r3
     418:	2100      	movs	r1, #0
     41a:	6878      	ldr	r0, [r7, #4]
     41c:	4b2b      	ldr	r3, [pc, #172]	; (4cc <_ZN9ALU_Class4InitEv+0x138>)
     41e:	4798      	blx	r3
			return s;
     420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     422:	e029      	b.n	478 <_ZN9ALU_Class4InitEv+0xe4>
		}
		else
		{
			arincTimer.Start_periodic_task(FUNC_PTR(ARINCTimeUp),50);
     424:	2232      	movs	r2, #50	; 0x32
     426:	492a      	ldr	r1, [pc, #168]	; (4d0 <_ZN9ALU_Class4InitEv+0x13c>)
     428:	482a      	ldr	r0, [pc, #168]	; (4d4 <_ZN9ALU_Class4InitEv+0x140>)
     42a:	4b2b      	ldr	r3, [pc, #172]	; (4d8 <_ZN9ALU_Class4InitEv+0x144>)
     42c:	4798      	blx	r3
			
			s=pBit.CheckCurrentStatus(status);
     42e:	687b      	ldr	r3, [r7, #4]
     430:	f503 73a4 	add.w	r3, r3, #328	; 0x148
     434:	4619      	mov	r1, r3
     436:	4813      	ldr	r0, [pc, #76]	; (484 <_ZN9ALU_Class4InitEv+0xf0>)
     438:	4b28      	ldr	r3, [pc, #160]	; (4dc <_ZN9ALU_Class4InitEv+0x148>)
     43a:	4798      	blx	r3
     43c:	6278      	str	r0, [r7, #36]	; 0x24
			if (s>0)
     43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     440:	2b00      	cmp	r3, #0
     442:	d00e      	beq.n	462 <_ZN9ALU_Class4InitEv+0xce>
			{
				NotifyError(kpBITError,s);
     444:	f107 0320 	add.w	r3, r7, #32
     448:	6a79      	ldr	r1, [r7, #36]	; 0x24
     44a:	4618      	mov	r0, r3
     44c:	4b1e      	ldr	r3, [pc, #120]	; (4c8 <_ZN9ALU_Class4InitEv+0x134>)
     44e:	4798      	blx	r3
     450:	f107 0320 	add.w	r3, r7, #32
     454:	461a      	mov	r2, r3
     456:	2101      	movs	r1, #1
     458:	6878      	ldr	r0, [r7, #4]
     45a:	4b1c      	ldr	r3, [pc, #112]	; (4cc <_ZN9ALU_Class4InitEv+0x138>)
     45c:	4798      	blx	r3
				return s;
     45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     460:	e00a      	b.n	478 <_ZN9ALU_Class4InitEv+0xe4>
			}
			else
			{
				InitTaskArray();
     462:	687b      	ldr	r3, [r7, #4]
     464:	4618      	mov	r0, r3
     466:	4b1e      	ldr	r3, [pc, #120]	; (4e0 <_ZN9ALU_Class4InitEv+0x14c>)
     468:	4798      	blx	r3
				PrepareNewEvent(kALUEventSimpleStart);
     46a:	2200      	movs	r2, #0
     46c:	f44f 7182 	mov.w	r1, #260	; 0x104
     470:	6878      	ldr	r0, [r7, #4]
     472:	4b1c      	ldr	r3, [pc, #112]	; (4e4 <_ZN9ALU_Class4InitEv+0x150>)
     474:	4798      	blx	r3
	//while(1);

	

	  
	return s;
     476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     478:	4618      	mov	r0, r3
     47a:	3728      	adds	r7, #40	; 0x28
     47c:	46bd      	mov	sp, r7
     47e:	bd80      	pop	{r7, pc}
     480:	000002ed 	.word	0x000002ed
     484:	20000c64 	.word	0x20000c64
     488:	000006d5 	.word	0x000006d5
     48c:	200083d0 	.word	0x200083d0
     490:	00002e5d 	.word	0x00002e5d
     494:	20000c78 	.word	0x20000c78
     498:	00003bfd 	.word	0x00003bfd
     49c:	00000721 	.word	0x00000721
     4a0:	20002f10 	.word	0x20002f10
     4a4:	00002981 	.word	0x00002981
     4a8:	00000fb5 	.word	0x00000fb5
     4ac:	200014b0 	.word	0x200014b0
     4b0:	00001539 	.word	0x00001539
     4b4:	00003a99 	.word	0x00003a99
     4b8:	20009ca4 	.word	0x20009ca4
     4bc:	00014a2d 	.word	0x00014a2d
     4c0:	20001714 	.word	0x20001714
     4c4:	00001b89 	.word	0x00001b89
     4c8:	000002d1 	.word	0x000002d1
     4cc:	00000879 	.word	0x00000879
     4d0:	0000032d 	.word	0x0000032d
     4d4:	2000a4d8 	.word	0x2000a4d8
     4d8:	000174bd 	.word	0x000174bd
     4dc:	00002b59 	.word	0x00002b59
     4e0:	00003ec9 	.word	0x00003ec9
     4e4:	000008e1 	.word	0x000008e1

000004e8 <_ZN9ALU_Class13RunControllerEv>:

uint32_t	ALU_Class::RunController(void){
     4e8:	b590      	push	{r4, r7, lr}
     4ea:	b089      	sub	sp, #36	; 0x24
     4ec:	af02      	add	r7, sp, #8
     4ee:	6078      	str	r0, [r7, #4]
	event e;
     4f0:	f107 0308 	add.w	r3, r7, #8
     4f4:	4618      	mov	r0, r3
     4f6:	4b22      	ldr	r3, [pc, #136]	; (580 <_ZN9ALU_Class13RunControllerEv+0x98>)
     4f8:	4798      	blx	r3
	
	
	   while (pBit)
     4fa:	4822      	ldr	r0, [pc, #136]	; (584 <_ZN9ALU_Class13RunControllerEv+0x9c>)
     4fc:	4b22      	ldr	r3, [pc, #136]	; (588 <_ZN9ALU_Class13RunControllerEv+0xa0>)
     4fe:	4798      	blx	r3
     500:	4603      	mov	r3, r0
     502:	2b00      	cmp	r3, #0
     504:	d036      	beq.n	574 <_ZN9ALU_Class13RunControllerEv+0x8c>
	   {
		   listener.eventHandler=&ALU_Class::CheckPeriodicTask;
     506:	4b21      	ldr	r3, [pc, #132]	; (58c <_ZN9ALU_Class13RunControllerEv+0xa4>)
     508:	4a21      	ldr	r2, [pc, #132]	; (590 <_ZN9ALU_Class13RunControllerEv+0xa8>)
     50a:	615a      	str	r2, [r3, #20]
		   while (!arincTXTimeUP)
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
     512:	b2db      	uxtb	r3, r3
     514:	f083 0301 	eor.w	r3, r3, #1
     518:	b2db      	uxtb	r3, r3
     51a:	2b00      	cmp	r3, #0
     51c:	d022      	beq.n	564 <_ZN9ALU_Class13RunControllerEv+0x7c>
		   	{
				   if (listener.WaitForEvent(e, kALUEventClass, kALUControllerEvent,1))
     51e:	f107 0108 	add.w	r1, r7, #8
     522:	2301      	movs	r3, #1
     524:	9300      	str	r3, [sp, #0]
     526:	2302      	movs	r3, #2
     528:	f44f 6280 	mov.w	r2, #1024	; 0x400
     52c:	4817      	ldr	r0, [pc, #92]	; (58c <_ZN9ALU_Class13RunControllerEv+0xa4>)
     52e:	4c19      	ldr	r4, [pc, #100]	; (594 <_ZN9ALU_Class13RunControllerEv+0xac>)
     530:	47a0      	blx	r4
     532:	4603      	mov	r3, r0
     534:	2b00      	cmp	r3, #0
     536:	d006      	beq.n	546 <_ZN9ALU_Class13RunControllerEv+0x5e>
				   {
					   HandleControllerEvent(e);
     538:	f107 0308 	add.w	r3, r7, #8
     53c:	4619      	mov	r1, r3
     53e:	6878      	ldr	r0, [r7, #4]
     540:	4b15      	ldr	r3, [pc, #84]	; (598 <_ZN9ALU_Class13RunControllerEv+0xb0>)
     542:	4798      	blx	r3
     544:	e7e2      	b.n	50c <_ZN9ALU_Class13RunControllerEv+0x24>
					   
				   }else if (listener.WaitForEvent(e, kHVACEventClass, kHVACEventDoPendingTasks,1))
     546:	f107 0108 	add.w	r1, r7, #8
     54a:	2301      	movs	r3, #1
     54c:	9300      	str	r3, [sp, #0]
     54e:	2303      	movs	r3, #3
     550:	f44f 7200 	mov.w	r2, #512	; 0x200
     554:	480d      	ldr	r0, [pc, #52]	; (58c <_ZN9ALU_Class13RunControllerEv+0xa4>)
     556:	4c0f      	ldr	r4, [pc, #60]	; (594 <_ZN9ALU_Class13RunControllerEv+0xac>)
     558:	47a0      	blx	r4
     55a:	4603      	mov	r3, r0
     55c:	2b00      	cmp	r3, #0
     55e:	d100      	bne.n	562 <_ZN9ALU_Class13RunControllerEv+0x7a>
		   while (!arincTXTimeUP)
     560:	e7d4      	b.n	50c <_ZN9ALU_Class13RunControllerEv+0x24>
				   {
					break;
     562:	bf00      	nop
				   }
			 }
			//arinc.TrasmitSingleLabel();
			ExecutePendingTask();
     564:	6878      	ldr	r0, [r7, #4]
     566:	4b0d      	ldr	r3, [pc, #52]	; (59c <_ZN9ALU_Class13RunControllerEv+0xb4>)
     568:	4798      	blx	r3
			arincTXTimeUP=false;
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	2200      	movs	r2, #0
     56e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	   while (pBit)
     572:	e7c2      	b.n	4fa <_ZN9ALU_Class13RunControllerEv+0x12>
// 			
// 		}
// 		interfaces.CheckCommunication();
// 	}
	
}
     574:	bf00      	nop
     576:	4618      	mov	r0, r3
     578:	371c      	adds	r7, #28
     57a:	46bd      	mov	sp, r7
     57c:	bd90      	pop	{r4, r7, pc}
     57e:	bf00      	nop
     580:	000002ed 	.word	0x000002ed
     584:	20000c64 	.word	0x20000c64
     588:	00002b3f 	.word	0x00002b3f
     58c:	20009ca4 	.word	0x20009ca4
     590:	00000ab5 	.word	0x00000ab5
     594:	00014b0d 	.word	0x00014b0d
     598:	000005a1 	.word	0x000005a1
     59c:	0000092d 	.word	0x0000092d

000005a0 <_ZN9ALU_Class21HandleControllerEventER5event>:



void ALU_Class::HandleControllerEvent(event& e)
{
     5a0:	b580      	push	{r7, lr}
     5a2:	b086      	sub	sp, #24
     5a4:	af00      	add	r7, sp, #0
     5a6:	6078      	str	r0, [r7, #4]
     5a8:	6039      	str	r1, [r7, #0]

	alu.callingTask = alu.currentTask;
     5aa:	4b28      	ldr	r3, [pc, #160]	; (64c <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     5ac:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
     5b0:	4a26      	ldr	r2, [pc, #152]	; (64c <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     5b2:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	alu.currentTask = e.data.wordData[0];
     5b6:	683b      	ldr	r3, [r7, #0]
     5b8:	891b      	ldrh	r3, [r3, #8]
     5ba:	461a      	mov	r2, r3
     5bc:	4b23      	ldr	r3, [pc, #140]	; (64c <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     5be:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	alu.taskEntryTime= hvacTimer.Get_ticks();
     5c2:	4823      	ldr	r0, [pc, #140]	; (650 <_ZN9ALU_Class21HandleControllerEventER5event+0xb0>)
     5c4:	4b23      	ldr	r3, [pc, #140]	; (654 <_ZN9ALU_Class21HandleControllerEventER5event+0xb4>)
     5c6:	4798      	blx	r3
     5c8:	4602      	mov	r2, r0
     5ca:	4b20      	ldr	r3, [pc, #128]	; (64c <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     5cc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164




	switch (alu.currentTask)
     5d0:	4b1e      	ldr	r3, [pc, #120]	; (64c <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     5d2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
     5d6:	f240 1205 	movw	r2, #261	; 0x105
     5da:	4293      	cmp	r3, r2
     5dc:	d026      	beq.n	62c <_ZN9ALU_Class21HandleControllerEventER5event+0x8c>
     5de:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
     5e2:	d205      	bcs.n	5f0 <_ZN9ALU_Class21HandleControllerEventER5event+0x50>
     5e4:	2b03      	cmp	r3, #3
     5e6:	d01a      	beq.n	61e <_ZN9ALU_Class21HandleControllerEventER5event+0x7e>
     5e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
     5ec:	d008      	beq.n	600 <_ZN9ALU_Class21HandleControllerEventER5event+0x60>
     5ee:	e024      	b.n	63a <_ZN9ALU_Class21HandleControllerEventER5event+0x9a>
     5f0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
     5f4:	d00e      	beq.n	614 <_ZN9ALU_Class21HandleControllerEventER5event+0x74>
     5f6:	f240 1207 	movw	r2, #263	; 0x107
     5fa:	4293      	cmp	r3, r2
     5fc:	d005      	beq.n	60a <_ZN9ALU_Class21HandleControllerEventER5event+0x6a>
     5fe:	e01c      	b.n	63a <_ZN9ALU_Class21HandleControllerEventER5event+0x9a>
	{
		case kALUEventSimpleStart:
			hvac.Start(1);
     600:	2101      	movs	r1, #1
     602:	4815      	ldr	r0, [pc, #84]	; (658 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     604:	4b15      	ldr	r3, [pc, #84]	; (65c <_ZN9ALU_Class21HandleControllerEventER5event+0xbc>)
     606:	4798      	blx	r3
		break;
     608:	e01c      	b.n	644 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		case kALUEventSimpleResume:
			hvac.ControllerResume(1);
     60a:	2101      	movs	r1, #1
     60c:	4812      	ldr	r0, [pc, #72]	; (658 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     60e:	4b14      	ldr	r3, [pc, #80]	; (660 <_ZN9ALU_Class21HandleControllerEventER5event+0xc0>)
     610:	4798      	blx	r3
		break;
     612:	e017      	b.n	644 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		case kALUEventSimpleStop:
			hvac.Stop(0);
     614:	2100      	movs	r1, #0
     616:	4810      	ldr	r0, [pc, #64]	; (658 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     618:	4b12      	ldr	r3, [pc, #72]	; (664 <_ZN9ALU_Class21HandleControllerEventER5event+0xc4>)
     61a:	4798      	blx	r3
		break;
     61c:	e012      	b.n	644 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>
		case kALUTaskCheckCommunication:
			interfaces.CheckCommunication();
     61e:	f107 0308 	add.w	r3, r7, #8
     622:	4911      	ldr	r1, [pc, #68]	; (668 <_ZN9ALU_Class21HandleControllerEventER5event+0xc8>)
     624:	4618      	mov	r0, r3
     626:	4b11      	ldr	r3, [pc, #68]	; (66c <_ZN9ALU_Class21HandleControllerEventER5event+0xcc>)
     628:	4798      	blx	r3
		break;
     62a:	e00b      	b.n	644 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>
		case kALUEventCheckPheripherals:
			interfaces.CheckCommunication();
     62c:	f107 0310 	add.w	r3, r7, #16
     630:	490d      	ldr	r1, [pc, #52]	; (668 <_ZN9ALU_Class21HandleControllerEventER5event+0xc8>)
     632:	4618      	mov	r0, r3
     634:	4b0d      	ldr	r3, [pc, #52]	; (66c <_ZN9ALU_Class21HandleControllerEventER5event+0xcc>)
     636:	4798      	blx	r3
		break;
     638:	e004      	b.n	644 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		default:
			hvac.Stop(0);
     63a:	2100      	movs	r1, #0
     63c:	4806      	ldr	r0, [pc, #24]	; (658 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     63e:	4b09      	ldr	r3, [pc, #36]	; (664 <_ZN9ALU_Class21HandleControllerEventER5event+0xc4>)
     640:	4798      	blx	r3
		break;
     642:	bf00      	nop
	}
}
     644:	bf00      	nop
     646:	3718      	adds	r7, #24
     648:	46bd      	mov	sp, r7
     64a:	bd80      	pop	{r7, pc}
     64c:	20000ce8 	.word	0x20000ce8
     650:	2000a4a0 	.word	0x2000a4a0
     654:	00017589 	.word	0x00017589
     658:	200083d0 	.word	0x200083d0
     65c:	0000305d 	.word	0x0000305d
     660:	00002edd 	.word	0x00002edd
     664:	00003b2d 	.word	0x00003b2d
     668:	20001714 	.word	0x20001714
     66c:	00001c19 	.word	0x00001c19

00000670 <_ZN9ALU_Class15GetSelectedAMMCEv>:

uint8_t	ALU_Class::GetSelectedAMMC(void){
     670:	b580      	push	{r7, lr}
     672:	b082      	sub	sp, #8
     674:	af00      	add	r7, sp, #0
     676:	6078      	str	r0, [r7, #4]
	activeLine=arinc.GetActiveLine();
     678:	4811      	ldr	r0, [pc, #68]	; (6c0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x50>)
     67a:	4b12      	ldr	r3, [pc, #72]	; (6c4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x54>)
     67c:	4798      	blx	r3
     67e:	4603      	mov	r3, r0
     680:	461a      	mov	r2, r3
     682:	687b      	ldr	r3, [r7, #4]
     684:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
		switch (activeLine)
     688:	687b      	ldr	r3, [r7, #4]
     68a:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
     68e:	2b01      	cmp	r3, #1
     690:	d002      	beq.n	698 <_ZN9ALU_Class15GetSelectedAMMCEv+0x28>
     692:	2b02      	cmp	r3, #2
     694:	d004      	beq.n	6a0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x30>
     696:	e007      	b.n	6a8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x38>
		{
			case 1:
			ammc=&ammc1;
     698:	4b0b      	ldr	r3, [pc, #44]	; (6c8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     69a:	4a0c      	ldr	r2, [pc, #48]	; (6cc <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     69c:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     69e:	e007      	b.n	6b0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			
			case 2:
			ammc=&ammc2;
     6a0:	4b09      	ldr	r3, [pc, #36]	; (6c8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     6a2:	4a0b      	ldr	r2, [pc, #44]	; (6d0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x60>)
     6a4:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     6a6:	e003      	b.n	6b0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			default:
			ammc=&ammc1;
     6a8:	4b07      	ldr	r3, [pc, #28]	; (6c8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     6aa:	4a08      	ldr	r2, [pc, #32]	; (6cc <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     6ac:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     6ae:	bf00      	nop
		}
	return activeLine;	
     6b0:	687b      	ldr	r3, [r7, #4]
     6b2:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
}
     6b6:	4618      	mov	r0, r3
     6b8:	3708      	adds	r7, #8
     6ba:	46bd      	mov	sp, r7
     6bc:	bd80      	pop	{r7, pc}
     6be:	bf00      	nop
     6c0:	200093f0 	.word	0x200093f0
     6c4:	0001447b 	.word	0x0001447b
     6c8:	2000143c 	.word	0x2000143c
     6cc:	20000e7c 	.word	0x20000e7c
     6d0:	2000115c 	.word	0x2000115c

000006d4 <_ZN9ALU_Class14StartLivePulseEv>:
	
}
int32_t	ALU_Class::FeedWatchDog(void){
	return wdt_feed(&WATCHDOG);
}
uint8_t	ALU_Class::StartLivePulse(void){
     6d4:	b580      	push	{r7, lr}
     6d6:	b084      	sub	sp, #16
     6d8:	af00      	add	r7, sp, #0
     6da:	6078      	str	r0, [r7, #4]
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     6dc:	4909      	ldr	r1, [pc, #36]	; (704 <_ZN9ALU_Class14StartLivePulseEv+0x30>)
     6de:	480a      	ldr	r0, [pc, #40]	; (708 <_ZN9ALU_Class14StartLivePulseEv+0x34>)
     6e0:	4b0a      	ldr	r3, [pc, #40]	; (70c <_ZN9ALU_Class14StartLivePulseEv+0x38>)
     6e2:	4798      	blx	r3
     6e4:	4603      	mov	r3, r0
     6e6:	490a      	ldr	r1, [pc, #40]	; (710 <_ZN9ALU_Class14StartLivePulseEv+0x3c>)
     6e8:	4618      	mov	r0, r3
     6ea:	4b0a      	ldr	r3, [pc, #40]	; (714 <_ZN9ALU_Class14StartLivePulseEv+0x40>)
     6ec:	4798      	blx	r3
	//pwm_set_parameters(&LIVE_PULSE, 1000000, 500);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     6ee:	480a      	ldr	r0, [pc, #40]	; (718 <_ZN9ALU_Class14StartLivePulseEv+0x44>)
     6f0:	4b0a      	ldr	r3, [pc, #40]	; (71c <_ZN9ALU_Class14StartLivePulseEv+0x48>)
     6f2:	4798      	blx	r3
     6f4:	4603      	mov	r3, r0
     6f6:	60fb      	str	r3, [r7, #12]
	return p;
     6f8:	68fb      	ldr	r3, [r7, #12]
     6fa:	b2db      	uxtb	r3, r3
}
     6fc:	4618      	mov	r0, r3
     6fe:	3710      	adds	r7, #16
     700:	46bd      	mov	sp, r7
     702:	bd80      	pop	{r7, pc}
     704:	0001f89c 	.word	0x0001f89c
     708:	20000c84 	.word	0x20000c84
     70c:	00000b1d 	.word	0x00000b1d
     710:	0001f898 	.word	0x0001f898
     714:	00000afd 	.word	0x00000afd
     718:	2000aa04 	.word	0x2000aa04
     71c:	00006655 	.word	0x00006655

00000720 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData>:
		nextUptimeUpdate = hvacTimer.Get_ticks()+ 1000;
	}
	
	return (alu.FeedWatchDog()>0);
}
uint32_t ALU_Class::SetInitialConfiguration(ConfigurationData& cd){
     720:	b580      	push	{r7, lr}
     722:	b088      	sub	sp, #32
     724:	af00      	add	r7, sp, #0
     726:	6078      	str	r0, [r7, #4]
     728:	6039      	str	r1, [r7, #0]
	uint32_t	w,crc,refCRC,e;
	w=0;
     72a:	2300      	movs	r3, #0
     72c:	61bb      	str	r3, [r7, #24]
	uint32_t	r=memory.ReadLastConfigurationData(cd);
     72e:	6839      	ldr	r1, [r7, #0]
     730:	483d      	ldr	r0, [pc, #244]	; (828 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     732:	4b3e      	ldr	r3, [pc, #248]	; (82c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     734:	4798      	blx	r3
     736:	61f8      	str	r0, [r7, #28]
	if (memory.IsConfigurationDataUpdated())
     738:	483d      	ldr	r0, [pc, #244]	; (830 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     73a:	4b3e      	ldr	r3, [pc, #248]	; (834 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x114>)
     73c:	4798      	blx	r3
     73e:	4603      	mov	r3, r0
     740:	2b00      	cmp	r3, #0
     742:	d007      	beq.n	754 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x34>
	{
		r=memory.ReadUpdatedConfigurationData(configuration);
     744:	687b      	ldr	r3, [r7, #4]
     746:	332c      	adds	r3, #44	; 0x2c
     748:	4619      	mov	r1, r3
     74a:	4837      	ldr	r0, [pc, #220]	; (828 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     74c:	4b3a      	ldr	r3, [pc, #232]	; (838 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x118>)
     74e:	4798      	blx	r3
     750:	61f8      	str	r0, [r7, #28]
     752:	e05e      	b.n	812 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
		
	}
	else
	{
		crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(configuration));
     754:	22ac      	movs	r2, #172	; 0xac
     756:	6839      	ldr	r1, [r7, #0]
     758:	4835      	ldr	r0, [pc, #212]	; (830 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     75a:	4b38      	ldr	r3, [pc, #224]	; (83c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     75c:	4798      	blx	r3
     75e:	6178      	str	r0, [r7, #20]
		refCRC=memory.ReadCRCConfigurationData();
     760:	4831      	ldr	r0, [pc, #196]	; (828 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     762:	4b37      	ldr	r3, [pc, #220]	; (840 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x120>)
     764:	4798      	blx	r3
     766:	6138      	str	r0, [r7, #16]
		if (crc==refCRC)
     768:	697a      	ldr	r2, [r7, #20]
     76a:	693b      	ldr	r3, [r7, #16]
     76c:	429a      	cmp	r2, r3
     76e:	d108      	bne.n	782 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x62>
		{
			configuration=cd;
     770:	687b      	ldr	r3, [r7, #4]
     772:	683a      	ldr	r2, [r7, #0]
     774:	332c      	adds	r3, #44	; 0x2c
     776:	4611      	mov	r1, r2
     778:	22ac      	movs	r2, #172	; 0xac
     77a:	4618      	mov	r0, r3
     77c:	4b31      	ldr	r3, [pc, #196]	; (844 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     77e:	4798      	blx	r3
     780:	e047      	b.n	812 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
		
		} 
		else
		{
		
			r=memory.ReadDefaultConfigurationData(configuration);
     782:	687b      	ldr	r3, [r7, #4]
     784:	332c      	adds	r3, #44	; 0x2c
     786:	4619      	mov	r1, r3
     788:	4827      	ldr	r0, [pc, #156]	; (828 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     78a:	4b2f      	ldr	r3, [pc, #188]	; (848 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x128>)
     78c:	4798      	blx	r3
     78e:	61f8      	str	r0, [r7, #28]
			crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
     790:	687b      	ldr	r3, [r7, #4]
     792:	332c      	adds	r3, #44	; 0x2c
     794:	22ac      	movs	r2, #172	; 0xac
     796:	4619      	mov	r1, r3
     798:	4825      	ldr	r0, [pc, #148]	; (830 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     79a:	4b28      	ldr	r3, [pc, #160]	; (83c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     79c:	4798      	blx	r3
     79e:	6178      	str	r0, [r7, #20]
			if (crc==hvac.CRC32)
     7a0:	4b2a      	ldr	r3, [pc, #168]	; (84c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     7a2:	f8d3 24cc 	ldr.w	r2, [r3, #1228]	; 0x4cc
     7a6:	697b      	ldr	r3, [r7, #20]
     7a8:	429a      	cmp	r2, r3
     7aa:	d105      	bne.n	7b8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x98>
			{
				w=memory.WriteCRCConfigurationData(crc);
     7ac:	6979      	ldr	r1, [r7, #20]
     7ae:	481e      	ldr	r0, [pc, #120]	; (828 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     7b0:	4b27      	ldr	r3, [pc, #156]	; (850 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x130>)
     7b2:	4798      	blx	r3
     7b4:	61b8      	str	r0, [r7, #24]
     7b6:	e02c      	b.n	812 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
				
			}
			else
			{
							
				configuration=factoryDefaultsConfiguration;
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	4a26      	ldr	r2, [pc, #152]	; (854 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x134>)
     7bc:	332c      	adds	r3, #44	; 0x2c
     7be:	4611      	mov	r1, r2
     7c0:	22ac      	movs	r2, #172	; 0xac
     7c2:	4618      	mov	r0, r3
     7c4:	4b1f      	ldr	r3, [pc, #124]	; (844 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     7c6:	4798      	blx	r3
				e=qspiFlash.Erase((uint32_t)&flashMap->configurationSector);
     7c8:	4b23      	ldr	r3, [pc, #140]	; (858 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x138>)
     7ca:	681b      	ldr	r3, [r3, #0]
     7cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     7d0:	4619      	mov	r1, r3
     7d2:	4822      	ldr	r0, [pc, #136]	; (85c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x13c>)
     7d4:	4b22      	ldr	r3, [pc, #136]	; (860 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x140>)
     7d6:	4798      	blx	r3
     7d8:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultConfiguration();
     7da:	4813      	ldr	r0, [pc, #76]	; (828 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     7dc:	4b21      	ldr	r3, [pc, #132]	; (864 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x144>)
     7de:	4798      	blx	r3
     7e0:	61b8      	str	r0, [r7, #24]
				
				w=memory.WriteCRCConfigurationData(hvac.CRC32);
     7e2:	4b1a      	ldr	r3, [pc, #104]	; (84c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     7e4:	f8d3 34cc 	ldr.w	r3, [r3, #1228]	; 0x4cc
     7e8:	4619      	mov	r1, r3
     7ea:	480f      	ldr	r0, [pc, #60]	; (828 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     7ec:	4b18      	ldr	r3, [pc, #96]	; (850 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x130>)
     7ee:	4798      	blx	r3
     7f0:	61b8      	str	r0, [r7, #24]
				
				e=qspiFlash.Erase((uint32_t)&flashMap->parametersSector);
     7f2:	4b19      	ldr	r3, [pc, #100]	; (858 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x138>)
     7f4:	681b      	ldr	r3, [r3, #0]
     7f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     7fa:	4619      	mov	r1, r3
     7fc:	4817      	ldr	r0, [pc, #92]	; (85c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x13c>)
     7fe:	4b18      	ldr	r3, [pc, #96]	; (860 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x140>)
     800:	4798      	blx	r3
     802:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultParameters();
     804:	4808      	ldr	r0, [pc, #32]	; (828 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     806:	4b18      	ldr	r3, [pc, #96]	; (868 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x148>)
     808:	4798      	blx	r3
     80a:	61b8      	str	r0, [r7, #24]
				memory.WriteFastDefaultParameters();
     80c:	4817      	ldr	r0, [pc, #92]	; (86c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x14c>)
     80e:	4b18      	ldr	r3, [pc, #96]	; (870 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x150>)
     810:	4798      	blx	r3
			
		}
		
		
	}
	hvac.SetConfigurationData(configuration);
     812:	687b      	ldr	r3, [r7, #4]
     814:	332c      	adds	r3, #44	; 0x2c
     816:	4619      	mov	r1, r3
     818:	480c      	ldr	r0, [pc, #48]	; (84c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     81a:	4b16      	ldr	r3, [pc, #88]	; (874 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x154>)
     81c:	4798      	blx	r3
	return r;
     81e:	69fb      	ldr	r3, [r7, #28]
};
     820:	4618      	mov	r0, r3
     822:	3720      	adds	r7, #32
     824:	46bd      	mov	sp, r7
     826:	bd80      	pop	{r7, pc}
     828:	20002f10 	.word	0x20002f10
     82c:	00002775 	.word	0x00002775
     830:	20002d6c 	.word	0x20002d6c
     834:	00002c6d 	.word	0x00002c6d
     838:	000027a9 	.word	0x000027a9
     83c:	000013ad 	.word	0x000013ad
     840:	00002815 	.word	0x00002815
     844:	0001bc05 	.word	0x0001bc05
     848:	00002741 	.word	0x00002741
     84c:	200083d0 	.word	0x200083d0
     850:	00002a05 	.word	0x00002a05
     854:	0001fa10 	.word	0x0001fa10
     858:	200082c4 	.word	0x200082c4
     85c:	2000a03c 	.word	0x2000a03c
     860:	0001656d 	.word	0x0001656d
     864:	000028ed 	.word	0x000028ed
     868:	00002941 	.word	0x00002941
     86c:	20002f00 	.word	0x20002f00
     870:	00001835 	.word	0x00001835
     874:	00003ba9 	.word	0x00003ba9

00000878 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData>:

void ALU_Class::NotifyError(Internal_Fault_List ifl,const eventData& data)
{
     878:	b580      	push	{r7, lr}
     87a:	b084      	sub	sp, #16
     87c:	af00      	add	r7, sp, #0
     87e:	60f8      	str	r0, [r7, #12]
     880:	460b      	mov	r3, r1
     882:	607a      	str	r2, [r7, #4]
     884:	72fb      	strb	r3, [r7, #11]
	listener.SendErrorSelf(uint16_t(ifl),data);
     886:	7afb      	ldrb	r3, [r7, #11]
     888:	b29b      	uxth	r3, r3
     88a:	687a      	ldr	r2, [r7, #4]
     88c:	4619      	mov	r1, r3
     88e:	4803      	ldr	r0, [pc, #12]	; (89c <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x24>)
     890:	4b03      	ldr	r3, [pc, #12]	; (8a0 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x28>)
     892:	4798      	blx	r3
}
     894:	bf00      	nop
     896:	3710      	adds	r7, #16
     898:	46bd      	mov	sp, r7
     89a:	bd80      	pop	{r7, pc}
     89c:	20009ca4 	.word	0x20009ca4
     8a0:	00014ce9 	.word	0x00014ce9

000008a4 <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm>:
{
	listener.SendErrorSelf(uint16_t(fl),data);
}

void ALU_Class::PrepareNewTask(ALUTaskEnum newTask, uint32_t data)
{
     8a4:	b580      	push	{r7, lr}
     8a6:	b084      	sub	sp, #16
     8a8:	af00      	add	r7, sp, #0
     8aa:	60f8      	str	r0, [r7, #12]
     8ac:	460b      	mov	r3, r1
     8ae:	607a      	str	r2, [r7, #4]
     8b0:	72fb      	strb	r3, [r7, #11]
	
	task.id=newTask;
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	7afa      	ldrb	r2, [r7, #11]
     8b6:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
	task.prio=(uint8_t)newTask;
     8ba:	68fb      	ldr	r3, [r7, #12]
     8bc:	7afa      	ldrb	r2, [r7, #11]
     8be:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
	AddTask(task);
     8c2:	68fa      	ldr	r2, [r7, #12]
     8c4:	68fb      	ldr	r3, [r7, #12]
     8c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
     8ca:	4619      	mov	r1, r3
     8cc:	4610      	mov	r0, r2
     8ce:	4b03      	ldr	r3, [pc, #12]	; (8dc <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm+0x38>)
     8d0:	4798      	blx	r3

}
     8d2:	bf00      	nop
     8d4:	3710      	adds	r7, #16
     8d6:	46bd      	mov	sp, r7
     8d8:	bd80      	pop	{r7, pc}
     8da:	bf00      	nop
     8dc:	00003f71 	.word	0x00003f71

000008e0 <_ZN9ALU_Class15PrepareNewEventEtt>:

void ALU_Class::PrepareNewEvent( uint16 newState, uint16 data)
{
     8e0:	b580      	push	{r7, lr}
     8e2:	b086      	sub	sp, #24
     8e4:	af00      	add	r7, sp, #0
     8e6:	6078      	str	r0, [r7, #4]
     8e8:	460b      	mov	r3, r1
     8ea:	807b      	strh	r3, [r7, #2]
     8ec:	4613      	mov	r3, r2
     8ee:	803b      	strh	r3, [r7, #0]
	event	e;
     8f0:	f107 0308 	add.w	r3, r7, #8
     8f4:	4618      	mov	r0, r3
     8f6:	4b0a      	ldr	r3, [pc, #40]	; (920 <_ZN9ALU_Class15PrepareNewEventEtt+0x40>)
     8f8:	4798      	blx	r3
	e.eventClass =(EventClass)kALUEventClass;
     8fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
     8fe:	813b      	strh	r3, [r7, #8]
	e.eventType = (EventType)kALUControllerEvent;
     900:	2302      	movs	r3, #2
     902:	817b      	strh	r3, [r7, #10]
	e.data.wordData[0] = newState;
     904:	887b      	ldrh	r3, [r7, #2]
     906:	823b      	strh	r3, [r7, #16]
	e.data.wordData[1] = data;
     908:	883b      	ldrh	r3, [r7, #0]
     90a:	827b      	strh	r3, [r7, #18]
	listener.SendEventSelf(e);
     90c:	f107 0308 	add.w	r3, r7, #8
     910:	4619      	mov	r1, r3
     912:	4804      	ldr	r0, [pc, #16]	; (924 <_ZN9ALU_Class15PrepareNewEventEtt+0x44>)
     914:	4b04      	ldr	r3, [pc, #16]	; (928 <_ZN9ALU_Class15PrepareNewEventEtt+0x48>)
     916:	4798      	blx	r3

}
     918:	bf00      	nop
     91a:	3718      	adds	r7, #24
     91c:	46bd      	mov	sp, r7
     91e:	bd80      	pop	{r7, pc}
     920:	000002ed 	.word	0x000002ed
     924:	20009ca4 	.word	0x20009ca4
     928:	00014c49 	.word	0x00014c49

0000092c <_ZN9ALU_Class18ExecutePendingTaskEv>:

bool	ALU_Class::ExecutePendingTask(void){
     92c:	b580      	push	{r7, lr}
     92e:	b088      	sub	sp, #32
     930:	af00      	add	r7, sp, #0
     932:	60f8      	str	r0, [r7, #12]
	allTasksDone=false;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	2200      	movs	r2, #0
     938:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
	list_element *it;
	ControllerTask tk;
	uint8_t		highPrio=kALUNumberTasks;
     93c:	230b      	movs	r3, #11
     93e:	77fb      	strb	r3, [r7, #31]
	tk=GetHighPrioTask();
     940:	68fa      	ldr	r2, [r7, #12]
     942:	463b      	mov	r3, r7
     944:	4611      	mov	r1, r2
     946:	4618      	mov	r0, r3
     948:	4b23      	ldr	r3, [pc, #140]	; (9d8 <_ZN9ALU_Class18ExecutePendingTaskEv+0xac>)
     94a:	4798      	blx	r3
     94c:	f107 0314 	add.w	r3, r7, #20
     950:	463a      	mov	r2, r7
     952:	e892 0003 	ldmia.w	r2, {r0, r1}
     956:	e883 0003 	stmia.w	r3, {r0, r1}
	if (tk.id!=kALUTaskArincTXMessage)
     95a:	7e3b      	ldrb	r3, [r7, #24]
     95c:	2b02      	cmp	r3, #2
     95e:	d004      	beq.n	96a <_ZN9ALU_Class18ExecutePendingTaskEv+0x3e>
	{
		PrepareNewTask(kALUTaskArincTXMessage);
     960:	2200      	movs	r2, #0
     962:	2102      	movs	r1, #2
     964:	68f8      	ldr	r0, [r7, #12]
     966:	4b1d      	ldr	r3, [pc, #116]	; (9dc <_ZN9ALU_Class18ExecutePendingTaskEv+0xb0>)
     968:	4798      	blx	r3
	}
	while (taskList->head){
     96a:	68fb      	ldr	r3, [r7, #12]
     96c:	681b      	ldr	r3, [r3, #0]
     96e:	681b      	ldr	r3, [r3, #0]
     970:	2b00      	cmp	r3, #0
     972:	d01a      	beq.n	9aa <_ZN9ALU_Class18ExecutePendingTaskEv+0x7e>
		tk=GetHighPrioTask();
     974:	68fa      	ldr	r2, [r7, #12]
     976:	463b      	mov	r3, r7
     978:	4611      	mov	r1, r2
     97a:	4618      	mov	r0, r3
     97c:	4b16      	ldr	r3, [pc, #88]	; (9d8 <_ZN9ALU_Class18ExecutePendingTaskEv+0xac>)
     97e:	4798      	blx	r3
     980:	f107 0314 	add.w	r3, r7, #20
     984:	463a      	mov	r2, r7
     986:	e892 0003 	ldmia.w	r2, {r0, r1}
     98a:	e883 0003 	stmia.w	r3, {r0, r1}
		HandleTasks(tk);
     98e:	f107 0314 	add.w	r3, r7, #20
     992:	4619      	mov	r1, r3
     994:	68f8      	ldr	r0, [r7, #12]
     996:	4b12      	ldr	r3, [pc, #72]	; (9e0 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb4>)
     998:	4798      	blx	r3
		RemoveTask(tk);
     99a:	68fb      	ldr	r3, [r7, #12]
     99c:	f107 0214 	add.w	r2, r7, #20
     9a0:	4611      	mov	r1, r2
     9a2:	4618      	mov	r0, r3
     9a4:	4b0f      	ldr	r3, [pc, #60]	; (9e4 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb8>)
     9a6:	4798      	blx	r3
	while (taskList->head){
     9a8:	e7df      	b.n	96a <_ZN9ALU_Class18ExecutePendingTaskEv+0x3e>
	
	}
	allTasksDone=~((bool)taskList->head);
     9aa:	68fb      	ldr	r3, [r7, #12]
     9ac:	2201      	movs	r2, #1
     9ae:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
	if (allTasksDone)
     9b2:	68fb      	ldr	r3, [r7, #12]
     9b4:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
     9b8:	2b00      	cmp	r3, #0
     9ba:	d005      	beq.n	9c8 <_ZN9ALU_Class18ExecutePendingTaskEv+0x9c>
	{
		PrepareNewEvent(kALUEventSimpleResume);
     9bc:	2200      	movs	r2, #0
     9be:	f240 1107 	movw	r1, #263	; 0x107
     9c2:	68f8      	ldr	r0, [r7, #12]
     9c4:	4b08      	ldr	r3, [pc, #32]	; (9e8 <_ZN9ALU_Class18ExecutePendingTaskEv+0xbc>)
     9c6:	4798      	blx	r3
	}
	return allTasksDone; 
     9c8:	68fb      	ldr	r3, [r7, #12]
     9ca:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
}
     9ce:	4618      	mov	r0, r3
     9d0:	3720      	adds	r7, #32
     9d2:	46bd      	mov	sp, r7
     9d4:	bd80      	pop	{r7, pc}
     9d6:	bf00      	nop
     9d8:	000040f5 	.word	0x000040f5
     9dc:	000008a5 	.word	0x000008a5
     9e0:	000009ed 	.word	0x000009ed
     9e4:	00004061 	.word	0x00004061
     9e8:	000008e1 	.word	0x000008e1

000009ec <_ZN9ALU_Class11HandleTasksER14ControllerTask>:
void ALU_Class::HandleTasks(ControllerTask& ct)
{
     9ec:	b580      	push	{r7, lr}
     9ee:	b084      	sub	sp, #16
     9f0:	af00      	add	r7, sp, #0
     9f2:	6078      	str	r0, [r7, #4]
     9f4:	6039      	str	r1, [r7, #0]

	taskEntryTime= hvacTimer.Get_ticks();
     9f6:	4824      	ldr	r0, [pc, #144]	; (a88 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9c>)
     9f8:	4b24      	ldr	r3, [pc, #144]	; (a8c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa0>)
     9fa:	4798      	blx	r3
     9fc:	4602      	mov	r2, r0
     9fe:	687b      	ldr	r3, [r7, #4]
     a00:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	switch (ct.id)
     a04:	683b      	ldr	r3, [r7, #0]
     a06:	791b      	ldrb	r3, [r3, #4]
     a08:	3b02      	subs	r3, #2
     a0a:	2b08      	cmp	r3, #8
     a0c:	d832      	bhi.n	a74 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x88>
     a0e:	a201      	add	r2, pc, #4	; (adr r2, a14 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x28>)
     a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a14:	00000a65 	.word	0x00000a65
     a18:	00000a4d 	.word	0x00000a4d
     a1c:	00000a5b 	.word	0x00000a5b
     a20:	00000a75 	.word	0x00000a75
     a24:	00000a75 	.word	0x00000a75
     a28:	00000a75 	.word	0x00000a75
     a2c:	00000a43 	.word	0x00000a43
     a30:	00000a39 	.word	0x00000a39
     a34:	00000a6d 	.word	0x00000a6d
	{
		case kALUEventSimpleStart:
			hvac.Start(0);
		break;
		case kALUSimpleResume:
			hvac.ControllerResume(0);
     a38:	2100      	movs	r1, #0
     a3a:	4815      	ldr	r0, [pc, #84]	; (a90 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa4>)
     a3c:	4b15      	ldr	r3, [pc, #84]	; (a94 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa8>)
     a3e:	4798      	blx	r3
		break;
     a40:	e01d      	b.n	a7e <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x92>
		case kALUSimpleStop:
			hvac.Stop(0);
     a42:	2100      	movs	r1, #0
     a44:	4812      	ldr	r0, [pc, #72]	; (a90 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa4>)
     a46:	4b14      	ldr	r3, [pc, #80]	; (a98 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xac>)
     a48:	4798      	blx	r3
		break;
     a4a:	e018      	b.n	a7e <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x92>
		case kALUTaskCheckCommunication:
			interfaces.CheckCommunication();
     a4c:	f107 0308 	add.w	r3, r7, #8
     a50:	4912      	ldr	r1, [pc, #72]	; (a9c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb0>)
     a52:	4618      	mov	r0, r3
     a54:	4b12      	ldr	r3, [pc, #72]	; (aa0 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb4>)
     a56:	4798      	blx	r3
		break;
     a58:	e011      	b.n	a7e <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x92>
		case kALUTaskReadARINCR1:
			arinc.ReadRXBuffer(1);			
     a5a:	2101      	movs	r1, #1
     a5c:	4811      	ldr	r0, [pc, #68]	; (aa4 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb8>)
     a5e:	4b12      	ldr	r3, [pc, #72]	; (aa8 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xbc>)
     a60:	4798      	blx	r3
		break;
     a62:	e00c      	b.n	a7e <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x92>
		case kALUTaskArincTXMessage:
			arinc.TransmitTXBuffer();
     a64:	480f      	ldr	r0, [pc, #60]	; (aa4 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb8>)
     a66:	4b11      	ldr	r3, [pc, #68]	; (aac <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc0>)
     a68:	4798      	blx	r3
		break;
     a6a:	e008      	b.n	a7e <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x92>
		case kALUTaskUpdateTemperatures:
			arinc.SaveTemperature();		
     a6c:	480d      	ldr	r0, [pc, #52]	; (aa4 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb8>)
     a6e:	4b10      	ldr	r3, [pc, #64]	; (ab0 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     a70:	4798      	blx	r3
		break;
     a72:	e004      	b.n	a7e <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x92>

		default:
		hvac.Stop(0);
     a74:	2100      	movs	r1, #0
     a76:	4806      	ldr	r0, [pc, #24]	; (a90 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa4>)
     a78:	4b07      	ldr	r3, [pc, #28]	; (a98 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xac>)
     a7a:	4798      	blx	r3
		break;
     a7c:	bf00      	nop
	}
}
     a7e:	bf00      	nop
     a80:	3710      	adds	r7, #16
     a82:	46bd      	mov	sp, r7
     a84:	bd80      	pop	{r7, pc}
     a86:	bf00      	nop
     a88:	2000a4a0 	.word	0x2000a4a0
     a8c:	00017589 	.word	0x00017589
     a90:	200083d0 	.word	0x200083d0
     a94:	00002edd 	.word	0x00002edd
     a98:	00003b2d 	.word	0x00003b2d
     a9c:	20001714 	.word	0x20001714
     aa0:	00001c19 	.word	0x00001c19
     aa4:	20009128 	.word	0x20009128
     aa8:	000136fd 	.word	0x000136fd
     aac:	00013a95 	.word	0x00013a95
     ab0:	00012c85 	.word	0x00012c85

00000ab4 <_ZN9ALU_Class17CheckPeriodicTaskEv>:

void ALU_Class::CheckPeriodicTask(void){
     ab4:	b580      	push	{r7, lr}
     ab6:	b082      	sub	sp, #8
     ab8:	af00      	add	r7, sp, #0
	interfaces.CheckCommunication();
     aba:	463b      	mov	r3, r7
     abc:	4903      	ldr	r1, [pc, #12]	; (acc <_ZN9ALU_Class17CheckPeriodicTaskEv+0x18>)
     abe:	4618      	mov	r0, r3
     ac0:	4b03      	ldr	r3, [pc, #12]	; (ad0 <_ZN9ALU_Class17CheckPeriodicTaskEv+0x1c>)
     ac2:	4798      	blx	r3
}
     ac4:	bf00      	nop
     ac6:	3708      	adds	r7, #8
     ac8:	46bd      	mov	sp, r7
     aca:	bd80      	pop	{r7, pc}
     acc:	20001714 	.word	0x20001714
     ad0:	00001c19 	.word	0x00001c19

00000ad4 <_ZlsIhER5PrintS1_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     ad4:	b580      	push	{r7, lr}
     ad6:	b082      	sub	sp, #8
     ad8:	af00      	add	r7, sp, #0
     ada:	6078      	str	r0, [r7, #4]
     adc:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     ade:	683b      	ldr	r3, [r7, #0]
     ae0:	781b      	ldrb	r3, [r3, #0]
     ae2:	220a      	movs	r2, #10
     ae4:	4619      	mov	r1, r3
     ae6:	6878      	ldr	r0, [r7, #4]
     ae8:	4b03      	ldr	r3, [pc, #12]	; (af8 <_ZlsIhER5PrintS1_RKT_+0x24>)
     aea:	4798      	blx	r3
     aec:	687b      	ldr	r3, [r7, #4]
     aee:	4618      	mov	r0, r3
     af0:	3708      	adds	r7, #8
     af2:	46bd      	mov	sp, r7
     af4:	bd80      	pop	{r7, pc}
     af6:	bf00      	nop
     af8:	00017e1d 	.word	0x00017e1d

00000afc <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     afc:	b580      	push	{r7, lr}
     afe:	b082      	sub	sp, #8
     b00:	af00      	add	r7, sp, #0
     b02:	6078      	str	r0, [r7, #4]
     b04:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     b06:	6839      	ldr	r1, [r7, #0]
     b08:	6878      	ldr	r0, [r7, #4]
     b0a:	4b03      	ldr	r3, [pc, #12]	; (b18 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     b0c:	4798      	blx	r3
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	4618      	mov	r0, r3
     b12:	3708      	adds	r7, #8
     b14:	46bd      	mov	sp, r7
     b16:	bd80      	pop	{r7, pc}
     b18:	00017dfd 	.word	0x00017dfd

00000b1c <_ZlsIA30_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     b1c:	b580      	push	{r7, lr}
     b1e:	b082      	sub	sp, #8
     b20:	af00      	add	r7, sp, #0
     b22:	6078      	str	r0, [r7, #4]
     b24:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     b26:	6839      	ldr	r1, [r7, #0]
     b28:	6878      	ldr	r0, [r7, #4]
     b2a:	4b03      	ldr	r3, [pc, #12]	; (b38 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     b2c:	4798      	blx	r3
     b2e:	687b      	ldr	r3, [r7, #4]
     b30:	4618      	mov	r0, r3
     b32:	3708      	adds	r7, #8
     b34:	46bd      	mov	sp, r7
     b36:	bd80      	pop	{r7, pc}
     b38:	00017dfd 	.word	0x00017dfd

00000b3c <_Z41__static_initialization_and_destruction_0ii>:




     b3c:	b580      	push	{r7, lr}
     b3e:	b082      	sub	sp, #8
     b40:	af00      	add	r7, sp, #0
     b42:	6078      	str	r0, [r7, #4]
     b44:	6039      	str	r1, [r7, #0]
     b46:	687b      	ldr	r3, [r7, #4]
     b48:	2b01      	cmp	r3, #1
     b4a:	d124      	bne.n	b96 <_Z41__static_initialization_and_destruction_0ii+0x5a>
     b4c:	683b      	ldr	r3, [r7, #0]
     b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     b52:	4293      	cmp	r3, r2
     b54:	d11f      	bne.n	b96 <_Z41__static_initialization_and_destruction_0ii+0x5a>
	PBIT_Class( const PBIT_Class &c );
	PBIT_Class& operator=( const PBIT_Class &c );

}; //PBIT_Class

static	PBIT_Class	pBit;
     b56:	4812      	ldr	r0, [pc, #72]	; (ba0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     b58:	4b12      	ldr	r3, [pc, #72]	; (ba4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     b5a:	4798      	blx	r3
     b5c:	4a12      	ldr	r2, [pc, #72]	; (ba8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     b5e:	4913      	ldr	r1, [pc, #76]	; (bac <_Z41__static_initialization_and_destruction_0ii+0x70>)
     b60:	480f      	ldr	r0, [pc, #60]	; (ba0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     b62:	4b13      	ldr	r3, [pc, #76]	; (bb0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     b64:	4798      	blx	r3
	CBIT_Class( const CBIT_Class &c );
	CBIT_Class& operator=( const CBIT_Class &c );

}; //CBIT_Class

static	CBIT_Class	cBit;
     b66:	4813      	ldr	r0, [pc, #76]	; (bb4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     b68:	4b13      	ldr	r3, [pc, #76]	; (bb8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     b6a:	4798      	blx	r3
     b6c:	4a0e      	ldr	r2, [pc, #56]	; (ba8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     b6e:	4913      	ldr	r1, [pc, #76]	; (bbc <_Z41__static_initialization_and_destruction_0ii+0x80>)
     b70:	4810      	ldr	r0, [pc, #64]	; (bb4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     b72:	4b0f      	ldr	r3, [pc, #60]	; (bb0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     b74:	4798      	blx	r3
	CDC_Class& operator=( const CDC_Class &c );
	

}; //CDC_Class

static	CDC_Class	usb;
     b76:	4812      	ldr	r0, [pc, #72]	; (bc0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
     b78:	4b12      	ldr	r3, [pc, #72]	; (bc4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     b7a:	4798      	blx	r3
     b7c:	4a0a      	ldr	r2, [pc, #40]	; (ba8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     b7e:	4912      	ldr	r1, [pc, #72]	; (bc8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     b80:	480f      	ldr	r0, [pc, #60]	; (bc0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
     b82:	4b0b      	ldr	r3, [pc, #44]	; (bb0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     b84:	4798      	blx	r3
     b86:	4811      	ldr	r0, [pc, #68]	; (bcc <_Z41__static_initialization_and_destruction_0ii+0x90>)
     b88:	4b11      	ldr	r3, [pc, #68]	; (bd0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
     b8a:	4798      	blx	r3
     b8c:	4a06      	ldr	r2, [pc, #24]	; (ba8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     b8e:	4911      	ldr	r1, [pc, #68]	; (bd4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
     b90:	480e      	ldr	r0, [pc, #56]	; (bcc <_Z41__static_initialization_and_destruction_0ii+0x90>)
     b92:	4b07      	ldr	r3, [pc, #28]	; (bb0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     b94:	4798      	blx	r3
     b96:	bf00      	nop
     b98:	3708      	adds	r7, #8
     b9a:	46bd      	mov	sp, r7
     b9c:	bd80      	pop	{r7, pc}
     b9e:	bf00      	nop
     ba0:	20000c64 	.word	0x20000c64
     ba4:	00002b11 	.word	0x00002b11
     ba8:	20000000 	.word	0x20000000
     bac:	00002b2b 	.word	0x00002b2b
     bb0:	0001949d 	.word	0x0001949d
     bb4:	20000c78 	.word	0x20000c78
     bb8:	00000e35 	.word	0x00000e35
     bbc:	00000e4f 	.word	0x00000e4f
     bc0:	20000c84 	.word	0x20000c84
     bc4:	000178dd 	.word	0x000178dd
     bc8:	00017925 	.word	0x00017925
     bcc:	20000ce8 	.word	0x20000ce8
     bd0:	0000034d 	.word	0x0000034d
     bd4:	00000375 	.word	0x00000375

00000bd8 <_GLOBAL__sub_I_ptrALUClass>:
     bd8:	b580      	push	{r7, lr}
     bda:	af00      	add	r7, sp, #0
     bdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
     be0:	2001      	movs	r0, #1
     be2:	4b01      	ldr	r3, [pc, #4]	; (be8 <_GLOBAL__sub_I_ptrALUClass+0x10>)
     be4:	4798      	blx	r3
     be6:	bd80      	pop	{r7, pc}
     be8:	00000b3d 	.word	0x00000b3d

00000bec <_ZN14Protocol_ClassC2Ev>:
uint32_t	rawWord;
}Datagram;



class Protocol_Class: private virtual ARINC_Conversions
     bec:	b480      	push	{r7}
     bee:	b083      	sub	sp, #12
     bf0:	af00      	add	r7, sp, #0
     bf2:	6078      	str	r0, [r7, #4]
     bf4:	6039      	str	r1, [r7, #0]
     bf6:	683b      	ldr	r3, [r7, #0]
     bf8:	681a      	ldr	r2, [r3, #0]
     bfa:	687b      	ldr	r3, [r7, #4]
     bfc:	601a      	str	r2, [r3, #0]
     bfe:	687b      	ldr	r3, [r7, #4]
     c00:	681b      	ldr	r3, [r3, #0]
     c02:	3b0c      	subs	r3, #12
     c04:	681b      	ldr	r3, [r3, #0]
     c06:	461a      	mov	r2, r3
     c08:	687b      	ldr	r3, [r7, #4]
     c0a:	4413      	add	r3, r2
     c0c:	683a      	ldr	r2, [r7, #0]
     c0e:	6852      	ldr	r2, [r2, #4]
     c10:	601a      	str	r2, [r3, #0]
     c12:	687b      	ldr	r3, [r7, #4]
     c14:	4618      	mov	r0, r3
     c16:	370c      	adds	r7, #12
     c18:	46bd      	mov	sp, r7
     c1a:	bc80      	pop	{r7}
     c1c:	4770      	bx	lr
	...

00000c20 <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     c20:	b580      	push	{r7, lr}
     c22:	b082      	sub	sp, #8
     c24:	af00      	add	r7, sp, #0
     c26:	6078      	str	r0, [r7, #4]
     c28:	687b      	ldr	r3, [r7, #4]
     c2a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
     c2e:	4618      	mov	r0, r3
     c30:	4b10      	ldr	r3, [pc, #64]	; (c74 <_ZN10AMMC_ClassC1Ev+0x54>)
     c32:	4798      	blx	r3
     c34:	687b      	ldr	r3, [r7, #4]
     c36:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
     c3a:	4a0f      	ldr	r2, [pc, #60]	; (c78 <_ZN10AMMC_ClassC1Ev+0x58>)
     c3c:	4611      	mov	r1, r2
     c3e:	4618      	mov	r0, r3
     c40:	4b0e      	ldr	r3, [pc, #56]	; (c7c <_ZN10AMMC_ClassC1Ev+0x5c>)
     c42:	4798      	blx	r3
     c44:	687b      	ldr	r3, [r7, #4]
     c46:	4a0e      	ldr	r2, [pc, #56]	; (c80 <_ZN10AMMC_ClassC1Ev+0x60>)
     c48:	4611      	mov	r1, r2
     c4a:	4618      	mov	r0, r3
     c4c:	4b0d      	ldr	r3, [pc, #52]	; (c84 <_ZN10AMMC_ClassC1Ev+0x64>)
     c4e:	4798      	blx	r3
     c50:	4a0d      	ldr	r2, [pc, #52]	; (c88 <_ZN10AMMC_ClassC1Ev+0x68>)
     c52:	687b      	ldr	r3, [r7, #4]
     c54:	601a      	str	r2, [r3, #0]
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
     c5c:	4a0b      	ldr	r2, [pc, #44]	; (c8c <_ZN10AMMC_ClassC1Ev+0x6c>)
     c5e:	601a      	str	r2, [r3, #0]
     c60:	687b      	ldr	r3, [r7, #4]
     c62:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
     c66:	4a0a      	ldr	r2, [pc, #40]	; (c90 <_ZN10AMMC_ClassC1Ev+0x70>)
     c68:	601a      	str	r2, [r3, #0]
{
} //AMMC_Class
     c6a:	687b      	ldr	r3, [r7, #4]
     c6c:	4618      	mov	r0, r3
     c6e:	3708      	adds	r7, #8
     c70:	46bd      	mov	sp, r7
     c72:	bd80      	pop	{r7, pc}
     c74:	00012e5d 	.word	0x00012e5d
     c78:	0001f934 	.word	0x0001f934
     c7c:	00000bed 	.word	0x00000bed
     c80:	0001f914 	.word	0x0001f914
     c84:	0001330d 	.word	0x0001330d
     c88:	0001f8cc 	.word	0x0001f8cc
     c8c:	0001f8e8 	.word	0x0001f8e8
     c90:	0001f904 	.word	0x0001f904

00000c94 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     c94:	b580      	push	{r7, lr}
     c96:	b082      	sub	sp, #8
     c98:	af00      	add	r7, sp, #0
     c9a:	6078      	str	r0, [r7, #4]
     c9c:	4a12      	ldr	r2, [pc, #72]	; (ce8 <_ZN10AMMC_ClassD1Ev+0x54>)
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	601a      	str	r2, [r3, #0]
     ca2:	687b      	ldr	r3, [r7, #4]
     ca4:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
     ca8:	4a10      	ldr	r2, [pc, #64]	; (cec <_ZN10AMMC_ClassD1Ev+0x58>)
     caa:	601a      	str	r2, [r3, #0]
     cac:	687b      	ldr	r3, [r7, #4]
     cae:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
     cb2:	4a0f      	ldr	r2, [pc, #60]	; (cf0 <_ZN10AMMC_ClassD1Ev+0x5c>)
     cb4:	601a      	str	r2, [r3, #0]
     cb6:	687b      	ldr	r3, [r7, #4]
     cb8:	4a0e      	ldr	r2, [pc, #56]	; (cf4 <_ZN10AMMC_ClassD1Ev+0x60>)
     cba:	4611      	mov	r1, r2
     cbc:	4618      	mov	r0, r3
     cbe:	4b0e      	ldr	r3, [pc, #56]	; (cf8 <_ZN10AMMC_ClassD1Ev+0x64>)
     cc0:	4798      	blx	r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
     cc8:	4a0c      	ldr	r2, [pc, #48]	; (cfc <_ZN10AMMC_ClassD1Ev+0x68>)
     cca:	4611      	mov	r1, r2
     ccc:	4618      	mov	r0, r3
     cce:	4b0c      	ldr	r3, [pc, #48]	; (d00 <_ZN10AMMC_ClassD1Ev+0x6c>)
     cd0:	4798      	blx	r3
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
     cd8:	4618      	mov	r0, r3
     cda:	4b0a      	ldr	r3, [pc, #40]	; (d04 <_ZN10AMMC_ClassD1Ev+0x70>)
     cdc:	4798      	blx	r3
{
} //~AMMC_Class
     cde:	687b      	ldr	r3, [r7, #4]
     ce0:	4618      	mov	r0, r3
     ce2:	3708      	adds	r7, #8
     ce4:	46bd      	mov	sp, r7
     ce6:	bd80      	pop	{r7, pc}
     ce8:	0001f8cc 	.word	0x0001f8cc
     cec:	0001f8e8 	.word	0x0001f8e8
     cf0:	0001f904 	.word	0x0001f904
     cf4:	0001f914 	.word	0x0001f914
     cf8:	0001340d 	.word	0x0001340d
     cfc:	0001f934 	.word	0x0001f934
     d00:	00014449 	.word	0x00014449
     d04:	00012e7d 	.word	0x00012e7d

00000d08 <_ZTv0_n16_N10AMMC_ClassD1Ev>:
     d08:	b580      	push	{r7, lr}
     d0a:	b082      	sub	sp, #8
     d0c:	af00      	add	r7, sp, #0
     d0e:	6078      	str	r0, [r7, #4]
     d10:	687b      	ldr	r3, [r7, #4]
     d12:	681b      	ldr	r3, [r3, #0]
     d14:	3b10      	subs	r3, #16
     d16:	681b      	ldr	r3, [r3, #0]
     d18:	461a      	mov	r2, r3
     d1a:	687b      	ldr	r3, [r7, #4]
     d1c:	4413      	add	r3, r2
     d1e:	4618      	mov	r0, r3
     d20:	4b03      	ldr	r3, [pc, #12]	; (d30 <_ZTv0_n16_N10AMMC_ClassD1Ev+0x28>)
     d22:	4798      	blx	r3
     d24:	4603      	mov	r3, r0
     d26:	4618      	mov	r0, r3
     d28:	3708      	adds	r7, #8
     d2a:	46bd      	mov	sp, r7
     d2c:	bd80      	pop	{r7, pc}
     d2e:	bf00      	nop
     d30:	00000c95 	.word	0x00000c95

00000d34 <_ZN10AMMC_ClassD0Ev>:
AMMC_Class::~AMMC_Class()
     d34:	b580      	push	{r7, lr}
     d36:	b082      	sub	sp, #8
     d38:	af00      	add	r7, sp, #0
     d3a:	6078      	str	r0, [r7, #4]
} //~AMMC_Class
     d3c:	6878      	ldr	r0, [r7, #4]
     d3e:	4b06      	ldr	r3, [pc, #24]	; (d58 <_ZN10AMMC_ClassD0Ev+0x24>)
     d40:	4798      	blx	r3
     d42:	f44f 7138 	mov.w	r1, #736	; 0x2e0
     d46:	6878      	ldr	r0, [r7, #4]
     d48:	4b04      	ldr	r3, [pc, #16]	; (d5c <_ZN10AMMC_ClassD0Ev+0x28>)
     d4a:	4798      	blx	r3
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	4618      	mov	r0, r3
     d50:	3708      	adds	r7, #8
     d52:	46bd      	mov	sp, r7
     d54:	bd80      	pop	{r7, pc}
     d56:	bf00      	nop
     d58:	00000c95 	.word	0x00000c95
     d5c:	000194a9 	.word	0x000194a9

00000d60 <_ZTv0_n16_N10AMMC_ClassD0Ev>:
     d60:	b580      	push	{r7, lr}
     d62:	b082      	sub	sp, #8
     d64:	af00      	add	r7, sp, #0
     d66:	6078      	str	r0, [r7, #4]
     d68:	687b      	ldr	r3, [r7, #4]
     d6a:	681b      	ldr	r3, [r3, #0]
     d6c:	3b10      	subs	r3, #16
     d6e:	681b      	ldr	r3, [r3, #0]
     d70:	461a      	mov	r2, r3
     d72:	687b      	ldr	r3, [r7, #4]
     d74:	4413      	add	r3, r2
     d76:	4618      	mov	r0, r3
     d78:	4b03      	ldr	r3, [pc, #12]	; (d88 <_ZTv0_n16_N10AMMC_ClassD0Ev+0x28>)
     d7a:	4798      	blx	r3
     d7c:	4603      	mov	r3, r0
     d7e:	4618      	mov	r0, r3
     d80:	3708      	adds	r7, #8
     d82:	46bd      	mov	sp, r7
     d84:	bd80      	pop	{r7, pc}
     d86:	bf00      	nop
     d88:	00000d35 	.word	0x00000d35

00000d8c <_Z41__static_initialization_and_destruction_0ii>:
	return	selected;
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     d8c:	b580      	push	{r7, lr}
     d8e:	b082      	sub	sp, #8
     d90:	af00      	add	r7, sp, #0
     d92:	6078      	str	r0, [r7, #4]
     d94:	6039      	str	r1, [r7, #0]
     d96:	687b      	ldr	r3, [r7, #4]
     d98:	2b01      	cmp	r3, #1
     d9a:	d124      	bne.n	de6 <_Z41__static_initialization_and_destruction_0ii+0x5a>
     d9c:	683b      	ldr	r3, [r7, #0]
     d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     da2:	4293      	cmp	r3, r2
     da4:	d11f      	bne.n	de6 <_Z41__static_initialization_and_destruction_0ii+0x5a>
     da6:	4812      	ldr	r0, [pc, #72]	; (df0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     da8:	4b12      	ldr	r3, [pc, #72]	; (df4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     daa:	4798      	blx	r3
     dac:	4a12      	ldr	r2, [pc, #72]	; (df8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     dae:	4913      	ldr	r1, [pc, #76]	; (dfc <_Z41__static_initialization_and_destruction_0ii+0x70>)
     db0:	480f      	ldr	r0, [pc, #60]	; (df0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     db2:	4b13      	ldr	r3, [pc, #76]	; (e00 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     db4:	4798      	blx	r3
     db6:	4813      	ldr	r0, [pc, #76]	; (e04 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     db8:	4b13      	ldr	r3, [pc, #76]	; (e08 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     dba:	4798      	blx	r3
     dbc:	4a0e      	ldr	r2, [pc, #56]	; (df8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     dbe:	4913      	ldr	r1, [pc, #76]	; (e0c <_Z41__static_initialization_and_destruction_0ii+0x80>)
     dc0:	4810      	ldr	r0, [pc, #64]	; (e04 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     dc2:	4b0f      	ldr	r3, [pc, #60]	; (e00 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     dc4:	4798      	blx	r3
AMMC_Class	ammc1;
     dc6:	4812      	ldr	r0, [pc, #72]	; (e10 <_Z41__static_initialization_and_destruction_0ii+0x84>)
     dc8:	4b12      	ldr	r3, [pc, #72]	; (e14 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     dca:	4798      	blx	r3
     dcc:	4a0a      	ldr	r2, [pc, #40]	; (df8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     dce:	4912      	ldr	r1, [pc, #72]	; (e18 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     dd0:	480f      	ldr	r0, [pc, #60]	; (e10 <_Z41__static_initialization_and_destruction_0ii+0x84>)
     dd2:	4b0b      	ldr	r3, [pc, #44]	; (e00 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     dd4:	4798      	blx	r3
AMMC_Class	ammc2;
     dd6:	4811      	ldr	r0, [pc, #68]	; (e1c <_Z41__static_initialization_and_destruction_0ii+0x90>)
     dd8:	4b0e      	ldr	r3, [pc, #56]	; (e14 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     dda:	4798      	blx	r3
     ddc:	4a06      	ldr	r2, [pc, #24]	; (df8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     dde:	490e      	ldr	r1, [pc, #56]	; (e18 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     de0:	480e      	ldr	r0, [pc, #56]	; (e1c <_Z41__static_initialization_and_destruction_0ii+0x90>)
     de2:	4b07      	ldr	r3, [pc, #28]	; (e00 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     de4:	4798      	blx	r3
     de6:	bf00      	nop
     de8:	3708      	adds	r7, #8
     dea:	46bd      	mov	sp, r7
     dec:	bd80      	pop	{r7, pc}
     dee:	bf00      	nop
     df0:	20000e5c 	.word	0x20000e5c
     df4:	00002b11 	.word	0x00002b11
     df8:	20000000 	.word	0x20000000
     dfc:	00002b2b 	.word	0x00002b2b
     e00:	0001949d 	.word	0x0001949d
     e04:	20000e70 	.word	0x20000e70
     e08:	00000e35 	.word	0x00000e35
     e0c:	00000e4f 	.word	0x00000e4f
     e10:	20000e7c 	.word	0x20000e7c
     e14:	00000c21 	.word	0x00000c21
     e18:	00000c95 	.word	0x00000c95
     e1c:	2000115c 	.word	0x2000115c

00000e20 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     e20:	b580      	push	{r7, lr}
     e22:	af00      	add	r7, sp, #0
     e24:	f64f 71ff 	movw	r1, #65535	; 0xffff
     e28:	2001      	movs	r0, #1
     e2a:	4b01      	ldr	r3, [pc, #4]	; (e30 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     e2c:	4798      	blx	r3
     e2e:	bd80      	pop	{r7, pc}
     e30:	00000d8d 	.word	0x00000d8d

00000e34 <_ZN10CBIT_ClassC1Ev>:


#include "CBIT_Class.h"

// default constructor
CBIT_Class::CBIT_Class()
     e34:	b480      	push	{r7}
     e36:	b083      	sub	sp, #12
     e38:	af00      	add	r7, sp, #0
     e3a:	6078      	str	r0, [r7, #4]
{
	isOK=true;
     e3c:	687b      	ldr	r3, [r7, #4]
     e3e:	2201      	movs	r2, #1
     e40:	701a      	strb	r2, [r3, #0]
} //CBIT_Class
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	4618      	mov	r0, r3
     e46:	370c      	adds	r7, #12
     e48:	46bd      	mov	sp, r7
     e4a:	bc80      	pop	{r7}
     e4c:	4770      	bx	lr

00000e4e <_ZN10CBIT_ClassD1Ev>:

// default destructor
CBIT_Class::~CBIT_Class()
     e4e:	b480      	push	{r7}
     e50:	b083      	sub	sp, #12
     e52:	af00      	add	r7, sp, #0
     e54:	6078      	str	r0, [r7, #4]
{
} //~CBIT_Class
     e56:	687b      	ldr	r3, [r7, #4]
     e58:	4618      	mov	r0, r3
     e5a:	370c      	adds	r7, #12
     e5c:	46bd      	mov	sp, r7
     e5e:	bc80      	pop	{r7}
     e60:	4770      	bx	lr

00000e62 <_ZN10CBIT_Class4IsOKEv>:

bool	CBIT_Class::IsOK(void){
     e62:	b480      	push	{r7}
     e64:	b083      	sub	sp, #12
     e66:	af00      	add	r7, sp, #0
     e68:	6078      	str	r0, [r7, #4]
	return	isOK;
     e6a:	687b      	ldr	r3, [r7, #4]
     e6c:	781b      	ldrb	r3, [r3, #0]
     e6e:	b2db      	uxtb	r3, r3
}
     e70:	4618      	mov	r0, r3
     e72:	370c      	adds	r7, #12
     e74:	46bd      	mov	sp, r7
     e76:	bc80      	pop	{r7}
     e78:	4770      	bx	lr
	...

00000e7c <_Z41__static_initialization_and_destruction_0ii>:
CBIT_Class::operator bool(){
	return	isOK;
}
     e7c:	b580      	push	{r7, lr}
     e7e:	b082      	sub	sp, #8
     e80:	af00      	add	r7, sp, #0
     e82:	6078      	str	r0, [r7, #4]
     e84:	6039      	str	r1, [r7, #0]
     e86:	687b      	ldr	r3, [r7, #4]
     e88:	2b01      	cmp	r3, #1
     e8a:	d10c      	bne.n	ea6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     e8c:	683b      	ldr	r3, [r7, #0]
     e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     e92:	4293      	cmp	r3, r2
     e94:	d107      	bne.n	ea6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     e96:	4806      	ldr	r0, [pc, #24]	; (eb0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     e98:	4b06      	ldr	r3, [pc, #24]	; (eb4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     e9a:	4798      	blx	r3
     e9c:	4a06      	ldr	r2, [pc, #24]	; (eb8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     e9e:	4907      	ldr	r1, [pc, #28]	; (ebc <_Z41__static_initialization_and_destruction_0ii+0x40>)
     ea0:	4803      	ldr	r0, [pc, #12]	; (eb0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     ea2:	4b07      	ldr	r3, [pc, #28]	; (ec0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     ea4:	4798      	blx	r3
     ea6:	bf00      	nop
     ea8:	3708      	adds	r7, #8
     eaa:	46bd      	mov	sp, r7
     eac:	bd80      	pop	{r7, pc}
     eae:	bf00      	nop
     eb0:	20001440 	.word	0x20001440
     eb4:	00000e35 	.word	0x00000e35
     eb8:	20000000 	.word	0x20000000
     ebc:	00000e4f 	.word	0x00000e4f
     ec0:	0001949d 	.word	0x0001949d

00000ec4 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
     ec4:	b580      	push	{r7, lr}
     ec6:	af00      	add	r7, sp, #0
     ec8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     ecc:	2001      	movs	r0, #1
     ece:	4b01      	ldr	r3, [pc, #4]	; (ed4 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x10>)
     ed0:	4798      	blx	r3
     ed2:	bd80      	pop	{r7, pc}
     ed4:	00000e7d 	.word	0x00000e7d

00000ed8 <_ZN17ConfigState_ClassC1Ev>:

} ;


// default constructor
ConfigState_Class::ConfigState_Class()
     ed8:	b480      	push	{r7}
     eda:	b083      	sub	sp, #12
     edc:	af00      	add	r7, sp, #0
     ede:	6078      	str	r0, [r7, #4]
     ee0:	4a13      	ldr	r2, [pc, #76]	; (f30 <_ZN17ConfigState_ClassC1Ev+0x58>)
     ee2:	687b      	ldr	r3, [r7, #4]
     ee4:	601a      	str	r2, [r3, #0]
{
	defaultState.currentState = kHVACStateReset;
     ee6:	687b      	ldr	r3, [r7, #4]
     ee8:	f240 122d 	movw	r2, #301	; 0x12d
     eec:	631a      	str	r2, [r3, #48]	; 0x30
	defaultState.callingState = kHVACStateReset;
     eee:	687b      	ldr	r3, [r7, #4]
     ef0:	f240 122d 	movw	r2, #301	; 0x12d
     ef4:	635a      	str	r2, [r3, #52]	; 0x34
	defaultState.internalCateringState = 0;
     ef6:	687b      	ldr	r3, [r7, #4]
     ef8:	2200      	movs	r2, #0
     efa:	639a      	str	r2, [r3, #56]	; 0x38
	//defaultState.targetUDC = 0.0;
	defaultState.cycleDuration = 0;
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	2200      	movs	r2, #0
     f00:	64da      	str	r2, [r3, #76]	; 0x4c
	defaultState.inStateTime = 0;
     f02:	687b      	ldr	r3, [r7, #4]
     f04:	2200      	movs	r2, #0
     f06:	645a      	str	r2, [r3, #68]	; 0x44
	defaultState.remainingTime = 0;
     f08:	687b      	ldr	r3, [r7, #4]
     f0a:	2200      	movs	r2, #0
     f0c:	651a      	str	r2, [r3, #80]	; 0x50
	defaultState.waitingExceededTime = 0;
     f0e:	687b      	ldr	r3, [r7, #4]
     f10:	2200      	movs	r2, #0
     f12:	659a      	str	r2, [r3, #88]	; 0x58
	defaultState.fansOnAfterCateringCycleTime = forever;
     f14:	4b07      	ldr	r3, [pc, #28]	; (f34 <_ZN17ConfigState_ClassC1Ev+0x5c>)
     f16:	681a      	ldr	r2, [r3, #0]
     f18:	687b      	ldr	r3, [r7, #4]
     f1a:	65da      	str	r2, [r3, #92]	; 0x5c
	defaultState.magic=0xCAFEBABE;
     f1c:	687b      	ldr	r3, [r7, #4]
     f1e:	4a06      	ldr	r2, [pc, #24]	; (f38 <_ZN17ConfigState_ClassC1Ev+0x60>)
     f20:	605a      	str	r2, [r3, #4]
} //ConfigState_Class
     f22:	687b      	ldr	r3, [r7, #4]
     f24:	4618      	mov	r0, r3
     f26:	370c      	adds	r7, #12
     f28:	46bd      	mov	sp, r7
     f2a:	bc80      	pop	{r7}
     f2c:	4770      	bx	lr
     f2e:	bf00      	nop
     f30:	0001fe24 	.word	0x0001fe24
     f34:	00021724 	.word	0x00021724
     f38:	cafebabe 	.word	0xcafebabe

00000f3c <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
     f3c:	b480      	push	{r7}
     f3e:	b083      	sub	sp, #12
     f40:	af00      	add	r7, sp, #0
     f42:	6078      	str	r0, [r7, #4]
     f44:	4a04      	ldr	r2, [pc, #16]	; (f58 <_ZN17ConfigState_ClassD1Ev+0x1c>)
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	601a      	str	r2, [r3, #0]
{
} //~ConfigState_Class
     f4a:	687b      	ldr	r3, [r7, #4]
     f4c:	4618      	mov	r0, r3
     f4e:	370c      	adds	r7, #12
     f50:	46bd      	mov	sp, r7
     f52:	bc80      	pop	{r7}
     f54:	4770      	bx	lr
     f56:	bf00      	nop
     f58:	0001fe24 	.word	0x0001fe24

00000f5c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb>:

void ConfigState_Class::SetFactoryDefaults(uint32_t subPartNumber, bool config, bool cycles)
{
     f5c:	b580      	push	{r7, lr}
     f5e:	b084      	sub	sp, #16
     f60:	af00      	add	r7, sp, #0
     f62:	60f8      	str	r0, [r7, #12]
     f64:	60b9      	str	r1, [r7, #8]
     f66:	4611      	mov	r1, r2
     f68:	461a      	mov	r2, r3
     f6a:	460b      	mov	r3, r1
     f6c:	71fb      	strb	r3, [r7, #7]
     f6e:	4613      	mov	r3, r2
     f70:	71bb      	strb	r3, [r7, #6]
	
	if (config)
     f72:	79fb      	ldrb	r3, [r7, #7]
     f74:	2b00      	cmp	r3, #0
     f76:	d010      	beq.n	f9a <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x3e>
	{
		memcpy(&configuration, &factoryDefaultsConfiguration, sizeof(configuration));
     f78:	68fb      	ldr	r3, [r7, #12]
     f7a:	3374      	adds	r3, #116	; 0x74
     f7c:	22ac      	movs	r2, #172	; 0xac
     f7e:	4909      	ldr	r1, [pc, #36]	; (fa4 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x48>)
     f80:	4618      	mov	r0, r3
     f82:	4b09      	ldr	r3, [pc, #36]	; (fa8 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x4c>)
     f84:	4798      	blx	r3
		configuration.commons.subPartNumber = subPartNumber;
     f86:	68fb      	ldr	r3, [r7, #12]
     f88:	68ba      	ldr	r2, [r7, #8]
     f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		memory.writeConfigurationDataArea(configuration);
     f8e:	68fb      	ldr	r3, [r7, #12]
     f90:	3374      	adds	r3, #116	; 0x74
     f92:	4619      	mov	r1, r3
     f94:	4805      	ldr	r0, [pc, #20]	; (fac <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x50>)
     f96:	4b06      	ldr	r3, [pc, #24]	; (fb0 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x54>)
     f98:	4798      	blx	r3
	}
	
	
}
     f9a:	bf00      	nop
     f9c:	3710      	adds	r7, #16
     f9e:	46bd      	mov	sp, r7
     fa0:	bd80      	pop	{r7, pc}
     fa2:	bf00      	nop
     fa4:	0001fa10 	.word	0x0001fa10
     fa8:	0001bc05 	.word	0x0001bc05
     fac:	20002d6c 	.word	0x20002d6c
     fb0:	00002c3d 	.word	0x00002c3d

00000fb4 <_ZN17ConfigState_Class15SetInitialStateEv>:


uint32_t ConfigState_Class::SetInitialState(){
     fb4:	b580      	push	{r7, lr}
     fb6:	b084      	sub	sp, #16
     fb8:	af00      	add	r7, sp, #0
     fba:	6078      	str	r0, [r7, #4]
		uint32_t	r;
		r=memory.ReadApplicationState(lastHVACState);
     fbc:	687b      	ldr	r3, [r7, #4]
     fbe:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
     fc2:	4619      	mov	r1, r3
     fc4:	4823      	ldr	r0, [pc, #140]	; (1054 <_ZN17ConfigState_Class15SetInitialStateEv+0xa0>)
     fc6:	4b24      	ldr	r3, [pc, #144]	; (1058 <_ZN17ConfigState_Class15SetInitialStateEv+0xa4>)
     fc8:	4798      	blx	r3
     fca:	60f8      	str	r0, [r7, #12]
		if (memory.IsStateDataValid(lastHVACState))
     fcc:	687b      	ldr	r3, [r7, #4]
     fce:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
     fd2:	4619      	mov	r1, r3
     fd4:	4821      	ldr	r0, [pc, #132]	; (105c <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
     fd6:	4b22      	ldr	r3, [pc, #136]	; (1060 <_ZN17ConfigState_Class15SetInitialStateEv+0xac>)
     fd8:	4798      	blx	r3
     fda:	4603      	mov	r3, r0
     fdc:	2b00      	cmp	r3, #0
     fde:	d007      	beq.n	ff0 <_ZN17ConfigState_Class15SetInitialStateEv+0x3c>
		{
				hvac.SetCurrentState(lastHVACState);
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
     fe6:	4619      	mov	r1, r3
     fe8:	481e      	ldr	r0, [pc, #120]	; (1064 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     fea:	4b1f      	ldr	r3, [pc, #124]	; (1068 <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
     fec:	4798      	blx	r3
     fee:	e02b      	b.n	1048 <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
		} 
		else
		{	
			r=memory.ReadFastApplicationState(lastHVACState);
     ff0:	687b      	ldr	r3, [r7, #4]
     ff2:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
     ff6:	4619      	mov	r1, r3
     ff8:	481c      	ldr	r0, [pc, #112]	; (106c <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
     ffa:	4b1d      	ldr	r3, [pc, #116]	; (1070 <_ZN17ConfigState_Class15SetInitialStateEv+0xbc>)
     ffc:	4798      	blx	r3
     ffe:	60f8      	str	r0, [r7, #12]
			if (memory.IsFastStateDataValid(lastHVACState))
    1000:	687b      	ldr	r3, [r7, #4]
    1002:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
    1006:	4619      	mov	r1, r3
    1008:	4814      	ldr	r0, [pc, #80]	; (105c <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
    100a:	4b1a      	ldr	r3, [pc, #104]	; (1074 <_ZN17ConfigState_Class15SetInitialStateEv+0xc0>)
    100c:	4798      	blx	r3
    100e:	4603      	mov	r3, r0
    1010:	2b00      	cmp	r3, #0
    1012:	d00e      	beq.n	1032 <_ZN17ConfigState_Class15SetInitialStateEv+0x7e>
			{
				hvac.SetCurrentState(lastHVACState);
    1014:	687b      	ldr	r3, [r7, #4]
    1016:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
    101a:	4619      	mov	r1, r3
    101c:	4811      	ldr	r0, [pc, #68]	; (1064 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
    101e:	4b12      	ldr	r3, [pc, #72]	; (1068 <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
    1020:	4798      	blx	r3
				memory.SaveApplicationState(lastHVACState);
    1022:	687b      	ldr	r3, [r7, #4]
    1024:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
    1028:	4619      	mov	r1, r3
    102a:	4813      	ldr	r0, [pc, #76]	; (1078 <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
    102c:	4b13      	ldr	r3, [pc, #76]	; (107c <_ZN17ConfigState_Class15SetInitialStateEv+0xc8>)
    102e:	4798      	blx	r3
    1030:	e00a      	b.n	1048 <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
			} 
			else
			{
				hvac.SetDefaultState();
    1032:	480c      	ldr	r0, [pc, #48]	; (1064 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
    1034:	4b12      	ldr	r3, [pc, #72]	; (1080 <_ZN17ConfigState_Class15SetInitialStateEv+0xcc>)
    1036:	4798      	blx	r3
				memory.WriteValidApplicationState(hvac.defaultState);
    1038:	4912      	ldr	r1, [pc, #72]	; (1084 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
    103a:	480f      	ldr	r0, [pc, #60]	; (1078 <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
    103c:	4b12      	ldr	r3, [pc, #72]	; (1088 <_ZN17ConfigState_Class15SetInitialStateEv+0xd4>)
    103e:	4798      	blx	r3
				memory.WriteFastCurrentState(hvac.defaultState);
    1040:	4910      	ldr	r1, [pc, #64]	; (1084 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
    1042:	480a      	ldr	r0, [pc, #40]	; (106c <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
    1044:	4b11      	ldr	r3, [pc, #68]	; (108c <_ZN17ConfigState_Class15SetInitialStateEv+0xd8>)
    1046:	4798      	blx	r3
			}
					
		
		}

		return r;
    1048:	68fb      	ldr	r3, [r7, #12]
	};
    104a:	4618      	mov	r0, r3
    104c:	3710      	adds	r7, #16
    104e:	46bd      	mov	sp, r7
    1050:	bd80      	pop	{r7, pc}
    1052:	bf00      	nop
    1054:	20002f10 	.word	0x20002f10
    1058:	00002a7d 	.word	0x00002a7d
    105c:	20002d6c 	.word	0x20002d6c
    1060:	00002ce9 	.word	0x00002ce9
    1064:	200083d0 	.word	0x200083d0
    1068:	00003bd1 	.word	0x00003bd1
    106c:	20002f00 	.word	0x20002f00
    1070:	000016d5 	.word	0x000016d5
    1074:	00002d2d 	.word	0x00002d2d
    1078:	20002880 	.word	0x20002880
    107c:	000025fd 	.word	0x000025fd
    1080:	0000123d 	.word	0x0000123d
    1084:	200083d4 	.word	0x200083d4
    1088:	00002511 	.word	0x00002511
    108c:	0000175d 	.word	0x0000175d

00001090 <_ZN17ConfigState_Class23ConvertStatusArincLabelEv>:
	
uint32_t	ConfigState_Class::ConvertStatusArincLabel(void){
    1090:	b480      	push	{r7}
    1092:	b085      	sub	sp, #20
    1094:	af00      	add	r7, sp, #0
    1096:	6078      	str	r0, [r7, #4]
	uint32_t s=0;
    1098:	2300      	movs	r3, #0
    109a:	60fb      	str	r3, [r7, #12]
	AcknoledgeStatus as=hvac.hvacState->arincStatus;
    109c:	4b14      	ldr	r3, [pc, #80]	; (10f0 <_ZN17ConfigState_Class23ConvertStatusArincLabelEv+0x60>)
    109e:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    10a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    10a4:	60bb      	str	r3, [r7, #8]
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    10a6:	7a3b      	ldrb	r3, [r7, #8]
    10a8:	461a      	mov	r2, r3
    10aa:	7a7b      	ldrb	r3, [r7, #9]
    10ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
    10b0:	b2db      	uxtb	r3, r3
    10b2:	009b      	lsls	r3, r3, #2
    10b4:	431a      	orrs	r2, r3
	(((uint32_t)as.PLT_AUTO_FAN)<<3)|(((uint32_t)as.CPG_AUTO_FAN)<<4)
    10b6:	7a7b      	ldrb	r3, [r7, #9]
    10b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
    10bc:	b2db      	uxtb	r3, r3
    10be:	00db      	lsls	r3, r3, #3
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    10c0:	431a      	orrs	r2, r3
	(((uint32_t)as.PLT_AUTO_FAN)<<3)|(((uint32_t)as.CPG_AUTO_FAN)<<4)
    10c2:	7a7b      	ldrb	r3, [r7, #9]
    10c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    10c8:	b2db      	uxtb	r3, r3
    10ca:	011b      	lsls	r3, r3, #4
    10cc:	431a      	orrs	r2, r3
	//|(((uint32_t)0x1d)<<9)
	|(((uint32_t)as.statusFV)<<5)|(((uint32_t)as.DEFOG)<<7);
    10ce:	7abb      	ldrb	r3, [r7, #10]
    10d0:	015b      	lsls	r3, r3, #5
    10d2:	431a      	orrs	r2, r3
    10d4:	7afb      	ldrb	r3, [r7, #11]
    10d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
    10da:	b2db      	uxtb	r3, r3
    10dc:	01db      	lsls	r3, r3, #7
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    10de:	4313      	orrs	r3, r2
    10e0:	60fb      	str	r3, [r7, #12]
	return s;
    10e2:	68fb      	ldr	r3, [r7, #12]
}	
    10e4:	4618      	mov	r0, r3
    10e6:	3714      	adds	r7, #20
    10e8:	46bd      	mov	sp, r7
    10ea:	bc80      	pop	{r7}
    10ec:	4770      	bx	lr
    10ee:	bf00      	nop
    10f0:	200083d0 	.word	0x200083d0

000010f4 <_ZN17ConfigState_Class10PrintStateEv>:
		st=is;
	}
	s=uint32_t(st.rawStatus);
	return	s;
}
void	ConfigState_Class::PrintState(void){
    10f4:	b580      	push	{r7, lr}
    10f6:	b0a4      	sub	sp, #144	; 0x90
    10f8:	af00      	add	r7, sp, #0
    10fa:	6078      	str	r0, [r7, #4]
	HVACState	hs;
	bool	done=false;
    10fc:	2300      	movs	r3, #0
    10fe:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	hvac.GetCurrentState(hs);
    1102:	f107 030c 	add.w	r3, r7, #12
    1106:	4619      	mov	r1, r3
    1108:	483e      	ldr	r0, [pc, #248]	; (1204 <_ZN17ConfigState_Class10PrintStateEv+0x110>)
    110a:	4b3f      	ldr	r3, [pc, #252]	; (1208 <_ZN17ConfigState_Class10PrintStateEv+0x114>)
    110c:	4798      	blx	r3
	uint32_t	nowTime=(uint32_t)hs.now;
    110e:	693b      	ldr	r3, [r7, #16]
    1110:	60bb      	str	r3, [r7, #8]
	char *act=ctime((time_t *)&nowTime);
    1112:	f107 0308 	add.w	r3, r7, #8
    1116:	4618      	mov	r0, r3
    1118:	4b3c      	ldr	r3, [pc, #240]	; (120c <_ZN17ConfigState_Class10PrintStateEv+0x118>)
    111a:	4798      	blx	r3
    111c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	k=sizeof(printableNamesHVACState)/(sizeof(char*));
    1120:	687b      	ldr	r3, [r7, #4]
    1122:	2206      	movs	r2, #6
    1124:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
	for (uint8_t ii = 0; ii < k; ii++)
    1128:	2300      	movs	r3, #0
    112a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    112e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
    1132:	687a      	ldr	r2, [r7, #4]
    1134:	f892 22ae 	ldrb.w	r2, [r2, #686]	; 0x2ae
    1138:	4293      	cmp	r3, r2
    113a:	da5f      	bge.n	11fc <_ZN17ConfigState_Class10PrintStateEv+0x108>
	{
	
		usb<<printableNamesHVACState[ii]<<" : ";
    113c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
    1140:	009b      	lsls	r3, r3, #2
    1142:	4a33      	ldr	r2, [pc, #204]	; (1210 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    1144:	4413      	add	r3, r2
    1146:	4619      	mov	r1, r3
    1148:	4832      	ldr	r0, [pc, #200]	; (1214 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    114a:	4b33      	ldr	r3, [pc, #204]	; (1218 <_ZN17ConfigState_Class10PrintStateEv+0x124>)
    114c:	4798      	blx	r3
    114e:	4603      	mov	r3, r0
    1150:	4932      	ldr	r1, [pc, #200]	; (121c <_ZN17ConfigState_Class10PrintStateEv+0x128>)
    1152:	4618      	mov	r0, r3
    1154:	4b32      	ldr	r3, [pc, #200]	; (1220 <_ZN17ConfigState_Class10PrintStateEv+0x12c>)
    1156:	4798      	blx	r3
	
		switch (ii)
    1158:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
    115c:	2b05      	cmp	r3, #5
    115e:	d83d      	bhi.n	11dc <_ZN17ConfigState_Class10PrintStateEv+0xe8>
    1160:	a201      	add	r2, pc, #4	; (adr r2, 1168 <_ZN17ConfigState_Class10PrintStateEv+0x74>)
    1162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1166:	bf00      	nop
    1168:	00001181 	.word	0x00001181
    116c:	00001193 	.word	0x00001193
    1170:	000011a7 	.word	0x000011a7
    1174:	000011e7 	.word	0x000011e7
    1178:	000011bb 	.word	0x000011bb
    117c:	000011c7 	.word	0x000011c7
		{
			case 0:
				usb<<(uint32_t)hs.currentState;
    1180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1182:	67fb      	str	r3, [r7, #124]	; 0x7c
    1184:	f107 037c 	add.w	r3, r7, #124	; 0x7c
    1188:	4619      	mov	r1, r3
    118a:	4822      	ldr	r0, [pc, #136]	; (1214 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    118c:	4b25      	ldr	r3, [pc, #148]	; (1224 <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    118e:	4798      	blx	r3
			/* Your code here */
			break;
    1190:	e02a      	b.n	11e8 <_ZN17ConfigState_Class10PrintStateEv+0xf4>
			case 1:
				usb<<(uint32_t)hs.cycleDuration;
    1192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    1198:	f107 0380 	add.w	r3, r7, #128	; 0x80
    119c:	4619      	mov	r1, r3
    119e:	481d      	ldr	r0, [pc, #116]	; (1214 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    11a0:	4b20      	ldr	r3, [pc, #128]	; (1224 <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    11a2:	4798      	blx	r3
			/* Your code here */
			break;
    11a4:	e020      	b.n	11e8 <_ZN17ConfigState_Class10PrintStateEv+0xf4>
			case 2:
				usb<<(uint32_t)hs.remainingTime;
    11a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    11a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    11ac:	f107 0384 	add.w	r3, r7, #132	; 0x84
    11b0:	4619      	mov	r1, r3
    11b2:	4818      	ldr	r0, [pc, #96]	; (1214 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    11b4:	4b1b      	ldr	r3, [pc, #108]	; (1224 <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    11b6:	4798      	blx	r3
			/* Your code here */
			break;
    11b8:	e016      	b.n	11e8 <_ZN17ConfigState_Class10PrintStateEv+0xf4>
				//usb<<(uint32_t)hs.targetPower;
			/* Your code here */
			break;
			case 4:
				
				usb.print(act);
    11ba:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
    11be:	4815      	ldr	r0, [pc, #84]	; (1214 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    11c0:	4b19      	ldr	r3, [pc, #100]	; (1228 <_ZN17ConfigState_Class10PrintStateEv+0x134>)
    11c2:	4798      	blx	r3
			/* Your code here */
			break;
    11c4:	e010      	b.n	11e8 <_ZN17ConfigState_Class10PrintStateEv+0xf4>
			case 5:
				usb<<"0x";
    11c6:	4919      	ldr	r1, [pc, #100]	; (122c <_ZN17ConfigState_Class10PrintStateEv+0x138>)
    11c8:	4812      	ldr	r0, [pc, #72]	; (1214 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    11ca:	4b19      	ldr	r3, [pc, #100]	; (1230 <_ZN17ConfigState_Class10PrintStateEv+0x13c>)
    11cc:	4798      	blx	r3
				usb.print(hs.magic,HEX);
    11ce:	68fb      	ldr	r3, [r7, #12]
    11d0:	2210      	movs	r2, #16
    11d2:	4619      	mov	r1, r3
    11d4:	480f      	ldr	r0, [pc, #60]	; (1214 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    11d6:	4b17      	ldr	r3, [pc, #92]	; (1234 <_ZN17ConfigState_Class10PrintStateEv+0x140>)
    11d8:	4798      	blx	r3
			
				/* Your code here */
			break;
    11da:	e005      	b.n	11e8 <_ZN17ConfigState_Class10PrintStateEv+0xf4>
			default:
				i=sizeof(printableNamesHVACState);
    11dc:	687b      	ldr	r3, [r7, #4]
    11de:	2218      	movs	r2, #24
    11e0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
				
			/* Your code here */
			break;
    11e4:	e000      	b.n	11e8 <_ZN17ConfigState_Class10PrintStateEv+0xf4>
			break;
    11e6:	bf00      	nop
		}
		usb<<NEWLINE;
    11e8:	4913      	ldr	r1, [pc, #76]	; (1238 <_ZN17ConfigState_Class10PrintStateEv+0x144>)
    11ea:	480a      	ldr	r0, [pc, #40]	; (1214 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    11ec:	4b10      	ldr	r3, [pc, #64]	; (1230 <_ZN17ConfigState_Class10PrintStateEv+0x13c>)
    11ee:	4798      	blx	r3
	for (uint8_t ii = 0; ii < k; ii++)
    11f0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
    11f4:	3301      	adds	r3, #1
    11f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    11fa:	e798      	b.n	112e <_ZN17ConfigState_Class10PrintStateEv+0x3a>
			
	}
	
}
    11fc:	bf00      	nop
    11fe:	3790      	adds	r7, #144	; 0x90
    1200:	46bd      	mov	sp, r7
    1202:	bd80      	pop	{r7, pc}
    1204:	200083d0 	.word	0x200083d0
    1208:	00003b7d 	.word	0x00003b7d
    120c:	0001b91d 	.word	0x0001b91d
    1210:	20000050 	.word	0x20000050
    1214:	2000144c 	.word	0x2000144c
    1218:	00001261 	.word	0x00001261
    121c:	0001fe10 	.word	0x0001fe10
    1220:	00001285 	.word	0x00001285
    1224:	000012a5 	.word	0x000012a5
    1228:	00017dfd 	.word	0x00017dfd
    122c:	0001fe14 	.word	0x0001fe14
    1230:	00000afd 	.word	0x00000afd
    1234:	00017e45 	.word	0x00017e45
    1238:	0001fe18 	.word	0x0001fe18

0000123c <_ZN17ConfigState_Class15SetDefaultStateEv>:
void	ConfigState_Class::SetDefaultState(void){
    123c:	b580      	push	{r7, lr}
    123e:	b082      	sub	sp, #8
    1240:	af00      	add	r7, sp, #0
    1242:	6078      	str	r0, [r7, #4]
	hvac.SetCurrentState(defaultState);
    1244:	687b      	ldr	r3, [r7, #4]
    1246:	3304      	adds	r3, #4
    1248:	4619      	mov	r1, r3
    124a:	4803      	ldr	r0, [pc, #12]	; (1258 <_ZN17ConfigState_Class15SetDefaultStateEv+0x1c>)
    124c:	4b03      	ldr	r3, [pc, #12]	; (125c <_ZN17ConfigState_Class15SetDefaultStateEv+0x20>)
    124e:	4798      	blx	r3

}
    1250:	bf00      	nop
    1252:	3708      	adds	r7, #8
    1254:	46bd      	mov	sp, r7
    1256:	bd80      	pop	{r7, pc}
    1258:	200083d0 	.word	0x200083d0
    125c:	00003bd1 	.word	0x00003bd1

00001260 <_ZlsIPKcER5PrintS3_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1260:	b580      	push	{r7, lr}
    1262:	b082      	sub	sp, #8
    1264:	af00      	add	r7, sp, #0
    1266:	6078      	str	r0, [r7, #4]
    1268:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    126a:	683b      	ldr	r3, [r7, #0]
    126c:	681b      	ldr	r3, [r3, #0]
    126e:	4619      	mov	r1, r3
    1270:	6878      	ldr	r0, [r7, #4]
    1272:	4b03      	ldr	r3, [pc, #12]	; (1280 <_ZlsIPKcER5PrintS3_RKT_+0x20>)
    1274:	4798      	blx	r3
    1276:	687b      	ldr	r3, [r7, #4]
    1278:	4618      	mov	r0, r3
    127a:	3708      	adds	r7, #8
    127c:	46bd      	mov	sp, r7
    127e:	bd80      	pop	{r7, pc}
    1280:	00017dfd 	.word	0x00017dfd

00001284 <_ZlsIA4_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1284:	b580      	push	{r7, lr}
    1286:	b082      	sub	sp, #8
    1288:	af00      	add	r7, sp, #0
    128a:	6078      	str	r0, [r7, #4]
    128c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    128e:	6839      	ldr	r1, [r7, #0]
    1290:	6878      	ldr	r0, [r7, #4]
    1292:	4b03      	ldr	r3, [pc, #12]	; (12a0 <_ZlsIA4_cER5PrintS2_RKT_+0x1c>)
    1294:	4798      	blx	r3
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	4618      	mov	r0, r3
    129a:	3708      	adds	r7, #8
    129c:	46bd      	mov	sp, r7
    129e:	bd80      	pop	{r7, pc}
    12a0:	00017dfd 	.word	0x00017dfd

000012a4 <_ZlsImER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    12a4:	b580      	push	{r7, lr}
    12a6:	b082      	sub	sp, #8
    12a8:	af00      	add	r7, sp, #0
    12aa:	6078      	str	r0, [r7, #4]
    12ac:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	220a      	movs	r2, #10
    12b4:	4619      	mov	r1, r3
    12b6:	6878      	ldr	r0, [r7, #4]
    12b8:	4b03      	ldr	r3, [pc, #12]	; (12c8 <_ZlsImER5PrintS1_RKT_+0x24>)
    12ba:	4798      	blx	r3
    12bc:	687b      	ldr	r3, [r7, #4]
    12be:	4618      	mov	r0, r3
    12c0:	3708      	adds	r7, #8
    12c2:	46bd      	mov	sp, r7
    12c4:	bd80      	pop	{r7, pc}
    12c6:	bf00      	nop
    12c8:	00017e45 	.word	0x00017e45

000012cc <_Z41__static_initialization_and_destruction_0ii>:
    12cc:	b580      	push	{r7, lr}
    12ce:	b082      	sub	sp, #8
    12d0:	af00      	add	r7, sp, #0
    12d2:	6078      	str	r0, [r7, #4]
    12d4:	6039      	str	r1, [r7, #0]
    12d6:	687b      	ldr	r3, [r7, #4]
    12d8:	2b01      	cmp	r3, #1
    12da:	d10c      	bne.n	12f6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    12dc:	683b      	ldr	r3, [r7, #0]
    12de:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12e2:	4293      	cmp	r3, r2
    12e4:	d107      	bne.n	12f6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    12e6:	4806      	ldr	r0, [pc, #24]	; (1300 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    12e8:	4b06      	ldr	r3, [pc, #24]	; (1304 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    12ea:	4798      	blx	r3
    12ec:	4a06      	ldr	r2, [pc, #24]	; (1308 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    12ee:	4907      	ldr	r1, [pc, #28]	; (130c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    12f0:	4803      	ldr	r0, [pc, #12]	; (1300 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    12f2:	4b07      	ldr	r3, [pc, #28]	; (1310 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    12f4:	4798      	blx	r3
    12f6:	bf00      	nop
    12f8:	3708      	adds	r7, #8
    12fa:	46bd      	mov	sp, r7
    12fc:	bd80      	pop	{r7, pc}
    12fe:	bf00      	nop
    1300:	2000144c 	.word	0x2000144c
    1304:	000178dd 	.word	0x000178dd
    1308:	20000000 	.word	0x20000000
    130c:	00017925 	.word	0x00017925
    1310:	0001949d 	.word	0x0001949d

00001314 <_GLOBAL__sub_I_gainStateDescription>:
    1314:	b580      	push	{r7, lr}
    1316:	af00      	add	r7, sp, #0
    1318:	f64f 71ff 	movw	r1, #65535	; 0xffff
    131c:	2001      	movs	r0, #1
    131e:	4b01      	ldr	r3, [pc, #4]	; (1324 <_GLOBAL__sub_I_gainStateDescription+0x10>)
    1320:	4798      	blx	r3
    1322:	bd80      	pop	{r7, pc}
    1324:	000012cd 	.word	0x000012cd

00001328 <_ZN11CRC32_ClassC1Ev>:

#include "CRC32_Class.h"
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
    1328:	b480      	push	{r7}
    132a:	b083      	sub	sp, #12
    132c:	af00      	add	r7, sp, #0
    132e:	6078      	str	r0, [r7, #4]
{
} //CRC32_Class
    1330:	687b      	ldr	r3, [r7, #4]
    1332:	4618      	mov	r0, r3
    1334:	370c      	adds	r7, #12
    1336:	46bd      	mov	sp, r7
    1338:	bc80      	pop	{r7}
    133a:	4770      	bx	lr

0000133c <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
{
} //~CRC32_Class
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	4618      	mov	r0, r3
    1348:	370c      	adds	r7, #12
    134a:	46bd      	mov	sp, r7
    134c:	bc80      	pop	{r7}
    134e:	4770      	bx	lr

00001350 <_ZN11CRC32_Class4InitEm>:

uint32_t	CRC32_Class::Init(uint32_t refCRC/* =0xFFFFFFFF */){
    1350:	b580      	push	{r7, lr}
    1352:	b082      	sub	sp, #8
    1354:	af00      	add	r7, sp, #0
    1356:	6078      	str	r0, [r7, #4]
    1358:	6039      	str	r1, [r7, #0]
	crc_sync_enable(&CRC_CALC);
    135a:	4806      	ldr	r0, [pc, #24]	; (1374 <_ZN11CRC32_Class4InitEm+0x24>)
    135c:	4b06      	ldr	r3, [pc, #24]	; (1378 <_ZN11CRC32_Class4InitEm+0x28>)
    135e:	4798      	blx	r3
	refCRC32=refCRC;
    1360:	687b      	ldr	r3, [r7, #4]
    1362:	683a      	ldr	r2, [r7, #0]
    1364:	601a      	str	r2, [r3, #0]
	return	refCRC32;
    1366:	687b      	ldr	r3, [r7, #4]
    1368:	681b      	ldr	r3, [r3, #0]
}
    136a:	4618      	mov	r0, r3
    136c:	3708      	adds	r7, #8
    136e:	46bd      	mov	sp, r7
    1370:	bd80      	pop	{r7, pc}
    1372:	bf00      	nop
    1374:	2000ab6c 	.word	0x2000ab6c
    1378:	00005ed1 	.word	0x00005ed1

0000137c <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    137c:	b590      	push	{r4, r7, lr}
    137e:	b083      	sub	sp, #12
    1380:	af00      	add	r7, sp, #0
    1382:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
    1384:	4b07      	ldr	r3, [pc, #28]	; (13a4 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
    1386:	6878      	ldr	r0, [r7, #4]
    1388:	4798      	blx	r3
    138a:	4603      	mov	r3, r0
    138c:	460c      	mov	r4, r1
    138e:	4618      	mov	r0, r3
    1390:	4621      	mov	r1, r4
    1392:	4b05      	ldr	r3, [pc, #20]	; (13a8 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x2c>)
    1394:	4798      	blx	r3
    1396:	4603      	mov	r3, r0
    1398:	460c      	mov	r4, r1
    139a:	4618      	mov	r0, r3
    139c:	4621      	mov	r1, r4
    139e:	370c      	adds	r7, #12
    13a0:	46bd      	mov	sp, r7
    13a2:	bd90      	pop	{r4, r7, pc}
    13a4:	0001a999 	.word	0x0001a999
    13a8:	000194b1 	.word	0x000194b1

000013ac <_ZN11CRC32_Class12CalculateCRCEPmm>:
	uint32_t	lenght32=(uint32_t)floor(len/4);
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
	return (crc^0xFFFFFFFF);
}

uint32_t	CRC32_Class::CalculateCRC(uint32_t *const data, const uint32_t len){
    13ac:	b590      	push	{r4, r7, lr}
    13ae:	b087      	sub	sp, #28
    13b0:	af00      	add	r7, sp, #0
    13b2:	60f8      	str	r0, [r7, #12]
    13b4:	60b9      	str	r1, [r7, #8]
    13b6:	607a      	str	r2, [r7, #4]
	uint32_t	lenght32=(uint32_t)floor(len/4);
    13b8:	687b      	ldr	r3, [r7, #4]
    13ba:	089b      	lsrs	r3, r3, #2
    13bc:	4618      	mov	r0, r3
    13be:	4b0f      	ldr	r3, [pc, #60]	; (13fc <_ZN11CRC32_Class12CalculateCRCEPmm+0x50>)
    13c0:	4798      	blx	r3
    13c2:	460a      	mov	r2, r1
    13c4:	4601      	mov	r1, r0
    13c6:	4b0e      	ldr	r3, [pc, #56]	; (1400 <_ZN11CRC32_Class12CalculateCRCEPmm+0x54>)
    13c8:	4608      	mov	r0, r1
    13ca:	4611      	mov	r1, r2
    13cc:	4798      	blx	r3
    13ce:	4603      	mov	r3, r0
    13d0:	617b      	str	r3, [r7, #20]
	uint32_t crc=Init();
    13d2:	f04f 31ff 	mov.w	r1, #4294967295
    13d6:	68f8      	ldr	r0, [r7, #12]
    13d8:	4b0a      	ldr	r3, [pc, #40]	; (1404 <_ZN11CRC32_Class12CalculateCRCEPmm+0x58>)
    13da:	4798      	blx	r3
    13dc:	4603      	mov	r3, r0
    13de:	613b      	str	r3, [r7, #16]
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
    13e0:	f107 0310 	add.w	r3, r7, #16
    13e4:	697a      	ldr	r2, [r7, #20]
    13e6:	68b9      	ldr	r1, [r7, #8]
    13e8:	4807      	ldr	r0, [pc, #28]	; (1408 <_ZN11CRC32_Class12CalculateCRCEPmm+0x5c>)
    13ea:	4c08      	ldr	r4, [pc, #32]	; (140c <_ZN11CRC32_Class12CalculateCRCEPmm+0x60>)
    13ec:	47a0      	blx	r4
	return (crc^0xFFFFFFFF);
    13ee:	693b      	ldr	r3, [r7, #16]
    13f0:	43db      	mvns	r3, r3
    13f2:	4618      	mov	r0, r3
    13f4:	371c      	adds	r7, #28
    13f6:	46bd      	mov	sp, r7
    13f8:	bd90      	pop	{r4, r7, pc}
    13fa:	bf00      	nop
    13fc:	0000137d 	.word	0x0000137d
    1400:	0001afe5 	.word	0x0001afe5
    1404:	00001351 	.word	0x00001351
    1408:	2000ab6c 	.word	0x2000ab6c
    140c:	00005f0d 	.word	0x00005f0d

00001410 <_ZN15DataLoger_ClassC1Ev>:
#include "ConfigurationData.h"
#include "FlashHandler_Class.h"
#include "N25Q256_Class.h"

// default constructor
DataLoger_Class::DataLoger_Class()
    1410:	b580      	push	{r7, lr}
    1412:	b082      	sub	sp, #8
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	687b      	ldr	r3, [r7, #4]
    141a:	4618      	mov	r0, r3
    141c:	4b06      	ldr	r3, [pc, #24]	; (1438 <_ZN15DataLoger_ClassC1Ev+0x28>)
    141e:	4798      	blx	r3
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
    1426:	4618      	mov	r0, r3
    1428:	4b04      	ldr	r3, [pc, #16]	; (143c <_ZN15DataLoger_ClassC1Ev+0x2c>)
    142a:	4798      	blx	r3
{
} //DataLoger_Class
    142c:	687b      	ldr	r3, [r7, #4]
    142e:	4618      	mov	r0, r3
    1430:	3708      	adds	r7, #8
    1432:	46bd      	mov	sp, r7
    1434:	bd80      	pop	{r7, pc}
    1436:	bf00      	nop
    1438:	000164b1 	.word	0x000164b1
    143c:	00001475 	.word	0x00001475

00001440 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
    1440:	b580      	push	{r7, lr}
    1442:	b082      	sub	sp, #8
    1444:	af00      	add	r7, sp, #0
    1446:	6078      	str	r0, [r7, #4]
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	4618      	mov	r0, r3
    144c:	4b03      	ldr	r3, [pc, #12]	; (145c <_ZN15DataLoger_ClassD1Ev+0x1c>)
    144e:	4798      	blx	r3
{
} //~DataLoger_Class
    1450:	687b      	ldr	r3, [r7, #4]
    1452:	4618      	mov	r0, r3
    1454:	3708      	adds	r7, #8
    1456:	46bd      	mov	sp, r7
    1458:	bd80      	pop	{r7, pc}
    145a:	bf00      	nop
    145c:	000164ed 	.word	0x000164ed

00001460 <_ZN15DataLoger_Class13LogResetEventEv>:
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)PTR_CONFIG_DATA(cd),add,sizeof(dataOnMemory));
	
	return	r;
}

uint32_t	DataLoger_Class::LogResetEvent(void){
    1460:	b480      	push	{r7}
    1462:	b083      	sub	sp, #12
    1464:	af00      	add	r7, sp, #0
    1466:	6078      	str	r0, [r7, #4]
	return 0;
    1468:	2300      	movs	r3, #0
    146a:	4618      	mov	r0, r3
    146c:	370c      	adds	r7, #12
    146e:	46bd      	mov	sp, r7
    1470:	bc80      	pop	{r7}
    1472:	4770      	bx	lr

00001474 <_ZN11RingBufferNILi512EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
    1474:	b580      	push	{r7, lr}
    1476:	b082      	sub	sp, #8
    1478:	af00      	add	r7, sp, #0
    147a:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
    147c:	687b      	ldr	r3, [r7, #4]
    147e:	f44f 7200 	mov.w	r2, #512	; 0x200
    1482:	2100      	movs	r1, #0
    1484:	4618      	mov	r0, r3
    1486:	4b05      	ldr	r3, [pc, #20]	; (149c <_ZN11RingBufferNILi512EEC1Ev+0x28>)
    1488:	4798      	blx	r3
    clear();
    148a:	6878      	ldr	r0, [r7, #4]
    148c:	4b04      	ldr	r3, [pc, #16]	; (14a0 <_ZN11RingBufferNILi512EEC1Ev+0x2c>)
    148e:	4798      	blx	r3
}
    1490:	687b      	ldr	r3, [r7, #4]
    1492:	4618      	mov	r0, r3
    1494:	3708      	adds	r7, #8
    1496:	46bd      	mov	sp, r7
    1498:	bd80      	pop	{r7, pc}
    149a:	bf00      	nop
    149c:	0001bd39 	.word	0x0001bd39
    14a0:	000014a5 	.word	0x000014a5

000014a4 <_ZN11RingBufferNILi512EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
    14a4:	b480      	push	{r7}
    14a6:	b083      	sub	sp, #12
    14a8:	af00      	add	r7, sp, #0
    14aa:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
    14ac:	687b      	ldr	r3, [r7, #4]
    14ae:	2200      	movs	r2, #0
    14b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  _iTail = 0;
    14b4:	687b      	ldr	r3, [r7, #4]
    14b6:	2200      	movs	r2, #0
    14b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
    14bc:	bf00      	nop
    14be:	370c      	adds	r7, #12
    14c0:	46bd      	mov	sp, r7
    14c2:	bc80      	pop	{r7}
    14c4:	4770      	bx	lr
	...

000014c8 <_ZN14DateTime_ClassC1Ev>:

#include "DateTime_Class.h"
#include "FastStorage_Class.h"

// default constructor
DateTime_Class::DateTime_Class()
    14c8:	b580      	push	{r7, lr}
    14ca:	b082      	sub	sp, #8
    14cc:	af00      	add	r7, sp, #0
    14ce:	6078      	str	r0, [r7, #4]
    14d0:	687b      	ldr	r3, [r7, #4]
    14d2:	33a8      	adds	r3, #168	; 0xa8
    14d4:	4618      	mov	r0, r3
    14d6:	4b07      	ldr	r3, [pc, #28]	; (14f4 <_ZN14DateTime_ClassC1Ev+0x2c>)
    14d8:	4798      	blx	r3
    14da:	687b      	ldr	r3, [r7, #4]
    14dc:	4618      	mov	r0, r3
    14de:	4b06      	ldr	r3, [pc, #24]	; (14f8 <_ZN14DateTime_ClassC1Ev+0x30>)
    14e0:	4798      	blx	r3
    14e2:	4a06      	ldr	r2, [pc, #24]	; (14fc <_ZN14DateTime_ClassC1Ev+0x34>)
    14e4:	687b      	ldr	r3, [r7, #4]
    14e6:	601a      	str	r2, [r3, #0]
{
} //DateTime_Class
    14e8:	687b      	ldr	r3, [r7, #4]
    14ea:	4618      	mov	r0, r3
    14ec:	3708      	adds	r7, #8
    14ee:	46bd      	mov	sp, r7
    14f0:	bd80      	pop	{r7, pc}
    14f2:	bf00      	nop
    14f4:	0000166b 	.word	0x0000166b
    14f8:	000168c1 	.word	0x000168c1
    14fc:	0001fe30 	.word	0x0001fe30

00001500 <_ZN14DateTime_ClassD1Ev>:

// default destructor
DateTime_Class::~DateTime_Class()
    1500:	b580      	push	{r7, lr}
    1502:	b082      	sub	sp, #8
    1504:	af00      	add	r7, sp, #0
    1506:	6078      	str	r0, [r7, #4]
    1508:	4a08      	ldr	r2, [pc, #32]	; (152c <_ZN14DateTime_ClassD1Ev+0x2c>)
    150a:	687b      	ldr	r3, [r7, #4]
    150c:	601a      	str	r2, [r3, #0]
    150e:	687b      	ldr	r3, [r7, #4]
    1510:	4618      	mov	r0, r3
    1512:	4b07      	ldr	r3, [pc, #28]	; (1530 <_ZN14DateTime_ClassD1Ev+0x30>)
    1514:	4798      	blx	r3
    1516:	687b      	ldr	r3, [r7, #4]
    1518:	33a8      	adds	r3, #168	; 0xa8
    151a:	4618      	mov	r0, r3
    151c:	4b05      	ldr	r3, [pc, #20]	; (1534 <_ZN14DateTime_ClassD1Ev+0x34>)
    151e:	4798      	blx	r3
{
} //~DateTime_Class
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	4618      	mov	r0, r3
    1524:	3708      	adds	r7, #8
    1526:	46bd      	mov	sp, r7
    1528:	bd80      	pop	{r7, pc}
    152a:	bf00      	nop
    152c:	0001fe30 	.word	0x0001fe30
    1530:	00016931 	.word	0x00016931
    1534:	0000167f 	.word	0x0000167f

00001538 <_ZN14DateTime_Class4InitEv>:

void	DateTime_Class::Init(){
    1538:	b580      	push	{r7, lr}
    153a:	b084      	sub	sp, #16
    153c:	af00      	add	r7, sp, #0
    153e:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&eepromMap->stack;
    1540:	4b0b      	ldr	r3, [pc, #44]	; (1570 <_ZN14DateTime_Class4InitEv+0x38>)
    1542:	681b      	ldr	r3, [r3, #0]
    1544:	3378      	adds	r3, #120	; 0x78
    1546:	60fb      	str	r3, [r7, #12]
	calendar.SetCalendarStackAddress(add);
    1548:	68f9      	ldr	r1, [r7, #12]
    154a:	480a      	ldr	r0, [pc, #40]	; (1574 <_ZN14DateTime_Class4InitEv+0x3c>)
    154c:	4b0a      	ldr	r3, [pc, #40]	; (1578 <_ZN14DateTime_Class4InitEv+0x40>)
    154e:	4798      	blx	r3
	uint32_t	addTimeLogs=(uint32_t)&eepromMap->timeLogs[0];
    1550:	4b07      	ldr	r3, [pc, #28]	; (1570 <_ZN14DateTime_Class4InitEv+0x38>)
    1552:	681b      	ldr	r3, [r3, #0]
    1554:	337c      	adds	r3, #124	; 0x7c
    1556:	60bb      	str	r3, [r7, #8]
	calendar.SetCalendarAddress(addTimeLogs);
    1558:	68b9      	ldr	r1, [r7, #8]
    155a:	4806      	ldr	r0, [pc, #24]	; (1574 <_ZN14DateTime_Class4InitEv+0x3c>)
    155c:	4b07      	ldr	r3, [pc, #28]	; (157c <_ZN14DateTime_Class4InitEv+0x44>)
    155e:	4798      	blx	r3
	calendar.Init();
    1560:	4804      	ldr	r0, [pc, #16]	; (1574 <_ZN14DateTime_Class4InitEv+0x3c>)
    1562:	4b07      	ldr	r3, [pc, #28]	; (1580 <_ZN14DateTime_Class4InitEv+0x48>)
    1564:	4798      	blx	r3
	
}
    1566:	bf00      	nop
    1568:	3710      	adds	r7, #16
    156a:	46bd      	mov	sp, r7
    156c:	bd80      	pop	{r7, pc}
    156e:	bf00      	nop
    1570:	20001568 	.word	0x20001568
    1574:	2000a278 	.word	0x2000a278
    1578:	00017231 	.word	0x00017231
    157c:	00017251 	.word	0x00017251
    1580:	00016959 	.word	0x00016959

00001584 <_Z41__static_initialization_and_destruction_0ii>:

    1584:	b580      	push	{r7, lr}
    1586:	b082      	sub	sp, #8
    1588:	af00      	add	r7, sp, #0
    158a:	6078      	str	r0, [r7, #4]
    158c:	6039      	str	r1, [r7, #0]
    158e:	687b      	ldr	r3, [r7, #4]
    1590:	2b01      	cmp	r3, #1
    1592:	d10c      	bne.n	15ae <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1594:	683b      	ldr	r3, [r7, #0]
    1596:	f64f 72ff 	movw	r2, #65535	; 0xffff
    159a:	4293      	cmp	r3, r2
    159c:	d107      	bne.n	15ae <_Z41__static_initialization_and_destruction_0ii+0x2a>
    159e:	4806      	ldr	r0, [pc, #24]	; (15b8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    15a0:	4b06      	ldr	r3, [pc, #24]	; (15bc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    15a2:	4798      	blx	r3
    15a4:	4a06      	ldr	r2, [pc, #24]	; (15c0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    15a6:	4907      	ldr	r1, [pc, #28]	; (15c4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    15a8:	4803      	ldr	r0, [pc, #12]	; (15b8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    15aa:	4b07      	ldr	r3, [pc, #28]	; (15c8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    15ac:	4798      	blx	r3
    15ae:	bf00      	nop
    15b0:	3708      	adds	r7, #8
    15b2:	46bd      	mov	sp, r7
    15b4:	bd80      	pop	{r7, pc}
    15b6:	bf00      	nop
    15b8:	200014b0 	.word	0x200014b0
    15bc:	000014c9 	.word	0x000014c9
    15c0:	20000000 	.word	0x20000000
    15c4:	00001501 	.word	0x00001501
    15c8:	0001949d 	.word	0x0001949d

000015cc <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev>:
    15cc:	b580      	push	{r7, lr}
    15ce:	af00      	add	r7, sp, #0
    15d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    15d4:	2001      	movs	r0, #1
    15d6:	4b01      	ldr	r3, [pc, #4]	; (15dc <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x10>)
    15d8:	4798      	blx	r3
    15da:	bd80      	pop	{r7, pc}
    15dc:	00001585 	.word	0x00001585

000015e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    15e0:	b580      	push	{r7, lr}
    15e2:	b082      	sub	sp, #8
    15e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    15e6:	4b16      	ldr	r3, [pc, #88]	; (1640 <Reset_Handler+0x60>)
    15e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    15ea:	4b16      	ldr	r3, [pc, #88]	; (1644 <Reset_Handler+0x64>)
    15ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    15ee:	687a      	ldr	r2, [r7, #4]
    15f0:	683b      	ldr	r3, [r7, #0]
    15f2:	429a      	cmp	r2, r3
    15f4:	d00c      	beq.n	1610 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    15f6:	e007      	b.n	1608 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    15f8:	683b      	ldr	r3, [r7, #0]
    15fa:	1d1a      	adds	r2, r3, #4
    15fc:	603a      	str	r2, [r7, #0]
    15fe:	687a      	ldr	r2, [r7, #4]
    1600:	1d11      	adds	r1, r2, #4
    1602:	6079      	str	r1, [r7, #4]
    1604:	6812      	ldr	r2, [r2, #0]
    1606:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    1608:	683b      	ldr	r3, [r7, #0]
    160a:	4a0f      	ldr	r2, [pc, #60]	; (1648 <Reset_Handler+0x68>)
    160c:	4293      	cmp	r3, r2
    160e:	d3f3      	bcc.n	15f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1610:	4b0e      	ldr	r3, [pc, #56]	; (164c <Reset_Handler+0x6c>)
    1612:	603b      	str	r3, [r7, #0]
    1614:	e004      	b.n	1620 <Reset_Handler+0x40>
                *pDest++ = 0;
    1616:	683b      	ldr	r3, [r7, #0]
    1618:	1d1a      	adds	r2, r3, #4
    161a:	603a      	str	r2, [r7, #0]
    161c:	2200      	movs	r2, #0
    161e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    1620:	683b      	ldr	r3, [r7, #0]
    1622:	4a0b      	ldr	r2, [pc, #44]	; (1650 <Reset_Handler+0x70>)
    1624:	4293      	cmp	r3, r2
    1626:	d3f6      	bcc.n	1616 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1628:	4b0a      	ldr	r3, [pc, #40]	; (1654 <Reset_Handler+0x74>)
    162a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    162c:	4a0a      	ldr	r2, [pc, #40]	; (1658 <Reset_Handler+0x78>)
    162e:	687b      	ldr	r3, [r7, #4]
    1630:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1634:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
    1636:	4b09      	ldr	r3, [pc, #36]	; (165c <Reset_Handler+0x7c>)
    1638:	4798      	blx	r3

        /* Branch to main function */
        main();
    163a:	4b09      	ldr	r3, [pc, #36]	; (1660 <Reset_Handler+0x80>)
    163c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    163e:	e7fe      	b.n	163e <Reset_Handler+0x5e>
    1640:	00021eb8 	.word	0x00021eb8
    1644:	20000000 	.word	0x20000000
    1648:	20000c44 	.word	0x20000c44
    164c:	20000c48 	.word	0x20000c48
    1650:	2000ac2c 	.word	0x2000ac2c
    1654:	00000000 	.word	0x00000000
    1658:	e000ed00 	.word	0xe000ed00
    165c:	0001b96d 	.word	0x0001b96d
    1660:	00001ff5 	.word	0x00001ff5

00001664 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1664:	b480      	push	{r7}
    1666:	af00      	add	r7, sp, #0
        while (1) {
    1668:	e7fe      	b.n	1668 <Dummy_Handler+0x4>

0000166a <_ZN17FastStorage_ClassC1Ev>:
#include "MemoryManagment_Class.h"

EEPROMMemoryStruct		*eepromMap=NULL;

// default constructor
FastStorage_Class::FastStorage_Class()
    166a:	b480      	push	{r7}
    166c:	b083      	sub	sp, #12
    166e:	af00      	add	r7, sp, #0
    1670:	6078      	str	r0, [r7, #4]
{
} //FastStorage_Class
    1672:	687b      	ldr	r3, [r7, #4]
    1674:	4618      	mov	r0, r3
    1676:	370c      	adds	r7, #12
    1678:	46bd      	mov	sp, r7
    167a:	bc80      	pop	{r7}
    167c:	4770      	bx	lr

0000167e <_ZN17FastStorage_ClassD1Ev>:

// default destructor
FastStorage_Class::~FastStorage_Class()
    167e:	b480      	push	{r7}
    1680:	b083      	sub	sp, #12
    1682:	af00      	add	r7, sp, #0
    1684:	6078      	str	r0, [r7, #4]
{
} //~FastStorage_Class
    1686:	687b      	ldr	r3, [r7, #4]
    1688:	4618      	mov	r0, r3
    168a:	370c      	adds	r7, #12
    168c:	46bd      	mov	sp, r7
    168e:	bc80      	pop	{r7}
    1690:	4770      	bx	lr
	...

00001694 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv>:


uint32_t	FastStorage_Class::ReadFastCRCApplicationState(void){
    1694:	b590      	push	{r4, r7, lr}
    1696:	b087      	sub	sp, #28
    1698:	af00      	add	r7, sp, #0
    169a:	6078      	str	r0, [r7, #4]
	uint32_t	crc,add32;
	add32=(uint32_t)&eepromMap->crcAppState;
    169c:	4b0a      	ldr	r3, [pc, #40]	; (16c8 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x34>)
    169e:	681b      	ldr	r3, [r3, #0]
    16a0:	3304      	adds	r3, #4
    16a2:	617b      	str	r3, [r7, #20]
	eepromAddress=(uint16_t)(0xffff&add32);
    16a4:	697b      	ldr	r3, [r7, #20]
    16a6:	b29a      	uxth	r2, r3
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	819a      	strh	r2, [r3, #12]
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(&crc),eepromAddress,sizeof(uint32_t));
    16ac:	687b      	ldr	r3, [r7, #4]
    16ae:	899a      	ldrh	r2, [r3, #12]
    16b0:	f107 010c 	add.w	r1, r7, #12
    16b4:	2304      	movs	r3, #4
    16b6:	4805      	ldr	r0, [pc, #20]	; (16cc <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x38>)
    16b8:	4c05      	ldr	r4, [pc, #20]	; (16d0 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x3c>)
    16ba:	47a0      	blx	r4
    16bc:	6138      	str	r0, [r7, #16]
	return	crc;
    16be:	68fb      	ldr	r3, [r7, #12]
}
    16c0:	4618      	mov	r0, r3
    16c2:	371c      	adds	r7, #28
    16c4:	46bd      	mov	sp, r7
    16c6:	bd90      	pop	{r4, r7, pc}
    16c8:	20001568 	.word	0x20001568
    16cc:	20009ff4 	.word	0x20009ff4
    16d0:	00015ded 	.word	0x00015ded

000016d4 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState>:
uint32_t	FastStorage_Class::ReadFastApplicationState(HVACState& hs){
    16d4:	b590      	push	{r4, r7, lr}
    16d6:	b085      	sub	sp, #20
    16d8:	af00      	add	r7, sp, #0
    16da:	6078      	str	r0, [r7, #4]
    16dc:	6039      	str	r1, [r7, #0]
	uint32_t	crc,add32,r;
	add32=(uint32_t)&eepromMap->appState;
    16de:	4b0c      	ldr	r3, [pc, #48]	; (1710 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x3c>)
    16e0:	681b      	ldr	r3, [r3, #0]
    16e2:	3308      	adds	r3, #8
    16e4:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    16e6:	68fb      	ldr	r3, [r7, #12]
    16e8:	b29a      	uxth	r2, r3
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	819a      	strh	r2, [r3, #12]
	handlerAppState=PTR_HVAC_STATE(&hs);
    16ee:	683a      	ldr	r2, [r7, #0]
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	601a      	str	r2, [r3, #0]
	r=eeprom.ReadAddress((uint8_t*)handlerAppState,eepromAddress,sizeof(HVACState));
    16f4:	687b      	ldr	r3, [r7, #4]
    16f6:	6819      	ldr	r1, [r3, #0]
    16f8:	687b      	ldr	r3, [r7, #4]
    16fa:	899a      	ldrh	r2, [r3, #12]
    16fc:	2370      	movs	r3, #112	; 0x70
    16fe:	4805      	ldr	r0, [pc, #20]	; (1714 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x40>)
    1700:	4c05      	ldr	r4, [pc, #20]	; (1718 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x44>)
    1702:	47a0      	blx	r4
    1704:	60b8      	str	r0, [r7, #8]
	return	r;
    1706:	68bb      	ldr	r3, [r7, #8]
}
    1708:	4618      	mov	r0, r3
    170a:	3714      	adds	r7, #20
    170c:	46bd      	mov	sp, r7
    170e:	bd90      	pop	{r4, r7, pc}
    1710:	20001568 	.word	0x20001568
    1714:	20009ff4 	.word	0x20009ff4
    1718:	00015ded 	.word	0x00015ded

0000171c <_ZN17FastStorage_Class18ReadFastParametersER14UserParameters>:
uint32_t	FastStorage_Class::ReadFastParameters(UserParameters& up){
    171c:	b590      	push	{r4, r7, lr}
    171e:	b085      	sub	sp, #20
    1720:	af00      	add	r7, sp, #0
    1722:	6078      	str	r0, [r7, #4]
    1724:	6039      	str	r1, [r7, #0]
	uint32_t	crc,add32,r;
	add32=(uint32_t)&eepromMap->parameters;
    1726:	4b0a      	ldr	r3, [pc, #40]	; (1750 <_ZN17FastStorage_Class18ReadFastParametersER14UserParameters+0x34>)
    1728:	681b      	ldr	r3, [r3, #0]
    172a:	3301      	adds	r3, #1
    172c:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    172e:	68fb      	ldr	r3, [r7, #12]
    1730:	b29a      	uxth	r2, r3
    1732:	687b      	ldr	r3, [r7, #4]
    1734:	819a      	strh	r2, [r3, #12]
	r=eeprom.ReadAddress((uint8_t*)&up,eepromAddress,sizeof(UserParameters));
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	899a      	ldrh	r2, [r3, #12]
    173a:	2301      	movs	r3, #1
    173c:	6839      	ldr	r1, [r7, #0]
    173e:	4805      	ldr	r0, [pc, #20]	; (1754 <_ZN17FastStorage_Class18ReadFastParametersER14UserParameters+0x38>)
    1740:	4c05      	ldr	r4, [pc, #20]	; (1758 <_ZN17FastStorage_Class18ReadFastParametersER14UserParameters+0x3c>)
    1742:	47a0      	blx	r4
    1744:	60b8      	str	r0, [r7, #8]
	return	r;
    1746:	68bb      	ldr	r3, [r7, #8]
}
    1748:	4618      	mov	r0, r3
    174a:	3714      	adds	r7, #20
    174c:	46bd      	mov	sp, r7
    174e:	bd90      	pop	{r4, r7, pc}
    1750:	20001568 	.word	0x20001568
    1754:	20009ff4 	.word	0x20009ff4
    1758:	00015ded 	.word	0x00015ded

0000175c <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState>:
	eepromAddress=(uint16_t)(0xffff&add32);
	handlerCalendar=(PTR_DATE_TIME)(&cdt);
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(handlerCalendar),(uint8_t)eepromAddress,sizeof(calendar_date_time)*AT24MAC_BUFFER_SIZE);
	return	r;
}
uint32_t	FastStorage_Class::WriteFastCurrentState(HVACState& hs){
    175c:	b580      	push	{r7, lr}
    175e:	b084      	sub	sp, #16
    1760:	af00      	add	r7, sp, #0
    1762:	6078      	str	r0, [r7, #4]
    1764:	6039      	str	r1, [r7, #0]
	uint32_t	add32=(uint32_t)&eepromMap->appState;
    1766:	4b12      	ldr	r3, [pc, #72]	; (17b0 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x54>)
    1768:	681b      	ldr	r3, [r3, #0]
    176a:	3308      	adds	r3, #8
    176c:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    176e:	68fb      	ldr	r3, [r7, #12]
    1770:	b29a      	uxth	r2, r3
    1772:	687b      	ldr	r3, [r7, #4]
    1774:	819a      	strh	r2, [r3, #12]
	uint32_t	w=WriteFastAppState(hs,eepromAddress);
    1776:	687b      	ldr	r3, [r7, #4]
    1778:	899b      	ldrh	r3, [r3, #12]
    177a:	461a      	mov	r2, r3
    177c:	6839      	ldr	r1, [r7, #0]
    177e:	6878      	ldr	r0, [r7, #4]
    1780:	4b0c      	ldr	r3, [pc, #48]	; (17b4 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x58>)
    1782:	4798      	blx	r3
    1784:	60b8      	str	r0, [r7, #8]
	crc32=		memory.CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    1786:	2270      	movs	r2, #112	; 0x70
    1788:	6839      	ldr	r1, [r7, #0]
    178a:	480b      	ldr	r0, [pc, #44]	; (17b8 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x5c>)
    178c:	4b0b      	ldr	r3, [pc, #44]	; (17bc <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x60>)
    178e:	4798      	blx	r3
    1790:	4602      	mov	r2, r0
    1792:	687b      	ldr	r3, [r7, #4]
    1794:	609a      	str	r2, [r3, #8]
	w=WriteFastCRCAppState(crc32);
    1796:	687b      	ldr	r3, [r7, #4]
    1798:	689b      	ldr	r3, [r3, #8]
    179a:	4619      	mov	r1, r3
    179c:	6878      	ldr	r0, [r7, #4]
    179e:	4b08      	ldr	r3, [pc, #32]	; (17c0 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x64>)
    17a0:	4798      	blx	r3
    17a2:	60b8      	str	r0, [r7, #8]
	return	w;
    17a4:	68bb      	ldr	r3, [r7, #8]
}
    17a6:	4618      	mov	r0, r3
    17a8:	3710      	adds	r7, #16
    17aa:	46bd      	mov	sp, r7
    17ac:	bd80      	pop	{r7, pc}
    17ae:	bf00      	nop
    17b0:	20001568 	.word	0x20001568
    17b4:	000017c5 	.word	0x000017c5
    17b8:	20002d6c 	.word	0x20002d6c
    17bc:	000013ad 	.word	0x000013ad
    17c0:	000017fd 	.word	0x000017fd

000017c4 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem>:
uint32_t	FastStorage_Class::WriteFastAppState(HVACState& hs,uint32_t add){
    17c4:	b590      	push	{r4, r7, lr}
    17c6:	b087      	sub	sp, #28
    17c8:	af00      	add	r7, sp, #0
    17ca:	60f8      	str	r0, [r7, #12]
    17cc:	60b9      	str	r1, [r7, #8]
    17ce:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    17d0:	68ba      	ldr	r2, [r7, #8]
    17d2:	68fb      	ldr	r3, [r7, #12]
    17d4:	601a      	str	r2, [r3, #0]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)handlerAppState,(uint16_t)add,sizeof(HVACState));
    17d6:	68fb      	ldr	r3, [r7, #12]
    17d8:	6819      	ldr	r1, [r3, #0]
    17da:	687b      	ldr	r3, [r7, #4]
    17dc:	b29a      	uxth	r2, r3
    17de:	2370      	movs	r3, #112	; 0x70
    17e0:	4804      	ldr	r0, [pc, #16]	; (17f4 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x30>)
    17e2:	4c05      	ldr	r4, [pc, #20]	; (17f8 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x34>)
    17e4:	47a0      	blx	r4
    17e6:	6178      	str	r0, [r7, #20]
	return	w;
    17e8:	697b      	ldr	r3, [r7, #20]
}
    17ea:	4618      	mov	r0, r3
    17ec:	371c      	adds	r7, #28
    17ee:	46bd      	mov	sp, r7
    17f0:	bd90      	pop	{r4, r7, pc}
    17f2:	bf00      	nop
    17f4:	20009ff4 	.word	0x20009ff4
    17f8:	00015d31 	.word	0x00015d31

000017fc <_ZN17FastStorage_Class20WriteFastCRCAppStateEm>:
uint32_t	FastStorage_Class::WriteFastCRCAppState(uint32_t crc){
    17fc:	b590      	push	{r4, r7, lr}
    17fe:	b085      	sub	sp, #20
    1800:	af00      	add	r7, sp, #0
    1802:	6078      	str	r0, [r7, #4]
    1804:	6039      	str	r1, [r7, #0]
	uint16_t	add=(uint32_t)&eepromMap->crcAppState;
    1806:	4b08      	ldr	r3, [pc, #32]	; (1828 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x2c>)
    1808:	681b      	ldr	r3, [r3, #0]
    180a:	3304      	adds	r3, #4
    180c:	81fb      	strh	r3, [r7, #14]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&crc),(uint16_t)add,sizeof(uint32_t));
    180e:	89fa      	ldrh	r2, [r7, #14]
    1810:	4639      	mov	r1, r7
    1812:	2304      	movs	r3, #4
    1814:	4805      	ldr	r0, [pc, #20]	; (182c <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x30>)
    1816:	4c06      	ldr	r4, [pc, #24]	; (1830 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x34>)
    1818:	47a0      	blx	r4
    181a:	60b8      	str	r0, [r7, #8]
	return	w;
    181c:	68bb      	ldr	r3, [r7, #8]
}
    181e:	4618      	mov	r0, r3
    1820:	3714      	adds	r7, #20
    1822:	46bd      	mov	sp, r7
    1824:	bd90      	pop	{r4, r7, pc}
    1826:	bf00      	nop
    1828:	20001568 	.word	0x20001568
    182c:	20009ff4 	.word	0x20009ff4
    1830:	00015d31 	.word	0x00015d31

00001834 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv>:
	uint32_t	add32=(uint32_t)&eepromMap->parameters;
	uint8_t		add8=(uint8_t)(0xff&&add32);
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&up),add8,sizeof(UserParameters));
	return	w;
}
uint32_t	FastStorage_Class::WriteFastDefaultParameters(void){
    1834:	b590      	push	{r4, r7, lr}
    1836:	b087      	sub	sp, #28
    1838:	af00      	add	r7, sp, #0
    183a:	6078      	str	r0, [r7, #4]
	UserParameters up=defaultParameters;
    183c:	4b0d      	ldr	r3, [pc, #52]	; (1874 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x40>)
    183e:	781b      	ldrb	r3, [r3, #0]
    1840:	723b      	strb	r3, [r7, #8]
	uint32_t	add32=(uint32_t)&eepromMap->parameters;
    1842:	4b0d      	ldr	r3, [pc, #52]	; (1878 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x44>)
    1844:	681b      	ldr	r3, [r3, #0]
    1846:	3301      	adds	r3, #1
    1848:	617b      	str	r3, [r7, #20]
	uint8_t		add8=(uint8_t)(0xff&&add32);
    184a:	697b      	ldr	r3, [r7, #20]
    184c:	2b00      	cmp	r3, #0
    184e:	bf14      	ite	ne
    1850:	2301      	movne	r3, #1
    1852:	2300      	moveq	r3, #0
    1854:	b2db      	uxtb	r3, r3
    1856:	74fb      	strb	r3, [r7, #19]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&up),add8,sizeof(UserParameters));
    1858:	7cfa      	ldrb	r2, [r7, #19]
    185a:	f107 0108 	add.w	r1, r7, #8
    185e:	2301      	movs	r3, #1
    1860:	4806      	ldr	r0, [pc, #24]	; (187c <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x48>)
    1862:	4c07      	ldr	r4, [pc, #28]	; (1880 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x4c>)
    1864:	47a0      	blx	r4
    1866:	60f8      	str	r0, [r7, #12]
	return	w;
    1868:	68fb      	ldr	r3, [r7, #12]
    186a:	4618      	mov	r0, r3
    186c:	371c      	adds	r7, #28
    186e:	46bd      	mov	sp, r7
    1870:	bd90      	pop	{r4, r7, pc}
    1872:	bf00      	nop
    1874:	0002177c 	.word	0x0002177c
    1878:	20001568 	.word	0x20001568
    187c:	20009ff4 	.word	0x20009ff4
    1880:	00015bd1 	.word	0x00015bd1

00001884 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
    1884:	b480      	push	{r7}
    1886:	b083      	sub	sp, #12
    1888:	af00      	add	r7, sp, #0
    188a:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
    188c:	687b      	ldr	r3, [r7, #4]
    188e:	4618      	mov	r0, r3
    1890:	370c      	adds	r7, #12
    1892:	46bd      	mov	sp, r7
    1894:	bc80      	pop	{r7}
    1896:	4770      	bx	lr

00001898 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
    1898:	b480      	push	{r7}
    189a:	b083      	sub	sp, #12
    189c:	af00      	add	r7, sp, #0
    189e:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
    18a0:	687b      	ldr	r3, [r7, #4]
    18a2:	4618      	mov	r0, r3
    18a4:	370c      	adds	r7, #12
    18a6:	46bd      	mov	sp, r7
    18a8:	bc80      	pop	{r7}
    18aa:	4770      	bx	lr

000018ac <_ZL16Fv1StatusChangedv>:
#include "I2C_Asyn_Class.h"
#include "MemoryManagment_Class.h"
FlapperValve_Class	*ptrFlapperValveClass;
I2C_Asyn_Class		i2cFVs(&I2C_EXPANDER);

static void	Fv1StatusChanged(void){
    18ac:	b480      	push	{r7}
    18ae:	af00      	add	r7, sp, #0
	
	ptrFlapperValveClass->fv1StatusChanged=true;
    18b0:	4b04      	ldr	r3, [pc, #16]	; (18c4 <_ZL16Fv1StatusChangedv+0x18>)
    18b2:	681b      	ldr	r3, [r3, #0]
    18b4:	2201      	movs	r2, #1
    18b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

}
    18ba:	bf00      	nop
    18bc:	46bd      	mov	sp, r7
    18be:	bc80      	pop	{r7}
    18c0:	4770      	bx	lr
    18c2:	bf00      	nop
    18c4:	2000156c 	.word	0x2000156c

000018c8 <_ZL16Fv2StatusChangedv>:
static void	Fv2StatusChanged(void){
    18c8:	b480      	push	{r7}
    18ca:	af00      	add	r7, sp, #0
	
	ptrFlapperValveClass->fv2StatusChanged=true;
    18cc:	4b04      	ldr	r3, [pc, #16]	; (18e0 <_ZL16Fv2StatusChangedv+0x18>)
    18ce:	681b      	ldr	r3, [r3, #0]
    18d0:	2201      	movs	r2, #1
    18d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

}
    18d6:	bf00      	nop
    18d8:	46bd      	mov	sp, r7
    18da:	bc80      	pop	{r7}
    18dc:	4770      	bx	lr
    18de:	bf00      	nop
    18e0:	2000156c 	.word	0x2000156c

000018e4 <_ZL20I2CFlapperValvesInitv>:

static bool	I2CFlapperValvesInit(void){
    18e4:	b580      	push	{r7, lr}
    18e6:	b082      	sub	sp, #8
    18e8:	af00      	add	r7, sp, #0
	 bool ok= i2cFVs.Init();
    18ea:	4805      	ldr	r0, [pc, #20]	; (1900 <_ZL20I2CFlapperValvesInitv+0x1c>)
    18ec:	4b05      	ldr	r3, [pc, #20]	; (1904 <_ZL20I2CFlapperValvesInitv+0x20>)
    18ee:	4798      	blx	r3
    18f0:	4603      	mov	r3, r0
    18f2:	71fb      	strb	r3, [r7, #7]
	 //ptrFlapperValveClass->isOK=ok;
}
    18f4:	bf00      	nop
    18f6:	4618      	mov	r0, r3
    18f8:	3708      	adds	r7, #8
    18fa:	46bd      	mov	sp, r7
    18fc:	bd80      	pop	{r7, pc}
    18fe:	bf00      	nop
    1900:	20001570 	.word	0x20001570
    1904:	00014f61 	.word	0x00014f61

00001908 <_ZN18FlapperValve_ClassC1Eh>:

FlapperValve_Class::FlapperValve_Class(uint8_t id)
    1908:	b5b0      	push	{r4, r5, r7, lr}
    190a:	b082      	sub	sp, #8
    190c:	af00      	add	r7, sp, #0
    190e:	6078      	str	r0, [r7, #4]
    1910:	460b      	mov	r3, r1
    1912:	70fb      	strb	r3, [r7, #3]
    1914:	687b      	ldr	r3, [r7, #4]
    1916:	4618      	mov	r0, r3
    1918:	4b10      	ldr	r3, [pc, #64]	; (195c <_ZN18FlapperValve_ClassC1Eh+0x54>)
    191a:	4798      	blx	r3
    191c:	687b      	ldr	r3, [r7, #4]
    191e:	3340      	adds	r3, #64	; 0x40
    1920:	2403      	movs	r4, #3
    1922:	461d      	mov	r5, r3
    1924:	2c00      	cmp	r4, #0
    1926:	db05      	blt.n	1934 <_ZN18FlapperValve_ClassC1Eh+0x2c>
    1928:	4628      	mov	r0, r5
    192a:	4b0d      	ldr	r3, [pc, #52]	; (1960 <_ZN18FlapperValve_ClassC1Eh+0x58>)
    192c:	4798      	blx	r3
    192e:	3520      	adds	r5, #32
    1930:	3c01      	subs	r4, #1
    1932:	e7f7      	b.n	1924 <_ZN18FlapperValve_ClassC1Eh+0x1c>
{	
	valveID=id;
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	78fa      	ldrb	r2, [r7, #3]
    1938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i2cDescr=&I2C_EXPANDER;
    193c:	687b      	ldr	r3, [r7, #4]
    193e:	4a09      	ldr	r2, [pc, #36]	; (1964 <_ZN18FlapperValve_ClassC1Eh+0x5c>)
    1940:	639a      	str	r2, [r3, #56]	; 0x38
	ptrFlapperValveClass=this;
    1942:	4a09      	ldr	r2, [pc, #36]	; (1968 <_ZN18FlapperValve_ClassC1Eh+0x60>)
    1944:	687b      	ldr	r3, [r7, #4]
    1946:	6013      	str	r3, [r2, #0]
	isOK=false;
    1948:	687b      	ldr	r3, [r7, #4]
    194a:	2200      	movs	r2, #0
    194c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
} //FlapperValve_Class
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	4618      	mov	r0, r3
    1954:	3708      	adds	r7, #8
    1956:	46bd      	mov	sp, r7
    1958:	bdb0      	pop	{r4, r5, r7, pc}
    195a:	bf00      	nop
    195c:	00001885 	.word	0x00001885
    1960:	00015275 	.word	0x00015275
    1964:	2000aa88 	.word	0x2000aa88
    1968:	2000156c 	.word	0x2000156c

0000196c <_ZN18FlapperValve_ClassD1Ev>:
	i2cDescr=&I2C_EXPANDER;
	ptrFlapperValveClass=this;
} //FlapperValve_Class

// default destructor
FlapperValve_Class::~FlapperValve_Class()
    196c:	b590      	push	{r4, r7, lr}
    196e:	b083      	sub	sp, #12
    1970:	af00      	add	r7, sp, #0
    1972:	6078      	str	r0, [r7, #4]
    1974:	687b      	ldr	r3, [r7, #4]
    1976:	3340      	adds	r3, #64	; 0x40
    1978:	2b00      	cmp	r3, #0
    197a:	d00c      	beq.n	1996 <_ZN18FlapperValve_ClassD1Ev+0x2a>
    197c:	687b      	ldr	r3, [r7, #4]
    197e:	3340      	adds	r3, #64	; 0x40
    1980:	f103 0480 	add.w	r4, r3, #128	; 0x80
    1984:	687b      	ldr	r3, [r7, #4]
    1986:	3340      	adds	r3, #64	; 0x40
    1988:	42a3      	cmp	r3, r4
    198a:	d004      	beq.n	1996 <_ZN18FlapperValve_ClassD1Ev+0x2a>
    198c:	3c20      	subs	r4, #32
    198e:	4620      	mov	r0, r4
    1990:	4b05      	ldr	r3, [pc, #20]	; (19a8 <_ZN18FlapperValve_ClassD1Ev+0x3c>)
    1992:	4798      	blx	r3
    1994:	e7f6      	b.n	1984 <_ZN18FlapperValve_ClassD1Ev+0x18>
    1996:	687b      	ldr	r3, [r7, #4]
    1998:	4618      	mov	r0, r3
    199a:	4b04      	ldr	r3, [pc, #16]	; (19ac <_ZN18FlapperValve_ClassD1Ev+0x40>)
    199c:	4798      	blx	r3
{
} //~FlapperValve_Class
    199e:	687b      	ldr	r3, [r7, #4]
    19a0:	4618      	mov	r0, r3
    19a2:	370c      	adds	r7, #12
    19a4:	46bd      	mov	sp, r7
    19a6:	bd90      	pop	{r4, r7, pc}
    19a8:	00015289 	.word	0x00015289
    19ac:	00001899 	.word	0x00001899

000019b0 <_ZN18FlapperValve_Class4InitEv>:


bool	FlapperValve_Class::Init(void){
    19b0:	b580      	push	{r7, lr}
    19b2:	b082      	sub	sp, #8
    19b4:	af00      	add	r7, sp, #0
    19b6:	6078      	str	r0, [r7, #4]
	ptrFlapperValveClass=this;
    19b8:	4a1f      	ldr	r2, [pc, #124]	; (1a38 <_ZN18FlapperValve_Class4InitEv+0x88>)
    19ba:	687b      	ldr	r3, [r7, #4]
    19bc:	6013      	str	r3, [r2, #0]
		if (i2cFVs.initiated==false)
    19be:	4b1f      	ldr	r3, [pc, #124]	; (1a3c <_ZN18FlapperValve_Class4InitEv+0x8c>)
    19c0:	7d9b      	ldrb	r3, [r3, #22]
    19c2:	f083 0301 	eor.w	r3, r3, #1
    19c6:	b2db      	uxtb	r3, r3
    19c8:	2b00      	cmp	r3, #0
    19ca:	d006      	beq.n	19da <_ZN18FlapperValve_Class4InitEv+0x2a>
		{
				isOK=I2CFlapperValvesInit();
    19cc:	4b1c      	ldr	r3, [pc, #112]	; (1a40 <_ZN18FlapperValve_Class4InitEv+0x90>)
    19ce:	4798      	blx	r3
    19d0:	4603      	mov	r3, r0
    19d2:	461a      	mov	r2, r3
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}
	
		if (i2cFVs.isOK)
    19da:	4b18      	ldr	r3, [pc, #96]	; (1a3c <_ZN18FlapperValve_Class4InitEv+0x8c>)
    19dc:	7e1b      	ldrb	r3, [r3, #24]
    19de:	b2db      	uxtb	r3, r3
    19e0:	2b00      	cmp	r3, #0
    19e2:	d021      	beq.n	1a28 <_ZN18FlapperValve_Class4InitEv+0x78>
		{
			if (valveID==1)
    19e4:	687b      	ldr	r3, [r7, #4]
    19e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    19ea:	2b01      	cmp	r3, #1
    19ec:	d104      	bne.n	19f8 <_ZN18FlapperValve_Class4InitEv+0x48>
			{
				ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
    19ee:	4915      	ldr	r1, [pc, #84]	; (1a44 <_ZN18FlapperValve_Class4InitEv+0x94>)
    19f0:	2004      	movs	r0, #4
    19f2:	4b15      	ldr	r3, [pc, #84]	; (1a48 <_ZN18FlapperValve_Class4InitEv+0x98>)
    19f4:	4798      	blx	r3
    19f6:	e008      	b.n	1a0a <_ZN18FlapperValve_Class4InitEv+0x5a>
			} 
			else if  (valveID==2)
    19f8:	687b      	ldr	r3, [r7, #4]
    19fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    19fe:	2b02      	cmp	r3, #2
    1a00:	d103      	bne.n	1a0a <_ZN18FlapperValve_Class4InitEv+0x5a>
			{
				ext_irq_register(PIN_PA05,FUNC_PTR(Fv2StatusChanged));	
    1a02:	4912      	ldr	r1, [pc, #72]	; (1a4c <_ZN18FlapperValve_Class4InitEv+0x9c>)
    1a04:	2005      	movs	r0, #5
    1a06:	4b10      	ldr	r3, [pc, #64]	; (1a48 <_ZN18FlapperValve_Class4InitEv+0x98>)
    1a08:	4798      	blx	r3
			}
			InitExpanderArray(valveID);
    1a0a:	687b      	ldr	r3, [r7, #4]
    1a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    1a10:	4619      	mov	r1, r3
    1a12:	6878      	ldr	r0, [r7, #4]
    1a14:	4b0e      	ldr	r3, [pc, #56]	; (1a50 <_ZN18FlapperValve_Class4InitEv+0xa0>)
    1a16:	4798      	blx	r3
			isOK=Selftest();
    1a18:	6878      	ldr	r0, [r7, #4]
    1a1a:	4b0e      	ldr	r3, [pc, #56]	; (1a54 <_ZN18FlapperValve_Class4InitEv+0xa4>)
    1a1c:	4798      	blx	r3
    1a1e:	4603      	mov	r3, r0
    1a20:	461a      	mov	r2, r3
    1a22:	687b      	ldr	r3, [r7, #4]
    1a24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		} 
		else
		{
		}
		return isOK;
    1a28:	687b      	ldr	r3, [r7, #4]
    1a2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    1a2e:	b2db      	uxtb	r3, r3
}
    1a30:	4618      	mov	r0, r3
    1a32:	3708      	adds	r7, #8
    1a34:	46bd      	mov	sp, r7
    1a36:	bd80      	pop	{r7, pc}
    1a38:	2000156c 	.word	0x2000156c
    1a3c:	20001570 	.word	0x20001570
    1a40:	000018e5 	.word	0x000018e5
    1a44:	000018ad 	.word	0x000018ad
    1a48:	00006035 	.word	0x00006035
    1a4c:	000018c9 	.word	0x000018c9
    1a50:	00001a59 	.word	0x00001a59
    1a54:	00001ab9 	.word	0x00001ab9

00001a58 <_ZN18FlapperValve_Class17InitExpanderArrayEh>:
uint8_t FlapperValve_Class::InitExpanderArray(uint8_t fvID){
    1a58:	b580      	push	{r7, lr}
    1a5a:	b084      	sub	sp, #16
    1a5c:	af00      	add	r7, sp, #0
    1a5e:	6078      	str	r0, [r7, #4]
    1a60:	460b      	mov	r3, r1
    1a62:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    1a64:	2300      	movs	r3, #0
    1a66:	60fb      	str	r3, [r7, #12]
    1a68:	68fb      	ldr	r3, [r7, #12]
    1a6a:	2b03      	cmp	r3, #3
    1a6c:	dc1b      	bgt.n	1aa6 <_ZN18FlapperValve_Class17InitExpanderArrayEh+0x4e>
	{
		currentExpander=&(expanders[i]);
    1a6e:	68fb      	ldr	r3, [r7, #12]
    1a70:	3302      	adds	r3, #2
    1a72:	015b      	lsls	r3, r3, #5
    1a74:	687a      	ldr	r2, [r7, #4]
    1a76:	441a      	add	r2, r3
    1a78:	687b      	ldr	r3, [r7, #4]
    1a7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		currentExpander->Init(i+(fvID-1)*FLAPPER_VALVE_EXPANDERS,&i2cFVs);
    1a7e:	687b      	ldr	r3, [r7, #4]
    1a80:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
    1a84:	78fb      	ldrb	r3, [r7, #3]
    1a86:	3b01      	subs	r3, #1
    1a88:	b2db      	uxtb	r3, r3
    1a8a:	009b      	lsls	r3, r3, #2
    1a8c:	b2da      	uxtb	r2, r3
    1a8e:	68fb      	ldr	r3, [r7, #12]
    1a90:	b2db      	uxtb	r3, r3
    1a92:	4413      	add	r3, r2
    1a94:	b2db      	uxtb	r3, r3
    1a96:	4a06      	ldr	r2, [pc, #24]	; (1ab0 <_ZN18FlapperValve_Class17InitExpanderArrayEh+0x58>)
    1a98:	4619      	mov	r1, r3
    1a9a:	4b06      	ldr	r3, [pc, #24]	; (1ab4 <_ZN18FlapperValve_Class17InitExpanderArrayEh+0x5c>)
    1a9c:	4798      	blx	r3
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    1a9e:	68fb      	ldr	r3, [r7, #12]
    1aa0:	3301      	adds	r3, #1
    1aa2:	60fb      	str	r3, [r7, #12]
    1aa4:	e7e0      	b.n	1a68 <_ZN18FlapperValve_Class17InitExpanderArrayEh+0x10>
	}
}
    1aa6:	bf00      	nop
    1aa8:	4618      	mov	r0, r3
    1aaa:	3710      	adds	r7, #16
    1aac:	46bd      	mov	sp, r7
    1aae:	bd80      	pop	{r7, pc}
    1ab0:	20001570 	.word	0x20001570
    1ab4:	0001529d 	.word	0x0001529d

00001ab8 <_ZN18FlapperValve_Class8SelftestEv>:
void FlapperValve_Class::UpdateFlapperValveData(){
	fvData.controlStatus=ReadControlStatus();
	fvData.statusInputs=ReadStatusInputs();
	fvData.actualPosition=ReadActualPosition();
}
bool FlapperValve_Class::Selftest(void){
    1ab8:	b580      	push	{r7, lr}
    1aba:	b084      	sub	sp, #16
    1abc:	af00      	add	r7, sp, #0
    1abe:	6078      	str	r0, [r7, #4]
	UserParameters up;
	memory.ReadFastParameters(up);
    1ac0:	f107 030c 	add.w	r3, r7, #12
    1ac4:	4619      	mov	r1, r3
    1ac6:	4804      	ldr	r0, [pc, #16]	; (1ad8 <_ZN18FlapperValve_Class8SelftestEv+0x20>)
    1ac8:	4b04      	ldr	r3, [pc, #16]	; (1adc <_ZN18FlapperValve_Class8SelftestEv+0x24>)
    1aca:	4798      	blx	r3
//	WriteSetpoint(up.flapperValveOffset);
	//UpdateFlapperValveData();
	//isOK=ReadSetpoint()==up.flapperValveOffset;
	//return isOK;
	return true;
    1acc:	2301      	movs	r3, #1
}
    1ace:	4618      	mov	r0, r3
    1ad0:	3710      	adds	r7, #16
    1ad2:	46bd      	mov	sp, r7
    1ad4:	bd80      	pop	{r7, pc}
    1ad6:	bf00      	nop
    1ad8:	20002f00 	.word	0x20002f00
    1adc:	0000171d 	.word	0x0000171d

00001ae0 <_Z41__static_initialization_and_destruction_0ii>:

FlapperValve_Class::operator bool(){
	return	isOK;
}

    1ae0:	b580      	push	{r7, lr}
    1ae2:	b082      	sub	sp, #8
    1ae4:	af00      	add	r7, sp, #0
    1ae6:	6078      	str	r0, [r7, #4]
    1ae8:	6039      	str	r1, [r7, #0]
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	2b01      	cmp	r3, #1
    1aee:	d116      	bne.n	1b1e <_Z41__static_initialization_and_destruction_0ii+0x3e>
    1af0:	683b      	ldr	r3, [r7, #0]
    1af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1af6:	4293      	cmp	r3, r2
    1af8:	d111      	bne.n	1b1e <_Z41__static_initialization_and_destruction_0ii+0x3e>
I2C_Asyn_Class		i2cFVs(&I2C_EXPANDER);
    1afa:	490b      	ldr	r1, [pc, #44]	; (1b28 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1afc:	480b      	ldr	r0, [pc, #44]	; (1b2c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    1afe:	4b0c      	ldr	r3, [pc, #48]	; (1b30 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    1b00:	4798      	blx	r3
    1b02:	4a0c      	ldr	r2, [pc, #48]	; (1b34 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    1b04:	490c      	ldr	r1, [pc, #48]	; (1b38 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    1b06:	4809      	ldr	r0, [pc, #36]	; (1b2c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    1b08:	4b0c      	ldr	r3, [pc, #48]	; (1b3c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    1b0a:	4798      	blx	r3
    1b0c:	2101      	movs	r1, #1
    1b0e:	480c      	ldr	r0, [pc, #48]	; (1b40 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1b10:	4b0c      	ldr	r3, [pc, #48]	; (1b44 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1b12:	4798      	blx	r3
    1b14:	4a07      	ldr	r2, [pc, #28]	; (1b34 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    1b16:	490c      	ldr	r1, [pc, #48]	; (1b48 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    1b18:	4809      	ldr	r0, [pc, #36]	; (1b40 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1b1a:	4b08      	ldr	r3, [pc, #32]	; (1b3c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    1b1c:	4798      	blx	r3
    1b1e:	bf00      	nop
    1b20:	3708      	adds	r7, #8
    1b22:	46bd      	mov	sp, r7
    1b24:	bd80      	pop	{r7, pc}
    1b26:	bf00      	nop
    1b28:	2000aa88 	.word	0x2000aa88
    1b2c:	20001570 	.word	0x20001570
    1b30:	00014ed1 	.word	0x00014ed1
    1b34:	20000000 	.word	0x20000000
    1b38:	00014f15 	.word	0x00014f15
    1b3c:	0001949d 	.word	0x0001949d
    1b40:	200015b4 	.word	0x200015b4
    1b44:	00001909 	.word	0x00001909
    1b48:	0000196d 	.word	0x0000196d

00001b4c <_GLOBAL__sub_I_ptrFlapperValveClass>:
    1b4c:	b580      	push	{r7, lr}
    1b4e:	af00      	add	r7, sp, #0
    1b50:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1b54:	2001      	movs	r0, #1
    1b56:	4b01      	ldr	r3, [pc, #4]	; (1b5c <_GLOBAL__sub_I_ptrFlapperValveClass+0x10>)
    1b58:	4798      	blx	r3
    1b5a:	bd80      	pop	{r7, pc}
    1b5c:	00001ae1 	.word	0x00001ae1

00001b60 <_ZN16Interfaces_ClassC1Ev>:
#include "Error_Labelling_Class.h"
#include "Maintenance_Tool.h"


// default constructor
Interfaces_Class::Interfaces_Class()
    1b60:	b480      	push	{r7}
    1b62:	b083      	sub	sp, #12
    1b64:	af00      	add	r7, sp, #0
    1b66:	6078      	str	r0, [r7, #4]
{
	
} //Interfaces_Class
    1b68:	687b      	ldr	r3, [r7, #4]
    1b6a:	4618      	mov	r0, r3
    1b6c:	370c      	adds	r7, #12
    1b6e:	46bd      	mov	sp, r7
    1b70:	bc80      	pop	{r7}
    1b72:	4770      	bx	lr

00001b74 <_ZN16Interfaces_ClassD1Ev>:

// default destructor
Interfaces_Class::~Interfaces_Class()
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
{
} //~Interfaces_Class
    1b7c:	687b      	ldr	r3, [r7, #4]
    1b7e:	4618      	mov	r0, r3
    1b80:	370c      	adds	r7, #12
    1b82:	46bd      	mov	sp, r7
    1b84:	bc80      	pop	{r7}
    1b86:	4770      	bx	lr

00001b88 <_ZN16Interfaces_Class4InitEv>:

CommunicationRequest	Interfaces_Class::request;

bool	Interfaces_Class::Init(){
    1b88:	b580      	push	{r7, lr}
    1b8a:	b084      	sub	sp, #16
    1b8c:	af00      	add	r7, sp, #0
    1b8e:	6078      	str	r0, [r7, #4]
	size=sizeof(CommunicationRequest);
    1b90:	687b      	ldr	r3, [r7, #4]
    1b92:	2205      	movs	r2, #5
    1b94:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	result=arinc.Init();
    1b98:	4817      	ldr	r0, [pc, #92]	; (1bf8 <_ZN16Interfaces_Class4InitEv+0x70>)
    1b9a:	4b18      	ldr	r3, [pc, #96]	; (1bfc <_ZN16Interfaces_Class4InitEv+0x74>)
    1b9c:	4798      	blx	r3
    1b9e:	4603      	mov	r3, r0
    1ba0:	461a      	mov	r2, r3
    1ba2:	687b      	ldr	r3, [r7, #4]
    1ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if (result==0x01)
    1ba8:	687b      	ldr	r3, [r7, #4]
    1baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1bae:	2b01      	cmp	r3, #1
    1bb0:	d106      	bne.n	1bc0 <_ZN16Interfaces_Class4InitEv+0x38>
	{
		arinc.TrasmitSingleLabel();
    1bb2:	4811      	ldr	r0, [pc, #68]	; (1bf8 <_ZN16Interfaces_Class4InitEv+0x70>)
    1bb4:	4b12      	ldr	r3, [pc, #72]	; (1c00 <_ZN16Interfaces_Class4InitEv+0x78>)
    1bb6:	4798      	blx	r3
		if (maintenance.IsAppConnected())
    1bb8:	4812      	ldr	r0, [pc, #72]	; (1c04 <_ZN16Interfaces_Class4InitEv+0x7c>)
    1bba:	4b13      	ldr	r3, [pc, #76]	; (1c08 <_ZN16Interfaces_Class4InitEv+0x80>)
    1bbc:	4798      	blx	r3
    1bbe:	e00f      	b.n	1be0 <_ZN16Interfaces_Class4InitEv+0x58>
		{
		}
	} 
	else
	{
		alu.NotifyError(kARINCINnterfaceError,result);
    1bc0:	687b      	ldr	r3, [r7, #4]
    1bc2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    1bc6:	f107 030c 	add.w	r3, r7, #12
    1bca:	4611      	mov	r1, r2
    1bcc:	4618      	mov	r0, r3
    1bce:	4b0f      	ldr	r3, [pc, #60]	; (1c0c <_ZN16Interfaces_Class4InitEv+0x84>)
    1bd0:	4798      	blx	r3
    1bd2:	f107 030c 	add.w	r3, r7, #12
    1bd6:	461a      	mov	r2, r3
    1bd8:	2100      	movs	r1, #0
    1bda:	480d      	ldr	r0, [pc, #52]	; (1c10 <_ZN16Interfaces_Class4InitEv+0x88>)
    1bdc:	4b0d      	ldr	r3, [pc, #52]	; (1c14 <_ZN16Interfaces_Class4InitEv+0x8c>)
    1bde:	4798      	blx	r3
	}
	return result;
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1be6:	2b00      	cmp	r3, #0
    1be8:	bf14      	ite	ne
    1bea:	2301      	movne	r3, #1
    1bec:	2300      	moveq	r3, #0
    1bee:	b2db      	uxtb	r3, r3
}
    1bf0:	4618      	mov	r0, r3
    1bf2:	3710      	adds	r7, #16
    1bf4:	46bd      	mov	sp, r7
    1bf6:	bd80      	pop	{r7, pc}
    1bf8:	20009128 	.word	0x20009128
    1bfc:	0001357d 	.word	0x0001357d
    1c00:	00013889 	.word	0x00013889
    1c04:	2000a78c 	.word	0x2000a78c
    1c08:	00019329 	.word	0x00019329
    1c0c:	000002d1 	.word	0x000002d1
    1c10:	20000ce8 	.word	0x20000ce8
    1c14:	00000879 	.word	0x00000879

00001c18 <_ZN16Interfaces_Class18CheckCommunicationEv>:

CommunicationRequest Interfaces_Class::CheckCommunication(void)
{
    1c18:	b580      	push	{r7, lr}
    1c1a:	b086      	sub	sp, #24
    1c1c:	af00      	add	r7, sp, #0
    1c1e:	6078      	str	r0, [r7, #4]
    1c20:	6039      	str	r1, [r7, #0]
	event e;
    1c22:	f107 0308 	add.w	r3, r7, #8
    1c26:	4618      	mov	r0, r3
    1c28:	4b09      	ldr	r3, [pc, #36]	; (1c50 <_ZN16Interfaces_Class18CheckCommunicationEv+0x38>)
    1c2a:	4798      	blx	r3
	CommunicationRequest	r;
	CheckInternalCommunication();
    1c2c:	6838      	ldr	r0, [r7, #0]
    1c2e:	4b09      	ldr	r3, [pc, #36]	; (1c54 <_ZN16Interfaces_Class18CheckCommunicationEv+0x3c>)
    1c30:	4798      	blx	r3
	CheckExternalCommunication();
    1c32:	6838      	ldr	r0, [r7, #0]
    1c34:	4b08      	ldr	r3, [pc, #32]	; (1c58 <_ZN16Interfaces_Class18CheckCommunicationEv+0x40>)
    1c36:	4798      	blx	r3
	r=request;
    1c38:	687b      	ldr	r3, [r7, #4]
    1c3a:	4a08      	ldr	r2, [pc, #32]	; (1c5c <_ZN16Interfaces_Class18CheckCommunicationEv+0x44>)
    1c3c:	6810      	ldr	r0, [r2, #0]
    1c3e:	6018      	str	r0, [r3, #0]
    1c40:	7912      	ldrb	r2, [r2, #4]
    1c42:	711a      	strb	r2, [r3, #4]
	
	return	r;
    1c44:	bf00      	nop
}
    1c46:	6878      	ldr	r0, [r7, #4]
    1c48:	3718      	adds	r7, #24
    1c4a:	46bd      	mov	sp, r7
    1c4c:	bd80      	pop	{r7, pc}
    1c4e:	bf00      	nop
    1c50:	000002ed 	.word	0x000002ed
    1c54:	00001cd9 	.word	0x00001cd9
    1c58:	00001d19 	.word	0x00001d19
    1c5c:	2000170c 	.word	0x2000170c

00001c60 <_ZN16Interfaces_Class22IsCommunicationRequestEv>:

bool	Interfaces_Class::IsCommunicationRequest(void){
    1c60:	b580      	push	{r7, lr}
    1c62:	b086      	sub	sp, #24
    1c64:	af00      	add	r7, sp, #0
    1c66:	6078      	str	r0, [r7, #4]
	bool arr[sizeof(CommunicationRequest)];
	CommunicationRequest r=CheckCommunication();
    1c68:	f107 0308 	add.w	r3, r7, #8
    1c6c:	6879      	ldr	r1, [r7, #4]
    1c6e:	4618      	mov	r0, r3
    1c70:	4b17      	ldr	r3, [pc, #92]	; (1cd0 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x70>)
    1c72:	4798      	blx	r3
	uint8_t result=0;
    1c74:	2300      	movs	r3, #0
    1c76:	75fb      	strb	r3, [r7, #23]
	memcpy((void*)arr,(void*)&r,size);
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
    1c7e:	461a      	mov	r2, r3
    1c80:	f107 0108 	add.w	r1, r7, #8
    1c84:	f107 0310 	add.w	r3, r7, #16
    1c88:	4618      	mov	r0, r3
    1c8a:	4b12      	ldr	r3, [pc, #72]	; (1cd4 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x74>)
    1c8c:	4798      	blx	r3
	for (uint8_t ii = 0; ii < size; ii++)
    1c8e:	2300      	movs	r3, #0
    1c90:	75bb      	strb	r3, [r7, #22]
    1c92:	7dbb      	ldrb	r3, [r7, #22]
    1c94:	687a      	ldr	r2, [r7, #4]
    1c96:	f892 2088 	ldrb.w	r2, [r2, #136]	; 0x88
    1c9a:	4293      	cmp	r3, r2
    1c9c:	da0d      	bge.n	1cba <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x5a>
	{
		result|=arr[ii];
    1c9e:	7dbb      	ldrb	r3, [r7, #22]
    1ca0:	f107 0218 	add.w	r2, r7, #24
    1ca4:	4413      	add	r3, r2
    1ca6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    1caa:	461a      	mov	r2, r3
    1cac:	7dfb      	ldrb	r3, [r7, #23]
    1cae:	4313      	orrs	r3, r2
    1cb0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t ii = 0; ii < size; ii++)
    1cb2:	7dbb      	ldrb	r3, [r7, #22]
    1cb4:	3301      	adds	r3, #1
    1cb6:	75bb      	strb	r3, [r7, #22]
    1cb8:	e7eb      	b.n	1c92 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x32>
	}
	return	result>0;
    1cba:	7dfb      	ldrb	r3, [r7, #23]
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	bfcc      	ite	gt
    1cc0:	2301      	movgt	r3, #1
    1cc2:	2300      	movle	r3, #0
    1cc4:	b2db      	uxtb	r3, r3
}
    1cc6:	4618      	mov	r0, r3
    1cc8:	3718      	adds	r7, #24
    1cca:	46bd      	mov	sp, r7
    1ccc:	bd80      	pop	{r7, pc}
    1cce:	bf00      	nop
    1cd0:	00001c19 	.word	0x00001c19
    1cd4:	0001bc05 	.word	0x0001bc05

00001cd8 <_ZN16Interfaces_Class26CheckInternalCommunicationEv>:

uint32_t Interfaces_Class::CheckInternalCommunication(void)
{
    1cd8:	b580      	push	{r7, lr}
    1cda:	b084      	sub	sp, #16
    1cdc:	af00      	add	r7, sp, #0
    1cde:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    1ce0:	2300      	movs	r3, #0
    1ce2:	60fb      	str	r3, [r7, #12]
	request.internRequest.I2CExpanderGotMessage=CheckI2CExpander(1);
    1ce4:	2101      	movs	r1, #1
    1ce6:	6878      	ldr	r0, [r7, #4]
    1ce8:	4b08      	ldr	r3, [pc, #32]	; (1d0c <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x34>)
    1cea:	4798      	blx	r3
    1cec:	4603      	mov	r3, r0
    1cee:	461a      	mov	r2, r3
    1cf0:	4b07      	ldr	r3, [pc, #28]	; (1d10 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x38>)
    1cf2:	705a      	strb	r2, [r3, #1]
	request.internRequest.LTC2983GotMessage=CheckTemperatures();
    1cf4:	6878      	ldr	r0, [r7, #4]
    1cf6:	4b07      	ldr	r3, [pc, #28]	; (1d14 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x3c>)
    1cf8:	4798      	blx	r3
    1cfa:	4603      	mov	r3, r0
    1cfc:	461a      	mov	r2, r3
    1cfe:	4b04      	ldr	r3, [pc, #16]	; (1d10 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x38>)
    1d00:	701a      	strb	r2, [r3, #0]
	return	0;
    1d02:	2300      	movs	r3, #0
}
    1d04:	4618      	mov	r0, r3
    1d06:	3710      	adds	r7, #16
    1d08:	46bd      	mov	sp, r7
    1d0a:	bd80      	pop	{r7, pc}
    1d0c:	00001d8d 	.word	0x00001d8d
    1d10:	2000170c 	.word	0x2000170c
    1d14:	00001e49 	.word	0x00001e49

00001d18 <_ZN16Interfaces_Class26CheckExternalCommunicationEv>:
uint32_t Interfaces_Class::CheckExternalCommunication(void)
{
    1d18:	b580      	push	{r7, lr}
    1d1a:	b084      	sub	sp, #16
    1d1c:	af00      	add	r7, sp, #0
    1d1e:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    1d20:	2300      	movs	r3, #0
    1d22:	60fb      	str	r3, [r7, #12]


	if (arinc.newMessageR1)
    1d24:	4b14      	ldr	r3, [pc, #80]	; (1d78 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x60>)
    1d26:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
    1d2a:	b2db      	uxtb	r3, r3
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d007      	beq.n	1d40 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x28>
	{
		request.externRequest.arinc1GotMessage=true;
    1d30:	4b12      	ldr	r3, [pc, #72]	; (1d7c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1d32:	2201      	movs	r2, #1
    1d34:	709a      	strb	r2, [r3, #2]
		alu.PrepareNewTask(kALUTaskReadARINCR1);
    1d36:	2200      	movs	r2, #0
    1d38:	2104      	movs	r1, #4
    1d3a:	4811      	ldr	r0, [pc, #68]	; (1d80 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x68>)
    1d3c:	4b11      	ldr	r3, [pc, #68]	; (1d84 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x6c>)
    1d3e:	4798      	blx	r3
	}
	if (arinc.newMessageR2)
    1d40:	4b0d      	ldr	r3, [pc, #52]	; (1d78 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x60>)
    1d42:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
    1d46:	b2db      	uxtb	r3, r3
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d007      	beq.n	1d5c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x44>
	{
		request.externRequest.arinc2GotMessage=true;
    1d4c:	4b0b      	ldr	r3, [pc, #44]	; (1d7c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1d4e:	2201      	movs	r2, #1
    1d50:	70da      	strb	r2, [r3, #3]
		alu.PrepareNewTask(kALUTaskReadARINCR2);
    1d52:	2200      	movs	r2, #0
    1d54:	2105      	movs	r1, #5
    1d56:	480a      	ldr	r0, [pc, #40]	; (1d80 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x68>)
    1d58:	4b0a      	ldr	r3, [pc, #40]	; (1d84 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x6c>)
    1d5a:	4798      	blx	r3
	}
	if (CheckUSBInterface())
    1d5c:	6878      	ldr	r0, [r7, #4]
    1d5e:	4b0a      	ldr	r3, [pc, #40]	; (1d88 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x70>)
    1d60:	4798      	blx	r3
    1d62:	4603      	mov	r3, r0
    1d64:	2b00      	cmp	r3, #0
    1d66:	d002      	beq.n	1d6e <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x56>
	{
		request.externRequest.usbGotMessage=true;
    1d68:	4b04      	ldr	r3, [pc, #16]	; (1d7c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1d6a:	2201      	movs	r2, #1
    1d6c:	711a      	strb	r2, [r3, #4]
		//alu.PrepareNewTask(kALUTaskReadARINCR2);
	}
	//request.externRequest.arinc1GotMessage=arinc.newMessageR2;
	
	return	0;
    1d6e:	2300      	movs	r3, #0
}
    1d70:	4618      	mov	r0, r3
    1d72:	3710      	adds	r7, #16
    1d74:	46bd      	mov	sp, r7
    1d76:	bd80      	pop	{r7, pc}
    1d78:	20009128 	.word	0x20009128
    1d7c:	2000170c 	.word	0x2000170c
    1d80:	20000ce8 	.word	0x20000ce8
    1d84:	000008a5 	.word	0x000008a5
    1d88:	00001dc5 	.word	0x00001dc5

00001d8c <_ZN16Interfaces_Class16CheckI2CExpanderEh>:
bool	Interfaces_Class::CheckI2CExpander(uint8_t add){
    1d8c:	b580      	push	{r7, lr}
    1d8e:	b082      	sub	sp, #8
    1d90:	af00      	add	r7, sp, #0
    1d92:	6078      	str	r0, [r7, #4]
    1d94:	460b      	mov	r3, r1
    1d96:	70fb      	strb	r3, [r7, #3]
		if (mcp.hasChanged)
    1d98:	4b08      	ldr	r3, [pc, #32]	; (1dbc <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    1d9a:	785b      	ldrb	r3, [r3, #1]
    1d9c:	b2db      	uxtb	r3, r3
    1d9e:	2b00      	cmp	r3, #0
    1da0:	d005      	beq.n	1dae <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x22>
		{
			mcp.SavePorts();
    1da2:	4806      	ldr	r0, [pc, #24]	; (1dbc <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    1da4:	4b06      	ldr	r3, [pc, #24]	; (1dc0 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x34>)
    1da6:	4798      	blx	r3
			mcp.hasChanged=false;
    1da8:	4b04      	ldr	r3, [pc, #16]	; (1dbc <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    1daa:	2200      	movs	r2, #0
    1dac:	705a      	strb	r2, [r3, #1]
		}
		return	mcp.hasChanged;
    1dae:	4b03      	ldr	r3, [pc, #12]	; (1dbc <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    1db0:	785b      	ldrb	r3, [r3, #1]
    1db2:	b2db      	uxtb	r3, r3
}
    1db4:	4618      	mov	r0, r3
    1db6:	3708      	adds	r7, #8
    1db8:	46bd      	mov	sp, r7
    1dba:	bd80      	pop	{r7, pc}
    1dbc:	20009de4 	.word	0x20009de4
    1dc0:	00015429 	.word	0x00015429

00001dc4 <_ZN16Interfaces_Class17CheckUSBInterfaceEv>:
bool	Interfaces_Class::CheckUSBInterface(void){
    1dc4:	b580      	push	{r7, lr}
    1dc6:	b082      	sub	sp, #8
    1dc8:	af00      	add	r7, sp, #0
    1dca:	6078      	str	r0, [r7, #4]
		if (usb.connected)
    1dcc:	4b13      	ldr	r3, [pc, #76]	; (1e1c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    1dce:	7c1b      	ldrb	r3, [r3, #16]
    1dd0:	b2db      	uxtb	r3, r3
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d01b      	beq.n	1e0e <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x4a>
		{
			if (maintenance.IsAppConnected())
    1dd6:	4812      	ldr	r0, [pc, #72]	; (1e20 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x5c>)
    1dd8:	4b12      	ldr	r3, [pc, #72]	; (1e24 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x60>)
    1dda:	4798      	blx	r3
    1ddc:	4603      	mov	r3, r0
    1dde:	2b00      	cmp	r3, #0
    1de0:	d009      	beq.n	1df6 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x32>
			{
				usb<<"Maintenance Tool Locked"<<NEWLINE;
    1de2:	4911      	ldr	r1, [pc, #68]	; (1e28 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x64>)
    1de4:	480d      	ldr	r0, [pc, #52]	; (1e1c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    1de6:	4b11      	ldr	r3, [pc, #68]	; (1e2c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x68>)
    1de8:	4798      	blx	r3
    1dea:	4603      	mov	r3, r0
    1dec:	4910      	ldr	r1, [pc, #64]	; (1e30 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x6c>)
    1dee:	4618      	mov	r0, r3
    1df0:	4b10      	ldr	r3, [pc, #64]	; (1e34 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x70>)
    1df2:	4798      	blx	r3
    1df4:	e008      	b.n	1e08 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x44>
			} 
			else
			{
				usb<<"Remote operation Disabled"<<NEWLINE;
    1df6:	4910      	ldr	r1, [pc, #64]	; (1e38 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x74>)
    1df8:	4808      	ldr	r0, [pc, #32]	; (1e1c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    1dfa:	4b10      	ldr	r3, [pc, #64]	; (1e3c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x78>)
    1dfc:	4798      	blx	r3
    1dfe:	4603      	mov	r3, r0
    1e00:	490b      	ldr	r1, [pc, #44]	; (1e30 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x6c>)
    1e02:	4618      	mov	r0, r3
    1e04:	4b0b      	ldr	r3, [pc, #44]	; (1e34 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x70>)
    1e06:	4798      	blx	r3
			}
			hvac.PrintState();
    1e08:	480d      	ldr	r0, [pc, #52]	; (1e40 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x7c>)
    1e0a:	4b0e      	ldr	r3, [pc, #56]	; (1e44 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x80>)
    1e0c:	4798      	blx	r3
		}else{
						
		}
		return	usb.rxReady;
    1e0e:	4b03      	ldr	r3, [pc, #12]	; (1e1c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    1e10:	7d5b      	ldrb	r3, [r3, #21]
    1e12:	b2db      	uxtb	r3, r3
}
    1e14:	4618      	mov	r0, r3
    1e16:	3708      	adds	r7, #8
    1e18:	46bd      	mov	sp, r7
    1e1a:	bd80      	pop	{r7, pc}
    1e1c:	2000168c 	.word	0x2000168c
    1e20:	2000a78c 	.word	0x2000a78c
    1e24:	00019329 	.word	0x00019329
    1e28:	0001fe38 	.word	0x0001fe38
    1e2c:	00001f05 	.word	0x00001f05
    1e30:	0001fe50 	.word	0x0001fe50
    1e34:	00000afd 	.word	0x00000afd
    1e38:	0001fe54 	.word	0x0001fe54
    1e3c:	00001f25 	.word	0x00001f25
    1e40:	200083d0 	.word	0x200083d0
    1e44:	000010f5 	.word	0x000010f5

00001e48 <_ZN16Interfaces_Class17CheckTemperaturesEv>:

bool	Interfaces_Class::CheckTemperatures(void){
    1e48:	b580      	push	{r7, lr}
    1e4a:	b084      	sub	sp, #16
    1e4c:	af00      	add	r7, sp, #0
    1e4e:	6078      	str	r0, [r7, #4]
	bool result(false);
    1e50:	2300      	movs	r3, #0
    1e52:	73fb      	strb	r3, [r7, #15]
	if (temperatures.IsConversionFinished())
    1e54:	480e      	ldr	r0, [pc, #56]	; (1e90 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x48>)
    1e56:	4b0f      	ldr	r3, [pc, #60]	; (1e94 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x4c>)
    1e58:	4798      	blx	r3
    1e5a:	4603      	mov	r3, r0
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d012      	beq.n	1e86 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x3e>
	{
		
		temperatures.GetConversionResult();
    1e60:	480b      	ldr	r0, [pc, #44]	; (1e90 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x48>)
    1e62:	4b0d      	ldr	r3, [pc, #52]	; (1e98 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x50>)
    1e64:	4798      	blx	r3
		if (temperatures.faultData==VALID_TEMPERATURE)
    1e66:	4b0a      	ldr	r3, [pc, #40]	; (1e90 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x48>)
    1e68:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    1e6c:	2b01      	cmp	r3, #1
    1e6e:	d106      	bne.n	1e7e <_ZN16Interfaces_Class17CheckTemperaturesEv+0x36>
		{
				alu.PrepareNewTask(kALUTaskUpdateTemperatures);
    1e70:	2200      	movs	r2, #0
    1e72:	210a      	movs	r1, #10
    1e74:	4809      	ldr	r0, [pc, #36]	; (1e9c <_ZN16Interfaces_Class17CheckTemperaturesEv+0x54>)
    1e76:	4b0a      	ldr	r3, [pc, #40]	; (1ea0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x58>)
    1e78:	4798      	blx	r3
				result=true;
    1e7a:	2301      	movs	r3, #1
    1e7c:	73fb      	strb	r3, [r7, #15]
		}
			temperatures.StartOneConversion();
    1e7e:	4804      	ldr	r0, [pc, #16]	; (1e90 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x48>)
    1e80:	4b08      	ldr	r3, [pc, #32]	; (1ea4 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x5c>)
    1e82:	4798      	blx	r3
			asm("nop");
    1e84:	bf00      	nop
	
	} 
	else
	{
	}
	return	result;
    1e86:	7bfb      	ldrb	r3, [r7, #15]
}
    1e88:	4618      	mov	r0, r3
    1e8a:	3710      	adds	r7, #16
    1e8c:	46bd      	mov	sp, r7
    1e8e:	bd80      	pop	{r7, pc}
    1e90:	20009e54 	.word	0x20009e54
    1e94:	00015881 	.word	0x00015881
    1e98:	00015791 	.word	0x00015791
    1e9c:	20000ce8 	.word	0x20000ce8
    1ea0:	000008a5 	.word	0x000008a5
    1ea4:	00015725 	.word	0x00015725

00001ea8 <_ZN16Interfaces_Class9GetStatusER10HVACStatus>:
	{
		
	}
	return	arinc.newMessageR1||arinc.newMessageR2;
}
uint32_t	Interfaces_Class::GetStatus(HVACStatus& s){
    1ea8:	b490      	push	{r4, r7}
    1eaa:	b084      	sub	sp, #16
    1eac:	af00      	add	r7, sp, #0
    1eae:	6078      	str	r0, [r7, #4]
    1eb0:	6039      	str	r1, [r7, #0]
	s=status;
    1eb2:	683a      	ldr	r2, [r7, #0]
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	4614      	mov	r4, r2
    1eb8:	3370      	adds	r3, #112	; 0x70
    1eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	*p=(uint32_t*)(&s.statusBits);
    1ec0:	683b      	ldr	r3, [r7, #0]
    1ec2:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    1ec4:	2300      	movs	r3, #0
    1ec6:	60bb      	str	r3, [r7, #8]
    1ec8:	68bb      	ldr	r3, [r7, #8]
    1eca:	2b08      	cmp	r3, #8
    1ecc:	d812      	bhi.n	1ef4 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x4c>
	{
		s.rawStatus+=(*p)&(0x01<<i);
    1ece:	683b      	ldr	r3, [r7, #0]
    1ed0:	68da      	ldr	r2, [r3, #12]
    1ed2:	68fb      	ldr	r3, [r7, #12]
    1ed4:	681b      	ldr	r3, [r3, #0]
    1ed6:	2001      	movs	r0, #1
    1ed8:	68b9      	ldr	r1, [r7, #8]
    1eda:	fa00 f101 	lsl.w	r1, r0, r1
    1ede:	400b      	ands	r3, r1
    1ee0:	441a      	add	r2, r3
    1ee2:	683b      	ldr	r3, [r7, #0]
    1ee4:	60da      	str	r2, [r3, #12]
		p++;
    1ee6:	68fb      	ldr	r3, [r7, #12]
    1ee8:	3304      	adds	r3, #4
    1eea:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    1eec:	68bb      	ldr	r3, [r7, #8]
    1eee:	3301      	adds	r3, #1
    1ef0:	60bb      	str	r3, [r7, #8]
    1ef2:	e7e9      	b.n	1ec8 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x20>
	}
	return	status.rawStatus;
    1ef4:	687b      	ldr	r3, [r7, #4]
    1ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
    1ef8:	4618      	mov	r0, r3
    1efa:	3710      	adds	r7, #16
    1efc:	46bd      	mov	sp, r7
    1efe:	bc90      	pop	{r4, r7}
    1f00:	4770      	bx	lr
	...

00001f04 <_ZlsIA24_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1f04:	b580      	push	{r7, lr}
    1f06:	b082      	sub	sp, #8
    1f08:	af00      	add	r7, sp, #0
    1f0a:	6078      	str	r0, [r7, #4]
    1f0c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1f0e:	6839      	ldr	r1, [r7, #0]
    1f10:	6878      	ldr	r0, [r7, #4]
    1f12:	4b03      	ldr	r3, [pc, #12]	; (1f20 <_ZlsIA24_cER5PrintS2_RKT_+0x1c>)
    1f14:	4798      	blx	r3
    1f16:	687b      	ldr	r3, [r7, #4]
    1f18:	4618      	mov	r0, r3
    1f1a:	3708      	adds	r7, #8
    1f1c:	46bd      	mov	sp, r7
    1f1e:	bd80      	pop	{r7, pc}
    1f20:	00017dfd 	.word	0x00017dfd

00001f24 <_ZlsIA26_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1f24:	b580      	push	{r7, lr}
    1f26:	b082      	sub	sp, #8
    1f28:	af00      	add	r7, sp, #0
    1f2a:	6078      	str	r0, [r7, #4]
    1f2c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1f2e:	6839      	ldr	r1, [r7, #0]
    1f30:	6878      	ldr	r0, [r7, #4]
    1f32:	4b03      	ldr	r3, [pc, #12]	; (1f40 <_ZlsIA26_cER5PrintS2_RKT_+0x1c>)
    1f34:	4798      	blx	r3
    1f36:	687b      	ldr	r3, [r7, #4]
    1f38:	4618      	mov	r0, r3
    1f3a:	3708      	adds	r7, #8
    1f3c:	46bd      	mov	sp, r7
    1f3e:	bd80      	pop	{r7, pc}
    1f40:	00017dfd 	.word	0x00017dfd

00001f44 <_Z41__static_initialization_and_destruction_0ii>:
Interfaces_Class	interfaces;
    1f44:	b580      	push	{r7, lr}
    1f46:	b082      	sub	sp, #8
    1f48:	af00      	add	r7, sp, #0
    1f4a:	6078      	str	r0, [r7, #4]
    1f4c:	6039      	str	r1, [r7, #0]
    1f4e:	687b      	ldr	r3, [r7, #4]
    1f50:	2b01      	cmp	r3, #1
    1f52:	d124      	bne.n	1f9e <_Z41__static_initialization_and_destruction_0ii+0x5a>
    1f54:	683b      	ldr	r3, [r7, #0]
    1f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1f5a:	4293      	cmp	r3, r2
    1f5c:	d11f      	bne.n	1f9e <_Z41__static_initialization_and_destruction_0ii+0x5a>
    1f5e:	4812      	ldr	r0, [pc, #72]	; (1fa8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1f60:	4b12      	ldr	r3, [pc, #72]	; (1fac <_Z41__static_initialization_and_destruction_0ii+0x68>)
    1f62:	4798      	blx	r3
    1f64:	4a12      	ldr	r2, [pc, #72]	; (1fb0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    1f66:	4913      	ldr	r1, [pc, #76]	; (1fb4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    1f68:	480f      	ldr	r0, [pc, #60]	; (1fa8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1f6a:	4b13      	ldr	r3, [pc, #76]	; (1fb8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1f6c:	4798      	blx	r3
    1f6e:	4813      	ldr	r0, [pc, #76]	; (1fbc <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1f70:	4b13      	ldr	r3, [pc, #76]	; (1fc0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1f72:	4798      	blx	r3
    1f74:	4a0e      	ldr	r2, [pc, #56]	; (1fb0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    1f76:	4913      	ldr	r1, [pc, #76]	; (1fc4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    1f78:	4810      	ldr	r0, [pc, #64]	; (1fbc <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1f7a:	4b0f      	ldr	r3, [pc, #60]	; (1fb8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1f7c:	4798      	blx	r3
    1f7e:	4812      	ldr	r0, [pc, #72]	; (1fc8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    1f80:	4b12      	ldr	r3, [pc, #72]	; (1fcc <_Z41__static_initialization_and_destruction_0ii+0x88>)
    1f82:	4798      	blx	r3
    1f84:	4a0a      	ldr	r2, [pc, #40]	; (1fb0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    1f86:	4912      	ldr	r1, [pc, #72]	; (1fd0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    1f88:	480f      	ldr	r0, [pc, #60]	; (1fc8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    1f8a:	4b0b      	ldr	r3, [pc, #44]	; (1fb8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1f8c:	4798      	blx	r3
    1f8e:	4811      	ldr	r0, [pc, #68]	; (1fd4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    1f90:	4b11      	ldr	r3, [pc, #68]	; (1fd8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    1f92:	4798      	blx	r3
    1f94:	4a06      	ldr	r2, [pc, #24]	; (1fb0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    1f96:	4911      	ldr	r1, [pc, #68]	; (1fdc <_Z41__static_initialization_and_destruction_0ii+0x98>)
    1f98:	480e      	ldr	r0, [pc, #56]	; (1fd4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    1f9a:	4b07      	ldr	r3, [pc, #28]	; (1fb8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1f9c:	4798      	blx	r3
    1f9e:	bf00      	nop
    1fa0:	3708      	adds	r7, #8
    1fa2:	46bd      	mov	sp, r7
    1fa4:	bd80      	pop	{r7, pc}
    1fa6:	bf00      	nop
    1fa8:	2000168c 	.word	0x2000168c
    1fac:	000178dd 	.word	0x000178dd
    1fb0:	20000000 	.word	0x20000000
    1fb4:	00017925 	.word	0x00017925
    1fb8:	0001949d 	.word	0x0001949d
    1fbc:	200016ec 	.word	0x200016ec
    1fc0:	00002b11 	.word	0x00002b11
    1fc4:	00002b2b 	.word	0x00002b2b
    1fc8:	20001700 	.word	0x20001700
    1fcc:	00000e35 	.word	0x00000e35
    1fd0:	00000e4f 	.word	0x00000e4f
    1fd4:	20001714 	.word	0x20001714
    1fd8:	00001b61 	.word	0x00001b61
    1fdc:	00001b75 	.word	0x00001b75

00001fe0 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:
    1fe0:	b580      	push	{r7, lr}
    1fe2:	af00      	add	r7, sp, #0
    1fe4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1fe8:	2001      	movs	r0, #1
    1fea:	4b01      	ldr	r3, [pc, #4]	; (1ff0 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x10>)
    1fec:	4798      	blx	r3
    1fee:	bd80      	pop	{r7, pc}
    1ff0:	00001f45 	.word	0x00001f45

00001ff4 <main>:
		
	}
}

int main(void)
{
    1ff4:	b580      	push	{r7, lr}
    1ff6:	b082      	sub	sp, #8
    1ff8:	af00      	add	r7, sp, #0
	atmel_start_init();
    1ffa:	4b40      	ldr	r3, [pc, #256]	; (20fc <main+0x108>)
    1ffc:	4798      	blx	r3
//  	uint32_t p=pwm_enable(&LIVE_PULSE);
//  	while (1);

	usb.Init();
    1ffe:	4840      	ldr	r0, [pc, #256]	; (2100 <main+0x10c>)
    2000:	4b40      	ldr	r3, [pc, #256]	; (2104 <main+0x110>)
    2002:	4798      	blx	r3
	delay_ms(100);
    2004:	2064      	movs	r0, #100	; 0x64
    2006:	4b40      	ldr	r3, [pc, #256]	; (2108 <main+0x114>)
    2008:	4798      	blx	r3
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    200a:	4940      	ldr	r1, [pc, #256]	; (210c <main+0x118>)
    200c:	483c      	ldr	r0, [pc, #240]	; (2100 <main+0x10c>)
    200e:	4b40      	ldr	r3, [pc, #256]	; (2110 <main+0x11c>)
    2010:	4798      	blx	r3
    2012:	4603      	mov	r3, r0
    2014:	493d      	ldr	r1, [pc, #244]	; (210c <main+0x118>)
    2016:	4618      	mov	r0, r3
    2018:	4b3d      	ldr	r3, [pc, #244]	; (2110 <main+0x11c>)
    201a:	4798      	blx	r3
    201c:	4603      	mov	r3, r0
    201e:	493d      	ldr	r1, [pc, #244]	; (2114 <main+0x120>)
    2020:	4618      	mov	r0, r3
    2022:	4b3d      	ldr	r3, [pc, #244]	; (2118 <main+0x124>)
    2024:	4798      	blx	r3
    2026:	4603      	mov	r3, r0
    2028:	4938      	ldr	r1, [pc, #224]	; (210c <main+0x118>)
    202a:	4618      	mov	r0, r3
    202c:	4b38      	ldr	r3, [pc, #224]	; (2110 <main+0x11c>)
    202e:	4798      	blx	r3
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
    2030:	493a      	ldr	r1, [pc, #232]	; (211c <main+0x128>)
    2032:	4833      	ldr	r0, [pc, #204]	; (2100 <main+0x10c>)
    2034:	4b3a      	ldr	r3, [pc, #232]	; (2120 <main+0x12c>)
    2036:	4798      	blx	r3
    2038:	4603      	mov	r3, r0
    203a:	493a      	ldr	r1, [pc, #232]	; (2124 <main+0x130>)
    203c:	4618      	mov	r0, r3
    203e:	4b38      	ldr	r3, [pc, #224]	; (2120 <main+0x12c>)
    2040:	4798      	blx	r3
    2042:	4603      	mov	r3, r0
    2044:	4938      	ldr	r1, [pc, #224]	; (2128 <main+0x134>)
    2046:	4618      	mov	r0, r3
    2048:	4b38      	ldr	r3, [pc, #224]	; (212c <main+0x138>)
    204a:	4798      	blx	r3
    204c:	4603      	mov	r3, r0
    204e:	4938      	ldr	r1, [pc, #224]	; (2130 <main+0x13c>)
    2050:	4618      	mov	r0, r3
    2052:	4b38      	ldr	r3, [pc, #224]	; (2134 <main+0x140>)
    2054:	4798      	blx	r3
    2056:	4603      	mov	r3, r0
    2058:	492c      	ldr	r1, [pc, #176]	; (210c <main+0x118>)
    205a:	4618      	mov	r0, r3
    205c:	4b2c      	ldr	r3, [pc, #176]	; (2110 <main+0x11c>)
    205e:	4798      	blx	r3
    2060:	4603      	mov	r3, r0
    2062:	492a      	ldr	r1, [pc, #168]	; (210c <main+0x118>)
    2064:	4618      	mov	r0, r3
    2066:	4b2a      	ldr	r3, [pc, #168]	; (2110 <main+0x11c>)
    2068:	4798      	blx	r3
	//QSPIDriverTest();
	memory.Init();
    206a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    206e:	4832      	ldr	r0, [pc, #200]	; (2138 <main+0x144>)
    2070:	4b32      	ldr	r3, [pc, #200]	; (213c <main+0x148>)
    2072:	4798      	blx	r3
	alu.Init();
    2074:	4832      	ldr	r0, [pc, #200]	; (2140 <main+0x14c>)
    2076:	4b33      	ldr	r3, [pc, #204]	; (2144 <main+0x150>)
    2078:	4798      	blx	r3
	alu.RunController();
    207a:	4831      	ldr	r0, [pc, #196]	; (2140 <main+0x14c>)
    207c:	4b32      	ldr	r3, [pc, #200]	; (2148 <main+0x154>)
    207e:	4798      	blx	r3
	usb<<"*** ALU initiated ***"<<NEWLINE;
    2080:	4932      	ldr	r1, [pc, #200]	; (214c <main+0x158>)
    2082:	481f      	ldr	r0, [pc, #124]	; (2100 <main+0x10c>)
    2084:	4b32      	ldr	r3, [pc, #200]	; (2150 <main+0x15c>)
    2086:	4798      	blx	r3
    2088:	4603      	mov	r3, r0
    208a:	4920      	ldr	r1, [pc, #128]	; (210c <main+0x118>)
    208c:	4618      	mov	r0, r3
    208e:	4b20      	ldr	r3, [pc, #128]	; (2110 <main+0x11c>)
    2090:	4798      	blx	r3
	uint8_t	line= alu.GetSelectedAMMC();
    2092:	482b      	ldr	r0, [pc, #172]	; (2140 <main+0x14c>)
    2094:	4b2f      	ldr	r3, [pc, #188]	; (2154 <main+0x160>)
    2096:	4798      	blx	r3
    2098:	4603      	mov	r3, r0
    209a:	71fb      	strb	r3, [r7, #7]
	usb<<"Active line: "<<line<<NEWLINE;
    209c:	492e      	ldr	r1, [pc, #184]	; (2158 <main+0x164>)
    209e:	4818      	ldr	r0, [pc, #96]	; (2100 <main+0x10c>)
    20a0:	4b2e      	ldr	r3, [pc, #184]	; (215c <main+0x168>)
    20a2:	4798      	blx	r3
    20a4:	4602      	mov	r2, r0
    20a6:	1dfb      	adds	r3, r7, #7
    20a8:	4619      	mov	r1, r3
    20aa:	4610      	mov	r0, r2
    20ac:	4b2c      	ldr	r3, [pc, #176]	; (2160 <main+0x16c>)
    20ae:	4798      	blx	r3
    20b0:	4603      	mov	r3, r0
    20b2:	4916      	ldr	r1, [pc, #88]	; (210c <main+0x118>)
    20b4:	4618      	mov	r0, r3
    20b6:	4b16      	ldr	r3, [pc, #88]	; (2110 <main+0x11c>)
    20b8:	4798      	blx	r3
	if (!pBit)
    20ba:	482a      	ldr	r0, [pc, #168]	; (2164 <main+0x170>)
    20bc:	4b2a      	ldr	r3, [pc, #168]	; (2168 <main+0x174>)
    20be:	4798      	blx	r3
    20c0:	4603      	mov	r3, r0
    20c2:	f083 0301 	eor.w	r3, r3, #1
    20c6:	b2db      	uxtb	r3, r3
    20c8:	2b00      	cmp	r3, #0
    20ca:	d004      	beq.n	20d6 <main+0xe2>
	{
		hvac.Stop(0);
    20cc:	2100      	movs	r1, #0
    20ce:	4827      	ldr	r0, [pc, #156]	; (216c <main+0x178>)
    20d0:	4b27      	ldr	r3, [pc, #156]	; (2170 <main+0x17c>)
    20d2:	4798      	blx	r3
    20d4:	e003      	b.n	20de <main+0xea>
	} 
	else
	{
		hvac.Start(0);
    20d6:	2100      	movs	r1, #0
    20d8:	4824      	ldr	r0, [pc, #144]	; (216c <main+0x178>)
    20da:	4b26      	ldr	r3, [pc, #152]	; (2174 <main+0x180>)
    20dc:	4798      	blx	r3
	}
    /* Replace with your application code */
    while (1) 
    {
		delay_ms(1000);
    20de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    20e2:	4b09      	ldr	r3, [pc, #36]	; (2108 <main+0x114>)
    20e4:	4798      	blx	r3
		usb<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    20e6:	490b      	ldr	r1, [pc, #44]	; (2114 <main+0x120>)
    20e8:	4805      	ldr	r0, [pc, #20]	; (2100 <main+0x10c>)
    20ea:	4b0b      	ldr	r3, [pc, #44]	; (2118 <main+0x124>)
    20ec:	4798      	blx	r3
    20ee:	4603      	mov	r3, r0
    20f0:	4906      	ldr	r1, [pc, #24]	; (210c <main+0x118>)
    20f2:	4618      	mov	r0, r3
    20f4:	4b06      	ldr	r3, [pc, #24]	; (2110 <main+0x11c>)
    20f6:	4798      	blx	r3
		delay_ms(1000);
    20f8:	e7f1      	b.n	20de <main+0xea>
    20fa:	bf00      	nop
    20fc:	0000424d 	.word	0x0000424d
    2100:	200017a0 	.word	0x200017a0
    2104:	00017951 	.word	0x00017951
    2108:	00005fa1 	.word	0x00005fa1
    210c:	0001feb4 	.word	0x0001feb4
    2110:	00000afd 	.word	0x00000afd
    2114:	0001feec 	.word	0x0001feec
    2118:	00002179 	.word	0x00002179
    211c:	0001ff10 	.word	0x0001ff10
    2120:	00002199 	.word	0x00002199
    2124:	0001ff1c 	.word	0x0001ff1c
    2128:	0001ff28 	.word	0x0001ff28
    212c:	000021b9 	.word	0x000021b9
    2130:	0001ff30 	.word	0x0001ff30
    2134:	000021d9 	.word	0x000021d9
    2138:	20002880 	.word	0x20002880
    213c:	000023cd 	.word	0x000023cd
    2140:	20000ce8 	.word	0x20000ce8
    2144:	00000395 	.word	0x00000395
    2148:	000004e9 	.word	0x000004e9
    214c:	0001ff3c 	.word	0x0001ff3c
    2150:	000021f9 	.word	0x000021f9
    2154:	00000671 	.word	0x00000671
    2158:	0001ff54 	.word	0x0001ff54
    215c:	00002219 	.word	0x00002219
    2160:	00000ad5 	.word	0x00000ad5
    2164:	20001800 	.word	0x20001800
    2168:	00002b3f 	.word	0x00002b3f
    216c:	200083d0 	.word	0x200083d0
    2170:	00003b2d 	.word	0x00003b2d
    2174:	0000305d 	.word	0x0000305d

00002178 <_ZlsIA33_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2178:	b580      	push	{r7, lr}
    217a:	b082      	sub	sp, #8
    217c:	af00      	add	r7, sp, #0
    217e:	6078      	str	r0, [r7, #4]
    2180:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2182:	6839      	ldr	r1, [r7, #0]
    2184:	6878      	ldr	r0, [r7, #4]
    2186:	4b03      	ldr	r3, [pc, #12]	; (2194 <_ZlsIA33_cER5PrintS2_RKT_+0x1c>)
    2188:	4798      	blx	r3
    218a:	687b      	ldr	r3, [r7, #4]
    218c:	4618      	mov	r0, r3
    218e:	3708      	adds	r7, #8
    2190:	46bd      	mov	sp, r7
    2192:	bd80      	pop	{r7, pc}
    2194:	00017dfd 	.word	0x00017dfd

00002198 <_ZlsIA12_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2198:	b580      	push	{r7, lr}
    219a:	b082      	sub	sp, #8
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
    21a0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    21a2:	6839      	ldr	r1, [r7, #0]
    21a4:	6878      	ldr	r0, [r7, #4]
    21a6:	4b03      	ldr	r3, [pc, #12]	; (21b4 <_ZlsIA12_cER5PrintS2_RKT_+0x1c>)
    21a8:	4798      	blx	r3
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	4618      	mov	r0, r3
    21ae:	3708      	adds	r7, #8
    21b0:	46bd      	mov	sp, r7
    21b2:	bd80      	pop	{r7, pc}
    21b4:	00017dfd 	.word	0x00017dfd

000021b8 <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    21b8:	b580      	push	{r7, lr}
    21ba:	b082      	sub	sp, #8
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
    21c0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    21c2:	6839      	ldr	r1, [r7, #0]
    21c4:	6878      	ldr	r0, [r7, #4]
    21c6:	4b03      	ldr	r3, [pc, #12]	; (21d4 <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
    21c8:	4798      	blx	r3
    21ca:	687b      	ldr	r3, [r7, #4]
    21cc:	4618      	mov	r0, r3
    21ce:	3708      	adds	r7, #8
    21d0:	46bd      	mov	sp, r7
    21d2:	bd80      	pop	{r7, pc}
    21d4:	00017dfd 	.word	0x00017dfd

000021d8 <_ZlsIA9_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    21d8:	b580      	push	{r7, lr}
    21da:	b082      	sub	sp, #8
    21dc:	af00      	add	r7, sp, #0
    21de:	6078      	str	r0, [r7, #4]
    21e0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    21e2:	6839      	ldr	r1, [r7, #0]
    21e4:	6878      	ldr	r0, [r7, #4]
    21e6:	4b03      	ldr	r3, [pc, #12]	; (21f4 <_ZlsIA9_cER5PrintS2_RKT_+0x1c>)
    21e8:	4798      	blx	r3
    21ea:	687b      	ldr	r3, [r7, #4]
    21ec:	4618      	mov	r0, r3
    21ee:	3708      	adds	r7, #8
    21f0:	46bd      	mov	sp, r7
    21f2:	bd80      	pop	{r7, pc}
    21f4:	00017dfd 	.word	0x00017dfd

000021f8 <_ZlsIA22_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    21f8:	b580      	push	{r7, lr}
    21fa:	b082      	sub	sp, #8
    21fc:	af00      	add	r7, sp, #0
    21fe:	6078      	str	r0, [r7, #4]
    2200:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2202:	6839      	ldr	r1, [r7, #0]
    2204:	6878      	ldr	r0, [r7, #4]
    2206:	4b03      	ldr	r3, [pc, #12]	; (2214 <_ZlsIA22_cER5PrintS2_RKT_+0x1c>)
    2208:	4798      	blx	r3
    220a:	687b      	ldr	r3, [r7, #4]
    220c:	4618      	mov	r0, r3
    220e:	3708      	adds	r7, #8
    2210:	46bd      	mov	sp, r7
    2212:	bd80      	pop	{r7, pc}
    2214:	00017dfd 	.word	0x00017dfd

00002218 <_ZlsIA14_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2218:	b580      	push	{r7, lr}
    221a:	b082      	sub	sp, #8
    221c:	af00      	add	r7, sp, #0
    221e:	6078      	str	r0, [r7, #4]
    2220:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2222:	6839      	ldr	r1, [r7, #0]
    2224:	6878      	ldr	r0, [r7, #4]
    2226:	4b03      	ldr	r3, [pc, #12]	; (2234 <_ZlsIA14_cER5PrintS2_RKT_+0x1c>)
    2228:	4798      	blx	r3
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	4618      	mov	r0, r3
    222e:	3708      	adds	r7, #8
    2230:	46bd      	mov	sp, r7
    2232:	bd80      	pop	{r7, pc}
    2234:	00017dfd 	.word	0x00017dfd

00002238 <_Z41__static_initialization_and_destruction_0ii>:
    }
}
    2238:	b580      	push	{r7, lr}
    223a:	b082      	sub	sp, #8
    223c:	af00      	add	r7, sp, #0
    223e:	6078      	str	r0, [r7, #4]
    2240:	6039      	str	r1, [r7, #0]
    2242:	687b      	ldr	r3, [r7, #4]
    2244:	2b01      	cmp	r3, #1
    2246:	d11c      	bne.n	2282 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    2248:	683b      	ldr	r3, [r7, #0]
    224a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    224e:	4293      	cmp	r3, r2
    2250:	d117      	bne.n	2282 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    2252:	480e      	ldr	r0, [pc, #56]	; (228c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    2254:	4b0e      	ldr	r3, [pc, #56]	; (2290 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    2256:	4798      	blx	r3
    2258:	4a0e      	ldr	r2, [pc, #56]	; (2294 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    225a:	490f      	ldr	r1, [pc, #60]	; (2298 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    225c:	480b      	ldr	r0, [pc, #44]	; (228c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    225e:	4b0f      	ldr	r3, [pc, #60]	; (229c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    2260:	4798      	blx	r3
    2262:	480f      	ldr	r0, [pc, #60]	; (22a0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    2264:	4b0f      	ldr	r3, [pc, #60]	; (22a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    2266:	4798      	blx	r3
    2268:	4a0a      	ldr	r2, [pc, #40]	; (2294 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    226a:	490f      	ldr	r1, [pc, #60]	; (22a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    226c:	480c      	ldr	r0, [pc, #48]	; (22a0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    226e:	4b0b      	ldr	r3, [pc, #44]	; (229c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    2270:	4798      	blx	r3
    2272:	480e      	ldr	r0, [pc, #56]	; (22ac <_Z41__static_initialization_and_destruction_0ii+0x74>)
    2274:	4b0e      	ldr	r3, [pc, #56]	; (22b0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    2276:	4798      	blx	r3
    2278:	4a06      	ldr	r2, [pc, #24]	; (2294 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    227a:	490e      	ldr	r1, [pc, #56]	; (22b4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    227c:	480b      	ldr	r0, [pc, #44]	; (22ac <_Z41__static_initialization_and_destruction_0ii+0x74>)
    227e:	4b07      	ldr	r3, [pc, #28]	; (229c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    2280:	4798      	blx	r3
    2282:	bf00      	nop
    2284:	3708      	adds	r7, #8
    2286:	46bd      	mov	sp, r7
    2288:	bd80      	pop	{r7, pc}
    228a:	bf00      	nop
    228c:	200017a0 	.word	0x200017a0
    2290:	000178dd 	.word	0x000178dd
    2294:	20000000 	.word	0x20000000
    2298:	00017925 	.word	0x00017925
    229c:	0001949d 	.word	0x0001949d
    22a0:	20001800 	.word	0x20001800
    22a4:	00002b11 	.word	0x00002b11
    22a8:	00002b2b 	.word	0x00002b2b
    22ac:	20001814 	.word	0x20001814
    22b0:	00000e35 	.word	0x00000e35
    22b4:	00000e4f 	.word	0x00000e4f

000022b8 <_GLOBAL__sub_I__Z14QSPIDriverTestv>:
    22b8:	b580      	push	{r7, lr}
    22ba:	af00      	add	r7, sp, #0
    22bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    22c0:	2001      	movs	r0, #1
    22c2:	4b01      	ldr	r3, [pc, #4]	; (22c8 <_GLOBAL__sub_I__Z14QSPIDriverTestv+0x10>)
    22c4:	4798      	blx	r3
    22c6:	bd80      	pop	{r7, pc}
    22c8:	00002239 	.word	0x00002239

000022cc <_ZN19PersistenceServicesD1Ev>:

/*
 	Dient dem Zugriff auf software customization area, hardware description area,
	heating program area und dem persistentes Speichern von aktuellem Heizzustand.
*/
class PersistenceServices: public	CRC32_Class
    22cc:	b580      	push	{r7, lr}
    22ce:	b082      	sub	sp, #8
    22d0:	af00      	add	r7, sp, #0
    22d2:	6078      	str	r0, [r7, #4]
    22d4:	687b      	ldr	r3, [r7, #4]
    22d6:	4618      	mov	r0, r3
    22d8:	4b03      	ldr	r3, [pc, #12]	; (22e8 <_ZN19PersistenceServicesD1Ev+0x1c>)
    22da:	4798      	blx	r3
    22dc:	687b      	ldr	r3, [r7, #4]
    22de:	4618      	mov	r0, r3
    22e0:	3708      	adds	r7, #8
    22e2:	46bd      	mov	sp, r7
    22e4:	bd80      	pop	{r7, pc}
    22e6:	bf00      	nop
    22e8:	0000133d 	.word	0x0000133d

000022ec <_ZN21MemoryManagment_ClassC1Ev>:
#include "CDC_Class.h"

static	uint8_t	flashBufferStatic[QSPI_ERBLK/1];

// default constructor
MemoryManagment_Class::MemoryManagment_Class()
    22ec:	b580      	push	{r7, lr}
    22ee:	b082      	sub	sp, #8
    22f0:	af00      	add	r7, sp, #0
    22f2:	6078      	str	r0, [r7, #4]
    22f4:	687b      	ldr	r3, [r7, #4]
    22f6:	4618      	mov	r0, r3
    22f8:	4b1a      	ldr	r3, [pc, #104]	; (2364 <_ZN21MemoryManagment_ClassC1Ev+0x78>)
    22fa:	4798      	blx	r3
    22fc:	687b      	ldr	r3, [r7, #4]
    22fe:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    2302:	4618      	mov	r0, r3
    2304:	4b18      	ldr	r3, [pc, #96]	; (2368 <_ZN21MemoryManagment_ClassC1Ev+0x7c>)
    2306:	4798      	blx	r3
    2308:	687b      	ldr	r3, [r7, #4]
    230a:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    230e:	4618      	mov	r0, r3
    2310:	4b16      	ldr	r3, [pc, #88]	; (236c <_ZN21MemoryManagment_ClassC1Ev+0x80>)
    2312:	4798      	blx	r3
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
    231a:	4618      	mov	r0, r3
    231c:	4b14      	ldr	r3, [pc, #80]	; (2370 <_ZN21MemoryManagment_ClassC1Ev+0x84>)
    231e:	4798      	blx	r3
    2320:	687b      	ldr	r3, [r7, #4]
    2322:	f203 734c 	addw	r3, r3, #1868	; 0x74c
    2326:	4618      	mov	r0, r3
    2328:	4b12      	ldr	r3, [pc, #72]	; (2374 <_ZN21MemoryManagment_ClassC1Ev+0x88>)
    232a:	4798      	blx	r3
    232c:	687b      	ldr	r3, [r7, #4]
    232e:	2200      	movs	r2, #0
    2330:	f8c3 2980 	str.w	r2, [r3, #2432]	; 0x980
{
	_currentAddress=0;
    2334:	687b      	ldr	r3, [r7, #4]
    2336:	2200      	movs	r2, #0
    2338:	f8c3 296c 	str.w	r2, [r3, #2412]	; 0x96c
	head=512;
    233c:	687b      	ldr	r3, [r7, #4]
    233e:	f44f 7200 	mov.w	r2, #512	; 0x200
    2342:	f8c3 2984 	str.w	r2, [r3, #2436]	; 0x984
	tail=0;
    2346:	687b      	ldr	r3, [r7, #4]
    2348:	2200      	movs	r2, #0
    234a:	f8c3 2988 	str.w	r2, [r3, #2440]	; 0x988
	flashBuffer=&flashBufferStatic[0];
    234e:	687b      	ldr	r3, [r7, #4]
    2350:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2354:	3340      	adds	r3, #64	; 0x40
    2356:	4a08      	ldr	r2, [pc, #32]	; (2378 <_ZN21MemoryManagment_ClassC1Ev+0x8c>)
    2358:	601a      	str	r2, [r3, #0]
	
} //MemoryManagment_Class
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	4618      	mov	r0, r3
    235e:	3708      	adds	r7, #8
    2360:	46bd      	mov	sp, r7
    2362:	bd80      	pop	{r7, pc}
    2364:	00001411 	.word	0x00001411
    2368:	00002c15 	.word	0x00002c15
    236c:	0000166b 	.word	0x0000166b
    2370:	00002719 	.word	0x00002719
    2374:	00001475 	.word	0x00001475
    2378:	20001880 	.word	0x20001880

0000237c <_ZN21MemoryManagment_ClassD1Ev>:



// default destructor
MemoryManagment_Class::~MemoryManagment_Class()
    237c:	b580      	push	{r7, lr}
    237e:	b082      	sub	sp, #8
    2380:	af00      	add	r7, sp, #0
    2382:	6078      	str	r0, [r7, #4]
    2384:	687b      	ldr	r3, [r7, #4]
    2386:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
    238a:	4618      	mov	r0, r3
    238c:	4b0b      	ldr	r3, [pc, #44]	; (23bc <_ZN21MemoryManagment_ClassD1Ev+0x40>)
    238e:	4798      	blx	r3
    2390:	687b      	ldr	r3, [r7, #4]
    2392:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    2396:	4618      	mov	r0, r3
    2398:	4b09      	ldr	r3, [pc, #36]	; (23c0 <_ZN21MemoryManagment_ClassD1Ev+0x44>)
    239a:	4798      	blx	r3
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    23a2:	4618      	mov	r0, r3
    23a4:	4b07      	ldr	r3, [pc, #28]	; (23c4 <_ZN21MemoryManagment_ClassD1Ev+0x48>)
    23a6:	4798      	blx	r3
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	4618      	mov	r0, r3
    23ac:	4b06      	ldr	r3, [pc, #24]	; (23c8 <_ZN21MemoryManagment_ClassD1Ev+0x4c>)
    23ae:	4798      	blx	r3
{
} //~MemoryManagment_Class
    23b0:	687b      	ldr	r3, [r7, #4]
    23b2:	4618      	mov	r0, r3
    23b4:	3708      	adds	r7, #8
    23b6:	46bd      	mov	sp, r7
    23b8:	bd80      	pop	{r7, pc}
    23ba:	bf00      	nop
    23bc:	0000272d 	.word	0x0000272d
    23c0:	0000167f 	.word	0x0000167f
    23c4:	000022cd 	.word	0x000022cd
    23c8:	00001441 	.word	0x00001441

000023cc <_ZN21MemoryManagment_Class4InitEm>:

bool	MemoryManagment_Class::Init(uint32_t flashChipSize){
    23cc:	b580      	push	{r7, lr}
    23ce:	b082      	sub	sp, #8
    23d0:	af00      	add	r7, sp, #0
    23d2:	6078      	str	r0, [r7, #4]
    23d4:	6039      	str	r1, [r7, #0]
		if (qspiFlash.Init())
    23d6:	481d      	ldr	r0, [pc, #116]	; (244c <_ZN21MemoryManagment_Class4InitEm+0x80>)
    23d8:	4b1d      	ldr	r3, [pc, #116]	; (2450 <_ZN21MemoryManagment_Class4InitEm+0x84>)
    23da:	4798      	blx	r3
    23dc:	4603      	mov	r3, r0
    23de:	2b00      	cmp	r3, #0
    23e0:	d009      	beq.n	23f6 <_ZN21MemoryManagment_Class4InitEm+0x2a>
		{
			usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
    23e2:	491c      	ldr	r1, [pc, #112]	; (2454 <_ZN21MemoryManagment_Class4InitEm+0x88>)
    23e4:	481c      	ldr	r0, [pc, #112]	; (2458 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    23e6:	4b1d      	ldr	r3, [pc, #116]	; (245c <_ZN21MemoryManagment_Class4InitEm+0x90>)
    23e8:	4798      	blx	r3
    23ea:	4603      	mov	r3, r0
    23ec:	491c      	ldr	r1, [pc, #112]	; (2460 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    23ee:	4618      	mov	r0, r3
    23f0:	4b1c      	ldr	r3, [pc, #112]	; (2464 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    23f2:	4798      	blx	r3
    23f4:	e008      	b.n	2408 <_ZN21MemoryManagment_Class4InitEm+0x3c>
		} 
		else
		{
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
    23f6:	491c      	ldr	r1, [pc, #112]	; (2468 <_ZN21MemoryManagment_Class4InitEm+0x9c>)
    23f8:	4817      	ldr	r0, [pc, #92]	; (2458 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    23fa:	4b18      	ldr	r3, [pc, #96]	; (245c <_ZN21MemoryManagment_Class4InitEm+0x90>)
    23fc:	4798      	blx	r3
    23fe:	4603      	mov	r3, r0
    2400:	4917      	ldr	r1, [pc, #92]	; (2460 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    2402:	4618      	mov	r0, r3
    2404:	4b17      	ldr	r3, [pc, #92]	; (2464 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    2406:	4798      	blx	r3
		}
		if (eeprom.Init())
    2408:	4818      	ldr	r0, [pc, #96]	; (246c <_ZN21MemoryManagment_Class4InitEm+0xa0>)
    240a:	4b19      	ldr	r3, [pc, #100]	; (2470 <_ZN21MemoryManagment_Class4InitEm+0xa4>)
    240c:	4798      	blx	r3
    240e:	4603      	mov	r3, r0
    2410:	2b00      	cmp	r3, #0
    2412:	d009      	beq.n	2428 <_ZN21MemoryManagment_Class4InitEm+0x5c>
		{
			usb<<"EEPROM Memory SelfTest PASSED"<<NEWLINE;
    2414:	4917      	ldr	r1, [pc, #92]	; (2474 <_ZN21MemoryManagment_Class4InitEm+0xa8>)
    2416:	4810      	ldr	r0, [pc, #64]	; (2458 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    2418:	4b17      	ldr	r3, [pc, #92]	; (2478 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    241a:	4798      	blx	r3
    241c:	4603      	mov	r3, r0
    241e:	4910      	ldr	r1, [pc, #64]	; (2460 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    2420:	4618      	mov	r0, r3
    2422:	4b10      	ldr	r3, [pc, #64]	; (2464 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    2424:	4798      	blx	r3
    2426:	e008      	b.n	243a <_ZN21MemoryManagment_Class4InitEm+0x6e>
		
		} 
		else
		{
			usb<<"EEPROM Memory SelfTest FAILED"<<NEWLINE;
    2428:	4914      	ldr	r1, [pc, #80]	; (247c <_ZN21MemoryManagment_Class4InitEm+0xb0>)
    242a:	480b      	ldr	r0, [pc, #44]	; (2458 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    242c:	4b12      	ldr	r3, [pc, #72]	; (2478 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    242e:	4798      	blx	r3
    2430:	4603      	mov	r3, r0
    2432:	490b      	ldr	r1, [pc, #44]	; (2460 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    2434:	4618      	mov	r0, r3
    2436:	4b0b      	ldr	r3, [pc, #44]	; (2464 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    2438:	4798      	blx	r3
		}
		
		SetChipID(flashChipSize);
    243a:	6839      	ldr	r1, [r7, #0]
    243c:	6878      	ldr	r0, [r7, #4]
    243e:	4b10      	ldr	r3, [pc, #64]	; (2480 <_ZN21MemoryManagment_Class4InitEm+0xb4>)
    2440:	4798      	blx	r3
}
    2442:	bf00      	nop
    2444:	4618      	mov	r0, r3
    2446:	3708      	adds	r7, #8
    2448:	46bd      	mov	sp, r7
    244a:	bd80      	pop	{r7, pc}
    244c:	2000a03c 	.word	0x2000a03c
    2450:	00016501 	.word	0x00016501
    2454:	0001ff64 	.word	0x0001ff64
    2458:	20001820 	.word	0x20001820
    245c:	00002681 	.word	0x00002681
    2460:	0001ff84 	.word	0x0001ff84
    2464:	00000afd 	.word	0x00000afd
    2468:	0001ff88 	.word	0x0001ff88
    246c:	20009ff4 	.word	0x20009ff4
    2470:	00015b5d 	.word	0x00015b5d
    2474:	0001ffa8 	.word	0x0001ffa8
    2478:	00000b1d 	.word	0x00000b1d
    247c:	0001ffc8 	.word	0x0001ffc8
    2480:	000024b1 	.word	0x000024b1

00002484 <_ZN21MemoryManagment_Class13_troubleshootEhb>:
 uint8_t	MemoryManagment_Class::GetErrorCode(){
	 
	 // PLease don forget to do the real impelementation
	 return	0;
 }
  void MemoryManagment_Class::_troubleshoot(uint8_t _code, bool printoverride) {
    2484:	b580      	push	{r7, lr}
    2486:	b082      	sub	sp, #8
    2488:	af00      	add	r7, sp, #0
    248a:	6078      	str	r0, [r7, #4]
    248c:	460b      	mov	r3, r1
    248e:	70fb      	strb	r3, [r7, #3]
    2490:	4613      	mov	r3, r2
    2492:	70bb      	strb	r3, [r7, #2]
	  diagnostics.troubleshoot(_code, printoverride);
    2494:	78ba      	ldrb	r2, [r7, #2]
    2496:	78fb      	ldrb	r3, [r7, #3]
    2498:	4619      	mov	r1, r3
    249a:	4803      	ldr	r0, [pc, #12]	; (24a8 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x24>)
    249c:	4b03      	ldr	r3, [pc, #12]	; (24ac <_ZN21MemoryManagment_Class13_troubleshootEhb+0x28>)
    249e:	4798      	blx	r3
  }
    24a0:	bf00      	nop
    24a2:	3708      	adds	r7, #8
    24a4:	46bd      	mov	sp, r7
    24a6:	bd80      	pop	{r7, pc}
    24a8:	2000948c 	.word	0x2000948c
    24ac:	000146dd 	.word	0x000146dd

000024b0 <_ZN21MemoryManagment_Class9SetChipIDEm>:

 bool MemoryManagment_Class::SetChipID(uint32_t flashChipSize) {
    24b0:	b580      	push	{r7, lr}
    24b2:	b082      	sub	sp, #8
    24b4:	af00      	add	r7, sp, #0
    24b6:	6078      	str	r0, [r7, #4]
    24b8:	6039      	str	r1, [r7, #0]
	 //set some default values

	 logArea.capacity =GetMemoryCapacity();
    24ba:	687b      	ldr	r3, [r7, #4]
    24bc:	4618      	mov	r0, r3
    24be:	4b12      	ldr	r3, [pc, #72]	; (2508 <_ZN21MemoryManagment_Class9SetChipIDEm+0x58>)
    24c0:	4798      	blx	r3
    24c2:	4602      	mov	r2, r0
    24c4:	687b      	ldr	r3, [r7, #4]
    24c6:	f8c3 2978 	str.w	r2, [r3, #2424]	; 0x978


	 if (!logArea.capacity) {
    24ca:	687b      	ldr	r3, [r7, #4]
    24cc:	f8d3 3978 	ldr.w	r3, [r3, #2424]	; 0x978
    24d0:	2b00      	cmp	r3, #0
    24d2:	d113      	bne.n	24fc <_ZN21MemoryManagment_Class9SetChipIDEm+0x4c>
		 #ifdef RUNDIAGNOSTIC
		 usb.println(F("Chip capacity cannot be identified"));
		 #endif
		 if (flashChipSize) {
    24d4:	683b      	ldr	r3, [r7, #0]
    24d6:	2b00      	cmp	r3, #0
    24d8:	d009      	beq.n	24ee <_ZN21MemoryManagment_Class9SetChipIDEm+0x3e>
			 // If a custom chip size is defined
			 #ifdef RUNDIAGNOSTIC
			 usb.println(F("Custom Chipsize defined"));
			 #endif
			 logArea.capacity = flashChipSize;
    24da:	687b      	ldr	r3, [r7, #4]
    24dc:	683a      	ldr	r2, [r7, #0]
    24de:	f8c3 2978 	str.w	r2, [r3, #2424]	; 0x978
			 logArea.supported = false;
    24e2:	687b      	ldr	r3, [r7, #4]
    24e4:	2200      	movs	r2, #0
    24e6:	f883 2970 	strb.w	r2, [r3, #2416]	; 0x970
			 return true;
    24ea:	2301      	movs	r3, #1
    24ec:	e007      	b.n	24fe <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

		 else {
			 _troubleshoot(UNKNOWNCAP);
    24ee:	2200      	movs	r2, #0
    24f0:	2103      	movs	r1, #3
    24f2:	6878      	ldr	r0, [r7, #4]
    24f4:	4b05      	ldr	r3, [pc, #20]	; (250c <_ZN21MemoryManagment_Class9SetChipIDEm+0x5c>)
    24f6:	4798      	blx	r3
			 return false;
    24f8:	2300      	movs	r3, #0
    24fa:	e000      	b.n	24fe <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

	 }
	 return true;
    24fc:	2301      	movs	r3, #1
 }
    24fe:	4618      	mov	r0, r3
    2500:	3708      	adds	r7, #8
    2502:	46bd      	mov	sp, r7
    2504:	bd80      	pop	{r7, pc}
    2506:	bf00      	nop
    2508:	00016681 	.word	0x00016681
    250c:	00002485 	.word	0x00002485

00002510 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState>:
	handlerAppState=PTR_HVAC_STATE(&as);
	uint32_t	add=(uint32_t )(&flashMap->hvacStateSector.hvacDefaultState);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
	return	r;
}
 uint32_t	MemoryManagment_Class::WriteValidApplicationState(HVACState& hs ){
    2510:	b580      	push	{r7, lr}
    2512:	b084      	sub	sp, #16
    2514:	af00      	add	r7, sp, #0
    2516:	6078      	str	r0, [r7, #4]
    2518:	6039      	str	r1, [r7, #0]
	uint32_t w=  WriteCurrentState(hs);
    251a:	687b      	ldr	r3, [r7, #4]
    251c:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
    2520:	6839      	ldr	r1, [r7, #0]
    2522:	4618      	mov	r0, r3
    2524:	4b11      	ldr	r3, [pc, #68]	; (256c <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x5c>)
    2526:	4798      	blx	r3
    2528:	60f8      	str	r0, [r7, #12]
	crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    252a:	687b      	ldr	r3, [r7, #4]
    252c:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    2530:	2270      	movs	r2, #112	; 0x70
    2532:	6839      	ldr	r1, [r7, #0]
    2534:	4618      	mov	r0, r3
    2536:	4b0e      	ldr	r3, [pc, #56]	; (2570 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x60>)
    2538:	4798      	blx	r3
    253a:	4602      	mov	r2, r0
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2542:	333c      	adds	r3, #60	; 0x3c
    2544:	601a      	str	r2, [r3, #0]
	w=WriteCRCAppState(crc32);
    2546:	687b      	ldr	r3, [r7, #4]
    2548:	f503 62d2 	add.w	r2, r3, #1680	; 0x690
    254c:	687b      	ldr	r3, [r7, #4]
    254e:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2552:	333c      	adds	r3, #60	; 0x3c
    2554:	681b      	ldr	r3, [r3, #0]
    2556:	4619      	mov	r1, r3
    2558:	4610      	mov	r0, r2
    255a:	4b06      	ldr	r3, [pc, #24]	; (2574 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x64>)
    255c:	4798      	blx	r3
    255e:	60f8      	str	r0, [r7, #12]
	return	w;
    2560:	68fb      	ldr	r3, [r7, #12]
 }
    2562:	4618      	mov	r0, r3
    2564:	3710      	adds	r7, #16
    2566:	46bd      	mov	sp, r7
    2568:	bd80      	pop	{r7, pc}
    256a:	bf00      	nop
    256c:	000029d1 	.word	0x000029d1
    2570:	000013ad 	.word	0x000013ad
    2574:	00002a41 	.word	0x00002a41

00002578 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState>:
 uint32_t	MemoryManagment_Class::WriteValidConfigurationData(ConfigurationData& cd){
	 uint32_t	w=WriteCurrentConfigurationData(cd);
	 crc32=CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(ConfigurationData));
	 w=WriteCRCConfigurationData(crc32);
 };
 uint32_t	MemoryManagment_Class::SaveCurrentState(HVACState& hs){
    2578:	b590      	push	{r4, r7, lr}
    257a:	b087      	sub	sp, #28
    257c:	af00      	add	r7, sp, #0
    257e:	6078      	str	r0, [r7, #4]
    2580:	6039      	str	r1, [r7, #0]
	 uint32_t	add=(uint32_t)&flashMap->hvacStateSector;
    2582:	4b18      	ldr	r3, [pc, #96]	; (25e4 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x6c>)
    2584:	681b      	ldr	r3, [r3, #0]
    2586:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    258a:	332c      	adds	r3, #44	; 0x2c
    258c:	617b      	str	r3, [r7, #20]
	 HVACStateSector	*hss=(HVACStateSector*)&flashBuffer[0];
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2594:	3340      	adds	r3, #64	; 0x40
    2596:	681b      	ldr	r3, [r3, #0]
    2598:	613b      	str	r3, [r7, #16]
	 uint32_t r=qspiFlash.ReadAddress((uint8_t*)hss,add,QSPI_ERBLK);
    259a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    259e:	697a      	ldr	r2, [r7, #20]
    25a0:	6939      	ldr	r1, [r7, #16]
    25a2:	4811      	ldr	r0, [pc, #68]	; (25e8 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    25a4:	4c11      	ldr	r4, [pc, #68]	; (25ec <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x74>)
    25a6:	47a0      	blx	r4
    25a8:	60f8      	str	r0, [r7, #12]
	 if (r==0)
    25aa:	68fb      	ldr	r3, [r7, #12]
    25ac:	2b00      	cmp	r3, #0
    25ae:	d114      	bne.n	25da <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x62>
	 {
		 memcpy((void*)&(hss->hvacState),(void*)&hs,sizeof(HVACState));
    25b0:	693b      	ldr	r3, [r7, #16]
    25b2:	3378      	adds	r3, #120	; 0x78
    25b4:	2270      	movs	r2, #112	; 0x70
    25b6:	6839      	ldr	r1, [r7, #0]
    25b8:	4618      	mov	r0, r3
    25ba:	4b0d      	ldr	r3, [pc, #52]	; (25f0 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x78>)
    25bc:	4798      	blx	r3
		 qspiFlash.Erase(add);
    25be:	6979      	ldr	r1, [r7, #20]
    25c0:	4809      	ldr	r0, [pc, #36]	; (25e8 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    25c2:	4b0c      	ldr	r3, [pc, #48]	; (25f4 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x7c>)
    25c4:	4798      	blx	r3
		 uint32_t w=qspiFlash.WriteAddress((uint8_t*)hss,add,QSPI_ERBLK);
    25c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    25ca:	697a      	ldr	r2, [r7, #20]
    25cc:	6939      	ldr	r1, [r7, #16]
    25ce:	4806      	ldr	r0, [pc, #24]	; (25e8 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    25d0:	4c09      	ldr	r4, [pc, #36]	; (25f8 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x80>)
    25d2:	47a0      	blx	r4
    25d4:	60b8      	str	r0, [r7, #8]
		  return	w;
    25d6:	68bb      	ldr	r3, [r7, #8]
    25d8:	e000      	b.n	25dc <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x64>
	 }

	 return	r;
    25da:	68fb      	ldr	r3, [r7, #12]
 }
    25dc:	4618      	mov	r0, r3
    25de:	371c      	adds	r7, #28
    25e0:	46bd      	mov	sp, r7
    25e2:	bd90      	pop	{r4, r7, pc}
    25e4:	200082c4 	.word	0x200082c4
    25e8:	2000a03c 	.word	0x2000a03c
    25ec:	000165d1 	.word	0x000165d1
    25f0:	0001bc05 	.word	0x0001bc05
    25f4:	0001656d 	.word	0x0001656d
    25f8:	0001659d 	.word	0x0001659d

000025fc <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState>:
uint32_t	MemoryManagment_Class::SaveApplicationState(HVACState& hs ){
    25fc:	b580      	push	{r7, lr}
    25fe:	b084      	sub	sp, #16
    2600:	af00      	add	r7, sp, #0
    2602:	6078      	str	r0, [r7, #4]
    2604:	6039      	str	r1, [r7, #0]
	  uint32_t w=  SaveCurrentState(hs);
    2606:	6839      	ldr	r1, [r7, #0]
    2608:	6878      	ldr	r0, [r7, #4]
    260a:	4b10      	ldr	r3, [pc, #64]	; (264c <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x50>)
    260c:	4798      	blx	r3
    260e:	60f8      	str	r0, [r7, #12]
	  crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    2610:	687b      	ldr	r3, [r7, #4]
    2612:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    2616:	2270      	movs	r2, #112	; 0x70
    2618:	6839      	ldr	r1, [r7, #0]
    261a:	4618      	mov	r0, r3
    261c:	4b0c      	ldr	r3, [pc, #48]	; (2650 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x54>)
    261e:	4798      	blx	r3
    2620:	4602      	mov	r2, r0
    2622:	687b      	ldr	r3, [r7, #4]
    2624:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2628:	333c      	adds	r3, #60	; 0x3c
    262a:	601a      	str	r2, [r3, #0]
	  w=SaveCRCAppState(crc32);
    262c:	687b      	ldr	r3, [r7, #4]
    262e:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2632:	333c      	adds	r3, #60	; 0x3c
    2634:	681b      	ldr	r3, [r3, #0]
    2636:	4619      	mov	r1, r3
    2638:	6878      	ldr	r0, [r7, #4]
    263a:	4b06      	ldr	r3, [pc, #24]	; (2654 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x58>)
    263c:	4798      	blx	r3
    263e:	60f8      	str	r0, [r7, #12]
	  return	w;
    2640:	68fb      	ldr	r3, [r7, #12]
  }
    2642:	4618      	mov	r0, r3
    2644:	3710      	adds	r7, #16
    2646:	46bd      	mov	sp, r7
    2648:	bd80      	pop	{r7, pc}
    264a:	bf00      	nop
    264c:	00002579 	.word	0x00002579
    2650:	000013ad 	.word	0x000013ad
    2654:	00002659 	.word	0x00002659

00002658 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm>:
uint32_t	MemoryManagment_Class::SaveCRCAppState(uint32_t crc){
    2658:	b580      	push	{r7, lr}
    265a:	b082      	sub	sp, #8
    265c:	af00      	add	r7, sp, #0
    265e:	6078      	str	r0, [r7, #4]
    2660:	6039      	str	r1, [r7, #0]
// 	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
// 	uint32_t	bufferAddres=((uint32_t)&flashBuffer)+add;
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
    2662:	687b      	ldr	r3, [r7, #4]
    2664:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
    2668:	6839      	ldr	r1, [r7, #0]
    266a:	4618      	mov	r0, r3
    266c:	4b03      	ldr	r3, [pc, #12]	; (267c <_ZN21MemoryManagment_Class15SaveCRCAppStateEm+0x24>)
    266e:	4798      	blx	r3
    2670:	4603      	mov	r3, r0
}
    2672:	4618      	mov	r0, r3
    2674:	3708      	adds	r7, #8
    2676:	46bd      	mov	sp, r7
    2678:	bd80      	pop	{r7, pc}
    267a:	bf00      	nop
    267c:	00002a41 	.word	0x00002a41

00002680 <_ZlsIA29_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2680:	b580      	push	{r7, lr}
    2682:	b082      	sub	sp, #8
    2684:	af00      	add	r7, sp, #0
    2686:	6078      	str	r0, [r7, #4]
    2688:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    268a:	6839      	ldr	r1, [r7, #0]
    268c:	6878      	ldr	r0, [r7, #4]
    268e:	4b03      	ldr	r3, [pc, #12]	; (269c <_ZlsIA29_cER5PrintS2_RKT_+0x1c>)
    2690:	4798      	blx	r3
    2692:	687b      	ldr	r3, [r7, #4]
    2694:	4618      	mov	r0, r3
    2696:	3708      	adds	r7, #8
    2698:	46bd      	mov	sp, r7
    269a:	bd80      	pop	{r7, pc}
    269c:	00017dfd 	.word	0x00017dfd

000026a0 <_Z41__static_initialization_and_destruction_0ii>:
 
    26a0:	b580      	push	{r7, lr}
    26a2:	b082      	sub	sp, #8
    26a4:	af00      	add	r7, sp, #0
    26a6:	6078      	str	r0, [r7, #4]
    26a8:	6039      	str	r1, [r7, #0]
    26aa:	687b      	ldr	r3, [r7, #4]
    26ac:	2b01      	cmp	r3, #1
    26ae:	d114      	bne.n	26da <_Z41__static_initialization_and_destruction_0ii+0x3a>
    26b0:	683b      	ldr	r3, [r7, #0]
    26b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    26b6:	4293      	cmp	r3, r2
    26b8:	d10f      	bne.n	26da <_Z41__static_initialization_and_destruction_0ii+0x3a>
    26ba:	480a      	ldr	r0, [pc, #40]	; (26e4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    26bc:	4b0a      	ldr	r3, [pc, #40]	; (26e8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    26be:	4798      	blx	r3
    26c0:	4a0a      	ldr	r2, [pc, #40]	; (26ec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    26c2:	490b      	ldr	r1, [pc, #44]	; (26f0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    26c4:	4807      	ldr	r0, [pc, #28]	; (26e4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    26c6:	4b0b      	ldr	r3, [pc, #44]	; (26f4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    26c8:	4798      	blx	r3
    26ca:	480b      	ldr	r0, [pc, #44]	; (26f8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    26cc:	4b0b      	ldr	r3, [pc, #44]	; (26fc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    26ce:	4798      	blx	r3
    26d0:	4a06      	ldr	r2, [pc, #24]	; (26ec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    26d2:	490b      	ldr	r1, [pc, #44]	; (2700 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    26d4:	4808      	ldr	r0, [pc, #32]	; (26f8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    26d6:	4b07      	ldr	r3, [pc, #28]	; (26f4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    26d8:	4798      	blx	r3
    26da:	bf00      	nop
    26dc:	3708      	adds	r7, #8
    26de:	46bd      	mov	sp, r7
    26e0:	bd80      	pop	{r7, pc}
    26e2:	bf00      	nop
    26e4:	20001820 	.word	0x20001820
    26e8:	000178dd 	.word	0x000178dd
    26ec:	20000000 	.word	0x20000000
    26f0:	00017925 	.word	0x00017925
    26f4:	0001949d 	.word	0x0001949d
    26f8:	20002880 	.word	0x20002880
    26fc:	000022ed 	.word	0x000022ed
    2700:	0000237d 	.word	0x0000237d

00002704 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev>:
    2704:	b580      	push	{r7, lr}
    2706:	af00      	add	r7, sp, #0
    2708:	f64f 71ff 	movw	r1, #65535	; 0xffff
    270c:	2001      	movs	r0, #1
    270e:	4b01      	ldr	r3, [pc, #4]	; (2714 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x10>)
    2710:	4798      	blx	r3
    2712:	bd80      	pop	{r7, pc}
    2714:	000026a1 	.word	0x000026a1

00002718 <_ZN18FlashHandler_ClassC1Ev>:


MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
    2718:	b480      	push	{r7}
    271a:	b083      	sub	sp, #12
    271c:	af00      	add	r7, sp, #0
    271e:	6078      	str	r0, [r7, #4]
{
} //MemoryStruct_Class
    2720:	687b      	ldr	r3, [r7, #4]
    2722:	4618      	mov	r0, r3
    2724:	370c      	adds	r7, #12
    2726:	46bd      	mov	sp, r7
    2728:	bc80      	pop	{r7}
    272a:	4770      	bx	lr

0000272c <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
    272c:	b480      	push	{r7}
    272e:	b083      	sub	sp, #12
    2730:	af00      	add	r7, sp, #0
    2732:	6078      	str	r0, [r7, #4]
{
} //~MemoryStruct_Class
    2734:	687b      	ldr	r3, [r7, #4]
    2736:	4618      	mov	r0, r3
    2738:	370c      	adds	r7, #12
    273a:	46bd      	mov	sp, r7
    273c:	bc80      	pop	{r7}
    273e:	4770      	bx	lr

00002740 <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData>:

uint32_t	FlashHandler_Class::ReadDefaultConfigurationData(ConfigurationData& cd){
    2740:	b580      	push	{r7, lr}
    2742:	b084      	sub	sp, #16
    2744:	af00      	add	r7, sp, #0
    2746:	6078      	str	r0, [r7, #4]
    2748:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
    274a:	4b08      	ldr	r3, [pc, #32]	; (276c <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x2c>)
    274c:	681b      	ldr	r3, [r3, #0]
    274e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    2752:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    2754:	68fa      	ldr	r2, [r7, #12]
    2756:	6839      	ldr	r1, [r7, #0]
    2758:	6878      	ldr	r0, [r7, #4]
    275a:	4b05      	ldr	r3, [pc, #20]	; (2770 <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x30>)
    275c:	4798      	blx	r3
    275e:	60b8      	str	r0, [r7, #8]
	return	r;
    2760:	68bb      	ldr	r3, [r7, #8]
}
    2762:	4618      	mov	r0, r3
    2764:	3710      	adds	r7, #16
    2766:	46bd      	mov	sp, r7
    2768:	bd80      	pop	{r7, pc}
    276a:	bf00      	nop
    276c:	200082c4 	.word	0x200082c4
    2770:	000027dd 	.word	0x000027dd

00002774 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData>:
uint32_t	FlashHandler_Class::ReadDefaultParameters(UserParameters& up){
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
	uint32_t	r=ReadParameters(up,add);
	return	r;
}
uint32_t	FlashHandler_Class::ReadLastConfigurationData(ConfigurationData& cd){
    2774:	b580      	push	{r7, lr}
    2776:	b084      	sub	sp, #16
    2778:	af00      	add	r7, sp, #0
    277a:	6078      	str	r0, [r7, #4]
    277c:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.lastConfiguracion;
    277e:	4b08      	ldr	r3, [pc, #32]	; (27a0 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData+0x2c>)
    2780:	681b      	ldr	r3, [r3, #0]
    2782:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
    2786:	332c      	adds	r3, #44	; 0x2c
    2788:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    278a:	68fa      	ldr	r2, [r7, #12]
    278c:	6839      	ldr	r1, [r7, #0]
    278e:	6878      	ldr	r0, [r7, #4]
    2790:	4b04      	ldr	r3, [pc, #16]	; (27a4 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData+0x30>)
    2792:	4798      	blx	r3
    2794:	60b8      	str	r0, [r7, #8]
	return	r;
    2796:	68bb      	ldr	r3, [r7, #8]
}
    2798:	4618      	mov	r0, r3
    279a:	3710      	adds	r7, #16
    279c:	46bd      	mov	sp, r7
    279e:	bd80      	pop	{r7, pc}
    27a0:	200082c4 	.word	0x200082c4
    27a4:	000027dd 	.word	0x000027dd

000027a8 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData>:
uint32_t	FlashHandler_Class::ReadUpdatedConfigurationData(ConfigurationData& cd){
    27a8:	b580      	push	{r7, lr}
    27aa:	b084      	sub	sp, #16
    27ac:	af00      	add	r7, sp, #0
    27ae:	6078      	str	r0, [r7, #4]
    27b0:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.updatedConfiguration;
    27b2:	4b08      	ldr	r3, [pc, #32]	; (27d4 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x2c>)
    27b4:	681b      	ldr	r3, [r3, #0]
    27b6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
    27ba:	3304      	adds	r3, #4
    27bc:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    27be:	68fa      	ldr	r2, [r7, #12]
    27c0:	6839      	ldr	r1, [r7, #0]
    27c2:	6878      	ldr	r0, [r7, #4]
    27c4:	4b04      	ldr	r3, [pc, #16]	; (27d8 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x30>)
    27c6:	4798      	blx	r3
    27c8:	60b8      	str	r0, [r7, #8]
	return	r;
    27ca:	68bb      	ldr	r3, [r7, #8]
}
    27cc:	4618      	mov	r0, r3
    27ce:	3710      	adds	r7, #16
    27d0:	46bd      	mov	sp, r7
    27d2:	bd80      	pop	{r7, pc}
    27d4:	200082c4 	.word	0x200082c4
    27d8:	000027dd 	.word	0x000027dd

000027dc <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam>:

uint32_t	FlashHandler_Class::ReadConfigurationData(ConfigurationData& cd,uint32_t add){
    27dc:	b590      	push	{r4, r7, lr}
    27de:	b087      	sub	sp, #28
    27e0:	af00      	add	r7, sp, #0
    27e2:	60f8      	str	r0, [r7, #12]
    27e4:	60b9      	str	r1, [r7, #8]
    27e6:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    27e8:	68ba      	ldr	r2, [r7, #8]
    27ea:	68fb      	ldr	r3, [r7, #12]
    27ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    27f0:	68fb      	ldr	r3, [r7, #12]
    27f2:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    27f6:	23ac      	movs	r3, #172	; 0xac
    27f8:	687a      	ldr	r2, [r7, #4]
    27fa:	4804      	ldr	r0, [pc, #16]	; (280c <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam+0x30>)
    27fc:	4c04      	ldr	r4, [pc, #16]	; (2810 <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam+0x34>)
    27fe:	47a0      	blx	r4
    2800:	6178      	str	r0, [r7, #20]
	return	r;
    2802:	697b      	ldr	r3, [r7, #20]
}
    2804:	4618      	mov	r0, r3
    2806:	371c      	adds	r7, #28
    2808:	46bd      	mov	sp, r7
    280a:	bd90      	pop	{r4, r7, pc}
    280c:	2000a03c 	.word	0x2000a03c
    2810:	000165d1 	.word	0x000165d1

00002814 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
	return	r;
}
uint32_t	FlashHandler_Class::ReadCRCConfigurationData(void){
    2814:	b590      	push	{r4, r7, lr}
    2816:	b087      	sub	sp, #28
    2818:	af00      	add	r7, sp, #0
    281a:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.crcConfigData;
    281c:	4b09      	ldr	r3, [pc, #36]	; (2844 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x30>)
    281e:	681b      	ldr	r3, [r3, #0]
    2820:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
    2824:	3330      	adds	r3, #48	; 0x30
    2826:	617b      	str	r3, [r7, #20]
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    2828:	f107 010c 	add.w	r1, r7, #12
    282c:	2304      	movs	r3, #4
    282e:	697a      	ldr	r2, [r7, #20]
    2830:	4805      	ldr	r0, [pc, #20]	; (2848 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x34>)
    2832:	4c06      	ldr	r4, [pc, #24]	; (284c <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x38>)
    2834:	47a0      	blx	r4
    2836:	6138      	str	r0, [r7, #16]
	return	crc;
    2838:	68fb      	ldr	r3, [r7, #12]
}
    283a:	4618      	mov	r0, r3
    283c:	371c      	adds	r7, #28
    283e:	46bd      	mov	sp, r7
    2840:	bd90      	pop	{r4, r7, pc}
    2842:	bf00      	nop
    2844:	200082c4 	.word	0x200082c4
    2848:	2000a03c 	.word	0x2000a03c
    284c:	000165d1 	.word	0x000165d1

00002850 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
    2850:	b590      	push	{r4, r7, lr}
    2852:	b087      	sub	sp, #28
    2854:	af00      	add	r7, sp, #0
    2856:	60f8      	str	r0, [r7, #12]
    2858:	60b9      	str	r1, [r7, #8]
    285a:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    285c:	68ba      	ldr	r2, [r7, #8]
    285e:	68fb      	ldr	r3, [r7, #12]
    2860:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    2864:	68fb      	ldr	r3, [r7, #12]
    2866:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    286a:	23ac      	movs	r3, #172	; 0xac
    286c:	687a      	ldr	r2, [r7, #4]
    286e:	4804      	ldr	r0, [pc, #16]	; (2880 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam+0x30>)
    2870:	4c04      	ldr	r4, [pc, #16]	; (2884 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam+0x34>)
    2872:	47a0      	blx	r4
    2874:	6178      	str	r0, [r7, #20]
	return	w;
    2876:	697b      	ldr	r3, [r7, #20]
}
    2878:	4618      	mov	r0, r3
    287a:	371c      	adds	r7, #28
    287c:	46bd      	mov	sp, r7
    287e:	bd90      	pop	{r4, r7, pc}
    2880:	2000a03c 	.word	0x2000a03c
    2884:	0001659d 	.word	0x0001659d

00002888 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    2888:	b590      	push	{r4, r7, lr}
    288a:	b087      	sub	sp, #28
    288c:	af00      	add	r7, sp, #0
    288e:	60f8      	str	r0, [r7, #12]
    2890:	60b9      	str	r1, [r7, #8]
    2892:	607a      	str	r2, [r7, #4]

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    2894:	2301      	movs	r3, #1
    2896:	687a      	ldr	r2, [r7, #4]
    2898:	68b9      	ldr	r1, [r7, #8]
    289a:	4804      	ldr	r0, [pc, #16]	; (28ac <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x24>)
    289c:	4c04      	ldr	r4, [pc, #16]	; (28b0 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x28>)
    289e:	47a0      	blx	r4
    28a0:	6178      	str	r0, [r7, #20]
	return	w;
    28a2:	697b      	ldr	r3, [r7, #20]
}
    28a4:	4618      	mov	r0, r3
    28a6:	371c      	adds	r7, #28
    28a8:	46bd      	mov	sp, r7
    28aa:	bd90      	pop	{r4, r7, pc}
    28ac:	2000a03c 	.word	0x2000a03c
    28b0:	0001659d 	.word	0x0001659d

000028b4 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem>:
uint32_t	FlashHandler_Class::WriteApplicationState(HVACState& hs,uint32_t add){
    28b4:	b590      	push	{r4, r7, lr}
    28b6:	b087      	sub	sp, #28
    28b8:	af00      	add	r7, sp, #0
    28ba:	60f8      	str	r0, [r7, #12]
    28bc:	60b9      	str	r1, [r7, #8]
    28be:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    28c0:	68ba      	ldr	r2, [r7, #8]
    28c2:	68fb      	ldr	r3, [r7, #12]
    28c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
    28c8:	68fb      	ldr	r3, [r7, #12]
    28ca:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    28ce:	2370      	movs	r3, #112	; 0x70
    28d0:	687a      	ldr	r2, [r7, #4]
    28d2:	4804      	ldr	r0, [pc, #16]	; (28e4 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem+0x30>)
    28d4:	4c04      	ldr	r4, [pc, #16]	; (28e8 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem+0x34>)
    28d6:	47a0      	blx	r4
    28d8:	6178      	str	r0, [r7, #20]
	return	w;
    28da:	697b      	ldr	r3, [r7, #20]
}
    28dc:	4618      	mov	r0, r3
    28de:	371c      	adds	r7, #28
    28e0:	46bd      	mov	sp, r7
    28e2:	bd90      	pop	{r4, r7, pc}
    28e4:	2000a03c 	.word	0x2000a03c
    28e8:	0001659d 	.word	0x0001659d

000028ec <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv>:
uint32_t	FlashHandler_Class::WriteDefaultConfiguration(void){
    28ec:	b580      	push	{r7, lr}
    28ee:	b0b0      	sub	sp, #192	; 0xc0
    28f0:	af00      	add	r7, sp, #0
    28f2:	6078      	str	r0, [r7, #4]
	ConfigurationData cd=factoryDefaultsConfiguration;
    28f4:	4a0e      	ldr	r2, [pc, #56]	; (2930 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x44>)
    28f6:	f107 030c 	add.w	r3, r7, #12
    28fa:	4611      	mov	r1, r2
    28fc:	22ac      	movs	r2, #172	; 0xac
    28fe:	4618      	mov	r0, r3
    2900:	4b0c      	ldr	r3, [pc, #48]	; (2934 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x48>)
    2902:	4798      	blx	r3
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
    2904:	4b0c      	ldr	r3, [pc, #48]	; (2938 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x4c>)
    2906:	681b      	ldr	r3, [r3, #0]
    2908:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    290c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t	w=WriteConfigurationData(cd,add);
    2910:	f107 030c 	add.w	r3, r7, #12
    2914:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    2918:	4619      	mov	r1, r3
    291a:	6878      	ldr	r0, [r7, #4]
    291c:	4b07      	ldr	r3, [pc, #28]	; (293c <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x50>)
    291e:	4798      	blx	r3
    2920:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	return	w;
    2924:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
}
    2928:	4618      	mov	r0, r3
    292a:	37c0      	adds	r7, #192	; 0xc0
    292c:	46bd      	mov	sp, r7
    292e:	bd80      	pop	{r7, pc}
    2930:	0001fa10 	.word	0x0001fa10
    2934:	0001bc05 	.word	0x0001bc05
    2938:	200082c4 	.word	0x200082c4
    293c:	00002851 	.word	0x00002851

00002940 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    2940:	b580      	push	{r7, lr}
    2942:	b086      	sub	sp, #24
    2944:	af00      	add	r7, sp, #0
    2946:	6078      	str	r0, [r7, #4]
	UserParameters up=defaultParameters;
    2948:	4b0a      	ldr	r3, [pc, #40]	; (2974 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x34>)
    294a:	781b      	ldrb	r3, [r3, #0]
    294c:	733b      	strb	r3, [r7, #12]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    294e:	4b0a      	ldr	r3, [pc, #40]	; (2978 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x38>)
    2950:	681b      	ldr	r3, [r3, #0]
    2952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2956:	3301      	adds	r3, #1
    2958:	617b      	str	r3, [r7, #20]
	uint32_t	w=WriteParameters(up,add);
    295a:	f107 030c 	add.w	r3, r7, #12
    295e:	697a      	ldr	r2, [r7, #20]
    2960:	4619      	mov	r1, r3
    2962:	6878      	ldr	r0, [r7, #4]
    2964:	4b05      	ldr	r3, [pc, #20]	; (297c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x3c>)
    2966:	4798      	blx	r3
    2968:	6138      	str	r0, [r7, #16]
	return	w;
    296a:	693b      	ldr	r3, [r7, #16]
}
    296c:	4618      	mov	r0, r3
    296e:	3718      	adds	r7, #24
    2970:	46bd      	mov	sp, r7
    2972:	bd80      	pop	{r7, pc}
    2974:	0002177c 	.word	0x0002177c
    2978:	200082c4 	.word	0x200082c4
    297c:	00002889 	.word	0x00002889

00002980 <_ZN18FlashHandler_Class17WriteDefaultStateEv>:
uint32_t	FlashHandler_Class::WriteDefaultState(void){
    2980:	b580      	push	{r7, lr}
    2982:	b0a0      	sub	sp, #128	; 0x80
    2984:	af00      	add	r7, sp, #0
    2986:	6078      	str	r0, [r7, #4]
	HVACState hs=defaultHVACState;
    2988:	4a0d      	ldr	r2, [pc, #52]	; (29c0 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x40>)
    298a:	f107 0308 	add.w	r3, r7, #8
    298e:	4611      	mov	r1, r2
    2990:	2270      	movs	r2, #112	; 0x70
    2992:	4618      	mov	r0, r3
    2994:	4b0b      	ldr	r3, [pc, #44]	; (29c4 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x44>)
    2996:	4798      	blx	r3
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.hvacDefaultState;
    2998:	4b0b      	ldr	r3, [pc, #44]	; (29c8 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x48>)
    299a:	681b      	ldr	r3, [r3, #0]
    299c:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    29a0:	3334      	adds	r3, #52	; 0x34
    29a2:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t	w=WriteApplicationState(hs,add);
    29a4:	f107 0308 	add.w	r3, r7, #8
    29a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    29aa:	4619      	mov	r1, r3
    29ac:	6878      	ldr	r0, [r7, #4]
    29ae:	4b07      	ldr	r3, [pc, #28]	; (29cc <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x4c>)
    29b0:	4798      	blx	r3
    29b2:	67b8      	str	r0, [r7, #120]	; 0x78
	return	w;
    29b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
    29b6:	4618      	mov	r0, r3
    29b8:	3780      	adds	r7, #128	; 0x80
    29ba:	46bd      	mov	sp, r7
    29bc:	bd80      	pop	{r7, pc}
    29be:	bf00      	nop
    29c0:	0001fda0 	.word	0x0001fda0
    29c4:	0001bc05 	.word	0x0001bc05
    29c8:	200082c4 	.word	0x200082c4
    29cc:	000028b5 	.word	0x000028b5

000029d0 <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState>:

uint32_t	FlashHandler_Class::WriteCurrentState(HVACState& hs){
    29d0:	b580      	push	{r7, lr}
    29d2:	b084      	sub	sp, #16
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
    29d8:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.hvacState;
    29da:	4b08      	ldr	r3, [pc, #32]	; (29fc <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState+0x2c>)
    29dc:	681b      	ldr	r3, [r3, #0]
    29de:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
    29e2:	3324      	adds	r3, #36	; 0x24
    29e4:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hs,add);
    29e6:	68fa      	ldr	r2, [r7, #12]
    29e8:	6839      	ldr	r1, [r7, #0]
    29ea:	6878      	ldr	r0, [r7, #4]
    29ec:	4b04      	ldr	r3, [pc, #16]	; (2a00 <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState+0x30>)
    29ee:	4798      	blx	r3
    29f0:	60b8      	str	r0, [r7, #8]
	return	w;
    29f2:	68bb      	ldr	r3, [r7, #8]
}
    29f4:	4618      	mov	r0, r3
    29f6:	3710      	adds	r7, #16
    29f8:	46bd      	mov	sp, r7
    29fa:	bd80      	pop	{r7, pc}
    29fc:	200082c4 	.word	0x200082c4
    2a00:	000028b5 	.word	0x000028b5

00002a04 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm>:

uint32_t	FlashHandler_Class::WriteCRCConfigurationData(uint32_t crc){
    2a04:	b590      	push	{r4, r7, lr}
    2a06:	b085      	sub	sp, #20
    2a08:	af00      	add	r7, sp, #0
    2a0a:	6078      	str	r0, [r7, #4]
    2a0c:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.crcConfigData;
    2a0e:	4b09      	ldr	r3, [pc, #36]	; (2a34 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x30>)
    2a10:	681b      	ldr	r3, [r3, #0]
    2a12:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
    2a16:	3330      	adds	r3, #48	; 0x30
    2a18:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    2a1a:	4639      	mov	r1, r7
    2a1c:	2304      	movs	r3, #4
    2a1e:	68fa      	ldr	r2, [r7, #12]
    2a20:	4805      	ldr	r0, [pc, #20]	; (2a38 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x34>)
    2a22:	4c06      	ldr	r4, [pc, #24]	; (2a3c <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x38>)
    2a24:	47a0      	blx	r4
    2a26:	60b8      	str	r0, [r7, #8]
	return	w;
    2a28:	68bb      	ldr	r3, [r7, #8]
}
    2a2a:	4618      	mov	r0, r3
    2a2c:	3714      	adds	r7, #20
    2a2e:	46bd      	mov	sp, r7
    2a30:	bd90      	pop	{r4, r7, pc}
    2a32:	bf00      	nop
    2a34:	200082c4 	.word	0x200082c4
    2a38:	2000a03c 	.word	0x2000a03c
    2a3c:	0001659d 	.word	0x0001659d

00002a40 <_ZN18FlashHandler_Class16WriteCRCAppStateEm>:
uint32_t	FlashHandler_Class::WriteCRCAppState(uint32_t crc){
    2a40:	b590      	push	{r4, r7, lr}
    2a42:	b085      	sub	sp, #20
    2a44:	af00      	add	r7, sp, #0
    2a46:	6078      	str	r0, [r7, #4]
    2a48:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
    2a4a:	4b09      	ldr	r3, [pc, #36]	; (2a70 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x30>)
    2a4c:	681b      	ldr	r3, [r3, #0]
    2a4e:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
    2a52:	3314      	adds	r3, #20
    2a54:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    2a56:	4639      	mov	r1, r7
    2a58:	2304      	movs	r3, #4
    2a5a:	68fa      	ldr	r2, [r7, #12]
    2a5c:	4805      	ldr	r0, [pc, #20]	; (2a74 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x34>)
    2a5e:	4c06      	ldr	r4, [pc, #24]	; (2a78 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x38>)
    2a60:	47a0      	blx	r4
    2a62:	60b8      	str	r0, [r7, #8]
	return	w;
    2a64:	68bb      	ldr	r3, [r7, #8]
}
    2a66:	4618      	mov	r0, r3
    2a68:	3714      	adds	r7, #20
    2a6a:	46bd      	mov	sp, r7
    2a6c:	bd90      	pop	{r4, r7, pc}
    2a6e:	bf00      	nop
    2a70:	200082c4 	.word	0x200082c4
    2a74:	2000a03c 	.word	0x2000a03c
    2a78:	0001659d 	.word	0x0001659d

00002a7c <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState>:
uint32_t	FlashHandler_Class::WriteLastConfigurationData(ConfigurationData& cd){
	uint32_t	add=(uint32_t)&flashMap->configurationSector.lastConfiguracion;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::ReadApplicationState(HVACState& as){
    2a7c:	b590      	push	{r4, r7, lr}
    2a7e:	b085      	sub	sp, #20
    2a80:	af00      	add	r7, sp, #0
    2a82:	6078      	str	r0, [r7, #4]
    2a84:	6039      	str	r1, [r7, #0]
	flashAddress=(uint32_t)&flashMap->hvacStateSector.hvacState;
    2a86:	4b0e      	ldr	r3, [pc, #56]	; (2ac0 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x44>)
    2a88:	681b      	ldr	r3, [r3, #0]
    2a8a:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
    2a8e:	3324      	adds	r3, #36	; 0x24
    2a90:	461a      	mov	r2, r3
    2a92:	687b      	ldr	r3, [r7, #4]
    2a94:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	handlerAppState=PTR_HVAC_STATE(&as);
    2a98:	683a      	ldr	r2, [r7, #0]
    2a9a:	687b      	ldr	r3, [r7, #4]
    2a9c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,flashAddress,sizeof(HVACState));
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    2aa6:	687b      	ldr	r3, [r7, #4]
    2aa8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    2aac:	2370      	movs	r3, #112	; 0x70
    2aae:	4805      	ldr	r0, [pc, #20]	; (2ac4 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x48>)
    2ab0:	4c05      	ldr	r4, [pc, #20]	; (2ac8 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x4c>)
    2ab2:	47a0      	blx	r4
    2ab4:	60f8      	str	r0, [r7, #12]
	return	r;
    2ab6:	68fb      	ldr	r3, [r7, #12]
}
    2ab8:	4618      	mov	r0, r3
    2aba:	3714      	adds	r7, #20
    2abc:	46bd      	mov	sp, r7
    2abe:	bd90      	pop	{r4, r7, pc}
    2ac0:	200082c4 	.word	0x200082c4
    2ac4:	2000a03c 	.word	0x2000a03c
    2ac8:	000165d1 	.word	0x000165d1

00002acc <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv>:
uint32_t	FlashHandler_Class::ReadCRCApplicationState(void){
    2acc:	b590      	push	{r4, r7, lr}
    2ace:	b085      	sub	sp, #20
    2ad0:	af00      	add	r7, sp, #0
    2ad2:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	flashAddress=(uint32_t)&flashMap->hvacStateSector.crcAppState;
    2ad4:	4b0b      	ldr	r3, [pc, #44]	; (2b04 <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x38>)
    2ad6:	681b      	ldr	r3, [r3, #0]
    2ad8:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
    2adc:	3314      	adds	r3, #20
    2ade:	461a      	mov	r2, r3
    2ae0:	687b      	ldr	r3, [r7, #4]
    2ae2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),flashAddress,sizeof(uint32_t));
    2ae6:	687b      	ldr	r3, [r7, #4]
    2ae8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    2aec:	f107 0108 	add.w	r1, r7, #8
    2af0:	2304      	movs	r3, #4
    2af2:	4805      	ldr	r0, [pc, #20]	; (2b08 <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x3c>)
    2af4:	4c05      	ldr	r4, [pc, #20]	; (2b0c <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x40>)
    2af6:	47a0      	blx	r4
    2af8:	60f8      	str	r0, [r7, #12]
	return	crc;
    2afa:	68bb      	ldr	r3, [r7, #8]
    2afc:	4618      	mov	r0, r3
    2afe:	3714      	adds	r7, #20
    2b00:	46bd      	mov	sp, r7
    2b02:	bd90      	pop	{r4, r7, pc}
    2b04:	200082c4 	.word	0x200082c4
    2b08:	2000a03c 	.word	0x2000a03c
    2b0c:	000165d1 	.word	0x000165d1

00002b10 <_ZN10PBIT_ClassC1Ev>:

#include "PBIT_Class.h"
#include "Interfaces_Class.h"

// default constructor
PBIT_Class::PBIT_Class()
    2b10:	b480      	push	{r7}
    2b12:	b083      	sub	sp, #12
    2b14:	af00      	add	r7, sp, #0
    2b16:	6078      	str	r0, [r7, #4]
{
	isOK=true;
    2b18:	687b      	ldr	r3, [r7, #4]
    2b1a:	2201      	movs	r2, #1
    2b1c:	701a      	strb	r2, [r3, #0]
} //PBIT_Class
    2b1e:	687b      	ldr	r3, [r7, #4]
    2b20:	4618      	mov	r0, r3
    2b22:	370c      	adds	r7, #12
    2b24:	46bd      	mov	sp, r7
    2b26:	bc80      	pop	{r7}
    2b28:	4770      	bx	lr

00002b2a <_ZN10PBIT_ClassD1Ev>:

// default destructor
PBIT_Class::~PBIT_Class()
    2b2a:	b480      	push	{r7}
    2b2c:	b083      	sub	sp, #12
    2b2e:	af00      	add	r7, sp, #0
    2b30:	6078      	str	r0, [r7, #4]
{
} //~PBIT_Class
    2b32:	687b      	ldr	r3, [r7, #4]
    2b34:	4618      	mov	r0, r3
    2b36:	370c      	adds	r7, #12
    2b38:	46bd      	mov	sp, r7
    2b3a:	bc80      	pop	{r7}
    2b3c:	4770      	bx	lr

00002b3e <_ZN10PBIT_ClasscvbEv>:
		isOK=true;
	}
	return isOK;
}

PBIT_Class::operator bool(){
    2b3e:	b480      	push	{r7}
    2b40:	b083      	sub	sp, #12
    2b42:	af00      	add	r7, sp, #0
    2b44:	6078      	str	r0, [r7, #4]
	return	isOK;
    2b46:	687b      	ldr	r3, [r7, #4]
    2b48:	781b      	ldrb	r3, [r3, #0]
    2b4a:	b2db      	uxtb	r3, r3
}
    2b4c:	4618      	mov	r0, r3
    2b4e:	370c      	adds	r7, #12
    2b50:	46bd      	mov	sp, r7
    2b52:	bc80      	pop	{r7}
    2b54:	4770      	bx	lr
	...

00002b58 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus>:

uint32_t  PBIT_Class::CheckCurrentStatus(HVACStatus& cs){
    2b58:	b580      	push	{r7, lr}
    2b5a:	b086      	sub	sp, #24
    2b5c:	af00      	add	r7, sp, #0
    2b5e:	6078      	str	r0, [r7, #4]
    2b60:	6039      	str	r1, [r7, #0]
	interfaces.GetStatus(cs);
    2b62:	6839      	ldr	r1, [r7, #0]
    2b64:	4812      	ldr	r0, [pc, #72]	; (2bb0 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x58>)
    2b66:	4b13      	ldr	r3, [pc, #76]	; (2bb4 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x5c>)
    2b68:	4798      	blx	r3
	uint32_t	*s=(uint32_t*)&cs.statusBits;
    2b6a:	683b      	ldr	r3, [r7, #0]
    2b6c:	613b      	str	r3, [r7, #16]
	uint32_t	v=*s;
    2b6e:	693b      	ldr	r3, [r7, #16]
    2b70:	681b      	ldr	r3, [r3, #0]
    2b72:	60fb      	str	r3, [r7, #12]

	for (int i=0;i<32;i++)
    2b74:	2300      	movs	r3, #0
    2b76:	617b      	str	r3, [r7, #20]
    2b78:	697b      	ldr	r3, [r7, #20]
    2b7a:	2b1f      	cmp	r3, #31
    2b7c:	dc0d      	bgt.n	2b9a <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x42>
	{
		v+=(0x01<<i)&(v);
    2b7e:	2201      	movs	r2, #1
    2b80:	697b      	ldr	r3, [r7, #20]
    2b82:	fa02 f303 	lsl.w	r3, r2, r3
    2b86:	461a      	mov	r2, r3
    2b88:	68fb      	ldr	r3, [r7, #12]
    2b8a:	401a      	ands	r2, r3
    2b8c:	68fb      	ldr	r3, [r7, #12]
    2b8e:	4413      	add	r3, r2
    2b90:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<32;i++)
    2b92:	697b      	ldr	r3, [r7, #20]
    2b94:	3301      	adds	r3, #1
    2b96:	617b      	str	r3, [r7, #20]
    2b98:	e7ee      	b.n	2b78 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x20>
		
	}
	if (v==0)
    2b9a:	68fb      	ldr	r3, [r7, #12]
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d102      	bne.n	2ba6 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x4e>
	{
		isOK=true;
    2ba0:	687b      	ldr	r3, [r7, #4]
    2ba2:	2201      	movs	r2, #1
    2ba4:	701a      	strb	r2, [r3, #0]
	}
	return	v;
    2ba6:	68fb      	ldr	r3, [r7, #12]
}
    2ba8:	4618      	mov	r0, r3
    2baa:	3718      	adds	r7, #24
    2bac:	46bd      	mov	sp, r7
    2bae:	bd80      	pop	{r7, pc}
    2bb0:	20001714 	.word	0x20001714
    2bb4:	00001ea9 	.word	0x00001ea9

00002bb8 <_Z41__static_initialization_and_destruction_0ii>:
    2bb8:	b580      	push	{r7, lr}
    2bba:	b082      	sub	sp, #8
    2bbc:	af00      	add	r7, sp, #0
    2bbe:	6078      	str	r0, [r7, #4]
    2bc0:	6039      	str	r1, [r7, #0]
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	2b01      	cmp	r3, #1
    2bc6:	d10c      	bne.n	2be2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2bc8:	683b      	ldr	r3, [r7, #0]
    2bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2bce:	4293      	cmp	r3, r2
    2bd0:	d107      	bne.n	2be2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2bd2:	4806      	ldr	r0, [pc, #24]	; (2bec <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2bd4:	4b06      	ldr	r3, [pc, #24]	; (2bf0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2bd6:	4798      	blx	r3
    2bd8:	4a06      	ldr	r2, [pc, #24]	; (2bf4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2bda:	4907      	ldr	r1, [pc, #28]	; (2bf8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2bdc:	4803      	ldr	r0, [pc, #12]	; (2bec <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2bde:	4b07      	ldr	r3, [pc, #28]	; (2bfc <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2be0:	4798      	blx	r3
    2be2:	bf00      	nop
    2be4:	3708      	adds	r7, #8
    2be6:	46bd      	mov	sp, r7
    2be8:	bd80      	pop	{r7, pc}
    2bea:	bf00      	nop
    2bec:	200082c8 	.word	0x200082c8
    2bf0:	00002b11 	.word	0x00002b11
    2bf4:	20000000 	.word	0x20000000
    2bf8:	00002b2b 	.word	0x00002b2b
    2bfc:	0001949d 	.word	0x0001949d

00002c00 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:
    2c00:	b580      	push	{r7, lr}
    2c02:	af00      	add	r7, sp, #0
    2c04:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2c08:	2001      	movs	r0, #1
    2c0a:	4b01      	ldr	r3, [pc, #4]	; (2c10 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x10>)
    2c0c:	4798      	blx	r3
    2c0e:	bd80      	pop	{r7, pc}
    2c10:	00002bb9 	.word	0x00002bb9

00002c14 <_ZN19PersistenceServicesC1Ev>:
tick_t PersistenceServices::lastUpdate[kNumberOfUsageTimeCounters + kNumberOfCycleDescriptions];	




PersistenceServices::PersistenceServices(void)
    2c14:	b580      	push	{r7, lr}
    2c16:	b082      	sub	sp, #8
    2c18:	af00      	add	r7, sp, #0
    2c1a:	6078      	str	r0, [r7, #4]
	:lastValidSaveWorkingStateForGAINIndex(0)
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	4618      	mov	r0, r3
    2c20:	4b05      	ldr	r3, [pc, #20]	; (2c38 <_ZN19PersistenceServicesC1Ev+0x24>)
    2c22:	4798      	blx	r3
    2c24:	687b      	ldr	r3, [r7, #4]
    2c26:	2200      	movs	r2, #0
    2c28:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	{
	}
    2c2c:	687b      	ldr	r3, [r7, #4]
    2c2e:	4618      	mov	r0, r3
    2c30:	3708      	adds	r7, #8
    2c32:	46bd      	mov	sp, r7
    2c34:	bd80      	pop	{r7, pc}
    2c36:	bf00      	nop
    2c38:	00001329 	.word	0x00001329

00002c3c <_ZN19PersistenceServices26writeConfigurationDataAreaER17ConfigurationData>:
	
	return result;
	}

bool PersistenceServices::writeConfigurationDataArea(ConfigurationData& data)
	{
    2c3c:	b480      	push	{r7}
    2c3e:	b085      	sub	sp, #20
    2c40:	af00      	add	r7, sp, #0
    2c42:	6078      	str	r0, [r7, #4]
    2c44:	6039      	str	r1, [r7, #0]
	bool	result(true);
    2c46:	2301      	movs	r3, #1
    2c48:	73fb      	strb	r3, [r7, #15]

	data.commons.version = kConfigurationDataVersion;
    2c4a:	683b      	ldr	r3, [r7, #0]
    2c4c:	2204      	movs	r2, #4
    2c4e:	605a      	str	r2, [r3, #4]
	data.commons.size = kConfigurationDataSize;
    2c50:	683b      	ldr	r3, [r7, #0]
    2c52:	22ac      	movs	r2, #172	; 0xac
    2c54:	601a      	str	r2, [r3, #0]
	data.commons.partNumber = PARTNUMBER;
    2c56:	683b      	ldr	r3, [r7, #0]
    2c58:	f240 720c 	movw	r2, #1804	; 0x70c
    2c5c:	609a      	str	r2, [r3, #8]



	

	return result;
    2c5e:	7bfb      	ldrb	r3, [r7, #15]
	}
    2c60:	4618      	mov	r0, r3
    2c62:	3714      	adds	r7, #20
    2c64:	46bd      	mov	sp, r7
    2c66:	bc80      	pop	{r7}
    2c68:	4770      	bx	lr
	...

00002c6c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv>:
	value += increment;

	}
	
bool PersistenceServices::IsConfigurationDataUpdated()
{
    2c6c:	b580      	push	{r7, lr}
    2c6e:	b086      	sub	sp, #24
    2c70:	af00      	add	r7, sp, #0
    2c72:	6078      	str	r0, [r7, #4]
	uint32_t	ver=factoryDefaultsConfiguration.commons.version;
    2c74:	4b17      	ldr	r3, [pc, #92]	; (2cd4 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x68>)
    2c76:	685b      	ldr	r3, [r3, #4]
    2c78:	617b      	str	r3, [r7, #20]
	uint32_t	verUp=memory.ReadUpdatedConfigurationData(configuration);
    2c7a:	687b      	ldr	r3, [r7, #4]
    2c7c:	33e4      	adds	r3, #228	; 0xe4
    2c7e:	4619      	mov	r1, r3
    2c80:	4815      	ldr	r0, [pc, #84]	; (2cd8 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    2c82:	4b16      	ldr	r3, [pc, #88]	; (2cdc <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x70>)
    2c84:	4798      	blx	r3
    2c86:	6138      	str	r0, [r7, #16]

	if ((verUp>0))
    2c88:	693b      	ldr	r3, [r7, #16]
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	d001      	beq.n	2c92 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x26>
	{
		return false;
    2c8e:	2300      	movs	r3, #0
    2c90:	e01c      	b.n	2ccc <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
	} 
	else
	{
		uint32_t	refCRC=memory.ReadCRCConfigurationData();
    2c92:	4811      	ldr	r0, [pc, #68]	; (2cd8 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    2c94:	4b12      	ldr	r3, [pc, #72]	; (2ce0 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x74>)
    2c96:	4798      	blx	r3
    2c98:	60f8      	str	r0, [r7, #12]
		uint32_t	crc=CalculateCRC((uint32_t *)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
    2c9a:	6878      	ldr	r0, [r7, #4]
    2c9c:	687b      	ldr	r3, [r7, #4]
    2c9e:	33e4      	adds	r3, #228	; 0xe4
    2ca0:	22ac      	movs	r2, #172	; 0xac
    2ca2:	4619      	mov	r1, r3
    2ca4:	4b0f      	ldr	r3, [pc, #60]	; (2ce4 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x78>)
    2ca6:	4798      	blx	r3
    2ca8:	60b8      	str	r0, [r7, #8]
		if (refCRC==crc)
    2caa:	68fa      	ldr	r2, [r7, #12]
    2cac:	68bb      	ldr	r3, [r7, #8]
    2cae:	429a      	cmp	r2, r3
    2cb0:	d10b      	bne.n	2cca <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x5e>
		{
			verUp=configuration.commons.version;
    2cb2:	687b      	ldr	r3, [r7, #4]
    2cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    2cb8:	613b      	str	r3, [r7, #16]
			return (verUp>ver);
    2cba:	693a      	ldr	r2, [r7, #16]
    2cbc:	697b      	ldr	r3, [r7, #20]
    2cbe:	429a      	cmp	r2, r3
    2cc0:	bf8c      	ite	hi
    2cc2:	2301      	movhi	r3, #1
    2cc4:	2300      	movls	r3, #0
    2cc6:	b2db      	uxtb	r3, r3
    2cc8:	e000      	b.n	2ccc <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
		} 
		else
		{
			return	false;
    2cca:	2300      	movs	r3, #0
		}
		
	}
	return	false;

}
    2ccc:	4618      	mov	r0, r3
    2cce:	3718      	adds	r7, #24
    2cd0:	46bd      	mov	sp, r7
    2cd2:	bd80      	pop	{r7, pc}
    2cd4:	0001fa10 	.word	0x0001fa10
    2cd8:	20002f10 	.word	0x20002f10
    2cdc:	000027a9 	.word	0x000027a9
    2ce0:	00002815 	.word	0x00002815
    2ce4:	000013ad 	.word	0x000013ad

00002ce8 <_ZN19PersistenceServices16IsStateDataValidER9HVACState>:
	

	return result;
	}
bool PersistenceServices::IsStateDataValid(HVACState& as)
{
    2ce8:	b580      	push	{r7, lr}
    2cea:	b084      	sub	sp, #16
    2cec:	af00      	add	r7, sp, #0
    2cee:	6078      	str	r0, [r7, #4]
    2cf0:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadCRCApplicationState();
    2cf2:	480b      	ldr	r0, [pc, #44]	; (2d20 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x38>)
    2cf4:	4b0b      	ldr	r3, [pc, #44]	; (2d24 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x3c>)
    2cf6:	4798      	blx	r3
    2cf8:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(lastState));
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	2270      	movs	r2, #112	; 0x70
    2cfe:	6839      	ldr	r1, [r7, #0]
    2d00:	4618      	mov	r0, r3
    2d02:	4b09      	ldr	r3, [pc, #36]	; (2d28 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x40>)
    2d04:	4798      	blx	r3
    2d06:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    2d08:	68fa      	ldr	r2, [r7, #12]
    2d0a:	68bb      	ldr	r3, [r7, #8]
    2d0c:	429a      	cmp	r2, r3
    2d0e:	bf0c      	ite	eq
    2d10:	2301      	moveq	r3, #1
    2d12:	2300      	movne	r3, #0
    2d14:	b2db      	uxtb	r3, r3
}
    2d16:	4618      	mov	r0, r3
    2d18:	3710      	adds	r7, #16
    2d1a:	46bd      	mov	sp, r7
    2d1c:	bd80      	pop	{r7, pc}
    2d1e:	bf00      	nop
    2d20:	20002f10 	.word	0x20002f10
    2d24:	00002acd 	.word	0x00002acd
    2d28:	000013ad 	.word	0x000013ad

00002d2c <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState>:
bool PersistenceServices::IsFastStateDataValid(HVACState& as)
{
    2d2c:	b580      	push	{r7, lr}
    2d2e:	b084      	sub	sp, #16
    2d30:	af00      	add	r7, sp, #0
    2d32:	6078      	str	r0, [r7, #4]
    2d34:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadFastCRCApplicationState();
    2d36:	480b      	ldr	r0, [pc, #44]	; (2d64 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x38>)
    2d38:	4b0b      	ldr	r3, [pc, #44]	; (2d68 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x3c>)
    2d3a:	4798      	blx	r3
    2d3c:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(HVACState));
    2d3e:	687b      	ldr	r3, [r7, #4]
    2d40:	2270      	movs	r2, #112	; 0x70
    2d42:	6839      	ldr	r1, [r7, #0]
    2d44:	4618      	mov	r0, r3
    2d46:	4b09      	ldr	r3, [pc, #36]	; (2d6c <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x40>)
    2d48:	4798      	blx	r3
    2d4a:	60b8      	str	r0, [r7, #8]
	
	return (refCRC==crc);
    2d4c:	68fa      	ldr	r2, [r7, #12]
    2d4e:	68bb      	ldr	r3, [r7, #8]
    2d50:	429a      	cmp	r2, r3
    2d52:	bf0c      	ite	eq
    2d54:	2301      	moveq	r3, #1
    2d56:	2300      	movne	r3, #0
    2d58:	b2db      	uxtb	r3, r3
}
    2d5a:	4618      	mov	r0, r3
    2d5c:	3710      	adds	r7, #16
    2d5e:	46bd      	mov	sp, r7
    2d60:	bd80      	pop	{r7, pc}
    2d62:	bf00      	nop
    2d64:	20002f00 	.word	0x20002f00
    2d68:	00001695 	.word	0x00001695
    2d6c:	000013ad 	.word	0x000013ad

00002d70 <_ZL24HVACOperationTimeElapsedPK10timer_task>:
#include "CBIT_Class.h"
#include "FlapperValve_Class.h"
#include "TemperatureSensors_Class.h"

States_Class*	ptrStatesClass;
static void  HVACOperationTimeElapsed(const struct timer_task *const timer_task){
    2d70:	b480      	push	{r7}
    2d72:	b083      	sub	sp, #12
    2d74:	af00      	add	r7, sp, #0
    2d76:	6078      	str	r0, [r7, #4]
	ptrStatesClass->timeElapsed=true;
    2d78:	4b04      	ldr	r3, [pc, #16]	; (2d8c <_ZL24HVACOperationTimeElapsedPK10timer_task+0x1c>)
    2d7a:	681b      	ldr	r3, [r3, #0]
    2d7c:	2201      	movs	r2, #1
    2d7e:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
}
    2d82:	bf00      	nop
    2d84:	370c      	adds	r7, #12
    2d86:	46bd      	mov	sp, r7
    2d88:	bc80      	pop	{r7}
    2d8a:	4770      	bx	lr
    2d8c:	2000835c 	.word	0x2000835c

00002d90 <_ZL14HVACTimerTicksPK10timer_task>:
static void HVACTimerTicks(const struct timer_task *const timer_task)
{
    2d90:	b480      	push	{r7}
    2d92:	b083      	sub	sp, #12
    2d94:	af00      	add	r7, sp, #0
    2d96:	6078      	str	r0, [r7, #4]
	hvacTimer.ticks++;
    2d98:	4b04      	ldr	r3, [pc, #16]	; (2dac <_ZL14HVACTimerTicksPK10timer_task+0x1c>)
    2d9a:	689b      	ldr	r3, [r3, #8]
    2d9c:	3301      	adds	r3, #1
    2d9e:	4a03      	ldr	r2, [pc, #12]	; (2dac <_ZL14HVACTimerTicksPK10timer_task+0x1c>)
    2da0:	6093      	str	r3, [r2, #8]
}
    2da2:	bf00      	nop
    2da4:	370c      	adds	r7, #12
    2da6:	46bd      	mov	sp, r7
    2da8:	bc80      	pop	{r7}
    2daa:	4770      	bx	lr
    2dac:	2000a4a0 	.word	0x2000a4a0

00002db0 <_ZN12States_ClassC1Ev>:

static HVACState staticCurrentState;
	// default constructor
States_Class::States_Class(void)
    2db0:	b580      	push	{r7, lr}
    2db2:	b082      	sub	sp, #8
    2db4:	af00      	add	r7, sp, #0
    2db6:	6078      	str	r0, [r7, #4]
    2db8:	687b      	ldr	r3, [r7, #4]
    2dba:	4618      	mov	r0, r3
    2dbc:	4b12      	ldr	r3, [pc, #72]	; (2e08 <_ZN12States_ClassC1Ev+0x58>)
    2dbe:	4798      	blx	r3
    2dc0:	687b      	ldr	r3, [r7, #4]
    2dc2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
    2dc6:	4618      	mov	r0, r3
    2dc8:	4b10      	ldr	r3, [pc, #64]	; (2e0c <_ZN12States_ClassC1Ev+0x5c>)
    2dca:	4798      	blx	r3
    2dcc:	4a10      	ldr	r2, [pc, #64]	; (2e10 <_ZN12States_ClassC1Ev+0x60>)
    2dce:	687b      	ldr	r3, [r7, #4]
    2dd0:	601a      	str	r2, [r3, #0]
{
	ptrStatesClass=this;
    2dd2:	4a10      	ldr	r2, [pc, #64]	; (2e14 <_ZN12States_ClassC1Ev+0x64>)
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	6013      	str	r3, [r2, #0]
	listener.eventHandler = NULL;
    2dd8:	4b0f      	ldr	r3, [pc, #60]	; (2e18 <_ZN12States_ClassC1Ev+0x68>)
    2dda:	2200      	movs	r2, #0
    2ddc:	615a      	str	r2, [r3, #20]
	staticCurrentState=defaultState;
    2dde:	4a0f      	ldr	r2, [pc, #60]	; (2e1c <_ZN12States_ClassC1Ev+0x6c>)
    2de0:	687b      	ldr	r3, [r7, #4]
    2de2:	4610      	mov	r0, r2
    2de4:	3304      	adds	r3, #4
    2de6:	2270      	movs	r2, #112	; 0x70
    2de8:	4619      	mov	r1, r3
    2dea:	4b0d      	ldr	r3, [pc, #52]	; (2e20 <_ZN12States_ClassC1Ev+0x70>)
    2dec:	4798      	blx	r3
	isOK=false;
    2dee:	687b      	ldr	r3, [r7, #4]
    2df0:	2200      	movs	r2, #0
    2df2:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	hvacState=&staticCurrentState;
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	4a08      	ldr	r2, [pc, #32]	; (2e1c <_ZN12States_ClassC1Ev+0x6c>)
    2dfa:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
}
    2dfe:	687b      	ldr	r3, [r7, #4]
    2e00:	4618      	mov	r0, r3
    2e02:	3708      	adds	r7, #8
    2e04:	46bd      	mov	sp, r7
    2e06:	bd80      	pop	{r7, pc}
    2e08:	00000ed9 	.word	0x00000ed9
    2e0c:	00001b61 	.word	0x00001b61
    2e10:	000200fc 	.word	0x000200fc
    2e14:	2000835c 	.word	0x2000835c
    2e18:	20009ca4 	.word	0x20009ca4
    2e1c:	20008360 	.word	0x20008360
    2e20:	0001bc05 	.word	0x0001bc05

00002e24 <_ZN12States_ClassD1Ev>:

// default destructor
States_Class::~States_Class()
    2e24:	b580      	push	{r7, lr}
    2e26:	b082      	sub	sp, #8
    2e28:	af00      	add	r7, sp, #0
    2e2a:	6078      	str	r0, [r7, #4]
    2e2c:	4a08      	ldr	r2, [pc, #32]	; (2e50 <_ZN12States_ClassD1Ev+0x2c>)
    2e2e:	687b      	ldr	r3, [r7, #4]
    2e30:	601a      	str	r2, [r3, #0]
    2e32:	687b      	ldr	r3, [r7, #4]
    2e34:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
    2e38:	4618      	mov	r0, r3
    2e3a:	4b06      	ldr	r3, [pc, #24]	; (2e54 <_ZN12States_ClassD1Ev+0x30>)
    2e3c:	4798      	blx	r3
    2e3e:	687b      	ldr	r3, [r7, #4]
    2e40:	4618      	mov	r0, r3
    2e42:	4b05      	ldr	r3, [pc, #20]	; (2e58 <_ZN12States_ClassD1Ev+0x34>)
    2e44:	4798      	blx	r3
{
} //~States_Class
    2e46:	687b      	ldr	r3, [r7, #4]
    2e48:	4618      	mov	r0, r3
    2e4a:	3708      	adds	r7, #8
    2e4c:	46bd      	mov	sp, r7
    2e4e:	bd80      	pop	{r7, pc}
    2e50:	000200fc 	.word	0x000200fc
    2e54:	00001b75 	.word	0x00001b75
    2e58:	00000f3d 	.word	0x00000f3d

00002e5c <_ZN12States_Class4InitEv>:

bool States_Class::Init(void){
    2e5c:	b590      	push	{r4, r7, lr}
    2e5e:	b083      	sub	sp, #12
    2e60:	af00      	add	r7, sp, #0
    2e62:	6078      	str	r0, [r7, #4]
	if (hvacTimer.Init())
    2e64:	4814      	ldr	r0, [pc, #80]	; (2eb8 <_ZN12States_Class4InitEv+0x5c>)
    2e66:	4b15      	ldr	r3, [pc, #84]	; (2ebc <_ZN12States_Class4InitEv+0x60>)
    2e68:	4798      	blx	r3
    2e6a:	4603      	mov	r3, r0
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d004      	beq.n	2e7a <_ZN12States_Class4InitEv+0x1e>
	{
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACTimerTicks),1);
    2e70:	2201      	movs	r2, #1
    2e72:	4913      	ldr	r1, [pc, #76]	; (2ec0 <_ZN12States_Class4InitEv+0x64>)
    2e74:	4810      	ldr	r0, [pc, #64]	; (2eb8 <_ZN12States_Class4InitEv+0x5c>)
    2e76:	4b13      	ldr	r3, [pc, #76]	; (2ec4 <_ZN12States_Class4InitEv+0x68>)
    2e78:	4798      	blx	r3
	}
	isOK=temperatures.Init();
    2e7a:	4813      	ldr	r0, [pc, #76]	; (2ec8 <_ZN12States_Class4InitEv+0x6c>)
    2e7c:	4b13      	ldr	r3, [pc, #76]	; (2ecc <_ZN12States_Class4InitEv+0x70>)
    2e7e:	4798      	blx	r3
    2e80:	4603      	mov	r3, r0
    2e82:	461a      	mov	r2, r3
    2e84:	687b      	ldr	r3, [r7, #4]
    2e86:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	if (isOK)
    2e8a:	687b      	ldr	r3, [r7, #4]
    2e8c:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
    2e90:	b2db      	uxtb	r3, r3
    2e92:	2b00      	cmp	r3, #0
    2e94:	d002      	beq.n	2e9c <_ZN12States_Class4InitEv+0x40>
	{
		temperatures.StartOneConversion();
    2e96:	480c      	ldr	r0, [pc, #48]	; (2ec8 <_ZN12States_Class4InitEv+0x6c>)
    2e98:	4b0d      	ldr	r3, [pc, #52]	; (2ed0 <_ZN12States_Class4InitEv+0x74>)
    2e9a:	4798      	blx	r3
	}
	hvacState->hvacStatus.statusBits.flapValve1=fv1.Init();
    2e9c:	687b      	ldr	r3, [r7, #4]
    2e9e:	f8d3 439c 	ldr.w	r4, [r3, #924]	; 0x39c
    2ea2:	480c      	ldr	r0, [pc, #48]	; (2ed4 <_ZN12States_Class4InitEv+0x78>)
    2ea4:	4b0c      	ldr	r3, [pc, #48]	; (2ed8 <_ZN12States_Class4InitEv+0x7c>)
    2ea6:	4798      	blx	r3
    2ea8:	4603      	mov	r3, r0
    2eaa:	75e3      	strb	r3, [r4, #23]
	hvacState->hvacStatus.statusBits.flapValve1;
	//return isOK;
	return true;
    2eac:	2301      	movs	r3, #1
	
}
    2eae:	4618      	mov	r0, r3
    2eb0:	370c      	adds	r7, #12
    2eb2:	46bd      	mov	sp, r7
    2eb4:	bd90      	pop	{r4, r7, pc}
    2eb6:	bf00      	nop
    2eb8:	2000a4a0 	.word	0x2000a4a0
    2ebc:	000173f9 	.word	0x000173f9
    2ec0:	00002d91 	.word	0x00002d91
    2ec4:	000174bd 	.word	0x000174bd
    2ec8:	20009e54 	.word	0x20009e54
    2ecc:	00015625 	.word	0x00015625
    2ed0:	00015725 	.word	0x00015725
    2ed4:	200015b4 	.word	0x200015b4
    2ed8:	000019b1 	.word	0x000019b1

00002edc <_ZN12States_Class16ControllerResumeEh>:
void States_Class::ControllerResume(uint8_t	operationMode){
    2edc:	b590      	push	{r4, r7, lr}
    2ede:	b08f      	sub	sp, #60	; 0x3c
    2ee0:	af02      	add	r7, sp, #8
    2ee2:	6078      	str	r0, [r7, #4]
    2ee4:	460b      	mov	r3, r1
    2ee6:	70fb      	strb	r3, [r7, #3]
	event e;
    2ee8:	f107 031c 	add.w	r3, r7, #28
    2eec:	4618      	mov	r0, r3
    2eee:	4b4a      	ldr	r3, [pc, #296]	; (3018 <_ZN12States_Class16ControllerResumeEh+0x13c>)
    2ef0:	4798      	blx	r3
	bool done(false);
    2ef2:	2300      	movs	r3, #0
    2ef4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	
	
		if (operationMode==0)
    2ef8:	78fb      	ldrb	r3, [r7, #3]
    2efa:	2b00      	cmp	r3, #0
    2efc:	d115      	bne.n	2f2a <_ZN12States_Class16ControllerResumeEh+0x4e>
		{
			if (timeElapsed)
    2efe:	687b      	ldr	r3, [r7, #4]
    2f00:	f893 3399 	ldrb.w	r3, [r3, #921]	; 0x399
    2f04:	b2db      	uxtb	r3, r3
    2f06:	2b00      	cmp	r3, #0
    2f08:	d00f      	beq.n	2f2a <_ZN12States_Class16ControllerResumeEh+0x4e>
			{
				usb<<"Air Conditioning System Operating"<<NEWLINE;
    2f0a:	4944      	ldr	r1, [pc, #272]	; (301c <_ZN12States_Class16ControllerResumeEh+0x140>)
    2f0c:	4844      	ldr	r0, [pc, #272]	; (3020 <_ZN12States_Class16ControllerResumeEh+0x144>)
    2f0e:	4b45      	ldr	r3, [pc, #276]	; (3024 <_ZN12States_Class16ControllerResumeEh+0x148>)
    2f10:	4798      	blx	r3
    2f12:	4603      	mov	r3, r0
    2f14:	4944      	ldr	r1, [pc, #272]	; (3028 <_ZN12States_Class16ControllerResumeEh+0x14c>)
    2f16:	4618      	mov	r0, r3
    2f18:	4b44      	ldr	r3, [pc, #272]	; (302c <_ZN12States_Class16ControllerResumeEh+0x150>)
    2f1a:	4798      	blx	r3
				timeElapsed=false;
    2f1c:	687b      	ldr	r3, [r7, #4]
    2f1e:	2200      	movs	r2, #0
    2f20:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
				delay_ms(10);
    2f24:	200a      	movs	r0, #10
    2f26:	4b42      	ldr	r3, [pc, #264]	; (3030 <_ZN12States_Class16ControllerResumeEh+0x154>)
    2f28:	4798      	blx	r3
				//alu.PrepareNewTask(kALUCheckCommunication);
				
			}
		}
		if (hvacState->currentState==kHVACStateLeaving)
    2f2a:	687b      	ldr	r3, [r7, #4]
    2f2c:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    2f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2f32:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    2f36:	d10a      	bne.n	2f4e <_ZN12States_Class16ControllerResumeEh+0x72>
		{
			prepareStateChangeEvent(hvacState->lastState);
    2f38:	687b      	ldr	r3, [r7, #4]
    2f3a:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    2f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f40:	b29b      	uxth	r3, r3
    2f42:	2200      	movs	r2, #0
    2f44:	4619      	mov	r1, r3
    2f46:	6878      	ldr	r0, [r7, #4]
    2f48:	4b3a      	ldr	r3, [pc, #232]	; (3034 <_ZN12States_Class16ControllerResumeEh+0x158>)
    2f4a:	4798      	blx	r3
    2f4c:	e005      	b.n	2f5a <_ZN12States_Class16ControllerResumeEh+0x7e>
			
		} 
		else
		{
			prepareStateChangeEvent(kHVACStateInitialize);
    2f4e:	2200      	movs	r2, #0
    2f50:	f44f 7197 	mov.w	r1, #302	; 0x12e
    2f54:	6878      	ldr	r0, [r7, #4]
    2f56:	4b37      	ldr	r3, [pc, #220]	; (3034 <_ZN12States_Class16ControllerResumeEh+0x158>)
    2f58:	4798      	blx	r3
		}
		
		if (operationMode>0)
    2f5a:	78fb      	ldrb	r3, [r7, #3]
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	dd50      	ble.n	3002 <_ZN12States_Class16ControllerResumeEh+0x126>
		{
			
			event	e;
    2f60:	f107 030c 	add.w	r3, r7, #12
    2f64:	4618      	mov	r0, r3
    2f66:	4b2c      	ldr	r3, [pc, #176]	; (3018 <_ZN12States_Class16ControllerResumeEh+0x13c>)
    2f68:	4798      	blx	r3
			listener.eventHandler=&States_Class::CheckEvents;
    2f6a:	4b33      	ldr	r3, [pc, #204]	; (3038 <_ZN12States_Class16ControllerResumeEh+0x15c>)
    2f6c:	4a33      	ldr	r2, [pc, #204]	; (303c <_ZN12States_Class16ControllerResumeEh+0x160>)
    2f6e:	615a      	str	r2, [r3, #20]
			while ((cBit.IsOK())&&(!done))
    2f70:	4833      	ldr	r0, [pc, #204]	; (3040 <_ZN12States_Class16ControllerResumeEh+0x164>)
    2f72:	4b34      	ldr	r3, [pc, #208]	; (3044 <_ZN12States_Class16ControllerResumeEh+0x168>)
    2f74:	4798      	blx	r3
    2f76:	4603      	mov	r3, r0
    2f78:	2b00      	cmp	r3, #0
    2f7a:	d008      	beq.n	2f8e <_ZN12States_Class16ControllerResumeEh+0xb2>
    2f7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    2f80:	f083 0301 	eor.w	r3, r3, #1
    2f84:	b2db      	uxtb	r3, r3
    2f86:	2b00      	cmp	r3, #0
    2f88:	d001      	beq.n	2f8e <_ZN12States_Class16ControllerResumeEh+0xb2>
    2f8a:	2301      	movs	r3, #1
    2f8c:	e000      	b.n	2f90 <_ZN12States_Class16ControllerResumeEh+0xb4>
    2f8e:	2300      	movs	r3, #0
    2f90:	2b00      	cmp	r3, #0
    2f92:	d03d      	beq.n	3010 <_ZN12States_Class16ControllerResumeEh+0x134>
			{
				if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent,2))
    2f94:	f107 010c 	add.w	r1, r7, #12
    2f98:	2302      	movs	r3, #2
    2f9a:	9300      	str	r3, [sp, #0]
    2f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
    2fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
    2fa4:	4824      	ldr	r0, [pc, #144]	; (3038 <_ZN12States_Class16ControllerResumeEh+0x15c>)
    2fa6:	4c28      	ldr	r4, [pc, #160]	; (3048 <_ZN12States_Class16ControllerResumeEh+0x16c>)
    2fa8:	47a0      	blx	r4
    2faa:	4603      	mov	r3, r0
    2fac:	2b00      	cmp	r3, #0
    2fae:	d010      	beq.n	2fd2 <_ZN12States_Class16ControllerResumeEh+0xf6>
				{
					handleHVACEvent(e);
    2fb0:	f107 030c 	add.w	r3, r7, #12
    2fb4:	4619      	mov	r1, r3
    2fb6:	6878      	ldr	r0, [r7, #4]
    2fb8:	4b24      	ldr	r3, [pc, #144]	; (304c <_ZN12States_Class16ControllerResumeEh+0x170>)
    2fba:	4798      	blx	r3
					if (hvacState->currentState==kHVACStateLeaving)
    2fbc:	687b      	ldr	r3, [r7, #4]
    2fbe:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    2fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2fc4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    2fc8:	d1d2      	bne.n	2f70 <_ZN12States_Class16ControllerResumeEh+0x94>
					{
							done=true;
    2fca:	2301      	movs	r3, #1
    2fcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							break;
    2fd0:	e01e      	b.n	3010 <_ZN12States_Class16ControllerResumeEh+0x134>
					} 
						
				}
				else if (listener.WaitForEvent(e, kALUEventClass, kAnyEventType,1)){
    2fd2:	f107 010c 	add.w	r1, r7, #12
    2fd6:	2301      	movs	r3, #1
    2fd8:	9300      	str	r3, [sp, #0]
    2fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2fe2:	4815      	ldr	r0, [pc, #84]	; (3038 <_ZN12States_Class16ControllerResumeEh+0x15c>)
    2fe4:	4c1a      	ldr	r4, [pc, #104]	; (3050 <_ZN12States_Class16ControllerResumeEh+0x174>)
    2fe6:	47a0      	blx	r4
    2fe8:	4603      	mov	r3, r0
    2fea:	2b00      	cmp	r3, #0
    2fec:	d0c0      	beq.n	2f70 <_ZN12States_Class16ControllerResumeEh+0x94>
					alu.PrepareNewEvent(kALUEventCheckPheripherals);
    2fee:	2200      	movs	r2, #0
    2ff0:	f240 1105 	movw	r1, #261	; 0x105
    2ff4:	4817      	ldr	r0, [pc, #92]	; (3054 <_ZN12States_Class16ControllerResumeEh+0x178>)
    2ff6:	4b18      	ldr	r3, [pc, #96]	; (3058 <_ZN12States_Class16ControllerResumeEh+0x17c>)
    2ff8:	4798      	blx	r3
					done=true;
    2ffa:	2301      	movs	r3, #1
    2ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			while ((cBit.IsOK())&&(!done))
    3000:	e7b6      	b.n	2f70 <_ZN12States_Class16ControllerResumeEh+0x94>
				}
			}
			
		}else{
			alu.PrepareNewEvent(kALUEventSimpleStart);
    3002:	2200      	movs	r2, #0
    3004:	f44f 7182 	mov.w	r1, #260	; 0x104
    3008:	4812      	ldr	r0, [pc, #72]	; (3054 <_ZN12States_Class16ControllerResumeEh+0x178>)
    300a:	4b13      	ldr	r3, [pc, #76]	; (3058 <_ZN12States_Class16ControllerResumeEh+0x17c>)
    300c:	4798      	blx	r3
			return;
    300e:	bf00      	nop
		}
		
}
    3010:	3734      	adds	r7, #52	; 0x34
    3012:	46bd      	mov	sp, r7
    3014:	bd90      	pop	{r4, r7, pc}
    3016:	bf00      	nop
    3018:	000002ed 	.word	0x000002ed
    301c:	0001ffe8 	.word	0x0001ffe8
    3020:	200082dc 	.word	0x200082dc
    3024:	00003d0d 	.word	0x00003d0d
    3028:	0002000c 	.word	0x0002000c
    302c:	00000afd 	.word	0x00000afd
    3030:	00005fa1 	.word	0x00005fa1
    3034:	00003a25 	.word	0x00003a25
    3038:	20009ca4 	.word	0x20009ca4
    303c:	00003c5d 	.word	0x00003c5d
    3040:	20008350 	.word	0x20008350
    3044:	00000e63 	.word	0x00000e63
    3048:	00014ad5 	.word	0x00014ad5
    304c:	00003249 	.word	0x00003249
    3050:	00014b0d 	.word	0x00014b0d
    3054:	20000ce8 	.word	0x20000ce8
    3058:	000008e1 	.word	0x000008e1

0000305c <_ZN12States_Class5StartEh>:

void States_Class::Start(uint8_t	operationMode)
	{
    305c:	b590      	push	{r4, r7, lr}
    305e:	b08d      	sub	sp, #52	; 0x34
    3060:	af02      	add	r7, sp, #8
    3062:	6078      	str	r0, [r7, #4]
    3064:	460b      	mov	r3, r1
    3066:	70fb      	strb	r3, [r7, #3]
	hvacState->currentState = kHVACStateStart;
    3068:	687b      	ldr	r3, [r7, #4]
    306a:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    306e:	f44f 7296 	mov.w	r2, #300	; 0x12c
    3072:	62da      	str	r2, [r3, #44]	; 0x2c
	bool done(false);
    3074:	2300      	movs	r3, #0
    3076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (operationMode==0)
    307a:	78fb      	ldrb	r3, [r7, #3]
    307c:	2b00      	cmp	r3, #0
    307e:	d113      	bne.n	30a8 <_ZN12States_Class5StartEh+0x4c>
	{
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACOperationTimeElapsed),100);
    3080:	2264      	movs	r2, #100	; 0x64
    3082:	4953      	ldr	r1, [pc, #332]	; (31d0 <_ZN12States_Class5StartEh+0x174>)
    3084:	4853      	ldr	r0, [pc, #332]	; (31d4 <_ZN12States_Class5StartEh+0x178>)
    3086:	4b54      	ldr	r3, [pc, #336]	; (31d8 <_ZN12States_Class5StartEh+0x17c>)
    3088:	4798      	blx	r3
		usb<<"Air Conditioning System Started"<<NEWLINE;
    308a:	4954      	ldr	r1, [pc, #336]	; (31dc <_ZN12States_Class5StartEh+0x180>)
    308c:	4854      	ldr	r0, [pc, #336]	; (31e0 <_ZN12States_Class5StartEh+0x184>)
    308e:	4b55      	ldr	r3, [pc, #340]	; (31e4 <_ZN12States_Class5StartEh+0x188>)
    3090:	4798      	blx	r3
    3092:	4603      	mov	r3, r0
    3094:	4954      	ldr	r1, [pc, #336]	; (31e8 <_ZN12States_Class5StartEh+0x18c>)
    3096:	4618      	mov	r0, r3
    3098:	4b54      	ldr	r3, [pc, #336]	; (31ec <_ZN12States_Class5StartEh+0x190>)
    309a:	4798      	blx	r3
		alu.PrepareNewTask(kALUTaskCheckCommunication);
    309c:	2200      	movs	r2, #0
    309e:	2103      	movs	r1, #3
    30a0:	4853      	ldr	r0, [pc, #332]	; (31f0 <_ZN12States_Class5StartEh+0x194>)
    30a2:	4b54      	ldr	r3, [pc, #336]	; (31f4 <_ZN12States_Class5StartEh+0x198>)
    30a4:	4798      	blx	r3
	
		return;
    30a6:	e08f      	b.n	31c8 <_ZN12States_Class5StartEh+0x16c>
	}
		
		

    tick_t	timerValue = 0L;
    30a8:	2300      	movs	r3, #0
    30aa:	623b      	str	r3, [r7, #32]
    bool	isCurrentStateValid = false;
    30ac:	2300      	movs	r3, #0
    30ae:	77fb      	strb	r3, [r7, #31]
	memory.ReadFastApplicationState(lastHVACState);
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
    30b6:	4619      	mov	r1, r3
    30b8:	484f      	ldr	r0, [pc, #316]	; (31f8 <_ZN12States_Class5StartEh+0x19c>)
    30ba:	4b50      	ldr	r3, [pc, #320]	; (31fc <_ZN12States_Class5StartEh+0x1a0>)
    30bc:	4798      	blx	r3
	
	if (calendar.WasInterrupted())
    30be:	4850      	ldr	r0, [pc, #320]	; (3200 <_ZN12States_Class5StartEh+0x1a4>)
    30c0:	4b50      	ldr	r3, [pc, #320]	; (3204 <_ZN12States_Class5StartEh+0x1a8>)
    30c2:	4798      	blx	r3
    30c4:	4603      	mov	r3, r0
    30c6:	2b00      	cmp	r3, #0
    30c8:	d019      	beq.n	30fe <_ZN12States_Class5StartEh+0xa2>
	{
		powerInterruptDuration = calendar.GetPowerInterrupTime();
    30ca:	484d      	ldr	r0, [pc, #308]	; (3200 <_ZN12States_Class5StartEh+0x1a4>)
    30cc:	4b4e      	ldr	r3, [pc, #312]	; (3208 <_ZN12States_Class5StartEh+0x1ac>)
    30ce:	4798      	blx	r3
    30d0:	4602      	mov	r2, r0
    30d2:	687b      	ldr	r3, [r7, #4]
    30d4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		#ifdef OFFLINE
		resumeLastStateValid = ((powerInterruptDuration > 0) && (powerInterruptDuration < 5000L));
		#else
		resumeLastStateValid = ((powerInterruptDuration >= 0) && (powerInterruptDuration < 5000L));
    30d8:	687b      	ldr	r3, [r7, #4]
    30da:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    30de:	2b00      	cmp	r3, #0
    30e0:	db08      	blt.n	30f4 <_ZN12States_Class5StartEh+0x98>
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    30e8:	f241 3287 	movw	r2, #4999	; 0x1387
    30ec:	4293      	cmp	r3, r2
    30ee:	dc01      	bgt.n	30f4 <_ZN12States_Class5StartEh+0x98>
    30f0:	2201      	movs	r2, #1
    30f2:	e000      	b.n	30f6 <_ZN12States_Class5StartEh+0x9a>
    30f4:	2200      	movs	r2, #0
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    30fc:	e002      	b.n	3104 <_ZN12States_Class5StartEh+0xa8>

		usb << "powerInterruptDuration was " << powerInterruptDuration << (resumeLastStateValid?" 200msec":" power resume") << newline;
		
		#endif
	}else{
		memory.LogResetEvent();
    30fe:	4843      	ldr	r0, [pc, #268]	; (320c <_ZN12States_Class5StartEh+0x1b0>)
    3100:	4b43      	ldr	r3, [pc, #268]	; (3210 <_ZN12States_Class5StartEh+0x1b4>)
    3102:	4798      	blx	r3
	//	SetDefaultState();
	//}



	readResult=memory.ReadLastConfigurationData(configuration);
    3104:	687b      	ldr	r3, [r7, #4]
    3106:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    310a:	4619      	mov	r1, r3
    310c:	4841      	ldr	r0, [pc, #260]	; (3214 <_ZN12States_Class5StartEh+0x1b8>)
    310e:	4b42      	ldr	r3, [pc, #264]	; (3218 <_ZN12States_Class5StartEh+0x1bc>)
    3110:	4798      	blx	r3
    3112:	4602      	mov	r2, r0
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
	if (readResult>0)
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
    3120:	2b00      	cmp	r3, #0
    3122:	d005      	beq.n	3130 <_ZN12States_Class5StartEh+0xd4>
		{
		#if __DEBUG__ > 3
			usb << "readConfigurationDataArea failed!" << newline;
		#endif
		SetFactoryDefaults(0, true, false);
    3124:	6878      	ldr	r0, [r7, #4]
    3126:	2300      	movs	r3, #0
    3128:	2201      	movs	r2, #1
    312a:	2100      	movs	r1, #0
    312c:	4c3b      	ldr	r4, [pc, #236]	; (321c <_ZN12States_Class5StartEh+0x1c0>)
    312e:	47a0      	blx	r4
// #endif
	

	//interfaces.CheckInternalCommunication();

	if (readResult==0)
    3130:	687b      	ldr	r3, [r7, #4]
    3132:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
    3136:	2b00      	cmp	r3, #0
    3138:	d13f      	bne.n	31ba <_ZN12States_Class5StartEh+0x15e>
    {
		prepareStateChangeEvent(kHVACStateInitialize);
    313a:	2200      	movs	r2, #0
    313c:	f44f 7197 	mov.w	r1, #302	; 0x12e
    3140:	6878      	ldr	r0, [r7, #4]
    3142:	4b37      	ldr	r3, [pc, #220]	; (3220 <_ZN12States_Class5StartEh+0x1c4>)
    3144:	4798      	blx	r3
		event	e;
    3146:	f107 030c 	add.w	r3, r7, #12
    314a:	4618      	mov	r0, r3
    314c:	4b35      	ldr	r3, [pc, #212]	; (3224 <_ZN12States_Class5StartEh+0x1c8>)
    314e:	4798      	blx	r3
		listener.eventHandler=&States_Class::CheckEvents;
    3150:	4b35      	ldr	r3, [pc, #212]	; (3228 <_ZN12States_Class5StartEh+0x1cc>)
    3152:	4a36      	ldr	r2, [pc, #216]	; (322c <_ZN12States_Class5StartEh+0x1d0>)
    3154:	615a      	str	r2, [r3, #20]
		while ((cBit.IsOK())&&(!done))
    3156:	4836      	ldr	r0, [pc, #216]	; (3230 <_ZN12States_Class5StartEh+0x1d4>)
    3158:	4b36      	ldr	r3, [pc, #216]	; (3234 <_ZN12States_Class5StartEh+0x1d8>)
    315a:	4798      	blx	r3
    315c:	4603      	mov	r3, r0
    315e:	2b00      	cmp	r3, #0
    3160:	d008      	beq.n	3174 <_ZN12States_Class5StartEh+0x118>
    3162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3166:	f083 0301 	eor.w	r3, r3, #1
    316a:	b2db      	uxtb	r3, r3
    316c:	2b00      	cmp	r3, #0
    316e:	d001      	beq.n	3174 <_ZN12States_Class5StartEh+0x118>
    3170:	2301      	movs	r3, #1
    3172:	e000      	b.n	3176 <_ZN12States_Class5StartEh+0x11a>
    3174:	2300      	movs	r3, #0
    3176:	2b00      	cmp	r3, #0
    3178:	d026      	beq.n	31c8 <_ZN12States_Class5StartEh+0x16c>
		{
			if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent))
    317a:	4b2f      	ldr	r3, [pc, #188]	; (3238 <_ZN12States_Class5StartEh+0x1dc>)
    317c:	681b      	ldr	r3, [r3, #0]
    317e:	f107 010c 	add.w	r1, r7, #12
    3182:	9300      	str	r3, [sp, #0]
    3184:	f44f 7300 	mov.w	r3, #512	; 0x200
    3188:	f44f 7200 	mov.w	r2, #512	; 0x200
    318c:	4826      	ldr	r0, [pc, #152]	; (3228 <_ZN12States_Class5StartEh+0x1cc>)
    318e:	4c2b      	ldr	r4, [pc, #172]	; (323c <_ZN12States_Class5StartEh+0x1e0>)
    3190:	47a0      	blx	r4
    3192:	4603      	mov	r3, r0
    3194:	2b00      	cmp	r3, #0
    3196:	d0de      	beq.n	3156 <_ZN12States_Class5StartEh+0xfa>
			{
		
				handleHVACEvent(e);
    3198:	f107 030c 	add.w	r3, r7, #12
    319c:	4619      	mov	r1, r3
    319e:	6878      	ldr	r0, [r7, #4]
    31a0:	4b27      	ldr	r3, [pc, #156]	; (3240 <_ZN12States_Class5StartEh+0x1e4>)
    31a2:	4798      	blx	r3
				if (hvacState->currentState==kHVACStateLeaving)
    31a4:	687b      	ldr	r3, [r7, #4]
    31a6:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    31aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    31ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    31b0:	d1d1      	bne.n	3156 <_ZN12States_Class5StartEh+0xfa>
				{
						done=true;
    31b2:	2301      	movs	r3, #1
    31b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
    31b8:	e006      	b.n	31c8 <_ZN12States_Class5StartEh+0x16c>

			}
		}
			
    }else{
		alu.PrepareNewEvent(kALUEventSimpleStart);
    31ba:	2200      	movs	r2, #0
    31bc:	f44f 7182 	mov.w	r1, #260	; 0x104
    31c0:	480b      	ldr	r0, [pc, #44]	; (31f0 <_ZN12States_Class5StartEh+0x194>)
    31c2:	4b20      	ldr	r3, [pc, #128]	; (3244 <_ZN12States_Class5StartEh+0x1e8>)
    31c4:	4798      	blx	r3
		return;
    31c6:	bf00      	nop
    }



}
    31c8:	372c      	adds	r7, #44	; 0x2c
    31ca:	46bd      	mov	sp, r7
    31cc:	bd90      	pop	{r4, r7, pc}
    31ce:	bf00      	nop
    31d0:	00002d71 	.word	0x00002d71
    31d4:	2000a4a0 	.word	0x2000a4a0
    31d8:	000174bd 	.word	0x000174bd
    31dc:	00020010 	.word	0x00020010
    31e0:	200082dc 	.word	0x200082dc
    31e4:	00003d2d 	.word	0x00003d2d
    31e8:	0002000c 	.word	0x0002000c
    31ec:	00000afd 	.word	0x00000afd
    31f0:	20000ce8 	.word	0x20000ce8
    31f4:	000008a5 	.word	0x000008a5
    31f8:	20002f00 	.word	0x20002f00
    31fc:	000016d5 	.word	0x000016d5
    3200:	2000a278 	.word	0x2000a278
    3204:	00017125 	.word	0x00017125
    3208:	0001704d 	.word	0x0001704d
    320c:	20002880 	.word	0x20002880
    3210:	00001461 	.word	0x00001461
    3214:	20002f10 	.word	0x20002f10
    3218:	00002775 	.word	0x00002775
    321c:	00000f5d 	.word	0x00000f5d
    3220:	00003a25 	.word	0x00003a25
    3224:	000002ed 	.word	0x000002ed
    3228:	20009ca4 	.word	0x20009ca4
    322c:	00003c5d 	.word	0x00003c5d
    3230:	20008350 	.word	0x20008350
    3234:	00000e63 	.word	0x00000e63
    3238:	00021724 	.word	0x00021724
    323c:	00014ad5 	.word	0x00014ad5
    3240:	00003249 	.word	0x00003249
    3244:	000008e1 	.word	0x000008e1

00003248 <_ZN12States_Class15handleHVACEventER5event>:
	return result;
	}


void States_Class::handleHVACEvent(event& e)
	{
    3248:	b590      	push	{r4, r7, lr}
    324a:	b083      	sub	sp, #12
    324c:	af00      	add	r7, sp, #0
    324e:	6078      	str	r0, [r7, #4]
    3250:	6039      	str	r1, [r7, #0]
		hvacState->callingState = hvacState->currentState;
    3252:	687b      	ldr	r3, [r7, #4]
    3254:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3258:	687a      	ldr	r2, [r7, #4]
    325a:	f8d2 239c 	ldr.w	r2, [r2, #924]	; 0x39c
    325e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    3260:	631a      	str	r2, [r3, #48]	; 0x30
	if (hvacState->currentState != kHVACStateResume){
    3262:	687b      	ldr	r3, [r7, #4]
    3264:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    326a:	f240 122f 	movw	r2, #303	; 0x12f
    326e:	4293      	cmp	r3, r2
    3270:	d00c      	beq.n	328c <_ZN12States_Class15handleHVACEventER5event+0x44>
		hvacState->currentState = e.data.wordData[0];
    3272:	687b      	ldr	r3, [r7, #4]
    3274:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3278:	683a      	ldr	r2, [r7, #0]
    327a:	8912      	ldrh	r2, [r2, #8]
    327c:	62da      	str	r2, [r3, #44]	; 0x2c
		hvacState->stateFlags = e.data.wordData[1];
    327e:	687b      	ldr	r3, [r7, #4]
    3280:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3284:	683a      	ldr	r2, [r7, #0]
    3286:	8952      	ldrh	r2, [r2, #10]
    3288:	639a      	str	r2, [r3, #56]	; 0x38
    328a:	e007      	b.n	329c <_ZN12States_Class15handleHVACEventER5event+0x54>
		
	}else{
		hvacState->currentState=hvacState->lastState;
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3292:	687a      	ldr	r2, [r7, #4]
    3294:	f8d2 239c 	ldr.w	r2, [r2, #924]	; 0x39c
    3298:	6a92      	ldr	r2, [r2, #40]	; 0x28
    329a:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	hvacState->stateEntryTime = hvacTimer.Get_ticks();
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	f8d3 439c 	ldr.w	r4, [r3, #924]	; 0x39c
    32a2:	4860      	ldr	r0, [pc, #384]	; (3424 <_ZN12States_Class15handleHVACEventER5event+0x1dc>)
    32a4:	4b60      	ldr	r3, [pc, #384]	; (3428 <_ZN12States_Class15handleHVACEventER5event+0x1e0>)
    32a6:	4798      	blx	r3
    32a8:	4603      	mov	r3, r0
    32aa:	63e3      	str	r3, [r4, #60]	; 0x3c

#if __DEBUG__ > 0
	
	usb << "handleGAINEvent received: switching from ";
    32ac:	495f      	ldr	r1, [pc, #380]	; (342c <_ZN12States_Class15handleHVACEventER5event+0x1e4>)
    32ae:	4860      	ldr	r0, [pc, #384]	; (3430 <_ZN12States_Class15handleHVACEventER5event+0x1e8>)
    32b0:	4b60      	ldr	r3, [pc, #384]	; (3434 <_ZN12States_Class15handleHVACEventER5event+0x1ec>)
    32b2:	4798      	blx	r3
	//usb.write(gainStateDescription[hvacState->callingState]);
	usb << " to ";
    32b4:	4960      	ldr	r1, [pc, #384]	; (3438 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    32b6:	485e      	ldr	r0, [pc, #376]	; (3430 <_ZN12States_Class15handleHVACEventER5event+0x1e8>)
    32b8:	4b60      	ldr	r3, [pc, #384]	; (343c <_ZN12States_Class15handleHVACEventER5event+0x1f4>)
    32ba:	4798      	blx	r3
	//usb.write(gainStateDescription[hvacState->currentState]);
	//usb << " (flags == " << hvacState->stateFlags << ')' << NEWLINE;
	
#endif

	saveCurrentState();
    32bc:	6878      	ldr	r0, [r7, #4]
    32be:	4b60      	ldr	r3, [pc, #384]	; (3440 <_ZN12States_Class15handleHVACEventER5event+0x1f8>)
    32c0:	4798      	blx	r3

	switch (hvacState->currentState)
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    32c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    32ca:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
    32ce:	2b12      	cmp	r3, #18
    32d0:	f200 809f 	bhi.w	3412 <_ZN12States_Class15handleHVACEventER5event+0x1ca>
    32d4:	a201      	add	r2, pc, #4	; (adr r2, 32dc <_ZN12States_Class15handleHVACEventER5event+0x94>)
    32d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    32da:	bf00      	nop
    32dc:	00003329 	.word	0x00003329
    32e0:	0000333b 	.word	0x0000333b
    32e4:	0000334d 	.word	0x0000334d
    32e8:	0000335f 	.word	0x0000335f
    32ec:	00003371 	.word	0x00003371
    32f0:	00003383 	.word	0x00003383
    32f4:	00003413 	.word	0x00003413
    32f8:	00003413 	.word	0x00003413
    32fc:	00003395 	.word	0x00003395
    3300:	000033b9 	.word	0x000033b9
    3304:	00003413 	.word	0x00003413
    3308:	000033a7 	.word	0x000033a7
    330c:	00003413 	.word	0x00003413
    3310:	000033cb 	.word	0x000033cb
    3314:	000033dd 	.word	0x000033dd
    3318:	000033ef 	.word	0x000033ef
    331c:	00003413 	.word	0x00003413
    3320:	00003413 	.word	0x00003413
    3324:	00003401 	.word	0x00003401
		{
		case kHVACStateInitialize:
			StateInitialize(hvacState->stateFlags);
    3328:	687b      	ldr	r3, [r7, #4]
    332a:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3330:	4619      	mov	r1, r3
    3332:	6878      	ldr	r0, [r7, #4]
    3334:	4b43      	ldr	r3, [pc, #268]	; (3444 <_ZN12States_Class15handleHVACEventER5event+0x1fc>)
    3336:	4798      	blx	r3
			break;
    3338:	e070      	b.n	341c <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateResume:
			StateResume(hvacState->stateFlags);
    333a:	687b      	ldr	r3, [r7, #4]
    333c:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3342:	4619      	mov	r1, r3
    3344:	6878      	ldr	r0, [r7, #4]
    3346:	4b40      	ldr	r3, [pc, #256]	; (3448 <_ZN12States_Class15handleHVACEventER5event+0x200>)
    3348:	4798      	blx	r3
			break;
    334a:	e067      	b.n	341c <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateStandbyOFF:
			StateStandbyOFF(hvacState->stateFlags);
    334c:	687b      	ldr	r3, [r7, #4]
    334e:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3354:	4619      	mov	r1, r3
    3356:	6878      	ldr	r0, [r7, #4]
    3358:	4b3c      	ldr	r3, [pc, #240]	; (344c <_ZN12States_Class15handleHVACEventER5event+0x204>)
    335a:	4798      	blx	r3
			break;
    335c:	e05e      	b.n	341c <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStatePrepareStandbyON:
			handleStatePrepareStandbyON(hvacState->stateFlags);
    335e:	687b      	ldr	r3, [r7, #4]
    3360:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3366:	4619      	mov	r1, r3
    3368:	6878      	ldr	r0, [r7, #4]
    336a:	4b39      	ldr	r3, [pc, #228]	; (3450 <_ZN12States_Class15handleHVACEventER5event+0x208>)
    336c:	4798      	blx	r3
			break;
    336e:	e055      	b.n	341c <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateStandbyON:
			handleStateStandbyON(hvacState->stateFlags);
    3370:	687b      	ldr	r3, [r7, #4]
    3372:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3378:	4619      	mov	r1, r3
    337a:	6878      	ldr	r0, [r7, #4]
    337c:	4b35      	ldr	r3, [pc, #212]	; (3454 <_ZN12States_Class15handleHVACEventER5event+0x20c>)
    337e:	4798      	blx	r3
			break;
    3380:	e04c      	b.n	341c <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateStandbyReady:
			handleStateStandbyReady(hvacState->stateFlags);
    3382:	687b      	ldr	r3, [r7, #4]
    3384:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    338a:	4619      	mov	r1, r3
    338c:	6878      	ldr	r0, [r7, #4]
    338e:	4b32      	ldr	r3, [pc, #200]	; (3458 <_ZN12States_Class15handleHVACEventER5event+0x210>)
    3390:	4798      	blx	r3
			break;
    3392:	e043      	b.n	341c <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateON:
			handleStateON(hvacState->stateFlags);
    3394:	687b      	ldr	r3, [r7, #4]
    3396:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    339c:	4619      	mov	r1, r3
    339e:	6878      	ldr	r0, [r7, #4]
    33a0:	4b2e      	ldr	r3, [pc, #184]	; (345c <_ZN12States_Class15handleHVACEventER5event+0x214>)
    33a2:	4798      	blx	r3
			break;
    33a4:	e03a      	b.n	341c <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateFinished:
			handleStateFinished(hvacState->stateFlags);
    33a6:	687b      	ldr	r3, [r7, #4]
    33a8:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    33ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    33ae:	4619      	mov	r1, r3
    33b0:	6878      	ldr	r0, [r7, #4]
    33b2:	4b2b      	ldr	r3, [pc, #172]	; (3460 <_ZN12States_Class15handleHVACEventER5event+0x218>)
    33b4:	4798      	blx	r3
			break;
    33b6:	e031      	b.n	341c <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateStoppedProcess:
			StateStoppedProcess(hvacState->stateFlags);
    33b8:	687b      	ldr	r3, [r7, #4]
    33ba:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    33be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    33c0:	4619      	mov	r1, r3
    33c2:	6878      	ldr	r0, [r7, #4]
    33c4:	4b27      	ldr	r3, [pc, #156]	; (3464 <_ZN12States_Class15handleHVACEventER5event+0x21c>)
    33c6:	4798      	blx	r3
			break;
    33c8:	e028      	b.n	341c <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateSelfProtect:
			handleStateSelfProtect(hvacState->stateFlags);
    33ca:	687b      	ldr	r3, [r7, #4]
    33cc:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    33d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    33d2:	4619      	mov	r1, r3
    33d4:	6878      	ldr	r0, [r7, #4]
    33d6:	4b24      	ldr	r3, [pc, #144]	; (3468 <_ZN12States_Class15handleHVACEventER5event+0x220>)
    33d8:	4798      	blx	r3
			break;
    33da:	e01f      	b.n	341c <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateError:
			handleStateError(hvacState->stateFlags);
    33dc:	687b      	ldr	r3, [r7, #4]
    33de:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    33e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    33e4:	4619      	mov	r1, r3
    33e6:	6878      	ldr	r0, [r7, #4]
    33e8:	4b20      	ldr	r3, [pc, #128]	; (346c <_ZN12States_Class15handleHVACEventER5event+0x224>)
    33ea:	4798      	blx	r3
			break;
    33ec:	e016      	b.n	341c <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateMaintenance:
			handleStateMaintenance(hvacState->stateFlags);
    33ee:	687b      	ldr	r3, [r7, #4]
    33f0:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    33f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    33f6:	4619      	mov	r1, r3
    33f8:	6878      	ldr	r0, [r7, #4]
    33fa:	4b1d      	ldr	r3, [pc, #116]	; (3470 <_ZN12States_Class15handleHVACEventER5event+0x228>)
    33fc:	4798      	blx	r3
			break;
    33fe:	e00d      	b.n	341c <_ZN12States_Class15handleHVACEventER5event+0x1d4>
		case kHVACStateLeaving:
			StateLeaving(hvacState->stateFlags);
    3400:	687b      	ldr	r3, [r7, #4]
    3402:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3408:	4619      	mov	r1, r3
    340a:	6878      	ldr	r0, [r7, #4]
    340c:	4b19      	ldr	r3, [pc, #100]	; (3474 <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    340e:	4798      	blx	r3
		break;
    3410:	e004      	b.n	341c <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		default:
			handleStateError(kHVACErrorIllegalStateTransition);
    3412:	2102      	movs	r1, #2
    3414:	6878      	ldr	r0, [r7, #4]
    3416:	4b15      	ldr	r3, [pc, #84]	; (346c <_ZN12States_Class15handleHVACEventER5event+0x224>)
    3418:	4798      	blx	r3
			break;
    341a:	bf00      	nop
		}
	}
    341c:	bf00      	nop
    341e:	370c      	adds	r7, #12
    3420:	46bd      	mov	sp, r7
    3422:	bd90      	pop	{r4, r7, pc}
    3424:	2000a4a0 	.word	0x2000a4a0
    3428:	00017589 	.word	0x00017589
    342c:	00020030 	.word	0x00020030
    3430:	200082dc 	.word	0x200082dc
    3434:	00003d4d 	.word	0x00003d4d
    3438:	0002005c 	.word	0x0002005c
    343c:	00003d6d 	.word	0x00003d6d
    3440:	00003a99 	.word	0x00003a99
    3444:	00003479 	.word	0x00003479
    3448:	00003539 	.word	0x00003539
    344c:	000035ed 	.word	0x000035ed
    3450:	00003731 	.word	0x00003731
    3454:	000037c5 	.word	0x000037c5
    3458:	00003839 	.word	0x00003839
    345c:	00003871 	.word	0x00003871
    3460:	000038bd 	.word	0x000038bd
    3464:	0000393d 	.word	0x0000393d
    3468:	0000397d 	.word	0x0000397d
    346c:	000039b5 	.word	0x000039b5
    3470:	000039ed 	.word	0x000039ed
    3474:	000038f5 	.word	0x000038f5

00003478 <_ZN12States_Class15StateInitializeEm>:


void States_Class::StateInitialize(uint32 flags)
	{
    3478:	b580      	push	{r7, lr}
    347a:	b088      	sub	sp, #32
    347c:	af00      	add	r7, sp, #0
    347e:	6078      	str	r0, [r7, #4]
    3480:	6039      	str	r1, [r7, #0]
	event	e;
    3482:	f107 030c 	add.w	r3, r7, #12
    3486:	4618      	mov	r0, r3
    3488:	4b1e      	ldr	r3, [pc, #120]	; (3504 <_ZN12States_Class15StateInitializeEm+0x8c>)
    348a:	4798      	blx	r3
	hvacState->currentState=kHVACStateInitialize;
    348c:	687b      	ldr	r3, [r7, #4]
    348e:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3492:	f44f 7297 	mov.w	r2, #302	; 0x12e
    3496:	62da      	str	r2, [r3, #44]	; 0x2c
   	uint16	selfTestResult(kHVACNoError);
    3498:	2300      	movs	r3, #0
    349a:	83fb      	strh	r3, [r7, #30]
	
#if __DEBUG__ > 0
	
	usb << "handleStateInitialize: flags == 0x" << flags << NEWLINE;
    349c:	491a      	ldr	r1, [pc, #104]	; (3508 <_ZN12States_Class15StateInitializeEm+0x90>)
    349e:	481b      	ldr	r0, [pc, #108]	; (350c <_ZN12States_Class15StateInitializeEm+0x94>)
    34a0:	4b1b      	ldr	r3, [pc, #108]	; (3510 <_ZN12States_Class15StateInitializeEm+0x98>)
    34a2:	4798      	blx	r3
    34a4:	4602      	mov	r2, r0
    34a6:	463b      	mov	r3, r7
    34a8:	4619      	mov	r1, r3
    34aa:	4610      	mov	r0, r2
    34ac:	4b19      	ldr	r3, [pc, #100]	; (3514 <_ZN12States_Class15StateInitializeEm+0x9c>)
    34ae:	4798      	blx	r3
    34b0:	4603      	mov	r3, r0
    34b2:	4919      	ldr	r1, [pc, #100]	; (3518 <_ZN12States_Class15StateInitializeEm+0xa0>)
    34b4:	4618      	mov	r0, r3
    34b6:	4b19      	ldr	r3, [pc, #100]	; (351c <_ZN12States_Class15StateInitializeEm+0xa4>)
    34b8:	4798      	blx	r3
		
#endif
	
	
	//listener.CheckEvent();
	if (pBit.isOK)
    34ba:	4b19      	ldr	r3, [pc, #100]	; (3520 <_ZN12States_Class15StateInitializeEm+0xa8>)
    34bc:	781b      	ldrb	r3, [r3, #0]
    34be:	b2db      	uxtb	r3, r3
    34c0:	2b00      	cmp	r3, #0
    34c2:	d017      	beq.n	34f4 <_ZN12States_Class15StateInitializeEm+0x7c>
	{
		#if __DEBUG__ > 0
		
		usb << "handleStateInitialize" << NEWLINE;
    34c4:	4917      	ldr	r1, [pc, #92]	; (3524 <_ZN12States_Class15StateInitializeEm+0xac>)
    34c6:	4811      	ldr	r0, [pc, #68]	; (350c <_ZN12States_Class15StateInitializeEm+0x94>)
    34c8:	4b17      	ldr	r3, [pc, #92]	; (3528 <_ZN12States_Class15StateInitializeEm+0xb0>)
    34ca:	4798      	blx	r3
    34cc:	4603      	mov	r3, r0
    34ce:	4912      	ldr	r1, [pc, #72]	; (3518 <_ZN12States_Class15StateInitializeEm+0xa0>)
    34d0:	4618      	mov	r0, r3
    34d2:	4b12      	ldr	r3, [pc, #72]	; (351c <_ZN12States_Class15StateInitializeEm+0xa4>)
    34d4:	4798      	blx	r3

		#ifdef _OFFLINE
			prepareStateChangeEvent( kHVACStateInterrupted);
			listener.SendEventSelf(e);
		#else
		selfTestResult = handlePowerOnSelftest();
    34d6:	6878      	ldr	r0, [r7, #4]
    34d8:	4b14      	ldr	r3, [pc, #80]	; (352c <_ZN12States_Class15StateInitializeEm+0xb4>)
    34da:	4798      	blx	r3
    34dc:	4603      	mov	r3, r0
    34de:	83fb      	strh	r3, [r7, #30]
		if (selfTestResult == kHVACNoError)
    34e0:	8bfb      	ldrh	r3, [r7, #30]
    34e2:	2b00      	cmp	r3, #0
    34e4:	d10a      	bne.n	34fc <_ZN12States_Class15StateInitializeEm+0x84>
		{
			prepareStateChangeEvent( kHVACStateStandbyOFF);
    34e6:	2200      	movs	r2, #0
    34e8:	f44f 7198 	mov.w	r1, #304	; 0x130
    34ec:	6878      	ldr	r0, [r7, #4]
    34ee:	4b10      	ldr	r3, [pc, #64]	; (3530 <_ZN12States_Class15StateInitializeEm+0xb8>)
    34f0:	4798      	blx	r3
	}



	
	}
    34f2:	e003      	b.n	34fc <_ZN12States_Class15StateInitializeEm+0x84>
		Stop(0);
    34f4:	2100      	movs	r1, #0
    34f6:	6878      	ldr	r0, [r7, #4]
    34f8:	4b0e      	ldr	r3, [pc, #56]	; (3534 <_ZN12States_Class15StateInitializeEm+0xbc>)
    34fa:	4798      	blx	r3
	}
    34fc:	bf00      	nop
    34fe:	3720      	adds	r7, #32
    3500:	46bd      	mov	sp, r7
    3502:	bd80      	pop	{r7, pc}
    3504:	000002ed 	.word	0x000002ed
    3508:	00020064 	.word	0x00020064
    350c:	200082dc 	.word	0x200082dc
    3510:	00003d8d 	.word	0x00003d8d
    3514:	000012a5 	.word	0x000012a5
    3518:	0002000c 	.word	0x0002000c
    351c:	00000afd 	.word	0x00000afd
    3520:	2000833c 	.word	0x2000833c
    3524:	00020088 	.word	0x00020088
    3528:	000021f9 	.word	0x000021f9
    352c:	00003a75 	.word	0x00003a75
    3530:	00003a25 	.word	0x00003a25
    3534:	00003b2d 	.word	0x00003b2d

00003538 <_ZN12States_Class11StateResumeEm>:


void States_Class::StateResume(uint32 flags)
	{
    3538:	b580      	push	{r7, lr}
    353a:	b088      	sub	sp, #32
    353c:	af00      	add	r7, sp, #0
    353e:	6078      	str	r0, [r7, #4]
    3540:	6039      	str	r1, [r7, #0]
	event	e;
    3542:	f107 030c 	add.w	r3, r7, #12
    3546:	4618      	mov	r0, r3
    3548:	4b23      	ldr	r3, [pc, #140]	; (35d8 <_ZN12States_Class11StateResumeEm+0xa0>)
    354a:	4798      	blx	r3
	uint8	currentState(hvacState->currentState);
    354c:	687b      	ldr	r3, [r7, #4]
    354e:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3554:	77fb      	strb	r3, [r7, #31]
    uint16	selfTestResult(kHVACNoError);
    3556:	2300      	movs	r3, #0
    3558:	83bb      	strh	r3, [r7, #28]
	usb << "state.currentState (after) " << hvacState->currentState << newline;
#endif


    //Switch into current state if no error occured
    if(selfTestResult == kHVACNoError)
    355a:	8bbb      	ldrh	r3, [r7, #28]
    355c:	2b00      	cmp	r3, #0
    355e:	d128      	bne.n	35b2 <_ZN12States_Class11StateResumeEm+0x7a>
    {
        switch (hvacState->currentState)
    3560:	687b      	ldr	r3, [r7, #4]
    3562:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3568:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
    356c:	d004      	beq.n	3578 <_ZN12States_Class11StateResumeEm+0x40>
    356e:	f240 1237 	movw	r2, #311	; 0x137
    3572:	4293      	cmp	r3, r2
    3574:	d00b      	beq.n	358e <_ZN12States_Class11StateResumeEm+0x56>
    3576:	e011      	b.n	359c <_ZN12States_Class11StateResumeEm+0x64>
        {
        case kHVACStateON:
            prepareStateChangeEvent( hvacState->currentState, true);
    3578:	687b      	ldr	r3, [r7, #4]
    357a:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3580:	b29b      	uxth	r3, r3
    3582:	2201      	movs	r2, #1
    3584:	4619      	mov	r1, r3
    3586:	6878      	ldr	r0, [r7, #4]
    3588:	4b14      	ldr	r3, [pc, #80]	; (35dc <_ZN12States_Class11StateResumeEm+0xa4>)
    358a:	4798      	blx	r3
            break;
    358c:	e011      	b.n	35b2 <_ZN12States_Class11StateResumeEm+0x7a>

        case kHVACStateStoppedProcess:
            prepareStateChangeEvent( kHVACStateStoppedProcess);
    358e:	2200      	movs	r2, #0
    3590:	f240 1137 	movw	r1, #311	; 0x137
    3594:	6878      	ldr	r0, [r7, #4]
    3596:	4b11      	ldr	r3, [pc, #68]	; (35dc <_ZN12States_Class11StateResumeEm+0xa4>)
    3598:	4798      	blx	r3
            break;
    359a:	e00a      	b.n	35b2 <_ZN12States_Class11StateResumeEm+0x7a>

        default:
            prepareStateChangeEvent( hvacState->currentState);
    359c:	687b      	ldr	r3, [r7, #4]
    359e:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    35a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    35a4:	b29b      	uxth	r3, r3
    35a6:	2200      	movs	r2, #0
    35a8:	4619      	mov	r1, r3
    35aa:	6878      	ldr	r0, [r7, #4]
    35ac:	4b0b      	ldr	r3, [pc, #44]	; (35dc <_ZN12States_Class11StateResumeEm+0xa4>)
    35ae:	4798      	blx	r3
            break;
    35b0:	bf00      	nop
        }
    }

	hvacState->currentState = currentState;
    35b2:	687b      	ldr	r3, [r7, #4]
    35b4:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    35b8:	7ffa      	ldrb	r2, [r7, #31]
    35ba:	62da      	str	r2, [r3, #44]	; 0x2c

	listener.CheckEvent();
    35bc:	4808      	ldr	r0, [pc, #32]	; (35e0 <_ZN12States_Class11StateResumeEm+0xa8>)
    35be:	4b09      	ldr	r3, [pc, #36]	; (35e4 <_ZN12States_Class11StateResumeEm+0xac>)
    35c0:	4798      	blx	r3
	listener.SendEventSelf(e);
    35c2:	f107 030c 	add.w	r3, r7, #12
    35c6:	4619      	mov	r1, r3
    35c8:	4805      	ldr	r0, [pc, #20]	; (35e0 <_ZN12States_Class11StateResumeEm+0xa8>)
    35ca:	4b07      	ldr	r3, [pc, #28]	; (35e8 <_ZN12States_Class11StateResumeEm+0xb0>)
    35cc:	4798      	blx	r3
	}
    35ce:	bf00      	nop
    35d0:	3720      	adds	r7, #32
    35d2:	46bd      	mov	sp, r7
    35d4:	bd80      	pop	{r7, pc}
    35d6:	bf00      	nop
    35d8:	000002ed 	.word	0x000002ed
    35dc:	00003a25 	.word	0x00003a25
    35e0:	20009ca4 	.word	0x20009ca4
    35e4:	00014d2d 	.word	0x00014d2d
    35e8:	00014c49 	.word	0x00014c49

000035ec <_ZN12States_Class15StateStandbyOFFEm>:
				
void States_Class::StateStandbyOFF(uint32 flags)
	{
    35ec:	b590      	push	{r4, r7, lr}
    35ee:	b08b      	sub	sp, #44	; 0x2c
    35f0:	af02      	add	r7, sp, #8
    35f2:	6078      	str	r0, [r7, #4]
    35f4:	6039      	str	r1, [r7, #0]
	event	e;
    35f6:	f107 030c 	add.w	r3, r7, #12
    35fa:	4618      	mov	r0, r3
    35fc:	4b41      	ldr	r3, [pc, #260]	; (3704 <_ZN12States_Class15StateStandbyOFFEm+0x118>)
    35fe:	4798      	blx	r3
	hvacState->currentState=kHVACStateStandbyOFF;
    3600:	687b      	ldr	r3, [r7, #4]
    3602:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3606:	f44f 7298 	mov.w	r2, #304	; 0x130
    360a:	62da      	str	r2, [r3, #44]	; 0x2c
	hvacState->arincStatus.statusArinc=OFF;
    360c:	687b      	ldr	r3, [r7, #4]
    360e:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3612:	2200      	movs	r2, #0
    3614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	bool	done(false);
    3618:	2300      	movs	r3, #0
    361a:	77fb      	strb	r3, [r7, #31]
	gotAluEvent=false;
    361c:	687b      	ldr	r3, [r7, #4]
    361e:	2200      	movs	r2, #0
    3620:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
	gotHVACEvent=false;
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	2200      	movs	r2, #0
    3628:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
   	
#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    362c:	4936      	ldr	r1, [pc, #216]	; (3708 <_ZN12States_Class15StateStandbyOFFEm+0x11c>)
    362e:	4837      	ldr	r0, [pc, #220]	; (370c <_ZN12States_Class15StateStandbyOFFEm+0x120>)
    3630:	4b37      	ldr	r3, [pc, #220]	; (3710 <_ZN12States_Class15StateStandbyOFFEm+0x124>)
    3632:	4798      	blx	r3
    3634:	4603      	mov	r3, r0
    3636:	4937      	ldr	r1, [pc, #220]	; (3714 <_ZN12States_Class15StateStandbyOFFEm+0x128>)
    3638:	4618      	mov	r0, r3
    363a:	4b37      	ldr	r3, [pc, #220]	; (3718 <_ZN12States_Class15StateStandbyOFFEm+0x12c>)
    363c:	4798      	blx	r3
		
#endif

	hvacState->smpsTemperatureOutOfRangeEventSent = false;
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	f8d3 239c 	ldr.w	r2, [r3, #924]	; 0x39c
    3644:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
    3648:	f36f 0341 	bfc	r3, #1, #1
    364c:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
	hvacState->magnetronTemperatureOutOfRangeEventSent = false;
    3650:	687b      	ldr	r3, [r7, #4]
    3652:	f8d3 239c 	ldr.w	r2, [r3, #924]	; 0x39c
    3656:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
    365a:	f36f 03c3 	bfc	r3, #3, #1
    365e:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
	hvacState->exhaustTemperatureOutOfRangeEventSent = false;
    3662:	687b      	ldr	r3, [r7, #4]
    3664:	f8d3 239c 	ldr.w	r2, [r3, #924]	; 0x39c
    3668:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
    366c:	f36f 0382 	bfc	r3, #2, #1
    3670:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

	hvacState->magnetronFanFailureDetectionTime = forever;
    3674:	687b      	ldr	r3, [r7, #4]
    3676:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    367a:	4a28      	ldr	r2, [pc, #160]	; (371c <_ZN12States_Class15StateStandbyOFFEm+0x130>)
    367c:	6812      	ldr	r2, [r2, #0]
    367e:	665a      	str	r2, [r3, #100]	; 0x64
	listener.eventHandler=&States_Class::CheckEvents;
    3680:	4b27      	ldr	r3, [pc, #156]	; (3720 <_ZN12States_Class15StateStandbyOFFEm+0x134>)
    3682:	4a28      	ldr	r2, [pc, #160]	; (3724 <_ZN12States_Class15StateStandbyOFFEm+0x138>)
    3684:	615a      	str	r2, [r3, #20]
	while(!done){
    3686:	7ffb      	ldrb	r3, [r7, #31]
    3688:	2b00      	cmp	r3, #0
    368a:	d137      	bne.n	36fc <_ZN12States_Class15StateStandbyOFFEm+0x110>
		gotAluEvent=listener.WaitForEvent(e, kALUEventClass, kAnyEventType,1);
    368c:	f107 010c 	add.w	r1, r7, #12
    3690:	2301      	movs	r3, #1
    3692:	9300      	str	r3, [sp, #0]
    3694:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3698:	f44f 6280 	mov.w	r2, #1024	; 0x400
    369c:	4820      	ldr	r0, [pc, #128]	; (3720 <_ZN12States_Class15StateStandbyOFFEm+0x134>)
    369e:	4c22      	ldr	r4, [pc, #136]	; (3728 <_ZN12States_Class15StateStandbyOFFEm+0x13c>)
    36a0:	47a0      	blx	r4
    36a2:	4603      	mov	r3, r0
    36a4:	461a      	mov	r2, r3
    36a6:	687b      	ldr	r3, [r7, #4]
    36a8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
		if (!gotAluEvent)
    36ac:	687b      	ldr	r3, [r7, #4]
    36ae:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
    36b2:	f083 0301 	eor.w	r3, r3, #1
    36b6:	b2db      	uxtb	r3, r3
    36b8:	2b00      	cmp	r3, #0
    36ba:	d014      	beq.n	36e6 <_ZN12States_Class15StateStandbyOFFEm+0xfa>
		{
			gotHVACEvent=listener.WaitForEvent(e, kHVACEventClass, kAnyEventType,1);
    36bc:	f107 010c 	add.w	r1, r7, #12
    36c0:	2301      	movs	r3, #1
    36c2:	9300      	str	r3, [sp, #0]
    36c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    36c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    36cc:	4814      	ldr	r0, [pc, #80]	; (3720 <_ZN12States_Class15StateStandbyOFFEm+0x134>)
    36ce:	4c16      	ldr	r4, [pc, #88]	; (3728 <_ZN12States_Class15StateStandbyOFFEm+0x13c>)
    36d0:	47a0      	blx	r4
    36d2:	4603      	mov	r3, r0
    36d4:	461a      	mov	r2, r3
    36d6:	687b      	ldr	r3, [r7, #4]
    36d8:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
			done=gotHVACEvent;
    36dc:	687b      	ldr	r3, [r7, #4]
    36de:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
    36e2:	77fb      	strb	r3, [r7, #31]
    36e4:	e7cf      	b.n	3686 <_ZN12States_Class15StateStandbyOFFEm+0x9a>
		} 
		else
		{
			prepareStateChangeEvent(kHVACStateLeaving);
    36e6:	2200      	movs	r2, #0
    36e8:	f44f 71a0 	mov.w	r1, #320	; 0x140
    36ec:	6878      	ldr	r0, [r7, #4]
    36ee:	4b0f      	ldr	r3, [pc, #60]	; (372c <_ZN12States_Class15StateStandbyOFFEm+0x140>)
    36f0:	4798      	blx	r3
			done=gotAluEvent;
    36f2:	687b      	ldr	r3, [r7, #4]
    36f4:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
    36f8:	77fb      	strb	r3, [r7, #31]
	while(!done){
    36fa:	e7c4      	b.n	3686 <_ZN12States_Class15StateStandbyOFFEm+0x9a>
		}
	}



	}
    36fc:	bf00      	nop
    36fe:	3724      	adds	r7, #36	; 0x24
    3700:	46bd      	mov	sp, r7
    3702:	bd90      	pop	{r4, r7, pc}
    3704:	000002ed 	.word	0x000002ed
    3708:	000200a0 	.word	0x000200a0
    370c:	200082dc 	.word	0x200082dc
    3710:	000021f9 	.word	0x000021f9
    3714:	0002000c 	.word	0x0002000c
    3718:	00000afd 	.word	0x00000afd
    371c:	00021724 	.word	0x00021724
    3720:	20009ca4 	.word	0x20009ca4
    3724:	00003c5d 	.word	0x00003c5d
    3728:	00014b0d 	.word	0x00014b0d
    372c:	00003a25 	.word	0x00003a25

00003730 <_ZN12States_Class27handleStatePrepareStandbyONEm>:

void States_Class::handleStatePrepareStandbyON(uint32 flags)
	{
    3730:	b580      	push	{r7, lr}
    3732:	b08a      	sub	sp, #40	; 0x28
    3734:	af00      	add	r7, sp, #0
    3736:	6078      	str	r0, [r7, #4]
    3738:	6039      	str	r1, [r7, #0]
	event	e;
    373a:	f107 030c 	add.w	r3, r7, #12
    373e:	4618      	mov	r0, r3
    3740:	4b16      	ldr	r3, [pc, #88]	; (379c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x6c>)
    3742:	4798      	blx	r3
	bool	done(false);
    3744:	2300      	movs	r3, #0
    3746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32	connectFlags(hvacState->alarmState?kConnectFlagsAlarmOn:0);
    374a:	687b      	ldr	r3, [r7, #4]
    374c:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3750:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
    3754:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3758:	b2db      	uxtb	r3, r3
    375a:	2b00      	cmp	r3, #0
    375c:	d001      	beq.n	3762 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x32>
    375e:	2301      	movs	r3, #1
    3760:	e000      	b.n	3764 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x34>
    3762:	2300      	movs	r3, #0
    3764:	623b      	str	r3, [r7, #32]
	   	
#ifdef __DEBUG__
	
	usb << "handleStatePrepareStandbyON" << NEWLINE;
    3766:	490e      	ldr	r1, [pc, #56]	; (37a0 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x70>)
    3768:	480e      	ldr	r0, [pc, #56]	; (37a4 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x74>)
    376a:	4b0f      	ldr	r3, [pc, #60]	; (37a8 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x78>)
    376c:	4798      	blx	r3
    376e:	4603      	mov	r3, r0
    3770:	490e      	ldr	r1, [pc, #56]	; (37ac <_ZN12States_Class27handleStatePrepareStandbyONEm+0x7c>)
    3772:	4618      	mov	r0, r3
    3774:	4b0e      	ldr	r3, [pc, #56]	; (37b0 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x80>)
    3776:	4798      	blx	r3
		
#endif

	
	tick_t	leaveDisplayTime = hvacTimer.Get_ticks() + 4000;
    3778:	480e      	ldr	r0, [pc, #56]	; (37b4 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x84>)
    377a:	4b0f      	ldr	r3, [pc, #60]	; (37b8 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x88>)
    377c:	4798      	blx	r3
    377e:	4603      	mov	r3, r0
    3780:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
    3784:	61fb      	str	r3, [r7, #28]

	

	listener.SendEventSelf(e);
    3786:	f107 030c 	add.w	r3, r7, #12
    378a:	4619      	mov	r1, r3
    378c:	480b      	ldr	r0, [pc, #44]	; (37bc <_ZN12States_Class27handleStatePrepareStandbyONEm+0x8c>)
    378e:	4b0c      	ldr	r3, [pc, #48]	; (37c0 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x90>)
    3790:	4798      	blx	r3
	}
    3792:	bf00      	nop
    3794:	3728      	adds	r7, #40	; 0x28
    3796:	46bd      	mov	sp, r7
    3798:	bd80      	pop	{r7, pc}
    379a:	bf00      	nop
    379c:	000002ed 	.word	0x000002ed
    37a0:	000200b8 	.word	0x000200b8
    37a4:	200082dc 	.word	0x200082dc
    37a8:	00003dad 	.word	0x00003dad
    37ac:	0002000c 	.word	0x0002000c
    37b0:	00000afd 	.word	0x00000afd
    37b4:	2000a4a0 	.word	0x2000a4a0
    37b8:	00017589 	.word	0x00017589
    37bc:	20009ca4 	.word	0x20009ca4
    37c0:	00014c49 	.word	0x00014c49

000037c4 <_ZN12States_Class20handleStateStandbyONEm>:

void States_Class::handleStateStandbyON(uint32 flags)
	{
    37c4:	b580      	push	{r7, lr}
    37c6:	b088      	sub	sp, #32
    37c8:	af00      	add	r7, sp, #0
    37ca:	6078      	str	r0, [r7, #4]
    37cc:	6039      	str	r1, [r7, #0]
	event	e;
    37ce:	f107 030c 	add.w	r3, r7, #12
    37d2:	4618      	mov	r0, r3
    37d4:	4b15      	ldr	r3, [pc, #84]	; (382c <_ZN12States_Class20handleStateStandbyONEm+0x68>)
    37d6:	4798      	blx	r3
	bool	done(false);
    37d8:	2300      	movs	r3, #0
    37da:	77fb      	strb	r3, [r7, #31]
	
	usb << "handleStateStandbyON" << newline;
		
#endif

	hvacState->latchClosedConfirmPending = false;
    37dc:	687b      	ldr	r3, [r7, #4]
    37de:	f8d3 239c 	ldr.w	r2, [r3, #924]	; 0x39c
    37e2:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
    37e6:	f36f 1345 	bfc	r3, #5, #1
    37ea:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
    hvacState->remainingTime = (tick_t)persistentConfiguration.cycle.duration * 1000L;
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    37f4:	687a      	ldr	r2, [r7, #4]
    37f6:	f8d2 238c 	ldr.w	r2, [r2, #908]	; 0x38c
    37fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    37fe:	fb01 f202 	mul.w	r2, r1, r2
    3802:	64da      	str	r2, [r3, #76]	; 0x4c

	
	hvacState->reedRelayOpen = false;
    3804:	687b      	ldr	r3, [r7, #4]
    3806:	f8d3 239c 	ldr.w	r2, [r3, #924]	; 0x39c
    380a:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
    380e:	f36f 1304 	bfc	r3, #4, #1
    3812:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
	
	listener.SendEventSelf(e);
    3816:	f107 030c 	add.w	r3, r7, #12
    381a:	4619      	mov	r1, r3
    381c:	4804      	ldr	r0, [pc, #16]	; (3830 <_ZN12States_Class20handleStateStandbyONEm+0x6c>)
    381e:	4b05      	ldr	r3, [pc, #20]	; (3834 <_ZN12States_Class20handleStateStandbyONEm+0x70>)
    3820:	4798      	blx	r3
	}
    3822:	bf00      	nop
    3824:	3720      	adds	r7, #32
    3826:	46bd      	mov	sp, r7
    3828:	bd80      	pop	{r7, pc}
    382a:	bf00      	nop
    382c:	000002ed 	.word	0x000002ed
    3830:	20009ca4 	.word	0x20009ca4
    3834:	00014c49 	.word	0x00014c49

00003838 <_ZN12States_Class23handleStateStandbyReadyEm>:

void States_Class::handleStateStandbyReady(uint32 flags)
	{
    3838:	b580      	push	{r7, lr}
    383a:	b088      	sub	sp, #32
    383c:	af00      	add	r7, sp, #0
    383e:	6078      	str	r0, [r7, #4]
    3840:	6039      	str	r1, [r7, #0]
	event	e;
    3842:	f107 030c 	add.w	r3, r7, #12
    3846:	4618      	mov	r0, r3
    3848:	4b06      	ldr	r3, [pc, #24]	; (3864 <_ZN12States_Class23handleStateStandbyReadyEm+0x2c>)
    384a:	4798      	blx	r3
	bool	done(false);
    384c:	2300      	movs	r3, #0
    384e:	77fb      	strb	r3, [r7, #31]

	
	listener.SendEventSelf(e);
    3850:	f107 030c 	add.w	r3, r7, #12
    3854:	4619      	mov	r1, r3
    3856:	4804      	ldr	r0, [pc, #16]	; (3868 <_ZN12States_Class23handleStateStandbyReadyEm+0x30>)
    3858:	4b04      	ldr	r3, [pc, #16]	; (386c <_ZN12States_Class23handleStateStandbyReadyEm+0x34>)
    385a:	4798      	blx	r3
	}
    385c:	bf00      	nop
    385e:	3720      	adds	r7, #32
    3860:	46bd      	mov	sp, r7
    3862:	bd80      	pop	{r7, pc}
    3864:	000002ed 	.word	0x000002ed
    3868:	20009ca4 	.word	0x20009ca4
    386c:	00014c49 	.word	0x00014c49

00003870 <_ZN12States_Class13handleStateONEm>:

	listener.SendEventSelf(e);
	}

void States_Class::handleStateON(uint32 flags)
	{
    3870:	b580      	push	{r7, lr}
    3872:	b088      	sub	sp, #32
    3874:	af00      	add	r7, sp, #0
    3876:	6078      	str	r0, [r7, #4]
    3878:	6039      	str	r1, [r7, #0]
	event	e;
    387a:	f107 030c 	add.w	r3, r7, #12
    387e:	4618      	mov	r0, r3
    3880:	4b0b      	ldr	r3, [pc, #44]	; (38b0 <_ZN12States_Class13handleStateONEm+0x40>)
    3882:	4798      	blx	r3
	bool	done(false);
    3884:	2300      	movs	r3, #0
    3886:	77fb      	strb	r3, [r7, #31]
	bool	checkForEmptyCavity(true);
    3888:	2301      	movs	r3, #1
    388a:	77bb      	strb	r3, [r7, #30]
	bool	checkForSMPSTemperature(true);
    388c:	2301      	movs	r3, #1
    388e:	777b      	strb	r3, [r7, #29]
	bool	resume(flags != 0);		
    3890:	683b      	ldr	r3, [r7, #0]
    3892:	2b00      	cmp	r3, #0
    3894:	bf14      	ite	ne
    3896:	2301      	movne	r3, #1
    3898:	2300      	moveq	r3, #0
    389a:	773b      	strb	r3, [r7, #28]
	usb << "handleStateON: resume == " << (resume?"true":"false") << newline;
		
#endif


	listener.SendEventSelf(e);
    389c:	f107 030c 	add.w	r3, r7, #12
    38a0:	4619      	mov	r1, r3
    38a2:	4804      	ldr	r0, [pc, #16]	; (38b4 <_ZN12States_Class13handleStateONEm+0x44>)
    38a4:	4b04      	ldr	r3, [pc, #16]	; (38b8 <_ZN12States_Class13handleStateONEm+0x48>)
    38a6:	4798      	blx	r3
	}
    38a8:	bf00      	nop
    38aa:	3720      	adds	r7, #32
    38ac:	46bd      	mov	sp, r7
    38ae:	bd80      	pop	{r7, pc}
    38b0:	000002ed 	.word	0x000002ed
    38b4:	20009ca4 	.word	0x20009ca4
    38b8:	00014c49 	.word	0x00014c49

000038bc <_ZN12States_Class19handleStateFinishedEm>:

void States_Class::handleStateFinished(uint32 flags)
	{
    38bc:	b580      	push	{r7, lr}
    38be:	b088      	sub	sp, #32
    38c0:	af00      	add	r7, sp, #0
    38c2:	6078      	str	r0, [r7, #4]
    38c4:	6039      	str	r1, [r7, #0]
	event	e;
    38c6:	f107 030c 	add.w	r3, r7, #12
    38ca:	4618      	mov	r0, r3
    38cc:	4b06      	ldr	r3, [pc, #24]	; (38e8 <_ZN12States_Class19handleStateFinishedEm+0x2c>)
    38ce:	4798      	blx	r3
	bool	done(false);
    38d0:	2300      	movs	r3, #0
    38d2:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    38d4:	f107 030c 	add.w	r3, r7, #12
    38d8:	4619      	mov	r1, r3
    38da:	4804      	ldr	r0, [pc, #16]	; (38ec <_ZN12States_Class19handleStateFinishedEm+0x30>)
    38dc:	4b04      	ldr	r3, [pc, #16]	; (38f0 <_ZN12States_Class19handleStateFinishedEm+0x34>)
    38de:	4798      	blx	r3
	}
    38e0:	bf00      	nop
    38e2:	3720      	adds	r7, #32
    38e4:	46bd      	mov	sp, r7
    38e6:	bd80      	pop	{r7, pc}
    38e8:	000002ed 	.word	0x000002ed
    38ec:	20009ca4 	.word	0x20009ca4
    38f0:	00014c49 	.word	0x00014c49

000038f4 <_ZN12States_Class12StateLeavingEm>:
void States_Class::StateLeaving(uint32 flags)
{
    38f4:	b580      	push	{r7, lr}
    38f6:	b086      	sub	sp, #24
    38f8:	af00      	add	r7, sp, #0
    38fa:	6078      	str	r0, [r7, #4]
    38fc:	6039      	str	r1, [r7, #0]
	event	e;
    38fe:	f107 0308 	add.w	r3, r7, #8
    3902:	4618      	mov	r0, r3
    3904:	4b0b      	ldr	r3, [pc, #44]	; (3934 <_ZN12States_Class12StateLeavingEm+0x40>)
    3906:	4798      	blx	r3
	hvacState->lastState=hvacState->callingState;
    3908:	687b      	ldr	r3, [r7, #4]
    390a:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    390e:	687a      	ldr	r2, [r7, #4]
    3910:	f8d2 239c 	ldr.w	r2, [r2, #924]	; 0x39c
    3914:	6b12      	ldr	r2, [r2, #48]	; 0x30
    3916:	629a      	str	r2, [r3, #40]	; 0x28
	hvacState->currentState=kHVACStateLeaving;
    3918:	687b      	ldr	r3, [r7, #4]
    391a:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    391e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3922:	62da      	str	r2, [r3, #44]	; 0x2c
	
	saveCurrentState();
    3924:	6878      	ldr	r0, [r7, #4]
    3926:	4b04      	ldr	r3, [pc, #16]	; (3938 <_ZN12States_Class12StateLeavingEm+0x44>)
    3928:	4798      	blx	r3
	//prepareStateChangeEvent(kHVACStateLeaving,(uint16)hvacState->lastState);
	//bool	done(false);
	//listener.SendEventSelf(e);
}
    392a:	bf00      	nop
    392c:	3718      	adds	r7, #24
    392e:	46bd      	mov	sp, r7
    3930:	bd80      	pop	{r7, pc}
    3932:	bf00      	nop
    3934:	000002ed 	.word	0x000002ed
    3938:	00003a99 	.word	0x00003a99

0000393c <_ZN12States_Class19StateStoppedProcessEm>:

void States_Class::StateStoppedProcess(uint32 flags)
	{
    393c:	b580      	push	{r7, lr}
    393e:	b088      	sub	sp, #32
    3940:	af00      	add	r7, sp, #0
    3942:	6078      	str	r0, [r7, #4]
    3944:	6039      	str	r1, [r7, #0]
	event	e;
    3946:	f107 030c 	add.w	r3, r7, #12
    394a:	4618      	mov	r0, r3
    394c:	4b08      	ldr	r3, [pc, #32]	; (3970 <_ZN12States_Class19StateStoppedProcessEm+0x34>)
    394e:	4798      	blx	r3
 	bool	done(false);
    3950:	2300      	movs	r3, #0
    3952:	77fb      	strb	r3, [r7, #31]
 	bool	abortCycle(true);
    3954:	2301      	movs	r3, #1
    3956:	77bb      	strb	r3, [r7, #30]
    uint16	resumeFlags(flags);
    3958:	683b      	ldr	r3, [r7, #0]
    395a:	83bb      	strh	r3, [r7, #28]
	listener.SendEventSelf(e);
    395c:	f107 030c 	add.w	r3, r7, #12
    3960:	4619      	mov	r1, r3
    3962:	4804      	ldr	r0, [pc, #16]	; (3974 <_ZN12States_Class19StateStoppedProcessEm+0x38>)
    3964:	4b04      	ldr	r3, [pc, #16]	; (3978 <_ZN12States_Class19StateStoppedProcessEm+0x3c>)
    3966:	4798      	blx	r3
	}
    3968:	bf00      	nop
    396a:	3720      	adds	r7, #32
    396c:	46bd      	mov	sp, r7
    396e:	bd80      	pop	{r7, pc}
    3970:	000002ed 	.word	0x000002ed
    3974:	20009ca4 	.word	0x20009ca4
    3978:	00014c49 	.word	0x00014c49

0000397c <_ZN12States_Class22handleStateSelfProtectEm>:

void States_Class::handleStateSelfProtect(uint32_t error)
	{
    397c:	b580      	push	{r7, lr}
    397e:	b088      	sub	sp, #32
    3980:	af00      	add	r7, sp, #0
    3982:	6078      	str	r0, [r7, #4]
    3984:	6039      	str	r1, [r7, #0]
	event	e;
    3986:	f107 030c 	add.w	r3, r7, #12
    398a:	4618      	mov	r0, r3
    398c:	4b06      	ldr	r3, [pc, #24]	; (39a8 <_ZN12States_Class22handleStateSelfProtectEm+0x2c>)
    398e:	4798      	blx	r3
	bool	done(false);
    3990:	2300      	movs	r3, #0
    3992:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3994:	f107 030c 	add.w	r3, r7, #12
    3998:	4619      	mov	r1, r3
    399a:	4804      	ldr	r0, [pc, #16]	; (39ac <_ZN12States_Class22handleStateSelfProtectEm+0x30>)
    399c:	4b04      	ldr	r3, [pc, #16]	; (39b0 <_ZN12States_Class22handleStateSelfProtectEm+0x34>)
    399e:	4798      	blx	r3
	}
    39a0:	bf00      	nop
    39a2:	3720      	adds	r7, #32
    39a4:	46bd      	mov	sp, r7
    39a6:	bd80      	pop	{r7, pc}
    39a8:	000002ed 	.word	0x000002ed
    39ac:	20009ca4 	.word	0x20009ca4
    39b0:	00014c49 	.word	0x00014c49

000039b4 <_ZN12States_Class16handleStateErrorEm>:

void States_Class::handleStateError(uint32_t error)
	{
    39b4:	b580      	push	{r7, lr}
    39b6:	b088      	sub	sp, #32
    39b8:	af00      	add	r7, sp, #0
    39ba:	6078      	str	r0, [r7, #4]
    39bc:	6039      	str	r1, [r7, #0]
	event	e;
    39be:	f107 030c 	add.w	r3, r7, #12
    39c2:	4618      	mov	r0, r3
    39c4:	4b06      	ldr	r3, [pc, #24]	; (39e0 <_ZN12States_Class16handleStateErrorEm+0x2c>)
    39c6:	4798      	blx	r3
	bool	done(false);
    39c8:	2300      	movs	r3, #0
    39ca:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    39cc:	f107 030c 	add.w	r3, r7, #12
    39d0:	4619      	mov	r1, r3
    39d2:	4804      	ldr	r0, [pc, #16]	; (39e4 <_ZN12States_Class16handleStateErrorEm+0x30>)
    39d4:	4b04      	ldr	r3, [pc, #16]	; (39e8 <_ZN12States_Class16handleStateErrorEm+0x34>)
    39d6:	4798      	blx	r3
	}
    39d8:	bf00      	nop
    39da:	3720      	adds	r7, #32
    39dc:	46bd      	mov	sp, r7
    39de:	bd80      	pop	{r7, pc}
    39e0:	000002ed 	.word	0x000002ed
    39e4:	20009ca4 	.word	0x20009ca4
    39e8:	00014c49 	.word	0x00014c49

000039ec <_ZN12States_Class22handleStateMaintenanceEm>:

void States_Class::handleStateMaintenance(uint32 flags)
	{
    39ec:	b580      	push	{r7, lr}
    39ee:	b088      	sub	sp, #32
    39f0:	af00      	add	r7, sp, #0
    39f2:	6078      	str	r0, [r7, #4]
    39f4:	6039      	str	r1, [r7, #0]
	event	e;
    39f6:	f107 030c 	add.w	r3, r7, #12
    39fa:	4618      	mov	r0, r3
    39fc:	4b06      	ldr	r3, [pc, #24]	; (3a18 <_ZN12States_Class22handleStateMaintenanceEm+0x2c>)
    39fe:	4798      	blx	r3
	bool	done(false);
    3a00:	2300      	movs	r3, #0
    3a02:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3a04:	f107 030c 	add.w	r3, r7, #12
    3a08:	4619      	mov	r1, r3
    3a0a:	4804      	ldr	r0, [pc, #16]	; (3a1c <_ZN12States_Class22handleStateMaintenanceEm+0x30>)
    3a0c:	4b04      	ldr	r3, [pc, #16]	; (3a20 <_ZN12States_Class22handleStateMaintenanceEm+0x34>)
    3a0e:	4798      	blx	r3
	}
    3a10:	bf00      	nop
    3a12:	3720      	adds	r7, #32
    3a14:	46bd      	mov	sp, r7
    3a16:	bd80      	pop	{r7, pc}
    3a18:	000002ed 	.word	0x000002ed
    3a1c:	20009ca4 	.word	0x20009ca4
    3a20:	00014c49 	.word	0x00014c49

00003a24 <_ZN12States_Class23prepareStateChangeEventEtt>:
	done = false;
	return result;
	}

void States_Class::prepareStateChangeEvent(uint16 newState, uint16 data)
	{
    3a24:	b580      	push	{r7, lr}
    3a26:	b086      	sub	sp, #24
    3a28:	af00      	add	r7, sp, #0
    3a2a:	6078      	str	r0, [r7, #4]
    3a2c:	460b      	mov	r3, r1
    3a2e:	807b      	strh	r3, [r7, #2]
    3a30:	4613      	mov	r3, r2
    3a32:	803b      	strh	r3, [r7, #0]
	event e;
    3a34:	f107 0308 	add.w	r3, r7, #8
    3a38:	4618      	mov	r0, r3
    3a3a:	4b0b      	ldr	r3, [pc, #44]	; (3a68 <_ZN12States_Class23prepareStateChangeEventEtt+0x44>)
    3a3c:	4798      	blx	r3
	e.eventClass =(EventClass)kHVACEventClass;
    3a3e:	f44f 7300 	mov.w	r3, #512	; 0x200
    3a42:	813b      	strh	r3, [r7, #8]
	e.eventType = (EventType)kHVACSwitchStateEvent;
    3a44:	f44f 7300 	mov.w	r3, #512	; 0x200
    3a48:	817b      	strh	r3, [r7, #10]
	e.data.wordData[0] = newState;
    3a4a:	887b      	ldrh	r3, [r7, #2]
    3a4c:	823b      	strh	r3, [r7, #16]
	e.data.wordData[1] = data;
    3a4e:	883b      	ldrh	r3, [r7, #0]
    3a50:	827b      	strh	r3, [r7, #18]
	listener.SendEventSelf(e);
    3a52:	f107 0308 	add.w	r3, r7, #8
    3a56:	4619      	mov	r1, r3
    3a58:	4804      	ldr	r0, [pc, #16]	; (3a6c <_ZN12States_Class23prepareStateChangeEventEtt+0x48>)
    3a5a:	4b05      	ldr	r3, [pc, #20]	; (3a70 <_ZN12States_Class23prepareStateChangeEventEtt+0x4c>)
    3a5c:	4798      	blx	r3
	}
    3a5e:	bf00      	nop
    3a60:	3718      	adds	r7, #24
    3a62:	46bd      	mov	sp, r7
    3a64:	bd80      	pop	{r7, pc}
    3a66:	bf00      	nop
    3a68:	000002ed 	.word	0x000002ed
    3a6c:	20009ca4 	.word	0x20009ca4
    3a70:	00014c49 	.word	0x00014c49

00003a74 <_ZN12States_Class21handlePowerOnSelftestEv>:

uint32_t States_Class::handlePowerOnSelftest(void)
	{
    3a74:	b580      	push	{r7, lr}
    3a76:	b088      	sub	sp, #32
    3a78:	af00      	add	r7, sp, #0
    3a7a:	6078      	str	r0, [r7, #4]
	event	e;
    3a7c:	f107 030c 	add.w	r3, r7, #12
    3a80:	4618      	mov	r0, r3
    3a82:	4b04      	ldr	r3, [pc, #16]	; (3a94 <_ZN12States_Class21handlePowerOnSelftestEv+0x20>)
    3a84:	4798      	blx	r3
	uint16	selfTestResult(kHVACNoError);
    3a86:	2300      	movs	r3, #0
    3a88:	83fb      	strh	r3, [r7, #30]
	bool	moduleAvailable;
	int16	temperature;
		
	return selfTestResult;
    3a8a:	8bfb      	ldrh	r3, [r7, #30]
	}
    3a8c:	4618      	mov	r0, r3
    3a8e:	3720      	adds	r7, #32
    3a90:	46bd      	mov	sp, r7
    3a92:	bd80      	pop	{r7, pc}
    3a94:	000002ed 	.word	0x000002ed

00003a98 <_ZN12States_Class16saveCurrentStateEv>:


void States_Class::saveCurrentState(void){
    3a98:	b590      	push	{r4, r7, lr}
    3a9a:	b085      	sub	sp, #20
    3a9c:	af00      	add	r7, sp, #0
    3a9e:	6078      	str	r0, [r7, #4]
		calendar_date_time	cdt;
		calendar.GetDateTime(&cdt);
    3aa0:	f107 0308 	add.w	r3, r7, #8
    3aa4:	4619      	mov	r1, r3
    3aa6:	4819      	ldr	r0, [pc, #100]	; (3b0c <_ZN12States_Class16saveCurrentStateEv+0x74>)
    3aa8:	4b19      	ldr	r3, [pc, #100]	; (3b10 <_ZN12States_Class16saveCurrentStateEv+0x78>)
    3aaa:	4798      	blx	r3
		hvacState->dateTime=cdt;
    3aac:	687b      	ldr	r3, [r7, #4]
    3aae:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3ab2:	3308      	adds	r3, #8
    3ab4:	f107 0208 	add.w	r2, r7, #8
    3ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
    3abc:	e883 0003 	stmia.w	r3, {r0, r1}
		hvacState->now = calendar.convert_datetime_to_timestamp(&cdt);
    3ac0:	687b      	ldr	r3, [r7, #4]
    3ac2:	f8d3 439c 	ldr.w	r4, [r3, #924]	; 0x39c
    3ac6:	f107 0308 	add.w	r3, r7, #8
    3aca:	4619      	mov	r1, r3
    3acc:	480f      	ldr	r0, [pc, #60]	; (3b0c <_ZN12States_Class16saveCurrentStateEv+0x74>)
    3ace:	4b11      	ldr	r3, [pc, #68]	; (3b14 <_ZN12States_Class16saveCurrentStateEv+0x7c>)
    3ad0:	4798      	blx	r3
    3ad2:	4603      	mov	r3, r0
    3ad4:	6063      	str	r3, [r4, #4]
	if (hvacState->currentState!=kHVACStateMaintenance){
    3ad6:	687b      	ldr	r3, [r7, #4]
    3ad8:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ade:	f240 123d 	movw	r2, #317	; 0x13d
    3ae2:	4293      	cmp	r3, r2
    3ae4:	d00d      	beq.n	3b02 <_ZN12States_Class16saveCurrentStateEv+0x6a>
		memory.WriteFastCurrentState(staticCurrentState);
    3ae6:	490c      	ldr	r1, [pc, #48]	; (3b18 <_ZN12States_Class16saveCurrentStateEv+0x80>)
    3ae8:	480c      	ldr	r0, [pc, #48]	; (3b1c <_ZN12States_Class16saveCurrentStateEv+0x84>)
    3aea:	4b0d      	ldr	r3, [pc, #52]	; (3b20 <_ZN12States_Class16saveCurrentStateEv+0x88>)
    3aec:	4798      	blx	r3
		//memory.ReadFastApplicationState(lastState);
		if (hvacState->currentState==0)
    3aee:	687b      	ldr	r3, [r7, #4]
    3af0:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3af6:	2b00      	cmp	r3, #0
    3af8:	d103      	bne.n	3b02 <_ZN12States_Class16saveCurrentStateEv+0x6a>
		{
			memory.SaveApplicationState(staticCurrentState);
    3afa:	4907      	ldr	r1, [pc, #28]	; (3b18 <_ZN12States_Class16saveCurrentStateEv+0x80>)
    3afc:	4809      	ldr	r0, [pc, #36]	; (3b24 <_ZN12States_Class16saveCurrentStateEv+0x8c>)
    3afe:	4b0a      	ldr	r3, [pc, #40]	; (3b28 <_ZN12States_Class16saveCurrentStateEv+0x90>)
    3b00:	4798      	blx	r3
// 		 if (state.currentState > kGAINStateResume){
// 			 
// 			memory.clearWorkingStateForGAIN();
// 		 }
	}
}
    3b02:	bf00      	nop
    3b04:	3714      	adds	r7, #20
    3b06:	46bd      	mov	sp, r7
    3b08:	bd90      	pop	{r4, r7, pc}
    3b0a:	bf00      	nop
    3b0c:	2000a278 	.word	0x2000a278
    3b10:	00016cbd 	.word	0x00016cbd
    3b14:	00016dad 	.word	0x00016dad
    3b18:	20008360 	.word	0x20008360
    3b1c:	20002f00 	.word	0x20002f00
    3b20:	0000175d 	.word	0x0000175d
    3b24:	20002880 	.word	0x20002880
    3b28:	000025fd 	.word	0x000025fd

00003b2c <_ZN12States_Class4StopEh>:


uint8_t	States_Class::Stop(uint8_t	layer){
    3b2c:	b580      	push	{r7, lr}
    3b2e:	b082      	sub	sp, #8
    3b30:	af00      	add	r7, sp, #0
    3b32:	6078      	str	r0, [r7, #4]
    3b34:	460b      	mov	r3, r1
    3b36:	70fb      	strb	r3, [r7, #3]
		if (layer==0)
    3b38:	78fb      	ldrb	r3, [r7, #3]
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	d10d      	bne.n	3b5a <_ZN12States_Class4StopEh+0x2e>
		{
			usb<<"Air Conditioning System Stopped"<<NEWLINE;
    3b3e:	4909      	ldr	r1, [pc, #36]	; (3b64 <_ZN12States_Class4StopEh+0x38>)
    3b40:	4809      	ldr	r0, [pc, #36]	; (3b68 <_ZN12States_Class4StopEh+0x3c>)
    3b42:	4b0a      	ldr	r3, [pc, #40]	; (3b6c <_ZN12States_Class4StopEh+0x40>)
    3b44:	4798      	blx	r3
    3b46:	4603      	mov	r3, r0
    3b48:	4909      	ldr	r1, [pc, #36]	; (3b70 <_ZN12States_Class4StopEh+0x44>)
    3b4a:	4618      	mov	r0, r3
    3b4c:	4b09      	ldr	r3, [pc, #36]	; (3b74 <_ZN12States_Class4StopEh+0x48>)
    3b4e:	4798      	blx	r3
			delay_ms(100);
    3b50:	2064      	movs	r0, #100	; 0x64
    3b52:	4b09      	ldr	r3, [pc, #36]	; (3b78 <_ZN12States_Class4StopEh+0x4c>)
    3b54:	4798      	blx	r3
			return layer;
    3b56:	78fb      	ldrb	r3, [r7, #3]
    3b58:	e000      	b.n	3b5c <_ZN12States_Class4StopEh+0x30>
		}
	return	layer;
    3b5a:	78fb      	ldrb	r3, [r7, #3]
}
    3b5c:	4618      	mov	r0, r3
    3b5e:	3708      	adds	r7, #8
    3b60:	46bd      	mov	sp, r7
    3b62:	bd80      	pop	{r7, pc}
    3b64:	000200d4 	.word	0x000200d4
    3b68:	200082dc 	.word	0x200082dc
    3b6c:	00003d2d 	.word	0x00003d2d
    3b70:	0002000c 	.word	0x0002000c
    3b74:	00000afd 	.word	0x00000afd
    3b78:	00005fa1 	.word	0x00005fa1

00003b7c <_ZN12States_Class15GetCurrentStateER9HVACState>:

void	States_Class::GetCurrentConfiguration(ConfigurationData *cd){
	cd=&configuration;
}
void	States_Class::GetCurrentState(HVACState& hs){
    3b7c:	b580      	push	{r7, lr}
    3b7e:	b082      	sub	sp, #8
    3b80:	af00      	add	r7, sp, #0
    3b82:	6078      	str	r0, [r7, #4]
    3b84:	6039      	str	r1, [r7, #0]
	hs=*hvacState;
    3b86:	687b      	ldr	r3, [r7, #4]
    3b88:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3b8c:	683a      	ldr	r2, [r7, #0]
    3b8e:	4610      	mov	r0, r2
    3b90:	4619      	mov	r1, r3
    3b92:	2370      	movs	r3, #112	; 0x70
    3b94:	461a      	mov	r2, r3
    3b96:	4b03      	ldr	r3, [pc, #12]	; (3ba4 <_ZN12States_Class15GetCurrentStateER9HVACState+0x28>)
    3b98:	4798      	blx	r3
}
    3b9a:	bf00      	nop
    3b9c:	3708      	adds	r7, #8
    3b9e:	46bd      	mov	sp, r7
    3ba0:	bd80      	pop	{r7, pc}
    3ba2:	bf00      	nop
    3ba4:	0001bc05 	.word	0x0001bc05

00003ba8 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData>:
void	States_Class::SetConfigurationData(ConfigurationData& cd){
    3ba8:	b580      	push	{r7, lr}
    3baa:	b082      	sub	sp, #8
    3bac:	af00      	add	r7, sp, #0
    3bae:	6078      	str	r0, [r7, #4]
    3bb0:	6039      	str	r1, [r7, #0]
	configuration=cd;
    3bb2:	687b      	ldr	r3, [r7, #4]
    3bb4:	683a      	ldr	r2, [r7, #0]
    3bb6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    3bba:	4611      	mov	r1, r2
    3bbc:	22ac      	movs	r2, #172	; 0xac
    3bbe:	4618      	mov	r0, r3
    3bc0:	4b02      	ldr	r3, [pc, #8]	; (3bcc <_ZN12States_Class20SetConfigurationDataER17ConfigurationData+0x24>)
    3bc2:	4798      	blx	r3
}
    3bc4:	bf00      	nop
    3bc6:	3708      	adds	r7, #8
    3bc8:	46bd      	mov	sp, r7
    3bca:	bd80      	pop	{r7, pc}
    3bcc:	0001bc05 	.word	0x0001bc05

00003bd0 <_ZN12States_Class15SetCurrentStateER9HVACState>:
void	States_Class::SetCurrentState(HVACState& hs){
    3bd0:	b580      	push	{r7, lr}
    3bd2:	b082      	sub	sp, #8
    3bd4:	af00      	add	r7, sp, #0
    3bd6:	6078      	str	r0, [r7, #4]
    3bd8:	6039      	str	r1, [r7, #0]
	staticCurrentState=hs;
    3bda:	4a06      	ldr	r2, [pc, #24]	; (3bf4 <_ZN12States_Class15SetCurrentStateER9HVACState+0x24>)
    3bdc:	683b      	ldr	r3, [r7, #0]
    3bde:	4610      	mov	r0, r2
    3be0:	4619      	mov	r1, r3
    3be2:	2370      	movs	r3, #112	; 0x70
    3be4:	461a      	mov	r2, r3
    3be6:	4b04      	ldr	r3, [pc, #16]	; (3bf8 <_ZN12States_Class15SetCurrentStateER9HVACState+0x28>)
    3be8:	4798      	blx	r3
}
    3bea:	bf00      	nop
    3bec:	3708      	adds	r7, #8
    3bee:	46bd      	mov	sp, r7
    3bf0:	bd80      	pop	{r7, pc}
    3bf2:	bf00      	nop
    3bf4:	20008360 	.word	0x20008360
    3bf8:	0001bc05 	.word	0x0001bc05

00003bfc <_ZN12States_Class16SetCRCConfigDataEv>:
void	States_Class::SetCRCConfigData(void){
    3bfc:	b580      	push	{r7, lr}
    3bfe:	b082      	sub	sp, #8
    3c00:	af00      	add	r7, sp, #0
    3c02:	6078      	str	r0, [r7, #4]
	CRC32=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&factoryDefaultsConfiguration),sizeof(factoryDefaultsConfiguration));
    3c04:	22ac      	movs	r2, #172	; 0xac
    3c06:	4906      	ldr	r1, [pc, #24]	; (3c20 <_ZN12States_Class16SetCRCConfigDataEv+0x24>)
    3c08:	4806      	ldr	r0, [pc, #24]	; (3c24 <_ZN12States_Class16SetCRCConfigDataEv+0x28>)
    3c0a:	4b07      	ldr	r3, [pc, #28]	; (3c28 <_ZN12States_Class16SetCRCConfigDataEv+0x2c>)
    3c0c:	4798      	blx	r3
    3c0e:	4602      	mov	r2, r0
    3c10:	687b      	ldr	r3, [r7, #4]
    3c12:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
}
    3c16:	bf00      	nop
    3c18:	3708      	adds	r7, #8
    3c1a:	46bd      	mov	sp, r7
    3c1c:	bd80      	pop	{r7, pc}
    3c1e:	bf00      	nop
    3c20:	0001fa10 	.word	0x0001fa10
    3c24:	20002d6c 	.word	0x20002d6c
    3c28:	000013ad 	.word	0x000013ad

00003c2c <_ZN12States_Class19ExecutePeriodicTaskEv>:
uint32_t	States_Class::GetStatus(HVACStatus& s){
	s=hvacState->hvacStatus;
	return	hvacState->hvacStatus.rawStatus;
}
void States_Class::ExecutePeriodicTask(void){
    3c2c:	b580      	push	{r7, lr}
    3c2e:	b082      	sub	sp, #8
    3c30:	af00      	add	r7, sp, #0
    3c32:	6078      	str	r0, [r7, #4]
	arinc.SaveStatus(ConvertStatusArincLabel());
    3c34:	687b      	ldr	r3, [r7, #4]
    3c36:	4618      	mov	r0, r3
    3c38:	4b05      	ldr	r3, [pc, #20]	; (3c50 <_ZN12States_Class19ExecutePeriodicTaskEv+0x24>)
    3c3a:	4798      	blx	r3
    3c3c:	4603      	mov	r3, r0
    3c3e:	4619      	mov	r1, r3
    3c40:	4804      	ldr	r0, [pc, #16]	; (3c54 <_ZN12States_Class19ExecutePeriodicTaskEv+0x28>)
    3c42:	4b05      	ldr	r3, [pc, #20]	; (3c58 <_ZN12States_Class19ExecutePeriodicTaskEv+0x2c>)
    3c44:	4798      	blx	r3
}
    3c46:	bf00      	nop
    3c48:	3708      	adds	r7, #8
    3c4a:	46bd      	mov	sp, r7
    3c4c:	bd80      	pop	{r7, pc}
    3c4e:	bf00      	nop
    3c50:	00001091 	.word	0x00001091
    3c54:	20009128 	.word	0x20009128
    3c58:	00012d99 	.word	0x00012d99

00003c5c <_ZN12States_Class11CheckEventsEv>:

void States_Class::CheckEvents(void){
    3c5c:	b580      	push	{r7, lr}
    3c5e:	b084      	sub	sp, #16
    3c60:	af00      	add	r7, sp, #0
	event e;
    3c62:	463b      	mov	r3, r7
    3c64:	4618      	mov	r0, r3
    3c66:	4b1f      	ldr	r3, [pc, #124]	; (3ce4 <_ZN12States_Class11CheckEventsEv+0x88>)
    3c68:	4798      	blx	r3
	hvac.ExecutePeriodicTask();
    3c6a:	481f      	ldr	r0, [pc, #124]	; (3ce8 <_ZN12States_Class11CheckEventsEv+0x8c>)
    3c6c:	4b1f      	ldr	r3, [pc, #124]	; (3cec <_ZN12States_Class11CheckEventsEv+0x90>)
    3c6e:	4798      	blx	r3
	if (interfaces.IsCommunicationRequest())
    3c70:	481f      	ldr	r0, [pc, #124]	; (3cf0 <_ZN12States_Class11CheckEventsEv+0x94>)
    3c72:	4b20      	ldr	r3, [pc, #128]	; (3cf4 <_ZN12States_Class11CheckEventsEv+0x98>)
    3c74:	4798      	blx	r3
	{
		//e.eventClass=kALUEventClass;
	//	e.eventType=(EventType)kALUEventCheckCommunication;
		
	}
	if ((hvac.hvacState->currentState==kHVACStateStandbyOFF)&&(alu.taskList->head)){
    3c76:	4b1c      	ldr	r3, [pc, #112]	; (3ce8 <_ZN12States_Class11CheckEventsEv+0x8c>)
    3c78:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    3c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3c7e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
    3c82:	d10b      	bne.n	3c9c <_ZN12States_Class11CheckEventsEv+0x40>
    3c84:	4b1c      	ldr	r3, [pc, #112]	; (3cf8 <_ZN12States_Class11CheckEventsEv+0x9c>)
    3c86:	681b      	ldr	r3, [r3, #0]
    3c88:	681b      	ldr	r3, [r3, #0]
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d006      	beq.n	3c9c <_ZN12States_Class11CheckEventsEv+0x40>
	
		e.eventType=kHVACEventDoPendingTasks;
    3c8e:	2303      	movs	r3, #3
    3c90:	807b      	strh	r3, [r7, #2]
		listener.SendEventSelf(e);
    3c92:	463b      	mov	r3, r7
    3c94:	4619      	mov	r1, r3
    3c96:	4819      	ldr	r0, [pc, #100]	; (3cfc <_ZN12States_Class11CheckEventsEv+0xa0>)
    3c98:	4b19      	ldr	r3, [pc, #100]	; (3d00 <_ZN12States_Class11CheckEventsEv+0xa4>)
    3c9a:	4798      	blx	r3

	}
	if (alu.arincTXTimeUP){
    3c9c:	4b16      	ldr	r3, [pc, #88]	; (3cf8 <_ZN12States_Class11CheckEventsEv+0x9c>)
    3c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    3ca2:	b2db      	uxtb	r3, r3
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d018      	beq.n	3cda <_ZN12States_Class11CheckEventsEv+0x7e>
		if ((!alu.IsListedTask(kALUTaskArincTXMessage)))
    3ca8:	2102      	movs	r1, #2
    3caa:	4813      	ldr	r0, [pc, #76]	; (3cf8 <_ZN12States_Class11CheckEventsEv+0x9c>)
    3cac:	4b15      	ldr	r3, [pc, #84]	; (3d04 <_ZN12States_Class11CheckEventsEv+0xa8>)
    3cae:	4798      	blx	r3
    3cb0:	4603      	mov	r3, r0
    3cb2:	f083 0301 	eor.w	r3, r3, #1
    3cb6:	b2db      	uxtb	r3, r3
    3cb8:	2b00      	cmp	r3, #0
    3cba:	d004      	beq.n	3cc6 <_ZN12States_Class11CheckEventsEv+0x6a>
		{
			alu.PrepareNewTask(kALUTaskArincTXMessage);
    3cbc:	2200      	movs	r2, #0
    3cbe:	2102      	movs	r1, #2
    3cc0:	480d      	ldr	r0, [pc, #52]	; (3cf8 <_ZN12States_Class11CheckEventsEv+0x9c>)
    3cc2:	4b11      	ldr	r3, [pc, #68]	; (3d08 <_ZN12States_Class11CheckEventsEv+0xac>)
    3cc4:	4798      	blx	r3
		else
		{
			
		}
		
		e.eventClass=kALUEventClass;
    3cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3cca:	803b      	strh	r3, [r7, #0]
		e.eventType=kHVACEventDoPendingTasks;
    3ccc:	2303      	movs	r3, #3
    3cce:	807b      	strh	r3, [r7, #2]
		listener.SendEventSelf(e);
    3cd0:	463b      	mov	r3, r7
    3cd2:	4619      	mov	r1, r3
    3cd4:	4809      	ldr	r0, [pc, #36]	; (3cfc <_ZN12States_Class11CheckEventsEv+0xa0>)
    3cd6:	4b0a      	ldr	r3, [pc, #40]	; (3d00 <_ZN12States_Class11CheckEventsEv+0xa4>)
    3cd8:	4798      	blx	r3
	}
		

}
    3cda:	bf00      	nop
    3cdc:	3710      	adds	r7, #16
    3cde:	46bd      	mov	sp, r7
    3ce0:	bd80      	pop	{r7, pc}
    3ce2:	bf00      	nop
    3ce4:	000002ed 	.word	0x000002ed
    3ce8:	200083d0 	.word	0x200083d0
    3cec:	00003c2d 	.word	0x00003c2d
    3cf0:	20001714 	.word	0x20001714
    3cf4:	00001c61 	.word	0x00001c61
    3cf8:	20000ce8 	.word	0x20000ce8
    3cfc:	20009ca4 	.word	0x20009ca4
    3d00:	00014c49 	.word	0x00014c49
    3d04:	00004209 	.word	0x00004209
    3d08:	000008a5 	.word	0x000008a5

00003d0c <_ZlsIA34_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3d0c:	b580      	push	{r7, lr}
    3d0e:	b082      	sub	sp, #8
    3d10:	af00      	add	r7, sp, #0
    3d12:	6078      	str	r0, [r7, #4]
    3d14:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3d16:	6839      	ldr	r1, [r7, #0]
    3d18:	6878      	ldr	r0, [r7, #4]
    3d1a:	4b03      	ldr	r3, [pc, #12]	; (3d28 <_ZlsIA34_cER5PrintS2_RKT_+0x1c>)
    3d1c:	4798      	blx	r3
    3d1e:	687b      	ldr	r3, [r7, #4]
    3d20:	4618      	mov	r0, r3
    3d22:	3708      	adds	r7, #8
    3d24:	46bd      	mov	sp, r7
    3d26:	bd80      	pop	{r7, pc}
    3d28:	00017dfd 	.word	0x00017dfd

00003d2c <_ZlsIA32_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3d2c:	b580      	push	{r7, lr}
    3d2e:	b082      	sub	sp, #8
    3d30:	af00      	add	r7, sp, #0
    3d32:	6078      	str	r0, [r7, #4]
    3d34:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3d36:	6839      	ldr	r1, [r7, #0]
    3d38:	6878      	ldr	r0, [r7, #4]
    3d3a:	4b03      	ldr	r3, [pc, #12]	; (3d48 <_ZlsIA32_cER5PrintS2_RKT_+0x1c>)
    3d3c:	4798      	blx	r3
    3d3e:	687b      	ldr	r3, [r7, #4]
    3d40:	4618      	mov	r0, r3
    3d42:	3708      	adds	r7, #8
    3d44:	46bd      	mov	sp, r7
    3d46:	bd80      	pop	{r7, pc}
    3d48:	00017dfd 	.word	0x00017dfd

00003d4c <_ZlsIA42_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3d4c:	b580      	push	{r7, lr}
    3d4e:	b082      	sub	sp, #8
    3d50:	af00      	add	r7, sp, #0
    3d52:	6078      	str	r0, [r7, #4]
    3d54:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3d56:	6839      	ldr	r1, [r7, #0]
    3d58:	6878      	ldr	r0, [r7, #4]
    3d5a:	4b03      	ldr	r3, [pc, #12]	; (3d68 <_ZlsIA42_cER5PrintS2_RKT_+0x1c>)
    3d5c:	4798      	blx	r3
    3d5e:	687b      	ldr	r3, [r7, #4]
    3d60:	4618      	mov	r0, r3
    3d62:	3708      	adds	r7, #8
    3d64:	46bd      	mov	sp, r7
    3d66:	bd80      	pop	{r7, pc}
    3d68:	00017dfd 	.word	0x00017dfd

00003d6c <_ZlsIA5_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3d6c:	b580      	push	{r7, lr}
    3d6e:	b082      	sub	sp, #8
    3d70:	af00      	add	r7, sp, #0
    3d72:	6078      	str	r0, [r7, #4]
    3d74:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3d76:	6839      	ldr	r1, [r7, #0]
    3d78:	6878      	ldr	r0, [r7, #4]
    3d7a:	4b03      	ldr	r3, [pc, #12]	; (3d88 <_ZlsIA5_cER5PrintS2_RKT_+0x1c>)
    3d7c:	4798      	blx	r3
    3d7e:	687b      	ldr	r3, [r7, #4]
    3d80:	4618      	mov	r0, r3
    3d82:	3708      	adds	r7, #8
    3d84:	46bd      	mov	sp, r7
    3d86:	bd80      	pop	{r7, pc}
    3d88:	00017dfd 	.word	0x00017dfd

00003d8c <_ZlsIA35_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3d8c:	b580      	push	{r7, lr}
    3d8e:	b082      	sub	sp, #8
    3d90:	af00      	add	r7, sp, #0
    3d92:	6078      	str	r0, [r7, #4]
    3d94:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3d96:	6839      	ldr	r1, [r7, #0]
    3d98:	6878      	ldr	r0, [r7, #4]
    3d9a:	4b03      	ldr	r3, [pc, #12]	; (3da8 <_ZlsIA35_cER5PrintS2_RKT_+0x1c>)
    3d9c:	4798      	blx	r3
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	4618      	mov	r0, r3
    3da2:	3708      	adds	r7, #8
    3da4:	46bd      	mov	sp, r7
    3da6:	bd80      	pop	{r7, pc}
    3da8:	00017dfd 	.word	0x00017dfd

00003dac <_ZlsIA28_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3dac:	b580      	push	{r7, lr}
    3dae:	b082      	sub	sp, #8
    3db0:	af00      	add	r7, sp, #0
    3db2:	6078      	str	r0, [r7, #4]
    3db4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3db6:	6839      	ldr	r1, [r7, #0]
    3db8:	6878      	ldr	r0, [r7, #4]
    3dba:	4b03      	ldr	r3, [pc, #12]	; (3dc8 <_ZlsIA28_cER5PrintS2_RKT_+0x1c>)
    3dbc:	4798      	blx	r3
    3dbe:	687b      	ldr	r3, [r7, #4]
    3dc0:	4618      	mov	r0, r3
    3dc2:	3708      	adds	r7, #8
    3dc4:	46bd      	mov	sp, r7
    3dc6:	bd80      	pop	{r7, pc}
    3dc8:	00017dfd 	.word	0x00017dfd

00003dcc <_Z41__static_initialization_and_destruction_0ii>:


    3dcc:	b580      	push	{r7, lr}
    3dce:	b082      	sub	sp, #8
    3dd0:	af00      	add	r7, sp, #0
    3dd2:	6078      	str	r0, [r7, #4]
    3dd4:	6039      	str	r1, [r7, #0]
    3dd6:	687b      	ldr	r3, [r7, #4]
    3dd8:	2b01      	cmp	r3, #1
    3dda:	d124      	bne.n	3e26 <_Z41__static_initialization_and_destruction_0ii+0x5a>
    3ddc:	683b      	ldr	r3, [r7, #0]
    3dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3de2:	4293      	cmp	r3, r2
    3de4:	d11f      	bne.n	3e26 <_Z41__static_initialization_and_destruction_0ii+0x5a>
    3de6:	4812      	ldr	r0, [pc, #72]	; (3e30 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    3de8:	4b12      	ldr	r3, [pc, #72]	; (3e34 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    3dea:	4798      	blx	r3
    3dec:	4a12      	ldr	r2, [pc, #72]	; (3e38 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    3dee:	4913      	ldr	r1, [pc, #76]	; (3e3c <_Z41__static_initialization_and_destruction_0ii+0x70>)
    3df0:	480f      	ldr	r0, [pc, #60]	; (3e30 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    3df2:	4b13      	ldr	r3, [pc, #76]	; (3e40 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    3df4:	4798      	blx	r3
    3df6:	4813      	ldr	r0, [pc, #76]	; (3e44 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    3df8:	4b13      	ldr	r3, [pc, #76]	; (3e48 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    3dfa:	4798      	blx	r3
    3dfc:	4a0e      	ldr	r2, [pc, #56]	; (3e38 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    3dfe:	4913      	ldr	r1, [pc, #76]	; (3e4c <_Z41__static_initialization_and_destruction_0ii+0x80>)
    3e00:	4810      	ldr	r0, [pc, #64]	; (3e44 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    3e02:	4b0f      	ldr	r3, [pc, #60]	; (3e40 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    3e04:	4798      	blx	r3
    3e06:	4812      	ldr	r0, [pc, #72]	; (3e50 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    3e08:	4b12      	ldr	r3, [pc, #72]	; (3e54 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    3e0a:	4798      	blx	r3
    3e0c:	4a0a      	ldr	r2, [pc, #40]	; (3e38 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    3e0e:	4912      	ldr	r1, [pc, #72]	; (3e58 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    3e10:	480f      	ldr	r0, [pc, #60]	; (3e50 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    3e12:	4b0b      	ldr	r3, [pc, #44]	; (3e40 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    3e14:	4798      	blx	r3
    3e16:	4811      	ldr	r0, [pc, #68]	; (3e5c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    3e18:	4b11      	ldr	r3, [pc, #68]	; (3e60 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    3e1a:	4798      	blx	r3
    3e1c:	4a06      	ldr	r2, [pc, #24]	; (3e38 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    3e1e:	4911      	ldr	r1, [pc, #68]	; (3e64 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    3e20:	480e      	ldr	r0, [pc, #56]	; (3e5c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    3e22:	4b07      	ldr	r3, [pc, #28]	; (3e40 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    3e24:	4798      	blx	r3
    3e26:	bf00      	nop
    3e28:	3708      	adds	r7, #8
    3e2a:	46bd      	mov	sp, r7
    3e2c:	bd80      	pop	{r7, pc}
    3e2e:	bf00      	nop
    3e30:	200082dc 	.word	0x200082dc
    3e34:	000178dd 	.word	0x000178dd
    3e38:	20000000 	.word	0x20000000
    3e3c:	00017925 	.word	0x00017925
    3e40:	0001949d 	.word	0x0001949d
    3e44:	2000833c 	.word	0x2000833c
    3e48:	00002b11 	.word	0x00002b11
    3e4c:	00002b2b 	.word	0x00002b2b
    3e50:	20008350 	.word	0x20008350
    3e54:	00000e35 	.word	0x00000e35
    3e58:	00000e4f 	.word	0x00000e4f
    3e5c:	200083d0 	.word	0x200083d0
    3e60:	00002db1 	.word	0x00002db1
    3e64:	00002e25 	.word	0x00002e25

00003e68 <_GLOBAL__sub_I_ptrStatesClass>:
    3e68:	b580      	push	{r7, lr}
    3e6a:	af00      	add	r7, sp, #0
    3e6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3e70:	2001      	movs	r0, #1
    3e72:	4b01      	ldr	r3, [pc, #4]	; (3e78 <_GLOBAL__sub_I_ptrStatesClass+0x10>)
    3e74:	4798      	blx	r3
    3e76:	bd80      	pop	{r7, pc}
    3e78:	00003dcd 	.word	0x00003dcd

00003e7c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    3e7c:	b480      	push	{r7}
    3e7e:	b083      	sub	sp, #12
    3e80:	af00      	add	r7, sp, #0
    3e82:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    3e84:	687b      	ldr	r3, [r7, #4]
    3e86:	681b      	ldr	r3, [r3, #0]
}
    3e88:	4618      	mov	r0, r3
    3e8a:	370c      	adds	r7, #12
    3e8c:	46bd      	mov	sp, r7
    3e8e:	bc80      	pop	{r7}
    3e90:	4770      	bx	lr
	...

00003e94 <_ZN17TaskHandler_ClassC1Ev>:
//static TaskHandler_Class	taskStorage[MAXIMUM_TASKS];
//list_descriptor		taskStorage;
static	ControllerTask	taskStorage[MAXIMUM_TASKS];
static	list_element	listElements[MAXIMUM_TASKS];
// default constructor
TaskHandler_Class::TaskHandler_Class()
    3e94:	b480      	push	{r7}
    3e96:	b083      	sub	sp, #12
    3e98:	af00      	add	r7, sp, #0
    3e9a:	6078      	str	r0, [r7, #4]
{
	taskListPrivate=(list_descriptor*)listElements;
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	4a04      	ldr	r2, [pc, #16]	; (3eb0 <_ZN17TaskHandler_ClassC1Ev+0x1c>)
    3ea0:	60da      	str	r2, [r3, #12]
	//taskList->head->next=NULL;
	
	//task->id=(ALUTaskEnum)0;


} //TaskHandler_Class
    3ea2:	687b      	ldr	r3, [r7, #4]
    3ea4:	4618      	mov	r0, r3
    3ea6:	370c      	adds	r7, #12
    3ea8:	46bd      	mov	sp, r7
    3eaa:	bc80      	pop	{r7}
    3eac:	4770      	bx	lr
    3eae:	bf00      	nop
    3eb0:	20008900 	.word	0x20008900

00003eb4 <_ZN17TaskHandler_ClassD1Ev>:

// default destructor
TaskHandler_Class::~TaskHandler_Class()
    3eb4:	b480      	push	{r7}
    3eb6:	b083      	sub	sp, #12
    3eb8:	af00      	add	r7, sp, #0
    3eba:	6078      	str	r0, [r7, #4]
{
} //~TaskHandler_Class
    3ebc:	687b      	ldr	r3, [r7, #4]
    3ebe:	4618      	mov	r0, r3
    3ec0:	370c      	adds	r7, #12
    3ec2:	46bd      	mov	sp, r7
    3ec4:	bc80      	pop	{r7}
    3ec6:	4770      	bx	lr

00003ec8 <_ZN17TaskHandler_Class13InitTaskArrayEv>:

void TaskHandler_Class::InitTaskArray(void){
    3ec8:	b480      	push	{r7}
    3eca:	b083      	sub	sp, #12
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
	for (i=1; i<MAXIMUM_TASKS; i++)
    3ed0:	687b      	ldr	r3, [r7, #4]
    3ed2:	2201      	movs	r2, #1
    3ed4:	721a      	strb	r2, [r3, #8]
    3ed6:	687b      	ldr	r3, [r7, #4]
    3ed8:	7a1b      	ldrb	r3, [r3, #8]
    3eda:	2b0a      	cmp	r3, #10
    3edc:	dc31      	bgt.n	3f42 <_ZN17TaskHandler_Class13InitTaskArrayEv+0x7a>
	{
		taskStorage[i].elem.next = (list_element*)NULL;
    3ede:	687b      	ldr	r3, [r7, #4]
    3ee0:	7a1b      	ldrb	r3, [r3, #8]
    3ee2:	4619      	mov	r1, r3
    3ee4:	4b20      	ldr	r3, [pc, #128]	; (3f68 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    3ee6:	2200      	movs	r2, #0
    3ee8:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
		taskStorage[i].id=kALUNotTaskEvent;
    3eec:	687b      	ldr	r3, [r7, #4]
    3eee:	7a1b      	ldrb	r3, [r3, #8]
    3ef0:	4a1d      	ldr	r2, [pc, #116]	; (3f68 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    3ef2:	00db      	lsls	r3, r3, #3
    3ef4:	4413      	add	r3, r2
    3ef6:	2200      	movs	r2, #0
    3ef8:	711a      	strb	r2, [r3, #4]
		taskStorage[i-1].elem.next = &taskStorage[i].elem;
    3efa:	687b      	ldr	r3, [r7, #4]
    3efc:	7a1b      	ldrb	r3, [r3, #8]
    3efe:	3b01      	subs	r3, #1
    3f00:	687a      	ldr	r2, [r7, #4]
    3f02:	7a12      	ldrb	r2, [r2, #8]
    3f04:	00d2      	lsls	r2, r2, #3
    3f06:	4918      	ldr	r1, [pc, #96]	; (3f68 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    3f08:	440a      	add	r2, r1
    3f0a:	4917      	ldr	r1, [pc, #92]	; (3f68 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    3f0c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		listElements[i].next = (list_element*)NULL;
    3f10:	687b      	ldr	r3, [r7, #4]
    3f12:	7a1b      	ldrb	r3, [r3, #8]
    3f14:	4619      	mov	r1, r3
    3f16:	4b15      	ldr	r3, [pc, #84]	; (3f6c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    3f18:	2200      	movs	r2, #0
    3f1a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		listElements[i-1].next = &listElements[i];
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	7a1b      	ldrb	r3, [r3, #8]
    3f22:	3b01      	subs	r3, #1
    3f24:	687a      	ldr	r2, [r7, #4]
    3f26:	7a12      	ldrb	r2, [r2, #8]
    3f28:	0092      	lsls	r2, r2, #2
    3f2a:	4910      	ldr	r1, [pc, #64]	; (3f6c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    3f2c:	440a      	add	r2, r1
    3f2e:	490f      	ldr	r1, [pc, #60]	; (3f6c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    3f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=1; i<MAXIMUM_TASKS; i++)
    3f34:	687b      	ldr	r3, [r7, #4]
    3f36:	7a1b      	ldrb	r3, [r3, #8]
    3f38:	3301      	adds	r3, #1
    3f3a:	b2da      	uxtb	r2, r3
    3f3c:	687b      	ldr	r3, [r7, #4]
    3f3e:	721a      	strb	r2, [r3, #8]
    3f40:	e7c9      	b.n	3ed6 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xe>
	}
	taskListPrivate->head->next=NULL;
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	68db      	ldr	r3, [r3, #12]
    3f46:	681b      	ldr	r3, [r3, #0]
    3f48:	2200      	movs	r2, #0
    3f4a:	601a      	str	r2, [r3, #0]
	taskListPrivate->head=NULL;
    3f4c:	687b      	ldr	r3, [r7, #4]
    3f4e:	68db      	ldr	r3, [r3, #12]
    3f50:	2200      	movs	r2, #0
    3f52:	601a      	str	r2, [r3, #0]

		//taskList->head->next=NULL;
		taskList=taskListPrivate;
    3f54:	687b      	ldr	r3, [r7, #4]
    3f56:	68da      	ldr	r2, [r3, #12]
    3f58:	687b      	ldr	r3, [r7, #4]
    3f5a:	601a      	str	r2, [r3, #0]
}
    3f5c:	bf00      	nop
    3f5e:	370c      	adds	r7, #12
    3f60:	46bd      	mov	sp, r7
    3f62:	bc80      	pop	{r7}
    3f64:	4770      	bx	lr
    3f66:	bf00      	nop
    3f68:	200088a8 	.word	0x200088a8
    3f6c:	20008900 	.word	0x20008900

00003f70 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask>:
		return ERR_ALREADY_INITIALIZED;
	}
	AddALUTask(taskListPrivate,task);
	return ERR_NONE;
}
int TaskHandler_Class::AddTask(ControllerTask& tk ){
    3f70:	b580      	push	{r7, lr}
    3f72:	b082      	sub	sp, #8
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
    3f78:	6039      	str	r1, [r7, #0]
	if (IsNotDeclaredTask(tk))
    3f7a:	6839      	ldr	r1, [r7, #0]
    3f7c:	6878      	ldr	r0, [r7, #4]
    3f7e:	4b22      	ldr	r3, [pc, #136]	; (4008 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x98>)
    3f80:	4798      	blx	r3
    3f82:	4603      	mov	r3, r0
    3f84:	2b00      	cmp	r3, #0
    3f86:	d039      	beq.n	3ffc <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x8c>
	{
		ChooseAvailableTask();
    3f88:	6878      	ldr	r0, [r7, #4]
    3f8a:	4b20      	ldr	r3, [pc, #128]	; (400c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x9c>)
    3f8c:	4798      	blx	r3
		task->elem=tk.elem;
    3f8e:	687b      	ldr	r3, [r7, #4]
    3f90:	685b      	ldr	r3, [r3, #4]
    3f92:	683a      	ldr	r2, [r7, #0]
    3f94:	6812      	ldr	r2, [r2, #0]
    3f96:	601a      	str	r2, [r3, #0]
		task->id=tk.id;
    3f98:	687b      	ldr	r3, [r7, #4]
    3f9a:	685b      	ldr	r3, [r3, #4]
    3f9c:	683a      	ldr	r2, [r7, #0]
    3f9e:	7912      	ldrb	r2, [r2, #4]
    3fa0:	711a      	strb	r2, [r3, #4]
		task->prio=tk.prio;
    3fa2:	687b      	ldr	r3, [r7, #4]
    3fa4:	685b      	ldr	r3, [r3, #4]
    3fa6:	683a      	ldr	r2, [r7, #0]
    3fa8:	7952      	ldrb	r2, [r2, #5]
    3faa:	715a      	strb	r2, [r3, #5]
		ASSERT((taskListPrivate)&&(task));
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	68db      	ldr	r3, [r3, #12]
    3fb0:	2b00      	cmp	r3, #0
    3fb2:	d005      	beq.n	3fc0 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	685b      	ldr	r3, [r3, #4]
    3fb8:	2b00      	cmp	r3, #0
    3fba:	d001      	beq.n	3fc0 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    3fbc:	2301      	movs	r3, #1
    3fbe:	e000      	b.n	3fc2 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x52>
    3fc0:	2300      	movs	r3, #0
    3fc2:	2242      	movs	r2, #66	; 0x42
    3fc4:	4912      	ldr	r1, [pc, #72]	; (4010 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa0>)
    3fc6:	4618      	mov	r0, r3
    3fc8:	4b12      	ldr	r3, [pc, #72]	; (4014 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa4>)
    3fca:	4798      	blx	r3
		if (is_list_element(taskListPrivate,task)) {
    3fcc:	687b      	ldr	r3, [r7, #4]
    3fce:	68da      	ldr	r2, [r3, #12]
    3fd0:	687b      	ldr	r3, [r7, #4]
    3fd2:	685b      	ldr	r3, [r3, #4]
    3fd4:	4619      	mov	r1, r3
    3fd6:	4610      	mov	r0, r2
    3fd8:	4b0f      	ldr	r3, [pc, #60]	; (4018 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa8>)
    3fda:	4798      	blx	r3
    3fdc:	4603      	mov	r3, r0
    3fde:	2b00      	cmp	r3, #0
    3fe0:	d002      	beq.n	3fe8 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x78>

			//ASSERT(false);
			return ERR_ALREADY_INITIALIZED;
    3fe2:	f06f 0311 	mvn.w	r3, #17
    3fe6:	e00b      	b.n	4000 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x90>
		}
		AddALUTask(taskListPrivate,task);
    3fe8:	687b      	ldr	r3, [r7, #4]
    3fea:	68d9      	ldr	r1, [r3, #12]
    3fec:	687b      	ldr	r3, [r7, #4]
    3fee:	685b      	ldr	r3, [r3, #4]
    3ff0:	461a      	mov	r2, r3
    3ff2:	6878      	ldr	r0, [r7, #4]
    3ff4:	4b09      	ldr	r3, [pc, #36]	; (401c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xac>)
    3ff6:	4798      	blx	r3
		return ERR_NONE;
    3ff8:	2300      	movs	r3, #0
    3ffa:	e001      	b.n	4000 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x90>
	}else{
		return ERR_ALREADY_INITIALIZED;
    3ffc:	f06f 0311 	mvn.w	r3, #17
	}
	
}
    4000:	4618      	mov	r0, r3
    4002:	3708      	adds	r7, #8
    4004:	46bd      	mov	sp, r7
    4006:	bd80      	pop	{r7, pc}
    4008:	000041b9 	.word	0x000041b9
    400c:	0000414d 	.word	0x0000414d
    4010:	00020100 	.word	0x00020100
    4014:	00007d5d 	.word	0x00007d5d
    4018:	00007d85 	.word	0x00007d85
    401c:	00004021 	.word	0x00004021

00004020 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask>:

void TaskHandler_Class::AddALUTask(list_descriptor *list,ControllerTask* pct){
    4020:	b580      	push	{r7, lr}
    4022:	b086      	sub	sp, #24
    4024:	af00      	add	r7, sp, #0
    4026:	60f8      	str	r0, [r7, #12]
    4028:	60b9      	str	r1, [r7, #8]
    402a:	607a      	str	r2, [r7, #4]
	ControllerTask *it, *head = (ControllerTask *)list_get_head(list);
    402c:	68b8      	ldr	r0, [r7, #8]
    402e:	4b09      	ldr	r3, [pc, #36]	; (4054 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x34>)
    4030:	4798      	blx	r3
    4032:	6178      	str	r0, [r7, #20]

	if (!head) {
    4034:	697b      	ldr	r3, [r7, #20]
    4036:	2b00      	cmp	r3, #0
    4038:	d104      	bne.n	4044 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x24>
		list_insert_as_head(list, pct);
    403a:	6879      	ldr	r1, [r7, #4]
    403c:	68b8      	ldr	r0, [r7, #8]
    403e:	4b06      	ldr	r3, [pc, #24]	; (4058 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x38>)
    4040:	4798      	blx	r3
		return;
    4042:	e003      	b.n	404c <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x2c>
		}else{
		list_insert_at_end(list,pct);
    4044:	6879      	ldr	r1, [r7, #4]
    4046:	68b8      	ldr	r0, [r7, #8]
    4048:	4b04      	ldr	r3, [pc, #16]	; (405c <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x3c>)
    404a:	4798      	blx	r3
	}

		

}
    404c:	3718      	adds	r7, #24
    404e:	46bd      	mov	sp, r7
    4050:	bd80      	pop	{r7, pc}
    4052:	bf00      	nop
    4054:	00003e7d 	.word	0x00003e7d
    4058:	00007dbd 	.word	0x00007dbd
    405c:	00007e39 	.word	0x00007e39

00004060 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask>:
		}
		list_delete_element(taskListPrivate, task);

		return ERR_NONE;
}
int32_t TaskHandler_Class::RemoveTask(ControllerTask& tk){
    4060:	b580      	push	{r7, lr}
    4062:	b082      	sub	sp, #8
    4064:	af00      	add	r7, sp, #0
    4066:	6078      	str	r0, [r7, #4]
    4068:	6039      	str	r1, [r7, #0]


	ASSERT(taskListPrivate && (&tk));
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	68db      	ldr	r3, [r3, #12]
    406e:	2b00      	cmp	r3, #0
    4070:	d004      	beq.n	407c <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1c>
    4072:	683b      	ldr	r3, [r7, #0]
    4074:	2b00      	cmp	r3, #0
    4076:	d001      	beq.n	407c <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1c>
    4078:	2301      	movs	r3, #1
    407a:	e000      	b.n	407e <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1e>
    407c:	2300      	movs	r3, #0
    407e:	226f      	movs	r2, #111	; 0x6f
    4080:	4917      	ldr	r1, [pc, #92]	; (40e0 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x80>)
    4082:	4618      	mov	r0, r3
    4084:	4b17      	ldr	r3, [pc, #92]	; (40e4 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x84>)
    4086:	4798      	blx	r3
	if (IsNotDeclaredTask(tk))
    4088:	6839      	ldr	r1, [r7, #0]
    408a:	6878      	ldr	r0, [r7, #4]
    408c:	4b16      	ldr	r3, [pc, #88]	; (40e8 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x88>)
    408e:	4798      	blx	r3
    4090:	4603      	mov	r3, r0
    4092:	2b00      	cmp	r3, #0
    4094:	d002      	beq.n	409c <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x3c>
	{
			return ERR_NOT_FOUND;
    4096:	f06f 0309 	mvn.w	r3, #9
    409a:	e01d      	b.n	40d8 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x78>
	} 
	else
	{
		
		if (!is_list_element(taskListPrivate, task)) {
    409c:	687b      	ldr	r3, [r7, #4]
    409e:	68da      	ldr	r2, [r3, #12]
    40a0:	687b      	ldr	r3, [r7, #4]
    40a2:	685b      	ldr	r3, [r3, #4]
    40a4:	4619      	mov	r1, r3
    40a6:	4610      	mov	r0, r2
    40a8:	4b10      	ldr	r3, [pc, #64]	; (40ec <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x8c>)
    40aa:	4798      	blx	r3
    40ac:	4603      	mov	r3, r0
    40ae:	f083 0301 	eor.w	r3, r3, #1
    40b2:	b2db      	uxtb	r3, r3
    40b4:	2b00      	cmp	r3, #0
    40b6:	d002      	beq.n	40be <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x5e>
			//ASSERT(false);
			return ERR_NOT_FOUND;
    40b8:	f06f 0309 	mvn.w	r3, #9
    40bc:	e00c      	b.n	40d8 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x78>
		}
			
		list_delete_element(taskListPrivate, task);
    40be:	687b      	ldr	r3, [r7, #4]
    40c0:	68da      	ldr	r2, [r3, #12]
    40c2:	687b      	ldr	r3, [r7, #4]
    40c4:	685b      	ldr	r3, [r3, #4]
    40c6:	4619      	mov	r1, r3
    40c8:	4610      	mov	r0, r2
    40ca:	4b09      	ldr	r3, [pc, #36]	; (40f0 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x90>)
    40cc:	4798      	blx	r3
		task->id=kALUNotTaskEvent;
    40ce:	687b      	ldr	r3, [r7, #4]
    40d0:	685b      	ldr	r3, [r3, #4]
    40d2:	2200      	movs	r2, #0
    40d4:	711a      	strb	r2, [r3, #4]
		return ERR_NONE;
    40d6:	2300      	movs	r3, #0
	}

	return ERR_NOT_FOUND;
}
    40d8:	4618      	mov	r0, r3
    40da:	3708      	adds	r7, #8
    40dc:	46bd      	mov	sp, r7
    40de:	bd80      	pop	{r7, pc}
    40e0:	00020100 	.word	0x00020100
    40e4:	00007d5d 	.word	0x00007d5d
    40e8:	000041b9 	.word	0x000041b9
    40ec:	00007d85 	.word	0x00007d85
    40f0:	00007ee7 	.word	0x00007ee7

000040f4 <_ZN17TaskHandler_Class15GetHighPrioTaskEv>:

ControllerTask	TaskHandler_Class::GetHighPrioTask(void){
    40f4:	b480      	push	{r7}
    40f6:	b087      	sub	sp, #28
    40f8:	af00      	add	r7, sp, #0
    40fa:	6078      	str	r0, [r7, #4]
    40fc:	6039      	str	r1, [r7, #0]
	list_element *it;
	ControllerTask* ct;
	uint8_t		highPrio=kALUNumberTasks;
    40fe:	230b      	movs	r3, #11
    4100:	73fb      	strb	r3, [r7, #15]
		
	for (it = taskListPrivate->head; it; it = it->next) {
    4102:	683b      	ldr	r3, [r7, #0]
    4104:	68db      	ldr	r3, [r3, #12]
    4106:	681b      	ldr	r3, [r3, #0]
    4108:	617b      	str	r3, [r7, #20]
    410a:	697b      	ldr	r3, [r7, #20]
    410c:	2b00      	cmp	r3, #0
    410e:	d011      	beq.n	4134 <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x40>
		ct=(ControllerTask*)it;
    4110:	697b      	ldr	r3, [r7, #20]
    4112:	613b      	str	r3, [r7, #16]
		if ((ct->prio)<(highPrio)) {
    4114:	693b      	ldr	r3, [r7, #16]
    4116:	795b      	ldrb	r3, [r3, #5]
    4118:	461a      	mov	r2, r3
    411a:	7bfb      	ldrb	r3, [r7, #15]
    411c:	429a      	cmp	r2, r3
    411e:	da05      	bge.n	412c <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x38>
			highPrio=ct->prio;
    4120:	693b      	ldr	r3, [r7, #16]
    4122:	795b      	ldrb	r3, [r3, #5]
    4124:	73fb      	strb	r3, [r7, #15]
			task=ct;
    4126:	683b      	ldr	r3, [r7, #0]
    4128:	693a      	ldr	r2, [r7, #16]
    412a:	605a      	str	r2, [r3, #4]
	for (it = taskListPrivate->head; it; it = it->next) {
    412c:	697b      	ldr	r3, [r7, #20]
    412e:	681b      	ldr	r3, [r3, #0]
    4130:	617b      	str	r3, [r7, #20]
    4132:	e7ea      	b.n	410a <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x16>
			
		}
	}
	return (ControllerTask)(*task);
    4134:	683b      	ldr	r3, [r7, #0]
    4136:	685a      	ldr	r2, [r3, #4]
    4138:	687b      	ldr	r3, [r7, #4]
    413a:	e892 0003 	ldmia.w	r2, {r0, r1}
    413e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4142:	6878      	ldr	r0, [r7, #4]
    4144:	371c      	adds	r7, #28
    4146:	46bd      	mov	sp, r7
    4148:	bc80      	pop	{r7}
    414a:	4770      	bx	lr

0000414c <_ZN17TaskHandler_Class19ChooseAvailableTaskEv>:

void	TaskHandler_Class::ChooseAvailableTask(void){
    414c:	b480      	push	{r7}
    414e:	b085      	sub	sp, #20
    4150:	af00      	add	r7, sp, #0
    4152:	6078      	str	r0, [r7, #4]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    4154:	2300      	movs	r3, #0
    4156:	73fb      	strb	r3, [r7, #15]
    4158:	7bfb      	ldrb	r3, [r7, #15]
    415a:	2b0a      	cmp	r3, #10
    415c:	dc21      	bgt.n	41a2 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x56>
	{
		j=ii%MAXIMUM_TASKS;
    415e:	7bf9      	ldrb	r1, [r7, #15]
    4160:	4b13      	ldr	r3, [pc, #76]	; (41b0 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x64>)
    4162:	fba3 2301 	umull	r2, r3, r3, r1
    4166:	08da      	lsrs	r2, r3, #3
    4168:	4613      	mov	r3, r2
    416a:	009b      	lsls	r3, r3, #2
    416c:	4413      	add	r3, r2
    416e:	005b      	lsls	r3, r3, #1
    4170:	4413      	add	r3, r2
    4172:	1acb      	subs	r3, r1, r3
    4174:	b2da      	uxtb	r2, r3
    4176:	687b      	ldr	r3, [r7, #4]
    4178:	725a      	strb	r2, [r3, #9]
		if (taskStorage[j].id==kALUNotTaskEvent)
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	7a5b      	ldrb	r3, [r3, #9]
    417e:	4a0d      	ldr	r2, [pc, #52]	; (41b4 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x68>)
    4180:	00db      	lsls	r3, r3, #3
    4182:	4413      	add	r3, r2
    4184:	791b      	ldrb	r3, [r3, #4]
    4186:	2b00      	cmp	r3, #0
    4188:	d107      	bne.n	419a <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x4e>
		{			
			task=&taskStorage[j];
    418a:	687b      	ldr	r3, [r7, #4]
    418c:	7a5b      	ldrb	r3, [r3, #9]
    418e:	00db      	lsls	r3, r3, #3
    4190:	4a08      	ldr	r2, [pc, #32]	; (41b4 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x68>)
    4192:	441a      	add	r2, r3
    4194:	687b      	ldr	r3, [r7, #4]
    4196:	605a      	str	r2, [r3, #4]
			return;
    4198:	e006      	b.n	41a8 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x5c>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    419a:	7bfb      	ldrb	r3, [r7, #15]
    419c:	3301      	adds	r3, #1
    419e:	73fb      	strb	r3, [r7, #15]
    41a0:	e7da      	b.n	4158 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0xc>
			
		}
	}
	task=&taskStorage[0];
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	4a03      	ldr	r2, [pc, #12]	; (41b4 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x68>)
    41a6:	605a      	str	r2, [r3, #4]

}
    41a8:	3714      	adds	r7, #20
    41aa:	46bd      	mov	sp, r7
    41ac:	bc80      	pop	{r7}
    41ae:	4770      	bx	lr
    41b0:	ba2e8ba3 	.word	0xba2e8ba3
    41b4:	200088a8 	.word	0x200088a8

000041b8 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask>:

bool	TaskHandler_Class::IsNotDeclaredTask(ControllerTask& tk){
    41b8:	b480      	push	{r7}
    41ba:	b085      	sub	sp, #20
    41bc:	af00      	add	r7, sp, #0
    41be:	6078      	str	r0, [r7, #4]
    41c0:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    41c2:	2300      	movs	r3, #0
    41c4:	73fb      	strb	r3, [r7, #15]
    41c6:	7bfb      	ldrb	r3, [r7, #15]
    41c8:	2b0a      	cmp	r3, #10
    41ca:	dc14      	bgt.n	41f6 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x3e>
	{
		if (taskStorage[ii].id==tk.id)
    41cc:	7bfb      	ldrb	r3, [r7, #15]
    41ce:	4a0d      	ldr	r2, [pc, #52]	; (4204 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x4c>)
    41d0:	00db      	lsls	r3, r3, #3
    41d2:	4413      	add	r3, r2
    41d4:	791a      	ldrb	r2, [r3, #4]
    41d6:	683b      	ldr	r3, [r7, #0]
    41d8:	791b      	ldrb	r3, [r3, #4]
    41da:	429a      	cmp	r2, r3
    41dc:	d107      	bne.n	41ee <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x36>
		{
			task=&taskStorage[ii];
    41de:	7bfb      	ldrb	r3, [r7, #15]
    41e0:	00db      	lsls	r3, r3, #3
    41e2:	4a08      	ldr	r2, [pc, #32]	; (4204 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x4c>)
    41e4:	441a      	add	r2, r3
    41e6:	687b      	ldr	r3, [r7, #4]
    41e8:	605a      	str	r2, [r3, #4]
			return false;
    41ea:	2300      	movs	r3, #0
    41ec:	e004      	b.n	41f8 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x40>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    41ee:	7bfb      	ldrb	r3, [r7, #15]
    41f0:	3301      	adds	r3, #1
    41f2:	73fb      	strb	r3, [r7, #15]
    41f4:	e7e7      	b.n	41c6 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0xe>
			
		}
	}
	return true;
    41f6:	2301      	movs	r3, #1


}
    41f8:	4618      	mov	r0, r3
    41fa:	3714      	adds	r7, #20
    41fc:	46bd      	mov	sp, r7
    41fe:	bc80      	pop	{r7}
    4200:	4770      	bx	lr
    4202:	bf00      	nop
    4204:	200088a8 	.word	0x200088a8

00004208 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum>:

bool	TaskHandler_Class::IsListedTask(ALUTaskEnum at){
    4208:	b480      	push	{r7}
    420a:	b085      	sub	sp, #20
    420c:	af00      	add	r7, sp, #0
    420e:	6078      	str	r0, [r7, #4]
    4210:	460b      	mov	r3, r1
    4212:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    4214:	2300      	movs	r3, #0
    4216:	73fb      	strb	r3, [r7, #15]
    4218:	7bfb      	ldrb	r3, [r7, #15]
    421a:	2b0a      	cmp	r3, #10
    421c:	dc0d      	bgt.n	423a <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x32>
	{
		if (taskStorage[ii].id==at)
    421e:	7bfb      	ldrb	r3, [r7, #15]
    4220:	4a09      	ldr	r2, [pc, #36]	; (4248 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x40>)
    4222:	00db      	lsls	r3, r3, #3
    4224:	4413      	add	r3, r2
    4226:	791b      	ldrb	r3, [r3, #4]
    4228:	78fa      	ldrb	r2, [r7, #3]
    422a:	429a      	cmp	r2, r3
    422c:	d101      	bne.n	4232 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x2a>
		{
		//	task=&taskStorage[ii];
			return true;
    422e:	2301      	movs	r3, #1
    4230:	e004      	b.n	423c <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x34>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    4232:	7bfb      	ldrb	r3, [r7, #15]
    4234:	3301      	adds	r3, #1
    4236:	73fb      	strb	r3, [r7, #15]
    4238:	e7ee      	b.n	4218 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x10>
			
		}
	}
	return false;
    423a:	2300      	movs	r3, #0


    423c:	4618      	mov	r0, r3
    423e:	3714      	adds	r7, #20
    4240:	46bd      	mov	sp, r7
    4242:	bc80      	pop	{r7}
    4244:	4770      	bx	lr
    4246:	bf00      	nop
    4248:	200088a8 	.word	0x200088a8

0000424c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    424c:	b580      	push	{r7, lr}
    424e:	af00      	add	r7, sp, #0
	system_init();
    4250:	4b03      	ldr	r3, [pc, #12]	; (4260 <atmel_start_init+0x14>)
    4252:	4798      	blx	r3
	usb_init();
    4254:	4b03      	ldr	r3, [pc, #12]	; (4264 <atmel_start_init+0x18>)
    4256:	4798      	blx	r3
	spi_nor_flash_init();
    4258:	4b03      	ldr	r3, [pc, #12]	; (4268 <atmel_start_init+0x1c>)
    425a:	4798      	blx	r3
}
    425c:	bf00      	nop
    425e:	bd80      	pop	{r7, pc}
    4260:	0000568d 	.word	0x0000568d
    4264:	00010c9d 	.word	0x00010c9d
    4268:	00010c31 	.word	0x00010c31

0000426c <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    426c:	b480      	push	{r7}
    426e:	b085      	sub	sp, #20
    4270:	af00      	add	r7, sp, #0
    4272:	60f8      	str	r0, [r7, #12]
    4274:	460b      	mov	r3, r1
    4276:	607a      	str	r2, [r7, #4]
    4278:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    427a:	7afa      	ldrb	r2, [r7, #11]
    427c:	68fb      	ldr	r3, [r7, #12]
    427e:	3220      	adds	r2, #32
    4280:	6879      	ldr	r1, [r7, #4]
    4282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    4286:	bf00      	nop
    4288:	3714      	adds	r7, #20
    428a:	46bd      	mov	sp, r7
    428c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4290:	4770      	bx	lr

00004292 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    4292:	b480      	push	{r7}
    4294:	b083      	sub	sp, #12
    4296:	af00      	add	r7, sp, #0
    4298:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    429a:	687b      	ldr	r3, [r7, #4]
    429c:	691b      	ldr	r3, [r3, #16]
    429e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    42a2:	687b      	ldr	r3, [r7, #4]
    42a4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    42a6:	bf00      	nop
    42a8:	370c      	adds	r7, #12
    42aa:	46bd      	mov	sp, r7
    42ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    42b0:	4770      	bx	lr

000042b2 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    42b2:	b480      	push	{r7}
    42b4:	b083      	sub	sp, #12
    42b6:	af00      	add	r7, sp, #0
    42b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    42ba:	687b      	ldr	r3, [r7, #4]
    42bc:	691b      	ldr	r3, [r3, #16]
    42be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    42c2:	687b      	ldr	r3, [r7, #4]
    42c4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    42c6:	bf00      	nop
    42c8:	370c      	adds	r7, #12
    42ca:	46bd      	mov	sp, r7
    42cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    42d0:	4770      	bx	lr

000042d2 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    42d2:	b480      	push	{r7}
    42d4:	b083      	sub	sp, #12
    42d6:	af00      	add	r7, sp, #0
    42d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    42da:	687b      	ldr	r3, [r7, #4]
    42dc:	691b      	ldr	r3, [r3, #16]
    42de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    42e2:	687b      	ldr	r3, [r7, #4]
    42e4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    42e6:	bf00      	nop
    42e8:	370c      	adds	r7, #12
    42ea:	46bd      	mov	sp, r7
    42ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    42f0:	4770      	bx	lr

000042f2 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    42f2:	b480      	push	{r7}
    42f4:	b083      	sub	sp, #12
    42f6:	af00      	add	r7, sp, #0
    42f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    42fa:	687b      	ldr	r3, [r7, #4]
    42fc:	691b      	ldr	r3, [r3, #16]
    42fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    4302:	687b      	ldr	r3, [r7, #4]
    4304:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4306:	bf00      	nop
    4308:	370c      	adds	r7, #12
    430a:	46bd      	mov	sp, r7
    430c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4310:	4770      	bx	lr

00004312 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    4312:	b480      	push	{r7}
    4314:	b083      	sub	sp, #12
    4316:	af00      	add	r7, sp, #0
    4318:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    431a:	687b      	ldr	r3, [r7, #4]
    431c:	695b      	ldr	r3, [r3, #20]
    431e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    4322:	687b      	ldr	r3, [r7, #4]
    4324:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4326:	bf00      	nop
    4328:	370c      	adds	r7, #12
    432a:	46bd      	mov	sp, r7
    432c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4330:	4770      	bx	lr

00004332 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    4332:	b480      	push	{r7}
    4334:	b083      	sub	sp, #12
    4336:	af00      	add	r7, sp, #0
    4338:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    433a:	687b      	ldr	r3, [r7, #4]
    433c:	695b      	ldr	r3, [r3, #20]
    433e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    4342:	687b      	ldr	r3, [r7, #4]
    4344:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4346:	bf00      	nop
    4348:	370c      	adds	r7, #12
    434a:	46bd      	mov	sp, r7
    434c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4350:	4770      	bx	lr

00004352 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    4352:	b480      	push	{r7}
    4354:	b083      	sub	sp, #12
    4356:	af00      	add	r7, sp, #0
    4358:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	695b      	ldr	r3, [r3, #20]
    435e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    4362:	687b      	ldr	r3, [r7, #4]
    4364:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4366:	bf00      	nop
    4368:	370c      	adds	r7, #12
    436a:	46bd      	mov	sp, r7
    436c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4370:	4770      	bx	lr

00004372 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    4372:	b480      	push	{r7}
    4374:	b083      	sub	sp, #12
    4376:	af00      	add	r7, sp, #0
    4378:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    437a:	687b      	ldr	r3, [r7, #4]
    437c:	695b      	ldr	r3, [r3, #20]
    437e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4382:	687b      	ldr	r3, [r7, #4]
    4384:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4386:	bf00      	nop
    4388:	370c      	adds	r7, #12
    438a:	46bd      	mov	sp, r7
    438c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4390:	4770      	bx	lr

00004392 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    4392:	b480      	push	{r7}
    4394:	b083      	sub	sp, #12
    4396:	af00      	add	r7, sp, #0
    4398:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    439a:	687b      	ldr	r3, [r7, #4]
    439c:	695b      	ldr	r3, [r3, #20]
    439e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    43a2:	687b      	ldr	r3, [r7, #4]
    43a4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    43a6:	bf00      	nop
    43a8:	370c      	adds	r7, #12
    43aa:	46bd      	mov	sp, r7
    43ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    43b0:	4770      	bx	lr

000043b2 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    43b2:	b480      	push	{r7}
    43b4:	b083      	sub	sp, #12
    43b6:	af00      	add	r7, sp, #0
    43b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    43ba:	687b      	ldr	r3, [r7, #4]
    43bc:	695b      	ldr	r3, [r3, #20]
    43be:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    43c2:	687b      	ldr	r3, [r7, #4]
    43c4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    43c6:	bf00      	nop
    43c8:	370c      	adds	r7, #12
    43ca:	46bd      	mov	sp, r7
    43cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    43d0:	4770      	bx	lr

000043d2 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    43d2:	b480      	push	{r7}
    43d4:	b083      	sub	sp, #12
    43d6:	af00      	add	r7, sp, #0
    43d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    43da:	687b      	ldr	r3, [r7, #4]
    43dc:	699b      	ldr	r3, [r3, #24]
    43de:	f043 0201 	orr.w	r2, r3, #1
    43e2:	687b      	ldr	r3, [r7, #4]
    43e4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    43e6:	bf00      	nop
    43e8:	370c      	adds	r7, #12
    43ea:	46bd      	mov	sp, r7
    43ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    43f0:	4770      	bx	lr

000043f2 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    43f2:	b480      	push	{r7}
    43f4:	b083      	sub	sp, #12
    43f6:	af00      	add	r7, sp, #0
    43f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    43fa:	687b      	ldr	r3, [r7, #4]
    43fc:	699b      	ldr	r3, [r3, #24]
    43fe:	f043 0202 	orr.w	r2, r3, #2
    4402:	687b      	ldr	r3, [r7, #4]
    4404:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4406:	bf00      	nop
    4408:	370c      	adds	r7, #12
    440a:	46bd      	mov	sp, r7
    440c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4410:	4770      	bx	lr

00004412 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    4412:	b480      	push	{r7}
    4414:	b083      	sub	sp, #12
    4416:	af00      	add	r7, sp, #0
    4418:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    441a:	687b      	ldr	r3, [r7, #4]
    441c:	699b      	ldr	r3, [r3, #24]
    441e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    4422:	687b      	ldr	r3, [r7, #4]
    4424:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4426:	bf00      	nop
    4428:	370c      	adds	r7, #12
    442a:	46bd      	mov	sp, r7
    442c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4430:	4770      	bx	lr

00004432 <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
    4432:	b480      	push	{r7}
    4434:	b083      	sub	sp, #12
    4436:	af00      	add	r7, sp, #0
    4438:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    443a:	687b      	ldr	r3, [r7, #4]
    443c:	699b      	ldr	r3, [r3, #24]
    443e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    4442:	687b      	ldr	r3, [r7, #4]
    4444:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4446:	bf00      	nop
    4448:	370c      	adds	r7, #12
    444a:	46bd      	mov	sp, r7
    444c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4450:	4770      	bx	lr

00004452 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    4452:	b480      	push	{r7}
    4454:	b083      	sub	sp, #12
    4456:	af00      	add	r7, sp, #0
    4458:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    445a:	687b      	ldr	r3, [r7, #4]
    445c:	699b      	ldr	r3, [r3, #24]
    445e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    4462:	687b      	ldr	r3, [r7, #4]
    4464:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4466:	bf00      	nop
    4468:	370c      	adds	r7, #12
    446a:	46bd      	mov	sp, r7
    446c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4470:	4770      	bx	lr

00004472 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    4472:	b480      	push	{r7}
    4474:	b083      	sub	sp, #12
    4476:	af00      	add	r7, sp, #0
    4478:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    447a:	687b      	ldr	r3, [r7, #4]
    447c:	699b      	ldr	r3, [r3, #24]
    447e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    4482:	687b      	ldr	r3, [r7, #4]
    4484:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4486:	bf00      	nop
    4488:	370c      	adds	r7, #12
    448a:	46bd      	mov	sp, r7
    448c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4490:	4770      	bx	lr

00004492 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    4492:	b480      	push	{r7}
    4494:	b083      	sub	sp, #12
    4496:	af00      	add	r7, sp, #0
    4498:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    449a:	687b      	ldr	r3, [r7, #4]
    449c:	699b      	ldr	r3, [r3, #24]
    449e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    44a2:	687b      	ldr	r3, [r7, #4]
    44a4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    44a6:	bf00      	nop
    44a8:	370c      	adds	r7, #12
    44aa:	46bd      	mov	sp, r7
    44ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    44b0:	4770      	bx	lr

000044b2 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    44b2:	b480      	push	{r7}
    44b4:	b083      	sub	sp, #12
    44b6:	af00      	add	r7, sp, #0
    44b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    44ba:	687b      	ldr	r3, [r7, #4]
    44bc:	69db      	ldr	r3, [r3, #28]
    44be:	f043 0220 	orr.w	r2, r3, #32
    44c2:	687b      	ldr	r3, [r7, #4]
    44c4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    44c6:	bf00      	nop
    44c8:	370c      	adds	r7, #12
    44ca:	46bd      	mov	sp, r7
    44cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    44d0:	4770      	bx	lr

000044d2 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    44d2:	b480      	push	{r7}
    44d4:	b083      	sub	sp, #12
    44d6:	af00      	add	r7, sp, #0
    44d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    44da:	687b      	ldr	r3, [r7, #4]
    44dc:	69db      	ldr	r3, [r3, #28]
    44de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    44e2:	687b      	ldr	r3, [r7, #4]
    44e4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    44e6:	bf00      	nop
    44e8:	370c      	adds	r7, #12
    44ea:	46bd      	mov	sp, r7
    44ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    44f0:	4770      	bx	lr

000044f2 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    44f2:	b480      	push	{r7}
    44f4:	b083      	sub	sp, #12
    44f6:	af00      	add	r7, sp, #0
    44f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    44fa:	687b      	ldr	r3, [r7, #4]
    44fc:	69db      	ldr	r3, [r3, #28]
    44fe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4502:	687b      	ldr	r3, [r7, #4]
    4504:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4506:	bf00      	nop
    4508:	370c      	adds	r7, #12
    450a:	46bd      	mov	sp, r7
    450c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4510:	4770      	bx	lr

00004512 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    4512:	b480      	push	{r7}
    4514:	b083      	sub	sp, #12
    4516:	af00      	add	r7, sp, #0
    4518:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    451a:	687b      	ldr	r3, [r7, #4]
    451c:	6a1b      	ldr	r3, [r3, #32]
    451e:	f043 0201 	orr.w	r2, r3, #1
    4522:	687b      	ldr	r3, [r7, #4]
    4524:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4526:	bf00      	nop
    4528:	370c      	adds	r7, #12
    452a:	46bd      	mov	sp, r7
    452c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4530:	4770      	bx	lr

00004532 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    4532:	b480      	push	{r7}
    4534:	b083      	sub	sp, #12
    4536:	af00      	add	r7, sp, #0
    4538:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    453a:	687b      	ldr	r3, [r7, #4]
    453c:	6a1b      	ldr	r3, [r3, #32]
    453e:	f043 0202 	orr.w	r2, r3, #2
    4542:	687b      	ldr	r3, [r7, #4]
    4544:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4546:	bf00      	nop
    4548:	370c      	adds	r7, #12
    454a:	46bd      	mov	sp, r7
    454c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4550:	4770      	bx	lr

00004552 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    4552:	b480      	push	{r7}
    4554:	b083      	sub	sp, #12
    4556:	af00      	add	r7, sp, #0
    4558:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    455a:	687b      	ldr	r3, [r7, #4]
    455c:	6a1b      	ldr	r3, [r3, #32]
    455e:	f043 0204 	orr.w	r2, r3, #4
    4562:	687b      	ldr	r3, [r7, #4]
    4564:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4566:	bf00      	nop
    4568:	370c      	adds	r7, #12
    456a:	46bd      	mov	sp, r7
    456c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4570:	4770      	bx	lr

00004572 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    4572:	b480      	push	{r7}
    4574:	b083      	sub	sp, #12
    4576:	af00      	add	r7, sp, #0
    4578:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    457a:	687b      	ldr	r3, [r7, #4]
    457c:	6a1b      	ldr	r3, [r3, #32]
    457e:	f043 0208 	orr.w	r2, r3, #8
    4582:	687b      	ldr	r3, [r7, #4]
    4584:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4586:	bf00      	nop
    4588:	370c      	adds	r7, #12
    458a:	46bd      	mov	sp, r7
    458c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4590:	4770      	bx	lr

00004592 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    4592:	b480      	push	{r7}
    4594:	b083      	sub	sp, #12
    4596:	af00      	add	r7, sp, #0
    4598:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    459a:	687b      	ldr	r3, [r7, #4]
    459c:	6a1b      	ldr	r3, [r3, #32]
    459e:	f043 0220 	orr.w	r2, r3, #32
    45a2:	687b      	ldr	r3, [r7, #4]
    45a4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    45a6:	bf00      	nop
    45a8:	370c      	adds	r7, #12
    45aa:	46bd      	mov	sp, r7
    45ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    45b0:	4770      	bx	lr

000045b2 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    45b2:	b480      	push	{r7}
    45b4:	b085      	sub	sp, #20
    45b6:	af00      	add	r7, sp, #0
    45b8:	60f8      	str	r0, [r7, #12]
    45ba:	460b      	mov	r3, r1
    45bc:	607a      	str	r2, [r7, #4]
    45be:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    45c0:	7afb      	ldrb	r3, [r7, #11]
    45c2:	68fa      	ldr	r2, [r7, #12]
    45c4:	01db      	lsls	r3, r3, #7
    45c6:	4413      	add	r3, r2
    45c8:	3308      	adds	r3, #8
    45ca:	687a      	ldr	r2, [r7, #4]
    45cc:	601a      	str	r2, [r3, #0]
}
    45ce:	bf00      	nop
    45d0:	3714      	adds	r7, #20
    45d2:	46bd      	mov	sp, r7
    45d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    45d8:	4770      	bx	lr

000045da <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    45da:	b480      	push	{r7}
    45dc:	b085      	sub	sp, #20
    45de:	af00      	add	r7, sp, #0
    45e0:	60f8      	str	r0, [r7, #12]
    45e2:	460b      	mov	r3, r1
    45e4:	607a      	str	r2, [r7, #4]
    45e6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    45e8:	7afb      	ldrb	r3, [r7, #11]
    45ea:	68fa      	ldr	r2, [r7, #12]
    45ec:	01db      	lsls	r3, r3, #7
    45ee:	4413      	add	r3, r2
    45f0:	3304      	adds	r3, #4
    45f2:	687a      	ldr	r2, [r7, #4]
    45f4:	601a      	str	r2, [r3, #0]
}
    45f6:	bf00      	nop
    45f8:	3714      	adds	r7, #20
    45fa:	46bd      	mov	sp, r7
    45fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4600:	4770      	bx	lr

00004602 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    4602:	b480      	push	{r7}
    4604:	b085      	sub	sp, #20
    4606:	af00      	add	r7, sp, #0
    4608:	60f8      	str	r0, [r7, #12]
    460a:	460b      	mov	r3, r1
    460c:	607a      	str	r2, [r7, #4]
    460e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4610:	7afb      	ldrb	r3, [r7, #11]
    4612:	68fa      	ldr	r2, [r7, #12]
    4614:	01db      	lsls	r3, r3, #7
    4616:	4413      	add	r3, r2
    4618:	3318      	adds	r3, #24
    461a:	687a      	ldr	r2, [r7, #4]
    461c:	601a      	str	r2, [r3, #0]
}
    461e:	bf00      	nop
    4620:	3714      	adds	r7, #20
    4622:	46bd      	mov	sp, r7
    4624:	f85d 7b04 	ldr.w	r7, [sp], #4
    4628:	4770      	bx	lr

0000462a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    462a:	b480      	push	{r7}
    462c:	b085      	sub	sp, #20
    462e:	af00      	add	r7, sp, #0
    4630:	60f8      	str	r0, [r7, #12]
    4632:	460b      	mov	r3, r1
    4634:	607a      	str	r2, [r7, #4]
    4636:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4638:	7afb      	ldrb	r3, [r7, #11]
    463a:	68fa      	ldr	r2, [r7, #12]
    463c:	01db      	lsls	r3, r3, #7
    463e:	4413      	add	r3, r2
    4640:	3314      	adds	r3, #20
    4642:	687a      	ldr	r2, [r7, #4]
    4644:	601a      	str	r2, [r3, #0]
}
    4646:	bf00      	nop
    4648:	3714      	adds	r7, #20
    464a:	46bd      	mov	sp, r7
    464c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4650:	4770      	bx	lr

00004652 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    4652:	b480      	push	{r7}
    4654:	b085      	sub	sp, #20
    4656:	af00      	add	r7, sp, #0
    4658:	6078      	str	r0, [r7, #4]
    465a:	4608      	mov	r0, r1
    465c:	4611      	mov	r1, r2
    465e:	461a      	mov	r2, r3
    4660:	4603      	mov	r3, r0
    4662:	70fb      	strb	r3, [r7, #3]
    4664:	460b      	mov	r3, r1
    4666:	70bb      	strb	r3, [r7, #2]
    4668:	4613      	mov	r3, r2
    466a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    466c:	78fa      	ldrb	r2, [r7, #3]
    466e:	78bb      	ldrb	r3, [r7, #2]
    4670:	6879      	ldr	r1, [r7, #4]
    4672:	01d2      	lsls	r2, r2, #7
    4674:	440a      	add	r2, r1
    4676:	4413      	add	r3, r2
    4678:	3330      	adds	r3, #48	; 0x30
    467a:	781b      	ldrb	r3, [r3, #0]
    467c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    467e:	7bfb      	ldrb	r3, [r7, #15]
    4680:	f023 030f 	bic.w	r3, r3, #15
    4684:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    4686:	787b      	ldrb	r3, [r7, #1]
    4688:	f003 030f 	and.w	r3, r3, #15
    468c:	b2da      	uxtb	r2, r3
    468e:	7bfb      	ldrb	r3, [r7, #15]
    4690:	4313      	orrs	r3, r2
    4692:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4694:	78fa      	ldrb	r2, [r7, #3]
    4696:	78bb      	ldrb	r3, [r7, #2]
    4698:	6879      	ldr	r1, [r7, #4]
    469a:	01d2      	lsls	r2, r2, #7
    469c:	440a      	add	r2, r1
    469e:	4413      	add	r3, r2
    46a0:	3330      	adds	r3, #48	; 0x30
    46a2:	7bfa      	ldrb	r2, [r7, #15]
    46a4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    46a6:	bf00      	nop
    46a8:	3714      	adds	r7, #20
    46aa:	46bd      	mov	sp, r7
    46ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    46b0:	4770      	bx	lr

000046b2 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    46b2:	b480      	push	{r7}
    46b4:	b085      	sub	sp, #20
    46b6:	af00      	add	r7, sp, #0
    46b8:	6078      	str	r0, [r7, #4]
    46ba:	4608      	mov	r0, r1
    46bc:	4611      	mov	r1, r2
    46be:	461a      	mov	r2, r3
    46c0:	4603      	mov	r3, r0
    46c2:	70fb      	strb	r3, [r7, #3]
    46c4:	460b      	mov	r3, r1
    46c6:	70bb      	strb	r3, [r7, #2]
    46c8:	4613      	mov	r3, r2
    46ca:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    46cc:	78fa      	ldrb	r2, [r7, #3]
    46ce:	78bb      	ldrb	r3, [r7, #2]
    46d0:	6879      	ldr	r1, [r7, #4]
    46d2:	01d2      	lsls	r2, r2, #7
    46d4:	440a      	add	r2, r1
    46d6:	4413      	add	r3, r2
    46d8:	3330      	adds	r3, #48	; 0x30
    46da:	781b      	ldrb	r3, [r3, #0]
    46dc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    46de:	7bfb      	ldrb	r3, [r7, #15]
    46e0:	f003 030f 	and.w	r3, r3, #15
    46e4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    46e6:	787b      	ldrb	r3, [r7, #1]
    46e8:	011b      	lsls	r3, r3, #4
    46ea:	b2da      	uxtb	r2, r3
    46ec:	7bfb      	ldrb	r3, [r7, #15]
    46ee:	4313      	orrs	r3, r2
    46f0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    46f2:	78fa      	ldrb	r2, [r7, #3]
    46f4:	78bb      	ldrb	r3, [r7, #2]
    46f6:	6879      	ldr	r1, [r7, #4]
    46f8:	01d2      	lsls	r2, r2, #7
    46fa:	440a      	add	r2, r1
    46fc:	4413      	add	r3, r2
    46fe:	3330      	adds	r3, #48	; 0x30
    4700:	7bfa      	ldrb	r2, [r7, #15]
    4702:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4704:	bf00      	nop
    4706:	3714      	adds	r7, #20
    4708:	46bd      	mov	sp, r7
    470a:	f85d 7b04 	ldr.w	r7, [sp], #4
    470e:	4770      	bx	lr

00004710 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    4710:	b480      	push	{r7}
    4712:	b085      	sub	sp, #20
    4714:	af00      	add	r7, sp, #0
    4716:	6078      	str	r0, [r7, #4]
    4718:	4608      	mov	r0, r1
    471a:	4611      	mov	r1, r2
    471c:	461a      	mov	r2, r3
    471e:	4603      	mov	r3, r0
    4720:	70fb      	strb	r3, [r7, #3]
    4722:	460b      	mov	r3, r1
    4724:	70bb      	strb	r3, [r7, #2]
    4726:	4613      	mov	r3, r2
    4728:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    472a:	78fa      	ldrb	r2, [r7, #3]
    472c:	78bb      	ldrb	r3, [r7, #2]
    472e:	6879      	ldr	r1, [r7, #4]
    4730:	01d2      	lsls	r2, r2, #7
    4732:	440a      	add	r2, r1
    4734:	4413      	add	r3, r2
    4736:	3340      	adds	r3, #64	; 0x40
    4738:	781b      	ldrb	r3, [r3, #0]
    473a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    473c:	7bfb      	ldrb	r3, [r7, #15]
    473e:	f023 0301 	bic.w	r3, r3, #1
    4742:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4744:	787a      	ldrb	r2, [r7, #1]
    4746:	7bfb      	ldrb	r3, [r7, #15]
    4748:	4313      	orrs	r3, r2
    474a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    474c:	78fa      	ldrb	r2, [r7, #3]
    474e:	78bb      	ldrb	r3, [r7, #2]
    4750:	6879      	ldr	r1, [r7, #4]
    4752:	01d2      	lsls	r2, r2, #7
    4754:	440a      	add	r2, r1
    4756:	4413      	add	r3, r2
    4758:	3340      	adds	r3, #64	; 0x40
    475a:	7bfa      	ldrb	r2, [r7, #15]
    475c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    475e:	bf00      	nop
    4760:	3714      	adds	r7, #20
    4762:	46bd      	mov	sp, r7
    4764:	f85d 7b04 	ldr.w	r7, [sp], #4
    4768:	4770      	bx	lr

0000476a <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    476a:	b490      	push	{r4, r7}
    476c:	b082      	sub	sp, #8
    476e:	af00      	add	r7, sp, #0
    4770:	6078      	str	r0, [r7, #4]
    4772:	460b      	mov	r3, r1
    4774:	70fb      	strb	r3, [r7, #3]
    4776:	4613      	mov	r3, r2
    4778:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    477a:	78fa      	ldrb	r2, [r7, #3]
    477c:	78bb      	ldrb	r3, [r7, #2]
    477e:	78f8      	ldrb	r0, [r7, #3]
    4780:	78b9      	ldrb	r1, [r7, #2]
    4782:	687c      	ldr	r4, [r7, #4]
    4784:	01c0      	lsls	r0, r0, #7
    4786:	4420      	add	r0, r4
    4788:	4401      	add	r1, r0
    478a:	3140      	adds	r1, #64	; 0x40
    478c:	7809      	ldrb	r1, [r1, #0]
    478e:	b2c9      	uxtb	r1, r1
    4790:	f041 0104 	orr.w	r1, r1, #4
    4794:	b2c8      	uxtb	r0, r1
    4796:	6879      	ldr	r1, [r7, #4]
    4798:	01d2      	lsls	r2, r2, #7
    479a:	440a      	add	r2, r1
    479c:	4413      	add	r3, r2
    479e:	3340      	adds	r3, #64	; 0x40
    47a0:	4602      	mov	r2, r0
    47a2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    47a4:	bf00      	nop
    47a6:	3708      	adds	r7, #8
    47a8:	46bd      	mov	sp, r7
    47aa:	bc90      	pop	{r4, r7}
    47ac:	4770      	bx	lr

000047ae <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    47ae:	b490      	push	{r4, r7}
    47b0:	b082      	sub	sp, #8
    47b2:	af00      	add	r7, sp, #0
    47b4:	6078      	str	r0, [r7, #4]
    47b6:	460b      	mov	r3, r1
    47b8:	70fb      	strb	r3, [r7, #3]
    47ba:	4613      	mov	r3, r2
    47bc:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    47be:	78fa      	ldrb	r2, [r7, #3]
    47c0:	78bb      	ldrb	r3, [r7, #2]
    47c2:	78f8      	ldrb	r0, [r7, #3]
    47c4:	78b9      	ldrb	r1, [r7, #2]
    47c6:	687c      	ldr	r4, [r7, #4]
    47c8:	01c0      	lsls	r0, r0, #7
    47ca:	4420      	add	r0, r4
    47cc:	4401      	add	r1, r0
    47ce:	3140      	adds	r1, #64	; 0x40
    47d0:	7809      	ldrb	r1, [r1, #0]
    47d2:	b2c9      	uxtb	r1, r1
    47d4:	f021 0104 	bic.w	r1, r1, #4
    47d8:	b2c8      	uxtb	r0, r1
    47da:	6879      	ldr	r1, [r7, #4]
    47dc:	01d2      	lsls	r2, r2, #7
    47de:	440a      	add	r2, r1
    47e0:	4413      	add	r3, r2
    47e2:	3340      	adds	r3, #64	; 0x40
    47e4:	4602      	mov	r2, r0
    47e6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    47e8:	bf00      	nop
    47ea:	3708      	adds	r7, #8
    47ec:	46bd      	mov	sp, r7
    47ee:	bc90      	pop	{r4, r7}
    47f0:	4770      	bx	lr

000047f2 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    47f2:	b480      	push	{r7}
    47f4:	b085      	sub	sp, #20
    47f6:	af00      	add	r7, sp, #0
    47f8:	60f8      	str	r0, [r7, #12]
    47fa:	460b      	mov	r3, r1
    47fc:	607a      	str	r2, [r7, #4]
    47fe:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4800:	7afb      	ldrb	r3, [r7, #11]
    4802:	68fa      	ldr	r2, [r7, #12]
    4804:	01db      	lsls	r3, r3, #7
    4806:	4413      	add	r3, r2
    4808:	3328      	adds	r3, #40	; 0x28
    480a:	687a      	ldr	r2, [r7, #4]
    480c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    480e:	bf00      	nop
    4810:	3714      	adds	r7, #20
    4812:	46bd      	mov	sp, r7
    4814:	f85d 7b04 	ldr.w	r7, [sp], #4
    4818:	4770      	bx	lr
	...

0000481c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    481c:	b580      	push	{r7, lr}
    481e:	b082      	sub	sp, #8
    4820:	af00      	add	r7, sp, #0
    4822:	4603      	mov	r3, r0
    4824:	6039      	str	r1, [r7, #0]
    4826:	71fb      	strb	r3, [r7, #7]
    4828:	4613      	mov	r3, r2
    482a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    482c:	79bb      	ldrb	r3, [r7, #6]
    482e:	2b01      	cmp	r3, #1
    4830:	d01c      	beq.n	486c <_gpio_set_direction+0x50>
    4832:	2b02      	cmp	r3, #2
    4834:	d037      	beq.n	48a6 <_gpio_set_direction+0x8a>
    4836:	2b00      	cmp	r3, #0
    4838:	d14e      	bne.n	48d8 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    483a:	79fb      	ldrb	r3, [r7, #7]
    483c:	683a      	ldr	r2, [r7, #0]
    483e:	4619      	mov	r1, r3
    4840:	482a      	ldr	r0, [pc, #168]	; (48ec <_gpio_set_direction+0xd0>)
    4842:	4b2b      	ldr	r3, [pc, #172]	; (48f0 <_gpio_set_direction+0xd4>)
    4844:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    4846:	683b      	ldr	r3, [r7, #0]
    4848:	b29b      	uxth	r3, r3
    484a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    484e:	79fb      	ldrb	r3, [r7, #7]
    4850:	4619      	mov	r1, r3
    4852:	4826      	ldr	r0, [pc, #152]	; (48ec <_gpio_set_direction+0xd0>)
    4854:	4b27      	ldr	r3, [pc, #156]	; (48f4 <_gpio_set_direction+0xd8>)
    4856:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    4858:	683b      	ldr	r3, [r7, #0]
    485a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    485c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    4860:	79fb      	ldrb	r3, [r7, #7]
    4862:	4619      	mov	r1, r3
    4864:	4821      	ldr	r0, [pc, #132]	; (48ec <_gpio_set_direction+0xd0>)
    4866:	4b23      	ldr	r3, [pc, #140]	; (48f4 <_gpio_set_direction+0xd8>)
    4868:	4798      	blx	r3
		break;
    486a:	e03a      	b.n	48e2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    486c:	79fb      	ldrb	r3, [r7, #7]
    486e:	683a      	ldr	r2, [r7, #0]
    4870:	4619      	mov	r1, r3
    4872:	481e      	ldr	r0, [pc, #120]	; (48ec <_gpio_set_direction+0xd0>)
    4874:	4b1e      	ldr	r3, [pc, #120]	; (48f0 <_gpio_set_direction+0xd4>)
    4876:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    4878:	683b      	ldr	r3, [r7, #0]
    487a:	b29b      	uxth	r3, r3
    487c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    4880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4884:	79f9      	ldrb	r1, [r7, #7]
    4886:	461a      	mov	r2, r3
    4888:	4818      	ldr	r0, [pc, #96]	; (48ec <_gpio_set_direction+0xd0>)
    488a:	4b1a      	ldr	r3, [pc, #104]	; (48f4 <_gpio_set_direction+0xd8>)
    488c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    488e:	683b      	ldr	r3, [r7, #0]
    4890:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    4892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    4896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    489a:	79f9      	ldrb	r1, [r7, #7]
    489c:	461a      	mov	r2, r3
    489e:	4813      	ldr	r0, [pc, #76]	; (48ec <_gpio_set_direction+0xd0>)
    48a0:	4b14      	ldr	r3, [pc, #80]	; (48f4 <_gpio_set_direction+0xd8>)
    48a2:	4798      	blx	r3
		break;
    48a4:	e01d      	b.n	48e2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    48a6:	79fb      	ldrb	r3, [r7, #7]
    48a8:	683a      	ldr	r2, [r7, #0]
    48aa:	4619      	mov	r1, r3
    48ac:	480f      	ldr	r0, [pc, #60]	; (48ec <_gpio_set_direction+0xd0>)
    48ae:	4b12      	ldr	r3, [pc, #72]	; (48f8 <_gpio_set_direction+0xdc>)
    48b0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    48b2:	683b      	ldr	r3, [r7, #0]
    48b4:	b29b      	uxth	r3, r3
    48b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    48ba:	79fb      	ldrb	r3, [r7, #7]
    48bc:	4619      	mov	r1, r3
    48be:	480b      	ldr	r0, [pc, #44]	; (48ec <_gpio_set_direction+0xd0>)
    48c0:	4b0c      	ldr	r3, [pc, #48]	; (48f4 <_gpio_set_direction+0xd8>)
    48c2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    48c4:	683b      	ldr	r3, [r7, #0]
    48c6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    48c8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    48cc:	79fb      	ldrb	r3, [r7, #7]
    48ce:	4619      	mov	r1, r3
    48d0:	4806      	ldr	r0, [pc, #24]	; (48ec <_gpio_set_direction+0xd0>)
    48d2:	4b08      	ldr	r3, [pc, #32]	; (48f4 <_gpio_set_direction+0xd8>)
    48d4:	4798      	blx	r3
		break;
    48d6:	e004      	b.n	48e2 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    48d8:	2246      	movs	r2, #70	; 0x46
    48da:	4908      	ldr	r1, [pc, #32]	; (48fc <_gpio_set_direction+0xe0>)
    48dc:	2000      	movs	r0, #0
    48de:	4b08      	ldr	r3, [pc, #32]	; (4900 <_gpio_set_direction+0xe4>)
    48e0:	4798      	blx	r3
	}
}
    48e2:	bf00      	nop
    48e4:	3708      	adds	r7, #8
    48e6:	46bd      	mov	sp, r7
    48e8:	bd80      	pop	{r7, pc}
    48ea:	bf00      	nop
    48ec:	41008000 	.word	0x41008000
    48f0:	000045db 	.word	0x000045db
    48f4:	000047f3 	.word	0x000047f3
    48f8:	000045b3 	.word	0x000045b3
    48fc:	0002011c 	.word	0x0002011c
    4900:	00007d5d 	.word	0x00007d5d

00004904 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    4904:	b580      	push	{r7, lr}
    4906:	b082      	sub	sp, #8
    4908:	af00      	add	r7, sp, #0
    490a:	4603      	mov	r3, r0
    490c:	6039      	str	r1, [r7, #0]
    490e:	71fb      	strb	r3, [r7, #7]
    4910:	4613      	mov	r3, r2
    4912:	71bb      	strb	r3, [r7, #6]
	if (level) {
    4914:	79bb      	ldrb	r3, [r7, #6]
    4916:	2b00      	cmp	r3, #0
    4918:	d006      	beq.n	4928 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    491a:	79fb      	ldrb	r3, [r7, #7]
    491c:	683a      	ldr	r2, [r7, #0]
    491e:	4619      	mov	r1, r3
    4920:	4806      	ldr	r0, [pc, #24]	; (493c <_gpio_set_level+0x38>)
    4922:	4b07      	ldr	r3, [pc, #28]	; (4940 <_gpio_set_level+0x3c>)
    4924:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    4926:	e005      	b.n	4934 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    4928:	79fb      	ldrb	r3, [r7, #7]
    492a:	683a      	ldr	r2, [r7, #0]
    492c:	4619      	mov	r1, r3
    492e:	4803      	ldr	r0, [pc, #12]	; (493c <_gpio_set_level+0x38>)
    4930:	4b04      	ldr	r3, [pc, #16]	; (4944 <_gpio_set_level+0x40>)
    4932:	4798      	blx	r3
}
    4934:	bf00      	nop
    4936:	3708      	adds	r7, #8
    4938:	46bd      	mov	sp, r7
    493a:	bd80      	pop	{r7, pc}
    493c:	41008000 	.word	0x41008000
    4940:	00004603 	.word	0x00004603
    4944:	0000462b 	.word	0x0000462b

00004948 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    4948:	b580      	push	{r7, lr}
    494a:	b082      	sub	sp, #8
    494c:	af00      	add	r7, sp, #0
    494e:	4603      	mov	r3, r0
    4950:	71fb      	strb	r3, [r7, #7]
    4952:	460b      	mov	r3, r1
    4954:	71bb      	strb	r3, [r7, #6]
    4956:	4613      	mov	r3, r2
    4958:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    495a:	797b      	ldrb	r3, [r7, #5]
    495c:	2b01      	cmp	r3, #1
    495e:	d00a      	beq.n	4976 <_gpio_set_pin_pull_mode+0x2e>
    4960:	2b02      	cmp	r3, #2
    4962:	d01f      	beq.n	49a4 <_gpio_set_pin_pull_mode+0x5c>
    4964:	2b00      	cmp	r3, #0
    4966:	d134      	bne.n	49d2 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    4968:	79ba      	ldrb	r2, [r7, #6]
    496a:	79fb      	ldrb	r3, [r7, #7]
    496c:	4619      	mov	r1, r3
    496e:	481e      	ldr	r0, [pc, #120]	; (49e8 <_gpio_set_pin_pull_mode+0xa0>)
    4970:	4b1e      	ldr	r3, [pc, #120]	; (49ec <_gpio_set_pin_pull_mode+0xa4>)
    4972:	4798      	blx	r3
		break;
    4974:	e033      	b.n	49de <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    4976:	79bb      	ldrb	r3, [r7, #6]
    4978:	2201      	movs	r2, #1
    497a:	409a      	lsls	r2, r3
    497c:	79fb      	ldrb	r3, [r7, #7]
    497e:	4619      	mov	r1, r3
    4980:	4819      	ldr	r0, [pc, #100]	; (49e8 <_gpio_set_pin_pull_mode+0xa0>)
    4982:	4b1b      	ldr	r3, [pc, #108]	; (49f0 <_gpio_set_pin_pull_mode+0xa8>)
    4984:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    4986:	79ba      	ldrb	r2, [r7, #6]
    4988:	79fb      	ldrb	r3, [r7, #7]
    498a:	4619      	mov	r1, r3
    498c:	4816      	ldr	r0, [pc, #88]	; (49e8 <_gpio_set_pin_pull_mode+0xa0>)
    498e:	4b19      	ldr	r3, [pc, #100]	; (49f4 <_gpio_set_pin_pull_mode+0xac>)
    4990:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    4992:	79bb      	ldrb	r3, [r7, #6]
    4994:	2201      	movs	r2, #1
    4996:	409a      	lsls	r2, r3
    4998:	79fb      	ldrb	r3, [r7, #7]
    499a:	4619      	mov	r1, r3
    499c:	4812      	ldr	r0, [pc, #72]	; (49e8 <_gpio_set_pin_pull_mode+0xa0>)
    499e:	4b16      	ldr	r3, [pc, #88]	; (49f8 <_gpio_set_pin_pull_mode+0xb0>)
    49a0:	4798      	blx	r3
		break;
    49a2:	e01c      	b.n	49de <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    49a4:	79bb      	ldrb	r3, [r7, #6]
    49a6:	2201      	movs	r2, #1
    49a8:	409a      	lsls	r2, r3
    49aa:	79fb      	ldrb	r3, [r7, #7]
    49ac:	4619      	mov	r1, r3
    49ae:	480e      	ldr	r0, [pc, #56]	; (49e8 <_gpio_set_pin_pull_mode+0xa0>)
    49b0:	4b0f      	ldr	r3, [pc, #60]	; (49f0 <_gpio_set_pin_pull_mode+0xa8>)
    49b2:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    49b4:	79ba      	ldrb	r2, [r7, #6]
    49b6:	79fb      	ldrb	r3, [r7, #7]
    49b8:	4619      	mov	r1, r3
    49ba:	480b      	ldr	r0, [pc, #44]	; (49e8 <_gpio_set_pin_pull_mode+0xa0>)
    49bc:	4b0d      	ldr	r3, [pc, #52]	; (49f4 <_gpio_set_pin_pull_mode+0xac>)
    49be:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    49c0:	79bb      	ldrb	r3, [r7, #6]
    49c2:	2201      	movs	r2, #1
    49c4:	409a      	lsls	r2, r3
    49c6:	79fb      	ldrb	r3, [r7, #7]
    49c8:	4619      	mov	r1, r3
    49ca:	4807      	ldr	r0, [pc, #28]	; (49e8 <_gpio_set_pin_pull_mode+0xa0>)
    49cc:	4b0b      	ldr	r3, [pc, #44]	; (49fc <_gpio_set_pin_pull_mode+0xb4>)
    49ce:	4798      	blx	r3
		break;
    49d0:	e005      	b.n	49de <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    49d2:	2289      	movs	r2, #137	; 0x89
    49d4:	490a      	ldr	r1, [pc, #40]	; (4a00 <_gpio_set_pin_pull_mode+0xb8>)
    49d6:	2000      	movs	r0, #0
    49d8:	4b0a      	ldr	r3, [pc, #40]	; (4a04 <_gpio_set_pin_pull_mode+0xbc>)
    49da:	4798      	blx	r3
		break;
    49dc:	bf00      	nop
	}
}
    49de:	bf00      	nop
    49e0:	3708      	adds	r7, #8
    49e2:	46bd      	mov	sp, r7
    49e4:	bd80      	pop	{r7, pc}
    49e6:	bf00      	nop
    49e8:	41008000 	.word	0x41008000
    49ec:	000047af 	.word	0x000047af
    49f0:	000045db 	.word	0x000045db
    49f4:	0000476b 	.word	0x0000476b
    49f8:	00004603 	.word	0x00004603
    49fc:	0000462b 	.word	0x0000462b
    4a00:	0002011c 	.word	0x0002011c
    4a04:	00007d5d 	.word	0x00007d5d

00004a08 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    4a08:	b590      	push	{r4, r7, lr}
    4a0a:	b085      	sub	sp, #20
    4a0c:	af00      	add	r7, sp, #0
    4a0e:	6078      	str	r0, [r7, #4]
    4a10:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    4a12:	687b      	ldr	r3, [r7, #4]
    4a14:	095b      	lsrs	r3, r3, #5
    4a16:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    4a18:	687b      	ldr	r3, [r7, #4]
    4a1a:	b2db      	uxtb	r3, r3
    4a1c:	f003 031f 	and.w	r3, r3, #31
    4a20:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    4a22:	683b      	ldr	r3, [r7, #0]
    4a24:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a28:	d106      	bne.n	4a38 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    4a2a:	7bba      	ldrb	r2, [r7, #14]
    4a2c:	7bf9      	ldrb	r1, [r7, #15]
    4a2e:	2300      	movs	r3, #0
    4a30:	4812      	ldr	r0, [pc, #72]	; (4a7c <_gpio_set_pin_function+0x74>)
    4a32:	4c13      	ldr	r4, [pc, #76]	; (4a80 <_gpio_set_pin_function+0x78>)
    4a34:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    4a36:	e01d      	b.n	4a74 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    4a38:	7bba      	ldrb	r2, [r7, #14]
    4a3a:	7bf9      	ldrb	r1, [r7, #15]
    4a3c:	2301      	movs	r3, #1
    4a3e:	480f      	ldr	r0, [pc, #60]	; (4a7c <_gpio_set_pin_function+0x74>)
    4a40:	4c0f      	ldr	r4, [pc, #60]	; (4a80 <_gpio_set_pin_function+0x78>)
    4a42:	47a0      	blx	r4
		if (pin & 1) {
    4a44:	7bbb      	ldrb	r3, [r7, #14]
    4a46:	f003 0301 	and.w	r3, r3, #1
    4a4a:	2b00      	cmp	r3, #0
    4a4c:	d009      	beq.n	4a62 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    4a4e:	7bbb      	ldrb	r3, [r7, #14]
    4a50:	085b      	lsrs	r3, r3, #1
    4a52:	b2da      	uxtb	r2, r3
    4a54:	683b      	ldr	r3, [r7, #0]
    4a56:	b2db      	uxtb	r3, r3
    4a58:	7bf9      	ldrb	r1, [r7, #15]
    4a5a:	4808      	ldr	r0, [pc, #32]	; (4a7c <_gpio_set_pin_function+0x74>)
    4a5c:	4c09      	ldr	r4, [pc, #36]	; (4a84 <_gpio_set_pin_function+0x7c>)
    4a5e:	47a0      	blx	r4
}
    4a60:	e008      	b.n	4a74 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    4a62:	7bbb      	ldrb	r3, [r7, #14]
    4a64:	085b      	lsrs	r3, r3, #1
    4a66:	b2da      	uxtb	r2, r3
    4a68:	683b      	ldr	r3, [r7, #0]
    4a6a:	b2db      	uxtb	r3, r3
    4a6c:	7bf9      	ldrb	r1, [r7, #15]
    4a6e:	4803      	ldr	r0, [pc, #12]	; (4a7c <_gpio_set_pin_function+0x74>)
    4a70:	4c05      	ldr	r4, [pc, #20]	; (4a88 <_gpio_set_pin_function+0x80>)
    4a72:	47a0      	blx	r4
}
    4a74:	bf00      	nop
    4a76:	3714      	adds	r7, #20
    4a78:	46bd      	mov	sp, r7
    4a7a:	bd90      	pop	{r4, r7, pc}
    4a7c:	41008000 	.word	0x41008000
    4a80:	00004711 	.word	0x00004711
    4a84:	000046b3 	.word	0x000046b3
    4a88:	00004653 	.word	0x00004653

00004a8c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    4a8c:	b580      	push	{r7, lr}
    4a8e:	b082      	sub	sp, #8
    4a90:	af00      	add	r7, sp, #0
    4a92:	4603      	mov	r3, r0
    4a94:	460a      	mov	r2, r1
    4a96:	71fb      	strb	r3, [r7, #7]
    4a98:	4613      	mov	r3, r2
    4a9a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    4a9c:	79fb      	ldrb	r3, [r7, #7]
    4a9e:	095b      	lsrs	r3, r3, #5
    4aa0:	b2d8      	uxtb	r0, r3
    4aa2:	79fb      	ldrb	r3, [r7, #7]
    4aa4:	f003 031f 	and.w	r3, r3, #31
    4aa8:	b2db      	uxtb	r3, r3
    4aaa:	79ba      	ldrb	r2, [r7, #6]
    4aac:	4619      	mov	r1, r3
    4aae:	4b03      	ldr	r3, [pc, #12]	; (4abc <gpio_set_pin_pull_mode+0x30>)
    4ab0:	4798      	blx	r3
}
    4ab2:	bf00      	nop
    4ab4:	3708      	adds	r7, #8
    4ab6:	46bd      	mov	sp, r7
    4ab8:	bd80      	pop	{r7, pc}
    4aba:	bf00      	nop
    4abc:	00004949 	.word	0x00004949

00004ac0 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    4ac0:	b580      	push	{r7, lr}
    4ac2:	b082      	sub	sp, #8
    4ac4:	af00      	add	r7, sp, #0
    4ac6:	6078      	str	r0, [r7, #4]
    4ac8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    4aca:	6839      	ldr	r1, [r7, #0]
    4acc:	6878      	ldr	r0, [r7, #4]
    4ace:	4b03      	ldr	r3, [pc, #12]	; (4adc <gpio_set_pin_function+0x1c>)
    4ad0:	4798      	blx	r3
}
    4ad2:	bf00      	nop
    4ad4:	3708      	adds	r7, #8
    4ad6:	46bd      	mov	sp, r7
    4ad8:	bd80      	pop	{r7, pc}
    4ada:	bf00      	nop
    4adc:	00004a09 	.word	0x00004a09

00004ae0 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    4ae0:	b580      	push	{r7, lr}
    4ae2:	b082      	sub	sp, #8
    4ae4:	af00      	add	r7, sp, #0
    4ae6:	4603      	mov	r3, r0
    4ae8:	460a      	mov	r2, r1
    4aea:	71fb      	strb	r3, [r7, #7]
    4aec:	4613      	mov	r3, r2
    4aee:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    4af0:	79fb      	ldrb	r3, [r7, #7]
    4af2:	095b      	lsrs	r3, r3, #5
    4af4:	b2d8      	uxtb	r0, r3
    4af6:	79fb      	ldrb	r3, [r7, #7]
    4af8:	f003 031f 	and.w	r3, r3, #31
    4afc:	2201      	movs	r2, #1
    4afe:	fa02 f303 	lsl.w	r3, r2, r3
    4b02:	79ba      	ldrb	r2, [r7, #6]
    4b04:	4619      	mov	r1, r3
    4b06:	4b03      	ldr	r3, [pc, #12]	; (4b14 <gpio_set_pin_direction+0x34>)
    4b08:	4798      	blx	r3
}
    4b0a:	bf00      	nop
    4b0c:	3708      	adds	r7, #8
    4b0e:	46bd      	mov	sp, r7
    4b10:	bd80      	pop	{r7, pc}
    4b12:	bf00      	nop
    4b14:	0000481d 	.word	0x0000481d

00004b18 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    4b18:	b580      	push	{r7, lr}
    4b1a:	b082      	sub	sp, #8
    4b1c:	af00      	add	r7, sp, #0
    4b1e:	4603      	mov	r3, r0
    4b20:	460a      	mov	r2, r1
    4b22:	71fb      	strb	r3, [r7, #7]
    4b24:	4613      	mov	r3, r2
    4b26:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    4b28:	79fb      	ldrb	r3, [r7, #7]
    4b2a:	095b      	lsrs	r3, r3, #5
    4b2c:	b2d8      	uxtb	r0, r3
    4b2e:	79fb      	ldrb	r3, [r7, #7]
    4b30:	f003 031f 	and.w	r3, r3, #31
    4b34:	2201      	movs	r2, #1
    4b36:	fa02 f303 	lsl.w	r3, r2, r3
    4b3a:	79ba      	ldrb	r2, [r7, #6]
    4b3c:	4619      	mov	r1, r3
    4b3e:	4b03      	ldr	r3, [pc, #12]	; (4b4c <gpio_set_pin_level+0x34>)
    4b40:	4798      	blx	r3
}
    4b42:	bf00      	nop
    4b44:	3708      	adds	r7, #8
    4b46:	46bd      	mov	sp, r7
    4b48:	bd80      	pop	{r7, pc}
    4b4a:	bf00      	nop
    4b4c:	00004905 	.word	0x00004905

00004b50 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    4b50:	b580      	push	{r7, lr}
    4b52:	af00      	add	r7, sp, #0
	_init_chip();
    4b54:	4b01      	ldr	r3, [pc, #4]	; (4b5c <init_mcu+0xc>)
    4b56:	4798      	blx	r3
}
    4b58:	bf00      	nop
    4b5a:	bd80      	pop	{r7, pc}
    4b5c:	0000896d 	.word	0x0000896d

00004b60 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    4b60:	b580      	push	{r7, lr}
    4b62:	b082      	sub	sp, #8
    4b64:	af00      	add	r7, sp, #0
    4b66:	6078      	str	r0, [r7, #4]
    4b68:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    4b6a:	687b      	ldr	r3, [r7, #4]
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	d004      	beq.n	4b7a <wdt_init+0x1a>
    4b70:	683b      	ldr	r3, [r7, #0]
    4b72:	2b00      	cmp	r3, #0
    4b74:	d001      	beq.n	4b7a <wdt_init+0x1a>
    4b76:	2301      	movs	r3, #1
    4b78:	e000      	b.n	4b7c <wdt_init+0x1c>
    4b7a:	2300      	movs	r3, #0
    4b7c:	f003 0301 	and.w	r3, r3, #1
    4b80:	b2db      	uxtb	r3, r3
    4b82:	2248      	movs	r2, #72	; 0x48
    4b84:	4907      	ldr	r1, [pc, #28]	; (4ba4 <wdt_init+0x44>)
    4b86:	4618      	mov	r0, r3
    4b88:	4b07      	ldr	r3, [pc, #28]	; (4ba8 <wdt_init+0x48>)
    4b8a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    4b8c:	687b      	ldr	r3, [r7, #4]
    4b8e:	683a      	ldr	r2, [r7, #0]
    4b90:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    4b92:	687b      	ldr	r3, [r7, #4]
    4b94:	4618      	mov	r0, r3
    4b96:	4b05      	ldr	r3, [pc, #20]	; (4bac <wdt_init+0x4c>)
    4b98:	4798      	blx	r3
    4b9a:	4603      	mov	r3, r0
}
    4b9c:	4618      	mov	r0, r3
    4b9e:	3708      	adds	r7, #8
    4ba0:	46bd      	mov	sp, r7
    4ba2:	bd80      	pop	{r7, pc}
    4ba4:	00020138 	.word	0x00020138
    4ba8:	00007d5d 	.word	0x00007d5d
    4bac:	000106d5 	.word	0x000106d5

00004bb0 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    4bb0:	b580      	push	{r7, lr}
    4bb2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    4bb4:	4804      	ldr	r0, [pc, #16]	; (4bc8 <CRC_CALC_init+0x18>)
    4bb6:	4b05      	ldr	r3, [pc, #20]	; (4bcc <CRC_CALC_init+0x1c>)
    4bb8:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    4bba:	4905      	ldr	r1, [pc, #20]	; (4bd0 <CRC_CALC_init+0x20>)
    4bbc:	4805      	ldr	r0, [pc, #20]	; (4bd4 <CRC_CALC_init+0x24>)
    4bbe:	4b06      	ldr	r3, [pc, #24]	; (4bd8 <CRC_CALC_init+0x28>)
    4bc0:	4798      	blx	r3
}
    4bc2:	bf00      	nop
    4bc4:	bd80      	pop	{r7, pc}
    4bc6:	bf00      	nop
    4bc8:	40000800 	.word	0x40000800
    4bcc:	000043f3 	.word	0x000043f3
    4bd0:	41002000 	.word	0x41002000
    4bd4:	2000ab6c 	.word	0x2000ab6c
    4bd8:	00005e85 	.word	0x00005e85

00004bdc <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    4bdc:	b580      	push	{r7, lr}
    4bde:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4be0:	2244      	movs	r2, #68	; 0x44
    4be2:	2104      	movs	r1, #4
    4be4:	4832      	ldr	r0, [pc, #200]	; (4cb0 <EXTERNAL_IRQ_0_init+0xd4>)
    4be6:	4b33      	ldr	r3, [pc, #204]	; (4cb4 <EXTERNAL_IRQ_0_init+0xd8>)
    4be8:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    4bea:	4833      	ldr	r0, [pc, #204]	; (4cb8 <EXTERNAL_IRQ_0_init+0xdc>)
    4bec:	4b33      	ldr	r3, [pc, #204]	; (4cbc <EXTERNAL_IRQ_0_init+0xe0>)
    4bee:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    4bf0:	2101      	movs	r1, #1
    4bf2:	2040      	movs	r0, #64	; 0x40
    4bf4:	4b32      	ldr	r3, [pc, #200]	; (4cc0 <EXTERNAL_IRQ_0_init+0xe4>)
    4bf6:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    4bf8:	2100      	movs	r1, #0
    4bfa:	2040      	movs	r0, #64	; 0x40
    4bfc:	4b31      	ldr	r3, [pc, #196]	; (4cc4 <EXTERNAL_IRQ_0_init+0xe8>)
    4bfe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    4c00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    4c04:	2040      	movs	r0, #64	; 0x40
    4c06:	4b30      	ldr	r3, [pc, #192]	; (4cc8 <EXTERNAL_IRQ_0_init+0xec>)
    4c08:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    4c0a:	2101      	movs	r1, #1
    4c0c:	2004      	movs	r0, #4
    4c0e:	4b2c      	ldr	r3, [pc, #176]	; (4cc0 <EXTERNAL_IRQ_0_init+0xe4>)
    4c10:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    4c12:	2102      	movs	r1, #2
    4c14:	2004      	movs	r0, #4
    4c16:	4b2b      	ldr	r3, [pc, #172]	; (4cc4 <EXTERNAL_IRQ_0_init+0xe8>)
    4c18:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    4c1a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    4c1e:	2004      	movs	r0, #4
    4c20:	4b29      	ldr	r3, [pc, #164]	; (4cc8 <EXTERNAL_IRQ_0_init+0xec>)
    4c22:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    4c24:	2101      	movs	r1, #1
    4c26:	2005      	movs	r0, #5
    4c28:	4b25      	ldr	r3, [pc, #148]	; (4cc0 <EXTERNAL_IRQ_0_init+0xe4>)
    4c2a:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    4c2c:	2102      	movs	r1, #2
    4c2e:	2005      	movs	r0, #5
    4c30:	4b24      	ldr	r3, [pc, #144]	; (4cc4 <EXTERNAL_IRQ_0_init+0xe8>)
    4c32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    4c34:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    4c38:	2005      	movs	r0, #5
    4c3a:	4b23      	ldr	r3, [pc, #140]	; (4cc8 <EXTERNAL_IRQ_0_init+0xec>)
    4c3c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    4c3e:	2101      	movs	r1, #1
    4c40:	2056      	movs	r0, #86	; 0x56
    4c42:	4b1f      	ldr	r3, [pc, #124]	; (4cc0 <EXTERNAL_IRQ_0_init+0xe4>)
    4c44:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    4c46:	2102      	movs	r1, #2
    4c48:	2056      	movs	r0, #86	; 0x56
    4c4a:	4b1e      	ldr	r3, [pc, #120]	; (4cc4 <EXTERNAL_IRQ_0_init+0xe8>)
    4c4c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    4c4e:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    4c52:	2056      	movs	r0, #86	; 0x56
    4c54:	4b1c      	ldr	r3, [pc, #112]	; (4cc8 <EXTERNAL_IRQ_0_init+0xec>)
    4c56:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    4c58:	2101      	movs	r1, #1
    4c5a:	2057      	movs	r0, #87	; 0x57
    4c5c:	4b18      	ldr	r3, [pc, #96]	; (4cc0 <EXTERNAL_IRQ_0_init+0xe4>)
    4c5e:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    4c60:	2102      	movs	r1, #2
    4c62:	2057      	movs	r0, #87	; 0x57
    4c64:	4b17      	ldr	r3, [pc, #92]	; (4cc4 <EXTERNAL_IRQ_0_init+0xe8>)
    4c66:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    4c68:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    4c6c:	2057      	movs	r0, #87	; 0x57
    4c6e:	4b16      	ldr	r3, [pc, #88]	; (4cc8 <EXTERNAL_IRQ_0_init+0xec>)
    4c70:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    4c72:	2101      	movs	r1, #1
    4c74:	2028      	movs	r0, #40	; 0x28
    4c76:	4b12      	ldr	r3, [pc, #72]	; (4cc0 <EXTERNAL_IRQ_0_init+0xe4>)
    4c78:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    4c7a:	2100      	movs	r1, #0
    4c7c:	2028      	movs	r0, #40	; 0x28
    4c7e:	4b11      	ldr	r3, [pc, #68]	; (4cc4 <EXTERNAL_IRQ_0_init+0xe8>)
    4c80:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    4c82:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    4c86:	2028      	movs	r0, #40	; 0x28
    4c88:	4b0f      	ldr	r3, [pc, #60]	; (4cc8 <EXTERNAL_IRQ_0_init+0xec>)
    4c8a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    4c8c:	2101      	movs	r1, #1
    4c8e:	2029      	movs	r0, #41	; 0x29
    4c90:	4b0b      	ldr	r3, [pc, #44]	; (4cc0 <EXTERNAL_IRQ_0_init+0xe4>)
    4c92:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    4c94:	2100      	movs	r1, #0
    4c96:	2029      	movs	r0, #41	; 0x29
    4c98:	4b0a      	ldr	r3, [pc, #40]	; (4cc4 <EXTERNAL_IRQ_0_init+0xe8>)
    4c9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    4c9c:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    4ca0:	2029      	movs	r0, #41	; 0x29
    4ca2:	4b09      	ldr	r3, [pc, #36]	; (4cc8 <EXTERNAL_IRQ_0_init+0xec>)
    4ca4:	4798      	blx	r3

	ext_irq_init();
    4ca6:	4b09      	ldr	r3, [pc, #36]	; (4ccc <EXTERNAL_IRQ_0_init+0xf0>)
    4ca8:	4798      	blx	r3
}
    4caa:	bf00      	nop
    4cac:	bd80      	pop	{r7, pc}
    4cae:	bf00      	nop
    4cb0:	40001c00 	.word	0x40001c00
    4cb4:	0000426d 	.word	0x0000426d
    4cb8:	40000800 	.word	0x40000800
    4cbc:	00004353 	.word	0x00004353
    4cc0:	00004ae1 	.word	0x00004ae1
    4cc4:	00004a8d 	.word	0x00004a8d
    4cc8:	00004ac1 	.word	0x00004ac1
    4ccc:	00005fe9 	.word	0x00005fe9

00004cd0 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    4cd0:	b580      	push	{r7, lr}
    4cd2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4cd4:	2244      	movs	r2, #68	; 0x44
    4cd6:	210b      	movs	r1, #11
    4cd8:	4807      	ldr	r0, [pc, #28]	; (4cf8 <EVENT_SYSTEM_0_init+0x28>)
    4cda:	4b08      	ldr	r3, [pc, #32]	; (4cfc <EVENT_SYSTEM_0_init+0x2c>)
    4cdc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4cde:	2244      	movs	r2, #68	; 0x44
    4ce0:	210c      	movs	r1, #12
    4ce2:	4805      	ldr	r0, [pc, #20]	; (4cf8 <EVENT_SYSTEM_0_init+0x28>)
    4ce4:	4b05      	ldr	r3, [pc, #20]	; (4cfc <EVENT_SYSTEM_0_init+0x2c>)
    4ce6:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    4ce8:	4805      	ldr	r0, [pc, #20]	; (4d00 <EVENT_SYSTEM_0_init+0x30>)
    4cea:	4b06      	ldr	r3, [pc, #24]	; (4d04 <EVENT_SYSTEM_0_init+0x34>)
    4cec:	4798      	blx	r3

	event_system_init();
    4cee:	4b06      	ldr	r3, [pc, #24]	; (4d08 <EVENT_SYSTEM_0_init+0x38>)
    4cf0:	4798      	blx	r3
}
    4cf2:	bf00      	nop
    4cf4:	bd80      	pop	{r7, pc}
    4cf6:	bf00      	nop
    4cf8:	40001c00 	.word	0x40001c00
    4cfc:	0000426d 	.word	0x0000426d
    4d00:	40000800 	.word	0x40000800
    4d04:	00004413 	.word	0x00004413
    4d08:	00005fd5 	.word	0x00005fd5

00004d0c <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    4d0c:	b580      	push	{r7, lr}
    4d0e:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    4d10:	2101      	movs	r1, #1
    4d12:	202b      	movs	r0, #43	; 0x2b
    4d14:	4b2b      	ldr	r3, [pc, #172]	; (4dc4 <QSPI_N25Q256_PORT_init+0xb8>)
    4d16:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    4d18:	2100      	movs	r1, #0
    4d1a:	202b      	movs	r0, #43	; 0x2b
    4d1c:	4b2a      	ldr	r3, [pc, #168]	; (4dc8 <QSPI_N25Q256_PORT_init+0xbc>)
    4d1e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    4d20:	492a      	ldr	r1, [pc, #168]	; (4dcc <QSPI_N25Q256_PORT_init+0xc0>)
    4d22:	202b      	movs	r0, #43	; 0x2b
    4d24:	4b2a      	ldr	r3, [pc, #168]	; (4dd0 <QSPI_N25Q256_PORT_init+0xc4>)
    4d26:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    4d28:	2102      	movs	r1, #2
    4d2a:	2008      	movs	r0, #8
    4d2c:	4b25      	ldr	r3, [pc, #148]	; (4dc4 <QSPI_N25Q256_PORT_init+0xb8>)
    4d2e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    4d30:	2100      	movs	r1, #0
    4d32:	2008      	movs	r0, #8
    4d34:	4b27      	ldr	r3, [pc, #156]	; (4dd4 <QSPI_N25Q256_PORT_init+0xc8>)
    4d36:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    4d38:	2100      	movs	r1, #0
    4d3a:	2008      	movs	r0, #8
    4d3c:	4b22      	ldr	r3, [pc, #136]	; (4dc8 <QSPI_N25Q256_PORT_init+0xbc>)
    4d3e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    4d40:	4925      	ldr	r1, [pc, #148]	; (4dd8 <QSPI_N25Q256_PORT_init+0xcc>)
    4d42:	2008      	movs	r0, #8
    4d44:	4b22      	ldr	r3, [pc, #136]	; (4dd0 <QSPI_N25Q256_PORT_init+0xc4>)
    4d46:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    4d48:	2102      	movs	r1, #2
    4d4a:	2009      	movs	r0, #9
    4d4c:	4b1d      	ldr	r3, [pc, #116]	; (4dc4 <QSPI_N25Q256_PORT_init+0xb8>)
    4d4e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    4d50:	2100      	movs	r1, #0
    4d52:	2009      	movs	r0, #9
    4d54:	4b1f      	ldr	r3, [pc, #124]	; (4dd4 <QSPI_N25Q256_PORT_init+0xc8>)
    4d56:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    4d58:	2100      	movs	r1, #0
    4d5a:	2009      	movs	r0, #9
    4d5c:	4b1a      	ldr	r3, [pc, #104]	; (4dc8 <QSPI_N25Q256_PORT_init+0xbc>)
    4d5e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    4d60:	491e      	ldr	r1, [pc, #120]	; (4ddc <QSPI_N25Q256_PORT_init+0xd0>)
    4d62:	2009      	movs	r0, #9
    4d64:	4b1a      	ldr	r3, [pc, #104]	; (4dd0 <QSPI_N25Q256_PORT_init+0xc4>)
    4d66:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    4d68:	2102      	movs	r1, #2
    4d6a:	200a      	movs	r0, #10
    4d6c:	4b15      	ldr	r3, [pc, #84]	; (4dc4 <QSPI_N25Q256_PORT_init+0xb8>)
    4d6e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    4d70:	2100      	movs	r1, #0
    4d72:	200a      	movs	r0, #10
    4d74:	4b17      	ldr	r3, [pc, #92]	; (4dd4 <QSPI_N25Q256_PORT_init+0xc8>)
    4d76:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    4d78:	2100      	movs	r1, #0
    4d7a:	200a      	movs	r0, #10
    4d7c:	4b12      	ldr	r3, [pc, #72]	; (4dc8 <QSPI_N25Q256_PORT_init+0xbc>)
    4d7e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    4d80:	4917      	ldr	r1, [pc, #92]	; (4de0 <QSPI_N25Q256_PORT_init+0xd4>)
    4d82:	200a      	movs	r0, #10
    4d84:	4b12      	ldr	r3, [pc, #72]	; (4dd0 <QSPI_N25Q256_PORT_init+0xc4>)
    4d86:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    4d88:	2102      	movs	r1, #2
    4d8a:	200b      	movs	r0, #11
    4d8c:	4b0d      	ldr	r3, [pc, #52]	; (4dc4 <QSPI_N25Q256_PORT_init+0xb8>)
    4d8e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    4d90:	2100      	movs	r1, #0
    4d92:	200b      	movs	r0, #11
    4d94:	4b0f      	ldr	r3, [pc, #60]	; (4dd4 <QSPI_N25Q256_PORT_init+0xc8>)
    4d96:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    4d98:	2100      	movs	r1, #0
    4d9a:	200b      	movs	r0, #11
    4d9c:	4b0a      	ldr	r3, [pc, #40]	; (4dc8 <QSPI_N25Q256_PORT_init+0xbc>)
    4d9e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    4da0:	4910      	ldr	r1, [pc, #64]	; (4de4 <QSPI_N25Q256_PORT_init+0xd8>)
    4da2:	200b      	movs	r0, #11
    4da4:	4b0a      	ldr	r3, [pc, #40]	; (4dd0 <QSPI_N25Q256_PORT_init+0xc4>)
    4da6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    4da8:	2101      	movs	r1, #1
    4daa:	202a      	movs	r0, #42	; 0x2a
    4dac:	4b05      	ldr	r3, [pc, #20]	; (4dc4 <QSPI_N25Q256_PORT_init+0xb8>)
    4dae:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    4db0:	2100      	movs	r1, #0
    4db2:	202a      	movs	r0, #42	; 0x2a
    4db4:	4b04      	ldr	r3, [pc, #16]	; (4dc8 <QSPI_N25Q256_PORT_init+0xbc>)
    4db6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    4db8:	490b      	ldr	r1, [pc, #44]	; (4de8 <QSPI_N25Q256_PORT_init+0xdc>)
    4dba:	202a      	movs	r0, #42	; 0x2a
    4dbc:	4b04      	ldr	r3, [pc, #16]	; (4dd0 <QSPI_N25Q256_PORT_init+0xc4>)
    4dbe:	4798      	blx	r3
}
    4dc0:	bf00      	nop
    4dc2:	bd80      	pop	{r7, pc}
    4dc4:	00004ae1 	.word	0x00004ae1
    4dc8:	00004a8d 	.word	0x00004a8d
    4dcc:	002b0007 	.word	0x002b0007
    4dd0:	00004ac1 	.word	0x00004ac1
    4dd4:	00004b19 	.word	0x00004b19
    4dd8:	00080007 	.word	0x00080007
    4ddc:	00090007 	.word	0x00090007
    4de0:	000a0007 	.word	0x000a0007
    4de4:	000b0007 	.word	0x000b0007
    4de8:	002a0007 	.word	0x002a0007

00004dec <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    4dec:	b580      	push	{r7, lr}
    4dee:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    4df0:	4805      	ldr	r0, [pc, #20]	; (4e08 <QSPI_N25Q256_CLOCK_init+0x1c>)
    4df2:	4b06      	ldr	r3, [pc, #24]	; (4e0c <QSPI_N25Q256_CLOCK_init+0x20>)
    4df4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    4df6:	4804      	ldr	r0, [pc, #16]	; (4e08 <QSPI_N25Q256_CLOCK_init+0x1c>)
    4df8:	4b05      	ldr	r3, [pc, #20]	; (4e10 <QSPI_N25Q256_CLOCK_init+0x24>)
    4dfa:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    4dfc:	4802      	ldr	r0, [pc, #8]	; (4e08 <QSPI_N25Q256_CLOCK_init+0x1c>)
    4dfe:	4b05      	ldr	r3, [pc, #20]	; (4e14 <QSPI_N25Q256_CLOCK_init+0x28>)
    4e00:	4798      	blx	r3
}
    4e02:	bf00      	nop
    4e04:	bd80      	pop	{r7, pc}
    4e06:	bf00      	nop
    4e08:	40000800 	.word	0x40000800
    4e0c:	000042b3 	.word	0x000042b3
    4e10:	000042f3 	.word	0x000042f3
    4e14:	000044f3 	.word	0x000044f3

00004e18 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    4e18:	b580      	push	{r7, lr}
    4e1a:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    4e1c:	4b04      	ldr	r3, [pc, #16]	; (4e30 <QSPI_N25Q256_init+0x18>)
    4e1e:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    4e20:	4904      	ldr	r1, [pc, #16]	; (4e34 <QSPI_N25Q256_init+0x1c>)
    4e22:	4805      	ldr	r0, [pc, #20]	; (4e38 <QSPI_N25Q256_init+0x20>)
    4e24:	4b05      	ldr	r3, [pc, #20]	; (4e3c <QSPI_N25Q256_init+0x24>)
    4e26:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    4e28:	4b05      	ldr	r3, [pc, #20]	; (4e40 <QSPI_N25Q256_init+0x28>)
    4e2a:	4798      	blx	r3
}
    4e2c:	bf00      	nop
    4e2e:	bd80      	pop	{r7, pc}
    4e30:	00004ded 	.word	0x00004ded
    4e34:	42003400 	.word	0x42003400
    4e38:	2000a9c0 	.word	0x2000a9c0
    4e3c:	000066f1 	.word	0x000066f1
    4e40:	00004d0d 	.word	0x00004d0d

00004e44 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    4e44:	b580      	push	{r7, lr}
    4e46:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    4e48:	4802      	ldr	r0, [pc, #8]	; (4e54 <DATETIME_CLOCK_CLOCK_init+0x10>)
    4e4a:	4b03      	ldr	r3, [pc, #12]	; (4e58 <DATETIME_CLOCK_CLOCK_init+0x14>)
    4e4c:	4798      	blx	r3
}
    4e4e:	bf00      	nop
    4e50:	bd80      	pop	{r7, pc}
    4e52:	bf00      	nop
    4e54:	40000800 	.word	0x40000800
    4e58:	00004333 	.word	0x00004333

00004e5c <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    4e5c:	b580      	push	{r7, lr}
    4e5e:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    4e60:	4b03      	ldr	r3, [pc, #12]	; (4e70 <DATETIME_CLOCK_init+0x14>)
    4e62:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    4e64:	4903      	ldr	r1, [pc, #12]	; (4e74 <DATETIME_CLOCK_init+0x18>)
    4e66:	4804      	ldr	r0, [pc, #16]	; (4e78 <DATETIME_CLOCK_init+0x1c>)
    4e68:	4b04      	ldr	r3, [pc, #16]	; (4e7c <DATETIME_CLOCK_init+0x20>)
    4e6a:	4798      	blx	r3
}
    4e6c:	bf00      	nop
    4e6e:	bd80      	pop	{r7, pc}
    4e70:	00004e45 	.word	0x00004e45
    4e74:	40002400 	.word	0x40002400
    4e78:	2000ab48 	.word	0x2000ab48
    4e7c:	00005b89 	.word	0x00005b89

00004e80 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    4e80:	b580      	push	{r7, lr}
    4e82:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    4e84:	2100      	movs	r1, #0
    4e86:	2010      	movs	r0, #16
    4e88:	4b11      	ldr	r3, [pc, #68]	; (4ed0 <SPI_MEMORIES_PORT_init+0x50>)
    4e8a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    4e8c:	2102      	movs	r1, #2
    4e8e:	2010      	movs	r0, #16
    4e90:	4b10      	ldr	r3, [pc, #64]	; (4ed4 <SPI_MEMORIES_PORT_init+0x54>)
    4e92:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    4e94:	4910      	ldr	r1, [pc, #64]	; (4ed8 <SPI_MEMORIES_PORT_init+0x58>)
    4e96:	2010      	movs	r0, #16
    4e98:	4b10      	ldr	r3, [pc, #64]	; (4edc <SPI_MEMORIES_PORT_init+0x5c>)
    4e9a:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    4e9c:	2100      	movs	r1, #0
    4e9e:	2011      	movs	r0, #17
    4ea0:	4b0b      	ldr	r3, [pc, #44]	; (4ed0 <SPI_MEMORIES_PORT_init+0x50>)
    4ea2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    4ea4:	2102      	movs	r1, #2
    4ea6:	2011      	movs	r0, #17
    4ea8:	4b0a      	ldr	r3, [pc, #40]	; (4ed4 <SPI_MEMORIES_PORT_init+0x54>)
    4eaa:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    4eac:	490c      	ldr	r1, [pc, #48]	; (4ee0 <SPI_MEMORIES_PORT_init+0x60>)
    4eae:	2011      	movs	r0, #17
    4eb0:	4b0a      	ldr	r3, [pc, #40]	; (4edc <SPI_MEMORIES_PORT_init+0x5c>)
    4eb2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    4eb4:	2101      	movs	r1, #1
    4eb6:	2012      	movs	r0, #18
    4eb8:	4b06      	ldr	r3, [pc, #24]	; (4ed4 <SPI_MEMORIES_PORT_init+0x54>)
    4eba:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    4ebc:	2100      	movs	r1, #0
    4ebe:	2012      	movs	r0, #18
    4ec0:	4b08      	ldr	r3, [pc, #32]	; (4ee4 <SPI_MEMORIES_PORT_init+0x64>)
    4ec2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    4ec4:	4908      	ldr	r1, [pc, #32]	; (4ee8 <SPI_MEMORIES_PORT_init+0x68>)
    4ec6:	2012      	movs	r0, #18
    4ec8:	4b04      	ldr	r3, [pc, #16]	; (4edc <SPI_MEMORIES_PORT_init+0x5c>)
    4eca:	4798      	blx	r3
}
    4ecc:	bf00      	nop
    4ece:	bd80      	pop	{r7, pc}
    4ed0:	00004b19 	.word	0x00004b19
    4ed4:	00004ae1 	.word	0x00004ae1
    4ed8:	00100002 	.word	0x00100002
    4edc:	00004ac1 	.word	0x00004ac1
    4ee0:	00110002 	.word	0x00110002
    4ee4:	00004a8d 	.word	0x00004a8d
    4ee8:	00120002 	.word	0x00120002

00004eec <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    4eec:	b580      	push	{r7, lr}
    4eee:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4ef0:	2245      	movs	r2, #69	; 0x45
    4ef2:	2108      	movs	r1, #8
    4ef4:	4806      	ldr	r0, [pc, #24]	; (4f10 <SPI_MEMORIES_CLOCK_init+0x24>)
    4ef6:	4b07      	ldr	r3, [pc, #28]	; (4f14 <SPI_MEMORIES_CLOCK_init+0x28>)
    4ef8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4efa:	224a      	movs	r2, #74	; 0x4a
    4efc:	2103      	movs	r1, #3
    4efe:	4804      	ldr	r0, [pc, #16]	; (4f10 <SPI_MEMORIES_CLOCK_init+0x24>)
    4f00:	4b04      	ldr	r3, [pc, #16]	; (4f14 <SPI_MEMORIES_CLOCK_init+0x28>)
    4f02:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    4f04:	4804      	ldr	r0, [pc, #16]	; (4f18 <SPI_MEMORIES_CLOCK_init+0x2c>)
    4f06:	4b05      	ldr	r3, [pc, #20]	; (4f1c <SPI_MEMORIES_CLOCK_init+0x30>)
    4f08:	4798      	blx	r3
}
    4f0a:	bf00      	nop
    4f0c:	bd80      	pop	{r7, pc}
    4f0e:	bf00      	nop
    4f10:	40001c00 	.word	0x40001c00
    4f14:	0000426d 	.word	0x0000426d
    4f18:	40000800 	.word	0x40000800
    4f1c:	00004373 	.word	0x00004373

00004f20 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    4f20:	b580      	push	{r7, lr}
    4f22:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    4f24:	4b04      	ldr	r3, [pc, #16]	; (4f38 <SPI_MEMORIES_init+0x18>)
    4f26:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    4f28:	4904      	ldr	r1, [pc, #16]	; (4f3c <SPI_MEMORIES_init+0x1c>)
    4f2a:	4805      	ldr	r0, [pc, #20]	; (4f40 <SPI_MEMORIES_init+0x20>)
    4f2c:	4b05      	ldr	r3, [pc, #20]	; (4f44 <SPI_MEMORIES_init+0x24>)
    4f2e:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    4f30:	4b05      	ldr	r3, [pc, #20]	; (4f48 <SPI_MEMORIES_init+0x28>)
    4f32:	4798      	blx	r3
}
    4f34:	bf00      	nop
    4f36:	bd80      	pop	{r7, pc}
    4f38:	00004eed 	.word	0x00004eed
    4f3c:	40003400 	.word	0x40003400
    4f40:	2000a928 	.word	0x2000a928
    4f44:	00006cc9 	.word	0x00006cc9
    4f48:	00004e81 	.word	0x00004e81

00004f4c <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    4f4c:	b580      	push	{r7, lr}
    4f4e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA12,
    4f50:	2100      	movs	r1, #0
    4f52:	200c      	movs	r0, #12
    4f54:	4b07      	ldr	r3, [pc, #28]	; (4f74 <I2C_SHARED_PORT_init+0x28>)
    4f56:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);
    4f58:	4907      	ldr	r1, [pc, #28]	; (4f78 <I2C_SHARED_PORT_init+0x2c>)
    4f5a:	200c      	movs	r0, #12
    4f5c:	4b07      	ldr	r3, [pc, #28]	; (4f7c <I2C_SHARED_PORT_init+0x30>)
    4f5e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA13,
    4f60:	2100      	movs	r1, #0
    4f62:	200d      	movs	r0, #13
    4f64:	4b03      	ldr	r3, [pc, #12]	; (4f74 <I2C_SHARED_PORT_init+0x28>)
    4f66:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
    4f68:	4905      	ldr	r1, [pc, #20]	; (4f80 <I2C_SHARED_PORT_init+0x34>)
    4f6a:	200d      	movs	r0, #13
    4f6c:	4b03      	ldr	r3, [pc, #12]	; (4f7c <I2C_SHARED_PORT_init+0x30>)
    4f6e:	4798      	blx	r3
}
    4f70:	bf00      	nop
    4f72:	bd80      	pop	{r7, pc}
    4f74:	00004a8d 	.word	0x00004a8d
    4f78:	000c0002 	.word	0x000c0002
    4f7c:	00004ac1 	.word	0x00004ac1
    4f80:	000d0002 	.word	0x000d0002

00004f84 <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    4f84:	b580      	push	{r7, lr}
    4f86:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4f88:	2242      	movs	r2, #66	; 0x42
    4f8a:	2117      	movs	r1, #23
    4f8c:	4806      	ldr	r0, [pc, #24]	; (4fa8 <I2C_SHARED_CLOCK_init+0x24>)
    4f8e:	4b07      	ldr	r3, [pc, #28]	; (4fac <I2C_SHARED_CLOCK_init+0x28>)
    4f90:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4f92:	224a      	movs	r2, #74	; 0x4a
    4f94:	2103      	movs	r1, #3
    4f96:	4804      	ldr	r0, [pc, #16]	; (4fa8 <I2C_SHARED_CLOCK_init+0x24>)
    4f98:	4b04      	ldr	r3, [pc, #16]	; (4fac <I2C_SHARED_CLOCK_init+0x28>)
    4f9a:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
    4f9c:	4804      	ldr	r0, [pc, #16]	; (4fb0 <I2C_SHARED_CLOCK_init+0x2c>)
    4f9e:	4b05      	ldr	r3, [pc, #20]	; (4fb4 <I2C_SHARED_CLOCK_init+0x30>)
    4fa0:	4798      	blx	r3
}
    4fa2:	bf00      	nop
    4fa4:	bd80      	pop	{r7, pc}
    4fa6:	bf00      	nop
    4fa8:	40001c00 	.word	0x40001c00
    4fac:	0000426d 	.word	0x0000426d
    4fb0:	40000800 	.word	0x40000800
    4fb4:	00004433 	.word	0x00004433

00004fb8 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    4fb8:	b580      	push	{r7, lr}
    4fba:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    4fbc:	4b04      	ldr	r3, [pc, #16]	; (4fd0 <I2C_SHARED_init+0x18>)
    4fbe:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM2);
    4fc0:	4904      	ldr	r1, [pc, #16]	; (4fd4 <I2C_SHARED_init+0x1c>)
    4fc2:	4805      	ldr	r0, [pc, #20]	; (4fd8 <I2C_SHARED_init+0x20>)
    4fc4:	4b05      	ldr	r3, [pc, #20]	; (4fdc <I2C_SHARED_init+0x24>)
    4fc6:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    4fc8:	4b05      	ldr	r3, [pc, #20]	; (4fe0 <I2C_SHARED_init+0x28>)
    4fca:	4798      	blx	r3
}
    4fcc:	bf00      	nop
    4fce:	bd80      	pop	{r7, pc}
    4fd0:	00004f85 	.word	0x00004f85
    4fd4:	41012000 	.word	0x41012000
    4fd8:	2000aac8 	.word	0x2000aac8
    4fdc:	00006591 	.word	0x00006591
    4fe0:	00004f4d 	.word	0x00004f4d

00004fe4 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    4fe4:	b580      	push	{r7, lr}
    4fe6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    4fe8:	2100      	movs	r1, #0
    4fea:	203b      	movs	r0, #59	; 0x3b
    4fec:	4b11      	ldr	r3, [pc, #68]	; (5034 <SPI_TEMP_PORT_init+0x50>)
    4fee:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    4ff0:	2102      	movs	r1, #2
    4ff2:	203b      	movs	r0, #59	; 0x3b
    4ff4:	4b10      	ldr	r3, [pc, #64]	; (5038 <SPI_TEMP_PORT_init+0x54>)
    4ff6:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    4ff8:	4910      	ldr	r1, [pc, #64]	; (503c <SPI_TEMP_PORT_init+0x58>)
    4ffa:	203b      	movs	r0, #59	; 0x3b
    4ffc:	4b10      	ldr	r3, [pc, #64]	; (5040 <SPI_TEMP_PORT_init+0x5c>)
    4ffe:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    5000:	2100      	movs	r1, #0
    5002:	203a      	movs	r0, #58	; 0x3a
    5004:	4b0b      	ldr	r3, [pc, #44]	; (5034 <SPI_TEMP_PORT_init+0x50>)
    5006:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    5008:	2102      	movs	r1, #2
    500a:	203a      	movs	r0, #58	; 0x3a
    500c:	4b0a      	ldr	r3, [pc, #40]	; (5038 <SPI_TEMP_PORT_init+0x54>)
    500e:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    5010:	490c      	ldr	r1, [pc, #48]	; (5044 <SPI_TEMP_PORT_init+0x60>)
    5012:	203a      	movs	r0, #58	; 0x3a
    5014:	4b0a      	ldr	r3, [pc, #40]	; (5040 <SPI_TEMP_PORT_init+0x5c>)
    5016:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    5018:	2101      	movs	r1, #1
    501a:	203c      	movs	r0, #60	; 0x3c
    501c:	4b06      	ldr	r3, [pc, #24]	; (5038 <SPI_TEMP_PORT_init+0x54>)
    501e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    5020:	2100      	movs	r1, #0
    5022:	203c      	movs	r0, #60	; 0x3c
    5024:	4b08      	ldr	r3, [pc, #32]	; (5048 <SPI_TEMP_PORT_init+0x64>)
    5026:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    5028:	4908      	ldr	r1, [pc, #32]	; (504c <SPI_TEMP_PORT_init+0x68>)
    502a:	203c      	movs	r0, #60	; 0x3c
    502c:	4b04      	ldr	r3, [pc, #16]	; (5040 <SPI_TEMP_PORT_init+0x5c>)
    502e:	4798      	blx	r3
}
    5030:	bf00      	nop
    5032:	bd80      	pop	{r7, pc}
    5034:	00004b19 	.word	0x00004b19
    5038:	00004ae1 	.word	0x00004ae1
    503c:	003b0003 	.word	0x003b0003
    5040:	00004ac1 	.word	0x00004ac1
    5044:	003a0003 	.word	0x003a0003
    5048:	00004a8d 	.word	0x00004a8d
    504c:	003c0003 	.word	0x003c0003

00005050 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    5050:	b580      	push	{r7, lr}
    5052:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5054:	2246      	movs	r2, #70	; 0x46
    5056:	2122      	movs	r1, #34	; 0x22
    5058:	4806      	ldr	r0, [pc, #24]	; (5074 <SPI_TEMP_CLOCK_init+0x24>)
    505a:	4b07      	ldr	r3, [pc, #28]	; (5078 <SPI_TEMP_CLOCK_init+0x28>)
    505c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    505e:	224a      	movs	r2, #74	; 0x4a
    5060:	2103      	movs	r1, #3
    5062:	4804      	ldr	r0, [pc, #16]	; (5074 <SPI_TEMP_CLOCK_init+0x24>)
    5064:	4b04      	ldr	r3, [pc, #16]	; (5078 <SPI_TEMP_CLOCK_init+0x28>)
    5066:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    5068:	4804      	ldr	r0, [pc, #16]	; (507c <SPI_TEMP_CLOCK_init+0x2c>)
    506a:	4b05      	ldr	r3, [pc, #20]	; (5080 <SPI_TEMP_CLOCK_init+0x30>)
    506c:	4798      	blx	r3
}
    506e:	bf00      	nop
    5070:	bd80      	pop	{r7, pc}
    5072:	bf00      	nop
    5074:	40001c00 	.word	0x40001c00
    5078:	0000426d 	.word	0x0000426d
    507c:	40000800 	.word	0x40000800
    5080:	00004513 	.word	0x00004513

00005084 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    5084:	b580      	push	{r7, lr}
    5086:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    5088:	4b05      	ldr	r3, [pc, #20]	; (50a0 <SPI_TEMP_init+0x1c>)
    508a:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    508c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    5090:	4804      	ldr	r0, [pc, #16]	; (50a4 <SPI_TEMP_init+0x20>)
    5092:	4b05      	ldr	r3, [pc, #20]	; (50a8 <SPI_TEMP_init+0x24>)
    5094:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    5096:	4b05      	ldr	r3, [pc, #20]	; (50ac <SPI_TEMP_init+0x28>)
    5098:	4798      	blx	r3
}
    509a:	bf00      	nop
    509c:	bd80      	pop	{r7, pc}
    509e:	bf00      	nop
    50a0:	00005051 	.word	0x00005051
    50a4:	2000a958 	.word	0x2000a958
    50a8:	00006a19 	.word	0x00006a19
    50ac:	00004fe5 	.word	0x00004fe5

000050b0 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    50b0:	b580      	push	{r7, lr}
    50b2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    50b4:	2100      	movs	r1, #0
    50b6:	2017      	movs	r0, #23
    50b8:	4b07      	ldr	r3, [pc, #28]	; (50d8 <I2C_EXPANDER_PORT_init+0x28>)
    50ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    50bc:	4907      	ldr	r1, [pc, #28]	; (50dc <I2C_EXPANDER_PORT_init+0x2c>)
    50be:	2017      	movs	r0, #23
    50c0:	4b07      	ldr	r3, [pc, #28]	; (50e0 <I2C_EXPANDER_PORT_init+0x30>)
    50c2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    50c4:	2100      	movs	r1, #0
    50c6:	2016      	movs	r0, #22
    50c8:	4b03      	ldr	r3, [pc, #12]	; (50d8 <I2C_EXPANDER_PORT_init+0x28>)
    50ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    50cc:	4905      	ldr	r1, [pc, #20]	; (50e4 <I2C_EXPANDER_PORT_init+0x34>)
    50ce:	2016      	movs	r0, #22
    50d0:	4b03      	ldr	r3, [pc, #12]	; (50e0 <I2C_EXPANDER_PORT_init+0x30>)
    50d2:	4798      	blx	r3
}
    50d4:	bf00      	nop
    50d6:	bd80      	pop	{r7, pc}
    50d8:	00004a8d 	.word	0x00004a8d
    50dc:	00170003 	.word	0x00170003
    50e0:	00004ac1 	.word	0x00004ac1
    50e4:	00160003 	.word	0x00160003

000050e8 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    50e8:	b580      	push	{r7, lr}
    50ea:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    50ec:	2242      	movs	r2, #66	; 0x42
    50ee:	2123      	movs	r1, #35	; 0x23
    50f0:	4806      	ldr	r0, [pc, #24]	; (510c <I2C_EXPANDER_CLOCK_init+0x24>)
    50f2:	4b07      	ldr	r3, [pc, #28]	; (5110 <I2C_EXPANDER_CLOCK_init+0x28>)
    50f4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    50f6:	2246      	movs	r2, #70	; 0x46
    50f8:	2103      	movs	r1, #3
    50fa:	4804      	ldr	r0, [pc, #16]	; (510c <I2C_EXPANDER_CLOCK_init+0x24>)
    50fc:	4b04      	ldr	r3, [pc, #16]	; (5110 <I2C_EXPANDER_CLOCK_init+0x28>)
    50fe:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    5100:	4804      	ldr	r0, [pc, #16]	; (5114 <I2C_EXPANDER_CLOCK_init+0x2c>)
    5102:	4b05      	ldr	r3, [pc, #20]	; (5118 <I2C_EXPANDER_CLOCK_init+0x30>)
    5104:	4798      	blx	r3
}
    5106:	bf00      	nop
    5108:	bd80      	pop	{r7, pc}
    510a:	bf00      	nop
    510c:	40001c00 	.word	0x40001c00
    5110:	0000426d 	.word	0x0000426d
    5114:	40000800 	.word	0x40000800
    5118:	00004533 	.word	0x00004533

0000511c <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    511c:	b580      	push	{r7, lr}
    511e:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    5120:	4b04      	ldr	r3, [pc, #16]	; (5134 <I2C_EXPANDER_init+0x18>)
    5122:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    5124:	4904      	ldr	r1, [pc, #16]	; (5138 <I2C_EXPANDER_init+0x1c>)
    5126:	4805      	ldr	r0, [pc, #20]	; (513c <I2C_EXPANDER_init+0x20>)
    5128:	4b05      	ldr	r3, [pc, #20]	; (5140 <I2C_EXPANDER_init+0x24>)
    512a:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    512c:	4b05      	ldr	r3, [pc, #20]	; (5144 <I2C_EXPANDER_init+0x28>)
    512e:	4798      	blx	r3
}
    5130:	bf00      	nop
    5132:	bd80      	pop	{r7, pc}
    5134:	000050e9 	.word	0x000050e9
    5138:	43000400 	.word	0x43000400
    513c:	2000aa88 	.word	0x2000aa88
    5140:	0000634d 	.word	0x0000634d
    5144:	000050b1 	.word	0x000050b1

00005148 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    5148:	b580      	push	{r7, lr}
    514a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    514c:	2100      	movs	r1, #0
    514e:	2044      	movs	r0, #68	; 0x44
    5150:	4b11      	ldr	r3, [pc, #68]	; (5198 <SPI_HI3593_PORT_init+0x50>)
    5152:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    5154:	2102      	movs	r1, #2
    5156:	2044      	movs	r0, #68	; 0x44
    5158:	4b10      	ldr	r3, [pc, #64]	; (519c <SPI_HI3593_PORT_init+0x54>)
    515a:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    515c:	4910      	ldr	r1, [pc, #64]	; (51a0 <SPI_HI3593_PORT_init+0x58>)
    515e:	2044      	movs	r0, #68	; 0x44
    5160:	4b10      	ldr	r3, [pc, #64]	; (51a4 <SPI_HI3593_PORT_init+0x5c>)
    5162:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    5164:	2100      	movs	r1, #0
    5166:	2045      	movs	r0, #69	; 0x45
    5168:	4b0b      	ldr	r3, [pc, #44]	; (5198 <SPI_HI3593_PORT_init+0x50>)
    516a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    516c:	2102      	movs	r1, #2
    516e:	2045      	movs	r0, #69	; 0x45
    5170:	4b0a      	ldr	r3, [pc, #40]	; (519c <SPI_HI3593_PORT_init+0x54>)
    5172:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    5174:	490c      	ldr	r1, [pc, #48]	; (51a8 <SPI_HI3593_PORT_init+0x60>)
    5176:	2045      	movs	r0, #69	; 0x45
    5178:	4b0a      	ldr	r3, [pc, #40]	; (51a4 <SPI_HI3593_PORT_init+0x5c>)
    517a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    517c:	2101      	movs	r1, #1
    517e:	2047      	movs	r0, #71	; 0x47
    5180:	4b06      	ldr	r3, [pc, #24]	; (519c <SPI_HI3593_PORT_init+0x54>)
    5182:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    5184:	2100      	movs	r1, #0
    5186:	2047      	movs	r0, #71	; 0x47
    5188:	4b08      	ldr	r3, [pc, #32]	; (51ac <SPI_HI3593_PORT_init+0x64>)
    518a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    518c:	4908      	ldr	r1, [pc, #32]	; (51b0 <SPI_HI3593_PORT_init+0x68>)
    518e:	2047      	movs	r0, #71	; 0x47
    5190:	4b04      	ldr	r3, [pc, #16]	; (51a4 <SPI_HI3593_PORT_init+0x5c>)
    5192:	4798      	blx	r3
}
    5194:	bf00      	nop
    5196:	bd80      	pop	{r7, pc}
    5198:	00004b19 	.word	0x00004b19
    519c:	00004ae1 	.word	0x00004ae1
    51a0:	00440002 	.word	0x00440002
    51a4:	00004ac1 	.word	0x00004ac1
    51a8:	00450002 	.word	0x00450002
    51ac:	00004a8d 	.word	0x00004a8d
    51b0:	00470002 	.word	0x00470002

000051b4 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    51b4:	b580      	push	{r7, lr}
    51b6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    51b8:	2242      	movs	r2, #66	; 0x42
    51ba:	2124      	movs	r1, #36	; 0x24
    51bc:	4806      	ldr	r0, [pc, #24]	; (51d8 <SPI_HI3593_CLOCK_init+0x24>)
    51be:	4b07      	ldr	r3, [pc, #28]	; (51dc <SPI_HI3593_CLOCK_init+0x28>)
    51c0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    51c2:	224a      	movs	r2, #74	; 0x4a
    51c4:	2103      	movs	r1, #3
    51c6:	4804      	ldr	r0, [pc, #16]	; (51d8 <SPI_HI3593_CLOCK_init+0x24>)
    51c8:	4b04      	ldr	r3, [pc, #16]	; (51dc <SPI_HI3593_CLOCK_init+0x28>)
    51ca:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    51cc:	4804      	ldr	r0, [pc, #16]	; (51e0 <SPI_HI3593_CLOCK_init+0x2c>)
    51ce:	4b05      	ldr	r3, [pc, #20]	; (51e4 <SPI_HI3593_CLOCK_init+0x30>)
    51d0:	4798      	blx	r3
}
    51d2:	bf00      	nop
    51d4:	bd80      	pop	{r7, pc}
    51d6:	bf00      	nop
    51d8:	40001c00 	.word	0x40001c00
    51dc:	0000426d 	.word	0x0000426d
    51e0:	40000800 	.word	0x40000800
    51e4:	00004553 	.word	0x00004553

000051e8 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    51e8:	b580      	push	{r7, lr}
    51ea:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    51ec:	4b04      	ldr	r3, [pc, #16]	; (5200 <SPI_HI3593_init+0x18>)
    51ee:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    51f0:	4904      	ldr	r1, [pc, #16]	; (5204 <SPI_HI3593_init+0x1c>)
    51f2:	4805      	ldr	r0, [pc, #20]	; (5208 <SPI_HI3593_init+0x20>)
    51f4:	4b05      	ldr	r3, [pc, #20]	; (520c <SPI_HI3593_init+0x24>)
    51f6:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    51f8:	4b05      	ldr	r3, [pc, #20]	; (5210 <SPI_HI3593_init+0x28>)
    51fa:	4798      	blx	r3
}
    51fc:	bf00      	nop
    51fe:	bd80      	pop	{r7, pc}
    5200:	000051b5 	.word	0x000051b5
    5204:	43000800 	.word	0x43000800
    5208:	2000a940 	.word	0x2000a940
    520c:	00006cc9 	.word	0x00006cc9
    5210:	00005149 	.word	0x00005149

00005214 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    5214:	b580      	push	{r7, lr}
    5216:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    5218:	2100      	movs	r1, #0
    521a:	2068      	movs	r0, #104	; 0x68
    521c:	4b07      	ldr	r3, [pc, #28]	; (523c <I2C_EEPROM_PORT_init+0x28>)
    521e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    5220:	4907      	ldr	r1, [pc, #28]	; (5240 <I2C_EEPROM_PORT_init+0x2c>)
    5222:	2068      	movs	r0, #104	; 0x68
    5224:	4b07      	ldr	r3, [pc, #28]	; (5244 <I2C_EEPROM_PORT_init+0x30>)
    5226:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    5228:	2100      	movs	r1, #0
    522a:	2069      	movs	r0, #105	; 0x69
    522c:	4b03      	ldr	r3, [pc, #12]	; (523c <I2C_EEPROM_PORT_init+0x28>)
    522e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    5230:	4905      	ldr	r1, [pc, #20]	; (5248 <I2C_EEPROM_PORT_init+0x34>)
    5232:	2069      	movs	r0, #105	; 0x69
    5234:	4b03      	ldr	r3, [pc, #12]	; (5244 <I2C_EEPROM_PORT_init+0x30>)
    5236:	4798      	blx	r3
}
    5238:	bf00      	nop
    523a:	bd80      	pop	{r7, pc}
    523c:	00004a8d 	.word	0x00004a8d
    5240:	00680002 	.word	0x00680002
    5244:	00004ac1 	.word	0x00004ac1
    5248:	00690002 	.word	0x00690002

0000524c <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    524c:	b580      	push	{r7, lr}
    524e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5250:	2248      	movs	r2, #72	; 0x48
    5252:	2125      	movs	r1, #37	; 0x25
    5254:	4806      	ldr	r0, [pc, #24]	; (5270 <I2C_EEPROM_CLOCK_init+0x24>)
    5256:	4b07      	ldr	r3, [pc, #28]	; (5274 <I2C_EEPROM_CLOCK_init+0x28>)
    5258:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    525a:	224a      	movs	r2, #74	; 0x4a
    525c:	2103      	movs	r1, #3
    525e:	4804      	ldr	r0, [pc, #16]	; (5270 <I2C_EEPROM_CLOCK_init+0x24>)
    5260:	4b04      	ldr	r3, [pc, #16]	; (5274 <I2C_EEPROM_CLOCK_init+0x28>)
    5262:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    5264:	4804      	ldr	r0, [pc, #16]	; (5278 <I2C_EEPROM_CLOCK_init+0x2c>)
    5266:	4b05      	ldr	r3, [pc, #20]	; (527c <I2C_EEPROM_CLOCK_init+0x30>)
    5268:	4798      	blx	r3
}
    526a:	bf00      	nop
    526c:	bd80      	pop	{r7, pc}
    526e:	bf00      	nop
    5270:	40001c00 	.word	0x40001c00
    5274:	0000426d 	.word	0x0000426d
    5278:	40000800 	.word	0x40000800
    527c:	00004573 	.word	0x00004573

00005280 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    5280:	b580      	push	{r7, lr}
    5282:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    5284:	4b04      	ldr	r3, [pc, #16]	; (5298 <I2C_EEPROM_init+0x18>)
    5286:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    5288:	4904      	ldr	r1, [pc, #16]	; (529c <I2C_EEPROM_init+0x1c>)
    528a:	4805      	ldr	r0, [pc, #20]	; (52a0 <I2C_EEPROM_init+0x20>)
    528c:	4b05      	ldr	r3, [pc, #20]	; (52a4 <I2C_EEPROM_init+0x24>)
    528e:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    5290:	4b05      	ldr	r3, [pc, #20]	; (52a8 <I2C_EEPROM_init+0x28>)
    5292:	4798      	blx	r3
}
    5294:	bf00      	nop
    5296:	bd80      	pop	{r7, pc}
    5298:	0000524d 	.word	0x0000524d
    529c:	43000c00 	.word	0x43000c00
    52a0:	2000ab08 	.word	0x2000ab08
    52a4:	0000634d 	.word	0x0000634d
    52a8:	00005215 	.word	0x00005215

000052ac <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    52ac:	b580      	push	{r7, lr}
    52ae:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    52b0:	4808      	ldr	r0, [pc, #32]	; (52d4 <TIMER_USB_init+0x28>)
    52b2:	4b09      	ldr	r3, [pc, #36]	; (52d8 <TIMER_USB_init+0x2c>)
    52b4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    52b6:	2243      	movs	r2, #67	; 0x43
    52b8:	2109      	movs	r1, #9
    52ba:	4808      	ldr	r0, [pc, #32]	; (52dc <TIMER_USB_init+0x30>)
    52bc:	4b08      	ldr	r3, [pc, #32]	; (52e0 <TIMER_USB_init+0x34>)
    52be:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    52c0:	4b08      	ldr	r3, [pc, #32]	; (52e4 <TIMER_USB_init+0x38>)
    52c2:	4798      	blx	r3
    52c4:	4603      	mov	r3, r0
    52c6:	461a      	mov	r2, r3
    52c8:	4907      	ldr	r1, [pc, #28]	; (52e8 <TIMER_USB_init+0x3c>)
    52ca:	4808      	ldr	r0, [pc, #32]	; (52ec <TIMER_USB_init+0x40>)
    52cc:	4b08      	ldr	r3, [pc, #32]	; (52f0 <TIMER_USB_init+0x44>)
    52ce:	4798      	blx	r3
}
    52d0:	bf00      	nop
    52d2:	bd80      	pop	{r7, pc}
    52d4:	40000800 	.word	0x40000800
    52d8:	00004393 	.word	0x00004393
    52dc:	40001c00 	.word	0x40001c00
    52e0:	0000426d 	.word	0x0000426d
    52e4:	0000db6d 	.word	0x0000db6d
    52e8:	40003800 	.word	0x40003800
    52ec:	2000aa68 	.word	0x2000aa68
    52f0:	00006f59 	.word	0x00006f59

000052f4 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    52f4:	b480      	push	{r7}
    52f6:	af00      	add	r7, sp, #0
}
    52f8:	bf00      	nop
    52fa:	46bd      	mov	sp, r7
    52fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5300:	4770      	bx	lr
	...

00005304 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    5304:	b580      	push	{r7, lr}
    5306:	af00      	add	r7, sp, #0

	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    5308:	4804      	ldr	r0, [pc, #16]	; (531c <LIVE_PULSE_CLOCK_init+0x18>)
    530a:	4b05      	ldr	r3, [pc, #20]	; (5320 <LIVE_PULSE_CLOCK_init+0x1c>)
    530c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    530e:	2244      	movs	r2, #68	; 0x44
    5310:	2109      	movs	r1, #9
    5312:	4804      	ldr	r0, [pc, #16]	; (5324 <LIVE_PULSE_CLOCK_init+0x20>)
    5314:	4b04      	ldr	r3, [pc, #16]	; (5328 <LIVE_PULSE_CLOCK_init+0x24>)
    5316:	4798      	blx	r3
}
    5318:	bf00      	nop
    531a:	bd80      	pop	{r7, pc}
    531c:	40000800 	.word	0x40000800
    5320:	000043b3 	.word	0x000043b3
    5324:	40001c00 	.word	0x40001c00
    5328:	0000426d 	.word	0x0000426d

0000532c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    532c:	b580      	push	{r7, lr}
    532e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    5330:	4b06      	ldr	r3, [pc, #24]	; (534c <LIVE_PULSE_init+0x20>)
    5332:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    5334:	4b06      	ldr	r3, [pc, #24]	; (5350 <LIVE_PULSE_init+0x24>)
    5336:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC1, _tc_get_pwm());
    5338:	4b06      	ldr	r3, [pc, #24]	; (5354 <LIVE_PULSE_init+0x28>)
    533a:	4798      	blx	r3
    533c:	4603      	mov	r3, r0
    533e:	461a      	mov	r2, r3
    5340:	4905      	ldr	r1, [pc, #20]	; (5358 <LIVE_PULSE_init+0x2c>)
    5342:	4806      	ldr	r0, [pc, #24]	; (535c <LIVE_PULSE_init+0x30>)
    5344:	4b06      	ldr	r3, [pc, #24]	; (5360 <LIVE_PULSE_init+0x34>)
    5346:	4798      	blx	r3
}
    5348:	bf00      	nop
    534a:	bd80      	pop	{r7, pc}
    534c:	00005305 	.word	0x00005305
    5350:	000052f5 	.word	0x000052f5
    5354:	0000db81 	.word	0x0000db81
    5358:	40003c00 	.word	0x40003c00
    535c:	2000aa04 	.word	0x2000aa04
    5360:	000065f1 	.word	0x000065f1

00005364 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    5364:	b580      	push	{r7, lr}
    5366:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    5368:	4808      	ldr	r0, [pc, #32]	; (538c <TIMER_ARINC_init+0x28>)
    536a:	4b09      	ldr	r3, [pc, #36]	; (5390 <TIMER_ARINC_init+0x2c>)
    536c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    536e:	2244      	movs	r2, #68	; 0x44
    5370:	211a      	movs	r1, #26
    5372:	4808      	ldr	r0, [pc, #32]	; (5394 <TIMER_ARINC_init+0x30>)
    5374:	4b08      	ldr	r3, [pc, #32]	; (5398 <TIMER_ARINC_init+0x34>)
    5376:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    5378:	4b08      	ldr	r3, [pc, #32]	; (539c <TIMER_ARINC_init+0x38>)
    537a:	4798      	blx	r3
    537c:	4603      	mov	r3, r0
    537e:	461a      	mov	r2, r3
    5380:	4907      	ldr	r1, [pc, #28]	; (53a0 <TIMER_ARINC_init+0x3c>)
    5382:	4808      	ldr	r0, [pc, #32]	; (53a4 <TIMER_ARINC_init+0x40>)
    5384:	4b08      	ldr	r3, [pc, #32]	; (53a8 <TIMER_ARINC_init+0x44>)
    5386:	4798      	blx	r3
}
    5388:	bf00      	nop
    538a:	bd80      	pop	{r7, pc}
    538c:	40000800 	.word	0x40000800
    5390:	00004493 	.word	0x00004493
    5394:	40001c00 	.word	0x40001c00
    5398:	0000426d 	.word	0x0000426d
    539c:	0000db6d 	.word	0x0000db6d
    53a0:	4101a000 	.word	0x4101a000
    53a4:	2000aa48 	.word	0x2000aa48
    53a8:	00006f59 	.word	0x00006f59

000053ac <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    53ac:	b580      	push	{r7, lr}
    53ae:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    53b0:	4808      	ldr	r0, [pc, #32]	; (53d4 <TIMER_MAINTENANCE_init+0x28>)
    53b2:	4b09      	ldr	r3, [pc, #36]	; (53d8 <TIMER_MAINTENANCE_init+0x2c>)
    53b4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    53b6:	2246      	movs	r2, #70	; 0x46
    53b8:	211e      	movs	r1, #30
    53ba:	4808      	ldr	r0, [pc, #32]	; (53dc <TIMER_MAINTENANCE_init+0x30>)
    53bc:	4b08      	ldr	r3, [pc, #32]	; (53e0 <TIMER_MAINTENANCE_init+0x34>)
    53be:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    53c0:	4b08      	ldr	r3, [pc, #32]	; (53e4 <TIMER_MAINTENANCE_init+0x38>)
    53c2:	4798      	blx	r3
    53c4:	4603      	mov	r3, r0
    53c6:	461a      	mov	r2, r3
    53c8:	4907      	ldr	r1, [pc, #28]	; (53e8 <TIMER_MAINTENANCE_init+0x3c>)
    53ca:	4808      	ldr	r0, [pc, #32]	; (53ec <TIMER_MAINTENANCE_init+0x40>)
    53cc:	4b08      	ldr	r3, [pc, #32]	; (53f0 <TIMER_MAINTENANCE_init+0x44>)
    53ce:	4798      	blx	r3
}
    53d0:	bf00      	nop
    53d2:	bd80      	pop	{r7, pc}
    53d4:	40000800 	.word	0x40000800
    53d8:	000044b3 	.word	0x000044b3
    53dc:	40001c00 	.word	0x40001c00
    53e0:	0000426d 	.word	0x0000426d
    53e4:	0000db6d 	.word	0x0000db6d
    53e8:	42001400 	.word	0x42001400
    53ec:	2000a9a0 	.word	0x2000a9a0
    53f0:	00006f59 	.word	0x00006f59

000053f4 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    53f4:	b580      	push	{r7, lr}
    53f6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    53f8:	4808      	ldr	r0, [pc, #32]	; (541c <TIMER_INTERFACE_init+0x28>)
    53fa:	4b09      	ldr	r3, [pc, #36]	; (5420 <TIMER_INTERFACE_init+0x2c>)
    53fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    53fe:	2246      	movs	r2, #70	; 0x46
    5400:	211e      	movs	r1, #30
    5402:	4808      	ldr	r0, [pc, #32]	; (5424 <TIMER_INTERFACE_init+0x30>)
    5404:	4b08      	ldr	r3, [pc, #32]	; (5428 <TIMER_INTERFACE_init+0x34>)
    5406:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    5408:	4b08      	ldr	r3, [pc, #32]	; (542c <TIMER_INTERFACE_init+0x38>)
    540a:	4798      	blx	r3
    540c:	4603      	mov	r3, r0
    540e:	461a      	mov	r2, r3
    5410:	4907      	ldr	r1, [pc, #28]	; (5430 <TIMER_INTERFACE_init+0x3c>)
    5412:	4808      	ldr	r0, [pc, #32]	; (5434 <TIMER_INTERFACE_init+0x40>)
    5414:	4b08      	ldr	r3, [pc, #32]	; (5438 <TIMER_INTERFACE_init+0x44>)
    5416:	4798      	blx	r3
}
    5418:	bf00      	nop
    541a:	bd80      	pop	{r7, pc}
    541c:	40000800 	.word	0x40000800
    5420:	000044d3 	.word	0x000044d3
    5424:	40001c00 	.word	0x40001c00
    5428:	0000426d 	.word	0x0000426d
    542c:	0000db6d 	.word	0x0000db6d
    5430:	42001800 	.word	0x42001800
    5434:	2000a9e4 	.word	0x2000a9e4
    5438:	00006f59 	.word	0x00006f59

0000543c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    543c:	b580      	push	{r7, lr}
    543e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    5440:	4808      	ldr	r0, [pc, #32]	; (5464 <TIMER_EVENT_init+0x28>)
    5442:	4b09      	ldr	r3, [pc, #36]	; (5468 <TIMER_EVENT_init+0x2c>)
    5444:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5446:	2246      	movs	r2, #70	; 0x46
    5448:	2127      	movs	r1, #39	; 0x27
    544a:	4808      	ldr	r0, [pc, #32]	; (546c <TIMER_EVENT_init+0x30>)
    544c:	4b08      	ldr	r3, [pc, #32]	; (5470 <TIMER_EVENT_init+0x34>)
    544e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    5450:	4b08      	ldr	r3, [pc, #32]	; (5474 <TIMER_EVENT_init+0x38>)
    5452:	4798      	blx	r3
    5454:	4603      	mov	r3, r0
    5456:	461a      	mov	r2, r3
    5458:	4907      	ldr	r1, [pc, #28]	; (5478 <TIMER_EVENT_init+0x3c>)
    545a:	4808      	ldr	r0, [pc, #32]	; (547c <TIMER_EVENT_init+0x40>)
    545c:	4b08      	ldr	r3, [pc, #32]	; (5480 <TIMER_EVENT_init+0x44>)
    545e:	4798      	blx	r3
}
    5460:	bf00      	nop
    5462:	bd80      	pop	{r7, pc}
    5464:	40000800 	.word	0x40000800
    5468:	00004593 	.word	0x00004593
    546c:	40001c00 	.word	0x40001c00
    5470:	0000426d 	.word	0x0000426d
    5474:	0000db6d 	.word	0x0000db6d
    5478:	43001400 	.word	0x43001400
    547c:	2000a9c4 	.word	0x2000a9c4
    5480:	00006f59 	.word	0x00006f59

00005484 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    5484:	b580      	push	{r7, lr}
    5486:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    5488:	4804      	ldr	r0, [pc, #16]	; (549c <TIMER_HVAC_CLOCK_init+0x18>)
    548a:	4b05      	ldr	r3, [pc, #20]	; (54a0 <TIMER_HVAC_CLOCK_init+0x1c>)
    548c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    548e:	2244      	movs	r2, #68	; 0x44
    5490:	2119      	movs	r1, #25
    5492:	4804      	ldr	r0, [pc, #16]	; (54a4 <TIMER_HVAC_CLOCK_init+0x20>)
    5494:	4b04      	ldr	r3, [pc, #16]	; (54a8 <TIMER_HVAC_CLOCK_init+0x24>)
    5496:	4798      	blx	r3
}
    5498:	bf00      	nop
    549a:	bd80      	pop	{r7, pc}
    549c:	40000800 	.word	0x40000800
    54a0:	00004453 	.word	0x00004453
    54a4:	40001c00 	.word	0x40001c00
    54a8:	0000426d 	.word	0x0000426d

000054ac <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    54ac:	b580      	push	{r7, lr}
    54ae:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    54b0:	4b05      	ldr	r3, [pc, #20]	; (54c8 <TIMER_HVAC_init+0x1c>)
    54b2:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    54b4:	4b05      	ldr	r3, [pc, #20]	; (54cc <TIMER_HVAC_init+0x20>)
    54b6:	4798      	blx	r3
    54b8:	4603      	mov	r3, r0
    54ba:	461a      	mov	r2, r3
    54bc:	4904      	ldr	r1, [pc, #16]	; (54d0 <TIMER_HVAC_init+0x24>)
    54be:	4805      	ldr	r0, [pc, #20]	; (54d4 <TIMER_HVAC_init+0x28>)
    54c0:	4b05      	ldr	r3, [pc, #20]	; (54d8 <TIMER_HVAC_init+0x2c>)
    54c2:	4798      	blx	r3
}
    54c4:	bf00      	nop
    54c6:	bd80      	pop	{r7, pc}
    54c8:	00005485 	.word	0x00005485
    54cc:	0000cf2d 	.word	0x0000cf2d
    54d0:	41016000 	.word	0x41016000
    54d4:	2000aae8 	.word	0x2000aae8
    54d8:	00006f59 	.word	0x00006f59

000054dc <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    54dc:	b580      	push	{r7, lr}
    54de:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    54e0:	4804      	ldr	r0, [pc, #16]	; (54f4 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    54e2:	4b05      	ldr	r3, [pc, #20]	; (54f8 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    54e4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    54e6:	2244      	movs	r2, #68	; 0x44
    54e8:	2119      	movs	r1, #25
    54ea:	4804      	ldr	r0, [pc, #16]	; (54fc <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    54ec:	4b04      	ldr	r3, [pc, #16]	; (5500 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    54ee:	4798      	blx	r3
}
    54f0:	bf00      	nop
    54f2:	bd80      	pop	{r7, pc}
    54f4:	40000800 	.word	0x40000800
    54f8:	00004473 	.word	0x00004473
    54fc:	40001c00 	.word	0x40001c00
    5500:	0000426d 	.word	0x0000426d

00005504 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    5504:	b580      	push	{r7, lr}
    5506:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    5508:	4b05      	ldr	r3, [pc, #20]	; (5520 <TIMER_TEMPERATURES_init+0x1c>)
    550a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    550c:	4b05      	ldr	r3, [pc, #20]	; (5524 <TIMER_TEMPERATURES_init+0x20>)
    550e:	4798      	blx	r3
    5510:	4603      	mov	r3, r0
    5512:	461a      	mov	r2, r3
    5514:	4904      	ldr	r1, [pc, #16]	; (5528 <TIMER_TEMPERATURES_init+0x24>)
    5516:	4805      	ldr	r0, [pc, #20]	; (552c <TIMER_TEMPERATURES_init+0x28>)
    5518:	4b05      	ldr	r3, [pc, #20]	; (5530 <TIMER_TEMPERATURES_init+0x2c>)
    551a:	4798      	blx	r3
}
    551c:	bf00      	nop
    551e:	bd80      	pop	{r7, pc}
    5520:	000054dd 	.word	0x000054dd
    5524:	0000cf2d 	.word	0x0000cf2d
    5528:	41018000 	.word	0x41018000
    552c:	2000a908 	.word	0x2000a908
    5530:	00006f59 	.word	0x00006f59

00005534 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    5534:	b580      	push	{r7, lr}
    5536:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    5538:	2102      	movs	r1, #2
    553a:	2018      	movs	r0, #24
    553c:	4b0f      	ldr	r3, [pc, #60]	; (557c <CDCUSB_PORT_init+0x48>)
    553e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    5540:	2100      	movs	r1, #0
    5542:	2018      	movs	r0, #24
    5544:	4b0e      	ldr	r3, [pc, #56]	; (5580 <CDCUSB_PORT_init+0x4c>)
    5546:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    5548:	2100      	movs	r1, #0
    554a:	2018      	movs	r0, #24
    554c:	4b0d      	ldr	r3, [pc, #52]	; (5584 <CDCUSB_PORT_init+0x50>)
    554e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    5550:	490d      	ldr	r1, [pc, #52]	; (5588 <CDCUSB_PORT_init+0x54>)
    5552:	2018      	movs	r0, #24
    5554:	4b0d      	ldr	r3, [pc, #52]	; (558c <CDCUSB_PORT_init+0x58>)
    5556:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    5558:	2102      	movs	r1, #2
    555a:	2019      	movs	r0, #25
    555c:	4b07      	ldr	r3, [pc, #28]	; (557c <CDCUSB_PORT_init+0x48>)
    555e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    5560:	2100      	movs	r1, #0
    5562:	2019      	movs	r0, #25
    5564:	4b06      	ldr	r3, [pc, #24]	; (5580 <CDCUSB_PORT_init+0x4c>)
    5566:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    5568:	2100      	movs	r1, #0
    556a:	2019      	movs	r0, #25
    556c:	4b05      	ldr	r3, [pc, #20]	; (5584 <CDCUSB_PORT_init+0x50>)
    556e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    5570:	4907      	ldr	r1, [pc, #28]	; (5590 <CDCUSB_PORT_init+0x5c>)
    5572:	2019      	movs	r0, #25
    5574:	4b05      	ldr	r3, [pc, #20]	; (558c <CDCUSB_PORT_init+0x58>)
    5576:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    5578:	bf00      	nop
    557a:	bd80      	pop	{r7, pc}
    557c:	00004ae1 	.word	0x00004ae1
    5580:	00004b19 	.word	0x00004b19
    5584:	00004a8d 	.word	0x00004a8d
    5588:	00180007 	.word	0x00180007
    558c:	00004ac1 	.word	0x00004ac1
    5590:	00190007 	.word	0x00190007

00005594 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    5594:	b580      	push	{r7, lr}
    5596:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    5598:	2242      	movs	r2, #66	; 0x42
    559a:	210a      	movs	r1, #10
    559c:	4805      	ldr	r0, [pc, #20]	; (55b4 <CDCUSB_CLOCK_init+0x20>)
    559e:	4b06      	ldr	r3, [pc, #24]	; (55b8 <CDCUSB_CLOCK_init+0x24>)
    55a0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    55a2:	4806      	ldr	r0, [pc, #24]	; (55bc <CDCUSB_CLOCK_init+0x28>)
    55a4:	4b06      	ldr	r3, [pc, #24]	; (55c0 <CDCUSB_CLOCK_init+0x2c>)
    55a6:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    55a8:	4804      	ldr	r0, [pc, #16]	; (55bc <CDCUSB_CLOCK_init+0x28>)
    55aa:	4b06      	ldr	r3, [pc, #24]	; (55c4 <CDCUSB_CLOCK_init+0x30>)
    55ac:	4798      	blx	r3
}
    55ae:	bf00      	nop
    55b0:	bd80      	pop	{r7, pc}
    55b2:	bf00      	nop
    55b4:	40001c00 	.word	0x40001c00
    55b8:	0000426d 	.word	0x0000426d
    55bc:	40000800 	.word	0x40000800
    55c0:	00004293 	.word	0x00004293
    55c4:	000043d3 	.word	0x000043d3

000055c8 <CDCUSB_init>:

void CDCUSB_init(void)
{
    55c8:	b580      	push	{r7, lr}
    55ca:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    55cc:	4b03      	ldr	r3, [pc, #12]	; (55dc <CDCUSB_init+0x14>)
    55ce:	4798      	blx	r3
	usb_d_init();
    55d0:	4b03      	ldr	r3, [pc, #12]	; (55e0 <CDCUSB_init+0x18>)
    55d2:	4798      	blx	r3
	CDCUSB_PORT_init();
    55d4:	4b03      	ldr	r3, [pc, #12]	; (55e4 <CDCUSB_init+0x1c>)
    55d6:	4798      	blx	r3
}
    55d8:	bf00      	nop
    55da:	bd80      	pop	{r7, pc}
    55dc:	00005595 	.word	0x00005595
    55e0:	000077b5 	.word	0x000077b5
    55e4:	00005535 	.word	0x00005535

000055e8 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    55e8:	b580      	push	{r7, lr}
    55ea:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    55ec:	4802      	ldr	r0, [pc, #8]	; (55f8 <WATCHDOG_CLOCK_init+0x10>)
    55ee:	4b03      	ldr	r3, [pc, #12]	; (55fc <WATCHDOG_CLOCK_init+0x14>)
    55f0:	4798      	blx	r3
}
    55f2:	bf00      	nop
    55f4:	bd80      	pop	{r7, pc}
    55f6:	bf00      	nop
    55f8:	40000800 	.word	0x40000800
    55fc:	00004313 	.word	0x00004313

00005600 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    5600:	b580      	push	{r7, lr}
    5602:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    5604:	4b03      	ldr	r3, [pc, #12]	; (5614 <WATCHDOG_init+0x14>)
    5606:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    5608:	4903      	ldr	r1, [pc, #12]	; (5618 <WATCHDOG_init+0x18>)
    560a:	4804      	ldr	r0, [pc, #16]	; (561c <WATCHDOG_init+0x1c>)
    560c:	4b04      	ldr	r3, [pc, #16]	; (5620 <WATCHDOG_init+0x20>)
    560e:	4798      	blx	r3
}
    5610:	bf00      	nop
    5612:	bd80      	pop	{r7, pc}
    5614:	000055e9 	.word	0x000055e9
    5618:	40002000 	.word	0x40002000
    561c:	2000ab68 	.word	0x2000ab68
    5620:	00004b61 	.word	0x00004b61

00005624 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    5624:	b580      	push	{r7, lr}
    5626:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    5628:	4904      	ldr	r1, [pc, #16]	; (563c <CAN_CCU_PORT_init+0x18>)
    562a:	202d      	movs	r0, #45	; 0x2d
    562c:	4b04      	ldr	r3, [pc, #16]	; (5640 <CAN_CCU_PORT_init+0x1c>)
    562e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    5630:	4904      	ldr	r1, [pc, #16]	; (5644 <CAN_CCU_PORT_init+0x20>)
    5632:	202c      	movs	r0, #44	; 0x2c
    5634:	4b02      	ldr	r3, [pc, #8]	; (5640 <CAN_CCU_PORT_init+0x1c>)
    5636:	4798      	blx	r3
}
    5638:	bf00      	nop
    563a:	bd80      	pop	{r7, pc}
    563c:	002d0007 	.word	0x002d0007
    5640:	00004ac1 	.word	0x00004ac1
    5644:	002c0007 	.word	0x002c0007

00005648 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    5648:	b580      	push	{r7, lr}
    564a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    564c:	4807      	ldr	r0, [pc, #28]	; (566c <CAN_CCU_init+0x24>)
    564e:	4b08      	ldr	r3, [pc, #32]	; (5670 <CAN_CCU_init+0x28>)
    5650:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5652:	2243      	movs	r2, #67	; 0x43
    5654:	211c      	movs	r1, #28
    5656:	4807      	ldr	r0, [pc, #28]	; (5674 <CAN_CCU_init+0x2c>)
    5658:	4b07      	ldr	r3, [pc, #28]	; (5678 <CAN_CCU_init+0x30>)
    565a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    565c:	4907      	ldr	r1, [pc, #28]	; (567c <CAN_CCU_init+0x34>)
    565e:	4808      	ldr	r0, [pc, #32]	; (5680 <CAN_CCU_init+0x38>)
    5660:	4b08      	ldr	r3, [pc, #32]	; (5684 <CAN_CCU_init+0x3c>)
    5662:	4798      	blx	r3
	CAN_CCU_PORT_init();
    5664:	4b08      	ldr	r3, [pc, #32]	; (5688 <CAN_CCU_init+0x40>)
    5666:	4798      	blx	r3
}
    5668:	bf00      	nop
    566a:	bd80      	pop	{r7, pc}
    566c:	40000800 	.word	0x40000800
    5670:	000042d3 	.word	0x000042d3
    5674:	40001c00 	.word	0x40001c00
    5678:	0000426d 	.word	0x0000426d
    567c:	42000400 	.word	0x42000400
    5680:	2000aa20 	.word	0x2000aa20
    5684:	00005d99 	.word	0x00005d99
    5688:	00005625 	.word	0x00005625

0000568c <system_init>:

void system_init(void)
{
    568c:	b580      	push	{r7, lr}
    568e:	af00      	add	r7, sp, #0
	init_mcu();
    5690:	4b58      	ldr	r3, [pc, #352]	; (57f4 <system_init+0x168>)
    5692:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    5694:	2101      	movs	r1, #1
    5696:	200f      	movs	r0, #15
    5698:	4b57      	ldr	r3, [pc, #348]	; (57f8 <system_init+0x16c>)
    569a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    569c:	2102      	movs	r1, #2
    569e:	200f      	movs	r0, #15
    56a0:	4b56      	ldr	r3, [pc, #344]	; (57fc <system_init+0x170>)
    56a2:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    56a4:	f04f 31ff 	mov.w	r1, #4294967295
    56a8:	200f      	movs	r0, #15
    56aa:	4b55      	ldr	r3, [pc, #340]	; (5800 <system_init+0x174>)
    56ac:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    56ae:	2101      	movs	r1, #1
    56b0:	2013      	movs	r0, #19
    56b2:	4b51      	ldr	r3, [pc, #324]	; (57f8 <system_init+0x16c>)
    56b4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    56b6:	2102      	movs	r1, #2
    56b8:	2013      	movs	r0, #19
    56ba:	4b50      	ldr	r3, [pc, #320]	; (57fc <system_init+0x170>)
    56bc:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    56be:	f04f 31ff 	mov.w	r1, #4294967295
    56c2:	2013      	movs	r0, #19
    56c4:	4b4e      	ldr	r3, [pc, #312]	; (5800 <system_init+0x174>)
    56c6:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    56c8:	2101      	movs	r1, #1
    56ca:	201b      	movs	r0, #27
    56cc:	4b4a      	ldr	r3, [pc, #296]	; (57f8 <system_init+0x16c>)
    56ce:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    56d0:	2102      	movs	r1, #2
    56d2:	201b      	movs	r0, #27
    56d4:	4b49      	ldr	r3, [pc, #292]	; (57fc <system_init+0x170>)
    56d6:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    56d8:	f04f 31ff 	mov.w	r1, #4294967295
    56dc:	201b      	movs	r0, #27
    56de:	4b48      	ldr	r3, [pc, #288]	; (5800 <system_init+0x174>)
    56e0:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    56e2:	2101      	movs	r1, #1
    56e4:	2027      	movs	r0, #39	; 0x27
    56e6:	4b45      	ldr	r3, [pc, #276]	; (57fc <system_init+0x170>)
    56e8:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    56ea:	2102      	movs	r1, #2
    56ec:	2027      	movs	r0, #39	; 0x27
    56ee:	4b45      	ldr	r3, [pc, #276]	; (5804 <system_init+0x178>)
    56f0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    56f2:	f04f 31ff 	mov.w	r1, #4294967295
    56f6:	2027      	movs	r0, #39	; 0x27
    56f8:	4b41      	ldr	r3, [pc, #260]	; (5800 <system_init+0x174>)
    56fa:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    56fc:	2101      	movs	r1, #1
    56fe:	203d      	movs	r0, #61	; 0x3d
    5700:	4b3d      	ldr	r3, [pc, #244]	; (57f8 <system_init+0x16c>)
    5702:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    5704:	2102      	movs	r1, #2
    5706:	203d      	movs	r0, #61	; 0x3d
    5708:	4b3c      	ldr	r3, [pc, #240]	; (57fc <system_init+0x170>)
    570a:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    570c:	f04f 31ff 	mov.w	r1, #4294967295
    5710:	203d      	movs	r0, #61	; 0x3d
    5712:	4b3b      	ldr	r3, [pc, #236]	; (5800 <system_init+0x174>)
    5714:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    5716:	2101      	movs	r1, #1
    5718:	203f      	movs	r0, #63	; 0x3f
    571a:	4b38      	ldr	r3, [pc, #224]	; (57fc <system_init+0x170>)
    571c:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    571e:	2101      	movs	r1, #1
    5720:	203f      	movs	r0, #63	; 0x3f
    5722:	4b38      	ldr	r3, [pc, #224]	; (5804 <system_init+0x178>)
    5724:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    5726:	f04f 31ff 	mov.w	r1, #4294967295
    572a:	203f      	movs	r0, #63	; 0x3f
    572c:	4b34      	ldr	r3, [pc, #208]	; (5800 <system_init+0x174>)
    572e:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    5730:	2100      	movs	r1, #0
    5732:	204d      	movs	r0, #77	; 0x4d
    5734:	4b30      	ldr	r3, [pc, #192]	; (57f8 <system_init+0x16c>)
    5736:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    5738:	2102      	movs	r1, #2
    573a:	204d      	movs	r0, #77	; 0x4d
    573c:	4b2f      	ldr	r3, [pc, #188]	; (57fc <system_init+0x170>)
    573e:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    5740:	f04f 31ff 	mov.w	r1, #4294967295
    5744:	204d      	movs	r0, #77	; 0x4d
    5746:	4b2e      	ldr	r3, [pc, #184]	; (5800 <system_init+0x174>)
    5748:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    574a:	2101      	movs	r1, #1
    574c:	204e      	movs	r0, #78	; 0x4e
    574e:	4b2a      	ldr	r3, [pc, #168]	; (57f8 <system_init+0x16c>)
    5750:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    5752:	2102      	movs	r1, #2
    5754:	204e      	movs	r0, #78	; 0x4e
    5756:	4b29      	ldr	r3, [pc, #164]	; (57fc <system_init+0x170>)
    5758:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    575a:	f04f 31ff 	mov.w	r1, #4294967295
    575e:	204e      	movs	r0, #78	; 0x4e
    5760:	4b27      	ldr	r3, [pc, #156]	; (5800 <system_init+0x174>)
    5762:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    5764:	2100      	movs	r1, #0
    5766:	204f      	movs	r0, #79	; 0x4f
    5768:	4b23      	ldr	r3, [pc, #140]	; (57f8 <system_init+0x16c>)
    576a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    576c:	2102      	movs	r1, #2
    576e:	204f      	movs	r0, #79	; 0x4f
    5770:	4b22      	ldr	r3, [pc, #136]	; (57fc <system_init+0x170>)
    5772:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    5774:	f04f 31ff 	mov.w	r1, #4294967295
    5778:	204f      	movs	r0, #79	; 0x4f
    577a:	4b21      	ldr	r3, [pc, #132]	; (5800 <system_init+0x174>)
    577c:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    577e:	2100      	movs	r1, #0
    5780:	2052      	movs	r0, #82	; 0x52
    5782:	4b1d      	ldr	r3, [pc, #116]	; (57f8 <system_init+0x16c>)
    5784:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    5786:	2102      	movs	r1, #2
    5788:	2052      	movs	r0, #82	; 0x52
    578a:	4b1c      	ldr	r3, [pc, #112]	; (57fc <system_init+0x170>)
    578c:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    578e:	f04f 31ff 	mov.w	r1, #4294967295
    5792:	2052      	movs	r0, #82	; 0x52
    5794:	4b1a      	ldr	r3, [pc, #104]	; (5800 <system_init+0x174>)
    5796:	4798      	blx	r3

	CRC_CALC_init();
    5798:	4b1b      	ldr	r3, [pc, #108]	; (5808 <system_init+0x17c>)
    579a:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    579c:	4b1b      	ldr	r3, [pc, #108]	; (580c <system_init+0x180>)
    579e:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    57a0:	4b1b      	ldr	r3, [pc, #108]	; (5810 <system_init+0x184>)
    57a2:	4798      	blx	r3

	QSPI_N25Q256_init();
    57a4:	4b1b      	ldr	r3, [pc, #108]	; (5814 <system_init+0x188>)
    57a6:	4798      	blx	r3

	DATETIME_CLOCK_init();
    57a8:	4b1b      	ldr	r3, [pc, #108]	; (5818 <system_init+0x18c>)
    57aa:	4798      	blx	r3

	SPI_MEMORIES_init();
    57ac:	4b1b      	ldr	r3, [pc, #108]	; (581c <system_init+0x190>)
    57ae:	4798      	blx	r3

	I2C_SHARED_init();
    57b0:	4b1b      	ldr	r3, [pc, #108]	; (5820 <system_init+0x194>)
    57b2:	4798      	blx	r3

	SPI_TEMP_init();
    57b4:	4b1b      	ldr	r3, [pc, #108]	; (5824 <system_init+0x198>)
    57b6:	4798      	blx	r3

	I2C_EXPANDER_init();
    57b8:	4b1b      	ldr	r3, [pc, #108]	; (5828 <system_init+0x19c>)
    57ba:	4798      	blx	r3

	SPI_HI3593_init();
    57bc:	4b1b      	ldr	r3, [pc, #108]	; (582c <system_init+0x1a0>)
    57be:	4798      	blx	r3

	I2C_EEPROM_init();
    57c0:	4b1b      	ldr	r3, [pc, #108]	; (5830 <system_init+0x1a4>)
    57c2:	4798      	blx	r3

	TIMER_USB_init();
    57c4:	4b1b      	ldr	r3, [pc, #108]	; (5834 <system_init+0x1a8>)
    57c6:	4798      	blx	r3
	LIVE_PULSE_init();
    57c8:	4b1b      	ldr	r3, [pc, #108]	; (5838 <system_init+0x1ac>)
    57ca:	4798      	blx	r3

	TIMER_ARINC_init();
    57cc:	4b1b      	ldr	r3, [pc, #108]	; (583c <system_init+0x1b0>)
    57ce:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    57d0:	4b1b      	ldr	r3, [pc, #108]	; (5840 <system_init+0x1b4>)
    57d2:	4798      	blx	r3
	TIMER_INTERFACE_init();
    57d4:	4b1b      	ldr	r3, [pc, #108]	; (5844 <system_init+0x1b8>)
    57d6:	4798      	blx	r3
	TIMER_EVENT_init();
    57d8:	4b1b      	ldr	r3, [pc, #108]	; (5848 <system_init+0x1bc>)
    57da:	4798      	blx	r3
	TIMER_HVAC_init();
    57dc:	4b1b      	ldr	r3, [pc, #108]	; (584c <system_init+0x1c0>)
    57de:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    57e0:	4b1b      	ldr	r3, [pc, #108]	; (5850 <system_init+0x1c4>)
    57e2:	4798      	blx	r3

	CDCUSB_init();
    57e4:	4b1b      	ldr	r3, [pc, #108]	; (5854 <system_init+0x1c8>)
    57e6:	4798      	blx	r3

	WATCHDOG_init();
    57e8:	4b1b      	ldr	r3, [pc, #108]	; (5858 <system_init+0x1cc>)
    57ea:	4798      	blx	r3
	CAN_CCU_init();
    57ec:	4b1b      	ldr	r3, [pc, #108]	; (585c <system_init+0x1d0>)
    57ee:	4798      	blx	r3
}
    57f0:	bf00      	nop
    57f2:	bd80      	pop	{r7, pc}
    57f4:	00004b51 	.word	0x00004b51
    57f8:	00004b19 	.word	0x00004b19
    57fc:	00004ae1 	.word	0x00004ae1
    5800:	00004ac1 	.word	0x00004ac1
    5804:	00004a8d 	.word	0x00004a8d
    5808:	00004bb1 	.word	0x00004bb1
    580c:	00004bdd 	.word	0x00004bdd
    5810:	00004cd1 	.word	0x00004cd1
    5814:	00004e19 	.word	0x00004e19
    5818:	00004e5d 	.word	0x00004e5d
    581c:	00004f21 	.word	0x00004f21
    5820:	00004fb9 	.word	0x00004fb9
    5824:	00005085 	.word	0x00005085
    5828:	0000511d 	.word	0x0000511d
    582c:	000051e9 	.word	0x000051e9
    5830:	00005281 	.word	0x00005281
    5834:	000052ad 	.word	0x000052ad
    5838:	0000532d 	.word	0x0000532d
    583c:	00005365 	.word	0x00005365
    5840:	000053ad 	.word	0x000053ad
    5844:	000053f5 	.word	0x000053f5
    5848:	0000543d 	.word	0x0000543d
    584c:	000054ad 	.word	0x000054ad
    5850:	00005505 	.word	0x00005505
    5854:	000055c9 	.word	0x000055c9
    5858:	00005601 	.word	0x00005601
    585c:	00005649 	.word	0x00005649

00005860 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    5860:	b480      	push	{r7}
    5862:	b083      	sub	sp, #12
    5864:	af00      	add	r7, sp, #0
    5866:	4603      	mov	r3, r0
    5868:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    586a:	88fb      	ldrh	r3, [r7, #6]
    586c:	f003 0303 	and.w	r3, r3, #3
    5870:	2b00      	cmp	r3, #0
    5872:	d001      	beq.n	5878 <leap_year+0x18>
		return false;
    5874:	2300      	movs	r3, #0
    5876:	e000      	b.n	587a <leap_year+0x1a>
	} else {
		return true;
    5878:	2301      	movs	r3, #1
	}
}
    587a:	4618      	mov	r0, r3
    587c:	370c      	adds	r7, #12
    587e:	46bd      	mov	sp, r7
    5880:	f85d 7b04 	ldr.w	r7, [sp], #4
    5884:	4770      	bx	lr
	...

00005888 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    5888:	b580      	push	{r7, lr}
    588a:	b084      	sub	sp, #16
    588c:	af00      	add	r7, sp, #0
    588e:	6078      	str	r0, [r7, #4]
    5890:	460b      	mov	r3, r1
    5892:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    5894:	2300      	movs	r3, #0
    5896:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    5898:	687b      	ldr	r3, [r7, #4]
    589a:	b29b      	uxth	r3, r3
    589c:	4618      	mov	r0, r3
    589e:	4b2f      	ldr	r3, [pc, #188]	; (595c <get_secs_in_month+0xd4>)
    58a0:	4798      	blx	r3
    58a2:	4603      	mov	r3, r0
    58a4:	2b00      	cmp	r3, #0
    58a6:	d028      	beq.n	58fa <get_secs_in_month+0x72>
		switch (month) {
    58a8:	78fb      	ldrb	r3, [r7, #3]
    58aa:	3b01      	subs	r3, #1
    58ac:	2b0b      	cmp	r3, #11
    58ae:	d84c      	bhi.n	594a <get_secs_in_month+0xc2>
    58b0:	a201      	add	r2, pc, #4	; (adr r2, 58b8 <get_secs_in_month+0x30>)
    58b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    58b6:	bf00      	nop
    58b8:	000058e9 	.word	0x000058e9
    58bc:	000058ef 	.word	0x000058ef
    58c0:	000058e9 	.word	0x000058e9
    58c4:	000058f5 	.word	0x000058f5
    58c8:	000058e9 	.word	0x000058e9
    58cc:	000058f5 	.word	0x000058f5
    58d0:	000058e9 	.word	0x000058e9
    58d4:	000058e9 	.word	0x000058e9
    58d8:	000058f5 	.word	0x000058f5
    58dc:	000058e9 	.word	0x000058e9
    58e0:	000058f5 	.word	0x000058f5
    58e4:	000058e9 	.word	0x000058e9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    58e8:	4b1d      	ldr	r3, [pc, #116]	; (5960 <get_secs_in_month+0xd8>)
    58ea:	60fb      	str	r3, [r7, #12]
			break;
    58ec:	e030      	b.n	5950 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    58ee:	4b1d      	ldr	r3, [pc, #116]	; (5964 <get_secs_in_month+0xdc>)
    58f0:	60fb      	str	r3, [r7, #12]
			break;
    58f2:	e02d      	b.n	5950 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    58f4:	4b1c      	ldr	r3, [pc, #112]	; (5968 <get_secs_in_month+0xe0>)
    58f6:	60fb      	str	r3, [r7, #12]
			break;
    58f8:	e02a      	b.n	5950 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    58fa:	78fb      	ldrb	r3, [r7, #3]
    58fc:	3b01      	subs	r3, #1
    58fe:	2b0b      	cmp	r3, #11
    5900:	d825      	bhi.n	594e <get_secs_in_month+0xc6>
    5902:	a201      	add	r2, pc, #4	; (adr r2, 5908 <get_secs_in_month+0x80>)
    5904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5908:	00005939 	.word	0x00005939
    590c:	0000593f 	.word	0x0000593f
    5910:	00005939 	.word	0x00005939
    5914:	00005945 	.word	0x00005945
    5918:	00005939 	.word	0x00005939
    591c:	00005945 	.word	0x00005945
    5920:	00005939 	.word	0x00005939
    5924:	00005939 	.word	0x00005939
    5928:	00005945 	.word	0x00005945
    592c:	00005939 	.word	0x00005939
    5930:	00005945 	.word	0x00005945
    5934:	00005939 	.word	0x00005939
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    5938:	4b09      	ldr	r3, [pc, #36]	; (5960 <get_secs_in_month+0xd8>)
    593a:	60fb      	str	r3, [r7, #12]
			break;
    593c:	e008      	b.n	5950 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    593e:	4b0b      	ldr	r3, [pc, #44]	; (596c <get_secs_in_month+0xe4>)
    5940:	60fb      	str	r3, [r7, #12]
			break;
    5942:	e005      	b.n	5950 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    5944:	4b08      	ldr	r3, [pc, #32]	; (5968 <get_secs_in_month+0xe0>)
    5946:	60fb      	str	r3, [r7, #12]
			break;
    5948:	e002      	b.n	5950 <get_secs_in_month+0xc8>
			break;
    594a:	bf00      	nop
    594c:	e000      	b.n	5950 <get_secs_in_month+0xc8>
		default:
			break;
    594e:	bf00      	nop
		}
	}

	return sec_in_month;
    5950:	68fb      	ldr	r3, [r7, #12]
}
    5952:	4618      	mov	r0, r3
    5954:	3710      	adds	r7, #16
    5956:	46bd      	mov	sp, r7
    5958:	bd80      	pop	{r7, pc}
    595a:	bf00      	nop
    595c:	00005861 	.word	0x00005861
    5960:	0028de80 	.word	0x0028de80
    5964:	00263b80 	.word	0x00263b80
    5968:	00278d00 	.word	0x00278d00
    596c:	0024ea00 	.word	0x0024ea00

00005970 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    5970:	b580      	push	{r7, lr}
    5972:	b08a      	sub	sp, #40	; 0x28
    5974:	af00      	add	r7, sp, #0
    5976:	60f8      	str	r0, [r7, #12]
    5978:	60b9      	str	r1, [r7, #8]
    597a:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    597c:	68fb      	ldr	r3, [r7, #12]
    597e:	699b      	ldr	r3, [r3, #24]
    5980:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    5982:	2301      	movs	r3, #1
    5984:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    5986:	2301      	movs	r3, #1
    5988:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    598a:	2300      	movs	r3, #0
    598c:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    598e:	2300      	movs	r3, #0
    5990:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    5992:	68bb      	ldr	r3, [r7, #8]
    5994:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    5996:	6a3b      	ldr	r3, [r7, #32]
    5998:	b29b      	uxth	r3, r3
    599a:	4618      	mov	r0, r3
    599c:	4b32      	ldr	r3, [pc, #200]	; (5a68 <convert_timestamp_to_datetime+0xf8>)
    599e:	4798      	blx	r3
    59a0:	4603      	mov	r3, r0
    59a2:	2b00      	cmp	r3, #0
    59a4:	d001      	beq.n	59aa <convert_timestamp_to_datetime+0x3a>
    59a6:	4b31      	ldr	r3, [pc, #196]	; (5a6c <convert_timestamp_to_datetime+0xfc>)
    59a8:	e000      	b.n	59ac <convert_timestamp_to_datetime+0x3c>
    59aa:	4b31      	ldr	r3, [pc, #196]	; (5a70 <convert_timestamp_to_datetime+0x100>)
    59ac:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    59ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    59b0:	69bb      	ldr	r3, [r7, #24]
    59b2:	429a      	cmp	r2, r3
    59b4:	d307      	bcc.n	59c6 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    59b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    59b8:	69bb      	ldr	r3, [r7, #24]
    59ba:	1ad3      	subs	r3, r2, r3
    59bc:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    59be:	6a3b      	ldr	r3, [r7, #32]
    59c0:	3301      	adds	r3, #1
    59c2:	623b      	str	r3, [r7, #32]
    59c4:	e7e7      	b.n	5996 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    59c6:	7ffb      	ldrb	r3, [r7, #31]
    59c8:	4619      	mov	r1, r3
    59ca:	6a38      	ldr	r0, [r7, #32]
    59cc:	4b29      	ldr	r3, [pc, #164]	; (5a74 <convert_timestamp_to_datetime+0x104>)
    59ce:	4798      	blx	r3
    59d0:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    59d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    59d4:	697b      	ldr	r3, [r7, #20]
    59d6:	429a      	cmp	r2, r3
    59d8:	d307      	bcc.n	59ea <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    59da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    59dc:	697b      	ldr	r3, [r7, #20]
    59de:	1ad3      	subs	r3, r2, r3
    59e0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    59e2:	7ffb      	ldrb	r3, [r7, #31]
    59e4:	3301      	adds	r3, #1
    59e6:	77fb      	strb	r3, [r7, #31]
    59e8:	e7ed      	b.n	59c6 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    59ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59ec:	4a22      	ldr	r2, [pc, #136]	; (5a78 <convert_timestamp_to_datetime+0x108>)
    59ee:	4293      	cmp	r3, r2
    59f0:	d909      	bls.n	5a06 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    59f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59f4:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    59f8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    59fc:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    59fe:	7fbb      	ldrb	r3, [r7, #30]
    5a00:	3301      	adds	r3, #1
    5a02:	77bb      	strb	r3, [r7, #30]
    5a04:	e7f1      	b.n	59ea <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    5a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a08:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    5a0c:	d307      	bcc.n	5a1e <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    5a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a10:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    5a14:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    5a16:	7f7b      	ldrb	r3, [r7, #29]
    5a18:	3301      	adds	r3, #1
    5a1a:	777b      	strb	r3, [r7, #29]
    5a1c:	e7f3      	b.n	5a06 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    5a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a20:	2b3b      	cmp	r3, #59	; 0x3b
    5a22:	d906      	bls.n	5a32 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    5a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a26:	3b3c      	subs	r3, #60	; 0x3c
    5a28:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    5a2a:	7f3b      	ldrb	r3, [r7, #28]
    5a2c:	3301      	adds	r3, #1
    5a2e:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    5a30:	e7f5      	b.n	5a1e <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    5a32:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    5a34:	6a3b      	ldr	r3, [r7, #32]
    5a36:	b29a      	uxth	r2, r3
    5a38:	687b      	ldr	r3, [r7, #4]
    5a3a:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    5a3c:	687b      	ldr	r3, [r7, #4]
    5a3e:	7ffa      	ldrb	r2, [r7, #31]
    5a40:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    5a42:	687b      	ldr	r3, [r7, #4]
    5a44:	7fba      	ldrb	r2, [r7, #30]
    5a46:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    5a48:	687b      	ldr	r3, [r7, #4]
    5a4a:	7f7a      	ldrb	r2, [r7, #29]
    5a4c:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	7f3a      	ldrb	r2, [r7, #28]
    5a52:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    5a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a56:	b2da      	uxtb	r2, r3
    5a58:	687b      	ldr	r3, [r7, #4]
    5a5a:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    5a5c:	2300      	movs	r3, #0
}
    5a5e:	4618      	mov	r0, r3
    5a60:	3728      	adds	r7, #40	; 0x28
    5a62:	46bd      	mov	sp, r7
    5a64:	bd80      	pop	{r7, pc}
    5a66:	bf00      	nop
    5a68:	00005861 	.word	0x00005861
    5a6c:	01e28500 	.word	0x01e28500
    5a70:	01e13380 	.word	0x01e13380
    5a74:	00005889 	.word	0x00005889
    5a78:	0001517f 	.word	0x0001517f

00005a7c <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    5a7c:	b580      	push	{r7, lr}
    5a7e:	b086      	sub	sp, #24
    5a80:	af00      	add	r7, sp, #0
    5a82:	6078      	str	r0, [r7, #4]
    5a84:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    5a86:	2300      	movs	r3, #0
    5a88:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    5a8a:	2300      	movs	r3, #0
    5a8c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    5a8e:	683b      	ldr	r3, [r7, #0]
    5a90:	88db      	ldrh	r3, [r3, #6]
    5a92:	b2da      	uxtb	r2, r3
    5a94:	687b      	ldr	r3, [r7, #4]
    5a96:	699b      	ldr	r3, [r3, #24]
    5a98:	b2db      	uxtb	r3, r3
    5a9a:	1ad3      	subs	r3, r2, r3
    5a9c:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    5a9e:	683b      	ldr	r3, [r7, #0]
    5aa0:	795b      	ldrb	r3, [r3, #5]
    5aa2:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    5aa4:	683b      	ldr	r3, [r7, #0]
    5aa6:	791b      	ldrb	r3, [r3, #4]
    5aa8:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    5aaa:	683b      	ldr	r3, [r7, #0]
    5aac:	789b      	ldrb	r3, [r3, #2]
    5aae:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    5ab0:	683b      	ldr	r3, [r7, #0]
    5ab2:	785b      	ldrb	r3, [r3, #1]
    5ab4:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    5ab6:	683b      	ldr	r3, [r7, #0]
    5ab8:	781b      	ldrb	r3, [r3, #0]
    5aba:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    5abc:	2300      	movs	r3, #0
    5abe:	613b      	str	r3, [r7, #16]
    5ac0:	e01a      	b.n	5af8 <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    5ac2:	687b      	ldr	r3, [r7, #4]
    5ac4:	699b      	ldr	r3, [r3, #24]
    5ac6:	b29a      	uxth	r2, r3
    5ac8:	693b      	ldr	r3, [r7, #16]
    5aca:	b29b      	uxth	r3, r3
    5acc:	4413      	add	r3, r2
    5ace:	b29b      	uxth	r3, r3
    5ad0:	4618      	mov	r0, r3
    5ad2:	4b29      	ldr	r3, [pc, #164]	; (5b78 <convert_datetime_to_timestamp+0xfc>)
    5ad4:	4798      	blx	r3
    5ad6:	4603      	mov	r3, r0
    5ad8:	2b00      	cmp	r3, #0
    5ada:	d006      	beq.n	5aea <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    5adc:	697b      	ldr	r3, [r7, #20]
    5ade:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    5ae2:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    5ae6:	617b      	str	r3, [r7, #20]
    5ae8:	e003      	b.n	5af2 <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    5aea:	697a      	ldr	r2, [r7, #20]
    5aec:	4b23      	ldr	r3, [pc, #140]	; (5b7c <convert_datetime_to_timestamp+0x100>)
    5aee:	4413      	add	r3, r2
    5af0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    5af2:	693b      	ldr	r3, [r7, #16]
    5af4:	3301      	adds	r3, #1
    5af6:	613b      	str	r3, [r7, #16]
    5af8:	7bfa      	ldrb	r2, [r7, #15]
    5afa:	693b      	ldr	r3, [r7, #16]
    5afc:	429a      	cmp	r2, r3
    5afe:	d8e0      	bhi.n	5ac2 <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    5b00:	2301      	movs	r3, #1
    5b02:	613b      	str	r3, [r7, #16]
    5b04:	e00f      	b.n	5b26 <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    5b06:	683b      	ldr	r3, [r7, #0]
    5b08:	88db      	ldrh	r3, [r3, #6]
    5b0a:	461a      	mov	r2, r3
    5b0c:	693b      	ldr	r3, [r7, #16]
    5b0e:	b2db      	uxtb	r3, r3
    5b10:	4619      	mov	r1, r3
    5b12:	4610      	mov	r0, r2
    5b14:	4b1a      	ldr	r3, [pc, #104]	; (5b80 <convert_datetime_to_timestamp+0x104>)
    5b16:	4798      	blx	r3
    5b18:	4602      	mov	r2, r0
    5b1a:	697b      	ldr	r3, [r7, #20]
    5b1c:	4413      	add	r3, r2
    5b1e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    5b20:	693b      	ldr	r3, [r7, #16]
    5b22:	3301      	adds	r3, #1
    5b24:	613b      	str	r3, [r7, #16]
    5b26:	7bba      	ldrb	r2, [r7, #14]
    5b28:	693b      	ldr	r3, [r7, #16]
    5b2a:	429a      	cmp	r2, r3
    5b2c:	d8eb      	bhi.n	5b06 <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    5b2e:	7b7b      	ldrb	r3, [r7, #13]
    5b30:	3b01      	subs	r3, #1
    5b32:	4a14      	ldr	r2, [pc, #80]	; (5b84 <convert_datetime_to_timestamp+0x108>)
    5b34:	fb02 f303 	mul.w	r3, r2, r3
    5b38:	461a      	mov	r2, r3
    5b3a:	697b      	ldr	r3, [r7, #20]
    5b3c:	4413      	add	r3, r2
    5b3e:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    5b40:	7b3b      	ldrb	r3, [r7, #12]
    5b42:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    5b46:	fb02 f303 	mul.w	r3, r2, r3
    5b4a:	461a      	mov	r2, r3
    5b4c:	697b      	ldr	r3, [r7, #20]
    5b4e:	4413      	add	r3, r2
    5b50:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    5b52:	7afa      	ldrb	r2, [r7, #11]
    5b54:	4613      	mov	r3, r2
    5b56:	011b      	lsls	r3, r3, #4
    5b58:	1a9b      	subs	r3, r3, r2
    5b5a:	009b      	lsls	r3, r3, #2
    5b5c:	461a      	mov	r2, r3
    5b5e:	697b      	ldr	r3, [r7, #20]
    5b60:	4413      	add	r3, r2
    5b62:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    5b64:	7abb      	ldrb	r3, [r7, #10]
    5b66:	697a      	ldr	r2, [r7, #20]
    5b68:	4413      	add	r3, r2
    5b6a:	617b      	str	r3, [r7, #20]

	return tmp;
    5b6c:	697b      	ldr	r3, [r7, #20]
}
    5b6e:	4618      	mov	r0, r3
    5b70:	3718      	adds	r7, #24
    5b72:	46bd      	mov	sp, r7
    5b74:	bd80      	pop	{r7, pc}
    5b76:	bf00      	nop
    5b78:	00005861 	.word	0x00005861
    5b7c:	01e13380 	.word	0x01e13380
    5b80:	00005889 	.word	0x00005889
    5b84:	00015180 	.word	0x00015180

00005b88 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    5b88:	b580      	push	{r7, lr}
    5b8a:	b084      	sub	sp, #16
    5b8c:	af00      	add	r7, sp, #0
    5b8e:	6078      	str	r0, [r7, #4]
    5b90:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    5b92:	2300      	movs	r3, #0
    5b94:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    5b96:	687b      	ldr	r3, [r7, #4]
    5b98:	2b00      	cmp	r3, #0
    5b9a:	bf14      	ite	ne
    5b9c:	2301      	movne	r3, #1
    5b9e:	2300      	moveq	r3, #0
    5ba0:	b2db      	uxtb	r3, r3
    5ba2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    5ba6:	4911      	ldr	r1, [pc, #68]	; (5bec <calendar_init+0x64>)
    5ba8:	4618      	mov	r0, r3
    5baa:	4b11      	ldr	r3, [pc, #68]	; (5bf0 <calendar_init+0x68>)
    5bac:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    5bae:	687b      	ldr	r3, [r7, #4]
    5bb0:	681a      	ldr	r2, [r3, #0]
    5bb2:	683b      	ldr	r3, [r7, #0]
    5bb4:	429a      	cmp	r2, r3
    5bb6:	d101      	bne.n	5bbc <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    5bb8:	2300      	movs	r3, #0
    5bba:	e013      	b.n	5be4 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    5bbc:	687b      	ldr	r3, [r7, #4]
    5bbe:	681b      	ldr	r3, [r3, #0]
    5bc0:	2b00      	cmp	r3, #0
    5bc2:	d002      	beq.n	5bca <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    5bc4:	f06f 0311 	mvn.w	r3, #17
    5bc8:	e00c      	b.n	5be4 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    5bca:	687b      	ldr	r3, [r7, #4]
    5bcc:	683a      	ldr	r2, [r7, #0]
    5bce:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    5bd0:	687b      	ldr	r3, [r7, #4]
    5bd2:	4618      	mov	r0, r3
    5bd4:	4b07      	ldr	r3, [pc, #28]	; (5bf4 <calendar_init+0x6c>)
    5bd6:	4798      	blx	r3
    5bd8:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    5bda:	687b      	ldr	r3, [r7, #4]
    5bdc:	f240 72b2 	movw	r2, #1970	; 0x7b2
    5be0:	619a      	str	r2, [r3, #24]

	return ret;
    5be2:	68fb      	ldr	r3, [r7, #12]
}
    5be4:	4618      	mov	r0, r3
    5be6:	3710      	adds	r7, #16
    5be8:	46bd      	mov	sp, r7
    5bea:	bd80      	pop	{r7, pc}
    5bec:	00020154 	.word	0x00020154
    5bf0:	00007d5d 	.word	0x00007d5d
    5bf4:	0000a69d 	.word	0x0000a69d

00005bf8 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    5bf8:	b580      	push	{r7, lr}
    5bfa:	b082      	sub	sp, #8
    5bfc:	af00      	add	r7, sp, #0
    5bfe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    5c00:	687b      	ldr	r3, [r7, #4]
    5c02:	2b00      	cmp	r3, #0
    5c04:	bf14      	ite	ne
    5c06:	2301      	movne	r3, #1
    5c08:	2300      	moveq	r3, #0
    5c0a:	b2db      	uxtb	r3, r3
    5c0c:	f240 12e5 	movw	r2, #485	; 0x1e5
    5c10:	4906      	ldr	r1, [pc, #24]	; (5c2c <calendar_enable+0x34>)
    5c12:	4618      	mov	r0, r3
    5c14:	4b06      	ldr	r3, [pc, #24]	; (5c30 <calendar_enable+0x38>)
    5c16:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    5c18:	687b      	ldr	r3, [r7, #4]
    5c1a:	4618      	mov	r0, r3
    5c1c:	4b05      	ldr	r3, [pc, #20]	; (5c34 <calendar_enable+0x3c>)
    5c1e:	4798      	blx	r3

	return ERR_NONE;
    5c20:	2300      	movs	r3, #0
}
    5c22:	4618      	mov	r0, r3
    5c24:	3708      	adds	r7, #8
    5c26:	46bd      	mov	sp, r7
    5c28:	bd80      	pop	{r7, pc}
    5c2a:	bf00      	nop
    5c2c:	00020154 	.word	0x00020154
    5c30:	00007d5d 	.word	0x00007d5d
    5c34:	0000a755 	.word	0x0000a755

00005c38 <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    5c38:	b580      	push	{r7, lr}
    5c3a:	b086      	sub	sp, #24
    5c3c:	af00      	add	r7, sp, #0
    5c3e:	6078      	str	r0, [r7, #4]
    5c40:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    5c42:	687b      	ldr	r3, [r7, #4]
    5c44:	2b00      	cmp	r3, #0
    5c46:	bf14      	ite	ne
    5c48:	2301      	movne	r3, #1
    5c4a:	2300      	moveq	r3, #0
    5c4c:	b2db      	uxtb	r3, r3
    5c4e:	f44f 7203 	mov.w	r2, #524	; 0x20c
    5c52:	4915      	ldr	r1, [pc, #84]	; (5ca8 <calendar_set_time+0x70>)
    5c54:	4618      	mov	r0, r3
    5c56:	4b15      	ldr	r3, [pc, #84]	; (5cac <calendar_set_time+0x74>)
    5c58:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    5c5a:	687b      	ldr	r3, [r7, #4]
    5c5c:	4618      	mov	r0, r3
    5c5e:	4b14      	ldr	r3, [pc, #80]	; (5cb0 <calendar_set_time+0x78>)
    5c60:	4798      	blx	r3
    5c62:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    5c64:	f107 0308 	add.w	r3, r7, #8
    5c68:	461a      	mov	r2, r3
    5c6a:	6979      	ldr	r1, [r7, #20]
    5c6c:	6878      	ldr	r0, [r7, #4]
    5c6e:	4b11      	ldr	r3, [pc, #68]	; (5cb4 <calendar_set_time+0x7c>)
    5c70:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    5c72:	683b      	ldr	r3, [r7, #0]
    5c74:	781b      	ldrb	r3, [r3, #0]
    5c76:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    5c78:	683b      	ldr	r3, [r7, #0]
    5c7a:	785b      	ldrb	r3, [r3, #1]
    5c7c:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    5c7e:	683b      	ldr	r3, [r7, #0]
    5c80:	789b      	ldrb	r3, [r3, #2]
    5c82:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    5c84:	f107 0308 	add.w	r3, r7, #8
    5c88:	4619      	mov	r1, r3
    5c8a:	6878      	ldr	r0, [r7, #4]
    5c8c:	4b0a      	ldr	r3, [pc, #40]	; (5cb8 <calendar_set_time+0x80>)
    5c8e:	4798      	blx	r3
    5c90:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	6939      	ldr	r1, [r7, #16]
    5c96:	4618      	mov	r0, r3
    5c98:	4b08      	ldr	r3, [pc, #32]	; (5cbc <calendar_set_time+0x84>)
    5c9a:	4798      	blx	r3

	return ERR_NONE;
    5c9c:	2300      	movs	r3, #0
}
    5c9e:	4618      	mov	r0, r3
    5ca0:	3718      	adds	r7, #24
    5ca2:	46bd      	mov	sp, r7
    5ca4:	bd80      	pop	{r7, pc}
    5ca6:	bf00      	nop
    5ca8:	00020154 	.word	0x00020154
    5cac:	00007d5d 	.word	0x00007d5d
    5cb0:	0000a7f1 	.word	0x0000a7f1
    5cb4:	00005971 	.word	0x00005971
    5cb8:	00005a7d 	.word	0x00005a7d
    5cbc:	0000a7a1 	.word	0x0000a7a1

00005cc0 <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    5cc0:	b580      	push	{r7, lr}
    5cc2:	b086      	sub	sp, #24
    5cc4:	af00      	add	r7, sp, #0
    5cc6:	6078      	str	r0, [r7, #4]
    5cc8:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    5cca:	687b      	ldr	r3, [r7, #4]
    5ccc:	2b00      	cmp	r3, #0
    5cce:	bf14      	ite	ne
    5cd0:	2301      	movne	r3, #1
    5cd2:	2300      	moveq	r3, #0
    5cd4:	b2db      	uxtb	r3, r3
    5cd6:	f44f 7209 	mov.w	r2, #548	; 0x224
    5cda:	4915      	ldr	r1, [pc, #84]	; (5d30 <calendar_set_date+0x70>)
    5cdc:	4618      	mov	r0, r3
    5cde:	4b15      	ldr	r3, [pc, #84]	; (5d34 <calendar_set_date+0x74>)
    5ce0:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    5ce2:	687b      	ldr	r3, [r7, #4]
    5ce4:	4618      	mov	r0, r3
    5ce6:	4b14      	ldr	r3, [pc, #80]	; (5d38 <calendar_set_date+0x78>)
    5ce8:	4798      	blx	r3
    5cea:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    5cec:	f107 0308 	add.w	r3, r7, #8
    5cf0:	461a      	mov	r2, r3
    5cf2:	6979      	ldr	r1, [r7, #20]
    5cf4:	6878      	ldr	r0, [r7, #4]
    5cf6:	4b11      	ldr	r3, [pc, #68]	; (5d3c <calendar_set_date+0x7c>)
    5cf8:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    5cfa:	683b      	ldr	r3, [r7, #0]
    5cfc:	781b      	ldrb	r3, [r3, #0]
    5cfe:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    5d00:	683b      	ldr	r3, [r7, #0]
    5d02:	785b      	ldrb	r3, [r3, #1]
    5d04:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    5d06:	683b      	ldr	r3, [r7, #0]
    5d08:	885b      	ldrh	r3, [r3, #2]
    5d0a:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    5d0c:	f107 0308 	add.w	r3, r7, #8
    5d10:	4619      	mov	r1, r3
    5d12:	6878      	ldr	r0, [r7, #4]
    5d14:	4b0a      	ldr	r3, [pc, #40]	; (5d40 <calendar_set_date+0x80>)
    5d16:	4798      	blx	r3
    5d18:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    5d1a:	687b      	ldr	r3, [r7, #4]
    5d1c:	6939      	ldr	r1, [r7, #16]
    5d1e:	4618      	mov	r0, r3
    5d20:	4b08      	ldr	r3, [pc, #32]	; (5d44 <calendar_set_date+0x84>)
    5d22:	4798      	blx	r3

	return ERR_NONE;
    5d24:	2300      	movs	r3, #0
}
    5d26:	4618      	mov	r0, r3
    5d28:	3718      	adds	r7, #24
    5d2a:	46bd      	mov	sp, r7
    5d2c:	bd80      	pop	{r7, pc}
    5d2e:	bf00      	nop
    5d30:	00020154 	.word	0x00020154
    5d34:	00007d5d 	.word	0x00007d5d
    5d38:	0000a7f1 	.word	0x0000a7f1
    5d3c:	00005971 	.word	0x00005971
    5d40:	00005a7d 	.word	0x00005a7d
    5d44:	0000a7a1 	.word	0x0000a7a1

00005d48 <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    5d48:	b580      	push	{r7, lr}
    5d4a:	b084      	sub	sp, #16
    5d4c:	af00      	add	r7, sp, #0
    5d4e:	6078      	str	r0, [r7, #4]
    5d50:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    5d52:	687b      	ldr	r3, [r7, #4]
    5d54:	2b00      	cmp	r3, #0
    5d56:	bf14      	ite	ne
    5d58:	2301      	movne	r3, #1
    5d5a:	2300      	moveq	r3, #0
    5d5c:	b2db      	uxtb	r3, r3
    5d5e:	f240 223b 	movw	r2, #571	; 0x23b
    5d62:	4909      	ldr	r1, [pc, #36]	; (5d88 <calendar_get_date_time+0x40>)
    5d64:	4618      	mov	r0, r3
    5d66:	4b09      	ldr	r3, [pc, #36]	; (5d8c <calendar_get_date_time+0x44>)
    5d68:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    5d6a:	687b      	ldr	r3, [r7, #4]
    5d6c:	4618      	mov	r0, r3
    5d6e:	4b08      	ldr	r3, [pc, #32]	; (5d90 <calendar_get_date_time+0x48>)
    5d70:	4798      	blx	r3
    5d72:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    5d74:	683a      	ldr	r2, [r7, #0]
    5d76:	68f9      	ldr	r1, [r7, #12]
    5d78:	6878      	ldr	r0, [r7, #4]
    5d7a:	4b06      	ldr	r3, [pc, #24]	; (5d94 <calendar_get_date_time+0x4c>)
    5d7c:	4798      	blx	r3

	return ERR_NONE;
    5d7e:	2300      	movs	r3, #0
}
    5d80:	4618      	mov	r0, r3
    5d82:	3710      	adds	r7, #16
    5d84:	46bd      	mov	sp, r7
    5d86:	bd80      	pop	{r7, pc}
    5d88:	00020154 	.word	0x00020154
    5d8c:	00007d5d 	.word	0x00007d5d
    5d90:	0000a7f1 	.word	0x0000a7f1
    5d94:	00005971 	.word	0x00005971

00005d98 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    5d98:	b580      	push	{r7, lr}
    5d9a:	b084      	sub	sp, #16
    5d9c:	af00      	add	r7, sp, #0
    5d9e:	6078      	str	r0, [r7, #4]
    5da0:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    5da2:	687b      	ldr	r3, [r7, #4]
    5da4:	2b00      	cmp	r3, #0
    5da6:	d004      	beq.n	5db2 <can_async_init+0x1a>
    5da8:	683b      	ldr	r3, [r7, #0]
    5daa:	2b00      	cmp	r3, #0
    5dac:	d001      	beq.n	5db2 <can_async_init+0x1a>
    5dae:	2301      	movs	r3, #1
    5db0:	e000      	b.n	5db4 <can_async_init+0x1c>
    5db2:	2300      	movs	r3, #0
    5db4:	f003 0301 	and.w	r3, r3, #1
    5db8:	b2db      	uxtb	r3, r3
    5dba:	2241      	movs	r2, #65	; 0x41
    5dbc:	490e      	ldr	r1, [pc, #56]	; (5df8 <can_async_init+0x60>)
    5dbe:	4618      	mov	r0, r3
    5dc0:	4b0e      	ldr	r3, [pc, #56]	; (5dfc <can_async_init+0x64>)
    5dc2:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    5dc4:	687b      	ldr	r3, [r7, #4]
    5dc6:	6839      	ldr	r1, [r7, #0]
    5dc8:	4618      	mov	r0, r3
    5dca:	4b0d      	ldr	r3, [pc, #52]	; (5e00 <can_async_init+0x68>)
    5dcc:	4798      	blx	r3
    5dce:	60f8      	str	r0, [r7, #12]
	if (rc) {
    5dd0:	68fb      	ldr	r3, [r7, #12]
    5dd2:	2b00      	cmp	r3, #0
    5dd4:	d001      	beq.n	5dda <can_async_init+0x42>
		return rc;
    5dd6:	68fb      	ldr	r3, [r7, #12]
    5dd8:	e009      	b.n	5dee <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    5dda:	687b      	ldr	r3, [r7, #4]
    5ddc:	4a09      	ldr	r2, [pc, #36]	; (5e04 <can_async_init+0x6c>)
    5dde:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    5de0:	687b      	ldr	r3, [r7, #4]
    5de2:	4a09      	ldr	r2, [pc, #36]	; (5e08 <can_async_init+0x70>)
    5de4:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    5de6:	687b      	ldr	r3, [r7, #4]
    5de8:	4a08      	ldr	r2, [pc, #32]	; (5e0c <can_async_init+0x74>)
    5dea:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    5dec:	2300      	movs	r3, #0
}
    5dee:	4618      	mov	r0, r3
    5df0:	3710      	adds	r7, #16
    5df2:	46bd      	mov	sp, r7
    5df4:	bd80      	pop	{r7, pc}
    5df6:	bf00      	nop
    5df8:	00020170 	.word	0x00020170
    5dfc:	00007d5d 	.word	0x00007d5d
    5e00:	000082b9 	.word	0x000082b9
    5e04:	00005e11 	.word	0x00005e11
    5e08:	00005e35 	.word	0x00005e35
    5e0c:	00005e59 	.word	0x00005e59

00005e10 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    5e10:	b580      	push	{r7, lr}
    5e12:	b084      	sub	sp, #16
    5e14:	af00      	add	r7, sp, #0
    5e16:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5e18:	687b      	ldr	r3, [r7, #4]
    5e1a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    5e1c:	68fb      	ldr	r3, [r7, #12]
    5e1e:	69db      	ldr	r3, [r3, #28]
    5e20:	2b00      	cmp	r3, #0
    5e22:	d003      	beq.n	5e2c <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    5e24:	68fb      	ldr	r3, [r7, #12]
    5e26:	69db      	ldr	r3, [r3, #28]
    5e28:	68f8      	ldr	r0, [r7, #12]
    5e2a:	4798      	blx	r3
	}
}
    5e2c:	bf00      	nop
    5e2e:	3710      	adds	r7, #16
    5e30:	46bd      	mov	sp, r7
    5e32:	bd80      	pop	{r7, pc}

00005e34 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    5e34:	b580      	push	{r7, lr}
    5e36:	b084      	sub	sp, #16
    5e38:	af00      	add	r7, sp, #0
    5e3a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5e3c:	687b      	ldr	r3, [r7, #4]
    5e3e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    5e40:	68fb      	ldr	r3, [r7, #12]
    5e42:	6a1b      	ldr	r3, [r3, #32]
    5e44:	2b00      	cmp	r3, #0
    5e46:	d003      	beq.n	5e50 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    5e48:	68fb      	ldr	r3, [r7, #12]
    5e4a:	6a1b      	ldr	r3, [r3, #32]
    5e4c:	68f8      	ldr	r0, [r7, #12]
    5e4e:	4798      	blx	r3
	}
}
    5e50:	bf00      	nop
    5e52:	3710      	adds	r7, #16
    5e54:	46bd      	mov	sp, r7
    5e56:	bd80      	pop	{r7, pc}

00005e58 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    5e58:	b580      	push	{r7, lr}
    5e5a:	b084      	sub	sp, #16
    5e5c:	af00      	add	r7, sp, #0
    5e5e:	6078      	str	r0, [r7, #4]
    5e60:	460b      	mov	r3, r1
    5e62:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5e64:	687b      	ldr	r3, [r7, #4]
    5e66:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    5e68:	68fb      	ldr	r3, [r7, #12]
    5e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d005      	beq.n	5e7c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    5e70:	68fb      	ldr	r3, [r7, #12]
    5e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e74:	78fa      	ldrb	r2, [r7, #3]
    5e76:	4611      	mov	r1, r2
    5e78:	68f8      	ldr	r0, [r7, #12]
    5e7a:	4798      	blx	r3
	}
}
    5e7c:	bf00      	nop
    5e7e:	3710      	adds	r7, #16
    5e80:	46bd      	mov	sp, r7
    5e82:	bd80      	pop	{r7, pc}

00005e84 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    5e84:	b580      	push	{r7, lr}
    5e86:	b082      	sub	sp, #8
    5e88:	af00      	add	r7, sp, #0
    5e8a:	6078      	str	r0, [r7, #4]
    5e8c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    5e8e:	687b      	ldr	r3, [r7, #4]
    5e90:	2b00      	cmp	r3, #0
    5e92:	d004      	beq.n	5e9e <crc_sync_init+0x1a>
    5e94:	683b      	ldr	r3, [r7, #0]
    5e96:	2b00      	cmp	r3, #0
    5e98:	d001      	beq.n	5e9e <crc_sync_init+0x1a>
    5e9a:	2301      	movs	r3, #1
    5e9c:	e000      	b.n	5ea0 <crc_sync_init+0x1c>
    5e9e:	2300      	movs	r3, #0
    5ea0:	f003 0301 	and.w	r3, r3, #1
    5ea4:	b2db      	uxtb	r3, r3
    5ea6:	222b      	movs	r2, #43	; 0x2b
    5ea8:	4906      	ldr	r1, [pc, #24]	; (5ec4 <crc_sync_init+0x40>)
    5eaa:	4618      	mov	r0, r3
    5eac:	4b06      	ldr	r3, [pc, #24]	; (5ec8 <crc_sync_init+0x44>)
    5eae:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    5eb0:	687b      	ldr	r3, [r7, #4]
    5eb2:	6839      	ldr	r1, [r7, #0]
    5eb4:	4618      	mov	r0, r3
    5eb6:	4b05      	ldr	r3, [pc, #20]	; (5ecc <crc_sync_init+0x48>)
    5eb8:	4798      	blx	r3
    5eba:	4603      	mov	r3, r0
}
    5ebc:	4618      	mov	r0, r3
    5ebe:	3708      	adds	r7, #8
    5ec0:	46bd      	mov	sp, r7
    5ec2:	bd80      	pop	{r7, pc}
    5ec4:	0002018c 	.word	0x0002018c
    5ec8:	00007d5d 	.word	0x00007d5d
    5ecc:	00008ae9 	.word	0x00008ae9

00005ed0 <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
    5ed0:	b580      	push	{r7, lr}
    5ed2:	b082      	sub	sp, #8
    5ed4:	af00      	add	r7, sp, #0
    5ed6:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5ed8:	687b      	ldr	r3, [r7, #4]
    5eda:	2b00      	cmp	r3, #0
    5edc:	bf14      	ite	ne
    5ede:	2301      	movne	r3, #1
    5ee0:	2300      	moveq	r3, #0
    5ee2:	b2db      	uxtb	r3, r3
    5ee4:	223f      	movs	r2, #63	; 0x3f
    5ee6:	4906      	ldr	r1, [pc, #24]	; (5f00 <crc_sync_enable+0x30>)
    5ee8:	4618      	mov	r0, r3
    5eea:	4b06      	ldr	r3, [pc, #24]	; (5f04 <crc_sync_enable+0x34>)
    5eec:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
    5eee:	687b      	ldr	r3, [r7, #4]
    5ef0:	4618      	mov	r0, r3
    5ef2:	4b05      	ldr	r3, [pc, #20]	; (5f08 <crc_sync_enable+0x38>)
    5ef4:	4798      	blx	r3
    5ef6:	4603      	mov	r3, r0
}
    5ef8:	4618      	mov	r0, r3
    5efa:	3708      	adds	r7, #8
    5efc:	46bd      	mov	sp, r7
    5efe:	bd80      	pop	{r7, pc}
    5f00:	0002018c 	.word	0x0002018c
    5f04:	00007d5d 	.word	0x00007d5d
    5f08:	00008b07 	.word	0x00008b07

00005f0c <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
    5f0c:	b590      	push	{r4, r7, lr}
    5f0e:	b085      	sub	sp, #20
    5f10:	af00      	add	r7, sp, #0
    5f12:	60f8      	str	r0, [r7, #12]
    5f14:	60b9      	str	r1, [r7, #8]
    5f16:	607a      	str	r2, [r7, #4]
    5f18:	603b      	str	r3, [r7, #0]
	ASSERT(descr && data && len && pcrc);
    5f1a:	68fb      	ldr	r3, [r7, #12]
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	d00a      	beq.n	5f36 <crc_sync_crc32+0x2a>
    5f20:	68bb      	ldr	r3, [r7, #8]
    5f22:	2b00      	cmp	r3, #0
    5f24:	d007      	beq.n	5f36 <crc_sync_crc32+0x2a>
    5f26:	687b      	ldr	r3, [r7, #4]
    5f28:	2b00      	cmp	r3, #0
    5f2a:	d004      	beq.n	5f36 <crc_sync_crc32+0x2a>
    5f2c:	683b      	ldr	r3, [r7, #0]
    5f2e:	2b00      	cmp	r3, #0
    5f30:	d001      	beq.n	5f36 <crc_sync_crc32+0x2a>
    5f32:	2301      	movs	r3, #1
    5f34:	e000      	b.n	5f38 <crc_sync_crc32+0x2c>
    5f36:	2300      	movs	r3, #0
    5f38:	f003 0301 	and.w	r3, r3, #1
    5f3c:	b2db      	uxtb	r3, r3
    5f3e:	2253      	movs	r2, #83	; 0x53
    5f40:	4907      	ldr	r1, [pc, #28]	; (5f60 <crc_sync_crc32+0x54>)
    5f42:	4618      	mov	r0, r3
    5f44:	4b07      	ldr	r3, [pc, #28]	; (5f64 <crc_sync_crc32+0x58>)
    5f46:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
    5f48:	68f8      	ldr	r0, [r7, #12]
    5f4a:	683b      	ldr	r3, [r7, #0]
    5f4c:	687a      	ldr	r2, [r7, #4]
    5f4e:	68b9      	ldr	r1, [r7, #8]
    5f50:	4c05      	ldr	r4, [pc, #20]	; (5f68 <crc_sync_crc32+0x5c>)
    5f52:	47a0      	blx	r4
    5f54:	4603      	mov	r3, r0
}
    5f56:	4618      	mov	r0, r3
    5f58:	3714      	adds	r7, #20
    5f5a:	46bd      	mov	sp, r7
    5f5c:	bd90      	pop	{r4, r7, pc}
    5f5e:	bf00      	nop
    5f60:	0002018c 	.word	0x0002018c
    5f64:	00007d5d 	.word	0x00007d5d
    5f68:	00008b1d 	.word	0x00008b1d

00005f6c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    5f6c:	b590      	push	{r4, r7, lr}
    5f6e:	b083      	sub	sp, #12
    5f70:	af00      	add	r7, sp, #0
    5f72:	4603      	mov	r3, r0
    5f74:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    5f76:	4b07      	ldr	r3, [pc, #28]	; (5f94 <delay_us+0x28>)
    5f78:	681c      	ldr	r4, [r3, #0]
    5f7a:	88fb      	ldrh	r3, [r7, #6]
    5f7c:	4618      	mov	r0, r3
    5f7e:	4b06      	ldr	r3, [pc, #24]	; (5f98 <delay_us+0x2c>)
    5f80:	4798      	blx	r3
    5f82:	4603      	mov	r3, r0
    5f84:	4619      	mov	r1, r3
    5f86:	4620      	mov	r0, r4
    5f88:	4b04      	ldr	r3, [pc, #16]	; (5f9c <delay_us+0x30>)
    5f8a:	4798      	blx	r3
}
    5f8c:	bf00      	nop
    5f8e:	370c      	adds	r7, #12
    5f90:	46bd      	mov	sp, r7
    5f92:	bd90      	pop	{r4, r7, pc}
    5f94:	2000892c 	.word	0x2000892c
    5f98:	00008711 	.word	0x00008711
    5f9c:	000088a9 	.word	0x000088a9

00005fa0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    5fa0:	b590      	push	{r4, r7, lr}
    5fa2:	b083      	sub	sp, #12
    5fa4:	af00      	add	r7, sp, #0
    5fa6:	4603      	mov	r3, r0
    5fa8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    5faa:	4b07      	ldr	r3, [pc, #28]	; (5fc8 <delay_ms+0x28>)
    5fac:	681c      	ldr	r4, [r3, #0]
    5fae:	88fb      	ldrh	r3, [r7, #6]
    5fb0:	4618      	mov	r0, r3
    5fb2:	4b06      	ldr	r3, [pc, #24]	; (5fcc <delay_ms+0x2c>)
    5fb4:	4798      	blx	r3
    5fb6:	4603      	mov	r3, r0
    5fb8:	4619      	mov	r1, r3
    5fba:	4620      	mov	r0, r4
    5fbc:	4b04      	ldr	r3, [pc, #16]	; (5fd0 <delay_ms+0x30>)
    5fbe:	4798      	blx	r3
}
    5fc0:	bf00      	nop
    5fc2:	370c      	adds	r7, #12
    5fc4:	46bd      	mov	sp, r7
    5fc6:	bd90      	pop	{r4, r7, pc}
    5fc8:	2000892c 	.word	0x2000892c
    5fcc:	0000887d 	.word	0x0000887d
    5fd0:	000088a9 	.word	0x000088a9

00005fd4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    5fd4:	b580      	push	{r7, lr}
    5fd6:	af00      	add	r7, sp, #0
	return _event_system_init();
    5fd8:	4b02      	ldr	r3, [pc, #8]	; (5fe4 <event_system_init+0x10>)
    5fda:	4798      	blx	r3
    5fdc:	4603      	mov	r3, r0
}
    5fde:	4618      	mov	r0, r3
    5fe0:	bd80      	pop	{r7, pc}
    5fe2:	bf00      	nop
    5fe4:	00009391 	.word	0x00009391

00005fe8 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    5fe8:	b580      	push	{r7, lr}
    5fea:	b082      	sub	sp, #8
    5fec:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    5fee:	2300      	movs	r3, #0
    5ff0:	80fb      	strh	r3, [r7, #6]
    5ff2:	e00e      	b.n	6012 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    5ff4:	88fb      	ldrh	r3, [r7, #6]
    5ff6:	4a0c      	ldr	r2, [pc, #48]	; (6028 <ext_irq_init+0x40>)
    5ff8:	00db      	lsls	r3, r3, #3
    5ffa:	4413      	add	r3, r2
    5ffc:	f04f 32ff 	mov.w	r2, #4294967295
    6000:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    6002:	88fb      	ldrh	r3, [r7, #6]
    6004:	4a08      	ldr	r2, [pc, #32]	; (6028 <ext_irq_init+0x40>)
    6006:	2100      	movs	r1, #0
    6008:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    600c:	88fb      	ldrh	r3, [r7, #6]
    600e:	3301      	adds	r3, #1
    6010:	80fb      	strh	r3, [r7, #6]
    6012:	88fb      	ldrh	r3, [r7, #6]
    6014:	2b06      	cmp	r3, #6
    6016:	d9ed      	bls.n	5ff4 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    6018:	4804      	ldr	r0, [pc, #16]	; (602c <ext_irq_init+0x44>)
    601a:	4b05      	ldr	r3, [pc, #20]	; (6030 <ext_irq_init+0x48>)
    601c:	4798      	blx	r3
    601e:	4603      	mov	r3, r0
}
    6020:	4618      	mov	r0, r3
    6022:	3708      	adds	r7, #8
    6024:	46bd      	mov	sp, r7
    6026:	bd80      	pop	{r7, pc}
    6028:	20008930 	.word	0x20008930
    602c:	0000618d 	.word	0x0000618d
    6030:	00008f59 	.word	0x00008f59

00006034 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    6034:	b580      	push	{r7, lr}
    6036:	b086      	sub	sp, #24
    6038:	af00      	add	r7, sp, #0
    603a:	6078      	str	r0, [r7, #4]
    603c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    603e:	2300      	movs	r3, #0
    6040:	75fb      	strb	r3, [r7, #23]
    6042:	2300      	movs	r3, #0
    6044:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    6046:	2300      	movs	r3, #0
    6048:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    604a:	e012      	b.n	6072 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    604c:	7dfb      	ldrb	r3, [r7, #23]
    604e:	4a4d      	ldr	r2, [pc, #308]	; (6184 <ext_irq_register+0x150>)
    6050:	00db      	lsls	r3, r3, #3
    6052:	4413      	add	r3, r2
    6054:	685a      	ldr	r2, [r3, #4]
    6056:	687b      	ldr	r3, [r7, #4]
    6058:	429a      	cmp	r2, r3
    605a:	d107      	bne.n	606c <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    605c:	7dfb      	ldrb	r3, [r7, #23]
    605e:	4949      	ldr	r1, [pc, #292]	; (6184 <ext_irq_register+0x150>)
    6060:	683a      	ldr	r2, [r7, #0]
    6062:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    6066:	2301      	movs	r3, #1
    6068:	757b      	strb	r3, [r7, #21]
			break;
    606a:	e005      	b.n	6078 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    606c:	7dfb      	ldrb	r3, [r7, #23]
    606e:	3301      	adds	r3, #1
    6070:	75fb      	strb	r3, [r7, #23]
    6072:	7dfb      	ldrb	r3, [r7, #23]
    6074:	2b06      	cmp	r3, #6
    6076:	d9e9      	bls.n	604c <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    6078:	683b      	ldr	r3, [r7, #0]
    607a:	2b00      	cmp	r3, #0
    607c:	d10e      	bne.n	609c <ext_irq_register+0x68>
		if (!found) {
    607e:	7d7b      	ldrb	r3, [r7, #21]
    6080:	f083 0301 	eor.w	r3, r3, #1
    6084:	b2db      	uxtb	r3, r3
    6086:	2b00      	cmp	r3, #0
    6088:	d002      	beq.n	6090 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    608a:	f06f 030c 	mvn.w	r3, #12
    608e:	e074      	b.n	617a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    6090:	2100      	movs	r1, #0
    6092:	6878      	ldr	r0, [r7, #4]
    6094:	4b3c      	ldr	r3, [pc, #240]	; (6188 <ext_irq_register+0x154>)
    6096:	4798      	blx	r3
    6098:	4603      	mov	r3, r0
    609a:	e06e      	b.n	617a <ext_irq_register+0x146>
	}

	if (!found) {
    609c:	7d7b      	ldrb	r3, [r7, #21]
    609e:	f083 0301 	eor.w	r3, r3, #1
    60a2:	b2db      	uxtb	r3, r3
    60a4:	2b00      	cmp	r3, #0
    60a6:	d05a      	beq.n	615e <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    60a8:	2300      	movs	r3, #0
    60aa:	75fb      	strb	r3, [r7, #23]
    60ac:	e016      	b.n	60dc <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    60ae:	7dfb      	ldrb	r3, [r7, #23]
    60b0:	4a34      	ldr	r2, [pc, #208]	; (6184 <ext_irq_register+0x150>)
    60b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    60b6:	2b00      	cmp	r3, #0
    60b8:	d10d      	bne.n	60d6 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    60ba:	7dfb      	ldrb	r3, [r7, #23]
    60bc:	4931      	ldr	r1, [pc, #196]	; (6184 <ext_irq_register+0x150>)
    60be:	683a      	ldr	r2, [r7, #0]
    60c0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    60c4:	7dfb      	ldrb	r3, [r7, #23]
    60c6:	4a2f      	ldr	r2, [pc, #188]	; (6184 <ext_irq_register+0x150>)
    60c8:	00db      	lsls	r3, r3, #3
    60ca:	4413      	add	r3, r2
    60cc:	687a      	ldr	r2, [r7, #4]
    60ce:	605a      	str	r2, [r3, #4]
				found           = true;
    60d0:	2301      	movs	r3, #1
    60d2:	757b      	strb	r3, [r7, #21]
				break;
    60d4:	e005      	b.n	60e2 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    60d6:	7dfb      	ldrb	r3, [r7, #23]
    60d8:	3301      	adds	r3, #1
    60da:	75fb      	strb	r3, [r7, #23]
    60dc:	7dfb      	ldrb	r3, [r7, #23]
    60de:	2b06      	cmp	r3, #6
    60e0:	d9e5      	bls.n	60ae <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    60e2:	e036      	b.n	6152 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    60e4:	7dfb      	ldrb	r3, [r7, #23]
    60e6:	4a27      	ldr	r2, [pc, #156]	; (6184 <ext_irq_register+0x150>)
    60e8:	00db      	lsls	r3, r3, #3
    60ea:	4413      	add	r3, r2
    60ec:	685a      	ldr	r2, [r3, #4]
    60ee:	7dbb      	ldrb	r3, [r7, #22]
    60f0:	4924      	ldr	r1, [pc, #144]	; (6184 <ext_irq_register+0x150>)
    60f2:	00db      	lsls	r3, r3, #3
    60f4:	440b      	add	r3, r1
    60f6:	685b      	ldr	r3, [r3, #4]
    60f8:	429a      	cmp	r2, r3
    60fa:	d227      	bcs.n	614c <ext_irq_register+0x118>
    60fc:	7dbb      	ldrb	r3, [r7, #22]
    60fe:	4a21      	ldr	r2, [pc, #132]	; (6184 <ext_irq_register+0x150>)
    6100:	00db      	lsls	r3, r3, #3
    6102:	4413      	add	r3, r2
    6104:	685b      	ldr	r3, [r3, #4]
    6106:	f1b3 3fff 	cmp.w	r3, #4294967295
    610a:	d01f      	beq.n	614c <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    610c:	7dbb      	ldrb	r3, [r7, #22]
    610e:	491d      	ldr	r1, [pc, #116]	; (6184 <ext_irq_register+0x150>)
    6110:	f107 020c 	add.w	r2, r7, #12
    6114:	00db      	lsls	r3, r3, #3
    6116:	440b      	add	r3, r1
    6118:	e893 0003 	ldmia.w	r3, {r0, r1}
    611c:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    6120:	7dbb      	ldrb	r3, [r7, #22]
    6122:	7dfa      	ldrb	r2, [r7, #23]
    6124:	4817      	ldr	r0, [pc, #92]	; (6184 <ext_irq_register+0x150>)
    6126:	4917      	ldr	r1, [pc, #92]	; (6184 <ext_irq_register+0x150>)
    6128:	00db      	lsls	r3, r3, #3
    612a:	4403      	add	r3, r0
    612c:	00d2      	lsls	r2, r2, #3
    612e:	440a      	add	r2, r1
    6130:	e892 0003 	ldmia.w	r2, {r0, r1}
    6134:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    6138:	7dfb      	ldrb	r3, [r7, #23]
    613a:	4a12      	ldr	r2, [pc, #72]	; (6184 <ext_irq_register+0x150>)
    613c:	00db      	lsls	r3, r3, #3
    613e:	4413      	add	r3, r2
    6140:	f107 020c 	add.w	r2, r7, #12
    6144:	e892 0003 	ldmia.w	r2, {r0, r1}
    6148:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    614c:	7dbb      	ldrb	r3, [r7, #22]
    614e:	3301      	adds	r3, #1
    6150:	75bb      	strb	r3, [r7, #22]
    6152:	7dbb      	ldrb	r3, [r7, #22]
    6154:	2b06      	cmp	r3, #6
    6156:	d802      	bhi.n	615e <ext_irq_register+0x12a>
    6158:	7dfb      	ldrb	r3, [r7, #23]
    615a:	2b06      	cmp	r3, #6
    615c:	d9c2      	bls.n	60e4 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    615e:	7d7b      	ldrb	r3, [r7, #21]
    6160:	f083 0301 	eor.w	r3, r3, #1
    6164:	b2db      	uxtb	r3, r3
    6166:	2b00      	cmp	r3, #0
    6168:	d002      	beq.n	6170 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    616a:	f06f 030c 	mvn.w	r3, #12
    616e:	e004      	b.n	617a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    6170:	2101      	movs	r1, #1
    6172:	6878      	ldr	r0, [r7, #4]
    6174:	4b04      	ldr	r3, [pc, #16]	; (6188 <ext_irq_register+0x154>)
    6176:	4798      	blx	r3
    6178:	4603      	mov	r3, r0
}
    617a:	4618      	mov	r0, r3
    617c:	3718      	adds	r7, #24
    617e:	46bd      	mov	sp, r7
    6180:	bd80      	pop	{r7, pc}
    6182:	bf00      	nop
    6184:	20008930 	.word	0x20008930
    6188:	000090c9 	.word	0x000090c9

0000618c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    618c:	b580      	push	{r7, lr}
    618e:	b084      	sub	sp, #16
    6190:	af00      	add	r7, sp, #0
    6192:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    6194:	2300      	movs	r3, #0
    6196:	73fb      	strb	r3, [r7, #15]
    6198:	2307      	movs	r3, #7
    619a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    619c:	e02a      	b.n	61f4 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    619e:	7bba      	ldrb	r2, [r7, #14]
    61a0:	7bfb      	ldrb	r3, [r7, #15]
    61a2:	4413      	add	r3, r2
    61a4:	105b      	asrs	r3, r3, #1
    61a6:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    61a8:	7b7b      	ldrb	r3, [r7, #13]
    61aa:	2b06      	cmp	r3, #6
    61ac:	d827      	bhi.n	61fe <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    61ae:	7b7b      	ldrb	r3, [r7, #13]
    61b0:	4a16      	ldr	r2, [pc, #88]	; (620c <process_ext_irq+0x80>)
    61b2:	00db      	lsls	r3, r3, #3
    61b4:	4413      	add	r3, r2
    61b6:	685a      	ldr	r2, [r3, #4]
    61b8:	687b      	ldr	r3, [r7, #4]
    61ba:	429a      	cmp	r2, r3
    61bc:	d10b      	bne.n	61d6 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    61be:	7b7b      	ldrb	r3, [r7, #13]
    61c0:	4a12      	ldr	r2, [pc, #72]	; (620c <process_ext_irq+0x80>)
    61c2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    61c6:	2b00      	cmp	r3, #0
    61c8:	d01b      	beq.n	6202 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    61ca:	7b7b      	ldrb	r3, [r7, #13]
    61cc:	4a0f      	ldr	r2, [pc, #60]	; (620c <process_ext_irq+0x80>)
    61ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    61d2:	4798      	blx	r3
			}
			return;
    61d4:	e015      	b.n	6202 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    61d6:	7b7b      	ldrb	r3, [r7, #13]
    61d8:	4a0c      	ldr	r2, [pc, #48]	; (620c <process_ext_irq+0x80>)
    61da:	00db      	lsls	r3, r3, #3
    61dc:	4413      	add	r3, r2
    61de:	685a      	ldr	r2, [r3, #4]
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	429a      	cmp	r2, r3
    61e4:	d203      	bcs.n	61ee <process_ext_irq+0x62>
			lower = middle + 1;
    61e6:	7b7b      	ldrb	r3, [r7, #13]
    61e8:	3301      	adds	r3, #1
    61ea:	73fb      	strb	r3, [r7, #15]
    61ec:	e002      	b.n	61f4 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    61ee:	7b7b      	ldrb	r3, [r7, #13]
    61f0:	3b01      	subs	r3, #1
    61f2:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    61f4:	7bba      	ldrb	r2, [r7, #14]
    61f6:	7bfb      	ldrb	r3, [r7, #15]
    61f8:	429a      	cmp	r2, r3
    61fa:	d2d0      	bcs.n	619e <process_ext_irq+0x12>
    61fc:	e002      	b.n	6204 <process_ext_irq+0x78>
			return;
    61fe:	bf00      	nop
    6200:	e000      	b.n	6204 <process_ext_irq+0x78>
			return;
    6202:	bf00      	nop
		}
	}
}
    6204:	3710      	adds	r7, #16
    6206:	46bd      	mov	sp, r7
    6208:	bd80      	pop	{r7, pc}
    620a:	bf00      	nop
    620c:	20008930 	.word	0x20008930

00006210 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    6210:	b580      	push	{r7, lr}
    6212:	b084      	sub	sp, #16
    6214:	af00      	add	r7, sp, #0
    6216:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    6218:	687b      	ldr	r3, [r7, #4]
    621a:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    621c:	687b      	ldr	r3, [r7, #4]
    621e:	885b      	ldrh	r3, [r3, #2]
    6220:	b29b      	uxth	r3, r3
    6222:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6226:	2b00      	cmp	r3, #0
    6228:	d107      	bne.n	623a <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    622a:	68fb      	ldr	r3, [r7, #12]
    622c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    622e:	2b00      	cmp	r3, #0
    6230:	d003      	beq.n	623a <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    6232:	68fb      	ldr	r3, [r7, #12]
    6234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6236:	68f8      	ldr	r0, [r7, #12]
    6238:	4798      	blx	r3
		}
	}
}
    623a:	bf00      	nop
    623c:	3710      	adds	r7, #16
    623e:	46bd      	mov	sp, r7
    6240:	bd80      	pop	{r7, pc}

00006242 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    6242:	b580      	push	{r7, lr}
    6244:	b084      	sub	sp, #16
    6246:	af00      	add	r7, sp, #0
    6248:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    624a:	687b      	ldr	r3, [r7, #4]
    624c:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    624e:	687b      	ldr	r3, [r7, #4]
    6250:	885b      	ldrh	r3, [r3, #2]
    6252:	b29b      	uxth	r3, r3
    6254:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6258:	2b00      	cmp	r3, #0
    625a:	d107      	bne.n	626c <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    625c:	68fb      	ldr	r3, [r7, #12]
    625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6260:	2b00      	cmp	r3, #0
    6262:	d003      	beq.n	626c <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    6264:	68fb      	ldr	r3, [r7, #12]
    6266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6268:	68f8      	ldr	r0, [r7, #12]
    626a:	4798      	blx	r3
		}
	}
}
    626c:	bf00      	nop
    626e:	3710      	adds	r7, #16
    6270:	46bd      	mov	sp, r7
    6272:	bd80      	pop	{r7, pc}

00006274 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    6274:	b580      	push	{r7, lr}
    6276:	b084      	sub	sp, #16
    6278:	af00      	add	r7, sp, #0
    627a:	6078      	str	r0, [r7, #4]
    627c:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    627e:	687b      	ldr	r3, [r7, #4]
    6280:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	885b      	ldrh	r3, [r3, #2]
    6286:	b29b      	uxth	r3, r3
    6288:	f403 7380 	and.w	r3, r3, #256	; 0x100
    628c:	2b00      	cmp	r3, #0
    628e:	d108      	bne.n	62a2 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    6290:	68fb      	ldr	r3, [r7, #12]
    6292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6294:	2b00      	cmp	r3, #0
    6296:	d004      	beq.n	62a2 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    6298:	68fb      	ldr	r3, [r7, #12]
    629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    629c:	6839      	ldr	r1, [r7, #0]
    629e:	68f8      	ldr	r0, [r7, #12]
    62a0:	4798      	blx	r3
		}
	}
}
    62a2:	bf00      	nop
    62a4:	3710      	adds	r7, #16
    62a6:	46bd      	mov	sp, r7
    62a8:	bd80      	pop	{r7, pc}
	...

000062ac <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    62ac:	b580      	push	{r7, lr}
    62ae:	b08a      	sub	sp, #40	; 0x28
    62b0:	af00      	add	r7, sp, #0
    62b2:	60f8      	str	r0, [r7, #12]
    62b4:	60b9      	str	r1, [r7, #8]
    62b6:	4613      	mov	r3, r2
    62b8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    62ba:	68fb      	ldr	r3, [r7, #12]
    62bc:	3b28      	subs	r3, #40	; 0x28
    62be:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    62c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    62c2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    62c4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    62c6:	88fb      	ldrh	r3, [r7, #6]
    62c8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    62ca:	f248 0301 	movw	r3, #32769	; 0x8001
    62ce:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    62d0:	68bb      	ldr	r3, [r7, #8]
    62d2:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    62d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    62d6:	f107 0214 	add.w	r2, r7, #20
    62da:	4611      	mov	r1, r2
    62dc:	4618      	mov	r0, r3
    62de:	4b06      	ldr	r3, [pc, #24]	; (62f8 <i2c_m_async_read+0x4c>)
    62e0:	4798      	blx	r3
    62e2:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    62e4:	6a3b      	ldr	r3, [r7, #32]
    62e6:	2b00      	cmp	r3, #0
    62e8:	d001      	beq.n	62ee <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    62ea:	6a3b      	ldr	r3, [r7, #32]
    62ec:	e000      	b.n	62f0 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    62ee:	88fb      	ldrh	r3, [r7, #6]
}
    62f0:	4618      	mov	r0, r3
    62f2:	3728      	adds	r7, #40	; 0x28
    62f4:	46bd      	mov	sp, r7
    62f6:	bd80      	pop	{r7, pc}
    62f8:	0000b7cd 	.word	0x0000b7cd

000062fc <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    62fc:	b580      	push	{r7, lr}
    62fe:	b08a      	sub	sp, #40	; 0x28
    6300:	af00      	add	r7, sp, #0
    6302:	60f8      	str	r0, [r7, #12]
    6304:	60b9      	str	r1, [r7, #8]
    6306:	4613      	mov	r3, r2
    6308:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    630a:	68fb      	ldr	r3, [r7, #12]
    630c:	3b28      	subs	r3, #40	; 0x28
    630e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    6310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6312:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    6314:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6316:	88fb      	ldrh	r3, [r7, #6]
    6318:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    631a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    631e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    6320:	68bb      	ldr	r3, [r7, #8]
    6322:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    6324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6326:	f107 0214 	add.w	r2, r7, #20
    632a:	4611      	mov	r1, r2
    632c:	4618      	mov	r0, r3
    632e:	4b06      	ldr	r3, [pc, #24]	; (6348 <i2c_m_async_write+0x4c>)
    6330:	4798      	blx	r3
    6332:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    6334:	6a3b      	ldr	r3, [r7, #32]
    6336:	2b00      	cmp	r3, #0
    6338:	d001      	beq.n	633e <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    633a:	6a3b      	ldr	r3, [r7, #32]
    633c:	e000      	b.n	6340 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    633e:	88fb      	ldrh	r3, [r7, #6]
}
    6340:	4618      	mov	r0, r3
    6342:	3728      	adds	r7, #40	; 0x28
    6344:	46bd      	mov	sp, r7
    6346:	bd80      	pop	{r7, pc}
    6348:	0000b7cd 	.word	0x0000b7cd

0000634c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    634c:	b580      	push	{r7, lr}
    634e:	b084      	sub	sp, #16
    6350:	af00      	add	r7, sp, #0
    6352:	6078      	str	r0, [r7, #4]
    6354:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    6356:	687b      	ldr	r3, [r7, #4]
    6358:	2b00      	cmp	r3, #0
    635a:	bf14      	ite	ne
    635c:	2301      	movne	r3, #1
    635e:	2300      	moveq	r3, #0
    6360:	b2db      	uxtb	r3, r3
    6362:	2289      	movs	r2, #137	; 0x89
    6364:	4915      	ldr	r1, [pc, #84]	; (63bc <i2c_m_async_init+0x70>)
    6366:	4618      	mov	r0, r3
    6368:	4b15      	ldr	r3, [pc, #84]	; (63c0 <i2c_m_async_init+0x74>)
    636a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    636c:	687b      	ldr	r3, [r7, #4]
    636e:	6839      	ldr	r1, [r7, #0]
    6370:	4618      	mov	r0, r3
    6372:	4b14      	ldr	r3, [pc, #80]	; (63c4 <i2c_m_async_init+0x78>)
    6374:	4798      	blx	r3
    6376:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6378:	68fb      	ldr	r3, [r7, #12]
    637a:	2b00      	cmp	r3, #0
    637c:	d001      	beq.n	6382 <i2c_m_async_init+0x36>
		return init_status;
    637e:	68fb      	ldr	r3, [r7, #12]
    6380:	e018      	b.n	63b4 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    6382:	687b      	ldr	r3, [r7, #4]
    6384:	4a10      	ldr	r2, [pc, #64]	; (63c8 <i2c_m_async_init+0x7c>)
    6386:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    6388:	687b      	ldr	r3, [r7, #4]
    638a:	4a10      	ldr	r2, [pc, #64]	; (63cc <i2c_m_async_init+0x80>)
    638c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    638e:	687b      	ldr	r3, [r7, #4]
    6390:	4a0f      	ldr	r2, [pc, #60]	; (63d0 <i2c_m_async_init+0x84>)
    6392:	2101      	movs	r1, #1
    6394:	4618      	mov	r0, r3
    6396:	4b0f      	ldr	r3, [pc, #60]	; (63d4 <i2c_m_async_init+0x88>)
    6398:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    639a:	687b      	ldr	r3, [r7, #4]
    639c:	4a0e      	ldr	r2, [pc, #56]	; (63d8 <i2c_m_async_init+0x8c>)
    639e:	2102      	movs	r1, #2
    63a0:	4618      	mov	r0, r3
    63a2:	4b0c      	ldr	r3, [pc, #48]	; (63d4 <i2c_m_async_init+0x88>)
    63a4:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    63a6:	687b      	ldr	r3, [r7, #4]
    63a8:	4a0c      	ldr	r2, [pc, #48]	; (63dc <i2c_m_async_init+0x90>)
    63aa:	2100      	movs	r1, #0
    63ac:	4618      	mov	r0, r3
    63ae:	4b09      	ldr	r3, [pc, #36]	; (63d4 <i2c_m_async_init+0x88>)
    63b0:	4798      	blx	r3

	return ERR_NONE;
    63b2:	2300      	movs	r3, #0
}
    63b4:	4618      	mov	r0, r3
    63b6:	3710      	adds	r7, #16
    63b8:	46bd      	mov	sp, r7
    63ba:	bd80      	pop	{r7, pc}
    63bc:	000201a8 	.word	0x000201a8
    63c0:	00007d5d 	.word	0x00007d5d
    63c4:	0000b61d 	.word	0x0000b61d
    63c8:	000062ad 	.word	0x000062ad
    63cc:	000062fd 	.word	0x000062fd
    63d0:	00006211 	.word	0x00006211
    63d4:	0000b8a1 	.word	0x0000b8a1
    63d8:	00006243 	.word	0x00006243
    63dc:	00006275 	.word	0x00006275

000063e0 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    63e0:	b580      	push	{r7, lr}
    63e2:	b084      	sub	sp, #16
    63e4:	af00      	add	r7, sp, #0
    63e6:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    63e8:	687b      	ldr	r3, [r7, #4]
    63ea:	2b00      	cmp	r3, #0
    63ec:	bf14      	ite	ne
    63ee:	2301      	movne	r3, #1
    63f0:	2300      	moveq	r3, #0
    63f2:	b2db      	uxtb	r3, r3
    63f4:	22b9      	movs	r2, #185	; 0xb9
    63f6:	4911      	ldr	r1, [pc, #68]	; (643c <i2c_m_async_enable+0x5c>)
    63f8:	4618      	mov	r0, r3
    63fa:	4b11      	ldr	r3, [pc, #68]	; (6440 <i2c_m_async_enable+0x60>)
    63fc:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    63fe:	687b      	ldr	r3, [r7, #4]
    6400:	4618      	mov	r0, r3
    6402:	4b10      	ldr	r3, [pc, #64]	; (6444 <i2c_m_async_enable+0x64>)
    6404:	4798      	blx	r3
    6406:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    6408:	68fb      	ldr	r3, [r7, #12]
    640a:	2b00      	cmp	r3, #0
    640c:	d111      	bne.n	6432 <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	2201      	movs	r2, #1
    6412:	2101      	movs	r1, #1
    6414:	4618      	mov	r0, r3
    6416:	4b0c      	ldr	r3, [pc, #48]	; (6448 <i2c_m_async_enable+0x68>)
    6418:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    641a:	687b      	ldr	r3, [r7, #4]
    641c:	2201      	movs	r2, #1
    641e:	2102      	movs	r1, #2
    6420:	4618      	mov	r0, r3
    6422:	4b09      	ldr	r3, [pc, #36]	; (6448 <i2c_m_async_enable+0x68>)
    6424:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    6426:	687b      	ldr	r3, [r7, #4]
    6428:	2201      	movs	r2, #1
    642a:	2100      	movs	r1, #0
    642c:	4618      	mov	r0, r3
    642e:	4b06      	ldr	r3, [pc, #24]	; (6448 <i2c_m_async_enable+0x68>)
    6430:	4798      	blx	r3
	}
	return rc;
    6432:	68fb      	ldr	r3, [r7, #12]
}
    6434:	4618      	mov	r0, r3
    6436:	3710      	adds	r7, #16
    6438:	46bd      	mov	sp, r7
    643a:	bd80      	pop	{r7, pc}
    643c:	000201a8 	.word	0x000201a8
    6440:	00007d5d 	.word	0x00007d5d
    6444:	0000b5b9 	.word	0x0000b5b9
    6448:	0000b92d 	.word	0x0000b92d

0000644c <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    644c:	b480      	push	{r7}
    644e:	b085      	sub	sp, #20
    6450:	af00      	add	r7, sp, #0
    6452:	60f8      	str	r0, [r7, #12]
    6454:	460b      	mov	r3, r1
    6456:	607a      	str	r2, [r7, #4]
    6458:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    645a:	897b      	ldrh	r3, [r7, #10]
    645c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6460:	b21a      	sxth	r2, r3
    6462:	687b      	ldr	r3, [r7, #4]
    6464:	b21b      	sxth	r3, r3
    6466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    646a:	b21b      	sxth	r3, r3
    646c:	4313      	orrs	r3, r2
    646e:	b21b      	sxth	r3, r3
    6470:	b29a      	uxth	r2, r3
    6472:	68fb      	ldr	r3, [r7, #12]
    6474:	879a      	strh	r2, [r3, #60]	; 0x3c
    6476:	68fb      	ldr	r3, [r7, #12]
    6478:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    647a:	4618      	mov	r0, r3
    647c:	3714      	adds	r7, #20
    647e:	46bd      	mov	sp, r7
    6480:	f85d 7b04 	ldr.w	r7, [sp], #4
    6484:	4770      	bx	lr

00006486 <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    6486:	b480      	push	{r7}
    6488:	b085      	sub	sp, #20
    648a:	af00      	add	r7, sp, #0
    648c:	60f8      	str	r0, [r7, #12]
    648e:	460b      	mov	r3, r1
    6490:	607a      	str	r2, [r7, #4]
    6492:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    6494:	7afb      	ldrb	r3, [r7, #11]
    6496:	2b01      	cmp	r3, #1
    6498:	d007      	beq.n	64aa <i2c_m_async_register_callback+0x24>
    649a:	2b02      	cmp	r3, #2
    649c:	d009      	beq.n	64b2 <i2c_m_async_register_callback+0x2c>
    649e:	2b00      	cmp	r3, #0
    64a0:	d10b      	bne.n	64ba <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    64a2:	68fb      	ldr	r3, [r7, #12]
    64a4:	687a      	ldr	r2, [r7, #4]
    64a6:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    64a8:	e00a      	b.n	64c0 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    64aa:	68fb      	ldr	r3, [r7, #12]
    64ac:	687a      	ldr	r2, [r7, #4]
    64ae:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    64b0:	e006      	b.n	64c0 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    64b2:	68fb      	ldr	r3, [r7, #12]
    64b4:	687a      	ldr	r2, [r7, #4]
    64b6:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    64b8:	e002      	b.n	64c0 <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    64ba:	f06f 030c 	mvn.w	r3, #12
    64be:	e000      	b.n	64c2 <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    64c0:	2300      	movs	r3, #0
}
    64c2:	4618      	mov	r0, r3
    64c4:	3714      	adds	r7, #20
    64c6:	46bd      	mov	sp, r7
    64c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    64cc:	4770      	bx	lr

000064ce <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    64ce:	b480      	push	{r7}
    64d0:	b083      	sub	sp, #12
    64d2:	af00      	add	r7, sp, #0
    64d4:	6078      	str	r0, [r7, #4]
    64d6:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    64d8:	687b      	ldr	r3, [r7, #4]
    64da:	f103 0228 	add.w	r2, r3, #40	; 0x28
    64de:	683b      	ldr	r3, [r7, #0]
    64e0:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    64e2:	2300      	movs	r3, #0
}
    64e4:	4618      	mov	r0, r3
    64e6:	370c      	adds	r7, #12
    64e8:	46bd      	mov	sp, r7
    64ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    64ee:	4770      	bx	lr

000064f0 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    64f0:	b580      	push	{r7, lr}
    64f2:	b08a      	sub	sp, #40	; 0x28
    64f4:	af00      	add	r7, sp, #0
    64f6:	60f8      	str	r0, [r7, #12]
    64f8:	60b9      	str	r1, [r7, #8]
    64fa:	4613      	mov	r3, r2
    64fc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    64fe:	68fb      	ldr	r3, [r7, #12]
    6500:	3b14      	subs	r3, #20
    6502:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6506:	8b9b      	ldrh	r3, [r3, #28]
    6508:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    650a:	88fb      	ldrh	r3, [r7, #6]
    650c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    650e:	f248 0301 	movw	r3, #32769	; 0x8001
    6512:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    6514:	68bb      	ldr	r3, [r7, #8]
    6516:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    6518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    651a:	f107 0214 	add.w	r2, r7, #20
    651e:	4611      	mov	r1, r2
    6520:	4618      	mov	r0, r3
    6522:	4b06      	ldr	r3, [pc, #24]	; (653c <i2c_m_sync_read+0x4c>)
    6524:	4798      	blx	r3
    6526:	6238      	str	r0, [r7, #32]

	if (ret) {
    6528:	6a3b      	ldr	r3, [r7, #32]
    652a:	2b00      	cmp	r3, #0
    652c:	d001      	beq.n	6532 <i2c_m_sync_read+0x42>
		return ret;
    652e:	6a3b      	ldr	r3, [r7, #32]
    6530:	e000      	b.n	6534 <i2c_m_sync_read+0x44>
	}

	return n;
    6532:	88fb      	ldrh	r3, [r7, #6]
}
    6534:	4618      	mov	r0, r3
    6536:	3728      	adds	r7, #40	; 0x28
    6538:	46bd      	mov	sp, r7
    653a:	bd80      	pop	{r7, pc}
    653c:	0000bb0d 	.word	0x0000bb0d

00006540 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    6540:	b580      	push	{r7, lr}
    6542:	b08a      	sub	sp, #40	; 0x28
    6544:	af00      	add	r7, sp, #0
    6546:	60f8      	str	r0, [r7, #12]
    6548:	60b9      	str	r1, [r7, #8]
    654a:	4613      	mov	r3, r2
    654c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    654e:	68fb      	ldr	r3, [r7, #12]
    6550:	3b14      	subs	r3, #20
    6552:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6556:	8b9b      	ldrh	r3, [r3, #28]
    6558:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    655a:	88fb      	ldrh	r3, [r7, #6]
    655c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    655e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6562:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    6564:	68bb      	ldr	r3, [r7, #8]
    6566:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    6568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    656a:	f107 0214 	add.w	r2, r7, #20
    656e:	4611      	mov	r1, r2
    6570:	4618      	mov	r0, r3
    6572:	4b06      	ldr	r3, [pc, #24]	; (658c <i2c_m_sync_write+0x4c>)
    6574:	4798      	blx	r3
    6576:	6238      	str	r0, [r7, #32]

	if (ret) {
    6578:	6a3b      	ldr	r3, [r7, #32]
    657a:	2b00      	cmp	r3, #0
    657c:	d001      	beq.n	6582 <i2c_m_sync_write+0x42>
		return ret;
    657e:	6a3b      	ldr	r3, [r7, #32]
    6580:	e000      	b.n	6584 <i2c_m_sync_write+0x44>
	}

	return n;
    6582:	88fb      	ldrh	r3, [r7, #6]
}
    6584:	4618      	mov	r0, r3
    6586:	3728      	adds	r7, #40	; 0x28
    6588:	46bd      	mov	sp, r7
    658a:	bd80      	pop	{r7, pc}
    658c:	0000bb0d 	.word	0x0000bb0d

00006590 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    6590:	b580      	push	{r7, lr}
    6592:	b084      	sub	sp, #16
    6594:	af00      	add	r7, sp, #0
    6596:	6078      	str	r0, [r7, #4]
    6598:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    659a:	687b      	ldr	r3, [r7, #4]
    659c:	2b00      	cmp	r3, #0
    659e:	bf14      	ite	ne
    65a0:	2301      	movne	r3, #1
    65a2:	2300      	moveq	r3, #0
    65a4:	b2db      	uxtb	r3, r3
    65a6:	225e      	movs	r2, #94	; 0x5e
    65a8:	490c      	ldr	r1, [pc, #48]	; (65dc <i2c_m_sync_init+0x4c>)
    65aa:	4618      	mov	r0, r3
    65ac:	4b0c      	ldr	r3, [pc, #48]	; (65e0 <i2c_m_sync_init+0x50>)
    65ae:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    65b0:	687b      	ldr	r3, [r7, #4]
    65b2:	6839      	ldr	r1, [r7, #0]
    65b4:	4618      	mov	r0, r3
    65b6:	4b0b      	ldr	r3, [pc, #44]	; (65e4 <i2c_m_sync_init+0x54>)
    65b8:	4798      	blx	r3
    65ba:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    65bc:	68fb      	ldr	r3, [r7, #12]
    65be:	2b00      	cmp	r3, #0
    65c0:	d001      	beq.n	65c6 <i2c_m_sync_init+0x36>
		return init_status;
    65c2:	68fb      	ldr	r3, [r7, #12]
    65c4:	e006      	b.n	65d4 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    65c6:	687b      	ldr	r3, [r7, #4]
    65c8:	4a07      	ldr	r2, [pc, #28]	; (65e8 <i2c_m_sync_init+0x58>)
    65ca:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    65cc:	687b      	ldr	r3, [r7, #4]
    65ce:	4a07      	ldr	r2, [pc, #28]	; (65ec <i2c_m_sync_init+0x5c>)
    65d0:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    65d2:	2300      	movs	r3, #0
}
    65d4:	4618      	mov	r0, r3
    65d6:	3710      	adds	r7, #16
    65d8:	46bd      	mov	sp, r7
    65da:	bd80      	pop	{r7, pc}
    65dc:	000201c8 	.word	0x000201c8
    65e0:	00007d5d 	.word	0x00007d5d
    65e4:	0000b8e5 	.word	0x0000b8e5
    65e8:	000064f1 	.word	0x000064f1
    65ec:	00006541 	.word	0x00006541

000065f0 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    65f0:	b580      	push	{r7, lr}
    65f2:	b084      	sub	sp, #16
    65f4:	af00      	add	r7, sp, #0
    65f6:	60f8      	str	r0, [r7, #12]
    65f8:	60b9      	str	r1, [r7, #8]
    65fa:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    65fc:	68fb      	ldr	r3, [r7, #12]
    65fe:	2b00      	cmp	r3, #0
    6600:	d004      	beq.n	660c <pwm_init+0x1c>
    6602:	68bb      	ldr	r3, [r7, #8]
    6604:	2b00      	cmp	r3, #0
    6606:	d001      	beq.n	660c <pwm_init+0x1c>
    6608:	2301      	movs	r3, #1
    660a:	e000      	b.n	660e <pwm_init+0x1e>
    660c:	2300      	movs	r3, #0
    660e:	f003 0301 	and.w	r3, r3, #1
    6612:	b2db      	uxtb	r3, r3
    6614:	2233      	movs	r2, #51	; 0x33
    6616:	490a      	ldr	r1, [pc, #40]	; (6640 <pwm_init+0x50>)
    6618:	4618      	mov	r0, r3
    661a:	4b0a      	ldr	r3, [pc, #40]	; (6644 <pwm_init+0x54>)
    661c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    661e:	68fb      	ldr	r3, [r7, #12]
    6620:	68b9      	ldr	r1, [r7, #8]
    6622:	4618      	mov	r0, r3
    6624:	4b08      	ldr	r3, [pc, #32]	; (6648 <pwm_init+0x58>)
    6626:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    6628:	68fb      	ldr	r3, [r7, #12]
    662a:	4a08      	ldr	r2, [pc, #32]	; (664c <pwm_init+0x5c>)
    662c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    662e:	68fb      	ldr	r3, [r7, #12]
    6630:	4a07      	ldr	r2, [pc, #28]	; (6650 <pwm_init+0x60>)
    6632:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    6634:	2300      	movs	r3, #0
}
    6636:	4618      	mov	r0, r3
    6638:	3710      	adds	r7, #16
    663a:	46bd      	mov	sp, r7
    663c:	bd80      	pop	{r7, pc}
    663e:	bf00      	nop
    6640:	000201e4 	.word	0x000201e4
    6644:	00007d5d 	.word	0x00007d5d
    6648:	0000d75d 	.word	0x0000d75d
    664c:	000066a9 	.word	0x000066a9
    6650:	000066cd 	.word	0x000066cd

00006654 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    6654:	b580      	push	{r7, lr}
    6656:	b082      	sub	sp, #8
    6658:	af00      	add	r7, sp, #0
    665a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    665c:	687b      	ldr	r3, [r7, #4]
    665e:	2b00      	cmp	r3, #0
    6660:	bf14      	ite	ne
    6662:	2301      	movne	r3, #1
    6664:	2300      	moveq	r3, #0
    6666:	b2db      	uxtb	r3, r3
    6668:	224a      	movs	r2, #74	; 0x4a
    666a:	490b      	ldr	r1, [pc, #44]	; (6698 <pwm_enable+0x44>)
    666c:	4618      	mov	r0, r3
    666e:	4b0b      	ldr	r3, [pc, #44]	; (669c <pwm_enable+0x48>)
    6670:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    6672:	687b      	ldr	r3, [r7, #4]
    6674:	4618      	mov	r0, r3
    6676:	4b0a      	ldr	r3, [pc, #40]	; (66a0 <pwm_enable+0x4c>)
    6678:	4798      	blx	r3
    667a:	4603      	mov	r3, r0
    667c:	2b00      	cmp	r3, #0
    667e:	d002      	beq.n	6686 <pwm_enable+0x32>
		return ERR_DENIED;
    6680:	f06f 0310 	mvn.w	r3, #16
    6684:	e004      	b.n	6690 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    6686:	687b      	ldr	r3, [r7, #4]
    6688:	4618      	mov	r0, r3
    668a:	4b06      	ldr	r3, [pc, #24]	; (66a4 <pwm_enable+0x50>)
    668c:	4798      	blx	r3

	return ERR_NONE;
    668e:	2300      	movs	r3, #0
}
    6690:	4618      	mov	r0, r3
    6692:	3708      	adds	r7, #8
    6694:	46bd      	mov	sp, r7
    6696:	bd80      	pop	{r7, pc}
    6698:	000201e4 	.word	0x000201e4
    669c:	00007d5d 	.word	0x00007d5d
    66a0:	0000db4d 	.word	0x0000db4d
    66a4:	0000da09 	.word	0x0000da09

000066a8 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    66a8:	b580      	push	{r7, lr}
    66aa:	b084      	sub	sp, #16
    66ac:	af00      	add	r7, sp, #0
    66ae:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    66b0:	687b      	ldr	r3, [r7, #4]
    66b2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    66b4:	68fb      	ldr	r3, [r7, #12]
    66b6:	695b      	ldr	r3, [r3, #20]
    66b8:	2b00      	cmp	r3, #0
    66ba:	d003      	beq.n	66c4 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    66bc:	68fb      	ldr	r3, [r7, #12]
    66be:	695b      	ldr	r3, [r3, #20]
    66c0:	68f8      	ldr	r0, [r7, #12]
    66c2:	4798      	blx	r3
	}
}
    66c4:	bf00      	nop
    66c6:	3710      	adds	r7, #16
    66c8:	46bd      	mov	sp, r7
    66ca:	bd80      	pop	{r7, pc}

000066cc <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    66cc:	b580      	push	{r7, lr}
    66ce:	b084      	sub	sp, #16
    66d0:	af00      	add	r7, sp, #0
    66d2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    66d4:	687b      	ldr	r3, [r7, #4]
    66d6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    66d8:	68fb      	ldr	r3, [r7, #12]
    66da:	699b      	ldr	r3, [r3, #24]
    66dc:	2b00      	cmp	r3, #0
    66de:	d003      	beq.n	66e8 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    66e0:	68fb      	ldr	r3, [r7, #12]
    66e2:	699b      	ldr	r3, [r3, #24]
    66e4:	68f8      	ldr	r0, [r7, #12]
    66e6:	4798      	blx	r3
	}
}
    66e8:	bf00      	nop
    66ea:	3710      	adds	r7, #16
    66ec:	46bd      	mov	sp, r7
    66ee:	bd80      	pop	{r7, pc}

000066f0 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    66f0:	b580      	push	{r7, lr}
    66f2:	b082      	sub	sp, #8
    66f4:	af00      	add	r7, sp, #0
    66f6:	6078      	str	r0, [r7, #4]
    66f8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    66fa:	687b      	ldr	r3, [r7, #4]
    66fc:	2b00      	cmp	r3, #0
    66fe:	d004      	beq.n	670a <qspi_sync_init+0x1a>
    6700:	683b      	ldr	r3, [r7, #0]
    6702:	2b00      	cmp	r3, #0
    6704:	d001      	beq.n	670a <qspi_sync_init+0x1a>
    6706:	2301      	movs	r3, #1
    6708:	e000      	b.n	670c <qspi_sync_init+0x1c>
    670a:	2300      	movs	r3, #0
    670c:	f003 0301 	and.w	r3, r3, #1
    6710:	b2db      	uxtb	r3, r3
    6712:	2231      	movs	r2, #49	; 0x31
    6714:	4906      	ldr	r1, [pc, #24]	; (6730 <qspi_sync_init+0x40>)
    6716:	4618      	mov	r0, r3
    6718:	4b06      	ldr	r3, [pc, #24]	; (6734 <qspi_sync_init+0x44>)
    671a:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    671c:	687b      	ldr	r3, [r7, #4]
    671e:	6839      	ldr	r1, [r7, #0]
    6720:	4618      	mov	r0, r3
    6722:	4b05      	ldr	r3, [pc, #20]	; (6738 <qspi_sync_init+0x48>)
    6724:	4798      	blx	r3
    6726:	4603      	mov	r3, r0
}
    6728:	4618      	mov	r0, r3
    672a:	3708      	adds	r7, #8
    672c:	46bd      	mov	sp, r7
    672e:	bd80      	pop	{r7, pc}
    6730:	000201fc 	.word	0x000201fc
    6734:	00007d5d 	.word	0x00007d5d
    6738:	0000a265 	.word	0x0000a265

0000673c <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    673c:	b580      	push	{r7, lr}
    673e:	b082      	sub	sp, #8
    6740:	af00      	add	r7, sp, #0
    6742:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    6744:	687b      	ldr	r3, [r7, #4]
    6746:	2b00      	cmp	r3, #0
    6748:	bf14      	ite	ne
    674a:	2301      	movne	r3, #1
    674c:	2300      	moveq	r3, #0
    674e:	b2db      	uxtb	r3, r3
    6750:	223f      	movs	r2, #63	; 0x3f
    6752:	4906      	ldr	r1, [pc, #24]	; (676c <qspi_sync_enable+0x30>)
    6754:	4618      	mov	r0, r3
    6756:	4b06      	ldr	r3, [pc, #24]	; (6770 <qspi_sync_enable+0x34>)
    6758:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    675a:	687b      	ldr	r3, [r7, #4]
    675c:	4618      	mov	r0, r3
    675e:	4b05      	ldr	r3, [pc, #20]	; (6774 <qspi_sync_enable+0x38>)
    6760:	4798      	blx	r3
    6762:	4603      	mov	r3, r0
}
    6764:	4618      	mov	r0, r3
    6766:	3708      	adds	r7, #8
    6768:	46bd      	mov	sp, r7
    676a:	bd80      	pop	{r7, pc}
    676c:	000201fc 	.word	0x000201fc
    6770:	00007d5d 	.word	0x00007d5d
    6774:	0000a2d9 	.word	0x0000a2d9

00006778 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    6778:	b580      	push	{r7, lr}
    677a:	b082      	sub	sp, #8
    677c:	af00      	add	r7, sp, #0
    677e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    6780:	687b      	ldr	r3, [r7, #4]
    6782:	2b00      	cmp	r3, #0
    6784:	bf14      	ite	ne
    6786:	2301      	movne	r3, #1
    6788:	2300      	moveq	r3, #0
    678a:	b2db      	uxtb	r3, r3
    678c:	2246      	movs	r2, #70	; 0x46
    678e:	4906      	ldr	r1, [pc, #24]	; (67a8 <qspi_sync_disable+0x30>)
    6790:	4618      	mov	r0, r3
    6792:	4b06      	ldr	r3, [pc, #24]	; (67ac <qspi_sync_disable+0x34>)
    6794:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    6796:	687b      	ldr	r3, [r7, #4]
    6798:	4618      	mov	r0, r3
    679a:	4b05      	ldr	r3, [pc, #20]	; (67b0 <qspi_sync_disable+0x38>)
    679c:	4798      	blx	r3
    679e:	4603      	mov	r3, r0
}
    67a0:	4618      	mov	r0, r3
    67a2:	3708      	adds	r7, #8
    67a4:	46bd      	mov	sp, r7
    67a6:	bd80      	pop	{r7, pc}
    67a8:	000201fc 	.word	0x000201fc
    67ac:	00007d5d 	.word	0x00007d5d
    67b0:	0000a2fd 	.word	0x0000a2fd

000067b4 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    67b4:	b580      	push	{r7, lr}
    67b6:	b082      	sub	sp, #8
    67b8:	af00      	add	r7, sp, #0
    67ba:	6078      	str	r0, [r7, #4]
    67bc:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    67be:	687b      	ldr	r3, [r7, #4]
    67c0:	2b00      	cmp	r3, #0
    67c2:	d004      	beq.n	67ce <qspi_sync_serial_run_command+0x1a>
    67c4:	683b      	ldr	r3, [r7, #0]
    67c6:	2b00      	cmp	r3, #0
    67c8:	d001      	beq.n	67ce <qspi_sync_serial_run_command+0x1a>
    67ca:	2301      	movs	r3, #1
    67cc:	e000      	b.n	67d0 <qspi_sync_serial_run_command+0x1c>
    67ce:	2300      	movs	r3, #0
    67d0:	f003 0301 	and.w	r3, r3, #1
    67d4:	b2db      	uxtb	r3, r3
    67d6:	224d      	movs	r2, #77	; 0x4d
    67d8:	4906      	ldr	r1, [pc, #24]	; (67f4 <qspi_sync_serial_run_command+0x40>)
    67da:	4618      	mov	r0, r3
    67dc:	4b06      	ldr	r3, [pc, #24]	; (67f8 <qspi_sync_serial_run_command+0x44>)
    67de:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    67e0:	687b      	ldr	r3, [r7, #4]
    67e2:	6839      	ldr	r1, [r7, #0]
    67e4:	4618      	mov	r0, r3
    67e6:	4b05      	ldr	r3, [pc, #20]	; (67fc <qspi_sync_serial_run_command+0x48>)
    67e8:	4798      	blx	r3
    67ea:	4603      	mov	r3, r0
}
    67ec:	4618      	mov	r0, r3
    67ee:	3708      	adds	r7, #8
    67f0:	46bd      	mov	sp, r7
    67f2:	bd80      	pop	{r7, pc}
    67f4:	000201fc 	.word	0x000201fc
    67f8:	00007d5d 	.word	0x00007d5d
    67fc:	0000a449 	.word	0x0000a449

00006800 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    6800:	b580      	push	{r7, lr}
    6802:	b084      	sub	sp, #16
    6804:	af00      	add	r7, sp, #0
    6806:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    6808:	687b      	ldr	r3, [r7, #4]
    680a:	3b04      	subs	r3, #4
    680c:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    680e:	687b      	ldr	r3, [r7, #4]
    6810:	791b      	ldrb	r3, [r3, #4]
    6812:	2b01      	cmp	r3, #1
    6814:	d80e      	bhi.n	6834 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    6816:	68fb      	ldr	r3, [r7, #12]
    6818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    681a:	68fb      	ldr	r3, [r7, #12]
    681c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    681e:	1c58      	adds	r0, r3, #1
    6820:	68f9      	ldr	r1, [r7, #12]
    6822:	6448      	str	r0, [r1, #68]	; 0x44
    6824:	4413      	add	r3, r2
    6826:	781b      	ldrb	r3, [r3, #0]
    6828:	b29b      	uxth	r3, r3
    682a:	4619      	mov	r1, r3
    682c:	6878      	ldr	r0, [r7, #4]
    682e:	4b11      	ldr	r3, [pc, #68]	; (6874 <_spi_dev_tx+0x74>)
    6830:	4798      	blx	r3
    6832:	e00d      	b.n	6850 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    6834:	68fb      	ldr	r3, [r7, #12]
    6836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6838:	68fb      	ldr	r3, [r7, #12]
    683a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    683c:	1c58      	adds	r0, r3, #1
    683e:	68f9      	ldr	r1, [r7, #12]
    6840:	6448      	str	r0, [r1, #68]	; 0x44
    6842:	005b      	lsls	r3, r3, #1
    6844:	4413      	add	r3, r2
    6846:	881b      	ldrh	r3, [r3, #0]
    6848:	4619      	mov	r1, r3
    684a:	6878      	ldr	r0, [r7, #4]
    684c:	4b09      	ldr	r3, [pc, #36]	; (6874 <_spi_dev_tx+0x74>)
    684e:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    6850:	68fb      	ldr	r3, [r7, #12]
    6852:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    6854:	68fb      	ldr	r3, [r7, #12]
    6856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6858:	429a      	cmp	r2, r3
    685a:	d107      	bne.n	686c <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    685c:	2100      	movs	r1, #0
    685e:	6878      	ldr	r0, [r7, #4]
    6860:	4b05      	ldr	r3, [pc, #20]	; (6878 <_spi_dev_tx+0x78>)
    6862:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    6864:	2101      	movs	r1, #1
    6866:	6878      	ldr	r0, [r7, #4]
    6868:	4b04      	ldr	r3, [pc, #16]	; (687c <_spi_dev_tx+0x7c>)
    686a:	4798      	blx	r3
	}
}
    686c:	bf00      	nop
    686e:	3710      	adds	r7, #16
    6870:	46bd      	mov	sp, r7
    6872:	bd80      	pop	{r7, pc}
    6874:	0000c889 	.word	0x0000c889
    6878:	0000c74d 	.word	0x0000c74d
    687c:	0000c821 	.word	0x0000c821

00006880 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    6880:	b590      	push	{r4, r7, lr}
    6882:	b085      	sub	sp, #20
    6884:	af00      	add	r7, sp, #0
    6886:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    6888:	687b      	ldr	r3, [r7, #4]
    688a:	3b04      	subs	r3, #4
    688c:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    688e:	68fb      	ldr	r3, [r7, #12]
    6890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6892:	2b00      	cmp	r3, #0
    6894:	d021      	beq.n	68da <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    6896:	687b      	ldr	r3, [r7, #4]
    6898:	791b      	ldrb	r3, [r3, #4]
    689a:	2b01      	cmp	r3, #1
    689c:	d80e      	bhi.n	68bc <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    689e:	68fb      	ldr	r3, [r7, #12]
    68a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    68a2:	68fb      	ldr	r3, [r7, #12]
    68a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    68a6:	1c58      	adds	r0, r3, #1
    68a8:	68f9      	ldr	r1, [r7, #12]
    68aa:	6448      	str	r0, [r1, #68]	; 0x44
    68ac:	18d4      	adds	r4, r2, r3
    68ae:	6878      	ldr	r0, [r7, #4]
    68b0:	4b2e      	ldr	r3, [pc, #184]	; (696c <_spi_dev_rx+0xec>)
    68b2:	4798      	blx	r3
    68b4:	4603      	mov	r3, r0
    68b6:	b2db      	uxtb	r3, r3
    68b8:	7023      	strb	r3, [r4, #0]
    68ba:	e016      	b.n	68ea <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    68bc:	68fb      	ldr	r3, [r7, #12]
    68be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    68c0:	68fb      	ldr	r3, [r7, #12]
    68c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    68c4:	1c58      	adds	r0, r3, #1
    68c6:	68f9      	ldr	r1, [r7, #12]
    68c8:	6448      	str	r0, [r1, #68]	; 0x44
    68ca:	005b      	lsls	r3, r3, #1
    68cc:	18d4      	adds	r4, r2, r3
    68ce:	6878      	ldr	r0, [r7, #4]
    68d0:	4b26      	ldr	r3, [pc, #152]	; (696c <_spi_dev_rx+0xec>)
    68d2:	4798      	blx	r3
    68d4:	4603      	mov	r3, r0
    68d6:	8023      	strh	r3, [r4, #0]
    68d8:	e007      	b.n	68ea <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    68da:	6878      	ldr	r0, [r7, #4]
    68dc:	4b23      	ldr	r3, [pc, #140]	; (696c <_spi_dev_rx+0xec>)
    68de:	4798      	blx	r3
		spi->xfercnt++;
    68e0:	68fb      	ldr	r3, [r7, #12]
    68e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    68e4:	1c5a      	adds	r2, r3, #1
    68e6:	68fb      	ldr	r3, [r7, #12]
    68e8:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    68ea:	68fb      	ldr	r3, [r7, #12]
    68ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    68ee:	68fb      	ldr	r3, [r7, #12]
    68f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    68f2:	429a      	cmp	r2, r3
    68f4:	d226      	bcs.n	6944 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    68f6:	68fb      	ldr	r3, [r7, #12]
    68f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    68fa:	2b00      	cmp	r3, #0
    68fc:	d01b      	beq.n	6936 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    68fe:	687b      	ldr	r3, [r7, #4]
    6900:	791b      	ldrb	r3, [r3, #4]
    6902:	2b01      	cmp	r3, #1
    6904:	d80b      	bhi.n	691e <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    6906:	68fb      	ldr	r3, [r7, #12]
    6908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    690a:	68fb      	ldr	r3, [r7, #12]
    690c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    690e:	4413      	add	r3, r2
    6910:	781b      	ldrb	r3, [r3, #0]
    6912:	b29b      	uxth	r3, r3
    6914:	4619      	mov	r1, r3
    6916:	6878      	ldr	r0, [r7, #4]
    6918:	4b15      	ldr	r3, [pc, #84]	; (6970 <_spi_dev_rx+0xf0>)
    691a:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    691c:	e022      	b.n	6964 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    691e:	68fb      	ldr	r3, [r7, #12]
    6920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6922:	68fb      	ldr	r3, [r7, #12]
    6924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6926:	005b      	lsls	r3, r3, #1
    6928:	4413      	add	r3, r2
    692a:	881b      	ldrh	r3, [r3, #0]
    692c:	4619      	mov	r1, r3
    692e:	6878      	ldr	r0, [r7, #4]
    6930:	4b0f      	ldr	r3, [pc, #60]	; (6970 <_spi_dev_rx+0xf0>)
    6932:	4798      	blx	r3
}
    6934:	e016      	b.n	6964 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    6936:	687b      	ldr	r3, [r7, #4]
    6938:	88db      	ldrh	r3, [r3, #6]
    693a:	4619      	mov	r1, r3
    693c:	6878      	ldr	r0, [r7, #4]
    693e:	4b0c      	ldr	r3, [pc, #48]	; (6970 <_spi_dev_rx+0xf0>)
    6940:	4798      	blx	r3
}
    6942:	e00f      	b.n	6964 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    6944:	2100      	movs	r1, #0
    6946:	6878      	ldr	r0, [r7, #4]
    6948:	4b0a      	ldr	r3, [pc, #40]	; (6974 <_spi_dev_rx+0xf4>)
    694a:	4798      	blx	r3
		spi->stat = 0;
    694c:	68fb      	ldr	r3, [r7, #12]
    694e:	2200      	movs	r2, #0
    6950:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    6954:	68fb      	ldr	r3, [r7, #12]
    6956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6958:	2b00      	cmp	r3, #0
    695a:	d003      	beq.n	6964 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    695c:	68fb      	ldr	r3, [r7, #12]
    695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6960:	68f8      	ldr	r0, [r7, #12]
    6962:	4798      	blx	r3
}
    6964:	bf00      	nop
    6966:	3714      	adds	r7, #20
    6968:	46bd      	mov	sp, r7
    696a:	bd90      	pop	{r4, r7, pc}
    696c:	0000c8e1 	.word	0x0000c8e1
    6970:	0000c889 	.word	0x0000c889
    6974:	0000c7b1 	.word	0x0000c7b1

00006978 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    6978:	b580      	push	{r7, lr}
    697a:	b084      	sub	sp, #16
    697c:	af00      	add	r7, sp, #0
    697e:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    6980:	687b      	ldr	r3, [r7, #4]
    6982:	3b04      	subs	r3, #4
    6984:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    6986:	68fb      	ldr	r3, [r7, #12]
    6988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    698a:	68fb      	ldr	r3, [r7, #12]
    698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    698e:	429a      	cmp	r2, r3
    6990:	d30f      	bcc.n	69b2 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    6992:	2100      	movs	r1, #0
    6994:	6878      	ldr	r0, [r7, #4]
    6996:	4b09      	ldr	r3, [pc, #36]	; (69bc <_spi_dev_complete+0x44>)
    6998:	4798      	blx	r3
		spi->stat = 0;
    699a:	68fb      	ldr	r3, [r7, #12]
    699c:	2200      	movs	r2, #0
    699e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    69a2:	68fb      	ldr	r3, [r7, #12]
    69a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    69a6:	2b00      	cmp	r3, #0
    69a8:	d003      	beq.n	69b2 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    69aa:	68fb      	ldr	r3, [r7, #12]
    69ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    69ae:	68f8      	ldr	r0, [r7, #12]
    69b0:	4798      	blx	r3
		}
	}
}
    69b2:	bf00      	nop
    69b4:	3710      	adds	r7, #16
    69b6:	46bd      	mov	sp, r7
    69b8:	bd80      	pop	{r7, pc}
    69ba:	bf00      	nop
    69bc:	0000c821 	.word	0x0000c821

000069c0 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    69c0:	b580      	push	{r7, lr}
    69c2:	b084      	sub	sp, #16
    69c4:	af00      	add	r7, sp, #0
    69c6:	6078      	str	r0, [r7, #4]
    69c8:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    69ca:	687b      	ldr	r3, [r7, #4]
    69cc:	3b04      	subs	r3, #4
    69ce:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    69d0:	2100      	movs	r1, #0
    69d2:	6878      	ldr	r0, [r7, #4]
    69d4:	4b0d      	ldr	r3, [pc, #52]	; (6a0c <_spi_dev_error+0x4c>)
    69d6:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    69d8:	2100      	movs	r1, #0
    69da:	6878      	ldr	r0, [r7, #4]
    69dc:	4b0c      	ldr	r3, [pc, #48]	; (6a10 <_spi_dev_error+0x50>)
    69de:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    69e0:	2100      	movs	r1, #0
    69e2:	6878      	ldr	r0, [r7, #4]
    69e4:	4b0b      	ldr	r3, [pc, #44]	; (6a14 <_spi_dev_error+0x54>)
    69e6:	4798      	blx	r3
	spi->stat = 0;
    69e8:	68fb      	ldr	r3, [r7, #12]
    69ea:	2200      	movs	r2, #0
    69ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    69f0:	68fb      	ldr	r3, [r7, #12]
    69f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    69f4:	2b00      	cmp	r3, #0
    69f6:	d004      	beq.n	6a02 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    69f8:	68fb      	ldr	r3, [r7, #12]
    69fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    69fc:	6839      	ldr	r1, [r7, #0]
    69fe:	68f8      	ldr	r0, [r7, #12]
    6a00:	4798      	blx	r3
	}
}
    6a02:	bf00      	nop
    6a04:	3710      	adds	r7, #16
    6a06:	46bd      	mov	sp, r7
    6a08:	bd80      	pop	{r7, pc}
    6a0a:	bf00      	nop
    6a0c:	0000c74d 	.word	0x0000c74d
    6a10:	0000c7b1 	.word	0x0000c7b1
    6a14:	0000c821 	.word	0x0000c821

00006a18 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    6a18:	b580      	push	{r7, lr}
    6a1a:	b084      	sub	sp, #16
    6a1c:	af00      	add	r7, sp, #0
    6a1e:	6078      	str	r0, [r7, #4]
    6a20:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    6a22:	2300      	movs	r3, #0
    6a24:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    6a26:	687b      	ldr	r3, [r7, #4]
    6a28:	2b00      	cmp	r3, #0
    6a2a:	d004      	beq.n	6a36 <spi_m_async_init+0x1e>
    6a2c:	683b      	ldr	r3, [r7, #0]
    6a2e:	2b00      	cmp	r3, #0
    6a30:	d001      	beq.n	6a36 <spi_m_async_init+0x1e>
    6a32:	2301      	movs	r3, #1
    6a34:	e000      	b.n	6a38 <spi_m_async_init+0x20>
    6a36:	2300      	movs	r3, #0
    6a38:	f003 0301 	and.w	r3, r3, #1
    6a3c:	b2db      	uxtb	r3, r3
    6a3e:	22a5      	movs	r2, #165	; 0xa5
    6a40:	491c      	ldr	r1, [pc, #112]	; (6ab4 <spi_m_async_init+0x9c>)
    6a42:	4618      	mov	r0, r3
    6a44:	4b1c      	ldr	r3, [pc, #112]	; (6ab8 <spi_m_async_init+0xa0>)
    6a46:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    6a48:	687b      	ldr	r3, [r7, #4]
    6a4a:	683a      	ldr	r2, [r7, #0]
    6a4c:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    6a4e:	687b      	ldr	r3, [r7, #4]
    6a50:	3304      	adds	r3, #4
    6a52:	6839      	ldr	r1, [r7, #0]
    6a54:	4618      	mov	r0, r3
    6a56:	4b19      	ldr	r3, [pc, #100]	; (6abc <spi_m_async_init+0xa4>)
    6a58:	4798      	blx	r3
    6a5a:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    6a5c:	68fb      	ldr	r3, [r7, #12]
    6a5e:	2b00      	cmp	r3, #0
    6a60:	db23      	blt.n	6aaa <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    6a62:	687b      	ldr	r3, [r7, #4]
    6a64:	3304      	adds	r3, #4
    6a66:	4a16      	ldr	r2, [pc, #88]	; (6ac0 <spi_m_async_init+0xa8>)
    6a68:	2100      	movs	r1, #0
    6a6a:	4618      	mov	r0, r3
    6a6c:	4b15      	ldr	r3, [pc, #84]	; (6ac4 <spi_m_async_init+0xac>)
    6a6e:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    6a70:	687b      	ldr	r3, [r7, #4]
    6a72:	3304      	adds	r3, #4
    6a74:	4a14      	ldr	r2, [pc, #80]	; (6ac8 <spi_m_async_init+0xb0>)
    6a76:	2101      	movs	r1, #1
    6a78:	4618      	mov	r0, r3
    6a7a:	4b12      	ldr	r3, [pc, #72]	; (6ac4 <spi_m_async_init+0xac>)
    6a7c:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    6a7e:	687b      	ldr	r3, [r7, #4]
    6a80:	3304      	adds	r3, #4
    6a82:	4a12      	ldr	r2, [pc, #72]	; (6acc <spi_m_async_init+0xb4>)
    6a84:	2102      	movs	r1, #2
    6a86:	4618      	mov	r0, r3
    6a88:	4b0e      	ldr	r3, [pc, #56]	; (6ac4 <spi_m_async_init+0xac>)
    6a8a:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    6a8c:	687b      	ldr	r3, [r7, #4]
    6a8e:	3304      	adds	r3, #4
    6a90:	4a0f      	ldr	r2, [pc, #60]	; (6ad0 <spi_m_async_init+0xb8>)
    6a92:	2103      	movs	r1, #3
    6a94:	4618      	mov	r0, r3
    6a96:	4b0b      	ldr	r3, [pc, #44]	; (6ac4 <spi_m_async_init+0xac>)
    6a98:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    6a9a:	687b      	ldr	r3, [r7, #4]
    6a9c:	4a0d      	ldr	r2, [pc, #52]	; (6ad4 <spi_m_async_init+0xbc>)
    6a9e:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    6aa0:	687b      	ldr	r3, [r7, #4]
    6aa2:	4a0d      	ldr	r2, [pc, #52]	; (6ad8 <spi_m_async_init+0xc0>)
    6aa4:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    6aa6:	2300      	movs	r3, #0
    6aa8:	e000      	b.n	6aac <spi_m_async_init+0x94>
		return rc;
    6aaa:	68fb      	ldr	r3, [r7, #12]
}
    6aac:	4618      	mov	r0, r3
    6aae:	3710      	adds	r7, #16
    6ab0:	46bd      	mov	sp, r7
    6ab2:	bd80      	pop	{r7, pc}
    6ab4:	00020218 	.word	0x00020218
    6ab8:	00007d5d 	.word	0x00007d5d
    6abc:	0000c35d 	.word	0x0000c35d
    6ac0:	00006801 	.word	0x00006801
    6ac4:	0000c931 	.word	0x0000c931
    6ac8:	00006881 	.word	0x00006881
    6acc:	00006979 	.word	0x00006979
    6ad0:	000069c1 	.word	0x000069c1
    6ad4:	00006b19 	.word	0x00006b19
    6ad8:	00006b99 	.word	0x00006b99

00006adc <spi_m_async_enable>:
	spi->callbacks.cb_error = NULL;
	spi->callbacks.cb_xfer  = NULL;
}

void spi_m_async_enable(struct spi_m_async_descriptor *spi)
{
    6adc:	b580      	push	{r7, lr}
    6ade:	b082      	sub	sp, #8
    6ae0:	af00      	add	r7, sp, #0
    6ae2:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    6ae4:	687b      	ldr	r3, [r7, #4]
    6ae6:	2b00      	cmp	r3, #0
    6ae8:	bf14      	ite	ne
    6aea:	2301      	movne	r3, #1
    6aec:	2300      	moveq	r3, #0
    6aee:	b2db      	uxtb	r3, r3
    6af0:	22c1      	movs	r2, #193	; 0xc1
    6af2:	4906      	ldr	r1, [pc, #24]	; (6b0c <spi_m_async_enable+0x30>)
    6af4:	4618      	mov	r0, r3
    6af6:	4b06      	ldr	r3, [pc, #24]	; (6b10 <spi_m_async_enable+0x34>)
    6af8:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    6afa:	687b      	ldr	r3, [r7, #4]
    6afc:	3304      	adds	r3, #4
    6afe:	4618      	mov	r0, r3
    6b00:	4b04      	ldr	r3, [pc, #16]	; (6b14 <spi_m_async_enable+0x38>)
    6b02:	4798      	blx	r3
}
    6b04:	bf00      	nop
    6b06:	3708      	adds	r7, #8
    6b08:	46bd      	mov	sp, r7
    6b0a:	bd80      	pop	{r7, pc}
    6b0c:	00020218 	.word	0x00020218
    6b10:	00007d5d 	.word	0x00007d5d
    6b14:	0000c43d 	.word	0x0000c43d

00006b18 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    6b18:	b580      	push	{r7, lr}
    6b1a:	b086      	sub	sp, #24
    6b1c:	af00      	add	r7, sp, #0
    6b1e:	60f8      	str	r0, [r7, #12]
    6b20:	60b9      	str	r1, [r7, #8]
    6b22:	4613      	mov	r3, r2
    6b24:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6b26:	68fb      	ldr	r3, [r7, #12]
    6b28:	2b00      	cmp	r3, #0
    6b2a:	bf14      	ite	ne
    6b2c:	2301      	movne	r3, #1
    6b2e:	2300      	moveq	r3, #0
    6b30:	b2db      	uxtb	r3, r3
    6b32:	f240 1205 	movw	r2, #261	; 0x105
    6b36:	4914      	ldr	r1, [pc, #80]	; (6b88 <_spi_m_async_io_read+0x70>)
    6b38:	4618      	mov	r0, r3
    6b3a:	4b14      	ldr	r3, [pc, #80]	; (6b8c <_spi_m_async_io_read+0x74>)
    6b3c:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    6b3e:	68fb      	ldr	r3, [r7, #12]
    6b40:	3b24      	subs	r3, #36	; 0x24
    6b42:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    6b44:	697b      	ldr	r3, [r7, #20]
    6b46:	68ba      	ldr	r2, [r7, #8]
    6b48:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    6b4a:	697b      	ldr	r3, [r7, #20]
    6b4c:	2200      	movs	r2, #0
    6b4e:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    6b50:	88fa      	ldrh	r2, [r7, #6]
    6b52:	697b      	ldr	r3, [r7, #20]
    6b54:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    6b56:	697b      	ldr	r3, [r7, #20]
    6b58:	2200      	movs	r2, #0
    6b5a:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    6b5c:	697b      	ldr	r3, [r7, #20]
    6b5e:	2210      	movs	r2, #16
    6b60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    6b64:	697b      	ldr	r3, [r7, #20]
    6b66:	3304      	adds	r3, #4
    6b68:	2101      	movs	r1, #1
    6b6a:	4618      	mov	r0, r3
    6b6c:	4b08      	ldr	r3, [pc, #32]	; (6b90 <_spi_m_async_io_read+0x78>)
    6b6e:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    6b70:	697b      	ldr	r3, [r7, #20]
    6b72:	3304      	adds	r3, #4
    6b74:	f240 11ff 	movw	r1, #511	; 0x1ff
    6b78:	4618      	mov	r0, r3
    6b7a:	4b06      	ldr	r3, [pc, #24]	; (6b94 <_spi_m_async_io_read+0x7c>)
    6b7c:	4798      	blx	r3

	return ERR_NONE;
    6b7e:	2300      	movs	r3, #0
}
    6b80:	4618      	mov	r0, r3
    6b82:	3718      	adds	r7, #24
    6b84:	46bd      	mov	sp, r7
    6b86:	bd80      	pop	{r7, pc}
    6b88:	00020218 	.word	0x00020218
    6b8c:	00007d5d 	.word	0x00007d5d
    6b90:	0000c7b1 	.word	0x0000c7b1
    6b94:	0000c889 	.word	0x0000c889

00006b98 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    6b98:	b580      	push	{r7, lr}
    6b9a:	b086      	sub	sp, #24
    6b9c:	af00      	add	r7, sp, #0
    6b9e:	60f8      	str	r0, [r7, #12]
    6ba0:	60b9      	str	r1, [r7, #8]
    6ba2:	4613      	mov	r3, r2
    6ba4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6ba6:	68fb      	ldr	r3, [r7, #12]
    6ba8:	2b00      	cmp	r3, #0
    6baa:	bf14      	ite	ne
    6bac:	2301      	movne	r3, #1
    6bae:	2300      	moveq	r3, #0
    6bb0:	b2db      	uxtb	r3, r3
    6bb2:	f240 1227 	movw	r2, #295	; 0x127
    6bb6:	4911      	ldr	r1, [pc, #68]	; (6bfc <_spi_m_async_io_write+0x64>)
    6bb8:	4618      	mov	r0, r3
    6bba:	4b11      	ldr	r3, [pc, #68]	; (6c00 <_spi_m_async_io_write+0x68>)
    6bbc:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    6bbe:	68fb      	ldr	r3, [r7, #12]
    6bc0:	3b24      	subs	r3, #36	; 0x24
    6bc2:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    6bc4:	697b      	ldr	r3, [r7, #20]
    6bc6:	2200      	movs	r2, #0
    6bc8:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    6bca:	697b      	ldr	r3, [r7, #20]
    6bcc:	68ba      	ldr	r2, [r7, #8]
    6bce:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    6bd0:	88fa      	ldrh	r2, [r7, #6]
    6bd2:	697b      	ldr	r3, [r7, #20]
    6bd4:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    6bd6:	697b      	ldr	r3, [r7, #20]
    6bd8:	2200      	movs	r2, #0
    6bda:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    6bdc:	697b      	ldr	r3, [r7, #20]
    6bde:	2210      	movs	r2, #16
    6be0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    6be4:	697b      	ldr	r3, [r7, #20]
    6be6:	3304      	adds	r3, #4
    6be8:	2101      	movs	r1, #1
    6bea:	4618      	mov	r0, r3
    6bec:	4b05      	ldr	r3, [pc, #20]	; (6c04 <_spi_m_async_io_write+0x6c>)
    6bee:	4798      	blx	r3

	return ERR_NONE;
    6bf0:	2300      	movs	r3, #0
}
    6bf2:	4618      	mov	r0, r3
    6bf4:	3718      	adds	r7, #24
    6bf6:	46bd      	mov	sp, r7
    6bf8:	bd80      	pop	{r7, pc}
    6bfa:	bf00      	nop
    6bfc:	00020218 	.word	0x00020218
    6c00:	00007d5d 	.word	0x00007d5d
    6c04:	0000c74d 	.word	0x0000c74d

00006c08 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    6c08:	b580      	push	{r7, lr}
    6c0a:	b084      	sub	sp, #16
    6c0c:	af00      	add	r7, sp, #0
    6c0e:	60f8      	str	r0, [r7, #12]
    6c10:	460b      	mov	r3, r1
    6c12:	607a      	str	r2, [r7, #4]
    6c14:	72fb      	strb	r3, [r7, #11]
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    6c16:	68fb      	ldr	r3, [r7, #12]
    6c18:	2b00      	cmp	r3, #0
    6c1a:	d004      	beq.n	6c26 <spi_m_async_register_callback+0x1e>
    6c1c:	7afb      	ldrb	r3, [r7, #11]
    6c1e:	2b01      	cmp	r3, #1
    6c20:	d801      	bhi.n	6c26 <spi_m_async_register_callback+0x1e>
    6c22:	2301      	movs	r3, #1
    6c24:	e000      	b.n	6c28 <spi_m_async_register_callback+0x20>
    6c26:	2300      	movs	r3, #0
    6c28:	f003 0301 	and.w	r3, r3, #1
    6c2c:	b2db      	uxtb	r3, r3
    6c2e:	f240 1263 	movw	r2, #355	; 0x163
    6c32:	490f      	ldr	r1, [pc, #60]	; (6c70 <spi_m_async_register_callback+0x68>)
    6c34:	4618      	mov	r0, r3
    6c36:	4b0f      	ldr	r3, [pc, #60]	; (6c74 <spi_m_async_register_callback+0x6c>)
    6c38:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    6c3a:	7afb      	ldrb	r3, [r7, #11]
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d103      	bne.n	6c48 <spi_m_async_register_callback+0x40>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    6c40:	68fb      	ldr	r3, [r7, #12]
    6c42:	687a      	ldr	r2, [r7, #4]
    6c44:	631a      	str	r2, [r3, #48]	; 0x30
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
	}
}
    6c46:	e00e      	b.n	6c66 <spi_m_async_register_callback+0x5e>
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    6c48:	68fb      	ldr	r3, [r7, #12]
    6c4a:	687a      	ldr	r2, [r7, #4]
    6c4c:	635a      	str	r2, [r3, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    6c4e:	68fb      	ldr	r3, [r7, #12]
    6c50:	1d18      	adds	r0, r3, #4
    6c52:	687b      	ldr	r3, [r7, #4]
    6c54:	2b00      	cmp	r3, #0
    6c56:	bf14      	ite	ne
    6c58:	2301      	movne	r3, #1
    6c5a:	2300      	moveq	r3, #0
    6c5c:	b2db      	uxtb	r3, r3
    6c5e:	461a      	mov	r2, r3
    6c60:	2103      	movs	r1, #3
    6c62:	4b05      	ldr	r3, [pc, #20]	; (6c78 <spi_m_async_register_callback+0x70>)
    6c64:	4798      	blx	r3
}
    6c66:	bf00      	nop
    6c68:	3710      	adds	r7, #16
    6c6a:	46bd      	mov	sp, r7
    6c6c:	bd80      	pop	{r7, pc}
    6c6e:	bf00      	nop
    6c70:	00020218 	.word	0x00020218
    6c74:	00007d5d 	.word	0x00007d5d
    6c78:	0000c98d 	.word	0x0000c98d

00006c7c <spi_m_async_get_io_descriptor>:

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    6c7c:	b580      	push	{r7, lr}
    6c7e:	b082      	sub	sp, #8
    6c80:	af00      	add	r7, sp, #0
    6c82:	6078      	str	r0, [r7, #4]
    6c84:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    6c86:	687b      	ldr	r3, [r7, #4]
    6c88:	2b00      	cmp	r3, #0
    6c8a:	d004      	beq.n	6c96 <spi_m_async_get_io_descriptor+0x1a>
    6c8c:	683b      	ldr	r3, [r7, #0]
    6c8e:	2b00      	cmp	r3, #0
    6c90:	d001      	beq.n	6c96 <spi_m_async_get_io_descriptor+0x1a>
    6c92:	2301      	movs	r3, #1
    6c94:	e000      	b.n	6c98 <spi_m_async_get_io_descriptor+0x1c>
    6c96:	2300      	movs	r3, #0
    6c98:	f003 0301 	and.w	r3, r3, #1
    6c9c:	b2db      	uxtb	r3, r3
    6c9e:	f240 126f 	movw	r2, #367	; 0x16f
    6ca2:	4907      	ldr	r1, [pc, #28]	; (6cc0 <spi_m_async_get_io_descriptor+0x44>)
    6ca4:	4618      	mov	r0, r3
    6ca6:	4b07      	ldr	r3, [pc, #28]	; (6cc4 <spi_m_async_get_io_descriptor+0x48>)
    6ca8:	4798      	blx	r3
	*io = &spi->io;
    6caa:	687b      	ldr	r3, [r7, #4]
    6cac:	f103 0224 	add.w	r2, r3, #36	; 0x24
    6cb0:	683b      	ldr	r3, [r7, #0]
    6cb2:	601a      	str	r2, [r3, #0]
	return 0;
    6cb4:	2300      	movs	r3, #0
}
    6cb6:	4618      	mov	r0, r3
    6cb8:	3708      	adds	r7, #8
    6cba:	46bd      	mov	sp, r7
    6cbc:	bd80      	pop	{r7, pc}
    6cbe:	bf00      	nop
    6cc0:	00020218 	.word	0x00020218
    6cc4:	00007d5d 	.word	0x00007d5d

00006cc8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    6cc8:	b580      	push	{r7, lr}
    6cca:	b084      	sub	sp, #16
    6ccc:	af00      	add	r7, sp, #0
    6cce:	6078      	str	r0, [r7, #4]
    6cd0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    6cd2:	2300      	movs	r3, #0
    6cd4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    6cd6:	687b      	ldr	r3, [r7, #4]
    6cd8:	2b00      	cmp	r3, #0
    6cda:	d004      	beq.n	6ce6 <spi_m_sync_init+0x1e>
    6cdc:	683b      	ldr	r3, [r7, #0]
    6cde:	2b00      	cmp	r3, #0
    6ce0:	d001      	beq.n	6ce6 <spi_m_sync_init+0x1e>
    6ce2:	2301      	movs	r3, #1
    6ce4:	e000      	b.n	6ce8 <spi_m_sync_init+0x20>
    6ce6:	2300      	movs	r3, #0
    6ce8:	f003 0301 	and.w	r3, r3, #1
    6cec:	b2db      	uxtb	r3, r3
    6cee:	2240      	movs	r2, #64	; 0x40
    6cf0:	4910      	ldr	r1, [pc, #64]	; (6d34 <spi_m_sync_init+0x6c>)
    6cf2:	4618      	mov	r0, r3
    6cf4:	4b10      	ldr	r3, [pc, #64]	; (6d38 <spi_m_sync_init+0x70>)
    6cf6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    6cf8:	687b      	ldr	r3, [r7, #4]
    6cfa:	683a      	ldr	r2, [r7, #0]
    6cfc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    6cfe:	687b      	ldr	r3, [r7, #4]
    6d00:	3304      	adds	r3, #4
    6d02:	6839      	ldr	r1, [r7, #0]
    6d04:	4618      	mov	r0, r3
    6d06:	4b0d      	ldr	r3, [pc, #52]	; (6d3c <spi_m_sync_init+0x74>)
    6d08:	4798      	blx	r3
    6d0a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    6d0c:	68fb      	ldr	r3, [r7, #12]
    6d0e:	2b00      	cmp	r3, #0
    6d10:	da01      	bge.n	6d16 <spi_m_sync_init+0x4e>
		return rc;
    6d12:	68fb      	ldr	r3, [r7, #12]
    6d14:	e00a      	b.n	6d2c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    6d16:	687b      	ldr	r3, [r7, #4]
    6d18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6d1c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    6d1e:	687b      	ldr	r3, [r7, #4]
    6d20:	4a07      	ldr	r2, [pc, #28]	; (6d40 <spi_m_sync_init+0x78>)
    6d22:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    6d24:	687b      	ldr	r3, [r7, #4]
    6d26:	4a07      	ldr	r2, [pc, #28]	; (6d44 <spi_m_sync_init+0x7c>)
    6d28:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    6d2a:	2300      	movs	r3, #0
}
    6d2c:	4618      	mov	r0, r3
    6d2e:	3710      	adds	r7, #16
    6d30:	46bd      	mov	sp, r7
    6d32:	bd80      	pop	{r7, pc}
    6d34:	00020238 	.word	0x00020238
    6d38:	00007d5d 	.word	0x00007d5d
    6d3c:	0000c251 	.word	0x0000c251
    6d40:	00006dc1 	.word	0x00006dc1
    6d44:	00006e19 	.word	0x00006e19

00006d48 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    6d48:	b580      	push	{r7, lr}
    6d4a:	b082      	sub	sp, #8
    6d4c:	af00      	add	r7, sp, #0
    6d4e:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    6d50:	687b      	ldr	r3, [r7, #4]
    6d52:	2b00      	cmp	r3, #0
    6d54:	bf14      	ite	ne
    6d56:	2301      	movne	r3, #1
    6d58:	2300      	moveq	r3, #0
    6d5a:	b2db      	uxtb	r3, r3
    6d5c:	2257      	movs	r2, #87	; 0x57
    6d5e:	4906      	ldr	r1, [pc, #24]	; (6d78 <spi_m_sync_enable+0x30>)
    6d60:	4618      	mov	r0, r3
    6d62:	4b06      	ldr	r3, [pc, #24]	; (6d7c <spi_m_sync_enable+0x34>)
    6d64:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    6d66:	687b      	ldr	r3, [r7, #4]
    6d68:	3304      	adds	r3, #4
    6d6a:	4618      	mov	r0, r3
    6d6c:	4b04      	ldr	r3, [pc, #16]	; (6d80 <spi_m_sync_enable+0x38>)
    6d6e:	4798      	blx	r3
}
    6d70:	bf00      	nop
    6d72:	3708      	adds	r7, #8
    6d74:	46bd      	mov	sp, r7
    6d76:	bd80      	pop	{r7, pc}
    6d78:	00020238 	.word	0x00020238
    6d7c:	00007d5d 	.word	0x00007d5d
    6d80:	0000c3ed 	.word	0x0000c3ed

00006d84 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    6d84:	b580      	push	{r7, lr}
    6d86:	b082      	sub	sp, #8
    6d88:	af00      	add	r7, sp, #0
    6d8a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    6d8c:	687b      	ldr	r3, [r7, #4]
    6d8e:	2b00      	cmp	r3, #0
    6d90:	bf14      	ite	ne
    6d92:	2301      	movne	r3, #1
    6d94:	2300      	moveq	r3, #0
    6d96:	b2db      	uxtb	r3, r3
    6d98:	225d      	movs	r2, #93	; 0x5d
    6d9a:	4906      	ldr	r1, [pc, #24]	; (6db4 <spi_m_sync_disable+0x30>)
    6d9c:	4618      	mov	r0, r3
    6d9e:	4b06      	ldr	r3, [pc, #24]	; (6db8 <spi_m_sync_disable+0x34>)
    6da0:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    6da2:	687b      	ldr	r3, [r7, #4]
    6da4:	3304      	adds	r3, #4
    6da6:	4618      	mov	r0, r3
    6da8:	4b04      	ldr	r3, [pc, #16]	; (6dbc <spi_m_sync_disable+0x38>)
    6daa:	4798      	blx	r3
}
    6dac:	bf00      	nop
    6dae:	3708      	adds	r7, #8
    6db0:	46bd      	mov	sp, r7
    6db2:	bd80      	pop	{r7, pc}
    6db4:	00020238 	.word	0x00020238
    6db8:	00007d5d 	.word	0x00007d5d
    6dbc:	0000c48d 	.word	0x0000c48d

00006dc0 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    6dc0:	b580      	push	{r7, lr}
    6dc2:	b088      	sub	sp, #32
    6dc4:	af00      	add	r7, sp, #0
    6dc6:	60f8      	str	r0, [r7, #12]
    6dc8:	60b9      	str	r1, [r7, #8]
    6dca:	4613      	mov	r3, r2
    6dcc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6dce:	68fb      	ldr	r3, [r7, #12]
    6dd0:	2b00      	cmp	r3, #0
    6dd2:	bf14      	ite	ne
    6dd4:	2301      	movne	r3, #1
    6dd6:	2300      	moveq	r3, #0
    6dd8:	b2db      	uxtb	r3, r3
    6dda:	2287      	movs	r2, #135	; 0x87
    6ddc:	490b      	ldr	r1, [pc, #44]	; (6e0c <_spi_m_sync_io_read+0x4c>)
    6dde:	4618      	mov	r0, r3
    6de0:	4b0b      	ldr	r3, [pc, #44]	; (6e10 <_spi_m_sync_io_read+0x50>)
    6de2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    6de4:	68fb      	ldr	r3, [r7, #12]
    6de6:	3b0c      	subs	r3, #12
    6de8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    6dea:	68bb      	ldr	r3, [r7, #8]
    6dec:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    6dee:	2300      	movs	r3, #0
    6df0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    6df2:	88fb      	ldrh	r3, [r7, #6]
    6df4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    6df6:	f107 0310 	add.w	r3, r7, #16
    6dfa:	4619      	mov	r1, r3
    6dfc:	69f8      	ldr	r0, [r7, #28]
    6dfe:	4b05      	ldr	r3, [pc, #20]	; (6e14 <_spi_m_sync_io_read+0x54>)
    6e00:	4798      	blx	r3
    6e02:	4603      	mov	r3, r0
}
    6e04:	4618      	mov	r0, r3
    6e06:	3720      	adds	r7, #32
    6e08:	46bd      	mov	sp, r7
    6e0a:	bd80      	pop	{r7, pc}
    6e0c:	00020238 	.word	0x00020238
    6e10:	00007d5d 	.word	0x00007d5d
    6e14:	00006e71 	.word	0x00006e71

00006e18 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    6e18:	b580      	push	{r7, lr}
    6e1a:	b088      	sub	sp, #32
    6e1c:	af00      	add	r7, sp, #0
    6e1e:	60f8      	str	r0, [r7, #12]
    6e20:	60b9      	str	r1, [r7, #8]
    6e22:	4613      	mov	r3, r2
    6e24:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6e26:	68fb      	ldr	r3, [r7, #12]
    6e28:	2b00      	cmp	r3, #0
    6e2a:	bf14      	ite	ne
    6e2c:	2301      	movne	r3, #1
    6e2e:	2300      	moveq	r3, #0
    6e30:	b2db      	uxtb	r3, r3
    6e32:	22a3      	movs	r2, #163	; 0xa3
    6e34:	490b      	ldr	r1, [pc, #44]	; (6e64 <_spi_m_sync_io_write+0x4c>)
    6e36:	4618      	mov	r0, r3
    6e38:	4b0b      	ldr	r3, [pc, #44]	; (6e68 <_spi_m_sync_io_write+0x50>)
    6e3a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    6e3c:	68fb      	ldr	r3, [r7, #12]
    6e3e:	3b0c      	subs	r3, #12
    6e40:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    6e42:	2300      	movs	r3, #0
    6e44:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    6e46:	68bb      	ldr	r3, [r7, #8]
    6e48:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    6e4a:	88fb      	ldrh	r3, [r7, #6]
    6e4c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    6e4e:	f107 0310 	add.w	r3, r7, #16
    6e52:	4619      	mov	r1, r3
    6e54:	69f8      	ldr	r0, [r7, #28]
    6e56:	4b05      	ldr	r3, [pc, #20]	; (6e6c <_spi_m_sync_io_write+0x54>)
    6e58:	4798      	blx	r3
    6e5a:	4603      	mov	r3, r0
}
    6e5c:	4618      	mov	r0, r3
    6e5e:	3720      	adds	r7, #32
    6e60:	46bd      	mov	sp, r7
    6e62:	bd80      	pop	{r7, pc}
    6e64:	00020238 	.word	0x00020238
    6e68:	00007d5d 	.word	0x00007d5d
    6e6c:	00006e71 	.word	0x00006e71

00006e70 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    6e70:	b580      	push	{r7, lr}
    6e72:	b086      	sub	sp, #24
    6e74:	af00      	add	r7, sp, #0
    6e76:	6078      	str	r0, [r7, #4]
    6e78:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    6e7a:	687b      	ldr	r3, [r7, #4]
    6e7c:	2b00      	cmp	r3, #0
    6e7e:	d004      	beq.n	6e8a <spi_m_sync_transfer+0x1a>
    6e80:	683b      	ldr	r3, [r7, #0]
    6e82:	2b00      	cmp	r3, #0
    6e84:	d001      	beq.n	6e8a <spi_m_sync_transfer+0x1a>
    6e86:	2301      	movs	r3, #1
    6e88:	e000      	b.n	6e8c <spi_m_sync_transfer+0x1c>
    6e8a:	2300      	movs	r3, #0
    6e8c:	f003 0301 	and.w	r3, r3, #1
    6e90:	b2db      	uxtb	r3, r3
    6e92:	22b3      	movs	r2, #179	; 0xb3
    6e94:	490c      	ldr	r1, [pc, #48]	; (6ec8 <spi_m_sync_transfer+0x58>)
    6e96:	4618      	mov	r0, r3
    6e98:	4b0c      	ldr	r3, [pc, #48]	; (6ecc <spi_m_sync_transfer+0x5c>)
    6e9a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    6e9c:	683b      	ldr	r3, [r7, #0]
    6e9e:	681b      	ldr	r3, [r3, #0]
    6ea0:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    6ea2:	683b      	ldr	r3, [r7, #0]
    6ea4:	685b      	ldr	r3, [r3, #4]
    6ea6:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    6ea8:	683b      	ldr	r3, [r7, #0]
    6eaa:	689b      	ldr	r3, [r3, #8]
    6eac:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    6eae:	687b      	ldr	r3, [r7, #4]
    6eb0:	3304      	adds	r3, #4
    6eb2:	f107 020c 	add.w	r2, r7, #12
    6eb6:	4611      	mov	r1, r2
    6eb8:	4618      	mov	r0, r3
    6eba:	4b05      	ldr	r3, [pc, #20]	; (6ed0 <spi_m_sync_transfer+0x60>)
    6ebc:	4798      	blx	r3
    6ebe:	4603      	mov	r3, r0
}
    6ec0:	4618      	mov	r0, r3
    6ec2:	3718      	adds	r7, #24
    6ec4:	46bd      	mov	sp, r7
    6ec6:	bd80      	pop	{r7, pc}
    6ec8:	00020238 	.word	0x00020238
    6ecc:	00007d5d 	.word	0x00007d5d
    6ed0:	0000c631 	.word	0x0000c631

00006ed4 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    6ed4:	b580      	push	{r7, lr}
    6ed6:	b082      	sub	sp, #8
    6ed8:	af00      	add	r7, sp, #0
    6eda:	6078      	str	r0, [r7, #4]
    6edc:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    6ede:	687b      	ldr	r3, [r7, #4]
    6ee0:	2b00      	cmp	r3, #0
    6ee2:	d004      	beq.n	6eee <spi_m_sync_get_io_descriptor+0x1a>
    6ee4:	683b      	ldr	r3, [r7, #0]
    6ee6:	2b00      	cmp	r3, #0
    6ee8:	d001      	beq.n	6eee <spi_m_sync_get_io_descriptor+0x1a>
    6eea:	2301      	movs	r3, #1
    6eec:	e000      	b.n	6ef0 <spi_m_sync_get_io_descriptor+0x1c>
    6eee:	2300      	movs	r3, #0
    6ef0:	f003 0301 	and.w	r3, r3, #1
    6ef4:	b2db      	uxtb	r3, r3
    6ef6:	22bd      	movs	r2, #189	; 0xbd
    6ef8:	4906      	ldr	r1, [pc, #24]	; (6f14 <spi_m_sync_get_io_descriptor+0x40>)
    6efa:	4618      	mov	r0, r3
    6efc:	4b06      	ldr	r3, [pc, #24]	; (6f18 <spi_m_sync_get_io_descriptor+0x44>)
    6efe:	4798      	blx	r3
	*io = &spi->io;
    6f00:	687b      	ldr	r3, [r7, #4]
    6f02:	f103 020c 	add.w	r2, r3, #12
    6f06:	683b      	ldr	r3, [r7, #0]
    6f08:	601a      	str	r2, [r3, #0]
	return 0;
    6f0a:	2300      	movs	r3, #0
}
    6f0c:	4618      	mov	r0, r3
    6f0e:	3708      	adds	r7, #8
    6f10:	46bd      	mov	sp, r7
    6f12:	bd80      	pop	{r7, pc}
    6f14:	00020238 	.word	0x00020238
    6f18:	00007d5d 	.word	0x00007d5d

00006f1c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    6f1c:	b480      	push	{r7}
    6f1e:	b083      	sub	sp, #12
    6f20:	af00      	add	r7, sp, #0
    6f22:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    6f24:	687b      	ldr	r3, [r7, #4]
    6f26:	681b      	ldr	r3, [r3, #0]
}
    6f28:	4618      	mov	r0, r3
    6f2a:	370c      	adds	r7, #12
    6f2c:	46bd      	mov	sp, r7
    6f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f32:	4770      	bx	lr

00006f34 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    6f34:	b480      	push	{r7}
    6f36:	b083      	sub	sp, #12
    6f38:	af00      	add	r7, sp, #0
    6f3a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    6f3c:	687b      	ldr	r3, [r7, #4]
    6f3e:	2b00      	cmp	r3, #0
    6f40:	d002      	beq.n	6f48 <list_get_next_element+0x14>
    6f42:	687b      	ldr	r3, [r7, #4]
    6f44:	681b      	ldr	r3, [r3, #0]
    6f46:	e000      	b.n	6f4a <list_get_next_element+0x16>
    6f48:	2300      	movs	r3, #0
}
    6f4a:	4618      	mov	r0, r3
    6f4c:	370c      	adds	r7, #12
    6f4e:	46bd      	mov	sp, r7
    6f50:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f54:	4770      	bx	lr
	...

00006f58 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    6f58:	b580      	push	{r7, lr}
    6f5a:	b084      	sub	sp, #16
    6f5c:	af00      	add	r7, sp, #0
    6f5e:	60f8      	str	r0, [r7, #12]
    6f60:	60b9      	str	r1, [r7, #8]
    6f62:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    6f64:	68fb      	ldr	r3, [r7, #12]
    6f66:	2b00      	cmp	r3, #0
    6f68:	d007      	beq.n	6f7a <timer_init+0x22>
    6f6a:	68bb      	ldr	r3, [r7, #8]
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	d004      	beq.n	6f7a <timer_init+0x22>
    6f70:	687b      	ldr	r3, [r7, #4]
    6f72:	2b00      	cmp	r3, #0
    6f74:	d001      	beq.n	6f7a <timer_init+0x22>
    6f76:	2301      	movs	r3, #1
    6f78:	e000      	b.n	6f7c <timer_init+0x24>
    6f7a:	2300      	movs	r3, #0
    6f7c:	f003 0301 	and.w	r3, r3, #1
    6f80:	b2db      	uxtb	r3, r3
    6f82:	223b      	movs	r2, #59	; 0x3b
    6f84:	490c      	ldr	r1, [pc, #48]	; (6fb8 <timer_init+0x60>)
    6f86:	4618      	mov	r0, r3
    6f88:	4b0c      	ldr	r3, [pc, #48]	; (6fbc <timer_init+0x64>)
    6f8a:	4798      	blx	r3
	descr->func = func;
    6f8c:	68fb      	ldr	r3, [r7, #12]
    6f8e:	687a      	ldr	r2, [r7, #4]
    6f90:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    6f92:	68fb      	ldr	r3, [r7, #12]
    6f94:	681b      	ldr	r3, [r3, #0]
    6f96:	681b      	ldr	r3, [r3, #0]
    6f98:	68fa      	ldr	r2, [r7, #12]
    6f9a:	3204      	adds	r2, #4
    6f9c:	68b9      	ldr	r1, [r7, #8]
    6f9e:	4610      	mov	r0, r2
    6fa0:	4798      	blx	r3
	descr->time                           = 0;
    6fa2:	68fb      	ldr	r3, [r7, #12]
    6fa4:	2200      	movs	r2, #0
    6fa6:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    6fa8:	68fb      	ldr	r3, [r7, #12]
    6faa:	4a05      	ldr	r2, [pc, #20]	; (6fc0 <timer_init+0x68>)
    6fac:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    6fae:	2300      	movs	r3, #0
}
    6fb0:	4618      	mov	r0, r3
    6fb2:	3710      	adds	r7, #16
    6fb4:	46bd      	mov	sp, r7
    6fb6:	bd80      	pop	{r7, pc}
    6fb8:	00020254 	.word	0x00020254
    6fbc:	00007d5d 	.word	0x00007d5d
    6fc0:	00007349 	.word	0x00007349

00006fc4 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    6fc4:	b580      	push	{r7, lr}
    6fc6:	b082      	sub	sp, #8
    6fc8:	af00      	add	r7, sp, #0
    6fca:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    6fcc:	687b      	ldr	r3, [r7, #4]
    6fce:	2b00      	cmp	r3, #0
    6fd0:	d005      	beq.n	6fde <timer_start+0x1a>
    6fd2:	687b      	ldr	r3, [r7, #4]
    6fd4:	681b      	ldr	r3, [r3, #0]
    6fd6:	2b00      	cmp	r3, #0
    6fd8:	d001      	beq.n	6fde <timer_start+0x1a>
    6fda:	2301      	movs	r3, #1
    6fdc:	e000      	b.n	6fe0 <timer_start+0x1c>
    6fde:	2300      	movs	r3, #0
    6fe0:	f003 0301 	and.w	r3, r3, #1
    6fe4:	b2db      	uxtb	r3, r3
    6fe6:	2254      	movs	r2, #84	; 0x54
    6fe8:	490e      	ldr	r1, [pc, #56]	; (7024 <timer_start+0x60>)
    6fea:	4618      	mov	r0, r3
    6fec:	4b0e      	ldr	r3, [pc, #56]	; (7028 <timer_start+0x64>)
    6fee:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    6ff0:	687b      	ldr	r3, [r7, #4]
    6ff2:	681b      	ldr	r3, [r3, #0]
    6ff4:	699b      	ldr	r3, [r3, #24]
    6ff6:	687a      	ldr	r2, [r7, #4]
    6ff8:	3204      	adds	r2, #4
    6ffa:	4610      	mov	r0, r2
    6ffc:	4798      	blx	r3
    6ffe:	4603      	mov	r3, r0
    7000:	2b00      	cmp	r3, #0
    7002:	d002      	beq.n	700a <timer_start+0x46>
		return ERR_DENIED;
    7004:	f06f 0310 	mvn.w	r3, #16
    7008:	e007      	b.n	701a <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    700a:	687b      	ldr	r3, [r7, #4]
    700c:	681b      	ldr	r3, [r3, #0]
    700e:	689b      	ldr	r3, [r3, #8]
    7010:	687a      	ldr	r2, [r7, #4]
    7012:	3204      	adds	r2, #4
    7014:	4610      	mov	r0, r2
    7016:	4798      	blx	r3

	return ERR_NONE;
    7018:	2300      	movs	r3, #0
}
    701a:	4618      	mov	r0, r3
    701c:	3708      	adds	r7, #8
    701e:	46bd      	mov	sp, r7
    7020:	bd80      	pop	{r7, pc}
    7022:	bf00      	nop
    7024:	00020254 	.word	0x00020254
    7028:	00007d5d 	.word	0x00007d5d

0000702c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    702c:	b580      	push	{r7, lr}
    702e:	b082      	sub	sp, #8
    7030:	af00      	add	r7, sp, #0
    7032:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    7034:	687b      	ldr	r3, [r7, #4]
    7036:	2b00      	cmp	r3, #0
    7038:	d005      	beq.n	7046 <timer_stop+0x1a>
    703a:	687b      	ldr	r3, [r7, #4]
    703c:	681b      	ldr	r3, [r3, #0]
    703e:	2b00      	cmp	r3, #0
    7040:	d001      	beq.n	7046 <timer_stop+0x1a>
    7042:	2301      	movs	r3, #1
    7044:	e000      	b.n	7048 <timer_stop+0x1c>
    7046:	2300      	movs	r3, #0
    7048:	f003 0301 	and.w	r3, r3, #1
    704c:	b2db      	uxtb	r3, r3
    704e:	2262      	movs	r2, #98	; 0x62
    7050:	490f      	ldr	r1, [pc, #60]	; (7090 <timer_stop+0x64>)
    7052:	4618      	mov	r0, r3
    7054:	4b0f      	ldr	r3, [pc, #60]	; (7094 <timer_stop+0x68>)
    7056:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    7058:	687b      	ldr	r3, [r7, #4]
    705a:	681b      	ldr	r3, [r3, #0]
    705c:	699b      	ldr	r3, [r3, #24]
    705e:	687a      	ldr	r2, [r7, #4]
    7060:	3204      	adds	r2, #4
    7062:	4610      	mov	r0, r2
    7064:	4798      	blx	r3
    7066:	4603      	mov	r3, r0
    7068:	f083 0301 	eor.w	r3, r3, #1
    706c:	b2db      	uxtb	r3, r3
    706e:	2b00      	cmp	r3, #0
    7070:	d002      	beq.n	7078 <timer_stop+0x4c>
		return ERR_DENIED;
    7072:	f06f 0310 	mvn.w	r3, #16
    7076:	e007      	b.n	7088 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    7078:	687b      	ldr	r3, [r7, #4]
    707a:	681b      	ldr	r3, [r3, #0]
    707c:	68db      	ldr	r3, [r3, #12]
    707e:	687a      	ldr	r2, [r7, #4]
    7080:	3204      	adds	r2, #4
    7082:	4610      	mov	r0, r2
    7084:	4798      	blx	r3

	return ERR_NONE;
    7086:	2300      	movs	r3, #0
}
    7088:	4618      	mov	r0, r3
    708a:	3708      	adds	r7, #8
    708c:	46bd      	mov	sp, r7
    708e:	bd80      	pop	{r7, pc}
    7090:	00020254 	.word	0x00020254
    7094:	00007d5d 	.word	0x00007d5d

00007098 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    7098:	b580      	push	{r7, lr}
    709a:	b084      	sub	sp, #16
    709c:	af00      	add	r7, sp, #0
    709e:	6078      	str	r0, [r7, #4]
    70a0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    70a2:	687b      	ldr	r3, [r7, #4]
    70a4:	2b00      	cmp	r3, #0
    70a6:	d008      	beq.n	70ba <timer_add_task+0x22>
    70a8:	683b      	ldr	r3, [r7, #0]
    70aa:	2b00      	cmp	r3, #0
    70ac:	d005      	beq.n	70ba <timer_add_task+0x22>
    70ae:	687b      	ldr	r3, [r7, #4]
    70b0:	681b      	ldr	r3, [r3, #0]
    70b2:	2b00      	cmp	r3, #0
    70b4:	d001      	beq.n	70ba <timer_add_task+0x22>
    70b6:	2301      	movs	r3, #1
    70b8:	e000      	b.n	70bc <timer_add_task+0x24>
    70ba:	2300      	movs	r3, #0
    70bc:	f003 0301 	and.w	r3, r3, #1
    70c0:	b2db      	uxtb	r3, r3
    70c2:	227b      	movs	r2, #123	; 0x7b
    70c4:	492f      	ldr	r1, [pc, #188]	; (7184 <timer_add_task+0xec>)
    70c6:	4618      	mov	r0, r3
    70c8:	4b2f      	ldr	r3, [pc, #188]	; (7188 <timer_add_task+0xf0>)
    70ca:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    70cc:	687b      	ldr	r3, [r7, #4]
    70ce:	7f1b      	ldrb	r3, [r3, #28]
    70d0:	b2db      	uxtb	r3, r3
    70d2:	f043 0301 	orr.w	r3, r3, #1
    70d6:	b2da      	uxtb	r2, r3
    70d8:	687b      	ldr	r3, [r7, #4]
    70da:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    70dc:	687b      	ldr	r3, [r7, #4]
    70de:	3318      	adds	r3, #24
    70e0:	6839      	ldr	r1, [r7, #0]
    70e2:	4618      	mov	r0, r3
    70e4:	4b29      	ldr	r3, [pc, #164]	; (718c <timer_add_task+0xf4>)
    70e6:	4798      	blx	r3
    70e8:	4603      	mov	r3, r0
    70ea:	2b00      	cmp	r3, #0
    70ec:	d00f      	beq.n	710e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    70ee:	687b      	ldr	r3, [r7, #4]
    70f0:	7f1b      	ldrb	r3, [r3, #28]
    70f2:	b2db      	uxtb	r3, r3
    70f4:	f023 0301 	bic.w	r3, r3, #1
    70f8:	b2da      	uxtb	r2, r3
    70fa:	687b      	ldr	r3, [r7, #4]
    70fc:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    70fe:	2280      	movs	r2, #128	; 0x80
    7100:	4920      	ldr	r1, [pc, #128]	; (7184 <timer_add_task+0xec>)
    7102:	2000      	movs	r0, #0
    7104:	4b20      	ldr	r3, [pc, #128]	; (7188 <timer_add_task+0xf0>)
    7106:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    7108:	f06f 0311 	mvn.w	r3, #17
    710c:	e035      	b.n	717a <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    710e:	687b      	ldr	r3, [r7, #4]
    7110:	695a      	ldr	r2, [r3, #20]
    7112:	683b      	ldr	r3, [r7, #0]
    7114:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    7116:	687b      	ldr	r3, [r7, #4]
    7118:	f103 0018 	add.w	r0, r3, #24
    711c:	687b      	ldr	r3, [r7, #4]
    711e:	695b      	ldr	r3, [r3, #20]
    7120:	461a      	mov	r2, r3
    7122:	6839      	ldr	r1, [r7, #0]
    7124:	4b1a      	ldr	r3, [pc, #104]	; (7190 <timer_add_task+0xf8>)
    7126:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    7128:	687b      	ldr	r3, [r7, #4]
    712a:	7f1b      	ldrb	r3, [r3, #28]
    712c:	b2db      	uxtb	r3, r3
    712e:	f023 0301 	bic.w	r3, r3, #1
    7132:	b2da      	uxtb	r2, r3
    7134:	687b      	ldr	r3, [r7, #4]
    7136:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    7138:	687b      	ldr	r3, [r7, #4]
    713a:	7f1b      	ldrb	r3, [r3, #28]
    713c:	b2db      	uxtb	r3, r3
    713e:	f003 0302 	and.w	r3, r3, #2
    7142:	2b00      	cmp	r3, #0
    7144:	d018      	beq.n	7178 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    7146:	f107 030c 	add.w	r3, r7, #12
    714a:	4618      	mov	r0, r3
    714c:	4b11      	ldr	r3, [pc, #68]	; (7194 <timer_add_task+0xfc>)
    714e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    7150:	687b      	ldr	r3, [r7, #4]
    7152:	7f1b      	ldrb	r3, [r3, #28]
    7154:	b2db      	uxtb	r3, r3
    7156:	f023 0302 	bic.w	r3, r3, #2
    715a:	b2da      	uxtb	r2, r3
    715c:	687b      	ldr	r3, [r7, #4]
    715e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    7160:	687b      	ldr	r3, [r7, #4]
    7162:	681b      	ldr	r3, [r3, #0]
    7164:	69db      	ldr	r3, [r3, #28]
    7166:	687a      	ldr	r2, [r7, #4]
    7168:	3204      	adds	r2, #4
    716a:	4610      	mov	r0, r2
    716c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    716e:	f107 030c 	add.w	r3, r7, #12
    7172:	4618      	mov	r0, r3
    7174:	4b08      	ldr	r3, [pc, #32]	; (7198 <timer_add_task+0x100>)
    7176:	4798      	blx	r3
	}

	return ERR_NONE;
    7178:	2300      	movs	r3, #0
}
    717a:	4618      	mov	r0, r3
    717c:	3710      	adds	r7, #16
    717e:	46bd      	mov	sp, r7
    7180:	bd80      	pop	{r7, pc}
    7182:	bf00      	nop
    7184:	00020254 	.word	0x00020254
    7188:	00007d5d 	.word	0x00007d5d
    718c:	00007d85 	.word	0x00007d85
    7190:	00007299 	.word	0x00007299
    7194:	00010cad 	.word	0x00010cad
    7198:	00010cd3 	.word	0x00010cd3

0000719c <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    719c:	b580      	push	{r7, lr}
    719e:	b084      	sub	sp, #16
    71a0:	af00      	add	r7, sp, #0
    71a2:	6078      	str	r0, [r7, #4]
    71a4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    71a6:	687b      	ldr	r3, [r7, #4]
    71a8:	2b00      	cmp	r3, #0
    71aa:	d008      	beq.n	71be <timer_remove_task+0x22>
    71ac:	683b      	ldr	r3, [r7, #0]
    71ae:	2b00      	cmp	r3, #0
    71b0:	d005      	beq.n	71be <timer_remove_task+0x22>
    71b2:	687b      	ldr	r3, [r7, #4]
    71b4:	681b      	ldr	r3, [r3, #0]
    71b6:	2b00      	cmp	r3, #0
    71b8:	d001      	beq.n	71be <timer_remove_task+0x22>
    71ba:	2301      	movs	r3, #1
    71bc:	e000      	b.n	71c0 <timer_remove_task+0x24>
    71be:	2300      	movs	r3, #0
    71c0:	f003 0301 	and.w	r3, r3, #1
    71c4:	b2db      	uxtb	r3, r3
    71c6:	2296      	movs	r2, #150	; 0x96
    71c8:	492d      	ldr	r1, [pc, #180]	; (7280 <timer_remove_task+0xe4>)
    71ca:	4618      	mov	r0, r3
    71cc:	4b2d      	ldr	r3, [pc, #180]	; (7284 <timer_remove_task+0xe8>)
    71ce:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    71d0:	687b      	ldr	r3, [r7, #4]
    71d2:	7f1b      	ldrb	r3, [r3, #28]
    71d4:	b2db      	uxtb	r3, r3
    71d6:	f043 0301 	orr.w	r3, r3, #1
    71da:	b2da      	uxtb	r2, r3
    71dc:	687b      	ldr	r3, [r7, #4]
    71de:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    71e0:	687b      	ldr	r3, [r7, #4]
    71e2:	3318      	adds	r3, #24
    71e4:	6839      	ldr	r1, [r7, #0]
    71e6:	4618      	mov	r0, r3
    71e8:	4b27      	ldr	r3, [pc, #156]	; (7288 <timer_remove_task+0xec>)
    71ea:	4798      	blx	r3
    71ec:	4603      	mov	r3, r0
    71ee:	f083 0301 	eor.w	r3, r3, #1
    71f2:	b2db      	uxtb	r3, r3
    71f4:	2b00      	cmp	r3, #0
    71f6:	d00f      	beq.n	7218 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    71f8:	687b      	ldr	r3, [r7, #4]
    71fa:	7f1b      	ldrb	r3, [r3, #28]
    71fc:	b2db      	uxtb	r3, r3
    71fe:	f023 0301 	bic.w	r3, r3, #1
    7202:	b2da      	uxtb	r2, r3
    7204:	687b      	ldr	r3, [r7, #4]
    7206:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    7208:	229b      	movs	r2, #155	; 0x9b
    720a:	491d      	ldr	r1, [pc, #116]	; (7280 <timer_remove_task+0xe4>)
    720c:	2000      	movs	r0, #0
    720e:	4b1d      	ldr	r3, [pc, #116]	; (7284 <timer_remove_task+0xe8>)
    7210:	4798      	blx	r3
		return ERR_NOT_FOUND;
    7212:	f06f 0309 	mvn.w	r3, #9
    7216:	e02e      	b.n	7276 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    7218:	687b      	ldr	r3, [r7, #4]
    721a:	3318      	adds	r3, #24
    721c:	6839      	ldr	r1, [r7, #0]
    721e:	4618      	mov	r0, r3
    7220:	4b1a      	ldr	r3, [pc, #104]	; (728c <timer_remove_task+0xf0>)
    7222:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    7224:	687b      	ldr	r3, [r7, #4]
    7226:	7f1b      	ldrb	r3, [r3, #28]
    7228:	b2db      	uxtb	r3, r3
    722a:	f023 0301 	bic.w	r3, r3, #1
    722e:	b2da      	uxtb	r2, r3
    7230:	687b      	ldr	r3, [r7, #4]
    7232:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    7234:	687b      	ldr	r3, [r7, #4]
    7236:	7f1b      	ldrb	r3, [r3, #28]
    7238:	b2db      	uxtb	r3, r3
    723a:	f003 0302 	and.w	r3, r3, #2
    723e:	2b00      	cmp	r3, #0
    7240:	d018      	beq.n	7274 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    7242:	f107 030c 	add.w	r3, r7, #12
    7246:	4618      	mov	r0, r3
    7248:	4b11      	ldr	r3, [pc, #68]	; (7290 <timer_remove_task+0xf4>)
    724a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    724c:	687b      	ldr	r3, [r7, #4]
    724e:	7f1b      	ldrb	r3, [r3, #28]
    7250:	b2db      	uxtb	r3, r3
    7252:	f023 0302 	bic.w	r3, r3, #2
    7256:	b2da      	uxtb	r2, r3
    7258:	687b      	ldr	r3, [r7, #4]
    725a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    725c:	687b      	ldr	r3, [r7, #4]
    725e:	681b      	ldr	r3, [r3, #0]
    7260:	69db      	ldr	r3, [r3, #28]
    7262:	687a      	ldr	r2, [r7, #4]
    7264:	3204      	adds	r2, #4
    7266:	4610      	mov	r0, r2
    7268:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    726a:	f107 030c 	add.w	r3, r7, #12
    726e:	4618      	mov	r0, r3
    7270:	4b08      	ldr	r3, [pc, #32]	; (7294 <timer_remove_task+0xf8>)
    7272:	4798      	blx	r3
	}

	return ERR_NONE;
    7274:	2300      	movs	r3, #0
}
    7276:	4618      	mov	r0, r3
    7278:	3710      	adds	r7, #16
    727a:	46bd      	mov	sp, r7
    727c:	bd80      	pop	{r7, pc}
    727e:	bf00      	nop
    7280:	00020254 	.word	0x00020254
    7284:	00007d5d 	.word	0x00007d5d
    7288:	00007d85 	.word	0x00007d85
    728c:	00007ee7 	.word	0x00007ee7
    7290:	00010cad 	.word	0x00010cad
    7294:	00010cd3 	.word	0x00010cd3

00007298 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    7298:	b580      	push	{r7, lr}
    729a:	b088      	sub	sp, #32
    729c:	af00      	add	r7, sp, #0
    729e:	60f8      	str	r0, [r7, #12]
    72a0:	60b9      	str	r1, [r7, #8]
    72a2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    72a4:	2300      	movs	r3, #0
    72a6:	61bb      	str	r3, [r7, #24]
    72a8:	68f8      	ldr	r0, [r7, #12]
    72aa:	4b23      	ldr	r3, [pc, #140]	; (7338 <timer_add_timer_task+0xa0>)
    72ac:	4798      	blx	r3
    72ae:	6138      	str	r0, [r7, #16]

	if (!head) {
    72b0:	693b      	ldr	r3, [r7, #16]
    72b2:	2b00      	cmp	r3, #0
    72b4:	d104      	bne.n	72c0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    72b6:	68b9      	ldr	r1, [r7, #8]
    72b8:	68f8      	ldr	r0, [r7, #12]
    72ba:	4b20      	ldr	r3, [pc, #128]	; (733c <timer_add_timer_task+0xa4>)
    72bc:	4798      	blx	r3
		return;
    72be:	e037      	b.n	7330 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    72c0:	693b      	ldr	r3, [r7, #16]
    72c2:	61fb      	str	r3, [r7, #28]
    72c4:	e022      	b.n	730c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    72c6:	69fb      	ldr	r3, [r7, #28]
    72c8:	685a      	ldr	r2, [r3, #4]
    72ca:	687b      	ldr	r3, [r7, #4]
    72cc:	429a      	cmp	r2, r3
    72ce:	d808      	bhi.n	72e2 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    72d0:	69fb      	ldr	r3, [r7, #28]
    72d2:	689a      	ldr	r2, [r3, #8]
    72d4:	69fb      	ldr	r3, [r7, #28]
    72d6:	6859      	ldr	r1, [r3, #4]
    72d8:	687b      	ldr	r3, [r7, #4]
    72da:	1acb      	subs	r3, r1, r3
    72dc:	4413      	add	r3, r2
    72de:	617b      	str	r3, [r7, #20]
    72e0:	e009      	b.n	72f6 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    72e2:	69fb      	ldr	r3, [r7, #28]
    72e4:	689a      	ldr	r2, [r3, #8]
    72e6:	69fb      	ldr	r3, [r7, #28]
    72e8:	685b      	ldr	r3, [r3, #4]
    72ea:	441a      	add	r2, r3
    72ec:	687b      	ldr	r3, [r7, #4]
    72ee:	425b      	negs	r3, r3
    72f0:	4413      	add	r3, r2
    72f2:	3301      	adds	r3, #1
    72f4:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    72f6:	68bb      	ldr	r3, [r7, #8]
    72f8:	689a      	ldr	r2, [r3, #8]
    72fa:	697b      	ldr	r3, [r7, #20]
    72fc:	429a      	cmp	r2, r3
    72fe:	d909      	bls.n	7314 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    7300:	69fb      	ldr	r3, [r7, #28]
    7302:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    7304:	69f8      	ldr	r0, [r7, #28]
    7306:	4b0e      	ldr	r3, [pc, #56]	; (7340 <timer_add_timer_task+0xa8>)
    7308:	4798      	blx	r3
    730a:	61f8      	str	r0, [r7, #28]
    730c:	69fb      	ldr	r3, [r7, #28]
    730e:	2b00      	cmp	r3, #0
    7310:	d1d9      	bne.n	72c6 <timer_add_timer_task+0x2e>
    7312:	e000      	b.n	7316 <timer_add_timer_task+0x7e>
			break;
    7314:	bf00      	nop
	}

	if (it == head) {
    7316:	69fa      	ldr	r2, [r7, #28]
    7318:	693b      	ldr	r3, [r7, #16]
    731a:	429a      	cmp	r2, r3
    731c:	d104      	bne.n	7328 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    731e:	68b9      	ldr	r1, [r7, #8]
    7320:	68f8      	ldr	r0, [r7, #12]
    7322:	4b06      	ldr	r3, [pc, #24]	; (733c <timer_add_timer_task+0xa4>)
    7324:	4798      	blx	r3
    7326:	e003      	b.n	7330 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    7328:	68b9      	ldr	r1, [r7, #8]
    732a:	69b8      	ldr	r0, [r7, #24]
    732c:	4b05      	ldr	r3, [pc, #20]	; (7344 <timer_add_timer_task+0xac>)
    732e:	4798      	blx	r3
	}
}
    7330:	3720      	adds	r7, #32
    7332:	46bd      	mov	sp, r7
    7334:	bd80      	pop	{r7, pc}
    7336:	bf00      	nop
    7338:	00006f1d 	.word	0x00006f1d
    733c:	00007dbd 	.word	0x00007dbd
    7340:	00006f35 	.word	0x00006f35
    7344:	00007e15 	.word	0x00007e15

00007348 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    7348:	b580      	push	{r7, lr}
    734a:	b086      	sub	sp, #24
    734c:	af00      	add	r7, sp, #0
    734e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    7350:	687b      	ldr	r3, [r7, #4]
    7352:	3b04      	subs	r3, #4
    7354:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    7356:	693b      	ldr	r3, [r7, #16]
    7358:	3318      	adds	r3, #24
    735a:	4618      	mov	r0, r3
    735c:	4b27      	ldr	r3, [pc, #156]	; (73fc <timer_process_counted+0xb4>)
    735e:	4798      	blx	r3
    7360:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    7362:	693b      	ldr	r3, [r7, #16]
    7364:	695b      	ldr	r3, [r3, #20]
    7366:	1c5a      	adds	r2, r3, #1
    7368:	693b      	ldr	r3, [r7, #16]
    736a:	615a      	str	r2, [r3, #20]
    736c:	693b      	ldr	r3, [r7, #16]
    736e:	695b      	ldr	r3, [r3, #20]
    7370:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    7372:	693b      	ldr	r3, [r7, #16]
    7374:	7f1b      	ldrb	r3, [r3, #28]
    7376:	b2db      	uxtb	r3, r3
    7378:	f003 0301 	and.w	r3, r3, #1
    737c:	2b00      	cmp	r3, #0
    737e:	d106      	bne.n	738e <timer_process_counted+0x46>
    7380:	693b      	ldr	r3, [r7, #16]
    7382:	7f1b      	ldrb	r3, [r3, #28]
    7384:	b2db      	uxtb	r3, r3
    7386:	f003 0302 	and.w	r3, r3, #2
    738a:	2b00      	cmp	r3, #0
    738c:	d027      	beq.n	73de <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    738e:	693b      	ldr	r3, [r7, #16]
    7390:	7f1b      	ldrb	r3, [r3, #28]
    7392:	b2db      	uxtb	r3, r3
    7394:	f043 0302 	orr.w	r3, r3, #2
    7398:	b2da      	uxtb	r2, r3
    739a:	693b      	ldr	r3, [r7, #16]
    739c:	771a      	strb	r2, [r3, #28]
		return;
    739e:	e029      	b.n	73f4 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    73a0:	697b      	ldr	r3, [r7, #20]
    73a2:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    73a4:	693b      	ldr	r3, [r7, #16]
    73a6:	3318      	adds	r3, #24
    73a8:	4618      	mov	r0, r3
    73aa:	4b15      	ldr	r3, [pc, #84]	; (7400 <timer_process_counted+0xb8>)
    73ac:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    73ae:	68bb      	ldr	r3, [r7, #8]
    73b0:	7c1b      	ldrb	r3, [r3, #16]
    73b2:	2b01      	cmp	r3, #1
    73b4:	d109      	bne.n	73ca <timer_process_counted+0x82>
			tmp->time_label = time;
    73b6:	68bb      	ldr	r3, [r7, #8]
    73b8:	68fa      	ldr	r2, [r7, #12]
    73ba:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    73bc:	693b      	ldr	r3, [r7, #16]
    73be:	3318      	adds	r3, #24
    73c0:	68fa      	ldr	r2, [r7, #12]
    73c2:	68b9      	ldr	r1, [r7, #8]
    73c4:	4618      	mov	r0, r3
    73c6:	4b0f      	ldr	r3, [pc, #60]	; (7404 <timer_process_counted+0xbc>)
    73c8:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    73ca:	693b      	ldr	r3, [r7, #16]
    73cc:	3318      	adds	r3, #24
    73ce:	4618      	mov	r0, r3
    73d0:	4b0a      	ldr	r3, [pc, #40]	; (73fc <timer_process_counted+0xb4>)
    73d2:	4798      	blx	r3
    73d4:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    73d6:	68bb      	ldr	r3, [r7, #8]
    73d8:	68db      	ldr	r3, [r3, #12]
    73da:	68b8      	ldr	r0, [r7, #8]
    73dc:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    73de:	697b      	ldr	r3, [r7, #20]
    73e0:	2b00      	cmp	r3, #0
    73e2:	d007      	beq.n	73f4 <timer_process_counted+0xac>
    73e4:	697b      	ldr	r3, [r7, #20]
    73e6:	685b      	ldr	r3, [r3, #4]
    73e8:	68fa      	ldr	r2, [r7, #12]
    73ea:	1ad2      	subs	r2, r2, r3
    73ec:	697b      	ldr	r3, [r7, #20]
    73ee:	689b      	ldr	r3, [r3, #8]
    73f0:	429a      	cmp	r2, r3
    73f2:	d2d5      	bcs.n	73a0 <timer_process_counted+0x58>
	}
}
    73f4:	3718      	adds	r7, #24
    73f6:	46bd      	mov	sp, r7
    73f8:	bd80      	pop	{r7, pc}
    73fa:	bf00      	nop
    73fc:	00006f1d 	.word	0x00006f1d
    7400:	00007eb5 	.word	0x00007eb5
    7404:	00007299 	.word	0x00007299

00007408 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    7408:	b480      	push	{r7}
    740a:	b085      	sub	sp, #20
    740c:	af00      	add	r7, sp, #0
    740e:	4603      	mov	r3, r0
    7410:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7412:	2300      	movs	r3, #0
    7414:	73fb      	strb	r3, [r7, #15]
    7416:	e029      	b.n	746c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    7418:	f997 300f 	ldrsb.w	r3, [r7, #15]
    741c:	4a19      	ldr	r2, [pc, #100]	; (7484 <_usb_d_find_ep+0x7c>)
    741e:	015b      	lsls	r3, r3, #5
    7420:	4413      	add	r3, r2
    7422:	3301      	adds	r3, #1
    7424:	781b      	ldrb	r3, [r3, #0]
    7426:	79fa      	ldrb	r2, [r7, #7]
    7428:	429a      	cmp	r2, r3
    742a:	d102      	bne.n	7432 <_usb_d_find_ep+0x2a>
			return i;
    742c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7430:	e022      	b.n	7478 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    7432:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7436:	4a13      	ldr	r2, [pc, #76]	; (7484 <_usb_d_find_ep+0x7c>)
    7438:	015b      	lsls	r3, r3, #5
    743a:	4413      	add	r3, r2
    743c:	781b      	ldrb	r3, [r3, #0]
    743e:	2b00      	cmp	r3, #0
    7440:	d10e      	bne.n	7460 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    7442:	79fb      	ldrb	r3, [r7, #7]
    7444:	f003 030f 	and.w	r3, r3, #15
    7448:	f997 200f 	ldrsb.w	r2, [r7, #15]
    744c:	490d      	ldr	r1, [pc, #52]	; (7484 <_usb_d_find_ep+0x7c>)
    744e:	0152      	lsls	r2, r2, #5
    7450:	440a      	add	r2, r1
    7452:	3201      	adds	r2, #1
    7454:	7812      	ldrb	r2, [r2, #0]
    7456:	4293      	cmp	r3, r2
    7458:	d102      	bne.n	7460 <_usb_d_find_ep+0x58>
			return i;
    745a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    745e:	e00b      	b.n	7478 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7460:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7464:	b2db      	uxtb	r3, r3
    7466:	3301      	adds	r3, #1
    7468:	b2db      	uxtb	r3, r3
    746a:	73fb      	strb	r3, [r7, #15]
    746c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7470:	2b03      	cmp	r3, #3
    7472:	ddd1      	ble.n	7418 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    7474:	f04f 33ff 	mov.w	r3, #4294967295
}
    7478:	4618      	mov	r0, r3
    747a:	3714      	adds	r7, #20
    747c:	46bd      	mov	sp, r7
    747e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7482:	4770      	bx	lr
    7484:	20008968 	.word	0x20008968

00007488 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    7488:	b580      	push	{r7, lr}
    748a:	b088      	sub	sp, #32
    748c:	af00      	add	r7, sp, #0
    748e:	60ba      	str	r2, [r7, #8]
    7490:	607b      	str	r3, [r7, #4]
    7492:	4603      	mov	r3, r0
    7494:	73fb      	strb	r3, [r7, #15]
    7496:	460b      	mov	r3, r1
    7498:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    749a:	68bb      	ldr	r3, [r7, #8]
    749c:	617b      	str	r3, [r7, #20]
    749e:	687b      	ldr	r3, [r7, #4]
    74a0:	61bb      	str	r3, [r7, #24]
    74a2:	7bbb      	ldrb	r3, [r7, #14]
    74a4:	2b00      	cmp	r3, #0
    74a6:	d004      	beq.n	74b2 <_usb_d_trans+0x2a>
    74a8:	7bfb      	ldrb	r3, [r7, #15]
    74aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    74ae:	b2db      	uxtb	r3, r3
    74b0:	e003      	b.n	74ba <_usb_d_trans+0x32>
    74b2:	7bfb      	ldrb	r3, [r7, #15]
    74b4:	f003 030f 	and.w	r3, r3, #15
    74b8:	b2db      	uxtb	r3, r3
    74ba:	773b      	strb	r3, [r7, #28]
    74bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    74c0:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    74c2:	f107 0314 	add.w	r3, r7, #20
    74c6:	4618      	mov	r0, r3
    74c8:	4b03      	ldr	r3, [pc, #12]	; (74d8 <_usb_d_trans+0x50>)
    74ca:	4798      	blx	r3
    74cc:	4603      	mov	r3, r0
}
    74ce:	4618      	mov	r0, r3
    74d0:	3720      	adds	r7, #32
    74d2:	46bd      	mov	sp, r7
    74d4:	bd80      	pop	{r7, pc}
    74d6:	bf00      	nop
    74d8:	000102e1 	.word	0x000102e1

000074dc <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    74dc:	b480      	push	{r7}
    74de:	b085      	sub	sp, #20
    74e0:	af00      	add	r7, sp, #0
    74e2:	60f8      	str	r0, [r7, #12]
    74e4:	60b9      	str	r1, [r7, #8]
    74e6:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    74e8:	2300      	movs	r3, #0
}
    74ea:	4618      	mov	r0, r3
    74ec:	3714      	adds	r7, #20
    74ee:	46bd      	mov	sp, r7
    74f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    74f4:	4770      	bx	lr
	...

000074f8 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    74f8:	b580      	push	{r7, lr}
    74fa:	b086      	sub	sp, #24
    74fc:	af00      	add	r7, sp, #0
    74fe:	4603      	mov	r3, r0
    7500:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7502:	79fb      	ldrb	r3, [r7, #7]
    7504:	4618      	mov	r0, r3
    7506:	4b2a      	ldr	r3, [pc, #168]	; (75b0 <usb_d_cb_trans_setup+0xb8>)
    7508:	4798      	blx	r3
    750a:	4603      	mov	r3, r0
    750c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    750e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7512:	015b      	lsls	r3, r3, #5
    7514:	4a27      	ldr	r2, [pc, #156]	; (75b4 <usb_d_cb_trans_setup+0xbc>)
    7516:	4413      	add	r3, r2
    7518:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    751a:	693b      	ldr	r3, [r7, #16]
    751c:	330c      	adds	r3, #12
    751e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    7520:	79fb      	ldrb	r3, [r7, #7]
    7522:	68f9      	ldr	r1, [r7, #12]
    7524:	4618      	mov	r0, r3
    7526:	4b24      	ldr	r3, [pc, #144]	; (75b8 <usb_d_cb_trans_setup+0xc0>)
    7528:	4798      	blx	r3
    752a:	4603      	mov	r3, r0
    752c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    752e:	7afb      	ldrb	r3, [r7, #11]
    7530:	2b08      	cmp	r3, #8
    7532:	d00d      	beq.n	7550 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    7534:	79fb      	ldrb	r3, [r7, #7]
    7536:	2101      	movs	r1, #1
    7538:	4618      	mov	r0, r3
    753a:	4b20      	ldr	r3, [pc, #128]	; (75bc <usb_d_cb_trans_setup+0xc4>)
    753c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    753e:	79fb      	ldrb	r3, [r7, #7]
    7540:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7544:	b2db      	uxtb	r3, r3
    7546:	2101      	movs	r1, #1
    7548:	4618      	mov	r0, r3
    754a:	4b1c      	ldr	r3, [pc, #112]	; (75bc <usb_d_cb_trans_setup+0xc4>)
    754c:	4798      	blx	r3
		return;
    754e:	e02b      	b.n	75a8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7550:	79fb      	ldrb	r3, [r7, #7]
    7552:	2100      	movs	r1, #0
    7554:	4618      	mov	r0, r3
    7556:	4b19      	ldr	r3, [pc, #100]	; (75bc <usb_d_cb_trans_setup+0xc4>)
    7558:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    755a:	79fb      	ldrb	r3, [r7, #7]
    755c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7560:	b2db      	uxtb	r3, r3
    7562:	2100      	movs	r1, #0
    7564:	4618      	mov	r0, r3
    7566:	4b15      	ldr	r3, [pc, #84]	; (75bc <usb_d_cb_trans_setup+0xc4>)
    7568:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    756a:	693b      	ldr	r3, [r7, #16]
    756c:	2201      	movs	r2, #1
    756e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    7570:	693b      	ldr	r3, [r7, #16]
    7572:	695b      	ldr	r3, [r3, #20]
    7574:	79fa      	ldrb	r2, [r7, #7]
    7576:	68f9      	ldr	r1, [r7, #12]
    7578:	4610      	mov	r0, r2
    757a:	4798      	blx	r3
    757c:	4603      	mov	r3, r0
    757e:	f083 0301 	eor.w	r3, r3, #1
    7582:	b2db      	uxtb	r3, r3
    7584:	2b00      	cmp	r3, #0
    7586:	d00f      	beq.n	75a8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    7588:	693b      	ldr	r3, [r7, #16]
    758a:	2205      	movs	r2, #5
    758c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    758e:	79fb      	ldrb	r3, [r7, #7]
    7590:	2101      	movs	r1, #1
    7592:	4618      	mov	r0, r3
    7594:	4b09      	ldr	r3, [pc, #36]	; (75bc <usb_d_cb_trans_setup+0xc4>)
    7596:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    7598:	79fb      	ldrb	r3, [r7, #7]
    759a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    759e:	b2db      	uxtb	r3, r3
    75a0:	2101      	movs	r1, #1
    75a2:	4618      	mov	r0, r3
    75a4:	4b05      	ldr	r3, [pc, #20]	; (75bc <usb_d_cb_trans_setup+0xc4>)
    75a6:	4798      	blx	r3
	}
}
    75a8:	3718      	adds	r7, #24
    75aa:	46bd      	mov	sp, r7
    75ac:	bd80      	pop	{r7, pc}
    75ae:	bf00      	nop
    75b0:	00007409 	.word	0x00007409
    75b4:	20008968 	.word	0x20008968
    75b8:	00010239 	.word	0x00010239
    75bc:	000100b1 	.word	0x000100b1

000075c0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    75c0:	b580      	push	{r7, lr}
    75c2:	b084      	sub	sp, #16
    75c4:	af00      	add	r7, sp, #0
    75c6:	4603      	mov	r3, r0
    75c8:	6039      	str	r1, [r7, #0]
    75ca:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    75cc:	79fb      	ldrb	r3, [r7, #7]
    75ce:	4618      	mov	r0, r3
    75d0:	4b0d      	ldr	r3, [pc, #52]	; (7608 <usb_d_cb_trans_more+0x48>)
    75d2:	4798      	blx	r3
    75d4:	4603      	mov	r3, r0
    75d6:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    75d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    75dc:	015b      	lsls	r3, r3, #5
    75de:	4a0b      	ldr	r2, [pc, #44]	; (760c <usb_d_cb_trans_more+0x4c>)
    75e0:	4413      	add	r3, r2
    75e2:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    75e4:	68bb      	ldr	r3, [r7, #8]
    75e6:	789b      	ldrb	r3, [r3, #2]
    75e8:	2b03      	cmp	r3, #3
    75ea:	d107      	bne.n	75fc <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    75ec:	68bb      	ldr	r3, [r7, #8]
    75ee:	699b      	ldr	r3, [r3, #24]
    75f0:	79fa      	ldrb	r2, [r7, #7]
    75f2:	6839      	ldr	r1, [r7, #0]
    75f4:	4610      	mov	r0, r2
    75f6:	4798      	blx	r3
    75f8:	4603      	mov	r3, r0
    75fa:	e000      	b.n	75fe <usb_d_cb_trans_more+0x3e>
	}
	return false;
    75fc:	2300      	movs	r3, #0
}
    75fe:	4618      	mov	r0, r3
    7600:	3710      	adds	r7, #16
    7602:	46bd      	mov	sp, r7
    7604:	bd80      	pop	{r7, pc}
    7606:	bf00      	nop
    7608:	00007409 	.word	0x00007409
    760c:	20008968 	.word	0x20008968

00007610 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    7610:	b590      	push	{r4, r7, lr}
    7612:	b087      	sub	sp, #28
    7614:	af02      	add	r7, sp, #8
    7616:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    7618:	687b      	ldr	r3, [r7, #4]
    761a:	789b      	ldrb	r3, [r3, #2]
    761c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    761e:	687b      	ldr	r3, [r7, #4]
    7620:	7b1b      	ldrb	r3, [r3, #12]
    7622:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7626:	2b00      	cmp	r3, #0
    7628:	bf14      	ite	ne
    762a:	2301      	movne	r3, #1
    762c:	2300      	moveq	r3, #0
    762e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    7630:	7bfb      	ldrb	r3, [r7, #15]
    7632:	2b03      	cmp	r3, #3
    7634:	d13a      	bne.n	76ac <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    7636:	687b      	ldr	r3, [r7, #4]
    7638:	69db      	ldr	r3, [r3, #28]
    763a:	687a      	ldr	r2, [r7, #4]
    763c:	7850      	ldrb	r0, [r2, #1]
    763e:	687a      	ldr	r2, [r7, #4]
    7640:	320c      	adds	r2, #12
    7642:	2101      	movs	r1, #1
    7644:	4798      	blx	r3
    7646:	4603      	mov	r3, r0
    7648:	737b      	strb	r3, [r7, #13]
		if (err) {
    764a:	7b7b      	ldrb	r3, [r7, #13]
    764c:	2b00      	cmp	r3, #0
    764e:	d015      	beq.n	767c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    7650:	687b      	ldr	r3, [r7, #4]
    7652:	2205      	movs	r2, #5
    7654:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    7656:	687b      	ldr	r3, [r7, #4]
    7658:	2202      	movs	r2, #2
    765a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    765c:	7bbb      	ldrb	r3, [r7, #14]
    765e:	2b00      	cmp	r3, #0
    7660:	d002      	beq.n	7668 <usb_d_ctrl_trans_done+0x58>
    7662:	687b      	ldr	r3, [r7, #4]
    7664:	785b      	ldrb	r3, [r3, #1]
    7666:	e004      	b.n	7672 <usb_d_ctrl_trans_done+0x62>
    7668:	687b      	ldr	r3, [r7, #4]
    766a:	785b      	ldrb	r3, [r3, #1]
    766c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7670:	b2db      	uxtb	r3, r3
    7672:	2101      	movs	r1, #1
    7674:	4618      	mov	r0, r3
    7676:	4b15      	ldr	r3, [pc, #84]	; (76cc <usb_d_ctrl_trans_done+0xbc>)
    7678:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    767a:	e022      	b.n	76c2 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    767c:	687b      	ldr	r3, [r7, #4]
    767e:	2204      	movs	r2, #4
    7680:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    7682:	687b      	ldr	r3, [r7, #4]
    7684:	7858      	ldrb	r0, [r3, #1]
    7686:	7bbb      	ldrb	r3, [r7, #14]
    7688:	2b00      	cmp	r3, #0
    768a:	bf14      	ite	ne
    768c:	2301      	movne	r3, #1
    768e:	2300      	moveq	r3, #0
    7690:	b2db      	uxtb	r3, r3
    7692:	f083 0301 	eor.w	r3, r3, #1
    7696:	b2db      	uxtb	r3, r3
    7698:	f003 0301 	and.w	r3, r3, #1
    769c:	b2d9      	uxtb	r1, r3
    769e:	2301      	movs	r3, #1
    76a0:	9300      	str	r3, [sp, #0]
    76a2:	2300      	movs	r3, #0
    76a4:	2200      	movs	r2, #0
    76a6:	4c0a      	ldr	r4, [pc, #40]	; (76d0 <usb_d_ctrl_trans_done+0xc0>)
    76a8:	47a0      	blx	r4
}
    76aa:	e00a      	b.n	76c2 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    76ac:	687b      	ldr	r3, [r7, #4]
    76ae:	69db      	ldr	r3, [r3, #28]
    76b0:	687a      	ldr	r2, [r7, #4]
    76b2:	7850      	ldrb	r0, [r2, #1]
    76b4:	687a      	ldr	r2, [r7, #4]
    76b6:	320c      	adds	r2, #12
    76b8:	2100      	movs	r1, #0
    76ba:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    76bc:	687b      	ldr	r3, [r7, #4]
    76be:	2202      	movs	r2, #2
    76c0:	709a      	strb	r2, [r3, #2]
}
    76c2:	bf00      	nop
    76c4:	3714      	adds	r7, #20
    76c6:	46bd      	mov	sp, r7
    76c8:	bd90      	pop	{r4, r7, pc}
    76ca:	bf00      	nop
    76cc:	000100b1 	.word	0x000100b1
    76d0:	00007489 	.word	0x00007489

000076d4 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    76d4:	b580      	push	{r7, lr}
    76d6:	b086      	sub	sp, #24
    76d8:	af00      	add	r7, sp, #0
    76da:	4603      	mov	r3, r0
    76dc:	60b9      	str	r1, [r7, #8]
    76de:	607a      	str	r2, [r7, #4]
    76e0:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    76e2:	7bfb      	ldrb	r3, [r7, #15]
    76e4:	4618      	mov	r0, r3
    76e6:	4b2f      	ldr	r3, [pc, #188]	; (77a4 <_usb_d_cb_trans_done+0xd0>)
    76e8:	4798      	blx	r3
    76ea:	4603      	mov	r3, r0
    76ec:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    76ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
    76f2:	015b      	lsls	r3, r3, #5
    76f4:	4a2c      	ldr	r2, [pc, #176]	; (77a8 <_usb_d_cb_trans_done+0xd4>)
    76f6:	4413      	add	r3, r2
    76f8:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    76fa:	68bb      	ldr	r3, [r7, #8]
    76fc:	2b00      	cmp	r3, #0
    76fe:	d10e      	bne.n	771e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    7700:	693b      	ldr	r3, [r7, #16]
    7702:	2200      	movs	r2, #0
    7704:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7706:	693b      	ldr	r3, [r7, #16]
    7708:	781b      	ldrb	r3, [r3, #0]
    770a:	2b00      	cmp	r3, #0
    770c:	d103      	bne.n	7716 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    770e:	6938      	ldr	r0, [r7, #16]
    7710:	4b26      	ldr	r3, [pc, #152]	; (77ac <_usb_d_cb_trans_done+0xd8>)
    7712:	4798      	blx	r3
			return;
    7714:	e043      	b.n	779e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    7716:	693b      	ldr	r3, [r7, #16]
    7718:	2201      	movs	r2, #1
    771a:	709a      	strb	r2, [r3, #2]
    771c:	e038      	b.n	7790 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    771e:	68bb      	ldr	r3, [r7, #8]
    7720:	2b01      	cmp	r3, #1
    7722:	d113      	bne.n	774c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    7724:	693b      	ldr	r3, [r7, #16]
    7726:	2202      	movs	r2, #2
    7728:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    772a:	693b      	ldr	r3, [r7, #16]
    772c:	781b      	ldrb	r3, [r3, #0]
    772e:	2b00      	cmp	r3, #0
    7730:	d108      	bne.n	7744 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    7732:	693b      	ldr	r3, [r7, #16]
    7734:	2202      	movs	r2, #2
    7736:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7738:	7bfb      	ldrb	r3, [r7, #15]
    773a:	2100      	movs	r1, #0
    773c:	4618      	mov	r0, r3
    773e:	4b1c      	ldr	r3, [pc, #112]	; (77b0 <_usb_d_cb_trans_done+0xdc>)
    7740:	4798      	blx	r3
    7742:	e025      	b.n	7790 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    7744:	693b      	ldr	r3, [r7, #16]
    7746:	2205      	movs	r2, #5
    7748:	709a      	strb	r2, [r3, #2]
    774a:	e021      	b.n	7790 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    774c:	68bb      	ldr	r3, [r7, #8]
    774e:	2b02      	cmp	r3, #2
    7750:	d10e      	bne.n	7770 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    7752:	693b      	ldr	r3, [r7, #16]
    7754:	2204      	movs	r2, #4
    7756:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7758:	693b      	ldr	r3, [r7, #16]
    775a:	781b      	ldrb	r3, [r3, #0]
    775c:	2b00      	cmp	r3, #0
    775e:	d103      	bne.n	7768 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    7760:	693b      	ldr	r3, [r7, #16]
    7762:	2202      	movs	r2, #2
    7764:	709a      	strb	r2, [r3, #2]
			return;
    7766:	e01a      	b.n	779e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    7768:	693b      	ldr	r3, [r7, #16]
    776a:	2201      	movs	r2, #1
    776c:	709a      	strb	r2, [r3, #2]
    776e:	e00f      	b.n	7790 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    7770:	68bb      	ldr	r3, [r7, #8]
    7772:	2b03      	cmp	r3, #3
    7774:	d106      	bne.n	7784 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    7776:	693b      	ldr	r3, [r7, #16]
    7778:	2200      	movs	r2, #0
    777a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    777c:	693b      	ldr	r3, [r7, #16]
    777e:	2205      	movs	r2, #5
    7780:	70da      	strb	r2, [r3, #3]
    7782:	e005      	b.n	7790 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    7784:	693b      	ldr	r3, [r7, #16]
    7786:	2206      	movs	r2, #6
    7788:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    778a:	693b      	ldr	r3, [r7, #16]
    778c:	2206      	movs	r2, #6
    778e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    7790:	693b      	ldr	r3, [r7, #16]
    7792:	69db      	ldr	r3, [r3, #28]
    7794:	693a      	ldr	r2, [r7, #16]
    7796:	78d1      	ldrb	r1, [r2, #3]
    7798:	687a      	ldr	r2, [r7, #4]
    779a:	7bf8      	ldrb	r0, [r7, #15]
    779c:	4798      	blx	r3
}
    779e:	3718      	adds	r7, #24
    77a0:	46bd      	mov	sp, r7
    77a2:	bd80      	pop	{r7, pc}
    77a4:	00007409 	.word	0x00007409
    77a8:	20008968 	.word	0x20008968
    77ac:	00007611 	.word	0x00007611
    77b0:	000100b1 	.word	0x000100b1

000077b4 <usb_d_init>:

int32_t usb_d_init(void)
{
    77b4:	b580      	push	{r7, lr}
    77b6:	b082      	sub	sp, #8
    77b8:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    77ba:	4b21      	ldr	r3, [pc, #132]	; (7840 <usb_d_init+0x8c>)
    77bc:	4798      	blx	r3
    77be:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    77c0:	683b      	ldr	r3, [r7, #0]
    77c2:	2b00      	cmp	r3, #0
    77c4:	da01      	bge.n	77ca <usb_d_init+0x16>
		return rc;
    77c6:	683b      	ldr	r3, [r7, #0]
    77c8:	e036      	b.n	7838 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    77ca:	2280      	movs	r2, #128	; 0x80
    77cc:	2100      	movs	r1, #0
    77ce:	481d      	ldr	r0, [pc, #116]	; (7844 <usb_d_init+0x90>)
    77d0:	4b1d      	ldr	r3, [pc, #116]	; (7848 <usb_d_init+0x94>)
    77d2:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    77d4:	2300      	movs	r3, #0
    77d6:	71fb      	strb	r3, [r7, #7]
    77d8:	e01e      	b.n	7818 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    77da:	79fb      	ldrb	r3, [r7, #7]
    77dc:	4a19      	ldr	r2, [pc, #100]	; (7844 <usb_d_init+0x90>)
    77de:	015b      	lsls	r3, r3, #5
    77e0:	4413      	add	r3, r2
    77e2:	3301      	adds	r3, #1
    77e4:	22ff      	movs	r2, #255	; 0xff
    77e6:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    77e8:	79fb      	ldrb	r3, [r7, #7]
    77ea:	4a16      	ldr	r2, [pc, #88]	; (7844 <usb_d_init+0x90>)
    77ec:	015b      	lsls	r3, r3, #5
    77ee:	4413      	add	r3, r2
    77f0:	3314      	adds	r3, #20
    77f2:	4a16      	ldr	r2, [pc, #88]	; (784c <usb_d_init+0x98>)
    77f4:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    77f6:	79fb      	ldrb	r3, [r7, #7]
    77f8:	4a12      	ldr	r2, [pc, #72]	; (7844 <usb_d_init+0x90>)
    77fa:	015b      	lsls	r3, r3, #5
    77fc:	4413      	add	r3, r2
    77fe:	3318      	adds	r3, #24
    7800:	4a12      	ldr	r2, [pc, #72]	; (784c <usb_d_init+0x98>)
    7802:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    7804:	79fb      	ldrb	r3, [r7, #7]
    7806:	4a0f      	ldr	r2, [pc, #60]	; (7844 <usb_d_init+0x90>)
    7808:	015b      	lsls	r3, r3, #5
    780a:	4413      	add	r3, r2
    780c:	331c      	adds	r3, #28
    780e:	4a0f      	ldr	r2, [pc, #60]	; (784c <usb_d_init+0x98>)
    7810:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7812:	79fb      	ldrb	r3, [r7, #7]
    7814:	3301      	adds	r3, #1
    7816:	71fb      	strb	r3, [r7, #7]
    7818:	79fb      	ldrb	r3, [r7, #7]
    781a:	2b03      	cmp	r3, #3
    781c:	d9dd      	bls.n	77da <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    781e:	490c      	ldr	r1, [pc, #48]	; (7850 <usb_d_init+0x9c>)
    7820:	2000      	movs	r0, #0
    7822:	4b0c      	ldr	r3, [pc, #48]	; (7854 <usb_d_init+0xa0>)
    7824:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    7826:	490c      	ldr	r1, [pc, #48]	; (7858 <usb_d_init+0xa4>)
    7828:	2001      	movs	r0, #1
    782a:	4b0a      	ldr	r3, [pc, #40]	; (7854 <usb_d_init+0xa0>)
    782c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    782e:	490b      	ldr	r1, [pc, #44]	; (785c <usb_d_init+0xa8>)
    7830:	2002      	movs	r0, #2
    7832:	4b08      	ldr	r3, [pc, #32]	; (7854 <usb_d_init+0xa0>)
    7834:	4798      	blx	r3
	return ERR_NONE;
    7836:	2300      	movs	r3, #0
}
    7838:	4618      	mov	r0, r3
    783a:	3708      	adds	r7, #8
    783c:	46bd      	mov	sp, r7
    783e:	bd80      	pop	{r7, pc}
    7840:	0000f8f9 	.word	0x0000f8f9
    7844:	20008968 	.word	0x20008968
    7848:	0001bd39 	.word	0x0001bd39
    784c:	000074dd 	.word	0x000074dd
    7850:	000074f9 	.word	0x000074f9
    7854:	00010541 	.word	0x00010541
    7858:	000075c1 	.word	0x000075c1
    785c:	000076d5 	.word	0x000076d5

00007860 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    7860:	b580      	push	{r7, lr}
    7862:	b082      	sub	sp, #8
    7864:	af00      	add	r7, sp, #0
    7866:	4603      	mov	r3, r0
    7868:	6039      	str	r1, [r7, #0]
    786a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    786c:	79fb      	ldrb	r3, [r7, #7]
    786e:	6839      	ldr	r1, [r7, #0]
    7870:	4618      	mov	r0, r3
    7872:	4b03      	ldr	r3, [pc, #12]	; (7880 <usb_d_register_callback+0x20>)
    7874:	4798      	blx	r3
}
    7876:	bf00      	nop
    7878:	3708      	adds	r7, #8
    787a:	46bd      	mov	sp, r7
    787c:	bd80      	pop	{r7, pc}
    787e:	bf00      	nop
    7880:	000104f9 	.word	0x000104f9

00007884 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    7884:	b580      	push	{r7, lr}
    7886:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    7888:	4b02      	ldr	r3, [pc, #8]	; (7894 <usb_d_enable+0x10>)
    788a:	4798      	blx	r3
    788c:	4603      	mov	r3, r0
}
    788e:	4618      	mov	r0, r3
    7890:	bd80      	pop	{r7, pc}
    7892:	bf00      	nop
    7894:	0000f9e9 	.word	0x0000f9e9

00007898 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    7898:	b580      	push	{r7, lr}
    789a:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    789c:	4b01      	ldr	r3, [pc, #4]	; (78a4 <usb_d_attach+0xc>)
    789e:	4798      	blx	r3
}
    78a0:	bf00      	nop
    78a2:	bd80      	pop	{r7, pc}
    78a4:	0000fa6d 	.word	0x0000fa6d

000078a8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    78a8:	b580      	push	{r7, lr}
    78aa:	b082      	sub	sp, #8
    78ac:	af00      	add	r7, sp, #0
    78ae:	4603      	mov	r3, r0
    78b0:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    78b2:	79fb      	ldrb	r3, [r7, #7]
    78b4:	4618      	mov	r0, r3
    78b6:	4b03      	ldr	r3, [pc, #12]	; (78c4 <usb_d_set_address+0x1c>)
    78b8:	4798      	blx	r3
}
    78ba:	bf00      	nop
    78bc:	3708      	adds	r7, #8
    78be:	46bd      	mov	sp, r7
    78c0:	bd80      	pop	{r7, pc}
    78c2:	bf00      	nop
    78c4:	0000fa81 	.word	0x0000fa81

000078c8 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    78c8:	b580      	push	{r7, lr}
    78ca:	b082      	sub	sp, #8
    78cc:	af00      	add	r7, sp, #0
    78ce:	4603      	mov	r3, r0
    78d0:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    78d2:	79fb      	ldrb	r3, [r7, #7]
    78d4:	b29b      	uxth	r3, r3
    78d6:	461a      	mov	r2, r3
    78d8:	2100      	movs	r1, #0
    78da:	2000      	movs	r0, #0
    78dc:	4b03      	ldr	r3, [pc, #12]	; (78ec <usb_d_ep0_init+0x24>)
    78de:	4798      	blx	r3
    78e0:	4603      	mov	r3, r0
}
    78e2:	4618      	mov	r0, r3
    78e4:	3708      	adds	r7, #8
    78e6:	46bd      	mov	sp, r7
    78e8:	bd80      	pop	{r7, pc}
    78ea:	bf00      	nop
    78ec:	000078f1 	.word	0x000078f1

000078f0 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    78f0:	b580      	push	{r7, lr}
    78f2:	b086      	sub	sp, #24
    78f4:	af00      	add	r7, sp, #0
    78f6:	4603      	mov	r3, r0
    78f8:	71fb      	strb	r3, [r7, #7]
    78fa:	460b      	mov	r3, r1
    78fc:	71bb      	strb	r3, [r7, #6]
    78fe:	4613      	mov	r3, r2
    7900:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    7902:	79fb      	ldrb	r3, [r7, #7]
    7904:	4618      	mov	r0, r3
    7906:	4b1e      	ldr	r3, [pc, #120]	; (7980 <usb_d_ep_init+0x90>)
    7908:	4798      	blx	r3
    790a:	4603      	mov	r3, r0
    790c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    790e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7912:	015b      	lsls	r3, r3, #5
    7914:	4a1b      	ldr	r2, [pc, #108]	; (7984 <usb_d_ep_init+0x94>)
    7916:	4413      	add	r3, r2
    7918:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    791a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    791e:	2b00      	cmp	r3, #0
    7920:	db02      	blt.n	7928 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    7922:	f06f 0313 	mvn.w	r3, #19
    7926:	e027      	b.n	7978 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    7928:	20ff      	movs	r0, #255	; 0xff
    792a:	4b15      	ldr	r3, [pc, #84]	; (7980 <usb_d_ep_init+0x90>)
    792c:	4798      	blx	r3
    792e:	4603      	mov	r3, r0
    7930:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    7932:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7936:	2b00      	cmp	r3, #0
    7938:	da02      	bge.n	7940 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    793a:	f06f 0314 	mvn.w	r3, #20
    793e:	e01b      	b.n	7978 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    7940:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7944:	015b      	lsls	r3, r3, #5
    7946:	4a0f      	ldr	r2, [pc, #60]	; (7984 <usb_d_ep_init+0x94>)
    7948:	4413      	add	r3, r2
    794a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    794c:	88ba      	ldrh	r2, [r7, #4]
    794e:	79b9      	ldrb	r1, [r7, #6]
    7950:	79fb      	ldrb	r3, [r7, #7]
    7952:	4618      	mov	r0, r3
    7954:	4b0c      	ldr	r3, [pc, #48]	; (7988 <usb_d_ep_init+0x98>)
    7956:	4798      	blx	r3
    7958:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    795a:	68fb      	ldr	r3, [r7, #12]
    795c:	2b00      	cmp	r3, #0
    795e:	da01      	bge.n	7964 <usb_d_ep_init+0x74>
		return rc;
    7960:	68fb      	ldr	r3, [r7, #12]
    7962:	e009      	b.n	7978 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    7964:	693b      	ldr	r3, [r7, #16]
    7966:	79fa      	ldrb	r2, [r7, #7]
    7968:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    796a:	79bb      	ldrb	r3, [r7, #6]
    796c:	f003 0303 	and.w	r3, r3, #3
    7970:	b2da      	uxtb	r2, r3
    7972:	693b      	ldr	r3, [r7, #16]
    7974:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    7976:	2300      	movs	r3, #0
}
    7978:	4618      	mov	r0, r3
    797a:	3718      	adds	r7, #24
    797c:	46bd      	mov	sp, r7
    797e:	bd80      	pop	{r7, pc}
    7980:	00007409 	.word	0x00007409
    7984:	20008968 	.word	0x20008968
    7988:	0000fb21 	.word	0x0000fb21

0000798c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    798c:	b580      	push	{r7, lr}
    798e:	b084      	sub	sp, #16
    7990:	af00      	add	r7, sp, #0
    7992:	4603      	mov	r3, r0
    7994:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7996:	79fb      	ldrb	r3, [r7, #7]
    7998:	4618      	mov	r0, r3
    799a:	4b0d      	ldr	r3, [pc, #52]	; (79d0 <usb_d_ep_deinit+0x44>)
    799c:	4798      	blx	r3
    799e:	4603      	mov	r3, r0
    79a0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    79a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    79a6:	015b      	lsls	r3, r3, #5
    79a8:	4a0a      	ldr	r2, [pc, #40]	; (79d4 <usb_d_ep_deinit+0x48>)
    79aa:	4413      	add	r3, r2
    79ac:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    79ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    79b2:	2b00      	cmp	r3, #0
    79b4:	db07      	blt.n	79c6 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    79b6:	79fb      	ldrb	r3, [r7, #7]
    79b8:	4618      	mov	r0, r3
    79ba:	4b07      	ldr	r3, [pc, #28]	; (79d8 <usb_d_ep_deinit+0x4c>)
    79bc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    79be:	68bb      	ldr	r3, [r7, #8]
    79c0:	22ff      	movs	r2, #255	; 0xff
    79c2:	705a      	strb	r2, [r3, #1]
    79c4:	e000      	b.n	79c8 <usb_d_ep_deinit+0x3c>
		return;
    79c6:	bf00      	nop
}
    79c8:	3710      	adds	r7, #16
    79ca:	46bd      	mov	sp, r7
    79cc:	bd80      	pop	{r7, pc}
    79ce:	bf00      	nop
    79d0:	00007409 	.word	0x00007409
    79d4:	20008968 	.word	0x20008968
    79d8:	0000fc55 	.word	0x0000fc55

000079dc <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    79dc:	b580      	push	{r7, lr}
    79de:	b086      	sub	sp, #24
    79e0:	af00      	add	r7, sp, #0
    79e2:	4603      	mov	r3, r0
    79e4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    79e6:	79fb      	ldrb	r3, [r7, #7]
    79e8:	4618      	mov	r0, r3
    79ea:	4b15      	ldr	r3, [pc, #84]	; (7a40 <usb_d_ep_enable+0x64>)
    79ec:	4798      	blx	r3
    79ee:	4603      	mov	r3, r0
    79f0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    79f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    79f6:	015b      	lsls	r3, r3, #5
    79f8:	4a12      	ldr	r2, [pc, #72]	; (7a44 <usb_d_ep_enable+0x68>)
    79fa:	4413      	add	r3, r2
    79fc:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    79fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7a02:	2b00      	cmp	r3, #0
    7a04:	da02      	bge.n	7a0c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    7a06:	f06f 0311 	mvn.w	r3, #17
    7a0a:	e014      	b.n	7a36 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    7a0c:	693b      	ldr	r3, [r7, #16]
    7a0e:	781b      	ldrb	r3, [r3, #0]
    7a10:	2b00      	cmp	r3, #0
    7a12:	d101      	bne.n	7a18 <usb_d_ep_enable+0x3c>
    7a14:	2202      	movs	r2, #2
    7a16:	e000      	b.n	7a1a <usb_d_ep_enable+0x3e>
    7a18:	2201      	movs	r2, #1
    7a1a:	693b      	ldr	r3, [r7, #16]
    7a1c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    7a1e:	79fb      	ldrb	r3, [r7, #7]
    7a20:	4618      	mov	r0, r3
    7a22:	4b09      	ldr	r3, [pc, #36]	; (7a48 <usb_d_ep_enable+0x6c>)
    7a24:	4798      	blx	r3
    7a26:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    7a28:	68fb      	ldr	r3, [r7, #12]
    7a2a:	2b00      	cmp	r3, #0
    7a2c:	da02      	bge.n	7a34 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    7a2e:	693b      	ldr	r3, [r7, #16]
    7a30:	2200      	movs	r2, #0
    7a32:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    7a34:	68fb      	ldr	r3, [r7, #12]
}
    7a36:	4618      	mov	r0, r3
    7a38:	3718      	adds	r7, #24
    7a3a:	46bd      	mov	sp, r7
    7a3c:	bd80      	pop	{r7, pc}
    7a3e:	bf00      	nop
    7a40:	00007409 	.word	0x00007409
    7a44:	20008968 	.word	0x20008968
    7a48:	0000fd39 	.word	0x0000fd39

00007a4c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    7a4c:	b590      	push	{r4, r7, lr}
    7a4e:	b08d      	sub	sp, #52	; 0x34
    7a50:	af02      	add	r7, sp, #8
    7a52:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    7a54:	687b      	ldr	r3, [r7, #4]
    7a56:	7a1b      	ldrb	r3, [r3, #8]
    7a58:	4618      	mov	r0, r3
    7a5a:	4b51      	ldr	r3, [pc, #324]	; (7ba0 <usb_d_ep_transfer+0x154>)
    7a5c:	4798      	blx	r3
    7a5e:	4603      	mov	r3, r0
    7a60:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    7a62:	f997 301f 	ldrsb.w	r3, [r7, #31]
    7a66:	015b      	lsls	r3, r3, #5
    7a68:	4a4e      	ldr	r2, [pc, #312]	; (7ba4 <usb_d_ep_transfer+0x158>)
    7a6a:	4413      	add	r3, r2
    7a6c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    7a6e:	687b      	ldr	r3, [r7, #4]
    7a70:	7a1b      	ldrb	r3, [r3, #8]
    7a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7a76:	2b00      	cmp	r3, #0
    7a78:	bf14      	ite	ne
    7a7a:	2301      	movne	r3, #1
    7a7c:	2300      	moveq	r3, #0
    7a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    7a82:	687b      	ldr	r3, [r7, #4]
    7a84:	7a5b      	ldrb	r3, [r3, #9]
    7a86:	2b00      	cmp	r3, #0
    7a88:	bf14      	ite	ne
    7a8a:	2301      	movne	r3, #1
    7a8c:	2300      	moveq	r3, #0
    7a8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    7a92:	687b      	ldr	r3, [r7, #4]
    7a94:	685b      	ldr	r3, [r3, #4]
    7a96:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    7a98:	f997 301f 	ldrsb.w	r3, [r7, #31]
    7a9c:	2b00      	cmp	r3, #0
    7a9e:	da02      	bge.n	7aa6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    7aa0:	f06f 0311 	mvn.w	r3, #17
    7aa4:	e077      	b.n	7b96 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    7aa6:	f107 0308 	add.w	r3, r7, #8
    7aaa:	4618      	mov	r0, r3
    7aac:	4b3e      	ldr	r3, [pc, #248]	; (7ba8 <usb_d_ep_transfer+0x15c>)
    7aae:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    7ab0:	69bb      	ldr	r3, [r7, #24]
    7ab2:	789b      	ldrb	r3, [r3, #2]
    7ab4:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    7ab6:	7bfb      	ldrb	r3, [r7, #15]
    7ab8:	b2db      	uxtb	r3, r3
    7aba:	2b01      	cmp	r3, #1
    7abc:	d10c      	bne.n	7ad8 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    7abe:	69bb      	ldr	r3, [r7, #24]
    7ac0:	2203      	movs	r2, #3
    7ac2:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    7ac4:	f107 0308 	add.w	r3, r7, #8
    7ac8:	4618      	mov	r0, r3
    7aca:	4b38      	ldr	r3, [pc, #224]	; (7bac <usb_d_ep_transfer+0x160>)
    7acc:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7ace:	69bb      	ldr	r3, [r7, #24]
    7ad0:	781b      	ldrb	r3, [r3, #0]
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	d151      	bne.n	7b7a <usb_d_ep_transfer+0x12e>
    7ad6:	e017      	b.n	7b08 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    7ad8:	f107 0308 	add.w	r3, r7, #8
    7adc:	4618      	mov	r0, r3
    7ade:	4b33      	ldr	r3, [pc, #204]	; (7bac <usb_d_ep_transfer+0x160>)
    7ae0:	4798      	blx	r3
		switch (state) {
    7ae2:	7bfb      	ldrb	r3, [r7, #15]
    7ae4:	b2db      	uxtb	r3, r3
    7ae6:	2b05      	cmp	r3, #5
    7ae8:	d004      	beq.n	7af4 <usb_d_ep_transfer+0xa8>
    7aea:	2b06      	cmp	r3, #6
    7aec:	d004      	beq.n	7af8 <usb_d_ep_transfer+0xac>
    7aee:	2b00      	cmp	r3, #0
    7af0:	d005      	beq.n	7afe <usb_d_ep_transfer+0xb2>
    7af2:	e007      	b.n	7b04 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    7af4:	2302      	movs	r3, #2
    7af6:	e04e      	b.n	7b96 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    7af8:	f06f 030f 	mvn.w	r3, #15
    7afc:	e04b      	b.n	7b96 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    7afe:	f06f 0312 	mvn.w	r3, #18
    7b02:	e048      	b.n	7b96 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    7b04:	2301      	movs	r3, #1
    7b06:	e046      	b.n	7b96 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    7b08:	69bb      	ldr	r3, [r7, #24]
    7b0a:	7c9b      	ldrb	r3, [r3, #18]
    7b0c:	b29a      	uxth	r2, r3
    7b0e:	69bb      	ldr	r3, [r7, #24]
    7b10:	7cdb      	ldrb	r3, [r3, #19]
    7b12:	b29b      	uxth	r3, r3
    7b14:	021b      	lsls	r3, r3, #8
    7b16:	b29b      	uxth	r3, r3
    7b18:	4413      	add	r3, r2
    7b1a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    7b1c:	8afb      	ldrh	r3, [r7, #22]
    7b1e:	2b00      	cmp	r3, #0
    7b20:	d10b      	bne.n	7b3a <usb_d_ep_transfer+0xee>
			dir                 = true;
    7b22:	2301      	movs	r3, #1
    7b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    7b28:	2300      	movs	r3, #0
    7b2a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    7b2c:	2301      	movs	r3, #1
    7b2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    7b32:	69bb      	ldr	r3, [r7, #24]
    7b34:	2204      	movs	r2, #4
    7b36:	709a      	strb	r2, [r3, #2]
    7b38:	e01f      	b.n	7b7a <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    7b3a:	69bb      	ldr	r3, [r7, #24]
    7b3c:	7b1b      	ldrb	r3, [r3, #12]
    7b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7b42:	2b00      	cmp	r3, #0
    7b44:	bf14      	ite	ne
    7b46:	2301      	movne	r3, #1
    7b48:	2300      	moveq	r3, #0
    7b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    7b4e:	8afa      	ldrh	r2, [r7, #22]
    7b50:	6a3b      	ldr	r3, [r7, #32]
    7b52:	429a      	cmp	r2, r3
    7b54:	d201      	bcs.n	7b5a <usb_d_ep_transfer+0x10e>
				len = req_len;
    7b56:	8afb      	ldrh	r3, [r7, #22]
    7b58:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    7b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    7b5e:	2b00      	cmp	r3, #0
    7b60:	d008      	beq.n	7b74 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    7b62:	8afa      	ldrh	r2, [r7, #22]
    7b64:	6a3b      	ldr	r3, [r7, #32]
    7b66:	429a      	cmp	r2, r3
    7b68:	bf8c      	ite	hi
    7b6a:	2301      	movhi	r3, #1
    7b6c:	2300      	movls	r3, #0
    7b6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    7b72:	e002      	b.n	7b7a <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    7b74:	2300      	movs	r3, #0
    7b76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    7b7a:	687b      	ldr	r3, [r7, #4]
    7b7c:	7a18      	ldrb	r0, [r3, #8]
    7b7e:	687b      	ldr	r3, [r7, #4]
    7b80:	681a      	ldr	r2, [r3, #0]
    7b82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    7b86:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    7b8a:	9300      	str	r3, [sp, #0]
    7b8c:	6a3b      	ldr	r3, [r7, #32]
    7b8e:	4c08      	ldr	r4, [pc, #32]	; (7bb0 <usb_d_ep_transfer+0x164>)
    7b90:	47a0      	blx	r4
    7b92:	6138      	str	r0, [r7, #16]
	return rc;
    7b94:	693b      	ldr	r3, [r7, #16]
}
    7b96:	4618      	mov	r0, r3
    7b98:	372c      	adds	r7, #44	; 0x2c
    7b9a:	46bd      	mov	sp, r7
    7b9c:	bd90      	pop	{r4, r7, pc}
    7b9e:	bf00      	nop
    7ba0:	00007409 	.word	0x00007409
    7ba4:	20008968 	.word	0x20008968
    7ba8:	00010cad 	.word	0x00010cad
    7bac:	00010cd3 	.word	0x00010cd3
    7bb0:	00007489 	.word	0x00007489

00007bb4 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    7bb4:	b580      	push	{r7, lr}
    7bb6:	b084      	sub	sp, #16
    7bb8:	af00      	add	r7, sp, #0
    7bba:	4603      	mov	r3, r0
    7bbc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7bbe:	79fb      	ldrb	r3, [r7, #7]
    7bc0:	4618      	mov	r0, r3
    7bc2:	4b0e      	ldr	r3, [pc, #56]	; (7bfc <usb_d_ep_abort+0x48>)
    7bc4:	4798      	blx	r3
    7bc6:	4603      	mov	r3, r0
    7bc8:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7bce:	015b      	lsls	r3, r3, #5
    7bd0:	4a0b      	ldr	r2, [pc, #44]	; (7c00 <usb_d_ep_abort+0x4c>)
    7bd2:	4413      	add	r3, r2
    7bd4:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    7bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7bda:	2b00      	cmp	r3, #0
    7bdc:	db0a      	blt.n	7bf4 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    7bde:	79fb      	ldrb	r3, [r7, #7]
    7be0:	4618      	mov	r0, r3
    7be2:	4b08      	ldr	r3, [pc, #32]	; (7c04 <usb_d_ep_abort+0x50>)
    7be4:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7be6:	68bb      	ldr	r3, [r7, #8]
    7be8:	2201      	movs	r2, #1
    7bea:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    7bec:	68bb      	ldr	r3, [r7, #8]
    7bee:	2204      	movs	r2, #4
    7bf0:	70da      	strb	r2, [r3, #3]
    7bf2:	e000      	b.n	7bf6 <usb_d_ep_abort+0x42>
		return;
    7bf4:	bf00      	nop
}
    7bf6:	3710      	adds	r7, #16
    7bf8:	46bd      	mov	sp, r7
    7bfa:	bd80      	pop	{r7, pc}
    7bfc:	00007409 	.word	0x00007409
    7c00:	20008968 	.word	0x20008968
    7c04:	000104a5 	.word	0x000104a5

00007c08 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    7c08:	b580      	push	{r7, lr}
    7c0a:	b086      	sub	sp, #24
    7c0c:	af00      	add	r7, sp, #0
    7c0e:	4603      	mov	r3, r0
    7c10:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7c12:	79fb      	ldrb	r3, [r7, #7]
    7c14:	4618      	mov	r0, r3
    7c16:	4b1a      	ldr	r3, [pc, #104]	; (7c80 <_usb_d_ep_halt_clr+0x78>)
    7c18:	4798      	blx	r3
    7c1a:	4603      	mov	r3, r0
    7c1c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7c22:	015b      	lsls	r3, r3, #5
    7c24:	4a17      	ldr	r2, [pc, #92]	; (7c84 <_usb_d_ep_halt_clr+0x7c>)
    7c26:	4413      	add	r3, r2
    7c28:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    7c2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7c2e:	2b00      	cmp	r3, #0
    7c30:	da02      	bge.n	7c38 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    7c32:	f06f 0311 	mvn.w	r3, #17
    7c36:	e01f      	b.n	7c78 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    7c38:	79fb      	ldrb	r3, [r7, #7]
    7c3a:	2102      	movs	r1, #2
    7c3c:	4618      	mov	r0, r3
    7c3e:	4b12      	ldr	r3, [pc, #72]	; (7c88 <_usb_d_ep_halt_clr+0x80>)
    7c40:	4798      	blx	r3
    7c42:	4603      	mov	r3, r0
    7c44:	2b00      	cmp	r3, #0
    7c46:	d016      	beq.n	7c76 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7c48:	79fb      	ldrb	r3, [r7, #7]
    7c4a:	2100      	movs	r1, #0
    7c4c:	4618      	mov	r0, r3
    7c4e:	4b0e      	ldr	r3, [pc, #56]	; (7c88 <_usb_d_ep_halt_clr+0x80>)
    7c50:	4798      	blx	r3
    7c52:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    7c54:	68fb      	ldr	r3, [r7, #12]
    7c56:	2b00      	cmp	r3, #0
    7c58:	da01      	bge.n	7c5e <_usb_d_ep_halt_clr+0x56>
			return rc;
    7c5a:	68fb      	ldr	r3, [r7, #12]
    7c5c:	e00c      	b.n	7c78 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7c5e:	693b      	ldr	r3, [r7, #16]
    7c60:	2201      	movs	r2, #1
    7c62:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    7c64:	693b      	ldr	r3, [r7, #16]
    7c66:	2203      	movs	r2, #3
    7c68:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    7c6a:	693b      	ldr	r3, [r7, #16]
    7c6c:	69db      	ldr	r3, [r3, #28]
    7c6e:	79f8      	ldrb	r0, [r7, #7]
    7c70:	2200      	movs	r2, #0
    7c72:	2103      	movs	r1, #3
    7c74:	4798      	blx	r3
	}
	return ERR_NONE;
    7c76:	2300      	movs	r3, #0
}
    7c78:	4618      	mov	r0, r3
    7c7a:	3718      	adds	r7, #24
    7c7c:	46bd      	mov	sp, r7
    7c7e:	bd80      	pop	{r7, pc}
    7c80:	00007409 	.word	0x00007409
    7c84:	20008968 	.word	0x20008968
    7c88:	000100b1 	.word	0x000100b1

00007c8c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    7c8c:	b580      	push	{r7, lr}
    7c8e:	b082      	sub	sp, #8
    7c90:	af00      	add	r7, sp, #0
    7c92:	4603      	mov	r3, r0
    7c94:	460a      	mov	r2, r1
    7c96:	71fb      	strb	r3, [r7, #7]
    7c98:	4613      	mov	r3, r2
    7c9a:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    7c9c:	79bb      	ldrb	r3, [r7, #6]
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	d105      	bne.n	7cae <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    7ca2:	79fb      	ldrb	r3, [r7, #7]
    7ca4:	4618      	mov	r0, r3
    7ca6:	4b0c      	ldr	r3, [pc, #48]	; (7cd8 <usb_d_ep_halt+0x4c>)
    7ca8:	4798      	blx	r3
    7caa:	4603      	mov	r3, r0
    7cac:	e00f      	b.n	7cce <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    7cae:	79bb      	ldrb	r3, [r7, #6]
    7cb0:	2b01      	cmp	r3, #1
    7cb2:	d106      	bne.n	7cc2 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    7cb4:	79fb      	ldrb	r3, [r7, #7]
    7cb6:	2101      	movs	r1, #1
    7cb8:	4618      	mov	r0, r3
    7cba:	4b08      	ldr	r3, [pc, #32]	; (7cdc <usb_d_ep_halt+0x50>)
    7cbc:	4798      	blx	r3
    7cbe:	4603      	mov	r3, r0
    7cc0:	e005      	b.n	7cce <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    7cc2:	79fb      	ldrb	r3, [r7, #7]
    7cc4:	2102      	movs	r1, #2
    7cc6:	4618      	mov	r0, r3
    7cc8:	4b04      	ldr	r3, [pc, #16]	; (7cdc <usb_d_ep_halt+0x50>)
    7cca:	4798      	blx	r3
    7ccc:	4603      	mov	r3, r0
	}
}
    7cce:	4618      	mov	r0, r3
    7cd0:	3708      	adds	r7, #8
    7cd2:	46bd      	mov	sp, r7
    7cd4:	bd80      	pop	{r7, pc}
    7cd6:	bf00      	nop
    7cd8:	00007c09 	.word	0x00007c09
    7cdc:	000100b1 	.word	0x000100b1

00007ce0 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    7ce0:	b580      	push	{r7, lr}
    7ce2:	b086      	sub	sp, #24
    7ce4:	af00      	add	r7, sp, #0
    7ce6:	4603      	mov	r3, r0
    7ce8:	603a      	str	r2, [r7, #0]
    7cea:	71fb      	strb	r3, [r7, #7]
    7cec:	460b      	mov	r3, r1
    7cee:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7cf0:	79fb      	ldrb	r3, [r7, #7]
    7cf2:	4618      	mov	r0, r3
    7cf4:	4b16      	ldr	r3, [pc, #88]	; (7d50 <usb_d_ep_register_callback+0x70>)
    7cf6:	4798      	blx	r3
    7cf8:	4603      	mov	r3, r0
    7cfa:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7cfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7d00:	015b      	lsls	r3, r3, #5
    7d02:	4a14      	ldr	r2, [pc, #80]	; (7d54 <usb_d_ep_register_callback+0x74>)
    7d04:	4413      	add	r3, r2
    7d06:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    7d08:	683b      	ldr	r3, [r7, #0]
    7d0a:	2b00      	cmp	r3, #0
    7d0c:	d001      	beq.n	7d12 <usb_d_ep_register_callback+0x32>
    7d0e:	683b      	ldr	r3, [r7, #0]
    7d10:	e000      	b.n	7d14 <usb_d_ep_register_callback+0x34>
    7d12:	4b11      	ldr	r3, [pc, #68]	; (7d58 <usb_d_ep_register_callback+0x78>)
    7d14:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    7d16:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7d1a:	2b00      	cmp	r3, #0
    7d1c:	db13      	blt.n	7d46 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    7d1e:	79bb      	ldrb	r3, [r7, #6]
    7d20:	2b01      	cmp	r3, #1
    7d22:	d008      	beq.n	7d36 <usb_d_ep_register_callback+0x56>
    7d24:	2b02      	cmp	r3, #2
    7d26:	d00a      	beq.n	7d3e <usb_d_ep_register_callback+0x5e>
    7d28:	2b00      	cmp	r3, #0
    7d2a:	d000      	beq.n	7d2e <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    7d2c:	e00c      	b.n	7d48 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    7d2e:	693b      	ldr	r3, [r7, #16]
    7d30:	68fa      	ldr	r2, [r7, #12]
    7d32:	615a      	str	r2, [r3, #20]
		break;
    7d34:	e008      	b.n	7d48 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    7d36:	693b      	ldr	r3, [r7, #16]
    7d38:	68fa      	ldr	r2, [r7, #12]
    7d3a:	619a      	str	r2, [r3, #24]
		break;
    7d3c:	e004      	b.n	7d48 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    7d3e:	693b      	ldr	r3, [r7, #16]
    7d40:	68fa      	ldr	r2, [r7, #12]
    7d42:	61da      	str	r2, [r3, #28]
		break;
    7d44:	e000      	b.n	7d48 <usb_d_ep_register_callback+0x68>
		return;
    7d46:	bf00      	nop
	}
}
    7d48:	3718      	adds	r7, #24
    7d4a:	46bd      	mov	sp, r7
    7d4c:	bd80      	pop	{r7, pc}
    7d4e:	bf00      	nop
    7d50:	00007409 	.word	0x00007409
    7d54:	20008968 	.word	0x20008968
    7d58:	000074dd 	.word	0x000074dd

00007d5c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    7d5c:	b480      	push	{r7}
    7d5e:	b085      	sub	sp, #20
    7d60:	af00      	add	r7, sp, #0
    7d62:	4603      	mov	r3, r0
    7d64:	60b9      	str	r1, [r7, #8]
    7d66:	607a      	str	r2, [r7, #4]
    7d68:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    7d6a:	7bfb      	ldrb	r3, [r7, #15]
    7d6c:	f083 0301 	eor.w	r3, r3, #1
    7d70:	b2db      	uxtb	r3, r3
    7d72:	2b00      	cmp	r3, #0
    7d74:	d000      	beq.n	7d78 <assert+0x1c>
		__asm("BKPT #0");
    7d76:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    7d78:	bf00      	nop
    7d7a:	3714      	adds	r7, #20
    7d7c:	46bd      	mov	sp, r7
    7d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d82:	4770      	bx	lr

00007d84 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    7d84:	b480      	push	{r7}
    7d86:	b085      	sub	sp, #20
    7d88:	af00      	add	r7, sp, #0
    7d8a:	6078      	str	r0, [r7, #4]
    7d8c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    7d8e:	687b      	ldr	r3, [r7, #4]
    7d90:	681b      	ldr	r3, [r3, #0]
    7d92:	60fb      	str	r3, [r7, #12]
    7d94:	e008      	b.n	7da8 <is_list_element+0x24>
		if (it == element) {
    7d96:	68fa      	ldr	r2, [r7, #12]
    7d98:	683b      	ldr	r3, [r7, #0]
    7d9a:	429a      	cmp	r2, r3
    7d9c:	d101      	bne.n	7da2 <is_list_element+0x1e>
			return true;
    7d9e:	2301      	movs	r3, #1
    7da0:	e006      	b.n	7db0 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    7da2:	68fb      	ldr	r3, [r7, #12]
    7da4:	681b      	ldr	r3, [r3, #0]
    7da6:	60fb      	str	r3, [r7, #12]
    7da8:	68fb      	ldr	r3, [r7, #12]
    7daa:	2b00      	cmp	r3, #0
    7dac:	d1f3      	bne.n	7d96 <is_list_element+0x12>
		}
	}

	return false;
    7dae:	2300      	movs	r3, #0
}
    7db0:	4618      	mov	r0, r3
    7db2:	3714      	adds	r7, #20
    7db4:	46bd      	mov	sp, r7
    7db6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dba:	4770      	bx	lr

00007dbc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    7dbc:	b580      	push	{r7, lr}
    7dbe:	b082      	sub	sp, #8
    7dc0:	af00      	add	r7, sp, #0
    7dc2:	6078      	str	r0, [r7, #4]
    7dc4:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    7dc6:	6839      	ldr	r1, [r7, #0]
    7dc8:	6878      	ldr	r0, [r7, #4]
    7dca:	4b0f      	ldr	r3, [pc, #60]	; (7e08 <list_insert_as_head+0x4c>)
    7dcc:	4798      	blx	r3
    7dce:	4603      	mov	r3, r0
    7dd0:	2b00      	cmp	r3, #0
    7dd2:	bf14      	ite	ne
    7dd4:	2301      	movne	r3, #1
    7dd6:	2300      	moveq	r3, #0
    7dd8:	b2db      	uxtb	r3, r3
    7dda:	f083 0301 	eor.w	r3, r3, #1
    7dde:	b2db      	uxtb	r3, r3
    7de0:	f003 0301 	and.w	r3, r3, #1
    7de4:	b2db      	uxtb	r3, r3
    7de6:	2239      	movs	r2, #57	; 0x39
    7de8:	4908      	ldr	r1, [pc, #32]	; (7e0c <list_insert_as_head+0x50>)
    7dea:	4618      	mov	r0, r3
    7dec:	4b08      	ldr	r3, [pc, #32]	; (7e10 <list_insert_as_head+0x54>)
    7dee:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    7df0:	687b      	ldr	r3, [r7, #4]
    7df2:	681a      	ldr	r2, [r3, #0]
    7df4:	683b      	ldr	r3, [r7, #0]
    7df6:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    7df8:	687b      	ldr	r3, [r7, #4]
    7dfa:	683a      	ldr	r2, [r7, #0]
    7dfc:	601a      	str	r2, [r3, #0]
}
    7dfe:	bf00      	nop
    7e00:	3708      	adds	r7, #8
    7e02:	46bd      	mov	sp, r7
    7e04:	bd80      	pop	{r7, pc}
    7e06:	bf00      	nop
    7e08:	00007d85 	.word	0x00007d85
    7e0c:	0002026c 	.word	0x0002026c
    7e10:	00007d5d 	.word	0x00007d5d

00007e14 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    7e14:	b480      	push	{r7}
    7e16:	b083      	sub	sp, #12
    7e18:	af00      	add	r7, sp, #0
    7e1a:	6078      	str	r0, [r7, #4]
    7e1c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    7e1e:	687b      	ldr	r3, [r7, #4]
    7e20:	681a      	ldr	r2, [r3, #0]
    7e22:	683b      	ldr	r3, [r7, #0]
    7e24:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    7e26:	687b      	ldr	r3, [r7, #4]
    7e28:	683a      	ldr	r2, [r7, #0]
    7e2a:	601a      	str	r2, [r3, #0]
}
    7e2c:	bf00      	nop
    7e2e:	370c      	adds	r7, #12
    7e30:	46bd      	mov	sp, r7
    7e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e36:	4770      	bx	lr

00007e38 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    7e38:	b580      	push	{r7, lr}
    7e3a:	b084      	sub	sp, #16
    7e3c:	af00      	add	r7, sp, #0
    7e3e:	6078      	str	r0, [r7, #4]
    7e40:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    7e42:	687b      	ldr	r3, [r7, #4]
    7e44:	681b      	ldr	r3, [r3, #0]
    7e46:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    7e48:	6839      	ldr	r1, [r7, #0]
    7e4a:	6878      	ldr	r0, [r7, #4]
    7e4c:	4b16      	ldr	r3, [pc, #88]	; (7ea8 <list_insert_at_end+0x70>)
    7e4e:	4798      	blx	r3
    7e50:	4603      	mov	r3, r0
    7e52:	2b00      	cmp	r3, #0
    7e54:	bf14      	ite	ne
    7e56:	2301      	movne	r3, #1
    7e58:	2300      	moveq	r3, #0
    7e5a:	b2db      	uxtb	r3, r3
    7e5c:	f083 0301 	eor.w	r3, r3, #1
    7e60:	b2db      	uxtb	r3, r3
    7e62:	f003 0301 	and.w	r3, r3, #1
    7e66:	b2db      	uxtb	r3, r3
    7e68:	224f      	movs	r2, #79	; 0x4f
    7e6a:	4910      	ldr	r1, [pc, #64]	; (7eac <list_insert_at_end+0x74>)
    7e6c:	4618      	mov	r0, r3
    7e6e:	4b10      	ldr	r3, [pc, #64]	; (7eb0 <list_insert_at_end+0x78>)
    7e70:	4798      	blx	r3

	if (!list->head) {
    7e72:	687b      	ldr	r3, [r7, #4]
    7e74:	681b      	ldr	r3, [r3, #0]
    7e76:	2b00      	cmp	r3, #0
    7e78:	d109      	bne.n	7e8e <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    7e7a:	687b      	ldr	r3, [r7, #4]
    7e7c:	683a      	ldr	r2, [r7, #0]
    7e7e:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    7e80:	683b      	ldr	r3, [r7, #0]
    7e82:	2200      	movs	r2, #0
    7e84:	601a      	str	r2, [r3, #0]
		return;
    7e86:	e00c      	b.n	7ea2 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    7e88:	68fb      	ldr	r3, [r7, #12]
    7e8a:	681b      	ldr	r3, [r3, #0]
    7e8c:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    7e8e:	68fb      	ldr	r3, [r7, #12]
    7e90:	681b      	ldr	r3, [r3, #0]
    7e92:	2b00      	cmp	r3, #0
    7e94:	d1f8      	bne.n	7e88 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    7e96:	68fb      	ldr	r3, [r7, #12]
    7e98:	683a      	ldr	r2, [r7, #0]
    7e9a:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    7e9c:	683b      	ldr	r3, [r7, #0]
    7e9e:	2200      	movs	r2, #0
    7ea0:	601a      	str	r2, [r3, #0]
}
    7ea2:	3710      	adds	r7, #16
    7ea4:	46bd      	mov	sp, r7
    7ea6:	bd80      	pop	{r7, pc}
    7ea8:	00007d85 	.word	0x00007d85
    7eac:	0002026c 	.word	0x0002026c
    7eb0:	00007d5d 	.word	0x00007d5d

00007eb4 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    7eb4:	b480      	push	{r7}
    7eb6:	b085      	sub	sp, #20
    7eb8:	af00      	add	r7, sp, #0
    7eba:	6078      	str	r0, [r7, #4]
	if (list->head) {
    7ebc:	687b      	ldr	r3, [r7, #4]
    7ebe:	681b      	ldr	r3, [r3, #0]
    7ec0:	2b00      	cmp	r3, #0
    7ec2:	d009      	beq.n	7ed8 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    7ec4:	687b      	ldr	r3, [r7, #4]
    7ec6:	681b      	ldr	r3, [r3, #0]
    7ec8:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    7eca:	687b      	ldr	r3, [r7, #4]
    7ecc:	681b      	ldr	r3, [r3, #0]
    7ece:	681a      	ldr	r2, [r3, #0]
    7ed0:	687b      	ldr	r3, [r7, #4]
    7ed2:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    7ed4:	68fb      	ldr	r3, [r7, #12]
    7ed6:	e000      	b.n	7eda <list_remove_head+0x26>
	}

	return NULL;
    7ed8:	2300      	movs	r3, #0
}
    7eda:	4618      	mov	r0, r3
    7edc:	3714      	adds	r7, #20
    7ede:	46bd      	mov	sp, r7
    7ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ee4:	4770      	bx	lr

00007ee6 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    7ee6:	b480      	push	{r7}
    7ee8:	b085      	sub	sp, #20
    7eea:	af00      	add	r7, sp, #0
    7eec:	6078      	str	r0, [r7, #4]
    7eee:	6039      	str	r1, [r7, #0]
	if (!element) {
    7ef0:	683b      	ldr	r3, [r7, #0]
    7ef2:	2b00      	cmp	r3, #0
    7ef4:	d101      	bne.n	7efa <list_delete_element+0x14>
		return false;
    7ef6:	2300      	movs	r3, #0
    7ef8:	e024      	b.n	7f44 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    7efa:	687b      	ldr	r3, [r7, #4]
    7efc:	681a      	ldr	r2, [r3, #0]
    7efe:	683b      	ldr	r3, [r7, #0]
    7f00:	429a      	cmp	r2, r3
    7f02:	d106      	bne.n	7f12 <list_delete_element+0x2c>
		list->head = list->head->next;
    7f04:	687b      	ldr	r3, [r7, #4]
    7f06:	681b      	ldr	r3, [r3, #0]
    7f08:	681a      	ldr	r2, [r3, #0]
    7f0a:	687b      	ldr	r3, [r7, #4]
    7f0c:	601a      	str	r2, [r3, #0]
		return true;
    7f0e:	2301      	movs	r3, #1
    7f10:	e018      	b.n	7f44 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    7f12:	687b      	ldr	r3, [r7, #4]
    7f14:	681b      	ldr	r3, [r3, #0]
    7f16:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    7f18:	e002      	b.n	7f20 <list_delete_element+0x3a>
			it = it->next;
    7f1a:	68fb      	ldr	r3, [r7, #12]
    7f1c:	681b      	ldr	r3, [r3, #0]
    7f1e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    7f20:	68fb      	ldr	r3, [r7, #12]
    7f22:	2b00      	cmp	r3, #0
    7f24:	d004      	beq.n	7f30 <list_delete_element+0x4a>
    7f26:	68fb      	ldr	r3, [r7, #12]
    7f28:	681a      	ldr	r2, [r3, #0]
    7f2a:	683b      	ldr	r3, [r7, #0]
    7f2c:	429a      	cmp	r2, r3
    7f2e:	d1f4      	bne.n	7f1a <list_delete_element+0x34>
		}
		if (it) {
    7f30:	68fb      	ldr	r3, [r7, #12]
    7f32:	2b00      	cmp	r3, #0
    7f34:	d005      	beq.n	7f42 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    7f36:	683b      	ldr	r3, [r7, #0]
    7f38:	681a      	ldr	r2, [r3, #0]
    7f3a:	68fb      	ldr	r3, [r7, #12]
    7f3c:	601a      	str	r2, [r3, #0]
			return true;
    7f3e:	2301      	movs	r3, #1
    7f40:	e000      	b.n	7f44 <list_delete_element+0x5e>
		}
	}

	return false;
    7f42:	2300      	movs	r3, #0
}
    7f44:	4618      	mov	r0, r3
    7f46:	3714      	adds	r7, #20
    7f48:	46bd      	mov	sp, r7
    7f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f4e:	4770      	bx	lr

00007f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    7f50:	b480      	push	{r7}
    7f52:	b083      	sub	sp, #12
    7f54:	af00      	add	r7, sp, #0
    7f56:	4603      	mov	r3, r0
    7f58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7f5e:	2b00      	cmp	r3, #0
    7f60:	db0b      	blt.n	7f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7f62:	4909      	ldr	r1, [pc, #36]	; (7f88 <__NVIC_EnableIRQ+0x38>)
    7f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7f68:	095b      	lsrs	r3, r3, #5
    7f6a:	88fa      	ldrh	r2, [r7, #6]
    7f6c:	f002 021f 	and.w	r2, r2, #31
    7f70:	2001      	movs	r0, #1
    7f72:	fa00 f202 	lsl.w	r2, r0, r2
    7f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    7f7a:	bf00      	nop
    7f7c:	370c      	adds	r7, #12
    7f7e:	46bd      	mov	sp, r7
    7f80:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f84:	4770      	bx	lr
    7f86:	bf00      	nop
    7f88:	e000e100 	.word	0xe000e100

00007f8c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    7f8c:	b480      	push	{r7}
    7f8e:	b083      	sub	sp, #12
    7f90:	af00      	add	r7, sp, #0
    7f92:	4603      	mov	r3, r0
    7f94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7f9a:	2b00      	cmp	r3, #0
    7f9c:	db10      	blt.n	7fc0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7f9e:	490b      	ldr	r1, [pc, #44]	; (7fcc <__NVIC_DisableIRQ+0x40>)
    7fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7fa4:	095b      	lsrs	r3, r3, #5
    7fa6:	88fa      	ldrh	r2, [r7, #6]
    7fa8:	f002 021f 	and.w	r2, r2, #31
    7fac:	2001      	movs	r0, #1
    7fae:	fa00 f202 	lsl.w	r2, r0, r2
    7fb2:	3320      	adds	r3, #32
    7fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    7fb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7fbc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    7fc0:	bf00      	nop
    7fc2:	370c      	adds	r7, #12
    7fc4:	46bd      	mov	sp, r7
    7fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fca:	4770      	bx	lr
    7fcc:	e000e100 	.word	0xe000e100

00007fd0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    7fd0:	b480      	push	{r7}
    7fd2:	b083      	sub	sp, #12
    7fd4:	af00      	add	r7, sp, #0
    7fd6:	4603      	mov	r3, r0
    7fd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7fde:	2b00      	cmp	r3, #0
    7fe0:	db0c      	blt.n	7ffc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7fe2:	4909      	ldr	r1, [pc, #36]	; (8008 <__NVIC_ClearPendingIRQ+0x38>)
    7fe4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7fe8:	095b      	lsrs	r3, r3, #5
    7fea:	88fa      	ldrh	r2, [r7, #6]
    7fec:	f002 021f 	and.w	r2, r2, #31
    7ff0:	2001      	movs	r0, #1
    7ff2:	fa00 f202 	lsl.w	r2, r0, r2
    7ff6:	3360      	adds	r3, #96	; 0x60
    7ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    7ffc:	bf00      	nop
    7ffe:	370c      	adds	r7, #12
    8000:	46bd      	mov	sp, r7
    8002:	f85d 7b04 	ldr.w	r7, [sp], #4
    8006:	4770      	bx	lr
    8008:	e000e100 	.word	0xe000e100

0000800c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    800c:	b480      	push	{r7}
    800e:	b083      	sub	sp, #12
    8010:	af00      	add	r7, sp, #0
    8012:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    8014:	687b      	ldr	r3, [r7, #4]
    8016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8018:	095b      	lsrs	r3, r3, #5
    801a:	f003 0301 	and.w	r3, r3, #1
    801e:	2b00      	cmp	r3, #0
    8020:	bf14      	ite	ne
    8022:	2301      	movne	r3, #1
    8024:	2300      	moveq	r3, #0
    8026:	b2db      	uxtb	r3, r3
}
    8028:	4618      	mov	r0, r3
    802a:	370c      	adds	r7, #12
    802c:	46bd      	mov	sp, r7
    802e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8032:	4770      	bx	lr

00008034 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    8034:	b480      	push	{r7}
    8036:	b083      	sub	sp, #12
    8038:	af00      	add	r7, sp, #0
    803a:	6078      	str	r0, [r7, #4]
    803c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    803e:	687b      	ldr	r3, [r7, #4]
    8040:	683a      	ldr	r2, [r7, #0]
    8042:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8044:	bf00      	nop
    8046:	370c      	adds	r7, #12
    8048:	46bd      	mov	sp, r7
    804a:	f85d 7b04 	ldr.w	r7, [sp], #4
    804e:	4770      	bx	lr

00008050 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    8050:	b480      	push	{r7}
    8052:	b083      	sub	sp, #12
    8054:	af00      	add	r7, sp, #0
    8056:	6078      	str	r0, [r7, #4]
    8058:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    805a:	687b      	ldr	r3, [r7, #4]
    805c:	683a      	ldr	r2, [r7, #0]
    805e:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8060:	bf00      	nop
    8062:	370c      	adds	r7, #12
    8064:	46bd      	mov	sp, r7
    8066:	f85d 7b04 	ldr.w	r7, [sp], #4
    806a:	4770      	bx	lr

0000806c <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    806c:	b480      	push	{r7}
    806e:	b083      	sub	sp, #12
    8070:	af00      	add	r7, sp, #0
    8072:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    8074:	687b      	ldr	r3, [r7, #4]
    8076:	699b      	ldr	r3, [r3, #24]
    8078:	f043 0201 	orr.w	r2, r3, #1
    807c:	687b      	ldr	r3, [r7, #4]
    807e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8080:	bf00      	nop
    8082:	370c      	adds	r7, #12
    8084:	46bd      	mov	sp, r7
    8086:	f85d 7b04 	ldr.w	r7, [sp], #4
    808a:	4770      	bx	lr

0000808c <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    808c:	b480      	push	{r7}
    808e:	b085      	sub	sp, #20
    8090:	af00      	add	r7, sp, #0
    8092:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    8094:	687b      	ldr	r3, [r7, #4]
    8096:	699b      	ldr	r3, [r3, #24]
    8098:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    809a:	68fb      	ldr	r3, [r7, #12]
    809c:	f003 0301 	and.w	r3, r3, #1
    80a0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    80a2:	68fb      	ldr	r3, [r7, #12]
    80a4:	2b00      	cmp	r3, #0
    80a6:	bf14      	ite	ne
    80a8:	2301      	movne	r3, #1
    80aa:	2300      	moveq	r3, #0
    80ac:	b2db      	uxtb	r3, r3
}
    80ae:	4618      	mov	r0, r3
    80b0:	3714      	adds	r7, #20
    80b2:	46bd      	mov	sp, r7
    80b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    80b8:	4770      	bx	lr

000080ba <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    80ba:	b480      	push	{r7}
    80bc:	b083      	sub	sp, #12
    80be:	af00      	add	r7, sp, #0
    80c0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    80c2:	687b      	ldr	r3, [r7, #4]
    80c4:	699b      	ldr	r3, [r3, #24]
    80c6:	f023 0201 	bic.w	r2, r3, #1
    80ca:	687b      	ldr	r3, [r7, #4]
    80cc:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    80ce:	bf00      	nop
    80d0:	370c      	adds	r7, #12
    80d2:	46bd      	mov	sp, r7
    80d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    80d8:	4770      	bx	lr

000080da <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    80da:	b480      	push	{r7}
    80dc:	b083      	sub	sp, #12
    80de:	af00      	add	r7, sp, #0
    80e0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    80e2:	687b      	ldr	r3, [r7, #4]
    80e4:	699b      	ldr	r3, [r3, #24]
    80e6:	f043 0202 	orr.w	r2, r3, #2
    80ea:	687b      	ldr	r3, [r7, #4]
    80ec:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    80ee:	bf00      	nop
    80f0:	370c      	adds	r7, #12
    80f2:	46bd      	mov	sp, r7
    80f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    80f8:	4770      	bx	lr

000080fa <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    80fa:	b480      	push	{r7}
    80fc:	b083      	sub	sp, #12
    80fe:	af00      	add	r7, sp, #0
    8100:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    8102:	687b      	ldr	r3, [r7, #4]
    8104:	699b      	ldr	r3, [r3, #24]
    8106:	f023 0202 	bic.w	r2, r3, #2
    810a:	687b      	ldr	r3, [r7, #4]
    810c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    810e:	bf00      	nop
    8110:	370c      	adds	r7, #12
    8112:	46bd      	mov	sp, r7
    8114:	f85d 7b04 	ldr.w	r7, [sp], #4
    8118:	4770      	bx	lr

0000811a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    811a:	b480      	push	{r7}
    811c:	b083      	sub	sp, #12
    811e:	af00      	add	r7, sp, #0
    8120:	6078      	str	r0, [r7, #4]
    8122:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    8124:	687b      	ldr	r3, [r7, #4]
    8126:	699a      	ldr	r2, [r3, #24]
    8128:	683b      	ldr	r3, [r7, #0]
    812a:	431a      	orrs	r2, r3
    812c:	687b      	ldr	r3, [r7, #4]
    812e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8130:	bf00      	nop
    8132:	370c      	adds	r7, #12
    8134:	46bd      	mov	sp, r7
    8136:	f85d 7b04 	ldr.w	r7, [sp], #4
    813a:	4770      	bx	lr

0000813c <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    813c:	b480      	push	{r7}
    813e:	b083      	sub	sp, #12
    8140:	af00      	add	r7, sp, #0
    8142:	6078      	str	r0, [r7, #4]
    8144:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    8146:	687b      	ldr	r3, [r7, #4]
    8148:	683a      	ldr	r2, [r7, #0]
    814a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    814c:	bf00      	nop
    814e:	370c      	adds	r7, #12
    8150:	46bd      	mov	sp, r7
    8152:	f85d 7b04 	ldr.w	r7, [sp], #4
    8156:	4770      	bx	lr

00008158 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    8158:	b480      	push	{r7}
    815a:	b083      	sub	sp, #12
    815c:	af00      	add	r7, sp, #0
    815e:	6078      	str	r0, [r7, #4]
    8160:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    8162:	687b      	ldr	r3, [r7, #4]
    8164:	683a      	ldr	r2, [r7, #0]
    8166:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    8168:	bf00      	nop
    816a:	370c      	adds	r7, #12
    816c:	46bd      	mov	sp, r7
    816e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8172:	4770      	bx	lr

00008174 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    8174:	b480      	push	{r7}
    8176:	b083      	sub	sp, #12
    8178:	af00      	add	r7, sp, #0
    817a:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    817c:	687b      	ldr	r3, [r7, #4]
    817e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    8180:	4618      	mov	r0, r3
    8182:	370c      	adds	r7, #12
    8184:	46bd      	mov	sp, r7
    8186:	f85d 7b04 	ldr.w	r7, [sp], #4
    818a:	4770      	bx	lr

0000818c <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    818c:	b480      	push	{r7}
    818e:	b083      	sub	sp, #12
    8190:	af00      	add	r7, sp, #0
    8192:	6078      	str	r0, [r7, #4]
    8194:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    8196:	687b      	ldr	r3, [r7, #4]
    8198:	683a      	ldr	r2, [r7, #0]
    819a:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    819c:	bf00      	nop
    819e:	370c      	adds	r7, #12
    81a0:	46bd      	mov	sp, r7
    81a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    81a6:	4770      	bx	lr

000081a8 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    81a8:	b480      	push	{r7}
    81aa:	b083      	sub	sp, #12
    81ac:	af00      	add	r7, sp, #0
    81ae:	6078      	str	r0, [r7, #4]
    81b0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    81b2:	687b      	ldr	r3, [r7, #4]
    81b4:	683a      	ldr	r2, [r7, #0]
    81b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    81ba:	bf00      	nop
    81bc:	370c      	adds	r7, #12
    81be:	46bd      	mov	sp, r7
    81c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    81c4:	4770      	bx	lr

000081c6 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    81c6:	b480      	push	{r7}
    81c8:	b083      	sub	sp, #12
    81ca:	af00      	add	r7, sp, #0
    81cc:	6078      	str	r0, [r7, #4]
    81ce:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    81d0:	687b      	ldr	r3, [r7, #4]
    81d2:	683a      	ldr	r2, [r7, #0]
    81d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    81d8:	bf00      	nop
    81da:	370c      	adds	r7, #12
    81dc:	46bd      	mov	sp, r7
    81de:	f85d 7b04 	ldr.w	r7, [sp], #4
    81e2:	4770      	bx	lr

000081e4 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    81e4:	b480      	push	{r7}
    81e6:	b083      	sub	sp, #12
    81e8:	af00      	add	r7, sp, #0
    81ea:	6078      	str	r0, [r7, #4]
    81ec:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    81ee:	687b      	ldr	r3, [r7, #4]
    81f0:	683a      	ldr	r2, [r7, #0]
    81f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    81f6:	bf00      	nop
    81f8:	370c      	adds	r7, #12
    81fa:	46bd      	mov	sp, r7
    81fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8200:	4770      	bx	lr

00008202 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    8202:	b480      	push	{r7}
    8204:	b083      	sub	sp, #12
    8206:	af00      	add	r7, sp, #0
    8208:	6078      	str	r0, [r7, #4]
    820a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    820c:	687b      	ldr	r3, [r7, #4]
    820e:	683a      	ldr	r2, [r7, #0]
    8210:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    8214:	bf00      	nop
    8216:	370c      	adds	r7, #12
    8218:	46bd      	mov	sp, r7
    821a:	f85d 7b04 	ldr.w	r7, [sp], #4
    821e:	4770      	bx	lr

00008220 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    8220:	b480      	push	{r7}
    8222:	b083      	sub	sp, #12
    8224:	af00      	add	r7, sp, #0
    8226:	6078      	str	r0, [r7, #4]
    8228:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    822a:	687b      	ldr	r3, [r7, #4]
    822c:	683a      	ldr	r2, [r7, #0]
    822e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    8232:	bf00      	nop
    8234:	370c      	adds	r7, #12
    8236:	46bd      	mov	sp, r7
    8238:	f85d 7b04 	ldr.w	r7, [sp], #4
    823c:	4770      	bx	lr

0000823e <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    823e:	b480      	push	{r7}
    8240:	b083      	sub	sp, #12
    8242:	af00      	add	r7, sp, #0
    8244:	6078      	str	r0, [r7, #4]
    8246:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    8248:	687b      	ldr	r3, [r7, #4]
    824a:	683a      	ldr	r2, [r7, #0]
    824c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    8250:	bf00      	nop
    8252:	370c      	adds	r7, #12
    8254:	46bd      	mov	sp, r7
    8256:	f85d 7b04 	ldr.w	r7, [sp], #4
    825a:	4770      	bx	lr

0000825c <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    825c:	b480      	push	{r7}
    825e:	b083      	sub	sp, #12
    8260:	af00      	add	r7, sp, #0
    8262:	6078      	str	r0, [r7, #4]
    8264:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    8266:	687b      	ldr	r3, [r7, #4]
    8268:	683a      	ldr	r2, [r7, #0]
    826a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    826e:	bf00      	nop
    8270:	370c      	adds	r7, #12
    8272:	46bd      	mov	sp, r7
    8274:	f85d 7b04 	ldr.w	r7, [sp], #4
    8278:	4770      	bx	lr

0000827a <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    827a:	b480      	push	{r7}
    827c:	b083      	sub	sp, #12
    827e:	af00      	add	r7, sp, #0
    8280:	6078      	str	r0, [r7, #4]
    8282:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    8284:	687b      	ldr	r3, [r7, #4]
    8286:	683a      	ldr	r2, [r7, #0]
    8288:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    828c:	bf00      	nop
    828e:	370c      	adds	r7, #12
    8290:	46bd      	mov	sp, r7
    8292:	f85d 7b04 	ldr.w	r7, [sp], #4
    8296:	4770      	bx	lr

00008298 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    8298:	b480      	push	{r7}
    829a:	b083      	sub	sp, #12
    829c:	af00      	add	r7, sp, #0
    829e:	6078      	str	r0, [r7, #4]
    82a0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    82a2:	687b      	ldr	r3, [r7, #4]
    82a4:	683a      	ldr	r2, [r7, #0]
    82a6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    82aa:	bf00      	nop
    82ac:	370c      	adds	r7, #12
    82ae:	46bd      	mov	sp, r7
    82b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    82b4:	4770      	bx	lr
	...

000082b8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    82b8:	b580      	push	{r7, lr}
    82ba:	b082      	sub	sp, #8
    82bc:	af00      	add	r7, sp, #0
    82be:	6078      	str	r0, [r7, #4]
    82c0:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    82c2:	687b      	ldr	r3, [r7, #4]
    82c4:	683a      	ldr	r2, [r7, #0]
    82c6:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    82c8:	687b      	ldr	r3, [r7, #4]
    82ca:	681b      	ldr	r3, [r3, #0]
    82cc:	4618      	mov	r0, r3
    82ce:	4b55      	ldr	r3, [pc, #340]	; (8424 <_can_async_init+0x16c>)
    82d0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    82d2:	bf00      	nop
    82d4:	687b      	ldr	r3, [r7, #4]
    82d6:	681b      	ldr	r3, [r3, #0]
    82d8:	4618      	mov	r0, r3
    82da:	4b53      	ldr	r3, [pc, #332]	; (8428 <_can_async_init+0x170>)
    82dc:	4798      	blx	r3
    82de:	4603      	mov	r3, r0
    82e0:	f083 0301 	eor.w	r3, r3, #1
    82e4:	b2db      	uxtb	r3, r3
    82e6:	2b00      	cmp	r3, #0
    82e8:	d1f4      	bne.n	82d4 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    82ea:	687b      	ldr	r3, [r7, #4]
    82ec:	681b      	ldr	r3, [r3, #0]
    82ee:	4618      	mov	r0, r3
    82f0:	4b4e      	ldr	r3, [pc, #312]	; (842c <_can_async_init+0x174>)
    82f2:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    82f4:	683b      	ldr	r3, [r7, #0]
    82f6:	4a4e      	ldr	r2, [pc, #312]	; (8430 <_can_async_init+0x178>)
    82f8:	4293      	cmp	r3, r2
    82fa:	d17a      	bne.n	83f2 <_can_async_init+0x13a>
		_can1_dev    = dev;
    82fc:	4a4d      	ldr	r2, [pc, #308]	; (8434 <_can_async_init+0x17c>)
    82fe:	687b      	ldr	r3, [r7, #4]
    8300:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    8302:	687b      	ldr	r3, [r7, #4]
    8304:	4a4c      	ldr	r2, [pc, #304]	; (8438 <_can_async_init+0x180>)
    8306:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    8308:	687b      	ldr	r3, [r7, #4]
    830a:	681b      	ldr	r3, [r3, #0]
    830c:	f44f 7140 	mov.w	r1, #768	; 0x300
    8310:	4618      	mov	r0, r3
    8312:	4b4a      	ldr	r3, [pc, #296]	; (843c <_can_async_init+0x184>)
    8314:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    8316:	687b      	ldr	r3, [r7, #4]
    8318:	681b      	ldr	r3, [r3, #0]
    831a:	2102      	movs	r1, #2
    831c:	4618      	mov	r0, r3
    831e:	4b48      	ldr	r3, [pc, #288]	; (8440 <_can_async_init+0x188>)
    8320:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    8322:	687b      	ldr	r3, [r7, #4]
    8324:	681b      	ldr	r3, [r3, #0]
    8326:	4947      	ldr	r1, [pc, #284]	; (8444 <_can_async_init+0x18c>)
    8328:	4618      	mov	r0, r3
    832a:	4b47      	ldr	r3, [pc, #284]	; (8448 <_can_async_init+0x190>)
    832c:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    832e:	687b      	ldr	r3, [r7, #4]
    8330:	681b      	ldr	r3, [r3, #0]
    8332:	4946      	ldr	r1, [pc, #280]	; (844c <_can_async_init+0x194>)
    8334:	4618      	mov	r0, r3
    8336:	4b46      	ldr	r3, [pc, #280]	; (8450 <_can_async_init+0x198>)
    8338:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    833a:	687b      	ldr	r3, [r7, #4]
    833c:	681a      	ldr	r2, [r3, #0]
    833e:	4b45      	ldr	r3, [pc, #276]	; (8454 <_can_async_init+0x19c>)
    8340:	b29b      	uxth	r3, r3
    8342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    834a:	4619      	mov	r1, r3
    834c:	4610      	mov	r0, r2
    834e:	4b42      	ldr	r3, [pc, #264]	; (8458 <_can_async_init+0x1a0>)
    8350:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    8352:	687b      	ldr	r3, [r7, #4]
    8354:	681b      	ldr	r3, [r3, #0]
    8356:	2107      	movs	r1, #7
    8358:	4618      	mov	r0, r3
    835a:	4b40      	ldr	r3, [pc, #256]	; (845c <_can_async_init+0x1a4>)
    835c:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    835e:	687b      	ldr	r3, [r7, #4]
    8360:	681b      	ldr	r3, [r3, #0]
    8362:	2107      	movs	r1, #7
    8364:	4618      	mov	r0, r3
    8366:	4b3e      	ldr	r3, [pc, #248]	; (8460 <_can_async_init+0x1a8>)
    8368:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    836a:	687b      	ldr	r3, [r7, #4]
    836c:	681a      	ldr	r2, [r3, #0]
    836e:	4b3d      	ldr	r3, [pc, #244]	; (8464 <_can_async_init+0x1ac>)
    8370:	b29b      	uxth	r3, r3
    8372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    8376:	4619      	mov	r1, r3
    8378:	4610      	mov	r0, r2
    837a:	4b3b      	ldr	r3, [pc, #236]	; (8468 <_can_async_init+0x1b0>)
    837c:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    837e:	687b      	ldr	r3, [r7, #4]
    8380:	681a      	ldr	r2, [r3, #0]
    8382:	4b3a      	ldr	r3, [pc, #232]	; (846c <_can_async_init+0x1b4>)
    8384:	b29b      	uxth	r3, r3
    8386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    838a:	4619      	mov	r1, r3
    838c:	4610      	mov	r0, r2
    838e:	4b38      	ldr	r3, [pc, #224]	; (8470 <_can_async_init+0x1b8>)
    8390:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    8392:	687b      	ldr	r3, [r7, #4]
    8394:	681b      	ldr	r3, [r3, #0]
    8396:	2108      	movs	r1, #8
    8398:	4618      	mov	r0, r3
    839a:	4b36      	ldr	r3, [pc, #216]	; (8474 <_can_async_init+0x1bc>)
    839c:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    839e:	687b      	ldr	r3, [r7, #4]
    83a0:	681a      	ldr	r2, [r3, #0]
    83a2:	4b35      	ldr	r3, [pc, #212]	; (8478 <_can_async_init+0x1c0>)
    83a4:	b29b      	uxth	r3, r3
    83a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    83aa:	4619      	mov	r1, r3
    83ac:	4610      	mov	r0, r2
    83ae:	4b33      	ldr	r3, [pc, #204]	; (847c <_can_async_init+0x1c4>)
    83b0:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    83b2:	687b      	ldr	r3, [r7, #4]
    83b4:	681a      	ldr	r2, [r3, #0]
    83b6:	4b32      	ldr	r3, [pc, #200]	; (8480 <_can_async_init+0x1c8>)
    83b8:	b29b      	uxth	r3, r3
    83ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    83be:	4619      	mov	r1, r3
    83c0:	4610      	mov	r0, r2
    83c2:	4b30      	ldr	r3, [pc, #192]	; (8484 <_can_async_init+0x1cc>)
    83c4:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    83c6:	687b      	ldr	r3, [r7, #4]
    83c8:	681b      	ldr	r3, [r3, #0]
    83ca:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    83ce:	4618      	mov	r0, r3
    83d0:	4b2d      	ldr	r3, [pc, #180]	; (8488 <_can_async_init+0x1d0>)
    83d2:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    83d4:	204f      	movs	r0, #79	; 0x4f
    83d6:	4b2d      	ldr	r3, [pc, #180]	; (848c <_can_async_init+0x1d4>)
    83d8:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    83da:	204f      	movs	r0, #79	; 0x4f
    83dc:	4b2c      	ldr	r3, [pc, #176]	; (8490 <_can_async_init+0x1d8>)
    83de:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    83e0:	204f      	movs	r0, #79	; 0x4f
    83e2:	4b2c      	ldr	r3, [pc, #176]	; (8494 <_can_async_init+0x1dc>)
    83e4:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    83e6:	687b      	ldr	r3, [r7, #4]
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	2101      	movs	r1, #1
    83ec:	4618      	mov	r0, r3
    83ee:	4b2a      	ldr	r3, [pc, #168]	; (8498 <_can_async_init+0x1e0>)
    83f0:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    83f2:	687b      	ldr	r3, [r7, #4]
    83f4:	681b      	ldr	r3, [r3, #0]
    83f6:	4618      	mov	r0, r3
    83f8:	4b28      	ldr	r3, [pc, #160]	; (849c <_can_async_init+0x1e4>)
    83fa:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    83fc:	687b      	ldr	r3, [r7, #4]
    83fe:	681b      	ldr	r3, [r3, #0]
    8400:	4618      	mov	r0, r3
    8402:	4b27      	ldr	r3, [pc, #156]	; (84a0 <_can_async_init+0x1e8>)
    8404:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    8406:	bf00      	nop
    8408:	687b      	ldr	r3, [r7, #4]
    840a:	681b      	ldr	r3, [r3, #0]
    840c:	4618      	mov	r0, r3
    840e:	4b06      	ldr	r3, [pc, #24]	; (8428 <_can_async_init+0x170>)
    8410:	4798      	blx	r3
    8412:	4603      	mov	r3, r0
    8414:	2b00      	cmp	r3, #0
    8416:	d1f7      	bne.n	8408 <_can_async_init+0x150>
	};

	return ERR_NONE;
    8418:	2300      	movs	r3, #0
}
    841a:	4618      	mov	r0, r3
    841c:	3708      	adds	r7, #8
    841e:	46bd      	mov	sp, r7
    8420:	bd80      	pop	{r7, pc}
    8422:	bf00      	nop
    8424:	0000806d 	.word	0x0000806d
    8428:	0000808d 	.word	0x0000808d
    842c:	000080db 	.word	0x000080db
    8430:	42000400 	.word	0x42000400
    8434:	20008a88 	.word	0x20008a88
    8438:	20000068 	.word	0x20000068
    843c:	0000811b 	.word	0x0000811b
    8440:	00008035 	.word	0x00008035
    8444:	00010c01 	.word	0x00010c01
    8448:	0000813d 	.word	0x0000813d
    844c:	00010c10 	.word	0x00010c10
    8450:	00008051 	.word	0x00008051
    8454:	2000abb8 	.word	0x2000abb8
    8458:	00008221 	.word	0x00008221
    845c:	0000823f 	.word	0x0000823f
    8460:	0000827b 	.word	0x0000827b
    8464:	2000ab70 	.word	0x2000ab70
    8468:	0000825d 	.word	0x0000825d
    846c:	200089e8 	.word	0x200089e8
    8470:	00008299 	.word	0x00008299
    8474:	000081a9 	.word	0x000081a9
    8478:	200089f8 	.word	0x200089f8
    847c:	000081c7 	.word	0x000081c7
    8480:	20008a78 	.word	0x20008a78
    8484:	000081e5 	.word	0x000081e5
    8488:	00008203 	.word	0x00008203
    848c:	00007f8d 	.word	0x00007f8d
    8490:	00007fd1 	.word	0x00007fd1
    8494:	00007f51 	.word	0x00007f51
    8498:	0000818d 	.word	0x0000818d
    849c:	000080fb 	.word	0x000080fb
    84a0:	000080bb 	.word	0x000080bb

000084a4 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    84a4:	b590      	push	{r4, r7, lr}
    84a6:	b083      	sub	sp, #12
    84a8:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    84aa:	4b2c      	ldr	r3, [pc, #176]	; (855c <CAN1_Handler+0xb8>)
    84ac:	681b      	ldr	r3, [r3, #0]
    84ae:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    84b0:	687b      	ldr	r3, [r7, #4]
    84b2:	681b      	ldr	r3, [r3, #0]
    84b4:	4618      	mov	r0, r3
    84b6:	4b2a      	ldr	r3, [pc, #168]	; (8560 <CAN1_Handler+0xbc>)
    84b8:	4798      	blx	r3
    84ba:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    84bc:	683b      	ldr	r3, [r7, #0]
    84be:	f003 0301 	and.w	r3, r3, #1
    84c2:	2b00      	cmp	r3, #0
    84c4:	d003      	beq.n	84ce <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    84c6:	687b      	ldr	r3, [r7, #4]
    84c8:	689b      	ldr	r3, [r3, #8]
    84ca:	6878      	ldr	r0, [r7, #4]
    84cc:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    84ce:	683b      	ldr	r3, [r7, #0]
    84d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    84d4:	2b00      	cmp	r3, #0
    84d6:	d003      	beq.n	84e0 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    84d8:	687b      	ldr	r3, [r7, #4]
    84da:	685b      	ldr	r3, [r3, #4]
    84dc:	6878      	ldr	r0, [r7, #4]
    84de:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    84e0:	683b      	ldr	r3, [r7, #0]
    84e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    84e6:	2b00      	cmp	r3, #0
    84e8:	d004      	beq.n	84f4 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    84ea:	687b      	ldr	r3, [r7, #4]
    84ec:	68db      	ldr	r3, [r3, #12]
    84ee:	2103      	movs	r1, #3
    84f0:	6878      	ldr	r0, [r7, #4]
    84f2:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    84f4:	683b      	ldr	r3, [r7, #0]
    84f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    84fa:	2b00      	cmp	r3, #0
    84fc:	d004      	beq.n	8508 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    84fe:	687b      	ldr	r3, [r7, #4]
    8500:	68db      	ldr	r3, [r3, #12]
    8502:	2100      	movs	r1, #0
    8504:	6878      	ldr	r0, [r7, #4]
    8506:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    8508:	683b      	ldr	r3, [r7, #0]
    850a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    850e:	2b00      	cmp	r3, #0
    8510:	d00f      	beq.n	8532 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    8512:	687b      	ldr	r3, [r7, #4]
    8514:	68dc      	ldr	r4, [r3, #12]
    8516:	687b      	ldr	r3, [r7, #4]
    8518:	681b      	ldr	r3, [r3, #0]
    851a:	4618      	mov	r0, r3
    851c:	4b11      	ldr	r3, [pc, #68]	; (8564 <CAN1_Handler+0xc0>)
    851e:	4798      	blx	r3
    8520:	4603      	mov	r3, r0
    8522:	2b00      	cmp	r3, #0
    8524:	d001      	beq.n	852a <CAN1_Handler+0x86>
    8526:	2302      	movs	r3, #2
    8528:	e000      	b.n	852c <CAN1_Handler+0x88>
    852a:	2301      	movs	r3, #1
    852c:	4619      	mov	r1, r3
    852e:	6878      	ldr	r0, [r7, #4]
    8530:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    8532:	683b      	ldr	r3, [r7, #0]
    8534:	f003 0308 	and.w	r3, r3, #8
    8538:	2b00      	cmp	r3, #0
    853a:	d004      	beq.n	8546 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    853c:	687b      	ldr	r3, [r7, #4]
    853e:	68db      	ldr	r3, [r3, #12]
    8540:	2104      	movs	r1, #4
    8542:	6878      	ldr	r0, [r7, #4]
    8544:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    8546:	687b      	ldr	r3, [r7, #4]
    8548:	681b      	ldr	r3, [r3, #0]
    854a:	6839      	ldr	r1, [r7, #0]
    854c:	4618      	mov	r0, r3
    854e:	4b06      	ldr	r3, [pc, #24]	; (8568 <CAN1_Handler+0xc4>)
    8550:	4798      	blx	r3
}
    8552:	bf00      	nop
    8554:	370c      	adds	r7, #12
    8556:	46bd      	mov	sp, r7
    8558:	bd90      	pop	{r4, r7, pc}
    855a:	bf00      	nop
    855c:	20008a88 	.word	0x20008a88
    8560:	00008175 	.word	0x00008175
    8564:	0000800d 	.word	0x0000800d
    8568:	00008159 	.word	0x00008159

0000856c <__NVIC_SetPendingIRQ>:
{
    856c:	b480      	push	{r7}
    856e:	b083      	sub	sp, #12
    8570:	af00      	add	r7, sp, #0
    8572:	4603      	mov	r3, r0
    8574:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    857a:	2b00      	cmp	r3, #0
    857c:	db0c      	blt.n	8598 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    857e:	4909      	ldr	r1, [pc, #36]	; (85a4 <__NVIC_SetPendingIRQ+0x38>)
    8580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8584:	095b      	lsrs	r3, r3, #5
    8586:	88fa      	ldrh	r2, [r7, #6]
    8588:	f002 021f 	and.w	r2, r2, #31
    858c:	2001      	movs	r0, #1
    858e:	fa00 f202 	lsl.w	r2, r0, r2
    8592:	3340      	adds	r3, #64	; 0x40
    8594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8598:	bf00      	nop
    859a:	370c      	adds	r7, #12
    859c:	46bd      	mov	sp, r7
    859e:	f85d 7b04 	ldr.w	r7, [sp], #4
    85a2:	4770      	bx	lr
    85a4:	e000e100 	.word	0xe000e100

000085a8 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    85a8:	b580      	push	{r7, lr}
    85aa:	b082      	sub	sp, #8
    85ac:	af00      	add	r7, sp, #0
    85ae:	4603      	mov	r3, r0
    85b0:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    85b2:	79fb      	ldrb	r3, [r7, #7]
    85b4:	b21b      	sxth	r3, r3
    85b6:	4618      	mov	r0, r3
    85b8:	4b02      	ldr	r3, [pc, #8]	; (85c4 <_irq_set+0x1c>)
    85ba:	4798      	blx	r3
}
    85bc:	bf00      	nop
    85be:	3708      	adds	r7, #8
    85c0:	46bd      	mov	sp, r7
    85c2:	bd80      	pop	{r7, pc}
    85c4:	0000856d 	.word	0x0000856d

000085c8 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    85c8:	b480      	push	{r7}
    85ca:	b083      	sub	sp, #12
    85cc:	af00      	add	r7, sp, #0
    85ce:	4603      	mov	r3, r0
    85d0:	6039      	str	r1, [r7, #0]
    85d2:	80fb      	strh	r3, [r7, #6]
    85d4:	4613      	mov	r3, r2
    85d6:	717b      	strb	r3, [r7, #5]
	switch (power) {
    85d8:	797b      	ldrb	r3, [r7, #5]
    85da:	3b04      	subs	r3, #4
    85dc:	2b05      	cmp	r3, #5
    85de:	d86b      	bhi.n	86b8 <_get_cycles_for_us_internal+0xf0>
    85e0:	a201      	add	r2, pc, #4	; (adr r2, 85e8 <_get_cycles_for_us_internal+0x20>)
    85e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    85e6:	bf00      	nop
    85e8:	00008697 	.word	0x00008697
    85ec:	00008677 	.word	0x00008677
    85f0:	00008659 	.word	0x00008659
    85f4:	0000863b 	.word	0x0000863b
    85f8:	0000861d 	.word	0x0000861d
    85fc:	00008601 	.word	0x00008601
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    8600:	88fb      	ldrh	r3, [r7, #6]
    8602:	683a      	ldr	r2, [r7, #0]
    8604:	4935      	ldr	r1, [pc, #212]	; (86dc <_get_cycles_for_us_internal+0x114>)
    8606:	fba1 1202 	umull	r1, r2, r1, r2
    860a:	0c92      	lsrs	r2, r2, #18
    860c:	fb02 f303 	mul.w	r3, r2, r3
    8610:	3302      	adds	r3, #2
    8612:	4a33      	ldr	r2, [pc, #204]	; (86e0 <_get_cycles_for_us_internal+0x118>)
    8614:	fba2 2303 	umull	r2, r3, r2, r3
    8618:	085b      	lsrs	r3, r3, #1
    861a:	e059      	b.n	86d0 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    861c:	88fb      	ldrh	r3, [r7, #6]
    861e:	683a      	ldr	r2, [r7, #0]
    8620:	0952      	lsrs	r2, r2, #5
    8622:	4930      	ldr	r1, [pc, #192]	; (86e4 <_get_cycles_for_us_internal+0x11c>)
    8624:	fba1 1202 	umull	r1, r2, r1, r2
    8628:	09d2      	lsrs	r2, r2, #7
    862a:	fb02 f303 	mul.w	r3, r2, r3
    862e:	331d      	adds	r3, #29
    8630:	4a2d      	ldr	r2, [pc, #180]	; (86e8 <_get_cycles_for_us_internal+0x120>)
    8632:	fba2 2303 	umull	r2, r3, r2, r3
    8636:	091b      	lsrs	r3, r3, #4
    8638:	e04a      	b.n	86d0 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    863a:	88fb      	ldrh	r3, [r7, #6]
    863c:	683a      	ldr	r2, [r7, #0]
    863e:	492b      	ldr	r1, [pc, #172]	; (86ec <_get_cycles_for_us_internal+0x124>)
    8640:	fba1 1202 	umull	r1, r2, r1, r2
    8644:	0b52      	lsrs	r2, r2, #13
    8646:	fb02 f303 	mul.w	r3, r2, r3
    864a:	f203 132b 	addw	r3, r3, #299	; 0x12b
    864e:	4a28      	ldr	r2, [pc, #160]	; (86f0 <_get_cycles_for_us_internal+0x128>)
    8650:	fba2 2303 	umull	r2, r3, r2, r3
    8654:	095b      	lsrs	r3, r3, #5
    8656:	e03b      	b.n	86d0 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    8658:	88fb      	ldrh	r3, [r7, #6]
    865a:	683a      	ldr	r2, [r7, #0]
    865c:	4925      	ldr	r1, [pc, #148]	; (86f4 <_get_cycles_for_us_internal+0x12c>)
    865e:	fba1 1202 	umull	r1, r2, r1, r2
    8662:	0992      	lsrs	r2, r2, #6
    8664:	fb02 f303 	mul.w	r3, r2, r3
    8668:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    866c:	4a22      	ldr	r2, [pc, #136]	; (86f8 <_get_cycles_for_us_internal+0x130>)
    866e:	fba2 2303 	umull	r2, r3, r2, r3
    8672:	099b      	lsrs	r3, r3, #6
    8674:	e02c      	b.n	86d0 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    8676:	88fb      	ldrh	r3, [r7, #6]
    8678:	683a      	ldr	r2, [r7, #0]
    867a:	4920      	ldr	r1, [pc, #128]	; (86fc <_get_cycles_for_us_internal+0x134>)
    867c:	fba1 1202 	umull	r1, r2, r1, r2
    8680:	0952      	lsrs	r2, r2, #5
    8682:	fb02 f303 	mul.w	r3, r2, r3
    8686:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    868a:	332f      	adds	r3, #47	; 0x2f
    868c:	4a1c      	ldr	r2, [pc, #112]	; (8700 <_get_cycles_for_us_internal+0x138>)
    868e:	fba2 2303 	umull	r2, r3, r2, r3
    8692:	0b5b      	lsrs	r3, r3, #13
    8694:	e01c      	b.n	86d0 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    8696:	88fb      	ldrh	r3, [r7, #6]
    8698:	683a      	ldr	r2, [r7, #0]
    869a:	491a      	ldr	r1, [pc, #104]	; (8704 <_get_cycles_for_us_internal+0x13c>)
    869c:	fba1 1202 	umull	r1, r2, r1, r2
    86a0:	08d2      	lsrs	r2, r2, #3
    86a2:	fb02 f303 	mul.w	r3, r2, r3
    86a6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    86aa:	f203 33df 	addw	r3, r3, #991	; 0x3df
    86ae:	4a16      	ldr	r2, [pc, #88]	; (8708 <_get_cycles_for_us_internal+0x140>)
    86b0:	fba2 2303 	umull	r2, r3, r2, r3
    86b4:	0c5b      	lsrs	r3, r3, #17
    86b6:	e00b      	b.n	86d0 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    86b8:	88fb      	ldrh	r3, [r7, #6]
    86ba:	683a      	ldr	r2, [r7, #0]
    86bc:	fb02 f303 	mul.w	r3, r2, r3
    86c0:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    86c4:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    86c8:	4a10      	ldr	r2, [pc, #64]	; (870c <_get_cycles_for_us_internal+0x144>)
    86ca:	fba2 2303 	umull	r2, r3, r2, r3
    86ce:	0c9b      	lsrs	r3, r3, #18
	}
}
    86d0:	4618      	mov	r0, r3
    86d2:	370c      	adds	r7, #12
    86d4:	46bd      	mov	sp, r7
    86d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    86da:	4770      	bx	lr
    86dc:	431bde83 	.word	0x431bde83
    86e0:	aaaaaaab 	.word	0xaaaaaaab
    86e4:	0a7c5ac5 	.word	0x0a7c5ac5
    86e8:	88888889 	.word	0x88888889
    86ec:	d1b71759 	.word	0xd1b71759
    86f0:	1b4e81b5 	.word	0x1b4e81b5
    86f4:	10624dd3 	.word	0x10624dd3
    86f8:	057619f1 	.word	0x057619f1
    86fc:	51eb851f 	.word	0x51eb851f
    8700:	45e7b273 	.word	0x45e7b273
    8704:	cccccccd 	.word	0xcccccccd
    8708:	6fd91d85 	.word	0x6fd91d85
    870c:	165e9f81 	.word	0x165e9f81

00008710 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    8710:	b580      	push	{r7, lr}
    8712:	b082      	sub	sp, #8
    8714:	af00      	add	r7, sp, #0
    8716:	4603      	mov	r3, r0
    8718:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    871a:	88fb      	ldrh	r3, [r7, #6]
    871c:	2209      	movs	r2, #9
    871e:	4904      	ldr	r1, [pc, #16]	; (8730 <_get_cycles_for_us+0x20>)
    8720:	4618      	mov	r0, r3
    8722:	4b04      	ldr	r3, [pc, #16]	; (8734 <_get_cycles_for_us+0x24>)
    8724:	4798      	blx	r3
    8726:	4603      	mov	r3, r0
}
    8728:	4618      	mov	r0, r3
    872a:	3708      	adds	r7, #8
    872c:	46bd      	mov	sp, r7
    872e:	bd80      	pop	{r7, pc}
    8730:	07270e00 	.word	0x07270e00
    8734:	000085c9 	.word	0x000085c9

00008738 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    8738:	b480      	push	{r7}
    873a:	b083      	sub	sp, #12
    873c:	af00      	add	r7, sp, #0
    873e:	4603      	mov	r3, r0
    8740:	6039      	str	r1, [r7, #0]
    8742:	80fb      	strh	r3, [r7, #6]
    8744:	4613      	mov	r3, r2
    8746:	717b      	strb	r3, [r7, #5]
	switch (power) {
    8748:	797b      	ldrb	r3, [r7, #5]
    874a:	3b04      	subs	r3, #4
    874c:	2b05      	cmp	r3, #5
    874e:	d870      	bhi.n	8832 <_get_cycles_for_ms_internal+0xfa>
    8750:	a201      	add	r2, pc, #4	; (adr r2, 8758 <_get_cycles_for_ms_internal+0x20>)
    8752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8756:	bf00      	nop
    8758:	00008815 	.word	0x00008815
    875c:	000087f9 	.word	0x000087f9
    8760:	000087dd 	.word	0x000087dd
    8764:	000087b9 	.word	0x000087b9
    8768:	00008795 	.word	0x00008795
    876c:	00008771 	.word	0x00008771
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    8770:	88fb      	ldrh	r3, [r7, #6]
    8772:	683a      	ldr	r2, [r7, #0]
    8774:	4937      	ldr	r1, [pc, #220]	; (8854 <_get_cycles_for_ms_internal+0x11c>)
    8776:	fba1 1202 	umull	r1, r2, r1, r2
    877a:	0c92      	lsrs	r2, r2, #18
    877c:	fb02 f303 	mul.w	r3, r2, r3
    8780:	3302      	adds	r3, #2
    8782:	4a35      	ldr	r2, [pc, #212]	; (8858 <_get_cycles_for_ms_internal+0x120>)
    8784:	fba2 2303 	umull	r2, r3, r2, r3
    8788:	085b      	lsrs	r3, r3, #1
    878a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    878e:	fb02 f303 	mul.w	r3, r2, r3
    8792:	e058      	b.n	8846 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    8794:	88fb      	ldrh	r3, [r7, #6]
    8796:	683a      	ldr	r2, [r7, #0]
    8798:	0952      	lsrs	r2, r2, #5
    879a:	4930      	ldr	r1, [pc, #192]	; (885c <_get_cycles_for_ms_internal+0x124>)
    879c:	fba1 1202 	umull	r1, r2, r1, r2
    87a0:	09d2      	lsrs	r2, r2, #7
    87a2:	fb02 f303 	mul.w	r3, r2, r3
    87a6:	3302      	adds	r3, #2
    87a8:	4a2b      	ldr	r2, [pc, #172]	; (8858 <_get_cycles_for_ms_internal+0x120>)
    87aa:	fba2 2303 	umull	r2, r3, r2, r3
    87ae:	085b      	lsrs	r3, r3, #1
    87b0:	2264      	movs	r2, #100	; 0x64
    87b2:	fb02 f303 	mul.w	r3, r2, r3
    87b6:	e046      	b.n	8846 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    87b8:	88fb      	ldrh	r3, [r7, #6]
    87ba:	683a      	ldr	r2, [r7, #0]
    87bc:	4928      	ldr	r1, [pc, #160]	; (8860 <_get_cycles_for_ms_internal+0x128>)
    87be:	fba1 1202 	umull	r1, r2, r1, r2
    87c2:	0b52      	lsrs	r2, r2, #13
    87c4:	fb02 f303 	mul.w	r3, r2, r3
    87c8:	3302      	adds	r3, #2
    87ca:	4a23      	ldr	r2, [pc, #140]	; (8858 <_get_cycles_for_ms_internal+0x120>)
    87cc:	fba2 2303 	umull	r2, r3, r2, r3
    87d0:	085a      	lsrs	r2, r3, #1
    87d2:	4613      	mov	r3, r2
    87d4:	009b      	lsls	r3, r3, #2
    87d6:	4413      	add	r3, r2
    87d8:	005b      	lsls	r3, r3, #1
    87da:	e034      	b.n	8846 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    87dc:	88fb      	ldrh	r3, [r7, #6]
    87de:	683a      	ldr	r2, [r7, #0]
    87e0:	4920      	ldr	r1, [pc, #128]	; (8864 <_get_cycles_for_ms_internal+0x12c>)
    87e2:	fba1 1202 	umull	r1, r2, r1, r2
    87e6:	0992      	lsrs	r2, r2, #6
    87e8:	fb02 f303 	mul.w	r3, r2, r3
    87ec:	3302      	adds	r3, #2
    87ee:	4a1a      	ldr	r2, [pc, #104]	; (8858 <_get_cycles_for_ms_internal+0x120>)
    87f0:	fba2 2303 	umull	r2, r3, r2, r3
    87f4:	085b      	lsrs	r3, r3, #1
    87f6:	e026      	b.n	8846 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    87f8:	88fb      	ldrh	r3, [r7, #6]
    87fa:	683a      	ldr	r2, [r7, #0]
    87fc:	491a      	ldr	r1, [pc, #104]	; (8868 <_get_cycles_for_ms_internal+0x130>)
    87fe:	fba1 1202 	umull	r1, r2, r1, r2
    8802:	0952      	lsrs	r2, r2, #5
    8804:	fb02 f303 	mul.w	r3, r2, r3
    8808:	331d      	adds	r3, #29
    880a:	4a18      	ldr	r2, [pc, #96]	; (886c <_get_cycles_for_ms_internal+0x134>)
    880c:	fba2 2303 	umull	r2, r3, r2, r3
    8810:	091b      	lsrs	r3, r3, #4
    8812:	e018      	b.n	8846 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    8814:	88fb      	ldrh	r3, [r7, #6]
    8816:	683a      	ldr	r2, [r7, #0]
    8818:	4915      	ldr	r1, [pc, #84]	; (8870 <_get_cycles_for_ms_internal+0x138>)
    881a:	fba1 1202 	umull	r1, r2, r1, r2
    881e:	08d2      	lsrs	r2, r2, #3
    8820:	fb02 f303 	mul.w	r3, r2, r3
    8824:	f203 132b 	addw	r3, r3, #299	; 0x12b
    8828:	4a12      	ldr	r2, [pc, #72]	; (8874 <_get_cycles_for_ms_internal+0x13c>)
    882a:	fba2 2303 	umull	r2, r3, r2, r3
    882e:	095b      	lsrs	r3, r3, #5
    8830:	e009      	b.n	8846 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    8832:	88fb      	ldrh	r3, [r7, #6]
    8834:	683a      	ldr	r2, [r7, #0]
    8836:	fb02 f303 	mul.w	r3, r2, r3
    883a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    883e:	4a0e      	ldr	r2, [pc, #56]	; (8878 <_get_cycles_for_ms_internal+0x140>)
    8840:	fba2 2303 	umull	r2, r3, r2, r3
    8844:	099b      	lsrs	r3, r3, #6
	}
}
    8846:	4618      	mov	r0, r3
    8848:	370c      	adds	r7, #12
    884a:	46bd      	mov	sp, r7
    884c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8850:	4770      	bx	lr
    8852:	bf00      	nop
    8854:	431bde83 	.word	0x431bde83
    8858:	aaaaaaab 	.word	0xaaaaaaab
    885c:	0a7c5ac5 	.word	0x0a7c5ac5
    8860:	d1b71759 	.word	0xd1b71759
    8864:	10624dd3 	.word	0x10624dd3
    8868:	51eb851f 	.word	0x51eb851f
    886c:	88888889 	.word	0x88888889
    8870:	cccccccd 	.word	0xcccccccd
    8874:	1b4e81b5 	.word	0x1b4e81b5
    8878:	057619f1 	.word	0x057619f1

0000887c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    887c:	b580      	push	{r7, lr}
    887e:	b082      	sub	sp, #8
    8880:	af00      	add	r7, sp, #0
    8882:	4603      	mov	r3, r0
    8884:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    8886:	88fb      	ldrh	r3, [r7, #6]
    8888:	2209      	movs	r2, #9
    888a:	4904      	ldr	r1, [pc, #16]	; (889c <_get_cycles_for_ms+0x20>)
    888c:	4618      	mov	r0, r3
    888e:	4b04      	ldr	r3, [pc, #16]	; (88a0 <_get_cycles_for_ms+0x24>)
    8890:	4798      	blx	r3
    8892:	4603      	mov	r3, r0
}
    8894:	4618      	mov	r0, r3
    8896:	3708      	adds	r7, #8
    8898:	46bd      	mov	sp, r7
    889a:	bd80      	pop	{r7, pc}
    889c:	07270e00 	.word	0x07270e00
    88a0:	00008739 	.word	0x00008739
    88a4:	00000000 	.word	0x00000000

000088a8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    88a8:	b480      	push	{r7}
    88aa:	b083      	sub	sp, #12
    88ac:	af00      	add	r7, sp, #0
    88ae:	6078      	str	r0, [r7, #4]
    88b0:	6039      	str	r1, [r7, #0]
    88b2:	bf00      	nop
    88b4:	f3af 8000 	nop.w

000088b8 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    88b8:	3901      	subs	r1, #1
    88ba:	d8fd      	bhi.n	88b8 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    88bc:	bf00      	nop
    88be:	370c      	adds	r7, #12
    88c0:	46bd      	mov	sp, r7
    88c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    88c6:	4770      	bx	lr

000088c8 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    88c8:	b480      	push	{r7}
    88ca:	b083      	sub	sp, #12
    88cc:	af00      	add	r7, sp, #0
    88ce:	6078      	str	r0, [r7, #4]
    88d0:	460b      	mov	r3, r1
    88d2:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    88d4:	687b      	ldr	r3, [r7, #4]
    88d6:	881b      	ldrh	r3, [r3, #0]
    88d8:	b29a      	uxth	r2, r3
    88da:	887b      	ldrh	r3, [r7, #2]
    88dc:	021b      	lsls	r3, r3, #8
    88de:	b29b      	uxth	r3, r3
    88e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    88e4:	b29b      	uxth	r3, r3
    88e6:	4313      	orrs	r3, r2
    88e8:	b29a      	uxth	r2, r3
    88ea:	687b      	ldr	r3, [r7, #4]
    88ec:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    88ee:	bf00      	nop
    88f0:	370c      	adds	r7, #12
    88f2:	46bd      	mov	sp, r7
    88f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    88f8:	4770      	bx	lr

000088fa <hri_port_set_EVCTRL_reg>:
{
    88fa:	b480      	push	{r7}
    88fc:	b085      	sub	sp, #20
    88fe:	af00      	add	r7, sp, #0
    8900:	60f8      	str	r0, [r7, #12]
    8902:	460b      	mov	r3, r1
    8904:	607a      	str	r2, [r7, #4]
    8906:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    8908:	7afb      	ldrb	r3, [r7, #11]
    890a:	7afa      	ldrb	r2, [r7, #11]
    890c:	68f9      	ldr	r1, [r7, #12]
    890e:	01d2      	lsls	r2, r2, #7
    8910:	440a      	add	r2, r1
    8912:	322c      	adds	r2, #44	; 0x2c
    8914:	6811      	ldr	r1, [r2, #0]
    8916:	687a      	ldr	r2, [r7, #4]
    8918:	430a      	orrs	r2, r1
    891a:	68f9      	ldr	r1, [r7, #12]
    891c:	01db      	lsls	r3, r3, #7
    891e:	440b      	add	r3, r1
    8920:	332c      	adds	r3, #44	; 0x2c
    8922:	601a      	str	r2, [r3, #0]
}
    8924:	bf00      	nop
    8926:	3714      	adds	r7, #20
    8928:	46bd      	mov	sp, r7
    892a:	f85d 7b04 	ldr.w	r7, [sp], #4
    892e:	4770      	bx	lr

00008930 <_port_event_init>:

static inline void _port_event_init()
{
    8930:	b580      	push	{r7, lr}
    8932:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    8934:	2200      	movs	r2, #0
    8936:	2100      	movs	r1, #0
    8938:	480a      	ldr	r0, [pc, #40]	; (8964 <_port_event_init+0x34>)
    893a:	4b0b      	ldr	r3, [pc, #44]	; (8968 <_port_event_init+0x38>)
    893c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    893e:	2200      	movs	r2, #0
    8940:	2101      	movs	r1, #1
    8942:	4808      	ldr	r0, [pc, #32]	; (8964 <_port_event_init+0x34>)
    8944:	4b08      	ldr	r3, [pc, #32]	; (8968 <_port_event_init+0x38>)
    8946:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    8948:	f64e 72ef 	movw	r2, #61423	; 0xefef
    894c:	2102      	movs	r1, #2
    894e:	4805      	ldr	r0, [pc, #20]	; (8964 <_port_event_init+0x34>)
    8950:	4b05      	ldr	r3, [pc, #20]	; (8968 <_port_event_init+0x38>)
    8952:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    8954:	2200      	movs	r2, #0
    8956:	2103      	movs	r1, #3
    8958:	4802      	ldr	r0, [pc, #8]	; (8964 <_port_event_init+0x34>)
    895a:	4b03      	ldr	r3, [pc, #12]	; (8968 <_port_event_init+0x38>)
    895c:	4798      	blx	r3
}
    895e:	bf00      	nop
    8960:	bd80      	pop	{r7, pc}
    8962:	bf00      	nop
    8964:	41008000 	.word	0x41008000
    8968:	000088fb 	.word	0x000088fb

0000896c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    896c:	b580      	push	{r7, lr}
    896e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    8970:	2104      	movs	r1, #4
    8972:	480b      	ldr	r0, [pc, #44]	; (89a0 <_init_chip+0x34>)
    8974:	4b0b      	ldr	r3, [pc, #44]	; (89a4 <_init_chip+0x38>)
    8976:	4798      	blx	r3

	_osc32kctrl_init_sources();
    8978:	4b0b      	ldr	r3, [pc, #44]	; (89a8 <_init_chip+0x3c>)
    897a:	4798      	blx	r3
	_oscctrl_init_sources();
    897c:	4b0b      	ldr	r3, [pc, #44]	; (89ac <_init_chip+0x40>)
    897e:	4798      	blx	r3
	_mclk_init();
    8980:	4b0b      	ldr	r3, [pc, #44]	; (89b0 <_init_chip+0x44>)
    8982:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    8984:	f44f 6084 	mov.w	r0, #1056	; 0x420
    8988:	4b0a      	ldr	r3, [pc, #40]	; (89b4 <_init_chip+0x48>)
    898a:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    898c:	4b0a      	ldr	r3, [pc, #40]	; (89b8 <_init_chip+0x4c>)
    898e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    8990:	f640 30df 	movw	r0, #3039	; 0xbdf
    8994:	4b07      	ldr	r3, [pc, #28]	; (89b4 <_init_chip+0x48>)
    8996:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    8998:	4b08      	ldr	r3, [pc, #32]	; (89bc <_init_chip+0x50>)
    899a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    899c:	bf00      	nop
    899e:	bd80      	pop	{r7, pc}
    89a0:	41004000 	.word	0x41004000
    89a4:	000088c9 	.word	0x000088c9
    89a8:	00009691 	.word	0x00009691
    89ac:	00009b59 	.word	0x00009b59
    89b0:	000095b1 	.word	0x000095b1
    89b4:	00009471 	.word	0x00009471
    89b8:	00009b99 	.word	0x00009b99
    89bc:	00008931 	.word	0x00008931

000089c0 <hri_dsu_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
    89c0:	b480      	push	{r7}
    89c2:	b083      	sub	sp, #12
    89c4:	af00      	add	r7, sp, #0
    89c6:	6078      	str	r0, [r7, #4]
    89c8:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    89ca:	687b      	ldr	r3, [r7, #4]
    89cc:	683a      	ldr	r2, [r7, #0]
    89ce:	605a      	str	r2, [r3, #4]
	DSU_CRITICAL_SECTION_LEAVE();
}
    89d0:	bf00      	nop
    89d2:	370c      	adds	r7, #12
    89d4:	46bd      	mov	sp, r7
    89d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    89da:	4770      	bx	lr

000089dc <hri_dsu_write_LENGTH_LENGTH_bf>:
	tmp = (tmp & DSU_LENGTH_LENGTH(mask)) >> DSU_LENGTH_LENGTH_Pos;
	return tmp;
}

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
    89dc:	b480      	push	{r7}
    89de:	b085      	sub	sp, #20
    89e0:	af00      	add	r7, sp, #0
    89e2:	6078      	str	r0, [r7, #4]
    89e4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    89e6:	687b      	ldr	r3, [r7, #4]
    89e8:	689b      	ldr	r3, [r3, #8]
    89ea:	60fb      	str	r3, [r7, #12]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    89ec:	68fb      	ldr	r3, [r7, #12]
    89ee:	f003 0303 	and.w	r3, r3, #3
    89f2:	60fb      	str	r3, [r7, #12]
	tmp |= DSU_LENGTH_LENGTH(data);
    89f4:	683b      	ldr	r3, [r7, #0]
    89f6:	009b      	lsls	r3, r3, #2
    89f8:	68fa      	ldr	r2, [r7, #12]
    89fa:	4313      	orrs	r3, r2
    89fc:	60fb      	str	r3, [r7, #12]
	((Dsu *)hw)->LENGTH.reg = tmp;
    89fe:	687b      	ldr	r3, [r7, #4]
    8a00:	68fa      	ldr	r2, [r7, #12]
    8a02:	609a      	str	r2, [r3, #8]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8a04:	bf00      	nop
    8a06:	3714      	adds	r7, #20
    8a08:	46bd      	mov	sp, r7
    8a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a0e:	4770      	bx	lr

00008a10 <hri_dsu_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
    8a10:	b480      	push	{r7}
    8a12:	b083      	sub	sp, #12
    8a14:	af00      	add	r7, sp, #0
    8a16:	6078      	str	r0, [r7, #4]
    8a18:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    8a1a:	687b      	ldr	r3, [r7, #4]
    8a1c:	683a      	ldr	r2, [r7, #0]
    8a1e:	60da      	str	r2, [r3, #12]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8a20:	bf00      	nop
    8a22:	370c      	adds	r7, #12
    8a24:	46bd      	mov	sp, r7
    8a26:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a2a:	4770      	bx	lr

00008a2c <hri_dsu_read_DATA_reg>:
	((Dsu *)hw)->DATA.reg ^= mask;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline hri_dsu_data_reg_t hri_dsu_read_DATA_reg(const void *const hw)
{
    8a2c:	b480      	push	{r7}
    8a2e:	b083      	sub	sp, #12
    8a30:	af00      	add	r7, sp, #0
    8a32:	6078      	str	r0, [r7, #4]
	return ((Dsu *)hw)->DATA.reg;
    8a34:	687b      	ldr	r3, [r7, #4]
    8a36:	68db      	ldr	r3, [r3, #12]
}
    8a38:	4618      	mov	r0, r3
    8a3a:	370c      	adds	r7, #12
    8a3c:	46bd      	mov	sp, r7
    8a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a42:	4770      	bx	lr

00008a44 <hri_dsu_get_STATUSA_DONE_bit>:
{
	return ((Dsu *)hw)->CFG.reg;
}

static inline bool hri_dsu_get_STATUSA_DONE_bit(const void *const hw)
{
    8a44:	b480      	push	{r7}
    8a46:	b083      	sub	sp, #12
    8a48:	af00      	add	r7, sp, #0
    8a4a:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    8a4c:	687b      	ldr	r3, [r7, #4]
    8a4e:	785b      	ldrb	r3, [r3, #1]
    8a50:	b2db      	uxtb	r3, r3
    8a52:	f003 0301 	and.w	r3, r3, #1
    8a56:	2b00      	cmp	r3, #0
    8a58:	bf14      	ite	ne
    8a5a:	2301      	movne	r3, #1
    8a5c:	2300      	moveq	r3, #0
    8a5e:	b2db      	uxtb	r3, r3
}
    8a60:	4618      	mov	r0, r3
    8a62:	370c      	adds	r7, #12
    8a64:	46bd      	mov	sp, r7
    8a66:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a6a:	4770      	bx	lr

00008a6c <hri_dsu_clear_STATUSA_DONE_bit>:

static inline void hri_dsu_clear_STATUSA_DONE_bit(const void *const hw)
{
    8a6c:	b480      	push	{r7}
    8a6e:	b083      	sub	sp, #12
    8a70:	af00      	add	r7, sp, #0
    8a72:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    8a74:	687b      	ldr	r3, [r7, #4]
    8a76:	2201      	movs	r2, #1
    8a78:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8a7a:	bf00      	nop
    8a7c:	370c      	adds	r7, #12
    8a7e:	46bd      	mov	sp, r7
    8a80:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a84:	4770      	bx	lr

00008a86 <hri_dsu_get_STATUSA_BERR_bit>:
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_CRSTEXT;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dsu_get_STATUSA_BERR_bit(const void *const hw)
{
    8a86:	b480      	push	{r7}
    8a88:	b083      	sub	sp, #12
    8a8a:	af00      	add	r7, sp, #0
    8a8c:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    8a8e:	687b      	ldr	r3, [r7, #4]
    8a90:	785b      	ldrb	r3, [r3, #1]
    8a92:	b2db      	uxtb	r3, r3
    8a94:	089b      	lsrs	r3, r3, #2
    8a96:	f003 0301 	and.w	r3, r3, #1
    8a9a:	2b00      	cmp	r3, #0
    8a9c:	bf14      	ite	ne
    8a9e:	2301      	movne	r3, #1
    8aa0:	2300      	moveq	r3, #0
    8aa2:	b2db      	uxtb	r3, r3
}
    8aa4:	4618      	mov	r0, r3
    8aa6:	370c      	adds	r7, #12
    8aa8:	46bd      	mov	sp, r7
    8aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aae:	4770      	bx	lr

00008ab0 <hri_dsu_clear_STATUSA_BERR_bit>:

static inline void hri_dsu_clear_STATUSA_BERR_bit(const void *const hw)
{
    8ab0:	b480      	push	{r7}
    8ab2:	b083      	sub	sp, #12
    8ab4:	af00      	add	r7, sp, #0
    8ab6:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    8ab8:	687b      	ldr	r3, [r7, #4]
    8aba:	2204      	movs	r2, #4
    8abc:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8abe:	bf00      	nop
    8ac0:	370c      	adds	r7, #12
    8ac2:	46bd      	mov	sp, r7
    8ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ac8:	4770      	bx	lr

00008aca <hri_dsu_write_CTRL_reg>:
{
	return ((Dsu *)hw)->STATUSA.reg;
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
    8aca:	b480      	push	{r7}
    8acc:	b083      	sub	sp, #12
    8ace:	af00      	add	r7, sp, #0
    8ad0:	6078      	str	r0, [r7, #4]
    8ad2:	460b      	mov	r3, r1
    8ad4:	70fb      	strb	r3, [r7, #3]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    8ad6:	687b      	ldr	r3, [r7, #4]
    8ad8:	78fa      	ldrb	r2, [r7, #3]
    8ada:	701a      	strb	r2, [r3, #0]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8adc:	bf00      	nop
    8ade:	370c      	adds	r7, #12
    8ae0:	46bd      	mov	sp, r7
    8ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ae6:	4770      	bx	lr

00008ae8 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    8ae8:	b480      	push	{r7}
    8aea:	b083      	sub	sp, #12
    8aec:	af00      	add	r7, sp, #0
    8aee:	6078      	str	r0, [r7, #4]
    8af0:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    8af2:	687b      	ldr	r3, [r7, #4]
    8af4:	683a      	ldr	r2, [r7, #0]
    8af6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    8af8:	2300      	movs	r3, #0
}
    8afa:	4618      	mov	r0, r3
    8afc:	370c      	adds	r7, #12
    8afe:	46bd      	mov	sp, r7
    8b00:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b04:	4770      	bx	lr

00008b06 <_crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
    8b06:	b480      	push	{r7}
    8b08:	b083      	sub	sp, #12
    8b0a:	af00      	add	r7, sp, #0
    8b0c:	6078      	str	r0, [r7, #4]
	(void)device;

	return ERR_NONE;
    8b0e:	2300      	movs	r3, #0
}
    8b10:	4618      	mov	r0, r3
    8b12:	370c      	adds	r7, #12
    8b14:	46bd      	mov	sp, r7
    8b16:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b1a:	4770      	bx	lr

00008b1c <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    8b1c:	b580      	push	{r7, lr}
    8b1e:	b086      	sub	sp, #24
    8b20:	af00      	add	r7, sp, #0
    8b22:	60f8      	str	r0, [r7, #12]
    8b24:	60b9      	str	r1, [r7, #8]
    8b26:	607a      	str	r2, [r7, #4]
    8b28:	603b      	str	r3, [r7, #0]
	int32_t rc = ERR_NONE;
    8b2a:	2300      	movs	r3, #0
    8b2c:	617b      	str	r3, [r7, #20]
	if (((uint32_t)data) & 0x00000003) {
    8b2e:	68bb      	ldr	r3, [r7, #8]
    8b30:	f003 0303 	and.w	r3, r3, #3
    8b34:	2b00      	cmp	r3, #0
    8b36:	d002      	beq.n	8b3e <_crc_sync_crc32+0x22>
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
    8b38:	f06f 030c 	mvn.w	r3, #12
    8b3c:	e05e      	b.n	8bfc <_crc_sync_crc32+0xe0>
	}

	CRITICAL_SECTION_ENTER()
    8b3e:	f107 0310 	add.w	r3, r7, #16
    8b42:	4618      	mov	r0, r3
    8b44:	4b2f      	ldr	r3, [pc, #188]	; (8c04 <_crc_sync_crc32+0xe8>)
    8b46:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    8b48:	68fb      	ldr	r3, [r7, #12]
    8b4a:	681b      	ldr	r3, [r3, #0]
    8b4c:	4618      	mov	r0, r3
    8b4e:	4b2e      	ldr	r3, [pc, #184]	; (8c08 <_crc_sync_crc32+0xec>)
    8b50:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    8b52:	68fb      	ldr	r3, [r7, #12]
    8b54:	681b      	ldr	r3, [r3, #0]
    8b56:	68ba      	ldr	r2, [r7, #8]
    8b58:	4611      	mov	r1, r2
    8b5a:	4618      	mov	r0, r3
    8b5c:	4b2b      	ldr	r3, [pc, #172]	; (8c0c <_crc_sync_crc32+0xf0>)
    8b5e:	4798      	blx	r3
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    8b60:	68fb      	ldr	r3, [r7, #12]
    8b62:	681b      	ldr	r3, [r3, #0]
    8b64:	6879      	ldr	r1, [r7, #4]
    8b66:	4618      	mov	r0, r3
    8b68:	4b29      	ldr	r3, [pc, #164]	; (8c10 <_crc_sync_crc32+0xf4>)
    8b6a:	4798      	blx	r3
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    8b6c:	68fb      	ldr	r3, [r7, #12]
    8b6e:	681a      	ldr	r2, [r3, #0]
    8b70:	683b      	ldr	r3, [r7, #0]
    8b72:	681b      	ldr	r3, [r3, #0]
    8b74:	4619      	mov	r1, r3
    8b76:	4610      	mov	r0, r2
    8b78:	4b26      	ldr	r3, [pc, #152]	; (8c14 <_crc_sync_crc32+0xf8>)
    8b7a:	4798      	blx	r3
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    8b7c:	68fb      	ldr	r3, [r7, #12]
    8b7e:	681b      	ldr	r3, [r3, #0]
    8b80:	2104      	movs	r1, #4
    8b82:	4618      	mov	r0, r3
    8b84:	4b24      	ldr	r3, [pc, #144]	; (8c18 <_crc_sync_crc32+0xfc>)
    8b86:	4798      	blx	r3

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    8b88:	bf00      	nop
    8b8a:	68fb      	ldr	r3, [r7, #12]
    8b8c:	681b      	ldr	r3, [r3, #0]
    8b8e:	4618      	mov	r0, r3
    8b90:	4b22      	ldr	r3, [pc, #136]	; (8c1c <_crc_sync_crc32+0x100>)
    8b92:	4798      	blx	r3
    8b94:	4603      	mov	r3, r0
    8b96:	f083 0301 	eor.w	r3, r3, #1
    8b9a:	b2db      	uxtb	r3, r3
    8b9c:	2b00      	cmp	r3, #0
    8b9e:	d1f4      	bne.n	8b8a <_crc_sync_crc32+0x6e>
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    8ba0:	68fb      	ldr	r3, [r7, #12]
    8ba2:	681b      	ldr	r3, [r3, #0]
    8ba4:	4618      	mov	r0, r3
    8ba6:	4b1e      	ldr	r3, [pc, #120]	; (8c20 <_crc_sync_crc32+0x104>)
    8ba8:	4798      	blx	r3
    8baa:	4603      	mov	r3, r0
    8bac:	2b00      	cmp	r3, #0
    8bae:	d00d      	beq.n	8bcc <_crc_sync_crc32+0xb0>
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
    8bb0:	68fb      	ldr	r3, [r7, #12]
    8bb2:	681b      	ldr	r3, [r3, #0]
    8bb4:	4618      	mov	r0, r3
    8bb6:	4b1b      	ldr	r3, [pc, #108]	; (8c24 <_crc_sync_crc32+0x108>)
    8bb8:	4798      	blx	r3
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    8bba:	68fb      	ldr	r3, [r7, #12]
    8bbc:	681b      	ldr	r3, [r3, #0]
    8bbe:	4618      	mov	r0, r3
    8bc0:	4b19      	ldr	r3, [pc, #100]	; (8c28 <_crc_sync_crc32+0x10c>)
    8bc2:	4798      	blx	r3
		rc = ERR_IO;
    8bc4:	f06f 0305 	mvn.w	r3, #5
    8bc8:	617b      	str	r3, [r7, #20]
    8bca:	e007      	b.n	8bdc <_crc_sync_crc32+0xc0>
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    8bcc:	68fb      	ldr	r3, [r7, #12]
    8bce:	681b      	ldr	r3, [r3, #0]
    8bd0:	4618      	mov	r0, r3
    8bd2:	4b16      	ldr	r3, [pc, #88]	; (8c2c <_crc_sync_crc32+0x110>)
    8bd4:	4798      	blx	r3
    8bd6:	4602      	mov	r2, r0
    8bd8:	683b      	ldr	r3, [r7, #0]
    8bda:	601a      	str	r2, [r3, #0]
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    8bdc:	68fb      	ldr	r3, [r7, #12]
    8bde:	681b      	ldr	r3, [r3, #0]
    8be0:	4618      	mov	r0, r3
    8be2:	4b11      	ldr	r3, [pc, #68]	; (8c28 <_crc_sync_crc32+0x10c>)
    8be4:	4798      	blx	r3

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    8be6:	68fb      	ldr	r3, [r7, #12]
    8be8:	681b      	ldr	r3, [r3, #0]
    8bea:	4618      	mov	r0, r3
    8bec:	4b10      	ldr	r3, [pc, #64]	; (8c30 <_crc_sync_crc32+0x114>)
    8bee:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    8bf0:	f107 0310 	add.w	r3, r7, #16
    8bf4:	4618      	mov	r0, r3
    8bf6:	4b0f      	ldr	r3, [pc, #60]	; (8c34 <_crc_sync_crc32+0x118>)
    8bf8:	4798      	blx	r3

	return rc;
    8bfa:	697b      	ldr	r3, [r7, #20]
}
    8bfc:	4618      	mov	r0, r3
    8bfe:	3718      	adds	r7, #24
    8c00:	46bd      	mov	sp, r7
    8c02:	bd80      	pop	{r7, pc}
    8c04:	00010cad 	.word	0x00010cad
    8c08:	00009f39 	.word	0x00009f39
    8c0c:	000089c1 	.word	0x000089c1
    8c10:	000089dd 	.word	0x000089dd
    8c14:	00008a11 	.word	0x00008a11
    8c18:	00008acb 	.word	0x00008acb
    8c1c:	00008a45 	.word	0x00008a45
    8c20:	00008a87 	.word	0x00008a87
    8c24:	00008ab1 	.word	0x00008ab1
    8c28:	00008a6d 	.word	0x00008a6d
    8c2c:	00008a2d 	.word	0x00008a2d
    8c30:	00009ead 	.word	0x00009ead
    8c34:	00010cd3 	.word	0x00010cd3

00008c38 <__NVIC_EnableIRQ>:
{
    8c38:	b480      	push	{r7}
    8c3a:	b083      	sub	sp, #12
    8c3c:	af00      	add	r7, sp, #0
    8c3e:	4603      	mov	r3, r0
    8c40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8c46:	2b00      	cmp	r3, #0
    8c48:	db0b      	blt.n	8c62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8c4a:	4909      	ldr	r1, [pc, #36]	; (8c70 <__NVIC_EnableIRQ+0x38>)
    8c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8c50:	095b      	lsrs	r3, r3, #5
    8c52:	88fa      	ldrh	r2, [r7, #6]
    8c54:	f002 021f 	and.w	r2, r2, #31
    8c58:	2001      	movs	r0, #1
    8c5a:	fa00 f202 	lsl.w	r2, r0, r2
    8c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8c62:	bf00      	nop
    8c64:	370c      	adds	r7, #12
    8c66:	46bd      	mov	sp, r7
    8c68:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c6c:	4770      	bx	lr
    8c6e:	bf00      	nop
    8c70:	e000e100 	.word	0xe000e100

00008c74 <__NVIC_DisableIRQ>:
{
    8c74:	b480      	push	{r7}
    8c76:	b083      	sub	sp, #12
    8c78:	af00      	add	r7, sp, #0
    8c7a:	4603      	mov	r3, r0
    8c7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8c82:	2b00      	cmp	r3, #0
    8c84:	db10      	blt.n	8ca8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8c86:	490b      	ldr	r1, [pc, #44]	; (8cb4 <__NVIC_DisableIRQ+0x40>)
    8c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8c8c:	095b      	lsrs	r3, r3, #5
    8c8e:	88fa      	ldrh	r2, [r7, #6]
    8c90:	f002 021f 	and.w	r2, r2, #31
    8c94:	2001      	movs	r0, #1
    8c96:	fa00 f202 	lsl.w	r2, r0, r2
    8c9a:	3320      	adds	r3, #32
    8c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8ca0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8ca4:	f3bf 8f6f 	isb	sy
}
    8ca8:	bf00      	nop
    8caa:	370c      	adds	r7, #12
    8cac:	46bd      	mov	sp, r7
    8cae:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cb2:	4770      	bx	lr
    8cb4:	e000e100 	.word	0xe000e100

00008cb8 <__NVIC_ClearPendingIRQ>:
{
    8cb8:	b480      	push	{r7}
    8cba:	b083      	sub	sp, #12
    8cbc:	af00      	add	r7, sp, #0
    8cbe:	4603      	mov	r3, r0
    8cc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8cc6:	2b00      	cmp	r3, #0
    8cc8:	db0c      	blt.n	8ce4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8cca:	4909      	ldr	r1, [pc, #36]	; (8cf0 <__NVIC_ClearPendingIRQ+0x38>)
    8ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8cd0:	095b      	lsrs	r3, r3, #5
    8cd2:	88fa      	ldrh	r2, [r7, #6]
    8cd4:	f002 021f 	and.w	r2, r2, #31
    8cd8:	2001      	movs	r0, #1
    8cda:	fa00 f202 	lsl.w	r2, r0, r2
    8cde:	3360      	adds	r3, #96	; 0x60
    8ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8ce4:	bf00      	nop
    8ce6:	370c      	adds	r7, #12
    8ce8:	46bd      	mov	sp, r7
    8cea:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cee:	4770      	bx	lr
    8cf0:	e000e100 	.word	0xe000e100

00008cf4 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    8cf4:	b480      	push	{r7}
    8cf6:	b083      	sub	sp, #12
    8cf8:	af00      	add	r7, sp, #0
    8cfa:	6078      	str	r0, [r7, #4]
    8cfc:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    8cfe:	bf00      	nop
    8d00:	687b      	ldr	r3, [r7, #4]
    8d02:	685a      	ldr	r2, [r3, #4]
    8d04:	683b      	ldr	r3, [r7, #0]
    8d06:	4013      	ands	r3, r2
    8d08:	2b00      	cmp	r3, #0
    8d0a:	d1f9      	bne.n	8d00 <hri_eic_wait_for_sync+0xc>
	};
}
    8d0c:	bf00      	nop
    8d0e:	370c      	adds	r7, #12
    8d10:	46bd      	mov	sp, r7
    8d12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d16:	4770      	bx	lr

00008d18 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    8d18:	b480      	push	{r7}
    8d1a:	b083      	sub	sp, #12
    8d1c:	af00      	add	r7, sp, #0
    8d1e:	6078      	str	r0, [r7, #4]
    8d20:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    8d22:	687b      	ldr	r3, [r7, #4]
    8d24:	685a      	ldr	r2, [r3, #4]
    8d26:	683b      	ldr	r3, [r7, #0]
    8d28:	4013      	ands	r3, r2
    8d2a:	2b00      	cmp	r3, #0
    8d2c:	bf14      	ite	ne
    8d2e:	2301      	movne	r3, #1
    8d30:	2300      	moveq	r3, #0
    8d32:	b2db      	uxtb	r3, r3
}
    8d34:	4618      	mov	r0, r3
    8d36:	370c      	adds	r7, #12
    8d38:	46bd      	mov	sp, r7
    8d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d3e:	4770      	bx	lr

00008d40 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    8d40:	b480      	push	{r7}
    8d42:	b083      	sub	sp, #12
    8d44:	af00      	add	r7, sp, #0
    8d46:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    8d48:	687b      	ldr	r3, [r7, #4]
    8d4a:	695b      	ldr	r3, [r3, #20]
}
    8d4c:	4618      	mov	r0, r3
    8d4e:	370c      	adds	r7, #12
    8d50:	46bd      	mov	sp, r7
    8d52:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d56:	4770      	bx	lr

00008d58 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    8d58:	b480      	push	{r7}
    8d5a:	b083      	sub	sp, #12
    8d5c:	af00      	add	r7, sp, #0
    8d5e:	6078      	str	r0, [r7, #4]
    8d60:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    8d62:	687b      	ldr	r3, [r7, #4]
    8d64:	683a      	ldr	r2, [r7, #0]
    8d66:	615a      	str	r2, [r3, #20]
}
    8d68:	bf00      	nop
    8d6a:	370c      	adds	r7, #12
    8d6c:	46bd      	mov	sp, r7
    8d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d72:	4770      	bx	lr

00008d74 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    8d74:	b480      	push	{r7}
    8d76:	b083      	sub	sp, #12
    8d78:	af00      	add	r7, sp, #0
    8d7a:	6078      	str	r0, [r7, #4]
    8d7c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    8d7e:	687b      	ldr	r3, [r7, #4]
    8d80:	683a      	ldr	r2, [r7, #0]
    8d82:	611a      	str	r2, [r3, #16]
}
    8d84:	bf00      	nop
    8d86:	370c      	adds	r7, #12
    8d88:	46bd      	mov	sp, r7
    8d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d8e:	4770      	bx	lr

00008d90 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    8d90:	b480      	push	{r7}
    8d92:	b083      	sub	sp, #12
    8d94:	af00      	add	r7, sp, #0
    8d96:	6078      	str	r0, [r7, #4]
    8d98:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    8d9a:	687b      	ldr	r3, [r7, #4]
    8d9c:	683a      	ldr	r2, [r7, #0]
    8d9e:	60da      	str	r2, [r3, #12]
}
    8da0:	bf00      	nop
    8da2:	370c      	adds	r7, #12
    8da4:	46bd      	mov	sp, r7
    8da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8daa:	4770      	bx	lr

00008dac <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8dac:	b580      	push	{r7, lr}
    8dae:	b082      	sub	sp, #8
    8db0:	af00      	add	r7, sp, #0
    8db2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    8db4:	687b      	ldr	r3, [r7, #4]
    8db6:	781b      	ldrb	r3, [r3, #0]
    8db8:	b2db      	uxtb	r3, r3
    8dba:	f043 0302 	orr.w	r3, r3, #2
    8dbe:	b2da      	uxtb	r2, r3
    8dc0:	687b      	ldr	r3, [r7, #4]
    8dc2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    8dc4:	2103      	movs	r1, #3
    8dc6:	6878      	ldr	r0, [r7, #4]
    8dc8:	4b02      	ldr	r3, [pc, #8]	; (8dd4 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    8dca:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8dcc:	bf00      	nop
    8dce:	3708      	adds	r7, #8
    8dd0:	46bd      	mov	sp, r7
    8dd2:	bd80      	pop	{r7, pc}
    8dd4:	00008cf5 	.word	0x00008cf5

00008dd8 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8dd8:	b580      	push	{r7, lr}
    8dda:	b082      	sub	sp, #8
    8ddc:	af00      	add	r7, sp, #0
    8dde:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    8de0:	687b      	ldr	r3, [r7, #4]
    8de2:	781b      	ldrb	r3, [r3, #0]
    8de4:	b2db      	uxtb	r3, r3
    8de6:	f023 0302 	bic.w	r3, r3, #2
    8dea:	b2da      	uxtb	r2, r3
    8dec:	687b      	ldr	r3, [r7, #4]
    8dee:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    8df0:	2103      	movs	r1, #3
    8df2:	6878      	ldr	r0, [r7, #4]
    8df4:	4b02      	ldr	r3, [pc, #8]	; (8e00 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    8df6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8df8:	bf00      	nop
    8dfa:	3708      	adds	r7, #8
    8dfc:	46bd      	mov	sp, r7
    8dfe:	bd80      	pop	{r7, pc}
    8e00:	00008cf5 	.word	0x00008cf5

00008e04 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    8e04:	b580      	push	{r7, lr}
    8e06:	b084      	sub	sp, #16
    8e08:	af00      	add	r7, sp, #0
    8e0a:	6078      	str	r0, [r7, #4]
    8e0c:	460b      	mov	r3, r1
    8e0e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    8e10:	687b      	ldr	r3, [r7, #4]
    8e12:	781b      	ldrb	r3, [r3, #0]
    8e14:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    8e16:	7bfb      	ldrb	r3, [r7, #15]
    8e18:	f023 0310 	bic.w	r3, r3, #16
    8e1c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    8e1e:	78fb      	ldrb	r3, [r7, #3]
    8e20:	011b      	lsls	r3, r3, #4
    8e22:	b25a      	sxtb	r2, r3
    8e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8e28:	4313      	orrs	r3, r2
    8e2a:	b25b      	sxtb	r3, r3
    8e2c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    8e2e:	687b      	ldr	r3, [r7, #4]
    8e30:	7bfa      	ldrb	r2, [r7, #15]
    8e32:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8e34:	2103      	movs	r1, #3
    8e36:	6878      	ldr	r0, [r7, #4]
    8e38:	4b02      	ldr	r3, [pc, #8]	; (8e44 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    8e3a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8e3c:	bf00      	nop
    8e3e:	3710      	adds	r7, #16
    8e40:	46bd      	mov	sp, r7
    8e42:	bd80      	pop	{r7, pc}
    8e44:	00008cf5 	.word	0x00008cf5

00008e48 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    8e48:	b580      	push	{r7, lr}
    8e4a:	b084      	sub	sp, #16
    8e4c:	af00      	add	r7, sp, #0
    8e4e:	6078      	str	r0, [r7, #4]
    8e50:	460b      	mov	r3, r1
    8e52:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8e54:	2103      	movs	r1, #3
    8e56:	6878      	ldr	r0, [r7, #4]
    8e58:	4b06      	ldr	r3, [pc, #24]	; (8e74 <hri_eic_get_CTRLA_reg+0x2c>)
    8e5a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    8e5c:	687b      	ldr	r3, [r7, #4]
    8e5e:	781b      	ldrb	r3, [r3, #0]
    8e60:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8e62:	7bfa      	ldrb	r2, [r7, #15]
    8e64:	78fb      	ldrb	r3, [r7, #3]
    8e66:	4013      	ands	r3, r2
    8e68:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8e6a:	7bfb      	ldrb	r3, [r7, #15]
}
    8e6c:	4618      	mov	r0, r3
    8e6e:	3710      	adds	r7, #16
    8e70:	46bd      	mov	sp, r7
    8e72:	bd80      	pop	{r7, pc}
    8e74:	00008cf5 	.word	0x00008cf5

00008e78 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    8e78:	b580      	push	{r7, lr}
    8e7a:	b082      	sub	sp, #8
    8e7c:	af00      	add	r7, sp, #0
    8e7e:	6078      	str	r0, [r7, #4]
    8e80:	460b      	mov	r3, r1
    8e82:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    8e84:	687b      	ldr	r3, [r7, #4]
    8e86:	78fa      	ldrb	r2, [r7, #3]
    8e88:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8e8a:	2103      	movs	r1, #3
    8e8c:	6878      	ldr	r0, [r7, #4]
    8e8e:	4b03      	ldr	r3, [pc, #12]	; (8e9c <hri_eic_write_CTRLA_reg+0x24>)
    8e90:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8e92:	bf00      	nop
    8e94:	3708      	adds	r7, #8
    8e96:	46bd      	mov	sp, r7
    8e98:	bd80      	pop	{r7, pc}
    8e9a:	bf00      	nop
    8e9c:	00008cf5 	.word	0x00008cf5

00008ea0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    8ea0:	b480      	push	{r7}
    8ea2:	b083      	sub	sp, #12
    8ea4:	af00      	add	r7, sp, #0
    8ea6:	6078      	str	r0, [r7, #4]
    8ea8:	460b      	mov	r3, r1
    8eaa:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    8eac:	687b      	ldr	r3, [r7, #4]
    8eae:	78fa      	ldrb	r2, [r7, #3]
    8eb0:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8eb2:	bf00      	nop
    8eb4:	370c      	adds	r7, #12
    8eb6:	46bd      	mov	sp, r7
    8eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ebc:	4770      	bx	lr

00008ebe <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    8ebe:	b480      	push	{r7}
    8ec0:	b083      	sub	sp, #12
    8ec2:	af00      	add	r7, sp, #0
    8ec4:	6078      	str	r0, [r7, #4]
    8ec6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    8ec8:	687b      	ldr	r3, [r7, #4]
    8eca:	683a      	ldr	r2, [r7, #0]
    8ecc:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8ece:	bf00      	nop
    8ed0:	370c      	adds	r7, #12
    8ed2:	46bd      	mov	sp, r7
    8ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ed8:	4770      	bx	lr

00008eda <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    8eda:	b480      	push	{r7}
    8edc:	b083      	sub	sp, #12
    8ede:	af00      	add	r7, sp, #0
    8ee0:	6078      	str	r0, [r7, #4]
    8ee2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    8ee4:	687b      	ldr	r3, [r7, #4]
    8ee6:	683a      	ldr	r2, [r7, #0]
    8ee8:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8eea:	bf00      	nop
    8eec:	370c      	adds	r7, #12
    8eee:	46bd      	mov	sp, r7
    8ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ef4:	4770      	bx	lr

00008ef6 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    8ef6:	b480      	push	{r7}
    8ef8:	b085      	sub	sp, #20
    8efa:	af00      	add	r7, sp, #0
    8efc:	60f8      	str	r0, [r7, #12]
    8efe:	460b      	mov	r3, r1
    8f00:	607a      	str	r2, [r7, #4]
    8f02:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    8f04:	7afb      	ldrb	r3, [r7, #11]
    8f06:	68fa      	ldr	r2, [r7, #12]
    8f08:	3306      	adds	r3, #6
    8f0a:	009b      	lsls	r3, r3, #2
    8f0c:	4413      	add	r3, r2
    8f0e:	687a      	ldr	r2, [r7, #4]
    8f10:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8f12:	bf00      	nop
    8f14:	3714      	adds	r7, #20
    8f16:	46bd      	mov	sp, r7
    8f18:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f1c:	4770      	bx	lr

00008f1e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    8f1e:	b480      	push	{r7}
    8f20:	b083      	sub	sp, #12
    8f22:	af00      	add	r7, sp, #0
    8f24:	6078      	str	r0, [r7, #4]
    8f26:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    8f28:	687b      	ldr	r3, [r7, #4]
    8f2a:	683a      	ldr	r2, [r7, #0]
    8f2c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    8f2e:	bf00      	nop
    8f30:	370c      	adds	r7, #12
    8f32:	46bd      	mov	sp, r7
    8f34:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f38:	4770      	bx	lr

00008f3a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    8f3a:	b480      	push	{r7}
    8f3c:	b083      	sub	sp, #12
    8f3e:	af00      	add	r7, sp, #0
    8f40:	6078      	str	r0, [r7, #4]
    8f42:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    8f44:	687b      	ldr	r3, [r7, #4]
    8f46:	683a      	ldr	r2, [r7, #0]
    8f48:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    8f4a:	bf00      	nop
    8f4c:	370c      	adds	r7, #12
    8f4e:	46bd      	mov	sp, r7
    8f50:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f54:	4770      	bx	lr
	...

00008f58 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    8f58:	b580      	push	{r7, lr}
    8f5a:	b082      	sub	sp, #8
    8f5c:	af00      	add	r7, sp, #0
    8f5e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    8f60:	2101      	movs	r1, #1
    8f62:	4846      	ldr	r0, [pc, #280]	; (907c <_ext_irq_init+0x124>)
    8f64:	4b46      	ldr	r3, [pc, #280]	; (9080 <_ext_irq_init+0x128>)
    8f66:	4798      	blx	r3
    8f68:	4603      	mov	r3, r0
    8f6a:	f083 0301 	eor.w	r3, r3, #1
    8f6e:	b2db      	uxtb	r3, r3
    8f70:	2b00      	cmp	r3, #0
    8f72:	d011      	beq.n	8f98 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    8f74:	2102      	movs	r1, #2
    8f76:	4841      	ldr	r0, [pc, #260]	; (907c <_ext_irq_init+0x124>)
    8f78:	4b42      	ldr	r3, [pc, #264]	; (9084 <_ext_irq_init+0x12c>)
    8f7a:	4798      	blx	r3
    8f7c:	4603      	mov	r3, r0
    8f7e:	2b00      	cmp	r3, #0
    8f80:	d006      	beq.n	8f90 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    8f82:	483e      	ldr	r0, [pc, #248]	; (907c <_ext_irq_init+0x124>)
    8f84:	4b40      	ldr	r3, [pc, #256]	; (9088 <_ext_irq_init+0x130>)
    8f86:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    8f88:	2102      	movs	r1, #2
    8f8a:	483c      	ldr	r0, [pc, #240]	; (907c <_ext_irq_init+0x124>)
    8f8c:	4b3f      	ldr	r3, [pc, #252]	; (908c <_ext_irq_init+0x134>)
    8f8e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    8f90:	2101      	movs	r1, #1
    8f92:	483a      	ldr	r0, [pc, #232]	; (907c <_ext_irq_init+0x124>)
    8f94:	4b3e      	ldr	r3, [pc, #248]	; (9090 <_ext_irq_init+0x138>)
    8f96:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    8f98:	2101      	movs	r1, #1
    8f9a:	4838      	ldr	r0, [pc, #224]	; (907c <_ext_irq_init+0x124>)
    8f9c:	4b3b      	ldr	r3, [pc, #236]	; (908c <_ext_irq_init+0x134>)
    8f9e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    8fa0:	2100      	movs	r1, #0
    8fa2:	4836      	ldr	r0, [pc, #216]	; (907c <_ext_irq_init+0x124>)
    8fa4:	4b3b      	ldr	r3, [pc, #236]	; (9094 <_ext_irq_init+0x13c>)
    8fa6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    8fa8:	2100      	movs	r1, #0
    8faa:	4834      	ldr	r0, [pc, #208]	; (907c <_ext_irq_init+0x124>)
    8fac:	4b3a      	ldr	r3, [pc, #232]	; (9098 <_ext_irq_init+0x140>)
    8fae:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    8fb0:	2100      	movs	r1, #0
    8fb2:	4832      	ldr	r0, [pc, #200]	; (907c <_ext_irq_init+0x124>)
    8fb4:	4b39      	ldr	r3, [pc, #228]	; (909c <_ext_irq_init+0x144>)
    8fb6:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    8fb8:	f240 31b1 	movw	r1, #945	; 0x3b1
    8fbc:	482f      	ldr	r0, [pc, #188]	; (907c <_ext_irq_init+0x124>)
    8fbe:	4b38      	ldr	r3, [pc, #224]	; (90a0 <_ext_irq_init+0x148>)
    8fc0:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    8fc2:	f240 3131 	movw	r1, #817	; 0x331
    8fc6:	482d      	ldr	r0, [pc, #180]	; (907c <_ext_irq_init+0x124>)
    8fc8:	4b36      	ldr	r3, [pc, #216]	; (90a4 <_ext_irq_init+0x14c>)
    8fca:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    8fcc:	2100      	movs	r1, #0
    8fce:	482b      	ldr	r0, [pc, #172]	; (907c <_ext_irq_init+0x124>)
    8fd0:	4b35      	ldr	r3, [pc, #212]	; (90a8 <_ext_irq_init+0x150>)
    8fd2:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    8fd4:	4a35      	ldr	r2, [pc, #212]	; (90ac <_ext_irq_init+0x154>)
    8fd6:	2100      	movs	r1, #0
    8fd8:	4828      	ldr	r0, [pc, #160]	; (907c <_ext_irq_init+0x124>)
    8fda:	4b35      	ldr	r3, [pc, #212]	; (90b0 <_ext_irq_init+0x158>)
    8fdc:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    8fde:	2211      	movs	r2, #17
    8fe0:	2101      	movs	r1, #1
    8fe2:	4826      	ldr	r0, [pc, #152]	; (907c <_ext_irq_init+0x124>)
    8fe4:	4b32      	ldr	r3, [pc, #200]	; (90b0 <_ext_irq_init+0x158>)
    8fe6:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    8fe8:	4824      	ldr	r0, [pc, #144]	; (907c <_ext_irq_init+0x124>)
    8fea:	4b32      	ldr	r3, [pc, #200]	; (90b4 <_ext_irq_init+0x15c>)
    8fec:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    8fee:	200c      	movs	r0, #12
    8ff0:	4b31      	ldr	r3, [pc, #196]	; (90b8 <_ext_irq_init+0x160>)
    8ff2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    8ff4:	200c      	movs	r0, #12
    8ff6:	4b31      	ldr	r3, [pc, #196]	; (90bc <_ext_irq_init+0x164>)
    8ff8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    8ffa:	200c      	movs	r0, #12
    8ffc:	4b30      	ldr	r3, [pc, #192]	; (90c0 <_ext_irq_init+0x168>)
    8ffe:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    9000:	2010      	movs	r0, #16
    9002:	4b2d      	ldr	r3, [pc, #180]	; (90b8 <_ext_irq_init+0x160>)
    9004:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    9006:	2010      	movs	r0, #16
    9008:	4b2c      	ldr	r3, [pc, #176]	; (90bc <_ext_irq_init+0x164>)
    900a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    900c:	2010      	movs	r0, #16
    900e:	4b2c      	ldr	r3, [pc, #176]	; (90c0 <_ext_irq_init+0x168>)
    9010:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    9012:	2011      	movs	r0, #17
    9014:	4b28      	ldr	r3, [pc, #160]	; (90b8 <_ext_irq_init+0x160>)
    9016:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    9018:	2011      	movs	r0, #17
    901a:	4b28      	ldr	r3, [pc, #160]	; (90bc <_ext_irq_init+0x164>)
    901c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    901e:	2011      	movs	r0, #17
    9020:	4b27      	ldr	r3, [pc, #156]	; (90c0 <_ext_irq_init+0x168>)
    9022:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    9024:	2012      	movs	r0, #18
    9026:	4b24      	ldr	r3, [pc, #144]	; (90b8 <_ext_irq_init+0x160>)
    9028:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    902a:	2012      	movs	r0, #18
    902c:	4b23      	ldr	r3, [pc, #140]	; (90bc <_ext_irq_init+0x164>)
    902e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    9030:	2012      	movs	r0, #18
    9032:	4b23      	ldr	r3, [pc, #140]	; (90c0 <_ext_irq_init+0x168>)
    9034:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    9036:	2013      	movs	r0, #19
    9038:	4b1f      	ldr	r3, [pc, #124]	; (90b8 <_ext_irq_init+0x160>)
    903a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    903c:	2013      	movs	r0, #19
    903e:	4b1f      	ldr	r3, [pc, #124]	; (90bc <_ext_irq_init+0x164>)
    9040:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    9042:	2013      	movs	r0, #19
    9044:	4b1e      	ldr	r3, [pc, #120]	; (90c0 <_ext_irq_init+0x168>)
    9046:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    9048:	2014      	movs	r0, #20
    904a:	4b1b      	ldr	r3, [pc, #108]	; (90b8 <_ext_irq_init+0x160>)
    904c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    904e:	2014      	movs	r0, #20
    9050:	4b1a      	ldr	r3, [pc, #104]	; (90bc <_ext_irq_init+0x164>)
    9052:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    9054:	2014      	movs	r0, #20
    9056:	4b1a      	ldr	r3, [pc, #104]	; (90c0 <_ext_irq_init+0x168>)
    9058:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    905a:	2015      	movs	r0, #21
    905c:	4b16      	ldr	r3, [pc, #88]	; (90b8 <_ext_irq_init+0x160>)
    905e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    9060:	2015      	movs	r0, #21
    9062:	4b16      	ldr	r3, [pc, #88]	; (90bc <_ext_irq_init+0x164>)
    9064:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    9066:	2015      	movs	r0, #21
    9068:	4b15      	ldr	r3, [pc, #84]	; (90c0 <_ext_irq_init+0x168>)
    906a:	4798      	blx	r3

	callback = cb;
    906c:	4a15      	ldr	r2, [pc, #84]	; (90c4 <_ext_irq_init+0x16c>)
    906e:	687b      	ldr	r3, [r7, #4]
    9070:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    9072:	2300      	movs	r3, #0
}
    9074:	4618      	mov	r0, r3
    9076:	3708      	adds	r7, #8
    9078:	46bd      	mov	sp, r7
    907a:	bd80      	pop	{r7, pc}
    907c:	40002800 	.word	0x40002800
    9080:	00008d19 	.word	0x00008d19
    9084:	00008e49 	.word	0x00008e49
    9088:	00008dd9 	.word	0x00008dd9
    908c:	00008cf5 	.word	0x00008cf5
    9090:	00008e79 	.word	0x00008e79
    9094:	00008e05 	.word	0x00008e05
    9098:	00008ea1 	.word	0x00008ea1
    909c:	00008ebf 	.word	0x00008ebf
    90a0:	00008edb 	.word	0x00008edb
    90a4:	00008f1f 	.word	0x00008f1f
    90a8:	00008f3b 	.word	0x00008f3b
    90ac:	90990003 	.word	0x90990003
    90b0:	00008ef7 	.word	0x00008ef7
    90b4:	00008dad 	.word	0x00008dad
    90b8:	00008c75 	.word	0x00008c75
    90bc:	00008cb9 	.word	0x00008cb9
    90c0:	00008c39 	.word	0x00008c39
    90c4:	20008a8c 	.word	0x20008a8c

000090c8 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    90c8:	b580      	push	{r7, lr}
    90ca:	b084      	sub	sp, #16
    90cc:	af00      	add	r7, sp, #0
    90ce:	6078      	str	r0, [r7, #4]
    90d0:	460b      	mov	r3, r1
    90d2:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    90d4:	23ff      	movs	r3, #255	; 0xff
    90d6:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    90d8:	2300      	movs	r3, #0
    90da:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    90dc:	e010      	b.n	9100 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    90de:	7bbb      	ldrb	r3, [r7, #14]
    90e0:	4a1c      	ldr	r2, [pc, #112]	; (9154 <_ext_irq_enable+0x8c>)
    90e2:	00db      	lsls	r3, r3, #3
    90e4:	4413      	add	r3, r2
    90e6:	685a      	ldr	r2, [r3, #4]
    90e8:	687b      	ldr	r3, [r7, #4]
    90ea:	429a      	cmp	r2, r3
    90ec:	d105      	bne.n	90fa <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    90ee:	7bbb      	ldrb	r3, [r7, #14]
    90f0:	4a18      	ldr	r2, [pc, #96]	; (9154 <_ext_irq_enable+0x8c>)
    90f2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    90f6:	73fb      	strb	r3, [r7, #15]
			break;
    90f8:	e005      	b.n	9106 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    90fa:	7bbb      	ldrb	r3, [r7, #14]
    90fc:	3301      	adds	r3, #1
    90fe:	73bb      	strb	r3, [r7, #14]
    9100:	7bbb      	ldrb	r3, [r7, #14]
    9102:	2b06      	cmp	r3, #6
    9104:	d9eb      	bls.n	90de <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    9106:	7bfb      	ldrb	r3, [r7, #15]
    9108:	2bff      	cmp	r3, #255	; 0xff
    910a:	d102      	bne.n	9112 <_ext_irq_enable+0x4a>
		return -1;
    910c:	f04f 33ff 	mov.w	r3, #4294967295
    9110:	e01c      	b.n	914c <_ext_irq_enable+0x84>
	}

	if (enable) {
    9112:	78fb      	ldrb	r3, [r7, #3]
    9114:	2b00      	cmp	r3, #0
    9116:	d008      	beq.n	912a <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    9118:	7bfb      	ldrb	r3, [r7, #15]
    911a:	2201      	movs	r2, #1
    911c:	fa02 f303 	lsl.w	r3, r2, r3
    9120:	4619      	mov	r1, r3
    9122:	480d      	ldr	r0, [pc, #52]	; (9158 <_ext_irq_enable+0x90>)
    9124:	4b0d      	ldr	r3, [pc, #52]	; (915c <_ext_irq_enable+0x94>)
    9126:	4798      	blx	r3
    9128:	e00f      	b.n	914a <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    912a:	7bfb      	ldrb	r3, [r7, #15]
    912c:	2201      	movs	r2, #1
    912e:	fa02 f303 	lsl.w	r3, r2, r3
    9132:	4619      	mov	r1, r3
    9134:	4808      	ldr	r0, [pc, #32]	; (9158 <_ext_irq_enable+0x90>)
    9136:	4b0a      	ldr	r3, [pc, #40]	; (9160 <_ext_irq_enable+0x98>)
    9138:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    913a:	7bfb      	ldrb	r3, [r7, #15]
    913c:	2201      	movs	r2, #1
    913e:	fa02 f303 	lsl.w	r3, r2, r3
    9142:	4619      	mov	r1, r3
    9144:	4804      	ldr	r0, [pc, #16]	; (9158 <_ext_irq_enable+0x90>)
    9146:	4b07      	ldr	r3, [pc, #28]	; (9164 <_ext_irq_enable+0x9c>)
    9148:	4798      	blx	r3
	}

	return ERR_NONE;
    914a:	2300      	movs	r3, #0
}
    914c:	4618      	mov	r0, r3
    914e:	3710      	adds	r7, #16
    9150:	46bd      	mov	sp, r7
    9152:	bd80      	pop	{r7, pc}
    9154:	0002028c 	.word	0x0002028c
    9158:	40002800 	.word	0x40002800
    915c:	00008d75 	.word	0x00008d75
    9160:	00008d91 	.word	0x00008d91
    9164:	00008d59 	.word	0x00008d59

00009168 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    9168:	b580      	push	{r7, lr}
    916a:	b084      	sub	sp, #16
    916c:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    916e:	4841      	ldr	r0, [pc, #260]	; (9274 <_ext_irq_handler+0x10c>)
    9170:	4b41      	ldr	r3, [pc, #260]	; (9278 <_ext_irq_handler+0x110>)
    9172:	4798      	blx	r3
    9174:	4603      	mov	r3, r0
    9176:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    9178:	f04f 33ff 	mov.w	r3, #4294967295
    917c:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    917e:	683b      	ldr	r3, [r7, #0]
    9180:	4619      	mov	r1, r3
    9182:	483c      	ldr	r0, [pc, #240]	; (9274 <_ext_irq_handler+0x10c>)
    9184:	4b3d      	ldr	r3, [pc, #244]	; (927c <_ext_irq_handler+0x114>)
    9186:	4798      	blx	r3

	ASSERT(callback);
    9188:	4b3d      	ldr	r3, [pc, #244]	; (9280 <_ext_irq_handler+0x118>)
    918a:	681b      	ldr	r3, [r3, #0]
    918c:	2b00      	cmp	r3, #0
    918e:	bf14      	ite	ne
    9190:	2301      	movne	r3, #1
    9192:	2300      	moveq	r3, #0
    9194:	b2db      	uxtb	r3, r3
    9196:	f44f 7280 	mov.w	r2, #256	; 0x100
    919a:	493a      	ldr	r1, [pc, #232]	; (9284 <_ext_irq_handler+0x11c>)
    919c:	4618      	mov	r0, r3
    919e:	4b3a      	ldr	r3, [pc, #232]	; (9288 <_ext_irq_handler+0x120>)
    91a0:	4798      	blx	r3

	while (flags) {
    91a2:	e060      	b.n	9266 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    91a4:	683b      	ldr	r3, [r7, #0]
    91a6:	4618      	mov	r0, r3
    91a8:	4b38      	ldr	r3, [pc, #224]	; (928c <_ext_irq_handler+0x124>)
    91aa:	4798      	blx	r3
    91ac:	4603      	mov	r3, r0
    91ae:	b2db      	uxtb	r3, r3
    91b0:	3b01      	subs	r3, #1
    91b2:	b2db      	uxtb	r3, r3
    91b4:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    91b6:	e047      	b.n	9248 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    91b8:	2300      	movs	r3, #0
    91ba:	71fb      	strb	r3, [r7, #7]
    91bc:	2307      	movs	r3, #7
    91be:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    91c0:	e024      	b.n	920c <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    91c2:	79ba      	ldrb	r2, [r7, #6]
    91c4:	79fb      	ldrb	r3, [r7, #7]
    91c6:	4413      	add	r3, r2
    91c8:	105b      	asrs	r3, r3, #1
    91ca:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    91cc:	797b      	ldrb	r3, [r7, #5]
    91ce:	4a30      	ldr	r2, [pc, #192]	; (9290 <_ext_irq_handler+0x128>)
    91d0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    91d4:	461a      	mov	r2, r3
    91d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    91da:	429a      	cmp	r2, r3
    91dc:	d106      	bne.n	91ec <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    91de:	797b      	ldrb	r3, [r7, #5]
    91e0:	4a2b      	ldr	r2, [pc, #172]	; (9290 <_ext_irq_handler+0x128>)
    91e2:	00db      	lsls	r3, r3, #3
    91e4:	4413      	add	r3, r2
    91e6:	685b      	ldr	r3, [r3, #4]
    91e8:	60bb      	str	r3, [r7, #8]
					break;
    91ea:	e013      	b.n	9214 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    91ec:	797b      	ldrb	r3, [r7, #5]
    91ee:	4a28      	ldr	r2, [pc, #160]	; (9290 <_ext_irq_handler+0x128>)
    91f0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    91f4:	461a      	mov	r2, r3
    91f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    91fa:	429a      	cmp	r2, r3
    91fc:	da03      	bge.n	9206 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    91fe:	797b      	ldrb	r3, [r7, #5]
    9200:	3301      	adds	r3, #1
    9202:	71fb      	strb	r3, [r7, #7]
    9204:	e002      	b.n	920c <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    9206:	797b      	ldrb	r3, [r7, #5]
    9208:	3b01      	subs	r3, #1
    920a:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    920c:	79ba      	ldrb	r2, [r7, #6]
    920e:	79fb      	ldrb	r3, [r7, #7]
    9210:	429a      	cmp	r2, r3
    9212:	d2d6      	bcs.n	91c2 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    9214:	68bb      	ldr	r3, [r7, #8]
    9216:	f1b3 3fff 	cmp.w	r3, #4294967295
    921a:	d003      	beq.n	9224 <_ext_irq_handler+0xbc>
				callback(pin);
    921c:	4b18      	ldr	r3, [pc, #96]	; (9280 <_ext_irq_handler+0x118>)
    921e:	681b      	ldr	r3, [r3, #0]
    9220:	68b8      	ldr	r0, [r7, #8]
    9222:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    9224:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9228:	2201      	movs	r2, #1
    922a:	fa02 f303 	lsl.w	r3, r2, r3
    922e:	43da      	mvns	r2, r3
    9230:	683b      	ldr	r3, [r7, #0]
    9232:	4013      	ands	r3, r2
    9234:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    9236:	683b      	ldr	r3, [r7, #0]
    9238:	4618      	mov	r0, r3
    923a:	4b14      	ldr	r3, [pc, #80]	; (928c <_ext_irq_handler+0x124>)
    923c:	4798      	blx	r3
    923e:	4603      	mov	r3, r0
    9240:	b2db      	uxtb	r3, r3
    9242:	3b01      	subs	r3, #1
    9244:	b2db      	uxtb	r3, r3
    9246:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    9248:	f997 300f 	ldrsb.w	r3, [r7, #15]
    924c:	f1b3 3fff 	cmp.w	r3, #4294967295
    9250:	d1b2      	bne.n	91b8 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    9252:	4808      	ldr	r0, [pc, #32]	; (9274 <_ext_irq_handler+0x10c>)
    9254:	4b08      	ldr	r3, [pc, #32]	; (9278 <_ext_irq_handler+0x110>)
    9256:	4798      	blx	r3
    9258:	4603      	mov	r3, r0
    925a:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    925c:	683b      	ldr	r3, [r7, #0]
    925e:	4619      	mov	r1, r3
    9260:	4804      	ldr	r0, [pc, #16]	; (9274 <_ext_irq_handler+0x10c>)
    9262:	4b06      	ldr	r3, [pc, #24]	; (927c <_ext_irq_handler+0x114>)
    9264:	4798      	blx	r3
	while (flags) {
    9266:	683b      	ldr	r3, [r7, #0]
    9268:	2b00      	cmp	r3, #0
    926a:	d19b      	bne.n	91a4 <_ext_irq_handler+0x3c>
	}
}
    926c:	bf00      	nop
    926e:	3710      	adds	r7, #16
    9270:	46bd      	mov	sp, r7
    9272:	bd80      	pop	{r7, pc}
    9274:	40002800 	.word	0x40002800
    9278:	00008d41 	.word	0x00008d41
    927c:	00008d59 	.word	0x00008d59
    9280:	20008a8c 	.word	0x20008a8c
    9284:	000202c4 	.word	0x000202c4
    9288:	00007d5d 	.word	0x00007d5d
    928c:	0001b951 	.word	0x0001b951
    9290:	0002028c 	.word	0x0002028c

00009294 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    9294:	b580      	push	{r7, lr}
    9296:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9298:	4b01      	ldr	r3, [pc, #4]	; (92a0 <EIC_0_Handler+0xc>)
    929a:	4798      	blx	r3
} /**
    929c:	bf00      	nop
    929e:	bd80      	pop	{r7, pc}
    92a0:	00009169 	.word	0x00009169

000092a4 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    92a4:	b580      	push	{r7, lr}
    92a6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    92a8:	4b01      	ldr	r3, [pc, #4]	; (92b0 <EIC_4_Handler+0xc>)
    92aa:	4798      	blx	r3
} /**
    92ac:	bf00      	nop
    92ae:	bd80      	pop	{r7, pc}
    92b0:	00009169 	.word	0x00009169

000092b4 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    92b4:	b580      	push	{r7, lr}
    92b6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    92b8:	4b01      	ldr	r3, [pc, #4]	; (92c0 <EIC_5_Handler+0xc>)
    92ba:	4798      	blx	r3
} /**
    92bc:	bf00      	nop
    92be:	bd80      	pop	{r7, pc}
    92c0:	00009169 	.word	0x00009169

000092c4 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    92c4:	b580      	push	{r7, lr}
    92c6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    92c8:	4b01      	ldr	r3, [pc, #4]	; (92d0 <EIC_6_Handler+0xc>)
    92ca:	4798      	blx	r3
} /**
    92cc:	bf00      	nop
    92ce:	bd80      	pop	{r7, pc}
    92d0:	00009169 	.word	0x00009169

000092d4 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    92d4:	b580      	push	{r7, lr}
    92d6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    92d8:	4b01      	ldr	r3, [pc, #4]	; (92e0 <EIC_7_Handler+0xc>)
    92da:	4798      	blx	r3
} /**
    92dc:	bf00      	nop
    92de:	bd80      	pop	{r7, pc}
    92e0:	00009169 	.word	0x00009169

000092e4 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    92e4:	b580      	push	{r7, lr}
    92e6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    92e8:	4b01      	ldr	r3, [pc, #4]	; (92f0 <EIC_8_Handler+0xc>)
    92ea:	4798      	blx	r3
} /**
    92ec:	bf00      	nop
    92ee:	bd80      	pop	{r7, pc}
    92f0:	00009169 	.word	0x00009169

000092f4 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    92f4:	b580      	push	{r7, lr}
    92f6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    92f8:	4b01      	ldr	r3, [pc, #4]	; (9300 <EIC_9_Handler+0xc>)
    92fa:	4798      	blx	r3
}
    92fc:	bf00      	nop
    92fe:	bd80      	pop	{r7, pc}
    9300:	00009169 	.word	0x00009169

00009304 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    9304:	b480      	push	{r7}
    9306:	b085      	sub	sp, #20
    9308:	af00      	add	r7, sp, #0
    930a:	60f8      	str	r0, [r7, #12]
    930c:	460b      	mov	r3, r1
    930e:	607a      	str	r2, [r7, #4]
    9310:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    9312:	7afa      	ldrb	r2, [r7, #11]
    9314:	68fb      	ldr	r3, [r7, #12]
    9316:	3248      	adds	r2, #72	; 0x48
    9318:	6879      	ldr	r1, [r7, #4]
    931a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    931e:	bf00      	nop
    9320:	3714      	adds	r7, #20
    9322:	46bd      	mov	sp, r7
    9324:	f85d 7b04 	ldr.w	r7, [sp], #4
    9328:	4770      	bx	lr

0000932a <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    932a:	b480      	push	{r7}
    932c:	b083      	sub	sp, #12
    932e:	af00      	add	r7, sp, #0
    9330:	6078      	str	r0, [r7, #4]
    9332:	460b      	mov	r3, r1
    9334:	70fb      	strb	r3, [r7, #3]
    9336:	4613      	mov	r3, r2
    9338:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    933a:	78fb      	ldrb	r3, [r7, #3]
    933c:	687a      	ldr	r2, [r7, #4]
    933e:	3304      	adds	r3, #4
    9340:	00db      	lsls	r3, r3, #3
    9342:	4413      	add	r3, r2
    9344:	78ba      	ldrb	r2, [r7, #2]
    9346:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    9348:	78fb      	ldrb	r3, [r7, #3]
    934a:	78ba      	ldrb	r2, [r7, #2]
    934c:	43d2      	mvns	r2, r2
    934e:	b2d1      	uxtb	r1, r2
    9350:	687a      	ldr	r2, [r7, #4]
    9352:	3304      	adds	r3, #4
    9354:	00db      	lsls	r3, r3, #3
    9356:	4413      	add	r3, r2
    9358:	460a      	mov	r2, r1
    935a:	711a      	strb	r2, [r3, #4]
}
    935c:	bf00      	nop
    935e:	370c      	adds	r7, #12
    9360:	46bd      	mov	sp, r7
    9362:	f85d 7b04 	ldr.w	r7, [sp], #4
    9366:	4770      	bx	lr

00009368 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    9368:	b480      	push	{r7}
    936a:	b085      	sub	sp, #20
    936c:	af00      	add	r7, sp, #0
    936e:	60f8      	str	r0, [r7, #12]
    9370:	460b      	mov	r3, r1
    9372:	607a      	str	r2, [r7, #4]
    9374:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    9376:	7afa      	ldrb	r2, [r7, #11]
    9378:	68fb      	ldr	r3, [r7, #12]
    937a:	3204      	adds	r2, #4
    937c:	6879      	ldr	r1, [r7, #4]
    937e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    9382:	bf00      	nop
    9384:	3714      	adds	r7, #20
    9386:	46bd      	mov	sp, r7
    9388:	f85d 7b04 	ldr.w	r7, [sp], #4
    938c:	4770      	bx	lr
	...

00009390 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    9390:	b580      	push	{r7, lr}
    9392:	b082      	sub	sp, #8
    9394:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    9396:	2300      	movs	r3, #0
    9398:	71fb      	strb	r3, [r7, #7]
    939a:	e00b      	b.n	93b4 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    939c:	79fb      	ldrb	r3, [r7, #7]
    939e:	4a18      	ldr	r2, [pc, #96]	; (9400 <_event_system_init+0x70>)
    93a0:	5cd3      	ldrb	r3, [r2, r3]
    93a2:	461a      	mov	r2, r3
    93a4:	79fb      	ldrb	r3, [r7, #7]
    93a6:	4619      	mov	r1, r3
    93a8:	4816      	ldr	r0, [pc, #88]	; (9404 <_event_system_init+0x74>)
    93aa:	4b17      	ldr	r3, [pc, #92]	; (9408 <_event_system_init+0x78>)
    93ac:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    93ae:	79fb      	ldrb	r3, [r7, #7]
    93b0:	3301      	adds	r3, #1
    93b2:	71fb      	strb	r3, [r7, #7]
    93b4:	79fb      	ldrb	r3, [r7, #7]
    93b6:	2b42      	cmp	r3, #66	; 0x42
    93b8:	d9f0      	bls.n	939c <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    93ba:	2300      	movs	r3, #0
    93bc:	71fb      	strb	r3, [r7, #7]
    93be:	e016      	b.n	93ee <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    93c0:	79fb      	ldrb	r3, [r7, #7]
    93c2:	4a12      	ldr	r2, [pc, #72]	; (940c <_event_system_init+0x7c>)
    93c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    93c8:	461a      	mov	r2, r3
    93ca:	79fb      	ldrb	r3, [r7, #7]
    93cc:	4619      	mov	r1, r3
    93ce:	480d      	ldr	r0, [pc, #52]	; (9404 <_event_system_init+0x74>)
    93d0:	4b0f      	ldr	r3, [pc, #60]	; (9410 <_event_system_init+0x80>)
    93d2:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    93d4:	79fb      	ldrb	r3, [r7, #7]
    93d6:	4a0f      	ldr	r2, [pc, #60]	; (9414 <_event_system_init+0x84>)
    93d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93dc:	b2da      	uxtb	r2, r3
    93de:	79fb      	ldrb	r3, [r7, #7]
    93e0:	4619      	mov	r1, r3
    93e2:	4808      	ldr	r0, [pc, #32]	; (9404 <_event_system_init+0x74>)
    93e4:	4b0c      	ldr	r3, [pc, #48]	; (9418 <_event_system_init+0x88>)
    93e6:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    93e8:	79fb      	ldrb	r3, [r7, #7]
    93ea:	3301      	adds	r3, #1
    93ec:	71fb      	strb	r3, [r7, #7]
    93ee:	79fb      	ldrb	r3, [r7, #7]
    93f0:	2b1f      	cmp	r3, #31
    93f2:	d9e5      	bls.n	93c0 <_event_system_init+0x30>
	}

	return ERR_NONE;
    93f4:	2300      	movs	r3, #0
}
    93f6:	4618      	mov	r0, r3
    93f8:	3708      	adds	r7, #8
    93fa:	46bd      	mov	sp, r7
    93fc:	bd80      	pop	{r7, pc}
    93fe:	bf00      	nop
    9400:	000202dc 	.word	0x000202dc
    9404:	4100e000 	.word	0x4100e000
    9408:	00009305 	.word	0x00009305
    940c:	00020320 	.word	0x00020320
    9410:	00009369 	.word	0x00009369
    9414:	00020360 	.word	0x00020360
    9418:	0000932b 	.word	0x0000932b

0000941c <hri_gclk_wait_for_sync>:
{
    941c:	b480      	push	{r7}
    941e:	b083      	sub	sp, #12
    9420:	af00      	add	r7, sp, #0
    9422:	6078      	str	r0, [r7, #4]
    9424:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    9426:	bf00      	nop
    9428:	687b      	ldr	r3, [r7, #4]
    942a:	685a      	ldr	r2, [r3, #4]
    942c:	683b      	ldr	r3, [r7, #0]
    942e:	4013      	ands	r3, r2
    9430:	2b00      	cmp	r3, #0
    9432:	d1f9      	bne.n	9428 <hri_gclk_wait_for_sync+0xc>
}
    9434:	bf00      	nop
    9436:	370c      	adds	r7, #12
    9438:	46bd      	mov	sp, r7
    943a:	f85d 7b04 	ldr.w	r7, [sp], #4
    943e:	4770      	bx	lr

00009440 <hri_gclk_write_GENCTRL_reg>:
{
    9440:	b580      	push	{r7, lr}
    9442:	b084      	sub	sp, #16
    9444:	af00      	add	r7, sp, #0
    9446:	60f8      	str	r0, [r7, #12]
    9448:	460b      	mov	r3, r1
    944a:	607a      	str	r2, [r7, #4]
    944c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    944e:	7afa      	ldrb	r2, [r7, #11]
    9450:	68fb      	ldr	r3, [r7, #12]
    9452:	3208      	adds	r2, #8
    9454:	6879      	ldr	r1, [r7, #4]
    9456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    945a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    945e:	68f8      	ldr	r0, [r7, #12]
    9460:	4b02      	ldr	r3, [pc, #8]	; (946c <hri_gclk_write_GENCTRL_reg+0x2c>)
    9462:	4798      	blx	r3
}
    9464:	bf00      	nop
    9466:	3710      	adds	r7, #16
    9468:	46bd      	mov	sp, r7
    946a:	bd80      	pop	{r7, pc}
    946c:	0000941d 	.word	0x0000941d

00009470 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    9470:	b580      	push	{r7, lr}
    9472:	b082      	sub	sp, #8
    9474:	af00      	add	r7, sp, #0
    9476:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    9478:	687b      	ldr	r3, [r7, #4]
    947a:	f003 0301 	and.w	r3, r3, #1
    947e:	2b00      	cmp	r3, #0
    9480:	d004      	beq.n	948c <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    9482:	4a36      	ldr	r2, [pc, #216]	; (955c <_gclk_init_generators_by_fref+0xec>)
    9484:	2100      	movs	r1, #0
    9486:	4836      	ldr	r0, [pc, #216]	; (9560 <_gclk_init_generators_by_fref+0xf0>)
    9488:	4b36      	ldr	r3, [pc, #216]	; (9564 <_gclk_init_generators_by_fref+0xf4>)
    948a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    948c:	687b      	ldr	r3, [r7, #4]
    948e:	f003 0302 	and.w	r3, r3, #2
    9492:	2b00      	cmp	r3, #0
    9494:	d004      	beq.n	94a0 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    9496:	4a34      	ldr	r2, [pc, #208]	; (9568 <_gclk_init_generators_by_fref+0xf8>)
    9498:	2101      	movs	r1, #1
    949a:	4831      	ldr	r0, [pc, #196]	; (9560 <_gclk_init_generators_by_fref+0xf0>)
    949c:	4b31      	ldr	r3, [pc, #196]	; (9564 <_gclk_init_generators_by_fref+0xf4>)
    949e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    94a0:	687b      	ldr	r3, [r7, #4]
    94a2:	f003 0304 	and.w	r3, r3, #4
    94a6:	2b00      	cmp	r3, #0
    94a8:	d004      	beq.n	94b4 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    94aa:	4a30      	ldr	r2, [pc, #192]	; (956c <_gclk_init_generators_by_fref+0xfc>)
    94ac:	2102      	movs	r1, #2
    94ae:	482c      	ldr	r0, [pc, #176]	; (9560 <_gclk_init_generators_by_fref+0xf0>)
    94b0:	4b2c      	ldr	r3, [pc, #176]	; (9564 <_gclk_init_generators_by_fref+0xf4>)
    94b2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    94b4:	687b      	ldr	r3, [r7, #4]
    94b6:	f003 0308 	and.w	r3, r3, #8
    94ba:	2b00      	cmp	r3, #0
    94bc:	d004      	beq.n	94c8 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    94be:	4a2c      	ldr	r2, [pc, #176]	; (9570 <_gclk_init_generators_by_fref+0x100>)
    94c0:	2103      	movs	r1, #3
    94c2:	4827      	ldr	r0, [pc, #156]	; (9560 <_gclk_init_generators_by_fref+0xf0>)
    94c4:	4b27      	ldr	r3, [pc, #156]	; (9564 <_gclk_init_generators_by_fref+0xf4>)
    94c6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    94c8:	687b      	ldr	r3, [r7, #4]
    94ca:	f003 0310 	and.w	r3, r3, #16
    94ce:	2b00      	cmp	r3, #0
    94d0:	d004      	beq.n	94dc <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    94d2:	4a28      	ldr	r2, [pc, #160]	; (9574 <_gclk_init_generators_by_fref+0x104>)
    94d4:	2104      	movs	r1, #4
    94d6:	4822      	ldr	r0, [pc, #136]	; (9560 <_gclk_init_generators_by_fref+0xf0>)
    94d8:	4b22      	ldr	r3, [pc, #136]	; (9564 <_gclk_init_generators_by_fref+0xf4>)
    94da:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    94dc:	687b      	ldr	r3, [r7, #4]
    94de:	f003 0320 	and.w	r3, r3, #32
    94e2:	2b00      	cmp	r3, #0
    94e4:	d004      	beq.n	94f0 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    94e6:	4a24      	ldr	r2, [pc, #144]	; (9578 <_gclk_init_generators_by_fref+0x108>)
    94e8:	2105      	movs	r1, #5
    94ea:	481d      	ldr	r0, [pc, #116]	; (9560 <_gclk_init_generators_by_fref+0xf0>)
    94ec:	4b1d      	ldr	r3, [pc, #116]	; (9564 <_gclk_init_generators_by_fref+0xf4>)
    94ee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    94f0:	687b      	ldr	r3, [r7, #4]
    94f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    94f6:	2b00      	cmp	r3, #0
    94f8:	d004      	beq.n	9504 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    94fa:	4a20      	ldr	r2, [pc, #128]	; (957c <_gclk_init_generators_by_fref+0x10c>)
    94fc:	2106      	movs	r1, #6
    94fe:	4818      	ldr	r0, [pc, #96]	; (9560 <_gclk_init_generators_by_fref+0xf0>)
    9500:	4b18      	ldr	r3, [pc, #96]	; (9564 <_gclk_init_generators_by_fref+0xf4>)
    9502:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    9504:	687b      	ldr	r3, [r7, #4]
    9506:	f003 0380 	and.w	r3, r3, #128	; 0x80
    950a:	2b00      	cmp	r3, #0
    950c:	d004      	beq.n	9518 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    950e:	4a1c      	ldr	r2, [pc, #112]	; (9580 <_gclk_init_generators_by_fref+0x110>)
    9510:	2107      	movs	r1, #7
    9512:	4813      	ldr	r0, [pc, #76]	; (9560 <_gclk_init_generators_by_fref+0xf0>)
    9514:	4b13      	ldr	r3, [pc, #76]	; (9564 <_gclk_init_generators_by_fref+0xf4>)
    9516:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    9518:	687b      	ldr	r3, [r7, #4]
    951a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    951e:	2b00      	cmp	r3, #0
    9520:	d004      	beq.n	952c <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    9522:	4a18      	ldr	r2, [pc, #96]	; (9584 <_gclk_init_generators_by_fref+0x114>)
    9524:	2108      	movs	r1, #8
    9526:	480e      	ldr	r0, [pc, #56]	; (9560 <_gclk_init_generators_by_fref+0xf0>)
    9528:	4b0e      	ldr	r3, [pc, #56]	; (9564 <_gclk_init_generators_by_fref+0xf4>)
    952a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    952c:	687b      	ldr	r3, [r7, #4]
    952e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9532:	2b00      	cmp	r3, #0
    9534:	d004      	beq.n	9540 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    9536:	4a14      	ldr	r2, [pc, #80]	; (9588 <_gclk_init_generators_by_fref+0x118>)
    9538:	210a      	movs	r1, #10
    953a:	4809      	ldr	r0, [pc, #36]	; (9560 <_gclk_init_generators_by_fref+0xf0>)
    953c:	4b09      	ldr	r3, [pc, #36]	; (9564 <_gclk_init_generators_by_fref+0xf4>)
    953e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    9540:	687b      	ldr	r3, [r7, #4]
    9542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    9546:	2b00      	cmp	r3, #0
    9548:	d004      	beq.n	9554 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    954a:	4a10      	ldr	r2, [pc, #64]	; (958c <_gclk_init_generators_by_fref+0x11c>)
    954c:	210b      	movs	r1, #11
    954e:	4804      	ldr	r0, [pc, #16]	; (9560 <_gclk_init_generators_by_fref+0xf0>)
    9550:	4b04      	ldr	r3, [pc, #16]	; (9564 <_gclk_init_generators_by_fref+0xf4>)
    9552:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    9554:	bf00      	nop
    9556:	3708      	adds	r7, #8
    9558:	46bd      	mov	sp, r7
    955a:	bd80      	pop	{r7, pc}
    955c:	00010107 	.word	0x00010107
    9560:	40001c00 	.word	0x40001c00
    9564:	00009441 	.word	0x00009441
    9568:	00010907 	.word	0x00010907
    956c:	00010906 	.word	0x00010906
    9570:	00020908 	.word	0x00020908
    9574:	00010901 	.word	0x00010901
    9578:	00062901 	.word	0x00062901
    957c:	000c2901 	.word	0x000c2901
    9580:	00082908 	.word	0x00082908
    9584:	00032901 	.word	0x00032901
    9588:	00010905 	.word	0x00010905
    958c:	00041905 	.word	0x00041905

00009590 <hri_mclk_write_CPUDIV_reg>:
{
    9590:	b480      	push	{r7}
    9592:	b083      	sub	sp, #12
    9594:	af00      	add	r7, sp, #0
    9596:	6078      	str	r0, [r7, #4]
    9598:	460b      	mov	r3, r1
    959a:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    959c:	687b      	ldr	r3, [r7, #4]
    959e:	78fa      	ldrb	r2, [r7, #3]
    95a0:	715a      	strb	r2, [r3, #5]
}
    95a2:	bf00      	nop
    95a4:	370c      	adds	r7, #12
    95a6:	46bd      	mov	sp, r7
    95a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    95ac:	4770      	bx	lr
	...

000095b0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    95b0:	b580      	push	{r7, lr}
    95b2:	b082      	sub	sp, #8
    95b4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    95b6:	4b05      	ldr	r3, [pc, #20]	; (95cc <_mclk_init+0x1c>)
    95b8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    95ba:	2101      	movs	r1, #1
    95bc:	6878      	ldr	r0, [r7, #4]
    95be:	4b04      	ldr	r3, [pc, #16]	; (95d0 <_mclk_init+0x20>)
    95c0:	4798      	blx	r3
}
    95c2:	bf00      	nop
    95c4:	3708      	adds	r7, #8
    95c6:	46bd      	mov	sp, r7
    95c8:	bd80      	pop	{r7, pc}
    95ca:	bf00      	nop
    95cc:	40000800 	.word	0x40000800
    95d0:	00009591 	.word	0x00009591

000095d4 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    95d4:	b480      	push	{r7}
    95d6:	b083      	sub	sp, #12
    95d8:	af00      	add	r7, sp, #0
    95da:	6078      	str	r0, [r7, #4]
    95dc:	460b      	mov	r3, r1
    95de:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    95e0:	687b      	ldr	r3, [r7, #4]
    95e2:	78fa      	ldrb	r2, [r7, #3]
    95e4:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    95e6:	bf00      	nop
    95e8:	370c      	adds	r7, #12
    95ea:	46bd      	mov	sp, r7
    95ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    95f0:	4770      	bx	lr

000095f2 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    95f2:	b480      	push	{r7}
    95f4:	b083      	sub	sp, #12
    95f6:	af00      	add	r7, sp, #0
    95f8:	6078      	str	r0, [r7, #4]
    95fa:	460b      	mov	r3, r1
    95fc:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    95fe:	687b      	ldr	r3, [r7, #4]
    9600:	887a      	ldrh	r2, [r7, #2]
    9602:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9604:	bf00      	nop
    9606:	370c      	adds	r7, #12
    9608:	46bd      	mov	sp, r7
    960a:	f85d 7b04 	ldr.w	r7, [sp], #4
    960e:	4770      	bx	lr

00009610 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    9610:	b480      	push	{r7}
    9612:	b083      	sub	sp, #12
    9614:	af00      	add	r7, sp, #0
    9616:	6078      	str	r0, [r7, #4]
    9618:	460b      	mov	r3, r1
    961a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    961c:	687b      	ldr	r3, [r7, #4]
    961e:	78fa      	ldrb	r2, [r7, #3]
    9620:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9622:	bf00      	nop
    9624:	370c      	adds	r7, #12
    9626:	46bd      	mov	sp, r7
    9628:	f85d 7b04 	ldr.w	r7, [sp], #4
    962c:	4770      	bx	lr

0000962e <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    962e:	b480      	push	{r7}
    9630:	b083      	sub	sp, #12
    9632:	af00      	add	r7, sp, #0
    9634:	6078      	str	r0, [r7, #4]
    9636:	460b      	mov	r3, r1
    9638:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    963a:	687b      	ldr	r3, [r7, #4]
    963c:	78fa      	ldrb	r2, [r7, #3]
    963e:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9640:	bf00      	nop
    9642:	370c      	adds	r7, #12
    9644:	46bd      	mov	sp, r7
    9646:	f85d 7b04 	ldr.w	r7, [sp], #4
    964a:	4770      	bx	lr

0000964c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    964c:	b480      	push	{r7}
    964e:	b085      	sub	sp, #20
    9650:	af00      	add	r7, sp, #0
    9652:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    9654:	687b      	ldr	r3, [r7, #4]
    9656:	69db      	ldr	r3, [r3, #28]
    9658:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    965a:	68fb      	ldr	r3, [r7, #12]
    965c:	0a1b      	lsrs	r3, r3, #8
    965e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9662:	60fb      	str	r3, [r7, #12]
	return tmp;
    9664:	68fb      	ldr	r3, [r7, #12]
}
    9666:	4618      	mov	r0, r3
    9668:	3714      	adds	r7, #20
    966a:	46bd      	mov	sp, r7
    966c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9670:	4770      	bx	lr

00009672 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    9672:	b480      	push	{r7}
    9674:	b083      	sub	sp, #12
    9676:	af00      	add	r7, sp, #0
    9678:	6078      	str	r0, [r7, #4]
    967a:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    967c:	687b      	ldr	r3, [r7, #4]
    967e:	683a      	ldr	r2, [r7, #0]
    9680:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9682:	bf00      	nop
    9684:	370c      	adds	r7, #12
    9686:	46bd      	mov	sp, r7
    9688:	f85d 7b04 	ldr.w	r7, [sp], #4
    968c:	4770      	bx	lr
	...

00009690 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    9690:	b580      	push	{r7, lr}
    9692:	b082      	sub	sp, #8
    9694:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    9696:	4b13      	ldr	r3, [pc, #76]	; (96e4 <_osc32kctrl_init_sources+0x54>)
    9698:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    969a:	2300      	movs	r3, #0
    969c:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    969e:	f242 018e 	movw	r1, #8334	; 0x208e
    96a2:	6878      	ldr	r0, [r7, #4]
    96a4:	4b10      	ldr	r3, [pc, #64]	; (96e8 <_osc32kctrl_init_sources+0x58>)
    96a6:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    96a8:	2100      	movs	r1, #0
    96aa:	6878      	ldr	r0, [r7, #4]
    96ac:	4b0f      	ldr	r3, [pc, #60]	; (96ec <_osc32kctrl_init_sources+0x5c>)
    96ae:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    96b0:	2100      	movs	r1, #0
    96b2:	6878      	ldr	r0, [r7, #4]
    96b4:	4b0e      	ldr	r3, [pc, #56]	; (96f0 <_osc32kctrl_init_sources+0x60>)
    96b6:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    96b8:	6878      	ldr	r0, [r7, #4]
    96ba:	4b0e      	ldr	r3, [pc, #56]	; (96f4 <_osc32kctrl_init_sources+0x64>)
    96bc:	4798      	blx	r3
    96be:	4603      	mov	r3, r0
    96c0:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    96c2:	887b      	ldrh	r3, [r7, #2]
    96c4:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    96c6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    96ca:	4619      	mov	r1, r3
    96cc:	6878      	ldr	r0, [r7, #4]
    96ce:	4b0a      	ldr	r3, [pc, #40]	; (96f8 <_osc32kctrl_init_sources+0x68>)
    96d0:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    96d2:	2100      	movs	r1, #0
    96d4:	6878      	ldr	r0, [r7, #4]
    96d6:	4b09      	ldr	r3, [pc, #36]	; (96fc <_osc32kctrl_init_sources+0x6c>)
    96d8:	4798      	blx	r3
	(void)calib;
}
    96da:	bf00      	nop
    96dc:	3708      	adds	r7, #8
    96de:	46bd      	mov	sp, r7
    96e0:	bd80      	pop	{r7, pc}
    96e2:	bf00      	nop
    96e4:	40001400 	.word	0x40001400
    96e8:	000095f3 	.word	0x000095f3
    96ec:	00009611 	.word	0x00009611
    96f0:	0000962f 	.word	0x0000962f
    96f4:	0000964d 	.word	0x0000964d
    96f8:	00009673 	.word	0x00009673
    96fc:	000095d5 	.word	0x000095d5

00009700 <hri_gclk_wait_for_sync>:
{
    9700:	b480      	push	{r7}
    9702:	b083      	sub	sp, #12
    9704:	af00      	add	r7, sp, #0
    9706:	6078      	str	r0, [r7, #4]
    9708:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    970a:	bf00      	nop
    970c:	687b      	ldr	r3, [r7, #4]
    970e:	685a      	ldr	r2, [r3, #4]
    9710:	683b      	ldr	r3, [r7, #0]
    9712:	4013      	ands	r3, r2
    9714:	2b00      	cmp	r3, #0
    9716:	d1f9      	bne.n	970c <hri_gclk_wait_for_sync+0xc>
}
    9718:	bf00      	nop
    971a:	370c      	adds	r7, #12
    971c:	46bd      	mov	sp, r7
    971e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9722:	4770      	bx	lr

00009724 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    9724:	b480      	push	{r7}
    9726:	b083      	sub	sp, #12
    9728:	af00      	add	r7, sp, #0
    972a:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    972c:	687b      	ldr	r3, [r7, #4]
    972e:	685b      	ldr	r3, [r3, #4]
    9730:	089b      	lsrs	r3, r3, #2
    9732:	f003 0301 	and.w	r3, r3, #1
    9736:	2b00      	cmp	r3, #0
    9738:	bf14      	ite	ne
    973a:	2301      	movne	r3, #1
    973c:	2300      	moveq	r3, #0
    973e:	b2db      	uxtb	r3, r3
}
    9740:	4618      	mov	r0, r3
    9742:	370c      	adds	r7, #12
    9744:	46bd      	mov	sp, r7
    9746:	f85d 7b04 	ldr.w	r7, [sp], #4
    974a:	4770      	bx	lr

0000974c <hri_gclk_read_SYNCBUSY_reg>:
{
    974c:	b480      	push	{r7}
    974e:	b083      	sub	sp, #12
    9750:	af00      	add	r7, sp, #0
    9752:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    9754:	687b      	ldr	r3, [r7, #4]
    9756:	685b      	ldr	r3, [r3, #4]
}
    9758:	4618      	mov	r0, r3
    975a:	370c      	adds	r7, #12
    975c:	46bd      	mov	sp, r7
    975e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9762:	4770      	bx	lr

00009764 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    9764:	b580      	push	{r7, lr}
    9766:	b086      	sub	sp, #24
    9768:	af00      	add	r7, sp, #0
    976a:	60f8      	str	r0, [r7, #12]
    976c:	460b      	mov	r3, r1
    976e:	607a      	str	r2, [r7, #4]
    9770:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    9772:	7afa      	ldrb	r2, [r7, #11]
    9774:	68fb      	ldr	r3, [r7, #12]
    9776:	3208      	adds	r2, #8
    9778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    977c:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    977e:	697b      	ldr	r3, [r7, #20]
    9780:	f023 030f 	bic.w	r3, r3, #15
    9784:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    9786:	687b      	ldr	r3, [r7, #4]
    9788:	f003 030f 	and.w	r3, r3, #15
    978c:	697a      	ldr	r2, [r7, #20]
    978e:	4313      	orrs	r3, r2
    9790:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    9792:	7afa      	ldrb	r2, [r7, #11]
    9794:	68fb      	ldr	r3, [r7, #12]
    9796:	3208      	adds	r2, #8
    9798:	6979      	ldr	r1, [r7, #20]
    979a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    979e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    97a2:	68f8      	ldr	r0, [r7, #12]
    97a4:	4b02      	ldr	r3, [pc, #8]	; (97b0 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    97a6:	4798      	blx	r3
}
    97a8:	bf00      	nop
    97aa:	3718      	adds	r7, #24
    97ac:	46bd      	mov	sp, r7
    97ae:	bd80      	pop	{r7, pc}
    97b0:	00009701 	.word	0x00009701

000097b4 <hri_gclk_write_PCHCTRL_reg>:
{
    97b4:	b480      	push	{r7}
    97b6:	b085      	sub	sp, #20
    97b8:	af00      	add	r7, sp, #0
    97ba:	60f8      	str	r0, [r7, #12]
    97bc:	460b      	mov	r3, r1
    97be:	607a      	str	r2, [r7, #4]
    97c0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    97c2:	7afa      	ldrb	r2, [r7, #11]
    97c4:	68fb      	ldr	r3, [r7, #12]
    97c6:	3220      	adds	r2, #32
    97c8:	6879      	ldr	r1, [r7, #4]
    97ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    97ce:	bf00      	nop
    97d0:	3714      	adds	r7, #20
    97d2:	46bd      	mov	sp, r7
    97d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    97d8:	4770      	bx	lr

000097da <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    97da:	b480      	push	{r7}
    97dc:	b085      	sub	sp, #20
    97de:	af00      	add	r7, sp, #0
    97e0:	60f8      	str	r0, [r7, #12]
    97e2:	460b      	mov	r3, r1
    97e4:	607a      	str	r2, [r7, #4]
    97e6:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    97e8:	bf00      	nop
    97ea:	7afa      	ldrb	r2, [r7, #11]
    97ec:	68f9      	ldr	r1, [r7, #12]
    97ee:	4613      	mov	r3, r2
    97f0:	009b      	lsls	r3, r3, #2
    97f2:	4413      	add	r3, r2
    97f4:	009b      	lsls	r3, r3, #2
    97f6:	440b      	add	r3, r1
    97f8:	333c      	adds	r3, #60	; 0x3c
    97fa:	681a      	ldr	r2, [r3, #0]
    97fc:	687b      	ldr	r3, [r7, #4]
    97fe:	4013      	ands	r3, r2
    9800:	2b00      	cmp	r3, #0
    9802:	d1f2      	bne.n	97ea <hri_oscctrl_wait_for_sync+0x10>
	};
}
    9804:	bf00      	nop
    9806:	3714      	adds	r7, #20
    9808:	46bd      	mov	sp, r7
    980a:	f85d 7b04 	ldr.w	r7, [sp], #4
    980e:	4770      	bx	lr

00009810 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    9810:	b480      	push	{r7}
    9812:	b083      	sub	sp, #12
    9814:	af00      	add	r7, sp, #0
    9816:	6078      	str	r0, [r7, #4]
    9818:	460b      	mov	r3, r1
    981a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    981c:	78fa      	ldrb	r2, [r7, #3]
    981e:	6879      	ldr	r1, [r7, #4]
    9820:	4613      	mov	r3, r2
    9822:	009b      	lsls	r3, r3, #2
    9824:	4413      	add	r3, r2
    9826:	009b      	lsls	r3, r3, #2
    9828:	440b      	add	r3, r1
    982a:	3340      	adds	r3, #64	; 0x40
    982c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    982e:	f003 0301 	and.w	r3, r3, #1
    9832:	2b00      	cmp	r3, #0
    9834:	bf14      	ite	ne
    9836:	2301      	movne	r3, #1
    9838:	2300      	moveq	r3, #0
    983a:	b2db      	uxtb	r3, r3
}
    983c:	4618      	mov	r0, r3
    983e:	370c      	adds	r7, #12
    9840:	46bd      	mov	sp, r7
    9842:	f85d 7b04 	ldr.w	r7, [sp], #4
    9846:	4770      	bx	lr

00009848 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    9848:	b480      	push	{r7}
    984a:	b083      	sub	sp, #12
    984c:	af00      	add	r7, sp, #0
    984e:	6078      	str	r0, [r7, #4]
    9850:	460b      	mov	r3, r1
    9852:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    9854:	78fa      	ldrb	r2, [r7, #3]
    9856:	6879      	ldr	r1, [r7, #4]
    9858:	4613      	mov	r3, r2
    985a:	009b      	lsls	r3, r3, #2
    985c:	4413      	add	r3, r2
    985e:	009b      	lsls	r3, r3, #2
    9860:	440b      	add	r3, r1
    9862:	3340      	adds	r3, #64	; 0x40
    9864:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    9866:	085b      	lsrs	r3, r3, #1
    9868:	f003 0301 	and.w	r3, r3, #1
    986c:	2b00      	cmp	r3, #0
    986e:	bf14      	ite	ne
    9870:	2301      	movne	r3, #1
    9872:	2300      	moveq	r3, #0
    9874:	b2db      	uxtb	r3, r3
}
    9876:	4618      	mov	r0, r3
    9878:	370c      	adds	r7, #12
    987a:	46bd      	mov	sp, r7
    987c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9880:	4770      	bx	lr
	...

00009884 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    9884:	b580      	push	{r7, lr}
    9886:	b082      	sub	sp, #8
    9888:	af00      	add	r7, sp, #0
    988a:	6078      	str	r0, [r7, #4]
    988c:	460b      	mov	r3, r1
    988e:	70fb      	strb	r3, [r7, #3]
    9890:	4613      	mov	r3, r2
    9892:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    9894:	78fa      	ldrb	r2, [r7, #3]
    9896:	6879      	ldr	r1, [r7, #4]
    9898:	4613      	mov	r3, r2
    989a:	009b      	lsls	r3, r3, #2
    989c:	4413      	add	r3, r2
    989e:	009b      	lsls	r3, r3, #2
    98a0:	440b      	add	r3, r1
    98a2:	3330      	adds	r3, #48	; 0x30
    98a4:	78ba      	ldrb	r2, [r7, #2]
    98a6:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    98a8:	78fb      	ldrb	r3, [r7, #3]
    98aa:	2202      	movs	r2, #2
    98ac:	4619      	mov	r1, r3
    98ae:	6878      	ldr	r0, [r7, #4]
    98b0:	4b02      	ldr	r3, [pc, #8]	; (98bc <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    98b2:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    98b4:	bf00      	nop
    98b6:	3708      	adds	r7, #8
    98b8:	46bd      	mov	sp, r7
    98ba:	bd80      	pop	{r7, pc}
    98bc:	000097db 	.word	0x000097db

000098c0 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    98c0:	b580      	push	{r7, lr}
    98c2:	b084      	sub	sp, #16
    98c4:	af00      	add	r7, sp, #0
    98c6:	60f8      	str	r0, [r7, #12]
    98c8:	460b      	mov	r3, r1
    98ca:	607a      	str	r2, [r7, #4]
    98cc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    98ce:	7afa      	ldrb	r2, [r7, #11]
    98d0:	68f9      	ldr	r1, [r7, #12]
    98d2:	4613      	mov	r3, r2
    98d4:	009b      	lsls	r3, r3, #2
    98d6:	4413      	add	r3, r2
    98d8:	009b      	lsls	r3, r3, #2
    98da:	440b      	add	r3, r1
    98dc:	3334      	adds	r3, #52	; 0x34
    98de:	687a      	ldr	r2, [r7, #4]
    98e0:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    98e2:	7afb      	ldrb	r3, [r7, #11]
    98e4:	2206      	movs	r2, #6
    98e6:	4619      	mov	r1, r3
    98e8:	68f8      	ldr	r0, [r7, #12]
    98ea:	4b03      	ldr	r3, [pc, #12]	; (98f8 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    98ec:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    98ee:	bf00      	nop
    98f0:	3710      	adds	r7, #16
    98f2:	46bd      	mov	sp, r7
    98f4:	bd80      	pop	{r7, pc}
    98f6:	bf00      	nop
    98f8:	000097db 	.word	0x000097db

000098fc <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    98fc:	b480      	push	{r7}
    98fe:	b085      	sub	sp, #20
    9900:	af00      	add	r7, sp, #0
    9902:	60f8      	str	r0, [r7, #12]
    9904:	460b      	mov	r3, r1
    9906:	607a      	str	r2, [r7, #4]
    9908:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    990a:	7afa      	ldrb	r2, [r7, #11]
    990c:	68f9      	ldr	r1, [r7, #12]
    990e:	4613      	mov	r3, r2
    9910:	009b      	lsls	r3, r3, #2
    9912:	4413      	add	r3, r2
    9914:	009b      	lsls	r3, r3, #2
    9916:	440b      	add	r3, r1
    9918:	3338      	adds	r3, #56	; 0x38
    991a:	687a      	ldr	r2, [r7, #4]
    991c:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    991e:	bf00      	nop
    9920:	3714      	adds	r7, #20
    9922:	46bd      	mov	sp, r7
    9924:	f85d 7b04 	ldr.w	r7, [sp], #4
    9928:	4770      	bx	lr

0000992a <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    992a:	b480      	push	{r7}
    992c:	b083      	sub	sp, #12
    992e:	af00      	add	r7, sp, #0
    9930:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    9932:	687b      	ldr	r3, [r7, #4]
    9934:	691b      	ldr	r3, [r3, #16]
    9936:	085b      	lsrs	r3, r3, #1
    9938:	f003 0301 	and.w	r3, r3, #1
    993c:	2b00      	cmp	r3, #0
    993e:	bf14      	ite	ne
    9940:	2301      	movne	r3, #1
    9942:	2300      	moveq	r3, #0
    9944:	b2db      	uxtb	r3, r3
}
    9946:	4618      	mov	r0, r3
    9948:	370c      	adds	r7, #12
    994a:	46bd      	mov	sp, r7
    994c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9950:	4770      	bx	lr

00009952 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    9952:	b480      	push	{r7}
    9954:	b083      	sub	sp, #12
    9956:	af00      	add	r7, sp, #0
    9958:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    995a:	687b      	ldr	r3, [r7, #4]
    995c:	691b      	ldr	r3, [r3, #16]
    995e:	0a1b      	lsrs	r3, r3, #8
    9960:	f003 0301 	and.w	r3, r3, #1
    9964:	2b00      	cmp	r3, #0
    9966:	bf14      	ite	ne
    9968:	2301      	movne	r3, #1
    996a:	2300      	moveq	r3, #0
    996c:	b2db      	uxtb	r3, r3
}
    996e:	4618      	mov	r0, r3
    9970:	370c      	adds	r7, #12
    9972:	46bd      	mov	sp, r7
    9974:	f85d 7b04 	ldr.w	r7, [sp], #4
    9978:	4770      	bx	lr

0000997a <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    997a:	b480      	push	{r7}
    997c:	b085      	sub	sp, #20
    997e:	af00      	add	r7, sp, #0
    9980:	6078      	str	r0, [r7, #4]
    9982:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9984:	687b      	ldr	r3, [r7, #4]
    9986:	691b      	ldr	r3, [r3, #16]
    9988:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    998a:	68fa      	ldr	r2, [r7, #12]
    998c:	683b      	ldr	r3, [r7, #0]
    998e:	4013      	ands	r3, r2
    9990:	60fb      	str	r3, [r7, #12]
	return tmp;
    9992:	68fb      	ldr	r3, [r7, #12]
}
    9994:	4618      	mov	r0, r3
    9996:	3714      	adds	r7, #20
    9998:	46bd      	mov	sp, r7
    999a:	f85d 7b04 	ldr.w	r7, [sp], #4
    999e:	4770      	bx	lr

000099a0 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    99a0:	b480      	push	{r7}
    99a2:	b085      	sub	sp, #20
    99a4:	af00      	add	r7, sp, #0
    99a6:	60f8      	str	r0, [r7, #12]
    99a8:	460b      	mov	r3, r1
    99aa:	607a      	str	r2, [r7, #4]
    99ac:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    99ae:	7afb      	ldrb	r3, [r7, #11]
    99b0:	68fa      	ldr	r2, [r7, #12]
    99b2:	3304      	adds	r3, #4
    99b4:	009b      	lsls	r3, r3, #2
    99b6:	4413      	add	r3, r2
    99b8:	687a      	ldr	r2, [r7, #4]
    99ba:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    99bc:	bf00      	nop
    99be:	3714      	adds	r7, #20
    99c0:	46bd      	mov	sp, r7
    99c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    99c6:	4770      	bx	lr

000099c8 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    99c8:	b480      	push	{r7}
    99ca:	b083      	sub	sp, #12
    99cc:	af00      	add	r7, sp, #0
    99ce:	6078      	str	r0, [r7, #4]
    99d0:	460b      	mov	r3, r1
    99d2:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    99d4:	687b      	ldr	r3, [r7, #4]
    99d6:	78fa      	ldrb	r2, [r7, #3]
    99d8:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    99da:	bf00      	nop
    99dc:	370c      	adds	r7, #12
    99de:	46bd      	mov	sp, r7
    99e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    99e4:	4770      	bx	lr

000099e6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    99e6:	b480      	push	{r7}
    99e8:	b085      	sub	sp, #20
    99ea:	af00      	add	r7, sp, #0
    99ec:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    99ee:	687b      	ldr	r3, [r7, #4]
    99f0:	f893 3020 	ldrb.w	r3, [r3, #32]
    99f4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    99f6:	7bfb      	ldrb	r3, [r7, #15]
    99f8:	f003 0301 	and.w	r3, r3, #1
    99fc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    99fe:	7bfb      	ldrb	r3, [r7, #15]
    9a00:	2b00      	cmp	r3, #0
    9a02:	bf14      	ite	ne
    9a04:	2301      	movne	r3, #1
    9a06:	2300      	moveq	r3, #0
    9a08:	b2db      	uxtb	r3, r3
}
    9a0a:	4618      	mov	r0, r3
    9a0c:	3714      	adds	r7, #20
    9a0e:	46bd      	mov	sp, r7
    9a10:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a14:	4770      	bx	lr

00009a16 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    9a16:	b480      	push	{r7}
    9a18:	b083      	sub	sp, #12
    9a1a:	af00      	add	r7, sp, #0
    9a1c:	6078      	str	r0, [r7, #4]
    9a1e:	460b      	mov	r3, r1
    9a20:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    9a22:	687b      	ldr	r3, [r7, #4]
    9a24:	78fa      	ldrb	r2, [r7, #3]
    9a26:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9a2a:	bf00      	nop
    9a2c:	370c      	adds	r7, #12
    9a2e:	46bd      	mov	sp, r7
    9a30:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a34:	4770      	bx	lr

00009a36 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    9a36:	b480      	push	{r7}
    9a38:	b083      	sub	sp, #12
    9a3a:	af00      	add	r7, sp, #0
    9a3c:	6078      	str	r0, [r7, #4]
    9a3e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    9a40:	687b      	ldr	r3, [r7, #4]
    9a42:	683a      	ldr	r2, [r7, #0]
    9a44:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9a46:	bf00      	nop
    9a48:	370c      	adds	r7, #12
    9a4a:	46bd      	mov	sp, r7
    9a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a50:	4770      	bx	lr

00009a52 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    9a52:	b480      	push	{r7}
    9a54:	b083      	sub	sp, #12
    9a56:	af00      	add	r7, sp, #0
    9a58:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    9a5a:	687b      	ldr	r3, [r7, #4]
    9a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    9a5e:	4618      	mov	r0, r3
    9a60:	370c      	adds	r7, #12
    9a62:	46bd      	mov	sp, r7
    9a64:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a68:	4770      	bx	lr

00009a6a <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    9a6a:	b480      	push	{r7}
    9a6c:	b083      	sub	sp, #12
    9a6e:	af00      	add	r7, sp, #0
    9a70:	6078      	str	r0, [r7, #4]
    9a72:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    9a74:	687b      	ldr	r3, [r7, #4]
    9a76:	683a      	ldr	r2, [r7, #0]
    9a78:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9a7a:	bf00      	nop
    9a7c:	370c      	adds	r7, #12
    9a7e:	46bd      	mov	sp, r7
    9a80:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a84:	4770      	bx	lr

00009a86 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    9a86:	b480      	push	{r7}
    9a88:	b085      	sub	sp, #20
    9a8a:	af00      	add	r7, sp, #0
    9a8c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9a8e:	687b      	ldr	r3, [r7, #4]
    9a90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9a94:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    9a96:	7bfb      	ldrb	r3, [r7, #15]
    9a98:	085b      	lsrs	r3, r3, #1
    9a9a:	b2db      	uxtb	r3, r3
    9a9c:	f003 0301 	and.w	r3, r3, #1
    9aa0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9aa2:	7bfb      	ldrb	r3, [r7, #15]
    9aa4:	2b00      	cmp	r3, #0
    9aa6:	bf14      	ite	ne
    9aa8:	2301      	movne	r3, #1
    9aaa:	2300      	moveq	r3, #0
    9aac:	b2db      	uxtb	r3, r3
}
    9aae:	4618      	mov	r0, r3
    9ab0:	3714      	adds	r7, #20
    9ab2:	46bd      	mov	sp, r7
    9ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ab8:	4770      	bx	lr

00009aba <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    9aba:	b480      	push	{r7}
    9abc:	b085      	sub	sp, #20
    9abe:	af00      	add	r7, sp, #0
    9ac0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9ac2:	687b      	ldr	r3, [r7, #4]
    9ac4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9ac8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    9aca:	7bfb      	ldrb	r3, [r7, #15]
    9acc:	089b      	lsrs	r3, r3, #2
    9ace:	b2db      	uxtb	r3, r3
    9ad0:	f003 0301 	and.w	r3, r3, #1
    9ad4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9ad6:	7bfb      	ldrb	r3, [r7, #15]
    9ad8:	2b00      	cmp	r3, #0
    9ada:	bf14      	ite	ne
    9adc:	2301      	movne	r3, #1
    9ade:	2300      	moveq	r3, #0
    9ae0:	b2db      	uxtb	r3, r3
}
    9ae2:	4618      	mov	r0, r3
    9ae4:	3714      	adds	r7, #20
    9ae6:	46bd      	mov	sp, r7
    9ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9aec:	4770      	bx	lr

00009aee <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    9aee:	b480      	push	{r7}
    9af0:	b085      	sub	sp, #20
    9af2:	af00      	add	r7, sp, #0
    9af4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9af6:	687b      	ldr	r3, [r7, #4]
    9af8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9afc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    9afe:	7bfb      	ldrb	r3, [r7, #15]
    9b00:	08db      	lsrs	r3, r3, #3
    9b02:	b2db      	uxtb	r3, r3
    9b04:	f003 0301 	and.w	r3, r3, #1
    9b08:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9b0a:	7bfb      	ldrb	r3, [r7, #15]
    9b0c:	2b00      	cmp	r3, #0
    9b0e:	bf14      	ite	ne
    9b10:	2301      	movne	r3, #1
    9b12:	2300      	moveq	r3, #0
    9b14:	b2db      	uxtb	r3, r3
}
    9b16:	4618      	mov	r0, r3
    9b18:	3714      	adds	r7, #20
    9b1a:	46bd      	mov	sp, r7
    9b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b20:	4770      	bx	lr

00009b22 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    9b22:	b480      	push	{r7}
    9b24:	b085      	sub	sp, #20
    9b26:	af00      	add	r7, sp, #0
    9b28:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9b2a:	687b      	ldr	r3, [r7, #4]
    9b2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9b30:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    9b32:	7bfb      	ldrb	r3, [r7, #15]
    9b34:	091b      	lsrs	r3, r3, #4
    9b36:	b2db      	uxtb	r3, r3
    9b38:	f003 0301 	and.w	r3, r3, #1
    9b3c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9b3e:	7bfb      	ldrb	r3, [r7, #15]
    9b40:	2b00      	cmp	r3, #0
    9b42:	bf14      	ite	ne
    9b44:	2301      	movne	r3, #1
    9b46:	2300      	moveq	r3, #0
    9b48:	b2db      	uxtb	r3, r3
}
    9b4a:	4618      	mov	r0, r3
    9b4c:	3714      	adds	r7, #20
    9b4e:	46bd      	mov	sp, r7
    9b50:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b54:	4770      	bx	lr
	...

00009b58 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    9b58:	b580      	push	{r7, lr}
    9b5a:	b082      	sub	sp, #8
    9b5c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    9b5e:	4b0a      	ldr	r3, [pc, #40]	; (9b88 <_oscctrl_init_sources+0x30>)
    9b60:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    9b62:	4a0a      	ldr	r2, [pc, #40]	; (9b8c <_oscctrl_init_sources+0x34>)
    9b64:	2101      	movs	r1, #1
    9b66:	6878      	ldr	r0, [r7, #4]
    9b68:	4b09      	ldr	r3, [pc, #36]	; (9b90 <_oscctrl_init_sources+0x38>)
    9b6a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    9b6c:	bf00      	nop
    9b6e:	6878      	ldr	r0, [r7, #4]
    9b70:	4b08      	ldr	r3, [pc, #32]	; (9b94 <_oscctrl_init_sources+0x3c>)
    9b72:	4798      	blx	r3
    9b74:	4603      	mov	r3, r0
    9b76:	f083 0301 	eor.w	r3, r3, #1
    9b7a:	b2db      	uxtb	r3, r3
    9b7c:	2b00      	cmp	r3, #0
    9b7e:	d1f6      	bne.n	9b6e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    9b80:	bf00      	nop
    9b82:	3708      	adds	r7, #8
    9b84:	46bd      	mov	sp, r7
    9b86:	bd80      	pop	{r7, pc}
    9b88:	40001000 	.word	0x40001000
    9b8c:	03002646 	.word	0x03002646
    9b90:	000099a1 	.word	0x000099a1
    9b94:	0000992b 	.word	0x0000992b

00009b98 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    9b98:	b580      	push	{r7, lr}
    9b9a:	b084      	sub	sp, #16
    9b9c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    9b9e:	4b6b      	ldr	r3, [pc, #428]	; (9d4c <_oscctrl_init_referenced_generators+0x1b4>)
    9ba0:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    9ba2:	2204      	movs	r2, #4
    9ba4:	2100      	movs	r1, #0
    9ba6:	486a      	ldr	r0, [pc, #424]	; (9d50 <_oscctrl_init_referenced_generators+0x1b8>)
    9ba8:	4b6a      	ldr	r3, [pc, #424]	; (9d54 <_oscctrl_init_referenced_generators+0x1bc>)
    9baa:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    9bac:	bf00      	nop
    9bae:	4868      	ldr	r0, [pc, #416]	; (9d50 <_oscctrl_init_referenced_generators+0x1b8>)
    9bb0:	4b69      	ldr	r3, [pc, #420]	; (9d58 <_oscctrl_init_referenced_generators+0x1c0>)
    9bb2:	4798      	blx	r3
    9bb4:	4603      	mov	r3, r0
    9bb6:	2b00      	cmp	r3, #0
    9bb8:	d1f9      	bne.n	9bae <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    9bba:	2100      	movs	r1, #0
    9bbc:	68f8      	ldr	r0, [r7, #12]
    9bbe:	4b67      	ldr	r3, [pc, #412]	; (9d5c <_oscctrl_init_referenced_generators+0x1c4>)
    9bc0:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    9bc2:	4967      	ldr	r1, [pc, #412]	; (9d60 <_oscctrl_init_referenced_generators+0x1c8>)
    9bc4:	68f8      	ldr	r0, [r7, #12]
    9bc6:	4b67      	ldr	r3, [pc, #412]	; (9d64 <_oscctrl_init_referenced_generators+0x1cc>)
    9bc8:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    9bca:	bf00      	nop
    9bcc:	68f8      	ldr	r0, [r7, #12]
    9bce:	4b66      	ldr	r3, [pc, #408]	; (9d68 <_oscctrl_init_referenced_generators+0x1d0>)
    9bd0:	4798      	blx	r3
    9bd2:	4603      	mov	r3, r0
    9bd4:	2b00      	cmp	r3, #0
    9bd6:	d1f9      	bne.n	9bcc <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    9bd8:	2100      	movs	r1, #0
    9bda:	68f8      	ldr	r0, [r7, #12]
    9bdc:	4b63      	ldr	r3, [pc, #396]	; (9d6c <_oscctrl_init_referenced_generators+0x1d4>)
    9bde:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    9be0:	bf00      	nop
    9be2:	68f8      	ldr	r0, [r7, #12]
    9be4:	4b62      	ldr	r3, [pc, #392]	; (9d70 <_oscctrl_init_referenced_generators+0x1d8>)
    9be6:	4798      	blx	r3
    9be8:	4603      	mov	r3, r0
    9bea:	2b00      	cmp	r3, #0
    9bec:	d1f9      	bne.n	9be2 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    9bee:	2302      	movs	r3, #2
    9bf0:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    9bf2:	7afb      	ldrb	r3, [r7, #11]
    9bf4:	4619      	mov	r1, r3
    9bf6:	68f8      	ldr	r0, [r7, #12]
    9bf8:	4b58      	ldr	r3, [pc, #352]	; (9d5c <_oscctrl_init_referenced_generators+0x1c4>)
    9bfa:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    9bfc:	bf00      	nop
    9bfe:	68f8      	ldr	r0, [r7, #12]
    9c00:	4b5c      	ldr	r3, [pc, #368]	; (9d74 <_oscctrl_init_referenced_generators+0x1dc>)
    9c02:	4798      	blx	r3
    9c04:	4603      	mov	r3, r0
    9c06:	2b00      	cmp	r3, #0
    9c08:	d1f9      	bne.n	9bfe <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    9c0a:	68f8      	ldr	r0, [r7, #12]
    9c0c:	4b5a      	ldr	r3, [pc, #360]	; (9d78 <_oscctrl_init_referenced_generators+0x1e0>)
    9c0e:	4798      	blx	r3
    9c10:	4603      	mov	r3, r0
    9c12:	4619      	mov	r1, r3
    9c14:	68f8      	ldr	r0, [r7, #12]
    9c16:	4b59      	ldr	r3, [pc, #356]	; (9d7c <_oscctrl_init_referenced_generators+0x1e4>)
    9c18:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    9c1a:	bf00      	nop
    9c1c:	68f8      	ldr	r0, [r7, #12]
    9c1e:	4b58      	ldr	r3, [pc, #352]	; (9d80 <_oscctrl_init_referenced_generators+0x1e8>)
    9c20:	4798      	blx	r3
    9c22:	4603      	mov	r3, r0
    9c24:	2b00      	cmp	r3, #0
    9c26:	d1f9      	bne.n	9c1c <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    9c28:	2319      	movs	r3, #25
    9c2a:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    9c2c:	7afb      	ldrb	r3, [r7, #11]
    9c2e:	4619      	mov	r1, r3
    9c30:	68f8      	ldr	r0, [r7, #12]
    9c32:	4b4e      	ldr	r3, [pc, #312]	; (9d6c <_oscctrl_init_referenced_generators+0x1d4>)
    9c34:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    9c36:	bf00      	nop
    9c38:	68f8      	ldr	r0, [r7, #12]
    9c3a:	4b4d      	ldr	r3, [pc, #308]	; (9d70 <_oscctrl_init_referenced_generators+0x1d8>)
    9c3c:	4798      	blx	r3
    9c3e:	4603      	mov	r3, r0
    9c40:	2b00      	cmp	r3, #0
    9c42:	d1f9      	bne.n	9c38 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    9c44:	2245      	movs	r2, #69	; 0x45
    9c46:	2101      	movs	r1, #1
    9c48:	4841      	ldr	r0, [pc, #260]	; (9d50 <_oscctrl_init_referenced_generators+0x1b8>)
    9c4a:	4b4e      	ldr	r3, [pc, #312]	; (9d84 <_oscctrl_init_referenced_generators+0x1ec>)
    9c4c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    9c4e:	223b      	movs	r2, #59	; 0x3b
    9c50:	2100      	movs	r1, #0
    9c52:	68f8      	ldr	r0, [r7, #12]
    9c54:	4b4c      	ldr	r3, [pc, #304]	; (9d88 <_oscctrl_init_referenced_generators+0x1f0>)
    9c56:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    9c58:	f44f 6201 	mov.w	r2, #2064	; 0x810
    9c5c:	2100      	movs	r1, #0
    9c5e:	68f8      	ldr	r0, [r7, #12]
    9c60:	4b4a      	ldr	r3, [pc, #296]	; (9d8c <_oscctrl_init_referenced_generators+0x1f4>)
    9c62:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    9c64:	2242      	movs	r2, #66	; 0x42
    9c66:	2100      	movs	r1, #0
    9c68:	68f8      	ldr	r0, [r7, #12]
    9c6a:	4b49      	ldr	r3, [pc, #292]	; (9d90 <_oscctrl_init_referenced_generators+0x1f8>)
    9c6c:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    9c6e:	4a49      	ldr	r2, [pc, #292]	; (9d94 <_oscctrl_init_referenced_generators+0x1fc>)
    9c70:	2101      	movs	r1, #1
    9c72:	68f8      	ldr	r0, [r7, #12]
    9c74:	4b44      	ldr	r3, [pc, #272]	; (9d88 <_oscctrl_init_referenced_generators+0x1f0>)
    9c76:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    9c78:	f44f 6203 	mov.w	r2, #2096	; 0x830
    9c7c:	2101      	movs	r1, #1
    9c7e:	68f8      	ldr	r0, [r7, #12]
    9c80:	4b42      	ldr	r3, [pc, #264]	; (9d8c <_oscctrl_init_referenced_generators+0x1f4>)
    9c82:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    9c84:	2202      	movs	r2, #2
    9c86:	2101      	movs	r1, #1
    9c88:	68f8      	ldr	r0, [r7, #12]
    9c8a:	4b41      	ldr	r3, [pc, #260]	; (9d90 <_oscctrl_init_referenced_generators+0x1f8>)
    9c8c:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    9c8e:	68f8      	ldr	r0, [r7, #12]
    9c90:	4b41      	ldr	r3, [pc, #260]	; (9d98 <_oscctrl_init_referenced_generators+0x200>)
    9c92:	4798      	blx	r3
    9c94:	4603      	mov	r3, r0
    9c96:	2b00      	cmp	r3, #0
    9c98:	d00c      	beq.n	9cb4 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    9c9a:	f44f 6310 	mov.w	r3, #2304	; 0x900
    9c9e:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    9ca0:	bf00      	nop
    9ca2:	6879      	ldr	r1, [r7, #4]
    9ca4:	68f8      	ldr	r0, [r7, #12]
    9ca6:	4b3d      	ldr	r3, [pc, #244]	; (9d9c <_oscctrl_init_referenced_generators+0x204>)
    9ca8:	4798      	blx	r3
    9caa:	4602      	mov	r2, r0
    9cac:	687b      	ldr	r3, [r7, #4]
    9cae:	429a      	cmp	r2, r3
    9cb0:	d1f7      	bne.n	9ca2 <_oscctrl_init_referenced_generators+0x10a>
    9cb2:	e009      	b.n	9cc8 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    9cb4:	bf00      	nop
    9cb6:	68f8      	ldr	r0, [r7, #12]
    9cb8:	4b39      	ldr	r3, [pc, #228]	; (9da0 <_oscctrl_init_referenced_generators+0x208>)
    9cba:	4798      	blx	r3
    9cbc:	4603      	mov	r3, r0
    9cbe:	f083 0301 	eor.w	r3, r3, #1
    9cc2:	b2db      	uxtb	r3, r3
    9cc4:	2b00      	cmp	r3, #0
    9cc6:	d1f6      	bne.n	9cb6 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    9cc8:	bf00      	nop
    9cca:	2100      	movs	r1, #0
    9ccc:	68f8      	ldr	r0, [r7, #12]
    9cce:	4b35      	ldr	r3, [pc, #212]	; (9da4 <_oscctrl_init_referenced_generators+0x20c>)
    9cd0:	4798      	blx	r3
    9cd2:	4603      	mov	r3, r0
    9cd4:	f083 0301 	eor.w	r3, r3, #1
    9cd8:	b2db      	uxtb	r3, r3
    9cda:	2b00      	cmp	r3, #0
    9cdc:	d009      	beq.n	9cf2 <_oscctrl_init_referenced_generators+0x15a>
    9cde:	2100      	movs	r1, #0
    9ce0:	68f8      	ldr	r0, [r7, #12]
    9ce2:	4b31      	ldr	r3, [pc, #196]	; (9da8 <_oscctrl_init_referenced_generators+0x210>)
    9ce4:	4798      	blx	r3
    9ce6:	4603      	mov	r3, r0
    9ce8:	f083 0301 	eor.w	r3, r3, #1
    9cec:	b2db      	uxtb	r3, r3
    9cee:	2b00      	cmp	r3, #0
    9cf0:	d1eb      	bne.n	9cca <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    9cf2:	bf00      	nop
    9cf4:	2101      	movs	r1, #1
    9cf6:	68f8      	ldr	r0, [r7, #12]
    9cf8:	4b2a      	ldr	r3, [pc, #168]	; (9da4 <_oscctrl_init_referenced_generators+0x20c>)
    9cfa:	4798      	blx	r3
    9cfc:	4603      	mov	r3, r0
    9cfe:	f083 0301 	eor.w	r3, r3, #1
    9d02:	b2db      	uxtb	r3, r3
    9d04:	2b00      	cmp	r3, #0
    9d06:	d009      	beq.n	9d1c <_oscctrl_init_referenced_generators+0x184>
    9d08:	2101      	movs	r1, #1
    9d0a:	68f8      	ldr	r0, [r7, #12]
    9d0c:	4b26      	ldr	r3, [pc, #152]	; (9da8 <_oscctrl_init_referenced_generators+0x210>)
    9d0e:	4798      	blx	r3
    9d10:	4603      	mov	r3, r0
    9d12:	f083 0301 	eor.w	r3, r3, #1
    9d16:	b2db      	uxtb	r3, r3
    9d18:	2b00      	cmp	r3, #0
    9d1a:	d1eb      	bne.n	9cf4 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    9d1c:	bf00      	nop
    9d1e:	480c      	ldr	r0, [pc, #48]	; (9d50 <_oscctrl_init_referenced_generators+0x1b8>)
    9d20:	4b22      	ldr	r3, [pc, #136]	; (9dac <_oscctrl_init_referenced_generators+0x214>)
    9d22:	4798      	blx	r3
    9d24:	4603      	mov	r3, r0
    9d26:	2b00      	cmp	r3, #0
    9d28:	d1f9      	bne.n	9d1e <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    9d2a:	2207      	movs	r2, #7
    9d2c:	2100      	movs	r1, #0
    9d2e:	4808      	ldr	r0, [pc, #32]	; (9d50 <_oscctrl_init_referenced_generators+0x1b8>)
    9d30:	4b08      	ldr	r3, [pc, #32]	; (9d54 <_oscctrl_init_referenced_generators+0x1bc>)
    9d32:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    9d34:	bf00      	nop
    9d36:	4806      	ldr	r0, [pc, #24]	; (9d50 <_oscctrl_init_referenced_generators+0x1b8>)
    9d38:	4b07      	ldr	r3, [pc, #28]	; (9d58 <_oscctrl_init_referenced_generators+0x1c0>)
    9d3a:	4798      	blx	r3
    9d3c:	4603      	mov	r3, r0
    9d3e:	2b00      	cmp	r3, #0
    9d40:	d1f9      	bne.n	9d36 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    9d42:	bf00      	nop
    9d44:	3710      	adds	r7, #16
    9d46:	46bd      	mov	sp, r7
    9d48:	bd80      	pop	{r7, pc}
    9d4a:	bf00      	nop
    9d4c:	40001000 	.word	0x40001000
    9d50:	40001c00 	.word	0x40001c00
    9d54:	00009765 	.word	0x00009765
    9d58:	00009725 	.word	0x00009725
    9d5c:	000099c9 	.word	0x000099c9
    9d60:	0401bb80 	.word	0x0401bb80
    9d64:	00009a6b 	.word	0x00009a6b
    9d68:	00009b23 	.word	0x00009b23
    9d6c:	00009a17 	.word	0x00009a17
    9d70:	00009abb 	.word	0x00009abb
    9d74:	00009a87 	.word	0x00009a87
    9d78:	00009a53 	.word	0x00009a53
    9d7c:	00009a37 	.word	0x00009a37
    9d80:	00009aef 	.word	0x00009aef
    9d84:	000097b5 	.word	0x000097b5
    9d88:	000098c1 	.word	0x000098c1
    9d8c:	000098fd 	.word	0x000098fd
    9d90:	00009885 	.word	0x00009885
    9d94:	000407a0 	.word	0x000407a0
    9d98:	000099e7 	.word	0x000099e7
    9d9c:	0000997b 	.word	0x0000997b
    9da0:	00009953 	.word	0x00009953
    9da4:	00009811 	.word	0x00009811
    9da8:	00009849 	.word	0x00009849
    9dac:	0000974d 	.word	0x0000974d

00009db0 <hri_pac_get_STATUSA_reg>:
{
	return (((Pac *)hw)->STATUSA.reg & PAC_STATUSA_TC1) >> PAC_STATUSA_TC1_Pos;
}

static inline hri_pac_statusa_reg_t hri_pac_get_STATUSA_reg(const void *const hw, hri_pac_statusa_reg_t mask)
{
    9db0:	b480      	push	{r7}
    9db2:	b085      	sub	sp, #20
    9db4:	af00      	add	r7, sp, #0
    9db6:	6078      	str	r0, [r7, #4]
    9db8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSA.reg;
    9dba:	687b      	ldr	r3, [r7, #4]
    9dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9dbe:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9dc0:	68fa      	ldr	r2, [r7, #12]
    9dc2:	683b      	ldr	r3, [r7, #0]
    9dc4:	4013      	ands	r3, r2
    9dc6:	60fb      	str	r3, [r7, #12]
	return tmp;
    9dc8:	68fb      	ldr	r3, [r7, #12]
}
    9dca:	4618      	mov	r0, r3
    9dcc:	3714      	adds	r7, #20
    9dce:	46bd      	mov	sp, r7
    9dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dd4:	4770      	bx	lr

00009dd6 <hri_pac_get_STATUSB_reg>:
{
	return (((Pac *)hw)->STATUSB.reg & PAC_STATUSB_RAMECC) >> PAC_STATUSB_RAMECC_Pos;
}

static inline hri_pac_statusb_reg_t hri_pac_get_STATUSB_reg(const void *const hw, hri_pac_statusb_reg_t mask)
{
    9dd6:	b480      	push	{r7}
    9dd8:	b085      	sub	sp, #20
    9dda:	af00      	add	r7, sp, #0
    9ddc:	6078      	str	r0, [r7, #4]
    9dde:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSB.reg;
    9de0:	687b      	ldr	r3, [r7, #4]
    9de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9de4:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9de6:	68fa      	ldr	r2, [r7, #12]
    9de8:	683b      	ldr	r3, [r7, #0]
    9dea:	4013      	ands	r3, r2
    9dec:	60fb      	str	r3, [r7, #12]
	return tmp;
    9dee:	68fb      	ldr	r3, [r7, #12]
}
    9df0:	4618      	mov	r0, r3
    9df2:	3714      	adds	r7, #20
    9df4:	46bd      	mov	sp, r7
    9df6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dfa:	4770      	bx	lr

00009dfc <hri_pac_get_STATUSC_reg>:
{
	return (((Pac *)hw)->STATUSC.reg & PAC_STATUSC_CCL) >> PAC_STATUSC_CCL_Pos;
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
    9dfc:	b480      	push	{r7}
    9dfe:	b085      	sub	sp, #20
    9e00:	af00      	add	r7, sp, #0
    9e02:	6078      	str	r0, [r7, #4]
    9e04:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    9e06:	687b      	ldr	r3, [r7, #4]
    9e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9e0a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9e0c:	68fa      	ldr	r2, [r7, #12]
    9e0e:	683b      	ldr	r3, [r7, #0]
    9e10:	4013      	ands	r3, r2
    9e12:	60fb      	str	r3, [r7, #12]
	return tmp;
    9e14:	68fb      	ldr	r3, [r7, #12]
}
    9e16:	4618      	mov	r0, r3
    9e18:	3714      	adds	r7, #20
    9e1a:	46bd      	mov	sp, r7
    9e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e20:	4770      	bx	lr

00009e22 <hri_pac_get_STATUSD_reg>:
{
	return (((Pac *)hw)->STATUSD.reg & PAC_STATUSD_PCC) >> PAC_STATUSD_PCC_Pos;
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
    9e22:	b480      	push	{r7}
    9e24:	b085      	sub	sp, #20
    9e26:	af00      	add	r7, sp, #0
    9e28:	6078      	str	r0, [r7, #4]
    9e2a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    9e2c:	687b      	ldr	r3, [r7, #4]
    9e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9e30:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9e32:	68fa      	ldr	r2, [r7, #12]
    9e34:	683b      	ldr	r3, [r7, #0]
    9e36:	4013      	ands	r3, r2
    9e38:	60fb      	str	r3, [r7, #12]
	return tmp;
    9e3a:	68fb      	ldr	r3, [r7, #12]
}
    9e3c:	4618      	mov	r0, r3
    9e3e:	3714      	adds	r7, #20
    9e40:	46bd      	mov	sp, r7
    9e42:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e46:	4770      	bx	lr

00009e48 <hri_pac_write_WRCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
    9e48:	b480      	push	{r7}
    9e4a:	b083      	sub	sp, #12
    9e4c:	af00      	add	r7, sp, #0
    9e4e:	6078      	str	r0, [r7, #4]
    9e50:	6039      	str	r1, [r7, #0]
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    9e52:	687b      	ldr	r3, [r7, #4]
    9e54:	683a      	ldr	r2, [r7, #0]
    9e56:	601a      	str	r2, [r3, #0]
	PAC_CRITICAL_SECTION_LEAVE();
}
    9e58:	bf00      	nop
    9e5a:	370c      	adds	r7, #12
    9e5c:	46bd      	mov	sp, r7
    9e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e62:	4770      	bx	lr

00009e64 <_pac_get_peripheral_id>:
#include <compiler.h>
#include <utils_assert.h>
#include <hpl_pac.h>

static uint32_t _pac_get_peripheral_id(const void *const module)
{
    9e64:	b480      	push	{r7}
    9e66:	b085      	sub	sp, #20
    9e68:	af00      	add	r7, sp, #0
    9e6a:	6078      	str	r0, [r7, #4]
	uint32_t peripheral = 10;
    9e6c:	230a      	movs	r3, #10
    9e6e:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    9e70:	687b      	ldr	r3, [r7, #4]
    9e72:	f003 4382 	and.w	r3, r3, #1090519040	; 0x41000000
    9e76:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    9e7a:	d101      	bne.n	9e80 <_pac_get_peripheral_id+0x1c>
		peripheral = 13;
    9e7c:	230d      	movs	r3, #13
    9e7e:	60fb      	str	r3, [r7, #12]
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    9e80:	687b      	ldr	r3, [r7, #4]
    9e82:	0e1b      	lsrs	r3, r3, #24
    9e84:	f003 030f 	and.w	r3, r3, #15
    9e88:	015a      	lsls	r2, r3, #5
    9e8a:	6879      	ldr	r1, [r7, #4]
    9e8c:	4b06      	ldr	r3, [pc, #24]	; (9ea8 <_pac_get_peripheral_id+0x44>)
    9e8e:	400b      	ands	r3, r1
    9e90:	68f9      	ldr	r1, [r7, #12]
    9e92:	40cb      	lsrs	r3, r1
    9e94:	4413      	add	r3, r2
    9e96:	60fb      	str	r3, [r7, #12]

	return peripheral;
    9e98:	68fb      	ldr	r3, [r7, #12]
}
    9e9a:	4618      	mov	r0, r3
    9e9c:	3714      	adds	r7, #20
    9e9e:	46bd      	mov	sp, r7
    9ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ea4:	4770      	bx	lr
    9ea6:	bf00      	nop
    9ea8:	000fff00 	.word	0x000fff00

00009eac <_periph_lock>:

/**
 * \brief Enable write protect for the given hardware module
 */
int32_t _periph_lock(const void *const module)
{
    9eac:	b580      	push	{r7, lr}
    9eae:	b086      	sub	sp, #24
    9eb0:	af00      	add	r7, sp, #0
    9eb2:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    9eb4:	687b      	ldr	r3, [r7, #4]
    9eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9eba:	bf8c      	ite	hi
    9ebc:	2301      	movhi	r3, #1
    9ebe:	2300      	movls	r3, #0
    9ec0:	b2db      	uxtb	r3, r3
    9ec2:	2239      	movs	r2, #57	; 0x39
    9ec4:	4917      	ldr	r1, [pc, #92]	; (9f24 <_periph_lock+0x78>)
    9ec6:	4618      	mov	r0, r3
    9ec8:	4b17      	ldr	r3, [pc, #92]	; (9f28 <_periph_lock+0x7c>)
    9eca:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    9ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9ed0:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    9ed2:	6878      	ldr	r0, [r7, #4]
    9ed4:	4b15      	ldr	r3, [pc, #84]	; (9f2c <_periph_lock+0x80>)
    9ed6:	4798      	blx	r3
    9ed8:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    9eda:	693b      	ldr	r3, [r7, #16]
    9edc:	b29b      	uxth	r3, r3
    9ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9ee2:	4619      	mov	r1, r3
    9ee4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9ee8:	4b11      	ldr	r3, [pc, #68]	; (9f30 <_periph_lock+0x84>)
    9eea:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    9eec:	f107 030f 	add.w	r3, r7, #15
    9ef0:	4619      	mov	r1, r3
    9ef2:	6878      	ldr	r0, [r7, #4]
    9ef4:	4b0f      	ldr	r3, [pc, #60]	; (9f34 <_periph_lock+0x88>)
    9ef6:	4798      	blx	r3
	} while (!stat && timeout--);
    9ef8:	7bfb      	ldrb	r3, [r7, #15]
    9efa:	f083 0301 	eor.w	r3, r3, #1
    9efe:	b2db      	uxtb	r3, r3
    9f00:	2b00      	cmp	r3, #0
    9f02:	d004      	beq.n	9f0e <_periph_lock+0x62>
    9f04:	697b      	ldr	r3, [r7, #20]
    9f06:	1e5a      	subs	r2, r3, #1
    9f08:	617a      	str	r2, [r7, #20]
    9f0a:	2b00      	cmp	r3, #0
    9f0c:	d1ee      	bne.n	9eec <_periph_lock+0x40>

	if (timeout < 0) {
    9f0e:	697b      	ldr	r3, [r7, #20]
    9f10:	2b00      	cmp	r3, #0
    9f12:	da02      	bge.n	9f1a <_periph_lock+0x6e>
		return ERR_TIMEOUT;
    9f14:	f06f 0307 	mvn.w	r3, #7
    9f18:	e000      	b.n	9f1c <_periph_lock+0x70>
	}

	return ERR_NONE;
    9f1a:	2300      	movs	r3, #0
}
    9f1c:	4618      	mov	r0, r3
    9f1e:	3718      	adds	r7, #24
    9f20:	46bd      	mov	sp, r7
    9f22:	bd80      	pop	{r7, pc}
    9f24:	000203e0 	.word	0x000203e0
    9f28:	00007d5d 	.word	0x00007d5d
    9f2c:	00009e65 	.word	0x00009e65
    9f30:	00009e49 	.word	0x00009e49
    9f34:	00009fc1 	.word	0x00009fc1

00009f38 <_periph_unlock>:

/**
 * \brief Disable write protect for the given hardware module
 */
int32_t _periph_unlock(const void *const module)
{
    9f38:	b580      	push	{r7, lr}
    9f3a:	b086      	sub	sp, #24
    9f3c:	af00      	add	r7, sp, #0
    9f3e:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    9f40:	687b      	ldr	r3, [r7, #4]
    9f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9f46:	bf8c      	ite	hi
    9f48:	2301      	movhi	r3, #1
    9f4a:	2300      	movls	r3, #0
    9f4c:	b2db      	uxtb	r3, r3
    9f4e:	2253      	movs	r2, #83	; 0x53
    9f50:	4916      	ldr	r1, [pc, #88]	; (9fac <_periph_unlock+0x74>)
    9f52:	4618      	mov	r0, r3
    9f54:	4b16      	ldr	r3, [pc, #88]	; (9fb0 <_periph_unlock+0x78>)
    9f56:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    9f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9f5c:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    9f5e:	6878      	ldr	r0, [r7, #4]
    9f60:	4b14      	ldr	r3, [pc, #80]	; (9fb4 <_periph_unlock+0x7c>)
    9f62:	4798      	blx	r3
    9f64:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    9f66:	693b      	ldr	r3, [r7, #16]
    9f68:	b29b      	uxth	r3, r3
    9f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9f6e:	4619      	mov	r1, r3
    9f70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9f74:	4b10      	ldr	r3, [pc, #64]	; (9fb8 <_periph_unlock+0x80>)
    9f76:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    9f78:	f107 030f 	add.w	r3, r7, #15
    9f7c:	4619      	mov	r1, r3
    9f7e:	6878      	ldr	r0, [r7, #4]
    9f80:	4b0e      	ldr	r3, [pc, #56]	; (9fbc <_periph_unlock+0x84>)
    9f82:	4798      	blx	r3
	} while (stat && timeout--);
    9f84:	7bfb      	ldrb	r3, [r7, #15]
    9f86:	2b00      	cmp	r3, #0
    9f88:	d004      	beq.n	9f94 <_periph_unlock+0x5c>
    9f8a:	697b      	ldr	r3, [r7, #20]
    9f8c:	1e5a      	subs	r2, r3, #1
    9f8e:	617a      	str	r2, [r7, #20]
    9f90:	2b00      	cmp	r3, #0
    9f92:	d1f1      	bne.n	9f78 <_periph_unlock+0x40>

	if (timeout < 0) {
    9f94:	697b      	ldr	r3, [r7, #20]
    9f96:	2b00      	cmp	r3, #0
    9f98:	da02      	bge.n	9fa0 <_periph_unlock+0x68>
		return ERR_TIMEOUT;
    9f9a:	f06f 0307 	mvn.w	r3, #7
    9f9e:	e000      	b.n	9fa2 <_periph_unlock+0x6a>
	}

	return ERR_NONE;
    9fa0:	2300      	movs	r3, #0
}
    9fa2:	4618      	mov	r0, r3
    9fa4:	3718      	adds	r7, #24
    9fa6:	46bd      	mov	sp, r7
    9fa8:	bd80      	pop	{r7, pc}
    9faa:	bf00      	nop
    9fac:	000203e0 	.word	0x000203e0
    9fb0:	00007d5d 	.word	0x00007d5d
    9fb4:	00009e65 	.word	0x00009e65
    9fb8:	00009e49 	.word	0x00009e49
    9fbc:	00009fc1 	.word	0x00009fc1

00009fc0 <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    9fc0:	b580      	push	{r7, lr}
    9fc2:	b084      	sub	sp, #16
    9fc4:	af00      	add	r7, sp, #0
    9fc6:	6078      	str	r0, [r7, #4]
    9fc8:	6039      	str	r1, [r7, #0]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    9fca:	687b      	ldr	r3, [r7, #4]
    9fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9fd0:	bf8c      	ite	hi
    9fd2:	2301      	movhi	r3, #1
    9fd4:	2300      	movls	r3, #0
    9fd6:	b2db      	uxtb	r3, r3
    9fd8:	226d      	movs	r2, #109	; 0x6d
    9fda:	4931      	ldr	r1, [pc, #196]	; (a0a0 <_periph_get_lock_state+0xe0>)
    9fdc:	4618      	mov	r0, r3
    9fde:	4b31      	ldr	r3, [pc, #196]	; (a0a4 <_periph_get_lock_state+0xe4>)
    9fe0:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    9fe2:	6878      	ldr	r0, [r7, #4]
    9fe4:	4b30      	ldr	r3, [pc, #192]	; (a0a8 <_periph_get_lock_state+0xe8>)
    9fe6:	4798      	blx	r3
    9fe8:	4603      	mov	r3, r0
    9fea:	f003 031f 	and.w	r3, r3, #31
    9fee:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    9ff0:	687b      	ldr	r3, [r7, #4]
    9ff2:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    9ff6:	d211      	bcs.n	a01c <_periph_get_lock_state+0x5c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    9ff8:	2201      	movs	r2, #1
    9ffa:	68fb      	ldr	r3, [r7, #12]
    9ffc:	fa02 f303 	lsl.w	r3, r2, r3
    a000:	4619      	mov	r1, r3
    a002:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a006:	4b29      	ldr	r3, [pc, #164]	; (a0ac <_periph_get_lock_state+0xec>)
    a008:	4798      	blx	r3
    a00a:	4603      	mov	r3, r0
    a00c:	2b00      	cmp	r3, #0
    a00e:	bf14      	ite	ne
    a010:	2301      	movne	r3, #1
    a012:	2300      	moveq	r3, #0
    a014:	b2da      	uxtb	r2, r3
    a016:	683b      	ldr	r3, [r7, #0]
    a018:	701a      	strb	r2, [r3, #0]
    a01a:	e03c      	b.n	a096 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    a01c:	687b      	ldr	r3, [r7, #4]
    a01e:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    a022:	d211      	bcs.n	a048 <_periph_get_lock_state+0x88>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    a024:	2201      	movs	r2, #1
    a026:	68fb      	ldr	r3, [r7, #12]
    a028:	fa02 f303 	lsl.w	r3, r2, r3
    a02c:	4619      	mov	r1, r3
    a02e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a032:	4b1f      	ldr	r3, [pc, #124]	; (a0b0 <_periph_get_lock_state+0xf0>)
    a034:	4798      	blx	r3
    a036:	4603      	mov	r3, r0
    a038:	2b00      	cmp	r3, #0
    a03a:	bf14      	ite	ne
    a03c:	2301      	movne	r3, #1
    a03e:	2300      	moveq	r3, #0
    a040:	b2da      	uxtb	r2, r3
    a042:	683b      	ldr	r3, [r7, #0]
    a044:	701a      	strb	r2, [r3, #0]
    a046:	e026      	b.n	a096 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    a048:	687b      	ldr	r3, [r7, #4]
    a04a:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    a04e:	d211      	bcs.n	a074 <_periph_get_lock_state+0xb4>
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
    a050:	2201      	movs	r2, #1
    a052:	68fb      	ldr	r3, [r7, #12]
    a054:	fa02 f303 	lsl.w	r3, r2, r3
    a058:	4619      	mov	r1, r3
    a05a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a05e:	4b15      	ldr	r3, [pc, #84]	; (a0b4 <_periph_get_lock_state+0xf4>)
    a060:	4798      	blx	r3
    a062:	4603      	mov	r3, r0
    a064:	2b00      	cmp	r3, #0
    a066:	bf14      	ite	ne
    a068:	2301      	movne	r3, #1
    a06a:	2300      	moveq	r3, #0
    a06c:	b2da      	uxtb	r2, r3
    a06e:	683b      	ldr	r3, [r7, #0]
    a070:	701a      	strb	r2, [r3, #0]
    a072:	e010      	b.n	a096 <_periph_get_lock_state+0xd6>
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    a074:	2201      	movs	r2, #1
    a076:	68fb      	ldr	r3, [r7, #12]
    a078:	fa02 f303 	lsl.w	r3, r2, r3
    a07c:	4619      	mov	r1, r3
    a07e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a082:	4b0d      	ldr	r3, [pc, #52]	; (a0b8 <_periph_get_lock_state+0xf8>)
    a084:	4798      	blx	r3
    a086:	4603      	mov	r3, r0
    a088:	2b00      	cmp	r3, #0
    a08a:	bf14      	ite	ne
    a08c:	2301      	movne	r3, #1
    a08e:	2300      	moveq	r3, #0
    a090:	b2da      	uxtb	r2, r3
    a092:	683b      	ldr	r3, [r7, #0]
    a094:	701a      	strb	r2, [r3, #0]
	}

	return ERR_NONE;
    a096:	2300      	movs	r3, #0
}
    a098:	4618      	mov	r0, r3
    a09a:	3710      	adds	r7, #16
    a09c:	46bd      	mov	sp, r7
    a09e:	bd80      	pop	{r7, pc}
    a0a0:	000203e0 	.word	0x000203e0
    a0a4:	00007d5d 	.word	0x00007d5d
    a0a8:	00009e65 	.word	0x00009e65
    a0ac:	00009db1 	.word	0x00009db1
    a0b0:	00009dd7 	.word	0x00009dd7
    a0b4:	00009dfd 	.word	0x00009dfd
    a0b8:	00009e23 	.word	0x00009e23

0000a0bc <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    a0bc:	b480      	push	{r7}
    a0be:	b083      	sub	sp, #12
    a0c0:	af00      	add	r7, sp, #0
    a0c2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    a0c4:	687b      	ldr	r3, [r7, #4]
    a0c6:	69db      	ldr	r3, [r3, #28]
    a0c8:	0a9b      	lsrs	r3, r3, #10
    a0ca:	f003 0301 	and.w	r3, r3, #1
    a0ce:	2b00      	cmp	r3, #0
    a0d0:	bf14      	ite	ne
    a0d2:	2301      	movne	r3, #1
    a0d4:	2300      	moveq	r3, #0
    a0d6:	b2db      	uxtb	r3, r3
}
    a0d8:	4618      	mov	r0, r3
    a0da:	370c      	adds	r7, #12
    a0dc:	46bd      	mov	sp, r7
    a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0e2:	4770      	bx	lr

0000a0e4 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    a0e4:	b480      	push	{r7}
    a0e6:	b083      	sub	sp, #12
    a0e8:	af00      	add	r7, sp, #0
    a0ea:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    a0ec:	687b      	ldr	r3, [r7, #4]
    a0ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a0f2:	61da      	str	r2, [r3, #28]
}
    a0f4:	bf00      	nop
    a0f6:	370c      	adds	r7, #12
    a0f8:	46bd      	mov	sp, r7
    a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0fe:	4770      	bx	lr

0000a100 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    a100:	b480      	push	{r7}
    a102:	b083      	sub	sp, #12
    a104:	af00      	add	r7, sp, #0
    a106:	6078      	str	r0, [r7, #4]
    a108:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    a10a:	687b      	ldr	r3, [r7, #4]
    a10c:	683a      	ldr	r2, [r7, #0]
    a10e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a110:	bf00      	nop
    a112:	370c      	adds	r7, #12
    a114:	46bd      	mov	sp, r7
    a116:	f85d 7b04 	ldr.w	r7, [sp], #4
    a11a:	4770      	bx	lr

0000a11c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    a11c:	b480      	push	{r7}
    a11e:	b083      	sub	sp, #12
    a120:	af00      	add	r7, sp, #0
    a122:	6078      	str	r0, [r7, #4]
    a124:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    a126:	687b      	ldr	r3, [r7, #4]
    a128:	683a      	ldr	r2, [r7, #0]
    a12a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a12c:	bf00      	nop
    a12e:	370c      	adds	r7, #12
    a130:	46bd      	mov	sp, r7
    a132:	f85d 7b04 	ldr.w	r7, [sp], #4
    a136:	4770      	bx	lr

0000a138 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    a138:	b480      	push	{r7}
    a13a:	b083      	sub	sp, #12
    a13c:	af00      	add	r7, sp, #0
    a13e:	6078      	str	r0, [r7, #4]
    a140:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    a142:	687b      	ldr	r3, [r7, #4]
    a144:	683a      	ldr	r2, [r7, #0]
    a146:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a148:	bf00      	nop
    a14a:	370c      	adds	r7, #12
    a14c:	46bd      	mov	sp, r7
    a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a152:	4770      	bx	lr

0000a154 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    a154:	b480      	push	{r7}
    a156:	b083      	sub	sp, #12
    a158:	af00      	add	r7, sp, #0
    a15a:	6078      	str	r0, [r7, #4]
    a15c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    a15e:	687b      	ldr	r3, [r7, #4]
    a160:	683a      	ldr	r2, [r7, #0]
    a162:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a164:	bf00      	nop
    a166:	370c      	adds	r7, #12
    a168:	46bd      	mov	sp, r7
    a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a16e:	4770      	bx	lr

0000a170 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    a170:	b480      	push	{r7}
    a172:	b085      	sub	sp, #20
    a174:	af00      	add	r7, sp, #0
    a176:	6078      	str	r0, [r7, #4]
    a178:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    a17a:	687b      	ldr	r3, [r7, #4]
    a17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a17e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    a180:	68fb      	ldr	r3, [r7, #12]
    a182:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a186:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    a188:	683b      	ldr	r3, [r7, #0]
    a18a:	b2db      	uxtb	r3, r3
    a18c:	68fa      	ldr	r2, [r7, #12]
    a18e:	4313      	orrs	r3, r2
    a190:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    a192:	687b      	ldr	r3, [r7, #4]
    a194:	68fa      	ldr	r2, [r7, #12]
    a196:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a198:	bf00      	nop
    a19a:	3714      	adds	r7, #20
    a19c:	46bd      	mov	sp, r7
    a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1a2:	4770      	bx	lr

0000a1a4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    a1a4:	b480      	push	{r7}
    a1a6:	b085      	sub	sp, #20
    a1a8:	af00      	add	r7, sp, #0
    a1aa:	6078      	str	r0, [r7, #4]
    a1ac:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    a1ae:	687b      	ldr	r3, [r7, #4]
    a1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a1b2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    a1b4:	68fb      	ldr	r3, [r7, #12]
    a1b6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    a1ba:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    a1bc:	683b      	ldr	r3, [r7, #0]
    a1be:	041b      	lsls	r3, r3, #16
    a1c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a1c4:	68fa      	ldr	r2, [r7, #12]
    a1c6:	4313      	orrs	r3, r2
    a1c8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    a1ca:	687b      	ldr	r3, [r7, #4]
    a1cc:	68fa      	ldr	r2, [r7, #12]
    a1ce:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a1d0:	bf00      	nop
    a1d2:	3714      	adds	r7, #20
    a1d4:	46bd      	mov	sp, r7
    a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1da:	4770      	bx	lr

0000a1dc <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    a1dc:	b480      	push	{r7}
    a1de:	b083      	sub	sp, #12
    a1e0:	af00      	add	r7, sp, #0
    a1e2:	6078      	str	r0, [r7, #4]
    a1e4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    a1e6:	687b      	ldr	r3, [r7, #4]
    a1e8:	683a      	ldr	r2, [r7, #0]
    a1ea:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a1ec:	bf00      	nop
    a1ee:	370c      	adds	r7, #12
    a1f0:	46bd      	mov	sp, r7
    a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1f6:	4770      	bx	lr

0000a1f8 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    a1f8:	b480      	push	{r7}
    a1fa:	b083      	sub	sp, #12
    a1fc:	af00      	add	r7, sp, #0
    a1fe:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    a200:	687b      	ldr	r3, [r7, #4]
    a202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    a204:	4618      	mov	r0, r3
    a206:	370c      	adds	r7, #12
    a208:	46bd      	mov	sp, r7
    a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a20e:	4770      	bx	lr

0000a210 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    a210:	b480      	push	{r7}
    a212:	b085      	sub	sp, #20
    a214:	af00      	add	r7, sp, #0
    a216:	60f8      	str	r0, [r7, #12]
    a218:	60b9      	str	r1, [r7, #8]
    a21a:	607a      	str	r2, [r7, #4]
	while (count--) {
    a21c:	e007      	b.n	a22e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    a21e:	68fb      	ldr	r3, [r7, #12]
    a220:	1c5a      	adds	r2, r3, #1
    a222:	60fa      	str	r2, [r7, #12]
    a224:	68ba      	ldr	r2, [r7, #8]
    a226:	1c51      	adds	r1, r2, #1
    a228:	60b9      	str	r1, [r7, #8]
    a22a:	7812      	ldrb	r2, [r2, #0]
    a22c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    a22e:	687b      	ldr	r3, [r7, #4]
    a230:	1e5a      	subs	r2, r3, #1
    a232:	607a      	str	r2, [r7, #4]
    a234:	2b00      	cmp	r3, #0
    a236:	d1f2      	bne.n	a21e <_qspi_memcpy+0xe>
	}
}
    a238:	bf00      	nop
    a23a:	3714      	adds	r7, #20
    a23c:	46bd      	mov	sp, r7
    a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a242:	4770      	bx	lr

0000a244 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    a244:	b580      	push	{r7, lr}
    a246:	b082      	sub	sp, #8
    a248:	af00      	add	r7, sp, #0
    a24a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    a24c:	4903      	ldr	r1, [pc, #12]	; (a25c <_qspi_end_transfer+0x18>)
    a24e:	6878      	ldr	r0, [r7, #4]
    a250:	4b03      	ldr	r3, [pc, #12]	; (a260 <_qspi_end_transfer+0x1c>)
    a252:	4798      	blx	r3
}
    a254:	bf00      	nop
    a256:	3708      	adds	r7, #8
    a258:	46bd      	mov	sp, r7
    a25a:	bd80      	pop	{r7, pc}
    a25c:	01000002 	.word	0x01000002
    a260:	0000a101 	.word	0x0000a101

0000a264 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    a264:	b580      	push	{r7, lr}
    a266:	b082      	sub	sp, #8
    a268:	af00      	add	r7, sp, #0
    a26a:	6078      	str	r0, [r7, #4]
    a26c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    a26e:	687b      	ldr	r3, [r7, #4]
    a270:	2b00      	cmp	r3, #0
    a272:	d004      	beq.n	a27e <_qspi_sync_init+0x1a>
    a274:	683b      	ldr	r3, [r7, #0]
    a276:	2b00      	cmp	r3, #0
    a278:	d001      	beq.n	a27e <_qspi_sync_init+0x1a>
    a27a:	2301      	movs	r3, #1
    a27c:	e000      	b.n	a280 <_qspi_sync_init+0x1c>
    a27e:	2300      	movs	r3, #0
    a280:	f003 0301 	and.w	r3, r3, #1
    a284:	b2db      	uxtb	r3, r3
    a286:	2240      	movs	r2, #64	; 0x40
    a288:	490c      	ldr	r1, [pc, #48]	; (a2bc <_qspi_sync_init+0x58>)
    a28a:	4618      	mov	r0, r3
    a28c:	4b0c      	ldr	r3, [pc, #48]	; (a2c0 <_qspi_sync_init+0x5c>)
    a28e:	4798      	blx	r3
	dev->prvt = hw;
    a290:	687b      	ldr	r3, [r7, #4]
    a292:	683a      	ldr	r2, [r7, #0]
    a294:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    a296:	687b      	ldr	r3, [r7, #4]
    a298:	681b      	ldr	r3, [r3, #0]
    a29a:	2101      	movs	r1, #1
    a29c:	4618      	mov	r0, r3
    a29e:	4b09      	ldr	r3, [pc, #36]	; (a2c4 <_qspi_sync_init+0x60>)
    a2a0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    a2a2:	4909      	ldr	r1, [pc, #36]	; (a2c8 <_qspi_sync_init+0x64>)
    a2a4:	6838      	ldr	r0, [r7, #0]
    a2a6:	4b09      	ldr	r3, [pc, #36]	; (a2cc <_qspi_sync_init+0x68>)
    a2a8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    a2aa:	4909      	ldr	r1, [pc, #36]	; (a2d0 <_qspi_sync_init+0x6c>)
    a2ac:	6838      	ldr	r0, [r7, #0]
    a2ae:	4b09      	ldr	r3, [pc, #36]	; (a2d4 <_qspi_sync_init+0x70>)
    a2b0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    a2b2:	2300      	movs	r3, #0
}
    a2b4:	4618      	mov	r0, r3
    a2b6:	3708      	adds	r7, #8
    a2b8:	46bd      	mov	sp, r7
    a2ba:	bd80      	pop	{r7, pc}
    a2bc:	000203f8 	.word	0x000203f8
    a2c0:	00007d5d 	.word	0x00007d5d
    a2c4:	0000a101 	.word	0x0000a101
    a2c8:	06000011 	.word	0x06000011
    a2cc:	0000a11d 	.word	0x0000a11d
    a2d0:	00241300 	.word	0x00241300
    a2d4:	0000a139 	.word	0x0000a139

0000a2d8 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    a2d8:	b580      	push	{r7, lr}
    a2da:	b082      	sub	sp, #8
    a2dc:	af00      	add	r7, sp, #0
    a2de:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    a2e0:	687b      	ldr	r3, [r7, #4]
    a2e2:	681b      	ldr	r3, [r3, #0]
    a2e4:	2102      	movs	r1, #2
    a2e6:	4618      	mov	r0, r3
    a2e8:	4b03      	ldr	r3, [pc, #12]	; (a2f8 <_qspi_sync_enable+0x20>)
    a2ea:	4798      	blx	r3
	return ERR_NONE;
    a2ec:	2300      	movs	r3, #0
}
    a2ee:	4618      	mov	r0, r3
    a2f0:	3708      	adds	r7, #8
    a2f2:	46bd      	mov	sp, r7
    a2f4:	bd80      	pop	{r7, pc}
    a2f6:	bf00      	nop
    a2f8:	0000a101 	.word	0x0000a101

0000a2fc <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    a2fc:	b580      	push	{r7, lr}
    a2fe:	b082      	sub	sp, #8
    a300:	af00      	add	r7, sp, #0
    a302:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    a304:	687b      	ldr	r3, [r7, #4]
    a306:	681b      	ldr	r3, [r3, #0]
    a308:	2100      	movs	r1, #0
    a30a:	4618      	mov	r0, r3
    a30c:	4b03      	ldr	r3, [pc, #12]	; (a31c <_qspi_sync_disable+0x20>)
    a30e:	4798      	blx	r3
	return ERR_NONE;
    a310:	2300      	movs	r3, #0
}
    a312:	4618      	mov	r0, r3
    a314:	3708      	adds	r7, #8
    a316:	46bd      	mov	sp, r7
    a318:	bd80      	pop	{r7, pc}
    a31a:	bf00      	nop
    a31c:	0000a101 	.word	0x0000a101

0000a320 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a320:	b580      	push	{r7, lr}
    a322:	b084      	sub	sp, #16
    a324:	af00      	add	r7, sp, #0
    a326:	6078      	str	r0, [r7, #4]
    a328:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    a32a:	687b      	ldr	r3, [r7, #4]
    a32c:	681b      	ldr	r3, [r3, #0]
    a32e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    a330:	683b      	ldr	r3, [r7, #0]
    a332:	781b      	ldrb	r3, [r3, #0]
    a334:	f003 0320 	and.w	r3, r3, #32
    a338:	b2db      	uxtb	r3, r3
    a33a:	2b00      	cmp	r3, #0
    a33c:	d005      	beq.n	a34a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    a33e:	683b      	ldr	r3, [r7, #0]
    a340:	689b      	ldr	r3, [r3, #8]
    a342:	4619      	mov	r1, r3
    a344:	68f8      	ldr	r0, [r7, #12]
    a346:	4b13      	ldr	r3, [pc, #76]	; (a394 <_qspi_sync_command_set_ifr+0x74>)
    a348:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    a34a:	683b      	ldr	r3, [r7, #0]
    a34c:	781b      	ldrb	r3, [r3, #0]
    a34e:	f003 0310 	and.w	r3, r3, #16
    a352:	b2db      	uxtb	r3, r3
    a354:	2b00      	cmp	r3, #0
    a356:	d005      	beq.n	a364 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    a358:	683b      	ldr	r3, [r7, #0]
    a35a:	791b      	ldrb	r3, [r3, #4]
    a35c:	4619      	mov	r1, r3
    a35e:	68f8      	ldr	r0, [r7, #12]
    a360:	4b0d      	ldr	r3, [pc, #52]	; (a398 <_qspi_sync_command_set_ifr+0x78>)
    a362:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    a364:	683b      	ldr	r3, [r7, #0]
    a366:	781b      	ldrb	r3, [r3, #0]
    a368:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a36c:	b2db      	uxtb	r3, r3
    a36e:	2b00      	cmp	r3, #0
    a370:	d005      	beq.n	a37e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    a372:	683b      	ldr	r3, [r7, #0]
    a374:	795b      	ldrb	r3, [r3, #5]
    a376:	4619      	mov	r1, r3
    a378:	68f8      	ldr	r0, [r7, #12]
    a37a:	4b08      	ldr	r3, [pc, #32]	; (a39c <_qspi_sync_command_set_ifr+0x7c>)
    a37c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    a37e:	683b      	ldr	r3, [r7, #0]
    a380:	681b      	ldr	r3, [r3, #0]
    a382:	4619      	mov	r1, r3
    a384:	68f8      	ldr	r0, [r7, #12]
    a386:	4b06      	ldr	r3, [pc, #24]	; (a3a0 <_qspi_sync_command_set_ifr+0x80>)
    a388:	4798      	blx	r3
}
    a38a:	bf00      	nop
    a38c:	3710      	adds	r7, #16
    a38e:	46bd      	mov	sp, r7
    a390:	bd80      	pop	{r7, pc}
    a392:	bf00      	nop
    a394:	0000a155 	.word	0x0000a155
    a398:	0000a171 	.word	0x0000a171
    a39c:	0000a1a5 	.word	0x0000a1a5
    a3a0:	0000a1dd 	.word	0x0000a1dd

0000a3a4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a3a4:	b580      	push	{r7, lr}
    a3a6:	b084      	sub	sp, #16
    a3a8:	af00      	add	r7, sp, #0
    a3aa:	6078      	str	r0, [r7, #4]
    a3ac:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    a3ae:	687b      	ldr	r3, [r7, #4]
    a3b0:	681b      	ldr	r3, [r3, #0]
    a3b2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    a3b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    a3b8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    a3ba:	683b      	ldr	r3, [r7, #0]
    a3bc:	781b      	ldrb	r3, [r3, #0]
    a3be:	f003 0320 	and.w	r3, r3, #32
    a3c2:	b2db      	uxtb	r3, r3
    a3c4:	2b00      	cmp	r3, #0
    a3c6:	d004      	beq.n	a3d2 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    a3c8:	683b      	ldr	r3, [r7, #0]
    a3ca:	689b      	ldr	r3, [r3, #8]
    a3cc:	68fa      	ldr	r2, [r7, #12]
    a3ce:	4413      	add	r3, r2
    a3d0:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    a3d2:	68b8      	ldr	r0, [r7, #8]
    a3d4:	4b18      	ldr	r3, [pc, #96]	; (a438 <_qspi_sync_run_transfer+0x94>)
    a3d6:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    a3d8:	683b      	ldr	r3, [r7, #0]
    a3da:	691b      	ldr	r3, [r3, #16]
    a3dc:	2b00      	cmp	r3, #0
    a3de:	d103      	bne.n	a3e8 <_qspi_sync_run_transfer+0x44>
    a3e0:	683b      	ldr	r3, [r7, #0]
    a3e2:	695b      	ldr	r3, [r3, #20]
    a3e4:	2b00      	cmp	r3, #0
    a3e6:	d001      	beq.n	a3ec <_qspi_sync_run_transfer+0x48>
    a3e8:	2301      	movs	r3, #1
    a3ea:	e000      	b.n	a3ee <_qspi_sync_run_transfer+0x4a>
    a3ec:	2300      	movs	r3, #0
    a3ee:	f003 0301 	and.w	r3, r3, #1
    a3f2:	b2db      	uxtb	r3, r3
    a3f4:	2282      	movs	r2, #130	; 0x82
    a3f6:	4911      	ldr	r1, [pc, #68]	; (a43c <_qspi_sync_run_transfer+0x98>)
    a3f8:	4618      	mov	r0, r3
    a3fa:	4b11      	ldr	r3, [pc, #68]	; (a440 <_qspi_sync_run_transfer+0x9c>)
    a3fc:	4798      	blx	r3

	if (cmd->tx_buf) {
    a3fe:	683b      	ldr	r3, [r7, #0]
    a400:	691b      	ldr	r3, [r3, #16]
    a402:	2b00      	cmp	r3, #0
    a404:	d008      	beq.n	a418 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    a406:	683b      	ldr	r3, [r7, #0]
    a408:	6919      	ldr	r1, [r3, #16]
    a40a:	683b      	ldr	r3, [r7, #0]
    a40c:	68db      	ldr	r3, [r3, #12]
    a40e:	461a      	mov	r2, r3
    a410:	68f8      	ldr	r0, [r7, #12]
    a412:	4b0c      	ldr	r3, [pc, #48]	; (a444 <_qspi_sync_run_transfer+0xa0>)
    a414:	4798      	blx	r3
    a416:	e007      	b.n	a428 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    a418:	683b      	ldr	r3, [r7, #0]
    a41a:	6958      	ldr	r0, [r3, #20]
    a41c:	683b      	ldr	r3, [r7, #0]
    a41e:	68db      	ldr	r3, [r3, #12]
    a420:	461a      	mov	r2, r3
    a422:	68f9      	ldr	r1, [r7, #12]
    a424:	4b07      	ldr	r3, [pc, #28]	; (a444 <_qspi_sync_run_transfer+0xa0>)
    a426:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    a428:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a42c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    a430:	bf00      	nop
    a432:	3710      	adds	r7, #16
    a434:	46bd      	mov	sp, r7
    a436:	bd80      	pop	{r7, pc}
    a438:	0000a1f9 	.word	0x0000a1f9
    a43c:	000203f8 	.word	0x000203f8
    a440:	00007d5d 	.word	0x00007d5d
    a444:	0000a211 	.word	0x0000a211

0000a448 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a448:	b580      	push	{r7, lr}
    a44a:	b082      	sub	sp, #8
    a44c:	af00      	add	r7, sp, #0
    a44e:	6078      	str	r0, [r7, #4]
    a450:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    a452:	6839      	ldr	r1, [r7, #0]
    a454:	6878      	ldr	r0, [r7, #4]
    a456:	4b14      	ldr	r3, [pc, #80]	; (a4a8 <_qspi_sync_serial_run_command+0x60>)
    a458:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    a45a:	683b      	ldr	r3, [r7, #0]
    a45c:	781b      	ldrb	r3, [r3, #0]
    a45e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a462:	b2db      	uxtb	r3, r3
    a464:	2b00      	cmp	r3, #0
    a466:	d003      	beq.n	a470 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    a468:	6839      	ldr	r1, [r7, #0]
    a46a:	6878      	ldr	r0, [r7, #4]
    a46c:	4b0f      	ldr	r3, [pc, #60]	; (a4ac <_qspi_sync_serial_run_command+0x64>)
    a46e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    a470:	687b      	ldr	r3, [r7, #4]
    a472:	681b      	ldr	r3, [r3, #0]
    a474:	4618      	mov	r0, r3
    a476:	4b0e      	ldr	r3, [pc, #56]	; (a4b0 <_qspi_sync_serial_run_command+0x68>)
    a478:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    a47a:	bf00      	nop
    a47c:	687b      	ldr	r3, [r7, #4]
    a47e:	681b      	ldr	r3, [r3, #0]
    a480:	4618      	mov	r0, r3
    a482:	4b0c      	ldr	r3, [pc, #48]	; (a4b4 <_qspi_sync_serial_run_command+0x6c>)
    a484:	4798      	blx	r3
    a486:	4603      	mov	r3, r0
    a488:	f083 0301 	eor.w	r3, r3, #1
    a48c:	b2db      	uxtb	r3, r3
    a48e:	2b00      	cmp	r3, #0
    a490:	d1f4      	bne.n	a47c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    a492:	687b      	ldr	r3, [r7, #4]
    a494:	681b      	ldr	r3, [r3, #0]
    a496:	4618      	mov	r0, r3
    a498:	4b07      	ldr	r3, [pc, #28]	; (a4b8 <_qspi_sync_serial_run_command+0x70>)
    a49a:	4798      	blx	r3
	return ERR_NONE;
    a49c:	2300      	movs	r3, #0
}
    a49e:	4618      	mov	r0, r3
    a4a0:	3708      	adds	r7, #8
    a4a2:	46bd      	mov	sp, r7
    a4a4:	bd80      	pop	{r7, pc}
    a4a6:	bf00      	nop
    a4a8:	0000a321 	.word	0x0000a321
    a4ac:	0000a3a5 	.word	0x0000a3a5
    a4b0:	0000a245 	.word	0x0000a245
    a4b4:	0000a0bd 	.word	0x0000a0bd
    a4b8:	0000a0e5 	.word	0x0000a0e5

0000a4bc <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    a4bc:	b480      	push	{r7}
    a4be:	b083      	sub	sp, #12
    a4c0:	af00      	add	r7, sp, #0
    a4c2:	6078      	str	r0, [r7, #4]
    a4c4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    a4c6:	bf00      	nop
    a4c8:	687b      	ldr	r3, [r7, #4]
    a4ca:	691a      	ldr	r2, [r3, #16]
    a4cc:	683b      	ldr	r3, [r7, #0]
    a4ce:	4013      	ands	r3, r2
    a4d0:	2b00      	cmp	r3, #0
    a4d2:	d1f9      	bne.n	a4c8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    a4d4:	bf00      	nop
    a4d6:	370c      	adds	r7, #12
    a4d8:	46bd      	mov	sp, r7
    a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4de:	4770      	bx	lr

0000a4e0 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    a4e0:	b480      	push	{r7}
    a4e2:	b083      	sub	sp, #12
    a4e4:	af00      	add	r7, sp, #0
    a4e6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    a4e8:	687b      	ldr	r3, [r7, #4]
    a4ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    a4ee:	819a      	strh	r2, [r3, #12]
}
    a4f0:	bf00      	nop
    a4f2:	370c      	adds	r7, #12
    a4f4:	46bd      	mov	sp, r7
    a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4fa:	4770      	bx	lr

0000a4fc <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    a4fc:	b480      	push	{r7}
    a4fe:	b083      	sub	sp, #12
    a500:	af00      	add	r7, sp, #0
    a502:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    a504:	687b      	ldr	r3, [r7, #4]
    a506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a50a:	819a      	strh	r2, [r3, #12]
}
    a50c:	bf00      	nop
    a50e:	370c      	adds	r7, #12
    a510:	46bd      	mov	sp, r7
    a512:	f85d 7b04 	ldr.w	r7, [sp], #4
    a516:	4770      	bx	lr

0000a518 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    a518:	b480      	push	{r7}
    a51a:	b083      	sub	sp, #12
    a51c:	af00      	add	r7, sp, #0
    a51e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    a520:	687b      	ldr	r3, [r7, #4]
    a522:	899b      	ldrh	r3, [r3, #12]
    a524:	b29b      	uxth	r3, r3
}
    a526:	4618      	mov	r0, r3
    a528:	370c      	adds	r7, #12
    a52a:	46bd      	mov	sp, r7
    a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a530:	4770      	bx	lr

0000a532 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    a532:	b480      	push	{r7}
    a534:	b083      	sub	sp, #12
    a536:	af00      	add	r7, sp, #0
    a538:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    a53a:	687b      	ldr	r3, [r7, #4]
    a53c:	895b      	ldrh	r3, [r3, #10]
    a53e:	b29b      	uxth	r3, r3
}
    a540:	4618      	mov	r0, r3
    a542:	370c      	adds	r7, #12
    a544:	46bd      	mov	sp, r7
    a546:	f85d 7b04 	ldr.w	r7, [sp], #4
    a54a:	4770      	bx	lr

0000a54c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    a54c:	b580      	push	{r7, lr}
    a54e:	b082      	sub	sp, #8
    a550:	af00      	add	r7, sp, #0
    a552:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    a554:	687b      	ldr	r3, [r7, #4]
    a556:	881b      	ldrh	r3, [r3, #0]
    a558:	b29b      	uxth	r3, r3
    a55a:	f043 0301 	orr.w	r3, r3, #1
    a55e:	b29a      	uxth	r2, r3
    a560:	687b      	ldr	r3, [r7, #4]
    a562:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    a564:	2101      	movs	r1, #1
    a566:	6878      	ldr	r0, [r7, #4]
    a568:	4b02      	ldr	r3, [pc, #8]	; (a574 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    a56a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a56c:	bf00      	nop
    a56e:	3708      	adds	r7, #8
    a570:	46bd      	mov	sp, r7
    a572:	bd80      	pop	{r7, pc}
    a574:	0000a4bd 	.word	0x0000a4bd

0000a578 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    a578:	b580      	push	{r7, lr}
    a57a:	b082      	sub	sp, #8
    a57c:	af00      	add	r7, sp, #0
    a57e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    a580:	687b      	ldr	r3, [r7, #4]
    a582:	881b      	ldrh	r3, [r3, #0]
    a584:	b29b      	uxth	r3, r3
    a586:	f043 0302 	orr.w	r3, r3, #2
    a58a:	b29a      	uxth	r2, r3
    a58c:	687b      	ldr	r3, [r7, #4]
    a58e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a590:	f248 0103 	movw	r1, #32771	; 0x8003
    a594:	6878      	ldr	r0, [r7, #4]
    a596:	4b03      	ldr	r3, [pc, #12]	; (a5a4 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    a598:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a59a:	bf00      	nop
    a59c:	3708      	adds	r7, #8
    a59e:	46bd      	mov	sp, r7
    a5a0:	bd80      	pop	{r7, pc}
    a5a2:	bf00      	nop
    a5a4:	0000a4bd 	.word	0x0000a4bd

0000a5a8 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a5a8:	b580      	push	{r7, lr}
    a5aa:	b084      	sub	sp, #16
    a5ac:	af00      	add	r7, sp, #0
    a5ae:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a5b0:	f248 0103 	movw	r1, #32771	; 0x8003
    a5b4:	6878      	ldr	r0, [r7, #4]
    a5b6:	4b0a      	ldr	r3, [pc, #40]	; (a5e0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    a5b8:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    a5ba:	687b      	ldr	r3, [r7, #4]
    a5bc:	881b      	ldrh	r3, [r3, #0]
    a5be:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    a5c0:	89fb      	ldrh	r3, [r7, #14]
    a5c2:	085b      	lsrs	r3, r3, #1
    a5c4:	b29b      	uxth	r3, r3
    a5c6:	f003 0301 	and.w	r3, r3, #1
    a5ca:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    a5cc:	89fb      	ldrh	r3, [r7, #14]
    a5ce:	2b00      	cmp	r3, #0
    a5d0:	bf14      	ite	ne
    a5d2:	2301      	movne	r3, #1
    a5d4:	2300      	moveq	r3, #0
    a5d6:	b2db      	uxtb	r3, r3
}
    a5d8:	4618      	mov	r0, r3
    a5da:	3710      	adds	r7, #16
    a5dc:	46bd      	mov	sp, r7
    a5de:	bd80      	pop	{r7, pc}
    a5e0:	0000a4bd 	.word	0x0000a4bd

0000a5e4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a5e4:	b580      	push	{r7, lr}
    a5e6:	b082      	sub	sp, #8
    a5e8:	af00      	add	r7, sp, #0
    a5ea:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    a5ec:	687b      	ldr	r3, [r7, #4]
    a5ee:	881b      	ldrh	r3, [r3, #0]
    a5f0:	b29b      	uxth	r3, r3
    a5f2:	f023 0302 	bic.w	r3, r3, #2
    a5f6:	b29a      	uxth	r2, r3
    a5f8:	687b      	ldr	r3, [r7, #4]
    a5fa:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a5fc:	f248 0103 	movw	r1, #32771	; 0x8003
    a600:	6878      	ldr	r0, [r7, #4]
    a602:	4b03      	ldr	r3, [pc, #12]	; (a610 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    a604:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a606:	bf00      	nop
    a608:	3708      	adds	r7, #8
    a60a:	46bd      	mov	sp, r7
    a60c:	bd80      	pop	{r7, pc}
    a60e:	bf00      	nop
    a610:	0000a4bd 	.word	0x0000a4bd

0000a614 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    a614:	b580      	push	{r7, lr}
    a616:	b082      	sub	sp, #8
    a618:	af00      	add	r7, sp, #0
    a61a:	6078      	str	r0, [r7, #4]
    a61c:	460b      	mov	r3, r1
    a61e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    a620:	687b      	ldr	r3, [r7, #4]
    a622:	887a      	ldrh	r2, [r7, #2]
    a624:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a626:	f248 0103 	movw	r1, #32771	; 0x8003
    a62a:	6878      	ldr	r0, [r7, #4]
    a62c:	4b02      	ldr	r3, [pc, #8]	; (a638 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    a62e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a630:	bf00      	nop
    a632:	3708      	adds	r7, #8
    a634:	46bd      	mov	sp, r7
    a636:	bd80      	pop	{r7, pc}
    a638:	0000a4bd 	.word	0x0000a4bd

0000a63c <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    a63c:	b580      	push	{r7, lr}
    a63e:	b082      	sub	sp, #8
    a640:	af00      	add	r7, sp, #0
    a642:	6078      	str	r0, [r7, #4]
    a644:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    a646:	687b      	ldr	r3, [r7, #4]
    a648:	683a      	ldr	r2, [r7, #0]
    a64a:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    a64c:	2108      	movs	r1, #8
    a64e:	6878      	ldr	r0, [r7, #4]
    a650:	4b02      	ldr	r3, [pc, #8]	; (a65c <hri_rtcmode0_write_COUNT_reg+0x20>)
    a652:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a654:	bf00      	nop
    a656:	3708      	adds	r7, #8
    a658:	46bd      	mov	sp, r7
    a65a:	bd80      	pop	{r7, pc}
    a65c:	0000a4bd 	.word	0x0000a4bd

0000a660 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    a660:	b580      	push	{r7, lr}
    a662:	b082      	sub	sp, #8
    a664:	af00      	add	r7, sp, #0
    a666:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    a668:	2108      	movs	r1, #8
    a66a:	6878      	ldr	r0, [r7, #4]
    a66c:	4b03      	ldr	r3, [pc, #12]	; (a67c <hri_rtcmode0_read_COUNT_reg+0x1c>)
    a66e:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    a670:	687b      	ldr	r3, [r7, #4]
    a672:	699b      	ldr	r3, [r3, #24]
}
    a674:	4618      	mov	r0, r3
    a676:	3708      	adds	r7, #8
    a678:	46bd      	mov	sp, r7
    a67a:	bd80      	pop	{r7, pc}
    a67c:	0000a4bd 	.word	0x0000a4bd

0000a680 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    a680:	b480      	push	{r7}
    a682:	b083      	sub	sp, #12
    a684:	af00      	add	r7, sp, #0
    a686:	6078      	str	r0, [r7, #4]
    a688:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    a68a:	687b      	ldr	r3, [r7, #4]
    a68c:	683a      	ldr	r2, [r7, #0]
    a68e:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    a690:	bf00      	nop
    a692:	370c      	adds	r7, #12
    a694:	46bd      	mov	sp, r7
    a696:	f85d 7b04 	ldr.w	r7, [sp], #4
    a69a:	4770      	bx	lr

0000a69c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    a69c:	b580      	push	{r7, lr}
    a69e:	b082      	sub	sp, #8
    a6a0:	af00      	add	r7, sp, #0
    a6a2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    a6a4:	687b      	ldr	r3, [r7, #4]
    a6a6:	2b00      	cmp	r3, #0
    a6a8:	d005      	beq.n	a6b6 <_calendar_init+0x1a>
    a6aa:	687b      	ldr	r3, [r7, #4]
    a6ac:	681b      	ldr	r3, [r3, #0]
    a6ae:	2b00      	cmp	r3, #0
    a6b0:	d001      	beq.n	a6b6 <_calendar_init+0x1a>
    a6b2:	2301      	movs	r3, #1
    a6b4:	e000      	b.n	a6b8 <_calendar_init+0x1c>
    a6b6:	2300      	movs	r3, #0
    a6b8:	f003 0301 	and.w	r3, r3, #1
    a6bc:	b2db      	uxtb	r3, r3
    a6be:	222f      	movs	r2, #47	; 0x2f
    a6c0:	491b      	ldr	r1, [pc, #108]	; (a730 <_calendar_init+0x94>)
    a6c2:	4618      	mov	r0, r3
    a6c4:	4b1b      	ldr	r3, [pc, #108]	; (a734 <_calendar_init+0x98>)
    a6c6:	4798      	blx	r3

	_rtc_dev = dev;
    a6c8:	4a1b      	ldr	r2, [pc, #108]	; (a738 <_calendar_init+0x9c>)
    a6ca:	687b      	ldr	r3, [r7, #4]
    a6cc:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    a6ce:	687b      	ldr	r3, [r7, #4]
    a6d0:	681b      	ldr	r3, [r3, #0]
    a6d2:	4618      	mov	r0, r3
    a6d4:	4b19      	ldr	r3, [pc, #100]	; (a73c <_calendar_init+0xa0>)
    a6d6:	4798      	blx	r3
    a6d8:	4603      	mov	r3, r0
    a6da:	2b00      	cmp	r3, #0
    a6dc:	d00a      	beq.n	a6f4 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    a6de:	687b      	ldr	r3, [r7, #4]
    a6e0:	681b      	ldr	r3, [r3, #0]
    a6e2:	4618      	mov	r0, r3
    a6e4:	4b16      	ldr	r3, [pc, #88]	; (a740 <_calendar_init+0xa4>)
    a6e6:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    a6e8:	687b      	ldr	r3, [r7, #4]
    a6ea:	681b      	ldr	r3, [r3, #0]
    a6ec:	2102      	movs	r1, #2
    a6ee:	4618      	mov	r0, r3
    a6f0:	4b14      	ldr	r3, [pc, #80]	; (a744 <_calendar_init+0xa8>)
    a6f2:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    a6f4:	687b      	ldr	r3, [r7, #4]
    a6f6:	681b      	ldr	r3, [r3, #0]
    a6f8:	4618      	mov	r0, r3
    a6fa:	4b13      	ldr	r3, [pc, #76]	; (a748 <_calendar_init+0xac>)
    a6fc:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    a6fe:	687b      	ldr	r3, [r7, #4]
    a700:	681b      	ldr	r3, [r3, #0]
    a702:	2101      	movs	r1, #1
    a704:	4618      	mov	r0, r3
    a706:	4b0f      	ldr	r3, [pc, #60]	; (a744 <_calendar_init+0xa8>)
    a708:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    a70a:	687b      	ldr	r3, [r7, #4]
    a70c:	681b      	ldr	r3, [r3, #0]
    a70e:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    a712:	4618      	mov	r0, r3
    a714:	4b0d      	ldr	r3, [pc, #52]	; (a74c <_calendar_init+0xb0>)
    a716:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    a718:	687b      	ldr	r3, [r7, #4]
    a71a:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    a71c:	2100      	movs	r1, #0
    a71e:	4618      	mov	r0, r3
    a720:	4b0b      	ldr	r3, [pc, #44]	; (a750 <_calendar_init+0xb4>)
    a722:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    a724:	2300      	movs	r3, #0
}
    a726:	4618      	mov	r0, r3
    a728:	3708      	adds	r7, #8
    a72a:	46bd      	mov	sp, r7
    a72c:	bd80      	pop	{r7, pc}
    a72e:	bf00      	nop
    a730:	00020410 	.word	0x00020410
    a734:	00007d5d 	.word	0x00007d5d
    a738:	20008a90 	.word	0x20008a90
    a73c:	0000a5a9 	.word	0x0000a5a9
    a740:	0000a5e5 	.word	0x0000a5e5
    a744:	0000a4bd 	.word	0x0000a4bd
    a748:	0000a54d 	.word	0x0000a54d
    a74c:	0000a615 	.word	0x0000a615
    a750:	0000a681 	.word	0x0000a681

0000a754 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    a754:	b580      	push	{r7, lr}
    a756:	b082      	sub	sp, #8
    a758:	af00      	add	r7, sp, #0
    a75a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    a75c:	687b      	ldr	r3, [r7, #4]
    a75e:	2b00      	cmp	r3, #0
    a760:	d005      	beq.n	a76e <_calendar_enable+0x1a>
    a762:	687b      	ldr	r3, [r7, #4]
    a764:	681b      	ldr	r3, [r3, #0]
    a766:	2b00      	cmp	r3, #0
    a768:	d001      	beq.n	a76e <_calendar_enable+0x1a>
    a76a:	2301      	movs	r3, #1
    a76c:	e000      	b.n	a770 <_calendar_enable+0x1c>
    a76e:	2300      	movs	r3, #0
    a770:	f003 0301 	and.w	r3, r3, #1
    a774:	b2db      	uxtb	r3, r3
    a776:	2275      	movs	r2, #117	; 0x75
    a778:	4906      	ldr	r1, [pc, #24]	; (a794 <_calendar_enable+0x40>)
    a77a:	4618      	mov	r0, r3
    a77c:	4b06      	ldr	r3, [pc, #24]	; (a798 <_calendar_enable+0x44>)
    a77e:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    a780:	687b      	ldr	r3, [r7, #4]
    a782:	681b      	ldr	r3, [r3, #0]
    a784:	4618      	mov	r0, r3
    a786:	4b05      	ldr	r3, [pc, #20]	; (a79c <_calendar_enable+0x48>)
    a788:	4798      	blx	r3

	return ERR_NONE;
    a78a:	2300      	movs	r3, #0
}
    a78c:	4618      	mov	r0, r3
    a78e:	3708      	adds	r7, #8
    a790:	46bd      	mov	sp, r7
    a792:	bd80      	pop	{r7, pc}
    a794:	00020410 	.word	0x00020410
    a798:	00007d5d 	.word	0x00007d5d
    a79c:	0000a579 	.word	0x0000a579

0000a7a0 <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    a7a0:	b580      	push	{r7, lr}
    a7a2:	b082      	sub	sp, #8
    a7a4:	af00      	add	r7, sp, #0
    a7a6:	6078      	str	r0, [r7, #4]
    a7a8:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    a7aa:	687b      	ldr	r3, [r7, #4]
    a7ac:	2b00      	cmp	r3, #0
    a7ae:	d005      	beq.n	a7bc <_calendar_set_counter+0x1c>
    a7b0:	687b      	ldr	r3, [r7, #4]
    a7b2:	681b      	ldr	r3, [r3, #0]
    a7b4:	2b00      	cmp	r3, #0
    a7b6:	d001      	beq.n	a7bc <_calendar_set_counter+0x1c>
    a7b8:	2301      	movs	r3, #1
    a7ba:	e000      	b.n	a7be <_calendar_set_counter+0x1e>
    a7bc:	2300      	movs	r3, #0
    a7be:	f003 0301 	and.w	r3, r3, #1
    a7c2:	b2db      	uxtb	r3, r3
    a7c4:	228d      	movs	r2, #141	; 0x8d
    a7c6:	4907      	ldr	r1, [pc, #28]	; (a7e4 <_calendar_set_counter+0x44>)
    a7c8:	4618      	mov	r0, r3
    a7ca:	4b07      	ldr	r3, [pc, #28]	; (a7e8 <_calendar_set_counter+0x48>)
    a7cc:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    a7ce:	687b      	ldr	r3, [r7, #4]
    a7d0:	681b      	ldr	r3, [r3, #0]
    a7d2:	6839      	ldr	r1, [r7, #0]
    a7d4:	4618      	mov	r0, r3
    a7d6:	4b05      	ldr	r3, [pc, #20]	; (a7ec <_calendar_set_counter+0x4c>)
    a7d8:	4798      	blx	r3

	return ERR_NONE;
    a7da:	2300      	movs	r3, #0
}
    a7dc:	4618      	mov	r0, r3
    a7de:	3708      	adds	r7, #8
    a7e0:	46bd      	mov	sp, r7
    a7e2:	bd80      	pop	{r7, pc}
    a7e4:	00020410 	.word	0x00020410
    a7e8:	00007d5d 	.word	0x00007d5d
    a7ec:	0000a63d 	.word	0x0000a63d

0000a7f0 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    a7f0:	b580      	push	{r7, lr}
    a7f2:	b082      	sub	sp, #8
    a7f4:	af00      	add	r7, sp, #0
    a7f6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    a7f8:	687b      	ldr	r3, [r7, #4]
    a7fa:	2b00      	cmp	r3, #0
    a7fc:	d005      	beq.n	a80a <_calendar_get_counter+0x1a>
    a7fe:	687b      	ldr	r3, [r7, #4]
    a800:	681b      	ldr	r3, [r3, #0]
    a802:	2b00      	cmp	r3, #0
    a804:	d001      	beq.n	a80a <_calendar_get_counter+0x1a>
    a806:	2301      	movs	r3, #1
    a808:	e000      	b.n	a80c <_calendar_get_counter+0x1c>
    a80a:	2300      	movs	r3, #0
    a80c:	f003 0301 	and.w	r3, r3, #1
    a810:	b2db      	uxtb	r3, r3
    a812:	2299      	movs	r2, #153	; 0x99
    a814:	4906      	ldr	r1, [pc, #24]	; (a830 <_calendar_get_counter+0x40>)
    a816:	4618      	mov	r0, r3
    a818:	4b06      	ldr	r3, [pc, #24]	; (a834 <_calendar_get_counter+0x44>)
    a81a:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    a81c:	687b      	ldr	r3, [r7, #4]
    a81e:	681b      	ldr	r3, [r3, #0]
    a820:	4618      	mov	r0, r3
    a822:	4b05      	ldr	r3, [pc, #20]	; (a838 <_calendar_get_counter+0x48>)
    a824:	4798      	blx	r3
    a826:	4603      	mov	r3, r0
}
    a828:	4618      	mov	r0, r3
    a82a:	3708      	adds	r7, #8
    a82c:	46bd      	mov	sp, r7
    a82e:	bd80      	pop	{r7, pc}
    a830:	00020410 	.word	0x00020410
    a834:	00007d5d 	.word	0x00007d5d
    a838:	0000a661 	.word	0x0000a661

0000a83c <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    a83c:	b580      	push	{r7, lr}
    a83e:	b084      	sub	sp, #16
    a840:	af00      	add	r7, sp, #0
    a842:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    a844:	687b      	ldr	r3, [r7, #4]
    a846:	681b      	ldr	r3, [r3, #0]
    a848:	4618      	mov	r0, r3
    a84a:	4b19      	ldr	r3, [pc, #100]	; (a8b0 <_rtc_interrupt_handler+0x74>)
    a84c:	4798      	blx	r3
    a84e:	4603      	mov	r3, r0
    a850:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    a852:	687b      	ldr	r3, [r7, #4]
    a854:	681b      	ldr	r3, [r3, #0]
    a856:	4618      	mov	r0, r3
    a858:	4b16      	ldr	r3, [pc, #88]	; (a8b4 <_rtc_interrupt_handler+0x78>)
    a85a:	4798      	blx	r3
    a85c:	4603      	mov	r3, r0
    a85e:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    a860:	89fa      	ldrh	r2, [r7, #14]
    a862:	89bb      	ldrh	r3, [r7, #12]
    a864:	4013      	ands	r3, r2
    a866:	b29b      	uxth	r3, r3
    a868:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a86c:	2b00      	cmp	r3, #0
    a86e:	d009      	beq.n	a884 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    a870:	687b      	ldr	r3, [r7, #4]
    a872:	685b      	ldr	r3, [r3, #4]
    a874:	6878      	ldr	r0, [r7, #4]
    a876:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    a878:	687b      	ldr	r3, [r7, #4]
    a87a:	681b      	ldr	r3, [r3, #0]
    a87c:	4618      	mov	r0, r3
    a87e:	4b0e      	ldr	r3, [pc, #56]	; (a8b8 <_rtc_interrupt_handler+0x7c>)
    a880:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    a882:	e010      	b.n	a8a6 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    a884:	89fa      	ldrh	r2, [r7, #14]
    a886:	89bb      	ldrh	r3, [r7, #12]
    a888:	4013      	ands	r3, r2
    a88a:	b29b      	uxth	r3, r3
    a88c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a890:	2b00      	cmp	r3, #0
    a892:	d008      	beq.n	a8a6 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    a894:	687b      	ldr	r3, [r7, #4]
    a896:	689b      	ldr	r3, [r3, #8]
    a898:	6878      	ldr	r0, [r7, #4]
    a89a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    a89c:	687b      	ldr	r3, [r7, #4]
    a89e:	681b      	ldr	r3, [r3, #0]
    a8a0:	4618      	mov	r0, r3
    a8a2:	4b06      	ldr	r3, [pc, #24]	; (a8bc <_rtc_interrupt_handler+0x80>)
    a8a4:	4798      	blx	r3
}
    a8a6:	bf00      	nop
    a8a8:	3710      	adds	r7, #16
    a8aa:	46bd      	mov	sp, r7
    a8ac:	bd80      	pop	{r7, pc}
    a8ae:	bf00      	nop
    a8b0:	0000a519 	.word	0x0000a519
    a8b4:	0000a533 	.word	0x0000a533
    a8b8:	0000a4e1 	.word	0x0000a4e1
    a8bc:	0000a4fd 	.word	0x0000a4fd

0000a8c0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    a8c0:	b580      	push	{r7, lr}
    a8c2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    a8c4:	4b03      	ldr	r3, [pc, #12]	; (a8d4 <RTC_Handler+0x14>)
    a8c6:	681b      	ldr	r3, [r3, #0]
    a8c8:	4618      	mov	r0, r3
    a8ca:	4b03      	ldr	r3, [pc, #12]	; (a8d8 <RTC_Handler+0x18>)
    a8cc:	4798      	blx	r3
}
    a8ce:	bf00      	nop
    a8d0:	bd80      	pop	{r7, pc}
    a8d2:	bf00      	nop
    a8d4:	20008a90 	.word	0x20008a90
    a8d8:	0000a83d 	.word	0x0000a83d

0000a8dc <__NVIC_EnableIRQ>:
{
    a8dc:	b480      	push	{r7}
    a8de:	b083      	sub	sp, #12
    a8e0:	af00      	add	r7, sp, #0
    a8e2:	4603      	mov	r3, r0
    a8e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a8e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a8ea:	2b00      	cmp	r3, #0
    a8ec:	db0b      	blt.n	a906 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a8ee:	4909      	ldr	r1, [pc, #36]	; (a914 <__NVIC_EnableIRQ+0x38>)
    a8f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a8f4:	095b      	lsrs	r3, r3, #5
    a8f6:	88fa      	ldrh	r2, [r7, #6]
    a8f8:	f002 021f 	and.w	r2, r2, #31
    a8fc:	2001      	movs	r0, #1
    a8fe:	fa00 f202 	lsl.w	r2, r0, r2
    a902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a906:	bf00      	nop
    a908:	370c      	adds	r7, #12
    a90a:	46bd      	mov	sp, r7
    a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a910:	4770      	bx	lr
    a912:	bf00      	nop
    a914:	e000e100 	.word	0xe000e100

0000a918 <__NVIC_DisableIRQ>:
{
    a918:	b480      	push	{r7}
    a91a:	b083      	sub	sp, #12
    a91c:	af00      	add	r7, sp, #0
    a91e:	4603      	mov	r3, r0
    a920:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a926:	2b00      	cmp	r3, #0
    a928:	db10      	blt.n	a94c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a92a:	490b      	ldr	r1, [pc, #44]	; (a958 <__NVIC_DisableIRQ+0x40>)
    a92c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a930:	095b      	lsrs	r3, r3, #5
    a932:	88fa      	ldrh	r2, [r7, #6]
    a934:	f002 021f 	and.w	r2, r2, #31
    a938:	2001      	movs	r0, #1
    a93a:	fa00 f202 	lsl.w	r2, r0, r2
    a93e:	3320      	adds	r3, #32
    a940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    a944:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a948:	f3bf 8f6f 	isb	sy
}
    a94c:	bf00      	nop
    a94e:	370c      	adds	r7, #12
    a950:	46bd      	mov	sp, r7
    a952:	f85d 7b04 	ldr.w	r7, [sp], #4
    a956:	4770      	bx	lr
    a958:	e000e100 	.word	0xe000e100

0000a95c <__NVIC_ClearPendingIRQ>:
{
    a95c:	b480      	push	{r7}
    a95e:	b083      	sub	sp, #12
    a960:	af00      	add	r7, sp, #0
    a962:	4603      	mov	r3, r0
    a964:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a96a:	2b00      	cmp	r3, #0
    a96c:	db0c      	blt.n	a988 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a96e:	4909      	ldr	r1, [pc, #36]	; (a994 <__NVIC_ClearPendingIRQ+0x38>)
    a970:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a974:	095b      	lsrs	r3, r3, #5
    a976:	88fa      	ldrh	r2, [r7, #6]
    a978:	f002 021f 	and.w	r2, r2, #31
    a97c:	2001      	movs	r0, #1
    a97e:	fa00 f202 	lsl.w	r2, r0, r2
    a982:	3360      	adds	r3, #96	; 0x60
    a984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a988:	bf00      	nop
    a98a:	370c      	adds	r7, #12
    a98c:	46bd      	mov	sp, r7
    a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a992:	4770      	bx	lr
    a994:	e000e100 	.word	0xe000e100

0000a998 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    a998:	b480      	push	{r7}
    a99a:	b083      	sub	sp, #12
    a99c:	af00      	add	r7, sp, #0
    a99e:	6078      	str	r0, [r7, #4]
    a9a0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a9a2:	bf00      	nop
    a9a4:	687b      	ldr	r3, [r7, #4]
    a9a6:	69da      	ldr	r2, [r3, #28]
    a9a8:	683b      	ldr	r3, [r7, #0]
    a9aa:	4013      	ands	r3, r2
    a9ac:	2b00      	cmp	r3, #0
    a9ae:	d1f9      	bne.n	a9a4 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    a9b0:	bf00      	nop
    a9b2:	370c      	adds	r7, #12
    a9b4:	46bd      	mov	sp, r7
    a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9ba:	4770      	bx	lr

0000a9bc <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    a9bc:	b480      	push	{r7}
    a9be:	b083      	sub	sp, #12
    a9c0:	af00      	add	r7, sp, #0
    a9c2:	6078      	str	r0, [r7, #4]
    a9c4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    a9c6:	687b      	ldr	r3, [r7, #4]
    a9c8:	69da      	ldr	r2, [r3, #28]
    a9ca:	683b      	ldr	r3, [r7, #0]
    a9cc:	4013      	ands	r3, r2
    a9ce:	2b00      	cmp	r3, #0
    a9d0:	bf14      	ite	ne
    a9d2:	2301      	movne	r3, #1
    a9d4:	2300      	moveq	r3, #0
    a9d6:	b2db      	uxtb	r3, r3
}
    a9d8:	4618      	mov	r0, r3
    a9da:	370c      	adds	r7, #12
    a9dc:	46bd      	mov	sp, r7
    a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9e2:	4770      	bx	lr

0000a9e4 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    a9e4:	b480      	push	{r7}
    a9e6:	b083      	sub	sp, #12
    a9e8:	af00      	add	r7, sp, #0
    a9ea:	6078      	str	r0, [r7, #4]
    a9ec:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    a9ee:	bf00      	nop
    a9f0:	687b      	ldr	r3, [r7, #4]
    a9f2:	69da      	ldr	r2, [r3, #28]
    a9f4:	683b      	ldr	r3, [r7, #0]
    a9f6:	4013      	ands	r3, r2
    a9f8:	2b00      	cmp	r3, #0
    a9fa:	d1f9      	bne.n	a9f0 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    a9fc:	bf00      	nop
    a9fe:	370c      	adds	r7, #12
    aa00:	46bd      	mov	sp, r7
    aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa06:	4770      	bx	lr

0000aa08 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    aa08:	b480      	push	{r7}
    aa0a:	b083      	sub	sp, #12
    aa0c:	af00      	add	r7, sp, #0
    aa0e:	6078      	str	r0, [r7, #4]
    aa10:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    aa12:	687b      	ldr	r3, [r7, #4]
    aa14:	69da      	ldr	r2, [r3, #28]
    aa16:	683b      	ldr	r3, [r7, #0]
    aa18:	4013      	ands	r3, r2
    aa1a:	2b00      	cmp	r3, #0
    aa1c:	bf14      	ite	ne
    aa1e:	2301      	movne	r3, #1
    aa20:	2300      	moveq	r3, #0
    aa22:	b2db      	uxtb	r3, r3
}
    aa24:	4618      	mov	r0, r3
    aa26:	370c      	adds	r7, #12
    aa28:	46bd      	mov	sp, r7
    aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa2e:	4770      	bx	lr

0000aa30 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    aa30:	b480      	push	{r7}
    aa32:	b083      	sub	sp, #12
    aa34:	af00      	add	r7, sp, #0
    aa36:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    aa38:	687b      	ldr	r3, [r7, #4]
    aa3a:	2201      	movs	r2, #1
    aa3c:	761a      	strb	r2, [r3, #24]
}
    aa3e:	bf00      	nop
    aa40:	370c      	adds	r7, #12
    aa42:	46bd      	mov	sp, r7
    aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa48:	4770      	bx	lr

0000aa4a <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    aa4a:	b480      	push	{r7}
    aa4c:	b083      	sub	sp, #12
    aa4e:	af00      	add	r7, sp, #0
    aa50:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    aa52:	687b      	ldr	r3, [r7, #4]
    aa54:	2202      	movs	r2, #2
    aa56:	761a      	strb	r2, [r3, #24]
}
    aa58:	bf00      	nop
    aa5a:	370c      	adds	r7, #12
    aa5c:	46bd      	mov	sp, r7
    aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa62:	4770      	bx	lr

0000aa64 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    aa64:	b480      	push	{r7}
    aa66:	b083      	sub	sp, #12
    aa68:	af00      	add	r7, sp, #0
    aa6a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    aa6c:	687b      	ldr	r3, [r7, #4]
    aa6e:	7e1b      	ldrb	r3, [r3, #24]
    aa70:	b2db      	uxtb	r3, r3
}
    aa72:	4618      	mov	r0, r3
    aa74:	370c      	adds	r7, #12
    aa76:	46bd      	mov	sp, r7
    aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa7c:	4770      	bx	lr

0000aa7e <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    aa7e:	b480      	push	{r7}
    aa80:	b083      	sub	sp, #12
    aa82:	af00      	add	r7, sp, #0
    aa84:	6078      	str	r0, [r7, #4]
    aa86:	460b      	mov	r3, r1
    aa88:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    aa8a:	687b      	ldr	r3, [r7, #4]
    aa8c:	78fa      	ldrb	r2, [r7, #3]
    aa8e:	761a      	strb	r2, [r3, #24]
}
    aa90:	bf00      	nop
    aa92:	370c      	adds	r7, #12
    aa94:	46bd      	mov	sp, r7
    aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa9a:	4770      	bx	lr

0000aa9c <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    aa9c:	b480      	push	{r7}
    aa9e:	b085      	sub	sp, #20
    aaa0:	af00      	add	r7, sp, #0
    aaa2:	6078      	str	r0, [r7, #4]
    aaa4:	460b      	mov	r3, r1
    aaa6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    aaa8:	687b      	ldr	r3, [r7, #4]
    aaaa:	7e1b      	ldrb	r3, [r3, #24]
    aaac:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    aaae:	7bfa      	ldrb	r2, [r7, #15]
    aab0:	78fb      	ldrb	r3, [r7, #3]
    aab2:	4013      	ands	r3, r2
    aab4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    aab6:	7bfb      	ldrb	r3, [r7, #15]
}
    aab8:	4618      	mov	r0, r3
    aaba:	3714      	adds	r7, #20
    aabc:	46bd      	mov	sp, r7
    aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
    aac2:	4770      	bx	lr

0000aac4 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    aac4:	b480      	push	{r7}
    aac6:	b083      	sub	sp, #12
    aac8:	af00      	add	r7, sp, #0
    aaca:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    aacc:	687b      	ldr	r3, [r7, #4]
    aace:	7e1b      	ldrb	r3, [r3, #24]
    aad0:	b2db      	uxtb	r3, r3
}
    aad2:	4618      	mov	r0, r3
    aad4:	370c      	adds	r7, #12
    aad6:	46bd      	mov	sp, r7
    aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    aadc:	4770      	bx	lr

0000aade <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    aade:	b480      	push	{r7}
    aae0:	b083      	sub	sp, #12
    aae2:	af00      	add	r7, sp, #0
    aae4:	6078      	str	r0, [r7, #4]
    aae6:	460b      	mov	r3, r1
    aae8:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    aaea:	687b      	ldr	r3, [r7, #4]
    aaec:	78fa      	ldrb	r2, [r7, #3]
    aaee:	761a      	strb	r2, [r3, #24]
}
    aaf0:	bf00      	nop
    aaf2:	370c      	adds	r7, #12
    aaf4:	46bd      	mov	sp, r7
    aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    aafa:	4770      	bx	lr

0000aafc <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    aafc:	b480      	push	{r7}
    aafe:	b083      	sub	sp, #12
    ab00:	af00      	add	r7, sp, #0
    ab02:	6078      	str	r0, [r7, #4]
    ab04:	460b      	mov	r3, r1
    ab06:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    ab08:	78fb      	ldrb	r3, [r7, #3]
    ab0a:	f083 0301 	eor.w	r3, r3, #1
    ab0e:	b2db      	uxtb	r3, r3
    ab10:	2b00      	cmp	r3, #0
    ab12:	d003      	beq.n	ab1c <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    ab14:	687b      	ldr	r3, [r7, #4]
    ab16:	2201      	movs	r2, #1
    ab18:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    ab1a:	e002      	b.n	ab22 <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    ab1c:	687b      	ldr	r3, [r7, #4]
    ab1e:	2201      	movs	r2, #1
    ab20:	759a      	strb	r2, [r3, #22]
}
    ab22:	bf00      	nop
    ab24:	370c      	adds	r7, #12
    ab26:	46bd      	mov	sp, r7
    ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab2c:	4770      	bx	lr

0000ab2e <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    ab2e:	b480      	push	{r7}
    ab30:	b083      	sub	sp, #12
    ab32:	af00      	add	r7, sp, #0
    ab34:	6078      	str	r0, [r7, #4]
    ab36:	460b      	mov	r3, r1
    ab38:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    ab3a:	78fb      	ldrb	r3, [r7, #3]
    ab3c:	f083 0301 	eor.w	r3, r3, #1
    ab40:	b2db      	uxtb	r3, r3
    ab42:	2b00      	cmp	r3, #0
    ab44:	d003      	beq.n	ab4e <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    ab46:	687b      	ldr	r3, [r7, #4]
    ab48:	2202      	movs	r2, #2
    ab4a:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    ab4c:	e002      	b.n	ab54 <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    ab4e:	687b      	ldr	r3, [r7, #4]
    ab50:	2202      	movs	r2, #2
    ab52:	759a      	strb	r2, [r3, #22]
}
    ab54:	bf00      	nop
    ab56:	370c      	adds	r7, #12
    ab58:	46bd      	mov	sp, r7
    ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab5e:	4770      	bx	lr

0000ab60 <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    ab60:	b480      	push	{r7}
    ab62:	b083      	sub	sp, #12
    ab64:	af00      	add	r7, sp, #0
    ab66:	6078      	str	r0, [r7, #4]
    ab68:	460b      	mov	r3, r1
    ab6a:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    ab6c:	78fb      	ldrb	r3, [r7, #3]
    ab6e:	f083 0301 	eor.w	r3, r3, #1
    ab72:	b2db      	uxtb	r3, r3
    ab74:	2b00      	cmp	r3, #0
    ab76:	d003      	beq.n	ab80 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    ab78:	687b      	ldr	r3, [r7, #4]
    ab7a:	2280      	movs	r2, #128	; 0x80
    ab7c:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    ab7e:	e002      	b.n	ab86 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    ab80:	687b      	ldr	r3, [r7, #4]
    ab82:	2280      	movs	r2, #128	; 0x80
    ab84:	759a      	strb	r2, [r3, #22]
}
    ab86:	bf00      	nop
    ab88:	370c      	adds	r7, #12
    ab8a:	46bd      	mov	sp, r7
    ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab90:	4770      	bx	lr

0000ab92 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    ab92:	b480      	push	{r7}
    ab94:	b083      	sub	sp, #12
    ab96:	af00      	add	r7, sp, #0
    ab98:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    ab9a:	687b      	ldr	r3, [r7, #4]
    ab9c:	2201      	movs	r2, #1
    ab9e:	759a      	strb	r2, [r3, #22]
}
    aba0:	bf00      	nop
    aba2:	370c      	adds	r7, #12
    aba4:	46bd      	mov	sp, r7
    aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
    abaa:	4770      	bx	lr

0000abac <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    abac:	b480      	push	{r7}
    abae:	b083      	sub	sp, #12
    abb0:	af00      	add	r7, sp, #0
    abb2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    abb4:	687b      	ldr	r3, [r7, #4]
    abb6:	2201      	movs	r2, #1
    abb8:	751a      	strb	r2, [r3, #20]
}
    abba:	bf00      	nop
    abbc:	370c      	adds	r7, #12
    abbe:	46bd      	mov	sp, r7
    abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    abc4:	4770      	bx	lr

0000abc6 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    abc6:	b480      	push	{r7}
    abc8:	b083      	sub	sp, #12
    abca:	af00      	add	r7, sp, #0
    abcc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    abce:	687b      	ldr	r3, [r7, #4]
    abd0:	2202      	movs	r2, #2
    abd2:	759a      	strb	r2, [r3, #22]
}
    abd4:	bf00      	nop
    abd6:	370c      	adds	r7, #12
    abd8:	46bd      	mov	sp, r7
    abda:	f85d 7b04 	ldr.w	r7, [sp], #4
    abde:	4770      	bx	lr

0000abe0 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    abe0:	b480      	push	{r7}
    abe2:	b083      	sub	sp, #12
    abe4:	af00      	add	r7, sp, #0
    abe6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    abe8:	687b      	ldr	r3, [r7, #4]
    abea:	2202      	movs	r2, #2
    abec:	751a      	strb	r2, [r3, #20]
}
    abee:	bf00      	nop
    abf0:	370c      	adds	r7, #12
    abf2:	46bd      	mov	sp, r7
    abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    abf8:	4770      	bx	lr

0000abfa <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    abfa:	b480      	push	{r7}
    abfc:	b083      	sub	sp, #12
    abfe:	af00      	add	r7, sp, #0
    ac00:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    ac02:	687b      	ldr	r3, [r7, #4]
    ac04:	2204      	movs	r2, #4
    ac06:	759a      	strb	r2, [r3, #22]
}
    ac08:	bf00      	nop
    ac0a:	370c      	adds	r7, #12
    ac0c:	46bd      	mov	sp, r7
    ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac12:	4770      	bx	lr

0000ac14 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    ac14:	b480      	push	{r7}
    ac16:	b083      	sub	sp, #12
    ac18:	af00      	add	r7, sp, #0
    ac1a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    ac1c:	687b      	ldr	r3, [r7, #4]
    ac1e:	2204      	movs	r2, #4
    ac20:	751a      	strb	r2, [r3, #20]
}
    ac22:	bf00      	nop
    ac24:	370c      	adds	r7, #12
    ac26:	46bd      	mov	sp, r7
    ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac2c:	4770      	bx	lr

0000ac2e <hri_sercomspi_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->SPI.INTENSET.reg & SERCOM_SPI_INTENSET_ERROR) >> SERCOM_SPI_INTENSET_ERROR_Pos;
}

static inline void hri_sercomspi_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    ac2e:	b480      	push	{r7}
    ac30:	b083      	sub	sp, #12
    ac32:	af00      	add	r7, sp, #0
    ac34:	6078      	str	r0, [r7, #4]
    ac36:	460b      	mov	r3, r1
    ac38:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    ac3a:	78fb      	ldrb	r3, [r7, #3]
    ac3c:	f083 0301 	eor.w	r3, r3, #1
    ac40:	b2db      	uxtb	r3, r3
    ac42:	2b00      	cmp	r3, #0
    ac44:	d003      	beq.n	ac4e <hri_sercomspi_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    ac46:	687b      	ldr	r3, [r7, #4]
    ac48:	2280      	movs	r2, #128	; 0x80
    ac4a:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
	}
}
    ac4c:	e002      	b.n	ac54 <hri_sercomspi_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    ac4e:	687b      	ldr	r3, [r7, #4]
    ac50:	2280      	movs	r2, #128	; 0x80
    ac52:	759a      	strb	r2, [r3, #22]
}
    ac54:	bf00      	nop
    ac56:	370c      	adds	r7, #12
    ac58:	46bd      	mov	sp, r7
    ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac5e:	4770      	bx	lr

0000ac60 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    ac60:	b480      	push	{r7}
    ac62:	b083      	sub	sp, #12
    ac64:	af00      	add	r7, sp, #0
    ac66:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    ac68:	687b      	ldr	r3, [r7, #4]
    ac6a:	7d9b      	ldrb	r3, [r3, #22]
    ac6c:	b2db      	uxtb	r3, r3
}
    ac6e:	4618      	mov	r0, r3
    ac70:	370c      	adds	r7, #12
    ac72:	46bd      	mov	sp, r7
    ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac78:	4770      	bx	lr
	...

0000ac7c <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    ac7c:	b580      	push	{r7, lr}
    ac7e:	b082      	sub	sp, #8
    ac80:	af00      	add	r7, sp, #0
    ac82:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	681b      	ldr	r3, [r3, #0]
    ac88:	f043 0202 	orr.w	r2, r3, #2
    ac8c:	687b      	ldr	r3, [r7, #4]
    ac8e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    ac90:	2103      	movs	r1, #3
    ac92:	6878      	ldr	r0, [r7, #4]
    ac94:	4b02      	ldr	r3, [pc, #8]	; (aca0 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    ac96:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ac98:	bf00      	nop
    ac9a:	3708      	adds	r7, #8
    ac9c:	46bd      	mov	sp, r7
    ac9e:	bd80      	pop	{r7, pc}
    aca0:	0000a999 	.word	0x0000a999

0000aca4 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    aca4:	b580      	push	{r7, lr}
    aca6:	b082      	sub	sp, #8
    aca8:	af00      	add	r7, sp, #0
    acaa:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    acac:	687b      	ldr	r3, [r7, #4]
    acae:	681b      	ldr	r3, [r3, #0]
    acb0:	f023 0202 	bic.w	r2, r3, #2
    acb4:	687b      	ldr	r3, [r7, #4]
    acb6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    acb8:	2103      	movs	r1, #3
    acba:	6878      	ldr	r0, [r7, #4]
    acbc:	4b02      	ldr	r3, [pc, #8]	; (acc8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    acbe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    acc0:	bf00      	nop
    acc2:	3708      	adds	r7, #8
    acc4:	46bd      	mov	sp, r7
    acc6:	bd80      	pop	{r7, pc}
    acc8:	0000a999 	.word	0x0000a999

0000accc <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    accc:	b480      	push	{r7}
    acce:	b085      	sub	sp, #20
    acd0:	af00      	add	r7, sp, #0
    acd2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    acd4:	687b      	ldr	r3, [r7, #4]
    acd6:	681b      	ldr	r3, [r3, #0]
    acd8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    acda:	68fb      	ldr	r3, [r7, #12]
    acdc:	0edb      	lsrs	r3, r3, #27
    acde:	f003 0301 	and.w	r3, r3, #1
    ace2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    ace4:	68fb      	ldr	r3, [r7, #12]
    ace6:	2b00      	cmp	r3, #0
    ace8:	bf14      	ite	ne
    acea:	2301      	movne	r3, #1
    acec:	2300      	moveq	r3, #0
    acee:	b2db      	uxtb	r3, r3
}
    acf0:	4618      	mov	r0, r3
    acf2:	3714      	adds	r7, #20
    acf4:	46bd      	mov	sp, r7
    acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    acfa:	4770      	bx	lr

0000acfc <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    acfc:	b580      	push	{r7, lr}
    acfe:	b084      	sub	sp, #16
    ad00:	af00      	add	r7, sp, #0
    ad02:	6078      	str	r0, [r7, #4]
    ad04:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    ad06:	2103      	movs	r1, #3
    ad08:	6878      	ldr	r0, [r7, #4]
    ad0a:	4b07      	ldr	r3, [pc, #28]	; (ad28 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    ad0c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    ad0e:	687b      	ldr	r3, [r7, #4]
    ad10:	681b      	ldr	r3, [r3, #0]
    ad12:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    ad14:	68fa      	ldr	r2, [r7, #12]
    ad16:	683b      	ldr	r3, [r7, #0]
    ad18:	4013      	ands	r3, r2
    ad1a:	60fb      	str	r3, [r7, #12]
	return tmp;
    ad1c:	68fb      	ldr	r3, [r7, #12]
}
    ad1e:	4618      	mov	r0, r3
    ad20:	3710      	adds	r7, #16
    ad22:	46bd      	mov	sp, r7
    ad24:	bd80      	pop	{r7, pc}
    ad26:	bf00      	nop
    ad28:	0000a999 	.word	0x0000a999

0000ad2c <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    ad2c:	b580      	push	{r7, lr}
    ad2e:	b082      	sub	sp, #8
    ad30:	af00      	add	r7, sp, #0
    ad32:	6078      	str	r0, [r7, #4]
    ad34:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    ad36:	687b      	ldr	r3, [r7, #4]
    ad38:	683a      	ldr	r2, [r7, #0]
    ad3a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    ad3c:	2103      	movs	r1, #3
    ad3e:	6878      	ldr	r0, [r7, #4]
    ad40:	4b02      	ldr	r3, [pc, #8]	; (ad4c <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    ad42:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ad44:	bf00      	nop
    ad46:	3708      	adds	r7, #8
    ad48:	46bd      	mov	sp, r7
    ad4a:	bd80      	pop	{r7, pc}
    ad4c:	0000a999 	.word	0x0000a999

0000ad50 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    ad50:	b580      	push	{r7, lr}
    ad52:	b082      	sub	sp, #8
    ad54:	af00      	add	r7, sp, #0
    ad56:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    ad58:	687b      	ldr	r3, [r7, #4]
    ad5a:	681b      	ldr	r3, [r3, #0]
    ad5c:	f043 0202 	orr.w	r2, r3, #2
    ad60:	687b      	ldr	r3, [r7, #4]
    ad62:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    ad64:	2103      	movs	r1, #3
    ad66:	6878      	ldr	r0, [r7, #4]
    ad68:	4b02      	ldr	r3, [pc, #8]	; (ad74 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    ad6a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ad6c:	bf00      	nop
    ad6e:	3708      	adds	r7, #8
    ad70:	46bd      	mov	sp, r7
    ad72:	bd80      	pop	{r7, pc}
    ad74:	0000a9e5 	.word	0x0000a9e5

0000ad78 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ad78:	b580      	push	{r7, lr}
    ad7a:	b084      	sub	sp, #16
    ad7c:	af00      	add	r7, sp, #0
    ad7e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    ad80:	2103      	movs	r1, #3
    ad82:	6878      	ldr	r0, [r7, #4]
    ad84:	4b09      	ldr	r3, [pc, #36]	; (adac <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    ad86:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    ad88:	687b      	ldr	r3, [r7, #4]
    ad8a:	681b      	ldr	r3, [r3, #0]
    ad8c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    ad8e:	68fb      	ldr	r3, [r7, #12]
    ad90:	085b      	lsrs	r3, r3, #1
    ad92:	f003 0301 	and.w	r3, r3, #1
    ad96:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    ad98:	68fb      	ldr	r3, [r7, #12]
    ad9a:	2b00      	cmp	r3, #0
    ad9c:	bf14      	ite	ne
    ad9e:	2301      	movne	r3, #1
    ada0:	2300      	moveq	r3, #0
    ada2:	b2db      	uxtb	r3, r3
}
    ada4:	4618      	mov	r0, r3
    ada6:	3710      	adds	r7, #16
    ada8:	46bd      	mov	sp, r7
    adaa:	bd80      	pop	{r7, pc}
    adac:	0000a9e5 	.word	0x0000a9e5

0000adb0 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    adb0:	b580      	push	{r7, lr}
    adb2:	b082      	sub	sp, #8
    adb4:	af00      	add	r7, sp, #0
    adb6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    adb8:	687b      	ldr	r3, [r7, #4]
    adba:	681b      	ldr	r3, [r3, #0]
    adbc:	f023 0202 	bic.w	r2, r3, #2
    adc0:	687b      	ldr	r3, [r7, #4]
    adc2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    adc4:	2103      	movs	r1, #3
    adc6:	6878      	ldr	r0, [r7, #4]
    adc8:	4b02      	ldr	r3, [pc, #8]	; (add4 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    adca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    adcc:	bf00      	nop
    adce:	3708      	adds	r7, #8
    add0:	46bd      	mov	sp, r7
    add2:	bd80      	pop	{r7, pc}
    add4:	0000a9e5 	.word	0x0000a9e5

0000add8 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    add8:	b580      	push	{r7, lr}
    adda:	b084      	sub	sp, #16
    addc:	af00      	add	r7, sp, #0
    adde:	6078      	str	r0, [r7, #4]
    ade0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    ade2:	2103      	movs	r1, #3
    ade4:	6878      	ldr	r0, [r7, #4]
    ade6:	4b07      	ldr	r3, [pc, #28]	; (ae04 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    ade8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    adea:	687b      	ldr	r3, [r7, #4]
    adec:	681b      	ldr	r3, [r3, #0]
    adee:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    adf0:	68fa      	ldr	r2, [r7, #12]
    adf2:	683b      	ldr	r3, [r7, #0]
    adf4:	4013      	ands	r3, r2
    adf6:	60fb      	str	r3, [r7, #12]
	return tmp;
    adf8:	68fb      	ldr	r3, [r7, #12]
}
    adfa:	4618      	mov	r0, r3
    adfc:	3710      	adds	r7, #16
    adfe:	46bd      	mov	sp, r7
    ae00:	bd80      	pop	{r7, pc}
    ae02:	bf00      	nop
    ae04:	0000a9e5 	.word	0x0000a9e5

0000ae08 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    ae08:	b580      	push	{r7, lr}
    ae0a:	b082      	sub	sp, #8
    ae0c:	af00      	add	r7, sp, #0
    ae0e:	6078      	str	r0, [r7, #4]
    ae10:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    ae12:	687b      	ldr	r3, [r7, #4]
    ae14:	683a      	ldr	r2, [r7, #0]
    ae16:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    ae18:	2103      	movs	r1, #3
    ae1a:	6878      	ldr	r0, [r7, #4]
    ae1c:	4b02      	ldr	r3, [pc, #8]	; (ae28 <hri_sercomspi_write_CTRLA_reg+0x20>)
    ae1e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ae20:	bf00      	nop
    ae22:	3708      	adds	r7, #8
    ae24:	46bd      	mov	sp, r7
    ae26:	bd80      	pop	{r7, pc}
    ae28:	0000a9e5 	.word	0x0000a9e5

0000ae2c <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    ae2c:	b580      	push	{r7, lr}
    ae2e:	b082      	sub	sp, #8
    ae30:	af00      	add	r7, sp, #0
    ae32:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    ae34:	687b      	ldr	r3, [r7, #4]
    ae36:	685b      	ldr	r3, [r3, #4]
    ae38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    ae3c:	687b      	ldr	r3, [r7, #4]
    ae3e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ae40:	2104      	movs	r1, #4
    ae42:	6878      	ldr	r0, [r7, #4]
    ae44:	4b02      	ldr	r3, [pc, #8]	; (ae50 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    ae46:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ae48:	bf00      	nop
    ae4a:	3708      	adds	r7, #8
    ae4c:	46bd      	mov	sp, r7
    ae4e:	bd80      	pop	{r7, pc}
    ae50:	0000a999 	.word	0x0000a999

0000ae54 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    ae54:	b580      	push	{r7, lr}
    ae56:	b082      	sub	sp, #8
    ae58:	af00      	add	r7, sp, #0
    ae5a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    ae5c:	687b      	ldr	r3, [r7, #4]
    ae5e:	685b      	ldr	r3, [r3, #4]
    ae60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    ae64:	687b      	ldr	r3, [r7, #4]
    ae66:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ae68:	2104      	movs	r1, #4
    ae6a:	6878      	ldr	r0, [r7, #4]
    ae6c:	4b02      	ldr	r3, [pc, #8]	; (ae78 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    ae6e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ae70:	bf00      	nop
    ae72:	3708      	adds	r7, #8
    ae74:	46bd      	mov	sp, r7
    ae76:	bd80      	pop	{r7, pc}
    ae78:	0000a999 	.word	0x0000a999

0000ae7c <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    ae7c:	b580      	push	{r7, lr}
    ae7e:	b082      	sub	sp, #8
    ae80:	af00      	add	r7, sp, #0
    ae82:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    ae84:	687b      	ldr	r3, [r7, #4]
    ae86:	685b      	ldr	r3, [r3, #4]
    ae88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    ae8c:	687b      	ldr	r3, [r7, #4]
    ae8e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ae90:	2104      	movs	r1, #4
    ae92:	6878      	ldr	r0, [r7, #4]
    ae94:	4b02      	ldr	r3, [pc, #8]	; (aea0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    ae96:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ae98:	bf00      	nop
    ae9a:	3708      	adds	r7, #8
    ae9c:	46bd      	mov	sp, r7
    ae9e:	bd80      	pop	{r7, pc}
    aea0:	0000a999 	.word	0x0000a999

0000aea4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    aea4:	b580      	push	{r7, lr}
    aea6:	b082      	sub	sp, #8
    aea8:	af00      	add	r7, sp, #0
    aeaa:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    aeac:	687b      	ldr	r3, [r7, #4]
    aeae:	685b      	ldr	r3, [r3, #4]
    aeb0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    aeb4:	687b      	ldr	r3, [r7, #4]
    aeb6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aeb8:	2104      	movs	r1, #4
    aeba:	6878      	ldr	r0, [r7, #4]
    aebc:	4b02      	ldr	r3, [pc, #8]	; (aec8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    aebe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aec0:	bf00      	nop
    aec2:	3708      	adds	r7, #8
    aec4:	46bd      	mov	sp, r7
    aec6:	bd80      	pop	{r7, pc}
    aec8:	0000a999 	.word	0x0000a999

0000aecc <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    aecc:	b580      	push	{r7, lr}
    aece:	b082      	sub	sp, #8
    aed0:	af00      	add	r7, sp, #0
    aed2:	6078      	str	r0, [r7, #4]
    aed4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    aed6:	687b      	ldr	r3, [r7, #4]
    aed8:	685a      	ldr	r2, [r3, #4]
    aeda:	683b      	ldr	r3, [r7, #0]
    aedc:	041b      	lsls	r3, r3, #16
    aede:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    aee2:	431a      	orrs	r2, r3
    aee4:	687b      	ldr	r3, [r7, #4]
    aee6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aee8:	2104      	movs	r1, #4
    aeea:	6878      	ldr	r0, [r7, #4]
    aeec:	4b02      	ldr	r3, [pc, #8]	; (aef8 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    aeee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aef0:	bf00      	nop
    aef2:	3708      	adds	r7, #8
    aef4:	46bd      	mov	sp, r7
    aef6:	bd80      	pop	{r7, pc}
    aef8:	0000a999 	.word	0x0000a999

0000aefc <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    aefc:	b580      	push	{r7, lr}
    aefe:	b082      	sub	sp, #8
    af00:	af00      	add	r7, sp, #0
    af02:	6078      	str	r0, [r7, #4]
    af04:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    af06:	687b      	ldr	r3, [r7, #4]
    af08:	683a      	ldr	r2, [r7, #0]
    af0a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    af0c:	2104      	movs	r1, #4
    af0e:	6878      	ldr	r0, [r7, #4]
    af10:	4b02      	ldr	r3, [pc, #8]	; (af1c <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    af12:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    af14:	bf00      	nop
    af16:	3708      	adds	r7, #8
    af18:	46bd      	mov	sp, r7
    af1a:	bd80      	pop	{r7, pc}
    af1c:	0000a999 	.word	0x0000a999

0000af20 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    af20:	b580      	push	{r7, lr}
    af22:	b082      	sub	sp, #8
    af24:	af00      	add	r7, sp, #0
    af26:	6078      	str	r0, [r7, #4]
    af28:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    af2a:	687b      	ldr	r3, [r7, #4]
    af2c:	683a      	ldr	r2, [r7, #0]
    af2e:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    af30:	2117      	movs	r1, #23
    af32:	6878      	ldr	r0, [r7, #4]
    af34:	4b02      	ldr	r3, [pc, #8]	; (af40 <hri_sercomspi_write_CTRLB_reg+0x20>)
    af36:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    af38:	bf00      	nop
    af3a:	3708      	adds	r7, #8
    af3c:	46bd      	mov	sp, r7
    af3e:	bd80      	pop	{r7, pc}
    af40:	0000a9e5 	.word	0x0000a9e5

0000af44 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    af44:	b480      	push	{r7}
    af46:	b083      	sub	sp, #12
    af48:	af00      	add	r7, sp, #0
    af4a:	6078      	str	r0, [r7, #4]
    af4c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    af4e:	687b      	ldr	r3, [r7, #4]
    af50:	683a      	ldr	r2, [r7, #0]
    af52:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    af54:	bf00      	nop
    af56:	370c      	adds	r7, #12
    af58:	46bd      	mov	sp, r7
    af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    af5e:	4770      	bx	lr

0000af60 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    af60:	b480      	push	{r7}
    af62:	b083      	sub	sp, #12
    af64:	af00      	add	r7, sp, #0
    af66:	6078      	str	r0, [r7, #4]
    af68:	460b      	mov	r3, r1
    af6a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    af6c:	687b      	ldr	r3, [r7, #4]
    af6e:	78fa      	ldrb	r2, [r7, #3]
    af70:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    af72:	bf00      	nop
    af74:	370c      	adds	r7, #12
    af76:	46bd      	mov	sp, r7
    af78:	f85d 7b04 	ldr.w	r7, [sp], #4
    af7c:	4770      	bx	lr
	...

0000af80 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    af80:	b580      	push	{r7, lr}
    af82:	b084      	sub	sp, #16
    af84:	af00      	add	r7, sp, #0
    af86:	6078      	str	r0, [r7, #4]
    af88:	460b      	mov	r3, r1
    af8a:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    af8c:	687b      	ldr	r3, [r7, #4]
    af8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    af90:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    af92:	68fb      	ldr	r3, [r7, #12]
    af94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    af98:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    af9a:	78fb      	ldrb	r3, [r7, #3]
    af9c:	039b      	lsls	r3, r3, #14
    af9e:	461a      	mov	r2, r3
    afa0:	68fb      	ldr	r3, [r7, #12]
    afa2:	4313      	orrs	r3, r2
    afa4:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    afa6:	687b      	ldr	r3, [r7, #4]
    afa8:	68fa      	ldr	r2, [r7, #12]
    afaa:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    afac:	2104      	movs	r1, #4
    afae:	6878      	ldr	r0, [r7, #4]
    afb0:	4b02      	ldr	r3, [pc, #8]	; (afbc <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    afb2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    afb4:	bf00      	nop
    afb6:	3710      	adds	r7, #16
    afb8:	46bd      	mov	sp, r7
    afba:	bd80      	pop	{r7, pc}
    afbc:	0000a999 	.word	0x0000a999

0000afc0 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    afc0:	b580      	push	{r7, lr}
    afc2:	b082      	sub	sp, #8
    afc4:	af00      	add	r7, sp, #0
    afc6:	6078      	str	r0, [r7, #4]
    afc8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    afca:	687b      	ldr	r3, [r7, #4]
    afcc:	683a      	ldr	r2, [r7, #0]
    afce:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    afd0:	2104      	movs	r1, #4
    afd2:	6878      	ldr	r0, [r7, #4]
    afd4:	4b02      	ldr	r3, [pc, #8]	; (afe0 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    afd6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    afd8:	bf00      	nop
    afda:	3708      	adds	r7, #8
    afdc:	46bd      	mov	sp, r7
    afde:	bd80      	pop	{r7, pc}
    afe0:	0000a999 	.word	0x0000a999

0000afe4 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    afe4:	b580      	push	{r7, lr}
    afe6:	b082      	sub	sp, #8
    afe8:	af00      	add	r7, sp, #0
    afea:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    afec:	2104      	movs	r1, #4
    afee:	6878      	ldr	r0, [r7, #4]
    aff0:	4b03      	ldr	r3, [pc, #12]	; (b000 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    aff2:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    aff4:	687b      	ldr	r3, [r7, #4]
    aff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    aff8:	4618      	mov	r0, r3
    affa:	3708      	adds	r7, #8
    affc:	46bd      	mov	sp, r7
    affe:	bd80      	pop	{r7, pc}
    b000:	0000a999 	.word	0x0000a999

0000b004 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    b004:	b480      	push	{r7}
    b006:	b083      	sub	sp, #12
    b008:	af00      	add	r7, sp, #0
    b00a:	6078      	str	r0, [r7, #4]
    b00c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    b00e:	687b      	ldr	r3, [r7, #4]
    b010:	683a      	ldr	r2, [r7, #0]
    b012:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b014:	bf00      	nop
    b016:	370c      	adds	r7, #12
    b018:	46bd      	mov	sp, r7
    b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b01e:	4770      	bx	lr

0000b020 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    b020:	b580      	push	{r7, lr}
    b022:	b082      	sub	sp, #8
    b024:	af00      	add	r7, sp, #0
    b026:	6078      	str	r0, [r7, #4]
    b028:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    b02a:	687b      	ldr	r3, [r7, #4]
    b02c:	683a      	ldr	r2, [r7, #0]
    b02e:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b030:	2104      	movs	r1, #4
    b032:	6878      	ldr	r0, [r7, #4]
    b034:	4b02      	ldr	r3, [pc, #8]	; (b040 <hri_sercomi2cm_write_DATA_reg+0x20>)
    b036:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b038:	bf00      	nop
    b03a:	3708      	adds	r7, #8
    b03c:	46bd      	mov	sp, r7
    b03e:	bd80      	pop	{r7, pc}
    b040:	0000a999 	.word	0x0000a999

0000b044 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    b044:	b580      	push	{r7, lr}
    b046:	b082      	sub	sp, #8
    b048:	af00      	add	r7, sp, #0
    b04a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b04c:	2104      	movs	r1, #4
    b04e:	6878      	ldr	r0, [r7, #4]
    b050:	4b03      	ldr	r3, [pc, #12]	; (b060 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    b052:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    b054:	687b      	ldr	r3, [r7, #4]
    b056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    b058:	4618      	mov	r0, r3
    b05a:	3708      	adds	r7, #8
    b05c:	46bd      	mov	sp, r7
    b05e:	bd80      	pop	{r7, pc}
    b060:	0000a999 	.word	0x0000a999

0000b064 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    b064:	b480      	push	{r7}
    b066:	b083      	sub	sp, #12
    b068:	af00      	add	r7, sp, #0
    b06a:	6078      	str	r0, [r7, #4]
    b06c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    b06e:	687b      	ldr	r3, [r7, #4]
    b070:	683a      	ldr	r2, [r7, #0]
    b072:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b074:	bf00      	nop
    b076:	370c      	adds	r7, #12
    b078:	46bd      	mov	sp, r7
    b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b07e:	4770      	bx	lr

0000b080 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    b080:	b480      	push	{r7}
    b082:	b083      	sub	sp, #12
    b084:	af00      	add	r7, sp, #0
    b086:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    b088:	687b      	ldr	r3, [r7, #4]
    b08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    b08c:	4618      	mov	r0, r3
    b08e:	370c      	adds	r7, #12
    b090:	46bd      	mov	sp, r7
    b092:	f85d 7b04 	ldr.w	r7, [sp], #4
    b096:	4770      	bx	lr

0000b098 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    b098:	b480      	push	{r7}
    b09a:	b083      	sub	sp, #12
    b09c:	af00      	add	r7, sp, #0
    b09e:	6078      	str	r0, [r7, #4]
    b0a0:	460b      	mov	r3, r1
    b0a2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    b0a4:	687b      	ldr	r3, [r7, #4]
    b0a6:	78fa      	ldrb	r2, [r7, #3]
    b0a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b0ac:	bf00      	nop
    b0ae:	370c      	adds	r7, #12
    b0b0:	46bd      	mov	sp, r7
    b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0b6:	4770      	bx	lr

0000b0b8 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    b0b8:	b480      	push	{r7}
    b0ba:	b083      	sub	sp, #12
    b0bc:	af00      	add	r7, sp, #0
    b0be:	6078      	str	r0, [r7, #4]
    b0c0:	460b      	mov	r3, r1
    b0c2:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    b0c4:	687b      	ldr	r3, [r7, #4]
    b0c6:	887a      	ldrh	r2, [r7, #2]
    b0c8:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b0ca:	bf00      	nop
    b0cc:	370c      	adds	r7, #12
    b0ce:	46bd      	mov	sp, r7
    b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0d4:	4770      	bx	lr
	...

0000b0d8 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    b0d8:	b580      	push	{r7, lr}
    b0da:	b082      	sub	sp, #8
    b0dc:	af00      	add	r7, sp, #0
    b0de:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b0e0:	2104      	movs	r1, #4
    b0e2:	6878      	ldr	r0, [r7, #4]
    b0e4:	4b06      	ldr	r3, [pc, #24]	; (b100 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    b0e6:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    b0e8:	687b      	ldr	r3, [r7, #4]
    b0ea:	8b5b      	ldrh	r3, [r3, #26]
    b0ec:	b29b      	uxth	r3, r3
    b0ee:	091b      	lsrs	r3, r3, #4
    b0f0:	b29b      	uxth	r3, r3
    b0f2:	f003 0303 	and.w	r3, r3, #3
    b0f6:	b29b      	uxth	r3, r3
}
    b0f8:	4618      	mov	r0, r3
    b0fa:	3708      	adds	r7, #8
    b0fc:	46bd      	mov	sp, r7
    b0fe:	bd80      	pop	{r7, pc}
    b100:	0000a999 	.word	0x0000a999

0000b104 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    b104:	b580      	push	{r7, lr}
    b106:	b082      	sub	sp, #8
    b108:	af00      	add	r7, sp, #0
    b10a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b10c:	2104      	movs	r1, #4
    b10e:	6878      	ldr	r0, [r7, #4]
    b110:	4b04      	ldr	r3, [pc, #16]	; (b124 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    b112:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    b114:	687b      	ldr	r3, [r7, #4]
    b116:	8b5b      	ldrh	r3, [r3, #26]
    b118:	b29b      	uxth	r3, r3
}
    b11a:	4618      	mov	r0, r3
    b11c:	3708      	adds	r7, #8
    b11e:	46bd      	mov	sp, r7
    b120:	bd80      	pop	{r7, pc}
    b122:	bf00      	nop
    b124:	0000a999 	.word	0x0000a999

0000b128 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    b128:	b580      	push	{r7, lr}
    b12a:	b082      	sub	sp, #8
    b12c:	af00      	add	r7, sp, #0
    b12e:	6078      	str	r0, [r7, #4]
    b130:	460b      	mov	r3, r1
    b132:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    b134:	687b      	ldr	r3, [r7, #4]
    b136:	887a      	ldrh	r2, [r7, #2]
    b138:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b13a:	2104      	movs	r1, #4
    b13c:	6878      	ldr	r0, [r7, #4]
    b13e:	4b03      	ldr	r3, [pc, #12]	; (b14c <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    b140:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b142:	bf00      	nop
    b144:	3708      	adds	r7, #8
    b146:	46bd      	mov	sp, r7
    b148:	bd80      	pop	{r7, pc}
    b14a:	bf00      	nop
    b14c:	0000a999 	.word	0x0000a999

0000b150 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    b150:	b4b0      	push	{r4, r5, r7}
    b152:	b08d      	sub	sp, #52	; 0x34
    b154:	af00      	add	r7, sp, #0
    b156:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    b158:	4b13      	ldr	r3, [pc, #76]	; (b1a8 <_sercom_get_hardware_index+0x58>)
    b15a:	f107 040c 	add.w	r4, r7, #12
    b15e:	461d      	mov	r5, r3
    b160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b164:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    b168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b16c:	2300      	movs	r3, #0
    b16e:	62fb      	str	r3, [r7, #44]	; 0x2c
    b170:	e010      	b.n	b194 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    b172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b174:	009b      	lsls	r3, r3, #2
    b176:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b17a:	4413      	add	r3, r2
    b17c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    b180:	461a      	mov	r2, r3
    b182:	687b      	ldr	r3, [r7, #4]
    b184:	429a      	cmp	r2, r3
    b186:	d102      	bne.n	b18e <_sercom_get_hardware_index+0x3e>
			return i;
    b188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b18a:	b2db      	uxtb	r3, r3
    b18c:	e006      	b.n	b19c <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b190:	3301      	adds	r3, #1
    b192:	62fb      	str	r3, [r7, #44]	; 0x2c
    b194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b196:	2b07      	cmp	r3, #7
    b198:	d9eb      	bls.n	b172 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    b19a:	2300      	movs	r3, #0
}
    b19c:	4618      	mov	r0, r3
    b19e:	3734      	adds	r7, #52	; 0x34
    b1a0:	46bd      	mov	sp, r7
    b1a2:	bcb0      	pop	{r4, r5, r7}
    b1a4:	4770      	bx	lr
    b1a6:	bf00      	nop
    b1a8:	00020444 	.word	0x00020444

0000b1ac <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    b1ac:	b480      	push	{r7}
    b1ae:	b083      	sub	sp, #12
    b1b0:	af00      	add	r7, sp, #0
    b1b2:	6078      	str	r0, [r7, #4]
    b1b4:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    b1b6:	687b      	ldr	r3, [r7, #4]
    b1b8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    b1bc:	d102      	bne.n	b1c4 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    b1be:	4a0b      	ldr	r2, [pc, #44]	; (b1ec <_sercom_init_irq_param+0x40>)
    b1c0:	683b      	ldr	r3, [r7, #0]
    b1c2:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    b1c4:	687b      	ldr	r3, [r7, #4]
    b1c6:	4a0a      	ldr	r2, [pc, #40]	; (b1f0 <_sercom_init_irq_param+0x44>)
    b1c8:	4293      	cmp	r3, r2
    b1ca:	d102      	bne.n	b1d2 <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    b1cc:	4a09      	ldr	r2, [pc, #36]	; (b1f4 <_sercom_init_irq_param+0x48>)
    b1ce:	683b      	ldr	r3, [r7, #0]
    b1d0:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    b1d2:	687b      	ldr	r3, [r7, #4]
    b1d4:	4a08      	ldr	r2, [pc, #32]	; (b1f8 <_sercom_init_irq_param+0x4c>)
    b1d6:	4293      	cmp	r3, r2
    b1d8:	d102      	bne.n	b1e0 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    b1da:	4a08      	ldr	r2, [pc, #32]	; (b1fc <_sercom_init_irq_param+0x50>)
    b1dc:	683b      	ldr	r3, [r7, #0]
    b1de:	6013      	str	r3, [r2, #0]
	}
}
    b1e0:	bf00      	nop
    b1e2:	370c      	adds	r7, #12
    b1e4:	46bd      	mov	sp, r7
    b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1ea:	4770      	bx	lr
    b1ec:	20008aac 	.word	0x20008aac
    b1f0:	43000400 	.word	0x43000400
    b1f4:	20008ab0 	.word	0x20008ab0
    b1f8:	43000c00 	.word	0x43000c00
    b1fc:	20008ab4 	.word	0x20008ab4

0000b200 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    b200:	b580      	push	{r7, lr}
    b202:	b084      	sub	sp, #16
    b204:	af00      	add	r7, sp, #0
    b206:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    b208:	6878      	ldr	r0, [r7, #4]
    b20a:	4b13      	ldr	r3, [pc, #76]	; (b258 <_get_i2cm_index+0x58>)
    b20c:	4798      	blx	r3
    b20e:	4603      	mov	r3, r0
    b210:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    b212:	2300      	movs	r3, #0
    b214:	73fb      	strb	r3, [r7, #15]
    b216:	e010      	b.n	b23a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    b218:	7bfa      	ldrb	r2, [r7, #15]
    b21a:	4910      	ldr	r1, [pc, #64]	; (b25c <_get_i2cm_index+0x5c>)
    b21c:	4613      	mov	r3, r2
    b21e:	005b      	lsls	r3, r3, #1
    b220:	4413      	add	r3, r2
    b222:	00db      	lsls	r3, r3, #3
    b224:	440b      	add	r3, r1
    b226:	781b      	ldrb	r3, [r3, #0]
    b228:	7bba      	ldrb	r2, [r7, #14]
    b22a:	429a      	cmp	r2, r3
    b22c:	d102      	bne.n	b234 <_get_i2cm_index+0x34>
			return i;
    b22e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b232:	e00d      	b.n	b250 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    b234:	7bfb      	ldrb	r3, [r7, #15]
    b236:	3301      	adds	r3, #1
    b238:	73fb      	strb	r3, [r7, #15]
    b23a:	7bfb      	ldrb	r3, [r7, #15]
    b23c:	2b02      	cmp	r3, #2
    b23e:	d9eb      	bls.n	b218 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    b240:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    b244:	4906      	ldr	r1, [pc, #24]	; (b260 <_get_i2cm_index+0x60>)
    b246:	2000      	movs	r0, #0
    b248:	4b06      	ldr	r3, [pc, #24]	; (b264 <_get_i2cm_index+0x64>)
    b24a:	4798      	blx	r3
	return -1;
    b24c:	f04f 33ff 	mov.w	r3, #4294967295
}
    b250:	4618      	mov	r0, r3
    b252:	3710      	adds	r7, #16
    b254:	46bd      	mov	sp, r7
    b256:	bd80      	pop	{r7, pc}
    b258:	0000b151 	.word	0x0000b151
    b25c:	2000007c 	.word	0x2000007c
    b260:	00020428 	.word	0x00020428
    b264:	00007d5d 	.word	0x00007d5d

0000b268 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    b268:	b580      	push	{r7, lr}
    b26a:	b082      	sub	sp, #8
    b26c:	af00      	add	r7, sp, #0
    b26e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    b270:	2103      	movs	r1, #3
    b272:	6878      	ldr	r0, [r7, #4]
    b274:	4b02      	ldr	r3, [pc, #8]	; (b280 <_sercom_i2c_send_stop+0x18>)
    b276:	4798      	blx	r3
}
    b278:	bf00      	nop
    b27a:	3708      	adds	r7, #8
    b27c:	46bd      	mov	sp, r7
    b27e:	bd80      	pop	{r7, pc}
    b280:	0000aecd 	.word	0x0000aecd

0000b284 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    b284:	b590      	push	{r4, r7, lr}
    b286:	b087      	sub	sp, #28
    b288:	af00      	add	r7, sp, #0
    b28a:	60f8      	str	r0, [r7, #12]
    b28c:	60b9      	str	r1, [r7, #8]
    b28e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b290:	68f8      	ldr	r0, [r7, #12]
    b292:	4b7d      	ldr	r3, [pc, #500]	; (b488 <_sercom_i2c_sync_analyse_flags+0x204>)
    b294:	4798      	blx	r3
    b296:	4603      	mov	r3, r0
    b298:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    b29a:	68f8      	ldr	r0, [r7, #12]
    b29c:	4b7b      	ldr	r3, [pc, #492]	; (b48c <_sercom_i2c_sync_analyse_flags+0x208>)
    b29e:	4798      	blx	r3
    b2a0:	4603      	mov	r3, r0
    b2a2:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    b2a4:	68bb      	ldr	r3, [r7, #8]
    b2a6:	f003 0301 	and.w	r3, r3, #1
    b2aa:	2b00      	cmp	r3, #0
    b2ac:	f000 8095 	beq.w	b3da <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    b2b0:	8a7b      	ldrh	r3, [r7, #18]
    b2b2:	f003 0302 	and.w	r3, r3, #2
    b2b6:	2b00      	cmp	r3, #0
    b2b8:	d01d      	beq.n	b2f6 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    b2ba:	68f8      	ldr	r0, [r7, #12]
    b2bc:	4b74      	ldr	r3, [pc, #464]	; (b490 <_sercom_i2c_sync_analyse_flags+0x20c>)
    b2be:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    b2c0:	687b      	ldr	r3, [r7, #4]
    b2c2:	885b      	ldrh	r3, [r3, #2]
    b2c4:	b29b      	uxth	r3, r3
    b2c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    b2ca:	b29a      	uxth	r2, r3
    b2cc:	687b      	ldr	r3, [r7, #4]
    b2ce:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    b2d0:	687b      	ldr	r3, [r7, #4]
    b2d2:	885b      	ldrh	r3, [r3, #2]
    b2d4:	b29b      	uxth	r3, r3
    b2d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b2da:	b29a      	uxth	r2, r3
    b2dc:	687b      	ldr	r3, [r7, #4]
    b2de:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    b2e0:	8a7b      	ldrh	r3, [r7, #18]
    b2e2:	f003 0301 	and.w	r3, r3, #1
    b2e6:	2b00      	cmp	r3, #0
    b2e8:	d002      	beq.n	b2f0 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    b2ea:	f06f 0304 	mvn.w	r3, #4
    b2ee:	e0c6      	b.n	b47e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    b2f0:	f06f 0303 	mvn.w	r3, #3
    b2f4:	e0c3      	b.n	b47e <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    b2f6:	8a7b      	ldrh	r3, [r7, #18]
    b2f8:	f003 0304 	and.w	r3, r3, #4
    b2fc:	2b00      	cmp	r3, #0
    b2fe:	d01f      	beq.n	b340 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    b300:	687b      	ldr	r3, [r7, #4]
    b302:	685b      	ldr	r3, [r3, #4]
    b304:	2b00      	cmp	r3, #0
    b306:	dd07      	ble.n	b318 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    b308:	687b      	ldr	r3, [r7, #4]
    b30a:	885b      	ldrh	r3, [r3, #2]
    b30c:	b29b      	uxth	r3, r3
    b30e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    b312:	b29a      	uxth	r2, r3
    b314:	687b      	ldr	r3, [r7, #4]
    b316:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    b318:	687b      	ldr	r3, [r7, #4]
    b31a:	885b      	ldrh	r3, [r3, #2]
    b31c:	b29b      	uxth	r3, r3
    b31e:	b21b      	sxth	r3, r3
    b320:	2b00      	cmp	r3, #0
    b322:	da02      	bge.n	b32a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    b324:	68f8      	ldr	r0, [r7, #12]
    b326:	4b5b      	ldr	r3, [pc, #364]	; (b494 <_sercom_i2c_sync_analyse_flags+0x210>)
    b328:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b32a:	687b      	ldr	r3, [r7, #4]
    b32c:	885b      	ldrh	r3, [r3, #2]
    b32e:	b29b      	uxth	r3, r3
    b330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b334:	b29a      	uxth	r2, r3
    b336:	687b      	ldr	r3, [r7, #4]
    b338:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    b33a:	f06f 0301 	mvn.w	r3, #1
    b33e:	e09e      	b.n	b47e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    b340:	687b      	ldr	r3, [r7, #4]
    b342:	885b      	ldrh	r3, [r3, #2]
    b344:	b29b      	uxth	r3, r3
    b346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b34a:	2b00      	cmp	r3, #0
    b34c:	d01c      	beq.n	b388 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    b34e:	687b      	ldr	r3, [r7, #4]
    b350:	881b      	ldrh	r3, [r3, #0]
    b352:	121b      	asrs	r3, r3, #8
    b354:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b356:	f003 0406 	and.w	r4, r3, #6
    b35a:	68f8      	ldr	r0, [r7, #12]
    b35c:	4b4e      	ldr	r3, [pc, #312]	; (b498 <_sercom_i2c_sync_analyse_flags+0x214>)
    b35e:	4798      	blx	r3
    b360:	4603      	mov	r3, r0
    b362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b366:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    b368:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    b36c:	4619      	mov	r1, r3
    b36e:	68f8      	ldr	r0, [r7, #12]
    b370:	4b4a      	ldr	r3, [pc, #296]	; (b49c <_sercom_i2c_sync_analyse_flags+0x218>)
    b372:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    b374:	687b      	ldr	r3, [r7, #4]
    b376:	885b      	ldrh	r3, [r3, #2]
    b378:	b29b      	uxth	r3, r3
    b37a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    b37e:	b29a      	uxth	r2, r3
    b380:	687b      	ldr	r3, [r7, #4]
    b382:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    b384:	2300      	movs	r3, #0
    b386:	e07a      	b.n	b47e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    b388:	687b      	ldr	r3, [r7, #4]
    b38a:	685b      	ldr	r3, [r3, #4]
    b38c:	2b00      	cmp	r3, #0
    b38e:	d111      	bne.n	b3b4 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    b390:	687b      	ldr	r3, [r7, #4]
    b392:	885b      	ldrh	r3, [r3, #2]
    b394:	b29b      	uxth	r3, r3
    b396:	b21b      	sxth	r3, r3
    b398:	2b00      	cmp	r3, #0
    b39a:	da02      	bge.n	b3a2 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    b39c:	68f8      	ldr	r0, [r7, #12]
    b39e:	4b3d      	ldr	r3, [pc, #244]	; (b494 <_sercom_i2c_sync_analyse_flags+0x210>)
    b3a0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b3a2:	687b      	ldr	r3, [r7, #4]
    b3a4:	885b      	ldrh	r3, [r3, #2]
    b3a6:	b29b      	uxth	r3, r3
    b3a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b3ac:	b29a      	uxth	r2, r3
    b3ae:	687b      	ldr	r3, [r7, #4]
    b3b0:	805a      	strh	r2, [r3, #2]
    b3b2:	e010      	b.n	b3d6 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    b3b4:	687b      	ldr	r3, [r7, #4]
    b3b6:	689b      	ldr	r3, [r3, #8]
    b3b8:	781b      	ldrb	r3, [r3, #0]
    b3ba:	4619      	mov	r1, r3
    b3bc:	68f8      	ldr	r0, [r7, #12]
    b3be:	4b38      	ldr	r3, [pc, #224]	; (b4a0 <_sercom_i2c_sync_analyse_flags+0x21c>)
    b3c0:	4798      	blx	r3
				msg->buffer++;
    b3c2:	687b      	ldr	r3, [r7, #4]
    b3c4:	689b      	ldr	r3, [r3, #8]
    b3c6:	1c5a      	adds	r2, r3, #1
    b3c8:	687b      	ldr	r3, [r7, #4]
    b3ca:	609a      	str	r2, [r3, #8]
				msg->len--;
    b3cc:	687b      	ldr	r3, [r7, #4]
    b3ce:	685b      	ldr	r3, [r3, #4]
    b3d0:	1e5a      	subs	r2, r3, #1
    b3d2:	687b      	ldr	r3, [r7, #4]
    b3d4:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    b3d6:	2300      	movs	r3, #0
    b3d8:	e051      	b.n	b47e <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    b3da:	68bb      	ldr	r3, [r7, #8]
    b3dc:	f003 0302 	and.w	r3, r3, #2
    b3e0:	2b00      	cmp	r3, #0
    b3e2:	d04b      	beq.n	b47c <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    b3e4:	687b      	ldr	r3, [r7, #4]
    b3e6:	685b      	ldr	r3, [r3, #4]
    b3e8:	2b00      	cmp	r3, #0
    b3ea:	d041      	beq.n	b470 <_sercom_i2c_sync_analyse_flags+0x1ec>
    b3ec:	8a7b      	ldrh	r3, [r7, #18]
    b3ee:	f003 0304 	and.w	r3, r3, #4
    b3f2:	2b00      	cmp	r3, #0
    b3f4:	d13c      	bne.n	b470 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    b3f6:	687b      	ldr	r3, [r7, #4]
    b3f8:	685b      	ldr	r3, [r3, #4]
    b3fa:	1e5a      	subs	r2, r3, #1
    b3fc:	687b      	ldr	r3, [r7, #4]
    b3fe:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    b400:	687b      	ldr	r3, [r7, #4]
    b402:	685b      	ldr	r3, [r3, #4]
    b404:	2b00      	cmp	r3, #0
    b406:	d102      	bne.n	b40e <_sercom_i2c_sync_analyse_flags+0x18a>
    b408:	697b      	ldr	r3, [r7, #20]
    b40a:	2b00      	cmp	r3, #0
    b40c:	d006      	beq.n	b41c <_sercom_i2c_sync_analyse_flags+0x198>
    b40e:	687b      	ldr	r3, [r7, #4]
    b410:	685b      	ldr	r3, [r3, #4]
    b412:	2b01      	cmp	r3, #1
    b414:	d105      	bne.n	b422 <_sercom_i2c_sync_analyse_flags+0x19e>
    b416:	697b      	ldr	r3, [r7, #20]
    b418:	2b00      	cmp	r3, #0
    b41a:	d002      	beq.n	b422 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    b41c:	68f8      	ldr	r0, [r7, #12]
    b41e:	4b21      	ldr	r3, [pc, #132]	; (b4a4 <_sercom_i2c_sync_analyse_flags+0x220>)
    b420:	4798      	blx	r3
			}

			if (msg->len == 0) {
    b422:	687b      	ldr	r3, [r7, #4]
    b424:	685b      	ldr	r3, [r3, #4]
    b426:	2b00      	cmp	r3, #0
    b428:	d113      	bne.n	b452 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    b42a:	687b      	ldr	r3, [r7, #4]
    b42c:	885b      	ldrh	r3, [r3, #2]
    b42e:	b29b      	uxth	r3, r3
    b430:	b21b      	sxth	r3, r3
    b432:	2b00      	cmp	r3, #0
    b434:	da05      	bge.n	b442 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    b436:	68f8      	ldr	r0, [r7, #12]
    b438:	4b1b      	ldr	r3, [pc, #108]	; (b4a8 <_sercom_i2c_sync_analyse_flags+0x224>)
    b43a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    b43c:	68f8      	ldr	r0, [r7, #12]
    b43e:	4b15      	ldr	r3, [pc, #84]	; (b494 <_sercom_i2c_sync_analyse_flags+0x210>)
    b440:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b442:	687b      	ldr	r3, [r7, #4]
    b444:	885b      	ldrh	r3, [r3, #2]
    b446:	b29b      	uxth	r3, r3
    b448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b44c:	b29a      	uxth	r2, r3
    b44e:	687b      	ldr	r3, [r7, #4]
    b450:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    b452:	687b      	ldr	r3, [r7, #4]
    b454:	689c      	ldr	r4, [r3, #8]
    b456:	1c62      	adds	r2, r4, #1
    b458:	687b      	ldr	r3, [r7, #4]
    b45a:	609a      	str	r2, [r3, #8]
    b45c:	68f8      	ldr	r0, [r7, #12]
    b45e:	4b13      	ldr	r3, [pc, #76]	; (b4ac <_sercom_i2c_sync_analyse_flags+0x228>)
    b460:	4798      	blx	r3
    b462:	4603      	mov	r3, r0
    b464:	b2db      	uxtb	r3, r3
    b466:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    b468:	68f8      	ldr	r0, [r7, #12]
    b46a:	4b11      	ldr	r3, [pc, #68]	; (b4b0 <_sercom_i2c_sync_analyse_flags+0x22c>)
    b46c:	4798      	blx	r3
    b46e:	e005      	b.n	b47c <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    b470:	68f8      	ldr	r0, [r7, #12]
    b472:	4b0f      	ldr	r3, [pc, #60]	; (b4b0 <_sercom_i2c_sync_analyse_flags+0x22c>)
    b474:	4798      	blx	r3
			return I2C_NACK;
    b476:	f06f 0301 	mvn.w	r3, #1
    b47a:	e000      	b.n	b47e <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    b47c:	2300      	movs	r3, #0
}
    b47e:	4618      	mov	r0, r3
    b480:	371c      	adds	r7, #28
    b482:	46bd      	mov	sp, r7
    b484:	bd90      	pop	{r4, r7, pc}
    b486:	bf00      	nop
    b488:	0000accd 	.word	0x0000accd
    b48c:	0000b105 	.word	0x0000b105
    b490:	0000aa31 	.word	0x0000aa31
    b494:	0000b269 	.word	0x0000b269
    b498:	0000afe5 	.word	0x0000afe5
    b49c:	0000afc1 	.word	0x0000afc1
    b4a0:	0000b021 	.word	0x0000b021
    b4a4:	0000ae7d 	.word	0x0000ae7d
    b4a8:	0000ae55 	.word	0x0000ae55
    b4ac:	0000b045 	.word	0x0000b045
    b4b0:	0000aa4b 	.word	0x0000aa4b

0000b4b4 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    b4b4:	b580      	push	{r7, lr}
    b4b6:	b086      	sub	sp, #24
    b4b8:	af00      	add	r7, sp, #0
    b4ba:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    b4bc:	687b      	ldr	r3, [r7, #4]
    b4be:	691b      	ldr	r3, [r3, #16]
    b4c0:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    b4c2:	6938      	ldr	r0, [r7, #16]
    b4c4:	4b37      	ldr	r3, [pc, #220]	; (b5a4 <_sercom_i2c_m_irq_handler+0xf0>)
    b4c6:	4798      	blx	r3
    b4c8:	4603      	mov	r3, r0
    b4ca:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    b4cc:	2300      	movs	r3, #0
    b4ce:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    b4d0:	687b      	ldr	r3, [r7, #4]
    b4d2:	2b00      	cmp	r3, #0
    b4d4:	bf14      	ite	ne
    b4d6:	2301      	movne	r3, #1
    b4d8:	2300      	moveq	r3, #0
    b4da:	b2db      	uxtb	r3, r3
    b4dc:	f240 422a 	movw	r2, #1066	; 0x42a
    b4e0:	4931      	ldr	r1, [pc, #196]	; (b5a8 <_sercom_i2c_m_irq_handler+0xf4>)
    b4e2:	4618      	mov	r0, r3
    b4e4:	4b31      	ldr	r3, [pc, #196]	; (b5ac <_sercom_i2c_m_irq_handler+0xf8>)
    b4e6:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    b4e8:	687b      	ldr	r3, [r7, #4]
    b4ea:	691b      	ldr	r3, [r3, #16]
    b4ec:	2b00      	cmp	r3, #0
    b4ee:	bf14      	ite	ne
    b4f0:	2301      	movne	r3, #1
    b4f2:	2300      	moveq	r3, #0
    b4f4:	b2db      	uxtb	r3, r3
    b4f6:	f240 422b 	movw	r2, #1067	; 0x42b
    b4fa:	492b      	ldr	r1, [pc, #172]	; (b5a8 <_sercom_i2c_m_irq_handler+0xf4>)
    b4fc:	4618      	mov	r0, r3
    b4fe:	4b2b      	ldr	r3, [pc, #172]	; (b5ac <_sercom_i2c_m_irq_handler+0xf8>)
    b500:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    b502:	bf00      	nop
    b504:	68fb      	ldr	r3, [r7, #12]
    b506:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b50a:	2b00      	cmp	r3, #0
    b50c:	d126      	bne.n	b55c <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    b50e:	687b      	ldr	r3, [r7, #4]
    b510:	461a      	mov	r2, r3
    b512:	68f9      	ldr	r1, [r7, #12]
    b514:	6938      	ldr	r0, [r7, #16]
    b516:	4b26      	ldr	r3, [pc, #152]	; (b5b0 <_sercom_i2c_m_irq_handler+0xfc>)
    b518:	4798      	blx	r3
    b51a:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    b51c:	697b      	ldr	r3, [r7, #20]
    b51e:	2b00      	cmp	r3, #0
    b520:	d11b      	bne.n	b55a <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    b522:	68fb      	ldr	r3, [r7, #12]
    b524:	f003 0301 	and.w	r3, r3, #1
    b528:	2b00      	cmp	r3, #0
    b52a:	d008      	beq.n	b53e <_sercom_i2c_m_irq_handler+0x8a>
    b52c:	687b      	ldr	r3, [r7, #4]
    b52e:	699b      	ldr	r3, [r3, #24]
    b530:	2b00      	cmp	r3, #0
    b532:	d004      	beq.n	b53e <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    b534:	687b      	ldr	r3, [r7, #4]
    b536:	699b      	ldr	r3, [r3, #24]
    b538:	6878      	ldr	r0, [r7, #4]
    b53a:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    b53c:	e02e      	b.n	b59c <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    b53e:	68fb      	ldr	r3, [r7, #12]
    b540:	f003 0302 	and.w	r3, r3, #2
    b544:	2b00      	cmp	r3, #0
    b546:	d029      	beq.n	b59c <_sercom_i2c_m_irq_handler+0xe8>
    b548:	687b      	ldr	r3, [r7, #4]
    b54a:	69db      	ldr	r3, [r3, #28]
    b54c:	2b00      	cmp	r3, #0
    b54e:	d025      	beq.n	b59c <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    b550:	687b      	ldr	r3, [r7, #4]
    b552:	69db      	ldr	r3, [r3, #28]
    b554:	6878      	ldr	r0, [r7, #4]
    b556:	4798      	blx	r3
		return;
    b558:	e020      	b.n	b59c <_sercom_i2c_m_irq_handler+0xe8>
			break;
    b55a:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    b55c:	687b      	ldr	r3, [r7, #4]
    b55e:	885b      	ldrh	r3, [r3, #2]
    b560:	b29b      	uxth	r3, r3
    b562:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b566:	b29a      	uxth	r2, r3
    b568:	687b      	ldr	r3, [r7, #4]
    b56a:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    b56c:	687b      	ldr	r3, [r7, #4]
    b56e:	695b      	ldr	r3, [r3, #20]
    b570:	2b00      	cmp	r3, #0
    b572:	d014      	beq.n	b59e <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    b574:	697b      	ldr	r3, [r7, #20]
    b576:	2b00      	cmp	r3, #0
    b578:	d005      	beq.n	b586 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    b57a:	687b      	ldr	r3, [r7, #4]
    b57c:	695b      	ldr	r3, [r3, #20]
    b57e:	6979      	ldr	r1, [r7, #20]
    b580:	6878      	ldr	r0, [r7, #4]
    b582:	4798      	blx	r3
    b584:	e005      	b.n	b592 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    b586:	687b      	ldr	r3, [r7, #4]
    b588:	695b      	ldr	r3, [r3, #20]
    b58a:	f06f 0104 	mvn.w	r1, #4
    b58e:	6878      	ldr	r0, [r7, #4]
    b590:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    b592:	2180      	movs	r1, #128	; 0x80
    b594:	6938      	ldr	r0, [r7, #16]
    b596:	4b07      	ldr	r3, [pc, #28]	; (b5b4 <_sercom_i2c_m_irq_handler+0x100>)
    b598:	4798      	blx	r3
    b59a:	e000      	b.n	b59e <_sercom_i2c_m_irq_handler+0xea>
		return;
    b59c:	bf00      	nop
	}
}
    b59e:	3718      	adds	r7, #24
    b5a0:	46bd      	mov	sp, r7
    b5a2:	bd80      	pop	{r7, pc}
    b5a4:	0000aa65 	.word	0x0000aa65
    b5a8:	00020428 	.word	0x00020428
    b5ac:	00007d5d 	.word	0x00007d5d
    b5b0:	0000b285 	.word	0x0000b285
    b5b4:	0000aa7f 	.word	0x0000aa7f

0000b5b8 <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    b5b8:	b580      	push	{r7, lr}
    b5ba:	b082      	sub	sp, #8
    b5bc:	af00      	add	r7, sp, #0
    b5be:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    b5c0:	687b      	ldr	r3, [r7, #4]
    b5c2:	2b00      	cmp	r3, #0
    b5c4:	bf14      	ite	ne
    b5c6:	2301      	movne	r3, #1
    b5c8:	2300      	moveq	r3, #0
    b5ca:	b2db      	uxtb	r3, r3
    b5cc:	f44f 628a 	mov.w	r2, #1104	; 0x450
    b5d0:	4906      	ldr	r1, [pc, #24]	; (b5ec <_i2c_m_async_enable+0x34>)
    b5d2:	4618      	mov	r0, r3
    b5d4:	4b06      	ldr	r3, [pc, #24]	; (b5f0 <_i2c_m_async_enable+0x38>)
    b5d6:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    b5d8:	687b      	ldr	r3, [r7, #4]
    b5da:	691b      	ldr	r3, [r3, #16]
    b5dc:	4618      	mov	r0, r3
    b5de:	4b05      	ldr	r3, [pc, #20]	; (b5f4 <_i2c_m_async_enable+0x3c>)
    b5e0:	4798      	blx	r3
    b5e2:	4603      	mov	r3, r0
}
    b5e4:	4618      	mov	r0, r3
    b5e6:	3708      	adds	r7, #8
    b5e8:	46bd      	mov	sp, r7
    b5ea:	bd80      	pop	{r7, pc}
    b5ec:	00020428 	.word	0x00020428
    b5f0:	00007d5d 	.word	0x00007d5d
    b5f4:	0000bc39 	.word	0x0000bc39

0000b5f8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    b5f8:	b580      	push	{r7, lr}
    b5fa:	b082      	sub	sp, #8
    b5fc:	af00      	add	r7, sp, #0
    b5fe:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    b600:	6878      	ldr	r0, [r7, #4]
    b602:	4b05      	ldr	r3, [pc, #20]	; (b618 <_sercom_get_irq_num+0x20>)
    b604:	4798      	blx	r3
    b606:	4603      	mov	r3, r0
    b608:	009b      	lsls	r3, r3, #2
    b60a:	b2db      	uxtb	r3, r3
    b60c:	332e      	adds	r3, #46	; 0x2e
    b60e:	b2db      	uxtb	r3, r3
}
    b610:	4618      	mov	r0, r3
    b612:	3708      	adds	r7, #8
    b614:	46bd      	mov	sp, r7
    b616:	bd80      	pop	{r7, pc}
    b618:	0000b151 	.word	0x0000b151

0000b61c <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    b61c:	b580      	push	{r7, lr}
    b61e:	b086      	sub	sp, #24
    b620:	af00      	add	r7, sp, #0
    b622:	6078      	str	r0, [r7, #4]
    b624:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    b626:	687b      	ldr	r3, [r7, #4]
    b628:	2b00      	cmp	r3, #0
    b62a:	bf14      	ite	ne
    b62c:	2301      	movne	r3, #1
    b62e:	2300      	moveq	r3, #0
    b630:	b2db      	uxtb	r3, r3
    b632:	f240 429e 	movw	r2, #1182	; 0x49e
    b636:	491d      	ldr	r1, [pc, #116]	; (b6ac <_i2c_m_async_init+0x90>)
    b638:	4618      	mov	r0, r3
    b63a:	4b1d      	ldr	r3, [pc, #116]	; (b6b0 <_i2c_m_async_init+0x94>)
    b63c:	4798      	blx	r3

	i2c_dev->hw = hw;
    b63e:	687b      	ldr	r3, [r7, #4]
    b640:	683a      	ldr	r2, [r7, #0]
    b642:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    b644:	687b      	ldr	r3, [r7, #4]
    b646:	6839      	ldr	r1, [r7, #0]
    b648:	4618      	mov	r0, r3
    b64a:	4b1a      	ldr	r3, [pc, #104]	; (b6b4 <_i2c_m_async_init+0x98>)
    b64c:	4798      	blx	r3
    b64e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    b650:	68fb      	ldr	r3, [r7, #12]
    b652:	2b00      	cmp	r3, #0
    b654:	d001      	beq.n	b65a <_i2c_m_async_init+0x3e>
		return init_status;
    b656:	68fb      	ldr	r3, [r7, #12]
    b658:	e024      	b.n	b6a4 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    b65a:	6879      	ldr	r1, [r7, #4]
    b65c:	6838      	ldr	r0, [r7, #0]
    b65e:	4b16      	ldr	r3, [pc, #88]	; (b6b8 <_i2c_m_async_init+0x9c>)
    b660:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    b662:	6838      	ldr	r0, [r7, #0]
    b664:	4b15      	ldr	r3, [pc, #84]	; (b6bc <_i2c_m_async_init+0xa0>)
    b666:	4798      	blx	r3
    b668:	4603      	mov	r3, r0
    b66a:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    b66c:	2300      	movs	r3, #0
    b66e:	613b      	str	r3, [r7, #16]
    b670:	e014      	b.n	b69c <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    b672:	7dfb      	ldrb	r3, [r7, #23]
    b674:	b21b      	sxth	r3, r3
    b676:	4618      	mov	r0, r3
    b678:	4b11      	ldr	r3, [pc, #68]	; (b6c0 <_i2c_m_async_init+0xa4>)
    b67a:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    b67c:	7dfb      	ldrb	r3, [r7, #23]
    b67e:	b21b      	sxth	r3, r3
    b680:	4618      	mov	r0, r3
    b682:	4b10      	ldr	r3, [pc, #64]	; (b6c4 <_i2c_m_async_init+0xa8>)
    b684:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    b686:	7dfb      	ldrb	r3, [r7, #23]
    b688:	b21b      	sxth	r3, r3
    b68a:	4618      	mov	r0, r3
    b68c:	4b0e      	ldr	r3, [pc, #56]	; (b6c8 <_i2c_m_async_init+0xac>)
    b68e:	4798      	blx	r3
		irq++;
    b690:	7dfb      	ldrb	r3, [r7, #23]
    b692:	3301      	adds	r3, #1
    b694:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    b696:	693b      	ldr	r3, [r7, #16]
    b698:	3301      	adds	r3, #1
    b69a:	613b      	str	r3, [r7, #16]
    b69c:	693b      	ldr	r3, [r7, #16]
    b69e:	2b03      	cmp	r3, #3
    b6a0:	d9e7      	bls.n	b672 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    b6a2:	2300      	movs	r3, #0
}
    b6a4:	4618      	mov	r0, r3
    b6a6:	3718      	adds	r7, #24
    b6a8:	46bd      	mov	sp, r7
    b6aa:	bd80      	pop	{r7, pc}
    b6ac:	00020428 	.word	0x00020428
    b6b0:	00007d5d 	.word	0x00007d5d
    b6b4:	0000bcc5 	.word	0x0000bcc5
    b6b8:	0000b1ad 	.word	0x0000b1ad
    b6bc:	0000b5f9 	.word	0x0000b5f9
    b6c0:	0000a919 	.word	0x0000a919
    b6c4:	0000a95d 	.word	0x0000a95d
    b6c8:	0000a8dd 	.word	0x0000a8dd

0000b6cc <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    b6cc:	b590      	push	{r4, r7, lr}
    b6ce:	b087      	sub	sp, #28
    b6d0:	af00      	add	r7, sp, #0
    b6d2:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    b6d4:	687b      	ldr	r3, [r7, #4]
    b6d6:	691b      	ldr	r3, [r3, #16]
    b6d8:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    b6da:	687b      	ldr	r3, [r7, #4]
    b6dc:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b6de:	6978      	ldr	r0, [r7, #20]
    b6e0:	4b33      	ldr	r3, [pc, #204]	; (b7b0 <_sercom_i2c_send_address+0xe4>)
    b6e2:	4798      	blx	r3
    b6e4:	4603      	mov	r3, r0
    b6e6:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    b6e8:	687b      	ldr	r3, [r7, #4]
    b6ea:	2b00      	cmp	r3, #0
    b6ec:	bf14      	ite	ne
    b6ee:	2301      	movne	r3, #1
    b6f0:	2300      	moveq	r3, #0
    b6f2:	b2db      	uxtb	r3, r3
    b6f4:	f240 42cc 	movw	r2, #1228	; 0x4cc
    b6f8:	492e      	ldr	r1, [pc, #184]	; (b7b4 <_sercom_i2c_send_address+0xe8>)
    b6fa:	4618      	mov	r0, r3
    b6fc:	4b2e      	ldr	r3, [pc, #184]	; (b7b8 <_sercom_i2c_send_address+0xec>)
    b6fe:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    b700:	693b      	ldr	r3, [r7, #16]
    b702:	685b      	ldr	r3, [r3, #4]
    b704:	2b01      	cmp	r3, #1
    b706:	d106      	bne.n	b716 <_sercom_i2c_send_address+0x4a>
    b708:	68fb      	ldr	r3, [r7, #12]
    b70a:	2b00      	cmp	r3, #0
    b70c:	d003      	beq.n	b716 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    b70e:	6978      	ldr	r0, [r7, #20]
    b710:	4b2a      	ldr	r3, [pc, #168]	; (b7bc <_sercom_i2c_send_address+0xf0>)
    b712:	4798      	blx	r3
    b714:	e002      	b.n	b71c <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    b716:	6978      	ldr	r0, [r7, #20]
    b718:	4b29      	ldr	r3, [pc, #164]	; (b7c0 <_sercom_i2c_send_address+0xf4>)
    b71a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    b71c:	693b      	ldr	r3, [r7, #16]
    b71e:	881b      	ldrh	r3, [r3, #0]
    b720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b724:	2b00      	cmp	r3, #0
    b726:	d022      	beq.n	b76e <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    b728:	693b      	ldr	r3, [r7, #16]
    b72a:	885b      	ldrh	r3, [r3, #2]
    b72c:	b29b      	uxth	r3, r3
    b72e:	f003 0301 	and.w	r3, r3, #1
    b732:	2b00      	cmp	r3, #0
    b734:	d007      	beq.n	b746 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    b736:	693b      	ldr	r3, [r7, #16]
    b738:	885b      	ldrh	r3, [r3, #2]
    b73a:	b29b      	uxth	r3, r3
    b73c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    b740:	b29a      	uxth	r2, r3
    b742:	693b      	ldr	r3, [r7, #16]
    b744:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    b746:	693b      	ldr	r3, [r7, #16]
    b748:	881b      	ldrh	r3, [r3, #0]
    b74a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b74c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    b750:	401c      	ands	r4, r3
    b752:	6978      	ldr	r0, [r7, #20]
    b754:	4b1b      	ldr	r3, [pc, #108]	; (b7c4 <_sercom_i2c_send_address+0xf8>)
    b756:	4798      	blx	r3
    b758:	4603      	mov	r3, r0
    b75a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b75e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    b760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b764:	4619      	mov	r1, r3
    b766:	6978      	ldr	r0, [r7, #20]
    b768:	4b17      	ldr	r3, [pc, #92]	; (b7c8 <_sercom_i2c_send_address+0xfc>)
    b76a:	4798      	blx	r3
    b76c:	e01a      	b.n	b7a4 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    b76e:	693b      	ldr	r3, [r7, #16]
    b770:	881b      	ldrh	r3, [r3, #0]
    b772:	005b      	lsls	r3, r3, #1
    b774:	b2db      	uxtb	r3, r3
    b776:	693a      	ldr	r2, [r7, #16]
    b778:	8852      	ldrh	r2, [r2, #2]
    b77a:	b292      	uxth	r2, r2
    b77c:	f002 0201 	and.w	r2, r2, #1
    b780:	2a00      	cmp	r2, #0
    b782:	bf14      	ite	ne
    b784:	2201      	movne	r2, #1
    b786:	2200      	moveq	r2, #0
    b788:	b2d2      	uxtb	r2, r2
    b78a:	4313      	orrs	r3, r2
    b78c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b78e:	6978      	ldr	r0, [r7, #20]
    b790:	4b0c      	ldr	r3, [pc, #48]	; (b7c4 <_sercom_i2c_send_address+0xf8>)
    b792:	4798      	blx	r3
    b794:	4603      	mov	r3, r0
    b796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    b79a:	4323      	orrs	r3, r4
    b79c:	4619      	mov	r1, r3
    b79e:	6978      	ldr	r0, [r7, #20]
    b7a0:	4b09      	ldr	r3, [pc, #36]	; (b7c8 <_sercom_i2c_send_address+0xfc>)
    b7a2:	4798      	blx	r3
	}

	return ERR_NONE;
    b7a4:	2300      	movs	r3, #0
}
    b7a6:	4618      	mov	r0, r3
    b7a8:	371c      	adds	r7, #28
    b7aa:	46bd      	mov	sp, r7
    b7ac:	bd90      	pop	{r4, r7, pc}
    b7ae:	bf00      	nop
    b7b0:	0000accd 	.word	0x0000accd
    b7b4:	00020428 	.word	0x00020428
    b7b8:	00007d5d 	.word	0x00007d5d
    b7bc:	0000ae7d 	.word	0x0000ae7d
    b7c0:	0000aea5 	.word	0x0000aea5
    b7c4:	0000afe5 	.word	0x0000afe5
    b7c8:	0000afc1 	.word	0x0000afc1

0000b7cc <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    b7cc:	b580      	push	{r7, lr}
    b7ce:	b084      	sub	sp, #16
    b7d0:	af00      	add	r7, sp, #0
    b7d2:	6078      	str	r0, [r7, #4]
    b7d4:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    b7d6:	687b      	ldr	r3, [r7, #4]
    b7d8:	2b00      	cmp	r3, #0
    b7da:	bf14      	ite	ne
    b7dc:	2301      	movne	r3, #1
    b7de:	2300      	moveq	r3, #0
    b7e0:	b2db      	uxtb	r3, r3
    b7e2:	f240 42f4 	movw	r2, #1268	; 0x4f4
    b7e6:	492a      	ldr	r1, [pc, #168]	; (b890 <_i2c_m_async_transfer+0xc4>)
    b7e8:	4618      	mov	r0, r3
    b7ea:	4b2a      	ldr	r3, [pc, #168]	; (b894 <_i2c_m_async_transfer+0xc8>)
    b7ec:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    b7ee:	687b      	ldr	r3, [r7, #4]
    b7f0:	691b      	ldr	r3, [r3, #16]
    b7f2:	2b00      	cmp	r3, #0
    b7f4:	bf14      	ite	ne
    b7f6:	2301      	movne	r3, #1
    b7f8:	2300      	moveq	r3, #0
    b7fa:	b2db      	uxtb	r3, r3
    b7fc:	f240 42f5 	movw	r2, #1269	; 0x4f5
    b800:	4923      	ldr	r1, [pc, #140]	; (b890 <_i2c_m_async_transfer+0xc4>)
    b802:	4618      	mov	r0, r3
    b804:	4b23      	ldr	r3, [pc, #140]	; (b894 <_i2c_m_async_transfer+0xc8>)
    b806:	4798      	blx	r3
	ASSERT(msg);
    b808:	683b      	ldr	r3, [r7, #0]
    b80a:	2b00      	cmp	r3, #0
    b80c:	bf14      	ite	ne
    b80e:	2301      	movne	r3, #1
    b810:	2300      	moveq	r3, #0
    b812:	b2db      	uxtb	r3, r3
    b814:	f240 42f6 	movw	r2, #1270	; 0x4f6
    b818:	491d      	ldr	r1, [pc, #116]	; (b890 <_i2c_m_async_transfer+0xc4>)
    b81a:	4618      	mov	r0, r3
    b81c:	4b1d      	ldr	r3, [pc, #116]	; (b894 <_i2c_m_async_transfer+0xc8>)
    b81e:	4798      	blx	r3

	if (msg->len == 0) {
    b820:	683b      	ldr	r3, [r7, #0]
    b822:	685b      	ldr	r3, [r3, #4]
    b824:	2b00      	cmp	r3, #0
    b826:	d101      	bne.n	b82c <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    b828:	2300      	movs	r3, #0
    b82a:	e02d      	b.n	b888 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    b82c:	687b      	ldr	r3, [r7, #4]
    b82e:	885b      	ldrh	r3, [r3, #2]
    b830:	b29b      	uxth	r3, r3
    b832:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b836:	2b00      	cmp	r3, #0
    b838:	d002      	beq.n	b840 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    b83a:	f06f 0303 	mvn.w	r3, #3
    b83e:	e023      	b.n	b888 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    b840:	683b      	ldr	r3, [r7, #0]
    b842:	885b      	ldrh	r3, [r3, #2]
    b844:	b29b      	uxth	r3, r3
    b846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b84a:	b29a      	uxth	r2, r3
    b84c:	683b      	ldr	r3, [r7, #0]
    b84e:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    b850:	687b      	ldr	r3, [r7, #4]
    b852:	683a      	ldr	r2, [r7, #0]
    b854:	ca07      	ldmia	r2, {r0, r1, r2}
    b856:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    b85a:	687b      	ldr	r3, [r7, #4]
    b85c:	691b      	ldr	r3, [r3, #16]
    b85e:	4618      	mov	r0, r3
    b860:	4b0d      	ldr	r3, [pc, #52]	; (b898 <_i2c_m_async_transfer+0xcc>)
    b862:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    b864:	6878      	ldr	r0, [r7, #4]
    b866:	4b0d      	ldr	r3, [pc, #52]	; (b89c <_i2c_m_async_transfer+0xd0>)
    b868:	4798      	blx	r3
    b86a:	60f8      	str	r0, [r7, #12]

	if (ret) {
    b86c:	68fb      	ldr	r3, [r7, #12]
    b86e:	2b00      	cmp	r3, #0
    b870:	d009      	beq.n	b886 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    b872:	687b      	ldr	r3, [r7, #4]
    b874:	885b      	ldrh	r3, [r3, #2]
    b876:	b29b      	uxth	r3, r3
    b878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b87c:	b29a      	uxth	r2, r3
    b87e:	687b      	ldr	r3, [r7, #4]
    b880:	805a      	strh	r2, [r3, #2]

		return ret;
    b882:	68fb      	ldr	r3, [r7, #12]
    b884:	e000      	b.n	b888 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    b886:	2300      	movs	r3, #0
}
    b888:	4618      	mov	r0, r3
    b88a:	3710      	adds	r7, #16
    b88c:	46bd      	mov	sp, r7
    b88e:	bd80      	pop	{r7, pc}
    b890:	00020428 	.word	0x00020428
    b894:	00007d5d 	.word	0x00007d5d
    b898:	0000ae2d 	.word	0x0000ae2d
    b89c:	0000b6cd 	.word	0x0000b6cd

0000b8a0 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    b8a0:	b480      	push	{r7}
    b8a2:	b085      	sub	sp, #20
    b8a4:	af00      	add	r7, sp, #0
    b8a6:	60f8      	str	r0, [r7, #12]
    b8a8:	460b      	mov	r3, r1
    b8aa:	607a      	str	r2, [r7, #4]
    b8ac:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    b8ae:	7afb      	ldrb	r3, [r7, #11]
    b8b0:	2b01      	cmp	r3, #1
    b8b2:	d008      	beq.n	b8c6 <_i2c_m_async_register_callback+0x26>
    b8b4:	2b02      	cmp	r3, #2
    b8b6:	d00a      	beq.n	b8ce <_i2c_m_async_register_callback+0x2e>
    b8b8:	2b00      	cmp	r3, #0
    b8ba:	d000      	beq.n	b8be <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    b8bc:	e00b      	b.n	b8d6 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    b8be:	68fb      	ldr	r3, [r7, #12]
    b8c0:	687a      	ldr	r2, [r7, #4]
    b8c2:	615a      	str	r2, [r3, #20]
		break;
    b8c4:	e007      	b.n	b8d6 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    b8c6:	68fb      	ldr	r3, [r7, #12]
    b8c8:	687a      	ldr	r2, [r7, #4]
    b8ca:	619a      	str	r2, [r3, #24]
		break;
    b8cc:	e003      	b.n	b8d6 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    b8ce:	68fb      	ldr	r3, [r7, #12]
    b8d0:	687a      	ldr	r2, [r7, #4]
    b8d2:	61da      	str	r2, [r3, #28]
		break;
    b8d4:	bf00      	nop
	}

	return ERR_NONE;
    b8d6:	2300      	movs	r3, #0
}
    b8d8:	4618      	mov	r0, r3
    b8da:	3714      	adds	r7, #20
    b8dc:	46bd      	mov	sp, r7
    b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8e2:	4770      	bx	lr

0000b8e4 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    b8e4:	b580      	push	{r7, lr}
    b8e6:	b082      	sub	sp, #8
    b8e8:	af00      	add	r7, sp, #0
    b8ea:	6078      	str	r0, [r7, #4]
    b8ec:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    b8ee:	687b      	ldr	r3, [r7, #4]
    b8f0:	2b00      	cmp	r3, #0
    b8f2:	bf14      	ite	ne
    b8f4:	2301      	movne	r3, #1
    b8f6:	2300      	moveq	r3, #0
    b8f8:	b2db      	uxtb	r3, r3
    b8fa:	f240 5254 	movw	r2, #1364	; 0x554
    b8fe:	4908      	ldr	r1, [pc, #32]	; (b920 <_i2c_m_sync_init+0x3c>)
    b900:	4618      	mov	r0, r3
    b902:	4b08      	ldr	r3, [pc, #32]	; (b924 <_i2c_m_sync_init+0x40>)
    b904:	4798      	blx	r3

	i2c_dev->hw = hw;
    b906:	687b      	ldr	r3, [r7, #4]
    b908:	683a      	ldr	r2, [r7, #0]
    b90a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    b90c:	687b      	ldr	r3, [r7, #4]
    b90e:	6839      	ldr	r1, [r7, #0]
    b910:	4618      	mov	r0, r3
    b912:	4b05      	ldr	r3, [pc, #20]	; (b928 <_i2c_m_sync_init+0x44>)
    b914:	4798      	blx	r3
    b916:	4603      	mov	r3, r0
}
    b918:	4618      	mov	r0, r3
    b91a:	3708      	adds	r7, #8
    b91c:	46bd      	mov	sp, r7
    b91e:	bd80      	pop	{r7, pc}
    b920:	00020428 	.word	0x00020428
    b924:	00007d5d 	.word	0x00007d5d
    b928:	0000bcc5 	.word	0x0000bcc5

0000b92c <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    b92c:	b580      	push	{r7, lr}
    b92e:	b082      	sub	sp, #8
    b930:	af00      	add	r7, sp, #0
    b932:	6078      	str	r0, [r7, #4]
    b934:	460b      	mov	r3, r1
    b936:	70fb      	strb	r3, [r7, #3]
    b938:	4613      	mov	r3, r2
    b93a:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    b93c:	78fb      	ldrb	r3, [r7, #3]
    b93e:	2b01      	cmp	r3, #1
    b940:	d002      	beq.n	b948 <_i2c_m_async_set_irq_state+0x1c>
    b942:	78fb      	ldrb	r3, [r7, #3]
    b944:	2b02      	cmp	r3, #2
    b946:	d10e      	bne.n	b966 <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    b948:	687b      	ldr	r3, [r7, #4]
    b94a:	691b      	ldr	r3, [r3, #16]
    b94c:	78ba      	ldrb	r2, [r7, #2]
    b94e:	4611      	mov	r1, r2
    b950:	4618      	mov	r0, r3
    b952:	4b0c      	ldr	r3, [pc, #48]	; (b984 <_i2c_m_async_set_irq_state+0x58>)
    b954:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    b956:	687b      	ldr	r3, [r7, #4]
    b958:	691b      	ldr	r3, [r3, #16]
    b95a:	78ba      	ldrb	r2, [r7, #2]
    b95c:	4611      	mov	r1, r2
    b95e:	4618      	mov	r0, r3
    b960:	4b09      	ldr	r3, [pc, #36]	; (b988 <_i2c_m_async_set_irq_state+0x5c>)
    b962:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    b964:	e009      	b.n	b97a <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    b966:	78fb      	ldrb	r3, [r7, #3]
    b968:	2b00      	cmp	r3, #0
    b96a:	d106      	bne.n	b97a <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    b96c:	687b      	ldr	r3, [r7, #4]
    b96e:	691b      	ldr	r3, [r3, #16]
    b970:	78ba      	ldrb	r2, [r7, #2]
    b972:	4611      	mov	r1, r2
    b974:	4618      	mov	r0, r3
    b976:	4b05      	ldr	r3, [pc, #20]	; (b98c <_i2c_m_async_set_irq_state+0x60>)
    b978:	4798      	blx	r3
}
    b97a:	bf00      	nop
    b97c:	3708      	adds	r7, #8
    b97e:	46bd      	mov	sp, r7
    b980:	bd80      	pop	{r7, pc}
    b982:	bf00      	nop
    b984:	0000ab2f 	.word	0x0000ab2f
    b988:	0000aafd 	.word	0x0000aafd
    b98c:	0000ab61 	.word	0x0000ab61

0000b990 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    b990:	b580      	push	{r7, lr}
    b992:	b084      	sub	sp, #16
    b994:	af00      	add	r7, sp, #0
    b996:	6078      	str	r0, [r7, #4]
    b998:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    b99a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b99e:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    b9a0:	687b      	ldr	r3, [r7, #4]
    b9a2:	691b      	ldr	r3, [r3, #16]
    b9a4:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    b9a6:	68b8      	ldr	r0, [r7, #8]
    b9a8:	4b0f      	ldr	r3, [pc, #60]	; (b9e8 <_sercom_i2c_sync_wait_bus+0x58>)
    b9aa:	4798      	blx	r3
    b9ac:	4603      	mov	r3, r0
    b9ae:	461a      	mov	r2, r3
    b9b0:	683b      	ldr	r3, [r7, #0]
    b9b2:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    b9b4:	68fb      	ldr	r3, [r7, #12]
    b9b6:	1e5a      	subs	r2, r3, #1
    b9b8:	60fa      	str	r2, [r7, #12]
    b9ba:	2b00      	cmp	r3, #0
    b9bc:	d102      	bne.n	b9c4 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    b9be:	f06f 0304 	mvn.w	r3, #4
    b9c2:	e00c      	b.n	b9de <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    b9c4:	683b      	ldr	r3, [r7, #0]
    b9c6:	681b      	ldr	r3, [r3, #0]
    b9c8:	f003 0301 	and.w	r3, r3, #1
    b9cc:	2b00      	cmp	r3, #0
    b9ce:	d105      	bne.n	b9dc <_sercom_i2c_sync_wait_bus+0x4c>
    b9d0:	683b      	ldr	r3, [r7, #0]
    b9d2:	681b      	ldr	r3, [r3, #0]
    b9d4:	f003 0302 	and.w	r3, r3, #2
    b9d8:	2b00      	cmp	r3, #0
    b9da:	d0e4      	beq.n	b9a6 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    b9dc:	2300      	movs	r3, #0
}
    b9de:	4618      	mov	r0, r3
    b9e0:	3710      	adds	r7, #16
    b9e2:	46bd      	mov	sp, r7
    b9e4:	bd80      	pop	{r7, pc}
    b9e6:	bf00      	nop
    b9e8:	0000aa65 	.word	0x0000aa65

0000b9ec <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    b9ec:	b590      	push	{r4, r7, lr}
    b9ee:	b087      	sub	sp, #28
    b9f0:	af00      	add	r7, sp, #0
    b9f2:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    b9f4:	687b      	ldr	r3, [r7, #4]
    b9f6:	691b      	ldr	r3, [r3, #16]
    b9f8:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    b9fa:	687b      	ldr	r3, [r7, #4]
    b9fc:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b9fe:	6978      	ldr	r0, [r7, #20]
    ba00:	4b39      	ldr	r3, [pc, #228]	; (bae8 <_sercom_i2c_sync_send_address+0xfc>)
    ba02:	4798      	blx	r3
    ba04:	4603      	mov	r3, r0
    ba06:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    ba08:	687b      	ldr	r3, [r7, #4]
    ba0a:	2b00      	cmp	r3, #0
    ba0c:	bf14      	ite	ne
    ba0e:	2301      	movne	r3, #1
    ba10:	2300      	moveq	r3, #0
    ba12:	b2db      	uxtb	r3, r3
    ba14:	f240 52e1 	movw	r2, #1505	; 0x5e1
    ba18:	4934      	ldr	r1, [pc, #208]	; (baec <_sercom_i2c_sync_send_address+0x100>)
    ba1a:	4618      	mov	r0, r3
    ba1c:	4b34      	ldr	r3, [pc, #208]	; (baf0 <_sercom_i2c_sync_send_address+0x104>)
    ba1e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    ba20:	693b      	ldr	r3, [r7, #16]
    ba22:	685b      	ldr	r3, [r3, #4]
    ba24:	2b01      	cmp	r3, #1
    ba26:	d106      	bne.n	ba36 <_sercom_i2c_sync_send_address+0x4a>
    ba28:	68fb      	ldr	r3, [r7, #12]
    ba2a:	2b00      	cmp	r3, #0
    ba2c:	d003      	beq.n	ba36 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    ba2e:	6978      	ldr	r0, [r7, #20]
    ba30:	4b30      	ldr	r3, [pc, #192]	; (baf4 <_sercom_i2c_sync_send_address+0x108>)
    ba32:	4798      	blx	r3
    ba34:	e002      	b.n	ba3c <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    ba36:	6978      	ldr	r0, [r7, #20]
    ba38:	4b2f      	ldr	r3, [pc, #188]	; (baf8 <_sercom_i2c_sync_send_address+0x10c>)
    ba3a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    ba3c:	693b      	ldr	r3, [r7, #16]
    ba3e:	881b      	ldrh	r3, [r3, #0]
    ba40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ba44:	2b00      	cmp	r3, #0
    ba46:	d022      	beq.n	ba8e <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    ba48:	693b      	ldr	r3, [r7, #16]
    ba4a:	885b      	ldrh	r3, [r3, #2]
    ba4c:	b29b      	uxth	r3, r3
    ba4e:	f003 0301 	and.w	r3, r3, #1
    ba52:	2b00      	cmp	r3, #0
    ba54:	d007      	beq.n	ba66 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    ba56:	693b      	ldr	r3, [r7, #16]
    ba58:	885b      	ldrh	r3, [r3, #2]
    ba5a:	b29b      	uxth	r3, r3
    ba5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    ba60:	b29a      	uxth	r2, r3
    ba62:	693b      	ldr	r3, [r7, #16]
    ba64:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    ba66:	693b      	ldr	r3, [r7, #16]
    ba68:	881b      	ldrh	r3, [r3, #0]
    ba6a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    ba6c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    ba70:	401c      	ands	r4, r3
    ba72:	6978      	ldr	r0, [r7, #20]
    ba74:	4b21      	ldr	r3, [pc, #132]	; (bafc <_sercom_i2c_sync_send_address+0x110>)
    ba76:	4798      	blx	r3
    ba78:	4603      	mov	r3, r0
    ba7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    ba7e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    ba80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    ba84:	4619      	mov	r1, r3
    ba86:	6978      	ldr	r0, [r7, #20]
    ba88:	4b1d      	ldr	r3, [pc, #116]	; (bb00 <_sercom_i2c_sync_send_address+0x114>)
    ba8a:	4798      	blx	r3
    ba8c:	e01a      	b.n	bac4 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    ba8e:	693b      	ldr	r3, [r7, #16]
    ba90:	881b      	ldrh	r3, [r3, #0]
    ba92:	005b      	lsls	r3, r3, #1
    ba94:	b2db      	uxtb	r3, r3
    ba96:	693a      	ldr	r2, [r7, #16]
    ba98:	8852      	ldrh	r2, [r2, #2]
    ba9a:	b292      	uxth	r2, r2
    ba9c:	f002 0201 	and.w	r2, r2, #1
    baa0:	2a00      	cmp	r2, #0
    baa2:	bf14      	ite	ne
    baa4:	2201      	movne	r2, #1
    baa6:	2200      	moveq	r2, #0
    baa8:	b2d2      	uxtb	r2, r2
    baaa:	4313      	orrs	r3, r2
    baac:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    baae:	6978      	ldr	r0, [r7, #20]
    bab0:	4b12      	ldr	r3, [pc, #72]	; (bafc <_sercom_i2c_sync_send_address+0x110>)
    bab2:	4798      	blx	r3
    bab4:	4603      	mov	r3, r0
    bab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    baba:	4323      	orrs	r3, r4
    babc:	4619      	mov	r1, r3
    babe:	6978      	ldr	r0, [r7, #20]
    bac0:	4b0f      	ldr	r3, [pc, #60]	; (bb00 <_sercom_i2c_sync_send_address+0x114>)
    bac2:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    bac4:	f107 0308 	add.w	r3, r7, #8
    bac8:	4619      	mov	r1, r3
    baca:	6878      	ldr	r0, [r7, #4]
    bacc:	4b0d      	ldr	r3, [pc, #52]	; (bb04 <_sercom_i2c_sync_send_address+0x118>)
    bace:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    bad0:	68bb      	ldr	r3, [r7, #8]
    bad2:	693a      	ldr	r2, [r7, #16]
    bad4:	4619      	mov	r1, r3
    bad6:	6978      	ldr	r0, [r7, #20]
    bad8:	4b0b      	ldr	r3, [pc, #44]	; (bb08 <_sercom_i2c_sync_send_address+0x11c>)
    bada:	4798      	blx	r3
    badc:	4603      	mov	r3, r0
}
    bade:	4618      	mov	r0, r3
    bae0:	371c      	adds	r7, #28
    bae2:	46bd      	mov	sp, r7
    bae4:	bd90      	pop	{r4, r7, pc}
    bae6:	bf00      	nop
    bae8:	0000accd 	.word	0x0000accd
    baec:	00020428 	.word	0x00020428
    baf0:	00007d5d 	.word	0x00007d5d
    baf4:	0000ae7d 	.word	0x0000ae7d
    baf8:	0000aea5 	.word	0x0000aea5
    bafc:	0000afe5 	.word	0x0000afe5
    bb00:	0000afc1 	.word	0x0000afc1
    bb04:	0000b991 	.word	0x0000b991
    bb08:	0000b285 	.word	0x0000b285

0000bb0c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    bb0c:	b580      	push	{r7, lr}
    bb0e:	b086      	sub	sp, #24
    bb10:	af00      	add	r7, sp, #0
    bb12:	6078      	str	r0, [r7, #4]
    bb14:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    bb16:	687b      	ldr	r3, [r7, #4]
    bb18:	691b      	ldr	r3, [r3, #16]
    bb1a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    bb1c:	687b      	ldr	r3, [r7, #4]
    bb1e:	2b00      	cmp	r3, #0
    bb20:	bf14      	ite	ne
    bb22:	2301      	movne	r3, #1
    bb24:	2300      	moveq	r3, #0
    bb26:	b2db      	uxtb	r3, r3
    bb28:	f240 620c 	movw	r2, #1548	; 0x60c
    bb2c:	493b      	ldr	r1, [pc, #236]	; (bc1c <_i2c_m_sync_transfer+0x110>)
    bb2e:	4618      	mov	r0, r3
    bb30:	4b3b      	ldr	r3, [pc, #236]	; (bc20 <_i2c_m_sync_transfer+0x114>)
    bb32:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    bb34:	687b      	ldr	r3, [r7, #4]
    bb36:	691b      	ldr	r3, [r3, #16]
    bb38:	2b00      	cmp	r3, #0
    bb3a:	bf14      	ite	ne
    bb3c:	2301      	movne	r3, #1
    bb3e:	2300      	moveq	r3, #0
    bb40:	b2db      	uxtb	r3, r3
    bb42:	f240 620d 	movw	r2, #1549	; 0x60d
    bb46:	4935      	ldr	r1, [pc, #212]	; (bc1c <_i2c_m_sync_transfer+0x110>)
    bb48:	4618      	mov	r0, r3
    bb4a:	4b35      	ldr	r3, [pc, #212]	; (bc20 <_i2c_m_sync_transfer+0x114>)
    bb4c:	4798      	blx	r3
	ASSERT(msg);
    bb4e:	683b      	ldr	r3, [r7, #0]
    bb50:	2b00      	cmp	r3, #0
    bb52:	bf14      	ite	ne
    bb54:	2301      	movne	r3, #1
    bb56:	2300      	moveq	r3, #0
    bb58:	b2db      	uxtb	r3, r3
    bb5a:	f240 620e 	movw	r2, #1550	; 0x60e
    bb5e:	492f      	ldr	r1, [pc, #188]	; (bc1c <_i2c_m_sync_transfer+0x110>)
    bb60:	4618      	mov	r0, r3
    bb62:	4b2f      	ldr	r3, [pc, #188]	; (bc20 <_i2c_m_sync_transfer+0x114>)
    bb64:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    bb66:	687b      	ldr	r3, [r7, #4]
    bb68:	885b      	ldrh	r3, [r3, #2]
    bb6a:	b29b      	uxth	r3, r3
    bb6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    bb70:	2b00      	cmp	r3, #0
    bb72:	d002      	beq.n	bb7a <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    bb74:	f06f 0305 	mvn.w	r3, #5
    bb78:	e04c      	b.n	bc14 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    bb7a:	683b      	ldr	r3, [r7, #0]
    bb7c:	885b      	ldrh	r3, [r3, #2]
    bb7e:	b29b      	uxth	r3, r3
    bb80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bb84:	b29a      	uxth	r2, r3
    bb86:	683b      	ldr	r3, [r7, #0]
    bb88:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    bb8a:	687b      	ldr	r3, [r7, #4]
    bb8c:	683a      	ldr	r2, [r7, #0]
    bb8e:	ca07      	ldmia	r2, {r0, r1, r2}
    bb90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    bb94:	6938      	ldr	r0, [r7, #16]
    bb96:	4b23      	ldr	r3, [pc, #140]	; (bc24 <_i2c_m_sync_transfer+0x118>)
    bb98:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    bb9a:	6878      	ldr	r0, [r7, #4]
    bb9c:	4b22      	ldr	r3, [pc, #136]	; (bc28 <_i2c_m_sync_transfer+0x11c>)
    bb9e:	4798      	blx	r3
    bba0:	6178      	str	r0, [r7, #20]

	if (ret) {
    bba2:	697b      	ldr	r3, [r7, #20]
    bba4:	2b00      	cmp	r3, #0
    bba6:	d02d      	beq.n	bc04 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    bba8:	687b      	ldr	r3, [r7, #4]
    bbaa:	885b      	ldrh	r3, [r3, #2]
    bbac:	b29b      	uxth	r3, r3
    bbae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    bbb2:	b29a      	uxth	r2, r3
    bbb4:	687b      	ldr	r3, [r7, #4]
    bbb6:	805a      	strh	r2, [r3, #2]

		return ret;
    bbb8:	697b      	ldr	r3, [r7, #20]
    bbba:	e02b      	b.n	bc14 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    bbbc:	f107 030c 	add.w	r3, r7, #12
    bbc0:	4619      	mov	r1, r3
    bbc2:	6878      	ldr	r0, [r7, #4]
    bbc4:	4b19      	ldr	r3, [pc, #100]	; (bc2c <_i2c_m_sync_transfer+0x120>)
    bbc6:	4798      	blx	r3
    bbc8:	6178      	str	r0, [r7, #20]

		if (ret) {
    bbca:	697b      	ldr	r3, [r7, #20]
    bbcc:	2b00      	cmp	r3, #0
    bbce:	d012      	beq.n	bbf6 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    bbd0:	683b      	ldr	r3, [r7, #0]
    bbd2:	885b      	ldrh	r3, [r3, #2]
    bbd4:	b29b      	uxth	r3, r3
    bbd6:	b21b      	sxth	r3, r3
    bbd8:	2b00      	cmp	r3, #0
    bbda:	da02      	bge.n	bbe2 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    bbdc:	6938      	ldr	r0, [r7, #16]
    bbde:	4b14      	ldr	r3, [pc, #80]	; (bc30 <_i2c_m_sync_transfer+0x124>)
    bbe0:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    bbe2:	687b      	ldr	r3, [r7, #4]
    bbe4:	885b      	ldrh	r3, [r3, #2]
    bbe6:	b29b      	uxth	r3, r3
    bbe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    bbec:	b29a      	uxth	r2, r3
    bbee:	687b      	ldr	r3, [r7, #4]
    bbf0:	805a      	strh	r2, [r3, #2]

			return ret;
    bbf2:	697b      	ldr	r3, [r7, #20]
    bbf4:	e00e      	b.n	bc14 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    bbf6:	68fb      	ldr	r3, [r7, #12]
    bbf8:	687a      	ldr	r2, [r7, #4]
    bbfa:	4619      	mov	r1, r3
    bbfc:	6938      	ldr	r0, [r7, #16]
    bbfe:	4b0d      	ldr	r3, [pc, #52]	; (bc34 <_i2c_m_sync_transfer+0x128>)
    bc00:	4798      	blx	r3
    bc02:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    bc04:	687b      	ldr	r3, [r7, #4]
    bc06:	885b      	ldrh	r3, [r3, #2]
    bc08:	b29b      	uxth	r3, r3
    bc0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    bc0e:	2b00      	cmp	r3, #0
    bc10:	d1d4      	bne.n	bbbc <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    bc12:	697b      	ldr	r3, [r7, #20]
}
    bc14:	4618      	mov	r0, r3
    bc16:	3718      	adds	r7, #24
    bc18:	46bd      	mov	sp, r7
    bc1a:	bd80      	pop	{r7, pc}
    bc1c:	00020428 	.word	0x00020428
    bc20:	00007d5d 	.word	0x00007d5d
    bc24:	0000ae2d 	.word	0x0000ae2d
    bc28:	0000b9ed 	.word	0x0000b9ed
    bc2c:	0000b991 	.word	0x0000b991
    bc30:	0000b269 	.word	0x0000b269
    bc34:	0000b285 	.word	0x0000b285

0000bc38 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    bc38:	b580      	push	{r7, lr}
    bc3a:	b084      	sub	sp, #16
    bc3c:	af00      	add	r7, sp, #0
    bc3e:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    bc40:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bc44:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    bc46:	2304      	movs	r3, #4
    bc48:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    bc4a:	687b      	ldr	r3, [r7, #4]
    bc4c:	2b00      	cmp	r3, #0
    bc4e:	bf14      	ite	ne
    bc50:	2301      	movne	r3, #1
    bc52:	2300      	moveq	r3, #0
    bc54:	b2db      	uxtb	r3, r3
    bc56:	f240 6241 	movw	r2, #1601	; 0x641
    bc5a:	4915      	ldr	r1, [pc, #84]	; (bcb0 <_i2c_m_enable_implementation+0x78>)
    bc5c:	4618      	mov	r0, r3
    bc5e:	4b15      	ldr	r3, [pc, #84]	; (bcb4 <_i2c_m_enable_implementation+0x7c>)
    bc60:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    bc62:	6878      	ldr	r0, [r7, #4]
    bc64:	4b14      	ldr	r3, [pc, #80]	; (bcb8 <_i2c_m_enable_implementation+0x80>)
    bc66:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    bc68:	e016      	b.n	bc98 <_i2c_m_enable_implementation+0x60>
		timeout--;
    bc6a:	68fb      	ldr	r3, [r7, #12]
    bc6c:	3b01      	subs	r3, #1
    bc6e:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    bc70:	68fb      	ldr	r3, [r7, #12]
    bc72:	2b00      	cmp	r3, #0
    bc74:	dc10      	bgt.n	bc98 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    bc76:	68bb      	ldr	r3, [r7, #8]
    bc78:	3b01      	subs	r3, #1
    bc7a:	60bb      	str	r3, [r7, #8]
    bc7c:	68bb      	ldr	r3, [r7, #8]
    bc7e:	2b00      	cmp	r3, #0
    bc80:	d007      	beq.n	bc92 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    bc82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bc86:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    bc88:	2110      	movs	r1, #16
    bc8a:	6878      	ldr	r0, [r7, #4]
    bc8c:	4b0b      	ldr	r3, [pc, #44]	; (bcbc <_i2c_m_enable_implementation+0x84>)
    bc8e:	4798      	blx	r3
    bc90:	e002      	b.n	bc98 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    bc92:	f06f 0305 	mvn.w	r3, #5
    bc96:	e006      	b.n	bca6 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    bc98:	6878      	ldr	r0, [r7, #4]
    bc9a:	4b09      	ldr	r3, [pc, #36]	; (bcc0 <_i2c_m_enable_implementation+0x88>)
    bc9c:	4798      	blx	r3
    bc9e:	4603      	mov	r3, r0
    bca0:	2b01      	cmp	r3, #1
    bca2:	d1e2      	bne.n	bc6a <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    bca4:	2300      	movs	r3, #0
}
    bca6:	4618      	mov	r0, r3
    bca8:	3710      	adds	r7, #16
    bcaa:	46bd      	mov	sp, r7
    bcac:	bd80      	pop	{r7, pc}
    bcae:	bf00      	nop
    bcb0:	00020428 	.word	0x00020428
    bcb4:	00007d5d 	.word	0x00007d5d
    bcb8:	0000ac7d 	.word	0x0000ac7d
    bcbc:	0000b129 	.word	0x0000b129
    bcc0:	0000b0d9 	.word	0x0000b0d9

0000bcc4 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    bcc4:	b580      	push	{r7, lr}
    bcc6:	b084      	sub	sp, #16
    bcc8:	af00      	add	r7, sp, #0
    bcca:	6078      	str	r0, [r7, #4]
    bccc:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    bcce:	6838      	ldr	r0, [r7, #0]
    bcd0:	4b42      	ldr	r3, [pc, #264]	; (bddc <_i2c_m_sync_init_impl+0x118>)
    bcd2:	4798      	blx	r3
    bcd4:	4603      	mov	r3, r0
    bcd6:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    bcd8:	2101      	movs	r1, #1
    bcda:	6838      	ldr	r0, [r7, #0]
    bcdc:	4b40      	ldr	r3, [pc, #256]	; (bde0 <_i2c_m_sync_init_impl+0x11c>)
    bcde:	4798      	blx	r3
    bce0:	4603      	mov	r3, r0
    bce2:	f083 0301 	eor.w	r3, r3, #1
    bce6:	b2db      	uxtb	r3, r3
    bce8:	2b00      	cmp	r3, #0
    bcea:	d020      	beq.n	bd2e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    bcec:	7bfa      	ldrb	r2, [r7, #15]
    bcee:	493d      	ldr	r1, [pc, #244]	; (bde4 <_i2c_m_sync_init_impl+0x120>)
    bcf0:	4613      	mov	r3, r2
    bcf2:	005b      	lsls	r3, r3, #1
    bcf4:	4413      	add	r3, r2
    bcf6:	00db      	lsls	r3, r3, #3
    bcf8:	440b      	add	r3, r1
    bcfa:	3304      	adds	r3, #4
    bcfc:	681b      	ldr	r3, [r3, #0]
    bcfe:	f003 031c 	and.w	r3, r3, #28
    bd02:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    bd04:	2102      	movs	r1, #2
    bd06:	6838      	ldr	r0, [r7, #0]
    bd08:	4b37      	ldr	r3, [pc, #220]	; (bde8 <_i2c_m_sync_init_impl+0x124>)
    bd0a:	4798      	blx	r3
    bd0c:	4603      	mov	r3, r0
    bd0e:	2b00      	cmp	r3, #0
    bd10:	d006      	beq.n	bd20 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    bd12:	6838      	ldr	r0, [r7, #0]
    bd14:	4b35      	ldr	r3, [pc, #212]	; (bdec <_i2c_m_sync_init_impl+0x128>)
    bd16:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    bd18:	2102      	movs	r1, #2
    bd1a:	6838      	ldr	r0, [r7, #0]
    bd1c:	4b34      	ldr	r3, [pc, #208]	; (bdf0 <_i2c_m_sync_init_impl+0x12c>)
    bd1e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    bd20:	68bb      	ldr	r3, [r7, #8]
    bd22:	f043 0301 	orr.w	r3, r3, #1
    bd26:	4619      	mov	r1, r3
    bd28:	6838      	ldr	r0, [r7, #0]
    bd2a:	4b32      	ldr	r3, [pc, #200]	; (bdf4 <_i2c_m_sync_init_impl+0x130>)
    bd2c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    bd2e:	2101      	movs	r1, #1
    bd30:	6838      	ldr	r0, [r7, #0]
    bd32:	4b2f      	ldr	r3, [pc, #188]	; (bdf0 <_i2c_m_sync_init_impl+0x12c>)
    bd34:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    bd36:	7bfa      	ldrb	r2, [r7, #15]
    bd38:	492a      	ldr	r1, [pc, #168]	; (bde4 <_i2c_m_sync_init_impl+0x120>)
    bd3a:	4613      	mov	r3, r2
    bd3c:	005b      	lsls	r3, r3, #1
    bd3e:	4413      	add	r3, r2
    bd40:	00db      	lsls	r3, r3, #3
    bd42:	440b      	add	r3, r1
    bd44:	3304      	adds	r3, #4
    bd46:	681b      	ldr	r3, [r3, #0]
    bd48:	4619      	mov	r1, r3
    bd4a:	6838      	ldr	r0, [r7, #0]
    bd4c:	4b29      	ldr	r3, [pc, #164]	; (bdf4 <_i2c_m_sync_init_impl+0x130>)
    bd4e:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    bd50:	7bfa      	ldrb	r2, [r7, #15]
    bd52:	4924      	ldr	r1, [pc, #144]	; (bde4 <_i2c_m_sync_init_impl+0x120>)
    bd54:	4613      	mov	r3, r2
    bd56:	005b      	lsls	r3, r3, #1
    bd58:	4413      	add	r3, r2
    bd5a:	00db      	lsls	r3, r3, #3
    bd5c:	440b      	add	r3, r1
    bd5e:	3308      	adds	r3, #8
    bd60:	681b      	ldr	r3, [r3, #0]
    bd62:	4619      	mov	r1, r3
    bd64:	6838      	ldr	r0, [r7, #0]
    bd66:	4b24      	ldr	r3, [pc, #144]	; (bdf8 <_i2c_m_sync_init_impl+0x134>)
    bd68:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    bd6a:	7bfa      	ldrb	r2, [r7, #15]
    bd6c:	491d      	ldr	r1, [pc, #116]	; (bde4 <_i2c_m_sync_init_impl+0x120>)
    bd6e:	4613      	mov	r3, r2
    bd70:	005b      	lsls	r3, r3, #1
    bd72:	4413      	add	r3, r2
    bd74:	00db      	lsls	r3, r3, #3
    bd76:	440b      	add	r3, r1
    bd78:	330c      	adds	r3, #12
    bd7a:	681b      	ldr	r3, [r3, #0]
    bd7c:	4619      	mov	r1, r3
    bd7e:	6838      	ldr	r0, [r7, #0]
    bd80:	4b1e      	ldr	r3, [pc, #120]	; (bdfc <_i2c_m_sync_init_impl+0x138>)
    bd82:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    bd84:	7bfa      	ldrb	r2, [r7, #15]
    bd86:	4917      	ldr	r1, [pc, #92]	; (bde4 <_i2c_m_sync_init_impl+0x120>)
    bd88:	4613      	mov	r3, r2
    bd8a:	005b      	lsls	r3, r3, #1
    bd8c:	4413      	add	r3, r2
    bd8e:	00db      	lsls	r3, r3, #3
    bd90:	440b      	add	r3, r1
    bd92:	3304      	adds	r3, #4
    bd94:	681b      	ldr	r3, [r3, #0]
    bd96:	0e1b      	lsrs	r3, r3, #24
    bd98:	b29b      	uxth	r3, r3
    bd9a:	f003 0303 	and.w	r3, r3, #3
    bd9e:	b29a      	uxth	r2, r3
    bda0:	687b      	ldr	r3, [r7, #4]
    bda2:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    bda4:	687b      	ldr	r3, [r7, #4]
    bda6:	899b      	ldrh	r3, [r3, #12]
    bda8:	2b01      	cmp	r3, #1
    bdaa:	bf8c      	ite	hi
    bdac:	2301      	movhi	r3, #1
    bdae:	2300      	movls	r3, #0
    bdb0:	b2db      	uxtb	r3, r3
    bdb2:	4619      	mov	r1, r3
    bdb4:	6838      	ldr	r0, [r7, #0]
    bdb6:	4b12      	ldr	r3, [pc, #72]	; (be00 <_i2c_m_sync_init_impl+0x13c>)
    bdb8:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    bdba:	7bfa      	ldrb	r2, [r7, #15]
    bdbc:	4909      	ldr	r1, [pc, #36]	; (bde4 <_i2c_m_sync_init_impl+0x120>)
    bdbe:	4613      	mov	r3, r2
    bdc0:	005b      	lsls	r3, r3, #1
    bdc2:	4413      	add	r3, r2
    bdc4:	00db      	lsls	r3, r3, #3
    bdc6:	440b      	add	r3, r1
    bdc8:	3312      	adds	r3, #18
    bdca:	881a      	ldrh	r2, [r3, #0]
    bdcc:	687b      	ldr	r3, [r7, #4]
    bdce:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    bdd0:	2300      	movs	r3, #0
}
    bdd2:	4618      	mov	r0, r3
    bdd4:	3710      	adds	r7, #16
    bdd6:	46bd      	mov	sp, r7
    bdd8:	bd80      	pop	{r7, pc}
    bdda:	bf00      	nop
    bddc:	0000b201 	.word	0x0000b201
    bde0:	0000a9bd 	.word	0x0000a9bd
    bde4:	2000007c 	.word	0x2000007c
    bde8:	0000acfd 	.word	0x0000acfd
    bdec:	0000aca5 	.word	0x0000aca5
    bdf0:	0000a999 	.word	0x0000a999
    bdf4:	0000ad2d 	.word	0x0000ad2d
    bdf8:	0000aefd 	.word	0x0000aefd
    bdfc:	0000af45 	.word	0x0000af45
    be00:	0000af81 	.word	0x0000af81

0000be04 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    be04:	b580      	push	{r7, lr}
    be06:	b082      	sub	sp, #8
    be08:	af00      	add	r7, sp, #0
    be0a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    be0c:	2101      	movs	r1, #1
    be0e:	6878      	ldr	r0, [r7, #4]
    be10:	4b07      	ldr	r3, [pc, #28]	; (be30 <_spi_sync_enable+0x2c>)
    be12:	4798      	blx	r3
    be14:	4603      	mov	r3, r0
    be16:	2b00      	cmp	r3, #0
    be18:	d002      	beq.n	be20 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    be1a:	f06f 0303 	mvn.w	r3, #3
    be1e:	e003      	b.n	be28 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    be20:	6878      	ldr	r0, [r7, #4]
    be22:	4b04      	ldr	r3, [pc, #16]	; (be34 <_spi_sync_enable+0x30>)
    be24:	4798      	blx	r3

	return ERR_NONE;
    be26:	2300      	movs	r3, #0
}
    be28:	4618      	mov	r0, r3
    be2a:	3708      	adds	r7, #8
    be2c:	46bd      	mov	sp, r7
    be2e:	bd80      	pop	{r7, pc}
    be30:	0000aa09 	.word	0x0000aa09
    be34:	0000ad51 	.word	0x0000ad51

0000be38 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    be38:	b580      	push	{r7, lr}
    be3a:	b084      	sub	sp, #16
    be3c:	af00      	add	r7, sp, #0
    be3e:	6078      	str	r0, [r7, #4]
	_spi_sync_enable(hw);
    be40:	6878      	ldr	r0, [r7, #4]
    be42:	4b0e      	ldr	r3, [pc, #56]	; (be7c <_spi_async_enable+0x44>)
    be44:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    be46:	6878      	ldr	r0, [r7, #4]
    be48:	4b0d      	ldr	r3, [pc, #52]	; (be80 <_spi_async_enable+0x48>)
    be4a:	4798      	blx	r3
    be4c:	4603      	mov	r3, r0
    be4e:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < 4; i++) {
    be50:	2300      	movs	r3, #0
    be52:	60bb      	str	r3, [r7, #8]
    be54:	e009      	b.n	be6a <_spi_async_enable+0x32>
		NVIC_EnableIRQ((IRQn_Type)irq++);
    be56:	7bfb      	ldrb	r3, [r7, #15]
    be58:	1c5a      	adds	r2, r3, #1
    be5a:	73fa      	strb	r2, [r7, #15]
    be5c:	b21b      	sxth	r3, r3
    be5e:	4618      	mov	r0, r3
    be60:	4b08      	ldr	r3, [pc, #32]	; (be84 <_spi_async_enable+0x4c>)
    be62:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    be64:	68bb      	ldr	r3, [r7, #8]
    be66:	3301      	adds	r3, #1
    be68:	60bb      	str	r3, [r7, #8]
    be6a:	68bb      	ldr	r3, [r7, #8]
    be6c:	2b03      	cmp	r3, #3
    be6e:	d9f2      	bls.n	be56 <_spi_async_enable+0x1e>
	}

	return ERR_NONE;
    be70:	2300      	movs	r3, #0
}
    be72:	4618      	mov	r0, r3
    be74:	3710      	adds	r7, #16
    be76:	46bd      	mov	sp, r7
    be78:	bd80      	pop	{r7, pc}
    be7a:	bf00      	nop
    be7c:	0000be05 	.word	0x0000be05
    be80:	0000b5f9 	.word	0x0000b5f9
    be84:	0000a8dd 	.word	0x0000a8dd

0000be88 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    be88:	b580      	push	{r7, lr}
    be8a:	b082      	sub	sp, #8
    be8c:	af00      	add	r7, sp, #0
    be8e:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    be90:	2101      	movs	r1, #1
    be92:	6878      	ldr	r0, [r7, #4]
    be94:	4b07      	ldr	r3, [pc, #28]	; (beb4 <_spi_sync_disable+0x2c>)
    be96:	4798      	blx	r3
    be98:	4603      	mov	r3, r0
    be9a:	2b00      	cmp	r3, #0
    be9c:	d002      	beq.n	bea4 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    be9e:	f06f 0303 	mvn.w	r3, #3
    bea2:	e003      	b.n	beac <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    bea4:	6878      	ldr	r0, [r7, #4]
    bea6:	4b04      	ldr	r3, [pc, #16]	; (beb8 <_spi_sync_disable+0x30>)
    bea8:	4798      	blx	r3

	return ERR_NONE;
    beaa:	2300      	movs	r3, #0
}
    beac:	4618      	mov	r0, r3
    beae:	3708      	adds	r7, #8
    beb0:	46bd      	mov	sp, r7
    beb2:	bd80      	pop	{r7, pc}
    beb4:	0000aa09 	.word	0x0000aa09
    beb8:	0000adb1 	.word	0x0000adb1

0000bebc <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    bebc:	b580      	push	{r7, lr}
    bebe:	b082      	sub	sp, #8
    bec0:	af00      	add	r7, sp, #0
    bec2:	6078      	str	r0, [r7, #4]
    bec4:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    bec6:	687b      	ldr	r3, [r7, #4]
    bec8:	2b00      	cmp	r3, #0
    beca:	d004      	beq.n	bed6 <_spi_load_regs_master+0x1a>
    becc:	683b      	ldr	r3, [r7, #0]
    bece:	2b00      	cmp	r3, #0
    bed0:	d001      	beq.n	bed6 <_spi_load_regs_master+0x1a>
    bed2:	2301      	movs	r3, #1
    bed4:	e000      	b.n	bed8 <_spi_load_regs_master+0x1c>
    bed6:	2300      	movs	r3, #0
    bed8:	f003 0301 	and.w	r3, r3, #1
    bedc:	b2db      	uxtb	r3, r3
    bede:	f640 1245 	movw	r2, #2373	; 0x945
    bee2:	4915      	ldr	r1, [pc, #84]	; (bf38 <_spi_load_regs_master+0x7c>)
    bee4:	4618      	mov	r0, r3
    bee6:	4b15      	ldr	r3, [pc, #84]	; (bf3c <_spi_load_regs_master+0x80>)
    bee8:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    beea:	683b      	ldr	r3, [r7, #0]
    beec:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    beee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    bef2:	f023 0301 	bic.w	r3, r3, #1
    bef6:	4619      	mov	r1, r3
    bef8:	6878      	ldr	r0, [r7, #4]
    befa:	4b11      	ldr	r3, [pc, #68]	; (bf40 <_spi_load_regs_master+0x84>)
    befc:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    befe:	683b      	ldr	r3, [r7, #0]
    bf00:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    bf02:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    bf06:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    bf0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bf0e:	4619      	mov	r1, r3
    bf10:	6878      	ldr	r0, [r7, #4]
    bf12:	4b0c      	ldr	r3, [pc, #48]	; (bf44 <_spi_load_regs_master+0x88>)
    bf14:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    bf16:	683b      	ldr	r3, [r7, #0]
    bf18:	7b1b      	ldrb	r3, [r3, #12]
    bf1a:	4619      	mov	r1, r3
    bf1c:	6878      	ldr	r0, [r7, #4]
    bf1e:	4b0a      	ldr	r3, [pc, #40]	; (bf48 <_spi_load_regs_master+0x8c>)
    bf20:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    bf22:	683b      	ldr	r3, [r7, #0]
    bf24:	7b5b      	ldrb	r3, [r3, #13]
    bf26:	4619      	mov	r1, r3
    bf28:	6878      	ldr	r0, [r7, #4]
    bf2a:	4b08      	ldr	r3, [pc, #32]	; (bf4c <_spi_load_regs_master+0x90>)
    bf2c:	4798      	blx	r3
}
    bf2e:	bf00      	nop
    bf30:	3708      	adds	r7, #8
    bf32:	46bd      	mov	sp, r7
    bf34:	bd80      	pop	{r7, pc}
    bf36:	bf00      	nop
    bf38:	00020428 	.word	0x00020428
    bf3c:	00007d5d 	.word	0x00007d5d
    bf40:	0000ae09 	.word	0x0000ae09
    bf44:	0000af21 	.word	0x0000af21
    bf48:	0000af61 	.word	0x0000af61
    bf4c:	0000b099 	.word	0x0000b099

0000bf50 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    bf50:	b580      	push	{r7, lr}
    bf52:	b082      	sub	sp, #8
    bf54:	af00      	add	r7, sp, #0
    bf56:	6078      	str	r0, [r7, #4]
    bf58:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    bf5a:	687b      	ldr	r3, [r7, #4]
    bf5c:	2b00      	cmp	r3, #0
    bf5e:	d004      	beq.n	bf6a <_spi_load_regs_slave+0x1a>
    bf60:	683b      	ldr	r3, [r7, #0]
    bf62:	2b00      	cmp	r3, #0
    bf64:	d001      	beq.n	bf6a <_spi_load_regs_slave+0x1a>
    bf66:	2301      	movs	r3, #1
    bf68:	e000      	b.n	bf6c <_spi_load_regs_slave+0x1c>
    bf6a:	2300      	movs	r3, #0
    bf6c:	f003 0301 	and.w	r3, r3, #1
    bf70:	b2db      	uxtb	r3, r3
    bf72:	f640 1259 	movw	r2, #2393	; 0x959
    bf76:	491a      	ldr	r1, [pc, #104]	; (bfe0 <_spi_load_regs_slave+0x90>)
    bf78:	4618      	mov	r0, r3
    bf7a:	4b1a      	ldr	r3, [pc, #104]	; (bfe4 <_spi_load_regs_slave+0x94>)
    bf7c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    bf7e:	683b      	ldr	r3, [r7, #0]
    bf80:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    bf82:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    bf86:	f023 0301 	bic.w	r3, r3, #1
    bf8a:	4619      	mov	r1, r3
    bf8c:	6878      	ldr	r0, [r7, #4]
    bf8e:	4b16      	ldr	r3, [pc, #88]	; (bfe8 <_spi_load_regs_slave+0x98>)
    bf90:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    bf92:	683b      	ldr	r3, [r7, #0]
    bf94:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    bf96:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    bf9a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    bf9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bfa2:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    bfa6:	4619      	mov	r1, r3
    bfa8:	6878      	ldr	r0, [r7, #4]
    bfaa:	4b10      	ldr	r3, [pc, #64]	; (bfec <_spi_load_regs_slave+0x9c>)
    bfac:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    bfae:	683b      	ldr	r3, [r7, #0]
    bfb0:	689b      	ldr	r3, [r3, #8]
    bfb2:	4619      	mov	r1, r3
    bfb4:	6878      	ldr	r0, [r7, #4]
    bfb6:	4b0e      	ldr	r3, [pc, #56]	; (bff0 <_spi_load_regs_slave+0xa0>)
    bfb8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    bfba:	683b      	ldr	r3, [r7, #0]
    bfbc:	7b5b      	ldrb	r3, [r3, #13]
    bfbe:	4619      	mov	r1, r3
    bfc0:	6878      	ldr	r0, [r7, #4]
    bfc2:	4b0c      	ldr	r3, [pc, #48]	; (bff4 <_spi_load_regs_slave+0xa4>)
    bfc4:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    bfc6:	bf00      	nop
    bfc8:	f04f 31ff 	mov.w	r1, #4294967295
    bfcc:	6878      	ldr	r0, [r7, #4]
    bfce:	4b0a      	ldr	r3, [pc, #40]	; (bff8 <_spi_load_regs_slave+0xa8>)
    bfd0:	4798      	blx	r3
    bfd2:	4603      	mov	r3, r0
    bfd4:	2b00      	cmp	r3, #0
    bfd6:	d1f7      	bne.n	bfc8 <_spi_load_regs_slave+0x78>
		;
}
    bfd8:	bf00      	nop
    bfda:	3708      	adds	r7, #8
    bfdc:	46bd      	mov	sp, r7
    bfde:	bd80      	pop	{r7, pc}
    bfe0:	00020428 	.word	0x00020428
    bfe4:	00007d5d 	.word	0x00007d5d
    bfe8:	0000ae09 	.word	0x0000ae09
    bfec:	0000af21 	.word	0x0000af21
    bff0:	0000b005 	.word	0x0000b005
    bff4:	0000b099 	.word	0x0000b099
    bff8:	0000aa09 	.word	0x0000aa09

0000bffc <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    bffc:	b580      	push	{r7, lr}
    bffe:	b084      	sub	sp, #16
    c000:	af00      	add	r7, sp, #0
    c002:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    c004:	687b      	ldr	r3, [r7, #4]
    c006:	4618      	mov	r0, r3
    c008:	4b11      	ldr	r3, [pc, #68]	; (c050 <_spi_get_regs+0x54>)
    c00a:	4798      	blx	r3
    c00c:	4603      	mov	r3, r0
    c00e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    c010:	2300      	movs	r3, #0
    c012:	73fb      	strb	r3, [r7, #15]
    c014:	e014      	b.n	c040 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    c016:	7bfa      	ldrb	r2, [r7, #15]
    c018:	490e      	ldr	r1, [pc, #56]	; (c054 <_spi_get_regs+0x58>)
    c01a:	4613      	mov	r3, r2
    c01c:	011b      	lsls	r3, r3, #4
    c01e:	4413      	add	r3, r2
    c020:	440b      	add	r3, r1
    c022:	3310      	adds	r3, #16
    c024:	781b      	ldrb	r3, [r3, #0]
    c026:	7bba      	ldrb	r2, [r7, #14]
    c028:	429a      	cmp	r2, r3
    c02a:	d106      	bne.n	c03a <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    c02c:	7bfa      	ldrb	r2, [r7, #15]
    c02e:	4613      	mov	r3, r2
    c030:	011b      	lsls	r3, r3, #4
    c032:	4413      	add	r3, r2
    c034:	4a07      	ldr	r2, [pc, #28]	; (c054 <_spi_get_regs+0x58>)
    c036:	4413      	add	r3, r2
    c038:	e006      	b.n	c048 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    c03a:	7bfb      	ldrb	r3, [r7, #15]
    c03c:	3301      	adds	r3, #1
    c03e:	73fb      	strb	r3, [r7, #15]
    c040:	7bfb      	ldrb	r3, [r7, #15]
    c042:	2b02      	cmp	r3, #2
    c044:	d9e7      	bls.n	c016 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    c046:	2300      	movs	r3, #0
}
    c048:	4618      	mov	r0, r3
    c04a:	3710      	adds	r7, #16
    c04c:	46bd      	mov	sp, r7
    c04e:	bd80      	pop	{r7, pc}
    c050:	0000b151 	.word	0x0000b151
    c054:	00020464 	.word	0x00020464

0000c058 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    c058:	b580      	push	{r7, lr}
    c05a:	b084      	sub	sp, #16
    c05c:	af00      	add	r7, sp, #0
    c05e:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    c060:	687b      	ldr	r3, [r7, #4]
    c062:	681b      	ldr	r3, [r3, #0]
    c064:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    c066:	68f8      	ldr	r0, [r7, #12]
    c068:	4b21      	ldr	r3, [pc, #132]	; (c0f0 <_spi_handler+0x98>)
    c06a:	4798      	blx	r3
    c06c:	4603      	mov	r3, r0
    c06e:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    c070:	68f8      	ldr	r0, [r7, #12]
    c072:	4b20      	ldr	r3, [pc, #128]	; (c0f4 <_spi_handler+0x9c>)
    c074:	4798      	blx	r3
    c076:	4603      	mov	r3, r0
    c078:	461a      	mov	r2, r3
    c07a:	7afb      	ldrb	r3, [r7, #11]
    c07c:	4013      	ands	r3, r2
    c07e:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    c080:	7afb      	ldrb	r3, [r7, #11]
    c082:	f003 0301 	and.w	r3, r3, #1
    c086:	2b00      	cmp	r3, #0
    c088:	d004      	beq.n	c094 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    c08a:	687b      	ldr	r3, [r7, #4]
    c08c:	689b      	ldr	r3, [r3, #8]
    c08e:	6878      	ldr	r0, [r7, #4]
    c090:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    c092:	e029      	b.n	c0e8 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    c094:	7afb      	ldrb	r3, [r7, #11]
    c096:	f003 0304 	and.w	r3, r3, #4
    c09a:	2b00      	cmp	r3, #0
    c09c:	d004      	beq.n	c0a8 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    c09e:	687b      	ldr	r3, [r7, #4]
    c0a0:	68db      	ldr	r3, [r3, #12]
    c0a2:	6878      	ldr	r0, [r7, #4]
    c0a4:	4798      	blx	r3
}
    c0a6:	e01f      	b.n	c0e8 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    c0a8:	7afb      	ldrb	r3, [r7, #11]
    c0aa:	f003 0302 	and.w	r3, r3, #2
    c0ae:	2b00      	cmp	r3, #0
    c0b0:	d008      	beq.n	c0c4 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    c0b2:	2102      	movs	r1, #2
    c0b4:	68f8      	ldr	r0, [r7, #12]
    c0b6:	4b10      	ldr	r3, [pc, #64]	; (c0f8 <_spi_handler+0xa0>)
    c0b8:	4798      	blx	r3
		dev->callbacks.complete(dev);
    c0ba:	687b      	ldr	r3, [r7, #4]
    c0bc:	691b      	ldr	r3, [r3, #16]
    c0be:	6878      	ldr	r0, [r7, #4]
    c0c0:	4798      	blx	r3
}
    c0c2:	e011      	b.n	c0e8 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    c0c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
    c0c8:	2b00      	cmp	r3, #0
    c0ca:	da0d      	bge.n	c0e8 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    c0cc:	2104      	movs	r1, #4
    c0ce:	68f8      	ldr	r0, [r7, #12]
    c0d0:	4b0a      	ldr	r3, [pc, #40]	; (c0fc <_spi_handler+0xa4>)
    c0d2:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    c0d4:	2180      	movs	r1, #128	; 0x80
    c0d6:	68f8      	ldr	r0, [r7, #12]
    c0d8:	4b07      	ldr	r3, [pc, #28]	; (c0f8 <_spi_handler+0xa0>)
    c0da:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    c0dc:	687b      	ldr	r3, [r7, #4]
    c0de:	695b      	ldr	r3, [r3, #20]
    c0e0:	f06f 0112 	mvn.w	r1, #18
    c0e4:	6878      	ldr	r0, [r7, #4]
    c0e6:	4798      	blx	r3
}
    c0e8:	bf00      	nop
    c0ea:	3710      	adds	r7, #16
    c0ec:	46bd      	mov	sp, r7
    c0ee:	bd80      	pop	{r7, pc}
    c0f0:	0000aac5 	.word	0x0000aac5
    c0f4:	0000ac61 	.word	0x0000ac61
    c0f8:	0000aadf 	.word	0x0000aadf
    c0fc:	0000b0b9 	.word	0x0000b0b9

0000c100 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    c100:	b580      	push	{r7, lr}
    c102:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    c104:	4b03      	ldr	r3, [pc, #12]	; (c114 <SERCOM4_0_Handler+0x14>)
    c106:	681b      	ldr	r3, [r3, #0]
    c108:	4618      	mov	r0, r3
    c10a:	4b03      	ldr	r3, [pc, #12]	; (c118 <SERCOM4_0_Handler+0x18>)
    c10c:	4798      	blx	r3
}
    c10e:	bf00      	nop
    c110:	bd80      	pop	{r7, pc}
    c112:	bf00      	nop
    c114:	20008aac 	.word	0x20008aac
    c118:	0000c059 	.word	0x0000c059

0000c11c <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    c11c:	b580      	push	{r7, lr}
    c11e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    c120:	4b03      	ldr	r3, [pc, #12]	; (c130 <SERCOM4_1_Handler+0x14>)
    c122:	681b      	ldr	r3, [r3, #0]
    c124:	4618      	mov	r0, r3
    c126:	4b03      	ldr	r3, [pc, #12]	; (c134 <SERCOM4_1_Handler+0x18>)
    c128:	4798      	blx	r3
}
    c12a:	bf00      	nop
    c12c:	bd80      	pop	{r7, pc}
    c12e:	bf00      	nop
    c130:	20008aac 	.word	0x20008aac
    c134:	0000c059 	.word	0x0000c059

0000c138 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    c138:	b580      	push	{r7, lr}
    c13a:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    c13c:	4b03      	ldr	r3, [pc, #12]	; (c14c <SERCOM4_2_Handler+0x14>)
    c13e:	681b      	ldr	r3, [r3, #0]
    c140:	4618      	mov	r0, r3
    c142:	4b03      	ldr	r3, [pc, #12]	; (c150 <SERCOM4_2_Handler+0x18>)
    c144:	4798      	blx	r3
}
    c146:	bf00      	nop
    c148:	bd80      	pop	{r7, pc}
    c14a:	bf00      	nop
    c14c:	20008aac 	.word	0x20008aac
    c150:	0000c059 	.word	0x0000c059

0000c154 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    c154:	b580      	push	{r7, lr}
    c156:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    c158:	4b03      	ldr	r3, [pc, #12]	; (c168 <SERCOM4_3_Handler+0x14>)
    c15a:	681b      	ldr	r3, [r3, #0]
    c15c:	4618      	mov	r0, r3
    c15e:	4b03      	ldr	r3, [pc, #12]	; (c16c <SERCOM4_3_Handler+0x18>)
    c160:	4798      	blx	r3
}
    c162:	bf00      	nop
    c164:	bd80      	pop	{r7, pc}
    c166:	bf00      	nop
    c168:	20008aac 	.word	0x20008aac
    c16c:	0000c059 	.word	0x0000c059

0000c170 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    c170:	b580      	push	{r7, lr}
    c172:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    c174:	4b03      	ldr	r3, [pc, #12]	; (c184 <SERCOM5_0_Handler+0x14>)
    c176:	681b      	ldr	r3, [r3, #0]
    c178:	4618      	mov	r0, r3
    c17a:	4b03      	ldr	r3, [pc, #12]	; (c188 <SERCOM5_0_Handler+0x18>)
    c17c:	4798      	blx	r3
}
    c17e:	bf00      	nop
    c180:	bd80      	pop	{r7, pc}
    c182:	bf00      	nop
    c184:	20008ab0 	.word	0x20008ab0
    c188:	0000b4b5 	.word	0x0000b4b5

0000c18c <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    c18c:	b580      	push	{r7, lr}
    c18e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    c190:	4b03      	ldr	r3, [pc, #12]	; (c1a0 <SERCOM5_1_Handler+0x14>)
    c192:	681b      	ldr	r3, [r3, #0]
    c194:	4618      	mov	r0, r3
    c196:	4b03      	ldr	r3, [pc, #12]	; (c1a4 <SERCOM5_1_Handler+0x18>)
    c198:	4798      	blx	r3
}
    c19a:	bf00      	nop
    c19c:	bd80      	pop	{r7, pc}
    c19e:	bf00      	nop
    c1a0:	20008ab0 	.word	0x20008ab0
    c1a4:	0000b4b5 	.word	0x0000b4b5

0000c1a8 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    c1a8:	b580      	push	{r7, lr}
    c1aa:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    c1ac:	4b03      	ldr	r3, [pc, #12]	; (c1bc <SERCOM5_2_Handler+0x14>)
    c1ae:	681b      	ldr	r3, [r3, #0]
    c1b0:	4618      	mov	r0, r3
    c1b2:	4b03      	ldr	r3, [pc, #12]	; (c1c0 <SERCOM5_2_Handler+0x18>)
    c1b4:	4798      	blx	r3
}
    c1b6:	bf00      	nop
    c1b8:	bd80      	pop	{r7, pc}
    c1ba:	bf00      	nop
    c1bc:	20008ab0 	.word	0x20008ab0
    c1c0:	0000b4b5 	.word	0x0000b4b5

0000c1c4 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    c1c4:	b580      	push	{r7, lr}
    c1c6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    c1c8:	4b03      	ldr	r3, [pc, #12]	; (c1d8 <SERCOM5_3_Handler+0x14>)
    c1ca:	681b      	ldr	r3, [r3, #0]
    c1cc:	4618      	mov	r0, r3
    c1ce:	4b03      	ldr	r3, [pc, #12]	; (c1dc <SERCOM5_3_Handler+0x18>)
    c1d0:	4798      	blx	r3
}
    c1d2:	bf00      	nop
    c1d4:	bd80      	pop	{r7, pc}
    c1d6:	bf00      	nop
    c1d8:	20008ab0 	.word	0x20008ab0
    c1dc:	0000b4b5 	.word	0x0000b4b5

0000c1e0 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    c1e0:	b580      	push	{r7, lr}
    c1e2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c1e4:	4b03      	ldr	r3, [pc, #12]	; (c1f4 <SERCOM7_0_Handler+0x14>)
    c1e6:	681b      	ldr	r3, [r3, #0]
    c1e8:	4618      	mov	r0, r3
    c1ea:	4b03      	ldr	r3, [pc, #12]	; (c1f8 <SERCOM7_0_Handler+0x18>)
    c1ec:	4798      	blx	r3
}
    c1ee:	bf00      	nop
    c1f0:	bd80      	pop	{r7, pc}
    c1f2:	bf00      	nop
    c1f4:	20008ab4 	.word	0x20008ab4
    c1f8:	0000b4b5 	.word	0x0000b4b5

0000c1fc <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    c1fc:	b580      	push	{r7, lr}
    c1fe:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c200:	4b03      	ldr	r3, [pc, #12]	; (c210 <SERCOM7_1_Handler+0x14>)
    c202:	681b      	ldr	r3, [r3, #0]
    c204:	4618      	mov	r0, r3
    c206:	4b03      	ldr	r3, [pc, #12]	; (c214 <SERCOM7_1_Handler+0x18>)
    c208:	4798      	blx	r3
}
    c20a:	bf00      	nop
    c20c:	bd80      	pop	{r7, pc}
    c20e:	bf00      	nop
    c210:	20008ab4 	.word	0x20008ab4
    c214:	0000b4b5 	.word	0x0000b4b5

0000c218 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    c218:	b580      	push	{r7, lr}
    c21a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c21c:	4b03      	ldr	r3, [pc, #12]	; (c22c <SERCOM7_2_Handler+0x14>)
    c21e:	681b      	ldr	r3, [r3, #0]
    c220:	4618      	mov	r0, r3
    c222:	4b03      	ldr	r3, [pc, #12]	; (c230 <SERCOM7_2_Handler+0x18>)
    c224:	4798      	blx	r3
}
    c226:	bf00      	nop
    c228:	bd80      	pop	{r7, pc}
    c22a:	bf00      	nop
    c22c:	20008ab4 	.word	0x20008ab4
    c230:	0000b4b5 	.word	0x0000b4b5

0000c234 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    c234:	b580      	push	{r7, lr}
    c236:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c238:	4b03      	ldr	r3, [pc, #12]	; (c248 <SERCOM7_3_Handler+0x14>)
    c23a:	681b      	ldr	r3, [r3, #0]
    c23c:	4618      	mov	r0, r3
    c23e:	4b03      	ldr	r3, [pc, #12]	; (c24c <SERCOM7_3_Handler+0x18>)
    c240:	4798      	blx	r3
}
    c242:	bf00      	nop
    c244:	bd80      	pop	{r7, pc}
    c246:	bf00      	nop
    c248:	20008ab4 	.word	0x20008ab4
    c24c:	0000b4b5 	.word	0x0000b4b5

0000c250 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    c250:	b580      	push	{r7, lr}
    c252:	b084      	sub	sp, #16
    c254:	af00      	add	r7, sp, #0
    c256:	6078      	str	r0, [r7, #4]
    c258:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    c25a:	683b      	ldr	r3, [r7, #0]
    c25c:	4618      	mov	r0, r3
    c25e:	4b35      	ldr	r3, [pc, #212]	; (c334 <_spi_m_sync_init+0xe4>)
    c260:	4798      	blx	r3
    c262:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    c264:	687b      	ldr	r3, [r7, #4]
    c266:	2b00      	cmp	r3, #0
    c268:	d004      	beq.n	c274 <_spi_m_sync_init+0x24>
    c26a:	683b      	ldr	r3, [r7, #0]
    c26c:	2b00      	cmp	r3, #0
    c26e:	d001      	beq.n	c274 <_spi_m_sync_init+0x24>
    c270:	2301      	movs	r3, #1
    c272:	e000      	b.n	c276 <_spi_m_sync_init+0x26>
    c274:	2300      	movs	r3, #0
    c276:	f003 0301 	and.w	r3, r3, #1
    c27a:	b2db      	uxtb	r3, r3
    c27c:	f640 12ec 	movw	r2, #2540	; 0x9ec
    c280:	492d      	ldr	r1, [pc, #180]	; (c338 <_spi_m_sync_init+0xe8>)
    c282:	4618      	mov	r0, r3
    c284:	4b2d      	ldr	r3, [pc, #180]	; (c33c <_spi_m_sync_init+0xec>)
    c286:	4798      	blx	r3

	if (regs == NULL) {
    c288:	68fb      	ldr	r3, [r7, #12]
    c28a:	2b00      	cmp	r3, #0
    c28c:	d102      	bne.n	c294 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    c28e:	f06f 030c 	mvn.w	r3, #12
    c292:	e04a      	b.n	c32a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    c294:	2101      	movs	r1, #1
    c296:	6838      	ldr	r0, [r7, #0]
    c298:	4b29      	ldr	r3, [pc, #164]	; (c340 <_spi_m_sync_init+0xf0>)
    c29a:	4798      	blx	r3
    c29c:	4603      	mov	r3, r0
    c29e:	f083 0301 	eor.w	r3, r3, #1
    c2a2:	b2db      	uxtb	r3, r3
    c2a4:	2b00      	cmp	r3, #0
    c2a6:	d019      	beq.n	c2dc <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    c2a8:	68fb      	ldr	r3, [r7, #12]
    c2aa:	681b      	ldr	r3, [r3, #0]
    c2ac:	f003 031c 	and.w	r3, r3, #28
    c2b0:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    c2b2:	2102      	movs	r1, #2
    c2b4:	6838      	ldr	r0, [r7, #0]
    c2b6:	4b23      	ldr	r3, [pc, #140]	; (c344 <_spi_m_sync_init+0xf4>)
    c2b8:	4798      	blx	r3
    c2ba:	4603      	mov	r3, r0
    c2bc:	2b00      	cmp	r3, #0
    c2be:	d006      	beq.n	c2ce <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    c2c0:	6838      	ldr	r0, [r7, #0]
    c2c2:	4b21      	ldr	r3, [pc, #132]	; (c348 <_spi_m_sync_init+0xf8>)
    c2c4:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    c2c6:	2102      	movs	r1, #2
    c2c8:	6838      	ldr	r0, [r7, #0]
    c2ca:	4b20      	ldr	r3, [pc, #128]	; (c34c <_spi_m_sync_init+0xfc>)
    c2cc:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    c2ce:	68bb      	ldr	r3, [r7, #8]
    c2d0:	f043 0301 	orr.w	r3, r3, #1
    c2d4:	4619      	mov	r1, r3
    c2d6:	6838      	ldr	r0, [r7, #0]
    c2d8:	4b1d      	ldr	r3, [pc, #116]	; (c350 <_spi_m_sync_init+0x100>)
    c2da:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    c2dc:	2101      	movs	r1, #1
    c2de:	6838      	ldr	r0, [r7, #0]
    c2e0:	4b1a      	ldr	r3, [pc, #104]	; (c34c <_spi_m_sync_init+0xfc>)
    c2e2:	4798      	blx	r3

	dev->prvt = hw;
    c2e4:	687b      	ldr	r3, [r7, #4]
    c2e6:	683a      	ldr	r2, [r7, #0]
    c2e8:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    c2ea:	68fb      	ldr	r3, [r7, #12]
    c2ec:	681b      	ldr	r3, [r3, #0]
    c2ee:	f003 031c 	and.w	r3, r3, #28
    c2f2:	2b08      	cmp	r3, #8
    c2f4:	d104      	bne.n	c300 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    c2f6:	68f9      	ldr	r1, [r7, #12]
    c2f8:	6838      	ldr	r0, [r7, #0]
    c2fa:	4b16      	ldr	r3, [pc, #88]	; (c354 <_spi_m_sync_init+0x104>)
    c2fc:	4798      	blx	r3
    c2fe:	e003      	b.n	c308 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    c300:	68f9      	ldr	r1, [r7, #12]
    c302:	6838      	ldr	r0, [r7, #0]
    c304:	4b14      	ldr	r3, [pc, #80]	; (c358 <_spi_m_sync_init+0x108>)
    c306:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    c308:	68fb      	ldr	r3, [r7, #12]
    c30a:	685b      	ldr	r3, [r3, #4]
    c30c:	f003 0307 	and.w	r3, r3, #7
    c310:	2b00      	cmp	r3, #0
    c312:	d101      	bne.n	c318 <_spi_m_sync_init+0xc8>
    c314:	2201      	movs	r2, #1
    c316:	e000      	b.n	c31a <_spi_m_sync_init+0xca>
    c318:	2202      	movs	r2, #2
    c31a:	687b      	ldr	r3, [r7, #4]
    c31c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    c31e:	68fb      	ldr	r3, [r7, #12]
    c320:	89db      	ldrh	r3, [r3, #14]
    c322:	b29a      	uxth	r2, r3
    c324:	687b      	ldr	r3, [r7, #4]
    c326:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    c328:	2300      	movs	r3, #0
}
    c32a:	4618      	mov	r0, r3
    c32c:	3710      	adds	r7, #16
    c32e:	46bd      	mov	sp, r7
    c330:	bd80      	pop	{r7, pc}
    c332:	bf00      	nop
    c334:	0000bffd 	.word	0x0000bffd
    c338:	00020428 	.word	0x00020428
    c33c:	00007d5d 	.word	0x00007d5d
    c340:	0000aa09 	.word	0x0000aa09
    c344:	0000add9 	.word	0x0000add9
    c348:	0000adb1 	.word	0x0000adb1
    c34c:	0000a9e5 	.word	0x0000a9e5
    c350:	0000ae09 	.word	0x0000ae09
    c354:	0000bf51 	.word	0x0000bf51
    c358:	0000bebd 	.word	0x0000bebd

0000c35c <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    c35c:	b580      	push	{r7, lr}
    c35e:	b086      	sub	sp, #24
    c360:	af00      	add	r7, sp, #0
    c362:	6078      	str	r0, [r7, #4]
    c364:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    c366:	687b      	ldr	r3, [r7, #4]
    c368:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    c36a:	6839      	ldr	r1, [r7, #0]
    c36c:	6878      	ldr	r0, [r7, #4]
    c36e:	4b1a      	ldr	r3, [pc, #104]	; (c3d8 <_spi_m_async_init+0x7c>)
    c370:	4798      	blx	r3
    c372:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    c374:	68bb      	ldr	r3, [r7, #8]
    c376:	2b00      	cmp	r3, #0
    c378:	da01      	bge.n	c37e <_spi_m_async_init+0x22>
		return rc;
    c37a:	68bb      	ldr	r3, [r7, #8]
    c37c:	e028      	b.n	c3d0 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    c37e:	6879      	ldr	r1, [r7, #4]
    c380:	6838      	ldr	r0, [r7, #0]
    c382:	4b16      	ldr	r3, [pc, #88]	; (c3dc <_spi_m_async_init+0x80>)
    c384:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    c386:	68fb      	ldr	r3, [r7, #12]
    c388:	2200      	movs	r2, #0
    c38a:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    c38c:	68fb      	ldr	r3, [r7, #12]
    c38e:	2200      	movs	r2, #0
    c390:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    c392:	68fb      	ldr	r3, [r7, #12]
    c394:	2200      	movs	r2, #0
    c396:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    c398:	6838      	ldr	r0, [r7, #0]
    c39a:	4b11      	ldr	r3, [pc, #68]	; (c3e0 <_spi_m_async_init+0x84>)
    c39c:	4798      	blx	r3
    c39e:	4603      	mov	r3, r0
    c3a0:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    c3a2:	2300      	movs	r3, #0
    c3a4:	613b      	str	r3, [r7, #16]
    c3a6:	e00f      	b.n	c3c8 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    c3a8:	7dfb      	ldrb	r3, [r7, #23]
    c3aa:	b21b      	sxth	r3, r3
    c3ac:	4618      	mov	r0, r3
    c3ae:	4b0d      	ldr	r3, [pc, #52]	; (c3e4 <_spi_m_async_init+0x88>)
    c3b0:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    c3b2:	7dfb      	ldrb	r3, [r7, #23]
    c3b4:	b21b      	sxth	r3, r3
    c3b6:	4618      	mov	r0, r3
    c3b8:	4b0b      	ldr	r3, [pc, #44]	; (c3e8 <_spi_m_async_init+0x8c>)
    c3ba:	4798      	blx	r3
		irq++;
    c3bc:	7dfb      	ldrb	r3, [r7, #23]
    c3be:	3301      	adds	r3, #1
    c3c0:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    c3c2:	693b      	ldr	r3, [r7, #16]
    c3c4:	3301      	adds	r3, #1
    c3c6:	613b      	str	r3, [r7, #16]
    c3c8:	693b      	ldr	r3, [r7, #16]
    c3ca:	2b03      	cmp	r3, #3
    c3cc:	d9ec      	bls.n	c3a8 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    c3ce:	2300      	movs	r3, #0
}
    c3d0:	4618      	mov	r0, r3
    c3d2:	3718      	adds	r7, #24
    c3d4:	46bd      	mov	sp, r7
    c3d6:	bd80      	pop	{r7, pc}
    c3d8:	0000c251 	.word	0x0000c251
    c3dc:	0000b1ad 	.word	0x0000b1ad
    c3e0:	0000b5f9 	.word	0x0000b5f9
    c3e4:	0000a919 	.word	0x0000a919
    c3e8:	0000a95d 	.word	0x0000a95d

0000c3ec <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    c3ec:	b580      	push	{r7, lr}
    c3ee:	b082      	sub	sp, #8
    c3f0:	af00      	add	r7, sp, #0
    c3f2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    c3f4:	687b      	ldr	r3, [r7, #4]
    c3f6:	2b00      	cmp	r3, #0
    c3f8:	d005      	beq.n	c406 <_spi_m_sync_enable+0x1a>
    c3fa:	687b      	ldr	r3, [r7, #4]
    c3fc:	681b      	ldr	r3, [r3, #0]
    c3fe:	2b00      	cmp	r3, #0
    c400:	d001      	beq.n	c406 <_spi_m_sync_enable+0x1a>
    c402:	2301      	movs	r3, #1
    c404:	e000      	b.n	c408 <_spi_m_sync_enable+0x1c>
    c406:	2300      	movs	r3, #0
    c408:	f003 0301 	and.w	r3, r3, #1
    c40c:	b2db      	uxtb	r3, r3
    c40e:	f640 224b 	movw	r2, #2635	; 0xa4b
    c412:	4907      	ldr	r1, [pc, #28]	; (c430 <_spi_m_sync_enable+0x44>)
    c414:	4618      	mov	r0, r3
    c416:	4b07      	ldr	r3, [pc, #28]	; (c434 <_spi_m_sync_enable+0x48>)
    c418:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    c41a:	687b      	ldr	r3, [r7, #4]
    c41c:	681b      	ldr	r3, [r3, #0]
    c41e:	4618      	mov	r0, r3
    c420:	4b05      	ldr	r3, [pc, #20]	; (c438 <_spi_m_sync_enable+0x4c>)
    c422:	4798      	blx	r3
    c424:	4603      	mov	r3, r0
}
    c426:	4618      	mov	r0, r3
    c428:	3708      	adds	r7, #8
    c42a:	46bd      	mov	sp, r7
    c42c:	bd80      	pop	{r7, pc}
    c42e:	bf00      	nop
    c430:	00020428 	.word	0x00020428
    c434:	00007d5d 	.word	0x00007d5d
    c438:	0000be05 	.word	0x0000be05

0000c43c <_spi_m_async_enable>:

	return _spi_sync_enable(dev->prvt);
}

int32_t _spi_m_async_enable(struct _spi_async_dev *dev)
{
    c43c:	b580      	push	{r7, lr}
    c43e:	b082      	sub	sp, #8
    c440:	af00      	add	r7, sp, #0
    c442:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    c444:	687b      	ldr	r3, [r7, #4]
    c446:	2b00      	cmp	r3, #0
    c448:	d005      	beq.n	c456 <_spi_m_async_enable+0x1a>
    c44a:	687b      	ldr	r3, [r7, #4]
    c44c:	681b      	ldr	r3, [r3, #0]
    c44e:	2b00      	cmp	r3, #0
    c450:	d001      	beq.n	c456 <_spi_m_async_enable+0x1a>
    c452:	2301      	movs	r3, #1
    c454:	e000      	b.n	c458 <_spi_m_async_enable+0x1c>
    c456:	2300      	movs	r3, #0
    c458:	f003 0301 	and.w	r3, r3, #1
    c45c:	b2db      	uxtb	r3, r3
    c45e:	f640 2259 	movw	r2, #2649	; 0xa59
    c462:	4907      	ldr	r1, [pc, #28]	; (c480 <_spi_m_async_enable+0x44>)
    c464:	4618      	mov	r0, r3
    c466:	4b07      	ldr	r3, [pc, #28]	; (c484 <_spi_m_async_enable+0x48>)
    c468:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
    c46a:	687b      	ldr	r3, [r7, #4]
    c46c:	681b      	ldr	r3, [r3, #0]
    c46e:	4618      	mov	r0, r3
    c470:	4b05      	ldr	r3, [pc, #20]	; (c488 <_spi_m_async_enable+0x4c>)
    c472:	4798      	blx	r3
    c474:	4603      	mov	r3, r0
}
    c476:	4618      	mov	r0, r3
    c478:	3708      	adds	r7, #8
    c47a:	46bd      	mov	sp, r7
    c47c:	bd80      	pop	{r7, pc}
    c47e:	bf00      	nop
    c480:	00020428 	.word	0x00020428
    c484:	00007d5d 	.word	0x00007d5d
    c488:	0000be39 	.word	0x0000be39

0000c48c <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    c48c:	b580      	push	{r7, lr}
    c48e:	b082      	sub	sp, #8
    c490:	af00      	add	r7, sp, #0
    c492:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    c494:	687b      	ldr	r3, [r7, #4]
    c496:	2b00      	cmp	r3, #0
    c498:	d005      	beq.n	c4a6 <_spi_m_sync_disable+0x1a>
    c49a:	687b      	ldr	r3, [r7, #4]
    c49c:	681b      	ldr	r3, [r3, #0]
    c49e:	2b00      	cmp	r3, #0
    c4a0:	d001      	beq.n	c4a6 <_spi_m_sync_disable+0x1a>
    c4a2:	2301      	movs	r3, #1
    c4a4:	e000      	b.n	c4a8 <_spi_m_sync_disable+0x1c>
    c4a6:	2300      	movs	r3, #0
    c4a8:	f003 0301 	and.w	r3, r3, #1
    c4ac:	b2db      	uxtb	r3, r3
    c4ae:	f640 2267 	movw	r2, #2663	; 0xa67
    c4b2:	4907      	ldr	r1, [pc, #28]	; (c4d0 <_spi_m_sync_disable+0x44>)
    c4b4:	4618      	mov	r0, r3
    c4b6:	4b07      	ldr	r3, [pc, #28]	; (c4d4 <_spi_m_sync_disable+0x48>)
    c4b8:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    c4ba:	687b      	ldr	r3, [r7, #4]
    c4bc:	681b      	ldr	r3, [r3, #0]
    c4be:	4618      	mov	r0, r3
    c4c0:	4b05      	ldr	r3, [pc, #20]	; (c4d8 <_spi_m_sync_disable+0x4c>)
    c4c2:	4798      	blx	r3
    c4c4:	4603      	mov	r3, r0
}
    c4c6:	4618      	mov	r0, r3
    c4c8:	3708      	adds	r7, #8
    c4ca:	46bd      	mov	sp, r7
    c4cc:	bd80      	pop	{r7, pc}
    c4ce:	bf00      	nop
    c4d0:	00020428 	.word	0x00020428
    c4d4:	00007d5d 	.word	0x00007d5d
    c4d8:	0000be89 	.word	0x0000be89

0000c4dc <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    c4dc:	b580      	push	{r7, lr}
    c4de:	b082      	sub	sp, #8
    c4e0:	af00      	add	r7, sp, #0
    c4e2:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    c4e4:	bf00      	nop
    c4e6:	2103      	movs	r1, #3
    c4e8:	6878      	ldr	r0, [r7, #4]
    c4ea:	4b06      	ldr	r3, [pc, #24]	; (c504 <_spi_wait_bus_idle+0x28>)
    c4ec:	4798      	blx	r3
    c4ee:	4603      	mov	r3, r0
    c4f0:	2b00      	cmp	r3, #0
    c4f2:	d0f8      	beq.n	c4e6 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    c4f4:	2103      	movs	r1, #3
    c4f6:	6878      	ldr	r0, [r7, #4]
    c4f8:	4b03      	ldr	r3, [pc, #12]	; (c508 <_spi_wait_bus_idle+0x2c>)
    c4fa:	4798      	blx	r3
}
    c4fc:	bf00      	nop
    c4fe:	3708      	adds	r7, #8
    c500:	46bd      	mov	sp, r7
    c502:	bd80      	pop	{r7, pc}
    c504:	0000aa9d 	.word	0x0000aa9d
    c508:	0000aadf 	.word	0x0000aadf

0000c50c <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    c50c:	b580      	push	{r7, lr}
    c50e:	b086      	sub	sp, #24
    c510:	af00      	add	r7, sp, #0
    c512:	60f8      	str	r0, [r7, #12]
    c514:	60b9      	str	r1, [r7, #8]
    c516:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    c518:	68bb      	ldr	r3, [r7, #8]
    c51a:	f003 0304 	and.w	r3, r3, #4
    c51e:	2b00      	cmp	r3, #0
    c520:	d101      	bne.n	c526 <_spi_rx_check_and_receive+0x1a>
		return false;
    c522:	2300      	movs	r3, #0
    c524:	e022      	b.n	c56c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    c526:	68f8      	ldr	r0, [r7, #12]
    c528:	4b12      	ldr	r3, [pc, #72]	; (c574 <_spi_rx_check_and_receive+0x68>)
    c52a:	4798      	blx	r3
    c52c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    c52e:	687b      	ldr	r3, [r7, #4]
    c530:	685b      	ldr	r3, [r3, #4]
    c532:	2b00      	cmp	r3, #0
    c534:	d014      	beq.n	c560 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    c536:	687b      	ldr	r3, [r7, #4]
    c538:	685b      	ldr	r3, [r3, #4]
    c53a:	1c59      	adds	r1, r3, #1
    c53c:	687a      	ldr	r2, [r7, #4]
    c53e:	6051      	str	r1, [r2, #4]
    c540:	697a      	ldr	r2, [r7, #20]
    c542:	b2d2      	uxtb	r2, r2
    c544:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    c546:	687b      	ldr	r3, [r7, #4]
    c548:	7c1b      	ldrb	r3, [r3, #16]
    c54a:	2b01      	cmp	r3, #1
    c54c:	d908      	bls.n	c560 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    c54e:	687b      	ldr	r3, [r7, #4]
    c550:	685b      	ldr	r3, [r3, #4]
    c552:	1c59      	adds	r1, r3, #1
    c554:	687a      	ldr	r2, [r7, #4]
    c556:	6051      	str	r1, [r2, #4]
    c558:	697a      	ldr	r2, [r7, #20]
    c55a:	0a12      	lsrs	r2, r2, #8
    c55c:	b2d2      	uxtb	r2, r2
    c55e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    c560:	687b      	ldr	r3, [r7, #4]
    c562:	68db      	ldr	r3, [r3, #12]
    c564:	1c5a      	adds	r2, r3, #1
    c566:	687b      	ldr	r3, [r7, #4]
    c568:	60da      	str	r2, [r3, #12]

	return true;
    c56a:	2301      	movs	r3, #1
}
    c56c:	4618      	mov	r0, r3
    c56e:	3718      	adds	r7, #24
    c570:	46bd      	mov	sp, r7
    c572:	bd80      	pop	{r7, pc}
    c574:	0000b081 	.word	0x0000b081

0000c578 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    c578:	b580      	push	{r7, lr}
    c57a:	b086      	sub	sp, #24
    c57c:	af00      	add	r7, sp, #0
    c57e:	60f8      	str	r0, [r7, #12]
    c580:	60b9      	str	r1, [r7, #8]
    c582:	607a      	str	r2, [r7, #4]
    c584:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    c586:	68bb      	ldr	r3, [r7, #8]
    c588:	f003 0301 	and.w	r3, r3, #1
    c58c:	2b00      	cmp	r3, #0
    c58e:	d028      	beq.n	c5e2 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    c590:	687b      	ldr	r3, [r7, #4]
    c592:	681b      	ldr	r3, [r3, #0]
    c594:	2b00      	cmp	r3, #0
    c596:	d018      	beq.n	c5ca <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    c598:	687b      	ldr	r3, [r7, #4]
    c59a:	681b      	ldr	r3, [r3, #0]
    c59c:	1c59      	adds	r1, r3, #1
    c59e:	687a      	ldr	r2, [r7, #4]
    c5a0:	6011      	str	r1, [r2, #0]
    c5a2:	781b      	ldrb	r3, [r3, #0]
    c5a4:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    c5a6:	687b      	ldr	r3, [r7, #4]
    c5a8:	7c1b      	ldrb	r3, [r3, #16]
    c5aa:	2b01      	cmp	r3, #1
    c5ac:	d90f      	bls.n	c5ce <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    c5ae:	687b      	ldr	r3, [r7, #4]
    c5b0:	681b      	ldr	r3, [r3, #0]
    c5b2:	781b      	ldrb	r3, [r3, #0]
    c5b4:	021b      	lsls	r3, r3, #8
    c5b6:	461a      	mov	r2, r3
    c5b8:	697b      	ldr	r3, [r7, #20]
    c5ba:	4313      	orrs	r3, r2
    c5bc:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    c5be:	687b      	ldr	r3, [r7, #4]
    c5c0:	681b      	ldr	r3, [r3, #0]
    c5c2:	1c5a      	adds	r2, r3, #1
    c5c4:	687b      	ldr	r3, [r7, #4]
    c5c6:	601a      	str	r2, [r3, #0]
    c5c8:	e001      	b.n	c5ce <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    c5ca:	887b      	ldrh	r3, [r7, #2]
    c5cc:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    c5ce:	687b      	ldr	r3, [r7, #4]
    c5d0:	689b      	ldr	r3, [r3, #8]
    c5d2:	1c5a      	adds	r2, r3, #1
    c5d4:	687b      	ldr	r3, [r7, #4]
    c5d6:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    c5d8:	6979      	ldr	r1, [r7, #20]
    c5da:	68f8      	ldr	r0, [r7, #12]
    c5dc:	4b03      	ldr	r3, [pc, #12]	; (c5ec <_spi_tx_check_and_send+0x74>)
    c5de:	4798      	blx	r3
    c5e0:	e000      	b.n	c5e4 <_spi_tx_check_and_send+0x6c>
		return;
    c5e2:	bf00      	nop
}
    c5e4:	3718      	adds	r7, #24
    c5e6:	46bd      	mov	sp, r7
    c5e8:	bd80      	pop	{r7, pc}
    c5ea:	bf00      	nop
    c5ec:	0000b065 	.word	0x0000b065

0000c5f0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    c5f0:	b580      	push	{r7, lr}
    c5f2:	b082      	sub	sp, #8
    c5f4:	af00      	add	r7, sp, #0
    c5f6:	6078      	str	r0, [r7, #4]
    c5f8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    c5fa:	687b      	ldr	r3, [r7, #4]
    c5fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c600:	2b00      	cmp	r3, #0
    c602:	d00b      	beq.n	c61c <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    c604:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c608:	6838      	ldr	r0, [r7, #0]
    c60a:	4b07      	ldr	r3, [pc, #28]	; (c628 <_spi_err_check+0x38>)
    c60c:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    c60e:	2180      	movs	r1, #128	; 0x80
    c610:	6838      	ldr	r0, [r7, #0]
    c612:	4b06      	ldr	r3, [pc, #24]	; (c62c <_spi_err_check+0x3c>)
    c614:	4798      	blx	r3
		return ERR_OVERFLOW;
    c616:	f06f 0312 	mvn.w	r3, #18
    c61a:	e000      	b.n	c61e <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    c61c:	2300      	movs	r3, #0
}
    c61e:	4618      	mov	r0, r3
    c620:	3708      	adds	r7, #8
    c622:	46bd      	mov	sp, r7
    c624:	bd80      	pop	{r7, pc}
    c626:	bf00      	nop
    c628:	0000b0b9 	.word	0x0000b0b9
    c62c:	0000aadf 	.word	0x0000aadf

0000c630 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    c630:	b590      	push	{r4, r7, lr}
    c632:	b08b      	sub	sp, #44	; 0x2c
    c634:	af00      	add	r7, sp, #0
    c636:	6078      	str	r0, [r7, #4]
    c638:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    c63a:	687b      	ldr	r3, [r7, #4]
    c63c:	681b      	ldr	r3, [r3, #0]
    c63e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    c640:	2300      	movs	r3, #0
    c642:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    c644:	683b      	ldr	r3, [r7, #0]
    c646:	681b      	ldr	r3, [r3, #0]
    c648:	60bb      	str	r3, [r7, #8]
    c64a:	683b      	ldr	r3, [r7, #0]
    c64c:	685b      	ldr	r3, [r3, #4]
    c64e:	60fb      	str	r3, [r7, #12]
    c650:	2300      	movs	r3, #0
    c652:	613b      	str	r3, [r7, #16]
    c654:	2300      	movs	r3, #0
    c656:	617b      	str	r3, [r7, #20]
    c658:	687b      	ldr	r3, [r7, #4]
    c65a:	791b      	ldrb	r3, [r3, #4]
    c65c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    c65e:	687b      	ldr	r3, [r7, #4]
    c660:	2b00      	cmp	r3, #0
    c662:	d004      	beq.n	c66e <_spi_m_sync_trans+0x3e>
    c664:	6a3b      	ldr	r3, [r7, #32]
    c666:	2b00      	cmp	r3, #0
    c668:	d001      	beq.n	c66e <_spi_m_sync_trans+0x3e>
    c66a:	2301      	movs	r3, #1
    c66c:	e000      	b.n	c670 <_spi_m_sync_trans+0x40>
    c66e:	2300      	movs	r3, #0
    c670:	f003 0301 	and.w	r3, r3, #1
    c674:	b2db      	uxtb	r3, r3
    c676:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    c67a:	492b      	ldr	r1, [pc, #172]	; (c728 <_spi_m_sync_trans+0xf8>)
    c67c:	4618      	mov	r0, r3
    c67e:	4b2b      	ldr	r3, [pc, #172]	; (c72c <_spi_m_sync_trans+0xfc>)
    c680:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    c682:	2107      	movs	r1, #7
    c684:	6a38      	ldr	r0, [r7, #32]
    c686:	4b2a      	ldr	r3, [pc, #168]	; (c730 <_spi_m_sync_trans+0x100>)
    c688:	4798      	blx	r3
    c68a:	4603      	mov	r3, r0
    c68c:	2b00      	cmp	r3, #0
    c68e:	d002      	beq.n	c696 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    c690:	f06f 0303 	mvn.w	r3, #3
    c694:	e043      	b.n	c71e <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    c696:	6a38      	ldr	r0, [r7, #32]
    c698:	4b26      	ldr	r3, [pc, #152]	; (c734 <_spi_m_sync_trans+0x104>)
    c69a:	4798      	blx	r3
    c69c:	4603      	mov	r3, r0
    c69e:	f083 0301 	eor.w	r3, r3, #1
    c6a2:	b2db      	uxtb	r3, r3
    c6a4:	2b00      	cmp	r3, #0
    c6a6:	d002      	beq.n	c6ae <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    c6a8:	f06f 0313 	mvn.w	r3, #19
    c6ac:	e037      	b.n	c71e <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    c6ae:	6a38      	ldr	r0, [r7, #32]
    c6b0:	4b21      	ldr	r3, [pc, #132]	; (c738 <_spi_m_sync_trans+0x108>)
    c6b2:	4798      	blx	r3
    c6b4:	4603      	mov	r3, r0
    c6b6:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    c6b8:	f107 0308 	add.w	r3, r7, #8
    c6bc:	461a      	mov	r2, r3
    c6be:	69f9      	ldr	r1, [r7, #28]
    c6c0:	6a38      	ldr	r0, [r7, #32]
    c6c2:	4b1e      	ldr	r3, [pc, #120]	; (c73c <_spi_m_sync_trans+0x10c>)
    c6c4:	4798      	blx	r3
    c6c6:	4603      	mov	r3, r0
    c6c8:	f083 0301 	eor.w	r3, r3, #1
    c6cc:	b2db      	uxtb	r3, r3
    c6ce:	2b00      	cmp	r3, #0
    c6d0:	d00b      	beq.n	c6ea <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    c6d2:	697a      	ldr	r2, [r7, #20]
    c6d4:	693b      	ldr	r3, [r7, #16]
    c6d6:	429a      	cmp	r2, r3
    c6d8:	d307      	bcc.n	c6ea <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    c6da:	687b      	ldr	r3, [r7, #4]
    c6dc:	88db      	ldrh	r3, [r3, #6]
    c6de:	f107 0208 	add.w	r2, r7, #8
    c6e2:	69f9      	ldr	r1, [r7, #28]
    c6e4:	6a38      	ldr	r0, [r7, #32]
    c6e6:	4c16      	ldr	r4, [pc, #88]	; (c740 <_spi_m_sync_trans+0x110>)
    c6e8:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    c6ea:	6a39      	ldr	r1, [r7, #32]
    c6ec:	69f8      	ldr	r0, [r7, #28]
    c6ee:	4b15      	ldr	r3, [pc, #84]	; (c744 <_spi_m_sync_trans+0x114>)
    c6f0:	4798      	blx	r3
    c6f2:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c6f6:	2b00      	cmp	r3, #0
    c6f8:	db0c      	blt.n	c714 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    c6fa:	693a      	ldr	r2, [r7, #16]
    c6fc:	683b      	ldr	r3, [r7, #0]
    c6fe:	689b      	ldr	r3, [r3, #8]
    c700:	429a      	cmp	r2, r3
    c702:	d3d4      	bcc.n	c6ae <_spi_m_sync_trans+0x7e>
    c704:	697a      	ldr	r2, [r7, #20]
    c706:	683b      	ldr	r3, [r7, #0]
    c708:	689b      	ldr	r3, [r3, #8]
    c70a:	429a      	cmp	r2, r3
    c70c:	d3cf      	bcc.n	c6ae <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    c70e:	693b      	ldr	r3, [r7, #16]
    c710:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    c712:	e000      	b.n	c716 <_spi_m_sync_trans+0xe6>
			break;
    c714:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    c716:	6a38      	ldr	r0, [r7, #32]
    c718:	4b0b      	ldr	r3, [pc, #44]	; (c748 <_spi_m_sync_trans+0x118>)
    c71a:	4798      	blx	r3

	return rc;
    c71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c71e:	4618      	mov	r0, r3
    c720:	372c      	adds	r7, #44	; 0x2c
    c722:	46bd      	mov	sp, r7
    c724:	bd90      	pop	{r4, r7, pc}
    c726:	bf00      	nop
    c728:	00020428 	.word	0x00020428
    c72c:	00007d5d 	.word	0x00007d5d
    c730:	0000aa09 	.word	0x0000aa09
    c734:	0000ad79 	.word	0x0000ad79
    c738:	0000aac5 	.word	0x0000aac5
    c73c:	0000c50d 	.word	0x0000c50d
    c740:	0000c579 	.word	0x0000c579
    c744:	0000c5f1 	.word	0x0000c5f1
    c748:	0000c4dd 	.word	0x0000c4dd

0000c74c <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    c74c:	b580      	push	{r7, lr}
    c74e:	b084      	sub	sp, #16
    c750:	af00      	add	r7, sp, #0
    c752:	6078      	str	r0, [r7, #4]
    c754:	460b      	mov	r3, r1
    c756:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    c758:	687b      	ldr	r3, [r7, #4]
    c75a:	681b      	ldr	r3, [r3, #0]
    c75c:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    c75e:	687b      	ldr	r3, [r7, #4]
    c760:	2b00      	cmp	r3, #0
    c762:	d004      	beq.n	c76e <_spi_m_async_enable_tx+0x22>
    c764:	68fb      	ldr	r3, [r7, #12]
    c766:	2b00      	cmp	r3, #0
    c768:	d001      	beq.n	c76e <_spi_m_async_enable_tx+0x22>
    c76a:	2301      	movs	r3, #1
    c76c:	e000      	b.n	c770 <_spi_m_async_enable_tx+0x24>
    c76e:	2300      	movs	r3, #0
    c770:	f003 0301 	and.w	r3, r3, #1
    c774:	b2db      	uxtb	r3, r3
    c776:	f640 327c 	movw	r2, #2940	; 0xb7c
    c77a:	4909      	ldr	r1, [pc, #36]	; (c7a0 <_spi_m_async_enable_tx+0x54>)
    c77c:	4618      	mov	r0, r3
    c77e:	4b09      	ldr	r3, [pc, #36]	; (c7a4 <_spi_m_async_enable_tx+0x58>)
    c780:	4798      	blx	r3

	if (state) {
    c782:	78fb      	ldrb	r3, [r7, #3]
    c784:	2b00      	cmp	r3, #0
    c786:	d003      	beq.n	c790 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    c788:	68f8      	ldr	r0, [r7, #12]
    c78a:	4b07      	ldr	r3, [pc, #28]	; (c7a8 <_spi_m_async_enable_tx+0x5c>)
    c78c:	4798      	blx	r3
    c78e:	e002      	b.n	c796 <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    c790:	68f8      	ldr	r0, [r7, #12]
    c792:	4b06      	ldr	r3, [pc, #24]	; (c7ac <_spi_m_async_enable_tx+0x60>)
    c794:	4798      	blx	r3
	}

	return ERR_NONE;
    c796:	2300      	movs	r3, #0
}
    c798:	4618      	mov	r0, r3
    c79a:	3710      	adds	r7, #16
    c79c:	46bd      	mov	sp, r7
    c79e:	bd80      	pop	{r7, pc}
    c7a0:	00020428 	.word	0x00020428
    c7a4:	00007d5d 	.word	0x00007d5d
    c7a8:	0000ab93 	.word	0x0000ab93
    c7ac:	0000abad 	.word	0x0000abad

0000c7b0 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    c7b0:	b580      	push	{r7, lr}
    c7b2:	b084      	sub	sp, #16
    c7b4:	af00      	add	r7, sp, #0
    c7b6:	6078      	str	r0, [r7, #4]
    c7b8:	460b      	mov	r3, r1
    c7ba:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    c7bc:	687b      	ldr	r3, [r7, #4]
    c7be:	681b      	ldr	r3, [r3, #0]
    c7c0:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    c7c2:	687b      	ldr	r3, [r7, #4]
    c7c4:	2b00      	cmp	r3, #0
    c7c6:	bf14      	ite	ne
    c7c8:	2301      	movne	r3, #1
    c7ca:	2300      	moveq	r3, #0
    c7cc:	b2db      	uxtb	r3, r3
    c7ce:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    c7d2:	490f      	ldr	r1, [pc, #60]	; (c810 <_spi_m_async_enable_rx+0x60>)
    c7d4:	4618      	mov	r0, r3
    c7d6:	4b0f      	ldr	r3, [pc, #60]	; (c814 <_spi_m_async_enable_rx+0x64>)
    c7d8:	4798      	blx	r3
	ASSERT(hw);
    c7da:	68fb      	ldr	r3, [r7, #12]
    c7dc:	2b00      	cmp	r3, #0
    c7de:	bf14      	ite	ne
    c7e0:	2301      	movne	r3, #1
    c7e2:	2300      	moveq	r3, #0
    c7e4:	b2db      	uxtb	r3, r3
    c7e6:	f640 3291 	movw	r2, #2961	; 0xb91
    c7ea:	4909      	ldr	r1, [pc, #36]	; (c810 <_spi_m_async_enable_rx+0x60>)
    c7ec:	4618      	mov	r0, r3
    c7ee:	4b09      	ldr	r3, [pc, #36]	; (c814 <_spi_m_async_enable_rx+0x64>)
    c7f0:	4798      	blx	r3

	if (state) {
    c7f2:	78fb      	ldrb	r3, [r7, #3]
    c7f4:	2b00      	cmp	r3, #0
    c7f6:	d003      	beq.n	c800 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    c7f8:	68f8      	ldr	r0, [r7, #12]
    c7fa:	4b07      	ldr	r3, [pc, #28]	; (c818 <_spi_m_async_enable_rx+0x68>)
    c7fc:	4798      	blx	r3
    c7fe:	e002      	b.n	c806 <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    c800:	68f8      	ldr	r0, [r7, #12]
    c802:	4b06      	ldr	r3, [pc, #24]	; (c81c <_spi_m_async_enable_rx+0x6c>)
    c804:	4798      	blx	r3
	}

	return ERR_NONE;
    c806:	2300      	movs	r3, #0
}
    c808:	4618      	mov	r0, r3
    c80a:	3710      	adds	r7, #16
    c80c:	46bd      	mov	sp, r7
    c80e:	bd80      	pop	{r7, pc}
    c810:	00020428 	.word	0x00020428
    c814:	00007d5d 	.word	0x00007d5d
    c818:	0000abfb 	.word	0x0000abfb
    c81c:	0000ac15 	.word	0x0000ac15

0000c820 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    c820:	b580      	push	{r7, lr}
    c822:	b082      	sub	sp, #8
    c824:	af00      	add	r7, sp, #0
    c826:	6078      	str	r0, [r7, #4]
    c828:	460b      	mov	r3, r1
    c82a:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    c82c:	687b      	ldr	r3, [r7, #4]
    c82e:	2b00      	cmp	r3, #0
    c830:	d005      	beq.n	c83e <_spi_m_async_enable_tx_complete+0x1e>
    c832:	687b      	ldr	r3, [r7, #4]
    c834:	681b      	ldr	r3, [r3, #0]
    c836:	2b00      	cmp	r3, #0
    c838:	d001      	beq.n	c83e <_spi_m_async_enable_tx_complete+0x1e>
    c83a:	2301      	movs	r3, #1
    c83c:	e000      	b.n	c840 <_spi_m_async_enable_tx_complete+0x20>
    c83e:	2300      	movs	r3, #0
    c840:	f003 0301 	and.w	r3, r3, #1
    c844:	b2db      	uxtb	r3, r3
    c846:	f640 32a3 	movw	r2, #2979	; 0xba3
    c84a:	490b      	ldr	r1, [pc, #44]	; (c878 <_spi_m_async_enable_tx_complete+0x58>)
    c84c:	4618      	mov	r0, r3
    c84e:	4b0b      	ldr	r3, [pc, #44]	; (c87c <_spi_m_async_enable_tx_complete+0x5c>)
    c850:	4798      	blx	r3

	if (state) {
    c852:	78fb      	ldrb	r3, [r7, #3]
    c854:	2b00      	cmp	r3, #0
    c856:	d005      	beq.n	c864 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    c858:	687b      	ldr	r3, [r7, #4]
    c85a:	681b      	ldr	r3, [r3, #0]
    c85c:	4618      	mov	r0, r3
    c85e:	4b08      	ldr	r3, [pc, #32]	; (c880 <_spi_m_async_enable_tx_complete+0x60>)
    c860:	4798      	blx	r3
    c862:	e004      	b.n	c86e <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    c864:	687b      	ldr	r3, [r7, #4]
    c866:	681b      	ldr	r3, [r3, #0]
    c868:	4618      	mov	r0, r3
    c86a:	4b06      	ldr	r3, [pc, #24]	; (c884 <_spi_m_async_enable_tx_complete+0x64>)
    c86c:	4798      	blx	r3
	}

	return ERR_NONE;
    c86e:	2300      	movs	r3, #0
}
    c870:	4618      	mov	r0, r3
    c872:	3708      	adds	r7, #8
    c874:	46bd      	mov	sp, r7
    c876:	bd80      	pop	{r7, pc}
    c878:	00020428 	.word	0x00020428
    c87c:	00007d5d 	.word	0x00007d5d
    c880:	0000abc7 	.word	0x0000abc7
    c884:	0000abe1 	.word	0x0000abe1

0000c888 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    c888:	b580      	push	{r7, lr}
    c88a:	b082      	sub	sp, #8
    c88c:	af00      	add	r7, sp, #0
    c88e:	6078      	str	r0, [r7, #4]
    c890:	460b      	mov	r3, r1
    c892:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    c894:	687b      	ldr	r3, [r7, #4]
    c896:	2b00      	cmp	r3, #0
    c898:	d005      	beq.n	c8a6 <_spi_m_async_write_one+0x1e>
    c89a:	687b      	ldr	r3, [r7, #4]
    c89c:	681b      	ldr	r3, [r3, #0]
    c89e:	2b00      	cmp	r3, #0
    c8a0:	d001      	beq.n	c8a6 <_spi_m_async_write_one+0x1e>
    c8a2:	2301      	movs	r3, #1
    c8a4:	e000      	b.n	c8a8 <_spi_m_async_write_one+0x20>
    c8a6:	2300      	movs	r3, #0
    c8a8:	f003 0301 	and.w	r3, r3, #1
    c8ac:	b2db      	uxtb	r3, r3
    c8ae:	f640 32b5 	movw	r2, #2997	; 0xbb5
    c8b2:	4908      	ldr	r1, [pc, #32]	; (c8d4 <_spi_m_async_write_one+0x4c>)
    c8b4:	4618      	mov	r0, r3
    c8b6:	4b08      	ldr	r3, [pc, #32]	; (c8d8 <_spi_m_async_write_one+0x50>)
    c8b8:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    c8ba:	687b      	ldr	r3, [r7, #4]
    c8bc:	681b      	ldr	r3, [r3, #0]
    c8be:	887a      	ldrh	r2, [r7, #2]
    c8c0:	4611      	mov	r1, r2
    c8c2:	4618      	mov	r0, r3
    c8c4:	4b05      	ldr	r3, [pc, #20]	; (c8dc <_spi_m_async_write_one+0x54>)
    c8c6:	4798      	blx	r3

	return ERR_NONE;
    c8c8:	2300      	movs	r3, #0
}
    c8ca:	4618      	mov	r0, r3
    c8cc:	3708      	adds	r7, #8
    c8ce:	46bd      	mov	sp, r7
    c8d0:	bd80      	pop	{r7, pc}
    c8d2:	bf00      	nop
    c8d4:	00020428 	.word	0x00020428
    c8d8:	00007d5d 	.word	0x00007d5d
    c8dc:	0000b065 	.word	0x0000b065

0000c8e0 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    c8e0:	b580      	push	{r7, lr}
    c8e2:	b082      	sub	sp, #8
    c8e4:	af00      	add	r7, sp, #0
    c8e6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    c8e8:	687b      	ldr	r3, [r7, #4]
    c8ea:	2b00      	cmp	r3, #0
    c8ec:	d005      	beq.n	c8fa <_spi_m_async_read_one+0x1a>
    c8ee:	687b      	ldr	r3, [r7, #4]
    c8f0:	681b      	ldr	r3, [r3, #0]
    c8f2:	2b00      	cmp	r3, #0
    c8f4:	d001      	beq.n	c8fa <_spi_m_async_read_one+0x1a>
    c8f6:	2301      	movs	r3, #1
    c8f8:	e000      	b.n	c8fc <_spi_m_async_read_one+0x1c>
    c8fa:	2300      	movs	r3, #0
    c8fc:	f003 0301 	and.w	r3, r3, #1
    c900:	b2db      	uxtb	r3, r3
    c902:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
    c906:	4907      	ldr	r1, [pc, #28]	; (c924 <_spi_m_async_read_one+0x44>)
    c908:	4618      	mov	r0, r3
    c90a:	4b07      	ldr	r3, [pc, #28]	; (c928 <_spi_m_async_read_one+0x48>)
    c90c:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    c90e:	687b      	ldr	r3, [r7, #4]
    c910:	681b      	ldr	r3, [r3, #0]
    c912:	4618      	mov	r0, r3
    c914:	4b05      	ldr	r3, [pc, #20]	; (c92c <_spi_m_async_read_one+0x4c>)
    c916:	4798      	blx	r3
    c918:	4603      	mov	r3, r0
    c91a:	b29b      	uxth	r3, r3
}
    c91c:	4618      	mov	r0, r3
    c91e:	3708      	adds	r7, #8
    c920:	46bd      	mov	sp, r7
    c922:	bd80      	pop	{r7, pc}
    c924:	00020428 	.word	0x00020428
    c928:	00007d5d 	.word	0x00007d5d
    c92c:	0000b081 	.word	0x0000b081

0000c930 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    c930:	b580      	push	{r7, lr}
    c932:	b086      	sub	sp, #24
    c934:	af00      	add	r7, sp, #0
    c936:	60f8      	str	r0, [r7, #12]
    c938:	460b      	mov	r3, r1
    c93a:	607a      	str	r2, [r7, #4]
    c93c:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    c93e:	68fb      	ldr	r3, [r7, #12]
    c940:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    c942:	68fb      	ldr	r3, [r7, #12]
    c944:	2b00      	cmp	r3, #0
    c946:	d004      	beq.n	c952 <_spi_m_async_register_callback+0x22>
    c948:	7afb      	ldrb	r3, [r7, #11]
    c94a:	2b03      	cmp	r3, #3
    c94c:	d801      	bhi.n	c952 <_spi_m_async_register_callback+0x22>
    c94e:	2301      	movs	r3, #1
    c950:	e000      	b.n	c954 <_spi_m_async_register_callback+0x24>
    c952:	2300      	movs	r3, #0
    c954:	f003 0301 	and.w	r3, r3, #1
    c958:	b2db      	uxtb	r3, r3
    c95a:	f640 32e9 	movw	r2, #3049	; 0xbe9
    c95e:	4909      	ldr	r1, [pc, #36]	; (c984 <_spi_m_async_register_callback+0x54>)
    c960:	4618      	mov	r0, r3
    c962:	4b09      	ldr	r3, [pc, #36]	; (c988 <_spi_m_async_register_callback+0x58>)
    c964:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    c966:	697b      	ldr	r3, [r7, #20]
    c968:	3308      	adds	r3, #8
    c96a:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    c96c:	7afb      	ldrb	r3, [r7, #11]
    c96e:	009b      	lsls	r3, r3, #2
    c970:	693a      	ldr	r2, [r7, #16]
    c972:	4413      	add	r3, r2
    c974:	687a      	ldr	r2, [r7, #4]
    c976:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    c978:	2300      	movs	r3, #0
}
    c97a:	4618      	mov	r0, r3
    c97c:	3718      	adds	r7, #24
    c97e:	46bd      	mov	sp, r7
    c980:	bd80      	pop	{r7, pc}
    c982:	bf00      	nop
    c984:	00020428 	.word	0x00020428
    c988:	00007d5d 	.word	0x00007d5d

0000c98c <_spi_m_async_set_irq_state>:
 * param[in] type The type of interrupt to disable/enable if applicable
 * param[in] state Enable or disable
 */
void _spi_m_async_set_irq_state(struct _spi_async_dev *const device, const enum _spi_async_dev_cb_type type,
                                const bool state)
{
    c98c:	b580      	push	{r7, lr}
    c98e:	b082      	sub	sp, #8
    c990:	af00      	add	r7, sp, #0
    c992:	6078      	str	r0, [r7, #4]
    c994:	460b      	mov	r3, r1
    c996:	70fb      	strb	r3, [r7, #3]
    c998:	4613      	mov	r3, r2
    c99a:	70bb      	strb	r3, [r7, #2]
	ASSERT(device);
    c99c:	687b      	ldr	r3, [r7, #4]
    c99e:	2b00      	cmp	r3, #0
    c9a0:	bf14      	ite	ne
    c9a2:	2301      	movne	r3, #1
    c9a4:	2300      	moveq	r3, #0
    c9a6:	b2db      	uxtb	r3, r3
    c9a8:	f640 422a 	movw	r2, #3114	; 0xc2a
    c9ac:	4908      	ldr	r1, [pc, #32]	; (c9d0 <_spi_m_async_set_irq_state+0x44>)
    c9ae:	4618      	mov	r0, r3
    c9b0:	4b08      	ldr	r3, [pc, #32]	; (c9d4 <_spi_m_async_set_irq_state+0x48>)
    c9b2:	4798      	blx	r3

	if (SPI_DEV_CB_ERROR == type) {
    c9b4:	78fb      	ldrb	r3, [r7, #3]
    c9b6:	2b03      	cmp	r3, #3
    c9b8:	d106      	bne.n	c9c8 <_spi_m_async_set_irq_state+0x3c>
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    c9ba:	687b      	ldr	r3, [r7, #4]
    c9bc:	681b      	ldr	r3, [r3, #0]
    c9be:	78ba      	ldrb	r2, [r7, #2]
    c9c0:	4611      	mov	r1, r2
    c9c2:	4618      	mov	r0, r3
    c9c4:	4b04      	ldr	r3, [pc, #16]	; (c9d8 <_spi_m_async_set_irq_state+0x4c>)
    c9c6:	4798      	blx	r3
	}
}
    c9c8:	bf00      	nop
    c9ca:	3708      	adds	r7, #8
    c9cc:	46bd      	mov	sp, r7
    c9ce:	bd80      	pop	{r7, pc}
    c9d0:	00020428 	.word	0x00020428
    c9d4:	00007d5d 	.word	0x00007d5d
    c9d8:	0000ac2f 	.word	0x0000ac2f

0000c9dc <__NVIC_EnableIRQ>:
{
    c9dc:	b480      	push	{r7}
    c9de:	b083      	sub	sp, #12
    c9e0:	af00      	add	r7, sp, #0
    c9e2:	4603      	mov	r3, r0
    c9e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c9e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c9ea:	2b00      	cmp	r3, #0
    c9ec:	db0b      	blt.n	ca06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c9ee:	4909      	ldr	r1, [pc, #36]	; (ca14 <__NVIC_EnableIRQ+0x38>)
    c9f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c9f4:	095b      	lsrs	r3, r3, #5
    c9f6:	88fa      	ldrh	r2, [r7, #6]
    c9f8:	f002 021f 	and.w	r2, r2, #31
    c9fc:	2001      	movs	r0, #1
    c9fe:	fa00 f202 	lsl.w	r2, r0, r2
    ca02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca06:	bf00      	nop
    ca08:	370c      	adds	r7, #12
    ca0a:	46bd      	mov	sp, r7
    ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca10:	4770      	bx	lr
    ca12:	bf00      	nop
    ca14:	e000e100 	.word	0xe000e100

0000ca18 <__NVIC_DisableIRQ>:
{
    ca18:	b480      	push	{r7}
    ca1a:	b083      	sub	sp, #12
    ca1c:	af00      	add	r7, sp, #0
    ca1e:	4603      	mov	r3, r0
    ca20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ca22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ca26:	2b00      	cmp	r3, #0
    ca28:	db10      	blt.n	ca4c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ca2a:	490b      	ldr	r1, [pc, #44]	; (ca58 <__NVIC_DisableIRQ+0x40>)
    ca2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ca30:	095b      	lsrs	r3, r3, #5
    ca32:	88fa      	ldrh	r2, [r7, #6]
    ca34:	f002 021f 	and.w	r2, r2, #31
    ca38:	2001      	movs	r0, #1
    ca3a:	fa00 f202 	lsl.w	r2, r0, r2
    ca3e:	3320      	adds	r3, #32
    ca40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    ca44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ca48:	f3bf 8f6f 	isb	sy
}
    ca4c:	bf00      	nop
    ca4e:	370c      	adds	r7, #12
    ca50:	46bd      	mov	sp, r7
    ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca56:	4770      	bx	lr
    ca58:	e000e100 	.word	0xe000e100

0000ca5c <__NVIC_ClearPendingIRQ>:
{
    ca5c:	b480      	push	{r7}
    ca5e:	b083      	sub	sp, #12
    ca60:	af00      	add	r7, sp, #0
    ca62:	4603      	mov	r3, r0
    ca64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ca66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ca6a:	2b00      	cmp	r3, #0
    ca6c:	db0c      	blt.n	ca88 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ca6e:	4909      	ldr	r1, [pc, #36]	; (ca94 <__NVIC_ClearPendingIRQ+0x38>)
    ca70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ca74:	095b      	lsrs	r3, r3, #5
    ca76:	88fa      	ldrh	r2, [r7, #6]
    ca78:	f002 021f 	and.w	r2, r2, #31
    ca7c:	2001      	movs	r0, #1
    ca7e:	fa00 f202 	lsl.w	r2, r0, r2
    ca82:	3360      	adds	r3, #96	; 0x60
    ca84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca88:	bf00      	nop
    ca8a:	370c      	adds	r7, #12
    ca8c:	46bd      	mov	sp, r7
    ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca92:	4770      	bx	lr
    ca94:	e000e100 	.word	0xe000e100

0000ca98 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    ca98:	b480      	push	{r7}
    ca9a:	b083      	sub	sp, #12
    ca9c:	af00      	add	r7, sp, #0
    ca9e:	6078      	str	r0, [r7, #4]
    caa0:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    caa2:	bf00      	nop
    caa4:	687b      	ldr	r3, [r7, #4]
    caa6:	689a      	ldr	r2, [r3, #8]
    caa8:	683b      	ldr	r3, [r7, #0]
    caaa:	4013      	ands	r3, r2
    caac:	2b00      	cmp	r3, #0
    caae:	d1f9      	bne.n	caa4 <hri_tcc_wait_for_sync+0xc>
	};
}
    cab0:	bf00      	nop
    cab2:	370c      	adds	r7, #12
    cab4:	46bd      	mov	sp, r7
    cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    caba:	4770      	bx	lr

0000cabc <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    cabc:	b480      	push	{r7}
    cabe:	b083      	sub	sp, #12
    cac0:	af00      	add	r7, sp, #0
    cac2:	6078      	str	r0, [r7, #4]
    cac4:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    cac6:	687b      	ldr	r3, [r7, #4]
    cac8:	689a      	ldr	r2, [r3, #8]
    caca:	683b      	ldr	r3, [r7, #0]
    cacc:	4013      	ands	r3, r2
    cace:	2b00      	cmp	r3, #0
    cad0:	bf14      	ite	ne
    cad2:	2301      	movne	r3, #1
    cad4:	2300      	moveq	r3, #0
    cad6:	b2db      	uxtb	r3, r3
}
    cad8:	4618      	mov	r0, r3
    cada:	370c      	adds	r7, #12
    cadc:	46bd      	mov	sp, r7
    cade:	f85d 7b04 	ldr.w	r7, [sp], #4
    cae2:	4770      	bx	lr

0000cae4 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    cae4:	b480      	push	{r7}
    cae6:	b083      	sub	sp, #12
    cae8:	af00      	add	r7, sp, #0
    caea:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    caec:	687b      	ldr	r3, [r7, #4]
    caee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    caf0:	f003 0301 	and.w	r3, r3, #1
    caf4:	2b00      	cmp	r3, #0
    caf6:	bf14      	ite	ne
    caf8:	2301      	movne	r3, #1
    cafa:	2300      	moveq	r3, #0
    cafc:	b2db      	uxtb	r3, r3
}
    cafe:	4618      	mov	r0, r3
    cb00:	370c      	adds	r7, #12
    cb02:	46bd      	mov	sp, r7
    cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb08:	4770      	bx	lr

0000cb0a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    cb0a:	b480      	push	{r7}
    cb0c:	b083      	sub	sp, #12
    cb0e:	af00      	add	r7, sp, #0
    cb10:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    cb12:	687b      	ldr	r3, [r7, #4]
    cb14:	2201      	movs	r2, #1
    cb16:	62da      	str	r2, [r3, #44]	; 0x2c
}
    cb18:	bf00      	nop
    cb1a:	370c      	adds	r7, #12
    cb1c:	46bd      	mov	sp, r7
    cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb22:	4770      	bx	lr

0000cb24 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    cb24:	b480      	push	{r7}
    cb26:	b083      	sub	sp, #12
    cb28:	af00      	add	r7, sp, #0
    cb2a:	6078      	str	r0, [r7, #4]
    cb2c:	460b      	mov	r3, r1
    cb2e:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    cb30:	687b      	ldr	r3, [r7, #4]
    cb32:	78fa      	ldrb	r2, [r7, #3]
    cb34:	715a      	strb	r2, [r3, #5]
}
    cb36:	bf00      	nop
    cb38:	370c      	adds	r7, #12
    cb3a:	46bd      	mov	sp, r7
    cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb40:	4770      	bx	lr

0000cb42 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    cb42:	b480      	push	{r7}
    cb44:	b083      	sub	sp, #12
    cb46:	af00      	add	r7, sp, #0
    cb48:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    cb4a:	687b      	ldr	r3, [r7, #4]
    cb4c:	2201      	movs	r2, #1
    cb4e:	629a      	str	r2, [r3, #40]	; 0x28
}
    cb50:	bf00      	nop
    cb52:	370c      	adds	r7, #12
    cb54:	46bd      	mov	sp, r7
    cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb5a:	4770      	bx	lr

0000cb5c <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    cb5c:	b580      	push	{r7, lr}
    cb5e:	b082      	sub	sp, #8
    cb60:	af00      	add	r7, sp, #0
    cb62:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    cb64:	687b      	ldr	r3, [r7, #4]
    cb66:	681b      	ldr	r3, [r3, #0]
    cb68:	f043 0201 	orr.w	r2, r3, #1
    cb6c:	687b      	ldr	r3, [r7, #4]
    cb6e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    cb70:	2101      	movs	r1, #1
    cb72:	6878      	ldr	r0, [r7, #4]
    cb74:	4b02      	ldr	r3, [pc, #8]	; (cb80 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    cb76:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    cb78:	bf00      	nop
    cb7a:	3708      	adds	r7, #8
    cb7c:	46bd      	mov	sp, r7
    cb7e:	bd80      	pop	{r7, pc}
    cb80:	0000ca99 	.word	0x0000ca99

0000cb84 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    cb84:	b580      	push	{r7, lr}
    cb86:	b082      	sub	sp, #8
    cb88:	af00      	add	r7, sp, #0
    cb8a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    cb8c:	687b      	ldr	r3, [r7, #4]
    cb8e:	681b      	ldr	r3, [r3, #0]
    cb90:	f043 0202 	orr.w	r2, r3, #2
    cb94:	687b      	ldr	r3, [r7, #4]
    cb96:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    cb98:	2103      	movs	r1, #3
    cb9a:	6878      	ldr	r0, [r7, #4]
    cb9c:	4b02      	ldr	r3, [pc, #8]	; (cba8 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    cb9e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    cba0:	bf00      	nop
    cba2:	3708      	adds	r7, #8
    cba4:	46bd      	mov	sp, r7
    cba6:	bd80      	pop	{r7, pc}
    cba8:	0000ca99 	.word	0x0000ca99

0000cbac <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    cbac:	b580      	push	{r7, lr}
    cbae:	b084      	sub	sp, #16
    cbb0:	af00      	add	r7, sp, #0
    cbb2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    cbb4:	2103      	movs	r1, #3
    cbb6:	6878      	ldr	r0, [r7, #4]
    cbb8:	4b09      	ldr	r3, [pc, #36]	; (cbe0 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    cbba:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    cbbc:	687b      	ldr	r3, [r7, #4]
    cbbe:	681b      	ldr	r3, [r3, #0]
    cbc0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    cbc2:	68fb      	ldr	r3, [r7, #12]
    cbc4:	085b      	lsrs	r3, r3, #1
    cbc6:	f003 0301 	and.w	r3, r3, #1
    cbca:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    cbcc:	68fb      	ldr	r3, [r7, #12]
    cbce:	2b00      	cmp	r3, #0
    cbd0:	bf14      	ite	ne
    cbd2:	2301      	movne	r3, #1
    cbd4:	2300      	moveq	r3, #0
    cbd6:	b2db      	uxtb	r3, r3
}
    cbd8:	4618      	mov	r0, r3
    cbda:	3710      	adds	r7, #16
    cbdc:	46bd      	mov	sp, r7
    cbde:	bd80      	pop	{r7, pc}
    cbe0:	0000ca99 	.word	0x0000ca99

0000cbe4 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    cbe4:	b580      	push	{r7, lr}
    cbe6:	b082      	sub	sp, #8
    cbe8:	af00      	add	r7, sp, #0
    cbea:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    cbec:	687b      	ldr	r3, [r7, #4]
    cbee:	681b      	ldr	r3, [r3, #0]
    cbf0:	f023 0202 	bic.w	r2, r3, #2
    cbf4:	687b      	ldr	r3, [r7, #4]
    cbf6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    cbf8:	2103      	movs	r1, #3
    cbfa:	6878      	ldr	r0, [r7, #4]
    cbfc:	4b02      	ldr	r3, [pc, #8]	; (cc08 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    cbfe:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    cc00:	bf00      	nop
    cc02:	3708      	adds	r7, #8
    cc04:	46bd      	mov	sp, r7
    cc06:	bd80      	pop	{r7, pc}
    cc08:	0000ca99 	.word	0x0000ca99

0000cc0c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    cc0c:	b580      	push	{r7, lr}
    cc0e:	b084      	sub	sp, #16
    cc10:	af00      	add	r7, sp, #0
    cc12:	6078      	str	r0, [r7, #4]
    cc14:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    cc16:	2103      	movs	r1, #3
    cc18:	6878      	ldr	r0, [r7, #4]
    cc1a:	4b07      	ldr	r3, [pc, #28]	; (cc38 <hri_tcc_get_CTRLA_reg+0x2c>)
    cc1c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    cc1e:	687b      	ldr	r3, [r7, #4]
    cc20:	681b      	ldr	r3, [r3, #0]
    cc22:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    cc24:	68fa      	ldr	r2, [r7, #12]
    cc26:	683b      	ldr	r3, [r7, #0]
    cc28:	4013      	ands	r3, r2
    cc2a:	60fb      	str	r3, [r7, #12]
	return tmp;
    cc2c:	68fb      	ldr	r3, [r7, #12]
}
    cc2e:	4618      	mov	r0, r3
    cc30:	3710      	adds	r7, #16
    cc32:	46bd      	mov	sp, r7
    cc34:	bd80      	pop	{r7, pc}
    cc36:	bf00      	nop
    cc38:	0000ca99 	.word	0x0000ca99

0000cc3c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    cc3c:	b580      	push	{r7, lr}
    cc3e:	b082      	sub	sp, #8
    cc40:	af00      	add	r7, sp, #0
    cc42:	6078      	str	r0, [r7, #4]
    cc44:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    cc46:	687b      	ldr	r3, [r7, #4]
    cc48:	683a      	ldr	r2, [r7, #0]
    cc4a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    cc4c:	2103      	movs	r1, #3
    cc4e:	6878      	ldr	r0, [r7, #4]
    cc50:	4b02      	ldr	r3, [pc, #8]	; (cc5c <hri_tcc_write_CTRLA_reg+0x20>)
    cc52:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    cc54:	bf00      	nop
    cc56:	3708      	adds	r7, #8
    cc58:	46bd      	mov	sp, r7
    cc5a:	bd80      	pop	{r7, pc}
    cc5c:	0000ca99 	.word	0x0000ca99

0000cc60 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    cc60:	b480      	push	{r7}
    cc62:	b083      	sub	sp, #12
    cc64:	af00      	add	r7, sp, #0
    cc66:	6078      	str	r0, [r7, #4]
    cc68:	460b      	mov	r3, r1
    cc6a:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    cc6c:	687b      	ldr	r3, [r7, #4]
    cc6e:	78fa      	ldrb	r2, [r7, #3]
    cc70:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    cc72:	bf00      	nop
    cc74:	370c      	adds	r7, #12
    cc76:	46bd      	mov	sp, r7
    cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc7c:	4770      	bx	lr

0000cc7e <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    cc7e:	b480      	push	{r7}
    cc80:	b083      	sub	sp, #12
    cc82:	af00      	add	r7, sp, #0
    cc84:	6078      	str	r0, [r7, #4]
    cc86:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    cc88:	687b      	ldr	r3, [r7, #4]
    cc8a:	683a      	ldr	r2, [r7, #0]
    cc8c:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    cc8e:	bf00      	nop
    cc90:	370c      	adds	r7, #12
    cc92:	46bd      	mov	sp, r7
    cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc98:	4770      	bx	lr
	...

0000cc9c <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    cc9c:	b580      	push	{r7, lr}
    cc9e:	b082      	sub	sp, #8
    cca0:	af00      	add	r7, sp, #0
    cca2:	6078      	str	r0, [r7, #4]
    cca4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    cca6:	687b      	ldr	r3, [r7, #4]
    cca8:	683a      	ldr	r2, [r7, #0]
    ccaa:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    ccac:	2180      	movs	r1, #128	; 0x80
    ccae:	6878      	ldr	r0, [r7, #4]
    ccb0:	4b02      	ldr	r3, [pc, #8]	; (ccbc <hri_tcc_write_PER_reg+0x20>)
    ccb2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    ccb4:	bf00      	nop
    ccb6:	3708      	adds	r7, #8
    ccb8:	46bd      	mov	sp, r7
    ccba:	bd80      	pop	{r7, pc}
    ccbc:	0000ca99 	.word	0x0000ca99

0000ccc0 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    ccc0:	b580      	push	{r7, lr}
    ccc2:	b082      	sub	sp, #8
    ccc4:	af00      	add	r7, sp, #0
    ccc6:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    ccc8:	2180      	movs	r1, #128	; 0x80
    ccca:	6878      	ldr	r0, [r7, #4]
    cccc:	4b03      	ldr	r3, [pc, #12]	; (ccdc <hri_tcc_read_PER_reg+0x1c>)
    ccce:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    ccd0:	687b      	ldr	r3, [r7, #4]
    ccd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    ccd4:	4618      	mov	r0, r3
    ccd6:	3708      	adds	r7, #8
    ccd8:	46bd      	mov	sp, r7
    ccda:	bd80      	pop	{r7, pc}
    ccdc:	0000ca99 	.word	0x0000ca99

0000cce0 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    cce0:	b480      	push	{r7}
    cce2:	b083      	sub	sp, #12
    cce4:	af00      	add	r7, sp, #0
    cce6:	6078      	str	r0, [r7, #4]
    cce8:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    ccea:	687b      	ldr	r3, [r7, #4]
    ccec:	4a09      	ldr	r2, [pc, #36]	; (cd14 <_tcc_init_irq_param+0x34>)
    ccee:	4293      	cmp	r3, r2
    ccf0:	d102      	bne.n	ccf8 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    ccf2:	4a09      	ldr	r2, [pc, #36]	; (cd18 <_tcc_init_irq_param+0x38>)
    ccf4:	683b      	ldr	r3, [r7, #0]
    ccf6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    ccf8:	687b      	ldr	r3, [r7, #4]
    ccfa:	4a08      	ldr	r2, [pc, #32]	; (cd1c <_tcc_init_irq_param+0x3c>)
    ccfc:	4293      	cmp	r3, r2
    ccfe:	d102      	bne.n	cd06 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    cd00:	4a07      	ldr	r2, [pc, #28]	; (cd20 <_tcc_init_irq_param+0x40>)
    cd02:	683b      	ldr	r3, [r7, #0]
    cd04:	6013      	str	r3, [r2, #0]
	}
}
    cd06:	bf00      	nop
    cd08:	370c      	adds	r7, #12
    cd0a:	46bd      	mov	sp, r7
    cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd10:	4770      	bx	lr
    cd12:	bf00      	nop
    cd14:	41016000 	.word	0x41016000
    cd18:	20008ac8 	.word	0x20008ac8
    cd1c:	41018000 	.word	0x41018000
    cd20:	20008acc 	.word	0x20008acc

0000cd24 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    cd24:	b580      	push	{r7, lr}
    cd26:	b084      	sub	sp, #16
    cd28:	af00      	add	r7, sp, #0
    cd2a:	6078      	str	r0, [r7, #4]
    cd2c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    cd2e:	6838      	ldr	r0, [r7, #0]
    cd30:	4b33      	ldr	r3, [pc, #204]	; (ce00 <_tcc_timer_init+0xdc>)
    cd32:	4798      	blx	r3
    cd34:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    cd36:	68fb      	ldr	r3, [r7, #12]
    cd38:	2b00      	cmp	r3, #0
    cd3a:	d102      	bne.n	cd42 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    cd3c:	f06f 0309 	mvn.w	r3, #9
    cd40:	e05a      	b.n	cdf8 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    cd42:	687b      	ldr	r3, [r7, #4]
    cd44:	683a      	ldr	r2, [r7, #0]
    cd46:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    cd48:	2101      	movs	r1, #1
    cd4a:	6838      	ldr	r0, [r7, #0]
    cd4c:	4b2d      	ldr	r3, [pc, #180]	; (ce04 <_tcc_timer_init+0xe0>)
    cd4e:	4798      	blx	r3
    cd50:	4603      	mov	r3, r0
    cd52:	f083 0301 	eor.w	r3, r3, #1
    cd56:	b2db      	uxtb	r3, r3
    cd58:	2b00      	cmp	r3, #0
    cd5a:	d011      	beq.n	cd80 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    cd5c:	2102      	movs	r1, #2
    cd5e:	6838      	ldr	r0, [r7, #0]
    cd60:	4b29      	ldr	r3, [pc, #164]	; (ce08 <_tcc_timer_init+0xe4>)
    cd62:	4798      	blx	r3
    cd64:	4603      	mov	r3, r0
    cd66:	2b00      	cmp	r3, #0
    cd68:	d006      	beq.n	cd78 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    cd6a:	6838      	ldr	r0, [r7, #0]
    cd6c:	4b27      	ldr	r3, [pc, #156]	; (ce0c <_tcc_timer_init+0xe8>)
    cd6e:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    cd70:	2102      	movs	r1, #2
    cd72:	6838      	ldr	r0, [r7, #0]
    cd74:	4b26      	ldr	r3, [pc, #152]	; (ce10 <_tcc_timer_init+0xec>)
    cd76:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    cd78:	2101      	movs	r1, #1
    cd7a:	6838      	ldr	r0, [r7, #0]
    cd7c:	4b25      	ldr	r3, [pc, #148]	; (ce14 <_tcc_timer_init+0xf0>)
    cd7e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    cd80:	2101      	movs	r1, #1
    cd82:	6838      	ldr	r0, [r7, #0]
    cd84:	4b22      	ldr	r3, [pc, #136]	; (ce10 <_tcc_timer_init+0xec>)
    cd86:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    cd88:	68fb      	ldr	r3, [r7, #12]
    cd8a:	689b      	ldr	r3, [r3, #8]
    cd8c:	4619      	mov	r1, r3
    cd8e:	6838      	ldr	r0, [r7, #0]
    cd90:	4b20      	ldr	r3, [pc, #128]	; (ce14 <_tcc_timer_init+0xf0>)
    cd92:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    cd94:	68fb      	ldr	r3, [r7, #12]
    cd96:	7b1b      	ldrb	r3, [r3, #12]
    cd98:	4619      	mov	r1, r3
    cd9a:	6838      	ldr	r0, [r7, #0]
    cd9c:	4b1e      	ldr	r3, [pc, #120]	; (ce18 <_tcc_timer_init+0xf4>)
    cd9e:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    cda0:	68fb      	ldr	r3, [r7, #12]
    cda2:	7b5b      	ldrb	r3, [r3, #13]
    cda4:	4619      	mov	r1, r3
    cda6:	6838      	ldr	r0, [r7, #0]
    cda8:	4b1c      	ldr	r3, [pc, #112]	; (ce1c <_tcc_timer_init+0xf8>)
    cdaa:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    cdac:	68fb      	ldr	r3, [r7, #12]
    cdae:	691b      	ldr	r3, [r3, #16]
    cdb0:	4619      	mov	r1, r3
    cdb2:	6838      	ldr	r0, [r7, #0]
    cdb4:	4b1a      	ldr	r3, [pc, #104]	; (ce20 <_tcc_timer_init+0xfc>)
    cdb6:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    cdb8:	68fb      	ldr	r3, [r7, #12]
    cdba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    cdbc:	4619      	mov	r1, r3
    cdbe:	6838      	ldr	r0, [r7, #0]
    cdc0:	4b18      	ldr	r3, [pc, #96]	; (ce24 <_tcc_timer_init+0x100>)
    cdc2:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    cdc4:	6838      	ldr	r0, [r7, #0]
    cdc6:	4b18      	ldr	r3, [pc, #96]	; (ce28 <_tcc_timer_init+0x104>)
    cdc8:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    cdca:	6879      	ldr	r1, [r7, #4]
    cdcc:	6838      	ldr	r0, [r7, #0]
    cdce:	4b17      	ldr	r3, [pc, #92]	; (ce2c <_tcc_timer_init+0x108>)
    cdd0:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    cdd2:	68fb      	ldr	r3, [r7, #12]
    cdd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cdd8:	4618      	mov	r0, r3
    cdda:	4b15      	ldr	r3, [pc, #84]	; (ce30 <_tcc_timer_init+0x10c>)
    cddc:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    cdde:	68fb      	ldr	r3, [r7, #12]
    cde0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cde4:	4618      	mov	r0, r3
    cde6:	4b13      	ldr	r3, [pc, #76]	; (ce34 <_tcc_timer_init+0x110>)
    cde8:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    cdea:	68fb      	ldr	r3, [r7, #12]
    cdec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cdf0:	4618      	mov	r0, r3
    cdf2:	4b11      	ldr	r3, [pc, #68]	; (ce38 <_tcc_timer_init+0x114>)
    cdf4:	4798      	blx	r3

	return ERR_NONE;
    cdf6:	2300      	movs	r3, #0
}
    cdf8:	4618      	mov	r0, r3
    cdfa:	3710      	adds	r7, #16
    cdfc:	46bd      	mov	sp, r7
    cdfe:	bd80      	pop	{r7, pc}
    ce00:	0000cfed 	.word	0x0000cfed
    ce04:	0000cabd 	.word	0x0000cabd
    ce08:	0000cc0d 	.word	0x0000cc0d
    ce0c:	0000cbe5 	.word	0x0000cbe5
    ce10:	0000ca99 	.word	0x0000ca99
    ce14:	0000cc3d 	.word	0x0000cc3d
    ce18:	0000cb25 	.word	0x0000cb25
    ce1c:	0000cc61 	.word	0x0000cc61
    ce20:	0000cc7f 	.word	0x0000cc7f
    ce24:	0000cc9d 	.word	0x0000cc9d
    ce28:	0000cb43 	.word	0x0000cb43
    ce2c:	0000cce1 	.word	0x0000cce1
    ce30:	0000ca19 	.word	0x0000ca19
    ce34:	0000ca5d 	.word	0x0000ca5d
    ce38:	0000c9dd 	.word	0x0000c9dd

0000ce3c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    ce3c:	b580      	push	{r7, lr}
    ce3e:	b084      	sub	sp, #16
    ce40:	af00      	add	r7, sp, #0
    ce42:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    ce44:	687b      	ldr	r3, [r7, #4]
    ce46:	68db      	ldr	r3, [r3, #12]
    ce48:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    ce4a:	68f8      	ldr	r0, [r7, #12]
    ce4c:	4b0a      	ldr	r3, [pc, #40]	; (ce78 <_tcc_timer_deinit+0x3c>)
    ce4e:	4798      	blx	r3
    ce50:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    ce52:	68bb      	ldr	r3, [r7, #8]
    ce54:	2b00      	cmp	r3, #0
    ce56:	d00b      	beq.n	ce70 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    ce58:	68bb      	ldr	r3, [r7, #8]
    ce5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    ce5e:	4618      	mov	r0, r3
    ce60:	4b06      	ldr	r3, [pc, #24]	; (ce7c <_tcc_timer_deinit+0x40>)
    ce62:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    ce64:	68f8      	ldr	r0, [r7, #12]
    ce66:	4b06      	ldr	r3, [pc, #24]	; (ce80 <_tcc_timer_deinit+0x44>)
    ce68:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    ce6a:	68f8      	ldr	r0, [r7, #12]
    ce6c:	4b05      	ldr	r3, [pc, #20]	; (ce84 <_tcc_timer_deinit+0x48>)
    ce6e:	4798      	blx	r3
	}
}
    ce70:	bf00      	nop
    ce72:	3710      	adds	r7, #16
    ce74:	46bd      	mov	sp, r7
    ce76:	bd80      	pop	{r7, pc}
    ce78:	0000cfed 	.word	0x0000cfed
    ce7c:	0000ca19 	.word	0x0000ca19
    ce80:	0000cbe5 	.word	0x0000cbe5
    ce84:	0000cb5d 	.word	0x0000cb5d

0000ce88 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    ce88:	b580      	push	{r7, lr}
    ce8a:	b082      	sub	sp, #8
    ce8c:	af00      	add	r7, sp, #0
    ce8e:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    ce90:	687b      	ldr	r3, [r7, #4]
    ce92:	68db      	ldr	r3, [r3, #12]
    ce94:	4618      	mov	r0, r3
    ce96:	4b03      	ldr	r3, [pc, #12]	; (cea4 <_tcc_timer_start+0x1c>)
    ce98:	4798      	blx	r3
}
    ce9a:	bf00      	nop
    ce9c:	3708      	adds	r7, #8
    ce9e:	46bd      	mov	sp, r7
    cea0:	bd80      	pop	{r7, pc}
    cea2:	bf00      	nop
    cea4:	0000cb85 	.word	0x0000cb85

0000cea8 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    cea8:	b580      	push	{r7, lr}
    ceaa:	b082      	sub	sp, #8
    ceac:	af00      	add	r7, sp, #0
    ceae:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    ceb0:	687b      	ldr	r3, [r7, #4]
    ceb2:	68db      	ldr	r3, [r3, #12]
    ceb4:	4618      	mov	r0, r3
    ceb6:	4b03      	ldr	r3, [pc, #12]	; (cec4 <_tcc_timer_stop+0x1c>)
    ceb8:	4798      	blx	r3
}
    ceba:	bf00      	nop
    cebc:	3708      	adds	r7, #8
    cebe:	46bd      	mov	sp, r7
    cec0:	bd80      	pop	{r7, pc}
    cec2:	bf00      	nop
    cec4:	0000cbe5 	.word	0x0000cbe5

0000cec8 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    cec8:	b580      	push	{r7, lr}
    ceca:	b082      	sub	sp, #8
    cecc:	af00      	add	r7, sp, #0
    cece:	6078      	str	r0, [r7, #4]
    ced0:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    ced2:	687b      	ldr	r3, [r7, #4]
    ced4:	68db      	ldr	r3, [r3, #12]
    ced6:	6839      	ldr	r1, [r7, #0]
    ced8:	4618      	mov	r0, r3
    ceda:	4b03      	ldr	r3, [pc, #12]	; (cee8 <_tcc_timer_set_period+0x20>)
    cedc:	4798      	blx	r3
}
    cede:	bf00      	nop
    cee0:	3708      	adds	r7, #8
    cee2:	46bd      	mov	sp, r7
    cee4:	bd80      	pop	{r7, pc}
    cee6:	bf00      	nop
    cee8:	0000cc9d 	.word	0x0000cc9d

0000ceec <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    ceec:	b580      	push	{r7, lr}
    ceee:	b082      	sub	sp, #8
    cef0:	af00      	add	r7, sp, #0
    cef2:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    cef4:	687b      	ldr	r3, [r7, #4]
    cef6:	68db      	ldr	r3, [r3, #12]
    cef8:	4618      	mov	r0, r3
    cefa:	4b03      	ldr	r3, [pc, #12]	; (cf08 <_tcc_timer_get_period+0x1c>)
    cefc:	4798      	blx	r3
    cefe:	4603      	mov	r3, r0
}
    cf00:	4618      	mov	r0, r3
    cf02:	3708      	adds	r7, #8
    cf04:	46bd      	mov	sp, r7
    cf06:	bd80      	pop	{r7, pc}
    cf08:	0000ccc1 	.word	0x0000ccc1

0000cf0c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    cf0c:	b580      	push	{r7, lr}
    cf0e:	b082      	sub	sp, #8
    cf10:	af00      	add	r7, sp, #0
    cf12:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    cf14:	687b      	ldr	r3, [r7, #4]
    cf16:	68db      	ldr	r3, [r3, #12]
    cf18:	4618      	mov	r0, r3
    cf1a:	4b03      	ldr	r3, [pc, #12]	; (cf28 <_tcc_timer_is_started+0x1c>)
    cf1c:	4798      	blx	r3
    cf1e:	4603      	mov	r3, r0
}
    cf20:	4618      	mov	r0, r3
    cf22:	3708      	adds	r7, #8
    cf24:	46bd      	mov	sp, r7
    cf26:	bd80      	pop	{r7, pc}
    cf28:	0000cbad 	.word	0x0000cbad

0000cf2c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    cf2c:	b480      	push	{r7}
    cf2e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    cf30:	4b02      	ldr	r3, [pc, #8]	; (cf3c <_tcc_get_timer+0x10>)
}
    cf32:	4618      	mov	r0, r3
    cf34:	46bd      	mov	sp, r7
    cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf3a:	4770      	bx	lr
    cf3c:	20000124 	.word	0x20000124

0000cf40 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    cf40:	b580      	push	{r7, lr}
    cf42:	b084      	sub	sp, #16
    cf44:	af00      	add	r7, sp, #0
    cf46:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    cf48:	687b      	ldr	r3, [r7, #4]
    cf4a:	68db      	ldr	r3, [r3, #12]
    cf4c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    cf4e:	68f8      	ldr	r0, [r7, #12]
    cf50:	4b08      	ldr	r3, [pc, #32]	; (cf74 <_tcc_timer_set_irq+0x34>)
    cf52:	4798      	blx	r3
    cf54:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    cf56:	68bb      	ldr	r3, [r7, #8]
    cf58:	2b00      	cmp	r3, #0
    cf5a:	d006      	beq.n	cf6a <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    cf5c:	68bb      	ldr	r3, [r7, #8]
    cf5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cf62:	b2db      	uxtb	r3, r3
    cf64:	4618      	mov	r0, r3
    cf66:	4b04      	ldr	r3, [pc, #16]	; (cf78 <_tcc_timer_set_irq+0x38>)
    cf68:	4798      	blx	r3
	}
}
    cf6a:	bf00      	nop
    cf6c:	3710      	adds	r7, #16
    cf6e:	46bd      	mov	sp, r7
    cf70:	bd80      	pop	{r7, pc}
    cf72:	bf00      	nop
    cf74:	0000cfed 	.word	0x0000cfed
    cf78:	000085a9 	.word	0x000085a9

0000cf7c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    cf7c:	b580      	push	{r7, lr}
    cf7e:	b084      	sub	sp, #16
    cf80:	af00      	add	r7, sp, #0
    cf82:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    cf84:	687b      	ldr	r3, [r7, #4]
    cf86:	68db      	ldr	r3, [r3, #12]
    cf88:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    cf8a:	68f8      	ldr	r0, [r7, #12]
    cf8c:	4b07      	ldr	r3, [pc, #28]	; (cfac <tcc_interrupt_handler+0x30>)
    cf8e:	4798      	blx	r3
    cf90:	4603      	mov	r3, r0
    cf92:	2b00      	cmp	r3, #0
    cf94:	d006      	beq.n	cfa4 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    cf96:	68f8      	ldr	r0, [r7, #12]
    cf98:	4b05      	ldr	r3, [pc, #20]	; (cfb0 <tcc_interrupt_handler+0x34>)
    cf9a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    cf9c:	687b      	ldr	r3, [r7, #4]
    cf9e:	681b      	ldr	r3, [r3, #0]
    cfa0:	6878      	ldr	r0, [r7, #4]
    cfa2:	4798      	blx	r3
	}
}
    cfa4:	bf00      	nop
    cfa6:	3710      	adds	r7, #16
    cfa8:	46bd      	mov	sp, r7
    cfaa:	bd80      	pop	{r7, pc}
    cfac:	0000cae5 	.word	0x0000cae5
    cfb0:	0000cb0b 	.word	0x0000cb0b

0000cfb4 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    cfb4:	b580      	push	{r7, lr}
    cfb6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    cfb8:	4b03      	ldr	r3, [pc, #12]	; (cfc8 <TCC0_0_Handler+0x14>)
    cfba:	681b      	ldr	r3, [r3, #0]
    cfbc:	4618      	mov	r0, r3
    cfbe:	4b03      	ldr	r3, [pc, #12]	; (cfcc <TCC0_0_Handler+0x18>)
    cfc0:	4798      	blx	r3
}
    cfc2:	bf00      	nop
    cfc4:	bd80      	pop	{r7, pc}
    cfc6:	bf00      	nop
    cfc8:	20008ac8 	.word	0x20008ac8
    cfcc:	0000cf7d 	.word	0x0000cf7d

0000cfd0 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    cfd0:	b580      	push	{r7, lr}
    cfd2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    cfd4:	4b03      	ldr	r3, [pc, #12]	; (cfe4 <TCC1_0_Handler+0x14>)
    cfd6:	681b      	ldr	r3, [r3, #0]
    cfd8:	4618      	mov	r0, r3
    cfda:	4b03      	ldr	r3, [pc, #12]	; (cfe8 <TCC1_0_Handler+0x18>)
    cfdc:	4798      	blx	r3
}
    cfde:	bf00      	nop
    cfe0:	bd80      	pop	{r7, pc}
    cfe2:	bf00      	nop
    cfe4:	20008acc 	.word	0x20008acc
    cfe8:	0000cf7d 	.word	0x0000cf7d

0000cfec <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    cfec:	b480      	push	{r7}
    cfee:	b085      	sub	sp, #20
    cff0:	af00      	add	r7, sp, #0
    cff2:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    cff4:	2300      	movs	r3, #0
    cff6:	73fb      	strb	r3, [r7, #15]
    cff8:	e015      	b.n	d026 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    cffa:	7bfa      	ldrb	r2, [r7, #15]
    cffc:	490f      	ldr	r1, [pc, #60]	; (d03c <_get_tcc_cfg+0x50>)
    cffe:	4613      	mov	r3, r2
    d000:	005b      	lsls	r3, r3, #1
    d002:	4413      	add	r3, r2
    d004:	011b      	lsls	r3, r3, #4
    d006:	440b      	add	r3, r1
    d008:	681a      	ldr	r2, [r3, #0]
    d00a:	687b      	ldr	r3, [r7, #4]
    d00c:	429a      	cmp	r2, r3
    d00e:	d107      	bne.n	d020 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    d010:	7bfa      	ldrb	r2, [r7, #15]
    d012:	4613      	mov	r3, r2
    d014:	005b      	lsls	r3, r3, #1
    d016:	4413      	add	r3, r2
    d018:	011b      	lsls	r3, r3, #4
    d01a:	4a08      	ldr	r2, [pc, #32]	; (d03c <_get_tcc_cfg+0x50>)
    d01c:	4413      	add	r3, r2
    d01e:	e006      	b.n	d02e <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    d020:	7bfb      	ldrb	r3, [r7, #15]
    d022:	3301      	adds	r3, #1
    d024:	73fb      	strb	r3, [r7, #15]
    d026:	7bfb      	ldrb	r3, [r7, #15]
    d028:	2b01      	cmp	r3, #1
    d02a:	d9e6      	bls.n	cffa <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    d02c:	2300      	movs	r3, #0
}
    d02e:	4618      	mov	r0, r3
    d030:	3714      	adds	r7, #20
    d032:	46bd      	mov	sp, r7
    d034:	f85d 7b04 	ldr.w	r7, [sp], #4
    d038:	4770      	bx	lr
    d03a:	bf00      	nop
    d03c:	200000c4 	.word	0x200000c4

0000d040 <__NVIC_EnableIRQ>:
{
    d040:	b480      	push	{r7}
    d042:	b083      	sub	sp, #12
    d044:	af00      	add	r7, sp, #0
    d046:	4603      	mov	r3, r0
    d048:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    d04a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d04e:	2b00      	cmp	r3, #0
    d050:	db0b      	blt.n	d06a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d052:	4909      	ldr	r1, [pc, #36]	; (d078 <__NVIC_EnableIRQ+0x38>)
    d054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d058:	095b      	lsrs	r3, r3, #5
    d05a:	88fa      	ldrh	r2, [r7, #6]
    d05c:	f002 021f 	and.w	r2, r2, #31
    d060:	2001      	movs	r0, #1
    d062:	fa00 f202 	lsl.w	r2, r0, r2
    d066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d06a:	bf00      	nop
    d06c:	370c      	adds	r7, #12
    d06e:	46bd      	mov	sp, r7
    d070:	f85d 7b04 	ldr.w	r7, [sp], #4
    d074:	4770      	bx	lr
    d076:	bf00      	nop
    d078:	e000e100 	.word	0xe000e100

0000d07c <__NVIC_DisableIRQ>:
{
    d07c:	b480      	push	{r7}
    d07e:	b083      	sub	sp, #12
    d080:	af00      	add	r7, sp, #0
    d082:	4603      	mov	r3, r0
    d084:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    d086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d08a:	2b00      	cmp	r3, #0
    d08c:	db10      	blt.n	d0b0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d08e:	490b      	ldr	r1, [pc, #44]	; (d0bc <__NVIC_DisableIRQ+0x40>)
    d090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d094:	095b      	lsrs	r3, r3, #5
    d096:	88fa      	ldrh	r2, [r7, #6]
    d098:	f002 021f 	and.w	r2, r2, #31
    d09c:	2001      	movs	r0, #1
    d09e:	fa00 f202 	lsl.w	r2, r0, r2
    d0a2:	3320      	adds	r3, #32
    d0a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    d0a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d0ac:	f3bf 8f6f 	isb	sy
}
    d0b0:	bf00      	nop
    d0b2:	370c      	adds	r7, #12
    d0b4:	46bd      	mov	sp, r7
    d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0ba:	4770      	bx	lr
    d0bc:	e000e100 	.word	0xe000e100

0000d0c0 <__NVIC_ClearPendingIRQ>:
{
    d0c0:	b480      	push	{r7}
    d0c2:	b083      	sub	sp, #12
    d0c4:	af00      	add	r7, sp, #0
    d0c6:	4603      	mov	r3, r0
    d0c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    d0ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d0ce:	2b00      	cmp	r3, #0
    d0d0:	db0c      	blt.n	d0ec <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d0d2:	4909      	ldr	r1, [pc, #36]	; (d0f8 <__NVIC_ClearPendingIRQ+0x38>)
    d0d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d0d8:	095b      	lsrs	r3, r3, #5
    d0da:	88fa      	ldrh	r2, [r7, #6]
    d0dc:	f002 021f 	and.w	r2, r2, #31
    d0e0:	2001      	movs	r0, #1
    d0e2:	fa00 f202 	lsl.w	r2, r0, r2
    d0e6:	3360      	adds	r3, #96	; 0x60
    d0e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d0ec:	bf00      	nop
    d0ee:	370c      	adds	r7, #12
    d0f0:	46bd      	mov	sp, r7
    d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0f6:	4770      	bx	lr
    d0f8:	e000e100 	.word	0xe000e100

0000d0fc <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    d0fc:	b480      	push	{r7}
    d0fe:	b083      	sub	sp, #12
    d100:	af00      	add	r7, sp, #0
    d102:	6078      	str	r0, [r7, #4]
    d104:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    d106:	bf00      	nop
    d108:	687b      	ldr	r3, [r7, #4]
    d10a:	691a      	ldr	r2, [r3, #16]
    d10c:	683b      	ldr	r3, [r7, #0]
    d10e:	4013      	ands	r3, r2
    d110:	2b00      	cmp	r3, #0
    d112:	d1f9      	bne.n	d108 <hri_tc_wait_for_sync+0xc>
	};
}
    d114:	bf00      	nop
    d116:	370c      	adds	r7, #12
    d118:	46bd      	mov	sp, r7
    d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d11e:	4770      	bx	lr

0000d120 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    d120:	b480      	push	{r7}
    d122:	b083      	sub	sp, #12
    d124:	af00      	add	r7, sp, #0
    d126:	6078      	str	r0, [r7, #4]
    d128:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    d12a:	687b      	ldr	r3, [r7, #4]
    d12c:	691a      	ldr	r2, [r3, #16]
    d12e:	683b      	ldr	r3, [r7, #0]
    d130:	4013      	ands	r3, r2
    d132:	2b00      	cmp	r3, #0
    d134:	bf14      	ite	ne
    d136:	2301      	movne	r3, #1
    d138:	2300      	moveq	r3, #0
    d13a:	b2db      	uxtb	r3, r3
}
    d13c:	4618      	mov	r0, r3
    d13e:	370c      	adds	r7, #12
    d140:	46bd      	mov	sp, r7
    d142:	f85d 7b04 	ldr.w	r7, [sp], #4
    d146:	4770      	bx	lr

0000d148 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    d148:	b480      	push	{r7}
    d14a:	b083      	sub	sp, #12
    d14c:	af00      	add	r7, sp, #0
    d14e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    d150:	687b      	ldr	r3, [r7, #4]
    d152:	7a9b      	ldrb	r3, [r3, #10]
    d154:	b2db      	uxtb	r3, r3
    d156:	f003 0301 	and.w	r3, r3, #1
    d15a:	2b00      	cmp	r3, #0
    d15c:	bf14      	ite	ne
    d15e:	2301      	movne	r3, #1
    d160:	2300      	moveq	r3, #0
    d162:	b2db      	uxtb	r3, r3
}
    d164:	4618      	mov	r0, r3
    d166:	370c      	adds	r7, #12
    d168:	46bd      	mov	sp, r7
    d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d16e:	4770      	bx	lr

0000d170 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    d170:	b480      	push	{r7}
    d172:	b083      	sub	sp, #12
    d174:	af00      	add	r7, sp, #0
    d176:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    d178:	687b      	ldr	r3, [r7, #4]
    d17a:	2201      	movs	r2, #1
    d17c:	729a      	strb	r2, [r3, #10]
}
    d17e:	bf00      	nop
    d180:	370c      	adds	r7, #12
    d182:	46bd      	mov	sp, r7
    d184:	f85d 7b04 	ldr.w	r7, [sp], #4
    d188:	4770      	bx	lr

0000d18a <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    d18a:	b480      	push	{r7}
    d18c:	b083      	sub	sp, #12
    d18e:	af00      	add	r7, sp, #0
    d190:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    d192:	687b      	ldr	r3, [r7, #4]
    d194:	2202      	movs	r2, #2
    d196:	729a      	strb	r2, [r3, #10]
}
    d198:	bf00      	nop
    d19a:	370c      	adds	r7, #12
    d19c:	46bd      	mov	sp, r7
    d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1a2:	4770      	bx	lr

0000d1a4 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    d1a4:	b480      	push	{r7}
    d1a6:	b083      	sub	sp, #12
    d1a8:	af00      	add	r7, sp, #0
    d1aa:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    d1ac:	687b      	ldr	r3, [r7, #4]
    d1ae:	2201      	movs	r2, #1
    d1b0:	725a      	strb	r2, [r3, #9]
}
    d1b2:	bf00      	nop
    d1b4:	370c      	adds	r7, #12
    d1b6:	46bd      	mov	sp, r7
    d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1bc:	4770      	bx	lr

0000d1be <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    d1be:	b480      	push	{r7}
    d1c0:	b083      	sub	sp, #12
    d1c2:	af00      	add	r7, sp, #0
    d1c4:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    d1c6:	687b      	ldr	r3, [r7, #4]
    d1c8:	7a5b      	ldrb	r3, [r3, #9]
    d1ca:	b2db      	uxtb	r3, r3
    d1cc:	085b      	lsrs	r3, r3, #1
    d1ce:	f003 0301 	and.w	r3, r3, #1
    d1d2:	2b00      	cmp	r3, #0
    d1d4:	bf14      	ite	ne
    d1d6:	2301      	movne	r3, #1
    d1d8:	2300      	moveq	r3, #0
    d1da:	b2db      	uxtb	r3, r3
}
    d1dc:	4618      	mov	r0, r3
    d1de:	370c      	adds	r7, #12
    d1e0:	46bd      	mov	sp, r7
    d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1e6:	4770      	bx	lr

0000d1e8 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    d1e8:	b580      	push	{r7, lr}
    d1ea:	b082      	sub	sp, #8
    d1ec:	af00      	add	r7, sp, #0
    d1ee:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    d1f0:	687b      	ldr	r3, [r7, #4]
    d1f2:	681b      	ldr	r3, [r3, #0]
    d1f4:	f043 0201 	orr.w	r2, r3, #1
    d1f8:	687b      	ldr	r3, [r7, #4]
    d1fa:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    d1fc:	2101      	movs	r1, #1
    d1fe:	6878      	ldr	r0, [r7, #4]
    d200:	4b02      	ldr	r3, [pc, #8]	; (d20c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    d202:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d204:	bf00      	nop
    d206:	3708      	adds	r7, #8
    d208:	46bd      	mov	sp, r7
    d20a:	bd80      	pop	{r7, pc}
    d20c:	0000d0fd 	.word	0x0000d0fd

0000d210 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    d210:	b580      	push	{r7, lr}
    d212:	b082      	sub	sp, #8
    d214:	af00      	add	r7, sp, #0
    d216:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    d218:	687b      	ldr	r3, [r7, #4]
    d21a:	681b      	ldr	r3, [r3, #0]
    d21c:	f043 0202 	orr.w	r2, r3, #2
    d220:	687b      	ldr	r3, [r7, #4]
    d222:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d224:	2103      	movs	r1, #3
    d226:	6878      	ldr	r0, [r7, #4]
    d228:	4b02      	ldr	r3, [pc, #8]	; (d234 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    d22a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d22c:	bf00      	nop
    d22e:	3708      	adds	r7, #8
    d230:	46bd      	mov	sp, r7
    d232:	bd80      	pop	{r7, pc}
    d234:	0000d0fd 	.word	0x0000d0fd

0000d238 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    d238:	b580      	push	{r7, lr}
    d23a:	b084      	sub	sp, #16
    d23c:	af00      	add	r7, sp, #0
    d23e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d240:	2103      	movs	r1, #3
    d242:	6878      	ldr	r0, [r7, #4]
    d244:	4b09      	ldr	r3, [pc, #36]	; (d26c <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    d246:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    d248:	687b      	ldr	r3, [r7, #4]
    d24a:	681b      	ldr	r3, [r3, #0]
    d24c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    d24e:	68fb      	ldr	r3, [r7, #12]
    d250:	085b      	lsrs	r3, r3, #1
    d252:	f003 0301 	and.w	r3, r3, #1
    d256:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    d258:	68fb      	ldr	r3, [r7, #12]
    d25a:	2b00      	cmp	r3, #0
    d25c:	bf14      	ite	ne
    d25e:	2301      	movne	r3, #1
    d260:	2300      	moveq	r3, #0
    d262:	b2db      	uxtb	r3, r3
}
    d264:	4618      	mov	r0, r3
    d266:	3710      	adds	r7, #16
    d268:	46bd      	mov	sp, r7
    d26a:	bd80      	pop	{r7, pc}
    d26c:	0000d0fd 	.word	0x0000d0fd

0000d270 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    d270:	b580      	push	{r7, lr}
    d272:	b082      	sub	sp, #8
    d274:	af00      	add	r7, sp, #0
    d276:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    d278:	687b      	ldr	r3, [r7, #4]
    d27a:	681b      	ldr	r3, [r3, #0]
    d27c:	f023 0202 	bic.w	r2, r3, #2
    d280:	687b      	ldr	r3, [r7, #4]
    d282:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d284:	2103      	movs	r1, #3
    d286:	6878      	ldr	r0, [r7, #4]
    d288:	4b02      	ldr	r3, [pc, #8]	; (d294 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    d28a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d28c:	bf00      	nop
    d28e:	3708      	adds	r7, #8
    d290:	46bd      	mov	sp, r7
    d292:	bd80      	pop	{r7, pc}
    d294:	0000d0fd 	.word	0x0000d0fd

0000d298 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    d298:	b480      	push	{r7}
    d29a:	b085      	sub	sp, #20
    d29c:	af00      	add	r7, sp, #0
    d29e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    d2a0:	687b      	ldr	r3, [r7, #4]
    d2a2:	681b      	ldr	r3, [r3, #0]
    d2a4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    d2a6:	68fb      	ldr	r3, [r7, #12]
    d2a8:	089b      	lsrs	r3, r3, #2
    d2aa:	f003 0303 	and.w	r3, r3, #3
    d2ae:	60fb      	str	r3, [r7, #12]
	return tmp;
    d2b0:	68fb      	ldr	r3, [r7, #12]
}
    d2b2:	4618      	mov	r0, r3
    d2b4:	3714      	adds	r7, #20
    d2b6:	46bd      	mov	sp, r7
    d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2bc:	4770      	bx	lr
	...

0000d2c0 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    d2c0:	b580      	push	{r7, lr}
    d2c2:	b084      	sub	sp, #16
    d2c4:	af00      	add	r7, sp, #0
    d2c6:	6078      	str	r0, [r7, #4]
    d2c8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d2ca:	2103      	movs	r1, #3
    d2cc:	6878      	ldr	r0, [r7, #4]
    d2ce:	4b07      	ldr	r3, [pc, #28]	; (d2ec <hri_tc_get_CTRLA_reg+0x2c>)
    d2d0:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    d2d2:	687b      	ldr	r3, [r7, #4]
    d2d4:	681b      	ldr	r3, [r3, #0]
    d2d6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    d2d8:	68fa      	ldr	r2, [r7, #12]
    d2da:	683b      	ldr	r3, [r7, #0]
    d2dc:	4013      	ands	r3, r2
    d2de:	60fb      	str	r3, [r7, #12]
	return tmp;
    d2e0:	68fb      	ldr	r3, [r7, #12]
}
    d2e2:	4618      	mov	r0, r3
    d2e4:	3710      	adds	r7, #16
    d2e6:	46bd      	mov	sp, r7
    d2e8:	bd80      	pop	{r7, pc}
    d2ea:	bf00      	nop
    d2ec:	0000d0fd 	.word	0x0000d0fd

0000d2f0 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    d2f0:	b580      	push	{r7, lr}
    d2f2:	b082      	sub	sp, #8
    d2f4:	af00      	add	r7, sp, #0
    d2f6:	6078      	str	r0, [r7, #4]
    d2f8:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    d2fa:	687b      	ldr	r3, [r7, #4]
    d2fc:	683a      	ldr	r2, [r7, #0]
    d2fe:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d300:	2103      	movs	r1, #3
    d302:	6878      	ldr	r0, [r7, #4]
    d304:	4b02      	ldr	r3, [pc, #8]	; (d310 <hri_tc_write_CTRLA_reg+0x20>)
    d306:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d308:	bf00      	nop
    d30a:	3708      	adds	r7, #8
    d30c:	46bd      	mov	sp, r7
    d30e:	bd80      	pop	{r7, pc}
    d310:	0000d0fd 	.word	0x0000d0fd

0000d314 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    d314:	b480      	push	{r7}
    d316:	b083      	sub	sp, #12
    d318:	af00      	add	r7, sp, #0
    d31a:	6078      	str	r0, [r7, #4]
    d31c:	460b      	mov	r3, r1
    d31e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    d320:	687b      	ldr	r3, [r7, #4]
    d322:	887a      	ldrh	r2, [r7, #2]
    d324:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    d326:	bf00      	nop
    d328:	370c      	adds	r7, #12
    d32a:	46bd      	mov	sp, r7
    d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d330:	4770      	bx	lr

0000d332 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    d332:	b480      	push	{r7}
    d334:	b083      	sub	sp, #12
    d336:	af00      	add	r7, sp, #0
    d338:	6078      	str	r0, [r7, #4]
    d33a:	460b      	mov	r3, r1
    d33c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    d33e:	687b      	ldr	r3, [r7, #4]
    d340:	78fa      	ldrb	r2, [r7, #3]
    d342:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    d344:	bf00      	nop
    d346:	370c      	adds	r7, #12
    d348:	46bd      	mov	sp, r7
    d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d34e:	4770      	bx	lr

0000d350 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    d350:	b480      	push	{r7}
    d352:	b083      	sub	sp, #12
    d354:	af00      	add	r7, sp, #0
    d356:	6078      	str	r0, [r7, #4]
    d358:	460b      	mov	r3, r1
    d35a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    d35c:	687b      	ldr	r3, [r7, #4]
    d35e:	78fa      	ldrb	r2, [r7, #3]
    d360:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    d362:	bf00      	nop
    d364:	370c      	adds	r7, #12
    d366:	46bd      	mov	sp, r7
    d368:	f85d 7b04 	ldr.w	r7, [sp], #4
    d36c:	4770      	bx	lr
	...

0000d370 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    d370:	b580      	push	{r7, lr}
    d372:	b082      	sub	sp, #8
    d374:	af00      	add	r7, sp, #0
    d376:	6078      	str	r0, [r7, #4]
    d378:	460b      	mov	r3, r1
    d37a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    d37c:	687b      	ldr	r3, [r7, #4]
    d37e:	78fa      	ldrb	r2, [r7, #3]
    d380:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    d382:	2120      	movs	r1, #32
    d384:	6878      	ldr	r0, [r7, #4]
    d386:	4b03      	ldr	r3, [pc, #12]	; (d394 <hri_tccount8_write_PER_reg+0x24>)
    d388:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d38a:	bf00      	nop
    d38c:	3708      	adds	r7, #8
    d38e:	46bd      	mov	sp, r7
    d390:	bd80      	pop	{r7, pc}
    d392:	bf00      	nop
    d394:	0000d0fd 	.word	0x0000d0fd

0000d398 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    d398:	b580      	push	{r7, lr}
    d39a:	b082      	sub	sp, #8
    d39c:	af00      	add	r7, sp, #0
    d39e:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    d3a0:	2120      	movs	r1, #32
    d3a2:	6878      	ldr	r0, [r7, #4]
    d3a4:	4b04      	ldr	r3, [pc, #16]	; (d3b8 <hri_tccount8_read_PER_reg+0x20>)
    d3a6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    d3a8:	687b      	ldr	r3, [r7, #4]
    d3aa:	7edb      	ldrb	r3, [r3, #27]
    d3ac:	b2db      	uxtb	r3, r3
}
    d3ae:	4618      	mov	r0, r3
    d3b0:	3708      	adds	r7, #8
    d3b2:	46bd      	mov	sp, r7
    d3b4:	bd80      	pop	{r7, pc}
    d3b6:	bf00      	nop
    d3b8:	0000d0fd 	.word	0x0000d0fd

0000d3bc <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    d3bc:	b580      	push	{r7, lr}
    d3be:	b082      	sub	sp, #8
    d3c0:	af00      	add	r7, sp, #0
    d3c2:	6078      	str	r0, [r7, #4]
    d3c4:	460b      	mov	r3, r1
    d3c6:	70fb      	strb	r3, [r7, #3]
    d3c8:	4613      	mov	r3, r2
    d3ca:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    d3cc:	78fb      	ldrb	r3, [r7, #3]
    d3ce:	687a      	ldr	r2, [r7, #4]
    d3d0:	4413      	add	r3, r2
    d3d2:	78ba      	ldrb	r2, [r7, #2]
    d3d4:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d3d6:	21c0      	movs	r1, #192	; 0xc0
    d3d8:	6878      	ldr	r0, [r7, #4]
    d3da:	4b03      	ldr	r3, [pc, #12]	; (d3e8 <hri_tccount8_write_CC_reg+0x2c>)
    d3dc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d3de:	bf00      	nop
    d3e0:	3708      	adds	r7, #8
    d3e2:	46bd      	mov	sp, r7
    d3e4:	bd80      	pop	{r7, pc}
    d3e6:	bf00      	nop
    d3e8:	0000d0fd 	.word	0x0000d0fd

0000d3ec <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    d3ec:	b580      	push	{r7, lr}
    d3ee:	b082      	sub	sp, #8
    d3f0:	af00      	add	r7, sp, #0
    d3f2:	6078      	str	r0, [r7, #4]
    d3f4:	460b      	mov	r3, r1
    d3f6:	70fb      	strb	r3, [r7, #3]
    d3f8:	4613      	mov	r3, r2
    d3fa:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    d3fc:	78fb      	ldrb	r3, [r7, #3]
    d3fe:	687a      	ldr	r2, [r7, #4]
    d400:	330c      	adds	r3, #12
    d402:	005b      	lsls	r3, r3, #1
    d404:	4413      	add	r3, r2
    d406:	883a      	ldrh	r2, [r7, #0]
    d408:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d40a:	21c0      	movs	r1, #192	; 0xc0
    d40c:	6878      	ldr	r0, [r7, #4]
    d40e:	4b03      	ldr	r3, [pc, #12]	; (d41c <hri_tccount16_write_CC_reg+0x30>)
    d410:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d412:	bf00      	nop
    d414:	3708      	adds	r7, #8
    d416:	46bd      	mov	sp, r7
    d418:	bd80      	pop	{r7, pc}
    d41a:	bf00      	nop
    d41c:	0000d0fd 	.word	0x0000d0fd

0000d420 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    d420:	b580      	push	{r7, lr}
    d422:	b082      	sub	sp, #8
    d424:	af00      	add	r7, sp, #0
    d426:	6078      	str	r0, [r7, #4]
    d428:	460b      	mov	r3, r1
    d42a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d42c:	21c0      	movs	r1, #192	; 0xc0
    d42e:	6878      	ldr	r0, [r7, #4]
    d430:	4b06      	ldr	r3, [pc, #24]	; (d44c <hri_tccount16_read_CC_reg+0x2c>)
    d432:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    d434:	78fb      	ldrb	r3, [r7, #3]
    d436:	687a      	ldr	r2, [r7, #4]
    d438:	330c      	adds	r3, #12
    d43a:	005b      	lsls	r3, r3, #1
    d43c:	4413      	add	r3, r2
    d43e:	889b      	ldrh	r3, [r3, #4]
    d440:	b29b      	uxth	r3, r3
}
    d442:	4618      	mov	r0, r3
    d444:	3708      	adds	r7, #8
    d446:	46bd      	mov	sp, r7
    d448:	bd80      	pop	{r7, pc}
    d44a:	bf00      	nop
    d44c:	0000d0fd 	.word	0x0000d0fd

0000d450 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    d450:	b580      	push	{r7, lr}
    d452:	b084      	sub	sp, #16
    d454:	af00      	add	r7, sp, #0
    d456:	60f8      	str	r0, [r7, #12]
    d458:	460b      	mov	r3, r1
    d45a:	607a      	str	r2, [r7, #4]
    d45c:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    d45e:	7afb      	ldrb	r3, [r7, #11]
    d460:	68fa      	ldr	r2, [r7, #12]
    d462:	3306      	adds	r3, #6
    d464:	009b      	lsls	r3, r3, #2
    d466:	4413      	add	r3, r2
    d468:	687a      	ldr	r2, [r7, #4]
    d46a:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d46c:	21c0      	movs	r1, #192	; 0xc0
    d46e:	68f8      	ldr	r0, [r7, #12]
    d470:	4b02      	ldr	r3, [pc, #8]	; (d47c <hri_tccount32_write_CC_reg+0x2c>)
    d472:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d474:	bf00      	nop
    d476:	3710      	adds	r7, #16
    d478:	46bd      	mov	sp, r7
    d47a:	bd80      	pop	{r7, pc}
    d47c:	0000d0fd 	.word	0x0000d0fd

0000d480 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    d480:	b580      	push	{r7, lr}
    d482:	b082      	sub	sp, #8
    d484:	af00      	add	r7, sp, #0
    d486:	6078      	str	r0, [r7, #4]
    d488:	460b      	mov	r3, r1
    d48a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d48c:	21c0      	movs	r1, #192	; 0xc0
    d48e:	6878      	ldr	r0, [r7, #4]
    d490:	4b05      	ldr	r3, [pc, #20]	; (d4a8 <hri_tccount32_read_CC_reg+0x28>)
    d492:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    d494:	78fb      	ldrb	r3, [r7, #3]
    d496:	687a      	ldr	r2, [r7, #4]
    d498:	3306      	adds	r3, #6
    d49a:	009b      	lsls	r3, r3, #2
    d49c:	4413      	add	r3, r2
    d49e:	685b      	ldr	r3, [r3, #4]
}
    d4a0:	4618      	mov	r0, r3
    d4a2:	3708      	adds	r7, #8
    d4a4:	46bd      	mov	sp, r7
    d4a6:	bd80      	pop	{r7, pc}
    d4a8:	0000d0fd 	.word	0x0000d0fd

0000d4ac <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    d4ac:	b580      	push	{r7, lr}
    d4ae:	b084      	sub	sp, #16
    d4b0:	af00      	add	r7, sp, #0
    d4b2:	6078      	str	r0, [r7, #4]
    d4b4:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    d4b6:	6838      	ldr	r0, [r7, #0]
    d4b8:	4b93      	ldr	r3, [pc, #588]	; (d708 <_tc_timer_init+0x25c>)
    d4ba:	4798      	blx	r3
    d4bc:	4603      	mov	r3, r0
    d4be:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    d4c0:	687b      	ldr	r3, [r7, #4]
    d4c2:	683a      	ldr	r2, [r7, #0]
    d4c4:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    d4c6:	22a4      	movs	r2, #164	; 0xa4
    d4c8:	4990      	ldr	r1, [pc, #576]	; (d70c <_tc_timer_init+0x260>)
    d4ca:	2001      	movs	r0, #1
    d4cc:	4b90      	ldr	r3, [pc, #576]	; (d710 <_tc_timer_init+0x264>)
    d4ce:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    d4d0:	2101      	movs	r1, #1
    d4d2:	6838      	ldr	r0, [r7, #0]
    d4d4:	4b8f      	ldr	r3, [pc, #572]	; (d714 <_tc_timer_init+0x268>)
    d4d6:	4798      	blx	r3
    d4d8:	4603      	mov	r3, r0
    d4da:	f083 0301 	eor.w	r3, r3, #1
    d4de:	b2db      	uxtb	r3, r3
    d4e0:	2b00      	cmp	r3, #0
    d4e2:	d011      	beq.n	d508 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    d4e4:	2102      	movs	r1, #2
    d4e6:	6838      	ldr	r0, [r7, #0]
    d4e8:	4b8b      	ldr	r3, [pc, #556]	; (d718 <_tc_timer_init+0x26c>)
    d4ea:	4798      	blx	r3
    d4ec:	4603      	mov	r3, r0
    d4ee:	2b00      	cmp	r3, #0
    d4f0:	d006      	beq.n	d500 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    d4f2:	6838      	ldr	r0, [r7, #0]
    d4f4:	4b89      	ldr	r3, [pc, #548]	; (d71c <_tc_timer_init+0x270>)
    d4f6:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    d4f8:	2102      	movs	r1, #2
    d4fa:	6838      	ldr	r0, [r7, #0]
    d4fc:	4b88      	ldr	r3, [pc, #544]	; (d720 <_tc_timer_init+0x274>)
    d4fe:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    d500:	2101      	movs	r1, #1
    d502:	6838      	ldr	r0, [r7, #0]
    d504:	4b87      	ldr	r3, [pc, #540]	; (d724 <_tc_timer_init+0x278>)
    d506:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    d508:	2101      	movs	r1, #1
    d50a:	6838      	ldr	r0, [r7, #0]
    d50c:	4b84      	ldr	r3, [pc, #528]	; (d720 <_tc_timer_init+0x274>)
    d50e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    d510:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d514:	4984      	ldr	r1, [pc, #528]	; (d728 <_tc_timer_init+0x27c>)
    d516:	4613      	mov	r3, r2
    d518:	009b      	lsls	r3, r3, #2
    d51a:	4413      	add	r3, r2
    d51c:	009b      	lsls	r3, r3, #2
    d51e:	440b      	add	r3, r1
    d520:	3304      	adds	r3, #4
    d522:	681b      	ldr	r3, [r3, #0]
    d524:	4619      	mov	r1, r3
    d526:	6838      	ldr	r0, [r7, #0]
    d528:	4b7e      	ldr	r3, [pc, #504]	; (d724 <_tc_timer_init+0x278>)
    d52a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    d52c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d530:	497d      	ldr	r1, [pc, #500]	; (d728 <_tc_timer_init+0x27c>)
    d532:	4613      	mov	r3, r2
    d534:	009b      	lsls	r3, r3, #2
    d536:	4413      	add	r3, r2
    d538:	009b      	lsls	r3, r3, #2
    d53a:	440b      	add	r3, r1
    d53c:	330a      	adds	r3, #10
    d53e:	781b      	ldrb	r3, [r3, #0]
    d540:	4619      	mov	r1, r3
    d542:	6838      	ldr	r0, [r7, #0]
    d544:	4b79      	ldr	r3, [pc, #484]	; (d72c <_tc_timer_init+0x280>)
    d546:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    d548:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d54c:	4976      	ldr	r1, [pc, #472]	; (d728 <_tc_timer_init+0x27c>)
    d54e:	4613      	mov	r3, r2
    d550:	009b      	lsls	r3, r3, #2
    d552:	4413      	add	r3, r2
    d554:	009b      	lsls	r3, r3, #2
    d556:	440b      	add	r3, r1
    d558:	3308      	adds	r3, #8
    d55a:	881b      	ldrh	r3, [r3, #0]
    d55c:	4619      	mov	r1, r3
    d55e:	6838      	ldr	r0, [r7, #0]
    d560:	4b73      	ldr	r3, [pc, #460]	; (d730 <_tc_timer_init+0x284>)
    d562:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    d564:	2101      	movs	r1, #1
    d566:	6838      	ldr	r0, [r7, #0]
    d568:	4b72      	ldr	r3, [pc, #456]	; (d734 <_tc_timer_init+0x288>)
    d56a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    d56c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d570:	496d      	ldr	r1, [pc, #436]	; (d728 <_tc_timer_init+0x27c>)
    d572:	4613      	mov	r3, r2
    d574:	009b      	lsls	r3, r3, #2
    d576:	4413      	add	r3, r2
    d578:	009b      	lsls	r3, r3, #2
    d57a:	440b      	add	r3, r1
    d57c:	3304      	adds	r3, #4
    d57e:	681b      	ldr	r3, [r3, #0]
    d580:	f003 030c 	and.w	r3, r3, #12
    d584:	2b08      	cmp	r3, #8
    d586:	d11e      	bne.n	d5c6 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    d588:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d58c:	4966      	ldr	r1, [pc, #408]	; (d728 <_tc_timer_init+0x27c>)
    d58e:	4613      	mov	r3, r2
    d590:	009b      	lsls	r3, r3, #2
    d592:	4413      	add	r3, r2
    d594:	009b      	lsls	r3, r3, #2
    d596:	440b      	add	r3, r1
    d598:	330c      	adds	r3, #12
    d59a:	681b      	ldr	r3, [r3, #0]
    d59c:	461a      	mov	r2, r3
    d59e:	2100      	movs	r1, #0
    d5a0:	6838      	ldr	r0, [r7, #0]
    d5a2:	4b65      	ldr	r3, [pc, #404]	; (d738 <_tc_timer_init+0x28c>)
    d5a4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    d5a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d5aa:	495f      	ldr	r1, [pc, #380]	; (d728 <_tc_timer_init+0x27c>)
    d5ac:	4613      	mov	r3, r2
    d5ae:	009b      	lsls	r3, r3, #2
    d5b0:	4413      	add	r3, r2
    d5b2:	009b      	lsls	r3, r3, #2
    d5b4:	440b      	add	r3, r1
    d5b6:	3310      	adds	r3, #16
    d5b8:	681b      	ldr	r3, [r3, #0]
    d5ba:	461a      	mov	r2, r3
    d5bc:	2101      	movs	r1, #1
    d5be:	6838      	ldr	r0, [r7, #0]
    d5c0:	4b5d      	ldr	r3, [pc, #372]	; (d738 <_tc_timer_init+0x28c>)
    d5c2:	4798      	blx	r3
    d5c4:	e06a      	b.n	d69c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    d5c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d5ca:	4957      	ldr	r1, [pc, #348]	; (d728 <_tc_timer_init+0x27c>)
    d5cc:	4613      	mov	r3, r2
    d5ce:	009b      	lsls	r3, r3, #2
    d5d0:	4413      	add	r3, r2
    d5d2:	009b      	lsls	r3, r3, #2
    d5d4:	440b      	add	r3, r1
    d5d6:	3304      	adds	r3, #4
    d5d8:	681b      	ldr	r3, [r3, #0]
    d5da:	f003 030c 	and.w	r3, r3, #12
    d5de:	2b00      	cmp	r3, #0
    d5e0:	d120      	bne.n	d624 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    d5e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d5e6:	4950      	ldr	r1, [pc, #320]	; (d728 <_tc_timer_init+0x27c>)
    d5e8:	4613      	mov	r3, r2
    d5ea:	009b      	lsls	r3, r3, #2
    d5ec:	4413      	add	r3, r2
    d5ee:	009b      	lsls	r3, r3, #2
    d5f0:	440b      	add	r3, r1
    d5f2:	330c      	adds	r3, #12
    d5f4:	681b      	ldr	r3, [r3, #0]
    d5f6:	b29b      	uxth	r3, r3
    d5f8:	461a      	mov	r2, r3
    d5fa:	2100      	movs	r1, #0
    d5fc:	6838      	ldr	r0, [r7, #0]
    d5fe:	4b4f      	ldr	r3, [pc, #316]	; (d73c <_tc_timer_init+0x290>)
    d600:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    d602:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d606:	4948      	ldr	r1, [pc, #288]	; (d728 <_tc_timer_init+0x27c>)
    d608:	4613      	mov	r3, r2
    d60a:	009b      	lsls	r3, r3, #2
    d60c:	4413      	add	r3, r2
    d60e:	009b      	lsls	r3, r3, #2
    d610:	440b      	add	r3, r1
    d612:	3310      	adds	r3, #16
    d614:	681b      	ldr	r3, [r3, #0]
    d616:	b29b      	uxth	r3, r3
    d618:	461a      	mov	r2, r3
    d61a:	2101      	movs	r1, #1
    d61c:	6838      	ldr	r0, [r7, #0]
    d61e:	4b47      	ldr	r3, [pc, #284]	; (d73c <_tc_timer_init+0x290>)
    d620:	4798      	blx	r3
    d622:	e03b      	b.n	d69c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    d624:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d628:	493f      	ldr	r1, [pc, #252]	; (d728 <_tc_timer_init+0x27c>)
    d62a:	4613      	mov	r3, r2
    d62c:	009b      	lsls	r3, r3, #2
    d62e:	4413      	add	r3, r2
    d630:	009b      	lsls	r3, r3, #2
    d632:	440b      	add	r3, r1
    d634:	3304      	adds	r3, #4
    d636:	681b      	ldr	r3, [r3, #0]
    d638:	f003 030c 	and.w	r3, r3, #12
    d63c:	2b04      	cmp	r3, #4
    d63e:	d12d      	bne.n	d69c <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    d640:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d644:	4938      	ldr	r1, [pc, #224]	; (d728 <_tc_timer_init+0x27c>)
    d646:	4613      	mov	r3, r2
    d648:	009b      	lsls	r3, r3, #2
    d64a:	4413      	add	r3, r2
    d64c:	009b      	lsls	r3, r3, #2
    d64e:	440b      	add	r3, r1
    d650:	330c      	adds	r3, #12
    d652:	681b      	ldr	r3, [r3, #0]
    d654:	b2db      	uxtb	r3, r3
    d656:	461a      	mov	r2, r3
    d658:	2100      	movs	r1, #0
    d65a:	6838      	ldr	r0, [r7, #0]
    d65c:	4b38      	ldr	r3, [pc, #224]	; (d740 <_tc_timer_init+0x294>)
    d65e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    d660:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d664:	4930      	ldr	r1, [pc, #192]	; (d728 <_tc_timer_init+0x27c>)
    d666:	4613      	mov	r3, r2
    d668:	009b      	lsls	r3, r3, #2
    d66a:	4413      	add	r3, r2
    d66c:	009b      	lsls	r3, r3, #2
    d66e:	440b      	add	r3, r1
    d670:	3310      	adds	r3, #16
    d672:	681b      	ldr	r3, [r3, #0]
    d674:	b2db      	uxtb	r3, r3
    d676:	461a      	mov	r2, r3
    d678:	2101      	movs	r1, #1
    d67a:	6838      	ldr	r0, [r7, #0]
    d67c:	4b30      	ldr	r3, [pc, #192]	; (d740 <_tc_timer_init+0x294>)
    d67e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    d680:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d684:	4928      	ldr	r1, [pc, #160]	; (d728 <_tc_timer_init+0x27c>)
    d686:	4613      	mov	r3, r2
    d688:	009b      	lsls	r3, r3, #2
    d68a:	4413      	add	r3, r2
    d68c:	009b      	lsls	r3, r3, #2
    d68e:	440b      	add	r3, r1
    d690:	330b      	adds	r3, #11
    d692:	781b      	ldrb	r3, [r3, #0]
    d694:	4619      	mov	r1, r3
    d696:	6838      	ldr	r0, [r7, #0]
    d698:	4b2a      	ldr	r3, [pc, #168]	; (d744 <_tc_timer_init+0x298>)
    d69a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    d69c:	6838      	ldr	r0, [r7, #0]
    d69e:	4b2a      	ldr	r3, [pc, #168]	; (d748 <_tc_timer_init+0x29c>)
    d6a0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    d6a2:	6879      	ldr	r1, [r7, #4]
    d6a4:	6838      	ldr	r0, [r7, #0]
    d6a6:	4b29      	ldr	r3, [pc, #164]	; (d74c <_tc_timer_init+0x2a0>)
    d6a8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    d6aa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d6ae:	491e      	ldr	r1, [pc, #120]	; (d728 <_tc_timer_init+0x27c>)
    d6b0:	4613      	mov	r3, r2
    d6b2:	009b      	lsls	r3, r3, #2
    d6b4:	4413      	add	r3, r2
    d6b6:	009b      	lsls	r3, r3, #2
    d6b8:	440b      	add	r3, r1
    d6ba:	3302      	adds	r3, #2
    d6bc:	f9b3 3000 	ldrsh.w	r3, [r3]
    d6c0:	4618      	mov	r0, r3
    d6c2:	4b23      	ldr	r3, [pc, #140]	; (d750 <_tc_timer_init+0x2a4>)
    d6c4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    d6c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d6ca:	4917      	ldr	r1, [pc, #92]	; (d728 <_tc_timer_init+0x27c>)
    d6cc:	4613      	mov	r3, r2
    d6ce:	009b      	lsls	r3, r3, #2
    d6d0:	4413      	add	r3, r2
    d6d2:	009b      	lsls	r3, r3, #2
    d6d4:	440b      	add	r3, r1
    d6d6:	3302      	adds	r3, #2
    d6d8:	f9b3 3000 	ldrsh.w	r3, [r3]
    d6dc:	4618      	mov	r0, r3
    d6de:	4b1d      	ldr	r3, [pc, #116]	; (d754 <_tc_timer_init+0x2a8>)
    d6e0:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    d6e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d6e6:	4910      	ldr	r1, [pc, #64]	; (d728 <_tc_timer_init+0x27c>)
    d6e8:	4613      	mov	r3, r2
    d6ea:	009b      	lsls	r3, r3, #2
    d6ec:	4413      	add	r3, r2
    d6ee:	009b      	lsls	r3, r3, #2
    d6f0:	440b      	add	r3, r1
    d6f2:	3302      	adds	r3, #2
    d6f4:	f9b3 3000 	ldrsh.w	r3, [r3]
    d6f8:	4618      	mov	r0, r3
    d6fa:	4b17      	ldr	r3, [pc, #92]	; (d758 <_tc_timer_init+0x2ac>)
    d6fc:	4798      	blx	r3

	return ERR_NONE;
    d6fe:	2300      	movs	r3, #0
}
    d700:	4618      	mov	r0, r3
    d702:	3710      	adds	r7, #16
    d704:	46bd      	mov	sp, r7
    d706:	bd80      	pop	{r7, pc}
    d708:	0000dd3d 	.word	0x0000dd3d
    d70c:	00020498 	.word	0x00020498
    d710:	00007d5d 	.word	0x00007d5d
    d714:	0000d121 	.word	0x0000d121
    d718:	0000d2c1 	.word	0x0000d2c1
    d71c:	0000d271 	.word	0x0000d271
    d720:	0000d0fd 	.word	0x0000d0fd
    d724:	0000d2f1 	.word	0x0000d2f1
    d728:	20000144 	.word	0x20000144
    d72c:	0000d351 	.word	0x0000d351
    d730:	0000d315 	.word	0x0000d315
    d734:	0000d333 	.word	0x0000d333
    d738:	0000d451 	.word	0x0000d451
    d73c:	0000d3ed 	.word	0x0000d3ed
    d740:	0000d3bd 	.word	0x0000d3bd
    d744:	0000d371 	.word	0x0000d371
    d748:	0000d1a5 	.word	0x0000d1a5
    d74c:	0000dda5 	.word	0x0000dda5
    d750:	0000d07d 	.word	0x0000d07d
    d754:	0000d0c1 	.word	0x0000d0c1
    d758:	0000d041 	.word	0x0000d041

0000d75c <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    d75c:	b580      	push	{r7, lr}
    d75e:	b084      	sub	sp, #16
    d760:	af00      	add	r7, sp, #0
    d762:	6078      	str	r0, [r7, #4]
    d764:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    d766:	6838      	ldr	r0, [r7, #0]
    d768:	4b73      	ldr	r3, [pc, #460]	; (d938 <_pwm_init+0x1dc>)
    d76a:	4798      	blx	r3
    d76c:	4603      	mov	r3, r0
    d76e:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    d770:	687b      	ldr	r3, [r7, #4]
    d772:	683a      	ldr	r2, [r7, #0]
    d774:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    d776:	2101      	movs	r1, #1
    d778:	6838      	ldr	r0, [r7, #0]
    d77a:	4b70      	ldr	r3, [pc, #448]	; (d93c <_pwm_init+0x1e0>)
    d77c:	4798      	blx	r3
    d77e:	4603      	mov	r3, r0
    d780:	f083 0301 	eor.w	r3, r3, #1
    d784:	b2db      	uxtb	r3, r3
    d786:	2b00      	cmp	r3, #0
    d788:	d011      	beq.n	d7ae <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    d78a:	2102      	movs	r1, #2
    d78c:	6838      	ldr	r0, [r7, #0]
    d78e:	4b6c      	ldr	r3, [pc, #432]	; (d940 <_pwm_init+0x1e4>)
    d790:	4798      	blx	r3
    d792:	4603      	mov	r3, r0
    d794:	2b00      	cmp	r3, #0
    d796:	d006      	beq.n	d7a6 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    d798:	6838      	ldr	r0, [r7, #0]
    d79a:	4b6a      	ldr	r3, [pc, #424]	; (d944 <_pwm_init+0x1e8>)
    d79c:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    d79e:	2102      	movs	r1, #2
    d7a0:	6838      	ldr	r0, [r7, #0]
    d7a2:	4b69      	ldr	r3, [pc, #420]	; (d948 <_pwm_init+0x1ec>)
    d7a4:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    d7a6:	2101      	movs	r1, #1
    d7a8:	6838      	ldr	r0, [r7, #0]
    d7aa:	4b68      	ldr	r3, [pc, #416]	; (d94c <_pwm_init+0x1f0>)
    d7ac:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    d7ae:	2101      	movs	r1, #1
    d7b0:	6838      	ldr	r0, [r7, #0]
    d7b2:	4b65      	ldr	r3, [pc, #404]	; (d948 <_pwm_init+0x1ec>)
    d7b4:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    d7b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d7ba:	4965      	ldr	r1, [pc, #404]	; (d950 <_pwm_init+0x1f4>)
    d7bc:	4613      	mov	r3, r2
    d7be:	009b      	lsls	r3, r3, #2
    d7c0:	4413      	add	r3, r2
    d7c2:	009b      	lsls	r3, r3, #2
    d7c4:	440b      	add	r3, r1
    d7c6:	3304      	adds	r3, #4
    d7c8:	681b      	ldr	r3, [r3, #0]
    d7ca:	4619      	mov	r1, r3
    d7cc:	6838      	ldr	r0, [r7, #0]
    d7ce:	4b5f      	ldr	r3, [pc, #380]	; (d94c <_pwm_init+0x1f0>)
    d7d0:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    d7d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d7d6:	495e      	ldr	r1, [pc, #376]	; (d950 <_pwm_init+0x1f4>)
    d7d8:	4613      	mov	r3, r2
    d7da:	009b      	lsls	r3, r3, #2
    d7dc:	4413      	add	r3, r2
    d7de:	009b      	lsls	r3, r3, #2
    d7e0:	440b      	add	r3, r1
    d7e2:	330a      	adds	r3, #10
    d7e4:	781b      	ldrb	r3, [r3, #0]
    d7e6:	4619      	mov	r1, r3
    d7e8:	6838      	ldr	r0, [r7, #0]
    d7ea:	4b5a      	ldr	r3, [pc, #360]	; (d954 <_pwm_init+0x1f8>)
    d7ec:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    d7ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d7f2:	4957      	ldr	r1, [pc, #348]	; (d950 <_pwm_init+0x1f4>)
    d7f4:	4613      	mov	r3, r2
    d7f6:	009b      	lsls	r3, r3, #2
    d7f8:	4413      	add	r3, r2
    d7fa:	009b      	lsls	r3, r3, #2
    d7fc:	440b      	add	r3, r1
    d7fe:	3308      	adds	r3, #8
    d800:	881b      	ldrh	r3, [r3, #0]
    d802:	4619      	mov	r1, r3
    d804:	6838      	ldr	r0, [r7, #0]
    d806:	4b54      	ldr	r3, [pc, #336]	; (d958 <_pwm_init+0x1fc>)
    d808:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    d80a:	2103      	movs	r1, #3
    d80c:	6838      	ldr	r0, [r7, #0]
    d80e:	4b53      	ldr	r3, [pc, #332]	; (d95c <_pwm_init+0x200>)
    d810:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    d812:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d816:	494e      	ldr	r1, [pc, #312]	; (d950 <_pwm_init+0x1f4>)
    d818:	4613      	mov	r3, r2
    d81a:	009b      	lsls	r3, r3, #2
    d81c:	4413      	add	r3, r2
    d81e:	009b      	lsls	r3, r3, #2
    d820:	440b      	add	r3, r1
    d822:	3304      	adds	r3, #4
    d824:	681b      	ldr	r3, [r3, #0]
    d826:	f003 030c 	and.w	r3, r3, #12
    d82a:	2b08      	cmp	r3, #8
    d82c:	d11e      	bne.n	d86c <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    d82e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d832:	4947      	ldr	r1, [pc, #284]	; (d950 <_pwm_init+0x1f4>)
    d834:	4613      	mov	r3, r2
    d836:	009b      	lsls	r3, r3, #2
    d838:	4413      	add	r3, r2
    d83a:	009b      	lsls	r3, r3, #2
    d83c:	440b      	add	r3, r1
    d83e:	330c      	adds	r3, #12
    d840:	681b      	ldr	r3, [r3, #0]
    d842:	461a      	mov	r2, r3
    d844:	2100      	movs	r1, #0
    d846:	6838      	ldr	r0, [r7, #0]
    d848:	4b45      	ldr	r3, [pc, #276]	; (d960 <_pwm_init+0x204>)
    d84a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    d84c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d850:	493f      	ldr	r1, [pc, #252]	; (d950 <_pwm_init+0x1f4>)
    d852:	4613      	mov	r3, r2
    d854:	009b      	lsls	r3, r3, #2
    d856:	4413      	add	r3, r2
    d858:	009b      	lsls	r3, r3, #2
    d85a:	440b      	add	r3, r1
    d85c:	3310      	adds	r3, #16
    d85e:	681b      	ldr	r3, [r3, #0]
    d860:	461a      	mov	r2, r3
    d862:	2101      	movs	r1, #1
    d864:	6838      	ldr	r0, [r7, #0]
    d866:	4b3e      	ldr	r3, [pc, #248]	; (d960 <_pwm_init+0x204>)
    d868:	4798      	blx	r3
    d86a:	e031      	b.n	d8d0 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    d86c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d870:	4937      	ldr	r1, [pc, #220]	; (d950 <_pwm_init+0x1f4>)
    d872:	4613      	mov	r3, r2
    d874:	009b      	lsls	r3, r3, #2
    d876:	4413      	add	r3, r2
    d878:	009b      	lsls	r3, r3, #2
    d87a:	440b      	add	r3, r1
    d87c:	3304      	adds	r3, #4
    d87e:	681b      	ldr	r3, [r3, #0]
    d880:	f003 030c 	and.w	r3, r3, #12
    d884:	2b00      	cmp	r3, #0
    d886:	d120      	bne.n	d8ca <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    d888:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d88c:	4930      	ldr	r1, [pc, #192]	; (d950 <_pwm_init+0x1f4>)
    d88e:	4613      	mov	r3, r2
    d890:	009b      	lsls	r3, r3, #2
    d892:	4413      	add	r3, r2
    d894:	009b      	lsls	r3, r3, #2
    d896:	440b      	add	r3, r1
    d898:	330c      	adds	r3, #12
    d89a:	681b      	ldr	r3, [r3, #0]
    d89c:	b29b      	uxth	r3, r3
    d89e:	461a      	mov	r2, r3
    d8a0:	2100      	movs	r1, #0
    d8a2:	6838      	ldr	r0, [r7, #0]
    d8a4:	4b2f      	ldr	r3, [pc, #188]	; (d964 <_pwm_init+0x208>)
    d8a6:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    d8a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d8ac:	4928      	ldr	r1, [pc, #160]	; (d950 <_pwm_init+0x1f4>)
    d8ae:	4613      	mov	r3, r2
    d8b0:	009b      	lsls	r3, r3, #2
    d8b2:	4413      	add	r3, r2
    d8b4:	009b      	lsls	r3, r3, #2
    d8b6:	440b      	add	r3, r1
    d8b8:	3310      	adds	r3, #16
    d8ba:	681b      	ldr	r3, [r3, #0]
    d8bc:	b29b      	uxth	r3, r3
    d8be:	461a      	mov	r2, r3
    d8c0:	2101      	movs	r1, #1
    d8c2:	6838      	ldr	r0, [r7, #0]
    d8c4:	4b27      	ldr	r3, [pc, #156]	; (d964 <_pwm_init+0x208>)
    d8c6:	4798      	blx	r3
    d8c8:	e002      	b.n	d8d0 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    d8ca:	f04f 33ff 	mov.w	r3, #4294967295
    d8ce:	e02e      	b.n	d92e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    d8d0:	6879      	ldr	r1, [r7, #4]
    d8d2:	6838      	ldr	r0, [r7, #0]
    d8d4:	4b24      	ldr	r3, [pc, #144]	; (d968 <_pwm_init+0x20c>)
    d8d6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    d8d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d8dc:	491c      	ldr	r1, [pc, #112]	; (d950 <_pwm_init+0x1f4>)
    d8de:	4613      	mov	r3, r2
    d8e0:	009b      	lsls	r3, r3, #2
    d8e2:	4413      	add	r3, r2
    d8e4:	009b      	lsls	r3, r3, #2
    d8e6:	440b      	add	r3, r1
    d8e8:	3302      	adds	r3, #2
    d8ea:	f9b3 3000 	ldrsh.w	r3, [r3]
    d8ee:	4618      	mov	r0, r3
    d8f0:	4b1e      	ldr	r3, [pc, #120]	; (d96c <_pwm_init+0x210>)
    d8f2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    d8f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d8f8:	4915      	ldr	r1, [pc, #84]	; (d950 <_pwm_init+0x1f4>)
    d8fa:	4613      	mov	r3, r2
    d8fc:	009b      	lsls	r3, r3, #2
    d8fe:	4413      	add	r3, r2
    d900:	009b      	lsls	r3, r3, #2
    d902:	440b      	add	r3, r1
    d904:	3302      	adds	r3, #2
    d906:	f9b3 3000 	ldrsh.w	r3, [r3]
    d90a:	4618      	mov	r0, r3
    d90c:	4b18      	ldr	r3, [pc, #96]	; (d970 <_pwm_init+0x214>)
    d90e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    d910:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d914:	490e      	ldr	r1, [pc, #56]	; (d950 <_pwm_init+0x1f4>)
    d916:	4613      	mov	r3, r2
    d918:	009b      	lsls	r3, r3, #2
    d91a:	4413      	add	r3, r2
    d91c:	009b      	lsls	r3, r3, #2
    d91e:	440b      	add	r3, r1
    d920:	3302      	adds	r3, #2
    d922:	f9b3 3000 	ldrsh.w	r3, [r3]
    d926:	4618      	mov	r0, r3
    d928:	4b12      	ldr	r3, [pc, #72]	; (d974 <_pwm_init+0x218>)
    d92a:	4798      	blx	r3

	return 0;
    d92c:	2300      	movs	r3, #0
}
    d92e:	4618      	mov	r0, r3
    d930:	3710      	adds	r7, #16
    d932:	46bd      	mov	sp, r7
    d934:	bd80      	pop	{r7, pc}
    d936:	bf00      	nop
    d938:	0000dd3d 	.word	0x0000dd3d
    d93c:	0000d121 	.word	0x0000d121
    d940:	0000d2c1 	.word	0x0000d2c1
    d944:	0000d271 	.word	0x0000d271
    d948:	0000d0fd 	.word	0x0000d0fd
    d94c:	0000d2f1 	.word	0x0000d2f1
    d950:	20000144 	.word	0x20000144
    d954:	0000d351 	.word	0x0000d351
    d958:	0000d315 	.word	0x0000d315
    d95c:	0000d333 	.word	0x0000d333
    d960:	0000d451 	.word	0x0000d451
    d964:	0000d3ed 	.word	0x0000d3ed
    d968:	0000dda5 	.word	0x0000dda5
    d96c:	0000d07d 	.word	0x0000d07d
    d970:	0000d0c1 	.word	0x0000d0c1
    d974:	0000d041 	.word	0x0000d041

0000d978 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    d978:	b580      	push	{r7, lr}
    d97a:	b084      	sub	sp, #16
    d97c:	af00      	add	r7, sp, #0
    d97e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d980:	687b      	ldr	r3, [r7, #4]
    d982:	68db      	ldr	r3, [r3, #12]
    d984:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    d986:	68f8      	ldr	r0, [r7, #12]
    d988:	4b10      	ldr	r3, [pc, #64]	; (d9cc <_tc_timer_deinit+0x54>)
    d98a:	4798      	blx	r3
    d98c:	4603      	mov	r3, r0
    d98e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    d990:	22f9      	movs	r2, #249	; 0xf9
    d992:	490f      	ldr	r1, [pc, #60]	; (d9d0 <_tc_timer_deinit+0x58>)
    d994:	2001      	movs	r0, #1
    d996:	4b0f      	ldr	r3, [pc, #60]	; (d9d4 <_tc_timer_deinit+0x5c>)
    d998:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    d99a:	f997 200b 	ldrsb.w	r2, [r7, #11]
    d99e:	490e      	ldr	r1, [pc, #56]	; (d9d8 <_tc_timer_deinit+0x60>)
    d9a0:	4613      	mov	r3, r2
    d9a2:	009b      	lsls	r3, r3, #2
    d9a4:	4413      	add	r3, r2
    d9a6:	009b      	lsls	r3, r3, #2
    d9a8:	440b      	add	r3, r1
    d9aa:	3302      	adds	r3, #2
    d9ac:	f9b3 3000 	ldrsh.w	r3, [r3]
    d9b0:	4618      	mov	r0, r3
    d9b2:	4b0a      	ldr	r3, [pc, #40]	; (d9dc <_tc_timer_deinit+0x64>)
    d9b4:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    d9b6:	68f8      	ldr	r0, [r7, #12]
    d9b8:	4b09      	ldr	r3, [pc, #36]	; (d9e0 <_tc_timer_deinit+0x68>)
    d9ba:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    d9bc:	68f8      	ldr	r0, [r7, #12]
    d9be:	4b09      	ldr	r3, [pc, #36]	; (d9e4 <_tc_timer_deinit+0x6c>)
    d9c0:	4798      	blx	r3
}
    d9c2:	bf00      	nop
    d9c4:	3710      	adds	r7, #16
    d9c6:	46bd      	mov	sp, r7
    d9c8:	bd80      	pop	{r7, pc}
    d9ca:	bf00      	nop
    d9cc:	0000dd3d 	.word	0x0000dd3d
    d9d0:	00020498 	.word	0x00020498
    d9d4:	00007d5d 	.word	0x00007d5d
    d9d8:	20000144 	.word	0x20000144
    d9dc:	0000d07d 	.word	0x0000d07d
    d9e0:	0000d271 	.word	0x0000d271
    d9e4:	0000d1e9 	.word	0x0000d1e9

0000d9e8 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    d9e8:	b580      	push	{r7, lr}
    d9ea:	b082      	sub	sp, #8
    d9ec:	af00      	add	r7, sp, #0
    d9ee:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    d9f0:	687b      	ldr	r3, [r7, #4]
    d9f2:	68db      	ldr	r3, [r3, #12]
    d9f4:	4618      	mov	r0, r3
    d9f6:	4b03      	ldr	r3, [pc, #12]	; (da04 <_tc_timer_start+0x1c>)
    d9f8:	4798      	blx	r3
}
    d9fa:	bf00      	nop
    d9fc:	3708      	adds	r7, #8
    d9fe:	46bd      	mov	sp, r7
    da00:	bd80      	pop	{r7, pc}
    da02:	bf00      	nop
    da04:	0000d211 	.word	0x0000d211

0000da08 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    da08:	b580      	push	{r7, lr}
    da0a:	b082      	sub	sp, #8
    da0c:	af00      	add	r7, sp, #0
    da0e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    da10:	687b      	ldr	r3, [r7, #4]
    da12:	691b      	ldr	r3, [r3, #16]
    da14:	4618      	mov	r0, r3
    da16:	4b03      	ldr	r3, [pc, #12]	; (da24 <_pwm_enable+0x1c>)
    da18:	4798      	blx	r3
}
    da1a:	bf00      	nop
    da1c:	3708      	adds	r7, #8
    da1e:	46bd      	mov	sp, r7
    da20:	bd80      	pop	{r7, pc}
    da22:	bf00      	nop
    da24:	0000d211 	.word	0x0000d211

0000da28 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    da28:	b580      	push	{r7, lr}
    da2a:	b082      	sub	sp, #8
    da2c:	af00      	add	r7, sp, #0
    da2e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    da30:	687b      	ldr	r3, [r7, #4]
    da32:	68db      	ldr	r3, [r3, #12]
    da34:	4618      	mov	r0, r3
    da36:	4b03      	ldr	r3, [pc, #12]	; (da44 <_tc_timer_stop+0x1c>)
    da38:	4798      	blx	r3
}
    da3a:	bf00      	nop
    da3c:	3708      	adds	r7, #8
    da3e:	46bd      	mov	sp, r7
    da40:	bd80      	pop	{r7, pc}
    da42:	bf00      	nop
    da44:	0000d271 	.word	0x0000d271

0000da48 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    da48:	b580      	push	{r7, lr}
    da4a:	b084      	sub	sp, #16
    da4c:	af00      	add	r7, sp, #0
    da4e:	6078      	str	r0, [r7, #4]
    da50:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    da52:	687b      	ldr	r3, [r7, #4]
    da54:	68db      	ldr	r3, [r3, #12]
    da56:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    da58:	68f8      	ldr	r0, [r7, #12]
    da5a:	4b14      	ldr	r3, [pc, #80]	; (daac <_tc_timer_set_period+0x64>)
    da5c:	4798      	blx	r3
    da5e:	4603      	mov	r3, r0
    da60:	2b02      	cmp	r3, #2
    da62:	d105      	bne.n	da70 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    da64:	683a      	ldr	r2, [r7, #0]
    da66:	2100      	movs	r1, #0
    da68:	68f8      	ldr	r0, [r7, #12]
    da6a:	4b11      	ldr	r3, [pc, #68]	; (dab0 <_tc_timer_set_period+0x68>)
    da6c:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    da6e:	e019      	b.n	daa4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    da70:	68f8      	ldr	r0, [r7, #12]
    da72:	4b0e      	ldr	r3, [pc, #56]	; (daac <_tc_timer_set_period+0x64>)
    da74:	4798      	blx	r3
    da76:	4603      	mov	r3, r0
    da78:	2b00      	cmp	r3, #0
    da7a:	d107      	bne.n	da8c <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    da7c:	683b      	ldr	r3, [r7, #0]
    da7e:	b29b      	uxth	r3, r3
    da80:	461a      	mov	r2, r3
    da82:	2100      	movs	r1, #0
    da84:	68f8      	ldr	r0, [r7, #12]
    da86:	4b0b      	ldr	r3, [pc, #44]	; (dab4 <_tc_timer_set_period+0x6c>)
    da88:	4798      	blx	r3
}
    da8a:	e00b      	b.n	daa4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    da8c:	68f8      	ldr	r0, [r7, #12]
    da8e:	4b07      	ldr	r3, [pc, #28]	; (daac <_tc_timer_set_period+0x64>)
    da90:	4798      	blx	r3
    da92:	4603      	mov	r3, r0
    da94:	2b01      	cmp	r3, #1
    da96:	d105      	bne.n	daa4 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    da98:	683b      	ldr	r3, [r7, #0]
    da9a:	b2db      	uxtb	r3, r3
    da9c:	4619      	mov	r1, r3
    da9e:	68f8      	ldr	r0, [r7, #12]
    daa0:	4b05      	ldr	r3, [pc, #20]	; (dab8 <_tc_timer_set_period+0x70>)
    daa2:	4798      	blx	r3
}
    daa4:	bf00      	nop
    daa6:	3710      	adds	r7, #16
    daa8:	46bd      	mov	sp, r7
    daaa:	bd80      	pop	{r7, pc}
    daac:	0000d299 	.word	0x0000d299
    dab0:	0000d451 	.word	0x0000d451
    dab4:	0000d3ed 	.word	0x0000d3ed
    dab8:	0000d371 	.word	0x0000d371

0000dabc <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    dabc:	b580      	push	{r7, lr}
    dabe:	b084      	sub	sp, #16
    dac0:	af00      	add	r7, sp, #0
    dac2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    dac4:	687b      	ldr	r3, [r7, #4]
    dac6:	68db      	ldr	r3, [r3, #12]
    dac8:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    daca:	68f8      	ldr	r0, [r7, #12]
    dacc:	4b13      	ldr	r3, [pc, #76]	; (db1c <_tc_timer_get_period+0x60>)
    dace:	4798      	blx	r3
    dad0:	4603      	mov	r3, r0
    dad2:	2b02      	cmp	r3, #2
    dad4:	d105      	bne.n	dae2 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    dad6:	2100      	movs	r1, #0
    dad8:	68f8      	ldr	r0, [r7, #12]
    dada:	4b11      	ldr	r3, [pc, #68]	; (db20 <_tc_timer_get_period+0x64>)
    dadc:	4798      	blx	r3
    dade:	4603      	mov	r3, r0
    dae0:	e017      	b.n	db12 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    dae2:	68f8      	ldr	r0, [r7, #12]
    dae4:	4b0d      	ldr	r3, [pc, #52]	; (db1c <_tc_timer_get_period+0x60>)
    dae6:	4798      	blx	r3
    dae8:	4603      	mov	r3, r0
    daea:	2b00      	cmp	r3, #0
    daec:	d105      	bne.n	dafa <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    daee:	2100      	movs	r1, #0
    daf0:	68f8      	ldr	r0, [r7, #12]
    daf2:	4b0c      	ldr	r3, [pc, #48]	; (db24 <_tc_timer_get_period+0x68>)
    daf4:	4798      	blx	r3
    daf6:	4603      	mov	r3, r0
    daf8:	e00b      	b.n	db12 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    dafa:	68f8      	ldr	r0, [r7, #12]
    dafc:	4b07      	ldr	r3, [pc, #28]	; (db1c <_tc_timer_get_period+0x60>)
    dafe:	4798      	blx	r3
    db00:	4603      	mov	r3, r0
    db02:	2b01      	cmp	r3, #1
    db04:	d104      	bne.n	db10 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    db06:	68f8      	ldr	r0, [r7, #12]
    db08:	4b07      	ldr	r3, [pc, #28]	; (db28 <_tc_timer_get_period+0x6c>)
    db0a:	4798      	blx	r3
    db0c:	4603      	mov	r3, r0
    db0e:	e000      	b.n	db12 <_tc_timer_get_period+0x56>
	}

	return 0;
    db10:	2300      	movs	r3, #0
}
    db12:	4618      	mov	r0, r3
    db14:	3710      	adds	r7, #16
    db16:	46bd      	mov	sp, r7
    db18:	bd80      	pop	{r7, pc}
    db1a:	bf00      	nop
    db1c:	0000d299 	.word	0x0000d299
    db20:	0000d481 	.word	0x0000d481
    db24:	0000d421 	.word	0x0000d421
    db28:	0000d399 	.word	0x0000d399

0000db2c <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    db2c:	b580      	push	{r7, lr}
    db2e:	b082      	sub	sp, #8
    db30:	af00      	add	r7, sp, #0
    db32:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    db34:	687b      	ldr	r3, [r7, #4]
    db36:	68db      	ldr	r3, [r3, #12]
    db38:	4618      	mov	r0, r3
    db3a:	4b03      	ldr	r3, [pc, #12]	; (db48 <_tc_timer_is_started+0x1c>)
    db3c:	4798      	blx	r3
    db3e:	4603      	mov	r3, r0
}
    db40:	4618      	mov	r0, r3
    db42:	3708      	adds	r7, #8
    db44:	46bd      	mov	sp, r7
    db46:	bd80      	pop	{r7, pc}
    db48:	0000d239 	.word	0x0000d239

0000db4c <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    db4c:	b580      	push	{r7, lr}
    db4e:	b082      	sub	sp, #8
    db50:	af00      	add	r7, sp, #0
    db52:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    db54:	687b      	ldr	r3, [r7, #4]
    db56:	691b      	ldr	r3, [r3, #16]
    db58:	4618      	mov	r0, r3
    db5a:	4b03      	ldr	r3, [pc, #12]	; (db68 <_pwm_is_enabled+0x1c>)
    db5c:	4798      	blx	r3
    db5e:	4603      	mov	r3, r0
}
    db60:	4618      	mov	r0, r3
    db62:	3708      	adds	r7, #8
    db64:	46bd      	mov	sp, r7
    db66:	bd80      	pop	{r7, pc}
    db68:	0000d239 	.word	0x0000d239

0000db6c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    db6c:	b480      	push	{r7}
    db6e:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    db70:	4b02      	ldr	r3, [pc, #8]	; (db7c <_tc_get_timer+0x10>)
}
    db72:	4618      	mov	r0, r3
    db74:	46bd      	mov	sp, r7
    db76:	f85d 7b04 	ldr.w	r7, [sp], #4
    db7a:	4770      	bx	lr
    db7c:	200001bc 	.word	0x200001bc

0000db80 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    db80:	b480      	push	{r7}
    db82:	af00      	add	r7, sp, #0
	return NULL;
    db84:	2300      	movs	r3, #0
}
    db86:	4618      	mov	r0, r3
    db88:	46bd      	mov	sp, r7
    db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    db8e:	4770      	bx	lr

0000db90 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    db90:	b580      	push	{r7, lr}
    db92:	b084      	sub	sp, #16
    db94:	af00      	add	r7, sp, #0
    db96:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    db98:	687b      	ldr	r3, [r7, #4]
    db9a:	68db      	ldr	r3, [r3, #12]
    db9c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    db9e:	68f8      	ldr	r0, [r7, #12]
    dba0:	4b0e      	ldr	r3, [pc, #56]	; (dbdc <_tc_timer_set_irq+0x4c>)
    dba2:	4798      	blx	r3
    dba4:	4603      	mov	r3, r0
    dba6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    dba8:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    dbac:	490c      	ldr	r1, [pc, #48]	; (dbe0 <_tc_timer_set_irq+0x50>)
    dbae:	2001      	movs	r0, #1
    dbb0:	4b0c      	ldr	r3, [pc, #48]	; (dbe4 <_tc_timer_set_irq+0x54>)
    dbb2:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    dbb4:	f997 200b 	ldrsb.w	r2, [r7, #11]
    dbb8:	490b      	ldr	r1, [pc, #44]	; (dbe8 <_tc_timer_set_irq+0x58>)
    dbba:	4613      	mov	r3, r2
    dbbc:	009b      	lsls	r3, r3, #2
    dbbe:	4413      	add	r3, r2
    dbc0:	009b      	lsls	r3, r3, #2
    dbc2:	440b      	add	r3, r1
    dbc4:	3302      	adds	r3, #2
    dbc6:	f9b3 3000 	ldrsh.w	r3, [r3]
    dbca:	b2db      	uxtb	r3, r3
    dbcc:	4618      	mov	r0, r3
    dbce:	4b07      	ldr	r3, [pc, #28]	; (dbec <_tc_timer_set_irq+0x5c>)
    dbd0:	4798      	blx	r3
}
    dbd2:	bf00      	nop
    dbd4:	3710      	adds	r7, #16
    dbd6:	46bd      	mov	sp, r7
    dbd8:	bd80      	pop	{r7, pc}
    dbda:	bf00      	nop
    dbdc:	0000dd3d 	.word	0x0000dd3d
    dbe0:	00020498 	.word	0x00020498
    dbe4:	00007d5d 	.word	0x00007d5d
    dbe8:	20000144 	.word	0x20000144
    dbec:	000085a9 	.word	0x000085a9

0000dbf0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    dbf0:	b580      	push	{r7, lr}
    dbf2:	b084      	sub	sp, #16
    dbf4:	af00      	add	r7, sp, #0
    dbf6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    dbf8:	687b      	ldr	r3, [r7, #4]
    dbfa:	68db      	ldr	r3, [r3, #12]
    dbfc:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    dbfe:	68f8      	ldr	r0, [r7, #12]
    dc00:	4b07      	ldr	r3, [pc, #28]	; (dc20 <tc_interrupt_handler+0x30>)
    dc02:	4798      	blx	r3
    dc04:	4603      	mov	r3, r0
    dc06:	2b00      	cmp	r3, #0
    dc08:	d006      	beq.n	dc18 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    dc0a:	68f8      	ldr	r0, [r7, #12]
    dc0c:	4b05      	ldr	r3, [pc, #20]	; (dc24 <tc_interrupt_handler+0x34>)
    dc0e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    dc10:	687b      	ldr	r3, [r7, #4]
    dc12:	681b      	ldr	r3, [r3, #0]
    dc14:	6878      	ldr	r0, [r7, #4]
    dc16:	4798      	blx	r3
	}
}
    dc18:	bf00      	nop
    dc1a:	3710      	adds	r7, #16
    dc1c:	46bd      	mov	sp, r7
    dc1e:	bd80      	pop	{r7, pc}
    dc20:	0000d149 	.word	0x0000d149
    dc24:	0000d171 	.word	0x0000d171

0000dc28 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    dc28:	b580      	push	{r7, lr}
    dc2a:	b084      	sub	sp, #16
    dc2c:	af00      	add	r7, sp, #0
    dc2e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    dc30:	687b      	ldr	r3, [r7, #4]
    dc32:	691b      	ldr	r3, [r3, #16]
    dc34:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    dc36:	68f8      	ldr	r0, [r7, #12]
    dc38:	4b12      	ldr	r3, [pc, #72]	; (dc84 <tc_pwm_interrupt_handler+0x5c>)
    dc3a:	4798      	blx	r3
    dc3c:	4603      	mov	r3, r0
    dc3e:	2b00      	cmp	r3, #0
    dc40:	d00a      	beq.n	dc58 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    dc42:	68f8      	ldr	r0, [r7, #12]
    dc44:	4b10      	ldr	r3, [pc, #64]	; (dc88 <tc_pwm_interrupt_handler+0x60>)
    dc46:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    dc48:	687b      	ldr	r3, [r7, #4]
    dc4a:	681b      	ldr	r3, [r3, #0]
    dc4c:	2b00      	cmp	r3, #0
    dc4e:	d003      	beq.n	dc58 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    dc50:	687b      	ldr	r3, [r7, #4]
    dc52:	681b      	ldr	r3, [r3, #0]
    dc54:	6878      	ldr	r0, [r7, #4]
    dc56:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    dc58:	68f8      	ldr	r0, [r7, #12]
    dc5a:	4b0c      	ldr	r3, [pc, #48]	; (dc8c <tc_pwm_interrupt_handler+0x64>)
    dc5c:	4798      	blx	r3
    dc5e:	4603      	mov	r3, r0
    dc60:	2b00      	cmp	r3, #0
    dc62:	d00a      	beq.n	dc7a <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    dc64:	68f8      	ldr	r0, [r7, #12]
    dc66:	4b0a      	ldr	r3, [pc, #40]	; (dc90 <tc_pwm_interrupt_handler+0x68>)
    dc68:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    dc6a:	687b      	ldr	r3, [r7, #4]
    dc6c:	685b      	ldr	r3, [r3, #4]
    dc6e:	2b00      	cmp	r3, #0
    dc70:	d003      	beq.n	dc7a <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    dc72:	687b      	ldr	r3, [r7, #4]
    dc74:	685b      	ldr	r3, [r3, #4]
    dc76:	6878      	ldr	r0, [r7, #4]
    dc78:	4798      	blx	r3
		}
	}
}
    dc7a:	bf00      	nop
    dc7c:	3710      	adds	r7, #16
    dc7e:	46bd      	mov	sp, r7
    dc80:	bd80      	pop	{r7, pc}
    dc82:	bf00      	nop
    dc84:	0000d149 	.word	0x0000d149
    dc88:	0000d171 	.word	0x0000d171
    dc8c:	0000d1bf 	.word	0x0000d1bf
    dc90:	0000d18b 	.word	0x0000d18b

0000dc94 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    dc94:	b580      	push	{r7, lr}
    dc96:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    dc98:	4b03      	ldr	r3, [pc, #12]	; (dca8 <TC0_Handler+0x14>)
    dc9a:	681b      	ldr	r3, [r3, #0]
    dc9c:	4618      	mov	r0, r3
    dc9e:	4b03      	ldr	r3, [pc, #12]	; (dcac <TC0_Handler+0x18>)
    dca0:	4798      	blx	r3
}
    dca2:	bf00      	nop
    dca4:	bd80      	pop	{r7, pc}
    dca6:	bf00      	nop
    dca8:	20008ad0 	.word	0x20008ad0
    dcac:	0000dbf1 	.word	0x0000dbf1

0000dcb0 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    dcb0:	b580      	push	{r7, lr}
    dcb2:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc1_dev);
    dcb4:	4b03      	ldr	r3, [pc, #12]	; (dcc4 <TC1_Handler+0x14>)
    dcb6:	681b      	ldr	r3, [r3, #0]
    dcb8:	4618      	mov	r0, r3
    dcba:	4b03      	ldr	r3, [pc, #12]	; (dcc8 <TC1_Handler+0x18>)
    dcbc:	4798      	blx	r3
}
    dcbe:	bf00      	nop
    dcc0:	bd80      	pop	{r7, pc}
    dcc2:	bf00      	nop
    dcc4:	20008ad4 	.word	0x20008ad4
    dcc8:	0000dc29 	.word	0x0000dc29

0000dccc <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    dccc:	b580      	push	{r7, lr}
    dcce:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    dcd0:	4b03      	ldr	r3, [pc, #12]	; (dce0 <TC2_Handler+0x14>)
    dcd2:	681b      	ldr	r3, [r3, #0]
    dcd4:	4618      	mov	r0, r3
    dcd6:	4b03      	ldr	r3, [pc, #12]	; (dce4 <TC2_Handler+0x18>)
    dcd8:	4798      	blx	r3
}
    dcda:	bf00      	nop
    dcdc:	bd80      	pop	{r7, pc}
    dcde:	bf00      	nop
    dce0:	20008ad8 	.word	0x20008ad8
    dce4:	0000dbf1 	.word	0x0000dbf1

0000dce8 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    dce8:	b580      	push	{r7, lr}
    dcea:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    dcec:	4b03      	ldr	r3, [pc, #12]	; (dcfc <TC4_Handler+0x14>)
    dcee:	681b      	ldr	r3, [r3, #0]
    dcf0:	4618      	mov	r0, r3
    dcf2:	4b03      	ldr	r3, [pc, #12]	; (dd00 <TC4_Handler+0x18>)
    dcf4:	4798      	blx	r3
}
    dcf6:	bf00      	nop
    dcf8:	bd80      	pop	{r7, pc}
    dcfa:	bf00      	nop
    dcfc:	20008adc 	.word	0x20008adc
    dd00:	0000dbf1 	.word	0x0000dbf1

0000dd04 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    dd04:	b580      	push	{r7, lr}
    dd06:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    dd08:	4b03      	ldr	r3, [pc, #12]	; (dd18 <TC5_Handler+0x14>)
    dd0a:	681b      	ldr	r3, [r3, #0]
    dd0c:	4618      	mov	r0, r3
    dd0e:	4b03      	ldr	r3, [pc, #12]	; (dd1c <TC5_Handler+0x18>)
    dd10:	4798      	blx	r3
}
    dd12:	bf00      	nop
    dd14:	bd80      	pop	{r7, pc}
    dd16:	bf00      	nop
    dd18:	20008ae0 	.word	0x20008ae0
    dd1c:	0000dbf1 	.word	0x0000dbf1

0000dd20 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    dd20:	b580      	push	{r7, lr}
    dd22:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    dd24:	4b03      	ldr	r3, [pc, #12]	; (dd34 <TC6_Handler+0x14>)
    dd26:	681b      	ldr	r3, [r3, #0]
    dd28:	4618      	mov	r0, r3
    dd2a:	4b03      	ldr	r3, [pc, #12]	; (dd38 <TC6_Handler+0x18>)
    dd2c:	4798      	blx	r3
}
    dd2e:	bf00      	nop
    dd30:	bd80      	pop	{r7, pc}
    dd32:	bf00      	nop
    dd34:	20008ae4 	.word	0x20008ae4
    dd38:	0000dbf1 	.word	0x0000dbf1

0000dd3c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    dd3c:	b580      	push	{r7, lr}
    dd3e:	b084      	sub	sp, #16
    dd40:	af00      	add	r7, sp, #0
    dd42:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    dd44:	6878      	ldr	r0, [r7, #4]
    dd46:	4b13      	ldr	r3, [pc, #76]	; (dd94 <get_tc_index+0x58>)
    dd48:	4798      	blx	r3
    dd4a:	4603      	mov	r3, r0
    dd4c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    dd4e:	2300      	movs	r3, #0
    dd50:	73fb      	strb	r3, [r7, #15]
    dd52:	e010      	b.n	dd76 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    dd54:	7bfa      	ldrb	r2, [r7, #15]
    dd56:	4910      	ldr	r1, [pc, #64]	; (dd98 <get_tc_index+0x5c>)
    dd58:	4613      	mov	r3, r2
    dd5a:	009b      	lsls	r3, r3, #2
    dd5c:	4413      	add	r3, r2
    dd5e:	009b      	lsls	r3, r3, #2
    dd60:	440b      	add	r3, r1
    dd62:	781b      	ldrb	r3, [r3, #0]
    dd64:	7bba      	ldrb	r2, [r7, #14]
    dd66:	429a      	cmp	r2, r3
    dd68:	d102      	bne.n	dd70 <get_tc_index+0x34>
			return i;
    dd6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    dd6e:	e00d      	b.n	dd8c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    dd70:	7bfb      	ldrb	r3, [r7, #15]
    dd72:	3301      	adds	r3, #1
    dd74:	73fb      	strb	r3, [r7, #15]
    dd76:	7bfb      	ldrb	r3, [r7, #15]
    dd78:	2b05      	cmp	r3, #5
    dd7a:	d9eb      	bls.n	dd54 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    dd7c:	f240 221d 	movw	r2, #541	; 0x21d
    dd80:	4906      	ldr	r1, [pc, #24]	; (dd9c <get_tc_index+0x60>)
    dd82:	2000      	movs	r0, #0
    dd84:	4b06      	ldr	r3, [pc, #24]	; (dda0 <get_tc_index+0x64>)
    dd86:	4798      	blx	r3
	return -1;
    dd88:	f04f 33ff 	mov.w	r3, #4294967295
}
    dd8c:	4618      	mov	r0, r3
    dd8e:	3710      	adds	r7, #16
    dd90:	46bd      	mov	sp, r7
    dd92:	bd80      	pop	{r7, pc}
    dd94:	0000de41 	.word	0x0000de41
    dd98:	20000144 	.word	0x20000144
    dd9c:	00020498 	.word	0x00020498
    dda0:	00007d5d 	.word	0x00007d5d

0000dda4 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    dda4:	b480      	push	{r7}
    dda6:	b083      	sub	sp, #12
    dda8:	af00      	add	r7, sp, #0
    ddaa:	6078      	str	r0, [r7, #4]
    ddac:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    ddae:	687b      	ldr	r3, [r7, #4]
    ddb0:	4a17      	ldr	r2, [pc, #92]	; (de10 <_tc_init_irq_param+0x6c>)
    ddb2:	4293      	cmp	r3, r2
    ddb4:	d102      	bne.n	ddbc <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    ddb6:	4a17      	ldr	r2, [pc, #92]	; (de14 <_tc_init_irq_param+0x70>)
    ddb8:	683b      	ldr	r3, [r7, #0]
    ddba:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    ddbc:	687b      	ldr	r3, [r7, #4]
    ddbe:	4a16      	ldr	r2, [pc, #88]	; (de18 <_tc_init_irq_param+0x74>)
    ddc0:	4293      	cmp	r3, r2
    ddc2:	d102      	bne.n	ddca <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _pwm_device *)dev;
    ddc4:	4a15      	ldr	r2, [pc, #84]	; (de1c <_tc_init_irq_param+0x78>)
    ddc6:	683b      	ldr	r3, [r7, #0]
    ddc8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    ddca:	687b      	ldr	r3, [r7, #4]
    ddcc:	4a14      	ldr	r2, [pc, #80]	; (de20 <_tc_init_irq_param+0x7c>)
    ddce:	4293      	cmp	r3, r2
    ddd0:	d102      	bne.n	ddd8 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    ddd2:	4a14      	ldr	r2, [pc, #80]	; (de24 <_tc_init_irq_param+0x80>)
    ddd4:	683b      	ldr	r3, [r7, #0]
    ddd6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    ddd8:	687b      	ldr	r3, [r7, #4]
    ddda:	4a13      	ldr	r2, [pc, #76]	; (de28 <_tc_init_irq_param+0x84>)
    dddc:	4293      	cmp	r3, r2
    ddde:	d102      	bne.n	dde6 <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
    dde0:	4a12      	ldr	r2, [pc, #72]	; (de2c <_tc_init_irq_param+0x88>)
    dde2:	683b      	ldr	r3, [r7, #0]
    dde4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    dde6:	687b      	ldr	r3, [r7, #4]
    dde8:	4a11      	ldr	r2, [pc, #68]	; (de30 <_tc_init_irq_param+0x8c>)
    ddea:	4293      	cmp	r3, r2
    ddec:	d102      	bne.n	ddf4 <_tc_init_irq_param+0x50>
		_tc5_dev = (struct _timer_device *)dev;
    ddee:	4a11      	ldr	r2, [pc, #68]	; (de34 <_tc_init_irq_param+0x90>)
    ddf0:	683b      	ldr	r3, [r7, #0]
    ddf2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    ddf4:	687b      	ldr	r3, [r7, #4]
    ddf6:	4a10      	ldr	r2, [pc, #64]	; (de38 <_tc_init_irq_param+0x94>)
    ddf8:	4293      	cmp	r3, r2
    ddfa:	d102      	bne.n	de02 <_tc_init_irq_param+0x5e>
		_tc6_dev = (struct _timer_device *)dev;
    ddfc:	4a0f      	ldr	r2, [pc, #60]	; (de3c <_tc_init_irq_param+0x98>)
    ddfe:	683b      	ldr	r3, [r7, #0]
    de00:	6013      	str	r3, [r2, #0]
	}
}
    de02:	bf00      	nop
    de04:	370c      	adds	r7, #12
    de06:	46bd      	mov	sp, r7
    de08:	f85d 7b04 	ldr.w	r7, [sp], #4
    de0c:	4770      	bx	lr
    de0e:	bf00      	nop
    de10:	40003800 	.word	0x40003800
    de14:	20008ad0 	.word	0x20008ad0
    de18:	40003c00 	.word	0x40003c00
    de1c:	20008ad4 	.word	0x20008ad4
    de20:	4101a000 	.word	0x4101a000
    de24:	20008ad8 	.word	0x20008ad8
    de28:	42001400 	.word	0x42001400
    de2c:	20008adc 	.word	0x20008adc
    de30:	42001800 	.word	0x42001800
    de34:	20008ae0 	.word	0x20008ae0
    de38:	43001400 	.word	0x43001400
    de3c:	20008ae4 	.word	0x20008ae4

0000de40 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    de40:	b4b0      	push	{r4, r5, r7}
    de42:	b08d      	sub	sp, #52	; 0x34
    de44:	af00      	add	r7, sp, #0
    de46:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    de48:	4b13      	ldr	r3, [pc, #76]	; (de98 <_get_hardware_offset+0x58>)
    de4a:	f107 040c 	add.w	r4, r7, #12
    de4e:	461d      	mov	r5, r3
    de50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    de52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    de54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    de58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    de5c:	2300      	movs	r3, #0
    de5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    de60:	e010      	b.n	de84 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    de62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    de64:	009b      	lsls	r3, r3, #2
    de66:	f107 0230 	add.w	r2, r7, #48	; 0x30
    de6a:	4413      	add	r3, r2
    de6c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    de70:	461a      	mov	r2, r3
    de72:	687b      	ldr	r3, [r7, #4]
    de74:	429a      	cmp	r2, r3
    de76:	d102      	bne.n	de7e <_get_hardware_offset+0x3e>
			return i;
    de78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    de7a:	b2db      	uxtb	r3, r3
    de7c:	e006      	b.n	de8c <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    de7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    de80:	3301      	adds	r3, #1
    de82:	62fb      	str	r3, [r7, #44]	; 0x2c
    de84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    de86:	2b07      	cmp	r3, #7
    de88:	d9eb      	bls.n	de62 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    de8a:	2300      	movs	r3, #0
}
    de8c:	4618      	mov	r0, r3
    de8e:	3734      	adds	r7, #52	; 0x34
    de90:	46bd      	mov	sp, r7
    de92:	bcb0      	pop	{r4, r5, r7}
    de94:	4770      	bx	lr
    de96:	bf00      	nop
    de98:	000204ac 	.word	0x000204ac

0000de9c <__NVIC_EnableIRQ>:
{
    de9c:	b480      	push	{r7}
    de9e:	b083      	sub	sp, #12
    dea0:	af00      	add	r7, sp, #0
    dea2:	4603      	mov	r3, r0
    dea4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    dea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    deaa:	2b00      	cmp	r3, #0
    deac:	db0b      	blt.n	dec6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    deae:	4909      	ldr	r1, [pc, #36]	; (ded4 <__NVIC_EnableIRQ+0x38>)
    deb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    deb4:	095b      	lsrs	r3, r3, #5
    deb6:	88fa      	ldrh	r2, [r7, #6]
    deb8:	f002 021f 	and.w	r2, r2, #31
    debc:	2001      	movs	r0, #1
    debe:	fa00 f202 	lsl.w	r2, r0, r2
    dec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dec6:	bf00      	nop
    dec8:	370c      	adds	r7, #12
    deca:	46bd      	mov	sp, r7
    decc:	f85d 7b04 	ldr.w	r7, [sp], #4
    ded0:	4770      	bx	lr
    ded2:	bf00      	nop
    ded4:	e000e100 	.word	0xe000e100

0000ded8 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    ded8:	b480      	push	{r7}
    deda:	b087      	sub	sp, #28
    dedc:	af00      	add	r7, sp, #0
    dede:	60f8      	str	r0, [r7, #12]
    dee0:	460b      	mov	r3, r1
    dee2:	607a      	str	r2, [r7, #4]
    dee4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    dee6:	7afa      	ldrb	r2, [r7, #11]
    dee8:	68f9      	ldr	r1, [r7, #12]
    deea:	4613      	mov	r3, r2
    deec:	009b      	lsls	r3, r3, #2
    deee:	4413      	add	r3, r2
    def0:	009b      	lsls	r3, r3, #2
    def2:	440b      	add	r3, r1
    def4:	3340      	adds	r3, #64	; 0x40
    def6:	681b      	ldr	r3, [r3, #0]
    def8:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    defa:	697a      	ldr	r2, [r7, #20]
    defc:	687b      	ldr	r3, [r7, #4]
    defe:	4013      	ands	r3, r2
    df00:	617b      	str	r3, [r7, #20]
	return tmp;
    df02:	697b      	ldr	r3, [r7, #20]
}
    df04:	4618      	mov	r0, r3
    df06:	371c      	adds	r7, #28
    df08:	46bd      	mov	sp, r7
    df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    df0e:	4770      	bx	lr

0000df10 <hri_oscctrl_get_STATUS_reg>:
{
    df10:	b480      	push	{r7}
    df12:	b085      	sub	sp, #20
    df14:	af00      	add	r7, sp, #0
    df16:	6078      	str	r0, [r7, #4]
    df18:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    df1a:	687b      	ldr	r3, [r7, #4]
    df1c:	691b      	ldr	r3, [r3, #16]
    df1e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    df20:	68fa      	ldr	r2, [r7, #12]
    df22:	683b      	ldr	r3, [r7, #0]
    df24:	4013      	ands	r3, r2
    df26:	60fb      	str	r3, [r7, #12]
	return tmp;
    df28:	68fb      	ldr	r3, [r7, #12]
}
    df2a:	4618      	mov	r0, r3
    df2c:	3714      	adds	r7, #20
    df2e:	46bd      	mov	sp, r7
    df30:	f85d 7b04 	ldr.w	r7, [sp], #4
    df34:	4770      	bx	lr

0000df36 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    df36:	b480      	push	{r7}
    df38:	b085      	sub	sp, #20
    df3a:	af00      	add	r7, sp, #0
    df3c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    df3e:	687b      	ldr	r3, [r7, #4]
    df40:	f893 3020 	ldrb.w	r3, [r3, #32]
    df44:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    df46:	7bfb      	ldrb	r3, [r7, #15]
    df48:	f003 0301 	and.w	r3, r3, #1
    df4c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    df4e:	7bfb      	ldrb	r3, [r7, #15]
    df50:	2b00      	cmp	r3, #0
    df52:	bf14      	ite	ne
    df54:	2301      	movne	r3, #1
    df56:	2300      	moveq	r3, #0
    df58:	b2db      	uxtb	r3, r3
}
    df5a:	4618      	mov	r0, r3
    df5c:	3714      	adds	r7, #20
    df5e:	46bd      	mov	sp, r7
    df60:	f85d 7b04 	ldr.w	r7, [sp], #4
    df64:	4770      	bx	lr

0000df66 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    df66:	b480      	push	{r7}
    df68:	b083      	sub	sp, #12
    df6a:	af00      	add	r7, sp, #0
    df6c:	6078      	str	r0, [r7, #4]
    df6e:	460b      	mov	r3, r1
    df70:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    df72:	bf00      	nop
    df74:	687b      	ldr	r3, [r7, #4]
    df76:	789b      	ldrb	r3, [r3, #2]
    df78:	b2da      	uxtb	r2, r3
    df7a:	78fb      	ldrb	r3, [r7, #3]
    df7c:	4013      	ands	r3, r2
    df7e:	b2db      	uxtb	r3, r3
    df80:	2b00      	cmp	r3, #0
    df82:	d1f7      	bne.n	df74 <hri_usb_wait_for_sync+0xe>
	};
}
    df84:	bf00      	nop
    df86:	370c      	adds	r7, #12
    df88:	46bd      	mov	sp, r7
    df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    df8e:	4770      	bx	lr

0000df90 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    df90:	b480      	push	{r7}
    df92:	b083      	sub	sp, #12
    df94:	af00      	add	r7, sp, #0
    df96:	6078      	str	r0, [r7, #4]
    df98:	460b      	mov	r3, r1
    df9a:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    df9c:	687b      	ldr	r3, [r7, #4]
    df9e:	789b      	ldrb	r3, [r3, #2]
    dfa0:	b2da      	uxtb	r2, r3
    dfa2:	78fb      	ldrb	r3, [r7, #3]
    dfa4:	4013      	ands	r3, r2
    dfa6:	b2db      	uxtb	r3, r3
    dfa8:	2b00      	cmp	r3, #0
    dfaa:	bf14      	ite	ne
    dfac:	2301      	movne	r3, #1
    dfae:	2300      	moveq	r3, #0
    dfb0:	b2db      	uxtb	r3, r3
}
    dfb2:	4618      	mov	r0, r3
    dfb4:	370c      	adds	r7, #12
    dfb6:	46bd      	mov	sp, r7
    dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfbc:	4770      	bx	lr

0000dfbe <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    dfbe:	b480      	push	{r7}
    dfc0:	b085      	sub	sp, #20
    dfc2:	af00      	add	r7, sp, #0
    dfc4:	6078      	str	r0, [r7, #4]
    dfc6:	460b      	mov	r3, r1
    dfc8:	70fb      	strb	r3, [r7, #3]
    dfca:	4613      	mov	r3, r2
    dfcc:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    dfce:	78fb      	ldrb	r3, [r7, #3]
    dfd0:	687a      	ldr	r2, [r7, #4]
    dfd2:	3308      	adds	r3, #8
    dfd4:	015b      	lsls	r3, r3, #5
    dfd6:	4413      	add	r3, r2
    dfd8:	3307      	adds	r3, #7
    dfda:	781b      	ldrb	r3, [r3, #0]
    dfdc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    dfde:	7bfa      	ldrb	r2, [r7, #15]
    dfe0:	78bb      	ldrb	r3, [r7, #2]
    dfe2:	4013      	ands	r3, r2
    dfe4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    dfe6:	7bfb      	ldrb	r3, [r7, #15]
}
    dfe8:	4618      	mov	r0, r3
    dfea:	3714      	adds	r7, #20
    dfec:	46bd      	mov	sp, r7
    dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
    dff2:	4770      	bx	lr

0000dff4 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    dff4:	b480      	push	{r7}
    dff6:	b083      	sub	sp, #12
    dff8:	af00      	add	r7, sp, #0
    dffa:	6078      	str	r0, [r7, #4]
    dffc:	460b      	mov	r3, r1
    dffe:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    e000:	78fb      	ldrb	r3, [r7, #3]
    e002:	687a      	ldr	r2, [r7, #4]
    e004:	3308      	adds	r3, #8
    e006:	015b      	lsls	r3, r3, #5
    e008:	4413      	add	r3, r2
    e00a:	3307      	adds	r3, #7
    e00c:	781b      	ldrb	r3, [r3, #0]
    e00e:	b2db      	uxtb	r3, r3
}
    e010:	4618      	mov	r0, r3
    e012:	370c      	adds	r7, #12
    e014:	46bd      	mov	sp, r7
    e016:	f85d 7b04 	ldr.w	r7, [sp], #4
    e01a:	4770      	bx	lr

0000e01c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    e01c:	b480      	push	{r7}
    e01e:	b083      	sub	sp, #12
    e020:	af00      	add	r7, sp, #0
    e022:	6078      	str	r0, [r7, #4]
    e024:	460b      	mov	r3, r1
    e026:	70fb      	strb	r3, [r7, #3]
    e028:	4613      	mov	r3, r2
    e02a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    e02c:	78fb      	ldrb	r3, [r7, #3]
    e02e:	687a      	ldr	r2, [r7, #4]
    e030:	3308      	adds	r3, #8
    e032:	015b      	lsls	r3, r3, #5
    e034:	4413      	add	r3, r2
    e036:	3307      	adds	r3, #7
    e038:	78ba      	ldrb	r2, [r7, #2]
    e03a:	701a      	strb	r2, [r3, #0]
}
    e03c:	bf00      	nop
    e03e:	370c      	adds	r7, #12
    e040:	46bd      	mov	sp, r7
    e042:	f85d 7b04 	ldr.w	r7, [sp], #4
    e046:	4770      	bx	lr

0000e048 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    e048:	b480      	push	{r7}
    e04a:	b083      	sub	sp, #12
    e04c:	af00      	add	r7, sp, #0
    e04e:	6078      	str	r0, [r7, #4]
    e050:	460b      	mov	r3, r1
    e052:	70fb      	strb	r3, [r7, #3]
    e054:	4613      	mov	r3, r2
    e056:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    e058:	78fb      	ldrb	r3, [r7, #3]
    e05a:	687a      	ldr	r2, [r7, #4]
    e05c:	3308      	adds	r3, #8
    e05e:	015b      	lsls	r3, r3, #5
    e060:	4413      	add	r3, r2
    e062:	3305      	adds	r3, #5
    e064:	78ba      	ldrb	r2, [r7, #2]
    e066:	701a      	strb	r2, [r3, #0]
}
    e068:	bf00      	nop
    e06a:	370c      	adds	r7, #12
    e06c:	46bd      	mov	sp, r7
    e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e072:	4770      	bx	lr

0000e074 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    e074:	b480      	push	{r7}
    e076:	b083      	sub	sp, #12
    e078:	af00      	add	r7, sp, #0
    e07a:	6078      	str	r0, [r7, #4]
    e07c:	460b      	mov	r3, r1
    e07e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    e080:	78fb      	ldrb	r3, [r7, #3]
    e082:	687a      	ldr	r2, [r7, #4]
    e084:	3308      	adds	r3, #8
    e086:	015b      	lsls	r3, r3, #5
    e088:	4413      	add	r3, r2
    e08a:	3306      	adds	r3, #6
    e08c:	781b      	ldrb	r3, [r3, #0]
    e08e:	b2db      	uxtb	r3, r3
}
    e090:	4618      	mov	r0, r3
    e092:	370c      	adds	r7, #12
    e094:	46bd      	mov	sp, r7
    e096:	f85d 7b04 	ldr.w	r7, [sp], #4
    e09a:	4770      	bx	lr

0000e09c <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    e09c:	b480      	push	{r7}
    e09e:	b083      	sub	sp, #12
    e0a0:	af00      	add	r7, sp, #0
    e0a2:	6078      	str	r0, [r7, #4]
    e0a4:	460b      	mov	r3, r1
    e0a6:	70fb      	strb	r3, [r7, #3]
    e0a8:	4613      	mov	r3, r2
    e0aa:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    e0ac:	78fb      	ldrb	r3, [r7, #3]
    e0ae:	687a      	ldr	r2, [r7, #4]
    e0b0:	3308      	adds	r3, #8
    e0b2:	015b      	lsls	r3, r3, #5
    e0b4:	4413      	add	r3, r2
    e0b6:	3304      	adds	r3, #4
    e0b8:	78ba      	ldrb	r2, [r7, #2]
    e0ba:	701a      	strb	r2, [r3, #0]
}
    e0bc:	bf00      	nop
    e0be:	370c      	adds	r7, #12
    e0c0:	46bd      	mov	sp, r7
    e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0c6:	4770      	bx	lr

0000e0c8 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    e0c8:	b480      	push	{r7}
    e0ca:	b083      	sub	sp, #12
    e0cc:	af00      	add	r7, sp, #0
    e0ce:	6078      	str	r0, [r7, #4]
    e0d0:	460b      	mov	r3, r1
    e0d2:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    e0d4:	78fb      	ldrb	r3, [r7, #3]
    e0d6:	687a      	ldr	r2, [r7, #4]
    e0d8:	015b      	lsls	r3, r3, #5
    e0da:	4413      	add	r3, r2
    e0dc:	f503 7384 	add.w	r3, r3, #264	; 0x108
    e0e0:	2210      	movs	r2, #16
    e0e2:	701a      	strb	r2, [r3, #0]
}
    e0e4:	bf00      	nop
    e0e6:	370c      	adds	r7, #12
    e0e8:	46bd      	mov	sp, r7
    e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0ee:	4770      	bx	lr

0000e0f0 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    e0f0:	b480      	push	{r7}
    e0f2:	b083      	sub	sp, #12
    e0f4:	af00      	add	r7, sp, #0
    e0f6:	6078      	str	r0, [r7, #4]
    e0f8:	460b      	mov	r3, r1
    e0fa:	70fb      	strb	r3, [r7, #3]
    e0fc:	4613      	mov	r3, r2
    e0fe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    e100:	78fb      	ldrb	r3, [r7, #3]
    e102:	687a      	ldr	r2, [r7, #4]
    e104:	015b      	lsls	r3, r3, #5
    e106:	4413      	add	r3, r2
    e108:	f203 1309 	addw	r3, r3, #265	; 0x109
    e10c:	78ba      	ldrb	r2, [r7, #2]
    e10e:	701a      	strb	r2, [r3, #0]
}
    e110:	bf00      	nop
    e112:	370c      	adds	r7, #12
    e114:	46bd      	mov	sp, r7
    e116:	f85d 7b04 	ldr.w	r7, [sp], #4
    e11a:	4770      	bx	lr

0000e11c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    e11c:	b480      	push	{r7}
    e11e:	b083      	sub	sp, #12
    e120:	af00      	add	r7, sp, #0
    e122:	6078      	str	r0, [r7, #4]
    e124:	460b      	mov	r3, r1
    e126:	70fb      	strb	r3, [r7, #3]
    e128:	4613      	mov	r3, r2
    e12a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    e12c:	78fb      	ldrb	r3, [r7, #3]
    e12e:	687a      	ldr	r2, [r7, #4]
    e130:	015b      	lsls	r3, r3, #5
    e132:	4413      	add	r3, r2
    e134:	f503 7384 	add.w	r3, r3, #264	; 0x108
    e138:	78ba      	ldrb	r2, [r7, #2]
    e13a:	701a      	strb	r2, [r3, #0]
}
    e13c:	bf00      	nop
    e13e:	370c      	adds	r7, #12
    e140:	46bd      	mov	sp, r7
    e142:	f85d 7b04 	ldr.w	r7, [sp], #4
    e146:	4770      	bx	lr

0000e148 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    e148:	b480      	push	{r7}
    e14a:	b085      	sub	sp, #20
    e14c:	af00      	add	r7, sp, #0
    e14e:	6078      	str	r0, [r7, #4]
    e150:	460b      	mov	r3, r1
    e152:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    e154:	78fb      	ldrb	r3, [r7, #3]
    e156:	687a      	ldr	r2, [r7, #4]
    e158:	3308      	adds	r3, #8
    e15a:	015b      	lsls	r3, r3, #5
    e15c:	4413      	add	r3, r2
    e15e:	781b      	ldrb	r3, [r3, #0]
    e160:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    e162:	7bfb      	ldrb	r3, [r7, #15]
    e164:	f003 0307 	and.w	r3, r3, #7
    e168:	73fb      	strb	r3, [r7, #15]
	return tmp;
    e16a:	7bfb      	ldrb	r3, [r7, #15]
}
    e16c:	4618      	mov	r0, r3
    e16e:	3714      	adds	r7, #20
    e170:	46bd      	mov	sp, r7
    e172:	f85d 7b04 	ldr.w	r7, [sp], #4
    e176:	4770      	bx	lr

0000e178 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    e178:	b480      	push	{r7}
    e17a:	b085      	sub	sp, #20
    e17c:	af00      	add	r7, sp, #0
    e17e:	6078      	str	r0, [r7, #4]
    e180:	460b      	mov	r3, r1
    e182:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    e184:	78fb      	ldrb	r3, [r7, #3]
    e186:	687a      	ldr	r2, [r7, #4]
    e188:	3308      	adds	r3, #8
    e18a:	015b      	lsls	r3, r3, #5
    e18c:	4413      	add	r3, r2
    e18e:	781b      	ldrb	r3, [r3, #0]
    e190:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    e192:	7bfb      	ldrb	r3, [r7, #15]
    e194:	091b      	lsrs	r3, r3, #4
    e196:	b2db      	uxtb	r3, r3
    e198:	f003 0307 	and.w	r3, r3, #7
    e19c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    e19e:	7bfb      	ldrb	r3, [r7, #15]
}
    e1a0:	4618      	mov	r0, r3
    e1a2:	3714      	adds	r7, #20
    e1a4:	46bd      	mov	sp, r7
    e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1aa:	4770      	bx	lr

0000e1ac <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    e1ac:	b480      	push	{r7}
    e1ae:	b083      	sub	sp, #12
    e1b0:	af00      	add	r7, sp, #0
    e1b2:	6078      	str	r0, [r7, #4]
    e1b4:	460b      	mov	r3, r1
    e1b6:	70fb      	strb	r3, [r7, #3]
    e1b8:	4613      	mov	r3, r2
    e1ba:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    e1bc:	78fb      	ldrb	r3, [r7, #3]
    e1be:	687a      	ldr	r2, [r7, #4]
    e1c0:	3308      	adds	r3, #8
    e1c2:	015b      	lsls	r3, r3, #5
    e1c4:	4413      	add	r3, r2
    e1c6:	78ba      	ldrb	r2, [r7, #2]
    e1c8:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    e1ca:	bf00      	nop
    e1cc:	370c      	adds	r7, #12
    e1ce:	46bd      	mov	sp, r7
    e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1d4:	4770      	bx	lr

0000e1d6 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    e1d6:	b480      	push	{r7}
    e1d8:	b083      	sub	sp, #12
    e1da:	af00      	add	r7, sp, #0
    e1dc:	6078      	str	r0, [r7, #4]
    e1de:	460b      	mov	r3, r1
    e1e0:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    e1e2:	78fb      	ldrb	r3, [r7, #3]
    e1e4:	687a      	ldr	r2, [r7, #4]
    e1e6:	3308      	adds	r3, #8
    e1e8:	015b      	lsls	r3, r3, #5
    e1ea:	4413      	add	r3, r2
    e1ec:	781b      	ldrb	r3, [r3, #0]
    e1ee:	b2db      	uxtb	r3, r3
}
    e1f0:	4618      	mov	r0, r3
    e1f2:	370c      	adds	r7, #12
    e1f4:	46bd      	mov	sp, r7
    e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1fa:	4770      	bx	lr

0000e1fc <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    e1fc:	b480      	push	{r7}
    e1fe:	b083      	sub	sp, #12
    e200:	af00      	add	r7, sp, #0
    e202:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    e204:	687b      	ldr	r3, [r7, #4]
    e206:	8b9b      	ldrh	r3, [r3, #28]
    e208:	b29b      	uxth	r3, r3
}
    e20a:	4618      	mov	r0, r3
    e20c:	370c      	adds	r7, #12
    e20e:	46bd      	mov	sp, r7
    e210:	f85d 7b04 	ldr.w	r7, [sp], #4
    e214:	4770      	bx	lr

0000e216 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    e216:	b480      	push	{r7}
    e218:	b083      	sub	sp, #12
    e21a:	af00      	add	r7, sp, #0
    e21c:	6078      	str	r0, [r7, #4]
    e21e:	460b      	mov	r3, r1
    e220:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    e222:	687b      	ldr	r3, [r7, #4]
    e224:	887a      	ldrh	r2, [r7, #2]
    e226:	839a      	strh	r2, [r3, #28]
}
    e228:	bf00      	nop
    e22a:	370c      	adds	r7, #12
    e22c:	46bd      	mov	sp, r7
    e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e232:	4770      	bx	lr

0000e234 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    e234:	b480      	push	{r7}
    e236:	b083      	sub	sp, #12
    e238:	af00      	add	r7, sp, #0
    e23a:	6078      	str	r0, [r7, #4]
    e23c:	460b      	mov	r3, r1
    e23e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    e240:	687b      	ldr	r3, [r7, #4]
    e242:	887a      	ldrh	r2, [r7, #2]
    e244:	831a      	strh	r2, [r3, #24]
}
    e246:	bf00      	nop
    e248:	370c      	adds	r7, #12
    e24a:	46bd      	mov	sp, r7
    e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e250:	4770      	bx	lr

0000e252 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    e252:	b480      	push	{r7}
    e254:	b083      	sub	sp, #12
    e256:	af00      	add	r7, sp, #0
    e258:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    e25a:	687b      	ldr	r3, [r7, #4]
    e25c:	8b1b      	ldrh	r3, [r3, #24]
    e25e:	b29b      	uxth	r3, r3
}
    e260:	4618      	mov	r0, r3
    e262:	370c      	adds	r7, #12
    e264:	46bd      	mov	sp, r7
    e266:	f85d 7b04 	ldr.w	r7, [sp], #4
    e26a:	4770      	bx	lr

0000e26c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    e26c:	b480      	push	{r7}
    e26e:	b083      	sub	sp, #12
    e270:	af00      	add	r7, sp, #0
    e272:	6078      	str	r0, [r7, #4]
    e274:	460b      	mov	r3, r1
    e276:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    e278:	687b      	ldr	r3, [r7, #4]
    e27a:	887a      	ldrh	r2, [r7, #2]
    e27c:	829a      	strh	r2, [r3, #20]
}
    e27e:	bf00      	nop
    e280:	370c      	adds	r7, #12
    e282:	46bd      	mov	sp, r7
    e284:	f85d 7b04 	ldr.w	r7, [sp], #4
    e288:	4770      	bx	lr

0000e28a <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    e28a:	b480      	push	{r7}
    e28c:	b085      	sub	sp, #20
    e28e:	af00      	add	r7, sp, #0
    e290:	6078      	str	r0, [r7, #4]
    e292:	460b      	mov	r3, r1
    e294:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    e296:	687b      	ldr	r3, [r7, #4]
    e298:	789b      	ldrb	r3, [r3, #2]
    e29a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    e29c:	7bfa      	ldrb	r2, [r7, #15]
    e29e:	78fb      	ldrb	r3, [r7, #3]
    e2a0:	4013      	ands	r3, r2
    e2a2:	73fb      	strb	r3, [r7, #15]
	return tmp;
    e2a4:	7bfb      	ldrb	r3, [r7, #15]
}
    e2a6:	4618      	mov	r0, r3
    e2a8:	3714      	adds	r7, #20
    e2aa:	46bd      	mov	sp, r7
    e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    e2b0:	4770      	bx	lr
	...

0000e2b4 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    e2b4:	b580      	push	{r7, lr}
    e2b6:	b082      	sub	sp, #8
    e2b8:	af00      	add	r7, sp, #0
    e2ba:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    e2bc:	687b      	ldr	r3, [r7, #4]
    e2be:	781b      	ldrb	r3, [r3, #0]
    e2c0:	b2db      	uxtb	r3, r3
    e2c2:	f023 0302 	bic.w	r3, r3, #2
    e2c6:	b2da      	uxtb	r2, r3
    e2c8:	687b      	ldr	r3, [r7, #4]
    e2ca:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    e2cc:	2103      	movs	r1, #3
    e2ce:	6878      	ldr	r0, [r7, #4]
    e2d0:	4b02      	ldr	r3, [pc, #8]	; (e2dc <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    e2d2:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    e2d4:	bf00      	nop
    e2d6:	3708      	adds	r7, #8
    e2d8:	46bd      	mov	sp, r7
    e2da:	bd80      	pop	{r7, pc}
    e2dc:	0000df67 	.word	0x0000df67

0000e2e0 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    e2e0:	b580      	push	{r7, lr}
    e2e2:	b084      	sub	sp, #16
    e2e4:	af00      	add	r7, sp, #0
    e2e6:	6078      	str	r0, [r7, #4]
    e2e8:	460b      	mov	r3, r1
    e2ea:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    e2ec:	2103      	movs	r1, #3
    e2ee:	6878      	ldr	r0, [r7, #4]
    e2f0:	4b06      	ldr	r3, [pc, #24]	; (e30c <hri_usb_get_CTRLA_reg+0x2c>)
    e2f2:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    e2f4:	687b      	ldr	r3, [r7, #4]
    e2f6:	781b      	ldrb	r3, [r3, #0]
    e2f8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    e2fa:	7bfa      	ldrb	r2, [r7, #15]
    e2fc:	78fb      	ldrb	r3, [r7, #3]
    e2fe:	4013      	ands	r3, r2
    e300:	73fb      	strb	r3, [r7, #15]
	return tmp;
    e302:	7bfb      	ldrb	r3, [r7, #15]
}
    e304:	4618      	mov	r0, r3
    e306:	3710      	adds	r7, #16
    e308:	46bd      	mov	sp, r7
    e30a:	bd80      	pop	{r7, pc}
    e30c:	0000df67 	.word	0x0000df67

0000e310 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    e310:	b580      	push	{r7, lr}
    e312:	b082      	sub	sp, #8
    e314:	af00      	add	r7, sp, #0
    e316:	6078      	str	r0, [r7, #4]
    e318:	460b      	mov	r3, r1
    e31a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    e31c:	687b      	ldr	r3, [r7, #4]
    e31e:	78fa      	ldrb	r2, [r7, #3]
    e320:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    e322:	2103      	movs	r1, #3
    e324:	6878      	ldr	r0, [r7, #4]
    e326:	4b03      	ldr	r3, [pc, #12]	; (e334 <hri_usb_write_CTRLA_reg+0x24>)
    e328:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    e32a:	bf00      	nop
    e32c:	3708      	adds	r7, #8
    e32e:	46bd      	mov	sp, r7
    e330:	bd80      	pop	{r7, pc}
    e332:	bf00      	nop
    e334:	0000df67 	.word	0x0000df67

0000e338 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    e338:	b580      	push	{r7, lr}
    e33a:	b082      	sub	sp, #8
    e33c:	af00      	add	r7, sp, #0
    e33e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    e340:	2103      	movs	r1, #3
    e342:	6878      	ldr	r0, [r7, #4]
    e344:	4b04      	ldr	r3, [pc, #16]	; (e358 <hri_usb_read_CTRLA_reg+0x20>)
    e346:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    e348:	687b      	ldr	r3, [r7, #4]
    e34a:	781b      	ldrb	r3, [r3, #0]
    e34c:	b2db      	uxtb	r3, r3
}
    e34e:	4618      	mov	r0, r3
    e350:	3708      	adds	r7, #8
    e352:	46bd      	mov	sp, r7
    e354:	bd80      	pop	{r7, pc}
    e356:	bf00      	nop
    e358:	0000df67 	.word	0x0000df67

0000e35c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    e35c:	b480      	push	{r7}
    e35e:	b083      	sub	sp, #12
    e360:	af00      	add	r7, sp, #0
    e362:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    e364:	687b      	ldr	r3, [r7, #4]
    e366:	891b      	ldrh	r3, [r3, #8]
    e368:	b29b      	uxth	r3, r3
    e36a:	f023 0301 	bic.w	r3, r3, #1
    e36e:	b29a      	uxth	r2, r3
    e370:	687b      	ldr	r3, [r7, #4]
    e372:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    e374:	bf00      	nop
    e376:	370c      	adds	r7, #12
    e378:	46bd      	mov	sp, r7
    e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e37e:	4770      	bx	lr

0000e380 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    e380:	b480      	push	{r7}
    e382:	b083      	sub	sp, #12
    e384:	af00      	add	r7, sp, #0
    e386:	6078      	str	r0, [r7, #4]
    e388:	460b      	mov	r3, r1
    e38a:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    e38c:	687b      	ldr	r3, [r7, #4]
    e38e:	887a      	ldrh	r2, [r7, #2]
    e390:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    e392:	bf00      	nop
    e394:	370c      	adds	r7, #12
    e396:	46bd      	mov	sp, r7
    e398:	f85d 7b04 	ldr.w	r7, [sp], #4
    e39c:	4770      	bx	lr

0000e39e <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    e39e:	b480      	push	{r7}
    e3a0:	b083      	sub	sp, #12
    e3a2:	af00      	add	r7, sp, #0
    e3a4:	6078      	str	r0, [r7, #4]
    e3a6:	460b      	mov	r3, r1
    e3a8:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    e3aa:	687b      	ldr	r3, [r7, #4]
    e3ac:	78fa      	ldrb	r2, [r7, #3]
    e3ae:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    e3b0:	bf00      	nop
    e3b2:	370c      	adds	r7, #12
    e3b4:	46bd      	mov	sp, r7
    e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e3ba:	4770      	bx	lr

0000e3bc <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    e3bc:	b480      	push	{r7}
    e3be:	b083      	sub	sp, #12
    e3c0:	af00      	add	r7, sp, #0
    e3c2:	6078      	str	r0, [r7, #4]
    e3c4:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    e3c6:	687b      	ldr	r3, [r7, #4]
    e3c8:	683a      	ldr	r2, [r7, #0]
    e3ca:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    e3cc:	bf00      	nop
    e3ce:	370c      	adds	r7, #12
    e3d0:	46bd      	mov	sp, r7
    e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e3d6:	4770      	bx	lr

0000e3d8 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    e3d8:	b480      	push	{r7}
    e3da:	b083      	sub	sp, #12
    e3dc:	af00      	add	r7, sp, #0
    e3de:	6078      	str	r0, [r7, #4]
    e3e0:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    e3e2:	2300      	movs	r3, #0
}
    e3e4:	4618      	mov	r0, r3
    e3e6:	370c      	adds	r7, #12
    e3e8:	46bd      	mov	sp, r7
    e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    e3ee:	4770      	bx	lr

0000e3f0 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    e3f0:	b480      	push	{r7}
    e3f2:	b085      	sub	sp, #20
    e3f4:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    e3f6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e3fa:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    e3fc:	4b28      	ldr	r3, [pc, #160]	; (e4a0 <_usb_load_calib+0xb0>)
    e3fe:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    e400:	f003 031f 	and.w	r3, r3, #31
    e404:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    e406:	4b26      	ldr	r3, [pc, #152]	; (e4a0 <_usb_load_calib+0xb0>)
    e408:	681b      	ldr	r3, [r3, #0]
    e40a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    e40c:	f003 031f 	and.w	r3, r3, #31
    e410:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    e412:	4b23      	ldr	r3, [pc, #140]	; (e4a0 <_usb_load_calib+0xb0>)
    e414:	681b      	ldr	r3, [r3, #0]
    e416:	0a9b      	lsrs	r3, r3, #10
    e418:	f003 0307 	and.w	r3, r3, #7
    e41c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    e41e:	68fb      	ldr	r3, [r7, #12]
    e420:	2b00      	cmp	r3, #0
    e422:	d002      	beq.n	e42a <_usb_load_calib+0x3a>
    e424:	68fb      	ldr	r3, [r7, #12]
    e426:	2b1f      	cmp	r3, #31
    e428:	d101      	bne.n	e42e <_usb_load_calib+0x3e>
		pad_transn = 9;
    e42a:	2309      	movs	r3, #9
    e42c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    e42e:	68bb      	ldr	r3, [r7, #8]
    e430:	2b00      	cmp	r3, #0
    e432:	d002      	beq.n	e43a <_usb_load_calib+0x4a>
    e434:	68bb      	ldr	r3, [r7, #8]
    e436:	2b1f      	cmp	r3, #31
    e438:	d101      	bne.n	e43e <_usb_load_calib+0x4e>
		pad_transp = 25;
    e43a:	2319      	movs	r3, #25
    e43c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    e43e:	687b      	ldr	r3, [r7, #4]
    e440:	2b00      	cmp	r3, #0
    e442:	d002      	beq.n	e44a <_usb_load_calib+0x5a>
    e444:	687b      	ldr	r3, [r7, #4]
    e446:	2b07      	cmp	r3, #7
    e448:	d101      	bne.n	e44e <_usb_load_calib+0x5e>
		pad_trim = 6;
    e44a:	2306      	movs	r3, #6
    e44c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    e44e:	68fb      	ldr	r3, [r7, #12]
    e450:	b29b      	uxth	r3, r3
    e452:	019b      	lsls	r3, r3, #6
    e454:	b29b      	uxth	r3, r3
    e456:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    e45a:	b29a      	uxth	r2, r3
    e45c:	68bb      	ldr	r3, [r7, #8]
    e45e:	b29b      	uxth	r3, r3
    e460:	f003 031f 	and.w	r3, r3, #31
    e464:	b29b      	uxth	r3, r3
    e466:	4313      	orrs	r3, r2
    e468:	b29a      	uxth	r2, r3
    e46a:	687b      	ldr	r3, [r7, #4]
    e46c:	b29b      	uxth	r3, r3
    e46e:	031b      	lsls	r3, r3, #12
    e470:	b29b      	uxth	r3, r3
    e472:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    e476:	b29b      	uxth	r3, r3
    e478:	4313      	orrs	r3, r2
    e47a:	b29a      	uxth	r2, r3
    e47c:	683b      	ldr	r3, [r7, #0]
    e47e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    e480:	683a      	ldr	r2, [r7, #0]
    e482:	78d3      	ldrb	r3, [r2, #3]
    e484:	f043 0303 	orr.w	r3, r3, #3
    e488:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    e48a:	683a      	ldr	r2, [r7, #0]
    e48c:	78d3      	ldrb	r3, [r2, #3]
    e48e:	f043 030c 	orr.w	r3, r3, #12
    e492:	70d3      	strb	r3, [r2, #3]
}
    e494:	bf00      	nop
    e496:	3714      	adds	r7, #20
    e498:	46bd      	mov	sp, r7
    e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e49e:	4770      	bx	lr
    e4a0:	00800084 	.word	0x00800084

0000e4a4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    e4a4:	b580      	push	{r7, lr}
    e4a6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    e4a8:	bf00      	nop
    e4aa:	2203      	movs	r2, #3
    e4ac:	2100      	movs	r1, #0
    e4ae:	4804      	ldr	r0, [pc, #16]	; (e4c0 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    e4b0:	4b04      	ldr	r3, [pc, #16]	; (e4c4 <_usb_d_dev_wait_dpll_rdy+0x20>)
    e4b2:	4798      	blx	r3
    e4b4:	4603      	mov	r3, r0
    e4b6:	2b03      	cmp	r3, #3
    e4b8:	d1f7      	bne.n	e4aa <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    e4ba:	bf00      	nop
    e4bc:	bd80      	pop	{r7, pc}
    e4be:	bf00      	nop
    e4c0:	40001000 	.word	0x40001000
    e4c4:	0000ded9 	.word	0x0000ded9

0000e4c8 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    e4c8:	b580      	push	{r7, lr}
    e4ca:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    e4cc:	480e      	ldr	r0, [pc, #56]	; (e508 <_usb_d_dev_wait_dfll_rdy+0x40>)
    e4ce:	4b0f      	ldr	r3, [pc, #60]	; (e50c <_usb_d_dev_wait_dfll_rdy+0x44>)
    e4d0:	4798      	blx	r3
    e4d2:	4603      	mov	r3, r0
    e4d4:	2b00      	cmp	r3, #0
    e4d6:	d00a      	beq.n	e4ee <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    e4d8:	bf00      	nop
    e4da:	f44f 6110 	mov.w	r1, #2304	; 0x900
    e4de:	480a      	ldr	r0, [pc, #40]	; (e508 <_usb_d_dev_wait_dfll_rdy+0x40>)
    e4e0:	4b0b      	ldr	r3, [pc, #44]	; (e510 <_usb_d_dev_wait_dfll_rdy+0x48>)
    e4e2:	4798      	blx	r3
    e4e4:	4603      	mov	r3, r0
    e4e6:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    e4ea:	d1f6      	bne.n	e4da <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    e4ec:	e009      	b.n	e502 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    e4ee:	bf00      	nop
    e4f0:	f44f 7180 	mov.w	r1, #256	; 0x100
    e4f4:	4804      	ldr	r0, [pc, #16]	; (e508 <_usb_d_dev_wait_dfll_rdy+0x40>)
    e4f6:	4b06      	ldr	r3, [pc, #24]	; (e510 <_usb_d_dev_wait_dfll_rdy+0x48>)
    e4f8:	4798      	blx	r3
    e4fa:	4603      	mov	r3, r0
    e4fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    e500:	d1f6      	bne.n	e4f0 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    e502:	bf00      	nop
    e504:	bd80      	pop	{r7, pc}
    e506:	bf00      	nop
    e508:	40001000 	.word	0x40001000
    e50c:	0000df37 	.word	0x0000df37
    e510:	0000df11 	.word	0x0000df11

0000e514 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    e514:	b580      	push	{r7, lr}
    e516:	b082      	sub	sp, #8
    e518:	af00      	add	r7, sp, #0
    e51a:	4603      	mov	r3, r0
    e51c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    e51e:	79fb      	ldrb	r3, [r7, #7]
    e520:	2b00      	cmp	r3, #0
    e522:	d102      	bne.n	e52a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    e524:	4b05      	ldr	r3, [pc, #20]	; (e53c <_usb_d_dev_wait_clk_rdy+0x28>)
    e526:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    e528:	e004      	b.n	e534 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    e52a:	79fb      	ldrb	r3, [r7, #7]
    e52c:	2b01      	cmp	r3, #1
    e52e:	d101      	bne.n	e534 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    e530:	4b03      	ldr	r3, [pc, #12]	; (e540 <_usb_d_dev_wait_clk_rdy+0x2c>)
    e532:	4798      	blx	r3
}
    e534:	bf00      	nop
    e536:	3708      	adds	r7, #8
    e538:	46bd      	mov	sp, r7
    e53a:	bd80      	pop	{r7, pc}
    e53c:	0000e4c9 	.word	0x0000e4c9
    e540:	0000e4a5 	.word	0x0000e4a5

0000e544 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    e544:	b580      	push	{r7, lr}
    e546:	b082      	sub	sp, #8
    e548:	af00      	add	r7, sp, #0
    e54a:	4603      	mov	r3, r0
    e54c:	6039      	str	r1, [r7, #0]
    e54e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    e550:	683b      	ldr	r3, [r7, #0]
    e552:	b2da      	uxtb	r2, r3
    e554:	79fb      	ldrb	r3, [r7, #7]
    e556:	4619      	mov	r1, r3
    e558:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e55c:	4b02      	ldr	r3, [pc, #8]	; (e568 <_usbd_ep_int_ack+0x24>)
    e55e:	4798      	blx	r3
}
    e560:	bf00      	nop
    e562:	3708      	adds	r7, #8
    e564:	46bd      	mov	sp, r7
    e566:	bd80      	pop	{r7, pc}
    e568:	0000e01d 	.word	0x0000e01d

0000e56c <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    e56c:	b580      	push	{r7, lr}
    e56e:	b082      	sub	sp, #8
    e570:	af00      	add	r7, sp, #0
    e572:	4603      	mov	r3, r0
    e574:	6039      	str	r1, [r7, #0]
    e576:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    e578:	683b      	ldr	r3, [r7, #0]
    e57a:	b2da      	uxtb	r2, r3
    e57c:	79fb      	ldrb	r3, [r7, #7]
    e57e:	4619      	mov	r1, r3
    e580:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e584:	4b02      	ldr	r3, [pc, #8]	; (e590 <_usbd_ep_int_en+0x24>)
    e586:	4798      	blx	r3
}
    e588:	bf00      	nop
    e58a:	3708      	adds	r7, #8
    e58c:	46bd      	mov	sp, r7
    e58e:	bd80      	pop	{r7, pc}
    e590:	0000e0f1 	.word	0x0000e0f1

0000e594 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    e594:	b580      	push	{r7, lr}
    e596:	b082      	sub	sp, #8
    e598:	af00      	add	r7, sp, #0
    e59a:	4603      	mov	r3, r0
    e59c:	6039      	str	r1, [r7, #0]
    e59e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    e5a0:	683b      	ldr	r3, [r7, #0]
    e5a2:	b2da      	uxtb	r2, r3
    e5a4:	79fb      	ldrb	r3, [r7, #7]
    e5a6:	4619      	mov	r1, r3
    e5a8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e5ac:	4b02      	ldr	r3, [pc, #8]	; (e5b8 <_usbd_ep_int_dis+0x24>)
    e5ae:	4798      	blx	r3
}
    e5b0:	bf00      	nop
    e5b2:	3708      	adds	r7, #8
    e5b4:	46bd      	mov	sp, r7
    e5b6:	bd80      	pop	{r7, pc}
    e5b8:	0000e11d 	.word	0x0000e11d

0000e5bc <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    e5bc:	b580      	push	{r7, lr}
    e5be:	b082      	sub	sp, #8
    e5c0:	af00      	add	r7, sp, #0
    e5c2:	4603      	mov	r3, r0
    e5c4:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    e5c6:	79fb      	ldrb	r3, [r7, #7]
    e5c8:	4619      	mov	r1, r3
    e5ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e5ce:	4b06      	ldr	r3, [pc, #24]	; (e5e8 <_usbd_ep_is_ctrl+0x2c>)
    e5d0:	4798      	blx	r3
    e5d2:	4603      	mov	r3, r0
    e5d4:	2b11      	cmp	r3, #17
    e5d6:	bf0c      	ite	eq
    e5d8:	2301      	moveq	r3, #1
    e5da:	2300      	movne	r3, #0
    e5dc:	b2db      	uxtb	r3, r3
}
    e5de:	4618      	mov	r0, r3
    e5e0:	3708      	adds	r7, #8
    e5e2:	46bd      	mov	sp, r7
    e5e4:	bd80      	pop	{r7, pc}
    e5e6:	bf00      	nop
    e5e8:	0000e1d7 	.word	0x0000e1d7

0000e5ec <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    e5ec:	b580      	push	{r7, lr}
    e5ee:	b082      	sub	sp, #8
    e5f0:	af00      	add	r7, sp, #0
    e5f2:	4603      	mov	r3, r0
    e5f4:	71fb      	strb	r3, [r7, #7]
    e5f6:	460b      	mov	r3, r1
    e5f8:	71bb      	strb	r3, [r7, #6]
    e5fa:	4613      	mov	r3, r2
    e5fc:	717b      	strb	r3, [r7, #5]
	if (st) {
    e5fe:	797b      	ldrb	r3, [r7, #5]
    e600:	2b00      	cmp	r3, #0
    e602:	d00b      	beq.n	e61c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e604:	79bb      	ldrb	r3, [r7, #6]
    e606:	2210      	movs	r2, #16
    e608:	fa02 f303 	lsl.w	r3, r2, r3
    e60c:	b2da      	uxtb	r2, r3
    e60e:	79fb      	ldrb	r3, [r7, #7]
    e610:	4619      	mov	r1, r3
    e612:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e616:	4b09      	ldr	r3, [pc, #36]	; (e63c <_usbd_ep_set_stall+0x50>)
    e618:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    e61a:	e00a      	b.n	e632 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e61c:	79bb      	ldrb	r3, [r7, #6]
    e61e:	2210      	movs	r2, #16
    e620:	fa02 f303 	lsl.w	r3, r2, r3
    e624:	b2da      	uxtb	r2, r3
    e626:	79fb      	ldrb	r3, [r7, #7]
    e628:	4619      	mov	r1, r3
    e62a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e62e:	4b04      	ldr	r3, [pc, #16]	; (e640 <_usbd_ep_set_stall+0x54>)
    e630:	4798      	blx	r3
}
    e632:	bf00      	nop
    e634:	3708      	adds	r7, #8
    e636:	46bd      	mov	sp, r7
    e638:	bd80      	pop	{r7, pc}
    e63a:	bf00      	nop
    e63c:	0000e049 	.word	0x0000e049
    e640:	0000e09d 	.word	0x0000e09d

0000e644 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    e644:	b580      	push	{r7, lr}
    e646:	b084      	sub	sp, #16
    e648:	af00      	add	r7, sp, #0
    e64a:	4603      	mov	r3, r0
    e64c:	460a      	mov	r2, r1
    e64e:	71fb      	strb	r3, [r7, #7]
    e650:	4613      	mov	r3, r2
    e652:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    e654:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e658:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e65a:	79fb      	ldrb	r3, [r7, #7]
    e65c:	4619      	mov	r1, r3
    e65e:	68f8      	ldr	r0, [r7, #12]
    e660:	4b08      	ldr	r3, [pc, #32]	; (e684 <_usbd_ep_is_stalled+0x40>)
    e662:	4798      	blx	r3
    e664:	4603      	mov	r3, r0
    e666:	4619      	mov	r1, r3
    e668:	79bb      	ldrb	r3, [r7, #6]
    e66a:	2210      	movs	r2, #16
    e66c:	fa02 f303 	lsl.w	r3, r2, r3
    e670:	400b      	ands	r3, r1
    e672:	2b00      	cmp	r3, #0
    e674:	bf14      	ite	ne
    e676:	2301      	movne	r3, #1
    e678:	2300      	moveq	r3, #0
    e67a:	b2db      	uxtb	r3, r3
}
    e67c:	4618      	mov	r0, r3
    e67e:	3710      	adds	r7, #16
    e680:	46bd      	mov	sp, r7
    e682:	bd80      	pop	{r7, pc}
    e684:	0000e075 	.word	0x0000e075

0000e688 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    e688:	b580      	push	{r7, lr}
    e68a:	b084      	sub	sp, #16
    e68c:	af00      	add	r7, sp, #0
    e68e:	4603      	mov	r3, r0
    e690:	460a      	mov	r2, r1
    e692:	71fb      	strb	r3, [r7, #7]
    e694:	4613      	mov	r3, r2
    e696:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    e698:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e69c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    e69e:	79fb      	ldrb	r3, [r7, #7]
    e6a0:	4619      	mov	r1, r3
    e6a2:	68f8      	ldr	r0, [r7, #12]
    e6a4:	4b08      	ldr	r3, [pc, #32]	; (e6c8 <_usbd_ep_is_stall_sent+0x40>)
    e6a6:	4798      	blx	r3
    e6a8:	4603      	mov	r3, r0
    e6aa:	4619      	mov	r1, r3
    e6ac:	79bb      	ldrb	r3, [r7, #6]
    e6ae:	2220      	movs	r2, #32
    e6b0:	fa02 f303 	lsl.w	r3, r2, r3
    e6b4:	400b      	ands	r3, r1
    e6b6:	2b00      	cmp	r3, #0
    e6b8:	bf14      	ite	ne
    e6ba:	2301      	movne	r3, #1
    e6bc:	2300      	moveq	r3, #0
    e6be:	b2db      	uxtb	r3, r3
}
    e6c0:	4618      	mov	r0, r3
    e6c2:	3710      	adds	r7, #16
    e6c4:	46bd      	mov	sp, r7
    e6c6:	bd80      	pop	{r7, pc}
    e6c8:	0000dff5 	.word	0x0000dff5

0000e6cc <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    e6cc:	b580      	push	{r7, lr}
    e6ce:	b082      	sub	sp, #8
    e6d0:	af00      	add	r7, sp, #0
    e6d2:	4603      	mov	r3, r0
    e6d4:	460a      	mov	r2, r1
    e6d6:	71fb      	strb	r3, [r7, #7]
    e6d8:	4613      	mov	r3, r2
    e6da:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    e6dc:	79bb      	ldrb	r3, [r7, #6]
    e6de:	2220      	movs	r2, #32
    e6e0:	409a      	lsls	r2, r3
    e6e2:	79fb      	ldrb	r3, [r7, #7]
    e6e4:	4611      	mov	r1, r2
    e6e6:	4618      	mov	r0, r3
    e6e8:	4b02      	ldr	r3, [pc, #8]	; (e6f4 <_usbd_ep_ack_stall+0x28>)
    e6ea:	4798      	blx	r3
}
    e6ec:	bf00      	nop
    e6ee:	3708      	adds	r7, #8
    e6f0:	46bd      	mov	sp, r7
    e6f2:	bd80      	pop	{r7, pc}
    e6f4:	0000e545 	.word	0x0000e545

0000e6f8 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    e6f8:	b580      	push	{r7, lr}
    e6fa:	b082      	sub	sp, #8
    e6fc:	af00      	add	r7, sp, #0
    e6fe:	4603      	mov	r3, r0
    e700:	71fb      	strb	r3, [r7, #7]
    e702:	460b      	mov	r3, r1
    e704:	71bb      	strb	r3, [r7, #6]
    e706:	4613      	mov	r3, r2
    e708:	717b      	strb	r3, [r7, #5]
	if (en) {
    e70a:	797b      	ldrb	r3, [r7, #5]
    e70c:	2b00      	cmp	r3, #0
    e70e:	d008      	beq.n	e722 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    e710:	79bb      	ldrb	r3, [r7, #6]
    e712:	2220      	movs	r2, #32
    e714:	409a      	lsls	r2, r3
    e716:	79fb      	ldrb	r3, [r7, #7]
    e718:	4611      	mov	r1, r2
    e71a:	4618      	mov	r0, r3
    e71c:	4b07      	ldr	r3, [pc, #28]	; (e73c <_usbd_ep_int_stall_en+0x44>)
    e71e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    e720:	e007      	b.n	e732 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    e722:	79bb      	ldrb	r3, [r7, #6]
    e724:	2220      	movs	r2, #32
    e726:	409a      	lsls	r2, r3
    e728:	79fb      	ldrb	r3, [r7, #7]
    e72a:	4611      	mov	r1, r2
    e72c:	4618      	mov	r0, r3
    e72e:	4b04      	ldr	r3, [pc, #16]	; (e740 <_usbd_ep_int_stall_en+0x48>)
    e730:	4798      	blx	r3
}
    e732:	bf00      	nop
    e734:	3708      	adds	r7, #8
    e736:	46bd      	mov	sp, r7
    e738:	bd80      	pop	{r7, pc}
    e73a:	bf00      	nop
    e73c:	0000e56d 	.word	0x0000e56d
    e740:	0000e595 	.word	0x0000e595

0000e744 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    e744:	b580      	push	{r7, lr}
    e746:	b082      	sub	sp, #8
    e748:	af00      	add	r7, sp, #0
    e74a:	4603      	mov	r3, r0
    e74c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    e74e:	79fb      	ldrb	r3, [r7, #7]
    e750:	4619      	mov	r1, r3
    e752:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e756:	4b03      	ldr	r3, [pc, #12]	; (e764 <_usbd_ep_stop_setup+0x20>)
    e758:	4798      	blx	r3
}
    e75a:	bf00      	nop
    e75c:	3708      	adds	r7, #8
    e75e:	46bd      	mov	sp, r7
    e760:	bd80      	pop	{r7, pc}
    e762:	bf00      	nop
    e764:	0000e0c9 	.word	0x0000e0c9

0000e768 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    e768:	b580      	push	{r7, lr}
    e76a:	b082      	sub	sp, #8
    e76c:	af00      	add	r7, sp, #0
    e76e:	4603      	mov	r3, r0
    e770:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    e772:	79fb      	ldrb	r3, [r7, #7]
    e774:	2210      	movs	r2, #16
    e776:	4619      	mov	r1, r3
    e778:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e77c:	4b05      	ldr	r3, [pc, #20]	; (e794 <_usbd_ep_is_setup+0x2c>)
    e77e:	4798      	blx	r3
    e780:	4603      	mov	r3, r0
    e782:	2b00      	cmp	r3, #0
    e784:	bf14      	ite	ne
    e786:	2301      	movne	r3, #1
    e788:	2300      	moveq	r3, #0
    e78a:	b2db      	uxtb	r3, r3
}
    e78c:	4618      	mov	r0, r3
    e78e:	3708      	adds	r7, #8
    e790:	46bd      	mov	sp, r7
    e792:	bd80      	pop	{r7, pc}
    e794:	0000dfbf 	.word	0x0000dfbf

0000e798 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    e798:	b580      	push	{r7, lr}
    e79a:	b082      	sub	sp, #8
    e79c:	af00      	add	r7, sp, #0
    e79e:	4603      	mov	r3, r0
    e7a0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    e7a2:	79fb      	ldrb	r3, [r7, #7]
    e7a4:	2110      	movs	r1, #16
    e7a6:	4618      	mov	r0, r3
    e7a8:	4b02      	ldr	r3, [pc, #8]	; (e7b4 <_usbd_ep_ack_setup+0x1c>)
    e7aa:	4798      	blx	r3
}
    e7ac:	bf00      	nop
    e7ae:	3708      	adds	r7, #8
    e7b0:	46bd      	mov	sp, r7
    e7b2:	bd80      	pop	{r7, pc}
    e7b4:	0000e545 	.word	0x0000e545

0000e7b8 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    e7b8:	b580      	push	{r7, lr}
    e7ba:	b082      	sub	sp, #8
    e7bc:	af00      	add	r7, sp, #0
    e7be:	4603      	mov	r3, r0
    e7c0:	71fb      	strb	r3, [r7, #7]
    e7c2:	460b      	mov	r3, r1
    e7c4:	71bb      	strb	r3, [r7, #6]
    e7c6:	4613      	mov	r3, r2
    e7c8:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    e7ca:	797b      	ldrb	r3, [r7, #5]
    e7cc:	2b00      	cmp	r3, #0
    e7ce:	d00b      	beq.n	e7e8 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    e7d0:	79bb      	ldrb	r3, [r7, #6]
    e7d2:	2201      	movs	r2, #1
    e7d4:	fa02 f303 	lsl.w	r3, r2, r3
    e7d8:	b2da      	uxtb	r2, r3
    e7da:	79fb      	ldrb	r3, [r7, #7]
    e7dc:	4619      	mov	r1, r3
    e7de:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e7e2:	4b09      	ldr	r3, [pc, #36]	; (e808 <_usbd_ep_set_toggle+0x50>)
    e7e4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    e7e6:	e00a      	b.n	e7fe <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    e7e8:	79bb      	ldrb	r3, [r7, #6]
    e7ea:	2201      	movs	r2, #1
    e7ec:	fa02 f303 	lsl.w	r3, r2, r3
    e7f0:	b2da      	uxtb	r2, r3
    e7f2:	79fb      	ldrb	r3, [r7, #7]
    e7f4:	4619      	mov	r1, r3
    e7f6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e7fa:	4b04      	ldr	r3, [pc, #16]	; (e80c <_usbd_ep_set_toggle+0x54>)
    e7fc:	4798      	blx	r3
}
    e7fe:	bf00      	nop
    e800:	3708      	adds	r7, #8
    e802:	46bd      	mov	sp, r7
    e804:	bd80      	pop	{r7, pc}
    e806:	bf00      	nop
    e808:	0000e049 	.word	0x0000e049
    e80c:	0000e09d 	.word	0x0000e09d

0000e810 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    e810:	b580      	push	{r7, lr}
    e812:	b082      	sub	sp, #8
    e814:	af00      	add	r7, sp, #0
    e816:	4603      	mov	r3, r0
    e818:	460a      	mov	r2, r1
    e81a:	71fb      	strb	r3, [r7, #7]
    e81c:	4613      	mov	r3, r2
    e81e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    e820:	79bb      	ldrb	r3, [r7, #6]
    e822:	2201      	movs	r2, #1
    e824:	409a      	lsls	r2, r3
    e826:	79fb      	ldrb	r3, [r7, #7]
    e828:	4611      	mov	r1, r2
    e82a:	4618      	mov	r0, r3
    e82c:	4b02      	ldr	r3, [pc, #8]	; (e838 <_usbd_ep_ack_io_cpt+0x28>)
    e82e:	4798      	blx	r3
}
    e830:	bf00      	nop
    e832:	3708      	adds	r7, #8
    e834:	46bd      	mov	sp, r7
    e836:	bd80      	pop	{r7, pc}
    e838:	0000e545 	.word	0x0000e545

0000e83c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    e83c:	b480      	push	{r7}
    e83e:	b085      	sub	sp, #20
    e840:	af00      	add	r7, sp, #0
    e842:	4603      	mov	r3, r0
    e844:	603a      	str	r2, [r7, #0]
    e846:	71fb      	strb	r3, [r7, #7]
    e848:	460b      	mov	r3, r1
    e84a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e84c:	79fa      	ldrb	r2, [r7, #7]
    e84e:	79bb      	ldrb	r3, [r7, #6]
    e850:	0052      	lsls	r2, r2, #1
    e852:	4413      	add	r3, r2
    e854:	011b      	lsls	r3, r3, #4
    e856:	4a06      	ldr	r2, [pc, #24]	; (e870 <_usbd_ep_set_buf+0x34>)
    e858:	4413      	add	r3, r2
    e85a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    e85c:	68fb      	ldr	r3, [r7, #12]
    e85e:	683a      	ldr	r2, [r7, #0]
    e860:	601a      	str	r2, [r3, #0]
}
    e862:	bf00      	nop
    e864:	3714      	adds	r7, #20
    e866:	46bd      	mov	sp, r7
    e868:	f85d 7b04 	ldr.w	r7, [sp], #4
    e86c:	4770      	bx	lr
    e86e:	bf00      	nop
    e870:	20008df0 	.word	0x20008df0

0000e874 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    e874:	b480      	push	{r7}
    e876:	b085      	sub	sp, #20
    e878:	af00      	add	r7, sp, #0
    e87a:	4603      	mov	r3, r0
    e87c:	71fb      	strb	r3, [r7, #7]
    e87e:	460b      	mov	r3, r1
    e880:	71bb      	strb	r3, [r7, #6]
    e882:	4613      	mov	r3, r2
    e884:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e886:	79fa      	ldrb	r2, [r7, #7]
    e888:	79bb      	ldrb	r3, [r7, #6]
    e88a:	0052      	lsls	r2, r2, #1
    e88c:	4413      	add	r3, r2
    e88e:	011b      	lsls	r3, r3, #4
    e890:	4a08      	ldr	r2, [pc, #32]	; (e8b4 <_usbd_ep_set_in_count+0x40>)
    e892:	4413      	add	r3, r2
    e894:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    e896:	88bb      	ldrh	r3, [r7, #4]
    e898:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e89c:	b299      	uxth	r1, r3
    e89e:	68fa      	ldr	r2, [r7, #12]
    e8a0:	6853      	ldr	r3, [r2, #4]
    e8a2:	f361 339b 	bfi	r3, r1, #14, #14
    e8a6:	6053      	str	r3, [r2, #4]
}
    e8a8:	bf00      	nop
    e8aa:	3714      	adds	r7, #20
    e8ac:	46bd      	mov	sp, r7
    e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    e8b2:	4770      	bx	lr
    e8b4:	20008df0 	.word	0x20008df0

0000e8b8 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    e8b8:	b480      	push	{r7}
    e8ba:	b085      	sub	sp, #20
    e8bc:	af00      	add	r7, sp, #0
    e8be:	4603      	mov	r3, r0
    e8c0:	71fb      	strb	r3, [r7, #7]
    e8c2:	460b      	mov	r3, r1
    e8c4:	71bb      	strb	r3, [r7, #6]
    e8c6:	4613      	mov	r3, r2
    e8c8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e8ca:	79fa      	ldrb	r2, [r7, #7]
    e8cc:	79bb      	ldrb	r3, [r7, #6]
    e8ce:	0052      	lsls	r2, r2, #1
    e8d0:	4413      	add	r3, r2
    e8d2:	011b      	lsls	r3, r3, #4
    e8d4:	4a08      	ldr	r2, [pc, #32]	; (e8f8 <_usbd_ep_set_in_size+0x40>)
    e8d6:	4413      	add	r3, r2
    e8d8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    e8da:	88bb      	ldrh	r3, [r7, #4]
    e8dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e8e0:	b299      	uxth	r1, r3
    e8e2:	68fa      	ldr	r2, [r7, #12]
    e8e4:	6853      	ldr	r3, [r2, #4]
    e8e6:	f361 030d 	bfi	r3, r1, #0, #14
    e8ea:	6053      	str	r3, [r2, #4]
}
    e8ec:	bf00      	nop
    e8ee:	3714      	adds	r7, #20
    e8f0:	46bd      	mov	sp, r7
    e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e8f6:	4770      	bx	lr
    e8f8:	20008df0 	.word	0x20008df0

0000e8fc <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    e8fc:	b480      	push	{r7}
    e8fe:	b085      	sub	sp, #20
    e900:	af00      	add	r7, sp, #0
    e902:	4603      	mov	r3, r0
    e904:	71fb      	strb	r3, [r7, #7]
    e906:	460b      	mov	r3, r1
    e908:	71bb      	strb	r3, [r7, #6]
    e90a:	4613      	mov	r3, r2
    e90c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e90e:	79fa      	ldrb	r2, [r7, #7]
    e910:	79bb      	ldrb	r3, [r7, #6]
    e912:	0052      	lsls	r2, r2, #1
    e914:	4413      	add	r3, r2
    e916:	011b      	lsls	r3, r3, #4
    e918:	4a08      	ldr	r2, [pc, #32]	; (e93c <_usbd_ep_set_out_count+0x40>)
    e91a:	4413      	add	r3, r2
    e91c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    e91e:	88bb      	ldrh	r3, [r7, #4]
    e920:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e924:	b299      	uxth	r1, r3
    e926:	68fa      	ldr	r2, [r7, #12]
    e928:	6853      	ldr	r3, [r2, #4]
    e92a:	f361 030d 	bfi	r3, r1, #0, #14
    e92e:	6053      	str	r3, [r2, #4]
}
    e930:	bf00      	nop
    e932:	3714      	adds	r7, #20
    e934:	46bd      	mov	sp, r7
    e936:	f85d 7b04 	ldr.w	r7, [sp], #4
    e93a:	4770      	bx	lr
    e93c:	20008df0 	.word	0x20008df0

0000e940 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    e940:	b480      	push	{r7}
    e942:	b085      	sub	sp, #20
    e944:	af00      	add	r7, sp, #0
    e946:	4603      	mov	r3, r0
    e948:	71fb      	strb	r3, [r7, #7]
    e94a:	460b      	mov	r3, r1
    e94c:	71bb      	strb	r3, [r7, #6]
    e94e:	4613      	mov	r3, r2
    e950:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e952:	79fa      	ldrb	r2, [r7, #7]
    e954:	79bb      	ldrb	r3, [r7, #6]
    e956:	0052      	lsls	r2, r2, #1
    e958:	4413      	add	r3, r2
    e95a:	011b      	lsls	r3, r3, #4
    e95c:	4a08      	ldr	r2, [pc, #32]	; (e980 <_usbd_ep_set_out_size+0x40>)
    e95e:	4413      	add	r3, r2
    e960:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    e962:	88bb      	ldrh	r3, [r7, #4]
    e964:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e968:	b299      	uxth	r1, r3
    e96a:	68fa      	ldr	r2, [r7, #12]
    e96c:	6853      	ldr	r3, [r2, #4]
    e96e:	f361 339b 	bfi	r3, r1, #14, #14
    e972:	6053      	str	r3, [r2, #4]
}
    e974:	bf00      	nop
    e976:	3714      	adds	r7, #20
    e978:	46bd      	mov	sp, r7
    e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e97e:	4770      	bx	lr
    e980:	20008df0 	.word	0x20008df0

0000e984 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    e984:	b580      	push	{r7, lr}
    e986:	b084      	sub	sp, #16
    e988:	af00      	add	r7, sp, #0
    e98a:	60ba      	str	r2, [r7, #8]
    e98c:	607b      	str	r3, [r7, #4]
    e98e:	4603      	mov	r3, r0
    e990:	73fb      	strb	r3, [r7, #15]
    e992:	460b      	mov	r3, r1
    e994:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    e996:	68bb      	ldr	r3, [r7, #8]
    e998:	b29a      	uxth	r2, r3
    e99a:	7bb9      	ldrb	r1, [r7, #14]
    e99c:	7bfb      	ldrb	r3, [r7, #15]
    e99e:	4618      	mov	r0, r3
    e9a0:	4b06      	ldr	r3, [pc, #24]	; (e9bc <_usbd_ep_set_in_trans+0x38>)
    e9a2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    e9a4:	687b      	ldr	r3, [r7, #4]
    e9a6:	b29a      	uxth	r2, r3
    e9a8:	7bb9      	ldrb	r1, [r7, #14]
    e9aa:	7bfb      	ldrb	r3, [r7, #15]
    e9ac:	4618      	mov	r0, r3
    e9ae:	4b04      	ldr	r3, [pc, #16]	; (e9c0 <_usbd_ep_set_in_trans+0x3c>)
    e9b0:	4798      	blx	r3
}
    e9b2:	bf00      	nop
    e9b4:	3710      	adds	r7, #16
    e9b6:	46bd      	mov	sp, r7
    e9b8:	bd80      	pop	{r7, pc}
    e9ba:	bf00      	nop
    e9bc:	0000e8b9 	.word	0x0000e8b9
    e9c0:	0000e875 	.word	0x0000e875

0000e9c4 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    e9c4:	b580      	push	{r7, lr}
    e9c6:	b084      	sub	sp, #16
    e9c8:	af00      	add	r7, sp, #0
    e9ca:	60ba      	str	r2, [r7, #8]
    e9cc:	607b      	str	r3, [r7, #4]
    e9ce:	4603      	mov	r3, r0
    e9d0:	73fb      	strb	r3, [r7, #15]
    e9d2:	460b      	mov	r3, r1
    e9d4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    e9d6:	68bb      	ldr	r3, [r7, #8]
    e9d8:	b29a      	uxth	r2, r3
    e9da:	7bb9      	ldrb	r1, [r7, #14]
    e9dc:	7bfb      	ldrb	r3, [r7, #15]
    e9de:	4618      	mov	r0, r3
    e9e0:	4b06      	ldr	r3, [pc, #24]	; (e9fc <_usbd_ep_set_out_trans+0x38>)
    e9e2:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    e9e4:	687b      	ldr	r3, [r7, #4]
    e9e6:	b29a      	uxth	r2, r3
    e9e8:	7bb9      	ldrb	r1, [r7, #14]
    e9ea:	7bfb      	ldrb	r3, [r7, #15]
    e9ec:	4618      	mov	r0, r3
    e9ee:	4b04      	ldr	r3, [pc, #16]	; (ea00 <_usbd_ep_set_out_trans+0x3c>)
    e9f0:	4798      	blx	r3
}
    e9f2:	bf00      	nop
    e9f4:	3710      	adds	r7, #16
    e9f6:	46bd      	mov	sp, r7
    e9f8:	bd80      	pop	{r7, pc}
    e9fa:	bf00      	nop
    e9fc:	0000e941 	.word	0x0000e941
    ea00:	0000e8fd 	.word	0x0000e8fd

0000ea04 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    ea04:	b480      	push	{r7}
    ea06:	b085      	sub	sp, #20
    ea08:	af00      	add	r7, sp, #0
    ea0a:	4603      	mov	r3, r0
    ea0c:	460a      	mov	r2, r1
    ea0e:	71fb      	strb	r3, [r7, #7]
    ea10:	4613      	mov	r3, r2
    ea12:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ea14:	79fa      	ldrb	r2, [r7, #7]
    ea16:	79bb      	ldrb	r3, [r7, #6]
    ea18:	0052      	lsls	r2, r2, #1
    ea1a:	4413      	add	r3, r2
    ea1c:	011b      	lsls	r3, r3, #4
    ea1e:	4a06      	ldr	r2, [pc, #24]	; (ea38 <_usbd_ep_clear_bank_status+0x34>)
    ea20:	4413      	add	r3, r2
    ea22:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    ea24:	68fb      	ldr	r3, [r7, #12]
    ea26:	2200      	movs	r2, #0
    ea28:	729a      	strb	r2, [r3, #10]
}
    ea2a:	bf00      	nop
    ea2c:	3714      	adds	r7, #20
    ea2e:	46bd      	mov	sp, r7
    ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
    ea34:	4770      	bx	lr
    ea36:	bf00      	nop
    ea38:	20008df0 	.word	0x20008df0

0000ea3c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    ea3c:	b580      	push	{r7, lr}
    ea3e:	b082      	sub	sp, #8
    ea40:	af00      	add	r7, sp, #0
    ea42:	4603      	mov	r3, r0
    ea44:	71fb      	strb	r3, [r7, #7]
    ea46:	460b      	mov	r3, r1
    ea48:	71bb      	strb	r3, [r7, #6]
    ea4a:	4613      	mov	r3, r2
    ea4c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    ea4e:	797b      	ldrb	r3, [r7, #5]
    ea50:	2b00      	cmp	r3, #0
    ea52:	d00b      	beq.n	ea6c <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ea54:	79bb      	ldrb	r3, [r7, #6]
    ea56:	2240      	movs	r2, #64	; 0x40
    ea58:	fa02 f303 	lsl.w	r3, r2, r3
    ea5c:	b2da      	uxtb	r2, r3
    ea5e:	79fb      	ldrb	r3, [r7, #7]
    ea60:	4619      	mov	r1, r3
    ea62:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ea66:	4b09      	ldr	r3, [pc, #36]	; (ea8c <_usbd_ep_set_in_rdy+0x50>)
    ea68:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    ea6a:	e00a      	b.n	ea82 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ea6c:	79bb      	ldrb	r3, [r7, #6]
    ea6e:	2240      	movs	r2, #64	; 0x40
    ea70:	fa02 f303 	lsl.w	r3, r2, r3
    ea74:	b2da      	uxtb	r2, r3
    ea76:	79fb      	ldrb	r3, [r7, #7]
    ea78:	4619      	mov	r1, r3
    ea7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ea7e:	4b04      	ldr	r3, [pc, #16]	; (ea90 <_usbd_ep_set_in_rdy+0x54>)
    ea80:	4798      	blx	r3
}
    ea82:	bf00      	nop
    ea84:	3708      	adds	r7, #8
    ea86:	46bd      	mov	sp, r7
    ea88:	bd80      	pop	{r7, pc}
    ea8a:	bf00      	nop
    ea8c:	0000e049 	.word	0x0000e049
    ea90:	0000e09d 	.word	0x0000e09d

0000ea94 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    ea94:	b580      	push	{r7, lr}
    ea96:	b082      	sub	sp, #8
    ea98:	af00      	add	r7, sp, #0
    ea9a:	4603      	mov	r3, r0
    ea9c:	71fb      	strb	r3, [r7, #7]
    ea9e:	460b      	mov	r3, r1
    eaa0:	71bb      	strb	r3, [r7, #6]
    eaa2:	4613      	mov	r3, r2
    eaa4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    eaa6:	797b      	ldrb	r3, [r7, #5]
    eaa8:	2b00      	cmp	r3, #0
    eaaa:	d00b      	beq.n	eac4 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    eaac:	79bb      	ldrb	r3, [r7, #6]
    eaae:	2240      	movs	r2, #64	; 0x40
    eab0:	fa02 f303 	lsl.w	r3, r2, r3
    eab4:	b2da      	uxtb	r2, r3
    eab6:	79fb      	ldrb	r3, [r7, #7]
    eab8:	4619      	mov	r1, r3
    eaba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eabe:	4b09      	ldr	r3, [pc, #36]	; (eae4 <_usbd_ep_set_out_rdy+0x50>)
    eac0:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    eac2:	e00a      	b.n	eada <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    eac4:	79bb      	ldrb	r3, [r7, #6]
    eac6:	2240      	movs	r2, #64	; 0x40
    eac8:	fa02 f303 	lsl.w	r3, r2, r3
    eacc:	b2da      	uxtb	r2, r3
    eace:	79fb      	ldrb	r3, [r7, #7]
    ead0:	4619      	mov	r1, r3
    ead2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ead6:	4b04      	ldr	r3, [pc, #16]	; (eae8 <_usbd_ep_set_out_rdy+0x54>)
    ead8:	4798      	blx	r3
}
    eada:	bf00      	nop
    eadc:	3708      	adds	r7, #8
    eade:	46bd      	mov	sp, r7
    eae0:	bd80      	pop	{r7, pc}
    eae2:	bf00      	nop
    eae4:	0000e09d 	.word	0x0000e09d
    eae8:	0000e049 	.word	0x0000e049

0000eaec <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    eaec:	b480      	push	{r7}
    eaee:	b083      	sub	sp, #12
    eaf0:	af00      	add	r7, sp, #0
    eaf2:	4603      	mov	r3, r0
    eaf4:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    eaf6:	88fb      	ldrh	r3, [r7, #6]
    eaf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    eafc:	d820      	bhi.n	eb40 <_usbd_ep_pcksize_size+0x54>
    eafe:	88fb      	ldrh	r3, [r7, #6]
    eb00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    eb04:	d81a      	bhi.n	eb3c <_usbd_ep_pcksize_size+0x50>
    eb06:	88fb      	ldrh	r3, [r7, #6]
    eb08:	2b80      	cmp	r3, #128	; 0x80
    eb0a:	d815      	bhi.n	eb38 <_usbd_ep_pcksize_size+0x4c>
    eb0c:	88fb      	ldrh	r3, [r7, #6]
    eb0e:	2b40      	cmp	r3, #64	; 0x40
    eb10:	d810      	bhi.n	eb34 <_usbd_ep_pcksize_size+0x48>
    eb12:	88fb      	ldrh	r3, [r7, #6]
    eb14:	2b20      	cmp	r3, #32
    eb16:	d80b      	bhi.n	eb30 <_usbd_ep_pcksize_size+0x44>
    eb18:	88fb      	ldrh	r3, [r7, #6]
    eb1a:	2b10      	cmp	r3, #16
    eb1c:	d806      	bhi.n	eb2c <_usbd_ep_pcksize_size+0x40>
    eb1e:	88fb      	ldrh	r3, [r7, #6]
    eb20:	2b08      	cmp	r3, #8
    eb22:	bf8c      	ite	hi
    eb24:	2301      	movhi	r3, #1
    eb26:	2300      	movls	r3, #0
    eb28:	b2db      	uxtb	r3, r3
    eb2a:	e00a      	b.n	eb42 <_usbd_ep_pcksize_size+0x56>
    eb2c:	2302      	movs	r3, #2
    eb2e:	e008      	b.n	eb42 <_usbd_ep_pcksize_size+0x56>
    eb30:	2303      	movs	r3, #3
    eb32:	e006      	b.n	eb42 <_usbd_ep_pcksize_size+0x56>
    eb34:	2304      	movs	r3, #4
    eb36:	e004      	b.n	eb42 <_usbd_ep_pcksize_size+0x56>
    eb38:	2305      	movs	r3, #5
    eb3a:	e002      	b.n	eb42 <_usbd_ep_pcksize_size+0x56>
    eb3c:	2306      	movs	r3, #6
    eb3e:	e000      	b.n	eb42 <_usbd_ep_pcksize_size+0x56>
    eb40:	2307      	movs	r3, #7
}
    eb42:	4618      	mov	r0, r3
    eb44:	370c      	adds	r7, #12
    eb46:	46bd      	mov	sp, r7
    eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
    eb4c:	4770      	bx	lr
	...

0000eb50 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    eb50:	b480      	push	{r7}
    eb52:	b085      	sub	sp, #20
    eb54:	af00      	add	r7, sp, #0
    eb56:	4603      	mov	r3, r0
    eb58:	460a      	mov	r2, r1
    eb5a:	71fb      	strb	r3, [r7, #7]
    eb5c:	4613      	mov	r3, r2
    eb5e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    eb60:	79fb      	ldrb	r3, [r7, #7]
    eb62:	2b00      	cmp	r3, #0
    eb64:	d008      	beq.n	eb78 <_usb_d_dev_ept+0x28>
    eb66:	79bb      	ldrb	r3, [r7, #6]
    eb68:	2b00      	cmp	r3, #0
    eb6a:	d003      	beq.n	eb74 <_usb_d_dev_ept+0x24>
    eb6c:	79fb      	ldrb	r3, [r7, #7]
    eb6e:	3304      	adds	r3, #4
    eb70:	b2db      	uxtb	r3, r3
    eb72:	e002      	b.n	eb7a <_usb_d_dev_ept+0x2a>
    eb74:	79fb      	ldrb	r3, [r7, #7]
    eb76:	e000      	b.n	eb7a <_usb_d_dev_ept+0x2a>
    eb78:	2300      	movs	r3, #0
    eb7a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    eb7c:	7bfa      	ldrb	r2, [r7, #15]
    eb7e:	4613      	mov	r3, r2
    eb80:	009b      	lsls	r3, r3, #2
    eb82:	4413      	add	r3, r2
    eb84:	009b      	lsls	r3, r3, #2
    eb86:	3310      	adds	r3, #16
    eb88:	4a04      	ldr	r2, [pc, #16]	; (eb9c <_usb_d_dev_ept+0x4c>)
    eb8a:	4413      	add	r3, r2
    eb8c:	3304      	adds	r3, #4
}
    eb8e:	4618      	mov	r0, r3
    eb90:	3714      	adds	r7, #20
    eb92:	46bd      	mov	sp, r7
    eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
    eb98:	4770      	bx	lr
    eb9a:	bf00      	nop
    eb9c:	20008d28 	.word	0x20008d28

0000eba0 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    eba0:	b580      	push	{r7, lr}
    eba2:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    eba4:	2104      	movs	r1, #4
    eba6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ebaa:	4b03      	ldr	r3, [pc, #12]	; (ebb8 <_usb_d_dev_sof+0x18>)
    ebac:	4798      	blx	r3
	dev_inst.callbacks.sof();
    ebae:	4b03      	ldr	r3, [pc, #12]	; (ebbc <_usb_d_dev_sof+0x1c>)
    ebb0:	681b      	ldr	r3, [r3, #0]
    ebb2:	4798      	blx	r3
}
    ebb4:	bf00      	nop
    ebb6:	bd80      	pop	{r7, pc}
    ebb8:	0000e217 	.word	0x0000e217
    ebbc:	20008d28 	.word	0x20008d28

0000ebc0 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    ebc0:	b580      	push	{r7, lr}
    ebc2:	b084      	sub	sp, #16
    ebc4:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    ebc6:	2300      	movs	r3, #0
    ebc8:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ebca:	f240 2101 	movw	r1, #513	; 0x201
    ebce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ebd2:	4b1a      	ldr	r3, [pc, #104]	; (ec3c <_usb_d_dev_lpmsusp+0x7c>)
    ebd4:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ebd6:	f240 2101 	movw	r1, #513	; 0x201
    ebda:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ebde:	4b18      	ldr	r3, [pc, #96]	; (ec40 <_usb_d_dev_lpmsusp+0x80>)
    ebe0:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ebe2:	2170      	movs	r1, #112	; 0x70
    ebe4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ebe8:	4b16      	ldr	r3, [pc, #88]	; (ec44 <_usb_d_dev_lpmsusp+0x84>)
    ebea:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    ebec:	2300      	movs	r3, #0
    ebee:	73fb      	strb	r3, [r7, #15]
    ebf0:	e018      	b.n	ec24 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    ebf2:	7bfb      	ldrb	r3, [r7, #15]
    ebf4:	015b      	lsls	r3, r3, #5
    ebf6:	4a14      	ldr	r2, [pc, #80]	; (ec48 <_usb_d_dev_lpmsusp+0x88>)
    ebf8:	4413      	add	r3, r2
    ebfa:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    ebfc:	687b      	ldr	r3, [r7, #4]
    ebfe:	891b      	ldrh	r3, [r3, #8]
    ec00:	f3c3 0303 	ubfx	r3, r3, #0, #4
    ec04:	b2db      	uxtb	r3, r3
    ec06:	2b03      	cmp	r3, #3
    ec08:	d109      	bne.n	ec1e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    ec0a:	687b      	ldr	r3, [r7, #4]
    ec0c:	891b      	ldrh	r3, [r3, #8]
    ec0e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    ec12:	b29b      	uxth	r3, r3
    ec14:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    ec16:	687b      	ldr	r3, [r7, #4]
    ec18:	2200      	movs	r2, #0
    ec1a:	811a      	strh	r2, [r3, #8]
			break;
    ec1c:	e005      	b.n	ec2a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    ec1e:	7bfb      	ldrb	r3, [r7, #15]
    ec20:	3301      	adds	r3, #1
    ec22:	73fb      	strb	r3, [r7, #15]
    ec24:	7bfb      	ldrb	r3, [r7, #15]
    ec26:	2b03      	cmp	r3, #3
    ec28:	d9e3      	bls.n	ebf2 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    ec2a:	4b08      	ldr	r3, [pc, #32]	; (ec4c <_usb_d_dev_lpmsusp+0x8c>)
    ec2c:	685b      	ldr	r3, [r3, #4]
    ec2e:	68b9      	ldr	r1, [r7, #8]
    ec30:	2003      	movs	r0, #3
    ec32:	4798      	blx	r3
}
    ec34:	bf00      	nop
    ec36:	3710      	adds	r7, #16
    ec38:	46bd      	mov	sp, r7
    ec3a:	bd80      	pop	{r7, pc}
    ec3c:	0000e217 	.word	0x0000e217
    ec40:	0000e26d 	.word	0x0000e26d
    ec44:	0000e235 	.word	0x0000e235
    ec48:	20008df0 	.word	0x20008df0
    ec4c:	20008d28 	.word	0x20008d28

0000ec50 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    ec50:	b580      	push	{r7, lr}
    ec52:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    ec54:	2180      	movs	r1, #128	; 0x80
    ec56:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ec5a:	4b04      	ldr	r3, [pc, #16]	; (ec6c <_usb_d_dev_ramerr+0x1c>)
    ec5c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    ec5e:	4b04      	ldr	r3, [pc, #16]	; (ec70 <_usb_d_dev_ramerr+0x20>)
    ec60:	685b      	ldr	r3, [r3, #4]
    ec62:	2100      	movs	r1, #0
    ec64:	2005      	movs	r0, #5
    ec66:	4798      	blx	r3
}
    ec68:	bf00      	nop
    ec6a:	bd80      	pop	{r7, pc}
    ec6c:	0000e217 	.word	0x0000e217
    ec70:	20008d28 	.word	0x20008d28

0000ec74 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    ec74:	b580      	push	{r7, lr}
    ec76:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ec78:	2170      	movs	r1, #112	; 0x70
    ec7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ec7e:	4b0b      	ldr	r3, [pc, #44]	; (ecac <_usb_d_dev_wakeup+0x38>)
    ec80:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ec82:	2170      	movs	r1, #112	; 0x70
    ec84:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ec88:	4b09      	ldr	r3, [pc, #36]	; (ecb0 <_usb_d_dev_wakeup+0x3c>)
    ec8a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ec8c:	f240 2101 	movw	r1, #513	; 0x201
    ec90:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ec94:	4b07      	ldr	r3, [pc, #28]	; (ecb4 <_usb_d_dev_wakeup+0x40>)
    ec96:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    ec98:	2000      	movs	r0, #0
    ec9a:	4b07      	ldr	r3, [pc, #28]	; (ecb8 <_usb_d_dev_wakeup+0x44>)
    ec9c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    ec9e:	4b07      	ldr	r3, [pc, #28]	; (ecbc <_usb_d_dev_wakeup+0x48>)
    eca0:	685b      	ldr	r3, [r3, #4]
    eca2:	2100      	movs	r1, #0
    eca4:	2002      	movs	r0, #2
    eca6:	4798      	blx	r3
}
    eca8:	bf00      	nop
    ecaa:	bd80      	pop	{r7, pc}
    ecac:	0000e217 	.word	0x0000e217
    ecb0:	0000e26d 	.word	0x0000e26d
    ecb4:	0000e235 	.word	0x0000e235
    ecb8:	0000e515 	.word	0x0000e515
    ecbc:	20008d28 	.word	0x20008d28

0000ecc0 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    ecc0:	b580      	push	{r7, lr}
    ecc2:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    ecc4:	2200      	movs	r2, #0
    ecc6:	2100      	movs	r1, #0
    ecc8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eccc:	4b0d      	ldr	r3, [pc, #52]	; (ed04 <_usb_d_dev_reset+0x44>)
    ecce:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    ecd0:	2108      	movs	r1, #8
    ecd2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ecd6:	4b0c      	ldr	r3, [pc, #48]	; (ed08 <_usb_d_dev_reset+0x48>)
    ecd8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ecda:	2170      	movs	r1, #112	; 0x70
    ecdc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ece0:	4b0a      	ldr	r3, [pc, #40]	; (ed0c <_usb_d_dev_reset+0x4c>)
    ece2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ece4:	f240 2101 	movw	r1, #513	; 0x201
    ece8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ecec:	4b08      	ldr	r3, [pc, #32]	; (ed10 <_usb_d_dev_reset+0x50>)
    ecee:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    ecf0:	4b08      	ldr	r3, [pc, #32]	; (ed14 <_usb_d_dev_reset+0x54>)
    ecf2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    ecf4:	4b08      	ldr	r3, [pc, #32]	; (ed18 <_usb_d_dev_reset+0x58>)
    ecf6:	685b      	ldr	r3, [r3, #4]
    ecf8:	2100      	movs	r1, #0
    ecfa:	2001      	movs	r0, #1
    ecfc:	4798      	blx	r3
}
    ecfe:	bf00      	nop
    ed00:	bd80      	pop	{r7, pc}
    ed02:	bf00      	nop
    ed04:	0000e1ad 	.word	0x0000e1ad
    ed08:	0000e217 	.word	0x0000e217
    ed0c:	0000e26d 	.word	0x0000e26d
    ed10:	0000e235 	.word	0x0000e235
    ed14:	0000f87d 	.word	0x0000f87d
    ed18:	20008d28 	.word	0x20008d28

0000ed1c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    ed1c:	b580      	push	{r7, lr}
    ed1e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ed20:	f240 2101 	movw	r1, #513	; 0x201
    ed24:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ed28:	4b09      	ldr	r3, [pc, #36]	; (ed50 <_usb_d_dev_suspend+0x34>)
    ed2a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ed2c:	f240 2101 	movw	r1, #513	; 0x201
    ed30:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ed34:	4b07      	ldr	r3, [pc, #28]	; (ed54 <_usb_d_dev_suspend+0x38>)
    ed36:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ed38:	2170      	movs	r1, #112	; 0x70
    ed3a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ed3e:	4b06      	ldr	r3, [pc, #24]	; (ed58 <_usb_d_dev_suspend+0x3c>)
    ed40:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    ed42:	4b06      	ldr	r3, [pc, #24]	; (ed5c <_usb_d_dev_suspend+0x40>)
    ed44:	685b      	ldr	r3, [r3, #4]
    ed46:	2100      	movs	r1, #0
    ed48:	2004      	movs	r0, #4
    ed4a:	4798      	blx	r3
}
    ed4c:	bf00      	nop
    ed4e:	bd80      	pop	{r7, pc}
    ed50:	0000e217 	.word	0x0000e217
    ed54:	0000e26d 	.word	0x0000e26d
    ed58:	0000e235 	.word	0x0000e235
    ed5c:	20008d28 	.word	0x20008d28

0000ed60 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    ed60:	b580      	push	{r7, lr}
    ed62:	b082      	sub	sp, #8
    ed64:	af00      	add	r7, sp, #0
	bool     rc    = true;
    ed66:	2301      	movs	r3, #1
    ed68:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    ed6a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ed6e:	4b22      	ldr	r3, [pc, #136]	; (edf8 <_usb_d_dev_handle_nep+0x98>)
    ed70:	4798      	blx	r3
    ed72:	4603      	mov	r3, r0
    ed74:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    ed76:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ed7a:	4b20      	ldr	r3, [pc, #128]	; (edfc <_usb_d_dev_handle_nep+0x9c>)
    ed7c:	4798      	blx	r3
    ed7e:	4603      	mov	r3, r0
    ed80:	461a      	mov	r2, r3
    ed82:	88bb      	ldrh	r3, [r7, #4]
    ed84:	4013      	ands	r3, r2
    ed86:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    ed88:	88bb      	ldrh	r3, [r7, #4]
    ed8a:	f003 0304 	and.w	r3, r3, #4
    ed8e:	2b00      	cmp	r3, #0
    ed90:	d003      	beq.n	ed9a <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    ed92:	4b1b      	ldr	r3, [pc, #108]	; (ee00 <_usb_d_dev_handle_nep+0xa0>)
    ed94:	4798      	blx	r3
		return true;
    ed96:	2301      	movs	r3, #1
    ed98:	e02a      	b.n	edf0 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    ed9a:	88bb      	ldrh	r3, [r7, #4]
    ed9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    eda0:	2b00      	cmp	r3, #0
    eda2:	d002      	beq.n	edaa <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    eda4:	4b17      	ldr	r3, [pc, #92]	; (ee04 <_usb_d_dev_handle_nep+0xa4>)
    eda6:	4798      	blx	r3
    eda8:	e021      	b.n	edee <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    edaa:	88bb      	ldrh	r3, [r7, #4]
    edac:	f003 0380 	and.w	r3, r3, #128	; 0x80
    edb0:	2b00      	cmp	r3, #0
    edb2:	d002      	beq.n	edba <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    edb4:	4b14      	ldr	r3, [pc, #80]	; (ee08 <_usb_d_dev_handle_nep+0xa8>)
    edb6:	4798      	blx	r3
    edb8:	e019      	b.n	edee <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    edba:	88bb      	ldrh	r3, [r7, #4]
    edbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    edc0:	2b00      	cmp	r3, #0
    edc2:	d002      	beq.n	edca <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    edc4:	4b11      	ldr	r3, [pc, #68]	; (ee0c <_usb_d_dev_handle_nep+0xac>)
    edc6:	4798      	blx	r3
    edc8:	e011      	b.n	edee <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    edca:	88bb      	ldrh	r3, [r7, #4]
    edcc:	f003 0308 	and.w	r3, r3, #8
    edd0:	2b00      	cmp	r3, #0
    edd2:	d002      	beq.n	edda <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    edd4:	4b0e      	ldr	r3, [pc, #56]	; (ee10 <_usb_d_dev_handle_nep+0xb0>)
    edd6:	4798      	blx	r3
    edd8:	e009      	b.n	edee <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    edda:	88bb      	ldrh	r3, [r7, #4]
    eddc:	f003 0301 	and.w	r3, r3, #1
    ede0:	2b00      	cmp	r3, #0
    ede2:	d002      	beq.n	edea <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    ede4:	4b0b      	ldr	r3, [pc, #44]	; (ee14 <_usb_d_dev_handle_nep+0xb4>)
    ede6:	4798      	blx	r3
    ede8:	e001      	b.n	edee <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    edea:	2300      	movs	r3, #0
    edec:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    edee:	79fb      	ldrb	r3, [r7, #7]
}
    edf0:	4618      	mov	r0, r3
    edf2:	3708      	adds	r7, #8
    edf4:	46bd      	mov	sp, r7
    edf6:	bd80      	pop	{r7, pc}
    edf8:	0000e1fd 	.word	0x0000e1fd
    edfc:	0000e253 	.word	0x0000e253
    ee00:	0000eba1 	.word	0x0000eba1
    ee04:	0000ebc1 	.word	0x0000ebc1
    ee08:	0000ec51 	.word	0x0000ec51
    ee0c:	0000ec75 	.word	0x0000ec75
    ee10:	0000ecc1 	.word	0x0000ecc1
    ee14:	0000ed1d 	.word	0x0000ed1d

0000ee18 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    ee18:	b590      	push	{r4, r7, lr}
    ee1a:	b089      	sub	sp, #36	; 0x24
    ee1c:	af00      	add	r7, sp, #0
    ee1e:	6078      	str	r0, [r7, #4]
    ee20:	460b      	mov	r3, r1
    ee22:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    ee24:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ee28:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    ee2a:	687b      	ldr	r3, [r7, #4]
    ee2c:	7c9b      	ldrb	r3, [r3, #18]
    ee2e:	f003 030f 	and.w	r3, r3, #15
    ee32:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    ee34:	7dfb      	ldrb	r3, [r7, #23]
    ee36:	015b      	lsls	r3, r3, #5
    ee38:	4a73      	ldr	r2, [pc, #460]	; (f008 <_usb_d_dev_in_next+0x1f0>)
    ee3a:	4413      	add	r3, r2
    ee3c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    ee3e:	78fb      	ldrb	r3, [r7, #3]
    ee40:	2b00      	cmp	r3, #0
    ee42:	d006      	beq.n	ee52 <_usb_d_dev_in_next+0x3a>
    ee44:	693b      	ldr	r3, [r7, #16]
    ee46:	3310      	adds	r3, #16
    ee48:	685b      	ldr	r3, [r3, #4]
    ee4a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ee4e:	b29b      	uxth	r3, r3
    ee50:	e000      	b.n	ee54 <_usb_d_dev_in_next+0x3c>
    ee52:	2300      	movs	r3, #0
    ee54:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    ee56:	687b      	ldr	r3, [r7, #4]
    ee58:	8a1b      	ldrh	r3, [r3, #16]
    ee5a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ee5e:	4293      	cmp	r3, r2
    ee60:	d103      	bne.n	ee6a <_usb_d_dev_in_next+0x52>
    ee62:	687b      	ldr	r3, [r7, #4]
    ee64:	8a1b      	ldrh	r3, [r3, #16]
    ee66:	b21b      	sxth	r3, r3
    ee68:	e004      	b.n	ee74 <_usb_d_dev_in_next+0x5c>
    ee6a:	687b      	ldr	r3, [r7, #4]
    ee6c:	8a1b      	ldrh	r3, [r3, #16]
    ee6e:	3b01      	subs	r3, #1
    ee70:	b29b      	uxth	r3, r3
    ee72:	b21b      	sxth	r3, r3
    ee74:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    ee78:	4013      	ands	r3, r2
    ee7a:	b21b      	sxth	r3, r3
    ee7c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    ee7e:	2300      	movs	r3, #0
    ee80:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    ee82:	687b      	ldr	r3, [r7, #4]
    ee84:	7cdb      	ldrb	r3, [r3, #19]
    ee86:	f003 0307 	and.w	r3, r3, #7
    ee8a:	b2db      	uxtb	r3, r3
    ee8c:	2b01      	cmp	r3, #1
    ee8e:	bf0c      	ite	eq
    ee90:	2301      	moveq	r3, #1
    ee92:	2300      	movne	r3, #0
    ee94:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    ee96:	78fb      	ldrb	r3, [r7, #3]
    ee98:	2b00      	cmp	r3, #0
    ee9a:	d004      	beq.n	eea6 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    ee9c:	7dfb      	ldrb	r3, [r7, #23]
    ee9e:	2101      	movs	r1, #1
    eea0:	4618      	mov	r0, r3
    eea2:	4b5a      	ldr	r3, [pc, #360]	; (f00c <_usb_d_dev_in_next+0x1f4>)
    eea4:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    eea6:	687b      	ldr	r3, [r7, #4]
    eea8:	689a      	ldr	r2, [r3, #8]
    eeaa:	89fb      	ldrh	r3, [r7, #14]
    eeac:	441a      	add	r2, r3
    eeae:	687b      	ldr	r3, [r7, #4]
    eeb0:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    eeb2:	687b      	ldr	r3, [r7, #4]
    eeb4:	689a      	ldr	r2, [r3, #8]
    eeb6:	687b      	ldr	r3, [r7, #4]
    eeb8:	685b      	ldr	r3, [r3, #4]
    eeba:	429a      	cmp	r2, r3
    eebc:	d243      	bcs.n	ef46 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    eebe:	687b      	ldr	r3, [r7, #4]
    eec0:	685b      	ldr	r3, [r3, #4]
    eec2:	b29a      	uxth	r2, r3
    eec4:	687b      	ldr	r3, [r7, #4]
    eec6:	689b      	ldr	r3, [r3, #8]
    eec8:	b29b      	uxth	r3, r3
    eeca:	1ad3      	subs	r3, r2, r3
    eecc:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    eece:	687b      	ldr	r3, [r7, #4]
    eed0:	7cdb      	ldrb	r3, [r3, #19]
    eed2:	f003 0320 	and.w	r3, r3, #32
    eed6:	b2db      	uxtb	r3, r3
    eed8:	2b00      	cmp	r3, #0
    eeda:	d01b      	beq.n	ef14 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    eedc:	687b      	ldr	r3, [r7, #4]
    eede:	8a1b      	ldrh	r3, [r3, #16]
    eee0:	8bfa      	ldrh	r2, [r7, #30]
    eee2:	429a      	cmp	r2, r3
    eee4:	d902      	bls.n	eeec <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    eee6:	687b      	ldr	r3, [r7, #4]
    eee8:	8a1b      	ldrh	r3, [r3, #16]
    eeea:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    eeec:	687b      	ldr	r3, [r7, #4]
    eeee:	68d8      	ldr	r0, [r3, #12]
    eef0:	687b      	ldr	r3, [r7, #4]
    eef2:	681a      	ldr	r2, [r3, #0]
    eef4:	687b      	ldr	r3, [r7, #4]
    eef6:	689b      	ldr	r3, [r3, #8]
    eef8:	4413      	add	r3, r2
    eefa:	8bfa      	ldrh	r2, [r7, #30]
    eefc:	4619      	mov	r1, r3
    eefe:	4b44      	ldr	r3, [pc, #272]	; (f010 <_usb_d_dev_in_next+0x1f8>)
    ef00:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    ef02:	687b      	ldr	r3, [r7, #4]
    ef04:	68db      	ldr	r3, [r3, #12]
    ef06:	461a      	mov	r2, r3
    ef08:	7dfb      	ldrb	r3, [r7, #23]
    ef0a:	2101      	movs	r1, #1
    ef0c:	4618      	mov	r0, r3
    ef0e:	4b41      	ldr	r3, [pc, #260]	; (f014 <_usb_d_dev_in_next+0x1fc>)
    ef10:	4798      	blx	r3
    ef12:	e011      	b.n	ef38 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    ef14:	8bfb      	ldrh	r3, [r7, #30]
    ef16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    ef1a:	d902      	bls.n	ef22 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    ef1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    ef20:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    ef22:	687b      	ldr	r3, [r7, #4]
    ef24:	681a      	ldr	r2, [r3, #0]
    ef26:	687b      	ldr	r3, [r7, #4]
    ef28:	689b      	ldr	r3, [r3, #8]
    ef2a:	4413      	add	r3, r2
    ef2c:	461a      	mov	r2, r3
    ef2e:	7dfb      	ldrb	r3, [r7, #23]
    ef30:	2101      	movs	r1, #1
    ef32:	4618      	mov	r0, r3
    ef34:	4b37      	ldr	r3, [pc, #220]	; (f014 <_usb_d_dev_in_next+0x1fc>)
    ef36:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    ef38:	8bfa      	ldrh	r2, [r7, #30]
    ef3a:	7df8      	ldrb	r0, [r7, #23]
    ef3c:	2300      	movs	r3, #0
    ef3e:	2101      	movs	r1, #1
    ef40:	4c35      	ldr	r4, [pc, #212]	; (f018 <_usb_d_dev_in_next+0x200>)
    ef42:	47a0      	blx	r4
		goto _in_tx_exec;
    ef44:	e041      	b.n	efca <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    ef46:	687b      	ldr	r3, [r7, #4]
    ef48:	7cdb      	ldrb	r3, [r3, #19]
    ef4a:	f003 0310 	and.w	r3, r3, #16
    ef4e:	b2db      	uxtb	r3, r3
    ef50:	2b00      	cmp	r3, #0
    ef52:	d00b      	beq.n	ef6c <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    ef54:	687a      	ldr	r2, [r7, #4]
    ef56:	7cd3      	ldrb	r3, [r2, #19]
    ef58:	f36f 1304 	bfc	r3, #4, #1
    ef5c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    ef5e:	7df8      	ldrb	r0, [r7, #23]
    ef60:	2300      	movs	r3, #0
    ef62:	2200      	movs	r2, #0
    ef64:	2101      	movs	r1, #1
    ef66:	4c2c      	ldr	r4, [pc, #176]	; (f018 <_usb_d_dev_in_next+0x200>)
    ef68:	47a0      	blx	r4
		goto _in_tx_exec;
    ef6a:	e02e      	b.n	efca <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    ef6c:	7afb      	ldrb	r3, [r7, #11]
    ef6e:	2b00      	cmp	r3, #0
    ef70:	d006      	beq.n	ef80 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    ef72:	7dfb      	ldrb	r3, [r7, #23]
    ef74:	224b      	movs	r2, #75	; 0x4b
    ef76:	4619      	mov	r1, r3
    ef78:	69b8      	ldr	r0, [r7, #24]
    ef7a:	4b28      	ldr	r3, [pc, #160]	; (f01c <_usb_d_dev_in_next+0x204>)
    ef7c:	4798      	blx	r3
    ef7e:	e005      	b.n	ef8c <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    ef80:	7dfb      	ldrb	r3, [r7, #23]
    ef82:	224a      	movs	r2, #74	; 0x4a
    ef84:	4619      	mov	r1, r3
    ef86:	69b8      	ldr	r0, [r7, #24]
    ef88:	4b24      	ldr	r3, [pc, #144]	; (f01c <_usb_d_dev_in_next+0x204>)
    ef8a:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    ef8c:	687b      	ldr	r3, [r7, #4]
    ef8e:	8a1b      	ldrh	r3, [r3, #16]
    ef90:	89ba      	ldrh	r2, [r7, #12]
    ef92:	429a      	cmp	r2, r3
    ef94:	d114      	bne.n	efc0 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    ef96:	687a      	ldr	r2, [r7, #4]
    ef98:	7cd3      	ldrb	r3, [r2, #19]
    ef9a:	f36f 1386 	bfc	r3, #6, #1
    ef9e:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    efa0:	4b1f      	ldr	r3, [pc, #124]	; (f020 <_usb_d_dev_in_next+0x208>)
    efa2:	68db      	ldr	r3, [r3, #12]
    efa4:	687a      	ldr	r2, [r7, #4]
    efa6:	7c90      	ldrb	r0, [r2, #18]
    efa8:	687a      	ldr	r2, [r7, #4]
    efaa:	6892      	ldr	r2, [r2, #8]
    efac:	4611      	mov	r1, r2
    efae:	4798      	blx	r3
    efb0:	4603      	mov	r3, r0
    efb2:	2b00      	cmp	r3, #0
    efb4:	d124      	bne.n	f000 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    efb6:	687a      	ldr	r2, [r7, #4]
    efb8:	7cd3      	ldrb	r3, [r2, #19]
    efba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    efbe:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    efc0:	2100      	movs	r1, #0
    efc2:	6878      	ldr	r0, [r7, #4]
    efc4:	4b17      	ldr	r3, [pc, #92]	; (f024 <_usb_d_dev_in_next+0x20c>)
    efc6:	4798      	blx	r3
	return;
    efc8:	e01b      	b.n	f002 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    efca:	78fb      	ldrb	r3, [r7, #3]
    efcc:	f083 0301 	eor.w	r3, r3, #1
    efd0:	b2db      	uxtb	r3, r3
    efd2:	2b00      	cmp	r3, #0
    efd4:	d00d      	beq.n	eff2 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    efd6:	7afb      	ldrb	r3, [r7, #11]
    efd8:	2b00      	cmp	r3, #0
    efda:	d002      	beq.n	efe2 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    efdc:	234e      	movs	r3, #78	; 0x4e
    efde:	777b      	strb	r3, [r7, #29]
    efe0:	e001      	b.n	efe6 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    efe2:	234a      	movs	r3, #74	; 0x4a
    efe4:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    efe6:	7f7a      	ldrb	r2, [r7, #29]
    efe8:	7dfb      	ldrb	r3, [r7, #23]
    efea:	4619      	mov	r1, r3
    efec:	69b8      	ldr	r0, [r7, #24]
    efee:	4b0e      	ldr	r3, [pc, #56]	; (f028 <_usb_d_dev_in_next+0x210>)
    eff0:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    eff2:	7dfb      	ldrb	r3, [r7, #23]
    eff4:	2201      	movs	r2, #1
    eff6:	2101      	movs	r1, #1
    eff8:	4618      	mov	r0, r3
    effa:	4b0c      	ldr	r3, [pc, #48]	; (f02c <_usb_d_dev_in_next+0x214>)
    effc:	4798      	blx	r3
    effe:	e000      	b.n	f002 <_usb_d_dev_in_next+0x1ea>
			return;
    f000:	bf00      	nop
}
    f002:	3724      	adds	r7, #36	; 0x24
    f004:	46bd      	mov	sp, r7
    f006:	bd90      	pop	{r4, r7, pc}
    f008:	20008df0 	.word	0x20008df0
    f00c:	0000e811 	.word	0x0000e811
    f010:	0001bc05 	.word	0x0001bc05
    f014:	0000e83d 	.word	0x0000e83d
    f018:	0000e985 	.word	0x0000e985
    f01c:	0000e11d 	.word	0x0000e11d
    f020:	20008d28 	.word	0x20008d28
    f024:	00010141 	.word	0x00010141
    f028:	0000e0f1 	.word	0x0000e0f1
    f02c:	0000ea3d 	.word	0x0000ea3d

0000f030 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    f030:	b590      	push	{r4, r7, lr}
    f032:	b08b      	sub	sp, #44	; 0x2c
    f034:	af00      	add	r7, sp, #0
    f036:	6078      	str	r0, [r7, #4]
    f038:	460b      	mov	r3, r1
    f03a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    f03c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f040:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    f042:	687b      	ldr	r3, [r7, #4]
    f044:	7c9b      	ldrb	r3, [r3, #18]
    f046:	f003 030f 	and.w	r3, r3, #15
    f04a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    f04c:	7ffb      	ldrb	r3, [r7, #31]
    f04e:	015b      	lsls	r3, r3, #5
    f050:	4a94      	ldr	r2, [pc, #592]	; (f2a4 <_usb_d_dev_out_next+0x274>)
    f052:	4413      	add	r3, r2
    f054:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    f056:	78fb      	ldrb	r3, [r7, #3]
    f058:	2b00      	cmp	r3, #0
    f05a:	d005      	beq.n	f068 <_usb_d_dev_out_next+0x38>
    f05c:	69bb      	ldr	r3, [r7, #24]
    f05e:	685b      	ldr	r3, [r3, #4]
    f060:	f3c3 338d 	ubfx	r3, r3, #14, #14
    f064:	b29b      	uxth	r3, r3
    f066:	e000      	b.n	f06a <_usb_d_dev_out_next+0x3a>
    f068:	2300      	movs	r3, #0
    f06a:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    f06c:	78fb      	ldrb	r3, [r7, #3]
    f06e:	2b00      	cmp	r3, #0
    f070:	d005      	beq.n	f07e <_usb_d_dev_out_next+0x4e>
    f072:	69bb      	ldr	r3, [r7, #24]
    f074:	685b      	ldr	r3, [r3, #4]
    f076:	f3c3 030d 	ubfx	r3, r3, #0, #14
    f07a:	b29b      	uxth	r3, r3
    f07c:	e000      	b.n	f080 <_usb_d_dev_out_next+0x50>
    f07e:	2300      	movs	r3, #0
    f080:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    f082:	687b      	ldr	r3, [r7, #4]
    f084:	8a1b      	ldrh	r3, [r3, #16]
    f086:	f240 32ff 	movw	r2, #1023	; 0x3ff
    f08a:	4293      	cmp	r3, r2
    f08c:	d004      	beq.n	f098 <_usb_d_dev_out_next+0x68>
    f08e:	687b      	ldr	r3, [r7, #4]
    f090:	8a1b      	ldrh	r3, [r3, #16]
    f092:	3b01      	subs	r3, #1
    f094:	b29b      	uxth	r3, r3
    f096:	e001      	b.n	f09c <_usb_d_dev_out_next+0x6c>
    f098:	f240 33ff 	movw	r3, #1023	; 0x3ff
    f09c:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    f09e:	8aba      	ldrh	r2, [r7, #20]
    f0a0:	8a7b      	ldrh	r3, [r7, #18]
    f0a2:	4013      	ands	r3, r2
    f0a4:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    f0a6:	687b      	ldr	r3, [r7, #4]
    f0a8:	7cdb      	ldrb	r3, [r3, #19]
    f0aa:	f003 0307 	and.w	r3, r3, #7
    f0ae:	b2db      	uxtb	r3, r3
    f0b0:	2b01      	cmp	r3, #1
    f0b2:	bf0c      	ite	eq
    f0b4:	2301      	moveq	r3, #1
    f0b6:	2300      	movne	r3, #0
    f0b8:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    f0ba:	78fb      	ldrb	r3, [r7, #3]
    f0bc:	2b00      	cmp	r3, #0
    f0be:	d004      	beq.n	f0ca <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    f0c0:	7ffb      	ldrb	r3, [r7, #31]
    f0c2:	2100      	movs	r1, #0
    f0c4:	4618      	mov	r0, r3
    f0c6:	4b78      	ldr	r3, [pc, #480]	; (f2a8 <_usb_d_dev_out_next+0x278>)
    f0c8:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    f0ca:	687b      	ldr	r3, [r7, #4]
    f0cc:	7cdb      	ldrb	r3, [r3, #19]
    f0ce:	f003 0320 	and.w	r3, r3, #32
    f0d2:	b2db      	uxtb	r3, r3
    f0d4:	2b00      	cmp	r3, #0
    f0d6:	d01c      	beq.n	f112 <_usb_d_dev_out_next+0xe2>
    f0d8:	687b      	ldr	r3, [r7, #4]
    f0da:	685b      	ldr	r3, [r3, #4]
    f0dc:	2b00      	cmp	r3, #0
    f0de:	d018      	beq.n	f112 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    f0e0:	687b      	ldr	r3, [r7, #4]
    f0e2:	685b      	ldr	r3, [r3, #4]
    f0e4:	b29a      	uxth	r2, r3
    f0e6:	687b      	ldr	r3, [r7, #4]
    f0e8:	689b      	ldr	r3, [r3, #8]
    f0ea:	b29b      	uxth	r3, r3
    f0ec:	1ad3      	subs	r3, r2, r3
    f0ee:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    f0f0:	687b      	ldr	r3, [r7, #4]
    f0f2:	681a      	ldr	r2, [r3, #0]
    f0f4:	687b      	ldr	r3, [r7, #4]
    f0f6:	689b      	ldr	r3, [r3, #8]
    f0f8:	18d0      	adds	r0, r2, r3
    f0fa:	687b      	ldr	r3, [r7, #4]
    f0fc:	68d9      	ldr	r1, [r3, #12]
    f0fe:	89ba      	ldrh	r2, [r7, #12]
    f100:	8a3b      	ldrh	r3, [r7, #16]
    f102:	429a      	cmp	r2, r3
    f104:	d901      	bls.n	f10a <_usb_d_dev_out_next+0xda>
    f106:	8a3b      	ldrh	r3, [r7, #16]
    f108:	e000      	b.n	f10c <_usb_d_dev_out_next+0xdc>
    f10a:	89bb      	ldrh	r3, [r7, #12]
    f10c:	461a      	mov	r2, r3
    f10e:	4b67      	ldr	r3, [pc, #412]	; (f2ac <_usb_d_dev_out_next+0x27c>)
    f110:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    f112:	687b      	ldr	r3, [r7, #4]
    f114:	685b      	ldr	r3, [r3, #4]
    f116:	2b00      	cmp	r3, #0
    f118:	d121      	bne.n	f15e <_usb_d_dev_out_next+0x12e>
    f11a:	687b      	ldr	r3, [r7, #4]
    f11c:	7cdb      	ldrb	r3, [r3, #19]
    f11e:	f003 0310 	and.w	r3, r3, #16
    f122:	b2db      	uxtb	r3, r3
    f124:	2b00      	cmp	r3, #0
    f126:	d01a      	beq.n	f15e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    f128:	687a      	ldr	r2, [r7, #4]
    f12a:	7cd3      	ldrb	r3, [r2, #19]
    f12c:	f36f 1304 	bfc	r3, #4, #1
    f130:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    f132:	687a      	ldr	r2, [r7, #4]
    f134:	7cd3      	ldrb	r3, [r2, #19]
    f136:	f043 0320 	orr.w	r3, r3, #32
    f13a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    f13c:	687b      	ldr	r3, [r7, #4]
    f13e:	68db      	ldr	r3, [r3, #12]
    f140:	461a      	mov	r2, r3
    f142:	7ffb      	ldrb	r3, [r7, #31]
    f144:	2100      	movs	r1, #0
    f146:	4618      	mov	r0, r3
    f148:	4b59      	ldr	r3, [pc, #356]	; (f2b0 <_usb_d_dev_out_next+0x280>)
    f14a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    f14c:	687b      	ldr	r3, [r7, #4]
    f14e:	8a1b      	ldrh	r3, [r3, #16]
    f150:	461a      	mov	r2, r3
    f152:	7ff8      	ldrb	r0, [r7, #31]
    f154:	2300      	movs	r3, #0
    f156:	2100      	movs	r1, #0
    f158:	4c56      	ldr	r4, [pc, #344]	; (f2b4 <_usb_d_dev_out_next+0x284>)
    f15a:	47a0      	blx	r4
		goto _out_rx_exec;
    f15c:	e090      	b.n	f280 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    f15e:	78fb      	ldrb	r3, [r7, #3]
    f160:	2b00      	cmp	r3, #0
    f162:	d010      	beq.n	f186 <_usb_d_dev_out_next+0x156>
    f164:	687b      	ldr	r3, [r7, #4]
    f166:	8a1b      	ldrh	r3, [r3, #16]
    f168:	8a3a      	ldrh	r2, [r7, #16]
    f16a:	429a      	cmp	r2, r3
    f16c:	d20b      	bcs.n	f186 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    f16e:	687a      	ldr	r2, [r7, #4]
    f170:	7cd3      	ldrb	r3, [r2, #19]
    f172:	f36f 1304 	bfc	r3, #4, #1
    f176:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    f178:	687b      	ldr	r3, [r7, #4]
    f17a:	689a      	ldr	r2, [r3, #8]
    f17c:	8abb      	ldrh	r3, [r7, #20]
    f17e:	441a      	add	r2, r3
    f180:	687b      	ldr	r3, [r7, #4]
    f182:	609a      	str	r2, [r3, #8]
    f184:	e05c      	b.n	f240 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    f186:	687b      	ldr	r3, [r7, #4]
    f188:	689a      	ldr	r2, [r3, #8]
    f18a:	8afb      	ldrh	r3, [r7, #22]
    f18c:	441a      	add	r2, r3
    f18e:	687b      	ldr	r3, [r7, #4]
    f190:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    f192:	687b      	ldr	r3, [r7, #4]
    f194:	689a      	ldr	r2, [r3, #8]
    f196:	687b      	ldr	r3, [r7, #4]
    f198:	685b      	ldr	r3, [r3, #4]
    f19a:	429a      	cmp	r2, r3
    f19c:	d250      	bcs.n	f240 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    f19e:	687b      	ldr	r3, [r7, #4]
    f1a0:	685b      	ldr	r3, [r3, #4]
    f1a2:	b29a      	uxth	r2, r3
    f1a4:	687b      	ldr	r3, [r7, #4]
    f1a6:	689b      	ldr	r3, [r3, #8]
    f1a8:	b29b      	uxth	r3, r3
    f1aa:	1ad3      	subs	r3, r2, r3
    f1ac:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    f1ae:	687b      	ldr	r3, [r7, #4]
    f1b0:	7cdb      	ldrb	r3, [r3, #19]
    f1b2:	f003 0320 	and.w	r3, r3, #32
    f1b6:	b2db      	uxtb	r3, r3
    f1b8:	2b00      	cmp	r3, #0
    f1ba:	d010      	beq.n	f1de <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    f1bc:	687b      	ldr	r3, [r7, #4]
    f1be:	8a1b      	ldrh	r3, [r3, #16]
    f1c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    f1c2:	429a      	cmp	r2, r3
    f1c4:	d902      	bls.n	f1cc <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    f1c6:	687b      	ldr	r3, [r7, #4]
    f1c8:	8a1b      	ldrh	r3, [r3, #16]
    f1ca:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    f1cc:	687b      	ldr	r3, [r7, #4]
    f1ce:	68db      	ldr	r3, [r3, #12]
    f1d0:	461a      	mov	r2, r3
    f1d2:	7ffb      	ldrb	r3, [r7, #31]
    f1d4:	2100      	movs	r1, #0
    f1d6:	4618      	mov	r0, r3
    f1d8:	4b35      	ldr	r3, [pc, #212]	; (f2b0 <_usb_d_dev_out_next+0x280>)
    f1da:	4798      	blx	r3
    f1dc:	e029      	b.n	f232 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    f1de:	687b      	ldr	r3, [r7, #4]
    f1e0:	8a1b      	ldrh	r3, [r3, #16]
    f1e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    f1e4:	429a      	cmp	r2, r3
    f1e6:	d90f      	bls.n	f208 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    f1e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    f1ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    f1ee:	d903      	bls.n	f1f8 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    f1f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    f1f4:	84fb      	strh	r3, [r7, #38]	; 0x26
    f1f6:	e011      	b.n	f21c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    f1f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    f1fa:	8a7b      	ldrh	r3, [r7, #18]
    f1fc:	4013      	ands	r3, r2
    f1fe:	b29b      	uxth	r3, r3
    f200:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    f202:	1ad3      	subs	r3, r2, r3
    f204:	84fb      	strh	r3, [r7, #38]	; 0x26
    f206:	e009      	b.n	f21c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    f208:	687b      	ldr	r3, [r7, #4]
    f20a:	8a1b      	ldrh	r3, [r3, #16]
    f20c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    f20e:	429a      	cmp	r2, r3
    f210:	d204      	bcs.n	f21c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    f212:	687a      	ldr	r2, [r7, #4]
    f214:	7cd3      	ldrb	r3, [r2, #19]
    f216:	f043 0320 	orr.w	r3, r3, #32
    f21a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    f21c:	687b      	ldr	r3, [r7, #4]
    f21e:	681a      	ldr	r2, [r3, #0]
    f220:	687b      	ldr	r3, [r7, #4]
    f222:	689b      	ldr	r3, [r3, #8]
    f224:	4413      	add	r3, r2
    f226:	461a      	mov	r2, r3
    f228:	7ffb      	ldrb	r3, [r7, #31]
    f22a:	2100      	movs	r1, #0
    f22c:	4618      	mov	r0, r3
    f22e:	4b20      	ldr	r3, [pc, #128]	; (f2b0 <_usb_d_dev_out_next+0x280>)
    f230:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    f232:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    f234:	7ff8      	ldrb	r0, [r7, #31]
    f236:	2300      	movs	r3, #0
    f238:	2100      	movs	r1, #0
    f23a:	4c1e      	ldr	r4, [pc, #120]	; (f2b4 <_usb_d_dev_out_next+0x284>)
    f23c:	47a0      	blx	r4
			goto _out_rx_exec;
    f23e:	e01f      	b.n	f280 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    f240:	7bfb      	ldrb	r3, [r7, #15]
    f242:	2b00      	cmp	r3, #0
    f244:	d006      	beq.n	f254 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    f246:	7ffb      	ldrb	r3, [r7, #31]
    f248:	222d      	movs	r2, #45	; 0x2d
    f24a:	4619      	mov	r1, r3
    f24c:	6a38      	ldr	r0, [r7, #32]
    f24e:	4b1a      	ldr	r3, [pc, #104]	; (f2b8 <_usb_d_dev_out_next+0x288>)
    f250:	4798      	blx	r3
    f252:	e005      	b.n	f260 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    f254:	7ffb      	ldrb	r3, [r7, #31]
    f256:	2225      	movs	r2, #37	; 0x25
    f258:	4619      	mov	r1, r3
    f25a:	6a38      	ldr	r0, [r7, #32]
    f25c:	4b16      	ldr	r3, [pc, #88]	; (f2b8 <_usb_d_dev_out_next+0x288>)
    f25e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    f260:	7ffb      	ldrb	r3, [r7, #31]
    f262:	2b00      	cmp	r3, #0
    f264:	d107      	bne.n	f276 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    f266:	687b      	ldr	r3, [r7, #4]
    f268:	68db      	ldr	r3, [r3, #12]
    f26a:	461a      	mov	r2, r3
    f26c:	7ffb      	ldrb	r3, [r7, #31]
    f26e:	2100      	movs	r1, #0
    f270:	4618      	mov	r0, r3
    f272:	4b0f      	ldr	r3, [pc, #60]	; (f2b0 <_usb_d_dev_out_next+0x280>)
    f274:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    f276:	2100      	movs	r1, #0
    f278:	6878      	ldr	r0, [r7, #4]
    f27a:	4b10      	ldr	r3, [pc, #64]	; (f2bc <_usb_d_dev_out_next+0x28c>)
    f27c:	4798      	blx	r3
	return;
    f27e:	e031      	b.n	f2e4 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    f280:	78fb      	ldrb	r3, [r7, #3]
    f282:	f083 0301 	eor.w	r3, r3, #1
    f286:	b2db      	uxtb	r3, r3
    f288:	2b00      	cmp	r3, #0
    f28a:	d025      	beq.n	f2d8 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    f28c:	7bfb      	ldrb	r3, [r7, #15]
    f28e:	2b00      	cmp	r3, #0
    f290:	d018      	beq.n	f2c4 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    f292:	7ffb      	ldrb	r3, [r7, #31]
    f294:	2101      	movs	r1, #1
    f296:	4618      	mov	r0, r3
    f298:	4b09      	ldr	r3, [pc, #36]	; (f2c0 <_usb_d_dev_out_next+0x290>)
    f29a:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    f29c:	232d      	movs	r3, #45	; 0x2d
    f29e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    f2a2:	e012      	b.n	f2ca <_usb_d_dev_out_next+0x29a>
    f2a4:	20008df0 	.word	0x20008df0
    f2a8:	0000e811 	.word	0x0000e811
    f2ac:	0001bc05 	.word	0x0001bc05
    f2b0:	0000e83d 	.word	0x0000e83d
    f2b4:	0000e9c5 	.word	0x0000e9c5
    f2b8:	0000e11d 	.word	0x0000e11d
    f2bc:	00010141 	.word	0x00010141
    f2c0:	0000ea05 	.word	0x0000ea05
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    f2c4:	2325      	movs	r3, #37	; 0x25
    f2c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    f2ca:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    f2ce:	7ffb      	ldrb	r3, [r7, #31]
    f2d0:	4619      	mov	r1, r3
    f2d2:	6a38      	ldr	r0, [r7, #32]
    f2d4:	4b05      	ldr	r3, [pc, #20]	; (f2ec <_usb_d_dev_out_next+0x2bc>)
    f2d6:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    f2d8:	7ffb      	ldrb	r3, [r7, #31]
    f2da:	2201      	movs	r2, #1
    f2dc:	2100      	movs	r1, #0
    f2de:	4618      	mov	r0, r3
    f2e0:	4b03      	ldr	r3, [pc, #12]	; (f2f0 <_usb_d_dev_out_next+0x2c0>)
    f2e2:	4798      	blx	r3
}
    f2e4:	372c      	adds	r7, #44	; 0x2c
    f2e6:	46bd      	mov	sp, r7
    f2e8:	bd90      	pop	{r4, r7, pc}
    f2ea:	bf00      	nop
    f2ec:	0000e0f1 	.word	0x0000e0f1
    f2f0:	0000ea95 	.word	0x0000ea95

0000f2f4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    f2f4:	b580      	push	{r7, lr}
    f2f6:	b084      	sub	sp, #16
    f2f8:	af00      	add	r7, sp, #0
    f2fa:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    f2fc:	687b      	ldr	r3, [r7, #4]
    f2fe:	7c9b      	ldrb	r3, [r3, #18]
    f300:	f003 030f 	and.w	r3, r3, #15
    f304:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    f306:	687b      	ldr	r3, [r7, #4]
    f308:	7cdb      	ldrb	r3, [r3, #19]
    f30a:	f003 0307 	and.w	r3, r3, #7
    f30e:	b2db      	uxtb	r3, r3
    f310:	2b01      	cmp	r3, #1
    f312:	bf0c      	ite	eq
    f314:	2301      	moveq	r3, #1
    f316:	2300      	movne	r3, #0
    f318:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    f31a:	7bbb      	ldrb	r3, [r7, #14]
    f31c:	f083 0301 	eor.w	r3, r3, #1
    f320:	b2db      	uxtb	r3, r3
    f322:	2b00      	cmp	r3, #0
    f324:	d008      	beq.n	f338 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    f326:	7bfb      	ldrb	r3, [r7, #15]
    f328:	4618      	mov	r0, r3
    f32a:	4b20      	ldr	r3, [pc, #128]	; (f3ac <_usb_d_dev_handle_setup+0xb8>)
    f32c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    f32e:	7bfb      	ldrb	r3, [r7, #15]
    f330:	4618      	mov	r0, r3
    f332:	4b1f      	ldr	r3, [pc, #124]	; (f3b0 <_usb_d_dev_handle_setup+0xbc>)
    f334:	4798      	blx	r3
		return;
    f336:	e036      	b.n	f3a6 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    f338:	687b      	ldr	r3, [r7, #4]
    f33a:	7cdb      	ldrb	r3, [r3, #19]
    f33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f340:	b2db      	uxtb	r3, r3
    f342:	2b00      	cmp	r3, #0
    f344:	d010      	beq.n	f368 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    f346:	687a      	ldr	r2, [r7, #4]
    f348:	7cd3      	ldrb	r3, [r2, #19]
    f34a:	f36f 1386 	bfc	r3, #6, #1
    f34e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    f350:	7bfb      	ldrb	r3, [r7, #15]
    f352:	2200      	movs	r2, #0
    f354:	2101      	movs	r1, #1
    f356:	4618      	mov	r0, r3
    f358:	4b16      	ldr	r3, [pc, #88]	; (f3b4 <_usb_d_dev_handle_setup+0xc0>)
    f35a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    f35c:	7bfb      	ldrb	r3, [r7, #15]
    f35e:	2200      	movs	r2, #0
    f360:	2100      	movs	r1, #0
    f362:	4618      	mov	r0, r3
    f364:	4b14      	ldr	r3, [pc, #80]	; (f3b8 <_usb_d_dev_handle_setup+0xc4>)
    f366:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    f368:	687a      	ldr	r2, [r7, #4]
    f36a:	7cd3      	ldrb	r3, [r2, #19]
    f36c:	f36f 03c3 	bfc	r3, #3, #1
    f370:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    f372:	7bfb      	ldrb	r3, [r7, #15]
    f374:	2100      	movs	r1, #0
    f376:	4618      	mov	r0, r3
    f378:	4b10      	ldr	r3, [pc, #64]	; (f3bc <_usb_d_dev_handle_setup+0xc8>)
    f37a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    f37c:	7bfb      	ldrb	r3, [r7, #15]
    f37e:	2101      	movs	r1, #1
    f380:	4618      	mov	r0, r3
    f382:	4b0e      	ldr	r3, [pc, #56]	; (f3bc <_usb_d_dev_handle_setup+0xc8>)
    f384:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    f386:	7bfb      	ldrb	r3, [r7, #15]
    f388:	216f      	movs	r1, #111	; 0x6f
    f38a:	4618      	mov	r0, r3
    f38c:	4b0c      	ldr	r3, [pc, #48]	; (f3c0 <_usb_d_dev_handle_setup+0xcc>)
    f38e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    f390:	7bfb      	ldrb	r3, [r7, #15]
    f392:	216f      	movs	r1, #111	; 0x6f
    f394:	4618      	mov	r0, r3
    f396:	4b0b      	ldr	r3, [pc, #44]	; (f3c4 <_usb_d_dev_handle_setup+0xd0>)
    f398:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    f39a:	4b0b      	ldr	r3, [pc, #44]	; (f3c8 <_usb_d_dev_handle_setup+0xd4>)
    f39c:	689b      	ldr	r3, [r3, #8]
    f39e:	687a      	ldr	r2, [r7, #4]
    f3a0:	7c92      	ldrb	r2, [r2, #18]
    f3a2:	4610      	mov	r0, r2
    f3a4:	4798      	blx	r3
}
    f3a6:	3710      	adds	r7, #16
    f3a8:	46bd      	mov	sp, r7
    f3aa:	bd80      	pop	{r7, pc}
    f3ac:	0000e799 	.word	0x0000e799
    f3b0:	0000e745 	.word	0x0000e745
    f3b4:	0000ea3d 	.word	0x0000ea3d
    f3b8:	0000ea95 	.word	0x0000ea95
    f3bc:	0000ea05 	.word	0x0000ea05
    f3c0:	0000e545 	.word	0x0000e545
    f3c4:	0000e595 	.word	0x0000e595
    f3c8:	20008d28 	.word	0x20008d28

0000f3cc <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    f3cc:	b580      	push	{r7, lr}
    f3ce:	b084      	sub	sp, #16
    f3d0:	af00      	add	r7, sp, #0
    f3d2:	6078      	str	r0, [r7, #4]
    f3d4:	460b      	mov	r3, r1
    f3d6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f3d8:	687b      	ldr	r3, [r7, #4]
    f3da:	7c9b      	ldrb	r3, [r3, #18]
    f3dc:	f003 030f 	and.w	r3, r3, #15
    f3e0:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    f3e2:	78f9      	ldrb	r1, [r7, #3]
    f3e4:	7bfb      	ldrb	r3, [r7, #15]
    f3e6:	2200      	movs	r2, #0
    f3e8:	4618      	mov	r0, r3
    f3ea:	4b07      	ldr	r3, [pc, #28]	; (f408 <_usb_d_dev_handle_stall+0x3c>)
    f3ec:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    f3ee:	4b07      	ldr	r3, [pc, #28]	; (f40c <_usb_d_dev_handle_stall+0x40>)
    f3f0:	691b      	ldr	r3, [r3, #16]
    f3f2:	687a      	ldr	r2, [r7, #4]
    f3f4:	7c90      	ldrb	r0, [r2, #18]
    f3f6:	687a      	ldr	r2, [r7, #4]
    f3f8:	6892      	ldr	r2, [r2, #8]
    f3fa:	2101      	movs	r1, #1
    f3fc:	4798      	blx	r3
}
    f3fe:	bf00      	nop
    f400:	3710      	adds	r7, #16
    f402:	46bd      	mov	sp, r7
    f404:	bd80      	pop	{r7, pc}
    f406:	bf00      	nop
    f408:	0000e6f9 	.word	0x0000e6f9
    f40c:	20008d28 	.word	0x20008d28

0000f410 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    f410:	b580      	push	{r7, lr}
    f412:	b088      	sub	sp, #32
    f414:	af00      	add	r7, sp, #0
    f416:	6078      	str	r0, [r7, #4]
    f418:	460b      	mov	r3, r1
    f41a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    f41c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f420:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    f422:	687b      	ldr	r3, [r7, #4]
    f424:	7c9b      	ldrb	r3, [r3, #18]
    f426:	f003 030f 	and.w	r3, r3, #15
    f42a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    f42c:	4b61      	ldr	r3, [pc, #388]	; (f5b4 <_usb_d_dev_handle_trfail+0x1a4>)
    f42e:	881b      	ldrh	r3, [r3, #0]
    f430:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    f432:	7efb      	ldrb	r3, [r7, #27]
    f434:	015b      	lsls	r3, r3, #5
    f436:	4a60      	ldr	r2, [pc, #384]	; (f5b8 <_usb_d_dev_handle_trfail+0x1a8>)
    f438:	4413      	add	r3, r2
    f43a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    f43c:	78fb      	ldrb	r3, [r7, #3]
    f43e:	2b00      	cmp	r3, #0
    f440:	d006      	beq.n	f450 <_usb_d_dev_handle_trfail+0x40>
    f442:	7efb      	ldrb	r3, [r7, #27]
    f444:	4619      	mov	r1, r3
    f446:	69f8      	ldr	r0, [r7, #28]
    f448:	4b5c      	ldr	r3, [pc, #368]	; (f5bc <_usb_d_dev_handle_trfail+0x1ac>)
    f44a:	4798      	blx	r3
    f44c:	4603      	mov	r3, r0
    f44e:	e005      	b.n	f45c <_usb_d_dev_handle_trfail+0x4c>
    f450:	7efb      	ldrb	r3, [r7, #27]
    f452:	4619      	mov	r1, r3
    f454:	69f8      	ldr	r0, [r7, #28]
    f456:	4b5a      	ldr	r3, [pc, #360]	; (f5c0 <_usb_d_dev_handle_trfail+0x1b0>)
    f458:	4798      	blx	r3
    f45a:	4603      	mov	r3, r0
    f45c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    f45e:	687b      	ldr	r3, [r7, #4]
    f460:	7cdb      	ldrb	r3, [r3, #19]
    f462:	f003 0307 	and.w	r3, r3, #7
    f466:	b2db      	uxtb	r3, r3
    f468:	2b01      	cmp	r3, #1
    f46a:	bf0c      	ite	eq
    f46c:	2301      	moveq	r3, #1
    f46e:	2300      	movne	r3, #0
    f470:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    f472:	78fb      	ldrb	r3, [r7, #3]
    f474:	011b      	lsls	r3, r3, #4
    f476:	697a      	ldr	r2, [r7, #20]
    f478:	4413      	add	r3, r2
    f47a:	7a9b      	ldrb	r3, [r3, #10]
    f47c:	b2db      	uxtb	r3, r3
    f47e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    f480:	7cfb      	ldrb	r3, [r7, #19]
    f482:	2b02      	cmp	r3, #2
    f484:	d12f      	bne.n	f4e6 <_usb_d_dev_handle_trfail+0xd6>
    f486:	7b3b      	ldrb	r3, [r7, #12]
    f488:	f003 0301 	and.w	r3, r3, #1
    f48c:	b2db      	uxtb	r3, r3
    f48e:	2b00      	cmp	r3, #0
    f490:	d029      	beq.n	f4e6 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    f492:	78fb      	ldrb	r3, [r7, #3]
    f494:	011b      	lsls	r3, r3, #4
    f496:	697a      	ldr	r2, [r7, #20]
    f498:	441a      	add	r2, r3
    f49a:	7a93      	ldrb	r3, [r2, #10]
    f49c:	f36f 0300 	bfc	r3, #0, #1
    f4a0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    f4a2:	78fb      	ldrb	r3, [r7, #3]
    f4a4:	f107 0220 	add.w	r2, r7, #32
    f4a8:	4413      	add	r3, r2
    f4aa:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f4ae:	7efb      	ldrb	r3, [r7, #27]
    f4b0:	4619      	mov	r1, r3
    f4b2:	69f8      	ldr	r0, [r7, #28]
    f4b4:	4b43      	ldr	r3, [pc, #268]	; (f5c4 <_usb_d_dev_handle_trfail+0x1b4>)
    f4b6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    f4b8:	78fb      	ldrb	r3, [r7, #3]
    f4ba:	f107 0220 	add.w	r2, r7, #32
    f4be:	4413      	add	r3, r2
    f4c0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f4c4:	7efb      	ldrb	r3, [r7, #27]
    f4c6:	4619      	mov	r1, r3
    f4c8:	69f8      	ldr	r0, [r7, #28]
    f4ca:	4b3f      	ldr	r3, [pc, #252]	; (f5c8 <_usb_d_dev_handle_trfail+0x1b8>)
    f4cc:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    f4ce:	78fb      	ldrb	r3, [r7, #3]
    f4d0:	2b00      	cmp	r3, #0
    f4d2:	bf14      	ite	ne
    f4d4:	2301      	movne	r3, #1
    f4d6:	2300      	moveq	r3, #0
    f4d8:	b2db      	uxtb	r3, r3
    f4da:	2204      	movs	r2, #4
    f4dc:	4619      	mov	r1, r3
    f4de:	6878      	ldr	r0, [r7, #4]
    f4e0:	4b3a      	ldr	r3, [pc, #232]	; (f5cc <_usb_d_dev_handle_trfail+0x1bc>)
    f4e2:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    f4e4:	e062      	b.n	f5ac <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    f4e6:	7b3b      	ldrb	r3, [r7, #12]
    f4e8:	f003 0302 	and.w	r3, r3, #2
    f4ec:	b2db      	uxtb	r3, r3
    f4ee:	2b00      	cmp	r3, #0
    f4f0:	d040      	beq.n	f574 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    f4f2:	78fb      	ldrb	r3, [r7, #3]
    f4f4:	011b      	lsls	r3, r3, #4
    f4f6:	697a      	ldr	r2, [r7, #20]
    f4f8:	441a      	add	r2, r3
    f4fa:	7a93      	ldrb	r3, [r2, #10]
    f4fc:	f36f 0341 	bfc	r3, #1, #1
    f500:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    f502:	78fb      	ldrb	r3, [r7, #3]
    f504:	f107 0220 	add.w	r2, r7, #32
    f508:	4413      	add	r3, r2
    f50a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f50e:	7efb      	ldrb	r3, [r7, #27]
    f510:	4619      	mov	r1, r3
    f512:	69f8      	ldr	r0, [r7, #28]
    f514:	4b2b      	ldr	r3, [pc, #172]	; (f5c4 <_usb_d_dev_handle_trfail+0x1b4>)
    f516:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    f518:	78fb      	ldrb	r3, [r7, #3]
    f51a:	f107 0220 	add.w	r2, r7, #32
    f51e:	4413      	add	r3, r2
    f520:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f524:	7efb      	ldrb	r3, [r7, #27]
    f526:	4619      	mov	r1, r3
    f528:	69f8      	ldr	r0, [r7, #28]
    f52a:	4b27      	ldr	r3, [pc, #156]	; (f5c8 <_usb_d_dev_handle_trfail+0x1b8>)
    f52c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    f52e:	7cbb      	ldrb	r3, [r7, #18]
    f530:	2b00      	cmp	r3, #0
    f532:	d03b      	beq.n	f5ac <_usb_d_dev_handle_trfail+0x19c>
    f534:	687b      	ldr	r3, [r7, #4]
    f536:	7cdb      	ldrb	r3, [r3, #19]
    f538:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f53c:	b2db      	uxtb	r3, r3
    f53e:	2b00      	cmp	r3, #0
    f540:	d034      	beq.n	f5ac <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    f542:	687b      	ldr	r3, [r7, #4]
    f544:	7cdb      	ldrb	r3, [r3, #19]
    f546:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    f54a:	b2db      	uxtb	r3, r3
    f54c:	461a      	mov	r2, r3
    f54e:	78fb      	ldrb	r3, [r7, #3]
    f550:	4293      	cmp	r3, r2
    f552:	d02b      	beq.n	f5ac <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    f554:	687b      	ldr	r3, [r7, #4]
    f556:	7cdb      	ldrb	r3, [r3, #19]
    f558:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    f55c:	b2db      	uxtb	r3, r3
    f55e:	2b00      	cmp	r3, #0
    f560:	bf14      	ite	ne
    f562:	2301      	movne	r3, #1
    f564:	2300      	moveq	r3, #0
    f566:	b2db      	uxtb	r3, r3
    f568:	2200      	movs	r2, #0
    f56a:	4619      	mov	r1, r3
    f56c:	6878      	ldr	r0, [r7, #4]
    f56e:	4b17      	ldr	r3, [pc, #92]	; (f5cc <_usb_d_dev_handle_trfail+0x1bc>)
    f570:	4798      	blx	r3
}
    f572:	e01b      	b.n	f5ac <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    f574:	78fa      	ldrb	r2, [r7, #3]
    f576:	7efb      	ldrb	r3, [r7, #27]
    f578:	4611      	mov	r1, r2
    f57a:	4618      	mov	r0, r3
    f57c:	4b14      	ldr	r3, [pc, #80]	; (f5d0 <_usb_d_dev_handle_trfail+0x1c0>)
    f57e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    f580:	78fb      	ldrb	r3, [r7, #3]
    f582:	f107 0220 	add.w	r2, r7, #32
    f586:	4413      	add	r3, r2
    f588:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f58c:	7efb      	ldrb	r3, [r7, #27]
    f58e:	4619      	mov	r1, r3
    f590:	69f8      	ldr	r0, [r7, #28]
    f592:	4b0c      	ldr	r3, [pc, #48]	; (f5c4 <_usb_d_dev_handle_trfail+0x1b4>)
    f594:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    f596:	78fb      	ldrb	r3, [r7, #3]
    f598:	f107 0220 	add.w	r2, r7, #32
    f59c:	4413      	add	r3, r2
    f59e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f5a2:	7efb      	ldrb	r3, [r7, #27]
    f5a4:	4619      	mov	r1, r3
    f5a6:	69f8      	ldr	r0, [r7, #28]
    f5a8:	4b07      	ldr	r3, [pc, #28]	; (f5c8 <_usb_d_dev_handle_trfail+0x1b8>)
    f5aa:	4798      	blx	r3
}
    f5ac:	bf00      	nop
    f5ae:	3720      	adds	r7, #32
    f5b0:	46bd      	mov	sp, r7
    f5b2:	bd80      	pop	{r7, pc}
    f5b4:	00020508 	.word	0x00020508
    f5b8:	20008df0 	.word	0x20008df0
    f5bc:	0000e179 	.word	0x0000e179
    f5c0:	0000e149 	.word	0x0000e149
    f5c4:	0000e01d 	.word	0x0000e01d
    f5c8:	0000e11d 	.word	0x0000e11d
    f5cc:	00010189 	.word	0x00010189
    f5d0:	0000ea05 	.word	0x0000ea05

0000f5d4 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    f5d4:	b580      	push	{r7, lr}
    f5d6:	b082      	sub	sp, #8
    f5d8:	af00      	add	r7, sp, #0
    f5da:	6078      	str	r0, [r7, #4]
    f5dc:	460b      	mov	r3, r1
    f5de:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    f5e0:	78fb      	ldrb	r3, [r7, #3]
    f5e2:	f003 0310 	and.w	r3, r3, #16
    f5e6:	2b00      	cmp	r3, #0
    f5e8:	d003      	beq.n	f5f2 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    f5ea:	6878      	ldr	r0, [r7, #4]
    f5ec:	4b0c      	ldr	r3, [pc, #48]	; (f620 <_usb_d_dev_trans_setup_isr+0x4c>)
    f5ee:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    f5f0:	e012      	b.n	f618 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    f5f2:	78fb      	ldrb	r3, [r7, #3]
    f5f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f5f8:	2b00      	cmp	r3, #0
    f5fa:	d004      	beq.n	f606 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    f5fc:	2101      	movs	r1, #1
    f5fe:	6878      	ldr	r0, [r7, #4]
    f600:	4b08      	ldr	r3, [pc, #32]	; (f624 <_usb_d_dev_trans_setup_isr+0x50>)
    f602:	4798      	blx	r3
}
    f604:	e008      	b.n	f618 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    f606:	78fb      	ldrb	r3, [r7, #3]
    f608:	f003 0320 	and.w	r3, r3, #32
    f60c:	2b00      	cmp	r3, #0
    f60e:	d003      	beq.n	f618 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    f610:	2100      	movs	r1, #0
    f612:	6878      	ldr	r0, [r7, #4]
    f614:	4b03      	ldr	r3, [pc, #12]	; (f624 <_usb_d_dev_trans_setup_isr+0x50>)
    f616:	4798      	blx	r3
}
    f618:	bf00      	nop
    f61a:	3708      	adds	r7, #8
    f61c:	46bd      	mov	sp, r7
    f61e:	bd80      	pop	{r7, pc}
    f620:	0000f2f5 	.word	0x0000f2f5
    f624:	0000f3cd 	.word	0x0000f3cd

0000f628 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    f628:	b580      	push	{r7, lr}
    f62a:	b082      	sub	sp, #8
    f62c:	af00      	add	r7, sp, #0
    f62e:	6078      	str	r0, [r7, #4]
    f630:	460b      	mov	r3, r1
    f632:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    f634:	78fb      	ldrb	r3, [r7, #3]
    f636:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f63a:	2b00      	cmp	r3, #0
    f63c:	d004      	beq.n	f648 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    f63e:	2101      	movs	r1, #1
    f640:	6878      	ldr	r0, [r7, #4]
    f642:	4b1a      	ldr	r3, [pc, #104]	; (f6ac <_usb_d_dev_trans_in_isr+0x84>)
    f644:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    f646:	e02c      	b.n	f6a2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    f648:	78fb      	ldrb	r3, [r7, #3]
    f64a:	f003 0308 	and.w	r3, r3, #8
    f64e:	2b00      	cmp	r3, #0
    f650:	d004      	beq.n	f65c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    f652:	2101      	movs	r1, #1
    f654:	6878      	ldr	r0, [r7, #4]
    f656:	4b16      	ldr	r3, [pc, #88]	; (f6b0 <_usb_d_dev_trans_in_isr+0x88>)
    f658:	4798      	blx	r3
}
    f65a:	e022      	b.n	f6a2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    f65c:	78fb      	ldrb	r3, [r7, #3]
    f65e:	f003 0302 	and.w	r3, r3, #2
    f662:	2b00      	cmp	r3, #0
    f664:	d004      	beq.n	f670 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    f666:	2101      	movs	r1, #1
    f668:	6878      	ldr	r0, [r7, #4]
    f66a:	4b12      	ldr	r3, [pc, #72]	; (f6b4 <_usb_d_dev_trans_in_isr+0x8c>)
    f66c:	4798      	blx	r3
}
    f66e:	e018      	b.n	f6a2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    f670:	687b      	ldr	r3, [r7, #4]
    f672:	7cdb      	ldrb	r3, [r3, #19]
    f674:	f003 0307 	and.w	r3, r3, #7
    f678:	b2db      	uxtb	r3, r3
    f67a:	2b01      	cmp	r3, #1
    f67c:	d111      	bne.n	f6a2 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    f67e:	78fb      	ldrb	r3, [r7, #3]
    f680:	f003 0304 	and.w	r3, r3, #4
    f684:	2b00      	cmp	r3, #0
    f686:	d004      	beq.n	f692 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    f688:	2100      	movs	r1, #0
    f68a:	6878      	ldr	r0, [r7, #4]
    f68c:	4b08      	ldr	r3, [pc, #32]	; (f6b0 <_usb_d_dev_trans_in_isr+0x88>)
    f68e:	4798      	blx	r3
}
    f690:	e007      	b.n	f6a2 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    f692:	78fb      	ldrb	r3, [r7, #3]
    f694:	f003 0310 	and.w	r3, r3, #16
    f698:	2b00      	cmp	r3, #0
    f69a:	d002      	beq.n	f6a2 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    f69c:	6878      	ldr	r0, [r7, #4]
    f69e:	4b06      	ldr	r3, [pc, #24]	; (f6b8 <_usb_d_dev_trans_in_isr+0x90>)
    f6a0:	4798      	blx	r3
}
    f6a2:	bf00      	nop
    f6a4:	3708      	adds	r7, #8
    f6a6:	46bd      	mov	sp, r7
    f6a8:	bd80      	pop	{r7, pc}
    f6aa:	bf00      	nop
    f6ac:	0000f3cd 	.word	0x0000f3cd
    f6b0:	0000f411 	.word	0x0000f411
    f6b4:	0000ee19 	.word	0x0000ee19
    f6b8:	0000f2f5 	.word	0x0000f2f5

0000f6bc <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    f6bc:	b580      	push	{r7, lr}
    f6be:	b082      	sub	sp, #8
    f6c0:	af00      	add	r7, sp, #0
    f6c2:	6078      	str	r0, [r7, #4]
    f6c4:	460b      	mov	r3, r1
    f6c6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    f6c8:	78fb      	ldrb	r3, [r7, #3]
    f6ca:	f003 0320 	and.w	r3, r3, #32
    f6ce:	2b00      	cmp	r3, #0
    f6d0:	d004      	beq.n	f6dc <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    f6d2:	2100      	movs	r1, #0
    f6d4:	6878      	ldr	r0, [r7, #4]
    f6d6:	4b1a      	ldr	r3, [pc, #104]	; (f740 <_usb_d_dev_trans_out_isr+0x84>)
    f6d8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    f6da:	e02c      	b.n	f736 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    f6dc:	78fb      	ldrb	r3, [r7, #3]
    f6de:	f003 0304 	and.w	r3, r3, #4
    f6e2:	2b00      	cmp	r3, #0
    f6e4:	d004      	beq.n	f6f0 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    f6e6:	2100      	movs	r1, #0
    f6e8:	6878      	ldr	r0, [r7, #4]
    f6ea:	4b16      	ldr	r3, [pc, #88]	; (f744 <_usb_d_dev_trans_out_isr+0x88>)
    f6ec:	4798      	blx	r3
}
    f6ee:	e022      	b.n	f736 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    f6f0:	78fb      	ldrb	r3, [r7, #3]
    f6f2:	f003 0301 	and.w	r3, r3, #1
    f6f6:	2b00      	cmp	r3, #0
    f6f8:	d004      	beq.n	f704 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    f6fa:	2101      	movs	r1, #1
    f6fc:	6878      	ldr	r0, [r7, #4]
    f6fe:	4b12      	ldr	r3, [pc, #72]	; (f748 <_usb_d_dev_trans_out_isr+0x8c>)
    f700:	4798      	blx	r3
}
    f702:	e018      	b.n	f736 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    f704:	687b      	ldr	r3, [r7, #4]
    f706:	7cdb      	ldrb	r3, [r3, #19]
    f708:	f003 0307 	and.w	r3, r3, #7
    f70c:	b2db      	uxtb	r3, r3
    f70e:	2b01      	cmp	r3, #1
    f710:	d111      	bne.n	f736 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    f712:	78fb      	ldrb	r3, [r7, #3]
    f714:	f003 0308 	and.w	r3, r3, #8
    f718:	2b00      	cmp	r3, #0
    f71a:	d004      	beq.n	f726 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    f71c:	2101      	movs	r1, #1
    f71e:	6878      	ldr	r0, [r7, #4]
    f720:	4b08      	ldr	r3, [pc, #32]	; (f744 <_usb_d_dev_trans_out_isr+0x88>)
    f722:	4798      	blx	r3
}
    f724:	e007      	b.n	f736 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    f726:	78fb      	ldrb	r3, [r7, #3]
    f728:	f003 0310 	and.w	r3, r3, #16
    f72c:	2b00      	cmp	r3, #0
    f72e:	d002      	beq.n	f736 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    f730:	6878      	ldr	r0, [r7, #4]
    f732:	4b06      	ldr	r3, [pc, #24]	; (f74c <_usb_d_dev_trans_out_isr+0x90>)
    f734:	4798      	blx	r3
}
    f736:	bf00      	nop
    f738:	3708      	adds	r7, #8
    f73a:	46bd      	mov	sp, r7
    f73c:	bd80      	pop	{r7, pc}
    f73e:	bf00      	nop
    f740:	0000f3cd 	.word	0x0000f3cd
    f744:	0000f411 	.word	0x0000f411
    f748:	0000f031 	.word	0x0000f031
    f74c:	0000f2f5 	.word	0x0000f2f5

0000f750 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    f750:	b580      	push	{r7, lr}
    f752:	b084      	sub	sp, #16
    f754:	af00      	add	r7, sp, #0
    f756:	6078      	str	r0, [r7, #4]
    f758:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    f75a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f75e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f760:	683b      	ldr	r3, [r7, #0]
    f762:	7c9b      	ldrb	r3, [r3, #18]
    f764:	f003 030f 	and.w	r3, r3, #15
    f768:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    f76a:	7afb      	ldrb	r3, [r7, #11]
    f76c:	2201      	movs	r2, #1
    f76e:	409a      	lsls	r2, r3
    f770:	687b      	ldr	r3, [r7, #4]
    f772:	4013      	ands	r3, r2
    f774:	2b00      	cmp	r3, #0
    f776:	d03d      	beq.n	f7f4 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    f778:	7afb      	ldrb	r3, [r7, #11]
    f77a:	68fa      	ldr	r2, [r7, #12]
    f77c:	3308      	adds	r3, #8
    f77e:	015b      	lsls	r3, r3, #5
    f780:	4413      	add	r3, r2
    f782:	3307      	adds	r3, #7
    f784:	781b      	ldrb	r3, [r3, #0]
    f786:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    f788:	7afb      	ldrb	r3, [r7, #11]
    f78a:	68fa      	ldr	r2, [r7, #12]
    f78c:	015b      	lsls	r3, r3, #5
    f78e:	4413      	add	r3, r2
    f790:	f203 1309 	addw	r3, r3, #265	; 0x109
    f794:	781b      	ldrb	r3, [r3, #0]
    f796:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    f798:	7aba      	ldrb	r2, [r7, #10]
    f79a:	7a7b      	ldrb	r3, [r7, #9]
    f79c:	4013      	ands	r3, r2
    f79e:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    f7a0:	7abb      	ldrb	r3, [r7, #10]
    f7a2:	2b00      	cmp	r3, #0
    f7a4:	d027      	beq.n	f7f6 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    f7a6:	683b      	ldr	r3, [r7, #0]
    f7a8:	7cdb      	ldrb	r3, [r3, #19]
    f7aa:	f003 0307 	and.w	r3, r3, #7
    f7ae:	b2db      	uxtb	r3, r3
    f7b0:	2b01      	cmp	r3, #1
    f7b2:	d10c      	bne.n	f7ce <_usb_d_dev_handle_eps+0x7e>
    f7b4:	683b      	ldr	r3, [r7, #0]
    f7b6:	7cdb      	ldrb	r3, [r3, #19]
    f7b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f7bc:	b2db      	uxtb	r3, r3
    f7be:	2b00      	cmp	r3, #0
    f7c0:	d105      	bne.n	f7ce <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    f7c2:	7abb      	ldrb	r3, [r7, #10]
    f7c4:	4619      	mov	r1, r3
    f7c6:	6838      	ldr	r0, [r7, #0]
    f7c8:	4b0c      	ldr	r3, [pc, #48]	; (f7fc <_usb_d_dev_handle_eps+0xac>)
    f7ca:	4798      	blx	r3
    f7cc:	e013      	b.n	f7f6 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    f7ce:	683b      	ldr	r3, [r7, #0]
    f7d0:	7cdb      	ldrb	r3, [r3, #19]
    f7d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    f7d6:	b2db      	uxtb	r3, r3
    f7d8:	2b00      	cmp	r3, #0
    f7da:	d005      	beq.n	f7e8 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    f7dc:	7abb      	ldrb	r3, [r7, #10]
    f7de:	4619      	mov	r1, r3
    f7e0:	6838      	ldr	r0, [r7, #0]
    f7e2:	4b07      	ldr	r3, [pc, #28]	; (f800 <_usb_d_dev_handle_eps+0xb0>)
    f7e4:	4798      	blx	r3
    f7e6:	e006      	b.n	f7f6 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    f7e8:	7abb      	ldrb	r3, [r7, #10]
    f7ea:	4619      	mov	r1, r3
    f7ec:	6838      	ldr	r0, [r7, #0]
    f7ee:	4b05      	ldr	r3, [pc, #20]	; (f804 <_usb_d_dev_handle_eps+0xb4>)
    f7f0:	4798      	blx	r3
    f7f2:	e000      	b.n	f7f6 <_usb_d_dev_handle_eps+0xa6>
		return;
    f7f4:	bf00      	nop
		}
	}
}
    f7f6:	3710      	adds	r7, #16
    f7f8:	46bd      	mov	sp, r7
    f7fa:	bd80      	pop	{r7, pc}
    f7fc:	0000f5d5 	.word	0x0000f5d5
    f800:	0000f629 	.word	0x0000f629
    f804:	0000f6bd 	.word	0x0000f6bd

0000f808 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    f808:	b580      	push	{r7, lr}
    f80a:	b084      	sub	sp, #16
    f80c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    f80e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f812:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    f814:	68bb      	ldr	r3, [r7, #8]
    f816:	8c1b      	ldrh	r3, [r3, #32]
    f818:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    f81a:	88fb      	ldrh	r3, [r7, #6]
    f81c:	2b00      	cmp	r3, #0
    f81e:	d104      	bne.n	f82a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    f820:	4b13      	ldr	r3, [pc, #76]	; (f870 <_usb_d_dev_handler+0x68>)
    f822:	4798      	blx	r3
    f824:	4603      	mov	r3, r0
    f826:	2b00      	cmp	r3, #0
    f828:	d11e      	bne.n	f868 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    f82a:	2300      	movs	r3, #0
    f82c:	73fb      	strb	r3, [r7, #15]
    f82e:	e017      	b.n	f860 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    f830:	7bfa      	ldrb	r2, [r7, #15]
    f832:	4613      	mov	r3, r2
    f834:	009b      	lsls	r3, r3, #2
    f836:	4413      	add	r3, r2
    f838:	009b      	lsls	r3, r3, #2
    f83a:	3310      	adds	r3, #16
    f83c:	4a0d      	ldr	r2, [pc, #52]	; (f874 <_usb_d_dev_handler+0x6c>)
    f83e:	4413      	add	r3, r2
    f840:	3304      	adds	r3, #4
    f842:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    f844:	683b      	ldr	r3, [r7, #0]
    f846:	7c9b      	ldrb	r3, [r3, #18]
    f848:	2bff      	cmp	r3, #255	; 0xff
    f84a:	d005      	beq.n	f858 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    f84c:	88fb      	ldrh	r3, [r7, #6]
    f84e:	6839      	ldr	r1, [r7, #0]
    f850:	4618      	mov	r0, r3
    f852:	4b09      	ldr	r3, [pc, #36]	; (f878 <_usb_d_dev_handler+0x70>)
    f854:	4798      	blx	r3
    f856:	e000      	b.n	f85a <_usb_d_dev_handler+0x52>
			continue;
    f858:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    f85a:	7bfb      	ldrb	r3, [r7, #15]
    f85c:	3301      	adds	r3, #1
    f85e:	73fb      	strb	r3, [r7, #15]
    f860:	7bfb      	ldrb	r3, [r7, #15]
    f862:	2b08      	cmp	r3, #8
    f864:	d9e4      	bls.n	f830 <_usb_d_dev_handler+0x28>
    f866:	e000      	b.n	f86a <_usb_d_dev_handler+0x62>
			return;
    f868:	bf00      	nop
	}
}
    f86a:	3710      	adds	r7, #16
    f86c:	46bd      	mov	sp, r7
    f86e:	bd80      	pop	{r7, pc}
    f870:	0000ed61 	.word	0x0000ed61
    f874:	20008d28 	.word	0x20008d28
    f878:	0000f751 	.word	0x0000f751

0000f87c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    f87c:	b580      	push	{r7, lr}
    f87e:	b082      	sub	sp, #8
    f880:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    f882:	2300      	movs	r3, #0
    f884:	71fb      	strb	r3, [r7, #7]
    f886:	e023      	b.n	f8d0 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    f888:	79fa      	ldrb	r2, [r7, #7]
    f88a:	4613      	mov	r3, r2
    f88c:	009b      	lsls	r3, r3, #2
    f88e:	4413      	add	r3, r2
    f890:	009b      	lsls	r3, r3, #2
    f892:	3310      	adds	r3, #16
    f894:	4a14      	ldr	r2, [pc, #80]	; (f8e8 <_usb_d_dev_reset_epts+0x6c>)
    f896:	4413      	add	r3, r2
    f898:	3304      	adds	r3, #4
    f89a:	2103      	movs	r1, #3
    f89c:	4618      	mov	r0, r3
    f89e:	4b13      	ldr	r3, [pc, #76]	; (f8ec <_usb_d_dev_reset_epts+0x70>)
    f8a0:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    f8a2:	79fa      	ldrb	r2, [r7, #7]
    f8a4:	4910      	ldr	r1, [pc, #64]	; (f8e8 <_usb_d_dev_reset_epts+0x6c>)
    f8a6:	4613      	mov	r3, r2
    f8a8:	009b      	lsls	r3, r3, #2
    f8aa:	4413      	add	r3, r2
    f8ac:	009b      	lsls	r3, r3, #2
    f8ae:	440b      	add	r3, r1
    f8b0:	3326      	adds	r3, #38	; 0x26
    f8b2:	22ff      	movs	r2, #255	; 0xff
    f8b4:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    f8b6:	79fa      	ldrb	r2, [r7, #7]
    f8b8:	490b      	ldr	r1, [pc, #44]	; (f8e8 <_usb_d_dev_reset_epts+0x6c>)
    f8ba:	4613      	mov	r3, r2
    f8bc:	009b      	lsls	r3, r3, #2
    f8be:	4413      	add	r3, r2
    f8c0:	009b      	lsls	r3, r3, #2
    f8c2:	440b      	add	r3, r1
    f8c4:	3327      	adds	r3, #39	; 0x27
    f8c6:	2200      	movs	r2, #0
    f8c8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    f8ca:	79fb      	ldrb	r3, [r7, #7]
    f8cc:	3301      	adds	r3, #1
    f8ce:	71fb      	strb	r3, [r7, #7]
    f8d0:	79fb      	ldrb	r3, [r7, #7]
    f8d2:	2b08      	cmp	r3, #8
    f8d4:	d9d8      	bls.n	f888 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    f8d6:	22a0      	movs	r2, #160	; 0xa0
    f8d8:	2100      	movs	r1, #0
    f8da:	4805      	ldr	r0, [pc, #20]	; (f8f0 <_usb_d_dev_reset_epts+0x74>)
    f8dc:	4b05      	ldr	r3, [pc, #20]	; (f8f4 <_usb_d_dev_reset_epts+0x78>)
    f8de:	4798      	blx	r3
}
    f8e0:	bf00      	nop
    f8e2:	3708      	adds	r7, #8
    f8e4:	46bd      	mov	sp, r7
    f8e6:	bd80      	pop	{r7, pc}
    f8e8:	20008d28 	.word	0x20008d28
    f8ec:	00010141 	.word	0x00010141
    f8f0:	20008df0 	.word	0x20008df0
    f8f4:	0001bd39 	.word	0x0001bd39

0000f8f8 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    f8f8:	b580      	push	{r7, lr}
    f8fa:	b084      	sub	sp, #16
    f8fc:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    f8fe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f902:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    f904:	2301      	movs	r3, #1
    f906:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    f908:	2304      	movs	r3, #4
    f90a:	713b      	strb	r3, [r7, #4]
    f90c:	2300      	movs	r3, #0
    f90e:	717b      	strb	r3, [r7, #5]
    f910:	2300      	movs	r3, #0
    f912:	71bb      	strb	r3, [r7, #6]
    f914:	2300      	movs	r3, #0
    f916:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    f918:	2101      	movs	r1, #1
    f91a:	68f8      	ldr	r0, [r7, #12]
    f91c:	4b26      	ldr	r3, [pc, #152]	; (f9b8 <_usb_d_dev_init+0xc0>)
    f91e:	4798      	blx	r3
    f920:	4603      	mov	r3, r0
    f922:	f083 0301 	eor.w	r3, r3, #1
    f926:	b2db      	uxtb	r3, r3
    f928:	2b00      	cmp	r3, #0
    f92a:	d011      	beq.n	f950 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    f92c:	2102      	movs	r1, #2
    f92e:	68f8      	ldr	r0, [r7, #12]
    f930:	4b22      	ldr	r3, [pc, #136]	; (f9bc <_usb_d_dev_init+0xc4>)
    f932:	4798      	blx	r3
    f934:	4603      	mov	r3, r0
    f936:	2b00      	cmp	r3, #0
    f938:	d006      	beq.n	f948 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    f93a:	68f8      	ldr	r0, [r7, #12]
    f93c:	4b20      	ldr	r3, [pc, #128]	; (f9c0 <_usb_d_dev_init+0xc8>)
    f93e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    f940:	2102      	movs	r1, #2
    f942:	68f8      	ldr	r0, [r7, #12]
    f944:	4b1f      	ldr	r3, [pc, #124]	; (f9c4 <_usb_d_dev_init+0xcc>)
    f946:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    f948:	2101      	movs	r1, #1
    f94a:	68f8      	ldr	r0, [r7, #12]
    f94c:	4b1e      	ldr	r3, [pc, #120]	; (f9c8 <_usb_d_dev_init+0xd0>)
    f94e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    f950:	2101      	movs	r1, #1
    f952:	68f8      	ldr	r0, [r7, #12]
    f954:	4b1b      	ldr	r3, [pc, #108]	; (f9c4 <_usb_d_dev_init+0xcc>)
    f956:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    f958:	4b1c      	ldr	r3, [pc, #112]	; (f9cc <_usb_d_dev_init+0xd4>)
    f95a:	4a1d      	ldr	r2, [pc, #116]	; (f9d0 <_usb_d_dev_init+0xd8>)
    f95c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    f95e:	4b1b      	ldr	r3, [pc, #108]	; (f9cc <_usb_d_dev_init+0xd4>)
    f960:	4a1b      	ldr	r2, [pc, #108]	; (f9d0 <_usb_d_dev_init+0xd8>)
    f962:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    f964:	4b19      	ldr	r3, [pc, #100]	; (f9cc <_usb_d_dev_init+0xd4>)
    f966:	4a1a      	ldr	r2, [pc, #104]	; (f9d0 <_usb_d_dev_init+0xd8>)
    f968:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    f96a:	4b18      	ldr	r3, [pc, #96]	; (f9cc <_usb_d_dev_init+0xd4>)
    f96c:	4a18      	ldr	r2, [pc, #96]	; (f9d0 <_usb_d_dev_init+0xd8>)
    f96e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    f970:	4b16      	ldr	r3, [pc, #88]	; (f9cc <_usb_d_dev_init+0xd4>)
    f972:	4a17      	ldr	r2, [pc, #92]	; (f9d0 <_usb_d_dev_init+0xd8>)
    f974:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    f976:	4b17      	ldr	r3, [pc, #92]	; (f9d4 <_usb_d_dev_init+0xdc>)
    f978:	4798      	blx	r3

	_usb_load_calib();
    f97a:	4b17      	ldr	r3, [pc, #92]	; (f9d8 <_usb_d_dev_init+0xe0>)
    f97c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    f97e:	2104      	movs	r1, #4
    f980:	68f8      	ldr	r0, [r7, #12]
    f982:	4b11      	ldr	r3, [pc, #68]	; (f9c8 <_usb_d_dev_init+0xd0>)
    f984:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    f986:	4b15      	ldr	r3, [pc, #84]	; (f9dc <_usb_d_dev_init+0xe4>)
    f988:	4619      	mov	r1, r3
    f98a:	68f8      	ldr	r0, [r7, #12]
    f98c:	4b14      	ldr	r3, [pc, #80]	; (f9e0 <_usb_d_dev_init+0xe8>)
    f98e:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    f990:	7afb      	ldrb	r3, [r7, #11]
    f992:	f107 0210 	add.w	r2, r7, #16
    f996:	4413      	add	r3, r2
    f998:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    f99c:	f043 0301 	orr.w	r3, r3, #1
    f9a0:	b2db      	uxtb	r3, r3
    f9a2:	b29b      	uxth	r3, r3
    f9a4:	4619      	mov	r1, r3
    f9a6:	68f8      	ldr	r0, [r7, #12]
    f9a8:	4b0e      	ldr	r3, [pc, #56]	; (f9e4 <_usb_d_dev_init+0xec>)
    f9aa:	4798      	blx	r3

	return ERR_NONE;
    f9ac:	2300      	movs	r3, #0
}
    f9ae:	4618      	mov	r0, r3
    f9b0:	3710      	adds	r7, #16
    f9b2:	46bd      	mov	sp, r7
    f9b4:	bd80      	pop	{r7, pc}
    f9b6:	bf00      	nop
    f9b8:	0000df91 	.word	0x0000df91
    f9bc:	0000e2e1 	.word	0x0000e2e1
    f9c0:	0000e2b5 	.word	0x0000e2b5
    f9c4:	0000df67 	.word	0x0000df67
    f9c8:	0000e311 	.word	0x0000e311
    f9cc:	20008d28 	.word	0x20008d28
    f9d0:	0000e3d9 	.word	0x0000e3d9
    f9d4:	0000f87d 	.word	0x0000f87d
    f9d8:	0000e3f1 	.word	0x0000e3f1
    f9dc:	20008df0 	.word	0x20008df0
    f9e0:	0000e3bd 	.word	0x0000e3bd
    f9e4:	0000e381 	.word	0x0000e381

0000f9e8 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    f9e8:	b580      	push	{r7, lr}
    f9ea:	b082      	sub	sp, #8
    f9ec:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    f9ee:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f9f2:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    f9f4:	2103      	movs	r1, #3
    f9f6:	6878      	ldr	r0, [r7, #4]
    f9f8:	4b17      	ldr	r3, [pc, #92]	; (fa58 <_usb_d_dev_enable+0x70>)
    f9fa:	4798      	blx	r3
    f9fc:	4603      	mov	r3, r0
    f9fe:	2b00      	cmp	r3, #0
    fa00:	d002      	beq.n	fa08 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    fa02:	f06f 0310 	mvn.w	r3, #16
    fa06:	e023      	b.n	fa50 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    fa08:	6878      	ldr	r0, [r7, #4]
    fa0a:	4b14      	ldr	r3, [pc, #80]	; (fa5c <_usb_d_dev_enable+0x74>)
    fa0c:	4798      	blx	r3
    fa0e:	4603      	mov	r3, r0
    fa10:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    fa12:	78fb      	ldrb	r3, [r7, #3]
    fa14:	f003 0302 	and.w	r3, r3, #2
    fa18:	2b00      	cmp	r3, #0
    fa1a:	d107      	bne.n	fa2c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    fa1c:	78fb      	ldrb	r3, [r7, #3]
    fa1e:	f043 0302 	orr.w	r3, r3, #2
    fa22:	b2db      	uxtb	r3, r3
    fa24:	4619      	mov	r1, r3
    fa26:	6878      	ldr	r0, [r7, #4]
    fa28:	4b0d      	ldr	r3, [pc, #52]	; (fa60 <_usb_d_dev_enable+0x78>)
    fa2a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    fa2c:	2050      	movs	r0, #80	; 0x50
    fa2e:	4b0d      	ldr	r3, [pc, #52]	; (fa64 <_usb_d_dev_enable+0x7c>)
    fa30:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    fa32:	2051      	movs	r0, #81	; 0x51
    fa34:	4b0b      	ldr	r3, [pc, #44]	; (fa64 <_usb_d_dev_enable+0x7c>)
    fa36:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    fa38:	2052      	movs	r0, #82	; 0x52
    fa3a:	4b0a      	ldr	r3, [pc, #40]	; (fa64 <_usb_d_dev_enable+0x7c>)
    fa3c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    fa3e:	2053      	movs	r0, #83	; 0x53
    fa40:	4b08      	ldr	r3, [pc, #32]	; (fa64 <_usb_d_dev_enable+0x7c>)
    fa42:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    fa44:	f240 218d 	movw	r1, #653	; 0x28d
    fa48:	6878      	ldr	r0, [r7, #4]
    fa4a:	4b07      	ldr	r3, [pc, #28]	; (fa68 <_usb_d_dev_enable+0x80>)
    fa4c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    fa4e:	2300      	movs	r3, #0
}
    fa50:	4618      	mov	r0, r3
    fa52:	3708      	adds	r7, #8
    fa54:	46bd      	mov	sp, r7
    fa56:	bd80      	pop	{r7, pc}
    fa58:	0000e28b 	.word	0x0000e28b
    fa5c:	0000e339 	.word	0x0000e339
    fa60:	0000e311 	.word	0x0000e311
    fa64:	0000de9d 	.word	0x0000de9d
    fa68:	0000e235 	.word	0x0000e235

0000fa6c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    fa6c:	b580      	push	{r7, lr}
    fa6e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    fa70:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fa74:	4b01      	ldr	r3, [pc, #4]	; (fa7c <_usb_d_dev_attach+0x10>)
    fa76:	4798      	blx	r3
}
    fa78:	bf00      	nop
    fa7a:	bd80      	pop	{r7, pc}
    fa7c:	0000e35d 	.word	0x0000e35d

0000fa80 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    fa80:	b580      	push	{r7, lr}
    fa82:	b082      	sub	sp, #8
    fa84:	af00      	add	r7, sp, #0
    fa86:	4603      	mov	r3, r0
    fa88:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    fa8a:	79fb      	ldrb	r3, [r7, #7]
    fa8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fa90:	b2db      	uxtb	r3, r3
    fa92:	4619      	mov	r1, r3
    fa94:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fa98:	4b02      	ldr	r3, [pc, #8]	; (faa4 <_usb_d_dev_set_address+0x24>)
    fa9a:	4798      	blx	r3
}
    fa9c:	bf00      	nop
    fa9e:	3708      	adds	r7, #8
    faa0:	46bd      	mov	sp, r7
    faa2:	bd80      	pop	{r7, pc}
    faa4:	0000e39f 	.word	0x0000e39f

0000faa8 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    faa8:	b590      	push	{r4, r7, lr}
    faaa:	b085      	sub	sp, #20
    faac:	af00      	add	r7, sp, #0
    faae:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    fab0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    fab4:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    fab6:	687b      	ldr	r3, [r7, #4]
    fab8:	7c9b      	ldrb	r3, [r3, #18]
    faba:	f003 030f 	and.w	r3, r3, #15
    fabe:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    fac0:	687b      	ldr	r3, [r7, #4]
    fac2:	68db      	ldr	r3, [r3, #12]
    fac4:	461a      	mov	r2, r3
    fac6:	7afb      	ldrb	r3, [r7, #11]
    fac8:	2100      	movs	r1, #0
    faca:	4618      	mov	r0, r3
    facc:	4b0f      	ldr	r3, [pc, #60]	; (fb0c <_usb_d_dev_trans_setup+0x64>)
    face:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    fad0:	687b      	ldr	r3, [r7, #4]
    fad2:	8a1b      	ldrh	r3, [r3, #16]
    fad4:	461a      	mov	r2, r3
    fad6:	7af8      	ldrb	r0, [r7, #11]
    fad8:	2300      	movs	r3, #0
    fada:	2100      	movs	r1, #0
    fadc:	4c0c      	ldr	r4, [pc, #48]	; (fb10 <_usb_d_dev_trans_setup+0x68>)
    fade:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    fae0:	7afb      	ldrb	r3, [r7, #11]
    fae2:	22b0      	movs	r2, #176	; 0xb0
    fae4:	4619      	mov	r1, r3
    fae6:	68f8      	ldr	r0, [r7, #12]
    fae8:	4b0a      	ldr	r3, [pc, #40]	; (fb14 <_usb_d_dev_trans_setup+0x6c>)
    faea:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    faec:	7afb      	ldrb	r3, [r7, #11]
    faee:	2200      	movs	r2, #0
    faf0:	2100      	movs	r1, #0
    faf2:	4618      	mov	r0, r3
    faf4:	4b08      	ldr	r3, [pc, #32]	; (fb18 <_usb_d_dev_trans_setup+0x70>)
    faf6:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    faf8:	7afb      	ldrb	r3, [r7, #11]
    fafa:	2210      	movs	r2, #16
    fafc:	4619      	mov	r1, r3
    fafe:	68f8      	ldr	r0, [r7, #12]
    fb00:	4b06      	ldr	r3, [pc, #24]	; (fb1c <_usb_d_dev_trans_setup+0x74>)
    fb02:	4798      	blx	r3
}
    fb04:	bf00      	nop
    fb06:	3714      	adds	r7, #20
    fb08:	46bd      	mov	sp, r7
    fb0a:	bd90      	pop	{r4, r7, pc}
    fb0c:	0000e83d 	.word	0x0000e83d
    fb10:	0000e9c5 	.word	0x0000e9c5
    fb14:	0000e09d 	.word	0x0000e09d
    fb18:	0000ea95 	.word	0x0000ea95
    fb1c:	0000e0f1 	.word	0x0000e0f1

0000fb20 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    fb20:	b580      	push	{r7, lr}
    fb22:	b088      	sub	sp, #32
    fb24:	af00      	add	r7, sp, #0
    fb26:	4603      	mov	r3, r0
    fb28:	71fb      	strb	r3, [r7, #7]
    fb2a:	460b      	mov	r3, r1
    fb2c:	71bb      	strb	r3, [r7, #6]
    fb2e:	4613      	mov	r3, r2
    fb30:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    fb32:	79fb      	ldrb	r3, [r7, #7]
    fb34:	f003 030f 	and.w	r3, r3, #15
    fb38:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    fb3a:	79fb      	ldrb	r3, [r7, #7]
    fb3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fb40:	2b00      	cmp	r3, #0
    fb42:	bf14      	ite	ne
    fb44:	2301      	movne	r3, #1
    fb46:	2300      	moveq	r3, #0
    fb48:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    fb4a:	7fba      	ldrb	r2, [r7, #30]
    fb4c:	7ffb      	ldrb	r3, [r7, #31]
    fb4e:	4611      	mov	r1, r2
    fb50:	4618      	mov	r0, r3
    fb52:	4b3e      	ldr	r3, [pc, #248]	; (fc4c <_usb_d_dev_ep_init+0x12c>)
    fb54:	4798      	blx	r3
    fb56:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    fb58:	79bb      	ldrb	r3, [r7, #6]
    fb5a:	f003 0303 	and.w	r3, r3, #3
    fb5e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    fb60:	7ffa      	ldrb	r2, [r7, #31]
    fb62:	4613      	mov	r3, r2
    fb64:	005b      	lsls	r3, r3, #1
    fb66:	4413      	add	r3, r2
    fb68:	009b      	lsls	r3, r3, #2
    fb6a:	4a39      	ldr	r2, [pc, #228]	; (fc50 <_usb_d_dev_ep_init+0x130>)
    fb6c:	4413      	add	r3, r2
    fb6e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    fb70:	7ffb      	ldrb	r3, [r7, #31]
    fb72:	2b04      	cmp	r3, #4
    fb74:	d902      	bls.n	fb7c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    fb76:	f06f 0311 	mvn.w	r3, #17
    fb7a:	e063      	b.n	fc44 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    fb7c:	69bb      	ldr	r3, [r7, #24]
    fb7e:	7c9b      	ldrb	r3, [r3, #18]
    fb80:	2bff      	cmp	r3, #255	; 0xff
    fb82:	d002      	beq.n	fb8a <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    fb84:	f06f 0313 	mvn.w	r3, #19
    fb88:	e05c      	b.n	fc44 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    fb8a:	7dfb      	ldrb	r3, [r7, #23]
    fb8c:	2b00      	cmp	r3, #0
    fb8e:	d11f      	bne.n	fbd0 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    fb90:	7fbb      	ldrb	r3, [r7, #30]
    fb92:	2b00      	cmp	r3, #0
    fb94:	bf14      	ite	ne
    fb96:	2301      	movne	r3, #1
    fb98:	2300      	moveq	r3, #0
    fb9a:	b2db      	uxtb	r3, r3
    fb9c:	f083 0301 	eor.w	r3, r3, #1
    fba0:	b2db      	uxtb	r3, r3
    fba2:	f003 0301 	and.w	r3, r3, #1
    fba6:	b2da      	uxtb	r2, r3
    fba8:	7ffb      	ldrb	r3, [r7, #31]
    fbaa:	4611      	mov	r1, r2
    fbac:	4618      	mov	r0, r3
    fbae:	4b27      	ldr	r3, [pc, #156]	; (fc4c <_usb_d_dev_ep_init+0x12c>)
    fbb0:	4798      	blx	r3
    fbb2:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    fbb4:	68fb      	ldr	r3, [r7, #12]
    fbb6:	7c9b      	ldrb	r3, [r3, #18]
    fbb8:	2bff      	cmp	r3, #255	; 0xff
    fbba:	d002      	beq.n	fbc2 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    fbbc:	f06f 0313 	mvn.w	r3, #19
    fbc0:	e040      	b.n	fc44 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    fbc2:	693b      	ldr	r3, [r7, #16]
    fbc4:	681b      	ldr	r3, [r3, #0]
    fbc6:	2b00      	cmp	r3, #0
    fbc8:	d102      	bne.n	fbd0 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    fbca:	f06f 0312 	mvn.w	r3, #18
    fbce:	e039      	b.n	fc44 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    fbd0:	7fbb      	ldrb	r3, [r7, #30]
    fbd2:	2b00      	cmp	r3, #0
    fbd4:	d007      	beq.n	fbe6 <_usb_d_dev_ep_init+0xc6>
    fbd6:	693b      	ldr	r3, [r7, #16]
    fbd8:	685b      	ldr	r3, [r3, #4]
    fbda:	2b00      	cmp	r3, #0
    fbdc:	bf14      	ite	ne
    fbde:	2301      	movne	r3, #1
    fbe0:	2300      	moveq	r3, #0
    fbe2:	b2db      	uxtb	r3, r3
    fbe4:	e006      	b.n	fbf4 <_usb_d_dev_ep_init+0xd4>
    fbe6:	693b      	ldr	r3, [r7, #16]
    fbe8:	681b      	ldr	r3, [r3, #0]
    fbea:	2b00      	cmp	r3, #0
    fbec:	bf14      	ite	ne
    fbee:	2301      	movne	r3, #1
    fbf0:	2300      	moveq	r3, #0
    fbf2:	b2db      	uxtb	r3, r3
    fbf4:	2b00      	cmp	r3, #0
    fbf6:	d00f      	beq.n	fc18 <_usb_d_dev_ep_init+0xf8>
    fbf8:	7fbb      	ldrb	r3, [r7, #30]
    fbfa:	2b00      	cmp	r3, #0
    fbfc:	d003      	beq.n	fc06 <_usb_d_dev_ep_init+0xe6>
    fbfe:	693b      	ldr	r3, [r7, #16]
    fc00:	895b      	ldrh	r3, [r3, #10]
    fc02:	461a      	mov	r2, r3
    fc04:	e002      	b.n	fc0c <_usb_d_dev_ep_init+0xec>
    fc06:	693b      	ldr	r3, [r7, #16]
    fc08:	891b      	ldrh	r3, [r3, #8]
    fc0a:	461a      	mov	r2, r3
    fc0c:	88bb      	ldrh	r3, [r7, #4]
    fc0e:	429a      	cmp	r2, r3
    fc10:	da02      	bge.n	fc18 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    fc12:	f06f 0312 	mvn.w	r3, #18
    fc16:	e015      	b.n	fc44 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    fc18:	7fbb      	ldrb	r3, [r7, #30]
    fc1a:	2b00      	cmp	r3, #0
    fc1c:	d002      	beq.n	fc24 <_usb_d_dev_ep_init+0x104>
    fc1e:	693b      	ldr	r3, [r7, #16]
    fc20:	685b      	ldr	r3, [r3, #4]
    fc22:	e001      	b.n	fc28 <_usb_d_dev_ep_init+0x108>
    fc24:	693b      	ldr	r3, [r7, #16]
    fc26:	681b      	ldr	r3, [r3, #0]
    fc28:	69ba      	ldr	r2, [r7, #24]
    fc2a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    fc2c:	69bb      	ldr	r3, [r7, #24]
    fc2e:	88ba      	ldrh	r2, [r7, #4]
    fc30:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    fc32:	7dfb      	ldrb	r3, [r7, #23]
    fc34:	3301      	adds	r3, #1
    fc36:	b2da      	uxtb	r2, r3
    fc38:	69bb      	ldr	r3, [r7, #24]
    fc3a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    fc3c:	69bb      	ldr	r3, [r7, #24]
    fc3e:	79fa      	ldrb	r2, [r7, #7]
    fc40:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    fc42:	2300      	movs	r3, #0
}
    fc44:	4618      	mov	r0, r3
    fc46:	3720      	adds	r7, #32
    fc48:	46bd      	mov	sp, r7
    fc4a:	bd80      	pop	{r7, pc}
    fc4c:	0000eb51 	.word	0x0000eb51
    fc50:	000204cc 	.word	0x000204cc

0000fc54 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    fc54:	b580      	push	{r7, lr}
    fc56:	b086      	sub	sp, #24
    fc58:	af00      	add	r7, sp, #0
    fc5a:	4603      	mov	r3, r0
    fc5c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    fc5e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    fc62:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    fc64:	79fb      	ldrb	r3, [r7, #7]
    fc66:	f003 030f 	and.w	r3, r3, #15
    fc6a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    fc6c:	79fb      	ldrb	r3, [r7, #7]
    fc6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fc72:	2b00      	cmp	r3, #0
    fc74:	bf14      	ite	ne
    fc76:	2301      	movne	r3, #1
    fc78:	2300      	moveq	r3, #0
    fc7a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    fc7c:	7cba      	ldrb	r2, [r7, #18]
    fc7e:	7cfb      	ldrb	r3, [r7, #19]
    fc80:	4611      	mov	r1, r2
    fc82:	4618      	mov	r0, r3
    fc84:	4b2a      	ldr	r3, [pc, #168]	; (fd30 <_usb_d_dev_ep_deinit+0xdc>)
    fc86:	4798      	blx	r3
    fc88:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    fc8a:	7cfb      	ldrb	r3, [r7, #19]
    fc8c:	2b04      	cmp	r3, #4
    fc8e:	d84a      	bhi.n	fd26 <_usb_d_dev_ep_deinit+0xd2>
    fc90:	68fb      	ldr	r3, [r7, #12]
    fc92:	7c9b      	ldrb	r3, [r3, #18]
    fc94:	2bff      	cmp	r3, #255	; 0xff
    fc96:	d046      	beq.n	fd26 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    fc98:	7cbb      	ldrb	r3, [r7, #18]
    fc9a:	2203      	movs	r2, #3
    fc9c:	4619      	mov	r1, r3
    fc9e:	68f8      	ldr	r0, [r7, #12]
    fca0:	4b24      	ldr	r3, [pc, #144]	; (fd34 <_usb_d_dev_ep_deinit+0xe0>)
    fca2:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    fca4:	68fb      	ldr	r3, [r7, #12]
    fca6:	7cdb      	ldrb	r3, [r3, #19]
    fca8:	f003 0307 	and.w	r3, r3, #7
    fcac:	b2db      	uxtb	r3, r3
    fcae:	2b01      	cmp	r3, #1
    fcb0:	d107      	bne.n	fcc2 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    fcb2:	79fb      	ldrb	r3, [r7, #7]
    fcb4:	697a      	ldr	r2, [r7, #20]
    fcb6:	3308      	adds	r3, #8
    fcb8:	015b      	lsls	r3, r3, #5
    fcba:	4413      	add	r3, r2
    fcbc:	2200      	movs	r2, #0
    fcbe:	701a      	strb	r2, [r3, #0]
    fcc0:	e02a      	b.n	fd18 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    fcc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    fcc6:	2b00      	cmp	r3, #0
    fcc8:	da15      	bge.n	fcf6 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    fcca:	79fb      	ldrb	r3, [r7, #7]
    fccc:	f003 030f 	and.w	r3, r3, #15
    fcd0:	79fa      	ldrb	r2, [r7, #7]
    fcd2:	f002 020f 	and.w	r2, r2, #15
    fcd6:	6979      	ldr	r1, [r7, #20]
    fcd8:	3208      	adds	r2, #8
    fcda:	0152      	lsls	r2, r2, #5
    fcdc:	440a      	add	r2, r1
    fcde:	7812      	ldrb	r2, [r2, #0]
    fce0:	b2d2      	uxtb	r2, r2
    fce2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    fce6:	b2d1      	uxtb	r1, r2
    fce8:	697a      	ldr	r2, [r7, #20]
    fcea:	3308      	adds	r3, #8
    fcec:	015b      	lsls	r3, r3, #5
    fcee:	4413      	add	r3, r2
    fcf0:	460a      	mov	r2, r1
    fcf2:	701a      	strb	r2, [r3, #0]
    fcf4:	e010      	b.n	fd18 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    fcf6:	79fb      	ldrb	r3, [r7, #7]
    fcf8:	79fa      	ldrb	r2, [r7, #7]
    fcfa:	6979      	ldr	r1, [r7, #20]
    fcfc:	3208      	adds	r2, #8
    fcfe:	0152      	lsls	r2, r2, #5
    fd00:	440a      	add	r2, r1
    fd02:	7812      	ldrb	r2, [r2, #0]
    fd04:	b2d2      	uxtb	r2, r2
    fd06:	f022 0207 	bic.w	r2, r2, #7
    fd0a:	b2d1      	uxtb	r1, r2
    fd0c:	697a      	ldr	r2, [r7, #20]
    fd0e:	3308      	adds	r3, #8
    fd10:	015b      	lsls	r3, r3, #5
    fd12:	4413      	add	r3, r2
    fd14:	460a      	mov	r2, r1
    fd16:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    fd18:	68fb      	ldr	r3, [r7, #12]
    fd1a:	2200      	movs	r2, #0
    fd1c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    fd1e:	68fb      	ldr	r3, [r7, #12]
    fd20:	22ff      	movs	r2, #255	; 0xff
    fd22:	749a      	strb	r2, [r3, #18]
    fd24:	e000      	b.n	fd28 <_usb_d_dev_ep_deinit+0xd4>
		return;
    fd26:	bf00      	nop
}
    fd28:	3718      	adds	r7, #24
    fd2a:	46bd      	mov	sp, r7
    fd2c:	bd80      	pop	{r7, pc}
    fd2e:	bf00      	nop
    fd30:	0000eb51 	.word	0x0000eb51
    fd34:	00010189 	.word	0x00010189

0000fd38 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    fd38:	b5b0      	push	{r4, r5, r7, lr}
    fd3a:	b088      	sub	sp, #32
    fd3c:	af00      	add	r7, sp, #0
    fd3e:	4603      	mov	r3, r0
    fd40:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    fd42:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    fd46:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    fd48:	79fb      	ldrb	r3, [r7, #7]
    fd4a:	f003 030f 	and.w	r3, r3, #15
    fd4e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    fd50:	79fb      	ldrb	r3, [r7, #7]
    fd52:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fd56:	2b00      	cmp	r3, #0
    fd58:	bf14      	ite	ne
    fd5a:	2301      	movne	r3, #1
    fd5c:	2300      	moveq	r3, #0
    fd5e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    fd60:	7eba      	ldrb	r2, [r7, #26]
    fd62:	7efb      	ldrb	r3, [r7, #27]
    fd64:	4611      	mov	r1, r2
    fd66:	4618      	mov	r0, r3
    fd68:	4b70      	ldr	r3, [pc, #448]	; (ff2c <_usb_d_dev_ep_enable+0x1f4>)
    fd6a:	4798      	blx	r3
    fd6c:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    fd6e:	7efb      	ldrb	r3, [r7, #27]
    fd70:	4619      	mov	r1, r3
    fd72:	69f8      	ldr	r0, [r7, #28]
    fd74:	4b6e      	ldr	r3, [pc, #440]	; (ff30 <_usb_d_dev_ep_enable+0x1f8>)
    fd76:	4798      	blx	r3
    fd78:	4603      	mov	r3, r0
    fd7a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    fd7c:	7efb      	ldrb	r3, [r7, #27]
    fd7e:	2b04      	cmp	r3, #4
    fd80:	d803      	bhi.n	fd8a <_usb_d_dev_ep_enable+0x52>
    fd82:	697b      	ldr	r3, [r7, #20]
    fd84:	7c9b      	ldrb	r3, [r3, #18]
    fd86:	2bff      	cmp	r3, #255	; 0xff
    fd88:	d102      	bne.n	fd90 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    fd8a:	f06f 0311 	mvn.w	r3, #17
    fd8e:	e0c8      	b.n	ff22 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    fd90:	7efb      	ldrb	r3, [r7, #27]
    fd92:	015b      	lsls	r3, r3, #5
    fd94:	4a67      	ldr	r2, [pc, #412]	; (ff34 <_usb_d_dev_ep_enable+0x1fc>)
    fd96:	4413      	add	r3, r2
    fd98:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    fd9a:	697b      	ldr	r3, [r7, #20]
    fd9c:	7cdb      	ldrb	r3, [r3, #19]
    fd9e:	f003 0307 	and.w	r3, r3, #7
    fda2:	b2db      	uxtb	r3, r3
    fda4:	2b01      	cmp	r3, #1
    fda6:	d14b      	bne.n	fe40 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    fda8:	7cfb      	ldrb	r3, [r7, #19]
    fdaa:	f003 0377 	and.w	r3, r3, #119	; 0x77
    fdae:	2b00      	cmp	r3, #0
    fdb0:	d002      	beq.n	fdb8 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    fdb2:	f06f 0313 	mvn.w	r3, #19
    fdb6:	e0b4      	b.n	ff22 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    fdb8:	7efb      	ldrb	r3, [r7, #27]
    fdba:	2211      	movs	r2, #17
    fdbc:	4619      	mov	r1, r3
    fdbe:	69f8      	ldr	r0, [r7, #28]
    fdc0:	4b5d      	ldr	r3, [pc, #372]	; (ff38 <_usb_d_dev_ep_enable+0x200>)
    fdc2:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    fdc4:	697b      	ldr	r3, [r7, #20]
    fdc6:	8a1b      	ldrh	r3, [r3, #16]
    fdc8:	039b      	lsls	r3, r3, #14
    fdca:	4c5c      	ldr	r4, [pc, #368]	; (ff3c <_usb_d_dev_ep_enable+0x204>)
    fdcc:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    fdce:	697b      	ldr	r3, [r7, #20]
    fdd0:	8a1b      	ldrh	r3, [r3, #16]
    fdd2:	4618      	mov	r0, r3
    fdd4:	4b5a      	ldr	r3, [pc, #360]	; (ff40 <_usb_d_dev_ep_enable+0x208>)
    fdd6:	4798      	blx	r3
    fdd8:	4603      	mov	r3, r0
    fdda:	071b      	lsls	r3, r3, #28
    fddc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    fde0:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    fde4:	68fb      	ldr	r3, [r7, #12]
    fde6:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    fde8:	68fb      	ldr	r3, [r7, #12]
    fdea:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    fdee:	697b      	ldr	r3, [r7, #20]
    fdf0:	8a1b      	ldrh	r3, [r3, #16]
    fdf2:	f3c3 050d 	ubfx	r5, r3, #0, #14
    fdf6:	697b      	ldr	r3, [r7, #20]
    fdf8:	8a1b      	ldrh	r3, [r3, #16]
    fdfa:	4618      	mov	r0, r3
    fdfc:	4b50      	ldr	r3, [pc, #320]	; (ff40 <_usb_d_dev_ep_enable+0x208>)
    fdfe:	4798      	blx	r3
    fe00:	4603      	mov	r3, r0
    fe02:	071b      	lsls	r3, r3, #28
    fe04:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    fe08:	432b      	orrs	r3, r5
    fe0a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    fe0c:	7efb      	ldrb	r3, [r7, #27]
    fe0e:	2200      	movs	r2, #0
    fe10:	2100      	movs	r1, #0
    fe12:	4618      	mov	r0, r3
    fe14:	4b4b      	ldr	r3, [pc, #300]	; (ff44 <_usb_d_dev_ep_enable+0x20c>)
    fe16:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    fe18:	7efb      	ldrb	r3, [r7, #27]
    fe1a:	2200      	movs	r2, #0
    fe1c:	2101      	movs	r1, #1
    fe1e:	4618      	mov	r0, r3
    fe20:	4b49      	ldr	r3, [pc, #292]	; (ff48 <_usb_d_dev_ep_enable+0x210>)
    fe22:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    fe24:	7efb      	ldrb	r3, [r7, #27]
    fe26:	2100      	movs	r1, #0
    fe28:	4618      	mov	r0, r3
    fe2a:	4b48      	ldr	r3, [pc, #288]	; (ff4c <_usb_d_dev_ep_enable+0x214>)
    fe2c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    fe2e:	7efb      	ldrb	r3, [r7, #27]
    fe30:	2101      	movs	r1, #1
    fe32:	4618      	mov	r0, r3
    fe34:	4b45      	ldr	r3, [pc, #276]	; (ff4c <_usb_d_dev_ep_enable+0x214>)
    fe36:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    fe38:	6978      	ldr	r0, [r7, #20]
    fe3a:	4b45      	ldr	r3, [pc, #276]	; (ff50 <_usb_d_dev_ep_enable+0x218>)
    fe3c:	4798      	blx	r3
    fe3e:	e06f      	b.n	ff20 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    fe40:	7ebb      	ldrb	r3, [r7, #26]
    fe42:	2b00      	cmp	r3, #0
    fe44:	d038      	beq.n	feb8 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    fe46:	7cfb      	ldrb	r3, [r7, #19]
    fe48:	f003 0370 	and.w	r3, r3, #112	; 0x70
    fe4c:	2b00      	cmp	r3, #0
    fe4e:	d002      	beq.n	fe56 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    fe50:	f06f 0313 	mvn.w	r3, #19
    fe54:	e065      	b.n	ff22 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    fe56:	697b      	ldr	r3, [r7, #20]
    fe58:	7cdb      	ldrb	r3, [r3, #19]
    fe5a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fe5e:	b2db      	uxtb	r3, r3
    fe60:	011b      	lsls	r3, r3, #4
    fe62:	b2db      	uxtb	r3, r3
    fe64:	f003 0370 	and.w	r3, r3, #112	; 0x70
    fe68:	b2da      	uxtb	r2, r3
    fe6a:	7cfb      	ldrb	r3, [r7, #19]
    fe6c:	4313      	orrs	r3, r2
    fe6e:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    fe70:	7cfa      	ldrb	r2, [r7, #19]
    fe72:	7efb      	ldrb	r3, [r7, #27]
    fe74:	4619      	mov	r1, r3
    fe76:	69f8      	ldr	r0, [r7, #28]
    fe78:	4b2f      	ldr	r3, [pc, #188]	; (ff38 <_usb_d_dev_ep_enable+0x200>)
    fe7a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    fe7c:	68fb      	ldr	r3, [r7, #12]
    fe7e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    fe82:	697b      	ldr	r3, [r7, #20]
    fe84:	8a1b      	ldrh	r3, [r3, #16]
    fe86:	f3c3 050d 	ubfx	r5, r3, #0, #14
    fe8a:	697b      	ldr	r3, [r7, #20]
    fe8c:	8a1b      	ldrh	r3, [r3, #16]
    fe8e:	4618      	mov	r0, r3
    fe90:	4b2b      	ldr	r3, [pc, #172]	; (ff40 <_usb_d_dev_ep_enable+0x208>)
    fe92:	4798      	blx	r3
    fe94:	4603      	mov	r3, r0
    fe96:	071b      	lsls	r3, r3, #28
    fe98:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    fe9c:	432b      	orrs	r3, r5
    fe9e:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    fea0:	7efb      	ldrb	r3, [r7, #27]
    fea2:	2200      	movs	r2, #0
    fea4:	2101      	movs	r1, #1
    fea6:	4618      	mov	r0, r3
    fea8:	4b27      	ldr	r3, [pc, #156]	; (ff48 <_usb_d_dev_ep_enable+0x210>)
    feaa:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    feac:	7efb      	ldrb	r3, [r7, #27]
    feae:	2101      	movs	r1, #1
    feb0:	4618      	mov	r0, r3
    feb2:	4b26      	ldr	r3, [pc, #152]	; (ff4c <_usb_d_dev_ep_enable+0x214>)
    feb4:	4798      	blx	r3
    feb6:	e033      	b.n	ff20 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    feb8:	7cfb      	ldrb	r3, [r7, #19]
    feba:	f003 0307 	and.w	r3, r3, #7
    febe:	2b00      	cmp	r3, #0
    fec0:	d002      	beq.n	fec8 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    fec2:	f06f 0313 	mvn.w	r3, #19
    fec6:	e02c      	b.n	ff22 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    fec8:	697b      	ldr	r3, [r7, #20]
    feca:	7cdb      	ldrb	r3, [r3, #19]
    fecc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fed0:	b2db      	uxtb	r3, r3
    fed2:	461a      	mov	r2, r3
    fed4:	7cfb      	ldrb	r3, [r7, #19]
    fed6:	4313      	orrs	r3, r2
    fed8:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    feda:	7cfa      	ldrb	r2, [r7, #19]
    fedc:	7efb      	ldrb	r3, [r7, #27]
    fede:	4619      	mov	r1, r3
    fee0:	69f8      	ldr	r0, [r7, #28]
    fee2:	4b15      	ldr	r3, [pc, #84]	; (ff38 <_usb_d_dev_ep_enable+0x200>)
    fee4:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    fee6:	697b      	ldr	r3, [r7, #20]
    fee8:	8a1b      	ldrh	r3, [r3, #16]
    feea:	039b      	lsls	r3, r3, #14
    feec:	4c13      	ldr	r4, [pc, #76]	; (ff3c <_usb_d_dev_ep_enable+0x204>)
    feee:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    fef0:	697b      	ldr	r3, [r7, #20]
    fef2:	8a1b      	ldrh	r3, [r3, #16]
    fef4:	4618      	mov	r0, r3
    fef6:	4b12      	ldr	r3, [pc, #72]	; (ff40 <_usb_d_dev_ep_enable+0x208>)
    fef8:	4798      	blx	r3
    fefa:	4603      	mov	r3, r0
    fefc:	071b      	lsls	r3, r3, #28
    fefe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ff02:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ff06:	68fb      	ldr	r3, [r7, #12]
    ff08:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ff0a:	7efb      	ldrb	r3, [r7, #27]
    ff0c:	2200      	movs	r2, #0
    ff0e:	2100      	movs	r1, #0
    ff10:	4618      	mov	r0, r3
    ff12:	4b0c      	ldr	r3, [pc, #48]	; (ff44 <_usb_d_dev_ep_enable+0x20c>)
    ff14:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    ff16:	7efb      	ldrb	r3, [r7, #27]
    ff18:	2100      	movs	r1, #0
    ff1a:	4618      	mov	r0, r3
    ff1c:	4b0b      	ldr	r3, [pc, #44]	; (ff4c <_usb_d_dev_ep_enable+0x214>)
    ff1e:	4798      	blx	r3
	}

	return USB_OK;
    ff20:	2300      	movs	r3, #0
}
    ff22:	4618      	mov	r0, r3
    ff24:	3720      	adds	r7, #32
    ff26:	46bd      	mov	sp, r7
    ff28:	bdb0      	pop	{r4, r5, r7, pc}
    ff2a:	bf00      	nop
    ff2c:	0000eb51 	.word	0x0000eb51
    ff30:	0000e1d7 	.word	0x0000e1d7
    ff34:	20008df0 	.word	0x20008df0
    ff38:	0000e1ad 	.word	0x0000e1ad
    ff3c:	0fffc000 	.word	0x0fffc000
    ff40:	0000eaed 	.word	0x0000eaed
    ff44:	0000ea95 	.word	0x0000ea95
    ff48:	0000ea3d 	.word	0x0000ea3d
    ff4c:	0000ea05 	.word	0x0000ea05
    ff50:	0000faa9 	.word	0x0000faa9

0000ff54 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    ff54:	b580      	push	{r7, lr}
    ff56:	b084      	sub	sp, #16
    ff58:	af00      	add	r7, sp, #0
    ff5a:	6078      	str	r0, [r7, #4]
    ff5c:	460b      	mov	r3, r1
    ff5e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ff60:	687b      	ldr	r3, [r7, #4]
    ff62:	7c9b      	ldrb	r3, [r3, #18]
    ff64:	f003 030f 	and.w	r3, r3, #15
    ff68:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    ff6a:	78fa      	ldrb	r2, [r7, #3]
    ff6c:	7bfb      	ldrb	r3, [r7, #15]
    ff6e:	4611      	mov	r1, r2
    ff70:	4618      	mov	r0, r3
    ff72:	4b03      	ldr	r3, [pc, #12]	; (ff80 <_usb_d_dev_ep_stall_get+0x2c>)
    ff74:	4798      	blx	r3
    ff76:	4603      	mov	r3, r0
}
    ff78:	4618      	mov	r0, r3
    ff7a:	3710      	adds	r7, #16
    ff7c:	46bd      	mov	sp, r7
    ff7e:	bd80      	pop	{r7, pc}
    ff80:	0000e645 	.word	0x0000e645

0000ff84 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    ff84:	b580      	push	{r7, lr}
    ff86:	b084      	sub	sp, #16
    ff88:	af00      	add	r7, sp, #0
    ff8a:	6078      	str	r0, [r7, #4]
    ff8c:	460b      	mov	r3, r1
    ff8e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ff90:	687b      	ldr	r3, [r7, #4]
    ff92:	7c9b      	ldrb	r3, [r3, #18]
    ff94:	f003 030f 	and.w	r3, r3, #15
    ff98:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    ff9a:	78f9      	ldrb	r1, [r7, #3]
    ff9c:	7bfb      	ldrb	r3, [r7, #15]
    ff9e:	2201      	movs	r2, #1
    ffa0:	4618      	mov	r0, r3
    ffa2:	4b0a      	ldr	r3, [pc, #40]	; (ffcc <_usb_d_dev_ep_stall_set+0x48>)
    ffa4:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    ffa6:	78fb      	ldrb	r3, [r7, #3]
    ffa8:	2220      	movs	r2, #32
    ffaa:	409a      	lsls	r2, r3
    ffac:	7bfb      	ldrb	r3, [r7, #15]
    ffae:	4611      	mov	r1, r2
    ffb0:	4618      	mov	r0, r3
    ffb2:	4b07      	ldr	r3, [pc, #28]	; (ffd0 <_usb_d_dev_ep_stall_set+0x4c>)
    ffb4:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    ffb6:	687a      	ldr	r2, [r7, #4]
    ffb8:	7cd3      	ldrb	r3, [r2, #19]
    ffba:	f043 0308 	orr.w	r3, r3, #8
    ffbe:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    ffc0:	2300      	movs	r3, #0
}
    ffc2:	4618      	mov	r0, r3
    ffc4:	3710      	adds	r7, #16
    ffc6:	46bd      	mov	sp, r7
    ffc8:	bd80      	pop	{r7, pc}
    ffca:	bf00      	nop
    ffcc:	0000e5ed 	.word	0x0000e5ed
    ffd0:	0000e56d 	.word	0x0000e56d

0000ffd4 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    ffd4:	b580      	push	{r7, lr}
    ffd6:	b084      	sub	sp, #16
    ffd8:	af00      	add	r7, sp, #0
    ffda:	6078      	str	r0, [r7, #4]
    ffdc:	460b      	mov	r3, r1
    ffde:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    ffe0:	687b      	ldr	r3, [r7, #4]
    ffe2:	7c9b      	ldrb	r3, [r3, #18]
    ffe4:	f003 030f 	and.w	r3, r3, #15
    ffe8:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    ffea:	78fa      	ldrb	r2, [r7, #3]
    ffec:	7bfb      	ldrb	r3, [r7, #15]
    ffee:	4611      	mov	r1, r2
    fff0:	4618      	mov	r0, r3
    fff2:	4b28      	ldr	r3, [pc, #160]	; (10094 <STACK_SIZE+0x94>)
    fff4:	4798      	blx	r3
    fff6:	4603      	mov	r3, r0
    fff8:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    fffa:	7bbb      	ldrb	r3, [r7, #14]
    fffc:	f083 0301 	eor.w	r3, r3, #1
   10000:	b2db      	uxtb	r3, r3
   10002:	2b00      	cmp	r3, #0
   10004:	d001      	beq.n	1000a <STACK_SIZE+0xa>
		return ERR_NONE;
   10006:	2300      	movs	r3, #0
   10008:	e040      	b.n	1008c <STACK_SIZE+0x8c>
	}
	_usbd_ep_set_stall(epn, dir, false);
   1000a:	78f9      	ldrb	r1, [r7, #3]
   1000c:	7bfb      	ldrb	r3, [r7, #15]
   1000e:	2200      	movs	r2, #0
   10010:	4618      	mov	r0, r3
   10012:	4b21      	ldr	r3, [pc, #132]	; (10098 <STACK_SIZE+0x98>)
   10014:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   10016:	78fb      	ldrb	r3, [r7, #3]
   10018:	2220      	movs	r2, #32
   1001a:	409a      	lsls	r2, r3
   1001c:	7bfb      	ldrb	r3, [r7, #15]
   1001e:	4611      	mov	r1, r2
   10020:	4618      	mov	r0, r3
   10022:	4b1e      	ldr	r3, [pc, #120]	; (1009c <STACK_SIZE+0x9c>)
   10024:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   10026:	78fa      	ldrb	r2, [r7, #3]
   10028:	7bfb      	ldrb	r3, [r7, #15]
   1002a:	4611      	mov	r1, r2
   1002c:	4618      	mov	r0, r3
   1002e:	4b1c      	ldr	r3, [pc, #112]	; (100a0 <STACK_SIZE+0xa0>)
   10030:	4798      	blx	r3
   10032:	4603      	mov	r3, r0
   10034:	2b00      	cmp	r3, #0
   10036:	d00b      	beq.n	10050 <STACK_SIZE+0x50>
		_usbd_ep_ack_stall(epn, dir);
   10038:	78fa      	ldrb	r2, [r7, #3]
   1003a:	7bfb      	ldrb	r3, [r7, #15]
   1003c:	4611      	mov	r1, r2
   1003e:	4618      	mov	r0, r3
   10040:	4b18      	ldr	r3, [pc, #96]	; (100a4 <STACK_SIZE+0xa4>)
   10042:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
   10044:	78f9      	ldrb	r1, [r7, #3]
   10046:	7bfb      	ldrb	r3, [r7, #15]
   10048:	2200      	movs	r2, #0
   1004a:	4618      	mov	r0, r3
   1004c:	4b16      	ldr	r3, [pc, #88]	; (100a8 <STACK_SIZE+0xa8>)
   1004e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   10050:	687b      	ldr	r3, [r7, #4]
   10052:	7cdb      	ldrb	r3, [r3, #19]
   10054:	f003 0307 	and.w	r3, r3, #7
   10058:	b2db      	uxtb	r3, r3
   1005a:	2b01      	cmp	r3, #1
   1005c:	d110      	bne.n	10080 <STACK_SIZE+0x80>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   1005e:	7bfb      	ldrb	r3, [r7, #15]
   10060:	4619      	mov	r1, r3
   10062:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
   10066:	4b11      	ldr	r3, [pc, #68]	; (100ac <STACK_SIZE+0xac>)
   10068:	4798      	blx	r3
   1006a:	4603      	mov	r3, r0
   1006c:	f003 0330 	and.w	r3, r3, #48	; 0x30
   10070:	2b00      	cmp	r3, #0
   10072:	d10a      	bne.n	1008a <STACK_SIZE+0x8a>
			ept->flags.bits.is_stalled = 0;
   10074:	687a      	ldr	r2, [r7, #4]
   10076:	7cd3      	ldrb	r3, [r2, #19]
   10078:	f36f 03c3 	bfc	r3, #3, #1
   1007c:	74d3      	strb	r3, [r2, #19]
   1007e:	e004      	b.n	1008a <STACK_SIZE+0x8a>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
   10080:	687a      	ldr	r2, [r7, #4]
   10082:	7cd3      	ldrb	r3, [r2, #19]
   10084:	f36f 03c3 	bfc	r3, #3, #1
   10088:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
   1008a:	2300      	movs	r3, #0
}
   1008c:	4618      	mov	r0, r3
   1008e:	3710      	adds	r7, #16
   10090:	46bd      	mov	sp, r7
   10092:	bd80      	pop	{r7, pc}
   10094:	0000e645 	.word	0x0000e645
   10098:	0000e5ed 	.word	0x0000e5ed
   1009c:	0000e595 	.word	0x0000e595
   100a0:	0000e689 	.word	0x0000e689
   100a4:	0000e6cd 	.word	0x0000e6cd
   100a8:	0000e7b9 	.word	0x0000e7b9
   100ac:	0000e075 	.word	0x0000e075

000100b0 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
   100b0:	b580      	push	{r7, lr}
   100b2:	b086      	sub	sp, #24
   100b4:	af00      	add	r7, sp, #0
   100b6:	4603      	mov	r3, r0
   100b8:	460a      	mov	r2, r1
   100ba:	71fb      	strb	r3, [r7, #7]
   100bc:	4613      	mov	r3, r2
   100be:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
   100c0:	79fb      	ldrb	r3, [r7, #7]
   100c2:	f003 030f 	and.w	r3, r3, #15
   100c6:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
   100c8:	79fb      	ldrb	r3, [r7, #7]
   100ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
   100ce:	2b00      	cmp	r3, #0
   100d0:	bf14      	ite	ne
   100d2:	2301      	movne	r3, #1
   100d4:	2300      	moveq	r3, #0
   100d6:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
   100d8:	7cba      	ldrb	r2, [r7, #18]
   100da:	7cfb      	ldrb	r3, [r7, #19]
   100dc:	4611      	mov	r1, r2
   100de:	4618      	mov	r0, r3
   100e0:	4b13      	ldr	r3, [pc, #76]	; (10130 <_usb_d_dev_ep_stall+0x80>)
   100e2:	4798      	blx	r3
   100e4:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
   100e6:	7cfb      	ldrb	r3, [r7, #19]
   100e8:	2b04      	cmp	r3, #4
   100ea:	d902      	bls.n	100f2 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
   100ec:	f06f 0311 	mvn.w	r3, #17
   100f0:	e01a      	b.n	10128 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
   100f2:	79bb      	ldrb	r3, [r7, #6]
   100f4:	2b01      	cmp	r3, #1
   100f6:	d106      	bne.n	10106 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   100f8:	7cbb      	ldrb	r3, [r7, #18]
   100fa:	4619      	mov	r1, r3
   100fc:	68f8      	ldr	r0, [r7, #12]
   100fe:	4b0d      	ldr	r3, [pc, #52]	; (10134 <_usb_d_dev_ep_stall+0x84>)
   10100:	4798      	blx	r3
   10102:	6178      	str	r0, [r7, #20]
   10104:	e00f      	b.n	10126 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
   10106:	79bb      	ldrb	r3, [r7, #6]
   10108:	2b00      	cmp	r3, #0
   1010a:	d106      	bne.n	1011a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   1010c:	7cbb      	ldrb	r3, [r7, #18]
   1010e:	4619      	mov	r1, r3
   10110:	68f8      	ldr	r0, [r7, #12]
   10112:	4b09      	ldr	r3, [pc, #36]	; (10138 <_usb_d_dev_ep_stall+0x88>)
   10114:	4798      	blx	r3
   10116:	6178      	str	r0, [r7, #20]
   10118:	e005      	b.n	10126 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
   1011a:	7cbb      	ldrb	r3, [r7, #18]
   1011c:	4619      	mov	r1, r3
   1011e:	68f8      	ldr	r0, [r7, #12]
   10120:	4b06      	ldr	r3, [pc, #24]	; (1013c <_usb_d_dev_ep_stall+0x8c>)
   10122:	4798      	blx	r3
   10124:	6178      	str	r0, [r7, #20]
	}
	return rc;
   10126:	697b      	ldr	r3, [r7, #20]
}
   10128:	4618      	mov	r0, r3
   1012a:	3718      	adds	r7, #24
   1012c:	46bd      	mov	sp, r7
   1012e:	bd80      	pop	{r7, pc}
   10130:	0000eb51 	.word	0x0000eb51
   10134:	0000ff85 	.word	0x0000ff85
   10138:	0000ffd5 	.word	0x0000ffd5
   1013c:	0000ff55 	.word	0x0000ff55

00010140 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
   10140:	b580      	push	{r7, lr}
   10142:	b082      	sub	sp, #8
   10144:	af00      	add	r7, sp, #0
   10146:	6078      	str	r0, [r7, #4]
   10148:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1014a:	687b      	ldr	r3, [r7, #4]
   1014c:	7c9b      	ldrb	r3, [r3, #18]
   1014e:	2bff      	cmp	r3, #255	; 0xff
   10150:	d014      	beq.n	1017c <_usb_d_dev_trans_done+0x3c>
   10152:	687b      	ldr	r3, [r7, #4]
   10154:	7cdb      	ldrb	r3, [r3, #19]
   10156:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1015a:	b2db      	uxtb	r3, r3
   1015c:	2b00      	cmp	r3, #0
   1015e:	d00d      	beq.n	1017c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
   10160:	687a      	ldr	r2, [r7, #4]
   10162:	7cd3      	ldrb	r3, [r2, #19]
   10164:	f36f 1386 	bfc	r3, #6, #1
   10168:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1016a:	4b06      	ldr	r3, [pc, #24]	; (10184 <_usb_d_dev_trans_done+0x44>)
   1016c:	691b      	ldr	r3, [r3, #16]
   1016e:	687a      	ldr	r2, [r7, #4]
   10170:	7c90      	ldrb	r0, [r2, #18]
   10172:	687a      	ldr	r2, [r7, #4]
   10174:	6892      	ldr	r2, [r2, #8]
   10176:	6839      	ldr	r1, [r7, #0]
   10178:	4798      	blx	r3
   1017a:	e000      	b.n	1017e <_usb_d_dev_trans_done+0x3e>
		return;
   1017c:	bf00      	nop
}
   1017e:	3708      	adds	r7, #8
   10180:	46bd      	mov	sp, r7
   10182:	bd80      	pop	{r7, pc}
   10184:	20008d28 	.word	0x20008d28

00010188 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
   10188:	b580      	push	{r7, lr}
   1018a:	b086      	sub	sp, #24
   1018c:	af00      	add	r7, sp, #0
   1018e:	60f8      	str	r0, [r7, #12]
   10190:	460b      	mov	r3, r1
   10192:	607a      	str	r2, [r7, #4]
   10194:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   10196:	68fb      	ldr	r3, [r7, #12]
   10198:	7c9b      	ldrb	r3, [r3, #18]
   1019a:	f003 030f 	and.w	r3, r3, #15
   1019e:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   101a0:	4b1f      	ldr	r3, [pc, #124]	; (10220 <_usb_d_dev_trans_stop+0x98>)
   101a2:	881b      	ldrh	r3, [r3, #0]
   101a4:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   101a6:	68fb      	ldr	r3, [r7, #12]
   101a8:	7c9b      	ldrb	r3, [r3, #18]
   101aa:	2bff      	cmp	r3, #255	; 0xff
   101ac:	d033      	beq.n	10216 <_usb_d_dev_trans_stop+0x8e>
   101ae:	68fb      	ldr	r3, [r7, #12]
   101b0:	7cdb      	ldrb	r3, [r3, #19]
   101b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   101b6:	b2db      	uxtb	r3, r3
   101b8:	2b00      	cmp	r3, #0
   101ba:	d02c      	beq.n	10216 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
   101bc:	7afb      	ldrb	r3, [r7, #11]
   101be:	2b00      	cmp	r3, #0
   101c0:	d006      	beq.n	101d0 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
   101c2:	7dfb      	ldrb	r3, [r7, #23]
   101c4:	2200      	movs	r2, #0
   101c6:	2101      	movs	r1, #1
   101c8:	4618      	mov	r0, r3
   101ca:	4b16      	ldr	r3, [pc, #88]	; (10224 <_usb_d_dev_trans_stop+0x9c>)
   101cc:	4798      	blx	r3
   101ce:	e005      	b.n	101dc <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
   101d0:	7dfb      	ldrb	r3, [r7, #23]
   101d2:	2200      	movs	r2, #0
   101d4:	2100      	movs	r1, #0
   101d6:	4618      	mov	r0, r3
   101d8:	4b13      	ldr	r3, [pc, #76]	; (10228 <_usb_d_dev_trans_stop+0xa0>)
   101da:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   101dc:	7afb      	ldrb	r3, [r7, #11]
   101de:	f107 0218 	add.w	r2, r7, #24
   101e2:	4413      	add	r3, r2
   101e4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
   101e8:	461a      	mov	r2, r3
   101ea:	7dfb      	ldrb	r3, [r7, #23]
   101ec:	4611      	mov	r1, r2
   101ee:	4618      	mov	r0, r3
   101f0:	4b0e      	ldr	r3, [pc, #56]	; (1022c <_usb_d_dev_trans_stop+0xa4>)
   101f2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
   101f4:	7afb      	ldrb	r3, [r7, #11]
   101f6:	f107 0218 	add.w	r2, r7, #24
   101fa:	4413      	add	r3, r2
   101fc:	f813 3c04 	ldrb.w	r3, [r3, #-4]
   10200:	461a      	mov	r2, r3
   10202:	7dfb      	ldrb	r3, [r7, #23]
   10204:	4611      	mov	r1, r2
   10206:	4618      	mov	r0, r3
   10208:	4b09      	ldr	r3, [pc, #36]	; (10230 <_usb_d_dev_trans_stop+0xa8>)
   1020a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
   1020c:	6879      	ldr	r1, [r7, #4]
   1020e:	68f8      	ldr	r0, [r7, #12]
   10210:	4b08      	ldr	r3, [pc, #32]	; (10234 <_usb_d_dev_trans_stop+0xac>)
   10212:	4798      	blx	r3
   10214:	e000      	b.n	10218 <_usb_d_dev_trans_stop+0x90>
		return;
   10216:	bf00      	nop
}
   10218:	3718      	adds	r7, #24
   1021a:	46bd      	mov	sp, r7
   1021c:	bd80      	pop	{r7, pc}
   1021e:	bf00      	nop
   10220:	0002050c 	.word	0x0002050c
   10224:	0000ea3d 	.word	0x0000ea3d
   10228:	0000ea95 	.word	0x0000ea95
   1022c:	0000e545 	.word	0x0000e545
   10230:	0000e595 	.word	0x0000e595
   10234:	00010141 	.word	0x00010141

00010238 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   10238:	b580      	push	{r7, lr}
   1023a:	b086      	sub	sp, #24
   1023c:	af00      	add	r7, sp, #0
   1023e:	4603      	mov	r3, r0
   10240:	6039      	str	r1, [r7, #0]
   10242:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
   10244:	79fb      	ldrb	r3, [r7, #7]
   10246:	f003 030f 	and.w	r3, r3, #15
   1024a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   1024c:	7dfb      	ldrb	r3, [r7, #23]
   1024e:	015b      	lsls	r3, r3, #5
   10250:	4a1e      	ldr	r2, [pc, #120]	; (102cc <_usb_d_dev_ep_read_req+0x94>)
   10252:	4413      	add	r3, r2
   10254:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
   10256:	693b      	ldr	r3, [r7, #16]
   10258:	681b      	ldr	r3, [r3, #0]
   1025a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   1025c:	693b      	ldr	r3, [r7, #16]
   1025e:	685b      	ldr	r3, [r3, #4]
   10260:	f3c3 030d 	ubfx	r3, r3, #0, #14
   10264:	b29b      	uxth	r3, r3
   10266:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   10268:	7dfb      	ldrb	r3, [r7, #23]
   1026a:	2b04      	cmp	r3, #4
   1026c:	d802      	bhi.n	10274 <_usb_d_dev_ep_read_req+0x3c>
   1026e:	683b      	ldr	r3, [r7, #0]
   10270:	2b00      	cmp	r3, #0
   10272:	d102      	bne.n	1027a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
   10274:	f06f 0311 	mvn.w	r3, #17
   10278:	e023      	b.n	102c2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   1027a:	7dfb      	ldrb	r3, [r7, #23]
   1027c:	4618      	mov	r0, r3
   1027e:	4b14      	ldr	r3, [pc, #80]	; (102d0 <_usb_d_dev_ep_read_req+0x98>)
   10280:	4798      	blx	r3
   10282:	4603      	mov	r3, r0
   10284:	f083 0301 	eor.w	r3, r3, #1
   10288:	b2db      	uxtb	r3, r3
   1028a:	2b00      	cmp	r3, #0
   1028c:	d002      	beq.n	10294 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
   1028e:	f06f 0312 	mvn.w	r3, #18
   10292:	e016      	b.n	102c2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
   10294:	7dfb      	ldrb	r3, [r7, #23]
   10296:	4618      	mov	r0, r3
   10298:	4b0e      	ldr	r3, [pc, #56]	; (102d4 <_usb_d_dev_ep_read_req+0x9c>)
   1029a:	4798      	blx	r3
   1029c:	4603      	mov	r3, r0
   1029e:	f083 0301 	eor.w	r3, r3, #1
   102a2:	b2db      	uxtb	r3, r3
   102a4:	2b00      	cmp	r3, #0
   102a6:	d001      	beq.n	102ac <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
   102a8:	2300      	movs	r3, #0
   102aa:	e00a      	b.n	102c2 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
   102ac:	68fb      	ldr	r3, [r7, #12]
   102ae:	2208      	movs	r2, #8
   102b0:	4619      	mov	r1, r3
   102b2:	6838      	ldr	r0, [r7, #0]
   102b4:	4b08      	ldr	r3, [pc, #32]	; (102d8 <_usb_d_dev_ep_read_req+0xa0>)
   102b6:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
   102b8:	7dfb      	ldrb	r3, [r7, #23]
   102ba:	4618      	mov	r0, r3
   102bc:	4b07      	ldr	r3, [pc, #28]	; (102dc <_usb_d_dev_ep_read_req+0xa4>)
   102be:	4798      	blx	r3

	return bytes;
   102c0:	897b      	ldrh	r3, [r7, #10]
}
   102c2:	4618      	mov	r0, r3
   102c4:	3718      	adds	r7, #24
   102c6:	46bd      	mov	sp, r7
   102c8:	bd80      	pop	{r7, pc}
   102ca:	bf00      	nop
   102cc:	20008df0 	.word	0x20008df0
   102d0:	0000e5bd 	.word	0x0000e5bd
   102d4:	0000e769 	.word	0x0000e769
   102d8:	0001bc05 	.word	0x0001bc05
   102dc:	0000e799 	.word	0x0000e799

000102e0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   102e0:	b580      	push	{r7, lr}
   102e2:	b086      	sub	sp, #24
   102e4:	af00      	add	r7, sp, #0
   102e6:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   102e8:	687b      	ldr	r3, [r7, #4]
   102ea:	7a1b      	ldrb	r3, [r3, #8]
   102ec:	f003 030f 	and.w	r3, r3, #15
   102f0:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   102f2:	687b      	ldr	r3, [r7, #4]
   102f4:	7a1b      	ldrb	r3, [r3, #8]
   102f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
   102fa:	2b00      	cmp	r3, #0
   102fc:	bf14      	ite	ne
   102fe:	2301      	movne	r3, #1
   10300:	2300      	moveq	r3, #0
   10302:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
   10304:	7d7a      	ldrb	r2, [r7, #21]
   10306:	7dbb      	ldrb	r3, [r7, #22]
   10308:	4611      	mov	r1, r2
   1030a:	4618      	mov	r0, r3
   1030c:	4b5f      	ldr	r3, [pc, #380]	; (1048c <_usb_d_dev_ep_trans+0x1ac>)
   1030e:	4798      	blx	r3
   10310:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   10312:	693b      	ldr	r3, [r7, #16]
   10314:	8a1b      	ldrh	r3, [r3, #16]
   10316:	f240 32ff 	movw	r2, #1023	; 0x3ff
   1031a:	4293      	cmp	r3, r2
   1031c:	d004      	beq.n	10328 <_usb_d_dev_ep_trans+0x48>
   1031e:	693b      	ldr	r3, [r7, #16]
   10320:	8a1b      	ldrh	r3, [r3, #16]
   10322:	3b01      	subs	r3, #1
   10324:	b29b      	uxth	r3, r3
   10326:	e001      	b.n	1032c <_usb_d_dev_ep_trans+0x4c>
   10328:	f240 33ff 	movw	r3, #1023	; 0x3ff
   1032c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
   1032e:	687b      	ldr	r3, [r7, #4]
   10330:	685a      	ldr	r2, [r3, #4]
   10332:	89fb      	ldrh	r3, [r7, #14]
   10334:	4013      	ands	r3, r2
   10336:	2b00      	cmp	r3, #0
   10338:	bf14      	ite	ne
   1033a:	2301      	movne	r3, #1
   1033c:	2300      	moveq	r3, #0
   1033e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
   10340:	2300      	movs	r3, #0
   10342:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   10344:	7dbb      	ldrb	r3, [r7, #22]
   10346:	2b04      	cmp	r3, #4
   10348:	d902      	bls.n	10350 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
   1034a:	f06f 0311 	mvn.w	r3, #17
   1034e:	e098      	b.n	10482 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   10350:	687b      	ldr	r3, [r7, #4]
   10352:	681b      	ldr	r3, [r3, #0]
   10354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   10358:	d31a      	bcc.n	10390 <_usb_d_dev_ep_trans+0xb0>
   1035a:	687b      	ldr	r3, [r7, #4]
   1035c:	681b      	ldr	r3, [r3, #0]
   1035e:	461a      	mov	r2, r3
   10360:	687b      	ldr	r3, [r7, #4]
   10362:	685b      	ldr	r3, [r3, #4]
   10364:	4413      	add	r3, r2
   10366:	4a4a      	ldr	r2, [pc, #296]	; (10490 <_usb_d_dev_ep_trans+0x1b0>)
   10368:	4293      	cmp	r3, r2
   1036a:	d811      	bhi.n	10390 <_usb_d_dev_ep_trans+0xb0>
   1036c:	687b      	ldr	r3, [r7, #4]
   1036e:	681b      	ldr	r3, [r3, #0]
   10370:	f003 0303 	and.w	r3, r3, #3
   10374:	2b00      	cmp	r3, #0
   10376:	d10b      	bne.n	10390 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
   10378:	7d7b      	ldrb	r3, [r7, #21]
   1037a:	f083 0301 	eor.w	r3, r3, #1
   1037e:	b2db      	uxtb	r3, r3
   10380:	2b00      	cmp	r3, #0
   10382:	d00e      	beq.n	103a2 <_usb_d_dev_ep_trans+0xc2>
   10384:	687b      	ldr	r3, [r7, #4]
   10386:	685b      	ldr	r3, [r3, #4]
   10388:	693a      	ldr	r2, [r7, #16]
   1038a:	8a12      	ldrh	r2, [r2, #16]
   1038c:	4293      	cmp	r3, r2
   1038e:	d208      	bcs.n	103a2 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
   10390:	693b      	ldr	r3, [r7, #16]
   10392:	68db      	ldr	r3, [r3, #12]
   10394:	2b00      	cmp	r3, #0
   10396:	d102      	bne.n	1039e <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
   10398:	f06f 0312 	mvn.w	r3, #18
   1039c:	e071      	b.n	10482 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
   1039e:	2301      	movs	r3, #1
   103a0:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
   103a2:	7d7b      	ldrb	r3, [r7, #21]
   103a4:	f083 0301 	eor.w	r3, r3, #1
   103a8:	b2db      	uxtb	r3, r3
   103aa:	2b00      	cmp	r3, #0
   103ac:	d009      	beq.n	103c2 <_usb_d_dev_ep_trans+0xe2>
   103ae:	7b7b      	ldrb	r3, [r7, #13]
   103b0:	2b00      	cmp	r3, #0
   103b2:	d006      	beq.n	103c2 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
   103b4:	693b      	ldr	r3, [r7, #16]
   103b6:	68db      	ldr	r3, [r3, #12]
   103b8:	2b00      	cmp	r3, #0
   103ba:	d102      	bne.n	103c2 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
   103bc:	f06f 0311 	mvn.w	r3, #17
   103c0:	e05f      	b.n	10482 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   103c2:	693b      	ldr	r3, [r7, #16]
   103c4:	7cdb      	ldrb	r3, [r3, #19]
   103c6:	f003 0308 	and.w	r3, r3, #8
   103ca:	b2db      	uxtb	r3, r3
   103cc:	2b00      	cmp	r3, #0
   103ce:	d001      	beq.n	103d4 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
   103d0:	2302      	movs	r3, #2
   103d2:	e056      	b.n	10482 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
   103d4:	f107 0308 	add.w	r3, r7, #8
   103d8:	4618      	mov	r0, r3
   103da:	4b2e      	ldr	r3, [pc, #184]	; (10494 <_usb_d_dev_ep_trans+0x1b4>)
   103dc:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
   103de:	693b      	ldr	r3, [r7, #16]
   103e0:	7cdb      	ldrb	r3, [r3, #19]
   103e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   103e6:	b2db      	uxtb	r3, r3
   103e8:	2b00      	cmp	r3, #0
   103ea:	d006      	beq.n	103fa <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
   103ec:	f107 0308 	add.w	r3, r7, #8
   103f0:	4618      	mov	r0, r3
   103f2:	4b29      	ldr	r3, [pc, #164]	; (10498 <_usb_d_dev_ep_trans+0x1b8>)
   103f4:	4798      	blx	r3
		return USB_BUSY;
   103f6:	2301      	movs	r3, #1
   103f8:	e043      	b.n	10482 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
   103fa:	693a      	ldr	r2, [r7, #16]
   103fc:	7cd3      	ldrb	r3, [r2, #19]
   103fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10402:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
   10404:	f107 0308 	add.w	r3, r7, #8
   10408:	4618      	mov	r0, r3
   1040a:	4b23      	ldr	r3, [pc, #140]	; (10498 <_usb_d_dev_ep_trans+0x1b8>)
   1040c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
   1040e:	687b      	ldr	r3, [r7, #4]
   10410:	681a      	ldr	r2, [r3, #0]
   10412:	693b      	ldr	r3, [r7, #16]
   10414:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
   10416:	687b      	ldr	r3, [r7, #4]
   10418:	685a      	ldr	r2, [r3, #4]
   1041a:	693b      	ldr	r3, [r7, #16]
   1041c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
   1041e:	693b      	ldr	r3, [r7, #16]
   10420:	2200      	movs	r2, #0
   10422:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
   10424:	693a      	ldr	r2, [r7, #16]
   10426:	7cd3      	ldrb	r3, [r2, #19]
   10428:	7d79      	ldrb	r1, [r7, #21]
   1042a:	f361 13c7 	bfi	r3, r1, #7, #1
   1042e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
   10430:	693a      	ldr	r2, [r7, #16]
   10432:	7cd3      	ldrb	r3, [r2, #19]
   10434:	7df9      	ldrb	r1, [r7, #23]
   10436:	f361 1345 	bfi	r3, r1, #5, #1
   1043a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   1043c:	687b      	ldr	r3, [r7, #4]
   1043e:	7a5b      	ldrb	r3, [r3, #9]
   10440:	2b00      	cmp	r3, #0
   10442:	d007      	beq.n	10454 <_usb_d_dev_ep_trans+0x174>
   10444:	7b7b      	ldrb	r3, [r7, #13]
   10446:	f083 0301 	eor.w	r3, r3, #1
   1044a:	b2db      	uxtb	r3, r3
   1044c:	2b00      	cmp	r3, #0
   1044e:	d001      	beq.n	10454 <_usb_d_dev_ep_trans+0x174>
   10450:	2301      	movs	r3, #1
   10452:	e000      	b.n	10456 <_usb_d_dev_ep_trans+0x176>
   10454:	2300      	movs	r3, #0
   10456:	b2db      	uxtb	r3, r3
   10458:	f003 0301 	and.w	r3, r3, #1
   1045c:	b2d9      	uxtb	r1, r3
   1045e:	693a      	ldr	r2, [r7, #16]
   10460:	7cd3      	ldrb	r3, [r2, #19]
   10462:	f361 1304 	bfi	r3, r1, #4, #1
   10466:	74d3      	strb	r3, [r2, #19]

	if (dir) {
   10468:	7d7b      	ldrb	r3, [r7, #21]
   1046a:	2b00      	cmp	r3, #0
   1046c:	d004      	beq.n	10478 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
   1046e:	2100      	movs	r1, #0
   10470:	6938      	ldr	r0, [r7, #16]
   10472:	4b0a      	ldr	r3, [pc, #40]	; (1049c <_usb_d_dev_ep_trans+0x1bc>)
   10474:	4798      	blx	r3
   10476:	e003      	b.n	10480 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
   10478:	2100      	movs	r1, #0
   1047a:	6938      	ldr	r0, [r7, #16]
   1047c:	4b08      	ldr	r3, [pc, #32]	; (104a0 <_usb_d_dev_ep_trans+0x1c0>)
   1047e:	4798      	blx	r3
	}

	return ERR_NONE;
   10480:	2300      	movs	r3, #0
}
   10482:	4618      	mov	r0, r3
   10484:	3718      	adds	r7, #24
   10486:	46bd      	mov	sp, r7
   10488:	bd80      	pop	{r7, pc}
   1048a:	bf00      	nop
   1048c:	0000eb51 	.word	0x0000eb51
   10490:	20041fff 	.word	0x20041fff
   10494:	00010cad 	.word	0x00010cad
   10498:	00010cd3 	.word	0x00010cd3
   1049c:	0000ee19 	.word	0x0000ee19
   104a0:	0000f031 	.word	0x0000f031

000104a4 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   104a4:	b580      	push	{r7, lr}
   104a6:	b084      	sub	sp, #16
   104a8:	af00      	add	r7, sp, #0
   104aa:	4603      	mov	r3, r0
   104ac:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
   104ae:	79fb      	ldrb	r3, [r7, #7]
   104b0:	f003 030f 	and.w	r3, r3, #15
   104b4:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
   104b6:	79fb      	ldrb	r3, [r7, #7]
   104b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   104bc:	2b00      	cmp	r3, #0
   104be:	bf14      	ite	ne
   104c0:	2301      	movne	r3, #1
   104c2:	2300      	moveq	r3, #0
   104c4:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
   104c6:	7bba      	ldrb	r2, [r7, #14]
   104c8:	7bfb      	ldrb	r3, [r7, #15]
   104ca:	4611      	mov	r1, r2
   104cc:	4618      	mov	r0, r3
   104ce:	4b08      	ldr	r3, [pc, #32]	; (104f0 <_usb_d_dev_ep_abort+0x4c>)
   104d0:	4798      	blx	r3
   104d2:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
   104d4:	7bfb      	ldrb	r3, [r7, #15]
   104d6:	2b04      	cmp	r3, #4
   104d8:	d806      	bhi.n	104e8 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
   104da:	7bbb      	ldrb	r3, [r7, #14]
   104dc:	2202      	movs	r2, #2
   104de:	4619      	mov	r1, r3
   104e0:	68b8      	ldr	r0, [r7, #8]
   104e2:	4b04      	ldr	r3, [pc, #16]	; (104f4 <_usb_d_dev_ep_abort+0x50>)
   104e4:	4798      	blx	r3
   104e6:	e000      	b.n	104ea <_usb_d_dev_ep_abort+0x46>
		return;
   104e8:	bf00      	nop
}
   104ea:	3710      	adds	r7, #16
   104ec:	46bd      	mov	sp, r7
   104ee:	bd80      	pop	{r7, pc}
   104f0:	0000eb51 	.word	0x0000eb51
   104f4:	00010189 	.word	0x00010189

000104f8 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
   104f8:	b480      	push	{r7}
   104fa:	b085      	sub	sp, #20
   104fc:	af00      	add	r7, sp, #0
   104fe:	4603      	mov	r3, r0
   10500:	6039      	str	r1, [r7, #0]
   10502:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   10504:	683b      	ldr	r3, [r7, #0]
   10506:	2b00      	cmp	r3, #0
   10508:	d001      	beq.n	1050e <_usb_d_dev_register_callback+0x16>
   1050a:	683b      	ldr	r3, [r7, #0]
   1050c:	e000      	b.n	10510 <_usb_d_dev_register_callback+0x18>
   1050e:	4b0a      	ldr	r3, [pc, #40]	; (10538 <_usb_d_dev_register_callback+0x40>)
   10510:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
   10512:	79fb      	ldrb	r3, [r7, #7]
   10514:	2b01      	cmp	r3, #1
   10516:	d103      	bne.n	10520 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   10518:	4a08      	ldr	r2, [pc, #32]	; (1053c <_usb_d_dev_register_callback+0x44>)
   1051a:	68fb      	ldr	r3, [r7, #12]
   1051c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
   1051e:	e005      	b.n	1052c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
   10520:	79fb      	ldrb	r3, [r7, #7]
   10522:	2b00      	cmp	r3, #0
   10524:	d102      	bne.n	1052c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   10526:	4a05      	ldr	r2, [pc, #20]	; (1053c <_usb_d_dev_register_callback+0x44>)
   10528:	68fb      	ldr	r3, [r7, #12]
   1052a:	6013      	str	r3, [r2, #0]
}
   1052c:	bf00      	nop
   1052e:	3714      	adds	r7, #20
   10530:	46bd      	mov	sp, r7
   10532:	f85d 7b04 	ldr.w	r7, [sp], #4
   10536:	4770      	bx	lr
   10538:	0000e3d9 	.word	0x0000e3d9
   1053c:	20008d28 	.word	0x20008d28

00010540 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
   10540:	b480      	push	{r7}
   10542:	b085      	sub	sp, #20
   10544:	af00      	add	r7, sp, #0
   10546:	4603      	mov	r3, r0
   10548:	6039      	str	r1, [r7, #0]
   1054a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   1054c:	683b      	ldr	r3, [r7, #0]
   1054e:	2b00      	cmp	r3, #0
   10550:	d001      	beq.n	10556 <_usb_d_dev_register_ep_callback+0x16>
   10552:	683b      	ldr	r3, [r7, #0]
   10554:	e000      	b.n	10558 <_usb_d_dev_register_ep_callback+0x18>
   10556:	4b0e      	ldr	r3, [pc, #56]	; (10590 <_usb_d_dev_register_ep_callback+0x50>)
   10558:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
   1055a:	79fb      	ldrb	r3, [r7, #7]
   1055c:	2b00      	cmp	r3, #0
   1055e:	d103      	bne.n	10568 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   10560:	4a0c      	ldr	r2, [pc, #48]	; (10594 <_usb_d_dev_register_ep_callback+0x54>)
   10562:	68fb      	ldr	r3, [r7, #12]
   10564:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
   10566:	e00c      	b.n	10582 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   10568:	79fb      	ldrb	r3, [r7, #7]
   1056a:	2b01      	cmp	r3, #1
   1056c:	d103      	bne.n	10576 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   1056e:	4a09      	ldr	r2, [pc, #36]	; (10594 <_usb_d_dev_register_ep_callback+0x54>)
   10570:	68fb      	ldr	r3, [r7, #12]
   10572:	60d3      	str	r3, [r2, #12]
}
   10574:	e005      	b.n	10582 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   10576:	79fb      	ldrb	r3, [r7, #7]
   10578:	2b02      	cmp	r3, #2
   1057a:	d102      	bne.n	10582 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   1057c:	4a05      	ldr	r2, [pc, #20]	; (10594 <_usb_d_dev_register_ep_callback+0x54>)
   1057e:	68fb      	ldr	r3, [r7, #12]
   10580:	6113      	str	r3, [r2, #16]
}
   10582:	bf00      	nop
   10584:	3714      	adds	r7, #20
   10586:	46bd      	mov	sp, r7
   10588:	f85d 7b04 	ldr.w	r7, [sp], #4
   1058c:	4770      	bx	lr
   1058e:	bf00      	nop
   10590:	0000e3d9 	.word	0x0000e3d9
   10594:	20008d28 	.word	0x20008d28

00010598 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
   10598:	b580      	push	{r7, lr}
   1059a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   1059c:	4b01      	ldr	r3, [pc, #4]	; (105a4 <USB_0_Handler+0xc>)
   1059e:	4798      	blx	r3
}
   105a0:	bf00      	nop
   105a2:	bd80      	pop	{r7, pc}
   105a4:	0000f809 	.word	0x0000f809

000105a8 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
   105a8:	b580      	push	{r7, lr}
   105aa:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   105ac:	4b01      	ldr	r3, [pc, #4]	; (105b4 <USB_1_Handler+0xc>)
   105ae:	4798      	blx	r3
}
   105b0:	bf00      	nop
   105b2:	bd80      	pop	{r7, pc}
   105b4:	0000f809 	.word	0x0000f809

000105b8 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
   105b8:	b580      	push	{r7, lr}
   105ba:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   105bc:	4b01      	ldr	r3, [pc, #4]	; (105c4 <USB_2_Handler+0xc>)
   105be:	4798      	blx	r3
}
   105c0:	bf00      	nop
   105c2:	bd80      	pop	{r7, pc}
   105c4:	0000f809 	.word	0x0000f809

000105c8 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
   105c8:	b580      	push	{r7, lr}
   105ca:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   105cc:	4b01      	ldr	r3, [pc, #4]	; (105d4 <USB_3_Handler+0xc>)
   105ce:	4798      	blx	r3
}
   105d0:	bf00      	nop
   105d2:	bd80      	pop	{r7, pc}
   105d4:	0000f809 	.word	0x0000f809

000105d8 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
   105d8:	b480      	push	{r7}
   105da:	b083      	sub	sp, #12
   105dc:	af00      	add	r7, sp, #0
   105de:	6078      	str	r0, [r7, #4]
   105e0:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
   105e2:	bf00      	nop
   105e4:	687b      	ldr	r3, [r7, #4]
   105e6:	689a      	ldr	r2, [r3, #8]
   105e8:	683b      	ldr	r3, [r7, #0]
   105ea:	4013      	ands	r3, r2
   105ec:	2b00      	cmp	r3, #0
   105ee:	d1f9      	bne.n	105e4 <hri_wdt_wait_for_sync+0xc>
	};
}
   105f0:	bf00      	nop
   105f2:	370c      	adds	r7, #12
   105f4:	46bd      	mov	sp, r7
   105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   105fa:	4770      	bx	lr

000105fc <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
   105fc:	b580      	push	{r7, lr}
   105fe:	b084      	sub	sp, #16
   10600:	af00      	add	r7, sp, #0
   10602:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   10604:	210e      	movs	r1, #14
   10606:	6878      	ldr	r0, [r7, #4]
   10608:	4b0a      	ldr	r3, [pc, #40]	; (10634 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
   1060a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
   1060c:	687b      	ldr	r3, [r7, #4]
   1060e:	781b      	ldrb	r3, [r3, #0]
   10610:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
   10612:	7bfb      	ldrb	r3, [r7, #15]
   10614:	085b      	lsrs	r3, r3, #1
   10616:	b2db      	uxtb	r3, r3
   10618:	f003 0301 	and.w	r3, r3, #1
   1061c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
   1061e:	7bfb      	ldrb	r3, [r7, #15]
   10620:	2b00      	cmp	r3, #0
   10622:	bf14      	ite	ne
   10624:	2301      	movne	r3, #1
   10626:	2300      	moveq	r3, #0
   10628:	b2db      	uxtb	r3, r3
}
   1062a:	4618      	mov	r0, r3
   1062c:	3710      	adds	r7, #16
   1062e:	46bd      	mov	sp, r7
   10630:	bd80      	pop	{r7, pc}
   10632:	bf00      	nop
   10634:	000105d9 	.word	0x000105d9

00010638 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
   10638:	b580      	push	{r7, lr}
   1063a:	b082      	sub	sp, #8
   1063c:	af00      	add	r7, sp, #0
   1063e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
   10640:	687b      	ldr	r3, [r7, #4]
   10642:	781b      	ldrb	r3, [r3, #0]
   10644:	b2db      	uxtb	r3, r3
   10646:	f023 0304 	bic.w	r3, r3, #4
   1064a:	b2da      	uxtb	r2, r3
   1064c:	687b      	ldr	r3, [r7, #4]
   1064e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   10650:	210e      	movs	r1, #14
   10652:	6878      	ldr	r0, [r7, #4]
   10654:	4b02      	ldr	r3, [pc, #8]	; (10660 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
   10656:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
   10658:	bf00      	nop
   1065a:	3708      	adds	r7, #8
   1065c:	46bd      	mov	sp, r7
   1065e:	bd80      	pop	{r7, pc}
   10660:	000105d9 	.word	0x000105d9

00010664 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
   10664:	b580      	push	{r7, lr}
   10666:	b084      	sub	sp, #16
   10668:	af00      	add	r7, sp, #0
   1066a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   1066c:	210e      	movs	r1, #14
   1066e:	6878      	ldr	r0, [r7, #4]
   10670:	4b08      	ldr	r3, [pc, #32]	; (10694 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
   10672:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
   10674:	687b      	ldr	r3, [r7, #4]
   10676:	781b      	ldrb	r3, [r3, #0]
   10678:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
   1067a:	7bfb      	ldrb	r3, [r7, #15]
   1067c:	09db      	lsrs	r3, r3, #7
   1067e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
   10680:	7bfb      	ldrb	r3, [r7, #15]
   10682:	2b00      	cmp	r3, #0
   10684:	bf14      	ite	ne
   10686:	2301      	movne	r3, #1
   10688:	2300      	moveq	r3, #0
   1068a:	b2db      	uxtb	r3, r3
}
   1068c:	4618      	mov	r0, r3
   1068e:	3710      	adds	r7, #16
   10690:	46bd      	mov	sp, r7
   10692:	bd80      	pop	{r7, pc}
   10694:	000105d9 	.word	0x000105d9

00010698 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
   10698:	b480      	push	{r7}
   1069a:	b085      	sub	sp, #20
   1069c:	af00      	add	r7, sp, #0
   1069e:	6078      	str	r0, [r7, #4]
   106a0:	460b      	mov	r3, r1
   106a2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
   106a4:	687b      	ldr	r3, [r7, #4]
   106a6:	785b      	ldrb	r3, [r3, #1]
   106a8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
   106aa:	7bfb      	ldrb	r3, [r7, #15]
   106ac:	f023 030f 	bic.w	r3, r3, #15
   106b0:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
   106b2:	78fb      	ldrb	r3, [r7, #3]
   106b4:	f003 030f 	and.w	r3, r3, #15
   106b8:	b2da      	uxtb	r2, r3
   106ba:	7bfb      	ldrb	r3, [r7, #15]
   106bc:	4313      	orrs	r3, r2
   106be:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
   106c0:	687b      	ldr	r3, [r7, #4]
   106c2:	7bfa      	ldrb	r2, [r7, #15]
   106c4:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
   106c6:	bf00      	nop
   106c8:	3714      	adds	r7, #20
   106ca:	46bd      	mov	sp, r7
   106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   106d0:	4770      	bx	lr
	...

000106d4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
   106d4:	b580      	push	{r7, lr}
   106d6:	b082      	sub	sp, #8
   106d8:	af00      	add	r7, sp, #0
   106da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   106dc:	687b      	ldr	r3, [r7, #4]
   106de:	2b00      	cmp	r3, #0
   106e0:	d005      	beq.n	106ee <_wdt_init+0x1a>
   106e2:	687b      	ldr	r3, [r7, #4]
   106e4:	681b      	ldr	r3, [r3, #0]
   106e6:	2b00      	cmp	r3, #0
   106e8:	d001      	beq.n	106ee <_wdt_init+0x1a>
   106ea:	2301      	movs	r3, #1
   106ec:	e000      	b.n	106f0 <_wdt_init+0x1c>
   106ee:	2300      	movs	r3, #0
   106f0:	f003 0301 	and.w	r3, r3, #1
   106f4:	b2db      	uxtb	r3, r3
   106f6:	2250      	movs	r2, #80	; 0x50
   106f8:	4913      	ldr	r1, [pc, #76]	; (10748 <_wdt_init+0x74>)
   106fa:	4618      	mov	r0, r3
   106fc:	4b13      	ldr	r3, [pc, #76]	; (1074c <_wdt_init+0x78>)
   106fe:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
   10700:	687b      	ldr	r3, [r7, #4]
   10702:	681b      	ldr	r3, [r3, #0]
   10704:	4618      	mov	r0, r3
   10706:	4b12      	ldr	r3, [pc, #72]	; (10750 <_wdt_init+0x7c>)
   10708:	4798      	blx	r3
   1070a:	4603      	mov	r3, r0
   1070c:	2b00      	cmp	r3, #0
   1070e:	d107      	bne.n	10720 <_wdt_init+0x4c>
   10710:	687b      	ldr	r3, [r7, #4]
   10712:	681b      	ldr	r3, [r3, #0]
   10714:	4618      	mov	r0, r3
   10716:	4b0f      	ldr	r3, [pc, #60]	; (10754 <_wdt_init+0x80>)
   10718:	4798      	blx	r3
   1071a:	4603      	mov	r3, r0
   1071c:	2b00      	cmp	r3, #0
   1071e:	d002      	beq.n	10726 <_wdt_init+0x52>
		return ERR_DENIED;
   10720:	f06f 0310 	mvn.w	r3, #16
   10724:	e00b      	b.n	1073e <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
   10726:	687b      	ldr	r3, [r7, #4]
   10728:	681b      	ldr	r3, [r3, #0]
   1072a:	4618      	mov	r0, r3
   1072c:	4b0a      	ldr	r3, [pc, #40]	; (10758 <_wdt_init+0x84>)
   1072e:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
   10730:	687b      	ldr	r3, [r7, #4]
   10732:	681b      	ldr	r3, [r3, #0]
   10734:	210b      	movs	r1, #11
   10736:	4618      	mov	r0, r3
   10738:	4b08      	ldr	r3, [pc, #32]	; (1075c <_wdt_init+0x88>)
   1073a:	4798      	blx	r3
	}

	return ERR_NONE;
   1073c:	2300      	movs	r3, #0
}
   1073e:	4618      	mov	r0, r3
   10740:	3708      	adds	r7, #8
   10742:	46bd      	mov	sp, r7
   10744:	bd80      	pop	{r7, pc}
   10746:	bf00      	nop
   10748:	00020510 	.word	0x00020510
   1074c:	00007d5d 	.word	0x00007d5d
   10750:	00010665 	.word	0x00010665
   10754:	000105fd 	.word	0x000105fd
   10758:	00010639 	.word	0x00010639
   1075c:	00010699 	.word	0x00010699

00010760 <hri_port_set_DIR_reg>:
{
   10760:	b480      	push	{r7}
   10762:	b085      	sub	sp, #20
   10764:	af00      	add	r7, sp, #0
   10766:	60f8      	str	r0, [r7, #12]
   10768:	460b      	mov	r3, r1
   1076a:	607a      	str	r2, [r7, #4]
   1076c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   1076e:	7afb      	ldrb	r3, [r7, #11]
   10770:	68fa      	ldr	r2, [r7, #12]
   10772:	01db      	lsls	r3, r3, #7
   10774:	4413      	add	r3, r2
   10776:	3308      	adds	r3, #8
   10778:	687a      	ldr	r2, [r7, #4]
   1077a:	601a      	str	r2, [r3, #0]
}
   1077c:	bf00      	nop
   1077e:	3714      	adds	r7, #20
   10780:	46bd      	mov	sp, r7
   10782:	f85d 7b04 	ldr.w	r7, [sp], #4
   10786:	4770      	bx	lr

00010788 <hri_port_clear_DIR_reg>:
{
   10788:	b480      	push	{r7}
   1078a:	b085      	sub	sp, #20
   1078c:	af00      	add	r7, sp, #0
   1078e:	60f8      	str	r0, [r7, #12]
   10790:	460b      	mov	r3, r1
   10792:	607a      	str	r2, [r7, #4]
   10794:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   10796:	7afb      	ldrb	r3, [r7, #11]
   10798:	68fa      	ldr	r2, [r7, #12]
   1079a:	01db      	lsls	r3, r3, #7
   1079c:	4413      	add	r3, r2
   1079e:	3304      	adds	r3, #4
   107a0:	687a      	ldr	r2, [r7, #4]
   107a2:	601a      	str	r2, [r3, #0]
}
   107a4:	bf00      	nop
   107a6:	3714      	adds	r7, #20
   107a8:	46bd      	mov	sp, r7
   107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   107ae:	4770      	bx	lr

000107b0 <hri_port_set_OUT_reg>:
{
   107b0:	b480      	push	{r7}
   107b2:	b085      	sub	sp, #20
   107b4:	af00      	add	r7, sp, #0
   107b6:	60f8      	str	r0, [r7, #12]
   107b8:	460b      	mov	r3, r1
   107ba:	607a      	str	r2, [r7, #4]
   107bc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   107be:	7afb      	ldrb	r3, [r7, #11]
   107c0:	68fa      	ldr	r2, [r7, #12]
   107c2:	01db      	lsls	r3, r3, #7
   107c4:	4413      	add	r3, r2
   107c6:	3318      	adds	r3, #24
   107c8:	687a      	ldr	r2, [r7, #4]
   107ca:	601a      	str	r2, [r3, #0]
}
   107cc:	bf00      	nop
   107ce:	3714      	adds	r7, #20
   107d0:	46bd      	mov	sp, r7
   107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   107d6:	4770      	bx	lr

000107d8 <hri_port_clear_OUT_reg>:
{
   107d8:	b480      	push	{r7}
   107da:	b085      	sub	sp, #20
   107dc:	af00      	add	r7, sp, #0
   107de:	60f8      	str	r0, [r7, #12]
   107e0:	460b      	mov	r3, r1
   107e2:	607a      	str	r2, [r7, #4]
   107e4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   107e6:	7afb      	ldrb	r3, [r7, #11]
   107e8:	68fa      	ldr	r2, [r7, #12]
   107ea:	01db      	lsls	r3, r3, #7
   107ec:	4413      	add	r3, r2
   107ee:	3314      	adds	r3, #20
   107f0:	687a      	ldr	r2, [r7, #4]
   107f2:	601a      	str	r2, [r3, #0]
}
   107f4:	bf00      	nop
   107f6:	3714      	adds	r7, #20
   107f8:	46bd      	mov	sp, r7
   107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   107fe:	4770      	bx	lr

00010800 <hri_port_write_PMUX_PMUXE_bf>:
{
   10800:	b480      	push	{r7}
   10802:	b085      	sub	sp, #20
   10804:	af00      	add	r7, sp, #0
   10806:	6078      	str	r0, [r7, #4]
   10808:	4608      	mov	r0, r1
   1080a:	4611      	mov	r1, r2
   1080c:	461a      	mov	r2, r3
   1080e:	4603      	mov	r3, r0
   10810:	70fb      	strb	r3, [r7, #3]
   10812:	460b      	mov	r3, r1
   10814:	70bb      	strb	r3, [r7, #2]
   10816:	4613      	mov	r3, r2
   10818:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   1081a:	78fa      	ldrb	r2, [r7, #3]
   1081c:	78bb      	ldrb	r3, [r7, #2]
   1081e:	6879      	ldr	r1, [r7, #4]
   10820:	01d2      	lsls	r2, r2, #7
   10822:	440a      	add	r2, r1
   10824:	4413      	add	r3, r2
   10826:	3330      	adds	r3, #48	; 0x30
   10828:	781b      	ldrb	r3, [r3, #0]
   1082a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   1082c:	7bfb      	ldrb	r3, [r7, #15]
   1082e:	f023 030f 	bic.w	r3, r3, #15
   10832:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   10834:	787b      	ldrb	r3, [r7, #1]
   10836:	f003 030f 	and.w	r3, r3, #15
   1083a:	b2da      	uxtb	r2, r3
   1083c:	7bfb      	ldrb	r3, [r7, #15]
   1083e:	4313      	orrs	r3, r2
   10840:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   10842:	78fa      	ldrb	r2, [r7, #3]
   10844:	78bb      	ldrb	r3, [r7, #2]
   10846:	6879      	ldr	r1, [r7, #4]
   10848:	01d2      	lsls	r2, r2, #7
   1084a:	440a      	add	r2, r1
   1084c:	4413      	add	r3, r2
   1084e:	3330      	adds	r3, #48	; 0x30
   10850:	7bfa      	ldrb	r2, [r7, #15]
   10852:	701a      	strb	r2, [r3, #0]
}
   10854:	bf00      	nop
   10856:	3714      	adds	r7, #20
   10858:	46bd      	mov	sp, r7
   1085a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1085e:	4770      	bx	lr

00010860 <hri_port_write_PMUX_PMUXO_bf>:
{
   10860:	b480      	push	{r7}
   10862:	b085      	sub	sp, #20
   10864:	af00      	add	r7, sp, #0
   10866:	6078      	str	r0, [r7, #4]
   10868:	4608      	mov	r0, r1
   1086a:	4611      	mov	r1, r2
   1086c:	461a      	mov	r2, r3
   1086e:	4603      	mov	r3, r0
   10870:	70fb      	strb	r3, [r7, #3]
   10872:	460b      	mov	r3, r1
   10874:	70bb      	strb	r3, [r7, #2]
   10876:	4613      	mov	r3, r2
   10878:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   1087a:	78fa      	ldrb	r2, [r7, #3]
   1087c:	78bb      	ldrb	r3, [r7, #2]
   1087e:	6879      	ldr	r1, [r7, #4]
   10880:	01d2      	lsls	r2, r2, #7
   10882:	440a      	add	r2, r1
   10884:	4413      	add	r3, r2
   10886:	3330      	adds	r3, #48	; 0x30
   10888:	781b      	ldrb	r3, [r3, #0]
   1088a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   1088c:	7bfb      	ldrb	r3, [r7, #15]
   1088e:	f003 030f 	and.w	r3, r3, #15
   10892:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   10894:	787b      	ldrb	r3, [r7, #1]
   10896:	011b      	lsls	r3, r3, #4
   10898:	b2da      	uxtb	r2, r3
   1089a:	7bfb      	ldrb	r3, [r7, #15]
   1089c:	4313      	orrs	r3, r2
   1089e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   108a0:	78fa      	ldrb	r2, [r7, #3]
   108a2:	78bb      	ldrb	r3, [r7, #2]
   108a4:	6879      	ldr	r1, [r7, #4]
   108a6:	01d2      	lsls	r2, r2, #7
   108a8:	440a      	add	r2, r1
   108aa:	4413      	add	r3, r2
   108ac:	3330      	adds	r3, #48	; 0x30
   108ae:	7bfa      	ldrb	r2, [r7, #15]
   108b0:	701a      	strb	r2, [r3, #0]
}
   108b2:	bf00      	nop
   108b4:	3714      	adds	r7, #20
   108b6:	46bd      	mov	sp, r7
   108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   108bc:	4770      	bx	lr

000108be <hri_port_write_PINCFG_PMUXEN_bit>:
{
   108be:	b480      	push	{r7}
   108c0:	b085      	sub	sp, #20
   108c2:	af00      	add	r7, sp, #0
   108c4:	6078      	str	r0, [r7, #4]
   108c6:	4608      	mov	r0, r1
   108c8:	4611      	mov	r1, r2
   108ca:	461a      	mov	r2, r3
   108cc:	4603      	mov	r3, r0
   108ce:	70fb      	strb	r3, [r7, #3]
   108d0:	460b      	mov	r3, r1
   108d2:	70bb      	strb	r3, [r7, #2]
   108d4:	4613      	mov	r3, r2
   108d6:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   108d8:	78fa      	ldrb	r2, [r7, #3]
   108da:	78bb      	ldrb	r3, [r7, #2]
   108dc:	6879      	ldr	r1, [r7, #4]
   108de:	01d2      	lsls	r2, r2, #7
   108e0:	440a      	add	r2, r1
   108e2:	4413      	add	r3, r2
   108e4:	3340      	adds	r3, #64	; 0x40
   108e6:	781b      	ldrb	r3, [r3, #0]
   108e8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   108ea:	7bfb      	ldrb	r3, [r7, #15]
   108ec:	f023 0301 	bic.w	r3, r3, #1
   108f0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   108f2:	787a      	ldrb	r2, [r7, #1]
   108f4:	7bfb      	ldrb	r3, [r7, #15]
   108f6:	4313      	orrs	r3, r2
   108f8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   108fa:	78fa      	ldrb	r2, [r7, #3]
   108fc:	78bb      	ldrb	r3, [r7, #2]
   108fe:	6879      	ldr	r1, [r7, #4]
   10900:	01d2      	lsls	r2, r2, #7
   10902:	440a      	add	r2, r1
   10904:	4413      	add	r3, r2
   10906:	3340      	adds	r3, #64	; 0x40
   10908:	7bfa      	ldrb	r2, [r7, #15]
   1090a:	701a      	strb	r2, [r3, #0]
}
   1090c:	bf00      	nop
   1090e:	3714      	adds	r7, #20
   10910:	46bd      	mov	sp, r7
   10912:	f85d 7b04 	ldr.w	r7, [sp], #4
   10916:	4770      	bx	lr

00010918 <hri_port_write_WRCONFIG_reg>:
{
   10918:	b480      	push	{r7}
   1091a:	b085      	sub	sp, #20
   1091c:	af00      	add	r7, sp, #0
   1091e:	60f8      	str	r0, [r7, #12]
   10920:	460b      	mov	r3, r1
   10922:	607a      	str	r2, [r7, #4]
   10924:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   10926:	7afb      	ldrb	r3, [r7, #11]
   10928:	68fa      	ldr	r2, [r7, #12]
   1092a:	01db      	lsls	r3, r3, #7
   1092c:	4413      	add	r3, r2
   1092e:	3328      	adds	r3, #40	; 0x28
   10930:	687a      	ldr	r2, [r7, #4]
   10932:	601a      	str	r2, [r3, #0]
}
   10934:	bf00      	nop
   10936:	3714      	adds	r7, #20
   10938:	46bd      	mov	sp, r7
   1093a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1093e:	4770      	bx	lr

00010940 <_gpio_set_direction>:
{
   10940:	b580      	push	{r7, lr}
   10942:	b082      	sub	sp, #8
   10944:	af00      	add	r7, sp, #0
   10946:	4603      	mov	r3, r0
   10948:	6039      	str	r1, [r7, #0]
   1094a:	71fb      	strb	r3, [r7, #7]
   1094c:	4613      	mov	r3, r2
   1094e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   10950:	79bb      	ldrb	r3, [r7, #6]
   10952:	2b01      	cmp	r3, #1
   10954:	d01c      	beq.n	10990 <_gpio_set_direction+0x50>
   10956:	2b02      	cmp	r3, #2
   10958:	d037      	beq.n	109ca <_gpio_set_direction+0x8a>
   1095a:	2b00      	cmp	r3, #0
   1095c:	d14e      	bne.n	109fc <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   1095e:	79fb      	ldrb	r3, [r7, #7]
   10960:	683a      	ldr	r2, [r7, #0]
   10962:	4619      	mov	r1, r3
   10964:	482a      	ldr	r0, [pc, #168]	; (10a10 <_gpio_set_direction+0xd0>)
   10966:	4b2b      	ldr	r3, [pc, #172]	; (10a14 <_gpio_set_direction+0xd4>)
   10968:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   1096a:	683b      	ldr	r3, [r7, #0]
   1096c:	b29b      	uxth	r3, r3
   1096e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   10972:	79fb      	ldrb	r3, [r7, #7]
   10974:	4619      	mov	r1, r3
   10976:	4826      	ldr	r0, [pc, #152]	; (10a10 <_gpio_set_direction+0xd0>)
   10978:	4b27      	ldr	r3, [pc, #156]	; (10a18 <_gpio_set_direction+0xd8>)
   1097a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   1097c:	683b      	ldr	r3, [r7, #0]
   1097e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   10980:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   10984:	79fb      	ldrb	r3, [r7, #7]
   10986:	4619      	mov	r1, r3
   10988:	4821      	ldr	r0, [pc, #132]	; (10a10 <_gpio_set_direction+0xd0>)
   1098a:	4b23      	ldr	r3, [pc, #140]	; (10a18 <_gpio_set_direction+0xd8>)
   1098c:	4798      	blx	r3
		break;
   1098e:	e03a      	b.n	10a06 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   10990:	79fb      	ldrb	r3, [r7, #7]
   10992:	683a      	ldr	r2, [r7, #0]
   10994:	4619      	mov	r1, r3
   10996:	481e      	ldr	r0, [pc, #120]	; (10a10 <_gpio_set_direction+0xd0>)
   10998:	4b1e      	ldr	r3, [pc, #120]	; (10a14 <_gpio_set_direction+0xd4>)
   1099a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   1099c:	683b      	ldr	r3, [r7, #0]
   1099e:	b29b      	uxth	r3, r3
   109a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   109a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   109a8:	79f9      	ldrb	r1, [r7, #7]
   109aa:	461a      	mov	r2, r3
   109ac:	4818      	ldr	r0, [pc, #96]	; (10a10 <_gpio_set_direction+0xd0>)
   109ae:	4b1a      	ldr	r3, [pc, #104]	; (10a18 <_gpio_set_direction+0xd8>)
   109b0:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   109b2:	683b      	ldr	r3, [r7, #0]
   109b4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   109b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   109ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   109be:	79f9      	ldrb	r1, [r7, #7]
   109c0:	461a      	mov	r2, r3
   109c2:	4813      	ldr	r0, [pc, #76]	; (10a10 <_gpio_set_direction+0xd0>)
   109c4:	4b14      	ldr	r3, [pc, #80]	; (10a18 <_gpio_set_direction+0xd8>)
   109c6:	4798      	blx	r3
		break;
   109c8:	e01d      	b.n	10a06 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   109ca:	79fb      	ldrb	r3, [r7, #7]
   109cc:	683a      	ldr	r2, [r7, #0]
   109ce:	4619      	mov	r1, r3
   109d0:	480f      	ldr	r0, [pc, #60]	; (10a10 <_gpio_set_direction+0xd0>)
   109d2:	4b12      	ldr	r3, [pc, #72]	; (10a1c <_gpio_set_direction+0xdc>)
   109d4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   109d6:	683b      	ldr	r3, [r7, #0]
   109d8:	b29b      	uxth	r3, r3
   109da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   109de:	79fb      	ldrb	r3, [r7, #7]
   109e0:	4619      	mov	r1, r3
   109e2:	480b      	ldr	r0, [pc, #44]	; (10a10 <_gpio_set_direction+0xd0>)
   109e4:	4b0c      	ldr	r3, [pc, #48]	; (10a18 <_gpio_set_direction+0xd8>)
   109e6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   109e8:	683b      	ldr	r3, [r7, #0]
   109ea:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   109ec:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   109f0:	79fb      	ldrb	r3, [r7, #7]
   109f2:	4619      	mov	r1, r3
   109f4:	4806      	ldr	r0, [pc, #24]	; (10a10 <_gpio_set_direction+0xd0>)
   109f6:	4b08      	ldr	r3, [pc, #32]	; (10a18 <_gpio_set_direction+0xd8>)
   109f8:	4798      	blx	r3
		break;
   109fa:	e004      	b.n	10a06 <_gpio_set_direction+0xc6>
		ASSERT(false);
   109fc:	2246      	movs	r2, #70	; 0x46
   109fe:	4908      	ldr	r1, [pc, #32]	; (10a20 <_gpio_set_direction+0xe0>)
   10a00:	2000      	movs	r0, #0
   10a02:	4b08      	ldr	r3, [pc, #32]	; (10a24 <_gpio_set_direction+0xe4>)
   10a04:	4798      	blx	r3
}
   10a06:	bf00      	nop
   10a08:	3708      	adds	r7, #8
   10a0a:	46bd      	mov	sp, r7
   10a0c:	bd80      	pop	{r7, pc}
   10a0e:	bf00      	nop
   10a10:	41008000 	.word	0x41008000
   10a14:	00010789 	.word	0x00010789
   10a18:	00010919 	.word	0x00010919
   10a1c:	00010761 	.word	0x00010761
   10a20:	00020528 	.word	0x00020528
   10a24:	00007d5d 	.word	0x00007d5d

00010a28 <_gpio_set_level>:
{
   10a28:	b580      	push	{r7, lr}
   10a2a:	b082      	sub	sp, #8
   10a2c:	af00      	add	r7, sp, #0
   10a2e:	4603      	mov	r3, r0
   10a30:	6039      	str	r1, [r7, #0]
   10a32:	71fb      	strb	r3, [r7, #7]
   10a34:	4613      	mov	r3, r2
   10a36:	71bb      	strb	r3, [r7, #6]
	if (level) {
   10a38:	79bb      	ldrb	r3, [r7, #6]
   10a3a:	2b00      	cmp	r3, #0
   10a3c:	d006      	beq.n	10a4c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   10a3e:	79fb      	ldrb	r3, [r7, #7]
   10a40:	683a      	ldr	r2, [r7, #0]
   10a42:	4619      	mov	r1, r3
   10a44:	4806      	ldr	r0, [pc, #24]	; (10a60 <_gpio_set_level+0x38>)
   10a46:	4b07      	ldr	r3, [pc, #28]	; (10a64 <_gpio_set_level+0x3c>)
   10a48:	4798      	blx	r3
}
   10a4a:	e005      	b.n	10a58 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   10a4c:	79fb      	ldrb	r3, [r7, #7]
   10a4e:	683a      	ldr	r2, [r7, #0]
   10a50:	4619      	mov	r1, r3
   10a52:	4803      	ldr	r0, [pc, #12]	; (10a60 <_gpio_set_level+0x38>)
   10a54:	4b04      	ldr	r3, [pc, #16]	; (10a68 <_gpio_set_level+0x40>)
   10a56:	4798      	blx	r3
}
   10a58:	bf00      	nop
   10a5a:	3708      	adds	r7, #8
   10a5c:	46bd      	mov	sp, r7
   10a5e:	bd80      	pop	{r7, pc}
   10a60:	41008000 	.word	0x41008000
   10a64:	000107b1 	.word	0x000107b1
   10a68:	000107d9 	.word	0x000107d9

00010a6c <_gpio_set_pin_function>:
{
   10a6c:	b590      	push	{r4, r7, lr}
   10a6e:	b085      	sub	sp, #20
   10a70:	af00      	add	r7, sp, #0
   10a72:	6078      	str	r0, [r7, #4]
   10a74:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   10a76:	687b      	ldr	r3, [r7, #4]
   10a78:	095b      	lsrs	r3, r3, #5
   10a7a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   10a7c:	687b      	ldr	r3, [r7, #4]
   10a7e:	b2db      	uxtb	r3, r3
   10a80:	f003 031f 	and.w	r3, r3, #31
   10a84:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
   10a86:	683b      	ldr	r3, [r7, #0]
   10a88:	f1b3 3fff 	cmp.w	r3, #4294967295
   10a8c:	d106      	bne.n	10a9c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   10a8e:	7bba      	ldrb	r2, [r7, #14]
   10a90:	7bf9      	ldrb	r1, [r7, #15]
   10a92:	2300      	movs	r3, #0
   10a94:	4812      	ldr	r0, [pc, #72]	; (10ae0 <_gpio_set_pin_function+0x74>)
   10a96:	4c13      	ldr	r4, [pc, #76]	; (10ae4 <_gpio_set_pin_function+0x78>)
   10a98:	47a0      	blx	r4
}
   10a9a:	e01d      	b.n	10ad8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   10a9c:	7bba      	ldrb	r2, [r7, #14]
   10a9e:	7bf9      	ldrb	r1, [r7, #15]
   10aa0:	2301      	movs	r3, #1
   10aa2:	480f      	ldr	r0, [pc, #60]	; (10ae0 <_gpio_set_pin_function+0x74>)
   10aa4:	4c0f      	ldr	r4, [pc, #60]	; (10ae4 <_gpio_set_pin_function+0x78>)
   10aa6:	47a0      	blx	r4
		if (pin & 1) {
   10aa8:	7bbb      	ldrb	r3, [r7, #14]
   10aaa:	f003 0301 	and.w	r3, r3, #1
   10aae:	2b00      	cmp	r3, #0
   10ab0:	d009      	beq.n	10ac6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   10ab2:	7bbb      	ldrb	r3, [r7, #14]
   10ab4:	085b      	lsrs	r3, r3, #1
   10ab6:	b2da      	uxtb	r2, r3
   10ab8:	683b      	ldr	r3, [r7, #0]
   10aba:	b2db      	uxtb	r3, r3
   10abc:	7bf9      	ldrb	r1, [r7, #15]
   10abe:	4808      	ldr	r0, [pc, #32]	; (10ae0 <_gpio_set_pin_function+0x74>)
   10ac0:	4c09      	ldr	r4, [pc, #36]	; (10ae8 <_gpio_set_pin_function+0x7c>)
   10ac2:	47a0      	blx	r4
}
   10ac4:	e008      	b.n	10ad8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   10ac6:	7bbb      	ldrb	r3, [r7, #14]
   10ac8:	085b      	lsrs	r3, r3, #1
   10aca:	b2da      	uxtb	r2, r3
   10acc:	683b      	ldr	r3, [r7, #0]
   10ace:	b2db      	uxtb	r3, r3
   10ad0:	7bf9      	ldrb	r1, [r7, #15]
   10ad2:	4803      	ldr	r0, [pc, #12]	; (10ae0 <_gpio_set_pin_function+0x74>)
   10ad4:	4c05      	ldr	r4, [pc, #20]	; (10aec <_gpio_set_pin_function+0x80>)
   10ad6:	47a0      	blx	r4
}
   10ad8:	bf00      	nop
   10ada:	3714      	adds	r7, #20
   10adc:	46bd      	mov	sp, r7
   10ade:	bd90      	pop	{r4, r7, pc}
   10ae0:	41008000 	.word	0x41008000
   10ae4:	000108bf 	.word	0x000108bf
   10ae8:	00010861 	.word	0x00010861
   10aec:	00010801 	.word	0x00010801

00010af0 <gpio_set_pin_function>:
{
   10af0:	b580      	push	{r7, lr}
   10af2:	b082      	sub	sp, #8
   10af4:	af00      	add	r7, sp, #0
   10af6:	6078      	str	r0, [r7, #4]
   10af8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   10afa:	6839      	ldr	r1, [r7, #0]
   10afc:	6878      	ldr	r0, [r7, #4]
   10afe:	4b03      	ldr	r3, [pc, #12]	; (10b0c <gpio_set_pin_function+0x1c>)
   10b00:	4798      	blx	r3
}
   10b02:	bf00      	nop
   10b04:	3708      	adds	r7, #8
   10b06:	46bd      	mov	sp, r7
   10b08:	bd80      	pop	{r7, pc}
   10b0a:	bf00      	nop
   10b0c:	00010a6d 	.word	0x00010a6d

00010b10 <gpio_set_pin_direction>:
{
   10b10:	b580      	push	{r7, lr}
   10b12:	b082      	sub	sp, #8
   10b14:	af00      	add	r7, sp, #0
   10b16:	4603      	mov	r3, r0
   10b18:	460a      	mov	r2, r1
   10b1a:	71fb      	strb	r3, [r7, #7]
   10b1c:	4613      	mov	r3, r2
   10b1e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   10b20:	79fb      	ldrb	r3, [r7, #7]
   10b22:	095b      	lsrs	r3, r3, #5
   10b24:	b2d8      	uxtb	r0, r3
   10b26:	79fb      	ldrb	r3, [r7, #7]
   10b28:	f003 031f 	and.w	r3, r3, #31
   10b2c:	2201      	movs	r2, #1
   10b2e:	fa02 f303 	lsl.w	r3, r2, r3
   10b32:	79ba      	ldrb	r2, [r7, #6]
   10b34:	4619      	mov	r1, r3
   10b36:	4b03      	ldr	r3, [pc, #12]	; (10b44 <gpio_set_pin_direction+0x34>)
   10b38:	4798      	blx	r3
}
   10b3a:	bf00      	nop
   10b3c:	3708      	adds	r7, #8
   10b3e:	46bd      	mov	sp, r7
   10b40:	bd80      	pop	{r7, pc}
   10b42:	bf00      	nop
   10b44:	00010941 	.word	0x00010941

00010b48 <gpio_set_pin_level>:
{
   10b48:	b580      	push	{r7, lr}
   10b4a:	b082      	sub	sp, #8
   10b4c:	af00      	add	r7, sp, #0
   10b4e:	4603      	mov	r3, r0
   10b50:	460a      	mov	r2, r1
   10b52:	71fb      	strb	r3, [r7, #7]
   10b54:	4613      	mov	r3, r2
   10b56:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   10b58:	79fb      	ldrb	r3, [r7, #7]
   10b5a:	095b      	lsrs	r3, r3, #5
   10b5c:	b2d8      	uxtb	r0, r3
   10b5e:	79fb      	ldrb	r3, [r7, #7]
   10b60:	f003 031f 	and.w	r3, r3, #31
   10b64:	2201      	movs	r2, #1
   10b66:	fa02 f303 	lsl.w	r3, r2, r3
   10b6a:	79ba      	ldrb	r2, [r7, #6]
   10b6c:	4619      	mov	r1, r3
   10b6e:	4b03      	ldr	r3, [pc, #12]	; (10b7c <gpio_set_pin_level+0x34>)
   10b70:	4798      	blx	r3
}
   10b72:	bf00      	nop
   10b74:	3708      	adds	r7, #8
   10b76:	46bd      	mov	sp, r7
   10b78:	bd80      	pop	{r7, pc}
   10b7a:	bf00      	nop
   10b7c:	00010a29 	.word	0x00010a29

00010b80 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
   10b80:	b580      	push	{r7, lr}
   10b82:	b082      	sub	sp, #8
   10b84:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   10b86:	2100      	movs	r1, #0
   10b88:	2008      	movs	r0, #8
   10b8a:	4b24      	ldr	r3, [pc, #144]	; (10c1c <QSPI_N25Q256_exit_xip+0x9c>)
   10b8c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   10b8e:	2100      	movs	r1, #0
   10b90:	202b      	movs	r0, #43	; 0x2b
   10b92:	4b22      	ldr	r3, [pc, #136]	; (10c1c <QSPI_N25Q256_exit_xip+0x9c>)
   10b94:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   10b96:	2100      	movs	r1, #0
   10b98:	202a      	movs	r0, #42	; 0x2a
   10b9a:	4b20      	ldr	r3, [pc, #128]	; (10c1c <QSPI_N25Q256_exit_xip+0x9c>)
   10b9c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   10b9e:	2102      	movs	r1, #2
   10ba0:	2008      	movs	r0, #8
   10ba2:	4b1f      	ldr	r3, [pc, #124]	; (10c20 <QSPI_N25Q256_exit_xip+0xa0>)
   10ba4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   10ba6:	2102      	movs	r1, #2
   10ba8:	202b      	movs	r0, #43	; 0x2b
   10baa:	4b1d      	ldr	r3, [pc, #116]	; (10c20 <QSPI_N25Q256_exit_xip+0xa0>)
   10bac:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   10bae:	2102      	movs	r1, #2
   10bb0:	202a      	movs	r0, #42	; 0x2a
   10bb2:	4b1b      	ldr	r3, [pc, #108]	; (10c20 <QSPI_N25Q256_exit_xip+0xa0>)
   10bb4:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   10bb6:	2101      	movs	r1, #1
   10bb8:	2008      	movs	r0, #8
   10bba:	4b1a      	ldr	r3, [pc, #104]	; (10c24 <QSPI_N25Q256_exit_xip+0xa4>)
   10bbc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   10bbe:	2100      	movs	r1, #0
   10bc0:	202b      	movs	r0, #43	; 0x2b
   10bc2:	4b18      	ldr	r3, [pc, #96]	; (10c24 <QSPI_N25Q256_exit_xip+0xa4>)
   10bc4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   10bc6:	2100      	movs	r1, #0
   10bc8:	202a      	movs	r0, #42	; 0x2a
   10bca:	4b16      	ldr	r3, [pc, #88]	; (10c24 <QSPI_N25Q256_exit_xip+0xa4>)
   10bcc:	4798      	blx	r3

	delay_us(1);
   10bce:	2001      	movs	r0, #1
   10bd0:	4b15      	ldr	r3, [pc, #84]	; (10c28 <QSPI_N25Q256_exit_xip+0xa8>)
   10bd2:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   10bd4:	2300      	movs	r3, #0
   10bd6:	607b      	str	r3, [r7, #4]
   10bd8:	e010      	b.n	10bfc <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
   10bda:	2101      	movs	r1, #1
   10bdc:	202a      	movs	r0, #42	; 0x2a
   10bde:	4b11      	ldr	r3, [pc, #68]	; (10c24 <QSPI_N25Q256_exit_xip+0xa4>)
   10be0:	4798      	blx	r3
		delay_us(1);
   10be2:	2001      	movs	r0, #1
   10be4:	4b10      	ldr	r3, [pc, #64]	; (10c28 <QSPI_N25Q256_exit_xip+0xa8>)
   10be6:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   10be8:	2100      	movs	r1, #0
   10bea:	202a      	movs	r0, #42	; 0x2a
   10bec:	4b0d      	ldr	r3, [pc, #52]	; (10c24 <QSPI_N25Q256_exit_xip+0xa4>)
   10bee:	4798      	blx	r3
		delay_us(1);
   10bf0:	2001      	movs	r0, #1
   10bf2:	4b0d      	ldr	r3, [pc, #52]	; (10c28 <QSPI_N25Q256_exit_xip+0xa8>)
   10bf4:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   10bf6:	687b      	ldr	r3, [r7, #4]
   10bf8:	3301      	adds	r3, #1
   10bfa:	607b      	str	r3, [r7, #4]
   10bfc:	687b      	ldr	r3, [r7, #4]
   10bfe:	2b06      	cmp	r3, #6
   10c00:	ddeb      	ble.n	10bda <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
   10c02:	2101      	movs	r1, #1
   10c04:	202b      	movs	r0, #43	; 0x2b
   10c06:	4b07      	ldr	r3, [pc, #28]	; (10c24 <QSPI_N25Q256_exit_xip+0xa4>)
   10c08:	4798      	blx	r3
	delay_us(1);
   10c0a:	2001      	movs	r0, #1
   10c0c:	4b06      	ldr	r3, [pc, #24]	; (10c28 <QSPI_N25Q256_exit_xip+0xa8>)
   10c0e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   10c10:	4b06      	ldr	r3, [pc, #24]	; (10c2c <QSPI_N25Q256_exit_xip+0xac>)
   10c12:	4798      	blx	r3
}
   10c14:	bf00      	nop
   10c16:	3708      	adds	r7, #8
   10c18:	46bd      	mov	sp, r7
   10c1a:	bd80      	pop	{r7, pc}
   10c1c:	00010af1 	.word	0x00010af1
   10c20:	00010b11 	.word	0x00010b11
   10c24:	00010b49 	.word	0x00010b49
   10c28:	00005f6d 	.word	0x00005f6d
   10c2c:	00004d0d 	.word	0x00004d0d

00010c30 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
   10c30:	b598      	push	{r3, r4, r7, lr}
   10c32:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
   10c34:	4806      	ldr	r0, [pc, #24]	; (10c50 <spi_nor_flash_init+0x20>)
   10c36:	4b07      	ldr	r3, [pc, #28]	; (10c54 <spi_nor_flash_init+0x24>)
   10c38:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
   10c3a:	2300      	movs	r3, #0
   10c3c:	4a06      	ldr	r2, [pc, #24]	; (10c58 <spi_nor_flash_init+0x28>)
   10c3e:	4904      	ldr	r1, [pc, #16]	; (10c50 <spi_nor_flash_init+0x20>)
   10c40:	4806      	ldr	r0, [pc, #24]	; (10c5c <spi_nor_flash_init+0x2c>)
   10c42:	4c07      	ldr	r4, [pc, #28]	; (10c60 <spi_nor_flash_init+0x30>)
   10c44:	47a0      	blx	r4
   10c46:	4602      	mov	r2, r0
   10c48:	4b06      	ldr	r3, [pc, #24]	; (10c64 <spi_nor_flash_init+0x34>)
   10c4a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
   10c4c:	bf00      	nop
   10c4e:	bd98      	pop	{r3, r4, r7, pc}
   10c50:	2000a9c0 	.word	0x2000a9c0
   10c54:	0000673d 	.word	0x0000673d
   10c58:	00010b81 	.word	0x00010b81
   10c5c:	20008e90 	.word	0x20008e90
   10c60:	0001109d 	.word	0x0001109d
   10c64:	2000ac00 	.word	0x2000ac00

00010c68 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
   10c68:	b580      	push	{r7, lr}
   10c6a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
   10c6c:	4805      	ldr	r0, [pc, #20]	; (10c84 <cdc_device_acm_init+0x1c>)
   10c6e:	4b06      	ldr	r3, [pc, #24]	; (10c88 <cdc_device_acm_init+0x20>)
   10c70:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
   10c72:	4b06      	ldr	r3, [pc, #24]	; (10c8c <cdc_device_acm_init+0x24>)
   10c74:	4798      	blx	r3

	usbdc_start(single_desc);
   10c76:	4806      	ldr	r0, [pc, #24]	; (10c90 <cdc_device_acm_init+0x28>)
   10c78:	4b06      	ldr	r3, [pc, #24]	; (10c94 <cdc_device_acm_init+0x2c>)
   10c7a:	4798      	blx	r3
	usbdc_attach();
   10c7c:	4b06      	ldr	r3, [pc, #24]	; (10c98 <cdc_device_acm_init+0x30>)
   10c7e:	4798      	blx	r3
}
   10c80:	bf00      	nop
   10c82:	bd80      	pop	{r7, pc}
   10c84:	20008ee0 	.word	0x20008ee0
   10c88:	000127c5 	.word	0x000127c5
   10c8c:	00011a3d 	.word	0x00011a3d
   10c90:	20000234 	.word	0x20000234
   10c94:	00012861 	.word	0x00012861
   10c98:	000128b1 	.word	0x000128b1

00010c9c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
   10c9c:	b580      	push	{r7, lr}
   10c9e:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
   10ca0:	4b01      	ldr	r3, [pc, #4]	; (10ca8 <usb_init+0xc>)
   10ca2:	4798      	blx	r3
}
   10ca4:	bf00      	nop
   10ca6:	bd80      	pop	{r7, pc}
   10ca8:	00010c69 	.word	0x00010c69

00010cac <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
   10cac:	b480      	push	{r7}
   10cae:	b085      	sub	sp, #20
   10cb0:	af00      	add	r7, sp, #0
   10cb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   10cb4:	f3ef 8310 	mrs	r3, PRIMASK
   10cb8:	60fb      	str	r3, [r7, #12]
  return(result);
   10cba:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
   10cbc:	687b      	ldr	r3, [r7, #4]
   10cbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   10cc0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   10cc2:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
   10cc6:	bf00      	nop
   10cc8:	3714      	adds	r7, #20
   10cca:	46bd      	mov	sp, r7
   10ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
   10cd0:	4770      	bx	lr

00010cd2 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
   10cd2:	b480      	push	{r7}
   10cd4:	b085      	sub	sp, #20
   10cd6:	af00      	add	r7, sp, #0
   10cd8:	6078      	str	r0, [r7, #4]
   10cda:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
   10cde:	687b      	ldr	r3, [r7, #4]
   10ce0:	681b      	ldr	r3, [r3, #0]
   10ce2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   10ce4:	68fb      	ldr	r3, [r7, #12]
   10ce6:	f383 8810 	msr	PRIMASK, r3
}
   10cea:	bf00      	nop
   10cec:	3714      	adds	r7, #20
   10cee:	46bd      	mov	sp, r7
   10cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
   10cf4:	4770      	bx	lr
	...

00010cf8 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
   10cf8:	b580      	push	{r7, lr}
   10cfa:	b08c      	sub	sp, #48	; 0x30
   10cfc:	af00      	add	r7, sp, #0
   10cfe:	6078      	str	r0, [r7, #4]
   10d00:	460b      	mov	r3, r1
   10d02:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10d04:	687b      	ldr	r3, [r7, #4]
   10d06:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10d08:	687b      	ldr	r3, [r7, #4]
   10d0a:	681b      	ldr	r3, [r3, #0]
   10d0c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
   10d0e:	f107 030c 	add.w	r3, r7, #12
   10d12:	2200      	movs	r2, #0
   10d14:	601a      	str	r2, [r3, #0]
   10d16:	605a      	str	r2, [r3, #4]
   10d18:	609a      	str	r2, [r3, #8]
   10d1a:	60da      	str	r2, [r3, #12]
   10d1c:	611a      	str	r2, [r3, #16]
   10d1e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   10d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10d22:	7b1b      	ldrb	r3, [r3, #12]
   10d24:	2b00      	cmp	r3, #0
   10d26:	d001      	beq.n	10d2c <n25q256a_xip_confirm+0x34>
   10d28:	2206      	movs	r2, #6
   10d2a:	e000      	b.n	10d2e <n25q256a_xip_confirm+0x36>
   10d2c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   10d2e:	7b3b      	ldrb	r3, [r7, #12]
   10d30:	f362 0302 	bfi	r3, r2, #0, #3
   10d34:	733b      	strb	r3, [r7, #12]
   10d36:	7b3b      	ldrb	r3, [r7, #12]
   10d38:	f043 0310 	orr.w	r3, r3, #16
   10d3c:	733b      	strb	r3, [r7, #12]
   10d3e:	7b3b      	ldrb	r3, [r7, #12]
   10d40:	f043 0320 	orr.w	r3, r3, #32
   10d44:	733b      	strb	r3, [r7, #12]
   10d46:	7b3b      	ldrb	r3, [r7, #12]
   10d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d4c:	733b      	strb	r3, [r7, #12]
   10d4e:	7b3b      	ldrb	r3, [r7, #12]
   10d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10d54:	733b      	strb	r3, [r7, #12]
   10d56:	7b7b      	ldrb	r3, [r7, #13]
   10d58:	f043 0303 	orr.w	r3, r3, #3
   10d5c:	737b      	strb	r3, [r7, #13]
   10d5e:	7b7b      	ldrb	r3, [r7, #13]
   10d60:	2201      	movs	r2, #1
   10d62:	f362 1305 	bfi	r3, r2, #4, #2
   10d66:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
   10d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10d6a:	7b1b      	ldrb	r3, [r3, #12]
   10d6c:	2b00      	cmp	r3, #0
   10d6e:	d001      	beq.n	10d74 <n25q256a_xip_confirm+0x7c>
   10d70:	2208      	movs	r2, #8
   10d72:	e000      	b.n	10d76 <n25q256a_xip_confirm+0x7e>
   10d74:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   10d76:	7bbb      	ldrb	r3, [r7, #14]
   10d78:	f362 0304 	bfi	r3, r2, #0, #5
   10d7c:	73bb      	strb	r3, [r7, #14]
   10d7e:	230b      	movs	r3, #11
   10d80:	743b      	strb	r3, [r7, #16]
   10d82:	78fb      	ldrb	r3, [r7, #3]
   10d84:	2b00      	cmp	r3, #0
   10d86:	d001      	beq.n	10d8c <n25q256a_xip_confirm+0x94>
   10d88:	2300      	movs	r3, #0
   10d8a:	e000      	b.n	10d8e <n25q256a_xip_confirm+0x96>
   10d8c:	23ff      	movs	r3, #255	; 0xff
   10d8e:	747b      	strb	r3, [r7, #17]
   10d90:	2301      	movs	r3, #1
   10d92:	61bb      	str	r3, [r7, #24]
   10d94:	f107 0327 	add.w	r3, r7, #39	; 0x27
   10d98:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
   10d9a:	f107 030c 	add.w	r3, r7, #12
   10d9e:	4619      	mov	r1, r3
   10da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10da2:	4b07      	ldr	r3, [pc, #28]	; (10dc0 <n25q256a_xip_confirm+0xc8>)
   10da4:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
   10da6:	78fb      	ldrb	r3, [r7, #3]
   10da8:	2b00      	cmp	r3, #0
   10daa:	d001      	beq.n	10db0 <n25q256a_xip_confirm+0xb8>
   10dac:	2202      	movs	r2, #2
   10dae:	e000      	b.n	10db2 <n25q256a_xip_confirm+0xba>
   10db0:	2201      	movs	r2, #1
   10db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10db4:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   10db6:	2300      	movs	r3, #0
}
   10db8:	4618      	mov	r0, r3
   10dba:	3730      	adds	r7, #48	; 0x30
   10dbc:	46bd      	mov	sp, r7
   10dbe:	bd80      	pop	{r7, pc}
   10dc0:	000067b5 	.word	0x000067b5

00010dc4 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
   10dc4:	b580      	push	{r7, lr}
   10dc6:	b08c      	sub	sp, #48	; 0x30
   10dc8:	af00      	add	r7, sp, #0
   10dca:	6078      	str	r0, [r7, #4]
   10dcc:	460b      	mov	r3, r1
   10dce:	70fb      	strb	r3, [r7, #3]
   10dd0:	4613      	mov	r3, r2
   10dd2:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
   10dd4:	2300      	movs	r3, #0
   10dd6:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
   10dd8:	687b      	ldr	r3, [r7, #4]
   10dda:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
   10ddc:	687b      	ldr	r3, [r7, #4]
   10dde:	681b      	ldr	r3, [r3, #0]
   10de0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
   10de2:	f107 030c 	add.w	r3, r7, #12
   10de6:	2200      	movs	r2, #0
   10de8:	601a      	str	r2, [r3, #0]
   10dea:	605a      	str	r2, [r3, #4]
   10dec:	609a      	str	r2, [r3, #8]
   10dee:	60da      	str	r2, [r3, #12]
   10df0:	611a      	str	r2, [r3, #16]
   10df2:	615a      	str	r2, [r3, #20]
   10df4:	78fb      	ldrb	r3, [r7, #3]
   10df6:	f003 0307 	and.w	r3, r3, #7
   10dfa:	b2da      	uxtb	r2, r3
   10dfc:	7b3b      	ldrb	r3, [r7, #12]
   10dfe:	f362 0302 	bfi	r3, r2, #0, #3
   10e02:	733b      	strb	r3, [r7, #12]
   10e04:	7b3b      	ldrb	r3, [r7, #12]
   10e06:	f043 0310 	orr.w	r3, r3, #16
   10e0a:	733b      	strb	r3, [r7, #12]
   10e0c:	7b3b      	ldrb	r3, [r7, #12]
   10e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10e12:	733b      	strb	r3, [r7, #12]
   10e14:	78bb      	ldrb	r3, [r7, #2]
   10e16:	743b      	strb	r3, [r7, #16]
   10e18:	2301      	movs	r3, #1
   10e1a:	61bb      	str	r3, [r7, #24]
   10e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   10e20:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
   10e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e24:	7b5b      	ldrb	r3, [r3, #13]
   10e26:	2b00      	cmp	r3, #0
   10e28:	d003      	beq.n	10e32 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
   10e2a:	2100      	movs	r1, #0
   10e2c:	6878      	ldr	r0, [r7, #4]
   10e2e:	4b0a      	ldr	r3, [pc, #40]	; (10e58 <n25q256a_read_reg+0x94>)
   10e30:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   10e32:	f107 030c 	add.w	r3, r7, #12
   10e36:	4619      	mov	r1, r3
   10e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10e3a:	4b08      	ldr	r3, [pc, #32]	; (10e5c <n25q256a_read_reg+0x98>)
   10e3c:	4798      	blx	r3
	if (n25q->xip_mode) {
   10e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e40:	7b5b      	ldrb	r3, [r3, #13]
   10e42:	2b00      	cmp	r3, #0
   10e44:	d003      	beq.n	10e4e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
   10e46:	2101      	movs	r1, #1
   10e48:	6878      	ldr	r0, [r7, #4]
   10e4a:	4b03      	ldr	r3, [pc, #12]	; (10e58 <n25q256a_read_reg+0x94>)
   10e4c:	4798      	blx	r3
	}
	return status;
   10e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   10e50:	4618      	mov	r0, r3
   10e52:	3730      	adds	r7, #48	; 0x30
   10e54:	46bd      	mov	sp, r7
   10e56:	bd80      	pop	{r7, pc}
   10e58:	00010cf9 	.word	0x00010cf9
   10e5c:	000067b5 	.word	0x000067b5

00010e60 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
   10e60:	b580      	push	{r7, lr}
   10e62:	b08c      	sub	sp, #48	; 0x30
   10e64:	af00      	add	r7, sp, #0
   10e66:	60f8      	str	r0, [r7, #12]
   10e68:	607b      	str	r3, [r7, #4]
   10e6a:	460b      	mov	r3, r1
   10e6c:	72fb      	strb	r3, [r7, #11]
   10e6e:	4613      	mov	r3, r2
   10e70:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10e72:	68fb      	ldr	r3, [r7, #12]
   10e74:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10e76:	68fb      	ldr	r3, [r7, #12]
   10e78:	681b      	ldr	r3, [r3, #0]
   10e7a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
   10e7c:	f107 0310 	add.w	r3, r7, #16
   10e80:	2200      	movs	r2, #0
   10e82:	601a      	str	r2, [r3, #0]
   10e84:	605a      	str	r2, [r3, #4]
   10e86:	609a      	str	r2, [r3, #8]
   10e88:	60da      	str	r2, [r3, #12]
   10e8a:	611a      	str	r2, [r3, #16]
   10e8c:	615a      	str	r2, [r3, #20]
   10e8e:	7afb      	ldrb	r3, [r7, #11]
   10e90:	f003 0307 	and.w	r3, r3, #7
   10e94:	b2da      	uxtb	r2, r3
   10e96:	7c3b      	ldrb	r3, [r7, #16]
   10e98:	f362 0302 	bfi	r3, r2, #0, #3
   10e9c:	743b      	strb	r3, [r7, #16]
   10e9e:	7c3b      	ldrb	r3, [r7, #16]
   10ea0:	f043 0310 	orr.w	r3, r3, #16
   10ea4:	743b      	strb	r3, [r7, #16]
   10ea6:	7c3b      	ldrb	r3, [r7, #16]
   10ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10eac:	743b      	strb	r3, [r7, #16]
   10eae:	7c7b      	ldrb	r3, [r7, #17]
   10eb0:	2202      	movs	r2, #2
   10eb2:	f362 1305 	bfi	r3, r2, #4, #2
   10eb6:	747b      	strb	r3, [r7, #17]
   10eb8:	7abb      	ldrb	r3, [r7, #10]
   10eba:	753b      	strb	r3, [r7, #20]
   10ebc:	2301      	movs	r3, #1
   10ebe:	61fb      	str	r3, [r7, #28]
   10ec0:	1d3b      	adds	r3, r7, #4
   10ec2:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
   10ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10ec6:	7b5b      	ldrb	r3, [r3, #13]
   10ec8:	2b00      	cmp	r3, #0
   10eca:	d003      	beq.n	10ed4 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
   10ecc:	2100      	movs	r1, #0
   10ece:	68f8      	ldr	r0, [r7, #12]
   10ed0:	4b09      	ldr	r3, [pc, #36]	; (10ef8 <n25q256a_write_reg+0x98>)
   10ed2:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   10ed4:	f107 0310 	add.w	r3, r7, #16
   10ed8:	4619      	mov	r1, r3
   10eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10edc:	4b07      	ldr	r3, [pc, #28]	; (10efc <n25q256a_write_reg+0x9c>)
   10ede:	4798      	blx	r3
	if (n25q->xip_mode) {
   10ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10ee2:	7b5b      	ldrb	r3, [r3, #13]
   10ee4:	2b00      	cmp	r3, #0
   10ee6:	d003      	beq.n	10ef0 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
   10ee8:	2101      	movs	r1, #1
   10eea:	68f8      	ldr	r0, [r7, #12]
   10eec:	4b02      	ldr	r3, [pc, #8]	; (10ef8 <n25q256a_write_reg+0x98>)
   10eee:	4798      	blx	r3
	}
}
   10ef0:	bf00      	nop
   10ef2:	3730      	adds	r7, #48	; 0x30
   10ef4:	46bd      	mov	sp, r7
   10ef6:	bd80      	pop	{r7, pc}
   10ef8:	00010cf9 	.word	0x00010cf9
   10efc:	000067b5 	.word	0x000067b5

00010f00 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
   10f00:	b580      	push	{r7, lr}
   10f02:	b090      	sub	sp, #64	; 0x40
   10f04:	af00      	add	r7, sp, #0
   10f06:	6078      	str	r0, [r7, #4]
   10f08:	460b      	mov	r3, r1
   10f0a:	70fb      	strb	r3, [r7, #3]
   10f0c:	4613      	mov	r3, r2
   10f0e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10f10:	687b      	ldr	r3, [r7, #4]
   10f12:	681b      	ldr	r3, [r3, #0]
   10f14:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
   10f16:	78bb      	ldrb	r3, [r7, #2]
   10f18:	2b00      	cmp	r3, #0
   10f1a:	d001      	beq.n	10f20 <n25q256a_write_enable+0x20>
   10f1c:	2306      	movs	r3, #6
   10f1e:	e000      	b.n	10f22 <n25q256a_write_enable+0x22>
   10f20:	2304      	movs	r3, #4
   10f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
   10f26:	f107 0320 	add.w	r3, r7, #32
   10f2a:	2200      	movs	r2, #0
   10f2c:	601a      	str	r2, [r3, #0]
   10f2e:	605a      	str	r2, [r3, #4]
   10f30:	609a      	str	r2, [r3, #8]
   10f32:	60da      	str	r2, [r3, #12]
   10f34:	611a      	str	r2, [r3, #16]
   10f36:	615a      	str	r2, [r3, #20]
   10f38:	78fb      	ldrb	r3, [r7, #3]
   10f3a:	f003 0307 	and.w	r3, r3, #7
   10f3e:	b2da      	uxtb	r2, r3
   10f40:	f897 3020 	ldrb.w	r3, [r7, #32]
   10f44:	f362 0302 	bfi	r3, r2, #0, #3
   10f48:	f887 3020 	strb.w	r3, [r7, #32]
   10f4c:	f897 3020 	ldrb.w	r3, [r7, #32]
   10f50:	f043 0310 	orr.w	r3, r3, #16
   10f54:	f887 3020 	strb.w	r3, [r7, #32]
   10f58:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   10f5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
   10f60:	f107 0308 	add.w	r3, r7, #8
   10f64:	2200      	movs	r2, #0
   10f66:	601a      	str	r2, [r3, #0]
   10f68:	605a      	str	r2, [r3, #4]
   10f6a:	609a      	str	r2, [r3, #8]
   10f6c:	60da      	str	r2, [r3, #12]
   10f6e:	611a      	str	r2, [r3, #16]
   10f70:	615a      	str	r2, [r3, #20]
   10f72:	78fb      	ldrb	r3, [r7, #3]
   10f74:	f003 0307 	and.w	r3, r3, #7
   10f78:	b2da      	uxtb	r2, r3
   10f7a:	7a3b      	ldrb	r3, [r7, #8]
   10f7c:	f362 0302 	bfi	r3, r2, #0, #3
   10f80:	723b      	strb	r3, [r7, #8]
   10f82:	7a3b      	ldrb	r3, [r7, #8]
   10f84:	f043 0310 	orr.w	r3, r3, #16
   10f88:	723b      	strb	r3, [r7, #8]
   10f8a:	7a3b      	ldrb	r3, [r7, #8]
   10f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10f90:	723b      	strb	r3, [r7, #8]
   10f92:	2305      	movs	r3, #5
   10f94:	733b      	strb	r3, [r7, #12]
   10f96:	2301      	movs	r3, #1
   10f98:	617b      	str	r3, [r7, #20]
   10f9a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   10f9e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
   10fa0:	f107 0320 	add.w	r3, r7, #32
   10fa4:	4619      	mov	r1, r3
   10fa6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   10fa8:	4b08      	ldr	r3, [pc, #32]	; (10fcc <n25q256a_write_enable+0xcc>)
   10faa:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
   10fac:	f107 0308 	add.w	r3, r7, #8
   10fb0:	4619      	mov	r1, r3
   10fb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   10fb4:	4b05      	ldr	r3, [pc, #20]	; (10fcc <n25q256a_write_enable+0xcc>)
   10fb6:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
   10fb8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   10fbc:	f003 0302 	and.w	r3, r3, #2
   10fc0:	2b00      	cmp	r3, #0
   10fc2:	d0ed      	beq.n	10fa0 <n25q256a_write_enable+0xa0>
}
   10fc4:	bf00      	nop
   10fc6:	3740      	adds	r7, #64	; 0x40
   10fc8:	46bd      	mov	sp, r7
   10fca:	bd80      	pop	{r7, pc}
   10fcc:	000067b5 	.word	0x000067b5

00010fd0 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
   10fd0:	b590      	push	{r4, r7, lr}
   10fd2:	b087      	sub	sp, #28
   10fd4:	af00      	add	r7, sp, #0
   10fd6:	6078      	str	r0, [r7, #4]
   10fd8:	460b      	mov	r3, r1
   10fda:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
   10fdc:	687b      	ldr	r3, [r7, #4]
   10fde:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   10fe0:	68fb      	ldr	r3, [r7, #12]
   10fe2:	7b1b      	ldrb	r3, [r3, #12]
   10fe4:	2b00      	cmp	r3, #0
   10fe6:	d001      	beq.n	10fec <n25q256a_switch_mode+0x1c>
   10fe8:	2306      	movs	r3, #6
   10fea:	e000      	b.n	10fee <n25q256a_switch_mode+0x1e>
   10fec:	2300      	movs	r3, #0
   10fee:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   10ff0:	7afb      	ldrb	r3, [r7, #11]
   10ff2:	2265      	movs	r2, #101	; 0x65
   10ff4:	4619      	mov	r1, r3
   10ff6:	6878      	ldr	r0, [r7, #4]
   10ff8:	4b25      	ldr	r3, [pc, #148]	; (11090 <n25q256a_switch_mode+0xc0>)
   10ffa:	4798      	blx	r3
   10ffc:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
   10ffe:	2300      	movs	r3, #0
   11000:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
   11002:	68fb      	ldr	r3, [r7, #12]
   11004:	7b1b      	ldrb	r3, [r3, #12]
   11006:	78fa      	ldrb	r2, [r7, #3]
   11008:	429a      	cmp	r2, r3
   1100a:	d03d      	beq.n	11088 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
   1100c:	78fb      	ldrb	r3, [r7, #3]
   1100e:	2b00      	cmp	r3, #0
   11010:	d00b      	beq.n	1102a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
   11012:	697b      	ldr	r3, [r7, #20]
   11014:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11018:	2b00      	cmp	r3, #0
   1101a:	d011      	beq.n	11040 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
   1101c:	697b      	ldr	r3, [r7, #20]
   1101e:	f003 031f 	and.w	r3, r3, #31
   11022:	617b      	str	r3, [r7, #20]
			modify = 1;
   11024:	2301      	movs	r3, #1
   11026:	74fb      	strb	r3, [r7, #19]
   11028:	e00a      	b.n	11040 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
   1102a:	697b      	ldr	r3, [r7, #20]
   1102c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11030:	2b00      	cmp	r3, #0
   11032:	d105      	bne.n	11040 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
   11034:	697b      	ldr	r3, [r7, #20]
   11036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   1103a:	617b      	str	r3, [r7, #20]
			modify = 1;
   1103c:	2301      	movs	r3, #1
   1103e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
   11040:	7cfb      	ldrb	r3, [r7, #19]
   11042:	2b00      	cmp	r3, #0
   11044:	d021      	beq.n	1108a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
   11046:	68fb      	ldr	r3, [r7, #12]
   11048:	78fa      	ldrb	r2, [r7, #3]
   1104a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
   1104c:	7afb      	ldrb	r3, [r7, #11]
   1104e:	2201      	movs	r2, #1
   11050:	4619      	mov	r1, r3
   11052:	6878      	ldr	r0, [r7, #4]
   11054:	4b0f      	ldr	r3, [pc, #60]	; (11094 <n25q256a_switch_mode+0xc4>)
   11056:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
   11058:	7af9      	ldrb	r1, [r7, #11]
   1105a:	697b      	ldr	r3, [r7, #20]
   1105c:	2261      	movs	r2, #97	; 0x61
   1105e:	6878      	ldr	r0, [r7, #4]
   11060:	4c0d      	ldr	r4, [pc, #52]	; (11098 <n25q256a_switch_mode+0xc8>)
   11062:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   11064:	78fb      	ldrb	r3, [r7, #3]
   11066:	2b00      	cmp	r3, #0
   11068:	d001      	beq.n	1106e <n25q256a_switch_mode+0x9e>
   1106a:	2306      	movs	r3, #6
   1106c:	e000      	b.n	11070 <n25q256a_switch_mode+0xa0>
   1106e:	2300      	movs	r3, #0
   11070:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   11072:	7afb      	ldrb	r3, [r7, #11]
   11074:	2265      	movs	r2, #101	; 0x65
   11076:	4619      	mov	r1, r3
   11078:	6878      	ldr	r0, [r7, #4]
   1107a:	4b05      	ldr	r3, [pc, #20]	; (11090 <n25q256a_switch_mode+0xc0>)
   1107c:	4798      	blx	r3
   1107e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
   11080:	68fb      	ldr	r3, [r7, #12]
   11082:	78fa      	ldrb	r2, [r7, #3]
   11084:	731a      	strb	r2, [r3, #12]
   11086:	e000      	b.n	1108a <n25q256a_switch_mode+0xba>
		return;
   11088:	bf00      	nop
	}
}
   1108a:	371c      	adds	r7, #28
   1108c:	46bd      	mov	sp, r7
   1108e:	bd90      	pop	{r4, r7, pc}
   11090:	00010dc5 	.word	0x00010dc5
   11094:	00010f01 	.word	0x00010f01
   11098:	00010e61 	.word	0x00010e61

0001109c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
   1109c:	b580      	push	{r7, lr}
   1109e:	b086      	sub	sp, #24
   110a0:	af00      	add	r7, sp, #0
   110a2:	60f8      	str	r0, [r7, #12]
   110a4:	60b9      	str	r1, [r7, #8]
   110a6:	607a      	str	r2, [r7, #4]
   110a8:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
   110aa:	68fb      	ldr	r3, [r7, #12]
   110ac:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
   110ae:	4a0c      	ldr	r2, [pc, #48]	; (110e0 <n25q256a_construct+0x44>)
   110b0:	68b9      	ldr	r1, [r7, #8]
   110b2:	68f8      	ldr	r0, [r7, #12]
   110b4:	4b0b      	ldr	r3, [pc, #44]	; (110e4 <n25q256a_construct+0x48>)
   110b6:	4798      	blx	r3
	n25q->quad_mode    = 0;
   110b8:	697b      	ldr	r3, [r7, #20]
   110ba:	2200      	movs	r2, #0
   110bc:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
   110be:	697b      	ldr	r3, [r7, #20]
   110c0:	2200      	movs	r2, #0
   110c2:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
   110c4:	697b      	ldr	r3, [r7, #20]
   110c6:	687a      	ldr	r2, [r7, #4]
   110c8:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
   110ca:	78fb      	ldrb	r3, [r7, #3]
   110cc:	4619      	mov	r1, r3
   110ce:	68f8      	ldr	r0, [r7, #12]
   110d0:	4b05      	ldr	r3, [pc, #20]	; (110e8 <n25q256a_construct+0x4c>)
   110d2:	4798      	blx	r3
	return me;
   110d4:	68fb      	ldr	r3, [r7, #12]
}
   110d6:	4618      	mov	r0, r3
   110d8:	3718      	adds	r7, #24
   110da:	46bd      	mov	sp, r7
   110dc:	bd80      	pop	{r7, pc}
   110de:	bf00      	nop
   110e0:	00020544 	.word	0x00020544
   110e4:	00011579 	.word	0x00011579
   110e8:	00010fd1 	.word	0x00010fd1

000110ec <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   110ec:	b580      	push	{r7, lr}
   110ee:	b08c      	sub	sp, #48	; 0x30
   110f0:	af00      	add	r7, sp, #0
   110f2:	60f8      	str	r0, [r7, #12]
   110f4:	60b9      	str	r1, [r7, #8]
   110f6:	607a      	str	r2, [r7, #4]
   110f8:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   110fa:	68fb      	ldr	r3, [r7, #12]
   110fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   110fe:	68fb      	ldr	r3, [r7, #12]
   11100:	681b      	ldr	r3, [r3, #0]
   11102:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
   11104:	f107 0310 	add.w	r3, r7, #16
   11108:	2200      	movs	r2, #0
   1110a:	601a      	str	r2, [r3, #0]
   1110c:	605a      	str	r2, [r3, #4]
   1110e:	609a      	str	r2, [r3, #8]
   11110:	60da      	str	r2, [r3, #12]
   11112:	611a      	str	r2, [r3, #16]
   11114:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   11116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11118:	7b1b      	ldrb	r3, [r3, #12]
   1111a:	2b00      	cmp	r3, #0
   1111c:	d001      	beq.n	11122 <n25q256a_read+0x36>
   1111e:	2206      	movs	r2, #6
   11120:	e000      	b.n	11124 <n25q256a_read+0x38>
   11122:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
   11124:	7c3b      	ldrb	r3, [r7, #16]
   11126:	f362 0302 	bfi	r3, r2, #0, #3
   1112a:	743b      	strb	r3, [r7, #16]
   1112c:	7c3b      	ldrb	r3, [r7, #16]
   1112e:	f043 0310 	orr.w	r3, r3, #16
   11132:	743b      	strb	r3, [r7, #16]
   11134:	7c3b      	ldrb	r3, [r7, #16]
   11136:	f043 0320 	orr.w	r3, r3, #32
   1113a:	743b      	strb	r3, [r7, #16]
   1113c:	7c3b      	ldrb	r3, [r7, #16]
   1113e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11142:	743b      	strb	r3, [r7, #16]
   11144:	7c7b      	ldrb	r3, [r7, #17]
   11146:	2201      	movs	r2, #1
   11148:	f362 1305 	bfi	r3, r2, #4, #2
   1114c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
   1114e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11150:	7b1b      	ldrb	r3, [r3, #12]
   11152:	2b00      	cmp	r3, #0
   11154:	d001      	beq.n	1115a <n25q256a_read+0x6e>
   11156:	220a      	movs	r2, #10
   11158:	e000      	b.n	1115c <n25q256a_read+0x70>
   1115a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
   1115c:	7cbb      	ldrb	r3, [r7, #18]
   1115e:	f362 0304 	bfi	r3, r2, #0, #5
   11162:	74bb      	strb	r3, [r7, #18]
   11164:	230b      	movs	r3, #11
   11166:	753b      	strb	r3, [r7, #20]
   11168:	687b      	ldr	r3, [r7, #4]
   1116a:	61bb      	str	r3, [r7, #24]
   1116c:	683b      	ldr	r3, [r7, #0]
   1116e:	61fb      	str	r3, [r7, #28]
   11170:	68bb      	ldr	r3, [r7, #8]
   11172:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
   11174:	f107 0310 	add.w	r3, r7, #16
   11178:	4619      	mov	r1, r3
   1117a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1117c:	4b03      	ldr	r3, [pc, #12]	; (1118c <n25q256a_read+0xa0>)
   1117e:	4798      	blx	r3
	return ERR_NONE;
   11180:	2300      	movs	r3, #0
}
   11182:	4618      	mov	r0, r3
   11184:	3730      	adds	r7, #48	; 0x30
   11186:	46bd      	mov	sp, r7
   11188:	bd80      	pop	{r7, pc}
   1118a:	bf00      	nop
   1118c:	000067b5 	.word	0x000067b5

00011190 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   11190:	b580      	push	{r7, lr}
   11192:	b08c      	sub	sp, #48	; 0x30
   11194:	af00      	add	r7, sp, #0
   11196:	60f8      	str	r0, [r7, #12]
   11198:	60b9      	str	r1, [r7, #8]
   1119a:	607a      	str	r2, [r7, #4]
   1119c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   1119e:	68fb      	ldr	r3, [r7, #12]
   111a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   111a2:	68fb      	ldr	r3, [r7, #12]
   111a4:	681b      	ldr	r3, [r3, #0]
   111a6:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
   111a8:	f107 0310 	add.w	r3, r7, #16
   111ac:	2200      	movs	r2, #0
   111ae:	601a      	str	r2, [r3, #0]
   111b0:	605a      	str	r2, [r3, #4]
   111b2:	609a      	str	r2, [r3, #8]
   111b4:	60da      	str	r2, [r3, #12]
   111b6:	611a      	str	r2, [r3, #16]
   111b8:	615a      	str	r2, [r3, #20]
   111ba:	7c3b      	ldrb	r3, [r7, #16]
   111bc:	f043 0310 	orr.w	r3, r3, #16
   111c0:	743b      	strb	r3, [r7, #16]
   111c2:	7c3b      	ldrb	r3, [r7, #16]
   111c4:	f043 0320 	orr.w	r3, r3, #32
   111c8:	743b      	strb	r3, [r7, #16]
   111ca:	7c3b      	ldrb	r3, [r7, #16]
   111cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   111d0:	743b      	strb	r3, [r7, #16]
   111d2:	7c7b      	ldrb	r3, [r7, #17]
   111d4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   111d8:	747b      	strb	r3, [r7, #17]
   111da:	2302      	movs	r3, #2
   111dc:	753b      	strb	r3, [r7, #20]
   111de:	687b      	ldr	r3, [r7, #4]
   111e0:	61bb      	str	r3, [r7, #24]
   111e2:	683b      	ldr	r3, [r7, #0]
   111e4:	61fb      	str	r3, [r7, #28]
   111e6:	68bb      	ldr	r3, [r7, #8]
   111e8:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   111ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   111ec:	7b1b      	ldrb	r3, [r3, #12]
   111ee:	2b00      	cmp	r3, #0
   111f0:	d001      	beq.n	111f6 <n25q256a_write+0x66>
   111f2:	2206      	movs	r2, #6
   111f4:	e000      	b.n	111f8 <n25q256a_write+0x68>
   111f6:	2200      	movs	r2, #0
   111f8:	7c3b      	ldrb	r3, [r7, #16]
   111fa:	f362 0302 	bfi	r3, r2, #0, #3
   111fe:	743b      	strb	r3, [r7, #16]
	while (length) {
   11200:	e035      	b.n	1126e <n25q256a_write+0xde>
		cmd.address = address;
   11202:	687b      	ldr	r3, [r7, #4]
   11204:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
   11206:	683b      	ldr	r3, [r7, #0]
   11208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1120c:	d802      	bhi.n	11214 <n25q256a_write+0x84>
			cmd.buf_len = length;
   1120e:	683b      	ldr	r3, [r7, #0]
   11210:	61fb      	str	r3, [r7, #28]
   11212:	e002      	b.n	1121a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
   11214:	f44f 7380 	mov.w	r3, #256	; 0x100
   11218:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   1121a:	7c3b      	ldrb	r3, [r7, #16]
   1121c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11220:	b2db      	uxtb	r3, r3
   11222:	2201      	movs	r2, #1
   11224:	4619      	mov	r1, r3
   11226:	68f8      	ldr	r0, [r7, #12]
   11228:	4b19      	ldr	r3, [pc, #100]	; (11290 <n25q256a_write+0x100>)
   1122a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
   1122c:	f107 0310 	add.w	r3, r7, #16
   11230:	4619      	mov	r1, r3
   11232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11234:	4b17      	ldr	r3, [pc, #92]	; (11294 <n25q256a_write+0x104>)
   11236:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   11238:	bf00      	nop
   1123a:	7c3b      	ldrb	r3, [r7, #16]
   1123c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11240:	b2db      	uxtb	r3, r3
   11242:	2270      	movs	r2, #112	; 0x70
   11244:	4619      	mov	r1, r3
   11246:	68f8      	ldr	r0, [r7, #12]
   11248:	4b13      	ldr	r3, [pc, #76]	; (11298 <n25q256a_write+0x108>)
   1124a:	4798      	blx	r3
   1124c:	4603      	mov	r3, r0
   1124e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11252:	2b00      	cmp	r3, #0
   11254:	d0f1      	beq.n	1123a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
   11256:	6a3a      	ldr	r2, [r7, #32]
   11258:	69fb      	ldr	r3, [r7, #28]
   1125a:	4413      	add	r3, r2
   1125c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
   1125e:	69fb      	ldr	r3, [r7, #28]
   11260:	683a      	ldr	r2, [r7, #0]
   11262:	1ad3      	subs	r3, r2, r3
   11264:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
   11266:	69fb      	ldr	r3, [r7, #28]
   11268:	687a      	ldr	r2, [r7, #4]
   1126a:	4413      	add	r3, r2
   1126c:	607b      	str	r3, [r7, #4]
	while (length) {
   1126e:	683b      	ldr	r3, [r7, #0]
   11270:	2b00      	cmp	r3, #0
   11272:	d1c6      	bne.n	11202 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
   11274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11276:	7b5b      	ldrb	r3, [r3, #13]
   11278:	2b00      	cmp	r3, #0
   1127a:	d003      	beq.n	11284 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
   1127c:	2101      	movs	r1, #1
   1127e:	68f8      	ldr	r0, [r7, #12]
   11280:	4b06      	ldr	r3, [pc, #24]	; (1129c <n25q256a_write+0x10c>)
   11282:	4798      	blx	r3
	}
	return ERR_NONE;
   11284:	2300      	movs	r3, #0
}
   11286:	4618      	mov	r0, r3
   11288:	3730      	adds	r7, #48	; 0x30
   1128a:	46bd      	mov	sp, r7
   1128c:	bd80      	pop	{r7, pc}
   1128e:	bf00      	nop
   11290:	00010f01 	.word	0x00010f01
   11294:	000067b5 	.word	0x000067b5
   11298:	00010dc5 	.word	0x00010dc5
   1129c:	00010cf9 	.word	0x00010cf9

000112a0 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
   112a0:	b580      	push	{r7, lr}
   112a2:	b090      	sub	sp, #64	; 0x40
   112a4:	af00      	add	r7, sp, #0
   112a6:	60f8      	str	r0, [r7, #12]
   112a8:	60b9      	str	r1, [r7, #8]
   112aa:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   112ac:	68fb      	ldr	r3, [r7, #12]
   112ae:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   112b0:	68fb      	ldr	r3, [r7, #12]
   112b2:	681b      	ldr	r3, [r3, #0]
   112b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
   112b6:	f107 0314 	add.w	r3, r7, #20
   112ba:	2200      	movs	r2, #0
   112bc:	601a      	str	r2, [r3, #0]
   112be:	605a      	str	r2, [r3, #4]
   112c0:	609a      	str	r2, [r3, #8]
   112c2:	60da      	str	r2, [r3, #12]
   112c4:	611a      	str	r2, [r3, #16]
   112c6:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   112c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   112ca:	7b1b      	ldrb	r3, [r3, #12]
   112cc:	2b00      	cmp	r3, #0
   112ce:	d001      	beq.n	112d4 <n25q256a_erase+0x34>
   112d0:	2206      	movs	r2, #6
   112d2:	e000      	b.n	112d6 <n25q256a_erase+0x36>
   112d4:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
   112d6:	7d3b      	ldrb	r3, [r7, #20]
   112d8:	f362 0302 	bfi	r3, r2, #0, #3
   112dc:	753b      	strb	r3, [r7, #20]
   112de:	7d3b      	ldrb	r3, [r7, #20]
   112e0:	f043 0310 	orr.w	r3, r3, #16
   112e4:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
   112e6:	687b      	ldr	r3, [r7, #4]
   112e8:	4a56      	ldr	r2, [pc, #344]	; (11444 <n25q256a_erase+0x1a4>)
   112ea:	4293      	cmp	r3, r2
   112ec:	bf94      	ite	ls
   112ee:	2301      	movls	r3, #1
   112f0:	2300      	movhi	r3, #0
   112f2:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
   112f4:	7d3b      	ldrb	r3, [r7, #20]
   112f6:	f362 1345 	bfi	r3, r2, #5, #1
   112fa:	753b      	strb	r3, [r7, #20]
   112fc:	7d7b      	ldrb	r3, [r7, #21]
   112fe:	2202      	movs	r2, #2
   11300:	f362 1305 	bfi	r3, r2, #4, #2
   11304:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
   11306:	68bb      	ldr	r3, [r7, #8]
   11308:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
   1130a:	687b      	ldr	r3, [r7, #4]
   1130c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
   1130e:	2300      	movs	r3, #0
   11310:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
   11312:	687b      	ldr	r3, [r7, #4]
   11314:	f3c3 030b 	ubfx	r3, r3, #0, #12
   11318:	2b00      	cmp	r3, #0
   1131a:	d104      	bne.n	11326 <n25q256a_erase+0x86>
   1131c:	68bb      	ldr	r3, [r7, #8]
   1131e:	f3c3 030b 	ubfx	r3, r3, #0, #12
   11322:	2b00      	cmp	r3, #0
   11324:	d002      	beq.n	1132c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
   11326:	f06f 030c 	mvn.w	r3, #12
   1132a:	e087      	b.n	1143c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
   1132c:	687b      	ldr	r3, [r7, #4]
   1132e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   11332:	d368      	bcc.n	11406 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
   11334:	23c7      	movs	r3, #199	; 0xc7
   11336:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   11338:	7d3b      	ldrb	r3, [r7, #20]
   1133a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1133e:	b2db      	uxtb	r3, r3
   11340:	2201      	movs	r2, #1
   11342:	4619      	mov	r1, r3
   11344:	68f8      	ldr	r0, [r7, #12]
   11346:	4b40      	ldr	r3, [pc, #256]	; (11448 <n25q256a_erase+0x1a8>)
   11348:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
   1134a:	f107 0314 	add.w	r3, r7, #20
   1134e:	4619      	mov	r1, r3
   11350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11352:	4b3e      	ldr	r3, [pc, #248]	; (1144c <n25q256a_erase+0x1ac>)
   11354:	4798      	blx	r3
   11356:	e059      	b.n	1140c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
   11358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1135a:	b29b      	uxth	r3, r3
   1135c:	2b00      	cmp	r3, #0
   1135e:	d11f      	bne.n	113a0 <n25q256a_erase+0x100>
   11360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   11366:	d31b      	bcc.n	113a0 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
   11368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1136a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
   1136c:	23d8      	movs	r3, #216	; 0xd8
   1136e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   11370:	7d3b      	ldrb	r3, [r7, #20]
   11372:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11376:	b2db      	uxtb	r3, r3
   11378:	2201      	movs	r2, #1
   1137a:	4619      	mov	r1, r3
   1137c:	68f8      	ldr	r0, [r7, #12]
   1137e:	4b32      	ldr	r3, [pc, #200]	; (11448 <n25q256a_erase+0x1a8>)
   11380:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   11382:	f107 0314 	add.w	r3, r7, #20
   11386:	4619      	mov	r1, r3
   11388:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1138a:	4b30      	ldr	r3, [pc, #192]	; (1144c <n25q256a_erase+0x1ac>)
   1138c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
   1138e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11390:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   11394:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
   11396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11398:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   1139c:	63bb      	str	r3, [r7, #56]	; 0x38
   1139e:	e023      	b.n	113e8 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
   113a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   113a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   113a6:	d31b      	bcc.n	113e0 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
   113a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   113aa:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
   113ac:	2320      	movs	r3, #32
   113ae:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   113b0:	7d3b      	ldrb	r3, [r7, #20]
   113b2:	f3c3 0302 	ubfx	r3, r3, #0, #3
   113b6:	b2db      	uxtb	r3, r3
   113b8:	2201      	movs	r2, #1
   113ba:	4619      	mov	r1, r3
   113bc:	68f8      	ldr	r0, [r7, #12]
   113be:	4b22      	ldr	r3, [pc, #136]	; (11448 <n25q256a_erase+0x1a8>)
   113c0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   113c2:	f107 0314 	add.w	r3, r7, #20
   113c6:	4619      	mov	r1, r3
   113c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   113ca:	4b20      	ldr	r3, [pc, #128]	; (1144c <n25q256a_erase+0x1ac>)
   113cc:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
   113ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   113d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   113d4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
   113d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   113d8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   113dc:	63bb      	str	r3, [r7, #56]	; 0x38
   113de:	e003      	b.n	113e8 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
   113e0:	f06f 030c 	mvn.w	r3, #12
   113e4:	637b      	str	r3, [r7, #52]	; 0x34
				break;
   113e6:	e011      	b.n	1140c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   113e8:	bf00      	nop
   113ea:	7d3b      	ldrb	r3, [r7, #20]
   113ec:	f3c3 0302 	ubfx	r3, r3, #0, #3
   113f0:	b2db      	uxtb	r3, r3
   113f2:	2270      	movs	r2, #112	; 0x70
   113f4:	4619      	mov	r1, r3
   113f6:	68f8      	ldr	r0, [r7, #12]
   113f8:	4b15      	ldr	r3, [pc, #84]	; (11450 <n25q256a_erase+0x1b0>)
   113fa:	4798      	blx	r3
   113fc:	4603      	mov	r3, r0
   113fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11402:	2b00      	cmp	r3, #0
   11404:	d0f1      	beq.n	113ea <n25q256a_erase+0x14a>
		while (temp_len > 0) {
   11406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11408:	2b00      	cmp	r3, #0
   1140a:	d1a5      	bne.n	11358 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   1140c:	bf00      	nop
   1140e:	7d3b      	ldrb	r3, [r7, #20]
   11410:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11414:	b2db      	uxtb	r3, r3
   11416:	2270      	movs	r2, #112	; 0x70
   11418:	4619      	mov	r1, r3
   1141a:	68f8      	ldr	r0, [r7, #12]
   1141c:	4b0c      	ldr	r3, [pc, #48]	; (11450 <n25q256a_erase+0x1b0>)
   1141e:	4798      	blx	r3
   11420:	4603      	mov	r3, r0
   11422:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11426:	2b00      	cmp	r3, #0
   11428:	d0f1      	beq.n	1140e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
   1142a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1142c:	7b5b      	ldrb	r3, [r3, #13]
   1142e:	2b00      	cmp	r3, #0
   11430:	d003      	beq.n	1143a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
   11432:	2101      	movs	r1, #1
   11434:	68f8      	ldr	r0, [r7, #12]
   11436:	4b07      	ldr	r3, [pc, #28]	; (11454 <n25q256a_erase+0x1b4>)
   11438:	4798      	blx	r3
	}
	return rc;
   1143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   1143c:	4618      	mov	r0, r3
   1143e:	3740      	adds	r7, #64	; 0x40
   11440:	46bd      	mov	sp, r7
   11442:	bd80      	pop	{r7, pc}
   11444:	001fffff 	.word	0x001fffff
   11448:	00010f01 	.word	0x00010f01
   1144c:	000067b5 	.word	0x000067b5
   11450:	00010dc5 	.word	0x00010dc5
   11454:	00010cf9 	.word	0x00010cf9

00011458 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
   11458:	b590      	push	{r4, r7, lr}
   1145a:	b085      	sub	sp, #20
   1145c:	af00      	add	r7, sp, #0
   1145e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
   11460:	687b      	ldr	r3, [r7, #4]
   11462:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   11464:	68fb      	ldr	r3, [r7, #12]
   11466:	7b1b      	ldrb	r3, [r3, #12]
   11468:	2b00      	cmp	r3, #0
   1146a:	d001      	beq.n	11470 <n25q256a_enable_xip+0x18>
   1146c:	2306      	movs	r3, #6
   1146e:	e000      	b.n	11472 <n25q256a_enable_xip+0x1a>
   11470:	2300      	movs	r3, #0
   11472:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
   11474:	68fb      	ldr	r3, [r7, #12]
   11476:	7b5b      	ldrb	r3, [r3, #13]
   11478:	2b00      	cmp	r3, #0
   1147a:	d129      	bne.n	114d0 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   1147c:	7afb      	ldrb	r3, [r7, #11]
   1147e:	2285      	movs	r2, #133	; 0x85
   11480:	4619      	mov	r1, r3
   11482:	6878      	ldr	r0, [r7, #4]
   11484:	4b15      	ldr	r3, [pc, #84]	; (114dc <n25q256a_enable_xip+0x84>)
   11486:	4798      	blx	r3
   11488:	4603      	mov	r3, r0
   1148a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
   1148c:	7abb      	ldrb	r3, [r7, #10]
   1148e:	f003 0308 	and.w	r3, r3, #8
   11492:	2b00      	cmp	r3, #0
   11494:	d015      	beq.n	114c2 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
   11496:	7abb      	ldrb	r3, [r7, #10]
   11498:	f023 0308 	bic.w	r3, r3, #8
   1149c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
   1149e:	7abb      	ldrb	r3, [r7, #10]
   114a0:	7af9      	ldrb	r1, [r7, #11]
   114a2:	2281      	movs	r2, #129	; 0x81
   114a4:	6878      	ldr	r0, [r7, #4]
   114a6:	4c0e      	ldr	r4, [pc, #56]	; (114e0 <n25q256a_enable_xip+0x88>)
   114a8:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   114aa:	bf00      	nop
   114ac:	7afb      	ldrb	r3, [r7, #11]
   114ae:	2270      	movs	r2, #112	; 0x70
   114b0:	4619      	mov	r1, r3
   114b2:	6878      	ldr	r0, [r7, #4]
   114b4:	4b09      	ldr	r3, [pc, #36]	; (114dc <n25q256a_enable_xip+0x84>)
   114b6:	4798      	blx	r3
   114b8:	4603      	mov	r3, r0
   114ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
   114be:	2b00      	cmp	r3, #0
   114c0:	d0f4      	beq.n	114ac <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
   114c2:	68fb      	ldr	r3, [r7, #12]
   114c4:	2201      	movs	r2, #1
   114c6:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
   114c8:	2101      	movs	r1, #1
   114ca:	6878      	ldr	r0, [r7, #4]
   114cc:	4b05      	ldr	r3, [pc, #20]	; (114e4 <n25q256a_enable_xip+0x8c>)
   114ce:	4798      	blx	r3
	}
	return ERR_NONE;
   114d0:	2300      	movs	r3, #0
}
   114d2:	4618      	mov	r0, r3
   114d4:	3714      	adds	r7, #20
   114d6:	46bd      	mov	sp, r7
   114d8:	bd90      	pop	{r4, r7, pc}
   114da:	bf00      	nop
   114dc:	00010dc5 	.word	0x00010dc5
   114e0:	00010e61 	.word	0x00010e61
   114e4:	00010cf9 	.word	0x00010cf9

000114e8 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
   114e8:	b580      	push	{r7, lr}
   114ea:	b086      	sub	sp, #24
   114ec:	af00      	add	r7, sp, #0
   114ee:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   114f0:	687b      	ldr	r3, [r7, #4]
   114f2:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   114f4:	687b      	ldr	r3, [r7, #4]
   114f6:	681b      	ldr	r3, [r3, #0]
   114f8:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   114fa:	697b      	ldr	r3, [r7, #20]
   114fc:	7b1b      	ldrb	r3, [r3, #12]
   114fe:	2b00      	cmp	r3, #0
   11500:	d001      	beq.n	11506 <n25q256a_disable_xip+0x1e>
   11502:	2306      	movs	r3, #6
   11504:	e000      	b.n	11508 <n25q256a_disable_xip+0x20>
   11506:	2300      	movs	r3, #0
   11508:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
   1150a:	2100      	movs	r1, #0
   1150c:	6878      	ldr	r0, [r7, #4]
   1150e:	4b15      	ldr	r3, [pc, #84]	; (11564 <n25q256a_disable_xip+0x7c>)
   11510:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   11512:	7bfb      	ldrb	r3, [r7, #15]
   11514:	2285      	movs	r2, #133	; 0x85
   11516:	4619      	mov	r1, r3
   11518:	6878      	ldr	r0, [r7, #4]
   1151a:	4b13      	ldr	r3, [pc, #76]	; (11568 <n25q256a_disable_xip+0x80>)
   1151c:	4798      	blx	r3
   1151e:	4603      	mov	r3, r0
   11520:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
   11522:	7bbb      	ldrb	r3, [r7, #14]
   11524:	f003 0308 	and.w	r3, r3, #8
   11528:	2b00      	cmp	r3, #0
   1152a:	d113      	bne.n	11554 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
   1152c:	697b      	ldr	r3, [r7, #20]
   1152e:	689b      	ldr	r3, [r3, #8]
   11530:	2b00      	cmp	r3, #0
   11532:	d00f      	beq.n	11554 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
   11534:	693b      	ldr	r3, [r7, #16]
   11536:	681b      	ldr	r3, [r3, #0]
   11538:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
   1153a:	6938      	ldr	r0, [r7, #16]
   1153c:	4b0b      	ldr	r3, [pc, #44]	; (1156c <n25q256a_disable_xip+0x84>)
   1153e:	4798      	blx	r3
			n25q->pin_exit_xip();
   11540:	697b      	ldr	r3, [r7, #20]
   11542:	689b      	ldr	r3, [r3, #8]
   11544:	4798      	blx	r3

			qspi_sync_init(descr, hw);
   11546:	68b9      	ldr	r1, [r7, #8]
   11548:	6938      	ldr	r0, [r7, #16]
   1154a:	4b09      	ldr	r3, [pc, #36]	; (11570 <n25q256a_disable_xip+0x88>)
   1154c:	4798      	blx	r3
			qspi_sync_enable(descr);
   1154e:	6938      	ldr	r0, [r7, #16]
   11550:	4b08      	ldr	r3, [pc, #32]	; (11574 <n25q256a_disable_xip+0x8c>)
   11552:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
   11554:	697b      	ldr	r3, [r7, #20]
   11556:	2200      	movs	r2, #0
   11558:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   1155a:	2300      	movs	r3, #0
}
   1155c:	4618      	mov	r0, r3
   1155e:	3718      	adds	r7, #24
   11560:	46bd      	mov	sp, r7
   11562:	bd80      	pop	{r7, pc}
   11564:	00010cf9 	.word	0x00010cf9
   11568:	00010dc5 	.word	0x00010dc5
   1156c:	00006779 	.word	0x00006779
   11570:	000066f1 	.word	0x000066f1
   11574:	0000673d 	.word	0x0000673d

00011578 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
   11578:	b480      	push	{r7}
   1157a:	b085      	sub	sp, #20
   1157c:	af00      	add	r7, sp, #0
   1157e:	60f8      	str	r0, [r7, #12]
   11580:	60b9      	str	r1, [r7, #8]
   11582:	607a      	str	r2, [r7, #4]
	me->io        = io;
   11584:	68fb      	ldr	r3, [r7, #12]
   11586:	68ba      	ldr	r2, [r7, #8]
   11588:	601a      	str	r2, [r3, #0]
	me->interface = interface;
   1158a:	68fb      	ldr	r3, [r7, #12]
   1158c:	687a      	ldr	r2, [r7, #4]
   1158e:	605a      	str	r2, [r3, #4]

	return me;
   11590:	68fb      	ldr	r3, [r7, #12]
}
   11592:	4618      	mov	r0, r3
   11594:	3714      	adds	r7, #20
   11596:	46bd      	mov	sp, r7
   11598:	f85d 7b04 	ldr.w	r7, [sp], #4
   1159c:	4770      	bx	lr

0001159e <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
   1159e:	b480      	push	{r7}
   115a0:	b083      	sub	sp, #12
   115a2:	af00      	add	r7, sp, #0
   115a4:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   115a6:	687b      	ldr	r3, [r7, #4]
   115a8:	781b      	ldrb	r3, [r3, #0]
   115aa:	b29a      	uxth	r2, r3
   115ac:	687b      	ldr	r3, [r7, #4]
   115ae:	3301      	adds	r3, #1
   115b0:	781b      	ldrb	r3, [r3, #0]
   115b2:	b29b      	uxth	r3, r3
   115b4:	021b      	lsls	r3, r3, #8
   115b6:	b29b      	uxth	r3, r3
   115b8:	4413      	add	r3, r2
   115ba:	b29b      	uxth	r3, r3
}
   115bc:	4618      	mov	r0, r3
   115be:	370c      	adds	r7, #12
   115c0:	46bd      	mov	sp, r7
   115c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   115c6:	4770      	bx	lr

000115c8 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
   115c8:	b480      	push	{r7}
   115ca:	b083      	sub	sp, #12
   115cc:	af00      	add	r7, sp, #0
   115ce:	6078      	str	r0, [r7, #4]
	return desc[0];
   115d0:	687b      	ldr	r3, [r7, #4]
   115d2:	781b      	ldrb	r3, [r3, #0]
}
   115d4:	4618      	mov	r0, r3
   115d6:	370c      	adds	r7, #12
   115d8:	46bd      	mov	sp, r7
   115da:	f85d 7b04 	ldr.w	r7, [sp], #4
   115de:	4770      	bx	lr

000115e0 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
   115e0:	b580      	push	{r7, lr}
   115e2:	b082      	sub	sp, #8
   115e4:	af00      	add	r7, sp, #0
   115e6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   115e8:	6878      	ldr	r0, [r7, #4]
   115ea:	4b05      	ldr	r3, [pc, #20]	; (11600 <usb_desc_next+0x20>)
   115ec:	4798      	blx	r3
   115ee:	4603      	mov	r3, r0
   115f0:	461a      	mov	r2, r3
   115f2:	687b      	ldr	r3, [r7, #4]
   115f4:	4413      	add	r3, r2
}
   115f6:	4618      	mov	r0, r3
   115f8:	3708      	adds	r7, #8
   115fa:	46bd      	mov	sp, r7
   115fc:	bd80      	pop	{r7, pc}
   115fe:	bf00      	nop
   11600:	000115c9 	.word	0x000115c9

00011604 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   11604:	b580      	push	{r7, lr}
   11606:	b08c      	sub	sp, #48	; 0x30
   11608:	af00      	add	r7, sp, #0
   1160a:	6078      	str	r0, [r7, #4]
   1160c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   1160e:	687b      	ldr	r3, [r7, #4]
   11610:	689b      	ldr	r3, [r3, #8]
   11612:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
   11614:	683b      	ldr	r3, [r7, #0]
   11616:	681b      	ldr	r3, [r3, #0]
   11618:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   1161a:	2300      	movs	r3, #0
   1161c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   11620:	e08f      	b.n	11742 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
   11622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11624:	2b00      	cmp	r3, #0
   11626:	d102      	bne.n	1162e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
   11628:	f06f 0309 	mvn.w	r3, #9
   1162c:	e092      	b.n	11754 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
   1162e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11630:	789b      	ldrb	r3, [r3, #2]
   11632:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
   11634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11636:	795b      	ldrb	r3, [r3, #5]
   11638:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
   1163a:	7c7b      	ldrb	r3, [r7, #17]
   1163c:	2b02      	cmp	r3, #2
   1163e:	d002      	beq.n	11646 <cdcdf_acm_enable+0x42>
   11640:	7c7b      	ldrb	r3, [r7, #17]
   11642:	2b0a      	cmp	r3, #10
   11644:	d121      	bne.n	1168a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   11646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1164a:	6a3a      	ldr	r2, [r7, #32]
   1164c:	5cd2      	ldrb	r2, [r2, r3]
   1164e:	7bbb      	ldrb	r3, [r7, #14]
   11650:	429a      	cmp	r2, r3
   11652:	d102      	bne.n	1165a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
   11654:	f06f 0311 	mvn.w	r3, #17
   11658:	e07c      	b.n	11754 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
   1165a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1165e:	6a3a      	ldr	r2, [r7, #32]
   11660:	5cd3      	ldrb	r3, [r2, r3]
   11662:	2bff      	cmp	r3, #255	; 0xff
   11664:	d002      	beq.n	1166c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
   11666:	f06f 031b 	mvn.w	r3, #27
   1166a:	e073      	b.n	11754 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
   1166c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11670:	7bb9      	ldrb	r1, [r7, #14]
   11672:	6a3a      	ldr	r2, [r7, #32]
   11674:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   11676:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
   11678:	683b      	ldr	r3, [r7, #0]
   1167a:	685b      	ldr	r3, [r3, #4]
   1167c:	2205      	movs	r2, #5
   1167e:	4619      	mov	r1, r3
   11680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11682:	4b36      	ldr	r3, [pc, #216]	; (1175c <cdcdf_acm_enable+0x158>)
   11684:	4798      	blx	r3
   11686:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   11688:	e047      	b.n	1171a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
   1168a:	f06f 0309 	mvn.w	r3, #9
   1168e:	e061      	b.n	11754 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
   11690:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11692:	789b      	ldrb	r3, [r3, #2]
   11694:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
   11696:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11698:	78db      	ldrb	r3, [r3, #3]
   1169a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
   1169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1169e:	3304      	adds	r3, #4
   116a0:	4618      	mov	r0, r3
   116a2:	4b2f      	ldr	r3, [pc, #188]	; (11760 <cdcdf_acm_enable+0x15c>)
   116a4:	4798      	blx	r3
   116a6:	4603      	mov	r3, r0
   116a8:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
   116aa:	7ebb      	ldrb	r3, [r7, #26]
   116ac:	7ef9      	ldrb	r1, [r7, #27]
   116ae:	8bba      	ldrh	r2, [r7, #28]
   116b0:	4618      	mov	r0, r3
   116b2:	4b2c      	ldr	r3, [pc, #176]	; (11764 <cdcdf_acm_enable+0x160>)
   116b4:	4798      	blx	r3
   116b6:	4603      	mov	r3, r0
   116b8:	2b00      	cmp	r3, #0
   116ba:	d002      	beq.n	116c2 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
   116bc:	f06f 0313 	mvn.w	r3, #19
   116c0:	e048      	b.n	11754 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
   116c2:	7ebb      	ldrb	r3, [r7, #26]
   116c4:	b25b      	sxtb	r3, r3
   116c6:	2b00      	cmp	r3, #0
   116c8:	da0f      	bge.n	116ea <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
   116ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   116ce:	7eb9      	ldrb	r1, [r7, #26]
   116d0:	6a3a      	ldr	r2, [r7, #32]
   116d2:	4413      	add	r3, r2
   116d4:	460a      	mov	r2, r1
   116d6:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
   116d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   116dc:	6a3a      	ldr	r2, [r7, #32]
   116de:	4413      	add	r3, r2
   116e0:	789b      	ldrb	r3, [r3, #2]
   116e2:	4618      	mov	r0, r3
   116e4:	4b20      	ldr	r3, [pc, #128]	; (11768 <cdcdf_acm_enable+0x164>)
   116e6:	4798      	blx	r3
   116e8:	e007      	b.n	116fa <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
   116ea:	7eba      	ldrb	r2, [r7, #26]
   116ec:	6a3b      	ldr	r3, [r7, #32]
   116ee:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
   116f0:	6a3b      	ldr	r3, [r7, #32]
   116f2:	791b      	ldrb	r3, [r3, #4]
   116f4:	4618      	mov	r0, r3
   116f6:	4b1c      	ldr	r3, [pc, #112]	; (11768 <cdcdf_acm_enable+0x164>)
   116f8:	4798      	blx	r3
			}
			desc->sod = ep;
   116fa:	683b      	ldr	r3, [r7, #0]
   116fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   116fe:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
   11700:	683b      	ldr	r3, [r7, #0]
   11702:	681b      	ldr	r3, [r3, #0]
   11704:	4618      	mov	r0, r3
   11706:	4b19      	ldr	r3, [pc, #100]	; (1176c <cdcdf_acm_enable+0x168>)
   11708:	4798      	blx	r3
   1170a:	4602      	mov	r2, r0
   1170c:	683b      	ldr	r3, [r7, #0]
   1170e:	685b      	ldr	r3, [r3, #4]
   11710:	4619      	mov	r1, r3
   11712:	4610      	mov	r0, r2
   11714:	4b16      	ldr	r3, [pc, #88]	; (11770 <cdcdf_acm_enable+0x16c>)
   11716:	4798      	blx	r3
   11718:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   1171a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1171c:	2b00      	cmp	r3, #0
   1171e:	d1b7      	bne.n	11690 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
   11720:	683b      	ldr	r3, [r7, #0]
   11722:	681b      	ldr	r3, [r3, #0]
   11724:	4618      	mov	r0, r3
   11726:	4b11      	ldr	r3, [pc, #68]	; (1176c <cdcdf_acm_enable+0x168>)
   11728:	4798      	blx	r3
   1172a:	683b      	ldr	r3, [r7, #0]
   1172c:	685b      	ldr	r3, [r3, #4]
   1172e:	2204      	movs	r2, #4
   11730:	4619      	mov	r1, r3
   11732:	4b0a      	ldr	r3, [pc, #40]	; (1175c <cdcdf_acm_enable+0x158>)
   11734:	4798      	blx	r3
   11736:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   11738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1173c:	3301      	adds	r3, #1
   1173e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   11742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11746:	2b01      	cmp	r3, #1
   11748:	f67f af6b 	bls.w	11622 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
   1174c:	4b09      	ldr	r3, [pc, #36]	; (11774 <cdcdf_acm_enable+0x170>)
   1174e:	2201      	movs	r2, #1
   11750:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   11752:	2300      	movs	r3, #0
}
   11754:	4618      	mov	r0, r3
   11756:	3730      	adds	r7, #48	; 0x30
   11758:	46bd      	mov	sp, r7
   1175a:	bd80      	pop	{r7, pc}
   1175c:	000129c5 	.word	0x000129c5
   11760:	0001159f 	.word	0x0001159f
   11764:	000078f1 	.word	0x000078f1
   11768:	000079dd 	.word	0x000079dd
   1176c:	000115e1 	.word	0x000115e1
   11770:	00012a21 	.word	0x00012a21
   11774:	20008f2c 	.word	0x20008f2c

00011778 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   11778:	b580      	push	{r7, lr}
   1177a:	b088      	sub	sp, #32
   1177c:	af00      	add	r7, sp, #0
   1177e:	6078      	str	r0, [r7, #4]
   11780:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   11782:	687b      	ldr	r3, [r7, #4]
   11784:	689b      	ldr	r3, [r3, #8]
   11786:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
   11788:	683b      	ldr	r3, [r7, #0]
   1178a:	2b00      	cmp	r3, #0
   1178c:	d00c      	beq.n	117a8 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
   1178e:	683b      	ldr	r3, [r7, #0]
   11790:	681b      	ldr	r3, [r3, #0]
   11792:	795b      	ldrb	r3, [r3, #5]
   11794:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
   11796:	7c7b      	ldrb	r3, [r7, #17]
   11798:	2b02      	cmp	r3, #2
   1179a:	d005      	beq.n	117a8 <cdcdf_acm_disable+0x30>
   1179c:	7c7b      	ldrb	r3, [r7, #17]
   1179e:	2b0a      	cmp	r3, #10
   117a0:	d002      	beq.n	117a8 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
   117a2:	f06f 0309 	mvn.w	r3, #9
   117a6:	e035      	b.n	11814 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
   117a8:	2300      	movs	r3, #0
   117aa:	77fb      	strb	r3, [r7, #31]
   117ac:	e01f      	b.n	117ee <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
   117ae:	7ffb      	ldrb	r3, [r7, #31]
   117b0:	69ba      	ldr	r2, [r7, #24]
   117b2:	5cd3      	ldrb	r3, [r2, r3]
   117b4:	2bff      	cmp	r3, #255	; 0xff
   117b6:	d016      	beq.n	117e6 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
   117b8:	7ffb      	ldrb	r3, [r7, #31]
   117ba:	69ba      	ldr	r2, [r7, #24]
   117bc:	21ff      	movs	r1, #255	; 0xff
   117be:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
   117c0:	7ffb      	ldrb	r3, [r7, #31]
   117c2:	69ba      	ldr	r2, [r7, #24]
   117c4:	4413      	add	r3, r2
   117c6:	789b      	ldrb	r3, [r3, #2]
   117c8:	2bff      	cmp	r3, #255	; 0xff
   117ca:	d00d      	beq.n	117e8 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
   117cc:	7ffb      	ldrb	r3, [r7, #31]
   117ce:	69ba      	ldr	r2, [r7, #24]
   117d0:	4413      	add	r3, r2
   117d2:	789b      	ldrb	r3, [r3, #2]
   117d4:	4618      	mov	r0, r3
   117d6:	4b11      	ldr	r3, [pc, #68]	; (1181c <cdcdf_acm_disable+0xa4>)
   117d8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
   117da:	7ffb      	ldrb	r3, [r7, #31]
   117dc:	69ba      	ldr	r2, [r7, #24]
   117de:	4413      	add	r3, r2
   117e0:	22ff      	movs	r2, #255	; 0xff
   117e2:	709a      	strb	r2, [r3, #2]
   117e4:	e000      	b.n	117e8 <cdcdf_acm_disable+0x70>
			continue;
   117e6:	bf00      	nop
	for (i = 0; i < 2; i++) {
   117e8:	7ffb      	ldrb	r3, [r7, #31]
   117ea:	3301      	adds	r3, #1
   117ec:	77fb      	strb	r3, [r7, #31]
   117ee:	7ffb      	ldrb	r3, [r7, #31]
   117f0:	2b01      	cmp	r3, #1
   117f2:	d9dc      	bls.n	117ae <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
   117f4:	69bb      	ldr	r3, [r7, #24]
   117f6:	791b      	ldrb	r3, [r3, #4]
   117f8:	2bff      	cmp	r3, #255	; 0xff
   117fa:	d007      	beq.n	1180c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
   117fc:	69bb      	ldr	r3, [r7, #24]
   117fe:	791b      	ldrb	r3, [r3, #4]
   11800:	4618      	mov	r0, r3
   11802:	4b06      	ldr	r3, [pc, #24]	; (1181c <cdcdf_acm_disable+0xa4>)
   11804:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
   11806:	69bb      	ldr	r3, [r7, #24]
   11808:	22ff      	movs	r2, #255	; 0xff
   1180a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
   1180c:	4b04      	ldr	r3, [pc, #16]	; (11820 <cdcdf_acm_disable+0xa8>)
   1180e:	2200      	movs	r2, #0
   11810:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   11812:	2300      	movs	r3, #0
}
   11814:	4618      	mov	r0, r3
   11816:	3720      	adds	r7, #32
   11818:	46bd      	mov	sp, r7
   1181a:	bd80      	pop	{r7, pc}
   1181c:	0000798d 	.word	0x0000798d
   11820:	20008f2c 	.word	0x20008f2c

00011824 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
   11824:	b580      	push	{r7, lr}
   11826:	b084      	sub	sp, #16
   11828:	af00      	add	r7, sp, #0
   1182a:	60f8      	str	r0, [r7, #12]
   1182c:	460b      	mov	r3, r1
   1182e:	607a      	str	r2, [r7, #4]
   11830:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
   11832:	7afb      	ldrb	r3, [r7, #11]
   11834:	2b01      	cmp	r3, #1
   11836:	d009      	beq.n	1184c <cdcdf_acm_ctrl+0x28>
   11838:	2b02      	cmp	r3, #2
   1183a:	d00d      	beq.n	11858 <cdcdf_acm_ctrl+0x34>
   1183c:	2b00      	cmp	r3, #0
   1183e:	d10e      	bne.n	1185e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
   11840:	6879      	ldr	r1, [r7, #4]
   11842:	68f8      	ldr	r0, [r7, #12]
   11844:	4b09      	ldr	r3, [pc, #36]	; (1186c <cdcdf_acm_ctrl+0x48>)
   11846:	4798      	blx	r3
   11848:	4603      	mov	r3, r0
   1184a:	e00a      	b.n	11862 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
   1184c:	6879      	ldr	r1, [r7, #4]
   1184e:	68f8      	ldr	r0, [r7, #12]
   11850:	4b07      	ldr	r3, [pc, #28]	; (11870 <cdcdf_acm_ctrl+0x4c>)
   11852:	4798      	blx	r3
   11854:	4603      	mov	r3, r0
   11856:	e004      	b.n	11862 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
   11858:	f06f 031a 	mvn.w	r3, #26
   1185c:	e001      	b.n	11862 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
   1185e:	f06f 030c 	mvn.w	r3, #12
	}
}
   11862:	4618      	mov	r0, r3
   11864:	3710      	adds	r7, #16
   11866:	46bd      	mov	sp, r7
   11868:	bd80      	pop	{r7, pc}
   1186a:	bf00      	nop
   1186c:	00011605 	.word	0x00011605
   11870:	00011779 	.word	0x00011779

00011874 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11874:	b590      	push	{r4, r7, lr}
   11876:	b087      	sub	sp, #28
   11878:	af00      	add	r7, sp, #0
   1187a:	4603      	mov	r3, r0
   1187c:	6039      	str	r1, [r7, #0]
   1187e:	71fb      	strb	r3, [r7, #7]
   11880:	4613      	mov	r3, r2
   11882:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
   11884:	683b      	ldr	r3, [r7, #0]
   11886:	799a      	ldrb	r2, [r3, #6]
   11888:	79db      	ldrb	r3, [r3, #7]
   1188a:	021b      	lsls	r3, r3, #8
   1188c:	4313      	orrs	r3, r2
   1188e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
   11890:	4b2b      	ldr	r3, [pc, #172]	; (11940 <cdcdf_acm_set_req+0xcc>)
   11892:	4798      	blx	r3
   11894:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
   11896:	683b      	ldr	r3, [r7, #0]
   11898:	785b      	ldrb	r3, [r3, #1]
   1189a:	2b20      	cmp	r3, #32
   1189c:	d002      	beq.n	118a4 <cdcdf_acm_set_req+0x30>
   1189e:	2b22      	cmp	r3, #34	; 0x22
   118a0:	d034      	beq.n	1190c <cdcdf_acm_set_req+0x98>
   118a2:	e046      	b.n	11932 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   118a4:	8afb      	ldrh	r3, [r7, #22]
   118a6:	2b07      	cmp	r3, #7
   118a8:	d002      	beq.n	118b0 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
   118aa:	f04f 33ff 	mov.w	r3, #4294967295
   118ae:	e042      	b.n	11936 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
   118b0:	79bb      	ldrb	r3, [r7, #6]
   118b2:	2b00      	cmp	r3, #0
   118b4:	d107      	bne.n	118c6 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
   118b6:	8afa      	ldrh	r2, [r7, #22]
   118b8:	79f8      	ldrb	r0, [r7, #7]
   118ba:	2300      	movs	r3, #0
   118bc:	6939      	ldr	r1, [r7, #16]
   118be:	4c21      	ldr	r4, [pc, #132]	; (11944 <cdcdf_acm_set_req+0xd0>)
   118c0:	47a0      	blx	r4
   118c2:	4603      	mov	r3, r0
   118c4:	e037      	b.n	11936 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
   118c6:	693a      	ldr	r2, [r7, #16]
   118c8:	f107 0308 	add.w	r3, r7, #8
   118cc:	6810      	ldr	r0, [r2, #0]
   118ce:	6018      	str	r0, [r3, #0]
   118d0:	8891      	ldrh	r1, [r2, #4]
   118d2:	7992      	ldrb	r2, [r2, #6]
   118d4:	8099      	strh	r1, [r3, #4]
   118d6:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
   118d8:	4b1b      	ldr	r3, [pc, #108]	; (11948 <cdcdf_acm_set_req+0xd4>)
   118da:	681b      	ldr	r3, [r3, #0]
   118dc:	2b00      	cmp	r3, #0
   118de:	d008      	beq.n	118f2 <cdcdf_acm_set_req+0x7e>
   118e0:	4b19      	ldr	r3, [pc, #100]	; (11948 <cdcdf_acm_set_req+0xd4>)
   118e2:	681b      	ldr	r3, [r3, #0]
   118e4:	f107 0208 	add.w	r2, r7, #8
   118e8:	4610      	mov	r0, r2
   118ea:	4798      	blx	r3
   118ec:	4603      	mov	r3, r0
   118ee:	2b00      	cmp	r3, #0
   118f0:	d00a      	beq.n	11908 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
   118f2:	4b16      	ldr	r3, [pc, #88]	; (1194c <cdcdf_acm_set_req+0xd8>)
   118f4:	f107 0208 	add.w	r2, r7, #8
   118f8:	e892 0003 	ldmia.w	r2, {r0, r1}
   118fc:	6018      	str	r0, [r3, #0]
   118fe:	3304      	adds	r3, #4
   11900:	8019      	strh	r1, [r3, #0]
   11902:	3302      	adds	r3, #2
   11904:	0c0a      	lsrs	r2, r1, #16
   11906:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
   11908:	2300      	movs	r3, #0
   1190a:	e014      	b.n	11936 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
   1190c:	2300      	movs	r3, #0
   1190e:	2200      	movs	r2, #0
   11910:	2100      	movs	r1, #0
   11912:	2000      	movs	r0, #0
   11914:	4c0b      	ldr	r4, [pc, #44]	; (11944 <cdcdf_acm_set_req+0xd0>)
   11916:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
   11918:	4b0d      	ldr	r3, [pc, #52]	; (11950 <cdcdf_acm_set_req+0xdc>)
   1191a:	681b      	ldr	r3, [r3, #0]
   1191c:	2b00      	cmp	r3, #0
   1191e:	d006      	beq.n	1192e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
   11920:	4b0b      	ldr	r3, [pc, #44]	; (11950 <cdcdf_acm_set_req+0xdc>)
   11922:	681b      	ldr	r3, [r3, #0]
   11924:	683a      	ldr	r2, [r7, #0]
   11926:	8852      	ldrh	r2, [r2, #2]
   11928:	b292      	uxth	r2, r2
   1192a:	4610      	mov	r0, r2
   1192c:	4798      	blx	r3
		}
		return ERR_NONE;
   1192e:	2300      	movs	r3, #0
   11930:	e001      	b.n	11936 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
   11932:	f06f 030c 	mvn.w	r3, #12
	}
}
   11936:	4618      	mov	r0, r3
   11938:	371c      	adds	r7, #28
   1193a:	46bd      	mov	sp, r7
   1193c:	bd90      	pop	{r4, r7, pc}
   1193e:	bf00      	nop
   11940:	000128c1 	.word	0x000128c1
   11944:	00012735 	.word	0x00012735
   11948:	20008f40 	.word	0x20008f40
   1194c:	20008f34 	.word	0x20008f34
   11950:	20008f3c 	.word	0x20008f3c

00011954 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11954:	b590      	push	{r4, r7, lr}
   11956:	b085      	sub	sp, #20
   11958:	af00      	add	r7, sp, #0
   1195a:	4603      	mov	r3, r0
   1195c:	6039      	str	r1, [r7, #0]
   1195e:	71fb      	strb	r3, [r7, #7]
   11960:	4613      	mov	r3, r2
   11962:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
   11964:	683b      	ldr	r3, [r7, #0]
   11966:	799a      	ldrb	r2, [r3, #6]
   11968:	79db      	ldrb	r3, [r3, #7]
   1196a:	021b      	lsls	r3, r3, #8
   1196c:	4313      	orrs	r3, r2
   1196e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
   11970:	79bb      	ldrb	r3, [r7, #6]
   11972:	2b01      	cmp	r3, #1
   11974:	d101      	bne.n	1197a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
   11976:	2300      	movs	r3, #0
   11978:	e013      	b.n	119a2 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
   1197a:	683b      	ldr	r3, [r7, #0]
   1197c:	785b      	ldrb	r3, [r3, #1]
   1197e:	2b21      	cmp	r3, #33	; 0x21
   11980:	d10d      	bne.n	1199e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   11982:	89fb      	ldrh	r3, [r7, #14]
   11984:	2b07      	cmp	r3, #7
   11986:	d002      	beq.n	1198e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
   11988:	f04f 33ff 	mov.w	r3, #4294967295
   1198c:	e009      	b.n	119a2 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
   1198e:	89fa      	ldrh	r2, [r7, #14]
   11990:	79f8      	ldrb	r0, [r7, #7]
   11992:	2300      	movs	r3, #0
   11994:	4905      	ldr	r1, [pc, #20]	; (119ac <cdcdf_acm_get_req+0x58>)
   11996:	4c06      	ldr	r4, [pc, #24]	; (119b0 <cdcdf_acm_get_req+0x5c>)
   11998:	47a0      	blx	r4
   1199a:	4603      	mov	r3, r0
   1199c:	e001      	b.n	119a2 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
   1199e:	f06f 030c 	mvn.w	r3, #12
	}
}
   119a2:	4618      	mov	r0, r3
   119a4:	3714      	adds	r7, #20
   119a6:	46bd      	mov	sp, r7
   119a8:	bd90      	pop	{r4, r7, pc}
   119aa:	bf00      	nop
   119ac:	20008f34 	.word	0x20008f34
   119b0:	00012735 	.word	0x00012735

000119b4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   119b4:	b580      	push	{r7, lr}
   119b6:	b082      	sub	sp, #8
   119b8:	af00      	add	r7, sp, #0
   119ba:	4603      	mov	r3, r0
   119bc:	6039      	str	r1, [r7, #0]
   119be:	71fb      	strb	r3, [r7, #7]
   119c0:	4613      	mov	r3, r2
   119c2:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
   119c4:	683b      	ldr	r3, [r7, #0]
   119c6:	781b      	ldrb	r3, [r3, #0]
   119c8:	095b      	lsrs	r3, r3, #5
   119ca:	b2db      	uxtb	r3, r3
   119cc:	f003 0303 	and.w	r3, r3, #3
   119d0:	2b01      	cmp	r3, #1
   119d2:	d002      	beq.n	119da <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
   119d4:	f06f 0309 	mvn.w	r3, #9
   119d8:	e026      	b.n	11a28 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
   119da:	683b      	ldr	r3, [r7, #0]
   119dc:	889b      	ldrh	r3, [r3, #4]
   119de:	b29a      	uxth	r2, r3
   119e0:	4b13      	ldr	r3, [pc, #76]	; (11a30 <cdcdf_acm_req+0x7c>)
   119e2:	781b      	ldrb	r3, [r3, #0]
   119e4:	b29b      	uxth	r3, r3
   119e6:	429a      	cmp	r2, r3
   119e8:	d007      	beq.n	119fa <cdcdf_acm_req+0x46>
   119ea:	683b      	ldr	r3, [r7, #0]
   119ec:	889b      	ldrh	r3, [r3, #4]
   119ee:	b29a      	uxth	r2, r3
   119f0:	4b0f      	ldr	r3, [pc, #60]	; (11a30 <cdcdf_acm_req+0x7c>)
   119f2:	785b      	ldrb	r3, [r3, #1]
   119f4:	b29b      	uxth	r3, r3
   119f6:	429a      	cmp	r2, r3
   119f8:	d114      	bne.n	11a24 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
   119fa:	683b      	ldr	r3, [r7, #0]
   119fc:	781b      	ldrb	r3, [r3, #0]
   119fe:	b25b      	sxtb	r3, r3
   11a00:	2b00      	cmp	r3, #0
   11a02:	da07      	bge.n	11a14 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
   11a04:	79ba      	ldrb	r2, [r7, #6]
   11a06:	79fb      	ldrb	r3, [r7, #7]
   11a08:	6839      	ldr	r1, [r7, #0]
   11a0a:	4618      	mov	r0, r3
   11a0c:	4b09      	ldr	r3, [pc, #36]	; (11a34 <cdcdf_acm_req+0x80>)
   11a0e:	4798      	blx	r3
   11a10:	4603      	mov	r3, r0
   11a12:	e009      	b.n	11a28 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
   11a14:	79ba      	ldrb	r2, [r7, #6]
   11a16:	79fb      	ldrb	r3, [r7, #7]
   11a18:	6839      	ldr	r1, [r7, #0]
   11a1a:	4618      	mov	r0, r3
   11a1c:	4b06      	ldr	r3, [pc, #24]	; (11a38 <cdcdf_acm_req+0x84>)
   11a1e:	4798      	blx	r3
   11a20:	4603      	mov	r3, r0
   11a22:	e001      	b.n	11a28 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
   11a24:	f06f 0309 	mvn.w	r3, #9
	}
}
   11a28:	4618      	mov	r0, r3
   11a2a:	3708      	adds	r7, #8
   11a2c:	46bd      	mov	sp, r7
   11a2e:	bd80      	pop	{r7, pc}
   11a30:	20008f2c 	.word	0x20008f2c
   11a34:	00011955 	.word	0x00011955
   11a38:	00011875 	.word	0x00011875

00011a3c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
   11a3c:	b580      	push	{r7, lr}
   11a3e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
   11a40:	4b0b      	ldr	r3, [pc, #44]	; (11a70 <cdcdf_acm_init+0x34>)
   11a42:	4798      	blx	r3
   11a44:	4603      	mov	r3, r0
   11a46:	2b01      	cmp	r3, #1
   11a48:	d902      	bls.n	11a50 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
   11a4a:	f06f 0310 	mvn.w	r3, #16
   11a4e:	e00d      	b.n	11a6c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
   11a50:	4b08      	ldr	r3, [pc, #32]	; (11a74 <cdcdf_acm_init+0x38>)
   11a52:	4a09      	ldr	r2, [pc, #36]	; (11a78 <cdcdf_acm_init+0x3c>)
   11a54:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
   11a56:	4b07      	ldr	r3, [pc, #28]	; (11a74 <cdcdf_acm_init+0x38>)
   11a58:	4a08      	ldr	r2, [pc, #32]	; (11a7c <cdcdf_acm_init+0x40>)
   11a5a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
   11a5c:	4805      	ldr	r0, [pc, #20]	; (11a74 <cdcdf_acm_init+0x38>)
   11a5e:	4b08      	ldr	r3, [pc, #32]	; (11a80 <cdcdf_acm_init+0x44>)
   11a60:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
   11a62:	4908      	ldr	r1, [pc, #32]	; (11a84 <cdcdf_acm_init+0x48>)
   11a64:	2001      	movs	r0, #1
   11a66:	4b08      	ldr	r3, [pc, #32]	; (11a88 <cdcdf_acm_init+0x4c>)
   11a68:	4798      	blx	r3
	return ERR_NONE;
   11a6a:	2300      	movs	r3, #0
}
   11a6c:	4618      	mov	r0, r3
   11a6e:	bd80      	pop	{r7, pc}
   11a70:	000128d9 	.word	0x000128d9
   11a74:	20008f20 	.word	0x20008f20
   11a78:	00011825 	.word	0x00011825
   11a7c:	20008f2c 	.word	0x20008f2c
   11a80:	00012841 	.word	0x00012841
   11a84:	2000023c 	.word	0x2000023c
   11a88:	00012771 	.word	0x00012771

00011a8c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
   11a8c:	b590      	push	{r4, r7, lr}
   11a8e:	b083      	sub	sp, #12
   11a90:	af00      	add	r7, sp, #0
   11a92:	6078      	str	r0, [r7, #4]
   11a94:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
   11a96:	4b0b      	ldr	r3, [pc, #44]	; (11ac4 <cdcdf_acm_read+0x38>)
   11a98:	4798      	blx	r3
   11a9a:	4603      	mov	r3, r0
   11a9c:	f083 0301 	eor.w	r3, r3, #1
   11aa0:	b2db      	uxtb	r3, r3
   11aa2:	2b00      	cmp	r3, #0
   11aa4:	d002      	beq.n	11aac <cdcdf_acm_read+0x20>
		return ERR_DENIED;
   11aa6:	f06f 0310 	mvn.w	r3, #16
   11aaa:	e007      	b.n	11abc <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
   11aac:	4b06      	ldr	r3, [pc, #24]	; (11ac8 <cdcdf_acm_read+0x3c>)
   11aae:	7918      	ldrb	r0, [r3, #4]
   11ab0:	2300      	movs	r3, #0
   11ab2:	683a      	ldr	r2, [r7, #0]
   11ab4:	6879      	ldr	r1, [r7, #4]
   11ab6:	4c05      	ldr	r4, [pc, #20]	; (11acc <cdcdf_acm_read+0x40>)
   11ab8:	47a0      	blx	r4
   11aba:	4603      	mov	r3, r0
}
   11abc:	4618      	mov	r0, r3
   11abe:	370c      	adds	r7, #12
   11ac0:	46bd      	mov	sp, r7
   11ac2:	bd90      	pop	{r4, r7, pc}
   11ac4:	00011bb1 	.word	0x00011bb1
   11ac8:	20008f2c 	.word	0x20008f2c
   11acc:	00012735 	.word	0x00012735

00011ad0 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
   11ad0:	b590      	push	{r4, r7, lr}
   11ad2:	b083      	sub	sp, #12
   11ad4:	af00      	add	r7, sp, #0
   11ad6:	6078      	str	r0, [r7, #4]
   11ad8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
   11ada:	4b0b      	ldr	r3, [pc, #44]	; (11b08 <cdcdf_acm_write+0x38>)
   11adc:	4798      	blx	r3
   11ade:	4603      	mov	r3, r0
   11ae0:	f083 0301 	eor.w	r3, r3, #1
   11ae4:	b2db      	uxtb	r3, r3
   11ae6:	2b00      	cmp	r3, #0
   11ae8:	d002      	beq.n	11af0 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
   11aea:	f06f 0310 	mvn.w	r3, #16
   11aee:	e007      	b.n	11b00 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
   11af0:	4b06      	ldr	r3, [pc, #24]	; (11b0c <cdcdf_acm_write+0x3c>)
   11af2:	78d8      	ldrb	r0, [r3, #3]
   11af4:	2301      	movs	r3, #1
   11af6:	683a      	ldr	r2, [r7, #0]
   11af8:	6879      	ldr	r1, [r7, #4]
   11afa:	4c05      	ldr	r4, [pc, #20]	; (11b10 <cdcdf_acm_write+0x40>)
   11afc:	47a0      	blx	r4
   11afe:	4603      	mov	r3, r0
}
   11b00:	4618      	mov	r0, r3
   11b02:	370c      	adds	r7, #12
   11b04:	46bd      	mov	sp, r7
   11b06:	bd90      	pop	{r4, r7, pc}
   11b08:	00011bb1 	.word	0x00011bb1
   11b0c:	20008f2c 	.word	0x20008f2c
   11b10:	00012735 	.word	0x00012735

00011b14 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
   11b14:	b580      	push	{r7, lr}
   11b16:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
   11b18:	4b05      	ldr	r3, [pc, #20]	; (11b30 <cdcdf_acm_stop_xfer+0x1c>)
   11b1a:	78db      	ldrb	r3, [r3, #3]
   11b1c:	4618      	mov	r0, r3
   11b1e:	4b05      	ldr	r3, [pc, #20]	; (11b34 <cdcdf_acm_stop_xfer+0x20>)
   11b20:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
   11b22:	4b03      	ldr	r3, [pc, #12]	; (11b30 <cdcdf_acm_stop_xfer+0x1c>)
   11b24:	791b      	ldrb	r3, [r3, #4]
   11b26:	4618      	mov	r0, r3
   11b28:	4b02      	ldr	r3, [pc, #8]	; (11b34 <cdcdf_acm_stop_xfer+0x20>)
   11b2a:	4798      	blx	r3
}
   11b2c:	bf00      	nop
   11b2e:	bd80      	pop	{r7, pc}
   11b30:	20008f2c 	.word	0x20008f2c
   11b34:	00007bb5 	.word	0x00007bb5

00011b38 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
   11b38:	b580      	push	{r7, lr}
   11b3a:	b082      	sub	sp, #8
   11b3c:	af00      	add	r7, sp, #0
   11b3e:	4603      	mov	r3, r0
   11b40:	6039      	str	r1, [r7, #0]
   11b42:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
   11b44:	79fb      	ldrb	r3, [r7, #7]
   11b46:	2b03      	cmp	r3, #3
   11b48:	d822      	bhi.n	11b90 <cdcdf_acm_register_callback+0x58>
   11b4a:	a201      	add	r2, pc, #4	; (adr r2, 11b50 <cdcdf_acm_register_callback+0x18>)
   11b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11b50:	00011b61 	.word	0x00011b61
   11b54:	00011b71 	.word	0x00011b71
   11b58:	00011b81 	.word	0x00011b81
   11b5c:	00011b89 	.word	0x00011b89
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
   11b60:	4b0f      	ldr	r3, [pc, #60]	; (11ba0 <cdcdf_acm_register_callback+0x68>)
   11b62:	791b      	ldrb	r3, [r3, #4]
   11b64:	683a      	ldr	r2, [r7, #0]
   11b66:	2102      	movs	r1, #2
   11b68:	4618      	mov	r0, r3
   11b6a:	4b0e      	ldr	r3, [pc, #56]	; (11ba4 <cdcdf_acm_register_callback+0x6c>)
   11b6c:	4798      	blx	r3
		break;
   11b6e:	e012      	b.n	11b96 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
   11b70:	4b0b      	ldr	r3, [pc, #44]	; (11ba0 <cdcdf_acm_register_callback+0x68>)
   11b72:	78db      	ldrb	r3, [r3, #3]
   11b74:	683a      	ldr	r2, [r7, #0]
   11b76:	2102      	movs	r1, #2
   11b78:	4618      	mov	r0, r3
   11b7a:	4b0a      	ldr	r3, [pc, #40]	; (11ba4 <cdcdf_acm_register_callback+0x6c>)
   11b7c:	4798      	blx	r3
		break;
   11b7e:	e00a      	b.n	11b96 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
   11b80:	4a09      	ldr	r2, [pc, #36]	; (11ba8 <cdcdf_acm_register_callback+0x70>)
   11b82:	683b      	ldr	r3, [r7, #0]
   11b84:	6013      	str	r3, [r2, #0]
		break;
   11b86:	e006      	b.n	11b96 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
   11b88:	4a08      	ldr	r2, [pc, #32]	; (11bac <cdcdf_acm_register_callback+0x74>)
   11b8a:	683b      	ldr	r3, [r7, #0]
   11b8c:	6013      	str	r3, [r2, #0]
		break;
   11b8e:	e002      	b.n	11b96 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
   11b90:	f06f 030c 	mvn.w	r3, #12
   11b94:	e000      	b.n	11b98 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
   11b96:	2300      	movs	r3, #0
}
   11b98:	4618      	mov	r0, r3
   11b9a:	3708      	adds	r7, #8
   11b9c:	46bd      	mov	sp, r7
   11b9e:	bd80      	pop	{r7, pc}
   11ba0:	20008f2c 	.word	0x20008f2c
   11ba4:	00007ce1 	.word	0x00007ce1
   11ba8:	20008f40 	.word	0x20008f40
   11bac:	20008f3c 	.word	0x20008f3c

00011bb0 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
   11bb0:	b480      	push	{r7}
   11bb2:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
   11bb4:	4b03      	ldr	r3, [pc, #12]	; (11bc4 <cdcdf_acm_is_enabled+0x14>)
   11bb6:	795b      	ldrb	r3, [r3, #5]
}
   11bb8:	4618      	mov	r0, r3
   11bba:	46bd      	mov	sp, r7
   11bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   11bc0:	4770      	bx	lr
   11bc2:	bf00      	nop
   11bc4:	20008f2c 	.word	0x20008f2c

00011bc8 <usb_get_u16>:
{
   11bc8:	b480      	push	{r7}
   11bca:	b083      	sub	sp, #12
   11bcc:	af00      	add	r7, sp, #0
   11bce:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   11bd0:	687b      	ldr	r3, [r7, #4]
   11bd2:	781b      	ldrb	r3, [r3, #0]
   11bd4:	b29a      	uxth	r2, r3
   11bd6:	687b      	ldr	r3, [r7, #4]
   11bd8:	3301      	adds	r3, #1
   11bda:	781b      	ldrb	r3, [r3, #0]
   11bdc:	b29b      	uxth	r3, r3
   11bde:	021b      	lsls	r3, r3, #8
   11be0:	b29b      	uxth	r3, r3
   11be2:	4413      	add	r3, r2
   11be4:	b29b      	uxth	r3, r3
}
   11be6:	4618      	mov	r0, r3
   11be8:	370c      	adds	r7, #12
   11bea:	46bd      	mov	sp, r7
   11bec:	f85d 7b04 	ldr.w	r7, [sp], #4
   11bf0:	4770      	bx	lr

00011bf2 <usb_desc_len>:
{
   11bf2:	b480      	push	{r7}
   11bf4:	b083      	sub	sp, #12
   11bf6:	af00      	add	r7, sp, #0
   11bf8:	6078      	str	r0, [r7, #4]
	return desc[0];
   11bfa:	687b      	ldr	r3, [r7, #4]
   11bfc:	781b      	ldrb	r3, [r3, #0]
}
   11bfe:	4618      	mov	r0, r3
   11c00:	370c      	adds	r7, #12
   11c02:	46bd      	mov	sp, r7
   11c04:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c08:	4770      	bx	lr
	...

00011c0c <usb_desc_next>:
{
   11c0c:	b580      	push	{r7, lr}
   11c0e:	b082      	sub	sp, #8
   11c10:	af00      	add	r7, sp, #0
   11c12:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   11c14:	6878      	ldr	r0, [r7, #4]
   11c16:	4b05      	ldr	r3, [pc, #20]	; (11c2c <usb_desc_next+0x20>)
   11c18:	4798      	blx	r3
   11c1a:	4603      	mov	r3, r0
   11c1c:	461a      	mov	r2, r3
   11c1e:	687b      	ldr	r3, [r7, #4]
   11c20:	4413      	add	r3, r2
}
   11c22:	4618      	mov	r0, r3
   11c24:	3708      	adds	r7, #8
   11c26:	46bd      	mov	sp, r7
   11c28:	bd80      	pop	{r7, pc}
   11c2a:	bf00      	nop
   11c2c:	00011bf3 	.word	0x00011bf3

00011c30 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
   11c30:	b580      	push	{r7, lr}
   11c32:	b082      	sub	sp, #8
   11c34:	af00      	add	r7, sp, #0
   11c36:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   11c38:	687b      	ldr	r3, [r7, #4]
   11c3a:	3302      	adds	r3, #2
   11c3c:	4618      	mov	r0, r3
   11c3e:	4b03      	ldr	r3, [pc, #12]	; (11c4c <usb_cfg_desc_total_len+0x1c>)
   11c40:	4798      	blx	r3
   11c42:	4603      	mov	r3, r0
}
   11c44:	4618      	mov	r0, r3
   11c46:	3708      	adds	r7, #8
   11c48:	46bd      	mov	sp, r7
   11c4a:	bd80      	pop	{r7, pc}
   11c4c:	00011bc9 	.word	0x00011bc9

00011c50 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
   11c50:	b590      	push	{r4, r7, lr}
   11c52:	b085      	sub	sp, #20
   11c54:	af00      	add	r7, sp, #0
   11c56:	4603      	mov	r3, r0
   11c58:	6039      	str	r1, [r7, #0]
   11c5a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
   11c5c:	2300      	movs	r3, #0
   11c5e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
   11c60:	683b      	ldr	r3, [r7, #0]
   11c62:	799a      	ldrb	r2, [r3, #6]
   11c64:	79db      	ldrb	r3, [r3, #7]
   11c66:	021b      	lsls	r3, r3, #8
   11c68:	4313      	orrs	r3, r2
   11c6a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
   11c6c:	897b      	ldrh	r3, [r7, #10]
   11c6e:	2b12      	cmp	r3, #18
   11c70:	d901      	bls.n	11c76 <usbdc_get_dev_desc+0x26>
		length = 0x12;
   11c72:	2312      	movs	r3, #18
   11c74:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
   11c76:	68fb      	ldr	r3, [r7, #12]
   11c78:	2b00      	cmp	r3, #0
   11c7a:	d10a      	bne.n	11c92 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   11c7c:	4b0f      	ldr	r3, [pc, #60]	; (11cbc <usbdc_get_dev_desc+0x6c>)
   11c7e:	681b      	ldr	r3, [r3, #0]
   11c80:	6818      	ldr	r0, [r3, #0]
   11c82:	4b0e      	ldr	r3, [pc, #56]	; (11cbc <usbdc_get_dev_desc+0x6c>)
   11c84:	681b      	ldr	r3, [r3, #0]
   11c86:	685b      	ldr	r3, [r3, #4]
   11c88:	2201      	movs	r2, #1
   11c8a:	4619      	mov	r1, r3
   11c8c:	4b0c      	ldr	r3, [pc, #48]	; (11cc0 <usbdc_get_dev_desc+0x70>)
   11c8e:	4798      	blx	r3
   11c90:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
   11c92:	68fb      	ldr	r3, [r7, #12]
   11c94:	2b00      	cmp	r3, #0
   11c96:	d101      	bne.n	11c9c <usbdc_get_dev_desc+0x4c>
		return false;
   11c98:	2300      	movs	r3, #0
   11c9a:	e00b      	b.n	11cb4 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   11c9c:	897a      	ldrh	r2, [r7, #10]
   11c9e:	79f8      	ldrb	r0, [r7, #7]
   11ca0:	2300      	movs	r3, #0
   11ca2:	68f9      	ldr	r1, [r7, #12]
   11ca4:	4c07      	ldr	r4, [pc, #28]	; (11cc4 <usbdc_get_dev_desc+0x74>)
   11ca6:	47a0      	blx	r4
   11ca8:	4603      	mov	r3, r0
   11caa:	2b00      	cmp	r3, #0
   11cac:	d001      	beq.n	11cb2 <usbdc_get_dev_desc+0x62>
		return false;
   11cae:	2300      	movs	r3, #0
   11cb0:	e000      	b.n	11cb4 <usbdc_get_dev_desc+0x64>
	}
	return true;
   11cb2:	2301      	movs	r3, #1
}
   11cb4:	4618      	mov	r0, r3
   11cb6:	3714      	adds	r7, #20
   11cb8:	46bd      	mov	sp, r7
   11cba:	bd90      	pop	{r4, r7, pc}
   11cbc:	20008f44 	.word	0x20008f44
   11cc0:	000129c5 	.word	0x000129c5
   11cc4:	00012735 	.word	0x00012735

00011cc8 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
   11cc8:	b590      	push	{r4, r7, lr}
   11cca:	b087      	sub	sp, #28
   11ccc:	af00      	add	r7, sp, #0
   11cce:	4603      	mov	r3, r0
   11cd0:	6039      	str	r1, [r7, #0]
   11cd2:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
   11cd4:	2300      	movs	r3, #0
   11cd6:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
   11cd8:	683b      	ldr	r3, [r7, #0]
   11cda:	799a      	ldrb	r2, [r3, #6]
   11cdc:	79db      	ldrb	r3, [r3, #7]
   11cde:	021b      	lsls	r3, r3, #8
   11ce0:	4313      	orrs	r3, r2
   11ce2:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
   11ce4:	683b      	ldr	r3, [r7, #0]
   11ce6:	885b      	ldrh	r3, [r3, #2]
   11ce8:	b29b      	uxth	r3, r3
   11cea:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11cec:	8a7a      	ldrh	r2, [r7, #18]
   11cee:	4b1e      	ldr	r3, [pc, #120]	; (11d68 <usbdc_get_cfg_desc+0xa0>)
   11cf0:	7f1b      	ldrb	r3, [r3, #28]
   11cf2:	3b01      	subs	r3, #1
   11cf4:	4013      	ands	r3, r2
   11cf6:	2b00      	cmp	r3, #0
   11cf8:	bf0c      	ite	eq
   11cfa:	2301      	moveq	r3, #1
   11cfc:	2300      	movne	r3, #0
   11cfe:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   11d00:	697b      	ldr	r3, [r7, #20]
   11d02:	2b00      	cmp	r3, #0
   11d04:	d10c      	bne.n	11d20 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   11d06:	4b18      	ldr	r3, [pc, #96]	; (11d68 <usbdc_get_cfg_desc+0xa0>)
   11d08:	681b      	ldr	r3, [r3, #0]
   11d0a:	6818      	ldr	r0, [r3, #0]
   11d0c:	4b16      	ldr	r3, [pc, #88]	; (11d68 <usbdc_get_cfg_desc+0xa0>)
   11d0e:	681b      	ldr	r3, [r3, #0]
   11d10:	6859      	ldr	r1, [r3, #4]
   11d12:	7c3b      	ldrb	r3, [r7, #16]
   11d14:	3301      	adds	r3, #1
   11d16:	b2db      	uxtb	r3, r3
   11d18:	461a      	mov	r2, r3
   11d1a:	4b14      	ldr	r3, [pc, #80]	; (11d6c <usbdc_get_cfg_desc+0xa4>)
   11d1c:	4798      	blx	r3
   11d1e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
   11d20:	697b      	ldr	r3, [r7, #20]
   11d22:	2b00      	cmp	r3, #0
   11d24:	d101      	bne.n	11d2a <usbdc_get_cfg_desc+0x62>
		return false;
   11d26:	2300      	movs	r3, #0
   11d28:	e019      	b.n	11d5e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
   11d2a:	6978      	ldr	r0, [r7, #20]
   11d2c:	4b10      	ldr	r3, [pc, #64]	; (11d70 <usbdc_get_cfg_desc+0xa8>)
   11d2e:	4798      	blx	r3
   11d30:	4603      	mov	r3, r0
   11d32:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
   11d34:	8a7a      	ldrh	r2, [r7, #18]
   11d36:	89fb      	ldrh	r3, [r7, #14]
   11d38:	429a      	cmp	r2, r3
   11d3a:	d802      	bhi.n	11d42 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
   11d3c:	2300      	movs	r3, #0
   11d3e:	747b      	strb	r3, [r7, #17]
   11d40:	e001      	b.n	11d46 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
   11d42:	89fb      	ldrh	r3, [r7, #14]
   11d44:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
   11d46:	8a7a      	ldrh	r2, [r7, #18]
   11d48:	7c7b      	ldrb	r3, [r7, #17]
   11d4a:	79f8      	ldrb	r0, [r7, #7]
   11d4c:	6979      	ldr	r1, [r7, #20]
   11d4e:	4c09      	ldr	r4, [pc, #36]	; (11d74 <usbdc_get_cfg_desc+0xac>)
   11d50:	47a0      	blx	r4
   11d52:	4603      	mov	r3, r0
   11d54:	2b00      	cmp	r3, #0
   11d56:	d001      	beq.n	11d5c <usbdc_get_cfg_desc+0x94>
		return false;
   11d58:	2300      	movs	r3, #0
   11d5a:	e000      	b.n	11d5e <usbdc_get_cfg_desc+0x96>
	}
	return true;
   11d5c:	2301      	movs	r3, #1
}
   11d5e:	4618      	mov	r0, r3
   11d60:	371c      	adds	r7, #28
   11d62:	46bd      	mov	sp, r7
   11d64:	bd90      	pop	{r4, r7, pc}
   11d66:	bf00      	nop
   11d68:	20008f44 	.word	0x20008f44
   11d6c:	00012a85 	.word	0x00012a85
   11d70:	00011c31 	.word	0x00011c31
   11d74:	00012735 	.word	0x00012735

00011d78 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
   11d78:	b590      	push	{r4, r7, lr}
   11d7a:	b085      	sub	sp, #20
   11d7c:	af00      	add	r7, sp, #0
   11d7e:	4603      	mov	r3, r0
   11d80:	6039      	str	r1, [r7, #0]
   11d82:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
   11d84:	683b      	ldr	r3, [r7, #0]
   11d86:	799a      	ldrb	r2, [r3, #6]
   11d88:	79db      	ldrb	r3, [r3, #7]
   11d8a:	021b      	lsls	r3, r3, #8
   11d8c:	4313      	orrs	r3, r2
   11d8e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
   11d90:	683b      	ldr	r3, [r7, #0]
   11d92:	885b      	ldrh	r3, [r3, #2]
   11d94:	b29b      	uxth	r3, r3
   11d96:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11d98:	89fa      	ldrh	r2, [r7, #14]
   11d9a:	4b1a      	ldr	r3, [pc, #104]	; (11e04 <usbdc_get_str_desc+0x8c>)
   11d9c:	7f1b      	ldrb	r3, [r3, #28]
   11d9e:	3b01      	subs	r3, #1
   11da0:	4013      	ands	r3, r2
   11da2:	2b00      	cmp	r3, #0
   11da4:	bf0c      	ite	eq
   11da6:	2301      	moveq	r3, #1
   11da8:	2300      	movne	r3, #0
   11daa:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   11dac:	4b15      	ldr	r3, [pc, #84]	; (11e04 <usbdc_get_str_desc+0x8c>)
   11dae:	681b      	ldr	r3, [r3, #0]
   11db0:	6818      	ldr	r0, [r3, #0]
   11db2:	4b14      	ldr	r3, [pc, #80]	; (11e04 <usbdc_get_str_desc+0x8c>)
   11db4:	681b      	ldr	r3, [r3, #0]
   11db6:	685b      	ldr	r3, [r3, #4]
   11db8:	7b3a      	ldrb	r2, [r7, #12]
   11dba:	4619      	mov	r1, r3
   11dbc:	4b12      	ldr	r3, [pc, #72]	; (11e08 <usbdc_get_str_desc+0x90>)
   11dbe:	4798      	blx	r3
   11dc0:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
   11dc2:	68bb      	ldr	r3, [r7, #8]
   11dc4:	2b00      	cmp	r3, #0
   11dc6:	d101      	bne.n	11dcc <usbdc_get_str_desc+0x54>
		return false;
   11dc8:	2300      	movs	r3, #0
   11dca:	e017      	b.n	11dfc <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
   11dcc:	68bb      	ldr	r3, [r7, #8]
   11dce:	781b      	ldrb	r3, [r3, #0]
   11dd0:	b29b      	uxth	r3, r3
   11dd2:	89fa      	ldrh	r2, [r7, #14]
   11dd4:	429a      	cmp	r2, r3
   11dd6:	d802      	bhi.n	11dde <usbdc_get_str_desc+0x66>
		need_zlp = false;
   11dd8:	2300      	movs	r3, #0
   11dda:	737b      	strb	r3, [r7, #13]
   11ddc:	e002      	b.n	11de4 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
   11dde:	68bb      	ldr	r3, [r7, #8]
   11de0:	781b      	ldrb	r3, [r3, #0]
   11de2:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   11de4:	89fa      	ldrh	r2, [r7, #14]
   11de6:	7b7b      	ldrb	r3, [r7, #13]
   11de8:	79f8      	ldrb	r0, [r7, #7]
   11dea:	68b9      	ldr	r1, [r7, #8]
   11dec:	4c07      	ldr	r4, [pc, #28]	; (11e0c <usbdc_get_str_desc+0x94>)
   11dee:	47a0      	blx	r4
   11df0:	4603      	mov	r3, r0
   11df2:	2b00      	cmp	r3, #0
   11df4:	d001      	beq.n	11dfa <usbdc_get_str_desc+0x82>
		return false;
   11df6:	2300      	movs	r3, #0
   11df8:	e000      	b.n	11dfc <usbdc_get_str_desc+0x84>
	}
	return true;
   11dfa:	2301      	movs	r3, #1
}
   11dfc:	4618      	mov	r0, r3
   11dfe:	3714      	adds	r7, #20
   11e00:	46bd      	mov	sp, r7
   11e02:	bd90      	pop	{r4, r7, pc}
   11e04:	20008f44 	.word	0x20008f44
   11e08:	00012afd 	.word	0x00012afd
   11e0c:	00012735 	.word	0x00012735

00011e10 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
   11e10:	b580      	push	{r7, lr}
   11e12:	b084      	sub	sp, #16
   11e14:	af00      	add	r7, sp, #0
   11e16:	4603      	mov	r3, r0
   11e18:	6039      	str	r1, [r7, #0]
   11e1a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
   11e1c:	683b      	ldr	r3, [r7, #0]
   11e1e:	885b      	ldrh	r3, [r3, #2]
   11e20:	b29b      	uxth	r3, r3
   11e22:	0a1b      	lsrs	r3, r3, #8
   11e24:	b29b      	uxth	r3, r3
   11e26:	73fb      	strb	r3, [r7, #15]
	switch (type) {
   11e28:	7bfb      	ldrb	r3, [r7, #15]
   11e2a:	2b02      	cmp	r3, #2
   11e2c:	d00d      	beq.n	11e4a <usbdc_get_desc_req+0x3a>
   11e2e:	2b03      	cmp	r3, #3
   11e30:	d012      	beq.n	11e58 <usbdc_get_desc_req+0x48>
   11e32:	2b01      	cmp	r3, #1
   11e34:	d002      	beq.n	11e3c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
   11e36:	bf00      	nop
	}
	return false;
   11e38:	2300      	movs	r3, #0
   11e3a:	e013      	b.n	11e64 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
   11e3c:	79fb      	ldrb	r3, [r7, #7]
   11e3e:	6839      	ldr	r1, [r7, #0]
   11e40:	4618      	mov	r0, r3
   11e42:	4b0a      	ldr	r3, [pc, #40]	; (11e6c <usbdc_get_desc_req+0x5c>)
   11e44:	4798      	blx	r3
   11e46:	4603      	mov	r3, r0
   11e48:	e00c      	b.n	11e64 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
   11e4a:	79fb      	ldrb	r3, [r7, #7]
   11e4c:	6839      	ldr	r1, [r7, #0]
   11e4e:	4618      	mov	r0, r3
   11e50:	4b07      	ldr	r3, [pc, #28]	; (11e70 <usbdc_get_desc_req+0x60>)
   11e52:	4798      	blx	r3
   11e54:	4603      	mov	r3, r0
   11e56:	e005      	b.n	11e64 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
   11e58:	79fb      	ldrb	r3, [r7, #7]
   11e5a:	6839      	ldr	r1, [r7, #0]
   11e5c:	4618      	mov	r0, r3
   11e5e:	4b05      	ldr	r3, [pc, #20]	; (11e74 <usbdc_get_desc_req+0x64>)
   11e60:	4798      	blx	r3
   11e62:	4603      	mov	r3, r0
}
   11e64:	4618      	mov	r0, r3
   11e66:	3710      	adds	r7, #16
   11e68:	46bd      	mov	sp, r7
   11e6a:	bd80      	pop	{r7, pc}
   11e6c:	00011c51 	.word	0x00011c51
   11e70:	00011cc9 	.word	0x00011cc9
   11e74:	00011d79 	.word	0x00011d79

00011e78 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
   11e78:	b590      	push	{r4, r7, lr}
   11e7a:	b085      	sub	sp, #20
   11e7c:	af00      	add	r7, sp, #0
   11e7e:	4603      	mov	r3, r0
   11e80:	6039      	str	r1, [r7, #0]
   11e82:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11e84:	683b      	ldr	r3, [r7, #0]
   11e86:	781b      	ldrb	r3, [r3, #0]
   11e88:	f003 031f 	and.w	r3, r3, #31
   11e8c:	2b00      	cmp	r3, #0
   11e8e:	db1b      	blt.n	11ec8 <usbdc_get_status_req+0x50>
   11e90:	2b01      	cmp	r3, #1
   11e92:	dd02      	ble.n	11e9a <usbdc_get_status_req+0x22>
   11e94:	2b02      	cmp	r3, #2
   11e96:	d003      	beq.n	11ea0 <usbdc_get_status_req+0x28>
   11e98:	e016      	b.n	11ec8 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
   11e9a:	2300      	movs	r3, #0
   11e9c:	60fb      	str	r3, [r7, #12]
		break;
   11e9e:	e015      	b.n	11ecc <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   11ea0:	683b      	ldr	r3, [r7, #0]
   11ea2:	889b      	ldrh	r3, [r3, #4]
   11ea4:	b29b      	uxth	r3, r3
   11ea6:	b2db      	uxtb	r3, r3
   11ea8:	2102      	movs	r1, #2
   11eaa:	4618      	mov	r0, r3
   11eac:	4b0f      	ldr	r3, [pc, #60]	; (11eec <usbdc_get_status_req+0x74>)
   11eae:	4798      	blx	r3
   11eb0:	4603      	mov	r3, r0
   11eb2:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
   11eb4:	68fb      	ldr	r3, [r7, #12]
   11eb6:	2b00      	cmp	r3, #0
   11eb8:	da01      	bge.n	11ebe <usbdc_get_status_req+0x46>
			return false;
   11eba:	2300      	movs	r3, #0
   11ebc:	e012      	b.n	11ee4 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
   11ebe:	68fb      	ldr	r3, [r7, #12]
   11ec0:	f003 0301 	and.w	r3, r3, #1
   11ec4:	60fb      	str	r3, [r7, #12]
		break;
   11ec6:	e001      	b.n	11ecc <usbdc_get_status_req+0x54>
	default:
		return false;
   11ec8:	2300      	movs	r3, #0
   11eca:	e00b      	b.n	11ee4 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
   11ecc:	4b08      	ldr	r3, [pc, #32]	; (11ef0 <usbdc_get_status_req+0x78>)
   11ece:	695b      	ldr	r3, [r3, #20]
   11ed0:	89ba      	ldrh	r2, [r7, #12]
   11ed2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   11ed4:	4b06      	ldr	r3, [pc, #24]	; (11ef0 <usbdc_get_status_req+0x78>)
   11ed6:	6959      	ldr	r1, [r3, #20]
   11ed8:	79f8      	ldrb	r0, [r7, #7]
   11eda:	2300      	movs	r3, #0
   11edc:	2202      	movs	r2, #2
   11ede:	4c05      	ldr	r4, [pc, #20]	; (11ef4 <usbdc_get_status_req+0x7c>)
   11ee0:	47a0      	blx	r4
	return true;
   11ee2:	2301      	movs	r3, #1
}
   11ee4:	4618      	mov	r0, r3
   11ee6:	3714      	adds	r7, #20
   11ee8:	46bd      	mov	sp, r7
   11eea:	bd90      	pop	{r4, r7, pc}
   11eec:	00007c8d 	.word	0x00007c8d
   11ef0:	20008f44 	.word	0x20008f44
   11ef4:	00012735 	.word	0x00012735

00011ef8 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
   11ef8:	b590      	push	{r4, r7, lr}
   11efa:	b085      	sub	sp, #20
   11efc:	af00      	add	r7, sp, #0
   11efe:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   11f00:	4b1f      	ldr	r3, [pc, #124]	; (11f80 <usbdc_get_interface+0x88>)
   11f02:	691b      	ldr	r3, [r3, #16]
   11f04:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   11f06:	4b1e      	ldr	r3, [pc, #120]	; (11f80 <usbdc_get_interface+0x88>)
   11f08:	7f5b      	ldrb	r3, [r3, #29]
   11f0a:	461a      	mov	r2, r3
   11f0c:	687b      	ldr	r3, [r7, #4]
   11f0e:	889b      	ldrh	r3, [r3, #4]
   11f10:	b29b      	uxth	r3, r3
   11f12:	fa42 f303 	asr.w	r3, r2, r3
   11f16:	f003 0301 	and.w	r3, r3, #1
   11f1a:	2b00      	cmp	r3, #0
   11f1c:	d128      	bne.n	11f70 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
   11f1e:	4b18      	ldr	r3, [pc, #96]	; (11f80 <usbdc_get_interface+0x88>)
   11f20:	695b      	ldr	r3, [r3, #20]
   11f22:	2200      	movs	r2, #0
   11f24:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11f26:	4b16      	ldr	r3, [pc, #88]	; (11f80 <usbdc_get_interface+0x88>)
   11f28:	6959      	ldr	r1, [r3, #20]
   11f2a:	2300      	movs	r3, #0
   11f2c:	2201      	movs	r2, #1
   11f2e:	2000      	movs	r0, #0
   11f30:	4c14      	ldr	r4, [pc, #80]	; (11f84 <usbdc_get_interface+0x8c>)
   11f32:	47a0      	blx	r4
		return true;
   11f34:	2301      	movs	r3, #1
   11f36:	e01f      	b.n	11f78 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   11f38:	68fb      	ldr	r3, [r7, #12]
   11f3a:	685b      	ldr	r3, [r3, #4]
   11f3c:	687a      	ldr	r2, [r7, #4]
   11f3e:	2102      	movs	r1, #2
   11f40:	68f8      	ldr	r0, [r7, #12]
   11f42:	4798      	blx	r3
   11f44:	60b8      	str	r0, [r7, #8]
   11f46:	68bb      	ldr	r3, [r7, #8]
   11f48:	2b00      	cmp	r3, #0
   11f4a:	da03      	bge.n	11f54 <usbdc_get_interface+0x5c>
			func = func->next;
   11f4c:	68fb      	ldr	r3, [r7, #12]
   11f4e:	681b      	ldr	r3, [r3, #0]
   11f50:	60fb      	str	r3, [r7, #12]
   11f52:	e00d      	b.n	11f70 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   11f54:	4b0a      	ldr	r3, [pc, #40]	; (11f80 <usbdc_get_interface+0x88>)
   11f56:	695b      	ldr	r3, [r3, #20]
   11f58:	68ba      	ldr	r2, [r7, #8]
   11f5a:	b2d2      	uxtb	r2, r2
   11f5c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11f5e:	4b08      	ldr	r3, [pc, #32]	; (11f80 <usbdc_get_interface+0x88>)
   11f60:	6959      	ldr	r1, [r3, #20]
   11f62:	2300      	movs	r3, #0
   11f64:	2201      	movs	r2, #1
   11f66:	2000      	movs	r0, #0
   11f68:	4c06      	ldr	r4, [pc, #24]	; (11f84 <usbdc_get_interface+0x8c>)
   11f6a:	47a0      	blx	r4
			return true;
   11f6c:	2301      	movs	r3, #1
   11f6e:	e003      	b.n	11f78 <usbdc_get_interface+0x80>
	while (NULL != func) {
   11f70:	68fb      	ldr	r3, [r7, #12]
   11f72:	2b00      	cmp	r3, #0
   11f74:	d1e0      	bne.n	11f38 <usbdc_get_interface+0x40>
		}
	}
	return false;
   11f76:	2300      	movs	r3, #0
}
   11f78:	4618      	mov	r0, r3
   11f7a:	3714      	adds	r7, #20
   11f7c:	46bd      	mov	sp, r7
   11f7e:	bd90      	pop	{r4, r7, pc}
   11f80:	20008f44 	.word	0x20008f44
   11f84:	00012735 	.word	0x00012735

00011f88 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
   11f88:	b590      	push	{r4, r7, lr}
   11f8a:	b083      	sub	sp, #12
   11f8c:	af00      	add	r7, sp, #0
   11f8e:	4603      	mov	r3, r0
   11f90:	6039      	str	r1, [r7, #0]
   11f92:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   11f94:	683b      	ldr	r3, [r7, #0]
   11f96:	785b      	ldrb	r3, [r3, #1]
   11f98:	2b0a      	cmp	r3, #10
   11f9a:	d83a      	bhi.n	12012 <usbdc_get_req+0x8a>
   11f9c:	a201      	add	r2, pc, #4	; (adr r2, 11fa4 <usbdc_get_req+0x1c>)
   11f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11fa2:	bf00      	nop
   11fa4:	00011ffb 	.word	0x00011ffb
   11fa8:	00012013 	.word	0x00012013
   11fac:	00012013 	.word	0x00012013
   11fb0:	00012013 	.word	0x00012013
   11fb4:	00012013 	.word	0x00012013
   11fb8:	00012013 	.word	0x00012013
   11fbc:	00011fd1 	.word	0x00011fd1
   11fc0:	00012013 	.word	0x00012013
   11fc4:	00011fdf 	.word	0x00011fdf
   11fc8:	00012013 	.word	0x00012013
   11fcc:	00012009 	.word	0x00012009
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
   11fd0:	79fb      	ldrb	r3, [r7, #7]
   11fd2:	6839      	ldr	r1, [r7, #0]
   11fd4:	4618      	mov	r0, r3
   11fd6:	4b11      	ldr	r3, [pc, #68]	; (1201c <usbdc_get_req+0x94>)
   11fd8:	4798      	blx	r3
   11fda:	4603      	mov	r3, r0
   11fdc:	e01a      	b.n	12014 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   11fde:	4b10      	ldr	r3, [pc, #64]	; (12020 <usbdc_get_req+0x98>)
   11fe0:	695b      	ldr	r3, [r3, #20]
   11fe2:	4a0f      	ldr	r2, [pc, #60]	; (12020 <usbdc_get_req+0x98>)
   11fe4:	7ed2      	ldrb	r2, [r2, #27]
   11fe6:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   11fe8:	4b0d      	ldr	r3, [pc, #52]	; (12020 <usbdc_get_req+0x98>)
   11fea:	6959      	ldr	r1, [r3, #20]
   11fec:	79f8      	ldrb	r0, [r7, #7]
   11fee:	2300      	movs	r3, #0
   11ff0:	2201      	movs	r2, #1
   11ff2:	4c0c      	ldr	r4, [pc, #48]	; (12024 <usbdc_get_req+0x9c>)
   11ff4:	47a0      	blx	r4
		return true;
   11ff6:	2301      	movs	r3, #1
   11ff8:	e00c      	b.n	12014 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
   11ffa:	79fb      	ldrb	r3, [r7, #7]
   11ffc:	6839      	ldr	r1, [r7, #0]
   11ffe:	4618      	mov	r0, r3
   12000:	4b09      	ldr	r3, [pc, #36]	; (12028 <usbdc_get_req+0xa0>)
   12002:	4798      	blx	r3
   12004:	4603      	mov	r3, r0
   12006:	e005      	b.n	12014 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
   12008:	6838      	ldr	r0, [r7, #0]
   1200a:	4b08      	ldr	r3, [pc, #32]	; (1202c <usbdc_get_req+0xa4>)
   1200c:	4798      	blx	r3
   1200e:	4603      	mov	r3, r0
   12010:	e000      	b.n	12014 <usbdc_get_req+0x8c>
	default:
		return false;
   12012:	2300      	movs	r3, #0
	}
}
   12014:	4618      	mov	r0, r3
   12016:	370c      	adds	r7, #12
   12018:	46bd      	mov	sp, r7
   1201a:	bd90      	pop	{r4, r7, pc}
   1201c:	00011e11 	.word	0x00011e11
   12020:	20008f44 	.word	0x20008f44
   12024:	00012735 	.word	0x00012735
   12028:	00011e79 	.word	0x00011e79
   1202c:	00011ef9 	.word	0x00011ef9

00012030 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   12030:	b590      	push	{r4, r7, lr}
   12032:	b083      	sub	sp, #12
   12034:	af00      	add	r7, sp, #0
   12036:	4603      	mov	r3, r0
   12038:	6039      	str	r1, [r7, #0]
   1203a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   1203c:	683b      	ldr	r3, [r7, #0]
   1203e:	781b      	ldrb	r3, [r3, #0]
   12040:	f003 031f 	and.w	r3, r3, #31
   12044:	2b02      	cmp	r3, #2
   12046:	d116      	bne.n	12076 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   12048:	683b      	ldr	r3, [r7, #0]
   1204a:	88db      	ldrh	r3, [r3, #6]
   1204c:	b29b      	uxth	r3, r3
   1204e:	2b00      	cmp	r3, #0
   12050:	d001      	beq.n	12056 <usbdc_clear_ftr_req+0x26>
			return false;
   12052:	2300      	movs	r3, #0
   12054:	e010      	b.n	12078 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   12056:	683b      	ldr	r3, [r7, #0]
   12058:	889b      	ldrh	r3, [r3, #4]
   1205a:	b29b      	uxth	r3, r3
   1205c:	b2db      	uxtb	r3, r3
   1205e:	2100      	movs	r1, #0
   12060:	4618      	mov	r0, r3
   12062:	4b07      	ldr	r3, [pc, #28]	; (12080 <usbdc_clear_ftr_req+0x50>)
   12064:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   12066:	79f8      	ldrb	r0, [r7, #7]
   12068:	2301      	movs	r3, #1
   1206a:	2200      	movs	r2, #0
   1206c:	2100      	movs	r1, #0
   1206e:	4c05      	ldr	r4, [pc, #20]	; (12084 <usbdc_clear_ftr_req+0x54>)
   12070:	47a0      	blx	r4
		return true;
   12072:	2301      	movs	r3, #1
   12074:	e000      	b.n	12078 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
   12076:	2300      	movs	r3, #0
	}
}
   12078:	4618      	mov	r0, r3
   1207a:	370c      	adds	r7, #12
   1207c:	46bd      	mov	sp, r7
   1207e:	bd90      	pop	{r4, r7, pc}
   12080:	00007c8d 	.word	0x00007c8d
   12084:	00012735 	.word	0x00012735

00012088 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   12088:	b590      	push	{r4, r7, lr}
   1208a:	b083      	sub	sp, #12
   1208c:	af00      	add	r7, sp, #0
   1208e:	4603      	mov	r3, r0
   12090:	6039      	str	r1, [r7, #0]
   12092:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   12094:	683b      	ldr	r3, [r7, #0]
   12096:	781b      	ldrb	r3, [r3, #0]
   12098:	f003 031f 	and.w	r3, r3, #31
   1209c:	2b02      	cmp	r3, #2
   1209e:	d116      	bne.n	120ce <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   120a0:	683b      	ldr	r3, [r7, #0]
   120a2:	88db      	ldrh	r3, [r3, #6]
   120a4:	b29b      	uxth	r3, r3
   120a6:	2b00      	cmp	r3, #0
   120a8:	d001      	beq.n	120ae <usbdc_set_ftr_req+0x26>
			return false;
   120aa:	2300      	movs	r3, #0
   120ac:	e010      	b.n	120d0 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   120ae:	683b      	ldr	r3, [r7, #0]
   120b0:	889b      	ldrh	r3, [r3, #4]
   120b2:	b29b      	uxth	r3, r3
   120b4:	b2db      	uxtb	r3, r3
   120b6:	2101      	movs	r1, #1
   120b8:	4618      	mov	r0, r3
   120ba:	4b07      	ldr	r3, [pc, #28]	; (120d8 <usbdc_set_ftr_req+0x50>)
   120bc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   120be:	79f8      	ldrb	r0, [r7, #7]
   120c0:	2301      	movs	r3, #1
   120c2:	2200      	movs	r2, #0
   120c4:	2100      	movs	r1, #0
   120c6:	4c05      	ldr	r4, [pc, #20]	; (120dc <usbdc_set_ftr_req+0x54>)
   120c8:	47a0      	blx	r4
		return true;
   120ca:	2301      	movs	r3, #1
   120cc:	e000      	b.n	120d0 <usbdc_set_ftr_req+0x48>
	default:
		return false;
   120ce:	2300      	movs	r3, #0
	}
}
   120d0:	4618      	mov	r0, r3
   120d2:	370c      	adds	r7, #12
   120d4:	46bd      	mov	sp, r7
   120d6:	bd90      	pop	{r4, r7, pc}
   120d8:	00007c8d 	.word	0x00007c8d
   120dc:	00012735 	.word	0x00012735

000120e0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
   120e0:	b580      	push	{r7, lr}
   120e2:	b082      	sub	sp, #8
   120e4:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   120e6:	4b0a      	ldr	r3, [pc, #40]	; (12110 <usbdc_unconfig+0x30>)
   120e8:	691b      	ldr	r3, [r3, #16]
   120ea:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   120ec:	e008      	b.n	12100 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
   120ee:	687b      	ldr	r3, [r7, #4]
   120f0:	685b      	ldr	r3, [r3, #4]
   120f2:	2200      	movs	r2, #0
   120f4:	2101      	movs	r1, #1
   120f6:	6878      	ldr	r0, [r7, #4]
   120f8:	4798      	blx	r3
		func = func->next;
   120fa:	687b      	ldr	r3, [r7, #4]
   120fc:	681b      	ldr	r3, [r3, #0]
   120fe:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   12100:	687b      	ldr	r3, [r7, #4]
   12102:	2b00      	cmp	r3, #0
   12104:	d1f3      	bne.n	120ee <usbdc_unconfig+0xe>
	}
}
   12106:	bf00      	nop
   12108:	3708      	adds	r7, #8
   1210a:	46bd      	mov	sp, r7
   1210c:	bd80      	pop	{r7, pc}
   1210e:	bf00      	nop
   12110:	20008f44 	.word	0x20008f44

00012114 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
   12114:	b580      	push	{r7, lr}
   12116:	b088      	sub	sp, #32
   12118:	af00      	add	r7, sp, #0
   1211a:	4603      	mov	r3, r0
   1211c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
   1211e:	2300      	movs	r3, #0
   12120:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
   12122:	23ff      	movs	r3, #255	; 0xff
   12124:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
   12126:	79fb      	ldrb	r3, [r7, #7]
   12128:	2b00      	cmp	r3, #0
   1212a:	d103      	bne.n	12134 <usbdc_set_config+0x20>
		usbdc_unconfig();
   1212c:	4b2e      	ldr	r3, [pc, #184]	; (121e8 <usbdc_set_config+0xd4>)
   1212e:	4798      	blx	r3
		return true;
   12130:	2301      	movs	r3, #1
   12132:	e055      	b.n	121e0 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   12134:	69bb      	ldr	r3, [r7, #24]
   12136:	2b00      	cmp	r3, #0
   12138:	d10a      	bne.n	12150 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   1213a:	4b2c      	ldr	r3, [pc, #176]	; (121ec <usbdc_set_config+0xd8>)
   1213c:	681b      	ldr	r3, [r3, #0]
   1213e:	6818      	ldr	r0, [r3, #0]
   12140:	4b2a      	ldr	r3, [pc, #168]	; (121ec <usbdc_set_config+0xd8>)
   12142:	681b      	ldr	r3, [r3, #0]
   12144:	685b      	ldr	r3, [r3, #4]
   12146:	79fa      	ldrb	r2, [r7, #7]
   12148:	4619      	mov	r1, r3
   1214a:	4b29      	ldr	r3, [pc, #164]	; (121f0 <usbdc_set_config+0xdc>)
   1214c:	4798      	blx	r3
   1214e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
   12150:	69bb      	ldr	r3, [r7, #24]
   12152:	2b00      	cmp	r3, #0
   12154:	d101      	bne.n	1215a <usbdc_set_config+0x46>
		return false;
   12156:	2300      	movs	r3, #0
   12158:	e042      	b.n	121e0 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
   1215a:	69b8      	ldr	r0, [r7, #24]
   1215c:	4b25      	ldr	r3, [pc, #148]	; (121f4 <usbdc_set_config+0xe0>)
   1215e:	4798      	blx	r3
   12160:	4603      	mov	r3, r0
   12162:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
   12164:	8abb      	ldrh	r3, [r7, #20]
   12166:	69ba      	ldr	r2, [r7, #24]
   12168:	4413      	add	r3, r2
   1216a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   1216c:	693b      	ldr	r3, [r7, #16]
   1216e:	2204      	movs	r2, #4
   12170:	4619      	mov	r1, r3
   12172:	69b8      	ldr	r0, [r7, #24]
   12174:	4b20      	ldr	r3, [pc, #128]	; (121f8 <usbdc_set_config+0xe4>)
   12176:	4798      	blx	r3
   12178:	4603      	mov	r3, r0
   1217a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
   1217c:	e02c      	b.n	121d8 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   1217e:	68fb      	ldr	r3, [r7, #12]
   12180:	3302      	adds	r3, #2
   12182:	781b      	ldrb	r3, [r3, #0]
   12184:	7dfa      	ldrb	r2, [r7, #23]
   12186:	429a      	cmp	r2, r3
   12188:	d018      	beq.n	121bc <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
   1218a:	68fb      	ldr	r3, [r7, #12]
   1218c:	789b      	ldrb	r3, [r3, #2]
   1218e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   12190:	4b16      	ldr	r3, [pc, #88]	; (121ec <usbdc_set_config+0xd8>)
   12192:	691b      	ldr	r3, [r3, #16]
   12194:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   12196:	e00c      	b.n	121b2 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   12198:	69fb      	ldr	r3, [r7, #28]
   1219a:	685b      	ldr	r3, [r3, #4]
   1219c:	f107 020c 	add.w	r2, r7, #12
   121a0:	2100      	movs	r1, #0
   121a2:	69f8      	ldr	r0, [r7, #28]
   121a4:	4798      	blx	r3
   121a6:	4603      	mov	r3, r0
   121a8:	2b00      	cmp	r3, #0
   121aa:	d006      	beq.n	121ba <usbdc_set_config+0xa6>
					func = func->next;
   121ac:	69fb      	ldr	r3, [r7, #28]
   121ae:	681b      	ldr	r3, [r3, #0]
   121b0:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   121b2:	69fb      	ldr	r3, [r7, #28]
   121b4:	2b00      	cmp	r3, #0
   121b6:	d1ef      	bne.n	12198 <usbdc_set_config+0x84>
   121b8:	e000      	b.n	121bc <usbdc_set_config+0xa8>
				} else {
					break;
   121ba:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
   121bc:	68fb      	ldr	r3, [r7, #12]
   121be:	4618      	mov	r0, r3
   121c0:	4b0e      	ldr	r3, [pc, #56]	; (121fc <usbdc_set_config+0xe8>)
   121c2:	4798      	blx	r3
   121c4:	4603      	mov	r3, r0
   121c6:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	6939      	ldr	r1, [r7, #16]
   121cc:	2204      	movs	r2, #4
   121ce:	4618      	mov	r0, r3
   121d0:	4b09      	ldr	r3, [pc, #36]	; (121f8 <usbdc_set_config+0xe4>)
   121d2:	4798      	blx	r3
   121d4:	4603      	mov	r3, r0
   121d6:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
   121d8:	68fb      	ldr	r3, [r7, #12]
   121da:	2b00      	cmp	r3, #0
   121dc:	d1cf      	bne.n	1217e <usbdc_set_config+0x6a>
	}
	return true;
   121de:	2301      	movs	r3, #1
}
   121e0:	4618      	mov	r0, r3
   121e2:	3720      	adds	r7, #32
   121e4:	46bd      	mov	sp, r7
   121e6:	bd80      	pop	{r7, pc}
   121e8:	000120e1 	.word	0x000120e1
   121ec:	20008f44 	.word	0x20008f44
   121f0:	00012a85 	.word	0x00012a85
   121f4:	00011c31 	.word	0x00011c31
   121f8:	000129c5 	.word	0x000129c5
   121fc:	00011c0d 	.word	0x00011c0d

00012200 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
   12200:	b580      	push	{r7, lr}
   12202:	b082      	sub	sp, #8
   12204:	af00      	add	r7, sp, #0
   12206:	4603      	mov	r3, r0
   12208:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
   1220a:	79fb      	ldrb	r3, [r7, #7]
   1220c:	4618      	mov	r0, r3
   1220e:	4b03      	ldr	r3, [pc, #12]	; (1221c <usbdc_set_address+0x1c>)
   12210:	4798      	blx	r3
}
   12212:	bf00      	nop
   12214:	3708      	adds	r7, #8
   12216:	46bd      	mov	sp, r7
   12218:	bd80      	pop	{r7, pc}
   1221a:	bf00      	nop
   1221c:	000078a9 	.word	0x000078a9

00012220 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
   12220:	b590      	push	{r4, r7, lr}
   12222:	b087      	sub	sp, #28
   12224:	af00      	add	r7, sp, #0
   12226:	4603      	mov	r3, r0
   12228:	460a      	mov	r2, r1
   1222a:	80fb      	strh	r3, [r7, #6]
   1222c:	4613      	mov	r3, r2
   1222e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
   12230:	2300      	movs	r3, #0
   12232:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
   12234:	693b      	ldr	r3, [r7, #16]
   12236:	2b00      	cmp	r3, #0
   12238:	d10b      	bne.n	12252 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   1223a:	4b43      	ldr	r3, [pc, #268]	; (12348 <usbdc_set_interface+0x128>)
   1223c:	681b      	ldr	r3, [r3, #0]
   1223e:	6818      	ldr	r0, [r3, #0]
   12240:	4b41      	ldr	r3, [pc, #260]	; (12348 <usbdc_set_interface+0x128>)
   12242:	681b      	ldr	r3, [r3, #0]
   12244:	6859      	ldr	r1, [r3, #4]
   12246:	4b40      	ldr	r3, [pc, #256]	; (12348 <usbdc_set_interface+0x128>)
   12248:	7edb      	ldrb	r3, [r3, #27]
   1224a:	461a      	mov	r2, r3
   1224c:	4b3f      	ldr	r3, [pc, #252]	; (1234c <usbdc_set_interface+0x12c>)
   1224e:	4798      	blx	r3
   12250:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
   12252:	693b      	ldr	r3, [r7, #16]
   12254:	2b00      	cmp	r3, #0
   12256:	d101      	bne.n	1225c <usbdc_set_interface+0x3c>
		return false;
   12258:	2300      	movs	r3, #0
   1225a:	e071      	b.n	12340 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
   1225c:	693b      	ldr	r3, [r7, #16]
   1225e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   12260:	6938      	ldr	r0, [r7, #16]
   12262:	4b3b      	ldr	r3, [pc, #236]	; (12350 <usbdc_set_interface+0x130>)
   12264:	4798      	blx	r3
   12266:	4603      	mov	r3, r0
   12268:	461a      	mov	r2, r3
   1226a:	693b      	ldr	r3, [r7, #16]
   1226c:	4413      	add	r3, r2
   1226e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   12270:	68bb      	ldr	r3, [r7, #8]
   12272:	68f9      	ldr	r1, [r7, #12]
   12274:	2204      	movs	r2, #4
   12276:	4618      	mov	r0, r3
   12278:	4b36      	ldr	r3, [pc, #216]	; (12354 <usbdc_set_interface+0x134>)
   1227a:	4798      	blx	r3
   1227c:	6138      	str	r0, [r7, #16]
   1227e:	693b      	ldr	r3, [r7, #16]
   12280:	2b00      	cmp	r3, #0
   12282:	d113      	bne.n	122ac <usbdc_set_interface+0x8c>
		return false;
   12284:	2300      	movs	r3, #0
   12286:	e05b      	b.n	12340 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
   12288:	68bb      	ldr	r3, [r7, #8]
   1228a:	4618      	mov	r0, r3
   1228c:	4b32      	ldr	r3, [pc, #200]	; (12358 <usbdc_set_interface+0x138>)
   1228e:	4798      	blx	r3
   12290:	4603      	mov	r3, r0
   12292:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   12294:	68bb      	ldr	r3, [r7, #8]
   12296:	68f9      	ldr	r1, [r7, #12]
   12298:	2204      	movs	r2, #4
   1229a:	4618      	mov	r0, r3
   1229c:	4b2d      	ldr	r3, [pc, #180]	; (12354 <usbdc_set_interface+0x134>)
   1229e:	4798      	blx	r3
   122a0:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
   122a2:	693b      	ldr	r3, [r7, #16]
   122a4:	2b00      	cmp	r3, #0
   122a6:	d101      	bne.n	122ac <usbdc_set_interface+0x8c>
			return false;
   122a8:	2300      	movs	r3, #0
   122aa:	e049      	b.n	12340 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   122ac:	693b      	ldr	r3, [r7, #16]
   122ae:	3302      	adds	r3, #2
   122b0:	781b      	ldrb	r3, [r3, #0]
   122b2:	b29b      	uxth	r3, r3
   122b4:	88ba      	ldrh	r2, [r7, #4]
   122b6:	429a      	cmp	r2, r3
   122b8:	d1e6      	bne.n	12288 <usbdc_set_interface+0x68>
   122ba:	693b      	ldr	r3, [r7, #16]
   122bc:	3303      	adds	r3, #3
   122be:	781b      	ldrb	r3, [r3, #0]
   122c0:	b29b      	uxth	r3, r3
   122c2:	88fa      	ldrh	r2, [r7, #6]
   122c4:	429a      	cmp	r2, r3
   122c6:	d1df      	bne.n	12288 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
   122c8:	693b      	ldr	r3, [r7, #16]
   122ca:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   122cc:	4b1e      	ldr	r3, [pc, #120]	; (12348 <usbdc_set_interface+0x128>)
   122ce:	691b      	ldr	r3, [r3, #16]
   122d0:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
   122d2:	e031      	b.n	12338 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   122d4:	697b      	ldr	r3, [r7, #20]
   122d6:	685b      	ldr	r3, [r3, #4]
   122d8:	f107 0208 	add.w	r2, r7, #8
   122dc:	2101      	movs	r1, #1
   122de:	6978      	ldr	r0, [r7, #20]
   122e0:	4798      	blx	r3
   122e2:	4603      	mov	r3, r0
   122e4:	2b00      	cmp	r3, #0
   122e6:	d003      	beq.n	122f0 <usbdc_set_interface+0xd0>
			func = func->next;
   122e8:	697b      	ldr	r3, [r7, #20]
   122ea:	681b      	ldr	r3, [r3, #0]
   122ec:	617b      	str	r3, [r7, #20]
   122ee:	e023      	b.n	12338 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   122f0:	697b      	ldr	r3, [r7, #20]
   122f2:	685b      	ldr	r3, [r3, #4]
   122f4:	f107 0208 	add.w	r2, r7, #8
   122f8:	2100      	movs	r1, #0
   122fa:	6978      	ldr	r0, [r7, #20]
   122fc:	4798      	blx	r3
   122fe:	4603      	mov	r3, r0
   12300:	2b00      	cmp	r3, #0
   12302:	d117      	bne.n	12334 <usbdc_set_interface+0x114>
			if (alt_set) {
   12304:	88fb      	ldrh	r3, [r7, #6]
   12306:	2b00      	cmp	r3, #0
   12308:	d00c      	beq.n	12324 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
   1230a:	4b0f      	ldr	r3, [pc, #60]	; (12348 <usbdc_set_interface+0x128>)
   1230c:	7f5b      	ldrb	r3, [r3, #29]
   1230e:	b25a      	sxtb	r2, r3
   12310:	88bb      	ldrh	r3, [r7, #4]
   12312:	2101      	movs	r1, #1
   12314:	fa01 f303 	lsl.w	r3, r1, r3
   12318:	b25b      	sxtb	r3, r3
   1231a:	4313      	orrs	r3, r2
   1231c:	b25b      	sxtb	r3, r3
   1231e:	b2da      	uxtb	r2, r3
   12320:	4b09      	ldr	r3, [pc, #36]	; (12348 <usbdc_set_interface+0x128>)
   12322:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
   12324:	2300      	movs	r3, #0
   12326:	2200      	movs	r2, #0
   12328:	2100      	movs	r1, #0
   1232a:	2000      	movs	r0, #0
   1232c:	4c0b      	ldr	r4, [pc, #44]	; (1235c <usbdc_set_interface+0x13c>)
   1232e:	47a0      	blx	r4
			return true;
   12330:	2301      	movs	r3, #1
   12332:	e005      	b.n	12340 <usbdc_set_interface+0x120>
		} else {
			return false;
   12334:	2300      	movs	r3, #0
   12336:	e003      	b.n	12340 <usbdc_set_interface+0x120>
	while (NULL != func) {
   12338:	697b      	ldr	r3, [r7, #20]
   1233a:	2b00      	cmp	r3, #0
   1233c:	d1ca      	bne.n	122d4 <usbdc_set_interface+0xb4>
		}
	}

	return false;
   1233e:	2300      	movs	r3, #0
}
   12340:	4618      	mov	r0, r3
   12342:	371c      	adds	r7, #28
   12344:	46bd      	mov	sp, r7
   12346:	bd90      	pop	{r4, r7, pc}
   12348:	20008f44 	.word	0x20008f44
   1234c:	00012a85 	.word	0x00012a85
   12350:	00011c31 	.word	0x00011c31
   12354:	000129c5 	.word	0x000129c5
   12358:	00011c0d 	.word	0x00011c0d
   1235c:	00012735 	.word	0x00012735

00012360 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
   12360:	b590      	push	{r4, r7, lr}
   12362:	b083      	sub	sp, #12
   12364:	af00      	add	r7, sp, #0
   12366:	4603      	mov	r3, r0
   12368:	6039      	str	r1, [r7, #0]
   1236a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   1236c:	683b      	ldr	r3, [r7, #0]
   1236e:	785b      	ldrb	r3, [r3, #1]
   12370:	3b01      	subs	r3, #1
   12372:	2b0a      	cmp	r3, #10
   12374:	d85b      	bhi.n	1242e <usbdc_set_req+0xce>
   12376:	a201      	add	r2, pc, #4	; (adr r2, 1237c <usbdc_set_req+0x1c>)
   12378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1237c:	000123fb 	.word	0x000123fb
   12380:	0001242f 	.word	0x0001242f
   12384:	00012409 	.word	0x00012409
   12388:	0001242f 	.word	0x0001242f
   1238c:	000123a9 	.word	0x000123a9
   12390:	0001242f 	.word	0x0001242f
   12394:	0001242f 	.word	0x0001242f
   12398:	0001242f 	.word	0x0001242f
   1239c:	000123c3 	.word	0x000123c3
   123a0:	0001242f 	.word	0x0001242f
   123a4:	00012417 	.word	0x00012417
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   123a8:	79f8      	ldrb	r0, [r7, #7]
   123aa:	2301      	movs	r3, #1
   123ac:	2200      	movs	r2, #0
   123ae:	2100      	movs	r1, #0
   123b0:	4c21      	ldr	r4, [pc, #132]	; (12438 <usbdc_set_req+0xd8>)
   123b2:	47a0      	blx	r4
   123b4:	4603      	mov	r3, r0
   123b6:	2b00      	cmp	r3, #0
   123b8:	bf0c      	ite	eq
   123ba:	2301      	moveq	r3, #1
   123bc:	2300      	movne	r3, #0
   123be:	b2db      	uxtb	r3, r3
   123c0:	e036      	b.n	12430 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
   123c2:	683b      	ldr	r3, [r7, #0]
   123c4:	885b      	ldrh	r3, [r3, #2]
   123c6:	b29b      	uxth	r3, r3
   123c8:	b2db      	uxtb	r3, r3
   123ca:	4618      	mov	r0, r3
   123cc:	4b1b      	ldr	r3, [pc, #108]	; (1243c <usbdc_set_req+0xdc>)
   123ce:	4798      	blx	r3
   123d0:	4603      	mov	r3, r0
   123d2:	f083 0301 	eor.w	r3, r3, #1
   123d6:	b2db      	uxtb	r3, r3
   123d8:	2b00      	cmp	r3, #0
   123da:	d001      	beq.n	123e0 <usbdc_set_req+0x80>
			return false;
   123dc:	2300      	movs	r3, #0
   123de:	e027      	b.n	12430 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   123e0:	79f8      	ldrb	r0, [r7, #7]
   123e2:	2301      	movs	r3, #1
   123e4:	2200      	movs	r2, #0
   123e6:	2100      	movs	r1, #0
   123e8:	4c13      	ldr	r4, [pc, #76]	; (12438 <usbdc_set_req+0xd8>)
   123ea:	47a0      	blx	r4
   123ec:	4603      	mov	r3, r0
   123ee:	2b00      	cmp	r3, #0
   123f0:	bf0c      	ite	eq
   123f2:	2301      	moveq	r3, #1
   123f4:	2300      	movne	r3, #0
   123f6:	b2db      	uxtb	r3, r3
   123f8:	e01a      	b.n	12430 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
   123fa:	79fb      	ldrb	r3, [r7, #7]
   123fc:	6839      	ldr	r1, [r7, #0]
   123fe:	4618      	mov	r0, r3
   12400:	4b0f      	ldr	r3, [pc, #60]	; (12440 <usbdc_set_req+0xe0>)
   12402:	4798      	blx	r3
   12404:	4603      	mov	r3, r0
   12406:	e013      	b.n	12430 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
   12408:	79fb      	ldrb	r3, [r7, #7]
   1240a:	6839      	ldr	r1, [r7, #0]
   1240c:	4618      	mov	r0, r3
   1240e:	4b0d      	ldr	r3, [pc, #52]	; (12444 <usbdc_set_req+0xe4>)
   12410:	4798      	blx	r3
   12412:	4603      	mov	r3, r0
   12414:	e00c      	b.n	12430 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
   12416:	683b      	ldr	r3, [r7, #0]
   12418:	885b      	ldrh	r3, [r3, #2]
   1241a:	b29a      	uxth	r2, r3
   1241c:	683b      	ldr	r3, [r7, #0]
   1241e:	889b      	ldrh	r3, [r3, #4]
   12420:	b29b      	uxth	r3, r3
   12422:	4619      	mov	r1, r3
   12424:	4610      	mov	r0, r2
   12426:	4b08      	ldr	r3, [pc, #32]	; (12448 <usbdc_set_req+0xe8>)
   12428:	4798      	blx	r3
   1242a:	4603      	mov	r3, r0
   1242c:	e000      	b.n	12430 <usbdc_set_req+0xd0>
	default:
		return false;
   1242e:	2300      	movs	r3, #0
	}
}
   12430:	4618      	mov	r0, r3
   12432:	370c      	adds	r7, #12
   12434:	46bd      	mov	sp, r7
   12436:	bd90      	pop	{r4, r7, pc}
   12438:	00012735 	.word	0x00012735
   1243c:	00012115 	.word	0x00012115
   12440:	00012031 	.word	0x00012031
   12444:	00012089 	.word	0x00012089
   12448:	00012221 	.word	0x00012221

0001244c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
   1244c:	b580      	push	{r7, lr}
   1244e:	b082      	sub	sp, #8
   12450:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   12452:	4b0a      	ldr	r3, [pc, #40]	; (1247c <usbdc_sof_notify+0x30>)
   12454:	685b      	ldr	r3, [r3, #4]
   12456:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
   12458:	e009      	b.n	1246e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
   1245a:	687b      	ldr	r3, [r7, #4]
   1245c:	685b      	ldr	r3, [r3, #4]
   1245e:	2b00      	cmp	r3, #0
   12460:	d002      	beq.n	12468 <usbdc_sof_notify+0x1c>
			sof->cb();
   12462:	687b      	ldr	r3, [r7, #4]
   12464:	685b      	ldr	r3, [r3, #4]
   12466:	4798      	blx	r3
		}
		sof = sof->next;
   12468:	687b      	ldr	r3, [r7, #4]
   1246a:	681b      	ldr	r3, [r3, #0]
   1246c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
   1246e:	687b      	ldr	r3, [r7, #4]
   12470:	2b00      	cmp	r3, #0
   12472:	d1f2      	bne.n	1245a <usbdc_sof_notify+0xe>
	}
}
   12474:	bf00      	nop
   12476:	3708      	adds	r7, #8
   12478:	46bd      	mov	sp, r7
   1247a:	bd80      	pop	{r7, pc}
   1247c:	20008f44 	.word	0x20008f44

00012480 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
   12480:	b580      	push	{r7, lr}
   12482:	b084      	sub	sp, #16
   12484:	af00      	add	r7, sp, #0
   12486:	4603      	mov	r3, r0
   12488:	6039      	str	r1, [r7, #0]
   1248a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   1248c:	4b0b      	ldr	r3, [pc, #44]	; (124bc <usbdc_change_notify+0x3c>)
   1248e:	68db      	ldr	r3, [r3, #12]
   12490:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
   12492:	e00c      	b.n	124ae <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
   12494:	68fb      	ldr	r3, [r7, #12]
   12496:	685b      	ldr	r3, [r3, #4]
   12498:	2b00      	cmp	r3, #0
   1249a:	d005      	beq.n	124a8 <usbdc_change_notify+0x28>
			cg->cb(change, value);
   1249c:	68fb      	ldr	r3, [r7, #12]
   1249e:	685b      	ldr	r3, [r3, #4]
   124a0:	79fa      	ldrb	r2, [r7, #7]
   124a2:	6839      	ldr	r1, [r7, #0]
   124a4:	4610      	mov	r0, r2
   124a6:	4798      	blx	r3
		}
		cg = cg->next;
   124a8:	68fb      	ldr	r3, [r7, #12]
   124aa:	681b      	ldr	r3, [r3, #0]
   124ac:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
   124ae:	68fb      	ldr	r3, [r7, #12]
   124b0:	2b00      	cmp	r3, #0
   124b2:	d1ef      	bne.n	12494 <usbdc_change_notify+0x14>
	}
}
   124b4:	bf00      	nop
   124b6:	3710      	adds	r7, #16
   124b8:	46bd      	mov	sp, r7
   124ba:	bd80      	pop	{r7, pc}
   124bc:	20008f44 	.word	0x20008f44

000124c0 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   124c0:	b580      	push	{r7, lr}
   124c2:	b084      	sub	sp, #16
   124c4:	af00      	add	r7, sp, #0
   124c6:	4603      	mov	r3, r0
   124c8:	6039      	str	r1, [r7, #0]
   124ca:	71fb      	strb	r3, [r7, #7]
   124cc:	4613      	mov	r3, r2
   124ce:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   124d0:	4b12      	ldr	r3, [pc, #72]	; (1251c <usbdc_request_handler+0x5c>)
   124d2:	689b      	ldr	r3, [r3, #8]
   124d4:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
   124d6:	e019      	b.n	1250c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
   124d8:	68fb      	ldr	r3, [r7, #12]
   124da:	685b      	ldr	r3, [r3, #4]
   124dc:	2b00      	cmp	r3, #0
   124de:	d012      	beq.n	12506 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
   124e0:	68fb      	ldr	r3, [r7, #12]
   124e2:	685b      	ldr	r3, [r3, #4]
   124e4:	79ba      	ldrb	r2, [r7, #6]
   124e6:	79f8      	ldrb	r0, [r7, #7]
   124e8:	6839      	ldr	r1, [r7, #0]
   124ea:	4798      	blx	r3
   124ec:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
   124ee:	68bb      	ldr	r3, [r7, #8]
   124f0:	2b00      	cmp	r3, #0
   124f2:	d101      	bne.n	124f8 <usbdc_request_handler+0x38>
				return true;
   124f4:	2301      	movs	r3, #1
   124f6:	e00d      	b.n	12514 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
   124f8:	68bb      	ldr	r3, [r7, #8]
   124fa:	f113 0f0a 	cmn.w	r3, #10
   124fe:	d002      	beq.n	12506 <usbdc_request_handler+0x46>
				return -1;
   12500:	f04f 33ff 	mov.w	r3, #4294967295
   12504:	e006      	b.n	12514 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
   12506:	68fb      	ldr	r3, [r7, #12]
   12508:	681b      	ldr	r3, [r3, #0]
   1250a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
   1250c:	68fb      	ldr	r3, [r7, #12]
   1250e:	2b00      	cmp	r3, #0
   12510:	d1e2      	bne.n	124d8 <usbdc_request_handler+0x18>
	}
	return false;
   12512:	2300      	movs	r3, #0
}
   12514:	4618      	mov	r0, r3
   12516:	3710      	adds	r7, #16
   12518:	46bd      	mov	sp, r7
   1251a:	bd80      	pop	{r7, pc}
   1251c:	20008f44 	.word	0x20008f44

00012520 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   12520:	b580      	push	{r7, lr}
   12522:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
   12524:	4b01      	ldr	r3, [pc, #4]	; (1252c <usbd_sof_cb+0xc>)
   12526:	4798      	blx	r3
}
   12528:	bf00      	nop
   1252a:	bd80      	pop	{r7, pc}
   1252c:	0001244d 	.word	0x0001244d

00012530 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
   12530:	b580      	push	{r7, lr}
   12532:	b082      	sub	sp, #8
   12534:	af00      	add	r7, sp, #0
   12536:	4603      	mov	r3, r0
   12538:	6039      	str	r1, [r7, #0]
   1253a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   1253c:	79fb      	ldrb	r3, [r7, #7]
   1253e:	2200      	movs	r2, #0
   12540:	6839      	ldr	r1, [r7, #0]
   12542:	4618      	mov	r0, r3
   12544:	4b14      	ldr	r3, [pc, #80]	; (12598 <usbdc_cb_ctl_req+0x68>)
   12546:	4798      	blx	r3
   12548:	4603      	mov	r3, r0
   1254a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1254e:	d00b      	beq.n	12568 <usbdc_cb_ctl_req+0x38>
   12550:	2b01      	cmp	r3, #1
   12552:	d007      	beq.n	12564 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
   12554:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   12556:	683b      	ldr	r3, [r7, #0]
   12558:	781b      	ldrb	r3, [r3, #0]
   1255a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   1255e:	2b00      	cmp	r3, #0
   12560:	d007      	beq.n	12572 <usbdc_cb_ctl_req+0x42>
   12562:	e003      	b.n	1256c <usbdc_cb_ctl_req+0x3c>
		return true;
   12564:	2301      	movs	r3, #1
   12566:	e013      	b.n	12590 <usbdc_cb_ctl_req+0x60>
		return false;
   12568:	2300      	movs	r3, #0
   1256a:	e011      	b.n	12590 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   1256c:	2b80      	cmp	r3, #128	; 0x80
   1256e:	d007      	beq.n	12580 <usbdc_cb_ctl_req+0x50>
   12570:	e00d      	b.n	1258e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
   12572:	79fb      	ldrb	r3, [r7, #7]
   12574:	6839      	ldr	r1, [r7, #0]
   12576:	4618      	mov	r0, r3
   12578:	4b08      	ldr	r3, [pc, #32]	; (1259c <usbdc_cb_ctl_req+0x6c>)
   1257a:	4798      	blx	r3
   1257c:	4603      	mov	r3, r0
   1257e:	e007      	b.n	12590 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
   12580:	79fb      	ldrb	r3, [r7, #7]
   12582:	6839      	ldr	r1, [r7, #0]
   12584:	4618      	mov	r0, r3
   12586:	4b06      	ldr	r3, [pc, #24]	; (125a0 <usbdc_cb_ctl_req+0x70>)
   12588:	4798      	blx	r3
   1258a:	4603      	mov	r3, r0
   1258c:	e000      	b.n	12590 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
   1258e:	2300      	movs	r3, #0
	}
}
   12590:	4618      	mov	r0, r3
   12592:	3708      	adds	r7, #8
   12594:	46bd      	mov	sp, r7
   12596:	bd80      	pop	{r7, pc}
   12598:	000124c1 	.word	0x000124c1
   1259c:	00012361 	.word	0x00012361
   125a0:	00011f89 	.word	0x00011f89

000125a4 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
   125aa:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   125ac:	687b      	ldr	r3, [r7, #4]
   125ae:	781b      	ldrb	r3, [r3, #0]
   125b0:	2b00      	cmp	r3, #0
   125b2:	d135      	bne.n	12620 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
   125b4:	687b      	ldr	r3, [r7, #4]
   125b6:	785b      	ldrb	r3, [r3, #1]
   125b8:	2b05      	cmp	r3, #5
   125ba:	d019      	beq.n	125f0 <usbdc_ctrl_status_end+0x4c>
   125bc:	2b09      	cmp	r3, #9
   125be:	d000      	beq.n	125c2 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
   125c0:	e02f      	b.n	12622 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
   125c2:	687b      	ldr	r3, [r7, #4]
   125c4:	885b      	ldrh	r3, [r3, #2]
   125c6:	b29b      	uxth	r3, r3
   125c8:	b2da      	uxtb	r2, r3
   125ca:	4b17      	ldr	r3, [pc, #92]	; (12628 <usbdc_ctrl_status_end+0x84>)
   125cc:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	885b      	ldrh	r3, [r3, #2]
   125d2:	b29b      	uxth	r3, r3
   125d4:	2b00      	cmp	r3, #0
   125d6:	d001      	beq.n	125dc <usbdc_ctrl_status_end+0x38>
   125d8:	2204      	movs	r2, #4
   125da:	e000      	b.n	125de <usbdc_ctrl_status_end+0x3a>
   125dc:	2203      	movs	r2, #3
   125de:	4b12      	ldr	r3, [pc, #72]	; (12628 <usbdc_ctrl_status_end+0x84>)
   125e0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   125e2:	4b11      	ldr	r3, [pc, #68]	; (12628 <usbdc_ctrl_status_end+0x84>)
   125e4:	7e9b      	ldrb	r3, [r3, #26]
   125e6:	4619      	mov	r1, r3
   125e8:	2001      	movs	r0, #1
   125ea:	4b10      	ldr	r3, [pc, #64]	; (1262c <usbdc_ctrl_status_end+0x88>)
   125ec:	4798      	blx	r3
		break;
   125ee:	e018      	b.n	12622 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
   125f0:	687b      	ldr	r3, [r7, #4]
   125f2:	885b      	ldrh	r3, [r3, #2]
   125f4:	b29b      	uxth	r3, r3
   125f6:	b2db      	uxtb	r3, r3
   125f8:	4618      	mov	r0, r3
   125fa:	4b0d      	ldr	r3, [pc, #52]	; (12630 <usbdc_ctrl_status_end+0x8c>)
   125fc:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   125fe:	687b      	ldr	r3, [r7, #4]
   12600:	885b      	ldrh	r3, [r3, #2]
   12602:	b29b      	uxth	r3, r3
   12604:	2b00      	cmp	r3, #0
   12606:	d001      	beq.n	1260c <usbdc_ctrl_status_end+0x68>
   12608:	2203      	movs	r2, #3
   1260a:	e000      	b.n	1260e <usbdc_ctrl_status_end+0x6a>
   1260c:	2202      	movs	r2, #2
   1260e:	4b06      	ldr	r3, [pc, #24]	; (12628 <usbdc_ctrl_status_end+0x84>)
   12610:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   12612:	4b05      	ldr	r3, [pc, #20]	; (12628 <usbdc_ctrl_status_end+0x84>)
   12614:	7e9b      	ldrb	r3, [r3, #26]
   12616:	4619      	mov	r1, r3
   12618:	2001      	movs	r0, #1
   1261a:	4b04      	ldr	r3, [pc, #16]	; (1262c <usbdc_ctrl_status_end+0x88>)
   1261c:	4798      	blx	r3
		break;
   1261e:	e000      	b.n	12622 <usbdc_ctrl_status_end+0x7e>
		return;
   12620:	bf00      	nop
	}
}
   12622:	3708      	adds	r7, #8
   12624:	46bd      	mov	sp, r7
   12626:	bd80      	pop	{r7, pc}
   12628:	20008f44 	.word	0x20008f44
   1262c:	00012481 	.word	0x00012481
   12630:	00012201 	.word	0x00012201

00012634 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
   12634:	b580      	push	{r7, lr}
   12636:	b082      	sub	sp, #8
   12638:	af00      	add	r7, sp, #0
   1263a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   1263c:	2201      	movs	r2, #1
   1263e:	6879      	ldr	r1, [r7, #4]
   12640:	2000      	movs	r0, #0
   12642:	4b03      	ldr	r3, [pc, #12]	; (12650 <usbdc_ctrl_data_end+0x1c>)
   12644:	4798      	blx	r3
	return false;
   12646:	2300      	movs	r3, #0
}
   12648:	4618      	mov	r0, r3
   1264a:	3708      	adds	r7, #8
   1264c:	46bd      	mov	sp, r7
   1264e:	bd80      	pop	{r7, pc}
   12650:	000124c1 	.word	0x000124c1

00012654 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   12654:	b580      	push	{r7, lr}
   12656:	b082      	sub	sp, #8
   12658:	af00      	add	r7, sp, #0
   1265a:	4603      	mov	r3, r0
   1265c:	603a      	str	r2, [r7, #0]
   1265e:	71fb      	strb	r3, [r7, #7]
   12660:	460b      	mov	r3, r1
   12662:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
   12664:	79bb      	ldrb	r3, [r7, #6]
   12666:	2b00      	cmp	r3, #0
   12668:	d002      	beq.n	12670 <usbdc_cb_ctl_done+0x1c>
   1266a:	2b01      	cmp	r3, #1
   1266c:	d004      	beq.n	12678 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
   1266e:	e008      	b.n	12682 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
   12670:	6838      	ldr	r0, [r7, #0]
   12672:	4b06      	ldr	r3, [pc, #24]	; (1268c <usbdc_cb_ctl_done+0x38>)
   12674:	4798      	blx	r3
		break;
   12676:	e004      	b.n	12682 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
   12678:	6838      	ldr	r0, [r7, #0]
   1267a:	4b05      	ldr	r3, [pc, #20]	; (12690 <usbdc_cb_ctl_done+0x3c>)
   1267c:	4798      	blx	r3
   1267e:	4603      	mov	r3, r0
   12680:	e000      	b.n	12684 <usbdc_cb_ctl_done+0x30>
	}
	return false;
   12682:	2300      	movs	r3, #0
}
   12684:	4618      	mov	r0, r3
   12686:	3708      	adds	r7, #8
   12688:	46bd      	mov	sp, r7
   1268a:	bd80      	pop	{r7, pc}
   1268c:	000125a5 	.word	0x000125a5
   12690:	00012635 	.word	0x00012635

00012694 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   12694:	b580      	push	{r7, lr}
   12696:	af00      	add	r7, sp, #0
	usbdc_unconfig();
   12698:	4b10      	ldr	r3, [pc, #64]	; (126dc <usbdc_reset+0x48>)
   1269a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
   1269c:	4b10      	ldr	r3, [pc, #64]	; (126e0 <usbdc_reset+0x4c>)
   1269e:	2202      	movs	r2, #2
   126a0:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
   126a2:	4b0f      	ldr	r3, [pc, #60]	; (126e0 <usbdc_reset+0x4c>)
   126a4:	2200      	movs	r2, #0
   126a6:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
   126a8:	4b0d      	ldr	r3, [pc, #52]	; (126e0 <usbdc_reset+0x4c>)
   126aa:	2200      	movs	r2, #0
   126ac:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
   126ae:	2000      	movs	r0, #0
   126b0:	4b0c      	ldr	r3, [pc, #48]	; (126e4 <usbdc_reset+0x50>)
   126b2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   126b4:	4b0a      	ldr	r3, [pc, #40]	; (126e0 <usbdc_reset+0x4c>)
   126b6:	7f1b      	ldrb	r3, [r3, #28]
   126b8:	4618      	mov	r0, r3
   126ba:	4b0b      	ldr	r3, [pc, #44]	; (126e8 <usbdc_reset+0x54>)
   126bc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   126be:	4a0b      	ldr	r2, [pc, #44]	; (126ec <usbdc_reset+0x58>)
   126c0:	2100      	movs	r1, #0
   126c2:	2000      	movs	r0, #0
   126c4:	4b0a      	ldr	r3, [pc, #40]	; (126f0 <usbdc_reset+0x5c>)
   126c6:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   126c8:	4a0a      	ldr	r2, [pc, #40]	; (126f4 <usbdc_reset+0x60>)
   126ca:	2102      	movs	r1, #2
   126cc:	2000      	movs	r0, #0
   126ce:	4b08      	ldr	r3, [pc, #32]	; (126f0 <usbdc_reset+0x5c>)
   126d0:	4798      	blx	r3
	usb_d_ep_enable(0);
   126d2:	2000      	movs	r0, #0
   126d4:	4b08      	ldr	r3, [pc, #32]	; (126f8 <usbdc_reset+0x64>)
   126d6:	4798      	blx	r3
}
   126d8:	bf00      	nop
   126da:	bd80      	pop	{r7, pc}
   126dc:	000120e1 	.word	0x000120e1
   126e0:	20008f44 	.word	0x20008f44
   126e4:	0000798d 	.word	0x0000798d
   126e8:	000078c9 	.word	0x000078c9
   126ec:	00012531 	.word	0x00012531
   126f0:	00007ce1 	.word	0x00007ce1
   126f4:	00012655 	.word	0x00012655
   126f8:	000079dd 	.word	0x000079dd

000126fc <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
   126fc:	b580      	push	{r7, lr}
   126fe:	b082      	sub	sp, #8
   12700:	af00      	add	r7, sp, #0
   12702:	4603      	mov	r3, r0
   12704:	6039      	str	r1, [r7, #0]
   12706:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
   12708:	79fb      	ldrb	r3, [r7, #7]
   1270a:	2b00      	cmp	r3, #0
   1270c:	d002      	beq.n	12714 <usbd_event_cb+0x18>
   1270e:	2b01      	cmp	r3, #1
   12710:	d005      	beq.n	1271e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   12712:	e007      	b.n	12724 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
   12714:	6839      	ldr	r1, [r7, #0]
   12716:	2000      	movs	r0, #0
   12718:	4b04      	ldr	r3, [pc, #16]	; (1272c <usbd_event_cb+0x30>)
   1271a:	4798      	blx	r3
		break;
   1271c:	e002      	b.n	12724 <usbd_event_cb+0x28>
		usbdc_reset();
   1271e:	4b04      	ldr	r3, [pc, #16]	; (12730 <usbd_event_cb+0x34>)
   12720:	4798      	blx	r3
		break;
   12722:	bf00      	nop
	}
}
   12724:	bf00      	nop
   12726:	3708      	adds	r7, #8
   12728:	46bd      	mov	sp, r7
   1272a:	bd80      	pop	{r7, pc}
   1272c:	00012481 	.word	0x00012481
   12730:	00012695 	.word	0x00012695

00012734 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   12734:	b580      	push	{r7, lr}
   12736:	b088      	sub	sp, #32
   12738:	af00      	add	r7, sp, #0
   1273a:	60b9      	str	r1, [r7, #8]
   1273c:	607a      	str	r2, [r7, #4]
   1273e:	461a      	mov	r2, r3
   12740:	4603      	mov	r3, r0
   12742:	73fb      	strb	r3, [r7, #15]
   12744:	4613      	mov	r3, r2
   12746:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   12748:	68bb      	ldr	r3, [r7, #8]
   1274a:	617b      	str	r3, [r7, #20]
   1274c:	687b      	ldr	r3, [r7, #4]
   1274e:	61bb      	str	r3, [r7, #24]
   12750:	7bfb      	ldrb	r3, [r7, #15]
   12752:	773b      	strb	r3, [r7, #28]
   12754:	7bbb      	ldrb	r3, [r7, #14]
   12756:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   12758:	f107 0314 	add.w	r3, r7, #20
   1275c:	4618      	mov	r0, r3
   1275e:	4b03      	ldr	r3, [pc, #12]	; (1276c <usbdc_xfer+0x38>)
   12760:	4798      	blx	r3
   12762:	4603      	mov	r3, r0
}
   12764:	4618      	mov	r0, r3
   12766:	3720      	adds	r7, #32
   12768:	46bd      	mov	sp, r7
   1276a:	bd80      	pop	{r7, pc}
   1276c:	00007a4d 	.word	0x00007a4d

00012770 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   12770:	b580      	push	{r7, lr}
   12772:	b082      	sub	sp, #8
   12774:	af00      	add	r7, sp, #0
   12776:	4603      	mov	r3, r0
   12778:	6039      	str	r1, [r7, #0]
   1277a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   1277c:	79fb      	ldrb	r3, [r7, #7]
   1277e:	2b01      	cmp	r3, #1
   12780:	d009      	beq.n	12796 <usbdc_register_handler+0x26>
   12782:	2b02      	cmp	r3, #2
   12784:	d00c      	beq.n	127a0 <usbdc_register_handler+0x30>
   12786:	2b00      	cmp	r3, #0
   12788:	d000      	beq.n	1278c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   1278a:	e00e      	b.n	127aa <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   1278c:	6839      	ldr	r1, [r7, #0]
   1278e:	4809      	ldr	r0, [pc, #36]	; (127b4 <usbdc_register_handler+0x44>)
   12790:	4b09      	ldr	r3, [pc, #36]	; (127b8 <usbdc_register_handler+0x48>)
   12792:	4798      	blx	r3
		break;
   12794:	e009      	b.n	127aa <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   12796:	6839      	ldr	r1, [r7, #0]
   12798:	4808      	ldr	r0, [pc, #32]	; (127bc <usbdc_register_handler+0x4c>)
   1279a:	4b07      	ldr	r3, [pc, #28]	; (127b8 <usbdc_register_handler+0x48>)
   1279c:	4798      	blx	r3
		break;
   1279e:	e004      	b.n	127aa <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   127a0:	6839      	ldr	r1, [r7, #0]
   127a2:	4807      	ldr	r0, [pc, #28]	; (127c0 <usbdc_register_handler+0x50>)
   127a4:	4b04      	ldr	r3, [pc, #16]	; (127b8 <usbdc_register_handler+0x48>)
   127a6:	4798      	blx	r3
		break;
   127a8:	bf00      	nop
	}
}
   127aa:	bf00      	nop
   127ac:	3708      	adds	r7, #8
   127ae:	46bd      	mov	sp, r7
   127b0:	bd80      	pop	{r7, pc}
   127b2:	bf00      	nop
   127b4:	20008f48 	.word	0x20008f48
   127b8:	00007e39 	.word	0x00007e39
   127bc:	20008f4c 	.word	0x20008f4c
   127c0:	20008f50 	.word	0x20008f50

000127c4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   127c4:	b580      	push	{r7, lr}
   127c6:	b084      	sub	sp, #16
   127c8:	af00      	add	r7, sp, #0
   127ca:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   127cc:	687b      	ldr	r3, [r7, #4]
   127ce:	2b00      	cmp	r3, #0
   127d0:	bf14      	ite	ne
   127d2:	2301      	movne	r3, #1
   127d4:	2300      	moveq	r3, #0
   127d6:	b2db      	uxtb	r3, r3
   127d8:	f240 3255 	movw	r2, #853	; 0x355
   127dc:	4910      	ldr	r1, [pc, #64]	; (12820 <usbdc_init+0x5c>)
   127de:	4618      	mov	r0, r3
   127e0:	4b10      	ldr	r3, [pc, #64]	; (12824 <usbdc_init+0x60>)
   127e2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   127e4:	4b10      	ldr	r3, [pc, #64]	; (12828 <usbdc_init+0x64>)
   127e6:	4798      	blx	r3
   127e8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   127ea:	68fb      	ldr	r3, [r7, #12]
   127ec:	2b00      	cmp	r3, #0
   127ee:	da01      	bge.n	127f4 <usbdc_init+0x30>
		return rc;
   127f0:	68fb      	ldr	r3, [r7, #12]
   127f2:	e010      	b.n	12816 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   127f4:	2220      	movs	r2, #32
   127f6:	2100      	movs	r1, #0
   127f8:	480c      	ldr	r0, [pc, #48]	; (1282c <usbdc_init+0x68>)
   127fa:	4b0d      	ldr	r3, [pc, #52]	; (12830 <usbdc_init+0x6c>)
   127fc:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   127fe:	4a0b      	ldr	r2, [pc, #44]	; (1282c <usbdc_init+0x68>)
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   12804:	490b      	ldr	r1, [pc, #44]	; (12834 <usbdc_init+0x70>)
   12806:	2000      	movs	r0, #0
   12808:	4b0b      	ldr	r3, [pc, #44]	; (12838 <usbdc_init+0x74>)
   1280a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   1280c:	490b      	ldr	r1, [pc, #44]	; (1283c <usbdc_init+0x78>)
   1280e:	2001      	movs	r0, #1
   12810:	4b09      	ldr	r3, [pc, #36]	; (12838 <usbdc_init+0x74>)
   12812:	4798      	blx	r3

	return 0;
   12814:	2300      	movs	r3, #0
}
   12816:	4618      	mov	r0, r3
   12818:	3710      	adds	r7, #16
   1281a:	46bd      	mov	sp, r7
   1281c:	bd80      	pop	{r7, pc}
   1281e:	bf00      	nop
   12820:	00020558 	.word	0x00020558
   12824:	00007d5d 	.word	0x00007d5d
   12828:	000077b5 	.word	0x000077b5
   1282c:	20008f44 	.word	0x20008f44
   12830:	0001bd39 	.word	0x0001bd39
   12834:	00012521 	.word	0x00012521
   12838:	00007861 	.word	0x00007861
   1283c:	000126fd 	.word	0x000126fd

00012840 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   12840:	b580      	push	{r7, lr}
   12842:	b082      	sub	sp, #8
   12844:	af00      	add	r7, sp, #0
   12846:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   12848:	6879      	ldr	r1, [r7, #4]
   1284a:	4803      	ldr	r0, [pc, #12]	; (12858 <usbdc_register_function+0x18>)
   1284c:	4b03      	ldr	r3, [pc, #12]	; (1285c <usbdc_register_function+0x1c>)
   1284e:	4798      	blx	r3
}
   12850:	bf00      	nop
   12852:	3708      	adds	r7, #8
   12854:	46bd      	mov	sp, r7
   12856:	bd80      	pop	{r7, pc}
   12858:	20008f54 	.word	0x20008f54
   1285c:	00007e39 	.word	0x00007e39

00012860 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   12860:	b580      	push	{r7, lr}
   12862:	b082      	sub	sp, #8
   12864:	af00      	add	r7, sp, #0
   12866:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   12868:	4b0f      	ldr	r3, [pc, #60]	; (128a8 <usbdc_start+0x48>)
   1286a:	7e9b      	ldrb	r3, [r3, #26]
   1286c:	2b00      	cmp	r3, #0
   1286e:	d002      	beq.n	12876 <usbdc_start+0x16>
		return ERR_BUSY;
   12870:	f06f 0303 	mvn.w	r3, #3
   12874:	e013      	b.n	1289e <usbdc_start+0x3e>
	}

	if (desces) {
   12876:	687b      	ldr	r3, [r7, #4]
   12878:	2b00      	cmp	r3, #0
   1287a:	d00e      	beq.n	1289a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   1287c:	4a0a      	ldr	r2, [pc, #40]	; (128a8 <usbdc_start+0x48>)
   1287e:	687b      	ldr	r3, [r7, #4]
   12880:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   12882:	687b      	ldr	r3, [r7, #4]
   12884:	681b      	ldr	r3, [r3, #0]
   12886:	79da      	ldrb	r2, [r3, #7]
   12888:	4b07      	ldr	r3, [pc, #28]	; (128a8 <usbdc_start+0x48>)
   1288a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   1288c:	4b06      	ldr	r3, [pc, #24]	; (128a8 <usbdc_start+0x48>)
   1288e:	2201      	movs	r2, #1
   12890:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   12892:	4b06      	ldr	r3, [pc, #24]	; (128ac <usbdc_start+0x4c>)
   12894:	4798      	blx	r3
	return ERR_NONE;
   12896:	2300      	movs	r3, #0
   12898:	e001      	b.n	1289e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   1289a:	f06f 0308 	mvn.w	r3, #8
}
   1289e:	4618      	mov	r0, r3
   128a0:	3708      	adds	r7, #8
   128a2:	46bd      	mov	sp, r7
   128a4:	bd80      	pop	{r7, pc}
   128a6:	bf00      	nop
   128a8:	20008f44 	.word	0x20008f44
   128ac:	00007885 	.word	0x00007885

000128b0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   128b0:	b580      	push	{r7, lr}
   128b2:	af00      	add	r7, sp, #0
	usb_d_attach();
   128b4:	4b01      	ldr	r3, [pc, #4]	; (128bc <usbdc_attach+0xc>)
   128b6:	4798      	blx	r3
}
   128b8:	bf00      	nop
   128ba:	bd80      	pop	{r7, pc}
   128bc:	00007899 	.word	0x00007899

000128c0 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   128c0:	b480      	push	{r7}
   128c2:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   128c4:	4b03      	ldr	r3, [pc, #12]	; (128d4 <usbdc_get_ctrl_buffer+0x14>)
   128c6:	695b      	ldr	r3, [r3, #20]
}
   128c8:	4618      	mov	r0, r3
   128ca:	46bd      	mov	sp, r7
   128cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   128d0:	4770      	bx	lr
   128d2:	bf00      	nop
   128d4:	20008f44 	.word	0x20008f44

000128d8 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   128d8:	b480      	push	{r7}
   128da:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   128dc:	4b07      	ldr	r3, [pc, #28]	; (128fc <usbdc_get_state+0x24>)
   128de:	7e9b      	ldrb	r3, [r3, #26]
   128e0:	f003 0310 	and.w	r3, r3, #16
   128e4:	2b00      	cmp	r3, #0
   128e6:	d001      	beq.n	128ec <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   128e8:	2310      	movs	r3, #16
   128ea:	e001      	b.n	128f0 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   128ec:	4b03      	ldr	r3, [pc, #12]	; (128fc <usbdc_get_state+0x24>)
   128ee:	7e9b      	ldrb	r3, [r3, #26]
}
   128f0:	4618      	mov	r0, r3
   128f2:	46bd      	mov	sp, r7
   128f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   128f8:	4770      	bx	lr
   128fa:	bf00      	nop
   128fc:	20008f44 	.word	0x20008f44

00012900 <usb_get_u16>:
{
   12900:	b480      	push	{r7}
   12902:	b083      	sub	sp, #12
   12904:	af00      	add	r7, sp, #0
   12906:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   12908:	687b      	ldr	r3, [r7, #4]
   1290a:	781b      	ldrb	r3, [r3, #0]
   1290c:	b29a      	uxth	r2, r3
   1290e:	687b      	ldr	r3, [r7, #4]
   12910:	3301      	adds	r3, #1
   12912:	781b      	ldrb	r3, [r3, #0]
   12914:	b29b      	uxth	r3, r3
   12916:	021b      	lsls	r3, r3, #8
   12918:	b29b      	uxth	r3, r3
   1291a:	4413      	add	r3, r2
   1291c:	b29b      	uxth	r3, r3
}
   1291e:	4618      	mov	r0, r3
   12920:	370c      	adds	r7, #12
   12922:	46bd      	mov	sp, r7
   12924:	f85d 7b04 	ldr.w	r7, [sp], #4
   12928:	4770      	bx	lr

0001292a <usb_desc_len>:
{
   1292a:	b480      	push	{r7}
   1292c:	b083      	sub	sp, #12
   1292e:	af00      	add	r7, sp, #0
   12930:	6078      	str	r0, [r7, #4]
	return desc[0];
   12932:	687b      	ldr	r3, [r7, #4]
   12934:	781b      	ldrb	r3, [r3, #0]
}
   12936:	4618      	mov	r0, r3
   12938:	370c      	adds	r7, #12
   1293a:	46bd      	mov	sp, r7
   1293c:	f85d 7b04 	ldr.w	r7, [sp], #4
   12940:	4770      	bx	lr

00012942 <usb_desc_type>:
{
   12942:	b480      	push	{r7}
   12944:	b083      	sub	sp, #12
   12946:	af00      	add	r7, sp, #0
   12948:	6078      	str	r0, [r7, #4]
	return desc[1];
   1294a:	687b      	ldr	r3, [r7, #4]
   1294c:	3301      	adds	r3, #1
   1294e:	781b      	ldrb	r3, [r3, #0]
}
   12950:	4618      	mov	r0, r3
   12952:	370c      	adds	r7, #12
   12954:	46bd      	mov	sp, r7
   12956:	f85d 7b04 	ldr.w	r7, [sp], #4
   1295a:	4770      	bx	lr

0001295c <usb_desc_next>:
{
   1295c:	b580      	push	{r7, lr}
   1295e:	b082      	sub	sp, #8
   12960:	af00      	add	r7, sp, #0
   12962:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   12964:	6878      	ldr	r0, [r7, #4]
   12966:	4b05      	ldr	r3, [pc, #20]	; (1297c <usb_desc_next+0x20>)
   12968:	4798      	blx	r3
   1296a:	4603      	mov	r3, r0
   1296c:	461a      	mov	r2, r3
   1296e:	687b      	ldr	r3, [r7, #4]
   12970:	4413      	add	r3, r2
}
   12972:	4618      	mov	r0, r3
   12974:	3708      	adds	r7, #8
   12976:	46bd      	mov	sp, r7
   12978:	bd80      	pop	{r7, pc}
   1297a:	bf00      	nop
   1297c:	0001292b 	.word	0x0001292b

00012980 <usb_cfg_desc_total_len>:
{
   12980:	b580      	push	{r7, lr}
   12982:	b082      	sub	sp, #8
   12984:	af00      	add	r7, sp, #0
   12986:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   12988:	687b      	ldr	r3, [r7, #4]
   1298a:	3302      	adds	r3, #2
   1298c:	4618      	mov	r0, r3
   1298e:	4b03      	ldr	r3, [pc, #12]	; (1299c <usb_cfg_desc_total_len+0x1c>)
   12990:	4798      	blx	r3
   12992:	4603      	mov	r3, r0
}
   12994:	4618      	mov	r0, r3
   12996:	3708      	adds	r7, #8
   12998:	46bd      	mov	sp, r7
   1299a:	bd80      	pop	{r7, pc}
   1299c:	00012901 	.word	0x00012901

000129a0 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   129a0:	b580      	push	{r7, lr}
   129a2:	b082      	sub	sp, #8
   129a4:	af00      	add	r7, sp, #0
   129a6:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   129a8:	6878      	ldr	r0, [r7, #4]
   129aa:	4b05      	ldr	r3, [pc, #20]	; (129c0 <usb_cfg_desc_next+0x20>)
   129ac:	4798      	blx	r3
   129ae:	4603      	mov	r3, r0
   129b0:	461a      	mov	r2, r3
   129b2:	687b      	ldr	r3, [r7, #4]
   129b4:	4413      	add	r3, r2
}
   129b6:	4618      	mov	r0, r3
   129b8:	3708      	adds	r7, #8
   129ba:	46bd      	mov	sp, r7
   129bc:	bd80      	pop	{r7, pc}
   129be:	bf00      	nop
   129c0:	00012981 	.word	0x00012981

000129c4 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   129c4:	b580      	push	{r7, lr}
   129c6:	b084      	sub	sp, #16
   129c8:	af00      	add	r7, sp, #0
   129ca:	60f8      	str	r0, [r7, #12]
   129cc:	60b9      	str	r1, [r7, #8]
   129ce:	4613      	mov	r3, r2
   129d0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   129d2:	e015      	b.n	12a00 <usb_find_desc+0x3c>
		_desc_len_check();
   129d4:	68f8      	ldr	r0, [r7, #12]
   129d6:	4b0f      	ldr	r3, [pc, #60]	; (12a14 <usb_find_desc+0x50>)
   129d8:	4798      	blx	r3
   129da:	4603      	mov	r3, r0
   129dc:	2b01      	cmp	r3, #1
   129de:	d801      	bhi.n	129e4 <usb_find_desc+0x20>
   129e0:	2300      	movs	r3, #0
   129e2:	e012      	b.n	12a0a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   129e4:	68f8      	ldr	r0, [r7, #12]
   129e6:	4b0c      	ldr	r3, [pc, #48]	; (12a18 <usb_find_desc+0x54>)
   129e8:	4798      	blx	r3
   129ea:	4603      	mov	r3, r0
   129ec:	461a      	mov	r2, r3
   129ee:	79fb      	ldrb	r3, [r7, #7]
   129f0:	4293      	cmp	r3, r2
   129f2:	d101      	bne.n	129f8 <usb_find_desc+0x34>
			return desc;
   129f4:	68fb      	ldr	r3, [r7, #12]
   129f6:	e008      	b.n	12a0a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   129f8:	68f8      	ldr	r0, [r7, #12]
   129fa:	4b08      	ldr	r3, [pc, #32]	; (12a1c <usb_find_desc+0x58>)
   129fc:	4798      	blx	r3
   129fe:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   12a00:	68fa      	ldr	r2, [r7, #12]
   12a02:	68bb      	ldr	r3, [r7, #8]
   12a04:	429a      	cmp	r2, r3
   12a06:	d3e5      	bcc.n	129d4 <usb_find_desc+0x10>
	}
	return NULL;
   12a08:	2300      	movs	r3, #0
}
   12a0a:	4618      	mov	r0, r3
   12a0c:	3710      	adds	r7, #16
   12a0e:	46bd      	mov	sp, r7
   12a10:	bd80      	pop	{r7, pc}
   12a12:	bf00      	nop
   12a14:	0001292b 	.word	0x0001292b
   12a18:	00012943 	.word	0x00012943
   12a1c:	0001295d 	.word	0x0001295d

00012a20 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   12a20:	b580      	push	{r7, lr}
   12a22:	b082      	sub	sp, #8
   12a24:	af00      	add	r7, sp, #0
   12a26:	6078      	str	r0, [r7, #4]
   12a28:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   12a2a:	e019      	b.n	12a60 <usb_find_ep_desc+0x40>
		_desc_len_check();
   12a2c:	6878      	ldr	r0, [r7, #4]
   12a2e:	4b12      	ldr	r3, [pc, #72]	; (12a78 <usb_find_ep_desc+0x58>)
   12a30:	4798      	blx	r3
   12a32:	4603      	mov	r3, r0
   12a34:	2b01      	cmp	r3, #1
   12a36:	d801      	bhi.n	12a3c <usb_find_ep_desc+0x1c>
   12a38:	2300      	movs	r3, #0
   12a3a:	e018      	b.n	12a6e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   12a3c:	6878      	ldr	r0, [r7, #4]
   12a3e:	4b0f      	ldr	r3, [pc, #60]	; (12a7c <usb_find_ep_desc+0x5c>)
   12a40:	4798      	blx	r3
   12a42:	4603      	mov	r3, r0
   12a44:	2b04      	cmp	r3, #4
   12a46:	d010      	beq.n	12a6a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   12a48:	6878      	ldr	r0, [r7, #4]
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <usb_find_ep_desc+0x5c>)
   12a4c:	4798      	blx	r3
   12a4e:	4603      	mov	r3, r0
   12a50:	2b05      	cmp	r3, #5
   12a52:	d101      	bne.n	12a58 <usb_find_ep_desc+0x38>
			return desc;
   12a54:	687b      	ldr	r3, [r7, #4]
   12a56:	e00a      	b.n	12a6e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   12a58:	6878      	ldr	r0, [r7, #4]
   12a5a:	4b09      	ldr	r3, [pc, #36]	; (12a80 <usb_find_ep_desc+0x60>)
   12a5c:	4798      	blx	r3
   12a5e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   12a60:	687a      	ldr	r2, [r7, #4]
   12a62:	683b      	ldr	r3, [r7, #0]
   12a64:	429a      	cmp	r2, r3
   12a66:	d3e1      	bcc.n	12a2c <usb_find_ep_desc+0xc>
   12a68:	e000      	b.n	12a6c <usb_find_ep_desc+0x4c>
			break;
   12a6a:	bf00      	nop
	}
	return NULL;
   12a6c:	2300      	movs	r3, #0
}
   12a6e:	4618      	mov	r0, r3
   12a70:	3708      	adds	r7, #8
   12a72:	46bd      	mov	sp, r7
   12a74:	bd80      	pop	{r7, pc}
   12a76:	bf00      	nop
   12a78:	0001292b 	.word	0x0001292b
   12a7c:	00012943 	.word	0x00012943
   12a80:	0001295d 	.word	0x0001295d

00012a84 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   12a84:	b580      	push	{r7, lr}
   12a86:	b084      	sub	sp, #16
   12a88:	af00      	add	r7, sp, #0
   12a8a:	60f8      	str	r0, [r7, #12]
   12a8c:	60b9      	str	r1, [r7, #8]
   12a8e:	4613      	mov	r3, r2
   12a90:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   12a92:	2202      	movs	r2, #2
   12a94:	68b9      	ldr	r1, [r7, #8]
   12a96:	68f8      	ldr	r0, [r7, #12]
   12a98:	4b15      	ldr	r3, [pc, #84]	; (12af0 <usb_find_cfg_desc+0x6c>)
   12a9a:	4798      	blx	r3
   12a9c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   12a9e:	68fb      	ldr	r3, [r7, #12]
   12aa0:	2b00      	cmp	r3, #0
   12aa2:	d11a      	bne.n	12ada <usb_find_cfg_desc+0x56>
		return NULL;
   12aa4:	2300      	movs	r3, #0
   12aa6:	e01f      	b.n	12ae8 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   12aa8:	68f8      	ldr	r0, [r7, #12]
   12aaa:	4b12      	ldr	r3, [pc, #72]	; (12af4 <usb_find_cfg_desc+0x70>)
   12aac:	4798      	blx	r3
   12aae:	4603      	mov	r3, r0
   12ab0:	2b01      	cmp	r3, #1
   12ab2:	d801      	bhi.n	12ab8 <usb_find_cfg_desc+0x34>
   12ab4:	2300      	movs	r3, #0
   12ab6:	e017      	b.n	12ae8 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   12ab8:	68fb      	ldr	r3, [r7, #12]
   12aba:	3301      	adds	r3, #1
   12abc:	781b      	ldrb	r3, [r3, #0]
   12abe:	2b02      	cmp	r3, #2
   12ac0:	d110      	bne.n	12ae4 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   12ac2:	68fb      	ldr	r3, [r7, #12]
   12ac4:	3305      	adds	r3, #5
   12ac6:	781b      	ldrb	r3, [r3, #0]
   12ac8:	79fa      	ldrb	r2, [r7, #7]
   12aca:	429a      	cmp	r2, r3
   12acc:	d101      	bne.n	12ad2 <usb_find_cfg_desc+0x4e>
			return desc;
   12ace:	68fb      	ldr	r3, [r7, #12]
   12ad0:	e00a      	b.n	12ae8 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   12ad2:	68f8      	ldr	r0, [r7, #12]
   12ad4:	4b08      	ldr	r3, [pc, #32]	; (12af8 <usb_find_cfg_desc+0x74>)
   12ad6:	4798      	blx	r3
   12ad8:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   12ada:	68fa      	ldr	r2, [r7, #12]
   12adc:	68bb      	ldr	r3, [r7, #8]
   12ade:	429a      	cmp	r2, r3
   12ae0:	d3e2      	bcc.n	12aa8 <usb_find_cfg_desc+0x24>
   12ae2:	e000      	b.n	12ae6 <usb_find_cfg_desc+0x62>
			break;
   12ae4:	bf00      	nop
	}
	return NULL;
   12ae6:	2300      	movs	r3, #0
}
   12ae8:	4618      	mov	r0, r3
   12aea:	3710      	adds	r7, #16
   12aec:	46bd      	mov	sp, r7
   12aee:	bd80      	pop	{r7, pc}
   12af0:	000129c5 	.word	0x000129c5
   12af4:	0001292b 	.word	0x0001292b
   12af8:	000129a1 	.word	0x000129a1

00012afc <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   12afc:	b580      	push	{r7, lr}
   12afe:	b086      	sub	sp, #24
   12b00:	af00      	add	r7, sp, #0
   12b02:	60f8      	str	r0, [r7, #12]
   12b04:	60b9      	str	r1, [r7, #8]
   12b06:	4613      	mov	r3, r2
   12b08:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   12b0a:	2300      	movs	r3, #0
   12b0c:	75fb      	strb	r3, [r7, #23]
   12b0e:	e020      	b.n	12b52 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   12b10:	2203      	movs	r2, #3
   12b12:	68b9      	ldr	r1, [r7, #8]
   12b14:	68f8      	ldr	r0, [r7, #12]
   12b16:	4b13      	ldr	r3, [pc, #76]	; (12b64 <usb_find_str_desc+0x68>)
   12b18:	4798      	blx	r3
   12b1a:	60f8      	str	r0, [r7, #12]
		if (desc) {
   12b1c:	68fb      	ldr	r3, [r7, #12]
   12b1e:	2b00      	cmp	r3, #0
   12b20:	d015      	beq.n	12b4e <usb_find_str_desc+0x52>
			_desc_len_check();
   12b22:	68f8      	ldr	r0, [r7, #12]
   12b24:	4b10      	ldr	r3, [pc, #64]	; (12b68 <usb_find_str_desc+0x6c>)
   12b26:	4798      	blx	r3
   12b28:	4603      	mov	r3, r0
   12b2a:	2b01      	cmp	r3, #1
   12b2c:	d801      	bhi.n	12b32 <usb_find_str_desc+0x36>
   12b2e:	2300      	movs	r3, #0
   12b30:	e014      	b.n	12b5c <usb_find_str_desc+0x60>
			if (i == str_index) {
   12b32:	7dfa      	ldrb	r2, [r7, #23]
   12b34:	79fb      	ldrb	r3, [r7, #7]
   12b36:	429a      	cmp	r2, r3
   12b38:	d101      	bne.n	12b3e <usb_find_str_desc+0x42>
				return desc;
   12b3a:	68fb      	ldr	r3, [r7, #12]
   12b3c:	e00e      	b.n	12b5c <usb_find_str_desc+0x60>
			}
			i++;
   12b3e:	7dfb      	ldrb	r3, [r7, #23]
   12b40:	3301      	adds	r3, #1
   12b42:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   12b44:	68f8      	ldr	r0, [r7, #12]
   12b46:	4b09      	ldr	r3, [pc, #36]	; (12b6c <usb_find_str_desc+0x70>)
   12b48:	4798      	blx	r3
   12b4a:	60f8      	str	r0, [r7, #12]
   12b4c:	e001      	b.n	12b52 <usb_find_str_desc+0x56>
		} else {
			return NULL;
   12b4e:	2300      	movs	r3, #0
   12b50:	e004      	b.n	12b5c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   12b52:	68fa      	ldr	r2, [r7, #12]
   12b54:	68bb      	ldr	r3, [r7, #8]
   12b56:	429a      	cmp	r2, r3
   12b58:	d3da      	bcc.n	12b10 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   12b5a:	2300      	movs	r3, #0
}
   12b5c:	4618      	mov	r0, r3
   12b5e:	3718      	adds	r7, #24
   12b60:	46bd      	mov	sp, r7
   12b62:	bd80      	pop	{r7, pc}
   12b64:	000129c5 	.word	0x000129c5
   12b68:	0001292b 	.word	0x0001292b
   12b6c:	0001295d 	.word	0x0001295d

00012b70 <_ZN18ARINC_Buffer_ClassC2Ev>:
static 	uint8_t bufferReceiverBuffer[RX_LABELS_NUMBER][4];             // [# of buffers][16 bytes]
static	uint8_t	bufferTransmitBuffer[TX_LABELS_NUMBER][4];


// default constructor
ARINC_Buffer_Class::ARINC_Buffer_Class()
   12b70:	b480      	push	{r7}
   12b72:	b083      	sub	sp, #12
   12b74:	af00      	add	r7, sp, #0
   12b76:	6078      	str	r0, [r7, #4]
   12b78:	6039      	str	r1, [r7, #0]
   12b7a:	683b      	ldr	r3, [r7, #0]
   12b7c:	681a      	ldr	r2, [r3, #0]
   12b7e:	687b      	ldr	r3, [r7, #4]
   12b80:	601a      	str	r2, [r3, #0]
   12b82:	687b      	ldr	r3, [r7, #4]
   12b84:	681b      	ldr	r3, [r3, #0]
   12b86:	3b0c      	subs	r3, #12
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	461a      	mov	r2, r3
   12b8c:	687b      	ldr	r3, [r7, #4]
   12b8e:	4413      	add	r3, r2
   12b90:	683a      	ldr	r2, [r7, #0]
   12b92:	6852      	ldr	r2, [r2, #4]
   12b94:	601a      	str	r2, [r3, #0]
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	681b      	ldr	r3, [r3, #0]
   12b9a:	3b10      	subs	r3, #16
   12b9c:	681b      	ldr	r3, [r3, #0]
   12b9e:	461a      	mov	r2, r3
   12ba0:	687b      	ldr	r3, [r7, #4]
   12ba2:	4413      	add	r3, r2
   12ba4:	683a      	ldr	r2, [r7, #0]
   12ba6:	6892      	ldr	r2, [r2, #8]
   12ba8:	601a      	str	r2, [r3, #0]
{
	

	//receiverBuffer=            // [# of buffers][16 bytes]
	//transmitBuffer=&bufferTransmitBuffer[0];
} //ARINC_Buffer_Class
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	4618      	mov	r0, r3
   12bae:	370c      	adds	r7, #12
   12bb0:	46bd      	mov	sp, r7
   12bb2:	bc80      	pop	{r7}
   12bb4:	4770      	bx	lr

00012bb6 <_ZN18ARINC_Buffer_ClassD2Ev>:

// default destructor
ARINC_Buffer_Class::~ARINC_Buffer_Class()
   12bb6:	b480      	push	{r7}
   12bb8:	b083      	sub	sp, #12
   12bba:	af00      	add	r7, sp, #0
   12bbc:	6078      	str	r0, [r7, #4]
   12bbe:	6039      	str	r1, [r7, #0]
   12bc0:	683b      	ldr	r3, [r7, #0]
   12bc2:	681a      	ldr	r2, [r3, #0]
   12bc4:	687b      	ldr	r3, [r7, #4]
   12bc6:	601a      	str	r2, [r3, #0]
   12bc8:	687b      	ldr	r3, [r7, #4]
   12bca:	681b      	ldr	r3, [r3, #0]
   12bcc:	3b0c      	subs	r3, #12
   12bce:	681b      	ldr	r3, [r3, #0]
   12bd0:	461a      	mov	r2, r3
   12bd2:	687b      	ldr	r3, [r7, #4]
   12bd4:	4413      	add	r3, r2
   12bd6:	683a      	ldr	r2, [r7, #0]
   12bd8:	6852      	ldr	r2, [r2, #4]
   12bda:	601a      	str	r2, [r3, #0]
   12bdc:	687b      	ldr	r3, [r7, #4]
   12bde:	681b      	ldr	r3, [r3, #0]
   12be0:	3b10      	subs	r3, #16
   12be2:	681b      	ldr	r3, [r3, #0]
   12be4:	461a      	mov	r2, r3
   12be6:	687b      	ldr	r3, [r7, #4]
   12be8:	4413      	add	r3, r2
   12bea:	683a      	ldr	r2, [r7, #0]
   12bec:	6892      	ldr	r2, [r2, #8]
   12bee:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Buffer_Class
   12bf0:	687b      	ldr	r3, [r7, #4]
   12bf2:	4618      	mov	r0, r3
   12bf4:	370c      	adds	r7, #12
   12bf6:	46bd      	mov	sp, r7
   12bf8:	bc80      	pop	{r7}
   12bfa:	4770      	bx	lr

00012bfc <_ZN18ARINC_Buffer_Class10InitBufferEv>:

void	ARINC_Buffer_Class::InitBuffer(void){
   12bfc:	b480      	push	{r7}
   12bfe:	b085      	sub	sp, #20
   12c00:	af00      	add	r7, sp, #0
   12c02:	6078      	str	r0, [r7, #4]
	LabelsArrayTX=&bufferLabelsArrayTX[0];
   12c04:	687b      	ldr	r3, [r7, #4]
   12c06:	4a1a      	ldr	r2, [pc, #104]	; (12c70 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x74>)
   12c08:	605a      	str	r2, [r3, #4]
	LabelsArrayRX1=&bufferLabelsArrayRX1[0];
   12c0a:	687b      	ldr	r3, [r7, #4]
   12c0c:	4a19      	ldr	r2, [pc, #100]	; (12c74 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x78>)
   12c0e:	609a      	str	r2, [r3, #8]
	LabelsArrayRX2=&bufferLabelsArrayRX2[0];
   12c10:	687b      	ldr	r3, [r7, #4]
   12c12:	4a19      	ldr	r2, [pc, #100]	; (12c78 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x7c>)
   12c14:	60da      	str	r2, [r3, #12]
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
   12c16:	2300      	movs	r3, #0
   12c18:	73fb      	strb	r3, [r7, #15]
   12c1a:	7bfb      	ldrb	r3, [r7, #15]
   12c1c:	2b1f      	cmp	r3, #31
   12c1e:	dc17      	bgt.n	12c50 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x54>
		{
			pointerArrayRX[i]=bufferReceiverBuffer[i];
   12c20:	7bfb      	ldrb	r3, [r7, #15]
   12c22:	7bfa      	ldrb	r2, [r7, #15]
   12c24:	0092      	lsls	r2, r2, #2
   12c26:	4915      	ldr	r1, [pc, #84]	; (12c7c <_ZN18ARINC_Buffer_Class10InitBufferEv+0x80>)
   12c28:	440a      	add	r2, r1
   12c2a:	6879      	ldr	r1, [r7, #4]
   12c2c:	3328      	adds	r3, #40	; 0x28
   12c2e:	009b      	lsls	r3, r3, #2
   12c30:	440b      	add	r3, r1
   12c32:	605a      	str	r2, [r3, #4]
			pointerArrayTX[i]=bufferTransmitBuffer[i];
   12c34:	7bfb      	ldrb	r3, [r7, #15]
   12c36:	7bfa      	ldrb	r2, [r7, #15]
   12c38:	0092      	lsls	r2, r2, #2
   12c3a:	4911      	ldr	r1, [pc, #68]	; (12c80 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x84>)
   12c3c:	440a      	add	r2, r1
   12c3e:	6879      	ldr	r1, [r7, #4]
   12c40:	3308      	adds	r3, #8
   12c42:	009b      	lsls	r3, r3, #2
   12c44:	440b      	add	r3, r1
   12c46:	605a      	str	r2, [r3, #4]
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
   12c48:	7bfb      	ldrb	r3, [r7, #15]
   12c4a:	3301      	adds	r3, #1
   12c4c:	73fb      	strb	r3, [r7, #15]
   12c4e:	e7e4      	b.n	12c1a <_ZN18ARINC_Buffer_Class10InitBufferEv+0x1e>
		}
		receiverBuffer=pointerArrayRX;
   12c50:	687b      	ldr	r3, [r7, #4]
   12c52:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
   12c56:	687b      	ldr	r3, [r7, #4]
   12c58:	611a      	str	r2, [r3, #16]
		transmitBuffer=pointerArrayTX;
   12c5a:	687b      	ldr	r3, [r7, #4]
   12c5c:	f103 0224 	add.w	r2, r3, #36	; 0x24
   12c60:	687b      	ldr	r3, [r7, #4]
   12c62:	615a      	str	r2, [r3, #20]
}
   12c64:	bf00      	nop
   12c66:	3714      	adds	r7, #20
   12c68:	46bd      	mov	sp, r7
   12c6a:	bc80      	pop	{r7}
   12c6c:	4770      	bx	lr
   12c6e:	bf00      	nop
   12c70:	20008f64 	.word	0x20008f64
   12c74:	20008f84 	.word	0x20008f84
   12c78:	20008fa4 	.word	0x20008fa4
   12c7c:	20008fc4 	.word	0x20008fc4
   12c80:	20009044 	.word	0x20009044

00012c84 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv>:

void ARINC_Buffer_Class::SaveTemperature(void){
   12c84:	b590      	push	{r4, r7, lr}
   12c86:	b085      	sub	sp, #20
   12c88:	af00      	add	r7, sp, #0
   12c8a:	6078      	str	r0, [r7, #4]
	octalLabel=Label2Byte(COCKPITS_TEMPERATURE);
   12c8c:	687b      	ldr	r3, [r7, #4]
   12c8e:	681b      	ldr	r3, [r3, #0]
   12c90:	3b0c      	subs	r3, #12
   12c92:	681b      	ldr	r3, [r3, #0]
   12c94:	461a      	mov	r2, r3
   12c96:	687b      	ldr	r3, [r7, #4]
   12c98:	4413      	add	r3, r2
   12c9a:	681b      	ldr	r3, [r3, #0]
   12c9c:	3304      	adds	r3, #4
   12c9e:	681b      	ldr	r3, [r3, #0]
   12ca0:	687a      	ldr	r2, [r7, #4]
   12ca2:	6812      	ldr	r2, [r2, #0]
   12ca4:	3a0c      	subs	r2, #12
   12ca6:	6812      	ldr	r2, [r2, #0]
   12ca8:	4611      	mov	r1, r2
   12caa:	687a      	ldr	r2, [r7, #4]
   12cac:	440a      	add	r2, r1
   12cae:	f44f 71bb 	mov.w	r1, #374	; 0x176
   12cb2:	4610      	mov	r0, r2
   12cb4:	4798      	blx	r3
   12cb6:	4603      	mov	r3, r0
   12cb8:	461a      	mov	r2, r3
   12cba:	687b      	ldr	r3, [r7, #4]
   12cbc:	765a      	strb	r2, [r3, #25]
	index=GetIndexTXLabelarray(FlipByte(octalLabel),LabelsArrayTX);
   12cbe:	687b      	ldr	r3, [r7, #4]
   12cc0:	681b      	ldr	r3, [r3, #0]
   12cc2:	3b0c      	subs	r3, #12
   12cc4:	681b      	ldr	r3, [r3, #0]
   12cc6:	461a      	mov	r2, r3
   12cc8:	687b      	ldr	r3, [r7, #4]
   12cca:	189c      	adds	r4, r3, r2
   12ccc:	687b      	ldr	r3, [r7, #4]
   12cce:	681b      	ldr	r3, [r3, #0]
   12cd0:	3b0c      	subs	r3, #12
   12cd2:	681b      	ldr	r3, [r3, #0]
   12cd4:	461a      	mov	r2, r3
   12cd6:	687b      	ldr	r3, [r7, #4]
   12cd8:	4413      	add	r3, r2
   12cda:	681b      	ldr	r3, [r3, #0]
   12cdc:	681b      	ldr	r3, [r3, #0]
   12cde:	687a      	ldr	r2, [r7, #4]
   12ce0:	6812      	ldr	r2, [r2, #0]
   12ce2:	3a0c      	subs	r2, #12
   12ce4:	6812      	ldr	r2, [r2, #0]
   12ce6:	4611      	mov	r1, r2
   12ce8:	687a      	ldr	r2, [r7, #4]
   12cea:	1850      	adds	r0, r2, r1
   12cec:	687a      	ldr	r2, [r7, #4]
   12cee:	7e52      	ldrb	r2, [r2, #25]
   12cf0:	4611      	mov	r1, r2
   12cf2:	4798      	blx	r3
   12cf4:	4603      	mov	r3, r0
   12cf6:	4619      	mov	r1, r3
   12cf8:	687b      	ldr	r3, [r7, #4]
   12cfa:	685b      	ldr	r3, [r3, #4]
   12cfc:	461a      	mov	r2, r3
   12cfe:	4620      	mov	r0, r4
   12d00:	4b20      	ldr	r3, [pc, #128]	; (12d84 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x100>)
   12d02:	4798      	blx	r3
   12d04:	4603      	mov	r3, r0
   12d06:	461a      	mov	r2, r3
   12d08:	687b      	ldr	r3, [r7, #4]
   12d0a:	761a      	strb	r2, [r3, #24]
	float temperature=temperatures.lastValue;
   12d0c:	4b1e      	ldr	r3, [pc, #120]	; (12d88 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x104>)
   12d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   12d10:	60fb      	str	r3, [r7, #12]
	data=MakeLabel374(FloatTwoComplement(temperature,15),temperature);
   12d12:	687b      	ldr	r3, [r7, #4]
   12d14:	681b      	ldr	r3, [r3, #0]
   12d16:	3b10      	subs	r3, #16
   12d18:	681b      	ldr	r3, [r3, #0]
   12d1a:	461a      	mov	r2, r3
   12d1c:	687b      	ldr	r3, [r7, #4]
   12d1e:	189c      	adds	r4, r3, r2
   12d20:	687b      	ldr	r3, [r7, #4]
   12d22:	681b      	ldr	r3, [r3, #0]
   12d24:	3b0c      	subs	r3, #12
   12d26:	681b      	ldr	r3, [r3, #0]
   12d28:	461a      	mov	r2, r3
   12d2a:	687b      	ldr	r3, [r7, #4]
   12d2c:	4413      	add	r3, r2
   12d2e:	220f      	movs	r2, #15
   12d30:	68f9      	ldr	r1, [r7, #12]
   12d32:	4618      	mov	r0, r3
   12d34:	4b15      	ldr	r3, [pc, #84]	; (12d8c <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x108>)
   12d36:	4798      	blx	r3
   12d38:	4603      	mov	r3, r0
   12d3a:	68fa      	ldr	r2, [r7, #12]
   12d3c:	4619      	mov	r1, r3
   12d3e:	4620      	mov	r0, r4
   12d40:	4b13      	ldr	r3, [pc, #76]	; (12d90 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x10c>)
   12d42:	4798      	blx	r3
   12d44:	4602      	mov	r2, r0
   12d46:	687b      	ldr	r3, [r7, #4]
   12d48:	61da      	str	r2, [r3, #28]
	Uint32FourBytesArray(data,localArray);
   12d4a:	687b      	ldr	r3, [r7, #4]
   12d4c:	681b      	ldr	r3, [r3, #0]
   12d4e:	3b0c      	subs	r3, #12
   12d50:	681b      	ldr	r3, [r3, #0]
   12d52:	461a      	mov	r2, r3
   12d54:	687b      	ldr	r3, [r7, #4]
   12d56:	1898      	adds	r0, r3, r2
   12d58:	687b      	ldr	r3, [r7, #4]
   12d5a:	69d9      	ldr	r1, [r3, #28]
   12d5c:	687b      	ldr	r3, [r7, #4]
   12d5e:	3320      	adds	r3, #32
   12d60:	461a      	mov	r2, r3
   12d62:	4b0c      	ldr	r3, [pc, #48]	; (12d94 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x110>)
   12d64:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   12d66:	687b      	ldr	r3, [r7, #4]
   12d68:	695a      	ldr	r2, [r3, #20]
   12d6a:	687b      	ldr	r3, [r7, #4]
   12d6c:	7e1b      	ldrb	r3, [r3, #24]
   12d6e:	009b      	lsls	r3, r3, #2
   12d70:	4413      	add	r3, r2
   12d72:	681b      	ldr	r3, [r3, #0]
   12d74:	687a      	ldr	r2, [r7, #4]
   12d76:	3220      	adds	r2, #32
   12d78:	6812      	ldr	r2, [r2, #0]
   12d7a:	601a      	str	r2, [r3, #0]
}
   12d7c:	bf00      	nop
   12d7e:	3714      	adds	r7, #20
   12d80:	46bd      	mov	sp, r7
   12d82:	bd90      	pop	{r4, r7, pc}
   12d84:	00013057 	.word	0x00013057
   12d88:	20009e54 	.word	0x20009e54
   12d8c:	00013129 	.word	0x00013129
   12d90:	000144d5 	.word	0x000144d5
   12d94:	000130e7 	.word	0x000130e7

00012d98 <_ZN18ARINC_Buffer_Class10SaveStatusEm>:

void ARINC_Buffer_Class::SaveStatus(uint32_t st){
   12d98:	b580      	push	{r7, lr}
   12d9a:	b082      	sub	sp, #8
   12d9c:	af00      	add	r7, sp, #0
   12d9e:	6078      	str	r0, [r7, #4]
   12da0:	6039      	str	r1, [r7, #0]
	octalLabel=Label2Byte(ECS_COMMAND_ACKNOWLEDGE);
   12da2:	687b      	ldr	r3, [r7, #4]
   12da4:	681b      	ldr	r3, [r3, #0]
   12da6:	3b0c      	subs	r3, #12
   12da8:	681b      	ldr	r3, [r3, #0]
   12daa:	461a      	mov	r2, r3
   12dac:	687b      	ldr	r3, [r7, #4]
   12dae:	4413      	add	r3, r2
   12db0:	681b      	ldr	r3, [r3, #0]
   12db2:	3304      	adds	r3, #4
   12db4:	681b      	ldr	r3, [r3, #0]
   12db6:	687a      	ldr	r2, [r7, #4]
   12db8:	6812      	ldr	r2, [r2, #0]
   12dba:	3a0c      	subs	r2, #12
   12dbc:	6812      	ldr	r2, [r2, #0]
   12dbe:	4611      	mov	r1, r2
   12dc0:	687a      	ldr	r2, [r7, #4]
   12dc2:	440a      	add	r2, r1
   12dc4:	f44f 7187 	mov.w	r1, #270	; 0x10e
   12dc8:	4610      	mov	r0, r2
   12dca:	4798      	blx	r3
   12dcc:	4603      	mov	r3, r0
   12dce:	461a      	mov	r2, r3
   12dd0:	687b      	ldr	r3, [r7, #4]
   12dd2:	765a      	strb	r2, [r3, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   12dd4:	687b      	ldr	r3, [r7, #4]
   12dd6:	681b      	ldr	r3, [r3, #0]
   12dd8:	3b0c      	subs	r3, #12
   12dda:	681b      	ldr	r3, [r3, #0]
   12ddc:	461a      	mov	r2, r3
   12dde:	687b      	ldr	r3, [r7, #4]
   12de0:	1898      	adds	r0, r3, r2
   12de2:	687b      	ldr	r3, [r7, #4]
   12de4:	7e59      	ldrb	r1, [r3, #25]
   12de6:	687b      	ldr	r3, [r7, #4]
   12de8:	685b      	ldr	r3, [r3, #4]
   12dea:	461a      	mov	r2, r3
   12dec:	4b18      	ldr	r3, [pc, #96]	; (12e50 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xb8>)
   12dee:	4798      	blx	r3
   12df0:	4603      	mov	r3, r0
   12df2:	461a      	mov	r2, r3
   12df4:	687b      	ldr	r3, [r7, #4]
   12df6:	761a      	strb	r2, [r3, #24]
	data=MakeLabel270(st);
   12df8:	687b      	ldr	r3, [r7, #4]
   12dfa:	681b      	ldr	r3, [r3, #0]
   12dfc:	3b10      	subs	r3, #16
   12dfe:	681b      	ldr	r3, [r3, #0]
   12e00:	461a      	mov	r2, r3
   12e02:	687b      	ldr	r3, [r7, #4]
   12e04:	4413      	add	r3, r2
   12e06:	6839      	ldr	r1, [r7, #0]
   12e08:	4618      	mov	r0, r3
   12e0a:	4b12      	ldr	r3, [pc, #72]	; (12e54 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xbc>)
   12e0c:	4798      	blx	r3
   12e0e:	4602      	mov	r2, r0
   12e10:	687b      	ldr	r3, [r7, #4]
   12e12:	61da      	str	r2, [r3, #28]
	Uint32FourBytesArray(data,localArray);
   12e14:	687b      	ldr	r3, [r7, #4]
   12e16:	681b      	ldr	r3, [r3, #0]
   12e18:	3b0c      	subs	r3, #12
   12e1a:	681b      	ldr	r3, [r3, #0]
   12e1c:	461a      	mov	r2, r3
   12e1e:	687b      	ldr	r3, [r7, #4]
   12e20:	1898      	adds	r0, r3, r2
   12e22:	687b      	ldr	r3, [r7, #4]
   12e24:	69d9      	ldr	r1, [r3, #28]
   12e26:	687b      	ldr	r3, [r7, #4]
   12e28:	3320      	adds	r3, #32
   12e2a:	461a      	mov	r2, r3
   12e2c:	4b0a      	ldr	r3, [pc, #40]	; (12e58 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xc0>)
   12e2e:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   12e30:	687b      	ldr	r3, [r7, #4]
   12e32:	695a      	ldr	r2, [r3, #20]
   12e34:	687b      	ldr	r3, [r7, #4]
   12e36:	7e1b      	ldrb	r3, [r3, #24]
   12e38:	009b      	lsls	r3, r3, #2
   12e3a:	4413      	add	r3, r2
   12e3c:	681b      	ldr	r3, [r3, #0]
   12e3e:	687a      	ldr	r2, [r7, #4]
   12e40:	3220      	adds	r2, #32
   12e42:	6812      	ldr	r2, [r2, #0]
   12e44:	601a      	str	r2, [r3, #0]
   12e46:	bf00      	nop
   12e48:	3708      	adds	r7, #8
   12e4a:	46bd      	mov	sp, r7
   12e4c:	bd80      	pop	{r7, pc}
   12e4e:	bf00      	nop
   12e50:	00013057 	.word	0x00013057
   12e54:	0001456d 	.word	0x0001456d
   12e58:	000130e7 	.word	0x000130e7

00012e5c <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
   12e5c:	b480      	push	{r7}
   12e5e:	b083      	sub	sp, #12
   12e60:	af00      	add	r7, sp, #0
   12e62:	6078      	str	r0, [r7, #4]
   12e64:	4a04      	ldr	r2, [pc, #16]	; (12e78 <_ZN17ARINC_ConversionsC1Ev+0x1c>)
   12e66:	687b      	ldr	r3, [r7, #4]
   12e68:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
   12e6a:	687b      	ldr	r3, [r7, #4]
   12e6c:	4618      	mov	r0, r3
   12e6e:	370c      	adds	r7, #12
   12e70:	46bd      	mov	sp, r7
   12e72:	bc80      	pop	{r7}
   12e74:	4770      	bx	lr
   12e76:	bf00      	nop
   12e78:	00020578 	.word	0x00020578

00012e7c <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
   12e7c:	b480      	push	{r7}
   12e7e:	b083      	sub	sp, #12
   12e80:	af00      	add	r7, sp, #0
   12e82:	6078      	str	r0, [r7, #4]
   12e84:	4a04      	ldr	r2, [pc, #16]	; (12e98 <_ZN17ARINC_ConversionsD1Ev+0x1c>)
   12e86:	687b      	ldr	r3, [r7, #4]
   12e88:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
   12e8a:	687b      	ldr	r3, [r7, #4]
   12e8c:	4618      	mov	r0, r3
   12e8e:	370c      	adds	r7, #12
   12e90:	46bd      	mov	sp, r7
   12e92:	bc80      	pop	{r7}
   12e94:	4770      	bx	lr
   12e96:	bf00      	nop
   12e98:	00020578 	.word	0x00020578

00012e9c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   12e9c:	b5b0      	push	{r4, r5, r7, lr}
   12e9e:	b082      	sub	sp, #8
   12ea0:	af00      	add	r7, sp, #0
   12ea2:	6078      	str	r0, [r7, #4]
   12ea4:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   12ea6:	4b0a      	ldr	r3, [pc, #40]	; (12ed0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   12ea8:	6878      	ldr	r0, [r7, #4]
   12eaa:	4798      	blx	r3
   12eac:	4604      	mov	r4, r0
   12eae:	460d      	mov	r5, r1
   12eb0:	4b07      	ldr	r3, [pc, #28]	; (12ed0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   12eb2:	6838      	ldr	r0, [r7, #0]
   12eb4:	4798      	blx	r3
   12eb6:	4602      	mov	r2, r0
   12eb8:	460b      	mov	r3, r1
   12eba:	4620      	mov	r0, r4
   12ebc:	4629      	mov	r1, r5
   12ebe:	4c05      	ldr	r4, [pc, #20]	; (12ed4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
   12ec0:	47a0      	blx	r4
   12ec2:	4603      	mov	r3, r0
   12ec4:	460c      	mov	r4, r1
    }
   12ec6:	4618      	mov	r0, r3
   12ec8:	4621      	mov	r1, r4
   12eca:	3708      	adds	r7, #8
   12ecc:	46bd      	mov	sp, r7
   12ece:	bdb0      	pop	{r4, r5, r7, pc}
   12ed0:	0001a9b9 	.word	0x0001a9b9
   12ed4:	000195c9 	.word	0x000195c9

00012ed8 <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
   12ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12edc:	b085      	sub	sp, #20
   12ede:	af00      	add	r7, sp, #0
   12ee0:	6078      	str	r0, [r7, #4]
   12ee2:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
   12ee4:	2300      	movs	r3, #0
   12ee6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   12ee8:	2300      	movs	r3, #0
   12eea:	73bb      	strb	r3, [r7, #14]
   12eec:	7bbb      	ldrb	r3, [r7, #14]
   12eee:	2b02      	cmp	r3, #2
   12ef0:	d86d      	bhi.n	12fce <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
   12ef2:	7bbb      	ldrb	r3, [r7, #14]
   12ef4:	f1c3 0402 	rsb	r4, r3, #2
   12ef8:	4b3c      	ldr	r3, [pc, #240]	; (12fec <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   12efa:	6838      	ldr	r0, [r7, #0]
   12efc:	4798      	blx	r3
   12efe:	4680      	mov	r8, r0
   12f00:	4689      	mov	r9, r1
   12f02:	7bbb      	ldrb	r3, [r7, #14]
   12f04:	f1c3 0302 	rsb	r3, r3, #2
   12f08:	4619      	mov	r1, r3
   12f0a:	200a      	movs	r0, #10
   12f0c:	4b38      	ldr	r3, [pc, #224]	; (12ff0 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   12f0e:	4798      	blx	r3
   12f10:	4602      	mov	r2, r0
   12f12:	460b      	mov	r3, r1
   12f14:	4d37      	ldr	r5, [pc, #220]	; (12ff4 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
   12f16:	4640      	mov	r0, r8
   12f18:	4649      	mov	r1, r9
   12f1a:	47a8      	blx	r5
   12f1c:	4602      	mov	r2, r0
   12f1e:	460b      	mov	r3, r1
   12f20:	4611      	mov	r1, r2
   12f22:	461a      	mov	r2, r3
   12f24:	4b34      	ldr	r3, [pc, #208]	; (12ff8 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   12f26:	4608      	mov	r0, r1
   12f28:	4611      	mov	r1, r2
   12f2a:	4798      	blx	r3
   12f2c:	4603      	mov	r3, r0
   12f2e:	b2da      	uxtb	r2, r3
   12f30:	f107 0310 	add.w	r3, r7, #16
   12f34:	4423      	add	r3, r4
   12f36:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
   12f3a:	7bbb      	ldrb	r3, [r7, #14]
   12f3c:	f1c3 0302 	rsb	r3, r3, #2
   12f40:	f107 0210 	add.w	r2, r7, #16
   12f44:	4413      	add	r3, r2
   12f46:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   12f4a:	461a      	mov	r2, r3
   12f4c:	4b2b      	ldr	r3, [pc, #172]	; (12ffc <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
   12f4e:	4610      	mov	r0, r2
   12f50:	4798      	blx	r3
   12f52:	4605      	mov	r5, r0
   12f54:	460e      	mov	r6, r1
   12f56:	7bbb      	ldrb	r3, [r7, #14]
   12f58:	f1c3 0302 	rsb	r3, r3, #2
   12f5c:	4619      	mov	r1, r3
   12f5e:	200a      	movs	r0, #10
   12f60:	4b23      	ldr	r3, [pc, #140]	; (12ff0 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   12f62:	4798      	blx	r3
   12f64:	4602      	mov	r2, r0
   12f66:	460b      	mov	r3, r1
   12f68:	4c25      	ldr	r4, [pc, #148]	; (13000 <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
   12f6a:	4628      	mov	r0, r5
   12f6c:	4631      	mov	r1, r6
   12f6e:	47a0      	blx	r4
   12f70:	4603      	mov	r3, r0
   12f72:	460c      	mov	r4, r1
   12f74:	461d      	mov	r5, r3
   12f76:	4626      	mov	r6, r4
   12f78:	4b1c      	ldr	r3, [pc, #112]	; (12fec <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   12f7a:	6838      	ldr	r0, [r7, #0]
   12f7c:	4798      	blx	r3
   12f7e:	4c21      	ldr	r4, [pc, #132]	; (13004 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
   12f80:	462a      	mov	r2, r5
   12f82:	4633      	mov	r3, r6
   12f84:	47a0      	blx	r4
   12f86:	4603      	mov	r3, r0
   12f88:	460c      	mov	r4, r1
   12f8a:	4619      	mov	r1, r3
   12f8c:	4622      	mov	r2, r4
   12f8e:	4b1a      	ldr	r3, [pc, #104]	; (12ff8 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   12f90:	4608      	mov	r0, r1
   12f92:	4611      	mov	r1, r2
   12f94:	4798      	blx	r3
   12f96:	4603      	mov	r3, r0
   12f98:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
   12f9a:	7bbb      	ldrb	r3, [r7, #14]
   12f9c:	f1c3 0302 	rsb	r3, r3, #2
   12fa0:	f107 0210 	add.w	r2, r7, #16
   12fa4:	4413      	add	r3, r2
   12fa6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   12faa:	461a      	mov	r2, r3
   12fac:	7bbb      	ldrb	r3, [r7, #14]
   12fae:	4619      	mov	r1, r3
   12fb0:	009b      	lsls	r3, r3, #2
   12fb2:	1acb      	subs	r3, r1, r3
   12fb4:	3306      	adds	r3, #6
   12fb6:	fa02 f303 	lsl.w	r3, r2, r3
   12fba:	b25a      	sxtb	r2, r3
   12fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
   12fc0:	4313      	orrs	r3, r2
   12fc2:	b25b      	sxtb	r3, r3
   12fc4:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   12fc6:	7bbb      	ldrb	r3, [r7, #14]
   12fc8:	3301      	adds	r3, #1
   12fca:	73bb      	strb	r3, [r7, #14]
   12fcc:	e78e      	b.n	12eec <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
   12fce:	687b      	ldr	r3, [r7, #4]
   12fd0:	681b      	ldr	r3, [r3, #0]
   12fd2:	681b      	ldr	r3, [r3, #0]
   12fd4:	7bfa      	ldrb	r2, [r7, #15]
   12fd6:	4611      	mov	r1, r2
   12fd8:	6878      	ldr	r0, [r7, #4]
   12fda:	4798      	blx	r3
   12fdc:	4603      	mov	r3, r0
   12fde:	73fb      	strb	r3, [r7, #15]
	return result;
   12fe0:	7bfb      	ldrb	r3, [r7, #15]
	
}
   12fe2:	4618      	mov	r0, r3
   12fe4:	3714      	adds	r7, #20
   12fe6:	46bd      	mov	sp, r7
   12fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12fec:	0001a999 	.word	0x0001a999
   12ff0:	00012e9d 	.word	0x00012e9d
   12ff4:	0001acd9 	.word	0x0001acd9
   12ff8:	0001afe5 	.word	0x0001afe5
   12ffc:	0001a9b9 	.word	0x0001a9b9
   13000:	0001aa85 	.word	0x0001aa85
   13004:	0001a71d 	.word	0x0001a71d

00013008 <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
   13008:	b480      	push	{r7}
   1300a:	b085      	sub	sp, #20
   1300c:	af00      	add	r7, sp, #0
   1300e:	6078      	str	r0, [r7, #4]
   13010:	460b      	mov	r3, r1
   13012:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
   13014:	2300      	movs	r3, #0
   13016:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   13018:	2300      	movs	r3, #0
   1301a:	60bb      	str	r3, [r7, #8]
   1301c:	68bb      	ldr	r3, [r7, #8]
   1301e:	2b07      	cmp	r3, #7
   13020:	dc13      	bgt.n	1304a <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
   13022:	7bfb      	ldrb	r3, [r7, #15]
   13024:	005b      	lsls	r3, r3, #1
   13026:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   13028:	78fa      	ldrb	r2, [r7, #3]
   1302a:	68bb      	ldr	r3, [r7, #8]
   1302c:	fa42 f303 	asr.w	r3, r2, r3
   13030:	b25b      	sxtb	r3, r3
   13032:	f003 0301 	and.w	r3, r3, #1
   13036:	b25a      	sxtb	r2, r3
   13038:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1303c:	4313      	orrs	r3, r2
   1303e:	b25b      	sxtb	r3, r3
   13040:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   13042:	68bb      	ldr	r3, [r7, #8]
   13044:	3301      	adds	r3, #1
   13046:	60bb      	str	r3, [r7, #8]
   13048:	e7e8      	b.n	1301c <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
   1304a:	7bfb      	ldrb	r3, [r7, #15]
}
   1304c:	4618      	mov	r0, r3
   1304e:	3714      	adds	r7, #20
   13050:	46bd      	mov	sp, r7
   13052:	bc80      	pop	{r7}
   13054:	4770      	bx	lr

00013056 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh>:
uint8_t ARINC_Conversions::GetIndexTXLabelarray(uint8_t l, uint8_t* arr){
   13056:	b480      	push	{r7}
   13058:	b087      	sub	sp, #28
   1305a:	af00      	add	r7, sp, #0
   1305c:	60f8      	str	r0, [r7, #12]
   1305e:	460b      	mov	r3, r1
   13060:	607a      	str	r2, [r7, #4]
   13062:	72fb      	strb	r3, [r7, #11]
	for (uint8_t ii = 0; ii < 32; ii++)
   13064:	2300      	movs	r3, #0
   13066:	75fb      	strb	r3, [r7, #23]
   13068:	7dfb      	ldrb	r3, [r7, #23]
   1306a:	2b1f      	cmp	r3, #31
   1306c:	dc0d      	bgt.n	1308a <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x34>
	{
		if (arr[ii]==l)
   1306e:	7dfb      	ldrb	r3, [r7, #23]
   13070:	687a      	ldr	r2, [r7, #4]
   13072:	4413      	add	r3, r2
   13074:	781b      	ldrb	r3, [r3, #0]
   13076:	7afa      	ldrb	r2, [r7, #11]
   13078:	429a      	cmp	r2, r3
   1307a:	d102      	bne.n	13082 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x2c>
		{
			return i;
   1307c:	68fb      	ldr	r3, [r7, #12]
   1307e:	791b      	ldrb	r3, [r3, #4]
   13080:	e004      	b.n	1308c <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x36>
	for (uint8_t ii = 0; ii < 32; ii++)
   13082:	7dfb      	ldrb	r3, [r7, #23]
   13084:	3301      	adds	r3, #1
   13086:	75fb      	strb	r3, [r7, #23]
   13088:	e7ee      	b.n	13068 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x12>
		}
		
	}
	return 32;
   1308a:	2320      	movs	r3, #32
}
   1308c:	4618      	mov	r0, r3
   1308e:	371c      	adds	r7, #28
   13090:	46bd      	mov	sp, r7
   13092:	bc80      	pop	{r7}
   13094:	4770      	bx	lr

00013096 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh>:
		
	}


}
uint32_t	ARINC_Conversions::FourBytesArray2Uint32(uint8_t* arr){
   13096:	b480      	push	{r7}
   13098:	b085      	sub	sp, #20
   1309a:	af00      	add	r7, sp, #0
   1309c:	6078      	str	r0, [r7, #4]
   1309e:	6039      	str	r1, [r7, #0]

		result=0;
   130a0:	687b      	ldr	r3, [r7, #4]
   130a2:	2200      	movs	r2, #0
   130a4:	609a      	str	r2, [r3, #8]
		for (uint8_t ii = 0; ii < 4; ii++)
   130a6:	2300      	movs	r3, #0
   130a8:	73fb      	strb	r3, [r7, #15]
   130aa:	7bfb      	ldrb	r3, [r7, #15]
   130ac:	2b03      	cmp	r3, #3
   130ae:	dc13      	bgt.n	130d8 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x42>
		{
			result|=((uint32_t)arr[ii])<<(24-ii*8);
   130b0:	687b      	ldr	r3, [r7, #4]
   130b2:	689a      	ldr	r2, [r3, #8]
   130b4:	7bfb      	ldrb	r3, [r7, #15]
   130b6:	6839      	ldr	r1, [r7, #0]
   130b8:	440b      	add	r3, r1
   130ba:	781b      	ldrb	r3, [r3, #0]
   130bc:	4619      	mov	r1, r3
   130be:	7bfb      	ldrb	r3, [r7, #15]
   130c0:	f1c3 0303 	rsb	r3, r3, #3
   130c4:	00db      	lsls	r3, r3, #3
   130c6:	fa01 f303 	lsl.w	r3, r1, r3
   130ca:	431a      	orrs	r2, r3
   130cc:	687b      	ldr	r3, [r7, #4]
   130ce:	609a      	str	r2, [r3, #8]
		for (uint8_t ii = 0; ii < 4; ii++)
   130d0:	7bfb      	ldrb	r3, [r7, #15]
   130d2:	3301      	adds	r3, #1
   130d4:	73fb      	strb	r3, [r7, #15]
   130d6:	e7e8      	b.n	130aa <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x14>

		}
		return result;
   130d8:	687b      	ldr	r3, [r7, #4]
   130da:	689b      	ldr	r3, [r3, #8]
}
   130dc:	4618      	mov	r0, r3
   130de:	3714      	adds	r7, #20
   130e0:	46bd      	mov	sp, r7
   130e2:	bc80      	pop	{r7}
   130e4:	4770      	bx	lr

000130e6 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh>:
void	ARINC_Conversions::Uint32FourBytesArray(uint32_t data,uint8_t *dest){
   130e6:	b480      	push	{r7}
   130e8:	b087      	sub	sp, #28
   130ea:	af00      	add	r7, sp, #0
   130ec:	60f8      	str	r0, [r7, #12]
   130ee:	60b9      	str	r1, [r7, #8]
   130f0:	607a      	str	r2, [r7, #4]

	uint8_t d;
	for (uint8_t ii = 0; ii < 4; ii++)
   130f2:	2300      	movs	r3, #0
   130f4:	75fb      	strb	r3, [r7, #23]
   130f6:	7dfb      	ldrb	r3, [r7, #23]
   130f8:	2b03      	cmp	r3, #3
   130fa:	dc10      	bgt.n	1311e <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh+0x38>
	{
		d=(uint8_t)((data>>(24-ii*8))&(0xff));
   130fc:	7dfb      	ldrb	r3, [r7, #23]
   130fe:	f1c3 0303 	rsb	r3, r3, #3
   13102:	00db      	lsls	r3, r3, #3
   13104:	68ba      	ldr	r2, [r7, #8]
   13106:	fa22 f303 	lsr.w	r3, r2, r3
   1310a:	75bb      	strb	r3, [r7, #22]
		dest[ii]=d;
   1310c:	7dfb      	ldrb	r3, [r7, #23]
   1310e:	687a      	ldr	r2, [r7, #4]
   13110:	4413      	add	r3, r2
   13112:	7dba      	ldrb	r2, [r7, #22]
   13114:	701a      	strb	r2, [r3, #0]
	for (uint8_t ii = 0; ii < 4; ii++)
   13116:	7dfb      	ldrb	r3, [r7, #23]
   13118:	3301      	adds	r3, #1
   1311a:	75fb      	strb	r3, [r7, #23]
   1311c:	e7eb      	b.n	130f6 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh+0x10>

	}

}
   1311e:	bf00      	nop
   13120:	371c      	adds	r7, #28
   13122:	46bd      	mov	sp, r7
   13124:	bc80      	pop	{r7}
   13126:	4770      	bx	lr

00013128 <_ZN17ARINC_Conversions18FloatTwoComplementEfh>:
uint32_t	ARINC_Conversions::FloatTwoComplement(float f, uint8_t size){
   13128:	b580      	push	{r7, lr}
   1312a:	b084      	sub	sp, #16
   1312c:	af00      	add	r7, sp, #0
   1312e:	60f8      	str	r0, [r7, #12]
   13130:	60b9      	str	r1, [r7, #8]
   13132:	4613      	mov	r3, r2
   13134:	71fb      	strb	r3, [r7, #7]
	
	if (f>=0)
   13136:	4b17      	ldr	r3, [pc, #92]	; (13194 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x6c>)
   13138:	f04f 0100 	mov.w	r1, #0
   1313c:	68b8      	ldr	r0, [r7, #8]
   1313e:	4798      	blx	r3
   13140:	4603      	mov	r3, r0
   13142:	2b00      	cmp	r3, #0
   13144:	d006      	beq.n	13154 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x2c>
	{
		value=(uint32_t)f;
   13146:	4b14      	ldr	r3, [pc, #80]	; (13198 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x70>)
   13148:	68b8      	ldr	r0, [r7, #8]
   1314a:	4798      	blx	r3
   1314c:	4602      	mov	r2, r0
   1314e:	68fb      	ldr	r3, [r7, #12]
   13150:	60da      	str	r2, [r3, #12]
   13152:	e018      	b.n	13186 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x5e>
	} 
	else
	{
		value=(uint32_t)(-1*f);
   13154:	68bb      	ldr	r3, [r7, #8]
   13156:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   1315a:	4b0f      	ldr	r3, [pc, #60]	; (13198 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x70>)
   1315c:	4610      	mov	r0, r2
   1315e:	4798      	blx	r3
   13160:	4602      	mov	r2, r0
   13162:	68fb      	ldr	r3, [r7, #12]
   13164:	60da      	str	r2, [r3, #12]
		value=(~value)&((1<<(size))-1);
   13166:	68fb      	ldr	r3, [r7, #12]
   13168:	68db      	ldr	r3, [r3, #12]
   1316a:	43db      	mvns	r3, r3
   1316c:	79fa      	ldrb	r2, [r7, #7]
   1316e:	4611      	mov	r1, r2
   13170:	2201      	movs	r2, #1
   13172:	408a      	lsls	r2, r1
   13174:	3a01      	subs	r2, #1
   13176:	401a      	ands	r2, r3
   13178:	68fb      	ldr	r3, [r7, #12]
   1317a:	60da      	str	r2, [r3, #12]
		value+=1;
   1317c:	68fb      	ldr	r3, [r7, #12]
   1317e:	68db      	ldr	r3, [r3, #12]
   13180:	1c5a      	adds	r2, r3, #1
   13182:	68fb      	ldr	r3, [r7, #12]
   13184:	60da      	str	r2, [r3, #12]
	}
	return value;
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	68db      	ldr	r3, [r3, #12]
}
   1318a:	4618      	mov	r0, r3
   1318c:	3710      	adds	r7, #16
   1318e:	46bd      	mov	sp, r7
   13190:	bd80      	pop	{r7, pc}
   13192:	bf00      	nop
   13194:	0001b5a5 	.word	0x0001b5a5
   13198:	0001b5cd 	.word	0x0001b5cd

0001319c <_ZN17ARINC_Conversions10FindParityEm>:


// Function to find the parity
bool ARINC_Conversions::FindParity(uint32_t x)
{
   1319c:	b480      	push	{r7}
   1319e:	b085      	sub	sp, #20
   131a0:	af00      	add	r7, sp, #0
   131a2:	6078      	str	r0, [r7, #4]
   131a4:	6039      	str	r1, [r7, #0]
	uint32_t y = x ^ (x >> 1);
   131a6:	683b      	ldr	r3, [r7, #0]
   131a8:	085a      	lsrs	r2, r3, #1
   131aa:	683b      	ldr	r3, [r7, #0]
   131ac:	4053      	eors	r3, r2
   131ae:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 2);
   131b0:	68fb      	ldr	r3, [r7, #12]
   131b2:	089b      	lsrs	r3, r3, #2
   131b4:	68fa      	ldr	r2, [r7, #12]
   131b6:	4053      	eors	r3, r2
   131b8:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 4);
   131ba:	68fb      	ldr	r3, [r7, #12]
   131bc:	091b      	lsrs	r3, r3, #4
   131be:	68fa      	ldr	r2, [r7, #12]
   131c0:	4053      	eors	r3, r2
   131c2:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 8);
   131c4:	68fb      	ldr	r3, [r7, #12]
   131c6:	0a1b      	lsrs	r3, r3, #8
   131c8:	68fa      	ldr	r2, [r7, #12]
   131ca:	4053      	eors	r3, r2
   131cc:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 16);
   131ce:	68fb      	ldr	r3, [r7, #12]
   131d0:	0c1b      	lsrs	r3, r3, #16
   131d2:	68fa      	ldr	r2, [r7, #12]
   131d4:	4053      	eors	r3, r2
   131d6:	60fb      	str	r3, [r7, #12]

	// Rightmost bit of y holds the parity value
	// if (y&1) is 1 then parity is odd else even
	if (y & 1){
   131d8:	68fb      	ldr	r3, [r7, #12]
   131da:	f003 0301 	and.w	r3, r3, #1
   131de:	2b00      	cmp	r3, #0
   131e0:	d001      	beq.n	131e6 <_ZN17ARINC_Conversions10FindParityEm+0x4a>
			return 1;
   131e2:	2301      	movs	r3, #1
   131e4:	e000      	b.n	131e8 <_ZN17ARINC_Conversions10FindParityEm+0x4c>
	}

	return 0;
   131e6:	2300      	movs	r3, #0
}
   131e8:	4618      	mov	r0, r3
   131ea:	3714      	adds	r7, #20
   131ec:	46bd      	mov	sp, r7
   131ee:	bc80      	pop	{r7}
   131f0:	4770      	bx	lr

000131f2 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   131f2:	b480      	push	{r7}
   131f4:	b085      	sub	sp, #20
   131f6:	af00      	add	r7, sp, #0
   131f8:	60f8      	str	r0, [r7, #12]
   131fa:	460b      	mov	r3, r1
   131fc:	607a      	str	r2, [r7, #4]
   131fe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   13200:	7afb      	ldrb	r3, [r7, #11]
   13202:	68fa      	ldr	r2, [r7, #12]
   13204:	01db      	lsls	r3, r3, #7
   13206:	4413      	add	r3, r2
   13208:	3318      	adds	r3, #24
   1320a:	687a      	ldr	r2, [r7, #4]
   1320c:	601a      	str	r2, [r3, #0]
}
   1320e:	bf00      	nop
   13210:	3714      	adds	r7, #20
   13212:	46bd      	mov	sp, r7
   13214:	bc80      	pop	{r7}
   13216:	4770      	bx	lr

00013218 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   13218:	b480      	push	{r7}
   1321a:	b085      	sub	sp, #20
   1321c:	af00      	add	r7, sp, #0
   1321e:	60f8      	str	r0, [r7, #12]
   13220:	460b      	mov	r3, r1
   13222:	607a      	str	r2, [r7, #4]
   13224:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   13226:	7afb      	ldrb	r3, [r7, #11]
   13228:	68fa      	ldr	r2, [r7, #12]
   1322a:	01db      	lsls	r3, r3, #7
   1322c:	4413      	add	r3, r2
   1322e:	3314      	adds	r3, #20
   13230:	687a      	ldr	r2, [r7, #4]
   13232:	601a      	str	r2, [r3, #0]
}
   13234:	bf00      	nop
   13236:	3714      	adds	r7, #20
   13238:	46bd      	mov	sp, r7
   1323a:	bc80      	pop	{r7}
   1323c:	4770      	bx	lr
	...

00013240 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
   13240:	b580      	push	{r7, lr}
   13242:	b082      	sub	sp, #8
   13244:	af00      	add	r7, sp, #0
   13246:	4603      	mov	r3, r0
   13248:	6039      	str	r1, [r7, #0]
   1324a:	71fb      	strb	r3, [r7, #7]
   1324c:	4613      	mov	r3, r2
   1324e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   13250:	79bb      	ldrb	r3, [r7, #6]
   13252:	2b00      	cmp	r3, #0
   13254:	d006      	beq.n	13264 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   13256:	79fb      	ldrb	r3, [r7, #7]
   13258:	683a      	ldr	r2, [r7, #0]
   1325a:	4619      	mov	r1, r3
   1325c:	4806      	ldr	r0, [pc, #24]	; (13278 <_gpio_set_level+0x38>)
   1325e:	4b07      	ldr	r3, [pc, #28]	; (1327c <_gpio_set_level+0x3c>)
   13260:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
   13262:	e005      	b.n	13270 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   13264:	79fb      	ldrb	r3, [r7, #7]
   13266:	683a      	ldr	r2, [r7, #0]
   13268:	4619      	mov	r1, r3
   1326a:	4803      	ldr	r0, [pc, #12]	; (13278 <_gpio_set_level+0x38>)
   1326c:	4b04      	ldr	r3, [pc, #16]	; (13280 <_gpio_set_level+0x40>)
   1326e:	4798      	blx	r3
}
   13270:	bf00      	nop
   13272:	3708      	adds	r7, #8
   13274:	46bd      	mov	sp, r7
   13276:	bd80      	pop	{r7, pc}
   13278:	41008000 	.word	0x41008000
   1327c:	000131f3 	.word	0x000131f3
   13280:	00013219 	.word	0x00013219

00013284 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
   13284:	b580      	push	{r7, lr}
   13286:	b082      	sub	sp, #8
   13288:	af00      	add	r7, sp, #0
   1328a:	4603      	mov	r3, r0
   1328c:	460a      	mov	r2, r1
   1328e:	71fb      	strb	r3, [r7, #7]
   13290:	4613      	mov	r3, r2
   13292:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   13294:	79fb      	ldrb	r3, [r7, #7]
   13296:	115b      	asrs	r3, r3, #5
   13298:	b2d8      	uxtb	r0, r3
   1329a:	79fb      	ldrb	r3, [r7, #7]
   1329c:	f003 031f 	and.w	r3, r3, #31
   132a0:	2201      	movs	r2, #1
   132a2:	fa02 f303 	lsl.w	r3, r2, r3
   132a6:	79ba      	ldrb	r2, [r7, #6]
   132a8:	4619      	mov	r1, r3
   132aa:	4b03      	ldr	r3, [pc, #12]	; (132b8 <gpio_set_pin_level+0x34>)
   132ac:	4798      	blx	r3
}
   132ae:	bf00      	nop
   132b0:	3708      	adds	r7, #8
   132b2:	46bd      	mov	sp, r7
   132b4:	bd80      	pop	{r7, pc}
   132b6:	bf00      	nop
   132b8:	00013241 	.word	0x00013241

000132bc <_ZL10blink_LED0PK10timer_task>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(const struct timer_task *const timer_task){
   132bc:	b480      	push	{r7}
   132be:	b083      	sub	sp, #12
   132c0:	af00      	add	r7, sp, #0
   132c2:	6078      	str	r0, [r7, #4]
	//gpio_toggle_pin_level(LED0);
}
   132c4:	bf00      	nop
   132c6:	370c      	adds	r7, #12
   132c8:	46bd      	mov	sp, r7
   132ca:	bc80      	pop	{r7}
   132cc:	4770      	bx	lr
	...

000132d0 <_ZL9TxTimeoutPK10timer_task>:
static void TxTimeout(const struct timer_task *const timer_task){
   132d0:	b480      	push	{r7}
   132d2:	b083      	sub	sp, #12
   132d4:	af00      	add	r7, sp, #0
   132d6:	6078      	str	r0, [r7, #4]
	ptrARINCInterface->txTimeout=true;
   132d8:	4b04      	ldr	r3, [pc, #16]	; (132ec <_ZL9TxTimeoutPK10timer_task+0x1c>)
   132da:	681b      	ldr	r3, [r3, #0]
   132dc:	2201      	movs	r2, #1
   132de:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
}
   132e2:	bf00      	nop
   132e4:	370c      	adds	r7, #12
   132e6:	46bd      	mov	sp, r7
   132e8:	bc80      	pop	{r7}
   132ea:	4770      	bx	lr
   132ec:	20009124 	.word	0x20009124

000132f0 <_ZL12Receiver1Intv>:

static void Receiver1Int(void){
   132f0:	b480      	push	{r7}
   132f2:	af00      	add	r7, sp, #0
	ptrARINCInterface->newMessageR1=true;
   132f4:	4b04      	ldr	r3, [pc, #16]	; (13308 <_ZL12Receiver1Intv+0x18>)
   132f6:	681b      	ldr	r3, [r3, #0]
   132f8:	2201      	movs	r2, #1
   132fa:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
}
   132fe:	bf00      	nop
   13300:	46bd      	mov	sp, r7
   13302:	bc80      	pop	{r7}
   13304:	4770      	bx	lr
   13306:	bf00      	nop
   13308:	20009124 	.word	0x20009124

0001330c <_ZN15ARINC_InterfaceC2Ev>:

// default constructor
ARINC_Interface::ARINC_Interface()
   1330c:	b580      	push	{r7, lr}
   1330e:	b082      	sub	sp, #8
   13310:	af00      	add	r7, sp, #0
   13312:	6078      	str	r0, [r7, #4]
   13314:	6039      	str	r1, [r7, #0]
   13316:	687a      	ldr	r2, [r7, #4]
   13318:	683b      	ldr	r3, [r7, #0]
   1331a:	3304      	adds	r3, #4
   1331c:	4619      	mov	r1, r3
   1331e:	4610      	mov	r0, r2
   13320:	4b13      	ldr	r3, [pc, #76]	; (13370 <_ZN15ARINC_InterfaceC2Ev+0x64>)
   13322:	4798      	blx	r3
   13324:	683b      	ldr	r3, [r7, #0]
   13326:	681a      	ldr	r2, [r3, #0]
   13328:	687b      	ldr	r3, [r7, #4]
   1332a:	601a      	str	r2, [r3, #0]
   1332c:	687b      	ldr	r3, [r7, #4]
   1332e:	681b      	ldr	r3, [r3, #0]
   13330:	3b0c      	subs	r3, #12
   13332:	681b      	ldr	r3, [r3, #0]
   13334:	461a      	mov	r2, r3
   13336:	687b      	ldr	r3, [r7, #4]
   13338:	4413      	add	r3, r2
   1333a:	683a      	ldr	r2, [r7, #0]
   1333c:	6912      	ldr	r2, [r2, #16]
   1333e:	601a      	str	r2, [r3, #0]
   13340:	687b      	ldr	r3, [r7, #4]
   13342:	681b      	ldr	r3, [r3, #0]
   13344:	3b10      	subs	r3, #16
   13346:	681b      	ldr	r3, [r3, #0]
   13348:	461a      	mov	r2, r3
   1334a:	687b      	ldr	r3, [r7, #4]
   1334c:	4413      	add	r3, r2
   1334e:	683a      	ldr	r2, [r7, #0]
   13350:	6952      	ldr	r2, [r2, #20]
   13352:	601a      	str	r2, [r3, #0]
   13354:	687b      	ldr	r3, [r7, #4]
   13356:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   1335a:	4618      	mov	r0, r3
   1335c:	4b05      	ldr	r3, [pc, #20]	; (13374 <_ZN15ARINC_InterfaceC2Ev+0x68>)
   1335e:	4798      	blx	r3
{
	ptrARINCInterface=this;
   13360:	4a05      	ldr	r2, [pc, #20]	; (13378 <_ZN15ARINC_InterfaceC2Ev+0x6c>)
   13362:	687b      	ldr	r3, [r7, #4]
   13364:	6013      	str	r3, [r2, #0]

	//converter=ptrConverter;
} //ARINC_Interface
   13366:	687b      	ldr	r3, [r7, #4]
   13368:	4618      	mov	r0, r3
   1336a:	3708      	adds	r7, #8
   1336c:	46bd      	mov	sp, r7
   1336e:	bd80      	pop	{r7, pc}
   13370:	00012b71 	.word	0x00012b71
   13374:	00013d4d 	.word	0x00013d4d
   13378:	20009124 	.word	0x20009124

0001337c <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
   1337c:	b580      	push	{r7, lr}
   1337e:	b082      	sub	sp, #8
   13380:	af00      	add	r7, sp, #0
   13382:	6078      	str	r0, [r7, #4]
   13384:	687b      	ldr	r3, [r7, #4]
   13386:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
   1338a:	4618      	mov	r0, r3
   1338c:	4b15      	ldr	r3, [pc, #84]	; (133e4 <_ZN15ARINC_InterfaceC1Ev+0x68>)
   1338e:	4798      	blx	r3
   13390:	687b      	ldr	r3, [r7, #4]
   13392:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   13396:	4a14      	ldr	r2, [pc, #80]	; (133e8 <_ZN15ARINC_InterfaceC1Ev+0x6c>)
   13398:	4611      	mov	r1, r2
   1339a:	4618      	mov	r0, r3
   1339c:	4b13      	ldr	r3, [pc, #76]	; (133ec <_ZN15ARINC_InterfaceC1Ev+0x70>)
   1339e:	4798      	blx	r3
   133a0:	687b      	ldr	r3, [r7, #4]
   133a2:	4a13      	ldr	r2, [pc, #76]	; (133f0 <_ZN15ARINC_InterfaceC1Ev+0x74>)
   133a4:	4611      	mov	r1, r2
   133a6:	4618      	mov	r0, r3
   133a8:	4b12      	ldr	r3, [pc, #72]	; (133f4 <_ZN15ARINC_InterfaceC1Ev+0x78>)
   133aa:	4798      	blx	r3
   133ac:	4a12      	ldr	r2, [pc, #72]	; (133f8 <_ZN15ARINC_InterfaceC1Ev+0x7c>)
   133ae:	687b      	ldr	r3, [r7, #4]
   133b0:	601a      	str	r2, [r3, #0]
   133b2:	687b      	ldr	r3, [r7, #4]
   133b4:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
   133b8:	4a10      	ldr	r2, [pc, #64]	; (133fc <_ZN15ARINC_InterfaceC1Ev+0x80>)
   133ba:	601a      	str	r2, [r3, #0]
   133bc:	687b      	ldr	r3, [r7, #4]
   133be:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   133c2:	4a0f      	ldr	r2, [pc, #60]	; (13400 <_ZN15ARINC_InterfaceC1Ev+0x84>)
   133c4:	601a      	str	r2, [r3, #0]
   133c6:	687b      	ldr	r3, [r7, #4]
   133c8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   133cc:	4618      	mov	r0, r3
   133ce:	4b0d      	ldr	r3, [pc, #52]	; (13404 <_ZN15ARINC_InterfaceC1Ev+0x88>)
   133d0:	4798      	blx	r3
	ptrARINCInterface=this;
   133d2:	4a0d      	ldr	r2, [pc, #52]	; (13408 <_ZN15ARINC_InterfaceC1Ev+0x8c>)
   133d4:	687b      	ldr	r3, [r7, #4]
   133d6:	6013      	str	r3, [r2, #0]
} //ARINC_Interface
   133d8:	687b      	ldr	r3, [r7, #4]
   133da:	4618      	mov	r0, r3
   133dc:	3708      	adds	r7, #8
   133de:	46bd      	mov	sp, r7
   133e0:	bd80      	pop	{r7, pc}
   133e2:	bf00      	nop
   133e4:	00012e5d 	.word	0x00012e5d
   133e8:	0002103c 	.word	0x0002103c
   133ec:	00000bed 	.word	0x00000bed
   133f0:	00021028 	.word	0x00021028
   133f4:	00012b71 	.word	0x00012b71
   133f8:	00020fe0 	.word	0x00020fe0
   133fc:	00020ffc 	.word	0x00020ffc
   13400:	00021018 	.word	0x00021018
   13404:	00013d4d 	.word	0x00013d4d
   13408:	20009124 	.word	0x20009124

0001340c <_ZN15ARINC_InterfaceD2Ev>:


// default destructor
ARINC_Interface::~ARINC_Interface()
   1340c:	b580      	push	{r7, lr}
   1340e:	b082      	sub	sp, #8
   13410:	af00      	add	r7, sp, #0
   13412:	6078      	str	r0, [r7, #4]
   13414:	6039      	str	r1, [r7, #0]
   13416:	683b      	ldr	r3, [r7, #0]
   13418:	681a      	ldr	r2, [r3, #0]
   1341a:	687b      	ldr	r3, [r7, #4]
   1341c:	601a      	str	r2, [r3, #0]
   1341e:	687b      	ldr	r3, [r7, #4]
   13420:	681b      	ldr	r3, [r3, #0]
   13422:	3b0c      	subs	r3, #12
   13424:	681b      	ldr	r3, [r3, #0]
   13426:	461a      	mov	r2, r3
   13428:	687b      	ldr	r3, [r7, #4]
   1342a:	4413      	add	r3, r2
   1342c:	683a      	ldr	r2, [r7, #0]
   1342e:	6912      	ldr	r2, [r2, #16]
   13430:	601a      	str	r2, [r3, #0]
   13432:	687b      	ldr	r3, [r7, #4]
   13434:	681b      	ldr	r3, [r3, #0]
   13436:	3b10      	subs	r3, #16
   13438:	681b      	ldr	r3, [r3, #0]
   1343a:	461a      	mov	r2, r3
   1343c:	687b      	ldr	r3, [r7, #4]
   1343e:	4413      	add	r3, r2
   13440:	683a      	ldr	r2, [r7, #0]
   13442:	6952      	ldr	r2, [r2, #20]
   13444:	601a      	str	r2, [r3, #0]
   13446:	687b      	ldr	r3, [r7, #4]
   13448:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   1344c:	4618      	mov	r0, r3
   1344e:	4b07      	ldr	r3, [pc, #28]	; (1346c <_ZN15ARINC_InterfaceD2Ev+0x60>)
   13450:	4798      	blx	r3
   13452:	687a      	ldr	r2, [r7, #4]
   13454:	683b      	ldr	r3, [r7, #0]
   13456:	3304      	adds	r3, #4
   13458:	4619      	mov	r1, r3
   1345a:	4610      	mov	r0, r2
   1345c:	4b04      	ldr	r3, [pc, #16]	; (13470 <_ZN15ARINC_InterfaceD2Ev+0x64>)
   1345e:	4798      	blx	r3
{
} //~ARINC_Interface
   13460:	687b      	ldr	r3, [r7, #4]
   13462:	4618      	mov	r0, r3
   13464:	3708      	adds	r7, #8
   13466:	46bd      	mov	sp, r7
   13468:	bd80      	pop	{r7, pc}
   1346a:	bf00      	nop
   1346c:	00013d6d 	.word	0x00013d6d
   13470:	00012bb7 	.word	0x00012bb7

00013474 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
   13474:	b580      	push	{r7, lr}
   13476:	b082      	sub	sp, #8
   13478:	af00      	add	r7, sp, #0
   1347a:	6078      	str	r0, [r7, #4]
   1347c:	4a15      	ldr	r2, [pc, #84]	; (134d4 <_ZN15ARINC_InterfaceD1Ev+0x60>)
   1347e:	687b      	ldr	r3, [r7, #4]
   13480:	601a      	str	r2, [r3, #0]
   13482:	687b      	ldr	r3, [r7, #4]
   13484:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
   13488:	4a13      	ldr	r2, [pc, #76]	; (134d8 <_ZN15ARINC_InterfaceD1Ev+0x64>)
   1348a:	601a      	str	r2, [r3, #0]
   1348c:	687b      	ldr	r3, [r7, #4]
   1348e:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   13492:	4a12      	ldr	r2, [pc, #72]	; (134dc <_ZN15ARINC_InterfaceD1Ev+0x68>)
   13494:	601a      	str	r2, [r3, #0]
   13496:	687b      	ldr	r3, [r7, #4]
   13498:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   1349c:	4618      	mov	r0, r3
   1349e:	4b10      	ldr	r3, [pc, #64]	; (134e0 <_ZN15ARINC_InterfaceD1Ev+0x6c>)
   134a0:	4798      	blx	r3
   134a2:	687b      	ldr	r3, [r7, #4]
   134a4:	4a0f      	ldr	r2, [pc, #60]	; (134e4 <_ZN15ARINC_InterfaceD1Ev+0x70>)
   134a6:	4611      	mov	r1, r2
   134a8:	4618      	mov	r0, r3
   134aa:	4b0f      	ldr	r3, [pc, #60]	; (134e8 <_ZN15ARINC_InterfaceD1Ev+0x74>)
   134ac:	4798      	blx	r3
   134ae:	687b      	ldr	r3, [r7, #4]
   134b0:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   134b4:	4a0d      	ldr	r2, [pc, #52]	; (134ec <_ZN15ARINC_InterfaceD1Ev+0x78>)
   134b6:	4611      	mov	r1, r2
   134b8:	4618      	mov	r0, r3
   134ba:	4b0d      	ldr	r3, [pc, #52]	; (134f0 <_ZN15ARINC_InterfaceD1Ev+0x7c>)
   134bc:	4798      	blx	r3
   134be:	687b      	ldr	r3, [r7, #4]
   134c0:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
   134c4:	4618      	mov	r0, r3
   134c6:	4b0b      	ldr	r3, [pc, #44]	; (134f4 <_ZN15ARINC_InterfaceD1Ev+0x80>)
   134c8:	4798      	blx	r3
} //~ARINC_Interface
   134ca:	687b      	ldr	r3, [r7, #4]
   134cc:	4618      	mov	r0, r3
   134ce:	3708      	adds	r7, #8
   134d0:	46bd      	mov	sp, r7
   134d2:	bd80      	pop	{r7, pc}
   134d4:	00020fe0 	.word	0x00020fe0
   134d8:	00020ffc 	.word	0x00020ffc
   134dc:	00021018 	.word	0x00021018
   134e0:	00013d6d 	.word	0x00013d6d
   134e4:	00021028 	.word	0x00021028
   134e8:	00012bb7 	.word	0x00012bb7
   134ec:	0002103c 	.word	0x0002103c
   134f0:	00014449 	.word	0x00014449
   134f4:	00012e7d 	.word	0x00012e7d

000134f8 <_ZTv0_n16_N15ARINC_InterfaceD1Ev>:
   134f8:	b580      	push	{r7, lr}
   134fa:	b082      	sub	sp, #8
   134fc:	af00      	add	r7, sp, #0
   134fe:	6078      	str	r0, [r7, #4]
   13500:	687b      	ldr	r3, [r7, #4]
   13502:	681b      	ldr	r3, [r3, #0]
   13504:	3b10      	subs	r3, #16
   13506:	681b      	ldr	r3, [r3, #0]
   13508:	461a      	mov	r2, r3
   1350a:	687b      	ldr	r3, [r7, #4]
   1350c:	4413      	add	r3, r2
   1350e:	4618      	mov	r0, r3
   13510:	4b03      	ldr	r3, [pc, #12]	; (13520 <_ZTv0_n16_N15ARINC_InterfaceD1Ev+0x28>)
   13512:	4798      	blx	r3
   13514:	4603      	mov	r3, r0
   13516:	4618      	mov	r0, r3
   13518:	3708      	adds	r7, #8
   1351a:	46bd      	mov	sp, r7
   1351c:	bd80      	pop	{r7, pc}
   1351e:	bf00      	nop
   13520:	00013475 	.word	0x00013475

00013524 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
   13524:	b580      	push	{r7, lr}
   13526:	b082      	sub	sp, #8
   13528:	af00      	add	r7, sp, #0
   1352a:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
   1352c:	6878      	ldr	r0, [r7, #4]
   1352e:	4b06      	ldr	r3, [pc, #24]	; (13548 <_ZN15ARINC_InterfaceD0Ev+0x24>)
   13530:	4798      	blx	r3
   13532:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   13536:	6878      	ldr	r0, [r7, #4]
   13538:	4b04      	ldr	r3, [pc, #16]	; (1354c <_ZN15ARINC_InterfaceD0Ev+0x28>)
   1353a:	4798      	blx	r3
   1353c:	687b      	ldr	r3, [r7, #4]
   1353e:	4618      	mov	r0, r3
   13540:	3708      	adds	r7, #8
   13542:	46bd      	mov	sp, r7
   13544:	bd80      	pop	{r7, pc}
   13546:	bf00      	nop
   13548:	00013475 	.word	0x00013475
   1354c:	000194a9 	.word	0x000194a9

00013550 <_ZTv0_n16_N15ARINC_InterfaceD0Ev>:
   13550:	b580      	push	{r7, lr}
   13552:	b082      	sub	sp, #8
   13554:	af00      	add	r7, sp, #0
   13556:	6078      	str	r0, [r7, #4]
   13558:	687b      	ldr	r3, [r7, #4]
   1355a:	681b      	ldr	r3, [r3, #0]
   1355c:	3b10      	subs	r3, #16
   1355e:	681b      	ldr	r3, [r3, #0]
   13560:	461a      	mov	r2, r3
   13562:	687b      	ldr	r3, [r7, #4]
   13564:	4413      	add	r3, r2
   13566:	4618      	mov	r0, r3
   13568:	4b03      	ldr	r3, [pc, #12]	; (13578 <_ZTv0_n16_N15ARINC_InterfaceD0Ev+0x28>)
   1356a:	4798      	blx	r3
   1356c:	4603      	mov	r3, r0
   1356e:	4618      	mov	r0, r3
   13570:	3708      	adds	r7, #8
   13572:	46bd      	mov	sp, r7
   13574:	bd80      	pop	{r7, pc}
   13576:	bf00      	nop
   13578:	00013525 	.word	0x00013525

0001357c <_ZN15ARINC_Interface4InitEv>:




bool	ARINC_Interface::Init(void){
   1357c:	b580      	push	{r7, lr}
   1357e:	b082      	sub	sp, #8
   13580:	af00      	add	r7, sp, #0
   13582:	6078      	str	r0, [r7, #4]
	MessageCount=0; MessageCount1=0; MessageCount2=0;
   13584:	687b      	ldr	r3, [r7, #4]
   13586:	2200      	movs	r2, #0
   13588:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
   1358c:	687b      	ldr	r3, [r7, #4]
   1358e:	2200      	movs	r2, #0
   13590:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
   13594:	687b      	ldr	r3, [r7, #4]
   13596:	2200      	movs	r2, #0
   13598:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	BITRATE0=false;
   1359c:	687b      	ldr	r3, [r7, #4]
   1359e:	2200      	movs	r2, #0
   135a0:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	BITRATE1=false;
   135a4:	687b      	ldr	r3, [r7, #4]
   135a6:	2200      	movs	r2, #0
   135a8:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	BITRATE2=false;
   135ac:	687b      	ldr	r3, [r7, #4]
   135ae:	2200      	movs	r2, #0
   135b0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a

	PARITY=false;
   135b4:	687b      	ldr	r3, [r7, #4]
   135b6:	2200      	movs	r2, #0
   135b8:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	HW_RESET();
   135bc:	6878      	ldr	r0, [r7, #4]
   135be:	4b3d      	ldr	r3, [pc, #244]	; (136b4 <_ZN15ARINC_Interface4InitEv+0x138>)
   135c0:	4798      	blx	r3
	InitBuffer();
   135c2:	687b      	ldr	r3, [r7, #4]
   135c4:	4618      	mov	r0, r3
   135c6:	4b3c      	ldr	r3, [pc, #240]	; (136b8 <_ZN15ARINC_Interface4InitEv+0x13c>)
   135c8:	4798      	blx	r3
	statusHolt=HI3593.Init();
   135ca:	687b      	ldr	r3, [r7, #4]
   135cc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   135d0:	4618      	mov	r0, r3
   135d2:	4b3a      	ldr	r3, [pc, #232]	; (136bc <_ZN15ARINC_Interface4InitEv+0x140>)
   135d4:	4798      	blx	r3
   135d6:	4603      	mov	r3, r0
   135d8:	461a      	mov	r2, r3
   135da:	687b      	ldr	r3, [r7, #4]
   135dc:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
	if (statusHolt!=TSR_Default){
   135e0:	687b      	ldr	r3, [r7, #4]
   135e2:	f893 317b 	ldrb.w	r3, [r3, #379]	; 0x17b
   135e6:	2b01      	cmp	r3, #1
   135e8:	d008      	beq.n	135fc <_ZN15ARINC_Interface4InitEv+0x80>
		usb.println("\n\rHI-3593 failed to Initilize\n\r");
   135ea:	4935      	ldr	r1, [pc, #212]	; (136c0 <_ZN15ARINC_Interface4InitEv+0x144>)
   135ec:	4835      	ldr	r0, [pc, #212]	; (136c4 <_ZN15ARINC_Interface4InitEv+0x148>)
   135ee:	4b36      	ldr	r3, [pc, #216]	; (136c8 <_ZN15ARINC_Interface4InitEv+0x14c>)
   135f0:	4798      	blx	r3
		isOK=false;
   135f2:	687b      	ldr	r3, [r7, #4]
   135f4:	2200      	movs	r2, #0
   135f6:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
   135fa:	e03d      	b.n	13678 <_ZN15ARINC_Interface4InitEv+0xfc>
	}else{
		isOK=true;
   135fc:	687b      	ldr	r3, [r7, #4]
   135fe:	2201      	movs	r2, #1
   13600:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
		newMessageR1=false;
   13604:	687b      	ldr	r3, [r7, #4]
   13606:	2200      	movs	r2, #0
   13608:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		newMessageR2=false;
   1360c:	687b      	ldr	r3, [r7, #4]
   1360e:	2200      	movs	r2, #0
   13610:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
		BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
   13614:	687b      	ldr	r3, [r7, #4]
   13616:	2200      	movs	r2, #0
   13618:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		MessageCount=0;
   1361c:	687b      	ldr	r3, [r7, #4]
   1361e:	2200      	movs	r2, #0
   13620:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
		octalLabel = 0x1D;         // Write ARINC Label
   13624:	687b      	ldr	r3, [r7, #4]
   13626:	221d      	movs	r2, #29
   13628:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
		Arate=0;
   1362c:	687b      	ldr	r3, [r7, #4]
   1362e:	2200      	movs	r2, #0
   13630:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
		
		(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
   13634:	687b      	ldr	r3, [r7, #4]
   13636:	f203 1327 	addw	r3, r3, #295	; 0x127
   1363a:	2210      	movs	r2, #16
   1363c:	2100      	movs	r1, #0
   1363e:	4618      	mov	r0, r3
   13640:	4b22      	ldr	r3, [pc, #136]	; (136cc <_ZN15ARINC_Interface4InitEv+0x150>)
   13642:	4798      	blx	r3
			
		// Setup the Labels
		HI3593.InitReceiver1Labels();     // initial Rec1 labels
   13644:	687b      	ldr	r3, [r7, #4]
   13646:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   1364a:	4618      	mov	r0, r3
   1364c:	4b20      	ldr	r3, [pc, #128]	; (136d0 <_ZN15ARINC_Interface4InitEv+0x154>)
   1364e:	4798      	blx	r3
		HI3593.initReceiver2Labels();     // initial Rec2 labels
   13650:	687b      	ldr	r3, [r7, #4]
   13652:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   13656:	4618      	mov	r0, r3
   13658:	4b1e      	ldr	r3, [pc, #120]	; (136d4 <_ZN15ARINC_Interface4InitEv+0x158>)
   1365a:	4798      	blx	r3
		HI3593.InitPriorityLabels();
   1365c:	687b      	ldr	r3, [r7, #4]
   1365e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   13662:	4618      	mov	r0, r3
   13664:	4b1c      	ldr	r3, [pc, #112]	; (136d8 <_ZN15ARINC_Interface4InitEv+0x15c>)
   13666:	4798      	blx	r3
		//HI3593.MultiByteRead(REC1MEMORY, 32, LabelsArrayRX1); // read in all Rec-1 labels into the passed array
		//HI3593.MultiByteRead(REC2MEMORY, 32, LabelsArrayRX2); // read in all Rec-2 labels into the passed array

		Rec1Parity =0;
   13668:	687b      	ldr	r3, [r7, #4]
   1366a:	2200      	movs	r2, #0
   1366c:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		Rec2Parity =0;
   13670:	687b      	ldr	r3, [r7, #4]
   13672:	2200      	movs	r2, #0
   13674:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

		//HI3593.W_CommandValue(REC1CR,RFLIP | PLON | LABREC | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
		//HI3593.W_CommandValue(REC2CR,RFLIP | PLON | LABREC | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
	}
	
	arincTimer.Init();
   13678:	4818      	ldr	r0, [pc, #96]	; (136dc <_ZN15ARINC_Interface4InitEv+0x160>)
   1367a:	4b19      	ldr	r3, [pc, #100]	; (136e0 <_ZN15ARINC_Interface4InitEv+0x164>)
   1367c:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(blink_LED0),1000);
   1367e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13682:	4918      	ldr	r1, [pc, #96]	; (136e4 <_ZN15ARINC_Interface4InitEv+0x168>)
   13684:	4815      	ldr	r0, [pc, #84]	; (136dc <_ZN15ARINC_Interface4InitEv+0x160>)
   13686:	4b18      	ldr	r3, [pc, #96]	; (136e8 <_ZN15ARINC_Interface4InitEv+0x16c>)
   13688:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(TxTimeout),500);
   1368a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   1368e:	4917      	ldr	r1, [pc, #92]	; (136ec <_ZN15ARINC_Interface4InitEv+0x170>)
   13690:	4812      	ldr	r0, [pc, #72]	; (136dc <_ZN15ARINC_Interface4InitEv+0x160>)
   13692:	4b15      	ldr	r3, [pc, #84]	; (136e8 <_ZN15ARINC_Interface4InitEv+0x16c>)
   13694:	4798      	blx	r3
	ext_irq_register(ARINCR1Int, Receiver1Int);
   13696:	4916      	ldr	r1, [pc, #88]	; (136f0 <_ZN15ARINC_Interface4InitEv+0x174>)
   13698:	2057      	movs	r0, #87	; 0x57
   1369a:	4b16      	ldr	r3, [pc, #88]	; (136f4 <_ZN15ARINC_Interface4InitEv+0x178>)
   1369c:	4798      	blx	r3
	arincTimer.start();
   1369e:	480f      	ldr	r0, [pc, #60]	; (136dc <_ZN15ARINC_Interface4InitEv+0x160>)
   136a0:	4b15      	ldr	r3, [pc, #84]	; (136f8 <_ZN15ARINC_Interface4InitEv+0x17c>)
   136a2:	4798      	blx	r3
	//HI3893.InitPriorityLabels();
	return isOK;
   136a4:	687b      	ldr	r3, [r7, #4]
   136a6:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
}
   136aa:	4618      	mov	r0, r3
   136ac:	3708      	adds	r7, #8
   136ae:	46bd      	mov	sp, r7
   136b0:	bd80      	pop	{r7, pc}
   136b2:	bf00      	nop
   136b4:	00013bf1 	.word	0x00013bf1
   136b8:	00012bfd 	.word	0x00012bfd
   136bc:	00013d8d 	.word	0x00013d8d
   136c0:	000205b8 	.word	0x000205b8
   136c4:	200090c4 	.word	0x200090c4
   136c8:	00017ee1 	.word	0x00017ee1
   136cc:	0001bd39 	.word	0x0001bd39
   136d0:	00013f9d 	.word	0x00013f9d
   136d4:	0001411d 	.word	0x0001411d
   136d8:	00014009 	.word	0x00014009
   136dc:	2000a4d8 	.word	0x2000a4d8
   136e0:	000173f9 	.word	0x000173f9
   136e4:	000132bd 	.word	0x000132bd
   136e8:	00017509 	.word	0x00017509
   136ec:	000132d1 	.word	0x000132d1
   136f0:	000132f1 	.word	0x000132f1
   136f4:	00006035 	.word	0x00006035
   136f8:	00017449 	.word	0x00017449

000136fc <_ZN15ARINC_Interface12ReadRXBufferEh>:
	else
	{
		return false;
	}
}
uint32_t ARINC_Interface::ReadRXBuffer(uint8_t n){
   136fc:	b580      	push	{r7, lr}
   136fe:	b084      	sub	sp, #16
   13700:	af00      	add	r7, sp, #0
   13702:	6078      	str	r0, [r7, #4]
   13704:	460b      	mov	r3, r1
   13706:	70fb      	strb	r3, [r7, #3]
	
	usb.println("r\n---!got message!----");
   13708:	4930      	ldr	r1, [pc, #192]	; (137cc <_ZN15ARINC_Interface12ReadRXBufferEh+0xd0>)
   1370a:	4831      	ldr	r0, [pc, #196]	; (137d0 <_ZN15ARINC_Interface12ReadRXBufferEh+0xd4>)
   1370c:	4b31      	ldr	r3, [pc, #196]	; (137d4 <_ZN15ARINC_Interface12ReadRXBufferEh+0xd8>)
   1370e:	4798      	blx	r3
	cpu_irq_disable();
   13710:	6878      	ldr	r0, [r7, #4]
   13712:	4b31      	ldr	r3, [pc, #196]	; (137d8 <_ZN15ARINC_Interface12ReadRXBufferEh+0xdc>)
   13714:	4798      	blx	r3
	                     // Poll Receiver1 status register
	
	for (uint8_t ii = 0; ii <2*RX_LABELS_NUMBER ; ii++)
   13716:	2300      	movs	r3, #0
   13718:	73fb      	strb	r3, [r7, #15]
   1371a:	7bfb      	ldrb	r3, [r7, #15]
   1371c:	2b3f      	cmp	r3, #63	; 0x3f
   1371e:	dc3c      	bgt.n	1379a <_ZN15ARINC_Interface12ReadRXBufferEh+0x9e>
	{
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
   13720:	687b      	ldr	r3, [r7, #4]
   13722:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
   13726:	78fb      	ldrb	r3, [r7, #3]
   13728:	3b01      	subs	r3, #1
   1372a:	b2db      	uxtb	r3, r3
   1372c:	015b      	lsls	r3, r3, #5
   1372e:	b2db      	uxtb	r3, r3
   13730:	3b70      	subs	r3, #112	; 0x70
   13732:	b2db      	uxtb	r3, r3
   13734:	4619      	mov	r1, r3
   13736:	4610      	mov	r0, r2
   13738:	4b28      	ldr	r3, [pc, #160]	; (137dc <_ZN15ARINC_Interface12ReadRXBufferEh+0xe0>)
   1373a:	4798      	blx	r3
   1373c:	4603      	mov	r3, r0
   1373e:	461a      	mov	r2, r3
   13740:	687b      	ldr	r3, [r7, #4]
   13742:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
		if(((statusRegister & FFEMPTY) == 0))
   13746:	687b      	ldr	r3, [r7, #4]
   13748:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
   1374c:	f003 0301 	and.w	r3, r3, #1
   13750:	2b00      	cmp	r3, #0
   13752:	d121      	bne.n	13798 <_ZN15ARINC_Interface12ReadRXBufferEh+0x9c>
		{
				
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
   13754:	687b      	ldr	r3, [r7, #4]
   13756:	f503 70c6 	add.w	r0, r3, #396	; 0x18c
   1375a:	78fb      	ldrb	r3, [r7, #3]
   1375c:	3304      	adds	r3, #4
   1375e:	b2db      	uxtb	r3, r3
   13760:	015b      	lsls	r3, r3, #5
   13762:	b2d9      	uxtb	r1, r3
   13764:	687b      	ldr	r3, [r7, #4]
   13766:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1376a:	461a      	mov	r2, r3
   1376c:	4b1c      	ldr	r3, [pc, #112]	; (137e0 <_ZN15ARINC_Interface12ReadRXBufferEh+0xe4>)
   1376e:	4798      	blx	r3
				
			memcpy(receiverBuffer[MessageCount],RXBuffer,g_RXBuffSize);  // copy frame to large array for safe keeping
   13770:	687b      	ldr	r3, [r7, #4]
   13772:	691a      	ldr	r2, [r3, #16]
   13774:	687b      	ldr	r3, [r7, #4]
   13776:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
   1377a:	009b      	lsls	r3, r3, #2
   1377c:	4413      	add	r3, r2
   1377e:	681b      	ldr	r3, [r3, #0]
   13780:	687a      	ldr	r2, [r7, #4]
   13782:	f502 72b0 	add.w	r2, r2, #352	; 0x160
   13786:	6812      	ldr	r2, [r2, #0]
   13788:	601a      	str	r2, [r3, #0]
				
			//		printARINCData(REC1_HEADER,RXBuffer);
			CheckMessageCountMax();
   1378a:	6878      	ldr	r0, [r7, #4]
   1378c:	4b15      	ldr	r3, [pc, #84]	; (137e4 <_ZN15ARINC_Interface12ReadRXBufferEh+0xe8>)
   1378e:	4798      	blx	r3
	for (uint8_t ii = 0; ii <2*RX_LABELS_NUMBER ; ii++)
   13790:	7bfb      	ldrb	r3, [r7, #15]
   13792:	3301      	adds	r3, #1
   13794:	73fb      	strb	r3, [r7, #15]
   13796:	e7c0      	b.n	1371a <_ZN15ARINC_Interface12ReadRXBufferEh+0x1e>
				
		}else{
			break;
   13798:	bf00      	nop
		}
	}

	cpu_irq_enable();
   1379a:	6878      	ldr	r0, [r7, #4]
   1379c:	4b12      	ldr	r3, [pc, #72]	; (137e8 <_ZN15ARINC_Interface12ReadRXBufferEh+0xec>)
   1379e:	4798      	blx	r3

		if ((n==1))
   137a0:	78fb      	ldrb	r3, [r7, #3]
   137a2:	2b01      	cmp	r3, #1
   137a4:	d104      	bne.n	137b0 <_ZN15ARINC_Interface12ReadRXBufferEh+0xb4>
		{
			newMessageR1=false;
   137a6:	687b      	ldr	r3, [r7, #4]
   137a8:	2200      	movs	r2, #0
   137aa:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
   137ae:	e006      	b.n	137be <_ZN15ARINC_Interface12ReadRXBufferEh+0xc2>
		}
		else if (n==2)
   137b0:	78fb      	ldrb	r3, [r7, #3]
   137b2:	2b02      	cmp	r3, #2
   137b4:	d103      	bne.n	137be <_ZN15ARINC_Interface12ReadRXBufferEh+0xc2>
		{
			newMessageR2=false;
   137b6:	687b      	ldr	r3, [r7, #4]
   137b8:	2200      	movs	r2, #0
   137ba:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
		}

	
	return statusRegister;	
   137be:	687b      	ldr	r3, [r7, #4]
   137c0:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
}
   137c4:	4618      	mov	r0, r3
   137c6:	3710      	adds	r7, #16
   137c8:	46bd      	mov	sp, r7
   137ca:	bd80      	pop	{r7, pc}
   137cc:	000205fc 	.word	0x000205fc
   137d0:	200090c4 	.word	0x200090c4
   137d4:	00017ee1 	.word	0x00017ee1
   137d8:	00013af9 	.word	0x00013af9
   137dc:	000143c9 	.word	0x000143c9
   137e0:	00014189 	.word	0x00014189
   137e4:	00013bbd 	.word	0x00013bbd
   137e8:	00013ae1 	.word	0x00013ae1

000137ec <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
   137ec:	b480      	push	{r7}
   137ee:	b085      	sub	sp, #20
   137f0:	af00      	add	r7, sp, #0
   137f2:	6078      	str	r0, [r7, #4]
   137f4:	460b      	mov	r3, r1
   137f6:	70fb      	strb	r3, [r7, #3]
	uint32_t *data;
	uint8_t	j;
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   137f8:	2300      	movs	r3, #0
   137fa:	73fb      	strb	r3, [r7, #15]
   137fc:	7bfb      	ldrb	r3, [r7, #15]
   137fe:	2b1f      	cmp	r3, #31
   13800:	dc21      	bgt.n	13846 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x5a>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
   13802:	687b      	ldr	r3, [r7, #4]
   13804:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
   13808:	7bfb      	ldrb	r3, [r7, #15]
   1380a:	4413      	add	r3, r2
   1380c:	b2db      	uxtb	r3, r3
   1380e:	f003 031f 	and.w	r3, r3, #31
   13812:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
   13814:	687b      	ldr	r3, [r7, #4]
   13816:	691a      	ldr	r2, [r3, #16]
   13818:	7bbb      	ldrb	r3, [r7, #14]
   1381a:	009b      	lsls	r3, r3, #2
   1381c:	4413      	add	r3, r2
   1381e:	681b      	ldr	r3, [r3, #0]
   13820:	3303      	adds	r3, #3
   13822:	781b      	ldrb	r3, [r3, #0]
   13824:	78fa      	ldrb	r2, [r7, #3]
   13826:	429a      	cmp	r2, r3
   13828:	d109      	bne.n	1383e <_ZN15ARINC_Interface15ReadBufferLabelEh+0x52>
		{
			data=(uint32_t*)receiverBuffer[j];
   1382a:	687b      	ldr	r3, [r7, #4]
   1382c:	691a      	ldr	r2, [r3, #16]
   1382e:	7bbb      	ldrb	r3, [r7, #14]
   13830:	009b      	lsls	r3, r3, #2
   13832:	4413      	add	r3, r2
   13834:	681b      	ldr	r3, [r3, #0]
   13836:	60bb      	str	r3, [r7, #8]
			return *data;
   13838:	68bb      	ldr	r3, [r7, #8]
   1383a:	681b      	ldr	r3, [r3, #0]
   1383c:	e004      	b.n	13848 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x5c>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   1383e:	7bfb      	ldrb	r3, [r7, #15]
   13840:	3301      	adds	r3, #1
   13842:	73fb      	strb	r3, [r7, #15]
   13844:	e7da      	b.n	137fc <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
		}
		
	}

	return 0;
   13846:	2300      	movs	r3, #0
}
   13848:	4618      	mov	r0, r3
   1384a:	3714      	adds	r7, #20
   1384c:	46bd      	mov	sp, r7
   1384e:	bc80      	pop	{r7}
   13850:	4770      	bx	lr
	...

00013854 <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh>:
   13854:	b580      	push	{r7, lr}
   13856:	b082      	sub	sp, #8
   13858:	af00      	add	r7, sp, #0
   1385a:	6078      	str	r0, [r7, #4]
   1385c:	460b      	mov	r3, r1
   1385e:	70fb      	strb	r3, [r7, #3]
   13860:	687b      	ldr	r3, [r7, #4]
   13862:	681b      	ldr	r3, [r3, #0]
   13864:	3b14      	subs	r3, #20
   13866:	681b      	ldr	r3, [r3, #0]
   13868:	461a      	mov	r2, r3
   1386a:	687b      	ldr	r3, [r7, #4]
   1386c:	4413      	add	r3, r2
   1386e:	78fa      	ldrb	r2, [r7, #3]
   13870:	4611      	mov	r1, r2
   13872:	4618      	mov	r0, r3
   13874:	4b03      	ldr	r3, [pc, #12]	; (13884 <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh+0x30>)
   13876:	4798      	blx	r3
   13878:	4603      	mov	r3, r0
   1387a:	4618      	mov	r0, r3
   1387c:	3708      	adds	r7, #8
   1387e:	46bd      	mov	sp, r7
   13880:	bd80      	pop	{r7, pc}
   13882:	bf00      	nop
   13884:	000137ed 	.word	0x000137ed

00013888 <_ZN15ARINC_Interface18TrasmitSingleLabelEv>:
uint32_t ARINC_Interface::ReadBufferLabel(int label){
	uint8_t	l=Label2Byte((uint32_t)label);
	return (uint32_t)ReadBufferLabel(l);
}
uint32_t ARINC_Interface::TrasmitSingleLabel(void){
   13888:	b580      	push	{r7, lr}
   1388a:	b082      	sub	sp, #8
   1388c:	af00      	add	r7, sp, #0
   1388e:	6078      	str	r0, [r7, #4]
	return	TrasmitSingleLabel((uint32_t)DEFAULT_LABEL);
   13890:	f44f 7187 	mov.w	r1, #270	; 0x10e
   13894:	6878      	ldr	r0, [r7, #4]
   13896:	4b03      	ldr	r3, [pc, #12]	; (138a4 <_ZN15ARINC_Interface18TrasmitSingleLabelEv+0x1c>)
   13898:	4798      	blx	r3
   1389a:	4603      	mov	r3, r0
}
   1389c:	4618      	mov	r0, r3
   1389e:	3708      	adds	r7, #8
   138a0:	46bd      	mov	sp, r7
   138a2:	bd80      	pop	{r7, pc}
   138a4:	000138a9 	.word	0x000138a9

000138a8 <_ZN15ARINC_Interface18TrasmitSingleLabelEm>:

uint32_t ARINC_Interface::TrasmitSingleLabel(uint32_t l){
   138a8:	b590      	push	{r4, r7, lr}
   138aa:	b085      	sub	sp, #20
   138ac:	af00      	add	r7, sp, #0
   138ae:	6078      	str	r0, [r7, #4]
   138b0:	6039      	str	r1, [r7, #0]
	gpio_set_pin_level(LED0,false);
   138b2:	2100      	movs	r1, #0
   138b4:	2052      	movs	r0, #82	; 0x52
   138b6:	4b45      	ldr	r3, [pc, #276]	; (139cc <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x124>)
   138b8:	4798      	blx	r3
	octalLabel=Label2Byte(l);
   138ba:	687b      	ldr	r3, [r7, #4]
   138bc:	681b      	ldr	r3, [r3, #0]
   138be:	3b0c      	subs	r3, #12
   138c0:	681b      	ldr	r3, [r3, #0]
   138c2:	461a      	mov	r2, r3
   138c4:	687b      	ldr	r3, [r7, #4]
   138c6:	4413      	add	r3, r2
   138c8:	681b      	ldr	r3, [r3, #0]
   138ca:	3304      	adds	r3, #4
   138cc:	681b      	ldr	r3, [r3, #0]
   138ce:	687a      	ldr	r2, [r7, #4]
   138d0:	6812      	ldr	r2, [r2, #0]
   138d2:	3a0c      	subs	r2, #12
   138d4:	6812      	ldr	r2, [r2, #0]
   138d6:	4611      	mov	r1, r2
   138d8:	687a      	ldr	r2, [r7, #4]
   138da:	440a      	add	r2, r1
   138dc:	6839      	ldr	r1, [r7, #0]
   138de:	4610      	mov	r0, r2
   138e0:	4798      	blx	r3
   138e2:	4603      	mov	r3, r0
   138e4:	461a      	mov	r2, r3
   138e6:	687b      	ldr	r3, [r7, #4]
   138e8:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
	index=GetIndexTXLabelarray(FlipByte(octalLabel),LabelsArrayTX);
   138ec:	687b      	ldr	r3, [r7, #4]
   138ee:	681b      	ldr	r3, [r3, #0]
   138f0:	3b0c      	subs	r3, #12
   138f2:	681b      	ldr	r3, [r3, #0]
   138f4:	461a      	mov	r2, r3
   138f6:	687b      	ldr	r3, [r7, #4]
   138f8:	189c      	adds	r4, r3, r2
   138fa:	687b      	ldr	r3, [r7, #4]
   138fc:	681b      	ldr	r3, [r3, #0]
   138fe:	3b0c      	subs	r3, #12
   13900:	681b      	ldr	r3, [r3, #0]
   13902:	461a      	mov	r2, r3
   13904:	687b      	ldr	r3, [r7, #4]
   13906:	4413      	add	r3, r2
   13908:	681b      	ldr	r3, [r3, #0]
   1390a:	681b      	ldr	r3, [r3, #0]
   1390c:	687a      	ldr	r2, [r7, #4]
   1390e:	6812      	ldr	r2, [r2, #0]
   13910:	3a0c      	subs	r2, #12
   13912:	6812      	ldr	r2, [r2, #0]
   13914:	4611      	mov	r1, r2
   13916:	687a      	ldr	r2, [r7, #4]
   13918:	1850      	adds	r0, r2, r1
   1391a:	687a      	ldr	r2, [r7, #4]
   1391c:	f892 2184 	ldrb.w	r2, [r2, #388]	; 0x184
   13920:	4611      	mov	r1, r2
   13922:	4798      	blx	r3
   13924:	4603      	mov	r3, r0
   13926:	4619      	mov	r1, r3
   13928:	687b      	ldr	r3, [r7, #4]
   1392a:	685b      	ldr	r3, [r3, #4]
   1392c:	461a      	mov	r2, r3
   1392e:	4620      	mov	r0, r4
   13930:	4b27      	ldr	r3, [pc, #156]	; (139d0 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x128>)
   13932:	4798      	blx	r3
   13934:	4603      	mov	r3, r0
   13936:	461a      	mov	r2, r3
   13938:	687b      	ldr	r3, [r7, #4]
   1393a:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	uint8_t localBuffer[4];
//	memcpy(localBuffer,LabelsArrayTX,4);
	memcpy(localBuffer,transmitBuffer[index],4);
   1393e:	687b      	ldr	r3, [r7, #4]
   13940:	695a      	ldr	r2, [r3, #20]
   13942:	687b      	ldr	r3, [r7, #4]
   13944:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
   13948:	009b      	lsls	r3, r3, #2
   1394a:	4413      	add	r3, r2
   1394c:	681b      	ldr	r3, [r3, #0]
   1394e:	681b      	ldr	r3, [r3, #0]
   13950:	60fb      	str	r3, [r7, #12]
//	Uint32FourBytesArray(0x1234561d,localBuffer);
//	PrepareSingleTXBuffer(TXBuffer,LabelsArrayTX);
	usb.println(" transmitting...");
   13952:	4920      	ldr	r1, [pc, #128]	; (139d4 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x12c>)
   13954:	4820      	ldr	r0, [pc, #128]	; (139d8 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   13956:	4b21      	ldr	r3, [pc, #132]	; (139dc <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   13958:	4798      	blx	r3
	cpu_irq_disable();
   1395a:	6878      	ldr	r0, [r7, #4]
   1395c:	4b20      	ldr	r3, [pc, #128]	; (139e0 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x138>)
   1395e:	4798      	blx	r3
	HI3593.TransmitCommandAndData(TXFIFO,localBuffer);
   13960:	687b      	ldr	r3, [r7, #4]
   13962:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   13966:	f107 020c 	add.w	r2, r7, #12
   1396a:	210c      	movs	r1, #12
   1396c:	4618      	mov	r0, r3
   1396e:	4b1d      	ldr	r3, [pc, #116]	; (139e4 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x13c>)
   13970:	4798      	blx	r3
	cpu_irq_enable();
   13972:	6878      	ldr	r0, [r7, #4]
   13974:	4b1c      	ldr	r3, [pc, #112]	; (139e8 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x140>)
   13976:	4798      	blx	r3
	usb.println(" Transmitted!");
   13978:	491c      	ldr	r1, [pc, #112]	; (139ec <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x144>)
   1397a:	4817      	ldr	r0, [pc, #92]	; (139d8 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   1397c:	4b17      	ldr	r3, [pc, #92]	; (139dc <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   1397e:	4798      	blx	r3
	usb.println(">");
   13980:	491b      	ldr	r1, [pc, #108]	; (139f0 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x148>)
   13982:	4815      	ldr	r0, [pc, #84]	; (139d8 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   13984:	4b15      	ldr	r3, [pc, #84]	; (139dc <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   13986:	4798      	blx	r3
	printARINCTXData(TXBuffer);
   13988:	687b      	ldr	r3, [r7, #4]
   1398a:	f203 1327 	addw	r3, r3, #295	; 0x127
   1398e:	4619      	mov	r1, r3
   13990:	6878      	ldr	r0, [r7, #4]
   13992:	4b18      	ldr	r3, [pc, #96]	; (139f4 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x14c>)
   13994:	4798      	blx	r3
	txTimeout=false;
   13996:	687b      	ldr	r3, [r7, #4]
   13998:	2200      	movs	r2, #0
   1399a:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	gpio_set_pin_level(LED0,true);
   1399e:	2101      	movs	r1, #1
   139a0:	2052      	movs	r0, #82	; 0x52
   139a2:	4b0a      	ldr	r3, [pc, #40]	; (139cc <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x124>)
   139a4:	4798      	blx	r3
	return FourBytesArray2Uint32(TXBuffer);
   139a6:	687b      	ldr	r3, [r7, #4]
   139a8:	681b      	ldr	r3, [r3, #0]
   139aa:	3b0c      	subs	r3, #12
   139ac:	681b      	ldr	r3, [r3, #0]
   139ae:	461a      	mov	r2, r3
   139b0:	687b      	ldr	r3, [r7, #4]
   139b2:	441a      	add	r2, r3
   139b4:	687b      	ldr	r3, [r7, #4]
   139b6:	f203 1327 	addw	r3, r3, #295	; 0x127
   139ba:	4619      	mov	r1, r3
   139bc:	4610      	mov	r0, r2
   139be:	4b0e      	ldr	r3, [pc, #56]	; (139f8 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x150>)
   139c0:	4798      	blx	r3
   139c2:	4603      	mov	r3, r0
}
   139c4:	4618      	mov	r0, r3
   139c6:	3714      	adds	r7, #20
   139c8:	46bd      	mov	sp, r7
   139ca:	bd90      	pop	{r4, r7, pc}
   139cc:	00013285 	.word	0x00013285
   139d0:	00013057 	.word	0x00013057
   139d4:	00020614 	.word	0x00020614
   139d8:	200090c4 	.word	0x200090c4
   139dc:	00017ee1 	.word	0x00017ee1
   139e0:	00013af9 	.word	0x00013af9
   139e4:	00014255 	.word	0x00014255
   139e8:	00013ae1 	.word	0x00013ae1
   139ec:	00020628 	.word	0x00020628
   139f0:	00020638 	.word	0x00020638
   139f4:	00013b49 	.word	0x00013b49
   139f8:	00013097 	.word	0x00013097

000139fc <_ZN15ARINC_Interface18TrasmitSingleLabelEh>:

uint8_t ARINC_Interface::TrasmitSingleLabel(uint8_t l){
   139fc:	b580      	push	{r7, lr}
   139fe:	b084      	sub	sp, #16
   13a00:	af00      	add	r7, sp, #0
   13a02:	6078      	str	r0, [r7, #4]
   13a04:	460b      	mov	r3, r1
   13a06:	70fb      	strb	r3, [r7, #3]
	gpio_set_pin_level(LED0,false);
   13a08:	2100      	movs	r1, #0
   13a0a:	2052      	movs	r0, #82	; 0x52
   13a0c:	4b1c      	ldr	r3, [pc, #112]	; (13a80 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x84>)
   13a0e:	4798      	blx	r3
	index=GetIndexTXLabelarray(l,LabelsArrayTX);
   13a10:	687b      	ldr	r3, [r7, #4]
   13a12:	681b      	ldr	r3, [r3, #0]
   13a14:	3b0c      	subs	r3, #12
   13a16:	681b      	ldr	r3, [r3, #0]
   13a18:	461a      	mov	r2, r3
   13a1a:	687b      	ldr	r3, [r7, #4]
   13a1c:	1898      	adds	r0, r3, r2
   13a1e:	687b      	ldr	r3, [r7, #4]
   13a20:	685a      	ldr	r2, [r3, #4]
   13a22:	78fb      	ldrb	r3, [r7, #3]
   13a24:	4619      	mov	r1, r3
   13a26:	4b17      	ldr	r3, [pc, #92]	; (13a84 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x88>)
   13a28:	4798      	blx	r3
   13a2a:	4603      	mov	r3, r0
   13a2c:	461a      	mov	r2, r3
   13a2e:	687b      	ldr	r3, [r7, #4]
   13a30:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	uint8_t localBuffer[4];
	//	memcpy(localBuffer,LabelsArrayTX,4);
	memcpy(localBuffer,transmitBuffer[index],4);
   13a34:	687b      	ldr	r3, [r7, #4]
   13a36:	695a      	ldr	r2, [r3, #20]
   13a38:	687b      	ldr	r3, [r7, #4]
   13a3a:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
   13a3e:	009b      	lsls	r3, r3, #2
   13a40:	4413      	add	r3, r2
   13a42:	681b      	ldr	r3, [r3, #0]
   13a44:	681b      	ldr	r3, [r3, #0]
   13a46:	60fb      	str	r3, [r7, #12]
	//	Uint32FourBytesArray(0x1234561d,localBuffer);
	//	PrepareSingleTXBuffer(TXBuffer,LabelsArrayTX);
//	usb.println(" transmitting...");
	cpu_irq_disable();
   13a48:	6878      	ldr	r0, [r7, #4]
   13a4a:	4b0f      	ldr	r3, [pc, #60]	; (13a88 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x8c>)
   13a4c:	4798      	blx	r3
	HI3593.TransmitCommandAndData(TXFIFO,localBuffer);
   13a4e:	687b      	ldr	r3, [r7, #4]
   13a50:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   13a54:	f107 020c 	add.w	r2, r7, #12
   13a58:	210c      	movs	r1, #12
   13a5a:	4618      	mov	r0, r3
   13a5c:	4b0b      	ldr	r3, [pc, #44]	; (13a8c <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x90>)
   13a5e:	4798      	blx	r3
	cpu_irq_enable();
   13a60:	6878      	ldr	r0, [r7, #4]
   13a62:	4b0b      	ldr	r3, [pc, #44]	; (13a90 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x94>)
   13a64:	4798      	blx	r3
	//usb.println(" Transmitted!");
//	usb.println(">");
	//printARINCTXData(TXBuffer);
	txTimeout=false;
   13a66:	687b      	ldr	r3, [r7, #4]
   13a68:	2200      	movs	r2, #0
   13a6a:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	gpio_set_pin_level(LED0,true);
   13a6e:	2101      	movs	r1, #1
   13a70:	2052      	movs	r0, #82	; 0x52
   13a72:	4b03      	ldr	r3, [pc, #12]	; (13a80 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x84>)
   13a74:	4798      	blx	r3
	return l;
   13a76:	78fb      	ldrb	r3, [r7, #3]
}
   13a78:	4618      	mov	r0, r3
   13a7a:	3710      	adds	r7, #16
   13a7c:	46bd      	mov	sp, r7
   13a7e:	bd80      	pop	{r7, pc}
   13a80:	00013285 	.word	0x00013285
   13a84:	00013057 	.word	0x00013057
   13a88:	00013af9 	.word	0x00013af9
   13a8c:	00014255 	.word	0x00014255
   13a90:	00013ae1 	.word	0x00013ae1

00013a94 <_ZN15ARINC_Interface16TransmitTXBufferEv>:

void	ARINC_Interface::TransmitTXBuffer(void){
   13a94:	b580      	push	{r7, lr}
   13a96:	b084      	sub	sp, #16
   13a98:	af00      	add	r7, sp, #0
   13a9a:	6078      	str	r0, [r7, #4]
	uint8_t i,l;
	for (i = 0; i <MESSAGECOUNTMAX ; i++)
   13a9c:	2300      	movs	r3, #0
   13a9e:	73fb      	strb	r3, [r7, #15]
   13aa0:	7bfb      	ldrb	r3, [r7, #15]
   13aa2:	2b1f      	cmp	r3, #31
   13aa4:	dc15      	bgt.n	13ad2 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x3e>
	{
		if (LabelsArrayTX[i]>0)
   13aa6:	687b      	ldr	r3, [r7, #4]
   13aa8:	685a      	ldr	r2, [r3, #4]
   13aaa:	7bfb      	ldrb	r3, [r7, #15]
   13aac:	4413      	add	r3, r2
   13aae:	781b      	ldrb	r3, [r3, #0]
   13ab0:	2b00      	cmp	r3, #0
   13ab2:	dd0a      	ble.n	13aca <_ZN15ARINC_Interface16TransmitTXBufferEv+0x36>
		{
			l=LabelsArrayTX[i];
   13ab4:	687b      	ldr	r3, [r7, #4]
   13ab6:	685a      	ldr	r2, [r3, #4]
   13ab8:	7bfb      	ldrb	r3, [r7, #15]
   13aba:	4413      	add	r3, r2
   13abc:	781b      	ldrb	r3, [r3, #0]
   13abe:	73bb      	strb	r3, [r7, #14]
			TrasmitSingleLabel(l);
   13ac0:	7bbb      	ldrb	r3, [r7, #14]
   13ac2:	4619      	mov	r1, r3
   13ac4:	6878      	ldr	r0, [r7, #4]
   13ac6:	4b05      	ldr	r3, [pc, #20]	; (13adc <_ZN15ARINC_Interface16TransmitTXBufferEv+0x48>)
   13ac8:	4798      	blx	r3
	for (i = 0; i <MESSAGECOUNTMAX ; i++)
   13aca:	7bfb      	ldrb	r3, [r7, #15]
   13acc:	3301      	adds	r3, #1
   13ace:	73fb      	strb	r3, [r7, #15]
   13ad0:	e7e6      	b.n	13aa0 <_ZN15ARINC_Interface16TransmitTXBufferEv+0xc>
		}
	}
}
   13ad2:	bf00      	nop
   13ad4:	3710      	adds	r7, #16
   13ad6:	46bd      	mov	sp, r7
   13ad8:	bd80      	pop	{r7, pc}
   13ada:	bf00      	nop
   13adc:	000139fd 	.word	0x000139fd

00013ae0 <_ZN15ARINC_Interface14cpu_irq_enableEv>:
	usb.println("  I = Increment Message and Transmit. Explorer Mode  - ONLY!");
	usb.println("  M = Enter Custom Message. Explorer Mode  - ONLY!");
	usb.println("  ENTER= Transmit next message. Explorer Mode  - ONLY!");
}

void	ARINC_Interface::cpu_irq_enable(void){
   13ae0:	b480      	push	{r7}
   13ae2:	b083      	sub	sp, #12
   13ae4:	af00      	add	r7, sp, #0
   13ae6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   13ae8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   13aec:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
   13aee:	bf00      	nop
   13af0:	370c      	adds	r7, #12
   13af2:	46bd      	mov	sp, r7
   13af4:	bc80      	pop	{r7}
   13af6:	4770      	bx	lr

00013af8 <_ZN15ARINC_Interface15cpu_irq_disableEv>:
void	ARINC_Interface::cpu_irq_disable(void){
   13af8:	b480      	push	{r7}
   13afa:	b083      	sub	sp, #12
   13afc:	af00      	add	r7, sp, #0
   13afe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   13b00:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   13b04:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
   13b06:	bf00      	nop
   13b08:	370c      	adds	r7, #12
   13b0a:	46bd      	mov	sp, r7
   13b0c:	bc80      	pop	{r7}
   13b0e:	4770      	bx	lr

00013b10 <_ZN15ARINC_Interface12PrintHexByteEh>:
	usb.write(&p,1);
	p=0x0D;
	usb.write(&p,1);
}
void ARINC_Interface::PrintHexByte(uint8_t c)
{
   13b10:	b580      	push	{r7, lr}
   13b12:	b082      	sub	sp, #8
   13b14:	af00      	add	r7, sp, #0
   13b16:	6078      	str	r0, [r7, #4]
   13b18:	460b      	mov	r3, r1
   13b1a:	70fb      	strb	r3, [r7, #3]
	usb<<"0x ";
   13b1c:	4906      	ldr	r1, [pc, #24]	; (13b38 <_ZN15ARINC_Interface12PrintHexByteEh+0x28>)
   13b1e:	4807      	ldr	r0, [pc, #28]	; (13b3c <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   13b20:	4b07      	ldr	r3, [pc, #28]	; (13b40 <_ZN15ARINC_Interface12PrintHexByteEh+0x30>)
   13b22:	4798      	blx	r3
	usb.println(c,HEX);
   13b24:	78fb      	ldrb	r3, [r7, #3]
   13b26:	2210      	movs	r2, #16
   13b28:	4619      	mov	r1, r3
   13b2a:	4804      	ldr	r0, [pc, #16]	; (13b3c <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   13b2c:	4b05      	ldr	r3, [pc, #20]	; (13b44 <_ZN15ARINC_Interface12PrintHexByteEh+0x34>)
   13b2e:	4798      	blx	r3
	
}
   13b30:	bf00      	nop
   13b32:	3708      	adds	r7, #8
   13b34:	46bd      	mov	sp, r7
   13b36:	bd80      	pop	{r7, pc}
   13b38:	00020ad8 	.word	0x00020ad8
   13b3c:	200090c4 	.word	0x200090c4
   13b40:	00001285 	.word	0x00001285
   13b44:	00017f15 	.word	0x00017f15

00013b48 <_ZN15ARINC_Interface16printARINCTXDataEPh>:
		usb.println("\n\rLabels 192-255:  ");
	}
	
}

void ARINC_Interface::printARINCTXData(unsigned char *array) {
   13b48:	b580      	push	{r7, lr}
   13b4a:	b084      	sub	sp, #16
   13b4c:	af00      	add	r7, sp, #0
   13b4e:	6078      	str	r0, [r7, #4]
   13b50:	6039      	str	r1, [r7, #0]
	unsigned char i;
	
	usb.println("\n\r>TX    Data:");
   13b52:	4914      	ldr	r1, [pc, #80]	; (13ba4 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x5c>)
   13b54:	4814      	ldr	r0, [pc, #80]	; (13ba8 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   13b56:	4b15      	ldr	r3, [pc, #84]	; (13bac <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   13b58:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   13b5a:	2300      	movs	r3, #0
   13b5c:	73fb      	strb	r3, [r7, #15]
   13b5e:	7bfb      	ldrb	r3, [r7, #15]
   13b60:	2b02      	cmp	r3, #2
   13b62:	dc0b      	bgt.n	13b7c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x34>
		PrintHexByte(array[i]);          // Output the data
   13b64:	7bfb      	ldrb	r3, [r7, #15]
   13b66:	683a      	ldr	r2, [r7, #0]
   13b68:	4413      	add	r3, r2
   13b6a:	781b      	ldrb	r3, [r3, #0]
   13b6c:	4619      	mov	r1, r3
   13b6e:	6878      	ldr	r0, [r7, #4]
   13b70:	4b0f      	ldr	r3, [pc, #60]	; (13bb0 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   13b72:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   13b74:	7bfb      	ldrb	r3, [r7, #15]
   13b76:	3301      	adds	r3, #1
   13b78:	73fb      	strb	r3, [r7, #15]
   13b7a:	e7f0      	b.n	13b5e <_ZN15ARINC_Interface16printARINCTXDataEPh+0x16>
	}
	usb.println("Label:");
   13b7c:	490d      	ldr	r1, [pc, #52]	; (13bb4 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x6c>)
   13b7e:	480a      	ldr	r0, [pc, #40]	; (13ba8 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   13b80:	4b0a      	ldr	r3, [pc, #40]	; (13bac <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   13b82:	4798      	blx	r3
	PrintHexByte(array[3]);             // Output the label data
   13b84:	683b      	ldr	r3, [r7, #0]
   13b86:	3303      	adds	r3, #3
   13b88:	781b      	ldrb	r3, [r3, #0]
   13b8a:	4619      	mov	r1, r3
   13b8c:	6878      	ldr	r0, [r7, #4]
   13b8e:	4b08      	ldr	r3, [pc, #32]	; (13bb0 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   13b90:	4798      	blx	r3
	
	//crlf();
	usb.println(">");
   13b92:	4909      	ldr	r1, [pc, #36]	; (13bb8 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x70>)
   13b94:	4804      	ldr	r0, [pc, #16]	; (13ba8 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   13b96:	4b05      	ldr	r3, [pc, #20]	; (13bac <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   13b98:	4798      	blx	r3
}
   13b9a:	bf00      	nop
   13b9c:	3710      	adds	r7, #16
   13b9e:	46bd      	mov	sp, r7
   13ba0:	bd80      	pop	{r7, pc}
   13ba2:	bf00      	nop
   13ba4:	00020ca8 	.word	0x00020ca8
   13ba8:	200090c4 	.word	0x200090c4
   13bac:	00017ee1 	.word	0x00017ee1
   13bb0:	00013b11 	.word	0x00013b11
   13bb4:	00020cb8 	.word	0x00020cb8
   13bb8:	00020638 	.word	0x00020638

00013bbc <_ZN15ARINC_Interface20CheckMessageCountMaxEv>:
		default: break;
	}
}
*/
void ARINC_Interface::CheckMessageCountMax(void)
{
   13bbc:	b480      	push	{r7}
   13bbe:	b083      	sub	sp, #12
   13bc0:	af00      	add	r7, sp, #0
   13bc2:	6078      	str	r0, [r7, #4]
	MessageCount++;
   13bc4:	687b      	ldr	r3, [r7, #4]
   13bc6:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
   13bca:	3301      	adds	r3, #1
   13bcc:	b2da      	uxtb	r2, r3
   13bce:	687b      	ldr	r3, [r7, #4]
   13bd0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	MessageCount=MessageCount%MESSAGECOUNTMAX;
   13bd4:	687b      	ldr	r3, [r7, #4]
   13bd6:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
   13bda:	f003 031f 	and.w	r3, r3, #31
   13bde:	b2da      	uxtb	r2, r3
   13be0:	687b      	ldr	r3, [r7, #4]
   13be2:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155

}
   13be6:	bf00      	nop
   13be8:	370c      	adds	r7, #12
   13bea:	46bd      	mov	sp, r7
   13bec:	bc80      	pop	{r7}
   13bee:	4770      	bx	lr

00013bf0 <_ZN15ARINC_Interface8HW_RESETEv>:
	//crlf();
	usb.println("\n\r");
	usb.println(">");
}

void ARINC_Interface::HW_RESET(void){
   13bf0:	b580      	push	{r7, lr}
   13bf2:	b082      	sub	sp, #8
   13bf4:	af00      	add	r7, sp, #0
   13bf6:	6078      	str	r0, [r7, #4]
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
   13bf8:	2001      	movs	r0, #1
   13bfa:	4b03      	ldr	r3, [pc, #12]	; (13c08 <_ZN15ARINC_Interface8HW_RESETEv+0x18>)
   13bfc:	4798      	blx	r3
	//gpio_set_pin_level(MR,false);
}
   13bfe:	bf00      	nop
   13c00:	3708      	adds	r7, #8
   13c02:	46bd      	mov	sp, r7
   13c04:	bd80      	pop	{r7, pc}
   13c06:	bf00      	nop
   13c08:	00005f6d 	.word	0x00005f6d

00013c0c <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

 ARINC_Interface	arinc;
   13c0c:	b580      	push	{r7, lr}
   13c0e:	b082      	sub	sp, #8
   13c10:	af00      	add	r7, sp, #0
   13c12:	6078      	str	r0, [r7, #4]
   13c14:	6039      	str	r1, [r7, #0]
   13c16:	687b      	ldr	r3, [r7, #4]
   13c18:	2b01      	cmp	r3, #1
   13c1a:	d114      	bne.n	13c46 <_Z41__static_initialization_and_destruction_0ii+0x3a>
   13c1c:	683b      	ldr	r3, [r7, #0]
   13c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13c22:	4293      	cmp	r3, r2
   13c24:	d10f      	bne.n	13c46 <_Z41__static_initialization_and_destruction_0ii+0x3a>
	CDC_Class& operator=( const CDC_Class &c );
	

}; //CDC_Class

static	CDC_Class	usb;
   13c26:	480a      	ldr	r0, [pc, #40]	; (13c50 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13c28:	4b0a      	ldr	r3, [pc, #40]	; (13c54 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   13c2a:	4798      	blx	r3
   13c2c:	4a0a      	ldr	r2, [pc, #40]	; (13c58 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   13c2e:	490b      	ldr	r1, [pc, #44]	; (13c5c <_Z41__static_initialization_and_destruction_0ii+0x50>)
   13c30:	4807      	ldr	r0, [pc, #28]	; (13c50 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13c32:	4b0b      	ldr	r3, [pc, #44]	; (13c60 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   13c34:	4798      	blx	r3
   13c36:	480b      	ldr	r0, [pc, #44]	; (13c64 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   13c38:	4b0b      	ldr	r3, [pc, #44]	; (13c68 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   13c3a:	4798      	blx	r3
   13c3c:	4a06      	ldr	r2, [pc, #24]	; (13c58 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   13c3e:	490b      	ldr	r1, [pc, #44]	; (13c6c <_Z41__static_initialization_and_destruction_0ii+0x60>)
   13c40:	4808      	ldr	r0, [pc, #32]	; (13c64 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   13c42:	4b07      	ldr	r3, [pc, #28]	; (13c60 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   13c44:	4798      	blx	r3
   13c46:	bf00      	nop
   13c48:	3708      	adds	r7, #8
   13c4a:	46bd      	mov	sp, r7
   13c4c:	bd80      	pop	{r7, pc}
   13c4e:	bf00      	nop
   13c50:	200090c4 	.word	0x200090c4
   13c54:	000178dd 	.word	0x000178dd
   13c58:	20000000 	.word	0x20000000
   13c5c:	00017925 	.word	0x00017925
   13c60:	0001949d 	.word	0x0001949d
   13c64:	20009128 	.word	0x20009128
   13c68:	0001337d 	.word	0x0001337d
   13c6c:	00013475 	.word	0x00013475

00013c70 <_GLOBAL__sub_I_HexSymbols>:
   13c70:	b580      	push	{r7, lr}
   13c72:	af00      	add	r7, sp, #0
   13c74:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13c78:	2001      	movs	r0, #1
   13c7a:	4b01      	ldr	r3, [pc, #4]	; (13c80 <_GLOBAL__sub_I_HexSymbols+0x10>)
   13c7c:	4798      	blx	r3
   13c7e:	bd80      	pop	{r7, pc}
   13c80:	00013c0d 	.word	0x00013c0d

00013c84 <hri_port_set_OUT_reg>:
{
   13c84:	b480      	push	{r7}
   13c86:	b085      	sub	sp, #20
   13c88:	af00      	add	r7, sp, #0
   13c8a:	60f8      	str	r0, [r7, #12]
   13c8c:	460b      	mov	r3, r1
   13c8e:	607a      	str	r2, [r7, #4]
   13c90:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   13c92:	7afb      	ldrb	r3, [r7, #11]
   13c94:	68fa      	ldr	r2, [r7, #12]
   13c96:	01db      	lsls	r3, r3, #7
   13c98:	4413      	add	r3, r2
   13c9a:	3318      	adds	r3, #24
   13c9c:	687a      	ldr	r2, [r7, #4]
   13c9e:	601a      	str	r2, [r3, #0]
}
   13ca0:	bf00      	nop
   13ca2:	3714      	adds	r7, #20
   13ca4:	46bd      	mov	sp, r7
   13ca6:	bc80      	pop	{r7}
   13ca8:	4770      	bx	lr

00013caa <hri_port_clear_OUT_reg>:
{
   13caa:	b480      	push	{r7}
   13cac:	b085      	sub	sp, #20
   13cae:	af00      	add	r7, sp, #0
   13cb0:	60f8      	str	r0, [r7, #12]
   13cb2:	460b      	mov	r3, r1
   13cb4:	607a      	str	r2, [r7, #4]
   13cb6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   13cb8:	7afb      	ldrb	r3, [r7, #11]
   13cba:	68fa      	ldr	r2, [r7, #12]
   13cbc:	01db      	lsls	r3, r3, #7
   13cbe:	4413      	add	r3, r2
   13cc0:	3314      	adds	r3, #20
   13cc2:	687a      	ldr	r2, [r7, #4]
   13cc4:	601a      	str	r2, [r3, #0]
}
   13cc6:	bf00      	nop
   13cc8:	3714      	adds	r7, #20
   13cca:	46bd      	mov	sp, r7
   13ccc:	bc80      	pop	{r7}
   13cce:	4770      	bx	lr

00013cd0 <_gpio_set_level>:
{
   13cd0:	b580      	push	{r7, lr}
   13cd2:	b082      	sub	sp, #8
   13cd4:	af00      	add	r7, sp, #0
   13cd6:	4603      	mov	r3, r0
   13cd8:	6039      	str	r1, [r7, #0]
   13cda:	71fb      	strb	r3, [r7, #7]
   13cdc:	4613      	mov	r3, r2
   13cde:	71bb      	strb	r3, [r7, #6]
	if (level) {
   13ce0:	79bb      	ldrb	r3, [r7, #6]
   13ce2:	2b00      	cmp	r3, #0
   13ce4:	d006      	beq.n	13cf4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   13ce6:	79fb      	ldrb	r3, [r7, #7]
   13ce8:	683a      	ldr	r2, [r7, #0]
   13cea:	4619      	mov	r1, r3
   13cec:	4806      	ldr	r0, [pc, #24]	; (13d08 <_gpio_set_level+0x38>)
   13cee:	4b07      	ldr	r3, [pc, #28]	; (13d0c <_gpio_set_level+0x3c>)
   13cf0:	4798      	blx	r3
}
   13cf2:	e005      	b.n	13d00 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   13cf4:	79fb      	ldrb	r3, [r7, #7]
   13cf6:	683a      	ldr	r2, [r7, #0]
   13cf8:	4619      	mov	r1, r3
   13cfa:	4803      	ldr	r0, [pc, #12]	; (13d08 <_gpio_set_level+0x38>)
   13cfc:	4b04      	ldr	r3, [pc, #16]	; (13d10 <_gpio_set_level+0x40>)
   13cfe:	4798      	blx	r3
}
   13d00:	bf00      	nop
   13d02:	3708      	adds	r7, #8
   13d04:	46bd      	mov	sp, r7
   13d06:	bd80      	pop	{r7, pc}
   13d08:	41008000 	.word	0x41008000
   13d0c:	00013c85 	.word	0x00013c85
   13d10:	00013cab 	.word	0x00013cab

00013d14 <gpio_set_pin_level>:
{
   13d14:	b580      	push	{r7, lr}
   13d16:	b082      	sub	sp, #8
   13d18:	af00      	add	r7, sp, #0
   13d1a:	4603      	mov	r3, r0
   13d1c:	460a      	mov	r2, r1
   13d1e:	71fb      	strb	r3, [r7, #7]
   13d20:	4613      	mov	r3, r2
   13d22:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   13d24:	79fb      	ldrb	r3, [r7, #7]
   13d26:	115b      	asrs	r3, r3, #5
   13d28:	b2d8      	uxtb	r0, r3
   13d2a:	79fb      	ldrb	r3, [r7, #7]
   13d2c:	f003 031f 	and.w	r3, r3, #31
   13d30:	2201      	movs	r2, #1
   13d32:	fa02 f303 	lsl.w	r3, r2, r3
   13d36:	79ba      	ldrb	r2, [r7, #6]
   13d38:	4619      	mov	r1, r3
   13d3a:	4b03      	ldr	r3, [pc, #12]	; (13d48 <gpio_set_pin_level+0x34>)
   13d3c:	4798      	blx	r3
}
   13d3e:	bf00      	nop
   13d40:	3708      	adds	r7, #8
   13d42:	46bd      	mov	sp, r7
   13d44:	bd80      	pop	{r7, pc}
   13d46:	bf00      	nop
   13d48:	00013cd1 	.word	0x00013cd1

00013d4c <_ZN15Holt_3593_ClassC1Ev>:
#include "Holt_3593_Class.h"
#include "ARINC_Interface.h"
#include "string.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
   13d4c:	b580      	push	{r7, lr}
   13d4e:	b082      	sub	sp, #8
   13d50:	af00      	add	r7, sp, #0
   13d52:	6078      	str	r0, [r7, #4]
   13d54:	687b      	ldr	r3, [r7, #4]
   13d56:	4618      	mov	r0, r3
   13d58:	4b03      	ldr	r3, [pc, #12]	; (13d68 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
   13d5a:	4798      	blx	r3
{
} //Holt_3593_Class
   13d5c:	687b      	ldr	r3, [r7, #4]
   13d5e:	4618      	mov	r0, r3
   13d60:	3708      	adds	r7, #8
   13d62:	46bd      	mov	sp, r7
   13d64:	bd80      	pop	{r7, pc}
   13d66:	bf00      	nop
   13d68:	00015969 	.word	0x00015969

00013d6c <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
   13d6c:	b580      	push	{r7, lr}
   13d6e:	b082      	sub	sp, #8
   13d70:	af00      	add	r7, sp, #0
   13d72:	6078      	str	r0, [r7, #4]
   13d74:	687b      	ldr	r3, [r7, #4]
   13d76:	4618      	mov	r0, r3
   13d78:	4b03      	ldr	r3, [pc, #12]	; (13d88 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
   13d7a:	4798      	blx	r3
{
} //~Holt_3593_Class
   13d7c:	687b      	ldr	r3, [r7, #4]
   13d7e:	4618      	mov	r0, r3
   13d80:	3708      	adds	r7, #8
   13d82:	46bd      	mov	sp, r7
   13d84:	bd80      	pop	{r7, pc}
   13d86:	bf00      	nop
   13d88:	00015989 	.word	0x00015989

00013d8c <_ZN15Holt_3593_Class4InitEv>:

// Priority Label-1 Table     
unsigned char LabelPriority2 [3];

  
 uint8_t	Holt_3593_Class::Init(void){
   13d8c:	b590      	push	{r4, r7, lr}
   13d8e:	b089      	sub	sp, #36	; 0x24
   13d90:	af02      	add	r7, sp, #8
   13d92:	6078      	str	r0, [r7, #4]
	 
	 spi.SetDescriptor(&SPI_HI3593);
   13d94:	687b      	ldr	r3, [r7, #4]
   13d96:	492c      	ldr	r1, [pc, #176]	; (13e48 <_ZN15Holt_3593_Class4InitEv+0xbc>)
   13d98:	4618      	mov	r0, r3
   13d9a:	4b2c      	ldr	r3, [pc, #176]	; (13e4c <_ZN15Holt_3593_Class4InitEv+0xc0>)
   13d9c:	4798      	blx	r3
	  spi.init();
   13d9e:	687b      	ldr	r3, [r7, #4]
   13da0:	4618      	mov	r0, r3
   13da2:	4b2b      	ldr	r3, [pc, #172]	; (13e50 <_ZN15Holt_3593_Class4InitEv+0xc4>)
   13da4:	4798      	blx	r3
	 uint8_t	status=	Init3593(ACLKDIV,  // ARINC clock divisor
	 TMODE,    // Transmit mode. Set for "send as soon as possible"
	 SELFTEST_OFF, // Selftest defined by Mode switches
	 BITRATE,    // Arinc speed and if Parity is enabled by the switch
	 TFLIP );
   13da6:	2340      	movs	r3, #64	; 0x40
   13da8:	9301      	str	r3, [sp, #4]
   13daa:	2300      	movs	r3, #0
   13dac:	9300      	str	r3, [sp, #0]
   13dae:	2300      	movs	r3, #0
   13db0:	2201      	movs	r2, #1
   13db2:	2104      	movs	r1, #4
   13db4:	6878      	ldr	r0, [r7, #4]
   13db6:	4c27      	ldr	r4, [pc, #156]	; (13e54 <_ZN15Holt_3593_Class4InitEv+0xc8>)
   13db8:	47a0      	blx	r4
   13dba:	4603      	mov	r3, r0
   13dbc:	73fb      	strb	r3, [r7, #15]

	for (int i=0;i<32;i++)
   13dbe:	2300      	movs	r3, #0
   13dc0:	617b      	str	r3, [r7, #20]
   13dc2:	697b      	ldr	r3, [r7, #20]
   13dc4:	2b1f      	cmp	r3, #31
   13dc6:	dc27      	bgt.n	13e18 <_ZN15Holt_3593_Class4InitEv+0x8c>
	{
// 		LabelArray_2[i]=FlipByte(LabelArray_1[i]);
// 		LabelArray_1[i]=LabelArray_2[i];
		LabelArray_2[i]=LabelArray_1[i];
   13dc8:	4a23      	ldr	r2, [pc, #140]	; (13e58 <_ZN15Holt_3593_Class4InitEv+0xcc>)
   13dca:	697b      	ldr	r3, [r7, #20]
   13dcc:	4413      	add	r3, r2
   13dce:	7819      	ldrb	r1, [r3, #0]
   13dd0:	4a22      	ldr	r2, [pc, #136]	; (13e5c <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13dd2:	697b      	ldr	r3, [r7, #20]
   13dd4:	4413      	add	r3, r2
   13dd6:	460a      	mov	r2, r1
   13dd8:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayRX1[i]=LabelArray_2[i];
   13dda:	4b21      	ldr	r3, [pc, #132]	; (13e60 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   13ddc:	689a      	ldr	r2, [r3, #8]
   13dde:	697b      	ldr	r3, [r7, #20]
   13de0:	4413      	add	r3, r2
   13de2:	491e      	ldr	r1, [pc, #120]	; (13e5c <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13de4:	697a      	ldr	r2, [r7, #20]
   13de6:	440a      	add	r2, r1
   13de8:	7812      	ldrb	r2, [r2, #0]
   13dea:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayRX2[i]=LabelArray_2[i];
   13dec:	4b1c      	ldr	r3, [pc, #112]	; (13e60 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   13dee:	68da      	ldr	r2, [r3, #12]
   13df0:	697b      	ldr	r3, [r7, #20]
   13df2:	4413      	add	r3, r2
   13df4:	4919      	ldr	r1, [pc, #100]	; (13e5c <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13df6:	697a      	ldr	r2, [r7, #20]
   13df8:	440a      	add	r2, r1
   13dfa:	7812      	ldrb	r2, [r2, #0]
   13dfc:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayTX[i]=LabelArray_2[i];
   13dfe:	4b18      	ldr	r3, [pc, #96]	; (13e60 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   13e00:	685a      	ldr	r2, [r3, #4]
   13e02:	697b      	ldr	r3, [r7, #20]
   13e04:	4413      	add	r3, r2
   13e06:	4915      	ldr	r1, [pc, #84]	; (13e5c <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13e08:	697a      	ldr	r2, [r7, #20]
   13e0a:	440a      	add	r2, r1
   13e0c:	7812      	ldrb	r2, [r2, #0]
   13e0e:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<32;i++)
   13e10:	697b      	ldr	r3, [r7, #20]
   13e12:	3301      	adds	r3, #1
   13e14:	617b      	str	r3, [r7, #20]
   13e16:	e7d4      	b.n	13dc2 <_ZN15Holt_3593_Class4InitEv+0x36>
	}
	for (int i=0;i<3;i++)
   13e18:	2300      	movs	r3, #0
   13e1a:	613b      	str	r3, [r7, #16]
   13e1c:	693b      	ldr	r3, [r7, #16]
   13e1e:	2b02      	cmp	r3, #2
   13e20:	dc0c      	bgt.n	13e3c <_ZN15Holt_3593_Class4InitEv+0xb0>
	{
		//LabelPriority2[i]=FlipByte(LabelPriority1[i]);
		LabelPriority2[i]=LabelPriority1[i];
   13e22:	4a10      	ldr	r2, [pc, #64]	; (13e64 <_ZN15Holt_3593_Class4InitEv+0xd8>)
   13e24:	693b      	ldr	r3, [r7, #16]
   13e26:	4413      	add	r3, r2
   13e28:	7819      	ldrb	r1, [r3, #0]
   13e2a:	4a0f      	ldr	r2, [pc, #60]	; (13e68 <_ZN15Holt_3593_Class4InitEv+0xdc>)
   13e2c:	693b      	ldr	r3, [r7, #16]
   13e2e:	4413      	add	r3, r2
   13e30:	460a      	mov	r2, r1
   13e32:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<3;i++)
   13e34:	693b      	ldr	r3, [r7, #16]
   13e36:	3301      	adds	r3, #1
   13e38:	613b      	str	r3, [r7, #16]
   13e3a:	e7ef      	b.n	13e1c <_ZN15Holt_3593_Class4InitEv+0x90>
	}
	//memcpy(arinc.LabelsArrayRX1,LabelArray_1,LABEL_ARRAY_SIZE);	
//	memcpy(arinc.LabelsArrayRX2,LabelArray_2,LABEL_ARRAY_SIZE);	
	//memcpy(arinc.LabelsArrayTX,LabelArray_2,LABEL_ARRAY_SIZE);		
	return	status;
   13e3c:	7bfb      	ldrb	r3, [r7, #15]
 } 
   13e3e:	4618      	mov	r0, r3
   13e40:	371c      	adds	r7, #28
   13e42:	46bd      	mov	sp, r7
   13e44:	bd90      	pop	{r4, r7, pc}
   13e46:	bf00      	nop
   13e48:	2000a940 	.word	0x2000a940
   13e4c:	000159d5 	.word	0x000159d5
   13e50:	0001599d 	.word	0x0001599d
   13e54:	00013e6d 	.word	0x00013e6d
   13e58:	000210c4 	.word	0x000210c4
   13e5c:	20009404 	.word	0x20009404
   13e60:	20009128 	.word	0x20009128
   13e64:	20000244 	.word	0x20000244
   13e68:	20009424 	.word	0x20009424

00013e6c <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 
 // ------------------------------------------------------------------
 // Initialize the HI-3593
 // ------------------------------------------------------------------
 uint8_t Holt_3593_Class::Init3593(uint8_t AclkDiv, uint8_t tmode, uint8_t selftest, uint8_t arate, uint8_t tflip )
 {
   13e6c:	b580      	push	{r7, lr}
   13e6e:	b084      	sub	sp, #16
   13e70:	af00      	add	r7, sp, #0
   13e72:	6078      	str	r0, [r7, #4]
   13e74:	4608      	mov	r0, r1
   13e76:	4611      	mov	r1, r2
   13e78:	461a      	mov	r2, r3
   13e7a:	4603      	mov	r3, r0
   13e7c:	70fb      	strb	r3, [r7, #3]
   13e7e:	460b      	mov	r3, r1
   13e80:	70bb      	strb	r3, [r7, #2]
   13e82:	4613      	mov	r3, r2
   13e84:	707b      	strb	r3, [r7, #1]
	 unsigned char cmd=0;
   13e86:	2300      	movs	r3, #0
   13e88:	73fb      	strb	r3, [r7, #15]
	 
	 W_Command(RESETCMD);                // Reset the HI-3593
   13e8a:	2104      	movs	r1, #4
   13e8c:	6878      	ldr	r0, [r7, #4]
   13e8e:	4b18      	ldr	r3, [pc, #96]	; (13ef0 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x84>)
   13e90:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
   13e92:	78fb      	ldrb	r3, [r7, #3]
   13e94:	461a      	mov	r2, r3
   13e96:	2138      	movs	r1, #56	; 0x38
   13e98:	6878      	ldr	r0, [r7, #4]
   13e9a:	4b16      	ldr	r3, [pc, #88]	; (13ef4 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   13e9c:	4798      	blx	r3
	 cmd =  arate;
   13e9e:	7e3b      	ldrb	r3, [r7, #24]
   13ea0:	73fb      	strb	r3, [r7, #15]
	 cmd |= selftest << 4;
   13ea2:	787b      	ldrb	r3, [r7, #1]
   13ea4:	011b      	lsls	r3, r3, #4
   13ea6:	b25a      	sxtb	r2, r3
   13ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13eac:	4313      	orrs	r3, r2
   13eae:	b25b      	sxtb	r3, r3
   13eb0:	73fb      	strb	r3, [r7, #15]
	 cmd |= tmode << 5;
   13eb2:	78bb      	ldrb	r3, [r7, #2]
   13eb4:	015b      	lsls	r3, r3, #5
   13eb6:	b25a      	sxtb	r2, r3
   13eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13ebc:	4313      	orrs	r3, r2
   13ebe:	b25b      	sxtb	r3, r3
   13ec0:	73fb      	strb	r3, [r7, #15]
	 cmd |= tflip << 6;                  // TFLIP on
   13ec2:	7f3b      	ldrb	r3, [r7, #28]
   13ec4:	019b      	lsls	r3, r3, #6
   13ec6:	b25a      	sxtb	r2, r3
   13ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13ecc:	4313      	orrs	r3, r2
   13ece:	b25b      	sxtb	r3, r3
   13ed0:	73fb      	strb	r3, [r7, #15]
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
   13ed2:	7bfb      	ldrb	r3, [r7, #15]
   13ed4:	461a      	mov	r2, r3
   13ed6:	2108      	movs	r1, #8
   13ed8:	6878      	ldr	r0, [r7, #4]
   13eda:	4b06      	ldr	r3, [pc, #24]	; (13ef4 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   13edc:	4798      	blx	r3
	 return R_Register (R_TSR);
   13ede:	2180      	movs	r1, #128	; 0x80
   13ee0:	6878      	ldr	r0, [r7, #4]
   13ee2:	4b05      	ldr	r3, [pc, #20]	; (13ef8 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x8c>)
   13ee4:	4798      	blx	r3
   13ee6:	4603      	mov	r3, r0
	 
	 
 }
   13ee8:	4618      	mov	r0, r3
   13eea:	3710      	adds	r7, #16
   13eec:	46bd      	mov	sp, r7
   13eee:	bd80      	pop	{r7, pc}
   13ef0:	00014301 	.word	0x00014301
   13ef4:	00014355 	.word	0x00014355
   13ef8:	000143c9 	.word	0x000143c9

00013efc <_ZN15Holt_3593_Class4openEv>:
 
 void Holt_3593_Class::open(){
   13efc:	b580      	push	{r7, lr}
   13efe:	b082      	sub	sp, #8
   13f00:	af00      	add	r7, sp, #0
   13f02:	6078      	str	r0, [r7, #4]
	 	spi.enable();
   13f04:	687b      	ldr	r3, [r7, #4]
   13f06:	4618      	mov	r0, r3
   13f08:	4b04      	ldr	r3, [pc, #16]	; (13f1c <_ZN15Holt_3593_Class4openEv+0x20>)
   13f0a:	4798      	blx	r3
		 SS_Low();
   13f0c:	6878      	ldr	r0, [r7, #4]
   13f0e:	4b04      	ldr	r3, [pc, #16]	; (13f20 <_ZN15Holt_3593_Class4openEv+0x24>)
   13f10:	4798      	blx	r3
 }
   13f12:	bf00      	nop
   13f14:	3708      	adds	r7, #8
   13f16:	46bd      	mov	sp, r7
   13f18:	bd80      	pop	{r7, pc}
   13f1a:	bf00      	nop
   13f1c:	000159f9 	.word	0x000159f9
   13f20:	00014411 	.word	0x00014411

00013f24 <_ZN15Holt_3593_Class5closeEv>:
  void Holt_3593_Class::close(){
   13f24:	b580      	push	{r7, lr}
   13f26:	b082      	sub	sp, #8
   13f28:	af00      	add	r7, sp, #0
   13f2a:	6078      	str	r0, [r7, #4]
	    SS_High();
   13f2c:	6878      	ldr	r0, [r7, #4]
   13f2e:	4b05      	ldr	r3, [pc, #20]	; (13f44 <_ZN15Holt_3593_Class5closeEv+0x20>)
   13f30:	4798      	blx	r3
	  spi.disable();
   13f32:	687b      	ldr	r3, [r7, #4]
   13f34:	4618      	mov	r0, r3
   13f36:	4b04      	ldr	r3, [pc, #16]	; (13f48 <_ZN15Holt_3593_Class5closeEv+0x24>)
   13f38:	4798      	blx	r3
	
  }
   13f3a:	bf00      	nop
   13f3c:	3708      	adds	r7, #8
   13f3e:	46bd      	mov	sp, r7
   13f40:	bd80      	pop	{r7, pc}
   13f42:	bf00      	nop
   13f44:	0001442d 	.word	0x0001442d
   13f48:	00015abd 	.word	0x00015abd

00013f4c <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
 
// ------------------------------------------------------------------
//  SPI function to load 8 bits of label data
// ------------------------------------------------------------------   
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
   13f4c:	b580      	push	{r7, lr}
   13f4e:	b084      	sub	sp, #16
   13f50:	af00      	add	r7, sp, #0
   13f52:	6078      	str	r0, [r7, #4]
   13f54:	460b      	mov	r3, r1
   13f56:	70fb      	strb	r3, [r7, #3]
   13f58:	4613      	mov	r3, r2
   13f5a:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;    
 // rxbyte = Get_Byte();         // clear SPI status register
  uint8_t	p(txbyte);
   13f5c:	78fb      	ldrb	r3, [r7, #3]
   13f5e:	73fb      	strb	r3, [r7, #15]
  Send_Byte(p)    ;   // write Data Register to begin transfer  
   13f60:	7bfb      	ldrb	r3, [r7, #15]
   13f62:	4619      	mov	r1, r3
   13f64:	6878      	ldr	r0, [r7, #4]
   13f66:	4b0b      	ldr	r3, [pc, #44]	; (13f94 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x48>)
   13f68:	4798      	blx	r3
	  
  if (return_when_done) {  // optional wait for SPIF flag
   13f6a:	78bb      	ldrb	r3, [r7, #2]
   13f6c:	2b00      	cmp	r3, #0
   13f6e:	d00a      	beq.n	13f86 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    while (!spi.isSPIReady());     
   13f70:	687b      	ldr	r3, [r7, #4]
   13f72:	4618      	mov	r0, r3
   13f74:	4b08      	ldr	r3, [pc, #32]	; (13f98 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x4c>)
   13f76:	4798      	blx	r3
   13f78:	4603      	mov	r3, r0
   13f7a:	f083 0301 	eor.w	r3, r3, #1
   13f7e:	b2db      	uxtb	r3, r3
   13f80:	2b00      	cmp	r3, #0
   13f82:	d000      	beq.n	13f86 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
   13f84:	e7f4      	b.n	13f70 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x24>
  }
  return rxbyte = txbyte;
   13f86:	78fb      	ldrb	r3, [r7, #3]
   13f88:	73bb      	strb	r3, [r7, #14]
   13f8a:	7bbb      	ldrb	r3, [r7, #14]
  
}
   13f8c:	4618      	mov	r0, r3
   13f8e:	3710      	adds	r7, #16
   13f90:	46bd      	mov	sp, r7
   13f92:	bd80      	pop	{r7, pc}
   13f94:	00014071 	.word	0x00014071
   13f98:	00015add 	.word	0x00015add

00013f9c <_ZN15Holt_3593_Class19InitReceiver1LabelsEv>:

// ------------------------------------------------------------------
//  Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------                              */
void Holt_3593_Class::InitReceiver1Labels(void)
{
   13f9c:	b580      	push	{r7, lr}
   13f9e:	b084      	sub	sp, #16
   13fa0:	af00      	add	r7, sp, #0
   13fa2:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
  open();
   13fa4:	6878      	ldr	r0, [r7, #4]
   13fa6:	4b14      	ldr	r3, [pc, #80]	; (13ff8 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x5c>)
   13fa8:	4798      	blx	r3

  dummy = txrx8bits_8(0x14,1);  
   13faa:	2201      	movs	r2, #1
   13fac:	2114      	movs	r1, #20
   13fae:	6878      	ldr	r0, [r7, #4]
   13fb0:	4b12      	ldr	r3, [pc, #72]	; (13ffc <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x60>)
   13fb2:	4798      	blx	r3
   13fb4:	4603      	mov	r3, r0
   13fb6:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   13fb8:	231f      	movs	r3, #31
   13fba:	73fb      	strb	r3, [r7, #15]
   13fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13fc0:	2b00      	cmp	r3, #0
   13fc2:	db11      	blt.n	13fe8 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_1[i],1);       
   13fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13fc8:	4a0d      	ldr	r2, [pc, #52]	; (14000 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x64>)
   13fca:	5cd3      	ldrb	r3, [r2, r3]
   13fcc:	2201      	movs	r2, #1
   13fce:	4619      	mov	r1, r3
   13fd0:	6878      	ldr	r0, [r7, #4]
   13fd2:	4b0a      	ldr	r3, [pc, #40]	; (13ffc <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x60>)
   13fd4:	4798      	blx	r3
   13fd6:	4603      	mov	r3, r0
   13fd8:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   13fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13fde:	b2db      	uxtb	r3, r3
   13fe0:	3b01      	subs	r3, #1
   13fe2:	b2db      	uxtb	r3, r3
   13fe4:	73fb      	strb	r3, [r7, #15]
   13fe6:	e7e9      	b.n	13fbc <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x20>
  }    
 	  
	close();
   13fe8:	6878      	ldr	r0, [r7, #4]
   13fea:	4b06      	ldr	r3, [pc, #24]	; (14004 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x68>)
   13fec:	4798      	blx	r3
}
   13fee:	bf00      	nop
   13ff0:	3710      	adds	r7, #16
   13ff2:	46bd      	mov	sp, r7
   13ff4:	bd80      	pop	{r7, pc}
   13ff6:	bf00      	nop
   13ff8:	00013efd 	.word	0x00013efd
   13ffc:	00013f4d 	.word	0x00013f4d
   14000:	000210c4 	.word	0x000210c4
   14004:	00013f25 	.word	0x00013f25

00014008 <_ZN15Holt_3593_Class18InitPriorityLabelsEv>:
void Holt_3593_Class::InitPriorityLabels(void)
{
   14008:	b580      	push	{r7, lr}
   1400a:	b082      	sub	sp, #8
   1400c:	af00      	add	r7, sp, #0
   1400e:	6078      	str	r0, [r7, #4]
	
	// Priorty Labels
	TXBuffer[0] =  LabelPriority1[0];   // filter 3
   14010:	4b14      	ldr	r3, [pc, #80]	; (14064 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x5c>)
   14012:	781a      	ldrb	r2, [r3, #0]
   14014:	687b      	ldr	r3, [r7, #4]
   14016:	765a      	strb	r2, [r3, #25]
	TXBuffer[1] =  LabelPriority1[1];   // filter 2
   14018:	4b12      	ldr	r3, [pc, #72]	; (14064 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x5c>)
   1401a:	785a      	ldrb	r2, [r3, #1]
   1401c:	687b      	ldr	r3, [r7, #4]
   1401e:	769a      	strb	r2, [r3, #26]
	TXBuffer[2] =  LabelPriority1[2];   // filter 1
   14020:	4b10      	ldr	r3, [pc, #64]	; (14064 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x5c>)
   14022:	789a      	ldrb	r2, [r3, #2]
   14024:	687b      	ldr	r3, [r7, #4]
   14026:	76da      	strb	r2, [r3, #27]
	TransmitCommandAndData(W_PL1Match,TXBuffer);  // initialize the Receiver1 PL match registers
   14028:	687b      	ldr	r3, [r7, #4]
   1402a:	3319      	adds	r3, #25
   1402c:	461a      	mov	r2, r3
   1402e:	2118      	movs	r1, #24
   14030:	6878      	ldr	r0, [r7, #4]
   14032:	4b0d      	ldr	r3, [pc, #52]	; (14068 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x60>)
   14034:	4798      	blx	r3
	
	TXBuffer[0] =  LabelPriority2[0];   // filter 3
   14036:	4b0d      	ldr	r3, [pc, #52]	; (1406c <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x64>)
   14038:	781a      	ldrb	r2, [r3, #0]
   1403a:	687b      	ldr	r3, [r7, #4]
   1403c:	765a      	strb	r2, [r3, #25]
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
   1403e:	4b0b      	ldr	r3, [pc, #44]	; (1406c <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x64>)
   14040:	785a      	ldrb	r2, [r3, #1]
   14042:	687b      	ldr	r3, [r7, #4]
   14044:	769a      	strb	r2, [r3, #26]
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
   14046:	4b09      	ldr	r3, [pc, #36]	; (1406c <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x64>)
   14048:	789a      	ldrb	r2, [r3, #2]
   1404a:	687b      	ldr	r3, [r7, #4]
   1404c:	76da      	strb	r2, [r3, #27]
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
   1404e:	687b      	ldr	r3, [r7, #4]
   14050:	3319      	adds	r3, #25
   14052:	461a      	mov	r2, r3
   14054:	212c      	movs	r1, #44	; 0x2c
   14056:	6878      	ldr	r0, [r7, #4]
   14058:	4b03      	ldr	r3, [pc, #12]	; (14068 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x60>)
   1405a:	4798      	blx	r3
}
   1405c:	bf00      	nop
   1405e:	3708      	adds	r7, #8
   14060:	46bd      	mov	sp, r7
   14062:	bd80      	pop	{r7, pc}
   14064:	20000244 	.word	0x20000244
   14068:	00014255 	.word	0x00014255
   1406c:	20009424 	.word	0x20009424

00014070 <_ZN15Holt_3593_Class9Send_ByteEh>:
	}
	return rev;
}

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
   14070:	b580      	push	{r7, lr}
   14072:	b082      	sub	sp, #8
   14074:	af00      	add	r7, sp, #0
   14076:	6078      	str	r0, [r7, #4]
   14078:	460b      	mov	r3, r1
   1407a:	70fb      	strb	r3, [r7, #3]
	while (!spi.isSPIReady()); 
   1407c:	687b      	ldr	r3, [r7, #4]
   1407e:	4618      	mov	r0, r3
   14080:	4b0f      	ldr	r3, [pc, #60]	; (140c0 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   14082:	4798      	blx	r3
   14084:	4603      	mov	r3, r0
   14086:	f083 0301 	eor.w	r3, r3, #1
   1408a:	b2db      	uxtb	r3, r3
   1408c:	2b00      	cmp	r3, #0
   1408e:	d000      	beq.n	14092 <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
   14090:	e7f4      	b.n	1407c <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi.write(&byte,1);
   14092:	687b      	ldr	r3, [r7, #4]
   14094:	1cf9      	adds	r1, r7, #3
   14096:	2201      	movs	r2, #1
   14098:	4618      	mov	r0, r3
   1409a:	4b0a      	ldr	r3, [pc, #40]	; (140c4 <_ZN15Holt_3593_Class9Send_ByteEh+0x54>)
   1409c:	4798      	blx	r3
	while (!spi.isSPIReady());  
   1409e:	687b      	ldr	r3, [r7, #4]
   140a0:	4618      	mov	r0, r3
   140a2:	4b07      	ldr	r3, [pc, #28]	; (140c0 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   140a4:	4798      	blx	r3
   140a6:	4603      	mov	r3, r0
   140a8:	f083 0301 	eor.w	r3, r3, #1
   140ac:	b2db      	uxtb	r3, r3
   140ae:	2b00      	cmp	r3, #0
   140b0:	d000      	beq.n	140b4 <_ZN15Holt_3593_Class9Send_ByteEh+0x44>
   140b2:	e7f4      	b.n	1409e <_ZN15Holt_3593_Class9Send_ByteEh+0x2e>
	return byte;
   140b4:	78fb      	ldrb	r3, [r7, #3]
}
   140b6:	4618      	mov	r0, r3
   140b8:	3708      	adds	r7, #8
   140ba:	46bd      	mov	sp, r7
   140bc:	bd80      	pop	{r7, pc}
   140be:	bf00      	nop
   140c0:	00015add 	.word	0x00015add
   140c4:	00015a35 	.word	0x00015a35

000140c8 <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
   140c8:	b580      	push	{r7, lr}
   140ca:	b084      	sub	sp, #16
   140cc:	af00      	add	r7, sp, #0
   140ce:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	
	while (!spi.isSPIReady());
   140d0:	687b      	ldr	r3, [r7, #4]
   140d2:	4618      	mov	r0, r3
   140d4:	4b0f      	ldr	r3, [pc, #60]	; (14114 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   140d6:	4798      	blx	r3
   140d8:	4603      	mov	r3, r0
   140da:	f083 0301 	eor.w	r3, r3, #1
   140de:	b2db      	uxtb	r3, r3
   140e0:	2b00      	cmp	r3, #0
   140e2:	d000      	beq.n	140e6 <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>
   140e4:	e7f4      	b.n	140d0 <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi.read(&byte,1);
   140e6:	687b      	ldr	r3, [r7, #4]
   140e8:	f107 010f 	add.w	r1, r7, #15
   140ec:	2201      	movs	r2, #1
   140ee:	4618      	mov	r0, r3
   140f0:	4b09      	ldr	r3, [pc, #36]	; (14118 <_ZN15Holt_3593_Class8Get_ByteEv+0x50>)
   140f2:	4798      	blx	r3
	while (!spi.isSPIReady());
   140f4:	687b      	ldr	r3, [r7, #4]
   140f6:	4618      	mov	r0, r3
   140f8:	4b06      	ldr	r3, [pc, #24]	; (14114 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   140fa:	4798      	blx	r3
   140fc:	4603      	mov	r3, r0
   140fe:	f083 0301 	eor.w	r3, r3, #1
   14102:	b2db      	uxtb	r3, r3
   14104:	2b00      	cmp	r3, #0
   14106:	d000      	beq.n	1410a <_ZN15Holt_3593_Class8Get_ByteEv+0x42>
   14108:	e7f4      	b.n	140f4 <_ZN15Holt_3593_Class8Get_ByteEv+0x2c>


	
	return byte;
   1410a:	7bfb      	ldrb	r3, [r7, #15]
}	
   1410c:	4618      	mov	r0, r3
   1410e:	3710      	adds	r7, #16
   14110:	46bd      	mov	sp, r7
   14112:	bd80      	pop	{r7, pc}
   14114:	00015add 	.word	0x00015add
   14118:	00015a79 	.word	0x00015a79

0001411c <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
   1411c:	b580      	push	{r7, lr}
   1411e:	b084      	sub	sp, #16
   14120:	af00      	add	r7, sp, #0
   14122:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
   14124:	6878      	ldr	r0, [r7, #4]
   14126:	4b14      	ldr	r3, [pc, #80]	; (14178 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x5c>)
   14128:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
   1412a:	2201      	movs	r2, #1
   1412c:	2128      	movs	r1, #40	; 0x28
   1412e:	6878      	ldr	r0, [r7, #4]
   14130:	4b12      	ldr	r3, [pc, #72]	; (1417c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   14132:	4798      	blx	r3
   14134:	4603      	mov	r3, r0
   14136:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   14138:	231f      	movs	r3, #31
   1413a:	73fb      	strb	r3, [r7, #15]
   1413c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   14140:	2b00      	cmp	r3, #0
   14142:	db11      	blt.n	14168 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
   14144:	f997 300f 	ldrsb.w	r3, [r7, #15]
   14148:	4a0d      	ldr	r2, [pc, #52]	; (14180 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x64>)
   1414a:	5cd3      	ldrb	r3, [r2, r3]
   1414c:	2201      	movs	r2, #1
   1414e:	4619      	mov	r1, r3
   14150:	6878      	ldr	r0, [r7, #4]
   14152:	4b0a      	ldr	r3, [pc, #40]	; (1417c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   14154:	4798      	blx	r3
   14156:	4603      	mov	r3, r0
   14158:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   1415a:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1415e:	b2db      	uxtb	r3, r3
   14160:	3b01      	subs	r3, #1
   14162:	b2db      	uxtb	r3, r3
   14164:	73fb      	strb	r3, [r7, #15]
   14166:	e7e9      	b.n	1413c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x20>
  }    
 	  
	close();
   14168:	6878      	ldr	r0, [r7, #4]
   1416a:	4b06      	ldr	r3, [pc, #24]	; (14184 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x68>)
   1416c:	4798      	blx	r3
}
   1416e:	bf00      	nop
   14170:	3710      	adds	r7, #16
   14172:	46bd      	mov	sp, r7
   14174:	bd80      	pop	{r7, pc}
   14176:	bf00      	nop
   14178:	00013efd 	.word	0x00013efd
   1417c:	00013f4d 	.word	0x00013f4d
   14180:	20009404 	.word	0x20009404
   14184:	00013f25 	.word	0x00013f25

00014188 <_ZN15Holt_3593_Class9ArincReadEhPh>:
// ------------------------------------------------------
// Fetch the FIFO ARINC data from the desired receiver channel 
//
// ------------------------------------------------------
void Holt_3593_Class::ArincRead(uint8_t source, unsigned char *passedArray)
{
   14188:	b580      	push	{r7, lr}
   1418a:	b086      	sub	sp, #24
   1418c:	af00      	add	r7, sp, #0
   1418e:	60f8      	str	r0, [r7, #12]
   14190:	460b      	mov	r3, r1
   14192:	607a      	str	r2, [r7, #4]
   14194:	72fb      	strb	r3, [r7, #11]
   uint8_t dummy, ByteCount, count;
   
   count = 3;                // assume it's a Priority Label Word?
   14196:	2303      	movs	r3, #3
   14198:	75bb      	strb	r3, [r7, #22]
   if(source==0xA0 || source == 0xC0){  // is it a normal Word?
   1419a:	7afb      	ldrb	r3, [r7, #11]
   1419c:	2ba0      	cmp	r3, #160	; 0xa0
   1419e:	d002      	beq.n	141a6 <_ZN15Holt_3593_Class9ArincReadEhPh+0x1e>
   141a0:	7afb      	ldrb	r3, [r7, #11]
   141a2:	2bc0      	cmp	r3, #192	; 0xc0
   141a4:	d102      	bne.n	141ac <_ZN15Holt_3593_Class9ArincReadEhPh+0x24>
       count++;								 // then it has 4 bytes.
   141a6:	7dbb      	ldrb	r3, [r7, #22]
   141a8:	3301      	adds	r3, #1
   141aa:	75bb      	strb	r3, [r7, #22]
	   }                        
  open();
   141ac:	68f8      	ldr	r0, [r7, #12]
   141ae:	4b11      	ldr	r3, [pc, #68]	; (141f4 <_ZN15Holt_3593_Class9ArincReadEhPh+0x6c>)
   141b0:	4798      	blx	r3
  // dummy = Get_Byte();                   // clear SPI status register    
   Send_Byte(source) ;                  // source command to read FIFO data
   141b2:	7afb      	ldrb	r3, [r7, #11]
   141b4:	4619      	mov	r1, r3
   141b6:	68f8      	ldr	r0, [r7, #12]
   141b8:	4b0f      	ldr	r3, [pc, #60]	; (141f8 <_ZN15Holt_3593_Class9ArincReadEhPh+0x70>)
   141ba:	4798      	blx	r3
   
 //  dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   141bc:	2300      	movs	r3, #0
   141be:	75fb      	strb	r3, [r7, #23]
   141c0:	7dfa      	ldrb	r2, [r7, #23]
   141c2:	7dbb      	ldrb	r3, [r7, #22]
   141c4:	429a      	cmp	r2, r3
   141c6:	da0d      	bge.n	141e4 <_ZN15Holt_3593_Class9ArincReadEhPh+0x5c>
      dummy = Get_Byte(); 
   141c8:	68f8      	ldr	r0, [r7, #12]
   141ca:	4b0c      	ldr	r3, [pc, #48]	; (141fc <_ZN15Holt_3593_Class9ArincReadEhPh+0x74>)
   141cc:	4798      	blx	r3
   141ce:	4603      	mov	r3, r0
   141d0:	757b      	strb	r3, [r7, #21]
      passedArray[ByteCount] = dummy; 
   141d2:	7dfb      	ldrb	r3, [r7, #23]
   141d4:	687a      	ldr	r2, [r7, #4]
   141d6:	4413      	add	r3, r2
   141d8:	7d7a      	ldrb	r2, [r7, #21]
   141da:	701a      	strb	r2, [r3, #0]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   141dc:	7dfb      	ldrb	r3, [r7, #23]
   141de:	3301      	adds	r3, #1
   141e0:	75fb      	strb	r3, [r7, #23]
   141e2:	e7ed      	b.n	141c0 <_ZN15Holt_3593_Class9ArincReadEhPh+0x38>
     }

  close();
   141e4:	68f8      	ldr	r0, [r7, #12]
   141e6:	4b06      	ldr	r3, [pc, #24]	; (14200 <_ZN15Holt_3593_Class9ArincReadEhPh+0x78>)
   141e8:	4798      	blx	r3
  
}
   141ea:	bf00      	nop
   141ec:	3718      	adds	r7, #24
   141ee:	46bd      	mov	sp, r7
   141f0:	bd80      	pop	{r7, pc}
   141f2:	bf00      	nop
   141f4:	00013efd 	.word	0x00013efd
   141f8:	00014071 	.word	0x00014071
   141fc:	000140c9 	.word	0x000140c9
   14200:	00013f25 	.word	0x00013f25

00014204 <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
   14204:	b580      	push	{r7, lr}
   14206:	b084      	sub	sp, #16
   14208:	af00      	add	r7, sp, #0
   1420a:	6078      	str	r0, [r7, #4]
   1420c:	460b      	mov	r3, r1
   1420e:	70fb      	strb	r3, [r7, #3]
   14210:	4613      	mov	r3, r2
   14212:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
   14214:	78fb      	ldrb	r3, [r7, #3]
   14216:	73fb      	strb	r3, [r7, #15]
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
   14218:	7bfb      	ldrb	r3, [r7, #15]
   1421a:	4619      	mov	r1, r3
   1421c:	6878      	ldr	r0, [r7, #4]
   1421e:	4b0b      	ldr	r3, [pc, #44]	; (1424c <_ZN15Holt_3593_Class9txrx8bitsEhh+0x48>)
   14220:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
   14222:	78bb      	ldrb	r3, [r7, #2]
   14224:	2b00      	cmp	r3, #0
   14226:	d00a      	beq.n	1423e <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
		while (!spi.isSPIReady());      
   14228:	687b      	ldr	r3, [r7, #4]
   1422a:	4618      	mov	r0, r3
   1422c:	4b08      	ldr	r3, [pc, #32]	; (14250 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x4c>)
   1422e:	4798      	blx	r3
   14230:	4603      	mov	r3, r0
   14232:	f083 0301 	eor.w	r3, r3, #1
   14236:	b2db      	uxtb	r3, r3
   14238:	2b00      	cmp	r3, #0
   1423a:	d000      	beq.n	1423e <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
   1423c:	e7f4      	b.n	14228 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x24>
    }

  rxbyte = txbyte;  // get received data byte from Data Register
   1423e:	78fb      	ldrb	r3, [r7, #3]
   14240:	73bb      	strb	r3, [r7, #14]

  return rxbyte;
   14242:	7bbb      	ldrb	r3, [r7, #14]
  
 }
   14244:	4618      	mov	r0, r3
   14246:	3710      	adds	r7, #16
   14248:	46bd      	mov	sp, r7
   1424a:	bd80      	pop	{r7, pc}
   1424c:	00014071 	.word	0x00014071
   14250:	00015add 	.word	0x00015add

00014254 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh>:
// ------------------------------------------------------------------
// Transmits the Message Command and data contained in the passed array pointer
// Transmit the 0x0C Opcode command + 4 bytes of ARINC data per Figure 1, pg 8 of the data sheet
// ------------------------------------------------------------------
 void Holt_3593_Class::TransmitCommandAndData(uint8_t cmd, uint8_t *TXBuffer)
 {              
   14254:	b580      	push	{r7, lr}
   14256:	b084      	sub	sp, #16
   14258:	af00      	add	r7, sp, #0
   1425a:	60f8      	str	r0, [r7, #12]
   1425c:	460b      	mov	r3, r1
   1425e:	607a      	str	r2, [r7, #4]
   14260:	72fb      	strb	r3, [r7, #11]
 uint8_t static ByteCount,dummy,transmitCount;
 
	open();
   14262:	68f8      	ldr	r0, [r7, #12]
   14264:	4b20      	ldr	r3, [pc, #128]	; (142e8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x94>)
   14266:	4798      	blx	r3
   
   transmitCount=4;                                // Standard messages are 4 bytes
   14268:	4b20      	ldr	r3, [pc, #128]	; (142ec <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   1426a:	2204      	movs	r2, #4
   1426c:	701a      	strb	r2, [r3, #0]
   if(cmd==W_PL1Match || cmd==W_PL2Match){       // if writing PL Match registers send only 3 bytes
   1426e:	7afb      	ldrb	r3, [r7, #11]
   14270:	2b18      	cmp	r3, #24
   14272:	d002      	beq.n	1427a <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x26>
   14274:	7afb      	ldrb	r3, [r7, #11]
   14276:	2b2c      	cmp	r3, #44	; 0x2c
   14278:	d105      	bne.n	14286 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x32>
      transmitCount--;
   1427a:	4b1c      	ldr	r3, [pc, #112]	; (142ec <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   1427c:	781b      	ldrb	r3, [r3, #0]
   1427e:	3b01      	subs	r3, #1
   14280:	b2da      	uxtb	r2, r3
   14282:	4b1a      	ldr	r3, [pc, #104]	; (142ec <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   14284:	701a      	strb	r2, [r3, #0]
   }
   
   dummy = txrx8bits(cmd, 1);      // Transmit the whole message, ignore return values 
   14286:	7afb      	ldrb	r3, [r7, #11]
   14288:	2201      	movs	r2, #1
   1428a:	4619      	mov	r1, r3
   1428c:	68f8      	ldr	r0, [r7, #12]
   1428e:	4b18      	ldr	r3, [pc, #96]	; (142f0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   14290:	4798      	blx	r3
   14292:	4603      	mov	r3, r0
   14294:	461a      	mov	r2, r3
   14296:	4b17      	ldr	r3, [pc, #92]	; (142f4 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   14298:	701a      	strb	r2, [r3, #0]

   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   1429a:	4b17      	ldr	r3, [pc, #92]	; (142f8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   1429c:	2200      	movs	r2, #0
   1429e:	701a      	strb	r2, [r3, #0]
   142a0:	4b15      	ldr	r3, [pc, #84]	; (142f8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   142a2:	781b      	ldrb	r3, [r3, #0]
   142a4:	461a      	mov	r2, r3
   142a6:	4b11      	ldr	r3, [pc, #68]	; (142ec <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   142a8:	781b      	ldrb	r3, [r3, #0]
   142aa:	429a      	cmp	r2, r3
   142ac:	da15      	bge.n	142da <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x86>
      {              
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
   142ae:	4b12      	ldr	r3, [pc, #72]	; (142f8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   142b0:	781b      	ldrb	r3, [r3, #0]
   142b2:	461a      	mov	r2, r3
   142b4:	687b      	ldr	r3, [r7, #4]
   142b6:	4413      	add	r3, r2
   142b8:	781b      	ldrb	r3, [r3, #0]
   142ba:	2201      	movs	r2, #1
   142bc:	4619      	mov	r1, r3
   142be:	68f8      	ldr	r0, [r7, #12]
   142c0:	4b0b      	ldr	r3, [pc, #44]	; (142f0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   142c2:	4798      	blx	r3
   142c4:	4603      	mov	r3, r0
   142c6:	461a      	mov	r2, r3
   142c8:	4b0a      	ldr	r3, [pc, #40]	; (142f4 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   142ca:	701a      	strb	r2, [r3, #0]
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   142cc:	4b0a      	ldr	r3, [pc, #40]	; (142f8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   142ce:	781b      	ldrb	r3, [r3, #0]
   142d0:	3301      	adds	r3, #1
   142d2:	b2da      	uxtb	r2, r3
   142d4:	4b08      	ldr	r3, [pc, #32]	; (142f8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   142d6:	701a      	strb	r2, [r3, #0]
   142d8:	e7e2      	b.n	142a0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x4c>
      }   
 close();
   142da:	68f8      	ldr	r0, [r7, #12]
   142dc:	4b07      	ldr	r3, [pc, #28]	; (142fc <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa8>)
   142de:	4798      	blx	r3
}
   142e0:	bf00      	nop
   142e2:	3710      	adds	r7, #16
   142e4:	46bd      	mov	sp, r7
   142e6:	bd80      	pop	{r7, pc}
   142e8:	00013efd 	.word	0x00013efd
   142ec:	20009429 	.word	0x20009429
   142f0:	00014205 	.word	0x00014205
   142f4:	20009428 	.word	0x20009428
   142f8:	20009427 	.word	0x20009427
   142fc:	00013f25 	.word	0x00013f25

00014300 <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
   14300:	b580      	push	{r7, lr}
   14302:	b084      	sub	sp, #16
   14304:	af00      	add	r7, sp, #0
   14306:	6078      	str	r0, [r7, #4]
   14308:	460b      	mov	r3, r1
   1430a:	70fb      	strb	r3, [r7, #3]

 	  uint8_t p(cmd); 
   1430c:	78fb      	ldrb	r3, [r7, #3]
   1430e:	73fb      	strb	r3, [r7, #15]
  open();
   14310:	6878      	ldr	r0, [r7, #4]
   14312:	4b0c      	ldr	r3, [pc, #48]	; (14344 <_ZN15Holt_3593_Class9W_CommandEc+0x44>)
   14314:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
   14316:	7bfb      	ldrb	r3, [r7, #15]
   14318:	4619      	mov	r1, r3
   1431a:	6878      	ldr	r0, [r7, #4]
   1431c:	4b0a      	ldr	r3, [pc, #40]	; (14348 <_ZN15Holt_3593_Class9W_CommandEc+0x48>)
   1431e:	4798      	blx	r3
  while (!spi.isSPIReady()) {;}      // Wait for data to come back in.
   14320:	687b      	ldr	r3, [r7, #4]
   14322:	4618      	mov	r0, r3
   14324:	4b09      	ldr	r3, [pc, #36]	; (1434c <_ZN15Holt_3593_Class9W_CommandEc+0x4c>)
   14326:	4798      	blx	r3
   14328:	4603      	mov	r3, r0
   1432a:	f083 0301 	eor.w	r3, r3, #1
   1432e:	b2db      	uxtb	r3, r3
   14330:	2b00      	cmp	r3, #0
   14332:	d000      	beq.n	14336 <_ZN15Holt_3593_Class9W_CommandEc+0x36>
   14334:	e7f4      	b.n	14320 <_ZN15Holt_3593_Class9W_CommandEc+0x20>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
   14336:	6878      	ldr	r0, [r7, #4]
   14338:	4b05      	ldr	r3, [pc, #20]	; (14350 <_ZN15Holt_3593_Class9W_CommandEc+0x50>)
   1433a:	4798      	blx	r3
}
   1433c:	bf00      	nop
   1433e:	3710      	adds	r7, #16
   14340:	46bd      	mov	sp, r7
   14342:	bd80      	pop	{r7, pc}
   14344:	00013efd 	.word	0x00013efd
   14348:	00014071 	.word	0x00014071
   1434c:	00015add 	.word	0x00015add
   14350:	00013f25 	.word	0x00013f25

00014354 <_ZN15Holt_3593_Class14W_CommandValueEhh>:

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
   14354:	b580      	push	{r7, lr}
   14356:	b082      	sub	sp, #8
   14358:	af00      	add	r7, sp, #0
   1435a:	6078      	str	r0, [r7, #4]
   1435c:	460b      	mov	r3, r1
   1435e:	70fb      	strb	r3, [r7, #3]
   14360:	4613      	mov	r3, r2
   14362:	70bb      	strb	r3, [r7, #2]

  	
  open();                             // assert the SPI0 /SS strobe
   14364:	6878      	ldr	r0, [r7, #4]
   14366:	4b14      	ldr	r3, [pc, #80]	; (143b8 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x64>)
   14368:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
   1436a:	78fb      	ldrb	r3, [r7, #3]
   1436c:	4619      	mov	r1, r3
   1436e:	6878      	ldr	r0, [r7, #4]
   14370:	4b12      	ldr	r3, [pc, #72]	; (143bc <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   14372:	4798      	blx	r3
  while (!spi.isSPIReady());    
   14374:	687b      	ldr	r3, [r7, #4]
   14376:	4618      	mov	r0, r3
   14378:	4b11      	ldr	r3, [pc, #68]	; (143c0 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   1437a:	4798      	blx	r3
   1437c:	4603      	mov	r3, r0
   1437e:	f083 0301 	eor.w	r3, r3, #1
   14382:	b2db      	uxtb	r3, r3
   14384:	2b00      	cmp	r3, #0
   14386:	d000      	beq.n	1438a <_ZN15Holt_3593_Class14W_CommandValueEhh+0x36>
   14388:	e7f4      	b.n	14374 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x20>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
   1438a:	78bb      	ldrb	r3, [r7, #2]
   1438c:	4619      	mov	r1, r3
   1438e:	6878      	ldr	r0, [r7, #4]
   14390:	4b0a      	ldr	r3, [pc, #40]	; (143bc <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   14392:	4798      	blx	r3
  while (!spi.isSPIReady());    
   14394:	687b      	ldr	r3, [r7, #4]
   14396:	4618      	mov	r0, r3
   14398:	4b09      	ldr	r3, [pc, #36]	; (143c0 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   1439a:	4798      	blx	r3
   1439c:	4603      	mov	r3, r0
   1439e:	f083 0301 	eor.w	r3, r3, #1
   143a2:	b2db      	uxtb	r3, r3
   143a4:	2b00      	cmp	r3, #0
   143a6:	d000      	beq.n	143aa <_ZN15Holt_3593_Class14W_CommandValueEhh+0x56>
   143a8:	e7f4      	b.n	14394 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
   143aa:	6878      	ldr	r0, [r7, #4]
   143ac:	4b05      	ldr	r3, [pc, #20]	; (143c4 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x70>)
   143ae:	4798      	blx	r3
}
   143b0:	bf00      	nop
   143b2:	3708      	adds	r7, #8
   143b4:	46bd      	mov	sp, r7
   143b6:	bd80      	pop	{r7, pc}
   143b8:	00013efd 	.word	0x00013efd
   143bc:	00014071 	.word	0x00014071
   143c0:	00015add 	.word	0x00015add
   143c4:	00013f25 	.word	0x00013f25

000143c8 <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
   143c8:	b580      	push	{r7, lr}
   143ca:	b084      	sub	sp, #16
   143cc:	af00      	add	r7, sp, #0
   143ce:	6078      	str	r0, [r7, #4]
   143d0:	460b      	mov	r3, r1
   143d2:	70fb      	strb	r3, [r7, #3]
  unsigned char R_Reg;
	
  open();
   143d4:	6878      	ldr	r0, [r7, #4]
   143d6:	4b0a      	ldr	r3, [pc, #40]	; (14400 <_ZN15Holt_3593_Class10R_RegisterEc+0x38>)
   143d8:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
   143da:	78fb      	ldrb	r3, [r7, #3]
   143dc:	2201      	movs	r2, #1
   143de:	4619      	mov	r1, r3
   143e0:	6878      	ldr	r0, [r7, #4]
   143e2:	4b08      	ldr	r3, [pc, #32]	; (14404 <_ZN15Holt_3593_Class10R_RegisterEc+0x3c>)
   143e4:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
   143e6:	6878      	ldr	r0, [r7, #4]
   143e8:	4b07      	ldr	r3, [pc, #28]	; (14408 <_ZN15Holt_3593_Class10R_RegisterEc+0x40>)
   143ea:	4798      	blx	r3
   143ec:	4603      	mov	r3, r0
   143ee:	73fb      	strb	r3, [r7, #15]
         
  close();
   143f0:	6878      	ldr	r0, [r7, #4]
   143f2:	4b06      	ldr	r3, [pc, #24]	; (1440c <_ZN15Holt_3593_Class10R_RegisterEc+0x44>)
   143f4:	4798      	blx	r3
  return R_Reg;
   143f6:	7bfb      	ldrb	r3, [r7, #15]
}
   143f8:	4618      	mov	r0, r3
   143fa:	3710      	adds	r7, #16
   143fc:	46bd      	mov	sp, r7
   143fe:	bd80      	pop	{r7, pc}
   14400:	00013efd 	.word	0x00013efd
   14404:	00014205 	.word	0x00014205
   14408:	000140c9 	.word	0x000140c9
   1440c:	00013f25 	.word	0x00013f25

00014410 <_ZN15Holt_3593_Class6SS_LowEv>:
  //--------------------------------------------    
	open();                             // assert the SPI0 /SS strobe
  } 

void Holt_3593_Class::SS_Low(void)
{
   14410:	b580      	push	{r7, lr}
   14412:	b082      	sub	sp, #8
   14414:	af00      	add	r7, sp, #0
   14416:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);
   14418:	2100      	movs	r1, #0
   1441a:	204e      	movs	r0, #78	; 0x4e
   1441c:	4b02      	ldr	r3, [pc, #8]	; (14428 <_ZN15Holt_3593_Class6SS_LowEv+0x18>)
   1441e:	4798      	blx	r3
}
   14420:	bf00      	nop
   14422:	3708      	adds	r7, #8
   14424:	46bd      	mov	sp, r7
   14426:	bd80      	pop	{r7, pc}
   14428:	00013d15 	.word	0x00013d15

0001442c <_ZN15Holt_3593_Class7SS_HighEv>:
void Holt_3593_Class::SS_High(void)
{
   1442c:	b580      	push	{r7, lr}
   1442e:	b082      	sub	sp, #8
   14430:	af00      	add	r7, sp, #0
   14432:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
   14434:	2101      	movs	r1, #1
   14436:	204e      	movs	r0, #78	; 0x4e
   14438:	4b02      	ldr	r3, [pc, #8]	; (14444 <_ZN15Holt_3593_Class7SS_HighEv+0x18>)
   1443a:	4798      	blx	r3
}
   1443c:	bf00      	nop
   1443e:	3708      	adds	r7, #8
   14440:	46bd      	mov	sp, r7
   14442:	bd80      	pop	{r7, pc}
   14444:	00013d15 	.word	0x00013d15

00014448 <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
   14448:	b480      	push	{r7}
   1444a:	b083      	sub	sp, #12
   1444c:	af00      	add	r7, sp, #0
   1444e:	6078      	str	r0, [r7, #4]
   14450:	6039      	str	r1, [r7, #0]
   14452:	683b      	ldr	r3, [r7, #0]
   14454:	681a      	ldr	r2, [r3, #0]
   14456:	687b      	ldr	r3, [r7, #4]
   14458:	601a      	str	r2, [r3, #0]
   1445a:	687b      	ldr	r3, [r7, #4]
   1445c:	681b      	ldr	r3, [r3, #0]
   1445e:	3b0c      	subs	r3, #12
   14460:	681b      	ldr	r3, [r3, #0]
   14462:	461a      	mov	r2, r3
   14464:	687b      	ldr	r3, [r7, #4]
   14466:	4413      	add	r3, r2
   14468:	683a      	ldr	r2, [r7, #0]
   1446a:	6852      	ldr	r2, [r2, #4]
   1446c:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
   1446e:	687b      	ldr	r3, [r7, #4]
   14470:	4618      	mov	r0, r3
   14472:	370c      	adds	r7, #12
   14474:	46bd      	mov	sp, r7
   14476:	bc80      	pop	{r7}
   14478:	4770      	bx	lr

0001447a <_ZN14Protocol_Class13GetActiveLineEv>:

uint8_t	Protocol_Class::GetActiveLine(void){
   1447a:	b590      	push	{r4, r7, lr}
   1447c:	b085      	sub	sp, #20
   1447e:	af00      	add	r7, sp, #0
   14480:	6078      	str	r0, [r7, #4]
	uint32_t	data=ReadBufferLabel(Label2Byte(270));
   14482:	687b      	ldr	r3, [r7, #4]
   14484:	681b      	ldr	r3, [r3, #0]
   14486:	3308      	adds	r3, #8
   14488:	681c      	ldr	r4, [r3, #0]
   1448a:	687b      	ldr	r3, [r7, #4]
   1448c:	681b      	ldr	r3, [r3, #0]
   1448e:	3b0c      	subs	r3, #12
   14490:	681b      	ldr	r3, [r3, #0]
   14492:	461a      	mov	r2, r3
   14494:	687b      	ldr	r3, [r7, #4]
   14496:	4413      	add	r3, r2
   14498:	681b      	ldr	r3, [r3, #0]
   1449a:	3304      	adds	r3, #4
   1449c:	681b      	ldr	r3, [r3, #0]
   1449e:	687a      	ldr	r2, [r7, #4]
   144a0:	6812      	ldr	r2, [r2, #0]
   144a2:	3a0c      	subs	r2, #12
   144a4:	6812      	ldr	r2, [r2, #0]
   144a6:	4611      	mov	r1, r2
   144a8:	687a      	ldr	r2, [r7, #4]
   144aa:	440a      	add	r2, r1
   144ac:	f44f 7187 	mov.w	r1, #270	; 0x10e
   144b0:	4610      	mov	r0, r2
   144b2:	4798      	blx	r3
   144b4:	4603      	mov	r3, r0
   144b6:	4619      	mov	r1, r3
   144b8:	6878      	ldr	r0, [r7, #4]
   144ba:	47a0      	blx	r4
   144bc:	60f8      	str	r0, [r7, #12]
	uint8_t	key=uint8_t((data&0xc0000)>>18);
   144be:	68fb      	ldr	r3, [r7, #12]
   144c0:	0c9b      	lsrs	r3, r3, #18
   144c2:	b2db      	uxtb	r3, r3
   144c4:	f003 0303 	and.w	r3, r3, #3
   144c8:	72fb      	strb	r3, [r7, #11]

	return key;
   144ca:	7afb      	ldrb	r3, [r7, #11]
}
   144cc:	4618      	mov	r0, r3
   144ce:	3714      	adds	r7, #20
   144d0:	46bd      	mov	sp, r7
   144d2:	bd90      	pop	{r4, r7, pc}

000144d4 <_ZN14Protocol_Class12MakeLabel374Emf>:
	data=(0x1ffffc00&d)>>10;
	datagram.bit.dataField=data;

	return	data;
}
uint32_t Protocol_Class::MakeLabel374(uint32_t d,float v){
   144d4:	b580      	push	{r7, lr}
   144d6:	b084      	sub	sp, #16
   144d8:	af00      	add	r7, sp, #0
   144da:	60f8      	str	r0, [r7, #12]
   144dc:	60b9      	str	r1, [r7, #8]
   144de:	607a      	str	r2, [r7, #4]
	value=d<<10;
   144e0:	68bb      	ldr	r3, [r7, #8]
   144e2:	029a      	lsls	r2, r3, #10
   144e4:	68fb      	ldr	r3, [r7, #12]
   144e6:	60da      	str	r2, [r3, #12]
	label=Label2Byte(374);
   144e8:	68fb      	ldr	r3, [r7, #12]
   144ea:	681b      	ldr	r3, [r3, #0]
   144ec:	3b0c      	subs	r3, #12
   144ee:	681b      	ldr	r3, [r3, #0]
   144f0:	461a      	mov	r2, r3
   144f2:	68fb      	ldr	r3, [r7, #12]
   144f4:	4413      	add	r3, r2
   144f6:	681b      	ldr	r3, [r3, #0]
   144f8:	3304      	adds	r3, #4
   144fa:	681b      	ldr	r3, [r3, #0]
   144fc:	68fa      	ldr	r2, [r7, #12]
   144fe:	6812      	ldr	r2, [r2, #0]
   14500:	3a0c      	subs	r2, #12
   14502:	6812      	ldr	r2, [r2, #0]
   14504:	4611      	mov	r1, r2
   14506:	68fa      	ldr	r2, [r7, #12]
   14508:	440a      	add	r2, r1
   1450a:	f44f 71bb 	mov.w	r1, #374	; 0x176
   1450e:	4610      	mov	r0, r2
   14510:	4798      	blx	r3
   14512:	4603      	mov	r3, r0
   14514:	461a      	mov	r2, r3
   14516:	68fb      	ldr	r3, [r7, #12]
   14518:	741a      	strb	r2, [r3, #16]
	value|=(uint32_t)label;
   1451a:	68fb      	ldr	r3, [r7, #12]
   1451c:	68db      	ldr	r3, [r3, #12]
   1451e:	68fa      	ldr	r2, [r7, #12]
   14520:	7c12      	ldrb	r2, [r2, #16]
   14522:	431a      	orrs	r2, r3
   14524:	68fb      	ldr	r3, [r7, #12]
   14526:	60da      	str	r2, [r3, #12]
	if (v<0)
   14528:	4b0e      	ldr	r3, [pc, #56]	; (14564 <_ZN14Protocol_Class12MakeLabel374Emf+0x90>)
   1452a:	f04f 0100 	mov.w	r1, #0
   1452e:	6878      	ldr	r0, [r7, #4]
   14530:	4798      	blx	r3
   14532:	4603      	mov	r3, r0
   14534:	2b00      	cmp	r3, #0
   14536:	d005      	beq.n	14544 <_ZN14Protocol_Class12MakeLabel374Emf+0x70>
	{
		value|=0x1<<28;
   14538:	68fb      	ldr	r3, [r7, #12]
   1453a:	68db      	ldr	r3, [r3, #12]
   1453c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
   14540:	68fb      	ldr	r3, [r7, #12]
   14542:	60da      	str	r2, [r3, #12]
	}
	value=MakeEvenParity(value);
   14544:	68fb      	ldr	r3, [r7, #12]
   14546:	68db      	ldr	r3, [r3, #12]
   14548:	4619      	mov	r1, r3
   1454a:	68f8      	ldr	r0, [r7, #12]
   1454c:	4b06      	ldr	r3, [pc, #24]	; (14568 <_ZN14Protocol_Class12MakeLabel374Emf+0x94>)
   1454e:	4798      	blx	r3
   14550:	4602      	mov	r2, r0
   14552:	68fb      	ldr	r3, [r7, #12]
   14554:	60da      	str	r2, [r3, #12]
	return value;
   14556:	68fb      	ldr	r3, [r7, #12]
   14558:	68db      	ldr	r3, [r3, #12]
	
}
   1455a:	4618      	mov	r0, r3
   1455c:	3710      	adds	r7, #16
   1455e:	46bd      	mov	sp, r7
   14560:	bd80      	pop	{r7, pc}
   14562:	bf00      	nop
   14564:	0001b57d 	.word	0x0001b57d
   14568:	00014615 	.word	0x00014615

0001456c <_ZN14Protocol_Class12MakeLabel270Em>:
uint32_t Protocol_Class::MakeLabel270(uint32_t d){
   1456c:	b580      	push	{r7, lr}
   1456e:	b082      	sub	sp, #8
   14570:	af00      	add	r7, sp, #0
   14572:	6078      	str	r0, [r7, #4]
   14574:	6039      	str	r1, [r7, #0]
	
	value=d<<10;
   14576:	683b      	ldr	r3, [r7, #0]
   14578:	029a      	lsls	r2, r3, #10
   1457a:	687b      	ldr	r3, [r7, #4]
   1457c:	60da      	str	r2, [r3, #12]
	label=Label2Byte(270);
   1457e:	687b      	ldr	r3, [r7, #4]
   14580:	681b      	ldr	r3, [r3, #0]
   14582:	3b0c      	subs	r3, #12
   14584:	681b      	ldr	r3, [r3, #0]
   14586:	461a      	mov	r2, r3
   14588:	687b      	ldr	r3, [r7, #4]
   1458a:	4413      	add	r3, r2
   1458c:	681b      	ldr	r3, [r3, #0]
   1458e:	3304      	adds	r3, #4
   14590:	681b      	ldr	r3, [r3, #0]
   14592:	687a      	ldr	r2, [r7, #4]
   14594:	6812      	ldr	r2, [r2, #0]
   14596:	3a0c      	subs	r2, #12
   14598:	6812      	ldr	r2, [r2, #0]
   1459a:	4611      	mov	r1, r2
   1459c:	687a      	ldr	r2, [r7, #4]
   1459e:	440a      	add	r2, r1
   145a0:	f44f 7187 	mov.w	r1, #270	; 0x10e
   145a4:	4610      	mov	r0, r2
   145a6:	4798      	blx	r3
   145a8:	4603      	mov	r3, r0
   145aa:	461a      	mov	r2, r3
   145ac:	687b      	ldr	r3, [r7, #4]
   145ae:	741a      	strb	r2, [r3, #16]
	value|=(uint32_t)label;
   145b0:	687b      	ldr	r3, [r7, #4]
   145b2:	68db      	ldr	r3, [r3, #12]
   145b4:	687a      	ldr	r2, [r7, #4]
   145b6:	7c12      	ldrb	r2, [r2, #16]
   145b8:	431a      	orrs	r2, r3
   145ba:	687b      	ldr	r3, [r7, #4]
   145bc:	60da      	str	r2, [r3, #12]
	value|=(uint32_t)((FlipByte(0x1d)))<<19;
   145be:	687b      	ldr	r3, [r7, #4]
   145c0:	681b      	ldr	r3, [r3, #0]
   145c2:	3b0c      	subs	r3, #12
   145c4:	681b      	ldr	r3, [r3, #0]
   145c6:	461a      	mov	r2, r3
   145c8:	687b      	ldr	r3, [r7, #4]
   145ca:	4413      	add	r3, r2
   145cc:	681b      	ldr	r3, [r3, #0]
   145ce:	681b      	ldr	r3, [r3, #0]
   145d0:	687a      	ldr	r2, [r7, #4]
   145d2:	6812      	ldr	r2, [r2, #0]
   145d4:	3a0c      	subs	r2, #12
   145d6:	6812      	ldr	r2, [r2, #0]
   145d8:	4611      	mov	r1, r2
   145da:	687a      	ldr	r2, [r7, #4]
   145dc:	440a      	add	r2, r1
   145de:	211d      	movs	r1, #29
   145e0:	4610      	mov	r0, r2
   145e2:	4798      	blx	r3
   145e4:	4603      	mov	r3, r0
   145e6:	04db      	lsls	r3, r3, #19
   145e8:	687a      	ldr	r2, [r7, #4]
   145ea:	68d2      	ldr	r2, [r2, #12]
   145ec:	431a      	orrs	r2, r3
   145ee:	687b      	ldr	r3, [r7, #4]
   145f0:	60da      	str	r2, [r3, #12]
	value=MakeEvenParity(value);
   145f2:	687b      	ldr	r3, [r7, #4]
   145f4:	68db      	ldr	r3, [r3, #12]
   145f6:	4619      	mov	r1, r3
   145f8:	6878      	ldr	r0, [r7, #4]
   145fa:	4b05      	ldr	r3, [pc, #20]	; (14610 <_ZN14Protocol_Class12MakeLabel270Em+0xa4>)
   145fc:	4798      	blx	r3
   145fe:	4602      	mov	r2, r0
   14600:	687b      	ldr	r3, [r7, #4]
   14602:	60da      	str	r2, [r3, #12]
	return value;
   14604:	687b      	ldr	r3, [r7, #4]
   14606:	68db      	ldr	r3, [r3, #12]
	
}
   14608:	4618      	mov	r0, r3
   1460a:	3708      	adds	r7, #8
   1460c:	46bd      	mov	sp, r7
   1460e:	bd80      	pop	{r7, pc}
   14610:	00014615 	.word	0x00014615

00014614 <_ZN14Protocol_Class14MakeEvenParityEm>:
uint32_t Protocol_Class::MakeEvenParity(uint32_t data){
   14614:	b580      	push	{r7, lr}
   14616:	b082      	sub	sp, #8
   14618:	af00      	add	r7, sp, #0
   1461a:	6078      	str	r0, [r7, #4]
   1461c:	6039      	str	r1, [r7, #0]
	if (FindParity(data))
   1461e:	687b      	ldr	r3, [r7, #4]
   14620:	681b      	ldr	r3, [r3, #0]
   14622:	3b0c      	subs	r3, #12
   14624:	681b      	ldr	r3, [r3, #0]
   14626:	461a      	mov	r2, r3
   14628:	687b      	ldr	r3, [r7, #4]
   1462a:	4413      	add	r3, r2
   1462c:	6839      	ldr	r1, [r7, #0]
   1462e:	4618      	mov	r0, r3
   14630:	4b06      	ldr	r3, [pc, #24]	; (1464c <_ZN14Protocol_Class14MakeEvenParityEm+0x38>)
   14632:	4798      	blx	r3
   14634:	4603      	mov	r3, r0
   14636:	2b00      	cmp	r3, #0
   14638:	d003      	beq.n	14642 <_ZN14Protocol_Class14MakeEvenParityEm+0x2e>
	{
		data|=0x01<<31;
   1463a:	683b      	ldr	r3, [r7, #0]
   1463c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   14640:	603b      	str	r3, [r7, #0]
	} 
	else
	{
		
	}
	return data;
   14642:	683b      	ldr	r3, [r7, #0]
   14644:	4618      	mov	r0, r3
   14646:	3708      	adds	r7, #8
   14648:	46bd      	mov	sp, r7
   1464a:	bd80      	pop	{r7, pc}
   1464c:	0001319d 	.word	0x0001319d

00014650 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   14650:	b480      	push	{r7}
   14652:	b083      	sub	sp, #12
   14654:	af00      	add	r7, sp, #0
   14656:	6078      	str	r0, [r7, #4]
    return (void *)0;
   14658:	2300      	movs	r3, #0
	}
   1465a:	4618      	mov	r0, r3
   1465c:	370c      	adds	r7, #12
   1465e:	46bd      	mov	sp, r7
   14660:	bc80      	pop	{r7}
   14662:	4770      	bx	lr

00014664 <free>:
//............................................................................
extern "C" void free(void *)
	{
   14664:	b480      	push	{r7}
   14666:	b083      	sub	sp, #12
   14668:	af00      	add	r7, sp, #0
   1466a:	6078      	str	r0, [r7, #4]
	}
   1466c:	bf00      	nop
   1466e:	370c      	adds	r7, #12
   14670:	46bd      	mov	sp, r7
   14672:	bc80      	pop	{r7}
   14674:	4770      	bx	lr

00014676 <_sbrk>:

extern "C" void *_sbrk (ptrdiff_t)
	{
   14676:	b480      	push	{r7}
   14678:	b083      	sub	sp, #12
   1467a:	af00      	add	r7, sp, #0
   1467c:	6078      	str	r0, [r7, #4]
    return (void *)0;
   1467e:	2300      	movs	r3, #0
	}
   14680:	4618      	mov	r0, r3
   14682:	370c      	adds	r7, #12
   14684:	46bd      	mov	sp, r7
   14686:	bc80      	pop	{r7}
   14688:	4770      	bx	lr

0001468a <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   1468a:	b480      	push	{r7}
   1468c:	af00      	add	r7, sp, #0
		}
   1468e:	bf00      	nop
   14690:	46bd      	mov	sp, r7
   14692:	bc80      	pop	{r7}
   14694:	4770      	bx	lr
	...

00014698 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
   14698:	b580      	push	{r7, lr}
   1469a:	b082      	sub	sp, #8
   1469c:	af00      	add	r7, sp, #0
   1469e:	6078      	str	r0, [r7, #4]
	free(p);
   146a0:	6878      	ldr	r0, [r7, #4]
   146a2:	4b03      	ldr	r3, [pc, #12]	; (146b0 <_ZdlPv+0x18>)
   146a4:	4798      	blx	r3
	}
   146a6:	bf00      	nop
   146a8:	3708      	adds	r7, #8
   146aa:	46bd      	mov	sp, r7
   146ac:	bd80      	pop	{r7, pc}
   146ae:	bf00      	nop
   146b0:	00014665 	.word	0x00014665

000146b4 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
   146b4:	b480      	push	{r7}
   146b6:	b083      	sub	sp, #12
   146b8:	af00      	add	r7, sp, #0
   146ba:	6078      	str	r0, [r7, #4]
   146bc:	687b      	ldr	r3, [r7, #4]
   146be:	4618      	mov	r0, r3
   146c0:	370c      	adds	r7, #12
   146c2:	46bd      	mov	sp, r7
   146c4:	bc80      	pop	{r7}
   146c6:	4770      	bx	lr

000146c8 <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
   146c8:	b480      	push	{r7}
   146ca:	b083      	sub	sp, #12
   146cc:	af00      	add	r7, sp, #0
   146ce:	6078      	str	r0, [r7, #4]
   146d0:	687b      	ldr	r3, [r7, #4]
   146d2:	4618      	mov	r0, r3
   146d4:	370c      	adds	r7, #12
   146d6:	46bd      	mov	sp, r7
   146d8:	bc80      	pop	{r7}
   146da:	4770      	bx	lr

000146dc <_ZN11Diagnostics12troubleshootEhb>:
#include "diagnostics.h"
#include "CDC_Class.h"


//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
   146dc:	b580      	push	{r7, lr}
   146de:	b084      	sub	sp, #16
   146e0:	af00      	add	r7, sp, #0
   146e2:	6078      	str	r0, [r7, #4]
   146e4:	460b      	mov	r3, r1
   146e6:	70fb      	strb	r3, [r7, #3]
   146e8:	4613      	mov	r3, r2
   146ea:	70bb      	strb	r3, [r7, #2]
  bool _printoverride;
  errorcode = _code;
   146ec:	687b      	ldr	r3, [r7, #4]
   146ee:	78fa      	ldrb	r2, [r7, #3]
   146f0:	701a      	strb	r2, [r3, #0]
  _printoverride = true;
#elif defined (RUNDIAGNOSTIC) && defined (ARDUINO_ARCH_AVR)
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
   146f2:	78bb      	ldrb	r3, [r7, #2]
   146f4:	73fb      	strb	r3, [r7, #15]
#endif
  if (_printoverride) {
   146f6:	7bfb      	ldrb	r3, [r7, #15]
   146f8:	2b00      	cmp	r3, #0
   146fa:	f000 80ba 	beq.w	14872 <_ZN11Diagnostics12troubleshootEhb+0x196>
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
   146fe:	78fb      	ldrb	r3, [r7, #3]
   14700:	2b14      	cmp	r3, #20
   14702:	f200 80a2 	bhi.w	1484a <_ZN11Diagnostics12troubleshootEhb+0x16e>
   14706:	a201      	add	r2, pc, #4	; (adr r2, 1470c <_ZN11Diagnostics12troubleshootEhb+0x30>)
   14708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1470c:	00014761 	.word	0x00014761
   14710:	00014775 	.word	0x00014775
   14714:	0001477f 	.word	0x0001477f
   14718:	00014789 	.word	0x00014789
   1471c:	00014793 	.word	0x00014793
   14720:	000147a5 	.word	0x000147a5
   14724:	000147af 	.word	0x000147af
   14728:	000147c1 	.word	0x000147c1
   1472c:	000147d3 	.word	0x000147d3
   14730:	000147e7 	.word	0x000147e7
   14734:	000147f1 	.word	0x000147f1
   14738:	0001476b 	.word	0x0001476b
   1473c:	000147dd 	.word	0x000147dd
   14740:	000147fb 	.word	0x000147fb
   14744:	00014805 	.word	0x00014805
   14748:	0001480f 	.word	0x0001480f
   1474c:	00014819 	.word	0x00014819
   14750:	00014823 	.word	0x00014823
   14754:	0001482d 	.word	0x0001482d
   14758:	00014837 	.word	0x00014837
   1475c:	00014841 	.word	0x00014841
      case SUCCESS:
      usb.println(F("Function executed successfully"));
   14760:	4946      	ldr	r1, [pc, #280]	; (1487c <_ZN11Diagnostics12troubleshootEhb+0x1a0>)
   14762:	4847      	ldr	r0, [pc, #284]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14764:	4b47      	ldr	r3, [pc, #284]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14766:	4798      	blx	r3
      break;
   14768:	e074      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NORESPONSE:
      usb.println(F("Check your wiring. Flash chip is non-responsive."));
   1476a:	4947      	ldr	r1, [pc, #284]	; (14888 <_ZN11Diagnostics12troubleshootEhb+0x1ac>)
   1476c:	4844      	ldr	r0, [pc, #272]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1476e:	4b45      	ldr	r3, [pc, #276]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14770:	4798      	blx	r3
      break;
   14772:	e06f      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CALLBEGIN:
      usb.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
   14774:	4945      	ldr	r1, [pc, #276]	; (1488c <_ZN11Diagnostics12troubleshootEhb+0x1b0>)
   14776:	4842      	ldr	r0, [pc, #264]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14778:	4b42      	ldr	r3, [pc, #264]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1477a:	4798      	blx	r3
      break;
   1477c:	e06a      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCHIP:
      usb.println(F("Unable to identify chip. Are you sure this chip is supported?"));
   1477e:	4944      	ldr	r1, [pc, #272]	; (14890 <_ZN11Diagnostics12troubleshootEhb+0x1b4>)
   14780:	483f      	ldr	r0, [pc, #252]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14782:	4b40      	ldr	r3, [pc, #256]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14784:	4798      	blx	r3
      //usb.println(F("Chip details:"));
      //TODO: Insert a diagnostics subroutine here.
      break;
   14786:	e065      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCAP:
      usb.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
   14788:	4942      	ldr	r1, [pc, #264]	; (14894 <_ZN11Diagnostics12troubleshootEhb+0x1b8>)
   1478a:	483d      	ldr	r0, [pc, #244]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1478c:	4b3d      	ldr	r3, [pc, #244]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1478e:	4798      	blx	r3
      break;
   14790:	e060      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPBUSY:
      usb.println(F("Chip is busy."));
   14792:	4941      	ldr	r1, [pc, #260]	; (14898 <_ZN11Diagnostics12troubleshootEhb+0x1bc>)
   14794:	483a      	ldr	r0, [pc, #232]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14796:	4b3b      	ldr	r3, [pc, #236]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14798:	4798      	blx	r3
      usb.println(F("Make sure all pins have been connected properly"));
   1479a:	4940      	ldr	r1, [pc, #256]	; (1489c <_ZN11Diagnostics12troubleshootEhb+0x1c0>)
   1479c:	4838      	ldr	r0, [pc, #224]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1479e:	4b39      	ldr	r3, [pc, #228]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147a0:	4798      	blx	r3
      break;
   147a2:	e057      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case OUTOFBOUNDS:
      usb.println(F("Page overflow has been disabled and the address called exceeds the memory"));
   147a4:	493e      	ldr	r1, [pc, #248]	; (148a0 <_ZN11Diagnostics12troubleshootEhb+0x1c4>)
   147a6:	4836      	ldr	r0, [pc, #216]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147a8:	4b36      	ldr	r3, [pc, #216]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147aa:	4798      	blx	r3
      break;
   147ac:	e052      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CANTENWRITE:
      usb.println(F("Unable to Enable Writing to chip."));
   147ae:	493d      	ldr	r1, [pc, #244]	; (148a4 <_ZN11Diagnostics12troubleshootEhb+0x1c8>)
   147b0:	4833      	ldr	r0, [pc, #204]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147b2:	4b34      	ldr	r3, [pc, #208]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147b4:	4798      	blx	r3
      usb.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
   147b6:	493c      	ldr	r1, [pc, #240]	; (148a8 <_ZN11Diagnostics12troubleshootEhb+0x1cc>)
   147b8:	4831      	ldr	r0, [pc, #196]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147ba:	4b32      	ldr	r3, [pc, #200]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147bc:	4798      	blx	r3
      break;
   147be:	e049      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case PREVWRITTEN:
      usb.println(F("This sector already contains data."));
   147c0:	493a      	ldr	r1, [pc, #232]	; (148ac <_ZN11Diagnostics12troubleshootEhb+0x1d0>)
   147c2:	482f      	ldr	r0, [pc, #188]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147c4:	4b2f      	ldr	r3, [pc, #188]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147c6:	4798      	blx	r3
      usb.println(F("Please make sure the sectors being written to are erased."));
   147c8:	4939      	ldr	r1, [pc, #228]	; (148b0 <_ZN11Diagnostics12troubleshootEhb+0x1d4>)
   147ca:	482d      	ldr	r0, [pc, #180]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147cc:	4b2d      	ldr	r3, [pc, #180]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147ce:	4798      	blx	r3
      break;
   147d0:	e040      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case LOWRAM:
      usb.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
   147d2:	4938      	ldr	r1, [pc, #224]	; (148b4 <_ZN11Diagnostics12troubleshootEhb+0x1d8>)
   147d4:	482a      	ldr	r0, [pc, #168]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147d6:	4b2b      	ldr	r3, [pc, #172]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147d8:	4798      	blx	r3
      /*#if defined (ARDUINO_ARCH_SAM)
        usb.print(F("Current Free SRAM: "));
        usb.println(freeRAM());
      #endif*/
      break;
   147da:	e03b      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNSUPPORTEDFUNC:
      usb.println(F("This function is not supported by the flash memory hardware."));
   147dc:	4936      	ldr	r1, [pc, #216]	; (148b8 <_ZN11Diagnostics12troubleshootEhb+0x1dc>)
   147de:	4828      	ldr	r0, [pc, #160]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147e0:	4b28      	ldr	r3, [pc, #160]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147e2:	4798      	blx	r3
      break;
   147e4:	e036      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case SYSSUSPEND:
      usb.println(F("Unable to suspend/resume operation."));
   147e6:	4935      	ldr	r1, [pc, #212]	; (148bc <_ZN11Diagnostics12troubleshootEhb+0x1e0>)
   147e8:	4825      	ldr	r0, [pc, #148]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147ea:	4b26      	ldr	r3, [pc, #152]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147ec:	4798      	blx	r3
      break;
   147ee:	e031      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case ERRORCHKFAIL:
      usb.println(F("Write Function has failed errorcheck."));
   147f0:	4933      	ldr	r1, [pc, #204]	; (148c0 <_ZN11Diagnostics12troubleshootEhb+0x1e4>)
   147f2:	4823      	ldr	r0, [pc, #140]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147f4:	4b23      	ldr	r3, [pc, #140]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147f6:	4798      	blx	r3
      break;
   147f8:	e02c      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO4BYTE:
      usb.println(F("Unable to enable 4-byte addressing."));
   147fa:	4932      	ldr	r1, [pc, #200]	; (148c4 <_ZN11Diagnostics12troubleshootEhb+0x1e8>)
   147fc:	4820      	ldr	r0, [pc, #128]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147fe:	4b21      	ldr	r3, [pc, #132]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14800:	4798      	blx	r3
      break;
   14802:	e027      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO3BYTE:
      usb.println(F("Unable to disable 4-byte addressing."));
   14804:	4930      	ldr	r1, [pc, #192]	; (148c8 <_ZN11Diagnostics12troubleshootEhb+0x1ec>)
   14806:	481e      	ldr	r0, [pc, #120]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14808:	4b1e      	ldr	r3, [pc, #120]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1480a:	4798      	blx	r3
      break;
   1480c:	e022      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPISPOWEREDDOWN:
      usb.println(F("The chip is currently powered down."));
   1480e:	492f      	ldr	r1, [pc, #188]	; (148cc <_ZN11Diagnostics12troubleshootEhb+0x1f0>)
   14810:	481b      	ldr	r0, [pc, #108]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14812:	4b1c      	ldr	r3, [pc, #112]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14814:	4798      	blx	r3
      break;
   14816:	e01d      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDP:
      usb.println(F("The Flash chip does not support SFDP."));
   14818:	492d      	ldr	r1, [pc, #180]	; (148d0 <_ZN11Diagnostics12troubleshootEhb+0x1f4>)
   1481a:	4819      	ldr	r0, [pc, #100]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1481c:	4b19      	ldr	r3, [pc, #100]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1481e:	4798      	blx	r3
      break;
   14820:	e018      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASEPARAM:
      usb.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
   14822:	492c      	ldr	r1, [pc, #176]	; (148d4 <_ZN11Diagnostics12troubleshootEhb+0x1f8>)
   14824:	4816      	ldr	r0, [pc, #88]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14826:	4b17      	ldr	r3, [pc, #92]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14828:	4798      	blx	r3
      break;
   1482a:	e013      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASETIME:
      usb.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
   1482c:	492a      	ldr	r1, [pc, #168]	; (148d8 <_ZN11Diagnostics12troubleshootEhb+0x1fc>)
   1482e:	4814      	ldr	r0, [pc, #80]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14830:	4b14      	ldr	r3, [pc, #80]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14832:	4798      	blx	r3
      break;
   14834:	e00e      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPPROGRAMTIMEPARAM:
      usb.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
   14836:	4929      	ldr	r1, [pc, #164]	; (148dc <_ZN11Diagnostics12troubleshootEhb+0x200>)
   14838:	4811      	ldr	r0, [pc, #68]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1483a:	4b12      	ldr	r3, [pc, #72]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1483c:	4798      	blx	r3
      break;
   1483e:	e009      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOCHIPSELECTDECLARED:
      usb.println(F("No Chip Select pin defined in the custom SPI Array."));
   14840:	4927      	ldr	r1, [pc, #156]	; (148e0 <_ZN11Diagnostics12troubleshootEhb+0x204>)
   14842:	480f      	ldr	r0, [pc, #60]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14844:	4b0f      	ldr	r3, [pc, #60]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14846:	4798      	blx	r3
      break;
   14848:	e004      	b.n	14854 <_ZN11Diagnostics12troubleshootEhb+0x178>

      default:
      usb.println(F("Unknown error"));
   1484a:	4926      	ldr	r1, [pc, #152]	; (148e4 <_ZN11Diagnostics12troubleshootEhb+0x208>)
   1484c:	480c      	ldr	r0, [pc, #48]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1484e:	4b0d      	ldr	r3, [pc, #52]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14850:	4798      	blx	r3
      break;
   14852:	bf00      	nop
    }
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
   14854:	78fb      	ldrb	r3, [r7, #3]
   14856:	2b0a      	cmp	r3, #10
   14858:	d008      	beq.n	1486c <_ZN11Diagnostics12troubleshootEhb+0x190>
   1485a:	78fb      	ldrb	r3, [r7, #3]
   1485c:	2b06      	cmp	r3, #6
   1485e:	d005      	beq.n	1486c <_ZN11Diagnostics12troubleshootEhb+0x190>
   14860:	78fb      	ldrb	r3, [r7, #3]
   14862:	2b02      	cmp	r3, #2
   14864:	d002      	beq.n	1486c <_ZN11Diagnostics12troubleshootEhb+0x190>
   14866:	78fb      	ldrb	r3, [r7, #3]
   14868:	2b0b      	cmp	r3, #11
   1486a:	d102      	bne.n	14872 <_ZN11Diagnostics12troubleshootEhb+0x196>
      _printSupportLink();
   1486c:	6878      	ldr	r0, [r7, #4]
   1486e:	4b1e      	ldr	r3, [pc, #120]	; (148e8 <_ZN11Diagnostics12troubleshootEhb+0x20c>)
   14870:	4798      	blx	r3
    }
  #endif
  }
}
   14872:	bf00      	nop
   14874:	3710      	adds	r7, #16
   14876:	46bd      	mov	sp, r7
   14878:	bd80      	pop	{r7, pc}
   1487a:	bf00      	nop
   1487c:	000210e4 	.word	0x000210e4
   14880:	2000942c 	.word	0x2000942c
   14884:	00017e89 	.word	0x00017e89
   14888:	00021104 	.word	0x00021104
   1488c:	00021138 	.word	0x00021138
   14890:	00021178 	.word	0x00021178
   14894:	000211b8 	.word	0x000211b8
   14898:	00021250 	.word	0x00021250
   1489c:	00021260 	.word	0x00021260
   148a0:	00021290 	.word	0x00021290
   148a4:	000212dc 	.word	0x000212dc
   148a8:	00021300 	.word	0x00021300
   148ac:	00021344 	.word	0x00021344
   148b0:	00021368 	.word	0x00021368
   148b4:	000213a4 	.word	0x000213a4
   148b8:	000213f4 	.word	0x000213f4
   148bc:	00021434 	.word	0x00021434
   148c0:	00021458 	.word	0x00021458
   148c4:	00021480 	.word	0x00021480
   148c8:	000214a4 	.word	0x000214a4
   148cc:	000214cc 	.word	0x000214cc
   148d0:	000214f0 	.word	0x000214f0
   148d4:	00021518 	.word	0x00021518
   148d8:	00021564 	.word	0x00021564
   148dc:	000215b4 	.word	0x000215b4
   148e0:	00021604 	.word	0x00021604
   148e4:	00021638 	.word	0x00021638
   148e8:	000148ed 	.word	0x000148ed

000148ec <_ZN11Diagnostics17_printSupportLinkEv>:
		usb.print(F("0"));
	}
	usb.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
   148ec:	b580      	push	{r7, lr}
   148ee:	b082      	sub	sp, #8
   148f0:	af00      	add	r7, sp, #0
   148f2:	6078      	str	r0, [r7, #4]
	usb.print(F("If this does not help resolve/clarify this issue, "));
   148f4:	4905      	ldr	r1, [pc, #20]	; (1490c <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
   148f6:	4806      	ldr	r0, [pc, #24]	; (14910 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   148f8:	4b06      	ldr	r3, [pc, #24]	; (14914 <_ZN11Diagnostics17_printSupportLinkEv+0x28>)
   148fa:	4798      	blx	r3
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
   148fc:	4906      	ldr	r1, [pc, #24]	; (14918 <_ZN11Diagnostics17_printSupportLinkEv+0x2c>)
   148fe:	4804      	ldr	r0, [pc, #16]	; (14910 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   14900:	4b06      	ldr	r3, [pc, #24]	; (1491c <_ZN11Diagnostics17_printSupportLinkEv+0x30>)
   14902:	4798      	blx	r3
}
   14904:	bf00      	nop
   14906:	3708      	adds	r7, #8
   14908:	46bd      	mov	sp, r7
   1490a:	bd80      	pop	{r7, pc}
   1490c:	0002165c 	.word	0x0002165c
   14910:	2000942c 	.word	0x2000942c
   14914:	00017ddd 	.word	0x00017ddd
   14918:	00021690 	.word	0x00021690
   1491c:	00017e89 	.word	0x00017e89

00014920 <_Z41__static_initialization_and_destruction_0ii>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
   14920:	b580      	push	{r7, lr}
   14922:	b082      	sub	sp, #8
   14924:	af00      	add	r7, sp, #0
   14926:	6078      	str	r0, [r7, #4]
   14928:	6039      	str	r1, [r7, #0]
   1492a:	687b      	ldr	r3, [r7, #4]
   1492c:	2b01      	cmp	r3, #1
   1492e:	d114      	bne.n	1495a <_Z41__static_initialization_and_destruction_0ii+0x3a>
   14930:	683b      	ldr	r3, [r7, #0]
   14932:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14936:	4293      	cmp	r3, r2
   14938:	d10f      	bne.n	1495a <_Z41__static_initialization_and_destruction_0ii+0x3a>
   1493a:	480a      	ldr	r0, [pc, #40]	; (14964 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1493c:	4b0a      	ldr	r3, [pc, #40]	; (14968 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1493e:	4798      	blx	r3
   14940:	4a0a      	ldr	r2, [pc, #40]	; (1496c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   14942:	490b      	ldr	r1, [pc, #44]	; (14970 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   14944:	4807      	ldr	r0, [pc, #28]	; (14964 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   14946:	4b0b      	ldr	r3, [pc, #44]	; (14974 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   14948:	4798      	blx	r3
   1494a:	480b      	ldr	r0, [pc, #44]	; (14978 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   1494c:	4b0b      	ldr	r3, [pc, #44]	; (1497c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1494e:	4798      	blx	r3
   14950:	4a06      	ldr	r2, [pc, #24]	; (1496c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   14952:	490b      	ldr	r1, [pc, #44]	; (14980 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   14954:	4808      	ldr	r0, [pc, #32]	; (14978 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   14956:	4b07      	ldr	r3, [pc, #28]	; (14974 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   14958:	4798      	blx	r3
   1495a:	bf00      	nop
   1495c:	3708      	adds	r7, #8
   1495e:	46bd      	mov	sp, r7
   14960:	bd80      	pop	{r7, pc}
   14962:	bf00      	nop
   14964:	2000942c 	.word	0x2000942c
   14968:	000178dd 	.word	0x000178dd
   1496c:	20000000 	.word	0x20000000
   14970:	00017925 	.word	0x00017925
   14974:	0001949d 	.word	0x0001949d
   14978:	2000948c 	.word	0x2000948c
   1497c:	000146b5 	.word	0x000146b5
   14980:	000146c9 	.word	0x000146c9

00014984 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
   14984:	b580      	push	{r7, lr}
   14986:	af00      	add	r7, sp, #0
   14988:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1498c:	2001      	movs	r0, #1
   1498e:	4b01      	ldr	r3, [pc, #4]	; (14994 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
   14990:	4798      	blx	r3
   14992:	bd80      	pop	{r7, pc}
   14994:	00014921 	.word	0x00014921

00014998 <_ZL14EventTimerTaskPK10timer_task>:
#define CHECK_EVENT_PERIOD 50
#endif
const tick_t	forever = 0x7fffffff;
EventHandler_Class	*ptrEventHandlerClass;

static void	EventTimerTask(const struct timer_task *const timer_task){
   14998:	b480      	push	{r7}
   1499a:	b083      	sub	sp, #12
   1499c:	af00      	add	r7, sp, #0
   1499e:	6078      	str	r0, [r7, #4]
	ptrEventHandlerClass->eventTimeout=true;
   149a0:	4b04      	ldr	r3, [pc, #16]	; (149b4 <_ZL14EventTimerTaskPK10timer_task+0x1c>)
   149a2:	681b      	ldr	r3, [r3, #0]
   149a4:	2201      	movs	r2, #1
   149a6:	741a      	strb	r2, [r3, #16]
}
   149a8:	bf00      	nop
   149aa:	370c      	adds	r7, #12
   149ac:	46bd      	mov	sp, r7
   149ae:	bc80      	pop	{r7}
   149b0:	4770      	bx	lr
   149b2:	bf00      	nop
   149b4:	20009c94 	.word	0x20009c94

000149b8 <_ZL15EventTimerTicksPK10timer_task>:

static void EventTimerTicks(const struct timer_task *const timer_task)
{
   149b8:	b480      	push	{r7}
   149ba:	b083      	sub	sp, #12
   149bc:	af00      	add	r7, sp, #0
   149be:	6078      	str	r0, [r7, #4]
	eventTimer.ticks++;
   149c0:	4b04      	ldr	r3, [pc, #16]	; (149d4 <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   149c2:	689b      	ldr	r3, [r3, #8]
   149c4:	3301      	adds	r3, #1
   149c6:	4a03      	ldr	r2, [pc, #12]	; (149d4 <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   149c8:	6093      	str	r3, [r2, #8]
}
   149ca:	bf00      	nop
   149cc:	370c      	adds	r7, #12
   149ce:	46bd      	mov	sp, r7
   149d0:	bc80      	pop	{r7}
   149d2:	4770      	bx	lr
   149d4:	2000a484 	.word	0x2000a484

000149d8 <_ZN18EventHandler_ClassC1Ev>:

// default constructor
EventHandler_Class::EventHandler_Class()
   149d8:	b580      	push	{r7, lr}
   149da:	b082      	sub	sp, #8
   149dc:	af00      	add	r7, sp, #0
   149de:	6078      	str	r0, [r7, #4]
   149e0:	687b      	ldr	r3, [r7, #4]
   149e2:	4618      	mov	r0, r3
   149e4:	4b06      	ldr	r3, [pc, #24]	; (14a00 <_ZN18EventHandler_ClassC1Ev+0x28>)
   149e6:	4798      	blx	r3
{
	ptrEventHandlerClass=this;
   149e8:	4a06      	ldr	r2, [pc, #24]	; (14a04 <_ZN18EventHandler_ClassC1Ev+0x2c>)
   149ea:	687b      	ldr	r3, [r7, #4]
   149ec:	6013      	str	r3, [r2, #0]
	eventQueue = eventStorage;
   149ee:	687b      	ldr	r3, [r7, #4]
   149f0:	4a05      	ldr	r2, [pc, #20]	; (14a08 <_ZN18EventHandler_ClassC1Ev+0x30>)
   149f2:	631a      	str	r2, [r3, #48]	; 0x30
} //EventHandler_Class
   149f4:	687b      	ldr	r3, [r7, #4]
   149f6:	4618      	mov	r0, r3
   149f8:	3708      	adds	r7, #8
   149fa:	46bd      	mov	sp, r7
   149fc:	bd80      	pop	{r7, pc}
   149fe:	bf00      	nop
   14a00:	000002ed 	.word	0x000002ed
   14a04:	20009c94 	.word	0x20009c94
   14a08:	20009490 	.word	0x20009490

00014a0c <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
   14a0c:	b480      	push	{r7}
   14a0e:	b083      	sub	sp, #12
   14a10:	af00      	add	r7, sp, #0
   14a12:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   14a14:	4a04      	ldr	r2, [pc, #16]	; (14a28 <_ZN18EventHandler_ClassD1Ev+0x1c>)
   14a16:	687b      	ldr	r3, [r7, #4]
   14a18:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
   14a1a:	687b      	ldr	r3, [r7, #4]
   14a1c:	4618      	mov	r0, r3
   14a1e:	370c      	adds	r7, #12
   14a20:	46bd      	mov	sp, r7
   14a22:	bc80      	pop	{r7}
   14a24:	4770      	bx	lr
   14a26:	bf00      	nop
   14a28:	20009c94 	.word	0x20009c94

00014a2c <_ZN18EventHandler_Class4InitEv>:



bool EventHandler_Class::Init(void)
{
   14a2c:	b580      	push	{r7, lr}
   14a2e:	b084      	sub	sp, #16
   14a30:	af00      	add	r7, sp, #0
   14a32:	6078      	str	r0, [r7, #4]
	int16	i;
	eventTimeout=false;
   14a34:	687b      	ldr	r3, [r7, #4]
   14a36:	2200      	movs	r2, #0
   14a38:	741a      	strb	r2, [r3, #16]
	eventsInUse=0;
   14a3a:	687b      	ldr	r3, [r7, #4]
   14a3c:	2200      	movs	r2, #0
   14a3e:	61da      	str	r2, [r3, #28]
	eventsInUsePeak=0;
   14a40:	687b      	ldr	r3, [r7, #4]
   14a42:	2200      	movs	r2, #0
   14a44:	621a      	str	r2, [r3, #32]
	eventCollisions=0;
   14a46:	687b      	ldr	r3, [r7, #4]
   14a48:	2200      	movs	r2, #0
   14a4a:	625a      	str	r2, [r3, #36]	; 0x24
	eventEvalCollisions=0;
   14a4c:	687b      	ldr	r3, [r7, #4]
   14a4e:	2200      	movs	r2, #0
   14a50:	629a      	str	r2, [r3, #40]	; 0x28
	eventQueueUnderflow=0;
   14a52:	687b      	ldr	r3, [r7, #4]
   14a54:	2200      	movs	r2, #0
   14a56:	62da      	str	r2, [r3, #44]	; 0x2c

	usb << "initializeEvents\r";

	#endif

	for (i=1; i<sizeOfEventQueue; i++)
   14a58:	2301      	movs	r3, #1
   14a5a:	81fb      	strh	r3, [r7, #14]
   14a5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14a60:	2b7f      	cmp	r3, #127	; 0x7f
   14a62:	dc1b      	bgt.n	14a9c <_ZN18EventHandler_Class4InitEv+0x70>
	{
		eventStorage[i].next = (event*)NULL;
   14a64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14a68:	4a15      	ldr	r2, [pc, #84]	; (14ac0 <_ZN18EventHandler_Class4InitEv+0x94>)
   14a6a:	011b      	lsls	r3, r3, #4
   14a6c:	4413      	add	r3, r2
   14a6e:	330c      	adds	r3, #12
   14a70:	2200      	movs	r2, #0
   14a72:	601a      	str	r2, [r3, #0]
		eventStorage[i-1].next = &eventStorage[i];
   14a74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14a78:	3b01      	subs	r3, #1
   14a7a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
   14a7e:	0112      	lsls	r2, r2, #4
   14a80:	490f      	ldr	r1, [pc, #60]	; (14ac0 <_ZN18EventHandler_Class4InitEv+0x94>)
   14a82:	440a      	add	r2, r1
   14a84:	490e      	ldr	r1, [pc, #56]	; (14ac0 <_ZN18EventHandler_Class4InitEv+0x94>)
   14a86:	011b      	lsls	r3, r3, #4
   14a88:	440b      	add	r3, r1
   14a8a:	330c      	adds	r3, #12
   14a8c:	601a      	str	r2, [r3, #0]
	for (i=1; i<sizeOfEventQueue; i++)
   14a8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14a92:	b29b      	uxth	r3, r3
   14a94:	3301      	adds	r3, #1
   14a96:	b29b      	uxth	r3, r3
   14a98:	81fb      	strh	r3, [r7, #14]
   14a9a:	e7df      	b.n	14a5c <_ZN18EventHandler_Class4InitEv+0x30>
	}
	isOK=eventTimer.Init();
   14a9c:	4809      	ldr	r0, [pc, #36]	; (14ac4 <_ZN18EventHandler_Class4InitEv+0x98>)
   14a9e:	4b0a      	ldr	r3, [pc, #40]	; (14ac8 <_ZN18EventHandler_Class4InitEv+0x9c>)
   14aa0:	4798      	blx	r3
   14aa2:	4603      	mov	r3, r0
   14aa4:	461a      	mov	r2, r3
   14aa6:	687b      	ldr	r3, [r7, #4]
   14aa8:	761a      	strb	r2, [r3, #24]
	eventTimer.Start_periodic_task(FUNC_PTR(EventTimerTicks),1);
   14aaa:	2201      	movs	r2, #1
   14aac:	4907      	ldr	r1, [pc, #28]	; (14acc <_ZN18EventHandler_Class4InitEv+0xa0>)
   14aae:	4805      	ldr	r0, [pc, #20]	; (14ac4 <_ZN18EventHandler_Class4InitEv+0x98>)
   14ab0:	4b07      	ldr	r3, [pc, #28]	; (14ad0 <_ZN18EventHandler_Class4InitEv+0xa4>)
   14ab2:	4798      	blx	r3
	{
		usb<< "initializeEvents: event #" << i << " == " << (void*)&eventStorage[i] << ", next == " << (void*)eventStorage[i].next << newline;
	}

	#endif
	return (bool)&eventStorage[0];
   14ab4:	2301      	movs	r3, #1
}
   14ab6:	4618      	mov	r0, r3
   14ab8:	3710      	adds	r7, #16
   14aba:	46bd      	mov	sp, r7
   14abc:	bd80      	pop	{r7, pc}
   14abe:	bf00      	nop
   14ac0:	20009490 	.word	0x20009490
   14ac4:	2000a484 	.word	0x2000a484
   14ac8:	000173f9 	.word	0x000173f9
   14acc:	000149b9 	.word	0x000149b9
   14ad0:	000174bd 	.word	0x000174bd

00014ad4 <_ZN18EventHandler_Class12WaitForEventER5eventttl>:
bool	EventHandler_Class::WaitForEvent(event& e, uint16 eventClass, uint16 eventType, tick_t timeout){
   14ad4:	b590      	push	{r4, r7, lr}
   14ad6:	b087      	sub	sp, #28
   14ad8:	af02      	add	r7, sp, #8
   14ada:	60f8      	str	r0, [r7, #12]
   14adc:	60b9      	str	r1, [r7, #8]
   14ade:	4611      	mov	r1, r2
   14ae0:	461a      	mov	r2, r3
   14ae2:	460b      	mov	r3, r1
   14ae4:	80fb      	strh	r3, [r7, #6]
   14ae6:	4613      	mov	r3, r2
   14ae8:	80bb      	strh	r3, [r7, #4]
	return	WaitForEvent(e,(EventClass)eventClass,(EventType)eventType,timeout);
   14aea:	88b9      	ldrh	r1, [r7, #4]
   14aec:	88fa      	ldrh	r2, [r7, #6]
   14aee:	6a3b      	ldr	r3, [r7, #32]
   14af0:	9300      	str	r3, [sp, #0]
   14af2:	460b      	mov	r3, r1
   14af4:	68b9      	ldr	r1, [r7, #8]
   14af6:	68f8      	ldr	r0, [r7, #12]
   14af8:	4c03      	ldr	r4, [pc, #12]	; (14b08 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x34>)
   14afa:	47a0      	blx	r4
   14afc:	4603      	mov	r3, r0
}
   14afe:	4618      	mov	r0, r3
   14b00:	3714      	adds	r7, #20
   14b02:	46bd      	mov	sp, r7
   14b04:	bd90      	pop	{r4, r7, pc}
   14b06:	bf00      	nop
   14b08:	00014b0d 	.word	0x00014b0d

00014b0c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel>:

bool	EventHandler_Class::WaitForEvent(event& e, EventClass eventClass, EventType eventType, tick_t timeout)
{
   14b0c:	b590      	push	{r4, r7, lr}
   14b0e:	b089      	sub	sp, #36	; 0x24
   14b10:	af00      	add	r7, sp, #0
   14b12:	60f8      	str	r0, [r7, #12]
   14b14:	60b9      	str	r1, [r7, #8]
   14b16:	4611      	mov	r1, r2
   14b18:	461a      	mov	r2, r3
   14b1a:	460b      	mov	r3, r1
   14b1c:	80fb      	strh	r3, [r7, #6]
   14b1e:	4613      	mov	r3, r2
   14b20:	80bb      	strh	r3, [r7, #4]
	bool	result(false);
   14b22:	2300      	movs	r3, #0
   14b24:	77fb      	strb	r3, [r7, #31]
	event*	queue;
	event*	queuePrev(NULL);
   14b26:	2300      	movs	r3, #0
   14b28:	617b      	str	r3, [r7, #20]
	eventTimeout=false;
   14b2a:	68fb      	ldr	r3, [r7, #12]
   14b2c:	2200      	movs	r2, #0
   14b2e:	741a      	strb	r2, [r3, #16]

	
	e.eventClass = eventClass;
   14b30:	68bb      	ldr	r3, [r7, #8]
   14b32:	88fa      	ldrh	r2, [r7, #6]
   14b34:	801a      	strh	r2, [r3, #0]
	e.eventType = eventType;
   14b36:	68bb      	ldr	r3, [r7, #8]
   14b38:	88ba      	ldrh	r2, [r7, #4]
   14b3a:	805a      	strh	r2, [r3, #2]

	
	if (timeout != forever){
   14b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14b3e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   14b42:	4293      	cmp	r3, r2
   14b44:	d006      	beq.n	14b54 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x48>
		eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,(uint32_t)timeout);
   14b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14b48:	461a      	mov	r2, r3
   14b4a:	493a      	ldr	r1, [pc, #232]	; (14c34 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   14b4c:	483a      	ldr	r0, [pc, #232]	; (14c38 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   14b4e:	4b3b      	ldr	r3, [pc, #236]	; (14c3c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   14b50:	4798      	blx	r3
   14b52:	e004      	b.n	14b5e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>

	}else{
		
			eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,CHECK_EVENT_PERIOD);
   14b54:	2232      	movs	r2, #50	; 0x32
   14b56:	4937      	ldr	r1, [pc, #220]	; (14c34 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   14b58:	4837      	ldr	r0, [pc, #220]	; (14c38 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   14b5a:	4b38      	ldr	r3, [pc, #224]	; (14c3c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   14b5c:	4798      	blx	r3
	}

	while (!result && (!eventTimeout))
   14b5e:	7ffb      	ldrb	r3, [r7, #31]
   14b60:	f083 0301 	eor.w	r3, r3, #1
   14b64:	b2db      	uxtb	r3, r3
   14b66:	2b00      	cmp	r3, #0
   14b68:	d009      	beq.n	14b7e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x72>
   14b6a:	68fb      	ldr	r3, [r7, #12]
   14b6c:	7c1b      	ldrb	r3, [r3, #16]
   14b6e:	b2db      	uxtb	r3, r3
   14b70:	f083 0301 	eor.w	r3, r3, #1
   14b74:	b2db      	uxtb	r3, r3
   14b76:	2b00      	cmp	r3, #0
   14b78:	d001      	beq.n	14b7e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x72>
   14b7a:	2301      	movs	r3, #1
   14b7c:	e000      	b.n	14b80 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x74>
   14b7e:	2300      	movs	r3, #0
   14b80:	2b00      	cmp	r3, #0
   14b82:	d052      	beq.n	14c2a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x11e>
	{
		if (eventHandler)
   14b84:	68fb      	ldr	r3, [r7, #12]
   14b86:	695b      	ldr	r3, [r3, #20]
   14b88:	2b00      	cmp	r3, #0
   14b8a:	d002      	beq.n	14b92 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x86>
		{
			eventHandler();
   14b8c:	68fb      	ldr	r3, [r7, #12]
   14b8e:	695b      	ldr	r3, [r3, #20]
   14b90:	4798      	blx	r3
		}

		queue = (event*)mainThreadEventQueue;
   14b92:	4b2b      	ldr	r3, [pc, #172]	; (14c40 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   14b94:	681b      	ldr	r3, [r3, #0]
   14b96:	61bb      	str	r3, [r7, #24]

		while (queue)
   14b98:	69bb      	ldr	r3, [r7, #24]
   14b9a:	2b00      	cmp	r3, #0
   14b9c:	d040      	beq.n	14c20 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x114>
			usb << "     queue->class:     " << (uint16)((*queue).eventClass) << newline;
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
		
			#endif
			if (((e.eventClass == kAnyEventClass) ||(queue->eventClass == e.eventClass))
   14b9e:	68bb      	ldr	r3, [r7, #8]
   14ba0:	881b      	ldrh	r3, [r3, #0]
   14ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14ba6:	4293      	cmp	r3, r2
   14ba8:	d005      	beq.n	14bb6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xaa>
   14baa:	69bb      	ldr	r3, [r7, #24]
   14bac:	881a      	ldrh	r2, [r3, #0]
   14bae:	68bb      	ldr	r3, [r7, #8]
   14bb0:	881b      	ldrh	r3, [r3, #0]
   14bb2:	429a      	cmp	r2, r3
   14bb4:	d12e      	bne.n	14c14 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x108>
			&& ((e.eventType == kAnyEventType) ||	(queue->eventType == e.eventType)))
   14bb6:	68bb      	ldr	r3, [r7, #8]
   14bb8:	885b      	ldrh	r3, [r3, #2]
   14bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14bbe:	4293      	cmp	r3, r2
   14bc0:	d005      	beq.n	14bce <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xc2>
   14bc2:	69bb      	ldr	r3, [r7, #24]
   14bc4:	885a      	ldrh	r2, [r3, #2]
   14bc6:	68bb      	ldr	r3, [r7, #8]
   14bc8:	885b      	ldrh	r3, [r3, #2]
   14bca:	429a      	cmp	r2, r3
   14bcc:	d122      	bne.n	14c14 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x108>
			{
				if (queuePrev)
   14bce:	697b      	ldr	r3, [r7, #20]
   14bd0:	2b00      	cmp	r3, #0
   14bd2:	d004      	beq.n	14bde <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xd2>
				{
					queuePrev->next = queue->next;
   14bd4:	69bb      	ldr	r3, [r7, #24]
   14bd6:	68da      	ldr	r2, [r3, #12]
   14bd8:	697b      	ldr	r3, [r7, #20]
   14bda:	60da      	str	r2, [r3, #12]
   14bdc:	e003      	b.n	14be6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xda>
				}
				else
				{
					mainThreadEventQueue = queue->next;
   14bde:	69bb      	ldr	r3, [r7, #24]
   14be0:	68db      	ldr	r3, [r3, #12]
   14be2:	4a17      	ldr	r2, [pc, #92]	; (14c40 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   14be4:	6013      	str	r3, [r2, #0]
				}
				
				e = *queue;
   14be6:	68ba      	ldr	r2, [r7, #8]
   14be8:	69bb      	ldr	r3, [r7, #24]
   14bea:	4614      	mov	r4, r2
   14bec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14bee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				queue->next = eventQueue;
   14bf2:	68fb      	ldr	r3, [r7, #12]
   14bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   14bf6:	69bb      	ldr	r3, [r7, #24]
   14bf8:	60da      	str	r2, [r3, #12]
				eventQueue = queue;
   14bfa:	68fb      	ldr	r3, [r7, #12]
   14bfc:	69ba      	ldr	r2, [r7, #24]
   14bfe:	631a      	str	r2, [r3, #48]	; 0x30
				
				eventsInUse--;
   14c00:	68fb      	ldr	r3, [r7, #12]
   14c02:	69db      	ldr	r3, [r3, #28]
   14c04:	1e5a      	subs	r2, r3, #1
   14c06:	68fb      	ldr	r3, [r7, #12]
   14c08:	61da      	str	r2, [r3, #28]

				queue = NULL;
   14c0a:	2300      	movs	r3, #0
   14c0c:	61bb      	str	r3, [r7, #24]
				result = true;
   14c0e:	2301      	movs	r3, #1
   14c10:	77fb      	strb	r3, [r7, #31]
   14c12:	e004      	b.n	14c1e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x112>
			}
			else
			{
				queuePrev = queue;
   14c14:	69bb      	ldr	r3, [r7, #24]
   14c16:	617b      	str	r3, [r7, #20]
				queue = queue->next;
   14c18:	69bb      	ldr	r3, [r7, #24]
   14c1a:	68db      	ldr	r3, [r3, #12]
   14c1c:	61bb      	str	r3, [r7, #24]
		while (queue)
   14c1e:	e7bb      	b.n	14b98 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x8c>
	
		
			//while (!eventTimeout);
		
		}
		eventTimer.Remove_task(FUNC_PTR(EventTimerTask));
   14c20:	4904      	ldr	r1, [pc, #16]	; (14c34 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   14c22:	4805      	ldr	r0, [pc, #20]	; (14c38 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   14c24:	4b07      	ldr	r3, [pc, #28]	; (14c44 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x138>)
   14c26:	4798      	blx	r3
	while (!result && (!eventTimeout))
   14c28:	e799      	b.n	14b5e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>
	}
	//eventTimer.stop();
	return result;
   14c2a:	7ffb      	ldrb	r3, [r7, #31]
}
   14c2c:	4618      	mov	r0, r3
   14c2e:	3724      	adds	r7, #36	; 0x24
   14c30:	46bd      	mov	sp, r7
   14c32:	bd90      	pop	{r4, r7, pc}
   14c34:	00014999 	.word	0x00014999
   14c38:	2000a484 	.word	0x2000a484
   14c3c:	000175a1 	.word	0x000175a1
   14c40:	20009c90 	.word	0x20009c90
   14c44:	00017531 	.word	0x00017531

00014c48 <_ZN18EventHandler_Class13SendEventSelfERK5event>:
{
	SendEventSelf(e);
}

void EventHandler_Class::SendEventSelf(const event& e)
{
   14c48:	b580      	push	{r7, lr}
   14c4a:	b084      	sub	sp, #16
   14c4c:	af00      	add	r7, sp, #0
   14c4e:	6078      	str	r0, [r7, #4]
   14c50:	6039      	str	r1, [r7, #0]
	usb << "send event:\r";
	usb << "     class:   " << (uint16)e.eventClass << newline;
	usb << "     type:    " << (uint16)e.eventType << newline;
	
	#endif
	event*	theEvent(eventQueue);
   14c52:	687b      	ldr	r3, [r7, #4]
   14c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14c56:	60bb      	str	r3, [r7, #8]
	
	if (theEvent)
   14c58:	68bb      	ldr	r3, [r7, #8]
   14c5a:	2b00      	cmp	r3, #0
   14c5c:	d035      	beq.n	14cca <_ZN18EventHandler_Class13SendEventSelfERK5event+0x82>
	{
		eventQueue = eventQueue->next;
   14c5e:	687b      	ldr	r3, [r7, #4]
   14c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14c62:	68da      	ldr	r2, [r3, #12]
   14c64:	687b      	ldr	r3, [r7, #4]
   14c66:	631a      	str	r2, [r3, #48]	; 0x30
		theEvent->next = NULL;
   14c68:	68bb      	ldr	r3, [r7, #8]
   14c6a:	2200      	movs	r2, #0
   14c6c:	60da      	str	r2, [r3, #12]
		eventsInUse++;
   14c6e:	687b      	ldr	r3, [r7, #4]
   14c70:	69db      	ldr	r3, [r3, #28]
   14c72:	1c5a      	adds	r2, r3, #1
   14c74:	687b      	ldr	r3, [r7, #4]
   14c76:	61da      	str	r2, [r3, #28]

		event*	threadQueue((event*)mainThreadEventQueue);
   14c78:	4b18      	ldr	r3, [pc, #96]	; (14cdc <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   14c7a:	681b      	ldr	r3, [r3, #0]
   14c7c:	60fb      	str	r3, [r7, #12]
		if (threadQueue == NULL)
   14c7e:	68fb      	ldr	r3, [r7, #12]
   14c80:	2b00      	cmp	r3, #0
   14c82:	d103      	bne.n	14c8c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
		mainThreadEventQueue = theEvent;
   14c84:	4a15      	ldr	r2, [pc, #84]	; (14cdc <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   14c86:	68bb      	ldr	r3, [r7, #8]
   14c88:	6013      	str	r3, [r2, #0]
   14c8a:	e00a      	b.n	14ca2 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
		else
		{
			while (threadQueue->next)
   14c8c:	68fb      	ldr	r3, [r7, #12]
   14c8e:	68db      	ldr	r3, [r3, #12]
   14c90:	2b00      	cmp	r3, #0
   14c92:	d003      	beq.n	14c9c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x54>
			threadQueue = threadQueue->next;
   14c94:	68fb      	ldr	r3, [r7, #12]
   14c96:	68db      	ldr	r3, [r3, #12]
   14c98:	60fb      	str	r3, [r7, #12]
			while (threadQueue->next)
   14c9a:	e7f7      	b.n	14c8c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
			threadQueue->next = theEvent;
   14c9c:	68fb      	ldr	r3, [r7, #12]
   14c9e:	68ba      	ldr	r2, [r7, #8]
   14ca0:	60da      	str	r2, [r3, #12]
			usb << "eventsInUsePeak => " << eventsInUsePeak << newline;
			
		}
		#endif

		(*theEvent).eventClass = e.eventClass;
   14ca2:	683b      	ldr	r3, [r7, #0]
   14ca4:	881a      	ldrh	r2, [r3, #0]
   14ca6:	68bb      	ldr	r3, [r7, #8]
   14ca8:	801a      	strh	r2, [r3, #0]
		(*theEvent).eventType = e.eventType;
   14caa:	683b      	ldr	r3, [r7, #0]
   14cac:	885a      	ldrh	r2, [r3, #2]
   14cae:	68bb      	ldr	r3, [r7, #8]
   14cb0:	805a      	strh	r2, [r3, #2]
		(*theEvent).data = e.data;
   14cb2:	68bb      	ldr	r3, [r7, #8]
   14cb4:	683a      	ldr	r2, [r7, #0]
   14cb6:	6892      	ldr	r2, [r2, #8]
   14cb8:	609a      	str	r2, [r3, #8]
		(*theEvent).timestamp = eventTimer.Get_ticks();
   14cba:	4809      	ldr	r0, [pc, #36]	; (14ce0 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>)
   14cbc:	4b09      	ldr	r3, [pc, #36]	; (14ce4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x9c>)
   14cbe:	4798      	blx	r3
   14cc0:	4603      	mov	r3, r0
   14cc2:	461a      	mov	r2, r3
   14cc4:	68bb      	ldr	r3, [r7, #8]
   14cc6:	605a      	str	r2, [r3, #4]
		usb << "     type:    " << (uint16)e.eventType << newline;
		
		#endif
		eventQueueUnderflow++;
	}
}
   14cc8:	e004      	b.n	14cd4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x8c>
		eventQueueUnderflow++;
   14cca:	687b      	ldr	r3, [r7, #4]
   14ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14cce:	1c5a      	adds	r2, r3, #1
   14cd0:	687b      	ldr	r3, [r7, #4]
   14cd2:	62da      	str	r2, [r3, #44]	; 0x2c
}
   14cd4:	bf00      	nop
   14cd6:	3710      	adds	r7, #16
   14cd8:	46bd      	mov	sp, r7
   14cda:	bd80      	pop	{r7, pc}
   14cdc:	20009c90 	.word	0x20009c90
   14ce0:	2000a484 	.word	0x2000a484
   14ce4:	00017589 	.word	0x00017589

00014ce8 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData>:
	
	SendEventSelf(theEvent);
}

void EventHandler_Class::SendErrorSelf(uint16_t et,const eventData& data)
{
   14ce8:	b580      	push	{r7, lr}
   14cea:	b088      	sub	sp, #32
   14cec:	af00      	add	r7, sp, #0
   14cee:	60f8      	str	r0, [r7, #12]
   14cf0:	460b      	mov	r3, r1
   14cf2:	607a      	str	r2, [r7, #4]
   14cf4:	817b      	strh	r3, [r7, #10]
	event		theEvent;
   14cf6:	f107 0310 	add.w	r3, r7, #16
   14cfa:	4618      	mov	r0, r3
   14cfc:	4b09      	ldr	r3, [pc, #36]	; (14d24 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x3c>)
   14cfe:	4798      	blx	r3
	theEvent.eventClass = kErrorEventClass;
   14d00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14d04:	823b      	strh	r3, [r7, #16]
	theEvent.eventType =(EventType)et ;
   14d06:	897b      	ldrh	r3, [r7, #10]
   14d08:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   14d0a:	687b      	ldr	r3, [r7, #4]
   14d0c:	681b      	ldr	r3, [r3, #0]
   14d0e:	61bb      	str	r3, [r7, #24]
	SendEventSelf(theEvent);
   14d10:	f107 0310 	add.w	r3, r7, #16
   14d14:	4619      	mov	r1, r3
   14d16:	68f8      	ldr	r0, [r7, #12]
   14d18:	4b03      	ldr	r3, [pc, #12]	; (14d28 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x40>)
   14d1a:	4798      	blx	r3
}
   14d1c:	bf00      	nop
   14d1e:	3720      	adds	r7, #32
   14d20:	46bd      	mov	sp, r7
   14d22:	bd80      	pop	{r7, pc}
   14d24:	000002ed 	.word	0x000002ed
   14d28:	00014c49 	.word	0x00014c49

00014d2c <_ZN18EventHandler_Class10CheckEventEv>:
uint32_t EventHandler_Class::CheckEvent(void)
{
   14d2c:	b580      	push	{r7, lr}
   14d2e:	b08a      	sub	sp, #40	; 0x28
   14d30:	af00      	add	r7, sp, #0
   14d32:	6078      	str	r0, [r7, #4]
	
	float	temperatureSMPST = 0.0;	//stores temp value for fan off function
   14d34:	f04f 0300 	mov.w	r3, #0
   14d38:	627b      	str	r3, [r7, #36]	; 0x24
	float 	temperatureExhaust = 0.0;
   14d3a:	f04f 0300 	mov.w	r3, #0
   14d3e:	623b      	str	r3, [r7, #32]
	float	temperatureMagnetron = 0.0;
   14d40:	f04f 0300 	mov.w	r3, #0
   14d44:	61fb      	str	r3, [r7, #28]

	
	#if __DEBUG__ > 4
	usb<< "checkEvent" << newline;
	#endif
	event	e;
   14d46:	f107 030c 	add.w	r3, r7, #12
   14d4a:	4618      	mov	r0, r3
   14d4c:	4b03      	ldr	r3, [pc, #12]	; (14d5c <_ZN18EventHandler_Class10CheckEventEv+0x30>)
   14d4e:	4798      	blx	r3
	//Alive beacon function: i2cAlive is reset by a successful coreI2Cread to true and checked here.
	//If coreI2Cread was unsuccessful I2C is reseted



	return	(uint32_t)eventsInUse;
   14d50:	687b      	ldr	r3, [r7, #4]
   14d52:	69db      	ldr	r3, [r3, #28]
	
}
   14d54:	4618      	mov	r0, r3
   14d56:	3728      	adds	r7, #40	; 0x28
   14d58:	46bd      	mov	sp, r7
   14d5a:	bd80      	pop	{r7, pc}
   14d5c:	000002ed 	.word	0x000002ed

00014d60 <_Z41__static_initialization_and_destruction_0ii>:

	EventHandler_Class	listener;
   14d60:	b5b0      	push	{r4, r5, r7, lr}
   14d62:	b082      	sub	sp, #8
   14d64:	af00      	add	r7, sp, #0
   14d66:	6078      	str	r0, [r7, #4]
   14d68:	6039      	str	r1, [r7, #0]
   14d6a:	687b      	ldr	r3, [r7, #4]
   14d6c:	2b01      	cmp	r3, #1
   14d6e:	d117      	bne.n	14da0 <_Z41__static_initialization_and_destruction_0ii+0x40>
   14d70:	683b      	ldr	r3, [r7, #0]
   14d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14d76:	4293      	cmp	r3, r2
   14d78:	d112      	bne.n	14da0 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
   14d7a:	4b0b      	ldr	r3, [pc, #44]	; (14da8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   14d7c:	247f      	movs	r4, #127	; 0x7f
   14d7e:	461d      	mov	r5, r3
   14d80:	2c00      	cmp	r4, #0
   14d82:	db05      	blt.n	14d90 <_Z41__static_initialization_and_destruction_0ii+0x30>
   14d84:	4628      	mov	r0, r5
   14d86:	4b09      	ldr	r3, [pc, #36]	; (14dac <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   14d88:	4798      	blx	r3
   14d8a:	3510      	adds	r5, #16
   14d8c:	3c01      	subs	r4, #1
   14d8e:	e7f7      	b.n	14d80 <_Z41__static_initialization_and_destruction_0ii+0x20>
	EventHandler_Class	listener;
   14d90:	4807      	ldr	r0, [pc, #28]	; (14db0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   14d92:	4b08      	ldr	r3, [pc, #32]	; (14db4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   14d94:	4798      	blx	r3
   14d96:	4a08      	ldr	r2, [pc, #32]	; (14db8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   14d98:	4908      	ldr	r1, [pc, #32]	; (14dbc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   14d9a:	4805      	ldr	r0, [pc, #20]	; (14db0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   14d9c:	4b08      	ldr	r3, [pc, #32]	; (14dc0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   14d9e:	4798      	blx	r3
   14da0:	bf00      	nop
   14da2:	3708      	adds	r7, #8
   14da4:	46bd      	mov	sp, r7
   14da6:	bdb0      	pop	{r4, r5, r7, pc}
   14da8:	20009490 	.word	0x20009490
   14dac:	000002ed 	.word	0x000002ed
   14db0:	20009ca4 	.word	0x20009ca4
   14db4:	000149d9 	.word	0x000149d9
   14db8:	20000000 	.word	0x20000000
   14dbc:	00014a0d 	.word	0x00014a0d
   14dc0:	0001949d 	.word	0x0001949d

00014dc4 <_GLOBAL__sub_I_maxEventCount>:
   14dc4:	b580      	push	{r7, lr}
   14dc6:	af00      	add	r7, sp, #0
   14dc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14dcc:	2001      	movs	r0, #1
   14dce:	4b01      	ldr	r3, [pc, #4]	; (14dd4 <_GLOBAL__sub_I_maxEventCount+0x10>)
   14dd0:	4798      	blx	r3
   14dd2:	bd80      	pop	{r7, pc}
   14dd4:	00014d61 	.word	0x00014d61

00014dd8 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc>:

I2C_Asyn_Class	*ptrI2C_Asyn_Class;
//static list_descriptor i2cList=NULL;
//i2cList=NULL;
list_descriptor i2cList;
static void GetRelativeClassPointer(i2c_m_async_desc*  i2c){
   14dd8:	b580      	push	{r7, lr}
   14dda:	b084      	sub	sp, #16
   14ddc:	af00      	add	r7, sp, #0
   14dde:	6078      	str	r0, [r7, #4]
	uint32_t  *ptr=(uint32_t*)ptrI2C_Asyn_Class->GetClassPointer(i2c);;
   14de0:	4b08      	ldr	r3, [pc, #32]	; (14e04 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   14de2:	681b      	ldr	r3, [r3, #0]
   14de4:	6879      	ldr	r1, [r7, #4]
   14de6:	4618      	mov	r0, r3
   14de8:	4b07      	ldr	r3, [pc, #28]	; (14e08 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x30>)
   14dea:	4798      	blx	r3
   14dec:	4603      	mov	r3, r0
   14dee:	60fb      	str	r3, [r7, #12]
	I2C_Asyn_Class	*ptrClass=(I2C_Asyn_Class*)ptr;
   14df0:	68fb      	ldr	r3, [r7, #12]
   14df2:	60bb      	str	r3, [r7, #8]
	ptrI2C_Asyn_Class=ptrClass;
   14df4:	4a03      	ldr	r2, [pc, #12]	; (14e04 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   14df6:	68bb      	ldr	r3, [r7, #8]
   14df8:	6013      	str	r3, [r2, #0]
}
   14dfa:	bf00      	nop
   14dfc:	3710      	adds	r7, #16
   14dfe:	46bd      	mov	sp, r7
   14e00:	bd80      	pop	{r7, pc}
   14e02:	bf00      	nop
   14e04:	20009dd8 	.word	0x20009dd8
   14e08:	00015231 	.word	0x00015231

00014e0c <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
   14e0c:	b580      	push	{r7, lr}
   14e0e:	b082      	sub	sp, #8
   14e10:	af00      	add	r7, sp, #0
   14e12:	6078      	str	r0, [r7, #4]
	
	GetRelativeClassPointer(i2c);
   14e14:	6878      	ldr	r0, [r7, #4]
   14e16:	4b05      	ldr	r3, [pc, #20]	; (14e2c <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x20>)
   14e18:	4798      	blx	r3
	ptrI2C_Asyn_Class->txReady=true;
   14e1a:	4b05      	ldr	r3, [pc, #20]	; (14e30 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x24>)
   14e1c:	681b      	ldr	r3, [r3, #0]
   14e1e:	2201      	movs	r2, #1
   14e20:	751a      	strb	r2, [r3, #20]


}
   14e22:	bf00      	nop
   14e24:	3708      	adds	r7, #8
   14e26:	46bd      	mov	sp, r7
   14e28:	bd80      	pop	{r7, pc}
   14e2a:	bf00      	nop
   14e2c:	00014dd9 	.word	0x00014dd9
   14e30:	20009dd8 	.word	0x20009dd8

00014e34 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
   14e34:	b580      	push	{r7, lr}
   14e36:	b082      	sub	sp, #8
   14e38:	af00      	add	r7, sp, #0
   14e3a:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   14e3c:	6878      	ldr	r0, [r7, #4]
   14e3e:	4b05      	ldr	r3, [pc, #20]	; (14e54 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x20>)
   14e40:	4798      	blx	r3
	ptrI2C_Asyn_Class->rxReady=true;
   14e42:	4b05      	ldr	r3, [pc, #20]	; (14e58 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x24>)
   14e44:	681b      	ldr	r3, [r3, #0]
   14e46:	2201      	movs	r2, #1
   14e48:	755a      	strb	r2, [r3, #21]
}
   14e4a:	bf00      	nop
   14e4c:	3708      	adds	r7, #8
   14e4e:	46bd      	mov	sp, r7
   14e50:	bd80      	pop	{r7, pc}
   14e52:	bf00      	nop
   14e54:	00014dd9 	.word	0x00014dd9
   14e58:	20009dd8 	.word	0x20009dd8

00014e5c <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
   14e5c:	b580      	push	{r7, lr}
   14e5e:	b082      	sub	sp, #8
   14e60:	af00      	add	r7, sp, #0
   14e62:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   14e64:	6878      	ldr	r0, [r7, #4]
   14e66:	4b09      	ldr	r3, [pc, #36]	; (14e8c <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
   14e68:	4798      	blx	r3
		ptrI2C_Asyn_Class->Clear_ack();
   14e6a:	4b09      	ldr	r3, [pc, #36]	; (14e90 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   14e6c:	681b      	ldr	r3, [r3, #0]
   14e6e:	4618      	mov	r0, r3
   14e70:	4b08      	ldr	r3, [pc, #32]	; (14e94 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x38>)
   14e72:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
   14e74:	4b06      	ldr	r3, [pc, #24]	; (14e90 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   14e76:	681b      	ldr	r3, [r3, #0]
   14e78:	2201      	movs	r2, #1
   14e7a:	751a      	strb	r2, [r3, #20]
		ptrI2C_Asyn_Class->rxReady=true;
   14e7c:	4b04      	ldr	r3, [pc, #16]	; (14e90 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   14e7e:	681b      	ldr	r3, [r3, #0]
   14e80:	2201      	movs	r2, #1
   14e82:	755a      	strb	r2, [r3, #21]
 }
   14e84:	bf00      	nop
   14e86:	3708      	adds	r7, #8
   14e88:	46bd      	mov	sp, r7
   14e8a:	bd80      	pop	{r7, pc}
   14e8c:	00014dd9 	.word	0x00014dd9
   14e90:	20009dd8 	.word	0x20009dd8
   14e94:	00015115 	.word	0x00015115

00014e98 <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
   14e98:	b580      	push	{r7, lr}
   14e9a:	b082      	sub	sp, #8
   14e9c:	af00      	add	r7, sp, #0
   14e9e:	6078      	str	r0, [r7, #4]
   14ea0:	687b      	ldr	r3, [r7, #4]
   14ea2:	4618      	mov	r0, r3
   14ea4:	4b07      	ldr	r3, [pc, #28]	; (14ec4 <_ZN14I2C_Asyn_ClassC1Ev+0x2c>)
   14ea6:	4798      	blx	r3
{
	ptrI2CAsynDescr=&I2C_EXPANDER;
   14ea8:	687b      	ldr	r3, [r7, #4]
   14eaa:	4a07      	ldr	r2, [pc, #28]	; (14ec8 <_ZN14I2C_Asyn_ClassC1Ev+0x30>)
   14eac:	62da      	str	r2, [r3, #44]	; 0x2c
	ptrClass=this;
   14eae:	687b      	ldr	r3, [r7, #4]
   14eb0:	687a      	ldr	r2, [r7, #4]
   14eb2:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   14eb4:	4a05      	ldr	r2, [pc, #20]	; (14ecc <_ZN14I2C_Asyn_ClassC1Ev+0x34>)
   14eb6:	687b      	ldr	r3, [r7, #4]
   14eb8:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
   14eba:	687b      	ldr	r3, [r7, #4]
   14ebc:	4618      	mov	r0, r3
   14ebe:	3708      	adds	r7, #8
   14ec0:	46bd      	mov	sp, r7
   14ec2:	bd80      	pop	{r7, pc}
   14ec4:	00015149 	.word	0x00015149
   14ec8:	2000aa88 	.word	0x2000aa88
   14ecc:	20009dd8 	.word	0x20009dd8

00014ed0 <_ZN14I2C_Asyn_ClassC1EP16i2c_m_async_desc>:
// default constructor
I2C_Asyn_Class::I2C_Asyn_Class(i2c_m_async_desc *i2c_a)
   14ed0:	b580      	push	{r7, lr}
   14ed2:	b082      	sub	sp, #8
   14ed4:	af00      	add	r7, sp, #0
   14ed6:	6078      	str	r0, [r7, #4]
   14ed8:	6039      	str	r1, [r7, #0]
   14eda:	687b      	ldr	r3, [r7, #4]
   14edc:	4618      	mov	r0, r3
   14ede:	4b0b      	ldr	r3, [pc, #44]	; (14f0c <_ZN14I2C_Asyn_ClassC1EP16i2c_m_async_desc+0x3c>)
   14ee0:	4798      	blx	r3
{
	ptrI2CAsynDescr=i2c_a;
   14ee2:	687b      	ldr	r3, [r7, #4]
   14ee4:	683a      	ldr	r2, [r7, #0]
   14ee6:	62da      	str	r2, [r3, #44]	; 0x2c
	ptrClass=this;
   14ee8:	687b      	ldr	r3, [r7, #4]
   14eea:	687a      	ldr	r2, [r7, #4]
   14eec:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   14eee:	4a08      	ldr	r2, [pc, #32]	; (14f10 <_ZN14I2C_Asyn_ClassC1EP16i2c_m_async_desc+0x40>)
   14ef0:	687b      	ldr	r3, [r7, #4]
   14ef2:	6013      	str	r3, [r2, #0]
	isOK=false;
   14ef4:	687b      	ldr	r3, [r7, #4]
   14ef6:	2200      	movs	r2, #0
   14ef8:	761a      	strb	r2, [r3, #24]
	initiated=false;
   14efa:	687b      	ldr	r3, [r7, #4]
   14efc:	2200      	movs	r2, #0
   14efe:	759a      	strb	r2, [r3, #22]
} //I2C_Asyn_Class
   14f00:	687b      	ldr	r3, [r7, #4]
   14f02:	4618      	mov	r0, r3
   14f04:	3708      	adds	r7, #8
   14f06:	46bd      	mov	sp, r7
   14f08:	bd80      	pop	{r7, pc}
   14f0a:	bf00      	nop
   14f0c:	00015149 	.word	0x00015149
   14f10:	20009dd8 	.word	0x20009dd8

00014f14 <_ZN14I2C_Asyn_ClassD1Ev>:

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
   14f14:	b580      	push	{r7, lr}
   14f16:	b082      	sub	sp, #8
   14f18:	af00      	add	r7, sp, #0
   14f1a:	6078      	str	r0, [r7, #4]
   14f1c:	687b      	ldr	r3, [r7, #4]
   14f1e:	4618      	mov	r0, r3
   14f20:	4b03      	ldr	r3, [pc, #12]	; (14f30 <_ZN14I2C_Asyn_ClassD1Ev+0x1c>)
   14f22:	4798      	blx	r3
{

} //~I2C_Asyn_Class
   14f24:	687b      	ldr	r3, [r7, #4]
   14f26:	4618      	mov	r0, r3
   14f28:	3708      	adds	r7, #8
   14f2a:	46bd      	mov	sp, r7
   14f2c:	bd80      	pop	{r7, pc}
   14f2e:	bf00      	nop
   14f30:	00015169 	.word	0x00015169

00014f34 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
   14f34:	b480      	push	{r7}
   14f36:	b083      	sub	sp, #12
   14f38:	af00      	add	r7, sp, #0
   14f3a:	6078      	str	r0, [r7, #4]
   14f3c:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
   14f3e:	687b      	ldr	r3, [r7, #4]
   14f40:	683a      	ldr	r2, [r7, #0]
   14f42:	62da      	str	r2, [r3, #44]	; 0x2c
	ptrClass=this;
   14f44:	687b      	ldr	r3, [r7, #4]
   14f46:	687a      	ldr	r2, [r7, #4]
   14f48:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   14f4a:	4a04      	ldr	r2, [pc, #16]	; (14f5c <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x28>)
   14f4c:	687b      	ldr	r3, [r7, #4]
   14f4e:	6013      	str	r3, [r2, #0]
}
   14f50:	bf00      	nop
   14f52:	370c      	adds	r7, #12
   14f54:	46bd      	mov	sp, r7
   14f56:	bc80      	pop	{r7}
   14f58:	4770      	bx	lr
   14f5a:	bf00      	nop
   14f5c:	20009dd8 	.word	0x20009dd8

00014f60 <_ZN14I2C_Asyn_Class4InitEv>:

bool	I2C_Asyn_Class::Init(void){
   14f60:	b580      	push	{r7, lr}
   14f62:	b084      	sub	sp, #16
   14f64:	af00      	add	r7, sp, #0
   14f66:	6078      	str	r0, [r7, #4]
	txBuffer=txStaticBuffer;
   14f68:	687b      	ldr	r3, [r7, #4]
   14f6a:	4a2c      	ldr	r2, [pc, #176]	; (1501c <_ZN14I2C_Asyn_Class4InitEv+0xbc>)
   14f6c:	621a      	str	r2, [r3, #32]
	rxBuffer=txStaticBuffer;
   14f6e:	687b      	ldr	r3, [r7, #4]
   14f70:	4a2a      	ldr	r2, [pc, #168]	; (1501c <_ZN14I2C_Asyn_Class4InitEv+0xbc>)
   14f72:	625a      	str	r2, [r3, #36]	; 0x24

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
   14f74:	687b      	ldr	r3, [r7, #4]
   14f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   14f78:	687b      	ldr	r3, [r7, #4]
   14f7a:	3328      	adds	r3, #40	; 0x28
   14f7c:	4619      	mov	r1, r3
   14f7e:	4610      	mov	r0, r2
   14f80:	4b27      	ldr	r3, [pc, #156]	; (15020 <_ZN14I2C_Asyn_Class4InitEv+0xc0>)
   14f82:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
   14f84:	687b      	ldr	r3, [r7, #4]
   14f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14f88:	4618      	mov	r0, r3
   14f8a:	4b26      	ldr	r3, [pc, #152]	; (15024 <_ZN14I2C_Asyn_Class4InitEv+0xc4>)
   14f8c:	4798      	blx	r3
   14f8e:	4603      	mov	r3, r0
   14f90:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
   14f92:	687b      	ldr	r3, [r7, #4]
   14f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14f96:	4a24      	ldr	r2, [pc, #144]	; (15028 <_ZN14I2C_Asyn_Class4InitEv+0xc8>)
   14f98:	2101      	movs	r1, #1
   14f9a:	4618      	mov	r0, r3
   14f9c:	4b23      	ldr	r3, [pc, #140]	; (1502c <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   14f9e:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
   14fa0:	687b      	ldr	r3, [r7, #4]
   14fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14fa4:	4a22      	ldr	r2, [pc, #136]	; (15030 <_ZN14I2C_Asyn_Class4InitEv+0xd0>)
   14fa6:	2102      	movs	r1, #2
   14fa8:	4618      	mov	r0, r3
   14faa:	4b20      	ldr	r3, [pc, #128]	; (1502c <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   14fac:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
   14fae:	687b      	ldr	r3, [r7, #4]
   14fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14fb2:	4a20      	ldr	r2, [pc, #128]	; (15034 <_ZN14I2C_Asyn_Class4InitEv+0xd4>)
   14fb4:	2100      	movs	r1, #0
   14fb6:	4618      	mov	r0, r3
   14fb8:	4b1c      	ldr	r3, [pc, #112]	; (1502c <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   14fba:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	coupleKey.ptrI2CAsynClass=(uint32_t)ptrClass;
   14fbc:	687b      	ldr	r3, [r7, #4]
   14fbe:	69db      	ldr	r3, [r3, #28]
   14fc0:	461a      	mov	r2, r3
   14fc2:	687b      	ldr	r3, [r7, #4]
   14fc4:	641a      	str	r2, [r3, #64]	; 0x40
	coupleKey.i2cDescr=ptrI2CAsynDescr;
   14fc6:	687b      	ldr	r3, [r7, #4]
   14fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   14fca:	687b      	ldr	r3, [r7, #4]
   14fcc:	63da      	str	r2, [r3, #60]	; 0x3c
	coupleKey.dummy=(uint32_t)ptrClass;
   14fce:	687b      	ldr	r3, [r7, #4]
   14fd0:	69db      	ldr	r3, [r3, #28]
   14fd2:	461a      	mov	r2, r3
   14fd4:	687b      	ldr	r3, [r7, #4]
   14fd6:	639a      	str	r2, [r3, #56]	; 0x38
	AddI2CObject(coupleKey);
   14fd8:	687a      	ldr	r2, [r7, #4]
   14fda:	687b      	ldr	r3, [r7, #4]
   14fdc:	3334      	adds	r3, #52	; 0x34
   14fde:	4619      	mov	r1, r3
   14fe0:	4610      	mov	r0, r2
   14fe2:	4b15      	ldr	r3, [pc, #84]	; (15038 <_ZN14I2C_Asyn_Class4InitEv+0xd8>)
   14fe4:	4798      	blx	r3
	txReady=true;
   14fe6:	687b      	ldr	r3, [r7, #4]
   14fe8:	2201      	movs	r2, #1
   14fea:	751a      	strb	r2, [r3, #20]
	rxReady=true;
   14fec:	687b      	ldr	r3, [r7, #4]
   14fee:	2201      	movs	r2, #1
   14ff0:	755a      	strb	r2, [r3, #21]
	isOK=ena==0;
   14ff2:	7bfb      	ldrb	r3, [r7, #15]
   14ff4:	2b00      	cmp	r3, #0
   14ff6:	bf0c      	ite	eq
   14ff8:	2301      	moveq	r3, #1
   14ffa:	2300      	movne	r3, #0
   14ffc:	b2da      	uxtb	r2, r3
   14ffe:	687b      	ldr	r3, [r7, #4]
   15000:	761a      	strb	r2, [r3, #24]
	initiated=isOK;
   15002:	687b      	ldr	r3, [r7, #4]
   15004:	7e1b      	ldrb	r3, [r3, #24]
   15006:	b2da      	uxtb	r2, r3
   15008:	687b      	ldr	r3, [r7, #4]
   1500a:	759a      	strb	r2, [r3, #22]
	return isOK;
   1500c:	687b      	ldr	r3, [r7, #4]
   1500e:	7e1b      	ldrb	r3, [r3, #24]
   15010:	b2db      	uxtb	r3, r3
	
}
   15012:	4618      	mov	r0, r3
   15014:	3710      	adds	r7, #16
   15016:	46bd      	mov	sp, r7
   15018:	bd80      	pop	{r7, pc}
   1501a:	bf00      	nop
   1501c:	20009cd8 	.word	0x20009cd8
   15020:	000064cf 	.word	0x000064cf
   15024:	000063e1 	.word	0x000063e1
   15028:	00014e0d 	.word	0x00014e0d
   1502c:	00006487 	.word	0x00006487
   15030:	00014e35 	.word	0x00014e35
   15034:	00014e5d 	.word	0x00014e5d
   15038:	0001517d 	.word	0x0001517d

0001503c <_ZN14I2C_Asyn_Class4InitEh>:
bool	I2C_Asyn_Class::Init(uint8_t add){
   1503c:	b580      	push	{r7, lr}
   1503e:	b082      	sub	sp, #8
   15040:	af00      	add	r7, sp, #0
   15042:	6078      	str	r0, [r7, #4]
   15044:	460b      	mov	r3, r1
   15046:	70fb      	strb	r3, [r7, #3]
	isOK=Init();
   15048:	6878      	ldr	r0, [r7, #4]
   1504a:	4b0e      	ldr	r3, [pc, #56]	; (15084 <_ZN14I2C_Asyn_Class4InitEh+0x48>)
   1504c:	4798      	blx	r3
   1504e:	4603      	mov	r3, r0
   15050:	461a      	mov	r2, r3
   15052:	687b      	ldr	r3, [r7, #4]
   15054:	761a      	strb	r2, [r3, #24]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
   15056:	687b      	ldr	r3, [r7, #4]
   15058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1505a:	78fa      	ldrb	r2, [r7, #3]
   1505c:	b211      	sxth	r1, r2
   1505e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   15062:	4618      	mov	r0, r3
   15064:	4b08      	ldr	r3, [pc, #32]	; (15088 <_ZN14I2C_Asyn_Class4InitEh+0x4c>)
   15066:	4798      	blx	r3
	txReady=true;
   15068:	687b      	ldr	r3, [r7, #4]
   1506a:	2201      	movs	r2, #1
   1506c:	751a      	strb	r2, [r3, #20]
	rxReady=true;
   1506e:	687b      	ldr	r3, [r7, #4]
   15070:	2201      	movs	r2, #1
   15072:	755a      	strb	r2, [r3, #21]
	return isOK;
   15074:	687b      	ldr	r3, [r7, #4]
   15076:	7e1b      	ldrb	r3, [r3, #24]
   15078:	b2db      	uxtb	r3, r3
}
   1507a:	4618      	mov	r0, r3
   1507c:	3708      	adds	r7, #8
   1507e:	46bd      	mov	sp, r7
   15080:	bd80      	pop	{r7, pc}
   15082:	bf00      	nop
   15084:	00014f61 	.word	0x00014f61
   15088:	0000644d 	.word	0x0000644d

0001508c <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
   1508c:	b580      	push	{r7, lr}
   1508e:	b084      	sub	sp, #16
   15090:	af00      	add	r7, sp, #0
   15092:	60f8      	str	r0, [r7, #12]
   15094:	60b9      	str	r1, [r7, #8]
   15096:	4613      	mov	r3, r2
   15098:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
   1509a:	68fb      	ldr	r3, [r7, #12]
   1509c:	7d1b      	ldrb	r3, [r3, #20]
   1509e:	b2db      	uxtb	r3, r3
   150a0:	f083 0301 	eor.w	r3, r3, #1
   150a4:	b2db      	uxtb	r3, r3
   150a6:	2b00      	cmp	r3, #0
   150a8:	d000      	beq.n	150ac <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
   150aa:	e7f6      	b.n	1509a <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
   150ac:	68fb      	ldr	r3, [r7, #12]
   150ae:	2200      	movs	r2, #0
   150b0:	751a      	strb	r2, [r3, #20]
	return io_write(I2C_io, buffer, lenght);
   150b2:	68fb      	ldr	r3, [r7, #12]
   150b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   150b6:	88fa      	ldrh	r2, [r7, #6]
   150b8:	68b9      	ldr	r1, [r7, #8]
   150ba:	4618      	mov	r0, r3
   150bc:	4b03      	ldr	r3, [pc, #12]	; (150cc <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
   150be:	4798      	blx	r3
   150c0:	4603      	mov	r3, r0
}
   150c2:	4618      	mov	r0, r3
   150c4:	3710      	adds	r7, #16
   150c6:	46bd      	mov	sp, r7
   150c8:	bd80      	pop	{r7, pc}
   150ca:	bf00      	nop
   150cc:	000193fd 	.word	0x000193fd

000150d0 <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
   150d0:	b580      	push	{r7, lr}
   150d2:	b084      	sub	sp, #16
   150d4:	af00      	add	r7, sp, #0
   150d6:	60f8      	str	r0, [r7, #12]
   150d8:	60b9      	str	r1, [r7, #8]
   150da:	4613      	mov	r3, r2
   150dc:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
   150de:	68fb      	ldr	r3, [r7, #12]
   150e0:	7d5b      	ldrb	r3, [r3, #21]
   150e2:	b2db      	uxtb	r3, r3
   150e4:	f083 0301 	eor.w	r3, r3, #1
   150e8:	b2db      	uxtb	r3, r3
   150ea:	2b00      	cmp	r3, #0
   150ec:	d000      	beq.n	150f0 <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
   150ee:	e7f6      	b.n	150de <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
   150f0:	68fb      	ldr	r3, [r7, #12]
   150f2:	2200      	movs	r2, #0
   150f4:	755a      	strb	r2, [r3, #21]
		return io_read(I2C_io, buffer, lenght);
   150f6:	68fb      	ldr	r3, [r7, #12]
   150f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   150fa:	88fa      	ldrh	r2, [r7, #6]
   150fc:	68b9      	ldr	r1, [r7, #8]
   150fe:	4618      	mov	r0, r3
   15100:	4b03      	ldr	r3, [pc, #12]	; (15110 <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
   15102:	4798      	blx	r3
   15104:	4603      	mov	r3, r0
}
   15106:	4618      	mov	r0, r3
   15108:	3710      	adds	r7, #16
   1510a:	46bd      	mov	sp, r7
   1510c:	bd80      	pop	{r7, pc}
   1510e:	bf00      	nop
   15110:	0001944d 	.word	0x0001944d

00015114 <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
   15114:	b480      	push	{r7}
   15116:	b083      	sub	sp, #12
   15118:	af00      	add	r7, sp, #0
   1511a:	6078      	str	r0, [r7, #4]
	 ack=false;
   1511c:	687b      	ldr	r3, [r7, #4]
   1511e:	2200      	movs	r2, #0
   15120:	75da      	strb	r2, [r3, #23]
	 return ack;
   15122:	687b      	ldr	r3, [r7, #4]
   15124:	7ddb      	ldrb	r3, [r3, #23]
   15126:	b2db      	uxtb	r3, r3
 }
   15128:	4618      	mov	r0, r3
   1512a:	370c      	adds	r7, #12
   1512c:	46bd      	mov	sp, r7
   1512e:	bc80      	pop	{r7}
   15130:	4770      	bx	lr

00015132 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
   15132:	b480      	push	{r7}
   15134:	b083      	sub	sp, #12
   15136:	af00      	add	r7, sp, #0
   15138:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
   1513a:	687b      	ldr	r3, [r7, #4]
   1513c:	681b      	ldr	r3, [r3, #0]
}
   1513e:	4618      	mov	r0, r3
   15140:	370c      	adds	r7, #12
   15142:	46bd      	mov	sp, r7
   15144:	bc80      	pop	{r7}
   15146:	4770      	bx	lr

00015148 <_ZN14I2C_ObjectListC1Ev>:

#include "I2C_ObjectList.h"
#include "I2C_Asyn_Class.h"

// default constructor
I2C_ObjectList::I2C_ObjectList()
   15148:	b480      	push	{r7}
   1514a:	b083      	sub	sp, #12
   1514c:	af00      	add	r7, sp, #0
   1514e:	6078      	str	r0, [r7, #4]
{
	objList=&i2cList;
   15150:	687b      	ldr	r3, [r7, #4]
   15152:	4a04      	ldr	r2, [pc, #16]	; (15164 <_ZN14I2C_ObjectListC1Ev+0x1c>)
   15154:	611a      	str	r2, [r3, #16]
} //I2C_ObjectList
   15156:	687b      	ldr	r3, [r7, #4]
   15158:	4618      	mov	r0, r3
   1515a:	370c      	adds	r7, #12
   1515c:	46bd      	mov	sp, r7
   1515e:	bc80      	pop	{r7}
   15160:	4770      	bx	lr
   15162:	bf00      	nop
   15164:	20009ddc 	.word	0x20009ddc

00015168 <_ZN14I2C_ObjectListD1Ev>:

// default destructor
I2C_ObjectList::~I2C_ObjectList()
   15168:	b480      	push	{r7}
   1516a:	b083      	sub	sp, #12
   1516c:	af00      	add	r7, sp, #0
   1516e:	6078      	str	r0, [r7, #4]
{
} //~I2C_ObjectList
   15170:	687b      	ldr	r3, [r7, #4]
   15172:	4618      	mov	r0, r3
   15174:	370c      	adds	r7, #12
   15176:	46bd      	mov	sp, r7
   15178:	bc80      	pop	{r7}
   1517a:	4770      	bx	lr

0001517c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor>:

int I2C_ObjectList::AddI2CObject(I2CPointerAndDescriptor& ck ){
   1517c:	b580      	push	{r7, lr}
   1517e:	b082      	sub	sp, #8
   15180:	af00      	add	r7, sp, #0
   15182:	6078      	str	r0, [r7, #4]
   15184:	6039      	str	r1, [r7, #0]
	
		ASSERT((objList)&&(&ck));
   15186:	687b      	ldr	r3, [r7, #4]
   15188:	691b      	ldr	r3, [r3, #16]
   1518a:	2b00      	cmp	r3, #0
   1518c:	d004      	beq.n	15198 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   1518e:	683b      	ldr	r3, [r7, #0]
   15190:	2b00      	cmp	r3, #0
   15192:	d001      	beq.n	15198 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   15194:	2301      	movs	r3, #1
   15196:	e000      	b.n	1519a <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1e>
   15198:	2300      	movs	r3, #0
   1519a:	2219      	movs	r2, #25
   1519c:	4910      	ldr	r1, [pc, #64]	; (151e0 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   1519e:	4618      	mov	r0, r3
   151a0:	4b10      	ldr	r3, [pc, #64]	; (151e4 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   151a2:	4798      	blx	r3
		if (is_list_element(objList,&ck)) {
   151a4:	687b      	ldr	r3, [r7, #4]
   151a6:	691b      	ldr	r3, [r3, #16]
   151a8:	6839      	ldr	r1, [r7, #0]
   151aa:	4618      	mov	r0, r3
   151ac:	4b0e      	ldr	r3, [pc, #56]	; (151e8 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x6c>)
   151ae:	4798      	blx	r3
   151b0:	4603      	mov	r3, r0
   151b2:	2b00      	cmp	r3, #0
   151b4:	d007      	beq.n	151c6 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x4a>

			ASSERT(false);
   151b6:	221c      	movs	r2, #28
   151b8:	4909      	ldr	r1, [pc, #36]	; (151e0 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   151ba:	2000      	movs	r0, #0
   151bc:	4b09      	ldr	r3, [pc, #36]	; (151e4 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   151be:	4798      	blx	r3
			return ERR_ALREADY_INITIALIZED;
   151c0:	f06f 0311 	mvn.w	r3, #17
   151c4:	e007      	b.n	151d6 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x5a>
		}
		AddObject(objList,&ck);
   151c6:	687b      	ldr	r3, [r7, #4]
   151c8:	691b      	ldr	r3, [r3, #16]
   151ca:	683a      	ldr	r2, [r7, #0]
   151cc:	4619      	mov	r1, r3
   151ce:	6878      	ldr	r0, [r7, #4]
   151d0:	4b06      	ldr	r3, [pc, #24]	; (151ec <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x70>)
   151d2:	4798      	blx	r3
		return ERR_NONE;
   151d4:	2300      	movs	r3, #0
}
   151d6:	4618      	mov	r0, r3
   151d8:	3708      	adds	r7, #8
   151da:	46bd      	mov	sp, r7
   151dc:	bd80      	pop	{r7, pc}
   151de:	bf00      	nop
   151e0:	00021728 	.word	0x00021728
   151e4:	00007d5d 	.word	0x00007d5d
   151e8:	00007d85 	.word	0x00007d85
   151ec:	000151f1 	.word	0x000151f1

000151f0 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor>:
		coupleKey.i2cDescr=ptrI2C;
		ck=coupleKey;
			
}

void I2C_ObjectList::AddObject(list_descriptor *list,I2CPointerAndDescriptor* nck){
   151f0:	b580      	push	{r7, lr}
   151f2:	b086      	sub	sp, #24
   151f4:	af00      	add	r7, sp, #0
   151f6:	60f8      	str	r0, [r7, #12]
   151f8:	60b9      	str	r1, [r7, #8]
   151fa:	607a      	str	r2, [r7, #4]
		I2CPointerAndDescriptor *it, *head = (I2CPointerAndDescriptor *)list_get_head(list);
   151fc:	68b8      	ldr	r0, [r7, #8]
   151fe:	4b09      	ldr	r3, [pc, #36]	; (15224 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x34>)
   15200:	4798      	blx	r3
   15202:	6178      	str	r0, [r7, #20]

		if (!head) {
   15204:	697b      	ldr	r3, [r7, #20]
   15206:	2b00      	cmp	r3, #0
   15208:	d104      	bne.n	15214 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x24>
			list_insert_as_head(list, nck);
   1520a:	6879      	ldr	r1, [r7, #4]
   1520c:	68b8      	ldr	r0, [r7, #8]
   1520e:	4b06      	ldr	r3, [pc, #24]	; (15228 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x38>)
   15210:	4798      	blx	r3
			return;
   15212:	e003      	b.n	1521c <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x2c>
		}else{
			list_insert_at_end(list,nck);
   15214:	6879      	ldr	r1, [r7, #4]
   15216:	68b8      	ldr	r0, [r7, #8]
   15218:	4b04      	ldr	r3, [pc, #16]	; (1522c <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x3c>)
   1521a:	4798      	blx	r3
		}
}
   1521c:	3718      	adds	r7, #24
   1521e:	46bd      	mov	sp, r7
   15220:	bd80      	pop	{r7, pc}
   15222:	bf00      	nop
   15224:	00015133 	.word	0x00015133
   15228:	00007dbd 	.word	0x00007dbd
   1522c:	00007e39 	.word	0x00007e39

00015230 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc>:

uint32_t I2C_ObjectList::GetClassPointer(i2c_m_async_desc*	i2cDescr){
   15230:	b480      	push	{r7}
   15232:	b087      	sub	sp, #28
   15234:	af00      	add	r7, sp, #0
   15236:	6078      	str	r0, [r7, #4]
   15238:	6039      	str	r1, [r7, #0]
		struct list_element *it;
		//I2CPointerAndDescriptor *it;
		I2CPointerAndDescriptor *k;
		uint32_t ptr;
		for (it = objList->head; it; it = it->next) {
   1523a:	687b      	ldr	r3, [r7, #4]
   1523c:	691b      	ldr	r3, [r3, #16]
   1523e:	681b      	ldr	r3, [r3, #0]
   15240:	617b      	str	r3, [r7, #20]
   15242:	697b      	ldr	r3, [r7, #20]
   15244:	2b00      	cmp	r3, #0
   15246:	d00f      	beq.n	15268 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x38>
			k=(I2CPointerAndDescriptor*)it;
   15248:	697b      	ldr	r3, [r7, #20]
   1524a:	613b      	str	r3, [r7, #16]
			
			if (k->i2cDescr== i2cDescr){
   1524c:	693b      	ldr	r3, [r7, #16]
   1524e:	689a      	ldr	r2, [r3, #8]
   15250:	683b      	ldr	r3, [r7, #0]
   15252:	429a      	cmp	r2, r3
   15254:	d104      	bne.n	15260 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x30>
				ptr=k->ptrI2CAsynClass;
   15256:	693b      	ldr	r3, [r7, #16]
   15258:	68db      	ldr	r3, [r3, #12]
   1525a:	60fb      	str	r3, [r7, #12]
				return ptr;
   1525c:	68fb      	ldr	r3, [r7, #12]
   1525e:	e004      	b.n	1526a <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x3a>
		for (it = objList->head; it; it = it->next) {
   15260:	697b      	ldr	r3, [r7, #20]
   15262:	681b      	ldr	r3, [r3, #0]
   15264:	617b      	str	r3, [r7, #20]
   15266:	e7ec      	b.n	15242 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x12>
			}
		}

		return 0;
   15268:	2300      	movs	r3, #0
   1526a:	4618      	mov	r0, r3
   1526c:	371c      	adds	r7, #28
   1526e:	46bd      	mov	sp, r7
   15270:	bc80      	pop	{r7}
   15272:	4770      	bx	lr

00015274 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   15274:	b480      	push	{r7}
   15276:	b083      	sub	sp, #12
   15278:	af00      	add	r7, sp, #0
   1527a:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   1527c:	687b      	ldr	r3, [r7, #4]
   1527e:	4618      	mov	r0, r3
   15280:	370c      	adds	r7, #12
   15282:	46bd      	mov	sp, r7
   15284:	bc80      	pop	{r7}
   15286:	4770      	bx	lr

00015288 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   15288:	b480      	push	{r7}
   1528a:	b083      	sub	sp, #12
   1528c:	af00      	add	r7, sp, #0
   1528e:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   15290:	687b      	ldr	r3, [r7, #4]
   15292:	4618      	mov	r0, r3
   15294:	370c      	adds	r7, #12
   15296:	46bd      	mov	sp, r7
   15298:	bc80      	pop	{r7}
   1529a:	4770      	bx	lr

0001529c <_ZN14MCP23008_Class4InitEhP14I2C_Asyn_Class>:
	//i2ca.Set_descriptor(ptrI2CDescr);
	//isReady=i2ca.Init(addr)==0;
	//ext_irq_register(PIN_PA04,FUNC_PTR(MCPHadChanged));
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
bool MCP23008_Class::Init(uint8_t addr,I2C_Asyn_Class *i2c){
   1529c:	b480      	push	{r7}
   1529e:	b085      	sub	sp, #20
   152a0:	af00      	add	r7, sp, #0
   152a2:	60f8      	str	r0, [r7, #12]
   152a4:	460b      	mov	r3, r1
   152a6:	607a      	str	r2, [r7, #4]
   152a8:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
   152aa:	687b      	ldr	r3, [r7, #4]
   152ac:	6a1a      	ldr	r2, [r3, #32]
   152ae:	68fb      	ldr	r3, [r7, #12]
   152b0:	615a      	str	r2, [r3, #20]
	rxBuffer=i2c->rxBuffer;
   152b2:	687b      	ldr	r3, [r7, #4]
   152b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   152b6:	68fb      	ldr	r3, [r7, #12]
   152b8:	619a      	str	r2, [r3, #24]
	i2cAddress=addr;
   152ba:	68fb      	ldr	r3, [r7, #12]
   152bc:	7afa      	ldrb	r2, [r7, #11]
   152be:	73da      	strb	r2, [r3, #15]
	i2cClass=i2c;
   152c0:	68fb      	ldr	r3, [r7, #12]
   152c2:	687a      	ldr	r2, [r7, #4]
   152c4:	611a      	str	r2, [r3, #16]
	isOK=i2cClass->isOK;
   152c6:	68fb      	ldr	r3, [r7, #12]
   152c8:	691b      	ldr	r3, [r3, #16]
   152ca:	7e1b      	ldrb	r3, [r3, #24]
   152cc:	b2da      	uxtb	r2, r3
   152ce:	68fb      	ldr	r3, [r7, #12]
   152d0:	735a      	strb	r2, [r3, #13]

	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   152d2:	bf00      	nop
   152d4:	4618      	mov	r0, r3
   152d6:	3714      	adds	r7, #20
   152d8:	46bd      	mov	sp, r7
   152da:	bc80      	pop	{r7}
   152dc:	4770      	bx	lr
	...

000152e0 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc>:

MCP23017_Class::MCP23017_Class()
{
	ptrMCP23017Class=this;
} //AT24MAC_Class
MCP23017_Class::MCP23017_Class(i2c_m_async_desc *i2c)
   152e0:	b580      	push	{r7, lr}
   152e2:	b082      	sub	sp, #8
   152e4:	af00      	add	r7, sp, #0
   152e6:	6078      	str	r0, [r7, #4]
   152e8:	6039      	str	r1, [r7, #0]
   152ea:	687b      	ldr	r3, [r7, #4]
   152ec:	3304      	adds	r3, #4
   152ee:	4618      	mov	r0, r3
   152f0:	4b06      	ldr	r3, [pc, #24]	; (1530c <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x2c>)
   152f2:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
   152f4:	687b      	ldr	r3, [r7, #4]
   152f6:	683a      	ldr	r2, [r7, #0]
   152f8:	649a      	str	r2, [r3, #72]	; 0x48
	ptrMCP23017Class=this;
   152fa:	4a05      	ldr	r2, [pc, #20]	; (15310 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x30>)
   152fc:	687b      	ldr	r3, [r7, #4]
   152fe:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
   15300:	687b      	ldr	r3, [r7, #4]
   15302:	4618      	mov	r0, r3
   15304:	3708      	adds	r7, #8
   15306:	46bd      	mov	sp, r7
   15308:	bd80      	pop	{r7, pc}
   1530a:	bf00      	nop
   1530c:	00014e99 	.word	0x00014e99
   15310:	20009de0 	.word	0x20009de0

00015314 <_ZN14MCP23017_ClassD1Ev>:

// default destructor
MCP23017_Class::~MCP23017_Class()
   15314:	b580      	push	{r7, lr}
   15316:	b082      	sub	sp, #8
   15318:	af00      	add	r7, sp, #0
   1531a:	6078      	str	r0, [r7, #4]
   1531c:	687b      	ldr	r3, [r7, #4]
   1531e:	3304      	adds	r3, #4
   15320:	4618      	mov	r0, r3
   15322:	4b03      	ldr	r3, [pc, #12]	; (15330 <_ZN14MCP23017_ClassD1Ev+0x1c>)
   15324:	4798      	blx	r3
{
} //~AT24MAC_Class
   15326:	687b      	ldr	r3, [r7, #4]
   15328:	4618      	mov	r0, r3
   1532a:	3708      	adds	r7, #8
   1532c:	46bd      	mov	sp, r7
   1532e:	bd80      	pop	{r7, pc}
   15330:	00014f15 	.word	0x00014f15

00015334 <_ZN14MCP23017_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23017_Class::readRegister(uint8_t addr){
   15334:	b580      	push	{r7, lr}
   15336:	b082      	sub	sp, #8
   15338:	af00      	add	r7, sp, #0
   1533a:	6078      	str	r0, [r7, #4]
   1533c:	460b      	mov	r3, r1
   1533e:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
   15340:	687b      	ldr	r3, [r7, #4]
   15342:	3304      	adds	r3, #4
   15344:	1cf9      	adds	r1, r7, #3
   15346:	2201      	movs	r2, #1
   15348:	4618      	mov	r0, r3
   1534a:	4b11      	ldr	r3, [pc, #68]	; (15390 <_ZN14MCP23017_Class12readRegisterEh+0x5c>)
   1534c:	4798      	blx	r3
	while(!i2ca.txReady);
   1534e:	687b      	ldr	r3, [r7, #4]
   15350:	7e1b      	ldrb	r3, [r3, #24]
   15352:	b2db      	uxtb	r3, r3
   15354:	f083 0301 	eor.w	r3, r3, #1
   15358:	b2db      	uxtb	r3, r3
   1535a:	2b00      	cmp	r3, #0
   1535c:	d000      	beq.n	15360 <_ZN14MCP23017_Class12readRegisterEh+0x2c>
   1535e:	e7f6      	b.n	1534e <_ZN14MCP23017_Class12readRegisterEh+0x1a>
	i2ca.Read(&registerValue,1);
   15360:	687b      	ldr	r3, [r7, #4]
   15362:	1d18      	adds	r0, r3, #4
   15364:	687b      	ldr	r3, [r7, #4]
   15366:	3350      	adds	r3, #80	; 0x50
   15368:	2201      	movs	r2, #1
   1536a:	4619      	mov	r1, r3
   1536c:	4b09      	ldr	r3, [pc, #36]	; (15394 <_ZN14MCP23017_Class12readRegisterEh+0x60>)
   1536e:	4798      	blx	r3
	while(!i2ca.rxReady);
   15370:	687b      	ldr	r3, [r7, #4]
   15372:	7e5b      	ldrb	r3, [r3, #25]
   15374:	b2db      	uxtb	r3, r3
   15376:	f083 0301 	eor.w	r3, r3, #1
   1537a:	b2db      	uxtb	r3, r3
   1537c:	2b00      	cmp	r3, #0
   1537e:	d000      	beq.n	15382 <_ZN14MCP23017_Class12readRegisterEh+0x4e>
   15380:	e7f6      	b.n	15370 <_ZN14MCP23017_Class12readRegisterEh+0x3c>
	return registerValue;
   15382:	687b      	ldr	r3, [r7, #4]
   15384:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
}
   15388:	4618      	mov	r0, r3
   1538a:	3708      	adds	r7, #8
   1538c:	46bd      	mov	sp, r7
   1538e:	bd80      	pop	{r7, pc}
   15390:	0001508d 	.word	0x0001508d
   15394:	000150d1 	.word	0x000150d1

00015398 <_ZN14MCP23017_Class8readGPIOEh>:

/**
 * Read a single port, A or B, and return its current 8 bit value.
 * Parameter b should be 0 for GPIOA, and 1 for GPIOB.
 */
uint8_t MCP23017_Class::readGPIO(uint8_t b) {
   15398:	b580      	push	{r7, lr}
   1539a:	b082      	sub	sp, #8
   1539c:	af00      	add	r7, sp, #0
   1539e:	6078      	str	r0, [r7, #4]
   153a0:	460b      	mov	r3, r1
   153a2:	70fb      	strb	r3, [r7, #3]

	if (b == 0){
   153a4:	78fb      	ldrb	r3, [r7, #3]
   153a6:	2b00      	cmp	r3, #0
   153a8:	d10c      	bne.n	153c4 <_ZN14MCP23017_Class8readGPIOEh+0x2c>
		regAddress=MCP23017_GPIOA;
   153aa:	687b      	ldr	r3, [r7, #4]
   153ac:	2212      	movs	r2, #18
   153ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		i2ca.Write(&regAddress,1);
   153b2:	687b      	ldr	r3, [r7, #4]
   153b4:	1d18      	adds	r0, r3, #4
   153b6:	687b      	ldr	r3, [r7, #4]
   153b8:	3351      	adds	r3, #81	; 0x51
   153ba:	2201      	movs	r2, #1
   153bc:	4619      	mov	r1, r3
   153be:	4b18      	ldr	r3, [pc, #96]	; (15420 <_ZN14MCP23017_Class8readGPIOEh+0x88>)
   153c0:	4798      	blx	r3
   153c2:	e00b      	b.n	153dc <_ZN14MCP23017_Class8readGPIOEh+0x44>
	}else {
		regAddress=MCP23017_GPIOB;
   153c4:	687b      	ldr	r3, [r7, #4]
   153c6:	2213      	movs	r2, #19
   153c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		i2ca.Write(&regAddress,1);
   153cc:	687b      	ldr	r3, [r7, #4]
   153ce:	1d18      	adds	r0, r3, #4
   153d0:	687b      	ldr	r3, [r7, #4]
   153d2:	3351      	adds	r3, #81	; 0x51
   153d4:	2201      	movs	r2, #1
   153d6:	4619      	mov	r1, r3
   153d8:	4b11      	ldr	r3, [pc, #68]	; (15420 <_ZN14MCP23017_Class8readGPIOEh+0x88>)
   153da:	4798      	blx	r3
	}


		while(!i2ca.txReady);
   153dc:	687b      	ldr	r3, [r7, #4]
   153de:	7e1b      	ldrb	r3, [r3, #24]
   153e0:	b2db      	uxtb	r3, r3
   153e2:	f083 0301 	eor.w	r3, r3, #1
   153e6:	b2db      	uxtb	r3, r3
   153e8:	2b00      	cmp	r3, #0
   153ea:	d000      	beq.n	153ee <_ZN14MCP23017_Class8readGPIOEh+0x56>
   153ec:	e7f6      	b.n	153dc <_ZN14MCP23017_Class8readGPIOEh+0x44>
		i2ca.Read(&registerValue,1);
   153ee:	687b      	ldr	r3, [r7, #4]
   153f0:	1d18      	adds	r0, r3, #4
   153f2:	687b      	ldr	r3, [r7, #4]
   153f4:	3350      	adds	r3, #80	; 0x50
   153f6:	2201      	movs	r2, #1
   153f8:	4619      	mov	r1, r3
   153fa:	4b0a      	ldr	r3, [pc, #40]	; (15424 <_ZN14MCP23017_Class8readGPIOEh+0x8c>)
   153fc:	4798      	blx	r3
		while(!i2ca.rxReady);
   153fe:	687b      	ldr	r3, [r7, #4]
   15400:	7e5b      	ldrb	r3, [r3, #25]
   15402:	b2db      	uxtb	r3, r3
   15404:	f083 0301 	eor.w	r3, r3, #1
   15408:	b2db      	uxtb	r3, r3
   1540a:	2b00      	cmp	r3, #0
   1540c:	d000      	beq.n	15410 <_ZN14MCP23017_Class8readGPIOEh+0x78>
   1540e:	e7f6      	b.n	153fe <_ZN14MCP23017_Class8readGPIOEh+0x66>
		return	registerValue;
   15410:	687b      	ldr	r3, [r7, #4]
   15412:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
}
   15416:	4618      	mov	r0, r3
   15418:	3708      	adds	r7, #8
   1541a:	46bd      	mov	sp, r7
   1541c:	bd80      	pop	{r7, pc}
   1541e:	bf00      	nop
   15420:	0001508d 	.word	0x0001508d
   15424:	000150d1 	.word	0x000150d1

00015428 <_ZN14MCP23017_Class9SavePortsEv>:
	for(int i=0;i<8;i++) if (bitRead(intf,i)) return i+8;

	return MCP23017_INT_ERR;

}
uint8_t	MCP23017_Class::SavePorts(void){
   15428:	b580      	push	{r7, lr}
   1542a:	b082      	sub	sp, #8
   1542c:	af00      	add	r7, sp, #0
   1542e:	6078      	str	r0, [r7, #4]
	portA=readGPIO(0);
   15430:	2100      	movs	r1, #0
   15432:	6878      	ldr	r0, [r7, #4]
   15434:	4b0f      	ldr	r3, [pc, #60]	; (15474 <_ZN14MCP23017_Class9SavePortsEv+0x4c>)
   15436:	4798      	blx	r3
   15438:	4603      	mov	r3, r0
   1543a:	461a      	mov	r2, r3
   1543c:	687b      	ldr	r3, [r7, #4]
   1543e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	portB=readGPIO(1);
   15442:	2101      	movs	r1, #1
   15444:	6878      	ldr	r0, [r7, #4]
   15446:	4b0b      	ldr	r3, [pc, #44]	; (15474 <_ZN14MCP23017_Class9SavePortsEv+0x4c>)
   15448:	4798      	blx	r3
   1544a:	4603      	mov	r3, r0
   1544c:	461a      	mov	r2, r3
   1544e:	687b      	ldr	r3, [r7, #4]
   15450:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	if (hasChanged)
   15454:	687b      	ldr	r3, [r7, #4]
   15456:	785b      	ldrb	r3, [r3, #1]
   15458:	b2db      	uxtb	r3, r3
   1545a:	2b00      	cmp	r3, #0
   1545c:	d002      	beq.n	15464 <_ZN14MCP23017_Class9SavePortsEv+0x3c>
	{
		ClearIntRegisters();
   1545e:	6878      	ldr	r0, [r7, #4]
   15460:	4b05      	ldr	r3, [pc, #20]	; (15478 <_ZN14MCP23017_Class9SavePortsEv+0x50>)
   15462:	4798      	blx	r3
	}
	return portA;
   15464:	687b      	ldr	r3, [r7, #4]
   15466:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
}
   1546a:	4618      	mov	r0, r3
   1546c:	3708      	adds	r7, #8
   1546e:	46bd      	mov	sp, r7
   15470:	bd80      	pop	{r7, pc}
   15472:	bf00      	nop
   15474:	00015399 	.word	0x00015399
   15478:	0001547d 	.word	0x0001547d

0001547c <_ZN14MCP23017_Class17ClearIntRegistersEv>:
void MCP23017_Class::ClearIntRegisters(){
   1547c:	b580      	push	{r7, lr}
   1547e:	b082      	sub	sp, #8
   15480:	af00      	add	r7, sp, #0
   15482:	6078      	str	r0, [r7, #4]
		readRegister(MCP23017_INTCAPA);
   15484:	2110      	movs	r1, #16
   15486:	6878      	ldr	r0, [r7, #4]
   15488:	4b04      	ldr	r3, [pc, #16]	; (1549c <_ZN14MCP23017_Class17ClearIntRegistersEv+0x20>)
   1548a:	4798      	blx	r3
	readRegister(MCP23017_INTCAPB);
   1548c:	2111      	movs	r1, #17
   1548e:	6878      	ldr	r0, [r7, #4]
   15490:	4b02      	ldr	r3, [pc, #8]	; (1549c <_ZN14MCP23017_Class17ClearIntRegistersEv+0x20>)
   15492:	4798      	blx	r3
}
   15494:	bf00      	nop
   15496:	3708      	adds	r7, #8
   15498:	46bd      	mov	sp, r7
   1549a:	bd80      	pop	{r7, pc}
   1549c:	00015335 	.word	0x00015335

000154a0 <_Z41__static_initialization_and_destruction_0ii>:
	{
		isOK=false;
	}
	return isOK;
}
   154a0:	b580      	push	{r7, lr}
   154a2:	b082      	sub	sp, #8
   154a4:	af00      	add	r7, sp, #0
   154a6:	6078      	str	r0, [r7, #4]
   154a8:	6039      	str	r1, [r7, #0]
   154aa:	687b      	ldr	r3, [r7, #4]
   154ac:	2b01      	cmp	r3, #1
   154ae:	d10d      	bne.n	154cc <_Z41__static_initialization_and_destruction_0ii+0x2c>
   154b0:	683b      	ldr	r3, [r7, #0]
   154b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   154b6:	4293      	cmp	r3, r2
   154b8:	d108      	bne.n	154cc <_Z41__static_initialization_and_destruction_0ii+0x2c>
   154ba:	4906      	ldr	r1, [pc, #24]	; (154d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   154bc:	4806      	ldr	r0, [pc, #24]	; (154d8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   154be:	4b07      	ldr	r3, [pc, #28]	; (154dc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   154c0:	4798      	blx	r3
   154c2:	4a07      	ldr	r2, [pc, #28]	; (154e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   154c4:	4907      	ldr	r1, [pc, #28]	; (154e4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   154c6:	4804      	ldr	r0, [pc, #16]	; (154d8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   154c8:	4b07      	ldr	r3, [pc, #28]	; (154e8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   154ca:	4798      	blx	r3
   154cc:	bf00      	nop
   154ce:	3708      	adds	r7, #8
   154d0:	46bd      	mov	sp, r7
   154d2:	bd80      	pop	{r7, pc}
   154d4:	2000aa88 	.word	0x2000aa88
   154d8:	20009de4 	.word	0x20009de4
   154dc:	000152e1 	.word	0x000152e1
   154e0:	20000000 	.word	0x20000000
   154e4:	00015315 	.word	0x00015315
   154e8:	0001949d 	.word	0x0001949d

000154ec <_GLOBAL__sub_I_ptrMCP23017Class>:
   154ec:	b580      	push	{r7, lr}
   154ee:	af00      	add	r7, sp, #0
   154f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   154f4:	2001      	movs	r0, #1
   154f6:	4b01      	ldr	r3, [pc, #4]	; (154fc <_GLOBAL__sub_I_ptrMCP23017Class+0x10>)
   154f8:	4798      	blx	r3
   154fa:	bd80      	pop	{r7, pc}
   154fc:	000154a1 	.word	0x000154a1

00015500 <_ZL15Converter1Readyv>:


#include "TemperatureSensors_Class.h"
static TemperatureSensors_Class	*ptrTemperaturesClass;

static void Converter1Ready(void){
   15500:	b580      	push	{r7, lr}
   15502:	af00      	add	r7, sp, #0
	ptrTemperaturesClass->converterReady[0]=true;
   15504:	4b08      	ldr	r3, [pc, #32]	; (15528 <_ZL15Converter1Readyv+0x28>)
   15506:	681b      	ldr	r3, [r3, #0]
   15508:	2201      	movs	r2, #1
   1550a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	ptrTemperaturesClass->SetModuleReady(0);
   1550e:	4b06      	ldr	r3, [pc, #24]	; (15528 <_ZL15Converter1Readyv+0x28>)
   15510:	681b      	ldr	r3, [r3, #0]
   15512:	2100      	movs	r1, #0
   15514:	4618      	mov	r0, r3
   15516:	4b05      	ldr	r3, [pc, #20]	; (1552c <_ZL15Converter1Readyv+0x2c>)
   15518:	4798      	blx	r3
	ptrTemperaturesClass->converterTimeout=false;
   1551a:	4b03      	ldr	r3, [pc, #12]	; (15528 <_ZL15Converter1Readyv+0x28>)
   1551c:	681b      	ldr	r3, [r3, #0]
   1551e:	2200      	movs	r2, #0
   15520:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
   15524:	bf00      	nop
   15526:	bd80      	pop	{r7, pc}
   15528:	20009e3c 	.word	0x20009e3c
   1552c:	000158b1 	.word	0x000158b1

00015530 <_ZL15Converter2Readyv>:
static void Converter2Ready(void){
   15530:	b580      	push	{r7, lr}
   15532:	af00      	add	r7, sp, #0
	ptrTemperaturesClass->converterReady[1]=true;
   15534:	4b08      	ldr	r3, [pc, #32]	; (15558 <_ZL15Converter2Readyv+0x28>)
   15536:	681b      	ldr	r3, [r3, #0]
   15538:	2201      	movs	r2, #1
   1553a:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	ptrTemperaturesClass->SetModuleReady(1);
   1553e:	4b06      	ldr	r3, [pc, #24]	; (15558 <_ZL15Converter2Readyv+0x28>)
   15540:	681b      	ldr	r3, [r3, #0]
   15542:	2101      	movs	r1, #1
   15544:	4618      	mov	r0, r3
   15546:	4b05      	ldr	r3, [pc, #20]	; (1555c <_ZL15Converter2Readyv+0x2c>)
   15548:	4798      	blx	r3
	ptrTemperaturesClass->converterTimeout=false;
   1554a:	4b03      	ldr	r3, [pc, #12]	; (15558 <_ZL15Converter2Readyv+0x28>)
   1554c:	681b      	ldr	r3, [r3, #0]
   1554e:	2200      	movs	r2, #0
   15550:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
   15554:	bf00      	nop
   15556:	bd80      	pop	{r7, pc}
   15558:	20009e3c 	.word	0x20009e3c
   1555c:	000158b1 	.word	0x000158b1

00015560 <_ZL17ConversionTimeoutPK10timer_task>:
static void	ConversionTimeout(const struct timer_task *const timer_task){
   15560:	b480      	push	{r7}
   15562:	b083      	sub	sp, #12
   15564:	af00      	add	r7, sp, #0
   15566:	6078      	str	r0, [r7, #4]
	ptrTemperaturesClass->converterTimeout=true;
   15568:	4b05      	ldr	r3, [pc, #20]	; (15580 <_ZL17ConversionTimeoutPK10timer_task+0x20>)
   1556a:	681b      	ldr	r3, [r3, #0]
   1556c:	2201      	movs	r2, #1
   1556e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	asm("nop");
   15572:	bf00      	nop
}
   15574:	bf00      	nop
   15576:	370c      	adds	r7, #12
   15578:	46bd      	mov	sp, r7
   1557a:	bc80      	pop	{r7}
   1557c:	4770      	bx	lr
   1557e:	bf00      	nop
   15580:	20009e3c 	.word	0x20009e3c

00015584 <_ZN24TemperatureSensors_ClassC1EP22spi_m_async_descriptor>:
static LT_SPI	ltSPI;
// default constructor
TemperatureSensors_Class::TemperatureSensors_Class()
{
} //TemperatureSensors_Class
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_async_descriptor *SPI_LTC)
   15584:	b5b0      	push	{r4, r5, r7, lr}
   15586:	b082      	sub	sp, #8
   15588:	af00      	add	r7, sp, #0
   1558a:	6078      	str	r0, [r7, #4]
   1558c:	6039      	str	r1, [r7, #0]
   1558e:	687b      	ldr	r3, [r7, #4]
   15590:	4618      	mov	r0, r3
   15592:	4b0f      	ldr	r3, [pc, #60]	; (155d0 <_ZN24TemperatureSensors_ClassC1EP22spi_m_async_descriptor+0x4c>)
   15594:	4798      	blx	r3
   15596:	687b      	ldr	r3, [r7, #4]
   15598:	3384      	adds	r3, #132	; 0x84
   1559a:	2401      	movs	r4, #1
   1559c:	461d      	mov	r5, r3
   1559e:	2c00      	cmp	r4, #0
   155a0:	db05      	blt.n	155ae <_ZN24TemperatureSensors_ClassC1EP22spi_m_async_descriptor+0x2a>
   155a2:	4628      	mov	r0, r5
   155a4:	4b0b      	ldr	r3, [pc, #44]	; (155d4 <_ZN24TemperatureSensors_ClassC1EP22spi_m_async_descriptor+0x50>)
   155a6:	4798      	blx	r3
   155a8:	355c      	adds	r5, #92	; 0x5c
   155aa:	3c01      	subs	r4, #1
   155ac:	e7f7      	b.n	1559e <_ZN24TemperatureSensors_ClassC1EP22spi_m_async_descriptor+0x1a>
{
		spiLite=&ltSPI;
   155ae:	687b      	ldr	r3, [r7, #4]
   155b0:	4a09      	ldr	r2, [pc, #36]	; (155d8 <_ZN24TemperatureSensors_ClassC1EP22spi_m_async_descriptor+0x54>)
   155b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		ptrTemperaturesClass=this;
   155b6:	4a09      	ldr	r2, [pc, #36]	; (155dc <_ZN24TemperatureSensors_ClassC1EP22spi_m_async_descriptor+0x58>)
   155b8:	687b      	ldr	r3, [r7, #4]
   155ba:	6013      	str	r3, [r2, #0]
		SPIA=SPI_LTC;
   155bc:	687b      	ldr	r3, [r7, #4]
   155be:	683a      	ldr	r2, [r7, #0]
   155c0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		
} //TemperatureSensors_Class
   155c4:	687b      	ldr	r3, [r7, #4]
   155c6:	4618      	mov	r0, r3
   155c8:	3708      	adds	r7, #8
   155ca:	46bd      	mov	sp, r7
   155cc:	bdb0      	pop	{r4, r5, r7, pc}
   155ce:	bf00      	nop
   155d0:	00018685 	.word	0x00018685
   155d4:	00018685 	.word	0x00018685
   155d8:	20009e40 	.word	0x20009e40
   155dc:	20009e3c 	.word	0x20009e3c

000155e0 <_ZN24TemperatureSensors_ClassD1Ev>:

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   155e0:	b590      	push	{r4, r7, lr}
   155e2:	b083      	sub	sp, #12
   155e4:	af00      	add	r7, sp, #0
   155e6:	6078      	str	r0, [r7, #4]
   155e8:	687b      	ldr	r3, [r7, #4]
   155ea:	3384      	adds	r3, #132	; 0x84
   155ec:	2b00      	cmp	r3, #0
   155ee:	d00c      	beq.n	1560a <_ZN24TemperatureSensors_ClassD1Ev+0x2a>
   155f0:	687b      	ldr	r3, [r7, #4]
   155f2:	3384      	adds	r3, #132	; 0x84
   155f4:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
   155f8:	687b      	ldr	r3, [r7, #4]
   155fa:	3384      	adds	r3, #132	; 0x84
   155fc:	42a3      	cmp	r3, r4
   155fe:	d004      	beq.n	1560a <_ZN24TemperatureSensors_ClassD1Ev+0x2a>
   15600:	3c5c      	subs	r4, #92	; 0x5c
   15602:	4620      	mov	r0, r4
   15604:	4b05      	ldr	r3, [pc, #20]	; (1561c <_ZN24TemperatureSensors_ClassD1Ev+0x3c>)
   15606:	4798      	blx	r3
   15608:	e7f6      	b.n	155f8 <_ZN24TemperatureSensors_ClassD1Ev+0x18>
   1560a:	687b      	ldr	r3, [r7, #4]
   1560c:	4618      	mov	r0, r3
   1560e:	4b04      	ldr	r3, [pc, #16]	; (15620 <_ZN24TemperatureSensors_ClassD1Ev+0x40>)
   15610:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   15612:	687b      	ldr	r3, [r7, #4]
   15614:	4618      	mov	r0, r3
   15616:	370c      	adds	r7, #12
   15618:	46bd      	mov	sp, r7
   1561a:	bd90      	pop	{r4, r7, pc}
   1561c:	00018699 	.word	0x00018699
   15620:	00018699 	.word	0x00018699

00015624 <_ZN24TemperatureSensors_Class4InitEv>:

bool	TemperatureSensors_Class::Init(void){
   15624:	b580      	push	{r7, lr}
   15626:	b082      	sub	sp, #8
   15628:	af00      	add	r7, sp, #0
   1562a:	6078      	str	r0, [r7, #4]
	spiLite->set_descriptor(SPIA);
   1562c:	687b      	ldr	r3, [r7, #4]
   1562e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   15632:	687b      	ldr	r3, [r7, #4]
   15634:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   15638:	4619      	mov	r1, r3
   1563a:	4610      	mov	r0, r2
   1563c:	4b1a      	ldr	r3, [pc, #104]	; (156a8 <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   1563e:	4798      	blx	r3
	spiLite->init();
   15640:	687b      	ldr	r3, [r7, #4]
   15642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   15646:	4618      	mov	r0, r3
   15648:	4b18      	ldr	r3, [pc, #96]	; (156ac <_ZN24TemperatureSensors_Class4InitEv+0x88>)
   1564a:	4798      	blx	r3
	ptrTemperaturesClass=this;
   1564c:	4a18      	ldr	r2, [pc, #96]	; (156b0 <_ZN24TemperatureSensors_Class4InitEv+0x8c>)
   1564e:	687b      	ldr	r3, [r7, #4]
   15650:	6013      	str	r3, [r2, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
   15652:	4918      	ldr	r1, [pc, #96]	; (156b4 <_ZN24TemperatureSensors_Class4InitEv+0x90>)
   15654:	2028      	movs	r0, #40	; 0x28
   15656:	4b18      	ldr	r3, [pc, #96]	; (156b8 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   15658:	4798      	blx	r3
	ext_irq_register(PIN_PB09, Converter2Ready);
   1565a:	4918      	ldr	r1, [pc, #96]	; (156bc <_ZN24TemperatureSensors_Class4InitEv+0x98>)
   1565c:	2029      	movs	r0, #41	; 0x29
   1565e:	4b16      	ldr	r3, [pc, #88]	; (156b8 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   15660:	4798      	blx	r3
	InitModules();
   15662:	6878      	ldr	r0, [r7, #4]
   15664:	4b16      	ldr	r3, [pc, #88]	; (156c0 <_ZN24TemperatureSensors_Class4InitEv+0x9c>)
   15666:	4798      	blx	r3
	currentModule=0; currentChannelIndex=0;
   15668:	687b      	ldr	r3, [r7, #4]
   1566a:	2200      	movs	r2, #0
   1566c:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
   15670:	687b      	ldr	r3, [r7, #4]
   15672:	2200      	movs	r2, #0
   15674:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	isOK=(module[0].isOK)&(module[1].isOK);
   15678:	687b      	ldr	r3, [r7, #4]
   1567a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   1567e:	461a      	mov	r2, r3
   15680:	687b      	ldr	r3, [r7, #4]
   15682:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
   15686:	4013      	ands	r3, r2
   15688:	2b00      	cmp	r3, #0
   1568a:	bf14      	ite	ne
   1568c:	2301      	movne	r3, #1
   1568e:	2300      	moveq	r3, #0
   15690:	b2da      	uxtb	r2, r3
   15692:	687b      	ldr	r3, [r7, #4]
   15694:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return isOK;
   15698:	687b      	ldr	r3, [r7, #4]
   1569a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   1569e:	b2db      	uxtb	r3, r3
}
   156a0:	4618      	mov	r0, r3
   156a2:	3708      	adds	r7, #8
   156a4:	46bd      	mov	sp, r7
   156a6:	bd80      	pop	{r7, pc}
   156a8:	00018f41 	.word	0x00018f41
   156ac:	00018ee5 	.word	0x00018ee5
   156b0:	20009e3c 	.word	0x20009e3c
   156b4:	00015501 	.word	0x00015501
   156b8:	00006035 	.word	0x00006035
   156bc:	00015531 	.word	0x00015531
   156c0:	000156c5 	.word	0x000156c5

000156c4 <_ZN24TemperatureSensors_Class11InitModulesEv>:

bool TemperatureSensors_Class::InitModules(void){
   156c4:	b580      	push	{r7, lr}
   156c6:	b084      	sub	sp, #16
   156c8:	af00      	add	r7, sp, #0
   156ca:	6078      	str	r0, [r7, #4]
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2;
   156cc:	687b      	ldr	r3, [r7, #4]
   156ce:	223d      	movs	r2, #61	; 0x3d
   156d0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   156d4:	687b      	ldr	r3, [r7, #4]
   156d6:	221b      	movs	r2, #27
   156d8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   156dc:	2300      	movs	r3, #0
   156de:	73fb      	strb	r3, [r7, #15]
   156e0:	7bfb      	ldrb	r3, [r7, #15]
   156e2:	2b01      	cmp	r3, #1
   156e4:	dc17      	bgt.n	15716 <_ZN24TemperatureSensors_Class11InitModulesEv+0x52>
	{
		module[ii].Init(csPins[ii],spiLite);
   156e6:	7bfb      	ldrb	r3, [r7, #15]
   156e8:	225c      	movs	r2, #92	; 0x5c
   156ea:	fb02 f303 	mul.w	r3, r2, r3
   156ee:	3380      	adds	r3, #128	; 0x80
   156f0:	687a      	ldr	r2, [r7, #4]
   156f2:	4413      	add	r3, r2
   156f4:	1d18      	adds	r0, r3, #4
   156f6:	7bfb      	ldrb	r3, [r7, #15]
   156f8:	687a      	ldr	r2, [r7, #4]
   156fa:	334e      	adds	r3, #78	; 0x4e
   156fc:	009b      	lsls	r3, r3, #2
   156fe:	4413      	add	r3, r2
   15700:	6859      	ldr	r1, [r3, #4]
   15702:	687b      	ldr	r3, [r7, #4]
   15704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   15708:	461a      	mov	r2, r3
   1570a:	4b05      	ldr	r3, [pc, #20]	; (15720 <_ZN24TemperatureSensors_Class11InitModulesEv+0x5c>)
   1570c:	4798      	blx	r3
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   1570e:	7bfb      	ldrb	r3, [r7, #15]
   15710:	3301      	adds	r3, #1
   15712:	73fb      	strb	r3, [r7, #15]
   15714:	e7e4      	b.n	156e0 <_ZN24TemperatureSensors_Class11InitModulesEv+0x1c>
	}

}
   15716:	bf00      	nop
   15718:	4618      	mov	r0, r3
   1571a:	3710      	adds	r7, #16
   1571c:	46bd      	mov	sp, r7
   1571e:	bd80      	pop	{r7, pc}
   15720:	000186ad 	.word	0x000186ad

00015724 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   15724:	b580      	push	{r7, lr}
   15726:	b082      	sub	sp, #8
   15728:	af00      	add	r7, sp, #0
   1572a:	6078      	str	r0, [r7, #4]
	converterTimeout=false;
   1572c:	687b      	ldr	r3, [r7, #4]
   1572e:	2200      	movs	r2, #0
   15730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	converterReady[currentModule]=false;
   15734:	687b      	ldr	r3, [r7, #4]
   15736:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   1573a:	461a      	mov	r2, r3
   1573c:	687b      	ldr	r3, [r7, #4]
   1573e:	4413      	add	r3, r2
   15740:	2200      	movs	r2, #0
   15742:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   15746:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1574a:	490d      	ldr	r1, [pc, #52]	; (15780 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x5c>)
   1574c:	480d      	ldr	r0, [pc, #52]	; (15784 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x60>)
   1574e:	4b0e      	ldr	r3, [pc, #56]	; (15788 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x64>)
   15750:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   15752:	687b      	ldr	r3, [r7, #4]
   15754:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15758:	461a      	mov	r2, r3
   1575a:	235c      	movs	r3, #92	; 0x5c
   1575c:	fb03 f302 	mul.w	r3, r3, r2
   15760:	3380      	adds	r3, #128	; 0x80
   15762:	687a      	ldr	r2, [r7, #4]
   15764:	4413      	add	r3, r2
   15766:	1d1a      	adds	r2, r3, #4
   15768:	687b      	ldr	r3, [r7, #4]
   1576a:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   1576e:	4619      	mov	r1, r3
   15770:	4610      	mov	r0, r2
   15772:	4b06      	ldr	r3, [pc, #24]	; (1578c <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x68>)
   15774:	4798      	blx	r3
	
}
   15776:	bf00      	nop
   15778:	3708      	adds	r7, #8
   1577a:	46bd      	mov	sp, r7
   1577c:	bd80      	pop	{r7, pc}
   1577e:	bf00      	nop
   15780:	00015561 	.word	0x00015561
   15784:	2000a468 	.word	0x2000a468
   15788:	000175a1 	.word	0x000175a1
   1578c:	00018799 	.word	0x00018799

00015790 <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   15790:	b590      	push	{r4, r7, lr}
   15792:	b083      	sub	sp, #12
   15794:	af00      	add	r7, sp, #0
   15796:	6078      	str	r0, [r7, #4]
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   15798:	4934      	ldr	r1, [pc, #208]	; (1586c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xdc>)
   1579a:	4835      	ldr	r0, [pc, #212]	; (15870 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe0>)
   1579c:	4b35      	ldr	r3, [pc, #212]	; (15874 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe4>)
   1579e:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   157a0:	687b      	ldr	r3, [r7, #4]
   157a2:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   157a6:	461a      	mov	r2, r3
   157a8:	235c      	movs	r3, #92	; 0x5c
   157aa:	fb03 f302 	mul.w	r3, r3, r2
   157ae:	3380      	adds	r3, #128	; 0x80
   157b0:	687a      	ldr	r2, [r7, #4]
   157b2:	4413      	add	r3, r2
   157b4:	1d1a      	adds	r2, r3, #4
   157b6:	687b      	ldr	r3, [r7, #4]
   157b8:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   157bc:	4619      	mov	r1, r3
   157be:	4610      	mov	r0, r2
   157c0:	4b2d      	ldr	r3, [pc, #180]	; (15878 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe8>)
   157c2:	4798      	blx	r3
   157c4:	4602      	mov	r2, r0
   157c6:	687b      	ldr	r3, [r7, #4]
   157c8:	67da      	str	r2, [r3, #124]	; 0x7c
	faultData=module[currentModule].fault_data;
   157ca:	687b      	ldr	r3, [r7, #4]
   157cc:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   157d0:	4619      	mov	r1, r3
   157d2:	687a      	ldr	r2, [r7, #4]
   157d4:	235c      	movs	r3, #92	; 0x5c
   157d6:	fb03 f301 	mul.w	r3, r3, r1
   157da:	4413      	add	r3, r2
   157dc:	338a      	adds	r3, #138	; 0x8a
   157de:	781a      	ldrb	r2, [r3, #0]
   157e0:	687b      	ldr	r3, [r7, #4]
   157e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		if (faultData==VALID_TEMPERATURE)
   157e6:	687b      	ldr	r3, [r7, #4]
   157e8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   157ec:	2b01      	cmp	r3, #1
   157ee:	d112      	bne.n	15816 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x86>
		{
			values[currentModule][currentChannelIndex]=lastValue;
   157f0:	687b      	ldr	r3, [r7, #4]
   157f2:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   157f6:	4618      	mov	r0, r3
   157f8:	687b      	ldr	r3, [r7, #4]
   157fa:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   157fe:	461c      	mov	r4, r3
   15800:	687b      	ldr	r3, [r7, #4]
   15802:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
   15804:	687a      	ldr	r2, [r7, #4]
   15806:	4603      	mov	r3, r0
   15808:	005b      	lsls	r3, r3, #1
   1580a:	4403      	add	r3, r0
   1580c:	4423      	add	r3, r4
   1580e:	3318      	adds	r3, #24
   15810:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   15814:	e002      	b.n	1581c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>
		}
		else
		{
			lastValue=-999;
   15816:	687b      	ldr	r3, [r7, #4]
   15818:	4a18      	ldr	r2, [pc, #96]	; (1587c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xec>)
   1581a:	67da      	str	r2, [r3, #124]	; 0x7c
		}
	
	currentChannelIndex++;
   1581c:	687b      	ldr	r3, [r7, #4]
   1581e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15822:	3301      	adds	r3, #1
   15824:	b2da      	uxtb	r2, r3
   15826:	687b      	ldr	r3, [r7, #4]
   15828:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   1582c:	687b      	ldr	r3, [r7, #4]
   1582e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15832:	2b03      	cmp	r3, #3
   15834:	d114      	bne.n	15860 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xd0>
	{
		currentChannelIndex=0;
   15836:	687b      	ldr	r3, [r7, #4]
   15838:	2200      	movs	r2, #0
   1583a:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
		currentModule++;
   1583e:	687b      	ldr	r3, [r7, #4]
   15840:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15844:	3301      	adds	r3, #1
   15846:	b2da      	uxtb	r2, r3
   15848:	687b      	ldr	r3, [r7, #4]
   1584a:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
		if (currentModule==NUMBER_LTC2983_MODULES)
   1584e:	687b      	ldr	r3, [r7, #4]
   15850:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15854:	2b02      	cmp	r3, #2
   15856:	d103      	bne.n	15860 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xd0>
		{
			currentModule=0;
   15858:	687b      	ldr	r3, [r7, #4]
   1585a:	2200      	movs	r2, #0
   1585c:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
		}
	} 
	else
	{
	}
	return lastValue;
   15860:	687b      	ldr	r3, [r7, #4]
   15862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
   15864:	4618      	mov	r0, r3
   15866:	370c      	adds	r7, #12
   15868:	46bd      	mov	sp, r7
   1586a:	bd90      	pop	{r4, r7, pc}
   1586c:	00015561 	.word	0x00015561
   15870:	2000a468 	.word	0x2000a468
   15874:	00017531 	.word	0x00017531
   15878:	000188e1 	.word	0x000188e1
   1587c:	c479c000 	.word	0xc479c000

00015880 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
bool	TemperatureSensors_Class::IsConversionFinished(){
   15880:	b480      	push	{r7}
   15882:	b083      	sub	sp, #12
   15884:	af00      	add	r7, sp, #0
   15886:	6078      	str	r0, [r7, #4]
	return converterReady[0]&converterReady[1];
   15888:	687b      	ldr	r3, [r7, #4]
   1588a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
   1588e:	b2db      	uxtb	r3, r3
   15890:	461a      	mov	r2, r3
   15892:	687b      	ldr	r3, [r7, #4]
   15894:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
   15898:	b2db      	uxtb	r3, r3
   1589a:	4013      	ands	r3, r2
   1589c:	2b00      	cmp	r3, #0
   1589e:	bf14      	ite	ne
   158a0:	2301      	movne	r3, #1
   158a2:	2300      	moveq	r3, #0
   158a4:	b2db      	uxtb	r3, r3
}
   158a6:	4618      	mov	r0, r3
   158a8:	370c      	adds	r7, #12
   158aa:	46bd      	mov	sp, r7
   158ac:	bc80      	pop	{r7}
   158ae:	4770      	bx	lr

000158b0 <_ZN24TemperatureSensors_Class14SetModuleReadyEh>:
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
   158b0:	b480      	push	{r7}
   158b2:	b083      	sub	sp, #12
   158b4:	af00      	add	r7, sp, #0
   158b6:	6078      	str	r0, [r7, #4]
   158b8:	460b      	mov	r3, r1
   158ba:	70fb      	strb	r3, [r7, #3]
	module[m].ready=true;
   158bc:	78fb      	ldrb	r3, [r7, #3]
   158be:	687a      	ldr	r2, [r7, #4]
   158c0:	215c      	movs	r1, #92	; 0x5c
   158c2:	fb01 f303 	mul.w	r3, r1, r3
   158c6:	4413      	add	r3, r2
   158c8:	3384      	adds	r3, #132	; 0x84
   158ca:	2201      	movs	r2, #1
   158cc:	701a      	strb	r2, [r3, #0]
	return module[m].ready;
   158ce:	78fb      	ldrb	r3, [r7, #3]
   158d0:	687a      	ldr	r2, [r7, #4]
   158d2:	215c      	movs	r1, #92	; 0x5c
   158d4:	fb01 f303 	mul.w	r3, r1, r3
   158d8:	4413      	add	r3, r2
   158da:	3384      	adds	r3, #132	; 0x84
   158dc:	781b      	ldrb	r3, [r3, #0]
   158de:	b2db      	uxtb	r3, r3
}
   158e0:	4618      	mov	r0, r3
   158e2:	370c      	adds	r7, #12
   158e4:	46bd      	mov	sp, r7
   158e6:	bc80      	pop	{r7}
   158e8:	4770      	bx	lr
	...

000158ec <_Z41__static_initialization_and_destruction_0ii>:

TemperatureSensors_Class temperatures(&SPI_TEMP);
   158ec:	b580      	push	{r7, lr}
   158ee:	b082      	sub	sp, #8
   158f0:	af00      	add	r7, sp, #0
   158f2:	6078      	str	r0, [r7, #4]
   158f4:	6039      	str	r1, [r7, #0]
   158f6:	687b      	ldr	r3, [r7, #4]
   158f8:	2b01      	cmp	r3, #1
   158fa:	d115      	bne.n	15928 <_Z41__static_initialization_and_destruction_0ii+0x3c>
   158fc:	683b      	ldr	r3, [r7, #0]
   158fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15902:	4293      	cmp	r3, r2
   15904:	d110      	bne.n	15928 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static LT_SPI	ltSPI;
   15906:	480a      	ldr	r0, [pc, #40]	; (15930 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15908:	4b0a      	ldr	r3, [pc, #40]	; (15934 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1590a:	4798      	blx	r3
   1590c:	4a0a      	ldr	r2, [pc, #40]	; (15938 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   1590e:	490b      	ldr	r1, [pc, #44]	; (1593c <_Z41__static_initialization_and_destruction_0ii+0x50>)
   15910:	4807      	ldr	r0, [pc, #28]	; (15930 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15912:	4b0b      	ldr	r3, [pc, #44]	; (15940 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15914:	4798      	blx	r3
TemperatureSensors_Class temperatures(&SPI_TEMP);
   15916:	490b      	ldr	r1, [pc, #44]	; (15944 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   15918:	480b      	ldr	r0, [pc, #44]	; (15948 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1591a:	4b0c      	ldr	r3, [pc, #48]	; (1594c <_Z41__static_initialization_and_destruction_0ii+0x60>)
   1591c:	4798      	blx	r3
   1591e:	4a06      	ldr	r2, [pc, #24]	; (15938 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15920:	490b      	ldr	r1, [pc, #44]	; (15950 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   15922:	4809      	ldr	r0, [pc, #36]	; (15948 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15924:	4b06      	ldr	r3, [pc, #24]	; (15940 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15926:	4798      	blx	r3
   15928:	bf00      	nop
   1592a:	3708      	adds	r7, #8
   1592c:	46bd      	mov	sp, r7
   1592e:	bd80      	pop	{r7, pc}
   15930:	20009e40 	.word	0x20009e40
   15934:	00018ea9 	.word	0x00018ea9
   15938:	20000000 	.word	0x20000000
   1593c:	00018ed1 	.word	0x00018ed1
   15940:	0001949d 	.word	0x0001949d
   15944:	2000a958 	.word	0x2000a958
   15948:	20009e54 	.word	0x20009e54
   1594c:	00015585 	.word	0x00015585
   15950:	000155e1 	.word	0x000155e1

00015954 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
   15954:	b580      	push	{r7, lr}
   15956:	af00      	add	r7, sp, #0
   15958:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1595c:	2001      	movs	r0, #1
   1595e:	4b01      	ldr	r3, [pc, #4]	; (15964 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x10>)
   15960:	4798      	blx	r3
   15962:	bd80      	pop	{r7, pc}
   15964:	000158ed 	.word	0x000158ed

00015968 <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   15968:	b480      	push	{r7}
   1596a:	b083      	sub	sp, #12
   1596c:	af00      	add	r7, sp, #0
   1596e:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   15970:	4a04      	ldr	r2, [pc, #16]	; (15984 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   15972:	687b      	ldr	r3, [r7, #4]
   15974:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   15976:	687b      	ldr	r3, [r7, #4]
   15978:	4618      	mov	r0, r3
   1597a:	370c      	adds	r7, #12
   1597c:	46bd      	mov	sp, r7
   1597e:	bc80      	pop	{r7}
   15980:	4770      	bx	lr
   15982:	bf00      	nop
   15984:	20009fa4 	.word	0x20009fa4

00015988 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   15988:	b480      	push	{r7}
   1598a:	b083      	sub	sp, #12
   1598c:	af00      	add	r7, sp, #0
   1598e:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   15990:	687b      	ldr	r3, [r7, #4]
   15992:	4618      	mov	r0, r3
   15994:	370c      	adds	r7, #12
   15996:	46bd      	mov	sp, r7
   15998:	bc80      	pop	{r7}
   1599a:	4770      	bx	lr

0001599c <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   1599c:	b580      	push	{r7, lr}
   1599e:	b082      	sub	sp, #8
   159a0:	af00      	add	r7, sp, #0
   159a2:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   159a4:	687b      	ldr	r3, [r7, #4]
   159a6:	685a      	ldr	r2, [r3, #4]
   159a8:	687b      	ldr	r3, [r7, #4]
   159aa:	3308      	adds	r3, #8
   159ac:	4619      	mov	r1, r3
   159ae:	4610      	mov	r0, r2
   159b0:	4b06      	ldr	r3, [pc, #24]	; (159cc <_ZN13SPI_Syn_Class4initEv+0x30>)
   159b2:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   159b4:	687b      	ldr	r3, [r7, #4]
   159b6:	685b      	ldr	r3, [r3, #4]
   159b8:	4618      	mov	r0, r3
   159ba:	4b05      	ldr	r3, [pc, #20]	; (159d0 <_ZN13SPI_Syn_Class4initEv+0x34>)
   159bc:	4798      	blx	r3
	
	ready=true;
   159be:	687b      	ldr	r3, [r7, #4]
   159c0:	2201      	movs	r2, #1
   159c2:	701a      	strb	r2, [r3, #0]
	
}
   159c4:	bf00      	nop
   159c6:	3708      	adds	r7, #8
   159c8:	46bd      	mov	sp, r7
   159ca:	bd80      	pop	{r7, pc}
   159cc:	00006ed5 	.word	0x00006ed5
   159d0:	00006d49 	.word	0x00006d49

000159d4 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   159d4:	b480      	push	{r7}
   159d6:	b083      	sub	sp, #12
   159d8:	af00      	add	r7, sp, #0
   159da:	6078      	str	r0, [r7, #4]
   159dc:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   159de:	4a05      	ldr	r2, [pc, #20]	; (159f4 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   159e0:	687b      	ldr	r3, [r7, #4]
   159e2:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   159e4:	687b      	ldr	r3, [r7, #4]
   159e6:	683a      	ldr	r2, [r7, #0]
   159e8:	605a      	str	r2, [r3, #4]
}
   159ea:	bf00      	nop
   159ec:	370c      	adds	r7, #12
   159ee:	46bd      	mov	sp, r7
   159f0:	bc80      	pop	{r7}
   159f2:	4770      	bx	lr
   159f4:	20009fa4 	.word	0x20009fa4

000159f8 <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
   159f8:	b580      	push	{r7, lr}
   159fa:	b082      	sub	sp, #8
   159fc:	af00      	add	r7, sp, #0
   159fe:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   15a00:	687b      	ldr	r3, [r7, #4]
   15a02:	685a      	ldr	r2, [r3, #4]
   15a04:	687b      	ldr	r3, [r7, #4]
   15a06:	3308      	adds	r3, #8
   15a08:	4619      	mov	r1, r3
   15a0a:	4610      	mov	r0, r2
   15a0c:	4b07      	ldr	r3, [pc, #28]	; (15a2c <_ZN13SPI_Syn_Class6enableEv+0x34>)
   15a0e:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   15a10:	687b      	ldr	r3, [r7, #4]
   15a12:	685b      	ldr	r3, [r3, #4]
   15a14:	4618      	mov	r0, r3
   15a16:	4b06      	ldr	r3, [pc, #24]	; (15a30 <_ZN13SPI_Syn_Class6enableEv+0x38>)
   15a18:	4798      	blx	r3
	ready=true;
   15a1a:	687b      	ldr	r3, [r7, #4]
   15a1c:	2201      	movs	r2, #1
   15a1e:	701a      	strb	r2, [r3, #0]
	return 0;
   15a20:	2300      	movs	r3, #0
}
   15a22:	4618      	mov	r0, r3
   15a24:	3708      	adds	r7, #8
   15a26:	46bd      	mov	sp, r7
   15a28:	bd80      	pop	{r7, pc}
   15a2a:	bf00      	nop
   15a2c:	00006ed5 	.word	0x00006ed5
   15a30:	00006d49 	.word	0x00006d49

00015a34 <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
   15a34:	b580      	push	{r7, lr}
   15a36:	b086      	sub	sp, #24
   15a38:	af00      	add	r7, sp, #0
   15a3a:	60f8      	str	r0, [r7, #12]
   15a3c:	60b9      	str	r1, [r7, #8]
   15a3e:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   15a40:	68fb      	ldr	r3, [r7, #12]
   15a42:	2201      	movs	r2, #1
   15a44:	741a      	strb	r2, [r3, #16]
	w= io_write(spio,p,(uint16_t)n);
   15a46:	68fb      	ldr	r3, [r7, #12]
   15a48:	689b      	ldr	r3, [r3, #8]
   15a4a:	687a      	ldr	r2, [r7, #4]
   15a4c:	b292      	uxth	r2, r2
   15a4e:	68b9      	ldr	r1, [r7, #8]
   15a50:	4618      	mov	r0, r3
   15a52:	4b08      	ldr	r3, [pc, #32]	; (15a74 <_ZN13SPI_Syn_Class5writeEPKhl+0x40>)
   15a54:	4798      	blx	r3
   15a56:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   15a58:	697b      	ldr	r3, [r7, #20]
   15a5a:	2b00      	cmp	r3, #0
   15a5c:	bf14      	ite	ne
   15a5e:	2301      	movne	r3, #1
   15a60:	2300      	moveq	r3, #0
   15a62:	b2da      	uxtb	r2, r3
   15a64:	68fb      	ldr	r3, [r7, #12]
   15a66:	741a      	strb	r2, [r3, #16]
	 return w;
   15a68:	697b      	ldr	r3, [r7, #20]
	
}
   15a6a:	4618      	mov	r0, r3
   15a6c:	3718      	adds	r7, #24
   15a6e:	46bd      	mov	sp, r7
   15a70:	bd80      	pop	{r7, pc}
   15a72:	bf00      	nop
   15a74:	000193fd 	.word	0x000193fd

00015a78 <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
   15a78:	b580      	push	{r7, lr}
   15a7a:	b086      	sub	sp, #24
   15a7c:	af00      	add	r7, sp, #0
   15a7e:	60f8      	str	r0, [r7, #12]
   15a80:	60b9      	str	r1, [r7, #8]
   15a82:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   15a84:	68fb      	ldr	r3, [r7, #12]
   15a86:	2201      	movs	r2, #1
   15a88:	745a      	strb	r2, [r3, #17]
	r=io_read(spio,p,(uint16_t)n);
   15a8a:	68fb      	ldr	r3, [r7, #12]
   15a8c:	689b      	ldr	r3, [r3, #8]
   15a8e:	687a      	ldr	r2, [r7, #4]
   15a90:	b292      	uxth	r2, r2
   15a92:	68b9      	ldr	r1, [r7, #8]
   15a94:	4618      	mov	r0, r3
   15a96:	4b08      	ldr	r3, [pc, #32]	; (15ab8 <_ZN13SPI_Syn_Class4readEPhl+0x40>)
   15a98:	4798      	blx	r3
   15a9a:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   15a9c:	697b      	ldr	r3, [r7, #20]
   15a9e:	2b00      	cmp	r3, #0
   15aa0:	bf14      	ite	ne
   15aa2:	2301      	movne	r3, #1
   15aa4:	2300      	moveq	r3, #0
   15aa6:	b2da      	uxtb	r2, r3
   15aa8:	68fb      	ldr	r3, [r7, #12]
   15aaa:	745a      	strb	r2, [r3, #17]
	return  r;
   15aac:	697b      	ldr	r3, [r7, #20]
}
   15aae:	4618      	mov	r0, r3
   15ab0:	3718      	adds	r7, #24
   15ab2:	46bd      	mov	sp, r7
   15ab4:	bd80      	pop	{r7, pc}
   15ab6:	bf00      	nop
   15ab8:	0001944d 	.word	0x0001944d

00015abc <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
   15abc:	b580      	push	{r7, lr}
   15abe:	b082      	sub	sp, #8
   15ac0:	af00      	add	r7, sp, #0
   15ac2:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   15ac4:	687b      	ldr	r3, [r7, #4]
   15ac6:	685b      	ldr	r3, [r3, #4]
   15ac8:	4618      	mov	r0, r3
   15aca:	4b03      	ldr	r3, [pc, #12]	; (15ad8 <_ZN13SPI_Syn_Class7disableEv+0x1c>)
   15acc:	4798      	blx	r3
	
}
   15ace:	bf00      	nop
   15ad0:	3708      	adds	r7, #8
   15ad2:	46bd      	mov	sp, r7
   15ad4:	bd80      	pop	{r7, pc}
   15ad6:	bf00      	nop
   15ad8:	00006d85 	.word	0x00006d85

00015adc <_ZN13SPI_Syn_Class10isSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::isSPIReady(void){
   15adc:	b480      	push	{r7}
   15ade:	b083      	sub	sp, #12
   15ae0:	af00      	add	r7, sp, #0
   15ae2:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
   15ae4:	687b      	ldr	r3, [r7, #4]
   15ae6:	7c5b      	ldrb	r3, [r3, #17]
   15ae8:	b2db      	uxtb	r3, r3
   15aea:	2b00      	cmp	r3, #0
   15aec:	d103      	bne.n	15af6 <_ZN13SPI_Syn_Class10isSPIReadyEv+0x1a>
   15aee:	687b      	ldr	r3, [r7, #4]
   15af0:	7c1b      	ldrb	r3, [r3, #16]
   15af2:	b2db      	uxtb	r3, r3
   15af4:	2b00      	cmp	r3, #0
   15af6:	687b      	ldr	r3, [r7, #4]
   15af8:	2201      	movs	r2, #1
   15afa:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
   15afc:	687b      	ldr	r3, [r7, #4]
   15afe:	781b      	ldrb	r3, [r3, #0]
   15b00:	b2db      	uxtb	r3, r3
   15b02:	2b00      	cmp	r3, #0
   15b04:	d001      	beq.n	15b0a <_ZN13SPI_Syn_Class10isSPIReadyEv+0x2e>
	{
		
		return true;
   15b06:	2301      	movs	r3, #1
   15b08:	e000      	b.n	15b0c <_ZN13SPI_Syn_Class10isSPIReadyEv+0x30>
	} 
	else
	{
		return false;
   15b0a:	2300      	movs	r3, #0
	}
	return ready;
	
}
   15b0c:	4618      	mov	r0, r3
   15b0e:	370c      	adds	r7, #12
   15b10:	46bd      	mov	sp, r7
   15b12:	bc80      	pop	{r7}
   15b14:	4770      	bx	lr
	...

00015b18 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
   15b18:	b480      	push	{r7}
   15b1a:	b083      	sub	sp, #12
   15b1c:	af00      	add	r7, sp, #0
   15b1e:	6078      	str	r0, [r7, #4]
   15b20:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=i2c;
   15b22:	687b      	ldr	r3, [r7, #4]
   15b24:	683a      	ldr	r2, [r7, #0]
   15b26:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
   15b28:	4a05      	ldr	r2, [pc, #20]	; (15b40 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x28>)
   15b2a:	687b      	ldr	r3, [r7, #4]
   15b2c:	6013      	str	r3, [r2, #0]
	i2ca=&i2cAsync;
   15b2e:	687b      	ldr	r3, [r7, #4]
   15b30:	4a04      	ldr	r2, [pc, #16]	; (15b44 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
   15b32:	609a      	str	r2, [r3, #8]
} //AT24MAC_Class
   15b34:	687b      	ldr	r3, [r7, #4]
   15b36:	4618      	mov	r0, r3
   15b38:	370c      	adds	r7, #12
   15b3a:	46bd      	mov	sp, r7
   15b3c:	bc80      	pop	{r7}
   15b3e:	4770      	bx	lr
   15b40:	20009fa8 	.word	0x20009fa8
   15b44:	20009fb0 	.word	0x20009fb0

00015b48 <_ZN13AT24MAC_ClassD1Ev>:


// default destructor
AT24MAC_Class::~AT24MAC_Class()
   15b48:	b480      	push	{r7}
   15b4a:	b083      	sub	sp, #12
   15b4c:	af00      	add	r7, sp, #0
   15b4e:	6078      	str	r0, [r7, #4]
{
} //~AT24MAC_Class
   15b50:	687b      	ldr	r3, [r7, #4]
   15b52:	4618      	mov	r0, r3
   15b54:	370c      	adds	r7, #12
   15b56:	46bd      	mov	sp, r7
   15b58:	bc80      	pop	{r7}
   15b5a:	4770      	bx	lr

00015b5c <_ZN13AT24MAC_Class4InitEv>:



bool AT24MAC_Class::Init(void){
   15b5c:	b580      	push	{r7, lr}
   15b5e:	b082      	sub	sp, #8
   15b60:	af00      	add	r7, sp, #0
   15b62:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
   15b64:	2156      	movs	r1, #86	; 0x56
   15b66:	6878      	ldr	r0, [r7, #4]
   15b68:	4b04      	ldr	r3, [pc, #16]	; (15b7c <_ZN13AT24MAC_Class4InitEv+0x20>)
   15b6a:	4798      	blx	r3
	return SelfTest();
   15b6c:	6878      	ldr	r0, [r7, #4]
   15b6e:	4b04      	ldr	r3, [pc, #16]	; (15b80 <_ZN13AT24MAC_Class4InitEv+0x24>)
   15b70:	4798      	blx	r3
   15b72:	4603      	mov	r3, r0
}
   15b74:	4618      	mov	r0, r3
   15b76:	3708      	adds	r7, #8
   15b78:	46bd      	mov	sp, r7
   15b7a:	bd80      	pop	{r7, pc}
   15b7c:	00015b85 	.word	0x00015b85
   15b80:	00015e35 	.word	0x00015e35

00015b84 <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
   15b84:	b580      	push	{r7, lr}
   15b86:	b082      	sub	sp, #8
   15b88:	af00      	add	r7, sp, #0
   15b8a:	6078      	str	r0, [r7, #4]
   15b8c:	460b      	mov	r3, r1
   15b8e:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   15b90:	687b      	ldr	r3, [r7, #4]
   15b92:	78fa      	ldrb	r2, [r7, #3]
   15b94:	731a      	strb	r2, [r3, #12]
	i2ca->Set_descriptor(ptrI2CDescr);
   15b96:	687b      	ldr	r3, [r7, #4]
   15b98:	689a      	ldr	r2, [r3, #8]
   15b9a:	687b      	ldr	r3, [r7, #4]
   15b9c:	685b      	ldr	r3, [r3, #4]
   15b9e:	4619      	mov	r1, r3
   15ba0:	4610      	mov	r0, r2
   15ba2:	4b09      	ldr	r3, [pc, #36]	; (15bc8 <_ZN13AT24MAC_Class4InitEh+0x44>)
   15ba4:	4798      	blx	r3
	isReady=i2ca->Init(addr)==0;
   15ba6:	687b      	ldr	r3, [r7, #4]
   15ba8:	689b      	ldr	r3, [r3, #8]
   15baa:	78fa      	ldrb	r2, [r7, #3]
   15bac:	4611      	mov	r1, r2
   15bae:	4618      	mov	r0, r3
   15bb0:	4b06      	ldr	r3, [pc, #24]	; (15bcc <_ZN13AT24MAC_Class4InitEh+0x48>)
   15bb2:	4798      	blx	r3
   15bb4:	4603      	mov	r3, r0
   15bb6:	f083 0301 	eor.w	r3, r3, #1
   15bba:	b2da      	uxtb	r2, r3
   15bbc:	687b      	ldr	r3, [r7, #4]
   15bbe:	701a      	strb	r2, [r3, #0]
}
   15bc0:	bf00      	nop
   15bc2:	3708      	adds	r7, #8
   15bc4:	46bd      	mov	sp, r7
   15bc6:	bd80      	pop	{r7, pc}
   15bc8:	00014f35 	.word	0x00014f35
   15bcc:	0001503d 	.word	0x0001503d

00015bd0 <_ZN13AT24MAC_Class12WriteAddressEPhhh>:
	array[1]=value;
	uint32_t w= i2ca->Write(array,2);
	while(!i2ca->txReady);
	return	w;
}
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint8_t addr, uint8_t size){
   15bd0:	b580      	push	{r7, lr}
   15bd2:	b08c      	sub	sp, #48	; 0x30
   15bd4:	af00      	add	r7, sp, #0
   15bd6:	60f8      	str	r0, [r7, #12]
   15bd8:	60b9      	str	r1, [r7, #8]
   15bda:	4611      	mov	r1, r2
   15bdc:	461a      	mov	r2, r3
   15bde:	460b      	mov	r3, r1
   15be0:	71fb      	strb	r3, [r7, #7]
   15be2:	4613      	mov	r3, r2
   15be4:	71bb      	strb	r3, [r7, #6]
	uint32_t w;
	uint8_t i;
	uint8_t	*ptr=p;
   15be6:	68bb      	ldr	r3, [r7, #8]
   15be8:	627b      	str	r3, [r7, #36]	; 0x24
// 		delay_us(1500);
// 		p++;
// 	
// 		while(!AcknolledgePolling());
// 	}
	isReady=false;
   15bea:	68fb      	ldr	r3, [r7, #12]
   15bec:	2200      	movs	r2, #0
   15bee:	701a      	strb	r2, [r3, #0]
	uint8_t array[1+AT24MAC_BUFFER_SIZE],value,size0,addr0=addr;
   15bf0:	79fb      	ldrb	r3, [r7, #7]
   15bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if ( size>AT24MAC_BUFFER_SIZE)
   15bf6:	79bb      	ldrb	r3, [r7, #6]
   15bf8:	2b10      	cmp	r3, #16
   15bfa:	dd6e      	ble.n	15cda <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x10a>
	{
		array[0]=addr0;
   15bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   15c00:	743b      	strb	r3, [r7, #16]
		size0=AT24MAC_BUFFER_SIZE-addr%(AT24MAC_BUFFER_SIZE);
   15c02:	79fb      	ldrb	r3, [r7, #7]
   15c04:	f003 030f 	and.w	r3, r3, #15
   15c08:	b2db      	uxtb	r3, r3
   15c0a:	f1c3 0310 	rsb	r3, r3, #16
   15c0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		memcpy((void*)&array[1],ptr,size0);
   15c12:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
   15c16:	f107 0310 	add.w	r3, r7, #16
   15c1a:	3301      	adds	r3, #1
   15c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15c1e:	4618      	mov	r0, r3
   15c20:	4b41      	ldr	r3, [pc, #260]	; (15d28 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   15c22:	4798      	blx	r3
		w= i2ca->Write(array,1+size0);
   15c24:	68fb      	ldr	r3, [r7, #12]
   15c26:	6898      	ldr	r0, [r3, #8]
   15c28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   15c2c:	b29b      	uxth	r3, r3
   15c2e:	3301      	adds	r3, #1
   15c30:	b29a      	uxth	r2, r3
   15c32:	f107 0310 	add.w	r3, r7, #16
   15c36:	4619      	mov	r1, r3
   15c38:	4b3c      	ldr	r3, [pc, #240]	; (15d2c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   15c3a:	4798      	blx	r3
   15c3c:	4603      	mov	r3, r0
   15c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(!i2ca->txReady);
   15c40:	68fb      	ldr	r3, [r7, #12]
   15c42:	689b      	ldr	r3, [r3, #8]
   15c44:	7d1b      	ldrb	r3, [r3, #20]
   15c46:	b2db      	uxtb	r3, r3
   15c48:	f083 0301 	eor.w	r3, r3, #1
   15c4c:	b2db      	uxtb	r3, r3
   15c4e:	2b00      	cmp	r3, #0
   15c50:	d000      	beq.n	15c54 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x84>
   15c52:	e7f5      	b.n	15c40 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x70>
		ptr+=size0;
   15c54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   15c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15c5a:	4413      	add	r3, r2
   15c5c:	627b      	str	r3, [r7, #36]	; 0x24
		addr0+=size0;
   15c5e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   15c62:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   15c66:	4413      	add	r3, r2
   15c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for (i = size0; i <size+1; i+=AT24MAC_BUFFER_SIZE)
   15c6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   15c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   15c74:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   15c78:	79bb      	ldrb	r3, [r7, #6]
   15c7a:	3301      	adds	r3, #1
   15c7c:	429a      	cmp	r2, r3
   15c7e:	da4d      	bge.n	15d1c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x14c>
		{
			array[0]=addr0;
   15c80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   15c84:	743b      	strb	r3, [r7, #16]
			memcpy((void*)&array[1],ptr,AT24MAC_BUFFER_SIZE);
   15c86:	f107 0310 	add.w	r3, r7, #16
   15c8a:	3301      	adds	r3, #1
   15c8c:	2210      	movs	r2, #16
   15c8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15c90:	4618      	mov	r0, r3
   15c92:	4b25      	ldr	r3, [pc, #148]	; (15d28 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   15c94:	4798      	blx	r3
			w= i2ca->Write(array,1+AT24MAC_BUFFER_SIZE);
   15c96:	68fb      	ldr	r3, [r7, #12]
   15c98:	689b      	ldr	r3, [r3, #8]
   15c9a:	f107 0110 	add.w	r1, r7, #16
   15c9e:	2211      	movs	r2, #17
   15ca0:	4618      	mov	r0, r3
   15ca2:	4b22      	ldr	r3, [pc, #136]	; (15d2c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   15ca4:	4798      	blx	r3
   15ca6:	4603      	mov	r3, r0
   15ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(!i2ca->txReady);
   15caa:	68fb      	ldr	r3, [r7, #12]
   15cac:	689b      	ldr	r3, [r3, #8]
   15cae:	7d1b      	ldrb	r3, [r3, #20]
   15cb0:	b2db      	uxtb	r3, r3
   15cb2:	f083 0301 	eor.w	r3, r3, #1
   15cb6:	b2db      	uxtb	r3, r3
   15cb8:	2b00      	cmp	r3, #0
   15cba:	d000      	beq.n	15cbe <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xee>
   15cbc:	e7f5      	b.n	15caa <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xda>
			ptr+=AT24MAC_BUFFER_SIZE;
   15cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15cc0:	3310      	adds	r3, #16
   15cc2:	627b      	str	r3, [r7, #36]	; 0x24
			addr0+=AT24MAC_BUFFER_SIZE;
   15cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   15cc8:	3310      	adds	r3, #16
   15cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for (i = size0; i <size+1; i+=AT24MAC_BUFFER_SIZE)
   15cce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   15cd2:	3310      	adds	r3, #16
   15cd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   15cd8:	e7cc      	b.n	15c74 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xa4>
		}
		
	} 
	else
	{
		array[0]=addr;
   15cda:	79fb      	ldrb	r3, [r7, #7]
   15cdc:	743b      	strb	r3, [r7, #16]
		memcpy((void*)&array[1],p,size);
   15cde:	79ba      	ldrb	r2, [r7, #6]
   15ce0:	f107 0310 	add.w	r3, r7, #16
   15ce4:	3301      	adds	r3, #1
   15ce6:	68b9      	ldr	r1, [r7, #8]
   15ce8:	4618      	mov	r0, r3
   15cea:	4b0f      	ldr	r3, [pc, #60]	; (15d28 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   15cec:	4798      	blx	r3
		w= i2ca->Write(array,1+size);
   15cee:	68fb      	ldr	r3, [r7, #12]
   15cf0:	6898      	ldr	r0, [r3, #8]
   15cf2:	79bb      	ldrb	r3, [r7, #6]
   15cf4:	b29b      	uxth	r3, r3
   15cf6:	3301      	adds	r3, #1
   15cf8:	b29a      	uxth	r2, r3
   15cfa:	f107 0310 	add.w	r3, r7, #16
   15cfe:	4619      	mov	r1, r3
   15d00:	4b0a      	ldr	r3, [pc, #40]	; (15d2c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   15d02:	4798      	blx	r3
   15d04:	4603      	mov	r3, r0
   15d06:	62fb      	str	r3, [r7, #44]	; 0x2c
		//AcknolledgePolling();
		while(!i2ca->txReady);
   15d08:	68fb      	ldr	r3, [r7, #12]
   15d0a:	689b      	ldr	r3, [r3, #8]
   15d0c:	7d1b      	ldrb	r3, [r3, #20]
   15d0e:	b2db      	uxtb	r3, r3
   15d10:	f083 0301 	eor.w	r3, r3, #1
   15d14:	b2db      	uxtb	r3, r3
   15d16:	2b00      	cmp	r3, #0
   15d18:	d000      	beq.n	15d1c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x14c>
   15d1a:	e7f5      	b.n	15d08 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x138>
	}
	
	
	
	return	w;
   15d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   15d1e:	4618      	mov	r0, r3
   15d20:	3730      	adds	r7, #48	; 0x30
   15d22:	46bd      	mov	sp, r7
   15d24:	bd80      	pop	{r7, pc}
   15d26:	bf00      	nop
   15d28:	0001bc05 	.word	0x0001bc05
   15d2c:	0001508d 	.word	0x0001508d

00015d30 <_ZN13AT24MAC_Class12WriteAddressEPhth>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint16_t addr, uint8_t size){
   15d30:	b590      	push	{r4, r7, lr}
   15d32:	b087      	sub	sp, #28
   15d34:	af00      	add	r7, sp, #0
   15d36:	60f8      	str	r0, [r7, #12]
   15d38:	60b9      	str	r1, [r7, #8]
   15d3a:	4611      	mov	r1, r2
   15d3c:	461a      	mov	r2, r3
   15d3e:	460b      	mov	r3, r1
   15d40:	80fb      	strh	r3, [r7, #6]
   15d42:	4613      	mov	r3, r2
   15d44:	717b      	strb	r3, [r7, #5]
	

	uint8_t add=(uint8_t)(0xff&addr);
   15d46:	88fb      	ldrh	r3, [r7, #6]
   15d48:	75fb      	strb	r3, [r7, #23]
	return	WriteAddress(p,add,size);
   15d4a:	797b      	ldrb	r3, [r7, #5]
   15d4c:	7dfa      	ldrb	r2, [r7, #23]
   15d4e:	68b9      	ldr	r1, [r7, #8]
   15d50:	68f8      	ldr	r0, [r7, #12]
   15d52:	4c03      	ldr	r4, [pc, #12]	; (15d60 <_ZN13AT24MAC_Class12WriteAddressEPhth+0x30>)
   15d54:	47a0      	blx	r4
   15d56:	4603      	mov	r3, r0
}
   15d58:	4618      	mov	r0, r3
   15d5a:	371c      	adds	r7, #28
   15d5c:	46bd      	mov	sp, r7
   15d5e:	bd90      	pop	{r4, r7, pc}
   15d60:	00015bd1 	.word	0x00015bd1

00015d64 <_ZN13AT24MAC_Class11ReadAddressEPhhh>:
	i2ca->Read(&value,1);
	
	return value;
}

uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint8_t addr, uint8_t size){
   15d64:	b580      	push	{r7, lr}
   15d66:	b086      	sub	sp, #24
   15d68:	af00      	add	r7, sp, #0
   15d6a:	60f8      	str	r0, [r7, #12]
   15d6c:	60b9      	str	r1, [r7, #8]
   15d6e:	4611      	mov	r1, r2
   15d70:	461a      	mov	r2, r3
   15d72:	460b      	mov	r3, r1
   15d74:	71fb      	strb	r3, [r7, #7]
   15d76:	4613      	mov	r3, r2
   15d78:	71bb      	strb	r3, [r7, #6]
	
	uint32_t r;
	uint8_t	value;
	while(!i2ca->rxReady);
   15d7a:	68fb      	ldr	r3, [r7, #12]
   15d7c:	689b      	ldr	r3, [r3, #8]
   15d7e:	7d5b      	ldrb	r3, [r3, #21]
   15d80:	b2db      	uxtb	r3, r3
   15d82:	f083 0301 	eor.w	r3, r3, #1
   15d86:	b2db      	uxtb	r3, r3
   15d88:	2b00      	cmp	r3, #0
   15d8a:	d000      	beq.n	15d8e <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x2a>
   15d8c:	e7f5      	b.n	15d7a <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x16>
	i2ca->Write(&addr,1);
   15d8e:	68fb      	ldr	r3, [r7, #12]
   15d90:	689b      	ldr	r3, [r3, #8]
   15d92:	1df9      	adds	r1, r7, #7
   15d94:	2201      	movs	r2, #1
   15d96:	4618      	mov	r0, r3
   15d98:	4b12      	ldr	r3, [pc, #72]	; (15de4 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x80>)
   15d9a:	4798      	blx	r3
	while(!i2ca->txReady);
   15d9c:	68fb      	ldr	r3, [r7, #12]
   15d9e:	689b      	ldr	r3, [r3, #8]
   15da0:	7d1b      	ldrb	r3, [r3, #20]
   15da2:	b2db      	uxtb	r3, r3
   15da4:	f083 0301 	eor.w	r3, r3, #1
   15da8:	b2db      	uxtb	r3, r3
   15daa:	2b00      	cmp	r3, #0
   15dac:	d000      	beq.n	15db0 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x4c>
   15dae:	e7f5      	b.n	15d9c <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x38>
	r= i2ca->Read(p,size);
   15db0:	68fb      	ldr	r3, [r7, #12]
   15db2:	689b      	ldr	r3, [r3, #8]
   15db4:	79ba      	ldrb	r2, [r7, #6]
   15db6:	b292      	uxth	r2, r2
   15db8:	68b9      	ldr	r1, [r7, #8]
   15dba:	4618      	mov	r0, r3
   15dbc:	4b0a      	ldr	r3, [pc, #40]	; (15de8 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x84>)
   15dbe:	4798      	blx	r3
   15dc0:	4603      	mov	r3, r0
   15dc2:	617b      	str	r3, [r7, #20]
	while(!i2ca->rxReady);
   15dc4:	68fb      	ldr	r3, [r7, #12]
   15dc6:	689b      	ldr	r3, [r3, #8]
   15dc8:	7d5b      	ldrb	r3, [r3, #21]
   15dca:	b2db      	uxtb	r3, r3
   15dcc:	f083 0301 	eor.w	r3, r3, #1
   15dd0:	b2db      	uxtb	r3, r3
   15dd2:	2b00      	cmp	r3, #0
   15dd4:	d000      	beq.n	15dd8 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x74>
   15dd6:	e7f5      	b.n	15dc4 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x60>
			localAddress+=localSize;
		}
	}
	*/
	
	return r;
   15dd8:	697b      	ldr	r3, [r7, #20]
}
   15dda:	4618      	mov	r0, r3
   15ddc:	3718      	adds	r7, #24
   15dde:	46bd      	mov	sp, r7
   15de0:	bd80      	pop	{r7, pc}
   15de2:	bf00      	nop
   15de4:	0001508d 	.word	0x0001508d
   15de8:	000150d1 	.word	0x000150d1

00015dec <_ZN13AT24MAC_Class11ReadAddressEPhth>:
uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint16_t addr, uint8_t size){
   15dec:	b590      	push	{r4, r7, lr}
   15dee:	b087      	sub	sp, #28
   15df0:	af00      	add	r7, sp, #0
   15df2:	60f8      	str	r0, [r7, #12]
   15df4:	60b9      	str	r1, [r7, #8]
   15df6:	4611      	mov	r1, r2
   15df8:	461a      	mov	r2, r3
   15dfa:	460b      	mov	r3, r1
   15dfc:	80fb      	strh	r3, [r7, #6]
   15dfe:	4613      	mov	r3, r2
   15e00:	717b      	strb	r3, [r7, #5]
	uint8_t add=(uint8_t)(0xff&addr);
   15e02:	88fb      	ldrh	r3, [r7, #6]
   15e04:	75fb      	strb	r3, [r7, #23]
	while(!i2ca->rxReady);
   15e06:	68fb      	ldr	r3, [r7, #12]
   15e08:	689b      	ldr	r3, [r3, #8]
   15e0a:	7d5b      	ldrb	r3, [r3, #21]
   15e0c:	b2db      	uxtb	r3, r3
   15e0e:	f083 0301 	eor.w	r3, r3, #1
   15e12:	b2db      	uxtb	r3, r3
   15e14:	2b00      	cmp	r3, #0
   15e16:	d000      	beq.n	15e1a <_ZN13AT24MAC_Class11ReadAddressEPhth+0x2e>
   15e18:	e7f5      	b.n	15e06 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x1a>
	return ReadAddress(p,add,size);
   15e1a:	797b      	ldrb	r3, [r7, #5]
   15e1c:	7dfa      	ldrb	r2, [r7, #23]
   15e1e:	68b9      	ldr	r1, [r7, #8]
   15e20:	68f8      	ldr	r0, [r7, #12]
   15e22:	4c03      	ldr	r4, [pc, #12]	; (15e30 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x44>)
   15e24:	47a0      	blx	r4
   15e26:	4603      	mov	r3, r0
}
   15e28:	4618      	mov	r0, r3
   15e2a:	371c      	adds	r7, #28
   15e2c:	46bd      	mov	sp, r7
   15e2e:	bd90      	pop	{r4, r7, pc}
   15e30:	00015d65 	.word	0x00015d65

00015e34 <_ZN13AT24MAC_Class8SelfTestEv>:
		GetAcknowledge();
	} while (!IsReady());
	return isReady;
}

bool	AT24MAC_Class::SelfTest(void){
   15e34:	b590      	push	{r4, r7, lr}
   15e36:	b085      	sub	sp, #20
   15e38:	af00      	add	r7, sp, #0
   15e3a:	6078      	str	r0, [r7, #4]
	currentAddress=AT24MAC_MEMORY_SIZE-AT24MAC_BUFFER_SIZE*2;
   15e3c:	687b      	ldr	r3, [r7, #4]
   15e3e:	22e0      	movs	r2, #224	; 0xe0
   15e40:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   15e44:	2300      	movs	r3, #0
   15e46:	60fb      	str	r3, [r7, #12]
   15e48:	68fb      	ldr	r3, [r7, #12]
   15e4a:	2b0f      	cmp	r3, #15
   15e4c:	dc18      	bgt.n	15e80 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
		tx_buffer[i] = (uint8_t)rand();
   15e4e:	4b33      	ldr	r3, [pc, #204]	; (15f1c <_ZN13AT24MAC_Class8SelfTestEv+0xe8>)
   15e50:	4798      	blx	r3
   15e52:	4603      	mov	r3, r0
   15e54:	b2d9      	uxtb	r1, r3
   15e56:	687a      	ldr	r2, [r7, #4]
   15e58:	68fb      	ldr	r3, [r7, #12]
   15e5a:	4413      	add	r3, r2
   15e5c:	330e      	adds	r3, #14
   15e5e:	460a      	mov	r2, r1
   15e60:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = (uint8_t)(AT24MAC_BUFFER_SIZE-i);
   15e62:	68fb      	ldr	r3, [r7, #12]
   15e64:	b2db      	uxtb	r3, r3
   15e66:	f1c3 0310 	rsb	r3, r3, #16
   15e6a:	b2d9      	uxtb	r1, r3
   15e6c:	687a      	ldr	r2, [r7, #4]
   15e6e:	68fb      	ldr	r3, [r7, #12]
   15e70:	4413      	add	r3, r2
   15e72:	331e      	adds	r3, #30
   15e74:	460a      	mov	r2, r1
   15e76:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   15e78:	68fb      	ldr	r3, [r7, #12]
   15e7a:	3301      	adds	r3, #1
   15e7c:	60fb      	str	r3, [r7, #12]
   15e7e:	e7e3      	b.n	15e48 <_ZN13AT24MAC_Class8SelfTestEv+0x14>
	}

	while(!IsReady());
   15e80:	6878      	ldr	r0, [r7, #4]
   15e82:	4b27      	ldr	r3, [pc, #156]	; (15f20 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   15e84:	4798      	blx	r3
   15e86:	4603      	mov	r3, r0
   15e88:	f083 0301 	eor.w	r3, r3, #1
   15e8c:	b2db      	uxtb	r3, r3
   15e8e:	2b00      	cmp	r3, #0
   15e90:	d000      	beq.n	15e94 <_ZN13AT24MAC_Class8SelfTestEv+0x60>
   15e92:	e7f5      	b.n	15e80 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
	WriteAddress(tx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   15e94:	687b      	ldr	r3, [r7, #4]
   15e96:	f103 010e 	add.w	r1, r3, #14
   15e9a:	687b      	ldr	r3, [r7, #4]
   15e9c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   15ea0:	2310      	movs	r3, #16
   15ea2:	6878      	ldr	r0, [r7, #4]
   15ea4:	4c1f      	ldr	r4, [pc, #124]	; (15f24 <_ZN13AT24MAC_Class8SelfTestEv+0xf0>)
   15ea6:	47a0      	blx	r4
	while(!IsReady());
   15ea8:	6878      	ldr	r0, [r7, #4]
   15eaa:	4b1d      	ldr	r3, [pc, #116]	; (15f20 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   15eac:	4798      	blx	r3
   15eae:	4603      	mov	r3, r0
   15eb0:	f083 0301 	eor.w	r3, r3, #1
   15eb4:	b2db      	uxtb	r3, r3
   15eb6:	2b00      	cmp	r3, #0
   15eb8:	d000      	beq.n	15ebc <_ZN13AT24MAC_Class8SelfTestEv+0x88>
   15eba:	e7f5      	b.n	15ea8 <_ZN13AT24MAC_Class8SelfTestEv+0x74>
	ReadAddress(rx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   15ebc:	687b      	ldr	r3, [r7, #4]
   15ebe:	f103 011e 	add.w	r1, r3, #30
   15ec2:	687b      	ldr	r3, [r7, #4]
   15ec4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   15ec8:	2310      	movs	r3, #16
   15eca:	6878      	ldr	r0, [r7, #4]
   15ecc:	4c16      	ldr	r4, [pc, #88]	; (15f28 <_ZN13AT24MAC_Class8SelfTestEv+0xf4>)
   15ece:	47a0      	blx	r4
	isOK = true;
   15ed0:	687b      	ldr	r3, [r7, #4]
   15ed2:	2201      	movs	r2, #1
   15ed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   15ed8:	2300      	movs	r3, #0
   15eda:	60bb      	str	r3, [r7, #8]
   15edc:	68bb      	ldr	r3, [r7, #8]
   15ede:	2b0f      	cmp	r3, #15
   15ee0:	dc14      	bgt.n	15f0c <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
		if (tx_buffer[i] != rx_buffer[i]) {
   15ee2:	687a      	ldr	r2, [r7, #4]
   15ee4:	68bb      	ldr	r3, [r7, #8]
   15ee6:	4413      	add	r3, r2
   15ee8:	330e      	adds	r3, #14
   15eea:	781a      	ldrb	r2, [r3, #0]
   15eec:	6879      	ldr	r1, [r7, #4]
   15eee:	68bb      	ldr	r3, [r7, #8]
   15ef0:	440b      	add	r3, r1
   15ef2:	331e      	adds	r3, #30
   15ef4:	781b      	ldrb	r3, [r3, #0]
   15ef6:	429a      	cmp	r2, r3
   15ef8:	d004      	beq.n	15f04 <_ZN13AT24MAC_Class8SelfTestEv+0xd0>
			isOK = false;
   15efa:	687b      	ldr	r3, [r7, #4]
   15efc:	2200      	movs	r2, #0
   15efe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
// 			usb.print("EEPROM verification failed. Address: ");
// 			usb.print(addr,HEX);
// 			usb<<" bit :"<<i<<NEWLINE;
			//flashAddress=0;
			
			break;
   15f02:	e003      	b.n	15f0c <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   15f04:	68bb      	ldr	r3, [r7, #8]
   15f06:	3301      	adds	r3, #1
   15f08:	60bb      	str	r3, [r7, #8]
   15f0a:	e7e7      	b.n	15edc <_ZN13AT24MAC_Class8SelfTestEv+0xa8>
		}
		
	}
	return isOK;
   15f0c:	687b      	ldr	r3, [r7, #4]
   15f0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
   15f12:	4618      	mov	r0, r3
   15f14:	3714      	adds	r7, #20
   15f16:	46bd      	mov	sp, r7
   15f18:	bd90      	pop	{r4, r7, pc}
   15f1a:	bf00      	nop
   15f1c:	0001bdd5 	.word	0x0001bdd5
   15f20:	00015f2d 	.word	0x00015f2d
   15f24:	00015bd1 	.word	0x00015bd1
   15f28:	00015d65 	.word	0x00015d65

00015f2c <_ZN13AT24MAC_Class7IsReadyEv>:


bool AT24MAC_Class::IsReady(void){
   15f2c:	b480      	push	{r7}
   15f2e:	b083      	sub	sp, #12
   15f30:	af00      	add	r7, sp, #0
   15f32:	6078      	str	r0, [r7, #4]

	if (i2ca->txReady && i2ca->rxReady)
   15f34:	687b      	ldr	r3, [r7, #4]
   15f36:	689b      	ldr	r3, [r3, #8]
   15f38:	7d1b      	ldrb	r3, [r3, #20]
   15f3a:	b2db      	uxtb	r3, r3
   15f3c:	2b00      	cmp	r3, #0
   15f3e:	d007      	beq.n	15f50 <_ZN13AT24MAC_Class7IsReadyEv+0x24>
   15f40:	687b      	ldr	r3, [r7, #4]
   15f42:	689b      	ldr	r3, [r3, #8]
   15f44:	7d5b      	ldrb	r3, [r3, #21]
   15f46:	b2db      	uxtb	r3, r3
   15f48:	2b00      	cmp	r3, #0
   15f4a:	d001      	beq.n	15f50 <_ZN13AT24MAC_Class7IsReadyEv+0x24>
   15f4c:	2301      	movs	r3, #1
   15f4e:	e000      	b.n	15f52 <_ZN13AT24MAC_Class7IsReadyEv+0x26>
   15f50:	2300      	movs	r3, #0
   15f52:	2b00      	cmp	r3, #0
   15f54:	d003      	beq.n	15f5e <_ZN13AT24MAC_Class7IsReadyEv+0x32>
	{
		isReady=true;
   15f56:	687b      	ldr	r3, [r7, #4]
   15f58:	2201      	movs	r2, #1
   15f5a:	701a      	strb	r2, [r3, #0]
   15f5c:	e002      	b.n	15f64 <_ZN13AT24MAC_Class7IsReadyEv+0x38>
	}
	else
	{
		isReady=false;
   15f5e:	687b      	ldr	r3, [r7, #4]
   15f60:	2200      	movs	r2, #0
   15f62:	701a      	strb	r2, [r3, #0]
	}
	return isReady;	
   15f64:	687b      	ldr	r3, [r7, #4]
   15f66:	781b      	ldrb	r3, [r3, #0]
   15f68:	b2db      	uxtb	r3, r3
}
   15f6a:	4618      	mov	r0, r3
   15f6c:	370c      	adds	r7, #12
   15f6e:	46bd      	mov	sp, r7
   15f70:	bc80      	pop	{r7}
   15f72:	4770      	bx	lr

00015f74 <_Z41__static_initialization_and_destruction_0ii>:

   15f74:	b580      	push	{r7, lr}
   15f76:	b082      	sub	sp, #8
   15f78:	af00      	add	r7, sp, #0
   15f7a:	6078      	str	r0, [r7, #4]
   15f7c:	6039      	str	r1, [r7, #0]
   15f7e:	687b      	ldr	r3, [r7, #4]
   15f80:	2b01      	cmp	r3, #1
   15f82:	d115      	bne.n	15fb0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
   15f84:	683b      	ldr	r3, [r7, #0]
   15f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15f8a:	4293      	cmp	r3, r2
   15f8c:	d110      	bne.n	15fb0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static  I2C_Asyn_Class	i2cAsync;
   15f8e:	480a      	ldr	r0, [pc, #40]	; (15fb8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15f90:	4b0a      	ldr	r3, [pc, #40]	; (15fbc <_Z41__static_initialization_and_destruction_0ii+0x48>)
   15f92:	4798      	blx	r3
   15f94:	4a0a      	ldr	r2, [pc, #40]	; (15fc0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15f96:	490b      	ldr	r1, [pc, #44]	; (15fc4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   15f98:	4807      	ldr	r0, [pc, #28]	; (15fb8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15f9a:	4b0b      	ldr	r3, [pc, #44]	; (15fc8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15f9c:	4798      	blx	r3
   15f9e:	490b      	ldr	r1, [pc, #44]	; (15fcc <_Z41__static_initialization_and_destruction_0ii+0x58>)
   15fa0:	480b      	ldr	r0, [pc, #44]	; (15fd0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15fa2:	4b0c      	ldr	r3, [pc, #48]	; (15fd4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   15fa4:	4798      	blx	r3
   15fa6:	4a06      	ldr	r2, [pc, #24]	; (15fc0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15fa8:	490b      	ldr	r1, [pc, #44]	; (15fd8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   15faa:	4809      	ldr	r0, [pc, #36]	; (15fd0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15fac:	4b06      	ldr	r3, [pc, #24]	; (15fc8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15fae:	4798      	blx	r3
   15fb0:	bf00      	nop
   15fb2:	3708      	adds	r7, #8
   15fb4:	46bd      	mov	sp, r7
   15fb6:	bd80      	pop	{r7, pc}
   15fb8:	20009fb0 	.word	0x20009fb0
   15fbc:	00014e99 	.word	0x00014e99
   15fc0:	20000000 	.word	0x20000000
   15fc4:	00014f15 	.word	0x00014f15
   15fc8:	0001949d 	.word	0x0001949d
   15fcc:	2000ab08 	.word	0x2000ab08
   15fd0:	20009ff4 	.word	0x20009ff4
   15fd4:	00015b19 	.word	0x00015b19
   15fd8:	00015b49 	.word	0x00015b49

00015fdc <_GLOBAL__sub_I_ptrAT24MACClass>:
   15fdc:	b580      	push	{r7, lr}
   15fde:	af00      	add	r7, sp, #0
   15fe0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15fe4:	2001      	movs	r0, #1
   15fe6:	4b01      	ldr	r3, [pc, #4]	; (15fec <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
   15fe8:	4798      	blx	r3
   15fea:	bd80      	pop	{r7, pc}
   15fec:	00015f75 	.word	0x00015f75

00015ff0 <hri_port_set_DIR_reg>:
{
   15ff0:	b480      	push	{r7}
   15ff2:	b085      	sub	sp, #20
   15ff4:	af00      	add	r7, sp, #0
   15ff6:	60f8      	str	r0, [r7, #12]
   15ff8:	460b      	mov	r3, r1
   15ffa:	607a      	str	r2, [r7, #4]
   15ffc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   15ffe:	7afb      	ldrb	r3, [r7, #11]
   16000:	68fa      	ldr	r2, [r7, #12]
   16002:	01db      	lsls	r3, r3, #7
   16004:	4413      	add	r3, r2
   16006:	3308      	adds	r3, #8
   16008:	687a      	ldr	r2, [r7, #4]
   1600a:	601a      	str	r2, [r3, #0]
}
   1600c:	bf00      	nop
   1600e:	3714      	adds	r7, #20
   16010:	46bd      	mov	sp, r7
   16012:	bc80      	pop	{r7}
   16014:	4770      	bx	lr

00016016 <hri_port_clear_DIR_reg>:
{
   16016:	b480      	push	{r7}
   16018:	b085      	sub	sp, #20
   1601a:	af00      	add	r7, sp, #0
   1601c:	60f8      	str	r0, [r7, #12]
   1601e:	460b      	mov	r3, r1
   16020:	607a      	str	r2, [r7, #4]
   16022:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   16024:	7afb      	ldrb	r3, [r7, #11]
   16026:	68fa      	ldr	r2, [r7, #12]
   16028:	01db      	lsls	r3, r3, #7
   1602a:	4413      	add	r3, r2
   1602c:	3304      	adds	r3, #4
   1602e:	687a      	ldr	r2, [r7, #4]
   16030:	601a      	str	r2, [r3, #0]
}
   16032:	bf00      	nop
   16034:	3714      	adds	r7, #20
   16036:	46bd      	mov	sp, r7
   16038:	bc80      	pop	{r7}
   1603a:	4770      	bx	lr

0001603c <hri_port_set_OUT_reg>:
{
   1603c:	b480      	push	{r7}
   1603e:	b085      	sub	sp, #20
   16040:	af00      	add	r7, sp, #0
   16042:	60f8      	str	r0, [r7, #12]
   16044:	460b      	mov	r3, r1
   16046:	607a      	str	r2, [r7, #4]
   16048:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   1604a:	7afb      	ldrb	r3, [r7, #11]
   1604c:	68fa      	ldr	r2, [r7, #12]
   1604e:	01db      	lsls	r3, r3, #7
   16050:	4413      	add	r3, r2
   16052:	3318      	adds	r3, #24
   16054:	687a      	ldr	r2, [r7, #4]
   16056:	601a      	str	r2, [r3, #0]
}
   16058:	bf00      	nop
   1605a:	3714      	adds	r7, #20
   1605c:	46bd      	mov	sp, r7
   1605e:	bc80      	pop	{r7}
   16060:	4770      	bx	lr

00016062 <hri_port_clear_OUT_reg>:
{
   16062:	b480      	push	{r7}
   16064:	b085      	sub	sp, #20
   16066:	af00      	add	r7, sp, #0
   16068:	60f8      	str	r0, [r7, #12]
   1606a:	460b      	mov	r3, r1
   1606c:	607a      	str	r2, [r7, #4]
   1606e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   16070:	7afb      	ldrb	r3, [r7, #11]
   16072:	68fa      	ldr	r2, [r7, #12]
   16074:	01db      	lsls	r3, r3, #7
   16076:	4413      	add	r3, r2
   16078:	3314      	adds	r3, #20
   1607a:	687a      	ldr	r2, [r7, #4]
   1607c:	601a      	str	r2, [r3, #0]
}
   1607e:	bf00      	nop
   16080:	3714      	adds	r7, #20
   16082:	46bd      	mov	sp, r7
   16084:	bc80      	pop	{r7}
   16086:	4770      	bx	lr

00016088 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   16088:	b480      	push	{r7}
   1608a:	b085      	sub	sp, #20
   1608c:	af00      	add	r7, sp, #0
   1608e:	6078      	str	r0, [r7, #4]
   16090:	4608      	mov	r0, r1
   16092:	4611      	mov	r1, r2
   16094:	461a      	mov	r2, r3
   16096:	4603      	mov	r3, r0
   16098:	70fb      	strb	r3, [r7, #3]
   1609a:	460b      	mov	r3, r1
   1609c:	70bb      	strb	r3, [r7, #2]
   1609e:	4613      	mov	r3, r2
   160a0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   160a2:	78fa      	ldrb	r2, [r7, #3]
   160a4:	78bb      	ldrb	r3, [r7, #2]
   160a6:	6879      	ldr	r1, [r7, #4]
   160a8:	01d2      	lsls	r2, r2, #7
   160aa:	440a      	add	r2, r1
   160ac:	4413      	add	r3, r2
   160ae:	3330      	adds	r3, #48	; 0x30
   160b0:	781b      	ldrb	r3, [r3, #0]
   160b2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   160b4:	7bfb      	ldrb	r3, [r7, #15]
   160b6:	f023 030f 	bic.w	r3, r3, #15
   160ba:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   160bc:	787b      	ldrb	r3, [r7, #1]
   160be:	f003 030f 	and.w	r3, r3, #15
   160c2:	b2da      	uxtb	r2, r3
   160c4:	7bfb      	ldrb	r3, [r7, #15]
   160c6:	4313      	orrs	r3, r2
   160c8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   160ca:	78fa      	ldrb	r2, [r7, #3]
   160cc:	78bb      	ldrb	r3, [r7, #2]
   160ce:	6879      	ldr	r1, [r7, #4]
   160d0:	01d2      	lsls	r2, r2, #7
   160d2:	440a      	add	r2, r1
   160d4:	4413      	add	r3, r2
   160d6:	3330      	adds	r3, #48	; 0x30
   160d8:	7bfa      	ldrb	r2, [r7, #15]
   160da:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   160dc:	bf00      	nop
   160de:	3714      	adds	r7, #20
   160e0:	46bd      	mov	sp, r7
   160e2:	bc80      	pop	{r7}
   160e4:	4770      	bx	lr

000160e6 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   160e6:	b480      	push	{r7}
   160e8:	b085      	sub	sp, #20
   160ea:	af00      	add	r7, sp, #0
   160ec:	6078      	str	r0, [r7, #4]
   160ee:	4608      	mov	r0, r1
   160f0:	4611      	mov	r1, r2
   160f2:	461a      	mov	r2, r3
   160f4:	4603      	mov	r3, r0
   160f6:	70fb      	strb	r3, [r7, #3]
   160f8:	460b      	mov	r3, r1
   160fa:	70bb      	strb	r3, [r7, #2]
   160fc:	4613      	mov	r3, r2
   160fe:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   16100:	78fa      	ldrb	r2, [r7, #3]
   16102:	78bb      	ldrb	r3, [r7, #2]
   16104:	6879      	ldr	r1, [r7, #4]
   16106:	01d2      	lsls	r2, r2, #7
   16108:	440a      	add	r2, r1
   1610a:	4413      	add	r3, r2
   1610c:	3330      	adds	r3, #48	; 0x30
   1610e:	781b      	ldrb	r3, [r3, #0]
   16110:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   16112:	7bfb      	ldrb	r3, [r7, #15]
   16114:	f003 030f 	and.w	r3, r3, #15
   16118:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   1611a:	787b      	ldrb	r3, [r7, #1]
   1611c:	011b      	lsls	r3, r3, #4
   1611e:	b2da      	uxtb	r2, r3
   16120:	7bfb      	ldrb	r3, [r7, #15]
   16122:	4313      	orrs	r3, r2
   16124:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   16126:	78fa      	ldrb	r2, [r7, #3]
   16128:	78bb      	ldrb	r3, [r7, #2]
   1612a:	6879      	ldr	r1, [r7, #4]
   1612c:	01d2      	lsls	r2, r2, #7
   1612e:	440a      	add	r2, r1
   16130:	4413      	add	r3, r2
   16132:	3330      	adds	r3, #48	; 0x30
   16134:	7bfa      	ldrb	r2, [r7, #15]
   16136:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   16138:	bf00      	nop
   1613a:	3714      	adds	r7, #20
   1613c:	46bd      	mov	sp, r7
   1613e:	bc80      	pop	{r7}
   16140:	4770      	bx	lr

00016142 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   16142:	b480      	push	{r7}
   16144:	b085      	sub	sp, #20
   16146:	af00      	add	r7, sp, #0
   16148:	6078      	str	r0, [r7, #4]
   1614a:	4608      	mov	r0, r1
   1614c:	4611      	mov	r1, r2
   1614e:	461a      	mov	r2, r3
   16150:	4603      	mov	r3, r0
   16152:	70fb      	strb	r3, [r7, #3]
   16154:	460b      	mov	r3, r1
   16156:	70bb      	strb	r3, [r7, #2]
   16158:	4613      	mov	r3, r2
   1615a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   1615c:	78fa      	ldrb	r2, [r7, #3]
   1615e:	78bb      	ldrb	r3, [r7, #2]
   16160:	6879      	ldr	r1, [r7, #4]
   16162:	01d2      	lsls	r2, r2, #7
   16164:	440a      	add	r2, r1
   16166:	4413      	add	r3, r2
   16168:	3340      	adds	r3, #64	; 0x40
   1616a:	781b      	ldrb	r3, [r3, #0]
   1616c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   1616e:	7bfb      	ldrb	r3, [r7, #15]
   16170:	f023 0301 	bic.w	r3, r3, #1
   16174:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   16176:	787a      	ldrb	r2, [r7, #1]
   16178:	7bfb      	ldrb	r3, [r7, #15]
   1617a:	4313      	orrs	r3, r2
   1617c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   1617e:	78fa      	ldrb	r2, [r7, #3]
   16180:	78bb      	ldrb	r3, [r7, #2]
   16182:	6879      	ldr	r1, [r7, #4]
   16184:	01d2      	lsls	r2, r2, #7
   16186:	440a      	add	r2, r1
   16188:	4413      	add	r3, r2
   1618a:	3340      	adds	r3, #64	; 0x40
   1618c:	7bfa      	ldrb	r2, [r7, #15]
   1618e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   16190:	bf00      	nop
   16192:	3714      	adds	r7, #20
   16194:	46bd      	mov	sp, r7
   16196:	bc80      	pop	{r7}
   16198:	4770      	bx	lr

0001619a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   1619a:	b480      	push	{r7}
   1619c:	b085      	sub	sp, #20
   1619e:	af00      	add	r7, sp, #0
   161a0:	60f8      	str	r0, [r7, #12]
   161a2:	460b      	mov	r3, r1
   161a4:	607a      	str	r2, [r7, #4]
   161a6:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   161a8:	7afb      	ldrb	r3, [r7, #11]
   161aa:	68fa      	ldr	r2, [r7, #12]
   161ac:	01db      	lsls	r3, r3, #7
   161ae:	4413      	add	r3, r2
   161b0:	3328      	adds	r3, #40	; 0x28
   161b2:	687a      	ldr	r2, [r7, #4]
   161b4:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   161b6:	bf00      	nop
   161b8:	3714      	adds	r7, #20
   161ba:	46bd      	mov	sp, r7
   161bc:	bc80      	pop	{r7}
   161be:	4770      	bx	lr

000161c0 <_gpio_set_direction>:
{
   161c0:	b580      	push	{r7, lr}
   161c2:	b082      	sub	sp, #8
   161c4:	af00      	add	r7, sp, #0
   161c6:	4603      	mov	r3, r0
   161c8:	6039      	str	r1, [r7, #0]
   161ca:	71fb      	strb	r3, [r7, #7]
   161cc:	4613      	mov	r3, r2
   161ce:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   161d0:	79bb      	ldrb	r3, [r7, #6]
   161d2:	2b01      	cmp	r3, #1
   161d4:	d01c      	beq.n	16210 <_gpio_set_direction+0x50>
   161d6:	2b02      	cmp	r3, #2
   161d8:	d037      	beq.n	1624a <_gpio_set_direction+0x8a>
   161da:	2b00      	cmp	r3, #0
   161dc:	d14e      	bne.n	1627c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   161de:	79fb      	ldrb	r3, [r7, #7]
   161e0:	683a      	ldr	r2, [r7, #0]
   161e2:	4619      	mov	r1, r3
   161e4:	482a      	ldr	r0, [pc, #168]	; (16290 <_gpio_set_direction+0xd0>)
   161e6:	4b2b      	ldr	r3, [pc, #172]	; (16294 <_gpio_set_direction+0xd4>)
   161e8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   161ea:	683b      	ldr	r3, [r7, #0]
   161ec:	b29b      	uxth	r3, r3
   161ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   161f2:	79fb      	ldrb	r3, [r7, #7]
   161f4:	4619      	mov	r1, r3
   161f6:	4826      	ldr	r0, [pc, #152]	; (16290 <_gpio_set_direction+0xd0>)
   161f8:	4b27      	ldr	r3, [pc, #156]	; (16298 <_gpio_set_direction+0xd8>)
   161fa:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   161fc:	683b      	ldr	r3, [r7, #0]
   161fe:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   16200:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   16204:	79fb      	ldrb	r3, [r7, #7]
   16206:	4619      	mov	r1, r3
   16208:	4821      	ldr	r0, [pc, #132]	; (16290 <_gpio_set_direction+0xd0>)
   1620a:	4b23      	ldr	r3, [pc, #140]	; (16298 <_gpio_set_direction+0xd8>)
   1620c:	4798      	blx	r3
		break;
   1620e:	e03a      	b.n	16286 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   16210:	79fb      	ldrb	r3, [r7, #7]
   16212:	683a      	ldr	r2, [r7, #0]
   16214:	4619      	mov	r1, r3
   16216:	481e      	ldr	r0, [pc, #120]	; (16290 <_gpio_set_direction+0xd0>)
   16218:	4b1e      	ldr	r3, [pc, #120]	; (16294 <_gpio_set_direction+0xd4>)
   1621a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   1621c:	683b      	ldr	r3, [r7, #0]
   1621e:	b29b      	uxth	r3, r3
   16220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   16224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   16228:	79f9      	ldrb	r1, [r7, #7]
   1622a:	461a      	mov	r2, r3
   1622c:	4818      	ldr	r0, [pc, #96]	; (16290 <_gpio_set_direction+0xd0>)
   1622e:	4b1a      	ldr	r3, [pc, #104]	; (16298 <_gpio_set_direction+0xd8>)
   16230:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   16232:	683b      	ldr	r3, [r7, #0]
   16234:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   16236:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1623a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   1623e:	79f9      	ldrb	r1, [r7, #7]
   16240:	461a      	mov	r2, r3
   16242:	4813      	ldr	r0, [pc, #76]	; (16290 <_gpio_set_direction+0xd0>)
   16244:	4b14      	ldr	r3, [pc, #80]	; (16298 <_gpio_set_direction+0xd8>)
   16246:	4798      	blx	r3
		break;
   16248:	e01d      	b.n	16286 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   1624a:	79fb      	ldrb	r3, [r7, #7]
   1624c:	683a      	ldr	r2, [r7, #0]
   1624e:	4619      	mov	r1, r3
   16250:	480f      	ldr	r0, [pc, #60]	; (16290 <_gpio_set_direction+0xd0>)
   16252:	4b12      	ldr	r3, [pc, #72]	; (1629c <_gpio_set_direction+0xdc>)
   16254:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   16256:	683b      	ldr	r3, [r7, #0]
   16258:	b29b      	uxth	r3, r3
   1625a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   1625e:	79fb      	ldrb	r3, [r7, #7]
   16260:	4619      	mov	r1, r3
   16262:	480b      	ldr	r0, [pc, #44]	; (16290 <_gpio_set_direction+0xd0>)
   16264:	4b0c      	ldr	r3, [pc, #48]	; (16298 <_gpio_set_direction+0xd8>)
   16266:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   16268:	683b      	ldr	r3, [r7, #0]
   1626a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   1626c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   16270:	79fb      	ldrb	r3, [r7, #7]
   16272:	4619      	mov	r1, r3
   16274:	4806      	ldr	r0, [pc, #24]	; (16290 <_gpio_set_direction+0xd0>)
   16276:	4b08      	ldr	r3, [pc, #32]	; (16298 <_gpio_set_direction+0xd8>)
   16278:	4798      	blx	r3
		break;
   1627a:	e004      	b.n	16286 <_gpio_set_direction+0xc6>
		ASSERT(false);
   1627c:	2246      	movs	r2, #70	; 0x46
   1627e:	4908      	ldr	r1, [pc, #32]	; (162a0 <_gpio_set_direction+0xe0>)
   16280:	2000      	movs	r0, #0
   16282:	4b08      	ldr	r3, [pc, #32]	; (162a4 <_gpio_set_direction+0xe4>)
   16284:	4798      	blx	r3
}
   16286:	bf00      	nop
   16288:	3708      	adds	r7, #8
   1628a:	46bd      	mov	sp, r7
   1628c:	bd80      	pop	{r7, pc}
   1628e:	bf00      	nop
   16290:	41008000 	.word	0x41008000
   16294:	00016017 	.word	0x00016017
   16298:	0001619b 	.word	0x0001619b
   1629c:	00015ff1 	.word	0x00015ff1
   162a0:	00021744 	.word	0x00021744
   162a4:	00007d5d 	.word	0x00007d5d

000162a8 <_gpio_set_level>:
{
   162a8:	b580      	push	{r7, lr}
   162aa:	b082      	sub	sp, #8
   162ac:	af00      	add	r7, sp, #0
   162ae:	4603      	mov	r3, r0
   162b0:	6039      	str	r1, [r7, #0]
   162b2:	71fb      	strb	r3, [r7, #7]
   162b4:	4613      	mov	r3, r2
   162b6:	71bb      	strb	r3, [r7, #6]
	if (level) {
   162b8:	79bb      	ldrb	r3, [r7, #6]
   162ba:	2b00      	cmp	r3, #0
   162bc:	d006      	beq.n	162cc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   162be:	79fb      	ldrb	r3, [r7, #7]
   162c0:	683a      	ldr	r2, [r7, #0]
   162c2:	4619      	mov	r1, r3
   162c4:	4806      	ldr	r0, [pc, #24]	; (162e0 <_gpio_set_level+0x38>)
   162c6:	4b07      	ldr	r3, [pc, #28]	; (162e4 <_gpio_set_level+0x3c>)
   162c8:	4798      	blx	r3
}
   162ca:	e005      	b.n	162d8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   162cc:	79fb      	ldrb	r3, [r7, #7]
   162ce:	683a      	ldr	r2, [r7, #0]
   162d0:	4619      	mov	r1, r3
   162d2:	4803      	ldr	r0, [pc, #12]	; (162e0 <_gpio_set_level+0x38>)
   162d4:	4b04      	ldr	r3, [pc, #16]	; (162e8 <_gpio_set_level+0x40>)
   162d6:	4798      	blx	r3
}
   162d8:	bf00      	nop
   162da:	3708      	adds	r7, #8
   162dc:	46bd      	mov	sp, r7
   162de:	bd80      	pop	{r7, pc}
   162e0:	41008000 	.word	0x41008000
   162e4:	0001603d 	.word	0x0001603d
   162e8:	00016063 	.word	0x00016063

000162ec <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   162ec:	b590      	push	{r4, r7, lr}
   162ee:	b085      	sub	sp, #20
   162f0:	af00      	add	r7, sp, #0
   162f2:	6078      	str	r0, [r7, #4]
   162f4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   162f6:	687b      	ldr	r3, [r7, #4]
   162f8:	095b      	lsrs	r3, r3, #5
   162fa:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   162fc:	687b      	ldr	r3, [r7, #4]
   162fe:	b2db      	uxtb	r3, r3
   16300:	f003 031f 	and.w	r3, r3, #31
   16304:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   16306:	683b      	ldr	r3, [r7, #0]
   16308:	f1b3 3fff 	cmp.w	r3, #4294967295
   1630c:	d106      	bne.n	1631c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   1630e:	7bba      	ldrb	r2, [r7, #14]
   16310:	7bf9      	ldrb	r1, [r7, #15]
   16312:	2300      	movs	r3, #0
   16314:	4812      	ldr	r0, [pc, #72]	; (16360 <_gpio_set_pin_function+0x74>)
   16316:	4c13      	ldr	r4, [pc, #76]	; (16364 <_gpio_set_pin_function+0x78>)
   16318:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   1631a:	e01d      	b.n	16358 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   1631c:	7bba      	ldrb	r2, [r7, #14]
   1631e:	7bf9      	ldrb	r1, [r7, #15]
   16320:	2301      	movs	r3, #1
   16322:	480f      	ldr	r0, [pc, #60]	; (16360 <_gpio_set_pin_function+0x74>)
   16324:	4c0f      	ldr	r4, [pc, #60]	; (16364 <_gpio_set_pin_function+0x78>)
   16326:	47a0      	blx	r4
		if (pin & 1) {
   16328:	7bbb      	ldrb	r3, [r7, #14]
   1632a:	f003 0301 	and.w	r3, r3, #1
   1632e:	2b00      	cmp	r3, #0
   16330:	d009      	beq.n	16346 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   16332:	7bbb      	ldrb	r3, [r7, #14]
   16334:	105b      	asrs	r3, r3, #1
   16336:	b2da      	uxtb	r2, r3
   16338:	683b      	ldr	r3, [r7, #0]
   1633a:	b2db      	uxtb	r3, r3
   1633c:	7bf9      	ldrb	r1, [r7, #15]
   1633e:	4808      	ldr	r0, [pc, #32]	; (16360 <_gpio_set_pin_function+0x74>)
   16340:	4c09      	ldr	r4, [pc, #36]	; (16368 <_gpio_set_pin_function+0x7c>)
   16342:	47a0      	blx	r4
}
   16344:	e008      	b.n	16358 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   16346:	7bbb      	ldrb	r3, [r7, #14]
   16348:	105b      	asrs	r3, r3, #1
   1634a:	b2da      	uxtb	r2, r3
   1634c:	683b      	ldr	r3, [r7, #0]
   1634e:	b2db      	uxtb	r3, r3
   16350:	7bf9      	ldrb	r1, [r7, #15]
   16352:	4803      	ldr	r0, [pc, #12]	; (16360 <_gpio_set_pin_function+0x74>)
   16354:	4c05      	ldr	r4, [pc, #20]	; (1636c <_gpio_set_pin_function+0x80>)
   16356:	47a0      	blx	r4
}
   16358:	bf00      	nop
   1635a:	3714      	adds	r7, #20
   1635c:	46bd      	mov	sp, r7
   1635e:	bd90      	pop	{r4, r7, pc}
   16360:	41008000 	.word	0x41008000
   16364:	00016143 	.word	0x00016143
   16368:	000160e7 	.word	0x000160e7
   1636c:	00016089 	.word	0x00016089

00016370 <gpio_set_pin_function>:
{
   16370:	b580      	push	{r7, lr}
   16372:	b082      	sub	sp, #8
   16374:	af00      	add	r7, sp, #0
   16376:	6078      	str	r0, [r7, #4]
   16378:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   1637a:	6839      	ldr	r1, [r7, #0]
   1637c:	6878      	ldr	r0, [r7, #4]
   1637e:	4b03      	ldr	r3, [pc, #12]	; (1638c <gpio_set_pin_function+0x1c>)
   16380:	4798      	blx	r3
}
   16382:	bf00      	nop
   16384:	3708      	adds	r7, #8
   16386:	46bd      	mov	sp, r7
   16388:	bd80      	pop	{r7, pc}
   1638a:	bf00      	nop
   1638c:	000162ed 	.word	0x000162ed

00016390 <gpio_set_pin_direction>:
{
   16390:	b580      	push	{r7, lr}
   16392:	b082      	sub	sp, #8
   16394:	af00      	add	r7, sp, #0
   16396:	4603      	mov	r3, r0
   16398:	460a      	mov	r2, r1
   1639a:	71fb      	strb	r3, [r7, #7]
   1639c:	4613      	mov	r3, r2
   1639e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   163a0:	79fb      	ldrb	r3, [r7, #7]
   163a2:	115b      	asrs	r3, r3, #5
   163a4:	b2d8      	uxtb	r0, r3
   163a6:	79fb      	ldrb	r3, [r7, #7]
   163a8:	f003 031f 	and.w	r3, r3, #31
   163ac:	2201      	movs	r2, #1
   163ae:	fa02 f303 	lsl.w	r3, r2, r3
   163b2:	79ba      	ldrb	r2, [r7, #6]
   163b4:	4619      	mov	r1, r3
   163b6:	4b03      	ldr	r3, [pc, #12]	; (163c4 <gpio_set_pin_direction+0x34>)
   163b8:	4798      	blx	r3
}
   163ba:	bf00      	nop
   163bc:	3708      	adds	r7, #8
   163be:	46bd      	mov	sp, r7
   163c0:	bd80      	pop	{r7, pc}
   163c2:	bf00      	nop
   163c4:	000161c1 	.word	0x000161c1

000163c8 <gpio_set_pin_level>:
{
   163c8:	b580      	push	{r7, lr}
   163ca:	b082      	sub	sp, #8
   163cc:	af00      	add	r7, sp, #0
   163ce:	4603      	mov	r3, r0
   163d0:	460a      	mov	r2, r1
   163d2:	71fb      	strb	r3, [r7, #7]
   163d4:	4613      	mov	r3, r2
   163d6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   163d8:	79fb      	ldrb	r3, [r7, #7]
   163da:	115b      	asrs	r3, r3, #5
   163dc:	b2d8      	uxtb	r0, r3
   163de:	79fb      	ldrb	r3, [r7, #7]
   163e0:	f003 031f 	and.w	r3, r3, #31
   163e4:	2201      	movs	r2, #1
   163e6:	fa02 f303 	lsl.w	r3, r2, r3
   163ea:	79ba      	ldrb	r2, [r7, #6]
   163ec:	4619      	mov	r1, r3
   163ee:	4b03      	ldr	r3, [pc, #12]	; (163fc <gpio_set_pin_level+0x34>)
   163f0:	4798      	blx	r3
}
   163f2:	bf00      	nop
   163f4:	3708      	adds	r7, #8
   163f6:	46bd      	mov	sp, r7
   163f8:	bd80      	pop	{r7, pc}
   163fa:	bf00      	nop
   163fc:	000162a9 	.word	0x000162a9

00016400 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   16400:	b580      	push	{r7, lr}
   16402:	b082      	sub	sp, #8
   16404:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   16406:	2100      	movs	r1, #0
   16408:	2008      	movs	r0, #8
   1640a:	4b24      	ldr	r3, [pc, #144]	; (1649c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   1640c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   1640e:	2100      	movs	r1, #0
   16410:	202b      	movs	r0, #43	; 0x2b
   16412:	4b22      	ldr	r3, [pc, #136]	; (1649c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   16414:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   16416:	2100      	movs	r1, #0
   16418:	202a      	movs	r0, #42	; 0x2a
   1641a:	4b20      	ldr	r3, [pc, #128]	; (1649c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   1641c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   1641e:	2102      	movs	r1, #2
   16420:	2008      	movs	r0, #8
   16422:	4b1f      	ldr	r3, [pc, #124]	; (164a0 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   16424:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   16426:	2102      	movs	r1, #2
   16428:	202b      	movs	r0, #43	; 0x2b
   1642a:	4b1d      	ldr	r3, [pc, #116]	; (164a0 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   1642c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   1642e:	2102      	movs	r1, #2
   16430:	202a      	movs	r0, #42	; 0x2a
   16432:	4b1b      	ldr	r3, [pc, #108]	; (164a0 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   16434:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   16436:	2101      	movs	r1, #1
   16438:	2008      	movs	r0, #8
   1643a:	4b1a      	ldr	r3, [pc, #104]	; (164a4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1643c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   1643e:	2100      	movs	r1, #0
   16440:	202b      	movs	r0, #43	; 0x2b
   16442:	4b18      	ldr	r3, [pc, #96]	; (164a4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16444:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   16446:	2100      	movs	r1, #0
   16448:	202a      	movs	r0, #42	; 0x2a
   1644a:	4b16      	ldr	r3, [pc, #88]	; (164a4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1644c:	4798      	blx	r3

	delay_us(1);
   1644e:	2001      	movs	r0, #1
   16450:	4b15      	ldr	r3, [pc, #84]	; (164a8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16452:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   16454:	2300      	movs	r3, #0
   16456:	607b      	str	r3, [r7, #4]
   16458:	687b      	ldr	r3, [r7, #4]
   1645a:	2b06      	cmp	r3, #6
   1645c:	dc11      	bgt.n	16482 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   1645e:	2101      	movs	r1, #1
   16460:	202a      	movs	r0, #42	; 0x2a
   16462:	4b10      	ldr	r3, [pc, #64]	; (164a4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16464:	4798      	blx	r3
		delay_us(1);
   16466:	2001      	movs	r0, #1
   16468:	4b0f      	ldr	r3, [pc, #60]	; (164a8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1646a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   1646c:	2100      	movs	r1, #0
   1646e:	202a      	movs	r0, #42	; 0x2a
   16470:	4b0c      	ldr	r3, [pc, #48]	; (164a4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16472:	4798      	blx	r3
		delay_us(1);
   16474:	2001      	movs	r0, #1
   16476:	4b0c      	ldr	r3, [pc, #48]	; (164a8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16478:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   1647a:	687b      	ldr	r3, [r7, #4]
   1647c:	3301      	adds	r3, #1
   1647e:	607b      	str	r3, [r7, #4]
   16480:	e7ea      	b.n	16458 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   16482:	2101      	movs	r1, #1
   16484:	202b      	movs	r0, #43	; 0x2b
   16486:	4b07      	ldr	r3, [pc, #28]	; (164a4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16488:	4798      	blx	r3
	delay_us(1);
   1648a:	2001      	movs	r0, #1
   1648c:	4b06      	ldr	r3, [pc, #24]	; (164a8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1648e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   16490:	4b06      	ldr	r3, [pc, #24]	; (164ac <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   16492:	4798      	blx	r3
}
   16494:	bf00      	nop
   16496:	3708      	adds	r7, #8
   16498:	46bd      	mov	sp, r7
   1649a:	bd80      	pop	{r7, pc}
   1649c:	00016371 	.word	0x00016371
   164a0:	00016391 	.word	0x00016391
   164a4:	000163c9 	.word	0x000163c9
   164a8:	00005f6d 	.word	0x00005f6d
   164ac:	00004d0d 	.word	0x00004d0d

000164b0 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   164b0:	b480      	push	{r7}
   164b2:	b083      	sub	sp, #12
   164b4:	af00      	add	r7, sp, #0
   164b6:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   164b8:	687b      	ldr	r3, [r7, #4]
   164ba:	4618      	mov	r0, r3
   164bc:	370c      	adds	r7, #12
   164be:	46bd      	mov	sp, r7
   164c0:	bc80      	pop	{r7}
   164c2:	4770      	bx	lr

000164c4 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   164c4:	b480      	push	{r7}
   164c6:	b083      	sub	sp, #12
   164c8:	af00      	add	r7, sp, #0
   164ca:	6078      	str	r0, [r7, #4]
   164cc:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   164ce:	687b      	ldr	r3, [r7, #4]
   164d0:	683a      	ldr	r2, [r7, #0]
   164d2:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   164d4:	687b      	ldr	r3, [r7, #4]
   164d6:	4a04      	ldr	r2, [pc, #16]	; (164e8 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   164d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   164dc:	687b      	ldr	r3, [r7, #4]
   164de:	4618      	mov	r0, r3
   164e0:	370c      	adds	r7, #12
   164e2:	46bd      	mov	sp, r7
   164e4:	bc80      	pop	{r7}
   164e6:	4770      	bx	lr
   164e8:	001fff00 	.word	0x001fff00

000164ec <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   164ec:	b480      	push	{r7}
   164ee:	b083      	sub	sp, #12
   164f0:	af00      	add	r7, sp, #0
   164f2:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   164f4:	687b      	ldr	r3, [r7, #4]
   164f6:	4618      	mov	r0, r3
   164f8:	370c      	adds	r7, #12
   164fa:	46bd      	mov	sp, r7
   164fc:	bc80      	pop	{r7}
   164fe:	4770      	bx	lr

00016500 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   16500:	b580      	push	{r7, lr}
   16502:	b082      	sub	sp, #8
   16504:	af00      	add	r7, sp, #0
   16506:	6078      	str	r0, [r7, #4]
	xferDone=false;
   16508:	687b      	ldr	r3, [r7, #4]
   1650a:	2200      	movs	r2, #0
   1650c:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   1650e:	6878      	ldr	r0, [r7, #4]
   16510:	4b04      	ldr	r3, [pc, #16]	; (16524 <_ZN13N25Q256_Class4InitEv+0x24>)
   16512:	4798      	blx	r3
	return SelfTest();
   16514:	6878      	ldr	r0, [r7, #4]
   16516:	4b04      	ldr	r3, [pc, #16]	; (16528 <_ZN13N25Q256_Class4InitEv+0x28>)
   16518:	4798      	blx	r3
   1651a:	4603      	mov	r3, r0
}
   1651c:	4618      	mov	r0, r3
   1651e:	3708      	adds	r7, #8
   16520:	46bd      	mov	sp, r7
   16522:	bd80      	pop	{r7, pc}
   16524:	0001652d 	.word	0x0001652d
   16528:	000166e1 	.word	0x000166e1

0001652c <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   1652c:	b590      	push	{r4, r7, lr}
   1652e:	b083      	sub	sp, #12
   16530:	af00      	add	r7, sp, #0
   16532:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   16534:	687b      	ldr	r3, [r7, #4]
   16536:	685b      	ldr	r3, [r3, #4]
   16538:	4618      	mov	r0, r3
   1653a:	4b08      	ldr	r3, [pc, #32]	; (1655c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   1653c:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   1653e:	687b      	ldr	r3, [r7, #4]
   16540:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   16542:	2300      	movs	r3, #0
   16544:	4a06      	ldr	r2, [pc, #24]	; (16560 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   16546:	4807      	ldr	r0, [pc, #28]	; (16564 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   16548:	4c07      	ldr	r4, [pc, #28]	; (16568 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   1654a:	47a0      	blx	r4
   1654c:	4602      	mov	r2, r0
   1654e:	687b      	ldr	r3, [r7, #4]
   16550:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   16554:	bf00      	nop
   16556:	370c      	adds	r7, #12
   16558:	46bd      	mov	sp, r7
   1655a:	bd90      	pop	{r4, r7, pc}
   1655c:	0000673d 	.word	0x0000673d
   16560:	00016401 	.word	0x00016401
   16564:	2000a02c 	.word	0x2000a02c
   16568:	0001109d 	.word	0x0001109d

0001656c <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   1656c:	b580      	push	{r7, lr}
   1656e:	b084      	sub	sp, #16
   16570:	af00      	add	r7, sp, #0
   16572:	6078      	str	r0, [r7, #4]
   16574:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   16576:	687b      	ldr	r3, [r7, #4]
   16578:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1657c:	685b      	ldr	r3, [r3, #4]
   1657e:	689b      	ldr	r3, [r3, #8]
   16580:	687a      	ldr	r2, [r7, #4]
   16582:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   16586:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1658a:	6839      	ldr	r1, [r7, #0]
   1658c:	4798      	blx	r3
   1658e:	4603      	mov	r3, r0
   16590:	60fb      	str	r3, [r7, #12]
	return	e;
   16592:	68fb      	ldr	r3, [r7, #12]
}
   16594:	4618      	mov	r0, r3
   16596:	3710      	adds	r7, #16
   16598:	46bd      	mov	sp, r7
   1659a:	bd80      	pop	{r7, pc}

0001659c <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   1659c:	b590      	push	{r4, r7, lr}
   1659e:	b087      	sub	sp, #28
   165a0:	af00      	add	r7, sp, #0
   165a2:	60f8      	str	r0, [r7, #12]
   165a4:	60b9      	str	r1, [r7, #8]
   165a6:	607a      	str	r2, [r7, #4]
   165a8:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   165aa:	68fb      	ldr	r3, [r7, #12]
   165ac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   165b0:	685b      	ldr	r3, [r3, #4]
   165b2:	685c      	ldr	r4, [r3, #4]
   165b4:	68fb      	ldr	r3, [r7, #12]
   165b6:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   165ba:	683b      	ldr	r3, [r7, #0]
   165bc:	687a      	ldr	r2, [r7, #4]
   165be:	68b9      	ldr	r1, [r7, #8]
   165c0:	47a0      	blx	r4
   165c2:	4603      	mov	r3, r0
   165c4:	617b      	str	r3, [r7, #20]
	return	w;
   165c6:	697b      	ldr	r3, [r7, #20]
}
   165c8:	4618      	mov	r0, r3
   165ca:	371c      	adds	r7, #28
   165cc:	46bd      	mov	sp, r7
   165ce:	bd90      	pop	{r4, r7, pc}

000165d0 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   165d0:	b590      	push	{r4, r7, lr}
   165d2:	b087      	sub	sp, #28
   165d4:	af00      	add	r7, sp, #0
   165d6:	60f8      	str	r0, [r7, #12]
   165d8:	60b9      	str	r1, [r7, #8]
   165da:	607a      	str	r2, [r7, #4]
   165dc:	603b      	str	r3, [r7, #0]
	xferDone=false;
   165de:	68fb      	ldr	r3, [r7, #12]
   165e0:	2200      	movs	r2, #0
   165e2:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   165e4:	68fb      	ldr	r3, [r7, #12]
   165e6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   165ea:	685b      	ldr	r3, [r3, #4]
   165ec:	681c      	ldr	r4, [r3, #0]
   165ee:	68fb      	ldr	r3, [r7, #12]
   165f0:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   165f4:	683b      	ldr	r3, [r7, #0]
   165f6:	687a      	ldr	r2, [r7, #4]
   165f8:	68b9      	ldr	r1, [r7, #8]
   165fa:	47a0      	blx	r4
   165fc:	4603      	mov	r3, r0
   165fe:	617b      	str	r3, [r7, #20]
	return	r;
   16600:	697b      	ldr	r3, [r7, #20]
}
   16602:	4618      	mov	r0, r3
   16604:	371c      	adds	r7, #28
   16606:	46bd      	mov	sp, r7
   16608:	bd90      	pop	{r4, r7, pc}
	...

0001660c <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   1660c:	b580      	push	{r7, lr}
   1660e:	b082      	sub	sp, #8
   16610:	af00      	add	r7, sp, #0
   16612:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   16614:	687a      	ldr	r2, [r7, #4]
   16616:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   1661a:	f043 0310 	orr.w	r3, r3, #16
   1661e:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   16622:	687a      	ldr	r2, [r7, #4]
   16624:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   16628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1662c:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   16630:	687a      	ldr	r2, [r7, #4]
   16632:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   16636:	f36f 1305 	bfc	r3, #4, #2
   1663a:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   1663e:	687b      	ldr	r3, [r7, #4]
   16640:	2205      	movs	r2, #5
   16642:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   16646:	687b      	ldr	r3, [r7, #4]
   16648:	2201      	movs	r2, #1
   1664a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   1664e:	687b      	ldr	r3, [r7, #4]
   16650:	f203 2212 	addw	r2, r3, #530	; 0x212
   16654:	687b      	ldr	r3, [r7, #4]
   16656:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   1665a:	687b      	ldr	r3, [r7, #4]
   1665c:	685a      	ldr	r2, [r3, #4]
   1665e:	687b      	ldr	r3, [r7, #4]
   16660:	f503 7305 	add.w	r3, r3, #532	; 0x214
   16664:	4619      	mov	r1, r3
   16666:	4610      	mov	r0, r2
   16668:	4b04      	ldr	r3, [pc, #16]	; (1667c <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   1666a:	4798      	blx	r3
		return status;
   1666c:	687b      	ldr	r3, [r7, #4]
   1666e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   16672:	4618      	mov	r0, r3
   16674:	3708      	adds	r7, #8
   16676:	46bd      	mov	sp, r7
   16678:	bd80      	pop	{r7, pc}
   1667a:	bf00      	nop
   1667c:	000067b5 	.word	0x000067b5

00016680 <_ZN13N25Q256_Class17GetMemoryCapacityEv>:
uint32_t	N25Q256_Class::GetMemoryCapacity(){
   16680:	b480      	push	{r7}
   16682:	b083      	sub	sp, #12
   16684:	af00      	add	r7, sp, #0
   16686:	6078      	str	r0, [r7, #4]
	return	memoryCapacity;
   16688:	687b      	ldr	r3, [r7, #4]
   1668a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
}
   1668e:	4618      	mov	r0, r3
   16690:	370c      	adds	r7, #12
   16692:	46bd      	mov	sp, r7
   16694:	bc80      	pop	{r7}
   16696:	4770      	bx	lr

00016698 <_ZN13N25Q256_Class10WaitOnBusyEv>:
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   16698:	b580      	push	{r7, lr}
   1669a:	b082      	sub	sp, #8
   1669c:	af00      	add	r7, sp, #0
   1669e:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   166a0:	6878      	ldr	r0, [r7, #4]
   166a2:	4b0e      	ldr	r3, [pc, #56]	; (166dc <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   166a4:	4798      	blx	r3
   166a6:	4603      	mov	r3, r0
   166a8:	461a      	mov	r2, r3
   166aa:	687b      	ldr	r3, [r7, #4]
   166ac:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   166b0:	687b      	ldr	r3, [r7, #4]
   166b2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   166b6:	f003 0301 	and.w	r3, r3, #1
   166ba:	2b00      	cmp	r3, #0
   166bc:	d000      	beq.n	166c0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   166be:	e7ef      	b.n	166a0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   166c0:	687b      	ldr	r3, [r7, #4]
   166c2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   166c6:	f003 0301 	and.w	r3, r3, #1
   166ca:	2b00      	cmp	r3, #0
   166cc:	bf0c      	ite	eq
   166ce:	2301      	moveq	r3, #1
   166d0:	2300      	movne	r3, #0
   166d2:	b2db      	uxtb	r3, r3
}
   166d4:	4618      	mov	r0, r3
   166d6:	3708      	adds	r7, #8
   166d8:	46bd      	mov	sp, r7
   166da:	bd80      	pop	{r7, pc}
   166dc:	0001660d 	.word	0x0001660d

000166e0 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   166e0:	b590      	push	{r4, r7, lr}
   166e2:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   166e6:	b085      	sub	sp, #20
   166e8:	af00      	add	r7, sp, #0
   166ea:	f107 0310 	add.w	r3, r7, #16
   166ee:	3b0c      	subs	r3, #12
   166f0:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   166f2:	f107 0310 	add.w	r3, r7, #16
   166f6:	3b0c      	subs	r3, #12
   166f8:	681b      	ldr	r3, [r3, #0]
   166fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   166fe:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   16702:	f107 0310 	add.w	r3, r7, #16
   16706:	3b0c      	subs	r3, #12
   16708:	681b      	ldr	r3, [r3, #0]
   1670a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1670e:	f107 0110 	add.w	r1, r7, #16
   16712:	3904      	subs	r1, #4
   16714:	f107 0010 	add.w	r0, r7, #16
   16718:	380c      	subs	r0, #12
   1671a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1671e:	6800      	ldr	r0, [r0, #0]
   16720:	4c4b      	ldr	r4, [pc, #300]	; (16850 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   16722:	47a0      	blx	r4
	WaitOnBusy();
   16724:	f107 0310 	add.w	r3, r7, #16
   16728:	3b0c      	subs	r3, #12
   1672a:	6818      	ldr	r0, [r3, #0]
   1672c:	4b49      	ldr	r3, [pc, #292]	; (16854 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   1672e:	4798      	blx	r3
	Erase(currentAddress);
   16730:	f107 0310 	add.w	r3, r7, #16
   16734:	3b0c      	subs	r3, #12
   16736:	681b      	ldr	r3, [r3, #0]
   16738:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1673c:	f107 0310 	add.w	r3, r7, #16
   16740:	3b0c      	subs	r3, #12
   16742:	4611      	mov	r1, r2
   16744:	6818      	ldr	r0, [r3, #0]
   16746:	4b44      	ldr	r3, [pc, #272]	; (16858 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   16748:	4798      	blx	r3
	WaitOnBusy();
   1674a:	f107 0310 	add.w	r3, r7, #16
   1674e:	3b0c      	subs	r3, #12
   16750:	6818      	ldr	r0, [r3, #0]
   16752:	4b40      	ldr	r3, [pc, #256]	; (16854 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16754:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   16756:	f107 0310 	add.w	r3, r7, #16
   1675a:	3b0c      	subs	r3, #12
   1675c:	681b      	ldr	r3, [r3, #0]
   1675e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16762:	f107 0110 	add.w	r1, r7, #16
   16766:	3904      	subs	r1, #4
   16768:	f107 0010 	add.w	r0, r7, #16
   1676c:	380c      	subs	r0, #12
   1676e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16772:	6800      	ldr	r0, [r0, #0]
   16774:	4c39      	ldr	r4, [pc, #228]	; (1685c <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   16776:	47a0      	blx	r4
	WaitOnBusy();
   16778:	f107 0310 	add.w	r3, r7, #16
   1677c:	3b0c      	subs	r3, #12
   1677e:	6818      	ldr	r0, [r3, #0]
   16780:	4b34      	ldr	r3, [pc, #208]	; (16854 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16782:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   16784:	f107 0310 	add.w	r3, r7, #16
   16788:	3b0c      	subs	r3, #12
   1678a:	681b      	ldr	r3, [r3, #0]
   1678c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16790:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   16794:	f101 0110 	add.w	r1, r1, #16
   16798:	3904      	subs	r1, #4
   1679a:	f107 0010 	add.w	r0, r7, #16
   1679e:	380c      	subs	r0, #12
   167a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   167a4:	6800      	ldr	r0, [r0, #0]
   167a6:	4c2a      	ldr	r4, [pc, #168]	; (16850 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   167a8:	47a0      	blx	r4
	WaitOnBusy();
   167aa:	f107 0310 	add.w	r3, r7, #16
   167ae:	3b0c      	subs	r3, #12
   167b0:	6818      	ldr	r0, [r3, #0]
   167b2:	4b28      	ldr	r3, [pc, #160]	; (16854 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   167b4:	4798      	blx	r3
	isOK	 = true;
   167b6:	f107 0310 	add.w	r3, r7, #16
   167ba:	3b0c      	subs	r3, #12
   167bc:	681b      	ldr	r3, [r3, #0]
   167be:	2201      	movs	r2, #1
   167c0:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   167c4:	2300      	movs	r3, #0
   167c6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   167ca:	f102 020c 	add.w	r2, r2, #12
   167ce:	6013      	str	r3, [r2, #0]
   167d0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   167d4:	f103 030c 	add.w	r3, r3, #12
   167d8:	681b      	ldr	r3, [r3, #0]
   167da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   167de:	da2b      	bge.n	16838 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   167e0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   167e4:	f103 0310 	add.w	r3, r3, #16
   167e8:	3b04      	subs	r3, #4
   167ea:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   167ee:	f102 020c 	add.w	r2, r2, #12
   167f2:	6812      	ldr	r2, [r2, #0]
   167f4:	4413      	add	r3, r2
   167f6:	781a      	ldrb	r2, [r3, #0]
   167f8:	f107 0310 	add.w	r3, r7, #16
   167fc:	3b04      	subs	r3, #4
   167fe:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   16802:	f101 010c 	add.w	r1, r1, #12
   16806:	6809      	ldr	r1, [r1, #0]
   16808:	440b      	add	r3, r1
   1680a:	781b      	ldrb	r3, [r3, #0]
   1680c:	429a      	cmp	r2, r3
   1680e:	d007      	beq.n	16820 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   16810:	f107 0310 	add.w	r3, r7, #16
   16814:	3b0c      	subs	r3, #12
   16816:	681b      	ldr	r3, [r3, #0]
   16818:	2200      	movs	r2, #0
   1681a:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   1681e:	e00b      	b.n	16838 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   16820:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   16824:	f103 030c 	add.w	r3, r3, #12
   16828:	681b      	ldr	r3, [r3, #0]
   1682a:	3301      	adds	r3, #1
   1682c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   16830:	f102 020c 	add.w	r2, r2, #12
   16834:	6013      	str	r3, [r2, #0]
   16836:	e7cb      	b.n	167d0 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   16838:	f107 0310 	add.w	r3, r7, #16
   1683c:	3b0c      	subs	r3, #12
   1683e:	681b      	ldr	r3, [r3, #0]
   16840:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   16844:	4618      	mov	r0, r3
   16846:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   1684a:	3714      	adds	r7, #20
   1684c:	46bd      	mov	sp, r7
   1684e:	bd90      	pop	{r4, r7, pc}
   16850:	000165d1 	.word	0x000165d1
   16854:	00016699 	.word	0x00016699
   16858:	0001656d 	.word	0x0001656d
   1685c:	0001659d 	.word	0x0001659d

00016860 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   16860:	b580      	push	{r7, lr}
   16862:	b082      	sub	sp, #8
   16864:	af00      	add	r7, sp, #0
   16866:	6078      	str	r0, [r7, #4]
   16868:	6039      	str	r1, [r7, #0]
   1686a:	687b      	ldr	r3, [r7, #4]
   1686c:	2b01      	cmp	r3, #1
   1686e:	d10d      	bne.n	1688c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   16870:	683b      	ldr	r3, [r7, #0]
   16872:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16876:	4293      	cmp	r3, r2
   16878:	d108      	bne.n	1688c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1687a:	4906      	ldr	r1, [pc, #24]	; (16894 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1687c:	4806      	ldr	r0, [pc, #24]	; (16898 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1687e:	4b07      	ldr	r3, [pc, #28]	; (1689c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   16880:	4798      	blx	r3
   16882:	4a07      	ldr	r2, [pc, #28]	; (168a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   16884:	4907      	ldr	r1, [pc, #28]	; (168a4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   16886:	4804      	ldr	r0, [pc, #16]	; (16898 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   16888:	4b07      	ldr	r3, [pc, #28]	; (168a8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1688a:	4798      	blx	r3
   1688c:	bf00      	nop
   1688e:	3708      	adds	r7, #8
   16890:	46bd      	mov	sp, r7
   16892:	bd80      	pop	{r7, pc}
   16894:	2000a9c0 	.word	0x2000a9c0
   16898:	2000a03c 	.word	0x2000a03c
   1689c:	000164c5 	.word	0x000164c5
   168a0:	20000000 	.word	0x20000000
   168a4:	000164ed 	.word	0x000164ed
   168a8:	0001949d 	.word	0x0001949d

000168ac <_GLOBAL__sub_I_ptrN25Q256Class>:
   168ac:	b580      	push	{r7, lr}
   168ae:	af00      	add	r7, sp, #0
   168b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   168b4:	2001      	movs	r0, #1
   168b6:	4b01      	ldr	r3, [pc, #4]	; (168bc <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   168b8:	4798      	blx	r3
   168ba:	bd80      	pop	{r7, pc}
   168bc:	00016861 	.word	0x00016861

000168c0 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   168c0:	b580      	push	{r7, lr}
   168c2:	b082      	sub	sp, #8
   168c4:	af00      	add	r7, sp, #0
   168c6:	6078      	str	r0, [r7, #4]
   168c8:	687b      	ldr	r3, [r7, #4]
   168ca:	4618      	mov	r0, r3
   168cc:	4b06      	ldr	r3, [pc, #24]	; (168e8 <_ZN14Calendar_ClassC1Ev+0x28>)
   168ce:	4798      	blx	r3
   168d0:	4a06      	ldr	r2, [pc, #24]	; (168ec <_ZN14Calendar_ClassC1Ev+0x2c>)
   168d2:	687b      	ldr	r3, [r7, #4]
   168d4:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   168d6:	4a06      	ldr	r2, [pc, #24]	; (168f0 <_ZN14Calendar_ClassC1Ev+0x30>)
   168d8:	687b      	ldr	r3, [r7, #4]
   168da:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   168dc:	687b      	ldr	r3, [r7, #4]
   168de:	4618      	mov	r0, r3
   168e0:	3708      	adds	r7, #8
   168e2:	46bd      	mov	sp, r7
   168e4:	bd80      	pop	{r7, pc}
   168e6:	bf00      	nop
   168e8:	0001700d 	.word	0x0001700d
   168ec:	00021790 	.word	0x00021790
   168f0:	2000a270 	.word	0x2000a270

000168f4 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   168f4:	b580      	push	{r7, lr}
   168f6:	b082      	sub	sp, #8
   168f8:	af00      	add	r7, sp, #0
   168fa:	6078      	str	r0, [r7, #4]
   168fc:	6039      	str	r1, [r7, #0]
   168fe:	687b      	ldr	r3, [r7, #4]
   16900:	4618      	mov	r0, r3
   16902:	4b08      	ldr	r3, [pc, #32]	; (16924 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   16904:	4798      	blx	r3
   16906:	4a08      	ldr	r2, [pc, #32]	; (16928 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   16908:	687b      	ldr	r3, [r7, #4]
   1690a:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   1690c:	687b      	ldr	r3, [r7, #4]
   1690e:	683a      	ldr	r2, [r7, #0]
   16910:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
   16914:	4a05      	ldr	r2, [pc, #20]	; (1692c <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   16916:	687b      	ldr	r3, [r7, #4]
   16918:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   1691a:	687b      	ldr	r3, [r7, #4]
   1691c:	4618      	mov	r0, r3
   1691e:	3708      	adds	r7, #8
   16920:	46bd      	mov	sp, r7
   16922:	bd80      	pop	{r7, pc}
   16924:	0001700d 	.word	0x0001700d
   16928:	00021790 	.word	0x00021790
   1692c:	2000a270 	.word	0x2000a270

00016930 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   16930:	b580      	push	{r7, lr}
   16932:	b082      	sub	sp, #8
   16934:	af00      	add	r7, sp, #0
   16936:	6078      	str	r0, [r7, #4]
   16938:	4a05      	ldr	r2, [pc, #20]	; (16950 <_ZN14Calendar_ClassD1Ev+0x20>)
   1693a:	687b      	ldr	r3, [r7, #4]
   1693c:	601a      	str	r2, [r3, #0]
   1693e:	687b      	ldr	r3, [r7, #4]
   16940:	4618      	mov	r0, r3
   16942:	4b04      	ldr	r3, [pc, #16]	; (16954 <_ZN14Calendar_ClassD1Ev+0x24>)
   16944:	4798      	blx	r3
{
} //~Calendar_Class
   16946:	687b      	ldr	r3, [r7, #4]
   16948:	4618      	mov	r0, r3
   1694a:	3708      	adds	r7, #8
   1694c:	46bd      	mov	sp, r7
   1694e:	bd80      	pop	{r7, pc}
   16950:	00021790 	.word	0x00021790
   16954:	0001702d 	.word	0x0001702d

00016958 <_ZN14Calendar_Class4InitEv>:

void	Calendar_Class::Init(void){
   16958:	b580      	push	{r7, lr}
   1695a:	b082      	sub	sp, #8
   1695c:	af00      	add	r7, sp, #0
   1695e:	6078      	str	r0, [r7, #4]
	ptrMemory=&eeprom;
   16960:	687b      	ldr	r3, [r7, #4]
   16962:	4a50      	ldr	r2, [pc, #320]	; (16aa4 <_ZN14Calendar_Class4InitEv+0x14c>)
   16964:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	calendar_enable(ptrCalendar);
   16968:	687b      	ldr	r3, [r7, #4]
   1696a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1696e:	4618      	mov	r0, r3
   16970:	4b4d      	ldr	r3, [pc, #308]	; (16aa8 <_ZN14Calendar_Class4InitEv+0x150>)
   16972:	4798      	blx	r3
	
	InitMaxDate();
   16974:	6878      	ldr	r0, [r7, #4]
   16976:	4b4d      	ldr	r3, [pc, #308]	; (16aac <_ZN14Calendar_Class4InitEv+0x154>)
   16978:	4798      	blx	r3
	
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	ReadLastDateTime();
   1697a:	687b      	ldr	r3, [r7, #4]
   1697c:	4618      	mov	r0, r3
   1697e:	4b4c      	ldr	r3, [pc, #304]	; (16ab0 <_ZN14Calendar_Class4InitEv+0x158>)
   16980:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   16982:	687b      	ldr	r3, [r7, #4]
   16984:	681b      	ldr	r3, [r3, #0]
   16986:	3304      	adds	r3, #4
   16988:	681b      	ldr	r3, [r3, #0]
   1698a:	687a      	ldr	r2, [r7, #4]
   1698c:	3260      	adds	r2, #96	; 0x60
   1698e:	4611      	mov	r1, r2
   16990:	6878      	ldr	r0, [r7, #4]
   16992:	4798      	blx	r3
   16994:	4602      	mov	r2, r0
   16996:	687b      	ldr	r3, [r7, #4]
   16998:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   1699c:	687b      	ldr	r3, [r7, #4]
   1699e:	681b      	ldr	r3, [r3, #0]
   169a0:	3304      	adds	r3, #4
   169a2:	681b      	ldr	r3, [r3, #0]
   169a4:	687a      	ldr	r2, [r7, #4]
   169a6:	326c      	adds	r2, #108	; 0x6c
   169a8:	4611      	mov	r1, r2
   169aa:	6878      	ldr	r0, [r7, #4]
   169ac:	4798      	blx	r3
   169ae:	4602      	mov	r2, r0
   169b0:	687b      	ldr	r3, [r7, #4]
   169b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   169b6:	687b      	ldr	r3, [r7, #4]
   169b8:	681b      	ldr	r3, [r3, #0]
   169ba:	3304      	adds	r3, #4
   169bc:	681b      	ldr	r3, [r3, #0]
   169be:	687a      	ldr	r2, [r7, #4]
   169c0:	327c      	adds	r2, #124	; 0x7c
   169c2:	4611      	mov	r1, r2
   169c4:	6878      	ldr	r0, [r7, #4]
   169c6:	4798      	blx	r3
   169c8:	4602      	mov	r2, r0
   169ca:	687b      	ldr	r3, [r7, #4]
   169cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   169d0:	687b      	ldr	r3, [r7, #4]
   169d2:	681b      	ldr	r3, [r3, #0]
   169d4:	3304      	adds	r3, #4
   169d6:	681b      	ldr	r3, [r3, #0]
   169d8:	687a      	ldr	r2, [r7, #4]
   169da:	3284      	adds	r2, #132	; 0x84
   169dc:	4611      	mov	r1, r2
   169de:	6878      	ldr	r0, [r7, #4]
   169e0:	4798      	blx	r3
   169e2:	4602      	mov	r2, r0
   169e4:	687b      	ldr	r3, [r7, #4]
   169e6:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   169e8:	6878      	ldr	r0, [r7, #4]
   169ea:	4b32      	ldr	r3, [pc, #200]	; (16ab4 <_ZN14Calendar_Class4InitEv+0x15c>)
   169ec:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   169ee:	687b      	ldr	r3, [r7, #4]
   169f0:	681b      	ldr	r3, [r3, #0]
   169f2:	3304      	adds	r3, #4
   169f4:	681b      	ldr	r3, [r3, #0]
   169f6:	687a      	ldr	r2, [r7, #4]
   169f8:	3274      	adds	r2, #116	; 0x74
   169fa:	4611      	mov	r1, r2
   169fc:	6878      	ldr	r0, [r7, #4]
   169fe:	4798      	blx	r3
   16a00:	4602      	mov	r2, r0
   16a02:	687b      	ldr	r3, [r7, #4]
   16a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   16a08:	687b      	ldr	r3, [r7, #4]
   16a0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   16a0e:	687b      	ldr	r3, [r7, #4]
   16a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   16a14:	429a      	cmp	r2, r3
   16a16:	d80e      	bhi.n	16a36 <_ZN14Calendar_Class4InitEv+0xde>
   16a18:	687b      	ldr	r3, [r7, #4]
   16a1a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   16a1e:	687b      	ldr	r3, [r7, #4]
   16a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   16a24:	429a      	cmp	r2, r3
   16a26:	d006      	beq.n	16a36 <_ZN14Calendar_Class4InitEv+0xde>
   16a28:	687b      	ldr	r3, [r7, #4]
   16a2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   16a2e:	687b      	ldr	r3, [r7, #4]
   16a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   16a32:	429a      	cmp	r2, r3
   16a34:	d106      	bne.n	16a44 <_ZN14Calendar_Class4InitEv+0xec>
	{
		SetDateTime(&compilationDateTime);
   16a36:	687b      	ldr	r3, [r7, #4]
   16a38:	3374      	adds	r3, #116	; 0x74
   16a3a:	4619      	mov	r1, r3
   16a3c:	6878      	ldr	r0, [r7, #4]
   16a3e:	4b1e      	ldr	r3, [pc, #120]	; (16ab8 <_ZN14Calendar_Class4InitEv+0x160>)
   16a40:	4798      	blx	r3
   16a42:	e022      	b.n	16a8a <_ZN14Calendar_Class4InitEv+0x132>
	}
	else
	{
		if (lastTimestamp<currentTimestamp)
   16a44:	687b      	ldr	r3, [r7, #4]
   16a46:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   16a4a:	687b      	ldr	r3, [r7, #4]
   16a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   16a50:	429a      	cmp	r2, r3
   16a52:	d206      	bcs.n	16a62 <_ZN14Calendar_Class4InitEv+0x10a>
		{
			SetDateTime(&compilationDateTime);
   16a54:	687b      	ldr	r3, [r7, #4]
   16a56:	3374      	adds	r3, #116	; 0x74
   16a58:	4619      	mov	r1, r3
   16a5a:	6878      	ldr	r0, [r7, #4]
   16a5c:	4b16      	ldr	r3, [pc, #88]	; (16ab8 <_ZN14Calendar_Class4InitEv+0x160>)
   16a5e:	4798      	blx	r3
   16a60:	e013      	b.n	16a8a <_ZN14Calendar_Class4InitEv+0x132>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   16a62:	687b      	ldr	r3, [r7, #4]
   16a64:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   16a68:	687b      	ldr	r3, [r7, #4]
   16a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   16a6c:	429a      	cmp	r2, r3
   16a6e:	d106      	bne.n	16a7e <_ZN14Calendar_Class4InitEv+0x126>
			{
				SetDateTime(&compilationDateTime);
   16a70:	687b      	ldr	r3, [r7, #4]
   16a72:	3374      	adds	r3, #116	; 0x74
   16a74:	4619      	mov	r1, r3
   16a76:	6878      	ldr	r0, [r7, #4]
   16a78:	4b0f      	ldr	r3, [pc, #60]	; (16ab8 <_ZN14Calendar_Class4InitEv+0x160>)
   16a7a:	4798      	blx	r3
   16a7c:	e005      	b.n	16a8a <_ZN14Calendar_Class4InitEv+0x132>
			} 
			else
			{
				SetDateTime(&lastDateTime);
   16a7e:	687b      	ldr	r3, [r7, #4]
   16a80:	3360      	adds	r3, #96	; 0x60
   16a82:	4619      	mov	r1, r3
   16a84:	6878      	ldr	r0, [r7, #4]
   16a86:	4b0c      	ldr	r3, [pc, #48]	; (16ab8 <_ZN14Calendar_Class4InitEv+0x160>)
   16a88:	4798      	blx	r3
			}
		
		}
	}
	enlapsedTime=false;
   16a8a:	687b      	ldr	r3, [r7, #4]
   16a8c:	2200      	movs	r2, #0
   16a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SaveCurrentDateTime();
   16a92:	687b      	ldr	r3, [r7, #4]
   16a94:	4618      	mov	r0, r3
   16a96:	4b09      	ldr	r3, [pc, #36]	; (16abc <_ZN14Calendar_Class4InitEv+0x164>)
   16a98:	4798      	blx	r3
	
}
   16a9a:	bf00      	nop
   16a9c:	3708      	adds	r7, #8
   16a9e:	46bd      	mov	sp, r7
   16aa0:	bd80      	pop	{r7, pc}
   16aa2:	bf00      	nop
   16aa4:	20009ff4 	.word	0x20009ff4
   16aa8:	00005bf9 	.word	0x00005bf9
   16aac:	00016ac1 	.word	0x00016ac1
   16ab0:	000172e1 	.word	0x000172e1
   16ab4:	00016b67 	.word	0x00016b67
   16ab8:	00016d5d 	.word	0x00016d5d
   16abc:	00017271 	.word	0x00017271

00016ac0 <_ZN14Calendar_Class11InitMaxDateEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitMaxDate(void){
   16ac0:	b480      	push	{r7}
   16ac2:	b083      	sub	sp, #12
   16ac4:	af00      	add	r7, sp, #0
   16ac6:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   16ac8:	687b      	ldr	r3, [r7, #4]
   16aca:	f640 0202 	movw	r2, #2050	; 0x802
   16ace:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   16ad2:	687b      	ldr	r3, [r7, #4]
   16ad4:	220c      	movs	r2, #12
   16ad6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   16ada:	687b      	ldr	r3, [r7, #4]
   16adc:	221f      	movs	r2, #31
   16ade:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   16ae2:	687b      	ldr	r3, [r7, #4]
   16ae4:	220c      	movs	r2, #12
   16ae6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   16aea:	687b      	ldr	r3, [r7, #4]
   16aec:	223b      	movs	r2, #59	; 0x3b
   16aee:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   16af2:	687b      	ldr	r3, [r7, #4]
   16af4:	223b      	movs	r2, #59	; 0x3b
   16af6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   16afa:	687b      	ldr	r3, [r7, #4]
   16afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16b00:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   16b04:	687b      	ldr	r3, [r7, #4]
   16b06:	22ff      	movs	r2, #255	; 0xff
   16b08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   16b0c:	687b      	ldr	r3, [r7, #4]
   16b0e:	22ff      	movs	r2, #255	; 0xff
   16b10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   16b14:	687b      	ldr	r3, [r7, #4]
   16b16:	22ff      	movs	r2, #255	; 0xff
   16b18:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   16b1c:	687b      	ldr	r3, [r7, #4]
   16b1e:	22ff      	movs	r2, #255	; 0xff
   16b20:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   16b24:	687b      	ldr	r3, [r7, #4]
   16b26:	22ff      	movs	r2, #255	; 0xff
   16b28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   16b2c:	687b      	ldr	r3, [r7, #4]
   16b2e:	2200      	movs	r2, #0
   16b30:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   16b34:	687b      	ldr	r3, [r7, #4]
   16b36:	2200      	movs	r2, #0
   16b38:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   16b3c:	687b      	ldr	r3, [r7, #4]
   16b3e:	2200      	movs	r2, #0
   16b40:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   16b44:	687b      	ldr	r3, [r7, #4]
   16b46:	2200      	movs	r2, #0
   16b48:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   16b4c:	687b      	ldr	r3, [r7, #4]
   16b4e:	2200      	movs	r2, #0
   16b50:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   16b54:	687b      	ldr	r3, [r7, #4]
   16b56:	2200      	movs	r2, #0
   16b58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   16b5c:	bf00      	nop
   16b5e:	370c      	adds	r7, #12
   16b60:	46bd      	mov	sp, r7
   16b62:	bc80      	pop	{r7}
   16b64:	4770      	bx	lr

00016b66 <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   16b66:	b480      	push	{r7}
   16b68:	b083      	sub	sp, #12
   16b6a:	af00      	add	r7, sp, #0
   16b6c:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   16b6e:	2332      	movs	r3, #50	; 0x32
   16b70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   16b74:	4613      	mov	r3, r2
   16b76:	009b      	lsls	r3, r3, #2
   16b78:	4413      	add	r3, r2
   16b7a:	005b      	lsls	r3, r3, #1
   16b7c:	461a      	mov	r2, r3
   16b7e:	2330      	movs	r3, #48	; 0x30
   16b80:	3b30      	subs	r3, #48	; 0x30
   16b82:	441a      	add	r2, r3
   16b84:	4613      	mov	r3, r2
   16b86:	009b      	lsls	r3, r3, #2
   16b88:	4413      	add	r3, r2
   16b8a:	005b      	lsls	r3, r3, #1
   16b8c:	461a      	mov	r2, r3
   16b8e:	2332      	movs	r3, #50	; 0x32
   16b90:	3b30      	subs	r3, #48	; 0x30
   16b92:	4413      	add	r3, r2
   16b94:	b29b      	uxth	r3, r3
   16b96:	461a      	mov	r2, r3
   16b98:	0092      	lsls	r2, r2, #2
   16b9a:	4413      	add	r3, r2
   16b9c:	005b      	lsls	r3, r3, #1
   16b9e:	b29a      	uxth	r2, r3
   16ba0:	2330      	movs	r3, #48	; 0x30
   16ba2:	b29b      	uxth	r3, r3
   16ba4:	4413      	add	r3, r2
   16ba6:	b29b      	uxth	r3, r3
   16ba8:	3b30      	subs	r3, #48	; 0x30
   16baa:	b29a      	uxth	r2, r3
   16bac:	687b      	ldr	r3, [r7, #4]
   16bae:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   16bb2:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16bb4:	2b6e      	cmp	r3, #110	; 0x6e
   16bb6:	d106      	bne.n	16bc6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   16bb8:	2363      	movs	r3, #99	; 0x63
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16bba:	2b61      	cmp	r3, #97	; 0x61
   16bbc:	d101      	bne.n	16bc2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   16bbe:	2301      	movs	r3, #1
   16bc0:	e02f      	b.n	16c22 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16bc2:	2306      	movs	r3, #6
   16bc4:	e02d      	b.n	16c22 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   16bc6:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16bc8:	2b62      	cmp	r3, #98	; 0x62
   16bca:	d029      	beq.n	16c20 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   16bcc:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16bce:	2b72      	cmp	r3, #114	; 0x72
   16bd0:	d106      	bne.n	16be0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   16bd2:	234f      	movs	r3, #79	; 0x4f
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16bd4:	2b4d      	cmp	r3, #77	; 0x4d
   16bd6:	d101      	bne.n	16bdc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   16bd8:	2303      	movs	r3, #3
   16bda:	e022      	b.n	16c22 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16bdc:	2304      	movs	r3, #4
   16bde:	e020      	b.n	16c22 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   16be0:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16be2:	2b79      	cmp	r3, #121	; 0x79
   16be4:	d01a      	beq.n	16c1c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   16be6:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16be8:	2b6c      	cmp	r3, #108	; 0x6c
   16bea:	d015      	beq.n	16c18 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   16bec:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16bee:	2b67      	cmp	r3, #103	; 0x67
   16bf0:	d010      	beq.n	16c14 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   16bf2:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16bf4:	2b70      	cmp	r3, #112	; 0x70
   16bf6:	d00b      	beq.n	16c10 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   16bf8:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16bfa:	2b74      	cmp	r3, #116	; 0x74
   16bfc:	d006      	beq.n	16c0c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   16bfe:	2374      	movs	r3, #116	; 0x74
   16c00:	2b76      	cmp	r3, #118	; 0x76
   16c02:	d101      	bne.n	16c08 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   16c04:	230b      	movs	r3, #11
   16c06:	e00c      	b.n	16c22 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16c08:	230c      	movs	r3, #12
   16c0a:	e00a      	b.n	16c22 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16c0c:	230a      	movs	r3, #10
   16c0e:	e008      	b.n	16c22 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16c10:	2309      	movs	r3, #9
   16c12:	e006      	b.n	16c22 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16c14:	2308      	movs	r3, #8
   16c16:	e004      	b.n	16c22 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16c18:	2307      	movs	r3, #7
   16c1a:	e002      	b.n	16c22 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16c1c:	2305      	movs	r3, #5
   16c1e:	e000      	b.n	16c22 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16c20:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   16c22:	687a      	ldr	r2, [r7, #4]
   16c24:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   16c28:	2331      	movs	r3, #49	; 0x31
   16c2a:	2b20      	cmp	r3, #32
   16c2c:	d008      	beq.n	16c40 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   16c2e:	2331      	movs	r3, #49	; 0x31
   16c30:	3b30      	subs	r3, #48	; 0x30
   16c32:	b2db      	uxtb	r3, r3
   16c34:	461a      	mov	r2, r3
   16c36:	0092      	lsls	r2, r2, #2
   16c38:	4413      	add	r3, r2
   16c3a:	005b      	lsls	r3, r3, #1
   16c3c:	b2db      	uxtb	r3, r3
   16c3e:	e000      	b.n	16c42 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   16c40:	2300      	movs	r3, #0
   16c42:	2235      	movs	r2, #53	; 0x35
   16c44:	4413      	add	r3, r2
   16c46:	b2db      	uxtb	r3, r3
   16c48:	3b30      	subs	r3, #48	; 0x30
   16c4a:	b2da      	uxtb	r2, r3
   16c4c:	687b      	ldr	r3, [r7, #4]
   16c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   16c52:	2331      	movs	r3, #49	; 0x31
   16c54:	3b30      	subs	r3, #48	; 0x30
   16c56:	b2db      	uxtb	r3, r3
   16c58:	461a      	mov	r2, r3
   16c5a:	0092      	lsls	r2, r2, #2
   16c5c:	4413      	add	r3, r2
   16c5e:	005b      	lsls	r3, r3, #1
   16c60:	b2db      	uxtb	r3, r3
   16c62:	2231      	movs	r2, #49	; 0x31
   16c64:	4413      	add	r3, r2
   16c66:	b2db      	uxtb	r3, r3
   16c68:	3b30      	subs	r3, #48	; 0x30
   16c6a:	b2da      	uxtb	r2, r3
   16c6c:	687b      	ldr	r3, [r7, #4]
   16c6e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   16c72:	2334      	movs	r3, #52	; 0x34
   16c74:	3b30      	subs	r3, #48	; 0x30
   16c76:	b2db      	uxtb	r3, r3
   16c78:	461a      	mov	r2, r3
   16c7a:	0092      	lsls	r2, r2, #2
   16c7c:	4413      	add	r3, r2
   16c7e:	005b      	lsls	r3, r3, #1
   16c80:	b2db      	uxtb	r3, r3
   16c82:	2232      	movs	r2, #50	; 0x32
   16c84:	4413      	add	r3, r2
   16c86:	b2db      	uxtb	r3, r3
   16c88:	3b30      	subs	r3, #48	; 0x30
   16c8a:	b2da      	uxtb	r2, r3
   16c8c:	687b      	ldr	r3, [r7, #4]
   16c8e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   16c92:	2333      	movs	r3, #51	; 0x33
   16c94:	3b30      	subs	r3, #48	; 0x30
   16c96:	b2db      	uxtb	r3, r3
   16c98:	461a      	mov	r2, r3
   16c9a:	0092      	lsls	r2, r2, #2
   16c9c:	4413      	add	r3, r2
   16c9e:	005b      	lsls	r3, r3, #1
   16ca0:	b2db      	uxtb	r3, r3
   16ca2:	2235      	movs	r2, #53	; 0x35
   16ca4:	4413      	add	r3, r2
   16ca6:	b2db      	uxtb	r3, r3
   16ca8:	3b30      	subs	r3, #48	; 0x30
   16caa:	b2da      	uxtb	r2, r3
   16cac:	687b      	ldr	r3, [r7, #4]
   16cae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
   16cb2:	bf00      	nop
   16cb4:	370c      	adds	r7, #12
   16cb6:	46bd      	mov	sp, r7
   16cb8:	bc80      	pop	{r7}
   16cba:	4770      	bx	lr

00016cbc <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   16cbc:	b580      	push	{r7, lr}
   16cbe:	b082      	sub	sp, #8
   16cc0:	af00      	add	r7, sp, #0
   16cc2:	6078      	str	r0, [r7, #4]
   16cc4:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   16cc6:	687b      	ldr	r3, [r7, #4]
   16cc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   16ccc:	6839      	ldr	r1, [r7, #0]
   16cce:	4618      	mov	r0, r3
   16cd0:	4b03      	ldr	r3, [pc, #12]	; (16ce0 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   16cd2:	4798      	blx	r3
   16cd4:	4603      	mov	r3, r0
}
   16cd6:	4618      	mov	r0, r3
   16cd8:	3708      	adds	r7, #8
   16cda:	46bd      	mov	sp, r7
   16cdc:	bd80      	pop	{r7, pc}
   16cde:	bf00      	nop
   16ce0:	00005d49 	.word	0x00005d49

00016ce4 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   16ce4:	b480      	push	{r7}
   16ce6:	b083      	sub	sp, #12
   16ce8:	af00      	add	r7, sp, #0
   16cea:	6078      	str	r0, [r7, #4]
   16cec:	460b      	mov	r3, r1
   16cee:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   16cf0:	887b      	ldrh	r3, [r7, #2]
   16cf2:	f003 0303 	and.w	r3, r3, #3
   16cf6:	2b00      	cmp	r3, #0
   16cf8:	d001      	beq.n	16cfe <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   16cfa:	2300      	movs	r3, #0
   16cfc:	e000      	b.n	16d00 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   16cfe:	2301      	movs	r3, #1
	}
}
   16d00:	4618      	mov	r0, r3
   16d02:	370c      	adds	r7, #12
   16d04:	46bd      	mov	sp, r7
   16d06:	bc80      	pop	{r7}
   16d08:	4770      	bx	lr
	...

00016d0c <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   16d0c:	b580      	push	{r7, lr}
   16d0e:	b082      	sub	sp, #8
   16d10:	af00      	add	r7, sp, #0
   16d12:	6078      	str	r0, [r7, #4]
   16d14:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   16d16:	687b      	ldr	r3, [r7, #4]
   16d18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   16d1c:	6839      	ldr	r1, [r7, #0]
   16d1e:	4618      	mov	r0, r3
   16d20:	4b03      	ldr	r3, [pc, #12]	; (16d30 <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   16d22:	4798      	blx	r3
   16d24:	4603      	mov	r3, r0
}
   16d26:	4618      	mov	r0, r3
   16d28:	3708      	adds	r7, #8
   16d2a:	46bd      	mov	sp, r7
   16d2c:	bd80      	pop	{r7, pc}
   16d2e:	bf00      	nop
   16d30:	00005c39 	.word	0x00005c39

00016d34 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   16d34:	b580      	push	{r7, lr}
   16d36:	b082      	sub	sp, #8
   16d38:	af00      	add	r7, sp, #0
   16d3a:	6078      	str	r0, [r7, #4]
   16d3c:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   16d3e:	687b      	ldr	r3, [r7, #4]
   16d40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   16d44:	6839      	ldr	r1, [r7, #0]
   16d46:	4618      	mov	r0, r3
   16d48:	4b03      	ldr	r3, [pc, #12]	; (16d58 <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   16d4a:	4798      	blx	r3
   16d4c:	4603      	mov	r3, r0
}
   16d4e:	4618      	mov	r0, r3
   16d50:	3708      	adds	r7, #8
   16d52:	46bd      	mov	sp, r7
   16d54:	bd80      	pop	{r7, pc}
   16d56:	bf00      	nop
   16d58:	00005cc1 	.word	0x00005cc1

00016d5c <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   16d5c:	b580      	push	{r7, lr}
   16d5e:	b084      	sub	sp, #16
   16d60:	af00      	add	r7, sp, #0
   16d62:	6078      	str	r0, [r7, #4]
   16d64:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   16d66:	683a      	ldr	r2, [r7, #0]
   16d68:	f107 030c 	add.w	r3, r7, #12
   16d6c:	3204      	adds	r2, #4
   16d6e:	6810      	ldr	r0, [r2, #0]
   16d70:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   16d72:	f107 030c 	add.w	r3, r7, #12
   16d76:	4619      	mov	r1, r3
   16d78:	6878      	ldr	r0, [r7, #4]
   16d7a:	4b0a      	ldr	r3, [pc, #40]	; (16da4 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   16d7c:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   16d7e:	683a      	ldr	r2, [r7, #0]
   16d80:	f107 0308 	add.w	r3, r7, #8
   16d84:	8811      	ldrh	r1, [r2, #0]
   16d86:	7892      	ldrb	r2, [r2, #2]
   16d88:	8019      	strh	r1, [r3, #0]
   16d8a:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   16d8c:	f107 0308 	add.w	r3, r7, #8
   16d90:	4619      	mov	r1, r3
   16d92:	6878      	ldr	r0, [r7, #4]
   16d94:	4b04      	ldr	r3, [pc, #16]	; (16da8 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   16d96:	4798      	blx	r3
   16d98:	4603      	mov	r3, r0
			
}
   16d9a:	4618      	mov	r0, r3
   16d9c:	3710      	adds	r7, #16
   16d9e:	46bd      	mov	sp, r7
   16da0:	bd80      	pop	{r7, pc}
   16da2:	bf00      	nop
   16da4:	00016d35 	.word	0x00016d35
   16da8:	00016d0d 	.word	0x00016d0d

00016dac <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   16dac:	b580      	push	{r7, lr}
   16dae:	b086      	sub	sp, #24
   16db0:	af00      	add	r7, sp, #0
   16db2:	6078      	str	r0, [r7, #4]
   16db4:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   16db6:	2300      	movs	r3, #0
   16db8:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   16dba:	2300      	movs	r3, #0
   16dbc:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   16dbe:	683b      	ldr	r3, [r7, #0]
   16dc0:	88db      	ldrh	r3, [r3, #6]
   16dc2:	b2da      	uxtb	r2, r3
   16dc4:	687b      	ldr	r3, [r7, #4]
   16dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   16dca:	699b      	ldr	r3, [r3, #24]
   16dcc:	b2db      	uxtb	r3, r3
   16dce:	1ad3      	subs	r3, r2, r3
   16dd0:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   16dd2:	683b      	ldr	r3, [r7, #0]
   16dd4:	795b      	ldrb	r3, [r3, #5]
   16dd6:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   16dd8:	683b      	ldr	r3, [r7, #0]
   16dda:	791b      	ldrb	r3, [r3, #4]
   16ddc:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   16dde:	683b      	ldr	r3, [r7, #0]
   16de0:	789b      	ldrb	r3, [r3, #2]
   16de2:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   16de4:	683b      	ldr	r3, [r7, #0]
   16de6:	785b      	ldrb	r3, [r3, #1]
   16de8:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   16dea:	683b      	ldr	r3, [r7, #0]
   16dec:	781b      	ldrb	r3, [r3, #0]
   16dee:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   16df0:	2300      	movs	r3, #0
   16df2:	613b      	str	r3, [r7, #16]
   16df4:	7bfa      	ldrb	r2, [r7, #15]
   16df6:	693b      	ldr	r3, [r7, #16]
   16df8:	429a      	cmp	r2, r3
   16dfa:	d91e      	bls.n	16e3a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   16dfc:	687b      	ldr	r3, [r7, #4]
   16dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   16e02:	699b      	ldr	r3, [r3, #24]
   16e04:	b29a      	uxth	r2, r3
   16e06:	693b      	ldr	r3, [r7, #16]
   16e08:	b29b      	uxth	r3, r3
   16e0a:	4413      	add	r3, r2
   16e0c:	b29b      	uxth	r3, r3
   16e0e:	4619      	mov	r1, r3
   16e10:	6878      	ldr	r0, [r7, #4]
   16e12:	4b27      	ldr	r3, [pc, #156]	; (16eb0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   16e14:	4798      	blx	r3
   16e16:	4603      	mov	r3, r0
   16e18:	2b00      	cmp	r3, #0
   16e1a:	d006      	beq.n	16e2a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   16e1c:	697b      	ldr	r3, [r7, #20]
   16e1e:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   16e22:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   16e26:	617b      	str	r3, [r7, #20]
   16e28:	e003      	b.n	16e32 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   16e2a:	697a      	ldr	r2, [r7, #20]
   16e2c:	4b21      	ldr	r3, [pc, #132]	; (16eb4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   16e2e:	4413      	add	r3, r2
   16e30:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   16e32:	693b      	ldr	r3, [r7, #16]
   16e34:	3301      	adds	r3, #1
   16e36:	613b      	str	r3, [r7, #16]
   16e38:	e7dc      	b.n	16df4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   16e3a:	2301      	movs	r3, #1
   16e3c:	613b      	str	r3, [r7, #16]
   16e3e:	7bba      	ldrb	r2, [r7, #14]
   16e40:	693b      	ldr	r3, [r7, #16]
   16e42:	429a      	cmp	r2, r3
   16e44:	d910      	bls.n	16e68 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   16e46:	683b      	ldr	r3, [r7, #0]
   16e48:	88db      	ldrh	r3, [r3, #6]
   16e4a:	4619      	mov	r1, r3
   16e4c:	693b      	ldr	r3, [r7, #16]
   16e4e:	b2db      	uxtb	r3, r3
   16e50:	461a      	mov	r2, r3
   16e52:	6878      	ldr	r0, [r7, #4]
   16e54:	4b18      	ldr	r3, [pc, #96]	; (16eb8 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   16e56:	4798      	blx	r3
   16e58:	4602      	mov	r2, r0
   16e5a:	697b      	ldr	r3, [r7, #20]
   16e5c:	4413      	add	r3, r2
   16e5e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   16e60:	693b      	ldr	r3, [r7, #16]
   16e62:	3301      	adds	r3, #1
   16e64:	613b      	str	r3, [r7, #16]
   16e66:	e7ea      	b.n	16e3e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   16e68:	7b7b      	ldrb	r3, [r7, #13]
   16e6a:	3b01      	subs	r3, #1
   16e6c:	4a13      	ldr	r2, [pc, #76]	; (16ebc <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   16e6e:	fb02 f303 	mul.w	r3, r2, r3
   16e72:	461a      	mov	r2, r3
   16e74:	697b      	ldr	r3, [r7, #20]
   16e76:	4413      	add	r3, r2
   16e78:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   16e7a:	7b3b      	ldrb	r3, [r7, #12]
   16e7c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   16e80:	fb02 f303 	mul.w	r3, r2, r3
   16e84:	461a      	mov	r2, r3
   16e86:	697b      	ldr	r3, [r7, #20]
   16e88:	4413      	add	r3, r2
   16e8a:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   16e8c:	7afa      	ldrb	r2, [r7, #11]
   16e8e:	4613      	mov	r3, r2
   16e90:	011b      	lsls	r3, r3, #4
   16e92:	1a9b      	subs	r3, r3, r2
   16e94:	009b      	lsls	r3, r3, #2
   16e96:	461a      	mov	r2, r3
   16e98:	697b      	ldr	r3, [r7, #20]
   16e9a:	4413      	add	r3, r2
   16e9c:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   16e9e:	7abb      	ldrb	r3, [r7, #10]
   16ea0:	697a      	ldr	r2, [r7, #20]
   16ea2:	4413      	add	r3, r2
   16ea4:	617b      	str	r3, [r7, #20]

	return tmp;
   16ea6:	697b      	ldr	r3, [r7, #20]
}
   16ea8:	4618      	mov	r0, r3
   16eaa:	3718      	adds	r7, #24
   16eac:	46bd      	mov	sp, r7
   16eae:	bd80      	pop	{r7, pc}
   16eb0:	00016ce5 	.word	0x00016ce5
   16eb4:	01e13380 	.word	0x01e13380
   16eb8:	00016ec1 	.word	0x00016ec1
   16ebc:	00015180 	.word	0x00015180

00016ec0 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   16ec0:	b580      	push	{r7, lr}
   16ec2:	b086      	sub	sp, #24
   16ec4:	af00      	add	r7, sp, #0
   16ec6:	60f8      	str	r0, [r7, #12]
   16ec8:	60b9      	str	r1, [r7, #8]
   16eca:	4613      	mov	r3, r2
   16ecc:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   16ece:	2300      	movs	r3, #0
   16ed0:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   16ed2:	68bb      	ldr	r3, [r7, #8]
   16ed4:	b29b      	uxth	r3, r3
   16ed6:	4619      	mov	r1, r3
   16ed8:	68f8      	ldr	r0, [r7, #12]
   16eda:	4b2f      	ldr	r3, [pc, #188]	; (16f98 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   16edc:	4798      	blx	r3
   16ede:	4603      	mov	r3, r0
   16ee0:	2b00      	cmp	r3, #0
   16ee2:	d028      	beq.n	16f36 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   16ee4:	79fb      	ldrb	r3, [r7, #7]
   16ee6:	3b01      	subs	r3, #1
   16ee8:	2b0b      	cmp	r3, #11
   16eea:	d84c      	bhi.n	16f86 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   16eec:	a201      	add	r2, pc, #4	; (adr r2, 16ef4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   16eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16ef2:	bf00      	nop
   16ef4:	00016f25 	.word	0x00016f25
   16ef8:	00016f2b 	.word	0x00016f2b
   16efc:	00016f25 	.word	0x00016f25
   16f00:	00016f31 	.word	0x00016f31
   16f04:	00016f25 	.word	0x00016f25
   16f08:	00016f31 	.word	0x00016f31
   16f0c:	00016f25 	.word	0x00016f25
   16f10:	00016f25 	.word	0x00016f25
   16f14:	00016f31 	.word	0x00016f31
   16f18:	00016f25 	.word	0x00016f25
   16f1c:	00016f31 	.word	0x00016f31
   16f20:	00016f25 	.word	0x00016f25
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   16f24:	4b1d      	ldr	r3, [pc, #116]	; (16f9c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   16f26:	617b      	str	r3, [r7, #20]
			break;
   16f28:	e030      	b.n	16f8c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   16f2a:	4b1d      	ldr	r3, [pc, #116]	; (16fa0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   16f2c:	617b      	str	r3, [r7, #20]
			break;
   16f2e:	e02d      	b.n	16f8c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   16f30:	4b1c      	ldr	r3, [pc, #112]	; (16fa4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   16f32:	617b      	str	r3, [r7, #20]
			break;
   16f34:	e02a      	b.n	16f8c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   16f36:	79fb      	ldrb	r3, [r7, #7]
   16f38:	3b01      	subs	r3, #1
   16f3a:	2b0b      	cmp	r3, #11
   16f3c:	d825      	bhi.n	16f8a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   16f3e:	a201      	add	r2, pc, #4	; (adr r2, 16f44 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   16f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16f44:	00016f75 	.word	0x00016f75
   16f48:	00016f7b 	.word	0x00016f7b
   16f4c:	00016f75 	.word	0x00016f75
   16f50:	00016f81 	.word	0x00016f81
   16f54:	00016f75 	.word	0x00016f75
   16f58:	00016f81 	.word	0x00016f81
   16f5c:	00016f75 	.word	0x00016f75
   16f60:	00016f75 	.word	0x00016f75
   16f64:	00016f81 	.word	0x00016f81
   16f68:	00016f75 	.word	0x00016f75
   16f6c:	00016f81 	.word	0x00016f81
   16f70:	00016f75 	.word	0x00016f75
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   16f74:	4b09      	ldr	r3, [pc, #36]	; (16f9c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   16f76:	617b      	str	r3, [r7, #20]
			break;
   16f78:	e008      	b.n	16f8c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   16f7a:	4b0b      	ldr	r3, [pc, #44]	; (16fa8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   16f7c:	617b      	str	r3, [r7, #20]
			break;
   16f7e:	e005      	b.n	16f8c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   16f80:	4b08      	ldr	r3, [pc, #32]	; (16fa4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   16f82:	617b      	str	r3, [r7, #20]
			break;
   16f84:	e002      	b.n	16f8c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   16f86:	bf00      	nop
   16f88:	e000      	b.n	16f8c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   16f8a:	bf00      	nop
		}
	}

	return sec_in_month;
   16f8c:	697b      	ldr	r3, [r7, #20]
}
   16f8e:	4618      	mov	r0, r3
   16f90:	3718      	adds	r7, #24
   16f92:	46bd      	mov	sp, r7
   16f94:	bd80      	pop	{r7, pc}
   16f96:	bf00      	nop
   16f98:	00016ce5 	.word	0x00016ce5
   16f9c:	0028de80 	.word	0x0028de80
   16fa0:	00263b80 	.word	0x00263b80
   16fa4:	00278d00 	.word	0x00278d00
   16fa8:	0024ea00 	.word	0x0024ea00

00016fac <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   16fac:	b580      	push	{r7, lr}
   16fae:	b082      	sub	sp, #8
   16fb0:	af00      	add	r7, sp, #0
   16fb2:	6078      	str	r0, [r7, #4]
   16fb4:	6039      	str	r1, [r7, #0]
   16fb6:	687b      	ldr	r3, [r7, #4]
   16fb8:	2b01      	cmp	r3, #1
   16fba:	d10d      	bne.n	16fd8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   16fbc:	683b      	ldr	r3, [r7, #0]
   16fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16fc2:	4293      	cmp	r3, r2
   16fc4:	d108      	bne.n	16fd8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   16fc6:	4906      	ldr	r1, [pc, #24]	; (16fe0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   16fc8:	4806      	ldr	r0, [pc, #24]	; (16fe4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   16fca:	4b07      	ldr	r3, [pc, #28]	; (16fe8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   16fcc:	4798      	blx	r3
   16fce:	4a07      	ldr	r2, [pc, #28]	; (16fec <_Z41__static_initialization_and_destruction_0ii+0x40>)
   16fd0:	4907      	ldr	r1, [pc, #28]	; (16ff0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   16fd2:	4804      	ldr	r0, [pc, #16]	; (16fe4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   16fd4:	4b07      	ldr	r3, [pc, #28]	; (16ff4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   16fd6:	4798      	blx	r3
   16fd8:	bf00      	nop
   16fda:	3708      	adds	r7, #8
   16fdc:	46bd      	mov	sp, r7
   16fde:	bd80      	pop	{r7, pc}
   16fe0:	2000ab48 	.word	0x2000ab48
   16fe4:	2000a278 	.word	0x2000a278
   16fe8:	000168f5 	.word	0x000168f5
   16fec:	20000000 	.word	0x20000000
   16ff0:	00016931 	.word	0x00016931
   16ff4:	0001949d 	.word	0x0001949d

00016ff8 <_GLOBAL__sub_I_ptrCalendarClass>:
   16ff8:	b580      	push	{r7, lr}
   16ffa:	af00      	add	r7, sp, #0
   16ffc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17000:	2001      	movs	r0, #1
   17002:	4b01      	ldr	r3, [pc, #4]	; (17008 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   17004:	4798      	blx	r3
   17006:	bd80      	pop	{r7, pc}
   17008:	00016fad 	.word	0x00016fad

0001700c <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   1700c:	b480      	push	{r7}
   1700e:	b083      	sub	sp, #12
   17010:	af00      	add	r7, sp, #0
   17012:	6078      	str	r0, [r7, #4]
   17014:	4a04      	ldr	r2, [pc, #16]	; (17028 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   17016:	687b      	ldr	r3, [r7, #4]
   17018:	601a      	str	r2, [r3, #0]
{
} //~D
   1701a:	687b      	ldr	r3, [r7, #4]
   1701c:	4618      	mov	r0, r3
   1701e:	370c      	adds	r7, #12
   17020:	46bd      	mov	sp, r7
   17022:	bc80      	pop	{r7}
   17024:	4770      	bx	lr
   17026:	bf00      	nop
   17028:	000217a0 	.word	0x000217a0

0001702c <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   1702c:	b480      	push	{r7}
   1702e:	b083      	sub	sp, #12
   17030:	af00      	add	r7, sp, #0
   17032:	6078      	str	r0, [r7, #4]
   17034:	4a04      	ldr	r2, [pc, #16]	; (17048 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   17036:	687b      	ldr	r3, [r7, #4]
   17038:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   1703a:	687b      	ldr	r3, [r7, #4]
   1703c:	4618      	mov	r0, r3
   1703e:	370c      	adds	r7, #12
   17040:	46bd      	mov	sp, r7
   17042:	bc80      	pop	{r7}
   17044:	4770      	bx	lr
   17046:	bf00      	nop
   17048:	000217a0 	.word	0x000217a0

0001704c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv>:

tick_t	DateTimeLog_Class::GetPowerInterrupTime(void){
   1704c:	b590      	push	{r4, r7, lr}
   1704e:	b085      	sub	sp, #20
   17050:	af00      	add	r7, sp, #0
   17052:	6078      	str	r0, [r7, #4]

	GetDateTime(&dateTime);
   17054:	687b      	ldr	r3, [r7, #4]
   17056:	681b      	ldr	r3, [r3, #0]
   17058:	681b      	ldr	r3, [r3, #0]
   1705a:	687a      	ldr	r2, [r7, #4]
   1705c:	3226      	adds	r2, #38	; 0x26
   1705e:	4611      	mov	r1, r2
   17060:	6878      	ldr	r0, [r7, #4]
   17062:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&dateTime);
   17064:	687b      	ldr	r3, [r7, #4]
   17066:	681b      	ldr	r3, [r3, #0]
   17068:	3304      	adds	r3, #4
   1706a:	681b      	ldr	r3, [r3, #0]
   1706c:	687a      	ldr	r2, [r7, #4]
   1706e:	3226      	adds	r2, #38	; 0x26
   17070:	4611      	mov	r1, r2
   17072:	6878      	ldr	r0, [r7, #4]
   17074:	4798      	blx	r3
   17076:	4602      	mov	r2, r0
   17078:	687b      	ldr	r3, [r7, #4]
   1707a:	609a      	str	r2, [r3, #8]
	ReadLastDateTime();
   1707c:	6878      	ldr	r0, [r7, #4]
   1707e:	4b1a      	ldr	r3, [pc, #104]	; (170e8 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x9c>)
   17080:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   17082:	687b      	ldr	r3, [r7, #4]
   17084:	681b      	ldr	r3, [r3, #0]
   17086:	3304      	adds	r3, #4
   17088:	681b      	ldr	r3, [r3, #0]
   1708a:	687a      	ldr	r2, [r7, #4]
   1708c:	322e      	adds	r2, #46	; 0x2e
   1708e:	4611      	mov	r1, r2
   17090:	6878      	ldr	r0, [r7, #4]
   17092:	4798      	blx	r3
   17094:	4602      	mov	r2, r0
   17096:	687b      	ldr	r3, [r7, #4]
   17098:	60da      	str	r2, [r3, #12]
	tick_t diferencia;
	if (lastTimestamp==calendar.nullTimestamp)
   1709a:	687b      	ldr	r3, [r7, #4]
   1709c:	68da      	ldr	r2, [r3, #12]
   1709e:	4b13      	ldr	r3, [pc, #76]	; (170ec <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa0>)
   170a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   170a2:	429a      	cmp	r2, r3
   170a4:	d103      	bne.n	170ae <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x62>
	{
		diferencia=UPDATE_TIME_MAX*2;
   170a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   170aa:	60fb      	str	r3, [r7, #12]
   170ac:	e016      	b.n	170dc <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x90>
	} 
	else
	{
		timeDifference=difftime((time_t)currentTimestamp,(time_t)lastTimestamp);
   170ae:	687b      	ldr	r3, [r7, #4]
   170b0:	689b      	ldr	r3, [r3, #8]
   170b2:	461a      	mov	r2, r3
   170b4:	687b      	ldr	r3, [r7, #4]
   170b6:	68db      	ldr	r3, [r3, #12]
   170b8:	4619      	mov	r1, r3
   170ba:	4610      	mov	r0, r2
   170bc:	4b0c      	ldr	r3, [pc, #48]	; (170f0 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa4>)
   170be:	4798      	blx	r3
   170c0:	4603      	mov	r3, r0
   170c2:	460c      	mov	r4, r1
   170c4:	687a      	ldr	r2, [r7, #4]
   170c6:	e9c2 3406 	strd	r3, r4, [r2, #24]
		diferencia=(uint32_t)timeDifference;
   170ca:	687b      	ldr	r3, [r7, #4]
   170cc:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
   170d0:	4a08      	ldr	r2, [pc, #32]	; (170f4 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa8>)
   170d2:	4618      	mov	r0, r3
   170d4:	4621      	mov	r1, r4
   170d6:	4790      	blx	r2
   170d8:	4603      	mov	r3, r0
   170da:	60fb      	str	r3, [r7, #12]
	}

	return	diferencia;
   170dc:	68fb      	ldr	r3, [r7, #12]
}
   170de:	4618      	mov	r0, r3
   170e0:	3714      	adds	r7, #20
   170e2:	46bd      	mov	sp, r7
   170e4:	bd90      	pop	{r4, r7, pc}
   170e6:	bf00      	nop
   170e8:	000172e1 	.word	0x000172e1
   170ec:	2000a278 	.word	0x2000a278
   170f0:	0001b939 	.word	0x0001b939
   170f4:	0001afe5 	.word	0x0001afe5

000170f8 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    abs(_Tp __x)
   170f8:	b5b0      	push	{r4, r5, r7, lr}
   170fa:	b082      	sub	sp, #8
   170fc:	af00      	add	r7, sp, #0
   170fe:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
   17100:	4b07      	ldr	r3, [pc, #28]	; (17120 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
   17102:	6878      	ldr	r0, [r7, #4]
   17104:	4798      	blx	r3
   17106:	4602      	mov	r2, r0
   17108:	460b      	mov	r3, r1
   1710a:	4614      	mov	r4, r2
   1710c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   17110:	4623      	mov	r3, r4
   17112:	462c      	mov	r4, r5
   17114:	4618      	mov	r0, r3
   17116:	4621      	mov	r1, r4
   17118:	3708      	adds	r7, #8
   1711a:	46bd      	mov	sp, r7
   1711c:	bdb0      	pop	{r4, r5, r7, pc}
   1711e:	bf00      	nop
   17120:	0001a9b9 	.word	0x0001a9b9

00017124 <_ZN17DateTimeLog_Class14WasInterruptedEv>:

bool	DateTimeLog_Class::WasInterrupted(void){
   17124:	b5b0      	push	{r4, r5, r7, lr}
   17126:	b082      	sub	sp, #8
   17128:	af00      	add	r7, sp, #0
   1712a:	6078      	str	r0, [r7, #4]
	
	if (abs(GetPowerInterrupTime()-UPDATE_TIME_MAX)>UPDATE_ERROR)
   1712c:	6878      	ldr	r0, [r7, #4]
   1712e:	4b12      	ldr	r3, [pc, #72]	; (17178 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x54>)
   17130:	4798      	blx	r3
   17132:	4603      	mov	r3, r0
   17134:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   17138:	4618      	mov	r0, r3
   1713a:	4b10      	ldr	r3, [pc, #64]	; (1717c <_ZN17DateTimeLog_Class14WasInterruptedEv+0x58>)
   1713c:	4798      	blx	r3
   1713e:	2301      	movs	r3, #1
   17140:	461d      	mov	r5, r3
   17142:	4c0f      	ldr	r4, [pc, #60]	; (17180 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x5c>)
   17144:	f04f 0200 	mov.w	r2, #0
   17148:	4b0e      	ldr	r3, [pc, #56]	; (17184 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x60>)
   1714a:	47a0      	blx	r4
   1714c:	4603      	mov	r3, r0
   1714e:	2b00      	cmp	r3, #0
   17150:	d101      	bne.n	17156 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x32>
   17152:	2300      	movs	r3, #0
   17154:	461d      	mov	r5, r3
   17156:	b2eb      	uxtb	r3, r5
   17158:	2b00      	cmp	r3, #0
   1715a:	d003      	beq.n	17164 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x40>
	{
		powerInterrupt=true;
   1715c:	687b      	ldr	r3, [r7, #4]
   1715e:	2201      	movs	r2, #1
   17160:	711a      	strb	r2, [r3, #4]
   17162:	e002      	b.n	1716a <_ZN17DateTimeLog_Class14WasInterruptedEv+0x46>
	} 
	else
	{
		powerInterrupt=false;
   17164:	687b      	ldr	r3, [r7, #4]
   17166:	2200      	movs	r2, #0
   17168:	711a      	strb	r2, [r3, #4]
	}
	return	powerInterrupt;
   1716a:	687b      	ldr	r3, [r7, #4]
   1716c:	791b      	ldrb	r3, [r3, #4]
   1716e:	b2db      	uxtb	r3, r3
}
   17170:	4618      	mov	r0, r3
   17172:	3708      	adds	r7, #8
   17174:	46bd      	mov	sp, r7
   17176:	bdb0      	pop	{r4, r5, r7, pc}
   17178:	0001704d 	.word	0x0001704d
   1717c:	000170f9 	.word	0x000170f9
   17180:	0001afa5 	.word	0x0001afa5
   17184:	40490000 	.word	0x40490000

00017188 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv>:

uint32_t	DateTimeLog_Class::IncrementMemoryStack(){
   17188:	b590      	push	{r4, r7, lr}
   1718a:	b085      	sub	sp, #20
   1718c:	af00      	add	r7, sp, #0
   1718e:	6078      	str	r0, [r7, #4]
	
	uint32_t r=	eeprom.ReadAddress((uint8_t*)&stackValue,stackAdress,1);
   17190:	687b      	ldr	r3, [r7, #4]
   17192:	f103 0122 	add.w	r1, r3, #34	; 0x22
   17196:	687b      	ldr	r3, [r7, #4]
   17198:	8c1a      	ldrh	r2, [r3, #32]
   1719a:	2301      	movs	r3, #1
   1719c:	480c      	ldr	r0, [pc, #48]	; (171d0 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   1719e:	4c0d      	ldr	r4, [pc, #52]	; (171d4 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x4c>)
   171a0:	47a0      	blx	r4
   171a2:	60f8      	str	r0, [r7, #12]
	stackValue=(uint16_t)RollStack();
   171a4:	6878      	ldr	r0, [r7, #4]
   171a6:	4b0c      	ldr	r3, [pc, #48]	; (171d8 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x50>)
   171a8:	4798      	blx	r3
   171aa:	4603      	mov	r3, r0
   171ac:	b29a      	uxth	r2, r3
   171ae:	687b      	ldr	r3, [r7, #4]
   171b0:	845a      	strh	r2, [r3, #34]	; 0x22
	r=	eeprom.WriteAddress((uint8_t*)&stackValue,stackAdress,1);
   171b2:	687b      	ldr	r3, [r7, #4]
   171b4:	f103 0122 	add.w	r1, r3, #34	; 0x22
   171b8:	687b      	ldr	r3, [r7, #4]
   171ba:	8c1a      	ldrh	r2, [r3, #32]
   171bc:	2301      	movs	r3, #1
   171be:	4804      	ldr	r0, [pc, #16]	; (171d0 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   171c0:	4c06      	ldr	r4, [pc, #24]	; (171dc <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x54>)
   171c2:	47a0      	blx	r4
   171c4:	60f8      	str	r0, [r7, #12]
	return r;
   171c6:	68fb      	ldr	r3, [r7, #12]
}
   171c8:	4618      	mov	r0, r3
   171ca:	3714      	adds	r7, #20
   171cc:	46bd      	mov	sp, r7
   171ce:	bd90      	pop	{r4, r7, pc}
   171d0:	20009ff4 	.word	0x20009ff4
   171d4:	00015ded 	.word	0x00015ded
   171d8:	000171e1 	.word	0x000171e1
   171dc:	00015d31 	.word	0x00015d31

000171e0 <_ZN17DateTimeLog_Class9RollStackEv>:
 uint8_t DateTimeLog_Class::RollStack(void)
 {
   171e0:	b480      	push	{r7}
   171e2:	b083      	sub	sp, #12
   171e4:	af00      	add	r7, sp, #0
   171e6:	6078      	str	r0, [r7, #4]
	 return (uint8_t)(stackValue +1 ) % AT24MAC_BUFFER_SIZE;
   171e8:	687b      	ldr	r3, [r7, #4]
   171ea:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   171ec:	b2db      	uxtb	r3, r3
   171ee:	3301      	adds	r3, #1
   171f0:	b2db      	uxtb	r3, r3
   171f2:	f003 030f 	and.w	r3, r3, #15
   171f6:	b2db      	uxtb	r3, r3
 }
   171f8:	4618      	mov	r0, r3
   171fa:	370c      	adds	r7, #12
   171fc:	46bd      	mov	sp, r7
   171fe:	bc80      	pop	{r7}
   17200:	4770      	bx	lr
	...

00017204 <_ZN17DateTimeLog_Class14ReadStackValueEv>:
 
 uint8_t	DateTimeLog_Class::ReadStackValue(void){
   17204:	b590      	push	{r4, r7, lr}
   17206:	b085      	sub	sp, #20
   17208:	af00      	add	r7, sp, #0
   1720a:	6078      	str	r0, [r7, #4]
	 uint8_t s;
	eeprom.ReadAddress(&s,stackAdress,1);
   1720c:	687b      	ldr	r3, [r7, #4]
   1720e:	8c1a      	ldrh	r2, [r3, #32]
   17210:	f107 010f 	add.w	r1, r7, #15
   17214:	2301      	movs	r3, #1
   17216:	4804      	ldr	r0, [pc, #16]	; (17228 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x24>)
   17218:	4c04      	ldr	r4, [pc, #16]	; (1722c <_ZN17DateTimeLog_Class14ReadStackValueEv+0x28>)
   1721a:	47a0      	blx	r4
	 return	s;
   1721c:	7bfb      	ldrb	r3, [r7, #15]
 }
   1721e:	4618      	mov	r0, r3
   17220:	3714      	adds	r7, #20
   17222:	46bd      	mov	sp, r7
   17224:	bd90      	pop	{r4, r7, pc}
   17226:	bf00      	nop
   17228:	20009ff4 	.word	0x20009ff4
   1722c:	00015ded 	.word	0x00015ded

00017230 <_ZN17DateTimeLog_Class23SetCalendarStackAddressEm>:
 
 uint16_t	DateTimeLog_Class::SetCalendarStackAddress(uint32_t add){
   17230:	b480      	push	{r7}
   17232:	b083      	sub	sp, #12
   17234:	af00      	add	r7, sp, #0
   17236:	6078      	str	r0, [r7, #4]
   17238:	6039      	str	r1, [r7, #0]
	 stackAdress=(uint16_t)(add&0xffff);
   1723a:	683b      	ldr	r3, [r7, #0]
   1723c:	b29a      	uxth	r2, r3
   1723e:	687b      	ldr	r3, [r7, #4]
   17240:	841a      	strh	r2, [r3, #32]
	 return	stackAdress;
   17242:	687b      	ldr	r3, [r7, #4]
   17244:	8c1b      	ldrh	r3, [r3, #32]
 }
   17246:	4618      	mov	r0, r3
   17248:	370c      	adds	r7, #12
   1724a:	46bd      	mov	sp, r7
   1724c:	bc80      	pop	{r7}
   1724e:	4770      	bx	lr

00017250 <_ZN17DateTimeLog_Class18SetCalendarAddressEm>:
uint16_t	DateTimeLog_Class::SetCalendarAddress(uint32_t add){
   17250:	b480      	push	{r7}
   17252:	b083      	sub	sp, #12
   17254:	af00      	add	r7, sp, #0
   17256:	6078      	str	r0, [r7, #4]
   17258:	6039      	str	r1, [r7, #0]
	dataTimeLogsAddress=(uint16_t)(add&0xffff);
   1725a:	683b      	ldr	r3, [r7, #0]
   1725c:	b29a      	uxth	r2, r3
   1725e:	687b      	ldr	r3, [r7, #4]
   17260:	849a      	strh	r2, [r3, #36]	; 0x24
	return	dataTimeLogsAddress;
   17262:	687b      	ldr	r3, [r7, #4]
   17264:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
   17266:	4618      	mov	r0, r3
   17268:	370c      	adds	r7, #12
   1726a:	46bd      	mov	sp, r7
   1726c:	bc80      	pop	{r7}
   1726e:	4770      	bx	lr

00017270 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv>:
uint32_t	DateTimeLog_Class::SaveCurrentDateTime(void){
   17270:	b590      	push	{r4, r7, lr}
   17272:	b085      	sub	sp, #20
   17274:	af00      	add	r7, sp, #0
   17276:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   17278:	6878      	ldr	r0, [r7, #4]
   1727a:	4b15      	ldr	r3, [pc, #84]	; (172d0 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x60>)
   1727c:	4798      	blx	r3
   1727e:	4603      	mov	r3, r0
   17280:	b29a      	uxth	r2, r3
   17282:	687b      	ldr	r3, [r7, #4]
   17284:	845a      	strh	r2, [r3, #34]	; 0x22
	GetDateTime(&dateTime);
   17286:	687b      	ldr	r3, [r7, #4]
   17288:	681b      	ldr	r3, [r3, #0]
   1728a:	681b      	ldr	r3, [r3, #0]
   1728c:	687a      	ldr	r2, [r7, #4]
   1728e:	3226      	adds	r2, #38	; 0x26
   17290:	4611      	mov	r1, r2
   17292:	6878      	ldr	r0, [r7, #4]
   17294:	4798      	blx	r3
	handler=(PTR_DATE_TIME)(&dateTime);
   17296:	687b      	ldr	r3, [r7, #4]
   17298:	3326      	adds	r3, #38	; 0x26
   1729a:	461a      	mov	r2, r3
   1729c:	687b      	ldr	r3, [r7, #4]
   1729e:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t	w= eeprom.WriteAddress((uint8_t*)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   172a0:	687b      	ldr	r3, [r7, #4]
   172a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
   172a4:	687b      	ldr	r3, [r7, #4]
   172a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   172a8:	b2da      	uxtb	r2, r3
   172aa:	687b      	ldr	r3, [r7, #4]
   172ac:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   172ae:	b2db      	uxtb	r3, r3
   172b0:	4413      	add	r3, r2
   172b2:	b2da      	uxtb	r2, r3
   172b4:	2308      	movs	r3, #8
   172b6:	4807      	ldr	r0, [pc, #28]	; (172d4 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x64>)
   172b8:	4c07      	ldr	r4, [pc, #28]	; (172d8 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x68>)
   172ba:	47a0      	blx	r4
   172bc:	60f8      	str	r0, [r7, #12]
	IncrementMemoryStack();
   172be:	6878      	ldr	r0, [r7, #4]
   172c0:	4b06      	ldr	r3, [pc, #24]	; (172dc <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x6c>)
   172c2:	4798      	blx	r3
	return	w;
   172c4:	68fb      	ldr	r3, [r7, #12]
}
   172c6:	4618      	mov	r0, r3
   172c8:	3714      	adds	r7, #20
   172ca:	46bd      	mov	sp, r7
   172cc:	bd90      	pop	{r4, r7, pc}
   172ce:	bf00      	nop
   172d0:	00017205 	.word	0x00017205
   172d4:	20009ff4 	.word	0x20009ff4
   172d8:	00015bd1 	.word	0x00015bd1
   172dc:	00017189 	.word	0x00017189

000172e0 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv>:

uint32_t	DateTimeLog_Class::ReadLastDateTime(void){
   172e0:	b590      	push	{r4, r7, lr}
   172e2:	b085      	sub	sp, #20
   172e4:	af00      	add	r7, sp, #0
   172e6:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   172e8:	6878      	ldr	r0, [r7, #4]
   172ea:	4b0f      	ldr	r3, [pc, #60]	; (17328 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x48>)
   172ec:	4798      	blx	r3
   172ee:	4603      	mov	r3, r0
   172f0:	b29a      	uxth	r2, r3
   172f2:	687b      	ldr	r3, [r7, #4]
   172f4:	845a      	strh	r2, [r3, #34]	; 0x22
	handler=(PTR_DATE_TIME)(&lastDateTime);
   172f6:	687b      	ldr	r3, [r7, #4]
   172f8:	332e      	adds	r3, #46	; 0x2e
   172fa:	461a      	mov	r2, r3
   172fc:	687b      	ldr	r3, [r7, #4]
   172fe:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t r=	eeprom.ReadAddress((uint8_t *)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   17300:	687b      	ldr	r3, [r7, #4]
   17302:	6b99      	ldr	r1, [r3, #56]	; 0x38
   17304:	687b      	ldr	r3, [r7, #4]
   17306:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   17308:	b2da      	uxtb	r2, r3
   1730a:	687b      	ldr	r3, [r7, #4]
   1730c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   1730e:	b2db      	uxtb	r3, r3
   17310:	4413      	add	r3, r2
   17312:	b2da      	uxtb	r2, r3
   17314:	2308      	movs	r3, #8
   17316:	4805      	ldr	r0, [pc, #20]	; (1732c <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x4c>)
   17318:	4c05      	ldr	r4, [pc, #20]	; (17330 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x50>)
   1731a:	47a0      	blx	r4
   1731c:	60f8      	str	r0, [r7, #12]
	return	r;
   1731e:	68fb      	ldr	r3, [r7, #12]
}
   17320:	4618      	mov	r0, r3
   17322:	3714      	adds	r7, #20
   17324:	46bd      	mov	sp, r7
   17326:	bd90      	pop	{r4, r7, pc}
   17328:	00017205 	.word	0x00017205
   1732c:	20009ff4 	.word	0x20009ff4
   17330:	00015d65 	.word	0x00015d65

00017334 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   17334:	b480      	push	{r7}
   17336:	b083      	sub	sp, #12
   17338:	af00      	add	r7, sp, #0
   1733a:	6078      	str	r0, [r7, #4]
   1733c:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   1733e:	687b      	ldr	r3, [r7, #4]
   17340:	683a      	ldr	r2, [r7, #0]
   17342:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
   17344:	4a06      	ldr	r2, [pc, #24]	; (17360 <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
   17346:	687b      	ldr	r3, [r7, #4]
   17348:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   1734a:	687b      	ldr	r3, [r7, #4]
   1734c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17350:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   17352:	687b      	ldr	r3, [r7, #4]
   17354:	4618      	mov	r0, r3
   17356:	370c      	adds	r7, #12
   17358:	46bd      	mov	sp, r7
   1735a:	bc80      	pop	{r7}
   1735c:	4770      	bx	lr
   1735e:	bf00      	nop
   17360:	2000a320 	.word	0x2000a320

00017364 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   17364:	b480      	push	{r7}
   17366:	b083      	sub	sp, #12
   17368:	af00      	add	r7, sp, #0
   1736a:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   1736c:	687b      	ldr	r3, [r7, #4]
   1736e:	2200      	movs	r2, #0
   17370:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   17372:	687b      	ldr	r3, [r7, #4]
   17374:	4618      	mov	r0, r3
   17376:	370c      	adds	r7, #12
   17378:	46bd      	mov	sp, r7
   1737a:	bc80      	pop	{r7}
   1737c:	4770      	bx	lr
	...

00017380 <_ZL9InitArrayv>:


static void InitArray(){
   17380:	b480      	push	{r7}
   17382:	b083      	sub	sp, #12
   17384:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
   17386:	2301      	movs	r3, #1
   17388:	607b      	str	r3, [r7, #4]
   1738a:	687b      	ldr	r3, [r7, #4]
   1738c:	2b0f      	cmp	r3, #15
   1738e:	dc26      	bgt.n	173de <_ZL9InitArrayv+0x5e>
	{
		taskArray[i].elem.next = (list_element*)NULL;
   17390:	4917      	ldr	r1, [pc, #92]	; (173f0 <_ZL9InitArrayv+0x70>)
   17392:	687a      	ldr	r2, [r7, #4]
   17394:	4613      	mov	r3, r2
   17396:	009b      	lsls	r3, r3, #2
   17398:	4413      	add	r3, r2
   1739a:	009b      	lsls	r3, r3, #2
   1739c:	440b      	add	r3, r1
   1739e:	2200      	movs	r2, #0
   173a0:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
   173a2:	4913      	ldr	r1, [pc, #76]	; (173f0 <_ZL9InitArrayv+0x70>)
   173a4:	687a      	ldr	r2, [r7, #4]
   173a6:	4613      	mov	r3, r2
   173a8:	009b      	lsls	r3, r3, #2
   173aa:	4413      	add	r3, r2
   173ac:	009b      	lsls	r3, r3, #2
   173ae:	440b      	add	r3, r1
   173b0:	330c      	adds	r3, #12
   173b2:	2200      	movs	r2, #0
   173b4:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
   173b6:	687b      	ldr	r3, [r7, #4]
   173b8:	1e5a      	subs	r2, r3, #1
   173ba:	6879      	ldr	r1, [r7, #4]
   173bc:	460b      	mov	r3, r1
   173be:	009b      	lsls	r3, r3, #2
   173c0:	440b      	add	r3, r1
   173c2:	009b      	lsls	r3, r3, #2
   173c4:	490a      	ldr	r1, [pc, #40]	; (173f0 <_ZL9InitArrayv+0x70>)
   173c6:	4419      	add	r1, r3
   173c8:	4809      	ldr	r0, [pc, #36]	; (173f0 <_ZL9InitArrayv+0x70>)
   173ca:	4613      	mov	r3, r2
   173cc:	009b      	lsls	r3, r3, #2
   173ce:	4413      	add	r3, r2
   173d0:	009b      	lsls	r3, r3, #2
   173d2:	4403      	add	r3, r0
   173d4:	6019      	str	r1, [r3, #0]
	for (int i=1; i<TASK_NUMBER	; i++)
   173d6:	687b      	ldr	r3, [r7, #4]
   173d8:	3301      	adds	r3, #1
   173da:	607b      	str	r3, [r7, #4]
   173dc:	e7d5      	b.n	1738a <_ZL9InitArrayv+0xa>
	}
	arrayInitiated=true;
   173de:	4b05      	ldr	r3, [pc, #20]	; (173f4 <_ZL9InitArrayv+0x74>)
   173e0:	2201      	movs	r2, #1
   173e2:	701a      	strb	r2, [r3, #0]
		
}
   173e4:	bf00      	nop
   173e6:	370c      	adds	r7, #12
   173e8:	46bd      	mov	sp, r7
   173ea:	bc80      	pop	{r7}
   173ec:	4770      	bx	lr
   173ee:	bf00      	nop
   173f0:	2000a324 	.word	0x2000a324
   173f4:	2000a464 	.word	0x2000a464

000173f8 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
   173f8:	b580      	push	{r7, lr}
   173fa:	b082      	sub	sp, #8
   173fc:	af00      	add	r7, sp, #0
   173fe:	6078      	str	r0, [r7, #4]
	ticks=0;
   17400:	687b      	ldr	r3, [r7, #4]
   17402:	2200      	movs	r2, #0
   17404:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
   17406:	4b0d      	ldr	r3, [pc, #52]	; (1743c <_ZN11Timer_Class4InitEv+0x44>)
   17408:	781b      	ldrb	r3, [r3, #0]
   1740a:	f083 0301 	eor.w	r3, r3, #1
   1740e:	b2db      	uxtb	r3, r3
   17410:	2b00      	cmp	r3, #0
   17412:	d001      	beq.n	17418 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
   17414:	4b0a      	ldr	r3, [pc, #40]	; (17440 <_ZN11Timer_Class4InitEv+0x48>)
   17416:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=start()==ERR_NONE;
   17418:	6878      	ldr	r0, [r7, #4]
   1741a:	4b0a      	ldr	r3, [pc, #40]	; (17444 <_ZN11Timer_Class4InitEv+0x4c>)
   1741c:	4798      	blx	r3
   1741e:	4603      	mov	r3, r0
   17420:	2b00      	cmp	r3, #0
   17422:	bf0c      	ite	eq
   17424:	2301      	moveq	r3, #1
   17426:	2300      	movne	r3, #0
   17428:	b2da      	uxtb	r2, r3
   1742a:	687b      	ldr	r3, [r7, #4]
   1742c:	709a      	strb	r2, [r3, #2]
	return isOK;
   1742e:	687b      	ldr	r3, [r7, #4]
   17430:	789b      	ldrb	r3, [r3, #2]
   17432:	b2db      	uxtb	r3, r3
}
   17434:	4618      	mov	r0, r3
   17436:	3708      	adds	r7, #8
   17438:	46bd      	mov	sp, r7
   1743a:	bd80      	pop	{r7, pc}
   1743c:	2000a464 	.word	0x2000a464
   17440:	00017381 	.word	0x00017381
   17444:	00017449 	.word	0x00017449

00017448 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
   17448:	b580      	push	{r7, lr}
   1744a:	b084      	sub	sp, #16
   1744c:	af00      	add	r7, sp, #0
   1744e:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   17450:	687b      	ldr	r3, [r7, #4]
   17452:	68db      	ldr	r3, [r3, #12]
   17454:	4618      	mov	r0, r3
   17456:	4b04      	ldr	r3, [pc, #16]	; (17468 <_ZN11Timer_Class5startEv+0x20>)
   17458:	4798      	blx	r3
   1745a:	60f8      	str	r0, [r7, #12]
	return status;
   1745c:	68fb      	ldr	r3, [r7, #12]
	
}
   1745e:	4618      	mov	r0, r3
   17460:	3710      	adds	r7, #16
   17462:	46bd      	mov	sp, r7
   17464:	bd80      	pop	{r7, pc}
   17466:	bf00      	nop
   17468:	00006fc5 	.word	0x00006fc5

0001746c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   1746c:	b580      	push	{r7, lr}
   1746e:	b086      	sub	sp, #24
   17470:	af00      	add	r7, sp, #0
   17472:	60f8      	str	r0, [r7, #12]
   17474:	60b9      	str	r1, [r7, #8]
   17476:	607a      	str	r2, [r7, #4]
   17478:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   1747a:	68f8      	ldr	r0, [r7, #12]
   1747c:	4b0d      	ldr	r3, [pc, #52]	; (174b4 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   1747e:	4798      	blx	r3
	task->interval = interval;
   17480:	68fb      	ldr	r3, [r7, #12]
   17482:	699b      	ldr	r3, [r3, #24]
   17484:	687a      	ldr	r2, [r7, #4]
   17486:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   17488:	68fb      	ldr	r3, [r7, #12]
   1748a:	699b      	ldr	r3, [r3, #24]
   1748c:	68ba      	ldr	r2, [r7, #8]
   1748e:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   17490:	68fb      	ldr	r3, [r7, #12]
   17492:	699b      	ldr	r3, [r3, #24]
   17494:	78fa      	ldrb	r2, [r7, #3]
   17496:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   17498:	68fb      	ldr	r3, [r7, #12]
   1749a:	68da      	ldr	r2, [r3, #12]
   1749c:	68fb      	ldr	r3, [r7, #12]
   1749e:	699b      	ldr	r3, [r3, #24]
   174a0:	4619      	mov	r1, r3
   174a2:	4610      	mov	r0, r2
   174a4:	4b04      	ldr	r3, [pc, #16]	; (174b8 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   174a6:	4798      	blx	r3
   174a8:	6178      	str	r0, [r7, #20]
	
	return status;
   174aa:	697b      	ldr	r3, [r7, #20]
}
   174ac:	4618      	mov	r0, r3
   174ae:	3718      	adds	r7, #24
   174b0:	46bd      	mov	sp, r7
   174b2:	bd80      	pop	{r7, pc}
   174b4:	000175f1 	.word	0x000175f1
   174b8:	00007099 	.word	0x00007099

000174bc <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
   174bc:	b580      	push	{r7, lr}
   174be:	b086      	sub	sp, #24
   174c0:	af00      	add	r7, sp, #0
   174c2:	60f8      	str	r0, [r7, #12]
   174c4:	60b9      	str	r1, [r7, #8]
   174c6:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
   174c8:	687a      	ldr	r2, [r7, #4]
   174ca:	68b9      	ldr	r1, [r7, #8]
   174cc:	68f8      	ldr	r0, [r7, #12]
   174ce:	4b0c      	ldr	r3, [pc, #48]	; (17500 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
   174d0:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
   174d2:	68fb      	ldr	r3, [r7, #12]
   174d4:	68db      	ldr	r3, [r3, #12]
   174d6:	681b      	ldr	r3, [r3, #0]
   174d8:	699b      	ldr	r3, [r3, #24]
   174da:	68fa      	ldr	r2, [r7, #12]
   174dc:	68d2      	ldr	r2, [r2, #12]
   174de:	3204      	adds	r2, #4
   174e0:	4610      	mov	r0, r2
   174e2:	4798      	blx	r3
   174e4:	4603      	mov	r3, r0
   174e6:	2b00      	cmp	r3, #0
   174e8:	d105      	bne.n	174f6 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
   174ea:	68fb      	ldr	r3, [r7, #12]
   174ec:	68db      	ldr	r3, [r3, #12]
   174ee:	4618      	mov	r0, r3
   174f0:	4b04      	ldr	r3, [pc, #16]	; (17504 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
   174f2:	4798      	blx	r3
   174f4:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
   174f6:	697b      	ldr	r3, [r7, #20]
}
   174f8:	4618      	mov	r0, r3
   174fa:	3718      	adds	r7, #24
   174fc:	46bd      	mov	sp, r7
   174fe:	bd80      	pop	{r7, pc}
   17500:	00017509 	.word	0x00017509
   17504:	00006fc5 	.word	0x00006fc5

00017508 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   17508:	b590      	push	{r4, r7, lr}
   1750a:	b087      	sub	sp, #28
   1750c:	af00      	add	r7, sp, #0
   1750e:	60f8      	str	r0, [r7, #12]
   17510:	60b9      	str	r1, [r7, #8]
   17512:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   17514:	2301      	movs	r3, #1
   17516:	687a      	ldr	r2, [r7, #4]
   17518:	68b9      	ldr	r1, [r7, #8]
   1751a:	68f8      	ldr	r0, [r7, #12]
   1751c:	4c03      	ldr	r4, [pc, #12]	; (1752c <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
   1751e:	47a0      	blx	r4
   17520:	6178      	str	r0, [r7, #20]
		return status;
   17522:	697b      	ldr	r3, [r7, #20]
}
   17524:	4618      	mov	r0, r3
   17526:	371c      	adds	r7, #28
   17528:	46bd      	mov	sp, r7
   1752a:	bd90      	pop	{r4, r7, pc}
   1752c:	0001746d 	.word	0x0001746d

00017530 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
   17530:	b580      	push	{r7, lr}
   17532:	b082      	sub	sp, #8
   17534:	af00      	add	r7, sp, #0
   17536:	6078      	str	r0, [r7, #4]
   17538:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   1753a:	6839      	ldr	r1, [r7, #0]
   1753c:	6878      	ldr	r0, [r7, #4]
   1753e:	4b0f      	ldr	r3, [pc, #60]	; (1757c <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   17540:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   17542:	687b      	ldr	r3, [r7, #4]
   17544:	68db      	ldr	r3, [r3, #12]
   17546:	f103 0218 	add.w	r2, r3, #24
   1754a:	687b      	ldr	r3, [r7, #4]
   1754c:	699b      	ldr	r3, [r3, #24]
   1754e:	4619      	mov	r1, r3
   17550:	4610      	mov	r0, r2
   17552:	4b0b      	ldr	r3, [pc, #44]	; (17580 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   17554:	4798      	blx	r3
   17556:	4603      	mov	r3, r0
   17558:	2b00      	cmp	r3, #0
   1755a:	d007      	beq.n	1756c <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   1755c:	687b      	ldr	r3, [r7, #4]
   1755e:	68da      	ldr	r2, [r3, #12]
   17560:	687b      	ldr	r3, [r7, #4]
   17562:	699b      	ldr	r3, [r3, #24]
   17564:	4619      	mov	r1, r3
   17566:	4610      	mov	r0, r2
   17568:	4b06      	ldr	r3, [pc, #24]	; (17584 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   1756a:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   1756c:	687b      	ldr	r3, [r7, #4]
   1756e:	699b      	ldr	r3, [r3, #24]
   17570:	2200      	movs	r2, #0
   17572:	60da      	str	r2, [r3, #12]
}
   17574:	bf00      	nop
   17576:	3708      	adds	r7, #8
   17578:	46bd      	mov	sp, r7
   1757a:	bd80      	pop	{r7, pc}
   1757c:	00017651 	.word	0x00017651
   17580:	00007d85 	.word	0x00007d85
   17584:	0000719d 	.word	0x0000719d

00017588 <_ZN11Timer_Class9Get_ticksEv>:



uint32_t	Timer_Class::Get_ticks(void){
   17588:	b480      	push	{r7}
   1758a:	b083      	sub	sp, #12
   1758c:	af00      	add	r7, sp, #0
   1758e:	6078      	str	r0, [r7, #4]
	
		return ticks;
   17590:	687b      	ldr	r3, [r7, #4]
   17592:	689b      	ldr	r3, [r3, #8]
}
   17594:	4618      	mov	r0, r3
   17596:	370c      	adds	r7, #12
   17598:	46bd      	mov	sp, r7
   1759a:	bc80      	pop	{r7}
   1759c:	4770      	bx	lr
	...

000175a0 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   175a0:	b590      	push	{r4, r7, lr}
   175a2:	b087      	sub	sp, #28
   175a4:	af00      	add	r7, sp, #0
   175a6:	60f8      	str	r0, [r7, #12]
   175a8:	60b9      	str	r1, [r7, #8]
   175aa:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   175ac:	2300      	movs	r3, #0
   175ae:	687a      	ldr	r2, [r7, #4]
   175b0:	68b9      	ldr	r1, [r7, #8]
   175b2:	68f8      	ldr	r0, [r7, #12]
   175b4:	4c0c      	ldr	r4, [pc, #48]	; (175e8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
   175b6:	47a0      	blx	r4
   175b8:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
   175ba:	68fb      	ldr	r3, [r7, #12]
   175bc:	68db      	ldr	r3, [r3, #12]
   175be:	681b      	ldr	r3, [r3, #0]
   175c0:	699b      	ldr	r3, [r3, #24]
   175c2:	68fa      	ldr	r2, [r7, #12]
   175c4:	68d2      	ldr	r2, [r2, #12]
   175c6:	3204      	adds	r2, #4
   175c8:	4610      	mov	r0, r2
   175ca:	4798      	blx	r3
   175cc:	4603      	mov	r3, r0
   175ce:	2b00      	cmp	r3, #0
   175d0:	d105      	bne.n	175de <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
   175d2:	68fb      	ldr	r3, [r7, #12]
   175d4:	68db      	ldr	r3, [r3, #12]
   175d6:	4618      	mov	r0, r3
   175d8:	4b04      	ldr	r3, [pc, #16]	; (175ec <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
   175da:	4798      	blx	r3
   175dc:	6178      	str	r0, [r7, #20]
	}
	
	return status;
   175de:	697b      	ldr	r3, [r7, #20]
}
   175e0:	4618      	mov	r0, r3
   175e2:	371c      	adds	r7, #28
   175e4:	46bd      	mov	sp, r7
   175e6:	bd90      	pop	{r4, r7, pc}
   175e8:	0001746d 	.word	0x0001746d
   175ec:	00006fc5 	.word	0x00006fc5

000175f0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   175f0:	b480      	push	{r7}
   175f2:	b085      	sub	sp, #20
   175f4:	af00      	add	r7, sp, #0
   175f6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   175f8:	2300      	movs	r3, #0
   175fa:	73fb      	strb	r3, [r7, #15]
   175fc:	7bfb      	ldrb	r3, [r7, #15]
   175fe:	2b0f      	cmp	r3, #15
   17600:	dc1c      	bgt.n	1763c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
   17602:	7bfb      	ldrb	r3, [r7, #15]
   17604:	f003 030f 	and.w	r3, r3, #15
   17608:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
   1760a:	7bba      	ldrb	r2, [r7, #14]
   1760c:	490f      	ldr	r1, [pc, #60]	; (1764c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   1760e:	4613      	mov	r3, r2
   17610:	009b      	lsls	r3, r3, #2
   17612:	4413      	add	r3, r2
   17614:	009b      	lsls	r3, r3, #2
   17616:	440b      	add	r3, r1
   17618:	330c      	adds	r3, #12
   1761a:	681b      	ldr	r3, [r3, #0]
   1761c:	2b00      	cmp	r3, #0
   1761e:	d109      	bne.n	17634 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
   17620:	7bba      	ldrb	r2, [r7, #14]
   17622:	4613      	mov	r3, r2
   17624:	009b      	lsls	r3, r3, #2
   17626:	4413      	add	r3, r2
   17628:	009b      	lsls	r3, r3, #2
   1762a:	4a08      	ldr	r2, [pc, #32]	; (1764c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   1762c:	441a      	add	r2, r3
   1762e:	687b      	ldr	r3, [r7, #4]
   17630:	619a      	str	r2, [r3, #24]
			return;
   17632:	e006      	b.n	17642 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   17634:	7bfb      	ldrb	r3, [r7, #15]
   17636:	3301      	adds	r3, #1
   17638:	73fb      	strb	r3, [r7, #15]
   1763a:	e7df      	b.n	175fc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
   1763c:	687b      	ldr	r3, [r7, #4]
   1763e:	4a03      	ldr	r2, [pc, #12]	; (1764c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   17640:	619a      	str	r2, [r3, #24]

}
   17642:	3714      	adds	r7, #20
   17644:	46bd      	mov	sp, r7
   17646:	bc80      	pop	{r7}
   17648:	4770      	bx	lr
   1764a:	bf00      	nop
   1764c:	2000a324 	.word	0x2000a324

00017650 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   17650:	b480      	push	{r7}
   17652:	b085      	sub	sp, #20
   17654:	af00      	add	r7, sp, #0
   17656:	6078      	str	r0, [r7, #4]
   17658:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1765a:	2300      	movs	r3, #0
   1765c:	73fb      	strb	r3, [r7, #15]
   1765e:	7bfb      	ldrb	r3, [r7, #15]
   17660:	2b0f      	cmp	r3, #15
   17662:	dc19      	bgt.n	17698 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   17664:	7bfa      	ldrb	r2, [r7, #15]
   17666:	490f      	ldr	r1, [pc, #60]	; (176a4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   17668:	4613      	mov	r3, r2
   1766a:	009b      	lsls	r3, r3, #2
   1766c:	4413      	add	r3, r2
   1766e:	009b      	lsls	r3, r3, #2
   17670:	440b      	add	r3, r1
   17672:	330c      	adds	r3, #12
   17674:	681a      	ldr	r2, [r3, #0]
   17676:	683b      	ldr	r3, [r7, #0]
   17678:	429a      	cmp	r2, r3
   1767a:	d109      	bne.n	17690 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   1767c:	7bfa      	ldrb	r2, [r7, #15]
   1767e:	4613      	mov	r3, r2
   17680:	009b      	lsls	r3, r3, #2
   17682:	4413      	add	r3, r2
   17684:	009b      	lsls	r3, r3, #2
   17686:	4a07      	ldr	r2, [pc, #28]	; (176a4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   17688:	441a      	add	r2, r3
   1768a:	687b      	ldr	r3, [r7, #4]
   1768c:	619a      	str	r2, [r3, #24]
			return;
   1768e:	e004      	b.n	1769a <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   17690:	7bfb      	ldrb	r3, [r7, #15]
   17692:	3301      	adds	r3, #1
   17694:	73fb      	strb	r3, [r7, #15]
   17696:	e7e2      	b.n	1765e <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
   17698:	bf00      	nop
}
   1769a:	3714      	adds	r7, #20
   1769c:	46bd      	mov	sp, r7
   1769e:	bc80      	pop	{r7}
   176a0:	4770      	bx	lr
   176a2:	bf00      	nop
   176a4:	2000a324 	.word	0x2000a324

000176a8 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
   176a8:	b580      	push	{r7, lr}
   176aa:	b082      	sub	sp, #8
   176ac:	af00      	add	r7, sp, #0
   176ae:	6078      	str	r0, [r7, #4]
   176b0:	6039      	str	r1, [r7, #0]
   176b2:	687b      	ldr	r3, [r7, #4]
   176b4:	2b01      	cmp	r3, #1
   176b6:	d131      	bne.n	1771c <_Z41__static_initialization_and_destruction_0ii+0x74>
   176b8:	683b      	ldr	r3, [r7, #0]
   176ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
   176be:	4293      	cmp	r3, r2
   176c0:	d12c      	bne.n	1771c <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   176c2:	4918      	ldr	r1, [pc, #96]	; (17724 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   176c4:	4818      	ldr	r0, [pc, #96]	; (17728 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   176c6:	4b19      	ldr	r3, [pc, #100]	; (1772c <_Z41__static_initialization_and_destruction_0ii+0x84>)
   176c8:	4798      	blx	r3
   176ca:	4a19      	ldr	r2, [pc, #100]	; (17730 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   176cc:	4919      	ldr	r1, [pc, #100]	; (17734 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   176ce:	4816      	ldr	r0, [pc, #88]	; (17728 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   176d0:	4b19      	ldr	r3, [pc, #100]	; (17738 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   176d2:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
   176d4:	4919      	ldr	r1, [pc, #100]	; (1773c <_Z41__static_initialization_and_destruction_0ii+0x94>)
   176d6:	481a      	ldr	r0, [pc, #104]	; (17740 <_Z41__static_initialization_and_destruction_0ii+0x98>)
   176d8:	4b14      	ldr	r3, [pc, #80]	; (1772c <_Z41__static_initialization_and_destruction_0ii+0x84>)
   176da:	4798      	blx	r3
   176dc:	4a14      	ldr	r2, [pc, #80]	; (17730 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   176de:	4915      	ldr	r1, [pc, #84]	; (17734 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   176e0:	4817      	ldr	r0, [pc, #92]	; (17740 <_Z41__static_initialization_and_destruction_0ii+0x98>)
   176e2:	4b15      	ldr	r3, [pc, #84]	; (17738 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   176e4:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
   176e6:	4917      	ldr	r1, [pc, #92]	; (17744 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
   176e8:	4817      	ldr	r0, [pc, #92]	; (17748 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   176ea:	4b10      	ldr	r3, [pc, #64]	; (1772c <_Z41__static_initialization_and_destruction_0ii+0x84>)
   176ec:	4798      	blx	r3
   176ee:	4a10      	ldr	r2, [pc, #64]	; (17730 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   176f0:	4910      	ldr	r1, [pc, #64]	; (17734 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   176f2:	4815      	ldr	r0, [pc, #84]	; (17748 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   176f4:	4b10      	ldr	r3, [pc, #64]	; (17738 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   176f6:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
   176f8:	4914      	ldr	r1, [pc, #80]	; (1774c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
   176fa:	4815      	ldr	r0, [pc, #84]	; (17750 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   176fc:	4b0b      	ldr	r3, [pc, #44]	; (1772c <_Z41__static_initialization_and_destruction_0ii+0x84>)
   176fe:	4798      	blx	r3
   17700:	4a0b      	ldr	r2, [pc, #44]	; (17730 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   17702:	490c      	ldr	r1, [pc, #48]	; (17734 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   17704:	4812      	ldr	r0, [pc, #72]	; (17750 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   17706:	4b0c      	ldr	r3, [pc, #48]	; (17738 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   17708:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
   1770a:	4912      	ldr	r1, [pc, #72]	; (17754 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   1770c:	4812      	ldr	r0, [pc, #72]	; (17758 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   1770e:	4b07      	ldr	r3, [pc, #28]	; (1772c <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17710:	4798      	blx	r3
   17712:	4a07      	ldr	r2, [pc, #28]	; (17730 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   17714:	4907      	ldr	r1, [pc, #28]	; (17734 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   17716:	4810      	ldr	r0, [pc, #64]	; (17758 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   17718:	4b07      	ldr	r3, [pc, #28]	; (17738 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   1771a:	4798      	blx	r3
   1771c:	bf00      	nop
   1771e:	3708      	adds	r7, #8
   17720:	46bd      	mov	sp, r7
   17722:	bd80      	pop	{r7, pc}
   17724:	2000a908 	.word	0x2000a908
   17728:	2000a468 	.word	0x2000a468
   1772c:	00017335 	.word	0x00017335
   17730:	20000000 	.word	0x20000000
   17734:	00017365 	.word	0x00017365
   17738:	0001949d 	.word	0x0001949d
   1773c:	2000a9c4 	.word	0x2000a9c4
   17740:	2000a484 	.word	0x2000a484
   17744:	2000aae8 	.word	0x2000aae8
   17748:	2000a4a0 	.word	0x2000a4a0
   1774c:	2000a9e4 	.word	0x2000a9e4
   17750:	2000a4bc 	.word	0x2000a4bc
   17754:	2000aa48 	.word	0x2000aa48
   17758:	2000a4d8 	.word	0x2000a4d8

0001775c <_GLOBAL__sub_I_ptrTimerClass>:
   1775c:	b580      	push	{r7, lr}
   1775e:	af00      	add	r7, sp, #0
   17760:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17764:	2001      	movs	r0, #1
   17766:	4b01      	ldr	r3, [pc, #4]	; (1776c <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   17768:	4798      	blx	r3
   1776a:	bd80      	pop	{r7, pc}
   1776c:	000176a9 	.word	0x000176a9

00017770 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   17770:	b480      	push	{r7}
   17772:	b083      	sub	sp, #12
   17774:	af00      	add	r7, sp, #0
   17776:	6078      	str	r0, [r7, #4]
   17778:	4a05      	ldr	r2, [pc, #20]	; (17790 <_ZN5PrintC1Ev+0x20>)
   1777a:	687b      	ldr	r3, [r7, #4]
   1777c:	601a      	str	r2, [r3, #0]
   1777e:	687b      	ldr	r3, [r7, #4]
   17780:	2200      	movs	r2, #0
   17782:	605a      	str	r2, [r3, #4]
   17784:	687b      	ldr	r3, [r7, #4]
   17786:	4618      	mov	r0, r3
   17788:	370c      	adds	r7, #12
   1778a:	46bd      	mov	sp, r7
   1778c:	bc80      	pop	{r7}
   1778e:	4770      	bx	lr
   17790:	0002181c 	.word	0x0002181c

00017794 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   17794:	b480      	push	{r7}
   17796:	b083      	sub	sp, #12
   17798:	af00      	add	r7, sp, #0
   1779a:	6078      	str	r0, [r7, #4]
   1779c:	2300      	movs	r3, #0
   1779e:	4618      	mov	r0, r3
   177a0:	370c      	adds	r7, #12
   177a2:	46bd      	mov	sp, r7
   177a4:	bc80      	pop	{r7}
   177a6:	4770      	bx	lr

000177a8 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   177a8:	b480      	push	{r7}
   177aa:	b083      	sub	sp, #12
   177ac:	af00      	add	r7, sp, #0
   177ae:	6078      	str	r0, [r7, #4]
   177b0:	bf00      	nop
   177b2:	370c      	adds	r7, #12
   177b4:	46bd      	mov	sp, r7
   177b6:	bc80      	pop	{r7}
   177b8:	4770      	bx	lr
	...

000177bc <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   177bc:	b580      	push	{r7, lr}
   177be:	b082      	sub	sp, #8
   177c0:	af00      	add	r7, sp, #0
   177c2:	6078      	str	r0, [r7, #4]
   177c4:	687b      	ldr	r3, [r7, #4]
   177c6:	4618      	mov	r0, r3
   177c8:	4b06      	ldr	r3, [pc, #24]	; (177e4 <_ZN6StreamC1Ev+0x28>)
   177ca:	4798      	blx	r3
   177cc:	4a06      	ldr	r2, [pc, #24]	; (177e8 <_ZN6StreamC1Ev+0x2c>)
   177ce:	687b      	ldr	r3, [r7, #4]
   177d0:	601a      	str	r2, [r3, #0]
   177d2:	687b      	ldr	r3, [r7, #4]
   177d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   177d8:	609a      	str	r2, [r3, #8]
   177da:	687b      	ldr	r3, [r7, #4]
   177dc:	4618      	mov	r0, r3
   177de:	3708      	adds	r7, #8
   177e0:	46bd      	mov	sp, r7
   177e2:	bd80      	pop	{r7, pc}
   177e4:	00017771 	.word	0x00017771
   177e8:	000217e0 	.word	0x000217e0

000177ec <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
   177ec:	b480      	push	{r7}
   177ee:	b083      	sub	sp, #12
   177f0:	af00      	add	r7, sp, #0
   177f2:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
   177f4:	4b06      	ldr	r3, [pc, #24]	; (17810 <_ZL10USBTimeoutPK10timer_task+0x24>)
   177f6:	681b      	ldr	r3, [r3, #0]
   177f8:	2201      	movs	r2, #1
   177fa:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
   177fc:	4b04      	ldr	r3, [pc, #16]	; (17810 <_ZL10USBTimeoutPK10timer_task+0x24>)
   177fe:	681b      	ldr	r3, [r3, #0]
   17800:	2200      	movs	r2, #0
   17802:	741a      	strb	r2, [r3, #16]
	
}
   17804:	bf00      	nop
   17806:	370c      	adds	r7, #12
   17808:	46bd      	mov	sp, r7
   1780a:	bc80      	pop	{r7}
   1780c:	4770      	bx	lr
   1780e:	bf00      	nop
   17810:	2000a554 	.word	0x2000a554

00017814 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   17814:	b480      	push	{r7}
   17816:	b083      	sub	sp, #12
   17818:	af00      	add	r7, sp, #0
   1781a:	4603      	mov	r3, r0
   1781c:	603a      	str	r2, [r7, #0]
   1781e:	71fb      	strb	r3, [r7, #7]
   17820:	460b      	mov	r3, r1
   17822:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   17824:	4b08      	ldr	r3, [pc, #32]	; (17848 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   17826:	681b      	ldr	r3, [r3, #0]
   17828:	2201      	movs	r2, #1
   1782a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
   1782c:	4b06      	ldr	r3, [pc, #24]	; (17848 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   1782e:	681b      	ldr	r3, [r3, #0]
   17830:	2201      	movs	r2, #1
   17832:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   17834:	4b04      	ldr	r3, [pc, #16]	; (17848 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   17836:	681b      	ldr	r3, [r3, #0]
   17838:	2201      	movs	r2, #1
   1783a:	741a      	strb	r2, [r3, #16]


	return false;
   1783c:	2300      	movs	r3, #0
}
   1783e:	4618      	mov	r0, r3
   17840:	370c      	adds	r7, #12
   17842:	46bd      	mov	sp, r7
   17844:	bc80      	pop	{r7}
   17846:	4770      	bx	lr
   17848:	2000a554 	.word	0x2000a554

0001784c <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   1784c:	b480      	push	{r7}
   1784e:	b083      	sub	sp, #12
   17850:	af00      	add	r7, sp, #0
   17852:	4603      	mov	r3, r0
   17854:	603a      	str	r2, [r7, #0]
   17856:	71fb      	strb	r3, [r7, #7]
   17858:	460b      	mov	r3, r1
   1785a:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   1785c:	4b08      	ldr	r3, [pc, #32]	; (17880 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1785e:	681b      	ldr	r3, [r3, #0]
   17860:	2201      	movs	r2, #1
   17862:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
   17864:	4b06      	ldr	r3, [pc, #24]	; (17880 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   17866:	681b      	ldr	r3, [r3, #0]
   17868:	2201      	movs	r2, #1
   1786a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   1786c:	4b04      	ldr	r3, [pc, #16]	; (17880 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1786e:	681b      	ldr	r3, [r3, #0]
   17870:	2201      	movs	r2, #1
   17872:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   17874:	2300      	movs	r3, #0
}
   17876:	4618      	mov	r0, r3
   17878:	370c      	adds	r7, #12
   1787a:	46bd      	mov	sp, r7
   1787c:	bc80      	pop	{r7}
   1787e:	4770      	bx	lr
   17880:	2000a554 	.word	0x2000a554

00017884 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   17884:	b580      	push	{r7, lr}
   17886:	b082      	sub	sp, #8
   17888:	af00      	add	r7, sp, #0
   1788a:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   1788c:	793b      	ldrb	r3, [r7, #4]
   1788e:	f003 0301 	and.w	r3, r3, #1
   17892:	b2db      	uxtb	r3, r3
   17894:	2b00      	cmp	r3, #0
   17896:	d013      	beq.n	178c0 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   17898:	490c      	ldr	r1, [pc, #48]	; (178cc <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   1789a:	2000      	movs	r0, #0
   1789c:	4b0c      	ldr	r3, [pc, #48]	; (178d0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   1789e:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   178a0:	490c      	ldr	r1, [pc, #48]	; (178d4 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   178a2:	2001      	movs	r0, #1
   178a4:	4b0a      	ldr	r3, [pc, #40]	; (178d0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   178a6:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   178a8:	4b0b      	ldr	r3, [pc, #44]	; (178d8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   178aa:	681b      	ldr	r3, [r3, #0]
   178ac:	2201      	movs	r2, #1
   178ae:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   178b0:	4b09      	ldr	r3, [pc, #36]	; (178d8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   178b2:	681b      	ldr	r3, [r3, #0]
   178b4:	2201      	movs	r2, #1
   178b6:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
   178b8:	4b07      	ldr	r3, [pc, #28]	; (178d8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   178ba:	681b      	ldr	r3, [r3, #0]
   178bc:	2201      	movs	r2, #1
   178be:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   178c0:	2300      	movs	r3, #0
}
   178c2:	4618      	mov	r0, r3
   178c4:	3708      	adds	r7, #8
   178c6:	46bd      	mov	sp, r7
   178c8:	bd80      	pop	{r7, pc}
   178ca:	bf00      	nop
   178cc:	00017815 	.word	0x00017815
   178d0:	00011b39 	.word	0x00011b39
   178d4:	0001784d 	.word	0x0001784d
   178d8:	2000a554 	.word	0x2000a554

000178dc <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   178dc:	b580      	push	{r7, lr}
   178de:	b082      	sub	sp, #8
   178e0:	af00      	add	r7, sp, #0
   178e2:	6078      	str	r0, [r7, #4]
   178e4:	687b      	ldr	r3, [r7, #4]
   178e6:	4618      	mov	r0, r3
   178e8:	4b0a      	ldr	r3, [pc, #40]	; (17914 <_ZN9CDC_ClassC1Ev+0x38>)
   178ea:	4798      	blx	r3
   178ec:	687b      	ldr	r3, [r7, #4]
   178ee:	3310      	adds	r3, #16
   178f0:	4618      	mov	r0, r3
   178f2:	4b09      	ldr	r3, [pc, #36]	; (17918 <_ZN9CDC_ClassC1Ev+0x3c>)
   178f4:	4798      	blx	r3
   178f6:	4a09      	ldr	r2, [pc, #36]	; (1791c <_ZN9CDC_ClassC1Ev+0x40>)
   178f8:	687b      	ldr	r3, [r7, #4]
   178fa:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   178fc:	687b      	ldr	r3, [r7, #4]
   178fe:	f04f 32ff 	mov.w	r2, #4294967295
   17902:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   17904:	4a06      	ldr	r2, [pc, #24]	; (17920 <_ZN9CDC_ClassC1Ev+0x44>)
   17906:	687b      	ldr	r3, [r7, #4]
   17908:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   1790a:	687b      	ldr	r3, [r7, #4]
   1790c:	4618      	mov	r0, r3
   1790e:	3708      	adds	r7, #8
   17910:	46bd      	mov	sp, r7
   17912:	bd80      	pop	{r7, pc}
   17914:	000177bd 	.word	0x000177bd
   17918:	00018185 	.word	0x00018185
   1791c:	000217b0 	.word	0x000217b0
   17920:	2000a554 	.word	0x2000a554

00017924 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   17924:	b580      	push	{r7, lr}
   17926:	b082      	sub	sp, #8
   17928:	af00      	add	r7, sp, #0
   1792a:	6078      	str	r0, [r7, #4]
   1792c:	4a06      	ldr	r2, [pc, #24]	; (17948 <_ZN9CDC_ClassD1Ev+0x24>)
   1792e:	687b      	ldr	r3, [r7, #4]
   17930:	601a      	str	r2, [r3, #0]
   17932:	687b      	ldr	r3, [r7, #4]
   17934:	3310      	adds	r3, #16
   17936:	4618      	mov	r0, r3
   17938:	4b04      	ldr	r3, [pc, #16]	; (1794c <_ZN9CDC_ClassD1Ev+0x28>)
   1793a:	4798      	blx	r3
{
} //~CDC_Class
   1793c:	687b      	ldr	r3, [r7, #4]
   1793e:	4618      	mov	r0, r3
   17940:	3708      	adds	r7, #8
   17942:	46bd      	mov	sp, r7
   17944:	bd80      	pop	{r7, pc}
   17946:	bf00      	nop
   17948:	000217b0 	.word	0x000217b0
   1794c:	000181a5 	.word	0x000181a5

00017950 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   17950:	b580      	push	{r7, lr}
   17952:	b082      	sub	sp, #8
   17954:	af00      	add	r7, sp, #0
   17956:	6078      	str	r0, [r7, #4]
	
	OnInit();
   17958:	687b      	ldr	r3, [r7, #4]
   1795a:	3310      	adds	r3, #16
   1795c:	4618      	mov	r0, r3
   1795e:	4b07      	ldr	r3, [pc, #28]	; (1797c <_ZN9CDC_Class4InitEv+0x2c>)
   17960:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   17962:	4907      	ldr	r1, [pc, #28]	; (17980 <_ZN9CDC_Class4InitEv+0x30>)
   17964:	2003      	movs	r0, #3
   17966:	4b07      	ldr	r3, [pc, #28]	; (17984 <_ZN9CDC_Class4InitEv+0x34>)
   17968:	4798      	blx	r3
	
		
	if (connected)
   1796a:	687b      	ldr	r3, [r7, #4]
   1796c:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(200);
   1796e:	20c8      	movs	r0, #200	; 0xc8
   17970:	4b05      	ldr	r3, [pc, #20]	; (17988 <_ZN9CDC_Class4InitEv+0x38>)
   17972:	4798      	blx	r3

	

}
   17974:	bf00      	nop
   17976:	3708      	adds	r7, #8
   17978:	46bd      	mov	sp, r7
   1797a:	bd80      	pop	{r7, pc}
   1797c:	000181b9 	.word	0x000181b9
   17980:	00017885 	.word	0x00017885
   17984:	00011b39 	.word	0x00011b39
   17988:	00005fa1 	.word	0x00005fa1

0001798c <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   1798c:	b580      	push	{r7, lr}
   1798e:	b082      	sub	sp, #8
   17990:	af00      	add	r7, sp, #0
   17992:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   17994:	4b03      	ldr	r3, [pc, #12]	; (179a4 <_ZN9CDC_Class9IsEnabledEv+0x18>)
   17996:	4798      	blx	r3
   17998:	4603      	mov	r3, r0
	
}
   1799a:	4618      	mov	r0, r3
   1799c:	3708      	adds	r7, #8
   1799e:	46bd      	mov	sp, r7
   179a0:	bd80      	pop	{r7, pc}
   179a2:	bf00      	nop
   179a4:	00011bb1 	.word	0x00011bb1

000179a8 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   179a8:	b580      	push	{r7, lr}
   179aa:	b084      	sub	sp, #16
   179ac:	af00      	add	r7, sp, #0
   179ae:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   179b0:	687b      	ldr	r3, [r7, #4]
   179b2:	699b      	ldr	r3, [r3, #24]
   179b4:	f1b3 3fff 	cmp.w	r3, #4294967295
   179b8:	bf14      	ite	ne
   179ba:	2301      	movne	r3, #1
   179bc:	2300      	moveq	r3, #0
   179be:	b2db      	uxtb	r3, r3
   179c0:	2b00      	cmp	r3, #0
   179c2:	d002      	beq.n	179ca <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   179c4:	687b      	ldr	r3, [r7, #4]
   179c6:	699b      	ldr	r3, [r3, #24]
   179c8:	e011      	b.n	179ee <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   179ca:	687b      	ldr	r3, [r7, #4]
   179cc:	681b      	ldr	r3, [r3, #0]
   179ce:	331c      	adds	r3, #28
   179d0:	681b      	ldr	r3, [r3, #0]
   179d2:	f107 010f 	add.w	r1, r7, #15
   179d6:	2201      	movs	r2, #1
   179d8:	6878      	ldr	r0, [r7, #4]
   179da:	4798      	blx	r3
   179dc:	4602      	mov	r2, r0
   179de:	687b      	ldr	r3, [r7, #4]
   179e0:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   179e2:	7bfb      	ldrb	r3, [r7, #15]
   179e4:	461a      	mov	r2, r3
   179e6:	687b      	ldr	r3, [r7, #4]
   179e8:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   179ea:	687b      	ldr	r3, [r7, #4]
   179ec:	699b      	ldr	r3, [r3, #24]
}
   179ee:	4618      	mov	r0, r3
   179f0:	3710      	adds	r7, #16
   179f2:	46bd      	mov	sp, r7
   179f4:	bd80      	pop	{r7, pc}
	...

000179f8 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   179f8:	b580      	push	{r7, lr}
   179fa:	b086      	sub	sp, #24
   179fc:	af00      	add	r7, sp, #0
   179fe:	60f8      	str	r0, [r7, #12]
   17a00:	60b9      	str	r1, [r7, #8]
   17a02:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
   17a04:	68fb      	ldr	r3, [r7, #12]
   17a06:	7c1b      	ldrb	r3, [r3, #16]
   17a08:	b2db      	uxtb	r3, r3
   17a0a:	2b00      	cmp	r3, #0
   17a0c:	d02e      	beq.n	17a6c <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   17a0e:	687a      	ldr	r2, [r7, #4]
   17a10:	4613      	mov	r3, r2
   17a12:	009b      	lsls	r3, r3, #2
   17a14:	4413      	add	r3, r2
   17a16:	005b      	lsls	r3, r3, #1
   17a18:	461a      	mov	r2, r3
   17a1a:	4918      	ldr	r1, [pc, #96]	; (17a7c <_ZN9CDC_Class8readDataEPvl+0x84>)
   17a1c:	4818      	ldr	r0, [pc, #96]	; (17a80 <_ZN9CDC_Class8readDataEPvl+0x88>)
   17a1e:	4b19      	ldr	r3, [pc, #100]	; (17a84 <_ZN9CDC_Class8readDataEPvl+0x8c>)
   17a20:	4798      	blx	r3
		rxReady=false;
   17a22:	68fb      	ldr	r3, [r7, #12]
   17a24:	2200      	movs	r2, #0
   17a26:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
   17a28:	687b      	ldr	r3, [r7, #4]
   17a2a:	4619      	mov	r1, r3
   17a2c:	68b8      	ldr	r0, [r7, #8]
   17a2e:	4b16      	ldr	r3, [pc, #88]	; (17a88 <_ZN9CDC_Class8readDataEPvl+0x90>)
   17a30:	4798      	blx	r3
   17a32:	4603      	mov	r3, r0
   17a34:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
   17a36:	68fb      	ldr	r3, [r7, #12]
   17a38:	7d5b      	ldrb	r3, [r3, #21]
   17a3a:	b2db      	uxtb	r3, r3
   17a3c:	f083 0301 	eor.w	r3, r3, #1
   17a40:	b2db      	uxtb	r3, r3
   17a42:	2b00      	cmp	r3, #0
   17a44:	d006      	beq.n	17a54 <_ZN9CDC_Class8readDataEPvl+0x5c>
   17a46:	68fb      	ldr	r3, [r7, #12]
   17a48:	7c1b      	ldrb	r3, [r3, #16]
   17a4a:	b2db      	uxtb	r3, r3
   17a4c:	2b00      	cmp	r3, #0
   17a4e:	d001      	beq.n	17a54 <_ZN9CDC_Class8readDataEPvl+0x5c>
   17a50:	2301      	movs	r3, #1
   17a52:	e000      	b.n	17a56 <_ZN9CDC_Class8readDataEPvl+0x5e>
   17a54:	2300      	movs	r3, #0
   17a56:	2b00      	cmp	r3, #0
   17a58:	d000      	beq.n	17a5c <_ZN9CDC_Class8readDataEPvl+0x64>
   17a5a:	e7ec      	b.n	17a36 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
   17a5c:	4808      	ldr	r0, [pc, #32]	; (17a80 <_ZN9CDC_Class8readDataEPvl+0x88>)
   17a5e:	4b0b      	ldr	r3, [pc, #44]	; (17a8c <_ZN9CDC_Class8readDataEPvl+0x94>)
   17a60:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   17a62:	4906      	ldr	r1, [pc, #24]	; (17a7c <_ZN9CDC_Class8readDataEPvl+0x84>)
   17a64:	4806      	ldr	r0, [pc, #24]	; (17a80 <_ZN9CDC_Class8readDataEPvl+0x88>)
   17a66:	4b0a      	ldr	r3, [pc, #40]	; (17a90 <_ZN9CDC_Class8readDataEPvl+0x98>)
   17a68:	4798      	blx	r3
   17a6a:	e001      	b.n	17a70 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
   17a6c:	2300      	movs	r3, #0
   17a6e:	75fb      	strb	r3, [r7, #23]
	}

	return r;
   17a70:	7dfb      	ldrb	r3, [r7, #23]
}
   17a72:	4618      	mov	r0, r3
   17a74:	3718      	adds	r7, #24
   17a76:	46bd      	mov	sp, r7
   17a78:	bd80      	pop	{r7, pc}
   17a7a:	bf00      	nop
   17a7c:	000177ed 	.word	0x000177ed
   17a80:	2000a610 	.word	0x2000a610
   17a84:	00018481 	.word	0x00018481
   17a88:	00011a8d 	.word	0x00011a8d
   17a8c:	000183a1 	.word	0x000183a1
   17a90:	000184e5 	.word	0x000184e5

00017a94 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
   17a94:	b580      	push	{r7, lr}
   17a96:	b086      	sub	sp, #24
   17a98:	af00      	add	r7, sp, #0
   17a9a:	60f8      	str	r0, [r7, #12]
   17a9c:	60b9      	str	r1, [r7, #8]
   17a9e:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
   17aa0:	68fb      	ldr	r3, [r7, #12]
   17aa2:	2200      	movs	r2, #0
   17aa4:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   17aa6:	687b      	ldr	r3, [r7, #4]
   17aa8:	4619      	mov	r1, r3
   17aaa:	68b8      	ldr	r0, [r7, #8]
   17aac:	4b04      	ldr	r3, [pc, #16]	; (17ac0 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
   17aae:	4798      	blx	r3
   17ab0:	4603      	mov	r3, r0
   17ab2:	617b      	str	r3, [r7, #20]
	return r;
   17ab4:	697b      	ldr	r3, [r7, #20]
}
   17ab6:	4618      	mov	r0, r3
   17ab8:	3718      	adds	r7, #24
   17aba:	46bd      	mov	sp, r7
   17abc:	bd80      	pop	{r7, pc}
   17abe:	bf00      	nop
   17ac0:	00011a8d 	.word	0x00011a8d

00017ac4 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   17ac4:	b580      	push	{r7, lr}
   17ac6:	b084      	sub	sp, #16
   17ac8:	af00      	add	r7, sp, #0
   17aca:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   17acc:	687b      	ldr	r3, [r7, #4]
   17ace:	2200      	movs	r2, #0
   17ad0:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   17ad2:	f107 030f 	add.w	r3, r7, #15
   17ad6:	2101      	movs	r1, #1
   17ad8:	4618      	mov	r0, r3
   17ada:	4b08      	ldr	r3, [pc, #32]	; (17afc <_ZN9CDC_Class4readEv+0x38>)
   17adc:	4798      	blx	r3
	while(!rxReady);
   17ade:	687b      	ldr	r3, [r7, #4]
   17ae0:	7d5b      	ldrb	r3, [r3, #21]
   17ae2:	b2db      	uxtb	r3, r3
   17ae4:	f083 0301 	eor.w	r3, r3, #1
   17ae8:	b2db      	uxtb	r3, r3
   17aea:	2b00      	cmp	r3, #0
   17aec:	d000      	beq.n	17af0 <_ZN9CDC_Class4readEv+0x2c>
   17aee:	e7f6      	b.n	17ade <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   17af0:	7bfb      	ldrb	r3, [r7, #15]
}
   17af2:	4618      	mov	r0, r3
   17af4:	3710      	adds	r7, #16
   17af6:	46bd      	mov	sp, r7
   17af8:	bd80      	pop	{r7, pc}
   17afa:	bf00      	nop
   17afc:	00011a8d 	.word	0x00011a8d

00017b00 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
   17b00:	b580      	push	{r7, lr}
   17b02:	b082      	sub	sp, #8
   17b04:	af00      	add	r7, sp, #0
   17b06:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   17b08:	687b      	ldr	r3, [r7, #4]
   17b0a:	331c      	adds	r3, #28
   17b0c:	2140      	movs	r1, #64	; 0x40
   17b0e:	4618      	mov	r0, r3
   17b10:	4b02      	ldr	r3, [pc, #8]	; (17b1c <_ZN9CDC_Class5flushEv+0x1c>)
   17b12:	4798      	blx	r3
}
   17b14:	bf00      	nop
   17b16:	3708      	adds	r7, #8
   17b18:	46bd      	mov	sp, r7
   17b1a:	bd80      	pop	{r7, pc}
   17b1c:	00011ad1 	.word	0x00011ad1

00017b20 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   17b20:	b580      	push	{r7, lr}
   17b22:	b082      	sub	sp, #8
   17b24:	af00      	add	r7, sp, #0
   17b26:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   17b28:	4b02      	ldr	r3, [pc, #8]	; (17b34 <_ZN9CDC_Class5clearEv+0x14>)
   17b2a:	4798      	blx	r3
}
   17b2c:	bf00      	nop
   17b2e:	3708      	adds	r7, #8
   17b30:	46bd      	mov	sp, r7
   17b32:	bd80      	pop	{r7, pc}
   17b34:	00011b15 	.word	0x00011b15

00017b38 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   17b38:	b580      	push	{r7, lr}
   17b3a:	b082      	sub	sp, #8
   17b3c:	af00      	add	r7, sp, #0
   17b3e:	6078      	str	r0, [r7, #4]
   17b40:	460b      	mov	r3, r1
   17b42:	70fb      	strb	r3, [r7, #3]
	if (connected){
   17b44:	687b      	ldr	r3, [r7, #4]
   17b46:	7c1b      	ldrb	r3, [r3, #16]
   17b48:	b2db      	uxtb	r3, r3
   17b4a:	2b00      	cmp	r3, #0
   17b4c:	d012      	beq.n	17b74 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
   17b4e:	687b      	ldr	r3, [r7, #4]
   17b50:	7d1b      	ldrb	r3, [r3, #20]
   17b52:	b2db      	uxtb	r3, r3
   17b54:	f083 0301 	eor.w	r3, r3, #1
   17b58:	b2db      	uxtb	r3, r3
   17b5a:	2b00      	cmp	r3, #0
   17b5c:	d000      	beq.n	17b60 <_ZN9CDC_Class5writeEh+0x28>
   17b5e:	e7f6      	b.n	17b4e <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
   17b60:	687b      	ldr	r3, [r7, #4]
   17b62:	681b      	ldr	r3, [r3, #0]
   17b64:	3324      	adds	r3, #36	; 0x24
   17b66:	681b      	ldr	r3, [r3, #0]
   17b68:	1cf9      	adds	r1, r7, #3
   17b6a:	2201      	movs	r2, #1
   17b6c:	6878      	ldr	r0, [r7, #4]
   17b6e:	4798      	blx	r3
   17b70:	4603      	mov	r3, r0
   17b72:	e000      	b.n	17b76 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
   17b74:	2300      	movs	r3, #0
	}
		
}
   17b76:	4618      	mov	r0, r3
   17b78:	3708      	adds	r7, #8
   17b7a:	46bd      	mov	sp, r7
   17b7c:	bd80      	pop	{r7, pc}
	...

00017b80 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   17b80:	b580      	push	{r7, lr}
   17b82:	b086      	sub	sp, #24
   17b84:	af00      	add	r7, sp, #0
   17b86:	60f8      	str	r0, [r7, #12]
   17b88:	60b9      	str	r1, [r7, #8]
   17b8a:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
   17b8c:	68fb      	ldr	r3, [r7, #12]
   17b8e:	7c1b      	ldrb	r3, [r3, #16]
   17b90:	b2db      	uxtb	r3, r3
   17b92:	2b00      	cmp	r3, #0
   17b94:	d02f      	beq.n	17bf6 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   17b96:	687a      	ldr	r2, [r7, #4]
   17b98:	4613      	mov	r3, r2
   17b9a:	009b      	lsls	r3, r3, #2
   17b9c:	4413      	add	r3, r2
   17b9e:	005b      	lsls	r3, r3, #1
   17ba0:	461a      	mov	r2, r3
   17ba2:	4917      	ldr	r1, [pc, #92]	; (17c00 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   17ba4:	4817      	ldr	r0, [pc, #92]	; (17c04 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   17ba6:	4b18      	ldr	r3, [pc, #96]	; (17c08 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
   17ba8:	4798      	blx	r3
		txReady=false;
   17baa:	68fb      	ldr	r3, [r7, #12]
   17bac:	2200      	movs	r2, #0
   17bae:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   17bb0:	687b      	ldr	r3, [r7, #4]
   17bb2:	4619      	mov	r1, r3
   17bb4:	68b8      	ldr	r0, [r7, #8]
   17bb6:	4b15      	ldr	r3, [pc, #84]	; (17c0c <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
   17bb8:	4798      	blx	r3
   17bba:	4603      	mov	r3, r0
   17bbc:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
   17bbe:	68fb      	ldr	r3, [r7, #12]
   17bc0:	7d1b      	ldrb	r3, [r3, #20]
   17bc2:	b2db      	uxtb	r3, r3
   17bc4:	f083 0301 	eor.w	r3, r3, #1
   17bc8:	b2db      	uxtb	r3, r3
   17bca:	2b00      	cmp	r3, #0
   17bcc:	d006      	beq.n	17bdc <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   17bce:	68fb      	ldr	r3, [r7, #12]
   17bd0:	7c1b      	ldrb	r3, [r3, #16]
   17bd2:	b2db      	uxtb	r3, r3
   17bd4:	2b00      	cmp	r3, #0
   17bd6:	d001      	beq.n	17bdc <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   17bd8:	2301      	movs	r3, #1
   17bda:	e000      	b.n	17bde <_ZN9CDC_Class9writeDataEPKvl+0x5e>
   17bdc:	2300      	movs	r3, #0
   17bde:	2b00      	cmp	r3, #0
   17be0:	d000      	beq.n	17be4 <_ZN9CDC_Class9writeDataEPKvl+0x64>
   17be2:	e7ec      	b.n	17bbe <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
   17be4:	4807      	ldr	r0, [pc, #28]	; (17c04 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   17be6:	4b0a      	ldr	r3, [pc, #40]	; (17c10 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
   17be8:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   17bea:	4905      	ldr	r1, [pc, #20]	; (17c00 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   17bec:	4805      	ldr	r0, [pc, #20]	; (17c04 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   17bee:	4b09      	ldr	r3, [pc, #36]	; (17c14 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
   17bf0:	4798      	blx	r3
		return r;
   17bf2:	697b      	ldr	r3, [r7, #20]
   17bf4:	e000      	b.n	17bf8 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
   17bf6:	2300      	movs	r3, #0
	}
	

}
   17bf8:	4618      	mov	r0, r3
   17bfa:	3718      	adds	r7, #24
   17bfc:	46bd      	mov	sp, r7
   17bfe:	bd80      	pop	{r7, pc}
   17c00:	000177ed 	.word	0x000177ed
   17c04:	2000a610 	.word	0x2000a610
   17c08:	00018481 	.word	0x00018481
   17c0c:	00011ad1 	.word	0x00011ad1
   17c10:	000183a1 	.word	0x000183a1
   17c14:	000184e5 	.word	0x000184e5

00017c18 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   17c18:	b580      	push	{r7, lr}
   17c1a:	b086      	sub	sp, #24
   17c1c:	af00      	add	r7, sp, #0
   17c1e:	60f8      	str	r0, [r7, #12]
   17c20:	60b9      	str	r1, [r7, #8]
   17c22:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   17c24:	68fb      	ldr	r3, [r7, #12]
   17c26:	2200      	movs	r2, #0
   17c28:	751a      	strb	r2, [r3, #20]

 	if (connected){
   17c2a:	68fb      	ldr	r3, [r7, #12]
   17c2c:	7c1b      	ldrb	r3, [r3, #16]
   17c2e:	b2db      	uxtb	r3, r3
   17c30:	2b00      	cmp	r3, #0
   17c32:	d02a      	beq.n	17c8a <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   17c34:	687a      	ldr	r2, [r7, #4]
   17c36:	4613      	mov	r3, r2
   17c38:	009b      	lsls	r3, r3, #2
   17c3a:	4413      	add	r3, r2
   17c3c:	005b      	lsls	r3, r3, #1
   17c3e:	461a      	mov	r2, r3
   17c40:	4915      	ldr	r1, [pc, #84]	; (17c98 <_ZN9CDC_Class5writeEPKhj+0x80>)
   17c42:	4816      	ldr	r0, [pc, #88]	; (17c9c <_ZN9CDC_Class5writeEPKhj+0x84>)
   17c44:	4b16      	ldr	r3, [pc, #88]	; (17ca0 <_ZN9CDC_Class5writeEPKhj+0x88>)
   17c46:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   17c48:	6879      	ldr	r1, [r7, #4]
   17c4a:	68b8      	ldr	r0, [r7, #8]
   17c4c:	4b15      	ldr	r3, [pc, #84]	; (17ca4 <_ZN9CDC_Class5writeEPKhj+0x8c>)
   17c4e:	4798      	blx	r3
   17c50:	4603      	mov	r3, r0
   17c52:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
   17c54:	68fb      	ldr	r3, [r7, #12]
   17c56:	7d1b      	ldrb	r3, [r3, #20]
   17c58:	b2db      	uxtb	r3, r3
   17c5a:	f083 0301 	eor.w	r3, r3, #1
   17c5e:	b2db      	uxtb	r3, r3
   17c60:	2b00      	cmp	r3, #0
   17c62:	d006      	beq.n	17c72 <_ZN9CDC_Class5writeEPKhj+0x5a>
   17c64:	68fb      	ldr	r3, [r7, #12]
   17c66:	7c1b      	ldrb	r3, [r3, #16]
   17c68:	b2db      	uxtb	r3, r3
   17c6a:	2b00      	cmp	r3, #0
   17c6c:	d001      	beq.n	17c72 <_ZN9CDC_Class5writeEPKhj+0x5a>
   17c6e:	2301      	movs	r3, #1
   17c70:	e000      	b.n	17c74 <_ZN9CDC_Class5writeEPKhj+0x5c>
   17c72:	2300      	movs	r3, #0
   17c74:	2b00      	cmp	r3, #0
   17c76:	d000      	beq.n	17c7a <_ZN9CDC_Class5writeEPKhj+0x62>
   17c78:	e7ec      	b.n	17c54 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
   17c7a:	4808      	ldr	r0, [pc, #32]	; (17c9c <_ZN9CDC_Class5writeEPKhj+0x84>)
   17c7c:	4b0a      	ldr	r3, [pc, #40]	; (17ca8 <_ZN9CDC_Class5writeEPKhj+0x90>)
   17c7e:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   17c80:	4905      	ldr	r1, [pc, #20]	; (17c98 <_ZN9CDC_Class5writeEPKhj+0x80>)
   17c82:	4806      	ldr	r0, [pc, #24]	; (17c9c <_ZN9CDC_Class5writeEPKhj+0x84>)
   17c84:	4b09      	ldr	r3, [pc, #36]	; (17cac <_ZN9CDC_Class5writeEPKhj+0x94>)
   17c86:	4798      	blx	r3
   17c88:	e001      	b.n	17c8e <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
   17c8a:	2300      	movs	r3, #0
   17c8c:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   17c8e:	697b      	ldr	r3, [r7, #20]
}
   17c90:	4618      	mov	r0, r3
   17c92:	3718      	adds	r7, #24
   17c94:	46bd      	mov	sp, r7
   17c96:	bd80      	pop	{r7, pc}
   17c98:	000177ed 	.word	0x000177ed
   17c9c:	2000a610 	.word	0x2000a610
   17ca0:	00018481 	.word	0x00018481
   17ca4:	00011ad1 	.word	0x00011ad1
   17ca8:	000183a1 	.word	0x000183a1
   17cac:	000184e5 	.word	0x000184e5

00017cb0 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   17cb0:	b480      	push	{r7}
   17cb2:	b083      	sub	sp, #12
   17cb4:	af00      	add	r7, sp, #0
   17cb6:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   17cb8:	687b      	ldr	r3, [r7, #4]
   17cba:	7d5b      	ldrb	r3, [r3, #21]
   17cbc:	b2db      	uxtb	r3, r3
   17cbe:	2b00      	cmp	r3, #0
   17cc0:	d006      	beq.n	17cd0 <_ZN9CDC_Class9availableEv+0x20>
   17cc2:	687b      	ldr	r3, [r7, #4]
   17cc4:	7d1b      	ldrb	r3, [r3, #20]
   17cc6:	b2db      	uxtb	r3, r3
   17cc8:	2b00      	cmp	r3, #0
   17cca:	d001      	beq.n	17cd0 <_ZN9CDC_Class9availableEv+0x20>
   17ccc:	2301      	movs	r3, #1
   17cce:	e000      	b.n	17cd2 <_ZN9CDC_Class9availableEv+0x22>
   17cd0:	2300      	movs	r3, #0
   17cd2:	2b00      	cmp	r3, #0
   17cd4:	d001      	beq.n	17cda <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   17cd6:	2301      	movs	r3, #1
   17cd8:	e000      	b.n	17cdc <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   17cda:	2300      	movs	r3, #0
	}
	
}
   17cdc:	4618      	mov	r0, r3
   17cde:	370c      	adds	r7, #12
   17ce0:	46bd      	mov	sp, r7
   17ce2:	bc80      	pop	{r7}
   17ce4:	4770      	bx	lr
	...

00017ce8 <_Z41__static_initialization_and_destruction_0ii>:
		result = true;
	}

	delay_us(10);
	return result;
}
   17ce8:	b580      	push	{r7, lr}
   17cea:	b082      	sub	sp, #8
   17cec:	af00      	add	r7, sp, #0
   17cee:	6078      	str	r0, [r7, #4]
   17cf0:	6039      	str	r1, [r7, #0]
   17cf2:	687b      	ldr	r3, [r7, #4]
   17cf4:	2b01      	cmp	r3, #1
   17cf6:	d10c      	bne.n	17d12 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   17cf8:	683b      	ldr	r3, [r7, #0]
   17cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17cfe:	4293      	cmp	r3, r2
   17d00:	d107      	bne.n	17d12 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   17d02:	4806      	ldr	r0, [pc, #24]	; (17d1c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   17d04:	4b06      	ldr	r3, [pc, #24]	; (17d20 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   17d06:	4798      	blx	r3
   17d08:	4a06      	ldr	r2, [pc, #24]	; (17d24 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   17d0a:	4907      	ldr	r1, [pc, #28]	; (17d28 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   17d0c:	4803      	ldr	r0, [pc, #12]	; (17d1c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   17d0e:	4b07      	ldr	r3, [pc, #28]	; (17d2c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   17d10:	4798      	blx	r3
   17d12:	bf00      	nop
   17d14:	3708      	adds	r7, #8
   17d16:	46bd      	mov	sp, r7
   17d18:	bd80      	pop	{r7, pc}
   17d1a:	bf00      	nop
   17d1c:	2000a4f4 	.word	0x2000a4f4
   17d20:	000178dd 	.word	0x000178dd
   17d24:	20000000 	.word	0x20000000
   17d28:	00017925 	.word	0x00017925
   17d2c:	0001949d 	.word	0x0001949d

00017d30 <_GLOBAL__sub_I_ptrCDCClass>:
   17d30:	b580      	push	{r7, lr}
   17d32:	af00      	add	r7, sp, #0
   17d34:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17d38:	2001      	movs	r0, #1
   17d3a:	4b01      	ldr	r3, [pc, #4]	; (17d40 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   17d3c:	4798      	blx	r3
   17d3e:	bd80      	pop	{r7, pc}
   17d40:	00017ce9 	.word	0x00017ce9

00017d44 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   17d44:	b590      	push	{r4, r7, lr}
   17d46:	b083      	sub	sp, #12
   17d48:	af00      	add	r7, sp, #0
   17d4a:	6078      	str	r0, [r7, #4]
   17d4c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
   17d4e:	683b      	ldr	r3, [r7, #0]
   17d50:	2b00      	cmp	r3, #0
   17d52:	d101      	bne.n	17d58 <_ZN5Print5writeEPKc+0x14>
   17d54:	2300      	movs	r3, #0
   17d56:	e00c      	b.n	17d72 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
   17d58:	687b      	ldr	r3, [r7, #4]
   17d5a:	681b      	ldr	r3, [r3, #0]
   17d5c:	3304      	adds	r3, #4
   17d5e:	681c      	ldr	r4, [r3, #0]
   17d60:	6838      	ldr	r0, [r7, #0]
   17d62:	4b06      	ldr	r3, [pc, #24]	; (17d7c <_ZN5Print5writeEPKc+0x38>)
   17d64:	4798      	blx	r3
   17d66:	4603      	mov	r3, r0
   17d68:	461a      	mov	r2, r3
   17d6a:	6839      	ldr	r1, [r7, #0]
   17d6c:	6878      	ldr	r0, [r7, #4]
   17d6e:	47a0      	blx	r4
   17d70:	4603      	mov	r3, r0
    }
   17d72:	4618      	mov	r0, r3
   17d74:	370c      	adds	r7, #12
   17d76:	46bd      	mov	sp, r7
   17d78:	bd90      	pop	{r4, r7, pc}
   17d7a:	bf00      	nop
   17d7c:	0001be41 	.word	0x0001be41

00017d80 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   17d80:	b580      	push	{r7, lr}
   17d82:	b086      	sub	sp, #24
   17d84:	af00      	add	r7, sp, #0
   17d86:	60f8      	str	r0, [r7, #12]
   17d88:	60b9      	str	r1, [r7, #8]
   17d8a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   17d8c:	2300      	movs	r3, #0
   17d8e:	617b      	str	r3, [r7, #20]
  while (size--) {
   17d90:	687b      	ldr	r3, [r7, #4]
   17d92:	1e5a      	subs	r2, r3, #1
   17d94:	607a      	str	r2, [r7, #4]
   17d96:	2b00      	cmp	r3, #0
   17d98:	bf14      	ite	ne
   17d9a:	2301      	movne	r3, #1
   17d9c:	2300      	moveq	r3, #0
   17d9e:	b2db      	uxtb	r3, r3
   17da0:	2b00      	cmp	r3, #0
   17da2:	d016      	beq.n	17dd2 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   17da4:	68fb      	ldr	r3, [r7, #12]
   17da6:	681b      	ldr	r3, [r3, #0]
   17da8:	681a      	ldr	r2, [r3, #0]
   17daa:	68bb      	ldr	r3, [r7, #8]
   17dac:	1c59      	adds	r1, r3, #1
   17dae:	60b9      	str	r1, [r7, #8]
   17db0:	781b      	ldrb	r3, [r3, #0]
   17db2:	4619      	mov	r1, r3
   17db4:	68f8      	ldr	r0, [r7, #12]
   17db6:	4790      	blx	r2
   17db8:	4603      	mov	r3, r0
   17dba:	2b00      	cmp	r3, #0
   17dbc:	bf14      	ite	ne
   17dbe:	2301      	movne	r3, #1
   17dc0:	2300      	moveq	r3, #0
   17dc2:	b2db      	uxtb	r3, r3
   17dc4:	2b00      	cmp	r3, #0
   17dc6:	d003      	beq.n	17dd0 <_ZN5Print5writeEPKhj+0x50>
   17dc8:	697b      	ldr	r3, [r7, #20]
   17dca:	3301      	adds	r3, #1
   17dcc:	617b      	str	r3, [r7, #20]
  while (size--) {
   17dce:	e7df      	b.n	17d90 <_ZN5Print5writeEPKhj+0x10>
    else break;
   17dd0:	bf00      	nop
  }
  return n;
   17dd2:	697b      	ldr	r3, [r7, #20]
}
   17dd4:	4618      	mov	r0, r3
   17dd6:	3718      	adds	r7, #24
   17dd8:	46bd      	mov	sp, r7
   17dda:	bd80      	pop	{r7, pc}

00017ddc <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
   17ddc:	b580      	push	{r7, lr}
   17dde:	b082      	sub	sp, #8
   17de0:	af00      	add	r7, sp, #0
   17de2:	6078      	str	r0, [r7, #4]
   17de4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
   17de6:	6839      	ldr	r1, [r7, #0]
   17de8:	6878      	ldr	r0, [r7, #4]
   17dea:	4b03      	ldr	r3, [pc, #12]	; (17df8 <_ZN5Print5printEPK19__FlashStringHelper+0x1c>)
   17dec:	4798      	blx	r3
   17dee:	4603      	mov	r3, r0
}
   17df0:	4618      	mov	r0, r3
   17df2:	3708      	adds	r7, #8
   17df4:	46bd      	mov	sp, r7
   17df6:	bd80      	pop	{r7, pc}
   17df8:	00017dfd 	.word	0x00017dfd

00017dfc <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
   17dfc:	b580      	push	{r7, lr}
   17dfe:	b082      	sub	sp, #8
   17e00:	af00      	add	r7, sp, #0
   17e02:	6078      	str	r0, [r7, #4]
   17e04:	6039      	str	r1, [r7, #0]
  return write(str);
   17e06:	6839      	ldr	r1, [r7, #0]
   17e08:	6878      	ldr	r0, [r7, #4]
   17e0a:	4b03      	ldr	r3, [pc, #12]	; (17e18 <_ZN5Print5printEPKc+0x1c>)
   17e0c:	4798      	blx	r3
   17e0e:	4603      	mov	r3, r0
}
   17e10:	4618      	mov	r0, r3
   17e12:	3708      	adds	r7, #8
   17e14:	46bd      	mov	sp, r7
   17e16:	bd80      	pop	{r7, pc}
   17e18:	00017d45 	.word	0x00017d45

00017e1c <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
   17e1c:	b580      	push	{r7, lr}
   17e1e:	b084      	sub	sp, #16
   17e20:	af00      	add	r7, sp, #0
   17e22:	60f8      	str	r0, [r7, #12]
   17e24:	460b      	mov	r3, r1
   17e26:	607a      	str	r2, [r7, #4]
   17e28:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
   17e2a:	7afb      	ldrb	r3, [r7, #11]
   17e2c:	687a      	ldr	r2, [r7, #4]
   17e2e:	4619      	mov	r1, r3
   17e30:	68f8      	ldr	r0, [r7, #12]
   17e32:	4b03      	ldr	r3, [pc, #12]	; (17e40 <_ZN5Print5printEhi+0x24>)
   17e34:	4798      	blx	r3
   17e36:	4603      	mov	r3, r0
}
   17e38:	4618      	mov	r0, r3
   17e3a:	3710      	adds	r7, #16
   17e3c:	46bd      	mov	sp, r7
   17e3e:	bd80      	pop	{r7, pc}
   17e40:	00017e45 	.word	0x00017e45

00017e44 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   17e44:	b580      	push	{r7, lr}
   17e46:	b084      	sub	sp, #16
   17e48:	af00      	add	r7, sp, #0
   17e4a:	60f8      	str	r0, [r7, #12]
   17e4c:	60b9      	str	r1, [r7, #8]
   17e4e:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
   17e50:	687b      	ldr	r3, [r7, #4]
   17e52:	2b00      	cmp	r3, #0
   17e54:	d109      	bne.n	17e6a <_ZN5Print5printEmi+0x26>
   17e56:	68fb      	ldr	r3, [r7, #12]
   17e58:	681b      	ldr	r3, [r3, #0]
   17e5a:	681b      	ldr	r3, [r3, #0]
   17e5c:	68ba      	ldr	r2, [r7, #8]
   17e5e:	b2d2      	uxtb	r2, r2
   17e60:	4611      	mov	r1, r2
   17e62:	68f8      	ldr	r0, [r7, #12]
   17e64:	4798      	blx	r3
   17e66:	4603      	mov	r3, r0
   17e68:	e007      	b.n	17e7a <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
   17e6a:	687b      	ldr	r3, [r7, #4]
   17e6c:	b2db      	uxtb	r3, r3
   17e6e:	461a      	mov	r2, r3
   17e70:	68b9      	ldr	r1, [r7, #8]
   17e72:	68f8      	ldr	r0, [r7, #12]
   17e74:	4b03      	ldr	r3, [pc, #12]	; (17e84 <_ZN5Print5printEmi+0x40>)
   17e76:	4798      	blx	r3
   17e78:	4603      	mov	r3, r0
}
   17e7a:	4618      	mov	r0, r3
   17e7c:	3710      	adds	r7, #16
   17e7e:	46bd      	mov	sp, r7
   17e80:	bd80      	pop	{r7, pc}
   17e82:	bf00      	nop
   17e84:	00017f89 	.word	0x00017f89

00017e88 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
   17e88:	b580      	push	{r7, lr}
   17e8a:	b084      	sub	sp, #16
   17e8c:	af00      	add	r7, sp, #0
   17e8e:	6078      	str	r0, [r7, #4]
   17e90:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
   17e92:	6839      	ldr	r1, [r7, #0]
   17e94:	6878      	ldr	r0, [r7, #4]
   17e96:	4b07      	ldr	r3, [pc, #28]	; (17eb4 <_ZN5Print7printlnEPK19__FlashStringHelper+0x2c>)
   17e98:	4798      	blx	r3
   17e9a:	60f8      	str	r0, [r7, #12]
  n += println();
   17e9c:	6878      	ldr	r0, [r7, #4]
   17e9e:	4b06      	ldr	r3, [pc, #24]	; (17eb8 <_ZN5Print7printlnEPK19__FlashStringHelper+0x30>)
   17ea0:	4798      	blx	r3
   17ea2:	4602      	mov	r2, r0
   17ea4:	68fb      	ldr	r3, [r7, #12]
   17ea6:	4413      	add	r3, r2
   17ea8:	60fb      	str	r3, [r7, #12]
  return n;
   17eaa:	68fb      	ldr	r3, [r7, #12]
}
   17eac:	4618      	mov	r0, r3
   17eae:	3710      	adds	r7, #16
   17eb0:	46bd      	mov	sp, r7
   17eb2:	bd80      	pop	{r7, pc}
   17eb4:	00017ddd 	.word	0x00017ddd
   17eb8:	00017ebd 	.word	0x00017ebd

00017ebc <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   17ebc:	b580      	push	{r7, lr}
   17ebe:	b082      	sub	sp, #8
   17ec0:	af00      	add	r7, sp, #0
   17ec2:	6078      	str	r0, [r7, #4]
  return write("\r\n");
   17ec4:	4904      	ldr	r1, [pc, #16]	; (17ed8 <_ZN5Print7printlnEv+0x1c>)
   17ec6:	6878      	ldr	r0, [r7, #4]
   17ec8:	4b04      	ldr	r3, [pc, #16]	; (17edc <_ZN5Print7printlnEv+0x20>)
   17eca:	4798      	blx	r3
   17ecc:	4603      	mov	r3, r0
}
   17ece:	4618      	mov	r0, r3
   17ed0:	3708      	adds	r7, #8
   17ed2:	46bd      	mov	sp, r7
   17ed4:	bd80      	pop	{r7, pc}
   17ed6:	bf00      	nop
   17ed8:	00021804 	.word	0x00021804
   17edc:	00017d45 	.word	0x00017d45

00017ee0 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
   17ee0:	b580      	push	{r7, lr}
   17ee2:	b084      	sub	sp, #16
   17ee4:	af00      	add	r7, sp, #0
   17ee6:	6078      	str	r0, [r7, #4]
   17ee8:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
   17eea:	6839      	ldr	r1, [r7, #0]
   17eec:	6878      	ldr	r0, [r7, #4]
   17eee:	4b07      	ldr	r3, [pc, #28]	; (17f0c <_ZN5Print7printlnEPKc+0x2c>)
   17ef0:	4798      	blx	r3
   17ef2:	60f8      	str	r0, [r7, #12]
  n += println();
   17ef4:	6878      	ldr	r0, [r7, #4]
   17ef6:	4b06      	ldr	r3, [pc, #24]	; (17f10 <_ZN5Print7printlnEPKc+0x30>)
   17ef8:	4798      	blx	r3
   17efa:	4602      	mov	r2, r0
   17efc:	68fb      	ldr	r3, [r7, #12]
   17efe:	4413      	add	r3, r2
   17f00:	60fb      	str	r3, [r7, #12]
  return n;
   17f02:	68fb      	ldr	r3, [r7, #12]
}
   17f04:	4618      	mov	r0, r3
   17f06:	3710      	adds	r7, #16
   17f08:	46bd      	mov	sp, r7
   17f0a:	bd80      	pop	{r7, pc}
   17f0c:	00017dfd 	.word	0x00017dfd
   17f10:	00017ebd 	.word	0x00017ebd

00017f14 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   17f14:	b580      	push	{r7, lr}
   17f16:	b086      	sub	sp, #24
   17f18:	af00      	add	r7, sp, #0
   17f1a:	60f8      	str	r0, [r7, #12]
   17f1c:	460b      	mov	r3, r1
   17f1e:	607a      	str	r2, [r7, #4]
   17f20:	72fb      	strb	r3, [r7, #11]
  size_t n = print(b, base);
   17f22:	7afb      	ldrb	r3, [r7, #11]
   17f24:	687a      	ldr	r2, [r7, #4]
   17f26:	4619      	mov	r1, r3
   17f28:	68f8      	ldr	r0, [r7, #12]
   17f2a:	4b07      	ldr	r3, [pc, #28]	; (17f48 <_ZN5Print7printlnEhi+0x34>)
   17f2c:	4798      	blx	r3
   17f2e:	6178      	str	r0, [r7, #20]
  n += println();
   17f30:	68f8      	ldr	r0, [r7, #12]
   17f32:	4b06      	ldr	r3, [pc, #24]	; (17f4c <_ZN5Print7printlnEhi+0x38>)
   17f34:	4798      	blx	r3
   17f36:	4602      	mov	r2, r0
   17f38:	697b      	ldr	r3, [r7, #20]
   17f3a:	4413      	add	r3, r2
   17f3c:	617b      	str	r3, [r7, #20]
  return n;
   17f3e:	697b      	ldr	r3, [r7, #20]
}
   17f40:	4618      	mov	r0, r3
   17f42:	3718      	adds	r7, #24
   17f44:	46bd      	mov	sp, r7
   17f46:	bd80      	pop	{r7, pc}
   17f48:	00017e1d 	.word	0x00017e1d
   17f4c:	00017ebd 	.word	0x00017ebd

00017f50 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   17f50:	b580      	push	{r7, lr}
   17f52:	b086      	sub	sp, #24
   17f54:	af00      	add	r7, sp, #0
   17f56:	60f8      	str	r0, [r7, #12]
   17f58:	60b9      	str	r1, [r7, #8]
   17f5a:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
   17f5c:	687a      	ldr	r2, [r7, #4]
   17f5e:	68b9      	ldr	r1, [r7, #8]
   17f60:	68f8      	ldr	r0, [r7, #12]
   17f62:	4b07      	ldr	r3, [pc, #28]	; (17f80 <_ZN5Print7printlnEmi+0x30>)
   17f64:	4798      	blx	r3
   17f66:	6178      	str	r0, [r7, #20]
  n += println();
   17f68:	68f8      	ldr	r0, [r7, #12]
   17f6a:	4b06      	ldr	r3, [pc, #24]	; (17f84 <_ZN5Print7printlnEmi+0x34>)
   17f6c:	4798      	blx	r3
   17f6e:	4602      	mov	r2, r0
   17f70:	697b      	ldr	r3, [r7, #20]
   17f72:	4413      	add	r3, r2
   17f74:	617b      	str	r3, [r7, #20]
  return n;
   17f76:	697b      	ldr	r3, [r7, #20]
}
   17f78:	4618      	mov	r0, r3
   17f7a:	3718      	adds	r7, #24
   17f7c:	46bd      	mov	sp, r7
   17f7e:	bd80      	pop	{r7, pc}
   17f80:	00017e45 	.word	0x00017e45
   17f84:	00017ebd 	.word	0x00017ebd

00017f88 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   17f88:	b580      	push	{r7, lr}
   17f8a:	b08e      	sub	sp, #56	; 0x38
   17f8c:	af00      	add	r7, sp, #0
   17f8e:	60f8      	str	r0, [r7, #12]
   17f90:	60b9      	str	r1, [r7, #8]
   17f92:	4613      	mov	r3, r2
   17f94:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
   17f96:	f107 0310 	add.w	r3, r7, #16
   17f9a:	3320      	adds	r3, #32
   17f9c:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
   17f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17fa0:	2200      	movs	r2, #0
   17fa2:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   17fa4:	79fb      	ldrb	r3, [r7, #7]
   17fa6:	2b01      	cmp	r3, #1
   17fa8:	dc01      	bgt.n	17fae <_ZN5Print11printNumberEmh+0x26>
   17faa:	230a      	movs	r3, #10
   17fac:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
   17fae:	79fa      	ldrb	r2, [r7, #7]
   17fb0:	68bb      	ldr	r3, [r7, #8]
   17fb2:	fbb3 f1f2 	udiv	r1, r3, r2
   17fb6:	fb02 f201 	mul.w	r2, r2, r1
   17fba:	1a9b      	subs	r3, r3, r2
   17fbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
   17fc0:	79fb      	ldrb	r3, [r7, #7]
   17fc2:	68ba      	ldr	r2, [r7, #8]
   17fc4:	fbb2 f3f3 	udiv	r3, r2, r3
   17fc8:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   17fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17fcc:	3b01      	subs	r3, #1
   17fce:	637b      	str	r3, [r7, #52]	; 0x34
   17fd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   17fd4:	2b09      	cmp	r3, #9
   17fd6:	dc04      	bgt.n	17fe2 <_ZN5Print11printNumberEmh+0x5a>
   17fd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   17fdc:	3330      	adds	r3, #48	; 0x30
   17fde:	b2db      	uxtb	r3, r3
   17fe0:	e003      	b.n	17fea <_ZN5Print11printNumberEmh+0x62>
   17fe2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   17fe6:	3337      	adds	r3, #55	; 0x37
   17fe8:	b2db      	uxtb	r3, r3
   17fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17fec:	7013      	strb	r3, [r2, #0]
  } while(n);
   17fee:	68bb      	ldr	r3, [r7, #8]
   17ff0:	2b00      	cmp	r3, #0
   17ff2:	d000      	beq.n	17ff6 <_ZN5Print11printNumberEmh+0x6e>
  do {
   17ff4:	e7db      	b.n	17fae <_ZN5Print11printNumberEmh+0x26>

  return write(str);
   17ff6:	6b79      	ldr	r1, [r7, #52]	; 0x34
   17ff8:	68f8      	ldr	r0, [r7, #12]
   17ffa:	4b03      	ldr	r3, [pc, #12]	; (18008 <_ZN5Print11printNumberEmh+0x80>)
   17ffc:	4798      	blx	r3
   17ffe:	4603      	mov	r3, r0
}
   18000:	4618      	mov	r0, r3
   18002:	3738      	adds	r7, #56	; 0x38
   18004:	46bd      	mov	sp, r7
   18006:	bd80      	pop	{r7, pc}
   18008:	00017d45 	.word	0x00017d45

0001800c <hri_port_read_DIR_reg>:
{
   1800c:	b480      	push	{r7}
   1800e:	b083      	sub	sp, #12
   18010:	af00      	add	r7, sp, #0
   18012:	6078      	str	r0, [r7, #4]
   18014:	460b      	mov	r3, r1
   18016:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   18018:	78fb      	ldrb	r3, [r7, #3]
   1801a:	687a      	ldr	r2, [r7, #4]
   1801c:	01db      	lsls	r3, r3, #7
   1801e:	4413      	add	r3, r2
   18020:	681b      	ldr	r3, [r3, #0]
}
   18022:	4618      	mov	r0, r3
   18024:	370c      	adds	r7, #12
   18026:	46bd      	mov	sp, r7
   18028:	bc80      	pop	{r7}
   1802a:	4770      	bx	lr

0001802c <hri_port_read_OUT_reg>:
{
   1802c:	b480      	push	{r7}
   1802e:	b083      	sub	sp, #12
   18030:	af00      	add	r7, sp, #0
   18032:	6078      	str	r0, [r7, #4]
   18034:	460b      	mov	r3, r1
   18036:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   18038:	78fb      	ldrb	r3, [r7, #3]
   1803a:	687a      	ldr	r2, [r7, #4]
   1803c:	01db      	lsls	r3, r3, #7
   1803e:	4413      	add	r3, r2
   18040:	3310      	adds	r3, #16
   18042:	681b      	ldr	r3, [r3, #0]
}
   18044:	4618      	mov	r0, r3
   18046:	370c      	adds	r7, #12
   18048:	46bd      	mov	sp, r7
   1804a:	bc80      	pop	{r7}
   1804c:	4770      	bx	lr

0001804e <hri_port_read_IN_reg>:
{
   1804e:	b480      	push	{r7}
   18050:	b083      	sub	sp, #12
   18052:	af00      	add	r7, sp, #0
   18054:	6078      	str	r0, [r7, #4]
   18056:	460b      	mov	r3, r1
   18058:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   1805a:	78fb      	ldrb	r3, [r7, #3]
   1805c:	687a      	ldr	r2, [r7, #4]
   1805e:	01db      	lsls	r3, r3, #7
   18060:	4413      	add	r3, r2
   18062:	3320      	adds	r3, #32
   18064:	681b      	ldr	r3, [r3, #0]
}
   18066:	4618      	mov	r0, r3
   18068:	370c      	adds	r7, #12
   1806a:	46bd      	mov	sp, r7
   1806c:	bc80      	pop	{r7}
   1806e:	4770      	bx	lr

00018070 <_gpio_get_level>:
{
   18070:	b580      	push	{r7, lr}
   18072:	b086      	sub	sp, #24
   18074:	af00      	add	r7, sp, #0
   18076:	4603      	mov	r3, r0
   18078:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
   1807a:	f107 030c 	add.w	r3, r7, #12
   1807e:	4618      	mov	r0, r3
   18080:	4b13      	ldr	r3, [pc, #76]	; (180d0 <_gpio_get_level+0x60>)
   18082:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   18084:	79fb      	ldrb	r3, [r7, #7]
   18086:	4619      	mov	r1, r3
   18088:	4812      	ldr	r0, [pc, #72]	; (180d4 <_gpio_get_level+0x64>)
   1808a:	4b13      	ldr	r3, [pc, #76]	; (180d8 <_gpio_get_level+0x68>)
   1808c:	4798      	blx	r3
   1808e:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   18090:	79fb      	ldrb	r3, [r7, #7]
   18092:	4619      	mov	r1, r3
   18094:	480f      	ldr	r0, [pc, #60]	; (180d4 <_gpio_get_level+0x64>)
   18096:	4b11      	ldr	r3, [pc, #68]	; (180dc <_gpio_get_level+0x6c>)
   18098:	4798      	blx	r3
   1809a:	4602      	mov	r2, r0
   1809c:	697b      	ldr	r3, [r7, #20]
   1809e:	43db      	mvns	r3, r3
   180a0:	4013      	ands	r3, r2
   180a2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   180a4:	79fb      	ldrb	r3, [r7, #7]
   180a6:	4619      	mov	r1, r3
   180a8:	480a      	ldr	r0, [pc, #40]	; (180d4 <_gpio_get_level+0x64>)
   180aa:	4b0d      	ldr	r3, [pc, #52]	; (180e0 <_gpio_get_level+0x70>)
   180ac:	4798      	blx	r3
   180ae:	4602      	mov	r2, r0
   180b0:	697b      	ldr	r3, [r7, #20]
   180b2:	4013      	ands	r3, r2
   180b4:	693a      	ldr	r2, [r7, #16]
   180b6:	4313      	orrs	r3, r2
   180b8:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
   180ba:	f107 030c 	add.w	r3, r7, #12
   180be:	4618      	mov	r0, r3
   180c0:	4b08      	ldr	r3, [pc, #32]	; (180e4 <_gpio_get_level+0x74>)
   180c2:	4798      	blx	r3
	return tmp;
   180c4:	693b      	ldr	r3, [r7, #16]
}
   180c6:	4618      	mov	r0, r3
   180c8:	3718      	adds	r7, #24
   180ca:	46bd      	mov	sp, r7
   180cc:	bd80      	pop	{r7, pc}
   180ce:	bf00      	nop
   180d0:	00010cad 	.word	0x00010cad
   180d4:	41008000 	.word	0x41008000
   180d8:	0001800d 	.word	0x0001800d
   180dc:	0001804f 	.word	0x0001804f
   180e0:	0001802d 	.word	0x0001802d
   180e4:	00010cd3 	.word	0x00010cd3

000180e8 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   180e8:	b580      	push	{r7, lr}
   180ea:	b082      	sub	sp, #8
   180ec:	af00      	add	r7, sp, #0
   180ee:	4603      	mov	r3, r0
   180f0:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   180f2:	79fb      	ldrb	r3, [r7, #7]
   180f4:	115b      	asrs	r3, r3, #5
   180f6:	b2db      	uxtb	r3, r3
   180f8:	4618      	mov	r0, r3
   180fa:	4b09      	ldr	r3, [pc, #36]	; (18120 <gpio_get_pin_level+0x38>)
   180fc:	4798      	blx	r3
   180fe:	4601      	mov	r1, r0
   18100:	79fb      	ldrb	r3, [r7, #7]
   18102:	f003 031f 	and.w	r3, r3, #31
   18106:	2201      	movs	r2, #1
   18108:	fa02 f303 	lsl.w	r3, r2, r3
   1810c:	400b      	ands	r3, r1
   1810e:	2b00      	cmp	r3, #0
   18110:	bf14      	ite	ne
   18112:	2301      	movne	r3, #1
   18114:	2300      	moveq	r3, #0
   18116:	b2db      	uxtb	r3, r3
}
   18118:	4618      	mov	r0, r3
   1811a:	3708      	adds	r7, #8
   1811c:	46bd      	mov	sp, r7
   1811e:	bd80      	pop	{r7, pc}
   18120:	00018071 	.word	0x00018071

00018124 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   18124:	b480      	push	{r7}
   18126:	b083      	sub	sp, #12
   18128:	af00      	add	r7, sp, #0
   1812a:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   1812c:	4b06      	ldr	r3, [pc, #24]	; (18148 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   1812e:	681b      	ldr	r3, [r3, #0]
   18130:	2201      	movs	r2, #1
   18132:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
   18134:	4b04      	ldr	r3, [pc, #16]	; (18148 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   18136:	681b      	ldr	r3, [r3, #0]
   18138:	2200      	movs	r2, #0
   1813a:	705a      	strb	r2, [r3, #1]
}
   1813c:	bf00      	nop
   1813e:	370c      	adds	r7, #12
   18140:	46bd      	mov	sp, r7
   18142:	bc80      	pop	{r7}
   18144:	4770      	bx	lr
   18146:	bf00      	nop
   18148:	2000a5b8 	.word	0x2000a5b8

0001814c <_ZL10USBPluggedv>:

static void USBPlugged(void){
   1814c:	b580      	push	{r7, lr}
   1814e:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
   18150:	2040      	movs	r0, #64	; 0x40
   18152:	4b0a      	ldr	r3, [pc, #40]	; (1817c <_ZL10USBPluggedv+0x30>)
   18154:	4798      	blx	r3
   18156:	4603      	mov	r3, r0
   18158:	2b00      	cmp	r3, #0
   1815a:	d004      	beq.n	18166 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
   1815c:	4b08      	ldr	r3, [pc, #32]	; (18180 <_ZL10USBPluggedv+0x34>)
   1815e:	681b      	ldr	r3, [r3, #0]
   18160:	2201      	movs	r2, #1
   18162:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
   18164:	e007      	b.n	18176 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
   18166:	4b06      	ldr	r3, [pc, #24]	; (18180 <_ZL10USBPluggedv+0x34>)
   18168:	681b      	ldr	r3, [r3, #0]
   1816a:	2200      	movs	r2, #0
   1816c:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
   1816e:	4b04      	ldr	r3, [pc, #16]	; (18180 <_ZL10USBPluggedv+0x34>)
   18170:	681b      	ldr	r3, [r3, #0]
   18172:	2200      	movs	r2, #0
   18174:	701a      	strb	r2, [r3, #0]
}
   18176:	bf00      	nop
   18178:	bd80      	pop	{r7, pc}
   1817a:	bf00      	nop
   1817c:	000180e9 	.word	0x000180e9
   18180:	2000a5b8 	.word	0x2000a5b8

00018184 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   18184:	b480      	push	{r7}
   18186:	b083      	sub	sp, #12
   18188:	af00      	add	r7, sp, #0
   1818a:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   1818c:	4a04      	ldr	r2, [pc, #16]	; (181a0 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   1818e:	687b      	ldr	r3, [r7, #4]
   18190:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
   18192:	687b      	ldr	r3, [r7, #4]
   18194:	4618      	mov	r0, r3
   18196:	370c      	adds	r7, #12
   18198:	46bd      	mov	sp, r7
   1819a:	bc80      	pop	{r7}
   1819c:	4770      	bx	lr
   1819e:	bf00      	nop
   181a0:	2000a5b8 	.word	0x2000a5b8

000181a4 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   181a4:	b480      	push	{r7}
   181a6:	b083      	sub	sp, #12
   181a8:	af00      	add	r7, sp, #0
   181aa:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   181ac:	687b      	ldr	r3, [r7, #4]
   181ae:	4618      	mov	r0, r3
   181b0:	370c      	adds	r7, #12
   181b2:	46bd      	mov	sp, r7
   181b4:	bc80      	pop	{r7}
   181b6:	4770      	bx	lr

000181b8 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   181b8:	b580      	push	{r7, lr}
   181ba:	b082      	sub	sp, #8
   181bc:	af00      	add	r7, sp, #0
   181be:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
   181c0:	491f      	ldr	r1, [pc, #124]	; (18240 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   181c2:	2040      	movs	r0, #64	; 0x40
   181c4:	4b1f      	ldr	r3, [pc, #124]	; (18244 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   181c6:	4798      	blx	r3
		if (usbTerminalTimer.Init())
   181c8:	481f      	ldr	r0, [pc, #124]	; (18248 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   181ca:	4b20      	ldr	r3, [pc, #128]	; (1824c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   181cc:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   181ce:	2040      	movs	r0, #64	; 0x40
   181d0:	4b1f      	ldr	r3, [pc, #124]	; (18250 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   181d2:	4798      	blx	r3
   181d4:	4603      	mov	r3, r0
   181d6:	461a      	mov	r2, r3
   181d8:	687b      	ldr	r3, [r7, #4]
   181da:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   181dc:	687b      	ldr	r3, [r7, #4]
   181de:	78db      	ldrb	r3, [r3, #3]
   181e0:	2b00      	cmp	r3, #0
   181e2:	d024      	beq.n	1822e <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
   181e4:	687b      	ldr	r3, [r7, #4]
   181e6:	2200      	movs	r2, #0
   181e8:	709a      	strb	r2, [r3, #2]
			plugged=true;
   181ea:	687b      	ldr	r3, [r7, #4]
   181ec:	2201      	movs	r2, #1
   181ee:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   181f0:	f44f 7216 	mov.w	r2, #600	; 0x258
   181f4:	4917      	ldr	r1, [pc, #92]	; (18254 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
   181f6:	4814      	ldr	r0, [pc, #80]	; (18248 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   181f8:	4b17      	ldr	r3, [pc, #92]	; (18258 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
   181fa:	4798      	blx	r3
			usbTerminalTimer.Start();
   181fc:	4812      	ldr	r0, [pc, #72]	; (18248 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   181fe:	4b17      	ldr	r3, [pc, #92]	; (1825c <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
   18200:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   18202:	4817      	ldr	r0, [pc, #92]	; (18260 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
   18204:	4b17      	ldr	r3, [pc, #92]	; (18264 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
   18206:	4798      	blx	r3
   18208:	4603      	mov	r3, r0
   1820a:	f083 0301 	eor.w	r3, r3, #1
   1820e:	b2db      	uxtb	r3, r3
   18210:	2b00      	cmp	r3, #0
   18212:	d008      	beq.n	18226 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
   18214:	687b      	ldr	r3, [r7, #4]
   18216:	789b      	ldrb	r3, [r3, #2]
   18218:	b2db      	uxtb	r3, r3
   1821a:	2b00      	cmp	r3, #0
   1821c:	d0f1      	beq.n	18202 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
   1821e:	687b      	ldr	r3, [r7, #4]
   18220:	2200      	movs	r2, #0
   18222:	701a      	strb	r2, [r3, #0]
					return;
   18224:	e009      	b.n	1823a <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   18226:	4808      	ldr	r0, [pc, #32]	; (18248 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   18228:	4b0f      	ldr	r3, [pc, #60]	; (18268 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
   1822a:	4798      	blx	r3
   1822c:	e005      	b.n	1823a <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
   1822e:	687b      	ldr	r3, [r7, #4]
   18230:	2200      	movs	r2, #0
   18232:	701a      	strb	r2, [r3, #0]
			plugged=false;
   18234:	687b      	ldr	r3, [r7, #4]
   18236:	2200      	movs	r2, #0
   18238:	705a      	strb	r2, [r3, #1]
		}
		
}
   1823a:	3708      	adds	r7, #8
   1823c:	46bd      	mov	sp, r7
   1823e:	bd80      	pop	{r7, pc}
   18240:	0001814d 	.word	0x0001814d
   18244:	00006035 	.word	0x00006035
   18248:	2000a610 	.word	0x2000a610
   1824c:	00018345 	.word	0x00018345
   18250:	000180e9 	.word	0x000180e9
   18254:	00018125 	.word	0x00018125
   18258:	00018459 	.word	0x00018459
   1825c:	0001837d 	.word	0x0001837d
   18260:	2000a558 	.word	0x2000a558
   18264:	0001798d 	.word	0x0001798d
   18268:	000183a1 	.word	0x000183a1

0001826c <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
   1826c:	b580      	push	{r7, lr}
   1826e:	b082      	sub	sp, #8
   18270:	af00      	add	r7, sp, #0
   18272:	6078      	str	r0, [r7, #4]
   18274:	6039      	str	r1, [r7, #0]
   18276:	687b      	ldr	r3, [r7, #4]
   18278:	2b01      	cmp	r3, #1
   1827a:	d10c      	bne.n	18296 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   1827c:	683b      	ldr	r3, [r7, #0]
   1827e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18282:	4293      	cmp	r3, r2
   18284:	d107      	bne.n	18296 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   18286:	4806      	ldr	r0, [pc, #24]	; (182a0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   18288:	4b06      	ldr	r3, [pc, #24]	; (182a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1828a:	4798      	blx	r3
   1828c:	4a06      	ldr	r2, [pc, #24]	; (182a8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1828e:	4907      	ldr	r1, [pc, #28]	; (182ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
   18290:	4803      	ldr	r0, [pc, #12]	; (182a0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   18292:	4b07      	ldr	r3, [pc, #28]	; (182b0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   18294:	4798      	blx	r3
   18296:	bf00      	nop
   18298:	3708      	adds	r7, #8
   1829a:	46bd      	mov	sp, r7
   1829c:	bd80      	pop	{r7, pc}
   1829e:	bf00      	nop
   182a0:	2000a558 	.word	0x2000a558
   182a4:	000178dd 	.word	0x000178dd
   182a8:	20000000 	.word	0x20000000
   182ac:	00017925 	.word	0x00017925
   182b0:	0001949d 	.word	0x0001949d

000182b4 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
   182b4:	b580      	push	{r7, lr}
   182b6:	af00      	add	r7, sp, #0
   182b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   182bc:	2001      	movs	r0, #1
   182be:	4b01      	ldr	r3, [pc, #4]	; (182c4 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
   182c0:	4798      	blx	r3
   182c2:	bd80      	pop	{r7, pc}
   182c4:	0001826d 	.word	0x0001826d

000182c8 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   182c8:	b580      	push	{r7, lr}
   182ca:	b082      	sub	sp, #8
   182cc:	af00      	add	r7, sp, #0
   182ce:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
   182d0:	4b04      	ldr	r3, [pc, #16]	; (182e4 <_ZL7task_cbPK10timer_task+0x1c>)
   182d2:	681b      	ldr	r3, [r3, #0]
   182d4:	4618      	mov	r0, r3
   182d6:	4b04      	ldr	r3, [pc, #16]	; (182e8 <_ZL7task_cbPK10timer_task+0x20>)
   182d8:	4798      	blx	r3
}
   182da:	bf00      	nop
   182dc:	3708      	adds	r7, #8
   182de:	46bd      	mov	sp, r7
   182e0:	bd80      	pop	{r7, pc}
   182e2:	bf00      	nop
   182e4:	2000a5bc 	.word	0x2000a5bc
   182e8:	000183c9 	.word	0x000183c9

000182ec <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
   182ec:	b480      	push	{r7}
   182ee:	b083      	sub	sp, #12
   182f0:	af00      	add	r7, sp, #0
   182f2:	6078      	str	r0, [r7, #4]
   182f4:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   182f6:	687b      	ldr	r3, [r7, #4]
   182f8:	683a      	ldr	r2, [r7, #0]
   182fa:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
   182fc:	4a08      	ldr	r2, [pc, #32]	; (18320 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
   182fe:	687b      	ldr	r3, [r7, #4]
   18300:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   18302:	687b      	ldr	r3, [r7, #4]
   18304:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18308:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
   1830a:	687b      	ldr	r3, [r7, #4]
   1830c:	689b      	ldr	r3, [r3, #8]
   1830e:	4a05      	ldr	r2, [pc, #20]	; (18324 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
   18310:	60da      	str	r2, [r3, #12]
} //Timer_Class
   18312:	687b      	ldr	r3, [r7, #4]
   18314:	4618      	mov	r0, r3
   18316:	370c      	adds	r7, #12
   18318:	46bd      	mov	sp, r7
   1831a:	bc80      	pop	{r7}
   1831c:	4770      	bx	lr
   1831e:	bf00      	nop
   18320:	2000a5bc 	.word	0x2000a5bc
   18324:	000182c9 	.word	0x000182c9

00018328 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
   18328:	b480      	push	{r7}
   1832a:	b083      	sub	sp, #12
   1832c:	af00      	add	r7, sp, #0
   1832e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   18330:	687b      	ldr	r3, [r7, #4]
   18332:	2200      	movs	r2, #0
   18334:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   18336:	687b      	ldr	r3, [r7, #4]
   18338:	4618      	mov	r0, r3
   1833a:	370c      	adds	r7, #12
   1833c:	46bd      	mov	sp, r7
   1833e:	bc80      	pop	{r7}
   18340:	4770      	bx	lr
	...

00018344 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
   18344:	b580      	push	{r7, lr}
   18346:	b082      	sub	sp, #8
   18348:	af00      	add	r7, sp, #0
   1834a:	6078      	str	r0, [r7, #4]
	
	ticks=0;
   1834c:	687b      	ldr	r3, [r7, #4]
   1834e:	2200      	movs	r2, #0
   18350:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
   18352:	6878      	ldr	r0, [r7, #4]
   18354:	4b08      	ldr	r3, [pc, #32]	; (18378 <_ZN17TimerSerial_Class4InitEv+0x34>)
   18356:	4798      	blx	r3
   18358:	4603      	mov	r3, r0
   1835a:	2b00      	cmp	r3, #0
   1835c:	bf0c      	ite	eq
   1835e:	2301      	moveq	r3, #1
   18360:	2300      	movne	r3, #0
   18362:	b2da      	uxtb	r2, r3
   18364:	687b      	ldr	r3, [r7, #4]
   18366:	709a      	strb	r2, [r3, #2]
	return isOK;
   18368:	687b      	ldr	r3, [r7, #4]
   1836a:	789b      	ldrb	r3, [r3, #2]
   1836c:	b2db      	uxtb	r3, r3
}
   1836e:	4618      	mov	r0, r3
   18370:	3708      	adds	r7, #8
   18372:	46bd      	mov	sp, r7
   18374:	bd80      	pop	{r7, pc}
   18376:	bf00      	nop
   18378:	0001837d 	.word	0x0001837d

0001837c <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
   1837c:	b580      	push	{r7, lr}
   1837e:	b084      	sub	sp, #16
   18380:	af00      	add	r7, sp, #0
   18382:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   18384:	687b      	ldr	r3, [r7, #4]
   18386:	691b      	ldr	r3, [r3, #16]
   18388:	4618      	mov	r0, r3
   1838a:	4b04      	ldr	r3, [pc, #16]	; (1839c <_ZN17TimerSerial_Class5StartEv+0x20>)
   1838c:	4798      	blx	r3
   1838e:	60f8      	str	r0, [r7, #12]
	return status;
   18390:	68fb      	ldr	r3, [r7, #12]
	
}
   18392:	4618      	mov	r0, r3
   18394:	3710      	adds	r7, #16
   18396:	46bd      	mov	sp, r7
   18398:	bd80      	pop	{r7, pc}
   1839a:	bf00      	nop
   1839c:	00006fc5 	.word	0x00006fc5

000183a0 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
   183a0:	b580      	push	{r7, lr}
   183a2:	b084      	sub	sp, #16
   183a4:	af00      	add	r7, sp, #0
   183a6:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   183a8:	687b      	ldr	r3, [r7, #4]
   183aa:	691b      	ldr	r3, [r3, #16]
   183ac:	4618      	mov	r0, r3
   183ae:	4b05      	ldr	r3, [pc, #20]	; (183c4 <_ZN17TimerSerial_Class4StopEv+0x24>)
   183b0:	4798      	blx	r3
   183b2:	60f8      	str	r0, [r7, #12]
	timeout=0;
   183b4:	687b      	ldr	r3, [r7, #4]
   183b6:	2200      	movs	r2, #0
   183b8:	705a      	strb	r2, [r3, #1]
	return status;
   183ba:	68fb      	ldr	r3, [r7, #12]
}
   183bc:	4618      	mov	r0, r3
   183be:	3710      	adds	r7, #16
   183c0:	46bd      	mov	sp, r7
   183c2:	bd80      	pop	{r7, pc}
   183c4:	0000702d 	.word	0x0000702d

000183c8 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
   183c8:	b480      	push	{r7}
   183ca:	b083      	sub	sp, #12
   183cc:	af00      	add	r7, sp, #0
   183ce:	6078      	str	r0, [r7, #4]
	timeout=1;
   183d0:	687b      	ldr	r3, [r7, #4]
   183d2:	2201      	movs	r2, #1
   183d4:	705a      	strb	r2, [r3, #1]
}
   183d6:	bf00      	nop
   183d8:	370c      	adds	r7, #12
   183da:	46bd      	mov	sp, r7
   183dc:	bc80      	pop	{r7}
   183de:	4770      	bx	lr

000183e0 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   183e0:	b580      	push	{r7, lr}
   183e2:	b086      	sub	sp, #24
   183e4:	af00      	add	r7, sp, #0
   183e6:	60f8      	str	r0, [r7, #12]
   183e8:	60b9      	str	r1, [r7, #8]
   183ea:	607a      	str	r2, [r7, #4]
   183ec:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   183ee:	68f8      	ldr	r0, [r7, #12]
   183f0:	4b0d      	ldr	r3, [pc, #52]	; (18428 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   183f2:	4798      	blx	r3
	task->interval = interval;
   183f4:	68fb      	ldr	r3, [r7, #12]
   183f6:	689b      	ldr	r3, [r3, #8]
   183f8:	687a      	ldr	r2, [r7, #4]
   183fa:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   183fc:	68fb      	ldr	r3, [r7, #12]
   183fe:	689b      	ldr	r3, [r3, #8]
   18400:	68ba      	ldr	r2, [r7, #8]
   18402:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   18404:	68fb      	ldr	r3, [r7, #12]
   18406:	689b      	ldr	r3, [r3, #8]
   18408:	78fa      	ldrb	r2, [r7, #3]
   1840a:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   1840c:	68fb      	ldr	r3, [r7, #12]
   1840e:	691a      	ldr	r2, [r3, #16]
   18410:	68fb      	ldr	r3, [r7, #12]
   18412:	689b      	ldr	r3, [r3, #8]
   18414:	4619      	mov	r1, r3
   18416:	4610      	mov	r0, r2
   18418:	4b04      	ldr	r3, [pc, #16]	; (1842c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   1841a:	4798      	blx	r3
   1841c:	6178      	str	r0, [r7, #20]
	
	return status;
   1841e:	697b      	ldr	r3, [r7, #20]
}
   18420:	4618      	mov	r0, r3
   18422:	3718      	adds	r7, #24
   18424:	46bd      	mov	sp, r7
   18426:	bd80      	pop	{r7, pc}
   18428:	0001853d 	.word	0x0001853d
   1842c:	00007099 	.word	0x00007099

00018430 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   18430:	b590      	push	{r4, r7, lr}
   18432:	b087      	sub	sp, #28
   18434:	af00      	add	r7, sp, #0
   18436:	60f8      	str	r0, [r7, #12]
   18438:	60b9      	str	r1, [r7, #8]
   1843a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   1843c:	2301      	movs	r3, #1
   1843e:	687a      	ldr	r2, [r7, #4]
   18440:	68b9      	ldr	r1, [r7, #8]
   18442:	68f8      	ldr	r0, [r7, #12]
   18444:	4c03      	ldr	r4, [pc, #12]	; (18454 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
   18446:	47a0      	blx	r4
   18448:	6178      	str	r0, [r7, #20]
		return status;
   1844a:	697b      	ldr	r3, [r7, #20]
}
   1844c:	4618      	mov	r0, r3
   1844e:	371c      	adds	r7, #28
   18450:	46bd      	mov	sp, r7
   18452:	bd90      	pop	{r4, r7, pc}
   18454:	000183e1 	.word	0x000183e1

00018458 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
   18458:	b590      	push	{r4, r7, lr}
   1845a:	b087      	sub	sp, #28
   1845c:	af00      	add	r7, sp, #0
   1845e:	60f8      	str	r0, [r7, #12]
   18460:	60b9      	str	r1, [r7, #8]
   18462:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   18464:	2300      	movs	r3, #0
   18466:	687a      	ldr	r2, [r7, #4]
   18468:	68b9      	ldr	r1, [r7, #8]
   1846a:	68f8      	ldr	r0, [r7, #12]
   1846c:	4c03      	ldr	r4, [pc, #12]	; (1847c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
   1846e:	47a0      	blx	r4
   18470:	6178      	str	r0, [r7, #20]
	return status;
   18472:	697b      	ldr	r3, [r7, #20]
}
   18474:	4618      	mov	r0, r3
   18476:	371c      	adds	r7, #28
   18478:	46bd      	mov	sp, r7
   1847a:	bd90      	pop	{r4, r7, pc}
   1847c:	000183e1 	.word	0x000183e1

00018480 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   18480:	b590      	push	{r4, r7, lr}
   18482:	b087      	sub	sp, #28
   18484:	af00      	add	r7, sp, #0
   18486:	60f8      	str	r0, [r7, #12]
   18488:	60b9      	str	r1, [r7, #8]
   1848a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   1848c:	2300      	movs	r3, #0
   1848e:	687a      	ldr	r2, [r7, #4]
   18490:	68b9      	ldr	r1, [r7, #8]
   18492:	68f8      	ldr	r0, [r7, #12]
   18494:	4c06      	ldr	r4, [pc, #24]	; (184b0 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
   18496:	47a0      	blx	r4
   18498:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   1849a:	68fb      	ldr	r3, [r7, #12]
   1849c:	691b      	ldr	r3, [r3, #16]
   1849e:	4618      	mov	r0, r3
   184a0:	4b04      	ldr	r3, [pc, #16]	; (184b4 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
   184a2:	4798      	blx	r3
   184a4:	6178      	str	r0, [r7, #20]
	return status;
   184a6:	697b      	ldr	r3, [r7, #20]
}
   184a8:	4618      	mov	r0, r3
   184aa:	371c      	adds	r7, #28
   184ac:	46bd      	mov	sp, r7
   184ae:	bd90      	pop	{r4, r7, pc}
   184b0:	000183e1 	.word	0x000183e1
   184b4:	00006fc5 	.word	0x00006fc5

000184b8 <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
   184b8:	b580      	push	{r7, lr}
   184ba:	b082      	sub	sp, #8
   184bc:	af00      	add	r7, sp, #0
   184be:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
   184c0:	687b      	ldr	r3, [r7, #4]
   184c2:	691a      	ldr	r2, [r3, #16]
   184c4:	687b      	ldr	r3, [r7, #4]
   184c6:	689b      	ldr	r3, [r3, #8]
   184c8:	4619      	mov	r1, r3
   184ca:	4610      	mov	r0, r2
   184cc:	4b04      	ldr	r3, [pc, #16]	; (184e0 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
   184ce:	4798      	blx	r3
	task->cb=NULL;
   184d0:	687b      	ldr	r3, [r7, #4]
   184d2:	689b      	ldr	r3, [r3, #8]
   184d4:	2200      	movs	r2, #0
   184d6:	60da      	str	r2, [r3, #12]
}
   184d8:	bf00      	nop
   184da:	3708      	adds	r7, #8
   184dc:	46bd      	mov	sp, r7
   184de:	bd80      	pop	{r7, pc}
   184e0:	0000719d 	.word	0x0000719d

000184e4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
   184e4:	b580      	push	{r7, lr}
   184e6:	b082      	sub	sp, #8
   184e8:	af00      	add	r7, sp, #0
   184ea:	6078      	str	r0, [r7, #4]
   184ec:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   184ee:	6839      	ldr	r1, [r7, #0]
   184f0:	6878      	ldr	r0, [r7, #4]
   184f2:	4b0f      	ldr	r3, [pc, #60]	; (18530 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
   184f4:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   184f6:	687b      	ldr	r3, [r7, #4]
   184f8:	691b      	ldr	r3, [r3, #16]
   184fa:	f103 0218 	add.w	r2, r3, #24
   184fe:	687b      	ldr	r3, [r7, #4]
   18500:	689b      	ldr	r3, [r3, #8]
   18502:	4619      	mov	r1, r3
   18504:	4610      	mov	r0, r2
   18506:	4b0b      	ldr	r3, [pc, #44]	; (18534 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
   18508:	4798      	blx	r3
   1850a:	4603      	mov	r3, r0
   1850c:	2b00      	cmp	r3, #0
   1850e:	d007      	beq.n	18520 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   18510:	687b      	ldr	r3, [r7, #4]
   18512:	691a      	ldr	r2, [r3, #16]
   18514:	687b      	ldr	r3, [r7, #4]
   18516:	689b      	ldr	r3, [r3, #8]
   18518:	4619      	mov	r1, r3
   1851a:	4610      	mov	r0, r2
   1851c:	4b06      	ldr	r3, [pc, #24]	; (18538 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
   1851e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   18520:	687b      	ldr	r3, [r7, #4]
   18522:	689b      	ldr	r3, [r3, #8]
   18524:	2200      	movs	r2, #0
   18526:	60da      	str	r2, [r3, #12]
}
   18528:	bf00      	nop
   1852a:	3708      	adds	r7, #8
   1852c:	46bd      	mov	sp, r7
   1852e:	bd80      	pop	{r7, pc}
   18530:	00018595 	.word	0x00018595
   18534:	00007d85 	.word	0x00007d85
   18538:	0000719d 	.word	0x0000719d

0001853c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
   1853c:	b480      	push	{r7}
   1853e:	b085      	sub	sp, #20
   18540:	af00      	add	r7, sp, #0
   18542:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   18544:	2300      	movs	r3, #0
   18546:	73fb      	strb	r3, [r7, #15]
   18548:	7bfb      	ldrb	r3, [r7, #15]
   1854a:	2b03      	cmp	r3, #3
   1854c:	dc18      	bgt.n	18580 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
   1854e:	7bfa      	ldrb	r2, [r7, #15]
   18550:	490f      	ldr	r1, [pc, #60]	; (18590 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   18552:	4613      	mov	r3, r2
   18554:	009b      	lsls	r3, r3, #2
   18556:	4413      	add	r3, r2
   18558:	009b      	lsls	r3, r3, #2
   1855a:	440b      	add	r3, r1
   1855c:	330c      	adds	r3, #12
   1855e:	681b      	ldr	r3, [r3, #0]
   18560:	2b00      	cmp	r3, #0
   18562:	d109      	bne.n	18578 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
   18564:	7bfa      	ldrb	r2, [r7, #15]
   18566:	4613      	mov	r3, r2
   18568:	009b      	lsls	r3, r3, #2
   1856a:	4413      	add	r3, r2
   1856c:	009b      	lsls	r3, r3, #2
   1856e:	4a08      	ldr	r2, [pc, #32]	; (18590 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   18570:	441a      	add	r2, r3
   18572:	687b      	ldr	r3, [r7, #4]
   18574:	609a      	str	r2, [r3, #8]
			return;
   18576:	e006      	b.n	18586 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   18578:	7bfb      	ldrb	r3, [r7, #15]
   1857a:	3301      	adds	r3, #1
   1857c:	73fb      	strb	r3, [r7, #15]
   1857e:	e7e3      	b.n	18548 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
   18580:	687b      	ldr	r3, [r7, #4]
   18582:	4a03      	ldr	r2, [pc, #12]	; (18590 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   18584:	609a      	str	r2, [r3, #8]

}
   18586:	3714      	adds	r7, #20
   18588:	46bd      	mov	sp, r7
   1858a:	bc80      	pop	{r7}
   1858c:	4770      	bx	lr
   1858e:	bf00      	nop
   18590:	2000a5c0 	.word	0x2000a5c0

00018594 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
   18594:	b480      	push	{r7}
   18596:	b085      	sub	sp, #20
   18598:	af00      	add	r7, sp, #0
   1859a:	6078      	str	r0, [r7, #4]
   1859c:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   1859e:	2300      	movs	r3, #0
   185a0:	73fb      	strb	r3, [r7, #15]
   185a2:	7bfb      	ldrb	r3, [r7, #15]
   185a4:	2b03      	cmp	r3, #3
   185a6:	dc19      	bgt.n	185dc <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   185a8:	7bfa      	ldrb	r2, [r7, #15]
   185aa:	490e      	ldr	r1, [pc, #56]	; (185e4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
   185ac:	4613      	mov	r3, r2
   185ae:	009b      	lsls	r3, r3, #2
   185b0:	4413      	add	r3, r2
   185b2:	009b      	lsls	r3, r3, #2
   185b4:	440b      	add	r3, r1
   185b6:	330c      	adds	r3, #12
   185b8:	681a      	ldr	r2, [r3, #0]
   185ba:	683b      	ldr	r3, [r7, #0]
   185bc:	429a      	cmp	r2, r3
   185be:	d109      	bne.n	185d4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   185c0:	7bfa      	ldrb	r2, [r7, #15]
   185c2:	4613      	mov	r3, r2
   185c4:	009b      	lsls	r3, r3, #2
   185c6:	4413      	add	r3, r2
   185c8:	009b      	lsls	r3, r3, #2
   185ca:	4a06      	ldr	r2, [pc, #24]	; (185e4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
   185cc:	441a      	add	r2, r3
   185ce:	687b      	ldr	r3, [r7, #4]
   185d0:	609a      	str	r2, [r3, #8]
			return;
   185d2:	e003      	b.n	185dc <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   185d4:	7bfb      	ldrb	r3, [r7, #15]
   185d6:	3301      	adds	r3, #1
   185d8:	73fb      	strb	r3, [r7, #15]
   185da:	e7e2      	b.n	185a2 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
   185dc:	3714      	adds	r7, #20
   185de:	46bd      	mov	sp, r7
   185e0:	bc80      	pop	{r7}
   185e2:	4770      	bx	lr
   185e4:	2000a5c0 	.word	0x2000a5c0

000185e8 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   185e8:	b580      	push	{r7, lr}
   185ea:	b082      	sub	sp, #8
   185ec:	af00      	add	r7, sp, #0
   185ee:	6078      	str	r0, [r7, #4]
   185f0:	6039      	str	r1, [r7, #0]
   185f2:	687b      	ldr	r3, [r7, #4]
   185f4:	2b01      	cmp	r3, #1
   185f6:	d116      	bne.n	18626 <_Z41__static_initialization_and_destruction_0ii+0x3e>
   185f8:	683b      	ldr	r3, [r7, #0]
   185fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   185fe:	4293      	cmp	r3, r2
   18600:	d111      	bne.n	18626 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
   18602:	490b      	ldr	r1, [pc, #44]	; (18630 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   18604:	480b      	ldr	r0, [pc, #44]	; (18634 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   18606:	4b0c      	ldr	r3, [pc, #48]	; (18638 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   18608:	4798      	blx	r3
   1860a:	4a0c      	ldr	r2, [pc, #48]	; (1863c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1860c:	490c      	ldr	r1, [pc, #48]	; (18640 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   1860e:	4809      	ldr	r0, [pc, #36]	; (18634 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   18610:	4b0c      	ldr	r3, [pc, #48]	; (18644 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   18612:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   18614:	490c      	ldr	r1, [pc, #48]	; (18648 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   18616:	480d      	ldr	r0, [pc, #52]	; (1864c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   18618:	4b07      	ldr	r3, [pc, #28]	; (18638 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   1861a:	4798      	blx	r3
   1861c:	4a07      	ldr	r2, [pc, #28]	; (1863c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1861e:	4908      	ldr	r1, [pc, #32]	; (18640 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   18620:	480a      	ldr	r0, [pc, #40]	; (1864c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   18622:	4b08      	ldr	r3, [pc, #32]	; (18644 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   18624:	4798      	blx	r3
   18626:	bf00      	nop
   18628:	3708      	adds	r7, #8
   1862a:	46bd      	mov	sp, r7
   1862c:	bd80      	pop	{r7, pc}
   1862e:	bf00      	nop
   18630:	2000aa68 	.word	0x2000aa68
   18634:	2000a610 	.word	0x2000a610
   18638:	000182ed 	.word	0x000182ed
   1863c:	20000000 	.word	0x20000000
   18640:	00018329 	.word	0x00018329
   18644:	0001949d 	.word	0x0001949d
   18648:	2000a9a0 	.word	0x2000a9a0
   1864c:	2000a630 	.word	0x2000a630

00018650 <_GLOBAL__sub_I_ptrTimerSerialClass>:
   18650:	b580      	push	{r7, lr}
   18652:	af00      	add	r7, sp, #0
   18654:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18658:	2001      	movs	r0, #1
   1865a:	4b01      	ldr	r3, [pc, #4]	; (18660 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
   1865c:	4798      	blx	r3
   1865e:	bd80      	pop	{r7, pc}
   18660:	000185e9 	.word	0x000185e9

00018664 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   18664:	b480      	push	{r7}
   18666:	b083      	sub	sp, #12
   18668:	af00      	add	r7, sp, #0
   1866a:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   1866c:	4b04      	ldr	r3, [pc, #16]	; (18680 <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   1866e:	681b      	ldr	r3, [r3, #0]
   18670:	2201      	movs	r2, #1
   18672:	709a      	strb	r2, [r3, #2]
	asm("nop");
   18674:	bf00      	nop
}
   18676:	bf00      	nop
   18678:	370c      	adds	r7, #12
   1867a:	46bd      	mov	sp, r7
   1867c:	bc80      	pop	{r7}
   1867e:	4770      	bx	lr
   18680:	2000a6b0 	.word	0x2000a6b0

00018684 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   18684:	b480      	push	{r7}
   18686:	b083      	sub	sp, #12
   18688:	af00      	add	r7, sp, #0
   1868a:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   1868c:	687b      	ldr	r3, [r7, #4]
   1868e:	4618      	mov	r0, r3
   18690:	370c      	adds	r7, #12
   18692:	46bd      	mov	sp, r7
   18694:	bc80      	pop	{r7}
   18696:	4770      	bx	lr

00018698 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   18698:	b480      	push	{r7}
   1869a:	b083      	sub	sp, #12
   1869c:	af00      	add	r7, sp, #0
   1869e:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   186a0:	687b      	ldr	r3, [r7, #4]
   186a2:	4618      	mov	r0, r3
   186a4:	370c      	adds	r7, #12
   186a6:	46bd      	mov	sp, r7
   186a8:	bc80      	pop	{r7}
   186aa:	4770      	bx	lr

000186ac <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   186ac:	b580      	push	{r7, lr}
   186ae:	b084      	sub	sp, #16
   186b0:	af00      	add	r7, sp, #0
   186b2:	60f8      	str	r0, [r7, #12]
   186b4:	60b9      	str	r1, [r7, #8]
   186b6:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   186b8:	4a1a      	ldr	r2, [pc, #104]	; (18724 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x78>)
   186ba:	68fb      	ldr	r3, [r7, #12]
   186bc:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   186be:	68fb      	ldr	r3, [r7, #12]
   186c0:	68ba      	ldr	r2, [r7, #8]
   186c2:	64da      	str	r2, [r3, #76]	; 0x4c
	spiLT=spiLite;
   186c4:	68fb      	ldr	r3, [r7, #12]
   186c6:	687a      	ldr	r2, [r7, #4]
   186c8:	619a      	str	r2, [r3, #24]
	rx=spiLT->rxLiteBuffer;
   186ca:	68fb      	ldr	r3, [r7, #12]
   186cc:	699b      	ldr	r3, [r3, #24]
   186ce:	68da      	ldr	r2, [r3, #12]
   186d0:	68fb      	ldr	r3, [r7, #12]
   186d2:	625a      	str	r2, [r3, #36]	; 0x24
	tx=spiLT->txLiteBuffer;
   186d4:	68fb      	ldr	r3, [r7, #12]
   186d6:	699b      	ldr	r3, [r3, #24]
   186d8:	689a      	ldr	r2, [r3, #8]
   186da:	68fb      	ldr	r3, [r7, #12]
   186dc:	621a      	str	r2, [r3, #32]
	auxTimer=&hvacTimer;
   186de:	68fb      	ldr	r3, [r7, #12]
   186e0:	4a11      	ldr	r2, [pc, #68]	; (18728 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x7c>)
   186e2:	629a      	str	r2, [r3, #40]	; 0x28
	activeChannels[0]=4;
   186e4:	68fb      	ldr	r3, [r7, #12]
   186e6:	2204      	movs	r2, #4
   186e8:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=8;
   186ea:	68fb      	ldr	r3, [r7, #12]
   186ec:	2208      	movs	r2, #8
   186ee:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=15;
   186f0:	68fb      	ldr	r3, [r7, #12]
   186f2:	220f      	movs	r2, #15
   186f4:	715a      	strb	r2, [r3, #5]
	delay_ms(200);
   186f6:	20c8      	movs	r0, #200	; 0xc8
   186f8:	4b0c      	ldr	r3, [pc, #48]	; (1872c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   186fa:	4798      	blx	r3
	temperatureTimer.Init();
   186fc:	480c      	ldr	r0, [pc, #48]	; (18730 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   186fe:	4b0d      	ldr	r3, [pc, #52]	; (18734 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   18700:	4798      	blx	r3
	configure_channels();
   18702:	68f8      	ldr	r0, [r7, #12]
   18704:	4b0c      	ldr	r3, [pc, #48]	; (18738 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   18706:	4798      	blx	r3
	configure_global_parameters();
   18708:	68f8      	ldr	r0, [r7, #12]
   1870a:	4b0c      	ldr	r3, [pc, #48]	; (1873c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   1870c:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   1870e:	68fb      	ldr	r3, [r7, #12]
   18710:	2201      	movs	r2, #1
   18712:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   18714:	68f8      	ldr	r0, [r7, #12]
   18716:	4b0a      	ldr	r3, [pc, #40]	; (18740 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   18718:	4798      	blx	r3
   1871a:	4603      	mov	r3, r0
}
   1871c:	4618      	mov	r0, r3
   1871e:	3710      	adds	r7, #16
   18720:	46bd      	mov	sp, r7
   18722:	bd80      	pop	{r7, pc}
   18724:	2000a6b0 	.word	0x2000a6b0
   18728:	2000a4a0 	.word	0x2000a4a0
   1872c:	00005fa1 	.word	0x00005fa1
   18730:	2000a468 	.word	0x2000a468
   18734:	000173f9 	.word	0x000173f9
   18738:	00018ba1 	.word	0x00018ba1
   1873c:	00018c31 	.word	0x00018c31
   18740:	00018c69 	.word	0x00018c69

00018744 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   18744:	b590      	push	{r4, r7, lr}
   18746:	b089      	sub	sp, #36	; 0x24
   18748:	af02      	add	r7, sp, #8
   1874a:	60f8      	str	r0, [r7, #12]
   1874c:	60b9      	str	r1, [r7, #8]
   1874e:	603b      	str	r3, [r7, #0]
   18750:	4613      	mov	r3, r2
   18752:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   18754:	79fb      	ldrb	r3, [r7, #7]
   18756:	461a      	mov	r2, r3
   18758:	f44f 7100 	mov.w	r1, #512	; 0x200
   1875c:	68f8      	ldr	r0, [r7, #12]
   1875e:	4b0b      	ldr	r3, [pc, #44]	; (1878c <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   18760:	4798      	blx	r3
   18762:	4603      	mov	r3, r0
   18764:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   18766:	8afa      	ldrh	r2, [r7, #22]
   18768:	683b      	ldr	r3, [r7, #0]
   1876a:	9300      	str	r3, [sp, #0]
   1876c:	4613      	mov	r3, r2
   1876e:	2202      	movs	r2, #2
   18770:	68b9      	ldr	r1, [r7, #8]
   18772:	68f8      	ldr	r0, [r7, #12]
   18774:	4c06      	ldr	r4, [pc, #24]	; (18790 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   18776:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   18778:	8afb      	ldrh	r3, [r7, #22]
   1877a:	79fa      	ldrb	r2, [r7, #7]
   1877c:	68b9      	ldr	r1, [r7, #8]
   1877e:	68f8      	ldr	r0, [r7, #12]
   18780:	4c04      	ldr	r4, [pc, #16]	; (18794 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   18782:	47a0      	blx	r4
}
   18784:	bf00      	nop
   18786:	371c      	adds	r7, #28
   18788:	46bd      	mov	sp, r7
   1878a:	bd90      	pop	{r4, r7, pc}
   1878c:	00018b75 	.word	0x00018b75
   18790:	00018a21 	.word	0x00018a21
   18794:	000187e5 	.word	0x000187e5

00018798 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   18798:	b590      	push	{r4, r7, lr}
   1879a:	b087      	sub	sp, #28
   1879c:	af02      	add	r7, sp, #8
   1879e:	6078      	str	r0, [r7, #4]
   187a0:	460b      	mov	r3, r1
   187a2:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   187a4:	78fb      	ldrb	r3, [r7, #3]
   187a6:	687a      	ldr	r2, [r7, #4]
   187a8:	4413      	add	r3, r2
   187aa:	78db      	ldrb	r3, [r3, #3]
   187ac:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   187ae:	687b      	ldr	r3, [r7, #4]
   187b0:	2200      	movs	r2, #0
   187b2:	705a      	strb	r2, [r3, #1]
	ready=false;
   187b4:	687b      	ldr	r3, [r7, #4]
   187b6:	2200      	movs	r2, #0
   187b8:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   187ba:	687b      	ldr	r3, [r7, #4]
   187bc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   187be:	7bfb      	ldrb	r3, [r7, #15]
   187c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   187c4:	b2db      	uxtb	r3, r3
   187c6:	9300      	str	r3, [sp, #0]
   187c8:	2300      	movs	r3, #0
   187ca:	2202      	movs	r2, #2
   187cc:	6878      	ldr	r0, [r7, #4]
   187ce:	4c04      	ldr	r4, [pc, #16]	; (187e0 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   187d0:	47a0      	blx	r4
	channelOnProcess=channel_number;
   187d2:	687b      	ldr	r3, [r7, #4]
   187d4:	7bfa      	ldrb	r2, [r7, #15]
   187d6:	71da      	strb	r2, [r3, #7]
	//wait_for_process_to_finish(chip_select);
}
   187d8:	bf00      	nop
   187da:	3714      	adds	r7, #20
   187dc:	46bd      	mov	sp, r7
   187de:	bd90      	pop	{r4, r7, pc}
   187e0:	00018b05 	.word	0x00018b05

000187e4 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   187e4:	b590      	push	{r4, r7, lr}
   187e6:	b089      	sub	sp, #36	; 0x24
   187e8:	af02      	add	r7, sp, #8
   187ea:	60f8      	str	r0, [r7, #12]
   187ec:	60b9      	str	r1, [r7, #8]
   187ee:	4611      	mov	r1, r2
   187f0:	461a      	mov	r2, r3
   187f2:	460b      	mov	r3, r1
   187f4:	71fb      	strb	r3, [r7, #7]
   187f6:	4613      	mov	r3, r2
   187f8:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   187fa:	88ba      	ldrh	r2, [r7, #4]
   187fc:	2300      	movs	r3, #0
   187fe:	9300      	str	r3, [sp, #0]
   18800:	4613      	mov	r3, r2
   18802:	2203      	movs	r2, #3
   18804:	68b9      	ldr	r1, [r7, #8]
   18806:	68f8      	ldr	r0, [r7, #12]
   18808:	4c0c      	ldr	r4, [pc, #48]	; (1883c <_ZN13LTC2983_Class20print_config_channelEmht+0x58>)
   1880a:	47a0      	blx	r4
   1880c:	6178      	str	r0, [r7, #20]

	usb.print(F("\nChannel Config "));
   1880e:	490c      	ldr	r1, [pc, #48]	; (18840 <_ZN13LTC2983_Class20print_config_channelEmht+0x5c>)
   18810:	480c      	ldr	r0, [pc, #48]	; (18844 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   18812:	4b0d      	ldr	r3, [pc, #52]	; (18848 <_ZN13LTC2983_Class20print_config_channelEmht+0x64>)
   18814:	4798      	blx	r3
	usb.println(channel_number);
   18816:	79fb      	ldrb	r3, [r7, #7]
   18818:	220a      	movs	r2, #10
   1881a:	4619      	mov	r1, r3
   1881c:	4809      	ldr	r0, [pc, #36]	; (18844 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   1881e:	4b0b      	ldr	r3, [pc, #44]	; (1884c <_ZN13LTC2983_Class20print_config_channelEmht+0x68>)
   18820:	4798      	blx	r3

	// 24 LSB's are conversion result
	
	usb<<"register value: ";
   18822:	490b      	ldr	r1, [pc, #44]	; (18850 <_ZN13LTC2983_Class20print_config_channelEmht+0x6c>)
   18824:	4807      	ldr	r0, [pc, #28]	; (18844 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   18826:	4b0b      	ldr	r3, [pc, #44]	; (18854 <_ZN13LTC2983_Class20print_config_channelEmht+0x70>)
   18828:	4798      	blx	r3
	usb.println(raw_data,HEX);
   1882a:	2210      	movs	r2, #16
   1882c:	6979      	ldr	r1, [r7, #20]
   1882e:	4805      	ldr	r0, [pc, #20]	; (18844 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   18830:	4b09      	ldr	r3, [pc, #36]	; (18858 <_ZN13LTC2983_Class20print_config_channelEmht+0x74>)
   18832:	4798      	blx	r3
	
}
   18834:	bf00      	nop
   18836:	371c      	adds	r7, #28
   18838:	46bd      	mov	sp, r7
   1883a:	bd90      	pop	{r4, r7, pc}
   1883c:	00018a21 	.word	0x00018a21
   18840:	00021a04 	.word	0x00021a04
   18844:	2000a650 	.word	0x2000a650
   18848:	00017ddd 	.word	0x00017ddd
   1884c:	00017f15 	.word	0x00017f15
   18850:	00021a18 	.word	0x00021a18
   18854:	00018d65 	.word	0x00018d65
   18858:	00017f51 	.word	0x00017f51

0001885c <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   1885c:	b590      	push	{r4, r7, lr}
   1885e:	b085      	sub	sp, #20
   18860:	af02      	add	r7, sp, #8
   18862:	6078      	str	r0, [r7, #4]
   18864:	460b      	mov	r3, r1
   18866:	70fb      	strb	r3, [r7, #3]
   18868:	4613      	mov	r3, r2
   1886a:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   1886c:	78fb      	ldrb	r3, [r7, #3]
   1886e:	461a      	mov	r2, r3
   18870:	2110      	movs	r1, #16
   18872:	6878      	ldr	r0, [r7, #4]
   18874:	4b17      	ldr	r3, [pc, #92]	; (188d4 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   18876:	4798      	blx	r3
   18878:	4603      	mov	r3, r0
   1887a:	461a      	mov	r2, r3
   1887c:	687b      	ldr	r3, [r7, #4]
   1887e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   18882:	687b      	ldr	r3, [r7, #4]
   18884:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   18886:	687b      	ldr	r3, [r7, #4]
   18888:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
   1888c:	2300      	movs	r3, #0
   1888e:	9300      	str	r3, [sp, #0]
   18890:	4613      	mov	r3, r2
   18892:	2203      	movs	r2, #3
   18894:	6878      	ldr	r0, [r7, #4]
   18896:	4c10      	ldr	r4, [pc, #64]	; (188d8 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   18898:	47a0      	blx	r4
   1889a:	4602      	mov	r2, r0
   1889c:	687b      	ldr	r3, [r7, #4]
   1889e:	649a      	str	r2, [r3, #72]	; 0x48


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   188a0:	687b      	ldr	r3, [r7, #4]
   188a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   188a4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   188a8:	687b      	ldr	r3, [r7, #4]
   188aa:	645a      	str	r2, [r3, #68]	; 0x44
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   188ac:	687b      	ldr	r3, [r7, #4]
   188ae:	6c59      	ldr	r1, [r3, #68]	; 0x44
   188b0:	78bb      	ldrb	r3, [r7, #2]
   188b2:	78fa      	ldrb	r2, [r7, #3]
   188b4:	6878      	ldr	r0, [r7, #4]
   188b6:	4c09      	ldr	r4, [pc, #36]	; (188dc <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   188b8:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   188ba:	687b      	ldr	r3, [r7, #4]
   188bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   188be:	0e1b      	lsrs	r3, r3, #24
   188c0:	b2da      	uxtb	r2, r3
   188c2:	687b      	ldr	r3, [r7, #4]
   188c4:	719a      	strb	r2, [r3, #6]
	return scaled_result;
   188c6:	687b      	ldr	r3, [r7, #4]
   188c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
   188ca:	4618      	mov	r0, r3
   188cc:	370c      	adds	r7, #12
   188ce:	46bd      	mov	sp, r7
   188d0:	bd90      	pop	{r4, r7, pc}
   188d2:	bf00      	nop
   188d4:	00018b75 	.word	0x00018b75
   188d8:	00018a21 	.word	0x00018a21
   188dc:	00018935 	.word	0x00018935

000188e0 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   188e0:	b580      	push	{r7, lr}
   188e2:	b082      	sub	sp, #8
   188e4:	af00      	add	r7, sp, #0
   188e6:	6078      	str	r0, [r7, #4]
   188e8:	460b      	mov	r3, r1
   188ea:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   188ec:	78fb      	ldrb	r3, [r7, #3]
   188ee:	687a      	ldr	r2, [r7, #4]
   188f0:	4413      	add	r3, r2
   188f2:	78db      	ldrb	r3, [r3, #3]
   188f4:	4619      	mov	r1, r3
   188f6:	6878      	ldr	r0, [r7, #4]
   188f8:	4b03      	ldr	r3, [pc, #12]	; (18908 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   188fa:	4798      	blx	r3
   188fc:	4603      	mov	r3, r0
}
   188fe:	4618      	mov	r0, r3
   18900:	3708      	adds	r7, #8
   18902:	46bd      	mov	sp, r7
   18904:	bd80      	pop	{r7, pc}
   18906:	bf00      	nop
   18908:	0001890d 	.word	0x0001890d

0001890c <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   1890c:	b580      	push	{r7, lr}
   1890e:	b082      	sub	sp, #8
   18910:	af00      	add	r7, sp, #0
   18912:	6078      	str	r0, [r7, #4]
   18914:	460b      	mov	r3, r1
   18916:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   18918:	78fb      	ldrb	r3, [r7, #3]
   1891a:	2202      	movs	r2, #2
   1891c:	4619      	mov	r1, r3
   1891e:	6878      	ldr	r0, [r7, #4]
   18920:	4b03      	ldr	r3, [pc, #12]	; (18930 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   18922:	4798      	blx	r3
   18924:	4603      	mov	r3, r0
}
   18926:	4618      	mov	r0, r3
   18928:	3708      	adds	r7, #8
   1892a:	46bd      	mov	sp, r7
   1892c:	bd80      	pop	{r7, pc}
   1892e:	bf00      	nop
   18930:	0001885d 	.word	0x0001885d

00018934 <_ZN13LTC2983_Class13ConvertResultEmhh>:
		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   18934:	b580      	push	{r7, lr}
   18936:	b084      	sub	sp, #16
   18938:	af00      	add	r7, sp, #0
   1893a:	60f8      	str	r0, [r7, #12]
   1893c:	60b9      	str	r1, [r7, #8]
   1893e:	4611      	mov	r1, r2
   18940:	461a      	mov	r2, r3
   18942:	460b      	mov	r3, r1
   18944:	71fb      	strb	r3, [r7, #7]
   18946:	4613      	mov	r3, r2
   18948:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   1894a:	68ba      	ldr	r2, [r7, #8]
   1894c:	68fb      	ldr	r3, [r7, #12]
   1894e:	655a      	str	r2, [r3, #84]	; 0x54
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   18950:	68fb      	ldr	r3, [r7, #12]
   18952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   18954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   18958:	2b00      	cmp	r3, #0
   1895a:	d006      	beq.n	1896a <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   1895c:	68fb      	ldr	r3, [r7, #12]
   1895e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   18960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   18964:	461a      	mov	r2, r3
   18966:	68fb      	ldr	r3, [r7, #12]
   18968:	655a      	str	r2, [r3, #84]	; 0x54

	// Translate and print result
	if (channel_output == TEMPERATURE)
   1896a:	79bb      	ldrb	r3, [r7, #6]
   1896c:	2b02      	cmp	r3, #2
   1896e:	d11c      	bne.n	189aa <_ZN13LTC2983_Class13ConvertResultEmhh+0x76>
	{
		scaled_result= float(signed_data) / 1024;
   18970:	68fb      	ldr	r3, [r7, #12]
   18972:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   18974:	4b18      	ldr	r3, [pc, #96]	; (189d8 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   18976:	4610      	mov	r0, r2
   18978:	4798      	blx	r3
   1897a:	4602      	mov	r2, r0
   1897c:	4b17      	ldr	r3, [pc, #92]	; (189dc <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   1897e:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   18982:	4610      	mov	r0, r2
   18984:	4798      	blx	r3
   18986:	4603      	mov	r3, r0
   18988:	461a      	mov	r2, r3
   1898a:	68fb      	ldr	r3, [r7, #12]
   1898c:	651a      	str	r2, [r3, #80]	; 0x50
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   1898e:	79fb      	ldrb	r3, [r7, #7]
   18990:	4619      	mov	r1, r3
   18992:	68f8      	ldr	r0, [r7, #12]
   18994:	4b12      	ldr	r3, [pc, #72]	; (189e0 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   18996:	4798      	blx	r3
   18998:	4603      	mov	r3, r0
   1899a:	461a      	mov	r2, r3
   1899c:	68fb      	ldr	r3, [r7, #12]
   1899e:	6d19      	ldr	r1, [r3, #80]	; 0x50
   189a0:	68fb      	ldr	r3, [r7, #12]
   189a2:	3202      	adds	r2, #2
   189a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   189a8:	e011      	b.n	189ce <_ZN13LTC2983_Class13ConvertResultEmhh+0x9a>
	else if (channel_output == VOLTAGE)
   189aa:	79bb      	ldrb	r3, [r7, #6]
   189ac:	2b01      	cmp	r3, #1
   189ae:	d10e      	bne.n	189ce <_ZN13LTC2983_Class13ConvertResultEmhh+0x9a>
		scaled_result = float(signed_data) / 2097152;
   189b0:	68fb      	ldr	r3, [r7, #12]
   189b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   189b4:	4b08      	ldr	r3, [pc, #32]	; (189d8 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   189b6:	4610      	mov	r0, r2
   189b8:	4798      	blx	r3
   189ba:	4602      	mov	r2, r0
   189bc:	4b07      	ldr	r3, [pc, #28]	; (189dc <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   189be:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   189c2:	4610      	mov	r0, r2
   189c4:	4798      	blx	r3
   189c6:	4603      	mov	r3, r0
   189c8:	461a      	mov	r2, r3
   189ca:	68fb      	ldr	r3, [r7, #12]
   189cc:	651a      	str	r2, [r3, #80]	; 0x50
}
   189ce:	bf00      	nop
   189d0:	3710      	adds	r7, #16
   189d2:	46bd      	mov	sp, r7
   189d4:	bd80      	pop	{r7, pc}
   189d6:	bf00      	nop
   189d8:	0001b199 	.word	0x0001b199
   189dc:	0001b3a9 	.word	0x0001b3a9
   189e0:	000189e5 	.word	0x000189e5

000189e4 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   189e4:	b480      	push	{r7}
   189e6:	b085      	sub	sp, #20
   189e8:	af00      	add	r7, sp, #0
   189ea:	6078      	str	r0, [r7, #4]
   189ec:	460b      	mov	r3, r1
   189ee:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   189f0:	2300      	movs	r3, #0
   189f2:	73fb      	strb	r3, [r7, #15]
   189f4:	7bfb      	ldrb	r3, [r7, #15]
   189f6:	2b02      	cmp	r3, #2
   189f8:	dc0c      	bgt.n	18a14 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   189fa:	7bfb      	ldrb	r3, [r7, #15]
   189fc:	687a      	ldr	r2, [r7, #4]
   189fe:	4413      	add	r3, r2
   18a00:	78db      	ldrb	r3, [r3, #3]
   18a02:	78fa      	ldrb	r2, [r7, #3]
   18a04:	429a      	cmp	r2, r3
   18a06:	d101      	bne.n	18a0c <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   18a08:	7bfb      	ldrb	r3, [r7, #15]
   18a0a:	e004      	b.n	18a16 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   18a0c:	7bfb      	ldrb	r3, [r7, #15]
   18a0e:	3301      	adds	r3, #1
   18a10:	73fb      	strb	r3, [r7, #15]
   18a12:	e7ef      	b.n	189f4 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   18a14:	2300      	movs	r3, #0
}
   18a16:	4618      	mov	r0, r3
   18a18:	3714      	adds	r7, #20
   18a1a:	46bd      	mov	sp, r7
   18a1c:	bc80      	pop	{r7}
   18a1e:	4770      	bx	lr

00018a20 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   18a20:	b590      	push	{r4, r7, lr}
   18a22:	b089      	sub	sp, #36	; 0x24
   18a24:	af02      	add	r7, sp, #8
   18a26:	60f8      	str	r0, [r7, #12]
   18a28:	60b9      	str	r1, [r7, #8]
   18a2a:	4611      	mov	r1, r2
   18a2c:	461a      	mov	r2, r3
   18a2e:	460b      	mov	r3, r1
   18a30:	71fb      	strb	r3, [r7, #7]
   18a32:	4613      	mov	r3, r2
   18a34:	80bb      	strh	r3, [r7, #4]

	uint8_t i;
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   18a36:	2300      	movs	r3, #0
   18a38:	75fb      	strb	r3, [r7, #23]
   18a3a:	7dfb      	ldrb	r3, [r7, #23]
   18a3c:	2b06      	cmp	r3, #6
   18a3e:	dc09      	bgt.n	18a54 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   18a40:	68fb      	ldr	r3, [r7, #12]
   18a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18a44:	7dfb      	ldrb	r3, [r7, #23]
   18a46:	4413      	add	r3, r2
   18a48:	2200      	movs	r2, #0
   18a4a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   18a4c:	7dfb      	ldrb	r3, [r7, #23]
   18a4e:	3301      	adds	r3, #1
   18a50:	75fb      	strb	r3, [r7, #23]
   18a52:	e7f2      	b.n	18a3a <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   18a54:	68fb      	ldr	r3, [r7, #12]
   18a56:	6a1b      	ldr	r3, [r3, #32]
   18a58:	79fa      	ldrb	r2, [r7, #7]
   18a5a:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   18a5c:	68fb      	ldr	r3, [r7, #12]
   18a5e:	6a1b      	ldr	r3, [r3, #32]
   18a60:	3301      	adds	r3, #1
   18a62:	88ba      	ldrh	r2, [r7, #4]
   18a64:	1212      	asrs	r2, r2, #8
   18a66:	b2d2      	uxtb	r2, r2
   18a68:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   18a6a:	68fb      	ldr	r3, [r7, #12]
   18a6c:	6a1b      	ldr	r3, [r3, #32]
   18a6e:	3302      	adds	r3, #2
   18a70:	88ba      	ldrh	r2, [r7, #4]
   18a72:	b2d2      	uxtb	r2, r2
   18a74:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   18a76:	68fb      	ldr	r3, [r7, #12]
   18a78:	6a1b      	ldr	r3, [r3, #32]
   18a7a:	3303      	adds	r3, #3
   18a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18a7e:	0e12      	lsrs	r2, r2, #24
   18a80:	b2d2      	uxtb	r2, r2
   18a82:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   18a84:	68fb      	ldr	r3, [r7, #12]
   18a86:	6a1b      	ldr	r3, [r3, #32]
   18a88:	3304      	adds	r3, #4
   18a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18a8c:	0c12      	lsrs	r2, r2, #16
   18a8e:	b2d2      	uxtb	r2, r2
   18a90:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   18a92:	68fb      	ldr	r3, [r7, #12]
   18a94:	6a1b      	ldr	r3, [r3, #32]
   18a96:	3305      	adds	r3, #5
   18a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18a9a:	0a12      	lsrs	r2, r2, #8
   18a9c:	b2d2      	uxtb	r2, r2
   18a9e:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   18aa0:	68fb      	ldr	r3, [r7, #12]
   18aa2:	6a1b      	ldr	r3, [r3, #32]
   18aa4:	3306      	adds	r3, #6
   18aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18aa8:	b2d2      	uxtb	r2, r2
   18aaa:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx, LTC2983_SPI_BUFFER_SIZE);
   18aac:	68fb      	ldr	r3, [r7, #12]
   18aae:	6998      	ldr	r0, [r3, #24]
   18ab0:	68fb      	ldr	r3, [r7, #12]
   18ab2:	6a1a      	ldr	r2, [r3, #32]
   18ab4:	68fb      	ldr	r3, [r7, #12]
   18ab6:	6a59      	ldr	r1, [r3, #36]	; 0x24
   18ab8:	2307      	movs	r3, #7
   18aba:	9300      	str	r3, [sp, #0]
   18abc:	460b      	mov	r3, r1
   18abe:	68b9      	ldr	r1, [r7, #8]
   18ac0:	4c0f      	ldr	r4, [pc, #60]	; (18b00 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xe0>)
   18ac2:	47a0      	blx	r4

	output_data = (uint32_t) rx[0] << 24 |
   18ac4:	68fb      	ldr	r3, [r7, #12]
   18ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18ac8:	781b      	ldrb	r3, [r3, #0]
   18aca:	061a      	lsls	r2, r3, #24
	(uint32_t) rx[1] << 16 |
   18acc:	68fb      	ldr	r3, [r7, #12]
   18ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18ad0:	3301      	adds	r3, #1
   18ad2:	781b      	ldrb	r3, [r3, #0]
   18ad4:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx[0] << 24 |
   18ad6:	431a      	orrs	r2, r3
	(uint32_t) rx[2] << 8  |
   18ad8:	68fb      	ldr	r3, [r7, #12]
   18ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18adc:	3302      	adds	r3, #2
   18ade:	781b      	ldrb	r3, [r3, #0]
   18ae0:	021b      	lsls	r3, r3, #8
	(uint32_t) rx[1] << 16 |
   18ae2:	4313      	orrs	r3, r2
	(uint32_t) rx[3];
   18ae4:	68fa      	ldr	r2, [r7, #12]
   18ae6:	6a52      	ldr	r2, [r2, #36]	; 0x24
   18ae8:	3203      	adds	r2, #3
   18aea:	7812      	ldrb	r2, [r2, #0]
	(uint32_t) rx[2] << 8  |
   18aec:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx[0] << 24 |
   18aee:	68fb      	ldr	r3, [r7, #12]
   18af0:	61da      	str	r2, [r3, #28]
	asm("nop");
   18af2:	bf00      	nop
	return output_data;
   18af4:	68fb      	ldr	r3, [r7, #12]
   18af6:	69db      	ldr	r3, [r3, #28]
}
   18af8:	4618      	mov	r0, r3
   18afa:	371c      	adds	r7, #28
   18afc:	46bd      	mov	sp, r7
   18afe:	bd90      	pop	{r4, r7, pc}
   18b00:	00018f65 	.word	0x00018f65

00018b04 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   18b04:	b590      	push	{r4, r7, lr}
   18b06:	b087      	sub	sp, #28
   18b08:	af02      	add	r7, sp, #8
   18b0a:	60f8      	str	r0, [r7, #12]
   18b0c:	60b9      	str	r1, [r7, #8]
   18b0e:	4611      	mov	r1, r2
   18b10:	461a      	mov	r2, r3
   18b12:	460b      	mov	r3, r1
   18b14:	71fb      	strb	r3, [r7, #7]
   18b16:	4613      	mov	r3, r2
   18b18:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   18b1a:	68fb      	ldr	r3, [r7, #12]
   18b1c:	6a1b      	ldr	r3, [r3, #32]
   18b1e:	79fa      	ldrb	r2, [r7, #7]
   18b20:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   18b22:	68fb      	ldr	r3, [r7, #12]
   18b24:	6a1b      	ldr	r3, [r3, #32]
   18b26:	3301      	adds	r3, #1
   18b28:	88ba      	ldrh	r2, [r7, #4]
   18b2a:	1212      	asrs	r2, r2, #8
   18b2c:	b2d2      	uxtb	r2, r2
   18b2e:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   18b30:	68fb      	ldr	r3, [r7, #12]
   18b32:	6a1b      	ldr	r3, [r3, #32]
   18b34:	3302      	adds	r3, #2
   18b36:	88ba      	ldrh	r2, [r7, #4]
   18b38:	b2d2      	uxtb	r2, r2
   18b3a:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   18b3c:	68fb      	ldr	r3, [r7, #12]
   18b3e:	6a1b      	ldr	r3, [r3, #32]
   18b40:	3303      	adds	r3, #3
   18b42:	f897 2020 	ldrb.w	r2, [r7, #32]
   18b46:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   18b48:	68fb      	ldr	r3, [r7, #12]
   18b4a:	6998      	ldr	r0, [r3, #24]
   18b4c:	68fb      	ldr	r3, [r7, #12]
   18b4e:	6a1a      	ldr	r2, [r3, #32]
   18b50:	68fb      	ldr	r3, [r7, #12]
   18b52:	6a59      	ldr	r1, [r3, #36]	; 0x24
   18b54:	2304      	movs	r3, #4
   18b56:	9300      	str	r3, [sp, #0]
   18b58:	460b      	mov	r3, r1
   18b5a:	68b9      	ldr	r1, [r7, #8]
   18b5c:	4c04      	ldr	r4, [pc, #16]	; (18b70 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   18b5e:	47a0      	blx	r4
	return rx[0];
   18b60:	68fb      	ldr	r3, [r7, #12]
   18b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18b64:	781b      	ldrb	r3, [r3, #0]
}
   18b66:	4618      	mov	r0, r3
   18b68:	3714      	adds	r7, #20
   18b6a:	46bd      	mov	sp, r7
   18b6c:	bd90      	pop	{r4, r7, pc}
   18b6e:	bf00      	nop
   18b70:	00018f65 	.word	0x00018f65

00018b74 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   18b74:	b480      	push	{r7}
   18b76:	b083      	sub	sp, #12
   18b78:	af00      	add	r7, sp, #0
   18b7a:	6078      	str	r0, [r7, #4]
   18b7c:	460b      	mov	r3, r1
   18b7e:	807b      	strh	r3, [r7, #2]
   18b80:	4613      	mov	r3, r2
   18b82:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   18b84:	787b      	ldrb	r3, [r7, #1]
   18b86:	3b01      	subs	r3, #1
   18b88:	b29b      	uxth	r3, r3
   18b8a:	009b      	lsls	r3, r3, #2
   18b8c:	b29a      	uxth	r2, r3
   18b8e:	887b      	ldrh	r3, [r7, #2]
   18b90:	4413      	add	r3, r2
   18b92:	b29b      	uxth	r3, r3
}
   18b94:	4618      	mov	r0, r3
   18b96:	370c      	adds	r7, #12
   18b98:	46bd      	mov	sp, r7
   18b9a:	bc80      	pop	{r7}
   18b9c:	4770      	bx	lr
	...

00018ba0 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   18ba0:	b590      	push	{r4, r7, lr}
   18ba2:	b085      	sub	sp, #20
   18ba4:	af00      	add	r7, sp, #0
   18ba6:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	// ----- Channel 2: Assign Sense Resistor -----
	channel_assignment_data =
   18ba8:	4b1c      	ldr	r3, [pc, #112]	; (18c1c <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   18baa:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 2, channel_assignment_data);
   18bac:	687b      	ldr	r3, [r7, #4]
   18bae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   18bb0:	68fb      	ldr	r3, [r7, #12]
   18bb2:	2202      	movs	r2, #2
   18bb4:	6878      	ldr	r0, [r7, #4]
   18bb6:	4c1a      	ldr	r4, [pc, #104]	; (18c20 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18bb8:	47a0      	blx	r4
	// ----- Channel 4: Assign RTD PT-100 -----
	channel_assignment_data =
   18bba:	4b1a      	ldr	r3, [pc, #104]	; (18c24 <_ZN13LTC2983_Class18configure_channelsEv+0x84>)
   18bbc:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__2 |
	RTD_NUM_WIRES__2_WIRE |
	RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 4, channel_assignment_data);
   18bbe:	687b      	ldr	r3, [r7, #4]
   18bc0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   18bc2:	68fb      	ldr	r3, [r7, #12]
   18bc4:	2204      	movs	r2, #4
   18bc6:	6878      	ldr	r0, [r7, #4]
   18bc8:	4c15      	ldr	r4, [pc, #84]	; (18c20 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18bca:	47a0      	blx	r4
	// ----- Channel 6: Assign Sense Resistor -----
	channel_assignment_data =
   18bcc:	4b13      	ldr	r3, [pc, #76]	; (18c1c <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   18bce:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 6, channel_assignment_data);
   18bd0:	687b      	ldr	r3, [r7, #4]
   18bd2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   18bd4:	68fb      	ldr	r3, [r7, #12]
   18bd6:	2206      	movs	r2, #6
   18bd8:	6878      	ldr	r0, [r7, #4]
   18bda:	4c11      	ldr	r4, [pc, #68]	; (18c20 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18bdc:	47a0      	blx	r4
	// ----- Channel 8: Assign RTD PT-100 -----
	channel_assignment_data =
   18bde:	4b12      	ldr	r3, [pc, #72]	; (18c28 <_ZN13LTC2983_Class18configure_channelsEv+0x88>)
   18be0:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__6 |
	RTD_NUM_WIRES__4_WIRE |
	RTD_EXCITATION_MODE__ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 8, channel_assignment_data);
   18be2:	687b      	ldr	r3, [r7, #4]
   18be4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   18be6:	68fb      	ldr	r3, [r7, #12]
   18be8:	2208      	movs	r2, #8
   18bea:	6878      	ldr	r0, [r7, #4]
   18bec:	4c0c      	ldr	r4, [pc, #48]	; (18c20 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18bee:	47a0      	blx	r4
	// ----- Channel 13: Assign Sense Resistor -----
	channel_assignment_data =
   18bf0:	4b0a      	ldr	r3, [pc, #40]	; (18c1c <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   18bf2:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 13, channel_assignment_data);
   18bf4:	687b      	ldr	r3, [r7, #4]
   18bf6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   18bf8:	68fb      	ldr	r3, [r7, #12]
   18bfa:	220d      	movs	r2, #13
   18bfc:	6878      	ldr	r0, [r7, #4]
   18bfe:	4c08      	ldr	r4, [pc, #32]	; (18c20 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18c00:	47a0      	blx	r4
	// ----- Channel 15: Assign RTD PT-100 -----
	channel_assignment_data =
   18c02:	4b0a      	ldr	r3, [pc, #40]	; (18c2c <_ZN13LTC2983_Class18configure_channelsEv+0x8c>)
   18c04:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__13 |
	RTD_NUM_WIRES__2_WIRE |
	RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 15, channel_assignment_data);
   18c06:	687b      	ldr	r3, [r7, #4]
   18c08:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   18c0a:	68fb      	ldr	r3, [r7, #12]
   18c0c:	220f      	movs	r2, #15
   18c0e:	6878      	ldr	r0, [r7, #4]
   18c10:	4c03      	ldr	r4, [pc, #12]	; (18c20 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18c12:	47a0      	blx	r4

}
   18c14:	bf00      	nop
   18c16:	3714      	adds	r7, #20
   18c18:	46bd      	mov	sp, r7
   18c1a:	bd90      	pop	{r4, r7, pc}
   18c1c:	e89c4000 	.word	0xe89c4000
   18c20:	00018745 	.word	0x00018745
   18c24:	60851000 	.word	0x60851000
   18c28:	61a91000 	.word	0x61a91000
   18c2c:	63451000 	.word	0x63451000

00018c30 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   18c30:	b590      	push	{r4, r7, lr}
   18c32:	b085      	sub	sp, #20
   18c34:	af02      	add	r7, sp, #8
   18c36:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   18c38:	687b      	ldr	r3, [r7, #4]
   18c3a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
	REJECTION__50_60_HZ);
   18c3c:	2300      	movs	r3, #0
   18c3e:	9300      	str	r3, [sp, #0]
   18c40:	23f0      	movs	r3, #240	; 0xf0
   18c42:	2202      	movs	r2, #2
   18c44:	6878      	ldr	r0, [r7, #4]
   18c46:	4c07      	ldr	r4, [pc, #28]	; (18c64 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   18c48:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   18c4a:	687b      	ldr	r3, [r7, #4]
   18c4c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   18c4e:	2300      	movs	r3, #0
   18c50:	9300      	str	r3, [sp, #0]
   18c52:	23ff      	movs	r3, #255	; 0xff
   18c54:	2202      	movs	r2, #2
   18c56:	6878      	ldr	r0, [r7, #4]
   18c58:	4c02      	ldr	r4, [pc, #8]	; (18c64 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   18c5a:	47a0      	blx	r4
}
   18c5c:	bf00      	nop
   18c5e:	370c      	adds	r7, #12
   18c60:	46bd      	mov	sp, r7
   18c62:	bd90      	pop	{r4, r7, pc}
   18c64:	00018b05 	.word	0x00018b05

00018c68 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   18c68:	b580      	push	{r7, lr}
   18c6a:	b082      	sub	sp, #8
   18c6c:	af00      	add	r7, sp, #0
   18c6e:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   18c70:	687b      	ldr	r3, [r7, #4]
   18c72:	2200      	movs	r2, #0
   18c74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	meassureTimeout=false;
   18c78:	687b      	ldr	r3, [r7, #4]
   18c7a:	2200      	movs	r2, #0
   18c7c:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   18c7e:	4a31      	ldr	r2, [pc, #196]	; (18d44 <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   18c80:	687b      	ldr	r3, [r7, #4]
   18c82:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   18c84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18c88:	492f      	ldr	r1, [pc, #188]	; (18d48 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   18c8a:	4830      	ldr	r0, [pc, #192]	; (18d4c <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   18c8c:	4b30      	ldr	r3, [pc, #192]	; (18d50 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   18c8e:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   18c90:	687b      	ldr	r3, [r7, #4]
   18c92:	799b      	ldrb	r3, [r3, #6]
   18c94:	2b01      	cmp	r3, #1
   18c96:	d009      	beq.n	18cac <_ZN13LTC2983_Class8SelfTestEv+0x44>
   18c98:	687b      	ldr	r3, [r7, #4]
   18c9a:	789b      	ldrb	r3, [r3, #2]
   18c9c:	b2db      	uxtb	r3, r3
   18c9e:	f083 0301 	eor.w	r3, r3, #1
   18ca2:	b2db      	uxtb	r3, r3
   18ca4:	2b00      	cmp	r3, #0
   18ca6:	d001      	beq.n	18cac <_ZN13LTC2983_Class8SelfTestEv+0x44>
   18ca8:	2301      	movs	r3, #1
   18caa:	e000      	b.n	18cae <_ZN13LTC2983_Class8SelfTestEv+0x46>
   18cac:	2300      	movs	r3, #0
   18cae:	2b00      	cmp	r3, #0
   18cb0:	d034      	beq.n	18d1c <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   18cb2:	2100      	movs	r1, #0
   18cb4:	6878      	ldr	r0, [r7, #4]
   18cb6:	4b27      	ldr	r3, [pc, #156]	; (18d54 <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   18cb8:	4798      	blx	r3
		delay_ms(1);
   18cba:	2001      	movs	r0, #1
   18cbc:	4b26      	ldr	r3, [pc, #152]	; (18d58 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   18cbe:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   18cc0:	687b      	ldr	r3, [r7, #4]
   18cc2:	781b      	ldrb	r3, [r3, #0]
   18cc4:	b2db      	uxtb	r3, r3
   18cc6:	f083 0301 	eor.w	r3, r3, #1
   18cca:	b2db      	uxtb	r3, r3
   18ccc:	2b00      	cmp	r3, #0
   18cce:	d009      	beq.n	18ce4 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   18cd0:	687b      	ldr	r3, [r7, #4]
   18cd2:	789b      	ldrb	r3, [r3, #2]
   18cd4:	b2db      	uxtb	r3, r3
   18cd6:	f083 0301 	eor.w	r3, r3, #1
   18cda:	b2db      	uxtb	r3, r3
   18cdc:	2b00      	cmp	r3, #0
   18cde:	d001      	beq.n	18ce4 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   18ce0:	2301      	movs	r3, #1
   18ce2:	e000      	b.n	18ce6 <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   18ce4:	2300      	movs	r3, #0
   18ce6:	2b00      	cmp	r3, #0
   18ce8:	d000      	beq.n	18cec <_ZN13LTC2983_Class8SelfTestEv+0x84>
   18cea:	e7e9      	b.n	18cc0 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   18cec:	687b      	ldr	r3, [r7, #4]
   18cee:	789b      	ldrb	r3, [r3, #2]
   18cf0:	b2db      	uxtb	r3, r3
   18cf2:	f083 0301 	eor.w	r3, r3, #1
   18cf6:	b2db      	uxtb	r3, r3
   18cf8:	2b00      	cmp	r3, #0
   18cfa:	d0c9      	beq.n	18c90 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   18cfc:	687b      	ldr	r3, [r7, #4]
   18cfe:	781b      	ldrb	r3, [r3, #0]
   18d00:	b2db      	uxtb	r3, r3
   18d02:	2b00      	cmp	r3, #0
   18d04:	d006      	beq.n	18d14 <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   18d06:	687b      	ldr	r3, [r7, #4]
   18d08:	78db      	ldrb	r3, [r3, #3]
   18d0a:	4619      	mov	r1, r3
   18d0c:	6878      	ldr	r0, [r7, #4]
   18d0e:	4b13      	ldr	r3, [pc, #76]	; (18d5c <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   18d10:	4798      	blx	r3
   18d12:	e7bd      	b.n	18c90 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   18d14:	2001      	movs	r0, #1
   18d16:	4b10      	ldr	r3, [pc, #64]	; (18d58 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   18d18:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   18d1a:	e7b9      	b.n	18c90 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   18d1c:	490a      	ldr	r1, [pc, #40]	; (18d48 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   18d1e:	480b      	ldr	r0, [pc, #44]	; (18d4c <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   18d20:	4b0f      	ldr	r3, [pc, #60]	; (18d60 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   18d22:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   18d24:	687b      	ldr	r3, [r7, #4]
   18d26:	799b      	ldrb	r3, [r3, #6]
   18d28:	2b01      	cmp	r3, #1
   18d2a:	bf0c      	ite	eq
   18d2c:	2301      	moveq	r3, #1
   18d2e:	2300      	movne	r3, #0
   18d30:	b2da      	uxtb	r2, r3
   18d32:	687b      	ldr	r3, [r7, #4]
   18d34:	751a      	strb	r2, [r3, #20]
	return	isOK;
   18d36:	687b      	ldr	r3, [r7, #4]
   18d38:	7d1b      	ldrb	r3, [r3, #20]
	}
   18d3a:	4618      	mov	r0, r3
   18d3c:	3708      	adds	r7, #8
   18d3e:	46bd      	mov	sp, r7
   18d40:	bd80      	pop	{r7, pc}
   18d42:	bf00      	nop
   18d44:	2000a6b0 	.word	0x2000a6b0
   18d48:	00018665 	.word	0x00018665
   18d4c:	2000a468 	.word	0x2000a468
   18d50:	000175a1 	.word	0x000175a1
   18d54:	00018799 	.word	0x00018799
   18d58:	00005fa1 	.word	0x00005fa1
   18d5c:	0001890d 	.word	0x0001890d
   18d60:	00017531 	.word	0x00017531

00018d64 <_ZlsIA17_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
   18d64:	b580      	push	{r7, lr}
   18d66:	b082      	sub	sp, #8
   18d68:	af00      	add	r7, sp, #0
   18d6a:	6078      	str	r0, [r7, #4]
   18d6c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
   18d6e:	6839      	ldr	r1, [r7, #0]
   18d70:	6878      	ldr	r0, [r7, #4]
   18d72:	4b03      	ldr	r3, [pc, #12]	; (18d80 <_ZlsIA17_cER5PrintS2_RKT_+0x1c>)
   18d74:	4798      	blx	r3
   18d76:	687b      	ldr	r3, [r7, #4]
   18d78:	4618      	mov	r0, r3
   18d7a:	3708      	adds	r7, #8
   18d7c:	46bd      	mov	sp, r7
   18d7e:	bd80      	pop	{r7, pc}
   18d80:	00017dfd 	.word	0x00017dfd

00018d84 <_Z41__static_initialization_and_destruction_0ii>:
   18d84:	b580      	push	{r7, lr}
   18d86:	b082      	sub	sp, #8
   18d88:	af00      	add	r7, sp, #0
   18d8a:	6078      	str	r0, [r7, #4]
   18d8c:	6039      	str	r1, [r7, #0]
   18d8e:	687b      	ldr	r3, [r7, #4]
   18d90:	2b01      	cmp	r3, #1
   18d92:	d10c      	bne.n	18dae <_Z41__static_initialization_and_destruction_0ii+0x2a>
   18d94:	683b      	ldr	r3, [r7, #0]
   18d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18d9a:	4293      	cmp	r3, r2
   18d9c:	d107      	bne.n	18dae <_Z41__static_initialization_and_destruction_0ii+0x2a>
   18d9e:	4806      	ldr	r0, [pc, #24]	; (18db8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   18da0:	4b06      	ldr	r3, [pc, #24]	; (18dbc <_Z41__static_initialization_and_destruction_0ii+0x38>)
   18da2:	4798      	blx	r3
   18da4:	4a06      	ldr	r2, [pc, #24]	; (18dc0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   18da6:	4907      	ldr	r1, [pc, #28]	; (18dc4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   18da8:	4803      	ldr	r0, [pc, #12]	; (18db8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   18daa:	4b07      	ldr	r3, [pc, #28]	; (18dc8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   18dac:	4798      	blx	r3
   18dae:	bf00      	nop
   18db0:	3708      	adds	r7, #8
   18db2:	46bd      	mov	sp, r7
   18db4:	bd80      	pop	{r7, pc}
   18db6:	bf00      	nop
   18db8:	2000a650 	.word	0x2000a650
   18dbc:	000178dd 	.word	0x000178dd
   18dc0:	20000000 	.word	0x20000000
   18dc4:	00017925 	.word	0x00017925
   18dc8:	0001949d 	.word	0x0001949d

00018dcc <_GLOBAL__sub_I_ptrLTCClass>:
   18dcc:	b580      	push	{r7, lr}
   18dce:	af00      	add	r7, sp, #0
   18dd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18dd4:	2001      	movs	r0, #1
   18dd6:	4b01      	ldr	r3, [pc, #4]	; (18ddc <_GLOBAL__sub_I_ptrLTCClass+0x10>)
   18dd8:	4798      	blx	r3
   18dda:	bd80      	pop	{r7, pc}
   18ddc:	00018d85 	.word	0x00018d85

00018de0 <hri_port_set_OUT_reg>:
{
   18de0:	b480      	push	{r7}
   18de2:	b085      	sub	sp, #20
   18de4:	af00      	add	r7, sp, #0
   18de6:	60f8      	str	r0, [r7, #12]
   18de8:	460b      	mov	r3, r1
   18dea:	607a      	str	r2, [r7, #4]
   18dec:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   18dee:	7afb      	ldrb	r3, [r7, #11]
   18df0:	68fa      	ldr	r2, [r7, #12]
   18df2:	01db      	lsls	r3, r3, #7
   18df4:	4413      	add	r3, r2
   18df6:	3318      	adds	r3, #24
   18df8:	687a      	ldr	r2, [r7, #4]
   18dfa:	601a      	str	r2, [r3, #0]
}
   18dfc:	bf00      	nop
   18dfe:	3714      	adds	r7, #20
   18e00:	46bd      	mov	sp, r7
   18e02:	bc80      	pop	{r7}
   18e04:	4770      	bx	lr

00018e06 <hri_port_clear_OUT_reg>:
{
   18e06:	b480      	push	{r7}
   18e08:	b085      	sub	sp, #20
   18e0a:	af00      	add	r7, sp, #0
   18e0c:	60f8      	str	r0, [r7, #12]
   18e0e:	460b      	mov	r3, r1
   18e10:	607a      	str	r2, [r7, #4]
   18e12:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   18e14:	7afb      	ldrb	r3, [r7, #11]
   18e16:	68fa      	ldr	r2, [r7, #12]
   18e18:	01db      	lsls	r3, r3, #7
   18e1a:	4413      	add	r3, r2
   18e1c:	3314      	adds	r3, #20
   18e1e:	687a      	ldr	r2, [r7, #4]
   18e20:	601a      	str	r2, [r3, #0]
}
   18e22:	bf00      	nop
   18e24:	3714      	adds	r7, #20
   18e26:	46bd      	mov	sp, r7
   18e28:	bc80      	pop	{r7}
   18e2a:	4770      	bx	lr

00018e2c <_gpio_set_level>:
{
   18e2c:	b580      	push	{r7, lr}
   18e2e:	b082      	sub	sp, #8
   18e30:	af00      	add	r7, sp, #0
   18e32:	4603      	mov	r3, r0
   18e34:	6039      	str	r1, [r7, #0]
   18e36:	71fb      	strb	r3, [r7, #7]
   18e38:	4613      	mov	r3, r2
   18e3a:	71bb      	strb	r3, [r7, #6]
	if (level) {
   18e3c:	79bb      	ldrb	r3, [r7, #6]
   18e3e:	2b00      	cmp	r3, #0
   18e40:	d006      	beq.n	18e50 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   18e42:	79fb      	ldrb	r3, [r7, #7]
   18e44:	683a      	ldr	r2, [r7, #0]
   18e46:	4619      	mov	r1, r3
   18e48:	4806      	ldr	r0, [pc, #24]	; (18e64 <_gpio_set_level+0x38>)
   18e4a:	4b07      	ldr	r3, [pc, #28]	; (18e68 <_gpio_set_level+0x3c>)
   18e4c:	4798      	blx	r3
}
   18e4e:	e005      	b.n	18e5c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   18e50:	79fb      	ldrb	r3, [r7, #7]
   18e52:	683a      	ldr	r2, [r7, #0]
   18e54:	4619      	mov	r1, r3
   18e56:	4803      	ldr	r0, [pc, #12]	; (18e64 <_gpio_set_level+0x38>)
   18e58:	4b04      	ldr	r3, [pc, #16]	; (18e6c <_gpio_set_level+0x40>)
   18e5a:	4798      	blx	r3
}
   18e5c:	bf00      	nop
   18e5e:	3708      	adds	r7, #8
   18e60:	46bd      	mov	sp, r7
   18e62:	bd80      	pop	{r7, pc}
   18e64:	41008000 	.word	0x41008000
   18e68:	00018de1 	.word	0x00018de1
   18e6c:	00018e07 	.word	0x00018e07

00018e70 <gpio_set_pin_level>:
{
   18e70:	b580      	push	{r7, lr}
   18e72:	b082      	sub	sp, #8
   18e74:	af00      	add	r7, sp, #0
   18e76:	4603      	mov	r3, r0
   18e78:	460a      	mov	r2, r1
   18e7a:	71fb      	strb	r3, [r7, #7]
   18e7c:	4613      	mov	r3, r2
   18e7e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   18e80:	79fb      	ldrb	r3, [r7, #7]
   18e82:	115b      	asrs	r3, r3, #5
   18e84:	b2d8      	uxtb	r0, r3
   18e86:	79fb      	ldrb	r3, [r7, #7]
   18e88:	f003 031f 	and.w	r3, r3, #31
   18e8c:	2201      	movs	r2, #1
   18e8e:	fa02 f303 	lsl.w	r3, r2, r3
   18e92:	79ba      	ldrb	r2, [r7, #6]
   18e94:	4619      	mov	r1, r3
   18e96:	4b03      	ldr	r3, [pc, #12]	; (18ea4 <gpio_set_pin_level+0x34>)
   18e98:	4798      	blx	r3
}
   18e9a:	bf00      	nop
   18e9c:	3708      	adds	r7, #8
   18e9e:	46bd      	mov	sp, r7
   18ea0:	bd80      	pop	{r7, pc}
   18ea2:	bf00      	nop
   18ea4:	00018e2d 	.word	0x00018e2d

00018ea8 <_ZN6LT_SPIC1Ev>:

static  SPI_Asyn_Class spiStaticTemp;


// default constructor
LT_SPI::LT_SPI()
   18ea8:	b480      	push	{r7}
   18eaa:	b083      	sub	sp, #12
   18eac:	af00      	add	r7, sp, #0
   18eae:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   18eb0:	4a05      	ldr	r2, [pc, #20]	; (18ec8 <_ZN6LT_SPIC1Ev+0x20>)
   18eb2:	687b      	ldr	r3, [r7, #4]
   18eb4:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   18eb6:	687b      	ldr	r3, [r7, #4]
   18eb8:	4a04      	ldr	r2, [pc, #16]	; (18ecc <_ZN6LT_SPIC1Ev+0x24>)
   18eba:	605a      	str	r2, [r3, #4]
} //LT_SPI
   18ebc:	687b      	ldr	r3, [r7, #4]
   18ebe:	4618      	mov	r0, r3
   18ec0:	370c      	adds	r7, #12
   18ec2:	46bd      	mov	sp, r7
   18ec4:	bc80      	pop	{r7}
   18ec6:	4770      	bx	lr
   18ec8:	2000a6b4 	.word	0x2000a6b4
   18ecc:	2000a6b8 	.word	0x2000a6b8

00018ed0 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   18ed0:	b480      	push	{r7}
   18ed2:	b083      	sub	sp, #12
   18ed4:	af00      	add	r7, sp, #0
   18ed6:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   18ed8:	687b      	ldr	r3, [r7, #4]
   18eda:	4618      	mov	r0, r3
   18edc:	370c      	adds	r7, #12
   18ede:	46bd      	mov	sp, r7
   18ee0:	bc80      	pop	{r7}
   18ee2:	4770      	bx	lr

00018ee4 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   18ee4:	b580      	push	{r7, lr}
   18ee6:	b082      	sub	sp, #8
   18ee8:	af00      	add	r7, sp, #0
   18eea:	6078      	str	r0, [r7, #4]
	spiTemp->set_descriptor(SPIA);
   18eec:	687b      	ldr	r3, [r7, #4]
   18eee:	685a      	ldr	r2, [r3, #4]
   18ef0:	687b      	ldr	r3, [r7, #4]
   18ef2:	691b      	ldr	r3, [r3, #16]
   18ef4:	4619      	mov	r1, r3
   18ef6:	4610      	mov	r0, r2
   18ef8:	4b0e      	ldr	r3, [pc, #56]	; (18f34 <_ZN6LT_SPI4initEv+0x50>)
   18efa:	4798      	blx	r3
	spiTemp->init();
   18efc:	687b      	ldr	r3, [r7, #4]
   18efe:	685b      	ldr	r3, [r3, #4]
   18f00:	4618      	mov	r0, r3
   18f02:	4b0d      	ldr	r3, [pc, #52]	; (18f38 <_ZN6LT_SPI4initEv+0x54>)
   18f04:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   18f06:	687b      	ldr	r3, [r7, #4]
   18f08:	685b      	ldr	r3, [r3, #4]
   18f0a:	685a      	ldr	r2, [r3, #4]
   18f0c:	687b      	ldr	r3, [r7, #4]
   18f0e:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   18f10:	687b      	ldr	r3, [r7, #4]
   18f12:	685b      	ldr	r3, [r3, #4]
   18f14:	689a      	ldr	r2, [r3, #8]
   18f16:	687b      	ldr	r3, [r7, #4]
   18f18:	60da      	str	r2, [r3, #12]
	spiTemp->enable();
   18f1a:	687b      	ldr	r3, [r7, #4]
   18f1c:	685b      	ldr	r3, [r3, #4]
   18f1e:	4618      	mov	r0, r3
   18f20:	4b06      	ldr	r3, [pc, #24]	; (18f3c <_ZN6LT_SPI4initEv+0x58>)
   18f22:	4798      	blx	r3
	ready=true;
   18f24:	687b      	ldr	r3, [r7, #4]
   18f26:	2201      	movs	r2, #1
   18f28:	701a      	strb	r2, [r3, #0]
}
   18f2a:	bf00      	nop
   18f2c:	3708      	adds	r7, #8
   18f2e:	46bd      	mov	sp, r7
   18f30:	bd80      	pop	{r7, pc}
   18f32:	bf00      	nop
   18f34:	00019149 	.word	0x00019149
   18f38:	0001916d 	.word	0x0001916d
   18f3c:	000191d1 	.word	0x000191d1

00018f40 <_ZN6LT_SPI14set_descriptorEP22spi_m_async_descriptor>:
void	LT_SPI::set_descriptor(spi_m_async_descriptor * i2c_a){
   18f40:	b480      	push	{r7}
   18f42:	b083      	sub	sp, #12
   18f44:	af00      	add	r7, sp, #0
   18f46:	6078      	str	r0, [r7, #4]
   18f48:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   18f4a:	687b      	ldr	r3, [r7, #4]
   18f4c:	683a      	ldr	r2, [r7, #0]
   18f4e:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   18f50:	4a03      	ldr	r2, [pc, #12]	; (18f60 <_ZN6LT_SPI14set_descriptorEP22spi_m_async_descriptor+0x20>)
   18f52:	687b      	ldr	r3, [r7, #4]
   18f54:	6013      	str	r3, [r2, #0]
}
   18f56:	bf00      	nop
   18f58:	370c      	adds	r7, #12
   18f5a:	46bd      	mov	sp, r7
   18f5c:	bc80      	pop	{r7}
   18f5e:	4770      	bx	lr
   18f60:	2000a6b4 	.word	0x2000a6b4

00018f64 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   18f64:	b580      	push	{r7, lr}
   18f66:	b086      	sub	sp, #24
   18f68:	af00      	add	r7, sp, #0
   18f6a:	60f8      	str	r0, [r7, #12]
   18f6c:	60b9      	str	r1, [r7, #8]
   18f6e:	607a      	str	r2, [r7, #4]
   18f70:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   18f72:	687b      	ldr	r3, [r7, #4]
   18f74:	781b      	ldrb	r3, [r3, #0]
   18f76:	75fb      	strb	r3, [r7, #23]
	gpio_set_pin_level(cs_pin,false)  ;               //! 1) Pull CS low
   18f78:	68bb      	ldr	r3, [r7, #8]
   18f7a:	b2db      	uxtb	r3, r3
   18f7c:	2100      	movs	r1, #0
   18f7e:	4618      	mov	r0, r3
   18f80:	4b3a      	ldr	r3, [pc, #232]	; (1906c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x108>)
   18f82:	4798      	blx	r3
	
	switch(rOrw){
   18f84:	7dfb      	ldrb	r3, [r7, #23]
   18f86:	2b02      	cmp	r3, #2
   18f88:	d002      	beq.n	18f90 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x2c>
   18f8a:	2b03      	cmp	r3, #3
   18f8c:	d009      	beq.n	18fa2 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3e>
   18f8e:	e03c      	b.n	1900a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xa6>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   18f90:	68fb      	ldr	r3, [r7, #12]
   18f92:	685b      	ldr	r3, [r3, #4]
   18f94:	f897 2020 	ldrb.w	r2, [r7, #32]
   18f98:	6879      	ldr	r1, [r7, #4]
   18f9a:	4618      	mov	r0, r3
   18f9c:	4b34      	ldr	r3, [pc, #208]	; (19070 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x10c>)
   18f9e:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   18fa0:	e04f      	b.n	19042 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xde>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   18fa2:	68fb      	ldr	r3, [r7, #12]
   18fa4:	685b      	ldr	r3, [r3, #4]
   18fa6:	2203      	movs	r2, #3
   18fa8:	6879      	ldr	r1, [r7, #4]
   18faa:	4618      	mov	r0, r3
   18fac:	4b30      	ldr	r3, [pc, #192]	; (19070 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x10c>)
   18fae:	4798      	blx	r3
			while(!spiTemp->xferDone);
   18fb0:	68fb      	ldr	r3, [r7, #12]
   18fb2:	685b      	ldr	r3, [r3, #4]
   18fb4:	781b      	ldrb	r3, [r3, #0]
   18fb6:	b2db      	uxtb	r3, r3
   18fb8:	f083 0301 	eor.w	r3, r3, #1
   18fbc:	b2db      	uxtb	r3, r3
   18fbe:	2b00      	cmp	r3, #0
   18fc0:	d000      	beq.n	18fc4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x60>
   18fc2:	e7f5      	b.n	18fb0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x4c>
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   18fc4:	f897 3020 	ldrb.w	r3, [r7, #32]
   18fc8:	2b04      	cmp	r3, #4
   18fca:	dd15      	ble.n	18ff8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x94>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   18fcc:	68fb      	ldr	r3, [r7, #12]
   18fce:	6858      	ldr	r0, [r3, #4]
   18fd0:	f897 3020 	ldrb.w	r3, [r7, #32]
   18fd4:	3b03      	subs	r3, #3
   18fd6:	461a      	mov	r2, r3
   18fd8:	6839      	ldr	r1, [r7, #0]
   18fda:	4b26      	ldr	r3, [pc, #152]	; (19074 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x110>)
   18fdc:	4798      	blx	r3
					asm("nop");
   18fde:	bf00      	nop
				while (!spiTemp->xferDone);
   18fe0:	68fb      	ldr	r3, [r7, #12]
   18fe2:	685b      	ldr	r3, [r3, #4]
   18fe4:	781b      	ldrb	r3, [r3, #0]
   18fe6:	b2db      	uxtb	r3, r3
   18fe8:	f083 0301 	eor.w	r3, r3, #1
   18fec:	b2db      	uxtb	r3, r3
   18fee:	2b00      	cmp	r3, #0
   18ff0:	d000      	beq.n	18ff4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x90>
   18ff2:	e7f5      	b.n	18fe0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7c>
				asm("nop");
   18ff4:	bf00      	nop
   18ff6:	e024      	b.n	19042 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xde>
// 				}
// 				rx-=length;
			}
			else
			{
				spiTemp->Read(rx,1);
   18ff8:	68fb      	ldr	r3, [r7, #12]
   18ffa:	685b      	ldr	r3, [r3, #4]
   18ffc:	2201      	movs	r2, #1
   18ffe:	6839      	ldr	r1, [r7, #0]
   19000:	4618      	mov	r0, r3
   19002:	4b1c      	ldr	r3, [pc, #112]	; (19074 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x110>)
   19004:	4798      	blx	r3
				asm("nop");
   19006:	bf00      	nop
			}
	
			break;
   19008:	e01b      	b.n	19042 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xde>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   1900a:	68fb      	ldr	r3, [r7, #12]
   1900c:	685b      	ldr	r3, [r3, #4]
   1900e:	f897 2020 	ldrb.w	r2, [r7, #32]
   19012:	6879      	ldr	r1, [r7, #4]
   19014:	4618      	mov	r0, r3
   19016:	4b16      	ldr	r3, [pc, #88]	; (19070 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x10c>)
   19018:	4798      	blx	r3
			while(!spiTemp->xferDone);
   1901a:	68fb      	ldr	r3, [r7, #12]
   1901c:	685b      	ldr	r3, [r3, #4]
   1901e:	781b      	ldrb	r3, [r3, #0]
   19020:	b2db      	uxtb	r3, r3
   19022:	f083 0301 	eor.w	r3, r3, #1
   19026:	b2db      	uxtb	r3, r3
   19028:	2b00      	cmp	r3, #0
   1902a:	d000      	beq.n	1902e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xca>
   1902c:	e7f5      	b.n	1901a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb6>
			spiTemp->Read(rx,length-3);
   1902e:	68fb      	ldr	r3, [r7, #12]
   19030:	6858      	ldr	r0, [r3, #4]
   19032:	f897 3020 	ldrb.w	r3, [r7, #32]
   19036:	3b03      	subs	r3, #3
   19038:	461a      	mov	r2, r3
   1903a:	6839      	ldr	r1, [r7, #0]
   1903c:	4b0d      	ldr	r3, [pc, #52]	; (19074 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x110>)
   1903e:	4798      	blx	r3
			break;
   19040:	bf00      	nop
	}


	

	while (!spiTemp->xferDone);
   19042:	68fb      	ldr	r3, [r7, #12]
   19044:	685b      	ldr	r3, [r3, #4]
   19046:	781b      	ldrb	r3, [r3, #0]
   19048:	b2db      	uxtb	r3, r3
   1904a:	f083 0301 	eor.w	r3, r3, #1
   1904e:	b2db      	uxtb	r3, r3
   19050:	2b00      	cmp	r3, #0
   19052:	d000      	beq.n	19056 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xf2>
   19054:	e7f5      	b.n	19042 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xde>
	gpio_set_pin_level(cs_pin,true)   ;              //! 3) Pull CS high
   19056:	68bb      	ldr	r3, [r7, #8]
   19058:	b2db      	uxtb	r3, r3
   1905a:	2101      	movs	r1, #1
   1905c:	4618      	mov	r0, r3
   1905e:	4b03      	ldr	r3, [pc, #12]	; (1906c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x108>)
   19060:	4798      	blx	r3
	asm("nop");
   19062:	bf00      	nop
	
}
   19064:	bf00      	nop
   19066:	3718      	adds	r7, #24
   19068:	46bd      	mov	sp, r7
   1906a:	bd80      	pop	{r7, pc}
   1906c:	00018e71 	.word	0x00018e71
   19070:	000191f9 	.word	0x000191f9
   19074:	0001923d 	.word	0x0001923d

00019078 <_Z41__static_initialization_and_destruction_0ii>:
{
	uint8_t rx;
	spiTemp->Read(&rx,1);
	return	(int8_t)rx;

}
   19078:	b580      	push	{r7, lr}
   1907a:	b082      	sub	sp, #8
   1907c:	af00      	add	r7, sp, #0
   1907e:	6078      	str	r0, [r7, #4]
   19080:	6039      	str	r1, [r7, #0]
   19082:	687b      	ldr	r3, [r7, #4]
   19084:	2b01      	cmp	r3, #1
   19086:	d10c      	bne.n	190a2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   19088:	683b      	ldr	r3, [r7, #0]
   1908a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1908e:	4293      	cmp	r3, r2
   19090:	d107      	bne.n	190a2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Asyn_Class spiStaticTemp;
   19092:	4806      	ldr	r0, [pc, #24]	; (190ac <_Z41__static_initialization_and_destruction_0ii+0x34>)
   19094:	4b06      	ldr	r3, [pc, #24]	; (190b0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   19096:	4798      	blx	r3
   19098:	4a06      	ldr	r2, [pc, #24]	; (190b4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1909a:	4907      	ldr	r1, [pc, #28]	; (190b8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1909c:	4803      	ldr	r0, [pc, #12]	; (190ac <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1909e:	4b07      	ldr	r3, [pc, #28]	; (190bc <_Z41__static_initialization_and_destruction_0ii+0x44>)
   190a0:	4798      	blx	r3
}
   190a2:	bf00      	nop
   190a4:	3708      	adds	r7, #8
   190a6:	46bd      	mov	sp, r7
   190a8:	bd80      	pop	{r7, pc}
   190aa:	bf00      	nop
   190ac:	2000a6b8 	.word	0x2000a6b8
   190b0:	00019115 	.word	0x00019115
   190b4:	20000000 	.word	0x20000000
   190b8:	00019135 	.word	0x00019135
   190bc:	0001949d 	.word	0x0001949d

000190c0 <_GLOBAL__sub_I_ptrLTSPIClass>:
   190c0:	b580      	push	{r7, lr}
   190c2:	af00      	add	r7, sp, #0
   190c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   190c8:	2001      	movs	r0, #1
   190ca:	4b01      	ldr	r3, [pc, #4]	; (190d0 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   190cc:	4798      	blx	r3
   190ce:	bd80      	pop	{r7, pc}
   190d0:	00019079 	.word	0x00019079

000190d4 <_ZL15complete_cb_SPIPK22spi_m_async_descriptor>:

static	uint8_t	txStaticBuffer[SPI_ASYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_ASYN_BUFFER_SIZE];
 SPI_Asyn_Class* ptrSPIAClass;
static void complete_cb_SPI(const struct spi_m_async_descriptor *const io_descr)
{
   190d4:	b480      	push	{r7}
   190d6:	b083      	sub	sp, #12
   190d8:	af00      	add	r7, sp, #0
   190da:	6078      	str	r0, [r7, #4]

	ptrSPIAClass->xferDone=true;
   190dc:	4b04      	ldr	r3, [pc, #16]	; (190f0 <_ZL15complete_cb_SPIPK22spi_m_async_descriptor+0x1c>)
   190de:	681b      	ldr	r3, [r3, #0]
   190e0:	2201      	movs	r2, #1
   190e2:	701a      	strb	r2, [r3, #0]

}
   190e4:	bf00      	nop
   190e6:	370c      	adds	r7, #12
   190e8:	46bd      	mov	sp, r7
   190ea:	bc80      	pop	{r7}
   190ec:	4770      	bx	lr
   190ee:	bf00      	nop
   190f0:	2000a724 	.word	0x2000a724

000190f4 <_ZL12error_cb_SPIPK22spi_m_async_descriptor>:
static void error_cb_SPI(const struct spi_m_async_descriptor *const io_descr)
{
   190f4:	b480      	push	{r7}
   190f6:	b083      	sub	sp, #12
   190f8:	af00      	add	r7, sp, #0
   190fa:	6078      	str	r0, [r7, #4]

	ptrSPIAClass->xferDone=true;
   190fc:	4b04      	ldr	r3, [pc, #16]	; (19110 <_ZL12error_cb_SPIPK22spi_m_async_descriptor+0x1c>)
   190fe:	681b      	ldr	r3, [r3, #0]
   19100:	2201      	movs	r2, #1
   19102:	701a      	strb	r2, [r3, #0]

}
   19104:	bf00      	nop
   19106:	370c      	adds	r7, #12
   19108:	46bd      	mov	sp, r7
   1910a:	bc80      	pop	{r7}
   1910c:	4770      	bx	lr
   1910e:	bf00      	nop
   19110:	2000a724 	.word	0x2000a724

00019114 <_ZN14SPI_Asyn_ClassC1Ev>:
SPI_Asyn_Class::SPI_Asyn_Class(spi_m_async_descriptor *spi)
{
	SPIA=spi;
	ptrSPIAClass=this;
} //SPI_Asyn_Class
SPI_Asyn_Class::SPI_Asyn_Class()
   19114:	b480      	push	{r7}
   19116:	b083      	sub	sp, #12
   19118:	af00      	add	r7, sp, #0
   1911a:	6078      	str	r0, [r7, #4]
{
	ptrSPIAClass=this;
   1911c:	4a04      	ldr	r2, [pc, #16]	; (19130 <_ZN14SPI_Asyn_ClassC1Ev+0x1c>)
   1911e:	687b      	ldr	r3, [r7, #4]
   19120:	6013      	str	r3, [r2, #0]
} //SPI_Asyn_Class
   19122:	687b      	ldr	r3, [r7, #4]
   19124:	4618      	mov	r0, r3
   19126:	370c      	adds	r7, #12
   19128:	46bd      	mov	sp, r7
   1912a:	bc80      	pop	{r7}
   1912c:	4770      	bx	lr
   1912e:	bf00      	nop
   19130:	2000a724 	.word	0x2000a724

00019134 <_ZN14SPI_Asyn_ClassD1Ev>:

// default destructor
SPI_Asyn_Class::~SPI_Asyn_Class()
   19134:	b480      	push	{r7}
   19136:	b083      	sub	sp, #12
   19138:	af00      	add	r7, sp, #0
   1913a:	6078      	str	r0, [r7, #4]
{
} //~SPI_Asyn_Class
   1913c:	687b      	ldr	r3, [r7, #4]
   1913e:	4618      	mov	r0, r3
   19140:	370c      	adds	r7, #12
   19142:	46bd      	mov	sp, r7
   19144:	bc80      	pop	{r7}
   19146:	4770      	bx	lr

00019148 <_ZN14SPI_Asyn_Class14set_descriptorEP22spi_m_async_descriptor>:



void SPI_Asyn_Class::set_descriptor(spi_m_async_descriptor *spi){
   19148:	b480      	push	{r7}
   1914a:	b083      	sub	sp, #12
   1914c:	af00      	add	r7, sp, #0
   1914e:	6078      	str	r0, [r7, #4]
   19150:	6039      	str	r1, [r7, #0]
	ptrSPIAClass=this;
   19152:	4a05      	ldr	r2, [pc, #20]	; (19168 <_ZN14SPI_Asyn_Class14set_descriptorEP22spi_m_async_descriptor+0x20>)
   19154:	687b      	ldr	r3, [r7, #4]
   19156:	6013      	str	r3, [r2, #0]
	SPIA=spi;
   19158:	687b      	ldr	r3, [r7, #4]
   1915a:	683a      	ldr	r2, [r7, #0]
   1915c:	621a      	str	r2, [r3, #32]
}
   1915e:	bf00      	nop
   19160:	370c      	adds	r7, #12
   19162:	46bd      	mov	sp, r7
   19164:	bc80      	pop	{r7}
   19166:	4770      	bx	lr
   19168:	2000a724 	.word	0x2000a724

0001916c <_ZN14SPI_Asyn_Class4initEv>:

void SPI_Asyn_Class::init(){
   1916c:	b580      	push	{r7, lr}
   1916e:	b082      	sub	sp, #8
   19170:	af00      	add	r7, sp, #0
   19172:	6078      	str	r0, [r7, #4]
	txBuffer=txStaticBuffer;
   19174:	687b      	ldr	r3, [r7, #4]
   19176:	4a11      	ldr	r2, [pc, #68]	; (191bc <_ZN14SPI_Asyn_Class4initEv+0x50>)
   19178:	605a      	str	r2, [r3, #4]
	rxBuffer=txStaticBuffer;
   1917a:	687b      	ldr	r3, [r7, #4]
   1917c:	4a0f      	ldr	r2, [pc, #60]	; (191bc <_ZN14SPI_Asyn_Class4initEv+0x50>)
   1917e:	609a      	str	r2, [r3, #8]
	spi_m_async_get_io_descriptor(SPIA, &spio);
   19180:	687b      	ldr	r3, [r7, #4]
   19182:	6a1a      	ldr	r2, [r3, #32]
   19184:	687b      	ldr	r3, [r7, #4]
   19186:	331c      	adds	r3, #28
   19188:	4619      	mov	r1, r3
   1918a:	4610      	mov	r0, r2
   1918c:	4b0c      	ldr	r3, [pc, #48]	; (191c0 <_ZN14SPI_Asyn_Class4initEv+0x54>)
   1918e:	4798      	blx	r3
	spi_m_async_register_callback(SPIA, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(complete_cb_SPI));
   19190:	687b      	ldr	r3, [r7, #4]
   19192:	6a1b      	ldr	r3, [r3, #32]
   19194:	4a0b      	ldr	r2, [pc, #44]	; (191c4 <_ZN14SPI_Asyn_Class4initEv+0x58>)
   19196:	2100      	movs	r1, #0
   19198:	4618      	mov	r0, r3
   1919a:	4b0b      	ldr	r3, [pc, #44]	; (191c8 <_ZN14SPI_Asyn_Class4initEv+0x5c>)
   1919c:	4798      	blx	r3
	spi_m_async_register_callback(SPIA, SPI_M_ASYNC_CB_ERROR, (FUNC_PTR)(error_cb_SPI));
   1919e:	687b      	ldr	r3, [r7, #4]
   191a0:	6a1b      	ldr	r3, [r3, #32]
   191a2:	4a0a      	ldr	r2, [pc, #40]	; (191cc <_ZN14SPI_Asyn_Class4initEv+0x60>)
   191a4:	2101      	movs	r1, #1
   191a6:	4618      	mov	r0, r3
   191a8:	4b07      	ldr	r3, [pc, #28]	; (191c8 <_ZN14SPI_Asyn_Class4initEv+0x5c>)
   191aa:	4798      	blx	r3
	xferDone=true;
   191ac:	687b      	ldr	r3, [r7, #4]
   191ae:	2201      	movs	r2, #1
   191b0:	701a      	strb	r2, [r3, #0]
}
   191b2:	bf00      	nop
   191b4:	3708      	adds	r7, #8
   191b6:	46bd      	mov	sp, r7
   191b8:	bd80      	pop	{r7, pc}
   191ba:	bf00      	nop
   191bc:	2000a6e4 	.word	0x2000a6e4
   191c0:	00006c7d 	.word	0x00006c7d
   191c4:	000190d5 	.word	0x000190d5
   191c8:	00006c09 	.word	0x00006c09
   191cc:	000190f5 	.word	0x000190f5

000191d0 <_ZN14SPI_Asyn_Class6enableEv>:

int32_t SPI_Asyn_Class::enable(){
   191d0:	b580      	push	{r7, lr}
   191d2:	b082      	sub	sp, #8
   191d4:	af00      	add	r7, sp, #0
   191d6:	6078      	str	r0, [r7, #4]

	spi_m_async_enable(SPIA);
   191d8:	687b      	ldr	r3, [r7, #4]
   191da:	6a1b      	ldr	r3, [r3, #32]
   191dc:	4618      	mov	r0, r3
   191de:	4b05      	ldr	r3, [pc, #20]	; (191f4 <_ZN14SPI_Asyn_Class6enableEv+0x24>)
   191e0:	4798      	blx	r3
	xferDone=true;
   191e2:	687b      	ldr	r3, [r7, #4]
   191e4:	2201      	movs	r2, #1
   191e6:	701a      	strb	r2, [r3, #0]

	return 0;
   191e8:	2300      	movs	r3, #0
}
   191ea:	4618      	mov	r0, r3
   191ec:	3708      	adds	r7, #8
   191ee:	46bd      	mov	sp, r7
   191f0:	bd80      	pop	{r7, pc}
   191f2:	bf00      	nop
   191f4:	00006add 	.word	0x00006add

000191f8 <_ZN14SPI_Asyn_Class5WriteEPKhl>:

int32_t  SPI_Asyn_Class::Write(const uint8_t * p, int32_t n){
   191f8:	b580      	push	{r7, lr}
   191fa:	b086      	sub	sp, #24
   191fc:	af00      	add	r7, sp, #0
   191fe:	60f8      	str	r0, [r7, #12]
   19200:	60b9      	str	r1, [r7, #8]
   19202:	607a      	str	r2, [r7, #4]

	while(!xferDone);
   19204:	68fb      	ldr	r3, [r7, #12]
   19206:	781b      	ldrb	r3, [r3, #0]
   19208:	b2db      	uxtb	r3, r3
   1920a:	f083 0301 	eor.w	r3, r3, #1
   1920e:	b2db      	uxtb	r3, r3
   19210:	2b00      	cmp	r3, #0
   19212:	d000      	beq.n	19216 <_ZN14SPI_Asyn_Class5WriteEPKhl+0x1e>
   19214:	e7f6      	b.n	19204 <_ZN14SPI_Asyn_Class5WriteEPKhl+0xc>
	xferDone=false;
   19216:	68fb      	ldr	r3, [r7, #12]
   19218:	2200      	movs	r2, #0
   1921a:	701a      	strb	r2, [r3, #0]
	int32_t w= io_write(spio,p,(uint16_t)n);
   1921c:	68fb      	ldr	r3, [r7, #12]
   1921e:	69db      	ldr	r3, [r3, #28]
   19220:	687a      	ldr	r2, [r7, #4]
   19222:	b292      	uxth	r2, r2
   19224:	68b9      	ldr	r1, [r7, #8]
   19226:	4618      	mov	r0, r3
   19228:	4b03      	ldr	r3, [pc, #12]	; (19238 <_ZN14SPI_Asyn_Class5WriteEPKhl+0x40>)
   1922a:	4798      	blx	r3
   1922c:	6178      	str	r0, [r7, #20]
	 return w;
   1922e:	697b      	ldr	r3, [r7, #20]
	
}
   19230:	4618      	mov	r0, r3
   19232:	3718      	adds	r7, #24
   19234:	46bd      	mov	sp, r7
   19236:	bd80      	pop	{r7, pc}
   19238:	000193fd 	.word	0x000193fd

0001923c <_ZN14SPI_Asyn_Class4ReadEPhl>:
int32_t  SPI_Asyn_Class::Read(uint8_t * p, int32_t n){
   1923c:	b580      	push	{r7, lr}
   1923e:	b086      	sub	sp, #24
   19240:	af00      	add	r7, sp, #0
   19242:	60f8      	str	r0, [r7, #12]
   19244:	60b9      	str	r1, [r7, #8]
   19246:	607a      	str	r2, [r7, #4]
	while(!xferDone);
   19248:	68fb      	ldr	r3, [r7, #12]
   1924a:	781b      	ldrb	r3, [r3, #0]
   1924c:	b2db      	uxtb	r3, r3
   1924e:	f083 0301 	eor.w	r3, r3, #1
   19252:	b2db      	uxtb	r3, r3
   19254:	2b00      	cmp	r3, #0
   19256:	d000      	beq.n	1925a <_ZN14SPI_Asyn_Class4ReadEPhl+0x1e>
   19258:	e7f6      	b.n	19248 <_ZN14SPI_Asyn_Class4ReadEPhl+0xc>
	xferDone=false;
   1925a:	68fb      	ldr	r3, [r7, #12]
   1925c:	2200      	movs	r2, #0
   1925e:	701a      	strb	r2, [r3, #0]
	int32_t r=io_read(spio,p,(uint16_t)n);
   19260:	68fb      	ldr	r3, [r7, #12]
   19262:	69db      	ldr	r3, [r3, #28]
   19264:	687a      	ldr	r2, [r7, #4]
   19266:	b292      	uxth	r2, r2
   19268:	68b9      	ldr	r1, [r7, #8]
   1926a:	4618      	mov	r0, r3
   1926c:	4b04      	ldr	r3, [pc, #16]	; (19280 <_ZN14SPI_Asyn_Class4ReadEPhl+0x44>)
   1926e:	4798      	blx	r3
   19270:	6178      	str	r0, [r7, #20]
	asm("nop");
   19272:	bf00      	nop
	//while((!xferDone));
	return  r;
   19274:	697b      	ldr	r3, [r7, #20]
}
   19276:	4618      	mov	r0, r3
   19278:	3718      	adds	r7, #24
   1927a:	46bd      	mov	sp, r7
   1927c:	bd80      	pop	{r7, pc}
   1927e:	bf00      	nop
   19280:	0001944d 	.word	0x0001944d

00019284 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
   19284:	4b02      	ldr	r3, [pc, #8]	; (19290 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
   19286:	681a      	ldr	r2, [r3, #0]
   19288:	6813      	ldr	r3, [r2, #0]
   1928a:	3301      	adds	r3, #1
   1928c:	6013      	str	r3, [r2, #0]
   1928e:	4770      	bx	lr
   19290:	2000a728 	.word	0x2000a728

00019294 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
   19294:	4b02      	ldr	r3, [pc, #8]	; (192a0 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
   19296:	681b      	ldr	r3, [r3, #0]
   19298:	2200      	movs	r2, #0
   1929a:	711a      	strb	r2, [r3, #4]
   1929c:	4770      	bx	lr
   1929e:	bf00      	nop
   192a0:	2000a728 	.word	0x2000a728

000192a4 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
   192a4:	b538      	push	{r3, r4, r5, lr}
   192a6:	4604      	mov	r4, r0
{
	ticks=0;
   192a8:	2300      	movs	r3, #0
   192aa:	6003      	str	r3, [r0, #0]
	interfaceTimer.Stop();
   192ac:	4d04      	ldr	r5, [pc, #16]	; (192c0 <_ZN16Maintenance_ToolD1Ev+0x1c>)
   192ae:	4628      	mov	r0, r5
   192b0:	4b04      	ldr	r3, [pc, #16]	; (192c4 <_ZN16Maintenance_ToolD1Ev+0x20>)
   192b2:	4798      	blx	r3
	interfaceTimer.Remove_task();
   192b4:	4628      	mov	r0, r5
   192b6:	4b04      	ldr	r3, [pc, #16]	; (192c8 <_ZN16Maintenance_ToolD1Ev+0x24>)
   192b8:	4798      	blx	r3
	
} //~Maintenance_Tool
   192ba:	4620      	mov	r0, r4
   192bc:	bd38      	pop	{r3, r4, r5, pc}
   192be:	bf00      	nop
   192c0:	2000a630 	.word	0x2000a630
   192c4:	000183a1 	.word	0x000183a1
   192c8:	000184b9 	.word	0x000184b9

000192cc <_ZN16Maintenance_ToolC1Ev>:
	ptrMaintenanceTool=this;
   192cc:	4a04      	ldr	r2, [pc, #16]	; (192e0 <_ZN16Maintenance_ToolC1Ev+0x14>)
   192ce:	6010      	str	r0, [r2, #0]
	maintenanceIsConnected = false;
   192d0:	2200      	movs	r2, #0
   192d2:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
	nextMaintenanceSyncTime = 0;
   192d6:	6482      	str	r2, [r0, #72]	; 0x48
	nextMaintenanceUsageTimerSyncTime = 0;
   192d8:	64c2      	str	r2, [r0, #76]	; 0x4c
	ticks=0;
   192da:	6002      	str	r2, [r0, #0]
} //Maintenance_Tool
   192dc:	4770      	bx	lr
   192de:	bf00      	nop
   192e0:	2000a728 	.word	0x2000a728

000192e4 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
   192e4:	b510      	push	{r4, lr}
		maintenanceIsConnected = isConnected;
   192e6:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
		if (isConnected)
   192ea:	b919      	cbnz	r1, 192f4 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
   192ec:	4808      	ldr	r0, [pc, #32]	; (19310 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   192ee:	4b09      	ldr	r3, [pc, #36]	; (19314 <_ZN16Maintenance_Tool12setConnectedEb+0x30>)
   192f0:	4798      	blx	r3
   192f2:	bd10      	pop	{r4, pc}
			interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
   192f4:	4c06      	ldr	r4, [pc, #24]	; (19310 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   192f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   192fa:	4907      	ldr	r1, [pc, #28]	; (19318 <_ZN16Maintenance_Tool12setConnectedEb+0x34>)
   192fc:	4620      	mov	r0, r4
   192fe:	4b07      	ldr	r3, [pc, #28]	; (1931c <_ZN16Maintenance_Tool12setConnectedEb+0x38>)
   19300:	4798      	blx	r3
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
   19302:	f64e 2260 	movw	r2, #60000	; 0xea60
   19306:	4906      	ldr	r1, [pc, #24]	; (19320 <_ZN16Maintenance_Tool12setConnectedEb+0x3c>)
   19308:	4620      	mov	r0, r4
   1930a:	4b06      	ldr	r3, [pc, #24]	; (19324 <_ZN16Maintenance_Tool12setConnectedEb+0x40>)
   1930c:	4798      	blx	r3
   1930e:	bd10      	pop	{r4, pc}
   19310:	2000a630 	.word	0x2000a630
   19314:	000183a1 	.word	0x000183a1
   19318:	00019285 	.word	0x00019285
   1931c:	00018431 	.word	0x00018431
   19320:	00019295 	.word	0x00019295
   19324:	00018481 	.word	0x00018481

00019328 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
   19328:	b510      	push	{r4, lr}
   1932a:	4604      	mov	r4, r0
	result=false;
   1932c:	2300      	movs	r3, #0
   1932e:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	magic=0;
   19332:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
	if (gotAccess==true)
   19336:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
   1933a:	b12b      	cbz	r3, 19348 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
   1933c:	2301      	movs	r3, #1
   1933e:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	return	result;
   19342:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
}
   19346:	bd10      	pop	{r4, pc}
		if (usb.connected)
   19348:	4b15      	ldr	r3, [pc, #84]	; (193a0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   1934a:	7d1b      	ldrb	r3, [r3, #20]
   1934c:	2b00      	cmp	r3, #0
   1934e:	d0f8      	beq.n	19342 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
			if (usb.rxReady)
   19350:	4b13      	ldr	r3, [pc, #76]	; (193a0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   19352:	7e5b      	ldrb	r3, [r3, #25]
   19354:	b18b      	cbz	r3, 1937a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x52>
   19356:	1d43      	adds	r3, r0, #5
   19358:	3009      	adds	r0, #9
   1935a:	2200      	movs	r2, #0
					magic|= localBuffer[i];
   1935c:	f813 1b01 	ldrb.w	r1, [r3], #1
   19360:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
				for (int i = 0; i < 4; i++)
   19364:	4283      	cmp	r3, r0
   19366:	d1f9      	bne.n	1935c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x34>
   19368:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
				xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
   1936c:	4b0d      	ldr	r3, [pc, #52]	; (193a4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
   1936e:	ea82 0103 	eor.w	r1, r2, r3
   19372:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
				if (xorResult==0)
   19376:	429a      	cmp	r2, r3
   19378:	d005      	beq.n	19386 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x5e>
			usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   1937a:	2240      	movs	r2, #64	; 0x40
   1937c:	1d61      	adds	r1, r4, #5
   1937e:	480a      	ldr	r0, [pc, #40]	; (193a8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
   19380:	4b0a      	ldr	r3, [pc, #40]	; (193ac <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
   19382:	4798      	blx	r3
   19384:	e7dd      	b.n	19342 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
					gotAccess=true;
   19386:	2101      	movs	r1, #1
   19388:	f884 10f9 	strb.w	r1, [r4, #249]	; 0xf9
					result=true;
   1938c:	f884 10f8 	strb.w	r1, [r4, #248]	; 0xf8
					is_MTPC_Beaming=true;
   19390:	7121      	strb	r1, [r4, #4]
					setConnected(true);
   19392:	4620      	mov	r0, r4
   19394:	4b06      	ldr	r3, [pc, #24]	; (193b0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x88>)
   19396:	4798      	blx	r3
					return	result;
   19398:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
   1939c:	bd10      	pop	{r4, pc}
   1939e:	bf00      	nop
   193a0:	2000a728 	.word	0x2000a728
   193a4:	61626364 	.word	0x61626364
   193a8:	2000a72c 	.word	0x2000a72c
   193ac:	00017a95 	.word	0x00017a95
   193b0:	000192e5 	.word	0x000192e5

000193b4 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	{
		memcpy(buffer+4*ii, (uint8_t*)(add+4*ii), 4);
	}

}
   193b4:	b570      	push	{r4, r5, r6, lr}
	CDC_Class& operator=( const CDC_Class &c );
	

}; //CDC_Class

static	CDC_Class	usb;
   193b6:	4c0a      	ldr	r4, [pc, #40]	; (193e0 <_GLOBAL__sub_I_ptrMaintenanceTool+0x2c>)
   193b8:	1d25      	adds	r5, r4, #4
   193ba:	4628      	mov	r0, r5
   193bc:	4b09      	ldr	r3, [pc, #36]	; (193e4 <_GLOBAL__sub_I_ptrMaintenanceTool+0x30>)
   193be:	4798      	blx	r3
   193c0:	4e09      	ldr	r6, [pc, #36]	; (193e8 <_GLOBAL__sub_I_ptrMaintenanceTool+0x34>)
   193c2:	4632      	mov	r2, r6
   193c4:	4909      	ldr	r1, [pc, #36]	; (193ec <_GLOBAL__sub_I_ptrMaintenanceTool+0x38>)
   193c6:	4628      	mov	r0, r5
   193c8:	4d09      	ldr	r5, [pc, #36]	; (193f0 <_GLOBAL__sub_I_ptrMaintenanceTool+0x3c>)
   193ca:	47a8      	blx	r5
   193cc:	3464      	adds	r4, #100	; 0x64
   193ce:	4620      	mov	r0, r4
   193d0:	4b08      	ldr	r3, [pc, #32]	; (193f4 <_GLOBAL__sub_I_ptrMaintenanceTool+0x40>)
   193d2:	4798      	blx	r3
   193d4:	4632      	mov	r2, r6
   193d6:	4908      	ldr	r1, [pc, #32]	; (193f8 <_GLOBAL__sub_I_ptrMaintenanceTool+0x44>)
   193d8:	4620      	mov	r0, r4
   193da:	47a8      	blx	r5
   193dc:	bd70      	pop	{r4, r5, r6, pc}
   193de:	bf00      	nop
   193e0:	2000a728 	.word	0x2000a728
   193e4:	000178dd 	.word	0x000178dd
   193e8:	20000000 	.word	0x20000000
   193ec:	00017925 	.word	0x00017925
   193f0:	0001949d 	.word	0x0001949d
   193f4:	000192cd 	.word	0x000192cd
   193f8:	000192a5 	.word	0x000192a5

000193fc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   193fc:	b580      	push	{r7, lr}
   193fe:	b084      	sub	sp, #16
   19400:	af00      	add	r7, sp, #0
   19402:	60f8      	str	r0, [r7, #12]
   19404:	60b9      	str	r1, [r7, #8]
   19406:	4613      	mov	r3, r2
   19408:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   1940a:	68fb      	ldr	r3, [r7, #12]
   1940c:	2b00      	cmp	r3, #0
   1940e:	d004      	beq.n	1941a <io_write+0x1e>
   19410:	68bb      	ldr	r3, [r7, #8]
   19412:	2b00      	cmp	r3, #0
   19414:	d001      	beq.n	1941a <io_write+0x1e>
   19416:	2301      	movs	r3, #1
   19418:	e000      	b.n	1941c <io_write+0x20>
   1941a:	2300      	movs	r3, #0
   1941c:	f003 0301 	and.w	r3, r3, #1
   19420:	b2db      	uxtb	r3, r3
   19422:	2234      	movs	r2, #52	; 0x34
   19424:	4907      	ldr	r1, [pc, #28]	; (19444 <io_write+0x48>)
   19426:	4618      	mov	r0, r3
   19428:	4b07      	ldr	r3, [pc, #28]	; (19448 <io_write+0x4c>)
   1942a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   1942c:	68fb      	ldr	r3, [r7, #12]
   1942e:	681b      	ldr	r3, [r3, #0]
   19430:	88fa      	ldrh	r2, [r7, #6]
   19432:	68b9      	ldr	r1, [r7, #8]
   19434:	68f8      	ldr	r0, [r7, #12]
   19436:	4798      	blx	r3
   19438:	4603      	mov	r3, r0
}
   1943a:	4618      	mov	r0, r3
   1943c:	3710      	adds	r7, #16
   1943e:	46bd      	mov	sp, r7
   19440:	bd80      	pop	{r7, pc}
   19442:	bf00      	nop
   19444:	00021b60 	.word	0x00021b60
   19448:	00007d5d 	.word	0x00007d5d

0001944c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   1944c:	b580      	push	{r7, lr}
   1944e:	b084      	sub	sp, #16
   19450:	af00      	add	r7, sp, #0
   19452:	60f8      	str	r0, [r7, #12]
   19454:	60b9      	str	r1, [r7, #8]
   19456:	4613      	mov	r3, r2
   19458:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   1945a:	68fb      	ldr	r3, [r7, #12]
   1945c:	2b00      	cmp	r3, #0
   1945e:	d004      	beq.n	1946a <io_read+0x1e>
   19460:	68bb      	ldr	r3, [r7, #8]
   19462:	2b00      	cmp	r3, #0
   19464:	d001      	beq.n	1946a <io_read+0x1e>
   19466:	2301      	movs	r3, #1
   19468:	e000      	b.n	1946c <io_read+0x20>
   1946a:	2300      	movs	r3, #0
   1946c:	f003 0301 	and.w	r3, r3, #1
   19470:	b2db      	uxtb	r3, r3
   19472:	223d      	movs	r2, #61	; 0x3d
   19474:	4907      	ldr	r1, [pc, #28]	; (19494 <io_read+0x48>)
   19476:	4618      	mov	r0, r3
   19478:	4b07      	ldr	r3, [pc, #28]	; (19498 <io_read+0x4c>)
   1947a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   1947c:	68fb      	ldr	r3, [r7, #12]
   1947e:	685b      	ldr	r3, [r3, #4]
   19480:	88fa      	ldrh	r2, [r7, #6]
   19482:	68b9      	ldr	r1, [r7, #8]
   19484:	68f8      	ldr	r0, [r7, #12]
   19486:	4798      	blx	r3
   19488:	4603      	mov	r3, r0
}
   1948a:	4618      	mov	r0, r3
   1948c:	3710      	adds	r7, #16
   1948e:	46bd      	mov	sp, r7
   19490:	bd80      	pop	{r7, pc}
   19492:	bf00      	nop
   19494:	00021b60 	.word	0x00021b60
   19498:	00007d5d 	.word	0x00007d5d

0001949c <__aeabi_atexit>:
   1949c:	460b      	mov	r3, r1
   1949e:	4601      	mov	r1, r0
   194a0:	4618      	mov	r0, r3
   194a2:	f002 ba43 	b.w	1b92c <__cxa_atexit>
   194a6:	bf00      	nop

000194a8 <_ZdlPvj>:
   194a8:	f7fb b8f6 	b.w	14698 <_ZdlPv>
   194ac:	0000      	movs	r0, r0
	...

000194b0 <floor>:
   194b0:	f3c1 520a 	ubfx	r2, r1, #20, #11
   194b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   194b8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   194bc:	2e13      	cmp	r6, #19
   194be:	460b      	mov	r3, r1
   194c0:	460d      	mov	r5, r1
   194c2:	4604      	mov	r4, r0
   194c4:	4688      	mov	r8, r1
   194c6:	4607      	mov	r7, r0
   194c8:	dc1d      	bgt.n	19506 <floor+0x56>
   194ca:	2e00      	cmp	r6, #0
   194cc:	db40      	blt.n	19550 <floor+0xa0>
   194ce:	4a3c      	ldr	r2, [pc, #240]	; (195c0 <floor+0x110>)
   194d0:	fa42 f906 	asr.w	r9, r2, r6
   194d4:	ea01 0209 	and.w	r2, r1, r9
   194d8:	4302      	orrs	r2, r0
   194da:	4686      	mov	lr, r0
   194dc:	d018      	beq.n	19510 <floor+0x60>
   194de:	a336      	add	r3, pc, #216	; (adr r3, 195b8 <floor+0x108>)
   194e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   194e4:	f001 f91c 	bl	1a720 <__adddf3>
   194e8:	2200      	movs	r2, #0
   194ea:	2300      	movs	r3, #0
   194ec:	f001 fd5a 	bl	1afa4 <__aeabi_dcmpgt>
   194f0:	b120      	cbz	r0, 194fc <floor+0x4c>
   194f2:	2d00      	cmp	r5, #0
   194f4:	db42      	blt.n	1957c <floor+0xcc>
   194f6:	ea28 0509 	bic.w	r5, r8, r9
   194fa:	2700      	movs	r7, #0
   194fc:	463c      	mov	r4, r7
   194fe:	4629      	mov	r1, r5
   19500:	4620      	mov	r0, r4
   19502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19506:	2e33      	cmp	r6, #51	; 0x33
   19508:	dd06      	ble.n	19518 <floor+0x68>
   1950a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1950e:	d02f      	beq.n	19570 <floor+0xc0>
   19510:	4619      	mov	r1, r3
   19512:	4620      	mov	r0, r4
   19514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19518:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   1951c:	f04f 39ff 	mov.w	r9, #4294967295
   19520:	fa29 f902 	lsr.w	r9, r9, r2
   19524:	ea10 0f09 	tst.w	r0, r9
   19528:	d0f2      	beq.n	19510 <floor+0x60>
   1952a:	a323      	add	r3, pc, #140	; (adr r3, 195b8 <floor+0x108>)
   1952c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19530:	f001 f8f6 	bl	1a720 <__adddf3>
   19534:	2200      	movs	r2, #0
   19536:	2300      	movs	r3, #0
   19538:	f001 fd34 	bl	1afa4 <__aeabi_dcmpgt>
   1953c:	2800      	cmp	r0, #0
   1953e:	d0dd      	beq.n	194fc <floor+0x4c>
   19540:	2d00      	cmp	r5, #0
   19542:	db21      	blt.n	19588 <floor+0xd8>
   19544:	4645      	mov	r5, r8
   19546:	ea27 0709 	bic.w	r7, r7, r9
   1954a:	463c      	mov	r4, r7
   1954c:	4629      	mov	r1, r5
   1954e:	e7d7      	b.n	19500 <floor+0x50>
   19550:	a319      	add	r3, pc, #100	; (adr r3, 195b8 <floor+0x108>)
   19552:	e9d3 2300 	ldrd	r2, r3, [r3]
   19556:	f001 f8e3 	bl	1a720 <__adddf3>
   1955a:	2200      	movs	r2, #0
   1955c:	2300      	movs	r3, #0
   1955e:	f001 fd21 	bl	1afa4 <__aeabi_dcmpgt>
   19562:	2800      	cmp	r0, #0
   19564:	d0ca      	beq.n	194fc <floor+0x4c>
   19566:	2d00      	cmp	r5, #0
   19568:	db19      	blt.n	1959e <floor+0xee>
   1956a:	2700      	movs	r7, #0
   1956c:	463d      	mov	r5, r7
   1956e:	e7c5      	b.n	194fc <floor+0x4c>
   19570:	4602      	mov	r2, r0
   19572:	460b      	mov	r3, r1
   19574:	f001 f8d4 	bl	1a720 <__adddf3>
   19578:	4604      	mov	r4, r0
   1957a:	e7ca      	b.n	19512 <floor+0x62>
   1957c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   19580:	fa43 f606 	asr.w	r6, r3, r6
   19584:	44b0      	add	r8, r6
   19586:	e7b6      	b.n	194f6 <floor+0x46>
   19588:	2e14      	cmp	r6, #20
   1958a:	d010      	beq.n	195ae <floor+0xfe>
   1958c:	2301      	movs	r3, #1
   1958e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   19592:	fa03 f606 	lsl.w	r6, r3, r6
   19596:	1937      	adds	r7, r6, r4
   19598:	bf28      	it	cs
   1959a:	4498      	addcs	r8, r3
   1959c:	e7d2      	b.n	19544 <floor+0x94>
   1959e:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   195a2:	4b08      	ldr	r3, [pc, #32]	; (195c4 <floor+0x114>)
   195a4:	4322      	orrs	r2, r4
   195a6:	bf18      	it	ne
   195a8:	461d      	movne	r5, r3
   195aa:	2700      	movs	r7, #0
   195ac:	e7a6      	b.n	194fc <floor+0x4c>
   195ae:	f105 0801 	add.w	r8, r5, #1
   195b2:	e7c7      	b.n	19544 <floor+0x94>
   195b4:	f3af 8000 	nop.w
   195b8:	8800759c 	.word	0x8800759c
   195bc:	7e37e43c 	.word	0x7e37e43c
   195c0:	000fffff 	.word	0x000fffff
   195c4:	bff00000 	.word	0xbff00000

000195c8 <pow>:
   195c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195cc:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 198c0 <pow+0x2f8>
   195d0:	b08d      	sub	sp, #52	; 0x34
   195d2:	4606      	mov	r6, r0
   195d4:	460f      	mov	r7, r1
   195d6:	4614      	mov	r4, r2
   195d8:	461d      	mov	r5, r3
   195da:	f000 f975 	bl	198c8 <__ieee754_pow>
   195de:	f999 8000 	ldrsb.w	r8, [r9]
   195e2:	f1b8 3fff 	cmp.w	r8, #4294967295
   195e6:	e9cd 0100 	strd	r0, r1, [sp]
   195ea:	d036      	beq.n	1965a <pow+0x92>
   195ec:	4622      	mov	r2, r4
   195ee:	462b      	mov	r3, r5
   195f0:	4620      	mov	r0, r4
   195f2:	4629      	mov	r1, r5
   195f4:	f001 fce0 	bl	1afb8 <__aeabi_dcmpun>
   195f8:	4683      	mov	fp, r0
   195fa:	bb70      	cbnz	r0, 1965a <pow+0x92>
   195fc:	4632      	mov	r2, r6
   195fe:	463b      	mov	r3, r7
   19600:	4630      	mov	r0, r6
   19602:	4639      	mov	r1, r7
   19604:	f001 fcd8 	bl	1afb8 <__aeabi_dcmpun>
   19608:	2200      	movs	r2, #0
   1960a:	4682      	mov	sl, r0
   1960c:	2300      	movs	r3, #0
   1960e:	2800      	cmp	r0, #0
   19610:	f040 80a0 	bne.w	19754 <pow+0x18c>
   19614:	4630      	mov	r0, r6
   19616:	4639      	mov	r1, r7
   19618:	f001 fc9c 	bl	1af54 <__aeabi_dcmpeq>
   1961c:	b310      	cbz	r0, 19664 <pow+0x9c>
   1961e:	2200      	movs	r2, #0
   19620:	2300      	movs	r3, #0
   19622:	4620      	mov	r0, r4
   19624:	4629      	mov	r1, r5
   19626:	f001 fc95 	bl	1af54 <__aeabi_dcmpeq>
   1962a:	4683      	mov	fp, r0
   1962c:	2800      	cmp	r0, #0
   1962e:	d06a      	beq.n	19706 <pow+0x13e>
   19630:	2201      	movs	r2, #1
   19632:	4b9c      	ldr	r3, [pc, #624]	; (198a4 <pow+0x2dc>)
   19634:	9202      	str	r2, [sp, #8]
   19636:	2100      	movs	r1, #0
   19638:	2200      	movs	r2, #0
   1963a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1963e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19642:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19646:	e9cd 1208 	strd	r1, r2, [sp, #32]
   1964a:	9303      	str	r3, [sp, #12]
   1964c:	f1b8 0f00 	cmp.w	r8, #0
   19650:	d045      	beq.n	196de <pow+0x116>
   19652:	4c95      	ldr	r4, [pc, #596]	; (198a8 <pow+0x2e0>)
   19654:	2300      	movs	r3, #0
   19656:	e9cd 3400 	strd	r3, r4, [sp]
   1965a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1965e:	b00d      	add	sp, #52	; 0x34
   19660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19664:	e9dd 0100 	ldrd	r0, r1, [sp]
   19668:	f000 ff34 	bl	1a4d4 <finite>
   1966c:	4680      	mov	r8, r0
   1966e:	2800      	cmp	r0, #0
   19670:	f000 808b 	beq.w	1978a <pow+0x1c2>
   19674:	f04f 0a00 	mov.w	sl, #0
   19678:	f04f 0b00 	mov.w	fp, #0
   1967c:	4652      	mov	r2, sl
   1967e:	465b      	mov	r3, fp
   19680:	e9dd 0100 	ldrd	r0, r1, [sp]
   19684:	f001 fc66 	bl	1af54 <__aeabi_dcmpeq>
   19688:	2800      	cmp	r0, #0
   1968a:	d0e6      	beq.n	1965a <pow+0x92>
   1968c:	4630      	mov	r0, r6
   1968e:	4639      	mov	r1, r7
   19690:	f000 ff20 	bl	1a4d4 <finite>
   19694:	2800      	cmp	r0, #0
   19696:	d0e0      	beq.n	1965a <pow+0x92>
   19698:	4620      	mov	r0, r4
   1969a:	4629      	mov	r1, r5
   1969c:	f000 ff1a 	bl	1a4d4 <finite>
   196a0:	2800      	cmp	r0, #0
   196a2:	d0da      	beq.n	1965a <pow+0x92>
   196a4:	f999 3000 	ldrsb.w	r3, [r9]
   196a8:	4a7e      	ldr	r2, [pc, #504]	; (198a4 <pow+0x2dc>)
   196aa:	9203      	str	r2, [sp, #12]
   196ac:	2104      	movs	r1, #4
   196ae:	2200      	movs	r2, #0
   196b0:	2b02      	cmp	r3, #2
   196b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
   196b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
   196ba:	e9cd ab08 	strd	sl, fp, [sp, #32]
   196be:	9102      	str	r1, [sp, #8]
   196c0:	920a      	str	r2, [sp, #40]	; 0x28
   196c2:	d003      	beq.n	196cc <pow+0x104>
   196c4:	a802      	add	r0, sp, #8
   196c6:	f000 ff0b 	bl	1a4e0 <matherr>
   196ca:	b968      	cbnz	r0, 196e8 <pow+0x120>
   196cc:	f002 f93a 	bl	1b944 <__errno>
   196d0:	2322      	movs	r3, #34	; 0x22
   196d2:	6003      	str	r3, [r0, #0]
   196d4:	e008      	b.n	196e8 <pow+0x120>
   196d6:	2300      	movs	r3, #0
   196d8:	2400      	movs	r4, #0
   196da:	e9cd 3408 	strd	r3, r4, [sp, #32]
   196de:	a802      	add	r0, sp, #8
   196e0:	f000 fefe 	bl	1a4e0 <matherr>
   196e4:	2800      	cmp	r0, #0
   196e6:	d030      	beq.n	1974a <pow+0x182>
   196e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   196ea:	b11b      	cbz	r3, 196f4 <pow+0x12c>
   196ec:	f002 f92a 	bl	1b944 <__errno>
   196f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   196f2:	6003      	str	r3, [r0, #0]
   196f4:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   196f8:	e9cd 3400 	strd	r3, r4, [sp]
   196fc:	e9dd 0100 	ldrd	r0, r1, [sp]
   19700:	b00d      	add	sp, #52	; 0x34
   19702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19706:	4620      	mov	r0, r4
   19708:	4629      	mov	r1, r5
   1970a:	f000 fee3 	bl	1a4d4 <finite>
   1970e:	2800      	cmp	r0, #0
   19710:	d0a3      	beq.n	1965a <pow+0x92>
   19712:	2200      	movs	r2, #0
   19714:	2300      	movs	r3, #0
   19716:	4620      	mov	r0, r4
   19718:	4629      	mov	r1, r5
   1971a:	f001 fc25 	bl	1af68 <__aeabi_dcmplt>
   1971e:	2800      	cmp	r0, #0
   19720:	d09b      	beq.n	1965a <pow+0x92>
   19722:	f999 3000 	ldrsb.w	r3, [r9]
   19726:	4a5f      	ldr	r2, [pc, #380]	; (198a4 <pow+0x2dc>)
   19728:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   1972c:	2101      	movs	r1, #1
   1972e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19732:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19736:	9102      	str	r1, [sp, #8]
   19738:	9203      	str	r2, [sp, #12]
   1973a:	2b00      	cmp	r3, #0
   1973c:	d0cb      	beq.n	196d6 <pow+0x10e>
   1973e:	495b      	ldr	r1, [pc, #364]	; (198ac <pow+0x2e4>)
   19740:	2000      	movs	r0, #0
   19742:	2b02      	cmp	r3, #2
   19744:	e9cd 0108 	strd	r0, r1, [sp, #32]
   19748:	d1c9      	bne.n	196de <pow+0x116>
   1974a:	f002 f8fb 	bl	1b944 <__errno>
   1974e:	2321      	movs	r3, #33	; 0x21
   19750:	6003      	str	r3, [r0, #0]
   19752:	e7c9      	b.n	196e8 <pow+0x120>
   19754:	4620      	mov	r0, r4
   19756:	4629      	mov	r1, r5
   19758:	f001 fbfc 	bl	1af54 <__aeabi_dcmpeq>
   1975c:	2800      	cmp	r0, #0
   1975e:	f43f af7c 	beq.w	1965a <pow+0x92>
   19762:	4b51      	ldr	r3, [pc, #324]	; (198a8 <pow+0x2e0>)
   19764:	494f      	ldr	r1, [pc, #316]	; (198a4 <pow+0x2dc>)
   19766:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   1976a:	2001      	movs	r0, #1
   1976c:	2200      	movs	r2, #0
   1976e:	f1b8 0f02 	cmp.w	r8, #2
   19772:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19776:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1977a:	9002      	str	r0, [sp, #8]
   1977c:	9103      	str	r1, [sp, #12]
   1977e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   19782:	d1ac      	bne.n	196de <pow+0x116>
   19784:	e9cd 2300 	strd	r2, r3, [sp]
   19788:	e767      	b.n	1965a <pow+0x92>
   1978a:	4630      	mov	r0, r6
   1978c:	4639      	mov	r1, r7
   1978e:	f000 fea1 	bl	1a4d4 <finite>
   19792:	2800      	cmp	r0, #0
   19794:	f43f af6e 	beq.w	19674 <pow+0xac>
   19798:	4620      	mov	r0, r4
   1979a:	4629      	mov	r1, r5
   1979c:	f000 fe9a 	bl	1a4d4 <finite>
   197a0:	2800      	cmp	r0, #0
   197a2:	f43f af67 	beq.w	19674 <pow+0xac>
   197a6:	e9dd 2300 	ldrd	r2, r3, [sp]
   197aa:	4610      	mov	r0, r2
   197ac:	4619      	mov	r1, r3
   197ae:	f001 fc03 	bl	1afb8 <__aeabi_dcmpun>
   197b2:	2800      	cmp	r0, #0
   197b4:	d158      	bne.n	19868 <pow+0x2a0>
   197b6:	2303      	movs	r3, #3
   197b8:	f999 8000 	ldrsb.w	r8, [r9]
   197bc:	9302      	str	r3, [sp, #8]
   197be:	4b39      	ldr	r3, [pc, #228]	; (198a4 <pow+0x2dc>)
   197c0:	900a      	str	r0, [sp, #40]	; 0x28
   197c2:	9303      	str	r3, [sp, #12]
   197c4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   197c8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   197cc:	2200      	movs	r2, #0
   197ce:	2300      	movs	r3, #0
   197d0:	4630      	mov	r0, r6
   197d2:	4639      	mov	r1, r7
   197d4:	f1b8 0f00 	cmp.w	r8, #0
   197d8:	d126      	bne.n	19828 <pow+0x260>
   197da:	4f35      	ldr	r7, [pc, #212]	; (198b0 <pow+0x2e8>)
   197dc:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   197e0:	e9cd 6708 	strd	r6, r7, [sp, #32]
   197e4:	f001 fbc0 	bl	1af68 <__aeabi_dcmplt>
   197e8:	2800      	cmp	r0, #0
   197ea:	f43f af6b 	beq.w	196c4 <pow+0xfc>
   197ee:	2200      	movs	r2, #0
   197f0:	4b30      	ldr	r3, [pc, #192]	; (198b4 <pow+0x2ec>)
   197f2:	4620      	mov	r0, r4
   197f4:	4629      	mov	r1, r5
   197f6:	f001 f945 	bl	1aa84 <__aeabi_dmul>
   197fa:	4604      	mov	r4, r0
   197fc:	460d      	mov	r5, r1
   197fe:	f000 fe77 	bl	1a4f0 <rint>
   19802:	4602      	mov	r2, r0
   19804:	460b      	mov	r3, r1
   19806:	4620      	mov	r0, r4
   19808:	4629      	mov	r1, r5
   1980a:	f001 fba3 	bl	1af54 <__aeabi_dcmpeq>
   1980e:	bb40      	cbnz	r0, 19862 <pow+0x29a>
   19810:	4b29      	ldr	r3, [pc, #164]	; (198b8 <pow+0x2f0>)
   19812:	f999 8000 	ldrsb.w	r8, [r9]
   19816:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1981a:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1981e:	f1b8 0f02 	cmp.w	r8, #2
   19822:	f47f af4f 	bne.w	196c4 <pow+0xfc>
   19826:	e751      	b.n	196cc <pow+0x104>
   19828:	4f24      	ldr	r7, [pc, #144]	; (198bc <pow+0x2f4>)
   1982a:	2600      	movs	r6, #0
   1982c:	e9cd 6708 	strd	r6, r7, [sp, #32]
   19830:	f001 fb9a 	bl	1af68 <__aeabi_dcmplt>
   19834:	2800      	cmp	r0, #0
   19836:	d0f2      	beq.n	1981e <pow+0x256>
   19838:	2200      	movs	r2, #0
   1983a:	4b1e      	ldr	r3, [pc, #120]	; (198b4 <pow+0x2ec>)
   1983c:	4620      	mov	r0, r4
   1983e:	4629      	mov	r1, r5
   19840:	f001 f920 	bl	1aa84 <__aeabi_dmul>
   19844:	4604      	mov	r4, r0
   19846:	460d      	mov	r5, r1
   19848:	f000 fe52 	bl	1a4f0 <rint>
   1984c:	4602      	mov	r2, r0
   1984e:	460b      	mov	r3, r1
   19850:	4620      	mov	r0, r4
   19852:	4629      	mov	r1, r5
   19854:	f001 fb7e 	bl	1af54 <__aeabi_dcmpeq>
   19858:	b918      	cbnz	r0, 19862 <pow+0x29a>
   1985a:	4b14      	ldr	r3, [pc, #80]	; (198ac <pow+0x2e4>)
   1985c:	2200      	movs	r2, #0
   1985e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   19862:	f999 8000 	ldrsb.w	r8, [r9]
   19866:	e7da      	b.n	1981e <pow+0x256>
   19868:	f999 9000 	ldrsb.w	r9, [r9]
   1986c:	4b0d      	ldr	r3, [pc, #52]	; (198a4 <pow+0x2dc>)
   1986e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   19872:	2201      	movs	r2, #1
   19874:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19878:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1987c:	9202      	str	r2, [sp, #8]
   1987e:	9303      	str	r3, [sp, #12]
   19880:	f1b9 0f00 	cmp.w	r9, #0
   19884:	f43f af27 	beq.w	196d6 <pow+0x10e>
   19888:	2200      	movs	r2, #0
   1988a:	2300      	movs	r3, #0
   1988c:	4610      	mov	r0, r2
   1988e:	4619      	mov	r1, r3
   19890:	f001 fa22 	bl	1acd8 <__aeabi_ddiv>
   19894:	f1b9 0f02 	cmp.w	r9, #2
   19898:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1989c:	f43f af55 	beq.w	1974a <pow+0x182>
   198a0:	e71d      	b.n	196de <pow+0x116>
   198a2:	bf00      	nop
   198a4:	00021b74 	.word	0x00021b74
   198a8:	3ff00000 	.word	0x3ff00000
   198ac:	fff00000 	.word	0xfff00000
   198b0:	47efffff 	.word	0x47efffff
   198b4:	3fe00000 	.word	0x3fe00000
   198b8:	c7efffff 	.word	0xc7efffff
   198bc:	7ff00000 	.word	0x7ff00000
   198c0:	20000247 	.word	0x20000247
   198c4:	00000000 	.word	0x00000000

000198c8 <__ieee754_pow>:
   198c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198cc:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   198d0:	ea57 0402 	orrs.w	r4, r7, r2
   198d4:	b093      	sub	sp, #76	; 0x4c
   198d6:	d037      	beq.n	19948 <__ieee754_pow+0x80>
   198d8:	4c67      	ldr	r4, [pc, #412]	; (19a78 <__ieee754_pow+0x1b0>)
   198da:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   198de:	42a6      	cmp	r6, r4
   198e0:	4683      	mov	fp, r0
   198e2:	460d      	mov	r5, r1
   198e4:	dc29      	bgt.n	1993a <__ieee754_pow+0x72>
   198e6:	469a      	mov	sl, r3
   198e8:	4696      	mov	lr, r2
   198ea:	d025      	beq.n	19938 <__ieee754_pow+0x70>
   198ec:	42a7      	cmp	r7, r4
   198ee:	dc24      	bgt.n	1993a <__ieee754_pow+0x72>
   198f0:	4c61      	ldr	r4, [pc, #388]	; (19a78 <__ieee754_pow+0x1b0>)
   198f2:	42a7      	cmp	r7, r4
   198f4:	d079      	beq.n	199ea <__ieee754_pow+0x122>
   198f6:	2d00      	cmp	r5, #0
   198f8:	4689      	mov	r9, r1
   198fa:	4680      	mov	r8, r0
   198fc:	e9cd 2300 	strd	r2, r3, [sp]
   19900:	db77      	blt.n	199f2 <__ieee754_pow+0x12a>
   19902:	2400      	movs	r4, #0
   19904:	f1be 0f00 	cmp.w	lr, #0
   19908:	d12c      	bne.n	19964 <__ieee754_pow+0x9c>
   1990a:	4b5b      	ldr	r3, [pc, #364]	; (19a78 <__ieee754_pow+0x1b0>)
   1990c:	429f      	cmp	r7, r3
   1990e:	f000 808b 	beq.w	19a28 <__ieee754_pow+0x160>
   19912:	4b5a      	ldr	r3, [pc, #360]	; (19a7c <__ieee754_pow+0x1b4>)
   19914:	429f      	cmp	r7, r3
   19916:	d061      	beq.n	199dc <__ieee754_pow+0x114>
   19918:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
   1991c:	f000 83ba 	beq.w	1a094 <__ieee754_pow+0x7cc>
   19920:	4b57      	ldr	r3, [pc, #348]	; (19a80 <__ieee754_pow+0x1b8>)
   19922:	459a      	cmp	sl, r3
   19924:	d11e      	bne.n	19964 <__ieee754_pow+0x9c>
   19926:	2d00      	cmp	r5, #0
   19928:	db1c      	blt.n	19964 <__ieee754_pow+0x9c>
   1992a:	4640      	mov	r0, r8
   1992c:	4649      	mov	r1, r9
   1992e:	b013      	add	sp, #76	; 0x4c
   19930:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19934:	f000 bd0e 	b.w	1a354 <__ieee754_sqrt>
   19938:	b158      	cbz	r0, 19952 <__ieee754_pow+0x8a>
   1993a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   1993e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   19942:	ea56 030b 	orrs.w	r3, r6, fp
   19946:	d106      	bne.n	19956 <__ieee754_pow+0x8e>
   19948:	494c      	ldr	r1, [pc, #304]	; (19a7c <__ieee754_pow+0x1b4>)
   1994a:	2000      	movs	r0, #0
   1994c:	b013      	add	sp, #76	; 0x4c
   1994e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19952:	42b7      	cmp	r7, r6
   19954:	ddcc      	ble.n	198f0 <__ieee754_pow+0x28>
   19956:	484b      	ldr	r0, [pc, #300]	; (19a84 <__ieee754_pow+0x1bc>)
   19958:	b013      	add	sp, #76	; 0x4c
   1995a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1995e:	f000 bdc1 	b.w	1a4e4 <nan>
   19962:	2400      	movs	r4, #0
   19964:	4640      	mov	r0, r8
   19966:	4649      	mov	r1, r9
   19968:	f000 fdb0 	bl	1a4cc <fabs>
   1996c:	f1bb 0f00 	cmp.w	fp, #0
   19970:	d119      	bne.n	199a6 <__ieee754_pow+0xde>
   19972:	b126      	cbz	r6, 1997e <__ieee754_pow+0xb6>
   19974:	4b41      	ldr	r3, [pc, #260]	; (19a7c <__ieee754_pow+0x1b4>)
   19976:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   1997a:	429a      	cmp	r2, r3
   1997c:	d113      	bne.n	199a6 <__ieee754_pow+0xde>
   1997e:	f1ba 0f00 	cmp.w	sl, #0
   19982:	f2c0 83bc 	blt.w	1a0fe <__ieee754_pow+0x836>
   19986:	2d00      	cmp	r5, #0
   19988:	dae0      	bge.n	1994c <__ieee754_pow+0x84>
   1998a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   1998e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   19992:	ea56 0304 	orrs.w	r3, r6, r4
   19996:	f000 848f 	beq.w	1a2b8 <__ieee754_pow+0x9f0>
   1999a:	2c01      	cmp	r4, #1
   1999c:	d1d6      	bne.n	1994c <__ieee754_pow+0x84>
   1999e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   199a2:	4619      	mov	r1, r3
   199a4:	e7d2      	b.n	1994c <__ieee754_pow+0x84>
   199a6:	0fed      	lsrs	r5, r5, #31
   199a8:	3d01      	subs	r5, #1
   199aa:	ea54 0305 	orrs.w	r3, r4, r5
   199ae:	d04e      	beq.n	19a4e <__ieee754_pow+0x186>
   199b0:	4b35      	ldr	r3, [pc, #212]	; (19a88 <__ieee754_pow+0x1c0>)
   199b2:	429f      	cmp	r7, r3
   199b4:	dd6e      	ble.n	19a94 <__ieee754_pow+0x1cc>
   199b6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   199ba:	429f      	cmp	r7, r3
   199bc:	f340 83e8 	ble.w	1a190 <__ieee754_pow+0x8c8>
   199c0:	4b32      	ldr	r3, [pc, #200]	; (19a8c <__ieee754_pow+0x1c4>)
   199c2:	429e      	cmp	r6, r3
   199c4:	dd4e      	ble.n	19a64 <__ieee754_pow+0x19c>
   199c6:	f1ba 0f00 	cmp.w	sl, #0
   199ca:	dd4e      	ble.n	19a6a <__ieee754_pow+0x1a2>
   199cc:	a328      	add	r3, pc, #160	; (adr r3, 19a70 <__ieee754_pow+0x1a8>)
   199ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   199d2:	4610      	mov	r0, r2
   199d4:	4619      	mov	r1, r3
   199d6:	f001 f855 	bl	1aa84 <__aeabi_dmul>
   199da:	e7b7      	b.n	1994c <__ieee754_pow+0x84>
   199dc:	f1ba 0f00 	cmp.w	sl, #0
   199e0:	f2c0 843c 	blt.w	1a25c <__ieee754_pow+0x994>
   199e4:	4640      	mov	r0, r8
   199e6:	4649      	mov	r1, r9
   199e8:	e7b0      	b.n	1994c <__ieee754_pow+0x84>
   199ea:	f1be 0f00 	cmp.w	lr, #0
   199ee:	d082      	beq.n	198f6 <__ieee754_pow+0x2e>
   199f0:	e7a3      	b.n	1993a <__ieee754_pow+0x72>
   199f2:	4b27      	ldr	r3, [pc, #156]	; (19a90 <__ieee754_pow+0x1c8>)
   199f4:	429f      	cmp	r7, r3
   199f6:	dc28      	bgt.n	19a4a <__ieee754_pow+0x182>
   199f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   199fc:	429f      	cmp	r7, r3
   199fe:	dd80      	ble.n	19902 <__ieee754_pow+0x3a>
   19a00:	153b      	asrs	r3, r7, #20
   19a02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   19a06:	2b14      	cmp	r3, #20
   19a08:	f340 843e 	ble.w	1a288 <__ieee754_pow+0x9c0>
   19a0c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   19a10:	fa2e f203 	lsr.w	r2, lr, r3
   19a14:	fa02 f303 	lsl.w	r3, r2, r3
   19a18:	459e      	cmp	lr, r3
   19a1a:	f47f af72 	bne.w	19902 <__ieee754_pow+0x3a>
   19a1e:	f002 0201 	and.w	r2, r2, #1
   19a22:	f1c2 0402 	rsb	r4, r2, #2
   19a26:	e76d      	b.n	19904 <__ieee754_pow+0x3c>
   19a28:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   19a2c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   19a30:	ea53 030b 	orrs.w	r3, r3, fp
   19a34:	d088      	beq.n	19948 <__ieee754_pow+0x80>
   19a36:	4b15      	ldr	r3, [pc, #84]	; (19a8c <__ieee754_pow+0x1c4>)
   19a38:	429e      	cmp	r6, r3
   19a3a:	f340 8332 	ble.w	1a0a2 <__ieee754_pow+0x7da>
   19a3e:	f1ba 0f00 	cmp.w	sl, #0
   19a42:	db12      	blt.n	19a6a <__ieee754_pow+0x1a2>
   19a44:	e9dd 0100 	ldrd	r0, r1, [sp]
   19a48:	e780      	b.n	1994c <__ieee754_pow+0x84>
   19a4a:	2402      	movs	r4, #2
   19a4c:	e75a      	b.n	19904 <__ieee754_pow+0x3c>
   19a4e:	4642      	mov	r2, r8
   19a50:	464b      	mov	r3, r9
   19a52:	4640      	mov	r0, r8
   19a54:	4649      	mov	r1, r9
   19a56:	f000 fe61 	bl	1a71c <__aeabi_dsub>
   19a5a:	4602      	mov	r2, r0
   19a5c:	460b      	mov	r3, r1
   19a5e:	f001 f93b 	bl	1acd8 <__aeabi_ddiv>
   19a62:	e773      	b.n	1994c <__ieee754_pow+0x84>
   19a64:	f1ba 0f00 	cmp.w	sl, #0
   19a68:	dbb0      	blt.n	199cc <__ieee754_pow+0x104>
   19a6a:	2000      	movs	r0, #0
   19a6c:	2100      	movs	r1, #0
   19a6e:	e76d      	b.n	1994c <__ieee754_pow+0x84>
   19a70:	8800759c 	.word	0x8800759c
   19a74:	7e37e43c 	.word	0x7e37e43c
   19a78:	7ff00000 	.word	0x7ff00000
   19a7c:	3ff00000 	.word	0x3ff00000
   19a80:	3fe00000 	.word	0x3fe00000
   19a84:	00021cac 	.word	0x00021cac
   19a88:	41e00000 	.word	0x41e00000
   19a8c:	3fefffff 	.word	0x3fefffff
   19a90:	433fffff 	.word	0x433fffff
   19a94:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   19a98:	f04f 0200 	mov.w	r2, #0
   19a9c:	da05      	bge.n	19aaa <__ieee754_pow+0x1e2>
   19a9e:	4bd4      	ldr	r3, [pc, #848]	; (19df0 <__ieee754_pow+0x528>)
   19aa0:	f000 fff0 	bl	1aa84 <__aeabi_dmul>
   19aa4:	f06f 0234 	mvn.w	r2, #52	; 0x34
   19aa8:	460e      	mov	r6, r1
   19aaa:	1533      	asrs	r3, r6, #20
   19aac:	4fd1      	ldr	r7, [pc, #836]	; (19df4 <__ieee754_pow+0x52c>)
   19aae:	f3c6 0613 	ubfx	r6, r6, #0, #20
   19ab2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   19ab6:	4413      	add	r3, r2
   19ab8:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   19abc:	42be      	cmp	r6, r7
   19abe:	461a      	mov	r2, r3
   19ac0:	930d      	str	r3, [sp, #52]	; 0x34
   19ac2:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   19ac6:	f340 8321 	ble.w	1a10c <__ieee754_pow+0x844>
   19aca:	4bcb      	ldr	r3, [pc, #812]	; (19df8 <__ieee754_pow+0x530>)
   19acc:	429e      	cmp	r6, r3
   19ace:	f340 83fd 	ble.w	1a2cc <__ieee754_pow+0xa04>
   19ad2:	4613      	mov	r3, r2
   19ad4:	3301      	adds	r3, #1
   19ad6:	930d      	str	r3, [sp, #52]	; 0x34
   19ad8:	4bc8      	ldr	r3, [pc, #800]	; (19dfc <__ieee754_pow+0x534>)
   19ada:	2200      	movs	r2, #0
   19adc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19ae0:	2700      	movs	r7, #0
   19ae2:	2600      	movs	r6, #0
   19ae4:	e9cd 6708 	strd	r6, r7, [sp, #32]
   19ae8:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   19aec:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   19af0:	2700      	movs	r7, #0
   19af2:	4602      	mov	r2, r0
   19af4:	4653      	mov	r3, sl
   19af6:	4651      	mov	r1, sl
   19af8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   19afc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19b00:	f000 fe0c 	bl	1a71c <__aeabi_dsub>
   19b04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19b08:	4680      	mov	r8, r0
   19b0a:	4689      	mov	r9, r1
   19b0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   19b10:	f000 fe06 	bl	1a720 <__adddf3>
   19b14:	4602      	mov	r2, r0
   19b16:	460b      	mov	r3, r1
   19b18:	2000      	movs	r0, #0
   19b1a:	49b8      	ldr	r1, [pc, #736]	; (19dfc <__ieee754_pow+0x534>)
   19b1c:	f001 f8dc 	bl	1acd8 <__aeabi_ddiv>
   19b20:	460a      	mov	r2, r1
   19b22:	4601      	mov	r1, r0
   19b24:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   19b28:	4613      	mov	r3, r2
   19b2a:	4649      	mov	r1, r9
   19b2c:	4602      	mov	r2, r0
   19b2e:	4640      	mov	r0, r8
   19b30:	f000 ffa8 	bl	1aa84 <__aeabi_dmul>
   19b34:	ea4f 036a 	mov.w	r3, sl, asr #1
   19b38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   19b3c:	468c      	mov	ip, r1
   19b3e:	4683      	mov	fp, r0
   19b40:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   19b44:	e9cd bc04 	strd	fp, ip, [sp, #16]
   19b48:	46da      	mov	sl, fp
   19b4a:	468b      	mov	fp, r1
   19b4c:	19d9      	adds	r1, r3, r7
   19b4e:	2300      	movs	r3, #0
   19b50:	e9cd ab02 	strd	sl, fp, [sp, #8]
   19b54:	9302      	str	r3, [sp, #8]
   19b56:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   19b5a:	2000      	movs	r0, #0
   19b5c:	4606      	mov	r6, r0
   19b5e:	460f      	mov	r7, r1
   19b60:	4602      	mov	r2, r0
   19b62:	460b      	mov	r3, r1
   19b64:	4650      	mov	r0, sl
   19b66:	4659      	mov	r1, fp
   19b68:	f000 ff8c 	bl	1aa84 <__aeabi_dmul>
   19b6c:	4602      	mov	r2, r0
   19b6e:	460b      	mov	r3, r1
   19b70:	4640      	mov	r0, r8
   19b72:	4649      	mov	r1, r9
   19b74:	f000 fdd2 	bl	1a71c <__aeabi_dsub>
   19b78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19b7c:	4680      	mov	r8, r0
   19b7e:	4689      	mov	r9, r1
   19b80:	4630      	mov	r0, r6
   19b82:	4639      	mov	r1, r7
   19b84:	f000 fdca 	bl	1a71c <__aeabi_dsub>
   19b88:	4602      	mov	r2, r0
   19b8a:	460b      	mov	r3, r1
   19b8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   19b90:	f000 fdc4 	bl	1a71c <__aeabi_dsub>
   19b94:	4652      	mov	r2, sl
   19b96:	465b      	mov	r3, fp
   19b98:	f000 ff74 	bl	1aa84 <__aeabi_dmul>
   19b9c:	4602      	mov	r2, r0
   19b9e:	460b      	mov	r3, r1
   19ba0:	4640      	mov	r0, r8
   19ba2:	4649      	mov	r1, r9
   19ba4:	f000 fdba 	bl	1a71c <__aeabi_dsub>
   19ba8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   19bac:	f000 ff6a 	bl	1aa84 <__aeabi_dmul>
   19bb0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   19bb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   19bb8:	4632      	mov	r2, r6
   19bba:	463b      	mov	r3, r7
   19bbc:	4630      	mov	r0, r6
   19bbe:	4639      	mov	r1, r7
   19bc0:	f000 ff60 	bl	1aa84 <__aeabi_dmul>
   19bc4:	a378      	add	r3, pc, #480	; (adr r3, 19da8 <__ieee754_pow+0x4e0>)
   19bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   19bca:	4606      	mov	r6, r0
   19bcc:	460f      	mov	r7, r1
   19bce:	f000 ff59 	bl	1aa84 <__aeabi_dmul>
   19bd2:	a377      	add	r3, pc, #476	; (adr r3, 19db0 <__ieee754_pow+0x4e8>)
   19bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   19bd8:	f000 fda2 	bl	1a720 <__adddf3>
   19bdc:	4632      	mov	r2, r6
   19bde:	463b      	mov	r3, r7
   19be0:	f000 ff50 	bl	1aa84 <__aeabi_dmul>
   19be4:	a374      	add	r3, pc, #464	; (adr r3, 19db8 <__ieee754_pow+0x4f0>)
   19be6:	e9d3 2300 	ldrd	r2, r3, [r3]
   19bea:	f000 fd99 	bl	1a720 <__adddf3>
   19bee:	4632      	mov	r2, r6
   19bf0:	463b      	mov	r3, r7
   19bf2:	f000 ff47 	bl	1aa84 <__aeabi_dmul>
   19bf6:	a372      	add	r3, pc, #456	; (adr r3, 19dc0 <__ieee754_pow+0x4f8>)
   19bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   19bfc:	f000 fd90 	bl	1a720 <__adddf3>
   19c00:	4632      	mov	r2, r6
   19c02:	463b      	mov	r3, r7
   19c04:	f000 ff3e 	bl	1aa84 <__aeabi_dmul>
   19c08:	a36f      	add	r3, pc, #444	; (adr r3, 19dc8 <__ieee754_pow+0x500>)
   19c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   19c0e:	f000 fd87 	bl	1a720 <__adddf3>
   19c12:	4632      	mov	r2, r6
   19c14:	463b      	mov	r3, r7
   19c16:	f000 ff35 	bl	1aa84 <__aeabi_dmul>
   19c1a:	a36d      	add	r3, pc, #436	; (adr r3, 19dd0 <__ieee754_pow+0x508>)
   19c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19c20:	f000 fd7e 	bl	1a720 <__adddf3>
   19c24:	4632      	mov	r2, r6
   19c26:	4680      	mov	r8, r0
   19c28:	4689      	mov	r9, r1
   19c2a:	463b      	mov	r3, r7
   19c2c:	4630      	mov	r0, r6
   19c2e:	4639      	mov	r1, r7
   19c30:	f000 ff28 	bl	1aa84 <__aeabi_dmul>
   19c34:	4602      	mov	r2, r0
   19c36:	460b      	mov	r3, r1
   19c38:	4640      	mov	r0, r8
   19c3a:	4649      	mov	r1, r9
   19c3c:	f000 ff22 	bl	1aa84 <__aeabi_dmul>
   19c40:	4652      	mov	r2, sl
   19c42:	4606      	mov	r6, r0
   19c44:	460f      	mov	r7, r1
   19c46:	465b      	mov	r3, fp
   19c48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19c4c:	f000 fd68 	bl	1a720 <__adddf3>
   19c50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19c54:	f000 ff16 	bl	1aa84 <__aeabi_dmul>
   19c58:	4632      	mov	r2, r6
   19c5a:	463b      	mov	r3, r7
   19c5c:	f000 fd60 	bl	1a720 <__adddf3>
   19c60:	4652      	mov	r2, sl
   19c62:	4680      	mov	r8, r0
   19c64:	4689      	mov	r9, r1
   19c66:	465b      	mov	r3, fp
   19c68:	4650      	mov	r0, sl
   19c6a:	4659      	mov	r1, fp
   19c6c:	f000 ff0a 	bl	1aa84 <__aeabi_dmul>
   19c70:	2200      	movs	r2, #0
   19c72:	4b63      	ldr	r3, [pc, #396]	; (19e00 <__ieee754_pow+0x538>)
   19c74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   19c78:	f000 fd52 	bl	1a720 <__adddf3>
   19c7c:	4642      	mov	r2, r8
   19c7e:	464b      	mov	r3, r9
   19c80:	f000 fd4e 	bl	1a720 <__adddf3>
   19c84:	9802      	ldr	r0, [sp, #8]
   19c86:	460f      	mov	r7, r1
   19c88:	4606      	mov	r6, r0
   19c8a:	4632      	mov	r2, r6
   19c8c:	463b      	mov	r3, r7
   19c8e:	4650      	mov	r0, sl
   19c90:	4659      	mov	r1, fp
   19c92:	f000 fef7 	bl	1aa84 <__aeabi_dmul>
   19c96:	2200      	movs	r2, #0
   19c98:	4682      	mov	sl, r0
   19c9a:	468b      	mov	fp, r1
   19c9c:	4b58      	ldr	r3, [pc, #352]	; (19e00 <__ieee754_pow+0x538>)
   19c9e:	4630      	mov	r0, r6
   19ca0:	4639      	mov	r1, r7
   19ca2:	f000 fd3b 	bl	1a71c <__aeabi_dsub>
   19ca6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   19caa:	f000 fd37 	bl	1a71c <__aeabi_dsub>
   19cae:	4602      	mov	r2, r0
   19cb0:	460b      	mov	r3, r1
   19cb2:	4640      	mov	r0, r8
   19cb4:	4649      	mov	r1, r9
   19cb6:	f000 fd31 	bl	1a71c <__aeabi_dsub>
   19cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19cbe:	f000 fee1 	bl	1aa84 <__aeabi_dmul>
   19cc2:	4632      	mov	r2, r6
   19cc4:	4680      	mov	r8, r0
   19cc6:	4689      	mov	r9, r1
   19cc8:	463b      	mov	r3, r7
   19cca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   19cce:	f000 fed9 	bl	1aa84 <__aeabi_dmul>
   19cd2:	4602      	mov	r2, r0
   19cd4:	460b      	mov	r3, r1
   19cd6:	4640      	mov	r0, r8
   19cd8:	4649      	mov	r1, r9
   19cda:	f000 fd21 	bl	1a720 <__adddf3>
   19cde:	4680      	mov	r8, r0
   19ce0:	4689      	mov	r9, r1
   19ce2:	4602      	mov	r2, r0
   19ce4:	460b      	mov	r3, r1
   19ce6:	4650      	mov	r0, sl
   19ce8:	4659      	mov	r1, fp
   19cea:	e9cd ab04 	strd	sl, fp, [sp, #16]
   19cee:	f000 fd17 	bl	1a720 <__adddf3>
   19cf2:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   19cf6:	a338      	add	r3, pc, #224	; (adr r3, 19dd8 <__ieee754_pow+0x510>)
   19cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   19cfc:	4650      	mov	r0, sl
   19cfe:	460f      	mov	r7, r1
   19d00:	f000 fec0 	bl	1aa84 <__aeabi_dmul>
   19d04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
   19d0c:	4639      	mov	r1, r7
   19d0e:	4650      	mov	r0, sl
   19d10:	f000 fd04 	bl	1a71c <__aeabi_dsub>
   19d14:	4602      	mov	r2, r0
   19d16:	460b      	mov	r3, r1
   19d18:	4640      	mov	r0, r8
   19d1a:	4649      	mov	r1, r9
   19d1c:	f000 fcfe 	bl	1a71c <__aeabi_dsub>
   19d20:	a32f      	add	r3, pc, #188	; (adr r3, 19de0 <__ieee754_pow+0x518>)
   19d22:	e9d3 2300 	ldrd	r2, r3, [r3]
   19d26:	f000 fead 	bl	1aa84 <__aeabi_dmul>
   19d2a:	a32f      	add	r3, pc, #188	; (adr r3, 19de8 <__ieee754_pow+0x520>)
   19d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19d30:	4680      	mov	r8, r0
   19d32:	4689      	mov	r9, r1
   19d34:	4650      	mov	r0, sl
   19d36:	4639      	mov	r1, r7
   19d38:	f000 fea4 	bl	1aa84 <__aeabi_dmul>
   19d3c:	4602      	mov	r2, r0
   19d3e:	460b      	mov	r3, r1
   19d40:	4640      	mov	r0, r8
   19d42:	4649      	mov	r1, r9
   19d44:	f000 fcec 	bl	1a720 <__adddf3>
   19d48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   19d4c:	f000 fce8 	bl	1a720 <__adddf3>
   19d50:	4680      	mov	r8, r0
   19d52:	980d      	ldr	r0, [sp, #52]	; 0x34
   19d54:	4689      	mov	r9, r1
   19d56:	f000 fe2f 	bl	1a9b8 <__aeabi_i2d>
   19d5a:	4642      	mov	r2, r8
   19d5c:	4606      	mov	r6, r0
   19d5e:	460f      	mov	r7, r1
   19d60:	464b      	mov	r3, r9
   19d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   19d66:	f000 fcdb 	bl	1a720 <__adddf3>
   19d6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   19d6e:	f000 fcd7 	bl	1a720 <__adddf3>
   19d72:	4632      	mov	r2, r6
   19d74:	463b      	mov	r3, r7
   19d76:	f000 fcd3 	bl	1a720 <__adddf3>
   19d7a:	4632      	mov	r2, r6
   19d7c:	463b      	mov	r3, r7
   19d7e:	4650      	mov	r0, sl
   19d80:	468b      	mov	fp, r1
   19d82:	f000 fccb 	bl	1a71c <__aeabi_dsub>
   19d86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   19d8a:	f000 fcc7 	bl	1a71c <__aeabi_dsub>
   19d8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19d92:	f000 fcc3 	bl	1a71c <__aeabi_dsub>
   19d96:	4602      	mov	r2, r0
   19d98:	460b      	mov	r3, r1
   19d9a:	4640      	mov	r0, r8
   19d9c:	4649      	mov	r1, r9
   19d9e:	f000 fcbd 	bl	1a71c <__aeabi_dsub>
   19da2:	4680      	mov	r8, r0
   19da4:	e02e      	b.n	19e04 <__ieee754_pow+0x53c>
   19da6:	bf00      	nop
   19da8:	4a454eef 	.word	0x4a454eef
   19dac:	3fca7e28 	.word	0x3fca7e28
   19db0:	93c9db65 	.word	0x93c9db65
   19db4:	3fcd864a 	.word	0x3fcd864a
   19db8:	a91d4101 	.word	0xa91d4101
   19dbc:	3fd17460 	.word	0x3fd17460
   19dc0:	518f264d 	.word	0x518f264d
   19dc4:	3fd55555 	.word	0x3fd55555
   19dc8:	db6fabff 	.word	0xdb6fabff
   19dcc:	3fdb6db6 	.word	0x3fdb6db6
   19dd0:	33333303 	.word	0x33333303
   19dd4:	3fe33333 	.word	0x3fe33333
   19dd8:	e0000000 	.word	0xe0000000
   19ddc:	3feec709 	.word	0x3feec709
   19de0:	dc3a03fd 	.word	0xdc3a03fd
   19de4:	3feec709 	.word	0x3feec709
   19de8:	145b01f5 	.word	0x145b01f5
   19dec:	be3e2fe0 	.word	0xbe3e2fe0
   19df0:	43400000 	.word	0x43400000
   19df4:	0003988e 	.word	0x0003988e
   19df8:	000bb679 	.word	0x000bb679
   19dfc:	3ff00000 	.word	0x3ff00000
   19e00:	40080000 	.word	0x40080000
   19e04:	4689      	mov	r9, r1
   19e06:	3c01      	subs	r4, #1
   19e08:	ea54 0305 	orrs.w	r3, r4, r5
   19e0c:	e9dd 0100 	ldrd	r0, r1, [sp]
   19e10:	bf14      	ite	ne
   19e12:	4cd9      	ldrne	r4, [pc, #868]	; (1a178 <__ieee754_pow+0x8b0>)
   19e14:	4cd9      	ldreq	r4, [pc, #868]	; (1a17c <__ieee754_pow+0x8b4>)
   19e16:	2300      	movs	r3, #0
   19e18:	e9cd 3404 	strd	r3, r4, [sp, #16]
   19e1c:	4603      	mov	r3, r0
   19e1e:	460c      	mov	r4, r1
   19e20:	e9cd 3402 	strd	r3, r4, [sp, #8]
   19e24:	2300      	movs	r3, #0
   19e26:	9302      	str	r3, [sp, #8]
   19e28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   19e2c:	4622      	mov	r2, r4
   19e2e:	462b      	mov	r3, r5
   19e30:	f000 fc74 	bl	1a71c <__aeabi_dsub>
   19e34:	4652      	mov	r2, sl
   19e36:	465b      	mov	r3, fp
   19e38:	f000 fe24 	bl	1aa84 <__aeabi_dmul>
   19e3c:	e9dd 2300 	ldrd	r2, r3, [sp]
   19e40:	4606      	mov	r6, r0
   19e42:	460f      	mov	r7, r1
   19e44:	4640      	mov	r0, r8
   19e46:	4649      	mov	r1, r9
   19e48:	f000 fe1c 	bl	1aa84 <__aeabi_dmul>
   19e4c:	4602      	mov	r2, r0
   19e4e:	460b      	mov	r3, r1
   19e50:	4630      	mov	r0, r6
   19e52:	4639      	mov	r1, r7
   19e54:	f000 fc64 	bl	1a720 <__adddf3>
   19e58:	4622      	mov	r2, r4
   19e5a:	4680      	mov	r8, r0
   19e5c:	4689      	mov	r9, r1
   19e5e:	462b      	mov	r3, r5
   19e60:	4650      	mov	r0, sl
   19e62:	4659      	mov	r1, fp
   19e64:	e9cd 8900 	strd	r8, r9, [sp]
   19e68:	f000 fe0c 	bl	1aa84 <__aeabi_dmul>
   19e6c:	460b      	mov	r3, r1
   19e6e:	4602      	mov	r2, r0
   19e70:	4606      	mov	r6, r0
   19e72:	460f      	mov	r7, r1
   19e74:	4640      	mov	r0, r8
   19e76:	4649      	mov	r1, r9
   19e78:	f000 fc52 	bl	1a720 <__adddf3>
   19e7c:	4bc0      	ldr	r3, [pc, #768]	; (1a180 <__ieee754_pow+0x8b8>)
   19e7e:	4299      	cmp	r1, r3
   19e80:	4604      	mov	r4, r0
   19e82:	460d      	mov	r5, r1
   19e84:	468a      	mov	sl, r1
   19e86:	f340 8116 	ble.w	1a0b6 <__ieee754_pow+0x7ee>
   19e8a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   19e8e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   19e92:	4303      	orrs	r3, r0
   19e94:	f040 81ea 	bne.w	1a26c <__ieee754_pow+0x9a4>
   19e98:	a3a3      	add	r3, pc, #652	; (adr r3, 1a128 <__ieee754_pow+0x860>)
   19e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   19e9e:	e9dd 0100 	ldrd	r0, r1, [sp]
   19ea2:	f000 fc3d 	bl	1a720 <__adddf3>
   19ea6:	4632      	mov	r2, r6
   19ea8:	4680      	mov	r8, r0
   19eaa:	4689      	mov	r9, r1
   19eac:	463b      	mov	r3, r7
   19eae:	4620      	mov	r0, r4
   19eb0:	4629      	mov	r1, r5
   19eb2:	f000 fc33 	bl	1a71c <__aeabi_dsub>
   19eb6:	4602      	mov	r2, r0
   19eb8:	460b      	mov	r3, r1
   19eba:	4640      	mov	r0, r8
   19ebc:	4649      	mov	r1, r9
   19ebe:	f001 f871 	bl	1afa4 <__aeabi_dcmpgt>
   19ec2:	2800      	cmp	r0, #0
   19ec4:	f040 81d2 	bne.w	1a26c <__ieee754_pow+0x9a4>
   19ec8:	46a8      	mov	r8, r5
   19eca:	ea4f 5328 	mov.w	r3, r8, asr #20
   19ece:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   19ed2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   19ed6:	fa42 f303 	asr.w	r3, r2, r3
   19eda:	4453      	add	r3, sl
   19edc:	f3c3 520a 	ubfx	r2, r3, #20, #11
   19ee0:	4da8      	ldr	r5, [pc, #672]	; (1a184 <__ieee754_pow+0x8bc>)
   19ee2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   19ee6:	4115      	asrs	r5, r2
   19ee8:	f3c3 0413 	ubfx	r4, r3, #0, #20
   19eec:	ea23 0105 	bic.w	r1, r3, r5
   19ef0:	2000      	movs	r0, #0
   19ef2:	f1c2 0b14 	rsb	fp, r2, #20
   19ef6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   19efa:	f1ba 0f00 	cmp.w	sl, #0
   19efe:	4602      	mov	r2, r0
   19f00:	460b      	mov	r3, r1
   19f02:	fa44 fb0b 	asr.w	fp, r4, fp
   19f06:	4630      	mov	r0, r6
   19f08:	4639      	mov	r1, r7
   19f0a:	bfb8      	it	lt
   19f0c:	f1cb 0b00 	rsblt	fp, fp, #0
   19f10:	f000 fc04 	bl	1a71c <__aeabi_dsub>
   19f14:	4602      	mov	r2, r0
   19f16:	460b      	mov	r3, r1
   19f18:	4606      	mov	r6, r0
   19f1a:	460f      	mov	r7, r1
   19f1c:	e9dd 0100 	ldrd	r0, r1, [sp]
   19f20:	f000 fbfe 	bl	1a720 <__adddf3>
   19f24:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   19f28:	460d      	mov	r5, r1
   19f2a:	2400      	movs	r4, #0
   19f2c:	a380      	add	r3, pc, #512	; (adr r3, 1a130 <__ieee754_pow+0x868>)
   19f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   19f32:	4620      	mov	r0, r4
   19f34:	4629      	mov	r1, r5
   19f36:	f000 fda5 	bl	1aa84 <__aeabi_dmul>
   19f3a:	4632      	mov	r2, r6
   19f3c:	4680      	mov	r8, r0
   19f3e:	4689      	mov	r9, r1
   19f40:	463b      	mov	r3, r7
   19f42:	4620      	mov	r0, r4
   19f44:	4629      	mov	r1, r5
   19f46:	f000 fbe9 	bl	1a71c <__aeabi_dsub>
   19f4a:	4602      	mov	r2, r0
   19f4c:	460b      	mov	r3, r1
   19f4e:	e9dd 0100 	ldrd	r0, r1, [sp]
   19f52:	f000 fbe3 	bl	1a71c <__aeabi_dsub>
   19f56:	a378      	add	r3, pc, #480	; (adr r3, 1a138 <__ieee754_pow+0x870>)
   19f58:	e9d3 2300 	ldrd	r2, r3, [r3]
   19f5c:	f000 fd92 	bl	1aa84 <__aeabi_dmul>
   19f60:	a377      	add	r3, pc, #476	; (adr r3, 1a140 <__ieee754_pow+0x878>)
   19f62:	e9d3 2300 	ldrd	r2, r3, [r3]
   19f66:	4606      	mov	r6, r0
   19f68:	460f      	mov	r7, r1
   19f6a:	4620      	mov	r0, r4
   19f6c:	4629      	mov	r1, r5
   19f6e:	f000 fd89 	bl	1aa84 <__aeabi_dmul>
   19f72:	4602      	mov	r2, r0
   19f74:	460b      	mov	r3, r1
   19f76:	4630      	mov	r0, r6
   19f78:	4639      	mov	r1, r7
   19f7a:	f000 fbd1 	bl	1a720 <__adddf3>
   19f7e:	4606      	mov	r6, r0
   19f80:	460f      	mov	r7, r1
   19f82:	4602      	mov	r2, r0
   19f84:	460b      	mov	r3, r1
   19f86:	4640      	mov	r0, r8
   19f88:	4649      	mov	r1, r9
   19f8a:	f000 fbc9 	bl	1a720 <__adddf3>
   19f8e:	4642      	mov	r2, r8
   19f90:	464b      	mov	r3, r9
   19f92:	4604      	mov	r4, r0
   19f94:	460d      	mov	r5, r1
   19f96:	f000 fbc1 	bl	1a71c <__aeabi_dsub>
   19f9a:	4602      	mov	r2, r0
   19f9c:	460b      	mov	r3, r1
   19f9e:	4630      	mov	r0, r6
   19fa0:	4639      	mov	r1, r7
   19fa2:	f000 fbbb 	bl	1a71c <__aeabi_dsub>
   19fa6:	4622      	mov	r2, r4
   19fa8:	4680      	mov	r8, r0
   19faa:	4689      	mov	r9, r1
   19fac:	462b      	mov	r3, r5
   19fae:	4620      	mov	r0, r4
   19fb0:	4629      	mov	r1, r5
   19fb2:	f000 fd67 	bl	1aa84 <__aeabi_dmul>
   19fb6:	a364      	add	r3, pc, #400	; (adr r3, 1a148 <__ieee754_pow+0x880>)
   19fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   19fbc:	4606      	mov	r6, r0
   19fbe:	460f      	mov	r7, r1
   19fc0:	f000 fd60 	bl	1aa84 <__aeabi_dmul>
   19fc4:	a362      	add	r3, pc, #392	; (adr r3, 1a150 <__ieee754_pow+0x888>)
   19fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   19fca:	f000 fba7 	bl	1a71c <__aeabi_dsub>
   19fce:	4632      	mov	r2, r6
   19fd0:	463b      	mov	r3, r7
   19fd2:	f000 fd57 	bl	1aa84 <__aeabi_dmul>
   19fd6:	a360      	add	r3, pc, #384	; (adr r3, 1a158 <__ieee754_pow+0x890>)
   19fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   19fdc:	f000 fba0 	bl	1a720 <__adddf3>
   19fe0:	4632      	mov	r2, r6
   19fe2:	463b      	mov	r3, r7
   19fe4:	f000 fd4e 	bl	1aa84 <__aeabi_dmul>
   19fe8:	a35d      	add	r3, pc, #372	; (adr r3, 1a160 <__ieee754_pow+0x898>)
   19fea:	e9d3 2300 	ldrd	r2, r3, [r3]
   19fee:	f000 fb95 	bl	1a71c <__aeabi_dsub>
   19ff2:	4632      	mov	r2, r6
   19ff4:	463b      	mov	r3, r7
   19ff6:	f000 fd45 	bl	1aa84 <__aeabi_dmul>
   19ffa:	a35b      	add	r3, pc, #364	; (adr r3, 1a168 <__ieee754_pow+0x8a0>)
   19ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a000:	f000 fb8e 	bl	1a720 <__adddf3>
   1a004:	4632      	mov	r2, r6
   1a006:	463b      	mov	r3, r7
   1a008:	f000 fd3c 	bl	1aa84 <__aeabi_dmul>
   1a00c:	4602      	mov	r2, r0
   1a00e:	460b      	mov	r3, r1
   1a010:	4620      	mov	r0, r4
   1a012:	4629      	mov	r1, r5
   1a014:	f000 fb82 	bl	1a71c <__aeabi_dsub>
   1a018:	4606      	mov	r6, r0
   1a01a:	460f      	mov	r7, r1
   1a01c:	4602      	mov	r2, r0
   1a01e:	460b      	mov	r3, r1
   1a020:	4620      	mov	r0, r4
   1a022:	4629      	mov	r1, r5
   1a024:	f000 fd2e 	bl	1aa84 <__aeabi_dmul>
   1a028:	2200      	movs	r2, #0
   1a02a:	e9cd 0100 	strd	r0, r1, [sp]
   1a02e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a032:	4630      	mov	r0, r6
   1a034:	4639      	mov	r1, r7
   1a036:	f000 fb71 	bl	1a71c <__aeabi_dsub>
   1a03a:	4602      	mov	r2, r0
   1a03c:	460b      	mov	r3, r1
   1a03e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a042:	f000 fe49 	bl	1acd8 <__aeabi_ddiv>
   1a046:	4642      	mov	r2, r8
   1a048:	4606      	mov	r6, r0
   1a04a:	460f      	mov	r7, r1
   1a04c:	464b      	mov	r3, r9
   1a04e:	4620      	mov	r0, r4
   1a050:	4629      	mov	r1, r5
   1a052:	f000 fd17 	bl	1aa84 <__aeabi_dmul>
   1a056:	4642      	mov	r2, r8
   1a058:	464b      	mov	r3, r9
   1a05a:	f000 fb61 	bl	1a720 <__adddf3>
   1a05e:	4602      	mov	r2, r0
   1a060:	460b      	mov	r3, r1
   1a062:	4630      	mov	r0, r6
   1a064:	4639      	mov	r1, r7
   1a066:	f000 fb59 	bl	1a71c <__aeabi_dsub>
   1a06a:	4622      	mov	r2, r4
   1a06c:	462b      	mov	r3, r5
   1a06e:	f000 fb55 	bl	1a71c <__aeabi_dsub>
   1a072:	4602      	mov	r2, r0
   1a074:	460b      	mov	r3, r1
   1a076:	2000      	movs	r0, #0
   1a078:	493f      	ldr	r1, [pc, #252]	; (1a178 <__ieee754_pow+0x8b0>)
   1a07a:	f000 fb4f 	bl	1a71c <__aeabi_dsub>
   1a07e:	448a      	add	sl, r1
   1a080:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   1a084:	f2c0 8133 	blt.w	1a2ee <__ieee754_pow+0xa26>
   1a088:	4651      	mov	r1, sl
   1a08a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a08e:	f000 fcf9 	bl	1aa84 <__aeabi_dmul>
   1a092:	e45b      	b.n	1994c <__ieee754_pow+0x84>
   1a094:	4642      	mov	r2, r8
   1a096:	4640      	mov	r0, r8
   1a098:	464b      	mov	r3, r9
   1a09a:	4649      	mov	r1, r9
   1a09c:	f000 fcf2 	bl	1aa84 <__aeabi_dmul>
   1a0a0:	e454      	b.n	1994c <__ieee754_pow+0x84>
   1a0a2:	f1ba 0f00 	cmp.w	sl, #0
   1a0a6:	f6bf ace0 	bge.w	19a6a <__ieee754_pow+0x1a2>
   1a0aa:	e9dd 3400 	ldrd	r3, r4, [sp]
   1a0ae:	4618      	mov	r0, r3
   1a0b0:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   1a0b4:	e44a      	b.n	1994c <__ieee754_pow+0x84>
   1a0b6:	4b34      	ldr	r3, [pc, #208]	; (1a188 <__ieee754_pow+0x8c0>)
   1a0b8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   1a0bc:	4598      	cmp	r8, r3
   1a0be:	f340 80f2 	ble.w	1a2a6 <__ieee754_pow+0x9de>
   1a0c2:	4b32      	ldr	r3, [pc, #200]	; (1a18c <__ieee754_pow+0x8c4>)
   1a0c4:	440b      	add	r3, r1
   1a0c6:	4303      	orrs	r3, r0
   1a0c8:	d10c      	bne.n	1a0e4 <__ieee754_pow+0x81c>
   1a0ca:	4632      	mov	r2, r6
   1a0cc:	463b      	mov	r3, r7
   1a0ce:	f000 fb25 	bl	1a71c <__aeabi_dsub>
   1a0d2:	4602      	mov	r2, r0
   1a0d4:	460b      	mov	r3, r1
   1a0d6:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a0da:	f000 ff4f 	bl	1af7c <__aeabi_dcmple>
   1a0de:	2800      	cmp	r0, #0
   1a0e0:	f43f aef3 	beq.w	19eca <__ieee754_pow+0x602>
   1a0e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a0e8:	a321      	add	r3, pc, #132	; (adr r3, 1a170 <__ieee754_pow+0x8a8>)
   1a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a0ee:	f000 fcc9 	bl	1aa84 <__aeabi_dmul>
   1a0f2:	a31f      	add	r3, pc, #124	; (adr r3, 1a170 <__ieee754_pow+0x8a8>)
   1a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a0f8:	f000 fcc4 	bl	1aa84 <__aeabi_dmul>
   1a0fc:	e426      	b.n	1994c <__ieee754_pow+0x84>
   1a0fe:	4602      	mov	r2, r0
   1a100:	460b      	mov	r3, r1
   1a102:	2000      	movs	r0, #0
   1a104:	491c      	ldr	r1, [pc, #112]	; (1a178 <__ieee754_pow+0x8b0>)
   1a106:	f000 fde7 	bl	1acd8 <__aeabi_ddiv>
   1a10a:	e43c      	b.n	19986 <__ieee754_pow+0xbe>
   1a10c:	2200      	movs	r2, #0
   1a10e:	2300      	movs	r3, #0
   1a110:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a114:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1a118:	4b17      	ldr	r3, [pc, #92]	; (1a178 <__ieee754_pow+0x8b0>)
   1a11a:	2200      	movs	r2, #0
   1a11c:	2700      	movs	r7, #0
   1a11e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a122:	e4e6      	b.n	19af2 <__ieee754_pow+0x22a>
   1a124:	f3af 8000 	nop.w
   1a128:	652b82fe 	.word	0x652b82fe
   1a12c:	3c971547 	.word	0x3c971547
   1a130:	00000000 	.word	0x00000000
   1a134:	3fe62e43 	.word	0x3fe62e43
   1a138:	fefa39ef 	.word	0xfefa39ef
   1a13c:	3fe62e42 	.word	0x3fe62e42
   1a140:	0ca86c39 	.word	0x0ca86c39
   1a144:	be205c61 	.word	0xbe205c61
   1a148:	72bea4d0 	.word	0x72bea4d0
   1a14c:	3e663769 	.word	0x3e663769
   1a150:	c5d26bf1 	.word	0xc5d26bf1
   1a154:	3ebbbd41 	.word	0x3ebbbd41
   1a158:	af25de2c 	.word	0xaf25de2c
   1a15c:	3f11566a 	.word	0x3f11566a
   1a160:	16bebd93 	.word	0x16bebd93
   1a164:	3f66c16c 	.word	0x3f66c16c
   1a168:	5555553e 	.word	0x5555553e
   1a16c:	3fc55555 	.word	0x3fc55555
   1a170:	c2f8f359 	.word	0xc2f8f359
   1a174:	01a56e1f 	.word	0x01a56e1f
   1a178:	3ff00000 	.word	0x3ff00000
   1a17c:	bff00000 	.word	0xbff00000
   1a180:	408fffff 	.word	0x408fffff
   1a184:	000fffff 	.word	0x000fffff
   1a188:	4090cbff 	.word	0x4090cbff
   1a18c:	3f6f3400 	.word	0x3f6f3400
   1a190:	4b6b      	ldr	r3, [pc, #428]	; (1a340 <__ieee754_pow+0xa78>)
   1a192:	429e      	cmp	r6, r3
   1a194:	f77f ac66 	ble.w	19a64 <__ieee754_pow+0x19c>
   1a198:	4b6a      	ldr	r3, [pc, #424]	; (1a344 <__ieee754_pow+0xa7c>)
   1a19a:	429e      	cmp	r6, r3
   1a19c:	f73f ac13 	bgt.w	199c6 <__ieee754_pow+0xfe>
   1a1a0:	2200      	movs	r2, #0
   1a1a2:	4b68      	ldr	r3, [pc, #416]	; (1a344 <__ieee754_pow+0xa7c>)
   1a1a4:	f000 faba 	bl	1a71c <__aeabi_dsub>
   1a1a8:	a357      	add	r3, pc, #348	; (adr r3, 1a308 <__ieee754_pow+0xa40>)
   1a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a1ae:	4606      	mov	r6, r0
   1a1b0:	460f      	mov	r7, r1
   1a1b2:	f000 fc67 	bl	1aa84 <__aeabi_dmul>
   1a1b6:	a356      	add	r3, pc, #344	; (adr r3, 1a310 <__ieee754_pow+0xa48>)
   1a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a1bc:	4680      	mov	r8, r0
   1a1be:	4689      	mov	r9, r1
   1a1c0:	4630      	mov	r0, r6
   1a1c2:	4639      	mov	r1, r7
   1a1c4:	f000 fc5e 	bl	1aa84 <__aeabi_dmul>
   1a1c8:	2200      	movs	r2, #0
   1a1ca:	4682      	mov	sl, r0
   1a1cc:	468b      	mov	fp, r1
   1a1ce:	4b5e      	ldr	r3, [pc, #376]	; (1a348 <__ieee754_pow+0xa80>)
   1a1d0:	4630      	mov	r0, r6
   1a1d2:	4639      	mov	r1, r7
   1a1d4:	f000 fc56 	bl	1aa84 <__aeabi_dmul>
   1a1d8:	4602      	mov	r2, r0
   1a1da:	460b      	mov	r3, r1
   1a1dc:	a14e      	add	r1, pc, #312	; (adr r1, 1a318 <__ieee754_pow+0xa50>)
   1a1de:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a1e2:	f000 fa9b 	bl	1a71c <__aeabi_dsub>
   1a1e6:	4632      	mov	r2, r6
   1a1e8:	463b      	mov	r3, r7
   1a1ea:	f000 fc4b 	bl	1aa84 <__aeabi_dmul>
   1a1ee:	4602      	mov	r2, r0
   1a1f0:	460b      	mov	r3, r1
   1a1f2:	2000      	movs	r0, #0
   1a1f4:	4955      	ldr	r1, [pc, #340]	; (1a34c <__ieee754_pow+0xa84>)
   1a1f6:	f000 fa91 	bl	1a71c <__aeabi_dsub>
   1a1fa:	4632      	mov	r2, r6
   1a1fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1a200:	463b      	mov	r3, r7
   1a202:	4630      	mov	r0, r6
   1a204:	4639      	mov	r1, r7
   1a206:	f000 fc3d 	bl	1aa84 <__aeabi_dmul>
   1a20a:	4602      	mov	r2, r0
   1a20c:	460b      	mov	r3, r1
   1a20e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1a212:	f000 fc37 	bl	1aa84 <__aeabi_dmul>
   1a216:	a342      	add	r3, pc, #264	; (adr r3, 1a320 <__ieee754_pow+0xa58>)
   1a218:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a21c:	f000 fc32 	bl	1aa84 <__aeabi_dmul>
   1a220:	4602      	mov	r2, r0
   1a222:	460b      	mov	r3, r1
   1a224:	4650      	mov	r0, sl
   1a226:	4659      	mov	r1, fp
   1a228:	f000 fa78 	bl	1a71c <__aeabi_dsub>
   1a22c:	4602      	mov	r2, r0
   1a22e:	460b      	mov	r3, r1
   1a230:	4606      	mov	r6, r0
   1a232:	460f      	mov	r7, r1
   1a234:	4640      	mov	r0, r8
   1a236:	4649      	mov	r1, r9
   1a238:	f000 fa72 	bl	1a720 <__adddf3>
   1a23c:	4642      	mov	r2, r8
   1a23e:	464b      	mov	r3, r9
   1a240:	2000      	movs	r0, #0
   1a242:	4682      	mov	sl, r0
   1a244:	468b      	mov	fp, r1
   1a246:	f000 fa69 	bl	1a71c <__aeabi_dsub>
   1a24a:	4602      	mov	r2, r0
   1a24c:	460b      	mov	r3, r1
   1a24e:	4630      	mov	r0, r6
   1a250:	4639      	mov	r1, r7
   1a252:	f000 fa63 	bl	1a71c <__aeabi_dsub>
   1a256:	4680      	mov	r8, r0
   1a258:	4689      	mov	r9, r1
   1a25a:	e5d4      	b.n	19e06 <__ieee754_pow+0x53e>
   1a25c:	4642      	mov	r2, r8
   1a25e:	464b      	mov	r3, r9
   1a260:	2000      	movs	r0, #0
   1a262:	4938      	ldr	r1, [pc, #224]	; (1a344 <__ieee754_pow+0xa7c>)
   1a264:	f000 fd38 	bl	1acd8 <__aeabi_ddiv>
   1a268:	f7ff bb70 	b.w	1994c <__ieee754_pow+0x84>
   1a26c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a270:	a32d      	add	r3, pc, #180	; (adr r3, 1a328 <__ieee754_pow+0xa60>)
   1a272:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a276:	f000 fc05 	bl	1aa84 <__aeabi_dmul>
   1a27a:	a32b      	add	r3, pc, #172	; (adr r3, 1a328 <__ieee754_pow+0xa60>)
   1a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a280:	f000 fc00 	bl	1aa84 <__aeabi_dmul>
   1a284:	f7ff bb62 	b.w	1994c <__ieee754_pow+0x84>
   1a288:	f1be 0f00 	cmp.w	lr, #0
   1a28c:	f47f ab69 	bne.w	19962 <__ieee754_pow+0x9a>
   1a290:	f1c3 0314 	rsb	r3, r3, #20
   1a294:	fa47 f203 	asr.w	r2, r7, r3
   1a298:	fa02 f303 	lsl.w	r3, r2, r3
   1a29c:	429f      	cmp	r7, r3
   1a29e:	d02a      	beq.n	1a2f6 <__ieee754_pow+0xa2e>
   1a2a0:	4674      	mov	r4, lr
   1a2a2:	f7ff bb36 	b.w	19912 <__ieee754_pow+0x4a>
   1a2a6:	4b29      	ldr	r3, [pc, #164]	; (1a34c <__ieee754_pow+0xa84>)
   1a2a8:	4598      	cmp	r8, r3
   1a2aa:	f73f ae0e 	bgt.w	19eca <__ieee754_pow+0x602>
   1a2ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a2b2:	4692      	mov	sl, r2
   1a2b4:	4693      	mov	fp, r2
   1a2b6:	e638      	b.n	19f2a <__ieee754_pow+0x662>
   1a2b8:	4602      	mov	r2, r0
   1a2ba:	460b      	mov	r3, r1
   1a2bc:	f000 fa2e 	bl	1a71c <__aeabi_dsub>
   1a2c0:	4602      	mov	r2, r0
   1a2c2:	460b      	mov	r3, r1
   1a2c4:	f000 fd08 	bl	1acd8 <__aeabi_ddiv>
   1a2c8:	f7ff bb40 	b.w	1994c <__ieee754_pow+0x84>
   1a2cc:	a318      	add	r3, pc, #96	; (adr r3, 1a330 <__ieee754_pow+0xa68>)
   1a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a2d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a2d6:	a318      	add	r3, pc, #96	; (adr r3, 1a338 <__ieee754_pow+0xa70>)
   1a2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a2dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1a2e0:	4b1b      	ldr	r3, [pc, #108]	; (1a350 <__ieee754_pow+0xa88>)
   1a2e2:	2200      	movs	r2, #0
   1a2e4:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   1a2e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a2ec:	e401      	b.n	19af2 <__ieee754_pow+0x22a>
   1a2ee:	465a      	mov	r2, fp
   1a2f0:	f000 f98a 	bl	1a608 <scalbn>
   1a2f4:	e6c9      	b.n	1a08a <__ieee754_pow+0x7c2>
   1a2f6:	f002 0201 	and.w	r2, r2, #1
   1a2fa:	f1c2 0402 	rsb	r4, r2, #2
   1a2fe:	f7ff bb08 	b.w	19912 <__ieee754_pow+0x4a>
   1a302:	bf00      	nop
   1a304:	f3af 8000 	nop.w
   1a308:	60000000 	.word	0x60000000
   1a30c:	3ff71547 	.word	0x3ff71547
   1a310:	f85ddf44 	.word	0xf85ddf44
   1a314:	3e54ae0b 	.word	0x3e54ae0b
   1a318:	55555555 	.word	0x55555555
   1a31c:	3fd55555 	.word	0x3fd55555
   1a320:	652b82fe 	.word	0x652b82fe
   1a324:	3ff71547 	.word	0x3ff71547
   1a328:	8800759c 	.word	0x8800759c
   1a32c:	7e37e43c 	.word	0x7e37e43c
   1a330:	40000000 	.word	0x40000000
   1a334:	3fe2b803 	.word	0x3fe2b803
   1a338:	43cfd006 	.word	0x43cfd006
   1a33c:	3e4cfdeb 	.word	0x3e4cfdeb
   1a340:	3feffffe 	.word	0x3feffffe
   1a344:	3ff00000 	.word	0x3ff00000
   1a348:	3fd00000 	.word	0x3fd00000
   1a34c:	3fe00000 	.word	0x3fe00000
   1a350:	3ff80000 	.word	0x3ff80000

0001a354 <__ieee754_sqrt>:
   1a354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a358:	4f5b      	ldr	r7, [pc, #364]	; (1a4c8 <__ieee754_sqrt+0x174>)
   1a35a:	438f      	bics	r7, r1
   1a35c:	4605      	mov	r5, r0
   1a35e:	460c      	mov	r4, r1
   1a360:	f000 8092 	beq.w	1a488 <__ieee754_sqrt+0x134>
   1a364:	2900      	cmp	r1, #0
   1a366:	460b      	mov	r3, r1
   1a368:	4602      	mov	r2, r0
   1a36a:	dd6f      	ble.n	1a44c <__ieee754_sqrt+0xf8>
   1a36c:	150f      	asrs	r7, r1, #20
   1a36e:	d07b      	beq.n	1a468 <__ieee754_sqrt+0x114>
   1a370:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   1a374:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1a378:	07f8      	lsls	r0, r7, #31
   1a37a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1a37e:	d45c      	bmi.n	1a43a <__ieee754_sqrt+0xe6>
   1a380:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   1a384:	2600      	movs	r6, #0
   1a386:	440b      	add	r3, r1
   1a388:	107f      	asrs	r7, r7, #1
   1a38a:	0052      	lsls	r2, r2, #1
   1a38c:	46b6      	mov	lr, r6
   1a38e:	2016      	movs	r0, #22
   1a390:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   1a394:	eb0e 0401 	add.w	r4, lr, r1
   1a398:	429c      	cmp	r4, r3
   1a39a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   1a39e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1a3a2:	dc03      	bgt.n	1a3ac <__ieee754_sqrt+0x58>
   1a3a4:	1b1b      	subs	r3, r3, r4
   1a3a6:	eb04 0e01 	add.w	lr, r4, r1
   1a3aa:	440e      	add	r6, r1
   1a3ac:	3801      	subs	r0, #1
   1a3ae:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1a3b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1a3b6:	d1ed      	bne.n	1a394 <__ieee754_sqrt+0x40>
   1a3b8:	4684      	mov	ip, r0
   1a3ba:	2420      	movs	r4, #32
   1a3bc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1a3c0:	e009      	b.n	1a3d6 <__ieee754_sqrt+0x82>
   1a3c2:	d020      	beq.n	1a406 <__ieee754_sqrt+0xb2>
   1a3c4:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   1a3c8:	3c01      	subs	r4, #1
   1a3ca:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1a3ce:	442b      	add	r3, r5
   1a3d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1a3d4:	d020      	beq.n	1a418 <__ieee754_sqrt+0xc4>
   1a3d6:	4573      	cmp	r3, lr
   1a3d8:	eb01 050c 	add.w	r5, r1, ip
   1a3dc:	ddf1      	ble.n	1a3c2 <__ieee754_sqrt+0x6e>
   1a3de:	2d00      	cmp	r5, #0
   1a3e0:	eb05 0c01 	add.w	ip, r5, r1
   1a3e4:	db09      	blt.n	1a3fa <__ieee754_sqrt+0xa6>
   1a3e6:	46f0      	mov	r8, lr
   1a3e8:	4295      	cmp	r5, r2
   1a3ea:	eba3 030e 	sub.w	r3, r3, lr
   1a3ee:	d900      	bls.n	1a3f2 <__ieee754_sqrt+0x9e>
   1a3f0:	3b01      	subs	r3, #1
   1a3f2:	1b52      	subs	r2, r2, r5
   1a3f4:	4408      	add	r0, r1
   1a3f6:	46c6      	mov	lr, r8
   1a3f8:	e7e4      	b.n	1a3c4 <__ieee754_sqrt+0x70>
   1a3fa:	f1bc 0f00 	cmp.w	ip, #0
   1a3fe:	dbf2      	blt.n	1a3e6 <__ieee754_sqrt+0x92>
   1a400:	f10e 0801 	add.w	r8, lr, #1
   1a404:	e7f0      	b.n	1a3e8 <__ieee754_sqrt+0x94>
   1a406:	4295      	cmp	r5, r2
   1a408:	d8dc      	bhi.n	1a3c4 <__ieee754_sqrt+0x70>
   1a40a:	2d00      	cmp	r5, #0
   1a40c:	eb05 0c01 	add.w	ip, r5, r1
   1a410:	db44      	blt.n	1a49c <__ieee754_sqrt+0x148>
   1a412:	4698      	mov	r8, r3
   1a414:	2300      	movs	r3, #0
   1a416:	e7ec      	b.n	1a3f2 <__ieee754_sqrt+0x9e>
   1a418:	4313      	orrs	r3, r2
   1a41a:	d113      	bne.n	1a444 <__ieee754_sqrt+0xf0>
   1a41c:	0840      	lsrs	r0, r0, #1
   1a41e:	1073      	asrs	r3, r6, #1
   1a420:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   1a424:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   1a428:	07f2      	lsls	r2, r6, #31
   1a42a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   1a42e:	bf48      	it	mi
   1a430:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   1a434:	4649      	mov	r1, r9
   1a436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a43a:	005b      	lsls	r3, r3, #1
   1a43c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   1a440:	0052      	lsls	r2, r2, #1
   1a442:	e79d      	b.n	1a380 <__ieee754_sqrt+0x2c>
   1a444:	1c41      	adds	r1, r0, #1
   1a446:	d02d      	beq.n	1a4a4 <__ieee754_sqrt+0x150>
   1a448:	3001      	adds	r0, #1
   1a44a:	e7e7      	b.n	1a41c <__ieee754_sqrt+0xc8>
   1a44c:	4606      	mov	r6, r0
   1a44e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   1a452:	433e      	orrs	r6, r7
   1a454:	d0ef      	beq.n	1a436 <__ieee754_sqrt+0xe2>
   1a456:	bb69      	cbnz	r1, 1a4b4 <__ieee754_sqrt+0x160>
   1a458:	460f      	mov	r7, r1
   1a45a:	0ad3      	lsrs	r3, r2, #11
   1a45c:	3f15      	subs	r7, #21
   1a45e:	0552      	lsls	r2, r2, #21
   1a460:	2b00      	cmp	r3, #0
   1a462:	d0fa      	beq.n	1a45a <__ieee754_sqrt+0x106>
   1a464:	02de      	lsls	r6, r3, #11
   1a466:	d420      	bmi.n	1a4aa <__ieee754_sqrt+0x156>
   1a468:	2400      	movs	r4, #0
   1a46a:	e000      	b.n	1a46e <__ieee754_sqrt+0x11a>
   1a46c:	4604      	mov	r4, r0
   1a46e:	005b      	lsls	r3, r3, #1
   1a470:	02dd      	lsls	r5, r3, #11
   1a472:	f104 0001 	add.w	r0, r4, #1
   1a476:	d5f9      	bpl.n	1a46c <__ieee754_sqrt+0x118>
   1a478:	f1c0 0120 	rsb	r1, r0, #32
   1a47c:	fa22 f101 	lsr.w	r1, r2, r1
   1a480:	430b      	orrs	r3, r1
   1a482:	1b3f      	subs	r7, r7, r4
   1a484:	4082      	lsls	r2, r0
   1a486:	e773      	b.n	1a370 <__ieee754_sqrt+0x1c>
   1a488:	4602      	mov	r2, r0
   1a48a:	460b      	mov	r3, r1
   1a48c:	f000 fafa 	bl	1aa84 <__aeabi_dmul>
   1a490:	462a      	mov	r2, r5
   1a492:	4623      	mov	r3, r4
   1a494:	f000 f944 	bl	1a720 <__adddf3>
   1a498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a49c:	f1bc 0f00 	cmp.w	ip, #0
   1a4a0:	daae      	bge.n	1a400 <__ieee754_sqrt+0xac>
   1a4a2:	e7b6      	b.n	1a412 <__ieee754_sqrt+0xbe>
   1a4a4:	3601      	adds	r6, #1
   1a4a6:	4620      	mov	r0, r4
   1a4a8:	e7b9      	b.n	1a41e <__ieee754_sqrt+0xca>
   1a4aa:	2000      	movs	r0, #0
   1a4ac:	2120      	movs	r1, #32
   1a4ae:	f04f 34ff 	mov.w	r4, #4294967295
   1a4b2:	e7e3      	b.n	1a47c <__ieee754_sqrt+0x128>
   1a4b4:	4602      	mov	r2, r0
   1a4b6:	460b      	mov	r3, r1
   1a4b8:	f000 f930 	bl	1a71c <__aeabi_dsub>
   1a4bc:	4602      	mov	r2, r0
   1a4be:	460b      	mov	r3, r1
   1a4c0:	f000 fc0a 	bl	1acd8 <__aeabi_ddiv>
   1a4c4:	e7b7      	b.n	1a436 <__ieee754_sqrt+0xe2>
   1a4c6:	bf00      	nop
   1a4c8:	7ff00000 	.word	0x7ff00000

0001a4cc <fabs>:
   1a4cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1a4d0:	4770      	bx	lr
   1a4d2:	bf00      	nop

0001a4d4 <finite>:
   1a4d4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   1a4d8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   1a4dc:	0fc0      	lsrs	r0, r0, #31
   1a4de:	4770      	bx	lr

0001a4e0 <matherr>:
   1a4e0:	2000      	movs	r0, #0
   1a4e2:	4770      	bx	lr

0001a4e4 <nan>:
   1a4e4:	2000      	movs	r0, #0
   1a4e6:	4901      	ldr	r1, [pc, #4]	; (1a4ec <nan+0x8>)
   1a4e8:	4770      	bx	lr
   1a4ea:	bf00      	nop
   1a4ec:	7ff80000 	.word	0x7ff80000

0001a4f0 <rint>:
   1a4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a4f2:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   1a4f6:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   1a4fa:	2e13      	cmp	r6, #19
   1a4fc:	b083      	sub	sp, #12
   1a4fe:	4602      	mov	r2, r0
   1a500:	460b      	mov	r3, r1
   1a502:	460c      	mov	r4, r1
   1a504:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   1a508:	4607      	mov	r7, r0
   1a50a:	dc2e      	bgt.n	1a56a <rint+0x7a>
   1a50c:	2e00      	cmp	r6, #0
   1a50e:	db49      	blt.n	1a5a4 <rint+0xb4>
   1a510:	493a      	ldr	r1, [pc, #232]	; (1a5fc <rint+0x10c>)
   1a512:	4131      	asrs	r1, r6
   1a514:	ea03 0001 	and.w	r0, r3, r1
   1a518:	4310      	orrs	r0, r2
   1a51a:	d02b      	beq.n	1a574 <rint+0x84>
   1a51c:	0849      	lsrs	r1, r1, #1
   1a51e:	400b      	ands	r3, r1
   1a520:	ea53 0702 	orrs.w	r7, r3, r2
   1a524:	d00c      	beq.n	1a540 <rint+0x50>
   1a526:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a52a:	2e13      	cmp	r6, #19
   1a52c:	ea24 0101 	bic.w	r1, r4, r1
   1a530:	fa43 f406 	asr.w	r4, r3, r6
   1a534:	ea44 0401 	orr.w	r4, r4, r1
   1a538:	bf0c      	ite	eq
   1a53a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   1a53e:	2700      	movne	r7, #0
   1a540:	4b2f      	ldr	r3, [pc, #188]	; (1a600 <rint+0x110>)
   1a542:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1a546:	4621      	mov	r1, r4
   1a548:	e9d5 4500 	ldrd	r4, r5, [r5]
   1a54c:	4638      	mov	r0, r7
   1a54e:	4622      	mov	r2, r4
   1a550:	462b      	mov	r3, r5
   1a552:	f000 f8e5 	bl	1a720 <__adddf3>
   1a556:	e9cd 0100 	strd	r0, r1, [sp]
   1a55a:	4622      	mov	r2, r4
   1a55c:	462b      	mov	r3, r5
   1a55e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a562:	f000 f8db 	bl	1a71c <__aeabi_dsub>
   1a566:	b003      	add	sp, #12
   1a568:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a56a:	2e33      	cmp	r6, #51	; 0x33
   1a56c:	dd06      	ble.n	1a57c <rint+0x8c>
   1a56e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1a572:	d040      	beq.n	1a5f6 <rint+0x106>
   1a574:	4610      	mov	r0, r2
   1a576:	4619      	mov	r1, r3
   1a578:	b003      	add	sp, #12
   1a57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a57c:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   1a580:	f04f 31ff 	mov.w	r1, #4294967295
   1a584:	fa21 f10e 	lsr.w	r1, r1, lr
   1a588:	4208      	tst	r0, r1
   1a58a:	d0f3      	beq.n	1a574 <rint+0x84>
   1a58c:	0849      	lsrs	r1, r1, #1
   1a58e:	4208      	tst	r0, r1
   1a590:	d0d6      	beq.n	1a540 <rint+0x50>
   1a592:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a596:	ea20 0101 	bic.w	r1, r0, r1
   1a59a:	fa43 fe0e 	asr.w	lr, r3, lr
   1a59e:	ea4e 0701 	orr.w	r7, lr, r1
   1a5a2:	e7cd      	b.n	1a540 <rint+0x50>
   1a5a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1a5a8:	4301      	orrs	r1, r0
   1a5aa:	d0e3      	beq.n	1a574 <rint+0x84>
   1a5ac:	f3c3 0113 	ubfx	r1, r3, #0, #20
   1a5b0:	4e13      	ldr	r6, [pc, #76]	; (1a600 <rint+0x110>)
   1a5b2:	4301      	orrs	r1, r0
   1a5b4:	f1c1 0c00 	rsb	ip, r1, #0
   1a5b8:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   1a5bc:	e9d6 6700 	ldrd	r6, r7, [r6]
   1a5c0:	ea4c 0c01 	orr.w	ip, ip, r1
   1a5c4:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   1a5c8:	0c5c      	lsrs	r4, r3, #17
   1a5ca:	0464      	lsls	r4, r4, #17
   1a5cc:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   1a5d0:	ea43 0104 	orr.w	r1, r3, r4
   1a5d4:	4632      	mov	r2, r6
   1a5d6:	463b      	mov	r3, r7
   1a5d8:	f000 f8a2 	bl	1a720 <__adddf3>
   1a5dc:	e9cd 0100 	strd	r0, r1, [sp]
   1a5e0:	4632      	mov	r2, r6
   1a5e2:	463b      	mov	r3, r7
   1a5e4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a5e8:	f000 f898 	bl	1a71c <__aeabi_dsub>
   1a5ec:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1a5f0:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   1a5f4:	e7c0      	b.n	1a578 <rint+0x88>
   1a5f6:	f000 f893 	bl	1a720 <__adddf3>
   1a5fa:	e7bd      	b.n	1a578 <rint+0x88>
   1a5fc:	000fffff 	.word	0x000fffff
   1a600:	00021b78 	.word	0x00021b78
   1a604:	00000000 	.word	0x00000000

0001a608 <scalbn>:
   1a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a60a:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1a60e:	4604      	mov	r4, r0
   1a610:	460d      	mov	r5, r1
   1a612:	460b      	mov	r3, r1
   1a614:	4617      	mov	r7, r2
   1a616:	bb0e      	cbnz	r6, 1a65c <scalbn+0x54>
   1a618:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1a61c:	4303      	orrs	r3, r0
   1a61e:	4686      	mov	lr, r0
   1a620:	d025      	beq.n	1a66e <scalbn+0x66>
   1a622:	2200      	movs	r2, #0
   1a624:	4b34      	ldr	r3, [pc, #208]	; (1a6f8 <scalbn+0xf0>)
   1a626:	f000 fa2d 	bl	1aa84 <__aeabi_dmul>
   1a62a:	4a34      	ldr	r2, [pc, #208]	; (1a6fc <scalbn+0xf4>)
   1a62c:	4297      	cmp	r7, r2
   1a62e:	4604      	mov	r4, r0
   1a630:	460d      	mov	r5, r1
   1a632:	460b      	mov	r3, r1
   1a634:	db2a      	blt.n	1a68c <scalbn+0x84>
   1a636:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1a63a:	3e36      	subs	r6, #54	; 0x36
   1a63c:	443e      	add	r6, r7
   1a63e:	f240 72fe 	movw	r2, #2046	; 0x7fe
   1a642:	4296      	cmp	r6, r2
   1a644:	dc28      	bgt.n	1a698 <scalbn+0x90>
   1a646:	2e00      	cmp	r6, #0
   1a648:	dd12      	ble.n	1a670 <scalbn+0x68>
   1a64a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1a64e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1a652:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   1a656:	4620      	mov	r0, r4
   1a658:	4629      	mov	r1, r5
   1a65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a65c:	f240 72ff 	movw	r2, #2047	; 0x7ff
   1a660:	4296      	cmp	r6, r2
   1a662:	d1eb      	bne.n	1a63c <scalbn+0x34>
   1a664:	4602      	mov	r2, r0
   1a666:	460b      	mov	r3, r1
   1a668:	f000 f85a 	bl	1a720 <__adddf3>
   1a66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a670:	f116 0f35 	cmn.w	r6, #53	; 0x35
   1a674:	da1d      	bge.n	1a6b2 <scalbn+0xaa>
   1a676:	f24c 3350 	movw	r3, #50000	; 0xc350
   1a67a:	429f      	cmp	r7, r3
   1a67c:	4622      	mov	r2, r4
   1a67e:	462b      	mov	r3, r5
   1a680:	dc25      	bgt.n	1a6ce <scalbn+0xc6>
   1a682:	a119      	add	r1, pc, #100	; (adr r1, 1a6e8 <scalbn+0xe0>)
   1a684:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a688:	f000 f83c 	bl	1a704 <copysign>
   1a68c:	a316      	add	r3, pc, #88	; (adr r3, 1a6e8 <scalbn+0xe0>)
   1a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a692:	f000 f9f7 	bl	1aa84 <__aeabi_dmul>
   1a696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a698:	4622      	mov	r2, r4
   1a69a:	462b      	mov	r3, r5
   1a69c:	a114      	add	r1, pc, #80	; (adr r1, 1a6f0 <scalbn+0xe8>)
   1a69e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a6a2:	f000 f82f 	bl	1a704 <copysign>
   1a6a6:	a312      	add	r3, pc, #72	; (adr r3, 1a6f0 <scalbn+0xe8>)
   1a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a6ac:	f000 f9ea 	bl	1aa84 <__aeabi_dmul>
   1a6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a6b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1a6b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1a6ba:	3636      	adds	r6, #54	; 0x36
   1a6bc:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   1a6c0:	4620      	mov	r0, r4
   1a6c2:	4629      	mov	r1, r5
   1a6c4:	2200      	movs	r2, #0
   1a6c6:	4b0e      	ldr	r3, [pc, #56]	; (1a700 <scalbn+0xf8>)
   1a6c8:	f000 f9dc 	bl	1aa84 <__aeabi_dmul>
   1a6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a6ce:	a108      	add	r1, pc, #32	; (adr r1, 1a6f0 <scalbn+0xe8>)
   1a6d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a6d4:	f000 f816 	bl	1a704 <copysign>
   1a6d8:	a305      	add	r3, pc, #20	; (adr r3, 1a6f0 <scalbn+0xe8>)
   1a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a6de:	f000 f9d1 	bl	1aa84 <__aeabi_dmul>
   1a6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a6e4:	f3af 8000 	nop.w
   1a6e8:	c2f8f359 	.word	0xc2f8f359
   1a6ec:	01a56e1f 	.word	0x01a56e1f
   1a6f0:	8800759c 	.word	0x8800759c
   1a6f4:	7e37e43c 	.word	0x7e37e43c
   1a6f8:	43500000 	.word	0x43500000
   1a6fc:	ffff3cb0 	.word	0xffff3cb0
   1a700:	3c900000 	.word	0x3c900000

0001a704 <copysign>:
   1a704:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   1a708:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1a70c:	ea42 0103 	orr.w	r1, r2, r3
   1a710:	4770      	bx	lr
   1a712:	bf00      	nop

0001a714 <__aeabi_drsub>:
   1a714:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1a718:	e002      	b.n	1a720 <__adddf3>
   1a71a:	bf00      	nop

0001a71c <__aeabi_dsub>:
   1a71c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001a720 <__adddf3>:
   1a720:	b530      	push	{r4, r5, lr}
   1a722:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1a726:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1a72a:	ea94 0f05 	teq	r4, r5
   1a72e:	bf08      	it	eq
   1a730:	ea90 0f02 	teqeq	r0, r2
   1a734:	bf1f      	itttt	ne
   1a736:	ea54 0c00 	orrsne.w	ip, r4, r0
   1a73a:	ea55 0c02 	orrsne.w	ip, r5, r2
   1a73e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1a742:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1a746:	f000 80e2 	beq.w	1a90e <__adddf3+0x1ee>
   1a74a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1a74e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1a752:	bfb8      	it	lt
   1a754:	426d      	neglt	r5, r5
   1a756:	dd0c      	ble.n	1a772 <__adddf3+0x52>
   1a758:	442c      	add	r4, r5
   1a75a:	ea80 0202 	eor.w	r2, r0, r2
   1a75e:	ea81 0303 	eor.w	r3, r1, r3
   1a762:	ea82 0000 	eor.w	r0, r2, r0
   1a766:	ea83 0101 	eor.w	r1, r3, r1
   1a76a:	ea80 0202 	eor.w	r2, r0, r2
   1a76e:	ea81 0303 	eor.w	r3, r1, r3
   1a772:	2d36      	cmp	r5, #54	; 0x36
   1a774:	bf88      	it	hi
   1a776:	bd30      	pophi	{r4, r5, pc}
   1a778:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1a77c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1a780:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1a784:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1a788:	d002      	beq.n	1a790 <__adddf3+0x70>
   1a78a:	4240      	negs	r0, r0
   1a78c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a790:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1a794:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1a798:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1a79c:	d002      	beq.n	1a7a4 <__adddf3+0x84>
   1a79e:	4252      	negs	r2, r2
   1a7a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1a7a4:	ea94 0f05 	teq	r4, r5
   1a7a8:	f000 80a7 	beq.w	1a8fa <__adddf3+0x1da>
   1a7ac:	f1a4 0401 	sub.w	r4, r4, #1
   1a7b0:	f1d5 0e20 	rsbs	lr, r5, #32
   1a7b4:	db0d      	blt.n	1a7d2 <__adddf3+0xb2>
   1a7b6:	fa02 fc0e 	lsl.w	ip, r2, lr
   1a7ba:	fa22 f205 	lsr.w	r2, r2, r5
   1a7be:	1880      	adds	r0, r0, r2
   1a7c0:	f141 0100 	adc.w	r1, r1, #0
   1a7c4:	fa03 f20e 	lsl.w	r2, r3, lr
   1a7c8:	1880      	adds	r0, r0, r2
   1a7ca:	fa43 f305 	asr.w	r3, r3, r5
   1a7ce:	4159      	adcs	r1, r3
   1a7d0:	e00e      	b.n	1a7f0 <__adddf3+0xd0>
   1a7d2:	f1a5 0520 	sub.w	r5, r5, #32
   1a7d6:	f10e 0e20 	add.w	lr, lr, #32
   1a7da:	2a01      	cmp	r2, #1
   1a7dc:	fa03 fc0e 	lsl.w	ip, r3, lr
   1a7e0:	bf28      	it	cs
   1a7e2:	f04c 0c02 	orrcs.w	ip, ip, #2
   1a7e6:	fa43 f305 	asr.w	r3, r3, r5
   1a7ea:	18c0      	adds	r0, r0, r3
   1a7ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1a7f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a7f4:	d507      	bpl.n	1a806 <__adddf3+0xe6>
   1a7f6:	f04f 0e00 	mov.w	lr, #0
   1a7fa:	f1dc 0c00 	rsbs	ip, ip, #0
   1a7fe:	eb7e 0000 	sbcs.w	r0, lr, r0
   1a802:	eb6e 0101 	sbc.w	r1, lr, r1
   1a806:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1a80a:	d31b      	bcc.n	1a844 <__adddf3+0x124>
   1a80c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1a810:	d30c      	bcc.n	1a82c <__adddf3+0x10c>
   1a812:	0849      	lsrs	r1, r1, #1
   1a814:	ea5f 0030 	movs.w	r0, r0, rrx
   1a818:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1a81c:	f104 0401 	add.w	r4, r4, #1
   1a820:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1a824:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1a828:	f080 809a 	bcs.w	1a960 <__adddf3+0x240>
   1a82c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1a830:	bf08      	it	eq
   1a832:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1a836:	f150 0000 	adcs.w	r0, r0, #0
   1a83a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1a83e:	ea41 0105 	orr.w	r1, r1, r5
   1a842:	bd30      	pop	{r4, r5, pc}
   1a844:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1a848:	4140      	adcs	r0, r0
   1a84a:	eb41 0101 	adc.w	r1, r1, r1
   1a84e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1a852:	f1a4 0401 	sub.w	r4, r4, #1
   1a856:	d1e9      	bne.n	1a82c <__adddf3+0x10c>
   1a858:	f091 0f00 	teq	r1, #0
   1a85c:	bf04      	itt	eq
   1a85e:	4601      	moveq	r1, r0
   1a860:	2000      	moveq	r0, #0
   1a862:	fab1 f381 	clz	r3, r1
   1a866:	bf08      	it	eq
   1a868:	3320      	addeq	r3, #32
   1a86a:	f1a3 030b 	sub.w	r3, r3, #11
   1a86e:	f1b3 0220 	subs.w	r2, r3, #32
   1a872:	da0c      	bge.n	1a88e <__adddf3+0x16e>
   1a874:	320c      	adds	r2, #12
   1a876:	dd08      	ble.n	1a88a <__adddf3+0x16a>
   1a878:	f102 0c14 	add.w	ip, r2, #20
   1a87c:	f1c2 020c 	rsb	r2, r2, #12
   1a880:	fa01 f00c 	lsl.w	r0, r1, ip
   1a884:	fa21 f102 	lsr.w	r1, r1, r2
   1a888:	e00c      	b.n	1a8a4 <__adddf3+0x184>
   1a88a:	f102 0214 	add.w	r2, r2, #20
   1a88e:	bfd8      	it	le
   1a890:	f1c2 0c20 	rsble	ip, r2, #32
   1a894:	fa01 f102 	lsl.w	r1, r1, r2
   1a898:	fa20 fc0c 	lsr.w	ip, r0, ip
   1a89c:	bfdc      	itt	le
   1a89e:	ea41 010c 	orrle.w	r1, r1, ip
   1a8a2:	4090      	lslle	r0, r2
   1a8a4:	1ae4      	subs	r4, r4, r3
   1a8a6:	bfa2      	ittt	ge
   1a8a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1a8ac:	4329      	orrge	r1, r5
   1a8ae:	bd30      	popge	{r4, r5, pc}
   1a8b0:	ea6f 0404 	mvn.w	r4, r4
   1a8b4:	3c1f      	subs	r4, #31
   1a8b6:	da1c      	bge.n	1a8f2 <__adddf3+0x1d2>
   1a8b8:	340c      	adds	r4, #12
   1a8ba:	dc0e      	bgt.n	1a8da <__adddf3+0x1ba>
   1a8bc:	f104 0414 	add.w	r4, r4, #20
   1a8c0:	f1c4 0220 	rsb	r2, r4, #32
   1a8c4:	fa20 f004 	lsr.w	r0, r0, r4
   1a8c8:	fa01 f302 	lsl.w	r3, r1, r2
   1a8cc:	ea40 0003 	orr.w	r0, r0, r3
   1a8d0:	fa21 f304 	lsr.w	r3, r1, r4
   1a8d4:	ea45 0103 	orr.w	r1, r5, r3
   1a8d8:	bd30      	pop	{r4, r5, pc}
   1a8da:	f1c4 040c 	rsb	r4, r4, #12
   1a8de:	f1c4 0220 	rsb	r2, r4, #32
   1a8e2:	fa20 f002 	lsr.w	r0, r0, r2
   1a8e6:	fa01 f304 	lsl.w	r3, r1, r4
   1a8ea:	ea40 0003 	orr.w	r0, r0, r3
   1a8ee:	4629      	mov	r1, r5
   1a8f0:	bd30      	pop	{r4, r5, pc}
   1a8f2:	fa21 f004 	lsr.w	r0, r1, r4
   1a8f6:	4629      	mov	r1, r5
   1a8f8:	bd30      	pop	{r4, r5, pc}
   1a8fa:	f094 0f00 	teq	r4, #0
   1a8fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1a902:	bf06      	itte	eq
   1a904:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1a908:	3401      	addeq	r4, #1
   1a90a:	3d01      	subne	r5, #1
   1a90c:	e74e      	b.n	1a7ac <__adddf3+0x8c>
   1a90e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1a912:	bf18      	it	ne
   1a914:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1a918:	d029      	beq.n	1a96e <__adddf3+0x24e>
   1a91a:	ea94 0f05 	teq	r4, r5
   1a91e:	bf08      	it	eq
   1a920:	ea90 0f02 	teqeq	r0, r2
   1a924:	d005      	beq.n	1a932 <__adddf3+0x212>
   1a926:	ea54 0c00 	orrs.w	ip, r4, r0
   1a92a:	bf04      	itt	eq
   1a92c:	4619      	moveq	r1, r3
   1a92e:	4610      	moveq	r0, r2
   1a930:	bd30      	pop	{r4, r5, pc}
   1a932:	ea91 0f03 	teq	r1, r3
   1a936:	bf1e      	ittt	ne
   1a938:	2100      	movne	r1, #0
   1a93a:	2000      	movne	r0, #0
   1a93c:	bd30      	popne	{r4, r5, pc}
   1a93e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1a942:	d105      	bne.n	1a950 <__adddf3+0x230>
   1a944:	0040      	lsls	r0, r0, #1
   1a946:	4149      	adcs	r1, r1
   1a948:	bf28      	it	cs
   1a94a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1a94e:	bd30      	pop	{r4, r5, pc}
   1a950:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1a954:	bf3c      	itt	cc
   1a956:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1a95a:	bd30      	popcc	{r4, r5, pc}
   1a95c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a960:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1a964:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1a968:	f04f 0000 	mov.w	r0, #0
   1a96c:	bd30      	pop	{r4, r5, pc}
   1a96e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1a972:	bf1a      	itte	ne
   1a974:	4619      	movne	r1, r3
   1a976:	4610      	movne	r0, r2
   1a978:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1a97c:	bf1c      	itt	ne
   1a97e:	460b      	movne	r3, r1
   1a980:	4602      	movne	r2, r0
   1a982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1a986:	bf06      	itte	eq
   1a988:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1a98c:	ea91 0f03 	teqeq	r1, r3
   1a990:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1a994:	bd30      	pop	{r4, r5, pc}
   1a996:	bf00      	nop

0001a998 <__aeabi_ui2d>:
   1a998:	f090 0f00 	teq	r0, #0
   1a99c:	bf04      	itt	eq
   1a99e:	2100      	moveq	r1, #0
   1a9a0:	4770      	bxeq	lr
   1a9a2:	b530      	push	{r4, r5, lr}
   1a9a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a9a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a9ac:	f04f 0500 	mov.w	r5, #0
   1a9b0:	f04f 0100 	mov.w	r1, #0
   1a9b4:	e750      	b.n	1a858 <__adddf3+0x138>
   1a9b6:	bf00      	nop

0001a9b8 <__aeabi_i2d>:
   1a9b8:	f090 0f00 	teq	r0, #0
   1a9bc:	bf04      	itt	eq
   1a9be:	2100      	moveq	r1, #0
   1a9c0:	4770      	bxeq	lr
   1a9c2:	b530      	push	{r4, r5, lr}
   1a9c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a9c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a9cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1a9d0:	bf48      	it	mi
   1a9d2:	4240      	negmi	r0, r0
   1a9d4:	f04f 0100 	mov.w	r1, #0
   1a9d8:	e73e      	b.n	1a858 <__adddf3+0x138>
   1a9da:	bf00      	nop

0001a9dc <__aeabi_f2d>:
   1a9dc:	0042      	lsls	r2, r0, #1
   1a9de:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1a9e2:	ea4f 0131 	mov.w	r1, r1, rrx
   1a9e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1a9ea:	bf1f      	itttt	ne
   1a9ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1a9f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1a9f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1a9f8:	4770      	bxne	lr
   1a9fa:	f092 0f00 	teq	r2, #0
   1a9fe:	bf14      	ite	ne
   1aa00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1aa04:	4770      	bxeq	lr
   1aa06:	b530      	push	{r4, r5, lr}
   1aa08:	f44f 7460 	mov.w	r4, #896	; 0x380
   1aa0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1aa10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1aa14:	e720      	b.n	1a858 <__adddf3+0x138>
   1aa16:	bf00      	nop

0001aa18 <__aeabi_ul2d>:
   1aa18:	ea50 0201 	orrs.w	r2, r0, r1
   1aa1c:	bf08      	it	eq
   1aa1e:	4770      	bxeq	lr
   1aa20:	b530      	push	{r4, r5, lr}
   1aa22:	f04f 0500 	mov.w	r5, #0
   1aa26:	e00a      	b.n	1aa3e <__aeabi_l2d+0x16>

0001aa28 <__aeabi_l2d>:
   1aa28:	ea50 0201 	orrs.w	r2, r0, r1
   1aa2c:	bf08      	it	eq
   1aa2e:	4770      	bxeq	lr
   1aa30:	b530      	push	{r4, r5, lr}
   1aa32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1aa36:	d502      	bpl.n	1aa3e <__aeabi_l2d+0x16>
   1aa38:	4240      	negs	r0, r0
   1aa3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1aa3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1aa42:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1aa46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1aa4a:	f43f aedc 	beq.w	1a806 <__adddf3+0xe6>
   1aa4e:	f04f 0203 	mov.w	r2, #3
   1aa52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1aa56:	bf18      	it	ne
   1aa58:	3203      	addne	r2, #3
   1aa5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1aa5e:	bf18      	it	ne
   1aa60:	3203      	addne	r2, #3
   1aa62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1aa66:	f1c2 0320 	rsb	r3, r2, #32
   1aa6a:	fa00 fc03 	lsl.w	ip, r0, r3
   1aa6e:	fa20 f002 	lsr.w	r0, r0, r2
   1aa72:	fa01 fe03 	lsl.w	lr, r1, r3
   1aa76:	ea40 000e 	orr.w	r0, r0, lr
   1aa7a:	fa21 f102 	lsr.w	r1, r1, r2
   1aa7e:	4414      	add	r4, r2
   1aa80:	e6c1      	b.n	1a806 <__adddf3+0xe6>
   1aa82:	bf00      	nop

0001aa84 <__aeabi_dmul>:
   1aa84:	b570      	push	{r4, r5, r6, lr}
   1aa86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1aa8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1aa8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1aa92:	bf1d      	ittte	ne
   1aa94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1aa98:	ea94 0f0c 	teqne	r4, ip
   1aa9c:	ea95 0f0c 	teqne	r5, ip
   1aaa0:	f000 f8de 	bleq	1ac60 <__aeabi_dmul+0x1dc>
   1aaa4:	442c      	add	r4, r5
   1aaa6:	ea81 0603 	eor.w	r6, r1, r3
   1aaaa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1aaae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1aab2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1aab6:	bf18      	it	ne
   1aab8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1aabc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1aac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1aac4:	d038      	beq.n	1ab38 <__aeabi_dmul+0xb4>
   1aac6:	fba0 ce02 	umull	ip, lr, r0, r2
   1aaca:	f04f 0500 	mov.w	r5, #0
   1aace:	fbe1 e502 	umlal	lr, r5, r1, r2
   1aad2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1aad6:	fbe0 e503 	umlal	lr, r5, r0, r3
   1aada:	f04f 0600 	mov.w	r6, #0
   1aade:	fbe1 5603 	umlal	r5, r6, r1, r3
   1aae2:	f09c 0f00 	teq	ip, #0
   1aae6:	bf18      	it	ne
   1aae8:	f04e 0e01 	orrne.w	lr, lr, #1
   1aaec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1aaf0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1aaf4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1aaf8:	d204      	bcs.n	1ab04 <__aeabi_dmul+0x80>
   1aafa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1aafe:	416d      	adcs	r5, r5
   1ab00:	eb46 0606 	adc.w	r6, r6, r6
   1ab04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1ab08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1ab0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1ab10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1ab14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1ab18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1ab1c:	bf88      	it	hi
   1ab1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1ab22:	d81e      	bhi.n	1ab62 <__aeabi_dmul+0xde>
   1ab24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1ab28:	bf08      	it	eq
   1ab2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1ab2e:	f150 0000 	adcs.w	r0, r0, #0
   1ab32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1ab36:	bd70      	pop	{r4, r5, r6, pc}
   1ab38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1ab3c:	ea46 0101 	orr.w	r1, r6, r1
   1ab40:	ea40 0002 	orr.w	r0, r0, r2
   1ab44:	ea81 0103 	eor.w	r1, r1, r3
   1ab48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1ab4c:	bfc2      	ittt	gt
   1ab4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1ab52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1ab56:	bd70      	popgt	{r4, r5, r6, pc}
   1ab58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1ab5c:	f04f 0e00 	mov.w	lr, #0
   1ab60:	3c01      	subs	r4, #1
   1ab62:	f300 80ab 	bgt.w	1acbc <__aeabi_dmul+0x238>
   1ab66:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1ab6a:	bfde      	ittt	le
   1ab6c:	2000      	movle	r0, #0
   1ab6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1ab72:	bd70      	pople	{r4, r5, r6, pc}
   1ab74:	f1c4 0400 	rsb	r4, r4, #0
   1ab78:	3c20      	subs	r4, #32
   1ab7a:	da35      	bge.n	1abe8 <__aeabi_dmul+0x164>
   1ab7c:	340c      	adds	r4, #12
   1ab7e:	dc1b      	bgt.n	1abb8 <__aeabi_dmul+0x134>
   1ab80:	f104 0414 	add.w	r4, r4, #20
   1ab84:	f1c4 0520 	rsb	r5, r4, #32
   1ab88:	fa00 f305 	lsl.w	r3, r0, r5
   1ab8c:	fa20 f004 	lsr.w	r0, r0, r4
   1ab90:	fa01 f205 	lsl.w	r2, r1, r5
   1ab94:	ea40 0002 	orr.w	r0, r0, r2
   1ab98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1ab9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1aba0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1aba4:	fa21 f604 	lsr.w	r6, r1, r4
   1aba8:	eb42 0106 	adc.w	r1, r2, r6
   1abac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1abb0:	bf08      	it	eq
   1abb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1abb6:	bd70      	pop	{r4, r5, r6, pc}
   1abb8:	f1c4 040c 	rsb	r4, r4, #12
   1abbc:	f1c4 0520 	rsb	r5, r4, #32
   1abc0:	fa00 f304 	lsl.w	r3, r0, r4
   1abc4:	fa20 f005 	lsr.w	r0, r0, r5
   1abc8:	fa01 f204 	lsl.w	r2, r1, r4
   1abcc:	ea40 0002 	orr.w	r0, r0, r2
   1abd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1abd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1abd8:	f141 0100 	adc.w	r1, r1, #0
   1abdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1abe0:	bf08      	it	eq
   1abe2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1abe6:	bd70      	pop	{r4, r5, r6, pc}
   1abe8:	f1c4 0520 	rsb	r5, r4, #32
   1abec:	fa00 f205 	lsl.w	r2, r0, r5
   1abf0:	ea4e 0e02 	orr.w	lr, lr, r2
   1abf4:	fa20 f304 	lsr.w	r3, r0, r4
   1abf8:	fa01 f205 	lsl.w	r2, r1, r5
   1abfc:	ea43 0302 	orr.w	r3, r3, r2
   1ac00:	fa21 f004 	lsr.w	r0, r1, r4
   1ac04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ac08:	fa21 f204 	lsr.w	r2, r1, r4
   1ac0c:	ea20 0002 	bic.w	r0, r0, r2
   1ac10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1ac14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1ac18:	bf08      	it	eq
   1ac1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1ac1e:	bd70      	pop	{r4, r5, r6, pc}
   1ac20:	f094 0f00 	teq	r4, #0
   1ac24:	d10f      	bne.n	1ac46 <__aeabi_dmul+0x1c2>
   1ac26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1ac2a:	0040      	lsls	r0, r0, #1
   1ac2c:	eb41 0101 	adc.w	r1, r1, r1
   1ac30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1ac34:	bf08      	it	eq
   1ac36:	3c01      	subeq	r4, #1
   1ac38:	d0f7      	beq.n	1ac2a <__aeabi_dmul+0x1a6>
   1ac3a:	ea41 0106 	orr.w	r1, r1, r6
   1ac3e:	f095 0f00 	teq	r5, #0
   1ac42:	bf18      	it	ne
   1ac44:	4770      	bxne	lr
   1ac46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1ac4a:	0052      	lsls	r2, r2, #1
   1ac4c:	eb43 0303 	adc.w	r3, r3, r3
   1ac50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1ac54:	bf08      	it	eq
   1ac56:	3d01      	subeq	r5, #1
   1ac58:	d0f7      	beq.n	1ac4a <__aeabi_dmul+0x1c6>
   1ac5a:	ea43 0306 	orr.w	r3, r3, r6
   1ac5e:	4770      	bx	lr
   1ac60:	ea94 0f0c 	teq	r4, ip
   1ac64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1ac68:	bf18      	it	ne
   1ac6a:	ea95 0f0c 	teqne	r5, ip
   1ac6e:	d00c      	beq.n	1ac8a <__aeabi_dmul+0x206>
   1ac70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ac74:	bf18      	it	ne
   1ac76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ac7a:	d1d1      	bne.n	1ac20 <__aeabi_dmul+0x19c>
   1ac7c:	ea81 0103 	eor.w	r1, r1, r3
   1ac80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ac84:	f04f 0000 	mov.w	r0, #0
   1ac88:	bd70      	pop	{r4, r5, r6, pc}
   1ac8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ac8e:	bf06      	itte	eq
   1ac90:	4610      	moveq	r0, r2
   1ac92:	4619      	moveq	r1, r3
   1ac94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ac98:	d019      	beq.n	1acce <__aeabi_dmul+0x24a>
   1ac9a:	ea94 0f0c 	teq	r4, ip
   1ac9e:	d102      	bne.n	1aca6 <__aeabi_dmul+0x222>
   1aca0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1aca4:	d113      	bne.n	1acce <__aeabi_dmul+0x24a>
   1aca6:	ea95 0f0c 	teq	r5, ip
   1acaa:	d105      	bne.n	1acb8 <__aeabi_dmul+0x234>
   1acac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1acb0:	bf1c      	itt	ne
   1acb2:	4610      	movne	r0, r2
   1acb4:	4619      	movne	r1, r3
   1acb6:	d10a      	bne.n	1acce <__aeabi_dmul+0x24a>
   1acb8:	ea81 0103 	eor.w	r1, r1, r3
   1acbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1acc0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1acc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1acc8:	f04f 0000 	mov.w	r0, #0
   1accc:	bd70      	pop	{r4, r5, r6, pc}
   1acce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1acd2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1acd6:	bd70      	pop	{r4, r5, r6, pc}

0001acd8 <__aeabi_ddiv>:
   1acd8:	b570      	push	{r4, r5, r6, lr}
   1acda:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1acde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ace2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ace6:	bf1d      	ittte	ne
   1ace8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1acec:	ea94 0f0c 	teqne	r4, ip
   1acf0:	ea95 0f0c 	teqne	r5, ip
   1acf4:	f000 f8a7 	bleq	1ae46 <__aeabi_ddiv+0x16e>
   1acf8:	eba4 0405 	sub.w	r4, r4, r5
   1acfc:	ea81 0e03 	eor.w	lr, r1, r3
   1ad00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ad04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ad08:	f000 8088 	beq.w	1ae1c <__aeabi_ddiv+0x144>
   1ad0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ad10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ad14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ad18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ad1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ad20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ad24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ad28:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ad2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ad30:	429d      	cmp	r5, r3
   1ad32:	bf08      	it	eq
   1ad34:	4296      	cmpeq	r6, r2
   1ad36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ad3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ad3e:	d202      	bcs.n	1ad46 <__aeabi_ddiv+0x6e>
   1ad40:	085b      	lsrs	r3, r3, #1
   1ad42:	ea4f 0232 	mov.w	r2, r2, rrx
   1ad46:	1ab6      	subs	r6, r6, r2
   1ad48:	eb65 0503 	sbc.w	r5, r5, r3
   1ad4c:	085b      	lsrs	r3, r3, #1
   1ad4e:	ea4f 0232 	mov.w	r2, r2, rrx
   1ad52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ad56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ad5a:	ebb6 0e02 	subs.w	lr, r6, r2
   1ad5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ad62:	bf22      	ittt	cs
   1ad64:	1ab6      	subcs	r6, r6, r2
   1ad66:	4675      	movcs	r5, lr
   1ad68:	ea40 000c 	orrcs.w	r0, r0, ip
   1ad6c:	085b      	lsrs	r3, r3, #1
   1ad6e:	ea4f 0232 	mov.w	r2, r2, rrx
   1ad72:	ebb6 0e02 	subs.w	lr, r6, r2
   1ad76:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ad7a:	bf22      	ittt	cs
   1ad7c:	1ab6      	subcs	r6, r6, r2
   1ad7e:	4675      	movcs	r5, lr
   1ad80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1ad84:	085b      	lsrs	r3, r3, #1
   1ad86:	ea4f 0232 	mov.w	r2, r2, rrx
   1ad8a:	ebb6 0e02 	subs.w	lr, r6, r2
   1ad8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ad92:	bf22      	ittt	cs
   1ad94:	1ab6      	subcs	r6, r6, r2
   1ad96:	4675      	movcs	r5, lr
   1ad98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1ad9c:	085b      	lsrs	r3, r3, #1
   1ad9e:	ea4f 0232 	mov.w	r2, r2, rrx
   1ada2:	ebb6 0e02 	subs.w	lr, r6, r2
   1ada6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1adaa:	bf22      	ittt	cs
   1adac:	1ab6      	subcs	r6, r6, r2
   1adae:	4675      	movcs	r5, lr
   1adb0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1adb4:	ea55 0e06 	orrs.w	lr, r5, r6
   1adb8:	d018      	beq.n	1adec <__aeabi_ddiv+0x114>
   1adba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1adbe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1adc2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1adc6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1adca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1adce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1add2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1add6:	d1c0      	bne.n	1ad5a <__aeabi_ddiv+0x82>
   1add8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1addc:	d10b      	bne.n	1adf6 <__aeabi_ddiv+0x11e>
   1adde:	ea41 0100 	orr.w	r1, r1, r0
   1ade2:	f04f 0000 	mov.w	r0, #0
   1ade6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1adea:	e7b6      	b.n	1ad5a <__aeabi_ddiv+0x82>
   1adec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1adf0:	bf04      	itt	eq
   1adf2:	4301      	orreq	r1, r0
   1adf4:	2000      	moveq	r0, #0
   1adf6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1adfa:	bf88      	it	hi
   1adfc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1ae00:	f63f aeaf 	bhi.w	1ab62 <__aeabi_dmul+0xde>
   1ae04:	ebb5 0c03 	subs.w	ip, r5, r3
   1ae08:	bf04      	itt	eq
   1ae0a:	ebb6 0c02 	subseq.w	ip, r6, r2
   1ae0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1ae12:	f150 0000 	adcs.w	r0, r0, #0
   1ae16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1ae1a:	bd70      	pop	{r4, r5, r6, pc}
   1ae1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1ae20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1ae24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1ae28:	bfc2      	ittt	gt
   1ae2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1ae2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1ae32:	bd70      	popgt	{r4, r5, r6, pc}
   1ae34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1ae38:	f04f 0e00 	mov.w	lr, #0
   1ae3c:	3c01      	subs	r4, #1
   1ae3e:	e690      	b.n	1ab62 <__aeabi_dmul+0xde>
   1ae40:	ea45 0e06 	orr.w	lr, r5, r6
   1ae44:	e68d      	b.n	1ab62 <__aeabi_dmul+0xde>
   1ae46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1ae4a:	ea94 0f0c 	teq	r4, ip
   1ae4e:	bf08      	it	eq
   1ae50:	ea95 0f0c 	teqeq	r5, ip
   1ae54:	f43f af3b 	beq.w	1acce <__aeabi_dmul+0x24a>
   1ae58:	ea94 0f0c 	teq	r4, ip
   1ae5c:	d10a      	bne.n	1ae74 <__aeabi_ddiv+0x19c>
   1ae5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1ae62:	f47f af34 	bne.w	1acce <__aeabi_dmul+0x24a>
   1ae66:	ea95 0f0c 	teq	r5, ip
   1ae6a:	f47f af25 	bne.w	1acb8 <__aeabi_dmul+0x234>
   1ae6e:	4610      	mov	r0, r2
   1ae70:	4619      	mov	r1, r3
   1ae72:	e72c      	b.n	1acce <__aeabi_dmul+0x24a>
   1ae74:	ea95 0f0c 	teq	r5, ip
   1ae78:	d106      	bne.n	1ae88 <__aeabi_ddiv+0x1b0>
   1ae7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ae7e:	f43f aefd 	beq.w	1ac7c <__aeabi_dmul+0x1f8>
   1ae82:	4610      	mov	r0, r2
   1ae84:	4619      	mov	r1, r3
   1ae86:	e722      	b.n	1acce <__aeabi_dmul+0x24a>
   1ae88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ae8c:	bf18      	it	ne
   1ae8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ae92:	f47f aec5 	bne.w	1ac20 <__aeabi_dmul+0x19c>
   1ae96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1ae9a:	f47f af0d 	bne.w	1acb8 <__aeabi_dmul+0x234>
   1ae9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1aea2:	f47f aeeb 	bne.w	1ac7c <__aeabi_dmul+0x1f8>
   1aea6:	e712      	b.n	1acce <__aeabi_dmul+0x24a>

0001aea8 <__gedf2>:
   1aea8:	f04f 3cff 	mov.w	ip, #4294967295
   1aeac:	e006      	b.n	1aebc <__cmpdf2+0x4>
   1aeae:	bf00      	nop

0001aeb0 <__ledf2>:
   1aeb0:	f04f 0c01 	mov.w	ip, #1
   1aeb4:	e002      	b.n	1aebc <__cmpdf2+0x4>
   1aeb6:	bf00      	nop

0001aeb8 <__cmpdf2>:
   1aeb8:	f04f 0c01 	mov.w	ip, #1
   1aebc:	f84d cd04 	str.w	ip, [sp, #-4]!
   1aec0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1aec4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1aec8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1aecc:	bf18      	it	ne
   1aece:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1aed2:	d01b      	beq.n	1af0c <__cmpdf2+0x54>
   1aed4:	b001      	add	sp, #4
   1aed6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1aeda:	bf0c      	ite	eq
   1aedc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1aee0:	ea91 0f03 	teqne	r1, r3
   1aee4:	bf02      	ittt	eq
   1aee6:	ea90 0f02 	teqeq	r0, r2
   1aeea:	2000      	moveq	r0, #0
   1aeec:	4770      	bxeq	lr
   1aeee:	f110 0f00 	cmn.w	r0, #0
   1aef2:	ea91 0f03 	teq	r1, r3
   1aef6:	bf58      	it	pl
   1aef8:	4299      	cmppl	r1, r3
   1aefa:	bf08      	it	eq
   1aefc:	4290      	cmpeq	r0, r2
   1aefe:	bf2c      	ite	cs
   1af00:	17d8      	asrcs	r0, r3, #31
   1af02:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1af06:	f040 0001 	orr.w	r0, r0, #1
   1af0a:	4770      	bx	lr
   1af0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1af10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1af14:	d102      	bne.n	1af1c <__cmpdf2+0x64>
   1af16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1af1a:	d107      	bne.n	1af2c <__cmpdf2+0x74>
   1af1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1af20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1af24:	d1d6      	bne.n	1aed4 <__cmpdf2+0x1c>
   1af26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1af2a:	d0d3      	beq.n	1aed4 <__cmpdf2+0x1c>
   1af2c:	f85d 0b04 	ldr.w	r0, [sp], #4
   1af30:	4770      	bx	lr
   1af32:	bf00      	nop

0001af34 <__aeabi_cdrcmple>:
   1af34:	4684      	mov	ip, r0
   1af36:	4610      	mov	r0, r2
   1af38:	4662      	mov	r2, ip
   1af3a:	468c      	mov	ip, r1
   1af3c:	4619      	mov	r1, r3
   1af3e:	4663      	mov	r3, ip
   1af40:	e000      	b.n	1af44 <__aeabi_cdcmpeq>
   1af42:	bf00      	nop

0001af44 <__aeabi_cdcmpeq>:
   1af44:	b501      	push	{r0, lr}
   1af46:	f7ff ffb7 	bl	1aeb8 <__cmpdf2>
   1af4a:	2800      	cmp	r0, #0
   1af4c:	bf48      	it	mi
   1af4e:	f110 0f00 	cmnmi.w	r0, #0
   1af52:	bd01      	pop	{r0, pc}

0001af54 <__aeabi_dcmpeq>:
   1af54:	f84d ed08 	str.w	lr, [sp, #-8]!
   1af58:	f7ff fff4 	bl	1af44 <__aeabi_cdcmpeq>
   1af5c:	bf0c      	ite	eq
   1af5e:	2001      	moveq	r0, #1
   1af60:	2000      	movne	r0, #0
   1af62:	f85d fb08 	ldr.w	pc, [sp], #8
   1af66:	bf00      	nop

0001af68 <__aeabi_dcmplt>:
   1af68:	f84d ed08 	str.w	lr, [sp, #-8]!
   1af6c:	f7ff ffea 	bl	1af44 <__aeabi_cdcmpeq>
   1af70:	bf34      	ite	cc
   1af72:	2001      	movcc	r0, #1
   1af74:	2000      	movcs	r0, #0
   1af76:	f85d fb08 	ldr.w	pc, [sp], #8
   1af7a:	bf00      	nop

0001af7c <__aeabi_dcmple>:
   1af7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1af80:	f7ff ffe0 	bl	1af44 <__aeabi_cdcmpeq>
   1af84:	bf94      	ite	ls
   1af86:	2001      	movls	r0, #1
   1af88:	2000      	movhi	r0, #0
   1af8a:	f85d fb08 	ldr.w	pc, [sp], #8
   1af8e:	bf00      	nop

0001af90 <__aeabi_dcmpge>:
   1af90:	f84d ed08 	str.w	lr, [sp, #-8]!
   1af94:	f7ff ffce 	bl	1af34 <__aeabi_cdrcmple>
   1af98:	bf94      	ite	ls
   1af9a:	2001      	movls	r0, #1
   1af9c:	2000      	movhi	r0, #0
   1af9e:	f85d fb08 	ldr.w	pc, [sp], #8
   1afa2:	bf00      	nop

0001afa4 <__aeabi_dcmpgt>:
   1afa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1afa8:	f7ff ffc4 	bl	1af34 <__aeabi_cdrcmple>
   1afac:	bf34      	ite	cc
   1afae:	2001      	movcc	r0, #1
   1afb0:	2000      	movcs	r0, #0
   1afb2:	f85d fb08 	ldr.w	pc, [sp], #8
   1afb6:	bf00      	nop

0001afb8 <__aeabi_dcmpun>:
   1afb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1afbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1afc0:	d102      	bne.n	1afc8 <__aeabi_dcmpun+0x10>
   1afc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1afc6:	d10a      	bne.n	1afde <__aeabi_dcmpun+0x26>
   1afc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1afcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1afd0:	d102      	bne.n	1afd8 <__aeabi_dcmpun+0x20>
   1afd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1afd6:	d102      	bne.n	1afde <__aeabi_dcmpun+0x26>
   1afd8:	f04f 0000 	mov.w	r0, #0
   1afdc:	4770      	bx	lr
   1afde:	f04f 0001 	mov.w	r0, #1
   1afe2:	4770      	bx	lr

0001afe4 <__aeabi_d2uiz>:
   1afe4:	004a      	lsls	r2, r1, #1
   1afe6:	d211      	bcs.n	1b00c <__aeabi_d2uiz+0x28>
   1afe8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1afec:	d211      	bcs.n	1b012 <__aeabi_d2uiz+0x2e>
   1afee:	d50d      	bpl.n	1b00c <__aeabi_d2uiz+0x28>
   1aff0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1aff4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1aff8:	d40e      	bmi.n	1b018 <__aeabi_d2uiz+0x34>
   1affa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1affe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b002:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1b006:	fa23 f002 	lsr.w	r0, r3, r2
   1b00a:	4770      	bx	lr
   1b00c:	f04f 0000 	mov.w	r0, #0
   1b010:	4770      	bx	lr
   1b012:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1b016:	d102      	bne.n	1b01e <__aeabi_d2uiz+0x3a>
   1b018:	f04f 30ff 	mov.w	r0, #4294967295
   1b01c:	4770      	bx	lr
   1b01e:	f04f 0000 	mov.w	r0, #0
   1b022:	4770      	bx	lr

0001b024 <__aeabi_frsub>:
   1b024:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1b028:	e002      	b.n	1b030 <__addsf3>
   1b02a:	bf00      	nop

0001b02c <__aeabi_fsub>:
   1b02c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001b030 <__addsf3>:
   1b030:	0042      	lsls	r2, r0, #1
   1b032:	bf1f      	itttt	ne
   1b034:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1b038:	ea92 0f03 	teqne	r2, r3
   1b03c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1b040:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1b044:	d06a      	beq.n	1b11c <__addsf3+0xec>
   1b046:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1b04a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1b04e:	bfc1      	itttt	gt
   1b050:	18d2      	addgt	r2, r2, r3
   1b052:	4041      	eorgt	r1, r0
   1b054:	4048      	eorgt	r0, r1
   1b056:	4041      	eorgt	r1, r0
   1b058:	bfb8      	it	lt
   1b05a:	425b      	neglt	r3, r3
   1b05c:	2b19      	cmp	r3, #25
   1b05e:	bf88      	it	hi
   1b060:	4770      	bxhi	lr
   1b062:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1b066:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b06a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1b06e:	bf18      	it	ne
   1b070:	4240      	negne	r0, r0
   1b072:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1b076:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1b07a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1b07e:	bf18      	it	ne
   1b080:	4249      	negne	r1, r1
   1b082:	ea92 0f03 	teq	r2, r3
   1b086:	d03f      	beq.n	1b108 <__addsf3+0xd8>
   1b088:	f1a2 0201 	sub.w	r2, r2, #1
   1b08c:	fa41 fc03 	asr.w	ip, r1, r3
   1b090:	eb10 000c 	adds.w	r0, r0, ip
   1b094:	f1c3 0320 	rsb	r3, r3, #32
   1b098:	fa01 f103 	lsl.w	r1, r1, r3
   1b09c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1b0a0:	d502      	bpl.n	1b0a8 <__addsf3+0x78>
   1b0a2:	4249      	negs	r1, r1
   1b0a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1b0a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1b0ac:	d313      	bcc.n	1b0d6 <__addsf3+0xa6>
   1b0ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1b0b2:	d306      	bcc.n	1b0c2 <__addsf3+0x92>
   1b0b4:	0840      	lsrs	r0, r0, #1
   1b0b6:	ea4f 0131 	mov.w	r1, r1, rrx
   1b0ba:	f102 0201 	add.w	r2, r2, #1
   1b0be:	2afe      	cmp	r2, #254	; 0xfe
   1b0c0:	d251      	bcs.n	1b166 <__addsf3+0x136>
   1b0c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1b0c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1b0ca:	bf08      	it	eq
   1b0cc:	f020 0001 	biceq.w	r0, r0, #1
   1b0d0:	ea40 0003 	orr.w	r0, r0, r3
   1b0d4:	4770      	bx	lr
   1b0d6:	0049      	lsls	r1, r1, #1
   1b0d8:	eb40 0000 	adc.w	r0, r0, r0
   1b0dc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1b0e0:	f1a2 0201 	sub.w	r2, r2, #1
   1b0e4:	d1ed      	bne.n	1b0c2 <__addsf3+0x92>
   1b0e6:	fab0 fc80 	clz	ip, r0
   1b0ea:	f1ac 0c08 	sub.w	ip, ip, #8
   1b0ee:	ebb2 020c 	subs.w	r2, r2, ip
   1b0f2:	fa00 f00c 	lsl.w	r0, r0, ip
   1b0f6:	bfaa      	itet	ge
   1b0f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1b0fc:	4252      	neglt	r2, r2
   1b0fe:	4318      	orrge	r0, r3
   1b100:	bfbc      	itt	lt
   1b102:	40d0      	lsrlt	r0, r2
   1b104:	4318      	orrlt	r0, r3
   1b106:	4770      	bx	lr
   1b108:	f092 0f00 	teq	r2, #0
   1b10c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1b110:	bf06      	itte	eq
   1b112:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1b116:	3201      	addeq	r2, #1
   1b118:	3b01      	subne	r3, #1
   1b11a:	e7b5      	b.n	1b088 <__addsf3+0x58>
   1b11c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1b120:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1b124:	bf18      	it	ne
   1b126:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1b12a:	d021      	beq.n	1b170 <__addsf3+0x140>
   1b12c:	ea92 0f03 	teq	r2, r3
   1b130:	d004      	beq.n	1b13c <__addsf3+0x10c>
   1b132:	f092 0f00 	teq	r2, #0
   1b136:	bf08      	it	eq
   1b138:	4608      	moveq	r0, r1
   1b13a:	4770      	bx	lr
   1b13c:	ea90 0f01 	teq	r0, r1
   1b140:	bf1c      	itt	ne
   1b142:	2000      	movne	r0, #0
   1b144:	4770      	bxne	lr
   1b146:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1b14a:	d104      	bne.n	1b156 <__addsf3+0x126>
   1b14c:	0040      	lsls	r0, r0, #1
   1b14e:	bf28      	it	cs
   1b150:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1b154:	4770      	bx	lr
   1b156:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1b15a:	bf3c      	itt	cc
   1b15c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1b160:	4770      	bxcc	lr
   1b162:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1b166:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1b16a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b16e:	4770      	bx	lr
   1b170:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1b174:	bf16      	itet	ne
   1b176:	4608      	movne	r0, r1
   1b178:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1b17c:	4601      	movne	r1, r0
   1b17e:	0242      	lsls	r2, r0, #9
   1b180:	bf06      	itte	eq
   1b182:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1b186:	ea90 0f01 	teqeq	r0, r1
   1b18a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1b18e:	4770      	bx	lr

0001b190 <__aeabi_ui2f>:
   1b190:	f04f 0300 	mov.w	r3, #0
   1b194:	e004      	b.n	1b1a0 <__aeabi_i2f+0x8>
   1b196:	bf00      	nop

0001b198 <__aeabi_i2f>:
   1b198:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1b19c:	bf48      	it	mi
   1b19e:	4240      	negmi	r0, r0
   1b1a0:	ea5f 0c00 	movs.w	ip, r0
   1b1a4:	bf08      	it	eq
   1b1a6:	4770      	bxeq	lr
   1b1a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1b1ac:	4601      	mov	r1, r0
   1b1ae:	f04f 0000 	mov.w	r0, #0
   1b1b2:	e01c      	b.n	1b1ee <__aeabi_l2f+0x2a>

0001b1b4 <__aeabi_ul2f>:
   1b1b4:	ea50 0201 	orrs.w	r2, r0, r1
   1b1b8:	bf08      	it	eq
   1b1ba:	4770      	bxeq	lr
   1b1bc:	f04f 0300 	mov.w	r3, #0
   1b1c0:	e00a      	b.n	1b1d8 <__aeabi_l2f+0x14>
   1b1c2:	bf00      	nop

0001b1c4 <__aeabi_l2f>:
   1b1c4:	ea50 0201 	orrs.w	r2, r0, r1
   1b1c8:	bf08      	it	eq
   1b1ca:	4770      	bxeq	lr
   1b1cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1b1d0:	d502      	bpl.n	1b1d8 <__aeabi_l2f+0x14>
   1b1d2:	4240      	negs	r0, r0
   1b1d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b1d8:	ea5f 0c01 	movs.w	ip, r1
   1b1dc:	bf02      	ittt	eq
   1b1de:	4684      	moveq	ip, r0
   1b1e0:	4601      	moveq	r1, r0
   1b1e2:	2000      	moveq	r0, #0
   1b1e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1b1e8:	bf08      	it	eq
   1b1ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1b1ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1b1f2:	fabc f28c 	clz	r2, ip
   1b1f6:	3a08      	subs	r2, #8
   1b1f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1b1fc:	db10      	blt.n	1b220 <__aeabi_l2f+0x5c>
   1b1fe:	fa01 fc02 	lsl.w	ip, r1, r2
   1b202:	4463      	add	r3, ip
   1b204:	fa00 fc02 	lsl.w	ip, r0, r2
   1b208:	f1c2 0220 	rsb	r2, r2, #32
   1b20c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1b210:	fa20 f202 	lsr.w	r2, r0, r2
   1b214:	eb43 0002 	adc.w	r0, r3, r2
   1b218:	bf08      	it	eq
   1b21a:	f020 0001 	biceq.w	r0, r0, #1
   1b21e:	4770      	bx	lr
   1b220:	f102 0220 	add.w	r2, r2, #32
   1b224:	fa01 fc02 	lsl.w	ip, r1, r2
   1b228:	f1c2 0220 	rsb	r2, r2, #32
   1b22c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1b230:	fa21 f202 	lsr.w	r2, r1, r2
   1b234:	eb43 0002 	adc.w	r0, r3, r2
   1b238:	bf08      	it	eq
   1b23a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1b23e:	4770      	bx	lr

0001b240 <__aeabi_fmul>:
   1b240:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1b244:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1b248:	bf1e      	ittt	ne
   1b24a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1b24e:	ea92 0f0c 	teqne	r2, ip
   1b252:	ea93 0f0c 	teqne	r3, ip
   1b256:	d06f      	beq.n	1b338 <__aeabi_fmul+0xf8>
   1b258:	441a      	add	r2, r3
   1b25a:	ea80 0c01 	eor.w	ip, r0, r1
   1b25e:	0240      	lsls	r0, r0, #9
   1b260:	bf18      	it	ne
   1b262:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1b266:	d01e      	beq.n	1b2a6 <__aeabi_fmul+0x66>
   1b268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1b26c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1b270:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1b274:	fba0 3101 	umull	r3, r1, r0, r1
   1b278:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1b27c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1b280:	bf3e      	ittt	cc
   1b282:	0049      	lslcc	r1, r1, #1
   1b284:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1b288:	005b      	lslcc	r3, r3, #1
   1b28a:	ea40 0001 	orr.w	r0, r0, r1
   1b28e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1b292:	2afd      	cmp	r2, #253	; 0xfd
   1b294:	d81d      	bhi.n	1b2d2 <__aeabi_fmul+0x92>
   1b296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1b29a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1b29e:	bf08      	it	eq
   1b2a0:	f020 0001 	biceq.w	r0, r0, #1
   1b2a4:	4770      	bx	lr
   1b2a6:	f090 0f00 	teq	r0, #0
   1b2aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1b2ae:	bf08      	it	eq
   1b2b0:	0249      	lsleq	r1, r1, #9
   1b2b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1b2b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1b2ba:	3a7f      	subs	r2, #127	; 0x7f
   1b2bc:	bfc2      	ittt	gt
   1b2be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1b2c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1b2c6:	4770      	bxgt	lr
   1b2c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b2cc:	f04f 0300 	mov.w	r3, #0
   1b2d0:	3a01      	subs	r2, #1
   1b2d2:	dc5d      	bgt.n	1b390 <__aeabi_fmul+0x150>
   1b2d4:	f112 0f19 	cmn.w	r2, #25
   1b2d8:	bfdc      	itt	le
   1b2da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1b2de:	4770      	bxle	lr
   1b2e0:	f1c2 0200 	rsb	r2, r2, #0
   1b2e4:	0041      	lsls	r1, r0, #1
   1b2e6:	fa21 f102 	lsr.w	r1, r1, r2
   1b2ea:	f1c2 0220 	rsb	r2, r2, #32
   1b2ee:	fa00 fc02 	lsl.w	ip, r0, r2
   1b2f2:	ea5f 0031 	movs.w	r0, r1, rrx
   1b2f6:	f140 0000 	adc.w	r0, r0, #0
   1b2fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1b2fe:	bf08      	it	eq
   1b300:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1b304:	4770      	bx	lr
   1b306:	f092 0f00 	teq	r2, #0
   1b30a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1b30e:	bf02      	ittt	eq
   1b310:	0040      	lsleq	r0, r0, #1
   1b312:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1b316:	3a01      	subeq	r2, #1
   1b318:	d0f9      	beq.n	1b30e <__aeabi_fmul+0xce>
   1b31a:	ea40 000c 	orr.w	r0, r0, ip
   1b31e:	f093 0f00 	teq	r3, #0
   1b322:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1b326:	bf02      	ittt	eq
   1b328:	0049      	lsleq	r1, r1, #1
   1b32a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1b32e:	3b01      	subeq	r3, #1
   1b330:	d0f9      	beq.n	1b326 <__aeabi_fmul+0xe6>
   1b332:	ea41 010c 	orr.w	r1, r1, ip
   1b336:	e78f      	b.n	1b258 <__aeabi_fmul+0x18>
   1b338:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1b33c:	ea92 0f0c 	teq	r2, ip
   1b340:	bf18      	it	ne
   1b342:	ea93 0f0c 	teqne	r3, ip
   1b346:	d00a      	beq.n	1b35e <__aeabi_fmul+0x11e>
   1b348:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1b34c:	bf18      	it	ne
   1b34e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1b352:	d1d8      	bne.n	1b306 <__aeabi_fmul+0xc6>
   1b354:	ea80 0001 	eor.w	r0, r0, r1
   1b358:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1b35c:	4770      	bx	lr
   1b35e:	f090 0f00 	teq	r0, #0
   1b362:	bf17      	itett	ne
   1b364:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1b368:	4608      	moveq	r0, r1
   1b36a:	f091 0f00 	teqne	r1, #0
   1b36e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1b372:	d014      	beq.n	1b39e <__aeabi_fmul+0x15e>
   1b374:	ea92 0f0c 	teq	r2, ip
   1b378:	d101      	bne.n	1b37e <__aeabi_fmul+0x13e>
   1b37a:	0242      	lsls	r2, r0, #9
   1b37c:	d10f      	bne.n	1b39e <__aeabi_fmul+0x15e>
   1b37e:	ea93 0f0c 	teq	r3, ip
   1b382:	d103      	bne.n	1b38c <__aeabi_fmul+0x14c>
   1b384:	024b      	lsls	r3, r1, #9
   1b386:	bf18      	it	ne
   1b388:	4608      	movne	r0, r1
   1b38a:	d108      	bne.n	1b39e <__aeabi_fmul+0x15e>
   1b38c:	ea80 0001 	eor.w	r0, r0, r1
   1b390:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1b394:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1b398:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b39c:	4770      	bx	lr
   1b39e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1b3a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1b3a6:	4770      	bx	lr

0001b3a8 <__aeabi_fdiv>:
   1b3a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1b3ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1b3b0:	bf1e      	ittt	ne
   1b3b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1b3b6:	ea92 0f0c 	teqne	r2, ip
   1b3ba:	ea93 0f0c 	teqne	r3, ip
   1b3be:	d069      	beq.n	1b494 <__aeabi_fdiv+0xec>
   1b3c0:	eba2 0203 	sub.w	r2, r2, r3
   1b3c4:	ea80 0c01 	eor.w	ip, r0, r1
   1b3c8:	0249      	lsls	r1, r1, #9
   1b3ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1b3ce:	d037      	beq.n	1b440 <__aeabi_fdiv+0x98>
   1b3d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b3d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1b3d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1b3dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1b3e0:	428b      	cmp	r3, r1
   1b3e2:	bf38      	it	cc
   1b3e4:	005b      	lslcc	r3, r3, #1
   1b3e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1b3ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1b3ee:	428b      	cmp	r3, r1
   1b3f0:	bf24      	itt	cs
   1b3f2:	1a5b      	subcs	r3, r3, r1
   1b3f4:	ea40 000c 	orrcs.w	r0, r0, ip
   1b3f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1b3fc:	bf24      	itt	cs
   1b3fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1b402:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1b406:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1b40a:	bf24      	itt	cs
   1b40c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1b410:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1b414:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1b418:	bf24      	itt	cs
   1b41a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1b41e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1b422:	011b      	lsls	r3, r3, #4
   1b424:	bf18      	it	ne
   1b426:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1b42a:	d1e0      	bne.n	1b3ee <__aeabi_fdiv+0x46>
   1b42c:	2afd      	cmp	r2, #253	; 0xfd
   1b42e:	f63f af50 	bhi.w	1b2d2 <__aeabi_fmul+0x92>
   1b432:	428b      	cmp	r3, r1
   1b434:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1b438:	bf08      	it	eq
   1b43a:	f020 0001 	biceq.w	r0, r0, #1
   1b43e:	4770      	bx	lr
   1b440:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1b444:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1b448:	327f      	adds	r2, #127	; 0x7f
   1b44a:	bfc2      	ittt	gt
   1b44c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1b450:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1b454:	4770      	bxgt	lr
   1b456:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b45a:	f04f 0300 	mov.w	r3, #0
   1b45e:	3a01      	subs	r2, #1
   1b460:	e737      	b.n	1b2d2 <__aeabi_fmul+0x92>
   1b462:	f092 0f00 	teq	r2, #0
   1b466:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1b46a:	bf02      	ittt	eq
   1b46c:	0040      	lsleq	r0, r0, #1
   1b46e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1b472:	3a01      	subeq	r2, #1
   1b474:	d0f9      	beq.n	1b46a <__aeabi_fdiv+0xc2>
   1b476:	ea40 000c 	orr.w	r0, r0, ip
   1b47a:	f093 0f00 	teq	r3, #0
   1b47e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1b482:	bf02      	ittt	eq
   1b484:	0049      	lsleq	r1, r1, #1
   1b486:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1b48a:	3b01      	subeq	r3, #1
   1b48c:	d0f9      	beq.n	1b482 <__aeabi_fdiv+0xda>
   1b48e:	ea41 010c 	orr.w	r1, r1, ip
   1b492:	e795      	b.n	1b3c0 <__aeabi_fdiv+0x18>
   1b494:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1b498:	ea92 0f0c 	teq	r2, ip
   1b49c:	d108      	bne.n	1b4b0 <__aeabi_fdiv+0x108>
   1b49e:	0242      	lsls	r2, r0, #9
   1b4a0:	f47f af7d 	bne.w	1b39e <__aeabi_fmul+0x15e>
   1b4a4:	ea93 0f0c 	teq	r3, ip
   1b4a8:	f47f af70 	bne.w	1b38c <__aeabi_fmul+0x14c>
   1b4ac:	4608      	mov	r0, r1
   1b4ae:	e776      	b.n	1b39e <__aeabi_fmul+0x15e>
   1b4b0:	ea93 0f0c 	teq	r3, ip
   1b4b4:	d104      	bne.n	1b4c0 <__aeabi_fdiv+0x118>
   1b4b6:	024b      	lsls	r3, r1, #9
   1b4b8:	f43f af4c 	beq.w	1b354 <__aeabi_fmul+0x114>
   1b4bc:	4608      	mov	r0, r1
   1b4be:	e76e      	b.n	1b39e <__aeabi_fmul+0x15e>
   1b4c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1b4c4:	bf18      	it	ne
   1b4c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1b4ca:	d1ca      	bne.n	1b462 <__aeabi_fdiv+0xba>
   1b4cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1b4d0:	f47f af5c 	bne.w	1b38c <__aeabi_fmul+0x14c>
   1b4d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1b4d8:	f47f af3c 	bne.w	1b354 <__aeabi_fmul+0x114>
   1b4dc:	e75f      	b.n	1b39e <__aeabi_fmul+0x15e>
   1b4de:	bf00      	nop

0001b4e0 <__gesf2>:
   1b4e0:	f04f 3cff 	mov.w	ip, #4294967295
   1b4e4:	e006      	b.n	1b4f4 <__cmpsf2+0x4>
   1b4e6:	bf00      	nop

0001b4e8 <__lesf2>:
   1b4e8:	f04f 0c01 	mov.w	ip, #1
   1b4ec:	e002      	b.n	1b4f4 <__cmpsf2+0x4>
   1b4ee:	bf00      	nop

0001b4f0 <__cmpsf2>:
   1b4f0:	f04f 0c01 	mov.w	ip, #1
   1b4f4:	f84d cd04 	str.w	ip, [sp, #-4]!
   1b4f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1b4fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1b500:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1b504:	bf18      	it	ne
   1b506:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1b50a:	d011      	beq.n	1b530 <__cmpsf2+0x40>
   1b50c:	b001      	add	sp, #4
   1b50e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1b512:	bf18      	it	ne
   1b514:	ea90 0f01 	teqne	r0, r1
   1b518:	bf58      	it	pl
   1b51a:	ebb2 0003 	subspl.w	r0, r2, r3
   1b51e:	bf88      	it	hi
   1b520:	17c8      	asrhi	r0, r1, #31
   1b522:	bf38      	it	cc
   1b524:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1b528:	bf18      	it	ne
   1b52a:	f040 0001 	orrne.w	r0, r0, #1
   1b52e:	4770      	bx	lr
   1b530:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1b534:	d102      	bne.n	1b53c <__cmpsf2+0x4c>
   1b536:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1b53a:	d105      	bne.n	1b548 <__cmpsf2+0x58>
   1b53c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1b540:	d1e4      	bne.n	1b50c <__cmpsf2+0x1c>
   1b542:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1b546:	d0e1      	beq.n	1b50c <__cmpsf2+0x1c>
   1b548:	f85d 0b04 	ldr.w	r0, [sp], #4
   1b54c:	4770      	bx	lr
   1b54e:	bf00      	nop

0001b550 <__aeabi_cfrcmple>:
   1b550:	4684      	mov	ip, r0
   1b552:	4608      	mov	r0, r1
   1b554:	4661      	mov	r1, ip
   1b556:	e7ff      	b.n	1b558 <__aeabi_cfcmpeq>

0001b558 <__aeabi_cfcmpeq>:
   1b558:	b50f      	push	{r0, r1, r2, r3, lr}
   1b55a:	f7ff ffc9 	bl	1b4f0 <__cmpsf2>
   1b55e:	2800      	cmp	r0, #0
   1b560:	bf48      	it	mi
   1b562:	f110 0f00 	cmnmi.w	r0, #0
   1b566:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001b568 <__aeabi_fcmpeq>:
   1b568:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b56c:	f7ff fff4 	bl	1b558 <__aeabi_cfcmpeq>
   1b570:	bf0c      	ite	eq
   1b572:	2001      	moveq	r0, #1
   1b574:	2000      	movne	r0, #0
   1b576:	f85d fb08 	ldr.w	pc, [sp], #8
   1b57a:	bf00      	nop

0001b57c <__aeabi_fcmplt>:
   1b57c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b580:	f7ff ffea 	bl	1b558 <__aeabi_cfcmpeq>
   1b584:	bf34      	ite	cc
   1b586:	2001      	movcc	r0, #1
   1b588:	2000      	movcs	r0, #0
   1b58a:	f85d fb08 	ldr.w	pc, [sp], #8
   1b58e:	bf00      	nop

0001b590 <__aeabi_fcmple>:
   1b590:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b594:	f7ff ffe0 	bl	1b558 <__aeabi_cfcmpeq>
   1b598:	bf94      	ite	ls
   1b59a:	2001      	movls	r0, #1
   1b59c:	2000      	movhi	r0, #0
   1b59e:	f85d fb08 	ldr.w	pc, [sp], #8
   1b5a2:	bf00      	nop

0001b5a4 <__aeabi_fcmpge>:
   1b5a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b5a8:	f7ff ffd2 	bl	1b550 <__aeabi_cfrcmple>
   1b5ac:	bf94      	ite	ls
   1b5ae:	2001      	movls	r0, #1
   1b5b0:	2000      	movhi	r0, #0
   1b5b2:	f85d fb08 	ldr.w	pc, [sp], #8
   1b5b6:	bf00      	nop

0001b5b8 <__aeabi_fcmpgt>:
   1b5b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b5bc:	f7ff ffc8 	bl	1b550 <__aeabi_cfrcmple>
   1b5c0:	bf34      	ite	cc
   1b5c2:	2001      	movcc	r0, #1
   1b5c4:	2000      	movcs	r0, #0
   1b5c6:	f85d fb08 	ldr.w	pc, [sp], #8
   1b5ca:	bf00      	nop

0001b5cc <__aeabi_f2uiz>:
   1b5cc:	0042      	lsls	r2, r0, #1
   1b5ce:	d20e      	bcs.n	1b5ee <__aeabi_f2uiz+0x22>
   1b5d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1b5d4:	d30b      	bcc.n	1b5ee <__aeabi_f2uiz+0x22>
   1b5d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1b5da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1b5de:	d409      	bmi.n	1b5f4 <__aeabi_f2uiz+0x28>
   1b5e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1b5e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b5e8:	fa23 f002 	lsr.w	r0, r3, r2
   1b5ec:	4770      	bx	lr
   1b5ee:	f04f 0000 	mov.w	r0, #0
   1b5f2:	4770      	bx	lr
   1b5f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1b5f8:	d101      	bne.n	1b5fe <__aeabi_f2uiz+0x32>
   1b5fa:	0242      	lsls	r2, r0, #9
   1b5fc:	d102      	bne.n	1b604 <__aeabi_f2uiz+0x38>
   1b5fe:	f04f 30ff 	mov.w	r0, #4294967295
   1b602:	4770      	bx	lr
   1b604:	f04f 0000 	mov.w	r0, #0
   1b608:	4770      	bx	lr
   1b60a:	bf00      	nop

0001b60c <__aeabi_uldivmod>:
   1b60c:	b953      	cbnz	r3, 1b624 <__aeabi_uldivmod+0x18>
   1b60e:	b94a      	cbnz	r2, 1b624 <__aeabi_uldivmod+0x18>
   1b610:	2900      	cmp	r1, #0
   1b612:	bf08      	it	eq
   1b614:	2800      	cmpeq	r0, #0
   1b616:	bf1c      	itt	ne
   1b618:	f04f 31ff 	movne.w	r1, #4294967295
   1b61c:	f04f 30ff 	movne.w	r0, #4294967295
   1b620:	f000 b97a 	b.w	1b918 <__aeabi_idiv0>
   1b624:	f1ad 0c08 	sub.w	ip, sp, #8
   1b628:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1b62c:	f000 f806 	bl	1b63c <__udivmoddi4>
   1b630:	f8dd e004 	ldr.w	lr, [sp, #4]
   1b634:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b638:	b004      	add	sp, #16
   1b63a:	4770      	bx	lr

0001b63c <__udivmoddi4>:
   1b63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b640:	468c      	mov	ip, r1
   1b642:	460d      	mov	r5, r1
   1b644:	4604      	mov	r4, r0
   1b646:	9e08      	ldr	r6, [sp, #32]
   1b648:	2b00      	cmp	r3, #0
   1b64a:	d151      	bne.n	1b6f0 <__udivmoddi4+0xb4>
   1b64c:	428a      	cmp	r2, r1
   1b64e:	4617      	mov	r7, r2
   1b650:	d96d      	bls.n	1b72e <__udivmoddi4+0xf2>
   1b652:	fab2 fe82 	clz	lr, r2
   1b656:	f1be 0f00 	cmp.w	lr, #0
   1b65a:	d00b      	beq.n	1b674 <__udivmoddi4+0x38>
   1b65c:	f1ce 0c20 	rsb	ip, lr, #32
   1b660:	fa01 f50e 	lsl.w	r5, r1, lr
   1b664:	fa20 fc0c 	lsr.w	ip, r0, ip
   1b668:	fa02 f70e 	lsl.w	r7, r2, lr
   1b66c:	ea4c 0c05 	orr.w	ip, ip, r5
   1b670:	fa00 f40e 	lsl.w	r4, r0, lr
   1b674:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1b678:	0c25      	lsrs	r5, r4, #16
   1b67a:	fbbc f8fa 	udiv	r8, ip, sl
   1b67e:	fa1f f987 	uxth.w	r9, r7
   1b682:	fb0a cc18 	mls	ip, sl, r8, ip
   1b686:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1b68a:	fb08 f309 	mul.w	r3, r8, r9
   1b68e:	42ab      	cmp	r3, r5
   1b690:	d90a      	bls.n	1b6a8 <__udivmoddi4+0x6c>
   1b692:	19ed      	adds	r5, r5, r7
   1b694:	f108 32ff 	add.w	r2, r8, #4294967295
   1b698:	f080 8123 	bcs.w	1b8e2 <__udivmoddi4+0x2a6>
   1b69c:	42ab      	cmp	r3, r5
   1b69e:	f240 8120 	bls.w	1b8e2 <__udivmoddi4+0x2a6>
   1b6a2:	f1a8 0802 	sub.w	r8, r8, #2
   1b6a6:	443d      	add	r5, r7
   1b6a8:	1aed      	subs	r5, r5, r3
   1b6aa:	b2a4      	uxth	r4, r4
   1b6ac:	fbb5 f0fa 	udiv	r0, r5, sl
   1b6b0:	fb0a 5510 	mls	r5, sl, r0, r5
   1b6b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1b6b8:	fb00 f909 	mul.w	r9, r0, r9
   1b6bc:	45a1      	cmp	r9, r4
   1b6be:	d909      	bls.n	1b6d4 <__udivmoddi4+0x98>
   1b6c0:	19e4      	adds	r4, r4, r7
   1b6c2:	f100 33ff 	add.w	r3, r0, #4294967295
   1b6c6:	f080 810a 	bcs.w	1b8de <__udivmoddi4+0x2a2>
   1b6ca:	45a1      	cmp	r9, r4
   1b6cc:	f240 8107 	bls.w	1b8de <__udivmoddi4+0x2a2>
   1b6d0:	3802      	subs	r0, #2
   1b6d2:	443c      	add	r4, r7
   1b6d4:	eba4 0409 	sub.w	r4, r4, r9
   1b6d8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1b6dc:	2100      	movs	r1, #0
   1b6de:	2e00      	cmp	r6, #0
   1b6e0:	d061      	beq.n	1b7a6 <__udivmoddi4+0x16a>
   1b6e2:	fa24 f40e 	lsr.w	r4, r4, lr
   1b6e6:	2300      	movs	r3, #0
   1b6e8:	6034      	str	r4, [r6, #0]
   1b6ea:	6073      	str	r3, [r6, #4]
   1b6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b6f0:	428b      	cmp	r3, r1
   1b6f2:	d907      	bls.n	1b704 <__udivmoddi4+0xc8>
   1b6f4:	2e00      	cmp	r6, #0
   1b6f6:	d054      	beq.n	1b7a2 <__udivmoddi4+0x166>
   1b6f8:	2100      	movs	r1, #0
   1b6fa:	e886 0021 	stmia.w	r6, {r0, r5}
   1b6fe:	4608      	mov	r0, r1
   1b700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b704:	fab3 f183 	clz	r1, r3
   1b708:	2900      	cmp	r1, #0
   1b70a:	f040 808e 	bne.w	1b82a <__udivmoddi4+0x1ee>
   1b70e:	42ab      	cmp	r3, r5
   1b710:	d302      	bcc.n	1b718 <__udivmoddi4+0xdc>
   1b712:	4282      	cmp	r2, r0
   1b714:	f200 80fa 	bhi.w	1b90c <__udivmoddi4+0x2d0>
   1b718:	1a84      	subs	r4, r0, r2
   1b71a:	eb65 0503 	sbc.w	r5, r5, r3
   1b71e:	2001      	movs	r0, #1
   1b720:	46ac      	mov	ip, r5
   1b722:	2e00      	cmp	r6, #0
   1b724:	d03f      	beq.n	1b7a6 <__udivmoddi4+0x16a>
   1b726:	e886 1010 	stmia.w	r6, {r4, ip}
   1b72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b72e:	b912      	cbnz	r2, 1b736 <__udivmoddi4+0xfa>
   1b730:	2701      	movs	r7, #1
   1b732:	fbb7 f7f2 	udiv	r7, r7, r2
   1b736:	fab7 fe87 	clz	lr, r7
   1b73a:	f1be 0f00 	cmp.w	lr, #0
   1b73e:	d134      	bne.n	1b7aa <__udivmoddi4+0x16e>
   1b740:	1beb      	subs	r3, r5, r7
   1b742:	0c3a      	lsrs	r2, r7, #16
   1b744:	fa1f fc87 	uxth.w	ip, r7
   1b748:	2101      	movs	r1, #1
   1b74a:	fbb3 f8f2 	udiv	r8, r3, r2
   1b74e:	0c25      	lsrs	r5, r4, #16
   1b750:	fb02 3318 	mls	r3, r2, r8, r3
   1b754:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1b758:	fb0c f308 	mul.w	r3, ip, r8
   1b75c:	42ab      	cmp	r3, r5
   1b75e:	d907      	bls.n	1b770 <__udivmoddi4+0x134>
   1b760:	19ed      	adds	r5, r5, r7
   1b762:	f108 30ff 	add.w	r0, r8, #4294967295
   1b766:	d202      	bcs.n	1b76e <__udivmoddi4+0x132>
   1b768:	42ab      	cmp	r3, r5
   1b76a:	f200 80d1 	bhi.w	1b910 <__udivmoddi4+0x2d4>
   1b76e:	4680      	mov	r8, r0
   1b770:	1aed      	subs	r5, r5, r3
   1b772:	b2a3      	uxth	r3, r4
   1b774:	fbb5 f0f2 	udiv	r0, r5, r2
   1b778:	fb02 5510 	mls	r5, r2, r0, r5
   1b77c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1b780:	fb0c fc00 	mul.w	ip, ip, r0
   1b784:	45a4      	cmp	ip, r4
   1b786:	d907      	bls.n	1b798 <__udivmoddi4+0x15c>
   1b788:	19e4      	adds	r4, r4, r7
   1b78a:	f100 33ff 	add.w	r3, r0, #4294967295
   1b78e:	d202      	bcs.n	1b796 <__udivmoddi4+0x15a>
   1b790:	45a4      	cmp	ip, r4
   1b792:	f200 80b8 	bhi.w	1b906 <__udivmoddi4+0x2ca>
   1b796:	4618      	mov	r0, r3
   1b798:	eba4 040c 	sub.w	r4, r4, ip
   1b79c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1b7a0:	e79d      	b.n	1b6de <__udivmoddi4+0xa2>
   1b7a2:	4631      	mov	r1, r6
   1b7a4:	4630      	mov	r0, r6
   1b7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b7aa:	f1ce 0420 	rsb	r4, lr, #32
   1b7ae:	fa05 f30e 	lsl.w	r3, r5, lr
   1b7b2:	fa07 f70e 	lsl.w	r7, r7, lr
   1b7b6:	fa20 f804 	lsr.w	r8, r0, r4
   1b7ba:	0c3a      	lsrs	r2, r7, #16
   1b7bc:	fa25 f404 	lsr.w	r4, r5, r4
   1b7c0:	ea48 0803 	orr.w	r8, r8, r3
   1b7c4:	fbb4 f1f2 	udiv	r1, r4, r2
   1b7c8:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1b7cc:	fb02 4411 	mls	r4, r2, r1, r4
   1b7d0:	fa1f fc87 	uxth.w	ip, r7
   1b7d4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1b7d8:	fb01 f30c 	mul.w	r3, r1, ip
   1b7dc:	42ab      	cmp	r3, r5
   1b7de:	fa00 f40e 	lsl.w	r4, r0, lr
   1b7e2:	d909      	bls.n	1b7f8 <__udivmoddi4+0x1bc>
   1b7e4:	19ed      	adds	r5, r5, r7
   1b7e6:	f101 30ff 	add.w	r0, r1, #4294967295
   1b7ea:	f080 808a 	bcs.w	1b902 <__udivmoddi4+0x2c6>
   1b7ee:	42ab      	cmp	r3, r5
   1b7f0:	f240 8087 	bls.w	1b902 <__udivmoddi4+0x2c6>
   1b7f4:	3902      	subs	r1, #2
   1b7f6:	443d      	add	r5, r7
   1b7f8:	1aeb      	subs	r3, r5, r3
   1b7fa:	fa1f f588 	uxth.w	r5, r8
   1b7fe:	fbb3 f0f2 	udiv	r0, r3, r2
   1b802:	fb02 3310 	mls	r3, r2, r0, r3
   1b806:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1b80a:	fb00 f30c 	mul.w	r3, r0, ip
   1b80e:	42ab      	cmp	r3, r5
   1b810:	d907      	bls.n	1b822 <__udivmoddi4+0x1e6>
   1b812:	19ed      	adds	r5, r5, r7
   1b814:	f100 38ff 	add.w	r8, r0, #4294967295
   1b818:	d26f      	bcs.n	1b8fa <__udivmoddi4+0x2be>
   1b81a:	42ab      	cmp	r3, r5
   1b81c:	d96d      	bls.n	1b8fa <__udivmoddi4+0x2be>
   1b81e:	3802      	subs	r0, #2
   1b820:	443d      	add	r5, r7
   1b822:	1aeb      	subs	r3, r5, r3
   1b824:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1b828:	e78f      	b.n	1b74a <__udivmoddi4+0x10e>
   1b82a:	f1c1 0720 	rsb	r7, r1, #32
   1b82e:	fa22 f807 	lsr.w	r8, r2, r7
   1b832:	408b      	lsls	r3, r1
   1b834:	fa05 f401 	lsl.w	r4, r5, r1
   1b838:	ea48 0303 	orr.w	r3, r8, r3
   1b83c:	fa20 fe07 	lsr.w	lr, r0, r7
   1b840:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1b844:	40fd      	lsrs	r5, r7
   1b846:	ea4e 0e04 	orr.w	lr, lr, r4
   1b84a:	fbb5 f9fc 	udiv	r9, r5, ip
   1b84e:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1b852:	fb0c 5519 	mls	r5, ip, r9, r5
   1b856:	fa1f f883 	uxth.w	r8, r3
   1b85a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1b85e:	fb09 f408 	mul.w	r4, r9, r8
   1b862:	42ac      	cmp	r4, r5
   1b864:	fa02 f201 	lsl.w	r2, r2, r1
   1b868:	fa00 fa01 	lsl.w	sl, r0, r1
   1b86c:	d908      	bls.n	1b880 <__udivmoddi4+0x244>
   1b86e:	18ed      	adds	r5, r5, r3
   1b870:	f109 30ff 	add.w	r0, r9, #4294967295
   1b874:	d243      	bcs.n	1b8fe <__udivmoddi4+0x2c2>
   1b876:	42ac      	cmp	r4, r5
   1b878:	d941      	bls.n	1b8fe <__udivmoddi4+0x2c2>
   1b87a:	f1a9 0902 	sub.w	r9, r9, #2
   1b87e:	441d      	add	r5, r3
   1b880:	1b2d      	subs	r5, r5, r4
   1b882:	fa1f fe8e 	uxth.w	lr, lr
   1b886:	fbb5 f0fc 	udiv	r0, r5, ip
   1b88a:	fb0c 5510 	mls	r5, ip, r0, r5
   1b88e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1b892:	fb00 f808 	mul.w	r8, r0, r8
   1b896:	45a0      	cmp	r8, r4
   1b898:	d907      	bls.n	1b8aa <__udivmoddi4+0x26e>
   1b89a:	18e4      	adds	r4, r4, r3
   1b89c:	f100 35ff 	add.w	r5, r0, #4294967295
   1b8a0:	d229      	bcs.n	1b8f6 <__udivmoddi4+0x2ba>
   1b8a2:	45a0      	cmp	r8, r4
   1b8a4:	d927      	bls.n	1b8f6 <__udivmoddi4+0x2ba>
   1b8a6:	3802      	subs	r0, #2
   1b8a8:	441c      	add	r4, r3
   1b8aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1b8ae:	eba4 0408 	sub.w	r4, r4, r8
   1b8b2:	fba0 8902 	umull	r8, r9, r0, r2
   1b8b6:	454c      	cmp	r4, r9
   1b8b8:	46c6      	mov	lr, r8
   1b8ba:	464d      	mov	r5, r9
   1b8bc:	d315      	bcc.n	1b8ea <__udivmoddi4+0x2ae>
   1b8be:	d012      	beq.n	1b8e6 <__udivmoddi4+0x2aa>
   1b8c0:	b156      	cbz	r6, 1b8d8 <__udivmoddi4+0x29c>
   1b8c2:	ebba 030e 	subs.w	r3, sl, lr
   1b8c6:	eb64 0405 	sbc.w	r4, r4, r5
   1b8ca:	fa04 f707 	lsl.w	r7, r4, r7
   1b8ce:	40cb      	lsrs	r3, r1
   1b8d0:	431f      	orrs	r7, r3
   1b8d2:	40cc      	lsrs	r4, r1
   1b8d4:	6037      	str	r7, [r6, #0]
   1b8d6:	6074      	str	r4, [r6, #4]
   1b8d8:	2100      	movs	r1, #0
   1b8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b8de:	4618      	mov	r0, r3
   1b8e0:	e6f8      	b.n	1b6d4 <__udivmoddi4+0x98>
   1b8e2:	4690      	mov	r8, r2
   1b8e4:	e6e0      	b.n	1b6a8 <__udivmoddi4+0x6c>
   1b8e6:	45c2      	cmp	sl, r8
   1b8e8:	d2ea      	bcs.n	1b8c0 <__udivmoddi4+0x284>
   1b8ea:	ebb8 0e02 	subs.w	lr, r8, r2
   1b8ee:	eb69 0503 	sbc.w	r5, r9, r3
   1b8f2:	3801      	subs	r0, #1
   1b8f4:	e7e4      	b.n	1b8c0 <__udivmoddi4+0x284>
   1b8f6:	4628      	mov	r0, r5
   1b8f8:	e7d7      	b.n	1b8aa <__udivmoddi4+0x26e>
   1b8fa:	4640      	mov	r0, r8
   1b8fc:	e791      	b.n	1b822 <__udivmoddi4+0x1e6>
   1b8fe:	4681      	mov	r9, r0
   1b900:	e7be      	b.n	1b880 <__udivmoddi4+0x244>
   1b902:	4601      	mov	r1, r0
   1b904:	e778      	b.n	1b7f8 <__udivmoddi4+0x1bc>
   1b906:	3802      	subs	r0, #2
   1b908:	443c      	add	r4, r7
   1b90a:	e745      	b.n	1b798 <__udivmoddi4+0x15c>
   1b90c:	4608      	mov	r0, r1
   1b90e:	e708      	b.n	1b722 <__udivmoddi4+0xe6>
   1b910:	f1a8 0802 	sub.w	r8, r8, #2
   1b914:	443d      	add	r5, r7
   1b916:	e72b      	b.n	1b770 <__udivmoddi4+0x134>

0001b918 <__aeabi_idiv0>:
   1b918:	4770      	bx	lr
   1b91a:	bf00      	nop

0001b91c <ctime>:
   1b91c:	b508      	push	{r3, lr}
   1b91e:	f000 f84d 	bl	1b9bc <localtime>
   1b922:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b926:	f000 bdcf 	b.w	1c4c8 <asctime>
   1b92a:	bf00      	nop

0001b92c <__cxa_atexit>:
   1b92c:	4613      	mov	r3, r2
   1b92e:	460a      	mov	r2, r1
   1b930:	4601      	mov	r1, r0
   1b932:	2002      	movs	r0, #2
   1b934:	f000 bd5c 	b.w	1c3f0 <__register_exitproc>

0001b938 <difftime>:
   1b938:	b508      	push	{r3, lr}
   1b93a:	1a40      	subs	r0, r0, r1
   1b93c:	f7ff f83c 	bl	1a9b8 <__aeabi_i2d>
   1b940:	bd08      	pop	{r3, pc}
   1b942:	bf00      	nop

0001b944 <__errno>:
   1b944:	4b01      	ldr	r3, [pc, #4]	; (1b94c <__errno+0x8>)
   1b946:	6818      	ldr	r0, [r3, #0]
   1b948:	4770      	bx	lr
   1b94a:	bf00      	nop
   1b94c:	20000248 	.word	0x20000248

0001b950 <ffs>:
   1b950:	b140      	cbz	r0, 1b964 <ffs+0x14>
   1b952:	2300      	movs	r3, #0
   1b954:	fa40 f103 	asr.w	r1, r0, r3
   1b958:	1c5a      	adds	r2, r3, #1
   1b95a:	07c9      	lsls	r1, r1, #31
   1b95c:	4613      	mov	r3, r2
   1b95e:	d5f9      	bpl.n	1b954 <ffs+0x4>
   1b960:	4610      	mov	r0, r2
   1b962:	4770      	bx	lr
   1b964:	4602      	mov	r2, r0
   1b966:	4610      	mov	r0, r2
   1b968:	4770      	bx	lr
   1b96a:	bf00      	nop

0001b96c <__libc_init_array>:
   1b96c:	b570      	push	{r4, r5, r6, lr}
   1b96e:	4e0f      	ldr	r6, [pc, #60]	; (1b9ac <__libc_init_array+0x40>)
   1b970:	4d0f      	ldr	r5, [pc, #60]	; (1b9b0 <__libc_init_array+0x44>)
   1b972:	1b76      	subs	r6, r6, r5
   1b974:	10b6      	asrs	r6, r6, #2
   1b976:	bf18      	it	ne
   1b978:	2400      	movne	r4, #0
   1b97a:	d005      	beq.n	1b988 <__libc_init_array+0x1c>
   1b97c:	3401      	adds	r4, #1
   1b97e:	f855 3b04 	ldr.w	r3, [r5], #4
   1b982:	4798      	blx	r3
   1b984:	42a6      	cmp	r6, r4
   1b986:	d1f9      	bne.n	1b97c <__libc_init_array+0x10>
   1b988:	4e0a      	ldr	r6, [pc, #40]	; (1b9b4 <__libc_init_array+0x48>)
   1b98a:	4d0b      	ldr	r5, [pc, #44]	; (1b9b8 <__libc_init_array+0x4c>)
   1b98c:	1b76      	subs	r6, r6, r5
   1b98e:	f006 fa49 	bl	21e24 <_init>
   1b992:	10b6      	asrs	r6, r6, #2
   1b994:	bf18      	it	ne
   1b996:	2400      	movne	r4, #0
   1b998:	d006      	beq.n	1b9a8 <__libc_init_array+0x3c>
   1b99a:	3401      	adds	r4, #1
   1b99c:	f855 3b04 	ldr.w	r3, [r5], #4
   1b9a0:	4798      	blx	r3
   1b9a2:	42a6      	cmp	r6, r4
   1b9a4:	d1f9      	bne.n	1b99a <__libc_init_array+0x2e>
   1b9a6:	bd70      	pop	{r4, r5, r6, pc}
   1b9a8:	bd70      	pop	{r4, r5, r6, pc}
   1b9aa:	bf00      	nop
   1b9ac:	00021e30 	.word	0x00021e30
   1b9b0:	00021e30 	.word	0x00021e30
   1b9b4:	00021ea0 	.word	0x00021ea0
   1b9b8:	00021e30 	.word	0x00021e30

0001b9bc <localtime>:
   1b9bc:	4b02      	ldr	r3, [pc, #8]	; (1b9c8 <localtime+0xc>)
   1b9be:	6819      	ldr	r1, [r3, #0]
   1b9c0:	317c      	adds	r1, #124	; 0x7c
   1b9c2:	f000 b803 	b.w	1b9cc <localtime_r>
   1b9c6:	bf00      	nop
   1b9c8:	20000248 	.word	0x20000248

0001b9cc <localtime_r>:
   1b9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b9d0:	460c      	mov	r4, r1
   1b9d2:	4607      	mov	r7, r0
   1b9d4:	f000 fe0c 	bl	1c5f0 <__gettzinfo>
   1b9d8:	4621      	mov	r1, r4
   1b9da:	4680      	mov	r8, r0
   1b9dc:	4638      	mov	r0, r7
   1b9de:	f000 fe0b 	bl	1c5f8 <gmtime_r>
   1b9e2:	6946      	ldr	r6, [r0, #20]
   1b9e4:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1b9e8:	07b1      	lsls	r1, r6, #30
   1b9ea:	4604      	mov	r4, r0
   1b9ec:	f000 80b9 	beq.w	1bb62 <localtime_r+0x196>
   1b9f0:	17f5      	asrs	r5, r6, #31
   1b9f2:	4b7f      	ldr	r3, [pc, #508]	; (1bbf0 <localtime_r+0x224>)
   1b9f4:	fb83 2306 	smull	r2, r3, r3, r6
   1b9f8:	ebc5 15e3 	rsb	r5, r5, r3, asr #7
   1b9fc:	f44f 73c8 	mov.w	r3, #400	; 0x190
   1ba00:	fb03 6515 	mls	r5, r3, r5, r6
   1ba04:	2d00      	cmp	r5, #0
   1ba06:	bf0c      	ite	eq
   1ba08:	2530      	moveq	r5, #48	; 0x30
   1ba0a:	2500      	movne	r5, #0
   1ba0c:	4b79      	ldr	r3, [pc, #484]	; (1bbf4 <localtime_r+0x228>)
   1ba0e:	441d      	add	r5, r3
   1ba10:	f000 fb46 	bl	1c0a0 <__tz_lock>
   1ba14:	f000 fb50 	bl	1c0b8 <_tzset_unlocked>
   1ba18:	4b77      	ldr	r3, [pc, #476]	; (1bbf8 <localtime_r+0x22c>)
   1ba1a:	681b      	ldr	r3, [r3, #0]
   1ba1c:	b343      	cbz	r3, 1ba70 <localtime_r+0xa4>
   1ba1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ba22:	429e      	cmp	r6, r3
   1ba24:	d005      	beq.n	1ba32 <localtime_r+0x66>
   1ba26:	4630      	mov	r0, r6
   1ba28:	f000 fa78 	bl	1bf1c <__tzcalc_limits>
   1ba2c:	2800      	cmp	r0, #0
   1ba2e:	f000 80a6 	beq.w	1bb7e <localtime_r+0x1b2>
   1ba32:	f8d8 3000 	ldr.w	r3, [r8]
   1ba36:	b983      	cbnz	r3, 1ba5a <localtime_r+0x8e>
   1ba38:	683b      	ldr	r3, [r7, #0]
   1ba3a:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1ba3e:	4293      	cmp	r3, r2
   1ba40:	f280 80a1 	bge.w	1bb86 <localtime_r+0x1ba>
   1ba44:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   1ba48:	4293      	cmp	r3, r2
   1ba4a:	bfb4      	ite	lt
   1ba4c:	2301      	movlt	r3, #1
   1ba4e:	2300      	movge	r3, #0
   1ba50:	6223      	str	r3, [r4, #32]
   1ba52:	da0e      	bge.n	1ba72 <localtime_r+0xa6>
   1ba54:	f8d8 603c 	ldr.w	r6, [r8, #60]	; 0x3c
   1ba58:	e00d      	b.n	1ba76 <localtime_r+0xaa>
   1ba5a:	683b      	ldr	r3, [r7, #0]
   1ba5c:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1ba60:	4293      	cmp	r3, r2
   1ba62:	db04      	blt.n	1ba6e <localtime_r+0xa2>
   1ba64:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   1ba68:	4293      	cmp	r3, r2
   1ba6a:	f2c0 808c 	blt.w	1bb86 <localtime_r+0x1ba>
   1ba6e:	2300      	movs	r3, #0
   1ba70:	6223      	str	r3, [r4, #32]
   1ba72:	f8d8 6020 	ldr.w	r6, [r8, #32]
   1ba76:	4a61      	ldr	r2, [pc, #388]	; (1bbfc <localtime_r+0x230>)
   1ba78:	4f61      	ldr	r7, [pc, #388]	; (1bc00 <localtime_r+0x234>)
   1ba7a:	68a1      	ldr	r1, [r4, #8]
   1ba7c:	fb82 3206 	smull	r3, r2, r2, r6
   1ba80:	4432      	add	r2, r6
   1ba82:	17f3      	asrs	r3, r6, #31
   1ba84:	12d2      	asrs	r2, r2, #11
   1ba86:	1ad0      	subs	r0, r2, r3
   1ba88:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   1ba8c:	fb0e 6010 	mls	r0, lr, r0, r6
   1ba90:	fb87 6700 	smull	r6, r7, r7, r0
   1ba94:	183e      	adds	r6, r7, r0
   1ba96:	17c7      	asrs	r7, r0, #31
   1ba98:	ebc7 1766 	rsb	r7, r7, r6, asr #5
   1ba9c:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
   1baa0:	6826      	ldr	r6, [r4, #0]
   1baa2:	1ad3      	subs	r3, r2, r3
   1baa4:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
   1baa8:	6862      	ldr	r2, [r4, #4]
   1baaa:	1a30      	subs	r0, r6, r0
   1baac:	1acb      	subs	r3, r1, r3
   1baae:	1bd2      	subs	r2, r2, r7
   1bab0:	283b      	cmp	r0, #59	; 0x3b
   1bab2:	e884 000d 	stmia.w	r4, {r0, r2, r3}
   1bab6:	dd4d      	ble.n	1bb54 <localtime_r+0x188>
   1bab8:	3201      	adds	r2, #1
   1baba:	383c      	subs	r0, #60	; 0x3c
   1babc:	e884 0005 	stmia.w	r4, {r0, r2}
   1bac0:	2a3b      	cmp	r2, #59	; 0x3b
   1bac2:	dd40      	ble.n	1bb46 <localtime_r+0x17a>
   1bac4:	3301      	adds	r3, #1
   1bac6:	3a3c      	subs	r2, #60	; 0x3c
   1bac8:	60a3      	str	r3, [r4, #8]
   1baca:	6062      	str	r2, [r4, #4]
   1bacc:	2b17      	cmp	r3, #23
   1bace:	dd1d      	ble.n	1bb0c <localtime_r+0x140>
   1bad0:	69a2      	ldr	r2, [r4, #24]
   1bad2:	69e1      	ldr	r1, [r4, #28]
   1bad4:	3201      	adds	r2, #1
   1bad6:	2a06      	cmp	r2, #6
   1bad8:	bfc8      	it	gt
   1bada:	2200      	movgt	r2, #0
   1badc:	61a2      	str	r2, [r4, #24]
   1bade:	68e2      	ldr	r2, [r4, #12]
   1bae0:	3101      	adds	r1, #1
   1bae2:	61e1      	str	r1, [r4, #28]
   1bae4:	3b18      	subs	r3, #24
   1bae6:	3201      	adds	r2, #1
   1bae8:	6921      	ldr	r1, [r4, #16]
   1baea:	60a3      	str	r3, [r4, #8]
   1baec:	60e2      	str	r2, [r4, #12]
   1baee:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1baf2:	429a      	cmp	r2, r3
   1baf4:	dd05      	ble.n	1bb02 <localtime_r+0x136>
   1baf6:	3101      	adds	r1, #1
   1baf8:	1ad2      	subs	r2, r2, r3
   1bafa:	290c      	cmp	r1, #12
   1bafc:	60e2      	str	r2, [r4, #12]
   1bafe:	d045      	beq.n	1bb8c <localtime_r+0x1c0>
   1bb00:	6121      	str	r1, [r4, #16]
   1bb02:	f000 fad3 	bl	1c0ac <__tz_unlock>
   1bb06:	4620      	mov	r0, r4
   1bb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bb0c:	2b00      	cmp	r3, #0
   1bb0e:	daf8      	bge.n	1bb02 <localtime_r+0x136>
   1bb10:	69a2      	ldr	r2, [r4, #24]
   1bb12:	69e1      	ldr	r1, [r4, #28]
   1bb14:	3a01      	subs	r2, #1
   1bb16:	bf48      	it	mi
   1bb18:	2206      	movmi	r2, #6
   1bb1a:	61a2      	str	r2, [r4, #24]
   1bb1c:	68e2      	ldr	r2, [r4, #12]
   1bb1e:	3901      	subs	r1, #1
   1bb20:	3318      	adds	r3, #24
   1bb22:	3a01      	subs	r2, #1
   1bb24:	61e1      	str	r1, [r4, #28]
   1bb26:	60a3      	str	r3, [r4, #8]
   1bb28:	60e2      	str	r2, [r4, #12]
   1bb2a:	2a00      	cmp	r2, #0
   1bb2c:	d1e9      	bne.n	1bb02 <localtime_r+0x136>
   1bb2e:	6923      	ldr	r3, [r4, #16]
   1bb30:	3b01      	subs	r3, #1
   1bb32:	d432      	bmi.n	1bb9a <localtime_r+0x1ce>
   1bb34:	6123      	str	r3, [r4, #16]
   1bb36:	009b      	lsls	r3, r3, #2
   1bb38:	58eb      	ldr	r3, [r5, r3]
   1bb3a:	60e3      	str	r3, [r4, #12]
   1bb3c:	f000 fab6 	bl	1c0ac <__tz_unlock>
   1bb40:	4620      	mov	r0, r4
   1bb42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bb46:	2a00      	cmp	r2, #0
   1bb48:	dac0      	bge.n	1bacc <localtime_r+0x100>
   1bb4a:	3b01      	subs	r3, #1
   1bb4c:	323c      	adds	r2, #60	; 0x3c
   1bb4e:	60a3      	str	r3, [r4, #8]
   1bb50:	6062      	str	r2, [r4, #4]
   1bb52:	e7bb      	b.n	1bacc <localtime_r+0x100>
   1bb54:	2800      	cmp	r0, #0
   1bb56:	dab3      	bge.n	1bac0 <localtime_r+0xf4>
   1bb58:	3a01      	subs	r2, #1
   1bb5a:	303c      	adds	r0, #60	; 0x3c
   1bb5c:	e884 0005 	stmia.w	r4, {r0, r2}
   1bb60:	e7ae      	b.n	1bac0 <localtime_r+0xf4>
   1bb62:	4b23      	ldr	r3, [pc, #140]	; (1bbf0 <localtime_r+0x224>)
   1bb64:	17f5      	asrs	r5, r6, #31
   1bb66:	fb83 2306 	smull	r2, r3, r3, r6
   1bb6a:	ebc5 1363 	rsb	r3, r5, r3, asr #5
   1bb6e:	2264      	movs	r2, #100	; 0x64
   1bb70:	fb02 6313 	mls	r3, r2, r3, r6
   1bb74:	2b00      	cmp	r3, #0
   1bb76:	f43f af3c 	beq.w	1b9f2 <localtime_r+0x26>
   1bb7a:	2530      	movs	r5, #48	; 0x30
   1bb7c:	e746      	b.n	1ba0c <localtime_r+0x40>
   1bb7e:	f04f 33ff 	mov.w	r3, #4294967295
   1bb82:	6223      	str	r3, [r4, #32]
   1bb84:	e775      	b.n	1ba72 <localtime_r+0xa6>
   1bb86:	2301      	movs	r3, #1
   1bb88:	6223      	str	r3, [r4, #32]
   1bb8a:	e763      	b.n	1ba54 <localtime_r+0x88>
   1bb8c:	6963      	ldr	r3, [r4, #20]
   1bb8e:	2200      	movs	r2, #0
   1bb90:	3301      	adds	r3, #1
   1bb92:	6163      	str	r3, [r4, #20]
   1bb94:	6122      	str	r2, [r4, #16]
   1bb96:	61e2      	str	r2, [r4, #28]
   1bb98:	e7b3      	b.n	1bb02 <localtime_r+0x136>
   1bb9a:	6963      	ldr	r3, [r4, #20]
   1bb9c:	1e5a      	subs	r2, r3, #1
   1bb9e:	210b      	movs	r1, #11
   1bba0:	6162      	str	r2, [r4, #20]
   1bba2:	0792      	lsls	r2, r2, #30
   1bba4:	6121      	str	r1, [r4, #16]
   1bba6:	d013      	beq.n	1bbd0 <localtime_r+0x204>
   1bba8:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   1bbac:	17d3      	asrs	r3, r2, #31
   1bbae:	4910      	ldr	r1, [pc, #64]	; (1bbf0 <localtime_r+0x224>)
   1bbb0:	fb81 0102 	smull	r0, r1, r1, r2
   1bbb4:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
   1bbb8:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1bbbc:	fb01 2313 	mls	r3, r1, r3, r2
   1bbc0:	fab3 f383 	clz	r3, r3
   1bbc4:	095b      	lsrs	r3, r3, #5
   1bbc6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   1bbca:	61e3      	str	r3, [r4, #28]
   1bbcc:	232c      	movs	r3, #44	; 0x2c
   1bbce:	e7b3      	b.n	1bb38 <localtime_r+0x16c>
   1bbd0:	4907      	ldr	r1, [pc, #28]	; (1bbf0 <localtime_r+0x224>)
   1bbd2:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   1bbd6:	fb81 3102 	smull	r3, r1, r1, r2
   1bbda:	17d3      	asrs	r3, r2, #31
   1bbdc:	ebc3 1161 	rsb	r1, r3, r1, asr #5
   1bbe0:	2064      	movs	r0, #100	; 0x64
   1bbe2:	fb00 2111 	mls	r1, r0, r1, r2
   1bbe6:	2900      	cmp	r1, #0
   1bbe8:	d0e1      	beq.n	1bbae <localtime_r+0x1e2>
   1bbea:	f240 136d 	movw	r3, #365	; 0x16d
   1bbee:	e7ec      	b.n	1bbca <localtime_r+0x1fe>
   1bbf0:	51eb851f 	.word	0x51eb851f
   1bbf4:	00021b8c 	.word	0x00021b8c
   1bbf8:	2000a8c8 	.word	0x2000a8c8
   1bbfc:	91a2b3c5 	.word	0x91a2b3c5
   1bc00:	88888889 	.word	0x88888889

0001bc04 <memcpy>:
   1bc04:	4684      	mov	ip, r0
   1bc06:	ea41 0300 	orr.w	r3, r1, r0
   1bc0a:	f013 0303 	ands.w	r3, r3, #3
   1bc0e:	d16d      	bne.n	1bcec <memcpy+0xe8>
   1bc10:	3a40      	subs	r2, #64	; 0x40
   1bc12:	d341      	bcc.n	1bc98 <memcpy+0x94>
   1bc14:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc18:	f840 3b04 	str.w	r3, [r0], #4
   1bc1c:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc20:	f840 3b04 	str.w	r3, [r0], #4
   1bc24:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc28:	f840 3b04 	str.w	r3, [r0], #4
   1bc2c:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc30:	f840 3b04 	str.w	r3, [r0], #4
   1bc34:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc38:	f840 3b04 	str.w	r3, [r0], #4
   1bc3c:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc40:	f840 3b04 	str.w	r3, [r0], #4
   1bc44:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc48:	f840 3b04 	str.w	r3, [r0], #4
   1bc4c:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc50:	f840 3b04 	str.w	r3, [r0], #4
   1bc54:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc58:	f840 3b04 	str.w	r3, [r0], #4
   1bc5c:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc60:	f840 3b04 	str.w	r3, [r0], #4
   1bc64:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc68:	f840 3b04 	str.w	r3, [r0], #4
   1bc6c:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc70:	f840 3b04 	str.w	r3, [r0], #4
   1bc74:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc78:	f840 3b04 	str.w	r3, [r0], #4
   1bc7c:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc80:	f840 3b04 	str.w	r3, [r0], #4
   1bc84:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc88:	f840 3b04 	str.w	r3, [r0], #4
   1bc8c:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc90:	f840 3b04 	str.w	r3, [r0], #4
   1bc94:	3a40      	subs	r2, #64	; 0x40
   1bc96:	d2bd      	bcs.n	1bc14 <memcpy+0x10>
   1bc98:	3230      	adds	r2, #48	; 0x30
   1bc9a:	d311      	bcc.n	1bcc0 <memcpy+0xbc>
   1bc9c:	f851 3b04 	ldr.w	r3, [r1], #4
   1bca0:	f840 3b04 	str.w	r3, [r0], #4
   1bca4:	f851 3b04 	ldr.w	r3, [r1], #4
   1bca8:	f840 3b04 	str.w	r3, [r0], #4
   1bcac:	f851 3b04 	ldr.w	r3, [r1], #4
   1bcb0:	f840 3b04 	str.w	r3, [r0], #4
   1bcb4:	f851 3b04 	ldr.w	r3, [r1], #4
   1bcb8:	f840 3b04 	str.w	r3, [r0], #4
   1bcbc:	3a10      	subs	r2, #16
   1bcbe:	d2ed      	bcs.n	1bc9c <memcpy+0x98>
   1bcc0:	320c      	adds	r2, #12
   1bcc2:	d305      	bcc.n	1bcd0 <memcpy+0xcc>
   1bcc4:	f851 3b04 	ldr.w	r3, [r1], #4
   1bcc8:	f840 3b04 	str.w	r3, [r0], #4
   1bccc:	3a04      	subs	r2, #4
   1bcce:	d2f9      	bcs.n	1bcc4 <memcpy+0xc0>
   1bcd0:	3204      	adds	r2, #4
   1bcd2:	d008      	beq.n	1bce6 <memcpy+0xe2>
   1bcd4:	07d2      	lsls	r2, r2, #31
   1bcd6:	bf1c      	itt	ne
   1bcd8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1bcdc:	f800 3b01 	strbne.w	r3, [r0], #1
   1bce0:	d301      	bcc.n	1bce6 <memcpy+0xe2>
   1bce2:	880b      	ldrh	r3, [r1, #0]
   1bce4:	8003      	strh	r3, [r0, #0]
   1bce6:	4660      	mov	r0, ip
   1bce8:	4770      	bx	lr
   1bcea:	bf00      	nop
   1bcec:	2a08      	cmp	r2, #8
   1bcee:	d313      	bcc.n	1bd18 <memcpy+0x114>
   1bcf0:	078b      	lsls	r3, r1, #30
   1bcf2:	d08d      	beq.n	1bc10 <memcpy+0xc>
   1bcf4:	f010 0303 	ands.w	r3, r0, #3
   1bcf8:	d08a      	beq.n	1bc10 <memcpy+0xc>
   1bcfa:	f1c3 0304 	rsb	r3, r3, #4
   1bcfe:	1ad2      	subs	r2, r2, r3
   1bd00:	07db      	lsls	r3, r3, #31
   1bd02:	bf1c      	itt	ne
   1bd04:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1bd08:	f800 3b01 	strbne.w	r3, [r0], #1
   1bd0c:	d380      	bcc.n	1bc10 <memcpy+0xc>
   1bd0e:	f831 3b02 	ldrh.w	r3, [r1], #2
   1bd12:	f820 3b02 	strh.w	r3, [r0], #2
   1bd16:	e77b      	b.n	1bc10 <memcpy+0xc>
   1bd18:	3a04      	subs	r2, #4
   1bd1a:	d3d9      	bcc.n	1bcd0 <memcpy+0xcc>
   1bd1c:	3a01      	subs	r2, #1
   1bd1e:	f811 3b01 	ldrb.w	r3, [r1], #1
   1bd22:	f800 3b01 	strb.w	r3, [r0], #1
   1bd26:	d2f9      	bcs.n	1bd1c <memcpy+0x118>
   1bd28:	780b      	ldrb	r3, [r1, #0]
   1bd2a:	7003      	strb	r3, [r0, #0]
   1bd2c:	784b      	ldrb	r3, [r1, #1]
   1bd2e:	7043      	strb	r3, [r0, #1]
   1bd30:	788b      	ldrb	r3, [r1, #2]
   1bd32:	7083      	strb	r3, [r0, #2]
   1bd34:	4660      	mov	r0, ip
   1bd36:	4770      	bx	lr

0001bd38 <memset>:
   1bd38:	b470      	push	{r4, r5, r6}
   1bd3a:	0786      	lsls	r6, r0, #30
   1bd3c:	d046      	beq.n	1bdcc <memset+0x94>
   1bd3e:	1e54      	subs	r4, r2, #1
   1bd40:	2a00      	cmp	r2, #0
   1bd42:	d041      	beq.n	1bdc8 <memset+0x90>
   1bd44:	b2ca      	uxtb	r2, r1
   1bd46:	4603      	mov	r3, r0
   1bd48:	e002      	b.n	1bd50 <memset+0x18>
   1bd4a:	f114 34ff 	adds.w	r4, r4, #4294967295
   1bd4e:	d33b      	bcc.n	1bdc8 <memset+0x90>
   1bd50:	f803 2b01 	strb.w	r2, [r3], #1
   1bd54:	079d      	lsls	r5, r3, #30
   1bd56:	d1f8      	bne.n	1bd4a <memset+0x12>
   1bd58:	2c03      	cmp	r4, #3
   1bd5a:	d92e      	bls.n	1bdba <memset+0x82>
   1bd5c:	b2cd      	uxtb	r5, r1
   1bd5e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1bd62:	2c0f      	cmp	r4, #15
   1bd64:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1bd68:	d919      	bls.n	1bd9e <memset+0x66>
   1bd6a:	f103 0210 	add.w	r2, r3, #16
   1bd6e:	4626      	mov	r6, r4
   1bd70:	3e10      	subs	r6, #16
   1bd72:	2e0f      	cmp	r6, #15
   1bd74:	f842 5c10 	str.w	r5, [r2, #-16]
   1bd78:	f842 5c0c 	str.w	r5, [r2, #-12]
   1bd7c:	f842 5c08 	str.w	r5, [r2, #-8]
   1bd80:	f842 5c04 	str.w	r5, [r2, #-4]
   1bd84:	f102 0210 	add.w	r2, r2, #16
   1bd88:	d8f2      	bhi.n	1bd70 <memset+0x38>
   1bd8a:	f1a4 0210 	sub.w	r2, r4, #16
   1bd8e:	f022 020f 	bic.w	r2, r2, #15
   1bd92:	f004 040f 	and.w	r4, r4, #15
   1bd96:	3210      	adds	r2, #16
   1bd98:	2c03      	cmp	r4, #3
   1bd9a:	4413      	add	r3, r2
   1bd9c:	d90d      	bls.n	1bdba <memset+0x82>
   1bd9e:	461e      	mov	r6, r3
   1bda0:	4622      	mov	r2, r4
   1bda2:	3a04      	subs	r2, #4
   1bda4:	2a03      	cmp	r2, #3
   1bda6:	f846 5b04 	str.w	r5, [r6], #4
   1bdaa:	d8fa      	bhi.n	1bda2 <memset+0x6a>
   1bdac:	1f22      	subs	r2, r4, #4
   1bdae:	f022 0203 	bic.w	r2, r2, #3
   1bdb2:	3204      	adds	r2, #4
   1bdb4:	4413      	add	r3, r2
   1bdb6:	f004 0403 	and.w	r4, r4, #3
   1bdba:	b12c      	cbz	r4, 1bdc8 <memset+0x90>
   1bdbc:	b2c9      	uxtb	r1, r1
   1bdbe:	441c      	add	r4, r3
   1bdc0:	f803 1b01 	strb.w	r1, [r3], #1
   1bdc4:	429c      	cmp	r4, r3
   1bdc6:	d1fb      	bne.n	1bdc0 <memset+0x88>
   1bdc8:	bc70      	pop	{r4, r5, r6}
   1bdca:	4770      	bx	lr
   1bdcc:	4614      	mov	r4, r2
   1bdce:	4603      	mov	r3, r0
   1bdd0:	e7c2      	b.n	1bd58 <memset+0x20>
   1bdd2:	bf00      	nop

0001bdd4 <rand>:
   1bdd4:	b410      	push	{r4}
   1bdd6:	4b0c      	ldr	r3, [pc, #48]	; (1be08 <rand+0x34>)
   1bdd8:	480c      	ldr	r0, [pc, #48]	; (1be0c <rand+0x38>)
   1bdda:	6819      	ldr	r1, [r3, #0]
   1bddc:	4c0c      	ldr	r4, [pc, #48]	; (1be10 <rand+0x3c>)
   1bdde:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   1bde2:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   1bde6:	fb00 f002 	mul.w	r0, r0, r2
   1bdea:	fb04 0003 	mla	r0, r4, r3, r0
   1bdee:	fba2 2304 	umull	r2, r3, r2, r4
   1bdf2:	4403      	add	r3, r0
   1bdf4:	3201      	adds	r2, #1
   1bdf6:	f143 0300 	adc.w	r3, r3, #0
   1bdfa:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   1bdfe:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1be02:	bc10      	pop	{r4}
   1be04:	4770      	bx	lr
   1be06:	bf00      	nop
   1be08:	20000248 	.word	0x20000248
   1be0c:	5851f42d 	.word	0x5851f42d
   1be10:	4c957f2d 	.word	0x4c957f2d
	...

0001be40 <strlen>:
   1be40:	f890 f000 	pld	[r0]
   1be44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1be48:	f020 0107 	bic.w	r1, r0, #7
   1be4c:	f06f 0c00 	mvn.w	ip, #0
   1be50:	f010 0407 	ands.w	r4, r0, #7
   1be54:	f891 f020 	pld	[r1, #32]
   1be58:	f040 8049 	bne.w	1beee <strlen+0xae>
   1be5c:	f04f 0400 	mov.w	r4, #0
   1be60:	f06f 0007 	mvn.w	r0, #7
   1be64:	e9d1 2300 	ldrd	r2, r3, [r1]
   1be68:	f891 f040 	pld	[r1, #64]	; 0x40
   1be6c:	f100 0008 	add.w	r0, r0, #8
   1be70:	fa82 f24c 	uadd8	r2, r2, ip
   1be74:	faa4 f28c 	sel	r2, r4, ip
   1be78:	fa83 f34c 	uadd8	r3, r3, ip
   1be7c:	faa2 f38c 	sel	r3, r2, ip
   1be80:	bb4b      	cbnz	r3, 1bed6 <strlen+0x96>
   1be82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1be86:	fa82 f24c 	uadd8	r2, r2, ip
   1be8a:	f100 0008 	add.w	r0, r0, #8
   1be8e:	faa4 f28c 	sel	r2, r4, ip
   1be92:	fa83 f34c 	uadd8	r3, r3, ip
   1be96:	faa2 f38c 	sel	r3, r2, ip
   1be9a:	b9e3      	cbnz	r3, 1bed6 <strlen+0x96>
   1be9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1bea0:	fa82 f24c 	uadd8	r2, r2, ip
   1bea4:	f100 0008 	add.w	r0, r0, #8
   1bea8:	faa4 f28c 	sel	r2, r4, ip
   1beac:	fa83 f34c 	uadd8	r3, r3, ip
   1beb0:	faa2 f38c 	sel	r3, r2, ip
   1beb4:	b97b      	cbnz	r3, 1bed6 <strlen+0x96>
   1beb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1beba:	f101 0120 	add.w	r1, r1, #32
   1bebe:	fa82 f24c 	uadd8	r2, r2, ip
   1bec2:	f100 0008 	add.w	r0, r0, #8
   1bec6:	faa4 f28c 	sel	r2, r4, ip
   1beca:	fa83 f34c 	uadd8	r3, r3, ip
   1bece:	faa2 f38c 	sel	r3, r2, ip
   1bed2:	2b00      	cmp	r3, #0
   1bed4:	d0c6      	beq.n	1be64 <strlen+0x24>
   1bed6:	2a00      	cmp	r2, #0
   1bed8:	bf04      	itt	eq
   1beda:	3004      	addeq	r0, #4
   1bedc:	461a      	moveq	r2, r3
   1bede:	ba12      	rev	r2, r2
   1bee0:	fab2 f282 	clz	r2, r2
   1bee4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1bee8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1beec:	4770      	bx	lr
   1beee:	e9d1 2300 	ldrd	r2, r3, [r1]
   1bef2:	f004 0503 	and.w	r5, r4, #3
   1bef6:	f1c4 0000 	rsb	r0, r4, #0
   1befa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1befe:	f014 0f04 	tst.w	r4, #4
   1bf02:	f891 f040 	pld	[r1, #64]	; 0x40
   1bf06:	fa0c f505 	lsl.w	r5, ip, r5
   1bf0a:	ea62 0205 	orn	r2, r2, r5
   1bf0e:	bf1c      	itt	ne
   1bf10:	ea63 0305 	ornne	r3, r3, r5
   1bf14:	4662      	movne	r2, ip
   1bf16:	f04f 0400 	mov.w	r4, #0
   1bf1a:	e7a9      	b.n	1be70 <strlen+0x30>

0001bf1c <__tzcalc_limits>:
   1bf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf20:	b083      	sub	sp, #12
   1bf22:	4605      	mov	r5, r0
   1bf24:	f000 fb64 	bl	1c5f0 <__gettzinfo>
   1bf28:	f240 73b1 	movw	r3, #1969	; 0x7b1
   1bf2c:	429d      	cmp	r5, r3
   1bf2e:	f340 8093 	ble.w	1c058 <__tzcalc_limits+0x13c>
   1bf32:	4c57      	ldr	r4, [pc, #348]	; (1c090 <__tzcalc_limits+0x174>)
   1bf34:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1c09c <__tzcalc_limits+0x180>
   1bf38:	6045      	str	r5, [r0, #4]
   1bf3a:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   1bf3e:	18ee      	adds	r6, r5, r3
   1bf40:	f2a5 726d 	subw	r2, r5, #1901	; 0x76d
   1bf44:	fb84 3102 	smull	r3, r1, r4, r2
   1bf48:	10b7      	asrs	r7, r6, #2
   1bf4a:	f240 1e6d 	movw	lr, #365	; 0x16d
   1bf4e:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
   1bf52:	f2a5 76b2 	subw	r6, r5, #1970	; 0x7b2
   1bf56:	17d2      	asrs	r2, r2, #31
   1bf58:	eb05 030c 	add.w	r3, r5, ip
   1bf5c:	fb0e 7606 	mla	r6, lr, r6, r7
   1bf60:	eba2 1261 	sub.w	r2, r2, r1, asr #5
   1bf64:	17ef      	asrs	r7, r5, #31
   1bf66:	fb84 c105 	smull	ip, r1, r4, r5
   1bf6a:	4416      	add	r6, r2
   1bf6c:	fb84 e403 	smull	lr, r4, r4, r3
   1bf70:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1bf74:	ebc7 1ee1 	rsb	lr, r7, r1, asr #7
   1bf78:	17db      	asrs	r3, r3, #31
   1bf7a:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
   1bf7e:	fb02 5e1e 	mls	lr, r2, lr, r5
   1bf82:	ebc7 1761 	rsb	r7, r7, r1, asr #5
   1bf86:	2264      	movs	r2, #100	; 0x64
   1bf88:	441e      	add	r6, r3
   1bf8a:	f1be 0f00 	cmp.w	lr, #0
   1bf8e:	bf0c      	ite	eq
   1bf90:	2330      	moveq	r3, #48	; 0x30
   1bf92:	2300      	movne	r3, #0
   1bf94:	fb02 5717 	mls	r7, r2, r7, r5
   1bf98:	9301      	str	r3, [sp, #4]
   1bf9a:	f005 0503 	and.w	r5, r5, #3
   1bf9e:	4604      	mov	r4, r0
   1bfa0:	f100 0c38 	add.w	ip, r0, #56	; 0x38
   1bfa4:	7a23      	ldrb	r3, [r4, #8]
   1bfa6:	2b4a      	cmp	r3, #74	; 0x4a
   1bfa8:	d05a      	beq.n	1c060 <__tzcalc_limits+0x144>
   1bfaa:	2b44      	cmp	r3, #68	; 0x44
   1bfac:	d068      	beq.n	1c080 <__tzcalc_limits+0x164>
   1bfae:	2d00      	cmp	r5, #0
   1bfb0:	d04b      	beq.n	1c04a <__tzcalc_limits+0x12e>
   1bfb2:	f8dd 9004 	ldr.w	r9, [sp, #4]
   1bfb6:	68e3      	ldr	r3, [r4, #12]
   1bfb8:	4a36      	ldr	r2, [pc, #216]	; (1c094 <__tzcalc_limits+0x178>)
   1bfba:	2b01      	cmp	r3, #1
   1bfbc:	4491      	add	r9, r2
   1bfbe:	dd62      	ble.n	1c086 <__tzcalc_limits+0x16a>
   1bfc0:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
   1bfc4:	f1ab 0b02 	sub.w	fp, fp, #2
   1bfc8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   1bfcc:	eb09 0a0b 	add.w	sl, r9, fp
   1bfd0:	f1a9 0304 	sub.w	r3, r9, #4
   1bfd4:	4632      	mov	r2, r6
   1bfd6:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1bfda:	459a      	cmp	sl, r3
   1bfdc:	440a      	add	r2, r1
   1bfde:	d1fa      	bne.n	1bfd6 <__tzcalc_limits+0xba>
   1bfe0:	f10b 0b04 	add.w	fp, fp, #4
   1bfe4:	4b2c      	ldr	r3, [pc, #176]	; (1c098 <__tzcalc_limits+0x17c>)
   1bfe6:	f859 900b 	ldr.w	r9, [r9, fp]
   1bfea:	1d11      	adds	r1, r2, #4
   1bfec:	fb83 a301 	smull	sl, r3, r3, r1
   1bff0:	440b      	add	r3, r1
   1bff2:	ea4f 7ae1 	mov.w	sl, r1, asr #31
   1bff6:	ebca 0aa3 	rsb	sl, sl, r3, asr #2
   1bffa:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
   1bffe:	6963      	ldr	r3, [r4, #20]
   1c000:	eba1 010a 	sub.w	r1, r1, sl
   1c004:	1a59      	subs	r1, r3, r1
   1c006:	6923      	ldr	r3, [r4, #16]
   1c008:	f103 33ff 	add.w	r3, r3, #4294967295
   1c00c:	bf48      	it	mi
   1c00e:	3107      	addmi	r1, #7
   1c010:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1c014:	440b      	add	r3, r1
   1c016:	454b      	cmp	r3, r9
   1c018:	db02      	blt.n	1c020 <__tzcalc_limits+0x104>
   1c01a:	3b07      	subs	r3, #7
   1c01c:	454b      	cmp	r3, r9
   1c01e:	dafc      	bge.n	1c01a <__tzcalc_limits+0xfe>
   1c020:	441a      	add	r2, r3
   1c022:	69a1      	ldr	r1, [r4, #24]
   1c024:	6a23      	ldr	r3, [r4, #32]
   1c026:	fb08 1102 	mla	r1, r8, r2, r1
   1c02a:	440b      	add	r3, r1
   1c02c:	f844 3f1c 	str.w	r3, [r4, #28]!
   1c030:	45a4      	cmp	ip, r4
   1c032:	d1b7      	bne.n	1bfa4 <__tzcalc_limits+0x88>
   1c034:	69c3      	ldr	r3, [r0, #28]
   1c036:	6b82      	ldr	r2, [r0, #56]	; 0x38
   1c038:	4293      	cmp	r3, r2
   1c03a:	bfac      	ite	ge
   1c03c:	2300      	movge	r3, #0
   1c03e:	2301      	movlt	r3, #1
   1c040:	6003      	str	r3, [r0, #0]
   1c042:	2001      	movs	r0, #1
   1c044:	b003      	add	sp, #12
   1c046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c04a:	9b01      	ldr	r3, [sp, #4]
   1c04c:	2f00      	cmp	r7, #0
   1c04e:	bf0c      	ite	eq
   1c050:	4699      	moveq	r9, r3
   1c052:	f04f 0930 	movne.w	r9, #48	; 0x30
   1c056:	e7ae      	b.n	1bfb6 <__tzcalc_limits+0x9a>
   1c058:	2000      	movs	r0, #0
   1c05a:	b003      	add	sp, #12
   1c05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c060:	6962      	ldr	r2, [r4, #20]
   1c062:	18b1      	adds	r1, r6, r2
   1c064:	b93d      	cbnz	r5, 1c076 <__tzcalc_limits+0x15a>
   1c066:	b137      	cbz	r7, 1c076 <__tzcalc_limits+0x15a>
   1c068:	2a3b      	cmp	r2, #59	; 0x3b
   1c06a:	bfd4      	ite	le
   1c06c:	2200      	movle	r2, #0
   1c06e:	2201      	movgt	r2, #1
   1c070:	440a      	add	r2, r1
   1c072:	3a01      	subs	r2, #1
   1c074:	e7d5      	b.n	1c022 <__tzcalc_limits+0x106>
   1c076:	f1be 0f00 	cmp.w	lr, #0
   1c07a:	d0f5      	beq.n	1c068 <__tzcalc_limits+0x14c>
   1c07c:	2200      	movs	r2, #0
   1c07e:	e7f7      	b.n	1c070 <__tzcalc_limits+0x154>
   1c080:	6962      	ldr	r2, [r4, #20]
   1c082:	4432      	add	r2, r6
   1c084:	e7cd      	b.n	1c022 <__tzcalc_limits+0x106>
   1c086:	4632      	mov	r2, r6
   1c088:	f04f 0b00 	mov.w	fp, #0
   1c08c:	e7aa      	b.n	1bfe4 <__tzcalc_limits+0xc8>
   1c08e:	bf00      	nop
   1c090:	51eb851f 	.word	0x51eb851f
   1c094:	00021b8c 	.word	0x00021b8c
   1c098:	92492493 	.word	0x92492493
   1c09c:	00015180 	.word	0x00015180

0001c0a0 <__tz_lock>:
   1c0a0:	4801      	ldr	r0, [pc, #4]	; (1c0a8 <__tz_lock+0x8>)
   1c0a2:	f000 bb93 	b.w	1c7cc <__retarget_lock_acquire>
   1c0a6:	bf00      	nop
   1c0a8:	2000ac20 	.word	0x2000ac20

0001c0ac <__tz_unlock>:
   1c0ac:	4801      	ldr	r0, [pc, #4]	; (1c0b4 <__tz_unlock+0x8>)
   1c0ae:	f000 bb91 	b.w	1c7d4 <__retarget_lock_release>
   1c0b2:	bf00      	nop
   1c0b4:	2000ac20 	.word	0x2000ac20

0001c0b8 <_tzset_unlocked>:
   1c0b8:	4b01      	ldr	r3, [pc, #4]	; (1c0c0 <_tzset_unlocked+0x8>)
   1c0ba:	6818      	ldr	r0, [r3, #0]
   1c0bc:	f000 b802 	b.w	1c0c4 <_tzset_unlocked_r>
   1c0c0:	20000248 	.word	0x20000248

0001c0c4 <_tzset_unlocked_r>:
   1c0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0c8:	b08b      	sub	sp, #44	; 0x2c
   1c0ca:	4607      	mov	r7, r0
   1c0cc:	f000 fa90 	bl	1c5f0 <__gettzinfo>
   1c0d0:	49bb      	ldr	r1, [pc, #748]	; (1c3c0 <_tzset_unlocked_r+0x2fc>)
   1c0d2:	4dbc      	ldr	r5, [pc, #752]	; (1c3c4 <_tzset_unlocked_r+0x300>)
   1c0d4:	4606      	mov	r6, r0
   1c0d6:	4638      	mov	r0, r7
   1c0d8:	f000 fa82 	bl	1c5e0 <_getenv_r>
   1c0dc:	4604      	mov	r4, r0
   1c0de:	2800      	cmp	r0, #0
   1c0e0:	f000 80f7 	beq.w	1c2d2 <_tzset_unlocked_r+0x20e>
   1c0e4:	6829      	ldr	r1, [r5, #0]
   1c0e6:	b131      	cbz	r1, 1c0f6 <_tzset_unlocked_r+0x32>
   1c0e8:	f000 fefe 	bl	1cee8 <strcmp>
   1c0ec:	b910      	cbnz	r0, 1c0f4 <_tzset_unlocked_r+0x30>
   1c0ee:	b00b      	add	sp, #44	; 0x2c
   1c0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0f4:	6829      	ldr	r1, [r5, #0]
   1c0f6:	4608      	mov	r0, r1
   1c0f8:	f7f8 fab4 	bl	14664 <free>
   1c0fc:	4620      	mov	r0, r4
   1c0fe:	f7ff fe9f 	bl	1be40 <strlen>
   1c102:	1c41      	adds	r1, r0, #1
   1c104:	4638      	mov	r0, r7
   1c106:	f000 fb69 	bl	1c7dc <_malloc_r>
   1c10a:	6028      	str	r0, [r5, #0]
   1c10c:	b110      	cbz	r0, 1c114 <_tzset_unlocked_r+0x50>
   1c10e:	4621      	mov	r1, r4
   1c110:	f001 f854 	bl	1d1bc <strcpy>
   1c114:	7823      	ldrb	r3, [r4, #0]
   1c116:	4aac      	ldr	r2, [pc, #688]	; (1c3c8 <_tzset_unlocked_r+0x304>)
   1c118:	49ac      	ldr	r1, [pc, #688]	; (1c3cc <_tzset_unlocked_r+0x308>)
   1c11a:	2b3a      	cmp	r3, #58	; 0x3a
   1c11c:	bf08      	it	eq
   1c11e:	3401      	addeq	r4, #1
   1c120:	ad08      	add	r5, sp, #32
   1c122:	462b      	mov	r3, r5
   1c124:	4620      	mov	r0, r4
   1c126:	f000 fe9f 	bl	1ce68 <siscanf>
   1c12a:	2800      	cmp	r0, #0
   1c12c:	dddf      	ble.n	1c0ee <_tzset_unlocked_r+0x2a>
   1c12e:	9b08      	ldr	r3, [sp, #32]
   1c130:	5ce2      	ldrb	r2, [r4, r3]
   1c132:	2a2d      	cmp	r2, #45	; 0x2d
   1c134:	441c      	add	r4, r3
   1c136:	f000 80c8 	beq.w	1c2ca <_tzset_unlocked_r+0x206>
   1c13a:	2a2b      	cmp	r2, #43	; 0x2b
   1c13c:	bf08      	it	eq
   1c13e:	3401      	addeq	r4, #1
   1c140:	f04f 0801 	mov.w	r8, #1
   1c144:	ab06      	add	r3, sp, #24
   1c146:	9302      	str	r3, [sp, #8]
   1c148:	f10d 0316 	add.w	r3, sp, #22
   1c14c:	2700      	movs	r7, #0
   1c14e:	9300      	str	r3, [sp, #0]
   1c150:	9503      	str	r5, [sp, #12]
   1c152:	9501      	str	r5, [sp, #4]
   1c154:	aa05      	add	r2, sp, #20
   1c156:	462b      	mov	r3, r5
   1c158:	499d      	ldr	r1, [pc, #628]	; (1c3d0 <_tzset_unlocked_r+0x30c>)
   1c15a:	f8ad 7016 	strh.w	r7, [sp, #22]
   1c15e:	4620      	mov	r0, r4
   1c160:	f8ad 7018 	strh.w	r7, [sp, #24]
   1c164:	f000 fe80 	bl	1ce68 <siscanf>
   1c168:	42b8      	cmp	r0, r7
   1c16a:	ddc0      	ble.n	1c0ee <_tzset_unlocked_r+0x2a>
   1c16c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1c170:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1c174:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1c178:	9808      	ldr	r0, [sp, #32]
   1c17a:	f8df a26c 	ldr.w	sl, [pc, #620]	; 1c3e8 <_tzset_unlocked_r+0x324>
   1c17e:	f8df 925c 	ldr.w	r9, [pc, #604]	; 1c3dc <_tzset_unlocked_r+0x318>
   1c182:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1c186:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1c18a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1c18e:	fb01 3302 	mla	r3, r1, r2, r3
   1c192:	fb08 f303 	mul.w	r3, r8, r3
   1c196:	6233      	str	r3, [r6, #32]
   1c198:	4404      	add	r4, r0
   1c19a:	4b8b      	ldr	r3, [pc, #556]	; (1c3c8 <_tzset_unlocked_r+0x304>)
   1c19c:	f8c9 3000 	str.w	r3, [r9]
   1c1a0:	4620      	mov	r0, r4
   1c1a2:	4652      	mov	r2, sl
   1c1a4:	4989      	ldr	r1, [pc, #548]	; (1c3cc <_tzset_unlocked_r+0x308>)
   1c1a6:	462b      	mov	r3, r5
   1c1a8:	f000 fe5e 	bl	1ce68 <siscanf>
   1c1ac:	42b8      	cmp	r0, r7
   1c1ae:	f340 8082 	ble.w	1c2b6 <_tzset_unlocked_r+0x1f2>
   1c1b2:	9808      	ldr	r0, [sp, #32]
   1c1b4:	f8c9 a004 	str.w	sl, [r9, #4]
   1c1b8:	5c23      	ldrb	r3, [r4, r0]
   1c1ba:	2b2d      	cmp	r3, #45	; 0x2d
   1c1bc:	4404      	add	r4, r0
   1c1be:	f000 8095 	beq.w	1c2ec <_tzset_unlocked_r+0x228>
   1c1c2:	2b2b      	cmp	r3, #43	; 0x2b
   1c1c4:	bf08      	it	eq
   1c1c6:	3401      	addeq	r4, #1
   1c1c8:	f04f 0801 	mov.w	r8, #1
   1c1cc:	ab06      	add	r3, sp, #24
   1c1ce:	9302      	str	r3, [sp, #8]
   1c1d0:	f10d 0316 	add.w	r3, sp, #22
   1c1d4:	2700      	movs	r7, #0
   1c1d6:	9300      	str	r3, [sp, #0]
   1c1d8:	9503      	str	r5, [sp, #12]
   1c1da:	9501      	str	r5, [sp, #4]
   1c1dc:	462b      	mov	r3, r5
   1c1de:	aa05      	add	r2, sp, #20
   1c1e0:	497b      	ldr	r1, [pc, #492]	; (1c3d0 <_tzset_unlocked_r+0x30c>)
   1c1e2:	f8ad 7014 	strh.w	r7, [sp, #20]
   1c1e6:	4620      	mov	r0, r4
   1c1e8:	f8ad 7016 	strh.w	r7, [sp, #22]
   1c1ec:	f8ad 7018 	strh.w	r7, [sp, #24]
   1c1f0:	9708      	str	r7, [sp, #32]
   1c1f2:	f000 fe39 	bl	1ce68 <siscanf>
   1c1f6:	42b8      	cmp	r0, r7
   1c1f8:	dd7c      	ble.n	1c2f4 <_tzset_unlocked_r+0x230>
   1c1fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1c1fe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1c202:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1c206:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1c20a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1c20e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1c212:	fb01 3302 	mla	r3, r1, r2, r3
   1c216:	fb08 f303 	mul.w	r3, r8, r3
   1c21a:	63f3      	str	r3, [r6, #60]	; 0x3c
   1c21c:	9b08      	ldr	r3, [sp, #32]
   1c21e:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 1c3ec <_tzset_unlocked_r+0x328>
   1c222:	441c      	add	r4, r3
   1c224:	46b0      	mov	r8, r6
   1c226:	f04f 0a00 	mov.w	sl, #0
   1c22a:	7827      	ldrb	r7, [r4, #0]
   1c22c:	2f2c      	cmp	r7, #44	; 0x2c
   1c22e:	bf04      	itt	eq
   1c230:	7867      	ldrbeq	r7, [r4, #1]
   1c232:	3401      	addeq	r4, #1
   1c234:	2f4d      	cmp	r7, #77	; 0x4d
   1c236:	d062      	beq.n	1c2fe <_tzset_unlocked_r+0x23a>
   1c238:	2f4a      	cmp	r7, #74	; 0x4a
   1c23a:	bf08      	it	eq
   1c23c:	3401      	addeq	r4, #1
   1c23e:	f04f 020a 	mov.w	r2, #10
   1c242:	a909      	add	r1, sp, #36	; 0x24
   1c244:	4620      	mov	r0, r4
   1c246:	bf18      	it	ne
   1c248:	2744      	movne	r7, #68	; 0x44
   1c24a:	f001 f91d 	bl	1d488 <strtoul>
   1c24e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1c252:	f8ad 001e 	strh.w	r0, [sp, #30]
   1c256:	454c      	cmp	r4, r9
   1c258:	f000 809c 	beq.w	1c394 <_tzset_unlocked_r+0x2d0>
   1c25c:	b280      	uxth	r0, r0
   1c25e:	f8c8 0014 	str.w	r0, [r8, #20]
   1c262:	f888 7008 	strb.w	r7, [r8, #8]
   1c266:	2400      	movs	r4, #0
   1c268:	2302      	movs	r3, #2
   1c26a:	f8ad 3014 	strh.w	r3, [sp, #20]
   1c26e:	f8ad 4016 	strh.w	r4, [sp, #22]
   1c272:	f8ad 4018 	strh.w	r4, [sp, #24]
   1c276:	9408      	str	r4, [sp, #32]
   1c278:	f899 3000 	ldrb.w	r3, [r9]
   1c27c:	2b2f      	cmp	r3, #47	; 0x2f
   1c27e:	d06c      	beq.n	1c35a <_tzset_unlocked_r+0x296>
   1c280:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   1c284:	f10a 0a01 	add.w	sl, sl, #1
   1c288:	f1ba 0f02 	cmp.w	sl, #2
   1c28c:	f8c8 3018 	str.w	r3, [r8, #24]
   1c290:	444c      	add	r4, r9
   1c292:	f108 081c 	add.w	r8, r8, #28
   1c296:	d1c8      	bne.n	1c22a <_tzset_unlocked_r+0x166>
   1c298:	6870      	ldr	r0, [r6, #4]
   1c29a:	f7ff fe3f 	bl	1bf1c <__tzcalc_limits>
   1c29e:	6a32      	ldr	r2, [r6, #32]
   1c2a0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1c2a2:	484c      	ldr	r0, [pc, #304]	; (1c3d4 <_tzset_unlocked_r+0x310>)
   1c2a4:	494c      	ldr	r1, [pc, #304]	; (1c3d8 <_tzset_unlocked_r+0x314>)
   1c2a6:	1a9b      	subs	r3, r3, r2
   1c2a8:	bf18      	it	ne
   1c2aa:	2301      	movne	r3, #1
   1c2ac:	6003      	str	r3, [r0, #0]
   1c2ae:	600a      	str	r2, [r1, #0]
   1c2b0:	b00b      	add	sp, #44	; 0x2c
   1c2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2b6:	4948      	ldr	r1, [pc, #288]	; (1c3d8 <_tzset_unlocked_r+0x314>)
   1c2b8:	4a46      	ldr	r2, [pc, #280]	; (1c3d4 <_tzset_unlocked_r+0x310>)
   1c2ba:	6a30      	ldr	r0, [r6, #32]
   1c2bc:	f8d9 3000 	ldr.w	r3, [r9]
   1c2c0:	6008      	str	r0, [r1, #0]
   1c2c2:	6017      	str	r7, [r2, #0]
   1c2c4:	f8c9 3004 	str.w	r3, [r9, #4]
   1c2c8:	e711      	b.n	1c0ee <_tzset_unlocked_r+0x2a>
   1c2ca:	3401      	adds	r4, #1
   1c2cc:	f04f 38ff 	mov.w	r8, #4294967295
   1c2d0:	e738      	b.n	1c144 <_tzset_unlocked_r+0x80>
   1c2d2:	4b42      	ldr	r3, [pc, #264]	; (1c3dc <_tzset_unlocked_r+0x318>)
   1c2d4:	493f      	ldr	r1, [pc, #252]	; (1c3d4 <_tzset_unlocked_r+0x310>)
   1c2d6:	4e40      	ldr	r6, [pc, #256]	; (1c3d8 <_tzset_unlocked_r+0x314>)
   1c2d8:	4a41      	ldr	r2, [pc, #260]	; (1c3e0 <_tzset_unlocked_r+0x31c>)
   1c2da:	6828      	ldr	r0, [r5, #0]
   1c2dc:	6034      	str	r4, [r6, #0]
   1c2de:	600c      	str	r4, [r1, #0]
   1c2e0:	601a      	str	r2, [r3, #0]
   1c2e2:	605a      	str	r2, [r3, #4]
   1c2e4:	f7f8 f9be 	bl	14664 <free>
   1c2e8:	602c      	str	r4, [r5, #0]
   1c2ea:	e700      	b.n	1c0ee <_tzset_unlocked_r+0x2a>
   1c2ec:	3401      	adds	r4, #1
   1c2ee:	f04f 38ff 	mov.w	r8, #4294967295
   1c2f2:	e76b      	b.n	1c1cc <_tzset_unlocked_r+0x108>
   1c2f4:	6a33      	ldr	r3, [r6, #32]
   1c2f6:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   1c2fa:	63f3      	str	r3, [r6, #60]	; 0x3c
   1c2fc:	e78e      	b.n	1c21c <_tzset_unlocked_r+0x158>
   1c2fe:	f10d 021e 	add.w	r2, sp, #30
   1c302:	ab07      	add	r3, sp, #28
   1c304:	9202      	str	r2, [sp, #8]
   1c306:	9300      	str	r3, [sp, #0]
   1c308:	9503      	str	r5, [sp, #12]
   1c30a:	9501      	str	r5, [sp, #4]
   1c30c:	462b      	mov	r3, r5
   1c30e:	f10d 021a 	add.w	r2, sp, #26
   1c312:	4659      	mov	r1, fp
   1c314:	4620      	mov	r0, r4
   1c316:	f000 fda7 	bl	1ce68 <siscanf>
   1c31a:	2803      	cmp	r0, #3
   1c31c:	f47f aee7 	bne.w	1c0ee <_tzset_unlocked_r+0x2a>
   1c320:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1c324:	1e5a      	subs	r2, r3, #1
   1c326:	2a0b      	cmp	r2, #11
   1c328:	f63f aee1 	bhi.w	1c0ee <_tzset_unlocked_r+0x2a>
   1c32c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1c330:	1e51      	subs	r1, r2, #1
   1c332:	2904      	cmp	r1, #4
   1c334:	f63f aedb 	bhi.w	1c0ee <_tzset_unlocked_r+0x2a>
   1c338:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   1c33c:	2906      	cmp	r1, #6
   1c33e:	f63f aed6 	bhi.w	1c0ee <_tzset_unlocked_r+0x2a>
   1c342:	f888 7008 	strb.w	r7, [r8, #8]
   1c346:	f8c8 300c 	str.w	r3, [r8, #12]
   1c34a:	f8c8 2010 	str.w	r2, [r8, #16]
   1c34e:	f8c8 1014 	str.w	r1, [r8, #20]
   1c352:	9b08      	ldr	r3, [sp, #32]
   1c354:	eb04 0903 	add.w	r9, r4, r3
   1c358:	e785      	b.n	1c266 <_tzset_unlocked_r+0x1a2>
   1c35a:	ab06      	add	r3, sp, #24
   1c35c:	9302      	str	r3, [sp, #8]
   1c35e:	f10d 0316 	add.w	r3, sp, #22
   1c362:	9300      	str	r3, [sp, #0]
   1c364:	aa05      	add	r2, sp, #20
   1c366:	462b      	mov	r3, r5
   1c368:	491e      	ldr	r1, [pc, #120]	; (1c3e4 <_tzset_unlocked_r+0x320>)
   1c36a:	9503      	str	r5, [sp, #12]
   1c36c:	9501      	str	r5, [sp, #4]
   1c36e:	4648      	mov	r0, r9
   1c370:	f000 fd7a 	bl	1ce68 <siscanf>
   1c374:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1c378:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1c37c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1c380:	9c08      	ldr	r4, [sp, #32]
   1c382:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   1c386:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1c38a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1c38e:	fb01 2303 	mla	r3, r1, r3, r2
   1c392:	e777      	b.n	1c284 <_tzset_unlocked_r+0x1c0>
   1c394:	f1ba 0f00 	cmp.w	sl, #0
   1c398:	d009      	beq.n	1c3ae <_tzset_unlocked_r+0x2ea>
   1c39a:	224d      	movs	r2, #77	; 0x4d
   1c39c:	230b      	movs	r3, #11
   1c39e:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
   1c3a2:	62b3      	str	r3, [r6, #40]	; 0x28
   1c3a4:	2201      	movs	r2, #1
   1c3a6:	2300      	movs	r3, #0
   1c3a8:	62f2      	str	r2, [r6, #44]	; 0x2c
   1c3aa:	6333      	str	r3, [r6, #48]	; 0x30
   1c3ac:	e75b      	b.n	1c266 <_tzset_unlocked_r+0x1a2>
   1c3ae:	234d      	movs	r3, #77	; 0x4d
   1c3b0:	2203      	movs	r2, #3
   1c3b2:	7233      	strb	r3, [r6, #8]
   1c3b4:	2302      	movs	r3, #2
   1c3b6:	f8c6 a014 	str.w	sl, [r6, #20]
   1c3ba:	60f2      	str	r2, [r6, #12]
   1c3bc:	6133      	str	r3, [r6, #16]
   1c3be:	e752      	b.n	1c266 <_tzset_unlocked_r+0x1a2>
   1c3c0:	00021bec 	.word	0x00021bec
   1c3c4:	2000a8c4 	.word	0x2000a8c4
   1c3c8:	2000a8b8 	.word	0x2000a8b8
   1c3cc:	00021bf4 	.word	0x00021bf4
   1c3d0:	00021c04 	.word	0x00021c04
   1c3d4:	2000a8c8 	.word	0x2000a8c8
   1c3d8:	2000a8cc 	.word	0x2000a8cc
   1c3dc:	20000678 	.word	0x20000678
   1c3e0:	00021bf0 	.word	0x00021bf0
   1c3e4:	00021c2c 	.word	0x00021c2c
   1c3e8:	2000a8ac 	.word	0x2000a8ac
   1c3ec:	00021c18 	.word	0x00021c18

0001c3f0 <__register_exitproc>:
   1c3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c3f4:	4d2c      	ldr	r5, [pc, #176]	; (1c4a8 <__register_exitproc+0xb8>)
   1c3f6:	4606      	mov	r6, r0
   1c3f8:	6828      	ldr	r0, [r5, #0]
   1c3fa:	4698      	mov	r8, r3
   1c3fc:	460f      	mov	r7, r1
   1c3fe:	4691      	mov	r9, r2
   1c400:	f000 f9e6 	bl	1c7d0 <__retarget_lock_acquire_recursive>
   1c404:	4b29      	ldr	r3, [pc, #164]	; (1c4ac <__register_exitproc+0xbc>)
   1c406:	681c      	ldr	r4, [r3, #0]
   1c408:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1c40c:	2b00      	cmp	r3, #0
   1c40e:	d03e      	beq.n	1c48e <__register_exitproc+0x9e>
   1c410:	685a      	ldr	r2, [r3, #4]
   1c412:	2a1f      	cmp	r2, #31
   1c414:	dc1c      	bgt.n	1c450 <__register_exitproc+0x60>
   1c416:	f102 0e01 	add.w	lr, r2, #1
   1c41a:	b176      	cbz	r6, 1c43a <__register_exitproc+0x4a>
   1c41c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1c420:	2401      	movs	r4, #1
   1c422:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1c426:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   1c42a:	4094      	lsls	r4, r2
   1c42c:	4320      	orrs	r0, r4
   1c42e:	2e02      	cmp	r6, #2
   1c430:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   1c434:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1c438:	d023      	beq.n	1c482 <__register_exitproc+0x92>
   1c43a:	3202      	adds	r2, #2
   1c43c:	f8c3 e004 	str.w	lr, [r3, #4]
   1c440:	6828      	ldr	r0, [r5, #0]
   1c442:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1c446:	f000 f9c7 	bl	1c7d8 <__retarget_lock_release_recursive>
   1c44a:	2000      	movs	r0, #0
   1c44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c450:	4b17      	ldr	r3, [pc, #92]	; (1c4b0 <__register_exitproc+0xc0>)
   1c452:	b30b      	cbz	r3, 1c498 <__register_exitproc+0xa8>
   1c454:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1c458:	f7f8 f8fa 	bl	14650 <malloc>
   1c45c:	4603      	mov	r3, r0
   1c45e:	b1d8      	cbz	r0, 1c498 <__register_exitproc+0xa8>
   1c460:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1c464:	6002      	str	r2, [r0, #0]
   1c466:	2100      	movs	r1, #0
   1c468:	6041      	str	r1, [r0, #4]
   1c46a:	460a      	mov	r2, r1
   1c46c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1c470:	f04f 0e01 	mov.w	lr, #1
   1c474:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1c478:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   1c47c:	2e00      	cmp	r6, #0
   1c47e:	d0dc      	beq.n	1c43a <__register_exitproc+0x4a>
   1c480:	e7cc      	b.n	1c41c <__register_exitproc+0x2c>
   1c482:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1c486:	430c      	orrs	r4, r1
   1c488:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   1c48c:	e7d5      	b.n	1c43a <__register_exitproc+0x4a>
   1c48e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1c492:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1c496:	e7bb      	b.n	1c410 <__register_exitproc+0x20>
   1c498:	6828      	ldr	r0, [r5, #0]
   1c49a:	f000 f99d 	bl	1c7d8 <__retarget_lock_release_recursive>
   1c49e:	f04f 30ff 	mov.w	r0, #4294967295
   1c4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c4a6:	bf00      	nop
   1c4a8:	20000680 	.word	0x20000680
   1c4ac:	00021b88 	.word	0x00021b88
   1c4b0:	00014651 	.word	0x00014651

0001c4b4 <register_fini>:
   1c4b4:	4b02      	ldr	r3, [pc, #8]	; (1c4c0 <register_fini+0xc>)
   1c4b6:	b113      	cbz	r3, 1c4be <register_fini+0xa>
   1c4b8:	4802      	ldr	r0, [pc, #8]	; (1c4c4 <register_fini+0x10>)
   1c4ba:	f000 b833 	b.w	1c524 <atexit>
   1c4be:	4770      	bx	lr
   1c4c0:	00000000 	.word	0x00000000
   1c4c4:	0001c531 	.word	0x0001c531

0001c4c8 <asctime>:
   1c4c8:	4b02      	ldr	r3, [pc, #8]	; (1c4d4 <asctime+0xc>)
   1c4ca:	6819      	ldr	r1, [r3, #0]
   1c4cc:	3160      	adds	r1, #96	; 0x60
   1c4ce:	f000 b803 	b.w	1c4d8 <asctime_r>
   1c4d2:	bf00      	nop
   1c4d4:	20000248 	.word	0x20000248

0001c4d8 <asctime_r>:
   1c4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c4da:	6946      	ldr	r6, [r0, #20]
   1c4dc:	6807      	ldr	r7, [r0, #0]
   1c4de:	6905      	ldr	r5, [r0, #16]
   1c4e0:	6984      	ldr	r4, [r0, #24]
   1c4e2:	4b0d      	ldr	r3, [pc, #52]	; (1c518 <asctime_r+0x40>)
   1c4e4:	4a0d      	ldr	r2, [pc, #52]	; (1c51c <asctime_r+0x44>)
   1c4e6:	b087      	sub	sp, #28
   1c4e8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1c4ec:	9703      	str	r7, [sp, #12]
   1c4ee:	460f      	mov	r7, r1
   1c4f0:	6841      	ldr	r1, [r0, #4]
   1c4f2:	9604      	str	r6, [sp, #16]
   1c4f4:	6886      	ldr	r6, [r0, #8]
   1c4f6:	68c0      	ldr	r0, [r0, #12]
   1c4f8:	9102      	str	r1, [sp, #8]
   1c4fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1c4fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1c502:	e88d 0041 	stmia.w	sp, {r0, r6}
   1c506:	442b      	add	r3, r5
   1c508:	4422      	add	r2, r4
   1c50a:	4638      	mov	r0, r7
   1c50c:	4904      	ldr	r1, [pc, #16]	; (1c520 <asctime_r+0x48>)
   1c50e:	f000 fc85 	bl	1ce1c <siprintf>
   1c512:	4638      	mov	r0, r7
   1c514:	b007      	add	sp, #28
   1c516:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c518:	00021c78 	.word	0x00021c78
   1c51c:	00021c60 	.word	0x00021c60
   1c520:	00021c40 	.word	0x00021c40

0001c524 <atexit>:
   1c524:	2300      	movs	r3, #0
   1c526:	4601      	mov	r1, r0
   1c528:	461a      	mov	r2, r3
   1c52a:	4618      	mov	r0, r3
   1c52c:	f7ff bf60 	b.w	1c3f0 <__register_exitproc>

0001c530 <__libc_fini_array>:
   1c530:	b538      	push	{r3, r4, r5, lr}
   1c532:	4c0a      	ldr	r4, [pc, #40]	; (1c55c <__libc_fini_array+0x2c>)
   1c534:	4d0a      	ldr	r5, [pc, #40]	; (1c560 <__libc_fini_array+0x30>)
   1c536:	1b64      	subs	r4, r4, r5
   1c538:	10a4      	asrs	r4, r4, #2
   1c53a:	d00a      	beq.n	1c552 <__libc_fini_array+0x22>
   1c53c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1c540:	3b01      	subs	r3, #1
   1c542:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1c546:	3c01      	subs	r4, #1
   1c548:	f855 3904 	ldr.w	r3, [r5], #-4
   1c54c:	4798      	blx	r3
   1c54e:	2c00      	cmp	r4, #0
   1c550:	d1f9      	bne.n	1c546 <__libc_fini_array+0x16>
   1c552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c556:	f005 bca3 	b.w	21ea0 <_fini>
   1c55a:	bf00      	nop
   1c55c:	00021eb0 	.word	0x00021eb0
   1c560:	00021eac 	.word	0x00021eac

0001c564 <_findenv_r>:
   1c564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c568:	4f1c      	ldr	r7, [pc, #112]	; (1c5dc <_findenv_r+0x78>)
   1c56a:	460e      	mov	r6, r1
   1c56c:	4691      	mov	r9, r2
   1c56e:	4680      	mov	r8, r0
   1c570:	f002 faf2 	bl	1eb58 <__env_lock>
   1c574:	683d      	ldr	r5, [r7, #0]
   1c576:	b1f5      	cbz	r5, 1c5b6 <_findenv_r+0x52>
   1c578:	7834      	ldrb	r4, [r6, #0]
   1c57a:	b15c      	cbz	r4, 1c594 <_findenv_r+0x30>
   1c57c:	2c3d      	cmp	r4, #61	; 0x3d
   1c57e:	bf18      	it	ne
   1c580:	4634      	movne	r4, r6
   1c582:	d102      	bne.n	1c58a <_findenv_r+0x26>
   1c584:	e017      	b.n	1c5b6 <_findenv_r+0x52>
   1c586:	2b3d      	cmp	r3, #61	; 0x3d
   1c588:	d015      	beq.n	1c5b6 <_findenv_r+0x52>
   1c58a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1c58e:	2b00      	cmp	r3, #0
   1c590:	d1f9      	bne.n	1c586 <_findenv_r+0x22>
   1c592:	1ba4      	subs	r4, r4, r6
   1c594:	6828      	ldr	r0, [r5, #0]
   1c596:	b170      	cbz	r0, 1c5b6 <_findenv_r+0x52>
   1c598:	4622      	mov	r2, r4
   1c59a:	4631      	mov	r1, r6
   1c59c:	f000 fe6c 	bl	1d278 <strncmp>
   1c5a0:	b928      	cbnz	r0, 1c5ae <_findenv_r+0x4a>
   1c5a2:	6828      	ldr	r0, [r5, #0]
   1c5a4:	5d03      	ldrb	r3, [r0, r4]
   1c5a6:	2b3d      	cmp	r3, #61	; 0x3d
   1c5a8:	eb00 0a04 	add.w	sl, r0, r4
   1c5ac:	d009      	beq.n	1c5c2 <_findenv_r+0x5e>
   1c5ae:	f855 0f04 	ldr.w	r0, [r5, #4]!
   1c5b2:	2800      	cmp	r0, #0
   1c5b4:	d1f0      	bne.n	1c598 <_findenv_r+0x34>
   1c5b6:	4640      	mov	r0, r8
   1c5b8:	f002 fad4 	bl	1eb64 <__env_unlock>
   1c5bc:	2000      	movs	r0, #0
   1c5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c5c2:	683b      	ldr	r3, [r7, #0]
   1c5c4:	1aed      	subs	r5, r5, r3
   1c5c6:	10ad      	asrs	r5, r5, #2
   1c5c8:	4640      	mov	r0, r8
   1c5ca:	f8c9 5000 	str.w	r5, [r9]
   1c5ce:	f002 fac9 	bl	1eb64 <__env_unlock>
   1c5d2:	f10a 0001 	add.w	r0, sl, #1
   1c5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c5da:	bf00      	nop
   1c5dc:	20000ad4 	.word	0x20000ad4

0001c5e0 <_getenv_r>:
   1c5e0:	b500      	push	{lr}
   1c5e2:	b083      	sub	sp, #12
   1c5e4:	aa01      	add	r2, sp, #4
   1c5e6:	f7ff ffbd 	bl	1c564 <_findenv_r>
   1c5ea:	b003      	add	sp, #12
   1c5ec:	f85d fb04 	ldr.w	pc, [sp], #4

0001c5f0 <__gettzinfo>:
   1c5f0:	4800      	ldr	r0, [pc, #0]	; (1c5f4 <__gettzinfo+0x4>)
   1c5f2:	4770      	bx	lr
   1c5f4:	20000684 	.word	0x20000684

0001c5f8 <gmtime_r>:
   1c5f8:	6800      	ldr	r0, [r0, #0]
   1c5fa:	4b65      	ldr	r3, [pc, #404]	; (1c790 <gmtime_r+0x198>)
   1c5fc:	fb83 2300 	smull	r2, r3, r3, r0
   1c600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c604:	4403      	add	r3, r0
   1c606:	4d63      	ldr	r5, [pc, #396]	; (1c794 <gmtime_r+0x19c>)
   1c608:	17c2      	asrs	r2, r0, #31
   1c60a:	ebc2 4323 	rsb	r3, r2, r3, asr #16
   1c60e:	fb05 0513 	mls	r5, r5, r3, r0
   1c612:	2d00      	cmp	r5, #0
   1c614:	f2c0 80b3 	blt.w	1c77e <gmtime_r+0x186>
   1c618:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   1c61c:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
   1c620:	4e5d      	ldr	r6, [pc, #372]	; (1c798 <gmtime_r+0x1a0>)
   1c622:	485e      	ldr	r0, [pc, #376]	; (1c79c <gmtime_r+0x1a4>)
   1c624:	4a5e      	ldr	r2, [pc, #376]	; (1c7a0 <gmtime_r+0x1a8>)
   1c626:	4c5f      	ldr	r4, [pc, #380]	; (1c7a4 <gmtime_r+0x1ac>)
   1c628:	f8df c18c 	ldr.w	ip, [pc, #396]	; 1c7b8 <gmtime_r+0x1c0>
   1c62c:	f8df e18c 	ldr.w	lr, [pc, #396]	; 1c7bc <gmtime_r+0x1c4>
   1c630:	fb86 7603 	smull	r7, r6, r6, r3
   1c634:	17df      	asrs	r7, r3, #31
   1c636:	ebc7 36e6 	rsb	r6, r7, r6, asr #15
   1c63a:	fb00 3006 	mla	r0, r0, r6, r3
   1c63e:	0887      	lsrs	r7, r0, #2
   1c640:	fba2 8207 	umull	r8, r2, r2, r7
   1c644:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
   1c648:	fba4 8707 	umull	r8, r7, r4, r7
   1c64c:	ea4f 1810 	mov.w	r8, r0, lsr #4
   1c650:	eba2 12d7 	sub.w	r2, r2, r7, lsr #7
   1c654:	fbac c708 	umull	ip, r7, ip, r8
   1c658:	eba2 1217 	sub.w	r2, r2, r7, lsr #4
   1c65c:	f8df c160 	ldr.w	ip, [pc, #352]	; 1c7c0 <gmtime_r+0x1c8>
   1c660:	4f51      	ldr	r7, [pc, #324]	; (1c7a8 <gmtime_r+0x1b0>)
   1c662:	fbae 8e02 	umull	r8, lr, lr, r2
   1c666:	fbac 9c02 	umull	r9, ip, ip, r2
   1c66a:	eba2 080e 	sub.w	r8, r2, lr
   1c66e:	0892      	lsrs	r2, r2, #2
   1c670:	eb0e 0e58 	add.w	lr, lr, r8, lsr #1
   1c674:	eb00 30dc 	add.w	r0, r0, ip, lsr #15
   1c678:	fba4 4202 	umull	r4, r2, r4, r2
   1c67c:	eba0 12d2 	sub.w	r2, r0, r2, lsr #7
   1c680:	ea4f 241e 	mov.w	r4, lr, lsr #8
   1c684:	f240 106d 	movw	r0, #365	; 0x16d
   1c688:	fb00 2214 	mls	r2, r0, r4, r2
   1c68c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1c7c4 <gmtime_r+0x1cc>
   1c690:	fb87 0e05 	smull	r0, lr, r7, r5
   1c694:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1c698:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   1c69c:	44ae      	add	lr, r5
   1c69e:	3002      	adds	r0, #2
   1c6a0:	ebcc 2eee 	rsb	lr, ip, lr, asr #11
   1c6a4:	4f41      	ldr	r7, [pc, #260]	; (1c7ac <gmtime_r+0x1b4>)
   1c6a6:	f8c1 e008 	str.w	lr, [r1, #8]
   1c6aa:	f103 0c03 	add.w	ip, r3, #3
   1c6ae:	fba8 3000 	umull	r3, r0, r8, r0
   1c6b2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   1c6b6:	fb03 551e 	mls	r5, r3, lr, r5
   1c6ba:	4b3d      	ldr	r3, [pc, #244]	; (1c7b0 <gmtime_r+0x1b8>)
   1c6bc:	f8df 8108 	ldr.w	r8, [pc, #264]	; 1c7c8 <gmtime_r+0x1d0>
   1c6c0:	fb87 e705 	smull	lr, r7, r7, r5
   1c6c4:	fb83 390c 	smull	r3, r9, r3, ip
   1c6c8:	197b      	adds	r3, r7, r5
   1c6ca:	f44f 77c8 	mov.w	r7, #400	; 0x190
   1c6ce:	fb07 4606 	mla	r6, r7, r6, r4
   1c6d2:	17ef      	asrs	r7, r5, #31
   1c6d4:	44e1      	add	r9, ip
   1c6d6:	ebc7 1363 	rsb	r3, r7, r3, asr #5
   1c6da:	ea4f 77ec 	mov.w	r7, ip, asr #31
   1c6de:	09c0      	lsrs	r0, r0, #7
   1c6e0:	ebc7 07a9 	rsb	r7, r7, r9, asr #2
   1c6e4:	2809      	cmp	r0, #9
   1c6e6:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
   1c6ea:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
   1c6ee:	ebac 0707 	sub.w	r7, ip, r7
   1c6f2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
   1c6f6:	bf8c      	ite	hi
   1c6f8:	f06f 0c09 	mvnhi.w	ip, #9
   1c6fc:	f04f 0c02 	movls.w	ip, #2
   1c700:	4460      	add	r0, ip
   1c702:	f10e 0e02 	add.w	lr, lr, #2
   1c706:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
   1c70a:	fba8 8e0e 	umull	r8, lr, r8, lr
   1c70e:	eba5 058c 	sub.w	r5, r5, ip, lsl #2
   1c712:	f102 0801 	add.w	r8, r2, #1
   1c716:	2801      	cmp	r0, #1
   1c718:	bf98      	it	ls
   1c71a:	3601      	addls	r6, #1
   1c71c:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
   1c720:	eba8 0e9e 	sub.w	lr, r8, lr, lsr #2
   1c724:	604b      	str	r3, [r1, #4]
   1c726:	600d      	str	r5, [r1, #0]
   1c728:	618f      	str	r7, [r1, #24]
   1c72a:	d225      	bcs.n	1c778 <gmtime_r+0x180>
   1c72c:	07a3      	lsls	r3, r4, #30
   1c72e:	d018      	beq.n	1c762 <gmtime_r+0x16a>
   1c730:	4b20      	ldr	r3, [pc, #128]	; (1c7b4 <gmtime_r+0x1bc>)
   1c732:	fba3 5304 	umull	r5, r3, r3, r4
   1c736:	09db      	lsrs	r3, r3, #7
   1c738:	f44f 75c8 	mov.w	r5, #400	; 0x190
   1c73c:	fb05 4413 	mls	r4, r5, r3, r4
   1c740:	fab4 f484 	clz	r4, r4
   1c744:	0964      	lsrs	r4, r4, #5
   1c746:	323b      	adds	r2, #59	; 0x3b
   1c748:	4422      	add	r2, r4
   1c74a:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   1c74e:	2300      	movs	r3, #0
   1c750:	6108      	str	r0, [r1, #16]
   1c752:	614e      	str	r6, [r1, #20]
   1c754:	61ca      	str	r2, [r1, #28]
   1c756:	f8c1 e00c 	str.w	lr, [r1, #12]
   1c75a:	620b      	str	r3, [r1, #32]
   1c75c:	4608      	mov	r0, r1
   1c75e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c762:	4b14      	ldr	r3, [pc, #80]	; (1c7b4 <gmtime_r+0x1bc>)
   1c764:	fba3 5304 	umull	r5, r3, r3, r4
   1c768:	095b      	lsrs	r3, r3, #5
   1c76a:	2564      	movs	r5, #100	; 0x64
   1c76c:	fb05 4313 	mls	r3, r5, r3, r4
   1c770:	2b00      	cmp	r3, #0
   1c772:	d0dd      	beq.n	1c730 <gmtime_r+0x138>
   1c774:	2401      	movs	r4, #1
   1c776:	e7e6      	b.n	1c746 <gmtime_r+0x14e>
   1c778:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
   1c77c:	e7e5      	b.n	1c74a <gmtime_r+0x152>
   1c77e:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
   1c782:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   1c786:	f505 75c0 	add.w	r5, r5, #384	; 0x180
   1c78a:	f603 236b 	addw	r3, r3, #2667	; 0xa6b
   1c78e:	e747      	b.n	1c620 <gmtime_r+0x28>
   1c790:	c22e4507 	.word	0xc22e4507
   1c794:	00015180 	.word	0x00015180
   1c798:	396b06bd 	.word	0x396b06bd
   1c79c:	fffdc54f 	.word	0xfffdc54f
   1c7a0:	396b207f 	.word	0x396b207f
   1c7a4:	59c67cd9 	.word	0x59c67cd9
   1c7a8:	91a2b3c5 	.word	0x91a2b3c5
   1c7ac:	88888889 	.word	0x88888889
   1c7b0:	92492493 	.word	0x92492493
   1c7b4:	51eb851f 	.word	0x51eb851f
   1c7b8:	0072d641 	.word	0x0072d641
   1c7bc:	6719f361 	.word	0x6719f361
   1c7c0:	e5d32b1f 	.word	0xe5d32b1f
   1c7c4:	d62b80d7 	.word	0xd62b80d7
   1c7c8:	cccccccd 	.word	0xcccccccd

0001c7cc <__retarget_lock_acquire>:
   1c7cc:	4770      	bx	lr
   1c7ce:	bf00      	nop

0001c7d0 <__retarget_lock_acquire_recursive>:
   1c7d0:	4770      	bx	lr
   1c7d2:	bf00      	nop

0001c7d4 <__retarget_lock_release>:
   1c7d4:	4770      	bx	lr
   1c7d6:	bf00      	nop

0001c7d8 <__retarget_lock_release_recursive>:
   1c7d8:	4770      	bx	lr
   1c7da:	bf00      	nop

0001c7dc <_malloc_r>:
   1c7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7e0:	f101 060b 	add.w	r6, r1, #11
   1c7e4:	2e16      	cmp	r6, #22
   1c7e6:	b083      	sub	sp, #12
   1c7e8:	4605      	mov	r5, r0
   1c7ea:	f240 809e 	bls.w	1c92a <_malloc_r+0x14e>
   1c7ee:	f036 0607 	bics.w	r6, r6, #7
   1c7f2:	f100 80bd 	bmi.w	1c970 <_malloc_r+0x194>
   1c7f6:	42b1      	cmp	r1, r6
   1c7f8:	f200 80ba 	bhi.w	1c970 <_malloc_r+0x194>
   1c7fc:	f000 faf0 	bl	1cde0 <__malloc_lock>
   1c800:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1c804:	f0c0 8293 	bcc.w	1cd2e <_malloc_r+0x552>
   1c808:	0a73      	lsrs	r3, r6, #9
   1c80a:	f000 80b8 	beq.w	1c97e <_malloc_r+0x1a2>
   1c80e:	2b04      	cmp	r3, #4
   1c810:	f200 8179 	bhi.w	1cb06 <_malloc_r+0x32a>
   1c814:	09b3      	lsrs	r3, r6, #6
   1c816:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1c81a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1c81e:	00c3      	lsls	r3, r0, #3
   1c820:	4fbf      	ldr	r7, [pc, #764]	; (1cb20 <_malloc_r+0x344>)
   1c822:	443b      	add	r3, r7
   1c824:	f1a3 0108 	sub.w	r1, r3, #8
   1c828:	685c      	ldr	r4, [r3, #4]
   1c82a:	42a1      	cmp	r1, r4
   1c82c:	d106      	bne.n	1c83c <_malloc_r+0x60>
   1c82e:	e00c      	b.n	1c84a <_malloc_r+0x6e>
   1c830:	2a00      	cmp	r2, #0
   1c832:	f280 80aa 	bge.w	1c98a <_malloc_r+0x1ae>
   1c836:	68e4      	ldr	r4, [r4, #12]
   1c838:	42a1      	cmp	r1, r4
   1c83a:	d006      	beq.n	1c84a <_malloc_r+0x6e>
   1c83c:	6863      	ldr	r3, [r4, #4]
   1c83e:	f023 0303 	bic.w	r3, r3, #3
   1c842:	1b9a      	subs	r2, r3, r6
   1c844:	2a0f      	cmp	r2, #15
   1c846:	ddf3      	ble.n	1c830 <_malloc_r+0x54>
   1c848:	4670      	mov	r0, lr
   1c84a:	693c      	ldr	r4, [r7, #16]
   1c84c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1cb34 <_malloc_r+0x358>
   1c850:	4574      	cmp	r4, lr
   1c852:	f000 81ab 	beq.w	1cbac <_malloc_r+0x3d0>
   1c856:	6863      	ldr	r3, [r4, #4]
   1c858:	f023 0303 	bic.w	r3, r3, #3
   1c85c:	1b9a      	subs	r2, r3, r6
   1c85e:	2a0f      	cmp	r2, #15
   1c860:	f300 8190 	bgt.w	1cb84 <_malloc_r+0x3a8>
   1c864:	2a00      	cmp	r2, #0
   1c866:	f8c7 e014 	str.w	lr, [r7, #20]
   1c86a:	f8c7 e010 	str.w	lr, [r7, #16]
   1c86e:	f280 809d 	bge.w	1c9ac <_malloc_r+0x1d0>
   1c872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1c876:	f080 8161 	bcs.w	1cb3c <_malloc_r+0x360>
   1c87a:	08db      	lsrs	r3, r3, #3
   1c87c:	f103 0c01 	add.w	ip, r3, #1
   1c880:	1099      	asrs	r1, r3, #2
   1c882:	687a      	ldr	r2, [r7, #4]
   1c884:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1c888:	f8c4 8008 	str.w	r8, [r4, #8]
   1c88c:	2301      	movs	r3, #1
   1c88e:	408b      	lsls	r3, r1
   1c890:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1c894:	4313      	orrs	r3, r2
   1c896:	3908      	subs	r1, #8
   1c898:	60e1      	str	r1, [r4, #12]
   1c89a:	607b      	str	r3, [r7, #4]
   1c89c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1c8a0:	f8c8 400c 	str.w	r4, [r8, #12]
   1c8a4:	1082      	asrs	r2, r0, #2
   1c8a6:	2401      	movs	r4, #1
   1c8a8:	4094      	lsls	r4, r2
   1c8aa:	429c      	cmp	r4, r3
   1c8ac:	f200 808b 	bhi.w	1c9c6 <_malloc_r+0x1ea>
   1c8b0:	421c      	tst	r4, r3
   1c8b2:	d106      	bne.n	1c8c2 <_malloc_r+0xe6>
   1c8b4:	f020 0003 	bic.w	r0, r0, #3
   1c8b8:	0064      	lsls	r4, r4, #1
   1c8ba:	421c      	tst	r4, r3
   1c8bc:	f100 0004 	add.w	r0, r0, #4
   1c8c0:	d0fa      	beq.n	1c8b8 <_malloc_r+0xdc>
   1c8c2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1c8c6:	46cc      	mov	ip, r9
   1c8c8:	4680      	mov	r8, r0
   1c8ca:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1c8ce:	459c      	cmp	ip, r3
   1c8d0:	d107      	bne.n	1c8e2 <_malloc_r+0x106>
   1c8d2:	e16d      	b.n	1cbb0 <_malloc_r+0x3d4>
   1c8d4:	2a00      	cmp	r2, #0
   1c8d6:	f280 817b 	bge.w	1cbd0 <_malloc_r+0x3f4>
   1c8da:	68db      	ldr	r3, [r3, #12]
   1c8dc:	459c      	cmp	ip, r3
   1c8de:	f000 8167 	beq.w	1cbb0 <_malloc_r+0x3d4>
   1c8e2:	6859      	ldr	r1, [r3, #4]
   1c8e4:	f021 0103 	bic.w	r1, r1, #3
   1c8e8:	1b8a      	subs	r2, r1, r6
   1c8ea:	2a0f      	cmp	r2, #15
   1c8ec:	ddf2      	ble.n	1c8d4 <_malloc_r+0xf8>
   1c8ee:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1c8f2:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1c8f6:	9300      	str	r3, [sp, #0]
   1c8f8:	199c      	adds	r4, r3, r6
   1c8fa:	4628      	mov	r0, r5
   1c8fc:	f046 0601 	orr.w	r6, r6, #1
   1c900:	f042 0501 	orr.w	r5, r2, #1
   1c904:	605e      	str	r6, [r3, #4]
   1c906:	f8c8 c00c 	str.w	ip, [r8, #12]
   1c90a:	f8cc 8008 	str.w	r8, [ip, #8]
   1c90e:	617c      	str	r4, [r7, #20]
   1c910:	613c      	str	r4, [r7, #16]
   1c912:	f8c4 e00c 	str.w	lr, [r4, #12]
   1c916:	f8c4 e008 	str.w	lr, [r4, #8]
   1c91a:	6065      	str	r5, [r4, #4]
   1c91c:	505a      	str	r2, [r3, r1]
   1c91e:	f000 fa65 	bl	1cdec <__malloc_unlock>
   1c922:	9b00      	ldr	r3, [sp, #0]
   1c924:	f103 0408 	add.w	r4, r3, #8
   1c928:	e01e      	b.n	1c968 <_malloc_r+0x18c>
   1c92a:	2910      	cmp	r1, #16
   1c92c:	d820      	bhi.n	1c970 <_malloc_r+0x194>
   1c92e:	f000 fa57 	bl	1cde0 <__malloc_lock>
   1c932:	2610      	movs	r6, #16
   1c934:	2318      	movs	r3, #24
   1c936:	2002      	movs	r0, #2
   1c938:	4f79      	ldr	r7, [pc, #484]	; (1cb20 <_malloc_r+0x344>)
   1c93a:	443b      	add	r3, r7
   1c93c:	f1a3 0208 	sub.w	r2, r3, #8
   1c940:	685c      	ldr	r4, [r3, #4]
   1c942:	4294      	cmp	r4, r2
   1c944:	f000 813d 	beq.w	1cbc2 <_malloc_r+0x3e6>
   1c948:	6863      	ldr	r3, [r4, #4]
   1c94a:	68e1      	ldr	r1, [r4, #12]
   1c94c:	68a6      	ldr	r6, [r4, #8]
   1c94e:	f023 0303 	bic.w	r3, r3, #3
   1c952:	4423      	add	r3, r4
   1c954:	4628      	mov	r0, r5
   1c956:	685a      	ldr	r2, [r3, #4]
   1c958:	60f1      	str	r1, [r6, #12]
   1c95a:	f042 0201 	orr.w	r2, r2, #1
   1c95e:	608e      	str	r6, [r1, #8]
   1c960:	605a      	str	r2, [r3, #4]
   1c962:	f000 fa43 	bl	1cdec <__malloc_unlock>
   1c966:	3408      	adds	r4, #8
   1c968:	4620      	mov	r0, r4
   1c96a:	b003      	add	sp, #12
   1c96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c970:	2400      	movs	r4, #0
   1c972:	230c      	movs	r3, #12
   1c974:	4620      	mov	r0, r4
   1c976:	602b      	str	r3, [r5, #0]
   1c978:	b003      	add	sp, #12
   1c97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c97e:	2040      	movs	r0, #64	; 0x40
   1c980:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c984:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1c988:	e74a      	b.n	1c820 <_malloc_r+0x44>
   1c98a:	4423      	add	r3, r4
   1c98c:	68e1      	ldr	r1, [r4, #12]
   1c98e:	685a      	ldr	r2, [r3, #4]
   1c990:	68a6      	ldr	r6, [r4, #8]
   1c992:	f042 0201 	orr.w	r2, r2, #1
   1c996:	60f1      	str	r1, [r6, #12]
   1c998:	4628      	mov	r0, r5
   1c99a:	608e      	str	r6, [r1, #8]
   1c99c:	605a      	str	r2, [r3, #4]
   1c99e:	f000 fa25 	bl	1cdec <__malloc_unlock>
   1c9a2:	3408      	adds	r4, #8
   1c9a4:	4620      	mov	r0, r4
   1c9a6:	b003      	add	sp, #12
   1c9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9ac:	4423      	add	r3, r4
   1c9ae:	4628      	mov	r0, r5
   1c9b0:	685a      	ldr	r2, [r3, #4]
   1c9b2:	f042 0201 	orr.w	r2, r2, #1
   1c9b6:	605a      	str	r2, [r3, #4]
   1c9b8:	f000 fa18 	bl	1cdec <__malloc_unlock>
   1c9bc:	3408      	adds	r4, #8
   1c9be:	4620      	mov	r0, r4
   1c9c0:	b003      	add	sp, #12
   1c9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9c6:	68bc      	ldr	r4, [r7, #8]
   1c9c8:	6863      	ldr	r3, [r4, #4]
   1c9ca:	f023 0803 	bic.w	r8, r3, #3
   1c9ce:	45b0      	cmp	r8, r6
   1c9d0:	d304      	bcc.n	1c9dc <_malloc_r+0x200>
   1c9d2:	eba8 0306 	sub.w	r3, r8, r6
   1c9d6:	2b0f      	cmp	r3, #15
   1c9d8:	f300 8085 	bgt.w	1cae6 <_malloc_r+0x30a>
   1c9dc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1cb38 <_malloc_r+0x35c>
   1c9e0:	4b50      	ldr	r3, [pc, #320]	; (1cb24 <_malloc_r+0x348>)
   1c9e2:	f8d9 2000 	ldr.w	r2, [r9]
   1c9e6:	681b      	ldr	r3, [r3, #0]
   1c9e8:	3201      	adds	r2, #1
   1c9ea:	4433      	add	r3, r6
   1c9ec:	eb04 0a08 	add.w	sl, r4, r8
   1c9f0:	f000 8155 	beq.w	1cc9e <_malloc_r+0x4c2>
   1c9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1c9f8:	330f      	adds	r3, #15
   1c9fa:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1c9fe:	f02b 0b0f 	bic.w	fp, fp, #15
   1ca02:	4659      	mov	r1, fp
   1ca04:	4628      	mov	r0, r5
   1ca06:	f000 f9f7 	bl	1cdf8 <_sbrk_r>
   1ca0a:	1c41      	adds	r1, r0, #1
   1ca0c:	4602      	mov	r2, r0
   1ca0e:	f000 80fc 	beq.w	1cc0a <_malloc_r+0x42e>
   1ca12:	4582      	cmp	sl, r0
   1ca14:	f200 80f7 	bhi.w	1cc06 <_malloc_r+0x42a>
   1ca18:	4b43      	ldr	r3, [pc, #268]	; (1cb28 <_malloc_r+0x34c>)
   1ca1a:	6819      	ldr	r1, [r3, #0]
   1ca1c:	4459      	add	r1, fp
   1ca1e:	6019      	str	r1, [r3, #0]
   1ca20:	f000 814d 	beq.w	1ccbe <_malloc_r+0x4e2>
   1ca24:	f8d9 0000 	ldr.w	r0, [r9]
   1ca28:	3001      	adds	r0, #1
   1ca2a:	bf1b      	ittet	ne
   1ca2c:	eba2 0a0a 	subne.w	sl, r2, sl
   1ca30:	4451      	addne	r1, sl
   1ca32:	f8c9 2000 	streq.w	r2, [r9]
   1ca36:	6019      	strne	r1, [r3, #0]
   1ca38:	f012 0107 	ands.w	r1, r2, #7
   1ca3c:	f000 8115 	beq.w	1cc6a <_malloc_r+0x48e>
   1ca40:	f1c1 0008 	rsb	r0, r1, #8
   1ca44:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1ca48:	4402      	add	r2, r0
   1ca4a:	3108      	adds	r1, #8
   1ca4c:	eb02 090b 	add.w	r9, r2, fp
   1ca50:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1ca54:	eba1 0909 	sub.w	r9, r1, r9
   1ca58:	4649      	mov	r1, r9
   1ca5a:	4628      	mov	r0, r5
   1ca5c:	9301      	str	r3, [sp, #4]
   1ca5e:	9200      	str	r2, [sp, #0]
   1ca60:	f000 f9ca 	bl	1cdf8 <_sbrk_r>
   1ca64:	1c43      	adds	r3, r0, #1
   1ca66:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1ca6a:	f000 8143 	beq.w	1ccf4 <_malloc_r+0x518>
   1ca6e:	1a80      	subs	r0, r0, r2
   1ca70:	4448      	add	r0, r9
   1ca72:	f040 0001 	orr.w	r0, r0, #1
   1ca76:	6819      	ldr	r1, [r3, #0]
   1ca78:	60ba      	str	r2, [r7, #8]
   1ca7a:	4449      	add	r1, r9
   1ca7c:	42bc      	cmp	r4, r7
   1ca7e:	6050      	str	r0, [r2, #4]
   1ca80:	6019      	str	r1, [r3, #0]
   1ca82:	d017      	beq.n	1cab4 <_malloc_r+0x2d8>
   1ca84:	f1b8 0f0f 	cmp.w	r8, #15
   1ca88:	f240 80fb 	bls.w	1cc82 <_malloc_r+0x4a6>
   1ca8c:	6860      	ldr	r0, [r4, #4]
   1ca8e:	f1a8 020c 	sub.w	r2, r8, #12
   1ca92:	f022 0207 	bic.w	r2, r2, #7
   1ca96:	eb04 0e02 	add.w	lr, r4, r2
   1ca9a:	f000 0001 	and.w	r0, r0, #1
   1ca9e:	f04f 0c05 	mov.w	ip, #5
   1caa2:	4310      	orrs	r0, r2
   1caa4:	2a0f      	cmp	r2, #15
   1caa6:	6060      	str	r0, [r4, #4]
   1caa8:	f8ce c004 	str.w	ip, [lr, #4]
   1caac:	f8ce c008 	str.w	ip, [lr, #8]
   1cab0:	f200 8117 	bhi.w	1cce2 <_malloc_r+0x506>
   1cab4:	4b1d      	ldr	r3, [pc, #116]	; (1cb2c <_malloc_r+0x350>)
   1cab6:	68bc      	ldr	r4, [r7, #8]
   1cab8:	681a      	ldr	r2, [r3, #0]
   1caba:	4291      	cmp	r1, r2
   1cabc:	bf88      	it	hi
   1cabe:	6019      	strhi	r1, [r3, #0]
   1cac0:	4b1b      	ldr	r3, [pc, #108]	; (1cb30 <_malloc_r+0x354>)
   1cac2:	681a      	ldr	r2, [r3, #0]
   1cac4:	4291      	cmp	r1, r2
   1cac6:	6862      	ldr	r2, [r4, #4]
   1cac8:	bf88      	it	hi
   1caca:	6019      	strhi	r1, [r3, #0]
   1cacc:	f022 0203 	bic.w	r2, r2, #3
   1cad0:	4296      	cmp	r6, r2
   1cad2:	eba2 0306 	sub.w	r3, r2, r6
   1cad6:	d801      	bhi.n	1cadc <_malloc_r+0x300>
   1cad8:	2b0f      	cmp	r3, #15
   1cada:	dc04      	bgt.n	1cae6 <_malloc_r+0x30a>
   1cadc:	4628      	mov	r0, r5
   1cade:	f000 f985 	bl	1cdec <__malloc_unlock>
   1cae2:	2400      	movs	r4, #0
   1cae4:	e740      	b.n	1c968 <_malloc_r+0x18c>
   1cae6:	19a2      	adds	r2, r4, r6
   1cae8:	f043 0301 	orr.w	r3, r3, #1
   1caec:	f046 0601 	orr.w	r6, r6, #1
   1caf0:	6066      	str	r6, [r4, #4]
   1caf2:	4628      	mov	r0, r5
   1caf4:	60ba      	str	r2, [r7, #8]
   1caf6:	6053      	str	r3, [r2, #4]
   1caf8:	f000 f978 	bl	1cdec <__malloc_unlock>
   1cafc:	3408      	adds	r4, #8
   1cafe:	4620      	mov	r0, r4
   1cb00:	b003      	add	sp, #12
   1cb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb06:	2b14      	cmp	r3, #20
   1cb08:	d971      	bls.n	1cbee <_malloc_r+0x412>
   1cb0a:	2b54      	cmp	r3, #84	; 0x54
   1cb0c:	f200 80a3 	bhi.w	1cc56 <_malloc_r+0x47a>
   1cb10:	0b33      	lsrs	r3, r6, #12
   1cb12:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1cb16:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1cb1a:	00c3      	lsls	r3, r0, #3
   1cb1c:	e680      	b.n	1c820 <_malloc_r+0x44>
   1cb1e:	bf00      	nop
   1cb20:	200006c4 	.word	0x200006c4
   1cb24:	2000a900 	.word	0x2000a900
   1cb28:	2000a8d0 	.word	0x2000a8d0
   1cb2c:	2000a8f8 	.word	0x2000a8f8
   1cb30:	2000a8fc 	.word	0x2000a8fc
   1cb34:	200006cc 	.word	0x200006cc
   1cb38:	20000acc 	.word	0x20000acc
   1cb3c:	0a5a      	lsrs	r2, r3, #9
   1cb3e:	2a04      	cmp	r2, #4
   1cb40:	d95b      	bls.n	1cbfa <_malloc_r+0x41e>
   1cb42:	2a14      	cmp	r2, #20
   1cb44:	f200 80ae 	bhi.w	1cca4 <_malloc_r+0x4c8>
   1cb48:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1cb4c:	00c9      	lsls	r1, r1, #3
   1cb4e:	325b      	adds	r2, #91	; 0x5b
   1cb50:	eb07 0c01 	add.w	ip, r7, r1
   1cb54:	5879      	ldr	r1, [r7, r1]
   1cb56:	f1ac 0c08 	sub.w	ip, ip, #8
   1cb5a:	458c      	cmp	ip, r1
   1cb5c:	f000 8088 	beq.w	1cc70 <_malloc_r+0x494>
   1cb60:	684a      	ldr	r2, [r1, #4]
   1cb62:	f022 0203 	bic.w	r2, r2, #3
   1cb66:	4293      	cmp	r3, r2
   1cb68:	d273      	bcs.n	1cc52 <_malloc_r+0x476>
   1cb6a:	6889      	ldr	r1, [r1, #8]
   1cb6c:	458c      	cmp	ip, r1
   1cb6e:	d1f7      	bne.n	1cb60 <_malloc_r+0x384>
   1cb70:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1cb74:	687b      	ldr	r3, [r7, #4]
   1cb76:	60e2      	str	r2, [r4, #12]
   1cb78:	f8c4 c008 	str.w	ip, [r4, #8]
   1cb7c:	6094      	str	r4, [r2, #8]
   1cb7e:	f8cc 400c 	str.w	r4, [ip, #12]
   1cb82:	e68f      	b.n	1c8a4 <_malloc_r+0xc8>
   1cb84:	19a1      	adds	r1, r4, r6
   1cb86:	f046 0c01 	orr.w	ip, r6, #1
   1cb8a:	f042 0601 	orr.w	r6, r2, #1
   1cb8e:	f8c4 c004 	str.w	ip, [r4, #4]
   1cb92:	4628      	mov	r0, r5
   1cb94:	6179      	str	r1, [r7, #20]
   1cb96:	6139      	str	r1, [r7, #16]
   1cb98:	f8c1 e00c 	str.w	lr, [r1, #12]
   1cb9c:	f8c1 e008 	str.w	lr, [r1, #8]
   1cba0:	604e      	str	r6, [r1, #4]
   1cba2:	50e2      	str	r2, [r4, r3]
   1cba4:	f000 f922 	bl	1cdec <__malloc_unlock>
   1cba8:	3408      	adds	r4, #8
   1cbaa:	e6dd      	b.n	1c968 <_malloc_r+0x18c>
   1cbac:	687b      	ldr	r3, [r7, #4]
   1cbae:	e679      	b.n	1c8a4 <_malloc_r+0xc8>
   1cbb0:	f108 0801 	add.w	r8, r8, #1
   1cbb4:	f018 0f03 	tst.w	r8, #3
   1cbb8:	f10c 0c08 	add.w	ip, ip, #8
   1cbbc:	f47f ae85 	bne.w	1c8ca <_malloc_r+0xee>
   1cbc0:	e02d      	b.n	1cc1e <_malloc_r+0x442>
   1cbc2:	68dc      	ldr	r4, [r3, #12]
   1cbc4:	42a3      	cmp	r3, r4
   1cbc6:	bf08      	it	eq
   1cbc8:	3002      	addeq	r0, #2
   1cbca:	f43f ae3e 	beq.w	1c84a <_malloc_r+0x6e>
   1cbce:	e6bb      	b.n	1c948 <_malloc_r+0x16c>
   1cbd0:	4419      	add	r1, r3
   1cbd2:	461c      	mov	r4, r3
   1cbd4:	684a      	ldr	r2, [r1, #4]
   1cbd6:	68db      	ldr	r3, [r3, #12]
   1cbd8:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1cbdc:	f042 0201 	orr.w	r2, r2, #1
   1cbe0:	604a      	str	r2, [r1, #4]
   1cbe2:	4628      	mov	r0, r5
   1cbe4:	60f3      	str	r3, [r6, #12]
   1cbe6:	609e      	str	r6, [r3, #8]
   1cbe8:	f000 f900 	bl	1cdec <__malloc_unlock>
   1cbec:	e6bc      	b.n	1c968 <_malloc_r+0x18c>
   1cbee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1cbf2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1cbf6:	00c3      	lsls	r3, r0, #3
   1cbf8:	e612      	b.n	1c820 <_malloc_r+0x44>
   1cbfa:	099a      	lsrs	r2, r3, #6
   1cbfc:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1cc00:	00c9      	lsls	r1, r1, #3
   1cc02:	3238      	adds	r2, #56	; 0x38
   1cc04:	e7a4      	b.n	1cb50 <_malloc_r+0x374>
   1cc06:	42bc      	cmp	r4, r7
   1cc08:	d054      	beq.n	1ccb4 <_malloc_r+0x4d8>
   1cc0a:	68bc      	ldr	r4, [r7, #8]
   1cc0c:	6862      	ldr	r2, [r4, #4]
   1cc0e:	f022 0203 	bic.w	r2, r2, #3
   1cc12:	e75d      	b.n	1cad0 <_malloc_r+0x2f4>
   1cc14:	f859 3908 	ldr.w	r3, [r9], #-8
   1cc18:	4599      	cmp	r9, r3
   1cc1a:	f040 8086 	bne.w	1cd2a <_malloc_r+0x54e>
   1cc1e:	f010 0f03 	tst.w	r0, #3
   1cc22:	f100 30ff 	add.w	r0, r0, #4294967295
   1cc26:	d1f5      	bne.n	1cc14 <_malloc_r+0x438>
   1cc28:	687b      	ldr	r3, [r7, #4]
   1cc2a:	ea23 0304 	bic.w	r3, r3, r4
   1cc2e:	607b      	str	r3, [r7, #4]
   1cc30:	0064      	lsls	r4, r4, #1
   1cc32:	429c      	cmp	r4, r3
   1cc34:	f63f aec7 	bhi.w	1c9c6 <_malloc_r+0x1ea>
   1cc38:	2c00      	cmp	r4, #0
   1cc3a:	f43f aec4 	beq.w	1c9c6 <_malloc_r+0x1ea>
   1cc3e:	421c      	tst	r4, r3
   1cc40:	4640      	mov	r0, r8
   1cc42:	f47f ae3e 	bne.w	1c8c2 <_malloc_r+0xe6>
   1cc46:	0064      	lsls	r4, r4, #1
   1cc48:	421c      	tst	r4, r3
   1cc4a:	f100 0004 	add.w	r0, r0, #4
   1cc4e:	d0fa      	beq.n	1cc46 <_malloc_r+0x46a>
   1cc50:	e637      	b.n	1c8c2 <_malloc_r+0xe6>
   1cc52:	468c      	mov	ip, r1
   1cc54:	e78c      	b.n	1cb70 <_malloc_r+0x394>
   1cc56:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1cc5a:	d815      	bhi.n	1cc88 <_malloc_r+0x4ac>
   1cc5c:	0bf3      	lsrs	r3, r6, #15
   1cc5e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1cc62:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1cc66:	00c3      	lsls	r3, r0, #3
   1cc68:	e5da      	b.n	1c820 <_malloc_r+0x44>
   1cc6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1cc6e:	e6ed      	b.n	1ca4c <_malloc_r+0x270>
   1cc70:	687b      	ldr	r3, [r7, #4]
   1cc72:	1092      	asrs	r2, r2, #2
   1cc74:	2101      	movs	r1, #1
   1cc76:	fa01 f202 	lsl.w	r2, r1, r2
   1cc7a:	4313      	orrs	r3, r2
   1cc7c:	607b      	str	r3, [r7, #4]
   1cc7e:	4662      	mov	r2, ip
   1cc80:	e779      	b.n	1cb76 <_malloc_r+0x39a>
   1cc82:	2301      	movs	r3, #1
   1cc84:	6053      	str	r3, [r2, #4]
   1cc86:	e729      	b.n	1cadc <_malloc_r+0x300>
   1cc88:	f240 5254 	movw	r2, #1364	; 0x554
   1cc8c:	4293      	cmp	r3, r2
   1cc8e:	d822      	bhi.n	1ccd6 <_malloc_r+0x4fa>
   1cc90:	0cb3      	lsrs	r3, r6, #18
   1cc92:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1cc96:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1cc9a:	00c3      	lsls	r3, r0, #3
   1cc9c:	e5c0      	b.n	1c820 <_malloc_r+0x44>
   1cc9e:	f103 0b10 	add.w	fp, r3, #16
   1cca2:	e6ae      	b.n	1ca02 <_malloc_r+0x226>
   1cca4:	2a54      	cmp	r2, #84	; 0x54
   1cca6:	d829      	bhi.n	1ccfc <_malloc_r+0x520>
   1cca8:	0b1a      	lsrs	r2, r3, #12
   1ccaa:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1ccae:	00c9      	lsls	r1, r1, #3
   1ccb0:	326e      	adds	r2, #110	; 0x6e
   1ccb2:	e74d      	b.n	1cb50 <_malloc_r+0x374>
   1ccb4:	4b20      	ldr	r3, [pc, #128]	; (1cd38 <_malloc_r+0x55c>)
   1ccb6:	6819      	ldr	r1, [r3, #0]
   1ccb8:	4459      	add	r1, fp
   1ccba:	6019      	str	r1, [r3, #0]
   1ccbc:	e6b2      	b.n	1ca24 <_malloc_r+0x248>
   1ccbe:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1ccc2:	2800      	cmp	r0, #0
   1ccc4:	f47f aeae 	bne.w	1ca24 <_malloc_r+0x248>
   1ccc8:	eb08 030b 	add.w	r3, r8, fp
   1cccc:	68ba      	ldr	r2, [r7, #8]
   1ccce:	f043 0301 	orr.w	r3, r3, #1
   1ccd2:	6053      	str	r3, [r2, #4]
   1ccd4:	e6ee      	b.n	1cab4 <_malloc_r+0x2d8>
   1ccd6:	207f      	movs	r0, #127	; 0x7f
   1ccd8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1ccdc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1cce0:	e59e      	b.n	1c820 <_malloc_r+0x44>
   1cce2:	f104 0108 	add.w	r1, r4, #8
   1cce6:	4628      	mov	r0, r5
   1cce8:	9300      	str	r3, [sp, #0]
   1ccea:	f001 ff91 	bl	1ec10 <_free_r>
   1ccee:	9b00      	ldr	r3, [sp, #0]
   1ccf0:	6819      	ldr	r1, [r3, #0]
   1ccf2:	e6df      	b.n	1cab4 <_malloc_r+0x2d8>
   1ccf4:	2001      	movs	r0, #1
   1ccf6:	f04f 0900 	mov.w	r9, #0
   1ccfa:	e6bc      	b.n	1ca76 <_malloc_r+0x29a>
   1ccfc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1cd00:	d805      	bhi.n	1cd0e <_malloc_r+0x532>
   1cd02:	0bda      	lsrs	r2, r3, #15
   1cd04:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1cd08:	00c9      	lsls	r1, r1, #3
   1cd0a:	3277      	adds	r2, #119	; 0x77
   1cd0c:	e720      	b.n	1cb50 <_malloc_r+0x374>
   1cd0e:	f240 5154 	movw	r1, #1364	; 0x554
   1cd12:	428a      	cmp	r2, r1
   1cd14:	d805      	bhi.n	1cd22 <_malloc_r+0x546>
   1cd16:	0c9a      	lsrs	r2, r3, #18
   1cd18:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1cd1c:	00c9      	lsls	r1, r1, #3
   1cd1e:	327c      	adds	r2, #124	; 0x7c
   1cd20:	e716      	b.n	1cb50 <_malloc_r+0x374>
   1cd22:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1cd26:	227e      	movs	r2, #126	; 0x7e
   1cd28:	e712      	b.n	1cb50 <_malloc_r+0x374>
   1cd2a:	687b      	ldr	r3, [r7, #4]
   1cd2c:	e780      	b.n	1cc30 <_malloc_r+0x454>
   1cd2e:	08f0      	lsrs	r0, r6, #3
   1cd30:	f106 0308 	add.w	r3, r6, #8
   1cd34:	e600      	b.n	1c938 <_malloc_r+0x15c>
   1cd36:	bf00      	nop
   1cd38:	2000a8d0 	.word	0x2000a8d0
   1cd3c:	00000000 	.word	0x00000000

0001cd40 <memchr>:
   1cd40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1cd44:	2a10      	cmp	r2, #16
   1cd46:	db2b      	blt.n	1cda0 <memchr+0x60>
   1cd48:	f010 0f07 	tst.w	r0, #7
   1cd4c:	d008      	beq.n	1cd60 <memchr+0x20>
   1cd4e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1cd52:	3a01      	subs	r2, #1
   1cd54:	428b      	cmp	r3, r1
   1cd56:	d02d      	beq.n	1cdb4 <memchr+0x74>
   1cd58:	f010 0f07 	tst.w	r0, #7
   1cd5c:	b342      	cbz	r2, 1cdb0 <memchr+0x70>
   1cd5e:	d1f6      	bne.n	1cd4e <memchr+0xe>
   1cd60:	b4f0      	push	{r4, r5, r6, r7}
   1cd62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1cd66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1cd6a:	f022 0407 	bic.w	r4, r2, #7
   1cd6e:	f07f 0700 	mvns.w	r7, #0
   1cd72:	2300      	movs	r3, #0
   1cd74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1cd78:	3c08      	subs	r4, #8
   1cd7a:	ea85 0501 	eor.w	r5, r5, r1
   1cd7e:	ea86 0601 	eor.w	r6, r6, r1
   1cd82:	fa85 f547 	uadd8	r5, r5, r7
   1cd86:	faa3 f587 	sel	r5, r3, r7
   1cd8a:	fa86 f647 	uadd8	r6, r6, r7
   1cd8e:	faa5 f687 	sel	r6, r5, r7
   1cd92:	b98e      	cbnz	r6, 1cdb8 <memchr+0x78>
   1cd94:	d1ee      	bne.n	1cd74 <memchr+0x34>
   1cd96:	bcf0      	pop	{r4, r5, r6, r7}
   1cd98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1cd9c:	f002 0207 	and.w	r2, r2, #7
   1cda0:	b132      	cbz	r2, 1cdb0 <memchr+0x70>
   1cda2:	f810 3b01 	ldrb.w	r3, [r0], #1
   1cda6:	3a01      	subs	r2, #1
   1cda8:	ea83 0301 	eor.w	r3, r3, r1
   1cdac:	b113      	cbz	r3, 1cdb4 <memchr+0x74>
   1cdae:	d1f8      	bne.n	1cda2 <memchr+0x62>
   1cdb0:	2000      	movs	r0, #0
   1cdb2:	4770      	bx	lr
   1cdb4:	3801      	subs	r0, #1
   1cdb6:	4770      	bx	lr
   1cdb8:	2d00      	cmp	r5, #0
   1cdba:	bf06      	itte	eq
   1cdbc:	4635      	moveq	r5, r6
   1cdbe:	3803      	subeq	r0, #3
   1cdc0:	3807      	subne	r0, #7
   1cdc2:	f015 0f01 	tst.w	r5, #1
   1cdc6:	d107      	bne.n	1cdd8 <memchr+0x98>
   1cdc8:	3001      	adds	r0, #1
   1cdca:	f415 7f80 	tst.w	r5, #256	; 0x100
   1cdce:	bf02      	ittt	eq
   1cdd0:	3001      	addeq	r0, #1
   1cdd2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1cdd6:	3001      	addeq	r0, #1
   1cdd8:	bcf0      	pop	{r4, r5, r6, r7}
   1cdda:	3801      	subs	r0, #1
   1cddc:	4770      	bx	lr
   1cdde:	bf00      	nop

0001cde0 <__malloc_lock>:
   1cde0:	4801      	ldr	r0, [pc, #4]	; (1cde8 <__malloc_lock+0x8>)
   1cde2:	f7ff bcf5 	b.w	1c7d0 <__retarget_lock_acquire_recursive>
   1cde6:	bf00      	nop
   1cde8:	2000ac14 	.word	0x2000ac14

0001cdec <__malloc_unlock>:
   1cdec:	4801      	ldr	r0, [pc, #4]	; (1cdf4 <__malloc_unlock+0x8>)
   1cdee:	f7ff bcf3 	b.w	1c7d8 <__retarget_lock_release_recursive>
   1cdf2:	bf00      	nop
   1cdf4:	2000ac14 	.word	0x2000ac14

0001cdf8 <_sbrk_r>:
   1cdf8:	b538      	push	{r3, r4, r5, lr}
   1cdfa:	4c07      	ldr	r4, [pc, #28]	; (1ce18 <_sbrk_r+0x20>)
   1cdfc:	2300      	movs	r3, #0
   1cdfe:	4605      	mov	r5, r0
   1ce00:	4608      	mov	r0, r1
   1ce02:	6023      	str	r3, [r4, #0]
   1ce04:	f7f7 fc37 	bl	14676 <_sbrk>
   1ce08:	1c43      	adds	r3, r0, #1
   1ce0a:	d000      	beq.n	1ce0e <_sbrk_r+0x16>
   1ce0c:	bd38      	pop	{r3, r4, r5, pc}
   1ce0e:	6823      	ldr	r3, [r4, #0]
   1ce10:	2b00      	cmp	r3, #0
   1ce12:	d0fb      	beq.n	1ce0c <_sbrk_r+0x14>
   1ce14:	602b      	str	r3, [r5, #0]
   1ce16:	bd38      	pop	{r3, r4, r5, pc}
   1ce18:	2000ac28 	.word	0x2000ac28

0001ce1c <siprintf>:
   1ce1c:	b40e      	push	{r1, r2, r3}
   1ce1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ce20:	b09c      	sub	sp, #112	; 0x70
   1ce22:	ab21      	add	r3, sp, #132	; 0x84
   1ce24:	490f      	ldr	r1, [pc, #60]	; (1ce64 <siprintf+0x48>)
   1ce26:	f853 2b04 	ldr.w	r2, [r3], #4
   1ce2a:	9301      	str	r3, [sp, #4]
   1ce2c:	4605      	mov	r5, r0
   1ce2e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1ce32:	6808      	ldr	r0, [r1, #0]
   1ce34:	9502      	str	r5, [sp, #8]
   1ce36:	f44f 7702 	mov.w	r7, #520	; 0x208
   1ce3a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1ce3e:	a902      	add	r1, sp, #8
   1ce40:	9506      	str	r5, [sp, #24]
   1ce42:	f8ad 7014 	strh.w	r7, [sp, #20]
   1ce46:	9404      	str	r4, [sp, #16]
   1ce48:	9407      	str	r4, [sp, #28]
   1ce4a:	f8ad 6016 	strh.w	r6, [sp, #22]
   1ce4e:	f000 fbaf 	bl	1d5b0 <_svfiprintf_r>
   1ce52:	9b02      	ldr	r3, [sp, #8]
   1ce54:	2200      	movs	r2, #0
   1ce56:	701a      	strb	r2, [r3, #0]
   1ce58:	b01c      	add	sp, #112	; 0x70
   1ce5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1ce5e:	b003      	add	sp, #12
   1ce60:	4770      	bx	lr
   1ce62:	bf00      	nop
   1ce64:	20000248 	.word	0x20000248

0001ce68 <siscanf>:
   1ce68:	b40e      	push	{r1, r2, r3}
   1ce6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ce6c:	b09c      	sub	sp, #112	; 0x70
   1ce6e:	ac21      	add	r4, sp, #132	; 0x84
   1ce70:	f44f 7201 	mov.w	r2, #516	; 0x204
   1ce74:	f854 6b04 	ldr.w	r6, [r4], #4
   1ce78:	f8ad 2014 	strh.w	r2, [sp, #20]
   1ce7c:	9002      	str	r0, [sp, #8]
   1ce7e:	9006      	str	r0, [sp, #24]
   1ce80:	f7fe ffde 	bl	1be40 <strlen>
   1ce84:	4b0c      	ldr	r3, [pc, #48]	; (1ceb8 <siscanf+0x50>)
   1ce86:	9401      	str	r4, [sp, #4]
   1ce88:	4605      	mov	r5, r0
   1ce8a:	4632      	mov	r2, r6
   1ce8c:	4f0b      	ldr	r7, [pc, #44]	; (1cebc <siscanf+0x54>)
   1ce8e:	6818      	ldr	r0, [r3, #0]
   1ce90:	9503      	str	r5, [sp, #12]
   1ce92:	4623      	mov	r3, r4
   1ce94:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1ce98:	2400      	movs	r4, #0
   1ce9a:	a902      	add	r1, sp, #8
   1ce9c:	9507      	str	r5, [sp, #28]
   1ce9e:	970a      	str	r7, [sp, #40]	; 0x28
   1cea0:	940e      	str	r4, [sp, #56]	; 0x38
   1cea2:	9413      	str	r4, [sp, #76]	; 0x4c
   1cea4:	f8ad 6016 	strh.w	r6, [sp, #22]
   1cea8:	f001 f94a 	bl	1e140 <__ssvfiscanf_r>
   1ceac:	b01c      	add	sp, #112	; 0x70
   1ceae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1ceb2:	b003      	add	sp, #12
   1ceb4:	4770      	bx	lr
   1ceb6:	bf00      	nop
   1ceb8:	20000248 	.word	0x20000248
   1cebc:	0001cec1 	.word	0x0001cec1

0001cec0 <__seofread>:
   1cec0:	2000      	movs	r0, #0
   1cec2:	4770      	bx	lr
	...
   1cee0:	eba2 0003 	sub.w	r0, r2, r3
   1cee4:	4770      	bx	lr
   1cee6:	bf00      	nop

0001cee8 <strcmp>:
   1cee8:	7802      	ldrb	r2, [r0, #0]
   1ceea:	780b      	ldrb	r3, [r1, #0]
   1ceec:	2a01      	cmp	r2, #1
   1ceee:	bf28      	it	cs
   1cef0:	429a      	cmpcs	r2, r3
   1cef2:	d1f5      	bne.n	1cee0 <__seofread+0x20>
   1cef4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1cef8:	ea40 0401 	orr.w	r4, r0, r1
   1cefc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1cf00:	f06f 0c00 	mvn.w	ip, #0
   1cf04:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1cf08:	b312      	cbz	r2, 1cf50 <strcmp+0x68>
   1cf0a:	ea80 0401 	eor.w	r4, r0, r1
   1cf0e:	f014 0f07 	tst.w	r4, #7
   1cf12:	d16a      	bne.n	1cfea <strcmp+0x102>
   1cf14:	f000 0407 	and.w	r4, r0, #7
   1cf18:	f020 0007 	bic.w	r0, r0, #7
   1cf1c:	f004 0503 	and.w	r5, r4, #3
   1cf20:	f021 0107 	bic.w	r1, r1, #7
   1cf24:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1cf28:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1cf2c:	f014 0f04 	tst.w	r4, #4
   1cf30:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1cf34:	fa0c f405 	lsl.w	r4, ip, r5
   1cf38:	ea62 0204 	orn	r2, r2, r4
   1cf3c:	ea66 0604 	orn	r6, r6, r4
   1cf40:	d00a      	beq.n	1cf58 <strcmp+0x70>
   1cf42:	ea63 0304 	orn	r3, r3, r4
   1cf46:	4662      	mov	r2, ip
   1cf48:	ea67 0704 	orn	r7, r7, r4
   1cf4c:	4666      	mov	r6, ip
   1cf4e:	e003      	b.n	1cf58 <strcmp+0x70>
   1cf50:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1cf54:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1cf58:	fa82 f54c 	uadd8	r5, r2, ip
   1cf5c:	ea82 0406 	eor.w	r4, r2, r6
   1cf60:	faa4 f48c 	sel	r4, r4, ip
   1cf64:	bb6c      	cbnz	r4, 1cfc2 <strcmp+0xda>
   1cf66:	fa83 f54c 	uadd8	r5, r3, ip
   1cf6a:	ea83 0507 	eor.w	r5, r3, r7
   1cf6e:	faa5 f58c 	sel	r5, r5, ip
   1cf72:	b995      	cbnz	r5, 1cf9a <strcmp+0xb2>
   1cf74:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1cf78:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1cf7c:	fa82 f54c 	uadd8	r5, r2, ip
   1cf80:	ea82 0406 	eor.w	r4, r2, r6
   1cf84:	faa4 f48c 	sel	r4, r4, ip
   1cf88:	fa83 f54c 	uadd8	r5, r3, ip
   1cf8c:	ea83 0507 	eor.w	r5, r3, r7
   1cf90:	faa5 f58c 	sel	r5, r5, ip
   1cf94:	4325      	orrs	r5, r4
   1cf96:	d0db      	beq.n	1cf50 <strcmp+0x68>
   1cf98:	b99c      	cbnz	r4, 1cfc2 <strcmp+0xda>
   1cf9a:	ba2d      	rev	r5, r5
   1cf9c:	fab5 f485 	clz	r4, r5
   1cfa0:	f024 0407 	bic.w	r4, r4, #7
   1cfa4:	fa27 f104 	lsr.w	r1, r7, r4
   1cfa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1cfac:	fa23 f304 	lsr.w	r3, r3, r4
   1cfb0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1cfb4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1cfb8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1cfbc:	eba0 0001 	sub.w	r0, r0, r1
   1cfc0:	4770      	bx	lr
   1cfc2:	ba24      	rev	r4, r4
   1cfc4:	fab4 f484 	clz	r4, r4
   1cfc8:	f024 0407 	bic.w	r4, r4, #7
   1cfcc:	fa26 f104 	lsr.w	r1, r6, r4
   1cfd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1cfd4:	fa22 f204 	lsr.w	r2, r2, r4
   1cfd8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1cfdc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1cfe0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1cfe4:	eba0 0001 	sub.w	r0, r0, r1
   1cfe8:	4770      	bx	lr
   1cfea:	f014 0f03 	tst.w	r4, #3
   1cfee:	d13c      	bne.n	1d06a <strcmp+0x182>
   1cff0:	f010 0403 	ands.w	r4, r0, #3
   1cff4:	d128      	bne.n	1d048 <strcmp+0x160>
   1cff6:	f850 2b08 	ldr.w	r2, [r0], #8
   1cffa:	f851 3b08 	ldr.w	r3, [r1], #8
   1cffe:	fa82 f54c 	uadd8	r5, r2, ip
   1d002:	ea82 0503 	eor.w	r5, r2, r3
   1d006:	faa5 f58c 	sel	r5, r5, ip
   1d00a:	b95d      	cbnz	r5, 1d024 <strcmp+0x13c>
   1d00c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1d010:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1d014:	fa82 f54c 	uadd8	r5, r2, ip
   1d018:	ea82 0503 	eor.w	r5, r2, r3
   1d01c:	faa5 f58c 	sel	r5, r5, ip
   1d020:	2d00      	cmp	r5, #0
   1d022:	d0e8      	beq.n	1cff6 <strcmp+0x10e>
   1d024:	ba2d      	rev	r5, r5
   1d026:	fab5 f485 	clz	r4, r5
   1d02a:	f024 0407 	bic.w	r4, r4, #7
   1d02e:	fa23 f104 	lsr.w	r1, r3, r4
   1d032:	fa22 f204 	lsr.w	r2, r2, r4
   1d036:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1d03a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d03e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d042:	eba0 0001 	sub.w	r0, r0, r1
   1d046:	4770      	bx	lr
   1d048:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1d04c:	f020 0003 	bic.w	r0, r0, #3
   1d050:	f850 2b08 	ldr.w	r2, [r0], #8
   1d054:	f021 0103 	bic.w	r1, r1, #3
   1d058:	f851 3b08 	ldr.w	r3, [r1], #8
   1d05c:	fa0c f404 	lsl.w	r4, ip, r4
   1d060:	ea62 0204 	orn	r2, r2, r4
   1d064:	ea63 0304 	orn	r3, r3, r4
   1d068:	e7c9      	b.n	1cffe <strcmp+0x116>
   1d06a:	f010 0403 	ands.w	r4, r0, #3
   1d06e:	d01a      	beq.n	1d0a6 <strcmp+0x1be>
   1d070:	eba1 0104 	sub.w	r1, r1, r4
   1d074:	f020 0003 	bic.w	r0, r0, #3
   1d078:	07e4      	lsls	r4, r4, #31
   1d07a:	f850 2b04 	ldr.w	r2, [r0], #4
   1d07e:	d006      	beq.n	1d08e <strcmp+0x1a6>
   1d080:	d20f      	bcs.n	1d0a2 <strcmp+0x1ba>
   1d082:	788b      	ldrb	r3, [r1, #2]
   1d084:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1d088:	1ae4      	subs	r4, r4, r3
   1d08a:	d106      	bne.n	1d09a <strcmp+0x1b2>
   1d08c:	b12b      	cbz	r3, 1d09a <strcmp+0x1b2>
   1d08e:	78cb      	ldrb	r3, [r1, #3]
   1d090:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1d094:	1ae4      	subs	r4, r4, r3
   1d096:	d100      	bne.n	1d09a <strcmp+0x1b2>
   1d098:	b91b      	cbnz	r3, 1d0a2 <strcmp+0x1ba>
   1d09a:	4620      	mov	r0, r4
   1d09c:	f85d 4b10 	ldr.w	r4, [sp], #16
   1d0a0:	4770      	bx	lr
   1d0a2:	f101 0104 	add.w	r1, r1, #4
   1d0a6:	f850 2b04 	ldr.w	r2, [r0], #4
   1d0aa:	07cc      	lsls	r4, r1, #31
   1d0ac:	f021 0103 	bic.w	r1, r1, #3
   1d0b0:	f851 3b04 	ldr.w	r3, [r1], #4
   1d0b4:	d848      	bhi.n	1d148 <strcmp+0x260>
   1d0b6:	d224      	bcs.n	1d102 <strcmp+0x21a>
   1d0b8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1d0bc:	fa82 f54c 	uadd8	r5, r2, ip
   1d0c0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1d0c4:	faa5 f58c 	sel	r5, r5, ip
   1d0c8:	d10a      	bne.n	1d0e0 <strcmp+0x1f8>
   1d0ca:	b965      	cbnz	r5, 1d0e6 <strcmp+0x1fe>
   1d0cc:	f851 3b04 	ldr.w	r3, [r1], #4
   1d0d0:	ea84 0402 	eor.w	r4, r4, r2
   1d0d4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1d0d8:	d10e      	bne.n	1d0f8 <strcmp+0x210>
   1d0da:	f850 2b04 	ldr.w	r2, [r0], #4
   1d0de:	e7eb      	b.n	1d0b8 <strcmp+0x1d0>
   1d0e0:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1d0e4:	e055      	b.n	1d192 <strcmp+0x2aa>
   1d0e6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1d0ea:	d14d      	bne.n	1d188 <strcmp+0x2a0>
   1d0ec:	7808      	ldrb	r0, [r1, #0]
   1d0ee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d0f2:	f1c0 0000 	rsb	r0, r0, #0
   1d0f6:	4770      	bx	lr
   1d0f8:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1d0fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1d100:	e047      	b.n	1d192 <strcmp+0x2aa>
   1d102:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1d106:	fa82 f54c 	uadd8	r5, r2, ip
   1d10a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1d10e:	faa5 f58c 	sel	r5, r5, ip
   1d112:	d10a      	bne.n	1d12a <strcmp+0x242>
   1d114:	b965      	cbnz	r5, 1d130 <strcmp+0x248>
   1d116:	f851 3b04 	ldr.w	r3, [r1], #4
   1d11a:	ea84 0402 	eor.w	r4, r4, r2
   1d11e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1d122:	d10c      	bne.n	1d13e <strcmp+0x256>
   1d124:	f850 2b04 	ldr.w	r2, [r0], #4
   1d128:	e7eb      	b.n	1d102 <strcmp+0x21a>
   1d12a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1d12e:	e030      	b.n	1d192 <strcmp+0x2aa>
   1d130:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1d134:	d128      	bne.n	1d188 <strcmp+0x2a0>
   1d136:	880b      	ldrh	r3, [r1, #0]
   1d138:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1d13c:	e029      	b.n	1d192 <strcmp+0x2aa>
   1d13e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1d142:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1d146:	e024      	b.n	1d192 <strcmp+0x2aa>
   1d148:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1d14c:	fa82 f54c 	uadd8	r5, r2, ip
   1d150:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1d154:	faa5 f58c 	sel	r5, r5, ip
   1d158:	d10a      	bne.n	1d170 <strcmp+0x288>
   1d15a:	b965      	cbnz	r5, 1d176 <strcmp+0x28e>
   1d15c:	f851 3b04 	ldr.w	r3, [r1], #4
   1d160:	ea84 0402 	eor.w	r4, r4, r2
   1d164:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1d168:	d109      	bne.n	1d17e <strcmp+0x296>
   1d16a:	f850 2b04 	ldr.w	r2, [r0], #4
   1d16e:	e7eb      	b.n	1d148 <strcmp+0x260>
   1d170:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1d174:	e00d      	b.n	1d192 <strcmp+0x2aa>
   1d176:	f015 0fff 	tst.w	r5, #255	; 0xff
   1d17a:	d105      	bne.n	1d188 <strcmp+0x2a0>
   1d17c:	680b      	ldr	r3, [r1, #0]
   1d17e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1d182:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1d186:	e004      	b.n	1d192 <strcmp+0x2aa>
   1d188:	f04f 0000 	mov.w	r0, #0
   1d18c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d190:	4770      	bx	lr
   1d192:	ba12      	rev	r2, r2
   1d194:	ba1b      	rev	r3, r3
   1d196:	fa82 f44c 	uadd8	r4, r2, ip
   1d19a:	ea82 0403 	eor.w	r4, r2, r3
   1d19e:	faa4 f58c 	sel	r5, r4, ip
   1d1a2:	fab5 f485 	clz	r4, r5
   1d1a6:	fa02 f204 	lsl.w	r2, r2, r4
   1d1aa:	fa03 f304 	lsl.w	r3, r3, r4
   1d1ae:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1d1b2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d1b6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1d1ba:	4770      	bx	lr

0001d1bc <strcpy>:
   1d1bc:	ea80 0201 	eor.w	r2, r0, r1
   1d1c0:	4684      	mov	ip, r0
   1d1c2:	f012 0f03 	tst.w	r2, #3
   1d1c6:	d14f      	bne.n	1d268 <strcpy+0xac>
   1d1c8:	f011 0f03 	tst.w	r1, #3
   1d1cc:	d132      	bne.n	1d234 <strcpy+0x78>
   1d1ce:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1d1d2:	f011 0f04 	tst.w	r1, #4
   1d1d6:	f851 3b04 	ldr.w	r3, [r1], #4
   1d1da:	d00b      	beq.n	1d1f4 <strcpy+0x38>
   1d1dc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1d1e0:	439a      	bics	r2, r3
   1d1e2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1d1e6:	bf04      	itt	eq
   1d1e8:	f84c 3b04 	streq.w	r3, [ip], #4
   1d1ec:	f851 3b04 	ldreq.w	r3, [r1], #4
   1d1f0:	d116      	bne.n	1d220 <strcpy+0x64>
   1d1f2:	bf00      	nop
   1d1f4:	f851 4b04 	ldr.w	r4, [r1], #4
   1d1f8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1d1fc:	439a      	bics	r2, r3
   1d1fe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1d202:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1d206:	d10b      	bne.n	1d220 <strcpy+0x64>
   1d208:	f84c 3b04 	str.w	r3, [ip], #4
   1d20c:	43a2      	bics	r2, r4
   1d20e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1d212:	bf04      	itt	eq
   1d214:	f851 3b04 	ldreq.w	r3, [r1], #4
   1d218:	f84c 4b04 	streq.w	r4, [ip], #4
   1d21c:	d0ea      	beq.n	1d1f4 <strcpy+0x38>
   1d21e:	4623      	mov	r3, r4
   1d220:	f80c 3b01 	strb.w	r3, [ip], #1
   1d224:	f013 0fff 	tst.w	r3, #255	; 0xff
   1d228:	ea4f 2333 	mov.w	r3, r3, ror #8
   1d22c:	d1f8      	bne.n	1d220 <strcpy+0x64>
   1d22e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d232:	4770      	bx	lr
   1d234:	f011 0f01 	tst.w	r1, #1
   1d238:	d006      	beq.n	1d248 <strcpy+0x8c>
   1d23a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1d23e:	f80c 2b01 	strb.w	r2, [ip], #1
   1d242:	2a00      	cmp	r2, #0
   1d244:	bf08      	it	eq
   1d246:	4770      	bxeq	lr
   1d248:	f011 0f02 	tst.w	r1, #2
   1d24c:	d0bf      	beq.n	1d1ce <strcpy+0x12>
   1d24e:	f831 2b02 	ldrh.w	r2, [r1], #2
   1d252:	f012 0fff 	tst.w	r2, #255	; 0xff
   1d256:	bf16      	itet	ne
   1d258:	f82c 2b02 	strhne.w	r2, [ip], #2
   1d25c:	f88c 2000 	strbeq.w	r2, [ip]
   1d260:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1d264:	d1b3      	bne.n	1d1ce <strcpy+0x12>
   1d266:	4770      	bx	lr
   1d268:	f811 2b01 	ldrb.w	r2, [r1], #1
   1d26c:	f80c 2b01 	strb.w	r2, [ip], #1
   1d270:	2a00      	cmp	r2, #0
   1d272:	d1f9      	bne.n	1d268 <strcpy+0xac>
   1d274:	4770      	bx	lr
   1d276:	bf00      	nop

0001d278 <strncmp>:
   1d278:	2a00      	cmp	r2, #0
   1d27a:	d041      	beq.n	1d300 <strncmp+0x88>
   1d27c:	ea40 0301 	orr.w	r3, r0, r1
   1d280:	f013 0303 	ands.w	r3, r3, #3
   1d284:	b4f0      	push	{r4, r5, r6, r7}
   1d286:	d125      	bne.n	1d2d4 <strncmp+0x5c>
   1d288:	2a03      	cmp	r2, #3
   1d28a:	d923      	bls.n	1d2d4 <strncmp+0x5c>
   1d28c:	6804      	ldr	r4, [r0, #0]
   1d28e:	680d      	ldr	r5, [r1, #0]
   1d290:	42ac      	cmp	r4, r5
   1d292:	d11f      	bne.n	1d2d4 <strncmp+0x5c>
   1d294:	3a04      	subs	r2, #4
   1d296:	d038      	beq.n	1d30a <strncmp+0x92>
   1d298:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1d29c:	ea25 0404 	bic.w	r4, r5, r4
   1d2a0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1d2a4:	d12e      	bne.n	1d304 <strncmp+0x8c>
   1d2a6:	3004      	adds	r0, #4
   1d2a8:	3104      	adds	r1, #4
   1d2aa:	e00f      	b.n	1d2cc <strncmp+0x54>
   1d2ac:	f850 3b04 	ldr.w	r3, [r0], #4
   1d2b0:	680e      	ldr	r6, [r1, #0]
   1d2b2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1d2b6:	42b3      	cmp	r3, r6
   1d2b8:	ea24 0403 	bic.w	r4, r4, r3
   1d2bc:	f101 0104 	add.w	r1, r1, #4
   1d2c0:	d126      	bne.n	1d310 <strncmp+0x98>
   1d2c2:	3a04      	subs	r2, #4
   1d2c4:	d021      	beq.n	1d30a <strncmp+0x92>
   1d2c6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1d2ca:	d11b      	bne.n	1d304 <strncmp+0x8c>
   1d2cc:	2a03      	cmp	r2, #3
   1d2ce:	4607      	mov	r7, r0
   1d2d0:	460d      	mov	r5, r1
   1d2d2:	d8eb      	bhi.n	1d2ac <strncmp+0x34>
   1d2d4:	7805      	ldrb	r5, [r0, #0]
   1d2d6:	780c      	ldrb	r4, [r1, #0]
   1d2d8:	42ac      	cmp	r4, r5
   1d2da:	f102 33ff 	add.w	r3, r2, #4294967295
   1d2de:	d11a      	bne.n	1d316 <strncmp+0x9e>
   1d2e0:	b183      	cbz	r3, 1d304 <strncmp+0x8c>
   1d2e2:	b914      	cbnz	r4, 1d2ea <strncmp+0x72>
   1d2e4:	e00e      	b.n	1d304 <strncmp+0x8c>
   1d2e6:	b16b      	cbz	r3, 1d304 <strncmp+0x8c>
   1d2e8:	b17a      	cbz	r2, 1d30a <strncmp+0x92>
   1d2ea:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1d2ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1d2f2:	42a2      	cmp	r2, r4
   1d2f4:	f103 33ff 	add.w	r3, r3, #4294967295
   1d2f8:	d0f5      	beq.n	1d2e6 <strncmp+0x6e>
   1d2fa:	1b10      	subs	r0, r2, r4
   1d2fc:	bcf0      	pop	{r4, r5, r6, r7}
   1d2fe:	4770      	bx	lr
   1d300:	4610      	mov	r0, r2
   1d302:	4770      	bx	lr
   1d304:	2000      	movs	r0, #0
   1d306:	bcf0      	pop	{r4, r5, r6, r7}
   1d308:	4770      	bx	lr
   1d30a:	4610      	mov	r0, r2
   1d30c:	bcf0      	pop	{r4, r5, r6, r7}
   1d30e:	4770      	bx	lr
   1d310:	4629      	mov	r1, r5
   1d312:	4638      	mov	r0, r7
   1d314:	e7de      	b.n	1d2d4 <strncmp+0x5c>
   1d316:	462a      	mov	r2, r5
   1d318:	e7ef      	b.n	1d2fa <strncmp+0x82>
   1d31a:	bf00      	nop

0001d31c <_strtoul_l.isra.0>:
   1d31c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d320:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1d324:	460e      	mov	r6, r1
   1d326:	4607      	mov	r7, r0
   1d328:	4615      	mov	r5, r2
   1d32a:	4698      	mov	r8, r3
   1d32c:	468a      	mov	sl, r1
   1d32e:	e000      	b.n	1d332 <_strtoul_l.isra.0+0x16>
   1d330:	46a2      	mov	sl, r4
   1d332:	4654      	mov	r4, sl
   1d334:	4648      	mov	r0, r9
   1d336:	f814 bb01 	ldrb.w	fp, [r4], #1
   1d33a:	f001 fd6b 	bl	1ee14 <__locale_ctype_ptr_l>
   1d33e:	4458      	add	r0, fp
   1d340:	7840      	ldrb	r0, [r0, #1]
   1d342:	f010 0008 	ands.w	r0, r0, #8
   1d346:	d1f3      	bne.n	1d330 <_strtoul_l.isra.0+0x14>
   1d348:	4659      	mov	r1, fp
   1d34a:	292d      	cmp	r1, #45	; 0x2d
   1d34c:	d059      	beq.n	1d402 <_strtoul_l.isra.0+0xe6>
   1d34e:	292b      	cmp	r1, #43	; 0x2b
   1d350:	bf04      	itt	eq
   1d352:	7821      	ldrbeq	r1, [r4, #0]
   1d354:	f10a 0402 	addeq.w	r4, sl, #2
   1d358:	f1b8 0f00 	cmp.w	r8, #0
   1d35c:	d00c      	beq.n	1d378 <_strtoul_l.isra.0+0x5c>
   1d35e:	f1b8 0f10 	cmp.w	r8, #16
   1d362:	d053      	beq.n	1d40c <_strtoul_l.isra.0+0xf0>
   1d364:	f04f 3cff 	mov.w	ip, #4294967295
   1d368:	fbbc fcf8 	udiv	ip, ip, r8
   1d36c:	fb08 fa0c 	mul.w	sl, r8, ip
   1d370:	ea6f 0a0a 	mvn.w	sl, sl
   1d374:	46c1      	mov	r9, r8
   1d376:	e008      	b.n	1d38a <_strtoul_l.isra.0+0x6e>
   1d378:	2930      	cmp	r1, #48	; 0x30
   1d37a:	d058      	beq.n	1d42e <_strtoul_l.isra.0+0x112>
   1d37c:	f04f 080a 	mov.w	r8, #10
   1d380:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 1d460 <_strtoul_l.isra.0+0x144>
   1d384:	46c1      	mov	r9, r8
   1d386:	f04f 0a05 	mov.w	sl, #5
   1d38a:	2300      	movs	r3, #0
   1d38c:	469e      	mov	lr, r3
   1d38e:	e005      	b.n	1d39c <_strtoul_l.isra.0+0x80>
   1d390:	d02a      	beq.n	1d3e8 <_strtoul_l.isra.0+0xcc>
   1d392:	fb09 2e0e 	mla	lr, r9, lr, r2
   1d396:	2301      	movs	r3, #1
   1d398:	f814 1b01 	ldrb.w	r1, [r4], #1
   1d39c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1d3a0:	2a09      	cmp	r2, #9
   1d3a2:	d905      	bls.n	1d3b0 <_strtoul_l.isra.0+0x94>
   1d3a4:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1d3a8:	2a19      	cmp	r2, #25
   1d3aa:	d80a      	bhi.n	1d3c2 <_strtoul_l.isra.0+0xa6>
   1d3ac:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   1d3b0:	4590      	cmp	r8, r2
   1d3b2:	dd0e      	ble.n	1d3d2 <_strtoul_l.isra.0+0xb6>
   1d3b4:	2b00      	cmp	r3, #0
   1d3b6:	db01      	blt.n	1d3bc <_strtoul_l.isra.0+0xa0>
   1d3b8:	45e6      	cmp	lr, ip
   1d3ba:	d9e9      	bls.n	1d390 <_strtoul_l.isra.0+0x74>
   1d3bc:	f04f 33ff 	mov.w	r3, #4294967295
   1d3c0:	e7ea      	b.n	1d398 <_strtoul_l.isra.0+0x7c>
   1d3c2:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1d3c6:	2a19      	cmp	r2, #25
   1d3c8:	d803      	bhi.n	1d3d2 <_strtoul_l.isra.0+0xb6>
   1d3ca:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   1d3ce:	4590      	cmp	r8, r2
   1d3d0:	dcf0      	bgt.n	1d3b4 <_strtoul_l.isra.0+0x98>
   1d3d2:	2b00      	cmp	r3, #0
   1d3d4:	db0d      	blt.n	1d3f2 <_strtoul_l.isra.0+0xd6>
   1d3d6:	b108      	cbz	r0, 1d3dc <_strtoul_l.isra.0+0xc0>
   1d3d8:	f1ce 0e00 	rsb	lr, lr, #0
   1d3dc:	b10d      	cbz	r5, 1d3e2 <_strtoul_l.isra.0+0xc6>
   1d3de:	b973      	cbnz	r3, 1d3fe <_strtoul_l.isra.0+0xe2>
   1d3e0:	602e      	str	r6, [r5, #0]
   1d3e2:	4670      	mov	r0, lr
   1d3e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3e8:	4552      	cmp	r2, sl
   1d3ea:	ddd2      	ble.n	1d392 <_strtoul_l.isra.0+0x76>
   1d3ec:	f04f 33ff 	mov.w	r3, #4294967295
   1d3f0:	e7d2      	b.n	1d398 <_strtoul_l.isra.0+0x7c>
   1d3f2:	2322      	movs	r3, #34	; 0x22
   1d3f4:	603b      	str	r3, [r7, #0]
   1d3f6:	f04f 3eff 	mov.w	lr, #4294967295
   1d3fa:	2d00      	cmp	r5, #0
   1d3fc:	d0f1      	beq.n	1d3e2 <_strtoul_l.isra.0+0xc6>
   1d3fe:	1e66      	subs	r6, r4, #1
   1d400:	e7ee      	b.n	1d3e0 <_strtoul_l.isra.0+0xc4>
   1d402:	7821      	ldrb	r1, [r4, #0]
   1d404:	2001      	movs	r0, #1
   1d406:	f10a 0402 	add.w	r4, sl, #2
   1d40a:	e7a5      	b.n	1d358 <_strtoul_l.isra.0+0x3c>
   1d40c:	2930      	cmp	r1, #48	; 0x30
   1d40e:	d11b      	bne.n	1d448 <_strtoul_l.isra.0+0x12c>
   1d410:	7823      	ldrb	r3, [r4, #0]
   1d412:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d416:	2b58      	cmp	r3, #88	; 0x58
   1d418:	d11c      	bne.n	1d454 <_strtoul_l.isra.0+0x138>
   1d41a:	f04f 0910 	mov.w	r9, #16
   1d41e:	7861      	ldrb	r1, [r4, #1]
   1d420:	46c8      	mov	r8, r9
   1d422:	f04f 0a0f 	mov.w	sl, #15
   1d426:	3402      	adds	r4, #2
   1d428:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1d42c:	e7ad      	b.n	1d38a <_strtoul_l.isra.0+0x6e>
   1d42e:	7823      	ldrb	r3, [r4, #0]
   1d430:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d434:	2b58      	cmp	r3, #88	; 0x58
   1d436:	d0f0      	beq.n	1d41a <_strtoul_l.isra.0+0xfe>
   1d438:	f04f 0808 	mov.w	r8, #8
   1d43c:	46c1      	mov	r9, r8
   1d43e:	f04f 0a07 	mov.w	sl, #7
   1d442:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   1d446:	e7a0      	b.n	1d38a <_strtoul_l.isra.0+0x6e>
   1d448:	f04f 0a0f 	mov.w	sl, #15
   1d44c:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1d450:	46c1      	mov	r9, r8
   1d452:	e79a      	b.n	1d38a <_strtoul_l.isra.0+0x6e>
   1d454:	46c1      	mov	r9, r8
   1d456:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1d45a:	f04f 0a0f 	mov.w	sl, #15
   1d45e:	e794      	b.n	1d38a <_strtoul_l.isra.0+0x6e>
   1d460:	19999999 	.word	0x19999999

0001d464 <_strtoul_r>:
   1d464:	b530      	push	{r4, r5, lr}
   1d466:	4c06      	ldr	r4, [pc, #24]	; (1d480 <_strtoul_r+0x1c>)
   1d468:	4d06      	ldr	r5, [pc, #24]	; (1d484 <_strtoul_r+0x20>)
   1d46a:	6824      	ldr	r4, [r4, #0]
   1d46c:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1d46e:	b083      	sub	sp, #12
   1d470:	2c00      	cmp	r4, #0
   1d472:	bf08      	it	eq
   1d474:	462c      	moveq	r4, r5
   1d476:	9400      	str	r4, [sp, #0]
   1d478:	f7ff ff50 	bl	1d31c <_strtoul_l.isra.0>
   1d47c:	b003      	add	sp, #12
   1d47e:	bd30      	pop	{r4, r5, pc}
   1d480:	20000248 	.word	0x20000248
   1d484:	20000ad8 	.word	0x20000ad8

0001d488 <strtoul>:
   1d488:	b530      	push	{r4, r5, lr}
   1d48a:	4c08      	ldr	r4, [pc, #32]	; (1d4ac <strtoul+0x24>)
   1d48c:	4b08      	ldr	r3, [pc, #32]	; (1d4b0 <strtoul+0x28>)
   1d48e:	6825      	ldr	r5, [r4, #0]
   1d490:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   1d492:	b083      	sub	sp, #12
   1d494:	2c00      	cmp	r4, #0
   1d496:	bf08      	it	eq
   1d498:	461c      	moveq	r4, r3
   1d49a:	9400      	str	r4, [sp, #0]
   1d49c:	4613      	mov	r3, r2
   1d49e:	460a      	mov	r2, r1
   1d4a0:	4601      	mov	r1, r0
   1d4a2:	4628      	mov	r0, r5
   1d4a4:	f7ff ff3a 	bl	1d31c <_strtoul_l.isra.0>
   1d4a8:	b003      	add	sp, #12
   1d4aa:	bd30      	pop	{r4, r5, pc}
   1d4ac:	20000248 	.word	0x20000248
   1d4b0:	20000ad8 	.word	0x20000ad8

0001d4b4 <__ssprint_r>:
   1d4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4b8:	6893      	ldr	r3, [r2, #8]
   1d4ba:	b083      	sub	sp, #12
   1d4bc:	4690      	mov	r8, r2
   1d4be:	2b00      	cmp	r3, #0
   1d4c0:	d070      	beq.n	1d5a4 <__ssprint_r+0xf0>
   1d4c2:	4682      	mov	sl, r0
   1d4c4:	460c      	mov	r4, r1
   1d4c6:	6817      	ldr	r7, [r2, #0]
   1d4c8:	688d      	ldr	r5, [r1, #8]
   1d4ca:	6808      	ldr	r0, [r1, #0]
   1d4cc:	e042      	b.n	1d554 <__ssprint_r+0xa0>
   1d4ce:	89a3      	ldrh	r3, [r4, #12]
   1d4d0:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1d4d4:	d02e      	beq.n	1d534 <__ssprint_r+0x80>
   1d4d6:	6965      	ldr	r5, [r4, #20]
   1d4d8:	6921      	ldr	r1, [r4, #16]
   1d4da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1d4de:	eba0 0b01 	sub.w	fp, r0, r1
   1d4e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1d4e6:	f10b 0001 	add.w	r0, fp, #1
   1d4ea:	106d      	asrs	r5, r5, #1
   1d4ec:	4430      	add	r0, r6
   1d4ee:	42a8      	cmp	r0, r5
   1d4f0:	462a      	mov	r2, r5
   1d4f2:	bf84      	itt	hi
   1d4f4:	4605      	movhi	r5, r0
   1d4f6:	462a      	movhi	r2, r5
   1d4f8:	055b      	lsls	r3, r3, #21
   1d4fa:	d538      	bpl.n	1d56e <__ssprint_r+0xba>
   1d4fc:	4611      	mov	r1, r2
   1d4fe:	4650      	mov	r0, sl
   1d500:	f7ff f96c 	bl	1c7dc <_malloc_r>
   1d504:	2800      	cmp	r0, #0
   1d506:	d03c      	beq.n	1d582 <__ssprint_r+0xce>
   1d508:	465a      	mov	r2, fp
   1d50a:	6921      	ldr	r1, [r4, #16]
   1d50c:	9001      	str	r0, [sp, #4]
   1d50e:	f7fe fb79 	bl	1bc04 <memcpy>
   1d512:	89a2      	ldrh	r2, [r4, #12]
   1d514:	9b01      	ldr	r3, [sp, #4]
   1d516:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1d51a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1d51e:	81a2      	strh	r2, [r4, #12]
   1d520:	eba5 020b 	sub.w	r2, r5, fp
   1d524:	eb03 000b 	add.w	r0, r3, fp
   1d528:	6165      	str	r5, [r4, #20]
   1d52a:	6123      	str	r3, [r4, #16]
   1d52c:	6020      	str	r0, [r4, #0]
   1d52e:	60a2      	str	r2, [r4, #8]
   1d530:	4635      	mov	r5, r6
   1d532:	46b3      	mov	fp, r6
   1d534:	465a      	mov	r2, fp
   1d536:	4649      	mov	r1, r9
   1d538:	f001 fcc2 	bl	1eec0 <memmove>
   1d53c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1d540:	68a2      	ldr	r2, [r4, #8]
   1d542:	6820      	ldr	r0, [r4, #0]
   1d544:	1b55      	subs	r5, r2, r5
   1d546:	4458      	add	r0, fp
   1d548:	1b9e      	subs	r6, r3, r6
   1d54a:	60a5      	str	r5, [r4, #8]
   1d54c:	6020      	str	r0, [r4, #0]
   1d54e:	f8c8 6008 	str.w	r6, [r8, #8]
   1d552:	b33e      	cbz	r6, 1d5a4 <__ssprint_r+0xf0>
   1d554:	687e      	ldr	r6, [r7, #4]
   1d556:	463b      	mov	r3, r7
   1d558:	3708      	adds	r7, #8
   1d55a:	2e00      	cmp	r6, #0
   1d55c:	d0fa      	beq.n	1d554 <__ssprint_r+0xa0>
   1d55e:	42ae      	cmp	r6, r5
   1d560:	f8d3 9000 	ldr.w	r9, [r3]
   1d564:	46ab      	mov	fp, r5
   1d566:	d2b2      	bcs.n	1d4ce <__ssprint_r+0x1a>
   1d568:	4635      	mov	r5, r6
   1d56a:	46b3      	mov	fp, r6
   1d56c:	e7e2      	b.n	1d534 <__ssprint_r+0x80>
   1d56e:	4650      	mov	r0, sl
   1d570:	f001 fd0a 	bl	1ef88 <_realloc_r>
   1d574:	4603      	mov	r3, r0
   1d576:	2800      	cmp	r0, #0
   1d578:	d1d2      	bne.n	1d520 <__ssprint_r+0x6c>
   1d57a:	6921      	ldr	r1, [r4, #16]
   1d57c:	4650      	mov	r0, sl
   1d57e:	f001 fb47 	bl	1ec10 <_free_r>
   1d582:	230c      	movs	r3, #12
   1d584:	f8ca 3000 	str.w	r3, [sl]
   1d588:	89a3      	ldrh	r3, [r4, #12]
   1d58a:	2200      	movs	r2, #0
   1d58c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d590:	f04f 30ff 	mov.w	r0, #4294967295
   1d594:	81a3      	strh	r3, [r4, #12]
   1d596:	f8c8 2008 	str.w	r2, [r8, #8]
   1d59a:	f8c8 2004 	str.w	r2, [r8, #4]
   1d59e:	b003      	add	sp, #12
   1d5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d5a4:	2000      	movs	r0, #0
   1d5a6:	f8c8 0004 	str.w	r0, [r8, #4]
   1d5aa:	b003      	add	sp, #12
   1d5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d5b0 <_svfiprintf_r>:
   1d5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5b4:	b0ad      	sub	sp, #180	; 0xb4
   1d5b6:	460c      	mov	r4, r1
   1d5b8:	9105      	str	r1, [sp, #20]
   1d5ba:	8989      	ldrh	r1, [r1, #12]
   1d5bc:	9307      	str	r3, [sp, #28]
   1d5be:	060d      	lsls	r5, r1, #24
   1d5c0:	900a      	str	r0, [sp, #40]	; 0x28
   1d5c2:	d503      	bpl.n	1d5cc <_svfiprintf_r+0x1c>
   1d5c4:	6923      	ldr	r3, [r4, #16]
   1d5c6:	2b00      	cmp	r3, #0
   1d5c8:	f000 84d6 	beq.w	1df78 <_svfiprintf_r+0x9c8>
   1d5cc:	2300      	movs	r3, #0
   1d5ce:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   1d5d2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1d5d4:	930b      	str	r3, [sp, #44]	; 0x2c
   1d5d6:	4693      	mov	fp, r2
   1d5d8:	9311      	str	r3, [sp, #68]	; 0x44
   1d5da:	9310      	str	r3, [sp, #64]	; 0x40
   1d5dc:	9302      	str	r3, [sp, #8]
   1d5de:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   1d5e2:	46d1      	mov	r9, sl
   1d5e4:	f89b 3000 	ldrb.w	r3, [fp]
   1d5e8:	465c      	mov	r4, fp
   1d5ea:	b1eb      	cbz	r3, 1d628 <_svfiprintf_r+0x78>
   1d5ec:	2b25      	cmp	r3, #37	; 0x25
   1d5ee:	d102      	bne.n	1d5f6 <_svfiprintf_r+0x46>
   1d5f0:	e01a      	b.n	1d628 <_svfiprintf_r+0x78>
   1d5f2:	2b25      	cmp	r3, #37	; 0x25
   1d5f4:	d003      	beq.n	1d5fe <_svfiprintf_r+0x4e>
   1d5f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1d5fa:	2b00      	cmp	r3, #0
   1d5fc:	d1f9      	bne.n	1d5f2 <_svfiprintf_r+0x42>
   1d5fe:	eba4 050b 	sub.w	r5, r4, fp
   1d602:	b18d      	cbz	r5, 1d628 <_svfiprintf_r+0x78>
   1d604:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d606:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1d608:	f8c9 b000 	str.w	fp, [r9]
   1d60c:	3301      	adds	r3, #1
   1d60e:	442a      	add	r2, r5
   1d610:	2b07      	cmp	r3, #7
   1d612:	f8c9 5004 	str.w	r5, [r9, #4]
   1d616:	9211      	str	r2, [sp, #68]	; 0x44
   1d618:	9310      	str	r3, [sp, #64]	; 0x40
   1d61a:	f300 83c3 	bgt.w	1dda4 <_svfiprintf_r+0x7f4>
   1d61e:	f109 0908 	add.w	r9, r9, #8
   1d622:	9b02      	ldr	r3, [sp, #8]
   1d624:	442b      	add	r3, r5
   1d626:	9302      	str	r3, [sp, #8]
   1d628:	7823      	ldrb	r3, [r4, #0]
   1d62a:	2b00      	cmp	r3, #0
   1d62c:	f000 834b 	beq.w	1dcc6 <_svfiprintf_r+0x716>
   1d630:	2000      	movs	r0, #0
   1d632:	f04f 0300 	mov.w	r3, #0
   1d636:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1d63a:	f104 0b01 	add.w	fp, r4, #1
   1d63e:	7862      	ldrb	r2, [r4, #1]
   1d640:	4605      	mov	r5, r0
   1d642:	4603      	mov	r3, r0
   1d644:	f04f 38ff 	mov.w	r8, #4294967295
   1d648:	4604      	mov	r4, r0
   1d64a:	f10b 0b01 	add.w	fp, fp, #1
   1d64e:	f1a2 0120 	sub.w	r1, r2, #32
   1d652:	2958      	cmp	r1, #88	; 0x58
   1d654:	f200 826b 	bhi.w	1db2e <_svfiprintf_r+0x57e>
   1d658:	e8df f011 	tbh	[pc, r1, lsl #1]
   1d65c:	026900bd 	.word	0x026900bd
   1d660:	00b80269 	.word	0x00b80269
   1d664:	02690269 	.word	0x02690269
   1d668:	02690269 	.word	0x02690269
   1d66c:	02690269 	.word	0x02690269
   1d670:	00b30059 	.word	0x00b30059
   1d674:	00630269 	.word	0x00630269
   1d678:	026901c0 	.word	0x026901c0
   1d67c:	01ad01bb 	.word	0x01ad01bb
   1d680:	01ad01ad 	.word	0x01ad01ad
   1d684:	01ad01ad 	.word	0x01ad01ad
   1d688:	01ad01ad 	.word	0x01ad01ad
   1d68c:	01ad01ad 	.word	0x01ad01ad
   1d690:	02690269 	.word	0x02690269
   1d694:	02690269 	.word	0x02690269
   1d698:	02690269 	.word	0x02690269
   1d69c:	02690269 	.word	0x02690269
   1d6a0:	02690269 	.word	0x02690269
   1d6a4:	0269015f 	.word	0x0269015f
   1d6a8:	02690269 	.word	0x02690269
   1d6ac:	02690269 	.word	0x02690269
   1d6b0:	02690269 	.word	0x02690269
   1d6b4:	02690269 	.word	0x02690269
   1d6b8:	014d0269 	.word	0x014d0269
   1d6bc:	02690269 	.word	0x02690269
   1d6c0:	02690269 	.word	0x02690269
   1d6c4:	013c0269 	.word	0x013c0269
   1d6c8:	02690269 	.word	0x02690269
   1d6cc:	02690125 	.word	0x02690125
   1d6d0:	02690269 	.word	0x02690269
   1d6d4:	02690269 	.word	0x02690269
   1d6d8:	02690269 	.word	0x02690269
   1d6dc:	02690269 	.word	0x02690269
   1d6e0:	00c50269 	.word	0x00c50269
   1d6e4:	02690200 	.word	0x02690200
   1d6e8:	02690269 	.word	0x02690269
   1d6ec:	020001fb 	.word	0x020001fb
   1d6f0:	02690269 	.word	0x02690269
   1d6f4:	026901ee 	.word	0x026901ee
   1d6f8:	007a01da 	.word	0x007a01da
   1d6fc:	02310236 	.word	0x02310236
   1d700:	020e0269 	.word	0x020e0269
   1d704:	00680269 	.word	0x00680269
   1d708:	02690269 	.word	0x02690269
   1d70c:	008f      	.short	0x008f
   1d70e:	9907      	ldr	r1, [sp, #28]
   1d710:	680c      	ldr	r4, [r1, #0]
   1d712:	460a      	mov	r2, r1
   1d714:	2c00      	cmp	r4, #0
   1d716:	f102 0204 	add.w	r2, r2, #4
   1d71a:	f280 83c9 	bge.w	1deb0 <_svfiprintf_r+0x900>
   1d71e:	4264      	negs	r4, r4
   1d720:	9207      	str	r2, [sp, #28]
   1d722:	f043 0304 	orr.w	r3, r3, #4
   1d726:	f89b 2000 	ldrb.w	r2, [fp]
   1d72a:	e78e      	b.n	1d64a <_svfiprintf_r+0x9a>
   1d72c:	9406      	str	r4, [sp, #24]
   1d72e:	069c      	lsls	r4, r3, #26
   1d730:	f100 80d6 	bmi.w	1d8e0 <_svfiprintf_r+0x330>
   1d734:	9907      	ldr	r1, [sp, #28]
   1d736:	06d8      	lsls	r0, r3, #27
   1d738:	460a      	mov	r2, r1
   1d73a:	f100 820a 	bmi.w	1db52 <_svfiprintf_r+0x5a2>
   1d73e:	065e      	lsls	r6, r3, #25
   1d740:	f140 8207 	bpl.w	1db52 <_svfiprintf_r+0x5a2>
   1d744:	880c      	ldrh	r4, [r1, #0]
   1d746:	3104      	adds	r1, #4
   1d748:	2500      	movs	r5, #0
   1d74a:	2201      	movs	r2, #1
   1d74c:	9107      	str	r1, [sp, #28]
   1d74e:	e1cc      	b.n	1daea <_svfiprintf_r+0x53a>
   1d750:	f013 0220 	ands.w	r2, r3, #32
   1d754:	9406      	str	r4, [sp, #24]
   1d756:	f040 80d5 	bne.w	1d904 <_svfiprintf_r+0x354>
   1d75a:	f013 0110 	ands.w	r1, r3, #16
   1d75e:	f040 81fe 	bne.w	1db5e <_svfiprintf_r+0x5ae>
   1d762:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   1d766:	f000 81fa 	beq.w	1db5e <_svfiprintf_r+0x5ae>
   1d76a:	9807      	ldr	r0, [sp, #28]
   1d76c:	460a      	mov	r2, r1
   1d76e:	4601      	mov	r1, r0
   1d770:	3104      	adds	r1, #4
   1d772:	8804      	ldrh	r4, [r0, #0]
   1d774:	9107      	str	r1, [sp, #28]
   1d776:	2500      	movs	r5, #0
   1d778:	e1b7      	b.n	1daea <_svfiprintf_r+0x53a>
   1d77a:	9406      	str	r4, [sp, #24]
   1d77c:	2800      	cmp	r0, #0
   1d77e:	f040 8431 	bne.w	1dfe4 <_svfiprintf_r+0xa34>
   1d782:	49ba      	ldr	r1, [pc, #744]	; (1da6c <_svfiprintf_r+0x4bc>)
   1d784:	910b      	str	r1, [sp, #44]	; 0x2c
   1d786:	069d      	lsls	r5, r3, #26
   1d788:	f100 8096 	bmi.w	1d8b8 <_svfiprintf_r+0x308>
   1d78c:	9807      	ldr	r0, [sp, #28]
   1d78e:	06dc      	lsls	r4, r3, #27
   1d790:	4601      	mov	r1, r0
   1d792:	d402      	bmi.n	1d79a <_svfiprintf_r+0x1ea>
   1d794:	0658      	lsls	r0, r3, #25
   1d796:	f100 83a9 	bmi.w	1deec <_svfiprintf_r+0x93c>
   1d79a:	680c      	ldr	r4, [r1, #0]
   1d79c:	3104      	adds	r1, #4
   1d79e:	9107      	str	r1, [sp, #28]
   1d7a0:	2500      	movs	r5, #0
   1d7a2:	07d9      	lsls	r1, r3, #31
   1d7a4:	f140 8094 	bpl.w	1d8d0 <_svfiprintf_r+0x320>
   1d7a8:	ea54 0105 	orrs.w	r1, r4, r5
   1d7ac:	f000 8090 	beq.w	1d8d0 <_svfiprintf_r+0x320>
   1d7b0:	2130      	movs	r1, #48	; 0x30
   1d7b2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1d7b6:	f043 0302 	orr.w	r3, r3, #2
   1d7ba:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1d7be:	2202      	movs	r2, #2
   1d7c0:	e193      	b.n	1daea <_svfiprintf_r+0x53a>
   1d7c2:	f89b 2000 	ldrb.w	r2, [fp]
   1d7c6:	2001      	movs	r0, #1
   1d7c8:	252b      	movs	r5, #43	; 0x2b
   1d7ca:	e73e      	b.n	1d64a <_svfiprintf_r+0x9a>
   1d7cc:	f043 0301 	orr.w	r3, r3, #1
   1d7d0:	f89b 2000 	ldrb.w	r2, [fp]
   1d7d4:	e739      	b.n	1d64a <_svfiprintf_r+0x9a>
   1d7d6:	f89b 2000 	ldrb.w	r2, [fp]
   1d7da:	2d00      	cmp	r5, #0
   1d7dc:	f47f af35 	bne.w	1d64a <_svfiprintf_r+0x9a>
   1d7e0:	2001      	movs	r0, #1
   1d7e2:	2520      	movs	r5, #32
   1d7e4:	e731      	b.n	1d64a <_svfiprintf_r+0x9a>
   1d7e6:	9907      	ldr	r1, [sp, #28]
   1d7e8:	9406      	str	r4, [sp, #24]
   1d7ea:	680a      	ldr	r2, [r1, #0]
   1d7ec:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1d7f0:	f04f 0000 	mov.w	r0, #0
   1d7f4:	460a      	mov	r2, r1
   1d7f6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1d7fa:	3204      	adds	r2, #4
   1d7fc:	2001      	movs	r0, #1
   1d7fe:	9000      	str	r0, [sp, #0]
   1d800:	9207      	str	r2, [sp, #28]
   1d802:	9004      	str	r0, [sp, #16]
   1d804:	ae12      	add	r6, sp, #72	; 0x48
   1d806:	9301      	str	r3, [sp, #4]
   1d808:	f04f 0800 	mov.w	r8, #0
   1d80c:	9b01      	ldr	r3, [sp, #4]
   1d80e:	f013 0302 	ands.w	r3, r3, #2
   1d812:	9308      	str	r3, [sp, #32]
   1d814:	d002      	beq.n	1d81c <_svfiprintf_r+0x26c>
   1d816:	9b00      	ldr	r3, [sp, #0]
   1d818:	3302      	adds	r3, #2
   1d81a:	9300      	str	r3, [sp, #0]
   1d81c:	9b01      	ldr	r3, [sp, #4]
   1d81e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   1d822:	9309      	str	r3, [sp, #36]	; 0x24
   1d824:	f040 81a2 	bne.w	1db6c <_svfiprintf_r+0x5bc>
   1d828:	9b06      	ldr	r3, [sp, #24]
   1d82a:	9a00      	ldr	r2, [sp, #0]
   1d82c:	1a9c      	subs	r4, r3, r2
   1d82e:	2c00      	cmp	r4, #0
   1d830:	f340 819c 	ble.w	1db6c <_svfiprintf_r+0x5bc>
   1d834:	2c10      	cmp	r4, #16
   1d836:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d838:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1d83a:	4d8d      	ldr	r5, [pc, #564]	; (1da70 <_svfiprintf_r+0x4c0>)
   1d83c:	dd25      	ble.n	1d88a <_svfiprintf_r+0x2da>
   1d83e:	4648      	mov	r0, r9
   1d840:	2310      	movs	r3, #16
   1d842:	46c1      	mov	r9, r8
   1d844:	46b0      	mov	r8, r6
   1d846:	9e05      	ldr	r6, [sp, #20]
   1d848:	e004      	b.n	1d854 <_svfiprintf_r+0x2a4>
   1d84a:	3c10      	subs	r4, #16
   1d84c:	2c10      	cmp	r4, #16
   1d84e:	f100 0008 	add.w	r0, r0, #8
   1d852:	dd17      	ble.n	1d884 <_svfiprintf_r+0x2d4>
   1d854:	3201      	adds	r2, #1
   1d856:	3110      	adds	r1, #16
   1d858:	2a07      	cmp	r2, #7
   1d85a:	9111      	str	r1, [sp, #68]	; 0x44
   1d85c:	9210      	str	r2, [sp, #64]	; 0x40
   1d85e:	6005      	str	r5, [r0, #0]
   1d860:	6043      	str	r3, [r0, #4]
   1d862:	ddf2      	ble.n	1d84a <_svfiprintf_r+0x29a>
   1d864:	aa0f      	add	r2, sp, #60	; 0x3c
   1d866:	4631      	mov	r1, r6
   1d868:	4638      	mov	r0, r7
   1d86a:	9303      	str	r3, [sp, #12]
   1d86c:	f7ff fe22 	bl	1d4b4 <__ssprint_r>
   1d870:	2800      	cmp	r0, #0
   1d872:	f040 822f 	bne.w	1dcd4 <_svfiprintf_r+0x724>
   1d876:	3c10      	subs	r4, #16
   1d878:	2c10      	cmp	r4, #16
   1d87a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d87c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1d87e:	9b03      	ldr	r3, [sp, #12]
   1d880:	4650      	mov	r0, sl
   1d882:	dce7      	bgt.n	1d854 <_svfiprintf_r+0x2a4>
   1d884:	4646      	mov	r6, r8
   1d886:	46c8      	mov	r8, r9
   1d888:	4681      	mov	r9, r0
   1d88a:	1c53      	adds	r3, r2, #1
   1d88c:	4421      	add	r1, r4
   1d88e:	2b07      	cmp	r3, #7
   1d890:	9111      	str	r1, [sp, #68]	; 0x44
   1d892:	9310      	str	r3, [sp, #64]	; 0x40
   1d894:	f8c9 5000 	str.w	r5, [r9]
   1d898:	f8c9 4004 	str.w	r4, [r9, #4]
   1d89c:	f300 82f2 	bgt.w	1de84 <_svfiprintf_r+0x8d4>
   1d8a0:	f109 0908 	add.w	r9, r9, #8
   1d8a4:	e164      	b.n	1db70 <_svfiprintf_r+0x5c0>
   1d8a6:	9406      	str	r4, [sp, #24]
   1d8a8:	2800      	cmp	r0, #0
   1d8aa:	f040 83a5 	bne.w	1dff8 <_svfiprintf_r+0xa48>
   1d8ae:	4971      	ldr	r1, [pc, #452]	; (1da74 <_svfiprintf_r+0x4c4>)
   1d8b0:	910b      	str	r1, [sp, #44]	; 0x2c
   1d8b2:	069d      	lsls	r5, r3, #26
   1d8b4:	f57f af6a 	bpl.w	1d78c <_svfiprintf_r+0x1dc>
   1d8b8:	9c07      	ldr	r4, [sp, #28]
   1d8ba:	3407      	adds	r4, #7
   1d8bc:	f024 0107 	bic.w	r1, r4, #7
   1d8c0:	f101 0008 	add.w	r0, r1, #8
   1d8c4:	e9d1 4500 	ldrd	r4, r5, [r1]
   1d8c8:	07d9      	lsls	r1, r3, #31
   1d8ca:	9007      	str	r0, [sp, #28]
   1d8cc:	f53f af6c 	bmi.w	1d7a8 <_svfiprintf_r+0x1f8>
   1d8d0:	2202      	movs	r2, #2
   1d8d2:	e10a      	b.n	1daea <_svfiprintf_r+0x53a>
   1d8d4:	f043 0310 	orr.w	r3, r3, #16
   1d8d8:	9406      	str	r4, [sp, #24]
   1d8da:	069c      	lsls	r4, r3, #26
   1d8dc:	f57f af2a 	bpl.w	1d734 <_svfiprintf_r+0x184>
   1d8e0:	9c07      	ldr	r4, [sp, #28]
   1d8e2:	3407      	adds	r4, #7
   1d8e4:	f024 0207 	bic.w	r2, r4, #7
   1d8e8:	f102 0108 	add.w	r1, r2, #8
   1d8ec:	e9d2 4500 	ldrd	r4, r5, [r2]
   1d8f0:	9107      	str	r1, [sp, #28]
   1d8f2:	2201      	movs	r2, #1
   1d8f4:	e0f9      	b.n	1daea <_svfiprintf_r+0x53a>
   1d8f6:	f043 0310 	orr.w	r3, r3, #16
   1d8fa:	f013 0220 	ands.w	r2, r3, #32
   1d8fe:	9406      	str	r4, [sp, #24]
   1d900:	f43f af2b 	beq.w	1d75a <_svfiprintf_r+0x1aa>
   1d904:	9c07      	ldr	r4, [sp, #28]
   1d906:	3407      	adds	r4, #7
   1d908:	f024 0207 	bic.w	r2, r4, #7
   1d90c:	f102 0108 	add.w	r1, r2, #8
   1d910:	e9d2 4500 	ldrd	r4, r5, [r2]
   1d914:	9107      	str	r1, [sp, #28]
   1d916:	2200      	movs	r2, #0
   1d918:	e0e7      	b.n	1daea <_svfiprintf_r+0x53a>
   1d91a:	9406      	str	r4, [sp, #24]
   1d91c:	2800      	cmp	r0, #0
   1d91e:	f040 8365 	bne.w	1dfec <_svfiprintf_r+0xa3c>
   1d922:	f043 0310 	orr.w	r3, r3, #16
   1d926:	069c      	lsls	r4, r3, #26
   1d928:	f100 82fa 	bmi.w	1df20 <_svfiprintf_r+0x970>
   1d92c:	06d8      	lsls	r0, r3, #27
   1d92e:	d402      	bmi.n	1d936 <_svfiprintf_r+0x386>
   1d930:	0659      	lsls	r1, r3, #25
   1d932:	f100 82c4 	bmi.w	1debe <_svfiprintf_r+0x90e>
   1d936:	9907      	ldr	r1, [sp, #28]
   1d938:	680c      	ldr	r4, [r1, #0]
   1d93a:	460a      	mov	r2, r1
   1d93c:	17e5      	asrs	r5, r4, #31
   1d93e:	3204      	adds	r2, #4
   1d940:	9207      	str	r2, [sp, #28]
   1d942:	4620      	mov	r0, r4
   1d944:	4629      	mov	r1, r5
   1d946:	2800      	cmp	r0, #0
   1d948:	f171 0200 	sbcs.w	r2, r1, #0
   1d94c:	f2c0 82c5 	blt.w	1deda <_svfiprintf_r+0x92a>
   1d950:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1d954:	9203      	str	r2, [sp, #12]
   1d956:	f1b8 3fff 	cmp.w	r8, #4294967295
   1d95a:	f04f 0201 	mov.w	r2, #1
   1d95e:	f040 80ce 	bne.w	1dafe <_svfiprintf_r+0x54e>
   1d962:	ea54 0105 	orrs.w	r1, r4, r5
   1d966:	f000 820d 	beq.w	1dd84 <_svfiprintf_r+0x7d4>
   1d96a:	9301      	str	r3, [sp, #4]
   1d96c:	2a01      	cmp	r2, #1
   1d96e:	f000 826b 	beq.w	1de48 <_svfiprintf_r+0x898>
   1d972:	2a02      	cmp	r2, #2
   1d974:	f040 822d 	bne.w	1ddd2 <_svfiprintf_r+0x822>
   1d978:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1d97a:	4656      	mov	r6, sl
   1d97c:	0923      	lsrs	r3, r4, #4
   1d97e:	f004 010f 	and.w	r1, r4, #15
   1d982:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1d986:	092a      	lsrs	r2, r5, #4
   1d988:	461c      	mov	r4, r3
   1d98a:	4615      	mov	r5, r2
   1d98c:	5c43      	ldrb	r3, [r0, r1]
   1d98e:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1d992:	ea54 0305 	orrs.w	r3, r4, r5
   1d996:	d1f1      	bne.n	1d97c <_svfiprintf_r+0x3cc>
   1d998:	ebaa 0306 	sub.w	r3, sl, r6
   1d99c:	9304      	str	r3, [sp, #16]
   1d99e:	9b04      	ldr	r3, [sp, #16]
   1d9a0:	9a03      	ldr	r2, [sp, #12]
   1d9a2:	4543      	cmp	r3, r8
   1d9a4:	bfb8      	it	lt
   1d9a6:	4643      	movlt	r3, r8
   1d9a8:	9300      	str	r3, [sp, #0]
   1d9aa:	2a00      	cmp	r2, #0
   1d9ac:	f43f af2e 	beq.w	1d80c <_svfiprintf_r+0x25c>
   1d9b0:	3301      	adds	r3, #1
   1d9b2:	9300      	str	r3, [sp, #0]
   1d9b4:	e72a      	b.n	1d80c <_svfiprintf_r+0x25c>
   1d9b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d9ba:	2400      	movs	r4, #0
   1d9bc:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1d9c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1d9c4:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   1d9c8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d9cc:	2909      	cmp	r1, #9
   1d9ce:	d9f5      	bls.n	1d9bc <_svfiprintf_r+0x40c>
   1d9d0:	e63d      	b.n	1d64e <_svfiprintf_r+0x9e>
   1d9d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d9d6:	f89b 2000 	ldrb.w	r2, [fp]
   1d9da:	e636      	b.n	1d64a <_svfiprintf_r+0x9a>
   1d9dc:	f89b 2000 	ldrb.w	r2, [fp]
   1d9e0:	2a2a      	cmp	r2, #42	; 0x2a
   1d9e2:	f10b 0601 	add.w	r6, fp, #1
   1d9e6:	f000 82e7 	beq.w	1dfb8 <_svfiprintf_r+0xa08>
   1d9ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d9ee:	2909      	cmp	r1, #9
   1d9f0:	46b3      	mov	fp, r6
   1d9f2:	f04f 0800 	mov.w	r8, #0
   1d9f6:	f63f ae2a 	bhi.w	1d64e <_svfiprintf_r+0x9e>
   1d9fa:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1d9fe:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1da02:	eb01 0848 	add.w	r8, r1, r8, lsl #1
   1da06:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1da0a:	2909      	cmp	r1, #9
   1da0c:	d9f5      	bls.n	1d9fa <_svfiprintf_r+0x44a>
   1da0e:	e61e      	b.n	1d64e <_svfiprintf_r+0x9e>
   1da10:	2800      	cmp	r0, #0
   1da12:	f040 82dd 	bne.w	1dfd0 <_svfiprintf_r+0xa20>
   1da16:	069a      	lsls	r2, r3, #26
   1da18:	f100 8276 	bmi.w	1df08 <_svfiprintf_r+0x958>
   1da1c:	06de      	lsls	r6, r3, #27
   1da1e:	f100 8297 	bmi.w	1df50 <_svfiprintf_r+0x9a0>
   1da22:	065d      	lsls	r5, r3, #25
   1da24:	f140 8294 	bpl.w	1df50 <_svfiprintf_r+0x9a0>
   1da28:	9a07      	ldr	r2, [sp, #28]
   1da2a:	6813      	ldr	r3, [r2, #0]
   1da2c:	3204      	adds	r2, #4
   1da2e:	9207      	str	r2, [sp, #28]
   1da30:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1da34:	801a      	strh	r2, [r3, #0]
   1da36:	e5d5      	b.n	1d5e4 <_svfiprintf_r+0x34>
   1da38:	f89b 2000 	ldrb.w	r2, [fp]
   1da3c:	2a6c      	cmp	r2, #108	; 0x6c
   1da3e:	bf03      	ittte	eq
   1da40:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
   1da44:	f043 0320 	orreq.w	r3, r3, #32
   1da48:	f10b 0b01 	addeq.w	fp, fp, #1
   1da4c:	f043 0310 	orrne.w	r3, r3, #16
   1da50:	e5fb      	b.n	1d64a <_svfiprintf_r+0x9a>
   1da52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1da56:	f89b 2000 	ldrb.w	r2, [fp]
   1da5a:	e5f6      	b.n	1d64a <_svfiprintf_r+0x9a>
   1da5c:	9406      	str	r4, [sp, #24]
   1da5e:	2800      	cmp	r0, #0
   1da60:	f43f af61 	beq.w	1d926 <_svfiprintf_r+0x376>
   1da64:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1da68:	e75d      	b.n	1d926 <_svfiprintf_r+0x376>
   1da6a:	bf00      	nop
   1da6c:	00021cb0 	.word	0x00021cb0
   1da70:	00021ccc 	.word	0x00021ccc
   1da74:	00021c9c 	.word	0x00021c9c
   1da78:	9907      	ldr	r1, [sp, #28]
   1da7a:	9406      	str	r4, [sp, #24]
   1da7c:	680e      	ldr	r6, [r1, #0]
   1da7e:	f04f 0200 	mov.w	r2, #0
   1da82:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1da86:	1d0c      	adds	r4, r1, #4
   1da88:	2e00      	cmp	r6, #0
   1da8a:	f000 8283 	beq.w	1df94 <_svfiprintf_r+0x9e4>
   1da8e:	f1b8 3fff 	cmp.w	r8, #4294967295
   1da92:	f000 8265 	beq.w	1df60 <_svfiprintf_r+0x9b0>
   1da96:	4642      	mov	r2, r8
   1da98:	2100      	movs	r1, #0
   1da9a:	4630      	mov	r0, r6
   1da9c:	9300      	str	r3, [sp, #0]
   1da9e:	f7ff f94f 	bl	1cd40 <memchr>
   1daa2:	9b00      	ldr	r3, [sp, #0]
   1daa4:	2800      	cmp	r0, #0
   1daa6:	f000 827e 	beq.w	1dfa6 <_svfiprintf_r+0x9f6>
   1daaa:	1b82      	subs	r2, r0, r6
   1daac:	9301      	str	r3, [sp, #4]
   1daae:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1dab2:	9204      	str	r2, [sp, #16]
   1dab4:	9407      	str	r4, [sp, #28]
   1dab6:	9303      	str	r3, [sp, #12]
   1dab8:	f04f 0800 	mov.w	r8, #0
   1dabc:	e76f      	b.n	1d99e <_svfiprintf_r+0x3ee>
   1dabe:	f043 0320 	orr.w	r3, r3, #32
   1dac2:	f89b 2000 	ldrb.w	r2, [fp]
   1dac6:	e5c0      	b.n	1d64a <_svfiprintf_r+0x9a>
   1dac8:	9807      	ldr	r0, [sp, #28]
   1daca:	4ab3      	ldr	r2, [pc, #716]	; (1dd98 <_svfiprintf_r+0x7e8>)
   1dacc:	9406      	str	r4, [sp, #24]
   1dace:	920b      	str	r2, [sp, #44]	; 0x2c
   1dad0:	6804      	ldr	r4, [r0, #0]
   1dad2:	2278      	movs	r2, #120	; 0x78
   1dad4:	2130      	movs	r1, #48	; 0x30
   1dad6:	3004      	adds	r0, #4
   1dad8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1dadc:	f043 0302 	orr.w	r3, r3, #2
   1dae0:	9007      	str	r0, [sp, #28]
   1dae2:	2500      	movs	r5, #0
   1dae4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1dae8:	2202      	movs	r2, #2
   1daea:	f04f 0100 	mov.w	r1, #0
   1daee:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   1daf2:	2100      	movs	r1, #0
   1daf4:	9103      	str	r1, [sp, #12]
   1daf6:	f1b8 3fff 	cmp.w	r8, #4294967295
   1dafa:	f43f af32 	beq.w	1d962 <_svfiprintf_r+0x3b2>
   1dafe:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   1db02:	9101      	str	r1, [sp, #4]
   1db04:	ea54 0105 	orrs.w	r1, r4, r5
   1db08:	f47f af30 	bne.w	1d96c <_svfiprintf_r+0x3bc>
   1db0c:	f1b8 0f00 	cmp.w	r8, #0
   1db10:	f040 8137 	bne.w	1dd82 <_svfiprintf_r+0x7d2>
   1db14:	2a00      	cmp	r2, #0
   1db16:	f040 81b1 	bne.w	1de7c <_svfiprintf_r+0x8cc>
   1db1a:	f013 0301 	ands.w	r3, r3, #1
   1db1e:	9304      	str	r3, [sp, #16]
   1db20:	f000 81cb 	beq.w	1deba <_svfiprintf_r+0x90a>
   1db24:	ae2c      	add	r6, sp, #176	; 0xb0
   1db26:	2330      	movs	r3, #48	; 0x30
   1db28:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1db2c:	e737      	b.n	1d99e <_svfiprintf_r+0x3ee>
   1db2e:	9406      	str	r4, [sp, #24]
   1db30:	2800      	cmp	r0, #0
   1db32:	f040 825e 	bne.w	1dff2 <_svfiprintf_r+0xa42>
   1db36:	2a00      	cmp	r2, #0
   1db38:	f000 80c5 	beq.w	1dcc6 <_svfiprintf_r+0x716>
   1db3c:	2101      	movs	r1, #1
   1db3e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1db42:	f04f 0200 	mov.w	r2, #0
   1db46:	9100      	str	r1, [sp, #0]
   1db48:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1db4c:	9104      	str	r1, [sp, #16]
   1db4e:	ae12      	add	r6, sp, #72	; 0x48
   1db50:	e659      	b.n	1d806 <_svfiprintf_r+0x256>
   1db52:	3104      	adds	r1, #4
   1db54:	6814      	ldr	r4, [r2, #0]
   1db56:	9107      	str	r1, [sp, #28]
   1db58:	2201      	movs	r2, #1
   1db5a:	2500      	movs	r5, #0
   1db5c:	e7c5      	b.n	1daea <_svfiprintf_r+0x53a>
   1db5e:	9807      	ldr	r0, [sp, #28]
   1db60:	4601      	mov	r1, r0
   1db62:	3104      	adds	r1, #4
   1db64:	6804      	ldr	r4, [r0, #0]
   1db66:	9107      	str	r1, [sp, #28]
   1db68:	2500      	movs	r5, #0
   1db6a:	e7be      	b.n	1daea <_svfiprintf_r+0x53a>
   1db6c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1db6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1db70:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1db74:	b16a      	cbz	r2, 1db92 <_svfiprintf_r+0x5e2>
   1db76:	3301      	adds	r3, #1
   1db78:	3101      	adds	r1, #1
   1db7a:	f10d 0037 	add.w	r0, sp, #55	; 0x37
   1db7e:	2201      	movs	r2, #1
   1db80:	2b07      	cmp	r3, #7
   1db82:	9111      	str	r1, [sp, #68]	; 0x44
   1db84:	9310      	str	r3, [sp, #64]	; 0x40
   1db86:	e889 0005 	stmia.w	r9, {r0, r2}
   1db8a:	f300 8145 	bgt.w	1de18 <_svfiprintf_r+0x868>
   1db8e:	f109 0908 	add.w	r9, r9, #8
   1db92:	9a08      	ldr	r2, [sp, #32]
   1db94:	b162      	cbz	r2, 1dbb0 <_svfiprintf_r+0x600>
   1db96:	3301      	adds	r3, #1
   1db98:	3102      	adds	r1, #2
   1db9a:	a80e      	add	r0, sp, #56	; 0x38
   1db9c:	2202      	movs	r2, #2
   1db9e:	2b07      	cmp	r3, #7
   1dba0:	9111      	str	r1, [sp, #68]	; 0x44
   1dba2:	9310      	str	r3, [sp, #64]	; 0x40
   1dba4:	e889 0005 	stmia.w	r9, {r0, r2}
   1dba8:	f300 8142 	bgt.w	1de30 <_svfiprintf_r+0x880>
   1dbac:	f109 0908 	add.w	r9, r9, #8
   1dbb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dbb2:	2a80      	cmp	r2, #128	; 0x80
   1dbb4:	f000 809b 	beq.w	1dcee <_svfiprintf_r+0x73e>
   1dbb8:	9a04      	ldr	r2, [sp, #16]
   1dbba:	eba8 0502 	sub.w	r5, r8, r2
   1dbbe:	2d00      	cmp	r5, #0
   1dbc0:	dd31      	ble.n	1dc26 <_svfiprintf_r+0x676>
   1dbc2:	2d10      	cmp	r5, #16
   1dbc4:	4c75      	ldr	r4, [pc, #468]	; (1dd9c <_svfiprintf_r+0x7ec>)
   1dbc6:	dd23      	ble.n	1dc10 <_svfiprintf_r+0x660>
   1dbc8:	464a      	mov	r2, r9
   1dbca:	f04f 0810 	mov.w	r8, #16
   1dbce:	46b1      	mov	r9, r6
   1dbd0:	4626      	mov	r6, r4
   1dbd2:	9c05      	ldr	r4, [sp, #20]
   1dbd4:	e004      	b.n	1dbe0 <_svfiprintf_r+0x630>
   1dbd6:	3d10      	subs	r5, #16
   1dbd8:	2d10      	cmp	r5, #16
   1dbda:	f102 0208 	add.w	r2, r2, #8
   1dbde:	dd14      	ble.n	1dc0a <_svfiprintf_r+0x65a>
   1dbe0:	3301      	adds	r3, #1
   1dbe2:	3110      	adds	r1, #16
   1dbe4:	2b07      	cmp	r3, #7
   1dbe6:	9111      	str	r1, [sp, #68]	; 0x44
   1dbe8:	9310      	str	r3, [sp, #64]	; 0x40
   1dbea:	e882 0140 	stmia.w	r2, {r6, r8}
   1dbee:	ddf2      	ble.n	1dbd6 <_svfiprintf_r+0x626>
   1dbf0:	aa0f      	add	r2, sp, #60	; 0x3c
   1dbf2:	4621      	mov	r1, r4
   1dbf4:	4638      	mov	r0, r7
   1dbf6:	f7ff fc5d 	bl	1d4b4 <__ssprint_r>
   1dbfa:	2800      	cmp	r0, #0
   1dbfc:	d16a      	bne.n	1dcd4 <_svfiprintf_r+0x724>
   1dbfe:	3d10      	subs	r5, #16
   1dc00:	2d10      	cmp	r5, #16
   1dc02:	9911      	ldr	r1, [sp, #68]	; 0x44
   1dc04:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1dc06:	4652      	mov	r2, sl
   1dc08:	dcea      	bgt.n	1dbe0 <_svfiprintf_r+0x630>
   1dc0a:	4634      	mov	r4, r6
   1dc0c:	464e      	mov	r6, r9
   1dc0e:	4691      	mov	r9, r2
   1dc10:	3301      	adds	r3, #1
   1dc12:	4429      	add	r1, r5
   1dc14:	2b07      	cmp	r3, #7
   1dc16:	9111      	str	r1, [sp, #68]	; 0x44
   1dc18:	9310      	str	r3, [sp, #64]	; 0x40
   1dc1a:	e889 0030 	stmia.w	r9, {r4, r5}
   1dc1e:	f300 80ca 	bgt.w	1ddb6 <_svfiprintf_r+0x806>
   1dc22:	f109 0908 	add.w	r9, r9, #8
   1dc26:	9804      	ldr	r0, [sp, #16]
   1dc28:	f8c9 6000 	str.w	r6, [r9]
   1dc2c:	3301      	adds	r3, #1
   1dc2e:	4401      	add	r1, r0
   1dc30:	2b07      	cmp	r3, #7
   1dc32:	9111      	str	r1, [sp, #68]	; 0x44
   1dc34:	9310      	str	r3, [sp, #64]	; 0x40
   1dc36:	f8c9 0004 	str.w	r0, [r9, #4]
   1dc3a:	f300 8090 	bgt.w	1dd5e <_svfiprintf_r+0x7ae>
   1dc3e:	f109 0908 	add.w	r9, r9, #8
   1dc42:	9b01      	ldr	r3, [sp, #4]
   1dc44:	075b      	lsls	r3, r3, #29
   1dc46:	d530      	bpl.n	1dcaa <_svfiprintf_r+0x6fa>
   1dc48:	9b06      	ldr	r3, [sp, #24]
   1dc4a:	9a00      	ldr	r2, [sp, #0]
   1dc4c:	1a9c      	subs	r4, r3, r2
   1dc4e:	2c00      	cmp	r4, #0
   1dc50:	dd2b      	ble.n	1dcaa <_svfiprintf_r+0x6fa>
   1dc52:	2c10      	cmp	r4, #16
   1dc54:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1dc56:	4d52      	ldr	r5, [pc, #328]	; (1dda0 <_svfiprintf_r+0x7f0>)
   1dc58:	dd1c      	ble.n	1dc94 <_svfiprintf_r+0x6e4>
   1dc5a:	2610      	movs	r6, #16
   1dc5c:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1dc60:	e004      	b.n	1dc6c <_svfiprintf_r+0x6bc>
   1dc62:	3c10      	subs	r4, #16
   1dc64:	2c10      	cmp	r4, #16
   1dc66:	f109 0908 	add.w	r9, r9, #8
   1dc6a:	dd13      	ble.n	1dc94 <_svfiprintf_r+0x6e4>
   1dc6c:	3301      	adds	r3, #1
   1dc6e:	3110      	adds	r1, #16
   1dc70:	2b07      	cmp	r3, #7
   1dc72:	9111      	str	r1, [sp, #68]	; 0x44
   1dc74:	9310      	str	r3, [sp, #64]	; 0x40
   1dc76:	e889 0060 	stmia.w	r9, {r5, r6}
   1dc7a:	ddf2      	ble.n	1dc62 <_svfiprintf_r+0x6b2>
   1dc7c:	aa0f      	add	r2, sp, #60	; 0x3c
   1dc7e:	4641      	mov	r1, r8
   1dc80:	4638      	mov	r0, r7
   1dc82:	f7ff fc17 	bl	1d4b4 <__ssprint_r>
   1dc86:	bb28      	cbnz	r0, 1dcd4 <_svfiprintf_r+0x724>
   1dc88:	3c10      	subs	r4, #16
   1dc8a:	2c10      	cmp	r4, #16
   1dc8c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1dc8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1dc90:	46d1      	mov	r9, sl
   1dc92:	dceb      	bgt.n	1dc6c <_svfiprintf_r+0x6bc>
   1dc94:	3301      	adds	r3, #1
   1dc96:	4421      	add	r1, r4
   1dc98:	2b07      	cmp	r3, #7
   1dc9a:	9111      	str	r1, [sp, #68]	; 0x44
   1dc9c:	9310      	str	r3, [sp, #64]	; 0x40
   1dc9e:	f8c9 5000 	str.w	r5, [r9]
   1dca2:	f8c9 4004 	str.w	r4, [r9, #4]
   1dca6:	f300 80f9 	bgt.w	1de9c <_svfiprintf_r+0x8ec>
   1dcaa:	9b02      	ldr	r3, [sp, #8]
   1dcac:	9a06      	ldr	r2, [sp, #24]
   1dcae:	9800      	ldr	r0, [sp, #0]
   1dcb0:	4282      	cmp	r2, r0
   1dcb2:	bfac      	ite	ge
   1dcb4:	189b      	addge	r3, r3, r2
   1dcb6:	181b      	addlt	r3, r3, r0
   1dcb8:	9302      	str	r3, [sp, #8]
   1dcba:	2900      	cmp	r1, #0
   1dcbc:	d159      	bne.n	1dd72 <_svfiprintf_r+0x7c2>
   1dcbe:	2300      	movs	r3, #0
   1dcc0:	9310      	str	r3, [sp, #64]	; 0x40
   1dcc2:	46d1      	mov	r9, sl
   1dcc4:	e48e      	b.n	1d5e4 <_svfiprintf_r+0x34>
   1dcc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1dcc8:	b123      	cbz	r3, 1dcd4 <_svfiprintf_r+0x724>
   1dcca:	980a      	ldr	r0, [sp, #40]	; 0x28
   1dccc:	9905      	ldr	r1, [sp, #20]
   1dcce:	aa0f      	add	r2, sp, #60	; 0x3c
   1dcd0:	f7ff fbf0 	bl	1d4b4 <__ssprint_r>
   1dcd4:	9b05      	ldr	r3, [sp, #20]
   1dcd6:	899b      	ldrh	r3, [r3, #12]
   1dcd8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1dcdc:	9b02      	ldr	r3, [sp, #8]
   1dcde:	bf18      	it	ne
   1dce0:	f04f 33ff 	movne.w	r3, #4294967295
   1dce4:	9302      	str	r3, [sp, #8]
   1dce6:	9802      	ldr	r0, [sp, #8]
   1dce8:	b02d      	add	sp, #180	; 0xb4
   1dcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dcee:	9a06      	ldr	r2, [sp, #24]
   1dcf0:	9800      	ldr	r0, [sp, #0]
   1dcf2:	1a15      	subs	r5, r2, r0
   1dcf4:	2d00      	cmp	r5, #0
   1dcf6:	f77f af5f 	ble.w	1dbb8 <_svfiprintf_r+0x608>
   1dcfa:	2d10      	cmp	r5, #16
   1dcfc:	4c27      	ldr	r4, [pc, #156]	; (1dd9c <_svfiprintf_r+0x7ec>)
   1dcfe:	dd22      	ble.n	1dd46 <_svfiprintf_r+0x796>
   1dd00:	464a      	mov	r2, r9
   1dd02:	46b1      	mov	r9, r6
   1dd04:	4626      	mov	r6, r4
   1dd06:	9c05      	ldr	r4, [sp, #20]
   1dd08:	e004      	b.n	1dd14 <_svfiprintf_r+0x764>
   1dd0a:	3d10      	subs	r5, #16
   1dd0c:	2d10      	cmp	r5, #16
   1dd0e:	f102 0208 	add.w	r2, r2, #8
   1dd12:	dd15      	ble.n	1dd40 <_svfiprintf_r+0x790>
   1dd14:	3301      	adds	r3, #1
   1dd16:	3110      	adds	r1, #16
   1dd18:	2010      	movs	r0, #16
   1dd1a:	2b07      	cmp	r3, #7
   1dd1c:	9111      	str	r1, [sp, #68]	; 0x44
   1dd1e:	9310      	str	r3, [sp, #64]	; 0x40
   1dd20:	6016      	str	r6, [r2, #0]
   1dd22:	6050      	str	r0, [r2, #4]
   1dd24:	ddf1      	ble.n	1dd0a <_svfiprintf_r+0x75a>
   1dd26:	aa0f      	add	r2, sp, #60	; 0x3c
   1dd28:	4621      	mov	r1, r4
   1dd2a:	4638      	mov	r0, r7
   1dd2c:	f7ff fbc2 	bl	1d4b4 <__ssprint_r>
   1dd30:	2800      	cmp	r0, #0
   1dd32:	d1cf      	bne.n	1dcd4 <_svfiprintf_r+0x724>
   1dd34:	3d10      	subs	r5, #16
   1dd36:	2d10      	cmp	r5, #16
   1dd38:	9911      	ldr	r1, [sp, #68]	; 0x44
   1dd3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1dd3c:	4652      	mov	r2, sl
   1dd3e:	dce9      	bgt.n	1dd14 <_svfiprintf_r+0x764>
   1dd40:	4634      	mov	r4, r6
   1dd42:	464e      	mov	r6, r9
   1dd44:	4691      	mov	r9, r2
   1dd46:	3301      	adds	r3, #1
   1dd48:	4429      	add	r1, r5
   1dd4a:	2b07      	cmp	r3, #7
   1dd4c:	9111      	str	r1, [sp, #68]	; 0x44
   1dd4e:	9310      	str	r3, [sp, #64]	; 0x40
   1dd50:	e889 0030 	stmia.w	r9, {r4, r5}
   1dd54:	f300 80f0 	bgt.w	1df38 <_svfiprintf_r+0x988>
   1dd58:	f109 0908 	add.w	r9, r9, #8
   1dd5c:	e72c      	b.n	1dbb8 <_svfiprintf_r+0x608>
   1dd5e:	aa0f      	add	r2, sp, #60	; 0x3c
   1dd60:	9905      	ldr	r1, [sp, #20]
   1dd62:	4638      	mov	r0, r7
   1dd64:	f7ff fba6 	bl	1d4b4 <__ssprint_r>
   1dd68:	2800      	cmp	r0, #0
   1dd6a:	d1b3      	bne.n	1dcd4 <_svfiprintf_r+0x724>
   1dd6c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1dd6e:	46d1      	mov	r9, sl
   1dd70:	e767      	b.n	1dc42 <_svfiprintf_r+0x692>
   1dd72:	aa0f      	add	r2, sp, #60	; 0x3c
   1dd74:	9905      	ldr	r1, [sp, #20]
   1dd76:	4638      	mov	r0, r7
   1dd78:	f7ff fb9c 	bl	1d4b4 <__ssprint_r>
   1dd7c:	2800      	cmp	r0, #0
   1dd7e:	d09e      	beq.n	1dcbe <_svfiprintf_r+0x70e>
   1dd80:	e7a8      	b.n	1dcd4 <_svfiprintf_r+0x724>
   1dd82:	9b01      	ldr	r3, [sp, #4]
   1dd84:	2a01      	cmp	r2, #1
   1dd86:	f000 80b7 	beq.w	1def8 <_svfiprintf_r+0x948>
   1dd8a:	2a02      	cmp	r2, #2
   1dd8c:	d11e      	bne.n	1ddcc <_svfiprintf_r+0x81c>
   1dd8e:	9301      	str	r3, [sp, #4]
   1dd90:	2400      	movs	r4, #0
   1dd92:	2500      	movs	r5, #0
   1dd94:	e5f0      	b.n	1d978 <_svfiprintf_r+0x3c8>
   1dd96:	bf00      	nop
   1dd98:	00021cb0 	.word	0x00021cb0
   1dd9c:	00021cdc 	.word	0x00021cdc
   1dda0:	00021ccc 	.word	0x00021ccc
   1dda4:	aa0f      	add	r2, sp, #60	; 0x3c
   1dda6:	9905      	ldr	r1, [sp, #20]
   1dda8:	4638      	mov	r0, r7
   1ddaa:	f7ff fb83 	bl	1d4b4 <__ssprint_r>
   1ddae:	2800      	cmp	r0, #0
   1ddb0:	d190      	bne.n	1dcd4 <_svfiprintf_r+0x724>
   1ddb2:	46d1      	mov	r9, sl
   1ddb4:	e435      	b.n	1d622 <_svfiprintf_r+0x72>
   1ddb6:	aa0f      	add	r2, sp, #60	; 0x3c
   1ddb8:	9905      	ldr	r1, [sp, #20]
   1ddba:	4638      	mov	r0, r7
   1ddbc:	f7ff fb7a 	bl	1d4b4 <__ssprint_r>
   1ddc0:	2800      	cmp	r0, #0
   1ddc2:	d187      	bne.n	1dcd4 <_svfiprintf_r+0x724>
   1ddc4:	9911      	ldr	r1, [sp, #68]	; 0x44
   1ddc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ddc8:	46d1      	mov	r9, sl
   1ddca:	e72c      	b.n	1dc26 <_svfiprintf_r+0x676>
   1ddcc:	9301      	str	r3, [sp, #4]
   1ddce:	2400      	movs	r4, #0
   1ddd0:	2500      	movs	r5, #0
   1ddd2:	4651      	mov	r1, sl
   1ddd4:	e000      	b.n	1ddd8 <_svfiprintf_r+0x828>
   1ddd6:	4631      	mov	r1, r6
   1ddd8:	08e2      	lsrs	r2, r4, #3
   1ddda:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1ddde:	08e8      	lsrs	r0, r5, #3
   1dde0:	f004 0307 	and.w	r3, r4, #7
   1dde4:	4605      	mov	r5, r0
   1dde6:	4614      	mov	r4, r2
   1dde8:	3330      	adds	r3, #48	; 0x30
   1ddea:	ea54 0205 	orrs.w	r2, r4, r5
   1ddee:	f801 3c01 	strb.w	r3, [r1, #-1]
   1ddf2:	f101 36ff 	add.w	r6, r1, #4294967295
   1ddf6:	d1ee      	bne.n	1ddd6 <_svfiprintf_r+0x826>
   1ddf8:	9a01      	ldr	r2, [sp, #4]
   1ddfa:	07d2      	lsls	r2, r2, #31
   1ddfc:	f57f adcc 	bpl.w	1d998 <_svfiprintf_r+0x3e8>
   1de00:	2b30      	cmp	r3, #48	; 0x30
   1de02:	f43f adc9 	beq.w	1d998 <_svfiprintf_r+0x3e8>
   1de06:	3902      	subs	r1, #2
   1de08:	2330      	movs	r3, #48	; 0x30
   1de0a:	f806 3c01 	strb.w	r3, [r6, #-1]
   1de0e:	ebaa 0301 	sub.w	r3, sl, r1
   1de12:	9304      	str	r3, [sp, #16]
   1de14:	460e      	mov	r6, r1
   1de16:	e5c2      	b.n	1d99e <_svfiprintf_r+0x3ee>
   1de18:	aa0f      	add	r2, sp, #60	; 0x3c
   1de1a:	9905      	ldr	r1, [sp, #20]
   1de1c:	4638      	mov	r0, r7
   1de1e:	f7ff fb49 	bl	1d4b4 <__ssprint_r>
   1de22:	2800      	cmp	r0, #0
   1de24:	f47f af56 	bne.w	1dcd4 <_svfiprintf_r+0x724>
   1de28:	9911      	ldr	r1, [sp, #68]	; 0x44
   1de2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1de2c:	46d1      	mov	r9, sl
   1de2e:	e6b0      	b.n	1db92 <_svfiprintf_r+0x5e2>
   1de30:	aa0f      	add	r2, sp, #60	; 0x3c
   1de32:	9905      	ldr	r1, [sp, #20]
   1de34:	4638      	mov	r0, r7
   1de36:	f7ff fb3d 	bl	1d4b4 <__ssprint_r>
   1de3a:	2800      	cmp	r0, #0
   1de3c:	f47f af4a 	bne.w	1dcd4 <_svfiprintf_r+0x724>
   1de40:	9911      	ldr	r1, [sp, #68]	; 0x44
   1de42:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1de44:	46d1      	mov	r9, sl
   1de46:	e6b3      	b.n	1dbb0 <_svfiprintf_r+0x600>
   1de48:	2d00      	cmp	r5, #0
   1de4a:	bf08      	it	eq
   1de4c:	2c0a      	cmpeq	r4, #10
   1de4e:	d352      	bcc.n	1def6 <_svfiprintf_r+0x946>
   1de50:	4656      	mov	r6, sl
   1de52:	4620      	mov	r0, r4
   1de54:	4629      	mov	r1, r5
   1de56:	220a      	movs	r2, #10
   1de58:	2300      	movs	r3, #0
   1de5a:	f7fd fbd7 	bl	1b60c <__aeabi_uldivmod>
   1de5e:	3230      	adds	r2, #48	; 0x30
   1de60:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1de64:	4620      	mov	r0, r4
   1de66:	4629      	mov	r1, r5
   1de68:	2300      	movs	r3, #0
   1de6a:	220a      	movs	r2, #10
   1de6c:	f7fd fbce 	bl	1b60c <__aeabi_uldivmod>
   1de70:	4604      	mov	r4, r0
   1de72:	460d      	mov	r5, r1
   1de74:	ea54 0305 	orrs.w	r3, r4, r5
   1de78:	d1eb      	bne.n	1de52 <_svfiprintf_r+0x8a2>
   1de7a:	e58d      	b.n	1d998 <_svfiprintf_r+0x3e8>
   1de7c:	f8cd 8010 	str.w	r8, [sp, #16]
   1de80:	4656      	mov	r6, sl
   1de82:	e58c      	b.n	1d99e <_svfiprintf_r+0x3ee>
   1de84:	aa0f      	add	r2, sp, #60	; 0x3c
   1de86:	9905      	ldr	r1, [sp, #20]
   1de88:	4638      	mov	r0, r7
   1de8a:	f7ff fb13 	bl	1d4b4 <__ssprint_r>
   1de8e:	2800      	cmp	r0, #0
   1de90:	f47f af20 	bne.w	1dcd4 <_svfiprintf_r+0x724>
   1de94:	9911      	ldr	r1, [sp, #68]	; 0x44
   1de96:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1de98:	46d1      	mov	r9, sl
   1de9a:	e669      	b.n	1db70 <_svfiprintf_r+0x5c0>
   1de9c:	aa0f      	add	r2, sp, #60	; 0x3c
   1de9e:	9905      	ldr	r1, [sp, #20]
   1dea0:	4638      	mov	r0, r7
   1dea2:	f7ff fb07 	bl	1d4b4 <__ssprint_r>
   1dea6:	2800      	cmp	r0, #0
   1dea8:	f47f af14 	bne.w	1dcd4 <_svfiprintf_r+0x724>
   1deac:	9911      	ldr	r1, [sp, #68]	; 0x44
   1deae:	e6fc      	b.n	1dcaa <_svfiprintf_r+0x6fa>
   1deb0:	9207      	str	r2, [sp, #28]
   1deb2:	f89b 2000 	ldrb.w	r2, [fp]
   1deb6:	f7ff bbc8 	b.w	1d64a <_svfiprintf_r+0x9a>
   1deba:	4656      	mov	r6, sl
   1debc:	e56f      	b.n	1d99e <_svfiprintf_r+0x3ee>
   1debe:	9e07      	ldr	r6, [sp, #28]
   1dec0:	f9b6 4000 	ldrsh.w	r4, [r6]
   1dec4:	4632      	mov	r2, r6
   1dec6:	17e5      	asrs	r5, r4, #31
   1dec8:	4620      	mov	r0, r4
   1deca:	3204      	adds	r2, #4
   1decc:	4629      	mov	r1, r5
   1dece:	2800      	cmp	r0, #0
   1ded0:	9207      	str	r2, [sp, #28]
   1ded2:	f171 0200 	sbcs.w	r2, r1, #0
   1ded6:	f6bf ad3b 	bge.w	1d950 <_svfiprintf_r+0x3a0>
   1deda:	222d      	movs	r2, #45	; 0x2d
   1dedc:	4264      	negs	r4, r4
   1dede:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1dee2:	9203      	str	r2, [sp, #12]
   1dee4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1dee8:	2201      	movs	r2, #1
   1deea:	e604      	b.n	1daf6 <_svfiprintf_r+0x546>
   1deec:	880c      	ldrh	r4, [r1, #0]
   1deee:	3104      	adds	r1, #4
   1def0:	2500      	movs	r5, #0
   1def2:	9107      	str	r1, [sp, #28]
   1def4:	e455      	b.n	1d7a2 <_svfiprintf_r+0x1f2>
   1def6:	9b01      	ldr	r3, [sp, #4]
   1def8:	9301      	str	r3, [sp, #4]
   1defa:	ae2c      	add	r6, sp, #176	; 0xb0
   1defc:	3430      	adds	r4, #48	; 0x30
   1defe:	2301      	movs	r3, #1
   1df00:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1df04:	9304      	str	r3, [sp, #16]
   1df06:	e54a      	b.n	1d99e <_svfiprintf_r+0x3ee>
   1df08:	9a07      	ldr	r2, [sp, #28]
   1df0a:	9902      	ldr	r1, [sp, #8]
   1df0c:	6813      	ldr	r3, [r2, #0]
   1df0e:	17cd      	asrs	r5, r1, #31
   1df10:	4608      	mov	r0, r1
   1df12:	3204      	adds	r2, #4
   1df14:	4629      	mov	r1, r5
   1df16:	9207      	str	r2, [sp, #28]
   1df18:	e9c3 0100 	strd	r0, r1, [r3]
   1df1c:	f7ff bb62 	b.w	1d5e4 <_svfiprintf_r+0x34>
   1df20:	9c07      	ldr	r4, [sp, #28]
   1df22:	3407      	adds	r4, #7
   1df24:	f024 0407 	bic.w	r4, r4, #7
   1df28:	e9d4 0100 	ldrd	r0, r1, [r4]
   1df2c:	f104 0208 	add.w	r2, r4, #8
   1df30:	9207      	str	r2, [sp, #28]
   1df32:	4604      	mov	r4, r0
   1df34:	460d      	mov	r5, r1
   1df36:	e506      	b.n	1d946 <_svfiprintf_r+0x396>
   1df38:	aa0f      	add	r2, sp, #60	; 0x3c
   1df3a:	9905      	ldr	r1, [sp, #20]
   1df3c:	4638      	mov	r0, r7
   1df3e:	f7ff fab9 	bl	1d4b4 <__ssprint_r>
   1df42:	2800      	cmp	r0, #0
   1df44:	f47f aec6 	bne.w	1dcd4 <_svfiprintf_r+0x724>
   1df48:	9911      	ldr	r1, [sp, #68]	; 0x44
   1df4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1df4c:	46d1      	mov	r9, sl
   1df4e:	e633      	b.n	1dbb8 <_svfiprintf_r+0x608>
   1df50:	9a07      	ldr	r2, [sp, #28]
   1df52:	6813      	ldr	r3, [r2, #0]
   1df54:	3204      	adds	r2, #4
   1df56:	9207      	str	r2, [sp, #28]
   1df58:	9a02      	ldr	r2, [sp, #8]
   1df5a:	601a      	str	r2, [r3, #0]
   1df5c:	f7ff bb42 	b.w	1d5e4 <_svfiprintf_r+0x34>
   1df60:	4630      	mov	r0, r6
   1df62:	9301      	str	r3, [sp, #4]
   1df64:	9407      	str	r4, [sp, #28]
   1df66:	f7fd ff6b 	bl	1be40 <strlen>
   1df6a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1df6e:	9004      	str	r0, [sp, #16]
   1df70:	9303      	str	r3, [sp, #12]
   1df72:	f04f 0800 	mov.w	r8, #0
   1df76:	e512      	b.n	1d99e <_svfiprintf_r+0x3ee>
   1df78:	2140      	movs	r1, #64	; 0x40
   1df7a:	9200      	str	r2, [sp, #0]
   1df7c:	f7fe fc2e 	bl	1c7dc <_malloc_r>
   1df80:	9a05      	ldr	r2, [sp, #20]
   1df82:	6010      	str	r0, [r2, #0]
   1df84:	6110      	str	r0, [r2, #16]
   1df86:	9a00      	ldr	r2, [sp, #0]
   1df88:	b328      	cbz	r0, 1dfd6 <_svfiprintf_r+0xa26>
   1df8a:	9905      	ldr	r1, [sp, #20]
   1df8c:	2340      	movs	r3, #64	; 0x40
   1df8e:	614b      	str	r3, [r1, #20]
   1df90:	f7ff bb1c 	b.w	1d5cc <_svfiprintf_r+0x1c>
   1df94:	4642      	mov	r2, r8
   1df96:	2a06      	cmp	r2, #6
   1df98:	bf28      	it	cs
   1df9a:	2206      	movcs	r2, #6
   1df9c:	9204      	str	r2, [sp, #16]
   1df9e:	9407      	str	r4, [sp, #28]
   1dfa0:	9200      	str	r2, [sp, #0]
   1dfa2:	4e17      	ldr	r6, [pc, #92]	; (1e000 <_svfiprintf_r+0xa50>)
   1dfa4:	e42f      	b.n	1d806 <_svfiprintf_r+0x256>
   1dfa6:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1dfaa:	f8cd 8010 	str.w	r8, [sp, #16]
   1dfae:	9203      	str	r2, [sp, #12]
   1dfb0:	9407      	str	r4, [sp, #28]
   1dfb2:	9301      	str	r3, [sp, #4]
   1dfb4:	4680      	mov	r8, r0
   1dfb6:	e4f2      	b.n	1d99e <_svfiprintf_r+0x3ee>
   1dfb8:	9a07      	ldr	r2, [sp, #28]
   1dfba:	6811      	ldr	r1, [r2, #0]
   1dfbc:	f89b 2001 	ldrb.w	r2, [fp, #1]
   1dfc0:	ea41 78e1 	orr.w	r8, r1, r1, asr #31
   1dfc4:	9907      	ldr	r1, [sp, #28]
   1dfc6:	3104      	adds	r1, #4
   1dfc8:	46b3      	mov	fp, r6
   1dfca:	9107      	str	r1, [sp, #28]
   1dfcc:	f7ff bb3d 	b.w	1d64a <_svfiprintf_r+0x9a>
   1dfd0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1dfd4:	e51f      	b.n	1da16 <_svfiprintf_r+0x466>
   1dfd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1dfd8:	230c      	movs	r3, #12
   1dfda:	6013      	str	r3, [r2, #0]
   1dfdc:	f04f 33ff 	mov.w	r3, #4294967295
   1dfe0:	9302      	str	r3, [sp, #8]
   1dfe2:	e680      	b.n	1dce6 <_svfiprintf_r+0x736>
   1dfe4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1dfe8:	f7ff bbcb 	b.w	1d782 <_svfiprintf_r+0x1d2>
   1dfec:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1dff0:	e497      	b.n	1d922 <_svfiprintf_r+0x372>
   1dff2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1dff6:	e59e      	b.n	1db36 <_svfiprintf_r+0x586>
   1dff8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1dffc:	e457      	b.n	1d8ae <_svfiprintf_r+0x2fe>
   1dffe:	bf00      	nop
   1e000:	00021cc4 	.word	0x00021cc4

0001e004 <_sungetc_r>:
   1e004:	b538      	push	{r3, r4, r5, lr}
   1e006:	1c4b      	adds	r3, r1, #1
   1e008:	d01a      	beq.n	1e040 <_sungetc_r+0x3c>
   1e00a:	8993      	ldrh	r3, [r2, #12]
   1e00c:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1e00e:	f023 0320 	bic.w	r3, r3, #32
   1e012:	b2cd      	uxtb	r5, r1
   1e014:	8193      	strh	r3, [r2, #12]
   1e016:	b1b4      	cbz	r4, 1e046 <_sungetc_r+0x42>
   1e018:	4614      	mov	r4, r2
   1e01a:	6852      	ldr	r2, [r2, #4]
   1e01c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e01e:	429a      	cmp	r2, r3
   1e020:	da09      	bge.n	1e036 <_sungetc_r+0x32>
   1e022:	6823      	ldr	r3, [r4, #0]
   1e024:	1e5a      	subs	r2, r3, #1
   1e026:	6022      	str	r2, [r4, #0]
   1e028:	f803 5c01 	strb.w	r5, [r3, #-1]
   1e02c:	6863      	ldr	r3, [r4, #4]
   1e02e:	3301      	adds	r3, #1
   1e030:	6063      	str	r3, [r4, #4]
   1e032:	4628      	mov	r0, r5
   1e034:	bd38      	pop	{r3, r4, r5, pc}
   1e036:	4621      	mov	r1, r4
   1e038:	f000 fd52 	bl	1eae0 <__submore>
   1e03c:	2800      	cmp	r0, #0
   1e03e:	d0f0      	beq.n	1e022 <_sungetc_r+0x1e>
   1e040:	f04f 35ff 	mov.w	r5, #4294967295
   1e044:	e7f5      	b.n	1e032 <_sungetc_r+0x2e>
   1e046:	6911      	ldr	r1, [r2, #16]
   1e048:	6813      	ldr	r3, [r2, #0]
   1e04a:	b129      	cbz	r1, 1e058 <_sungetc_r+0x54>
   1e04c:	4299      	cmp	r1, r3
   1e04e:	d203      	bcs.n	1e058 <_sungetc_r+0x54>
   1e050:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   1e054:	428d      	cmp	r5, r1
   1e056:	d00f      	beq.n	1e078 <_sungetc_r+0x74>
   1e058:	6393      	str	r3, [r2, #56]	; 0x38
   1e05a:	4613      	mov	r3, r2
   1e05c:	6854      	ldr	r4, [r2, #4]
   1e05e:	63d4      	str	r4, [r2, #60]	; 0x3c
   1e060:	f102 0040 	add.w	r0, r2, #64	; 0x40
   1e064:	2103      	movs	r1, #3
   1e066:	6310      	str	r0, [r2, #48]	; 0x30
   1e068:	6351      	str	r1, [r2, #52]	; 0x34
   1e06a:	f803 5f42 	strb.w	r5, [r3, #66]!
   1e06e:	2101      	movs	r1, #1
   1e070:	6013      	str	r3, [r2, #0]
   1e072:	6051      	str	r1, [r2, #4]
   1e074:	4628      	mov	r0, r5
   1e076:	bd38      	pop	{r3, r4, r5, pc}
   1e078:	6851      	ldr	r1, [r2, #4]
   1e07a:	3b01      	subs	r3, #1
   1e07c:	3101      	adds	r1, #1
   1e07e:	6013      	str	r3, [r2, #0]
   1e080:	6051      	str	r1, [r2, #4]
   1e082:	e7d6      	b.n	1e032 <_sungetc_r+0x2e>

0001e084 <__ssrefill_r>:
   1e084:	b510      	push	{r4, lr}
   1e086:	460c      	mov	r4, r1
   1e088:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1e08a:	b169      	cbz	r1, 1e0a8 <__ssrefill_r+0x24>
   1e08c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1e090:	4299      	cmp	r1, r3
   1e092:	d001      	beq.n	1e098 <__ssrefill_r+0x14>
   1e094:	f000 fdbc 	bl	1ec10 <_free_r>
   1e098:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1e09a:	6063      	str	r3, [r4, #4]
   1e09c:	2000      	movs	r0, #0
   1e09e:	6320      	str	r0, [r4, #48]	; 0x30
   1e0a0:	b113      	cbz	r3, 1e0a8 <__ssrefill_r+0x24>
   1e0a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1e0a4:	6023      	str	r3, [r4, #0]
   1e0a6:	bd10      	pop	{r4, pc}
   1e0a8:	89a3      	ldrh	r3, [r4, #12]
   1e0aa:	6922      	ldr	r2, [r4, #16]
   1e0ac:	6022      	str	r2, [r4, #0]
   1e0ae:	f043 0320 	orr.w	r3, r3, #32
   1e0b2:	2200      	movs	r2, #0
   1e0b4:	81a3      	strh	r3, [r4, #12]
   1e0b6:	6062      	str	r2, [r4, #4]
   1e0b8:	f04f 30ff 	mov.w	r0, #4294967295
   1e0bc:	bd10      	pop	{r4, pc}
   1e0be:	bf00      	nop

0001e0c0 <_sfread_r>:
   1e0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0c4:	b083      	sub	sp, #12
   1e0c6:	fb02 f903 	mul.w	r9, r2, r3
   1e0ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1e0cc:	f1b9 0f00 	cmp.w	r9, #0
   1e0d0:	d028      	beq.n	1e124 <_sfread_r+0x64>
   1e0d2:	4607      	mov	r7, r0
   1e0d4:	469a      	mov	sl, r3
   1e0d6:	9201      	str	r2, [sp, #4]
   1e0d8:	460d      	mov	r5, r1
   1e0da:	464e      	mov	r6, r9
   1e0dc:	f04f 0800 	mov.w	r8, #0
   1e0e0:	e00f      	b.n	1e102 <_sfread_r+0x42>
   1e0e2:	6821      	ldr	r1, [r4, #0]
   1e0e4:	f7fd fd8e 	bl	1bc04 <memcpy>
   1e0e8:	6822      	ldr	r2, [r4, #0]
   1e0ea:	f8c4 8004 	str.w	r8, [r4, #4]
   1e0ee:	445a      	add	r2, fp
   1e0f0:	6022      	str	r2, [r4, #0]
   1e0f2:	4621      	mov	r1, r4
   1e0f4:	4638      	mov	r0, r7
   1e0f6:	445d      	add	r5, fp
   1e0f8:	eba6 060b 	sub.w	r6, r6, fp
   1e0fc:	f7ff ffc2 	bl	1e084 <__ssrefill_r>
   1e100:	b9a0      	cbnz	r0, 1e12c <_sfread_r+0x6c>
   1e102:	f8d4 b004 	ldr.w	fp, [r4, #4]
   1e106:	455e      	cmp	r6, fp
   1e108:	4628      	mov	r0, r5
   1e10a:	465a      	mov	r2, fp
   1e10c:	d8e9      	bhi.n	1e0e2 <_sfread_r+0x22>
   1e10e:	4632      	mov	r2, r6
   1e110:	6821      	ldr	r1, [r4, #0]
   1e112:	f7fd fd77 	bl	1bc04 <memcpy>
   1e116:	6862      	ldr	r2, [r4, #4]
   1e118:	6823      	ldr	r3, [r4, #0]
   1e11a:	1b92      	subs	r2, r2, r6
   1e11c:	441e      	add	r6, r3
   1e11e:	46d1      	mov	r9, sl
   1e120:	6062      	str	r2, [r4, #4]
   1e122:	6026      	str	r6, [r4, #0]
   1e124:	4648      	mov	r0, r9
   1e126:	b003      	add	sp, #12
   1e128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e12c:	9b01      	ldr	r3, [sp, #4]
   1e12e:	eba9 0906 	sub.w	r9, r9, r6
   1e132:	fbb9 f9f3 	udiv	r9, r9, r3
   1e136:	4648      	mov	r0, r9
   1e138:	b003      	add	sp, #12
   1e13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e13e:	bf00      	nop

0001e140 <__ssvfiscanf_r>:
   1e140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e144:	468b      	mov	fp, r1
   1e146:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   1e14a:	b0d9      	sub	sp, #356	; 0x164
   1e14c:	4607      	mov	r7, r0
   1e14e:	0488      	lsls	r0, r1, #18
   1e150:	9306      	str	r3, [sp, #24]
   1e152:	d409      	bmi.n	1e168 <__ssvfiscanf_r+0x28>
   1e154:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1e158:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1e15c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1e160:	f8ab 100c 	strh.w	r1, [fp, #12]
   1e164:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   1e168:	4614      	mov	r4, r2
   1e16a:	4626      	mov	r6, r4
   1e16c:	2300      	movs	r3, #0
   1e16e:	9307      	str	r3, [sp, #28]
   1e170:	9304      	str	r3, [sp, #16]
   1e172:	469a      	mov	sl, r3
   1e174:	9305      	str	r3, [sp, #20]
   1e176:	f816 3b01 	ldrb.w	r3, [r6], #1
   1e17a:	930b      	str	r3, [sp, #44]	; 0x2c
   1e17c:	b363      	cbz	r3, 1e1d8 <__ssvfiscanf_r+0x98>
   1e17e:	f000 fe4d 	bl	1ee1c <__locale_ctype_ptr>
   1e182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e184:	4418      	add	r0, r3
   1e186:	7845      	ldrb	r5, [r0, #1]
   1e188:	f015 0508 	ands.w	r5, r5, #8
   1e18c:	d028      	beq.n	1e1e0 <__ssvfiscanf_r+0xa0>
   1e18e:	f8db 2004 	ldr.w	r2, [fp, #4]
   1e192:	e012      	b.n	1e1ba <__ssvfiscanf_r+0x7a>
   1e194:	f000 fe42 	bl	1ee1c <__locale_ctype_ptr>
   1e198:	f8db 3000 	ldr.w	r3, [fp]
   1e19c:	781a      	ldrb	r2, [r3, #0]
   1e19e:	4410      	add	r0, r2
   1e1a0:	3301      	adds	r3, #1
   1e1a2:	7842      	ldrb	r2, [r0, #1]
   1e1a4:	0712      	lsls	r2, r2, #28
   1e1a6:	d510      	bpl.n	1e1ca <__ssvfiscanf_r+0x8a>
   1e1a8:	f8db 2004 	ldr.w	r2, [fp, #4]
   1e1ac:	f8cb 3000 	str.w	r3, [fp]
   1e1b0:	3a01      	subs	r2, #1
   1e1b2:	f10a 0a01 	add.w	sl, sl, #1
   1e1b6:	f8cb 2004 	str.w	r2, [fp, #4]
   1e1ba:	2a00      	cmp	r2, #0
   1e1bc:	dcea      	bgt.n	1e194 <__ssvfiscanf_r+0x54>
   1e1be:	4659      	mov	r1, fp
   1e1c0:	4638      	mov	r0, r7
   1e1c2:	f7ff ff5f 	bl	1e084 <__ssrefill_r>
   1e1c6:	2800      	cmp	r0, #0
   1e1c8:	d0e4      	beq.n	1e194 <__ssvfiscanf_r+0x54>
   1e1ca:	4634      	mov	r4, r6
   1e1cc:	4626      	mov	r6, r4
   1e1ce:	f816 3b01 	ldrb.w	r3, [r6], #1
   1e1d2:	930b      	str	r3, [sp, #44]	; 0x2c
   1e1d4:	2b00      	cmp	r3, #0
   1e1d6:	d1d2      	bne.n	1e17e <__ssvfiscanf_r+0x3e>
   1e1d8:	9805      	ldr	r0, [sp, #20]
   1e1da:	b059      	add	sp, #356	; 0x164
   1e1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1e0:	2b25      	cmp	r3, #37	; 0x25
   1e1e2:	f040 8084 	bne.w	1e2ee <__ssvfiscanf_r+0x1ae>
   1e1e6:	f894 8001 	ldrb.w	r8, [r4, #1]
   1e1ea:	462c      	mov	r4, r5
   1e1ec:	1c73      	adds	r3, r6, #1
   1e1ee:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
   1e1f2:	f200 8187 	bhi.w	1e504 <__ssvfiscanf_r+0x3c4>
   1e1f6:	e8df f018 	tbh	[pc, r8, lsl #1]
   1e1fa:	0093      	.short	0x0093
   1e1fc:	01850185 	.word	0x01850185
   1e200:	01850185 	.word	0x01850185
   1e204:	01850185 	.word	0x01850185
   1e208:	01850185 	.word	0x01850185
   1e20c:	01850185 	.word	0x01850185
   1e210:	01850185 	.word	0x01850185
   1e214:	01850185 	.word	0x01850185
   1e218:	01850185 	.word	0x01850185
   1e21c:	01850185 	.word	0x01850185
   1e220:	01850185 	.word	0x01850185
   1e224:	01850185 	.word	0x01850185
   1e228:	01850185 	.word	0x01850185
   1e22c:	01850185 	.word	0x01850185
   1e230:	01850185 	.word	0x01850185
   1e234:	01850185 	.word	0x01850185
   1e238:	01850185 	.word	0x01850185
   1e23c:	01850185 	.word	0x01850185
   1e240:	01850185 	.word	0x01850185
   1e244:	01850079 	.word	0x01850079
   1e248:	01850185 	.word	0x01850185
   1e24c:	017f0185 	.word	0x017f0185
   1e250:	01850185 	.word	0x01850185
   1e254:	01850185 	.word	0x01850185
   1e258:	01760185 	.word	0x01760185
   1e25c:	01760176 	.word	0x01760176
   1e260:	01760176 	.word	0x01760176
   1e264:	01760176 	.word	0x01760176
   1e268:	01760176 	.word	0x01760176
   1e26c:	01850176 	.word	0x01850176
   1e270:	01850185 	.word	0x01850185
   1e274:	01850185 	.word	0x01850185
   1e278:	01850185 	.word	0x01850185
   1e27c:	01850185 	.word	0x01850185
   1e280:	01720185 	.word	0x01720185
   1e284:	01850185 	.word	0x01850185
   1e288:	01850185 	.word	0x01850185
   1e28c:	01850185 	.word	0x01850185
   1e290:	016c0185 	.word	0x016c0185
   1e294:	01850185 	.word	0x01850185
   1e298:	01850168 	.word	0x01850168
   1e29c:	01850185 	.word	0x01850185
   1e2a0:	01850185 	.word	0x01850185
   1e2a4:	01850185 	.word	0x01850185
   1e2a8:	01640185 	.word	0x01640185
   1e2ac:	01850185 	.word	0x01850185
   1e2b0:	0185015b 	.word	0x0185015b
   1e2b4:	01850185 	.word	0x01850185
   1e2b8:	01850185 	.word	0x01850185
   1e2bc:	01850185 	.word	0x01850185
   1e2c0:	01030115 	.word	0x01030115
   1e2c4:	01850185 	.word	0x01850185
   1e2c8:	011a0185 	.word	0x011a0185
   1e2cc:	0185009a 	.word	0x0185009a
   1e2d0:	01510185 	.word	0x01510185
   1e2d4:	013a0185 	.word	0x013a0185
   1e2d8:	012a0133 	.word	0x012a0133
   1e2dc:	01850185 	.word	0x01850185
   1e2e0:	01850127 	.word	0x01850127
   1e2e4:	01850120 	.word	0x01850120
   1e2e8:	01640185 	.word	0x01640185
   1e2ec:	461e      	mov	r6, r3
   1e2ee:	f8db 3004 	ldr.w	r3, [fp, #4]
   1e2f2:	2b00      	cmp	r3, #0
   1e2f4:	f340 8375 	ble.w	1e9e2 <__ssvfiscanf_r+0x8a2>
   1e2f8:	f8db 3000 	ldr.w	r3, [fp]
   1e2fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   1e300:	7819      	ldrb	r1, [r3, #0]
   1e302:	4291      	cmp	r1, r2
   1e304:	f47f af68 	bne.w	1e1d8 <__ssvfiscanf_r+0x98>
   1e308:	f8db 2004 	ldr.w	r2, [fp, #4]
   1e30c:	3301      	adds	r3, #1
   1e30e:	3a01      	subs	r2, #1
   1e310:	f8cb 3000 	str.w	r3, [fp]
   1e314:	f10a 0a01 	add.w	sl, sl, #1
   1e318:	f8cb 2004 	str.w	r2, [fp, #4]
   1e31c:	4634      	mov	r4, r6
   1e31e:	e755      	b.n	1e1cc <__ssvfiscanf_r+0x8c>
   1e320:	f04f 33ff 	mov.w	r3, #4294967295
   1e324:	9305      	str	r3, [sp, #20]
   1e326:	9805      	ldr	r0, [sp, #20]
   1e328:	b059      	add	sp, #356	; 0x164
   1e32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e32e:	9303      	str	r3, [sp, #12]
   1e330:	4ba7      	ldr	r3, [pc, #668]	; (1e5d0 <__ssvfiscanf_r+0x490>)
   1e332:	9307      	str	r3, [sp, #28]
   1e334:	2300      	movs	r3, #0
   1e336:	9304      	str	r3, [sp, #16]
   1e338:	2603      	movs	r6, #3
   1e33a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1e33e:	2b00      	cmp	r3, #0
   1e340:	dd69      	ble.n	1e416 <__ssvfiscanf_r+0x2d6>
   1e342:	0669      	lsls	r1, r5, #25
   1e344:	d533      	bpl.n	1e3ae <__ssvfiscanf_r+0x26e>
   1e346:	2e02      	cmp	r6, #2
   1e348:	f000 81f7 	beq.w	1e73a <__ssvfiscanf_r+0x5fa>
   1e34c:	2e03      	cmp	r6, #3
   1e34e:	f000 8143 	beq.w	1e5d8 <__ssvfiscanf_r+0x498>
   1e352:	2e01      	cmp	r6, #1
   1e354:	f000 810a 	beq.w	1e56c <__ssvfiscanf_r+0x42c>
   1e358:	2c00      	cmp	r4, #0
   1e35a:	bf08      	it	eq
   1e35c:	2401      	moveq	r4, #1
   1e35e:	f015 0301 	ands.w	r3, r5, #1
   1e362:	f040 8247 	bne.w	1e7f4 <__ssvfiscanf_r+0x6b4>
   1e366:	06ed      	lsls	r5, r5, #27
   1e368:	f140 831c 	bpl.w	1e9a4 <__ssvfiscanf_r+0x864>
   1e36c:	461d      	mov	r5, r3
   1e36e:	e009      	b.n	1e384 <__ssvfiscanf_r+0x244>
   1e370:	4413      	add	r3, r2
   1e372:	f8cb 3000 	str.w	r3, [fp]
   1e376:	4415      	add	r5, r2
   1e378:	1aa4      	subs	r4, r4, r2
   1e37a:	f7ff fe83 	bl	1e084 <__ssrefill_r>
   1e37e:	2800      	cmp	r0, #0
   1e380:	f040 82d6 	bne.w	1e930 <__ssvfiscanf_r+0x7f0>
   1e384:	f8db 2004 	ldr.w	r2, [fp, #4]
   1e388:	f8db 3000 	ldr.w	r3, [fp]
   1e38c:	42a2      	cmp	r2, r4
   1e38e:	4659      	mov	r1, fp
   1e390:	4638      	mov	r0, r7
   1e392:	dbed      	blt.n	1e370 <__ssvfiscanf_r+0x230>
   1e394:	1b12      	subs	r2, r2, r4
   1e396:	4423      	add	r3, r4
   1e398:	f8cb 2004 	str.w	r2, [fp, #4]
   1e39c:	4425      	add	r5, r4
   1e39e:	f8cb 3000 	str.w	r3, [fp]
   1e3a2:	9e03      	ldr	r6, [sp, #12]
   1e3a4:	44aa      	add	sl, r5
   1e3a6:	4634      	mov	r4, r6
   1e3a8:	e710      	b.n	1e1cc <__ssvfiscanf_r+0x8c>
   1e3aa:	f8cb 3000 	str.w	r3, [fp]
   1e3ae:	f000 fd35 	bl	1ee1c <__locale_ctype_ptr>
   1e3b2:	f8db 3000 	ldr.w	r3, [fp]
   1e3b6:	781a      	ldrb	r2, [r3, #0]
   1e3b8:	4410      	add	r0, r2
   1e3ba:	3301      	adds	r3, #1
   1e3bc:	7842      	ldrb	r2, [r0, #1]
   1e3be:	0712      	lsls	r2, r2, #28
   1e3c0:	d5c1      	bpl.n	1e346 <__ssvfiscanf_r+0x206>
   1e3c2:	f8db 2004 	ldr.w	r2, [fp, #4]
   1e3c6:	3a01      	subs	r2, #1
   1e3c8:	2a00      	cmp	r2, #0
   1e3ca:	f10a 0a01 	add.w	sl, sl, #1
   1e3ce:	f8cb 2004 	str.w	r2, [fp, #4]
   1e3d2:	dcea      	bgt.n	1e3aa <__ssvfiscanf_r+0x26a>
   1e3d4:	4659      	mov	r1, fp
   1e3d6:	4638      	mov	r0, r7
   1e3d8:	f7ff fe54 	bl	1e084 <__ssrefill_r>
   1e3dc:	2800      	cmp	r0, #0
   1e3de:	d0e6      	beq.n	1e3ae <__ssvfiscanf_r+0x26e>
   1e3e0:	9a05      	ldr	r2, [sp, #20]
   1e3e2:	2a00      	cmp	r2, #0
   1e3e4:	d09c      	beq.n	1e320 <__ssvfiscanf_r+0x1e0>
   1e3e6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1e3ea:	f013 0f40 	tst.w	r3, #64	; 0x40
   1e3ee:	4613      	mov	r3, r2
   1e3f0:	bf18      	it	ne
   1e3f2:	f04f 33ff 	movne.w	r3, #4294967295
   1e3f6:	9305      	str	r3, [sp, #20]
   1e3f8:	9805      	ldr	r0, [sp, #20]
   1e3fa:	b059      	add	sp, #356	; 0x164
   1e3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e400:	9303      	str	r3, [sp, #12]
   1e402:	4b73      	ldr	r3, [pc, #460]	; (1e5d0 <__ssvfiscanf_r+0x490>)
   1e404:	9307      	str	r3, [sp, #28]
   1e406:	230a      	movs	r3, #10
   1e408:	9304      	str	r3, [sp, #16]
   1e40a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1e40e:	2b00      	cmp	r3, #0
   1e410:	f04f 0603 	mov.w	r6, #3
   1e414:	dc95      	bgt.n	1e342 <__ssvfiscanf_r+0x202>
   1e416:	4659      	mov	r1, fp
   1e418:	4638      	mov	r0, r7
   1e41a:	f7ff fe33 	bl	1e084 <__ssrefill_r>
   1e41e:	2800      	cmp	r0, #0
   1e420:	d08f      	beq.n	1e342 <__ssvfiscanf_r+0x202>
   1e422:	e7dd      	b.n	1e3e0 <__ssvfiscanf_r+0x2a0>
   1e424:	9303      	str	r3, [sp, #12]
   1e426:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1e42a:	2600      	movs	r6, #0
   1e42c:	e785      	b.n	1e33a <__ssvfiscanf_r+0x1fa>
   1e42e:	f896 8001 	ldrb.w	r8, [r6, #1]
   1e432:	f045 0504 	orr.w	r5, r5, #4
   1e436:	461e      	mov	r6, r3
   1e438:	e6d8      	b.n	1e1ec <__ssvfiscanf_r+0xac>
   1e43a:	9303      	str	r3, [sp, #12]
   1e43c:	4b65      	ldr	r3, [pc, #404]	; (1e5d4 <__ssvfiscanf_r+0x494>)
   1e43e:	9307      	str	r3, [sp, #28]
   1e440:	230a      	movs	r3, #10
   1e442:	9304      	str	r3, [sp, #16]
   1e444:	2603      	movs	r6, #3
   1e446:	e778      	b.n	1e33a <__ssvfiscanf_r+0x1fa>
   1e448:	9303      	str	r3, [sp, #12]
   1e44a:	2602      	movs	r6, #2
   1e44c:	e775      	b.n	1e33a <__ssvfiscanf_r+0x1fa>
   1e44e:	9303      	str	r3, [sp, #12]
   1e450:	f445 7508 	orr.w	r5, r5, #544	; 0x220
   1e454:	4b5f      	ldr	r3, [pc, #380]	; (1e5d4 <__ssvfiscanf_r+0x494>)
   1e456:	9307      	str	r3, [sp, #28]
   1e458:	2310      	movs	r3, #16
   1e45a:	9304      	str	r3, [sp, #16]
   1e45c:	2603      	movs	r6, #3
   1e45e:	e76c      	b.n	1e33a <__ssvfiscanf_r+0x1fa>
   1e460:	9303      	str	r3, [sp, #12]
   1e462:	4b5c      	ldr	r3, [pc, #368]	; (1e5d4 <__ssvfiscanf_r+0x494>)
   1e464:	9307      	str	r3, [sp, #28]
   1e466:	2308      	movs	r3, #8
   1e468:	9304      	str	r3, [sp, #16]
   1e46a:	2603      	movs	r6, #3
   1e46c:	e765      	b.n	1e33a <__ssvfiscanf_r+0x1fa>
   1e46e:	9303      	str	r3, [sp, #12]
   1e470:	06eb      	lsls	r3, r5, #27
   1e472:	d478      	bmi.n	1e566 <__ssvfiscanf_r+0x426>
   1e474:	076e      	lsls	r6, r5, #29
   1e476:	f100 82d4 	bmi.w	1ea22 <__ssvfiscanf_r+0x8e2>
   1e47a:	07ec      	lsls	r4, r5, #31
   1e47c:	f100 82c0 	bmi.w	1ea00 <__ssvfiscanf_r+0x8c0>
   1e480:	07a8      	lsls	r0, r5, #30
   1e482:	f140 82bd 	bpl.w	1ea00 <__ssvfiscanf_r+0x8c0>
   1e486:	9a06      	ldr	r2, [sp, #24]
   1e488:	9e03      	ldr	r6, [sp, #12]
   1e48a:	6813      	ldr	r3, [r2, #0]
   1e48c:	4650      	mov	r0, sl
   1e48e:	17c1      	asrs	r1, r0, #31
   1e490:	3204      	adds	r2, #4
   1e492:	9206      	str	r2, [sp, #24]
   1e494:	e9c3 0100 	strd	r0, r1, [r3]
   1e498:	4634      	mov	r4, r6
   1e49a:	e697      	b.n	1e1cc <__ssvfiscanf_r+0x8c>
   1e49c:	f896 8001 	ldrb.w	r8, [r6, #1]
   1e4a0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1e4a4:	f000 82a5 	beq.w	1e9f2 <__ssvfiscanf_r+0x8b2>
   1e4a8:	f045 0501 	orr.w	r5, r5, #1
   1e4ac:	461e      	mov	r6, r3
   1e4ae:	e69d      	b.n	1e1ec <__ssvfiscanf_r+0xac>
   1e4b0:	4619      	mov	r1, r3
   1e4b2:	a818      	add	r0, sp, #96	; 0x60
   1e4b4:	f000 ff0e 	bl	1f2d4 <__sccl>
   1e4b8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1e4bc:	9003      	str	r0, [sp, #12]
   1e4be:	2601      	movs	r6, #1
   1e4c0:	e73b      	b.n	1e33a <__ssvfiscanf_r+0x1fa>
   1e4c2:	9303      	str	r3, [sp, #12]
   1e4c4:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   1e4c8:	e7c4      	b.n	1e454 <__ssvfiscanf_r+0x314>
   1e4ca:	9303      	str	r3, [sp, #12]
   1e4cc:	f045 0501 	orr.w	r5, r5, #1
   1e4d0:	e7c7      	b.n	1e462 <__ssvfiscanf_r+0x322>
   1e4d2:	f896 8001 	ldrb.w	r8, [r6, #1]
   1e4d6:	f045 0502 	orr.w	r5, r5, #2
   1e4da:	461e      	mov	r6, r3
   1e4dc:	e686      	b.n	1e1ec <__ssvfiscanf_r+0xac>
   1e4de:	9303      	str	r3, [sp, #12]
   1e4e0:	f045 0501 	orr.w	r5, r5, #1
   1e4e4:	e78d      	b.n	1e402 <__ssvfiscanf_r+0x2c2>
   1e4e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1e4ea:	eb08 0444 	add.w	r4, r8, r4, lsl #1
   1e4ee:	3c30      	subs	r4, #48	; 0x30
   1e4f0:	f896 8001 	ldrb.w	r8, [r6, #1]
   1e4f4:	461e      	mov	r6, r3
   1e4f6:	e679      	b.n	1e1ec <__ssvfiscanf_r+0xac>
   1e4f8:	f896 8001 	ldrb.w	r8, [r6, #1]
   1e4fc:	f045 0510 	orr.w	r5, r5, #16
   1e500:	461e      	mov	r6, r3
   1e502:	e673      	b.n	1e1ec <__ssvfiscanf_r+0xac>
   1e504:	9303      	str	r3, [sp, #12]
   1e506:	f000 fc89 	bl	1ee1c <__locale_ctype_ptr>
   1e50a:	4440      	add	r0, r8
   1e50c:	7843      	ldrb	r3, [r0, #1]
   1e50e:	f003 0303 	and.w	r3, r3, #3
   1e512:	2b01      	cmp	r3, #1
   1e514:	f47f af75 	bne.w	1e402 <__ssvfiscanf_r+0x2c2>
   1e518:	f045 0501 	orr.w	r5, r5, #1
   1e51c:	e771      	b.n	1e402 <__ssvfiscanf_r+0x2c2>
   1e51e:	ab0c      	add	r3, sp, #48	; 0x30
   1e520:	4618      	mov	r0, r3
   1e522:	2208      	movs	r2, #8
   1e524:	2100      	movs	r1, #0
   1e526:	9308      	str	r3, [sp, #32]
   1e528:	f7fd fc06 	bl	1bd38 <memset>
   1e52c:	f015 0310 	ands.w	r3, r5, #16
   1e530:	9309      	str	r3, [sp, #36]	; 0x24
   1e532:	f000 81e1 	beq.w	1e8f8 <__ssvfiscanf_r+0x7b8>
   1e536:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   1e53a:	2600      	movs	r6, #0
   1e53c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1e540:	f000 fc6c 	bl	1ee1c <__locale_ctype_ptr>
   1e544:	f8db 3000 	ldr.w	r3, [fp]
   1e548:	781b      	ldrb	r3, [r3, #0]
   1e54a:	4403      	add	r3, r0
   1e54c:	785b      	ldrb	r3, [r3, #1]
   1e54e:	071a      	lsls	r2, r3, #28
   1e550:	d402      	bmi.n	1e558 <__ssvfiscanf_r+0x418>
   1e552:	2c00      	cmp	r4, #0
   1e554:	f040 8270 	bne.w	1ea38 <__ssvfiscanf_r+0x8f8>
   1e558:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e55a:	b923      	cbnz	r3, 1e566 <__ssvfiscanf_r+0x426>
   1e55c:	f8c9 3000 	str.w	r3, [r9]
   1e560:	9b05      	ldr	r3, [sp, #20]
   1e562:	3301      	adds	r3, #1
   1e564:	9305      	str	r3, [sp, #20]
   1e566:	9e03      	ldr	r6, [sp, #12]
   1e568:	4634      	mov	r4, r6
   1e56a:	e62f      	b.n	1e1cc <__ssvfiscanf_r+0x8c>
   1e56c:	2c00      	cmp	r4, #0
   1e56e:	bf08      	it	eq
   1e570:	f04f 34ff 	moveq.w	r4, #4294967295
   1e574:	06e8      	lsls	r0, r5, #27
   1e576:	f140 810b 	bpl.w	1e790 <__ssvfiscanf_r+0x650>
   1e57a:	f8db 2000 	ldr.w	r2, [fp]
   1e57e:	2500      	movs	r5, #0
   1e580:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1e584:	7813      	ldrb	r3, [r2, #0]
   1e586:	f818 3003 	ldrb.w	r3, [r8, r3]
   1e58a:	3201      	adds	r2, #1
   1e58c:	b1db      	cbz	r3, 1e5c6 <__ssvfiscanf_r+0x486>
   1e58e:	f8db 3004 	ldr.w	r3, [fp, #4]
   1e592:	f8cb 2000 	str.w	r2, [fp]
   1e596:	3501      	adds	r5, #1
   1e598:	3b01      	subs	r3, #1
   1e59a:	42ac      	cmp	r4, r5
   1e59c:	f8cb 3004 	str.w	r3, [fp, #4]
   1e5a0:	f43f aeff 	beq.w	1e3a2 <__ssvfiscanf_r+0x262>
   1e5a4:	2b00      	cmp	r3, #0
   1e5a6:	dced      	bgt.n	1e584 <__ssvfiscanf_r+0x444>
   1e5a8:	4659      	mov	r1, fp
   1e5aa:	4638      	mov	r0, r7
   1e5ac:	f7ff fd6a 	bl	1e084 <__ssrefill_r>
   1e5b0:	2800      	cmp	r0, #0
   1e5b2:	f47f aef6 	bne.w	1e3a2 <__ssvfiscanf_r+0x262>
   1e5b6:	f8db 2000 	ldr.w	r2, [fp]
   1e5ba:	7813      	ldrb	r3, [r2, #0]
   1e5bc:	f818 3003 	ldrb.w	r3, [r8, r3]
   1e5c0:	3201      	adds	r2, #1
   1e5c2:	2b00      	cmp	r3, #0
   1e5c4:	d1e3      	bne.n	1e58e <__ssvfiscanf_r+0x44e>
   1e5c6:	2d00      	cmp	r5, #0
   1e5c8:	f47f aeeb 	bne.w	1e3a2 <__ssvfiscanf_r+0x262>
   1e5cc:	e604      	b.n	1e1d8 <__ssvfiscanf_r+0x98>
   1e5ce:	bf00      	nop
   1e5d0:	0001f471 	.word	0x0001f471
   1e5d4:	0001d465 	.word	0x0001d465
   1e5d8:	1e63      	subs	r3, r4, #1
   1e5da:	2b26      	cmp	r3, #38	; 0x26
   1e5dc:	bf8c      	ite	hi
   1e5de:	f1a4 0227 	subhi.w	r2, r4, #39	; 0x27
   1e5e2:	2200      	movls	r2, #0
   1e5e4:	f04f 0900 	mov.w	r9, #0
   1e5e8:	4611      	mov	r1, r2
   1e5ea:	ae0e      	add	r6, sp, #56	; 0x38
   1e5ec:	464b      	mov	r3, r9
   1e5ee:	46b9      	mov	r9, r7
   1e5f0:	9f04      	ldr	r7, [sp, #16]
   1e5f2:	4652      	mov	r2, sl
   1e5f4:	bf88      	it	hi
   1e5f6:	2427      	movhi	r4, #39	; 0x27
   1e5f8:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
   1e5fc:	46b0      	mov	r8, r6
   1e5fe:	468a      	mov	sl, r1
   1e600:	f8db 0000 	ldr.w	r0, [fp]
   1e604:	f890 e000 	ldrb.w	lr, [r0]
   1e608:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
   1e60c:	294d      	cmp	r1, #77	; 0x4d
   1e60e:	d842      	bhi.n	1e696 <__ssvfiscanf_r+0x556>
   1e610:	e8df f001 	tbb	[pc, r1]
   1e614:	418e418e 	.word	0x418e418e
   1e618:	5d5d6341 	.word	0x5d5d6341
   1e61c:	5d5d5d5d 	.word	0x5d5d5d5d
   1e620:	4188885d 	.word	0x4188885d
   1e624:	41414141 	.word	0x41414141
   1e628:	58584141 	.word	0x58584141
   1e62c:	58585858 	.word	0x58585858
   1e630:	41414141 	.word	0x41414141
   1e634:	41414141 	.word	0x41414141
   1e638:	41414141 	.word	0x41414141
   1e63c:	41414141 	.word	0x41414141
   1e640:	41412741 	.word	0x41412741
   1e644:	41414141 	.word	0x41414141
   1e648:	58584141 	.word	0x58584141
   1e64c:	58585858 	.word	0x58585858
   1e650:	41414141 	.word	0x41414141
   1e654:	41414141 	.word	0x41414141
   1e658:	41414141 	.word	0x41414141
   1e65c:	41414141 	.word	0x41414141
   1e660:	2741      	.short	0x2741
   1e662:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
   1e666:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1e66a:	d114      	bne.n	1e696 <__ssvfiscanf_r+0x556>
   1e66c:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   1e670:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
   1e674:	2710      	movs	r7, #16
   1e676:	f8db 1004 	ldr.w	r1, [fp, #4]
   1e67a:	f888 e000 	strb.w	lr, [r8]
   1e67e:	3901      	subs	r1, #1
   1e680:	2900      	cmp	r1, #0
   1e682:	f108 0801 	add.w	r8, r8, #1
   1e686:	f8cb 1004 	str.w	r1, [fp, #4]
   1e68a:	dd40      	ble.n	1e70e <__ssvfiscanf_r+0x5ce>
   1e68c:	3001      	adds	r0, #1
   1e68e:	f8cb 0000 	str.w	r0, [fp]
   1e692:	3c01      	subs	r4, #1
   1e694:	d1b4      	bne.n	1e600 <__ssvfiscanf_r+0x4c0>
   1e696:	05e8      	lsls	r0, r5, #23
   1e698:	9704      	str	r7, [sp, #16]
   1e69a:	4692      	mov	sl, r2
   1e69c:	464f      	mov	r7, r9
   1e69e:	4699      	mov	r9, r3
   1e6a0:	d505      	bpl.n	1e6ae <__ssvfiscanf_r+0x56e>
   1e6a2:	45b0      	cmp	r8, r6
   1e6a4:	f200 8194 	bhi.w	1e9d0 <__ssvfiscanf_r+0x890>
   1e6a8:	45b0      	cmp	r8, r6
   1e6aa:	f43f ad95 	beq.w	1e1d8 <__ssvfiscanf_r+0x98>
   1e6ae:	f015 0410 	ands.w	r4, r5, #16
   1e6b2:	f000 80e5 	beq.w	1e880 <__ssvfiscanf_r+0x740>
   1e6b6:	eba8 0606 	sub.w	r6, r8, r6
   1e6ba:	44b1      	add	r9, r6
   1e6bc:	9e03      	ldr	r6, [sp, #12]
   1e6be:	44ca      	add	sl, r9
   1e6c0:	4634      	mov	r4, r6
   1e6c2:	e583      	b.n	1e1cc <__ssvfiscanf_r+0x8c>
   1e6c4:	2f0a      	cmp	r7, #10
   1e6c6:	dde6      	ble.n	1e696 <__ssvfiscanf_r+0x556>
   1e6c8:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1e6cc:	e7d3      	b.n	1e676 <__ssvfiscanf_r+0x536>
   1e6ce:	49b3      	ldr	r1, [pc, #716]	; (1e99c <__ssvfiscanf_r+0x85c>)
   1e6d0:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1e6d4:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1e6d8:	e7cd      	b.n	1e676 <__ssvfiscanf_r+0x536>
   1e6da:	0529      	lsls	r1, r5, #20
   1e6dc:	d5cb      	bpl.n	1e676 <__ssvfiscanf_r+0x536>
   1e6de:	b917      	cbnz	r7, 1e6e6 <__ssvfiscanf_r+0x5a6>
   1e6e0:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   1e6e4:	2708      	movs	r7, #8
   1e6e6:	0569      	lsls	r1, r5, #21
   1e6e8:	f100 80fa 	bmi.w	1e8e0 <__ssvfiscanf_r+0x7a0>
   1e6ec:	f425 7560 	bic.w	r5, r5, #896	; 0x380
   1e6f0:	f1ba 0f00 	cmp.w	sl, #0
   1e6f4:	d002      	beq.n	1e6fc <__ssvfiscanf_r+0x5bc>
   1e6f6:	f10a 3aff 	add.w	sl, sl, #4294967295
   1e6fa:	3401      	adds	r4, #1
   1e6fc:	f8db 1004 	ldr.w	r1, [fp, #4]
   1e700:	3901      	subs	r1, #1
   1e702:	2900      	cmp	r1, #0
   1e704:	f103 0301 	add.w	r3, r3, #1
   1e708:	f8cb 1004 	str.w	r1, [fp, #4]
   1e70c:	dcbe      	bgt.n	1e68c <__ssvfiscanf_r+0x54c>
   1e70e:	4659      	mov	r1, fp
   1e710:	4648      	mov	r0, r9
   1e712:	9308      	str	r3, [sp, #32]
   1e714:	9204      	str	r2, [sp, #16]
   1e716:	f7ff fcb5 	bl	1e084 <__ssrefill_r>
   1e71a:	9a04      	ldr	r2, [sp, #16]
   1e71c:	9b08      	ldr	r3, [sp, #32]
   1e71e:	2800      	cmp	r0, #0
   1e720:	d0b7      	beq.n	1e692 <__ssvfiscanf_r+0x552>
   1e722:	e7b8      	b.n	1e696 <__ssvfiscanf_r+0x556>
   1e724:	499d      	ldr	r1, [pc, #628]	; (1e99c <__ssvfiscanf_r+0x85c>)
   1e726:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1e72a:	2f08      	cmp	r7, #8
   1e72c:	dccc      	bgt.n	1e6c8 <__ssvfiscanf_r+0x588>
   1e72e:	e7b2      	b.n	1e696 <__ssvfiscanf_r+0x556>
   1e730:	0629      	lsls	r1, r5, #24
   1e732:	d5b0      	bpl.n	1e696 <__ssvfiscanf_r+0x556>
   1e734:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   1e738:	e79d      	b.n	1e676 <__ssvfiscanf_r+0x536>
   1e73a:	2c00      	cmp	r4, #0
   1e73c:	bf08      	it	eq
   1e73e:	f04f 34ff 	moveq.w	r4, #4294967295
   1e742:	f015 0601 	ands.w	r6, r5, #1
   1e746:	f47f aeea 	bne.w	1e51e <__ssvfiscanf_r+0x3de>
   1e74a:	06eb      	lsls	r3, r5, #27
   1e74c:	f140 80f4 	bpl.w	1e938 <__ssvfiscanf_r+0x7f8>
   1e750:	f000 fb64 	bl	1ee1c <__locale_ctype_ptr>
   1e754:	f8db 3000 	ldr.w	r3, [fp]
   1e758:	781a      	ldrb	r2, [r3, #0]
   1e75a:	4410      	add	r0, r2
   1e75c:	3301      	adds	r3, #1
   1e75e:	7842      	ldrb	r2, [r0, #1]
   1e760:	0715      	lsls	r5, r2, #28
   1e762:	d411      	bmi.n	1e788 <__ssvfiscanf_r+0x648>
   1e764:	f8db 2004 	ldr.w	r2, [fp, #4]
   1e768:	f8cb 3000 	str.w	r3, [fp]
   1e76c:	3601      	adds	r6, #1
   1e76e:	3a01      	subs	r2, #1
   1e770:	42b4      	cmp	r4, r6
   1e772:	f8cb 2004 	str.w	r2, [fp, #4]
   1e776:	d007      	beq.n	1e788 <__ssvfiscanf_r+0x648>
   1e778:	2a00      	cmp	r2, #0
   1e77a:	dce9      	bgt.n	1e750 <__ssvfiscanf_r+0x610>
   1e77c:	4659      	mov	r1, fp
   1e77e:	4638      	mov	r0, r7
   1e780:	f7ff fc80 	bl	1e084 <__ssrefill_r>
   1e784:	2800      	cmp	r0, #0
   1e786:	d0e3      	beq.n	1e750 <__ssvfiscanf_r+0x610>
   1e788:	44b2      	add	sl, r6
   1e78a:	9e03      	ldr	r6, [sp, #12]
   1e78c:	4634      	mov	r4, r6
   1e78e:	e51d      	b.n	1e1cc <__ssvfiscanf_r+0x8c>
   1e790:	9a06      	ldr	r2, [sp, #24]
   1e792:	6815      	ldr	r5, [r2, #0]
   1e794:	1d16      	adds	r6, r2, #4
   1e796:	46a9      	mov	r9, r5
   1e798:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1e79c:	f8db 3000 	ldr.w	r3, [fp]
   1e7a0:	781a      	ldrb	r2, [r3, #0]
   1e7a2:	f818 2002 	ldrb.w	r2, [r8, r2]
   1e7a6:	1c59      	adds	r1, r3, #1
   1e7a8:	b1c2      	cbz	r2, 1e7dc <__ssvfiscanf_r+0x69c>
   1e7aa:	f8db 2004 	ldr.w	r2, [fp, #4]
   1e7ae:	f8cb 1000 	str.w	r1, [fp]
   1e7b2:	3a01      	subs	r2, #1
   1e7b4:	f8cb 2004 	str.w	r2, [fp, #4]
   1e7b8:	781b      	ldrb	r3, [r3, #0]
   1e7ba:	f809 3b01 	strb.w	r3, [r9], #1
   1e7be:	3c01      	subs	r4, #1
   1e7c0:	d00c      	beq.n	1e7dc <__ssvfiscanf_r+0x69c>
   1e7c2:	f8db 3004 	ldr.w	r3, [fp, #4]
   1e7c6:	2b00      	cmp	r3, #0
   1e7c8:	dce8      	bgt.n	1e79c <__ssvfiscanf_r+0x65c>
   1e7ca:	4659      	mov	r1, fp
   1e7cc:	4638      	mov	r0, r7
   1e7ce:	f7ff fc59 	bl	1e084 <__ssrefill_r>
   1e7d2:	2800      	cmp	r0, #0
   1e7d4:	d0e2      	beq.n	1e79c <__ssvfiscanf_r+0x65c>
   1e7d6:	454d      	cmp	r5, r9
   1e7d8:	f43f ae02 	beq.w	1e3e0 <__ssvfiscanf_r+0x2a0>
   1e7dc:	ebb9 0505 	subs.w	r5, r9, r5
   1e7e0:	f43f acfa 	beq.w	1e1d8 <__ssvfiscanf_r+0x98>
   1e7e4:	9a05      	ldr	r2, [sp, #20]
   1e7e6:	9606      	str	r6, [sp, #24]
   1e7e8:	2300      	movs	r3, #0
   1e7ea:	3201      	adds	r2, #1
   1e7ec:	9205      	str	r2, [sp, #20]
   1e7ee:	f889 3000 	strb.w	r3, [r9]
   1e7f2:	e5d6      	b.n	1e3a2 <__ssvfiscanf_r+0x262>
   1e7f4:	ab0c      	add	r3, sp, #48	; 0x30
   1e7f6:	4618      	mov	r0, r3
   1e7f8:	2208      	movs	r2, #8
   1e7fa:	2100      	movs	r1, #0
   1e7fc:	9308      	str	r3, [sp, #32]
   1e7fe:	f7fd fa9b 	bl	1bd38 <memset>
   1e802:	f015 0310 	ands.w	r3, r5, #16
   1e806:	9309      	str	r3, [sp, #36]	; 0x24
   1e808:	d06d      	beq.n	1e8e6 <__ssvfiscanf_r+0x7a6>
   1e80a:	f04f 0900 	mov.w	r9, #0
   1e80e:	2c00      	cmp	r4, #0
   1e810:	f43f aea9 	beq.w	1e566 <__ssvfiscanf_r+0x426>
   1e814:	2500      	movs	r5, #0
   1e816:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1e81a:	f000 faed 	bl	1edf8 <__locale_mb_cur_max>
   1e81e:	4285      	cmp	r5, r0
   1e820:	f43f adde 	beq.w	1e3e0 <__ssvfiscanf_r+0x2a0>
   1e824:	e89b 000c 	ldmia.w	fp, {r2, r3}
   1e828:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e82c:	f8cb 2000 	str.w	r2, [fp]
   1e830:	3b01      	subs	r3, #1
   1e832:	9a08      	ldr	r2, [sp, #32]
   1e834:	9200      	str	r2, [sp, #0]
   1e836:	1c6e      	adds	r6, r5, #1
   1e838:	f8cb 3004 	str.w	r3, [fp, #4]
   1e83c:	f808 0005 	strb.w	r0, [r8, r5]
   1e840:	4633      	mov	r3, r6
   1e842:	4642      	mov	r2, r8
   1e844:	4649      	mov	r1, r9
   1e846:	4638      	mov	r0, r7
   1e848:	f000 faf6 	bl	1ee38 <_mbrtowc_r>
   1e84c:	1c43      	adds	r3, r0, #1
   1e84e:	f43f adc7 	beq.w	1e3e0 <__ssvfiscanf_r+0x2a0>
   1e852:	2800      	cmp	r0, #0
   1e854:	d15d      	bne.n	1e912 <__ssvfiscanf_r+0x7d2>
   1e856:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e858:	2b00      	cmp	r3, #0
   1e85a:	d15e      	bne.n	1e91a <__ssvfiscanf_r+0x7da>
   1e85c:	f8c9 3000 	str.w	r3, [r9]
   1e860:	44b2      	add	sl, r6
   1e862:	3c01      	subs	r4, #1
   1e864:	f109 0904 	add.w	r9, r9, #4
   1e868:	2500      	movs	r5, #0
   1e86a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1e86e:	2b00      	cmp	r3, #0
   1e870:	dd2d      	ble.n	1e8ce <__ssvfiscanf_r+0x78e>
   1e872:	2c00      	cmp	r4, #0
   1e874:	d1d1      	bne.n	1e81a <__ssvfiscanf_r+0x6da>
   1e876:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e878:	2b00      	cmp	r3, #0
   1e87a:	f43f ae71 	beq.w	1e560 <__ssvfiscanf_r+0x420>
   1e87e:	e672      	b.n	1e566 <__ssvfiscanf_r+0x426>
   1e880:	4622      	mov	r2, r4
   1e882:	4631      	mov	r1, r6
   1e884:	f888 4000 	strb.w	r4, [r8]
   1e888:	9b04      	ldr	r3, [sp, #16]
   1e88a:	9c07      	ldr	r4, [sp, #28]
   1e88c:	4638      	mov	r0, r7
   1e88e:	47a0      	blx	r4
   1e890:	06a9      	lsls	r1, r5, #26
   1e892:	d438      	bmi.n	1e906 <__ssvfiscanf_r+0x7c6>
   1e894:	076a      	lsls	r2, r5, #29
   1e896:	f100 80be 	bmi.w	1ea16 <__ssvfiscanf_r+0x8d6>
   1e89a:	f015 0201 	ands.w	r2, r5, #1
   1e89e:	d132      	bne.n	1e906 <__ssvfiscanf_r+0x7c6>
   1e8a0:	07ab      	lsls	r3, r5, #30
   1e8a2:	d530      	bpl.n	1e906 <__ssvfiscanf_r+0x7c6>
   1e8a4:	9b07      	ldr	r3, [sp, #28]
   1e8a6:	4619      	mov	r1, r3
   1e8a8:	4b3d      	ldr	r3, [pc, #244]	; (1e9a0 <__ssvfiscanf_r+0x860>)
   1e8aa:	4299      	cmp	r1, r3
   1e8ac:	4638      	mov	r0, r7
   1e8ae:	9b04      	ldr	r3, [sp, #16]
   1e8b0:	4631      	mov	r1, r6
   1e8b2:	f000 8105 	beq.w	1eac0 <__ssvfiscanf_r+0x980>
   1e8b6:	f000 febb 	bl	1f630 <_strtoll_r>
   1e8ba:	9a06      	ldr	r2, [sp, #24]
   1e8bc:	6813      	ldr	r3, [r2, #0]
   1e8be:	e9c3 0100 	strd	r0, r1, [r3]
   1e8c2:	3204      	adds	r2, #4
   1e8c4:	9206      	str	r2, [sp, #24]
   1e8c6:	9b05      	ldr	r3, [sp, #20]
   1e8c8:	3301      	adds	r3, #1
   1e8ca:	9305      	str	r3, [sp, #20]
   1e8cc:	e6f3      	b.n	1e6b6 <__ssvfiscanf_r+0x576>
   1e8ce:	4659      	mov	r1, fp
   1e8d0:	4638      	mov	r0, r7
   1e8d2:	f7ff fbd7 	bl	1e084 <__ssrefill_r>
   1e8d6:	2800      	cmp	r0, #0
   1e8d8:	d0cb      	beq.n	1e872 <__ssvfiscanf_r+0x732>
   1e8da:	2d00      	cmp	r5, #0
   1e8dc:	d0cb      	beq.n	1e876 <__ssvfiscanf_r+0x736>
   1e8de:	e57f      	b.n	1e3e0 <__ssvfiscanf_r+0x2a0>
   1e8e0:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
   1e8e4:	e6c7      	b.n	1e676 <__ssvfiscanf_r+0x536>
   1e8e6:	9a06      	ldr	r2, [sp, #24]
   1e8e8:	4613      	mov	r3, r2
   1e8ea:	3304      	adds	r3, #4
   1e8ec:	f8d2 9000 	ldr.w	r9, [r2]
   1e8f0:	9306      	str	r3, [sp, #24]
   1e8f2:	2c00      	cmp	r4, #0
   1e8f4:	d18e      	bne.n	1e814 <__ssvfiscanf_r+0x6d4>
   1e8f6:	e633      	b.n	1e560 <__ssvfiscanf_r+0x420>
   1e8f8:	9a06      	ldr	r2, [sp, #24]
   1e8fa:	4613      	mov	r3, r2
   1e8fc:	3304      	adds	r3, #4
   1e8fe:	f8d2 9000 	ldr.w	r9, [r2]
   1e902:	9306      	str	r3, [sp, #24]
   1e904:	e619      	b.n	1e53a <__ssvfiscanf_r+0x3fa>
   1e906:	9a06      	ldr	r2, [sp, #24]
   1e908:	6813      	ldr	r3, [r2, #0]
   1e90a:	3204      	adds	r2, #4
   1e90c:	9206      	str	r2, [sp, #24]
   1e90e:	6018      	str	r0, [r3, #0]
   1e910:	e7d9      	b.n	1e8c6 <__ssvfiscanf_r+0x786>
   1e912:	3002      	adds	r0, #2
   1e914:	d105      	bne.n	1e922 <__ssvfiscanf_r+0x7e2>
   1e916:	4635      	mov	r5, r6
   1e918:	e7a7      	b.n	1e86a <__ssvfiscanf_r+0x72a>
   1e91a:	44b2      	add	sl, r6
   1e91c:	3c01      	subs	r4, #1
   1e91e:	4605      	mov	r5, r0
   1e920:	e7a3      	b.n	1e86a <__ssvfiscanf_r+0x72a>
   1e922:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e924:	44b2      	add	sl, r6
   1e926:	3c01      	subs	r4, #1
   1e928:	2b00      	cmp	r3, #0
   1e92a:	d09b      	beq.n	1e864 <__ssvfiscanf_r+0x724>
   1e92c:	2500      	movs	r5, #0
   1e92e:	e79c      	b.n	1e86a <__ssvfiscanf_r+0x72a>
   1e930:	2d00      	cmp	r5, #0
   1e932:	f47f ad36 	bne.w	1e3a2 <__ssvfiscanf_r+0x262>
   1e936:	e553      	b.n	1e3e0 <__ssvfiscanf_r+0x2a0>
   1e938:	9a06      	ldr	r2, [sp, #24]
   1e93a:	6816      	ldr	r6, [r2, #0]
   1e93c:	f102 0804 	add.w	r8, r2, #4
   1e940:	4635      	mov	r5, r6
   1e942:	f000 fa6b 	bl	1ee1c <__locale_ctype_ptr>
   1e946:	f8db 2000 	ldr.w	r2, [fp]
   1e94a:	7813      	ldrb	r3, [r2, #0]
   1e94c:	4418      	add	r0, r3
   1e94e:	1c51      	adds	r1, r2, #1
   1e950:	7843      	ldrb	r3, [r0, #1]
   1e952:	0718      	lsls	r0, r3, #28
   1e954:	d415      	bmi.n	1e982 <__ssvfiscanf_r+0x842>
   1e956:	f8db 3004 	ldr.w	r3, [fp, #4]
   1e95a:	f8cb 1000 	str.w	r1, [fp]
   1e95e:	3b01      	subs	r3, #1
   1e960:	f8cb 3004 	str.w	r3, [fp, #4]
   1e964:	7813      	ldrb	r3, [r2, #0]
   1e966:	f805 3b01 	strb.w	r3, [r5], #1
   1e96a:	3c01      	subs	r4, #1
   1e96c:	d009      	beq.n	1e982 <__ssvfiscanf_r+0x842>
   1e96e:	f8db 3004 	ldr.w	r3, [fp, #4]
   1e972:	2b00      	cmp	r3, #0
   1e974:	dce5      	bgt.n	1e942 <__ssvfiscanf_r+0x802>
   1e976:	4659      	mov	r1, fp
   1e978:	4638      	mov	r0, r7
   1e97a:	f7ff fb83 	bl	1e084 <__ssrefill_r>
   1e97e:	2800      	cmp	r0, #0
   1e980:	d0df      	beq.n	1e942 <__ssvfiscanf_r+0x802>
   1e982:	1bae      	subs	r6, r5, r6
   1e984:	9a05      	ldr	r2, [sp, #20]
   1e986:	f8cd 8018 	str.w	r8, [sp, #24]
   1e98a:	44b2      	add	sl, r6
   1e98c:	9e03      	ldr	r6, [sp, #12]
   1e98e:	2300      	movs	r3, #0
   1e990:	3201      	adds	r2, #1
   1e992:	9205      	str	r2, [sp, #20]
   1e994:	702b      	strb	r3, [r5, #0]
   1e996:	4634      	mov	r4, r6
   1e998:	e418      	b.n	1e1cc <__ssvfiscanf_r+0x8c>
   1e99a:	bf00      	nop
   1e99c:	00021cec 	.word	0x00021cec
   1e9a0:	0001d465 	.word	0x0001d465
   1e9a4:	9d06      	ldr	r5, [sp, #24]
   1e9a6:	4623      	mov	r3, r4
   1e9a8:	6829      	ldr	r1, [r5, #0]
   1e9aa:	f8cd b000 	str.w	fp, [sp]
   1e9ae:	2201      	movs	r2, #1
   1e9b0:	4638      	mov	r0, r7
   1e9b2:	f7ff fb85 	bl	1e0c0 <_sfread_r>
   1e9b6:	1d2e      	adds	r6, r5, #4
   1e9b8:	2800      	cmp	r0, #0
   1e9ba:	f43f ad11 	beq.w	1e3e0 <__ssvfiscanf_r+0x2a0>
   1e9be:	9b05      	ldr	r3, [sp, #20]
   1e9c0:	9606      	str	r6, [sp, #24]
   1e9c2:	9e03      	ldr	r6, [sp, #12]
   1e9c4:	3301      	adds	r3, #1
   1e9c6:	4482      	add	sl, r0
   1e9c8:	9305      	str	r3, [sp, #20]
   1e9ca:	4634      	mov	r4, r6
   1e9cc:	f7ff bbfe 	b.w	1e1cc <__ssvfiscanf_r+0x8c>
   1e9d0:	f818 1c01 	ldrb.w	r1, [r8, #-1]
   1e9d4:	465a      	mov	r2, fp
   1e9d6:	4638      	mov	r0, r7
   1e9d8:	f7ff fb14 	bl	1e004 <_sungetc_r>
   1e9dc:	f108 38ff 	add.w	r8, r8, #4294967295
   1e9e0:	e662      	b.n	1e6a8 <__ssvfiscanf_r+0x568>
   1e9e2:	4659      	mov	r1, fp
   1e9e4:	4638      	mov	r0, r7
   1e9e6:	f7ff fb4d 	bl	1e084 <__ssrefill_r>
   1e9ea:	2800      	cmp	r0, #0
   1e9ec:	f43f ac84 	beq.w	1e2f8 <__ssvfiscanf_r+0x1b8>
   1e9f0:	e4f6      	b.n	1e3e0 <__ssvfiscanf_r+0x2a0>
   1e9f2:	f896 8002 	ldrb.w	r8, [r6, #2]
   1e9f6:	f045 0502 	orr.w	r5, r5, #2
   1e9fa:	3602      	adds	r6, #2
   1e9fc:	f7ff bbf6 	b.w	1e1ec <__ssvfiscanf_r+0xac>
   1ea00:	9a06      	ldr	r2, [sp, #24]
   1ea02:	9e03      	ldr	r6, [sp, #12]
   1ea04:	6813      	ldr	r3, [r2, #0]
   1ea06:	f8c3 a000 	str.w	sl, [r3]
   1ea0a:	4613      	mov	r3, r2
   1ea0c:	3304      	adds	r3, #4
   1ea0e:	9306      	str	r3, [sp, #24]
   1ea10:	4634      	mov	r4, r6
   1ea12:	f7ff bbdb 	b.w	1e1cc <__ssvfiscanf_r+0x8c>
   1ea16:	9a06      	ldr	r2, [sp, #24]
   1ea18:	6813      	ldr	r3, [r2, #0]
   1ea1a:	3204      	adds	r2, #4
   1ea1c:	9206      	str	r2, [sp, #24]
   1ea1e:	8018      	strh	r0, [r3, #0]
   1ea20:	e751      	b.n	1e8c6 <__ssvfiscanf_r+0x786>
   1ea22:	9a06      	ldr	r2, [sp, #24]
   1ea24:	9e03      	ldr	r6, [sp, #12]
   1ea26:	6813      	ldr	r3, [r2, #0]
   1ea28:	f8a3 a000 	strh.w	sl, [r3]
   1ea2c:	4613      	mov	r3, r2
   1ea2e:	3304      	adds	r3, #4
   1ea30:	9306      	str	r3, [sp, #24]
   1ea32:	4634      	mov	r4, r6
   1ea34:	f7ff bbca 	b.w	1e1cc <__ssvfiscanf_r+0x8c>
   1ea38:	f000 f9de 	bl	1edf8 <__locale_mb_cur_max>
   1ea3c:	4286      	cmp	r6, r0
   1ea3e:	f43f accf 	beq.w	1e3e0 <__ssvfiscanf_r+0x2a0>
   1ea42:	e89b 000c 	ldmia.w	fp, {r2, r3}
   1ea46:	f812 0b01 	ldrb.w	r0, [r2], #1
   1ea4a:	f8cb 2000 	str.w	r2, [fp]
   1ea4e:	3b01      	subs	r3, #1
   1ea50:	9a08      	ldr	r2, [sp, #32]
   1ea52:	9200      	str	r2, [sp, #0]
   1ea54:	1c75      	adds	r5, r6, #1
   1ea56:	f8cb 3004 	str.w	r3, [fp, #4]
   1ea5a:	4649      	mov	r1, r9
   1ea5c:	f808 0006 	strb.w	r0, [r8, r6]
   1ea60:	462b      	mov	r3, r5
   1ea62:	4642      	mov	r2, r8
   1ea64:	4638      	mov	r0, r7
   1ea66:	f000 f9e7 	bl	1ee38 <_mbrtowc_r>
   1ea6a:	1c41      	adds	r1, r0, #1
   1ea6c:	f43f acb8 	beq.w	1e3e0 <__ssvfiscanf_r+0x2a0>
   1ea70:	b198      	cbz	r0, 1ea9a <__ssvfiscanf_r+0x95a>
   1ea72:	3002      	adds	r0, #2
   1ea74:	bf08      	it	eq
   1ea76:	462e      	moveq	r6, r5
   1ea78:	d12e      	bne.n	1ead8 <__ssvfiscanf_r+0x998>
   1ea7a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1ea7e:	2b00      	cmp	r3, #0
   1ea80:	f73f ad5e 	bgt.w	1e540 <__ssvfiscanf_r+0x400>
   1ea84:	4659      	mov	r1, fp
   1ea86:	4638      	mov	r0, r7
   1ea88:	f7ff fafc 	bl	1e084 <__ssrefill_r>
   1ea8c:	2800      	cmp	r0, #0
   1ea8e:	f43f ad57 	beq.w	1e540 <__ssvfiscanf_r+0x400>
   1ea92:	2e00      	cmp	r6, #0
   1ea94:	f47f aca4 	bne.w	1e3e0 <__ssvfiscanf_r+0x2a0>
   1ea98:	e55e      	b.n	1e558 <__ssvfiscanf_r+0x418>
   1ea9a:	f8c9 0000 	str.w	r0, [r9]
   1ea9e:	f000 f99d 	bl	1eddc <iswspace>
   1eaa2:	4606      	mov	r6, r0
   1eaa4:	b178      	cbz	r0, 1eac6 <__ssvfiscanf_r+0x986>
   1eaa6:	2d00      	cmp	r5, #0
   1eaa8:	f43f ad56 	beq.w	1e558 <__ssvfiscanf_r+0x418>
   1eaac:	4445      	add	r5, r8
   1eaae:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1eab2:	465a      	mov	r2, fp
   1eab4:	4638      	mov	r0, r7
   1eab6:	f7ff faa5 	bl	1e004 <_sungetc_r>
   1eaba:	4545      	cmp	r5, r8
   1eabc:	d1f7      	bne.n	1eaae <__ssvfiscanf_r+0x96e>
   1eabe:	e54b      	b.n	1e558 <__ssvfiscanf_r+0x418>
   1eac0:	f000 fea6 	bl	1f810 <_strtoull_r>
   1eac4:	e6f9      	b.n	1e8ba <__ssvfiscanf_r+0x77a>
   1eac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1eac8:	44aa      	add	sl, r5
   1eaca:	3c01      	subs	r4, #1
   1eacc:	2b00      	cmp	r3, #0
   1eace:	d1d4      	bne.n	1ea7a <__ssvfiscanf_r+0x93a>
   1ead0:	f109 0904 	add.w	r9, r9, #4
   1ead4:	461e      	mov	r6, r3
   1ead6:	e7d0      	b.n	1ea7a <__ssvfiscanf_r+0x93a>
   1ead8:	f8d9 0000 	ldr.w	r0, [r9]
   1eadc:	e7df      	b.n	1ea9e <__ssvfiscanf_r+0x95e>
   1eade:	bf00      	nop

0001eae0 <__submore>:
   1eae0:	f101 0340 	add.w	r3, r1, #64	; 0x40
   1eae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eae8:	460c      	mov	r4, r1
   1eaea:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1eaec:	4299      	cmp	r1, r3
   1eaee:	d014      	beq.n	1eb1a <__submore+0x3a>
   1eaf0:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1eaf2:	0077      	lsls	r7, r6, #1
   1eaf4:	463a      	mov	r2, r7
   1eaf6:	f000 fa47 	bl	1ef88 <_realloc_r>
   1eafa:	4605      	mov	r5, r0
   1eafc:	b340      	cbz	r0, 1eb50 <__submore+0x70>
   1eafe:	eb00 0806 	add.w	r8, r0, r6
   1eb02:	4632      	mov	r2, r6
   1eb04:	4640      	mov	r0, r8
   1eb06:	4629      	mov	r1, r5
   1eb08:	f7fd f87c 	bl	1bc04 <memcpy>
   1eb0c:	f8c4 8000 	str.w	r8, [r4]
   1eb10:	6325      	str	r5, [r4, #48]	; 0x30
   1eb12:	6367      	str	r7, [r4, #52]	; 0x34
   1eb14:	2000      	movs	r0, #0
   1eb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eb1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1eb1e:	f7fd fe5d 	bl	1c7dc <_malloc_r>
   1eb22:	b1a8      	cbz	r0, 1eb50 <__submore+0x70>
   1eb24:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1eb28:	6320      	str	r0, [r4, #48]	; 0x30
   1eb2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1eb2e:	6362      	str	r2, [r4, #52]	; 0x34
   1eb30:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   1eb34:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1eb38:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1eb3c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1eb40:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   1eb44:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   1eb48:	6020      	str	r0, [r4, #0]
   1eb4a:	2000      	movs	r0, #0
   1eb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eb50:	f04f 30ff 	mov.w	r0, #4294967295
   1eb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001eb58 <__env_lock>:
   1eb58:	4801      	ldr	r0, [pc, #4]	; (1eb60 <__env_lock+0x8>)
   1eb5a:	f7fd be39 	b.w	1c7d0 <__retarget_lock_acquire_recursive>
   1eb5e:	bf00      	nop
   1eb60:	2000ac0c 	.word	0x2000ac0c

0001eb64 <__env_unlock>:
   1eb64:	4801      	ldr	r0, [pc, #4]	; (1eb6c <__env_unlock+0x8>)
   1eb66:	f7fd be37 	b.w	1c7d8 <__retarget_lock_release_recursive>
   1eb6a:	bf00      	nop
   1eb6c:	2000ac0c 	.word	0x2000ac0c

0001eb70 <_malloc_trim_r>:
   1eb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eb72:	4f24      	ldr	r7, [pc, #144]	; (1ec04 <_malloc_trim_r+0x94>)
   1eb74:	460c      	mov	r4, r1
   1eb76:	4606      	mov	r6, r0
   1eb78:	f7fe f932 	bl	1cde0 <__malloc_lock>
   1eb7c:	68bb      	ldr	r3, [r7, #8]
   1eb7e:	685d      	ldr	r5, [r3, #4]
   1eb80:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   1eb84:	310f      	adds	r1, #15
   1eb86:	f025 0503 	bic.w	r5, r5, #3
   1eb8a:	4429      	add	r1, r5
   1eb8c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   1eb90:	f021 010f 	bic.w	r1, r1, #15
   1eb94:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   1eb98:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1eb9c:	db07      	blt.n	1ebae <_malloc_trim_r+0x3e>
   1eb9e:	2100      	movs	r1, #0
   1eba0:	4630      	mov	r0, r6
   1eba2:	f7fe f929 	bl	1cdf8 <_sbrk_r>
   1eba6:	68bb      	ldr	r3, [r7, #8]
   1eba8:	442b      	add	r3, r5
   1ebaa:	4298      	cmp	r0, r3
   1ebac:	d004      	beq.n	1ebb8 <_malloc_trim_r+0x48>
   1ebae:	4630      	mov	r0, r6
   1ebb0:	f7fe f91c 	bl	1cdec <__malloc_unlock>
   1ebb4:	2000      	movs	r0, #0
   1ebb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ebb8:	4261      	negs	r1, r4
   1ebba:	4630      	mov	r0, r6
   1ebbc:	f7fe f91c 	bl	1cdf8 <_sbrk_r>
   1ebc0:	3001      	adds	r0, #1
   1ebc2:	d00d      	beq.n	1ebe0 <_malloc_trim_r+0x70>
   1ebc4:	4b10      	ldr	r3, [pc, #64]	; (1ec08 <_malloc_trim_r+0x98>)
   1ebc6:	68ba      	ldr	r2, [r7, #8]
   1ebc8:	6819      	ldr	r1, [r3, #0]
   1ebca:	1b2d      	subs	r5, r5, r4
   1ebcc:	f045 0501 	orr.w	r5, r5, #1
   1ebd0:	4630      	mov	r0, r6
   1ebd2:	1b09      	subs	r1, r1, r4
   1ebd4:	6055      	str	r5, [r2, #4]
   1ebd6:	6019      	str	r1, [r3, #0]
   1ebd8:	f7fe f908 	bl	1cdec <__malloc_unlock>
   1ebdc:	2001      	movs	r0, #1
   1ebde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ebe0:	2100      	movs	r1, #0
   1ebe2:	4630      	mov	r0, r6
   1ebe4:	f7fe f908 	bl	1cdf8 <_sbrk_r>
   1ebe8:	68ba      	ldr	r2, [r7, #8]
   1ebea:	1a83      	subs	r3, r0, r2
   1ebec:	2b0f      	cmp	r3, #15
   1ebee:	ddde      	ble.n	1ebae <_malloc_trim_r+0x3e>
   1ebf0:	4c06      	ldr	r4, [pc, #24]	; (1ec0c <_malloc_trim_r+0x9c>)
   1ebf2:	4905      	ldr	r1, [pc, #20]	; (1ec08 <_malloc_trim_r+0x98>)
   1ebf4:	6824      	ldr	r4, [r4, #0]
   1ebf6:	f043 0301 	orr.w	r3, r3, #1
   1ebfa:	1b00      	subs	r0, r0, r4
   1ebfc:	6053      	str	r3, [r2, #4]
   1ebfe:	6008      	str	r0, [r1, #0]
   1ec00:	e7d5      	b.n	1ebae <_malloc_trim_r+0x3e>
   1ec02:	bf00      	nop
   1ec04:	200006c4 	.word	0x200006c4
   1ec08:	2000a8d0 	.word	0x2000a8d0
   1ec0c:	20000acc 	.word	0x20000acc

0001ec10 <_free_r>:
   1ec10:	2900      	cmp	r1, #0
   1ec12:	d044      	beq.n	1ec9e <_free_r+0x8e>
   1ec14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec18:	460d      	mov	r5, r1
   1ec1a:	4680      	mov	r8, r0
   1ec1c:	f7fe f8e0 	bl	1cde0 <__malloc_lock>
   1ec20:	f855 7c04 	ldr.w	r7, [r5, #-4]
   1ec24:	4969      	ldr	r1, [pc, #420]	; (1edcc <_free_r+0x1bc>)
   1ec26:	f027 0301 	bic.w	r3, r7, #1
   1ec2a:	f1a5 0408 	sub.w	r4, r5, #8
   1ec2e:	18e2      	adds	r2, r4, r3
   1ec30:	688e      	ldr	r6, [r1, #8]
   1ec32:	6850      	ldr	r0, [r2, #4]
   1ec34:	42b2      	cmp	r2, r6
   1ec36:	f020 0003 	bic.w	r0, r0, #3
   1ec3a:	d05e      	beq.n	1ecfa <_free_r+0xea>
   1ec3c:	07fe      	lsls	r6, r7, #31
   1ec3e:	6050      	str	r0, [r2, #4]
   1ec40:	d40b      	bmi.n	1ec5a <_free_r+0x4a>
   1ec42:	f855 7c08 	ldr.w	r7, [r5, #-8]
   1ec46:	1be4      	subs	r4, r4, r7
   1ec48:	f101 0e08 	add.w	lr, r1, #8
   1ec4c:	68a5      	ldr	r5, [r4, #8]
   1ec4e:	4575      	cmp	r5, lr
   1ec50:	443b      	add	r3, r7
   1ec52:	d06d      	beq.n	1ed30 <_free_r+0x120>
   1ec54:	68e7      	ldr	r7, [r4, #12]
   1ec56:	60ef      	str	r7, [r5, #12]
   1ec58:	60bd      	str	r5, [r7, #8]
   1ec5a:	1815      	adds	r5, r2, r0
   1ec5c:	686d      	ldr	r5, [r5, #4]
   1ec5e:	07ed      	lsls	r5, r5, #31
   1ec60:	d53e      	bpl.n	1ece0 <_free_r+0xd0>
   1ec62:	f043 0201 	orr.w	r2, r3, #1
   1ec66:	6062      	str	r2, [r4, #4]
   1ec68:	50e3      	str	r3, [r4, r3]
   1ec6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1ec6e:	d217      	bcs.n	1eca0 <_free_r+0x90>
   1ec70:	08db      	lsrs	r3, r3, #3
   1ec72:	1c58      	adds	r0, r3, #1
   1ec74:	109a      	asrs	r2, r3, #2
   1ec76:	684d      	ldr	r5, [r1, #4]
   1ec78:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   1ec7c:	60a7      	str	r7, [r4, #8]
   1ec7e:	2301      	movs	r3, #1
   1ec80:	4093      	lsls	r3, r2
   1ec82:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   1ec86:	432b      	orrs	r3, r5
   1ec88:	3a08      	subs	r2, #8
   1ec8a:	60e2      	str	r2, [r4, #12]
   1ec8c:	604b      	str	r3, [r1, #4]
   1ec8e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   1ec92:	60fc      	str	r4, [r7, #12]
   1ec94:	4640      	mov	r0, r8
   1ec96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ec9a:	f7fe b8a7 	b.w	1cdec <__malloc_unlock>
   1ec9e:	4770      	bx	lr
   1eca0:	0a5a      	lsrs	r2, r3, #9
   1eca2:	2a04      	cmp	r2, #4
   1eca4:	d852      	bhi.n	1ed4c <_free_r+0x13c>
   1eca6:	099a      	lsrs	r2, r3, #6
   1eca8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   1ecac:	00ff      	lsls	r7, r7, #3
   1ecae:	f102 0538 	add.w	r5, r2, #56	; 0x38
   1ecb2:	19c8      	adds	r0, r1, r7
   1ecb4:	59ca      	ldr	r2, [r1, r7]
   1ecb6:	3808      	subs	r0, #8
   1ecb8:	4290      	cmp	r0, r2
   1ecba:	d04f      	beq.n	1ed5c <_free_r+0x14c>
   1ecbc:	6851      	ldr	r1, [r2, #4]
   1ecbe:	f021 0103 	bic.w	r1, r1, #3
   1ecc2:	428b      	cmp	r3, r1
   1ecc4:	d232      	bcs.n	1ed2c <_free_r+0x11c>
   1ecc6:	6892      	ldr	r2, [r2, #8]
   1ecc8:	4290      	cmp	r0, r2
   1ecca:	d1f7      	bne.n	1ecbc <_free_r+0xac>
   1eccc:	68c3      	ldr	r3, [r0, #12]
   1ecce:	60a0      	str	r0, [r4, #8]
   1ecd0:	60e3      	str	r3, [r4, #12]
   1ecd2:	609c      	str	r4, [r3, #8]
   1ecd4:	60c4      	str	r4, [r0, #12]
   1ecd6:	4640      	mov	r0, r8
   1ecd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ecdc:	f7fe b886 	b.w	1cdec <__malloc_unlock>
   1ece0:	6895      	ldr	r5, [r2, #8]
   1ece2:	4f3b      	ldr	r7, [pc, #236]	; (1edd0 <_free_r+0x1c0>)
   1ece4:	42bd      	cmp	r5, r7
   1ece6:	4403      	add	r3, r0
   1ece8:	d040      	beq.n	1ed6c <_free_r+0x15c>
   1ecea:	68d0      	ldr	r0, [r2, #12]
   1ecec:	60e8      	str	r0, [r5, #12]
   1ecee:	f043 0201 	orr.w	r2, r3, #1
   1ecf2:	6085      	str	r5, [r0, #8]
   1ecf4:	6062      	str	r2, [r4, #4]
   1ecf6:	50e3      	str	r3, [r4, r3]
   1ecf8:	e7b7      	b.n	1ec6a <_free_r+0x5a>
   1ecfa:	07ff      	lsls	r7, r7, #31
   1ecfc:	4403      	add	r3, r0
   1ecfe:	d407      	bmi.n	1ed10 <_free_r+0x100>
   1ed00:	f855 2c08 	ldr.w	r2, [r5, #-8]
   1ed04:	1aa4      	subs	r4, r4, r2
   1ed06:	4413      	add	r3, r2
   1ed08:	68a0      	ldr	r0, [r4, #8]
   1ed0a:	68e2      	ldr	r2, [r4, #12]
   1ed0c:	60c2      	str	r2, [r0, #12]
   1ed0e:	6090      	str	r0, [r2, #8]
   1ed10:	4a30      	ldr	r2, [pc, #192]	; (1edd4 <_free_r+0x1c4>)
   1ed12:	6812      	ldr	r2, [r2, #0]
   1ed14:	f043 0001 	orr.w	r0, r3, #1
   1ed18:	4293      	cmp	r3, r2
   1ed1a:	6060      	str	r0, [r4, #4]
   1ed1c:	608c      	str	r4, [r1, #8]
   1ed1e:	d3b9      	bcc.n	1ec94 <_free_r+0x84>
   1ed20:	4b2d      	ldr	r3, [pc, #180]	; (1edd8 <_free_r+0x1c8>)
   1ed22:	4640      	mov	r0, r8
   1ed24:	6819      	ldr	r1, [r3, #0]
   1ed26:	f7ff ff23 	bl	1eb70 <_malloc_trim_r>
   1ed2a:	e7b3      	b.n	1ec94 <_free_r+0x84>
   1ed2c:	4610      	mov	r0, r2
   1ed2e:	e7cd      	b.n	1eccc <_free_r+0xbc>
   1ed30:	1811      	adds	r1, r2, r0
   1ed32:	6849      	ldr	r1, [r1, #4]
   1ed34:	07c9      	lsls	r1, r1, #31
   1ed36:	d444      	bmi.n	1edc2 <_free_r+0x1b2>
   1ed38:	6891      	ldr	r1, [r2, #8]
   1ed3a:	68d2      	ldr	r2, [r2, #12]
   1ed3c:	60ca      	str	r2, [r1, #12]
   1ed3e:	4403      	add	r3, r0
   1ed40:	f043 0001 	orr.w	r0, r3, #1
   1ed44:	6091      	str	r1, [r2, #8]
   1ed46:	6060      	str	r0, [r4, #4]
   1ed48:	50e3      	str	r3, [r4, r3]
   1ed4a:	e7a3      	b.n	1ec94 <_free_r+0x84>
   1ed4c:	2a14      	cmp	r2, #20
   1ed4e:	d816      	bhi.n	1ed7e <_free_r+0x16e>
   1ed50:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   1ed54:	00ff      	lsls	r7, r7, #3
   1ed56:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   1ed5a:	e7aa      	b.n	1ecb2 <_free_r+0xa2>
   1ed5c:	10aa      	asrs	r2, r5, #2
   1ed5e:	2301      	movs	r3, #1
   1ed60:	684d      	ldr	r5, [r1, #4]
   1ed62:	4093      	lsls	r3, r2
   1ed64:	432b      	orrs	r3, r5
   1ed66:	604b      	str	r3, [r1, #4]
   1ed68:	4603      	mov	r3, r0
   1ed6a:	e7b0      	b.n	1ecce <_free_r+0xbe>
   1ed6c:	f043 0201 	orr.w	r2, r3, #1
   1ed70:	614c      	str	r4, [r1, #20]
   1ed72:	610c      	str	r4, [r1, #16]
   1ed74:	60e5      	str	r5, [r4, #12]
   1ed76:	60a5      	str	r5, [r4, #8]
   1ed78:	6062      	str	r2, [r4, #4]
   1ed7a:	50e3      	str	r3, [r4, r3]
   1ed7c:	e78a      	b.n	1ec94 <_free_r+0x84>
   1ed7e:	2a54      	cmp	r2, #84	; 0x54
   1ed80:	d806      	bhi.n	1ed90 <_free_r+0x180>
   1ed82:	0b1a      	lsrs	r2, r3, #12
   1ed84:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   1ed88:	00ff      	lsls	r7, r7, #3
   1ed8a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   1ed8e:	e790      	b.n	1ecb2 <_free_r+0xa2>
   1ed90:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1ed94:	d806      	bhi.n	1eda4 <_free_r+0x194>
   1ed96:	0bda      	lsrs	r2, r3, #15
   1ed98:	f102 0778 	add.w	r7, r2, #120	; 0x78
   1ed9c:	00ff      	lsls	r7, r7, #3
   1ed9e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   1eda2:	e786      	b.n	1ecb2 <_free_r+0xa2>
   1eda4:	f240 5054 	movw	r0, #1364	; 0x554
   1eda8:	4282      	cmp	r2, r0
   1edaa:	d806      	bhi.n	1edba <_free_r+0x1aa>
   1edac:	0c9a      	lsrs	r2, r3, #18
   1edae:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   1edb2:	00ff      	lsls	r7, r7, #3
   1edb4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   1edb8:	e77b      	b.n	1ecb2 <_free_r+0xa2>
   1edba:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   1edbe:	257e      	movs	r5, #126	; 0x7e
   1edc0:	e777      	b.n	1ecb2 <_free_r+0xa2>
   1edc2:	f043 0101 	orr.w	r1, r3, #1
   1edc6:	6061      	str	r1, [r4, #4]
   1edc8:	6013      	str	r3, [r2, #0]
   1edca:	e763      	b.n	1ec94 <_free_r+0x84>
   1edcc:	200006c4 	.word	0x200006c4
   1edd0:	200006cc 	.word	0x200006cc
   1edd4:	20000ad0 	.word	0x20000ad0
   1edd8:	2000a900 	.word	0x2000a900

0001eddc <iswspace>:
   1eddc:	28ff      	cmp	r0, #255	; 0xff
   1edde:	d901      	bls.n	1ede4 <iswspace+0x8>
   1ede0:	2000      	movs	r0, #0
   1ede2:	4770      	bx	lr
   1ede4:	b510      	push	{r4, lr}
   1ede6:	4604      	mov	r4, r0
   1ede8:	f000 f818 	bl	1ee1c <__locale_ctype_ptr>
   1edec:	4420      	add	r0, r4
   1edee:	7840      	ldrb	r0, [r0, #1]
   1edf0:	f000 0008 	and.w	r0, r0, #8
   1edf4:	bd10      	pop	{r4, pc}
   1edf6:	bf00      	nop

0001edf8 <__locale_mb_cur_max>:
   1edf8:	4b04      	ldr	r3, [pc, #16]	; (1ee0c <__locale_mb_cur_max+0x14>)
   1edfa:	4a05      	ldr	r2, [pc, #20]	; (1ee10 <__locale_mb_cur_max+0x18>)
   1edfc:	681b      	ldr	r3, [r3, #0]
   1edfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1ee00:	2b00      	cmp	r3, #0
   1ee02:	bf08      	it	eq
   1ee04:	4613      	moveq	r3, r2
   1ee06:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   1ee0a:	4770      	bx	lr
   1ee0c:	20000248 	.word	0x20000248
   1ee10:	20000ad8 	.word	0x20000ad8

0001ee14 <__locale_ctype_ptr_l>:
   1ee14:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   1ee18:	4770      	bx	lr
   1ee1a:	bf00      	nop

0001ee1c <__locale_ctype_ptr>:
   1ee1c:	4b04      	ldr	r3, [pc, #16]	; (1ee30 <__locale_ctype_ptr+0x14>)
   1ee1e:	4a05      	ldr	r2, [pc, #20]	; (1ee34 <__locale_ctype_ptr+0x18>)
   1ee20:	681b      	ldr	r3, [r3, #0]
   1ee22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1ee24:	2b00      	cmp	r3, #0
   1ee26:	bf08      	it	eq
   1ee28:	4613      	moveq	r3, r2
   1ee2a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1ee2e:	4770      	bx	lr
   1ee30:	20000248 	.word	0x20000248
   1ee34:	20000ad8 	.word	0x20000ad8

0001ee38 <_mbrtowc_r>:
   1ee38:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee3a:	b083      	sub	sp, #12
   1ee3c:	4607      	mov	r7, r0
   1ee3e:	9d08      	ldr	r5, [sp, #32]
   1ee40:	b192      	cbz	r2, 1ee68 <_mbrtowc_r+0x30>
   1ee42:	4c11      	ldr	r4, [pc, #68]	; (1ee88 <_mbrtowc_r+0x50>)
   1ee44:	4e11      	ldr	r6, [pc, #68]	; (1ee8c <_mbrtowc_r+0x54>)
   1ee46:	6824      	ldr	r4, [r4, #0]
   1ee48:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1ee4a:	9500      	str	r5, [sp, #0]
   1ee4c:	2c00      	cmp	r4, #0
   1ee4e:	bf08      	it	eq
   1ee50:	4634      	moveq	r4, r6
   1ee52:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   1ee56:	47a0      	blx	r4
   1ee58:	1c43      	adds	r3, r0, #1
   1ee5a:	d103      	bne.n	1ee64 <_mbrtowc_r+0x2c>
   1ee5c:	2200      	movs	r2, #0
   1ee5e:	238a      	movs	r3, #138	; 0x8a
   1ee60:	602a      	str	r2, [r5, #0]
   1ee62:	603b      	str	r3, [r7, #0]
   1ee64:	b003      	add	sp, #12
   1ee66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ee68:	4b07      	ldr	r3, [pc, #28]	; (1ee88 <_mbrtowc_r+0x50>)
   1ee6a:	4908      	ldr	r1, [pc, #32]	; (1ee8c <_mbrtowc_r+0x54>)
   1ee6c:	681b      	ldr	r3, [r3, #0]
   1ee6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1ee70:	9500      	str	r5, [sp, #0]
   1ee72:	2b00      	cmp	r3, #0
   1ee74:	bf08      	it	eq
   1ee76:	460b      	moveq	r3, r1
   1ee78:	4614      	mov	r4, r2
   1ee7a:	4621      	mov	r1, r4
   1ee7c:	4a04      	ldr	r2, [pc, #16]	; (1ee90 <_mbrtowc_r+0x58>)
   1ee7e:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   1ee82:	2301      	movs	r3, #1
   1ee84:	47a0      	blx	r4
   1ee86:	e7e7      	b.n	1ee58 <_mbrtowc_r+0x20>
   1ee88:	20000248 	.word	0x20000248
   1ee8c:	20000ad8 	.word	0x20000ad8
   1ee90:	00021cac 	.word	0x00021cac

0001ee94 <__ascii_mbtowc>:
   1ee94:	b082      	sub	sp, #8
   1ee96:	b149      	cbz	r1, 1eeac <__ascii_mbtowc+0x18>
   1ee98:	b15a      	cbz	r2, 1eeb2 <__ascii_mbtowc+0x1e>
   1ee9a:	b16b      	cbz	r3, 1eeb8 <__ascii_mbtowc+0x24>
   1ee9c:	7813      	ldrb	r3, [r2, #0]
   1ee9e:	600b      	str	r3, [r1, #0]
   1eea0:	7812      	ldrb	r2, [r2, #0]
   1eea2:	1c10      	adds	r0, r2, #0
   1eea4:	bf18      	it	ne
   1eea6:	2001      	movne	r0, #1
   1eea8:	b002      	add	sp, #8
   1eeaa:	4770      	bx	lr
   1eeac:	a901      	add	r1, sp, #4
   1eeae:	2a00      	cmp	r2, #0
   1eeb0:	d1f3      	bne.n	1ee9a <__ascii_mbtowc+0x6>
   1eeb2:	4610      	mov	r0, r2
   1eeb4:	b002      	add	sp, #8
   1eeb6:	4770      	bx	lr
   1eeb8:	f06f 0001 	mvn.w	r0, #1
   1eebc:	e7f4      	b.n	1eea8 <__ascii_mbtowc+0x14>
   1eebe:	bf00      	nop

0001eec0 <memmove>:
   1eec0:	4288      	cmp	r0, r1
   1eec2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eec4:	d90d      	bls.n	1eee2 <memmove+0x22>
   1eec6:	188b      	adds	r3, r1, r2
   1eec8:	4298      	cmp	r0, r3
   1eeca:	d20a      	bcs.n	1eee2 <memmove+0x22>
   1eecc:	1884      	adds	r4, r0, r2
   1eece:	2a00      	cmp	r2, #0
   1eed0:	d051      	beq.n	1ef76 <memmove+0xb6>
   1eed2:	4622      	mov	r2, r4
   1eed4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1eed8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1eedc:	4299      	cmp	r1, r3
   1eede:	d1f9      	bne.n	1eed4 <memmove+0x14>
   1eee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eee2:	2a0f      	cmp	r2, #15
   1eee4:	d948      	bls.n	1ef78 <memmove+0xb8>
   1eee6:	ea41 0300 	orr.w	r3, r1, r0
   1eeea:	079b      	lsls	r3, r3, #30
   1eeec:	d146      	bne.n	1ef7c <memmove+0xbc>
   1eeee:	f100 0410 	add.w	r4, r0, #16
   1eef2:	f101 0310 	add.w	r3, r1, #16
   1eef6:	4615      	mov	r5, r2
   1eef8:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1eefc:	f844 6c10 	str.w	r6, [r4, #-16]
   1ef00:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1ef04:	f844 6c0c 	str.w	r6, [r4, #-12]
   1ef08:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1ef0c:	f844 6c08 	str.w	r6, [r4, #-8]
   1ef10:	3d10      	subs	r5, #16
   1ef12:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1ef16:	f844 6c04 	str.w	r6, [r4, #-4]
   1ef1a:	2d0f      	cmp	r5, #15
   1ef1c:	f103 0310 	add.w	r3, r3, #16
   1ef20:	f104 0410 	add.w	r4, r4, #16
   1ef24:	d8e8      	bhi.n	1eef8 <memmove+0x38>
   1ef26:	f1a2 0310 	sub.w	r3, r2, #16
   1ef2a:	f023 030f 	bic.w	r3, r3, #15
   1ef2e:	f002 0e0f 	and.w	lr, r2, #15
   1ef32:	3310      	adds	r3, #16
   1ef34:	f1be 0f03 	cmp.w	lr, #3
   1ef38:	4419      	add	r1, r3
   1ef3a:	4403      	add	r3, r0
   1ef3c:	d921      	bls.n	1ef82 <memmove+0xc2>
   1ef3e:	1f1e      	subs	r6, r3, #4
   1ef40:	460d      	mov	r5, r1
   1ef42:	4674      	mov	r4, lr
   1ef44:	3c04      	subs	r4, #4
   1ef46:	f855 7b04 	ldr.w	r7, [r5], #4
   1ef4a:	f846 7f04 	str.w	r7, [r6, #4]!
   1ef4e:	2c03      	cmp	r4, #3
   1ef50:	d8f8      	bhi.n	1ef44 <memmove+0x84>
   1ef52:	f1ae 0404 	sub.w	r4, lr, #4
   1ef56:	f024 0403 	bic.w	r4, r4, #3
   1ef5a:	3404      	adds	r4, #4
   1ef5c:	4421      	add	r1, r4
   1ef5e:	4423      	add	r3, r4
   1ef60:	f002 0203 	and.w	r2, r2, #3
   1ef64:	b162      	cbz	r2, 1ef80 <memmove+0xc0>
   1ef66:	3b01      	subs	r3, #1
   1ef68:	440a      	add	r2, r1
   1ef6a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ef6e:	f803 4f01 	strb.w	r4, [r3, #1]!
   1ef72:	428a      	cmp	r2, r1
   1ef74:	d1f9      	bne.n	1ef6a <memmove+0xaa>
   1ef76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ef78:	4603      	mov	r3, r0
   1ef7a:	e7f3      	b.n	1ef64 <memmove+0xa4>
   1ef7c:	4603      	mov	r3, r0
   1ef7e:	e7f2      	b.n	1ef66 <memmove+0xa6>
   1ef80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ef82:	4672      	mov	r2, lr
   1ef84:	e7ee      	b.n	1ef64 <memmove+0xa4>
   1ef86:	bf00      	nop

0001ef88 <_realloc_r>:
   1ef88:	2900      	cmp	r1, #0
   1ef8a:	f000 8095 	beq.w	1f0b8 <_realloc_r+0x130>
   1ef8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef92:	460d      	mov	r5, r1
   1ef94:	4616      	mov	r6, r2
   1ef96:	b083      	sub	sp, #12
   1ef98:	4680      	mov	r8, r0
   1ef9a:	f106 070b 	add.w	r7, r6, #11
   1ef9e:	f7fd ff1f 	bl	1cde0 <__malloc_lock>
   1efa2:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1efa6:	2f16      	cmp	r7, #22
   1efa8:	f02e 0403 	bic.w	r4, lr, #3
   1efac:	f1a5 0908 	sub.w	r9, r5, #8
   1efb0:	d83c      	bhi.n	1f02c <_realloc_r+0xa4>
   1efb2:	2210      	movs	r2, #16
   1efb4:	4617      	mov	r7, r2
   1efb6:	42be      	cmp	r6, r7
   1efb8:	d83d      	bhi.n	1f036 <_realloc_r+0xae>
   1efba:	4294      	cmp	r4, r2
   1efbc:	da43      	bge.n	1f046 <_realloc_r+0xbe>
   1efbe:	4bc4      	ldr	r3, [pc, #784]	; (1f2d0 <_realloc_r+0x348>)
   1efc0:	6899      	ldr	r1, [r3, #8]
   1efc2:	eb09 0004 	add.w	r0, r9, r4
   1efc6:	4288      	cmp	r0, r1
   1efc8:	f000 80b4 	beq.w	1f134 <_realloc_r+0x1ac>
   1efcc:	6843      	ldr	r3, [r0, #4]
   1efce:	f023 0101 	bic.w	r1, r3, #1
   1efd2:	4401      	add	r1, r0
   1efd4:	6849      	ldr	r1, [r1, #4]
   1efd6:	07c9      	lsls	r1, r1, #31
   1efd8:	d54c      	bpl.n	1f074 <_realloc_r+0xec>
   1efda:	f01e 0f01 	tst.w	lr, #1
   1efde:	f000 809b 	beq.w	1f118 <_realloc_r+0x190>
   1efe2:	4631      	mov	r1, r6
   1efe4:	4640      	mov	r0, r8
   1efe6:	f7fd fbf9 	bl	1c7dc <_malloc_r>
   1efea:	4606      	mov	r6, r0
   1efec:	2800      	cmp	r0, #0
   1efee:	d03a      	beq.n	1f066 <_realloc_r+0xde>
   1eff0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1eff4:	f023 0301 	bic.w	r3, r3, #1
   1eff8:	444b      	add	r3, r9
   1effa:	f1a0 0208 	sub.w	r2, r0, #8
   1effe:	429a      	cmp	r2, r3
   1f000:	f000 8121 	beq.w	1f246 <_realloc_r+0x2be>
   1f004:	1f22      	subs	r2, r4, #4
   1f006:	2a24      	cmp	r2, #36	; 0x24
   1f008:	f200 8107 	bhi.w	1f21a <_realloc_r+0x292>
   1f00c:	2a13      	cmp	r2, #19
   1f00e:	f200 80db 	bhi.w	1f1c8 <_realloc_r+0x240>
   1f012:	4603      	mov	r3, r0
   1f014:	462a      	mov	r2, r5
   1f016:	6811      	ldr	r1, [r2, #0]
   1f018:	6019      	str	r1, [r3, #0]
   1f01a:	6851      	ldr	r1, [r2, #4]
   1f01c:	6059      	str	r1, [r3, #4]
   1f01e:	6892      	ldr	r2, [r2, #8]
   1f020:	609a      	str	r2, [r3, #8]
   1f022:	4629      	mov	r1, r5
   1f024:	4640      	mov	r0, r8
   1f026:	f7ff fdf3 	bl	1ec10 <_free_r>
   1f02a:	e01c      	b.n	1f066 <_realloc_r+0xde>
   1f02c:	f027 0707 	bic.w	r7, r7, #7
   1f030:	2f00      	cmp	r7, #0
   1f032:	463a      	mov	r2, r7
   1f034:	dabf      	bge.n	1efb6 <_realloc_r+0x2e>
   1f036:	2600      	movs	r6, #0
   1f038:	230c      	movs	r3, #12
   1f03a:	4630      	mov	r0, r6
   1f03c:	f8c8 3000 	str.w	r3, [r8]
   1f040:	b003      	add	sp, #12
   1f042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f046:	462e      	mov	r6, r5
   1f048:	1be3      	subs	r3, r4, r7
   1f04a:	2b0f      	cmp	r3, #15
   1f04c:	d81e      	bhi.n	1f08c <_realloc_r+0x104>
   1f04e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f052:	f003 0301 	and.w	r3, r3, #1
   1f056:	4323      	orrs	r3, r4
   1f058:	444c      	add	r4, r9
   1f05a:	f8c9 3004 	str.w	r3, [r9, #4]
   1f05e:	6863      	ldr	r3, [r4, #4]
   1f060:	f043 0301 	orr.w	r3, r3, #1
   1f064:	6063      	str	r3, [r4, #4]
   1f066:	4640      	mov	r0, r8
   1f068:	f7fd fec0 	bl	1cdec <__malloc_unlock>
   1f06c:	4630      	mov	r0, r6
   1f06e:	b003      	add	sp, #12
   1f070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f074:	f023 0303 	bic.w	r3, r3, #3
   1f078:	18e1      	adds	r1, r4, r3
   1f07a:	4291      	cmp	r1, r2
   1f07c:	db1f      	blt.n	1f0be <_realloc_r+0x136>
   1f07e:	68c3      	ldr	r3, [r0, #12]
   1f080:	6882      	ldr	r2, [r0, #8]
   1f082:	462e      	mov	r6, r5
   1f084:	60d3      	str	r3, [r2, #12]
   1f086:	460c      	mov	r4, r1
   1f088:	609a      	str	r2, [r3, #8]
   1f08a:	e7dd      	b.n	1f048 <_realloc_r+0xc0>
   1f08c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1f090:	eb09 0107 	add.w	r1, r9, r7
   1f094:	f002 0201 	and.w	r2, r2, #1
   1f098:	444c      	add	r4, r9
   1f09a:	f043 0301 	orr.w	r3, r3, #1
   1f09e:	4317      	orrs	r7, r2
   1f0a0:	f8c9 7004 	str.w	r7, [r9, #4]
   1f0a4:	604b      	str	r3, [r1, #4]
   1f0a6:	6863      	ldr	r3, [r4, #4]
   1f0a8:	f043 0301 	orr.w	r3, r3, #1
   1f0ac:	3108      	adds	r1, #8
   1f0ae:	6063      	str	r3, [r4, #4]
   1f0b0:	4640      	mov	r0, r8
   1f0b2:	f7ff fdad 	bl	1ec10 <_free_r>
   1f0b6:	e7d6      	b.n	1f066 <_realloc_r+0xde>
   1f0b8:	4611      	mov	r1, r2
   1f0ba:	f7fd bb8f 	b.w	1c7dc <_malloc_r>
   1f0be:	f01e 0f01 	tst.w	lr, #1
   1f0c2:	d18e      	bne.n	1efe2 <_realloc_r+0x5a>
   1f0c4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1f0c8:	eba9 0a01 	sub.w	sl, r9, r1
   1f0cc:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f0d0:	f021 0103 	bic.w	r1, r1, #3
   1f0d4:	440b      	add	r3, r1
   1f0d6:	4423      	add	r3, r4
   1f0d8:	4293      	cmp	r3, r2
   1f0da:	db25      	blt.n	1f128 <_realloc_r+0x1a0>
   1f0dc:	68c2      	ldr	r2, [r0, #12]
   1f0de:	6881      	ldr	r1, [r0, #8]
   1f0e0:	4656      	mov	r6, sl
   1f0e2:	60ca      	str	r2, [r1, #12]
   1f0e4:	6091      	str	r1, [r2, #8]
   1f0e6:	f8da 100c 	ldr.w	r1, [sl, #12]
   1f0ea:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1f0ee:	1f22      	subs	r2, r4, #4
   1f0f0:	2a24      	cmp	r2, #36	; 0x24
   1f0f2:	60c1      	str	r1, [r0, #12]
   1f0f4:	6088      	str	r0, [r1, #8]
   1f0f6:	f200 8094 	bhi.w	1f222 <_realloc_r+0x29a>
   1f0fa:	2a13      	cmp	r2, #19
   1f0fc:	d96f      	bls.n	1f1de <_realloc_r+0x256>
   1f0fe:	6829      	ldr	r1, [r5, #0]
   1f100:	f8ca 1008 	str.w	r1, [sl, #8]
   1f104:	6869      	ldr	r1, [r5, #4]
   1f106:	f8ca 100c 	str.w	r1, [sl, #12]
   1f10a:	2a1b      	cmp	r2, #27
   1f10c:	f200 80a2 	bhi.w	1f254 <_realloc_r+0x2cc>
   1f110:	3508      	adds	r5, #8
   1f112:	f10a 0210 	add.w	r2, sl, #16
   1f116:	e063      	b.n	1f1e0 <_realloc_r+0x258>
   1f118:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1f11c:	eba9 0a03 	sub.w	sl, r9, r3
   1f120:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f124:	f021 0103 	bic.w	r1, r1, #3
   1f128:	1863      	adds	r3, r4, r1
   1f12a:	4293      	cmp	r3, r2
   1f12c:	f6ff af59 	blt.w	1efe2 <_realloc_r+0x5a>
   1f130:	4656      	mov	r6, sl
   1f132:	e7d8      	b.n	1f0e6 <_realloc_r+0x15e>
   1f134:	6841      	ldr	r1, [r0, #4]
   1f136:	f021 0b03 	bic.w	fp, r1, #3
   1f13a:	44a3      	add	fp, r4
   1f13c:	f107 0010 	add.w	r0, r7, #16
   1f140:	4583      	cmp	fp, r0
   1f142:	da56      	bge.n	1f1f2 <_realloc_r+0x26a>
   1f144:	f01e 0f01 	tst.w	lr, #1
   1f148:	f47f af4b 	bne.w	1efe2 <_realloc_r+0x5a>
   1f14c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1f150:	eba9 0a01 	sub.w	sl, r9, r1
   1f154:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f158:	f021 0103 	bic.w	r1, r1, #3
   1f15c:	448b      	add	fp, r1
   1f15e:	4558      	cmp	r0, fp
   1f160:	dce2      	bgt.n	1f128 <_realloc_r+0x1a0>
   1f162:	4656      	mov	r6, sl
   1f164:	f8da 100c 	ldr.w	r1, [sl, #12]
   1f168:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1f16c:	1f22      	subs	r2, r4, #4
   1f16e:	2a24      	cmp	r2, #36	; 0x24
   1f170:	60c1      	str	r1, [r0, #12]
   1f172:	6088      	str	r0, [r1, #8]
   1f174:	f200 808f 	bhi.w	1f296 <_realloc_r+0x30e>
   1f178:	2a13      	cmp	r2, #19
   1f17a:	f240 808a 	bls.w	1f292 <_realloc_r+0x30a>
   1f17e:	6829      	ldr	r1, [r5, #0]
   1f180:	f8ca 1008 	str.w	r1, [sl, #8]
   1f184:	6869      	ldr	r1, [r5, #4]
   1f186:	f8ca 100c 	str.w	r1, [sl, #12]
   1f18a:	2a1b      	cmp	r2, #27
   1f18c:	f200 808a 	bhi.w	1f2a4 <_realloc_r+0x31c>
   1f190:	3508      	adds	r5, #8
   1f192:	f10a 0210 	add.w	r2, sl, #16
   1f196:	6829      	ldr	r1, [r5, #0]
   1f198:	6011      	str	r1, [r2, #0]
   1f19a:	6869      	ldr	r1, [r5, #4]
   1f19c:	6051      	str	r1, [r2, #4]
   1f19e:	68a9      	ldr	r1, [r5, #8]
   1f1a0:	6091      	str	r1, [r2, #8]
   1f1a2:	eb0a 0107 	add.w	r1, sl, r7
   1f1a6:	ebab 0207 	sub.w	r2, fp, r7
   1f1aa:	f042 0201 	orr.w	r2, r2, #1
   1f1ae:	6099      	str	r1, [r3, #8]
   1f1b0:	604a      	str	r2, [r1, #4]
   1f1b2:	f8da 3004 	ldr.w	r3, [sl, #4]
   1f1b6:	f003 0301 	and.w	r3, r3, #1
   1f1ba:	431f      	orrs	r7, r3
   1f1bc:	4640      	mov	r0, r8
   1f1be:	f8ca 7004 	str.w	r7, [sl, #4]
   1f1c2:	f7fd fe13 	bl	1cdec <__malloc_unlock>
   1f1c6:	e751      	b.n	1f06c <_realloc_r+0xe4>
   1f1c8:	682b      	ldr	r3, [r5, #0]
   1f1ca:	6003      	str	r3, [r0, #0]
   1f1cc:	686b      	ldr	r3, [r5, #4]
   1f1ce:	6043      	str	r3, [r0, #4]
   1f1d0:	2a1b      	cmp	r2, #27
   1f1d2:	d82d      	bhi.n	1f230 <_realloc_r+0x2a8>
   1f1d4:	f100 0308 	add.w	r3, r0, #8
   1f1d8:	f105 0208 	add.w	r2, r5, #8
   1f1dc:	e71b      	b.n	1f016 <_realloc_r+0x8e>
   1f1de:	4632      	mov	r2, r6
   1f1e0:	6829      	ldr	r1, [r5, #0]
   1f1e2:	6011      	str	r1, [r2, #0]
   1f1e4:	6869      	ldr	r1, [r5, #4]
   1f1e6:	6051      	str	r1, [r2, #4]
   1f1e8:	68a9      	ldr	r1, [r5, #8]
   1f1ea:	6091      	str	r1, [r2, #8]
   1f1ec:	461c      	mov	r4, r3
   1f1ee:	46d1      	mov	r9, sl
   1f1f0:	e72a      	b.n	1f048 <_realloc_r+0xc0>
   1f1f2:	eb09 0107 	add.w	r1, r9, r7
   1f1f6:	ebab 0b07 	sub.w	fp, fp, r7
   1f1fa:	f04b 0201 	orr.w	r2, fp, #1
   1f1fe:	6099      	str	r1, [r3, #8]
   1f200:	604a      	str	r2, [r1, #4]
   1f202:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1f206:	f003 0301 	and.w	r3, r3, #1
   1f20a:	431f      	orrs	r7, r3
   1f20c:	4640      	mov	r0, r8
   1f20e:	f845 7c04 	str.w	r7, [r5, #-4]
   1f212:	f7fd fdeb 	bl	1cdec <__malloc_unlock>
   1f216:	462e      	mov	r6, r5
   1f218:	e728      	b.n	1f06c <_realloc_r+0xe4>
   1f21a:	4629      	mov	r1, r5
   1f21c:	f7ff fe50 	bl	1eec0 <memmove>
   1f220:	e6ff      	b.n	1f022 <_realloc_r+0x9a>
   1f222:	4629      	mov	r1, r5
   1f224:	4630      	mov	r0, r6
   1f226:	461c      	mov	r4, r3
   1f228:	46d1      	mov	r9, sl
   1f22a:	f7ff fe49 	bl	1eec0 <memmove>
   1f22e:	e70b      	b.n	1f048 <_realloc_r+0xc0>
   1f230:	68ab      	ldr	r3, [r5, #8]
   1f232:	6083      	str	r3, [r0, #8]
   1f234:	68eb      	ldr	r3, [r5, #12]
   1f236:	60c3      	str	r3, [r0, #12]
   1f238:	2a24      	cmp	r2, #36	; 0x24
   1f23a:	d017      	beq.n	1f26c <_realloc_r+0x2e4>
   1f23c:	f100 0310 	add.w	r3, r0, #16
   1f240:	f105 0210 	add.w	r2, r5, #16
   1f244:	e6e7      	b.n	1f016 <_realloc_r+0x8e>
   1f246:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1f24a:	f023 0303 	bic.w	r3, r3, #3
   1f24e:	441c      	add	r4, r3
   1f250:	462e      	mov	r6, r5
   1f252:	e6f9      	b.n	1f048 <_realloc_r+0xc0>
   1f254:	68a9      	ldr	r1, [r5, #8]
   1f256:	f8ca 1010 	str.w	r1, [sl, #16]
   1f25a:	68e9      	ldr	r1, [r5, #12]
   1f25c:	f8ca 1014 	str.w	r1, [sl, #20]
   1f260:	2a24      	cmp	r2, #36	; 0x24
   1f262:	d00c      	beq.n	1f27e <_realloc_r+0x2f6>
   1f264:	3510      	adds	r5, #16
   1f266:	f10a 0218 	add.w	r2, sl, #24
   1f26a:	e7b9      	b.n	1f1e0 <_realloc_r+0x258>
   1f26c:	692b      	ldr	r3, [r5, #16]
   1f26e:	6103      	str	r3, [r0, #16]
   1f270:	696b      	ldr	r3, [r5, #20]
   1f272:	6143      	str	r3, [r0, #20]
   1f274:	f105 0218 	add.w	r2, r5, #24
   1f278:	f100 0318 	add.w	r3, r0, #24
   1f27c:	e6cb      	b.n	1f016 <_realloc_r+0x8e>
   1f27e:	692a      	ldr	r2, [r5, #16]
   1f280:	f8ca 2018 	str.w	r2, [sl, #24]
   1f284:	696a      	ldr	r2, [r5, #20]
   1f286:	f8ca 201c 	str.w	r2, [sl, #28]
   1f28a:	3518      	adds	r5, #24
   1f28c:	f10a 0220 	add.w	r2, sl, #32
   1f290:	e7a6      	b.n	1f1e0 <_realloc_r+0x258>
   1f292:	4632      	mov	r2, r6
   1f294:	e77f      	b.n	1f196 <_realloc_r+0x20e>
   1f296:	4629      	mov	r1, r5
   1f298:	4630      	mov	r0, r6
   1f29a:	9301      	str	r3, [sp, #4]
   1f29c:	f7ff fe10 	bl	1eec0 <memmove>
   1f2a0:	9b01      	ldr	r3, [sp, #4]
   1f2a2:	e77e      	b.n	1f1a2 <_realloc_r+0x21a>
   1f2a4:	68a9      	ldr	r1, [r5, #8]
   1f2a6:	f8ca 1010 	str.w	r1, [sl, #16]
   1f2aa:	68e9      	ldr	r1, [r5, #12]
   1f2ac:	f8ca 1014 	str.w	r1, [sl, #20]
   1f2b0:	2a24      	cmp	r2, #36	; 0x24
   1f2b2:	d003      	beq.n	1f2bc <_realloc_r+0x334>
   1f2b4:	3510      	adds	r5, #16
   1f2b6:	f10a 0218 	add.w	r2, sl, #24
   1f2ba:	e76c      	b.n	1f196 <_realloc_r+0x20e>
   1f2bc:	692a      	ldr	r2, [r5, #16]
   1f2be:	f8ca 2018 	str.w	r2, [sl, #24]
   1f2c2:	696a      	ldr	r2, [r5, #20]
   1f2c4:	f8ca 201c 	str.w	r2, [sl, #28]
   1f2c8:	3518      	adds	r5, #24
   1f2ca:	f10a 0220 	add.w	r2, sl, #32
   1f2ce:	e762      	b.n	1f196 <_realloc_r+0x20e>
   1f2d0:	200006c4 	.word	0x200006c4

0001f2d4 <__sccl>:
   1f2d4:	b470      	push	{r4, r5, r6}
   1f2d6:	780c      	ldrb	r4, [r1, #0]
   1f2d8:	2c5e      	cmp	r4, #94	; 0x5e
   1f2da:	d02f      	beq.n	1f33c <__sccl+0x68>
   1f2dc:	2200      	movs	r2, #0
   1f2de:	1c4d      	adds	r5, r1, #1
   1f2e0:	4616      	mov	r6, r2
   1f2e2:	1e43      	subs	r3, r0, #1
   1f2e4:	f100 01ff 	add.w	r1, r0, #255	; 0xff
   1f2e8:	f803 2f01 	strb.w	r2, [r3, #1]!
   1f2ec:	428b      	cmp	r3, r1
   1f2ee:	d1fb      	bne.n	1f2e8 <__sccl+0x14>
   1f2f0:	b174      	cbz	r4, 1f310 <__sccl+0x3c>
   1f2f2:	f086 0201 	eor.w	r2, r6, #1
   1f2f6:	5502      	strb	r2, [r0, r4]
   1f2f8:	1c6e      	adds	r6, r5, #1
   1f2fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1f2fe:	2b2d      	cmp	r3, #45	; 0x2d
   1f300:	4631      	mov	r1, r6
   1f302:	d00d      	beq.n	1f320 <__sccl+0x4c>
   1f304:	2b5d      	cmp	r3, #93	; 0x5d
   1f306:	d004      	beq.n	1f312 <__sccl+0x3e>
   1f308:	b133      	cbz	r3, 1f318 <__sccl+0x44>
   1f30a:	461c      	mov	r4, r3
   1f30c:	4635      	mov	r5, r6
   1f30e:	e7f2      	b.n	1f2f6 <__sccl+0x22>
   1f310:	1e69      	subs	r1, r5, #1
   1f312:	4608      	mov	r0, r1
   1f314:	bc70      	pop	{r4, r5, r6}
   1f316:	4770      	bx	lr
   1f318:	4629      	mov	r1, r5
   1f31a:	4608      	mov	r0, r1
   1f31c:	bc70      	pop	{r4, r5, r6}
   1f31e:	4770      	bx	lr
   1f320:	7869      	ldrb	r1, [r5, #1]
   1f322:	295d      	cmp	r1, #93	; 0x5d
   1f324:	d0f1      	beq.n	1f30a <__sccl+0x36>
   1f326:	428c      	cmp	r4, r1
   1f328:	dcef      	bgt.n	1f30a <__sccl+0x36>
   1f32a:	3502      	adds	r5, #2
   1f32c:	1903      	adds	r3, r0, r4
   1f32e:	3401      	adds	r4, #1
   1f330:	42a1      	cmp	r1, r4
   1f332:	f803 2f01 	strb.w	r2, [r3, #1]!
   1f336:	dcfa      	bgt.n	1f32e <__sccl+0x5a>
   1f338:	3602      	adds	r6, #2
   1f33a:	e7de      	b.n	1f2fa <__sccl+0x26>
   1f33c:	2201      	movs	r2, #1
   1f33e:	784c      	ldrb	r4, [r1, #1]
   1f340:	4616      	mov	r6, r2
   1f342:	1c8d      	adds	r5, r1, #2
   1f344:	e7cd      	b.n	1f2e2 <__sccl+0xe>
   1f346:	bf00      	nop

0001f348 <_strtol_l.isra.0>:
   1f348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f34c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1f350:	460f      	mov	r7, r1
   1f352:	4680      	mov	r8, r0
   1f354:	4616      	mov	r6, r2
   1f356:	461d      	mov	r5, r3
   1f358:	468a      	mov	sl, r1
   1f35a:	e000      	b.n	1f35e <_strtol_l.isra.0+0x16>
   1f35c:	46a2      	mov	sl, r4
   1f35e:	4654      	mov	r4, sl
   1f360:	4648      	mov	r0, r9
   1f362:	f814 bb01 	ldrb.w	fp, [r4], #1
   1f366:	f7ff fd55 	bl	1ee14 <__locale_ctype_ptr_l>
   1f36a:	4458      	add	r0, fp
   1f36c:	7842      	ldrb	r2, [r0, #1]
   1f36e:	f012 0208 	ands.w	r2, r2, #8
   1f372:	d1f3      	bne.n	1f35c <_strtol_l.isra.0+0x14>
   1f374:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   1f378:	d04f      	beq.n	1f41a <_strtol_l.isra.0+0xd2>
   1f37a:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   1f37e:	bf04      	itt	eq
   1f380:	f894 b000 	ldrbeq.w	fp, [r4]
   1f384:	f10a 0402 	addeq.w	r4, sl, #2
   1f388:	b11d      	cbz	r5, 1f392 <_strtol_l.isra.0+0x4a>
   1f38a:	2d10      	cmp	r5, #16
   1f38c:	d056      	beq.n	1f43c <_strtol_l.isra.0+0xf4>
   1f38e:	46ac      	mov	ip, r5
   1f390:	e004      	b.n	1f39c <_strtol_l.isra.0+0x54>
   1f392:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1f396:	d060      	beq.n	1f45a <_strtol_l.isra.0+0x112>
   1f398:	250a      	movs	r5, #10
   1f39a:	46ac      	mov	ip, r5
   1f39c:	2a00      	cmp	r2, #0
   1f39e:	bf0c      	ite	eq
   1f3a0:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   1f3a4:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   1f3a8:	2100      	movs	r1, #0
   1f3aa:	fbb9 fefc 	udiv	lr, r9, ip
   1f3ae:	4608      	mov	r0, r1
   1f3b0:	fb0c 9a1e 	mls	sl, ip, lr, r9
   1f3b4:	e005      	b.n	1f3c2 <_strtol_l.isra.0+0x7a>
   1f3b6:	d029      	beq.n	1f40c <_strtol_l.isra.0+0xc4>
   1f3b8:	fb0c 3000 	mla	r0, ip, r0, r3
   1f3bc:	2101      	movs	r1, #1
   1f3be:	f814 bb01 	ldrb.w	fp, [r4], #1
   1f3c2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   1f3c6:	2b09      	cmp	r3, #9
   1f3c8:	d905      	bls.n	1f3d6 <_strtol_l.isra.0+0x8e>
   1f3ca:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   1f3ce:	2b19      	cmp	r3, #25
   1f3d0:	d80b      	bhi.n	1f3ea <_strtol_l.isra.0+0xa2>
   1f3d2:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   1f3d6:	429d      	cmp	r5, r3
   1f3d8:	dd0f      	ble.n	1f3fa <_strtol_l.isra.0+0xb2>
   1f3da:	f1b1 3fff 	cmp.w	r1, #4294967295
   1f3de:	d0ee      	beq.n	1f3be <_strtol_l.isra.0+0x76>
   1f3e0:	4586      	cmp	lr, r0
   1f3e2:	d2e8      	bcs.n	1f3b6 <_strtol_l.isra.0+0x6e>
   1f3e4:	f04f 31ff 	mov.w	r1, #4294967295
   1f3e8:	e7e9      	b.n	1f3be <_strtol_l.isra.0+0x76>
   1f3ea:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   1f3ee:	2b19      	cmp	r3, #25
   1f3f0:	d803      	bhi.n	1f3fa <_strtol_l.isra.0+0xb2>
   1f3f2:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   1f3f6:	429d      	cmp	r5, r3
   1f3f8:	dcef      	bgt.n	1f3da <_strtol_l.isra.0+0x92>
   1f3fa:	1c4b      	adds	r3, r1, #1
   1f3fc:	d013      	beq.n	1f426 <_strtol_l.isra.0+0xde>
   1f3fe:	b102      	cbz	r2, 1f402 <_strtol_l.isra.0+0xba>
   1f400:	4240      	negs	r0, r0
   1f402:	b146      	cbz	r6, 1f416 <_strtol_l.isra.0+0xce>
   1f404:	b9c1      	cbnz	r1, 1f438 <_strtol_l.isra.0+0xf0>
   1f406:	6037      	str	r7, [r6, #0]
   1f408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f40c:	459a      	cmp	sl, r3
   1f40e:	dad3      	bge.n	1f3b8 <_strtol_l.isra.0+0x70>
   1f410:	f04f 31ff 	mov.w	r1, #4294967295
   1f414:	e7d3      	b.n	1f3be <_strtol_l.isra.0+0x76>
   1f416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f41a:	f894 b000 	ldrb.w	fp, [r4]
   1f41e:	2201      	movs	r2, #1
   1f420:	f10a 0402 	add.w	r4, sl, #2
   1f424:	e7b0      	b.n	1f388 <_strtol_l.isra.0+0x40>
   1f426:	2322      	movs	r3, #34	; 0x22
   1f428:	f8c8 3000 	str.w	r3, [r8]
   1f42c:	b1ee      	cbz	r6, 1f46a <_strtol_l.isra.0+0x122>
   1f42e:	1e67      	subs	r7, r4, #1
   1f430:	4648      	mov	r0, r9
   1f432:	6037      	str	r7, [r6, #0]
   1f434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f438:	4681      	mov	r9, r0
   1f43a:	e7f8      	b.n	1f42e <_strtol_l.isra.0+0xe6>
   1f43c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1f440:	d1a5      	bne.n	1f38e <_strtol_l.isra.0+0x46>
   1f442:	7823      	ldrb	r3, [r4, #0]
   1f444:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1f448:	2b58      	cmp	r3, #88	; 0x58
   1f44a:	d1a0      	bne.n	1f38e <_strtol_l.isra.0+0x46>
   1f44c:	f04f 0c10 	mov.w	ip, #16
   1f450:	f894 b001 	ldrb.w	fp, [r4, #1]
   1f454:	4665      	mov	r5, ip
   1f456:	3402      	adds	r4, #2
   1f458:	e7a0      	b.n	1f39c <_strtol_l.isra.0+0x54>
   1f45a:	7823      	ldrb	r3, [r4, #0]
   1f45c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1f460:	2b58      	cmp	r3, #88	; 0x58
   1f462:	d0f3      	beq.n	1f44c <_strtol_l.isra.0+0x104>
   1f464:	2508      	movs	r5, #8
   1f466:	46ac      	mov	ip, r5
   1f468:	e798      	b.n	1f39c <_strtol_l.isra.0+0x54>
   1f46a:	4648      	mov	r0, r9
   1f46c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001f470 <_strtol_r>:
   1f470:	b530      	push	{r4, r5, lr}
   1f472:	4c06      	ldr	r4, [pc, #24]	; (1f48c <_strtol_r+0x1c>)
   1f474:	4d06      	ldr	r5, [pc, #24]	; (1f490 <_strtol_r+0x20>)
   1f476:	6824      	ldr	r4, [r4, #0]
   1f478:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1f47a:	b083      	sub	sp, #12
   1f47c:	2c00      	cmp	r4, #0
   1f47e:	bf08      	it	eq
   1f480:	462c      	moveq	r4, r5
   1f482:	9400      	str	r4, [sp, #0]
   1f484:	f7ff ff60 	bl	1f348 <_strtol_l.isra.0>
   1f488:	b003      	add	sp, #12
   1f48a:	bd30      	pop	{r4, r5, pc}
   1f48c:	20000248 	.word	0x20000248
   1f490:	20000ad8 	.word	0x20000ad8

0001f494 <_strtoll_l.isra.0>:
   1f494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f498:	b085      	sub	sp, #20
   1f49a:	461e      	mov	r6, r3
   1f49c:	9102      	str	r1, [sp, #8]
   1f49e:	9003      	str	r0, [sp, #12]
   1f4a0:	9200      	str	r2, [sp, #0]
   1f4a2:	4688      	mov	r8, r1
   1f4a4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1f4a6:	e000      	b.n	1f4aa <_strtoll_l.isra.0+0x16>
   1f4a8:	46a8      	mov	r8, r5
   1f4aa:	4645      	mov	r5, r8
   1f4ac:	4638      	mov	r0, r7
   1f4ae:	f815 4b01 	ldrb.w	r4, [r5], #1
   1f4b2:	f7ff fcaf 	bl	1ee14 <__locale_ctype_ptr_l>
   1f4b6:	4420      	add	r0, r4
   1f4b8:	7843      	ldrb	r3, [r0, #1]
   1f4ba:	f013 0308 	ands.w	r3, r3, #8
   1f4be:	d1f3      	bne.n	1f4a8 <_strtoll_l.isra.0+0x14>
   1f4c0:	2c2d      	cmp	r4, #45	; 0x2d
   1f4c2:	f000 8081 	beq.w	1f5c8 <_strtoll_l.isra.0+0x134>
   1f4c6:	2c2b      	cmp	r4, #43	; 0x2b
   1f4c8:	bf03      	ittte	eq
   1f4ca:	782c      	ldrbeq	r4, [r5, #0]
   1f4cc:	9301      	streq	r3, [sp, #4]
   1f4ce:	f108 0502 	addeq.w	r5, r8, #2
   1f4d2:	9301      	strne	r3, [sp, #4]
   1f4d4:	b166      	cbz	r6, 1f4f0 <_strtoll_l.isra.0+0x5c>
   1f4d6:	2e10      	cmp	r6, #16
   1f4d8:	f000 8088 	beq.w	1f5ec <_strtoll_l.isra.0+0x158>
   1f4dc:	9b01      	ldr	r3, [sp, #4]
   1f4de:	46b0      	mov	r8, r6
   1f4e0:	ea4f 79e6 	mov.w	r9, r6, asr #31
   1f4e4:	b97b      	cbnz	r3, 1f506 <_strtoll_l.isra.0+0x72>
   1f4e6:	f04f 3aff 	mov.w	sl, #4294967295
   1f4ea:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
   1f4ee:	e00e      	b.n	1f50e <_strtoll_l.isra.0+0x7a>
   1f4f0:	2c30      	cmp	r4, #48	; 0x30
   1f4f2:	f000 808a 	beq.w	1f60a <_strtoll_l.isra.0+0x176>
   1f4f6:	f04f 080a 	mov.w	r8, #10
   1f4fa:	f04f 0900 	mov.w	r9, #0
   1f4fe:	260a      	movs	r6, #10
   1f500:	9b01      	ldr	r3, [sp, #4]
   1f502:	2b00      	cmp	r3, #0
   1f504:	d0ef      	beq.n	1f4e6 <_strtoll_l.isra.0+0x52>
   1f506:	f04f 0a00 	mov.w	sl, #0
   1f50a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
   1f50e:	4642      	mov	r2, r8
   1f510:	464b      	mov	r3, r9
   1f512:	4650      	mov	r0, sl
   1f514:	4639      	mov	r1, r7
   1f516:	f7fc f879 	bl	1b60c <__aeabi_uldivmod>
   1f51a:	464b      	mov	r3, r9
   1f51c:	4693      	mov	fp, r2
   1f51e:	4650      	mov	r0, sl
   1f520:	4642      	mov	r2, r8
   1f522:	4639      	mov	r1, r7
   1f524:	f7fc f872 	bl	1b60c <__aeabi_uldivmod>
   1f528:	f04f 0e00 	mov.w	lr, #0
   1f52c:	2200      	movs	r2, #0
   1f52e:	2300      	movs	r3, #0
   1f530:	e00f      	b.n	1f552 <_strtoll_l.isra.0+0xbe>
   1f532:	d044      	beq.n	1f5be <_strtoll_l.isra.0+0x12a>
   1f534:	fb02 f409 	mul.w	r4, r2, r9
   1f538:	fb08 4403 	mla	r4, r8, r3, r4
   1f53c:	fba2 2308 	umull	r2, r3, r2, r8
   1f540:	4423      	add	r3, r4
   1f542:	eb12 020c 	adds.w	r2, r2, ip
   1f546:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
   1f54a:	f04f 0e01 	mov.w	lr, #1
   1f54e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1f552:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   1f556:	f1bc 0f09 	cmp.w	ip, #9
   1f55a:	d906      	bls.n	1f56a <_strtoll_l.isra.0+0xd6>
   1f55c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   1f560:	f1bc 0f19 	cmp.w	ip, #25
   1f564:	d80d      	bhi.n	1f582 <_strtoll_l.isra.0+0xee>
   1f566:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
   1f56a:	4566      	cmp	r6, ip
   1f56c:	dd12      	ble.n	1f594 <_strtoll_l.isra.0+0x100>
   1f56e:	f1be 3fff 	cmp.w	lr, #4294967295
   1f572:	d0ec      	beq.n	1f54e <_strtoll_l.isra.0+0xba>
   1f574:	4299      	cmp	r1, r3
   1f576:	bf08      	it	eq
   1f578:	4290      	cmpeq	r0, r2
   1f57a:	d2da      	bcs.n	1f532 <_strtoll_l.isra.0+0x9e>
   1f57c:	f04f 3eff 	mov.w	lr, #4294967295
   1f580:	e7e5      	b.n	1f54e <_strtoll_l.isra.0+0xba>
   1f582:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   1f586:	f1bc 0f19 	cmp.w	ip, #25
   1f58a:	d803      	bhi.n	1f594 <_strtoll_l.isra.0+0x100>
   1f58c:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
   1f590:	4566      	cmp	r6, ip
   1f592:	dcec      	bgt.n	1f56e <_strtoll_l.isra.0+0xda>
   1f594:	f1be 3fff 	cmp.w	lr, #4294967295
   1f598:	d01c      	beq.n	1f5d4 <_strtoll_l.isra.0+0x140>
   1f59a:	9901      	ldr	r1, [sp, #4]
   1f59c:	b111      	cbz	r1, 1f5a4 <_strtoll_l.isra.0+0x110>
   1f59e:	4252      	negs	r2, r2
   1f5a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1f5a4:	9900      	ldr	r1, [sp, #0]
   1f5a6:	b129      	cbz	r1, 1f5b4 <_strtoll_l.isra.0+0x120>
   1f5a8:	f1be 0f00 	cmp.w	lr, #0
   1f5ac:	d11b      	bne.n	1f5e6 <_strtoll_l.isra.0+0x152>
   1f5ae:	9d02      	ldr	r5, [sp, #8]
   1f5b0:	9900      	ldr	r1, [sp, #0]
   1f5b2:	600d      	str	r5, [r1, #0]
   1f5b4:	4610      	mov	r0, r2
   1f5b6:	4619      	mov	r1, r3
   1f5b8:	b005      	add	sp, #20
   1f5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5be:	45e3      	cmp	fp, ip
   1f5c0:	dab8      	bge.n	1f534 <_strtoll_l.isra.0+0xa0>
   1f5c2:	f04f 3eff 	mov.w	lr, #4294967295
   1f5c6:	e7c2      	b.n	1f54e <_strtoll_l.isra.0+0xba>
   1f5c8:	2301      	movs	r3, #1
   1f5ca:	782c      	ldrb	r4, [r5, #0]
   1f5cc:	9301      	str	r3, [sp, #4]
   1f5ce:	f108 0502 	add.w	r5, r8, #2
   1f5d2:	e77f      	b.n	1f4d4 <_strtoll_l.isra.0+0x40>
   1f5d4:	9a03      	ldr	r2, [sp, #12]
   1f5d6:	2322      	movs	r3, #34	; 0x22
   1f5d8:	6013      	str	r3, [r2, #0]
   1f5da:	9b00      	ldr	r3, [sp, #0]
   1f5dc:	b32b      	cbz	r3, 1f62a <_strtoll_l.isra.0+0x196>
   1f5de:	4652      	mov	r2, sl
   1f5e0:	463b      	mov	r3, r7
   1f5e2:	3d01      	subs	r5, #1
   1f5e4:	e7e4      	b.n	1f5b0 <_strtoll_l.isra.0+0x11c>
   1f5e6:	4692      	mov	sl, r2
   1f5e8:	461f      	mov	r7, r3
   1f5ea:	e7f8      	b.n	1f5de <_strtoll_l.isra.0+0x14a>
   1f5ec:	2c30      	cmp	r4, #48	; 0x30
   1f5ee:	d117      	bne.n	1f620 <_strtoll_l.isra.0+0x18c>
   1f5f0:	782b      	ldrb	r3, [r5, #0]
   1f5f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1f5f6:	2b58      	cmp	r3, #88	; 0x58
   1f5f8:	d112      	bne.n	1f620 <_strtoll_l.isra.0+0x18c>
   1f5fa:	786c      	ldrb	r4, [r5, #1]
   1f5fc:	f04f 0810 	mov.w	r8, #16
   1f600:	f04f 0900 	mov.w	r9, #0
   1f604:	3502      	adds	r5, #2
   1f606:	2610      	movs	r6, #16
   1f608:	e77a      	b.n	1f500 <_strtoll_l.isra.0+0x6c>
   1f60a:	782b      	ldrb	r3, [r5, #0]
   1f60c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1f610:	2b58      	cmp	r3, #88	; 0x58
   1f612:	d0f2      	beq.n	1f5fa <_strtoll_l.isra.0+0x166>
   1f614:	f04f 0808 	mov.w	r8, #8
   1f618:	f04f 0900 	mov.w	r9, #0
   1f61c:	2608      	movs	r6, #8
   1f61e:	e76f      	b.n	1f500 <_strtoll_l.isra.0+0x6c>
   1f620:	f04f 0810 	mov.w	r8, #16
   1f624:	f04f 0900 	mov.w	r9, #0
   1f628:	e76a      	b.n	1f500 <_strtoll_l.isra.0+0x6c>
   1f62a:	4652      	mov	r2, sl
   1f62c:	463b      	mov	r3, r7
   1f62e:	e7c1      	b.n	1f5b4 <_strtoll_l.isra.0+0x120>

0001f630 <_strtoll_r>:
   1f630:	b530      	push	{r4, r5, lr}
   1f632:	4c06      	ldr	r4, [pc, #24]	; (1f64c <_strtoll_r+0x1c>)
   1f634:	4d06      	ldr	r5, [pc, #24]	; (1f650 <_strtoll_r+0x20>)
   1f636:	6824      	ldr	r4, [r4, #0]
   1f638:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1f63a:	b083      	sub	sp, #12
   1f63c:	2c00      	cmp	r4, #0
   1f63e:	bf08      	it	eq
   1f640:	462c      	moveq	r4, r5
   1f642:	9400      	str	r4, [sp, #0]
   1f644:	f7ff ff26 	bl	1f494 <_strtoll_l.isra.0>
   1f648:	b003      	add	sp, #12
   1f64a:	bd30      	pop	{r4, r5, pc}
   1f64c:	20000248 	.word	0x20000248
   1f650:	20000ad8 	.word	0x20000ad8

0001f654 <_strtoull_l.isra.0>:
   1f654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f658:	b085      	sub	sp, #20
   1f65a:	4693      	mov	fp, r2
   1f65c:	9102      	str	r1, [sp, #8]
   1f65e:	9003      	str	r0, [sp, #12]
   1f660:	469a      	mov	sl, r3
   1f662:	460f      	mov	r7, r1
   1f664:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1f666:	e000      	b.n	1f66a <_strtoull_l.isra.0+0x16>
   1f668:	462f      	mov	r7, r5
   1f66a:	463d      	mov	r5, r7
   1f66c:	4630      	mov	r0, r6
   1f66e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1f672:	f7ff fbcf 	bl	1ee14 <__locale_ctype_ptr_l>
   1f676:	4420      	add	r0, r4
   1f678:	7843      	ldrb	r3, [r0, #1]
   1f67a:	f013 0308 	ands.w	r3, r3, #8
   1f67e:	d1f3      	bne.n	1f668 <_strtoull_l.isra.0+0x14>
   1f680:	2c2d      	cmp	r4, #45	; 0x2d
   1f682:	f000 8089 	beq.w	1f798 <_strtoull_l.isra.0+0x144>
   1f686:	2c2b      	cmp	r4, #43	; 0x2b
   1f688:	bf03      	ittte	eq
   1f68a:	782c      	ldrbeq	r4, [r5, #0]
   1f68c:	9301      	streq	r3, [sp, #4]
   1f68e:	1cbd      	addeq	r5, r7, #2
   1f690:	9301      	strne	r3, [sp, #4]
   1f692:	f1ba 0f00 	cmp.w	sl, #0
   1f696:	d019      	beq.n	1f6cc <_strtoull_l.isra.0+0x78>
   1f698:	f1ba 0f10 	cmp.w	sl, #16
   1f69c:	f000 8081 	beq.w	1f7a2 <_strtoull_l.isra.0+0x14e>
   1f6a0:	46d0      	mov	r8, sl
   1f6a2:	ea4f 79ea 	mov.w	r9, sl, asr #31
   1f6a6:	4642      	mov	r2, r8
   1f6a8:	464b      	mov	r3, r9
   1f6aa:	f04f 30ff 	mov.w	r0, #4294967295
   1f6ae:	f04f 31ff 	mov.w	r1, #4294967295
   1f6b2:	f7fb ffab 	bl	1b60c <__aeabi_uldivmod>
   1f6b6:	4642      	mov	r2, r8
   1f6b8:	4606      	mov	r6, r0
   1f6ba:	460f      	mov	r7, r1
   1f6bc:	464b      	mov	r3, r9
   1f6be:	f04f 30ff 	mov.w	r0, #4294967295
   1f6c2:	f04f 31ff 	mov.w	r1, #4294967295
   1f6c6:	f7fb ffa1 	bl	1b60c <__aeabi_uldivmod>
   1f6ca:	e00b      	b.n	1f6e4 <_strtoull_l.isra.0+0x90>
   1f6cc:	2c30      	cmp	r4, #48	; 0x30
   1f6ce:	d07d      	beq.n	1f7cc <_strtoull_l.isra.0+0x178>
   1f6d0:	4f4e      	ldr	r7, [pc, #312]	; (1f80c <_strtoull_l.isra.0+0x1b8>)
   1f6d2:	2205      	movs	r2, #5
   1f6d4:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   1f6d8:	f04f 080a 	mov.w	r8, #10
   1f6dc:	f04f 0900 	mov.w	r9, #0
   1f6e0:	f04f 0a0a 	mov.w	sl, #10
   1f6e4:	f04f 0e00 	mov.w	lr, #0
   1f6e8:	2000      	movs	r0, #0
   1f6ea:	2100      	movs	r1, #0
   1f6ec:	e011      	b.n	1f712 <_strtoull_l.isra.0+0xbe>
   1f6ee:	42b9      	cmp	r1, r7
   1f6f0:	bf08      	it	eq
   1f6f2:	42b0      	cmpeq	r0, r6
   1f6f4:	d03f      	beq.n	1f776 <_strtoull_l.isra.0+0x122>
   1f6f6:	fb00 f409 	mul.w	r4, r0, r9
   1f6fa:	fb08 4401 	mla	r4, r8, r1, r4
   1f6fe:	fba0 0108 	umull	r0, r1, r0, r8
   1f702:	4421      	add	r1, r4
   1f704:	18c0      	adds	r0, r0, r3
   1f706:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   1f70a:	f04f 0e01 	mov.w	lr, #1
   1f70e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1f712:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1f716:	2b09      	cmp	r3, #9
   1f718:	d905      	bls.n	1f726 <_strtoull_l.isra.0+0xd2>
   1f71a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   1f71e:	2b19      	cmp	r3, #25
   1f720:	d80d      	bhi.n	1f73e <_strtoull_l.isra.0+0xea>
   1f722:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   1f726:	459a      	cmp	sl, r3
   1f728:	dd11      	ble.n	1f74e <_strtoull_l.isra.0+0xfa>
   1f72a:	f1be 0f00 	cmp.w	lr, #0
   1f72e:	db03      	blt.n	1f738 <_strtoull_l.isra.0+0xe4>
   1f730:	428f      	cmp	r7, r1
   1f732:	bf08      	it	eq
   1f734:	4286      	cmpeq	r6, r0
   1f736:	d2da      	bcs.n	1f6ee <_strtoull_l.isra.0+0x9a>
   1f738:	f04f 3eff 	mov.w	lr, #4294967295
   1f73c:	e7e7      	b.n	1f70e <_strtoull_l.isra.0+0xba>
   1f73e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1f742:	2b19      	cmp	r3, #25
   1f744:	d803      	bhi.n	1f74e <_strtoull_l.isra.0+0xfa>
   1f746:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   1f74a:	459a      	cmp	sl, r3
   1f74c:	dced      	bgt.n	1f72a <_strtoull_l.isra.0+0xd6>
   1f74e:	f1be 0f00 	cmp.w	lr, #0
   1f752:	db15      	blt.n	1f780 <_strtoull_l.isra.0+0x12c>
   1f754:	9b01      	ldr	r3, [sp, #4]
   1f756:	b113      	cbz	r3, 1f75e <_strtoull_l.isra.0+0x10a>
   1f758:	4240      	negs	r0, r0
   1f75a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1f75e:	f1bb 0f00 	cmp.w	fp, #0
   1f762:	d005      	beq.n	1f770 <_strtoull_l.isra.0+0x11c>
   1f764:	f1be 0f00 	cmp.w	lr, #0
   1f768:	d114      	bne.n	1f794 <_strtoull_l.isra.0+0x140>
   1f76a:	9d02      	ldr	r5, [sp, #8]
   1f76c:	f8cb 5000 	str.w	r5, [fp]
   1f770:	b005      	add	sp, #20
   1f772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f776:	4293      	cmp	r3, r2
   1f778:	ddbd      	ble.n	1f6f6 <_strtoull_l.isra.0+0xa2>
   1f77a:	f04f 3eff 	mov.w	lr, #4294967295
   1f77e:	e7c6      	b.n	1f70e <_strtoull_l.isra.0+0xba>
   1f780:	9a03      	ldr	r2, [sp, #12]
   1f782:	2322      	movs	r3, #34	; 0x22
   1f784:	6013      	str	r3, [r2, #0]
   1f786:	f04f 30ff 	mov.w	r0, #4294967295
   1f78a:	f04f 31ff 	mov.w	r1, #4294967295
   1f78e:	f1bb 0f00 	cmp.w	fp, #0
   1f792:	d0ed      	beq.n	1f770 <_strtoull_l.isra.0+0x11c>
   1f794:	3d01      	subs	r5, #1
   1f796:	e7e9      	b.n	1f76c <_strtoull_l.isra.0+0x118>
   1f798:	2301      	movs	r3, #1
   1f79a:	782c      	ldrb	r4, [r5, #0]
   1f79c:	9301      	str	r3, [sp, #4]
   1f79e:	1cbd      	adds	r5, r7, #2
   1f7a0:	e777      	b.n	1f692 <_strtoull_l.isra.0+0x3e>
   1f7a2:	2c30      	cmp	r4, #48	; 0x30
   1f7a4:	d123      	bne.n	1f7ee <_strtoull_l.isra.0+0x19a>
   1f7a6:	782b      	ldrb	r3, [r5, #0]
   1f7a8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1f7ac:	2b58      	cmp	r3, #88	; 0x58
   1f7ae:	d128      	bne.n	1f802 <_strtoull_l.isra.0+0x1ae>
   1f7b0:	786c      	ldrb	r4, [r5, #1]
   1f7b2:	220f      	movs	r2, #15
   1f7b4:	3502      	adds	r5, #2
   1f7b6:	f04f 36ff 	mov.w	r6, #4294967295
   1f7ba:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   1f7be:	f04f 0810 	mov.w	r8, #16
   1f7c2:	f04f 0900 	mov.w	r9, #0
   1f7c6:	f04f 0a10 	mov.w	sl, #16
   1f7ca:	e78b      	b.n	1f6e4 <_strtoull_l.isra.0+0x90>
   1f7cc:	782b      	ldrb	r3, [r5, #0]
   1f7ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1f7d2:	2b58      	cmp	r3, #88	; 0x58
   1f7d4:	d0ec      	beq.n	1f7b0 <_strtoull_l.isra.0+0x15c>
   1f7d6:	2207      	movs	r2, #7
   1f7d8:	f04f 36ff 	mov.w	r6, #4294967295
   1f7dc:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   1f7e0:	f04f 0808 	mov.w	r8, #8
   1f7e4:	f04f 0900 	mov.w	r9, #0
   1f7e8:	f04f 0a08 	mov.w	sl, #8
   1f7ec:	e77a      	b.n	1f6e4 <_strtoull_l.isra.0+0x90>
   1f7ee:	220f      	movs	r2, #15
   1f7f0:	f04f 36ff 	mov.w	r6, #4294967295
   1f7f4:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   1f7f8:	f04f 0810 	mov.w	r8, #16
   1f7fc:	f04f 0900 	mov.w	r9, #0
   1f800:	e770      	b.n	1f6e4 <_strtoull_l.isra.0+0x90>
   1f802:	f04f 0810 	mov.w	r8, #16
   1f806:	f04f 0900 	mov.w	r9, #0
   1f80a:	e74c      	b.n	1f6a6 <_strtoull_l.isra.0+0x52>
   1f80c:	19999999 	.word	0x19999999

0001f810 <_strtoull_r>:
   1f810:	b530      	push	{r4, r5, lr}
   1f812:	4c06      	ldr	r4, [pc, #24]	; (1f82c <_strtoull_r+0x1c>)
   1f814:	4d06      	ldr	r5, [pc, #24]	; (1f830 <_strtoull_r+0x20>)
   1f816:	6824      	ldr	r4, [r4, #0]
   1f818:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1f81a:	b083      	sub	sp, #12
   1f81c:	2c00      	cmp	r4, #0
   1f81e:	bf08      	it	eq
   1f820:	462c      	moveq	r4, r5
   1f822:	9400      	str	r4, [sp, #0]
   1f824:	f7ff ff16 	bl	1f654 <_strtoull_l.isra.0>
   1f828:	b003      	add	sp, #12
   1f82a:	bd30      	pop	{r4, r5, pc}
   1f82c:	20000248 	.word	0x20000248
   1f830:	20000ad8 	.word	0x20000ad8

0001f834 <__ascii_wctomb>:
   1f834:	b121      	cbz	r1, 1f840 <__ascii_wctomb+0xc>
   1f836:	2aff      	cmp	r2, #255	; 0xff
   1f838:	d804      	bhi.n	1f844 <__ascii_wctomb+0x10>
   1f83a:	700a      	strb	r2, [r1, #0]
   1f83c:	2001      	movs	r0, #1
   1f83e:	4770      	bx	lr
   1f840:	4608      	mov	r0, r1
   1f842:	4770      	bx	lr
   1f844:	238a      	movs	r3, #138	; 0x8a
   1f846:	6003      	str	r3, [r0, #0]
   1f848:	f04f 30ff 	mov.w	r0, #4294967295
   1f84c:	4770      	bx	lr
   1f84e:	bf00      	nop
   1f850:	2e2f2e2e 	.word	0x2e2f2e2e
   1f854:	2e2e2f2e 	.word	0x2e2e2f2e
   1f858:	554c412f 	.word	0x554c412f
   1f85c:	6972445f 	.word	0x6972445f
   1f860:	2f726576 	.word	0x2f726576
   1f864:	5f554c41 	.word	0x5f554c41
   1f868:	76697244 	.word	0x76697244
   1f86c:	682f7265 	.word	0x682f7265
   1f870:	692f6c61 	.word	0x692f6c61
   1f874:	756c636e 	.word	0x756c636e
   1f878:	682f6564 	.word	0x682f6564
   1f87c:	775f6c61 	.word	0x775f6c61
   1f880:	682e7464 	.word	0x682e7464
   1f884:	00000000 	.word	0x00000000
   1f888:	656c6553 	.word	0x656c6553
   1f88c:	64657463 	.word	0x64657463
   1f890:	6e696c20 	.word	0x6e696c20
   1f894:	00003a65 	.word	0x00003a65
   1f898:	00000a0d 	.word	0x00000a0d
   1f89c:	2a2a2a2a 	.word	0x2a2a2a2a
   1f8a0:	66694c20 	.word	0x66694c20
   1f8a4:	75502065 	.word	0x75502065
   1f8a8:	2065736c 	.word	0x2065736c
   1f8ac:	69746341 	.word	0x69746341
   1f8b0:	65746176 	.word	0x65746176
   1f8b4:	2a2a2a64 	.word	0x2a2a2a64
   1f8b8:	0000002a 	.word	0x0000002a

0001f8bc <_ZTV10AMMC_Class>:
   1f8bc:	000002cc 000002bc 00000000 00000000     ................
   1f8cc:	00000c95 00000d35 000137ed 00000000     ....5....7......
   1f8dc:	00000000 fffffd44 00000000 00013009     ....D........0..
   1f8ec:	00012ed9 fffffd34 fffffd34 fffffff0     ....4...4.......
   1f8fc:	fffffd34 00000000 00000d09 00000d61     4...........a...
   1f90c:	00013855                                U8..

0001f910 <_ZTT10AMMC_Class>:
   1f910:	0001f8cc 0001f94c 0001f9a0 0001f9b8     ....L...........
   1f920:	0001f9d4 0001f968 0001f984 0001f8e8     ....h...........
   1f930:	0001f904 0001f9ec 0001fa08              ............

0001f93c <_ZTC10AMMC_Class0_15ARINC_Interface>:
   1f93c:	000002cc 000002bc 00000000 00000000     ................
	...
   1f954:	000137ed 00000000 00000000 fffffd44     .7..........D...
   1f964:	00000000 00013009 00012ed9 fffffd34     .....0......4...
   1f974:	fffffd34 fffffff0 fffffd34 00000000     4.......4.......
	...
   1f98c:	00013855                                U8..

0001f990 <_ZTC10AMMC_Class0_18ARINC_Buffer_Class>:
   1f990:	000002cc 000002bc 00000000 00000000     ................
	...
   1f9b0:	fffffd44 00000000 00013009 00012ed9     D........0......
   1f9c0:	00000000 fffffd34 fffffff0 fffffd34     ....4.......4...
	...
   1f9dc:	0001468b                                .F..

0001f9e0 <_ZTC10AMMC_Class716_14Protocol_Class>:
   1f9e0:	fffffff0 00000000 00000000 00000000     ................
   1f9f0:	00000000 0001468b 00000000 00000000     .....F..........
   1fa00:	00000010 00000000 00013009 00012ed9     .........0......

0001fa10 <factoryDefaultsConfiguration>:
   1fa10:	000000ac 00000004 0000070c 00000000     ................
   1fa20:	00000000 00000001 000003e8 000003e8     ................
   1fa30:	000003e8 00000000 00000000 00000000     ................
   1fa40:	3e051eb8 c4128000 42aa0000 42700000     ...>.......B..pB
   1fa50:	3e051eb8 c4128000 42960000 42480000     ...>.......B..HB
   1fa60:	3de147ae 3e0f5c29 3e2e147b c3f68000     .G.=)\.>{..>....
   1fa70:	c424c000 c444c000 43200000 42f00000     ..$...D... C...B
   1fa80:	425c0000 444f8000 428c0000 43200000     ..\B..OD...B.. C
   1fa90:	bc9ba5e3 41780000 3fbae148 42a00000     ......xAH..?...B
   1faa0:	41200000 41200000 00000014 00000078     .. A.. A....x...
   1fab0:	be23d70a 41d00000 00000078              ..#....Ax...

0001fabc <factoryDefaultsCycles>:
   1fabc:	000001c0 00000005 0000000c 00000024     ............$...
   1facc:	756e614d 00006c61 00000000 00000000     Manual..........
   1fadc:	00000000 00000001 00000258 0000000f     ........X.......
   1faec:	000004b0 63697551 7453206b 00747261     ....Quick Start.
	...
   1fb04:	00000001 00000258 0000001e 0000012c     ....X.......,...
   1fb14:	2030332b 73636573 00000000 00000000     +30 secs........
   1fb24:	00000000 00000001 000000f0 0000001e     ................
   1fb34:	0000001e 73657250 31207465 00000000     ....Preset 1....
	...
   1fb5c:	73657250 32207465 00000000 00000000     Preset 2........
	...
   1fb80:	73657250 33207465 00000000 00000000     Preset 3........
	...
   1fba4:	73657250 34207465 00000000 00000000     Preset 4........
	...
   1fbc8:	73657250 35207465 00000000 00000000     Preset 5........
	...
   1fbec:	73657250 36207465 00000000 00000000     Preset 6........
	...
   1fc10:	73657250 37207465 00000000 00000000     Preset 7........
	...
   1fc34:	73657250 38207465 00000000 00000000     Preset 8........
	...
   1fc58:	73657250 39207465 00000000 00000000     Preset 9........
	...
   1fc7c:	65736552 00000074 74696e49 696c6169     Reset...Initiali
   1fc8c:	0000657a 75736552 0000656d 6e617453     ze..Resume..Stan
   1fc9c:	4f796264 00004646 70657250 53657261     dbyOFF..PrepareS
   1fcac:	646e6174 4e4f7962 00000000 6e617453     tandbyON....Stan
   1fcbc:	4f796264 0000004e 6e617453 52796264     dbyON...StandbyR
   1fccc:	79646165 00000000 616c6544 00646579     eady....Delayed.
   1fcdc:	65746e49 70757272 00646574 00004e4f     Interrupted.ON..
   1fcec:	706f7453 50646570 65636f72 00007373     StoppedProcess..
   1fcfc:	61656c43 0070756e 696e6946 64656873     Cleanup.Finished
   1fd0c:	00000000 7065654b 00746f48 666c6553     ....KeepHot.Self
   1fd1c:	746f7250 00746365 6f727245 00000072     Protect.Error...
   1fd2c:	6e69614d 616e6574 0065636e 55494d48     Maintenance.HMIU
   1fd3c:	74616470 00000065 6d726946 65726177     pdate...Firmware
   1fd4c:	61647055 00006574 72727543 20746e65     Update..Current 
   1fd5c:	74617453 00000065 6c637943 75442065     State...Cycle Du
   1fd6c:	69746172 00006e6f 616d6552 6e696e69     ration..Remainin
   1fd7c:	69542067 0000656d 67726154 50207465     g Time..Target P
   1fd8c:	7265776f 00000000 00776f4e 6967614d     ower....Now.Magi
   1fd9c:	00000063                                c...

0001fda0 <defaultHVACState>:
   1fda0:	61626364 00000000 00000000 00000000     dcba............
	...
   1fe10:	00203a20 00007830 00000a0d               : .0x......

0001fe1c <_ZTV17ConfigState_Class>:
	...
   1fe24:	0001468b                                .F..

0001fe28 <_ZTV14DateTime_Class>:
	...
   1fe30:	00016cbd 00016dad 6e69614d 616e6574     .l...m..Maintena
   1fe40:	2065636e 6c6f6f54 636f4c20 0064656b     nce Tool Locked.
   1fe50:	00000a0d 6f6d6552 6f206574 61726570     ....Remote opera
   1fe60:	6e6f6974 73694420 656c6261 00000064     tion Disabled...
   1fe70:	49505351 6f725020 6d617267 61745320     QSPI Program Sta
   1fe80:	64657472 00000d0a 73616c46 61642068     rted....Flash da
   1fe90:	76206174 66697265 74616369 206e6f69     ta verification 
   1fea0:	6c696166 0a2e6465 0000000d 74696220     failed...... bit
   1feb0:	00003a20 00000a0d 74697257 202d2065      :......Write - 
   1fec0:	64616552 20736920 63637573 66737365     Read is successf
   1fed0:	69206c75 5351206e 46204950 6873616c     ul in QSPI Flash
   1fee0:	6d656d20 2079726f 00000000 202a2a2a      memory ....*** 
   1fef0:	72617453 20705574 6f676c41 68746972     StartUp Algorith
   1ff00:	206e656d 74736554 2a2a2a20 00000000     men Test ***....
   1ff10:	202a2a2a 65746144 0020203a 2074634f     *** Date:  .Oct 
   1ff20:	32203531 00303230 6d695420 00203a65     15 2020. Time: .
   1ff30:	343a3131 35323a33 00000000 202a2a2a     11:43:25....*** 
   1ff40:	20554c41 74696e69 65746169 2a2a2064     ALU initiated **
   1ff50:	0000002a 69746341 6c206576 3a656e69     *...Active line:
   1ff60:	00000020 73616c46 654d2068 79726f6d      ...Flash Memory
   1ff70:	6c655320 73655466 41502074 44455353      SelfTest PASSED
   1ff80:	00000000 00000a0d 73616c46 654d2068     ........Flash Me
   1ff90:	79726f6d 6c655320 73655466 41462074     mory SelfTest FA
   1ffa0:	44454c49 00000000 52504545 4d204d4f     ILED....EEPROM M
   1ffb0:	726f6d65 65532079 6554666c 50207473     emory SelfTest P
   1ffc0:	45535341 00000044 52504545 4d204d4f     ASSED...EEPROM M
   1ffd0:	726f6d65 65532079 6554666c 46207473     emory SelfTest F
   1ffe0:	454c4941 00000044 20726941 646e6f43     AILED...Air Cond
   1fff0:	6f697469 676e696e 73795320 206d6574     itioning System 
   20000:	7265704f 6e697461 00000067 00000a0d     Operating.......
   20010:	20726941 646e6f43 6f697469 676e696e     Air Conditioning
   20020:	73795320 206d6574 72617453 00646574      System Started.
   20030:	646e6168 4147656c 76454e49 20746e65     handleGAINEvent 
   20040:	65636572 64657669 7773203a 68637469     received: switch
   20050:	20676e69 6d6f7266 00000020 206f7420     ing from ... to 
   20060:	00000000 646e6168 7453656c 49657461     ....handleStateI
   20070:	6974696e 7a696c61 66203a65 7367616c     nitialize: flags
   20080:	203d3d20 00007830 646e6168 7453656c      == 0x..handleSt
   20090:	49657461 6974696e 7a696c61 00000065     ateInitialize...
   200a0:	646e6168 7453656c 53657461 646e6174     handleStateStand
   200b0:	464f7962 00000046 646e6168 7453656c     byOFF...handleSt
   200c0:	50657461 61706572 74536572 62646e61     atePrepareStandb
   200d0:	004e4f79 20726941 646e6f43 6f697469     yON.Air Conditio
   200e0:	676e696e 73795320 206d6574 706f7453     ning System Stop
   200f0:	00646570                                ped.

000200f4 <_ZTV12States_Class>:
	...
   200fc:	00003bd1 2e2f2e2e 7361542f 6e61486b     .;...././TaskHan
   2010c:	72656c64 616c435f 632e7373 00007070     dler_Class.cpp..
   2011c:	682f2e2e 702f6c70 2f74726f 5f6c7068     ../hpl/port/hpl_
   2012c:	6f697067 7361625f 00682e65 682f2e2e     gpio_base.h.../h
   2013c:	692f6c61 756c636e 682f6564 775f6c61     al/include/hal_w
   2014c:	682e7464 00000000 682f2e2e 732f6c61     dt.h....../hal/s
   2015c:	682f6372 635f6c61 6e656c61 2e726164     rc/hal_calendar.
   2016c:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
   2017c:	635f6c61 615f6e61 636e7973 0000632e     al_can_async.c..
   2018c:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
   2019c:	735f6372 2e636e79 00000063 682f2e2e     rc_sync.c...../h
   201ac:	732f6c61 682f6372 695f6c61 6d5f6332     al/src/hal_i2c_m
   201bc:	7973615f 632e636e 00000000 682f2e2e     _async.c....../h
   201cc:	732f6c61 682f6372 695f6c61 6d5f6332     al/src/hal_i2c_m
   201dc:	6e79735f 00632e63 682f2e2e 732f6c61     _sync.c.../hal/s
   201ec:	682f6372 705f6c61 632e6d77 00000000     rc/hal_pwm.c....
   201fc:	682f2e2e 732f6c61 682f6372 715f6c61     ../hal/src/hal_q
   2020c:	5f697073 636e7973 0000632e 682f2e2e     spi_sync.c..../h
   2021c:	732f6c61 682f6372 735f6c61 6d5f6970     al/src/hal_spi_m
   2022c:	7973615f 632e636e 00000000 682f2e2e     _async.c....../h
   2023c:	732f6c61 682f6372 735f6c61 6d5f6970     al/src/hal_spi_m
   2024c:	6e79735f 00632e63 682f2e2e 732f6c61     _sync.c.../hal/s
   2025c:	682f6372 745f6c61 72656d69 0000632e     rc/hal_timer.c..
   2026c:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
   2027c:	6974752f 6c5f736c 2e747369 00000063     /utils_list.c...

0002028c <_map>:
   2028c:	00000000 00000040 00000004 00000004     ....@...........
   2029c:	00000005 00000005 00000006 00000056     ............V...
   202ac:	00000007 00000057 00000008 00000028     ....W.......(...
   202bc:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   202cc:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

000202dc <user_mux_confs>:
   202dc:	00020100 00000000 00000000 00000000     ................
	...

00020320 <channel_confs>:
   20320:	0660065f 00000000 00000000 00000000     _.`.............
	...

00020360 <interrupt_cfg>:
	...
   203e0:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
   203f0:	632e6361 00000000 682f2e2e 712f6c70     ac.c....../hpl/q
   20400:	2f697073 5f6c7068 69707371 0000632e     spi/hpl_qspi.c..
   20410:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
   20420:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
   20430:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   20440:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
   20450:	41014000 43000000 43000400 43000800     .@.A...C...C...C
   20460:	43000c00                                ...C

00020464 <sercomspi_regs>:
   20464:	0020008c 00020000 00000000 01ff0063     .. .........c...
   20474:	20000c01 02000000 00000000 ff000400     ... ............
   20484:	000c0401 00000030 00000002 00ef0000     ....0...........
   20494:	000601ff 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   204a4:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   204b4:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   204c4:	43001400 43001800                       ...C...C

000204cc <_usb_ep_cfgs>:
   204cc:	20008ae8 00000000 00000040 20008b28     ... ....@...(.. 
   204dc:	20008b68 00400040 20008ba8 20008be8     h.. @.@.... ... 
   204ec:	00400040 20008c28 20008c68 00400040     @.@.(.. h.. @.@.
   204fc:	20008ca8 20008ce8 00400040 00000804     ... ... @.@.....
   2050c:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   2051c:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   2052c:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   2053c:	7361625f 00682e65                       _base.h.

00020544 <n25q256a_interface>:
   20544:	000110ed 00011191 000112a1 00011459     ............Y...
   20554:	000114e9 752f2e2e 642f6273 63697665     ....../usb/devic
   20564:	73752f65 2e636462 00000063              e/usbdc.c...

00020570 <_ZTV17ARINC_Conversions>:
	...
   20578:	00013009 00012ed9                       .0......

00020580 <_ZL5Mesg1>:
   20580:	4e495241 614c2043 3a6c6562 00000020     ARINC Label: ...

00020590 <_ZL5Mesg2>:
   20590:	61746144 0000203a                       Data: ..

00020598 <_ZL10HexToAscii>:
   20598:	33323130 37363534 42413938 46454443     0123456789ABCDEF

000205a8 <_ZL11HistoryMesg>:
   205a8:	74736948 2079726f 4f464946 0000203a     History FIFO: ..
   205b8:	49480d0a 3935332d 61662033 64656c69     ..HI-3593 failed
   205c8:	206f7420 74696e49 7a696c69 000d0a65      to Initilize...
   205d8:	2d0a0d0a 68202d2d 41203273 434e4952     ...--- hs2 ARINC
   205e8:	746e4920 61667265 20206563 2d2d2d2d      Interface  ----
   205f8:	00000d0a 2d2d0a72 6f67212d 656d2074     ....r.---!got me
   20608:	67617373 2d2d2165 00002d2d 61727420     ssage!----.. tra
   20618:	696d736e 6e697474 2e2e2e67 00000000     nsmitting.......
   20628:	61725420 696d736e 64657474 00000021      Transmitted!...
   20638:	0000003e 72540d0a 6d736e61 26207469     >.....Transmit &
   20648:	63655220 65766965 74695720 614c2068      Receive With La
   20658:	736c6562 646f4d20 000d0a65 45530d0a     bels Mode.....SE
   20668:	542d464c 2c545345 746e4920 616e7265     LF-TEST, Interna
   20678:	6944206c 61746967 6f4c206c 622d706f     l Digital Loop-b
   20688:	2c6b6361 206f4e20 61746164 20736920     ack, No data is 
   20698:	6e617274 74696d73 20646574 65747865     transmitted exte
   206a8:	6c616e72 0d0a796c 00000000 6f200d0a     rnally........ o
   206b8:	6154206e 20656c62 6562616c 6120736c     n Table labels a
   206c8:	45206572 6c62616e 00006465 500a0d0a     re Enabled.....P
   206d8:	73736572 2d575320 6f742031 61747320     ress SW-1 to sta
   206e8:	69207472 6974696e 796c6c61 000a0d0a     rt initially....
   206f8:	202d2d2d 74747542 43206e6f 616d6d6f     --- Button Comma
   20708:	2073646e 0a2d2d2d 0000000d 70532020     nds ---.....  Sp
   20718:	20656361 20726142 44206f74 6c707369     ace Bar to Displ
   20728:	53207961 75746174 6e612073 6f432064     ay Status and Co
   20738:	6f72746e 6552206c 74736967 0a737265     ntrol Registers.
   20748:	0000000d 20702020 50206f74 65737561     ....  p to Pause
   20758:	00000d0a 206d2020 44206f74 6c707369     ....  m to Displ
   20768:	4c207961 6c656261 6d654d20 0079726f     ay Label Memory.
   20778:	003e0d0a 72540d0a 6d736e61 69747469     ..>...Transmitti
   20788:	0d0a676e 0000003e 49480d0a 3935332d     ng..>.....HI-359
   20798:	74532033 73757461 6f43202c 6f72746e     3 Status, Contro
   207a8:	6552206c 74736967 0d737265 0000000a     l Registers.....
   207b8:	20090d0a 2a2a2a20 50202a2a 73736572     ...  ***** Press
   207c8:	70732020 62656361 74207261 6f63206f       spacebar to co
   207d8:	6e69746e 2a206575 2a2a2a2a 0000002a     ntinue ******...
   207e8:	540d0a0a 736e6172 2074696d 73756150     ...Transmit Paus
   207f8:	0d0a6465 00000000 72500d0a 20737365     ed........Press 
   20808:	44454c4f 5455425f 2d4e4f54 6f742032     OLED_BUTTON-2 to
   20818:	61727420 696d736e 6e6f2074 72662065      transmit one fr
   20828:	20656d61 20646e61 73756170 000d0a65     ame and pause...
   20838:	72500d0a 20737365 44454c4f 5455425f     ..Press OLED_BUT
   20848:	2d4e4f54 6f742033 73655220 0a656d75     TON-3 to Resume.
   20858:	0000000d 72540d0a 6d736e61 65747469     ......Transmitte
   20868:	65522072 656d7573 2e2e2e64 00000d0a     r Resumed.......
   20878:	65520d0a 76696563 31207265 62614c20     ..Receiver 1 Lab
   20888:	0a736c65 0000000d 65520d0a 76696563     els.......Receiv
   20898:	32207265 62614c20 0a736c65 0000000d     er 2 Labels.....
   208a8:	72540d0a 6d736e61 26207469 63655220     ..Transmit & Rec
   208b8:	65766965 68634520 6f4d206f 0d0a6564     eive Echo Mode..
   208c8:	00000000 6c530d0a 5320776f 64656570     ......Slow Speed
   208d8:	00000000 61460d0a 53207473 64656570     ......Fast Speed
   208e8:	00000000 72540d0a 6d736e61 65747469     ......Transmitte
   208f8:	61502072 79746972 616e4520 64656c62     r Parity Enabled
   20908:	00000000 49480d0a 3935332d 61662033     ......HI-3593 fa
   20918:	64656c69 206f7420 74696e69 7a696c69     iled to initiliz
   20928:	000d0a65 61540d0a 20656c62 6562616c     e.....Table labe
   20938:	6120736c 45206572 6c62616e 00006465     ls are Enabled..
   20948:	2d0a0d0a 43202d2d 6f736e6f 4320656c     ...--- Console C
   20958:	616d6d6f 2073646e 706c6548 2d2d2d20     ommands Help ---
   20968:	00000000 20502020 6150203d 79746972     ....  P = Parity
   20978:	676f5420 20656c67 6f2f6e6f 00006666      Toggle on/off..
   20988:	20542020 4654203d 2050494c 676f5420       T = TFLIP  Tog
   20998:	20656c67 6f2f6e6f 00006666 20522020     gle on/off..  R 
   209a8:	4652203d 2050494c 676f5420 20656c67     = RFLIP  Toggle 
   209b8:	6f2f6e6f 00006666 20532020 4453203d     on/off..  S = SD
   209c8:	202c4e4f 2c394453 31445320 6f542030     ON, SD9, SD10 To
   209d8:	656c6767 2f6e6f20 0066666f 20482020     ggle on/off.  H 
   209e8:	6854203d 48207369 20706c65 65676150     = This Help Page
   209f8:	00000000 70532020 20656361 20726142     ....  Space Bar 
   20a08:	6944203d 616c7073 74532079 73757461     = Display Status
   20a18:	646e6120 6e6f4320 6c6f7274 67657220      and Control reg
   20a28:	00000073 20492020 6e49203d 6d657263     s...  I = Increm
   20a38:	20746e65 7373654d 20656761 20646e61     ent Message and 
   20a48:	6e617254 74696d73 7845202e 726f6c70     Transmit. Explor
   20a58:	4d207265 2065646f 4f202d20 21594c4e     er Mode  - ONLY!
   20a68:	00000000 204d2020 6e45203d 20726574     ....  M = Enter 
   20a78:	74737543 4d206d6f 61737365 202e6567     Custom Message. 
   20a88:	6c707845 7265726f 646f4d20 2d202065     Explorer Mode  -
   20a98:	4c4e4f20 00002159 4e452020 3d524554      ONLY!..  ENTER=
   20aa8:	61725420 696d736e 656e2074 6d207478      Transmit next m
   20ab8:	61737365 202e6567 6c707845 7265726f     essage. Explorer
   20ac8:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
   20ad8:	00207830 30307826 00002030 50205854     0x .&x000 ..TX P
   20ae8:	74697261 52412079 5f434e49 0d0a4e4f     arity ARINC_ON..
   20af8:	0000003e 50205854 74697261 52412079     >...TX Parity AR
   20b08:	5f434e49 0a46464f 00003e0d 494c4654     INC_OFF..>..TFLI
   20b18:	65532050 3e0d0a74 00000000 494c4654     P Set..>....TFLI
   20b28:	6c432050 65726165 3e0d0a64 00000000     P Cleared..>....
   20b38:	2d434552 46522031 2050494c 0a746553     REC-1 RFLIP Set.
   20b48:	00003e0d 2d434552 46522031 2050494c     .>..REC-1 RFLIP 
   20b58:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
   20b68:	46522032 2050494c 0a746553 00003e0d     2 RFLIP Set..>..
   20b78:	2d434552 46522032 2050494c 61656c43     REC-2 RFLIP Clea
   20b88:	0a646572 00003e0d 2d434552 44532031     red..>..REC-1 SD
   20b98:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   20ba8:	0a746553 00003e0d 2d434552 44532031     Set..>..REC-1 SD
   20bb8:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   20bc8:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
   20bd8:	44532032 532c4e4f 61203944 5320646e     2 SDON,SD9 and S
   20be8:	20303144 0a746553 00003e0d 2d434552     D10 Set..>..REC-
   20bf8:	44532032 532c4e4f 61203944 5320646e     2 SDON,SD9 and S
   20c08:	20303144 61656c43 0a646572 00003e0d     D10 Cleared..>..
   20c18:	500a0d0a 73736572 61705320 42206563     ...Press Space B
   20c28:	6f207261 57532072 7420342d 6572206f     ar or SW-4 to re
   20c38:	656d7573 00000000 6562614c 2020736c     sume....Labels  
   20c48:	202d2030 203a3336 00000020 00000020     0 - 63:  ... ...
   20c58:	614c0d0a 736c6562 34362020 3732312d     ..Labels  64-127
   20c68:	0020203a 614c0d0a 736c6562 38323120     :  ...Labels 128
   20c78:	3139312d 0020203a 614c0d0a 736c6562     -191:  ...Labels
   20c88:	32393120 3535322d 0020203a 614c0d0a      192-255:  ...La
   20c98:	736c6562 20302020 3336202d 0020203a     bels  0 - 63:  .
   20ca8:	543e0d0a 20202058 74614420 00003a61     ..>TX    Data:..
   20cb8:	6562614c 00003a6c 2d636552 61442031     Label:..Rec-1 Da
   20cc8:	003a6174 2d314c50 61442031 003a6174     ta:.PL1-1 Data:.
   20cd8:	6374614d 00003a68 2d314c50 61442032     Match:..PL1-2 Da
   20ce8:	003a6174 2d314c50 61442033 003a6174     ta:.PL1-3 Data:.
   20cf8:	2d636552 61442032 003a6174 2d324c50     Rec-2 Data:.PL2-
   20d08:	61442031 003a6174 2d324c50 61442032     1 Data:.PL2-2 Da
   20d18:	003a6174 2d324c50 61442033 003a6174     ta:.PL2-3 Data:.
   20d28:	00000d0a 78450d0a 726f6c70 4d207265     ......Explorer M
   20d38:	0a65646f 0000000d 6c200d0a 6c656261     ode....... label
   20d48:	61542073 20656c62 45207369 6c62616e     s Table is Enabl
   20d58:	00006465 2d0a0d0a 42202d2d 6f747475     ed.....--- Butto
   20d68:	6f43206e 6e616d6d 2d207364 00002d2d     n Commands ---..
   20d78:	20200d0a 63617073 72616265 206f7420     ..  spacebar to 
   20d88:	70736944 2079616c 74617453 61207375     Display Status a
   20d98:	4320646e 72746e6f 52206c6f 73696765     nd Control Regis
   20da8:	73726574 00000000 20200d0a 44454c4f     ters......  OLED
   20db8:	5455422d 324e4f54 61727420 696d736e     -BUTTON2 transmi
   20dc8:	6e6f2074 656d2065 67617373 72662065     t one message fr
   20dd8:	74206d6f 736e6172 2074696d 66667562     om transmit buff
   20de8:	00007265 20200d0a 6f74204c 69725020     er....  L to Pri
   20df8:	4c20746e 6c656261 6d654d20 0a79726f     nt Label Memory.
   20e08:	0000000d 72500d0a 20737365 45544e45     ......Press ENTE
   20e18:	6f742052 61725420 696d736e 726f2074     R to Transmit or
   20e28:	65737520 65687420 294d2820 6d6f6320      use the (M) com
   20e38:	646e616d 206f7420 65746e65 20612072     mand to enter a 
   20e48:	74737563 6d206d6f 61737365 00006567     custom message..
   20e58:	73657250 57532073 726f2034 61707320     Press SW4 or spa
   20e68:	61626563 6f742072 6e6f6320 756e6974     cebar to continu
   20e78:	00000065 73657250 70732073 62656361     e...Press spaceb
   20e88:	74207261 6f63206f 6e69746e 00006575     ar to continue..
   20e98:	433e0d0a 616d6d6f 4d20646e 00000000     ..>Command M....
   20ea8:	6e450d0a 20726574 79622033 20736574     ..Enter 3 bytes 
   20eb8:	414c202b 204c4542 54206f74 736e6172     + LABEL to Trans
   20ec8:	2074696d 6c6c6f66 6465776f 20796220     mit followed by 
   20ed8:	45544e45 000d0a52 6f540d0a 61725420     ENTER.....To Tra
   20ee8:	696d736e 65202c74 7265746e 62203320     nsmit, enter 3 b
   20ef8:	73657479 6c6f6620 65776f6c 79622064     ytes followed by
   20f08:	4c206120 6c656261 74796220 6f662065      a Label byte fo
   20f18:	776f6c6c 62206465 4e452079 0a524554     llowed by ENTER.
   20f28:	0000000d 6d726f46 203a7461 73746942     ....Format: Bits
   20f38:	322d3233 42202c35 32737469 37312d34     32-25, Bits24-17
   20f48:	6942202c 36317374 202c392d 4542414c     , Bits16-9, LABE
   20f58:	3a0d0a4c 00000000 6d617845 3a656c70     L..:....Example:
   20f68:	20313020 34203332 37362035 544e4520      01 23 45 67 ENT
   20f78:	0d0a5245 0000003a 65725020 52207373     ER..:... Press R
   20f88:	52555445 0000004e 61725420 696d736e     ETURN... Transmi
   20f98:	676e6974 002e2e2e 61725420 696d736e     ting.... Transmi
   20fa8:	21646574 00000000 6d6d6f43 20646e61     ted!....Command 
   20fb8:	49203a49 6572636e 746e656d 74616420     I: Increment dat
   20fc8:	3e0d0a61 00000000                       a..>....

00020fd0 <_ZTV15ARINC_Interface>:
   20fd0:	000002c8 000002b8 00000000 00000000     ................
   20fe0:	00013475 00013525 000137ed 00000000     u4..%5...7......
   20ff0:	00000000 fffffd48 00000000 00013009     ....H........0..
   21000:	00012ed9 fffffd38 fffffd38 fffffff0     ....8...8.......
   21010:	fffffd38 00000000 000134f9 00013551     8........4..Q5..
   21020:	00013855                                U8..

00021024 <_ZTT15ARINC_Interface>:
   21024:	00020fe0 00021054 0002106c 00021088     ....T...l.......
   21034:	00020ffc 00021018 000210a0 000210bc     ................

00021044 <_ZTC15ARINC_Interface0_18ARINC_Buffer_Class>:
   21044:	000002c8 000002b8 00000000 00000000     ................
	...
   21064:	fffffd48 00000000 00013009 00012ed9     H........0......
   21074:	00000000 fffffd38 fffffff0 fffffd38     ....8.......8...
	...
   21090:	0001468b                                .F..

00021094 <_ZTC15ARINC_Interface712_14Protocol_Class>:
   21094:	fffffff0 00000000 00000000 00000000     ................
   210a4:	00000000 0001468b 00000000 00000000     .....F..........
   210b4:	00000010 00000000 00013009 00012ed9     .........0......

000210c4 <_ZL12LabelArray_1>:
   210c4:	c1215d1d 9616efdd 3f5f9f0d bd00ffdf     .]!......._?....
	...
   210e4:	636e7546 6e6f6974 65786520 65747563     Function execute
   210f4:	75732064 73656363 6c756673 0000796c     d successfully..
   21104:	63656843 6f79206b 77207275 6e697269     Check your wirin
   21114:	46202e67 6873616c 69686320 73692070     g. Flash chip is
   21124:	6e6f6e20 7365722d 736e6f70 2e657669      non-responsive.
   21134:	00000000 6e6f632a 75727473 726f7463     ....*constructor
   21144:	5f666f5f 696f6863 2e2a6563 69676562     _of_choice*.begi
   21154:	2029286e 20736177 20746f6e 6c6c6163     n() was not call
   21164:	69206465 6f76206e 73206469 70757465     ed in void setup
   21174:	00002928 62616e55 7420656c 6469206f     ()..Unable to id
   21184:	69746e65 63207966 2e706968 65724120     entify chip. Are
   21194:	756f7920 72757320 68742065 63207369      you sure this c
   211a4:	20706968 73207369 6f707075 64657472     hip is supported
   211b4:	0000003f 62616e55 7420656c 6469206f     ?...Unable to id
   211c4:	69746e65 63207966 63617061 2e797469     entify capacity.
   211d4:	20734920 73696874 69686320 666f2070      Is this chip of
   211e4:	69636966 796c6c61 70757320 74726f70     ficially support
   211f4:	203f6465 6e206649 202c746f 61656c70     ed? If not, plea
   21204:	64206573 6e696665 20612065 50414360     se define a `CAP
   21214:	54494341 63206059 74736e6f 20746e61     ACITY` constant 
   21224:	20646e61 6c636e69 20656475 69207469     and include it i
   21234:	6c66206e 2e687361 69676562 4143286e     n flash.begin(CA
   21244:	49434150 2e295954 00000000 70696843     PACITY).....Chip
   21254:	20736920 79737562 0000002e 656b614d      is busy....Make
   21264:	72757320 6c612065 6970206c 6820736e      sure all pins h
   21274:	20657661 6e656562 6e6f6320 7463656e     ave been connect
   21284:	70206465 65706f72 00796c72 65676150     ed properly.Page
   21294:	65766f20 6f6c6672 61682077 65622073      overflow has be
   212a4:	64206e65 62617369 2064656c 20646e61     en disabled and 
   212b4:	20656874 72646461 20737365 6c6c6163     the address call
   212c4:	65206465 65656378 74207364 6d206568     ed exceeds the m
   212d4:	726f6d65 00000079 62616e55 7420656c     emory...Unable t
   212e4:	6e45206f 656c6261 69725720 676e6974     o Enable Writing
   212f4:	206f7420 70696863 0000002e 61656c50      to chip....Plea
   21304:	6d206573 20656b61 65727573 65687420     se make sure the
   21314:	4c4f4820 20262044 54495257 4f525045      HOLD & WRITEPRO
   21324:	54434554 6e697020 72612073 75702065     TECT pins are pu
   21334:	64656c6c 20707520 56206f74 00004343     lled up to VCC..
   21344:	73696854 63657320 20726f74 65726c61     This sector alre
   21354:	20796461 746e6f63 736e6961 74616420     ady contains dat
   21364:	00002e61 61656c50 6d206573 20656b61     a...Please make 
   21374:	65727573 65687420 63657320 73726f74     sure the sectors
   21384:	69656220 7720676e 74746972 74206e65      being written t
   21394:	7261206f 72652065 64657361 0000002e     o are erased....
   213a4:	20756f59 20657261 6e6e7572 20676e69     You are running 
   213b4:	20776f6c 53206e6f 2e4d4152 656c5020     low on SRAM. Ple
   213c4:	20657361 6974706f 6573696d 756f7920     ase optimise you
   213d4:	72702072 6172676f 6f66206d 65622072     r program for be
   213e4:	72657474 4d415220 61737520 00006567     tter RAM usage..
   213f4:	73696854 6e756620 6f697463 7369206e     This function is
   21404:	746f6e20 70757320 74726f70 62206465      not supported b
   21414:	68742079 6c662065 20687361 6f6d656d     y the flash memo
   21424:	68207972 77647261 2e657261 00000000     ry hardware.....
   21434:	62616e55 7420656c 7573206f 6e657073     Unable to suspen
   21444:	65722f64 656d7573 65706f20 69746172     d/resume operati
   21454:	002e6e6f 74697257 75462065 6974636e     on..Write Functi
   21464:	68206e6f 66207361 656c6961 72652064     on has failed er
   21474:	63726f72 6b636568 0000002e 62616e55     rorcheck....Unab
   21484:	7420656c 6e65206f 656c6261 622d3420     le to enable 4-b
   21494:	20657479 72646461 69737365 002e676e     yte addressing..
   214a4:	62616e55 7420656c 6964206f 6c626173     Unable to disabl
   214b4:	2d342065 65747962 64646120 73736572     e 4-byte address
   214c4:	2e676e69 00000000 20656854 70696863     ing.....The chip
   214d4:	20736920 72727563 6c746e65 6f702079      is currently po
   214e4:	65726577 6f642064 002e6e77 20656854     wered down..The 
   214f4:	73616c46 68632068 64207069 2073656f     Flash chip does 
   21504:	20746f6e 70707573 2074726f 50444653     not support SFDP
   21514:	0000002e 62616e55 7420656c 6572206f     ....Unable to re
   21524:	45206461 65736172 72615020 74656d61     ad Erase Paramet
   21534:	20737265 6d6f7266 69686320 52202e70     ers from chip. R
   21544:	72657665 676e6974 206f7420 7262696c     everting to libr
   21554:	20797261 61666564 73746c75 0000002e     ary defaults....
   21564:	62616e55 7420656c 6572206f 65206461     Unable to read e
   21574:	65736172 6d697420 66207365 206d6f72     rase times from 
   21584:	73616c66 656d2068 79726f6d 6552202e     flash memory. Re
   21594:	74726576 20676e69 6c206f74 61726269     verting to libra
   215a4:	64207972 75616665 2e73746c 00000000     ry defaults.....
   215b4:	62616e55 7420656c 6572206f 70206461     Unable to read p
   215c4:	72676f72 74206d61 73656d69 6f726620     rogram times fro
   215d4:	6c66206d 20687361 6f6d656d 202e7972     m flash memory. 
   215e4:	65766552 6e697472 6f742067 62696c20     Reverting to lib
   215f4:	79726172 66656420 746c7561 00002e73     rary defaults...
   21604:	43206f4e 20706968 656c6553 70207463     No Chip Select p
   21614:	64206e69 6e696665 69206465 6874206e     in defined in th
   21624:	75632065 6d6f7473 49505320 72724120     e custom SPI Arr
   21634:	002e7961 6e6b6e55 206e776f 6f727265     ay..Unknown erro
   21644:	00000072 6f727245 6f632072 203a6564     r...Error code: 
   21654:	00007830 00000030 74206649 20736968     0x..0...If this 
   21664:	73656f64 746f6e20 6c656820 65722070     does not help re
   21674:	766c6f73 6c632f65 66697261 68742079     solve/clarify th
   21684:	69207369 65757373 0000202c 61656c70     is issue, ..plea
   21694:	72206573 65736961 206e6120 75737369     se raise an issu
   216a4:	74612065 74746820 2f2f3a70 2e777777     e at http://www.
   216b4:	2d327368 69676e65 7265656e 2e676e69     hs2-engineering.
   216c4:	692f6564 7865646e 7068702e 6e6f632f     de/index.php/con
   216d4:	74636174 6d74682e 6977206c 74206874     tact.html with t
   216e4:	64206568 69617465 6f20736c 68772066     he details of wh
   216f4:	79207461 2072756f 65726577 696f6420     at your were doi
   21704:	7720676e 206e6568 73696874 72726520     ng when this err
   21714:	6f20726f 72756363 00646572              or occurred.

00021720 <maxEventCount>:
   21720:	00800008                                         ..

00021722 <sizeOfEventQueue>:
   21722:	ffff0080                                         ..

00021724 <forever>:
   21724:	7fffffff 492f2e2e 492f4332 4f5f4332     ....../I2C/I2C_O
   21734:	63656a62 73694c74 70632e74 00000070     bjectList.cpp...
   21744:	2e2f2e2e 2e2e2f2e 554c412f 6972445f     ../../../ALU_Dri
   21754:	2f726576 5f554c41 76697244 682f7265     ver/ALU_Driver/h
   21764:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   21774:	7361625f 00682e65                       _base.h.

0002177c <defaultParameters>:
   2177c:	00000082                                ....

00021780 <defaultPreferences>:
   21780:	000000fa 00000032                       ....2...

00021788 <_ZTV14Calendar_Class>:
	...
   21790:	00016cbd 00016dad                       .l...m..

00021798 <_ZTV17DateTimeLog_Class>:
	...
   217a0:	0001468b 0001468b                       .F...F..

000217a8 <_ZTV9CDC_Class>:
	...
   217b0:	00017b39 00017c19 00017795 00017b01     9{...|...w...{..
   217c0:	00017cb1 00017ac5 000179a9 000179f9     .|...z...y...y..
   217d0:	00017b21 00017b81                       !{...{..

000217d8 <_ZTV6Stream>:
	...
   217e0:	0001468b 00017d81 00017795 000177a9     .F...}...w...w..
   217f0:	0001468b 0001468b 0001468b 2e257830     .F...F...F..0x%.
   21800:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   21810:	0066766f                                ovf.

00021814 <_ZTV5Print>:
	...
   2181c:	0001468b 00017d81 00017795 000177a9     .F...}...w...w..
   2182c:	2a2a2a0a 2a2a2a2a 2a2a2a2a 2a2a2a2a     .***************
   2183c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2184c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2185c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2186c:	0a2a2a2a 0000000d 43544c20 33383932     ***..... LTC2983
   2187c:	6d654420 74736e6f 69746172 50206e6f      Demonstration P
   2188c:	72676f72 20206d61 20202020 20202020     rogram          
   2189c:	20202020 20202020 20202020 00000d0a                 ....
   218ac:	20202020 20202020 20202020 20202020                     
   218bc:	20202020 20202020 20202020 20202020                     
   218cc:	20202020 20202020 20202020 20202020                     
   218dc:	20202020 20202020 20202020 20202020                     
   218ec:	00000d0a 69685420 72702073 6172676f     .... This progra
   218fc:	6564206d 736e6f6d 74617274 68207365     m demonstrates h
   2190c:	7420776f 6572206f 74206461 6d206568     ow to read the m
   2191c:	69746c75 6e65732d 20726f73 20202020     ulti-sensor     
   2192c:	20202020 00000d0a 6d657420 61726570         .... tempera
   2193c:	65727574 61656d20 65727573 746e656d     ture measurement
   2194c:	73797320 2e6d6574 20202020 20202020      system.        
   2195c:	20202020 20202020 20202020 20202020                     
   2196c:	20202020 20202020 00000d0a 74655320             .... Set
   2197c:	65687420 75616220 61722064 74206574      the baud rate t
   2198c:	3131206f 30303235 646e6120 6c657320     o 115200 and sel
   2199c:	20746365 20656874 6c77656e 20656e69     ect the newline 
   219ac:	6d726574 74616e69 202e726f 00000d0a     terminator. ....
   219bc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   219cc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   219dc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   219ec:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   219fc:	0d0a2a2a 00000000 6168430a 6c656e6e     **.......Channel
   21a0c:	6e6f4320 20676966 00000000 69676572      Config ....regi
   21a1c:	72657473 6c617620 203a6575 00000000     ster value: ....
   21a2c:	6168430a 6c656e6e 00000020 65542020     .Channel ...  Te
   21a3c:	7265706d 72757461 203d2065 00000000     mperature = ....
   21a4c:	69442020 74636572 43444120 61657220       Direct ADC rea
   21a5c:	676e6964 206e6920 203d2056 00000000     ding in V = ....
   21a6c:	6f562020 6761746c 726f2065 73657220       Voltage or res
   21a7c:	61747369 2065636e 0000203d 41462020     istance = ..  FA
   21a8c:	20544c55 41544144 00203d20 202d2020     ULT DATA = .  - 
   21a9c:	534e4553 4820524f 20445241 554c4146     SENSOR HARD FALU
   21aac:	00004552 202d2020 5f434441 44524148     RE..  - ADC_HARD
   21abc:	4941465f 4552554c 00000000 202d2020     _FAILURE....  - 
   21acc:	485f4a43 5f445241 4c494146 00455255     CJ_HARD_FAILURE.
   21adc:	202d2020 535f4a43 5f54464f 4c494146       - CJ_SOFT_FAIL
   21aec:	00455255 202d2020 534e4553 415f524f     URE.  - SENSOR_A
   21afc:	45564f42 00000000 202d2020 534e4553     BOVE....  - SENS
   21b0c:	425f524f 574f4c45 00000000 202d2020     OR_BELOW....  - 
   21b1c:	5f434441 474e4152 52455f45 00524f52     ADC_RANGE_ERROR.
   21b2c:	41564e49 2044494c 44414552 20474e49     INVALID READING 
   21b3c:	21212121 00002121 464e4f43 52554749     !!!!!!..CONFIGUR
   21b4c:	4f495441 5245204e 20524f52 21212121     ATION ERROR !!!!
   21b5c:	00002121 682f2e2e 732f6c61 682f6372     !!..../hal/src/h
   21b6c:	695f6c61 00632e6f 00776f70              al_io.c.pow.

00021b78 <TWO52>:
   21b78:	00000000 43300000 00000000 c3300000     ......0C......0.

00021b88 <_global_impure_ptr>:
   21b88:	20000250                                P.. 

00021b8c <__month_lengths>:
   21b8c:	0000001f 0000001c 0000001f 0000001e     ................
   21b9c:	0000001f 0000001e 0000001f 0000001f     ................
   21bac:	0000001e 0000001f 0000001e 0000001f     ................
   21bbc:	0000001f 0000001d 0000001f 0000001e     ................
   21bcc:	0000001f 0000001e 0000001f 0000001f     ................
   21bdc:	0000001e 0000001f 0000001e 0000001f     ................
   21bec:	00005a54 00544d47 5b303125 392d305e     TZ..GMT.%10[^0-9
   21bfc:	5d2d2b2c 00006e25 25756825 68253a6e     ,+-]%n..%hu%n:%h
   21c0c:	3a6e2575 25756825 0000006e 7568254d     u%n:%hu%n...M%hu
   21c1c:	252e6e25 6e257568 7568252e 00006e25     %n.%hu%n.%hu%n..
   21c2c:	7568252f 253a6e25 6e257568 7568253a     /%hu%n:%hu%n:%hu
   21c3c:	00006e25 73332e25 332e2520 64332573     %n..%.3s %.3s%3d
   21c4c:	322e2520 2e253a64 253a6432 2064322e      %.2d:%.2d:%.2d 
   21c5c:	000a6425                                %d..

00021c60 <day_name.4727>:
   21c60:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   21c70:	61536972 00000074                       riSat...

00021c78 <mon_name.4728>:
   21c78:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   21c88:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   21c98:	63654476 33323130 37363534 42413938     vDec0123456789AB
   21ca8:	46454443 00000000 33323130 37363534     CDEF....01234567
   21cb8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   21cc8:	0000296c                                l)..

00021ccc <blanks.7203>:
   21ccc:	20202020 20202020 20202020 20202020                     

00021cdc <zeroes.7204>:
   21cdc:	30303030 30303030 30303030 30303030     0000000000000000

00021cec <basefix.6796>:
   21cec:	0001000a 00030002 00050004 00070006     ................
   21cfc:	00090008 000b000a 000d000c 000f000e     ................
   21d0c:	00000010 00000043 49534f50 00000058     ....C...POSIX...
   21d1c:	0000002e                                ....

00021d20 <_ctype_>:
   21d20:	20202000 20202020 28282020 20282828     .         ((((( 
   21d30:	20202020 20202020 20202020 20202020                     
   21d40:	10108820 10101010 10101010 10101010      ...............
   21d50:	04040410 04040404 10040404 10101010     ................
   21d60:	41411010 41414141 01010101 01010101     ..AAAAAA........
   21d70:	01010101 01010101 01010101 10101010     ................
   21d80:	42421010 42424242 02020202 02020202     ..BBBBBB........
   21d90:	02020202 02020202 02020202 10101010     ................
   21da0:	00000020 00000000 00000000 00000000      ...............
	...

00021e24 <_init>:
   21e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e26:	bf00      	nop
   21e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
   21e2a:	bc08      	pop	{r3}
   21e2c:	469e      	mov	lr, r3
   21e2e:	4770      	bx	lr

00021e30 <__init_array_start>:
   21e30:	0001c4b5 	.word	0x0001c4b5

00021e34 <__frame_dummy_init_array_entry>:
   21e34:	00000289 00000bd9 00000e21 00000ec5     ........!.......
   21e44:	00001315 000015cd 00001b4d 00001fe1     ........M.......
   21e54:	000022b9 00002705 00002c01 00003e69     ."...'...,..i>..
   21e64:	00013c71 00014985 00014dc5 000154ed     q<...I...M...T..
   21e74:	00015955 00015fdd 000168ad 00016ff9     UY..._...h...o..
   21e84:	0001775d 00017d31 000182b5 00018651     ]w..1}......Q...
   21e94:	00018dcd 000190c1 000193b5              ............

00021ea0 <_fini>:
   21ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ea2:	bf00      	nop
   21ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   21ea6:	bc08      	pop	{r3}
   21ea8:	469e      	mov	lr, r3
   21eaa:	4770      	bx	lr

00021eac <__fini_array_start>:
   21eac:	00000265 	.word	0x00000265
