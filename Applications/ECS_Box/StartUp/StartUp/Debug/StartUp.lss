
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001be44  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001be44  0001be44  0002be44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b94  20000000  0001be4c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00030b94  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00030b94  2**0
                  CONTENTS
  5 .bss          000035a4  20000b98  0001c9e8  00030b98  2**3
                  ALLOC
  6 .stack        00010004  2000413c  0001ff8c  00030b98  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00030b94  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00030bc2  2**0
                  CONTENTS, READONLY
  9 .debug_info   000af698  00000000  00000000  00030c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ee3b  00000000  00000000  000e02b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00022105  00000000  00000000  000ef0ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003d48  00000000  00000000  001111f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003890  00000000  00000000  00114f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0005aa4f  00000000  00000000  001187cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00052efa  00000000  00000000  0017321a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0014562e  00000000  00000000  001c6114  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000111bc  00000000  00000000  0030b744  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 41 01 20 5d 0e 00 00 e1 0e 00 00 e1 0e 00 00     @A. ]...........
      10:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 00 00 00 00     ................
	...
      2c:	e1 0e 00 00 e1 0e 00 00 00 00 00 00 e1 0e 00 00     ................
      3c:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
      4c:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
      5c:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
      6c:	ed 8c 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
      7c:	e1 0e 00 00 2d 77 00 00 3d 77 00 00 4d 77 00 00     ....-w..=w..Mw..
      8c:	5d 77 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ]w..............
      9c:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
      ac:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
      bc:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
      cc:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
      dc:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 00 00 00 00     ................
	...
      f4:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
     104:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
     114:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
     124:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
     134:	e1 0e 00 00 b9 a1 00 00 d5 a1 00 00 f1 a1 00 00     ................
     144:	0d a2 00 00 29 a2 00 00 45 a2 00 00 61 a2 00 00     ....)...E...a...
     154:	7d a2 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     }...............
     164:	e1 0e 00 00 99 a2 00 00 b5 a2 00 00 d1 a2 00 00     ................
     174:	ed a2 00 00 e1 0e 00 00 7d 69 00 00 09 de 00 00     ........}i......
     184:	19 de 00 00 29 de 00 00 39 de 00 00 e1 0e 00 00     ....)...9.......
     194:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
     1a4:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
     1b4:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
     1c4:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
     1d4:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
     1e4:	e1 0e 00 00 e1 0e 00 00 39 b5 00 00 55 b5 00 00     ........9...U...
     1f4:	71 b5 00 00 8d b5 00 00 e1 0e 00 00 e1 0e 00 00     q...............
     204:	e1 0e 00 00 a9 b5 00 00 e1 0e 00 00 e1 0e 00 00     ................
     214:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
     224:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
     234:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
     244:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
     254:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000b98 	.word	0x20000b98
     280:	00000000 	.word	0x00000000
     284:	0001be4c 	.word	0x0001be4c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001be4c 	.word	0x0001be4c
     2c4:	20000b9c 	.word	0x20000b9c
     2c8:	0001be4c 	.word	0x0001be4c
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
     2d8:	6039      	str	r1, [r7, #0]
	{
	data = v;
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	683a      	ldr	r2, [r7, #0]
     2de:	601a      	str	r2, [r3, #0]
	}
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	4618      	mov	r0, r3
     2e4:	370c      	adds	r7, #12
     2e6:	46bd      	mov	sp, r7
     2e8:	bc80      	pop	{r7}
     2ea:	4770      	bx	lr

000002ec <_ZN9ALU_ClassC1Ev>:
#include "CDC_Class.h"
#include "DateTime_Class.h"


// default constructor
ALU_Class::ALU_Class()
     2ec:	b480      	push	{r7}
     2ee:	b083      	sub	sp, #12
     2f0:	af00      	add	r7, sp, #0
     2f2:	6078      	str	r0, [r7, #4]
{
	ptrPbit=&pBIT;
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	4a04      	ldr	r2, [pc, #16]	; (308 <_ZN9ALU_ClassC1Ev+0x1c>)
     2f8:	611a      	str	r2, [r3, #16]
} //ALU_Class
     2fa:	687b      	ldr	r3, [r7, #4]
     2fc:	4618      	mov	r0, r3
     2fe:	370c      	adds	r7, #12
     300:	46bd      	mov	sp, r7
     302:	bc80      	pop	{r7}
     304:	4770      	bx	lr
     306:	bf00      	nop
     308:	20001d14 	.word	0x20001d14

0000030c <_ZN9ALU_ClassD1Ev>:

// default destructor
ALU_Class::~ALU_Class()
     30c:	b480      	push	{r7}
     30e:	b083      	sub	sp, #12
     310:	af00      	add	r7, sp, #0
     312:	6078      	str	r0, [r7, #4]
{
} //~ALU_Class
     314:	687b      	ldr	r3, [r7, #4]
     316:	4618      	mov	r0, r3
     318:	370c      	adds	r7, #12
     31a:	46bd      	mov	sp, r7
     31c:	bc80      	pop	{r7}
     31e:	4770      	bx	lr

00000320 <_ZN9ALU_Class4InitEv>:

uint32_t	ALU_Class::Init(void){
     320:	b580      	push	{r7, lr}
     322:	b086      	sub	sp, #24
     324:	af00      	add	r7, sp, #0
     326:	6078      	str	r0, [r7, #4]
	uint32_t	s;
	StartLivePulse();
     328:	6878      	ldr	r0, [r7, #4]
     32a:	4b28      	ldr	r3, [pc, #160]	; (3cc <_ZN9ALU_Class4InitEv+0xac>)
     32c:	4798      	blx	r3
	hvac.Init();
     32e:	4828      	ldr	r0, [pc, #160]	; (3d0 <_ZN9ALU_Class4InitEv+0xb0>)
     330:	4b28      	ldr	r3, [pc, #160]	; (3d4 <_ZN9ALU_Class4InitEv+0xb4>)
     332:	4798      	blx	r3
	hvac.SetCRCConfigData();
     334:	4826      	ldr	r0, [pc, #152]	; (3d0 <_ZN9ALU_Class4InitEv+0xb0>)
     336:	4b28      	ldr	r3, [pc, #160]	; (3d8 <_ZN9ALU_Class4InitEv+0xb8>)
     338:	4798      	blx	r3
	SetInitialConfiguration(configuration);
     33a:	687b      	ldr	r3, [r7, #4]
     33c:	3318      	adds	r3, #24
     33e:	4619      	mov	r1, r3
     340:	6878      	ldr	r0, [r7, #4]
     342:	4b26      	ldr	r3, [pc, #152]	; (3dc <_ZN9ALU_Class4InitEv+0xbc>)
     344:	4798      	blx	r3
	memory.WriteDefaultState();
     346:	4826      	ldr	r0, [pc, #152]	; (3e0 <_ZN9ALU_Class4InitEv+0xc0>)
     348:	4b26      	ldr	r3, [pc, #152]	; (3e4 <_ZN9ALU_Class4InitEv+0xc4>)
     34a:	4798      	blx	r3
	hvac.SetInitialState();
     34c:	4820      	ldr	r0, [pc, #128]	; (3d0 <_ZN9ALU_Class4InitEv+0xb0>)
     34e:	4b26      	ldr	r3, [pc, #152]	; (3e8 <_ZN9ALU_Class4InitEv+0xc8>)
     350:	4798      	blx	r3
	uhr.Init();
     352:	4826      	ldr	r0, [pc, #152]	; (3ec <_ZN9ALU_Class4InitEv+0xcc>)
     354:	4b26      	ldr	r3, [pc, #152]	; (3f0 <_ZN9ALU_Class4InitEv+0xd0>)
     356:	4798      	blx	r3
	hvac.saveCurrentState();
     358:	481d      	ldr	r0, [pc, #116]	; (3d0 <_ZN9ALU_Class4InitEv+0xb0>)
     35a:	4b26      	ldr	r3, [pc, #152]	; (3f4 <_ZN9ALU_Class4InitEv+0xd4>)
     35c:	4798      	blx	r3
	s=arincInterface.Init();
     35e:	4826      	ldr	r0, [pc, #152]	; (3f8 <_ZN9ALU_Class4InitEv+0xd8>)
     360:	4b26      	ldr	r3, [pc, #152]	; (3fc <_ZN9ALU_Class4InitEv+0xdc>)
     362:	4798      	blx	r3
     364:	4603      	mov	r3, r0
     366:	617b      	str	r3, [r7, #20]
	if (s!=0x01)
     368:	697b      	ldr	r3, [r7, #20]
     36a:	2b01      	cmp	r3, #1
     36c:	d00e      	beq.n	38c <_ZN9ALU_Class4InitEv+0x6c>
	{	
		NotifyError(kARINCINnterfaceError,s);
     36e:	f107 030c 	add.w	r3, r7, #12
     372:	6979      	ldr	r1, [r7, #20]
     374:	4618      	mov	r0, r3
     376:	4b22      	ldr	r3, [pc, #136]	; (400 <_ZN9ALU_Class4InitEv+0xe0>)
     378:	4798      	blx	r3
     37a:	f107 030c 	add.w	r3, r7, #12
     37e:	461a      	mov	r2, r3
     380:	2100      	movs	r1, #0
     382:	6878      	ldr	r0, [r7, #4]
     384:	4b1f      	ldr	r3, [pc, #124]	; (404 <_ZN9ALU_Class4InitEv+0xe4>)
     386:	4798      	blx	r3
		return s;
     388:	697b      	ldr	r3, [r7, #20]
     38a:	e01a      	b.n	3c2 <_ZN9ALU_Class4InitEv+0xa2>
	} 
	else
	{
		s=pBIT.CheckCurrentStatus(status);
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
     392:	4619      	mov	r1, r3
     394:	481c      	ldr	r0, [pc, #112]	; (408 <_ZN9ALU_Class4InitEv+0xe8>)
     396:	4b1d      	ldr	r3, [pc, #116]	; (40c <_ZN9ALU_Class4InitEv+0xec>)
     398:	4798      	blx	r3
     39a:	6178      	str	r0, [r7, #20]
		if (s>0)
     39c:	697b      	ldr	r3, [r7, #20]
     39e:	2b00      	cmp	r3, #0
     3a0:	d00e      	beq.n	3c0 <_ZN9ALU_Class4InitEv+0xa0>
		{
			NotifyError(kpBITError,s);
     3a2:	f107 0310 	add.w	r3, r7, #16
     3a6:	6979      	ldr	r1, [r7, #20]
     3a8:	4618      	mov	r0, r3
     3aa:	4b15      	ldr	r3, [pc, #84]	; (400 <_ZN9ALU_Class4InitEv+0xe0>)
     3ac:	4798      	blx	r3
     3ae:	f107 0310 	add.w	r3, r7, #16
     3b2:	461a      	mov	r2, r3
     3b4:	2101      	movs	r1, #1
     3b6:	6878      	ldr	r0, [r7, #4]
     3b8:	4b12      	ldr	r3, [pc, #72]	; (404 <_ZN9ALU_Class4InitEv+0xe4>)
     3ba:	4798      	blx	r3
			return s;
     3bc:	697b      	ldr	r3, [r7, #20]
     3be:	e000      	b.n	3c2 <_ZN9ALU_Class4InitEv+0xa2>
		{
			
		}
	}
	  
	return s;
     3c0:	697b      	ldr	r3, [r7, #20]
}
     3c2:	4618      	mov	r0, r3
     3c4:	3718      	adds	r7, #24
     3c6:	46bd      	mov	sp, r7
     3c8:	bd80      	pop	{r7, pc}
     3ca:	bf00      	nop
     3cc:	00000475 	.word	0x00000475
     3d0:	20001d28 	.word	0x20001d28
     3d4:	00002075 	.word	0x00002075
     3d8:	00002bb1 	.word	0x00002bb1
     3dc:	000004c1 	.word	0x000004c1
     3e0:	200018c4 	.word	0x200018c4
     3e4:	00001a55 	.word	0x00001a55
     3e8:	00000965 	.word	0x00000965
     3ec:	200010f8 	.word	0x200010f8
     3f0:	00000db5 	.word	0x00000db5
     3f4:	00002a7d 	.word	0x00002a7d
     3f8:	2000283c 	.word	0x2000283c
     3fc:	00010885 	.word	0x00010885
     400:	000002d1 	.word	0x000002d1
     404:	000005d5 	.word	0x000005d5
     408:	20001d14 	.word	0x20001d14
     40c:	00001bf5 	.word	0x00001bf5

00000410 <_ZN9ALU_Class15GetSelectedAMMCEv>:

uint8_t	ALU_Class::GetSelectedAMMC(void){
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	6078      	str	r0, [r7, #4]
	activeLine=arincInterface.GetActiveLine();
     418:	4811      	ldr	r0, [pc, #68]	; (460 <_ZN9ALU_Class15GetSelectedAMMCEv+0x50>)
     41a:	4b12      	ldr	r3, [pc, #72]	; (464 <_ZN9ALU_Class15GetSelectedAMMCEv+0x54>)
     41c:	4798      	blx	r3
     41e:	4603      	mov	r3, r0
     420:	461a      	mov	r2, r3
     422:	687b      	ldr	r3, [r7, #4]
     424:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
		switch (activeLine)
     428:	687b      	ldr	r3, [r7, #4]
     42a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
     42e:	2b01      	cmp	r3, #1
     430:	d002      	beq.n	438 <_ZN9ALU_Class15GetSelectedAMMCEv+0x28>
     432:	2b02      	cmp	r3, #2
     434:	d004      	beq.n	440 <_ZN9ALU_Class15GetSelectedAMMCEv+0x30>
     436:	e007      	b.n	448 <_ZN9ALU_Class15GetSelectedAMMCEv+0x38>
		{
			case 1:
			ammc=&ammc1;
     438:	4b0b      	ldr	r3, [pc, #44]	; (468 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     43a:	4a0c      	ldr	r2, [pc, #48]	; (46c <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     43c:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     43e:	e007      	b.n	450 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			
			case 2:
			ammc=&ammc2;
     440:	4b09      	ldr	r3, [pc, #36]	; (468 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     442:	4a0b      	ldr	r2, [pc, #44]	; (470 <_ZN9ALU_Class15GetSelectedAMMCEv+0x60>)
     444:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     446:	e003      	b.n	450 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			default:
			ammc=&ammc1;
     448:	4b07      	ldr	r3, [pc, #28]	; (468 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     44a:	4a08      	ldr	r2, [pc, #32]	; (46c <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     44c:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     44e:	bf00      	nop
		}
	return activeLine;	
     450:	687b      	ldr	r3, [r7, #4]
     452:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
}
     456:	4618      	mov	r0, r3
     458:	3708      	adds	r7, #8
     45a:	46bd      	mov	sp, r7
     45c:	bd80      	pop	{r7, pc}
     45e:	bf00      	nop
     460:	2000283c 	.word	0x2000283c
     464:	0001123b 	.word	0x0001123b
     468:	200010f0 	.word	0x200010f0
     46c:	20000d00 	.word	0x20000d00
     470:	20000ef8 	.word	0x20000ef8

00000474 <_ZN9ALU_Class14StartLivePulseEv>:
	
}
int32_t	ALU_Class::FeedWatchDog(void){
	return wdt_feed(&WATCHDOG);
}
uint8_t	ALU_Class::StartLivePulse(void){
     474:	b580      	push	{r7, lr}
     476:	b084      	sub	sp, #16
     478:	af00      	add	r7, sp, #0
     47a:	6078      	str	r0, [r7, #4]
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     47c:	4909      	ldr	r1, [pc, #36]	; (4a4 <_ZN9ALU_Class14StartLivePulseEv+0x30>)
     47e:	480a      	ldr	r0, [pc, #40]	; (4a8 <_ZN9ALU_Class14StartLivePulseEv+0x34>)
     480:	4b0a      	ldr	r3, [pc, #40]	; (4ac <_ZN9ALU_Class14StartLivePulseEv+0x38>)
     482:	4798      	blx	r3
     484:	4603      	mov	r3, r0
     486:	490a      	ldr	r1, [pc, #40]	; (4b0 <_ZN9ALU_Class14StartLivePulseEv+0x3c>)
     488:	4618      	mov	r0, r3
     48a:	4b0a      	ldr	r3, [pc, #40]	; (4b4 <_ZN9ALU_Class14StartLivePulseEv+0x40>)
     48c:	4798      	blx	r3
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     48e:	480a      	ldr	r0, [pc, #40]	; (4b8 <_ZN9ALU_Class14StartLivePulseEv+0x44>)
     490:	4b0a      	ldr	r3, [pc, #40]	; (4bc <_ZN9ALU_Class14StartLivePulseEv+0x48>)
     492:	4798      	blx	r3
     494:	4603      	mov	r3, r0
     496:	60fb      	str	r3, [r7, #12]
	return p;
     498:	68fb      	ldr	r3, [r7, #12]
     49a:	b2db      	uxtb	r3, r3
}
     49c:	4618      	mov	r0, r3
     49e:	3710      	adds	r7, #16
     4a0:	46bd      	mov	sp, r7
     4a2:	bd80      	pop	{r7, pc}
     4a4:	00019f5c 	.word	0x00019f5c
     4a8:	20003e1c 	.word	0x20003e1c
     4ac:	00000649 	.word	0x00000649
     4b0:	00019f58 	.word	0x00019f58
     4b4:	00000629 	.word	0x00000629
     4b8:	20003fac 	.word	0x20003fac
     4bc:	00004c31 	.word	0x00004c31

000004c0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData>:
		nextUptimeUpdate = hvacTimer.get_ticks()+ 1000;
	}
	
	return (alu.FeedWatchDog()>0);
}
uint32_t ALU_Class::SetInitialConfiguration(ConfigurationData& cd){
     4c0:	b580      	push	{r7, lr}
     4c2:	b086      	sub	sp, #24
     4c4:	af00      	add	r7, sp, #0
     4c6:	6078      	str	r0, [r7, #4]
     4c8:	6039      	str	r1, [r7, #0]
	uint32_t	w,crc,refCRC;
	w=0;
     4ca:	2300      	movs	r3, #0
     4cc:	613b      	str	r3, [r7, #16]
	uint32_t	r=memory.ReadLastConfigurationData(cd);
     4ce:	6839      	ldr	r1, [r7, #0]
     4d0:	4832      	ldr	r0, [pc, #200]	; (59c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xdc>)
     4d2:	4b33      	ldr	r3, [pc, #204]	; (5a0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe0>)
     4d4:	4798      	blx	r3
     4d6:	6178      	str	r0, [r7, #20]
	if (memory.IsConfigurationDataUpdated())
     4d8:	4832      	ldr	r0, [pc, #200]	; (5a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe4>)
     4da:	4b33      	ldr	r3, [pc, #204]	; (5a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     4dc:	4798      	blx	r3
     4de:	4603      	mov	r3, r0
     4e0:	2b00      	cmp	r3, #0
     4e2:	d007      	beq.n	4f4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x34>
	{
		r=memory.ReadUpdatedConfigurationData(configuration);
     4e4:	687b      	ldr	r3, [r7, #4]
     4e6:	3318      	adds	r3, #24
     4e8:	4619      	mov	r1, r3
     4ea:	482c      	ldr	r0, [pc, #176]	; (59c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xdc>)
     4ec:	4b2f      	ldr	r3, [pc, #188]	; (5ac <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xec>)
     4ee:	4798      	blx	r3
     4f0:	6178      	str	r0, [r7, #20]
     4f2:	e048      	b.n	586 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xc6>
		
	}
	else
	{
		crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(configuration));
     4f4:	22ac      	movs	r2, #172	; 0xac
     4f6:	6839      	ldr	r1, [r7, #0]
     4f8:	482a      	ldr	r0, [pc, #168]	; (5a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe4>)
     4fa:	4b2d      	ldr	r3, [pc, #180]	; (5b0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf0>)
     4fc:	4798      	blx	r3
     4fe:	60f8      	str	r0, [r7, #12]
		refCRC=memory.ReadCRCConfigurationData();
     500:	4826      	ldr	r0, [pc, #152]	; (59c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xdc>)
     502:	4b2c      	ldr	r3, [pc, #176]	; (5b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf4>)
     504:	4798      	blx	r3
     506:	60b8      	str	r0, [r7, #8]
		if (crc==refCRC)
     508:	68fa      	ldr	r2, [r7, #12]
     50a:	68bb      	ldr	r3, [r7, #8]
     50c:	429a      	cmp	r2, r3
     50e:	d108      	bne.n	522 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x62>
		{
			configuration=cd;
     510:	687b      	ldr	r3, [r7, #4]
     512:	683a      	ldr	r2, [r7, #0]
     514:	3318      	adds	r3, #24
     516:	4611      	mov	r1, r2
     518:	22ac      	movs	r2, #172	; 0xac
     51a:	4618      	mov	r0, r3
     51c:	4b26      	ldr	r3, [pc, #152]	; (5b8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf8>)
     51e:	4798      	blx	r3
     520:	e031      	b.n	586 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xc6>
		
		} 
		else
		{
		
			r=memory.ReadDefaultConfigurationData(configuration);
     522:	687b      	ldr	r3, [r7, #4]
     524:	3318      	adds	r3, #24
     526:	4619      	mov	r1, r3
     528:	481c      	ldr	r0, [pc, #112]	; (59c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xdc>)
     52a:	4b24      	ldr	r3, [pc, #144]	; (5bc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xfc>)
     52c:	4798      	blx	r3
     52e:	6178      	str	r0, [r7, #20]
			crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
     530:	687b      	ldr	r3, [r7, #4]
     532:	3318      	adds	r3, #24
     534:	22ac      	movs	r2, #172	; 0xac
     536:	4619      	mov	r1, r3
     538:	481a      	ldr	r0, [pc, #104]	; (5a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe4>)
     53a:	4b1d      	ldr	r3, [pc, #116]	; (5b0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf0>)
     53c:	4798      	blx	r3
     53e:	60f8      	str	r0, [r7, #12]
			if (crc==hvac.CRC32)
     540:	4b1f      	ldr	r3, [pc, #124]	; (5c0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x100>)
     542:	f8d3 2568 	ldr.w	r2, [r3, #1384]	; 0x568
     546:	68fb      	ldr	r3, [r7, #12]
     548:	429a      	cmp	r2, r3
     54a:	d105      	bne.n	558 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x98>
			{
				w=memory.WriteCRCConfigurationData(crc);
     54c:	68f9      	ldr	r1, [r7, #12]
     54e:	4813      	ldr	r0, [pc, #76]	; (59c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xdc>)
     550:	4b1c      	ldr	r3, [pc, #112]	; (5c4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x104>)
     552:	4798      	blx	r3
     554:	6138      	str	r0, [r7, #16]
     556:	e016      	b.n	586 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xc6>
				
			}
			else
			{
							
				configuration=factoryDefaultsConfiguration;
     558:	687b      	ldr	r3, [r7, #4]
     55a:	4a1b      	ldr	r2, [pc, #108]	; (5c8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     55c:	3318      	adds	r3, #24
     55e:	4611      	mov	r1, r2
     560:	22ac      	movs	r2, #172	; 0xac
     562:	4618      	mov	r0, r3
     564:	4b14      	ldr	r3, [pc, #80]	; (5b8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf8>)
     566:	4798      	blx	r3
				w=memory.WriteDefaultConfiguration(configuration);
     568:	687b      	ldr	r3, [r7, #4]
     56a:	3318      	adds	r3, #24
     56c:	4619      	mov	r1, r3
     56e:	480b      	ldr	r0, [pc, #44]	; (59c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xdc>)
     570:	4b16      	ldr	r3, [pc, #88]	; (5cc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     572:	4798      	blx	r3
     574:	6138      	str	r0, [r7, #16]
				w=memory.WriteCRCConfigurationData(hvac.CRC32);
     576:	4b12      	ldr	r3, [pc, #72]	; (5c0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x100>)
     578:	f8d3 3568 	ldr.w	r3, [r3, #1384]	; 0x568
     57c:	4619      	mov	r1, r3
     57e:	4807      	ldr	r0, [pc, #28]	; (59c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xdc>)
     580:	4b10      	ldr	r3, [pc, #64]	; (5c4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x104>)
     582:	4798      	blx	r3
     584:	6138      	str	r0, [r7, #16]
			
		}
		
		
	}
	hvac.SetConfigurationData(configuration);
     586:	687b      	ldr	r3, [r7, #4]
     588:	3318      	adds	r3, #24
     58a:	4619      	mov	r1, r3
     58c:	480c      	ldr	r0, [pc, #48]	; (5c0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x100>)
     58e:	4b10      	ldr	r3, [pc, #64]	; (5d0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     590:	4798      	blx	r3
	return r;
     592:	697b      	ldr	r3, [r7, #20]
};
     594:	4618      	mov	r0, r3
     596:	3718      	adds	r7, #24
     598:	46bd      	mov	sp, r7
     59a:	bd80      	pop	{r7, pc}
     59c:	200018c4 	.word	0x200018c4
     5a0:	000018e5 	.word	0x000018e5
     5a4:	20001708 	.word	0x20001708
     5a8:	00001e29 	.word	0x00001e29
     5ac:	00001915 	.word	0x00001915
     5b0:	00000c4d 	.word	0x00000c4d
     5b4:	0000197d 	.word	0x0000197d
     5b8:	0001631d 	.word	0x0001631d
     5bc:	000018b5 	.word	0x000018b5
     5c0:	20001d28 	.word	0x20001d28
     5c4:	00001ab9 	.word	0x00001ab9
     5c8:	0001a00c 	.word	0x0001a00c
     5cc:	00001a25 	.word	0x00001a25
     5d0:	00002b61 	.word	0x00002b61

000005d4 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData>:

void ALU_Class::NotifyError(Internal_Fault_List ifl,const eventData& data)
{
     5d4:	b580      	push	{r7, lr}
     5d6:	b084      	sub	sp, #16
     5d8:	af00      	add	r7, sp, #0
     5da:	60f8      	str	r0, [r7, #12]
     5dc:	460b      	mov	r3, r1
     5de:	607a      	str	r2, [r7, #4]
     5e0:	72fb      	strb	r3, [r7, #11]
	listener.SendErrorSelf(uint16_t(ifl),data);
     5e2:	7afb      	ldrb	r3, [r7, #11]
     5e4:	b29b      	uxth	r3, r3
     5e6:	687a      	ldr	r2, [r7, #4]
     5e8:	4619      	mov	r1, r3
     5ea:	4803      	ldr	r0, [pc, #12]	; (5f8 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x24>)
     5ec:	4b03      	ldr	r3, [pc, #12]	; (5fc <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x28>)
     5ee:	4798      	blx	r3
}
     5f0:	bf00      	nop
     5f2:	3710      	adds	r7, #16
     5f4:	46bd      	mov	sp, r7
     5f6:	bd80      	pop	{r7, pc}
     5f8:	20003a74 	.word	0x20003a74
     5fc:	0001189d 	.word	0x0001189d

00000600 <_ZlsIhER5PrintS1_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     600:	b580      	push	{r7, lr}
     602:	b082      	sub	sp, #8
     604:	af00      	add	r7, sp, #0
     606:	6078      	str	r0, [r7, #4]
     608:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     60a:	683b      	ldr	r3, [r7, #0]
     60c:	781b      	ldrb	r3, [r3, #0]
     60e:	220a      	movs	r2, #10
     610:	4619      	mov	r1, r3
     612:	6878      	ldr	r0, [r7, #4]
     614:	4b03      	ldr	r3, [pc, #12]	; (624 <_ZlsIhER5PrintS1_RKT_+0x24>)
     616:	4798      	blx	r3
     618:	687b      	ldr	r3, [r7, #4]
     61a:	4618      	mov	r0, r3
     61c:	3708      	adds	r7, #8
     61e:	46bd      	mov	sp, r7
     620:	bd80      	pop	{r7, pc}
     622:	bf00      	nop
     624:	00013839 	.word	0x00013839

00000628 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     628:	b580      	push	{r7, lr}
     62a:	b082      	sub	sp, #8
     62c:	af00      	add	r7, sp, #0
     62e:	6078      	str	r0, [r7, #4]
     630:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     632:	6839      	ldr	r1, [r7, #0]
     634:	6878      	ldr	r0, [r7, #4]
     636:	4b03      	ldr	r3, [pc, #12]	; (644 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     638:	4798      	blx	r3
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	4618      	mov	r0, r3
     63e:	3708      	adds	r7, #8
     640:	46bd      	mov	sp, r7
     642:	bd80      	pop	{r7, pc}
     644:	000137f5 	.word	0x000137f5

00000648 <_ZlsIA30_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
     650:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     652:	6839      	ldr	r1, [r7, #0]
     654:	6878      	ldr	r0, [r7, #4]
     656:	4b03      	ldr	r3, [pc, #12]	; (664 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     658:	4798      	blx	r3
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	4618      	mov	r0, r3
     65e:	3708      	adds	r7, #8
     660:	46bd      	mov	sp, r7
     662:	bd80      	pop	{r7, pc}
     664:	000137f5 	.word	0x000137f5

00000668 <_Z41__static_initialization_and_destruction_0ii>:
void ALU_Class::NotifyError(Fault_List fl,const eventData& data)
{
	listener.SendErrorSelf(uint16_t(fl),data);
}
     668:	b580      	push	{r7, lr}
     66a:	b082      	sub	sp, #8
     66c:	af00      	add	r7, sp, #0
     66e:	6078      	str	r0, [r7, #4]
     670:	6039      	str	r1, [r7, #0]
     672:	687b      	ldr	r3, [r7, #4]
     674:	2b01      	cmp	r3, #1
     676:	d10c      	bne.n	692 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     678:	683b      	ldr	r3, [r7, #0]
     67a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     67e:	4293      	cmp	r3, r2
     680:	d107      	bne.n	692 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     682:	4806      	ldr	r0, [pc, #24]	; (69c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     684:	4b06      	ldr	r3, [pc, #24]	; (6a0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     686:	4798      	blx	r3
     688:	4a06      	ldr	r2, [pc, #24]	; (6a4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     68a:	4907      	ldr	r1, [pc, #28]	; (6a8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     68c:	4803      	ldr	r0, [pc, #12]	; (69c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     68e:	4b07      	ldr	r3, [pc, #28]	; (6ac <_Z41__static_initialization_and_destruction_0ii+0x44>)
     690:	4798      	blx	r3
     692:	bf00      	nop
     694:	3708      	adds	r7, #8
     696:	46bd      	mov	sp, r7
     698:	bd80      	pop	{r7, pc}
     69a:	bf00      	nop
     69c:	20000bb4 	.word	0x20000bb4
     6a0:	000002ed 	.word	0x000002ed
     6a4:	20000000 	.word	0x20000000
     6a8:	0000030d 	.word	0x0000030d
     6ac:	0001427d 	.word	0x0001427d

000006b0 <_GLOBAL__sub_I__ZN9ALU_ClassC2Ev>:
     6b0:	b580      	push	{r7, lr}
     6b2:	af00      	add	r7, sp, #0
     6b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     6b8:	2001      	movs	r0, #1
     6ba:	4b01      	ldr	r3, [pc, #4]	; (6c0 <_GLOBAL__sub_I__ZN9ALU_ClassC2Ev+0x10>)
     6bc:	4798      	blx	r3
     6be:	bd80      	pop	{r7, pc}
     6c0:	00000669 	.word	0x00000669

000006c4 <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     6c4:	b580      	push	{r7, lr}
     6c6:	b082      	sub	sp, #8
     6c8:	af00      	add	r7, sp, #0
     6ca:	6078      	str	r0, [r7, #4]
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	4618      	mov	r0, r3
     6d0:	4b09      	ldr	r3, [pc, #36]	; (6f8 <_ZN10AMMC_ClassC1Ev+0x34>)
     6d2:	4798      	blx	r3
     6d4:	687b      	ldr	r3, [r7, #4]
     6d6:	4a09      	ldr	r2, [pc, #36]	; (6fc <_ZN10AMMC_ClassC1Ev+0x38>)
     6d8:	4611      	mov	r1, r2
     6da:	4618      	mov	r0, r3
     6dc:	4b08      	ldr	r3, [pc, #32]	; (700 <_ZN10AMMC_ClassC1Ev+0x3c>)
     6de:	4798      	blx	r3
     6e0:	4a08      	ldr	r2, [pc, #32]	; (704 <_ZN10AMMC_ClassC1Ev+0x40>)
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	601a      	str	r2, [r3, #0]
     6e6:	4a07      	ldr	r2, [pc, #28]	; (704 <_ZN10AMMC_ClassC1Ev+0x40>)
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	601a      	str	r2, [r3, #0]
{
} //AMMC_Class
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	4618      	mov	r0, r3
     6f0:	3708      	adds	r7, #8
     6f2:	46bd      	mov	sp, r7
     6f4:	bd80      	pop	{r7, pc}
     6f6:	bf00      	nop
     6f8:	000103e1 	.word	0x000103e1
     6fc:	00019fa8 	.word	0x00019fa8
     700:	000106b9 	.word	0x000106b9
     704:	00019f90 	.word	0x00019f90

00000708 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     708:	b580      	push	{r7, lr}
     70a:	b082      	sub	sp, #8
     70c:	af00      	add	r7, sp, #0
     70e:	6078      	str	r0, [r7, #4]
     710:	4a0a      	ldr	r2, [pc, #40]	; (73c <_ZN10AMMC_ClassD1Ev+0x34>)
     712:	687b      	ldr	r3, [r7, #4]
     714:	601a      	str	r2, [r3, #0]
     716:	4a09      	ldr	r2, [pc, #36]	; (73c <_ZN10AMMC_ClassD1Ev+0x34>)
     718:	687b      	ldr	r3, [r7, #4]
     71a:	601a      	str	r2, [r3, #0]
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	4a08      	ldr	r2, [pc, #32]	; (740 <_ZN10AMMC_ClassD1Ev+0x38>)
     720:	4611      	mov	r1, r2
     722:	4618      	mov	r0, r3
     724:	4b07      	ldr	r3, [pc, #28]	; (744 <_ZN10AMMC_ClassD1Ev+0x3c>)
     726:	4798      	blx	r3
     728:	687b      	ldr	r3, [r7, #4]
     72a:	4618      	mov	r0, r3
     72c:	4b06      	ldr	r3, [pc, #24]	; (748 <_ZN10AMMC_ClassD1Ev+0x40>)
     72e:	4798      	blx	r3
{
} //~AMMC_Class
     730:	687b      	ldr	r3, [r7, #4]
     732:	4618      	mov	r0, r3
     734:	3708      	adds	r7, #8
     736:	46bd      	mov	sp, r7
     738:	bd80      	pop	{r7, pc}
     73a:	bf00      	nop
     73c:	00019f90 	.word	0x00019f90
     740:	00019fa8 	.word	0x00019fa8
     744:	00010791 	.word	0x00010791
     748:	00010401 	.word	0x00010401

0000074c <_ZN10AMMC_ClassD0Ev>:
AMMC_Class::~AMMC_Class()
     74c:	b580      	push	{r7, lr}
     74e:	b082      	sub	sp, #8
     750:	af00      	add	r7, sp, #0
     752:	6078      	str	r0, [r7, #4]
} //~AMMC_Class
     754:	6878      	ldr	r0, [r7, #4]
     756:	4b06      	ldr	r3, [pc, #24]	; (770 <_ZN10AMMC_ClassD0Ev+0x24>)
     758:	4798      	blx	r3
     75a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
     75e:	6878      	ldr	r0, [r7, #4]
     760:	4b04      	ldr	r3, [pc, #16]	; (774 <_ZN10AMMC_ClassD0Ev+0x28>)
     762:	4798      	blx	r3
     764:	687b      	ldr	r3, [r7, #4]
     766:	4618      	mov	r0, r3
     768:	3708      	adds	r7, #8
     76a:	46bd      	mov	sp, r7
     76c:	bd80      	pop	{r7, pc}
     76e:	bf00      	nop
     770:	00000709 	.word	0x00000709
     774:	00014289 	.word	0x00014289

00000778 <_Z41__static_initialization_and_destruction_0ii>:
	return	selected;
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     778:	b580      	push	{r7, lr}
     77a:	b082      	sub	sp, #8
     77c:	af00      	add	r7, sp, #0
     77e:	6078      	str	r0, [r7, #4]
     780:	6039      	str	r1, [r7, #0]
     782:	687b      	ldr	r3, [r7, #4]
     784:	2b01      	cmp	r3, #1
     786:	d114      	bne.n	7b2 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     788:	683b      	ldr	r3, [r7, #0]
     78a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     78e:	4293      	cmp	r3, r2
     790:	d10f      	bne.n	7b2 <_Z41__static_initialization_and_destruction_0ii+0x3a>
AMMC_Class	ammc1;
     792:	480a      	ldr	r0, [pc, #40]	; (7bc <_Z41__static_initialization_and_destruction_0ii+0x44>)
     794:	4b0a      	ldr	r3, [pc, #40]	; (7c0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     796:	4798      	blx	r3
     798:	4a0a      	ldr	r2, [pc, #40]	; (7c4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     79a:	490b      	ldr	r1, [pc, #44]	; (7c8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     79c:	4807      	ldr	r0, [pc, #28]	; (7bc <_Z41__static_initialization_and_destruction_0ii+0x44>)
     79e:	4b0b      	ldr	r3, [pc, #44]	; (7cc <_Z41__static_initialization_and_destruction_0ii+0x54>)
     7a0:	4798      	blx	r3
AMMC_Class	ammc2;
     7a2:	480b      	ldr	r0, [pc, #44]	; (7d0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     7a6:	4798      	blx	r3
     7a8:	4a06      	ldr	r2, [pc, #24]	; (7c4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     7aa:	4907      	ldr	r1, [pc, #28]	; (7c8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     7ac:	4808      	ldr	r0, [pc, #32]	; (7d0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     7ae:	4b07      	ldr	r3, [pc, #28]	; (7cc <_Z41__static_initialization_and_destruction_0ii+0x54>)
     7b0:	4798      	blx	r3
     7b2:	bf00      	nop
     7b4:	3708      	adds	r7, #8
     7b6:	46bd      	mov	sp, r7
     7b8:	bd80      	pop	{r7, pc}
     7ba:	bf00      	nop
     7bc:	20000d00 	.word	0x20000d00
     7c0:	000006c5 	.word	0x000006c5
     7c4:	20000000 	.word	0x20000000
     7c8:	00000709 	.word	0x00000709
     7cc:	0001427d 	.word	0x0001427d
     7d0:	20000ef8 	.word	0x20000ef8

000007d4 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     7d4:	b580      	push	{r7, lr}
     7d6:	af00      	add	r7, sp, #0
     7d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     7dc:	2001      	movs	r0, #1
     7de:	4b01      	ldr	r3, [pc, #4]	; (7e4 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     7e0:	4798      	blx	r3
     7e2:	bd80      	pop	{r7, pc}
     7e4:	00000779 	.word	0x00000779

000007e8 <_ZN10CBIT_ClassC1Ev>:


#include "CBIT_Class.h"

// default constructor
CBIT_Class::CBIT_Class()
     7e8:	b480      	push	{r7}
     7ea:	b083      	sub	sp, #12
     7ec:	af00      	add	r7, sp, #0
     7ee:	6078      	str	r0, [r7, #4]
{
} //CBIT_Class
     7f0:	687b      	ldr	r3, [r7, #4]
     7f2:	4618      	mov	r0, r3
     7f4:	370c      	adds	r7, #12
     7f6:	46bd      	mov	sp, r7
     7f8:	bc80      	pop	{r7}
     7fa:	4770      	bx	lr

000007fc <_ZN10CBIT_ClassD1Ev>:

// default destructor
CBIT_Class::~CBIT_Class()
     7fc:	b480      	push	{r7}
     7fe:	b083      	sub	sp, #12
     800:	af00      	add	r7, sp, #0
     802:	6078      	str	r0, [r7, #4]
{
} //~CBIT_Class
     804:	687b      	ldr	r3, [r7, #4]
     806:	4618      	mov	r0, r3
     808:	370c      	adds	r7, #12
     80a:	46bd      	mov	sp, r7
     80c:	bc80      	pop	{r7}
     80e:	4770      	bx	lr

00000810 <_ZN10CBIT_Class4IsOKEv>:

bool	CBIT_Class::IsOK(void){
     810:	b480      	push	{r7}
     812:	b083      	sub	sp, #12
     814:	af00      	add	r7, sp, #0
     816:	6078      	str	r0, [r7, #4]
	return	isOK;
     818:	687b      	ldr	r3, [r7, #4]
     81a:	781b      	ldrb	r3, [r3, #0]
     81c:	b2db      	uxtb	r3, r3
}
     81e:	4618      	mov	r0, r3
     820:	370c      	adds	r7, #12
     822:	46bd      	mov	sp, r7
     824:	bc80      	pop	{r7}
     826:	4770      	bx	lr

00000828 <_Z41__static_initialization_and_destruction_0ii>:
CBIT_Class::operator bool(){
	return	isOK;
}

     828:	b580      	push	{r7, lr}
     82a:	b082      	sub	sp, #8
     82c:	af00      	add	r7, sp, #0
     82e:	6078      	str	r0, [r7, #4]
     830:	6039      	str	r1, [r7, #0]
     832:	687b      	ldr	r3, [r7, #4]
     834:	2b01      	cmp	r3, #1
     836:	d10c      	bne.n	852 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     838:	683b      	ldr	r3, [r7, #0]
     83a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     83e:	4293      	cmp	r3, r2
     840:	d107      	bne.n	852 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     842:	4806      	ldr	r0, [pc, #24]	; (85c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     844:	4b06      	ldr	r3, [pc, #24]	; (860 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     846:	4798      	blx	r3
     848:	4a06      	ldr	r2, [pc, #24]	; (864 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     84a:	4907      	ldr	r1, [pc, #28]	; (868 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     84c:	4803      	ldr	r0, [pc, #12]	; (85c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     84e:	4b07      	ldr	r3, [pc, #28]	; (86c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     850:	4798      	blx	r3
     852:	bf00      	nop
     854:	3708      	adds	r7, #8
     856:	46bd      	mov	sp, r7
     858:	bd80      	pop	{r7, pc}
     85a:	bf00      	nop
     85c:	200010f4 	.word	0x200010f4
     860:	000007e9 	.word	0x000007e9
     864:	20000000 	.word	0x20000000
     868:	000007fd 	.word	0x000007fd
     86c:	0001427d 	.word	0x0001427d

00000870 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
     870:	b580      	push	{r7, lr}
     872:	af00      	add	r7, sp, #0
     874:	f64f 71ff 	movw	r1, #65535	; 0xffff
     878:	2001      	movs	r0, #1
     87a:	4b01      	ldr	r3, [pc, #4]	; (880 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x10>)
     87c:	4798      	blx	r3
     87e:	bd80      	pop	{r7, pc}
     880:	00000829 	.word	0x00000829

00000884 <_ZN17ConfigState_ClassC1Ev>:
	
};


// default constructor
ConfigState_Class::ConfigState_Class()
     884:	b480      	push	{r7}
     886:	b083      	sub	sp, #12
     888:	af00      	add	r7, sp, #0
     88a:	6078      	str	r0, [r7, #4]
     88c:	4a14      	ldr	r2, [pc, #80]	; (8e0 <_ZN17ConfigState_ClassC1Ev+0x5c>)
     88e:	687b      	ldr	r3, [r7, #4]
     890:	601a      	str	r2, [r3, #0]
{
	defaultState.currentState = kGAINStateReset;
     892:	687b      	ldr	r3, [r7, #4]
     894:	2200      	movs	r2, #0
     896:	629a      	str	r2, [r3, #40]	; 0x28
	defaultState.callingState = kGAINStateReset;
     898:	687b      	ldr	r3, [r7, #4]
     89a:	2200      	movs	r2, #0
     89c:	62da      	str	r2, [r3, #44]	; 0x2c
	defaultState.internalCateringState = 0;
     89e:	687b      	ldr	r3, [r7, #4]
     8a0:	2200      	movs	r2, #0
     8a2:	631a      	str	r2, [r3, #48]	; 0x30
	defaultState.targetUDC = 0.0;
     8a4:	687b      	ldr	r3, [r7, #4]
     8a6:	f04f 0200 	mov.w	r2, #0
     8aa:	63da      	str	r2, [r3, #60]	; 0x3c
	defaultState.cycleDuration = 0;
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	2200      	movs	r2, #0
     8b0:	651a      	str	r2, [r3, #80]	; 0x50
	defaultState.inStateTime = 0;
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	2200      	movs	r2, #0
     8b6:	649a      	str	r2, [r3, #72]	; 0x48
	defaultState.remainingTime = 0;
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	2200      	movs	r2, #0
     8bc:	655a      	str	r2, [r3, #84]	; 0x54
	defaultState.waitingExceededTime = 0;
     8be:	687b      	ldr	r3, [r7, #4]
     8c0:	2200      	movs	r2, #0
     8c2:	65da      	str	r2, [r3, #92]	; 0x5c
	defaultState.fansOnAfterCateringCycleTime = forever;
     8c4:	4b07      	ldr	r3, [pc, #28]	; (8e4 <_ZN17ConfigState_ClassC1Ev+0x60>)
     8c6:	681a      	ldr	r2, [r3, #0]
     8c8:	687b      	ldr	r3, [r7, #4]
     8ca:	661a      	str	r2, [r3, #96]	; 0x60
	defaultState.magic=0xCAFEBABE;
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	4a06      	ldr	r2, [pc, #24]	; (8e8 <_ZN17ConfigState_ClassC1Ev+0x64>)
     8d0:	605a      	str	r2, [r3, #4]
} //ConfigState_Class
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	4618      	mov	r0, r3
     8d6:	370c      	adds	r7, #12
     8d8:	46bd      	mov	sp, r7
     8da:	bc80      	pop	{r7}
     8dc:	4770      	bx	lr
     8de:	bf00      	nop
     8e0:	0001a3b0 	.word	0x0001a3b0
     8e4:	0001ba38 	.word	0x0001ba38
     8e8:	cafebabe 	.word	0xcafebabe

000008ec <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
     8ec:	b480      	push	{r7}
     8ee:	b083      	sub	sp, #12
     8f0:	af00      	add	r7, sp, #0
     8f2:	6078      	str	r0, [r7, #4]
     8f4:	4a04      	ldr	r2, [pc, #16]	; (908 <_ZN17ConfigState_ClassD1Ev+0x1c>)
     8f6:	687b      	ldr	r3, [r7, #4]
     8f8:	601a      	str	r2, [r3, #0]
{
} //~ConfigState_Class
     8fa:	687b      	ldr	r3, [r7, #4]
     8fc:	4618      	mov	r0, r3
     8fe:	370c      	adds	r7, #12
     900:	46bd      	mov	sp, r7
     902:	bc80      	pop	{r7}
     904:	4770      	bx	lr
     906:	bf00      	nop
     908:	0001a3b0 	.word	0x0001a3b0

0000090c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb>:

void ConfigState_Class::SetFactoryDefaults(uint32_t subPartNumber, bool config, bool cycles)
{
     90c:	b580      	push	{r7, lr}
     90e:	b084      	sub	sp, #16
     910:	af00      	add	r7, sp, #0
     912:	60f8      	str	r0, [r7, #12]
     914:	60b9      	str	r1, [r7, #8]
     916:	4611      	mov	r1, r2
     918:	461a      	mov	r2, r3
     91a:	460b      	mov	r3, r1
     91c:	71fb      	strb	r3, [r7, #7]
     91e:	4613      	mov	r3, r2
     920:	71bb      	strb	r3, [r7, #6]
	
	if (config)
     922:	79fb      	ldrb	r3, [r7, #7]
     924:	2b00      	cmp	r3, #0
     926:	d010      	beq.n	94a <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x3e>
	{
		memcpy(&configuration, &factoryDefaultsConfiguration, sizeof(configuration));
     928:	68fb      	ldr	r3, [r7, #12]
     92a:	3380      	adds	r3, #128	; 0x80
     92c:	22ac      	movs	r2, #172	; 0xac
     92e:	4909      	ldr	r1, [pc, #36]	; (954 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x48>)
     930:	4618      	mov	r0, r3
     932:	4b09      	ldr	r3, [pc, #36]	; (958 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x4c>)
     934:	4798      	blx	r3
		configuration.commons.subPartNumber = subPartNumber;
     936:	68fb      	ldr	r3, [r7, #12]
     938:	68ba      	ldr	r2, [r7, #8]
     93a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		memory.writeConfigurationDataArea(configuration);
     93e:	68fb      	ldr	r3, [r7, #12]
     940:	3380      	adds	r3, #128	; 0x80
     942:	4619      	mov	r1, r3
     944:	4805      	ldr	r0, [pc, #20]	; (95c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x50>)
     946:	4b06      	ldr	r3, [pc, #24]	; (960 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x54>)
     948:	4798      	blx	r3
	}
	
	
}
     94a:	bf00      	nop
     94c:	3710      	adds	r7, #16
     94e:	46bd      	mov	sp, r7
     950:	bd80      	pop	{r7, pc}
     952:	bf00      	nop
     954:	0001a00c 	.word	0x0001a00c
     958:	0001631d 	.word	0x0001631d
     95c:	20001708 	.word	0x20001708
     960:	00001cd9 	.word	0x00001cd9

00000964 <_ZN17ConfigState_Class15SetInitialStateEv>:


uint32_t ConfigState_Class::SetInitialState(){
     964:	b580      	push	{r7, lr}
     966:	b084      	sub	sp, #16
     968:	af00      	add	r7, sp, #0
     96a:	6078      	str	r0, [r7, #4]
		uint32_t	r;
		r=memory.ReadApplicationState(lastState);
     96c:	687b      	ldr	r3, [r7, #4]
     96e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     972:	4619      	mov	r1, r3
     974:	4812      	ldr	r0, [pc, #72]	; (9c0 <_ZN17ConfigState_Class15SetInitialStateEv+0x5c>)
     976:	4b13      	ldr	r3, [pc, #76]	; (9c4 <_ZN17ConfigState_Class15SetInitialStateEv+0x60>)
     978:	4798      	blx	r3
     97a:	60f8      	str	r0, [r7, #12]
		if (memory.IsStateDataValid(lastState))
     97c:	687b      	ldr	r3, [r7, #4]
     97e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     982:	4619      	mov	r1, r3
     984:	4810      	ldr	r0, [pc, #64]	; (9c8 <_ZN17ConfigState_Class15SetInitialStateEv+0x64>)
     986:	4b11      	ldr	r3, [pc, #68]	; (9cc <_ZN17ConfigState_Class15SetInitialStateEv+0x68>)
     988:	4798      	blx	r3
     98a:	4603      	mov	r3, r0
     98c:	2b00      	cmp	r3, #0
     98e:	d007      	beq.n	9a0 <_ZN17ConfigState_Class15SetInitialStateEv+0x3c>
		{
				hvac.SetCurrentState(lastState);
     990:	687b      	ldr	r3, [r7, #4]
     992:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     996:	4619      	mov	r1, r3
     998:	480d      	ldr	r0, [pc, #52]	; (9d0 <_ZN17ConfigState_Class15SetInitialStateEv+0x6c>)
     99a:	4b0e      	ldr	r3, [pc, #56]	; (9d4 <_ZN17ConfigState_Class15SetInitialStateEv+0x70>)
     99c:	4798      	blx	r3
     99e:	e00a      	b.n	9b6 <_ZN17ConfigState_Class15SetInitialStateEv+0x52>
		} 
		else
		{			
			hvac.SetDefaultState();
     9a0:	480b      	ldr	r0, [pc, #44]	; (9d0 <_ZN17ConfigState_Class15SetInitialStateEv+0x6c>)
     9a2:	4b0d      	ldr	r3, [pc, #52]	; (9d8 <_ZN17ConfigState_Class15SetInitialStateEv+0x74>)
     9a4:	4798      	blx	r3
			memory.WriteValidApplicationState(hvac.defaultState);
     9a6:	490d      	ldr	r1, [pc, #52]	; (9dc <_ZN17ConfigState_Class15SetInitialStateEv+0x78>)
     9a8:	480d      	ldr	r0, [pc, #52]	; (9e0 <_ZN17ConfigState_Class15SetInitialStateEv+0x7c>)
     9aa:	4b0e      	ldr	r3, [pc, #56]	; (9e4 <_ZN17ConfigState_Class15SetInitialStateEv+0x80>)
     9ac:	4798      	blx	r3
			memory.WriteFastCurrentState(hvac.defaultState);
     9ae:	490b      	ldr	r1, [pc, #44]	; (9dc <_ZN17ConfigState_Class15SetInitialStateEv+0x78>)
     9b0:	480d      	ldr	r0, [pc, #52]	; (9e8 <_ZN17ConfigState_Class15SetInitialStateEv+0x84>)
     9b2:	4b0e      	ldr	r3, [pc, #56]	; (9ec <_ZN17ConfigState_Class15SetInitialStateEv+0x88>)
     9b4:	4798      	blx	r3
		}

		return r;
     9b6:	68fb      	ldr	r3, [r7, #12]
	};
     9b8:	4618      	mov	r0, r3
     9ba:	3710      	adds	r7, #16
     9bc:	46bd      	mov	sp, r7
     9be:	bd80      	pop	{r7, pc}
     9c0:	200018c4 	.word	0x200018c4
     9c4:	00001b29 	.word	0x00001b29
     9c8:	20001708 	.word	0x20001708
     9cc:	00001edd 	.word	0x00001edd
     9d0:	20001d28 	.word	0x20001d28
     9d4:	00002b89 	.word	0x00002b89
     9d8:	00000b69 	.word	0x00000b69
     9dc:	20001d2c 	.word	0x20001d2c
     9e0:	20001238 	.word	0x20001238
     9e4:	000017d1 	.word	0x000017d1
     9e8:	200018b4 	.word	0x200018b4
     9ec:	00000f5d 	.word	0x00000f5d

000009f0 <_ZN17ConfigState_Class10PrintStateEv>:
		st=is;
	}
	s=uint32_t(st.rawStatus);
	return	s;
}
void	ConfigState_Class::PrintState(void){
     9f0:	b580      	push	{r7, lr}
     9f2:	b0a8      	sub	sp, #160	; 0xa0
     9f4:	af00      	add	r7, sp, #0
     9f6:	6078      	str	r0, [r7, #4]
	HVACState	hs;
	bool	done=false;
     9f8:	2300      	movs	r3, #0
     9fa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	hvac.GetCurrentState(hs);
     9fe:	f107 030c 	add.w	r3, r7, #12
     a02:	4619      	mov	r1, r3
     a04:	4849      	ldr	r0, [pc, #292]	; (b2c <_ZN17ConfigState_Class10PrintStateEv+0x13c>)
     a06:	4b4a      	ldr	r3, [pc, #296]	; (b30 <_ZN17ConfigState_Class10PrintStateEv+0x140>)
     a08:	4798      	blx	r3
	uint32_t	nowTime=(uint32_t)hs.now;
     a0a:	693b      	ldr	r3, [r7, #16]
     a0c:	60bb      	str	r3, [r7, #8]
	char *act=ctime((time_t *)&nowTime);
     a0e:	f107 0308 	add.w	r3, r7, #8
     a12:	4618      	mov	r0, r3
     a14:	4b47      	ldr	r3, [pc, #284]	; (b34 <_ZN17ConfigState_Class10PrintStateEv+0x144>)
     a16:	4798      	blx	r3
     a18:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	k=sizeof(printableNamesHVACState)/(sizeof(char*));
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	2206      	movs	r2, #6
     a20:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
	for (i = 0; i < k; i++)
     a24:	687b      	ldr	r3, [r7, #4]
     a26:	2200      	movs	r2, #0
     a28:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
     a2c:	687b      	ldr	r3, [r7, #4]
     a2e:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
     a32:	461a      	mov	r2, r3
     a34:	687b      	ldr	r3, [r7, #4]
     a36:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
     a3a:	429a      	cmp	r2, r3
     a3c:	da71      	bge.n	b22 <_ZN17ConfigState_Class10PrintStateEv+0x132>
	{
	
		usb<<printableNamesHVACState[i]<<" : ";
     a3e:	687b      	ldr	r3, [r7, #4]
     a40:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
     a44:	009b      	lsls	r3, r3, #2
     a46:	4a3c      	ldr	r2, [pc, #240]	; (b38 <_ZN17ConfigState_Class10PrintStateEv+0x148>)
     a48:	4413      	add	r3, r2
     a4a:	4619      	mov	r1, r3
     a4c:	483b      	ldr	r0, [pc, #236]	; (b3c <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     a4e:	4b3c      	ldr	r3, [pc, #240]	; (b40 <_ZN17ConfigState_Class10PrintStateEv+0x150>)
     a50:	4798      	blx	r3
     a52:	4603      	mov	r3, r0
     a54:	493b      	ldr	r1, [pc, #236]	; (b44 <_ZN17ConfigState_Class10PrintStateEv+0x154>)
     a56:	4618      	mov	r0, r3
     a58:	4b3b      	ldr	r3, [pc, #236]	; (b48 <_ZN17ConfigState_Class10PrintStateEv+0x158>)
     a5a:	4798      	blx	r3
	
		switch (i)
     a5c:	687b      	ldr	r3, [r7, #4]
     a5e:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
     a62:	2b05      	cmp	r3, #5
     a64:	d84b      	bhi.n	afe <_ZN17ConfigState_Class10PrintStateEv+0x10e>
     a66:	a201      	add	r2, pc, #4	; (adr r2, a6c <_ZN17ConfigState_Class10PrintStateEv+0x7c>)
     a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a6c:	00000a85 	.word	0x00000a85
     a70:	00000a99 	.word	0x00000a99
     a74:	00000aad 	.word	0x00000aad
     a78:	00000ac1 	.word	0x00000ac1
     a7c:	00000add 	.word	0x00000add
     a80:	00000ae9 	.word	0x00000ae9
		{
			case 0:
				usb<<(uint32_t)hs.currentState;
     a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     a86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
     a8a:	f107 0388 	add.w	r3, r7, #136	; 0x88
     a8e:	4619      	mov	r1, r3
     a90:	482a      	ldr	r0, [pc, #168]	; (b3c <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     a92:	4b2e      	ldr	r3, [pc, #184]	; (b4c <_ZN17ConfigState_Class10PrintStateEv+0x15c>)
     a94:	4798      	blx	r3
			/* Your code here */
			break;
     a96:	e037      	b.n	b08 <_ZN17ConfigState_Class10PrintStateEv+0x118>
			case 1:
				usb<<(uint32_t)hs.cycleDuration;
     a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     a9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
     a9e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
     aa2:	4619      	mov	r1, r3
     aa4:	4825      	ldr	r0, [pc, #148]	; (b3c <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     aa6:	4b29      	ldr	r3, [pc, #164]	; (b4c <_ZN17ConfigState_Class10PrintStateEv+0x15c>)
     aa8:	4798      	blx	r3
			/* Your code here */
			break;
     aaa:	e02d      	b.n	b08 <_ZN17ConfigState_Class10PrintStateEv+0x118>
			case 2:
				usb<<(uint32_t)hs.remainingTime;
     aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
     ab2:	f107 0390 	add.w	r3, r7, #144	; 0x90
     ab6:	4619      	mov	r1, r3
     ab8:	4820      	ldr	r0, [pc, #128]	; (b3c <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     aba:	4b24      	ldr	r3, [pc, #144]	; (b4c <_ZN17ConfigState_Class10PrintStateEv+0x15c>)
     abc:	4798      	blx	r3
			/* Your code here */
			break;
     abe:	e023      	b.n	b08 <_ZN17ConfigState_Class10PrintStateEv+0x118>
			case 3:
				usb<<(uint32_t)hs.targetPower;
     ac0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     ac2:	4b23      	ldr	r3, [pc, #140]	; (b50 <_ZN17ConfigState_Class10PrintStateEv+0x160>)
     ac4:	4610      	mov	r0, r2
     ac6:	4798      	blx	r3
     ac8:	4603      	mov	r3, r0
     aca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
     ace:	f107 0394 	add.w	r3, r7, #148	; 0x94
     ad2:	4619      	mov	r1, r3
     ad4:	4819      	ldr	r0, [pc, #100]	; (b3c <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     ad6:	4b1d      	ldr	r3, [pc, #116]	; (b4c <_ZN17ConfigState_Class10PrintStateEv+0x15c>)
     ad8:	4798      	blx	r3
			/* Your code here */
			break;
     ada:	e015      	b.n	b08 <_ZN17ConfigState_Class10PrintStateEv+0x118>
			case 4:
				
				usb.print(act);
     adc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
     ae0:	4816      	ldr	r0, [pc, #88]	; (b3c <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     ae2:	4b1c      	ldr	r3, [pc, #112]	; (b54 <_ZN17ConfigState_Class10PrintStateEv+0x164>)
     ae4:	4798      	blx	r3
			/* Your code here */
			break;
     ae6:	e00f      	b.n	b08 <_ZN17ConfigState_Class10PrintStateEv+0x118>
			case 5:
				usb<<"0x";
     ae8:	491b      	ldr	r1, [pc, #108]	; (b58 <_ZN17ConfigState_Class10PrintStateEv+0x168>)
     aea:	4814      	ldr	r0, [pc, #80]	; (b3c <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     aec:	4b1b      	ldr	r3, [pc, #108]	; (b5c <_ZN17ConfigState_Class10PrintStateEv+0x16c>)
     aee:	4798      	blx	r3
				usb.print(hs.magic,HEX);
     af0:	68fb      	ldr	r3, [r7, #12]
     af2:	2210      	movs	r2, #16
     af4:	4619      	mov	r1, r3
     af6:	4811      	ldr	r0, [pc, #68]	; (b3c <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     af8:	4b19      	ldr	r3, [pc, #100]	; (b60 <_ZN17ConfigState_Class10PrintStateEv+0x170>)
     afa:	4798      	blx	r3
			
				/* Your code here */
			break;
     afc:	e004      	b.n	b08 <_ZN17ConfigState_Class10PrintStateEv+0x118>
			default:
				i=sizeof(printableNamesHVACState);
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	2218      	movs	r2, #24
     b02:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
				
			/* Your code here */
			break;
     b06:	bf00      	nop
		}
		usb<<NEWLINE;
     b08:	4916      	ldr	r1, [pc, #88]	; (b64 <_ZN17ConfigState_Class10PrintStateEv+0x174>)
     b0a:	480c      	ldr	r0, [pc, #48]	; (b3c <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     b0c:	4b13      	ldr	r3, [pc, #76]	; (b5c <_ZN17ConfigState_Class10PrintStateEv+0x16c>)
     b0e:	4798      	blx	r3
	for (i = 0; i < k; i++)
     b10:	687b      	ldr	r3, [r7, #4]
     b12:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
     b16:	3301      	adds	r3, #1
     b18:	b2da      	uxtb	r2, r3
     b1a:	687b      	ldr	r3, [r7, #4]
     b1c:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
     b20:	e784      	b.n	a2c <_ZN17ConfigState_Class10PrintStateEv+0x3c>
			
	}
	
}
     b22:	bf00      	nop
     b24:	37a0      	adds	r7, #160	; 0xa0
     b26:	46bd      	mov	sp, r7
     b28:	bd80      	pop	{r7, pc}
     b2a:	bf00      	nop
     b2c:	20001d28 	.word	0x20001d28
     b30:	00002b39 	.word	0x00002b39
     b34:	00016035 	.word	0x00016035
     b38:	20000050 	.word	0x20000050
     b3c:	20003e1c 	.word	0x20003e1c
     b40:	00000b8d 	.word	0x00000b8d
     b44:	0001a39c 	.word	0x0001a39c
     b48:	00000bb1 	.word	0x00000bb1
     b4c:	00000bd1 	.word	0x00000bd1
     b50:	00015ce5 	.word	0x00015ce5
     b54:	000137f5 	.word	0x000137f5
     b58:	0001a3a0 	.word	0x0001a3a0
     b5c:	00000629 	.word	0x00000629
     b60:	0001390d 	.word	0x0001390d
     b64:	0001a3a4 	.word	0x0001a3a4

00000b68 <_ZN17ConfigState_Class15SetDefaultStateEv>:
void	ConfigState_Class::SetDefaultState(void){
     b68:	b580      	push	{r7, lr}
     b6a:	b082      	sub	sp, #8
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
	hvac.SetCurrentState(defaultState);
     b70:	687b      	ldr	r3, [r7, #4]
     b72:	3304      	adds	r3, #4
     b74:	4619      	mov	r1, r3
     b76:	4803      	ldr	r0, [pc, #12]	; (b84 <_ZN17ConfigState_Class15SetDefaultStateEv+0x1c>)
     b78:	4b03      	ldr	r3, [pc, #12]	; (b88 <_ZN17ConfigState_Class15SetDefaultStateEv+0x20>)
     b7a:	4798      	blx	r3

}
     b7c:	bf00      	nop
     b7e:	3708      	adds	r7, #8
     b80:	46bd      	mov	sp, r7
     b82:	bd80      	pop	{r7, pc}
     b84:	20001d28 	.word	0x20001d28
     b88:	00002b89 	.word	0x00002b89

00000b8c <_ZlsIPKcER5PrintS3_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     b8c:	b580      	push	{r7, lr}
     b8e:	b082      	sub	sp, #8
     b90:	af00      	add	r7, sp, #0
     b92:	6078      	str	r0, [r7, #4]
     b94:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     b96:	683b      	ldr	r3, [r7, #0]
     b98:	681b      	ldr	r3, [r3, #0]
     b9a:	4619      	mov	r1, r3
     b9c:	6878      	ldr	r0, [r7, #4]
     b9e:	4b03      	ldr	r3, [pc, #12]	; (bac <_ZlsIPKcER5PrintS3_RKT_+0x20>)
     ba0:	4798      	blx	r3
     ba2:	687b      	ldr	r3, [r7, #4]
     ba4:	4618      	mov	r0, r3
     ba6:	3708      	adds	r7, #8
     ba8:	46bd      	mov	sp, r7
     baa:	bd80      	pop	{r7, pc}
     bac:	000137f5 	.word	0x000137f5

00000bb0 <_ZlsIA4_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     bb0:	b580      	push	{r7, lr}
     bb2:	b082      	sub	sp, #8
     bb4:	af00      	add	r7, sp, #0
     bb6:	6078      	str	r0, [r7, #4]
     bb8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     bba:	6839      	ldr	r1, [r7, #0]
     bbc:	6878      	ldr	r0, [r7, #4]
     bbe:	4b03      	ldr	r3, [pc, #12]	; (bcc <_ZlsIA4_cER5PrintS2_RKT_+0x1c>)
     bc0:	4798      	blx	r3
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	4618      	mov	r0, r3
     bc6:	3708      	adds	r7, #8
     bc8:	46bd      	mov	sp, r7
     bca:	bd80      	pop	{r7, pc}
     bcc:	000137f5 	.word	0x000137f5

00000bd0 <_ZlsImER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     bd0:	b580      	push	{r7, lr}
     bd2:	b082      	sub	sp, #8
     bd4:	af00      	add	r7, sp, #0
     bd6:	6078      	str	r0, [r7, #4]
     bd8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     bda:	683b      	ldr	r3, [r7, #0]
     bdc:	681b      	ldr	r3, [r3, #0]
     bde:	220a      	movs	r2, #10
     be0:	4619      	mov	r1, r3
     be2:	6878      	ldr	r0, [r7, #4]
     be4:	4b03      	ldr	r3, [pc, #12]	; (bf4 <_ZlsImER5PrintS1_RKT_+0x24>)
     be6:	4798      	blx	r3
     be8:	687b      	ldr	r3, [r7, #4]
     bea:	4618      	mov	r0, r3
     bec:	3708      	adds	r7, #8
     bee:	46bd      	mov	sp, r7
     bf0:	bd80      	pop	{r7, pc}
     bf2:	bf00      	nop
     bf4:	0001390d 	.word	0x0001390d

00000bf8 <_ZN11CRC32_ClassC1Ev>:


#include "CRC32_Class.h"

// default constructor
CRC32_Class::CRC32_Class()
     bf8:	b480      	push	{r7}
     bfa:	b083      	sub	sp, #12
     bfc:	af00      	add	r7, sp, #0
     bfe:	6078      	str	r0, [r7, #4]
{
} //CRC32_Class
     c00:	687b      	ldr	r3, [r7, #4]
     c02:	4618      	mov	r0, r3
     c04:	370c      	adds	r7, #12
     c06:	46bd      	mov	sp, r7
     c08:	bc80      	pop	{r7}
     c0a:	4770      	bx	lr

00000c0c <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
     c0c:	b480      	push	{r7}
     c0e:	b083      	sub	sp, #12
     c10:	af00      	add	r7, sp, #0
     c12:	6078      	str	r0, [r7, #4]
{
} //~CRC32_Class
     c14:	687b      	ldr	r3, [r7, #4]
     c16:	4618      	mov	r0, r3
     c18:	370c      	adds	r7, #12
     c1a:	46bd      	mov	sp, r7
     c1c:	bc80      	pop	{r7}
     c1e:	4770      	bx	lr

00000c20 <_ZN11CRC32_Class4InitEm>:

uint32_t	CRC32_Class::Init(uint32_t refCRC/* =0xFFFFFFFF */){
     c20:	b580      	push	{r7, lr}
     c22:	b082      	sub	sp, #8
     c24:	af00      	add	r7, sp, #0
     c26:	6078      	str	r0, [r7, #4]
     c28:	6039      	str	r1, [r7, #0]
	crc_sync_enable(&CRC_CALC);
     c2a:	4806      	ldr	r0, [pc, #24]	; (c44 <_ZN11CRC32_Class4InitEm+0x24>)
     c2c:	4b06      	ldr	r3, [pc, #24]	; (c48 <_ZN11CRC32_Class4InitEm+0x28>)
     c2e:	4798      	blx	r3
	refCRC32=refCRC;
     c30:	687b      	ldr	r3, [r7, #4]
     c32:	683a      	ldr	r2, [r7, #0]
     c34:	601a      	str	r2, [r3, #0]
	return	refCRC32;
     c36:	687b      	ldr	r3, [r7, #4]
     c38:	681b      	ldr	r3, [r3, #0]
}
     c3a:	4618      	mov	r0, r3
     c3c:	3708      	adds	r7, #8
     c3e:	46bd      	mov	sp, r7
     c40:	bd80      	pop	{r7, pc}
     c42:	bf00      	nop
     c44:	200040cc 	.word	0x200040cc
     c48:	000045ad 	.word	0x000045ad

00000c4c <_ZN11CRC32_Class12CalculateCRCEPmm>:
	crc_sync_enable(&CRC_CALC);
	crc_sync_crc32(&CRC_CALC, data, len, &crc);
	return (crc^0xFFFFFFFF);
}

uint32_t	CRC32_Class::CalculateCRC(uint32_t *const data, const uint32_t len){
     c4c:	b590      	push	{r4, r7, lr}
     c4e:	b087      	sub	sp, #28
     c50:	af00      	add	r7, sp, #0
     c52:	60f8      	str	r0, [r7, #12]
     c54:	60b9      	str	r1, [r7, #8]
     c56:	607a      	str	r2, [r7, #4]
	uint32_t crc=Init();
     c58:	f04f 31ff 	mov.w	r1, #4294967295
     c5c:	68f8      	ldr	r0, [r7, #12]
     c5e:	4b08      	ldr	r3, [pc, #32]	; (c80 <_ZN11CRC32_Class12CalculateCRCEPmm+0x34>)
     c60:	4798      	blx	r3
     c62:	4603      	mov	r3, r0
     c64:	617b      	str	r3, [r7, #20]
	crc_sync_crc32(&CRC_CALC, data, len, &crc);
     c66:	f107 0314 	add.w	r3, r7, #20
     c6a:	687a      	ldr	r2, [r7, #4]
     c6c:	68b9      	ldr	r1, [r7, #8]
     c6e:	4805      	ldr	r0, [pc, #20]	; (c84 <_ZN11CRC32_Class12CalculateCRCEPmm+0x38>)
     c70:	4c05      	ldr	r4, [pc, #20]	; (c88 <_ZN11CRC32_Class12CalculateCRCEPmm+0x3c>)
     c72:	47a0      	blx	r4
	return (crc^0xFFFFFFFF);
     c74:	697b      	ldr	r3, [r7, #20]
     c76:	43db      	mvns	r3, r3
     c78:	4618      	mov	r0, r3
     c7a:	371c      	adds	r7, #28
     c7c:	46bd      	mov	sp, r7
     c7e:	bd90      	pop	{r4, r7, pc}
     c80:	00000c21 	.word	0x00000c21
     c84:	200040cc 	.word	0x200040cc
     c88:	000045e9 	.word	0x000045e9

00000c8c <_ZN15DataLoger_ClassC1Ev>:
#include "DataLoger_Class.h"
#include "ConfigurationData.h"
#include "MemoryStruct_Class.h"

// default constructor
DataLoger_Class::DataLoger_Class()
     c8c:	b580      	push	{r7, lr}
     c8e:	b082      	sub	sp, #8
     c90:	af00      	add	r7, sp, #0
     c92:	6078      	str	r0, [r7, #4]
     c94:	687b      	ldr	r3, [r7, #4]
     c96:	4618      	mov	r0, r3
     c98:	4b06      	ldr	r3, [pc, #24]	; (cb4 <_ZN15DataLoger_ClassC1Ev+0x28>)
     c9a:	4798      	blx	r3
     c9c:	687b      	ldr	r3, [r7, #4]
     c9e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
     ca2:	4618      	mov	r0, r3
     ca4:	4b04      	ldr	r3, [pc, #16]	; (cb8 <_ZN15DataLoger_ClassC1Ev+0x2c>)
     ca6:	4798      	blx	r3
{
} //DataLoger_Class
     ca8:	687b      	ldr	r3, [r7, #4]
     caa:	4618      	mov	r0, r3
     cac:	3708      	adds	r7, #8
     cae:	46bd      	mov	sp, r7
     cb0:	bd80      	pop	{r7, pc}
     cb2:	bf00      	nop
     cb4:	0001232d 	.word	0x0001232d
     cb8:	00000cf1 	.word	0x00000cf1

00000cbc <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
     cbc:	b580      	push	{r7, lr}
     cbe:	b082      	sub	sp, #8
     cc0:	af00      	add	r7, sp, #0
     cc2:	6078      	str	r0, [r7, #4]
     cc4:	687b      	ldr	r3, [r7, #4]
     cc6:	4618      	mov	r0, r3
     cc8:	4b03      	ldr	r3, [pc, #12]	; (cd8 <_ZN15DataLoger_ClassD1Ev+0x1c>)
     cca:	4798      	blx	r3
{
} //~DataLoger_Class
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	4618      	mov	r0, r3
     cd0:	3708      	adds	r7, #8
     cd2:	46bd      	mov	sp, r7
     cd4:	bd80      	pop	{r7, pc}
     cd6:	bf00      	nop
     cd8:	00012369 	.word	0x00012369

00000cdc <_ZN15DataLoger_Class13LogResetEventEv>:
	uint32_t	r=flash.ReadAddress((uint8_t*)PTR_CONFIG_DATA(cd),add,sizeof(dataOnMemory));
	
	return	r;
}

uint32_t	DataLoger_Class::LogResetEvent(void){
     cdc:	b480      	push	{r7}
     cde:	b083      	sub	sp, #12
     ce0:	af00      	add	r7, sp, #0
     ce2:	6078      	str	r0, [r7, #4]
	return 0;
     ce4:	2300      	movs	r3, #0
     ce6:	4618      	mov	r0, r3
     ce8:	370c      	adds	r7, #12
     cea:	46bd      	mov	sp, r7
     cec:	bc80      	pop	{r7}
     cee:	4770      	bx	lr

00000cf0 <_ZN11RingBufferNILi512EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
     cf0:	b580      	push	{r7, lr}
     cf2:	b082      	sub	sp, #8
     cf4:	af00      	add	r7, sp, #0
     cf6:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
     cf8:	687b      	ldr	r3, [r7, #4]
     cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
     cfe:	2100      	movs	r1, #0
     d00:	4618      	mov	r0, r3
     d02:	4b05      	ldr	r3, [pc, #20]	; (d18 <_ZN11RingBufferNILi512EEC1Ev+0x28>)
     d04:	4798      	blx	r3
    clear();
     d06:	6878      	ldr	r0, [r7, #4]
     d08:	4b04      	ldr	r3, [pc, #16]	; (d1c <_ZN11RingBufferNILi512EEC1Ev+0x2c>)
     d0a:	4798      	blx	r3
}
     d0c:	687b      	ldr	r3, [r7, #4]
     d0e:	4618      	mov	r0, r3
     d10:	3708      	adds	r7, #8
     d12:	46bd      	mov	sp, r7
     d14:	bd80      	pop	{r7, pc}
     d16:	bf00      	nop
     d18:	00016451 	.word	0x00016451
     d1c:	00000d21 	.word	0x00000d21

00000d20 <_ZN11RingBufferNILi512EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
     d20:	b480      	push	{r7}
     d22:	b083      	sub	sp, #12
     d24:	af00      	add	r7, sp, #0
     d26:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	2200      	movs	r2, #0
     d2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  _iTail = 0;
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	2200      	movs	r2, #0
     d34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
     d38:	bf00      	nop
     d3a:	370c      	adds	r7, #12
     d3c:	46bd      	mov	sp, r7
     d3e:	bc80      	pop	{r7}
     d40:	4770      	bx	lr
	...

00000d44 <_ZN14DateTime_ClassC1Ev>:

#include "DateTime_Class.h"
#include "FastStorage_Class.h"

// default constructor
DateTime_Class::DateTime_Class()
     d44:	b580      	push	{r7, lr}
     d46:	b082      	sub	sp, #8
     d48:	af00      	add	r7, sp, #0
     d4a:	6078      	str	r0, [r7, #4]
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	33a8      	adds	r3, #168	; 0xa8
     d50:	4618      	mov	r0, r3
     d52:	4b07      	ldr	r3, [pc, #28]	; (d70 <_ZN14DateTime_ClassC1Ev+0x2c>)
     d54:	4798      	blx	r3
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	4618      	mov	r0, r3
     d5a:	4b06      	ldr	r3, [pc, #24]	; (d74 <_ZN14DateTime_ClassC1Ev+0x30>)
     d5c:	4798      	blx	r3
     d5e:	4a06      	ldr	r2, [pc, #24]	; (d78 <_ZN14DateTime_ClassC1Ev+0x34>)
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	601a      	str	r2, [r3, #0]
{
} //DateTime_Class
     d64:	687b      	ldr	r3, [r7, #4]
     d66:	4618      	mov	r0, r3
     d68:	3708      	adds	r7, #8
     d6a:	46bd      	mov	sp, r7
     d6c:	bd80      	pop	{r7, pc}
     d6e:	bf00      	nop
     d70:	00000ee7 	.word	0x00000ee7
     d74:	00012591 	.word	0x00012591
     d78:	0001a3bc 	.word	0x0001a3bc

00000d7c <_ZN14DateTime_ClassD1Ev>:

// default destructor
DateTime_Class::~DateTime_Class()
     d7c:	b580      	push	{r7, lr}
     d7e:	b082      	sub	sp, #8
     d80:	af00      	add	r7, sp, #0
     d82:	6078      	str	r0, [r7, #4]
     d84:	4a08      	ldr	r2, [pc, #32]	; (da8 <_ZN14DateTime_ClassD1Ev+0x2c>)
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	601a      	str	r2, [r3, #0]
     d8a:	687b      	ldr	r3, [r7, #4]
     d8c:	4618      	mov	r0, r3
     d8e:	4b07      	ldr	r3, [pc, #28]	; (dac <_ZN14DateTime_ClassD1Ev+0x30>)
     d90:	4798      	blx	r3
     d92:	687b      	ldr	r3, [r7, #4]
     d94:	33a8      	adds	r3, #168	; 0xa8
     d96:	4618      	mov	r0, r3
     d98:	4b05      	ldr	r3, [pc, #20]	; (db0 <_ZN14DateTime_ClassD1Ev+0x34>)
     d9a:	4798      	blx	r3
{
} //~DateTime_Class
     d9c:	687b      	ldr	r3, [r7, #4]
     d9e:	4618      	mov	r0, r3
     da0:	3708      	adds	r7, #8
     da2:	46bd      	mov	sp, r7
     da4:	bd80      	pop	{r7, pc}
     da6:	bf00      	nop
     da8:	0001a3bc 	.word	0x0001a3bc
     dac:	00012601 	.word	0x00012601
     db0:	00000efb 	.word	0x00000efb

00000db4 <_ZN14DateTime_Class4InitEv>:

void	DateTime_Class::Init(){
     db4:	b580      	push	{r7, lr}
     db6:	b084      	sub	sp, #16
     db8:	af00      	add	r7, sp, #0
     dba:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&eepromMap->stack;
     dbc:	4b0b      	ldr	r3, [pc, #44]	; (dec <_ZN14DateTime_Class4InitEv+0x38>)
     dbe:	681b      	ldr	r3, [r3, #0]
     dc0:	330c      	adds	r3, #12
     dc2:	60fb      	str	r3, [r7, #12]
	calendar.SetCalendarStackAddress(add);
     dc4:	68f9      	ldr	r1, [r7, #12]
     dc6:	480a      	ldr	r0, [pc, #40]	; (df0 <_ZN14DateTime_Class4InitEv+0x3c>)
     dc8:	4b0a      	ldr	r3, [pc, #40]	; (df4 <_ZN14DateTime_Class4InitEv+0x40>)
     dca:	4798      	blx	r3
	uint32_t	addTimeLogs=(uint32_t)&eepromMap->timeLogs[0];
     dcc:	4b07      	ldr	r3, [pc, #28]	; (dec <_ZN14DateTime_Class4InitEv+0x38>)
     dce:	681b      	ldr	r3, [r3, #0]
     dd0:	330c      	adds	r3, #12
     dd2:	60bb      	str	r3, [r7, #8]
	calendar.SetCalendarAddress(addTimeLogs);
     dd4:	68b9      	ldr	r1, [r7, #8]
     dd6:	4806      	ldr	r0, [pc, #24]	; (df0 <_ZN14DateTime_Class4InitEv+0x3c>)
     dd8:	4b07      	ldr	r3, [pc, #28]	; (df8 <_ZN14DateTime_Class4InitEv+0x44>)
     dda:	4798      	blx	r3
	calendar.Init();
     ddc:	4804      	ldr	r0, [pc, #16]	; (df0 <_ZN14DateTime_Class4InitEv+0x3c>)
     dde:	4b07      	ldr	r3, [pc, #28]	; (dfc <_ZN14DateTime_Class4InitEv+0x48>)
     de0:	4798      	blx	r3
	
}
     de2:	bf00      	nop
     de4:	3710      	adds	r7, #16
     de6:	46bd      	mov	sp, r7
     de8:	bd80      	pop	{r7, pc}
     dea:	bf00      	nop
     dec:	200011b0 	.word	0x200011b0
     df0:	20003ce8 	.word	0x20003ce8
     df4:	00012f11 	.word	0x00012f11
     df8:	00012f31 	.word	0x00012f31
     dfc:	00012629 	.word	0x00012629

00000e00 <_Z41__static_initialization_and_destruction_0ii>:

     e00:	b580      	push	{r7, lr}
     e02:	b082      	sub	sp, #8
     e04:	af00      	add	r7, sp, #0
     e06:	6078      	str	r0, [r7, #4]
     e08:	6039      	str	r1, [r7, #0]
     e0a:	687b      	ldr	r3, [r7, #4]
     e0c:	2b01      	cmp	r3, #1
     e0e:	d10c      	bne.n	e2a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     e10:	683b      	ldr	r3, [r7, #0]
     e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
     e16:	4293      	cmp	r3, r2
     e18:	d107      	bne.n	e2a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     e1a:	4806      	ldr	r0, [pc, #24]	; (e34 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     e1c:	4b06      	ldr	r3, [pc, #24]	; (e38 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     e1e:	4798      	blx	r3
     e20:	4a06      	ldr	r2, [pc, #24]	; (e3c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     e22:	4907      	ldr	r1, [pc, #28]	; (e40 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     e24:	4803      	ldr	r0, [pc, #12]	; (e34 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     e26:	4b07      	ldr	r3, [pc, #28]	; (e44 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     e28:	4798      	blx	r3
     e2a:	bf00      	nop
     e2c:	3708      	adds	r7, #8
     e2e:	46bd      	mov	sp, r7
     e30:	bd80      	pop	{r7, pc}
     e32:	bf00      	nop
     e34:	200010f8 	.word	0x200010f8
     e38:	00000d45 	.word	0x00000d45
     e3c:	20000000 	.word	0x20000000
     e40:	00000d7d 	.word	0x00000d7d
     e44:	0001427d 	.word	0x0001427d

00000e48 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev>:
     e48:	b580      	push	{r7, lr}
     e4a:	af00      	add	r7, sp, #0
     e4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     e50:	2001      	movs	r0, #1
     e52:	4b01      	ldr	r3, [pc, #4]	; (e58 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x10>)
     e54:	4798      	blx	r3
     e56:	bd80      	pop	{r7, pc}
     e58:	00000e01 	.word	0x00000e01

00000e5c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     e5c:	b580      	push	{r7, lr}
     e5e:	b082      	sub	sp, #8
     e60:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     e62:	4b16      	ldr	r3, [pc, #88]	; (ebc <Reset_Handler+0x60>)
     e64:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     e66:	4b16      	ldr	r3, [pc, #88]	; (ec0 <Reset_Handler+0x64>)
     e68:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     e6a:	687a      	ldr	r2, [r7, #4]
     e6c:	683b      	ldr	r3, [r7, #0]
     e6e:	429a      	cmp	r2, r3
     e70:	d00c      	beq.n	e8c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     e72:	e007      	b.n	e84 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     e74:	683b      	ldr	r3, [r7, #0]
     e76:	1d1a      	adds	r2, r3, #4
     e78:	603a      	str	r2, [r7, #0]
     e7a:	687a      	ldr	r2, [r7, #4]
     e7c:	1d11      	adds	r1, r2, #4
     e7e:	6079      	str	r1, [r7, #4]
     e80:	6812      	ldr	r2, [r2, #0]
     e82:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     e84:	683b      	ldr	r3, [r7, #0]
     e86:	4a0f      	ldr	r2, [pc, #60]	; (ec4 <Reset_Handler+0x68>)
     e88:	4293      	cmp	r3, r2
     e8a:	d3f3      	bcc.n	e74 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     e8c:	4b0e      	ldr	r3, [pc, #56]	; (ec8 <Reset_Handler+0x6c>)
     e8e:	603b      	str	r3, [r7, #0]
     e90:	e004      	b.n	e9c <Reset_Handler+0x40>
                *pDest++ = 0;
     e92:	683b      	ldr	r3, [r7, #0]
     e94:	1d1a      	adds	r2, r3, #4
     e96:	603a      	str	r2, [r7, #0]
     e98:	2200      	movs	r2, #0
     e9a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     e9c:	683b      	ldr	r3, [r7, #0]
     e9e:	4a0b      	ldr	r2, [pc, #44]	; (ecc <Reset_Handler+0x70>)
     ea0:	4293      	cmp	r3, r2
     ea2:	d3f6      	bcc.n	e92 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     ea4:	4b0a      	ldr	r3, [pc, #40]	; (ed0 <Reset_Handler+0x74>)
     ea6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     ea8:	4a0a      	ldr	r2, [pc, #40]	; (ed4 <Reset_Handler+0x78>)
     eaa:	687b      	ldr	r3, [r7, #4]
     eac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     eb0:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     eb2:	4b09      	ldr	r3, [pc, #36]	; (ed8 <Reset_Handler+0x7c>)
     eb4:	4798      	blx	r3

        /* Branch to main function */
        main();
     eb6:	4b09      	ldr	r3, [pc, #36]	; (edc <Reset_Handler+0x80>)
     eb8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     eba:	e7fe      	b.n	eba <Reset_Handler+0x5e>
     ebc:	0001be4c 	.word	0x0001be4c
     ec0:	20000000 	.word	0x20000000
     ec4:	20000b94 	.word	0x20000b94
     ec8:	20000b98 	.word	0x20000b98
     ecc:	2000413c 	.word	0x2000413c
     ed0:	00000000 	.word	0x00000000
     ed4:	e000ed00 	.word	0xe000ed00
     ed8:	00016085 	.word	0x00016085
     edc:	00001391 	.word	0x00001391

00000ee0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     ee0:	b480      	push	{r7}
     ee2:	af00      	add	r7, sp, #0
        while (1) {
     ee4:	e7fe      	b.n	ee4 <Dummy_Handler+0x4>

00000ee6 <_ZN17FastStorage_ClassC1Ev>:
#include "MemoryManagment_Class.h"

EEPROMMemoryStruct		*eepromMap=NULL;

// default constructor
FastStorage_Class::FastStorage_Class()
     ee6:	b480      	push	{r7}
     ee8:	b083      	sub	sp, #12
     eea:	af00      	add	r7, sp, #0
     eec:	6078      	str	r0, [r7, #4]
{
} //FastStorage_Class
     eee:	687b      	ldr	r3, [r7, #4]
     ef0:	4618      	mov	r0, r3
     ef2:	370c      	adds	r7, #12
     ef4:	46bd      	mov	sp, r7
     ef6:	bc80      	pop	{r7}
     ef8:	4770      	bx	lr

00000efa <_ZN17FastStorage_ClassD1Ev>:

// default destructor
FastStorage_Class::~FastStorage_Class()
     efa:	b480      	push	{r7}
     efc:	b083      	sub	sp, #12
     efe:	af00      	add	r7, sp, #0
     f00:	6078      	str	r0, [r7, #4]
{
} //~FastStorage_Class
     f02:	687b      	ldr	r3, [r7, #4]
     f04:	4618      	mov	r0, r3
     f06:	370c      	adds	r7, #12
     f08:	46bd      	mov	sp, r7
     f0a:	bc80      	pop	{r7}
     f0c:	4770      	bx	lr
	...

00000f10 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState>:
	add32=(uint32_t)&eepromMap->crcAppState;
	eepromAddress=(uint16_t)(0xffff&add32);
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(&crc),eepromAddress,sizeof(uint32_t));
	return	crc;
}
uint32_t	FastStorage_Class::ReadFastApplicationState(HVACState& hs){
     f10:	b590      	push	{r4, r7, lr}
     f12:	b087      	sub	sp, #28
     f14:	af00      	add	r7, sp, #0
     f16:	6078      	str	r0, [r7, #4]
     f18:	6039      	str	r1, [r7, #0]
	uint32_t	crc,add32,r;
	add32=(uint32_t)&eepromMap->appState;
     f1a:	4b0d      	ldr	r3, [pc, #52]	; (f50 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x40>)
     f1c:	681b      	ldr	r3, [r3, #0]
     f1e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
     f22:	617b      	str	r3, [r7, #20]
	eepromAddress=(uint16_t)(0xffff&add32);
     f24:	697b      	ldr	r3, [r7, #20]
     f26:	b29a      	uxth	r2, r3
     f28:	687b      	ldr	r3, [r7, #4]
     f2a:	819a      	strh	r2, [r3, #12]
	handlerAppState=PTR_HVAC_STATE(&hs);
     f2c:	683a      	ldr	r2, [r7, #0]
     f2e:	687b      	ldr	r3, [r7, #4]
     f30:	601a      	str	r2, [r3, #0]
	r=eeprom.ReadAddress((uint8_t*)handlerAppState,eepromAddress,sizeof(HVACState));
     f32:	687b      	ldr	r3, [r7, #4]
     f34:	6819      	ldr	r1, [r3, #0]
     f36:	687b      	ldr	r3, [r7, #4]
     f38:	899a      	ldrh	r2, [r3, #12]
     f3a:	237c      	movs	r3, #124	; 0x7c
     f3c:	4805      	ldr	r0, [pc, #20]	; (f54 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x44>)
     f3e:	4c06      	ldr	r4, [pc, #24]	; (f58 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x48>)
     f40:	47a0      	blx	r4
     f42:	6138      	str	r0, [r7, #16]
	return	crc;
     f44:	68fb      	ldr	r3, [r7, #12]
}
     f46:	4618      	mov	r0, r3
     f48:	371c      	adds	r7, #28
     f4a:	46bd      	mov	sp, r7
     f4c:	bd90      	pop	{r4, r7, pc}
     f4e:	bf00      	nop
     f50:	200011b0 	.word	0x200011b0
     f54:	20003a98 	.word	0x20003a98
     f58:	00011d9d 	.word	0x00011d9d

00000f5c <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState>:
	eepromAddress=(uint16_t)(0xffff&add32);
	handlerCalendar=(PTR_DATE_TIME)(&cdt);
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(handlerCalendar),(uint8_t)eepromAddress,sizeof(calendar_date_time)*AT24MAC_BUFFER_SIZE);
	return	r;
}
uint32_t	FastStorage_Class::WriteFastCurrentState(HVACState& hs){
     f5c:	b580      	push	{r7, lr}
     f5e:	b084      	sub	sp, #16
     f60:	af00      	add	r7, sp, #0
     f62:	6078      	str	r0, [r7, #4]
     f64:	6039      	str	r1, [r7, #0]
	uint32_t	add32=(uint32_t)&eepromMap->appState;
     f66:	4b12      	ldr	r3, [pc, #72]	; (fb0 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x54>)
     f68:	681b      	ldr	r3, [r3, #0]
     f6a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
     f6e:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
     f70:	68fb      	ldr	r3, [r7, #12]
     f72:	b29a      	uxth	r2, r3
     f74:	687b      	ldr	r3, [r7, #4]
     f76:	819a      	strh	r2, [r3, #12]
	uint32_t	w=WriteFastAppState(hs,eepromAddress);
     f78:	687b      	ldr	r3, [r7, #4]
     f7a:	899b      	ldrh	r3, [r3, #12]
     f7c:	461a      	mov	r2, r3
     f7e:	6839      	ldr	r1, [r7, #0]
     f80:	6878      	ldr	r0, [r7, #4]
     f82:	4b0c      	ldr	r3, [pc, #48]	; (fb4 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x58>)
     f84:	4798      	blx	r3
     f86:	60b8      	str	r0, [r7, #8]
	crc32=		memory.CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
     f88:	227c      	movs	r2, #124	; 0x7c
     f8a:	6839      	ldr	r1, [r7, #0]
     f8c:	480a      	ldr	r0, [pc, #40]	; (fb8 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x5c>)
     f8e:	4b0b      	ldr	r3, [pc, #44]	; (fbc <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x60>)
     f90:	4798      	blx	r3
     f92:	4602      	mov	r2, r0
     f94:	687b      	ldr	r3, [r7, #4]
     f96:	609a      	str	r2, [r3, #8]
	w=WriteFastCRCAppState(crc32);
     f98:	687b      	ldr	r3, [r7, #4]
     f9a:	689b      	ldr	r3, [r3, #8]
     f9c:	4619      	mov	r1, r3
     f9e:	6878      	ldr	r0, [r7, #4]
     fa0:	4b07      	ldr	r3, [pc, #28]	; (fc0 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x64>)
     fa2:	4798      	blx	r3
     fa4:	60b8      	str	r0, [r7, #8]
	return	w;
     fa6:	68bb      	ldr	r3, [r7, #8]
}
     fa8:	4618      	mov	r0, r3
     faa:	3710      	adds	r7, #16
     fac:	46bd      	mov	sp, r7
     fae:	bd80      	pop	{r7, pc}
     fb0:	200011b0 	.word	0x200011b0
     fb4:	00000fc5 	.word	0x00000fc5
     fb8:	20001708 	.word	0x20001708
     fbc:	00000c4d 	.word	0x00000c4d
     fc0:	00000ffd 	.word	0x00000ffd

00000fc4 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem>:
uint32_t	FastStorage_Class::WriteFastAppState(HVACState& hs,uint32_t add){
     fc4:	b590      	push	{r4, r7, lr}
     fc6:	b087      	sub	sp, #28
     fc8:	af00      	add	r7, sp, #0
     fca:	60f8      	str	r0, [r7, #12]
     fcc:	60b9      	str	r1, [r7, #8]
     fce:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
     fd0:	68ba      	ldr	r2, [r7, #8]
     fd2:	68fb      	ldr	r3, [r7, #12]
     fd4:	601a      	str	r2, [r3, #0]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)handlerAppState,(uint16_t)add,sizeof(HVACState));
     fd6:	68fb      	ldr	r3, [r7, #12]
     fd8:	6819      	ldr	r1, [r3, #0]
     fda:	687b      	ldr	r3, [r7, #4]
     fdc:	b29a      	uxth	r2, r3
     fde:	237c      	movs	r3, #124	; 0x7c
     fe0:	4804      	ldr	r0, [pc, #16]	; (ff4 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x30>)
     fe2:	4c05      	ldr	r4, [pc, #20]	; (ff8 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x34>)
     fe4:	47a0      	blx	r4
     fe6:	6178      	str	r0, [r7, #20]
	return	w;
     fe8:	697b      	ldr	r3, [r7, #20]
}
     fea:	4618      	mov	r0, r3
     fec:	371c      	adds	r7, #28
     fee:	46bd      	mov	sp, r7
     ff0:	bd90      	pop	{r4, r7, pc}
     ff2:	bf00      	nop
     ff4:	20003a98 	.word	0x20003a98
     ff8:	00011c91 	.word	0x00011c91

00000ffc <_ZN17FastStorage_Class20WriteFastCRCAppStateEm>:
uint32_t	FastStorage_Class::WriteFastCRCAppState(uint32_t crc){
     ffc:	b590      	push	{r4, r7, lr}
     ffe:	b085      	sub	sp, #20
    1000:	af00      	add	r7, sp, #0
    1002:	6078      	str	r0, [r7, #4]
    1004:	6039      	str	r1, [r7, #0]
	uint16_t	add=(uint32_t)&eepromMap->crcAppState;
    1006:	4b08      	ldr	r3, [pc, #32]	; (1028 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x2c>)
    1008:	681b      	ldr	r3, [r3, #0]
    100a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
    100e:	81fb      	strh	r3, [r7, #14]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&crc),(uint16_t)add,sizeof(uint32_t));
    1010:	89fa      	ldrh	r2, [r7, #14]
    1012:	4639      	mov	r1, r7
    1014:	2304      	movs	r3, #4
    1016:	4805      	ldr	r0, [pc, #20]	; (102c <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x30>)
    1018:	4c05      	ldr	r4, [pc, #20]	; (1030 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x34>)
    101a:	47a0      	blx	r4
    101c:	60b8      	str	r0, [r7, #8]
	return	w;
    101e:	68bb      	ldr	r3, [r7, #8]
    1020:	4618      	mov	r0, r3
    1022:	3714      	adds	r7, #20
    1024:	46bd      	mov	sp, r7
    1026:	bd90      	pop	{r4, r7, pc}
    1028:	200011b0 	.word	0x200011b0
    102c:	20003a98 	.word	0x20003a98
    1030:	00011c91 	.word	0x00011c91

00001034 <_ZN9eventDataC1Ei>:
inline eventData::eventData(int v)
    1034:	b480      	push	{r7}
    1036:	b083      	sub	sp, #12
    1038:	af00      	add	r7, sp, #0
    103a:	6078      	str	r0, [r7, #4]
    103c:	6039      	str	r1, [r7, #0]
	integerData = v;
    103e:	687b      	ldr	r3, [r7, #4]
    1040:	683a      	ldr	r2, [r7, #0]
    1042:	601a      	str	r2, [r3, #0]
	}
    1044:	687b      	ldr	r3, [r7, #4]
    1046:	4618      	mov	r0, r3
    1048:	370c      	adds	r7, #12
    104a:	46bd      	mov	sp, r7
    104c:	bc80      	pop	{r7}
    104e:	4770      	bx	lr

00001050 <_ZN5eventC1E10EventClass9EventTypeRK9eventData>:
inline event::event()
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
	{
	}

inline event::event(EventClass c, EventType t, const eventData& d)
    1050:	b480      	push	{r7}
    1052:	b085      	sub	sp, #20
    1054:	af00      	add	r7, sp, #0
    1056:	60f8      	str	r0, [r7, #12]
    1058:	607b      	str	r3, [r7, #4]
    105a:	460b      	mov	r3, r1
    105c:	817b      	strh	r3, [r7, #10]
    105e:	4613      	mov	r3, r2
    1060:	813b      	strh	r3, [r7, #8]
	:eventClass(c), eventType(t), timestamp(0), data(d), next(NULL)
    1062:	68fb      	ldr	r3, [r7, #12]
    1064:	897a      	ldrh	r2, [r7, #10]
    1066:	801a      	strh	r2, [r3, #0]
    1068:	68fb      	ldr	r3, [r7, #12]
    106a:	893a      	ldrh	r2, [r7, #8]
    106c:	805a      	strh	r2, [r3, #2]
    106e:	68fb      	ldr	r3, [r7, #12]
    1070:	2200      	movs	r2, #0
    1072:	605a      	str	r2, [r3, #4]
    1074:	68fb      	ldr	r3, [r7, #12]
    1076:	687a      	ldr	r2, [r7, #4]
    1078:	6812      	ldr	r2, [r2, #0]
    107a:	609a      	str	r2, [r3, #8]
    107c:	68fb      	ldr	r3, [r7, #12]
    107e:	2200      	movs	r2, #0
    1080:	60da      	str	r2, [r3, #12]
	{
	}
    1082:	68fb      	ldr	r3, [r7, #12]
    1084:	4618      	mov	r0, r3
    1086:	3714      	adds	r7, #20
    1088:	46bd      	mov	sp, r7
    108a:	bc80      	pop	{r7}
    108c:	4770      	bx	lr

0000108e <_ZN16Interfaces_ClassC1Ev>:
#include "Interfaces_Class.h"
#include "CDC_Class.h"
#include "States_Class.h"

// default constructor
Interfaces_Class::Interfaces_Class()
    108e:	b480      	push	{r7}
    1090:	b083      	sub	sp, #12
    1092:	af00      	add	r7, sp, #0
    1094:	6078      	str	r0, [r7, #4]
{
} //Interfaces_Class
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	4618      	mov	r0, r3
    109a:	370c      	adds	r7, #12
    109c:	46bd      	mov	sp, r7
    109e:	bc80      	pop	{r7}
    10a0:	4770      	bx	lr

000010a2 <_ZN16Interfaces_ClassD1Ev>:

// default destructor
Interfaces_Class::~Interfaces_Class()
    10a2:	b480      	push	{r7}
    10a4:	b083      	sub	sp, #12
    10a6:	af00      	add	r7, sp, #0
    10a8:	6078      	str	r0, [r7, #4]
{
} //~Interfaces_Class
    10aa:	687b      	ldr	r3, [r7, #4]
    10ac:	4618      	mov	r0, r3
    10ae:	370c      	adds	r7, #12
    10b0:	46bd      	mov	sp, r7
    10b2:	bc80      	pop	{r7}
    10b4:	4770      	bx	lr
	...

000010b8 <_ZN16Interfaces_Class18CheckCommunicationEv>:

uint32_t Interfaces_Class::CheckCommunication(void)
{
    10b8:	b590      	push	{r4, r7, lr}
    10ba:	b089      	sub	sp, #36	; 0x24
    10bc:	af00      	add	r7, sp, #0
    10be:	6078      	str	r0, [r7, #4]
	uint32_t	r;

	
	if (usb.terminalStarted)
    10c0:	4b11      	ldr	r3, [pc, #68]	; (1108 <_ZN16Interfaces_Class18CheckCommunicationEv+0x50>)
    10c2:	7c5b      	ldrb	r3, [r3, #17]
    10c4:	b2db      	uxtb	r3, r3
    10c6:	2b00      	cmp	r3, #0
    10c8:	d003      	beq.n	10d2 <_ZN16Interfaces_Class18CheckCommunicationEv+0x1a>
	{
		
		hvac.PrintState();	
    10ca:	4810      	ldr	r0, [pc, #64]	; (110c <_ZN16Interfaces_Class18CheckCommunicationEv+0x54>)
    10cc:	4b10      	ldr	r3, [pc, #64]	; (1110 <_ZN16Interfaces_Class18CheckCommunicationEv+0x58>)
    10ce:	4798      	blx	r3
    10d0:	e014      	b.n	10fc <_ZN16Interfaces_Class18CheckCommunicationEv+0x44>
	}else{
		event	e(kCommunicationEventClass,kInterfaceAvailable);
    10d2:	f107 031c 	add.w	r3, r7, #28
    10d6:	2100      	movs	r1, #0
    10d8:	4618      	mov	r0, r3
    10da:	4b0e      	ldr	r3, [pc, #56]	; (1114 <_ZN16Interfaces_Class18CheckCommunicationEv+0x5c>)
    10dc:	4798      	blx	r3
    10de:	f107 031c 	add.w	r3, r7, #28
    10e2:	f107 000c 	add.w	r0, r7, #12
    10e6:	220c      	movs	r2, #12
    10e8:	f44f 4110 	mov.w	r1, #36864	; 0x9000
    10ec:	4c0a      	ldr	r4, [pc, #40]	; (1118 <_ZN16Interfaces_Class18CheckCommunicationEv+0x60>)
    10ee:	47a0      	blx	r4
		listener.SendEventSelf(e);
    10f0:	f107 030c 	add.w	r3, r7, #12
    10f4:	4619      	mov	r1, r3
    10f6:	4809      	ldr	r0, [pc, #36]	; (111c <_ZN16Interfaces_Class18CheckCommunicationEv+0x64>)
    10f8:	4b09      	ldr	r3, [pc, #36]	; (1120 <_ZN16Interfaces_Class18CheckCommunicationEv+0x68>)
    10fa:	4798      	blx	r3
		
	}
	
	return	0;
    10fc:	2300      	movs	r3, #0
}
    10fe:	4618      	mov	r0, r3
    1100:	3724      	adds	r7, #36	; 0x24
    1102:	46bd      	mov	sp, r7
    1104:	bd90      	pop	{r4, r7, pc}
    1106:	bf00      	nop
    1108:	20003e1c 	.word	0x20003e1c
    110c:	20001d28 	.word	0x20001d28
    1110:	000009f1 	.word	0x000009f1
    1114:	00001035 	.word	0x00001035
    1118:	00001051 	.word	0x00001051
    111c:	20003a74 	.word	0x20003a74
    1120:	000117f9 	.word	0x000117f9

00001124 <_ZN16Interfaces_Class9GetStatusER10HVACStatus>:

uint32_t	Interfaces_Class::GetStatus(HVACStatus& s){
    1124:	b480      	push	{r7}
    1126:	b085      	sub	sp, #20
    1128:	af00      	add	r7, sp, #0
    112a:	6078      	str	r0, [r7, #4]
    112c:	6039      	str	r1, [r7, #0]
	s=status;
    112e:	683a      	ldr	r2, [r7, #0]
    1130:	687b      	ldr	r3, [r7, #4]
    1132:	337c      	adds	r3, #124	; 0x7c
    1134:	e893 0003 	ldmia.w	r3, {r0, r1}
    1138:	e882 0003 	stmia.w	r2, {r0, r1}
	uint32_t	*p=(uint32_t*)(&s.statusBits);
    113c:	683b      	ldr	r3, [r7, #0]
    113e:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    1140:	2300      	movs	r3, #0
    1142:	60bb      	str	r3, [r7, #8]
    1144:	68bb      	ldr	r3, [r7, #8]
    1146:	2b03      	cmp	r3, #3
    1148:	d812      	bhi.n	1170 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x4c>
	{
		s.rawStatus+=(*p)&(0x01<<i);
    114a:	683b      	ldr	r3, [r7, #0]
    114c:	685a      	ldr	r2, [r3, #4]
    114e:	68fb      	ldr	r3, [r7, #12]
    1150:	681b      	ldr	r3, [r3, #0]
    1152:	2001      	movs	r0, #1
    1154:	68b9      	ldr	r1, [r7, #8]
    1156:	fa00 f101 	lsl.w	r1, r0, r1
    115a:	400b      	ands	r3, r1
    115c:	441a      	add	r2, r3
    115e:	683b      	ldr	r3, [r7, #0]
    1160:	605a      	str	r2, [r3, #4]
		p++;
    1162:	68fb      	ldr	r3, [r7, #12]
    1164:	3304      	adds	r3, #4
    1166:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    1168:	68bb      	ldr	r3, [r7, #8]
    116a:	3301      	adds	r3, #1
    116c:	60bb      	str	r3, [r7, #8]
    116e:	e7e9      	b.n	1144 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x20>
	}
	return	status.rawStatus;
    1170:	687b      	ldr	r3, [r7, #4]
    1172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
    1176:	4618      	mov	r0, r3
    1178:	3714      	adds	r7, #20
    117a:	46bd      	mov	sp, r7
    117c:	bc80      	pop	{r7}
    117e:	4770      	bx	lr

00001180 <_Z41__static_initialization_and_destruction_0ii>:

    1180:	b580      	push	{r7, lr}
    1182:	b082      	sub	sp, #8
    1184:	af00      	add	r7, sp, #0
    1186:	6078      	str	r0, [r7, #4]
    1188:	6039      	str	r1, [r7, #0]
    118a:	687b      	ldr	r3, [r7, #4]
    118c:	2b01      	cmp	r3, #1
    118e:	d10c      	bne.n	11aa <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1190:	683b      	ldr	r3, [r7, #0]
    1192:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1196:	4293      	cmp	r3, r2
    1198:	d107      	bne.n	11aa <_Z41__static_initialization_and_destruction_0ii+0x2a>
    119a:	4806      	ldr	r0, [pc, #24]	; (11b4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    119c:	4b06      	ldr	r3, [pc, #24]	; (11b8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    119e:	4798      	blx	r3
    11a0:	4a06      	ldr	r2, [pc, #24]	; (11bc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    11a2:	4907      	ldr	r1, [pc, #28]	; (11c0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    11a4:	4803      	ldr	r0, [pc, #12]	; (11b4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    11a6:	4b07      	ldr	r3, [pc, #28]	; (11c4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    11a8:	4798      	blx	r3
    11aa:	bf00      	nop
    11ac:	3708      	adds	r7, #8
    11ae:	46bd      	mov	sp, r7
    11b0:	bd80      	pop	{r7, pc}
    11b2:	bf00      	nop
    11b4:	200011b4 	.word	0x200011b4
    11b8:	0000108f 	.word	0x0000108f
    11bc:	20000000 	.word	0x20000000
    11c0:	000010a3 	.word	0x000010a3
    11c4:	0001427d 	.word	0x0001427d

000011c8 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:
    11c8:	b580      	push	{r7, lr}
    11ca:	af00      	add	r7, sp, #0
    11cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    11d0:	2001      	movs	r0, #1
    11d2:	4b01      	ldr	r3, [pc, #4]	; (11d8 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x10>)
    11d4:	4798      	blx	r3
    11d6:	bd80      	pop	{r7, pc}
    11d8:	00001181 	.word	0x00001181

000011dc <_Z14QSPIDriverTestv>:


#include "main.h"


void	QSPIDriverTest(void){
    11dc:	b590      	push	{r4, r7, lr}
    11de:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
    11e2:	af00      	add	r7, sp, #0
	bool is_corrupted = false;
    11e4:	2300      	movs	r3, #0
    11e6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	uint8_t tx_buffer[QSPI_BUFFER_SIZE] ;
	uint8_t rx_buffer[QSPI_BUFFER_SIZE] ;
	flash.Init();
    11ea:	4858      	ldr	r0, [pc, #352]	; (134c <_Z14QSPIDriverTestv+0x170>)
    11ec:	4b58      	ldr	r3, [pc, #352]	; (1350 <_Z14QSPIDriverTestv+0x174>)
    11ee:	4798      	blx	r3

	usb.print("QSPI Program Started\n\r");
    11f0:	4958      	ldr	r1, [pc, #352]	; (1354 <_Z14QSPIDriverTestv+0x178>)
    11f2:	4859      	ldr	r0, [pc, #356]	; (1358 <_Z14QSPIDriverTestv+0x17c>)
    11f4:	4b59      	ldr	r3, [pc, #356]	; (135c <_Z14QSPIDriverTestv+0x180>)
    11f6:	4798      	blx	r3
	/* Initialize Tx buffer */
	for (int i = 0; i <QSPI_BUFFER_SIZE ; i++) {
    11f8:	2300      	movs	r3, #0
    11fa:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    11fe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
    1202:	2bff      	cmp	r3, #255	; 0xff
    1204:	dc0f      	bgt.n	1226 <_Z14QSPIDriverTestv+0x4a>
		tx_buffer[i] = (uint8_t)i;
    1206:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
    120a:	b2d9      	uxtb	r1, r3
    120c:	f507 7284 	add.w	r2, r7, #264	; 0x108
    1210:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
    1214:	4413      	add	r3, r2
    1216:	460a      	mov	r2, r1
    1218:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <QSPI_BUFFER_SIZE ; i++) {
    121a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
    121e:	3301      	adds	r3, #1
    1220:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    1224:	e7eb      	b.n	11fe <_Z14QSPIDriverTestv+0x22>
	}
	
	//flash.Erase();
	/* Erase flash memory */
	uint32_t	flashAddres=0;
    1226:	2300      	movs	r3, #0
    1228:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	while (1) {
		delay_us(100);
    122c:	2064      	movs	r0, #100	; 0x64
    122e:	4b4c      	ldr	r3, [pc, #304]	; (1360 <_Z14QSPIDriverTestv+0x184>)
    1230:	4798      	blx	r3
		/* Write data to flash memory */
		if (ERR_NONE ==flash.WriteAddress((uint8_t *)tx_buffer,flashAddres,QSPI_BUFFER_SIZE)) {
    1232:	f507 7184 	add.w	r1, r7, #264	; 0x108
    1236:	f44f 7380 	mov.w	r3, #256	; 0x100
    123a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
    123e:	4843      	ldr	r0, [pc, #268]	; (134c <_Z14QSPIDriverTestv+0x170>)
    1240:	4c48      	ldr	r4, [pc, #288]	; (1364 <_Z14QSPIDriverTestv+0x188>)
    1242:	47a0      	blx	r4
    1244:	4603      	mov	r3, r0
    1246:	2b00      	cmp	r3, #0
			//usb.print("Flash write successful \n\r");
		}
		delay_us(100);
    1248:	2064      	movs	r0, #100	; 0x64
    124a:	4b45      	ldr	r3, [pc, #276]	; (1360 <_Z14QSPIDriverTestv+0x184>)
    124c:	4798      	blx	r3
		/* Read data from flash memory */
		if (ERR_NONE == flash.ReadAddress((uint8_t *)rx_buffer,flashAddres,QSPI_BUFFER_SIZE)) {
    124e:	f107 0108 	add.w	r1, r7, #8
    1252:	f44f 7380 	mov.w	r3, #256	; 0x100
    1256:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
    125a:	483c      	ldr	r0, [pc, #240]	; (134c <_Z14QSPIDriverTestv+0x170>)
    125c:	4c42      	ldr	r4, [pc, #264]	; (1368 <_Z14QSPIDriverTestv+0x18c>)
    125e:	47a0      	blx	r4
    1260:	4603      	mov	r3, r0
    1262:	2b00      	cmp	r3, #0
			//while(!memory.xferDone);
			//usb.print("Flash read successful\n\r");
		}
		delay_us(100);
    1264:	2064      	movs	r0, #100	; 0x64
    1266:	4b3e      	ldr	r3, [pc, #248]	; (1360 <_Z14QSPIDriverTestv+0x184>)
    1268:	4798      	blx	r3
		is_corrupted = false;
    126a:	2300      	movs	r3, #0
    126c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		for (int i = 0; i < QSPI_BUFFER_SIZE; i++) {
    1270:	1d3b      	adds	r3, r7, #4
    1272:	2200      	movs	r2, #0
    1274:	601a      	str	r2, [r3, #0]
    1276:	1d3b      	adds	r3, r7, #4
    1278:	681b      	ldr	r3, [r3, #0]
    127a:	2bff      	cmp	r3, #255	; 0xff
    127c:	dc32      	bgt.n	12e4 <_Z14QSPIDriverTestv+0x108>
			if (tx_buffer[i] != rx_buffer[i]) {
    127e:	1d3b      	adds	r3, r7, #4
    1280:	681b      	ldr	r3, [r3, #0]
    1282:	f507 7284 	add.w	r2, r7, #264	; 0x108
    1286:	5cd2      	ldrb	r2, [r2, r3]
    1288:	1d3b      	adds	r3, r7, #4
    128a:	681b      	ldr	r3, [r3, #0]
    128c:	f107 0108 	add.w	r1, r7, #8
    1290:	5ccb      	ldrb	r3, [r1, r3]
    1292:	429a      	cmp	r2, r3
    1294:	d020      	beq.n	12d8 <_Z14QSPIDriverTestv+0xfc>
				is_corrupted = true;
    1296:	2301      	movs	r3, #1
    1298:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				usb.print("Flash data verification failed.\n\r");
    129c:	4933      	ldr	r1, [pc, #204]	; (136c <_Z14QSPIDriverTestv+0x190>)
    129e:	482e      	ldr	r0, [pc, #184]	; (1358 <_Z14QSPIDriverTestv+0x17c>)
    12a0:	4b2e      	ldr	r3, [pc, #184]	; (135c <_Z14QSPIDriverTestv+0x180>)
    12a2:	4798      	blx	r3
				usb.print(flashAddres,HEX);
    12a4:	2210      	movs	r2, #16
    12a6:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
    12aa:	482b      	ldr	r0, [pc, #172]	; (1358 <_Z14QSPIDriverTestv+0x17c>)
    12ac:	4b30      	ldr	r3, [pc, #192]	; (1370 <_Z14QSPIDriverTestv+0x194>)
    12ae:	4798      	blx	r3
				usb<<" bit :"<<i<<NEWLINE;
    12b0:	4930      	ldr	r1, [pc, #192]	; (1374 <_Z14QSPIDriverTestv+0x198>)
    12b2:	4829      	ldr	r0, [pc, #164]	; (1358 <_Z14QSPIDriverTestv+0x17c>)
    12b4:	4b30      	ldr	r3, [pc, #192]	; (1378 <_Z14QSPIDriverTestv+0x19c>)
    12b6:	4798      	blx	r3
    12b8:	4602      	mov	r2, r0
    12ba:	1d3b      	adds	r3, r7, #4
    12bc:	4619      	mov	r1, r3
    12be:	4610      	mov	r0, r2
    12c0:	4b2e      	ldr	r3, [pc, #184]	; (137c <_Z14QSPIDriverTestv+0x1a0>)
    12c2:	4798      	blx	r3
    12c4:	4603      	mov	r3, r0
    12c6:	492e      	ldr	r1, [pc, #184]	; (1380 <_Z14QSPIDriverTestv+0x1a4>)
    12c8:	4618      	mov	r0, r3
    12ca:	4b2e      	ldr	r3, [pc, #184]	; (1384 <_Z14QSPIDriverTestv+0x1a8>)
    12cc:	4798      	blx	r3
				i=QSPI_BUFFER_SIZE;
    12ce:	1d3b      	adds	r3, r7, #4
    12d0:	f44f 7280 	mov.w	r2, #256	; 0x100
    12d4:	601a      	str	r2, [r3, #0]
				break;
    12d6:	e005      	b.n	12e4 <_Z14QSPIDriverTestv+0x108>
		for (int i = 0; i < QSPI_BUFFER_SIZE; i++) {
    12d8:	1d3b      	adds	r3, r7, #4
    12da:	681b      	ldr	r3, [r3, #0]
    12dc:	1c5a      	adds	r2, r3, #1
    12de:	1d3b      	adds	r3, r7, #4
    12e0:	601a      	str	r2, [r3, #0]
    12e2:	e7c8      	b.n	1276 <_Z14QSPIDriverTestv+0x9a>
			}
			
		}

		if (!is_corrupted) {
    12e4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
    12e8:	f083 0301 	eor.w	r3, r3, #1
    12ec:	b2db      	uxtb	r3, r3
    12ee:	2b00      	cmp	r3, #0
    12f0:	d022      	beq.n	1338 <_Z14QSPIDriverTestv+0x15c>
			usb.print("Write - Read is successful in QSPI Flash memory ");
    12f2:	4925      	ldr	r1, [pc, #148]	; (1388 <_Z14QSPIDriverTestv+0x1ac>)
    12f4:	4818      	ldr	r0, [pc, #96]	; (1358 <_Z14QSPIDriverTestv+0x17c>)
    12f6:	4b19      	ldr	r3, [pc, #100]	; (135c <_Z14QSPIDriverTestv+0x180>)
    12f8:	4798      	blx	r3
			usb.println(flashAddres,HEX);
    12fa:	2210      	movs	r2, #16
    12fc:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
    1300:	4815      	ldr	r0, [pc, #84]	; (1358 <_Z14QSPIDriverTestv+0x17c>)
    1302:	4b22      	ldr	r3, [pc, #136]	; (138c <_Z14QSPIDriverTestv+0x1b0>)
    1304:	4798      	blx	r3
			for (int i = 0; i <QSPI_BUFFER_SIZE ; i++) {
    1306:	2300      	movs	r3, #0
    1308:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    130c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
    1310:	2bff      	cmp	r3, #255	; 0xff
    1312:	dc11      	bgt.n	1338 <_Z14QSPIDriverTestv+0x15c>
				rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
    1314:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
    1318:	b2db      	uxtb	r3, r3
    131a:	425b      	negs	r3, r3
    131c:	b2d9      	uxtb	r1, r3
    131e:	f107 0208 	add.w	r2, r7, #8
    1322:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
    1326:	4413      	add	r3, r2
    1328:	460a      	mov	r2, r1
    132a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i <QSPI_BUFFER_SIZE ; i++) {
    132c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
    1330:	3301      	adds	r3, #1
    1332:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    1336:	e7e9      	b.n	130c <_Z14QSPIDriverTestv+0x130>
			}
		}
		flashAddres=(QSPI_BUFFER_SIZE+flashAddres)%N25Q_FLASH_SIZE;
    1338:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
    133c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1340:	f3c3 0314 	ubfx	r3, r3, #0, #21
    1344:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
		
	}
    1348:	e770      	b.n	122c <_Z14QSPIDriverTestv+0x50>
    134a:	bf00      	nop
    134c:	20003ac8 	.word	0x20003ac8
    1350:	0001237d 	.word	0x0001237d
    1354:	0001a3c4 	.word	0x0001a3c4
    1358:	20003e1c 	.word	0x20003e1c
    135c:	000137f5 	.word	0x000137f5
    1360:	00004649 	.word	0x00004649
    1364:	000123e9 	.word	0x000123e9
    1368:	0001241d 	.word	0x0001241d
    136c:	0001a3dc 	.word	0x0001a3dc
    1370:	0001390d 	.word	0x0001390d
    1374:	0001a400 	.word	0x0001a400
    1378:	00001511 	.word	0x00001511
    137c:	00001531 	.word	0x00001531
    1380:	0001a408 	.word	0x0001a408
    1384:	00000629 	.word	0x00000629
    1388:	0001a40c 	.word	0x0001a40c
    138c:	000139dd 	.word	0x000139dd

00001390 <main>:
}

int main(void)
{
    1390:	b580      	push	{r7, lr}
    1392:	b082      	sub	sp, #8
    1394:	af00      	add	r7, sp, #0
	atmel_start_init();
    1396:	4b3f      	ldr	r3, [pc, #252]	; (1494 <main+0x104>)
    1398:	4798      	blx	r3
	
	usb.Init();
    139a:	483f      	ldr	r0, [pc, #252]	; (1498 <main+0x108>)
    139c:	4b3f      	ldr	r3, [pc, #252]	; (149c <main+0x10c>)
    139e:	4798      	blx	r3
	delay_ms(100);
    13a0:	2064      	movs	r0, #100	; 0x64
    13a2:	4b3f      	ldr	r3, [pc, #252]	; (14a0 <main+0x110>)
    13a4:	4798      	blx	r3
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    13a6:	493f      	ldr	r1, [pc, #252]	; (14a4 <main+0x114>)
    13a8:	483b      	ldr	r0, [pc, #236]	; (1498 <main+0x108>)
    13aa:	4b3f      	ldr	r3, [pc, #252]	; (14a8 <main+0x118>)
    13ac:	4798      	blx	r3
    13ae:	4603      	mov	r3, r0
    13b0:	493c      	ldr	r1, [pc, #240]	; (14a4 <main+0x114>)
    13b2:	4618      	mov	r0, r3
    13b4:	4b3c      	ldr	r3, [pc, #240]	; (14a8 <main+0x118>)
    13b6:	4798      	blx	r3
    13b8:	4603      	mov	r3, r0
    13ba:	493c      	ldr	r1, [pc, #240]	; (14ac <main+0x11c>)
    13bc:	4618      	mov	r0, r3
    13be:	4b3c      	ldr	r3, [pc, #240]	; (14b0 <main+0x120>)
    13c0:	4798      	blx	r3
    13c2:	4603      	mov	r3, r0
    13c4:	4937      	ldr	r1, [pc, #220]	; (14a4 <main+0x114>)
    13c6:	4618      	mov	r0, r3
    13c8:	4b37      	ldr	r3, [pc, #220]	; (14a8 <main+0x118>)
    13ca:	4798      	blx	r3
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
    13cc:	4939      	ldr	r1, [pc, #228]	; (14b4 <main+0x124>)
    13ce:	4832      	ldr	r0, [pc, #200]	; (1498 <main+0x108>)
    13d0:	4b39      	ldr	r3, [pc, #228]	; (14b8 <main+0x128>)
    13d2:	4798      	blx	r3
    13d4:	4603      	mov	r3, r0
    13d6:	4939      	ldr	r1, [pc, #228]	; (14bc <main+0x12c>)
    13d8:	4618      	mov	r0, r3
    13da:	4b37      	ldr	r3, [pc, #220]	; (14b8 <main+0x128>)
    13dc:	4798      	blx	r3
    13de:	4603      	mov	r3, r0
    13e0:	4937      	ldr	r1, [pc, #220]	; (14c0 <main+0x130>)
    13e2:	4618      	mov	r0, r3
    13e4:	4b37      	ldr	r3, [pc, #220]	; (14c4 <main+0x134>)
    13e6:	4798      	blx	r3
    13e8:	4603      	mov	r3, r0
    13ea:	4937      	ldr	r1, [pc, #220]	; (14c8 <main+0x138>)
    13ec:	4618      	mov	r0, r3
    13ee:	4b37      	ldr	r3, [pc, #220]	; (14cc <main+0x13c>)
    13f0:	4798      	blx	r3
    13f2:	4603      	mov	r3, r0
    13f4:	492b      	ldr	r1, [pc, #172]	; (14a4 <main+0x114>)
    13f6:	4618      	mov	r0, r3
    13f8:	4b2b      	ldr	r3, [pc, #172]	; (14a8 <main+0x118>)
    13fa:	4798      	blx	r3
    13fc:	4603      	mov	r3, r0
    13fe:	4929      	ldr	r1, [pc, #164]	; (14a4 <main+0x114>)
    1400:	4618      	mov	r0, r3
    1402:	4b29      	ldr	r3, [pc, #164]	; (14a8 <main+0x118>)
    1404:	4798      	blx	r3
	QSPIDriverTest();
    1406:	4b32      	ldr	r3, [pc, #200]	; (14d0 <main+0x140>)
    1408:	4798      	blx	r3
	memory.Init();
    140a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    140e:	4831      	ldr	r0, [pc, #196]	; (14d4 <main+0x144>)
    1410:	4b31      	ldr	r3, [pc, #196]	; (14d8 <main+0x148>)
    1412:	4798      	blx	r3
	alu.Init();
    1414:	4831      	ldr	r0, [pc, #196]	; (14dc <main+0x14c>)
    1416:	4b32      	ldr	r3, [pc, #200]	; (14e0 <main+0x150>)
    1418:	4798      	blx	r3
	usb<<"*** ALU initiated ***"<<NEWLINE;
    141a:	4932      	ldr	r1, [pc, #200]	; (14e4 <main+0x154>)
    141c:	481e      	ldr	r0, [pc, #120]	; (1498 <main+0x108>)
    141e:	4b32      	ldr	r3, [pc, #200]	; (14e8 <main+0x158>)
    1420:	4798      	blx	r3
    1422:	4603      	mov	r3, r0
    1424:	491f      	ldr	r1, [pc, #124]	; (14a4 <main+0x114>)
    1426:	4618      	mov	r0, r3
    1428:	4b1f      	ldr	r3, [pc, #124]	; (14a8 <main+0x118>)
    142a:	4798      	blx	r3
	uint8_t	line= alu.GetSelectedAMMC();
    142c:	482b      	ldr	r0, [pc, #172]	; (14dc <main+0x14c>)
    142e:	4b2f      	ldr	r3, [pc, #188]	; (14ec <main+0x15c>)
    1430:	4798      	blx	r3
    1432:	4603      	mov	r3, r0
    1434:	71fb      	strb	r3, [r7, #7]
	usb<<"Active line: "<<line<<NEWLINE;
    1436:	492e      	ldr	r1, [pc, #184]	; (14f0 <main+0x160>)
    1438:	4817      	ldr	r0, [pc, #92]	; (1498 <main+0x108>)
    143a:	4b2e      	ldr	r3, [pc, #184]	; (14f4 <main+0x164>)
    143c:	4798      	blx	r3
    143e:	4602      	mov	r2, r0
    1440:	1dfb      	adds	r3, r7, #7
    1442:	4619      	mov	r1, r3
    1444:	4610      	mov	r0, r2
    1446:	4b2c      	ldr	r3, [pc, #176]	; (14f8 <main+0x168>)
    1448:	4798      	blx	r3
    144a:	4603      	mov	r3, r0
    144c:	4915      	ldr	r1, [pc, #84]	; (14a4 <main+0x114>)
    144e:	4618      	mov	r0, r3
    1450:	4b15      	ldr	r3, [pc, #84]	; (14a8 <main+0x118>)
    1452:	4798      	blx	r3
	if (!pBIT)
    1454:	4829      	ldr	r0, [pc, #164]	; (14fc <main+0x16c>)
    1456:	4b2a      	ldr	r3, [pc, #168]	; (1500 <main+0x170>)
    1458:	4798      	blx	r3
    145a:	4603      	mov	r3, r0
    145c:	f083 0301 	eor.w	r3, r3, #1
    1460:	b2db      	uxtb	r3, r3
    1462:	2b00      	cmp	r3, #0
    1464:	d004      	beq.n	1470 <main+0xe0>
	{
		hvac.Stop();
    1466:	2100      	movs	r1, #0
    1468:	4826      	ldr	r0, [pc, #152]	; (1504 <main+0x174>)
    146a:	4b27      	ldr	r3, [pc, #156]	; (1508 <main+0x178>)
    146c:	4798      	blx	r3
    146e:	e003      	b.n	1478 <main+0xe8>
	} 
	else
	{
		hvac.Start();
    1470:	2100      	movs	r1, #0
    1472:	4824      	ldr	r0, [pc, #144]	; (1504 <main+0x174>)
    1474:	4b25      	ldr	r3, [pc, #148]	; (150c <main+0x17c>)
    1476:	4798      	blx	r3
	}
    /* Replace with your application code */
    while (1) 
    {
		delay_ms(1000);
    1478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    147c:	4b08      	ldr	r3, [pc, #32]	; (14a0 <main+0x110>)
    147e:	4798      	blx	r3
		usb<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    1480:	490a      	ldr	r1, [pc, #40]	; (14ac <main+0x11c>)
    1482:	4805      	ldr	r0, [pc, #20]	; (1498 <main+0x108>)
    1484:	4b0a      	ldr	r3, [pc, #40]	; (14b0 <main+0x120>)
    1486:	4798      	blx	r3
    1488:	4603      	mov	r3, r0
    148a:	4906      	ldr	r1, [pc, #24]	; (14a4 <main+0x114>)
    148c:	4618      	mov	r0, r3
    148e:	4b06      	ldr	r3, [pc, #24]	; (14a8 <main+0x118>)
    1490:	4798      	blx	r3
		delay_ms(1000);
    1492:	e7f1      	b.n	1478 <main+0xe8>
    1494:	00002ce1 	.word	0x00002ce1
    1498:	20003e1c 	.word	0x20003e1c
    149c:	00013461 	.word	0x00013461
    14a0:	0000467d 	.word	0x0000467d
    14a4:	0001a408 	.word	0x0001a408
    14a8:	00000629 	.word	0x00000629
    14ac:	0001a440 	.word	0x0001a440
    14b0:	00001559 	.word	0x00001559
    14b4:	0001a464 	.word	0x0001a464
    14b8:	00001579 	.word	0x00001579
    14bc:	0001a470 	.word	0x0001a470
    14c0:	0001a47c 	.word	0x0001a47c
    14c4:	00001599 	.word	0x00001599
    14c8:	0001a484 	.word	0x0001a484
    14cc:	000015b9 	.word	0x000015b9
    14d0:	000011dd 	.word	0x000011dd
    14d4:	20001238 	.word	0x20001238
    14d8:	00001709 	.word	0x00001709
    14dc:	20000bb4 	.word	0x20000bb4
    14e0:	00000321 	.word	0x00000321
    14e4:	0001a490 	.word	0x0001a490
    14e8:	000015d9 	.word	0x000015d9
    14ec:	00000411 	.word	0x00000411
    14f0:	0001a4a8 	.word	0x0001a4a8
    14f4:	000015f9 	.word	0x000015f9
    14f8:	00000601 	.word	0x00000601
    14fc:	20001d14 	.word	0x20001d14
    1500:	00001bdd 	.word	0x00001bdd
    1504:	20001d28 	.word	0x20001d28
    1508:	00002b21 	.word	0x00002b21
    150c:	00002089 	.word	0x00002089

00001510 <_ZlsIA7_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1510:	b580      	push	{r7, lr}
    1512:	b082      	sub	sp, #8
    1514:	af00      	add	r7, sp, #0
    1516:	6078      	str	r0, [r7, #4]
    1518:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    151a:	6839      	ldr	r1, [r7, #0]
    151c:	6878      	ldr	r0, [r7, #4]
    151e:	4b03      	ldr	r3, [pc, #12]	; (152c <_ZlsIA7_cER5PrintS2_RKT_+0x1c>)
    1520:	4798      	blx	r3
    1522:	687b      	ldr	r3, [r7, #4]
    1524:	4618      	mov	r0, r3
    1526:	3708      	adds	r7, #8
    1528:	46bd      	mov	sp, r7
    152a:	bd80      	pop	{r7, pc}
    152c:	000137f5 	.word	0x000137f5

00001530 <_ZlsIiER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1530:	b580      	push	{r7, lr}
    1532:	b082      	sub	sp, #8
    1534:	af00      	add	r7, sp, #0
    1536:	6078      	str	r0, [r7, #4]
    1538:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    153a:	683b      	ldr	r3, [r7, #0]
    153c:	681b      	ldr	r3, [r3, #0]
    153e:	220a      	movs	r2, #10
    1540:	4619      	mov	r1, r3
    1542:	6878      	ldr	r0, [r7, #4]
    1544:	4b03      	ldr	r3, [pc, #12]	; (1554 <_ZlsIiER5PrintS1_RKT_+0x24>)
    1546:	4798      	blx	r3
    1548:	687b      	ldr	r3, [r7, #4]
    154a:	4618      	mov	r0, r3
    154c:	3708      	adds	r7, #8
    154e:	46bd      	mov	sp, r7
    1550:	bd80      	pop	{r7, pc}
    1552:	bf00      	nop
    1554:	00013861 	.word	0x00013861

00001558 <_ZlsIA33_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1558:	b580      	push	{r7, lr}
    155a:	b082      	sub	sp, #8
    155c:	af00      	add	r7, sp, #0
    155e:	6078      	str	r0, [r7, #4]
    1560:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1562:	6839      	ldr	r1, [r7, #0]
    1564:	6878      	ldr	r0, [r7, #4]
    1566:	4b03      	ldr	r3, [pc, #12]	; (1574 <_ZlsIA33_cER5PrintS2_RKT_+0x1c>)
    1568:	4798      	blx	r3
    156a:	687b      	ldr	r3, [r7, #4]
    156c:	4618      	mov	r0, r3
    156e:	3708      	adds	r7, #8
    1570:	46bd      	mov	sp, r7
    1572:	bd80      	pop	{r7, pc}
    1574:	000137f5 	.word	0x000137f5

00001578 <_ZlsIA12_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1578:	b580      	push	{r7, lr}
    157a:	b082      	sub	sp, #8
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
    1580:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1582:	6839      	ldr	r1, [r7, #0]
    1584:	6878      	ldr	r0, [r7, #4]
    1586:	4b03      	ldr	r3, [pc, #12]	; (1594 <_ZlsIA12_cER5PrintS2_RKT_+0x1c>)
    1588:	4798      	blx	r3
    158a:	687b      	ldr	r3, [r7, #4]
    158c:	4618      	mov	r0, r3
    158e:	3708      	adds	r7, #8
    1590:	46bd      	mov	sp, r7
    1592:	bd80      	pop	{r7, pc}
    1594:	000137f5 	.word	0x000137f5

00001598 <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1598:	b580      	push	{r7, lr}
    159a:	b082      	sub	sp, #8
    159c:	af00      	add	r7, sp, #0
    159e:	6078      	str	r0, [r7, #4]
    15a0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    15a2:	6839      	ldr	r1, [r7, #0]
    15a4:	6878      	ldr	r0, [r7, #4]
    15a6:	4b03      	ldr	r3, [pc, #12]	; (15b4 <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
    15a8:	4798      	blx	r3
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	4618      	mov	r0, r3
    15ae:	3708      	adds	r7, #8
    15b0:	46bd      	mov	sp, r7
    15b2:	bd80      	pop	{r7, pc}
    15b4:	000137f5 	.word	0x000137f5

000015b8 <_ZlsIA9_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    15b8:	b580      	push	{r7, lr}
    15ba:	b082      	sub	sp, #8
    15bc:	af00      	add	r7, sp, #0
    15be:	6078      	str	r0, [r7, #4]
    15c0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    15c2:	6839      	ldr	r1, [r7, #0]
    15c4:	6878      	ldr	r0, [r7, #4]
    15c6:	4b03      	ldr	r3, [pc, #12]	; (15d4 <_ZlsIA9_cER5PrintS2_RKT_+0x1c>)
    15c8:	4798      	blx	r3
    15ca:	687b      	ldr	r3, [r7, #4]
    15cc:	4618      	mov	r0, r3
    15ce:	3708      	adds	r7, #8
    15d0:	46bd      	mov	sp, r7
    15d2:	bd80      	pop	{r7, pc}
    15d4:	000137f5 	.word	0x000137f5

000015d8 <_ZlsIA22_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    15d8:	b580      	push	{r7, lr}
    15da:	b082      	sub	sp, #8
    15dc:	af00      	add	r7, sp, #0
    15de:	6078      	str	r0, [r7, #4]
    15e0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    15e2:	6839      	ldr	r1, [r7, #0]
    15e4:	6878      	ldr	r0, [r7, #4]
    15e6:	4b03      	ldr	r3, [pc, #12]	; (15f4 <_ZlsIA22_cER5PrintS2_RKT_+0x1c>)
    15e8:	4798      	blx	r3
    15ea:	687b      	ldr	r3, [r7, #4]
    15ec:	4618      	mov	r0, r3
    15ee:	3708      	adds	r7, #8
    15f0:	46bd      	mov	sp, r7
    15f2:	bd80      	pop	{r7, pc}
    15f4:	000137f5 	.word	0x000137f5

000015f8 <_ZlsIA14_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    15f8:	b580      	push	{r7, lr}
    15fa:	b082      	sub	sp, #8
    15fc:	af00      	add	r7, sp, #0
    15fe:	6078      	str	r0, [r7, #4]
    1600:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1602:	6839      	ldr	r1, [r7, #0]
    1604:	6878      	ldr	r0, [r7, #4]
    1606:	4b03      	ldr	r3, [pc, #12]	; (1614 <_ZlsIA14_cER5PrintS2_RKT_+0x1c>)
    1608:	4798      	blx	r3
    160a:	687b      	ldr	r3, [r7, #4]
    160c:	4618      	mov	r0, r3
    160e:	3708      	adds	r7, #8
    1610:	46bd      	mov	sp, r7
    1612:	bd80      	pop	{r7, pc}
    1614:	000137f5 	.word	0x000137f5

00001618 <_ZN19PersistenceServicesD1Ev>:

/*
 	Dient dem Zugriff auf software customization area, hardware description area,
	heating program area und dem persistentes Speichern von aktuellem Heizzustand.
*/
class PersistenceServices: public	CRC32_Class
    1618:	b580      	push	{r7, lr}
    161a:	b082      	sub	sp, #8
    161c:	af00      	add	r7, sp, #0
    161e:	6078      	str	r0, [r7, #4]
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	4618      	mov	r0, r3
    1624:	4b03      	ldr	r3, [pc, #12]	; (1634 <_ZN19PersistenceServicesD1Ev+0x1c>)
    1626:	4798      	blx	r3
    1628:	687b      	ldr	r3, [r7, #4]
    162a:	4618      	mov	r0, r3
    162c:	3708      	adds	r7, #8
    162e:	46bd      	mov	sp, r7
    1630:	bd80      	pop	{r7, pc}
    1632:	bf00      	nop
    1634:	00000c0d 	.word	0x00000c0d

00001638 <_ZN21MemoryManagment_ClassC1Ev>:

#include "MemoryManagment_Class.h"
#include "AT24MAC_Class.h"

// default constructor
MemoryManagment_Class::MemoryManagment_Class()
    1638:	b580      	push	{r7, lr}
    163a:	b082      	sub	sp, #8
    163c:	af00      	add	r7, sp, #0
    163e:	6078      	str	r0, [r7, #4]
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	4618      	mov	r0, r3
    1644:	4b17      	ldr	r3, [pc, #92]	; (16a4 <_ZN21MemoryManagment_ClassC1Ev+0x6c>)
    1646:	4798      	blx	r3
    1648:	687b      	ldr	r3, [r7, #4]
    164a:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
    164e:	4618      	mov	r0, r3
    1650:	4b15      	ldr	r3, [pc, #84]	; (16a8 <_ZN21MemoryManagment_ClassC1Ev+0x70>)
    1652:	4798      	blx	r3
    1654:	687b      	ldr	r3, [r7, #4]
    1656:	f203 637c 	addw	r3, r3, #1660	; 0x67c
    165a:	4618      	mov	r0, r3
    165c:	4b13      	ldr	r3, [pc, #76]	; (16ac <_ZN21MemoryManagment_ClassC1Ev+0x74>)
    165e:	4798      	blx	r3
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	f203 638c 	addw	r3, r3, #1676	; 0x68c
    1666:	4618      	mov	r0, r3
    1668:	4b11      	ldr	r3, [pc, #68]	; (16b0 <_ZN21MemoryManagment_ClassC1Ev+0x78>)
    166a:	4798      	blx	r3
    166c:	687b      	ldr	r3, [r7, #4]
    166e:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
    1672:	4618      	mov	r0, r3
    1674:	4b0f      	ldr	r3, [pc, #60]	; (16b4 <_ZN21MemoryManagment_ClassC1Ev+0x7c>)
    1676:	4798      	blx	r3
    1678:	687b      	ldr	r3, [r7, #4]
    167a:	2200      	movs	r2, #0
    167c:	f8c3 297c 	str.w	r2, [r3, #2428]	; 0x97c
{
	_currentAddress=0;
    1680:	687b      	ldr	r3, [r7, #4]
    1682:	2200      	movs	r2, #0
    1684:	f8c3 2968 	str.w	r2, [r3, #2408]	; 0x968
	head=512;
    1688:	687b      	ldr	r3, [r7, #4]
    168a:	f44f 7200 	mov.w	r2, #512	; 0x200
    168e:	f8c3 2980 	str.w	r2, [r3, #2432]	; 0x980
	tail=0;
    1692:	687b      	ldr	r3, [r7, #4]
    1694:	2200      	movs	r2, #0
    1696:	f8c3 2984 	str.w	r2, [r3, #2436]	; 0x984

	
} //MemoryManagment_Class
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	4618      	mov	r0, r3
    169e:	3708      	adds	r7, #8
    16a0:	46bd      	mov	sp, r7
    16a2:	bd80      	pop	{r7, pc}
    16a4:	00000c8d 	.word	0x00000c8d
    16a8:	00001cb1 	.word	0x00001cb1
    16ac:	00000ee7 	.word	0x00000ee7
    16b0:	0000188d 	.word	0x0000188d
    16b4:	00000cf1 	.word	0x00000cf1

000016b8 <_ZN21MemoryManagment_ClassD1Ev>:



// default destructor
MemoryManagment_Class::~MemoryManagment_Class()
    16b8:	b580      	push	{r7, lr}
    16ba:	b082      	sub	sp, #8
    16bc:	af00      	add	r7, sp, #0
    16be:	6078      	str	r0, [r7, #4]
    16c0:	687b      	ldr	r3, [r7, #4]
    16c2:	f203 638c 	addw	r3, r3, #1676	; 0x68c
    16c6:	4618      	mov	r0, r3
    16c8:	4b0b      	ldr	r3, [pc, #44]	; (16f8 <_ZN21MemoryManagment_ClassD1Ev+0x40>)
    16ca:	4798      	blx	r3
    16cc:	687b      	ldr	r3, [r7, #4]
    16ce:	f203 637c 	addw	r3, r3, #1660	; 0x67c
    16d2:	4618      	mov	r0, r3
    16d4:	4b09      	ldr	r3, [pc, #36]	; (16fc <_ZN21MemoryManagment_ClassD1Ev+0x44>)
    16d6:	4798      	blx	r3
    16d8:	687b      	ldr	r3, [r7, #4]
    16da:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
    16de:	4618      	mov	r0, r3
    16e0:	4b07      	ldr	r3, [pc, #28]	; (1700 <_ZN21MemoryManagment_ClassD1Ev+0x48>)
    16e2:	4798      	blx	r3
    16e4:	687b      	ldr	r3, [r7, #4]
    16e6:	4618      	mov	r0, r3
    16e8:	4b06      	ldr	r3, [pc, #24]	; (1704 <_ZN21MemoryManagment_ClassD1Ev+0x4c>)
    16ea:	4798      	blx	r3
{
} //~MemoryManagment_Class
    16ec:	687b      	ldr	r3, [r7, #4]
    16ee:	4618      	mov	r0, r3
    16f0:	3708      	adds	r7, #8
    16f2:	46bd      	mov	sp, r7
    16f4:	bd80      	pop	{r7, pc}
    16f6:	bf00      	nop
    16f8:	000018a1 	.word	0x000018a1
    16fc:	00000efb 	.word	0x00000efb
    1700:	00001619 	.word	0x00001619
    1704:	00000cbd 	.word	0x00000cbd

00001708 <_ZN21MemoryManagment_Class4InitEm>:

bool	MemoryManagment_Class::Init(uint32_t flashChipSize){
    1708:	b580      	push	{r7, lr}
    170a:	b082      	sub	sp, #8
    170c:	af00      	add	r7, sp, #0
    170e:	6078      	str	r0, [r7, #4]
    1710:	6039      	str	r1, [r7, #0]
		flash.Init();
    1712:	4807      	ldr	r0, [pc, #28]	; (1730 <_ZN21MemoryManagment_Class4InitEm+0x28>)
    1714:	4b07      	ldr	r3, [pc, #28]	; (1734 <_ZN21MemoryManagment_Class4InitEm+0x2c>)
    1716:	4798      	blx	r3
		eeprom.Init();
    1718:	4807      	ldr	r0, [pc, #28]	; (1738 <_ZN21MemoryManagment_Class4InitEm+0x30>)
    171a:	4b08      	ldr	r3, [pc, #32]	; (173c <_ZN21MemoryManagment_Class4InitEm+0x34>)
    171c:	4798      	blx	r3
		SetChipID(flashChipSize);
    171e:	6839      	ldr	r1, [r7, #0]
    1720:	6878      	ldr	r0, [r7, #4]
    1722:	4b07      	ldr	r3, [pc, #28]	; (1740 <_ZN21MemoryManagment_Class4InitEm+0x38>)
    1724:	4798      	blx	r3
}
    1726:	bf00      	nop
    1728:	4618      	mov	r0, r3
    172a:	3708      	adds	r7, #8
    172c:	46bd      	mov	sp, r7
    172e:	bd80      	pop	{r7, pc}
    1730:	20003ac8 	.word	0x20003ac8
    1734:	0001237d 	.word	0x0001237d
    1738:	20003a98 	.word	0x20003a98
    173c:	00011b91 	.word	0x00011b91
    1740:	00001771 	.word	0x00001771

00001744 <_ZN21MemoryManagment_Class13_troubleshootEhb>:
 uint8_t	MemoryManagment_Class::GetErrorCode(){
	 
	 // PLease don forget to do the real impelementation
	 return	GetReadStatus();
 }
  void MemoryManagment_Class::_troubleshoot(uint8_t _code, bool printoverride) {
    1744:	b580      	push	{r7, lr}
    1746:	b082      	sub	sp, #8
    1748:	af00      	add	r7, sp, #0
    174a:	6078      	str	r0, [r7, #4]
    174c:	460b      	mov	r3, r1
    174e:	70fb      	strb	r3, [r7, #3]
    1750:	4613      	mov	r3, r2
    1752:	70bb      	strb	r3, [r7, #2]
	  diagnostics.troubleshoot(_code, printoverride);
    1754:	78ba      	ldrb	r2, [r7, #2]
    1756:	78fb      	ldrb	r3, [r7, #3]
    1758:	4619      	mov	r1, r3
    175a:	4803      	ldr	r0, [pc, #12]	; (1768 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x24>)
    175c:	4b03      	ldr	r3, [pc, #12]	; (176c <_ZN21MemoryManagment_Class13_troubleshootEhb+0x28>)
    175e:	4798      	blx	r3
  }
    1760:	bf00      	nop
    1762:	3708      	adds	r7, #8
    1764:	46bd      	mov	sp, r7
    1766:	bd80      	pop	{r7, pc}
    1768:	20002a58 	.word	0x20002a58
    176c:	00011321 	.word	0x00011321

00001770 <_ZN21MemoryManagment_Class9SetChipIDEm>:

 bool MemoryManagment_Class::SetChipID(uint32_t flashChipSize) {
    1770:	b580      	push	{r7, lr}
    1772:	b082      	sub	sp, #8
    1774:	af00      	add	r7, sp, #0
    1776:	6078      	str	r0, [r7, #4]
    1778:	6039      	str	r1, [r7, #0]
	 //set some default values

	 logArea.capacity =GetMemoryCapacity();
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	4618      	mov	r0, r3
    177e:	4b12      	ldr	r3, [pc, #72]	; (17c8 <_ZN21MemoryManagment_Class9SetChipIDEm+0x58>)
    1780:	4798      	blx	r3
    1782:	4602      	mov	r2, r0
    1784:	687b      	ldr	r3, [r7, #4]
    1786:	f8c3 2974 	str.w	r2, [r3, #2420]	; 0x974


	 if (!logArea.capacity) {
    178a:	687b      	ldr	r3, [r7, #4]
    178c:	f8d3 3974 	ldr.w	r3, [r3, #2420]	; 0x974
    1790:	2b00      	cmp	r3, #0
    1792:	d113      	bne.n	17bc <_ZN21MemoryManagment_Class9SetChipIDEm+0x4c>
		 #ifdef RUNDIAGNOSTIC
		 usb.println(F("Chip capacity cannot be identified"));
		 #endif
		 if (flashChipSize) {
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	2b00      	cmp	r3, #0
    1798:	d009      	beq.n	17ae <_ZN21MemoryManagment_Class9SetChipIDEm+0x3e>
			 // If a custom chip size is defined
			 #ifdef RUNDIAGNOSTIC
			 usb.println(F("Custom Chipsize defined"));
			 #endif
			 logArea.capacity = flashChipSize;
    179a:	687b      	ldr	r3, [r7, #4]
    179c:	683a      	ldr	r2, [r7, #0]
    179e:	f8c3 2974 	str.w	r2, [r3, #2420]	; 0x974
			 logArea.supported = false;
    17a2:	687b      	ldr	r3, [r7, #4]
    17a4:	2200      	movs	r2, #0
    17a6:	f883 296c 	strb.w	r2, [r3, #2412]	; 0x96c
			 return true;
    17aa:	2301      	movs	r3, #1
    17ac:	e007      	b.n	17be <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

		 else {
			 _troubleshoot(UNKNOWNCAP);
    17ae:	2200      	movs	r2, #0
    17b0:	2103      	movs	r1, #3
    17b2:	6878      	ldr	r0, [r7, #4]
    17b4:	4b05      	ldr	r3, [pc, #20]	; (17cc <_ZN21MemoryManagment_Class9SetChipIDEm+0x5c>)
    17b6:	4798      	blx	r3
			 return false;
    17b8:	2300      	movs	r3, #0
    17ba:	e000      	b.n	17be <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

	 }
	 return true;
    17bc:	2301      	movs	r3, #1
 }
    17be:	4618      	mov	r0, r3
    17c0:	3708      	adds	r7, #8
    17c2:	46bd      	mov	sp, r7
    17c4:	bd80      	pop	{r7, pc}
    17c6:	bf00      	nop
    17c8:	00012457 	.word	0x00012457
    17cc:	00001745 	.word	0x00001745

000017d0 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState>:
	handlerAppState=PTR_HVAC_STATE(&as);
	uint32_t	add=(uint32_t )(&flashMap->hvacDefaultState);
	uint32_t	r=flash.ReadAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
	return	r;
}
 uint32_t	MemoryManagment_Class::WriteValidApplicationState(HVACState& hs ){
    17d0:	b580      	push	{r7, lr}
    17d2:	b084      	sub	sp, #16
    17d4:	af00      	add	r7, sp, #0
    17d6:	6078      	str	r0, [r7, #4]
    17d8:	6039      	str	r1, [r7, #0]
	uint32_t w=  WriteCurrentState(hs);
    17da:	687b      	ldr	r3, [r7, #4]
    17dc:	f203 638c 	addw	r3, r3, #1676	; 0x68c
    17e0:	6839      	ldr	r1, [r7, #0]
    17e2:	4618      	mov	r0, r3
    17e4:	4b0f      	ldr	r3, [pc, #60]	; (1824 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x54>)
    17e6:	4798      	blx	r3
    17e8:	60f8      	str	r0, [r7, #12]
	crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    17ea:	687b      	ldr	r3, [r7, #4]
    17ec:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
    17f0:	227c      	movs	r2, #124	; 0x7c
    17f2:	6839      	ldr	r1, [r7, #0]
    17f4:	4618      	mov	r0, r3
    17f6:	4b0c      	ldr	r3, [pc, #48]	; (1828 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x58>)
    17f8:	4798      	blx	r3
    17fa:	4602      	mov	r2, r0
    17fc:	687b      	ldr	r3, [r7, #4]
    17fe:	f8c3 2ad4 	str.w	r2, [r3, #2772]	; 0xad4
	w=WriteCRCAppState(crc32);
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	f203 628c 	addw	r2, r3, #1676	; 0x68c
    1808:	687b      	ldr	r3, [r7, #4]
    180a:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
    180e:	4619      	mov	r1, r3
    1810:	4610      	mov	r0, r2
    1812:	4b06      	ldr	r3, [pc, #24]	; (182c <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x5c>)
    1814:	4798      	blx	r3
    1816:	60f8      	str	r0, [r7, #12]
	return	w;
    1818:	68fb      	ldr	r3, [r7, #12]
 }
    181a:	4618      	mov	r0, r3
    181c:	3710      	adds	r7, #16
    181e:	46bd      	mov	sp, r7
    1820:	bd80      	pop	{r7, pc}
    1822:	bf00      	nop
    1824:	00001a89 	.word	0x00001a89
    1828:	00000c4d 	.word	0x00000c4d
    182c:	00001af1 	.word	0x00001af1

00001830 <_Z41__static_initialization_and_destruction_0ii>:
	 uint32_t	w=WriteCurrentConfigurationData(cd);
	 crc32=CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(ConfigurationData));
	 w=WriteCRCConfigurationData(crc32);
 };
 
    1830:	b580      	push	{r7, lr}
    1832:	b082      	sub	sp, #8
    1834:	af00      	add	r7, sp, #0
    1836:	6078      	str	r0, [r7, #4]
    1838:	6039      	str	r1, [r7, #0]
    183a:	687b      	ldr	r3, [r7, #4]
    183c:	2b01      	cmp	r3, #1
    183e:	d10c      	bne.n	185a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1840:	683b      	ldr	r3, [r7, #0]
    1842:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1846:	4293      	cmp	r3, r2
    1848:	d107      	bne.n	185a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    184a:	4806      	ldr	r0, [pc, #24]	; (1864 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    184c:	4b06      	ldr	r3, [pc, #24]	; (1868 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    184e:	4798      	blx	r3
    1850:	4a06      	ldr	r2, [pc, #24]	; (186c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1852:	4907      	ldr	r1, [pc, #28]	; (1870 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1854:	4803      	ldr	r0, [pc, #12]	; (1864 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1856:	4b07      	ldr	r3, [pc, #28]	; (1874 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1858:	4798      	blx	r3
    185a:	bf00      	nop
    185c:	3708      	adds	r7, #8
    185e:	46bd      	mov	sp, r7
    1860:	bd80      	pop	{r7, pc}
    1862:	bf00      	nop
    1864:	20001238 	.word	0x20001238
    1868:	00001639 	.word	0x00001639
    186c:	20000000 	.word	0x20000000
    1870:	000016b9 	.word	0x000016b9
    1874:	0001427d 	.word	0x0001427d

00001878 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev>:
    1878:	b580      	push	{r7, lr}
    187a:	af00      	add	r7, sp, #0
    187c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1880:	2001      	movs	r0, #1
    1882:	4b01      	ldr	r3, [pc, #4]	; (1888 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x10>)
    1884:	4798      	blx	r3
    1886:	bd80      	pop	{r7, pc}
    1888:	00001831 	.word	0x00001831

0000188c <_ZN18MemoryStruct_ClassC1Ev>:
#include "MemoryManagment_Class.h"

MemoryFlashStruct	*flashMap=NULL;

// default constructor
MemoryStruct_Class::MemoryStruct_Class()
    188c:	b480      	push	{r7}
    188e:	b083      	sub	sp, #12
    1890:	af00      	add	r7, sp, #0
    1892:	6078      	str	r0, [r7, #4]
{
} //MemoryStruct_Class
    1894:	687b      	ldr	r3, [r7, #4]
    1896:	4618      	mov	r0, r3
    1898:	370c      	adds	r7, #12
    189a:	46bd      	mov	sp, r7
    189c:	bc80      	pop	{r7}
    189e:	4770      	bx	lr

000018a0 <_ZN18MemoryStruct_ClassD1Ev>:

// default destructor
MemoryStruct_Class::~MemoryStruct_Class()
    18a0:	b480      	push	{r7}
    18a2:	b083      	sub	sp, #12
    18a4:	af00      	add	r7, sp, #0
    18a6:	6078      	str	r0, [r7, #4]
{
} //~MemoryStruct_Class
    18a8:	687b      	ldr	r3, [r7, #4]
    18aa:	4618      	mov	r0, r3
    18ac:	370c      	adds	r7, #12
    18ae:	46bd      	mov	sp, r7
    18b0:	bc80      	pop	{r7}
    18b2:	4770      	bx	lr

000018b4 <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData>:

uint32_t	MemoryStruct_Class::ReadDefaultConfigurationData(ConfigurationData& cd){
    18b4:	b580      	push	{r7, lr}
    18b6:	b084      	sub	sp, #16
    18b8:	af00      	add	r7, sp, #0
    18ba:	6078      	str	r0, [r7, #4]
    18bc:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->defaultConfiguration;
    18be:	4b07      	ldr	r3, [pc, #28]	; (18dc <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x28>)
    18c0:	681b      	ldr	r3, [r3, #0]
    18c2:	3310      	adds	r3, #16
    18c4:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    18c6:	68fa      	ldr	r2, [r7, #12]
    18c8:	6839      	ldr	r1, [r7, #0]
    18ca:	6878      	ldr	r0, [r7, #4]
    18cc:	4b04      	ldr	r3, [pc, #16]	; (18e0 <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x2c>)
    18ce:	4798      	blx	r3
    18d0:	60b8      	str	r0, [r7, #8]
	return	r;
    18d2:	68bb      	ldr	r3, [r7, #8]
}
    18d4:	4618      	mov	r0, r3
    18d6:	3710      	adds	r7, #16
    18d8:	46bd      	mov	sp, r7
    18da:	bd80      	pop	{r7, pc}
    18dc:	20001d10 	.word	0x20001d10
    18e0:	00001945 	.word	0x00001945

000018e4 <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData>:
uint32_t	MemoryStruct_Class::ReadLastConfigurationData(ConfigurationData& cd){
    18e4:	b580      	push	{r7, lr}
    18e6:	b084      	sub	sp, #16
    18e8:	af00      	add	r7, sp, #0
    18ea:	6078      	str	r0, [r7, #4]
    18ec:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->lastConfiguracion;
    18ee:	4b07      	ldr	r3, [pc, #28]	; (190c <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData+0x28>)
    18f0:	681b      	ldr	r3, [r3, #0]
    18f2:	3310      	adds	r3, #16
    18f4:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    18f6:	68fa      	ldr	r2, [r7, #12]
    18f8:	6839      	ldr	r1, [r7, #0]
    18fa:	6878      	ldr	r0, [r7, #4]
    18fc:	4b04      	ldr	r3, [pc, #16]	; (1910 <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData+0x2c>)
    18fe:	4798      	blx	r3
    1900:	60b8      	str	r0, [r7, #8]
	return	r;
    1902:	68bb      	ldr	r3, [r7, #8]
}
    1904:	4618      	mov	r0, r3
    1906:	3710      	adds	r7, #16
    1908:	46bd      	mov	sp, r7
    190a:	bd80      	pop	{r7, pc}
    190c:	20001d10 	.word	0x20001d10
    1910:	00001945 	.word	0x00001945

00001914 <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData>:
uint32_t	MemoryStruct_Class::ReadUpdatedConfigurationData(ConfigurationData& cd){
    1914:	b580      	push	{r7, lr}
    1916:	b084      	sub	sp, #16
    1918:	af00      	add	r7, sp, #0
    191a:	6078      	str	r0, [r7, #4]
    191c:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->updatedConfiguration;
    191e:	4b07      	ldr	r3, [pc, #28]	; (193c <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x28>)
    1920:	681b      	ldr	r3, [r3, #0]
    1922:	3310      	adds	r3, #16
    1924:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    1926:	68fa      	ldr	r2, [r7, #12]
    1928:	6839      	ldr	r1, [r7, #0]
    192a:	6878      	ldr	r0, [r7, #4]
    192c:	4b04      	ldr	r3, [pc, #16]	; (1940 <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x2c>)
    192e:	4798      	blx	r3
    1930:	60b8      	str	r0, [r7, #8]
	return	r;
    1932:	68bb      	ldr	r3, [r7, #8]
}
    1934:	4618      	mov	r0, r3
    1936:	3710      	adds	r7, #16
    1938:	46bd      	mov	sp, r7
    193a:	bd80      	pop	{r7, pc}
    193c:	20001d10 	.word	0x20001d10
    1940:	00001945 	.word	0x00001945

00001944 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam>:

uint32_t	MemoryStruct_Class::ReadConfigurationData(ConfigurationData& cd,uint32_t add){
    1944:	b590      	push	{r4, r7, lr}
    1946:	b087      	sub	sp, #28
    1948:	af00      	add	r7, sp, #0
    194a:	60f8      	str	r0, [r7, #12]
    194c:	60b9      	str	r1, [r7, #8]
    194e:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    1950:	68ba      	ldr	r2, [r7, #8]
    1952:	68fb      	ldr	r3, [r7, #12]
    1954:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	r=flash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    1958:	68fb      	ldr	r3, [r7, #12]
    195a:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    195e:	23ac      	movs	r3, #172	; 0xac
    1960:	687a      	ldr	r2, [r7, #4]
    1962:	4804      	ldr	r0, [pc, #16]	; (1974 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam+0x30>)
    1964:	4c04      	ldr	r4, [pc, #16]	; (1978 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam+0x34>)
    1966:	47a0      	blx	r4
    1968:	6178      	str	r0, [r7, #20]
	return	r;
    196a:	697b      	ldr	r3, [r7, #20]
}
    196c:	4618      	mov	r0, r3
    196e:	371c      	adds	r7, #28
    1970:	46bd      	mov	sp, r7
    1972:	bd90      	pop	{r4, r7, pc}
    1974:	20003ac8 	.word	0x20003ac8
    1978:	0001241d 	.word	0x0001241d

0000197c <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv>:

uint32_t	MemoryStruct_Class::ReadCRCConfigurationData(void){
    197c:	b590      	push	{r4, r7, lr}
    197e:	b087      	sub	sp, #28
    1980:	af00      	add	r7, sp, #0
    1982:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	uint32_t	add=(uint32_t)&flashMap->crcConfigData;
    1984:	4b08      	ldr	r3, [pc, #32]	; (19a8 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x2c>)
    1986:	681b      	ldr	r3, [r3, #0]
    1988:	3310      	adds	r3, #16
    198a:	617b      	str	r3, [r7, #20]
	uint32_t	r=flash.ReadAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    198c:	f107 010c 	add.w	r1, r7, #12
    1990:	2304      	movs	r3, #4
    1992:	697a      	ldr	r2, [r7, #20]
    1994:	4805      	ldr	r0, [pc, #20]	; (19ac <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x30>)
    1996:	4c06      	ldr	r4, [pc, #24]	; (19b0 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x34>)
    1998:	47a0      	blx	r4
    199a:	6138      	str	r0, [r7, #16]
	return	crc;
    199c:	68fb      	ldr	r3, [r7, #12]
}
    199e:	4618      	mov	r0, r3
    19a0:	371c      	adds	r7, #28
    19a2:	46bd      	mov	sp, r7
    19a4:	bd90      	pop	{r4, r7, pc}
    19a6:	bf00      	nop
    19a8:	20001d10 	.word	0x20001d10
    19ac:	20003ac8 	.word	0x20003ac8
    19b0:	0001241d 	.word	0x0001241d

000019b4 <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam>:
uint32_t	MemoryStruct_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
    19b4:	b590      	push	{r4, r7, lr}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	60f8      	str	r0, [r7, #12]
    19bc:	60b9      	str	r1, [r7, #8]
    19be:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    19c0:	68ba      	ldr	r2, [r7, #8]
    19c2:	68fb      	ldr	r3, [r7, #12]
    19c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	w=flash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    19c8:	68fb      	ldr	r3, [r7, #12]
    19ca:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    19ce:	23ac      	movs	r3, #172	; 0xac
    19d0:	687a      	ldr	r2, [r7, #4]
    19d2:	4804      	ldr	r0, [pc, #16]	; (19e4 <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam+0x30>)
    19d4:	4c04      	ldr	r4, [pc, #16]	; (19e8 <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam+0x34>)
    19d6:	47a0      	blx	r4
    19d8:	6178      	str	r0, [r7, #20]
	return	w;
    19da:	697b      	ldr	r3, [r7, #20]
}
    19dc:	4618      	mov	r0, r3
    19de:	371c      	adds	r7, #28
    19e0:	46bd      	mov	sp, r7
    19e2:	bd90      	pop	{r4, r7, pc}
    19e4:	20003ac8 	.word	0x20003ac8
    19e8:	000123e9 	.word	0x000123e9

000019ec <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem>:
uint32_t	MemoryStruct_Class::WriteApplicationState(HVACState& hs,uint32_t add){
    19ec:	b590      	push	{r4, r7, lr}
    19ee:	b087      	sub	sp, #28
    19f0:	af00      	add	r7, sp, #0
    19f2:	60f8      	str	r0, [r7, #12]
    19f4:	60b9      	str	r1, [r7, #8]
    19f6:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    19f8:	68ba      	ldr	r2, [r7, #8]
    19fa:	68fb      	ldr	r3, [r7, #12]
    19fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	w=flash.WriteAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
    1a00:	68fb      	ldr	r3, [r7, #12]
    1a02:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    1a06:	237c      	movs	r3, #124	; 0x7c
    1a08:	687a      	ldr	r2, [r7, #4]
    1a0a:	4804      	ldr	r0, [pc, #16]	; (1a1c <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem+0x30>)
    1a0c:	4c04      	ldr	r4, [pc, #16]	; (1a20 <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem+0x34>)
    1a0e:	47a0      	blx	r4
    1a10:	6178      	str	r0, [r7, #20]
	return	w;
    1a12:	697b      	ldr	r3, [r7, #20]
}
    1a14:	4618      	mov	r0, r3
    1a16:	371c      	adds	r7, #28
    1a18:	46bd      	mov	sp, r7
    1a1a:	bd90      	pop	{r4, r7, pc}
    1a1c:	20003ac8 	.word	0x20003ac8
    1a20:	000123e9 	.word	0x000123e9

00001a24 <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData>:
uint32_t	MemoryStruct_Class::WriteDefaultConfiguration(ConfigurationData& cd){
    1a24:	b580      	push	{r7, lr}
    1a26:	b084      	sub	sp, #16
    1a28:	af00      	add	r7, sp, #0
    1a2a:	6078      	str	r0, [r7, #4]
    1a2c:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->defaultConfiguration;
    1a2e:	4b07      	ldr	r3, [pc, #28]	; (1a4c <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData+0x28>)
    1a30:	681b      	ldr	r3, [r3, #0]
    1a32:	3310      	adds	r3, #16
    1a34:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteConfigurationData(cd,add);
    1a36:	68fa      	ldr	r2, [r7, #12]
    1a38:	6839      	ldr	r1, [r7, #0]
    1a3a:	6878      	ldr	r0, [r7, #4]
    1a3c:	4b04      	ldr	r3, [pc, #16]	; (1a50 <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData+0x2c>)
    1a3e:	4798      	blx	r3
    1a40:	60b8      	str	r0, [r7, #8]
	return	w;
    1a42:	68bb      	ldr	r3, [r7, #8]
}
    1a44:	4618      	mov	r0, r3
    1a46:	3710      	adds	r7, #16
    1a48:	46bd      	mov	sp, r7
    1a4a:	bd80      	pop	{r7, pc}
    1a4c:	20001d10 	.word	0x20001d10
    1a50:	000019b5 	.word	0x000019b5

00001a54 <_ZN18MemoryStruct_Class17WriteDefaultStateEv>:
uint32_t	MemoryStruct_Class::WriteDefaultState(void){
    1a54:	b580      	push	{r7, lr}
    1a56:	b084      	sub	sp, #16
    1a58:	af00      	add	r7, sp, #0
    1a5a:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&flashMap->hvacDefaultState;
    1a5c:	4b07      	ldr	r3, [pc, #28]	; (1a7c <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x28>)
    1a5e:	681b      	ldr	r3, [r3, #0]
    1a60:	33cc      	adds	r3, #204	; 0xcc
    1a62:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hvac.defaultState,add);
    1a64:	68fa      	ldr	r2, [r7, #12]
    1a66:	4906      	ldr	r1, [pc, #24]	; (1a80 <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x2c>)
    1a68:	6878      	ldr	r0, [r7, #4]
    1a6a:	4b06      	ldr	r3, [pc, #24]	; (1a84 <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x30>)
    1a6c:	4798      	blx	r3
    1a6e:	60b8      	str	r0, [r7, #8]
	return	w;
    1a70:	68bb      	ldr	r3, [r7, #8]
}
    1a72:	4618      	mov	r0, r3
    1a74:	3710      	adds	r7, #16
    1a76:	46bd      	mov	sp, r7
    1a78:	bd80      	pop	{r7, pc}
    1a7a:	bf00      	nop
    1a7c:	20001d10 	.word	0x20001d10
    1a80:	20001d2c 	.word	0x20001d2c
    1a84:	000019ed 	.word	0x000019ed

00001a88 <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState>:

uint32_t	MemoryStruct_Class::WriteCurrentState(HVACState& hs){
    1a88:	b580      	push	{r7, lr}
    1a8a:	b084      	sub	sp, #16
    1a8c:	af00      	add	r7, sp, #0
    1a8e:	6078      	str	r0, [r7, #4]
    1a90:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacState;
    1a92:	4b07      	ldr	r3, [pc, #28]	; (1ab0 <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState+0x28>)
    1a94:	681b      	ldr	r3, [r3, #0]
    1a96:	33cc      	adds	r3, #204	; 0xcc
    1a98:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hs,add);
    1a9a:	68fa      	ldr	r2, [r7, #12]
    1a9c:	6839      	ldr	r1, [r7, #0]
    1a9e:	6878      	ldr	r0, [r7, #4]
    1aa0:	4b04      	ldr	r3, [pc, #16]	; (1ab4 <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState+0x2c>)
    1aa2:	4798      	blx	r3
    1aa4:	60b8      	str	r0, [r7, #8]
	return	w;
    1aa6:	68bb      	ldr	r3, [r7, #8]
}
    1aa8:	4618      	mov	r0, r3
    1aaa:	3710      	adds	r7, #16
    1aac:	46bd      	mov	sp, r7
    1aae:	bd80      	pop	{r7, pc}
    1ab0:	20001d10 	.word	0x20001d10
    1ab4:	000019ed 	.word	0x000019ed

00001ab8 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm>:

uint32_t	MemoryStruct_Class::WriteCRCConfigurationData(uint32_t crc){
    1ab8:	b590      	push	{r4, r7, lr}
    1aba:	b085      	sub	sp, #20
    1abc:	af00      	add	r7, sp, #0
    1abe:	6078      	str	r0, [r7, #4]
    1ac0:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->crcConfigData;
    1ac2:	4b08      	ldr	r3, [pc, #32]	; (1ae4 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x2c>)
    1ac4:	681b      	ldr	r3, [r3, #0]
    1ac6:	3310      	adds	r3, #16
    1ac8:	60fb      	str	r3, [r7, #12]
	uint32_t	w=flash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    1aca:	4639      	mov	r1, r7
    1acc:	2304      	movs	r3, #4
    1ace:	68fa      	ldr	r2, [r7, #12]
    1ad0:	4805      	ldr	r0, [pc, #20]	; (1ae8 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x30>)
    1ad2:	4c06      	ldr	r4, [pc, #24]	; (1aec <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x34>)
    1ad4:	47a0      	blx	r4
    1ad6:	60b8      	str	r0, [r7, #8]
	return	w;
    1ad8:	68bb      	ldr	r3, [r7, #8]
}
    1ada:	4618      	mov	r0, r3
    1adc:	3714      	adds	r7, #20
    1ade:	46bd      	mov	sp, r7
    1ae0:	bd90      	pop	{r4, r7, pc}
    1ae2:	bf00      	nop
    1ae4:	20001d10 	.word	0x20001d10
    1ae8:	20003ac8 	.word	0x20003ac8
    1aec:	000123e9 	.word	0x000123e9

00001af0 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm>:
uint32_t	MemoryStruct_Class::WriteCRCAppState(uint32_t crc){
    1af0:	b590      	push	{r4, r7, lr}
    1af2:	b085      	sub	sp, #20
    1af4:	af00      	add	r7, sp, #0
    1af6:	6078      	str	r0, [r7, #4]
    1af8:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->crcAppState;
    1afa:	4b08      	ldr	r3, [pc, #32]	; (1b1c <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x2c>)
    1afc:	681b      	ldr	r3, [r3, #0]
    1afe:	33cc      	adds	r3, #204	; 0xcc
    1b00:	60fb      	str	r3, [r7, #12]
	uint32_t	w=flash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    1b02:	4639      	mov	r1, r7
    1b04:	2304      	movs	r3, #4
    1b06:	68fa      	ldr	r2, [r7, #12]
    1b08:	4805      	ldr	r0, [pc, #20]	; (1b20 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x30>)
    1b0a:	4c06      	ldr	r4, [pc, #24]	; (1b24 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x34>)
    1b0c:	47a0      	blx	r4
    1b0e:	60b8      	str	r0, [r7, #8]
	return	w;
    1b10:	68bb      	ldr	r3, [r7, #8]
}
    1b12:	4618      	mov	r0, r3
    1b14:	3714      	adds	r7, #20
    1b16:	46bd      	mov	sp, r7
    1b18:	bd90      	pop	{r4, r7, pc}
    1b1a:	bf00      	nop
    1b1c:	20001d10 	.word	0x20001d10
    1b20:	20003ac8 	.word	0x20003ac8
    1b24:	000123e9 	.word	0x000123e9

00001b28 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState>:
uint32_t	MemoryStruct_Class::WriteLastConfigurationData(ConfigurationData& cd){
	uint32_t	add=(uint32_t)&flashMap->lastConfiguracion;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	MemoryStruct_Class::ReadApplicationState(HVACState& as){
    1b28:	b590      	push	{r4, r7, lr}
    1b2a:	b085      	sub	sp, #20
    1b2c:	af00      	add	r7, sp, #0
    1b2e:	6078      	str	r0, [r7, #4]
    1b30:	6039      	str	r1, [r7, #0]
	flashAddress=(uint32_t)&flashMap->hvacState;
    1b32:	4b0d      	ldr	r3, [pc, #52]	; (1b68 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x40>)
    1b34:	681b      	ldr	r3, [r3, #0]
    1b36:	33cc      	adds	r3, #204	; 0xcc
    1b38:	461a      	mov	r2, r3
    1b3a:	687b      	ldr	r3, [r7, #4]
    1b3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	handlerAppState=PTR_HVAC_STATE(&as);
    1b40:	683a      	ldr	r2, [r7, #0]
    1b42:	687b      	ldr	r3, [r7, #4]
    1b44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	r=flash.ReadAddress((uint8_t*)handlerAppState,flashAddress,sizeof(HVACState));
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    1b4e:	687b      	ldr	r3, [r7, #4]
    1b50:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    1b54:	237c      	movs	r3, #124	; 0x7c
    1b56:	4805      	ldr	r0, [pc, #20]	; (1b6c <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x44>)
    1b58:	4c05      	ldr	r4, [pc, #20]	; (1b70 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x48>)
    1b5a:	47a0      	blx	r4
    1b5c:	60f8      	str	r0, [r7, #12]
	return	r;
    1b5e:	68fb      	ldr	r3, [r7, #12]
}
    1b60:	4618      	mov	r0, r3
    1b62:	3714      	adds	r7, #20
    1b64:	46bd      	mov	sp, r7
    1b66:	bd90      	pop	{r4, r7, pc}
    1b68:	20001d10 	.word	0x20001d10
    1b6c:	20003ac8 	.word	0x20003ac8
    1b70:	0001241d 	.word	0x0001241d

00001b74 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv>:
uint32_t	MemoryStruct_Class::ReadCRCApplicationState(void){
    1b74:	b590      	push	{r4, r7, lr}
    1b76:	b085      	sub	sp, #20
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	flashAddress=(uint32_t)&flashMap->crcAppState;
    1b7c:	4b0a      	ldr	r3, [pc, #40]	; (1ba8 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x34>)
    1b7e:	681b      	ldr	r3, [r3, #0]
    1b80:	33cc      	adds	r3, #204	; 0xcc
    1b82:	461a      	mov	r2, r3
    1b84:	687b      	ldr	r3, [r7, #4]
    1b86:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	uint32_t	r=flash.ReadAddress((uint8_t*)(&crc),flashAddress,sizeof(uint32_t));
    1b8a:	687b      	ldr	r3, [r7, #4]
    1b8c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    1b90:	f107 0108 	add.w	r1, r7, #8
    1b94:	2304      	movs	r3, #4
    1b96:	4805      	ldr	r0, [pc, #20]	; (1bac <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x38>)
    1b98:	4c05      	ldr	r4, [pc, #20]	; (1bb0 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x3c>)
    1b9a:	47a0      	blx	r4
    1b9c:	60f8      	str	r0, [r7, #12]
	return	crc;
    1b9e:	68bb      	ldr	r3, [r7, #8]
    1ba0:	4618      	mov	r0, r3
    1ba2:	3714      	adds	r7, #20
    1ba4:	46bd      	mov	sp, r7
    1ba6:	bd90      	pop	{r4, r7, pc}
    1ba8:	20001d10 	.word	0x20001d10
    1bac:	20003ac8 	.word	0x20003ac8
    1bb0:	0001241d 	.word	0x0001241d

00001bb4 <_ZN10PBIT_ClassC1Ev>:

#include "PBIT_Class.h"
#include "Interfaces_Class.h"

// default constructor
PBIT_Class::PBIT_Class()
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
{
} //PBIT_Class
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	4618      	mov	r0, r3
    1bc0:	370c      	adds	r7, #12
    1bc2:	46bd      	mov	sp, r7
    1bc4:	bc80      	pop	{r7}
    1bc6:	4770      	bx	lr

00001bc8 <_ZN10PBIT_ClassD1Ev>:

// default destructor
PBIT_Class::~PBIT_Class()
    1bc8:	b480      	push	{r7}
    1bca:	b083      	sub	sp, #12
    1bcc:	af00      	add	r7, sp, #0
    1bce:	6078      	str	r0, [r7, #4]
{
} //~PBIT_Class
    1bd0:	687b      	ldr	r3, [r7, #4]
    1bd2:	4618      	mov	r0, r3
    1bd4:	370c      	adds	r7, #12
    1bd6:	46bd      	mov	sp, r7
    1bd8:	bc80      	pop	{r7}
    1bda:	4770      	bx	lr

00001bdc <_ZN10PBIT_ClasscvbEv>:
		isOK=true;
	}
	return isOK;
}

PBIT_Class::operator bool(){
    1bdc:	b480      	push	{r7}
    1bde:	b083      	sub	sp, #12
    1be0:	af00      	add	r7, sp, #0
    1be2:	6078      	str	r0, [r7, #4]
	return	isOK;
    1be4:	687b      	ldr	r3, [r7, #4]
    1be6:	781b      	ldrb	r3, [r3, #0]
    1be8:	b2db      	uxtb	r3, r3
}
    1bea:	4618      	mov	r0, r3
    1bec:	370c      	adds	r7, #12
    1bee:	46bd      	mov	sp, r7
    1bf0:	bc80      	pop	{r7}
    1bf2:	4770      	bx	lr

00001bf4 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus>:

uint32_t  PBIT_Class::CheckCurrentStatus(HVACStatus& cs){
    1bf4:	b580      	push	{r7, lr}
    1bf6:	b086      	sub	sp, #24
    1bf8:	af00      	add	r7, sp, #0
    1bfa:	6078      	str	r0, [r7, #4]
    1bfc:	6039      	str	r1, [r7, #0]
	communicator.GetStatus(cs);
    1bfe:	6839      	ldr	r1, [r7, #0]
    1c00:	4812      	ldr	r0, [pc, #72]	; (1c4c <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x58>)
    1c02:	4b13      	ldr	r3, [pc, #76]	; (1c50 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x5c>)
    1c04:	4798      	blx	r3
	uint32_t	*s=(uint32_t*)&cs.statusBits;
    1c06:	683b      	ldr	r3, [r7, #0]
    1c08:	613b      	str	r3, [r7, #16]
	uint32_t	v=*s;
    1c0a:	693b      	ldr	r3, [r7, #16]
    1c0c:	681b      	ldr	r3, [r3, #0]
    1c0e:	60fb      	str	r3, [r7, #12]

	for (int i=0;i<32;i++)
    1c10:	2300      	movs	r3, #0
    1c12:	617b      	str	r3, [r7, #20]
    1c14:	697b      	ldr	r3, [r7, #20]
    1c16:	2b1f      	cmp	r3, #31
    1c18:	dc0d      	bgt.n	1c36 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x42>
	{
		v+=(0x01<<i)&(v);
    1c1a:	2201      	movs	r2, #1
    1c1c:	697b      	ldr	r3, [r7, #20]
    1c1e:	fa02 f303 	lsl.w	r3, r2, r3
    1c22:	461a      	mov	r2, r3
    1c24:	68fb      	ldr	r3, [r7, #12]
    1c26:	401a      	ands	r2, r3
    1c28:	68fb      	ldr	r3, [r7, #12]
    1c2a:	4413      	add	r3, r2
    1c2c:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<32;i++)
    1c2e:	697b      	ldr	r3, [r7, #20]
    1c30:	3301      	adds	r3, #1
    1c32:	617b      	str	r3, [r7, #20]
    1c34:	e7ee      	b.n	1c14 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x20>
		
	}
	if (v==0)
    1c36:	68fb      	ldr	r3, [r7, #12]
    1c38:	2b00      	cmp	r3, #0
    1c3a:	d102      	bne.n	1c42 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x4e>
	{
		isOK=true;
    1c3c:	687b      	ldr	r3, [r7, #4]
    1c3e:	2201      	movs	r2, #1
    1c40:	701a      	strb	r2, [r3, #0]
	}
	return	v;
    1c42:	68fb      	ldr	r3, [r7, #12]
}
    1c44:	4618      	mov	r0, r3
    1c46:	3718      	adds	r7, #24
    1c48:	46bd      	mov	sp, r7
    1c4a:	bd80      	pop	{r7, pc}
    1c4c:	200011b4 	.word	0x200011b4
    1c50:	00001125 	.word	0x00001125

00001c54 <_Z41__static_initialization_and_destruction_0ii>:

    1c54:	b580      	push	{r7, lr}
    1c56:	b082      	sub	sp, #8
    1c58:	af00      	add	r7, sp, #0
    1c5a:	6078      	str	r0, [r7, #4]
    1c5c:	6039      	str	r1, [r7, #0]
    1c5e:	687b      	ldr	r3, [r7, #4]
    1c60:	2b01      	cmp	r3, #1
    1c62:	d10c      	bne.n	1c7e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1c64:	683b      	ldr	r3, [r7, #0]
    1c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1c6a:	4293      	cmp	r3, r2
    1c6c:	d107      	bne.n	1c7e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1c6e:	4806      	ldr	r0, [pc, #24]	; (1c88 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1c70:	4b06      	ldr	r3, [pc, #24]	; (1c8c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1c72:	4798      	blx	r3
    1c74:	4a06      	ldr	r2, [pc, #24]	; (1c90 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1c76:	4907      	ldr	r1, [pc, #28]	; (1c94 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1c78:	4803      	ldr	r0, [pc, #12]	; (1c88 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1c7a:	4b07      	ldr	r3, [pc, #28]	; (1c98 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1c7c:	4798      	blx	r3
    1c7e:	bf00      	nop
    1c80:	3708      	adds	r7, #8
    1c82:	46bd      	mov	sp, r7
    1c84:	bd80      	pop	{r7, pc}
    1c86:	bf00      	nop
    1c88:	20001d14 	.word	0x20001d14
    1c8c:	00001bb5 	.word	0x00001bb5
    1c90:	20000000 	.word	0x20000000
    1c94:	00001bc9 	.word	0x00001bc9
    1c98:	0001427d 	.word	0x0001427d

00001c9c <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:
    1c9c:	b580      	push	{r7, lr}
    1c9e:	af00      	add	r7, sp, #0
    1ca0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1ca4:	2001      	movs	r0, #1
    1ca6:	4b01      	ldr	r3, [pc, #4]	; (1cac <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x10>)
    1ca8:	4798      	blx	r3
    1caa:	bd80      	pop	{r7, pc}
    1cac:	00001c55 	.word	0x00001c55

00001cb0 <_ZN19PersistenceServicesC1Ev>:
tick_t PersistenceServices::lastUpdate[kNumberOfUsageTimeCounters + kNumberOfCycleDescriptions];	




PersistenceServices::PersistenceServices(void)
    1cb0:	b580      	push	{r7, lr}
    1cb2:	b082      	sub	sp, #8
    1cb4:	af00      	add	r7, sp, #0
    1cb6:	6078      	str	r0, [r7, #4]
	:lastValidSaveWorkingStateForGAINIndex(0)
    1cb8:	687b      	ldr	r3, [r7, #4]
    1cba:	4618      	mov	r0, r3
    1cbc:	4b05      	ldr	r3, [pc, #20]	; (1cd4 <_ZN19PersistenceServicesC1Ev+0x24>)
    1cbe:	4798      	blx	r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	2200      	movs	r2, #0
    1cc4:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	{
	}
    1cc8:	687b      	ldr	r3, [r7, #4]
    1cca:	4618      	mov	r0, r3
    1ccc:	3708      	adds	r7, #8
    1cce:	46bd      	mov	sp, r7
    1cd0:	bd80      	pop	{r7, pc}
    1cd2:	bf00      	nop
    1cd4:	00000bf9 	.word	0x00000bf9

00001cd8 <_ZN19PersistenceServices26writeConfigurationDataAreaER17ConfigurationData>:
	
	return result;
	}

bool PersistenceServices::writeConfigurationDataArea(ConfigurationData& data)
	{
    1cd8:	b480      	push	{r7}
    1cda:	b085      	sub	sp, #20
    1cdc:	af00      	add	r7, sp, #0
    1cde:	6078      	str	r0, [r7, #4]
    1ce0:	6039      	str	r1, [r7, #0]
	bool	result(true);
    1ce2:	2301      	movs	r3, #1
    1ce4:	73fb      	strb	r3, [r7, #15]

	data.commons.version = kConfigurationDataVersion;
    1ce6:	683b      	ldr	r3, [r7, #0]
    1ce8:	2204      	movs	r2, #4
    1cea:	605a      	str	r2, [r3, #4]
	data.commons.size = kConfigurationDataSize;
    1cec:	683b      	ldr	r3, [r7, #0]
    1cee:	22ac      	movs	r2, #172	; 0xac
    1cf0:	601a      	str	r2, [r3, #0]
	data.commons.partNumber = PARTNUMBER;
    1cf2:	683b      	ldr	r3, [r7, #0]
    1cf4:	f240 720c 	movw	r2, #1804	; 0x70c
    1cf8:	609a      	str	r2, [r3, #8]



	

	return result;
    1cfa:	7bfb      	ldrb	r3, [r7, #15]
	}
    1cfc:	4618      	mov	r0, r3
    1cfe:	3714      	adds	r7, #20
    1d00:	46bd      	mov	sp, r7
    1d02:	bc80      	pop	{r7}
    1d04:	4770      	bx	lr

00001d06 <_ZN19PersistenceServices20readCycleDescriptionER16CycleDescriptionh>:
	
	return result;
	}

bool PersistenceServices::readCycleDescription(CycleDescription& cycle, uint8 id)
	{
    1d06:	b480      	push	{r7}
    1d08:	b087      	sub	sp, #28
    1d0a:	af00      	add	r7, sp, #0
    1d0c:	60f8      	str	r0, [r7, #12]
    1d0e:	60b9      	str	r1, [r7, #8]
    1d10:	4613      	mov	r3, r2
    1d12:	71fb      	strb	r3, [r7, #7]
	bool		result(false);
    1d14:	2300      	movs	r3, #0
    1d16:	75fb      	strb	r3, [r7, #23]
		{


		}

	return result;
    1d18:	7dfb      	ldrb	r3, [r7, #23]
	}
    1d1a:	4618      	mov	r0, r3
    1d1c:	371c      	adds	r7, #28
    1d1e:	46bd      	mov	sp, r7
    1d20:	bc80      	pop	{r7}
    1d22:	4770      	bx	lr

00001d24 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData>:
	invalidatePersistentArea(kNVM2,FRAMProxy.persistentConfigurationArea.header);

	}

bool PersistenceServices::readPersistentConfigurationDataArea(PersistentConfigurationData& data)
	{
    1d24:	b590      	push	{r4, r7, lr}
    1d26:	b085      	sub	sp, #20
    1d28:	af00      	add	r7, sp, #0
    1d2a:	6078      	str	r0, [r7, #4]
    1d2c:	6039      	str	r1, [r7, #0]
	bool		result;

	result = isPersistentAreaValid(kNVM2, FRAMProxy.persistentConfigurationArea.header, sizeof(PersistentConfigurationDataArea));
    1d2e:	2300      	movs	r3, #0
    1d30:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
    1d34:	2344      	movs	r3, #68	; 0x44
    1d36:	2102      	movs	r1, #2
    1d38:	6878      	ldr	r0, [r7, #4]
    1d3a:	4c1e      	ldr	r4, [pc, #120]	; (1db4 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData+0x90>)
    1d3c:	47a0      	blx	r4
    1d3e:	4603      	mov	r3, r0
    1d40:	73fb      	strb	r3, [r7, #15]
	if (result)
    1d42:	7bfb      	ldrb	r3, [r7, #15]
    1d44:	2b00      	cmp	r3, #0
    1d46:	d003      	beq.n	1d50 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData+0x2c>
		{
		int32	address((int32)&FRAMProxy.persistentConfigurationArea.configuration);
    1d48:	2300      	movs	r3, #0
    1d4a:	f203 5314 	addw	r3, r3, #1300	; 0x514
    1d4e:	60bb      	str	r3, [r7, #8]
	
		}

	result &= (data.version == kPersistentConfigurationDataVersion);
    1d50:	7bfb      	ldrb	r3, [r7, #15]
    1d52:	683a      	ldr	r2, [r7, #0]
    1d54:	6852      	ldr	r2, [r2, #4]
    1d56:	2a02      	cmp	r2, #2
    1d58:	bf0c      	ite	eq
    1d5a:	2201      	moveq	r2, #1
    1d5c:	2200      	movne	r2, #0
    1d5e:	b2d2      	uxtb	r2, r2
    1d60:	4013      	ands	r3, r2
    1d62:	2b00      	cmp	r3, #0
    1d64:	bf14      	ite	ne
    1d66:	2301      	movne	r3, #1
    1d68:	2300      	moveq	r3, #0
    1d6a:	73fb      	strb	r3, [r7, #15]
	result &= (data.size == kPersistentConfigurationDataSize);
    1d6c:	7bfb      	ldrb	r3, [r7, #15]
    1d6e:	683a      	ldr	r2, [r7, #0]
    1d70:	6812      	ldr	r2, [r2, #0]
    1d72:	2a38      	cmp	r2, #56	; 0x38
    1d74:	bf0c      	ite	eq
    1d76:	2201      	moveq	r2, #1
    1d78:	2200      	movne	r2, #0
    1d7a:	b2d2      	uxtb	r2, r2
    1d7c:	4013      	ands	r3, r2
    1d7e:	2b00      	cmp	r3, #0
    1d80:	bf14      	ite	ne
    1d82:	2301      	movne	r3, #1
    1d84:	2300      	moveq	r3, #0
    1d86:	73fb      	strb	r3, [r7, #15]
	result &= (data.partNumber == PARTNUMBER);
    1d88:	7bfb      	ldrb	r3, [r7, #15]
    1d8a:	683a      	ldr	r2, [r7, #0]
    1d8c:	6892      	ldr	r2, [r2, #8]
    1d8e:	f240 710c 	movw	r1, #1804	; 0x70c
    1d92:	428a      	cmp	r2, r1
    1d94:	bf0c      	ite	eq
    1d96:	2201      	moveq	r2, #1
    1d98:	2200      	movne	r2, #0
    1d9a:	b2d2      	uxtb	r2, r2
    1d9c:	4013      	ands	r3, r2
    1d9e:	2b00      	cmp	r3, #0
    1da0:	bf14      	ite	ne
    1da2:	2301      	movne	r3, #1
    1da4:	2300      	moveq	r3, #0
    1da6:	73fb      	strb	r3, [r7, #15]
	return result;
    1da8:	7bfb      	ldrb	r3, [r7, #15]
	}
    1daa:	4618      	mov	r0, r3
    1dac:	3714      	adds	r7, #20
    1dae:	46bd      	mov	sp, r7
    1db0:	bd90      	pop	{r4, r7, pc}
    1db2:	bf00      	nop
    1db4:	00001ea5 	.word	0x00001ea5

00001db8 <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData>:
	
bool PersistenceServices::writePersistentConfigurationDataArea(PersistentConfigurationData& data)
	{
    1db8:	b590      	push	{r4, r7, lr}
    1dba:	b085      	sub	sp, #20
    1dbc:	af00      	add	r7, sp, #0
    1dbe:	6078      	str	r0, [r7, #4]
    1dc0:	6039      	str	r1, [r7, #0]
	bool		result(true);
    1dc2:	2301      	movs	r3, #1
    1dc4:	73fb      	strb	r3, [r7, #15]

	data.version = kPersistentConfigurationDataVersion;
    1dc6:	683b      	ldr	r3, [r7, #0]
    1dc8:	2202      	movs	r2, #2
    1dca:	605a      	str	r2, [r3, #4]
	data.size = kPersistentConfigurationDataSize;
    1dcc:	683b      	ldr	r3, [r7, #0]
    1dce:	2238      	movs	r2, #56	; 0x38
    1dd0:	601a      	str	r2, [r3, #0]
	data.partNumber = PARTNUMBER;
    1dd2:	683b      	ldr	r3, [r7, #0]
    1dd4:	f240 720c 	movw	r2, #1804	; 0x70c
    1dd8:	609a      	str	r2, [r3, #8]

	int32	address((int32)&FRAMProxy.persistentConfigurationArea.configuration);
    1dda:	2300      	movs	r3, #0
    1ddc:	f203 5314 	addw	r3, r3, #1300	; 0x514
    1de0:	60bb      	str	r3, [r7, #8]

    invalidatePersistentArea(kNVM2, FRAMProxy.persistentConfigurationArea.header);
    1de2:	2300      	movs	r3, #0
    1de4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
    1de8:	461a      	mov	r2, r3
    1dea:	2102      	movs	r1, #2
    1dec:	6878      	ldr	r0, [r7, #4]
    1dee:	4b07      	ldr	r3, [pc, #28]	; (1e0c <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData+0x54>)
    1df0:	4798      	blx	r3
	 validatePersistentArea(kNVM2, FRAMProxy.persistentConfigurationArea.header, sizeof(PersistentConfigurationDataArea));
    1df2:	2300      	movs	r3, #0
    1df4:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
    1df8:	2344      	movs	r3, #68	; 0x44
    1dfa:	2102      	movs	r1, #2
    1dfc:	6878      	ldr	r0, [r7, #4]
    1dfe:	4c04      	ldr	r4, [pc, #16]	; (1e10 <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData+0x58>)
    1e00:	47a0      	blx	r4


	return result;
    1e02:	7bfb      	ldrb	r3, [r7, #15]
	}
    1e04:	4618      	mov	r0, r3
    1e06:	3714      	adds	r7, #20
    1e08:	46bd      	mov	sp, r7
    1e0a:	bd90      	pop	{r4, r7, pc}
    1e0c:	00001f21 	.word	0x00001f21
    1e10:	00001f41 	.word	0x00001f41

00001e14 <_ZN19PersistenceServices26restoreWorkingStateForGAINER9HVACState>:


	}

void PersistenceServices::restoreWorkingStateForGAIN(HVACState& v)
	{
    1e14:	b480      	push	{r7}
    1e16:	b083      	sub	sp, #12
    1e18:	af00      	add	r7, sp, #0
    1e1a:	6078      	str	r0, [r7, #4]
    1e1c:	6039      	str	r1, [r7, #0]
	int32	address;
	


	}
    1e1e:	bf00      	nop
    1e20:	370c      	adds	r7, #12
    1e22:	46bd      	mov	sp, r7
    1e24:	bc80      	pop	{r7}
    1e26:	4770      	bx	lr

00001e28 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv>:
	value += increment;

	}
	
bool PersistenceServices::IsConfigurationDataUpdated()
{
    1e28:	b580      	push	{r7, lr}
    1e2a:	b086      	sub	sp, #24
    1e2c:	af00      	add	r7, sp, #0
    1e2e:	6078      	str	r0, [r7, #4]
	uint32_t	ver=factoryDefaultsConfiguration.commons.version;
    1e30:	4b17      	ldr	r3, [pc, #92]	; (1e90 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x68>)
    1e32:	685b      	ldr	r3, [r3, #4]
    1e34:	617b      	str	r3, [r7, #20]
	uint32_t	verUp=memory.ReadUpdatedConfigurationData(configuration);
    1e36:	687b      	ldr	r3, [r7, #4]
    1e38:	33fc      	adds	r3, #252	; 0xfc
    1e3a:	4619      	mov	r1, r3
    1e3c:	4815      	ldr	r0, [pc, #84]	; (1e94 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    1e3e:	4b16      	ldr	r3, [pc, #88]	; (1e98 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x70>)
    1e40:	4798      	blx	r3
    1e42:	6138      	str	r0, [r7, #16]

	if ((verUp>0))
    1e44:	693b      	ldr	r3, [r7, #16]
    1e46:	2b00      	cmp	r3, #0
    1e48:	d001      	beq.n	1e4e <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x26>
	{
		return false;
    1e4a:	2300      	movs	r3, #0
    1e4c:	e01c      	b.n	1e88 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
	} 
	else
	{
		uint32_t	refCRC=memory.ReadCRCConfigurationData();
    1e4e:	4811      	ldr	r0, [pc, #68]	; (1e94 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    1e50:	4b12      	ldr	r3, [pc, #72]	; (1e9c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x74>)
    1e52:	4798      	blx	r3
    1e54:	60f8      	str	r0, [r7, #12]
		uint32_t	crc=CalculateCRC((uint32_t *)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
    1e56:	6878      	ldr	r0, [r7, #4]
    1e58:	687b      	ldr	r3, [r7, #4]
    1e5a:	33fc      	adds	r3, #252	; 0xfc
    1e5c:	22ac      	movs	r2, #172	; 0xac
    1e5e:	4619      	mov	r1, r3
    1e60:	4b0f      	ldr	r3, [pc, #60]	; (1ea0 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x78>)
    1e62:	4798      	blx	r3
    1e64:	60b8      	str	r0, [r7, #8]
		if (refCRC==crc)
    1e66:	68fa      	ldr	r2, [r7, #12]
    1e68:	68bb      	ldr	r3, [r7, #8]
    1e6a:	429a      	cmp	r2, r3
    1e6c:	d10b      	bne.n	1e86 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x5e>
		{
			verUp=configuration.commons.version;
    1e6e:	687b      	ldr	r3, [r7, #4]
    1e70:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1e74:	613b      	str	r3, [r7, #16]
			return (verUp>ver);
    1e76:	693a      	ldr	r2, [r7, #16]
    1e78:	697b      	ldr	r3, [r7, #20]
    1e7a:	429a      	cmp	r2, r3
    1e7c:	bf8c      	ite	hi
    1e7e:	2301      	movhi	r3, #1
    1e80:	2300      	movls	r3, #0
    1e82:	b2db      	uxtb	r3, r3
    1e84:	e000      	b.n	1e88 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
		} 
		else
		{
			return	false;
    1e86:	2300      	movs	r3, #0
		}
		
	}
	return	false;

}
    1e88:	4618      	mov	r0, r3
    1e8a:	3718      	adds	r7, #24
    1e8c:	46bd      	mov	sp, r7
    1e8e:	bd80      	pop	{r7, pc}
    1e90:	0001a00c 	.word	0x0001a00c
    1e94:	200018c4 	.word	0x200018c4
    1e98:	00001915 	.word	0x00001915
    1e9c:	0000197d 	.word	0x0000197d
    1ea0:	00000c4d 	.word	0x00000c4d

00001ea4 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm>:
    }
#endif


bool PersistenceServices::isPersistentAreaValid(uint8 nvm, NVMHeader& adr, uint32 size)
	{
    1ea4:	b480      	push	{r7}
    1ea6:	b089      	sub	sp, #36	; 0x24
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	60f8      	str	r0, [r7, #12]
    1eac:	607a      	str	r2, [r7, #4]
    1eae:	603b      	str	r3, [r7, #0]
    1eb0:	460b      	mov	r3, r1
    1eb2:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;
	bool		result;


	result = (header.magic == validMagic) && (header.size == size);
    1eb4:	693b      	ldr	r3, [r7, #16]
    1eb6:	4a08      	ldr	r2, [pc, #32]	; (1ed8 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x34>)
    1eb8:	4293      	cmp	r3, r2
    1eba:	d105      	bne.n	1ec8 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x24>
    1ebc:	697a      	ldr	r2, [r7, #20]
    1ebe:	683b      	ldr	r3, [r7, #0]
    1ec0:	429a      	cmp	r2, r3
    1ec2:	d101      	bne.n	1ec8 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x24>
    1ec4:	2301      	movs	r3, #1
    1ec6:	e000      	b.n	1eca <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x26>
    1ec8:	2300      	movs	r3, #0
    1eca:	77fb      	strb	r3, [r7, #31]
	

	return result;
    1ecc:	7ffb      	ldrb	r3, [r7, #31]
	}
    1ece:	4618      	mov	r0, r3
    1ed0:	3724      	adds	r7, #36	; 0x24
    1ed2:	46bd      	mov	sp, r7
    1ed4:	bc80      	pop	{r7}
    1ed6:	4770      	bx	lr
    1ed8:	14031869 	.word	0x14031869

00001edc <_ZN19PersistenceServices16IsStateDataValidER9HVACState>:
bool PersistenceServices::IsStateDataValid(HVACState& as)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	b084      	sub	sp, #16
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
    1ee4:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadCRCApplicationState();
    1ee6:	480b      	ldr	r0, [pc, #44]	; (1f14 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x38>)
    1ee8:	4b0b      	ldr	r3, [pc, #44]	; (1f18 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x3c>)
    1eea:	4798      	blx	r3
    1eec:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(lastState));
    1eee:	687b      	ldr	r3, [r7, #4]
    1ef0:	227c      	movs	r2, #124	; 0x7c
    1ef2:	6839      	ldr	r1, [r7, #0]
    1ef4:	4618      	mov	r0, r3
    1ef6:	4b09      	ldr	r3, [pc, #36]	; (1f1c <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x40>)
    1ef8:	4798      	blx	r3
    1efa:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    1efc:	68fa      	ldr	r2, [r7, #12]
    1efe:	68bb      	ldr	r3, [r7, #8]
    1f00:	429a      	cmp	r2, r3
    1f02:	bf0c      	ite	eq
    1f04:	2301      	moveq	r3, #1
    1f06:	2300      	movne	r3, #0
    1f08:	b2db      	uxtb	r3, r3
}
    1f0a:	4618      	mov	r0, r3
    1f0c:	3710      	adds	r7, #16
    1f0e:	46bd      	mov	sp, r7
    1f10:	bd80      	pop	{r7, pc}
    1f12:	bf00      	nop
    1f14:	200018c4 	.word	0x200018c4
    1f18:	00001b75 	.word	0x00001b75
    1f1c:	00000c4d 	.word	0x00000c4d

00001f20 <_ZN19PersistenceServices24invalidatePersistentAreaEhR9NVMHeader>:

void PersistenceServices::invalidatePersistentArea(uint8 nvm, NVMHeader& adr)
	{
    1f20:	b480      	push	{r7}
    1f22:	b089      	sub	sp, #36	; 0x24
    1f24:	af00      	add	r7, sp, #0
    1f26:	60f8      	str	r0, [r7, #12]
    1f28:	460b      	mov	r3, r1
    1f2a:	607a      	str	r2, [r7, #4]
    1f2c:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;

	header.magic = 0;
    1f2e:	2300      	movs	r3, #0
    1f30:	617b      	str	r3, [r7, #20]
	header.size = 0;
    1f32:	2300      	movs	r3, #0
    1f34:	61bb      	str	r3, [r7, #24]

	}
    1f36:	bf00      	nop
    1f38:	3724      	adds	r7, #36	; 0x24
    1f3a:	46bd      	mov	sp, r7
    1f3c:	bc80      	pop	{r7}
    1f3e:	4770      	bx	lr

00001f40 <_ZN19PersistenceServices22validatePersistentAreaEhR9NVMHeaderm>:

void PersistenceServices::validatePersistentArea(uint8 nvm, NVMHeader& adr, uint32 size)
	{
    1f40:	b480      	push	{r7}
    1f42:	b089      	sub	sp, #36	; 0x24
    1f44:	af00      	add	r7, sp, #0
    1f46:	60f8      	str	r0, [r7, #12]
    1f48:	607a      	str	r2, [r7, #4]
    1f4a:	603b      	str	r3, [r7, #0]
    1f4c:	460b      	mov	r3, r1
    1f4e:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;

	header.magic = validMagic;
    1f50:	4b04      	ldr	r3, [pc, #16]	; (1f64 <_ZN19PersistenceServices22validatePersistentAreaEhR9NVMHeaderm+0x24>)
    1f52:	617b      	str	r3, [r7, #20]
	header.size = size;
    1f54:	683b      	ldr	r3, [r7, #0]
    1f56:	61bb      	str	r3, [r7, #24]


	

	}
    1f58:	bf00      	nop
    1f5a:	3724      	adds	r7, #36	; 0x24
    1f5c:	46bd      	mov	sp, r7
    1f5e:	bc80      	pop	{r7}
    1f60:	4770      	bx	lr
    1f62:	bf00      	nop
    1f64:	14031869 	.word	0x14031869

00001f68 <_ZN5eventC1Ev>:
inline event::event()
    1f68:	b580      	push	{r7, lr}
    1f6a:	b082      	sub	sp, #8
    1f6c:	af00      	add	r7, sp, #0
    1f6e:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    1f70:	687b      	ldr	r3, [r7, #4]
    1f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1f76:	801a      	strh	r2, [r3, #0]
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1f7e:	805a      	strh	r2, [r3, #2]
    1f80:	687b      	ldr	r3, [r7, #4]
    1f82:	2200      	movs	r2, #0
    1f84:	605a      	str	r2, [r3, #4]
    1f86:	687b      	ldr	r3, [r7, #4]
    1f88:	3308      	adds	r3, #8
    1f8a:	2100      	movs	r1, #0
    1f8c:	4618      	mov	r0, r3
    1f8e:	4b05      	ldr	r3, [pc, #20]	; (1fa4 <_ZN5eventC1Ev+0x3c>)
    1f90:	4798      	blx	r3
    1f92:	687b      	ldr	r3, [r7, #4]
    1f94:	2200      	movs	r2, #0
    1f96:	60da      	str	r2, [r3, #12]
	}
    1f98:	687b      	ldr	r3, [r7, #4]
    1f9a:	4618      	mov	r0, r3
    1f9c:	3708      	adds	r7, #8
    1f9e:	46bd      	mov	sp, r7
    1fa0:	bd80      	pop	{r7, pc}
    1fa2:	bf00      	nop
    1fa4:	000002d1 	.word	0x000002d1

00001fa8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    1fa8:	b590      	push	{r4, r7, lr}
    1faa:	b083      	sub	sp, #12
    1fac:	af00      	add	r7, sp, #0
    1fae:	6078      	str	r0, [r7, #4]
    1fb0:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    1fb2:	683b      	ldr	r3, [r7, #0]
    1fb4:	2b00      	cmp	r3, #0
    1fb6:	d101      	bne.n	1fbc <_ZN5Print5writeEPKc+0x14>
    1fb8:	2300      	movs	r3, #0
    1fba:	e00c      	b.n	1fd6 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	681b      	ldr	r3, [r3, #0]
    1fc0:	3304      	adds	r3, #4
    1fc2:	681c      	ldr	r4, [r3, #0]
    1fc4:	6838      	ldr	r0, [r7, #0]
    1fc6:	4b06      	ldr	r3, [pc, #24]	; (1fe0 <_ZN5Print5writeEPKc+0x38>)
    1fc8:	4798      	blx	r3
    1fca:	4603      	mov	r3, r0
    1fcc:	461a      	mov	r2, r3
    1fce:	6839      	ldr	r1, [r7, #0]
    1fd0:	6878      	ldr	r0, [r7, #4]
    1fd2:	47a0      	blx	r4
    1fd4:	4603      	mov	r3, r0
    }
    1fd6:	4618      	mov	r0, r3
    1fd8:	370c      	adds	r7, #12
    1fda:	46bd      	mov	sp, r7
    1fdc:	bd90      	pop	{r4, r7, pc}
    1fde:	bf00      	nop
    1fe0:	00016501 	.word	0x00016501

00001fe4 <_ZN12States_ClassC1Ev>:
#include "CDC_Class.h"
#include "ALU_Class.h"
#include "CBIT_Class.h"

	// default constructor
States_Class::States_Class(void)
    1fe4:	b580      	push	{r7, lr}
    1fe6:	b082      	sub	sp, #8
    1fe8:	af00      	add	r7, sp, #0
    1fea:	6078      	str	r0, [r7, #4]
    1fec:	687b      	ldr	r3, [r7, #4]
    1fee:	4618      	mov	r0, r3
    1ff0:	4b0d      	ldr	r3, [pc, #52]	; (2028 <_ZN12States_ClassC1Ev+0x44>)
    1ff2:	4798      	blx	r3
    1ff4:	687b      	ldr	r3, [r7, #4]
    1ff6:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
    1ffa:	4618      	mov	r0, r3
    1ffc:	4b0b      	ldr	r3, [pc, #44]	; (202c <_ZN12States_ClassC1Ev+0x48>)
    1ffe:	4798      	blx	r3
    2000:	4a0b      	ldr	r2, [pc, #44]	; (2030 <_ZN12States_ClassC1Ev+0x4c>)
    2002:	687b      	ldr	r3, [r7, #4]
    2004:	601a      	str	r2, [r3, #0]
	{
	listener.eventHandler = NULL;
    2006:	4b0b      	ldr	r3, [pc, #44]	; (2034 <_ZN12States_ClassC1Ev+0x50>)
    2008:	2200      	movs	r2, #0
    200a:	605a      	str	r2, [r3, #4]
state=defaultState;
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	687b      	ldr	r3, [r7, #4]
    2010:	f502 706f 	add.w	r0, r2, #956	; 0x3bc
    2014:	3304      	adds	r3, #4
    2016:	227c      	movs	r2, #124	; 0x7c
    2018:	4619      	mov	r1, r3
    201a:	4b07      	ldr	r3, [pc, #28]	; (2038 <_ZN12States_ClassC1Ev+0x54>)
    201c:	4798      	blx	r3
	}
    201e:	687b      	ldr	r3, [r7, #4]
    2020:	4618      	mov	r0, r3
    2022:	3708      	adds	r7, #8
    2024:	46bd      	mov	sp, r7
    2026:	bd80      	pop	{r7, pc}
    2028:	00000885 	.word	0x00000885
    202c:	0000108f 	.word	0x0000108f
    2030:	0001a574 	.word	0x0001a574
    2034:	20003a74 	.word	0x20003a74
    2038:	0001631d 	.word	0x0001631d

0000203c <_ZN12States_ClassD1Ev>:

// default destructor
States_Class::~States_Class()
    203c:	b580      	push	{r7, lr}
    203e:	b082      	sub	sp, #8
    2040:	af00      	add	r7, sp, #0
    2042:	6078      	str	r0, [r7, #4]
    2044:	4a08      	ldr	r2, [pc, #32]	; (2068 <_ZN12States_ClassD1Ev+0x2c>)
    2046:	687b      	ldr	r3, [r7, #4]
    2048:	601a      	str	r2, [r3, #0]
    204a:	687b      	ldr	r3, [r7, #4]
    204c:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
    2050:	4618      	mov	r0, r3
    2052:	4b06      	ldr	r3, [pc, #24]	; (206c <_ZN12States_ClassD1Ev+0x30>)
    2054:	4798      	blx	r3
    2056:	687b      	ldr	r3, [r7, #4]
    2058:	4618      	mov	r0, r3
    205a:	4b05      	ldr	r3, [pc, #20]	; (2070 <_ZN12States_ClassD1Ev+0x34>)
    205c:	4798      	blx	r3
{
} //~States_Class
    205e:	687b      	ldr	r3, [r7, #4]
    2060:	4618      	mov	r0, r3
    2062:	3708      	adds	r7, #8
    2064:	46bd      	mov	sp, r7
    2066:	bd80      	pop	{r7, pc}
    2068:	0001a574 	.word	0x0001a574
    206c:	000010a3 	.word	0x000010a3
    2070:	000008ed 	.word	0x000008ed

00002074 <_ZN12States_Class4InitEv>:

void States_Class::Init(void){
    2074:	b480      	push	{r7}
    2076:	b083      	sub	sp, #12
    2078:	af00      	add	r7, sp, #0
    207a:	6078      	str	r0, [r7, #4]
	
	
}
    207c:	bf00      	nop
    207e:	370c      	adds	r7, #12
    2080:	46bd      	mov	sp, r7
    2082:	bc80      	pop	{r7}
    2084:	4770      	bx	lr
	...

00002088 <_ZN12States_Class5StartEh>:
void States_Class::Start(uint8_t	operationMode)
	{
    2088:	b590      	push	{r4, r7, lr}
    208a:	b08b      	sub	sp, #44	; 0x2c
    208c:	af02      	add	r7, sp, #8
    208e:	6078      	str	r0, [r7, #4]
    2090:	460b      	mov	r3, r1
    2092:	70fb      	strb	r3, [r7, #3]
	event	e;
    2094:	f107 0308 	add.w	r3, r7, #8
    2098:	4618      	mov	r0, r3
    209a:	4b54      	ldr	r3, [pc, #336]	; (21ec <_ZN12States_Class5StartEh+0x164>)
    209c:	4798      	blx	r3
    tick_t	timerValue = 0L;
    209e:	2300      	movs	r3, #0
    20a0:	61fb      	str	r3, [r7, #28]
    bool	isCurrentStateValid = false;
    20a2:	2300      	movs	r3, #0
    20a4:	76fb      	strb	r3, [r7, #27]
	memory.ReadApplicationState(lastState);
    20a6:	687b      	ldr	r3, [r7, #4]
    20a8:	f503 6387 	add.w	r3, r3, #1080	; 0x438
    20ac:	4619      	mov	r1, r3
    20ae:	4850      	ldr	r0, [pc, #320]	; (21f0 <_ZN12States_Class5StartEh+0x168>)
    20b0:	4b50      	ldr	r3, [pc, #320]	; (21f4 <_ZN12States_Class5StartEh+0x16c>)
    20b2:	4798      	blx	r3
	state.currentState = kGAINStateReset;
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	2200      	movs	r2, #0
    20b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
	if (calendar.WasInterrupted())
    20bc:	484e      	ldr	r0, [pc, #312]	; (21f8 <_ZN12States_Class5StartEh+0x170>)
    20be:	4b4f      	ldr	r3, [pc, #316]	; (21fc <_ZN12States_Class5StartEh+0x174>)
    20c0:	4798      	blx	r3
    20c2:	4603      	mov	r3, r0
    20c4:	2b00      	cmp	r3, #0
    20c6:	d019      	beq.n	20fc <_ZN12States_Class5StartEh+0x74>
	{
		powerInterruptDuration = calendar.GetPowerInterrupTime();
    20c8:	484b      	ldr	r0, [pc, #300]	; (21f8 <_ZN12States_Class5StartEh+0x170>)
    20ca:	4b4d      	ldr	r3, [pc, #308]	; (2200 <_ZN12States_Class5StartEh+0x178>)
    20cc:	4798      	blx	r3
    20ce:	4602      	mov	r2, r0
    20d0:	687b      	ldr	r3, [r7, #4]
    20d2:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
		#ifdef OFFLINE
		resumeLastStateValid = ((powerInterruptDuration > 0) && (powerInterruptDuration < 5000L));
		#else
		resumeLastStateValid = ((powerInterruptDuration >= 0) && (powerInterruptDuration < 5000L));
    20d6:	687b      	ldr	r3, [r7, #4]
    20d8:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
    20dc:	2b00      	cmp	r3, #0
    20de:	db08      	blt.n	20f2 <_ZN12States_Class5StartEh+0x6a>
    20e0:	687b      	ldr	r3, [r7, #4]
    20e2:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
    20e6:	f241 3287 	movw	r2, #4999	; 0x1387
    20ea:	4293      	cmp	r3, r2
    20ec:	dc01      	bgt.n	20f2 <_ZN12States_Class5StartEh+0x6a>
    20ee:	2201      	movs	r2, #1
    20f0:	e000      	b.n	20f4 <_ZN12States_Class5StartEh+0x6c>
    20f2:	2200      	movs	r2, #0
    20f4:	687b      	ldr	r3, [r7, #4]
    20f6:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
    20fa:	e002      	b.n	2102 <_ZN12States_Class5StartEh+0x7a>

		usb << "powerInterruptDuration was " << powerInterruptDuration << (resumeLastStateValid?" 200msec":" power resume") << newline;
		
		#endif
	}else{
		memory.LogResetEvent();
    20fc:	4841      	ldr	r0, [pc, #260]	; (2204 <_ZN12States_Class5StartEh+0x17c>)
    20fe:	4b42      	ldr	r3, [pc, #264]	; (2208 <_ZN12States_Class5StartEh+0x180>)
    2100:	4798      	blx	r3
	}

	

	//	Check persistent memory
	if (SetInitialState()>1){
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	4618      	mov	r0, r3
    2106:	4b41      	ldr	r3, [pc, #260]	; (220c <_ZN12States_Class5StartEh+0x184>)
    2108:	4798      	blx	r3
    210a:	4603      	mov	r3, r0
    210c:	2b01      	cmp	r3, #1
    210e:	bf8c      	ite	hi
    2110:	2301      	movhi	r3, #1
    2112:	2300      	movls	r3, #0
    2114:	b2db      	uxtb	r3, r3
    2116:	2b00      	cmp	r3, #0
    2118:	d003      	beq.n	2122 <_ZN12States_Class5StartEh+0x9a>
		SetDefaultState();
    211a:	687b      	ldr	r3, [r7, #4]
    211c:	4618      	mov	r0, r3
    211e:	4b3c      	ldr	r3, [pc, #240]	; (2210 <_ZN12States_Class5StartEh+0x188>)
    2120:	4798      	blx	r3
	}



	readResult=memory.ReadLastConfigurationData(configuration);
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
    2128:	4619      	mov	r1, r3
    212a:	4831      	ldr	r0, [pc, #196]	; (21f0 <_ZN12States_Class5StartEh+0x168>)
    212c:	4b39      	ldr	r3, [pc, #228]	; (2214 <_ZN12States_Class5StartEh+0x18c>)
    212e:	4798      	blx	r3
    2130:	4602      	mov	r2, r0
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	if (readResult>0)
    2138:	687b      	ldr	r3, [r7, #4]
    213a:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
    213e:	2b00      	cmp	r3, #0
    2140:	d005      	beq.n	214e <_ZN12States_Class5StartEh+0xc6>
		{
	#if __DEBUG__ > 3
		usb << "readConfigurationDataArea failed!" << newline;
	#endif
		SetFactoryDefaults(0, true, false);
    2142:	6878      	ldr	r0, [r7, #4]
    2144:	2300      	movs	r3, #0
    2146:	2201      	movs	r2, #1
    2148:	2100      	movs	r1, #0
    214a:	4c33      	ldr	r4, [pc, #204]	; (2218 <_ZN12States_Class5StartEh+0x190>)
    214c:	47a0      	blx	r4
		usb << "configuration.m == " << configuration.m << newline;
		usb << "configuration.zA0 == " << configuration.zA0 << newline;
		}
#endif

	if (!memory.readPersistentConfigurationDataArea(persistentConfiguration))
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	f503 735f 	add.w	r3, r3, #892	; 0x37c
    2154:	4619      	mov	r1, r3
    2156:	4831      	ldr	r0, [pc, #196]	; (221c <_ZN12States_Class5StartEh+0x194>)
    2158:	4b31      	ldr	r3, [pc, #196]	; (2220 <_ZN12States_Class5StartEh+0x198>)
    215a:	4798      	blx	r3
    215c:	4603      	mov	r3, r0
    215e:	f083 0301 	eor.w	r3, r3, #1
    2162:	b2db      	uxtb	r3, r3
    2164:	2b00      	cmp	r3, #0
    2166:	d002      	beq.n	216e <_ZN12States_Class5StartEh+0xe6>
		{
	#if __DEBUG__ > 2
		usb << "readPersistentConfigurationDataArea failed!" << memory.getUptime() << newline;
	#endif
		setPersistentConfigurationDefaults();
    2168:	6878      	ldr	r0, [r7, #4]
    216a:	4b2e      	ldr	r3, [pc, #184]	; (2224 <_ZN12States_Class5StartEh+0x19c>)
    216c:	4798      	blx	r3
					<< ", duration == " << persistentConfiguration.cycle.duration << ", maximum time == " << persistentConfiguration.cycle.maximumDuration
					<< ", flags == " << persistentConfiguration.cycle.cycleFlags << newline;
#endif
	

	communicator.CheckCommunication();
    216e:	482e      	ldr	r0, [pc, #184]	; (2228 <_ZN12States_Class5StartEh+0x1a0>)
    2170:	4b2e      	ldr	r3, [pc, #184]	; (222c <_ZN12States_Class5StartEh+0x1a4>)
    2172:	4798      	blx	r3

	if (isCurrentStateValid)
    2174:	7efb      	ldrb	r3, [r7, #27]
    2176:	2b00      	cmp	r3, #0
    2178:	d007      	beq.n	218a <_ZN12States_Class5StartEh+0x102>
    {
		prepareStateChangeEvent(e, kGAINStateResume);
    217a:	f107 0108 	add.w	r1, r7, #8
    217e:	2300      	movs	r3, #0
    2180:	2202      	movs	r2, #2
    2182:	6878      	ldr	r0, [r7, #4]
    2184:	4c2a      	ldr	r4, [pc, #168]	; (2230 <_ZN12States_Class5StartEh+0x1a8>)
    2186:	47a0      	blx	r4
    2188:	e006      	b.n	2198 <_ZN12States_Class5StartEh+0x110>
    }else{
		prepareStateChangeEvent(e, kGAINStateInitialize);
    218a:	f107 0108 	add.w	r1, r7, #8
    218e:	2300      	movs	r3, #0
    2190:	2201      	movs	r2, #1
    2192:	6878      	ldr	r0, [r7, #4]
    2194:	4c26      	ldr	r4, [pc, #152]	; (2230 <_ZN12States_Class5StartEh+0x1a8>)
    2196:	47a0      	blx	r4
    }

	listener.SendEventSelf(e);
    2198:	f107 0308 	add.w	r3, r7, #8
    219c:	4619      	mov	r1, r3
    219e:	4825      	ldr	r0, [pc, #148]	; (2234 <_ZN12States_Class5StartEh+0x1ac>)
    21a0:	4b25      	ldr	r3, [pc, #148]	; (2238 <_ZN12States_Class5StartEh+0x1b0>)
    21a2:	4798      	blx	r3



    while (cBit.IsOK())
    21a4:	4825      	ldr	r0, [pc, #148]	; (223c <_ZN12States_Class5StartEh+0x1b4>)
    21a6:	4b26      	ldr	r3, [pc, #152]	; (2240 <_ZN12States_Class5StartEh+0x1b8>)
    21a8:	4798      	blx	r3
    21aa:	4603      	mov	r3, r0
    21ac:	2b00      	cmp	r3, #0
    21ae:	d015      	beq.n	21dc <_ZN12States_Class5StartEh+0x154>
		{
		if (listener.WaitForEvent(e, kGAINEventClass, kGAINSwitchStateEvent))
    21b0:	4b24      	ldr	r3, [pc, #144]	; (2244 <_ZN12States_Class5StartEh+0x1bc>)
    21b2:	681b      	ldr	r3, [r3, #0]
    21b4:	f107 0108 	add.w	r1, r7, #8
    21b8:	9300      	str	r3, [sp, #0]
    21ba:	f44f 7300 	mov.w	r3, #512	; 0x200
    21be:	f44f 7200 	mov.w	r2, #512	; 0x200
    21c2:	481c      	ldr	r0, [pc, #112]	; (2234 <_ZN12States_Class5StartEh+0x1ac>)
    21c4:	4c20      	ldr	r4, [pc, #128]	; (2248 <_ZN12States_Class5StartEh+0x1c0>)
    21c6:	47a0      	blx	r4
    21c8:	4603      	mov	r3, r0
    21ca:	2b00      	cmp	r3, #0
    21cc:	d0ea      	beq.n	21a4 <_ZN12States_Class5StartEh+0x11c>
			{
			handleHVACEvent(e);
    21ce:	f107 0308 	add.w	r3, r7, #8
    21d2:	4619      	mov	r1, r3
    21d4:	6878      	ldr	r0, [r7, #4]
    21d6:	4b1d      	ldr	r3, [pc, #116]	; (224c <_ZN12States_Class5StartEh+0x1c4>)
    21d8:	4798      	blx	r3
    while (cBit.IsOK())
    21da:	e7e3      	b.n	21a4 <_ZN12States_Class5StartEh+0x11c>
			}
        else{

        }
		}
		Stop(0);
    21dc:	2100      	movs	r1, #0
    21de:	6878      	ldr	r0, [r7, #4]
    21e0:	4b1b      	ldr	r3, [pc, #108]	; (2250 <_ZN12States_Class5StartEh+0x1c8>)
    21e2:	4798      	blx	r3
	}
    21e4:	bf00      	nop
    21e6:	3724      	adds	r7, #36	; 0x24
    21e8:	46bd      	mov	sp, r7
    21ea:	bd90      	pop	{r4, r7, pc}
    21ec:	00001f69 	.word	0x00001f69
    21f0:	200018c4 	.word	0x200018c4
    21f4:	00001b29 	.word	0x00001b29
    21f8:	20003ce8 	.word	0x20003ce8
    21fc:	00012e05 	.word	0x00012e05
    2200:	00012d2d 	.word	0x00012d2d
    2204:	20001238 	.word	0x20001238
    2208:	00000cdd 	.word	0x00000cdd
    220c:	00000965 	.word	0x00000965
    2210:	00000b69 	.word	0x00000b69
    2214:	000018e5 	.word	0x000018e5
    2218:	0000090d 	.word	0x0000090d
    221c:	20001708 	.word	0x20001708
    2220:	00001d25 	.word	0x00001d25
    2224:	00002255 	.word	0x00002255
    2228:	200011b4 	.word	0x200011b4
    222c:	000010b9 	.word	0x000010b9
    2230:	00002a1d 	.word	0x00002a1d
    2234:	20003a74 	.word	0x20003a74
    2238:	000117f9 	.word	0x000117f9
    223c:	200010f4 	.word	0x200010f4
    2240:	00000811 	.word	0x00000811
    2244:	0001ba38 	.word	0x0001ba38
    2248:	00011621 	.word	0x00011621
    224c:	000022f9 	.word	0x000022f9
    2250:	00002b21 	.word	0x00002b21

00002254 <_ZN12States_Class34setPersistentConfigurationDefaultsEv>:


void States_Class::setPersistentConfigurationDefaults(void)
	{
    2254:	b580      	push	{r7, lr}
    2256:	b082      	sub	sp, #8
    2258:	af00      	add	r7, sp, #0
    225a:	6078      	str	r0, [r7, #4]
	setPersistentConfiguration(0);
    225c:	2100      	movs	r1, #0
    225e:	6878      	ldr	r0, [r7, #4]
    2260:	4b02      	ldr	r3, [pc, #8]	; (226c <_ZN12States_Class34setPersistentConfigurationDefaultsEv+0x18>)
    2262:	4798      	blx	r3
	}
    2264:	bf00      	nop
    2266:	3708      	adds	r7, #8
    2268:	46bd      	mov	sp, r7
    226a:	bd80      	pop	{r7, pc}
    226c:	00002271 	.word	0x00002271

00002270 <_ZN12States_Class26setPersistentConfigurationEh>:

void States_Class::setPersistentConfiguration(uint8 cycleID)
	{
    2270:	b580      	push	{r7, lr}
    2272:	b082      	sub	sp, #8
    2274:	af00      	add	r7, sp, #0
    2276:	6078      	str	r0, [r7, #4]
    2278:	460b      	mov	r3, r1
    227a:	70fb      	strb	r3, [r7, #3]
	persistentConfiguration.cycleDescriptionID = cycleID;
    227c:	78fa      	ldrb	r2, [r7, #3]
    227e:	687b      	ldr	r3, [r7, #4]
    2280:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	readCycleDescription(persistentConfiguration.cycle, persistentConfiguration.cycleDescriptionID);
    2284:	687b      	ldr	r3, [r7, #4]
    2286:	f503 7163 	add.w	r1, r3, #908	; 0x38c
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
    2290:	b2db      	uxtb	r3, r3
    2292:	461a      	mov	r2, r3
    2294:	6878      	ldr	r0, [r7, #4]
    2296:	4b09      	ldr	r3, [pc, #36]	; (22bc <_ZN12States_Class26setPersistentConfigurationEh+0x4c>)
    2298:	4798      	blx	r3
   writeResult=memory.writePersistentConfigurationDataArea(persistentConfiguration);
    229a:	687b      	ldr	r3, [r7, #4]
    229c:	f503 735f 	add.w	r3, r3, #892	; 0x37c
    22a0:	4619      	mov	r1, r3
    22a2:	4807      	ldr	r0, [pc, #28]	; (22c0 <_ZN12States_Class26setPersistentConfigurationEh+0x50>)
    22a4:	4b07      	ldr	r3, [pc, #28]	; (22c4 <_ZN12States_Class26setPersistentConfigurationEh+0x54>)
    22a6:	4798      	blx	r3
    22a8:	4603      	mov	r3, r0
    22aa:	461a      	mov	r2, r3
    22ac:	687b      	ldr	r3, [r7, #4]
    22ae:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
	} 	
    22b2:	bf00      	nop
    22b4:	3708      	adds	r7, #8
    22b6:	46bd      	mov	sp, r7
    22b8:	bd80      	pop	{r7, pc}
    22ba:	bf00      	nop
    22bc:	000022c9 	.word	0x000022c9
    22c0:	20001708 	.word	0x20001708
    22c4:	00001db9 	.word	0x00001db9

000022c8 <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh>:



bool States_Class::readCycleDescription(CycleDescription& cycle, uint8 id)
	{
    22c8:	b580      	push	{r7, lr}
    22ca:	b086      	sub	sp, #24
    22cc:	af00      	add	r7, sp, #0
    22ce:	60f8      	str	r0, [r7, #12]
    22d0:	60b9      	str	r1, [r7, #8]
    22d2:	4613      	mov	r3, r2
    22d4:	71fb      	strb	r3, [r7, #7]
	bool	result(memory.readCycleDescription(cycle, id));
    22d6:	79fb      	ldrb	r3, [r7, #7]
    22d8:	461a      	mov	r2, r3
    22da:	68b9      	ldr	r1, [r7, #8]
    22dc:	4804      	ldr	r0, [pc, #16]	; (22f0 <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh+0x28>)
    22de:	4b05      	ldr	r3, [pc, #20]	; (22f4 <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh+0x2c>)
    22e0:	4798      	blx	r3
    22e2:	4603      	mov	r3, r0
    22e4:	75fb      	strb	r3, [r7, #23]

	return result;
    22e6:	7dfb      	ldrb	r3, [r7, #23]
	}
    22e8:	4618      	mov	r0, r3
    22ea:	3718      	adds	r7, #24
    22ec:	46bd      	mov	sp, r7
    22ee:	bd80      	pop	{r7, pc}
    22f0:	20001708 	.word	0x20001708
    22f4:	00001d07 	.word	0x00001d07

000022f8 <_ZN12States_Class15handleHVACEventER5event>:


void States_Class::handleHVACEvent(event& e)
	{
    22f8:	b580      	push	{r7, lr}
    22fa:	b084      	sub	sp, #16
    22fc:	af00      	add	r7, sp, #0
    22fe:	6078      	str	r0, [r7, #4]
    2300:	6039      	str	r1, [r7, #0]
	if (state.currentState != kGAINStateResume)
    2302:	687b      	ldr	r3, [r7, #4]
    2304:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    2308:	2b02      	cmp	r3, #2
    230a:	d005      	beq.n	2318 <_ZN12States_Class15handleHVACEventER5event+0x20>
		state.callingState = state.currentState;
    230c:	687b      	ldr	r3, [r7, #4]
    230e:	f8d3 23e0 	ldr.w	r2, [r3, #992]	; 0x3e0
    2312:	687b      	ldr	r3, [r7, #4]
    2314:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
	state.currentState = e.data.wordData[0];
    2318:	683b      	ldr	r3, [r7, #0]
    231a:	891b      	ldrh	r3, [r3, #8]
    231c:	461a      	mov	r2, r3
    231e:	687b      	ldr	r3, [r7, #4]
    2320:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
	state.stateFlags = e.data.wordData[1];
    2324:	683b      	ldr	r3, [r7, #0]
    2326:	895b      	ldrh	r3, [r3, #10]
    2328:	461a      	mov	r2, r3
    232a:	687b      	ldr	r3, [r7, #4]
    232c:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
	state.stateEntryTime = hvacTimer.get_ticks();
    2330:	486a      	ldr	r0, [pc, #424]	; (24dc <_ZN12States_Class15handleHVACEventER5event+0x1e4>)
    2332:	4b6b      	ldr	r3, [pc, #428]	; (24e0 <_ZN12States_Class15handleHVACEventER5event+0x1e8>)
    2334:	4798      	blx	r3
    2336:	4603      	mov	r3, r0
    2338:	461a      	mov	r2, r3
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0

#if __DEBUG__ > 0
	
	usb << "handleGAINEvent received: switching from ";
    2340:	4968      	ldr	r1, [pc, #416]	; (24e4 <_ZN12States_Class15handleHVACEventER5event+0x1ec>)
    2342:	4869      	ldr	r0, [pc, #420]	; (24e8 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    2344:	4b69      	ldr	r3, [pc, #420]	; (24ec <_ZN12States_Class15handleHVACEventER5event+0x1f4>)
    2346:	4798      	blx	r3
	usb.write(gainStateDescription[state.callingState]);
    2348:	687b      	ldr	r3, [r7, #4]
    234a:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
    234e:	4a68      	ldr	r2, [pc, #416]	; (24f0 <_ZN12States_Class15handleHVACEventER5event+0x1f8>)
    2350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2354:	4619      	mov	r1, r3
    2356:	4864      	ldr	r0, [pc, #400]	; (24e8 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    2358:	4b66      	ldr	r3, [pc, #408]	; (24f4 <_ZN12States_Class15handleHVACEventER5event+0x1fc>)
    235a:	4798      	blx	r3
	usb << " to ";
    235c:	4966      	ldr	r1, [pc, #408]	; (24f8 <_ZN12States_Class15handleHVACEventER5event+0x200>)
    235e:	4862      	ldr	r0, [pc, #392]	; (24e8 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    2360:	4b66      	ldr	r3, [pc, #408]	; (24fc <_ZN12States_Class15handleHVACEventER5event+0x204>)
    2362:	4798      	blx	r3
	usb.write(gainStateDescription[state.currentState]);
    2364:	687b      	ldr	r3, [r7, #4]
    2366:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    236a:	4a61      	ldr	r2, [pc, #388]	; (24f0 <_ZN12States_Class15handleHVACEventER5event+0x1f8>)
    236c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2370:	4619      	mov	r1, r3
    2372:	485d      	ldr	r0, [pc, #372]	; (24e8 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    2374:	4b5f      	ldr	r3, [pc, #380]	; (24f4 <_ZN12States_Class15handleHVACEventER5event+0x1fc>)
    2376:	4798      	blx	r3
	usb << " (flags == " << state.stateFlags << ')' << NEWLINE;
    2378:	4961      	ldr	r1, [pc, #388]	; (2500 <_ZN12States_Class15handleHVACEventER5event+0x208>)
    237a:	485b      	ldr	r0, [pc, #364]	; (24e8 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    237c:	4b61      	ldr	r3, [pc, #388]	; (2504 <_ZN12States_Class15handleHVACEventER5event+0x20c>)
    237e:	4798      	blx	r3
    2380:	4602      	mov	r2, r0
    2382:	687b      	ldr	r3, [r7, #4]
    2384:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
    2388:	4619      	mov	r1, r3
    238a:	4610      	mov	r0, r2
    238c:	4b5e      	ldr	r3, [pc, #376]	; (2508 <_ZN12States_Class15handleHVACEventER5event+0x210>)
    238e:	4798      	blx	r3
    2390:	4602      	mov	r2, r0
    2392:	2329      	movs	r3, #41	; 0x29
    2394:	73fb      	strb	r3, [r7, #15]
    2396:	f107 030f 	add.w	r3, r7, #15
    239a:	4619      	mov	r1, r3
    239c:	4610      	mov	r0, r2
    239e:	4b5b      	ldr	r3, [pc, #364]	; (250c <_ZN12States_Class15handleHVACEventER5event+0x214>)
    23a0:	4798      	blx	r3
    23a2:	4603      	mov	r3, r0
    23a4:	495a      	ldr	r1, [pc, #360]	; (2510 <_ZN12States_Class15handleHVACEventER5event+0x218>)
    23a6:	4618      	mov	r0, r3
    23a8:	4b5a      	ldr	r3, [pc, #360]	; (2514 <_ZN12States_Class15handleHVACEventER5event+0x21c>)
    23aa:	4798      	blx	r3
	
#endif

	saveCurrentState();
    23ac:	6878      	ldr	r0, [r7, #4]
    23ae:	4b5a      	ldr	r3, [pc, #360]	; (2518 <_ZN12States_Class15handleHVACEventER5event+0x220>)
    23b0:	4798      	blx	r3

	switch (state.currentState)
    23b2:	687b      	ldr	r3, [r7, #4]
    23b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    23b8:	3b01      	subs	r3, #1
    23ba:	2b0f      	cmp	r3, #15
    23bc:	f200 8084 	bhi.w	24c8 <_ZN12States_Class15handleHVACEventER5event+0x1d0>
    23c0:	a201      	add	r2, pc, #4	; (adr r2, 23c8 <_ZN12States_Class15handleHVACEventER5event+0xd0>)
    23c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    23c6:	bf00      	nop
    23c8:	00002409 	.word	0x00002409
    23cc:	00002419 	.word	0x00002419
    23d0:	00002429 	.word	0x00002429
    23d4:	00002439 	.word	0x00002439
    23d8:	00002449 	.word	0x00002449
    23dc:	00002459 	.word	0x00002459
    23e0:	000024c9 	.word	0x000024c9
    23e4:	000024c9 	.word	0x000024c9
    23e8:	00002469 	.word	0x00002469
    23ec:	00002489 	.word	0x00002489
    23f0:	000024c9 	.word	0x000024c9
    23f4:	00002479 	.word	0x00002479
    23f8:	000024c9 	.word	0x000024c9
    23fc:	00002499 	.word	0x00002499
    2400:	000024a9 	.word	0x000024a9
    2404:	000024b9 	.word	0x000024b9
		{
		case kGAINStateInitialize:
			handleStateInitialize(state.stateFlags);
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    240e:	4619      	mov	r1, r3
    2410:	6878      	ldr	r0, [r7, #4]
    2412:	4b42      	ldr	r3, [pc, #264]	; (251c <_ZN12States_Class15handleHVACEventER5event+0x224>)
    2414:	4798      	blx	r3
			break;
    2416:	e05c      	b.n	24d2 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateResume:
			handleStateResume(state.stateFlags);
    2418:	687b      	ldr	r3, [r7, #4]
    241a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    241e:	4619      	mov	r1, r3
    2420:	6878      	ldr	r0, [r7, #4]
    2422:	4b3f      	ldr	r3, [pc, #252]	; (2520 <_ZN12States_Class15handleHVACEventER5event+0x228>)
    2424:	4798      	blx	r3
			break;
    2426:	e054      	b.n	24d2 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyOFF:
			handleStateStandbyOFF(state.stateFlags);
    2428:	687b      	ldr	r3, [r7, #4]
    242a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    242e:	4619      	mov	r1, r3
    2430:	6878      	ldr	r0, [r7, #4]
    2432:	4b3c      	ldr	r3, [pc, #240]	; (2524 <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    2434:	4798      	blx	r3
			break;
    2436:	e04c      	b.n	24d2 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStatePrepareStandbyON:
			handleStatePrepareStandbyON(state.stateFlags);
    2438:	687b      	ldr	r3, [r7, #4]
    243a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    243e:	4619      	mov	r1, r3
    2440:	6878      	ldr	r0, [r7, #4]
    2442:	4b39      	ldr	r3, [pc, #228]	; (2528 <_ZN12States_Class15handleHVACEventER5event+0x230>)
    2444:	4798      	blx	r3
			break;
    2446:	e044      	b.n	24d2 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyON:
			handleStateStandbyON(state.stateFlags);
    2448:	687b      	ldr	r3, [r7, #4]
    244a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    244e:	4619      	mov	r1, r3
    2450:	6878      	ldr	r0, [r7, #4]
    2452:	4b36      	ldr	r3, [pc, #216]	; (252c <_ZN12States_Class15handleHVACEventER5event+0x234>)
    2454:	4798      	blx	r3
			break;
    2456:	e03c      	b.n	24d2 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyReady:
			handleStateStandbyReady(state.stateFlags);
    2458:	687b      	ldr	r3, [r7, #4]
    245a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    245e:	4619      	mov	r1, r3
    2460:	6878      	ldr	r0, [r7, #4]
    2462:	4b33      	ldr	r3, [pc, #204]	; (2530 <_ZN12States_Class15handleHVACEventER5event+0x238>)
    2464:	4798      	blx	r3
			break;
    2466:	e034      	b.n	24d2 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateON:
			handleStateON(state.stateFlags);
    2468:	687b      	ldr	r3, [r7, #4]
    246a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    246e:	4619      	mov	r1, r3
    2470:	6878      	ldr	r0, [r7, #4]
    2472:	4b30      	ldr	r3, [pc, #192]	; (2534 <_ZN12States_Class15handleHVACEventER5event+0x23c>)
    2474:	4798      	blx	r3
			break;
    2476:	e02c      	b.n	24d2 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateFinished:
			handleStateFinished(state.stateFlags);
    2478:	687b      	ldr	r3, [r7, #4]
    247a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    247e:	4619      	mov	r1, r3
    2480:	6878      	ldr	r0, [r7, #4]
    2482:	4b2d      	ldr	r3, [pc, #180]	; (2538 <_ZN12States_Class15handleHVACEventER5event+0x240>)
    2484:	4798      	blx	r3
			break;
    2486:	e024      	b.n	24d2 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStoppedProcess:
			handleStateStoppedProcess(state.stateFlags);
    2488:	687b      	ldr	r3, [r7, #4]
    248a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    248e:	4619      	mov	r1, r3
    2490:	6878      	ldr	r0, [r7, #4]
    2492:	4b2a      	ldr	r3, [pc, #168]	; (253c <_ZN12States_Class15handleHVACEventER5event+0x244>)
    2494:	4798      	blx	r3
			break;
    2496:	e01c      	b.n	24d2 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateSelfProtect:
			handleStateSelfProtect(state.stateFlags);
    2498:	687b      	ldr	r3, [r7, #4]
    249a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    249e:	4619      	mov	r1, r3
    24a0:	6878      	ldr	r0, [r7, #4]
    24a2:	4b27      	ldr	r3, [pc, #156]	; (2540 <_ZN12States_Class15handleHVACEventER5event+0x248>)
    24a4:	4798      	blx	r3
			break;
    24a6:	e014      	b.n	24d2 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateError:
			handleStateError(state.stateFlags);
    24a8:	687b      	ldr	r3, [r7, #4]
    24aa:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    24ae:	4619      	mov	r1, r3
    24b0:	6878      	ldr	r0, [r7, #4]
    24b2:	4b24      	ldr	r3, [pc, #144]	; (2544 <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    24b4:	4798      	blx	r3
			break;
    24b6:	e00c      	b.n	24d2 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateMaintenance:
			handleStateMaintenance(state.stateFlags);
    24b8:	687b      	ldr	r3, [r7, #4]
    24ba:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    24be:	4619      	mov	r1, r3
    24c0:	6878      	ldr	r0, [r7, #4]
    24c2:	4b21      	ldr	r3, [pc, #132]	; (2548 <_ZN12States_Class15handleHVACEventER5event+0x250>)
    24c4:	4798      	blx	r3
			break;
    24c6:	e004      	b.n	24d2 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		default:
			handleStateError(kGAINErrorIllegalStateTransition);
    24c8:	2102      	movs	r1, #2
    24ca:	6878      	ldr	r0, [r7, #4]
    24cc:	4b1d      	ldr	r3, [pc, #116]	; (2544 <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    24ce:	4798      	blx	r3
			break;
    24d0:	bf00      	nop
		}
	}
    24d2:	bf00      	nop
    24d4:	3710      	adds	r7, #16
    24d6:	46bd      	mov	sp, r7
    24d8:	bd80      	pop	{r7, pc}
    24da:	bf00      	nop
    24dc:	20003dc0 	.word	0x20003dc0
    24e0:	000131ed 	.word	0x000131ed
    24e4:	0001a4b8 	.word	0x0001a4b8
    24e8:	20003e1c 	.word	0x20003e1c
    24ec:	00002be1 	.word	0x00002be1
    24f0:	20000004 	.word	0x20000004
    24f4:	00001fa9 	.word	0x00001fa9
    24f8:	0001a4e4 	.word	0x0001a4e4
    24fc:	00002c01 	.word	0x00002c01
    2500:	0001a4ec 	.word	0x0001a4ec
    2504:	00001579 	.word	0x00001579
    2508:	00000bd1 	.word	0x00000bd1
    250c:	00002c21 	.word	0x00002c21
    2510:	0001a4f8 	.word	0x0001a4f8
    2514:	00000629 	.word	0x00000629
    2518:	00002a7d 	.word	0x00002a7d
    251c:	0000254d 	.word	0x0000254d
    2520:	00002629 	.word	0x00002629
    2524:	000026e9 	.word	0x000026e9
    2528:	00002781 	.word	0x00002781
    252c:	00002811 	.word	0x00002811
    2530:	00002879 	.word	0x00002879
    2534:	000028b1 	.word	0x000028b1
    2538:	000028fd 	.word	0x000028fd
    253c:	00002935 	.word	0x00002935
    2540:	00002975 	.word	0x00002975
    2544:	000029ad 	.word	0x000029ad
    2548:	000029e5 	.word	0x000029e5

0000254c <_ZN12States_Class21handleStateInitializeEm>:


void States_Class::handleStateInitialize(uint32 flags)
	{
    254c:	b590      	push	{r4, r7, lr}
    254e:	b089      	sub	sp, #36	; 0x24
    2550:	af00      	add	r7, sp, #0
    2552:	6078      	str	r0, [r7, #4]
    2554:	6039      	str	r1, [r7, #0]
	event	e;
    2556:	f107 030c 	add.w	r3, r7, #12
    255a:	4618      	mov	r0, r3
    255c:	4b22      	ldr	r3, [pc, #136]	; (25e8 <_ZN12States_Class21handleStateInitializeEm+0x9c>)
    255e:	4798      	blx	r3
   	uint16	selfTestResult(kGAINNoError);
    2560:	2300      	movs	r3, #0
    2562:	83fb      	strh	r3, [r7, #30]
	
#if __DEBUG__ > 0
	
	usb << "handleStateInitialize: flags == 0x" << flags << NEWLINE;
    2564:	4921      	ldr	r1, [pc, #132]	; (25ec <_ZN12States_Class21handleStateInitializeEm+0xa0>)
    2566:	4822      	ldr	r0, [pc, #136]	; (25f0 <_ZN12States_Class21handleStateInitializeEm+0xa4>)
    2568:	4b22      	ldr	r3, [pc, #136]	; (25f4 <_ZN12States_Class21handleStateInitializeEm+0xa8>)
    256a:	4798      	blx	r3
    256c:	4602      	mov	r2, r0
    256e:	463b      	mov	r3, r7
    2570:	4619      	mov	r1, r3
    2572:	4610      	mov	r0, r2
    2574:	4b20      	ldr	r3, [pc, #128]	; (25f8 <_ZN12States_Class21handleStateInitializeEm+0xac>)
    2576:	4798      	blx	r3
    2578:	4603      	mov	r3, r0
    257a:	4920      	ldr	r1, [pc, #128]	; (25fc <_ZN12States_Class21handleStateInitializeEm+0xb0>)
    257c:	4618      	mov	r0, r3
    257e:	4b20      	ldr	r3, [pc, #128]	; (2600 <_ZN12States_Class21handleStateInitializeEm+0xb4>)
    2580:	4798      	blx	r3
		
#endif
	
	
	listener.CheckEvent();
    2582:	4820      	ldr	r0, [pc, #128]	; (2604 <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    2584:	4b20      	ldr	r3, [pc, #128]	; (2608 <_ZN12States_Class21handleStateInitializeEm+0xbc>)
    2586:	4798      	blx	r3
	if (pBIT.isOK)
    2588:	4b20      	ldr	r3, [pc, #128]	; (260c <_ZN12States_Class21handleStateInitializeEm+0xc0>)
    258a:	781b      	ldrb	r3, [r3, #0]
    258c:	b2db      	uxtb	r3, r3
    258e:	2b00      	cmp	r3, #0
    2590:	d021      	beq.n	25d6 <_ZN12States_Class21handleStateInitializeEm+0x8a>
	{
		#if __DEBUG__ > 0
		
		usb << "handleStateInitialize" << NEWLINE;
    2592:	491f      	ldr	r1, [pc, #124]	; (2610 <_ZN12States_Class21handleStateInitializeEm+0xc4>)
    2594:	4816      	ldr	r0, [pc, #88]	; (25f0 <_ZN12States_Class21handleStateInitializeEm+0xa4>)
    2596:	4b1f      	ldr	r3, [pc, #124]	; (2614 <_ZN12States_Class21handleStateInitializeEm+0xc8>)
    2598:	4798      	blx	r3
    259a:	4603      	mov	r3, r0
    259c:	4917      	ldr	r1, [pc, #92]	; (25fc <_ZN12States_Class21handleStateInitializeEm+0xb0>)
    259e:	4618      	mov	r0, r3
    25a0:	4b17      	ldr	r3, [pc, #92]	; (2600 <_ZN12States_Class21handleStateInitializeEm+0xb4>)
    25a2:	4798      	blx	r3

		#ifdef _OFFLINE
		prepareStateChangeEvent(e, kGAINStateInterrupted);
		listener.SendEventSelf(e);
		#else
		selfTestResult = handlePowerOnSelftest();
    25a4:	6878      	ldr	r0, [r7, #4]
    25a6:	4b1c      	ldr	r3, [pc, #112]	; (2618 <_ZN12States_Class21handleStateInitializeEm+0xcc>)
    25a8:	4798      	blx	r3
    25aa:	4603      	mov	r3, r0
    25ac:	83fb      	strh	r3, [r7, #30]
		if (selfTestResult == kGAINNoError)
    25ae:	8bfb      	ldrh	r3, [r7, #30]
    25b0:	2b00      	cmp	r3, #0
    25b2:	d10c      	bne.n	25ce <_ZN12States_Class21handleStateInitializeEm+0x82>
		{
			prepareStateChangeEvent(e, kGAINStateStandbyOFF);
    25b4:	f107 010c 	add.w	r1, r7, #12
    25b8:	2300      	movs	r3, #0
    25ba:	2203      	movs	r2, #3
    25bc:	6878      	ldr	r0, [r7, #4]
    25be:	4c17      	ldr	r4, [pc, #92]	; (261c <_ZN12States_Class21handleStateInitializeEm+0xd0>)
    25c0:	47a0      	blx	r4
			listener.SendEventSelf(e);
    25c2:	f107 030c 	add.w	r3, r7, #12
    25c6:	4619      	mov	r1, r3
    25c8:	480e      	ldr	r0, [pc, #56]	; (2604 <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    25ca:	4b15      	ldr	r3, [pc, #84]	; (2620 <_ZN12States_Class21handleStateInitializeEm+0xd4>)
    25cc:	4798      	blx	r3
		}
		#endif

		listener.CheckEvent();
    25ce:	480d      	ldr	r0, [pc, #52]	; (2604 <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    25d0:	4b0d      	ldr	r3, [pc, #52]	; (2608 <_ZN12States_Class21handleStateInitializeEm+0xbc>)
    25d2:	4798      	blx	r3
	}



	
	}
    25d4:	e003      	b.n	25de <_ZN12States_Class21handleStateInitializeEm+0x92>
		Stop();
    25d6:	2100      	movs	r1, #0
    25d8:	6878      	ldr	r0, [r7, #4]
    25da:	4b12      	ldr	r3, [pc, #72]	; (2624 <_ZN12States_Class21handleStateInitializeEm+0xd8>)
    25dc:	4798      	blx	r3
	}
    25de:	bf00      	nop
    25e0:	3724      	adds	r7, #36	; 0x24
    25e2:	46bd      	mov	sp, r7
    25e4:	bd90      	pop	{r4, r7, pc}
    25e6:	bf00      	nop
    25e8:	00001f69 	.word	0x00001f69
    25ec:	0001a4fc 	.word	0x0001a4fc
    25f0:	20003e1c 	.word	0x20003e1c
    25f4:	00002c45 	.word	0x00002c45
    25f8:	00000bd1 	.word	0x00000bd1
    25fc:	0001a4f8 	.word	0x0001a4f8
    2600:	00000629 	.word	0x00000629
    2604:	20003a74 	.word	0x20003a74
    2608:	000118e1 	.word	0x000118e1
    260c:	20001d14 	.word	0x20001d14
    2610:	0001a520 	.word	0x0001a520
    2614:	000015d9 	.word	0x000015d9
    2618:	00002a59 	.word	0x00002a59
    261c:	00002a1d 	.word	0x00002a1d
    2620:	000117f9 	.word	0x000117f9
    2624:	00002b21 	.word	0x00002b21

00002628 <_ZN12States_Class17handleStateResumeEm>:


void States_Class::handleStateResume(uint32 flags)
	{
    2628:	b590      	push	{r4, r7, lr}
    262a:	b089      	sub	sp, #36	; 0x24
    262c:	af00      	add	r7, sp, #0
    262e:	6078      	str	r0, [r7, #4]
    2630:	6039      	str	r1, [r7, #0]
	event	e;
    2632:	f107 030c 	add.w	r3, r7, #12
    2636:	4618      	mov	r0, r3
    2638:	4b24      	ldr	r3, [pc, #144]	; (26cc <_ZN12States_Class17handleStateResumeEm+0xa4>)
    263a:	4798      	blx	r3
	uint8	currentState(state.currentState);
    263c:	687b      	ldr	r3, [r7, #4]
    263e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    2642:	77fb      	strb	r3, [r7, #31]
    uint16	selfTestResult(kGAINNoError);
    2644:	2300      	movs	r3, #0
    2646:	83bb      	strh	r3, [r7, #28]
#endif

#if __DEBUG__ > 3
	usb << "state.currentState (before) " << state.currentState << newline;
#endif
	memory.restoreWorkingStateForGAIN(state);
    2648:	687b      	ldr	r3, [r7, #4]
    264a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    264e:	4619      	mov	r1, r3
    2650:	481f      	ldr	r0, [pc, #124]	; (26d0 <_ZN12States_Class17handleStateResumeEm+0xa8>)
    2652:	4b20      	ldr	r3, [pc, #128]	; (26d4 <_ZN12States_Class17handleStateResumeEm+0xac>)
    2654:	4798      	blx	r3
	usb << "state.currentState (after) " << state.currentState << newline;
#endif


    //Switch into current state if no error occured
    if(selfTestResult == kGAINNoError)
    2656:	8bbb      	ldrh	r3, [r7, #28]
    2658:	2b00      	cmp	r3, #0
    265a:	d125      	bne.n	26a8 <_ZN12States_Class17handleStateResumeEm+0x80>
    {
        switch (state.currentState)
    265c:	687b      	ldr	r3, [r7, #4]
    265e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    2662:	2b09      	cmp	r3, #9
    2664:	d002      	beq.n	266c <_ZN12States_Class17handleStateResumeEm+0x44>
    2666:	2b0a      	cmp	r3, #10
    2668:	d00b      	beq.n	2682 <_ZN12States_Class17handleStateResumeEm+0x5a>
    266a:	e012      	b.n	2692 <_ZN12States_Class17handleStateResumeEm+0x6a>
        {
        case kGAINStateON:
            prepareStateChangeEvent(e, state.currentState, true);
    266c:	687b      	ldr	r3, [r7, #4]
    266e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    2672:	b29a      	uxth	r2, r3
    2674:	f107 010c 	add.w	r1, r7, #12
    2678:	2301      	movs	r3, #1
    267a:	6878      	ldr	r0, [r7, #4]
    267c:	4c16      	ldr	r4, [pc, #88]	; (26d8 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    267e:	47a0      	blx	r4
            break;
    2680:	e012      	b.n	26a8 <_ZN12States_Class17handleStateResumeEm+0x80>

        case kGAINStateStoppedProcess:
            prepareStateChangeEvent(e, kGAINStateStoppedProcess);
    2682:	f107 010c 	add.w	r1, r7, #12
    2686:	2300      	movs	r3, #0
    2688:	220a      	movs	r2, #10
    268a:	6878      	ldr	r0, [r7, #4]
    268c:	4c12      	ldr	r4, [pc, #72]	; (26d8 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    268e:	47a0      	blx	r4
            break;
    2690:	e00a      	b.n	26a8 <_ZN12States_Class17handleStateResumeEm+0x80>

        default:
            prepareStateChangeEvent(e, state.currentState);
    2692:	687b      	ldr	r3, [r7, #4]
    2694:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    2698:	b29a      	uxth	r2, r3
    269a:	f107 010c 	add.w	r1, r7, #12
    269e:	2300      	movs	r3, #0
    26a0:	6878      	ldr	r0, [r7, #4]
    26a2:	4c0d      	ldr	r4, [pc, #52]	; (26d8 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    26a4:	47a0      	blx	r4
            break;
    26a6:	bf00      	nop
        }
    }

	state.currentState = currentState;
    26a8:	7ffa      	ldrb	r2, [r7, #31]
    26aa:	687b      	ldr	r3, [r7, #4]
    26ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

	listener.CheckEvent();
    26b0:	480a      	ldr	r0, [pc, #40]	; (26dc <_ZN12States_Class17handleStateResumeEm+0xb4>)
    26b2:	4b0b      	ldr	r3, [pc, #44]	; (26e0 <_ZN12States_Class17handleStateResumeEm+0xb8>)
    26b4:	4798      	blx	r3
	listener.SendEventSelf(e);
    26b6:	f107 030c 	add.w	r3, r7, #12
    26ba:	4619      	mov	r1, r3
    26bc:	4807      	ldr	r0, [pc, #28]	; (26dc <_ZN12States_Class17handleStateResumeEm+0xb4>)
    26be:	4b09      	ldr	r3, [pc, #36]	; (26e4 <_ZN12States_Class17handleStateResumeEm+0xbc>)
    26c0:	4798      	blx	r3
	}
    26c2:	bf00      	nop
    26c4:	3724      	adds	r7, #36	; 0x24
    26c6:	46bd      	mov	sp, r7
    26c8:	bd90      	pop	{r4, r7, pc}
    26ca:	bf00      	nop
    26cc:	00001f69 	.word	0x00001f69
    26d0:	20001708 	.word	0x20001708
    26d4:	00001e15 	.word	0x00001e15
    26d8:	00002a1d 	.word	0x00002a1d
    26dc:	20003a74 	.word	0x20003a74
    26e0:	000118e1 	.word	0x000118e1
    26e4:	000117f9 	.word	0x000117f9

000026e8 <_ZN12States_Class21handleStateStandbyOFFEm>:
				
void States_Class::handleStateStandbyOFF(uint32 flags)
	{
    26e8:	b580      	push	{r7, lr}
    26ea:	b088      	sub	sp, #32
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
    26f0:	6039      	str	r1, [r7, #0]
	event	e;
    26f2:	f107 030c 	add.w	r3, r7, #12
    26f6:	4618      	mov	r0, r3
    26f8:	4b18      	ldr	r3, [pc, #96]	; (275c <_ZN12States_Class21handleStateStandbyOFFEm+0x74>)
    26fa:	4798      	blx	r3
	bool	done(false);
    26fc:	2300      	movs	r3, #0
    26fe:	77fb      	strb	r3, [r7, #31]
   	
#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    2700:	4917      	ldr	r1, [pc, #92]	; (2760 <_ZN12States_Class21handleStateStandbyOFFEm+0x78>)
    2702:	4818      	ldr	r0, [pc, #96]	; (2764 <_ZN12States_Class21handleStateStandbyOFFEm+0x7c>)
    2704:	4b18      	ldr	r3, [pc, #96]	; (2768 <_ZN12States_Class21handleStateStandbyOFFEm+0x80>)
    2706:	4798      	blx	r3
    2708:	4603      	mov	r3, r0
    270a:	4918      	ldr	r1, [pc, #96]	; (276c <_ZN12States_Class21handleStateStandbyOFFEm+0x84>)
    270c:	4618      	mov	r0, r3
    270e:	4b18      	ldr	r3, [pc, #96]	; (2770 <_ZN12States_Class21handleStateStandbyOFFEm+0x88>)
    2710:	4798      	blx	r3
		
#endif

	state.smpsTemperatureOutOfRangeEventSent = false;
    2712:	687a      	ldr	r2, [r7, #4]
    2714:	f892 3434 	ldrb.w	r3, [r2, #1076]	; 0x434
    2718:	f36f 0382 	bfc	r3, #2, #1
    271c:	f882 3434 	strb.w	r3, [r2, #1076]	; 0x434
	state.magnetronTemperatureOutOfRangeEventSent = false;
    2720:	687a      	ldr	r2, [r7, #4]
    2722:	f892 3434 	ldrb.w	r3, [r2, #1076]	; 0x434
    2726:	f36f 1386 	bfc	r3, #6, #1
    272a:	f882 3434 	strb.w	r3, [r2, #1076]	; 0x434
	state.exhaustTemperatureOutOfRangeEventSent = false;
    272e:	687a      	ldr	r2, [r7, #4]
    2730:	f892 3434 	ldrb.w	r3, [r2, #1076]	; 0x434
    2734:	f36f 1304 	bfc	r3, #4, #1
    2738:	f882 3434 	strb.w	r3, [r2, #1076]	; 0x434

	state.magnetronFanFailureDetectionTime = forever;
    273c:	4b0d      	ldr	r3, [pc, #52]	; (2774 <_ZN12States_Class21handleStateStandbyOFFEm+0x8c>)
    273e:	681a      	ldr	r2, [r3, #0]
    2740:	687b      	ldr	r3, [r7, #4]
    2742:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424




	listener.SendEventSelf(e);
    2746:	f107 030c 	add.w	r3, r7, #12
    274a:	4619      	mov	r1, r3
    274c:	480a      	ldr	r0, [pc, #40]	; (2778 <_ZN12States_Class21handleStateStandbyOFFEm+0x90>)
    274e:	4b0b      	ldr	r3, [pc, #44]	; (277c <_ZN12States_Class21handleStateStandbyOFFEm+0x94>)
    2750:	4798      	blx	r3
	}
    2752:	bf00      	nop
    2754:	3720      	adds	r7, #32
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop
    275c:	00001f69 	.word	0x00001f69
    2760:	0001a538 	.word	0x0001a538
    2764:	20003e1c 	.word	0x20003e1c
    2768:	000015d9 	.word	0x000015d9
    276c:	0001a4f8 	.word	0x0001a4f8
    2770:	00000629 	.word	0x00000629
    2774:	0001ba38 	.word	0x0001ba38
    2778:	20003a74 	.word	0x20003a74
    277c:	000117f9 	.word	0x000117f9

00002780 <_ZN12States_Class27handleStatePrepareStandbyONEm>:

void States_Class::handleStatePrepareStandbyON(uint32 flags)
	{
    2780:	b580      	push	{r7, lr}
    2782:	b08a      	sub	sp, #40	; 0x28
    2784:	af00      	add	r7, sp, #0
    2786:	6078      	str	r0, [r7, #4]
    2788:	6039      	str	r1, [r7, #0]
	event	e;
    278a:	f107 030c 	add.w	r3, r7, #12
    278e:	4618      	mov	r0, r3
    2790:	4b15      	ldr	r3, [pc, #84]	; (27e8 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x68>)
    2792:	4798      	blx	r3
	bool	done(false);
    2794:	2300      	movs	r3, #0
    2796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32	connectFlags(state.alarmState?kConnectFlagsAlarmOn:0);
    279a:	687b      	ldr	r3, [r7, #4]
    279c:	f893 3435 	ldrb.w	r3, [r3, #1077]	; 0x435
    27a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    27a4:	b2db      	uxtb	r3, r3
    27a6:	2b00      	cmp	r3, #0
    27a8:	d001      	beq.n	27ae <_ZN12States_Class27handleStatePrepareStandbyONEm+0x2e>
    27aa:	2301      	movs	r3, #1
    27ac:	e000      	b.n	27b0 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x30>
    27ae:	2300      	movs	r3, #0
    27b0:	623b      	str	r3, [r7, #32]
	   	
#ifdef __DEBUG__
	
	usb << "handleStatePrepareStandbyON" << NEWLINE;
    27b2:	490e      	ldr	r1, [pc, #56]	; (27ec <_ZN12States_Class27handleStatePrepareStandbyONEm+0x6c>)
    27b4:	480e      	ldr	r0, [pc, #56]	; (27f0 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x70>)
    27b6:	4b0f      	ldr	r3, [pc, #60]	; (27f4 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x74>)
    27b8:	4798      	blx	r3
    27ba:	4603      	mov	r3, r0
    27bc:	490e      	ldr	r1, [pc, #56]	; (27f8 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x78>)
    27be:	4618      	mov	r0, r3
    27c0:	4b0e      	ldr	r3, [pc, #56]	; (27fc <_ZN12States_Class27handleStatePrepareStandbyONEm+0x7c>)
    27c2:	4798      	blx	r3
		
#endif

	
	tick_t	leaveDisplayTime = hvacTimer.get_ticks() + 4000;
    27c4:	480e      	ldr	r0, [pc, #56]	; (2800 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x80>)
    27c6:	4b0f      	ldr	r3, [pc, #60]	; (2804 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x84>)
    27c8:	4798      	blx	r3
    27ca:	4603      	mov	r3, r0
    27cc:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
    27d0:	61fb      	str	r3, [r7, #28]

	

	listener.SendEventSelf(e);
    27d2:	f107 030c 	add.w	r3, r7, #12
    27d6:	4619      	mov	r1, r3
    27d8:	480b      	ldr	r0, [pc, #44]	; (2808 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x88>)
    27da:	4b0c      	ldr	r3, [pc, #48]	; (280c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x8c>)
    27dc:	4798      	blx	r3
	}
    27de:	bf00      	nop
    27e0:	3728      	adds	r7, #40	; 0x28
    27e2:	46bd      	mov	sp, r7
    27e4:	bd80      	pop	{r7, pc}
    27e6:	bf00      	nop
    27e8:	00001f69 	.word	0x00001f69
    27ec:	0001a550 	.word	0x0001a550
    27f0:	20003e1c 	.word	0x20003e1c
    27f4:	00002c65 	.word	0x00002c65
    27f8:	0001a4f8 	.word	0x0001a4f8
    27fc:	00000629 	.word	0x00000629
    2800:	20003dc0 	.word	0x20003dc0
    2804:	000131ed 	.word	0x000131ed
    2808:	20003a74 	.word	0x20003a74
    280c:	000117f9 	.word	0x000117f9

00002810 <_ZN12States_Class20handleStateStandbyONEm>:

void States_Class::handleStateStandbyON(uint32 flags)
	{
    2810:	b580      	push	{r7, lr}
    2812:	b088      	sub	sp, #32
    2814:	af00      	add	r7, sp, #0
    2816:	6078      	str	r0, [r7, #4]
    2818:	6039      	str	r1, [r7, #0]
	event	e;
    281a:	f107 030c 	add.w	r3, r7, #12
    281e:	4618      	mov	r0, r3
    2820:	4b12      	ldr	r3, [pc, #72]	; (286c <_ZN12States_Class20handleStateStandbyONEm+0x5c>)
    2822:	4798      	blx	r3
	bool	done(false);
    2824:	2300      	movs	r3, #0
    2826:	77fb      	strb	r3, [r7, #31]
	
	usb << "handleStateStandbyON" << newline;
		
#endif

	state.latchClosedConfirmPending = false;
    2828:	687a      	ldr	r2, [r7, #4]
    282a:	f892 3435 	ldrb.w	r3, [r2, #1077]	; 0x435
    282e:	f36f 03c3 	bfc	r3, #3, #1
    2832:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
    state.remainingTime = (tick_t)persistentConfiguration.cycle.duration * 1000L;
    2836:	687b      	ldr	r3, [r7, #4]
    2838:	f8d3 33a8 	ldr.w	r3, [r3, #936]	; 0x3a8
    283c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2840:	fb02 f203 	mul.w	r2, r2, r3
    2844:	687b      	ldr	r3, [r7, #4]
    2846:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	
	state.reedRelayOpen = false;
    284a:	687a      	ldr	r2, [r7, #4]
    284c:	f892 3435 	ldrb.w	r3, [r2, #1077]	; 0x435
    2850:	f36f 0382 	bfc	r3, #2, #1
    2854:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
	
	listener.SendEventSelf(e);
    2858:	f107 030c 	add.w	r3, r7, #12
    285c:	4619      	mov	r1, r3
    285e:	4804      	ldr	r0, [pc, #16]	; (2870 <_ZN12States_Class20handleStateStandbyONEm+0x60>)
    2860:	4b04      	ldr	r3, [pc, #16]	; (2874 <_ZN12States_Class20handleStateStandbyONEm+0x64>)
    2862:	4798      	blx	r3
	}
    2864:	bf00      	nop
    2866:	3720      	adds	r7, #32
    2868:	46bd      	mov	sp, r7
    286a:	bd80      	pop	{r7, pc}
    286c:	00001f69 	.word	0x00001f69
    2870:	20003a74 	.word	0x20003a74
    2874:	000117f9 	.word	0x000117f9

00002878 <_ZN12States_Class23handleStateStandbyReadyEm>:

void States_Class::handleStateStandbyReady(uint32 flags)
	{
    2878:	b580      	push	{r7, lr}
    287a:	b088      	sub	sp, #32
    287c:	af00      	add	r7, sp, #0
    287e:	6078      	str	r0, [r7, #4]
    2880:	6039      	str	r1, [r7, #0]
	event	e;
    2882:	f107 030c 	add.w	r3, r7, #12
    2886:	4618      	mov	r0, r3
    2888:	4b06      	ldr	r3, [pc, #24]	; (28a4 <_ZN12States_Class23handleStateStandbyReadyEm+0x2c>)
    288a:	4798      	blx	r3
	bool	done(false);
    288c:	2300      	movs	r3, #0
    288e:	77fb      	strb	r3, [r7, #31]

	
	listener.SendEventSelf(e);
    2890:	f107 030c 	add.w	r3, r7, #12
    2894:	4619      	mov	r1, r3
    2896:	4804      	ldr	r0, [pc, #16]	; (28a8 <_ZN12States_Class23handleStateStandbyReadyEm+0x30>)
    2898:	4b04      	ldr	r3, [pc, #16]	; (28ac <_ZN12States_Class23handleStateStandbyReadyEm+0x34>)
    289a:	4798      	blx	r3
	}
    289c:	bf00      	nop
    289e:	3720      	adds	r7, #32
    28a0:	46bd      	mov	sp, r7
    28a2:	bd80      	pop	{r7, pc}
    28a4:	00001f69 	.word	0x00001f69
    28a8:	20003a74 	.word	0x20003a74
    28ac:	000117f9 	.word	0x000117f9

000028b0 <_ZN12States_Class13handleStateONEm>:

	listener.SendEventSelf(e);
	}

void States_Class::handleStateON(uint32 flags)
	{
    28b0:	b580      	push	{r7, lr}
    28b2:	b088      	sub	sp, #32
    28b4:	af00      	add	r7, sp, #0
    28b6:	6078      	str	r0, [r7, #4]
    28b8:	6039      	str	r1, [r7, #0]
	event	e;
    28ba:	f107 030c 	add.w	r3, r7, #12
    28be:	4618      	mov	r0, r3
    28c0:	4b0b      	ldr	r3, [pc, #44]	; (28f0 <_ZN12States_Class13handleStateONEm+0x40>)
    28c2:	4798      	blx	r3
	bool	done(false);
    28c4:	2300      	movs	r3, #0
    28c6:	77fb      	strb	r3, [r7, #31]
	bool	checkForEmptyCavity(true);
    28c8:	2301      	movs	r3, #1
    28ca:	77bb      	strb	r3, [r7, #30]
	bool	checkForSMPSTemperature(true);
    28cc:	2301      	movs	r3, #1
    28ce:	777b      	strb	r3, [r7, #29]
	bool	resume(flags != 0);		
    28d0:	683b      	ldr	r3, [r7, #0]
    28d2:	2b00      	cmp	r3, #0
    28d4:	bf14      	ite	ne
    28d6:	2301      	movne	r3, #1
    28d8:	2300      	moveq	r3, #0
    28da:	773b      	strb	r3, [r7, #28]
	usb << "handleStateON: resume == " << (resume?"true":"false") << newline;
		
#endif


	listener.SendEventSelf(e);
    28dc:	f107 030c 	add.w	r3, r7, #12
    28e0:	4619      	mov	r1, r3
    28e2:	4804      	ldr	r0, [pc, #16]	; (28f4 <_ZN12States_Class13handleStateONEm+0x44>)
    28e4:	4b04      	ldr	r3, [pc, #16]	; (28f8 <_ZN12States_Class13handleStateONEm+0x48>)
    28e6:	4798      	blx	r3
	}
    28e8:	bf00      	nop
    28ea:	3720      	adds	r7, #32
    28ec:	46bd      	mov	sp, r7
    28ee:	bd80      	pop	{r7, pc}
    28f0:	00001f69 	.word	0x00001f69
    28f4:	20003a74 	.word	0x20003a74
    28f8:	000117f9 	.word	0x000117f9

000028fc <_ZN12States_Class19handleStateFinishedEm>:

void States_Class::handleStateFinished(uint32 flags)
	{
    28fc:	b580      	push	{r7, lr}
    28fe:	b088      	sub	sp, #32
    2900:	af00      	add	r7, sp, #0
    2902:	6078      	str	r0, [r7, #4]
    2904:	6039      	str	r1, [r7, #0]
	event	e;
    2906:	f107 030c 	add.w	r3, r7, #12
    290a:	4618      	mov	r0, r3
    290c:	4b06      	ldr	r3, [pc, #24]	; (2928 <_ZN12States_Class19handleStateFinishedEm+0x2c>)
    290e:	4798      	blx	r3
	bool	done(false);
    2910:	2300      	movs	r3, #0
    2912:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    2914:	f107 030c 	add.w	r3, r7, #12
    2918:	4619      	mov	r1, r3
    291a:	4804      	ldr	r0, [pc, #16]	; (292c <_ZN12States_Class19handleStateFinishedEm+0x30>)
    291c:	4b04      	ldr	r3, [pc, #16]	; (2930 <_ZN12States_Class19handleStateFinishedEm+0x34>)
    291e:	4798      	blx	r3
	}
    2920:	bf00      	nop
    2922:	3720      	adds	r7, #32
    2924:	46bd      	mov	sp, r7
    2926:	bd80      	pop	{r7, pc}
    2928:	00001f69 	.word	0x00001f69
    292c:	20003a74 	.word	0x20003a74
    2930:	000117f9 	.word	0x000117f9

00002934 <_ZN12States_Class25handleStateStoppedProcessEm>:

void States_Class::handleStateStoppedProcess(uint32 flags)
	{
    2934:	b580      	push	{r7, lr}
    2936:	b088      	sub	sp, #32
    2938:	af00      	add	r7, sp, #0
    293a:	6078      	str	r0, [r7, #4]
    293c:	6039      	str	r1, [r7, #0]
	event	e;
    293e:	f107 030c 	add.w	r3, r7, #12
    2942:	4618      	mov	r0, r3
    2944:	4b08      	ldr	r3, [pc, #32]	; (2968 <_ZN12States_Class25handleStateStoppedProcessEm+0x34>)
    2946:	4798      	blx	r3
 	bool	done(false);
    2948:	2300      	movs	r3, #0
    294a:	77fb      	strb	r3, [r7, #31]
 	bool	abortCycle(true);
    294c:	2301      	movs	r3, #1
    294e:	77bb      	strb	r3, [r7, #30]
    uint16	resumeFlags(flags);
    2950:	683b      	ldr	r3, [r7, #0]
    2952:	83bb      	strh	r3, [r7, #28]
	listener.SendEventSelf(e);
    2954:	f107 030c 	add.w	r3, r7, #12
    2958:	4619      	mov	r1, r3
    295a:	4804      	ldr	r0, [pc, #16]	; (296c <_ZN12States_Class25handleStateStoppedProcessEm+0x38>)
    295c:	4b04      	ldr	r3, [pc, #16]	; (2970 <_ZN12States_Class25handleStateStoppedProcessEm+0x3c>)
    295e:	4798      	blx	r3
	}
    2960:	bf00      	nop
    2962:	3720      	adds	r7, #32
    2964:	46bd      	mov	sp, r7
    2966:	bd80      	pop	{r7, pc}
    2968:	00001f69 	.word	0x00001f69
    296c:	20003a74 	.word	0x20003a74
    2970:	000117f9 	.word	0x000117f9

00002974 <_ZN12States_Class22handleStateSelfProtectEm>:

void States_Class::handleStateSelfProtect(uint32_t error)
	{
    2974:	b580      	push	{r7, lr}
    2976:	b088      	sub	sp, #32
    2978:	af00      	add	r7, sp, #0
    297a:	6078      	str	r0, [r7, #4]
    297c:	6039      	str	r1, [r7, #0]
	event	e;
    297e:	f107 030c 	add.w	r3, r7, #12
    2982:	4618      	mov	r0, r3
    2984:	4b06      	ldr	r3, [pc, #24]	; (29a0 <_ZN12States_Class22handleStateSelfProtectEm+0x2c>)
    2986:	4798      	blx	r3
	bool	done(false);
    2988:	2300      	movs	r3, #0
    298a:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    298c:	f107 030c 	add.w	r3, r7, #12
    2990:	4619      	mov	r1, r3
    2992:	4804      	ldr	r0, [pc, #16]	; (29a4 <_ZN12States_Class22handleStateSelfProtectEm+0x30>)
    2994:	4b04      	ldr	r3, [pc, #16]	; (29a8 <_ZN12States_Class22handleStateSelfProtectEm+0x34>)
    2996:	4798      	blx	r3
	}
    2998:	bf00      	nop
    299a:	3720      	adds	r7, #32
    299c:	46bd      	mov	sp, r7
    299e:	bd80      	pop	{r7, pc}
    29a0:	00001f69 	.word	0x00001f69
    29a4:	20003a74 	.word	0x20003a74
    29a8:	000117f9 	.word	0x000117f9

000029ac <_ZN12States_Class16handleStateErrorEm>:

void States_Class::handleStateError(uint32_t error)
	{
    29ac:	b580      	push	{r7, lr}
    29ae:	b088      	sub	sp, #32
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    29b4:	6039      	str	r1, [r7, #0]
	event	e;
    29b6:	f107 030c 	add.w	r3, r7, #12
    29ba:	4618      	mov	r0, r3
    29bc:	4b06      	ldr	r3, [pc, #24]	; (29d8 <_ZN12States_Class16handleStateErrorEm+0x2c>)
    29be:	4798      	blx	r3
	bool	done(false);
    29c0:	2300      	movs	r3, #0
    29c2:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    29c4:	f107 030c 	add.w	r3, r7, #12
    29c8:	4619      	mov	r1, r3
    29ca:	4804      	ldr	r0, [pc, #16]	; (29dc <_ZN12States_Class16handleStateErrorEm+0x30>)
    29cc:	4b04      	ldr	r3, [pc, #16]	; (29e0 <_ZN12States_Class16handleStateErrorEm+0x34>)
    29ce:	4798      	blx	r3
	}
    29d0:	bf00      	nop
    29d2:	3720      	adds	r7, #32
    29d4:	46bd      	mov	sp, r7
    29d6:	bd80      	pop	{r7, pc}
    29d8:	00001f69 	.word	0x00001f69
    29dc:	20003a74 	.word	0x20003a74
    29e0:	000117f9 	.word	0x000117f9

000029e4 <_ZN12States_Class22handleStateMaintenanceEm>:

void States_Class::handleStateMaintenance(uint32 flags)
	{
    29e4:	b580      	push	{r7, lr}
    29e6:	b088      	sub	sp, #32
    29e8:	af00      	add	r7, sp, #0
    29ea:	6078      	str	r0, [r7, #4]
    29ec:	6039      	str	r1, [r7, #0]
	event	e;
    29ee:	f107 030c 	add.w	r3, r7, #12
    29f2:	4618      	mov	r0, r3
    29f4:	4b06      	ldr	r3, [pc, #24]	; (2a10 <_ZN12States_Class22handleStateMaintenanceEm+0x2c>)
    29f6:	4798      	blx	r3
	bool	done(false);
    29f8:	2300      	movs	r3, #0
    29fa:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    29fc:	f107 030c 	add.w	r3, r7, #12
    2a00:	4619      	mov	r1, r3
    2a02:	4804      	ldr	r0, [pc, #16]	; (2a14 <_ZN12States_Class22handleStateMaintenanceEm+0x30>)
    2a04:	4b04      	ldr	r3, [pc, #16]	; (2a18 <_ZN12States_Class22handleStateMaintenanceEm+0x34>)
    2a06:	4798      	blx	r3
	}
    2a08:	bf00      	nop
    2a0a:	3720      	adds	r7, #32
    2a0c:	46bd      	mov	sp, r7
    2a0e:	bd80      	pop	{r7, pc}
    2a10:	00001f69 	.word	0x00001f69
    2a14:	20003a74 	.word	0x20003a74
    2a18:	000117f9 	.word	0x000117f9

00002a1c <_ZN12States_Class23prepareStateChangeEventER5eventtt>:
	done = false;
	return result;
	}

void States_Class::prepareStateChangeEvent(event& e, uint16 newState, uint16 data)
	{
    2a1c:	b480      	push	{r7}
    2a1e:	b085      	sub	sp, #20
    2a20:	af00      	add	r7, sp, #0
    2a22:	60f8      	str	r0, [r7, #12]
    2a24:	60b9      	str	r1, [r7, #8]
    2a26:	4611      	mov	r1, r2
    2a28:	461a      	mov	r2, r3
    2a2a:	460b      	mov	r3, r1
    2a2c:	80fb      	strh	r3, [r7, #6]
    2a2e:	4613      	mov	r3, r2
    2a30:	80bb      	strh	r3, [r7, #4]
	e.eventClass =(EventClass)kGAINEventClass;
    2a32:	68bb      	ldr	r3, [r7, #8]
    2a34:	f44f 7200 	mov.w	r2, #512	; 0x200
    2a38:	801a      	strh	r2, [r3, #0]
	e.eventType = (EventType)kGAINSwitchStateEvent;
    2a3a:	68bb      	ldr	r3, [r7, #8]
    2a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
    2a40:	805a      	strh	r2, [r3, #2]
	e.data.wordData[0] = newState;
    2a42:	68bb      	ldr	r3, [r7, #8]
    2a44:	88fa      	ldrh	r2, [r7, #6]
    2a46:	811a      	strh	r2, [r3, #8]
	e.data.wordData[1] = data;
    2a48:	68bb      	ldr	r3, [r7, #8]
    2a4a:	88ba      	ldrh	r2, [r7, #4]
    2a4c:	815a      	strh	r2, [r3, #10]
	}
    2a4e:	bf00      	nop
    2a50:	3714      	adds	r7, #20
    2a52:	46bd      	mov	sp, r7
    2a54:	bc80      	pop	{r7}
    2a56:	4770      	bx	lr

00002a58 <_ZN12States_Class21handlePowerOnSelftestEv>:

uint32_t States_Class::handlePowerOnSelftest(void)
	{
    2a58:	b580      	push	{r7, lr}
    2a5a:	b088      	sub	sp, #32
    2a5c:	af00      	add	r7, sp, #0
    2a5e:	6078      	str	r0, [r7, #4]
	event	e;
    2a60:	f107 030c 	add.w	r3, r7, #12
    2a64:	4618      	mov	r0, r3
    2a66:	4b04      	ldr	r3, [pc, #16]	; (2a78 <_ZN12States_Class21handlePowerOnSelftestEv+0x20>)
    2a68:	4798      	blx	r3
	uint16	selfTestResult(kGAINNoError);
    2a6a:	2300      	movs	r3, #0
    2a6c:	83fb      	strh	r3, [r7, #30]
	bool	moduleAvailable;
	int16	temperature;
		
	return selfTestResult;
    2a6e:	8bfb      	ldrh	r3, [r7, #30]
	}
    2a70:	4618      	mov	r0, r3
    2a72:	3720      	adds	r7, #32
    2a74:	46bd      	mov	sp, r7
    2a76:	bd80      	pop	{r7, pc}
    2a78:	00001f69 	.word	0x00001f69

00002a7c <_ZN12States_Class16saveCurrentStateEv>:


void States_Class::saveCurrentState(void){
    2a7c:	b580      	push	{r7, lr}
    2a7e:	b084      	sub	sp, #16
    2a80:	af00      	add	r7, sp, #0
    2a82:	6078      	str	r0, [r7, #4]
		calendar_date_time	cdt;
		calendar.GetDateTime(&cdt);
    2a84:	f107 0308 	add.w	r3, r7, #8
    2a88:	4619      	mov	r1, r3
    2a8a:	481d      	ldr	r0, [pc, #116]	; (2b00 <_ZN12States_Class16saveCurrentStateEv+0x84>)
    2a8c:	4b1d      	ldr	r3, [pc, #116]	; (2b04 <_ZN12States_Class16saveCurrentStateEv+0x88>)
    2a8e:	4798      	blx	r3
		state.dateTime=cdt;
    2a90:	687b      	ldr	r3, [r7, #4]
    2a92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
    2a96:	f107 0208 	add.w	r2, r7, #8
    2a9a:	e892 0003 	ldmia.w	r2, {r0, r1}
    2a9e:	e883 0003 	stmia.w	r3, {r0, r1}
		state.now = calendar.convert_datetime_to_timestamp(&cdt);
    2aa2:	f107 0308 	add.w	r3, r7, #8
    2aa6:	4619      	mov	r1, r3
    2aa8:	4815      	ldr	r0, [pc, #84]	; (2b00 <_ZN12States_Class16saveCurrentStateEv+0x84>)
    2aaa:	4b17      	ldr	r3, [pc, #92]	; (2b08 <_ZN12States_Class16saveCurrentStateEv+0x8c>)
    2aac:	4798      	blx	r3
    2aae:	4603      	mov	r3, r0
    2ab0:	461a      	mov	r2, r3
    2ab2:	687b      	ldr	r3, [r7, #4]
    2ab4:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	if (state.currentState!=kGAINStateMaintenance){
    2ab8:	687b      	ldr	r3, [r7, #4]
    2aba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    2abe:	2b10      	cmp	r3, #16
    2ac0:	d019      	beq.n	2af6 <_ZN12States_Class16saveCurrentStateEv+0x7a>
		memory.WriteFastCurrentState(state);
    2ac2:	687b      	ldr	r3, [r7, #4]
    2ac4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2ac8:	4619      	mov	r1, r3
    2aca:	4810      	ldr	r0, [pc, #64]	; (2b0c <_ZN12States_Class16saveCurrentStateEv+0x90>)
    2acc:	4b10      	ldr	r3, [pc, #64]	; (2b10 <_ZN12States_Class16saveCurrentStateEv+0x94>)
    2ace:	4798      	blx	r3
		memory.ReadFastApplicationState(lastState);
    2ad0:	687b      	ldr	r3, [r7, #4]
    2ad2:	f503 6387 	add.w	r3, r3, #1080	; 0x438
    2ad6:	4619      	mov	r1, r3
    2ad8:	480c      	ldr	r0, [pc, #48]	; (2b0c <_ZN12States_Class16saveCurrentStateEv+0x90>)
    2ada:	4b0e      	ldr	r3, [pc, #56]	; (2b14 <_ZN12States_Class16saveCurrentStateEv+0x98>)
    2adc:	4798      	blx	r3
		if (state.currentState==0)
    2ade:	687b      	ldr	r3, [r7, #4]
    2ae0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	d106      	bne.n	2af6 <_ZN12States_Class16saveCurrentStateEv+0x7a>
		{
			memory.WriteValidApplicationState(state);
    2ae8:	687b      	ldr	r3, [r7, #4]
    2aea:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2aee:	4619      	mov	r1, r3
    2af0:	4809      	ldr	r0, [pc, #36]	; (2b18 <_ZN12States_Class16saveCurrentStateEv+0x9c>)
    2af2:	4b0a      	ldr	r3, [pc, #40]	; (2b1c <_ZN12States_Class16saveCurrentStateEv+0xa0>)
    2af4:	4798      	blx	r3
// 		 if (state.currentState > kGAINStateResume){
// 			 
// 			memory.clearWorkingStateForGAIN();
// 		 }
	}
}
    2af6:	bf00      	nop
    2af8:	3710      	adds	r7, #16
    2afa:	46bd      	mov	sp, r7
    2afc:	bd80      	pop	{r7, pc}
    2afe:	bf00      	nop
    2b00:	20003ce8 	.word	0x20003ce8
    2b04:	0001299d 	.word	0x0001299d
    2b08:	00012a8d 	.word	0x00012a8d
    2b0c:	200018b4 	.word	0x200018b4
    2b10:	00000f5d 	.word	0x00000f5d
    2b14:	00000f11 	.word	0x00000f11
    2b18:	20001238 	.word	0x20001238
    2b1c:	000017d1 	.word	0x000017d1

00002b20 <_ZN12States_Class4StopEh>:


uint8_t	States_Class::Stop(uint8_t	layer){
    2b20:	b480      	push	{r7}
    2b22:	b083      	sub	sp, #12
    2b24:	af00      	add	r7, sp, #0
    2b26:	6078      	str	r0, [r7, #4]
    2b28:	460b      	mov	r3, r1
    2b2a:	70fb      	strb	r3, [r7, #3]
	return	layer;
    2b2c:	78fb      	ldrb	r3, [r7, #3]
}
    2b2e:	4618      	mov	r0, r3
    2b30:	370c      	adds	r7, #12
    2b32:	46bd      	mov	sp, r7
    2b34:	bc80      	pop	{r7}
    2b36:	4770      	bx	lr

00002b38 <_ZN12States_Class15GetCurrentStateER9HVACState>:

void	States_Class::GetCurrentConfiguration(ConfigurationData *cd){
	cd=&configuration;
}
void	States_Class::GetCurrentState(HVACState& hs){
    2b38:	b580      	push	{r7, lr}
    2b3a:	b082      	sub	sp, #8
    2b3c:	af00      	add	r7, sp, #0
    2b3e:	6078      	str	r0, [r7, #4]
    2b40:	6039      	str	r1, [r7, #0]
	hs=state;
    2b42:	683a      	ldr	r2, [r7, #0]
    2b44:	687b      	ldr	r3, [r7, #4]
    2b46:	4610      	mov	r0, r2
    2b48:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2b4c:	227c      	movs	r2, #124	; 0x7c
    2b4e:	4619      	mov	r1, r3
    2b50:	4b02      	ldr	r3, [pc, #8]	; (2b5c <_ZN12States_Class15GetCurrentStateER9HVACState+0x24>)
    2b52:	4798      	blx	r3
}
    2b54:	bf00      	nop
    2b56:	3708      	adds	r7, #8
    2b58:	46bd      	mov	sp, r7
    2b5a:	bd80      	pop	{r7, pc}
    2b5c:	0001631d 	.word	0x0001631d

00002b60 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData>:
void	States_Class::SetConfigurationData(ConfigurationData& cd){
    2b60:	b580      	push	{r7, lr}
    2b62:	b082      	sub	sp, #8
    2b64:	af00      	add	r7, sp, #0
    2b66:	6078      	str	r0, [r7, #4]
    2b68:	6039      	str	r1, [r7, #0]
	configuration=cd;
    2b6a:	687b      	ldr	r3, [r7, #4]
    2b6c:	683a      	ldr	r2, [r7, #0]
    2b6e:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
    2b72:	4611      	mov	r1, r2
    2b74:	22ac      	movs	r2, #172	; 0xac
    2b76:	4618      	mov	r0, r3
    2b78:	4b02      	ldr	r3, [pc, #8]	; (2b84 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData+0x24>)
    2b7a:	4798      	blx	r3
}
    2b7c:	bf00      	nop
    2b7e:	3708      	adds	r7, #8
    2b80:	46bd      	mov	sp, r7
    2b82:	bd80      	pop	{r7, pc}
    2b84:	0001631d 	.word	0x0001631d

00002b88 <_ZN12States_Class15SetCurrentStateER9HVACState>:
void	States_Class::SetCurrentState(HVACState& hs){
    2b88:	b580      	push	{r7, lr}
    2b8a:	b082      	sub	sp, #8
    2b8c:	af00      	add	r7, sp, #0
    2b8e:	6078      	str	r0, [r7, #4]
    2b90:	6039      	str	r1, [r7, #0]
	state=hs;
    2b92:	687b      	ldr	r3, [r7, #4]
    2b94:	683a      	ldr	r2, [r7, #0]
    2b96:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2b9a:	4611      	mov	r1, r2
    2b9c:	227c      	movs	r2, #124	; 0x7c
    2b9e:	4618      	mov	r0, r3
    2ba0:	4b02      	ldr	r3, [pc, #8]	; (2bac <_ZN12States_Class15SetCurrentStateER9HVACState+0x24>)
    2ba2:	4798      	blx	r3
}
    2ba4:	bf00      	nop
    2ba6:	3708      	adds	r7, #8
    2ba8:	46bd      	mov	sp, r7
    2baa:	bd80      	pop	{r7, pc}
    2bac:	0001631d 	.word	0x0001631d

00002bb0 <_ZN12States_Class16SetCRCConfigDataEv>:
void	States_Class::SetCRCConfigData(void){
    2bb0:	b580      	push	{r7, lr}
    2bb2:	b082      	sub	sp, #8
    2bb4:	af00      	add	r7, sp, #0
    2bb6:	6078      	str	r0, [r7, #4]
	CRC32=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&factoryDefaultsConfiguration),sizeof(factoryDefaultsConfiguration));
    2bb8:	22ac      	movs	r2, #172	; 0xac
    2bba:	4906      	ldr	r1, [pc, #24]	; (2bd4 <_ZN12States_Class16SetCRCConfigDataEv+0x24>)
    2bbc:	4806      	ldr	r0, [pc, #24]	; (2bd8 <_ZN12States_Class16SetCRCConfigDataEv+0x28>)
    2bbe:	4b07      	ldr	r3, [pc, #28]	; (2bdc <_ZN12States_Class16SetCRCConfigDataEv+0x2c>)
    2bc0:	4798      	blx	r3
    2bc2:	4602      	mov	r2, r0
    2bc4:	687b      	ldr	r3, [r7, #4]
    2bc6:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
}
    2bca:	bf00      	nop
    2bcc:	3708      	adds	r7, #8
    2bce:	46bd      	mov	sp, r7
    2bd0:	bd80      	pop	{r7, pc}
    2bd2:	bf00      	nop
    2bd4:	0001a00c 	.word	0x0001a00c
    2bd8:	20001708 	.word	0x20001708
    2bdc:	00000c4d 	.word	0x00000c4d

00002be0 <_ZlsIA42_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2be0:	b580      	push	{r7, lr}
    2be2:	b082      	sub	sp, #8
    2be4:	af00      	add	r7, sp, #0
    2be6:	6078      	str	r0, [r7, #4]
    2be8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2bea:	6839      	ldr	r1, [r7, #0]
    2bec:	6878      	ldr	r0, [r7, #4]
    2bee:	4b03      	ldr	r3, [pc, #12]	; (2bfc <_ZlsIA42_cER5PrintS2_RKT_+0x1c>)
    2bf0:	4798      	blx	r3
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	4618      	mov	r0, r3
    2bf6:	3708      	adds	r7, #8
    2bf8:	46bd      	mov	sp, r7
    2bfa:	bd80      	pop	{r7, pc}
    2bfc:	000137f5 	.word	0x000137f5

00002c00 <_ZlsIA5_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2c00:	b580      	push	{r7, lr}
    2c02:	b082      	sub	sp, #8
    2c04:	af00      	add	r7, sp, #0
    2c06:	6078      	str	r0, [r7, #4]
    2c08:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2c0a:	6839      	ldr	r1, [r7, #0]
    2c0c:	6878      	ldr	r0, [r7, #4]
    2c0e:	4b03      	ldr	r3, [pc, #12]	; (2c1c <_ZlsIA5_cER5PrintS2_RKT_+0x1c>)
    2c10:	4798      	blx	r3
    2c12:	687b      	ldr	r3, [r7, #4]
    2c14:	4618      	mov	r0, r3
    2c16:	3708      	adds	r7, #8
    2c18:	46bd      	mov	sp, r7
    2c1a:	bd80      	pop	{r7, pc}
    2c1c:	000137f5 	.word	0x000137f5

00002c20 <_ZlsIcER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2c20:	b580      	push	{r7, lr}
    2c22:	b082      	sub	sp, #8
    2c24:	af00      	add	r7, sp, #0
    2c26:	6078      	str	r0, [r7, #4]
    2c28:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2c2a:	683b      	ldr	r3, [r7, #0]
    2c2c:	781b      	ldrb	r3, [r3, #0]
    2c2e:	4619      	mov	r1, r3
    2c30:	6878      	ldr	r0, [r7, #4]
    2c32:	4b03      	ldr	r3, [pc, #12]	; (2c40 <_ZlsIcER5PrintS1_RKT_+0x20>)
    2c34:	4798      	blx	r3
    2c36:	687b      	ldr	r3, [r7, #4]
    2c38:	4618      	mov	r0, r3
    2c3a:	3708      	adds	r7, #8
    2c3c:	46bd      	mov	sp, r7
    2c3e:	bd80      	pop	{r7, pc}
    2c40:	00013815 	.word	0x00013815

00002c44 <_ZlsIA35_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2c44:	b580      	push	{r7, lr}
    2c46:	b082      	sub	sp, #8
    2c48:	af00      	add	r7, sp, #0
    2c4a:	6078      	str	r0, [r7, #4]
    2c4c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2c4e:	6839      	ldr	r1, [r7, #0]
    2c50:	6878      	ldr	r0, [r7, #4]
    2c52:	4b03      	ldr	r3, [pc, #12]	; (2c60 <_ZlsIA35_cER5PrintS2_RKT_+0x1c>)
    2c54:	4798      	blx	r3
    2c56:	687b      	ldr	r3, [r7, #4]
    2c58:	4618      	mov	r0, r3
    2c5a:	3708      	adds	r7, #8
    2c5c:	46bd      	mov	sp, r7
    2c5e:	bd80      	pop	{r7, pc}
    2c60:	000137f5 	.word	0x000137f5

00002c64 <_ZlsIA28_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2c64:	b580      	push	{r7, lr}
    2c66:	b082      	sub	sp, #8
    2c68:	af00      	add	r7, sp, #0
    2c6a:	6078      	str	r0, [r7, #4]
    2c6c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2c6e:	6839      	ldr	r1, [r7, #0]
    2c70:	6878      	ldr	r0, [r7, #4]
    2c72:	4b03      	ldr	r3, [pc, #12]	; (2c80 <_ZlsIA28_cER5PrintS2_RKT_+0x1c>)
    2c74:	4798      	blx	r3
    2c76:	687b      	ldr	r3, [r7, #4]
    2c78:	4618      	mov	r0, r3
    2c7a:	3708      	adds	r7, #8
    2c7c:	46bd      	mov	sp, r7
    2c7e:	bd80      	pop	{r7, pc}
    2c80:	000137f5 	.word	0x000137f5

00002c84 <_Z41__static_initialization_and_destruction_0ii>:
	s=state.status;
	return	state.status.rawStatus;
}


    2c84:	b580      	push	{r7, lr}
    2c86:	b082      	sub	sp, #8
    2c88:	af00      	add	r7, sp, #0
    2c8a:	6078      	str	r0, [r7, #4]
    2c8c:	6039      	str	r1, [r7, #0]
    2c8e:	687b      	ldr	r3, [r7, #4]
    2c90:	2b01      	cmp	r3, #1
    2c92:	d10c      	bne.n	2cae <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2c94:	683b      	ldr	r3, [r7, #0]
    2c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2c9a:	4293      	cmp	r3, r2
    2c9c:	d107      	bne.n	2cae <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2c9e:	4806      	ldr	r0, [pc, #24]	; (2cb8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2ca0:	4b06      	ldr	r3, [pc, #24]	; (2cbc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2ca2:	4798      	blx	r3
    2ca4:	4a06      	ldr	r2, [pc, #24]	; (2cc0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2ca6:	4907      	ldr	r1, [pc, #28]	; (2cc4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2ca8:	4803      	ldr	r0, [pc, #12]	; (2cb8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2caa:	4b07      	ldr	r3, [pc, #28]	; (2cc8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2cac:	4798      	blx	r3
    2cae:	bf00      	nop
    2cb0:	3708      	adds	r7, #8
    2cb2:	46bd      	mov	sp, r7
    2cb4:	bd80      	pop	{r7, pc}
    2cb6:	bf00      	nop
    2cb8:	20001d28 	.word	0x20001d28
    2cbc:	00001fe5 	.word	0x00001fe5
    2cc0:	20000000 	.word	0x20000000
    2cc4:	0000203d 	.word	0x0000203d
    2cc8:	0001427d 	.word	0x0001427d

00002ccc <_GLOBAL__sub_I__ZN12States_ClassC2Ev>:
    2ccc:	b580      	push	{r7, lr}
    2cce:	af00      	add	r7, sp, #0
    2cd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2cd4:	2001      	movs	r0, #1
    2cd6:	4b01      	ldr	r3, [pc, #4]	; (2cdc <_GLOBAL__sub_I__ZN12States_ClassC2Ev+0x10>)
    2cd8:	4798      	blx	r3
    2cda:	bd80      	pop	{r7, pc}
    2cdc:	00002c85 	.word	0x00002c85

00002ce0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    2ce0:	b580      	push	{r7, lr}
    2ce2:	af00      	add	r7, sp, #0
	system_init();
    2ce4:	4b03      	ldr	r3, [pc, #12]	; (2cf4 <atmel_start_init+0x14>)
    2ce6:	4798      	blx	r3
	usb_init();
    2ce8:	4b03      	ldr	r3, [pc, #12]	; (2cf8 <atmel_start_init+0x18>)
    2cea:	4798      	blx	r3
	spi_nor_flash_init();
    2cec:	4b03      	ldr	r3, [pc, #12]	; (2cfc <atmel_start_init+0x1c>)
    2cee:	4798      	blx	r3
}
    2cf0:	bf00      	nop
    2cf2:	bd80      	pop	{r7, pc}
    2cf4:	00003ddd 	.word	0x00003ddd
    2cf8:	0000e50d 	.word	0x0000e50d
    2cfc:	0000e4a1 	.word	0x0000e4a1

00002d00 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    2d00:	b480      	push	{r7}
    2d02:	b085      	sub	sp, #20
    2d04:	af00      	add	r7, sp, #0
    2d06:	60f8      	str	r0, [r7, #12]
    2d08:	460b      	mov	r3, r1
    2d0a:	607a      	str	r2, [r7, #4]
    2d0c:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    2d0e:	7afa      	ldrb	r2, [r7, #11]
    2d10:	68fb      	ldr	r3, [r7, #12]
    2d12:	3220      	adds	r2, #32
    2d14:	6879      	ldr	r1, [r7, #4]
    2d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2d1a:	bf00      	nop
    2d1c:	3714      	adds	r7, #20
    2d1e:	46bd      	mov	sp, r7
    2d20:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d24:	4770      	bx	lr

00002d26 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    2d26:	b480      	push	{r7}
    2d28:	b083      	sub	sp, #12
    2d2a:	af00      	add	r7, sp, #0
    2d2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	691b      	ldr	r3, [r3, #16]
    2d32:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d3a:	bf00      	nop
    2d3c:	370c      	adds	r7, #12
    2d3e:	46bd      	mov	sp, r7
    2d40:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d44:	4770      	bx	lr

00002d46 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    2d46:	b480      	push	{r7}
    2d48:	b083      	sub	sp, #12
    2d4a:	af00      	add	r7, sp, #0
    2d4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    2d4e:	687b      	ldr	r3, [r7, #4]
    2d50:	691b      	ldr	r3, [r3, #16]
    2d52:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2d56:	687b      	ldr	r3, [r7, #4]
    2d58:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d5a:	bf00      	nop
    2d5c:	370c      	adds	r7, #12
    2d5e:	46bd      	mov	sp, r7
    2d60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d64:	4770      	bx	lr

00002d66 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    2d66:	b480      	push	{r7}
    2d68:	b083      	sub	sp, #12
    2d6a:	af00      	add	r7, sp, #0
    2d6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    2d6e:	687b      	ldr	r3, [r7, #4]
    2d70:	691b      	ldr	r3, [r3, #16]
    2d72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    2d76:	687b      	ldr	r3, [r7, #4]
    2d78:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d7a:	bf00      	nop
    2d7c:	370c      	adds	r7, #12
    2d7e:	46bd      	mov	sp, r7
    2d80:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d84:	4770      	bx	lr

00002d86 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    2d86:	b480      	push	{r7}
    2d88:	b083      	sub	sp, #12
    2d8a:	af00      	add	r7, sp, #0
    2d8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    2d8e:	687b      	ldr	r3, [r7, #4]
    2d90:	691b      	ldr	r3, [r3, #16]
    2d92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d9a:	bf00      	nop
    2d9c:	370c      	adds	r7, #12
    2d9e:	46bd      	mov	sp, r7
    2da0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2da4:	4770      	bx	lr

00002da6 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    2da6:	b480      	push	{r7}
    2da8:	b083      	sub	sp, #12
    2daa:	af00      	add	r7, sp, #0
    2dac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    2dae:	687b      	ldr	r3, [r7, #4]
    2db0:	695b      	ldr	r3, [r3, #20]
    2db2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2db6:	687b      	ldr	r3, [r7, #4]
    2db8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2dba:	bf00      	nop
    2dbc:	370c      	adds	r7, #12
    2dbe:	46bd      	mov	sp, r7
    2dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dc4:	4770      	bx	lr

00002dc6 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    2dc6:	b480      	push	{r7}
    2dc8:	b083      	sub	sp, #12
    2dca:	af00      	add	r7, sp, #0
    2dcc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    2dce:	687b      	ldr	r3, [r7, #4]
    2dd0:	695b      	ldr	r3, [r3, #20]
    2dd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    2dd6:	687b      	ldr	r3, [r7, #4]
    2dd8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2dda:	bf00      	nop
    2ddc:	370c      	adds	r7, #12
    2dde:	46bd      	mov	sp, r7
    2de0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2de4:	4770      	bx	lr

00002de6 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    2de6:	b480      	push	{r7}
    2de8:	b083      	sub	sp, #12
    2dea:	af00      	add	r7, sp, #0
    2dec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    2dee:	687b      	ldr	r3, [r7, #4]
    2df0:	695b      	ldr	r3, [r3, #20]
    2df2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2dfa:	bf00      	nop
    2dfc:	370c      	adds	r7, #12
    2dfe:	46bd      	mov	sp, r7
    2e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e04:	4770      	bx	lr

00002e06 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    2e06:	b480      	push	{r7}
    2e08:	b083      	sub	sp, #12
    2e0a:	af00      	add	r7, sp, #0
    2e0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    2e0e:	687b      	ldr	r3, [r7, #4]
    2e10:	695b      	ldr	r3, [r3, #20]
    2e12:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    2e16:	687b      	ldr	r3, [r7, #4]
    2e18:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e1a:	bf00      	nop
    2e1c:	370c      	adds	r7, #12
    2e1e:	46bd      	mov	sp, r7
    2e20:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e24:	4770      	bx	lr

00002e26 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    2e26:	b480      	push	{r7}
    2e28:	b083      	sub	sp, #12
    2e2a:	af00      	add	r7, sp, #0
    2e2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    2e2e:	687b      	ldr	r3, [r7, #4]
    2e30:	695b      	ldr	r3, [r3, #20]
    2e32:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    2e36:	687b      	ldr	r3, [r7, #4]
    2e38:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e3a:	bf00      	nop
    2e3c:	370c      	adds	r7, #12
    2e3e:	46bd      	mov	sp, r7
    2e40:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e44:	4770      	bx	lr

00002e46 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    2e46:	b480      	push	{r7}
    2e48:	b083      	sub	sp, #12
    2e4a:	af00      	add	r7, sp, #0
    2e4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2e4e:	687b      	ldr	r3, [r7, #4]
    2e50:	699b      	ldr	r3, [r3, #24]
    2e52:	f043 0201 	orr.w	r2, r3, #1
    2e56:	687b      	ldr	r3, [r7, #4]
    2e58:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e5a:	bf00      	nop
    2e5c:	370c      	adds	r7, #12
    2e5e:	46bd      	mov	sp, r7
    2e60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e64:	4770      	bx	lr

00002e66 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    2e66:	b480      	push	{r7}
    2e68:	b083      	sub	sp, #12
    2e6a:	af00      	add	r7, sp, #0
    2e6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    2e6e:	687b      	ldr	r3, [r7, #4]
    2e70:	699b      	ldr	r3, [r3, #24]
    2e72:	f043 0202 	orr.w	r2, r3, #2
    2e76:	687b      	ldr	r3, [r7, #4]
    2e78:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e7a:	bf00      	nop
    2e7c:	370c      	adds	r7, #12
    2e7e:	46bd      	mov	sp, r7
    2e80:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e84:	4770      	bx	lr

00002e86 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    2e86:	b480      	push	{r7}
    2e88:	b083      	sub	sp, #12
    2e8a:	af00      	add	r7, sp, #0
    2e8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    2e8e:	687b      	ldr	r3, [r7, #4]
    2e90:	699b      	ldr	r3, [r3, #24]
    2e92:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    2e96:	687b      	ldr	r3, [r7, #4]
    2e98:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e9a:	bf00      	nop
    2e9c:	370c      	adds	r7, #12
    2e9e:	46bd      	mov	sp, r7
    2ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ea4:	4770      	bx	lr

00002ea6 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    2ea6:	b480      	push	{r7}
    2ea8:	b083      	sub	sp, #12
    2eaa:	af00      	add	r7, sp, #0
    2eac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    2eae:	687b      	ldr	r3, [r7, #4]
    2eb0:	699b      	ldr	r3, [r3, #24]
    2eb2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2eb6:	687b      	ldr	r3, [r7, #4]
    2eb8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2eba:	bf00      	nop
    2ebc:	370c      	adds	r7, #12
    2ebe:	46bd      	mov	sp, r7
    2ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ec4:	4770      	bx	lr

00002ec6 <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
    2ec6:	b480      	push	{r7}
    2ec8:	b083      	sub	sp, #12
    2eca:	af00      	add	r7, sp, #0
    2ecc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    2ece:	687b      	ldr	r3, [r7, #4]
    2ed0:	699b      	ldr	r3, [r3, #24]
    2ed2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    2ed6:	687b      	ldr	r3, [r7, #4]
    2ed8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2eda:	bf00      	nop
    2edc:	370c      	adds	r7, #12
    2ede:	46bd      	mov	sp, r7
    2ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ee4:	4770      	bx	lr

00002ee6 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    2ee6:	b480      	push	{r7}
    2ee8:	b083      	sub	sp, #12
    2eea:	af00      	add	r7, sp, #0
    2eec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    2eee:	687b      	ldr	r3, [r7, #4]
    2ef0:	69db      	ldr	r3, [r3, #28]
    2ef2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2ef6:	687b      	ldr	r3, [r7, #4]
    2ef8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2efa:	bf00      	nop
    2efc:	370c      	adds	r7, #12
    2efe:	46bd      	mov	sp, r7
    2f00:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f04:	4770      	bx	lr

00002f06 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    2f06:	b480      	push	{r7}
    2f08:	b083      	sub	sp, #12
    2f0a:	af00      	add	r7, sp, #0
    2f0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    2f0e:	687b      	ldr	r3, [r7, #4]
    2f10:	6a1b      	ldr	r3, [r3, #32]
    2f12:	f043 0201 	orr.w	r2, r3, #1
    2f16:	687b      	ldr	r3, [r7, #4]
    2f18:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f1a:	bf00      	nop
    2f1c:	370c      	adds	r7, #12
    2f1e:	46bd      	mov	sp, r7
    2f20:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f24:	4770      	bx	lr

00002f26 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    2f26:	b480      	push	{r7}
    2f28:	b083      	sub	sp, #12
    2f2a:	af00      	add	r7, sp, #0
    2f2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	6a1b      	ldr	r3, [r3, #32]
    2f32:	f043 0202 	orr.w	r2, r3, #2
    2f36:	687b      	ldr	r3, [r7, #4]
    2f38:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f3a:	bf00      	nop
    2f3c:	370c      	adds	r7, #12
    2f3e:	46bd      	mov	sp, r7
    2f40:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f44:	4770      	bx	lr

00002f46 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    2f46:	b480      	push	{r7}
    2f48:	b083      	sub	sp, #12
    2f4a:	af00      	add	r7, sp, #0
    2f4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    2f4e:	687b      	ldr	r3, [r7, #4]
    2f50:	6a1b      	ldr	r3, [r3, #32]
    2f52:	f043 0204 	orr.w	r2, r3, #4
    2f56:	687b      	ldr	r3, [r7, #4]
    2f58:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f5a:	bf00      	nop
    2f5c:	370c      	adds	r7, #12
    2f5e:	46bd      	mov	sp, r7
    2f60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f64:	4770      	bx	lr

00002f66 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    2f66:	b480      	push	{r7}
    2f68:	b083      	sub	sp, #12
    2f6a:	af00      	add	r7, sp, #0
    2f6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    2f6e:	687b      	ldr	r3, [r7, #4]
    2f70:	6a1b      	ldr	r3, [r3, #32]
    2f72:	f043 0208 	orr.w	r2, r3, #8
    2f76:	687b      	ldr	r3, [r7, #4]
    2f78:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f7a:	bf00      	nop
    2f7c:	370c      	adds	r7, #12
    2f7e:	46bd      	mov	sp, r7
    2f80:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f84:	4770      	bx	lr

00002f86 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    2f86:	b480      	push	{r7}
    2f88:	b083      	sub	sp, #12
    2f8a:	af00      	add	r7, sp, #0
    2f8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    2f8e:	687b      	ldr	r3, [r7, #4]
    2f90:	6a1b      	ldr	r3, [r3, #32]
    2f92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    2f96:	687b      	ldr	r3, [r7, #4]
    2f98:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f9a:	bf00      	nop
    2f9c:	370c      	adds	r7, #12
    2f9e:	46bd      	mov	sp, r7
    2fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fa4:	4770      	bx	lr

00002fa6 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2fa6:	b480      	push	{r7}
    2fa8:	b085      	sub	sp, #20
    2faa:	af00      	add	r7, sp, #0
    2fac:	60f8      	str	r0, [r7, #12]
    2fae:	460b      	mov	r3, r1
    2fb0:	607a      	str	r2, [r7, #4]
    2fb2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2fb4:	7afb      	ldrb	r3, [r7, #11]
    2fb6:	68fa      	ldr	r2, [r7, #12]
    2fb8:	01db      	lsls	r3, r3, #7
    2fba:	4413      	add	r3, r2
    2fbc:	3308      	adds	r3, #8
    2fbe:	687a      	ldr	r2, [r7, #4]
    2fc0:	601a      	str	r2, [r3, #0]
}
    2fc2:	bf00      	nop
    2fc4:	3714      	adds	r7, #20
    2fc6:	46bd      	mov	sp, r7
    2fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fcc:	4770      	bx	lr

00002fce <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2fce:	b480      	push	{r7}
    2fd0:	b085      	sub	sp, #20
    2fd2:	af00      	add	r7, sp, #0
    2fd4:	60f8      	str	r0, [r7, #12]
    2fd6:	460b      	mov	r3, r1
    2fd8:	607a      	str	r2, [r7, #4]
    2fda:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2fdc:	7afb      	ldrb	r3, [r7, #11]
    2fde:	68fa      	ldr	r2, [r7, #12]
    2fe0:	01db      	lsls	r3, r3, #7
    2fe2:	4413      	add	r3, r2
    2fe4:	3304      	adds	r3, #4
    2fe6:	687a      	ldr	r2, [r7, #4]
    2fe8:	601a      	str	r2, [r3, #0]
}
    2fea:	bf00      	nop
    2fec:	3714      	adds	r7, #20
    2fee:	46bd      	mov	sp, r7
    2ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ff4:	4770      	bx	lr

00002ff6 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2ff6:	b480      	push	{r7}
    2ff8:	b085      	sub	sp, #20
    2ffa:	af00      	add	r7, sp, #0
    2ffc:	60f8      	str	r0, [r7, #12]
    2ffe:	460b      	mov	r3, r1
    3000:	607a      	str	r2, [r7, #4]
    3002:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3004:	7afb      	ldrb	r3, [r7, #11]
    3006:	68fa      	ldr	r2, [r7, #12]
    3008:	01db      	lsls	r3, r3, #7
    300a:	4413      	add	r3, r2
    300c:	3318      	adds	r3, #24
    300e:	687a      	ldr	r2, [r7, #4]
    3010:	601a      	str	r2, [r3, #0]
}
    3012:	bf00      	nop
    3014:	3714      	adds	r7, #20
    3016:	46bd      	mov	sp, r7
    3018:	f85d 7b04 	ldr.w	r7, [sp], #4
    301c:	4770      	bx	lr

0000301e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    301e:	b480      	push	{r7}
    3020:	b085      	sub	sp, #20
    3022:	af00      	add	r7, sp, #0
    3024:	60f8      	str	r0, [r7, #12]
    3026:	460b      	mov	r3, r1
    3028:	607a      	str	r2, [r7, #4]
    302a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    302c:	7afb      	ldrb	r3, [r7, #11]
    302e:	68fa      	ldr	r2, [r7, #12]
    3030:	01db      	lsls	r3, r3, #7
    3032:	4413      	add	r3, r2
    3034:	3314      	adds	r3, #20
    3036:	687a      	ldr	r2, [r7, #4]
    3038:	601a      	str	r2, [r3, #0]
}
    303a:	bf00      	nop
    303c:	3714      	adds	r7, #20
    303e:	46bd      	mov	sp, r7
    3040:	f85d 7b04 	ldr.w	r7, [sp], #4
    3044:	4770      	bx	lr

00003046 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    3046:	b480      	push	{r7}
    3048:	b085      	sub	sp, #20
    304a:	af00      	add	r7, sp, #0
    304c:	6078      	str	r0, [r7, #4]
    304e:	4608      	mov	r0, r1
    3050:	4611      	mov	r1, r2
    3052:	461a      	mov	r2, r3
    3054:	4603      	mov	r3, r0
    3056:	70fb      	strb	r3, [r7, #3]
    3058:	460b      	mov	r3, r1
    305a:	70bb      	strb	r3, [r7, #2]
    305c:	4613      	mov	r3, r2
    305e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3060:	78fa      	ldrb	r2, [r7, #3]
    3062:	78bb      	ldrb	r3, [r7, #2]
    3064:	6879      	ldr	r1, [r7, #4]
    3066:	01d2      	lsls	r2, r2, #7
    3068:	440a      	add	r2, r1
    306a:	4413      	add	r3, r2
    306c:	3330      	adds	r3, #48	; 0x30
    306e:	781b      	ldrb	r3, [r3, #0]
    3070:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3072:	7bfb      	ldrb	r3, [r7, #15]
    3074:	f023 030f 	bic.w	r3, r3, #15
    3078:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    307a:	787b      	ldrb	r3, [r7, #1]
    307c:	f003 030f 	and.w	r3, r3, #15
    3080:	b2da      	uxtb	r2, r3
    3082:	7bfb      	ldrb	r3, [r7, #15]
    3084:	4313      	orrs	r3, r2
    3086:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3088:	78fa      	ldrb	r2, [r7, #3]
    308a:	78bb      	ldrb	r3, [r7, #2]
    308c:	6879      	ldr	r1, [r7, #4]
    308e:	01d2      	lsls	r2, r2, #7
    3090:	440a      	add	r2, r1
    3092:	4413      	add	r3, r2
    3094:	3330      	adds	r3, #48	; 0x30
    3096:	7bfa      	ldrb	r2, [r7, #15]
    3098:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    309a:	bf00      	nop
    309c:	3714      	adds	r7, #20
    309e:	46bd      	mov	sp, r7
    30a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    30a4:	4770      	bx	lr

000030a6 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    30a6:	b480      	push	{r7}
    30a8:	b085      	sub	sp, #20
    30aa:	af00      	add	r7, sp, #0
    30ac:	6078      	str	r0, [r7, #4]
    30ae:	4608      	mov	r0, r1
    30b0:	4611      	mov	r1, r2
    30b2:	461a      	mov	r2, r3
    30b4:	4603      	mov	r3, r0
    30b6:	70fb      	strb	r3, [r7, #3]
    30b8:	460b      	mov	r3, r1
    30ba:	70bb      	strb	r3, [r7, #2]
    30bc:	4613      	mov	r3, r2
    30be:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    30c0:	78fa      	ldrb	r2, [r7, #3]
    30c2:	78bb      	ldrb	r3, [r7, #2]
    30c4:	6879      	ldr	r1, [r7, #4]
    30c6:	01d2      	lsls	r2, r2, #7
    30c8:	440a      	add	r2, r1
    30ca:	4413      	add	r3, r2
    30cc:	3330      	adds	r3, #48	; 0x30
    30ce:	781b      	ldrb	r3, [r3, #0]
    30d0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    30d2:	7bfb      	ldrb	r3, [r7, #15]
    30d4:	f003 030f 	and.w	r3, r3, #15
    30d8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    30da:	787b      	ldrb	r3, [r7, #1]
    30dc:	011b      	lsls	r3, r3, #4
    30de:	b2da      	uxtb	r2, r3
    30e0:	7bfb      	ldrb	r3, [r7, #15]
    30e2:	4313      	orrs	r3, r2
    30e4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    30e6:	78fa      	ldrb	r2, [r7, #3]
    30e8:	78bb      	ldrb	r3, [r7, #2]
    30ea:	6879      	ldr	r1, [r7, #4]
    30ec:	01d2      	lsls	r2, r2, #7
    30ee:	440a      	add	r2, r1
    30f0:	4413      	add	r3, r2
    30f2:	3330      	adds	r3, #48	; 0x30
    30f4:	7bfa      	ldrb	r2, [r7, #15]
    30f6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    30f8:	bf00      	nop
    30fa:	3714      	adds	r7, #20
    30fc:	46bd      	mov	sp, r7
    30fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3102:	4770      	bx	lr

00003104 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    3104:	b480      	push	{r7}
    3106:	b085      	sub	sp, #20
    3108:	af00      	add	r7, sp, #0
    310a:	6078      	str	r0, [r7, #4]
    310c:	4608      	mov	r0, r1
    310e:	4611      	mov	r1, r2
    3110:	461a      	mov	r2, r3
    3112:	4603      	mov	r3, r0
    3114:	70fb      	strb	r3, [r7, #3]
    3116:	460b      	mov	r3, r1
    3118:	70bb      	strb	r3, [r7, #2]
    311a:	4613      	mov	r3, r2
    311c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    311e:	78fa      	ldrb	r2, [r7, #3]
    3120:	78bb      	ldrb	r3, [r7, #2]
    3122:	6879      	ldr	r1, [r7, #4]
    3124:	01d2      	lsls	r2, r2, #7
    3126:	440a      	add	r2, r1
    3128:	4413      	add	r3, r2
    312a:	3340      	adds	r3, #64	; 0x40
    312c:	781b      	ldrb	r3, [r3, #0]
    312e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3130:	7bfb      	ldrb	r3, [r7, #15]
    3132:	f023 0301 	bic.w	r3, r3, #1
    3136:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3138:	787a      	ldrb	r2, [r7, #1]
    313a:	7bfb      	ldrb	r3, [r7, #15]
    313c:	4313      	orrs	r3, r2
    313e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3140:	78fa      	ldrb	r2, [r7, #3]
    3142:	78bb      	ldrb	r3, [r7, #2]
    3144:	6879      	ldr	r1, [r7, #4]
    3146:	01d2      	lsls	r2, r2, #7
    3148:	440a      	add	r2, r1
    314a:	4413      	add	r3, r2
    314c:	3340      	adds	r3, #64	; 0x40
    314e:	7bfa      	ldrb	r2, [r7, #15]
    3150:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3152:	bf00      	nop
    3154:	3714      	adds	r7, #20
    3156:	46bd      	mov	sp, r7
    3158:	f85d 7b04 	ldr.w	r7, [sp], #4
    315c:	4770      	bx	lr

0000315e <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    315e:	b490      	push	{r4, r7}
    3160:	b082      	sub	sp, #8
    3162:	af00      	add	r7, sp, #0
    3164:	6078      	str	r0, [r7, #4]
    3166:	460b      	mov	r3, r1
    3168:	70fb      	strb	r3, [r7, #3]
    316a:	4613      	mov	r3, r2
    316c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    316e:	78fa      	ldrb	r2, [r7, #3]
    3170:	78bb      	ldrb	r3, [r7, #2]
    3172:	78f8      	ldrb	r0, [r7, #3]
    3174:	78b9      	ldrb	r1, [r7, #2]
    3176:	687c      	ldr	r4, [r7, #4]
    3178:	01c0      	lsls	r0, r0, #7
    317a:	4420      	add	r0, r4
    317c:	4401      	add	r1, r0
    317e:	3140      	adds	r1, #64	; 0x40
    3180:	7809      	ldrb	r1, [r1, #0]
    3182:	b2c9      	uxtb	r1, r1
    3184:	f041 0104 	orr.w	r1, r1, #4
    3188:	b2c8      	uxtb	r0, r1
    318a:	6879      	ldr	r1, [r7, #4]
    318c:	01d2      	lsls	r2, r2, #7
    318e:	440a      	add	r2, r1
    3190:	4413      	add	r3, r2
    3192:	3340      	adds	r3, #64	; 0x40
    3194:	4602      	mov	r2, r0
    3196:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3198:	bf00      	nop
    319a:	3708      	adds	r7, #8
    319c:	46bd      	mov	sp, r7
    319e:	bc90      	pop	{r4, r7}
    31a0:	4770      	bx	lr

000031a2 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    31a2:	b490      	push	{r4, r7}
    31a4:	b082      	sub	sp, #8
    31a6:	af00      	add	r7, sp, #0
    31a8:	6078      	str	r0, [r7, #4]
    31aa:	460b      	mov	r3, r1
    31ac:	70fb      	strb	r3, [r7, #3]
    31ae:	4613      	mov	r3, r2
    31b0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    31b2:	78fa      	ldrb	r2, [r7, #3]
    31b4:	78bb      	ldrb	r3, [r7, #2]
    31b6:	78f8      	ldrb	r0, [r7, #3]
    31b8:	78b9      	ldrb	r1, [r7, #2]
    31ba:	687c      	ldr	r4, [r7, #4]
    31bc:	01c0      	lsls	r0, r0, #7
    31be:	4420      	add	r0, r4
    31c0:	4401      	add	r1, r0
    31c2:	3140      	adds	r1, #64	; 0x40
    31c4:	7809      	ldrb	r1, [r1, #0]
    31c6:	b2c9      	uxtb	r1, r1
    31c8:	f021 0104 	bic.w	r1, r1, #4
    31cc:	b2c8      	uxtb	r0, r1
    31ce:	6879      	ldr	r1, [r7, #4]
    31d0:	01d2      	lsls	r2, r2, #7
    31d2:	440a      	add	r2, r1
    31d4:	4413      	add	r3, r2
    31d6:	3340      	adds	r3, #64	; 0x40
    31d8:	4602      	mov	r2, r0
    31da:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    31dc:	bf00      	nop
    31de:	3708      	adds	r7, #8
    31e0:	46bd      	mov	sp, r7
    31e2:	bc90      	pop	{r4, r7}
    31e4:	4770      	bx	lr

000031e6 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    31e6:	b480      	push	{r7}
    31e8:	b085      	sub	sp, #20
    31ea:	af00      	add	r7, sp, #0
    31ec:	60f8      	str	r0, [r7, #12]
    31ee:	460b      	mov	r3, r1
    31f0:	607a      	str	r2, [r7, #4]
    31f2:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    31f4:	7afb      	ldrb	r3, [r7, #11]
    31f6:	68fa      	ldr	r2, [r7, #12]
    31f8:	01db      	lsls	r3, r3, #7
    31fa:	4413      	add	r3, r2
    31fc:	3328      	adds	r3, #40	; 0x28
    31fe:	687a      	ldr	r2, [r7, #4]
    3200:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3202:	bf00      	nop
    3204:	3714      	adds	r7, #20
    3206:	46bd      	mov	sp, r7
    3208:	f85d 7b04 	ldr.w	r7, [sp], #4
    320c:	4770      	bx	lr
	...

00003210 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    3210:	b580      	push	{r7, lr}
    3212:	b082      	sub	sp, #8
    3214:	af00      	add	r7, sp, #0
    3216:	4603      	mov	r3, r0
    3218:	6039      	str	r1, [r7, #0]
    321a:	71fb      	strb	r3, [r7, #7]
    321c:	4613      	mov	r3, r2
    321e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    3220:	79bb      	ldrb	r3, [r7, #6]
    3222:	2b01      	cmp	r3, #1
    3224:	d01c      	beq.n	3260 <_gpio_set_direction+0x50>
    3226:	2b02      	cmp	r3, #2
    3228:	d037      	beq.n	329a <_gpio_set_direction+0x8a>
    322a:	2b00      	cmp	r3, #0
    322c:	d14e      	bne.n	32cc <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    322e:	79fb      	ldrb	r3, [r7, #7]
    3230:	683a      	ldr	r2, [r7, #0]
    3232:	4619      	mov	r1, r3
    3234:	482a      	ldr	r0, [pc, #168]	; (32e0 <_gpio_set_direction+0xd0>)
    3236:	4b2b      	ldr	r3, [pc, #172]	; (32e4 <_gpio_set_direction+0xd4>)
    3238:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    323a:	683b      	ldr	r3, [r7, #0]
    323c:	b29b      	uxth	r3, r3
    323e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    3242:	79fb      	ldrb	r3, [r7, #7]
    3244:	4619      	mov	r1, r3
    3246:	4826      	ldr	r0, [pc, #152]	; (32e0 <_gpio_set_direction+0xd0>)
    3248:	4b27      	ldr	r3, [pc, #156]	; (32e8 <_gpio_set_direction+0xd8>)
    324a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    324c:	683b      	ldr	r3, [r7, #0]
    324e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    3250:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    3254:	79fb      	ldrb	r3, [r7, #7]
    3256:	4619      	mov	r1, r3
    3258:	4821      	ldr	r0, [pc, #132]	; (32e0 <_gpio_set_direction+0xd0>)
    325a:	4b23      	ldr	r3, [pc, #140]	; (32e8 <_gpio_set_direction+0xd8>)
    325c:	4798      	blx	r3
		break;
    325e:	e03a      	b.n	32d6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    3260:	79fb      	ldrb	r3, [r7, #7]
    3262:	683a      	ldr	r2, [r7, #0]
    3264:	4619      	mov	r1, r3
    3266:	481e      	ldr	r0, [pc, #120]	; (32e0 <_gpio_set_direction+0xd0>)
    3268:	4b1e      	ldr	r3, [pc, #120]	; (32e4 <_gpio_set_direction+0xd4>)
    326a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    326c:	683b      	ldr	r3, [r7, #0]
    326e:	b29b      	uxth	r3, r3
    3270:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    3274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3278:	79f9      	ldrb	r1, [r7, #7]
    327a:	461a      	mov	r2, r3
    327c:	4818      	ldr	r0, [pc, #96]	; (32e0 <_gpio_set_direction+0xd0>)
    327e:	4b1a      	ldr	r3, [pc, #104]	; (32e8 <_gpio_set_direction+0xd8>)
    3280:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    3282:	683b      	ldr	r3, [r7, #0]
    3284:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    3286:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    328a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    328e:	79f9      	ldrb	r1, [r7, #7]
    3290:	461a      	mov	r2, r3
    3292:	4813      	ldr	r0, [pc, #76]	; (32e0 <_gpio_set_direction+0xd0>)
    3294:	4b14      	ldr	r3, [pc, #80]	; (32e8 <_gpio_set_direction+0xd8>)
    3296:	4798      	blx	r3
		break;
    3298:	e01d      	b.n	32d6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    329a:	79fb      	ldrb	r3, [r7, #7]
    329c:	683a      	ldr	r2, [r7, #0]
    329e:	4619      	mov	r1, r3
    32a0:	480f      	ldr	r0, [pc, #60]	; (32e0 <_gpio_set_direction+0xd0>)
    32a2:	4b12      	ldr	r3, [pc, #72]	; (32ec <_gpio_set_direction+0xdc>)
    32a4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    32a6:	683b      	ldr	r3, [r7, #0]
    32a8:	b29b      	uxth	r3, r3
    32aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    32ae:	79fb      	ldrb	r3, [r7, #7]
    32b0:	4619      	mov	r1, r3
    32b2:	480b      	ldr	r0, [pc, #44]	; (32e0 <_gpio_set_direction+0xd0>)
    32b4:	4b0c      	ldr	r3, [pc, #48]	; (32e8 <_gpio_set_direction+0xd8>)
    32b6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    32b8:	683b      	ldr	r3, [r7, #0]
    32ba:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    32bc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    32c0:	79fb      	ldrb	r3, [r7, #7]
    32c2:	4619      	mov	r1, r3
    32c4:	4806      	ldr	r0, [pc, #24]	; (32e0 <_gpio_set_direction+0xd0>)
    32c6:	4b08      	ldr	r3, [pc, #32]	; (32e8 <_gpio_set_direction+0xd8>)
    32c8:	4798      	blx	r3
		break;
    32ca:	e004      	b.n	32d6 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    32cc:	2246      	movs	r2, #70	; 0x46
    32ce:	4908      	ldr	r1, [pc, #32]	; (32f0 <_gpio_set_direction+0xe0>)
    32d0:	2000      	movs	r0, #0
    32d2:	4b08      	ldr	r3, [pc, #32]	; (32f4 <_gpio_set_direction+0xe4>)
    32d4:	4798      	blx	r3
	}
}
    32d6:	bf00      	nop
    32d8:	3708      	adds	r7, #8
    32da:	46bd      	mov	sp, r7
    32dc:	bd80      	pop	{r7, pc}
    32de:	bf00      	nop
    32e0:	41008000 	.word	0x41008000
    32e4:	00002fcf 	.word	0x00002fcf
    32e8:	000031e7 	.word	0x000031e7
    32ec:	00002fa7 	.word	0x00002fa7
    32f0:	0001a578 	.word	0x0001a578
    32f4:	00006241 	.word	0x00006241

000032f8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    32f8:	b580      	push	{r7, lr}
    32fa:	b082      	sub	sp, #8
    32fc:	af00      	add	r7, sp, #0
    32fe:	4603      	mov	r3, r0
    3300:	6039      	str	r1, [r7, #0]
    3302:	71fb      	strb	r3, [r7, #7]
    3304:	4613      	mov	r3, r2
    3306:	71bb      	strb	r3, [r7, #6]
	if (level) {
    3308:	79bb      	ldrb	r3, [r7, #6]
    330a:	2b00      	cmp	r3, #0
    330c:	d006      	beq.n	331c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    330e:	79fb      	ldrb	r3, [r7, #7]
    3310:	683a      	ldr	r2, [r7, #0]
    3312:	4619      	mov	r1, r3
    3314:	4806      	ldr	r0, [pc, #24]	; (3330 <_gpio_set_level+0x38>)
    3316:	4b07      	ldr	r3, [pc, #28]	; (3334 <_gpio_set_level+0x3c>)
    3318:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    331a:	e005      	b.n	3328 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    331c:	79fb      	ldrb	r3, [r7, #7]
    331e:	683a      	ldr	r2, [r7, #0]
    3320:	4619      	mov	r1, r3
    3322:	4803      	ldr	r0, [pc, #12]	; (3330 <_gpio_set_level+0x38>)
    3324:	4b04      	ldr	r3, [pc, #16]	; (3338 <_gpio_set_level+0x40>)
    3326:	4798      	blx	r3
}
    3328:	bf00      	nop
    332a:	3708      	adds	r7, #8
    332c:	46bd      	mov	sp, r7
    332e:	bd80      	pop	{r7, pc}
    3330:	41008000 	.word	0x41008000
    3334:	00002ff7 	.word	0x00002ff7
    3338:	0000301f 	.word	0x0000301f

0000333c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    333c:	b580      	push	{r7, lr}
    333e:	b082      	sub	sp, #8
    3340:	af00      	add	r7, sp, #0
    3342:	4603      	mov	r3, r0
    3344:	71fb      	strb	r3, [r7, #7]
    3346:	460b      	mov	r3, r1
    3348:	71bb      	strb	r3, [r7, #6]
    334a:	4613      	mov	r3, r2
    334c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    334e:	797b      	ldrb	r3, [r7, #5]
    3350:	2b01      	cmp	r3, #1
    3352:	d00a      	beq.n	336a <_gpio_set_pin_pull_mode+0x2e>
    3354:	2b02      	cmp	r3, #2
    3356:	d01f      	beq.n	3398 <_gpio_set_pin_pull_mode+0x5c>
    3358:	2b00      	cmp	r3, #0
    335a:	d134      	bne.n	33c6 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    335c:	79ba      	ldrb	r2, [r7, #6]
    335e:	79fb      	ldrb	r3, [r7, #7]
    3360:	4619      	mov	r1, r3
    3362:	481e      	ldr	r0, [pc, #120]	; (33dc <_gpio_set_pin_pull_mode+0xa0>)
    3364:	4b1e      	ldr	r3, [pc, #120]	; (33e0 <_gpio_set_pin_pull_mode+0xa4>)
    3366:	4798      	blx	r3
		break;
    3368:	e033      	b.n	33d2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    336a:	79bb      	ldrb	r3, [r7, #6]
    336c:	2201      	movs	r2, #1
    336e:	409a      	lsls	r2, r3
    3370:	79fb      	ldrb	r3, [r7, #7]
    3372:	4619      	mov	r1, r3
    3374:	4819      	ldr	r0, [pc, #100]	; (33dc <_gpio_set_pin_pull_mode+0xa0>)
    3376:	4b1b      	ldr	r3, [pc, #108]	; (33e4 <_gpio_set_pin_pull_mode+0xa8>)
    3378:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    337a:	79ba      	ldrb	r2, [r7, #6]
    337c:	79fb      	ldrb	r3, [r7, #7]
    337e:	4619      	mov	r1, r3
    3380:	4816      	ldr	r0, [pc, #88]	; (33dc <_gpio_set_pin_pull_mode+0xa0>)
    3382:	4b19      	ldr	r3, [pc, #100]	; (33e8 <_gpio_set_pin_pull_mode+0xac>)
    3384:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    3386:	79bb      	ldrb	r3, [r7, #6]
    3388:	2201      	movs	r2, #1
    338a:	409a      	lsls	r2, r3
    338c:	79fb      	ldrb	r3, [r7, #7]
    338e:	4619      	mov	r1, r3
    3390:	4812      	ldr	r0, [pc, #72]	; (33dc <_gpio_set_pin_pull_mode+0xa0>)
    3392:	4b16      	ldr	r3, [pc, #88]	; (33ec <_gpio_set_pin_pull_mode+0xb0>)
    3394:	4798      	blx	r3
		break;
    3396:	e01c      	b.n	33d2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    3398:	79bb      	ldrb	r3, [r7, #6]
    339a:	2201      	movs	r2, #1
    339c:	409a      	lsls	r2, r3
    339e:	79fb      	ldrb	r3, [r7, #7]
    33a0:	4619      	mov	r1, r3
    33a2:	480e      	ldr	r0, [pc, #56]	; (33dc <_gpio_set_pin_pull_mode+0xa0>)
    33a4:	4b0f      	ldr	r3, [pc, #60]	; (33e4 <_gpio_set_pin_pull_mode+0xa8>)
    33a6:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    33a8:	79ba      	ldrb	r2, [r7, #6]
    33aa:	79fb      	ldrb	r3, [r7, #7]
    33ac:	4619      	mov	r1, r3
    33ae:	480b      	ldr	r0, [pc, #44]	; (33dc <_gpio_set_pin_pull_mode+0xa0>)
    33b0:	4b0d      	ldr	r3, [pc, #52]	; (33e8 <_gpio_set_pin_pull_mode+0xac>)
    33b2:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    33b4:	79bb      	ldrb	r3, [r7, #6]
    33b6:	2201      	movs	r2, #1
    33b8:	409a      	lsls	r2, r3
    33ba:	79fb      	ldrb	r3, [r7, #7]
    33bc:	4619      	mov	r1, r3
    33be:	4807      	ldr	r0, [pc, #28]	; (33dc <_gpio_set_pin_pull_mode+0xa0>)
    33c0:	4b0b      	ldr	r3, [pc, #44]	; (33f0 <_gpio_set_pin_pull_mode+0xb4>)
    33c2:	4798      	blx	r3
		break;
    33c4:	e005      	b.n	33d2 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    33c6:	2289      	movs	r2, #137	; 0x89
    33c8:	490a      	ldr	r1, [pc, #40]	; (33f4 <_gpio_set_pin_pull_mode+0xb8>)
    33ca:	2000      	movs	r0, #0
    33cc:	4b0a      	ldr	r3, [pc, #40]	; (33f8 <_gpio_set_pin_pull_mode+0xbc>)
    33ce:	4798      	blx	r3
		break;
    33d0:	bf00      	nop
	}
}
    33d2:	bf00      	nop
    33d4:	3708      	adds	r7, #8
    33d6:	46bd      	mov	sp, r7
    33d8:	bd80      	pop	{r7, pc}
    33da:	bf00      	nop
    33dc:	41008000 	.word	0x41008000
    33e0:	000031a3 	.word	0x000031a3
    33e4:	00002fcf 	.word	0x00002fcf
    33e8:	0000315f 	.word	0x0000315f
    33ec:	00002ff7 	.word	0x00002ff7
    33f0:	0000301f 	.word	0x0000301f
    33f4:	0001a578 	.word	0x0001a578
    33f8:	00006241 	.word	0x00006241

000033fc <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    33fc:	b590      	push	{r4, r7, lr}
    33fe:	b085      	sub	sp, #20
    3400:	af00      	add	r7, sp, #0
    3402:	6078      	str	r0, [r7, #4]
    3404:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    3406:	687b      	ldr	r3, [r7, #4]
    3408:	095b      	lsrs	r3, r3, #5
    340a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    340c:	687b      	ldr	r3, [r7, #4]
    340e:	b2db      	uxtb	r3, r3
    3410:	f003 031f 	and.w	r3, r3, #31
    3414:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    3416:	683b      	ldr	r3, [r7, #0]
    3418:	f1b3 3fff 	cmp.w	r3, #4294967295
    341c:	d106      	bne.n	342c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    341e:	7bba      	ldrb	r2, [r7, #14]
    3420:	7bf9      	ldrb	r1, [r7, #15]
    3422:	2300      	movs	r3, #0
    3424:	4812      	ldr	r0, [pc, #72]	; (3470 <_gpio_set_pin_function+0x74>)
    3426:	4c13      	ldr	r4, [pc, #76]	; (3474 <_gpio_set_pin_function+0x78>)
    3428:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    342a:	e01d      	b.n	3468 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    342c:	7bba      	ldrb	r2, [r7, #14]
    342e:	7bf9      	ldrb	r1, [r7, #15]
    3430:	2301      	movs	r3, #1
    3432:	480f      	ldr	r0, [pc, #60]	; (3470 <_gpio_set_pin_function+0x74>)
    3434:	4c0f      	ldr	r4, [pc, #60]	; (3474 <_gpio_set_pin_function+0x78>)
    3436:	47a0      	blx	r4
		if (pin & 1) {
    3438:	7bbb      	ldrb	r3, [r7, #14]
    343a:	f003 0301 	and.w	r3, r3, #1
    343e:	2b00      	cmp	r3, #0
    3440:	d009      	beq.n	3456 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    3442:	7bbb      	ldrb	r3, [r7, #14]
    3444:	085b      	lsrs	r3, r3, #1
    3446:	b2da      	uxtb	r2, r3
    3448:	683b      	ldr	r3, [r7, #0]
    344a:	b2db      	uxtb	r3, r3
    344c:	7bf9      	ldrb	r1, [r7, #15]
    344e:	4808      	ldr	r0, [pc, #32]	; (3470 <_gpio_set_pin_function+0x74>)
    3450:	4c09      	ldr	r4, [pc, #36]	; (3478 <_gpio_set_pin_function+0x7c>)
    3452:	47a0      	blx	r4
}
    3454:	e008      	b.n	3468 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    3456:	7bbb      	ldrb	r3, [r7, #14]
    3458:	085b      	lsrs	r3, r3, #1
    345a:	b2da      	uxtb	r2, r3
    345c:	683b      	ldr	r3, [r7, #0]
    345e:	b2db      	uxtb	r3, r3
    3460:	7bf9      	ldrb	r1, [r7, #15]
    3462:	4803      	ldr	r0, [pc, #12]	; (3470 <_gpio_set_pin_function+0x74>)
    3464:	4c05      	ldr	r4, [pc, #20]	; (347c <_gpio_set_pin_function+0x80>)
    3466:	47a0      	blx	r4
}
    3468:	bf00      	nop
    346a:	3714      	adds	r7, #20
    346c:	46bd      	mov	sp, r7
    346e:	bd90      	pop	{r4, r7, pc}
    3470:	41008000 	.word	0x41008000
    3474:	00003105 	.word	0x00003105
    3478:	000030a7 	.word	0x000030a7
    347c:	00003047 	.word	0x00003047

00003480 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    3480:	b580      	push	{r7, lr}
    3482:	b082      	sub	sp, #8
    3484:	af00      	add	r7, sp, #0
    3486:	4603      	mov	r3, r0
    3488:	460a      	mov	r2, r1
    348a:	71fb      	strb	r3, [r7, #7]
    348c:	4613      	mov	r3, r2
    348e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    3490:	79fb      	ldrb	r3, [r7, #7]
    3492:	095b      	lsrs	r3, r3, #5
    3494:	b2d8      	uxtb	r0, r3
    3496:	79fb      	ldrb	r3, [r7, #7]
    3498:	f003 031f 	and.w	r3, r3, #31
    349c:	b2db      	uxtb	r3, r3
    349e:	79ba      	ldrb	r2, [r7, #6]
    34a0:	4619      	mov	r1, r3
    34a2:	4b03      	ldr	r3, [pc, #12]	; (34b0 <gpio_set_pin_pull_mode+0x30>)
    34a4:	4798      	blx	r3
}
    34a6:	bf00      	nop
    34a8:	3708      	adds	r7, #8
    34aa:	46bd      	mov	sp, r7
    34ac:	bd80      	pop	{r7, pc}
    34ae:	bf00      	nop
    34b0:	0000333d 	.word	0x0000333d

000034b4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    34b4:	b580      	push	{r7, lr}
    34b6:	b082      	sub	sp, #8
    34b8:	af00      	add	r7, sp, #0
    34ba:	6078      	str	r0, [r7, #4]
    34bc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    34be:	6839      	ldr	r1, [r7, #0]
    34c0:	6878      	ldr	r0, [r7, #4]
    34c2:	4b03      	ldr	r3, [pc, #12]	; (34d0 <gpio_set_pin_function+0x1c>)
    34c4:	4798      	blx	r3
}
    34c6:	bf00      	nop
    34c8:	3708      	adds	r7, #8
    34ca:	46bd      	mov	sp, r7
    34cc:	bd80      	pop	{r7, pc}
    34ce:	bf00      	nop
    34d0:	000033fd 	.word	0x000033fd

000034d4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    34d4:	b580      	push	{r7, lr}
    34d6:	b082      	sub	sp, #8
    34d8:	af00      	add	r7, sp, #0
    34da:	4603      	mov	r3, r0
    34dc:	460a      	mov	r2, r1
    34de:	71fb      	strb	r3, [r7, #7]
    34e0:	4613      	mov	r3, r2
    34e2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    34e4:	79fb      	ldrb	r3, [r7, #7]
    34e6:	095b      	lsrs	r3, r3, #5
    34e8:	b2d8      	uxtb	r0, r3
    34ea:	79fb      	ldrb	r3, [r7, #7]
    34ec:	f003 031f 	and.w	r3, r3, #31
    34f0:	2201      	movs	r2, #1
    34f2:	fa02 f303 	lsl.w	r3, r2, r3
    34f6:	79ba      	ldrb	r2, [r7, #6]
    34f8:	4619      	mov	r1, r3
    34fa:	4b03      	ldr	r3, [pc, #12]	; (3508 <gpio_set_pin_direction+0x34>)
    34fc:	4798      	blx	r3
}
    34fe:	bf00      	nop
    3500:	3708      	adds	r7, #8
    3502:	46bd      	mov	sp, r7
    3504:	bd80      	pop	{r7, pc}
    3506:	bf00      	nop
    3508:	00003211 	.word	0x00003211

0000350c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    350c:	b580      	push	{r7, lr}
    350e:	b082      	sub	sp, #8
    3510:	af00      	add	r7, sp, #0
    3512:	4603      	mov	r3, r0
    3514:	460a      	mov	r2, r1
    3516:	71fb      	strb	r3, [r7, #7]
    3518:	4613      	mov	r3, r2
    351a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    351c:	79fb      	ldrb	r3, [r7, #7]
    351e:	095b      	lsrs	r3, r3, #5
    3520:	b2d8      	uxtb	r0, r3
    3522:	79fb      	ldrb	r3, [r7, #7]
    3524:	f003 031f 	and.w	r3, r3, #31
    3528:	2201      	movs	r2, #1
    352a:	fa02 f303 	lsl.w	r3, r2, r3
    352e:	79ba      	ldrb	r2, [r7, #6]
    3530:	4619      	mov	r1, r3
    3532:	4b03      	ldr	r3, [pc, #12]	; (3540 <gpio_set_pin_level+0x34>)
    3534:	4798      	blx	r3
}
    3536:	bf00      	nop
    3538:	3708      	adds	r7, #8
    353a:	46bd      	mov	sp, r7
    353c:	bd80      	pop	{r7, pc}
    353e:	bf00      	nop
    3540:	000032f9 	.word	0x000032f9

00003544 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    3544:	b580      	push	{r7, lr}
    3546:	af00      	add	r7, sp, #0
	_init_chip();
    3548:	4b01      	ldr	r3, [pc, #4]	; (3550 <init_mcu+0xc>)
    354a:	4798      	blx	r3
}
    354c:	bf00      	nop
    354e:	bd80      	pop	{r7, pc}
    3550:	00006e41 	.word	0x00006e41

00003554 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    3554:	b580      	push	{r7, lr}
    3556:	b082      	sub	sp, #8
    3558:	af00      	add	r7, sp, #0
    355a:	6078      	str	r0, [r7, #4]
    355c:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    355e:	687b      	ldr	r3, [r7, #4]
    3560:	2b00      	cmp	r3, #0
    3562:	d004      	beq.n	356e <wdt_init+0x1a>
    3564:	683b      	ldr	r3, [r7, #0]
    3566:	2b00      	cmp	r3, #0
    3568:	d001      	beq.n	356e <wdt_init+0x1a>
    356a:	2301      	movs	r3, #1
    356c:	e000      	b.n	3570 <wdt_init+0x1c>
    356e:	2300      	movs	r3, #0
    3570:	f003 0301 	and.w	r3, r3, #1
    3574:	b2db      	uxtb	r3, r3
    3576:	2248      	movs	r2, #72	; 0x48
    3578:	4907      	ldr	r1, [pc, #28]	; (3598 <wdt_init+0x44>)
    357a:	4618      	mov	r0, r3
    357c:	4b07      	ldr	r3, [pc, #28]	; (359c <wdt_init+0x48>)
    357e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    3580:	687b      	ldr	r3, [r7, #4]
    3582:	683a      	ldr	r2, [r7, #0]
    3584:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	4618      	mov	r0, r3
    358a:	4b05      	ldr	r3, [pc, #20]	; (35a0 <wdt_init+0x4c>)
    358c:	4798      	blx	r3
    358e:	4603      	mov	r3, r0
}
    3590:	4618      	mov	r0, r3
    3592:	3708      	adds	r7, #8
    3594:	46bd      	mov	sp, r7
    3596:	bd80      	pop	{r7, pc}
    3598:	0001a594 	.word	0x0001a594
    359c:	00006241 	.word	0x00006241
    35a0:	0000df45 	.word	0x0000df45

000035a4 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    35a4:	b580      	push	{r7, lr}
    35a6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    35a8:	4804      	ldr	r0, [pc, #16]	; (35bc <CRC_CALC_init+0x18>)
    35aa:	4b05      	ldr	r3, [pc, #20]	; (35c0 <CRC_CALC_init+0x1c>)
    35ac:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    35ae:	4905      	ldr	r1, [pc, #20]	; (35c4 <CRC_CALC_init+0x20>)
    35b0:	4805      	ldr	r0, [pc, #20]	; (35c8 <CRC_CALC_init+0x24>)
    35b2:	4b06      	ldr	r3, [pc, #24]	; (35cc <CRC_CALC_init+0x28>)
    35b4:	4798      	blx	r3
}
    35b6:	bf00      	nop
    35b8:	bd80      	pop	{r7, pc}
    35ba:	bf00      	nop
    35bc:	40000800 	.word	0x40000800
    35c0:	00002e67 	.word	0x00002e67
    35c4:	41002000 	.word	0x41002000
    35c8:	200040cc 	.word	0x200040cc
    35cc:	00004561 	.word	0x00004561

000035d0 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    35d0:	b580      	push	{r7, lr}
    35d2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    35d4:	2244      	movs	r2, #68	; 0x44
    35d6:	2104      	movs	r1, #4
    35d8:	481e      	ldr	r0, [pc, #120]	; (3654 <EXTERNAL_IRQ_0_init+0x84>)
    35da:	4b1f      	ldr	r3, [pc, #124]	; (3658 <EXTERNAL_IRQ_0_init+0x88>)
    35dc:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    35de:	481f      	ldr	r0, [pc, #124]	; (365c <EXTERNAL_IRQ_0_init+0x8c>)
    35e0:	4b1f      	ldr	r3, [pc, #124]	; (3660 <EXTERNAL_IRQ_0_init+0x90>)
    35e2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
    35e4:	2101      	movs	r1, #1
    35e6:	2004      	movs	r0, #4
    35e8:	4b1e      	ldr	r3, [pc, #120]	; (3664 <EXTERNAL_IRQ_0_init+0x94>)
    35ea:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
    35ec:	2102      	movs	r1, #2
    35ee:	2004      	movs	r0, #4
    35f0:	4b1d      	ldr	r3, [pc, #116]	; (3668 <EXTERNAL_IRQ_0_init+0x98>)
    35f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
    35f4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    35f8:	2004      	movs	r0, #4
    35fa:	4b1c      	ldr	r3, [pc, #112]	; (366c <EXTERNAL_IRQ_0_init+0x9c>)
    35fc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
    35fe:	2101      	movs	r1, #1
    3600:	2005      	movs	r0, #5
    3602:	4b18      	ldr	r3, [pc, #96]	; (3664 <EXTERNAL_IRQ_0_init+0x94>)
    3604:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
    3606:	2102      	movs	r1, #2
    3608:	2005      	movs	r0, #5
    360a:	4b17      	ldr	r3, [pc, #92]	; (3668 <EXTERNAL_IRQ_0_init+0x98>)
    360c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
    360e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    3612:	2005      	movs	r0, #5
    3614:	4b15      	ldr	r3, [pc, #84]	; (366c <EXTERNAL_IRQ_0_init+0x9c>)
    3616:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
    3618:	2101      	movs	r1, #1
    361a:	2056      	movs	r0, #86	; 0x56
    361c:	4b11      	ldr	r3, [pc, #68]	; (3664 <EXTERNAL_IRQ_0_init+0x94>)
    361e:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
    3620:	2102      	movs	r1, #2
    3622:	2056      	movs	r0, #86	; 0x56
    3624:	4b10      	ldr	r3, [pc, #64]	; (3668 <EXTERNAL_IRQ_0_init+0x98>)
    3626:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
    3628:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    362c:	2056      	movs	r0, #86	; 0x56
    362e:	4b0f      	ldr	r3, [pc, #60]	; (366c <EXTERNAL_IRQ_0_init+0x9c>)
    3630:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
    3632:	2101      	movs	r1, #1
    3634:	2057      	movs	r0, #87	; 0x57
    3636:	4b0b      	ldr	r3, [pc, #44]	; (3664 <EXTERNAL_IRQ_0_init+0x94>)
    3638:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
    363a:	2102      	movs	r1, #2
    363c:	2057      	movs	r0, #87	; 0x57
    363e:	4b0a      	ldr	r3, [pc, #40]	; (3668 <EXTERNAL_IRQ_0_init+0x98>)
    3640:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
    3642:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    3646:	2057      	movs	r0, #87	; 0x57
    3648:	4b08      	ldr	r3, [pc, #32]	; (366c <EXTERNAL_IRQ_0_init+0x9c>)
    364a:	4798      	blx	r3

	ext_irq_init();
    364c:	4b08      	ldr	r3, [pc, #32]	; (3670 <EXTERNAL_IRQ_0_init+0xa0>)
    364e:	4798      	blx	r3
}
    3650:	bf00      	nop
    3652:	bd80      	pop	{r7, pc}
    3654:	40001c00 	.word	0x40001c00
    3658:	00002d01 	.word	0x00002d01
    365c:	40000800 	.word	0x40000800
    3660:	00002de7 	.word	0x00002de7
    3664:	000034d5 	.word	0x000034d5
    3668:	00003481 	.word	0x00003481
    366c:	000034b5 	.word	0x000034b5
    3670:	000046c5 	.word	0x000046c5

00003674 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    3674:	b580      	push	{r7, lr}
    3676:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3678:	2244      	movs	r2, #68	; 0x44
    367a:	210b      	movs	r1, #11
    367c:	4804      	ldr	r0, [pc, #16]	; (3690 <EVENT_SYSTEM_0_init+0x1c>)
    367e:	4b05      	ldr	r3, [pc, #20]	; (3694 <EVENT_SYSTEM_0_init+0x20>)
    3680:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    3682:	4805      	ldr	r0, [pc, #20]	; (3698 <EVENT_SYSTEM_0_init+0x24>)
    3684:	4b05      	ldr	r3, [pc, #20]	; (369c <EVENT_SYSTEM_0_init+0x28>)
    3686:	4798      	blx	r3

	event_system_init();
    3688:	4b05      	ldr	r3, [pc, #20]	; (36a0 <EVENT_SYSTEM_0_init+0x2c>)
    368a:	4798      	blx	r3
}
    368c:	bf00      	nop
    368e:	bd80      	pop	{r7, pc}
    3690:	40001c00 	.word	0x40001c00
    3694:	00002d01 	.word	0x00002d01
    3698:	40000800 	.word	0x40000800
    369c:	00002e87 	.word	0x00002e87
    36a0:	000046b1 	.word	0x000046b1

000036a4 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    36a4:	b580      	push	{r7, lr}
    36a6:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    36a8:	2101      	movs	r1, #1
    36aa:	202b      	movs	r0, #43	; 0x2b
    36ac:	4b2b      	ldr	r3, [pc, #172]	; (375c <QSPI_N25Q256_PORT_init+0xb8>)
    36ae:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    36b0:	2100      	movs	r1, #0
    36b2:	202b      	movs	r0, #43	; 0x2b
    36b4:	4b2a      	ldr	r3, [pc, #168]	; (3760 <QSPI_N25Q256_PORT_init+0xbc>)
    36b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    36b8:	492a      	ldr	r1, [pc, #168]	; (3764 <QSPI_N25Q256_PORT_init+0xc0>)
    36ba:	202b      	movs	r0, #43	; 0x2b
    36bc:	4b2a      	ldr	r3, [pc, #168]	; (3768 <QSPI_N25Q256_PORT_init+0xc4>)
    36be:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    36c0:	2102      	movs	r1, #2
    36c2:	2008      	movs	r0, #8
    36c4:	4b25      	ldr	r3, [pc, #148]	; (375c <QSPI_N25Q256_PORT_init+0xb8>)
    36c6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    36c8:	2100      	movs	r1, #0
    36ca:	2008      	movs	r0, #8
    36cc:	4b27      	ldr	r3, [pc, #156]	; (376c <QSPI_N25Q256_PORT_init+0xc8>)
    36ce:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    36d0:	2100      	movs	r1, #0
    36d2:	2008      	movs	r0, #8
    36d4:	4b22      	ldr	r3, [pc, #136]	; (3760 <QSPI_N25Q256_PORT_init+0xbc>)
    36d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    36d8:	4925      	ldr	r1, [pc, #148]	; (3770 <QSPI_N25Q256_PORT_init+0xcc>)
    36da:	2008      	movs	r0, #8
    36dc:	4b22      	ldr	r3, [pc, #136]	; (3768 <QSPI_N25Q256_PORT_init+0xc4>)
    36de:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    36e0:	2102      	movs	r1, #2
    36e2:	2009      	movs	r0, #9
    36e4:	4b1d      	ldr	r3, [pc, #116]	; (375c <QSPI_N25Q256_PORT_init+0xb8>)
    36e6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    36e8:	2100      	movs	r1, #0
    36ea:	2009      	movs	r0, #9
    36ec:	4b1f      	ldr	r3, [pc, #124]	; (376c <QSPI_N25Q256_PORT_init+0xc8>)
    36ee:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    36f0:	2100      	movs	r1, #0
    36f2:	2009      	movs	r0, #9
    36f4:	4b1a      	ldr	r3, [pc, #104]	; (3760 <QSPI_N25Q256_PORT_init+0xbc>)
    36f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    36f8:	491e      	ldr	r1, [pc, #120]	; (3774 <QSPI_N25Q256_PORT_init+0xd0>)
    36fa:	2009      	movs	r0, #9
    36fc:	4b1a      	ldr	r3, [pc, #104]	; (3768 <QSPI_N25Q256_PORT_init+0xc4>)
    36fe:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    3700:	2102      	movs	r1, #2
    3702:	200a      	movs	r0, #10
    3704:	4b15      	ldr	r3, [pc, #84]	; (375c <QSPI_N25Q256_PORT_init+0xb8>)
    3706:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    3708:	2100      	movs	r1, #0
    370a:	200a      	movs	r0, #10
    370c:	4b17      	ldr	r3, [pc, #92]	; (376c <QSPI_N25Q256_PORT_init+0xc8>)
    370e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    3710:	2100      	movs	r1, #0
    3712:	200a      	movs	r0, #10
    3714:	4b12      	ldr	r3, [pc, #72]	; (3760 <QSPI_N25Q256_PORT_init+0xbc>)
    3716:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    3718:	4917      	ldr	r1, [pc, #92]	; (3778 <QSPI_N25Q256_PORT_init+0xd4>)
    371a:	200a      	movs	r0, #10
    371c:	4b12      	ldr	r3, [pc, #72]	; (3768 <QSPI_N25Q256_PORT_init+0xc4>)
    371e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    3720:	2102      	movs	r1, #2
    3722:	200b      	movs	r0, #11
    3724:	4b0d      	ldr	r3, [pc, #52]	; (375c <QSPI_N25Q256_PORT_init+0xb8>)
    3726:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    3728:	2100      	movs	r1, #0
    372a:	200b      	movs	r0, #11
    372c:	4b0f      	ldr	r3, [pc, #60]	; (376c <QSPI_N25Q256_PORT_init+0xc8>)
    372e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    3730:	2100      	movs	r1, #0
    3732:	200b      	movs	r0, #11
    3734:	4b0a      	ldr	r3, [pc, #40]	; (3760 <QSPI_N25Q256_PORT_init+0xbc>)
    3736:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    3738:	4910      	ldr	r1, [pc, #64]	; (377c <QSPI_N25Q256_PORT_init+0xd8>)
    373a:	200b      	movs	r0, #11
    373c:	4b0a      	ldr	r3, [pc, #40]	; (3768 <QSPI_N25Q256_PORT_init+0xc4>)
    373e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    3740:	2101      	movs	r1, #1
    3742:	202a      	movs	r0, #42	; 0x2a
    3744:	4b05      	ldr	r3, [pc, #20]	; (375c <QSPI_N25Q256_PORT_init+0xb8>)
    3746:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    3748:	2100      	movs	r1, #0
    374a:	202a      	movs	r0, #42	; 0x2a
    374c:	4b04      	ldr	r3, [pc, #16]	; (3760 <QSPI_N25Q256_PORT_init+0xbc>)
    374e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    3750:	490b      	ldr	r1, [pc, #44]	; (3780 <QSPI_N25Q256_PORT_init+0xdc>)
    3752:	202a      	movs	r0, #42	; 0x2a
    3754:	4b04      	ldr	r3, [pc, #16]	; (3768 <QSPI_N25Q256_PORT_init+0xc4>)
    3756:	4798      	blx	r3
}
    3758:	bf00      	nop
    375a:	bd80      	pop	{r7, pc}
    375c:	000034d5 	.word	0x000034d5
    3760:	00003481 	.word	0x00003481
    3764:	002b0007 	.word	0x002b0007
    3768:	000034b5 	.word	0x000034b5
    376c:	0000350d 	.word	0x0000350d
    3770:	00080007 	.word	0x00080007
    3774:	00090007 	.word	0x00090007
    3778:	000a0007 	.word	0x000a0007
    377c:	000b0007 	.word	0x000b0007
    3780:	002a0007 	.word	0x002a0007

00003784 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    3784:	b580      	push	{r7, lr}
    3786:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    3788:	4805      	ldr	r0, [pc, #20]	; (37a0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    378a:	4b06      	ldr	r3, [pc, #24]	; (37a4 <QSPI_N25Q256_CLOCK_init+0x20>)
    378c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    378e:	4804      	ldr	r0, [pc, #16]	; (37a0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3790:	4b05      	ldr	r3, [pc, #20]	; (37a8 <QSPI_N25Q256_CLOCK_init+0x24>)
    3792:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    3794:	4802      	ldr	r0, [pc, #8]	; (37a0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3796:	4b05      	ldr	r3, [pc, #20]	; (37ac <QSPI_N25Q256_CLOCK_init+0x28>)
    3798:	4798      	blx	r3
}
    379a:	bf00      	nop
    379c:	bd80      	pop	{r7, pc}
    379e:	bf00      	nop
    37a0:	40000800 	.word	0x40000800
    37a4:	00002d47 	.word	0x00002d47
    37a8:	00002d87 	.word	0x00002d87
    37ac:	00002ee7 	.word	0x00002ee7

000037b0 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    37b0:	b580      	push	{r7, lr}
    37b2:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    37b4:	4b04      	ldr	r3, [pc, #16]	; (37c8 <QSPI_N25Q256_init+0x18>)
    37b6:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    37b8:	4904      	ldr	r1, [pc, #16]	; (37cc <QSPI_N25Q256_init+0x1c>)
    37ba:	4805      	ldr	r0, [pc, #20]	; (37d0 <QSPI_N25Q256_init+0x20>)
    37bc:	4b05      	ldr	r3, [pc, #20]	; (37d4 <QSPI_N25Q256_init+0x24>)
    37be:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    37c0:	4b05      	ldr	r3, [pc, #20]	; (37d8 <QSPI_N25Q256_init+0x28>)
    37c2:	4798      	blx	r3
}
    37c4:	bf00      	nop
    37c6:	bd80      	pop	{r7, pc}
    37c8:	00003785 	.word	0x00003785
    37cc:	42003400 	.word	0x42003400
    37d0:	20003f70 	.word	0x20003f70
    37d4:	00004ccd 	.word	0x00004ccd
    37d8:	000036a5 	.word	0x000036a5

000037dc <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    37dc:	b580      	push	{r7, lr}
    37de:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    37e0:	4802      	ldr	r0, [pc, #8]	; (37ec <DATETIME_CLOCK_CLOCK_init+0x10>)
    37e2:	4b03      	ldr	r3, [pc, #12]	; (37f0 <DATETIME_CLOCK_CLOCK_init+0x14>)
    37e4:	4798      	blx	r3
}
    37e6:	bf00      	nop
    37e8:	bd80      	pop	{r7, pc}
    37ea:	bf00      	nop
    37ec:	40000800 	.word	0x40000800
    37f0:	00002dc7 	.word	0x00002dc7

000037f4 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    37f4:	b580      	push	{r7, lr}
    37f6:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    37f8:	4b03      	ldr	r3, [pc, #12]	; (3808 <DATETIME_CLOCK_init+0x14>)
    37fa:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    37fc:	4903      	ldr	r1, [pc, #12]	; (380c <DATETIME_CLOCK_init+0x18>)
    37fe:	4804      	ldr	r0, [pc, #16]	; (3810 <DATETIME_CLOCK_init+0x1c>)
    3800:	4b04      	ldr	r3, [pc, #16]	; (3814 <DATETIME_CLOCK_init+0x20>)
    3802:	4798      	blx	r3
}
    3804:	bf00      	nop
    3806:	bd80      	pop	{r7, pc}
    3808:	000037dd 	.word	0x000037dd
    380c:	40002400 	.word	0x40002400
    3810:	200040a8 	.word	0x200040a8
    3814:	00004265 	.word	0x00004265

00003818 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    3818:	b580      	push	{r7, lr}
    381a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    381c:	2100      	movs	r1, #0
    381e:	203b      	movs	r0, #59	; 0x3b
    3820:	4b11      	ldr	r3, [pc, #68]	; (3868 <SPI_TEMP_PORT_init+0x50>)
    3822:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    3824:	2102      	movs	r1, #2
    3826:	203b      	movs	r0, #59	; 0x3b
    3828:	4b10      	ldr	r3, [pc, #64]	; (386c <SPI_TEMP_PORT_init+0x54>)
    382a:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    382c:	4910      	ldr	r1, [pc, #64]	; (3870 <SPI_TEMP_PORT_init+0x58>)
    382e:	203b      	movs	r0, #59	; 0x3b
    3830:	4b10      	ldr	r3, [pc, #64]	; (3874 <SPI_TEMP_PORT_init+0x5c>)
    3832:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    3834:	2100      	movs	r1, #0
    3836:	203a      	movs	r0, #58	; 0x3a
    3838:	4b0b      	ldr	r3, [pc, #44]	; (3868 <SPI_TEMP_PORT_init+0x50>)
    383a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    383c:	2102      	movs	r1, #2
    383e:	203a      	movs	r0, #58	; 0x3a
    3840:	4b0a      	ldr	r3, [pc, #40]	; (386c <SPI_TEMP_PORT_init+0x54>)
    3842:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    3844:	490c      	ldr	r1, [pc, #48]	; (3878 <SPI_TEMP_PORT_init+0x60>)
    3846:	203a      	movs	r0, #58	; 0x3a
    3848:	4b0a      	ldr	r3, [pc, #40]	; (3874 <SPI_TEMP_PORT_init+0x5c>)
    384a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    384c:	2101      	movs	r1, #1
    384e:	203c      	movs	r0, #60	; 0x3c
    3850:	4b06      	ldr	r3, [pc, #24]	; (386c <SPI_TEMP_PORT_init+0x54>)
    3852:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    3854:	2100      	movs	r1, #0
    3856:	203c      	movs	r0, #60	; 0x3c
    3858:	4b08      	ldr	r3, [pc, #32]	; (387c <SPI_TEMP_PORT_init+0x64>)
    385a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    385c:	4908      	ldr	r1, [pc, #32]	; (3880 <SPI_TEMP_PORT_init+0x68>)
    385e:	203c      	movs	r0, #60	; 0x3c
    3860:	4b04      	ldr	r3, [pc, #16]	; (3874 <SPI_TEMP_PORT_init+0x5c>)
    3862:	4798      	blx	r3
}
    3864:	bf00      	nop
    3866:	bd80      	pop	{r7, pc}
    3868:	0000350d 	.word	0x0000350d
    386c:	000034d5 	.word	0x000034d5
    3870:	003b0003 	.word	0x003b0003
    3874:	000034b5 	.word	0x000034b5
    3878:	003a0003 	.word	0x003a0003
    387c:	00003481 	.word	0x00003481
    3880:	003c0003 	.word	0x003c0003

00003884 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    3884:	b580      	push	{r7, lr}
    3886:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3888:	2243      	movs	r2, #67	; 0x43
    388a:	2122      	movs	r1, #34	; 0x22
    388c:	4806      	ldr	r0, [pc, #24]	; (38a8 <SPI_TEMP_CLOCK_init+0x24>)
    388e:	4b07      	ldr	r3, [pc, #28]	; (38ac <SPI_TEMP_CLOCK_init+0x28>)
    3890:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3892:	224a      	movs	r2, #74	; 0x4a
    3894:	2103      	movs	r1, #3
    3896:	4804      	ldr	r0, [pc, #16]	; (38a8 <SPI_TEMP_CLOCK_init+0x24>)
    3898:	4b04      	ldr	r3, [pc, #16]	; (38ac <SPI_TEMP_CLOCK_init+0x28>)
    389a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    389c:	4804      	ldr	r0, [pc, #16]	; (38b0 <SPI_TEMP_CLOCK_init+0x2c>)
    389e:	4b05      	ldr	r3, [pc, #20]	; (38b4 <SPI_TEMP_CLOCK_init+0x30>)
    38a0:	4798      	blx	r3
}
    38a2:	bf00      	nop
    38a4:	bd80      	pop	{r7, pc}
    38a6:	bf00      	nop
    38a8:	40001c00 	.word	0x40001c00
    38ac:	00002d01 	.word	0x00002d01
    38b0:	40000800 	.word	0x40000800
    38b4:	00002f07 	.word	0x00002f07

000038b8 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    38b8:	b580      	push	{r7, lr}
    38ba:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    38bc:	4b05      	ldr	r3, [pc, #20]	; (38d4 <SPI_TEMP_init+0x1c>)
    38be:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    38c0:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    38c4:	4804      	ldr	r0, [pc, #16]	; (38d8 <SPI_TEMP_init+0x20>)
    38c6:	4b05      	ldr	r3, [pc, #20]	; (38dc <SPI_TEMP_init+0x24>)
    38c8:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    38ca:	4b05      	ldr	r3, [pc, #20]	; (38e0 <SPI_TEMP_init+0x28>)
    38cc:	4798      	blx	r3
}
    38ce:	bf00      	nop
    38d0:	bd80      	pop	{r7, pc}
    38d2:	bf00      	nop
    38d4:	00003885 	.word	0x00003885
    38d8:	20003f28 	.word	0x20003f28
    38dc:	00004ff5 	.word	0x00004ff5
    38e0:	00003819 	.word	0x00003819

000038e4 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    38e4:	b580      	push	{r7, lr}
    38e6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    38e8:	2100      	movs	r1, #0
    38ea:	2017      	movs	r0, #23
    38ec:	4b07      	ldr	r3, [pc, #28]	; (390c <I2C_EXPANDER_PORT_init+0x28>)
    38ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    38f0:	4907      	ldr	r1, [pc, #28]	; (3910 <I2C_EXPANDER_PORT_init+0x2c>)
    38f2:	2017      	movs	r0, #23
    38f4:	4b07      	ldr	r3, [pc, #28]	; (3914 <I2C_EXPANDER_PORT_init+0x30>)
    38f6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    38f8:	2100      	movs	r1, #0
    38fa:	2016      	movs	r0, #22
    38fc:	4b03      	ldr	r3, [pc, #12]	; (390c <I2C_EXPANDER_PORT_init+0x28>)
    38fe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    3900:	4905      	ldr	r1, [pc, #20]	; (3918 <I2C_EXPANDER_PORT_init+0x34>)
    3902:	2016      	movs	r0, #22
    3904:	4b03      	ldr	r3, [pc, #12]	; (3914 <I2C_EXPANDER_PORT_init+0x30>)
    3906:	4798      	blx	r3
}
    3908:	bf00      	nop
    390a:	bd80      	pop	{r7, pc}
    390c:	00003481 	.word	0x00003481
    3910:	00170003 	.word	0x00170003
    3914:	000034b5 	.word	0x000034b5
    3918:	00160003 	.word	0x00160003

0000391c <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    391c:	b580      	push	{r7, lr}
    391e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3920:	2243      	movs	r2, #67	; 0x43
    3922:	2123      	movs	r1, #35	; 0x23
    3924:	4806      	ldr	r0, [pc, #24]	; (3940 <I2C_EXPANDER_CLOCK_init+0x24>)
    3926:	4b07      	ldr	r3, [pc, #28]	; (3944 <I2C_EXPANDER_CLOCK_init+0x28>)
    3928:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    392a:	224a      	movs	r2, #74	; 0x4a
    392c:	2103      	movs	r1, #3
    392e:	4804      	ldr	r0, [pc, #16]	; (3940 <I2C_EXPANDER_CLOCK_init+0x24>)
    3930:	4b04      	ldr	r3, [pc, #16]	; (3944 <I2C_EXPANDER_CLOCK_init+0x28>)
    3932:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    3934:	4804      	ldr	r0, [pc, #16]	; (3948 <I2C_EXPANDER_CLOCK_init+0x2c>)
    3936:	4b05      	ldr	r3, [pc, #20]	; (394c <I2C_EXPANDER_CLOCK_init+0x30>)
    3938:	4798      	blx	r3
}
    393a:	bf00      	nop
    393c:	bd80      	pop	{r7, pc}
    393e:	bf00      	nop
    3940:	40001c00 	.word	0x40001c00
    3944:	00002d01 	.word	0x00002d01
    3948:	40000800 	.word	0x40000800
    394c:	00002f27 	.word	0x00002f27

00003950 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    3950:	b580      	push	{r7, lr}
    3952:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    3954:	4b04      	ldr	r3, [pc, #16]	; (3968 <I2C_EXPANDER_init+0x18>)
    3956:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    3958:	4904      	ldr	r1, [pc, #16]	; (396c <I2C_EXPANDER_init+0x1c>)
    395a:	4805      	ldr	r0, [pc, #20]	; (3970 <I2C_EXPANDER_init+0x20>)
    395c:	4b05      	ldr	r3, [pc, #20]	; (3974 <I2C_EXPANDER_init+0x24>)
    395e:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    3960:	4b05      	ldr	r3, [pc, #20]	; (3978 <I2C_EXPANDER_init+0x28>)
    3962:	4798      	blx	r3
}
    3964:	bf00      	nop
    3966:	bd80      	pop	{r7, pc}
    3968:	0000391d 	.word	0x0000391d
    396c:	43000400 	.word	0x43000400
    3970:	2000400c 	.word	0x2000400c
    3974:	00004a29 	.word	0x00004a29
    3978:	000038e5 	.word	0x000038e5

0000397c <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    397c:	b580      	push	{r7, lr}
    397e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    3980:	2100      	movs	r1, #0
    3982:	2044      	movs	r0, #68	; 0x44
    3984:	4b11      	ldr	r3, [pc, #68]	; (39cc <SPI_HI3593_PORT_init+0x50>)
    3986:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    3988:	2102      	movs	r1, #2
    398a:	2044      	movs	r0, #68	; 0x44
    398c:	4b10      	ldr	r3, [pc, #64]	; (39d0 <SPI_HI3593_PORT_init+0x54>)
    398e:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    3990:	4910      	ldr	r1, [pc, #64]	; (39d4 <SPI_HI3593_PORT_init+0x58>)
    3992:	2044      	movs	r0, #68	; 0x44
    3994:	4b10      	ldr	r3, [pc, #64]	; (39d8 <SPI_HI3593_PORT_init+0x5c>)
    3996:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    3998:	2100      	movs	r1, #0
    399a:	2045      	movs	r0, #69	; 0x45
    399c:	4b0b      	ldr	r3, [pc, #44]	; (39cc <SPI_HI3593_PORT_init+0x50>)
    399e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    39a0:	2102      	movs	r1, #2
    39a2:	2045      	movs	r0, #69	; 0x45
    39a4:	4b0a      	ldr	r3, [pc, #40]	; (39d0 <SPI_HI3593_PORT_init+0x54>)
    39a6:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    39a8:	490c      	ldr	r1, [pc, #48]	; (39dc <SPI_HI3593_PORT_init+0x60>)
    39aa:	2045      	movs	r0, #69	; 0x45
    39ac:	4b0a      	ldr	r3, [pc, #40]	; (39d8 <SPI_HI3593_PORT_init+0x5c>)
    39ae:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    39b0:	2101      	movs	r1, #1
    39b2:	2047      	movs	r0, #71	; 0x47
    39b4:	4b06      	ldr	r3, [pc, #24]	; (39d0 <SPI_HI3593_PORT_init+0x54>)
    39b6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    39b8:	2100      	movs	r1, #0
    39ba:	2047      	movs	r0, #71	; 0x47
    39bc:	4b08      	ldr	r3, [pc, #32]	; (39e0 <SPI_HI3593_PORT_init+0x64>)
    39be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    39c0:	4908      	ldr	r1, [pc, #32]	; (39e4 <SPI_HI3593_PORT_init+0x68>)
    39c2:	2047      	movs	r0, #71	; 0x47
    39c4:	4b04      	ldr	r3, [pc, #16]	; (39d8 <SPI_HI3593_PORT_init+0x5c>)
    39c6:	4798      	blx	r3
}
    39c8:	bf00      	nop
    39ca:	bd80      	pop	{r7, pc}
    39cc:	0000350d 	.word	0x0000350d
    39d0:	000034d5 	.word	0x000034d5
    39d4:	00440002 	.word	0x00440002
    39d8:	000034b5 	.word	0x000034b5
    39dc:	00450002 	.word	0x00450002
    39e0:	00003481 	.word	0x00003481
    39e4:	00470002 	.word	0x00470002

000039e8 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    39e8:	b580      	push	{r7, lr}
    39ea:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    39ec:	2243      	movs	r2, #67	; 0x43
    39ee:	2124      	movs	r1, #36	; 0x24
    39f0:	4806      	ldr	r0, [pc, #24]	; (3a0c <SPI_HI3593_CLOCK_init+0x24>)
    39f2:	4b07      	ldr	r3, [pc, #28]	; (3a10 <SPI_HI3593_CLOCK_init+0x28>)
    39f4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    39f6:	224a      	movs	r2, #74	; 0x4a
    39f8:	2103      	movs	r1, #3
    39fa:	4804      	ldr	r0, [pc, #16]	; (3a0c <SPI_HI3593_CLOCK_init+0x24>)
    39fc:	4b04      	ldr	r3, [pc, #16]	; (3a10 <SPI_HI3593_CLOCK_init+0x28>)
    39fe:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    3a00:	4804      	ldr	r0, [pc, #16]	; (3a14 <SPI_HI3593_CLOCK_init+0x2c>)
    3a02:	4b05      	ldr	r3, [pc, #20]	; (3a18 <SPI_HI3593_CLOCK_init+0x30>)
    3a04:	4798      	blx	r3
}
    3a06:	bf00      	nop
    3a08:	bd80      	pop	{r7, pc}
    3a0a:	bf00      	nop
    3a0c:	40001c00 	.word	0x40001c00
    3a10:	00002d01 	.word	0x00002d01
    3a14:	40000800 	.word	0x40000800
    3a18:	00002f47 	.word	0x00002f47

00003a1c <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    3a1c:	b580      	push	{r7, lr}
    3a1e:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    3a20:	4b04      	ldr	r3, [pc, #16]	; (3a34 <SPI_HI3593_init+0x18>)
    3a22:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    3a24:	4904      	ldr	r1, [pc, #16]	; (3a38 <SPI_HI3593_init+0x1c>)
    3a26:	4805      	ldr	r0, [pc, #20]	; (3a3c <SPI_HI3593_init+0x20>)
    3a28:	4b05      	ldr	r3, [pc, #20]	; (3a40 <SPI_HI3593_init+0x24>)
    3a2a:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    3a2c:	4b05      	ldr	r3, [pc, #20]	; (3a44 <SPI_HI3593_init+0x28>)
    3a2e:	4798      	blx	r3
}
    3a30:	bf00      	nop
    3a32:	bd80      	pop	{r7, pc}
    3a34:	000039e9 	.word	0x000039e9
    3a38:	43000800 	.word	0x43000800
    3a3c:	20003f10 	.word	0x20003f10
    3a40:	000051a9 	.word	0x000051a9
    3a44:	0000397d 	.word	0x0000397d

00003a48 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    3a48:	b580      	push	{r7, lr}
    3a4a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    3a4c:	2100      	movs	r1, #0
    3a4e:	2068      	movs	r0, #104	; 0x68
    3a50:	4b07      	ldr	r3, [pc, #28]	; (3a70 <I2C_EEPROM_PORT_init+0x28>)
    3a52:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    3a54:	4907      	ldr	r1, [pc, #28]	; (3a74 <I2C_EEPROM_PORT_init+0x2c>)
    3a56:	2068      	movs	r0, #104	; 0x68
    3a58:	4b07      	ldr	r3, [pc, #28]	; (3a78 <I2C_EEPROM_PORT_init+0x30>)
    3a5a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    3a5c:	2100      	movs	r1, #0
    3a5e:	2069      	movs	r0, #105	; 0x69
    3a60:	4b03      	ldr	r3, [pc, #12]	; (3a70 <I2C_EEPROM_PORT_init+0x28>)
    3a62:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    3a64:	4905      	ldr	r1, [pc, #20]	; (3a7c <I2C_EEPROM_PORT_init+0x34>)
    3a66:	2069      	movs	r0, #105	; 0x69
    3a68:	4b03      	ldr	r3, [pc, #12]	; (3a78 <I2C_EEPROM_PORT_init+0x30>)
    3a6a:	4798      	blx	r3
}
    3a6c:	bf00      	nop
    3a6e:	bd80      	pop	{r7, pc}
    3a70:	00003481 	.word	0x00003481
    3a74:	00680002 	.word	0x00680002
    3a78:	000034b5 	.word	0x000034b5
    3a7c:	00690002 	.word	0x00690002

00003a80 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    3a80:	b580      	push	{r7, lr}
    3a82:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3a84:	2244      	movs	r2, #68	; 0x44
    3a86:	2125      	movs	r1, #37	; 0x25
    3a88:	4806      	ldr	r0, [pc, #24]	; (3aa4 <I2C_EEPROM_CLOCK_init+0x24>)
    3a8a:	4b07      	ldr	r3, [pc, #28]	; (3aa8 <I2C_EEPROM_CLOCK_init+0x28>)
    3a8c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3a8e:	224a      	movs	r2, #74	; 0x4a
    3a90:	2103      	movs	r1, #3
    3a92:	4804      	ldr	r0, [pc, #16]	; (3aa4 <I2C_EEPROM_CLOCK_init+0x24>)
    3a94:	4b04      	ldr	r3, [pc, #16]	; (3aa8 <I2C_EEPROM_CLOCK_init+0x28>)
    3a96:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    3a98:	4804      	ldr	r0, [pc, #16]	; (3aac <I2C_EEPROM_CLOCK_init+0x2c>)
    3a9a:	4b05      	ldr	r3, [pc, #20]	; (3ab0 <I2C_EEPROM_CLOCK_init+0x30>)
    3a9c:	4798      	blx	r3
}
    3a9e:	bf00      	nop
    3aa0:	bd80      	pop	{r7, pc}
    3aa2:	bf00      	nop
    3aa4:	40001c00 	.word	0x40001c00
    3aa8:	00002d01 	.word	0x00002d01
    3aac:	40000800 	.word	0x40000800
    3ab0:	00002f67 	.word	0x00002f67

00003ab4 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    3ab4:	b580      	push	{r7, lr}
    3ab6:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    3ab8:	4b04      	ldr	r3, [pc, #16]	; (3acc <I2C_EEPROM_init+0x18>)
    3aba:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    3abc:	4904      	ldr	r1, [pc, #16]	; (3ad0 <I2C_EEPROM_init+0x1c>)
    3abe:	4805      	ldr	r0, [pc, #20]	; (3ad4 <I2C_EEPROM_init+0x20>)
    3ac0:	4b05      	ldr	r3, [pc, #20]	; (3ad8 <I2C_EEPROM_init+0x24>)
    3ac2:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    3ac4:	4b05      	ldr	r3, [pc, #20]	; (3adc <I2C_EEPROM_init+0x28>)
    3ac6:	4798      	blx	r3
}
    3ac8:	bf00      	nop
    3aca:	bd80      	pop	{r7, pc}
    3acc:	00003a81 	.word	0x00003a81
    3ad0:	43000c00 	.word	0x43000c00
    3ad4:	20004068 	.word	0x20004068
    3ad8:	00004a29 	.word	0x00004a29
    3adc:	00003a49 	.word	0x00003a49

00003ae0 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    3ae0:	b580      	push	{r7, lr}
    3ae2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    3ae4:	4808      	ldr	r0, [pc, #32]	; (3b08 <TIMER_INTERFACE_init+0x28>)
    3ae6:	4b09      	ldr	r3, [pc, #36]	; (3b0c <TIMER_INTERFACE_init+0x2c>)
    3ae8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3aea:	2243      	movs	r2, #67	; 0x43
    3aec:	2109      	movs	r1, #9
    3aee:	4808      	ldr	r0, [pc, #32]	; (3b10 <TIMER_INTERFACE_init+0x30>)
    3af0:	4b08      	ldr	r3, [pc, #32]	; (3b14 <TIMER_INTERFACE_init+0x34>)
    3af2:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    3af4:	4b08      	ldr	r3, [pc, #32]	; (3b18 <TIMER_INTERFACE_init+0x38>)
    3af6:	4798      	blx	r3
    3af8:	4603      	mov	r3, r0
    3afa:	461a      	mov	r2, r3
    3afc:	4907      	ldr	r1, [pc, #28]	; (3b1c <TIMER_INTERFACE_init+0x3c>)
    3afe:	4808      	ldr	r0, [pc, #32]	; (3b20 <TIMER_INTERFACE_init+0x40>)
    3b00:	4b08      	ldr	r3, [pc, #32]	; (3b24 <TIMER_INTERFACE_init+0x44>)
    3b02:	4798      	blx	r3
}
    3b04:	bf00      	nop
    3b06:	bd80      	pop	{r7, pc}
    3b08:	40000800 	.word	0x40000800
    3b0c:	00002e07 	.word	0x00002e07
    3b10:	40001c00 	.word	0x40001c00
    3b14:	00002d01 	.word	0x00002d01
    3b18:	0000b415 	.word	0x0000b415
    3b1c:	40003800 	.word	0x40003800
    3b20:	20003f90 	.word	0x20003f90
    3b24:	00005439 	.word	0x00005439

00003b28 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    3b28:	b580      	push	{r7, lr}
    3b2a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    3b2c:	4808      	ldr	r0, [pc, #32]	; (3b50 <TIMER_EVENT_init+0x28>)
    3b2e:	4b09      	ldr	r3, [pc, #36]	; (3b54 <TIMER_EVENT_init+0x2c>)
    3b30:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b32:	2245      	movs	r2, #69	; 0x45
    3b34:	2109      	movs	r1, #9
    3b36:	4808      	ldr	r0, [pc, #32]	; (3b58 <TIMER_EVENT_init+0x30>)
    3b38:	4b08      	ldr	r3, [pc, #32]	; (3b5c <TIMER_EVENT_init+0x34>)
    3b3a:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    3b3c:	4b08      	ldr	r3, [pc, #32]	; (3b60 <TIMER_EVENT_init+0x38>)
    3b3e:	4798      	blx	r3
    3b40:	4603      	mov	r3, r0
    3b42:	461a      	mov	r2, r3
    3b44:	4907      	ldr	r1, [pc, #28]	; (3b64 <TIMER_EVENT_init+0x3c>)
    3b46:	4808      	ldr	r0, [pc, #32]	; (3b68 <TIMER_EVENT_init+0x40>)
    3b48:	4b08      	ldr	r3, [pc, #32]	; (3b6c <TIMER_EVENT_init+0x44>)
    3b4a:	4798      	blx	r3
}
    3b4c:	bf00      	nop
    3b4e:	bd80      	pop	{r7, pc}
    3b50:	40000800 	.word	0x40000800
    3b54:	00002e27 	.word	0x00002e27
    3b58:	40001c00 	.word	0x40001c00
    3b5c:	00002d01 	.word	0x00002d01
    3b60:	0000b415 	.word	0x0000b415
    3b64:	40003c00 	.word	0x40003c00
    3b68:	20003f74 	.word	0x20003f74
    3b6c:	00005439 	.word	0x00005439

00003b70 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    3b70:	b580      	push	{r7, lr}
    3b72:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    3b74:	4808      	ldr	r0, [pc, #32]	; (3b98 <TIMER_ARINC_init+0x28>)
    3b76:	4b09      	ldr	r3, [pc, #36]	; (3b9c <TIMER_ARINC_init+0x2c>)
    3b78:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b7a:	2244      	movs	r2, #68	; 0x44
    3b7c:	211a      	movs	r1, #26
    3b7e:	4808      	ldr	r0, [pc, #32]	; (3ba0 <TIMER_ARINC_init+0x30>)
    3b80:	4b08      	ldr	r3, [pc, #32]	; (3ba4 <TIMER_ARINC_init+0x34>)
    3b82:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    3b84:	4b08      	ldr	r3, [pc, #32]	; (3ba8 <TIMER_ARINC_init+0x38>)
    3b86:	4798      	blx	r3
    3b88:	4603      	mov	r3, r0
    3b8a:	461a      	mov	r2, r3
    3b8c:	4907      	ldr	r1, [pc, #28]	; (3bac <TIMER_ARINC_init+0x3c>)
    3b8e:	4808      	ldr	r0, [pc, #32]	; (3bb0 <TIMER_ARINC_init+0x40>)
    3b90:	4b08      	ldr	r3, [pc, #32]	; (3bb4 <TIMER_ARINC_init+0x44>)
    3b92:	4798      	blx	r3
}
    3b94:	bf00      	nop
    3b96:	bd80      	pop	{r7, pc}
    3b98:	40000800 	.word	0x40000800
    3b9c:	00002ea7 	.word	0x00002ea7
    3ba0:	40001c00 	.word	0x40001c00
    3ba4:	00002d01 	.word	0x00002d01
    3ba8:	0000b415 	.word	0x0000b415
    3bac:	4101a000 	.word	0x4101a000
    3bb0:	20003ff0 	.word	0x20003ff0
    3bb4:	00005439 	.word	0x00005439

00003bb8 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    3bbc:	4808      	ldr	r0, [pc, #32]	; (3be0 <TIMER_HVAC_init+0x28>)
    3bbe:	4b09      	ldr	r3, [pc, #36]	; (3be4 <TIMER_HVAC_init+0x2c>)
    3bc0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3bc2:	2245      	movs	r2, #69	; 0x45
    3bc4:	211a      	movs	r1, #26
    3bc6:	4808      	ldr	r0, [pc, #32]	; (3be8 <TIMER_HVAC_init+0x30>)
    3bc8:	4b08      	ldr	r3, [pc, #32]	; (3bec <TIMER_HVAC_init+0x34>)
    3bca:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    3bcc:	4b08      	ldr	r3, [pc, #32]	; (3bf0 <TIMER_HVAC_init+0x38>)
    3bce:	4798      	blx	r3
    3bd0:	4603      	mov	r3, r0
    3bd2:	461a      	mov	r2, r3
    3bd4:	4907      	ldr	r1, [pc, #28]	; (3bf4 <TIMER_HVAC_init+0x3c>)
    3bd6:	4808      	ldr	r0, [pc, #32]	; (3bf8 <TIMER_HVAC_init+0x40>)
    3bd8:	4b08      	ldr	r3, [pc, #32]	; (3bfc <TIMER_HVAC_init+0x44>)
    3bda:	4798      	blx	r3
}
    3bdc:	bf00      	nop
    3bde:	bd80      	pop	{r7, pc}
    3be0:	40000800 	.word	0x40000800
    3be4:	00002ec7 	.word	0x00002ec7
    3be8:	40001c00 	.word	0x40001c00
    3bec:	00002d01 	.word	0x00002d01
    3bf0:	0000b415 	.word	0x0000b415
    3bf4:	4101c000 	.word	0x4101c000
    3bf8:	2000404c 	.word	0x2000404c
    3bfc:	00005439 	.word	0x00005439

00003c00 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    3c00:	b580      	push	{r7, lr}
    3c02:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB00, PINMUX_PB00E_TC7_WO0);
    3c04:	4904      	ldr	r1, [pc, #16]	; (3c18 <LIVE_PULSE_PORT_init+0x18>)
    3c06:	2020      	movs	r0, #32
    3c08:	4b04      	ldr	r3, [pc, #16]	; (3c1c <LIVE_PULSE_PORT_init+0x1c>)
    3c0a:	4798      	blx	r3

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    3c0c:	4904      	ldr	r1, [pc, #16]	; (3c20 <LIVE_PULSE_PORT_init+0x20>)
    3c0e:	2021      	movs	r0, #33	; 0x21
    3c10:	4b02      	ldr	r3, [pc, #8]	; (3c1c <LIVE_PULSE_PORT_init+0x1c>)
    3c12:	4798      	blx	r3
}
    3c14:	bf00      	nop
    3c16:	bd80      	pop	{r7, pc}
    3c18:	00200004 	.word	0x00200004
    3c1c:	000034b5 	.word	0x000034b5
    3c20:	00210004 	.word	0x00210004

00003c24 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    3c24:	b580      	push	{r7, lr}
    3c26:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    3c28:	4804      	ldr	r0, [pc, #16]	; (3c3c <LIVE_PULSE_CLOCK_init+0x18>)
    3c2a:	4b05      	ldr	r3, [pc, #20]	; (3c40 <LIVE_PULSE_CLOCK_init+0x1c>)
    3c2c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3c2e:	224b      	movs	r2, #75	; 0x4b
    3c30:	2127      	movs	r1, #39	; 0x27
    3c32:	4804      	ldr	r0, [pc, #16]	; (3c44 <LIVE_PULSE_CLOCK_init+0x20>)
    3c34:	4b04      	ldr	r3, [pc, #16]	; (3c48 <LIVE_PULSE_CLOCK_init+0x24>)
    3c36:	4798      	blx	r3
}
    3c38:	bf00      	nop
    3c3a:	bd80      	pop	{r7, pc}
    3c3c:	40000800 	.word	0x40000800
    3c40:	00002f87 	.word	0x00002f87
    3c44:	40001c00 	.word	0x40001c00
    3c48:	00002d01 	.word	0x00002d01

00003c4c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    3c4c:	b580      	push	{r7, lr}
    3c4e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    3c50:	4b06      	ldr	r3, [pc, #24]	; (3c6c <LIVE_PULSE_init+0x20>)
    3c52:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    3c54:	4b06      	ldr	r3, [pc, #24]	; (3c70 <LIVE_PULSE_init+0x24>)
    3c56:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    3c58:	4b06      	ldr	r3, [pc, #24]	; (3c74 <LIVE_PULSE_init+0x28>)
    3c5a:	4798      	blx	r3
    3c5c:	4603      	mov	r3, r0
    3c5e:	461a      	mov	r2, r3
    3c60:	4905      	ldr	r1, [pc, #20]	; (3c78 <LIVE_PULSE_init+0x2c>)
    3c62:	4806      	ldr	r0, [pc, #24]	; (3c7c <LIVE_PULSE_init+0x30>)
    3c64:	4b06      	ldr	r3, [pc, #24]	; (3c80 <LIVE_PULSE_init+0x34>)
    3c66:	4798      	blx	r3
}
    3c68:	bf00      	nop
    3c6a:	bd80      	pop	{r7, pc}
    3c6c:	00003c25 	.word	0x00003c25
    3c70:	00003c01 	.word	0x00003c01
    3c74:	0000b425 	.word	0x0000b425
    3c78:	43001800 	.word	0x43001800
    3c7c:	20003fac 	.word	0x20003fac
    3c80:	00004bcd 	.word	0x00004bcd

00003c84 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    3c84:	b580      	push	{r7, lr}
    3c86:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    3c88:	2102      	movs	r1, #2
    3c8a:	2018      	movs	r0, #24
    3c8c:	4b0f      	ldr	r3, [pc, #60]	; (3ccc <CDCUSB_PORT_init+0x48>)
    3c8e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    3c90:	2100      	movs	r1, #0
    3c92:	2018      	movs	r0, #24
    3c94:	4b0e      	ldr	r3, [pc, #56]	; (3cd0 <CDCUSB_PORT_init+0x4c>)
    3c96:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    3c98:	2100      	movs	r1, #0
    3c9a:	2018      	movs	r0, #24
    3c9c:	4b0d      	ldr	r3, [pc, #52]	; (3cd4 <CDCUSB_PORT_init+0x50>)
    3c9e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    3ca0:	490d      	ldr	r1, [pc, #52]	; (3cd8 <CDCUSB_PORT_init+0x54>)
    3ca2:	2018      	movs	r0, #24
    3ca4:	4b0d      	ldr	r3, [pc, #52]	; (3cdc <CDCUSB_PORT_init+0x58>)
    3ca6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    3ca8:	2102      	movs	r1, #2
    3caa:	2019      	movs	r0, #25
    3cac:	4b07      	ldr	r3, [pc, #28]	; (3ccc <CDCUSB_PORT_init+0x48>)
    3cae:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    3cb0:	2100      	movs	r1, #0
    3cb2:	2019      	movs	r0, #25
    3cb4:	4b06      	ldr	r3, [pc, #24]	; (3cd0 <CDCUSB_PORT_init+0x4c>)
    3cb6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    3cb8:	2100      	movs	r1, #0
    3cba:	2019      	movs	r0, #25
    3cbc:	4b05      	ldr	r3, [pc, #20]	; (3cd4 <CDCUSB_PORT_init+0x50>)
    3cbe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    3cc0:	4907      	ldr	r1, [pc, #28]	; (3ce0 <CDCUSB_PORT_init+0x5c>)
    3cc2:	2019      	movs	r0, #25
    3cc4:	4b05      	ldr	r3, [pc, #20]	; (3cdc <CDCUSB_PORT_init+0x58>)
    3cc6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    3cc8:	bf00      	nop
    3cca:	bd80      	pop	{r7, pc}
    3ccc:	000034d5 	.word	0x000034d5
    3cd0:	0000350d 	.word	0x0000350d
    3cd4:	00003481 	.word	0x00003481
    3cd8:	00180007 	.word	0x00180007
    3cdc:	000034b5 	.word	0x000034b5
    3ce0:	00190007 	.word	0x00190007

00003ce4 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    3ce4:	b580      	push	{r7, lr}
    3ce6:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    3ce8:	2242      	movs	r2, #66	; 0x42
    3cea:	210a      	movs	r1, #10
    3cec:	4805      	ldr	r0, [pc, #20]	; (3d04 <CDCUSB_CLOCK_init+0x20>)
    3cee:	4b06      	ldr	r3, [pc, #24]	; (3d08 <CDCUSB_CLOCK_init+0x24>)
    3cf0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    3cf2:	4806      	ldr	r0, [pc, #24]	; (3d0c <CDCUSB_CLOCK_init+0x28>)
    3cf4:	4b06      	ldr	r3, [pc, #24]	; (3d10 <CDCUSB_CLOCK_init+0x2c>)
    3cf6:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    3cf8:	4804      	ldr	r0, [pc, #16]	; (3d0c <CDCUSB_CLOCK_init+0x28>)
    3cfa:	4b06      	ldr	r3, [pc, #24]	; (3d14 <CDCUSB_CLOCK_init+0x30>)
    3cfc:	4798      	blx	r3
}
    3cfe:	bf00      	nop
    3d00:	bd80      	pop	{r7, pc}
    3d02:	bf00      	nop
    3d04:	40001c00 	.word	0x40001c00
    3d08:	00002d01 	.word	0x00002d01
    3d0c:	40000800 	.word	0x40000800
    3d10:	00002d27 	.word	0x00002d27
    3d14:	00002e47 	.word	0x00002e47

00003d18 <CDCUSB_init>:

void CDCUSB_init(void)
{
    3d18:	b580      	push	{r7, lr}
    3d1a:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    3d1c:	4b03      	ldr	r3, [pc, #12]	; (3d2c <CDCUSB_init+0x14>)
    3d1e:	4798      	blx	r3
	usb_d_init();
    3d20:	4b03      	ldr	r3, [pc, #12]	; (3d30 <CDCUSB_init+0x18>)
    3d22:	4798      	blx	r3
	CDCUSB_PORT_init();
    3d24:	4b03      	ldr	r3, [pc, #12]	; (3d34 <CDCUSB_init+0x1c>)
    3d26:	4798      	blx	r3
}
    3d28:	bf00      	nop
    3d2a:	bd80      	pop	{r7, pc}
    3d2c:	00003ce5 	.word	0x00003ce5
    3d30:	00005c99 	.word	0x00005c99
    3d34:	00003c85 	.word	0x00003c85

00003d38 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    3d38:	b580      	push	{r7, lr}
    3d3a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    3d3c:	4802      	ldr	r0, [pc, #8]	; (3d48 <WATCHDOG_CLOCK_init+0x10>)
    3d3e:	4b03      	ldr	r3, [pc, #12]	; (3d4c <WATCHDOG_CLOCK_init+0x14>)
    3d40:	4798      	blx	r3
}
    3d42:	bf00      	nop
    3d44:	bd80      	pop	{r7, pc}
    3d46:	bf00      	nop
    3d48:	40000800 	.word	0x40000800
    3d4c:	00002da7 	.word	0x00002da7

00003d50 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    3d50:	b580      	push	{r7, lr}
    3d52:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    3d54:	4b03      	ldr	r3, [pc, #12]	; (3d64 <WATCHDOG_init+0x14>)
    3d56:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    3d58:	4903      	ldr	r1, [pc, #12]	; (3d68 <WATCHDOG_init+0x18>)
    3d5a:	4804      	ldr	r0, [pc, #16]	; (3d6c <WATCHDOG_init+0x1c>)
    3d5c:	4b04      	ldr	r3, [pc, #16]	; (3d70 <WATCHDOG_init+0x20>)
    3d5e:	4798      	blx	r3
}
    3d60:	bf00      	nop
    3d62:	bd80      	pop	{r7, pc}
    3d64:	00003d39 	.word	0x00003d39
    3d68:	40002000 	.word	0x40002000
    3d6c:	200040c8 	.word	0x200040c8
    3d70:	00003555 	.word	0x00003555

00003d74 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    3d74:	b580      	push	{r7, lr}
    3d76:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    3d78:	4904      	ldr	r1, [pc, #16]	; (3d8c <CAN_CCU_PORT_init+0x18>)
    3d7a:	202d      	movs	r0, #45	; 0x2d
    3d7c:	4b04      	ldr	r3, [pc, #16]	; (3d90 <CAN_CCU_PORT_init+0x1c>)
    3d7e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    3d80:	4904      	ldr	r1, [pc, #16]	; (3d94 <CAN_CCU_PORT_init+0x20>)
    3d82:	202c      	movs	r0, #44	; 0x2c
    3d84:	4b02      	ldr	r3, [pc, #8]	; (3d90 <CAN_CCU_PORT_init+0x1c>)
    3d86:	4798      	blx	r3
}
    3d88:	bf00      	nop
    3d8a:	bd80      	pop	{r7, pc}
    3d8c:	002d0007 	.word	0x002d0007
    3d90:	000034b5 	.word	0x000034b5
    3d94:	002c0007 	.word	0x002c0007

00003d98 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    3d98:	b580      	push	{r7, lr}
    3d9a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    3d9c:	4807      	ldr	r0, [pc, #28]	; (3dbc <CAN_CCU_init+0x24>)
    3d9e:	4b08      	ldr	r3, [pc, #32]	; (3dc0 <CAN_CCU_init+0x28>)
    3da0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3da2:	2243      	movs	r2, #67	; 0x43
    3da4:	211c      	movs	r1, #28
    3da6:	4807      	ldr	r0, [pc, #28]	; (3dc4 <CAN_CCU_init+0x2c>)
    3da8:	4b07      	ldr	r3, [pc, #28]	; (3dc8 <CAN_CCU_init+0x30>)
    3daa:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    3dac:	4907      	ldr	r1, [pc, #28]	; (3dcc <CAN_CCU_init+0x34>)
    3dae:	4808      	ldr	r0, [pc, #32]	; (3dd0 <CAN_CCU_init+0x38>)
    3db0:	4b08      	ldr	r3, [pc, #32]	; (3dd4 <CAN_CCU_init+0x3c>)
    3db2:	4798      	blx	r3
	CAN_CCU_PORT_init();
    3db4:	4b08      	ldr	r3, [pc, #32]	; (3dd8 <CAN_CCU_init+0x40>)
    3db6:	4798      	blx	r3
}
    3db8:	bf00      	nop
    3dba:	bd80      	pop	{r7, pc}
    3dbc:	40000800 	.word	0x40000800
    3dc0:	00002d67 	.word	0x00002d67
    3dc4:	40001c00 	.word	0x40001c00
    3dc8:	00002d01 	.word	0x00002d01
    3dcc:	42000400 	.word	0x42000400
    3dd0:	20003fc8 	.word	0x20003fc8
    3dd4:	00004475 	.word	0x00004475
    3dd8:	00003d75 	.word	0x00003d75

00003ddc <system_init>:

void system_init(void)
{
    3ddc:	b580      	push	{r7, lr}
    3dde:	af00      	add	r7, sp, #0
	init_mcu();
    3de0:	4b40      	ldr	r3, [pc, #256]	; (3ee4 <system_init+0x108>)
    3de2:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    3de4:	2101      	movs	r1, #1
    3de6:	2027      	movs	r0, #39	; 0x27
    3de8:	4b3f      	ldr	r3, [pc, #252]	; (3ee8 <system_init+0x10c>)
    3dea:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    3dec:	2102      	movs	r1, #2
    3dee:	2027      	movs	r0, #39	; 0x27
    3df0:	4b3e      	ldr	r3, [pc, #248]	; (3eec <system_init+0x110>)
    3df2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    3df4:	f04f 31ff 	mov.w	r1, #4294967295
    3df8:	2027      	movs	r0, #39	; 0x27
    3dfa:	4b3d      	ldr	r3, [pc, #244]	; (3ef0 <system_init+0x114>)
    3dfc:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    3dfe:	2101      	movs	r1, #1
    3e00:	203d      	movs	r0, #61	; 0x3d
    3e02:	4b3c      	ldr	r3, [pc, #240]	; (3ef4 <system_init+0x118>)
    3e04:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    3e06:	2102      	movs	r1, #2
    3e08:	203d      	movs	r0, #61	; 0x3d
    3e0a:	4b37      	ldr	r3, [pc, #220]	; (3ee8 <system_init+0x10c>)
    3e0c:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    3e0e:	f04f 31ff 	mov.w	r1, #4294967295
    3e12:	203d      	movs	r0, #61	; 0x3d
    3e14:	4b36      	ldr	r3, [pc, #216]	; (3ef0 <system_init+0x114>)
    3e16:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    3e18:	2101      	movs	r1, #1
    3e1a:	203f      	movs	r0, #63	; 0x3f
    3e1c:	4b32      	ldr	r3, [pc, #200]	; (3ee8 <system_init+0x10c>)
    3e1e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    3e20:	2101      	movs	r1, #1
    3e22:	203f      	movs	r0, #63	; 0x3f
    3e24:	4b31      	ldr	r3, [pc, #196]	; (3eec <system_init+0x110>)
    3e26:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    3e28:	f04f 31ff 	mov.w	r1, #4294967295
    3e2c:	203f      	movs	r0, #63	; 0x3f
    3e2e:	4b30      	ldr	r3, [pc, #192]	; (3ef0 <system_init+0x114>)
    3e30:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    3e32:	2101      	movs	r1, #1
    3e34:	2040      	movs	r0, #64	; 0x40
    3e36:	4b2c      	ldr	r3, [pc, #176]	; (3ee8 <system_init+0x10c>)
    3e38:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    3e3a:	2102      	movs	r1, #2
    3e3c:	2040      	movs	r0, #64	; 0x40
    3e3e:	4b2b      	ldr	r3, [pc, #172]	; (3eec <system_init+0x110>)
    3e40:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    3e42:	f04f 31ff 	mov.w	r1, #4294967295
    3e46:	2040      	movs	r0, #64	; 0x40
    3e48:	4b29      	ldr	r3, [pc, #164]	; (3ef0 <system_init+0x114>)
    3e4a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    3e4c:	2101      	movs	r1, #1
    3e4e:	204e      	movs	r0, #78	; 0x4e
    3e50:	4b28      	ldr	r3, [pc, #160]	; (3ef4 <system_init+0x118>)
    3e52:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    3e54:	2102      	movs	r1, #2
    3e56:	204e      	movs	r0, #78	; 0x4e
    3e58:	4b23      	ldr	r3, [pc, #140]	; (3ee8 <system_init+0x10c>)
    3e5a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    3e5c:	f04f 31ff 	mov.w	r1, #4294967295
    3e60:	204e      	movs	r0, #78	; 0x4e
    3e62:	4b23      	ldr	r3, [pc, #140]	; (3ef0 <system_init+0x114>)
    3e64:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    3e66:	2100      	movs	r1, #0
    3e68:	204f      	movs	r0, #79	; 0x4f
    3e6a:	4b22      	ldr	r3, [pc, #136]	; (3ef4 <system_init+0x118>)
    3e6c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    3e6e:	2102      	movs	r1, #2
    3e70:	204f      	movs	r0, #79	; 0x4f
    3e72:	4b1d      	ldr	r3, [pc, #116]	; (3ee8 <system_init+0x10c>)
    3e74:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    3e76:	f04f 31ff 	mov.w	r1, #4294967295
    3e7a:	204f      	movs	r0, #79	; 0x4f
    3e7c:	4b1c      	ldr	r3, [pc, #112]	; (3ef0 <system_init+0x114>)
    3e7e:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    3e80:	2100      	movs	r1, #0
    3e82:	2052      	movs	r0, #82	; 0x52
    3e84:	4b1b      	ldr	r3, [pc, #108]	; (3ef4 <system_init+0x118>)
    3e86:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    3e88:	2102      	movs	r1, #2
    3e8a:	2052      	movs	r0, #82	; 0x52
    3e8c:	4b16      	ldr	r3, [pc, #88]	; (3ee8 <system_init+0x10c>)
    3e8e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    3e90:	f04f 31ff 	mov.w	r1, #4294967295
    3e94:	2052      	movs	r0, #82	; 0x52
    3e96:	4b16      	ldr	r3, [pc, #88]	; (3ef0 <system_init+0x114>)
    3e98:	4798      	blx	r3

	CRC_CALC_init();
    3e9a:	4b17      	ldr	r3, [pc, #92]	; (3ef8 <system_init+0x11c>)
    3e9c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    3e9e:	4b17      	ldr	r3, [pc, #92]	; (3efc <system_init+0x120>)
    3ea0:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    3ea2:	4b17      	ldr	r3, [pc, #92]	; (3f00 <system_init+0x124>)
    3ea4:	4798      	blx	r3

	QSPI_N25Q256_init();
    3ea6:	4b17      	ldr	r3, [pc, #92]	; (3f04 <system_init+0x128>)
    3ea8:	4798      	blx	r3

	DATETIME_CLOCK_init();
    3eaa:	4b17      	ldr	r3, [pc, #92]	; (3f08 <system_init+0x12c>)
    3eac:	4798      	blx	r3

	SPI_TEMP_init();
    3eae:	4b17      	ldr	r3, [pc, #92]	; (3f0c <system_init+0x130>)
    3eb0:	4798      	blx	r3

	I2C_EXPANDER_init();
    3eb2:	4b17      	ldr	r3, [pc, #92]	; (3f10 <system_init+0x134>)
    3eb4:	4798      	blx	r3

	SPI_HI3593_init();
    3eb6:	4b17      	ldr	r3, [pc, #92]	; (3f14 <system_init+0x138>)
    3eb8:	4798      	blx	r3

	I2C_EEPROM_init();
    3eba:	4b17      	ldr	r3, [pc, #92]	; (3f18 <system_init+0x13c>)
    3ebc:	4798      	blx	r3

	TIMER_INTERFACE_init();
    3ebe:	4b17      	ldr	r3, [pc, #92]	; (3f1c <system_init+0x140>)
    3ec0:	4798      	blx	r3
	TIMER_EVENT_init();
    3ec2:	4b17      	ldr	r3, [pc, #92]	; (3f20 <system_init+0x144>)
    3ec4:	4798      	blx	r3
	TIMER_ARINC_init();
    3ec6:	4b17      	ldr	r3, [pc, #92]	; (3f24 <system_init+0x148>)
    3ec8:	4798      	blx	r3
	TIMER_HVAC_init();
    3eca:	4b17      	ldr	r3, [pc, #92]	; (3f28 <system_init+0x14c>)
    3ecc:	4798      	blx	r3
	LIVE_PULSE_init();
    3ece:	4b17      	ldr	r3, [pc, #92]	; (3f2c <system_init+0x150>)
    3ed0:	4798      	blx	r3

	CDCUSB_init();
    3ed2:	4b17      	ldr	r3, [pc, #92]	; (3f30 <system_init+0x154>)
    3ed4:	4798      	blx	r3

	WATCHDOG_init();
    3ed6:	4b17      	ldr	r3, [pc, #92]	; (3f34 <system_init+0x158>)
    3ed8:	4798      	blx	r3
	CAN_CCU_init();
    3eda:	4b17      	ldr	r3, [pc, #92]	; (3f38 <system_init+0x15c>)
    3edc:	4798      	blx	r3
}
    3ede:	bf00      	nop
    3ee0:	bd80      	pop	{r7, pc}
    3ee2:	bf00      	nop
    3ee4:	00003545 	.word	0x00003545
    3ee8:	000034d5 	.word	0x000034d5
    3eec:	00003481 	.word	0x00003481
    3ef0:	000034b5 	.word	0x000034b5
    3ef4:	0000350d 	.word	0x0000350d
    3ef8:	000035a5 	.word	0x000035a5
    3efc:	000035d1 	.word	0x000035d1
    3f00:	00003675 	.word	0x00003675
    3f04:	000037b1 	.word	0x000037b1
    3f08:	000037f5 	.word	0x000037f5
    3f0c:	000038b9 	.word	0x000038b9
    3f10:	00003951 	.word	0x00003951
    3f14:	00003a1d 	.word	0x00003a1d
    3f18:	00003ab5 	.word	0x00003ab5
    3f1c:	00003ae1 	.word	0x00003ae1
    3f20:	00003b29 	.word	0x00003b29
    3f24:	00003b71 	.word	0x00003b71
    3f28:	00003bb9 	.word	0x00003bb9
    3f2c:	00003c4d 	.word	0x00003c4d
    3f30:	00003d19 	.word	0x00003d19
    3f34:	00003d51 	.word	0x00003d51
    3f38:	00003d99 	.word	0x00003d99

00003f3c <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    3f3c:	b480      	push	{r7}
    3f3e:	b083      	sub	sp, #12
    3f40:	af00      	add	r7, sp, #0
    3f42:	4603      	mov	r3, r0
    3f44:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    3f46:	88fb      	ldrh	r3, [r7, #6]
    3f48:	f003 0303 	and.w	r3, r3, #3
    3f4c:	2b00      	cmp	r3, #0
    3f4e:	d001      	beq.n	3f54 <leap_year+0x18>
		return false;
    3f50:	2300      	movs	r3, #0
    3f52:	e000      	b.n	3f56 <leap_year+0x1a>
	} else {
		return true;
    3f54:	2301      	movs	r3, #1
	}
}
    3f56:	4618      	mov	r0, r3
    3f58:	370c      	adds	r7, #12
    3f5a:	46bd      	mov	sp, r7
    3f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f60:	4770      	bx	lr
	...

00003f64 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    3f64:	b580      	push	{r7, lr}
    3f66:	b084      	sub	sp, #16
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
    3f6c:	460b      	mov	r3, r1
    3f6e:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    3f70:	2300      	movs	r3, #0
    3f72:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    3f74:	687b      	ldr	r3, [r7, #4]
    3f76:	b29b      	uxth	r3, r3
    3f78:	4618      	mov	r0, r3
    3f7a:	4b2f      	ldr	r3, [pc, #188]	; (4038 <get_secs_in_month+0xd4>)
    3f7c:	4798      	blx	r3
    3f7e:	4603      	mov	r3, r0
    3f80:	2b00      	cmp	r3, #0
    3f82:	d028      	beq.n	3fd6 <get_secs_in_month+0x72>
		switch (month) {
    3f84:	78fb      	ldrb	r3, [r7, #3]
    3f86:	3b01      	subs	r3, #1
    3f88:	2b0b      	cmp	r3, #11
    3f8a:	d84c      	bhi.n	4026 <get_secs_in_month+0xc2>
    3f8c:	a201      	add	r2, pc, #4	; (adr r2, 3f94 <get_secs_in_month+0x30>)
    3f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3f92:	bf00      	nop
    3f94:	00003fc5 	.word	0x00003fc5
    3f98:	00003fcb 	.word	0x00003fcb
    3f9c:	00003fc5 	.word	0x00003fc5
    3fa0:	00003fd1 	.word	0x00003fd1
    3fa4:	00003fc5 	.word	0x00003fc5
    3fa8:	00003fd1 	.word	0x00003fd1
    3fac:	00003fc5 	.word	0x00003fc5
    3fb0:	00003fc5 	.word	0x00003fc5
    3fb4:	00003fd1 	.word	0x00003fd1
    3fb8:	00003fc5 	.word	0x00003fc5
    3fbc:	00003fd1 	.word	0x00003fd1
    3fc0:	00003fc5 	.word	0x00003fc5
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    3fc4:	4b1d      	ldr	r3, [pc, #116]	; (403c <get_secs_in_month+0xd8>)
    3fc6:	60fb      	str	r3, [r7, #12]
			break;
    3fc8:	e030      	b.n	402c <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    3fca:	4b1d      	ldr	r3, [pc, #116]	; (4040 <get_secs_in_month+0xdc>)
    3fcc:	60fb      	str	r3, [r7, #12]
			break;
    3fce:	e02d      	b.n	402c <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    3fd0:	4b1c      	ldr	r3, [pc, #112]	; (4044 <get_secs_in_month+0xe0>)
    3fd2:	60fb      	str	r3, [r7, #12]
			break;
    3fd4:	e02a      	b.n	402c <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    3fd6:	78fb      	ldrb	r3, [r7, #3]
    3fd8:	3b01      	subs	r3, #1
    3fda:	2b0b      	cmp	r3, #11
    3fdc:	d825      	bhi.n	402a <get_secs_in_month+0xc6>
    3fde:	a201      	add	r2, pc, #4	; (adr r2, 3fe4 <get_secs_in_month+0x80>)
    3fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3fe4:	00004015 	.word	0x00004015
    3fe8:	0000401b 	.word	0x0000401b
    3fec:	00004015 	.word	0x00004015
    3ff0:	00004021 	.word	0x00004021
    3ff4:	00004015 	.word	0x00004015
    3ff8:	00004021 	.word	0x00004021
    3ffc:	00004015 	.word	0x00004015
    4000:	00004015 	.word	0x00004015
    4004:	00004021 	.word	0x00004021
    4008:	00004015 	.word	0x00004015
    400c:	00004021 	.word	0x00004021
    4010:	00004015 	.word	0x00004015
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    4014:	4b09      	ldr	r3, [pc, #36]	; (403c <get_secs_in_month+0xd8>)
    4016:	60fb      	str	r3, [r7, #12]
			break;
    4018:	e008      	b.n	402c <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    401a:	4b0b      	ldr	r3, [pc, #44]	; (4048 <get_secs_in_month+0xe4>)
    401c:	60fb      	str	r3, [r7, #12]
			break;
    401e:	e005      	b.n	402c <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    4020:	4b08      	ldr	r3, [pc, #32]	; (4044 <get_secs_in_month+0xe0>)
    4022:	60fb      	str	r3, [r7, #12]
			break;
    4024:	e002      	b.n	402c <get_secs_in_month+0xc8>
			break;
    4026:	bf00      	nop
    4028:	e000      	b.n	402c <get_secs_in_month+0xc8>
		default:
			break;
    402a:	bf00      	nop
		}
	}

	return sec_in_month;
    402c:	68fb      	ldr	r3, [r7, #12]
}
    402e:	4618      	mov	r0, r3
    4030:	3710      	adds	r7, #16
    4032:	46bd      	mov	sp, r7
    4034:	bd80      	pop	{r7, pc}
    4036:	bf00      	nop
    4038:	00003f3d 	.word	0x00003f3d
    403c:	0028de80 	.word	0x0028de80
    4040:	00263b80 	.word	0x00263b80
    4044:	00278d00 	.word	0x00278d00
    4048:	0024ea00 	.word	0x0024ea00

0000404c <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    404c:	b580      	push	{r7, lr}
    404e:	b08a      	sub	sp, #40	; 0x28
    4050:	af00      	add	r7, sp, #0
    4052:	60f8      	str	r0, [r7, #12]
    4054:	60b9      	str	r1, [r7, #8]
    4056:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    4058:	68fb      	ldr	r3, [r7, #12]
    405a:	699b      	ldr	r3, [r3, #24]
    405c:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    405e:	2301      	movs	r3, #1
    4060:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    4062:	2301      	movs	r3, #1
    4064:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    4066:	2300      	movs	r3, #0
    4068:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    406a:	2300      	movs	r3, #0
    406c:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    406e:	68bb      	ldr	r3, [r7, #8]
    4070:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    4072:	6a3b      	ldr	r3, [r7, #32]
    4074:	b29b      	uxth	r3, r3
    4076:	4618      	mov	r0, r3
    4078:	4b32      	ldr	r3, [pc, #200]	; (4144 <convert_timestamp_to_datetime+0xf8>)
    407a:	4798      	blx	r3
    407c:	4603      	mov	r3, r0
    407e:	2b00      	cmp	r3, #0
    4080:	d001      	beq.n	4086 <convert_timestamp_to_datetime+0x3a>
    4082:	4b31      	ldr	r3, [pc, #196]	; (4148 <convert_timestamp_to_datetime+0xfc>)
    4084:	e000      	b.n	4088 <convert_timestamp_to_datetime+0x3c>
    4086:	4b31      	ldr	r3, [pc, #196]	; (414c <convert_timestamp_to_datetime+0x100>)
    4088:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    408a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    408c:	69bb      	ldr	r3, [r7, #24]
    408e:	429a      	cmp	r2, r3
    4090:	d307      	bcc.n	40a2 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    4092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4094:	69bb      	ldr	r3, [r7, #24]
    4096:	1ad3      	subs	r3, r2, r3
    4098:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    409a:	6a3b      	ldr	r3, [r7, #32]
    409c:	3301      	adds	r3, #1
    409e:	623b      	str	r3, [r7, #32]
    40a0:	e7e7      	b.n	4072 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    40a2:	7ffb      	ldrb	r3, [r7, #31]
    40a4:	4619      	mov	r1, r3
    40a6:	6a38      	ldr	r0, [r7, #32]
    40a8:	4b29      	ldr	r3, [pc, #164]	; (4150 <convert_timestamp_to_datetime+0x104>)
    40aa:	4798      	blx	r3
    40ac:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    40ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    40b0:	697b      	ldr	r3, [r7, #20]
    40b2:	429a      	cmp	r2, r3
    40b4:	d307      	bcc.n	40c6 <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    40b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    40b8:	697b      	ldr	r3, [r7, #20]
    40ba:	1ad3      	subs	r3, r2, r3
    40bc:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    40be:	7ffb      	ldrb	r3, [r7, #31]
    40c0:	3301      	adds	r3, #1
    40c2:	77fb      	strb	r3, [r7, #31]
    40c4:	e7ed      	b.n	40a2 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    40c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40c8:	4a22      	ldr	r2, [pc, #136]	; (4154 <convert_timestamp_to_datetime+0x108>)
    40ca:	4293      	cmp	r3, r2
    40cc:	d909      	bls.n	40e2 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    40ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40d0:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    40d4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    40d8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    40da:	7fbb      	ldrb	r3, [r7, #30]
    40dc:	3301      	adds	r3, #1
    40de:	77bb      	strb	r3, [r7, #30]
    40e0:	e7f1      	b.n	40c6 <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    40e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40e4:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    40e8:	d307      	bcc.n	40fa <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    40ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40ec:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    40f0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    40f2:	7f7b      	ldrb	r3, [r7, #29]
    40f4:	3301      	adds	r3, #1
    40f6:	777b      	strb	r3, [r7, #29]
    40f8:	e7f3      	b.n	40e2 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    40fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40fc:	2b3b      	cmp	r3, #59	; 0x3b
    40fe:	d906      	bls.n	410e <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    4100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4102:	3b3c      	subs	r3, #60	; 0x3c
    4104:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    4106:	7f3b      	ldrb	r3, [r7, #28]
    4108:	3301      	adds	r3, #1
    410a:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    410c:	e7f5      	b.n	40fa <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    410e:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    4110:	6a3b      	ldr	r3, [r7, #32]
    4112:	b29a      	uxth	r2, r3
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	7ffa      	ldrb	r2, [r7, #31]
    411c:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    411e:	687b      	ldr	r3, [r7, #4]
    4120:	7fba      	ldrb	r2, [r7, #30]
    4122:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    4124:	687b      	ldr	r3, [r7, #4]
    4126:	7f7a      	ldrb	r2, [r7, #29]
    4128:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	7f3a      	ldrb	r2, [r7, #28]
    412e:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    4130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4132:	b2da      	uxtb	r2, r3
    4134:	687b      	ldr	r3, [r7, #4]
    4136:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    4138:	2300      	movs	r3, #0
}
    413a:	4618      	mov	r0, r3
    413c:	3728      	adds	r7, #40	; 0x28
    413e:	46bd      	mov	sp, r7
    4140:	bd80      	pop	{r7, pc}
    4142:	bf00      	nop
    4144:	00003f3d 	.word	0x00003f3d
    4148:	01e28500 	.word	0x01e28500
    414c:	01e13380 	.word	0x01e13380
    4150:	00003f65 	.word	0x00003f65
    4154:	0001517f 	.word	0x0001517f

00004158 <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    4158:	b580      	push	{r7, lr}
    415a:	b086      	sub	sp, #24
    415c:	af00      	add	r7, sp, #0
    415e:	6078      	str	r0, [r7, #4]
    4160:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    4162:	2300      	movs	r3, #0
    4164:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    4166:	2300      	movs	r3, #0
    4168:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    416a:	683b      	ldr	r3, [r7, #0]
    416c:	88db      	ldrh	r3, [r3, #6]
    416e:	b2da      	uxtb	r2, r3
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	699b      	ldr	r3, [r3, #24]
    4174:	b2db      	uxtb	r3, r3
    4176:	1ad3      	subs	r3, r2, r3
    4178:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    417a:	683b      	ldr	r3, [r7, #0]
    417c:	795b      	ldrb	r3, [r3, #5]
    417e:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    4180:	683b      	ldr	r3, [r7, #0]
    4182:	791b      	ldrb	r3, [r3, #4]
    4184:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    4186:	683b      	ldr	r3, [r7, #0]
    4188:	789b      	ldrb	r3, [r3, #2]
    418a:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    418c:	683b      	ldr	r3, [r7, #0]
    418e:	785b      	ldrb	r3, [r3, #1]
    4190:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    4192:	683b      	ldr	r3, [r7, #0]
    4194:	781b      	ldrb	r3, [r3, #0]
    4196:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    4198:	2300      	movs	r3, #0
    419a:	613b      	str	r3, [r7, #16]
    419c:	e01a      	b.n	41d4 <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    419e:	687b      	ldr	r3, [r7, #4]
    41a0:	699b      	ldr	r3, [r3, #24]
    41a2:	b29a      	uxth	r2, r3
    41a4:	693b      	ldr	r3, [r7, #16]
    41a6:	b29b      	uxth	r3, r3
    41a8:	4413      	add	r3, r2
    41aa:	b29b      	uxth	r3, r3
    41ac:	4618      	mov	r0, r3
    41ae:	4b29      	ldr	r3, [pc, #164]	; (4254 <convert_datetime_to_timestamp+0xfc>)
    41b0:	4798      	blx	r3
    41b2:	4603      	mov	r3, r0
    41b4:	2b00      	cmp	r3, #0
    41b6:	d006      	beq.n	41c6 <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    41b8:	697b      	ldr	r3, [r7, #20]
    41ba:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    41be:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    41c2:	617b      	str	r3, [r7, #20]
    41c4:	e003      	b.n	41ce <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    41c6:	697a      	ldr	r2, [r7, #20]
    41c8:	4b23      	ldr	r3, [pc, #140]	; (4258 <convert_datetime_to_timestamp+0x100>)
    41ca:	4413      	add	r3, r2
    41cc:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    41ce:	693b      	ldr	r3, [r7, #16]
    41d0:	3301      	adds	r3, #1
    41d2:	613b      	str	r3, [r7, #16]
    41d4:	7bfa      	ldrb	r2, [r7, #15]
    41d6:	693b      	ldr	r3, [r7, #16]
    41d8:	429a      	cmp	r2, r3
    41da:	d8e0      	bhi.n	419e <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    41dc:	2301      	movs	r3, #1
    41de:	613b      	str	r3, [r7, #16]
    41e0:	e00f      	b.n	4202 <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    41e2:	683b      	ldr	r3, [r7, #0]
    41e4:	88db      	ldrh	r3, [r3, #6]
    41e6:	461a      	mov	r2, r3
    41e8:	693b      	ldr	r3, [r7, #16]
    41ea:	b2db      	uxtb	r3, r3
    41ec:	4619      	mov	r1, r3
    41ee:	4610      	mov	r0, r2
    41f0:	4b1a      	ldr	r3, [pc, #104]	; (425c <convert_datetime_to_timestamp+0x104>)
    41f2:	4798      	blx	r3
    41f4:	4602      	mov	r2, r0
    41f6:	697b      	ldr	r3, [r7, #20]
    41f8:	4413      	add	r3, r2
    41fa:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    41fc:	693b      	ldr	r3, [r7, #16]
    41fe:	3301      	adds	r3, #1
    4200:	613b      	str	r3, [r7, #16]
    4202:	7bba      	ldrb	r2, [r7, #14]
    4204:	693b      	ldr	r3, [r7, #16]
    4206:	429a      	cmp	r2, r3
    4208:	d8eb      	bhi.n	41e2 <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    420a:	7b7b      	ldrb	r3, [r7, #13]
    420c:	3b01      	subs	r3, #1
    420e:	4a14      	ldr	r2, [pc, #80]	; (4260 <convert_datetime_to_timestamp+0x108>)
    4210:	fb02 f303 	mul.w	r3, r2, r3
    4214:	461a      	mov	r2, r3
    4216:	697b      	ldr	r3, [r7, #20]
    4218:	4413      	add	r3, r2
    421a:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    421c:	7b3b      	ldrb	r3, [r7, #12]
    421e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    4222:	fb02 f303 	mul.w	r3, r2, r3
    4226:	461a      	mov	r2, r3
    4228:	697b      	ldr	r3, [r7, #20]
    422a:	4413      	add	r3, r2
    422c:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    422e:	7afa      	ldrb	r2, [r7, #11]
    4230:	4613      	mov	r3, r2
    4232:	011b      	lsls	r3, r3, #4
    4234:	1a9b      	subs	r3, r3, r2
    4236:	009b      	lsls	r3, r3, #2
    4238:	461a      	mov	r2, r3
    423a:	697b      	ldr	r3, [r7, #20]
    423c:	4413      	add	r3, r2
    423e:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    4240:	7abb      	ldrb	r3, [r7, #10]
    4242:	697a      	ldr	r2, [r7, #20]
    4244:	4413      	add	r3, r2
    4246:	617b      	str	r3, [r7, #20]

	return tmp;
    4248:	697b      	ldr	r3, [r7, #20]
}
    424a:	4618      	mov	r0, r3
    424c:	3718      	adds	r7, #24
    424e:	46bd      	mov	sp, r7
    4250:	bd80      	pop	{r7, pc}
    4252:	bf00      	nop
    4254:	00003f3d 	.word	0x00003f3d
    4258:	01e13380 	.word	0x01e13380
    425c:	00003f65 	.word	0x00003f65
    4260:	00015180 	.word	0x00015180

00004264 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    4264:	b580      	push	{r7, lr}
    4266:	b084      	sub	sp, #16
    4268:	af00      	add	r7, sp, #0
    426a:	6078      	str	r0, [r7, #4]
    426c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    426e:	2300      	movs	r3, #0
    4270:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    4272:	687b      	ldr	r3, [r7, #4]
    4274:	2b00      	cmp	r3, #0
    4276:	bf14      	ite	ne
    4278:	2301      	movne	r3, #1
    427a:	2300      	moveq	r3, #0
    427c:	b2db      	uxtb	r3, r3
    427e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    4282:	4911      	ldr	r1, [pc, #68]	; (42c8 <calendar_init+0x64>)
    4284:	4618      	mov	r0, r3
    4286:	4b11      	ldr	r3, [pc, #68]	; (42cc <calendar_init+0x68>)
    4288:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    428a:	687b      	ldr	r3, [r7, #4]
    428c:	681a      	ldr	r2, [r3, #0]
    428e:	683b      	ldr	r3, [r7, #0]
    4290:	429a      	cmp	r2, r3
    4292:	d101      	bne.n	4298 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    4294:	2300      	movs	r3, #0
    4296:	e013      	b.n	42c0 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    4298:	687b      	ldr	r3, [r7, #4]
    429a:	681b      	ldr	r3, [r3, #0]
    429c:	2b00      	cmp	r3, #0
    429e:	d002      	beq.n	42a6 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    42a0:	f06f 0311 	mvn.w	r3, #17
    42a4:	e00c      	b.n	42c0 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	683a      	ldr	r2, [r7, #0]
    42aa:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    42ac:	687b      	ldr	r3, [r7, #4]
    42ae:	4618      	mov	r0, r3
    42b0:	4b07      	ldr	r3, [pc, #28]	; (42d0 <calendar_init+0x6c>)
    42b2:	4798      	blx	r3
    42b4:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    42b6:	687b      	ldr	r3, [r7, #4]
    42b8:	f240 72b2 	movw	r2, #1970	; 0x7b2
    42bc:	619a      	str	r2, [r3, #24]

	return ret;
    42be:	68fb      	ldr	r3, [r7, #12]
}
    42c0:	4618      	mov	r0, r3
    42c2:	3710      	adds	r7, #16
    42c4:	46bd      	mov	sp, r7
    42c6:	bd80      	pop	{r7, pc}
    42c8:	0001a5b0 	.word	0x0001a5b0
    42cc:	00006241 	.word	0x00006241
    42d0:	00008abd 	.word	0x00008abd

000042d4 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    42d4:	b580      	push	{r7, lr}
    42d6:	b082      	sub	sp, #8
    42d8:	af00      	add	r7, sp, #0
    42da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    42dc:	687b      	ldr	r3, [r7, #4]
    42de:	2b00      	cmp	r3, #0
    42e0:	bf14      	ite	ne
    42e2:	2301      	movne	r3, #1
    42e4:	2300      	moveq	r3, #0
    42e6:	b2db      	uxtb	r3, r3
    42e8:	f240 12e5 	movw	r2, #485	; 0x1e5
    42ec:	4906      	ldr	r1, [pc, #24]	; (4308 <calendar_enable+0x34>)
    42ee:	4618      	mov	r0, r3
    42f0:	4b06      	ldr	r3, [pc, #24]	; (430c <calendar_enable+0x38>)
    42f2:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    42f4:	687b      	ldr	r3, [r7, #4]
    42f6:	4618      	mov	r0, r3
    42f8:	4b05      	ldr	r3, [pc, #20]	; (4310 <calendar_enable+0x3c>)
    42fa:	4798      	blx	r3

	return ERR_NONE;
    42fc:	2300      	movs	r3, #0
}
    42fe:	4618      	mov	r0, r3
    4300:	3708      	adds	r7, #8
    4302:	46bd      	mov	sp, r7
    4304:	bd80      	pop	{r7, pc}
    4306:	bf00      	nop
    4308:	0001a5b0 	.word	0x0001a5b0
    430c:	00006241 	.word	0x00006241
    4310:	00008b81 	.word	0x00008b81

00004314 <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    4314:	b580      	push	{r7, lr}
    4316:	b086      	sub	sp, #24
    4318:	af00      	add	r7, sp, #0
    431a:	6078      	str	r0, [r7, #4]
    431c:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    431e:	687b      	ldr	r3, [r7, #4]
    4320:	2b00      	cmp	r3, #0
    4322:	bf14      	ite	ne
    4324:	2301      	movne	r3, #1
    4326:	2300      	moveq	r3, #0
    4328:	b2db      	uxtb	r3, r3
    432a:	f44f 7203 	mov.w	r2, #524	; 0x20c
    432e:	4915      	ldr	r1, [pc, #84]	; (4384 <calendar_set_time+0x70>)
    4330:	4618      	mov	r0, r3
    4332:	4b15      	ldr	r3, [pc, #84]	; (4388 <calendar_set_time+0x74>)
    4334:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    4336:	687b      	ldr	r3, [r7, #4]
    4338:	4618      	mov	r0, r3
    433a:	4b14      	ldr	r3, [pc, #80]	; (438c <calendar_set_time+0x78>)
    433c:	4798      	blx	r3
    433e:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    4340:	f107 0308 	add.w	r3, r7, #8
    4344:	461a      	mov	r2, r3
    4346:	6979      	ldr	r1, [r7, #20]
    4348:	6878      	ldr	r0, [r7, #4]
    434a:	4b11      	ldr	r3, [pc, #68]	; (4390 <calendar_set_time+0x7c>)
    434c:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    434e:	683b      	ldr	r3, [r7, #0]
    4350:	781b      	ldrb	r3, [r3, #0]
    4352:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    4354:	683b      	ldr	r3, [r7, #0]
    4356:	785b      	ldrb	r3, [r3, #1]
    4358:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    435a:	683b      	ldr	r3, [r7, #0]
    435c:	789b      	ldrb	r3, [r3, #2]
    435e:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    4360:	f107 0308 	add.w	r3, r7, #8
    4364:	4619      	mov	r1, r3
    4366:	6878      	ldr	r0, [r7, #4]
    4368:	4b0a      	ldr	r3, [pc, #40]	; (4394 <calendar_set_time+0x80>)
    436a:	4798      	blx	r3
    436c:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    436e:	687b      	ldr	r3, [r7, #4]
    4370:	6939      	ldr	r1, [r7, #16]
    4372:	4618      	mov	r0, r3
    4374:	4b08      	ldr	r3, [pc, #32]	; (4398 <calendar_set_time+0x84>)
    4376:	4798      	blx	r3

	return ERR_NONE;
    4378:	2300      	movs	r3, #0
}
    437a:	4618      	mov	r0, r3
    437c:	3718      	adds	r7, #24
    437e:	46bd      	mov	sp, r7
    4380:	bd80      	pop	{r7, pc}
    4382:	bf00      	nop
    4384:	0001a5b0 	.word	0x0001a5b0
    4388:	00006241 	.word	0x00006241
    438c:	00008c1d 	.word	0x00008c1d
    4390:	0000404d 	.word	0x0000404d
    4394:	00004159 	.word	0x00004159
    4398:	00008bcd 	.word	0x00008bcd

0000439c <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    439c:	b580      	push	{r7, lr}
    439e:	b086      	sub	sp, #24
    43a0:	af00      	add	r7, sp, #0
    43a2:	6078      	str	r0, [r7, #4]
    43a4:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    43a6:	687b      	ldr	r3, [r7, #4]
    43a8:	2b00      	cmp	r3, #0
    43aa:	bf14      	ite	ne
    43ac:	2301      	movne	r3, #1
    43ae:	2300      	moveq	r3, #0
    43b0:	b2db      	uxtb	r3, r3
    43b2:	f44f 7209 	mov.w	r2, #548	; 0x224
    43b6:	4915      	ldr	r1, [pc, #84]	; (440c <calendar_set_date+0x70>)
    43b8:	4618      	mov	r0, r3
    43ba:	4b15      	ldr	r3, [pc, #84]	; (4410 <calendar_set_date+0x74>)
    43bc:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    43be:	687b      	ldr	r3, [r7, #4]
    43c0:	4618      	mov	r0, r3
    43c2:	4b14      	ldr	r3, [pc, #80]	; (4414 <calendar_set_date+0x78>)
    43c4:	4798      	blx	r3
    43c6:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    43c8:	f107 0308 	add.w	r3, r7, #8
    43cc:	461a      	mov	r2, r3
    43ce:	6979      	ldr	r1, [r7, #20]
    43d0:	6878      	ldr	r0, [r7, #4]
    43d2:	4b11      	ldr	r3, [pc, #68]	; (4418 <calendar_set_date+0x7c>)
    43d4:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    43d6:	683b      	ldr	r3, [r7, #0]
    43d8:	781b      	ldrb	r3, [r3, #0]
    43da:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    43dc:	683b      	ldr	r3, [r7, #0]
    43de:	785b      	ldrb	r3, [r3, #1]
    43e0:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    43e2:	683b      	ldr	r3, [r7, #0]
    43e4:	885b      	ldrh	r3, [r3, #2]
    43e6:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    43e8:	f107 0308 	add.w	r3, r7, #8
    43ec:	4619      	mov	r1, r3
    43ee:	6878      	ldr	r0, [r7, #4]
    43f0:	4b0a      	ldr	r3, [pc, #40]	; (441c <calendar_set_date+0x80>)
    43f2:	4798      	blx	r3
    43f4:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    43f6:	687b      	ldr	r3, [r7, #4]
    43f8:	6939      	ldr	r1, [r7, #16]
    43fa:	4618      	mov	r0, r3
    43fc:	4b08      	ldr	r3, [pc, #32]	; (4420 <calendar_set_date+0x84>)
    43fe:	4798      	blx	r3

	return ERR_NONE;
    4400:	2300      	movs	r3, #0
}
    4402:	4618      	mov	r0, r3
    4404:	3718      	adds	r7, #24
    4406:	46bd      	mov	sp, r7
    4408:	bd80      	pop	{r7, pc}
    440a:	bf00      	nop
    440c:	0001a5b0 	.word	0x0001a5b0
    4410:	00006241 	.word	0x00006241
    4414:	00008c1d 	.word	0x00008c1d
    4418:	0000404d 	.word	0x0000404d
    441c:	00004159 	.word	0x00004159
    4420:	00008bcd 	.word	0x00008bcd

00004424 <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    4424:	b580      	push	{r7, lr}
    4426:	b084      	sub	sp, #16
    4428:	af00      	add	r7, sp, #0
    442a:	6078      	str	r0, [r7, #4]
    442c:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    442e:	687b      	ldr	r3, [r7, #4]
    4430:	2b00      	cmp	r3, #0
    4432:	bf14      	ite	ne
    4434:	2301      	movne	r3, #1
    4436:	2300      	moveq	r3, #0
    4438:	b2db      	uxtb	r3, r3
    443a:	f240 223b 	movw	r2, #571	; 0x23b
    443e:	4909      	ldr	r1, [pc, #36]	; (4464 <calendar_get_date_time+0x40>)
    4440:	4618      	mov	r0, r3
    4442:	4b09      	ldr	r3, [pc, #36]	; (4468 <calendar_get_date_time+0x44>)
    4444:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    4446:	687b      	ldr	r3, [r7, #4]
    4448:	4618      	mov	r0, r3
    444a:	4b08      	ldr	r3, [pc, #32]	; (446c <calendar_get_date_time+0x48>)
    444c:	4798      	blx	r3
    444e:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    4450:	683a      	ldr	r2, [r7, #0]
    4452:	68f9      	ldr	r1, [r7, #12]
    4454:	6878      	ldr	r0, [r7, #4]
    4456:	4b06      	ldr	r3, [pc, #24]	; (4470 <calendar_get_date_time+0x4c>)
    4458:	4798      	blx	r3

	return ERR_NONE;
    445a:	2300      	movs	r3, #0
}
    445c:	4618      	mov	r0, r3
    445e:	3710      	adds	r7, #16
    4460:	46bd      	mov	sp, r7
    4462:	bd80      	pop	{r7, pc}
    4464:	0001a5b0 	.word	0x0001a5b0
    4468:	00006241 	.word	0x00006241
    446c:	00008c1d 	.word	0x00008c1d
    4470:	0000404d 	.word	0x0000404d

00004474 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    4474:	b580      	push	{r7, lr}
    4476:	b084      	sub	sp, #16
    4478:	af00      	add	r7, sp, #0
    447a:	6078      	str	r0, [r7, #4]
    447c:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    447e:	687b      	ldr	r3, [r7, #4]
    4480:	2b00      	cmp	r3, #0
    4482:	d004      	beq.n	448e <can_async_init+0x1a>
    4484:	683b      	ldr	r3, [r7, #0]
    4486:	2b00      	cmp	r3, #0
    4488:	d001      	beq.n	448e <can_async_init+0x1a>
    448a:	2301      	movs	r3, #1
    448c:	e000      	b.n	4490 <can_async_init+0x1c>
    448e:	2300      	movs	r3, #0
    4490:	f003 0301 	and.w	r3, r3, #1
    4494:	b2db      	uxtb	r3, r3
    4496:	2241      	movs	r2, #65	; 0x41
    4498:	490e      	ldr	r1, [pc, #56]	; (44d4 <can_async_init+0x60>)
    449a:	4618      	mov	r0, r3
    449c:	4b0e      	ldr	r3, [pc, #56]	; (44d8 <can_async_init+0x64>)
    449e:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    44a0:	687b      	ldr	r3, [r7, #4]
    44a2:	6839      	ldr	r1, [r7, #0]
    44a4:	4618      	mov	r0, r3
    44a6:	4b0d      	ldr	r3, [pc, #52]	; (44dc <can_async_init+0x68>)
    44a8:	4798      	blx	r3
    44aa:	60f8      	str	r0, [r7, #12]
	if (rc) {
    44ac:	68fb      	ldr	r3, [r7, #12]
    44ae:	2b00      	cmp	r3, #0
    44b0:	d001      	beq.n	44b6 <can_async_init+0x42>
		return rc;
    44b2:	68fb      	ldr	r3, [r7, #12]
    44b4:	e009      	b.n	44ca <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    44b6:	687b      	ldr	r3, [r7, #4]
    44b8:	4a09      	ldr	r2, [pc, #36]	; (44e0 <can_async_init+0x6c>)
    44ba:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    44bc:	687b      	ldr	r3, [r7, #4]
    44be:	4a09      	ldr	r2, [pc, #36]	; (44e4 <can_async_init+0x70>)
    44c0:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    44c2:	687b      	ldr	r3, [r7, #4]
    44c4:	4a08      	ldr	r2, [pc, #32]	; (44e8 <can_async_init+0x74>)
    44c6:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    44c8:	2300      	movs	r3, #0
}
    44ca:	4618      	mov	r0, r3
    44cc:	3710      	adds	r7, #16
    44ce:	46bd      	mov	sp, r7
    44d0:	bd80      	pop	{r7, pc}
    44d2:	bf00      	nop
    44d4:	0001a5cc 	.word	0x0001a5cc
    44d8:	00006241 	.word	0x00006241
    44dc:	0000679d 	.word	0x0000679d
    44e0:	000044ed 	.word	0x000044ed
    44e4:	00004511 	.word	0x00004511
    44e8:	00004535 	.word	0x00004535

000044ec <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    44ec:	b580      	push	{r7, lr}
    44ee:	b084      	sub	sp, #16
    44f0:	af00      	add	r7, sp, #0
    44f2:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    44f4:	687b      	ldr	r3, [r7, #4]
    44f6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    44f8:	68fb      	ldr	r3, [r7, #12]
    44fa:	69db      	ldr	r3, [r3, #28]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d003      	beq.n	4508 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    4500:	68fb      	ldr	r3, [r7, #12]
    4502:	69db      	ldr	r3, [r3, #28]
    4504:	68f8      	ldr	r0, [r7, #12]
    4506:	4798      	blx	r3
	}
}
    4508:	bf00      	nop
    450a:	3710      	adds	r7, #16
    450c:	46bd      	mov	sp, r7
    450e:	bd80      	pop	{r7, pc}

00004510 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    4510:	b580      	push	{r7, lr}
    4512:	b084      	sub	sp, #16
    4514:	af00      	add	r7, sp, #0
    4516:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4518:	687b      	ldr	r3, [r7, #4]
    451a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    451c:	68fb      	ldr	r3, [r7, #12]
    451e:	6a1b      	ldr	r3, [r3, #32]
    4520:	2b00      	cmp	r3, #0
    4522:	d003      	beq.n	452c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    4524:	68fb      	ldr	r3, [r7, #12]
    4526:	6a1b      	ldr	r3, [r3, #32]
    4528:	68f8      	ldr	r0, [r7, #12]
    452a:	4798      	blx	r3
	}
}
    452c:	bf00      	nop
    452e:	3710      	adds	r7, #16
    4530:	46bd      	mov	sp, r7
    4532:	bd80      	pop	{r7, pc}

00004534 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    4534:	b580      	push	{r7, lr}
    4536:	b084      	sub	sp, #16
    4538:	af00      	add	r7, sp, #0
    453a:	6078      	str	r0, [r7, #4]
    453c:	460b      	mov	r3, r1
    453e:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    4544:	68fb      	ldr	r3, [r7, #12]
    4546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4548:	2b00      	cmp	r3, #0
    454a:	d005      	beq.n	4558 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    454c:	68fb      	ldr	r3, [r7, #12]
    454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4550:	78fa      	ldrb	r2, [r7, #3]
    4552:	4611      	mov	r1, r2
    4554:	68f8      	ldr	r0, [r7, #12]
    4556:	4798      	blx	r3
	}
}
    4558:	bf00      	nop
    455a:	3710      	adds	r7, #16
    455c:	46bd      	mov	sp, r7
    455e:	bd80      	pop	{r7, pc}

00004560 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    4560:	b580      	push	{r7, lr}
    4562:	b082      	sub	sp, #8
    4564:	af00      	add	r7, sp, #0
    4566:	6078      	str	r0, [r7, #4]
    4568:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    456a:	687b      	ldr	r3, [r7, #4]
    456c:	2b00      	cmp	r3, #0
    456e:	d004      	beq.n	457a <crc_sync_init+0x1a>
    4570:	683b      	ldr	r3, [r7, #0]
    4572:	2b00      	cmp	r3, #0
    4574:	d001      	beq.n	457a <crc_sync_init+0x1a>
    4576:	2301      	movs	r3, #1
    4578:	e000      	b.n	457c <crc_sync_init+0x1c>
    457a:	2300      	movs	r3, #0
    457c:	f003 0301 	and.w	r3, r3, #1
    4580:	b2db      	uxtb	r3, r3
    4582:	222b      	movs	r2, #43	; 0x2b
    4584:	4906      	ldr	r1, [pc, #24]	; (45a0 <crc_sync_init+0x40>)
    4586:	4618      	mov	r0, r3
    4588:	4b06      	ldr	r3, [pc, #24]	; (45a4 <crc_sync_init+0x44>)
    458a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    458c:	687b      	ldr	r3, [r7, #4]
    458e:	6839      	ldr	r1, [r7, #0]
    4590:	4618      	mov	r0, r3
    4592:	4b05      	ldr	r3, [pc, #20]	; (45a8 <crc_sync_init+0x48>)
    4594:	4798      	blx	r3
    4596:	4603      	mov	r3, r0
}
    4598:	4618      	mov	r0, r3
    459a:	3708      	adds	r7, #8
    459c:	46bd      	mov	sp, r7
    459e:	bd80      	pop	{r7, pc}
    45a0:	0001a5e8 	.word	0x0001a5e8
    45a4:	00006241 	.word	0x00006241
    45a8:	00006fbd 	.word	0x00006fbd

000045ac <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
    45ac:	b580      	push	{r7, lr}
    45ae:	b082      	sub	sp, #8
    45b0:	af00      	add	r7, sp, #0
    45b2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    45b4:	687b      	ldr	r3, [r7, #4]
    45b6:	2b00      	cmp	r3, #0
    45b8:	bf14      	ite	ne
    45ba:	2301      	movne	r3, #1
    45bc:	2300      	moveq	r3, #0
    45be:	b2db      	uxtb	r3, r3
    45c0:	223f      	movs	r2, #63	; 0x3f
    45c2:	4906      	ldr	r1, [pc, #24]	; (45dc <crc_sync_enable+0x30>)
    45c4:	4618      	mov	r0, r3
    45c6:	4b06      	ldr	r3, [pc, #24]	; (45e0 <crc_sync_enable+0x34>)
    45c8:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
    45ca:	687b      	ldr	r3, [r7, #4]
    45cc:	4618      	mov	r0, r3
    45ce:	4b05      	ldr	r3, [pc, #20]	; (45e4 <crc_sync_enable+0x38>)
    45d0:	4798      	blx	r3
    45d2:	4603      	mov	r3, r0
}
    45d4:	4618      	mov	r0, r3
    45d6:	3708      	adds	r7, #8
    45d8:	46bd      	mov	sp, r7
    45da:	bd80      	pop	{r7, pc}
    45dc:	0001a5e8 	.word	0x0001a5e8
    45e0:	00006241 	.word	0x00006241
    45e4:	00006fdb 	.word	0x00006fdb

000045e8 <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
    45e8:	b590      	push	{r4, r7, lr}
    45ea:	b085      	sub	sp, #20
    45ec:	af00      	add	r7, sp, #0
    45ee:	60f8      	str	r0, [r7, #12]
    45f0:	60b9      	str	r1, [r7, #8]
    45f2:	607a      	str	r2, [r7, #4]
    45f4:	603b      	str	r3, [r7, #0]
	ASSERT(descr && data && len && pcrc);
    45f6:	68fb      	ldr	r3, [r7, #12]
    45f8:	2b00      	cmp	r3, #0
    45fa:	d00a      	beq.n	4612 <crc_sync_crc32+0x2a>
    45fc:	68bb      	ldr	r3, [r7, #8]
    45fe:	2b00      	cmp	r3, #0
    4600:	d007      	beq.n	4612 <crc_sync_crc32+0x2a>
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	2b00      	cmp	r3, #0
    4606:	d004      	beq.n	4612 <crc_sync_crc32+0x2a>
    4608:	683b      	ldr	r3, [r7, #0]
    460a:	2b00      	cmp	r3, #0
    460c:	d001      	beq.n	4612 <crc_sync_crc32+0x2a>
    460e:	2301      	movs	r3, #1
    4610:	e000      	b.n	4614 <crc_sync_crc32+0x2c>
    4612:	2300      	movs	r3, #0
    4614:	f003 0301 	and.w	r3, r3, #1
    4618:	b2db      	uxtb	r3, r3
    461a:	2253      	movs	r2, #83	; 0x53
    461c:	4907      	ldr	r1, [pc, #28]	; (463c <crc_sync_crc32+0x54>)
    461e:	4618      	mov	r0, r3
    4620:	4b07      	ldr	r3, [pc, #28]	; (4640 <crc_sync_crc32+0x58>)
    4622:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
    4624:	68f8      	ldr	r0, [r7, #12]
    4626:	683b      	ldr	r3, [r7, #0]
    4628:	687a      	ldr	r2, [r7, #4]
    462a:	68b9      	ldr	r1, [r7, #8]
    462c:	4c05      	ldr	r4, [pc, #20]	; (4644 <crc_sync_crc32+0x5c>)
    462e:	47a0      	blx	r4
    4630:	4603      	mov	r3, r0
}
    4632:	4618      	mov	r0, r3
    4634:	3714      	adds	r7, #20
    4636:	46bd      	mov	sp, r7
    4638:	bd90      	pop	{r4, r7, pc}
    463a:	bf00      	nop
    463c:	0001a5e8 	.word	0x0001a5e8
    4640:	00006241 	.word	0x00006241
    4644:	00006ff1 	.word	0x00006ff1

00004648 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    4648:	b590      	push	{r4, r7, lr}
    464a:	b083      	sub	sp, #12
    464c:	af00      	add	r7, sp, #0
    464e:	4603      	mov	r3, r0
    4650:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    4652:	4b07      	ldr	r3, [pc, #28]	; (4670 <delay_us+0x28>)
    4654:	681c      	ldr	r4, [r3, #0]
    4656:	88fb      	ldrh	r3, [r7, #6]
    4658:	4618      	mov	r0, r3
    465a:	4b06      	ldr	r3, [pc, #24]	; (4674 <delay_us+0x2c>)
    465c:	4798      	blx	r3
    465e:	4603      	mov	r3, r0
    4660:	4619      	mov	r1, r3
    4662:	4620      	mov	r0, r4
    4664:	4b04      	ldr	r3, [pc, #16]	; (4678 <delay_us+0x30>)
    4666:	4798      	blx	r3
}
    4668:	bf00      	nop
    466a:	370c      	adds	r7, #12
    466c:	46bd      	mov	sp, r7
    466e:	bd90      	pop	{r4, r7, pc}
    4670:	2000229c 	.word	0x2000229c
    4674:	00006be9 	.word	0x00006be9
    4678:	00006d81 	.word	0x00006d81

0000467c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    467c:	b590      	push	{r4, r7, lr}
    467e:	b083      	sub	sp, #12
    4680:	af00      	add	r7, sp, #0
    4682:	4603      	mov	r3, r0
    4684:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    4686:	4b07      	ldr	r3, [pc, #28]	; (46a4 <delay_ms+0x28>)
    4688:	681c      	ldr	r4, [r3, #0]
    468a:	88fb      	ldrh	r3, [r7, #6]
    468c:	4618      	mov	r0, r3
    468e:	4b06      	ldr	r3, [pc, #24]	; (46a8 <delay_ms+0x2c>)
    4690:	4798      	blx	r3
    4692:	4603      	mov	r3, r0
    4694:	4619      	mov	r1, r3
    4696:	4620      	mov	r0, r4
    4698:	4b04      	ldr	r3, [pc, #16]	; (46ac <delay_ms+0x30>)
    469a:	4798      	blx	r3
}
    469c:	bf00      	nop
    469e:	370c      	adds	r7, #12
    46a0:	46bd      	mov	sp, r7
    46a2:	bd90      	pop	{r4, r7, pc}
    46a4:	2000229c 	.word	0x2000229c
    46a8:	00006d55 	.word	0x00006d55
    46ac:	00006d81 	.word	0x00006d81

000046b0 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    46b0:	b580      	push	{r7, lr}
    46b2:	af00      	add	r7, sp, #0
	return _event_system_init();
    46b4:	4b02      	ldr	r3, [pc, #8]	; (46c0 <event_system_init+0x10>)
    46b6:	4798      	blx	r3
    46b8:	4603      	mov	r3, r0
}
    46ba:	4618      	mov	r0, r3
    46bc:	bd80      	pop	{r7, pc}
    46be:	bf00      	nop
    46c0:	000077f9 	.word	0x000077f9

000046c4 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    46c4:	b580      	push	{r7, lr}
    46c6:	b082      	sub	sp, #8
    46c8:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    46ca:	2300      	movs	r3, #0
    46cc:	80fb      	strh	r3, [r7, #6]
    46ce:	e00e      	b.n	46ee <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    46d0:	88fb      	ldrh	r3, [r7, #6]
    46d2:	4a0c      	ldr	r2, [pc, #48]	; (4704 <ext_irq_init+0x40>)
    46d4:	00db      	lsls	r3, r3, #3
    46d6:	4413      	add	r3, r2
    46d8:	f04f 32ff 	mov.w	r2, #4294967295
    46dc:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    46de:	88fb      	ldrh	r3, [r7, #6]
    46e0:	4a08      	ldr	r2, [pc, #32]	; (4704 <ext_irq_init+0x40>)
    46e2:	2100      	movs	r1, #0
    46e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    46e8:	88fb      	ldrh	r3, [r7, #6]
    46ea:	3301      	adds	r3, #1
    46ec:	80fb      	strh	r3, [r7, #6]
    46ee:	88fb      	ldrh	r3, [r7, #6]
    46f0:	2b03      	cmp	r3, #3
    46f2:	d9ed      	bls.n	46d0 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    46f4:	4804      	ldr	r0, [pc, #16]	; (4708 <ext_irq_init+0x44>)
    46f6:	4b05      	ldr	r3, [pc, #20]	; (470c <ext_irq_init+0x48>)
    46f8:	4798      	blx	r3
    46fa:	4603      	mov	r3, r0
}
    46fc:	4618      	mov	r0, r3
    46fe:	3708      	adds	r7, #8
    4700:	46bd      	mov	sp, r7
    4702:	bd80      	pop	{r7, pc}
    4704:	200022a0 	.word	0x200022a0
    4708:	00004869 	.word	0x00004869
    470c:	0000742d 	.word	0x0000742d

00004710 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    4710:	b580      	push	{r7, lr}
    4712:	b086      	sub	sp, #24
    4714:	af00      	add	r7, sp, #0
    4716:	6078      	str	r0, [r7, #4]
    4718:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    471a:	2300      	movs	r3, #0
    471c:	75fb      	strb	r3, [r7, #23]
    471e:	2300      	movs	r3, #0
    4720:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    4722:	2300      	movs	r3, #0
    4724:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    4726:	e012      	b.n	474e <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    4728:	7dfb      	ldrb	r3, [r7, #23]
    472a:	4a4d      	ldr	r2, [pc, #308]	; (4860 <ext_irq_register+0x150>)
    472c:	00db      	lsls	r3, r3, #3
    472e:	4413      	add	r3, r2
    4730:	685a      	ldr	r2, [r3, #4]
    4732:	687b      	ldr	r3, [r7, #4]
    4734:	429a      	cmp	r2, r3
    4736:	d107      	bne.n	4748 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    4738:	7dfb      	ldrb	r3, [r7, #23]
    473a:	4949      	ldr	r1, [pc, #292]	; (4860 <ext_irq_register+0x150>)
    473c:	683a      	ldr	r2, [r7, #0]
    473e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    4742:	2301      	movs	r3, #1
    4744:	757b      	strb	r3, [r7, #21]
			break;
    4746:	e005      	b.n	4754 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    4748:	7dfb      	ldrb	r3, [r7, #23]
    474a:	3301      	adds	r3, #1
    474c:	75fb      	strb	r3, [r7, #23]
    474e:	7dfb      	ldrb	r3, [r7, #23]
    4750:	2b03      	cmp	r3, #3
    4752:	d9e9      	bls.n	4728 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    4754:	683b      	ldr	r3, [r7, #0]
    4756:	2b00      	cmp	r3, #0
    4758:	d10e      	bne.n	4778 <ext_irq_register+0x68>
		if (!found) {
    475a:	7d7b      	ldrb	r3, [r7, #21]
    475c:	f083 0301 	eor.w	r3, r3, #1
    4760:	b2db      	uxtb	r3, r3
    4762:	2b00      	cmp	r3, #0
    4764:	d002      	beq.n	476c <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    4766:	f06f 030c 	mvn.w	r3, #12
    476a:	e074      	b.n	4856 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    476c:	2100      	movs	r1, #0
    476e:	6878      	ldr	r0, [r7, #4]
    4770:	4b3c      	ldr	r3, [pc, #240]	; (4864 <ext_irq_register+0x154>)
    4772:	4798      	blx	r3
    4774:	4603      	mov	r3, r0
    4776:	e06e      	b.n	4856 <ext_irq_register+0x146>
	}

	if (!found) {
    4778:	7d7b      	ldrb	r3, [r7, #21]
    477a:	f083 0301 	eor.w	r3, r3, #1
    477e:	b2db      	uxtb	r3, r3
    4780:	2b00      	cmp	r3, #0
    4782:	d05a      	beq.n	483a <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4784:	2300      	movs	r3, #0
    4786:	75fb      	strb	r3, [r7, #23]
    4788:	e016      	b.n	47b8 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    478a:	7dfb      	ldrb	r3, [r7, #23]
    478c:	4a34      	ldr	r2, [pc, #208]	; (4860 <ext_irq_register+0x150>)
    478e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4792:	2b00      	cmp	r3, #0
    4794:	d10d      	bne.n	47b2 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    4796:	7dfb      	ldrb	r3, [r7, #23]
    4798:	4931      	ldr	r1, [pc, #196]	; (4860 <ext_irq_register+0x150>)
    479a:	683a      	ldr	r2, [r7, #0]
    479c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    47a0:	7dfb      	ldrb	r3, [r7, #23]
    47a2:	4a2f      	ldr	r2, [pc, #188]	; (4860 <ext_irq_register+0x150>)
    47a4:	00db      	lsls	r3, r3, #3
    47a6:	4413      	add	r3, r2
    47a8:	687a      	ldr	r2, [r7, #4]
    47aa:	605a      	str	r2, [r3, #4]
				found           = true;
    47ac:	2301      	movs	r3, #1
    47ae:	757b      	strb	r3, [r7, #21]
				break;
    47b0:	e005      	b.n	47be <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    47b2:	7dfb      	ldrb	r3, [r7, #23]
    47b4:	3301      	adds	r3, #1
    47b6:	75fb      	strb	r3, [r7, #23]
    47b8:	7dfb      	ldrb	r3, [r7, #23]
    47ba:	2b03      	cmp	r3, #3
    47bc:	d9e5      	bls.n	478a <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    47be:	e036      	b.n	482e <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    47c0:	7dfb      	ldrb	r3, [r7, #23]
    47c2:	4a27      	ldr	r2, [pc, #156]	; (4860 <ext_irq_register+0x150>)
    47c4:	00db      	lsls	r3, r3, #3
    47c6:	4413      	add	r3, r2
    47c8:	685a      	ldr	r2, [r3, #4]
    47ca:	7dbb      	ldrb	r3, [r7, #22]
    47cc:	4924      	ldr	r1, [pc, #144]	; (4860 <ext_irq_register+0x150>)
    47ce:	00db      	lsls	r3, r3, #3
    47d0:	440b      	add	r3, r1
    47d2:	685b      	ldr	r3, [r3, #4]
    47d4:	429a      	cmp	r2, r3
    47d6:	d227      	bcs.n	4828 <ext_irq_register+0x118>
    47d8:	7dbb      	ldrb	r3, [r7, #22]
    47da:	4a21      	ldr	r2, [pc, #132]	; (4860 <ext_irq_register+0x150>)
    47dc:	00db      	lsls	r3, r3, #3
    47de:	4413      	add	r3, r2
    47e0:	685b      	ldr	r3, [r3, #4]
    47e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    47e6:	d01f      	beq.n	4828 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    47e8:	7dbb      	ldrb	r3, [r7, #22]
    47ea:	491d      	ldr	r1, [pc, #116]	; (4860 <ext_irq_register+0x150>)
    47ec:	f107 020c 	add.w	r2, r7, #12
    47f0:	00db      	lsls	r3, r3, #3
    47f2:	440b      	add	r3, r1
    47f4:	e893 0003 	ldmia.w	r3, {r0, r1}
    47f8:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    47fc:	7dbb      	ldrb	r3, [r7, #22]
    47fe:	7dfa      	ldrb	r2, [r7, #23]
    4800:	4817      	ldr	r0, [pc, #92]	; (4860 <ext_irq_register+0x150>)
    4802:	4917      	ldr	r1, [pc, #92]	; (4860 <ext_irq_register+0x150>)
    4804:	00db      	lsls	r3, r3, #3
    4806:	4403      	add	r3, r0
    4808:	00d2      	lsls	r2, r2, #3
    480a:	440a      	add	r2, r1
    480c:	e892 0003 	ldmia.w	r2, {r0, r1}
    4810:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    4814:	7dfb      	ldrb	r3, [r7, #23]
    4816:	4a12      	ldr	r2, [pc, #72]	; (4860 <ext_irq_register+0x150>)
    4818:	00db      	lsls	r3, r3, #3
    481a:	4413      	add	r3, r2
    481c:	f107 020c 	add.w	r2, r7, #12
    4820:	e892 0003 	ldmia.w	r2, {r0, r1}
    4824:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    4828:	7dbb      	ldrb	r3, [r7, #22]
    482a:	3301      	adds	r3, #1
    482c:	75bb      	strb	r3, [r7, #22]
    482e:	7dbb      	ldrb	r3, [r7, #22]
    4830:	2b03      	cmp	r3, #3
    4832:	d802      	bhi.n	483a <ext_irq_register+0x12a>
    4834:	7dfb      	ldrb	r3, [r7, #23]
    4836:	2b03      	cmp	r3, #3
    4838:	d9c2      	bls.n	47c0 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    483a:	7d7b      	ldrb	r3, [r7, #21]
    483c:	f083 0301 	eor.w	r3, r3, #1
    4840:	b2db      	uxtb	r3, r3
    4842:	2b00      	cmp	r3, #0
    4844:	d002      	beq.n	484c <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    4846:	f06f 030c 	mvn.w	r3, #12
    484a:	e004      	b.n	4856 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    484c:	2101      	movs	r1, #1
    484e:	6878      	ldr	r0, [r7, #4]
    4850:	4b04      	ldr	r3, [pc, #16]	; (4864 <ext_irq_register+0x154>)
    4852:	4798      	blx	r3
    4854:	4603      	mov	r3, r0
}
    4856:	4618      	mov	r0, r3
    4858:	3718      	adds	r7, #24
    485a:	46bd      	mov	sp, r7
    485c:	bd80      	pop	{r7, pc}
    485e:	bf00      	nop
    4860:	200022a0 	.word	0x200022a0
    4864:	00007561 	.word	0x00007561

00004868 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    4868:	b580      	push	{r7, lr}
    486a:	b084      	sub	sp, #16
    486c:	af00      	add	r7, sp, #0
    486e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4870:	2300      	movs	r3, #0
    4872:	73fb      	strb	r3, [r7, #15]
    4874:	2304      	movs	r3, #4
    4876:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    4878:	e02a      	b.n	48d0 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    487a:	7bba      	ldrb	r2, [r7, #14]
    487c:	7bfb      	ldrb	r3, [r7, #15]
    487e:	4413      	add	r3, r2
    4880:	105b      	asrs	r3, r3, #1
    4882:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    4884:	7b7b      	ldrb	r3, [r7, #13]
    4886:	2b03      	cmp	r3, #3
    4888:	d827      	bhi.n	48da <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    488a:	7b7b      	ldrb	r3, [r7, #13]
    488c:	4a16      	ldr	r2, [pc, #88]	; (48e8 <process_ext_irq+0x80>)
    488e:	00db      	lsls	r3, r3, #3
    4890:	4413      	add	r3, r2
    4892:	685a      	ldr	r2, [r3, #4]
    4894:	687b      	ldr	r3, [r7, #4]
    4896:	429a      	cmp	r2, r3
    4898:	d10b      	bne.n	48b2 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    489a:	7b7b      	ldrb	r3, [r7, #13]
    489c:	4a12      	ldr	r2, [pc, #72]	; (48e8 <process_ext_irq+0x80>)
    489e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    48a2:	2b00      	cmp	r3, #0
    48a4:	d01b      	beq.n	48de <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    48a6:	7b7b      	ldrb	r3, [r7, #13]
    48a8:	4a0f      	ldr	r2, [pc, #60]	; (48e8 <process_ext_irq+0x80>)
    48aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    48ae:	4798      	blx	r3
			}
			return;
    48b0:	e015      	b.n	48de <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    48b2:	7b7b      	ldrb	r3, [r7, #13]
    48b4:	4a0c      	ldr	r2, [pc, #48]	; (48e8 <process_ext_irq+0x80>)
    48b6:	00db      	lsls	r3, r3, #3
    48b8:	4413      	add	r3, r2
    48ba:	685a      	ldr	r2, [r3, #4]
    48bc:	687b      	ldr	r3, [r7, #4]
    48be:	429a      	cmp	r2, r3
    48c0:	d203      	bcs.n	48ca <process_ext_irq+0x62>
			lower = middle + 1;
    48c2:	7b7b      	ldrb	r3, [r7, #13]
    48c4:	3301      	adds	r3, #1
    48c6:	73fb      	strb	r3, [r7, #15]
    48c8:	e002      	b.n	48d0 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    48ca:	7b7b      	ldrb	r3, [r7, #13]
    48cc:	3b01      	subs	r3, #1
    48ce:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    48d0:	7bba      	ldrb	r2, [r7, #14]
    48d2:	7bfb      	ldrb	r3, [r7, #15]
    48d4:	429a      	cmp	r2, r3
    48d6:	d2d0      	bcs.n	487a <process_ext_irq+0x12>
    48d8:	e002      	b.n	48e0 <process_ext_irq+0x78>
			return;
    48da:	bf00      	nop
    48dc:	e000      	b.n	48e0 <process_ext_irq+0x78>
			return;
    48de:	bf00      	nop
		}
	}
}
    48e0:	3710      	adds	r7, #16
    48e2:	46bd      	mov	sp, r7
    48e4:	bd80      	pop	{r7, pc}
    48e6:	bf00      	nop
    48e8:	200022a0 	.word	0x200022a0

000048ec <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    48ec:	b580      	push	{r7, lr}
    48ee:	b084      	sub	sp, #16
    48f0:	af00      	add	r7, sp, #0
    48f2:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    48f8:	687b      	ldr	r3, [r7, #4]
    48fa:	885b      	ldrh	r3, [r3, #2]
    48fc:	b29b      	uxth	r3, r3
    48fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4902:	2b00      	cmp	r3, #0
    4904:	d107      	bne.n	4916 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    4906:	68fb      	ldr	r3, [r7, #12]
    4908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    490a:	2b00      	cmp	r3, #0
    490c:	d003      	beq.n	4916 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    490e:	68fb      	ldr	r3, [r7, #12]
    4910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4912:	68f8      	ldr	r0, [r7, #12]
    4914:	4798      	blx	r3
		}
	}
}
    4916:	bf00      	nop
    4918:	3710      	adds	r7, #16
    491a:	46bd      	mov	sp, r7
    491c:	bd80      	pop	{r7, pc}

0000491e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    491e:	b580      	push	{r7, lr}
    4920:	b084      	sub	sp, #16
    4922:	af00      	add	r7, sp, #0
    4924:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    4926:	687b      	ldr	r3, [r7, #4]
    4928:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    492a:	687b      	ldr	r3, [r7, #4]
    492c:	885b      	ldrh	r3, [r3, #2]
    492e:	b29b      	uxth	r3, r3
    4930:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4934:	2b00      	cmp	r3, #0
    4936:	d107      	bne.n	4948 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    4938:	68fb      	ldr	r3, [r7, #12]
    493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    493c:	2b00      	cmp	r3, #0
    493e:	d003      	beq.n	4948 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    4940:	68fb      	ldr	r3, [r7, #12]
    4942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4944:	68f8      	ldr	r0, [r7, #12]
    4946:	4798      	blx	r3
		}
	}
}
    4948:	bf00      	nop
    494a:	3710      	adds	r7, #16
    494c:	46bd      	mov	sp, r7
    494e:	bd80      	pop	{r7, pc}

00004950 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    4950:	b580      	push	{r7, lr}
    4952:	b084      	sub	sp, #16
    4954:	af00      	add	r7, sp, #0
    4956:	6078      	str	r0, [r7, #4]
    4958:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    495a:	687b      	ldr	r3, [r7, #4]
    495c:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    495e:	687b      	ldr	r3, [r7, #4]
    4960:	885b      	ldrh	r3, [r3, #2]
    4962:	b29b      	uxth	r3, r3
    4964:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4968:	2b00      	cmp	r3, #0
    496a:	d108      	bne.n	497e <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    496c:	68fb      	ldr	r3, [r7, #12]
    496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4970:	2b00      	cmp	r3, #0
    4972:	d004      	beq.n	497e <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    4974:	68fb      	ldr	r3, [r7, #12]
    4976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4978:	6839      	ldr	r1, [r7, #0]
    497a:	68f8      	ldr	r0, [r7, #12]
    497c:	4798      	blx	r3
		}
	}
}
    497e:	bf00      	nop
    4980:	3710      	adds	r7, #16
    4982:	46bd      	mov	sp, r7
    4984:	bd80      	pop	{r7, pc}
	...

00004988 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    4988:	b580      	push	{r7, lr}
    498a:	b08a      	sub	sp, #40	; 0x28
    498c:	af00      	add	r7, sp, #0
    498e:	60f8      	str	r0, [r7, #12]
    4990:	60b9      	str	r1, [r7, #8]
    4992:	4613      	mov	r3, r2
    4994:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    4996:	68fb      	ldr	r3, [r7, #12]
    4998:	3b28      	subs	r3, #40	; 0x28
    499a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    499e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    49a0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    49a2:	88fb      	ldrh	r3, [r7, #6]
    49a4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    49a6:	f248 0301 	movw	r3, #32769	; 0x8001
    49aa:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    49ac:	68bb      	ldr	r3, [r7, #8]
    49ae:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    49b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49b2:	f107 0214 	add.w	r2, r7, #20
    49b6:	4611      	mov	r1, r2
    49b8:	4618      	mov	r0, r3
    49ba:	4b06      	ldr	r3, [pc, #24]	; (49d4 <i2c_m_async_read+0x4c>)
    49bc:	4798      	blx	r3
    49be:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    49c0:	6a3b      	ldr	r3, [r7, #32]
    49c2:	2b00      	cmp	r3, #0
    49c4:	d001      	beq.n	49ca <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    49c6:	6a3b      	ldr	r3, [r7, #32]
    49c8:	e000      	b.n	49cc <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    49ca:	88fb      	ldrh	r3, [r7, #6]
}
    49cc:	4618      	mov	r0, r3
    49ce:	3728      	adds	r7, #40	; 0x28
    49d0:	46bd      	mov	sp, r7
    49d2:	bd80      	pop	{r7, pc}
    49d4:	00009bc5 	.word	0x00009bc5

000049d8 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    49d8:	b580      	push	{r7, lr}
    49da:	b08a      	sub	sp, #40	; 0x28
    49dc:	af00      	add	r7, sp, #0
    49de:	60f8      	str	r0, [r7, #12]
    49e0:	60b9      	str	r1, [r7, #8]
    49e2:	4613      	mov	r3, r2
    49e4:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    49e6:	68fb      	ldr	r3, [r7, #12]
    49e8:	3b28      	subs	r3, #40	; 0x28
    49ea:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    49ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49ee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    49f0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    49f2:	88fb      	ldrh	r3, [r7, #6]
    49f4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    49f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    49fa:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    49fc:	68bb      	ldr	r3, [r7, #8]
    49fe:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a02:	f107 0214 	add.w	r2, r7, #20
    4a06:	4611      	mov	r1, r2
    4a08:	4618      	mov	r0, r3
    4a0a:	4b06      	ldr	r3, [pc, #24]	; (4a24 <i2c_m_async_write+0x4c>)
    4a0c:	4798      	blx	r3
    4a0e:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    4a10:	6a3b      	ldr	r3, [r7, #32]
    4a12:	2b00      	cmp	r3, #0
    4a14:	d001      	beq.n	4a1a <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    4a16:	6a3b      	ldr	r3, [r7, #32]
    4a18:	e000      	b.n	4a1c <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    4a1a:	88fb      	ldrh	r3, [r7, #6]
}
    4a1c:	4618      	mov	r0, r3
    4a1e:	3728      	adds	r7, #40	; 0x28
    4a20:	46bd      	mov	sp, r7
    4a22:	bd80      	pop	{r7, pc}
    4a24:	00009bc5 	.word	0x00009bc5

00004a28 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    4a28:	b580      	push	{r7, lr}
    4a2a:	b084      	sub	sp, #16
    4a2c:	af00      	add	r7, sp, #0
    4a2e:	6078      	str	r0, [r7, #4]
    4a30:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    4a32:	687b      	ldr	r3, [r7, #4]
    4a34:	2b00      	cmp	r3, #0
    4a36:	bf14      	ite	ne
    4a38:	2301      	movne	r3, #1
    4a3a:	2300      	moveq	r3, #0
    4a3c:	b2db      	uxtb	r3, r3
    4a3e:	2289      	movs	r2, #137	; 0x89
    4a40:	4915      	ldr	r1, [pc, #84]	; (4a98 <i2c_m_async_init+0x70>)
    4a42:	4618      	mov	r0, r3
    4a44:	4b15      	ldr	r3, [pc, #84]	; (4a9c <i2c_m_async_init+0x74>)
    4a46:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4a48:	687b      	ldr	r3, [r7, #4]
    4a4a:	6839      	ldr	r1, [r7, #0]
    4a4c:	4618      	mov	r0, r3
    4a4e:	4b14      	ldr	r3, [pc, #80]	; (4aa0 <i2c_m_async_init+0x78>)
    4a50:	4798      	blx	r3
    4a52:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    4a54:	68fb      	ldr	r3, [r7, #12]
    4a56:	2b00      	cmp	r3, #0
    4a58:	d001      	beq.n	4a5e <i2c_m_async_init+0x36>
		return init_status;
    4a5a:	68fb      	ldr	r3, [r7, #12]
    4a5c:	e018      	b.n	4a90 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    4a5e:	687b      	ldr	r3, [r7, #4]
    4a60:	4a10      	ldr	r2, [pc, #64]	; (4aa4 <i2c_m_async_init+0x7c>)
    4a62:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4a64:	687b      	ldr	r3, [r7, #4]
    4a66:	4a10      	ldr	r2, [pc, #64]	; (4aa8 <i2c_m_async_init+0x80>)
    4a68:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4a6a:	687b      	ldr	r3, [r7, #4]
    4a6c:	4a0f      	ldr	r2, [pc, #60]	; (4aac <i2c_m_async_init+0x84>)
    4a6e:	2101      	movs	r1, #1
    4a70:	4618      	mov	r0, r3
    4a72:	4b0f      	ldr	r3, [pc, #60]	; (4ab0 <i2c_m_async_init+0x88>)
    4a74:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    4a76:	687b      	ldr	r3, [r7, #4]
    4a78:	4a0e      	ldr	r2, [pc, #56]	; (4ab4 <i2c_m_async_init+0x8c>)
    4a7a:	2102      	movs	r1, #2
    4a7c:	4618      	mov	r0, r3
    4a7e:	4b0c      	ldr	r3, [pc, #48]	; (4ab0 <i2c_m_async_init+0x88>)
    4a80:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    4a82:	687b      	ldr	r3, [r7, #4]
    4a84:	4a0c      	ldr	r2, [pc, #48]	; (4ab8 <i2c_m_async_init+0x90>)
    4a86:	2100      	movs	r1, #0
    4a88:	4618      	mov	r0, r3
    4a8a:	4b09      	ldr	r3, [pc, #36]	; (4ab0 <i2c_m_async_init+0x88>)
    4a8c:	4798      	blx	r3

	return ERR_NONE;
    4a8e:	2300      	movs	r3, #0
}
    4a90:	4618      	mov	r0, r3
    4a92:	3710      	adds	r7, #16
    4a94:	46bd      	mov	sp, r7
    4a96:	bd80      	pop	{r7, pc}
    4a98:	0001a604 	.word	0x0001a604
    4a9c:	00006241 	.word	0x00006241
    4aa0:	00009a15 	.word	0x00009a15
    4aa4:	00004989 	.word	0x00004989
    4aa8:	000049d9 	.word	0x000049d9
    4aac:	000048ed 	.word	0x000048ed
    4ab0:	00009c99 	.word	0x00009c99
    4ab4:	0000491f 	.word	0x0000491f
    4ab8:	00004951 	.word	0x00004951

00004abc <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    4abc:	b580      	push	{r7, lr}
    4abe:	b084      	sub	sp, #16
    4ac0:	af00      	add	r7, sp, #0
    4ac2:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    4ac4:	687b      	ldr	r3, [r7, #4]
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	bf14      	ite	ne
    4aca:	2301      	movne	r3, #1
    4acc:	2300      	moveq	r3, #0
    4ace:	b2db      	uxtb	r3, r3
    4ad0:	22b9      	movs	r2, #185	; 0xb9
    4ad2:	4911      	ldr	r1, [pc, #68]	; (4b18 <i2c_m_async_enable+0x5c>)
    4ad4:	4618      	mov	r0, r3
    4ad6:	4b11      	ldr	r3, [pc, #68]	; (4b1c <i2c_m_async_enable+0x60>)
    4ad8:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    4ada:	687b      	ldr	r3, [r7, #4]
    4adc:	4618      	mov	r0, r3
    4ade:	4b10      	ldr	r3, [pc, #64]	; (4b20 <i2c_m_async_enable+0x64>)
    4ae0:	4798      	blx	r3
    4ae2:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    4ae4:	68fb      	ldr	r3, [r7, #12]
    4ae6:	2b00      	cmp	r3, #0
    4ae8:	d111      	bne.n	4b0e <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    4aea:	687b      	ldr	r3, [r7, #4]
    4aec:	2201      	movs	r2, #1
    4aee:	2101      	movs	r1, #1
    4af0:	4618      	mov	r0, r3
    4af2:	4b0c      	ldr	r3, [pc, #48]	; (4b24 <i2c_m_async_enable+0x68>)
    4af4:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    4af6:	687b      	ldr	r3, [r7, #4]
    4af8:	2201      	movs	r2, #1
    4afa:	2102      	movs	r1, #2
    4afc:	4618      	mov	r0, r3
    4afe:	4b09      	ldr	r3, [pc, #36]	; (4b24 <i2c_m_async_enable+0x68>)
    4b00:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    4b02:	687b      	ldr	r3, [r7, #4]
    4b04:	2201      	movs	r2, #1
    4b06:	2100      	movs	r1, #0
    4b08:	4618      	mov	r0, r3
    4b0a:	4b06      	ldr	r3, [pc, #24]	; (4b24 <i2c_m_async_enable+0x68>)
    4b0c:	4798      	blx	r3
	}
	return rc;
    4b0e:	68fb      	ldr	r3, [r7, #12]
}
    4b10:	4618      	mov	r0, r3
    4b12:	3710      	adds	r7, #16
    4b14:	46bd      	mov	sp, r7
    4b16:	bd80      	pop	{r7, pc}
    4b18:	0001a604 	.word	0x0001a604
    4b1c:	00006241 	.word	0x00006241
    4b20:	000099b1 	.word	0x000099b1
    4b24:	00009cdd 	.word	0x00009cdd

00004b28 <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    4b28:	b480      	push	{r7}
    4b2a:	b085      	sub	sp, #20
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	60f8      	str	r0, [r7, #12]
    4b30:	460b      	mov	r3, r1
    4b32:	607a      	str	r2, [r7, #4]
    4b34:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    4b36:	897b      	ldrh	r3, [r7, #10]
    4b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
    4b3c:	b21a      	sxth	r2, r3
    4b3e:	687b      	ldr	r3, [r7, #4]
    4b40:	b21b      	sxth	r3, r3
    4b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4b46:	b21b      	sxth	r3, r3
    4b48:	4313      	orrs	r3, r2
    4b4a:	b21b      	sxth	r3, r3
    4b4c:	b29a      	uxth	r2, r3
    4b4e:	68fb      	ldr	r3, [r7, #12]
    4b50:	879a      	strh	r2, [r3, #60]	; 0x3c
    4b52:	68fb      	ldr	r3, [r7, #12]
    4b54:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    4b56:	4618      	mov	r0, r3
    4b58:	3714      	adds	r7, #20
    4b5a:	46bd      	mov	sp, r7
    4b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b60:	4770      	bx	lr

00004b62 <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    4b62:	b480      	push	{r7}
    4b64:	b085      	sub	sp, #20
    4b66:	af00      	add	r7, sp, #0
    4b68:	60f8      	str	r0, [r7, #12]
    4b6a:	460b      	mov	r3, r1
    4b6c:	607a      	str	r2, [r7, #4]
    4b6e:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    4b70:	7afb      	ldrb	r3, [r7, #11]
    4b72:	2b01      	cmp	r3, #1
    4b74:	d007      	beq.n	4b86 <i2c_m_async_register_callback+0x24>
    4b76:	2b02      	cmp	r3, #2
    4b78:	d009      	beq.n	4b8e <i2c_m_async_register_callback+0x2c>
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	d10b      	bne.n	4b96 <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    4b7e:	68fb      	ldr	r3, [r7, #12]
    4b80:	687a      	ldr	r2, [r7, #4]
    4b82:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    4b84:	e00a      	b.n	4b9c <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    4b86:	68fb      	ldr	r3, [r7, #12]
    4b88:	687a      	ldr	r2, [r7, #4]
    4b8a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    4b8c:	e006      	b.n	4b9c <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    4b8e:	68fb      	ldr	r3, [r7, #12]
    4b90:	687a      	ldr	r2, [r7, #4]
    4b92:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    4b94:	e002      	b.n	4b9c <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    4b96:	f06f 030c 	mvn.w	r3, #12
    4b9a:	e000      	b.n	4b9e <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    4b9c:	2300      	movs	r3, #0
}
    4b9e:	4618      	mov	r0, r3
    4ba0:	3714      	adds	r7, #20
    4ba2:	46bd      	mov	sp, r7
    4ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ba8:	4770      	bx	lr

00004baa <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    4baa:	b480      	push	{r7}
    4bac:	b083      	sub	sp, #12
    4bae:	af00      	add	r7, sp, #0
    4bb0:	6078      	str	r0, [r7, #4]
    4bb2:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    4bb4:	687b      	ldr	r3, [r7, #4]
    4bb6:	f103 0228 	add.w	r2, r3, #40	; 0x28
    4bba:	683b      	ldr	r3, [r7, #0]
    4bbc:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    4bbe:	2300      	movs	r3, #0
}
    4bc0:	4618      	mov	r0, r3
    4bc2:	370c      	adds	r7, #12
    4bc4:	46bd      	mov	sp, r7
    4bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bca:	4770      	bx	lr

00004bcc <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    4bcc:	b580      	push	{r7, lr}
    4bce:	b084      	sub	sp, #16
    4bd0:	af00      	add	r7, sp, #0
    4bd2:	60f8      	str	r0, [r7, #12]
    4bd4:	60b9      	str	r1, [r7, #8]
    4bd6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    4bd8:	68fb      	ldr	r3, [r7, #12]
    4bda:	2b00      	cmp	r3, #0
    4bdc:	d004      	beq.n	4be8 <pwm_init+0x1c>
    4bde:	68bb      	ldr	r3, [r7, #8]
    4be0:	2b00      	cmp	r3, #0
    4be2:	d001      	beq.n	4be8 <pwm_init+0x1c>
    4be4:	2301      	movs	r3, #1
    4be6:	e000      	b.n	4bea <pwm_init+0x1e>
    4be8:	2300      	movs	r3, #0
    4bea:	f003 0301 	and.w	r3, r3, #1
    4bee:	b2db      	uxtb	r3, r3
    4bf0:	2233      	movs	r2, #51	; 0x33
    4bf2:	490a      	ldr	r1, [pc, #40]	; (4c1c <pwm_init+0x50>)
    4bf4:	4618      	mov	r0, r3
    4bf6:	4b0a      	ldr	r3, [pc, #40]	; (4c20 <pwm_init+0x54>)
    4bf8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    4bfa:	68fb      	ldr	r3, [r7, #12]
    4bfc:	68b9      	ldr	r1, [r7, #8]
    4bfe:	4618      	mov	r0, r3
    4c00:	4b08      	ldr	r3, [pc, #32]	; (4c24 <pwm_init+0x58>)
    4c02:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    4c04:	68fb      	ldr	r3, [r7, #12]
    4c06:	4a08      	ldr	r2, [pc, #32]	; (4c28 <pwm_init+0x5c>)
    4c08:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    4c0a:	68fb      	ldr	r3, [r7, #12]
    4c0c:	4a07      	ldr	r2, [pc, #28]	; (4c2c <pwm_init+0x60>)
    4c0e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    4c10:	2300      	movs	r3, #0
}
    4c12:	4618      	mov	r0, r3
    4c14:	3710      	adds	r7, #16
    4c16:	46bd      	mov	sp, r7
    4c18:	bd80      	pop	{r7, pc}
    4c1a:	bf00      	nop
    4c1c:	0001a624 	.word	0x0001a624
    4c20:	00006241 	.word	0x00006241
    4c24:	0000b0e9 	.word	0x0000b0e9
    4c28:	00004c85 	.word	0x00004c85
    4c2c:	00004ca9 	.word	0x00004ca9

00004c30 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    4c30:	b580      	push	{r7, lr}
    4c32:	b082      	sub	sp, #8
    4c34:	af00      	add	r7, sp, #0
    4c36:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    4c38:	687b      	ldr	r3, [r7, #4]
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	bf14      	ite	ne
    4c3e:	2301      	movne	r3, #1
    4c40:	2300      	moveq	r3, #0
    4c42:	b2db      	uxtb	r3, r3
    4c44:	224a      	movs	r2, #74	; 0x4a
    4c46:	490b      	ldr	r1, [pc, #44]	; (4c74 <pwm_enable+0x44>)
    4c48:	4618      	mov	r0, r3
    4c4a:	4b0b      	ldr	r3, [pc, #44]	; (4c78 <pwm_enable+0x48>)
    4c4c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    4c4e:	687b      	ldr	r3, [r7, #4]
    4c50:	4618      	mov	r0, r3
    4c52:	4b0a      	ldr	r3, [pc, #40]	; (4c7c <pwm_enable+0x4c>)
    4c54:	4798      	blx	r3
    4c56:	4603      	mov	r3, r0
    4c58:	2b00      	cmp	r3, #0
    4c5a:	d002      	beq.n	4c62 <pwm_enable+0x32>
		return ERR_DENIED;
    4c5c:	f06f 0310 	mvn.w	r3, #16
    4c60:	e004      	b.n	4c6c <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    4c62:	687b      	ldr	r3, [r7, #4]
    4c64:	4618      	mov	r0, r3
    4c66:	4b06      	ldr	r3, [pc, #24]	; (4c80 <pwm_enable+0x50>)
    4c68:	4798      	blx	r3

	return ERR_NONE;
    4c6a:	2300      	movs	r3, #0
}
    4c6c:	4618      	mov	r0, r3
    4c6e:	3708      	adds	r7, #8
    4c70:	46bd      	mov	sp, r7
    4c72:	bd80      	pop	{r7, pc}
    4c74:	0001a624 	.word	0x0001a624
    4c78:	00006241 	.word	0x00006241
    4c7c:	0000b3f5 	.word	0x0000b3f5
    4c80:	0000b325 	.word	0x0000b325

00004c84 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    4c84:	b580      	push	{r7, lr}
    4c86:	b084      	sub	sp, #16
    4c88:	af00      	add	r7, sp, #0
    4c8a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    4c8c:	687b      	ldr	r3, [r7, #4]
    4c8e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    4c90:	68fb      	ldr	r3, [r7, #12]
    4c92:	695b      	ldr	r3, [r3, #20]
    4c94:	2b00      	cmp	r3, #0
    4c96:	d003      	beq.n	4ca0 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    4c98:	68fb      	ldr	r3, [r7, #12]
    4c9a:	695b      	ldr	r3, [r3, #20]
    4c9c:	68f8      	ldr	r0, [r7, #12]
    4c9e:	4798      	blx	r3
	}
}
    4ca0:	bf00      	nop
    4ca2:	3710      	adds	r7, #16
    4ca4:	46bd      	mov	sp, r7
    4ca6:	bd80      	pop	{r7, pc}

00004ca8 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    4ca8:	b580      	push	{r7, lr}
    4caa:	b084      	sub	sp, #16
    4cac:	af00      	add	r7, sp, #0
    4cae:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    4cb0:	687b      	ldr	r3, [r7, #4]
    4cb2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    4cb4:	68fb      	ldr	r3, [r7, #12]
    4cb6:	699b      	ldr	r3, [r3, #24]
    4cb8:	2b00      	cmp	r3, #0
    4cba:	d003      	beq.n	4cc4 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    4cbc:	68fb      	ldr	r3, [r7, #12]
    4cbe:	699b      	ldr	r3, [r3, #24]
    4cc0:	68f8      	ldr	r0, [r7, #12]
    4cc2:	4798      	blx	r3
	}
}
    4cc4:	bf00      	nop
    4cc6:	3710      	adds	r7, #16
    4cc8:	46bd      	mov	sp, r7
    4cca:	bd80      	pop	{r7, pc}

00004ccc <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    4ccc:	b580      	push	{r7, lr}
    4cce:	b082      	sub	sp, #8
    4cd0:	af00      	add	r7, sp, #0
    4cd2:	6078      	str	r0, [r7, #4]
    4cd4:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    4cd6:	687b      	ldr	r3, [r7, #4]
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d004      	beq.n	4ce6 <qspi_sync_init+0x1a>
    4cdc:	683b      	ldr	r3, [r7, #0]
    4cde:	2b00      	cmp	r3, #0
    4ce0:	d001      	beq.n	4ce6 <qspi_sync_init+0x1a>
    4ce2:	2301      	movs	r3, #1
    4ce4:	e000      	b.n	4ce8 <qspi_sync_init+0x1c>
    4ce6:	2300      	movs	r3, #0
    4ce8:	f003 0301 	and.w	r3, r3, #1
    4cec:	b2db      	uxtb	r3, r3
    4cee:	2231      	movs	r2, #49	; 0x31
    4cf0:	4906      	ldr	r1, [pc, #24]	; (4d0c <qspi_sync_init+0x40>)
    4cf2:	4618      	mov	r0, r3
    4cf4:	4b06      	ldr	r3, [pc, #24]	; (4d10 <qspi_sync_init+0x44>)
    4cf6:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    4cf8:	687b      	ldr	r3, [r7, #4]
    4cfa:	6839      	ldr	r1, [r7, #0]
    4cfc:	4618      	mov	r0, r3
    4cfe:	4b05      	ldr	r3, [pc, #20]	; (4d14 <qspi_sync_init+0x48>)
    4d00:	4798      	blx	r3
    4d02:	4603      	mov	r3, r0
}
    4d04:	4618      	mov	r0, r3
    4d06:	3708      	adds	r7, #8
    4d08:	46bd      	mov	sp, r7
    4d0a:	bd80      	pop	{r7, pc}
    4d0c:	0001a63c 	.word	0x0001a63c
    4d10:	00006241 	.word	0x00006241
    4d14:	00008685 	.word	0x00008685

00004d18 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    4d18:	b580      	push	{r7, lr}
    4d1a:	b082      	sub	sp, #8
    4d1c:	af00      	add	r7, sp, #0
    4d1e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4d20:	687b      	ldr	r3, [r7, #4]
    4d22:	2b00      	cmp	r3, #0
    4d24:	bf14      	ite	ne
    4d26:	2301      	movne	r3, #1
    4d28:	2300      	moveq	r3, #0
    4d2a:	b2db      	uxtb	r3, r3
    4d2c:	223f      	movs	r2, #63	; 0x3f
    4d2e:	4906      	ldr	r1, [pc, #24]	; (4d48 <qspi_sync_enable+0x30>)
    4d30:	4618      	mov	r0, r3
    4d32:	4b06      	ldr	r3, [pc, #24]	; (4d4c <qspi_sync_enable+0x34>)
    4d34:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    4d36:	687b      	ldr	r3, [r7, #4]
    4d38:	4618      	mov	r0, r3
    4d3a:	4b05      	ldr	r3, [pc, #20]	; (4d50 <qspi_sync_enable+0x38>)
    4d3c:	4798      	blx	r3
    4d3e:	4603      	mov	r3, r0
}
    4d40:	4618      	mov	r0, r3
    4d42:	3708      	adds	r7, #8
    4d44:	46bd      	mov	sp, r7
    4d46:	bd80      	pop	{r7, pc}
    4d48:	0001a63c 	.word	0x0001a63c
    4d4c:	00006241 	.word	0x00006241
    4d50:	000086f9 	.word	0x000086f9

00004d54 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    4d54:	b580      	push	{r7, lr}
    4d56:	b082      	sub	sp, #8
    4d58:	af00      	add	r7, sp, #0
    4d5a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4d5c:	687b      	ldr	r3, [r7, #4]
    4d5e:	2b00      	cmp	r3, #0
    4d60:	bf14      	ite	ne
    4d62:	2301      	movne	r3, #1
    4d64:	2300      	moveq	r3, #0
    4d66:	b2db      	uxtb	r3, r3
    4d68:	2246      	movs	r2, #70	; 0x46
    4d6a:	4906      	ldr	r1, [pc, #24]	; (4d84 <qspi_sync_disable+0x30>)
    4d6c:	4618      	mov	r0, r3
    4d6e:	4b06      	ldr	r3, [pc, #24]	; (4d88 <qspi_sync_disable+0x34>)
    4d70:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	4618      	mov	r0, r3
    4d76:	4b05      	ldr	r3, [pc, #20]	; (4d8c <qspi_sync_disable+0x38>)
    4d78:	4798      	blx	r3
    4d7a:	4603      	mov	r3, r0
}
    4d7c:	4618      	mov	r0, r3
    4d7e:	3708      	adds	r7, #8
    4d80:	46bd      	mov	sp, r7
    4d82:	bd80      	pop	{r7, pc}
    4d84:	0001a63c 	.word	0x0001a63c
    4d88:	00006241 	.word	0x00006241
    4d8c:	0000871d 	.word	0x0000871d

00004d90 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    4d90:	b580      	push	{r7, lr}
    4d92:	b082      	sub	sp, #8
    4d94:	af00      	add	r7, sp, #0
    4d96:	6078      	str	r0, [r7, #4]
    4d98:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    4d9a:	687b      	ldr	r3, [r7, #4]
    4d9c:	2b00      	cmp	r3, #0
    4d9e:	d004      	beq.n	4daa <qspi_sync_serial_run_command+0x1a>
    4da0:	683b      	ldr	r3, [r7, #0]
    4da2:	2b00      	cmp	r3, #0
    4da4:	d001      	beq.n	4daa <qspi_sync_serial_run_command+0x1a>
    4da6:	2301      	movs	r3, #1
    4da8:	e000      	b.n	4dac <qspi_sync_serial_run_command+0x1c>
    4daa:	2300      	movs	r3, #0
    4dac:	f003 0301 	and.w	r3, r3, #1
    4db0:	b2db      	uxtb	r3, r3
    4db2:	224d      	movs	r2, #77	; 0x4d
    4db4:	4906      	ldr	r1, [pc, #24]	; (4dd0 <qspi_sync_serial_run_command+0x40>)
    4db6:	4618      	mov	r0, r3
    4db8:	4b06      	ldr	r3, [pc, #24]	; (4dd4 <qspi_sync_serial_run_command+0x44>)
    4dba:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    4dbc:	687b      	ldr	r3, [r7, #4]
    4dbe:	6839      	ldr	r1, [r7, #0]
    4dc0:	4618      	mov	r0, r3
    4dc2:	4b05      	ldr	r3, [pc, #20]	; (4dd8 <qspi_sync_serial_run_command+0x48>)
    4dc4:	4798      	blx	r3
    4dc6:	4603      	mov	r3, r0
}
    4dc8:	4618      	mov	r0, r3
    4dca:	3708      	adds	r7, #8
    4dcc:	46bd      	mov	sp, r7
    4dce:	bd80      	pop	{r7, pc}
    4dd0:	0001a63c 	.word	0x0001a63c
    4dd4:	00006241 	.word	0x00006241
    4dd8:	00008869 	.word	0x00008869

00004ddc <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    4ddc:	b580      	push	{r7, lr}
    4dde:	b084      	sub	sp, #16
    4de0:	af00      	add	r7, sp, #0
    4de2:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4de4:	687b      	ldr	r3, [r7, #4]
    4de6:	3b04      	subs	r3, #4
    4de8:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    4dea:	687b      	ldr	r3, [r7, #4]
    4dec:	791b      	ldrb	r3, [r3, #4]
    4dee:	2b01      	cmp	r3, #1
    4df0:	d80e      	bhi.n	4e10 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4df2:	68fb      	ldr	r3, [r7, #12]
    4df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4df6:	68fb      	ldr	r3, [r7, #12]
    4df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4dfa:	1c58      	adds	r0, r3, #1
    4dfc:	68f9      	ldr	r1, [r7, #12]
    4dfe:	6448      	str	r0, [r1, #68]	; 0x44
    4e00:	4413      	add	r3, r2
    4e02:	781b      	ldrb	r3, [r3, #0]
    4e04:	b29b      	uxth	r3, r3
    4e06:	4619      	mov	r1, r3
    4e08:	6878      	ldr	r0, [r7, #4]
    4e0a:	4b11      	ldr	r3, [pc, #68]	; (4e50 <_spi_dev_tx+0x74>)
    4e0c:	4798      	blx	r3
    4e0e:	e00d      	b.n	4e2c <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    4e10:	68fb      	ldr	r3, [r7, #12]
    4e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4e14:	68fb      	ldr	r3, [r7, #12]
    4e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4e18:	1c58      	adds	r0, r3, #1
    4e1a:	68f9      	ldr	r1, [r7, #12]
    4e1c:	6448      	str	r0, [r1, #68]	; 0x44
    4e1e:	005b      	lsls	r3, r3, #1
    4e20:	4413      	add	r3, r2
    4e22:	881b      	ldrh	r3, [r3, #0]
    4e24:	4619      	mov	r1, r3
    4e26:	6878      	ldr	r0, [r7, #4]
    4e28:	4b09      	ldr	r3, [pc, #36]	; (4e50 <_spi_dev_tx+0x74>)
    4e2a:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    4e2c:	68fb      	ldr	r3, [r7, #12]
    4e2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4e30:	68fb      	ldr	r3, [r7, #12]
    4e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4e34:	429a      	cmp	r2, r3
    4e36:	d107      	bne.n	4e48 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    4e38:	2100      	movs	r1, #0
    4e3a:	6878      	ldr	r0, [r7, #4]
    4e3c:	4b05      	ldr	r3, [pc, #20]	; (4e54 <_spi_dev_tx+0x78>)
    4e3e:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    4e40:	2101      	movs	r1, #1
    4e42:	6878      	ldr	r0, [r7, #4]
    4e44:	4b04      	ldr	r3, [pc, #16]	; (4e58 <_spi_dev_tx+0x7c>)
    4e46:	4798      	blx	r3
	}
}
    4e48:	bf00      	nop
    4e4a:	3710      	adds	r7, #16
    4e4c:	46bd      	mov	sp, r7
    4e4e:	bd80      	pop	{r7, pc}
    4e50:	0000a8f1 	.word	0x0000a8f1
    4e54:	0000a7b5 	.word	0x0000a7b5
    4e58:	0000a889 	.word	0x0000a889

00004e5c <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    4e5c:	b590      	push	{r4, r7, lr}
    4e5e:	b085      	sub	sp, #20
    4e60:	af00      	add	r7, sp, #0
    4e62:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4e64:	687b      	ldr	r3, [r7, #4]
    4e66:	3b04      	subs	r3, #4
    4e68:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    4e6a:	68fb      	ldr	r3, [r7, #12]
    4e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4e6e:	2b00      	cmp	r3, #0
    4e70:	d021      	beq.n	4eb6 <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    4e72:	687b      	ldr	r3, [r7, #4]
    4e74:	791b      	ldrb	r3, [r3, #4]
    4e76:	2b01      	cmp	r3, #1
    4e78:	d80e      	bhi.n	4e98 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    4e7a:	68fb      	ldr	r3, [r7, #12]
    4e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4e7e:	68fb      	ldr	r3, [r7, #12]
    4e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4e82:	1c58      	adds	r0, r3, #1
    4e84:	68f9      	ldr	r1, [r7, #12]
    4e86:	6448      	str	r0, [r1, #68]	; 0x44
    4e88:	18d4      	adds	r4, r2, r3
    4e8a:	6878      	ldr	r0, [r7, #4]
    4e8c:	4b2e      	ldr	r3, [pc, #184]	; (4f48 <_spi_dev_rx+0xec>)
    4e8e:	4798      	blx	r3
    4e90:	4603      	mov	r3, r0
    4e92:	b2db      	uxtb	r3, r3
    4e94:	7023      	strb	r3, [r4, #0]
    4e96:	e016      	b.n	4ec6 <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    4e98:	68fb      	ldr	r3, [r7, #12]
    4e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4e9c:	68fb      	ldr	r3, [r7, #12]
    4e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4ea0:	1c58      	adds	r0, r3, #1
    4ea2:	68f9      	ldr	r1, [r7, #12]
    4ea4:	6448      	str	r0, [r1, #68]	; 0x44
    4ea6:	005b      	lsls	r3, r3, #1
    4ea8:	18d4      	adds	r4, r2, r3
    4eaa:	6878      	ldr	r0, [r7, #4]
    4eac:	4b26      	ldr	r3, [pc, #152]	; (4f48 <_spi_dev_rx+0xec>)
    4eae:	4798      	blx	r3
    4eb0:	4603      	mov	r3, r0
    4eb2:	8023      	strh	r3, [r4, #0]
    4eb4:	e007      	b.n	4ec6 <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    4eb6:	6878      	ldr	r0, [r7, #4]
    4eb8:	4b23      	ldr	r3, [pc, #140]	; (4f48 <_spi_dev_rx+0xec>)
    4eba:	4798      	blx	r3
		spi->xfercnt++;
    4ebc:	68fb      	ldr	r3, [r7, #12]
    4ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4ec0:	1c5a      	adds	r2, r3, #1
    4ec2:	68fb      	ldr	r3, [r7, #12]
    4ec4:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    4ec6:	68fb      	ldr	r3, [r7, #12]
    4ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4eca:	68fb      	ldr	r3, [r7, #12]
    4ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4ece:	429a      	cmp	r2, r3
    4ed0:	d226      	bcs.n	4f20 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    4ed2:	68fb      	ldr	r3, [r7, #12]
    4ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d01b      	beq.n	4f12 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    4eda:	687b      	ldr	r3, [r7, #4]
    4edc:	791b      	ldrb	r3, [r3, #4]
    4ede:	2b01      	cmp	r3, #1
    4ee0:	d80b      	bhi.n	4efa <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    4ee2:	68fb      	ldr	r3, [r7, #12]
    4ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4ee6:	68fb      	ldr	r3, [r7, #12]
    4ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4eea:	4413      	add	r3, r2
    4eec:	781b      	ldrb	r3, [r3, #0]
    4eee:	b29b      	uxth	r3, r3
    4ef0:	4619      	mov	r1, r3
    4ef2:	6878      	ldr	r0, [r7, #4]
    4ef4:	4b15      	ldr	r3, [pc, #84]	; (4f4c <_spi_dev_rx+0xf0>)
    4ef6:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    4ef8:	e022      	b.n	4f40 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4efa:	68fb      	ldr	r3, [r7, #12]
    4efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4efe:	68fb      	ldr	r3, [r7, #12]
    4f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4f02:	005b      	lsls	r3, r3, #1
    4f04:	4413      	add	r3, r2
    4f06:	881b      	ldrh	r3, [r3, #0]
    4f08:	4619      	mov	r1, r3
    4f0a:	6878      	ldr	r0, [r7, #4]
    4f0c:	4b0f      	ldr	r3, [pc, #60]	; (4f4c <_spi_dev_rx+0xf0>)
    4f0e:	4798      	blx	r3
}
    4f10:	e016      	b.n	4f40 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    4f12:	687b      	ldr	r3, [r7, #4]
    4f14:	88db      	ldrh	r3, [r3, #6]
    4f16:	4619      	mov	r1, r3
    4f18:	6878      	ldr	r0, [r7, #4]
    4f1a:	4b0c      	ldr	r3, [pc, #48]	; (4f4c <_spi_dev_rx+0xf0>)
    4f1c:	4798      	blx	r3
}
    4f1e:	e00f      	b.n	4f40 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    4f20:	2100      	movs	r1, #0
    4f22:	6878      	ldr	r0, [r7, #4]
    4f24:	4b0a      	ldr	r3, [pc, #40]	; (4f50 <_spi_dev_rx+0xf4>)
    4f26:	4798      	blx	r3
		spi->stat = 0;
    4f28:	68fb      	ldr	r3, [r7, #12]
    4f2a:	2200      	movs	r2, #0
    4f2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    4f30:	68fb      	ldr	r3, [r7, #12]
    4f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4f34:	2b00      	cmp	r3, #0
    4f36:	d003      	beq.n	4f40 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    4f38:	68fb      	ldr	r3, [r7, #12]
    4f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4f3c:	68f8      	ldr	r0, [r7, #12]
    4f3e:	4798      	blx	r3
}
    4f40:	bf00      	nop
    4f42:	3714      	adds	r7, #20
    4f44:	46bd      	mov	sp, r7
    4f46:	bd90      	pop	{r4, r7, pc}
    4f48:	0000a949 	.word	0x0000a949
    4f4c:	0000a8f1 	.word	0x0000a8f1
    4f50:	0000a819 	.word	0x0000a819

00004f54 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    4f54:	b580      	push	{r7, lr}
    4f56:	b084      	sub	sp, #16
    4f58:	af00      	add	r7, sp, #0
    4f5a:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4f5c:	687b      	ldr	r3, [r7, #4]
    4f5e:	3b04      	subs	r3, #4
    4f60:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    4f62:	68fb      	ldr	r3, [r7, #12]
    4f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4f66:	68fb      	ldr	r3, [r7, #12]
    4f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4f6a:	429a      	cmp	r2, r3
    4f6c:	d30f      	bcc.n	4f8e <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    4f6e:	2100      	movs	r1, #0
    4f70:	6878      	ldr	r0, [r7, #4]
    4f72:	4b09      	ldr	r3, [pc, #36]	; (4f98 <_spi_dev_complete+0x44>)
    4f74:	4798      	blx	r3
		spi->stat = 0;
    4f76:	68fb      	ldr	r3, [r7, #12]
    4f78:	2200      	movs	r2, #0
    4f7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    4f7e:	68fb      	ldr	r3, [r7, #12]
    4f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4f82:	2b00      	cmp	r3, #0
    4f84:	d003      	beq.n	4f8e <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    4f86:	68fb      	ldr	r3, [r7, #12]
    4f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4f8a:	68f8      	ldr	r0, [r7, #12]
    4f8c:	4798      	blx	r3
		}
	}
}
    4f8e:	bf00      	nop
    4f90:	3710      	adds	r7, #16
    4f92:	46bd      	mov	sp, r7
    4f94:	bd80      	pop	{r7, pc}
    4f96:	bf00      	nop
    4f98:	0000a889 	.word	0x0000a889

00004f9c <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b084      	sub	sp, #16
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	6078      	str	r0, [r7, #4]
    4fa4:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4fa6:	687b      	ldr	r3, [r7, #4]
    4fa8:	3b04      	subs	r3, #4
    4faa:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    4fac:	2100      	movs	r1, #0
    4fae:	6878      	ldr	r0, [r7, #4]
    4fb0:	4b0d      	ldr	r3, [pc, #52]	; (4fe8 <_spi_dev_error+0x4c>)
    4fb2:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    4fb4:	2100      	movs	r1, #0
    4fb6:	6878      	ldr	r0, [r7, #4]
    4fb8:	4b0c      	ldr	r3, [pc, #48]	; (4fec <_spi_dev_error+0x50>)
    4fba:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    4fbc:	2100      	movs	r1, #0
    4fbe:	6878      	ldr	r0, [r7, #4]
    4fc0:	4b0b      	ldr	r3, [pc, #44]	; (4ff0 <_spi_dev_error+0x54>)
    4fc2:	4798      	blx	r3
	spi->stat = 0;
    4fc4:	68fb      	ldr	r3, [r7, #12]
    4fc6:	2200      	movs	r2, #0
    4fc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    4fcc:	68fb      	ldr	r3, [r7, #12]
    4fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4fd0:	2b00      	cmp	r3, #0
    4fd2:	d004      	beq.n	4fde <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    4fd4:	68fb      	ldr	r3, [r7, #12]
    4fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4fd8:	6839      	ldr	r1, [r7, #0]
    4fda:	68f8      	ldr	r0, [r7, #12]
    4fdc:	4798      	blx	r3
	}
}
    4fde:	bf00      	nop
    4fe0:	3710      	adds	r7, #16
    4fe2:	46bd      	mov	sp, r7
    4fe4:	bd80      	pop	{r7, pc}
    4fe6:	bf00      	nop
    4fe8:	0000a7b5 	.word	0x0000a7b5
    4fec:	0000a819 	.word	0x0000a819
    4ff0:	0000a889 	.word	0x0000a889

00004ff4 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    4ff4:	b580      	push	{r7, lr}
    4ff6:	b084      	sub	sp, #16
    4ff8:	af00      	add	r7, sp, #0
    4ffa:	6078      	str	r0, [r7, #4]
    4ffc:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    4ffe:	2300      	movs	r3, #0
    5000:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    5002:	687b      	ldr	r3, [r7, #4]
    5004:	2b00      	cmp	r3, #0
    5006:	d004      	beq.n	5012 <spi_m_async_init+0x1e>
    5008:	683b      	ldr	r3, [r7, #0]
    500a:	2b00      	cmp	r3, #0
    500c:	d001      	beq.n	5012 <spi_m_async_init+0x1e>
    500e:	2301      	movs	r3, #1
    5010:	e000      	b.n	5014 <spi_m_async_init+0x20>
    5012:	2300      	movs	r3, #0
    5014:	f003 0301 	and.w	r3, r3, #1
    5018:	b2db      	uxtb	r3, r3
    501a:	22a5      	movs	r2, #165	; 0xa5
    501c:	491c      	ldr	r1, [pc, #112]	; (5090 <spi_m_async_init+0x9c>)
    501e:	4618      	mov	r0, r3
    5020:	4b1c      	ldr	r3, [pc, #112]	; (5094 <spi_m_async_init+0xa0>)
    5022:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    5024:	687b      	ldr	r3, [r7, #4]
    5026:	683a      	ldr	r2, [r7, #0]
    5028:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    502a:	687b      	ldr	r3, [r7, #4]
    502c:	3304      	adds	r3, #4
    502e:	6839      	ldr	r1, [r7, #0]
    5030:	4618      	mov	r0, r3
    5032:	4b19      	ldr	r3, [pc, #100]	; (5098 <spi_m_async_init+0xa4>)
    5034:	4798      	blx	r3
    5036:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    5038:	68fb      	ldr	r3, [r7, #12]
    503a:	2b00      	cmp	r3, #0
    503c:	db23      	blt.n	5086 <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    503e:	687b      	ldr	r3, [r7, #4]
    5040:	3304      	adds	r3, #4
    5042:	4a16      	ldr	r2, [pc, #88]	; (509c <spi_m_async_init+0xa8>)
    5044:	2100      	movs	r1, #0
    5046:	4618      	mov	r0, r3
    5048:	4b15      	ldr	r3, [pc, #84]	; (50a0 <spi_m_async_init+0xac>)
    504a:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    504c:	687b      	ldr	r3, [r7, #4]
    504e:	3304      	adds	r3, #4
    5050:	4a14      	ldr	r2, [pc, #80]	; (50a4 <spi_m_async_init+0xb0>)
    5052:	2101      	movs	r1, #1
    5054:	4618      	mov	r0, r3
    5056:	4b12      	ldr	r3, [pc, #72]	; (50a0 <spi_m_async_init+0xac>)
    5058:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    505a:	687b      	ldr	r3, [r7, #4]
    505c:	3304      	adds	r3, #4
    505e:	4a12      	ldr	r2, [pc, #72]	; (50a8 <spi_m_async_init+0xb4>)
    5060:	2102      	movs	r1, #2
    5062:	4618      	mov	r0, r3
    5064:	4b0e      	ldr	r3, [pc, #56]	; (50a0 <spi_m_async_init+0xac>)
    5066:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    5068:	687b      	ldr	r3, [r7, #4]
    506a:	3304      	adds	r3, #4
    506c:	4a0f      	ldr	r2, [pc, #60]	; (50ac <spi_m_async_init+0xb8>)
    506e:	2103      	movs	r1, #3
    5070:	4618      	mov	r0, r3
    5072:	4b0b      	ldr	r3, [pc, #44]	; (50a0 <spi_m_async_init+0xac>)
    5074:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    5076:	687b      	ldr	r3, [r7, #4]
    5078:	4a0d      	ldr	r2, [pc, #52]	; (50b0 <spi_m_async_init+0xbc>)
    507a:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    507c:	687b      	ldr	r3, [r7, #4]
    507e:	4a0d      	ldr	r2, [pc, #52]	; (50b4 <spi_m_async_init+0xc0>)
    5080:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    5082:	2300      	movs	r3, #0
    5084:	e000      	b.n	5088 <spi_m_async_init+0x94>
		return rc;
    5086:	68fb      	ldr	r3, [r7, #12]
}
    5088:	4618      	mov	r0, r3
    508a:	3710      	adds	r7, #16
    508c:	46bd      	mov	sp, r7
    508e:	bd80      	pop	{r7, pc}
    5090:	0001a658 	.word	0x0001a658
    5094:	00006241 	.word	0x00006241
    5098:	0000a415 	.word	0x0000a415
    509c:	00004ddd 	.word	0x00004ddd
    50a0:	0000a999 	.word	0x0000a999
    50a4:	00004e5d 	.word	0x00004e5d
    50a8:	00004f55 	.word	0x00004f55
    50ac:	00004f9d 	.word	0x00004f9d
    50b0:	000050b9 	.word	0x000050b9
    50b4:	00005139 	.word	0x00005139

000050b8 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    50b8:	b580      	push	{r7, lr}
    50ba:	b086      	sub	sp, #24
    50bc:	af00      	add	r7, sp, #0
    50be:	60f8      	str	r0, [r7, #12]
    50c0:	60b9      	str	r1, [r7, #8]
    50c2:	4613      	mov	r3, r2
    50c4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    50c6:	68fb      	ldr	r3, [r7, #12]
    50c8:	2b00      	cmp	r3, #0
    50ca:	bf14      	ite	ne
    50cc:	2301      	movne	r3, #1
    50ce:	2300      	moveq	r3, #0
    50d0:	b2db      	uxtb	r3, r3
    50d2:	f240 1205 	movw	r2, #261	; 0x105
    50d6:	4914      	ldr	r1, [pc, #80]	; (5128 <_spi_m_async_io_read+0x70>)
    50d8:	4618      	mov	r0, r3
    50da:	4b14      	ldr	r3, [pc, #80]	; (512c <_spi_m_async_io_read+0x74>)
    50dc:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    50de:	68fb      	ldr	r3, [r7, #12]
    50e0:	3b24      	subs	r3, #36	; 0x24
    50e2:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    50e4:	697b      	ldr	r3, [r7, #20]
    50e6:	68ba      	ldr	r2, [r7, #8]
    50e8:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    50ea:	697b      	ldr	r3, [r7, #20]
    50ec:	2200      	movs	r2, #0
    50ee:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    50f0:	88fa      	ldrh	r2, [r7, #6]
    50f2:	697b      	ldr	r3, [r7, #20]
    50f4:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    50f6:	697b      	ldr	r3, [r7, #20]
    50f8:	2200      	movs	r2, #0
    50fa:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    50fc:	697b      	ldr	r3, [r7, #20]
    50fe:	2210      	movs	r2, #16
    5100:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    5104:	697b      	ldr	r3, [r7, #20]
    5106:	3304      	adds	r3, #4
    5108:	2101      	movs	r1, #1
    510a:	4618      	mov	r0, r3
    510c:	4b08      	ldr	r3, [pc, #32]	; (5130 <_spi_m_async_io_read+0x78>)
    510e:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    5110:	697b      	ldr	r3, [r7, #20]
    5112:	3304      	adds	r3, #4
    5114:	f240 11ff 	movw	r1, #511	; 0x1ff
    5118:	4618      	mov	r0, r3
    511a:	4b06      	ldr	r3, [pc, #24]	; (5134 <_spi_m_async_io_read+0x7c>)
    511c:	4798      	blx	r3

	return ERR_NONE;
    511e:	2300      	movs	r3, #0
}
    5120:	4618      	mov	r0, r3
    5122:	3718      	adds	r7, #24
    5124:	46bd      	mov	sp, r7
    5126:	bd80      	pop	{r7, pc}
    5128:	0001a658 	.word	0x0001a658
    512c:	00006241 	.word	0x00006241
    5130:	0000a819 	.word	0x0000a819
    5134:	0000a8f1 	.word	0x0000a8f1

00005138 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    5138:	b580      	push	{r7, lr}
    513a:	b086      	sub	sp, #24
    513c:	af00      	add	r7, sp, #0
    513e:	60f8      	str	r0, [r7, #12]
    5140:	60b9      	str	r1, [r7, #8]
    5142:	4613      	mov	r3, r2
    5144:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    5146:	68fb      	ldr	r3, [r7, #12]
    5148:	2b00      	cmp	r3, #0
    514a:	bf14      	ite	ne
    514c:	2301      	movne	r3, #1
    514e:	2300      	moveq	r3, #0
    5150:	b2db      	uxtb	r3, r3
    5152:	f240 1227 	movw	r2, #295	; 0x127
    5156:	4911      	ldr	r1, [pc, #68]	; (519c <_spi_m_async_io_write+0x64>)
    5158:	4618      	mov	r0, r3
    515a:	4b11      	ldr	r3, [pc, #68]	; (51a0 <_spi_m_async_io_write+0x68>)
    515c:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    515e:	68fb      	ldr	r3, [r7, #12]
    5160:	3b24      	subs	r3, #36	; 0x24
    5162:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    5164:	697b      	ldr	r3, [r7, #20]
    5166:	2200      	movs	r2, #0
    5168:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    516a:	697b      	ldr	r3, [r7, #20]
    516c:	68ba      	ldr	r2, [r7, #8]
    516e:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    5170:	88fa      	ldrh	r2, [r7, #6]
    5172:	697b      	ldr	r3, [r7, #20]
    5174:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    5176:	697b      	ldr	r3, [r7, #20]
    5178:	2200      	movs	r2, #0
    517a:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    517c:	697b      	ldr	r3, [r7, #20]
    517e:	2210      	movs	r2, #16
    5180:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    5184:	697b      	ldr	r3, [r7, #20]
    5186:	3304      	adds	r3, #4
    5188:	2101      	movs	r1, #1
    518a:	4618      	mov	r0, r3
    518c:	4b05      	ldr	r3, [pc, #20]	; (51a4 <_spi_m_async_io_write+0x6c>)
    518e:	4798      	blx	r3

	return ERR_NONE;
    5190:	2300      	movs	r3, #0
}
    5192:	4618      	mov	r0, r3
    5194:	3718      	adds	r7, #24
    5196:	46bd      	mov	sp, r7
    5198:	bd80      	pop	{r7, pc}
    519a:	bf00      	nop
    519c:	0001a658 	.word	0x0001a658
    51a0:	00006241 	.word	0x00006241
    51a4:	0000a7b5 	.word	0x0000a7b5

000051a8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    51a8:	b580      	push	{r7, lr}
    51aa:	b084      	sub	sp, #16
    51ac:	af00      	add	r7, sp, #0
    51ae:	6078      	str	r0, [r7, #4]
    51b0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    51b2:	2300      	movs	r3, #0
    51b4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    51b6:	687b      	ldr	r3, [r7, #4]
    51b8:	2b00      	cmp	r3, #0
    51ba:	d004      	beq.n	51c6 <spi_m_sync_init+0x1e>
    51bc:	683b      	ldr	r3, [r7, #0]
    51be:	2b00      	cmp	r3, #0
    51c0:	d001      	beq.n	51c6 <spi_m_sync_init+0x1e>
    51c2:	2301      	movs	r3, #1
    51c4:	e000      	b.n	51c8 <spi_m_sync_init+0x20>
    51c6:	2300      	movs	r3, #0
    51c8:	f003 0301 	and.w	r3, r3, #1
    51cc:	b2db      	uxtb	r3, r3
    51ce:	2240      	movs	r2, #64	; 0x40
    51d0:	4910      	ldr	r1, [pc, #64]	; (5214 <spi_m_sync_init+0x6c>)
    51d2:	4618      	mov	r0, r3
    51d4:	4b10      	ldr	r3, [pc, #64]	; (5218 <spi_m_sync_init+0x70>)
    51d6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	683a      	ldr	r2, [r7, #0]
    51dc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    51de:	687b      	ldr	r3, [r7, #4]
    51e0:	3304      	adds	r3, #4
    51e2:	6839      	ldr	r1, [r7, #0]
    51e4:	4618      	mov	r0, r3
    51e6:	4b0d      	ldr	r3, [pc, #52]	; (521c <spi_m_sync_init+0x74>)
    51e8:	4798      	blx	r3
    51ea:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    51ec:	68fb      	ldr	r3, [r7, #12]
    51ee:	2b00      	cmp	r3, #0
    51f0:	da01      	bge.n	51f6 <spi_m_sync_init+0x4e>
		return rc;
    51f2:	68fb      	ldr	r3, [r7, #12]
    51f4:	e00a      	b.n	520c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    51f6:	687b      	ldr	r3, [r7, #4]
    51f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    51fc:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    51fe:	687b      	ldr	r3, [r7, #4]
    5200:	4a07      	ldr	r2, [pc, #28]	; (5220 <spi_m_sync_init+0x78>)
    5202:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	4a07      	ldr	r2, [pc, #28]	; (5224 <spi_m_sync_init+0x7c>)
    5208:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    520a:	2300      	movs	r3, #0
}
    520c:	4618      	mov	r0, r3
    520e:	3710      	adds	r7, #16
    5210:	46bd      	mov	sp, r7
    5212:	bd80      	pop	{r7, pc}
    5214:	0001a678 	.word	0x0001a678
    5218:	00006241 	.word	0x00006241
    521c:	0000a309 	.word	0x0000a309
    5220:	000052a1 	.word	0x000052a1
    5224:	000052f9 	.word	0x000052f9

00005228 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    5228:	b580      	push	{r7, lr}
    522a:	b082      	sub	sp, #8
    522c:	af00      	add	r7, sp, #0
    522e:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    5230:	687b      	ldr	r3, [r7, #4]
    5232:	2b00      	cmp	r3, #0
    5234:	bf14      	ite	ne
    5236:	2301      	movne	r3, #1
    5238:	2300      	moveq	r3, #0
    523a:	b2db      	uxtb	r3, r3
    523c:	2257      	movs	r2, #87	; 0x57
    523e:	4906      	ldr	r1, [pc, #24]	; (5258 <spi_m_sync_enable+0x30>)
    5240:	4618      	mov	r0, r3
    5242:	4b06      	ldr	r3, [pc, #24]	; (525c <spi_m_sync_enable+0x34>)
    5244:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    5246:	687b      	ldr	r3, [r7, #4]
    5248:	3304      	adds	r3, #4
    524a:	4618      	mov	r0, r3
    524c:	4b04      	ldr	r3, [pc, #16]	; (5260 <spi_m_sync_enable+0x38>)
    524e:	4798      	blx	r3
}
    5250:	bf00      	nop
    5252:	3708      	adds	r7, #8
    5254:	46bd      	mov	sp, r7
    5256:	bd80      	pop	{r7, pc}
    5258:	0001a678 	.word	0x0001a678
    525c:	00006241 	.word	0x00006241
    5260:	0000a4a5 	.word	0x0000a4a5

00005264 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    5264:	b580      	push	{r7, lr}
    5266:	b082      	sub	sp, #8
    5268:	af00      	add	r7, sp, #0
    526a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    526c:	687b      	ldr	r3, [r7, #4]
    526e:	2b00      	cmp	r3, #0
    5270:	bf14      	ite	ne
    5272:	2301      	movne	r3, #1
    5274:	2300      	moveq	r3, #0
    5276:	b2db      	uxtb	r3, r3
    5278:	225d      	movs	r2, #93	; 0x5d
    527a:	4906      	ldr	r1, [pc, #24]	; (5294 <spi_m_sync_disable+0x30>)
    527c:	4618      	mov	r0, r3
    527e:	4b06      	ldr	r3, [pc, #24]	; (5298 <spi_m_sync_disable+0x34>)
    5280:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    5282:	687b      	ldr	r3, [r7, #4]
    5284:	3304      	adds	r3, #4
    5286:	4618      	mov	r0, r3
    5288:	4b04      	ldr	r3, [pc, #16]	; (529c <spi_m_sync_disable+0x38>)
    528a:	4798      	blx	r3
}
    528c:	bf00      	nop
    528e:	3708      	adds	r7, #8
    5290:	46bd      	mov	sp, r7
    5292:	bd80      	pop	{r7, pc}
    5294:	0001a678 	.word	0x0001a678
    5298:	00006241 	.word	0x00006241
    529c:	0000a4f5 	.word	0x0000a4f5

000052a0 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    52a0:	b580      	push	{r7, lr}
    52a2:	b088      	sub	sp, #32
    52a4:	af00      	add	r7, sp, #0
    52a6:	60f8      	str	r0, [r7, #12]
    52a8:	60b9      	str	r1, [r7, #8]
    52aa:	4613      	mov	r3, r2
    52ac:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    52ae:	68fb      	ldr	r3, [r7, #12]
    52b0:	2b00      	cmp	r3, #0
    52b2:	bf14      	ite	ne
    52b4:	2301      	movne	r3, #1
    52b6:	2300      	moveq	r3, #0
    52b8:	b2db      	uxtb	r3, r3
    52ba:	2287      	movs	r2, #135	; 0x87
    52bc:	490b      	ldr	r1, [pc, #44]	; (52ec <_spi_m_sync_io_read+0x4c>)
    52be:	4618      	mov	r0, r3
    52c0:	4b0b      	ldr	r3, [pc, #44]	; (52f0 <_spi_m_sync_io_read+0x50>)
    52c2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    52c4:	68fb      	ldr	r3, [r7, #12]
    52c6:	3b0c      	subs	r3, #12
    52c8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    52ca:	68bb      	ldr	r3, [r7, #8]
    52cc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    52ce:	2300      	movs	r3, #0
    52d0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    52d2:	88fb      	ldrh	r3, [r7, #6]
    52d4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    52d6:	f107 0310 	add.w	r3, r7, #16
    52da:	4619      	mov	r1, r3
    52dc:	69f8      	ldr	r0, [r7, #28]
    52de:	4b05      	ldr	r3, [pc, #20]	; (52f4 <_spi_m_sync_io_read+0x54>)
    52e0:	4798      	blx	r3
    52e2:	4603      	mov	r3, r0
}
    52e4:	4618      	mov	r0, r3
    52e6:	3720      	adds	r7, #32
    52e8:	46bd      	mov	sp, r7
    52ea:	bd80      	pop	{r7, pc}
    52ec:	0001a678 	.word	0x0001a678
    52f0:	00006241 	.word	0x00006241
    52f4:	00005351 	.word	0x00005351

000052f8 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    52f8:	b580      	push	{r7, lr}
    52fa:	b088      	sub	sp, #32
    52fc:	af00      	add	r7, sp, #0
    52fe:	60f8      	str	r0, [r7, #12]
    5300:	60b9      	str	r1, [r7, #8]
    5302:	4613      	mov	r3, r2
    5304:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    5306:	68fb      	ldr	r3, [r7, #12]
    5308:	2b00      	cmp	r3, #0
    530a:	bf14      	ite	ne
    530c:	2301      	movne	r3, #1
    530e:	2300      	moveq	r3, #0
    5310:	b2db      	uxtb	r3, r3
    5312:	22a3      	movs	r2, #163	; 0xa3
    5314:	490b      	ldr	r1, [pc, #44]	; (5344 <_spi_m_sync_io_write+0x4c>)
    5316:	4618      	mov	r0, r3
    5318:	4b0b      	ldr	r3, [pc, #44]	; (5348 <_spi_m_sync_io_write+0x50>)
    531a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    531c:	68fb      	ldr	r3, [r7, #12]
    531e:	3b0c      	subs	r3, #12
    5320:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    5322:	2300      	movs	r3, #0
    5324:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    5326:	68bb      	ldr	r3, [r7, #8]
    5328:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    532a:	88fb      	ldrh	r3, [r7, #6]
    532c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    532e:	f107 0310 	add.w	r3, r7, #16
    5332:	4619      	mov	r1, r3
    5334:	69f8      	ldr	r0, [r7, #28]
    5336:	4b05      	ldr	r3, [pc, #20]	; (534c <_spi_m_sync_io_write+0x54>)
    5338:	4798      	blx	r3
    533a:	4603      	mov	r3, r0
}
    533c:	4618      	mov	r0, r3
    533e:	3720      	adds	r7, #32
    5340:	46bd      	mov	sp, r7
    5342:	bd80      	pop	{r7, pc}
    5344:	0001a678 	.word	0x0001a678
    5348:	00006241 	.word	0x00006241
    534c:	00005351 	.word	0x00005351

00005350 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    5350:	b580      	push	{r7, lr}
    5352:	b086      	sub	sp, #24
    5354:	af00      	add	r7, sp, #0
    5356:	6078      	str	r0, [r7, #4]
    5358:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    535a:	687b      	ldr	r3, [r7, #4]
    535c:	2b00      	cmp	r3, #0
    535e:	d004      	beq.n	536a <spi_m_sync_transfer+0x1a>
    5360:	683b      	ldr	r3, [r7, #0]
    5362:	2b00      	cmp	r3, #0
    5364:	d001      	beq.n	536a <spi_m_sync_transfer+0x1a>
    5366:	2301      	movs	r3, #1
    5368:	e000      	b.n	536c <spi_m_sync_transfer+0x1c>
    536a:	2300      	movs	r3, #0
    536c:	f003 0301 	and.w	r3, r3, #1
    5370:	b2db      	uxtb	r3, r3
    5372:	22b3      	movs	r2, #179	; 0xb3
    5374:	490c      	ldr	r1, [pc, #48]	; (53a8 <spi_m_sync_transfer+0x58>)
    5376:	4618      	mov	r0, r3
    5378:	4b0c      	ldr	r3, [pc, #48]	; (53ac <spi_m_sync_transfer+0x5c>)
    537a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    537c:	683b      	ldr	r3, [r7, #0]
    537e:	681b      	ldr	r3, [r3, #0]
    5380:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    5382:	683b      	ldr	r3, [r7, #0]
    5384:	685b      	ldr	r3, [r3, #4]
    5386:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    5388:	683b      	ldr	r3, [r7, #0]
    538a:	689b      	ldr	r3, [r3, #8]
    538c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    538e:	687b      	ldr	r3, [r7, #4]
    5390:	3304      	adds	r3, #4
    5392:	f107 020c 	add.w	r2, r7, #12
    5396:	4611      	mov	r1, r2
    5398:	4618      	mov	r0, r3
    539a:	4b05      	ldr	r3, [pc, #20]	; (53b0 <spi_m_sync_transfer+0x60>)
    539c:	4798      	blx	r3
    539e:	4603      	mov	r3, r0
}
    53a0:	4618      	mov	r0, r3
    53a2:	3718      	adds	r7, #24
    53a4:	46bd      	mov	sp, r7
    53a6:	bd80      	pop	{r7, pc}
    53a8:	0001a678 	.word	0x0001a678
    53ac:	00006241 	.word	0x00006241
    53b0:	0000a699 	.word	0x0000a699

000053b4 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    53b4:	b580      	push	{r7, lr}
    53b6:	b082      	sub	sp, #8
    53b8:	af00      	add	r7, sp, #0
    53ba:	6078      	str	r0, [r7, #4]
    53bc:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    53be:	687b      	ldr	r3, [r7, #4]
    53c0:	2b00      	cmp	r3, #0
    53c2:	d004      	beq.n	53ce <spi_m_sync_get_io_descriptor+0x1a>
    53c4:	683b      	ldr	r3, [r7, #0]
    53c6:	2b00      	cmp	r3, #0
    53c8:	d001      	beq.n	53ce <spi_m_sync_get_io_descriptor+0x1a>
    53ca:	2301      	movs	r3, #1
    53cc:	e000      	b.n	53d0 <spi_m_sync_get_io_descriptor+0x1c>
    53ce:	2300      	movs	r3, #0
    53d0:	f003 0301 	and.w	r3, r3, #1
    53d4:	b2db      	uxtb	r3, r3
    53d6:	22bd      	movs	r2, #189	; 0xbd
    53d8:	4906      	ldr	r1, [pc, #24]	; (53f4 <spi_m_sync_get_io_descriptor+0x40>)
    53da:	4618      	mov	r0, r3
    53dc:	4b06      	ldr	r3, [pc, #24]	; (53f8 <spi_m_sync_get_io_descriptor+0x44>)
    53de:	4798      	blx	r3
	*io = &spi->io;
    53e0:	687b      	ldr	r3, [r7, #4]
    53e2:	f103 020c 	add.w	r2, r3, #12
    53e6:	683b      	ldr	r3, [r7, #0]
    53e8:	601a      	str	r2, [r3, #0]
	return 0;
    53ea:	2300      	movs	r3, #0
}
    53ec:	4618      	mov	r0, r3
    53ee:	3708      	adds	r7, #8
    53f0:	46bd      	mov	sp, r7
    53f2:	bd80      	pop	{r7, pc}
    53f4:	0001a678 	.word	0x0001a678
    53f8:	00006241 	.word	0x00006241

000053fc <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    53fc:	b480      	push	{r7}
    53fe:	b083      	sub	sp, #12
    5400:	af00      	add	r7, sp, #0
    5402:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    5404:	687b      	ldr	r3, [r7, #4]
    5406:	681b      	ldr	r3, [r3, #0]
}
    5408:	4618      	mov	r0, r3
    540a:	370c      	adds	r7, #12
    540c:	46bd      	mov	sp, r7
    540e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5412:	4770      	bx	lr

00005414 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    5414:	b480      	push	{r7}
    5416:	b083      	sub	sp, #12
    5418:	af00      	add	r7, sp, #0
    541a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    541c:	687b      	ldr	r3, [r7, #4]
    541e:	2b00      	cmp	r3, #0
    5420:	d002      	beq.n	5428 <list_get_next_element+0x14>
    5422:	687b      	ldr	r3, [r7, #4]
    5424:	681b      	ldr	r3, [r3, #0]
    5426:	e000      	b.n	542a <list_get_next_element+0x16>
    5428:	2300      	movs	r3, #0
}
    542a:	4618      	mov	r0, r3
    542c:	370c      	adds	r7, #12
    542e:	46bd      	mov	sp, r7
    5430:	f85d 7b04 	ldr.w	r7, [sp], #4
    5434:	4770      	bx	lr
	...

00005438 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    5438:	b580      	push	{r7, lr}
    543a:	b084      	sub	sp, #16
    543c:	af00      	add	r7, sp, #0
    543e:	60f8      	str	r0, [r7, #12]
    5440:	60b9      	str	r1, [r7, #8]
    5442:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    5444:	68fb      	ldr	r3, [r7, #12]
    5446:	2b00      	cmp	r3, #0
    5448:	d004      	beq.n	5454 <timer_init+0x1c>
    544a:	68bb      	ldr	r3, [r7, #8]
    544c:	2b00      	cmp	r3, #0
    544e:	d001      	beq.n	5454 <timer_init+0x1c>
    5450:	2301      	movs	r3, #1
    5452:	e000      	b.n	5456 <timer_init+0x1e>
    5454:	2300      	movs	r3, #0
    5456:	f003 0301 	and.w	r3, r3, #1
    545a:	b2db      	uxtb	r3, r3
    545c:	223b      	movs	r2, #59	; 0x3b
    545e:	490a      	ldr	r1, [pc, #40]	; (5488 <timer_init+0x50>)
    5460:	4618      	mov	r0, r3
    5462:	4b0a      	ldr	r3, [pc, #40]	; (548c <timer_init+0x54>)
    5464:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    5466:	68fb      	ldr	r3, [r7, #12]
    5468:	68b9      	ldr	r1, [r7, #8]
    546a:	4618      	mov	r0, r3
    546c:	4b08      	ldr	r3, [pc, #32]	; (5490 <timer_init+0x58>)
    546e:	4798      	blx	r3
	descr->time                           = 0;
    5470:	68fb      	ldr	r3, [r7, #12]
    5472:	2200      	movs	r2, #0
    5474:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    5476:	68fb      	ldr	r3, [r7, #12]
    5478:	4a06      	ldr	r2, [pc, #24]	; (5494 <timer_init+0x5c>)
    547a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    547c:	2300      	movs	r3, #0
}
    547e:	4618      	mov	r0, r3
    5480:	3710      	adds	r7, #16
    5482:	46bd      	mov	sp, r7
    5484:	bd80      	pop	{r7, pc}
    5486:	bf00      	nop
    5488:	0001a694 	.word	0x0001a694
    548c:	00006241 	.word	0x00006241
    5490:	0000ae39 	.word	0x0000ae39
    5494:	00005831 	.word	0x00005831

00005498 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    5498:	b580      	push	{r7, lr}
    549a:	b082      	sub	sp, #8
    549c:	af00      	add	r7, sp, #0
    549e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    54a0:	687b      	ldr	r3, [r7, #4]
    54a2:	2b00      	cmp	r3, #0
    54a4:	bf14      	ite	ne
    54a6:	2301      	movne	r3, #1
    54a8:	2300      	moveq	r3, #0
    54aa:	b2db      	uxtb	r3, r3
    54ac:	2253      	movs	r2, #83	; 0x53
    54ae:	490b      	ldr	r1, [pc, #44]	; (54dc <timer_start+0x44>)
    54b0:	4618      	mov	r0, r3
    54b2:	4b0b      	ldr	r3, [pc, #44]	; (54e0 <timer_start+0x48>)
    54b4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    54b6:	687b      	ldr	r3, [r7, #4]
    54b8:	4618      	mov	r0, r3
    54ba:	4b0a      	ldr	r3, [pc, #40]	; (54e4 <timer_start+0x4c>)
    54bc:	4798      	blx	r3
    54be:	4603      	mov	r3, r0
    54c0:	2b00      	cmp	r3, #0
    54c2:	d002      	beq.n	54ca <timer_start+0x32>
		return ERR_DENIED;
    54c4:	f06f 0310 	mvn.w	r3, #16
    54c8:	e004      	b.n	54d4 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    54ca:	687b      	ldr	r3, [r7, #4]
    54cc:	4618      	mov	r0, r3
    54ce:	4b06      	ldr	r3, [pc, #24]	; (54e8 <timer_start+0x50>)
    54d0:	4798      	blx	r3

	return ERR_NONE;
    54d2:	2300      	movs	r3, #0
}
    54d4:	4618      	mov	r0, r3
    54d6:	3708      	adds	r7, #8
    54d8:	46bd      	mov	sp, r7
    54da:	bd80      	pop	{r7, pc}
    54dc:	0001a694 	.word	0x0001a694
    54e0:	00006241 	.word	0x00006241
    54e4:	0000b3d5 	.word	0x0000b3d5
    54e8:	0000b305 	.word	0x0000b305

000054ec <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    54ec:	b580      	push	{r7, lr}
    54ee:	b082      	sub	sp, #8
    54f0:	af00      	add	r7, sp, #0
    54f2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    54f4:	687b      	ldr	r3, [r7, #4]
    54f6:	2b00      	cmp	r3, #0
    54f8:	bf14      	ite	ne
    54fa:	2301      	movne	r3, #1
    54fc:	2300      	moveq	r3, #0
    54fe:	b2db      	uxtb	r3, r3
    5500:	2261      	movs	r2, #97	; 0x61
    5502:	490d      	ldr	r1, [pc, #52]	; (5538 <timer_stop+0x4c>)
    5504:	4618      	mov	r0, r3
    5506:	4b0d      	ldr	r3, [pc, #52]	; (553c <timer_stop+0x50>)
    5508:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    550a:	687b      	ldr	r3, [r7, #4]
    550c:	4618      	mov	r0, r3
    550e:	4b0c      	ldr	r3, [pc, #48]	; (5540 <timer_stop+0x54>)
    5510:	4798      	blx	r3
    5512:	4603      	mov	r3, r0
    5514:	f083 0301 	eor.w	r3, r3, #1
    5518:	b2db      	uxtb	r3, r3
    551a:	2b00      	cmp	r3, #0
    551c:	d002      	beq.n	5524 <timer_stop+0x38>
		return ERR_DENIED;
    551e:	f06f 0310 	mvn.w	r3, #16
    5522:	e004      	b.n	552e <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    5524:	687b      	ldr	r3, [r7, #4]
    5526:	4618      	mov	r0, r3
    5528:	4b06      	ldr	r3, [pc, #24]	; (5544 <timer_stop+0x58>)
    552a:	4798      	blx	r3

	return ERR_NONE;
    552c:	2300      	movs	r3, #0
}
    552e:	4618      	mov	r0, r3
    5530:	3708      	adds	r7, #8
    5532:	46bd      	mov	sp, r7
    5534:	bd80      	pop	{r7, pc}
    5536:	bf00      	nop
    5538:	0001a694 	.word	0x0001a694
    553c:	00006241 	.word	0x00006241
    5540:	0000b3d5 	.word	0x0000b3d5
    5544:	0000b345 	.word	0x0000b345

00005548 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    5548:	b580      	push	{r7, lr}
    554a:	b084      	sub	sp, #16
    554c:	af00      	add	r7, sp, #0
    554e:	6078      	str	r0, [r7, #4]
    5550:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    5552:	687b      	ldr	r3, [r7, #4]
    5554:	2b00      	cmp	r3, #0
    5556:	d004      	beq.n	5562 <timer_add_task+0x1a>
    5558:	683b      	ldr	r3, [r7, #0]
    555a:	2b00      	cmp	r3, #0
    555c:	d001      	beq.n	5562 <timer_add_task+0x1a>
    555e:	2301      	movs	r3, #1
    5560:	e000      	b.n	5564 <timer_add_task+0x1c>
    5562:	2300      	movs	r3, #0
    5564:	f003 0301 	and.w	r3, r3, #1
    5568:	b2db      	uxtb	r3, r3
    556a:	227a      	movs	r2, #122	; 0x7a
    556c:	492d      	ldr	r1, [pc, #180]	; (5624 <timer_add_task+0xdc>)
    556e:	4618      	mov	r0, r3
    5570:	4b2d      	ldr	r3, [pc, #180]	; (5628 <timer_add_task+0xe0>)
    5572:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    5574:	687b      	ldr	r3, [r7, #4]
    5576:	7e1b      	ldrb	r3, [r3, #24]
    5578:	b2db      	uxtb	r3, r3
    557a:	f043 0301 	orr.w	r3, r3, #1
    557e:	b2da      	uxtb	r2, r3
    5580:	687b      	ldr	r3, [r7, #4]
    5582:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    5584:	687b      	ldr	r3, [r7, #4]
    5586:	3314      	adds	r3, #20
    5588:	6839      	ldr	r1, [r7, #0]
    558a:	4618      	mov	r0, r3
    558c:	4b27      	ldr	r3, [pc, #156]	; (562c <timer_add_task+0xe4>)
    558e:	4798      	blx	r3
    5590:	4603      	mov	r3, r0
    5592:	2b00      	cmp	r3, #0
    5594:	d00f      	beq.n	55b6 <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5596:	687b      	ldr	r3, [r7, #4]
    5598:	7e1b      	ldrb	r3, [r3, #24]
    559a:	b2db      	uxtb	r3, r3
    559c:	f023 0301 	bic.w	r3, r3, #1
    55a0:	b2da      	uxtb	r2, r3
    55a2:	687b      	ldr	r3, [r7, #4]
    55a4:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    55a6:	227f      	movs	r2, #127	; 0x7f
    55a8:	491e      	ldr	r1, [pc, #120]	; (5624 <timer_add_task+0xdc>)
    55aa:	2000      	movs	r0, #0
    55ac:	4b1e      	ldr	r3, [pc, #120]	; (5628 <timer_add_task+0xe0>)
    55ae:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    55b0:	f06f 0311 	mvn.w	r3, #17
    55b4:	e032      	b.n	561c <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    55b6:	687b      	ldr	r3, [r7, #4]
    55b8:	691a      	ldr	r2, [r3, #16]
    55ba:	683b      	ldr	r3, [r7, #0]
    55bc:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    55be:	687b      	ldr	r3, [r7, #4]
    55c0:	f103 0014 	add.w	r0, r3, #20
    55c4:	687b      	ldr	r3, [r7, #4]
    55c6:	691b      	ldr	r3, [r3, #16]
    55c8:	461a      	mov	r2, r3
    55ca:	6839      	ldr	r1, [r7, #0]
    55cc:	4b18      	ldr	r3, [pc, #96]	; (5630 <timer_add_task+0xe8>)
    55ce:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    55d0:	687b      	ldr	r3, [r7, #4]
    55d2:	7e1b      	ldrb	r3, [r3, #24]
    55d4:	b2db      	uxtb	r3, r3
    55d6:	f023 0301 	bic.w	r3, r3, #1
    55da:	b2da      	uxtb	r2, r3
    55dc:	687b      	ldr	r3, [r7, #4]
    55de:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    55e0:	687b      	ldr	r3, [r7, #4]
    55e2:	7e1b      	ldrb	r3, [r3, #24]
    55e4:	b2db      	uxtb	r3, r3
    55e6:	f003 0302 	and.w	r3, r3, #2
    55ea:	2b00      	cmp	r3, #0
    55ec:	d015      	beq.n	561a <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    55ee:	f107 030c 	add.w	r3, r7, #12
    55f2:	4618      	mov	r0, r3
    55f4:	4b0f      	ldr	r3, [pc, #60]	; (5634 <timer_add_task+0xec>)
    55f6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    55f8:	687b      	ldr	r3, [r7, #4]
    55fa:	7e1b      	ldrb	r3, [r3, #24]
    55fc:	b2db      	uxtb	r3, r3
    55fe:	f023 0302 	bic.w	r3, r3, #2
    5602:	b2da      	uxtb	r2, r3
    5604:	687b      	ldr	r3, [r7, #4]
    5606:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    5608:	687b      	ldr	r3, [r7, #4]
    560a:	4618      	mov	r0, r3
    560c:	4b0a      	ldr	r3, [pc, #40]	; (5638 <timer_add_task+0xf0>)
    560e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5610:	f107 030c 	add.w	r3, r7, #12
    5614:	4618      	mov	r0, r3
    5616:	4b09      	ldr	r3, [pc, #36]	; (563c <timer_add_task+0xf4>)
    5618:	4798      	blx	r3
	}

	return ERR_NONE;
    561a:	2300      	movs	r3, #0
}
    561c:	4618      	mov	r0, r3
    561e:	3710      	adds	r7, #16
    5620:	46bd      	mov	sp, r7
    5622:	bd80      	pop	{r7, pc}
    5624:	0001a694 	.word	0x0001a694
    5628:	00006241 	.word	0x00006241
    562c:	00006269 	.word	0x00006269
    5630:	00005781 	.word	0x00005781
    5634:	0000e51d 	.word	0x0000e51d
    5638:	0000b435 	.word	0x0000b435
    563c:	0000e543 	.word	0x0000e543

00005640 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    5640:	b580      	push	{r7, lr}
    5642:	b084      	sub	sp, #16
    5644:	af00      	add	r7, sp, #0
    5646:	6078      	str	r0, [r7, #4]
    5648:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    564a:	687b      	ldr	r3, [r7, #4]
    564c:	2b00      	cmp	r3, #0
    564e:	d004      	beq.n	565a <timer_remove_task+0x1a>
    5650:	683b      	ldr	r3, [r7, #0]
    5652:	2b00      	cmp	r3, #0
    5654:	d001      	beq.n	565a <timer_remove_task+0x1a>
    5656:	2301      	movs	r3, #1
    5658:	e000      	b.n	565c <timer_remove_task+0x1c>
    565a:	2300      	movs	r3, #0
    565c:	f003 0301 	and.w	r3, r3, #1
    5660:	b2db      	uxtb	r3, r3
    5662:	2295      	movs	r2, #149	; 0x95
    5664:	492b      	ldr	r1, [pc, #172]	; (5714 <timer_remove_task+0xd4>)
    5666:	4618      	mov	r0, r3
    5668:	4b2b      	ldr	r3, [pc, #172]	; (5718 <timer_remove_task+0xd8>)
    566a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    566c:	687b      	ldr	r3, [r7, #4]
    566e:	7e1b      	ldrb	r3, [r3, #24]
    5670:	b2db      	uxtb	r3, r3
    5672:	f043 0301 	orr.w	r3, r3, #1
    5676:	b2da      	uxtb	r2, r3
    5678:	687b      	ldr	r3, [r7, #4]
    567a:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    567c:	687b      	ldr	r3, [r7, #4]
    567e:	3314      	adds	r3, #20
    5680:	6839      	ldr	r1, [r7, #0]
    5682:	4618      	mov	r0, r3
    5684:	4b25      	ldr	r3, [pc, #148]	; (571c <timer_remove_task+0xdc>)
    5686:	4798      	blx	r3
    5688:	4603      	mov	r3, r0
    568a:	f083 0301 	eor.w	r3, r3, #1
    568e:	b2db      	uxtb	r3, r3
    5690:	2b00      	cmp	r3, #0
    5692:	d00f      	beq.n	56b4 <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5694:	687b      	ldr	r3, [r7, #4]
    5696:	7e1b      	ldrb	r3, [r3, #24]
    5698:	b2db      	uxtb	r3, r3
    569a:	f023 0301 	bic.w	r3, r3, #1
    569e:	b2da      	uxtb	r2, r3
    56a0:	687b      	ldr	r3, [r7, #4]
    56a2:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    56a4:	229a      	movs	r2, #154	; 0x9a
    56a6:	491b      	ldr	r1, [pc, #108]	; (5714 <timer_remove_task+0xd4>)
    56a8:	2000      	movs	r0, #0
    56aa:	4b1b      	ldr	r3, [pc, #108]	; (5718 <timer_remove_task+0xd8>)
    56ac:	4798      	blx	r3
		return ERR_NOT_FOUND;
    56ae:	f06f 0309 	mvn.w	r3, #9
    56b2:	e02b      	b.n	570c <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    56b4:	687b      	ldr	r3, [r7, #4]
    56b6:	3314      	adds	r3, #20
    56b8:	6839      	ldr	r1, [r7, #0]
    56ba:	4618      	mov	r0, r3
    56bc:	4b18      	ldr	r3, [pc, #96]	; (5720 <timer_remove_task+0xe0>)
    56be:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    56c0:	687b      	ldr	r3, [r7, #4]
    56c2:	7e1b      	ldrb	r3, [r3, #24]
    56c4:	b2db      	uxtb	r3, r3
    56c6:	f023 0301 	bic.w	r3, r3, #1
    56ca:	b2da      	uxtb	r2, r3
    56cc:	687b      	ldr	r3, [r7, #4]
    56ce:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    56d0:	687b      	ldr	r3, [r7, #4]
    56d2:	7e1b      	ldrb	r3, [r3, #24]
    56d4:	b2db      	uxtb	r3, r3
    56d6:	f003 0302 	and.w	r3, r3, #2
    56da:	2b00      	cmp	r3, #0
    56dc:	d015      	beq.n	570a <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    56de:	f107 030c 	add.w	r3, r7, #12
    56e2:	4618      	mov	r0, r3
    56e4:	4b0f      	ldr	r3, [pc, #60]	; (5724 <timer_remove_task+0xe4>)
    56e6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    56e8:	687b      	ldr	r3, [r7, #4]
    56ea:	7e1b      	ldrb	r3, [r3, #24]
    56ec:	b2db      	uxtb	r3, r3
    56ee:	f023 0302 	bic.w	r3, r3, #2
    56f2:	b2da      	uxtb	r2, r3
    56f4:	687b      	ldr	r3, [r7, #4]
    56f6:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    56f8:	687b      	ldr	r3, [r7, #4]
    56fa:	4618      	mov	r0, r3
    56fc:	4b0a      	ldr	r3, [pc, #40]	; (5728 <timer_remove_task+0xe8>)
    56fe:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5700:	f107 030c 	add.w	r3, r7, #12
    5704:	4618      	mov	r0, r3
    5706:	4b09      	ldr	r3, [pc, #36]	; (572c <timer_remove_task+0xec>)
    5708:	4798      	blx	r3
	}

	return ERR_NONE;
    570a:	2300      	movs	r3, #0
}
    570c:	4618      	mov	r0, r3
    570e:	3710      	adds	r7, #16
    5710:	46bd      	mov	sp, r7
    5712:	bd80      	pop	{r7, pc}
    5714:	0001a694 	.word	0x0001a694
    5718:	00006241 	.word	0x00006241
    571c:	00006269 	.word	0x00006269
    5720:	000063cb 	.word	0x000063cb
    5724:	0000e51d 	.word	0x0000e51d
    5728:	0000b435 	.word	0x0000b435
    572c:	0000e543 	.word	0x0000e543

00005730 <timer_get_clock_cycles_in_tick>:

/**
 * \brief Retrieve the amount of clock cycles in a tick
 */
int32_t timer_get_clock_cycles_in_tick(const struct timer_descriptor *const descr, uint32_t *const cycles)
{
    5730:	b580      	push	{r7, lr}
    5732:	b082      	sub	sp, #8
    5734:	af00      	add	r7, sp, #0
    5736:	6078      	str	r0, [r7, #4]
    5738:	6039      	str	r1, [r7, #0]
	ASSERT(descr && cycles);
    573a:	687b      	ldr	r3, [r7, #4]
    573c:	2b00      	cmp	r3, #0
    573e:	d004      	beq.n	574a <timer_get_clock_cycles_in_tick+0x1a>
    5740:	683b      	ldr	r3, [r7, #0]
    5742:	2b00      	cmp	r3, #0
    5744:	d001      	beq.n	574a <timer_get_clock_cycles_in_tick+0x1a>
    5746:	2301      	movs	r3, #1
    5748:	e000      	b.n	574c <timer_get_clock_cycles_in_tick+0x1c>
    574a:	2300      	movs	r3, #0
    574c:	f003 0301 	and.w	r3, r3, #1
    5750:	b2db      	uxtb	r3, r3
    5752:	22af      	movs	r2, #175	; 0xaf
    5754:	4907      	ldr	r1, [pc, #28]	; (5774 <timer_get_clock_cycles_in_tick+0x44>)
    5756:	4618      	mov	r0, r3
    5758:	4b07      	ldr	r3, [pc, #28]	; (5778 <timer_get_clock_cycles_in_tick+0x48>)
    575a:	4798      	blx	r3
	*cycles = _timer_get_period(&descr->device);
    575c:	687b      	ldr	r3, [r7, #4]
    575e:	4618      	mov	r0, r3
    5760:	4b06      	ldr	r3, [pc, #24]	; (577c <timer_get_clock_cycles_in_tick+0x4c>)
    5762:	4798      	blx	r3
    5764:	4602      	mov	r2, r0
    5766:	683b      	ldr	r3, [r7, #0]
    5768:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    576a:	2300      	movs	r3, #0
}
    576c:	4618      	mov	r0, r3
    576e:	3708      	adds	r7, #8
    5770:	46bd      	mov	sp, r7
    5772:	bd80      	pop	{r7, pc}
    5774:	0001a694 	.word	0x0001a694
    5778:	00006241 	.word	0x00006241
    577c:	0000b365 	.word	0x0000b365

00005780 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    5780:	b580      	push	{r7, lr}
    5782:	b088      	sub	sp, #32
    5784:	af00      	add	r7, sp, #0
    5786:	60f8      	str	r0, [r7, #12]
    5788:	60b9      	str	r1, [r7, #8]
    578a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    578c:	2300      	movs	r3, #0
    578e:	61bb      	str	r3, [r7, #24]
    5790:	68f8      	ldr	r0, [r7, #12]
    5792:	4b23      	ldr	r3, [pc, #140]	; (5820 <timer_add_timer_task+0xa0>)
    5794:	4798      	blx	r3
    5796:	6138      	str	r0, [r7, #16]

	if (!head) {
    5798:	693b      	ldr	r3, [r7, #16]
    579a:	2b00      	cmp	r3, #0
    579c:	d104      	bne.n	57a8 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    579e:	68b9      	ldr	r1, [r7, #8]
    57a0:	68f8      	ldr	r0, [r7, #12]
    57a2:	4b20      	ldr	r3, [pc, #128]	; (5824 <timer_add_timer_task+0xa4>)
    57a4:	4798      	blx	r3
		return;
    57a6:	e037      	b.n	5818 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    57a8:	693b      	ldr	r3, [r7, #16]
    57aa:	61fb      	str	r3, [r7, #28]
    57ac:	e022      	b.n	57f4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    57ae:	69fb      	ldr	r3, [r7, #28]
    57b0:	685a      	ldr	r2, [r3, #4]
    57b2:	687b      	ldr	r3, [r7, #4]
    57b4:	429a      	cmp	r2, r3
    57b6:	d808      	bhi.n	57ca <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    57b8:	69fb      	ldr	r3, [r7, #28]
    57ba:	689a      	ldr	r2, [r3, #8]
    57bc:	69fb      	ldr	r3, [r7, #28]
    57be:	6859      	ldr	r1, [r3, #4]
    57c0:	687b      	ldr	r3, [r7, #4]
    57c2:	1acb      	subs	r3, r1, r3
    57c4:	4413      	add	r3, r2
    57c6:	617b      	str	r3, [r7, #20]
    57c8:	e009      	b.n	57de <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    57ca:	69fb      	ldr	r3, [r7, #28]
    57cc:	689a      	ldr	r2, [r3, #8]
    57ce:	69fb      	ldr	r3, [r7, #28]
    57d0:	685b      	ldr	r3, [r3, #4]
    57d2:	441a      	add	r2, r3
    57d4:	687b      	ldr	r3, [r7, #4]
    57d6:	425b      	negs	r3, r3
    57d8:	4413      	add	r3, r2
    57da:	3301      	adds	r3, #1
    57dc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    57de:	68bb      	ldr	r3, [r7, #8]
    57e0:	689a      	ldr	r2, [r3, #8]
    57e2:	697b      	ldr	r3, [r7, #20]
    57e4:	429a      	cmp	r2, r3
    57e6:	d909      	bls.n	57fc <timer_add_timer_task+0x7c>
			break;
		prev = it;
    57e8:	69fb      	ldr	r3, [r7, #28]
    57ea:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    57ec:	69f8      	ldr	r0, [r7, #28]
    57ee:	4b0e      	ldr	r3, [pc, #56]	; (5828 <timer_add_timer_task+0xa8>)
    57f0:	4798      	blx	r3
    57f2:	61f8      	str	r0, [r7, #28]
    57f4:	69fb      	ldr	r3, [r7, #28]
    57f6:	2b00      	cmp	r3, #0
    57f8:	d1d9      	bne.n	57ae <timer_add_timer_task+0x2e>
    57fa:	e000      	b.n	57fe <timer_add_timer_task+0x7e>
			break;
    57fc:	bf00      	nop
	}

	if (it == head) {
    57fe:	69fa      	ldr	r2, [r7, #28]
    5800:	693b      	ldr	r3, [r7, #16]
    5802:	429a      	cmp	r2, r3
    5804:	d104      	bne.n	5810 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    5806:	68b9      	ldr	r1, [r7, #8]
    5808:	68f8      	ldr	r0, [r7, #12]
    580a:	4b06      	ldr	r3, [pc, #24]	; (5824 <timer_add_timer_task+0xa4>)
    580c:	4798      	blx	r3
    580e:	e003      	b.n	5818 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    5810:	68b9      	ldr	r1, [r7, #8]
    5812:	69b8      	ldr	r0, [r7, #24]
    5814:	4b05      	ldr	r3, [pc, #20]	; (582c <timer_add_timer_task+0xac>)
    5816:	4798      	blx	r3
	}
}
    5818:	3720      	adds	r7, #32
    581a:	46bd      	mov	sp, r7
    581c:	bd80      	pop	{r7, pc}
    581e:	bf00      	nop
    5820:	000053fd 	.word	0x000053fd
    5824:	000062a1 	.word	0x000062a1
    5828:	00005415 	.word	0x00005415
    582c:	000062f9 	.word	0x000062f9

00005830 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    5830:	b580      	push	{r7, lr}
    5832:	b086      	sub	sp, #24
    5834:	af00      	add	r7, sp, #0
    5836:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    5838:	687b      	ldr	r3, [r7, #4]
    583a:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    583c:	693b      	ldr	r3, [r7, #16]
    583e:	3314      	adds	r3, #20
    5840:	4618      	mov	r0, r3
    5842:	4b27      	ldr	r3, [pc, #156]	; (58e0 <timer_process_counted+0xb0>)
    5844:	4798      	blx	r3
    5846:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    5848:	693b      	ldr	r3, [r7, #16]
    584a:	691b      	ldr	r3, [r3, #16]
    584c:	1c5a      	adds	r2, r3, #1
    584e:	693b      	ldr	r3, [r7, #16]
    5850:	611a      	str	r2, [r3, #16]
    5852:	693b      	ldr	r3, [r7, #16]
    5854:	691b      	ldr	r3, [r3, #16]
    5856:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    5858:	693b      	ldr	r3, [r7, #16]
    585a:	7e1b      	ldrb	r3, [r3, #24]
    585c:	b2db      	uxtb	r3, r3
    585e:	f003 0301 	and.w	r3, r3, #1
    5862:	2b00      	cmp	r3, #0
    5864:	d106      	bne.n	5874 <timer_process_counted+0x44>
    5866:	693b      	ldr	r3, [r7, #16]
    5868:	7e1b      	ldrb	r3, [r3, #24]
    586a:	b2db      	uxtb	r3, r3
    586c:	f003 0302 	and.w	r3, r3, #2
    5870:	2b00      	cmp	r3, #0
    5872:	d027      	beq.n	58c4 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    5874:	693b      	ldr	r3, [r7, #16]
    5876:	7e1b      	ldrb	r3, [r3, #24]
    5878:	b2db      	uxtb	r3, r3
    587a:	f043 0302 	orr.w	r3, r3, #2
    587e:	b2da      	uxtb	r2, r3
    5880:	693b      	ldr	r3, [r7, #16]
    5882:	761a      	strb	r2, [r3, #24]
		return;
    5884:	e029      	b.n	58da <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    5886:	697b      	ldr	r3, [r7, #20]
    5888:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    588a:	693b      	ldr	r3, [r7, #16]
    588c:	3314      	adds	r3, #20
    588e:	4618      	mov	r0, r3
    5890:	4b14      	ldr	r3, [pc, #80]	; (58e4 <timer_process_counted+0xb4>)
    5892:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    5894:	68bb      	ldr	r3, [r7, #8]
    5896:	7c1b      	ldrb	r3, [r3, #16]
    5898:	2b01      	cmp	r3, #1
    589a:	d109      	bne.n	58b0 <timer_process_counted+0x80>
			tmp->time_label = time;
    589c:	68bb      	ldr	r3, [r7, #8]
    589e:	68fa      	ldr	r2, [r7, #12]
    58a0:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    58a2:	693b      	ldr	r3, [r7, #16]
    58a4:	3314      	adds	r3, #20
    58a6:	68fa      	ldr	r2, [r7, #12]
    58a8:	68b9      	ldr	r1, [r7, #8]
    58aa:	4618      	mov	r0, r3
    58ac:	4b0e      	ldr	r3, [pc, #56]	; (58e8 <timer_process_counted+0xb8>)
    58ae:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    58b0:	693b      	ldr	r3, [r7, #16]
    58b2:	3314      	adds	r3, #20
    58b4:	4618      	mov	r0, r3
    58b6:	4b0a      	ldr	r3, [pc, #40]	; (58e0 <timer_process_counted+0xb0>)
    58b8:	4798      	blx	r3
    58ba:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    58bc:	68bb      	ldr	r3, [r7, #8]
    58be:	68db      	ldr	r3, [r3, #12]
    58c0:	68b8      	ldr	r0, [r7, #8]
    58c2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    58c4:	697b      	ldr	r3, [r7, #20]
    58c6:	2b00      	cmp	r3, #0
    58c8:	d007      	beq.n	58da <timer_process_counted+0xaa>
    58ca:	697b      	ldr	r3, [r7, #20]
    58cc:	685b      	ldr	r3, [r3, #4]
    58ce:	68fa      	ldr	r2, [r7, #12]
    58d0:	1ad2      	subs	r2, r2, r3
    58d2:	697b      	ldr	r3, [r7, #20]
    58d4:	689b      	ldr	r3, [r3, #8]
    58d6:	429a      	cmp	r2, r3
    58d8:	d2d5      	bcs.n	5886 <timer_process_counted+0x56>
	}
}
    58da:	3718      	adds	r7, #24
    58dc:	46bd      	mov	sp, r7
    58de:	bd80      	pop	{r7, pc}
    58e0:	000053fd 	.word	0x000053fd
    58e4:	00006399 	.word	0x00006399
    58e8:	00005781 	.word	0x00005781

000058ec <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    58ec:	b480      	push	{r7}
    58ee:	b085      	sub	sp, #20
    58f0:	af00      	add	r7, sp, #0
    58f2:	4603      	mov	r3, r0
    58f4:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    58f6:	2300      	movs	r3, #0
    58f8:	73fb      	strb	r3, [r7, #15]
    58fa:	e029      	b.n	5950 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    58fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5900:	4a19      	ldr	r2, [pc, #100]	; (5968 <_usb_d_find_ep+0x7c>)
    5902:	015b      	lsls	r3, r3, #5
    5904:	4413      	add	r3, r2
    5906:	3301      	adds	r3, #1
    5908:	781b      	ldrb	r3, [r3, #0]
    590a:	79fa      	ldrb	r2, [r7, #7]
    590c:	429a      	cmp	r2, r3
    590e:	d102      	bne.n	5916 <_usb_d_find_ep+0x2a>
			return i;
    5910:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5914:	e022      	b.n	595c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    5916:	f997 300f 	ldrsb.w	r3, [r7, #15]
    591a:	4a13      	ldr	r2, [pc, #76]	; (5968 <_usb_d_find_ep+0x7c>)
    591c:	015b      	lsls	r3, r3, #5
    591e:	4413      	add	r3, r2
    5920:	781b      	ldrb	r3, [r3, #0]
    5922:	2b00      	cmp	r3, #0
    5924:	d10e      	bne.n	5944 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    5926:	79fb      	ldrb	r3, [r7, #7]
    5928:	f003 030f 	and.w	r3, r3, #15
    592c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    5930:	490d      	ldr	r1, [pc, #52]	; (5968 <_usb_d_find_ep+0x7c>)
    5932:	0152      	lsls	r2, r2, #5
    5934:	440a      	add	r2, r1
    5936:	3201      	adds	r2, #1
    5938:	7812      	ldrb	r2, [r2, #0]
    593a:	4293      	cmp	r3, r2
    593c:	d102      	bne.n	5944 <_usb_d_find_ep+0x58>
			return i;
    593e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5942:	e00b      	b.n	595c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5944:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5948:	b2db      	uxtb	r3, r3
    594a:	3301      	adds	r3, #1
    594c:	b2db      	uxtb	r3, r3
    594e:	73fb      	strb	r3, [r7, #15]
    5950:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5954:	2b03      	cmp	r3, #3
    5956:	ddd1      	ble.n	58fc <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    5958:	f04f 33ff 	mov.w	r3, #4294967295
}
    595c:	4618      	mov	r0, r3
    595e:	3714      	adds	r7, #20
    5960:	46bd      	mov	sp, r7
    5962:	f85d 7b04 	ldr.w	r7, [sp], #4
    5966:	4770      	bx	lr
    5968:	200022c0 	.word	0x200022c0

0000596c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    596c:	b580      	push	{r7, lr}
    596e:	b088      	sub	sp, #32
    5970:	af00      	add	r7, sp, #0
    5972:	60ba      	str	r2, [r7, #8]
    5974:	607b      	str	r3, [r7, #4]
    5976:	4603      	mov	r3, r0
    5978:	73fb      	strb	r3, [r7, #15]
    597a:	460b      	mov	r3, r1
    597c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    597e:	68bb      	ldr	r3, [r7, #8]
    5980:	617b      	str	r3, [r7, #20]
    5982:	687b      	ldr	r3, [r7, #4]
    5984:	61bb      	str	r3, [r7, #24]
    5986:	7bbb      	ldrb	r3, [r7, #14]
    5988:	2b00      	cmp	r3, #0
    598a:	d004      	beq.n	5996 <_usb_d_trans+0x2a>
    598c:	7bfb      	ldrb	r3, [r7, #15]
    598e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5992:	b2db      	uxtb	r3, r3
    5994:	e003      	b.n	599e <_usb_d_trans+0x32>
    5996:	7bfb      	ldrb	r3, [r7, #15]
    5998:	f003 030f 	and.w	r3, r3, #15
    599c:	b2db      	uxtb	r3, r3
    599e:	773b      	strb	r3, [r7, #28]
    59a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    59a4:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    59a6:	f107 0314 	add.w	r3, r7, #20
    59aa:	4618      	mov	r0, r3
    59ac:	4b03      	ldr	r3, [pc, #12]	; (59bc <_usb_d_trans+0x50>)
    59ae:	4798      	blx	r3
    59b0:	4603      	mov	r3, r0
}
    59b2:	4618      	mov	r0, r3
    59b4:	3720      	adds	r7, #32
    59b6:	46bd      	mov	sp, r7
    59b8:	bd80      	pop	{r7, pc}
    59ba:	bf00      	nop
    59bc:	0000db51 	.word	0x0000db51

000059c0 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    59c0:	b480      	push	{r7}
    59c2:	b085      	sub	sp, #20
    59c4:	af00      	add	r7, sp, #0
    59c6:	60f8      	str	r0, [r7, #12]
    59c8:	60b9      	str	r1, [r7, #8]
    59ca:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    59cc:	2300      	movs	r3, #0
}
    59ce:	4618      	mov	r0, r3
    59d0:	3714      	adds	r7, #20
    59d2:	46bd      	mov	sp, r7
    59d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59d8:	4770      	bx	lr
	...

000059dc <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    59dc:	b580      	push	{r7, lr}
    59de:	b086      	sub	sp, #24
    59e0:	af00      	add	r7, sp, #0
    59e2:	4603      	mov	r3, r0
    59e4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    59e6:	79fb      	ldrb	r3, [r7, #7]
    59e8:	4618      	mov	r0, r3
    59ea:	4b2a      	ldr	r3, [pc, #168]	; (5a94 <usb_d_cb_trans_setup+0xb8>)
    59ec:	4798      	blx	r3
    59ee:	4603      	mov	r3, r0
    59f0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    59f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    59f6:	015b      	lsls	r3, r3, #5
    59f8:	4a27      	ldr	r2, [pc, #156]	; (5a98 <usb_d_cb_trans_setup+0xbc>)
    59fa:	4413      	add	r3, r2
    59fc:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    59fe:	693b      	ldr	r3, [r7, #16]
    5a00:	330c      	adds	r3, #12
    5a02:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    5a04:	79fb      	ldrb	r3, [r7, #7]
    5a06:	68f9      	ldr	r1, [r7, #12]
    5a08:	4618      	mov	r0, r3
    5a0a:	4b24      	ldr	r3, [pc, #144]	; (5a9c <usb_d_cb_trans_setup+0xc0>)
    5a0c:	4798      	blx	r3
    5a0e:	4603      	mov	r3, r0
    5a10:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    5a12:	7afb      	ldrb	r3, [r7, #11]
    5a14:	2b08      	cmp	r3, #8
    5a16:	d00d      	beq.n	5a34 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5a18:	79fb      	ldrb	r3, [r7, #7]
    5a1a:	2101      	movs	r1, #1
    5a1c:	4618      	mov	r0, r3
    5a1e:	4b20      	ldr	r3, [pc, #128]	; (5aa0 <usb_d_cb_trans_setup+0xc4>)
    5a20:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5a22:	79fb      	ldrb	r3, [r7, #7]
    5a24:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5a28:	b2db      	uxtb	r3, r3
    5a2a:	2101      	movs	r1, #1
    5a2c:	4618      	mov	r0, r3
    5a2e:	4b1c      	ldr	r3, [pc, #112]	; (5aa0 <usb_d_cb_trans_setup+0xc4>)
    5a30:	4798      	blx	r3
		return;
    5a32:	e02b      	b.n	5a8c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5a34:	79fb      	ldrb	r3, [r7, #7]
    5a36:	2100      	movs	r1, #0
    5a38:	4618      	mov	r0, r3
    5a3a:	4b19      	ldr	r3, [pc, #100]	; (5aa0 <usb_d_cb_trans_setup+0xc4>)
    5a3c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    5a3e:	79fb      	ldrb	r3, [r7, #7]
    5a40:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5a44:	b2db      	uxtb	r3, r3
    5a46:	2100      	movs	r1, #0
    5a48:	4618      	mov	r0, r3
    5a4a:	4b15      	ldr	r3, [pc, #84]	; (5aa0 <usb_d_cb_trans_setup+0xc4>)
    5a4c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    5a4e:	693b      	ldr	r3, [r7, #16]
    5a50:	2201      	movs	r2, #1
    5a52:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    5a54:	693b      	ldr	r3, [r7, #16]
    5a56:	695b      	ldr	r3, [r3, #20]
    5a58:	79fa      	ldrb	r2, [r7, #7]
    5a5a:	68f9      	ldr	r1, [r7, #12]
    5a5c:	4610      	mov	r0, r2
    5a5e:	4798      	blx	r3
    5a60:	4603      	mov	r3, r0
    5a62:	f083 0301 	eor.w	r3, r3, #1
    5a66:	b2db      	uxtb	r3, r3
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d00f      	beq.n	5a8c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    5a6c:	693b      	ldr	r3, [r7, #16]
    5a6e:	2205      	movs	r2, #5
    5a70:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5a72:	79fb      	ldrb	r3, [r7, #7]
    5a74:	2101      	movs	r1, #1
    5a76:	4618      	mov	r0, r3
    5a78:	4b09      	ldr	r3, [pc, #36]	; (5aa0 <usb_d_cb_trans_setup+0xc4>)
    5a7a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5a7c:	79fb      	ldrb	r3, [r7, #7]
    5a7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5a82:	b2db      	uxtb	r3, r3
    5a84:	2101      	movs	r1, #1
    5a86:	4618      	mov	r0, r3
    5a88:	4b05      	ldr	r3, [pc, #20]	; (5aa0 <usb_d_cb_trans_setup+0xc4>)
    5a8a:	4798      	blx	r3
	}
}
    5a8c:	3718      	adds	r7, #24
    5a8e:	46bd      	mov	sp, r7
    5a90:	bd80      	pop	{r7, pc}
    5a92:	bf00      	nop
    5a94:	000058ed 	.word	0x000058ed
    5a98:	200022c0 	.word	0x200022c0
    5a9c:	0000daa9 	.word	0x0000daa9
    5aa0:	0000d921 	.word	0x0000d921

00005aa4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    5aa4:	b580      	push	{r7, lr}
    5aa6:	b084      	sub	sp, #16
    5aa8:	af00      	add	r7, sp, #0
    5aaa:	4603      	mov	r3, r0
    5aac:	6039      	str	r1, [r7, #0]
    5aae:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5ab0:	79fb      	ldrb	r3, [r7, #7]
    5ab2:	4618      	mov	r0, r3
    5ab4:	4b0d      	ldr	r3, [pc, #52]	; (5aec <usb_d_cb_trans_more+0x48>)
    5ab6:	4798      	blx	r3
    5ab8:	4603      	mov	r3, r0
    5aba:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5ac0:	015b      	lsls	r3, r3, #5
    5ac2:	4a0b      	ldr	r2, [pc, #44]	; (5af0 <usb_d_cb_trans_more+0x4c>)
    5ac4:	4413      	add	r3, r2
    5ac6:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    5ac8:	68bb      	ldr	r3, [r7, #8]
    5aca:	789b      	ldrb	r3, [r3, #2]
    5acc:	2b03      	cmp	r3, #3
    5ace:	d107      	bne.n	5ae0 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    5ad0:	68bb      	ldr	r3, [r7, #8]
    5ad2:	699b      	ldr	r3, [r3, #24]
    5ad4:	79fa      	ldrb	r2, [r7, #7]
    5ad6:	6839      	ldr	r1, [r7, #0]
    5ad8:	4610      	mov	r0, r2
    5ada:	4798      	blx	r3
    5adc:	4603      	mov	r3, r0
    5ade:	e000      	b.n	5ae2 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    5ae0:	2300      	movs	r3, #0
}
    5ae2:	4618      	mov	r0, r3
    5ae4:	3710      	adds	r7, #16
    5ae6:	46bd      	mov	sp, r7
    5ae8:	bd80      	pop	{r7, pc}
    5aea:	bf00      	nop
    5aec:	000058ed 	.word	0x000058ed
    5af0:	200022c0 	.word	0x200022c0

00005af4 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    5af4:	b590      	push	{r4, r7, lr}
    5af6:	b087      	sub	sp, #28
    5af8:	af02      	add	r7, sp, #8
    5afa:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    5afc:	687b      	ldr	r3, [r7, #4]
    5afe:	789b      	ldrb	r3, [r3, #2]
    5b00:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    5b02:	687b      	ldr	r3, [r7, #4]
    5b04:	7b1b      	ldrb	r3, [r3, #12]
    5b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5b0a:	2b00      	cmp	r3, #0
    5b0c:	bf14      	ite	ne
    5b0e:	2301      	movne	r3, #1
    5b10:	2300      	moveq	r3, #0
    5b12:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    5b14:	7bfb      	ldrb	r3, [r7, #15]
    5b16:	2b03      	cmp	r3, #3
    5b18:	d13a      	bne.n	5b90 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    5b1a:	687b      	ldr	r3, [r7, #4]
    5b1c:	69db      	ldr	r3, [r3, #28]
    5b1e:	687a      	ldr	r2, [r7, #4]
    5b20:	7850      	ldrb	r0, [r2, #1]
    5b22:	687a      	ldr	r2, [r7, #4]
    5b24:	320c      	adds	r2, #12
    5b26:	2101      	movs	r1, #1
    5b28:	4798      	blx	r3
    5b2a:	4603      	mov	r3, r0
    5b2c:	737b      	strb	r3, [r7, #13]
		if (err) {
    5b2e:	7b7b      	ldrb	r3, [r7, #13]
    5b30:	2b00      	cmp	r3, #0
    5b32:	d015      	beq.n	5b60 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    5b34:	687b      	ldr	r3, [r7, #4]
    5b36:	2205      	movs	r2, #5
    5b38:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    5b3a:	687b      	ldr	r3, [r7, #4]
    5b3c:	2202      	movs	r2, #2
    5b3e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    5b40:	7bbb      	ldrb	r3, [r7, #14]
    5b42:	2b00      	cmp	r3, #0
    5b44:	d002      	beq.n	5b4c <usb_d_ctrl_trans_done+0x58>
    5b46:	687b      	ldr	r3, [r7, #4]
    5b48:	785b      	ldrb	r3, [r3, #1]
    5b4a:	e004      	b.n	5b56 <usb_d_ctrl_trans_done+0x62>
    5b4c:	687b      	ldr	r3, [r7, #4]
    5b4e:	785b      	ldrb	r3, [r3, #1]
    5b50:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5b54:	b2db      	uxtb	r3, r3
    5b56:	2101      	movs	r1, #1
    5b58:	4618      	mov	r0, r3
    5b5a:	4b15      	ldr	r3, [pc, #84]	; (5bb0 <usb_d_ctrl_trans_done+0xbc>)
    5b5c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    5b5e:	e022      	b.n	5ba6 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5b60:	687b      	ldr	r3, [r7, #4]
    5b62:	2204      	movs	r2, #4
    5b64:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	7858      	ldrb	r0, [r3, #1]
    5b6a:	7bbb      	ldrb	r3, [r7, #14]
    5b6c:	2b00      	cmp	r3, #0
    5b6e:	bf14      	ite	ne
    5b70:	2301      	movne	r3, #1
    5b72:	2300      	moveq	r3, #0
    5b74:	b2db      	uxtb	r3, r3
    5b76:	f083 0301 	eor.w	r3, r3, #1
    5b7a:	b2db      	uxtb	r3, r3
    5b7c:	f003 0301 	and.w	r3, r3, #1
    5b80:	b2d9      	uxtb	r1, r3
    5b82:	2301      	movs	r3, #1
    5b84:	9300      	str	r3, [sp, #0]
    5b86:	2300      	movs	r3, #0
    5b88:	2200      	movs	r2, #0
    5b8a:	4c0a      	ldr	r4, [pc, #40]	; (5bb4 <usb_d_ctrl_trans_done+0xc0>)
    5b8c:	47a0      	blx	r4
}
    5b8e:	e00a      	b.n	5ba6 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    5b90:	687b      	ldr	r3, [r7, #4]
    5b92:	69db      	ldr	r3, [r3, #28]
    5b94:	687a      	ldr	r2, [r7, #4]
    5b96:	7850      	ldrb	r0, [r2, #1]
    5b98:	687a      	ldr	r2, [r7, #4]
    5b9a:	320c      	adds	r2, #12
    5b9c:	2100      	movs	r1, #0
    5b9e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	2202      	movs	r2, #2
    5ba4:	709a      	strb	r2, [r3, #2]
}
    5ba6:	bf00      	nop
    5ba8:	3714      	adds	r7, #20
    5baa:	46bd      	mov	sp, r7
    5bac:	bd90      	pop	{r4, r7, pc}
    5bae:	bf00      	nop
    5bb0:	0000d921 	.word	0x0000d921
    5bb4:	0000596d 	.word	0x0000596d

00005bb8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    5bb8:	b580      	push	{r7, lr}
    5bba:	b086      	sub	sp, #24
    5bbc:	af00      	add	r7, sp, #0
    5bbe:	4603      	mov	r3, r0
    5bc0:	60b9      	str	r1, [r7, #8]
    5bc2:	607a      	str	r2, [r7, #4]
    5bc4:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5bc6:	7bfb      	ldrb	r3, [r7, #15]
    5bc8:	4618      	mov	r0, r3
    5bca:	4b2f      	ldr	r3, [pc, #188]	; (5c88 <_usb_d_cb_trans_done+0xd0>)
    5bcc:	4798      	blx	r3
    5bce:	4603      	mov	r3, r0
    5bd0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5bd6:	015b      	lsls	r3, r3, #5
    5bd8:	4a2c      	ldr	r2, [pc, #176]	; (5c8c <_usb_d_cb_trans_done+0xd4>)
    5bda:	4413      	add	r3, r2
    5bdc:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    5bde:	68bb      	ldr	r3, [r7, #8]
    5be0:	2b00      	cmp	r3, #0
    5be2:	d10e      	bne.n	5c02 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5be4:	693b      	ldr	r3, [r7, #16]
    5be6:	2200      	movs	r2, #0
    5be8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5bea:	693b      	ldr	r3, [r7, #16]
    5bec:	781b      	ldrb	r3, [r3, #0]
    5bee:	2b00      	cmp	r3, #0
    5bf0:	d103      	bne.n	5bfa <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    5bf2:	6938      	ldr	r0, [r7, #16]
    5bf4:	4b26      	ldr	r3, [pc, #152]	; (5c90 <_usb_d_cb_trans_done+0xd8>)
    5bf6:	4798      	blx	r3
			return;
    5bf8:	e043      	b.n	5c82 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5bfa:	693b      	ldr	r3, [r7, #16]
    5bfc:	2201      	movs	r2, #1
    5bfe:	709a      	strb	r2, [r3, #2]
    5c00:	e038      	b.n	5c74 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    5c02:	68bb      	ldr	r3, [r7, #8]
    5c04:	2b01      	cmp	r3, #1
    5c06:	d113      	bne.n	5c30 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    5c08:	693b      	ldr	r3, [r7, #16]
    5c0a:	2202      	movs	r2, #2
    5c0c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5c0e:	693b      	ldr	r3, [r7, #16]
    5c10:	781b      	ldrb	r3, [r3, #0]
    5c12:	2b00      	cmp	r3, #0
    5c14:	d108      	bne.n	5c28 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5c16:	693b      	ldr	r3, [r7, #16]
    5c18:	2202      	movs	r2, #2
    5c1a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5c1c:	7bfb      	ldrb	r3, [r7, #15]
    5c1e:	2100      	movs	r1, #0
    5c20:	4618      	mov	r0, r3
    5c22:	4b1c      	ldr	r3, [pc, #112]	; (5c94 <_usb_d_cb_trans_done+0xdc>)
    5c24:	4798      	blx	r3
    5c26:	e025      	b.n	5c74 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    5c28:	693b      	ldr	r3, [r7, #16]
    5c2a:	2205      	movs	r2, #5
    5c2c:	709a      	strb	r2, [r3, #2]
    5c2e:	e021      	b.n	5c74 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    5c30:	68bb      	ldr	r3, [r7, #8]
    5c32:	2b02      	cmp	r3, #2
    5c34:	d10e      	bne.n	5c54 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    5c36:	693b      	ldr	r3, [r7, #16]
    5c38:	2204      	movs	r2, #4
    5c3a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5c3c:	693b      	ldr	r3, [r7, #16]
    5c3e:	781b      	ldrb	r3, [r3, #0]
    5c40:	2b00      	cmp	r3, #0
    5c42:	d103      	bne.n	5c4c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5c44:	693b      	ldr	r3, [r7, #16]
    5c46:	2202      	movs	r2, #2
    5c48:	709a      	strb	r2, [r3, #2]
			return;
    5c4a:	e01a      	b.n	5c82 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5c4c:	693b      	ldr	r3, [r7, #16]
    5c4e:	2201      	movs	r2, #1
    5c50:	709a      	strb	r2, [r3, #2]
    5c52:	e00f      	b.n	5c74 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    5c54:	68bb      	ldr	r3, [r7, #8]
    5c56:	2b03      	cmp	r3, #3
    5c58:	d106      	bne.n	5c68 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    5c5a:	693b      	ldr	r3, [r7, #16]
    5c5c:	2200      	movs	r2, #0
    5c5e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    5c60:	693b      	ldr	r3, [r7, #16]
    5c62:	2205      	movs	r2, #5
    5c64:	70da      	strb	r2, [r3, #3]
    5c66:	e005      	b.n	5c74 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    5c68:	693b      	ldr	r3, [r7, #16]
    5c6a:	2206      	movs	r2, #6
    5c6c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    5c6e:	693b      	ldr	r3, [r7, #16]
    5c70:	2206      	movs	r2, #6
    5c72:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    5c74:	693b      	ldr	r3, [r7, #16]
    5c76:	69db      	ldr	r3, [r3, #28]
    5c78:	693a      	ldr	r2, [r7, #16]
    5c7a:	78d1      	ldrb	r1, [r2, #3]
    5c7c:	687a      	ldr	r2, [r7, #4]
    5c7e:	7bf8      	ldrb	r0, [r7, #15]
    5c80:	4798      	blx	r3
}
    5c82:	3718      	adds	r7, #24
    5c84:	46bd      	mov	sp, r7
    5c86:	bd80      	pop	{r7, pc}
    5c88:	000058ed 	.word	0x000058ed
    5c8c:	200022c0 	.word	0x200022c0
    5c90:	00005af5 	.word	0x00005af5
    5c94:	0000d921 	.word	0x0000d921

00005c98 <usb_d_init>:

int32_t usb_d_init(void)
{
    5c98:	b580      	push	{r7, lr}
    5c9a:	b082      	sub	sp, #8
    5c9c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    5c9e:	4b21      	ldr	r3, [pc, #132]	; (5d24 <usb_d_init+0x8c>)
    5ca0:	4798      	blx	r3
    5ca2:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    5ca4:	683b      	ldr	r3, [r7, #0]
    5ca6:	2b00      	cmp	r3, #0
    5ca8:	da01      	bge.n	5cae <usb_d_init+0x16>
		return rc;
    5caa:	683b      	ldr	r3, [r7, #0]
    5cac:	e036      	b.n	5d1c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    5cae:	2280      	movs	r2, #128	; 0x80
    5cb0:	2100      	movs	r1, #0
    5cb2:	481d      	ldr	r0, [pc, #116]	; (5d28 <usb_d_init+0x90>)
    5cb4:	4b1d      	ldr	r3, [pc, #116]	; (5d2c <usb_d_init+0x94>)
    5cb6:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5cb8:	2300      	movs	r3, #0
    5cba:	71fb      	strb	r3, [r7, #7]
    5cbc:	e01e      	b.n	5cfc <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5cbe:	79fb      	ldrb	r3, [r7, #7]
    5cc0:	4a19      	ldr	r2, [pc, #100]	; (5d28 <usb_d_init+0x90>)
    5cc2:	015b      	lsls	r3, r3, #5
    5cc4:	4413      	add	r3, r2
    5cc6:	3301      	adds	r3, #1
    5cc8:	22ff      	movs	r2, #255	; 0xff
    5cca:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5ccc:	79fb      	ldrb	r3, [r7, #7]
    5cce:	4a16      	ldr	r2, [pc, #88]	; (5d28 <usb_d_init+0x90>)
    5cd0:	015b      	lsls	r3, r3, #5
    5cd2:	4413      	add	r3, r2
    5cd4:	3314      	adds	r3, #20
    5cd6:	4a16      	ldr	r2, [pc, #88]	; (5d30 <usb_d_init+0x98>)
    5cd8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    5cda:	79fb      	ldrb	r3, [r7, #7]
    5cdc:	4a12      	ldr	r2, [pc, #72]	; (5d28 <usb_d_init+0x90>)
    5cde:	015b      	lsls	r3, r3, #5
    5ce0:	4413      	add	r3, r2
    5ce2:	3318      	adds	r3, #24
    5ce4:	4a12      	ldr	r2, [pc, #72]	; (5d30 <usb_d_init+0x98>)
    5ce6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    5ce8:	79fb      	ldrb	r3, [r7, #7]
    5cea:	4a0f      	ldr	r2, [pc, #60]	; (5d28 <usb_d_init+0x90>)
    5cec:	015b      	lsls	r3, r3, #5
    5cee:	4413      	add	r3, r2
    5cf0:	331c      	adds	r3, #28
    5cf2:	4a0f      	ldr	r2, [pc, #60]	; (5d30 <usb_d_init+0x98>)
    5cf4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5cf6:	79fb      	ldrb	r3, [r7, #7]
    5cf8:	3301      	adds	r3, #1
    5cfa:	71fb      	strb	r3, [r7, #7]
    5cfc:	79fb      	ldrb	r3, [r7, #7]
    5cfe:	2b03      	cmp	r3, #3
    5d00:	d9dd      	bls.n	5cbe <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    5d02:	490c      	ldr	r1, [pc, #48]	; (5d34 <usb_d_init+0x9c>)
    5d04:	2000      	movs	r0, #0
    5d06:	4b0c      	ldr	r3, [pc, #48]	; (5d38 <usb_d_init+0xa0>)
    5d08:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5d0a:	490c      	ldr	r1, [pc, #48]	; (5d3c <usb_d_init+0xa4>)
    5d0c:	2001      	movs	r0, #1
    5d0e:	4b0a      	ldr	r3, [pc, #40]	; (5d38 <usb_d_init+0xa0>)
    5d10:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    5d12:	490b      	ldr	r1, [pc, #44]	; (5d40 <usb_d_init+0xa8>)
    5d14:	2002      	movs	r0, #2
    5d16:	4b08      	ldr	r3, [pc, #32]	; (5d38 <usb_d_init+0xa0>)
    5d18:	4798      	blx	r3
	return ERR_NONE;
    5d1a:	2300      	movs	r3, #0
}
    5d1c:	4618      	mov	r0, r3
    5d1e:	3708      	adds	r7, #8
    5d20:	46bd      	mov	sp, r7
    5d22:	bd80      	pop	{r7, pc}
    5d24:	0000d169 	.word	0x0000d169
    5d28:	200022c0 	.word	0x200022c0
    5d2c:	00016451 	.word	0x00016451
    5d30:	000059c1 	.word	0x000059c1
    5d34:	000059dd 	.word	0x000059dd
    5d38:	0000ddb1 	.word	0x0000ddb1
    5d3c:	00005aa5 	.word	0x00005aa5
    5d40:	00005bb9 	.word	0x00005bb9

00005d44 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5d44:	b580      	push	{r7, lr}
    5d46:	b082      	sub	sp, #8
    5d48:	af00      	add	r7, sp, #0
    5d4a:	4603      	mov	r3, r0
    5d4c:	6039      	str	r1, [r7, #0]
    5d4e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5d50:	79fb      	ldrb	r3, [r7, #7]
    5d52:	6839      	ldr	r1, [r7, #0]
    5d54:	4618      	mov	r0, r3
    5d56:	4b03      	ldr	r3, [pc, #12]	; (5d64 <usb_d_register_callback+0x20>)
    5d58:	4798      	blx	r3
}
    5d5a:	bf00      	nop
    5d5c:	3708      	adds	r7, #8
    5d5e:	46bd      	mov	sp, r7
    5d60:	bd80      	pop	{r7, pc}
    5d62:	bf00      	nop
    5d64:	0000dd69 	.word	0x0000dd69

00005d68 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    5d68:	b580      	push	{r7, lr}
    5d6a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    5d6c:	4b02      	ldr	r3, [pc, #8]	; (5d78 <usb_d_enable+0x10>)
    5d6e:	4798      	blx	r3
    5d70:	4603      	mov	r3, r0
}
    5d72:	4618      	mov	r0, r3
    5d74:	bd80      	pop	{r7, pc}
    5d76:	bf00      	nop
    5d78:	0000d259 	.word	0x0000d259

00005d7c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5d7c:	b580      	push	{r7, lr}
    5d7e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    5d80:	4b01      	ldr	r3, [pc, #4]	; (5d88 <usb_d_attach+0xc>)
    5d82:	4798      	blx	r3
}
    5d84:	bf00      	nop
    5d86:	bd80      	pop	{r7, pc}
    5d88:	0000d2dd 	.word	0x0000d2dd

00005d8c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5d8c:	b580      	push	{r7, lr}
    5d8e:	b082      	sub	sp, #8
    5d90:	af00      	add	r7, sp, #0
    5d92:	4603      	mov	r3, r0
    5d94:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    5d96:	79fb      	ldrb	r3, [r7, #7]
    5d98:	4618      	mov	r0, r3
    5d9a:	4b03      	ldr	r3, [pc, #12]	; (5da8 <usb_d_set_address+0x1c>)
    5d9c:	4798      	blx	r3
}
    5d9e:	bf00      	nop
    5da0:	3708      	adds	r7, #8
    5da2:	46bd      	mov	sp, r7
    5da4:	bd80      	pop	{r7, pc}
    5da6:	bf00      	nop
    5da8:	0000d2f1 	.word	0x0000d2f1

00005dac <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    5dac:	b580      	push	{r7, lr}
    5dae:	b082      	sub	sp, #8
    5db0:	af00      	add	r7, sp, #0
    5db2:	4603      	mov	r3, r0
    5db4:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    5db6:	79fb      	ldrb	r3, [r7, #7]
    5db8:	b29b      	uxth	r3, r3
    5dba:	461a      	mov	r2, r3
    5dbc:	2100      	movs	r1, #0
    5dbe:	2000      	movs	r0, #0
    5dc0:	4b03      	ldr	r3, [pc, #12]	; (5dd0 <usb_d_ep0_init+0x24>)
    5dc2:	4798      	blx	r3
    5dc4:	4603      	mov	r3, r0
}
    5dc6:	4618      	mov	r0, r3
    5dc8:	3708      	adds	r7, #8
    5dca:	46bd      	mov	sp, r7
    5dcc:	bd80      	pop	{r7, pc}
    5dce:	bf00      	nop
    5dd0:	00005dd5 	.word	0x00005dd5

00005dd4 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5dd4:	b580      	push	{r7, lr}
    5dd6:	b086      	sub	sp, #24
    5dd8:	af00      	add	r7, sp, #0
    5dda:	4603      	mov	r3, r0
    5ddc:	71fb      	strb	r3, [r7, #7]
    5dde:	460b      	mov	r3, r1
    5de0:	71bb      	strb	r3, [r7, #6]
    5de2:	4613      	mov	r3, r2
    5de4:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    5de6:	79fb      	ldrb	r3, [r7, #7]
    5de8:	4618      	mov	r0, r3
    5dea:	4b1e      	ldr	r3, [pc, #120]	; (5e64 <usb_d_ep_init+0x90>)
    5dec:	4798      	blx	r3
    5dee:	4603      	mov	r3, r0
    5df0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5df6:	015b      	lsls	r3, r3, #5
    5df8:	4a1b      	ldr	r2, [pc, #108]	; (5e68 <usb_d_ep_init+0x94>)
    5dfa:	4413      	add	r3, r2
    5dfc:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    5dfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5e02:	2b00      	cmp	r3, #0
    5e04:	db02      	blt.n	5e0c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    5e06:	f06f 0313 	mvn.w	r3, #19
    5e0a:	e027      	b.n	5e5c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    5e0c:	20ff      	movs	r0, #255	; 0xff
    5e0e:	4b15      	ldr	r3, [pc, #84]	; (5e64 <usb_d_ep_init+0x90>)
    5e10:	4798      	blx	r3
    5e12:	4603      	mov	r3, r0
    5e14:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    5e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5e1a:	2b00      	cmp	r3, #0
    5e1c:	da02      	bge.n	5e24 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    5e1e:	f06f 0314 	mvn.w	r3, #20
    5e22:	e01b      	b.n	5e5c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    5e24:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5e28:	015b      	lsls	r3, r3, #5
    5e2a:	4a0f      	ldr	r2, [pc, #60]	; (5e68 <usb_d_ep_init+0x94>)
    5e2c:	4413      	add	r3, r2
    5e2e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    5e30:	88ba      	ldrh	r2, [r7, #4]
    5e32:	79b9      	ldrb	r1, [r7, #6]
    5e34:	79fb      	ldrb	r3, [r7, #7]
    5e36:	4618      	mov	r0, r3
    5e38:	4b0c      	ldr	r3, [pc, #48]	; (5e6c <usb_d_ep_init+0x98>)
    5e3a:	4798      	blx	r3
    5e3c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5e3e:	68fb      	ldr	r3, [r7, #12]
    5e40:	2b00      	cmp	r3, #0
    5e42:	da01      	bge.n	5e48 <usb_d_ep_init+0x74>
		return rc;
    5e44:	68fb      	ldr	r3, [r7, #12]
    5e46:	e009      	b.n	5e5c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    5e48:	693b      	ldr	r3, [r7, #16]
    5e4a:	79fa      	ldrb	r2, [r7, #7]
    5e4c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    5e4e:	79bb      	ldrb	r3, [r7, #6]
    5e50:	f003 0303 	and.w	r3, r3, #3
    5e54:	b2da      	uxtb	r2, r3
    5e56:	693b      	ldr	r3, [r7, #16]
    5e58:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    5e5a:	2300      	movs	r3, #0
}
    5e5c:	4618      	mov	r0, r3
    5e5e:	3718      	adds	r7, #24
    5e60:	46bd      	mov	sp, r7
    5e62:	bd80      	pop	{r7, pc}
    5e64:	000058ed 	.word	0x000058ed
    5e68:	200022c0 	.word	0x200022c0
    5e6c:	0000d391 	.word	0x0000d391

00005e70 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    5e70:	b580      	push	{r7, lr}
    5e72:	b084      	sub	sp, #16
    5e74:	af00      	add	r7, sp, #0
    5e76:	4603      	mov	r3, r0
    5e78:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5e7a:	79fb      	ldrb	r3, [r7, #7]
    5e7c:	4618      	mov	r0, r3
    5e7e:	4b0d      	ldr	r3, [pc, #52]	; (5eb4 <usb_d_ep_deinit+0x44>)
    5e80:	4798      	blx	r3
    5e82:	4603      	mov	r3, r0
    5e84:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5e8a:	015b      	lsls	r3, r3, #5
    5e8c:	4a0a      	ldr	r2, [pc, #40]	; (5eb8 <usb_d_ep_deinit+0x48>)
    5e8e:	4413      	add	r3, r2
    5e90:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    5e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5e96:	2b00      	cmp	r3, #0
    5e98:	db07      	blt.n	5eaa <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5e9a:	79fb      	ldrb	r3, [r7, #7]
    5e9c:	4618      	mov	r0, r3
    5e9e:	4b07      	ldr	r3, [pc, #28]	; (5ebc <usb_d_ep_deinit+0x4c>)
    5ea0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    5ea2:	68bb      	ldr	r3, [r7, #8]
    5ea4:	22ff      	movs	r2, #255	; 0xff
    5ea6:	705a      	strb	r2, [r3, #1]
    5ea8:	e000      	b.n	5eac <usb_d_ep_deinit+0x3c>
		return;
    5eaa:	bf00      	nop
}
    5eac:	3710      	adds	r7, #16
    5eae:	46bd      	mov	sp, r7
    5eb0:	bd80      	pop	{r7, pc}
    5eb2:	bf00      	nop
    5eb4:	000058ed 	.word	0x000058ed
    5eb8:	200022c0 	.word	0x200022c0
    5ebc:	0000d4c5 	.word	0x0000d4c5

00005ec0 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5ec0:	b580      	push	{r7, lr}
    5ec2:	b086      	sub	sp, #24
    5ec4:	af00      	add	r7, sp, #0
    5ec6:	4603      	mov	r3, r0
    5ec8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5eca:	79fb      	ldrb	r3, [r7, #7]
    5ecc:	4618      	mov	r0, r3
    5ece:	4b15      	ldr	r3, [pc, #84]	; (5f24 <usb_d_ep_enable+0x64>)
    5ed0:	4798      	blx	r3
    5ed2:	4603      	mov	r3, r0
    5ed4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5ed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5eda:	015b      	lsls	r3, r3, #5
    5edc:	4a12      	ldr	r2, [pc, #72]	; (5f28 <usb_d_ep_enable+0x68>)
    5ede:	4413      	add	r3, r2
    5ee0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    5ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5ee6:	2b00      	cmp	r3, #0
    5ee8:	da02      	bge.n	5ef0 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    5eea:	f06f 0311 	mvn.w	r3, #17
    5eee:	e014      	b.n	5f1a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5ef0:	693b      	ldr	r3, [r7, #16]
    5ef2:	781b      	ldrb	r3, [r3, #0]
    5ef4:	2b00      	cmp	r3, #0
    5ef6:	d101      	bne.n	5efc <usb_d_ep_enable+0x3c>
    5ef8:	2202      	movs	r2, #2
    5efa:	e000      	b.n	5efe <usb_d_ep_enable+0x3e>
    5efc:	2201      	movs	r2, #1
    5efe:	693b      	ldr	r3, [r7, #16]
    5f00:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5f02:	79fb      	ldrb	r3, [r7, #7]
    5f04:	4618      	mov	r0, r3
    5f06:	4b09      	ldr	r3, [pc, #36]	; (5f2c <usb_d_ep_enable+0x6c>)
    5f08:	4798      	blx	r3
    5f0a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5f0c:	68fb      	ldr	r3, [r7, #12]
    5f0e:	2b00      	cmp	r3, #0
    5f10:	da02      	bge.n	5f18 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5f12:	693b      	ldr	r3, [r7, #16]
    5f14:	2200      	movs	r2, #0
    5f16:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    5f18:	68fb      	ldr	r3, [r7, #12]
}
    5f1a:	4618      	mov	r0, r3
    5f1c:	3718      	adds	r7, #24
    5f1e:	46bd      	mov	sp, r7
    5f20:	bd80      	pop	{r7, pc}
    5f22:	bf00      	nop
    5f24:	000058ed 	.word	0x000058ed
    5f28:	200022c0 	.word	0x200022c0
    5f2c:	0000d5a9 	.word	0x0000d5a9

00005f30 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5f30:	b590      	push	{r4, r7, lr}
    5f32:	b08d      	sub	sp, #52	; 0x34
    5f34:	af02      	add	r7, sp, #8
    5f36:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    5f38:	687b      	ldr	r3, [r7, #4]
    5f3a:	7a1b      	ldrb	r3, [r3, #8]
    5f3c:	4618      	mov	r0, r3
    5f3e:	4b51      	ldr	r3, [pc, #324]	; (6084 <usb_d_ep_transfer+0x154>)
    5f40:	4798      	blx	r3
    5f42:	4603      	mov	r3, r0
    5f44:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    5f46:	f997 301f 	ldrsb.w	r3, [r7, #31]
    5f4a:	015b      	lsls	r3, r3, #5
    5f4c:	4a4e      	ldr	r2, [pc, #312]	; (6088 <usb_d_ep_transfer+0x158>)
    5f4e:	4413      	add	r3, r2
    5f50:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5f52:	687b      	ldr	r3, [r7, #4]
    5f54:	7a1b      	ldrb	r3, [r3, #8]
    5f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5f5a:	2b00      	cmp	r3, #0
    5f5c:	bf14      	ite	ne
    5f5e:	2301      	movne	r3, #1
    5f60:	2300      	moveq	r3, #0
    5f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    5f66:	687b      	ldr	r3, [r7, #4]
    5f68:	7a5b      	ldrb	r3, [r3, #9]
    5f6a:	2b00      	cmp	r3, #0
    5f6c:	bf14      	ite	ne
    5f6e:	2301      	movne	r3, #1
    5f70:	2300      	moveq	r3, #0
    5f72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    5f76:	687b      	ldr	r3, [r7, #4]
    5f78:	685b      	ldr	r3, [r3, #4]
    5f7a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    5f7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    5f80:	2b00      	cmp	r3, #0
    5f82:	da02      	bge.n	5f8a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    5f84:	f06f 0311 	mvn.w	r3, #17
    5f88:	e077      	b.n	607a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    5f8a:	f107 0308 	add.w	r3, r7, #8
    5f8e:	4618      	mov	r0, r3
    5f90:	4b3e      	ldr	r3, [pc, #248]	; (608c <usb_d_ep_transfer+0x15c>)
    5f92:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    5f94:	69bb      	ldr	r3, [r7, #24]
    5f96:	789b      	ldrb	r3, [r3, #2]
    5f98:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    5f9a:	7bfb      	ldrb	r3, [r7, #15]
    5f9c:	b2db      	uxtb	r3, r3
    5f9e:	2b01      	cmp	r3, #1
    5fa0:	d10c      	bne.n	5fbc <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    5fa2:	69bb      	ldr	r3, [r7, #24]
    5fa4:	2203      	movs	r2, #3
    5fa6:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    5fa8:	f107 0308 	add.w	r3, r7, #8
    5fac:	4618      	mov	r0, r3
    5fae:	4b38      	ldr	r3, [pc, #224]	; (6090 <usb_d_ep_transfer+0x160>)
    5fb0:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5fb2:	69bb      	ldr	r3, [r7, #24]
    5fb4:	781b      	ldrb	r3, [r3, #0]
    5fb6:	2b00      	cmp	r3, #0
    5fb8:	d151      	bne.n	605e <usb_d_ep_transfer+0x12e>
    5fba:	e017      	b.n	5fec <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    5fbc:	f107 0308 	add.w	r3, r7, #8
    5fc0:	4618      	mov	r0, r3
    5fc2:	4b33      	ldr	r3, [pc, #204]	; (6090 <usb_d_ep_transfer+0x160>)
    5fc4:	4798      	blx	r3
		switch (state) {
    5fc6:	7bfb      	ldrb	r3, [r7, #15]
    5fc8:	b2db      	uxtb	r3, r3
    5fca:	2b05      	cmp	r3, #5
    5fcc:	d004      	beq.n	5fd8 <usb_d_ep_transfer+0xa8>
    5fce:	2b06      	cmp	r3, #6
    5fd0:	d004      	beq.n	5fdc <usb_d_ep_transfer+0xac>
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d005      	beq.n	5fe2 <usb_d_ep_transfer+0xb2>
    5fd6:	e007      	b.n	5fe8 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    5fd8:	2302      	movs	r3, #2
    5fda:	e04e      	b.n	607a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    5fdc:	f06f 030f 	mvn.w	r3, #15
    5fe0:	e04b      	b.n	607a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    5fe2:	f06f 0312 	mvn.w	r3, #18
    5fe6:	e048      	b.n	607a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    5fe8:	2301      	movs	r3, #1
    5fea:	e046      	b.n	607a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5fec:	69bb      	ldr	r3, [r7, #24]
    5fee:	7c9b      	ldrb	r3, [r3, #18]
    5ff0:	b29a      	uxth	r2, r3
    5ff2:	69bb      	ldr	r3, [r7, #24]
    5ff4:	7cdb      	ldrb	r3, [r3, #19]
    5ff6:	b29b      	uxth	r3, r3
    5ff8:	021b      	lsls	r3, r3, #8
    5ffa:	b29b      	uxth	r3, r3
    5ffc:	4413      	add	r3, r2
    5ffe:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    6000:	8afb      	ldrh	r3, [r7, #22]
    6002:	2b00      	cmp	r3, #0
    6004:	d10b      	bne.n	601e <usb_d_ep_transfer+0xee>
			dir                 = true;
    6006:	2301      	movs	r3, #1
    6008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    600c:	2300      	movs	r3, #0
    600e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    6010:	2301      	movs	r3, #1
    6012:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    6016:	69bb      	ldr	r3, [r7, #24]
    6018:	2204      	movs	r2, #4
    601a:	709a      	strb	r2, [r3, #2]
    601c:	e01f      	b.n	605e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    601e:	69bb      	ldr	r3, [r7, #24]
    6020:	7b1b      	ldrb	r3, [r3, #12]
    6022:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6026:	2b00      	cmp	r3, #0
    6028:	bf14      	ite	ne
    602a:	2301      	movne	r3, #1
    602c:	2300      	moveq	r3, #0
    602e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    6032:	8afa      	ldrh	r2, [r7, #22]
    6034:	6a3b      	ldr	r3, [r7, #32]
    6036:	429a      	cmp	r2, r3
    6038:	d201      	bcs.n	603e <usb_d_ep_transfer+0x10e>
				len = req_len;
    603a:	8afb      	ldrh	r3, [r7, #22]
    603c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    603e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    6042:	2b00      	cmp	r3, #0
    6044:	d008      	beq.n	6058 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    6046:	8afa      	ldrh	r2, [r7, #22]
    6048:	6a3b      	ldr	r3, [r7, #32]
    604a:	429a      	cmp	r2, r3
    604c:	bf8c      	ite	hi
    604e:	2301      	movhi	r3, #1
    6050:	2300      	movls	r3, #0
    6052:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    6056:	e002      	b.n	605e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    6058:	2300      	movs	r3, #0
    605a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    605e:	687b      	ldr	r3, [r7, #4]
    6060:	7a18      	ldrb	r0, [r3, #8]
    6062:	687b      	ldr	r3, [r7, #4]
    6064:	681a      	ldr	r2, [r3, #0]
    6066:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    606a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    606e:	9300      	str	r3, [sp, #0]
    6070:	6a3b      	ldr	r3, [r7, #32]
    6072:	4c08      	ldr	r4, [pc, #32]	; (6094 <usb_d_ep_transfer+0x164>)
    6074:	47a0      	blx	r4
    6076:	6138      	str	r0, [r7, #16]
	return rc;
    6078:	693b      	ldr	r3, [r7, #16]
}
    607a:	4618      	mov	r0, r3
    607c:	372c      	adds	r7, #44	; 0x2c
    607e:	46bd      	mov	sp, r7
    6080:	bd90      	pop	{r4, r7, pc}
    6082:	bf00      	nop
    6084:	000058ed 	.word	0x000058ed
    6088:	200022c0 	.word	0x200022c0
    608c:	0000e51d 	.word	0x0000e51d
    6090:	0000e543 	.word	0x0000e543
    6094:	0000596d 	.word	0x0000596d

00006098 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    6098:	b580      	push	{r7, lr}
    609a:	b084      	sub	sp, #16
    609c:	af00      	add	r7, sp, #0
    609e:	4603      	mov	r3, r0
    60a0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    60a2:	79fb      	ldrb	r3, [r7, #7]
    60a4:	4618      	mov	r0, r3
    60a6:	4b0e      	ldr	r3, [pc, #56]	; (60e0 <usb_d_ep_abort+0x48>)
    60a8:	4798      	blx	r3
    60aa:	4603      	mov	r3, r0
    60ac:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    60ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    60b2:	015b      	lsls	r3, r3, #5
    60b4:	4a0b      	ldr	r2, [pc, #44]	; (60e4 <usb_d_ep_abort+0x4c>)
    60b6:	4413      	add	r3, r2
    60b8:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    60ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    60be:	2b00      	cmp	r3, #0
    60c0:	db0a      	blt.n	60d8 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    60c2:	79fb      	ldrb	r3, [r7, #7]
    60c4:	4618      	mov	r0, r3
    60c6:	4b08      	ldr	r3, [pc, #32]	; (60e8 <usb_d_ep_abort+0x50>)
    60c8:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    60ca:	68bb      	ldr	r3, [r7, #8]
    60cc:	2201      	movs	r2, #1
    60ce:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    60d0:	68bb      	ldr	r3, [r7, #8]
    60d2:	2204      	movs	r2, #4
    60d4:	70da      	strb	r2, [r3, #3]
    60d6:	e000      	b.n	60da <usb_d_ep_abort+0x42>
		return;
    60d8:	bf00      	nop
}
    60da:	3710      	adds	r7, #16
    60dc:	46bd      	mov	sp, r7
    60de:	bd80      	pop	{r7, pc}
    60e0:	000058ed 	.word	0x000058ed
    60e4:	200022c0 	.word	0x200022c0
    60e8:	0000dd15 	.word	0x0000dd15

000060ec <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    60ec:	b580      	push	{r7, lr}
    60ee:	b086      	sub	sp, #24
    60f0:	af00      	add	r7, sp, #0
    60f2:	4603      	mov	r3, r0
    60f4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    60f6:	79fb      	ldrb	r3, [r7, #7]
    60f8:	4618      	mov	r0, r3
    60fa:	4b1a      	ldr	r3, [pc, #104]	; (6164 <_usb_d_ep_halt_clr+0x78>)
    60fc:	4798      	blx	r3
    60fe:	4603      	mov	r3, r0
    6100:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6102:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6106:	015b      	lsls	r3, r3, #5
    6108:	4a17      	ldr	r2, [pc, #92]	; (6168 <_usb_d_ep_halt_clr+0x7c>)
    610a:	4413      	add	r3, r2
    610c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    610e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6112:	2b00      	cmp	r3, #0
    6114:	da02      	bge.n	611c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    6116:	f06f 0311 	mvn.w	r3, #17
    611a:	e01f      	b.n	615c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    611c:	79fb      	ldrb	r3, [r7, #7]
    611e:	2102      	movs	r1, #2
    6120:	4618      	mov	r0, r3
    6122:	4b12      	ldr	r3, [pc, #72]	; (616c <_usb_d_ep_halt_clr+0x80>)
    6124:	4798      	blx	r3
    6126:	4603      	mov	r3, r0
    6128:	2b00      	cmp	r3, #0
    612a:	d016      	beq.n	615a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    612c:	79fb      	ldrb	r3, [r7, #7]
    612e:	2100      	movs	r1, #0
    6130:	4618      	mov	r0, r3
    6132:	4b0e      	ldr	r3, [pc, #56]	; (616c <_usb_d_ep_halt_clr+0x80>)
    6134:	4798      	blx	r3
    6136:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    6138:	68fb      	ldr	r3, [r7, #12]
    613a:	2b00      	cmp	r3, #0
    613c:	da01      	bge.n	6142 <_usb_d_ep_halt_clr+0x56>
			return rc;
    613e:	68fb      	ldr	r3, [r7, #12]
    6140:	e00c      	b.n	615c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    6142:	693b      	ldr	r3, [r7, #16]
    6144:	2201      	movs	r2, #1
    6146:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    6148:	693b      	ldr	r3, [r7, #16]
    614a:	2203      	movs	r2, #3
    614c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    614e:	693b      	ldr	r3, [r7, #16]
    6150:	69db      	ldr	r3, [r3, #28]
    6152:	79f8      	ldrb	r0, [r7, #7]
    6154:	2200      	movs	r2, #0
    6156:	2103      	movs	r1, #3
    6158:	4798      	blx	r3
	}
	return ERR_NONE;
    615a:	2300      	movs	r3, #0
}
    615c:	4618      	mov	r0, r3
    615e:	3718      	adds	r7, #24
    6160:	46bd      	mov	sp, r7
    6162:	bd80      	pop	{r7, pc}
    6164:	000058ed 	.word	0x000058ed
    6168:	200022c0 	.word	0x200022c0
    616c:	0000d921 	.word	0x0000d921

00006170 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    6170:	b580      	push	{r7, lr}
    6172:	b082      	sub	sp, #8
    6174:	af00      	add	r7, sp, #0
    6176:	4603      	mov	r3, r0
    6178:	460a      	mov	r2, r1
    617a:	71fb      	strb	r3, [r7, #7]
    617c:	4613      	mov	r3, r2
    617e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    6180:	79bb      	ldrb	r3, [r7, #6]
    6182:	2b00      	cmp	r3, #0
    6184:	d105      	bne.n	6192 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    6186:	79fb      	ldrb	r3, [r7, #7]
    6188:	4618      	mov	r0, r3
    618a:	4b0c      	ldr	r3, [pc, #48]	; (61bc <usb_d_ep_halt+0x4c>)
    618c:	4798      	blx	r3
    618e:	4603      	mov	r3, r0
    6190:	e00f      	b.n	61b2 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    6192:	79bb      	ldrb	r3, [r7, #6]
    6194:	2b01      	cmp	r3, #1
    6196:	d106      	bne.n	61a6 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6198:	79fb      	ldrb	r3, [r7, #7]
    619a:	2101      	movs	r1, #1
    619c:	4618      	mov	r0, r3
    619e:	4b08      	ldr	r3, [pc, #32]	; (61c0 <usb_d_ep_halt+0x50>)
    61a0:	4798      	blx	r3
    61a2:	4603      	mov	r3, r0
    61a4:	e005      	b.n	61b2 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    61a6:	79fb      	ldrb	r3, [r7, #7]
    61a8:	2102      	movs	r1, #2
    61aa:	4618      	mov	r0, r3
    61ac:	4b04      	ldr	r3, [pc, #16]	; (61c0 <usb_d_ep_halt+0x50>)
    61ae:	4798      	blx	r3
    61b0:	4603      	mov	r3, r0
	}
}
    61b2:	4618      	mov	r0, r3
    61b4:	3708      	adds	r7, #8
    61b6:	46bd      	mov	sp, r7
    61b8:	bd80      	pop	{r7, pc}
    61ba:	bf00      	nop
    61bc:	000060ed 	.word	0x000060ed
    61c0:	0000d921 	.word	0x0000d921

000061c4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    61c4:	b580      	push	{r7, lr}
    61c6:	b086      	sub	sp, #24
    61c8:	af00      	add	r7, sp, #0
    61ca:	4603      	mov	r3, r0
    61cc:	603a      	str	r2, [r7, #0]
    61ce:	71fb      	strb	r3, [r7, #7]
    61d0:	460b      	mov	r3, r1
    61d2:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    61d4:	79fb      	ldrb	r3, [r7, #7]
    61d6:	4618      	mov	r0, r3
    61d8:	4b16      	ldr	r3, [pc, #88]	; (6234 <usb_d_ep_register_callback+0x70>)
    61da:	4798      	blx	r3
    61dc:	4603      	mov	r3, r0
    61de:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    61e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    61e4:	015b      	lsls	r3, r3, #5
    61e6:	4a14      	ldr	r2, [pc, #80]	; (6238 <usb_d_ep_register_callback+0x74>)
    61e8:	4413      	add	r3, r2
    61ea:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    61ec:	683b      	ldr	r3, [r7, #0]
    61ee:	2b00      	cmp	r3, #0
    61f0:	d001      	beq.n	61f6 <usb_d_ep_register_callback+0x32>
    61f2:	683b      	ldr	r3, [r7, #0]
    61f4:	e000      	b.n	61f8 <usb_d_ep_register_callback+0x34>
    61f6:	4b11      	ldr	r3, [pc, #68]	; (623c <usb_d_ep_register_callback+0x78>)
    61f8:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    61fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    61fe:	2b00      	cmp	r3, #0
    6200:	db13      	blt.n	622a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    6202:	79bb      	ldrb	r3, [r7, #6]
    6204:	2b01      	cmp	r3, #1
    6206:	d008      	beq.n	621a <usb_d_ep_register_callback+0x56>
    6208:	2b02      	cmp	r3, #2
    620a:	d00a      	beq.n	6222 <usb_d_ep_register_callback+0x5e>
    620c:	2b00      	cmp	r3, #0
    620e:	d000      	beq.n	6212 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    6210:	e00c      	b.n	622c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    6212:	693b      	ldr	r3, [r7, #16]
    6214:	68fa      	ldr	r2, [r7, #12]
    6216:	615a      	str	r2, [r3, #20]
		break;
    6218:	e008      	b.n	622c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    621a:	693b      	ldr	r3, [r7, #16]
    621c:	68fa      	ldr	r2, [r7, #12]
    621e:	619a      	str	r2, [r3, #24]
		break;
    6220:	e004      	b.n	622c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    6222:	693b      	ldr	r3, [r7, #16]
    6224:	68fa      	ldr	r2, [r7, #12]
    6226:	61da      	str	r2, [r3, #28]
		break;
    6228:	e000      	b.n	622c <usb_d_ep_register_callback+0x68>
		return;
    622a:	bf00      	nop
	}
}
    622c:	3718      	adds	r7, #24
    622e:	46bd      	mov	sp, r7
    6230:	bd80      	pop	{r7, pc}
    6232:	bf00      	nop
    6234:	000058ed 	.word	0x000058ed
    6238:	200022c0 	.word	0x200022c0
    623c:	000059c1 	.word	0x000059c1

00006240 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    6240:	b480      	push	{r7}
    6242:	b085      	sub	sp, #20
    6244:	af00      	add	r7, sp, #0
    6246:	4603      	mov	r3, r0
    6248:	60b9      	str	r1, [r7, #8]
    624a:	607a      	str	r2, [r7, #4]
    624c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    624e:	7bfb      	ldrb	r3, [r7, #15]
    6250:	f083 0301 	eor.w	r3, r3, #1
    6254:	b2db      	uxtb	r3, r3
    6256:	2b00      	cmp	r3, #0
    6258:	d000      	beq.n	625c <assert+0x1c>
		__asm("BKPT #0");
    625a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    625c:	bf00      	nop
    625e:	3714      	adds	r7, #20
    6260:	46bd      	mov	sp, r7
    6262:	f85d 7b04 	ldr.w	r7, [sp], #4
    6266:	4770      	bx	lr

00006268 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    6268:	b480      	push	{r7}
    626a:	b085      	sub	sp, #20
    626c:	af00      	add	r7, sp, #0
    626e:	6078      	str	r0, [r7, #4]
    6270:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    6272:	687b      	ldr	r3, [r7, #4]
    6274:	681b      	ldr	r3, [r3, #0]
    6276:	60fb      	str	r3, [r7, #12]
    6278:	e008      	b.n	628c <is_list_element+0x24>
		if (it == element) {
    627a:	68fa      	ldr	r2, [r7, #12]
    627c:	683b      	ldr	r3, [r7, #0]
    627e:	429a      	cmp	r2, r3
    6280:	d101      	bne.n	6286 <is_list_element+0x1e>
			return true;
    6282:	2301      	movs	r3, #1
    6284:	e006      	b.n	6294 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    6286:	68fb      	ldr	r3, [r7, #12]
    6288:	681b      	ldr	r3, [r3, #0]
    628a:	60fb      	str	r3, [r7, #12]
    628c:	68fb      	ldr	r3, [r7, #12]
    628e:	2b00      	cmp	r3, #0
    6290:	d1f3      	bne.n	627a <is_list_element+0x12>
		}
	}

	return false;
    6292:	2300      	movs	r3, #0
}
    6294:	4618      	mov	r0, r3
    6296:	3714      	adds	r7, #20
    6298:	46bd      	mov	sp, r7
    629a:	f85d 7b04 	ldr.w	r7, [sp], #4
    629e:	4770      	bx	lr

000062a0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    62a0:	b580      	push	{r7, lr}
    62a2:	b082      	sub	sp, #8
    62a4:	af00      	add	r7, sp, #0
    62a6:	6078      	str	r0, [r7, #4]
    62a8:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    62aa:	6839      	ldr	r1, [r7, #0]
    62ac:	6878      	ldr	r0, [r7, #4]
    62ae:	4b0f      	ldr	r3, [pc, #60]	; (62ec <list_insert_as_head+0x4c>)
    62b0:	4798      	blx	r3
    62b2:	4603      	mov	r3, r0
    62b4:	2b00      	cmp	r3, #0
    62b6:	bf14      	ite	ne
    62b8:	2301      	movne	r3, #1
    62ba:	2300      	moveq	r3, #0
    62bc:	b2db      	uxtb	r3, r3
    62be:	f083 0301 	eor.w	r3, r3, #1
    62c2:	b2db      	uxtb	r3, r3
    62c4:	f003 0301 	and.w	r3, r3, #1
    62c8:	b2db      	uxtb	r3, r3
    62ca:	2239      	movs	r2, #57	; 0x39
    62cc:	4908      	ldr	r1, [pc, #32]	; (62f0 <list_insert_as_head+0x50>)
    62ce:	4618      	mov	r0, r3
    62d0:	4b08      	ldr	r3, [pc, #32]	; (62f4 <list_insert_as_head+0x54>)
    62d2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    62d4:	687b      	ldr	r3, [r7, #4]
    62d6:	681a      	ldr	r2, [r3, #0]
    62d8:	683b      	ldr	r3, [r7, #0]
    62da:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    62dc:	687b      	ldr	r3, [r7, #4]
    62de:	683a      	ldr	r2, [r7, #0]
    62e0:	601a      	str	r2, [r3, #0]
}
    62e2:	bf00      	nop
    62e4:	3708      	adds	r7, #8
    62e6:	46bd      	mov	sp, r7
    62e8:	bd80      	pop	{r7, pc}
    62ea:	bf00      	nop
    62ec:	00006269 	.word	0x00006269
    62f0:	0001a6ac 	.word	0x0001a6ac
    62f4:	00006241 	.word	0x00006241

000062f8 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    62f8:	b480      	push	{r7}
    62fa:	b083      	sub	sp, #12
    62fc:	af00      	add	r7, sp, #0
    62fe:	6078      	str	r0, [r7, #4]
    6300:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    6302:	687b      	ldr	r3, [r7, #4]
    6304:	681a      	ldr	r2, [r3, #0]
    6306:	683b      	ldr	r3, [r7, #0]
    6308:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    630a:	687b      	ldr	r3, [r7, #4]
    630c:	683a      	ldr	r2, [r7, #0]
    630e:	601a      	str	r2, [r3, #0]
}
    6310:	bf00      	nop
    6312:	370c      	adds	r7, #12
    6314:	46bd      	mov	sp, r7
    6316:	f85d 7b04 	ldr.w	r7, [sp], #4
    631a:	4770      	bx	lr

0000631c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    631c:	b580      	push	{r7, lr}
    631e:	b084      	sub	sp, #16
    6320:	af00      	add	r7, sp, #0
    6322:	6078      	str	r0, [r7, #4]
    6324:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    6326:	687b      	ldr	r3, [r7, #4]
    6328:	681b      	ldr	r3, [r3, #0]
    632a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    632c:	6839      	ldr	r1, [r7, #0]
    632e:	6878      	ldr	r0, [r7, #4]
    6330:	4b16      	ldr	r3, [pc, #88]	; (638c <list_insert_at_end+0x70>)
    6332:	4798      	blx	r3
    6334:	4603      	mov	r3, r0
    6336:	2b00      	cmp	r3, #0
    6338:	bf14      	ite	ne
    633a:	2301      	movne	r3, #1
    633c:	2300      	moveq	r3, #0
    633e:	b2db      	uxtb	r3, r3
    6340:	f083 0301 	eor.w	r3, r3, #1
    6344:	b2db      	uxtb	r3, r3
    6346:	f003 0301 	and.w	r3, r3, #1
    634a:	b2db      	uxtb	r3, r3
    634c:	224f      	movs	r2, #79	; 0x4f
    634e:	4910      	ldr	r1, [pc, #64]	; (6390 <list_insert_at_end+0x74>)
    6350:	4618      	mov	r0, r3
    6352:	4b10      	ldr	r3, [pc, #64]	; (6394 <list_insert_at_end+0x78>)
    6354:	4798      	blx	r3

	if (!list->head) {
    6356:	687b      	ldr	r3, [r7, #4]
    6358:	681b      	ldr	r3, [r3, #0]
    635a:	2b00      	cmp	r3, #0
    635c:	d109      	bne.n	6372 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    635e:	687b      	ldr	r3, [r7, #4]
    6360:	683a      	ldr	r2, [r7, #0]
    6362:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    6364:	683b      	ldr	r3, [r7, #0]
    6366:	2200      	movs	r2, #0
    6368:	601a      	str	r2, [r3, #0]
		return;
    636a:	e00c      	b.n	6386 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    636c:	68fb      	ldr	r3, [r7, #12]
    636e:	681b      	ldr	r3, [r3, #0]
    6370:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    6372:	68fb      	ldr	r3, [r7, #12]
    6374:	681b      	ldr	r3, [r3, #0]
    6376:	2b00      	cmp	r3, #0
    6378:	d1f8      	bne.n	636c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    637a:	68fb      	ldr	r3, [r7, #12]
    637c:	683a      	ldr	r2, [r7, #0]
    637e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    6380:	683b      	ldr	r3, [r7, #0]
    6382:	2200      	movs	r2, #0
    6384:	601a      	str	r2, [r3, #0]
}
    6386:	3710      	adds	r7, #16
    6388:	46bd      	mov	sp, r7
    638a:	bd80      	pop	{r7, pc}
    638c:	00006269 	.word	0x00006269
    6390:	0001a6ac 	.word	0x0001a6ac
    6394:	00006241 	.word	0x00006241

00006398 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    6398:	b480      	push	{r7}
    639a:	b085      	sub	sp, #20
    639c:	af00      	add	r7, sp, #0
    639e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    63a0:	687b      	ldr	r3, [r7, #4]
    63a2:	681b      	ldr	r3, [r3, #0]
    63a4:	2b00      	cmp	r3, #0
    63a6:	d009      	beq.n	63bc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    63a8:	687b      	ldr	r3, [r7, #4]
    63aa:	681b      	ldr	r3, [r3, #0]
    63ac:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    63ae:	687b      	ldr	r3, [r7, #4]
    63b0:	681b      	ldr	r3, [r3, #0]
    63b2:	681a      	ldr	r2, [r3, #0]
    63b4:	687b      	ldr	r3, [r7, #4]
    63b6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    63b8:	68fb      	ldr	r3, [r7, #12]
    63ba:	e000      	b.n	63be <list_remove_head+0x26>
	}

	return NULL;
    63bc:	2300      	movs	r3, #0
}
    63be:	4618      	mov	r0, r3
    63c0:	3714      	adds	r7, #20
    63c2:	46bd      	mov	sp, r7
    63c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    63c8:	4770      	bx	lr

000063ca <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    63ca:	b480      	push	{r7}
    63cc:	b085      	sub	sp, #20
    63ce:	af00      	add	r7, sp, #0
    63d0:	6078      	str	r0, [r7, #4]
    63d2:	6039      	str	r1, [r7, #0]
	if (!element) {
    63d4:	683b      	ldr	r3, [r7, #0]
    63d6:	2b00      	cmp	r3, #0
    63d8:	d101      	bne.n	63de <list_delete_element+0x14>
		return false;
    63da:	2300      	movs	r3, #0
    63dc:	e024      	b.n	6428 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    63de:	687b      	ldr	r3, [r7, #4]
    63e0:	681a      	ldr	r2, [r3, #0]
    63e2:	683b      	ldr	r3, [r7, #0]
    63e4:	429a      	cmp	r2, r3
    63e6:	d106      	bne.n	63f6 <list_delete_element+0x2c>
		list->head = list->head->next;
    63e8:	687b      	ldr	r3, [r7, #4]
    63ea:	681b      	ldr	r3, [r3, #0]
    63ec:	681a      	ldr	r2, [r3, #0]
    63ee:	687b      	ldr	r3, [r7, #4]
    63f0:	601a      	str	r2, [r3, #0]
		return true;
    63f2:	2301      	movs	r3, #1
    63f4:	e018      	b.n	6428 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    63f6:	687b      	ldr	r3, [r7, #4]
    63f8:	681b      	ldr	r3, [r3, #0]
    63fa:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    63fc:	e002      	b.n	6404 <list_delete_element+0x3a>
			it = it->next;
    63fe:	68fb      	ldr	r3, [r7, #12]
    6400:	681b      	ldr	r3, [r3, #0]
    6402:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    6404:	68fb      	ldr	r3, [r7, #12]
    6406:	2b00      	cmp	r3, #0
    6408:	d004      	beq.n	6414 <list_delete_element+0x4a>
    640a:	68fb      	ldr	r3, [r7, #12]
    640c:	681a      	ldr	r2, [r3, #0]
    640e:	683b      	ldr	r3, [r7, #0]
    6410:	429a      	cmp	r2, r3
    6412:	d1f4      	bne.n	63fe <list_delete_element+0x34>
		}
		if (it) {
    6414:	68fb      	ldr	r3, [r7, #12]
    6416:	2b00      	cmp	r3, #0
    6418:	d005      	beq.n	6426 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    641a:	683b      	ldr	r3, [r7, #0]
    641c:	681a      	ldr	r2, [r3, #0]
    641e:	68fb      	ldr	r3, [r7, #12]
    6420:	601a      	str	r2, [r3, #0]
			return true;
    6422:	2301      	movs	r3, #1
    6424:	e000      	b.n	6428 <list_delete_element+0x5e>
		}
	}

	return false;
    6426:	2300      	movs	r3, #0
}
    6428:	4618      	mov	r0, r3
    642a:	3714      	adds	r7, #20
    642c:	46bd      	mov	sp, r7
    642e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6432:	4770      	bx	lr

00006434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    6434:	b480      	push	{r7}
    6436:	b083      	sub	sp, #12
    6438:	af00      	add	r7, sp, #0
    643a:	4603      	mov	r3, r0
    643c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    643e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6442:	2b00      	cmp	r3, #0
    6444:	db0b      	blt.n	645e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6446:	4909      	ldr	r1, [pc, #36]	; (646c <__NVIC_EnableIRQ+0x38>)
    6448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    644c:	095b      	lsrs	r3, r3, #5
    644e:	88fa      	ldrh	r2, [r7, #6]
    6450:	f002 021f 	and.w	r2, r2, #31
    6454:	2001      	movs	r0, #1
    6456:	fa00 f202 	lsl.w	r2, r0, r2
    645a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    645e:	bf00      	nop
    6460:	370c      	adds	r7, #12
    6462:	46bd      	mov	sp, r7
    6464:	f85d 7b04 	ldr.w	r7, [sp], #4
    6468:	4770      	bx	lr
    646a:	bf00      	nop
    646c:	e000e100 	.word	0xe000e100

00006470 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    6470:	b480      	push	{r7}
    6472:	b083      	sub	sp, #12
    6474:	af00      	add	r7, sp, #0
    6476:	4603      	mov	r3, r0
    6478:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    647a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    647e:	2b00      	cmp	r3, #0
    6480:	db10      	blt.n	64a4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6482:	490b      	ldr	r1, [pc, #44]	; (64b0 <__NVIC_DisableIRQ+0x40>)
    6484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6488:	095b      	lsrs	r3, r3, #5
    648a:	88fa      	ldrh	r2, [r7, #6]
    648c:	f002 021f 	and.w	r2, r2, #31
    6490:	2001      	movs	r0, #1
    6492:	fa00 f202 	lsl.w	r2, r0, r2
    6496:	3320      	adds	r3, #32
    6498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    649c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    64a0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    64a4:	bf00      	nop
    64a6:	370c      	adds	r7, #12
    64a8:	46bd      	mov	sp, r7
    64aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    64ae:	4770      	bx	lr
    64b0:	e000e100 	.word	0xe000e100

000064b4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    64b4:	b480      	push	{r7}
    64b6:	b083      	sub	sp, #12
    64b8:	af00      	add	r7, sp, #0
    64ba:	4603      	mov	r3, r0
    64bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    64be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    64c2:	2b00      	cmp	r3, #0
    64c4:	db0c      	blt.n	64e0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    64c6:	4909      	ldr	r1, [pc, #36]	; (64ec <__NVIC_ClearPendingIRQ+0x38>)
    64c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    64cc:	095b      	lsrs	r3, r3, #5
    64ce:	88fa      	ldrh	r2, [r7, #6]
    64d0:	f002 021f 	and.w	r2, r2, #31
    64d4:	2001      	movs	r0, #1
    64d6:	fa00 f202 	lsl.w	r2, r0, r2
    64da:	3360      	adds	r3, #96	; 0x60
    64dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    64e0:	bf00      	nop
    64e2:	370c      	adds	r7, #12
    64e4:	46bd      	mov	sp, r7
    64e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    64ea:	4770      	bx	lr
    64ec:	e000e100 	.word	0xe000e100

000064f0 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    64f0:	b480      	push	{r7}
    64f2:	b083      	sub	sp, #12
    64f4:	af00      	add	r7, sp, #0
    64f6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    64f8:	687b      	ldr	r3, [r7, #4]
    64fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    64fc:	095b      	lsrs	r3, r3, #5
    64fe:	f003 0301 	and.w	r3, r3, #1
    6502:	2b00      	cmp	r3, #0
    6504:	bf14      	ite	ne
    6506:	2301      	movne	r3, #1
    6508:	2300      	moveq	r3, #0
    650a:	b2db      	uxtb	r3, r3
}
    650c:	4618      	mov	r0, r3
    650e:	370c      	adds	r7, #12
    6510:	46bd      	mov	sp, r7
    6512:	f85d 7b04 	ldr.w	r7, [sp], #4
    6516:	4770      	bx	lr

00006518 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    6518:	b480      	push	{r7}
    651a:	b083      	sub	sp, #12
    651c:	af00      	add	r7, sp, #0
    651e:	6078      	str	r0, [r7, #4]
    6520:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    6522:	687b      	ldr	r3, [r7, #4]
    6524:	683a      	ldr	r2, [r7, #0]
    6526:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6528:	bf00      	nop
    652a:	370c      	adds	r7, #12
    652c:	46bd      	mov	sp, r7
    652e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6532:	4770      	bx	lr

00006534 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    6534:	b480      	push	{r7}
    6536:	b083      	sub	sp, #12
    6538:	af00      	add	r7, sp, #0
    653a:	6078      	str	r0, [r7, #4]
    653c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    653e:	687b      	ldr	r3, [r7, #4]
    6540:	683a      	ldr	r2, [r7, #0]
    6542:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6544:	bf00      	nop
    6546:	370c      	adds	r7, #12
    6548:	46bd      	mov	sp, r7
    654a:	f85d 7b04 	ldr.w	r7, [sp], #4
    654e:	4770      	bx	lr

00006550 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    6550:	b480      	push	{r7}
    6552:	b083      	sub	sp, #12
    6554:	af00      	add	r7, sp, #0
    6556:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    6558:	687b      	ldr	r3, [r7, #4]
    655a:	699b      	ldr	r3, [r3, #24]
    655c:	f043 0201 	orr.w	r2, r3, #1
    6560:	687b      	ldr	r3, [r7, #4]
    6562:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6564:	bf00      	nop
    6566:	370c      	adds	r7, #12
    6568:	46bd      	mov	sp, r7
    656a:	f85d 7b04 	ldr.w	r7, [sp], #4
    656e:	4770      	bx	lr

00006570 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    6570:	b480      	push	{r7}
    6572:	b085      	sub	sp, #20
    6574:	af00      	add	r7, sp, #0
    6576:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    6578:	687b      	ldr	r3, [r7, #4]
    657a:	699b      	ldr	r3, [r3, #24]
    657c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    657e:	68fb      	ldr	r3, [r7, #12]
    6580:	f003 0301 	and.w	r3, r3, #1
    6584:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6586:	68fb      	ldr	r3, [r7, #12]
    6588:	2b00      	cmp	r3, #0
    658a:	bf14      	ite	ne
    658c:	2301      	movne	r3, #1
    658e:	2300      	moveq	r3, #0
    6590:	b2db      	uxtb	r3, r3
}
    6592:	4618      	mov	r0, r3
    6594:	3714      	adds	r7, #20
    6596:	46bd      	mov	sp, r7
    6598:	f85d 7b04 	ldr.w	r7, [sp], #4
    659c:	4770      	bx	lr

0000659e <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    659e:	b480      	push	{r7}
    65a0:	b083      	sub	sp, #12
    65a2:	af00      	add	r7, sp, #0
    65a4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    65a6:	687b      	ldr	r3, [r7, #4]
    65a8:	699b      	ldr	r3, [r3, #24]
    65aa:	f023 0201 	bic.w	r2, r3, #1
    65ae:	687b      	ldr	r3, [r7, #4]
    65b0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    65b2:	bf00      	nop
    65b4:	370c      	adds	r7, #12
    65b6:	46bd      	mov	sp, r7
    65b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    65bc:	4770      	bx	lr

000065be <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    65be:	b480      	push	{r7}
    65c0:	b083      	sub	sp, #12
    65c2:	af00      	add	r7, sp, #0
    65c4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    65c6:	687b      	ldr	r3, [r7, #4]
    65c8:	699b      	ldr	r3, [r3, #24]
    65ca:	f043 0202 	orr.w	r2, r3, #2
    65ce:	687b      	ldr	r3, [r7, #4]
    65d0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    65d2:	bf00      	nop
    65d4:	370c      	adds	r7, #12
    65d6:	46bd      	mov	sp, r7
    65d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    65dc:	4770      	bx	lr

000065de <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    65de:	b480      	push	{r7}
    65e0:	b083      	sub	sp, #12
    65e2:	af00      	add	r7, sp, #0
    65e4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    65e6:	687b      	ldr	r3, [r7, #4]
    65e8:	699b      	ldr	r3, [r3, #24]
    65ea:	f023 0202 	bic.w	r2, r3, #2
    65ee:	687b      	ldr	r3, [r7, #4]
    65f0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    65f2:	bf00      	nop
    65f4:	370c      	adds	r7, #12
    65f6:	46bd      	mov	sp, r7
    65f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    65fc:	4770      	bx	lr

000065fe <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    65fe:	b480      	push	{r7}
    6600:	b083      	sub	sp, #12
    6602:	af00      	add	r7, sp, #0
    6604:	6078      	str	r0, [r7, #4]
    6606:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    6608:	687b      	ldr	r3, [r7, #4]
    660a:	699a      	ldr	r2, [r3, #24]
    660c:	683b      	ldr	r3, [r7, #0]
    660e:	431a      	orrs	r2, r3
    6610:	687b      	ldr	r3, [r7, #4]
    6612:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6614:	bf00      	nop
    6616:	370c      	adds	r7, #12
    6618:	46bd      	mov	sp, r7
    661a:	f85d 7b04 	ldr.w	r7, [sp], #4
    661e:	4770      	bx	lr

00006620 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    6620:	b480      	push	{r7}
    6622:	b083      	sub	sp, #12
    6624:	af00      	add	r7, sp, #0
    6626:	6078      	str	r0, [r7, #4]
    6628:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    662a:	687b      	ldr	r3, [r7, #4]
    662c:	683a      	ldr	r2, [r7, #0]
    662e:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6630:	bf00      	nop
    6632:	370c      	adds	r7, #12
    6634:	46bd      	mov	sp, r7
    6636:	f85d 7b04 	ldr.w	r7, [sp], #4
    663a:	4770      	bx	lr

0000663c <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    663c:	b480      	push	{r7}
    663e:	b083      	sub	sp, #12
    6640:	af00      	add	r7, sp, #0
    6642:	6078      	str	r0, [r7, #4]
    6644:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    6646:	687b      	ldr	r3, [r7, #4]
    6648:	683a      	ldr	r2, [r7, #0]
    664a:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    664c:	bf00      	nop
    664e:	370c      	adds	r7, #12
    6650:	46bd      	mov	sp, r7
    6652:	f85d 7b04 	ldr.w	r7, [sp], #4
    6656:	4770      	bx	lr

00006658 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    6658:	b480      	push	{r7}
    665a:	b083      	sub	sp, #12
    665c:	af00      	add	r7, sp, #0
    665e:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    6660:	687b      	ldr	r3, [r7, #4]
    6662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    6664:	4618      	mov	r0, r3
    6666:	370c      	adds	r7, #12
    6668:	46bd      	mov	sp, r7
    666a:	f85d 7b04 	ldr.w	r7, [sp], #4
    666e:	4770      	bx	lr

00006670 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    6670:	b480      	push	{r7}
    6672:	b083      	sub	sp, #12
    6674:	af00      	add	r7, sp, #0
    6676:	6078      	str	r0, [r7, #4]
    6678:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    667a:	687b      	ldr	r3, [r7, #4]
    667c:	683a      	ldr	r2, [r7, #0]
    667e:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    6680:	bf00      	nop
    6682:	370c      	adds	r7, #12
    6684:	46bd      	mov	sp, r7
    6686:	f85d 7b04 	ldr.w	r7, [sp], #4
    668a:	4770      	bx	lr

0000668c <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    668c:	b480      	push	{r7}
    668e:	b083      	sub	sp, #12
    6690:	af00      	add	r7, sp, #0
    6692:	6078      	str	r0, [r7, #4]
    6694:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    6696:	687b      	ldr	r3, [r7, #4]
    6698:	683a      	ldr	r2, [r7, #0]
    669a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    669e:	bf00      	nop
    66a0:	370c      	adds	r7, #12
    66a2:	46bd      	mov	sp, r7
    66a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    66a8:	4770      	bx	lr

000066aa <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    66aa:	b480      	push	{r7}
    66ac:	b083      	sub	sp, #12
    66ae:	af00      	add	r7, sp, #0
    66b0:	6078      	str	r0, [r7, #4]
    66b2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    66b4:	687b      	ldr	r3, [r7, #4]
    66b6:	683a      	ldr	r2, [r7, #0]
    66b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    66bc:	bf00      	nop
    66be:	370c      	adds	r7, #12
    66c0:	46bd      	mov	sp, r7
    66c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    66c6:	4770      	bx	lr

000066c8 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    66c8:	b480      	push	{r7}
    66ca:	b083      	sub	sp, #12
    66cc:	af00      	add	r7, sp, #0
    66ce:	6078      	str	r0, [r7, #4]
    66d0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    66d2:	687b      	ldr	r3, [r7, #4]
    66d4:	683a      	ldr	r2, [r7, #0]
    66d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    66da:	bf00      	nop
    66dc:	370c      	adds	r7, #12
    66de:	46bd      	mov	sp, r7
    66e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    66e4:	4770      	bx	lr

000066e6 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    66e6:	b480      	push	{r7}
    66e8:	b083      	sub	sp, #12
    66ea:	af00      	add	r7, sp, #0
    66ec:	6078      	str	r0, [r7, #4]
    66ee:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    66f0:	687b      	ldr	r3, [r7, #4]
    66f2:	683a      	ldr	r2, [r7, #0]
    66f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    66f8:	bf00      	nop
    66fa:	370c      	adds	r7, #12
    66fc:	46bd      	mov	sp, r7
    66fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6702:	4770      	bx	lr

00006704 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    6704:	b480      	push	{r7}
    6706:	b083      	sub	sp, #12
    6708:	af00      	add	r7, sp, #0
    670a:	6078      	str	r0, [r7, #4]
    670c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    670e:	687b      	ldr	r3, [r7, #4]
    6710:	683a      	ldr	r2, [r7, #0]
    6712:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6716:	bf00      	nop
    6718:	370c      	adds	r7, #12
    671a:	46bd      	mov	sp, r7
    671c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6720:	4770      	bx	lr

00006722 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    6722:	b480      	push	{r7}
    6724:	b083      	sub	sp, #12
    6726:	af00      	add	r7, sp, #0
    6728:	6078      	str	r0, [r7, #4]
    672a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    672c:	687b      	ldr	r3, [r7, #4]
    672e:	683a      	ldr	r2, [r7, #0]
    6730:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    6734:	bf00      	nop
    6736:	370c      	adds	r7, #12
    6738:	46bd      	mov	sp, r7
    673a:	f85d 7b04 	ldr.w	r7, [sp], #4
    673e:	4770      	bx	lr

00006740 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    6740:	b480      	push	{r7}
    6742:	b083      	sub	sp, #12
    6744:	af00      	add	r7, sp, #0
    6746:	6078      	str	r0, [r7, #4]
    6748:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    674a:	687b      	ldr	r3, [r7, #4]
    674c:	683a      	ldr	r2, [r7, #0]
    674e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6752:	bf00      	nop
    6754:	370c      	adds	r7, #12
    6756:	46bd      	mov	sp, r7
    6758:	f85d 7b04 	ldr.w	r7, [sp], #4
    675c:	4770      	bx	lr

0000675e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    675e:	b480      	push	{r7}
    6760:	b083      	sub	sp, #12
    6762:	af00      	add	r7, sp, #0
    6764:	6078      	str	r0, [r7, #4]
    6766:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    6768:	687b      	ldr	r3, [r7, #4]
    676a:	683a      	ldr	r2, [r7, #0]
    676c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    6770:	bf00      	nop
    6772:	370c      	adds	r7, #12
    6774:	46bd      	mov	sp, r7
    6776:	f85d 7b04 	ldr.w	r7, [sp], #4
    677a:	4770      	bx	lr

0000677c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    677c:	b480      	push	{r7}
    677e:	b083      	sub	sp, #12
    6780:	af00      	add	r7, sp, #0
    6782:	6078      	str	r0, [r7, #4]
    6784:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    6786:	687b      	ldr	r3, [r7, #4]
    6788:	683a      	ldr	r2, [r7, #0]
    678a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    678e:	bf00      	nop
    6790:	370c      	adds	r7, #12
    6792:	46bd      	mov	sp, r7
    6794:	f85d 7b04 	ldr.w	r7, [sp], #4
    6798:	4770      	bx	lr
	...

0000679c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    679c:	b580      	push	{r7, lr}
    679e:	b082      	sub	sp, #8
    67a0:	af00      	add	r7, sp, #0
    67a2:	6078      	str	r0, [r7, #4]
    67a4:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    67a6:	687b      	ldr	r3, [r7, #4]
    67a8:	683a      	ldr	r2, [r7, #0]
    67aa:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    67ac:	687b      	ldr	r3, [r7, #4]
    67ae:	681b      	ldr	r3, [r3, #0]
    67b0:	4618      	mov	r0, r3
    67b2:	4b53      	ldr	r3, [pc, #332]	; (6900 <_can_async_init+0x164>)
    67b4:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    67b6:	bf00      	nop
    67b8:	687b      	ldr	r3, [r7, #4]
    67ba:	681b      	ldr	r3, [r3, #0]
    67bc:	4618      	mov	r0, r3
    67be:	4b51      	ldr	r3, [pc, #324]	; (6904 <_can_async_init+0x168>)
    67c0:	4798      	blx	r3
    67c2:	4603      	mov	r3, r0
    67c4:	f083 0301 	eor.w	r3, r3, #1
    67c8:	b2db      	uxtb	r3, r3
    67ca:	2b00      	cmp	r3, #0
    67cc:	d1f4      	bne.n	67b8 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    67ce:	687b      	ldr	r3, [r7, #4]
    67d0:	681b      	ldr	r3, [r3, #0]
    67d2:	4618      	mov	r0, r3
    67d4:	4b4c      	ldr	r3, [pc, #304]	; (6908 <_can_async_init+0x16c>)
    67d6:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    67d8:	683b      	ldr	r3, [r7, #0]
    67da:	4a4c      	ldr	r2, [pc, #304]	; (690c <_can_async_init+0x170>)
    67dc:	4293      	cmp	r3, r2
    67de:	d177      	bne.n	68d0 <_can_async_init+0x134>
		_can1_dev    = dev;
    67e0:	4a4b      	ldr	r2, [pc, #300]	; (6910 <_can_async_init+0x174>)
    67e2:	687b      	ldr	r3, [r7, #4]
    67e4:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    67e6:	687b      	ldr	r3, [r7, #4]
    67e8:	4a4a      	ldr	r2, [pc, #296]	; (6914 <_can_async_init+0x178>)
    67ea:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    67ec:	687b      	ldr	r3, [r7, #4]
    67ee:	681b      	ldr	r3, [r3, #0]
    67f0:	2100      	movs	r1, #0
    67f2:	4618      	mov	r0, r3
    67f4:	4b48      	ldr	r3, [pc, #288]	; (6918 <_can_async_init+0x17c>)
    67f6:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    67f8:	687b      	ldr	r3, [r7, #4]
    67fa:	681b      	ldr	r3, [r3, #0]
    67fc:	2100      	movs	r1, #0
    67fe:	4618      	mov	r0, r3
    6800:	4b46      	ldr	r3, [pc, #280]	; (691c <_can_async_init+0x180>)
    6802:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    6804:	687b      	ldr	r3, [r7, #4]
    6806:	681b      	ldr	r3, [r3, #0]
    6808:	4945      	ldr	r1, [pc, #276]	; (6920 <_can_async_init+0x184>)
    680a:	4618      	mov	r0, r3
    680c:	4b45      	ldr	r3, [pc, #276]	; (6924 <_can_async_init+0x188>)
    680e:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    6810:	687b      	ldr	r3, [r7, #4]
    6812:	681b      	ldr	r3, [r3, #0]
    6814:	f640 2133 	movw	r1, #2611	; 0xa33
    6818:	4618      	mov	r0, r3
    681a:	4b43      	ldr	r3, [pc, #268]	; (6928 <_can_async_init+0x18c>)
    681c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    681e:	687b      	ldr	r3, [r7, #4]
    6820:	681a      	ldr	r2, [r3, #0]
    6822:	4b42      	ldr	r3, [pc, #264]	; (692c <_can_async_init+0x190>)
    6824:	b29b      	uxth	r3, r3
    6826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    682a:	4619      	mov	r1, r3
    682c:	4610      	mov	r0, r2
    682e:	4b40      	ldr	r3, [pc, #256]	; (6930 <_can_async_init+0x194>)
    6830:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    6832:	687b      	ldr	r3, [r7, #4]
    6834:	681b      	ldr	r3, [r3, #0]
    6836:	2100      	movs	r1, #0
    6838:	4618      	mov	r0, r3
    683a:	4b3e      	ldr	r3, [pc, #248]	; (6934 <_can_async_init+0x198>)
    683c:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    683e:	687b      	ldr	r3, [r7, #4]
    6840:	681b      	ldr	r3, [r3, #0]
    6842:	2100      	movs	r1, #0
    6844:	4618      	mov	r0, r3
    6846:	4b3c      	ldr	r3, [pc, #240]	; (6938 <_can_async_init+0x19c>)
    6848:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    684a:	687b      	ldr	r3, [r7, #4]
    684c:	681a      	ldr	r2, [r3, #0]
    684e:	4b3b      	ldr	r3, [pc, #236]	; (693c <_can_async_init+0x1a0>)
    6850:	b29b      	uxth	r3, r3
    6852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    6856:	4619      	mov	r1, r3
    6858:	4610      	mov	r0, r2
    685a:	4b39      	ldr	r3, [pc, #228]	; (6940 <_can_async_init+0x1a4>)
    685c:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    685e:	687b      	ldr	r3, [r7, #4]
    6860:	681a      	ldr	r2, [r3, #0]
    6862:	4b38      	ldr	r3, [pc, #224]	; (6944 <_can_async_init+0x1a8>)
    6864:	b29b      	uxth	r3, r3
    6866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    686a:	4619      	mov	r1, r3
    686c:	4610      	mov	r0, r2
    686e:	4b36      	ldr	r3, [pc, #216]	; (6948 <_can_async_init+0x1ac>)
    6870:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    6872:	687b      	ldr	r3, [r7, #4]
    6874:	681b      	ldr	r3, [r3, #0]
    6876:	2128      	movs	r1, #40	; 0x28
    6878:	4618      	mov	r0, r3
    687a:	4b34      	ldr	r3, [pc, #208]	; (694c <_can_async_init+0x1b0>)
    687c:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    687e:	687b      	ldr	r3, [r7, #4]
    6880:	681a      	ldr	r2, [r3, #0]
    6882:	4b33      	ldr	r3, [pc, #204]	; (6950 <_can_async_init+0x1b4>)
    6884:	b29b      	uxth	r3, r3
    6886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    688a:	4619      	mov	r1, r3
    688c:	4610      	mov	r0, r2
    688e:	4b31      	ldr	r3, [pc, #196]	; (6954 <_can_async_init+0x1b8>)
    6890:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    6892:	687b      	ldr	r3, [r7, #4]
    6894:	681a      	ldr	r2, [r3, #0]
    6896:	4b30      	ldr	r3, [pc, #192]	; (6958 <_can_async_init+0x1bc>)
    6898:	b29b      	uxth	r3, r3
    689a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    689e:	4619      	mov	r1, r3
    68a0:	4610      	mov	r0, r2
    68a2:	4b2e      	ldr	r3, [pc, #184]	; (695c <_can_async_init+0x1c0>)
    68a4:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    68a6:	687b      	ldr	r3, [r7, #4]
    68a8:	681b      	ldr	r3, [r3, #0]
    68aa:	2100      	movs	r1, #0
    68ac:	4618      	mov	r0, r3
    68ae:	4b2c      	ldr	r3, [pc, #176]	; (6960 <_can_async_init+0x1c4>)
    68b0:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    68b2:	204f      	movs	r0, #79	; 0x4f
    68b4:	4b2b      	ldr	r3, [pc, #172]	; (6964 <_can_async_init+0x1c8>)
    68b6:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    68b8:	204f      	movs	r0, #79	; 0x4f
    68ba:	4b2b      	ldr	r3, [pc, #172]	; (6968 <_can_async_init+0x1cc>)
    68bc:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    68be:	204f      	movs	r0, #79	; 0x4f
    68c0:	4b2a      	ldr	r3, [pc, #168]	; (696c <_can_async_init+0x1d0>)
    68c2:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    68c4:	687b      	ldr	r3, [r7, #4]
    68c6:	681b      	ldr	r3, [r3, #0]
    68c8:	2101      	movs	r1, #1
    68ca:	4618      	mov	r0, r3
    68cc:	4b28      	ldr	r3, [pc, #160]	; (6970 <_can_async_init+0x1d4>)
    68ce:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    68d0:	687b      	ldr	r3, [r7, #4]
    68d2:	681b      	ldr	r3, [r3, #0]
    68d4:	4618      	mov	r0, r3
    68d6:	4b27      	ldr	r3, [pc, #156]	; (6974 <_can_async_init+0x1d8>)
    68d8:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    68da:	687b      	ldr	r3, [r7, #4]
    68dc:	681b      	ldr	r3, [r3, #0]
    68de:	4618      	mov	r0, r3
    68e0:	4b25      	ldr	r3, [pc, #148]	; (6978 <_can_async_init+0x1dc>)
    68e2:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    68e4:	bf00      	nop
    68e6:	687b      	ldr	r3, [r7, #4]
    68e8:	681b      	ldr	r3, [r3, #0]
    68ea:	4618      	mov	r0, r3
    68ec:	4b05      	ldr	r3, [pc, #20]	; (6904 <_can_async_init+0x168>)
    68ee:	4798      	blx	r3
    68f0:	4603      	mov	r3, r0
    68f2:	2b00      	cmp	r3, #0
    68f4:	d1f7      	bne.n	68e6 <_can_async_init+0x14a>
	};

	return ERR_NONE;
    68f6:	2300      	movs	r3, #0
}
    68f8:	4618      	mov	r0, r3
    68fa:	3708      	adds	r7, #8
    68fc:	46bd      	mov	sp, r7
    68fe:	bd80      	pop	{r7, pc}
    6900:	00006551 	.word	0x00006551
    6904:	00006571 	.word	0x00006571
    6908:	000065bf 	.word	0x000065bf
    690c:	42000400 	.word	0x42000400
    6910:	20002368 	.word	0x20002368
    6914:	20000068 	.word	0x20000068
    6918:	000065ff 	.word	0x000065ff
    691c:	00006519 	.word	0x00006519
    6920:	06020a07 	.word	0x06020a07
    6924:	00006621 	.word	0x00006621
    6928:	00006535 	.word	0x00006535
    692c:	200040f0 	.word	0x200040f0
    6930:	00006705 	.word	0x00006705
    6934:	00006723 	.word	0x00006723
    6938:	0000675f 	.word	0x0000675f
    693c:	200040d0 	.word	0x200040d0
    6940:	00006741 	.word	0x00006741
    6944:	20002340 	.word	0x20002340
    6948:	0000677d 	.word	0x0000677d
    694c:	0000668d 	.word	0x0000668d
    6950:	20002350 	.word	0x20002350
    6954:	000066ab 	.word	0x000066ab
    6958:	20002358 	.word	0x20002358
    695c:	000066c9 	.word	0x000066c9
    6960:	000066e7 	.word	0x000066e7
    6964:	00006471 	.word	0x00006471
    6968:	000064b5 	.word	0x000064b5
    696c:	00006435 	.word	0x00006435
    6970:	00006671 	.word	0x00006671
    6974:	000065df 	.word	0x000065df
    6978:	0000659f 	.word	0x0000659f

0000697c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    697c:	b590      	push	{r4, r7, lr}
    697e:	b083      	sub	sp, #12
    6980:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    6982:	4b2c      	ldr	r3, [pc, #176]	; (6a34 <CAN1_Handler+0xb8>)
    6984:	681b      	ldr	r3, [r3, #0]
    6986:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    6988:	687b      	ldr	r3, [r7, #4]
    698a:	681b      	ldr	r3, [r3, #0]
    698c:	4618      	mov	r0, r3
    698e:	4b2a      	ldr	r3, [pc, #168]	; (6a38 <CAN1_Handler+0xbc>)
    6990:	4798      	blx	r3
    6992:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    6994:	683b      	ldr	r3, [r7, #0]
    6996:	f003 0301 	and.w	r3, r3, #1
    699a:	2b00      	cmp	r3, #0
    699c:	d003      	beq.n	69a6 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    699e:	687b      	ldr	r3, [r7, #4]
    69a0:	689b      	ldr	r3, [r3, #8]
    69a2:	6878      	ldr	r0, [r7, #4]
    69a4:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    69a6:	683b      	ldr	r3, [r7, #0]
    69a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    69ac:	2b00      	cmp	r3, #0
    69ae:	d003      	beq.n	69b8 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    69b0:	687b      	ldr	r3, [r7, #4]
    69b2:	685b      	ldr	r3, [r3, #4]
    69b4:	6878      	ldr	r0, [r7, #4]
    69b6:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    69b8:	683b      	ldr	r3, [r7, #0]
    69ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    69be:	2b00      	cmp	r3, #0
    69c0:	d004      	beq.n	69cc <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    69c2:	687b      	ldr	r3, [r7, #4]
    69c4:	68db      	ldr	r3, [r3, #12]
    69c6:	2103      	movs	r1, #3
    69c8:	6878      	ldr	r0, [r7, #4]
    69ca:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    69cc:	683b      	ldr	r3, [r7, #0]
    69ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    69d2:	2b00      	cmp	r3, #0
    69d4:	d004      	beq.n	69e0 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    69d6:	687b      	ldr	r3, [r7, #4]
    69d8:	68db      	ldr	r3, [r3, #12]
    69da:	2100      	movs	r1, #0
    69dc:	6878      	ldr	r0, [r7, #4]
    69de:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    69e0:	683b      	ldr	r3, [r7, #0]
    69e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    69e6:	2b00      	cmp	r3, #0
    69e8:	d00f      	beq.n	6a0a <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    69ea:	687b      	ldr	r3, [r7, #4]
    69ec:	68dc      	ldr	r4, [r3, #12]
    69ee:	687b      	ldr	r3, [r7, #4]
    69f0:	681b      	ldr	r3, [r3, #0]
    69f2:	4618      	mov	r0, r3
    69f4:	4b11      	ldr	r3, [pc, #68]	; (6a3c <CAN1_Handler+0xc0>)
    69f6:	4798      	blx	r3
    69f8:	4603      	mov	r3, r0
    69fa:	2b00      	cmp	r3, #0
    69fc:	d001      	beq.n	6a02 <CAN1_Handler+0x86>
    69fe:	2302      	movs	r3, #2
    6a00:	e000      	b.n	6a04 <CAN1_Handler+0x88>
    6a02:	2301      	movs	r3, #1
    6a04:	4619      	mov	r1, r3
    6a06:	6878      	ldr	r0, [r7, #4]
    6a08:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    6a0a:	683b      	ldr	r3, [r7, #0]
    6a0c:	f003 0308 	and.w	r3, r3, #8
    6a10:	2b00      	cmp	r3, #0
    6a12:	d004      	beq.n	6a1e <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    6a14:	687b      	ldr	r3, [r7, #4]
    6a16:	68db      	ldr	r3, [r3, #12]
    6a18:	2104      	movs	r1, #4
    6a1a:	6878      	ldr	r0, [r7, #4]
    6a1c:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    6a1e:	687b      	ldr	r3, [r7, #4]
    6a20:	681b      	ldr	r3, [r3, #0]
    6a22:	6839      	ldr	r1, [r7, #0]
    6a24:	4618      	mov	r0, r3
    6a26:	4b06      	ldr	r3, [pc, #24]	; (6a40 <CAN1_Handler+0xc4>)
    6a28:	4798      	blx	r3
}
    6a2a:	bf00      	nop
    6a2c:	370c      	adds	r7, #12
    6a2e:	46bd      	mov	sp, r7
    6a30:	bd90      	pop	{r4, r7, pc}
    6a32:	bf00      	nop
    6a34:	20002368 	.word	0x20002368
    6a38:	00006659 	.word	0x00006659
    6a3c:	000064f1 	.word	0x000064f1
    6a40:	0000663d 	.word	0x0000663d

00006a44 <__NVIC_SetPendingIRQ>:
{
    6a44:	b480      	push	{r7}
    6a46:	b083      	sub	sp, #12
    6a48:	af00      	add	r7, sp, #0
    6a4a:	4603      	mov	r3, r0
    6a4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6a52:	2b00      	cmp	r3, #0
    6a54:	db0c      	blt.n	6a70 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6a56:	4909      	ldr	r1, [pc, #36]	; (6a7c <__NVIC_SetPendingIRQ+0x38>)
    6a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6a5c:	095b      	lsrs	r3, r3, #5
    6a5e:	88fa      	ldrh	r2, [r7, #6]
    6a60:	f002 021f 	and.w	r2, r2, #31
    6a64:	2001      	movs	r0, #1
    6a66:	fa00 f202 	lsl.w	r2, r0, r2
    6a6a:	3340      	adds	r3, #64	; 0x40
    6a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6a70:	bf00      	nop
    6a72:	370c      	adds	r7, #12
    6a74:	46bd      	mov	sp, r7
    6a76:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a7a:	4770      	bx	lr
    6a7c:	e000e100 	.word	0xe000e100

00006a80 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    6a80:	b580      	push	{r7, lr}
    6a82:	b082      	sub	sp, #8
    6a84:	af00      	add	r7, sp, #0
    6a86:	4603      	mov	r3, r0
    6a88:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    6a8a:	79fb      	ldrb	r3, [r7, #7]
    6a8c:	b21b      	sxth	r3, r3
    6a8e:	4618      	mov	r0, r3
    6a90:	4b02      	ldr	r3, [pc, #8]	; (6a9c <_irq_set+0x1c>)
    6a92:	4798      	blx	r3
}
    6a94:	bf00      	nop
    6a96:	3708      	adds	r7, #8
    6a98:	46bd      	mov	sp, r7
    6a9a:	bd80      	pop	{r7, pc}
    6a9c:	00006a45 	.word	0x00006a45

00006aa0 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    6aa0:	b480      	push	{r7}
    6aa2:	b083      	sub	sp, #12
    6aa4:	af00      	add	r7, sp, #0
    6aa6:	4603      	mov	r3, r0
    6aa8:	6039      	str	r1, [r7, #0]
    6aaa:	80fb      	strh	r3, [r7, #6]
    6aac:	4613      	mov	r3, r2
    6aae:	717b      	strb	r3, [r7, #5]
	switch (power) {
    6ab0:	797b      	ldrb	r3, [r7, #5]
    6ab2:	3b04      	subs	r3, #4
    6ab4:	2b05      	cmp	r3, #5
    6ab6:	d86b      	bhi.n	6b90 <_get_cycles_for_us_internal+0xf0>
    6ab8:	a201      	add	r2, pc, #4	; (adr r2, 6ac0 <_get_cycles_for_us_internal+0x20>)
    6aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6abe:	bf00      	nop
    6ac0:	00006b6f 	.word	0x00006b6f
    6ac4:	00006b4f 	.word	0x00006b4f
    6ac8:	00006b31 	.word	0x00006b31
    6acc:	00006b13 	.word	0x00006b13
    6ad0:	00006af5 	.word	0x00006af5
    6ad4:	00006ad9 	.word	0x00006ad9
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    6ad8:	88fb      	ldrh	r3, [r7, #6]
    6ada:	683a      	ldr	r2, [r7, #0]
    6adc:	4935      	ldr	r1, [pc, #212]	; (6bb4 <_get_cycles_for_us_internal+0x114>)
    6ade:	fba1 1202 	umull	r1, r2, r1, r2
    6ae2:	0c92      	lsrs	r2, r2, #18
    6ae4:	fb02 f303 	mul.w	r3, r2, r3
    6ae8:	3302      	adds	r3, #2
    6aea:	4a33      	ldr	r2, [pc, #204]	; (6bb8 <_get_cycles_for_us_internal+0x118>)
    6aec:	fba2 2303 	umull	r2, r3, r2, r3
    6af0:	085b      	lsrs	r3, r3, #1
    6af2:	e059      	b.n	6ba8 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    6af4:	88fb      	ldrh	r3, [r7, #6]
    6af6:	683a      	ldr	r2, [r7, #0]
    6af8:	0952      	lsrs	r2, r2, #5
    6afa:	4930      	ldr	r1, [pc, #192]	; (6bbc <_get_cycles_for_us_internal+0x11c>)
    6afc:	fba1 1202 	umull	r1, r2, r1, r2
    6b00:	09d2      	lsrs	r2, r2, #7
    6b02:	fb02 f303 	mul.w	r3, r2, r3
    6b06:	331d      	adds	r3, #29
    6b08:	4a2d      	ldr	r2, [pc, #180]	; (6bc0 <_get_cycles_for_us_internal+0x120>)
    6b0a:	fba2 2303 	umull	r2, r3, r2, r3
    6b0e:	091b      	lsrs	r3, r3, #4
    6b10:	e04a      	b.n	6ba8 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    6b12:	88fb      	ldrh	r3, [r7, #6]
    6b14:	683a      	ldr	r2, [r7, #0]
    6b16:	492b      	ldr	r1, [pc, #172]	; (6bc4 <_get_cycles_for_us_internal+0x124>)
    6b18:	fba1 1202 	umull	r1, r2, r1, r2
    6b1c:	0b52      	lsrs	r2, r2, #13
    6b1e:	fb02 f303 	mul.w	r3, r2, r3
    6b22:	f203 132b 	addw	r3, r3, #299	; 0x12b
    6b26:	4a28      	ldr	r2, [pc, #160]	; (6bc8 <_get_cycles_for_us_internal+0x128>)
    6b28:	fba2 2303 	umull	r2, r3, r2, r3
    6b2c:	095b      	lsrs	r3, r3, #5
    6b2e:	e03b      	b.n	6ba8 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    6b30:	88fb      	ldrh	r3, [r7, #6]
    6b32:	683a      	ldr	r2, [r7, #0]
    6b34:	4925      	ldr	r1, [pc, #148]	; (6bcc <_get_cycles_for_us_internal+0x12c>)
    6b36:	fba1 1202 	umull	r1, r2, r1, r2
    6b3a:	0992      	lsrs	r2, r2, #6
    6b3c:	fb02 f303 	mul.w	r3, r2, r3
    6b40:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    6b44:	4a22      	ldr	r2, [pc, #136]	; (6bd0 <_get_cycles_for_us_internal+0x130>)
    6b46:	fba2 2303 	umull	r2, r3, r2, r3
    6b4a:	099b      	lsrs	r3, r3, #6
    6b4c:	e02c      	b.n	6ba8 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    6b4e:	88fb      	ldrh	r3, [r7, #6]
    6b50:	683a      	ldr	r2, [r7, #0]
    6b52:	4920      	ldr	r1, [pc, #128]	; (6bd4 <_get_cycles_for_us_internal+0x134>)
    6b54:	fba1 1202 	umull	r1, r2, r1, r2
    6b58:	0952      	lsrs	r2, r2, #5
    6b5a:	fb02 f303 	mul.w	r3, r2, r3
    6b5e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    6b62:	332f      	adds	r3, #47	; 0x2f
    6b64:	4a1c      	ldr	r2, [pc, #112]	; (6bd8 <_get_cycles_for_us_internal+0x138>)
    6b66:	fba2 2303 	umull	r2, r3, r2, r3
    6b6a:	0b5b      	lsrs	r3, r3, #13
    6b6c:	e01c      	b.n	6ba8 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    6b6e:	88fb      	ldrh	r3, [r7, #6]
    6b70:	683a      	ldr	r2, [r7, #0]
    6b72:	491a      	ldr	r1, [pc, #104]	; (6bdc <_get_cycles_for_us_internal+0x13c>)
    6b74:	fba1 1202 	umull	r1, r2, r1, r2
    6b78:	08d2      	lsrs	r2, r2, #3
    6b7a:	fb02 f303 	mul.w	r3, r2, r3
    6b7e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    6b82:	f203 33df 	addw	r3, r3, #991	; 0x3df
    6b86:	4a16      	ldr	r2, [pc, #88]	; (6be0 <_get_cycles_for_us_internal+0x140>)
    6b88:	fba2 2303 	umull	r2, r3, r2, r3
    6b8c:	0c5b      	lsrs	r3, r3, #17
    6b8e:	e00b      	b.n	6ba8 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    6b90:	88fb      	ldrh	r3, [r7, #6]
    6b92:	683a      	ldr	r2, [r7, #0]
    6b94:	fb02 f303 	mul.w	r3, r2, r3
    6b98:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    6b9c:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    6ba0:	4a10      	ldr	r2, [pc, #64]	; (6be4 <_get_cycles_for_us_internal+0x144>)
    6ba2:	fba2 2303 	umull	r2, r3, r2, r3
    6ba6:	0c9b      	lsrs	r3, r3, #18
	}
}
    6ba8:	4618      	mov	r0, r3
    6baa:	370c      	adds	r7, #12
    6bac:	46bd      	mov	sp, r7
    6bae:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bb2:	4770      	bx	lr
    6bb4:	431bde83 	.word	0x431bde83
    6bb8:	aaaaaaab 	.word	0xaaaaaaab
    6bbc:	0a7c5ac5 	.word	0x0a7c5ac5
    6bc0:	88888889 	.word	0x88888889
    6bc4:	d1b71759 	.word	0xd1b71759
    6bc8:	1b4e81b5 	.word	0x1b4e81b5
    6bcc:	10624dd3 	.word	0x10624dd3
    6bd0:	057619f1 	.word	0x057619f1
    6bd4:	51eb851f 	.word	0x51eb851f
    6bd8:	45e7b273 	.word	0x45e7b273
    6bdc:	cccccccd 	.word	0xcccccccd
    6be0:	6fd91d85 	.word	0x6fd91d85
    6be4:	165e9f81 	.word	0x165e9f81

00006be8 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    6be8:	b580      	push	{r7, lr}
    6bea:	b082      	sub	sp, #8
    6bec:	af00      	add	r7, sp, #0
    6bee:	4603      	mov	r3, r0
    6bf0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    6bf2:	88fb      	ldrh	r3, [r7, #6]
    6bf4:	2209      	movs	r2, #9
    6bf6:	4904      	ldr	r1, [pc, #16]	; (6c08 <_get_cycles_for_us+0x20>)
    6bf8:	4618      	mov	r0, r3
    6bfa:	4b04      	ldr	r3, [pc, #16]	; (6c0c <_get_cycles_for_us+0x24>)
    6bfc:	4798      	blx	r3
    6bfe:	4603      	mov	r3, r0
}
    6c00:	4618      	mov	r0, r3
    6c02:	3708      	adds	r7, #8
    6c04:	46bd      	mov	sp, r7
    6c06:	bd80      	pop	{r7, pc}
    6c08:	07270e00 	.word	0x07270e00
    6c0c:	00006aa1 	.word	0x00006aa1

00006c10 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    6c10:	b480      	push	{r7}
    6c12:	b083      	sub	sp, #12
    6c14:	af00      	add	r7, sp, #0
    6c16:	4603      	mov	r3, r0
    6c18:	6039      	str	r1, [r7, #0]
    6c1a:	80fb      	strh	r3, [r7, #6]
    6c1c:	4613      	mov	r3, r2
    6c1e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    6c20:	797b      	ldrb	r3, [r7, #5]
    6c22:	3b04      	subs	r3, #4
    6c24:	2b05      	cmp	r3, #5
    6c26:	d870      	bhi.n	6d0a <_get_cycles_for_ms_internal+0xfa>
    6c28:	a201      	add	r2, pc, #4	; (adr r2, 6c30 <_get_cycles_for_ms_internal+0x20>)
    6c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6c2e:	bf00      	nop
    6c30:	00006ced 	.word	0x00006ced
    6c34:	00006cd1 	.word	0x00006cd1
    6c38:	00006cb5 	.word	0x00006cb5
    6c3c:	00006c91 	.word	0x00006c91
    6c40:	00006c6d 	.word	0x00006c6d
    6c44:	00006c49 	.word	0x00006c49
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    6c48:	88fb      	ldrh	r3, [r7, #6]
    6c4a:	683a      	ldr	r2, [r7, #0]
    6c4c:	4937      	ldr	r1, [pc, #220]	; (6d2c <_get_cycles_for_ms_internal+0x11c>)
    6c4e:	fba1 1202 	umull	r1, r2, r1, r2
    6c52:	0c92      	lsrs	r2, r2, #18
    6c54:	fb02 f303 	mul.w	r3, r2, r3
    6c58:	3302      	adds	r3, #2
    6c5a:	4a35      	ldr	r2, [pc, #212]	; (6d30 <_get_cycles_for_ms_internal+0x120>)
    6c5c:	fba2 2303 	umull	r2, r3, r2, r3
    6c60:	085b      	lsrs	r3, r3, #1
    6c62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6c66:	fb02 f303 	mul.w	r3, r2, r3
    6c6a:	e058      	b.n	6d1e <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    6c6c:	88fb      	ldrh	r3, [r7, #6]
    6c6e:	683a      	ldr	r2, [r7, #0]
    6c70:	0952      	lsrs	r2, r2, #5
    6c72:	4930      	ldr	r1, [pc, #192]	; (6d34 <_get_cycles_for_ms_internal+0x124>)
    6c74:	fba1 1202 	umull	r1, r2, r1, r2
    6c78:	09d2      	lsrs	r2, r2, #7
    6c7a:	fb02 f303 	mul.w	r3, r2, r3
    6c7e:	3302      	adds	r3, #2
    6c80:	4a2b      	ldr	r2, [pc, #172]	; (6d30 <_get_cycles_for_ms_internal+0x120>)
    6c82:	fba2 2303 	umull	r2, r3, r2, r3
    6c86:	085b      	lsrs	r3, r3, #1
    6c88:	2264      	movs	r2, #100	; 0x64
    6c8a:	fb02 f303 	mul.w	r3, r2, r3
    6c8e:	e046      	b.n	6d1e <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    6c90:	88fb      	ldrh	r3, [r7, #6]
    6c92:	683a      	ldr	r2, [r7, #0]
    6c94:	4928      	ldr	r1, [pc, #160]	; (6d38 <_get_cycles_for_ms_internal+0x128>)
    6c96:	fba1 1202 	umull	r1, r2, r1, r2
    6c9a:	0b52      	lsrs	r2, r2, #13
    6c9c:	fb02 f303 	mul.w	r3, r2, r3
    6ca0:	3302      	adds	r3, #2
    6ca2:	4a23      	ldr	r2, [pc, #140]	; (6d30 <_get_cycles_for_ms_internal+0x120>)
    6ca4:	fba2 2303 	umull	r2, r3, r2, r3
    6ca8:	085a      	lsrs	r2, r3, #1
    6caa:	4613      	mov	r3, r2
    6cac:	009b      	lsls	r3, r3, #2
    6cae:	4413      	add	r3, r2
    6cb0:	005b      	lsls	r3, r3, #1
    6cb2:	e034      	b.n	6d1e <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    6cb4:	88fb      	ldrh	r3, [r7, #6]
    6cb6:	683a      	ldr	r2, [r7, #0]
    6cb8:	4920      	ldr	r1, [pc, #128]	; (6d3c <_get_cycles_for_ms_internal+0x12c>)
    6cba:	fba1 1202 	umull	r1, r2, r1, r2
    6cbe:	0992      	lsrs	r2, r2, #6
    6cc0:	fb02 f303 	mul.w	r3, r2, r3
    6cc4:	3302      	adds	r3, #2
    6cc6:	4a1a      	ldr	r2, [pc, #104]	; (6d30 <_get_cycles_for_ms_internal+0x120>)
    6cc8:	fba2 2303 	umull	r2, r3, r2, r3
    6ccc:	085b      	lsrs	r3, r3, #1
    6cce:	e026      	b.n	6d1e <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    6cd0:	88fb      	ldrh	r3, [r7, #6]
    6cd2:	683a      	ldr	r2, [r7, #0]
    6cd4:	491a      	ldr	r1, [pc, #104]	; (6d40 <_get_cycles_for_ms_internal+0x130>)
    6cd6:	fba1 1202 	umull	r1, r2, r1, r2
    6cda:	0952      	lsrs	r2, r2, #5
    6cdc:	fb02 f303 	mul.w	r3, r2, r3
    6ce0:	331d      	adds	r3, #29
    6ce2:	4a18      	ldr	r2, [pc, #96]	; (6d44 <_get_cycles_for_ms_internal+0x134>)
    6ce4:	fba2 2303 	umull	r2, r3, r2, r3
    6ce8:	091b      	lsrs	r3, r3, #4
    6cea:	e018      	b.n	6d1e <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    6cec:	88fb      	ldrh	r3, [r7, #6]
    6cee:	683a      	ldr	r2, [r7, #0]
    6cf0:	4915      	ldr	r1, [pc, #84]	; (6d48 <_get_cycles_for_ms_internal+0x138>)
    6cf2:	fba1 1202 	umull	r1, r2, r1, r2
    6cf6:	08d2      	lsrs	r2, r2, #3
    6cf8:	fb02 f303 	mul.w	r3, r2, r3
    6cfc:	f203 132b 	addw	r3, r3, #299	; 0x12b
    6d00:	4a12      	ldr	r2, [pc, #72]	; (6d4c <_get_cycles_for_ms_internal+0x13c>)
    6d02:	fba2 2303 	umull	r2, r3, r2, r3
    6d06:	095b      	lsrs	r3, r3, #5
    6d08:	e009      	b.n	6d1e <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    6d0a:	88fb      	ldrh	r3, [r7, #6]
    6d0c:	683a      	ldr	r2, [r7, #0]
    6d0e:	fb02 f303 	mul.w	r3, r2, r3
    6d12:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    6d16:	4a0e      	ldr	r2, [pc, #56]	; (6d50 <_get_cycles_for_ms_internal+0x140>)
    6d18:	fba2 2303 	umull	r2, r3, r2, r3
    6d1c:	099b      	lsrs	r3, r3, #6
	}
}
    6d1e:	4618      	mov	r0, r3
    6d20:	370c      	adds	r7, #12
    6d22:	46bd      	mov	sp, r7
    6d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d28:	4770      	bx	lr
    6d2a:	bf00      	nop
    6d2c:	431bde83 	.word	0x431bde83
    6d30:	aaaaaaab 	.word	0xaaaaaaab
    6d34:	0a7c5ac5 	.word	0x0a7c5ac5
    6d38:	d1b71759 	.word	0xd1b71759
    6d3c:	10624dd3 	.word	0x10624dd3
    6d40:	51eb851f 	.word	0x51eb851f
    6d44:	88888889 	.word	0x88888889
    6d48:	cccccccd 	.word	0xcccccccd
    6d4c:	1b4e81b5 	.word	0x1b4e81b5
    6d50:	057619f1 	.word	0x057619f1

00006d54 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    6d54:	b580      	push	{r7, lr}
    6d56:	b082      	sub	sp, #8
    6d58:	af00      	add	r7, sp, #0
    6d5a:	4603      	mov	r3, r0
    6d5c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    6d5e:	88fb      	ldrh	r3, [r7, #6]
    6d60:	2209      	movs	r2, #9
    6d62:	4904      	ldr	r1, [pc, #16]	; (6d74 <_get_cycles_for_ms+0x20>)
    6d64:	4618      	mov	r0, r3
    6d66:	4b04      	ldr	r3, [pc, #16]	; (6d78 <_get_cycles_for_ms+0x24>)
    6d68:	4798      	blx	r3
    6d6a:	4603      	mov	r3, r0
}
    6d6c:	4618      	mov	r0, r3
    6d6e:	3708      	adds	r7, #8
    6d70:	46bd      	mov	sp, r7
    6d72:	bd80      	pop	{r7, pc}
    6d74:	07270e00 	.word	0x07270e00
    6d78:	00006c11 	.word	0x00006c11
    6d7c:	00000000 	.word	0x00000000

00006d80 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    6d80:	b480      	push	{r7}
    6d82:	b083      	sub	sp, #12
    6d84:	af00      	add	r7, sp, #0
    6d86:	6078      	str	r0, [r7, #4]
    6d88:	6039      	str	r1, [r7, #0]
    6d8a:	bf00      	nop
    6d8c:	f3af 8000 	nop.w

00006d90 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    6d90:	3901      	subs	r1, #1
    6d92:	d8fd      	bhi.n	6d90 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    6d94:	bf00      	nop
    6d96:	370c      	adds	r7, #12
    6d98:	46bd      	mov	sp, r7
    6d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d9e:	4770      	bx	lr

00006da0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    6da0:	b480      	push	{r7}
    6da2:	b083      	sub	sp, #12
    6da4:	af00      	add	r7, sp, #0
    6da6:	6078      	str	r0, [r7, #4]
    6da8:	460b      	mov	r3, r1
    6daa:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    6dac:	687b      	ldr	r3, [r7, #4]
    6dae:	881b      	ldrh	r3, [r3, #0]
    6db0:	b29a      	uxth	r2, r3
    6db2:	887b      	ldrh	r3, [r7, #2]
    6db4:	021b      	lsls	r3, r3, #8
    6db6:	b29b      	uxth	r3, r3
    6db8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    6dbc:	b29b      	uxth	r3, r3
    6dbe:	4313      	orrs	r3, r2
    6dc0:	b29a      	uxth	r2, r3
    6dc2:	687b      	ldr	r3, [r7, #4]
    6dc4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    6dc6:	bf00      	nop
    6dc8:	370c      	adds	r7, #12
    6dca:	46bd      	mov	sp, r7
    6dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dd0:	4770      	bx	lr

00006dd2 <hri_port_set_EVCTRL_reg>:
{
    6dd2:	b480      	push	{r7}
    6dd4:	b085      	sub	sp, #20
    6dd6:	af00      	add	r7, sp, #0
    6dd8:	60f8      	str	r0, [r7, #12]
    6dda:	460b      	mov	r3, r1
    6ddc:	607a      	str	r2, [r7, #4]
    6dde:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    6de0:	7afb      	ldrb	r3, [r7, #11]
    6de2:	7afa      	ldrb	r2, [r7, #11]
    6de4:	68f9      	ldr	r1, [r7, #12]
    6de6:	01d2      	lsls	r2, r2, #7
    6de8:	440a      	add	r2, r1
    6dea:	322c      	adds	r2, #44	; 0x2c
    6dec:	6811      	ldr	r1, [r2, #0]
    6dee:	687a      	ldr	r2, [r7, #4]
    6df0:	430a      	orrs	r2, r1
    6df2:	68f9      	ldr	r1, [r7, #12]
    6df4:	01db      	lsls	r3, r3, #7
    6df6:	440b      	add	r3, r1
    6df8:	332c      	adds	r3, #44	; 0x2c
    6dfa:	601a      	str	r2, [r3, #0]
}
    6dfc:	bf00      	nop
    6dfe:	3714      	adds	r7, #20
    6e00:	46bd      	mov	sp, r7
    6e02:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e06:	4770      	bx	lr

00006e08 <_port_event_init>:

static inline void _port_event_init()
{
    6e08:	b580      	push	{r7, lr}
    6e0a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    6e0c:	2200      	movs	r2, #0
    6e0e:	2100      	movs	r1, #0
    6e10:	4809      	ldr	r0, [pc, #36]	; (6e38 <_port_event_init+0x30>)
    6e12:	4b0a      	ldr	r3, [pc, #40]	; (6e3c <_port_event_init+0x34>)
    6e14:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    6e16:	2200      	movs	r2, #0
    6e18:	2101      	movs	r1, #1
    6e1a:	4807      	ldr	r0, [pc, #28]	; (6e38 <_port_event_init+0x30>)
    6e1c:	4b07      	ldr	r3, [pc, #28]	; (6e3c <_port_event_init+0x34>)
    6e1e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    6e20:	22ef      	movs	r2, #239	; 0xef
    6e22:	2102      	movs	r1, #2
    6e24:	4804      	ldr	r0, [pc, #16]	; (6e38 <_port_event_init+0x30>)
    6e26:	4b05      	ldr	r3, [pc, #20]	; (6e3c <_port_event_init+0x34>)
    6e28:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    6e2a:	2200      	movs	r2, #0
    6e2c:	2103      	movs	r1, #3
    6e2e:	4802      	ldr	r0, [pc, #8]	; (6e38 <_port_event_init+0x30>)
    6e30:	4b02      	ldr	r3, [pc, #8]	; (6e3c <_port_event_init+0x34>)
    6e32:	4798      	blx	r3
}
    6e34:	bf00      	nop
    6e36:	bd80      	pop	{r7, pc}
    6e38:	41008000 	.word	0x41008000
    6e3c:	00006dd3 	.word	0x00006dd3

00006e40 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6e40:	b580      	push	{r7, lr}
    6e42:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    6e44:	2104      	movs	r1, #4
    6e46:	480b      	ldr	r0, [pc, #44]	; (6e74 <_init_chip+0x34>)
    6e48:	4b0b      	ldr	r3, [pc, #44]	; (6e78 <_init_chip+0x38>)
    6e4a:	4798      	blx	r3

	_osc32kctrl_init_sources();
    6e4c:	4b0b      	ldr	r3, [pc, #44]	; (6e7c <_init_chip+0x3c>)
    6e4e:	4798      	blx	r3
	_oscctrl_init_sources();
    6e50:	4b0b      	ldr	r3, [pc, #44]	; (6e80 <_init_chip+0x40>)
    6e52:	4798      	blx	r3
	_mclk_init();
    6e54:	4b0b      	ldr	r3, [pc, #44]	; (6e84 <_init_chip+0x44>)
    6e56:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    6e58:	f44f 6084 	mov.w	r0, #1056	; 0x420
    6e5c:	4b0a      	ldr	r3, [pc, #40]	; (6e88 <_init_chip+0x48>)
    6e5e:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    6e60:	4b0a      	ldr	r3, [pc, #40]	; (6e8c <_init_chip+0x4c>)
    6e62:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6e64:	f640 30df 	movw	r0, #3039	; 0xbdf
    6e68:	4b07      	ldr	r3, [pc, #28]	; (6e88 <_init_chip+0x48>)
    6e6a:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    6e6c:	4b08      	ldr	r3, [pc, #32]	; (6e90 <_init_chip+0x50>)
    6e6e:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    6e70:	bf00      	nop
    6e72:	bd80      	pop	{r7, pc}
    6e74:	41004000 	.word	0x41004000
    6e78:	00006da1 	.word	0x00006da1
    6e7c:	00007ab1 	.word	0x00007ab1
    6e80:	00007f79 	.word	0x00007f79
    6e84:	000079d1 	.word	0x000079d1
    6e88:	000078d9 	.word	0x000078d9
    6e8c:	00007fb9 	.word	0x00007fb9
    6e90:	00006e09 	.word	0x00006e09

00006e94 <hri_dsu_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
    6e94:	b480      	push	{r7}
    6e96:	b083      	sub	sp, #12
    6e98:	af00      	add	r7, sp, #0
    6e9a:	6078      	str	r0, [r7, #4]
    6e9c:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    6e9e:	687b      	ldr	r3, [r7, #4]
    6ea0:	683a      	ldr	r2, [r7, #0]
    6ea2:	605a      	str	r2, [r3, #4]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6ea4:	bf00      	nop
    6ea6:	370c      	adds	r7, #12
    6ea8:	46bd      	mov	sp, r7
    6eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eae:	4770      	bx	lr

00006eb0 <hri_dsu_write_LENGTH_LENGTH_bf>:
	tmp = (tmp & DSU_LENGTH_LENGTH(mask)) >> DSU_LENGTH_LENGTH_Pos;
	return tmp;
}

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
    6eb0:	b480      	push	{r7}
    6eb2:	b085      	sub	sp, #20
    6eb4:	af00      	add	r7, sp, #0
    6eb6:	6078      	str	r0, [r7, #4]
    6eb8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    6eba:	687b      	ldr	r3, [r7, #4]
    6ebc:	689b      	ldr	r3, [r3, #8]
    6ebe:	60fb      	str	r3, [r7, #12]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    6ec0:	68fb      	ldr	r3, [r7, #12]
    6ec2:	f003 0303 	and.w	r3, r3, #3
    6ec6:	60fb      	str	r3, [r7, #12]
	tmp |= DSU_LENGTH_LENGTH(data);
    6ec8:	683b      	ldr	r3, [r7, #0]
    6eca:	009b      	lsls	r3, r3, #2
    6ecc:	68fa      	ldr	r2, [r7, #12]
    6ece:	4313      	orrs	r3, r2
    6ed0:	60fb      	str	r3, [r7, #12]
	((Dsu *)hw)->LENGTH.reg = tmp;
    6ed2:	687b      	ldr	r3, [r7, #4]
    6ed4:	68fa      	ldr	r2, [r7, #12]
    6ed6:	609a      	str	r2, [r3, #8]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6ed8:	bf00      	nop
    6eda:	3714      	adds	r7, #20
    6edc:	46bd      	mov	sp, r7
    6ede:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ee2:	4770      	bx	lr

00006ee4 <hri_dsu_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
    6ee4:	b480      	push	{r7}
    6ee6:	b083      	sub	sp, #12
    6ee8:	af00      	add	r7, sp, #0
    6eea:	6078      	str	r0, [r7, #4]
    6eec:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    6eee:	687b      	ldr	r3, [r7, #4]
    6ef0:	683a      	ldr	r2, [r7, #0]
    6ef2:	60da      	str	r2, [r3, #12]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6ef4:	bf00      	nop
    6ef6:	370c      	adds	r7, #12
    6ef8:	46bd      	mov	sp, r7
    6efa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6efe:	4770      	bx	lr

00006f00 <hri_dsu_read_DATA_reg>:
	((Dsu *)hw)->DATA.reg ^= mask;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline hri_dsu_data_reg_t hri_dsu_read_DATA_reg(const void *const hw)
{
    6f00:	b480      	push	{r7}
    6f02:	b083      	sub	sp, #12
    6f04:	af00      	add	r7, sp, #0
    6f06:	6078      	str	r0, [r7, #4]
	return ((Dsu *)hw)->DATA.reg;
    6f08:	687b      	ldr	r3, [r7, #4]
    6f0a:	68db      	ldr	r3, [r3, #12]
}
    6f0c:	4618      	mov	r0, r3
    6f0e:	370c      	adds	r7, #12
    6f10:	46bd      	mov	sp, r7
    6f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f16:	4770      	bx	lr

00006f18 <hri_dsu_get_STATUSA_DONE_bit>:
{
	return ((Dsu *)hw)->CFG.reg;
}

static inline bool hri_dsu_get_STATUSA_DONE_bit(const void *const hw)
{
    6f18:	b480      	push	{r7}
    6f1a:	b083      	sub	sp, #12
    6f1c:	af00      	add	r7, sp, #0
    6f1e:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    6f20:	687b      	ldr	r3, [r7, #4]
    6f22:	785b      	ldrb	r3, [r3, #1]
    6f24:	b2db      	uxtb	r3, r3
    6f26:	f003 0301 	and.w	r3, r3, #1
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	bf14      	ite	ne
    6f2e:	2301      	movne	r3, #1
    6f30:	2300      	moveq	r3, #0
    6f32:	b2db      	uxtb	r3, r3
}
    6f34:	4618      	mov	r0, r3
    6f36:	370c      	adds	r7, #12
    6f38:	46bd      	mov	sp, r7
    6f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f3e:	4770      	bx	lr

00006f40 <hri_dsu_clear_STATUSA_DONE_bit>:

static inline void hri_dsu_clear_STATUSA_DONE_bit(const void *const hw)
{
    6f40:	b480      	push	{r7}
    6f42:	b083      	sub	sp, #12
    6f44:	af00      	add	r7, sp, #0
    6f46:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    6f48:	687b      	ldr	r3, [r7, #4]
    6f4a:	2201      	movs	r2, #1
    6f4c:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6f4e:	bf00      	nop
    6f50:	370c      	adds	r7, #12
    6f52:	46bd      	mov	sp, r7
    6f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f58:	4770      	bx	lr

00006f5a <hri_dsu_get_STATUSA_BERR_bit>:
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_CRSTEXT;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dsu_get_STATUSA_BERR_bit(const void *const hw)
{
    6f5a:	b480      	push	{r7}
    6f5c:	b083      	sub	sp, #12
    6f5e:	af00      	add	r7, sp, #0
    6f60:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    6f62:	687b      	ldr	r3, [r7, #4]
    6f64:	785b      	ldrb	r3, [r3, #1]
    6f66:	b2db      	uxtb	r3, r3
    6f68:	089b      	lsrs	r3, r3, #2
    6f6a:	f003 0301 	and.w	r3, r3, #1
    6f6e:	2b00      	cmp	r3, #0
    6f70:	bf14      	ite	ne
    6f72:	2301      	movne	r3, #1
    6f74:	2300      	moveq	r3, #0
    6f76:	b2db      	uxtb	r3, r3
}
    6f78:	4618      	mov	r0, r3
    6f7a:	370c      	adds	r7, #12
    6f7c:	46bd      	mov	sp, r7
    6f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f82:	4770      	bx	lr

00006f84 <hri_dsu_clear_STATUSA_BERR_bit>:

static inline void hri_dsu_clear_STATUSA_BERR_bit(const void *const hw)
{
    6f84:	b480      	push	{r7}
    6f86:	b083      	sub	sp, #12
    6f88:	af00      	add	r7, sp, #0
    6f8a:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    6f8c:	687b      	ldr	r3, [r7, #4]
    6f8e:	2204      	movs	r2, #4
    6f90:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6f92:	bf00      	nop
    6f94:	370c      	adds	r7, #12
    6f96:	46bd      	mov	sp, r7
    6f98:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f9c:	4770      	bx	lr

00006f9e <hri_dsu_write_CTRL_reg>:
{
	return ((Dsu *)hw)->STATUSA.reg;
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
    6f9e:	b480      	push	{r7}
    6fa0:	b083      	sub	sp, #12
    6fa2:	af00      	add	r7, sp, #0
    6fa4:	6078      	str	r0, [r7, #4]
    6fa6:	460b      	mov	r3, r1
    6fa8:	70fb      	strb	r3, [r7, #3]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    6faa:	687b      	ldr	r3, [r7, #4]
    6fac:	78fa      	ldrb	r2, [r7, #3]
    6fae:	701a      	strb	r2, [r3, #0]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6fb0:	bf00      	nop
    6fb2:	370c      	adds	r7, #12
    6fb4:	46bd      	mov	sp, r7
    6fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fba:	4770      	bx	lr

00006fbc <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    6fbc:	b480      	push	{r7}
    6fbe:	b083      	sub	sp, #12
    6fc0:	af00      	add	r7, sp, #0
    6fc2:	6078      	str	r0, [r7, #4]
    6fc4:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    6fc6:	687b      	ldr	r3, [r7, #4]
    6fc8:	683a      	ldr	r2, [r7, #0]
    6fca:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    6fcc:	2300      	movs	r3, #0
}
    6fce:	4618      	mov	r0, r3
    6fd0:	370c      	adds	r7, #12
    6fd2:	46bd      	mov	sp, r7
    6fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fd8:	4770      	bx	lr

00006fda <_crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
    6fda:	b480      	push	{r7}
    6fdc:	b083      	sub	sp, #12
    6fde:	af00      	add	r7, sp, #0
    6fe0:	6078      	str	r0, [r7, #4]
	(void)device;

	return ERR_NONE;
    6fe2:	2300      	movs	r3, #0
}
    6fe4:	4618      	mov	r0, r3
    6fe6:	370c      	adds	r7, #12
    6fe8:	46bd      	mov	sp, r7
    6fea:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fee:	4770      	bx	lr

00006ff0 <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    6ff0:	b580      	push	{r7, lr}
    6ff2:	b086      	sub	sp, #24
    6ff4:	af00      	add	r7, sp, #0
    6ff6:	60f8      	str	r0, [r7, #12]
    6ff8:	60b9      	str	r1, [r7, #8]
    6ffa:	607a      	str	r2, [r7, #4]
    6ffc:	603b      	str	r3, [r7, #0]
	int32_t rc = ERR_NONE;
    6ffe:	2300      	movs	r3, #0
    7000:	617b      	str	r3, [r7, #20]
	if (((uint32_t)data) & 0x00000003) {
    7002:	68bb      	ldr	r3, [r7, #8]
    7004:	f003 0303 	and.w	r3, r3, #3
    7008:	2b00      	cmp	r3, #0
    700a:	d002      	beq.n	7012 <_crc_sync_crc32+0x22>
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
    700c:	f06f 030c 	mvn.w	r3, #12
    7010:	e05e      	b.n	70d0 <_crc_sync_crc32+0xe0>
	}

	CRITICAL_SECTION_ENTER()
    7012:	f107 0310 	add.w	r3, r7, #16
    7016:	4618      	mov	r0, r3
    7018:	4b2f      	ldr	r3, [pc, #188]	; (70d8 <_crc_sync_crc32+0xe8>)
    701a:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    701c:	68fb      	ldr	r3, [r7, #12]
    701e:	681b      	ldr	r3, [r3, #0]
    7020:	4618      	mov	r0, r3
    7022:	4b2e      	ldr	r3, [pc, #184]	; (70dc <_crc_sync_crc32+0xec>)
    7024:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    7026:	68fb      	ldr	r3, [r7, #12]
    7028:	681b      	ldr	r3, [r3, #0]
    702a:	68ba      	ldr	r2, [r7, #8]
    702c:	4611      	mov	r1, r2
    702e:	4618      	mov	r0, r3
    7030:	4b2b      	ldr	r3, [pc, #172]	; (70e0 <_crc_sync_crc32+0xf0>)
    7032:	4798      	blx	r3
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    7034:	68fb      	ldr	r3, [r7, #12]
    7036:	681b      	ldr	r3, [r3, #0]
    7038:	6879      	ldr	r1, [r7, #4]
    703a:	4618      	mov	r0, r3
    703c:	4b29      	ldr	r3, [pc, #164]	; (70e4 <_crc_sync_crc32+0xf4>)
    703e:	4798      	blx	r3
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    7040:	68fb      	ldr	r3, [r7, #12]
    7042:	681a      	ldr	r2, [r3, #0]
    7044:	683b      	ldr	r3, [r7, #0]
    7046:	681b      	ldr	r3, [r3, #0]
    7048:	4619      	mov	r1, r3
    704a:	4610      	mov	r0, r2
    704c:	4b26      	ldr	r3, [pc, #152]	; (70e8 <_crc_sync_crc32+0xf8>)
    704e:	4798      	blx	r3
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    7050:	68fb      	ldr	r3, [r7, #12]
    7052:	681b      	ldr	r3, [r3, #0]
    7054:	2104      	movs	r1, #4
    7056:	4618      	mov	r0, r3
    7058:	4b24      	ldr	r3, [pc, #144]	; (70ec <_crc_sync_crc32+0xfc>)
    705a:	4798      	blx	r3

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    705c:	bf00      	nop
    705e:	68fb      	ldr	r3, [r7, #12]
    7060:	681b      	ldr	r3, [r3, #0]
    7062:	4618      	mov	r0, r3
    7064:	4b22      	ldr	r3, [pc, #136]	; (70f0 <_crc_sync_crc32+0x100>)
    7066:	4798      	blx	r3
    7068:	4603      	mov	r3, r0
    706a:	f083 0301 	eor.w	r3, r3, #1
    706e:	b2db      	uxtb	r3, r3
    7070:	2b00      	cmp	r3, #0
    7072:	d1f4      	bne.n	705e <_crc_sync_crc32+0x6e>
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    7074:	68fb      	ldr	r3, [r7, #12]
    7076:	681b      	ldr	r3, [r3, #0]
    7078:	4618      	mov	r0, r3
    707a:	4b1e      	ldr	r3, [pc, #120]	; (70f4 <_crc_sync_crc32+0x104>)
    707c:	4798      	blx	r3
    707e:	4603      	mov	r3, r0
    7080:	2b00      	cmp	r3, #0
    7082:	d00d      	beq.n	70a0 <_crc_sync_crc32+0xb0>
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
    7084:	68fb      	ldr	r3, [r7, #12]
    7086:	681b      	ldr	r3, [r3, #0]
    7088:	4618      	mov	r0, r3
    708a:	4b1b      	ldr	r3, [pc, #108]	; (70f8 <_crc_sync_crc32+0x108>)
    708c:	4798      	blx	r3
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    708e:	68fb      	ldr	r3, [r7, #12]
    7090:	681b      	ldr	r3, [r3, #0]
    7092:	4618      	mov	r0, r3
    7094:	4b19      	ldr	r3, [pc, #100]	; (70fc <_crc_sync_crc32+0x10c>)
    7096:	4798      	blx	r3
		rc = ERR_IO;
    7098:	f06f 0305 	mvn.w	r3, #5
    709c:	617b      	str	r3, [r7, #20]
    709e:	e007      	b.n	70b0 <_crc_sync_crc32+0xc0>
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    70a0:	68fb      	ldr	r3, [r7, #12]
    70a2:	681b      	ldr	r3, [r3, #0]
    70a4:	4618      	mov	r0, r3
    70a6:	4b16      	ldr	r3, [pc, #88]	; (7100 <_crc_sync_crc32+0x110>)
    70a8:	4798      	blx	r3
    70aa:	4602      	mov	r2, r0
    70ac:	683b      	ldr	r3, [r7, #0]
    70ae:	601a      	str	r2, [r3, #0]
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    70b0:	68fb      	ldr	r3, [r7, #12]
    70b2:	681b      	ldr	r3, [r3, #0]
    70b4:	4618      	mov	r0, r3
    70b6:	4b11      	ldr	r3, [pc, #68]	; (70fc <_crc_sync_crc32+0x10c>)
    70b8:	4798      	blx	r3

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    70ba:	68fb      	ldr	r3, [r7, #12]
    70bc:	681b      	ldr	r3, [r3, #0]
    70be:	4618      	mov	r0, r3
    70c0:	4b10      	ldr	r3, [pc, #64]	; (7104 <_crc_sync_crc32+0x114>)
    70c2:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    70c4:	f107 0310 	add.w	r3, r7, #16
    70c8:	4618      	mov	r0, r3
    70ca:	4b0f      	ldr	r3, [pc, #60]	; (7108 <_crc_sync_crc32+0x118>)
    70cc:	4798      	blx	r3

	return rc;
    70ce:	697b      	ldr	r3, [r7, #20]
}
    70d0:	4618      	mov	r0, r3
    70d2:	3718      	adds	r7, #24
    70d4:	46bd      	mov	sp, r7
    70d6:	bd80      	pop	{r7, pc}
    70d8:	0000e51d 	.word	0x0000e51d
    70dc:	00008359 	.word	0x00008359
    70e0:	00006e95 	.word	0x00006e95
    70e4:	00006eb1 	.word	0x00006eb1
    70e8:	00006ee5 	.word	0x00006ee5
    70ec:	00006f9f 	.word	0x00006f9f
    70f0:	00006f19 	.word	0x00006f19
    70f4:	00006f5b 	.word	0x00006f5b
    70f8:	00006f85 	.word	0x00006f85
    70fc:	00006f41 	.word	0x00006f41
    7100:	00006f01 	.word	0x00006f01
    7104:	000082cd 	.word	0x000082cd
    7108:	0000e543 	.word	0x0000e543

0000710c <__NVIC_EnableIRQ>:
{
    710c:	b480      	push	{r7}
    710e:	b083      	sub	sp, #12
    7110:	af00      	add	r7, sp, #0
    7112:	4603      	mov	r3, r0
    7114:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    711a:	2b00      	cmp	r3, #0
    711c:	db0b      	blt.n	7136 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    711e:	4909      	ldr	r1, [pc, #36]	; (7144 <__NVIC_EnableIRQ+0x38>)
    7120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7124:	095b      	lsrs	r3, r3, #5
    7126:	88fa      	ldrh	r2, [r7, #6]
    7128:	f002 021f 	and.w	r2, r2, #31
    712c:	2001      	movs	r0, #1
    712e:	fa00 f202 	lsl.w	r2, r0, r2
    7132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7136:	bf00      	nop
    7138:	370c      	adds	r7, #12
    713a:	46bd      	mov	sp, r7
    713c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7140:	4770      	bx	lr
    7142:	bf00      	nop
    7144:	e000e100 	.word	0xe000e100

00007148 <__NVIC_DisableIRQ>:
{
    7148:	b480      	push	{r7}
    714a:	b083      	sub	sp, #12
    714c:	af00      	add	r7, sp, #0
    714e:	4603      	mov	r3, r0
    7150:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7156:	2b00      	cmp	r3, #0
    7158:	db10      	blt.n	717c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    715a:	490b      	ldr	r1, [pc, #44]	; (7188 <__NVIC_DisableIRQ+0x40>)
    715c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7160:	095b      	lsrs	r3, r3, #5
    7162:	88fa      	ldrh	r2, [r7, #6]
    7164:	f002 021f 	and.w	r2, r2, #31
    7168:	2001      	movs	r0, #1
    716a:	fa00 f202 	lsl.w	r2, r0, r2
    716e:	3320      	adds	r3, #32
    7170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7174:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7178:	f3bf 8f6f 	isb	sy
}
    717c:	bf00      	nop
    717e:	370c      	adds	r7, #12
    7180:	46bd      	mov	sp, r7
    7182:	f85d 7b04 	ldr.w	r7, [sp], #4
    7186:	4770      	bx	lr
    7188:	e000e100 	.word	0xe000e100

0000718c <__NVIC_ClearPendingIRQ>:
{
    718c:	b480      	push	{r7}
    718e:	b083      	sub	sp, #12
    7190:	af00      	add	r7, sp, #0
    7192:	4603      	mov	r3, r0
    7194:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    719a:	2b00      	cmp	r3, #0
    719c:	db0c      	blt.n	71b8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    719e:	4909      	ldr	r1, [pc, #36]	; (71c4 <__NVIC_ClearPendingIRQ+0x38>)
    71a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71a4:	095b      	lsrs	r3, r3, #5
    71a6:	88fa      	ldrh	r2, [r7, #6]
    71a8:	f002 021f 	and.w	r2, r2, #31
    71ac:	2001      	movs	r0, #1
    71ae:	fa00 f202 	lsl.w	r2, r0, r2
    71b2:	3360      	adds	r3, #96	; 0x60
    71b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    71b8:	bf00      	nop
    71ba:	370c      	adds	r7, #12
    71bc:	46bd      	mov	sp, r7
    71be:	f85d 7b04 	ldr.w	r7, [sp], #4
    71c2:	4770      	bx	lr
    71c4:	e000e100 	.word	0xe000e100

000071c8 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    71c8:	b480      	push	{r7}
    71ca:	b083      	sub	sp, #12
    71cc:	af00      	add	r7, sp, #0
    71ce:	6078      	str	r0, [r7, #4]
    71d0:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    71d2:	bf00      	nop
    71d4:	687b      	ldr	r3, [r7, #4]
    71d6:	685a      	ldr	r2, [r3, #4]
    71d8:	683b      	ldr	r3, [r7, #0]
    71da:	4013      	ands	r3, r2
    71dc:	2b00      	cmp	r3, #0
    71de:	d1f9      	bne.n	71d4 <hri_eic_wait_for_sync+0xc>
	};
}
    71e0:	bf00      	nop
    71e2:	370c      	adds	r7, #12
    71e4:	46bd      	mov	sp, r7
    71e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    71ea:	4770      	bx	lr

000071ec <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    71ec:	b480      	push	{r7}
    71ee:	b083      	sub	sp, #12
    71f0:	af00      	add	r7, sp, #0
    71f2:	6078      	str	r0, [r7, #4]
    71f4:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    71f6:	687b      	ldr	r3, [r7, #4]
    71f8:	685a      	ldr	r2, [r3, #4]
    71fa:	683b      	ldr	r3, [r7, #0]
    71fc:	4013      	ands	r3, r2
    71fe:	2b00      	cmp	r3, #0
    7200:	bf14      	ite	ne
    7202:	2301      	movne	r3, #1
    7204:	2300      	moveq	r3, #0
    7206:	b2db      	uxtb	r3, r3
}
    7208:	4618      	mov	r0, r3
    720a:	370c      	adds	r7, #12
    720c:	46bd      	mov	sp, r7
    720e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7212:	4770      	bx	lr

00007214 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    7214:	b480      	push	{r7}
    7216:	b083      	sub	sp, #12
    7218:	af00      	add	r7, sp, #0
    721a:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    721c:	687b      	ldr	r3, [r7, #4]
    721e:	695b      	ldr	r3, [r3, #20]
}
    7220:	4618      	mov	r0, r3
    7222:	370c      	adds	r7, #12
    7224:	46bd      	mov	sp, r7
    7226:	f85d 7b04 	ldr.w	r7, [sp], #4
    722a:	4770      	bx	lr

0000722c <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    722c:	b480      	push	{r7}
    722e:	b083      	sub	sp, #12
    7230:	af00      	add	r7, sp, #0
    7232:	6078      	str	r0, [r7, #4]
    7234:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    7236:	687b      	ldr	r3, [r7, #4]
    7238:	683a      	ldr	r2, [r7, #0]
    723a:	615a      	str	r2, [r3, #20]
}
    723c:	bf00      	nop
    723e:	370c      	adds	r7, #12
    7240:	46bd      	mov	sp, r7
    7242:	f85d 7b04 	ldr.w	r7, [sp], #4
    7246:	4770      	bx	lr

00007248 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    7248:	b480      	push	{r7}
    724a:	b083      	sub	sp, #12
    724c:	af00      	add	r7, sp, #0
    724e:	6078      	str	r0, [r7, #4]
    7250:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    7252:	687b      	ldr	r3, [r7, #4]
    7254:	683a      	ldr	r2, [r7, #0]
    7256:	611a      	str	r2, [r3, #16]
}
    7258:	bf00      	nop
    725a:	370c      	adds	r7, #12
    725c:	46bd      	mov	sp, r7
    725e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7262:	4770      	bx	lr

00007264 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    7264:	b480      	push	{r7}
    7266:	b083      	sub	sp, #12
    7268:	af00      	add	r7, sp, #0
    726a:	6078      	str	r0, [r7, #4]
    726c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    726e:	687b      	ldr	r3, [r7, #4]
    7270:	683a      	ldr	r2, [r7, #0]
    7272:	60da      	str	r2, [r3, #12]
}
    7274:	bf00      	nop
    7276:	370c      	adds	r7, #12
    7278:	46bd      	mov	sp, r7
    727a:	f85d 7b04 	ldr.w	r7, [sp], #4
    727e:	4770      	bx	lr

00007280 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7280:	b580      	push	{r7, lr}
    7282:	b082      	sub	sp, #8
    7284:	af00      	add	r7, sp, #0
    7286:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    7288:	687b      	ldr	r3, [r7, #4]
    728a:	781b      	ldrb	r3, [r3, #0]
    728c:	b2db      	uxtb	r3, r3
    728e:	f043 0302 	orr.w	r3, r3, #2
    7292:	b2da      	uxtb	r2, r3
    7294:	687b      	ldr	r3, [r7, #4]
    7296:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    7298:	2103      	movs	r1, #3
    729a:	6878      	ldr	r0, [r7, #4]
    729c:	4b02      	ldr	r3, [pc, #8]	; (72a8 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    729e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    72a0:	bf00      	nop
    72a2:	3708      	adds	r7, #8
    72a4:	46bd      	mov	sp, r7
    72a6:	bd80      	pop	{r7, pc}
    72a8:	000071c9 	.word	0x000071c9

000072ac <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    72ac:	b580      	push	{r7, lr}
    72ae:	b082      	sub	sp, #8
    72b0:	af00      	add	r7, sp, #0
    72b2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    72b4:	687b      	ldr	r3, [r7, #4]
    72b6:	781b      	ldrb	r3, [r3, #0]
    72b8:	b2db      	uxtb	r3, r3
    72ba:	f023 0302 	bic.w	r3, r3, #2
    72be:	b2da      	uxtb	r2, r3
    72c0:	687b      	ldr	r3, [r7, #4]
    72c2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    72c4:	2103      	movs	r1, #3
    72c6:	6878      	ldr	r0, [r7, #4]
    72c8:	4b02      	ldr	r3, [pc, #8]	; (72d4 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    72ca:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    72cc:	bf00      	nop
    72ce:	3708      	adds	r7, #8
    72d0:	46bd      	mov	sp, r7
    72d2:	bd80      	pop	{r7, pc}
    72d4:	000071c9 	.word	0x000071c9

000072d8 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    72d8:	b580      	push	{r7, lr}
    72da:	b084      	sub	sp, #16
    72dc:	af00      	add	r7, sp, #0
    72de:	6078      	str	r0, [r7, #4]
    72e0:	460b      	mov	r3, r1
    72e2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    72e4:	687b      	ldr	r3, [r7, #4]
    72e6:	781b      	ldrb	r3, [r3, #0]
    72e8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    72ea:	7bfb      	ldrb	r3, [r7, #15]
    72ec:	f023 0310 	bic.w	r3, r3, #16
    72f0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    72f2:	78fb      	ldrb	r3, [r7, #3]
    72f4:	011b      	lsls	r3, r3, #4
    72f6:	b25a      	sxtb	r2, r3
    72f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    72fc:	4313      	orrs	r3, r2
    72fe:	b25b      	sxtb	r3, r3
    7300:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    7302:	687b      	ldr	r3, [r7, #4]
    7304:	7bfa      	ldrb	r2, [r7, #15]
    7306:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    7308:	2103      	movs	r1, #3
    730a:	6878      	ldr	r0, [r7, #4]
    730c:	4b02      	ldr	r3, [pc, #8]	; (7318 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    730e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    7310:	bf00      	nop
    7312:	3710      	adds	r7, #16
    7314:	46bd      	mov	sp, r7
    7316:	bd80      	pop	{r7, pc}
    7318:	000071c9 	.word	0x000071c9

0000731c <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    731c:	b580      	push	{r7, lr}
    731e:	b084      	sub	sp, #16
    7320:	af00      	add	r7, sp, #0
    7322:	6078      	str	r0, [r7, #4]
    7324:	460b      	mov	r3, r1
    7326:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    7328:	2103      	movs	r1, #3
    732a:	6878      	ldr	r0, [r7, #4]
    732c:	4b06      	ldr	r3, [pc, #24]	; (7348 <hri_eic_get_CTRLA_reg+0x2c>)
    732e:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    7330:	687b      	ldr	r3, [r7, #4]
    7332:	781b      	ldrb	r3, [r3, #0]
    7334:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7336:	7bfa      	ldrb	r2, [r7, #15]
    7338:	78fb      	ldrb	r3, [r7, #3]
    733a:	4013      	ands	r3, r2
    733c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    733e:	7bfb      	ldrb	r3, [r7, #15]
}
    7340:	4618      	mov	r0, r3
    7342:	3710      	adds	r7, #16
    7344:	46bd      	mov	sp, r7
    7346:	bd80      	pop	{r7, pc}
    7348:	000071c9 	.word	0x000071c9

0000734c <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    734c:	b580      	push	{r7, lr}
    734e:	b082      	sub	sp, #8
    7350:	af00      	add	r7, sp, #0
    7352:	6078      	str	r0, [r7, #4]
    7354:	460b      	mov	r3, r1
    7356:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    7358:	687b      	ldr	r3, [r7, #4]
    735a:	78fa      	ldrb	r2, [r7, #3]
    735c:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    735e:	2103      	movs	r1, #3
    7360:	6878      	ldr	r0, [r7, #4]
    7362:	4b03      	ldr	r3, [pc, #12]	; (7370 <hri_eic_write_CTRLA_reg+0x24>)
    7364:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    7366:	bf00      	nop
    7368:	3708      	adds	r7, #8
    736a:	46bd      	mov	sp, r7
    736c:	bd80      	pop	{r7, pc}
    736e:	bf00      	nop
    7370:	000071c9 	.word	0x000071c9

00007374 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    7374:	b480      	push	{r7}
    7376:	b083      	sub	sp, #12
    7378:	af00      	add	r7, sp, #0
    737a:	6078      	str	r0, [r7, #4]
    737c:	460b      	mov	r3, r1
    737e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    7380:	687b      	ldr	r3, [r7, #4]
    7382:	78fa      	ldrb	r2, [r7, #3]
    7384:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7386:	bf00      	nop
    7388:	370c      	adds	r7, #12
    738a:	46bd      	mov	sp, r7
    738c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7390:	4770      	bx	lr

00007392 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    7392:	b480      	push	{r7}
    7394:	b083      	sub	sp, #12
    7396:	af00      	add	r7, sp, #0
    7398:	6078      	str	r0, [r7, #4]
    739a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    739c:	687b      	ldr	r3, [r7, #4]
    739e:	683a      	ldr	r2, [r7, #0]
    73a0:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    73a2:	bf00      	nop
    73a4:	370c      	adds	r7, #12
    73a6:	46bd      	mov	sp, r7
    73a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    73ac:	4770      	bx	lr

000073ae <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    73ae:	b480      	push	{r7}
    73b0:	b083      	sub	sp, #12
    73b2:	af00      	add	r7, sp, #0
    73b4:	6078      	str	r0, [r7, #4]
    73b6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    73b8:	687b      	ldr	r3, [r7, #4]
    73ba:	683a      	ldr	r2, [r7, #0]
    73bc:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    73be:	bf00      	nop
    73c0:	370c      	adds	r7, #12
    73c2:	46bd      	mov	sp, r7
    73c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    73c8:	4770      	bx	lr

000073ca <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    73ca:	b480      	push	{r7}
    73cc:	b085      	sub	sp, #20
    73ce:	af00      	add	r7, sp, #0
    73d0:	60f8      	str	r0, [r7, #12]
    73d2:	460b      	mov	r3, r1
    73d4:	607a      	str	r2, [r7, #4]
    73d6:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    73d8:	7afb      	ldrb	r3, [r7, #11]
    73da:	68fa      	ldr	r2, [r7, #12]
    73dc:	3306      	adds	r3, #6
    73de:	009b      	lsls	r3, r3, #2
    73e0:	4413      	add	r3, r2
    73e2:	687a      	ldr	r2, [r7, #4]
    73e4:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    73e6:	bf00      	nop
    73e8:	3714      	adds	r7, #20
    73ea:	46bd      	mov	sp, r7
    73ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    73f0:	4770      	bx	lr

000073f2 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    73f2:	b480      	push	{r7}
    73f4:	b083      	sub	sp, #12
    73f6:	af00      	add	r7, sp, #0
    73f8:	6078      	str	r0, [r7, #4]
    73fa:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    73fc:	687b      	ldr	r3, [r7, #4]
    73fe:	683a      	ldr	r2, [r7, #0]
    7400:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    7402:	bf00      	nop
    7404:	370c      	adds	r7, #12
    7406:	46bd      	mov	sp, r7
    7408:	f85d 7b04 	ldr.w	r7, [sp], #4
    740c:	4770      	bx	lr

0000740e <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    740e:	b480      	push	{r7}
    7410:	b083      	sub	sp, #12
    7412:	af00      	add	r7, sp, #0
    7414:	6078      	str	r0, [r7, #4]
    7416:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    7418:	687b      	ldr	r3, [r7, #4]
    741a:	683a      	ldr	r2, [r7, #0]
    741c:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    741e:	bf00      	nop
    7420:	370c      	adds	r7, #12
    7422:	46bd      	mov	sp, r7
    7424:	f85d 7b04 	ldr.w	r7, [sp], #4
    7428:	4770      	bx	lr
	...

0000742c <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    742c:	b580      	push	{r7, lr}
    742e:	b082      	sub	sp, #8
    7430:	af00      	add	r7, sp, #0
    7432:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    7434:	2101      	movs	r1, #1
    7436:	4838      	ldr	r0, [pc, #224]	; (7518 <_ext_irq_init+0xec>)
    7438:	4b38      	ldr	r3, [pc, #224]	; (751c <_ext_irq_init+0xf0>)
    743a:	4798      	blx	r3
    743c:	4603      	mov	r3, r0
    743e:	f083 0301 	eor.w	r3, r3, #1
    7442:	b2db      	uxtb	r3, r3
    7444:	2b00      	cmp	r3, #0
    7446:	d011      	beq.n	746c <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    7448:	2102      	movs	r1, #2
    744a:	4833      	ldr	r0, [pc, #204]	; (7518 <_ext_irq_init+0xec>)
    744c:	4b34      	ldr	r3, [pc, #208]	; (7520 <_ext_irq_init+0xf4>)
    744e:	4798      	blx	r3
    7450:	4603      	mov	r3, r0
    7452:	2b00      	cmp	r3, #0
    7454:	d006      	beq.n	7464 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    7456:	4830      	ldr	r0, [pc, #192]	; (7518 <_ext_irq_init+0xec>)
    7458:	4b32      	ldr	r3, [pc, #200]	; (7524 <_ext_irq_init+0xf8>)
    745a:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    745c:	2102      	movs	r1, #2
    745e:	482e      	ldr	r0, [pc, #184]	; (7518 <_ext_irq_init+0xec>)
    7460:	4b31      	ldr	r3, [pc, #196]	; (7528 <_ext_irq_init+0xfc>)
    7462:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    7464:	2101      	movs	r1, #1
    7466:	482c      	ldr	r0, [pc, #176]	; (7518 <_ext_irq_init+0xec>)
    7468:	4b30      	ldr	r3, [pc, #192]	; (752c <_ext_irq_init+0x100>)
    746a:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    746c:	2101      	movs	r1, #1
    746e:	482a      	ldr	r0, [pc, #168]	; (7518 <_ext_irq_init+0xec>)
    7470:	4b2d      	ldr	r3, [pc, #180]	; (7528 <_ext_irq_init+0xfc>)
    7472:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    7474:	2100      	movs	r1, #0
    7476:	4828      	ldr	r0, [pc, #160]	; (7518 <_ext_irq_init+0xec>)
    7478:	4b2d      	ldr	r3, [pc, #180]	; (7530 <_ext_irq_init+0x104>)
    747a:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    747c:	2100      	movs	r1, #0
    747e:	4826      	ldr	r0, [pc, #152]	; (7518 <_ext_irq_init+0xec>)
    7480:	4b2c      	ldr	r3, [pc, #176]	; (7534 <_ext_irq_init+0x108>)
    7482:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    7484:	2100      	movs	r1, #0
    7486:	4824      	ldr	r0, [pc, #144]	; (7518 <_ext_irq_init+0xec>)
    7488:	4b2b      	ldr	r3, [pc, #172]	; (7538 <_ext_irq_init+0x10c>)
    748a:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    748c:	2130      	movs	r1, #48	; 0x30
    748e:	4822      	ldr	r0, [pc, #136]	; (7518 <_ext_irq_init+0xec>)
    7490:	4b2a      	ldr	r3, [pc, #168]	; (753c <_ext_irq_init+0x110>)
    7492:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    7494:	2130      	movs	r1, #48	; 0x30
    7496:	4820      	ldr	r0, [pc, #128]	; (7518 <_ext_irq_init+0xec>)
    7498:	4b29      	ldr	r3, [pc, #164]	; (7540 <_ext_irq_init+0x114>)
    749a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    749c:	2100      	movs	r1, #0
    749e:	481e      	ldr	r0, [pc, #120]	; (7518 <_ext_irq_init+0xec>)
    74a0:	4b28      	ldr	r3, [pc, #160]	; (7544 <_ext_irq_init+0x118>)
    74a2:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    74a4:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    74a8:	2100      	movs	r1, #0
    74aa:	481b      	ldr	r0, [pc, #108]	; (7518 <_ext_irq_init+0xec>)
    74ac:	4b26      	ldr	r3, [pc, #152]	; (7548 <_ext_irq_init+0x11c>)
    74ae:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    74b0:	2200      	movs	r2, #0
    74b2:	2101      	movs	r1, #1
    74b4:	4818      	ldr	r0, [pc, #96]	; (7518 <_ext_irq_init+0xec>)
    74b6:	4b24      	ldr	r3, [pc, #144]	; (7548 <_ext_irq_init+0x11c>)
    74b8:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    74ba:	4817      	ldr	r0, [pc, #92]	; (7518 <_ext_irq_init+0xec>)
    74bc:	4b23      	ldr	r3, [pc, #140]	; (754c <_ext_irq_init+0x120>)
    74be:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    74c0:	2010      	movs	r0, #16
    74c2:	4b23      	ldr	r3, [pc, #140]	; (7550 <_ext_irq_init+0x124>)
    74c4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    74c6:	2010      	movs	r0, #16
    74c8:	4b22      	ldr	r3, [pc, #136]	; (7554 <_ext_irq_init+0x128>)
    74ca:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    74cc:	2010      	movs	r0, #16
    74ce:	4b22      	ldr	r3, [pc, #136]	; (7558 <_ext_irq_init+0x12c>)
    74d0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    74d2:	2011      	movs	r0, #17
    74d4:	4b1e      	ldr	r3, [pc, #120]	; (7550 <_ext_irq_init+0x124>)
    74d6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    74d8:	2011      	movs	r0, #17
    74da:	4b1e      	ldr	r3, [pc, #120]	; (7554 <_ext_irq_init+0x128>)
    74dc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    74de:	2011      	movs	r0, #17
    74e0:	4b1d      	ldr	r3, [pc, #116]	; (7558 <_ext_irq_init+0x12c>)
    74e2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    74e4:	2012      	movs	r0, #18
    74e6:	4b1a      	ldr	r3, [pc, #104]	; (7550 <_ext_irq_init+0x124>)
    74e8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    74ea:	2012      	movs	r0, #18
    74ec:	4b19      	ldr	r3, [pc, #100]	; (7554 <_ext_irq_init+0x128>)
    74ee:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    74f0:	2012      	movs	r0, #18
    74f2:	4b19      	ldr	r3, [pc, #100]	; (7558 <_ext_irq_init+0x12c>)
    74f4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    74f6:	2013      	movs	r0, #19
    74f8:	4b15      	ldr	r3, [pc, #84]	; (7550 <_ext_irq_init+0x124>)
    74fa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    74fc:	2013      	movs	r0, #19
    74fe:	4b15      	ldr	r3, [pc, #84]	; (7554 <_ext_irq_init+0x128>)
    7500:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    7502:	2013      	movs	r0, #19
    7504:	4b14      	ldr	r3, [pc, #80]	; (7558 <_ext_irq_init+0x12c>)
    7506:	4798      	blx	r3

	callback = cb;
    7508:	4a14      	ldr	r2, [pc, #80]	; (755c <_ext_irq_init+0x130>)
    750a:	687b      	ldr	r3, [r7, #4]
    750c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    750e:	2300      	movs	r3, #0
}
    7510:	4618      	mov	r0, r3
    7512:	3708      	adds	r7, #8
    7514:	46bd      	mov	sp, r7
    7516:	bd80      	pop	{r7, pc}
    7518:	40002800 	.word	0x40002800
    751c:	000071ed 	.word	0x000071ed
    7520:	0000731d 	.word	0x0000731d
    7524:	000072ad 	.word	0x000072ad
    7528:	000071c9 	.word	0x000071c9
    752c:	0000734d 	.word	0x0000734d
    7530:	000072d9 	.word	0x000072d9
    7534:	00007375 	.word	0x00007375
    7538:	00007393 	.word	0x00007393
    753c:	000073af 	.word	0x000073af
    7540:	000073f3 	.word	0x000073f3
    7544:	0000740f 	.word	0x0000740f
    7548:	000073cb 	.word	0x000073cb
    754c:	00007281 	.word	0x00007281
    7550:	00007149 	.word	0x00007149
    7554:	0000718d 	.word	0x0000718d
    7558:	0000710d 	.word	0x0000710d
    755c:	2000236c 	.word	0x2000236c

00007560 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    7560:	b580      	push	{r7, lr}
    7562:	b084      	sub	sp, #16
    7564:	af00      	add	r7, sp, #0
    7566:	6078      	str	r0, [r7, #4]
    7568:	460b      	mov	r3, r1
    756a:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    756c:	23ff      	movs	r3, #255	; 0xff
    756e:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    7570:	2300      	movs	r3, #0
    7572:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    7574:	e010      	b.n	7598 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    7576:	7bbb      	ldrb	r3, [r7, #14]
    7578:	4a1c      	ldr	r2, [pc, #112]	; (75ec <_ext_irq_enable+0x8c>)
    757a:	00db      	lsls	r3, r3, #3
    757c:	4413      	add	r3, r2
    757e:	685a      	ldr	r2, [r3, #4]
    7580:	687b      	ldr	r3, [r7, #4]
    7582:	429a      	cmp	r2, r3
    7584:	d105      	bne.n	7592 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    7586:	7bbb      	ldrb	r3, [r7, #14]
    7588:	4a18      	ldr	r2, [pc, #96]	; (75ec <_ext_irq_enable+0x8c>)
    758a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    758e:	73fb      	strb	r3, [r7, #15]
			break;
    7590:	e005      	b.n	759e <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    7592:	7bbb      	ldrb	r3, [r7, #14]
    7594:	3301      	adds	r3, #1
    7596:	73bb      	strb	r3, [r7, #14]
    7598:	7bbb      	ldrb	r3, [r7, #14]
    759a:	2b03      	cmp	r3, #3
    759c:	d9eb      	bls.n	7576 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    759e:	7bfb      	ldrb	r3, [r7, #15]
    75a0:	2bff      	cmp	r3, #255	; 0xff
    75a2:	d102      	bne.n	75aa <_ext_irq_enable+0x4a>
		return -1;
    75a4:	f04f 33ff 	mov.w	r3, #4294967295
    75a8:	e01c      	b.n	75e4 <_ext_irq_enable+0x84>
	}

	if (enable) {
    75aa:	78fb      	ldrb	r3, [r7, #3]
    75ac:	2b00      	cmp	r3, #0
    75ae:	d008      	beq.n	75c2 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    75b0:	7bfb      	ldrb	r3, [r7, #15]
    75b2:	2201      	movs	r2, #1
    75b4:	fa02 f303 	lsl.w	r3, r2, r3
    75b8:	4619      	mov	r1, r3
    75ba:	480d      	ldr	r0, [pc, #52]	; (75f0 <_ext_irq_enable+0x90>)
    75bc:	4b0d      	ldr	r3, [pc, #52]	; (75f4 <_ext_irq_enable+0x94>)
    75be:	4798      	blx	r3
    75c0:	e00f      	b.n	75e2 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    75c2:	7bfb      	ldrb	r3, [r7, #15]
    75c4:	2201      	movs	r2, #1
    75c6:	fa02 f303 	lsl.w	r3, r2, r3
    75ca:	4619      	mov	r1, r3
    75cc:	4808      	ldr	r0, [pc, #32]	; (75f0 <_ext_irq_enable+0x90>)
    75ce:	4b0a      	ldr	r3, [pc, #40]	; (75f8 <_ext_irq_enable+0x98>)
    75d0:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    75d2:	7bfb      	ldrb	r3, [r7, #15]
    75d4:	2201      	movs	r2, #1
    75d6:	fa02 f303 	lsl.w	r3, r2, r3
    75da:	4619      	mov	r1, r3
    75dc:	4804      	ldr	r0, [pc, #16]	; (75f0 <_ext_irq_enable+0x90>)
    75de:	4b07      	ldr	r3, [pc, #28]	; (75fc <_ext_irq_enable+0x9c>)
    75e0:	4798      	blx	r3
	}

	return ERR_NONE;
    75e2:	2300      	movs	r3, #0
}
    75e4:	4618      	mov	r0, r3
    75e6:	3710      	adds	r7, #16
    75e8:	46bd      	mov	sp, r7
    75ea:	bd80      	pop	{r7, pc}
    75ec:	0001a6cc 	.word	0x0001a6cc
    75f0:	40002800 	.word	0x40002800
    75f4:	00007249 	.word	0x00007249
    75f8:	00007265 	.word	0x00007265
    75fc:	0000722d 	.word	0x0000722d

00007600 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    7600:	b580      	push	{r7, lr}
    7602:	b084      	sub	sp, #16
    7604:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    7606:	4841      	ldr	r0, [pc, #260]	; (770c <_ext_irq_handler+0x10c>)
    7608:	4b41      	ldr	r3, [pc, #260]	; (7710 <_ext_irq_handler+0x110>)
    760a:	4798      	blx	r3
    760c:	4603      	mov	r3, r0
    760e:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    7610:	f04f 33ff 	mov.w	r3, #4294967295
    7614:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    7616:	683b      	ldr	r3, [r7, #0]
    7618:	4619      	mov	r1, r3
    761a:	483c      	ldr	r0, [pc, #240]	; (770c <_ext_irq_handler+0x10c>)
    761c:	4b3d      	ldr	r3, [pc, #244]	; (7714 <_ext_irq_handler+0x114>)
    761e:	4798      	blx	r3

	ASSERT(callback);
    7620:	4b3d      	ldr	r3, [pc, #244]	; (7718 <_ext_irq_handler+0x118>)
    7622:	681b      	ldr	r3, [r3, #0]
    7624:	2b00      	cmp	r3, #0
    7626:	bf14      	ite	ne
    7628:	2301      	movne	r3, #1
    762a:	2300      	moveq	r3, #0
    762c:	b2db      	uxtb	r3, r3
    762e:	22f4      	movs	r2, #244	; 0xf4
    7630:	493a      	ldr	r1, [pc, #232]	; (771c <_ext_irq_handler+0x11c>)
    7632:	4618      	mov	r0, r3
    7634:	4b3a      	ldr	r3, [pc, #232]	; (7720 <_ext_irq_handler+0x120>)
    7636:	4798      	blx	r3

	while (flags) {
    7638:	e060      	b.n	76fc <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    763a:	683b      	ldr	r3, [r7, #0]
    763c:	4618      	mov	r0, r3
    763e:	4b39      	ldr	r3, [pc, #228]	; (7724 <_ext_irq_handler+0x124>)
    7640:	4798      	blx	r3
    7642:	4603      	mov	r3, r0
    7644:	b2db      	uxtb	r3, r3
    7646:	3b01      	subs	r3, #1
    7648:	b2db      	uxtb	r3, r3
    764a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    764c:	e047      	b.n	76de <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    764e:	2300      	movs	r3, #0
    7650:	71fb      	strb	r3, [r7, #7]
    7652:	2304      	movs	r3, #4
    7654:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    7656:	e024      	b.n	76a2 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    7658:	79ba      	ldrb	r2, [r7, #6]
    765a:	79fb      	ldrb	r3, [r7, #7]
    765c:	4413      	add	r3, r2
    765e:	105b      	asrs	r3, r3, #1
    7660:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    7662:	797b      	ldrb	r3, [r7, #5]
    7664:	4a30      	ldr	r2, [pc, #192]	; (7728 <_ext_irq_handler+0x128>)
    7666:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    766a:	461a      	mov	r2, r3
    766c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7670:	429a      	cmp	r2, r3
    7672:	d106      	bne.n	7682 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    7674:	797b      	ldrb	r3, [r7, #5]
    7676:	4a2c      	ldr	r2, [pc, #176]	; (7728 <_ext_irq_handler+0x128>)
    7678:	00db      	lsls	r3, r3, #3
    767a:	4413      	add	r3, r2
    767c:	685b      	ldr	r3, [r3, #4]
    767e:	60bb      	str	r3, [r7, #8]
					break;
    7680:	e013      	b.n	76aa <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    7682:	797b      	ldrb	r3, [r7, #5]
    7684:	4a28      	ldr	r2, [pc, #160]	; (7728 <_ext_irq_handler+0x128>)
    7686:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    768a:	461a      	mov	r2, r3
    768c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7690:	429a      	cmp	r2, r3
    7692:	da03      	bge.n	769c <_ext_irq_handler+0x9c>
					lower = middle + 1;
    7694:	797b      	ldrb	r3, [r7, #5]
    7696:	3301      	adds	r3, #1
    7698:	71fb      	strb	r3, [r7, #7]
    769a:	e002      	b.n	76a2 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    769c:	797b      	ldrb	r3, [r7, #5]
    769e:	3b01      	subs	r3, #1
    76a0:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    76a2:	79ba      	ldrb	r2, [r7, #6]
    76a4:	79fb      	ldrb	r3, [r7, #7]
    76a6:	429a      	cmp	r2, r3
    76a8:	d2d6      	bcs.n	7658 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    76aa:	68bb      	ldr	r3, [r7, #8]
    76ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    76b0:	d003      	beq.n	76ba <_ext_irq_handler+0xba>
				callback(pin);
    76b2:	4b19      	ldr	r3, [pc, #100]	; (7718 <_ext_irq_handler+0x118>)
    76b4:	681b      	ldr	r3, [r3, #0]
    76b6:	68b8      	ldr	r0, [r7, #8]
    76b8:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    76ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    76be:	2201      	movs	r2, #1
    76c0:	fa02 f303 	lsl.w	r3, r2, r3
    76c4:	43da      	mvns	r2, r3
    76c6:	683b      	ldr	r3, [r7, #0]
    76c8:	4013      	ands	r3, r2
    76ca:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    76cc:	683b      	ldr	r3, [r7, #0]
    76ce:	4618      	mov	r0, r3
    76d0:	4b14      	ldr	r3, [pc, #80]	; (7724 <_ext_irq_handler+0x124>)
    76d2:	4798      	blx	r3
    76d4:	4603      	mov	r3, r0
    76d6:	b2db      	uxtb	r3, r3
    76d8:	3b01      	subs	r3, #1
    76da:	b2db      	uxtb	r3, r3
    76dc:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    76de:	f997 300f 	ldrsb.w	r3, [r7, #15]
    76e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    76e6:	d1b2      	bne.n	764e <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    76e8:	4808      	ldr	r0, [pc, #32]	; (770c <_ext_irq_handler+0x10c>)
    76ea:	4b09      	ldr	r3, [pc, #36]	; (7710 <_ext_irq_handler+0x110>)
    76ec:	4798      	blx	r3
    76ee:	4603      	mov	r3, r0
    76f0:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    76f2:	683b      	ldr	r3, [r7, #0]
    76f4:	4619      	mov	r1, r3
    76f6:	4805      	ldr	r0, [pc, #20]	; (770c <_ext_irq_handler+0x10c>)
    76f8:	4b06      	ldr	r3, [pc, #24]	; (7714 <_ext_irq_handler+0x114>)
    76fa:	4798      	blx	r3
	while (flags) {
    76fc:	683b      	ldr	r3, [r7, #0]
    76fe:	2b00      	cmp	r3, #0
    7700:	d19b      	bne.n	763a <_ext_irq_handler+0x3a>
	}
}
    7702:	bf00      	nop
    7704:	3710      	adds	r7, #16
    7706:	46bd      	mov	sp, r7
    7708:	bd80      	pop	{r7, pc}
    770a:	bf00      	nop
    770c:	40002800 	.word	0x40002800
    7710:	00007215 	.word	0x00007215
    7714:	0000722d 	.word	0x0000722d
    7718:	2000236c 	.word	0x2000236c
    771c:	0001a6ec 	.word	0x0001a6ec
    7720:	00006241 	.word	0x00006241
    7724:	00016069 	.word	0x00016069
    7728:	0001a6cc 	.word	0x0001a6cc

0000772c <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    772c:	b580      	push	{r7, lr}
    772e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7730:	4b01      	ldr	r3, [pc, #4]	; (7738 <EIC_4_Handler+0xc>)
    7732:	4798      	blx	r3
} /**
    7734:	bf00      	nop
    7736:	bd80      	pop	{r7, pc}
    7738:	00007601 	.word	0x00007601

0000773c <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    773c:	b580      	push	{r7, lr}
    773e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7740:	4b01      	ldr	r3, [pc, #4]	; (7748 <EIC_5_Handler+0xc>)
    7742:	4798      	blx	r3
} /**
    7744:	bf00      	nop
    7746:	bd80      	pop	{r7, pc}
    7748:	00007601 	.word	0x00007601

0000774c <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    774c:	b580      	push	{r7, lr}
    774e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7750:	4b01      	ldr	r3, [pc, #4]	; (7758 <EIC_6_Handler+0xc>)
    7752:	4798      	blx	r3
} /**
    7754:	bf00      	nop
    7756:	bd80      	pop	{r7, pc}
    7758:	00007601 	.word	0x00007601

0000775c <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    775c:	b580      	push	{r7, lr}
    775e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7760:	4b01      	ldr	r3, [pc, #4]	; (7768 <EIC_7_Handler+0xc>)
    7762:	4798      	blx	r3
}
    7764:	bf00      	nop
    7766:	bd80      	pop	{r7, pc}
    7768:	00007601 	.word	0x00007601

0000776c <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    776c:	b480      	push	{r7}
    776e:	b085      	sub	sp, #20
    7770:	af00      	add	r7, sp, #0
    7772:	60f8      	str	r0, [r7, #12]
    7774:	460b      	mov	r3, r1
    7776:	607a      	str	r2, [r7, #4]
    7778:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    777a:	7afa      	ldrb	r2, [r7, #11]
    777c:	68fb      	ldr	r3, [r7, #12]
    777e:	3248      	adds	r2, #72	; 0x48
    7780:	6879      	ldr	r1, [r7, #4]
    7782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    7786:	bf00      	nop
    7788:	3714      	adds	r7, #20
    778a:	46bd      	mov	sp, r7
    778c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7790:	4770      	bx	lr

00007792 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    7792:	b480      	push	{r7}
    7794:	b083      	sub	sp, #12
    7796:	af00      	add	r7, sp, #0
    7798:	6078      	str	r0, [r7, #4]
    779a:	460b      	mov	r3, r1
    779c:	70fb      	strb	r3, [r7, #3]
    779e:	4613      	mov	r3, r2
    77a0:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    77a2:	78fb      	ldrb	r3, [r7, #3]
    77a4:	687a      	ldr	r2, [r7, #4]
    77a6:	3304      	adds	r3, #4
    77a8:	00db      	lsls	r3, r3, #3
    77aa:	4413      	add	r3, r2
    77ac:	78ba      	ldrb	r2, [r7, #2]
    77ae:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    77b0:	78fb      	ldrb	r3, [r7, #3]
    77b2:	78ba      	ldrb	r2, [r7, #2]
    77b4:	43d2      	mvns	r2, r2
    77b6:	b2d1      	uxtb	r1, r2
    77b8:	687a      	ldr	r2, [r7, #4]
    77ba:	3304      	adds	r3, #4
    77bc:	00db      	lsls	r3, r3, #3
    77be:	4413      	add	r3, r2
    77c0:	460a      	mov	r2, r1
    77c2:	711a      	strb	r2, [r3, #4]
}
    77c4:	bf00      	nop
    77c6:	370c      	adds	r7, #12
    77c8:	46bd      	mov	sp, r7
    77ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    77ce:	4770      	bx	lr

000077d0 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    77d0:	b480      	push	{r7}
    77d2:	b085      	sub	sp, #20
    77d4:	af00      	add	r7, sp, #0
    77d6:	60f8      	str	r0, [r7, #12]
    77d8:	460b      	mov	r3, r1
    77da:	607a      	str	r2, [r7, #4]
    77dc:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    77de:	7afa      	ldrb	r2, [r7, #11]
    77e0:	68fb      	ldr	r3, [r7, #12]
    77e2:	3204      	adds	r2, #4
    77e4:	6879      	ldr	r1, [r7, #4]
    77e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    77ea:	bf00      	nop
    77ec:	3714      	adds	r7, #20
    77ee:	46bd      	mov	sp, r7
    77f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    77f4:	4770      	bx	lr
	...

000077f8 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    77f8:	b580      	push	{r7, lr}
    77fa:	b082      	sub	sp, #8
    77fc:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    77fe:	2300      	movs	r3, #0
    7800:	71fb      	strb	r3, [r7, #7]
    7802:	e00b      	b.n	781c <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    7804:	79fb      	ldrb	r3, [r7, #7]
    7806:	4a18      	ldr	r2, [pc, #96]	; (7868 <_event_system_init+0x70>)
    7808:	5cd3      	ldrb	r3, [r2, r3]
    780a:	461a      	mov	r2, r3
    780c:	79fb      	ldrb	r3, [r7, #7]
    780e:	4619      	mov	r1, r3
    7810:	4816      	ldr	r0, [pc, #88]	; (786c <_event_system_init+0x74>)
    7812:	4b17      	ldr	r3, [pc, #92]	; (7870 <_event_system_init+0x78>)
    7814:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    7816:	79fb      	ldrb	r3, [r7, #7]
    7818:	3301      	adds	r3, #1
    781a:	71fb      	strb	r3, [r7, #7]
    781c:	79fb      	ldrb	r3, [r7, #7]
    781e:	2b42      	cmp	r3, #66	; 0x42
    7820:	d9f0      	bls.n	7804 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    7822:	2300      	movs	r3, #0
    7824:	71fb      	strb	r3, [r7, #7]
    7826:	e016      	b.n	7856 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    7828:	79fb      	ldrb	r3, [r7, #7]
    782a:	4a12      	ldr	r2, [pc, #72]	; (7874 <_event_system_init+0x7c>)
    782c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    7830:	461a      	mov	r2, r3
    7832:	79fb      	ldrb	r3, [r7, #7]
    7834:	4619      	mov	r1, r3
    7836:	480d      	ldr	r0, [pc, #52]	; (786c <_event_system_init+0x74>)
    7838:	4b0f      	ldr	r3, [pc, #60]	; (7878 <_event_system_init+0x80>)
    783a:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    783c:	79fb      	ldrb	r3, [r7, #7]
    783e:	4a0f      	ldr	r2, [pc, #60]	; (787c <_event_system_init+0x84>)
    7840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7844:	b2da      	uxtb	r2, r3
    7846:	79fb      	ldrb	r3, [r7, #7]
    7848:	4619      	mov	r1, r3
    784a:	4808      	ldr	r0, [pc, #32]	; (786c <_event_system_init+0x74>)
    784c:	4b0c      	ldr	r3, [pc, #48]	; (7880 <_event_system_init+0x88>)
    784e:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    7850:	79fb      	ldrb	r3, [r7, #7]
    7852:	3301      	adds	r3, #1
    7854:	71fb      	strb	r3, [r7, #7]
    7856:	79fb      	ldrb	r3, [r7, #7]
    7858:	2b1f      	cmp	r3, #31
    785a:	d9e5      	bls.n	7828 <_event_system_init+0x30>
	}

	return ERR_NONE;
    785c:	2300      	movs	r3, #0
}
    785e:	4618      	mov	r0, r3
    7860:	3708      	adds	r7, #8
    7862:	46bd      	mov	sp, r7
    7864:	bd80      	pop	{r7, pc}
    7866:	bf00      	nop
    7868:	0001a704 	.word	0x0001a704
    786c:	4100e000 	.word	0x4100e000
    7870:	0000776d 	.word	0x0000776d
    7874:	0001a748 	.word	0x0001a748
    7878:	000077d1 	.word	0x000077d1
    787c:	0001a788 	.word	0x0001a788
    7880:	00007793 	.word	0x00007793

00007884 <hri_gclk_wait_for_sync>:
{
    7884:	b480      	push	{r7}
    7886:	b083      	sub	sp, #12
    7888:	af00      	add	r7, sp, #0
    788a:	6078      	str	r0, [r7, #4]
    788c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    788e:	bf00      	nop
    7890:	687b      	ldr	r3, [r7, #4]
    7892:	685a      	ldr	r2, [r3, #4]
    7894:	683b      	ldr	r3, [r7, #0]
    7896:	4013      	ands	r3, r2
    7898:	2b00      	cmp	r3, #0
    789a:	d1f9      	bne.n	7890 <hri_gclk_wait_for_sync+0xc>
}
    789c:	bf00      	nop
    789e:	370c      	adds	r7, #12
    78a0:	46bd      	mov	sp, r7
    78a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    78a6:	4770      	bx	lr

000078a8 <hri_gclk_write_GENCTRL_reg>:
{
    78a8:	b580      	push	{r7, lr}
    78aa:	b084      	sub	sp, #16
    78ac:	af00      	add	r7, sp, #0
    78ae:	60f8      	str	r0, [r7, #12]
    78b0:	460b      	mov	r3, r1
    78b2:	607a      	str	r2, [r7, #4]
    78b4:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    78b6:	7afa      	ldrb	r2, [r7, #11]
    78b8:	68fb      	ldr	r3, [r7, #12]
    78ba:	3208      	adds	r2, #8
    78bc:	6879      	ldr	r1, [r7, #4]
    78be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    78c2:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    78c6:	68f8      	ldr	r0, [r7, #12]
    78c8:	4b02      	ldr	r3, [pc, #8]	; (78d4 <hri_gclk_write_GENCTRL_reg+0x2c>)
    78ca:	4798      	blx	r3
}
    78cc:	bf00      	nop
    78ce:	3710      	adds	r7, #16
    78d0:	46bd      	mov	sp, r7
    78d2:	bd80      	pop	{r7, pc}
    78d4:	00007885 	.word	0x00007885

000078d8 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    78d8:	b580      	push	{r7, lr}
    78da:	b082      	sub	sp, #8
    78dc:	af00      	add	r7, sp, #0
    78de:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    78e0:	687b      	ldr	r3, [r7, #4]
    78e2:	f003 0301 	and.w	r3, r3, #1
    78e6:	2b00      	cmp	r3, #0
    78e8:	d004      	beq.n	78f4 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    78ea:	4a27      	ldr	r2, [pc, #156]	; (7988 <_gclk_init_generators_by_fref+0xb0>)
    78ec:	2100      	movs	r1, #0
    78ee:	4827      	ldr	r0, [pc, #156]	; (798c <_gclk_init_generators_by_fref+0xb4>)
    78f0:	4b27      	ldr	r3, [pc, #156]	; (7990 <_gclk_init_generators_by_fref+0xb8>)
    78f2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    78f4:	687b      	ldr	r3, [r7, #4]
    78f6:	f003 0302 	and.w	r3, r3, #2
    78fa:	2b00      	cmp	r3, #0
    78fc:	d004      	beq.n	7908 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    78fe:	4a25      	ldr	r2, [pc, #148]	; (7994 <_gclk_init_generators_by_fref+0xbc>)
    7900:	2101      	movs	r1, #1
    7902:	4822      	ldr	r0, [pc, #136]	; (798c <_gclk_init_generators_by_fref+0xb4>)
    7904:	4b22      	ldr	r3, [pc, #136]	; (7990 <_gclk_init_generators_by_fref+0xb8>)
    7906:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    7908:	687b      	ldr	r3, [r7, #4]
    790a:	f003 0304 	and.w	r3, r3, #4
    790e:	2b00      	cmp	r3, #0
    7910:	d004      	beq.n	791c <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    7912:	4a21      	ldr	r2, [pc, #132]	; (7998 <_gclk_init_generators_by_fref+0xc0>)
    7914:	2102      	movs	r1, #2
    7916:	481d      	ldr	r0, [pc, #116]	; (798c <_gclk_init_generators_by_fref+0xb4>)
    7918:	4b1d      	ldr	r3, [pc, #116]	; (7990 <_gclk_init_generators_by_fref+0xb8>)
    791a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    791c:	687b      	ldr	r3, [r7, #4]
    791e:	f003 0308 	and.w	r3, r3, #8
    7922:	2b00      	cmp	r3, #0
    7924:	d004      	beq.n	7930 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    7926:	4a1d      	ldr	r2, [pc, #116]	; (799c <_gclk_init_generators_by_fref+0xc4>)
    7928:	2103      	movs	r1, #3
    792a:	4818      	ldr	r0, [pc, #96]	; (798c <_gclk_init_generators_by_fref+0xb4>)
    792c:	4b18      	ldr	r3, [pc, #96]	; (7990 <_gclk_init_generators_by_fref+0xb8>)
    792e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    7930:	687b      	ldr	r3, [r7, #4]
    7932:	f003 0310 	and.w	r3, r3, #16
    7936:	2b00      	cmp	r3, #0
    7938:	d004      	beq.n	7944 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    793a:	4a19      	ldr	r2, [pc, #100]	; (79a0 <_gclk_init_generators_by_fref+0xc8>)
    793c:	2104      	movs	r1, #4
    793e:	4813      	ldr	r0, [pc, #76]	; (798c <_gclk_init_generators_by_fref+0xb4>)
    7940:	4b13      	ldr	r3, [pc, #76]	; (7990 <_gclk_init_generators_by_fref+0xb8>)
    7942:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    7944:	687b      	ldr	r3, [r7, #4]
    7946:	f003 0320 	and.w	r3, r3, #32
    794a:	2b00      	cmp	r3, #0
    794c:	d004      	beq.n	7958 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    794e:	4a15      	ldr	r2, [pc, #84]	; (79a4 <_gclk_init_generators_by_fref+0xcc>)
    7950:	2105      	movs	r1, #5
    7952:	480e      	ldr	r0, [pc, #56]	; (798c <_gclk_init_generators_by_fref+0xb4>)
    7954:	4b0e      	ldr	r3, [pc, #56]	; (7990 <_gclk_init_generators_by_fref+0xb8>)
    7956:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    7958:	687b      	ldr	r3, [r7, #4]
    795a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    795e:	2b00      	cmp	r3, #0
    7960:	d004      	beq.n	796c <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    7962:	4a11      	ldr	r2, [pc, #68]	; (79a8 <_gclk_init_generators_by_fref+0xd0>)
    7964:	210a      	movs	r1, #10
    7966:	4809      	ldr	r0, [pc, #36]	; (798c <_gclk_init_generators_by_fref+0xb4>)
    7968:	4b09      	ldr	r3, [pc, #36]	; (7990 <_gclk_init_generators_by_fref+0xb8>)
    796a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    796c:	687b      	ldr	r3, [r7, #4]
    796e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    7972:	2b00      	cmp	r3, #0
    7974:	d004      	beq.n	7980 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    7976:	4a0d      	ldr	r2, [pc, #52]	; (79ac <_gclk_init_generators_by_fref+0xd4>)
    7978:	210b      	movs	r1, #11
    797a:	4804      	ldr	r0, [pc, #16]	; (798c <_gclk_init_generators_by_fref+0xb4>)
    797c:	4b04      	ldr	r3, [pc, #16]	; (7990 <_gclk_init_generators_by_fref+0xb8>)
    797e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    7980:	bf00      	nop
    7982:	3708      	adds	r7, #8
    7984:	46bd      	mov	sp, r7
    7986:	bd80      	pop	{r7, pc}
    7988:	00010107 	.word	0x00010107
    798c:	40001c00 	.word	0x40001c00
    7990:	000078a9 	.word	0x000078a9
    7994:	00010907 	.word	0x00010907
    7998:	00010906 	.word	0x00010906
    799c:	00011908 	.word	0x00011908
    79a0:	00010901 	.word	0x00010901
    79a4:	00062901 	.word	0x00062901
    79a8:	00010905 	.word	0x00010905
    79ac:	00041905 	.word	0x00041905

000079b0 <hri_mclk_write_CPUDIV_reg>:
{
    79b0:	b480      	push	{r7}
    79b2:	b083      	sub	sp, #12
    79b4:	af00      	add	r7, sp, #0
    79b6:	6078      	str	r0, [r7, #4]
    79b8:	460b      	mov	r3, r1
    79ba:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    79bc:	687b      	ldr	r3, [r7, #4]
    79be:	78fa      	ldrb	r2, [r7, #3]
    79c0:	715a      	strb	r2, [r3, #5]
}
    79c2:	bf00      	nop
    79c4:	370c      	adds	r7, #12
    79c6:	46bd      	mov	sp, r7
    79c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    79cc:	4770      	bx	lr
	...

000079d0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    79d0:	b580      	push	{r7, lr}
    79d2:	b082      	sub	sp, #8
    79d4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    79d6:	4b05      	ldr	r3, [pc, #20]	; (79ec <_mclk_init+0x1c>)
    79d8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    79da:	2101      	movs	r1, #1
    79dc:	6878      	ldr	r0, [r7, #4]
    79de:	4b04      	ldr	r3, [pc, #16]	; (79f0 <_mclk_init+0x20>)
    79e0:	4798      	blx	r3
}
    79e2:	bf00      	nop
    79e4:	3708      	adds	r7, #8
    79e6:	46bd      	mov	sp, r7
    79e8:	bd80      	pop	{r7, pc}
    79ea:	bf00      	nop
    79ec:	40000800 	.word	0x40000800
    79f0:	000079b1 	.word	0x000079b1

000079f4 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    79f4:	b480      	push	{r7}
    79f6:	b083      	sub	sp, #12
    79f8:	af00      	add	r7, sp, #0
    79fa:	6078      	str	r0, [r7, #4]
    79fc:	460b      	mov	r3, r1
    79fe:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    7a00:	687b      	ldr	r3, [r7, #4]
    7a02:	78fa      	ldrb	r2, [r7, #3]
    7a04:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7a06:	bf00      	nop
    7a08:	370c      	adds	r7, #12
    7a0a:	46bd      	mov	sp, r7
    7a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a10:	4770      	bx	lr

00007a12 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    7a12:	b480      	push	{r7}
    7a14:	b083      	sub	sp, #12
    7a16:	af00      	add	r7, sp, #0
    7a18:	6078      	str	r0, [r7, #4]
    7a1a:	460b      	mov	r3, r1
    7a1c:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    7a1e:	687b      	ldr	r3, [r7, #4]
    7a20:	887a      	ldrh	r2, [r7, #2]
    7a22:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7a24:	bf00      	nop
    7a26:	370c      	adds	r7, #12
    7a28:	46bd      	mov	sp, r7
    7a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a2e:	4770      	bx	lr

00007a30 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    7a30:	b480      	push	{r7}
    7a32:	b083      	sub	sp, #12
    7a34:	af00      	add	r7, sp, #0
    7a36:	6078      	str	r0, [r7, #4]
    7a38:	460b      	mov	r3, r1
    7a3a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    7a3c:	687b      	ldr	r3, [r7, #4]
    7a3e:	78fa      	ldrb	r2, [r7, #3]
    7a40:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7a42:	bf00      	nop
    7a44:	370c      	adds	r7, #12
    7a46:	46bd      	mov	sp, r7
    7a48:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a4c:	4770      	bx	lr

00007a4e <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    7a4e:	b480      	push	{r7}
    7a50:	b083      	sub	sp, #12
    7a52:	af00      	add	r7, sp, #0
    7a54:	6078      	str	r0, [r7, #4]
    7a56:	460b      	mov	r3, r1
    7a58:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    7a5a:	687b      	ldr	r3, [r7, #4]
    7a5c:	78fa      	ldrb	r2, [r7, #3]
    7a5e:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7a60:	bf00      	nop
    7a62:	370c      	adds	r7, #12
    7a64:	46bd      	mov	sp, r7
    7a66:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a6a:	4770      	bx	lr

00007a6c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    7a6c:	b480      	push	{r7}
    7a6e:	b085      	sub	sp, #20
    7a70:	af00      	add	r7, sp, #0
    7a72:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    7a74:	687b      	ldr	r3, [r7, #4]
    7a76:	69db      	ldr	r3, [r3, #28]
    7a78:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    7a7a:	68fb      	ldr	r3, [r7, #12]
    7a7c:	0a1b      	lsrs	r3, r3, #8
    7a7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a82:	60fb      	str	r3, [r7, #12]
	return tmp;
    7a84:	68fb      	ldr	r3, [r7, #12]
}
    7a86:	4618      	mov	r0, r3
    7a88:	3714      	adds	r7, #20
    7a8a:	46bd      	mov	sp, r7
    7a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a90:	4770      	bx	lr

00007a92 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    7a92:	b480      	push	{r7}
    7a94:	b083      	sub	sp, #12
    7a96:	af00      	add	r7, sp, #0
    7a98:	6078      	str	r0, [r7, #4]
    7a9a:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    7a9c:	687b      	ldr	r3, [r7, #4]
    7a9e:	683a      	ldr	r2, [r7, #0]
    7aa0:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7aa2:	bf00      	nop
    7aa4:	370c      	adds	r7, #12
    7aa6:	46bd      	mov	sp, r7
    7aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aac:	4770      	bx	lr
	...

00007ab0 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    7ab0:	b580      	push	{r7, lr}
    7ab2:	b082      	sub	sp, #8
    7ab4:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    7ab6:	4b13      	ldr	r3, [pc, #76]	; (7b04 <_osc32kctrl_init_sources+0x54>)
    7ab8:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    7aba:	2300      	movs	r3, #0
    7abc:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    7abe:	f242 018e 	movw	r1, #8334	; 0x208e
    7ac2:	6878      	ldr	r0, [r7, #4]
    7ac4:	4b10      	ldr	r3, [pc, #64]	; (7b08 <_osc32kctrl_init_sources+0x58>)
    7ac6:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    7ac8:	2100      	movs	r1, #0
    7aca:	6878      	ldr	r0, [r7, #4]
    7acc:	4b0f      	ldr	r3, [pc, #60]	; (7b0c <_osc32kctrl_init_sources+0x5c>)
    7ace:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    7ad0:	2100      	movs	r1, #0
    7ad2:	6878      	ldr	r0, [r7, #4]
    7ad4:	4b0e      	ldr	r3, [pc, #56]	; (7b10 <_osc32kctrl_init_sources+0x60>)
    7ad6:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    7ad8:	6878      	ldr	r0, [r7, #4]
    7ada:	4b0e      	ldr	r3, [pc, #56]	; (7b14 <_osc32kctrl_init_sources+0x64>)
    7adc:	4798      	blx	r3
    7ade:	4603      	mov	r3, r0
    7ae0:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    7ae2:	887b      	ldrh	r3, [r7, #2]
    7ae4:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    7ae6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    7aea:	4619      	mov	r1, r3
    7aec:	6878      	ldr	r0, [r7, #4]
    7aee:	4b0a      	ldr	r3, [pc, #40]	; (7b18 <_osc32kctrl_init_sources+0x68>)
    7af0:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    7af2:	2100      	movs	r1, #0
    7af4:	6878      	ldr	r0, [r7, #4]
    7af6:	4b09      	ldr	r3, [pc, #36]	; (7b1c <_osc32kctrl_init_sources+0x6c>)
    7af8:	4798      	blx	r3
	(void)calib;
}
    7afa:	bf00      	nop
    7afc:	3708      	adds	r7, #8
    7afe:	46bd      	mov	sp, r7
    7b00:	bd80      	pop	{r7, pc}
    7b02:	bf00      	nop
    7b04:	40001400 	.word	0x40001400
    7b08:	00007a13 	.word	0x00007a13
    7b0c:	00007a31 	.word	0x00007a31
    7b10:	00007a4f 	.word	0x00007a4f
    7b14:	00007a6d 	.word	0x00007a6d
    7b18:	00007a93 	.word	0x00007a93
    7b1c:	000079f5 	.word	0x000079f5

00007b20 <hri_gclk_wait_for_sync>:
{
    7b20:	b480      	push	{r7}
    7b22:	b083      	sub	sp, #12
    7b24:	af00      	add	r7, sp, #0
    7b26:	6078      	str	r0, [r7, #4]
    7b28:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7b2a:	bf00      	nop
    7b2c:	687b      	ldr	r3, [r7, #4]
    7b2e:	685a      	ldr	r2, [r3, #4]
    7b30:	683b      	ldr	r3, [r7, #0]
    7b32:	4013      	ands	r3, r2
    7b34:	2b00      	cmp	r3, #0
    7b36:	d1f9      	bne.n	7b2c <hri_gclk_wait_for_sync+0xc>
}
    7b38:	bf00      	nop
    7b3a:	370c      	adds	r7, #12
    7b3c:	46bd      	mov	sp, r7
    7b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b42:	4770      	bx	lr

00007b44 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    7b44:	b480      	push	{r7}
    7b46:	b083      	sub	sp, #12
    7b48:	af00      	add	r7, sp, #0
    7b4a:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    7b4c:	687b      	ldr	r3, [r7, #4]
    7b4e:	685b      	ldr	r3, [r3, #4]
    7b50:	089b      	lsrs	r3, r3, #2
    7b52:	f003 0301 	and.w	r3, r3, #1
    7b56:	2b00      	cmp	r3, #0
    7b58:	bf14      	ite	ne
    7b5a:	2301      	movne	r3, #1
    7b5c:	2300      	moveq	r3, #0
    7b5e:	b2db      	uxtb	r3, r3
}
    7b60:	4618      	mov	r0, r3
    7b62:	370c      	adds	r7, #12
    7b64:	46bd      	mov	sp, r7
    7b66:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b6a:	4770      	bx	lr

00007b6c <hri_gclk_read_SYNCBUSY_reg>:
{
    7b6c:	b480      	push	{r7}
    7b6e:	b083      	sub	sp, #12
    7b70:	af00      	add	r7, sp, #0
    7b72:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    7b74:	687b      	ldr	r3, [r7, #4]
    7b76:	685b      	ldr	r3, [r3, #4]
}
    7b78:	4618      	mov	r0, r3
    7b7a:	370c      	adds	r7, #12
    7b7c:	46bd      	mov	sp, r7
    7b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b82:	4770      	bx	lr

00007b84 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    7b84:	b580      	push	{r7, lr}
    7b86:	b086      	sub	sp, #24
    7b88:	af00      	add	r7, sp, #0
    7b8a:	60f8      	str	r0, [r7, #12]
    7b8c:	460b      	mov	r3, r1
    7b8e:	607a      	str	r2, [r7, #4]
    7b90:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    7b92:	7afa      	ldrb	r2, [r7, #11]
    7b94:	68fb      	ldr	r3, [r7, #12]
    7b96:	3208      	adds	r2, #8
    7b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b9c:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    7b9e:	697b      	ldr	r3, [r7, #20]
    7ba0:	f023 030f 	bic.w	r3, r3, #15
    7ba4:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    7ba6:	687b      	ldr	r3, [r7, #4]
    7ba8:	f003 030f 	and.w	r3, r3, #15
    7bac:	697a      	ldr	r2, [r7, #20]
    7bae:	4313      	orrs	r3, r2
    7bb0:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    7bb2:	7afa      	ldrb	r2, [r7, #11]
    7bb4:	68fb      	ldr	r3, [r7, #12]
    7bb6:	3208      	adds	r2, #8
    7bb8:	6979      	ldr	r1, [r7, #20]
    7bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    7bbe:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    7bc2:	68f8      	ldr	r0, [r7, #12]
    7bc4:	4b02      	ldr	r3, [pc, #8]	; (7bd0 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    7bc6:	4798      	blx	r3
}
    7bc8:	bf00      	nop
    7bca:	3718      	adds	r7, #24
    7bcc:	46bd      	mov	sp, r7
    7bce:	bd80      	pop	{r7, pc}
    7bd0:	00007b21 	.word	0x00007b21

00007bd4 <hri_gclk_write_PCHCTRL_reg>:
{
    7bd4:	b480      	push	{r7}
    7bd6:	b085      	sub	sp, #20
    7bd8:	af00      	add	r7, sp, #0
    7bda:	60f8      	str	r0, [r7, #12]
    7bdc:	460b      	mov	r3, r1
    7bde:	607a      	str	r2, [r7, #4]
    7be0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    7be2:	7afa      	ldrb	r2, [r7, #11]
    7be4:	68fb      	ldr	r3, [r7, #12]
    7be6:	3220      	adds	r2, #32
    7be8:	6879      	ldr	r1, [r7, #4]
    7bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7bee:	bf00      	nop
    7bf0:	3714      	adds	r7, #20
    7bf2:	46bd      	mov	sp, r7
    7bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bf8:	4770      	bx	lr

00007bfa <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    7bfa:	b480      	push	{r7}
    7bfc:	b085      	sub	sp, #20
    7bfe:	af00      	add	r7, sp, #0
    7c00:	60f8      	str	r0, [r7, #12]
    7c02:	460b      	mov	r3, r1
    7c04:	607a      	str	r2, [r7, #4]
    7c06:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    7c08:	bf00      	nop
    7c0a:	7afa      	ldrb	r2, [r7, #11]
    7c0c:	68f9      	ldr	r1, [r7, #12]
    7c0e:	4613      	mov	r3, r2
    7c10:	009b      	lsls	r3, r3, #2
    7c12:	4413      	add	r3, r2
    7c14:	009b      	lsls	r3, r3, #2
    7c16:	440b      	add	r3, r1
    7c18:	333c      	adds	r3, #60	; 0x3c
    7c1a:	681a      	ldr	r2, [r3, #0]
    7c1c:	687b      	ldr	r3, [r7, #4]
    7c1e:	4013      	ands	r3, r2
    7c20:	2b00      	cmp	r3, #0
    7c22:	d1f2      	bne.n	7c0a <hri_oscctrl_wait_for_sync+0x10>
	};
}
    7c24:	bf00      	nop
    7c26:	3714      	adds	r7, #20
    7c28:	46bd      	mov	sp, r7
    7c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c2e:	4770      	bx	lr

00007c30 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    7c30:	b480      	push	{r7}
    7c32:	b083      	sub	sp, #12
    7c34:	af00      	add	r7, sp, #0
    7c36:	6078      	str	r0, [r7, #4]
    7c38:	460b      	mov	r3, r1
    7c3a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    7c3c:	78fa      	ldrb	r2, [r7, #3]
    7c3e:	6879      	ldr	r1, [r7, #4]
    7c40:	4613      	mov	r3, r2
    7c42:	009b      	lsls	r3, r3, #2
    7c44:	4413      	add	r3, r2
    7c46:	009b      	lsls	r3, r3, #2
    7c48:	440b      	add	r3, r1
    7c4a:	3340      	adds	r3, #64	; 0x40
    7c4c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    7c4e:	f003 0301 	and.w	r3, r3, #1
    7c52:	2b00      	cmp	r3, #0
    7c54:	bf14      	ite	ne
    7c56:	2301      	movne	r3, #1
    7c58:	2300      	moveq	r3, #0
    7c5a:	b2db      	uxtb	r3, r3
}
    7c5c:	4618      	mov	r0, r3
    7c5e:	370c      	adds	r7, #12
    7c60:	46bd      	mov	sp, r7
    7c62:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c66:	4770      	bx	lr

00007c68 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    7c68:	b480      	push	{r7}
    7c6a:	b083      	sub	sp, #12
    7c6c:	af00      	add	r7, sp, #0
    7c6e:	6078      	str	r0, [r7, #4]
    7c70:	460b      	mov	r3, r1
    7c72:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    7c74:	78fa      	ldrb	r2, [r7, #3]
    7c76:	6879      	ldr	r1, [r7, #4]
    7c78:	4613      	mov	r3, r2
    7c7a:	009b      	lsls	r3, r3, #2
    7c7c:	4413      	add	r3, r2
    7c7e:	009b      	lsls	r3, r3, #2
    7c80:	440b      	add	r3, r1
    7c82:	3340      	adds	r3, #64	; 0x40
    7c84:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    7c86:	085b      	lsrs	r3, r3, #1
    7c88:	f003 0301 	and.w	r3, r3, #1
    7c8c:	2b00      	cmp	r3, #0
    7c8e:	bf14      	ite	ne
    7c90:	2301      	movne	r3, #1
    7c92:	2300      	moveq	r3, #0
    7c94:	b2db      	uxtb	r3, r3
}
    7c96:	4618      	mov	r0, r3
    7c98:	370c      	adds	r7, #12
    7c9a:	46bd      	mov	sp, r7
    7c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ca0:	4770      	bx	lr
	...

00007ca4 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    7ca4:	b580      	push	{r7, lr}
    7ca6:	b082      	sub	sp, #8
    7ca8:	af00      	add	r7, sp, #0
    7caa:	6078      	str	r0, [r7, #4]
    7cac:	460b      	mov	r3, r1
    7cae:	70fb      	strb	r3, [r7, #3]
    7cb0:	4613      	mov	r3, r2
    7cb2:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    7cb4:	78fa      	ldrb	r2, [r7, #3]
    7cb6:	6879      	ldr	r1, [r7, #4]
    7cb8:	4613      	mov	r3, r2
    7cba:	009b      	lsls	r3, r3, #2
    7cbc:	4413      	add	r3, r2
    7cbe:	009b      	lsls	r3, r3, #2
    7cc0:	440b      	add	r3, r1
    7cc2:	3330      	adds	r3, #48	; 0x30
    7cc4:	78ba      	ldrb	r2, [r7, #2]
    7cc6:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    7cc8:	78fb      	ldrb	r3, [r7, #3]
    7cca:	2202      	movs	r2, #2
    7ccc:	4619      	mov	r1, r3
    7cce:	6878      	ldr	r0, [r7, #4]
    7cd0:	4b02      	ldr	r3, [pc, #8]	; (7cdc <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    7cd2:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7cd4:	bf00      	nop
    7cd6:	3708      	adds	r7, #8
    7cd8:	46bd      	mov	sp, r7
    7cda:	bd80      	pop	{r7, pc}
    7cdc:	00007bfb 	.word	0x00007bfb

00007ce0 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    7ce0:	b580      	push	{r7, lr}
    7ce2:	b084      	sub	sp, #16
    7ce4:	af00      	add	r7, sp, #0
    7ce6:	60f8      	str	r0, [r7, #12]
    7ce8:	460b      	mov	r3, r1
    7cea:	607a      	str	r2, [r7, #4]
    7cec:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    7cee:	7afa      	ldrb	r2, [r7, #11]
    7cf0:	68f9      	ldr	r1, [r7, #12]
    7cf2:	4613      	mov	r3, r2
    7cf4:	009b      	lsls	r3, r3, #2
    7cf6:	4413      	add	r3, r2
    7cf8:	009b      	lsls	r3, r3, #2
    7cfa:	440b      	add	r3, r1
    7cfc:	3334      	adds	r3, #52	; 0x34
    7cfe:	687a      	ldr	r2, [r7, #4]
    7d00:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    7d02:	7afb      	ldrb	r3, [r7, #11]
    7d04:	2206      	movs	r2, #6
    7d06:	4619      	mov	r1, r3
    7d08:	68f8      	ldr	r0, [r7, #12]
    7d0a:	4b03      	ldr	r3, [pc, #12]	; (7d18 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    7d0c:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7d0e:	bf00      	nop
    7d10:	3710      	adds	r7, #16
    7d12:	46bd      	mov	sp, r7
    7d14:	bd80      	pop	{r7, pc}
    7d16:	bf00      	nop
    7d18:	00007bfb 	.word	0x00007bfb

00007d1c <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    7d1c:	b480      	push	{r7}
    7d1e:	b085      	sub	sp, #20
    7d20:	af00      	add	r7, sp, #0
    7d22:	60f8      	str	r0, [r7, #12]
    7d24:	460b      	mov	r3, r1
    7d26:	607a      	str	r2, [r7, #4]
    7d28:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    7d2a:	7afa      	ldrb	r2, [r7, #11]
    7d2c:	68f9      	ldr	r1, [r7, #12]
    7d2e:	4613      	mov	r3, r2
    7d30:	009b      	lsls	r3, r3, #2
    7d32:	4413      	add	r3, r2
    7d34:	009b      	lsls	r3, r3, #2
    7d36:	440b      	add	r3, r1
    7d38:	3338      	adds	r3, #56	; 0x38
    7d3a:	687a      	ldr	r2, [r7, #4]
    7d3c:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7d3e:	bf00      	nop
    7d40:	3714      	adds	r7, #20
    7d42:	46bd      	mov	sp, r7
    7d44:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d48:	4770      	bx	lr

00007d4a <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    7d4a:	b480      	push	{r7}
    7d4c:	b083      	sub	sp, #12
    7d4e:	af00      	add	r7, sp, #0
    7d50:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    7d52:	687b      	ldr	r3, [r7, #4]
    7d54:	691b      	ldr	r3, [r3, #16]
    7d56:	085b      	lsrs	r3, r3, #1
    7d58:	f003 0301 	and.w	r3, r3, #1
    7d5c:	2b00      	cmp	r3, #0
    7d5e:	bf14      	ite	ne
    7d60:	2301      	movne	r3, #1
    7d62:	2300      	moveq	r3, #0
    7d64:	b2db      	uxtb	r3, r3
}
    7d66:	4618      	mov	r0, r3
    7d68:	370c      	adds	r7, #12
    7d6a:	46bd      	mov	sp, r7
    7d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d70:	4770      	bx	lr

00007d72 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    7d72:	b480      	push	{r7}
    7d74:	b083      	sub	sp, #12
    7d76:	af00      	add	r7, sp, #0
    7d78:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    7d7a:	687b      	ldr	r3, [r7, #4]
    7d7c:	691b      	ldr	r3, [r3, #16]
    7d7e:	0a1b      	lsrs	r3, r3, #8
    7d80:	f003 0301 	and.w	r3, r3, #1
    7d84:	2b00      	cmp	r3, #0
    7d86:	bf14      	ite	ne
    7d88:	2301      	movne	r3, #1
    7d8a:	2300      	moveq	r3, #0
    7d8c:	b2db      	uxtb	r3, r3
}
    7d8e:	4618      	mov	r0, r3
    7d90:	370c      	adds	r7, #12
    7d92:	46bd      	mov	sp, r7
    7d94:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d98:	4770      	bx	lr

00007d9a <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    7d9a:	b480      	push	{r7}
    7d9c:	b085      	sub	sp, #20
    7d9e:	af00      	add	r7, sp, #0
    7da0:	6078      	str	r0, [r7, #4]
    7da2:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7da4:	687b      	ldr	r3, [r7, #4]
    7da6:	691b      	ldr	r3, [r3, #16]
    7da8:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7daa:	68fa      	ldr	r2, [r7, #12]
    7dac:	683b      	ldr	r3, [r7, #0]
    7dae:	4013      	ands	r3, r2
    7db0:	60fb      	str	r3, [r7, #12]
	return tmp;
    7db2:	68fb      	ldr	r3, [r7, #12]
}
    7db4:	4618      	mov	r0, r3
    7db6:	3714      	adds	r7, #20
    7db8:	46bd      	mov	sp, r7
    7dba:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dbe:	4770      	bx	lr

00007dc0 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    7dc0:	b480      	push	{r7}
    7dc2:	b085      	sub	sp, #20
    7dc4:	af00      	add	r7, sp, #0
    7dc6:	60f8      	str	r0, [r7, #12]
    7dc8:	460b      	mov	r3, r1
    7dca:	607a      	str	r2, [r7, #4]
    7dcc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    7dce:	7afb      	ldrb	r3, [r7, #11]
    7dd0:	68fa      	ldr	r2, [r7, #12]
    7dd2:	3304      	adds	r3, #4
    7dd4:	009b      	lsls	r3, r3, #2
    7dd6:	4413      	add	r3, r2
    7dd8:	687a      	ldr	r2, [r7, #4]
    7dda:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7ddc:	bf00      	nop
    7dde:	3714      	adds	r7, #20
    7de0:	46bd      	mov	sp, r7
    7de2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7de6:	4770      	bx	lr

00007de8 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    7de8:	b480      	push	{r7}
    7dea:	b083      	sub	sp, #12
    7dec:	af00      	add	r7, sp, #0
    7dee:	6078      	str	r0, [r7, #4]
    7df0:	460b      	mov	r3, r1
    7df2:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    7df4:	687b      	ldr	r3, [r7, #4]
    7df6:	78fa      	ldrb	r2, [r7, #3]
    7df8:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7dfa:	bf00      	nop
    7dfc:	370c      	adds	r7, #12
    7dfe:	46bd      	mov	sp, r7
    7e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e04:	4770      	bx	lr

00007e06 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    7e06:	b480      	push	{r7}
    7e08:	b085      	sub	sp, #20
    7e0a:	af00      	add	r7, sp, #0
    7e0c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7e0e:	687b      	ldr	r3, [r7, #4]
    7e10:	f893 3020 	ldrb.w	r3, [r3, #32]
    7e14:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    7e16:	7bfb      	ldrb	r3, [r7, #15]
    7e18:	f003 0301 	and.w	r3, r3, #1
    7e1c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7e1e:	7bfb      	ldrb	r3, [r7, #15]
    7e20:	2b00      	cmp	r3, #0
    7e22:	bf14      	ite	ne
    7e24:	2301      	movne	r3, #1
    7e26:	2300      	moveq	r3, #0
    7e28:	b2db      	uxtb	r3, r3
}
    7e2a:	4618      	mov	r0, r3
    7e2c:	3714      	adds	r7, #20
    7e2e:	46bd      	mov	sp, r7
    7e30:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e34:	4770      	bx	lr

00007e36 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    7e36:	b480      	push	{r7}
    7e38:	b083      	sub	sp, #12
    7e3a:	af00      	add	r7, sp, #0
    7e3c:	6078      	str	r0, [r7, #4]
    7e3e:	460b      	mov	r3, r1
    7e40:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    7e42:	687b      	ldr	r3, [r7, #4]
    7e44:	78fa      	ldrb	r2, [r7, #3]
    7e46:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7e4a:	bf00      	nop
    7e4c:	370c      	adds	r7, #12
    7e4e:	46bd      	mov	sp, r7
    7e50:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e54:	4770      	bx	lr

00007e56 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    7e56:	b480      	push	{r7}
    7e58:	b083      	sub	sp, #12
    7e5a:	af00      	add	r7, sp, #0
    7e5c:	6078      	str	r0, [r7, #4]
    7e5e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    7e60:	687b      	ldr	r3, [r7, #4]
    7e62:	683a      	ldr	r2, [r7, #0]
    7e64:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7e66:	bf00      	nop
    7e68:	370c      	adds	r7, #12
    7e6a:	46bd      	mov	sp, r7
    7e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e70:	4770      	bx	lr

00007e72 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    7e72:	b480      	push	{r7}
    7e74:	b083      	sub	sp, #12
    7e76:	af00      	add	r7, sp, #0
    7e78:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    7e7a:	687b      	ldr	r3, [r7, #4]
    7e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    7e7e:	4618      	mov	r0, r3
    7e80:	370c      	adds	r7, #12
    7e82:	46bd      	mov	sp, r7
    7e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e88:	4770      	bx	lr

00007e8a <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    7e8a:	b480      	push	{r7}
    7e8c:	b083      	sub	sp, #12
    7e8e:	af00      	add	r7, sp, #0
    7e90:	6078      	str	r0, [r7, #4]
    7e92:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    7e94:	687b      	ldr	r3, [r7, #4]
    7e96:	683a      	ldr	r2, [r7, #0]
    7e98:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7e9a:	bf00      	nop
    7e9c:	370c      	adds	r7, #12
    7e9e:	46bd      	mov	sp, r7
    7ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ea4:	4770      	bx	lr

00007ea6 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    7ea6:	b480      	push	{r7}
    7ea8:	b085      	sub	sp, #20
    7eaa:	af00      	add	r7, sp, #0
    7eac:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7eae:	687b      	ldr	r3, [r7, #4]
    7eb0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7eb4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    7eb6:	7bfb      	ldrb	r3, [r7, #15]
    7eb8:	085b      	lsrs	r3, r3, #1
    7eba:	b2db      	uxtb	r3, r3
    7ebc:	f003 0301 	and.w	r3, r3, #1
    7ec0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7ec2:	7bfb      	ldrb	r3, [r7, #15]
    7ec4:	2b00      	cmp	r3, #0
    7ec6:	bf14      	ite	ne
    7ec8:	2301      	movne	r3, #1
    7eca:	2300      	moveq	r3, #0
    7ecc:	b2db      	uxtb	r3, r3
}
    7ece:	4618      	mov	r0, r3
    7ed0:	3714      	adds	r7, #20
    7ed2:	46bd      	mov	sp, r7
    7ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ed8:	4770      	bx	lr

00007eda <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    7eda:	b480      	push	{r7}
    7edc:	b085      	sub	sp, #20
    7ede:	af00      	add	r7, sp, #0
    7ee0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7ee2:	687b      	ldr	r3, [r7, #4]
    7ee4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7ee8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    7eea:	7bfb      	ldrb	r3, [r7, #15]
    7eec:	089b      	lsrs	r3, r3, #2
    7eee:	b2db      	uxtb	r3, r3
    7ef0:	f003 0301 	and.w	r3, r3, #1
    7ef4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7ef6:	7bfb      	ldrb	r3, [r7, #15]
    7ef8:	2b00      	cmp	r3, #0
    7efa:	bf14      	ite	ne
    7efc:	2301      	movne	r3, #1
    7efe:	2300      	moveq	r3, #0
    7f00:	b2db      	uxtb	r3, r3
}
    7f02:	4618      	mov	r0, r3
    7f04:	3714      	adds	r7, #20
    7f06:	46bd      	mov	sp, r7
    7f08:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f0c:	4770      	bx	lr

00007f0e <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    7f0e:	b480      	push	{r7}
    7f10:	b085      	sub	sp, #20
    7f12:	af00      	add	r7, sp, #0
    7f14:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7f16:	687b      	ldr	r3, [r7, #4]
    7f18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7f1c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    7f1e:	7bfb      	ldrb	r3, [r7, #15]
    7f20:	08db      	lsrs	r3, r3, #3
    7f22:	b2db      	uxtb	r3, r3
    7f24:	f003 0301 	and.w	r3, r3, #1
    7f28:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7f2a:	7bfb      	ldrb	r3, [r7, #15]
    7f2c:	2b00      	cmp	r3, #0
    7f2e:	bf14      	ite	ne
    7f30:	2301      	movne	r3, #1
    7f32:	2300      	moveq	r3, #0
    7f34:	b2db      	uxtb	r3, r3
}
    7f36:	4618      	mov	r0, r3
    7f38:	3714      	adds	r7, #20
    7f3a:	46bd      	mov	sp, r7
    7f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f40:	4770      	bx	lr

00007f42 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    7f42:	b480      	push	{r7}
    7f44:	b085      	sub	sp, #20
    7f46:	af00      	add	r7, sp, #0
    7f48:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7f4a:	687b      	ldr	r3, [r7, #4]
    7f4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7f50:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    7f52:	7bfb      	ldrb	r3, [r7, #15]
    7f54:	091b      	lsrs	r3, r3, #4
    7f56:	b2db      	uxtb	r3, r3
    7f58:	f003 0301 	and.w	r3, r3, #1
    7f5c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7f5e:	7bfb      	ldrb	r3, [r7, #15]
    7f60:	2b00      	cmp	r3, #0
    7f62:	bf14      	ite	ne
    7f64:	2301      	movne	r3, #1
    7f66:	2300      	moveq	r3, #0
    7f68:	b2db      	uxtb	r3, r3
}
    7f6a:	4618      	mov	r0, r3
    7f6c:	3714      	adds	r7, #20
    7f6e:	46bd      	mov	sp, r7
    7f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f74:	4770      	bx	lr
	...

00007f78 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    7f78:	b580      	push	{r7, lr}
    7f7a:	b082      	sub	sp, #8
    7f7c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    7f7e:	4b0a      	ldr	r3, [pc, #40]	; (7fa8 <_oscctrl_init_sources+0x30>)
    7f80:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    7f82:	4a0a      	ldr	r2, [pc, #40]	; (7fac <_oscctrl_init_sources+0x34>)
    7f84:	2101      	movs	r1, #1
    7f86:	6878      	ldr	r0, [r7, #4]
    7f88:	4b09      	ldr	r3, [pc, #36]	; (7fb0 <_oscctrl_init_sources+0x38>)
    7f8a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    7f8c:	bf00      	nop
    7f8e:	6878      	ldr	r0, [r7, #4]
    7f90:	4b08      	ldr	r3, [pc, #32]	; (7fb4 <_oscctrl_init_sources+0x3c>)
    7f92:	4798      	blx	r3
    7f94:	4603      	mov	r3, r0
    7f96:	f083 0301 	eor.w	r3, r3, #1
    7f9a:	b2db      	uxtb	r3, r3
    7f9c:	2b00      	cmp	r3, #0
    7f9e:	d1f6      	bne.n	7f8e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    7fa0:	bf00      	nop
    7fa2:	3708      	adds	r7, #8
    7fa4:	46bd      	mov	sp, r7
    7fa6:	bd80      	pop	{r7, pc}
    7fa8:	40001000 	.word	0x40001000
    7fac:	03002606 	.word	0x03002606
    7fb0:	00007dc1 	.word	0x00007dc1
    7fb4:	00007d4b 	.word	0x00007d4b

00007fb8 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    7fb8:	b580      	push	{r7, lr}
    7fba:	b084      	sub	sp, #16
    7fbc:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    7fbe:	4b6b      	ldr	r3, [pc, #428]	; (816c <_oscctrl_init_referenced_generators+0x1b4>)
    7fc0:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    7fc2:	2204      	movs	r2, #4
    7fc4:	2100      	movs	r1, #0
    7fc6:	486a      	ldr	r0, [pc, #424]	; (8170 <_oscctrl_init_referenced_generators+0x1b8>)
    7fc8:	4b6a      	ldr	r3, [pc, #424]	; (8174 <_oscctrl_init_referenced_generators+0x1bc>)
    7fca:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7fcc:	bf00      	nop
    7fce:	4868      	ldr	r0, [pc, #416]	; (8170 <_oscctrl_init_referenced_generators+0x1b8>)
    7fd0:	4b69      	ldr	r3, [pc, #420]	; (8178 <_oscctrl_init_referenced_generators+0x1c0>)
    7fd2:	4798      	blx	r3
    7fd4:	4603      	mov	r3, r0
    7fd6:	2b00      	cmp	r3, #0
    7fd8:	d1f9      	bne.n	7fce <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    7fda:	2100      	movs	r1, #0
    7fdc:	68f8      	ldr	r0, [r7, #12]
    7fde:	4b67      	ldr	r3, [pc, #412]	; (817c <_oscctrl_init_referenced_generators+0x1c4>)
    7fe0:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    7fe2:	4967      	ldr	r1, [pc, #412]	; (8180 <_oscctrl_init_referenced_generators+0x1c8>)
    7fe4:	68f8      	ldr	r0, [r7, #12]
    7fe6:	4b67      	ldr	r3, [pc, #412]	; (8184 <_oscctrl_init_referenced_generators+0x1cc>)
    7fe8:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    7fea:	bf00      	nop
    7fec:	68f8      	ldr	r0, [r7, #12]
    7fee:	4b66      	ldr	r3, [pc, #408]	; (8188 <_oscctrl_init_referenced_generators+0x1d0>)
    7ff0:	4798      	blx	r3
    7ff2:	4603      	mov	r3, r0
    7ff4:	2b00      	cmp	r3, #0
    7ff6:	d1f9      	bne.n	7fec <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    7ff8:	2100      	movs	r1, #0
    7ffa:	68f8      	ldr	r0, [r7, #12]
    7ffc:	4b63      	ldr	r3, [pc, #396]	; (818c <_oscctrl_init_referenced_generators+0x1d4>)
    7ffe:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    8000:	bf00      	nop
    8002:	68f8      	ldr	r0, [r7, #12]
    8004:	4b62      	ldr	r3, [pc, #392]	; (8190 <_oscctrl_init_referenced_generators+0x1d8>)
    8006:	4798      	blx	r3
    8008:	4603      	mov	r3, r0
    800a:	2b00      	cmp	r3, #0
    800c:	d1f9      	bne.n	8002 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    800e:	2302      	movs	r3, #2
    8010:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    8012:	7afb      	ldrb	r3, [r7, #11]
    8014:	4619      	mov	r1, r3
    8016:	68f8      	ldr	r0, [r7, #12]
    8018:	4b58      	ldr	r3, [pc, #352]	; (817c <_oscctrl_init_referenced_generators+0x1c4>)
    801a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    801c:	bf00      	nop
    801e:	68f8      	ldr	r0, [r7, #12]
    8020:	4b5c      	ldr	r3, [pc, #368]	; (8194 <_oscctrl_init_referenced_generators+0x1dc>)
    8022:	4798      	blx	r3
    8024:	4603      	mov	r3, r0
    8026:	2b00      	cmp	r3, #0
    8028:	d1f9      	bne.n	801e <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    802a:	68f8      	ldr	r0, [r7, #12]
    802c:	4b5a      	ldr	r3, [pc, #360]	; (8198 <_oscctrl_init_referenced_generators+0x1e0>)
    802e:	4798      	blx	r3
    8030:	4603      	mov	r3, r0
    8032:	4619      	mov	r1, r3
    8034:	68f8      	ldr	r0, [r7, #12]
    8036:	4b59      	ldr	r3, [pc, #356]	; (819c <_oscctrl_init_referenced_generators+0x1e4>)
    8038:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    803a:	bf00      	nop
    803c:	68f8      	ldr	r0, [r7, #12]
    803e:	4b58      	ldr	r3, [pc, #352]	; (81a0 <_oscctrl_init_referenced_generators+0x1e8>)
    8040:	4798      	blx	r3
    8042:	4603      	mov	r3, r0
    8044:	2b00      	cmp	r3, #0
    8046:	d1f9      	bne.n	803c <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    8048:	2319      	movs	r3, #25
    804a:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    804c:	7afb      	ldrb	r3, [r7, #11]
    804e:	4619      	mov	r1, r3
    8050:	68f8      	ldr	r0, [r7, #12]
    8052:	4b4e      	ldr	r3, [pc, #312]	; (818c <_oscctrl_init_referenced_generators+0x1d4>)
    8054:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    8056:	bf00      	nop
    8058:	68f8      	ldr	r0, [r7, #12]
    805a:	4b4d      	ldr	r3, [pc, #308]	; (8190 <_oscctrl_init_referenced_generators+0x1d8>)
    805c:	4798      	blx	r3
    805e:	4603      	mov	r3, r0
    8060:	2b00      	cmp	r3, #0
    8062:	d1f9      	bne.n	8058 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    8064:	2245      	movs	r2, #69	; 0x45
    8066:	2101      	movs	r1, #1
    8068:	4841      	ldr	r0, [pc, #260]	; (8170 <_oscctrl_init_referenced_generators+0x1b8>)
    806a:	4b4e      	ldr	r3, [pc, #312]	; (81a4 <_oscctrl_init_referenced_generators+0x1ec>)
    806c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    806e:	223b      	movs	r2, #59	; 0x3b
    8070:	2100      	movs	r1, #0
    8072:	68f8      	ldr	r0, [r7, #12]
    8074:	4b4c      	ldr	r3, [pc, #304]	; (81a8 <_oscctrl_init_referenced_generators+0x1f0>)
    8076:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    8078:	f44f 6201 	mov.w	r2, #2064	; 0x810
    807c:	2100      	movs	r1, #0
    807e:	68f8      	ldr	r0, [r7, #12]
    8080:	4b4a      	ldr	r3, [pc, #296]	; (81ac <_oscctrl_init_referenced_generators+0x1f4>)
    8082:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    8084:	2242      	movs	r2, #66	; 0x42
    8086:	2100      	movs	r1, #0
    8088:	68f8      	ldr	r0, [r7, #12]
    808a:	4b49      	ldr	r3, [pc, #292]	; (81b0 <_oscctrl_init_referenced_generators+0x1f8>)
    808c:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    808e:	4a49      	ldr	r2, [pc, #292]	; (81b4 <_oscctrl_init_referenced_generators+0x1fc>)
    8090:	2101      	movs	r1, #1
    8092:	68f8      	ldr	r0, [r7, #12]
    8094:	4b44      	ldr	r3, [pc, #272]	; (81a8 <_oscctrl_init_referenced_generators+0x1f0>)
    8096:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    8098:	f44f 6203 	mov.w	r2, #2096	; 0x830
    809c:	2101      	movs	r1, #1
    809e:	68f8      	ldr	r0, [r7, #12]
    80a0:	4b42      	ldr	r3, [pc, #264]	; (81ac <_oscctrl_init_referenced_generators+0x1f4>)
    80a2:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    80a4:	2202      	movs	r2, #2
    80a6:	2101      	movs	r1, #1
    80a8:	68f8      	ldr	r0, [r7, #12]
    80aa:	4b41      	ldr	r3, [pc, #260]	; (81b0 <_oscctrl_init_referenced_generators+0x1f8>)
    80ac:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    80ae:	68f8      	ldr	r0, [r7, #12]
    80b0:	4b41      	ldr	r3, [pc, #260]	; (81b8 <_oscctrl_init_referenced_generators+0x200>)
    80b2:	4798      	blx	r3
    80b4:	4603      	mov	r3, r0
    80b6:	2b00      	cmp	r3, #0
    80b8:	d00c      	beq.n	80d4 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    80ba:	f44f 6310 	mov.w	r3, #2304	; 0x900
    80be:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    80c0:	bf00      	nop
    80c2:	6879      	ldr	r1, [r7, #4]
    80c4:	68f8      	ldr	r0, [r7, #12]
    80c6:	4b3d      	ldr	r3, [pc, #244]	; (81bc <_oscctrl_init_referenced_generators+0x204>)
    80c8:	4798      	blx	r3
    80ca:	4602      	mov	r2, r0
    80cc:	687b      	ldr	r3, [r7, #4]
    80ce:	429a      	cmp	r2, r3
    80d0:	d1f7      	bne.n	80c2 <_oscctrl_init_referenced_generators+0x10a>
    80d2:	e009      	b.n	80e8 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    80d4:	bf00      	nop
    80d6:	68f8      	ldr	r0, [r7, #12]
    80d8:	4b39      	ldr	r3, [pc, #228]	; (81c0 <_oscctrl_init_referenced_generators+0x208>)
    80da:	4798      	blx	r3
    80dc:	4603      	mov	r3, r0
    80de:	f083 0301 	eor.w	r3, r3, #1
    80e2:	b2db      	uxtb	r3, r3
    80e4:	2b00      	cmp	r3, #0
    80e6:	d1f6      	bne.n	80d6 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    80e8:	bf00      	nop
    80ea:	2100      	movs	r1, #0
    80ec:	68f8      	ldr	r0, [r7, #12]
    80ee:	4b35      	ldr	r3, [pc, #212]	; (81c4 <_oscctrl_init_referenced_generators+0x20c>)
    80f0:	4798      	blx	r3
    80f2:	4603      	mov	r3, r0
    80f4:	f083 0301 	eor.w	r3, r3, #1
    80f8:	b2db      	uxtb	r3, r3
    80fa:	2b00      	cmp	r3, #0
    80fc:	d009      	beq.n	8112 <_oscctrl_init_referenced_generators+0x15a>
    80fe:	2100      	movs	r1, #0
    8100:	68f8      	ldr	r0, [r7, #12]
    8102:	4b31      	ldr	r3, [pc, #196]	; (81c8 <_oscctrl_init_referenced_generators+0x210>)
    8104:	4798      	blx	r3
    8106:	4603      	mov	r3, r0
    8108:	f083 0301 	eor.w	r3, r3, #1
    810c:	b2db      	uxtb	r3, r3
    810e:	2b00      	cmp	r3, #0
    8110:	d1eb      	bne.n	80ea <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    8112:	bf00      	nop
    8114:	2101      	movs	r1, #1
    8116:	68f8      	ldr	r0, [r7, #12]
    8118:	4b2a      	ldr	r3, [pc, #168]	; (81c4 <_oscctrl_init_referenced_generators+0x20c>)
    811a:	4798      	blx	r3
    811c:	4603      	mov	r3, r0
    811e:	f083 0301 	eor.w	r3, r3, #1
    8122:	b2db      	uxtb	r3, r3
    8124:	2b00      	cmp	r3, #0
    8126:	d009      	beq.n	813c <_oscctrl_init_referenced_generators+0x184>
    8128:	2101      	movs	r1, #1
    812a:	68f8      	ldr	r0, [r7, #12]
    812c:	4b26      	ldr	r3, [pc, #152]	; (81c8 <_oscctrl_init_referenced_generators+0x210>)
    812e:	4798      	blx	r3
    8130:	4603      	mov	r3, r0
    8132:	f083 0301 	eor.w	r3, r3, #1
    8136:	b2db      	uxtb	r3, r3
    8138:	2b00      	cmp	r3, #0
    813a:	d1eb      	bne.n	8114 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    813c:	bf00      	nop
    813e:	480c      	ldr	r0, [pc, #48]	; (8170 <_oscctrl_init_referenced_generators+0x1b8>)
    8140:	4b22      	ldr	r3, [pc, #136]	; (81cc <_oscctrl_init_referenced_generators+0x214>)
    8142:	4798      	blx	r3
    8144:	4603      	mov	r3, r0
    8146:	2b00      	cmp	r3, #0
    8148:	d1f9      	bne.n	813e <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    814a:	2207      	movs	r2, #7
    814c:	2100      	movs	r1, #0
    814e:	4808      	ldr	r0, [pc, #32]	; (8170 <_oscctrl_init_referenced_generators+0x1b8>)
    8150:	4b08      	ldr	r3, [pc, #32]	; (8174 <_oscctrl_init_referenced_generators+0x1bc>)
    8152:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    8154:	bf00      	nop
    8156:	4806      	ldr	r0, [pc, #24]	; (8170 <_oscctrl_init_referenced_generators+0x1b8>)
    8158:	4b07      	ldr	r3, [pc, #28]	; (8178 <_oscctrl_init_referenced_generators+0x1c0>)
    815a:	4798      	blx	r3
    815c:	4603      	mov	r3, r0
    815e:	2b00      	cmp	r3, #0
    8160:	d1f9      	bne.n	8156 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    8162:	bf00      	nop
    8164:	3710      	adds	r7, #16
    8166:	46bd      	mov	sp, r7
    8168:	bd80      	pop	{r7, pc}
    816a:	bf00      	nop
    816c:	40001000 	.word	0x40001000
    8170:	40001c00 	.word	0x40001c00
    8174:	00007b85 	.word	0x00007b85
    8178:	00007b45 	.word	0x00007b45
    817c:	00007de9 	.word	0x00007de9
    8180:	0401bb80 	.word	0x0401bb80
    8184:	00007e8b 	.word	0x00007e8b
    8188:	00007f43 	.word	0x00007f43
    818c:	00007e37 	.word	0x00007e37
    8190:	00007edb 	.word	0x00007edb
    8194:	00007ea7 	.word	0x00007ea7
    8198:	00007e73 	.word	0x00007e73
    819c:	00007e57 	.word	0x00007e57
    81a0:	00007f0f 	.word	0x00007f0f
    81a4:	00007bd5 	.word	0x00007bd5
    81a8:	00007ce1 	.word	0x00007ce1
    81ac:	00007d1d 	.word	0x00007d1d
    81b0:	00007ca5 	.word	0x00007ca5
    81b4:	000407a0 	.word	0x000407a0
    81b8:	00007e07 	.word	0x00007e07
    81bc:	00007d9b 	.word	0x00007d9b
    81c0:	00007d73 	.word	0x00007d73
    81c4:	00007c31 	.word	0x00007c31
    81c8:	00007c69 	.word	0x00007c69
    81cc:	00007b6d 	.word	0x00007b6d

000081d0 <hri_pac_get_STATUSA_reg>:
{
	return (((Pac *)hw)->STATUSA.reg & PAC_STATUSA_TC1) >> PAC_STATUSA_TC1_Pos;
}

static inline hri_pac_statusa_reg_t hri_pac_get_STATUSA_reg(const void *const hw, hri_pac_statusa_reg_t mask)
{
    81d0:	b480      	push	{r7}
    81d2:	b085      	sub	sp, #20
    81d4:	af00      	add	r7, sp, #0
    81d6:	6078      	str	r0, [r7, #4]
    81d8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSA.reg;
    81da:	687b      	ldr	r3, [r7, #4]
    81dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    81de:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    81e0:	68fa      	ldr	r2, [r7, #12]
    81e2:	683b      	ldr	r3, [r7, #0]
    81e4:	4013      	ands	r3, r2
    81e6:	60fb      	str	r3, [r7, #12]
	return tmp;
    81e8:	68fb      	ldr	r3, [r7, #12]
}
    81ea:	4618      	mov	r0, r3
    81ec:	3714      	adds	r7, #20
    81ee:	46bd      	mov	sp, r7
    81f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    81f4:	4770      	bx	lr

000081f6 <hri_pac_get_STATUSB_reg>:
{
	return (((Pac *)hw)->STATUSB.reg & PAC_STATUSB_RAMECC) >> PAC_STATUSB_RAMECC_Pos;
}

static inline hri_pac_statusb_reg_t hri_pac_get_STATUSB_reg(const void *const hw, hri_pac_statusb_reg_t mask)
{
    81f6:	b480      	push	{r7}
    81f8:	b085      	sub	sp, #20
    81fa:	af00      	add	r7, sp, #0
    81fc:	6078      	str	r0, [r7, #4]
    81fe:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSB.reg;
    8200:	687b      	ldr	r3, [r7, #4]
    8202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8204:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8206:	68fa      	ldr	r2, [r7, #12]
    8208:	683b      	ldr	r3, [r7, #0]
    820a:	4013      	ands	r3, r2
    820c:	60fb      	str	r3, [r7, #12]
	return tmp;
    820e:	68fb      	ldr	r3, [r7, #12]
}
    8210:	4618      	mov	r0, r3
    8212:	3714      	adds	r7, #20
    8214:	46bd      	mov	sp, r7
    8216:	f85d 7b04 	ldr.w	r7, [sp], #4
    821a:	4770      	bx	lr

0000821c <hri_pac_get_STATUSC_reg>:
{
	return (((Pac *)hw)->STATUSC.reg & PAC_STATUSC_CCL) >> PAC_STATUSC_CCL_Pos;
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
    821c:	b480      	push	{r7}
    821e:	b085      	sub	sp, #20
    8220:	af00      	add	r7, sp, #0
    8222:	6078      	str	r0, [r7, #4]
    8224:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    8226:	687b      	ldr	r3, [r7, #4]
    8228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    822a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    822c:	68fa      	ldr	r2, [r7, #12]
    822e:	683b      	ldr	r3, [r7, #0]
    8230:	4013      	ands	r3, r2
    8232:	60fb      	str	r3, [r7, #12]
	return tmp;
    8234:	68fb      	ldr	r3, [r7, #12]
}
    8236:	4618      	mov	r0, r3
    8238:	3714      	adds	r7, #20
    823a:	46bd      	mov	sp, r7
    823c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8240:	4770      	bx	lr

00008242 <hri_pac_get_STATUSD_reg>:
{
	return (((Pac *)hw)->STATUSD.reg & PAC_STATUSD_PCC) >> PAC_STATUSD_PCC_Pos;
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
    8242:	b480      	push	{r7}
    8244:	b085      	sub	sp, #20
    8246:	af00      	add	r7, sp, #0
    8248:	6078      	str	r0, [r7, #4]
    824a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    824c:	687b      	ldr	r3, [r7, #4]
    824e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8250:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8252:	68fa      	ldr	r2, [r7, #12]
    8254:	683b      	ldr	r3, [r7, #0]
    8256:	4013      	ands	r3, r2
    8258:	60fb      	str	r3, [r7, #12]
	return tmp;
    825a:	68fb      	ldr	r3, [r7, #12]
}
    825c:	4618      	mov	r0, r3
    825e:	3714      	adds	r7, #20
    8260:	46bd      	mov	sp, r7
    8262:	f85d 7b04 	ldr.w	r7, [sp], #4
    8266:	4770      	bx	lr

00008268 <hri_pac_write_WRCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
    8268:	b480      	push	{r7}
    826a:	b083      	sub	sp, #12
    826c:	af00      	add	r7, sp, #0
    826e:	6078      	str	r0, [r7, #4]
    8270:	6039      	str	r1, [r7, #0]
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    8272:	687b      	ldr	r3, [r7, #4]
    8274:	683a      	ldr	r2, [r7, #0]
    8276:	601a      	str	r2, [r3, #0]
	PAC_CRITICAL_SECTION_LEAVE();
}
    8278:	bf00      	nop
    827a:	370c      	adds	r7, #12
    827c:	46bd      	mov	sp, r7
    827e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8282:	4770      	bx	lr

00008284 <_pac_get_peripheral_id>:
#include <compiler.h>
#include <utils_assert.h>
#include <hpl_pac.h>

static uint32_t _pac_get_peripheral_id(const void *const module)
{
    8284:	b480      	push	{r7}
    8286:	b085      	sub	sp, #20
    8288:	af00      	add	r7, sp, #0
    828a:	6078      	str	r0, [r7, #4]
	uint32_t peripheral = 10;
    828c:	230a      	movs	r3, #10
    828e:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    8290:	687b      	ldr	r3, [r7, #4]
    8292:	f003 4382 	and.w	r3, r3, #1090519040	; 0x41000000
    8296:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    829a:	d101      	bne.n	82a0 <_pac_get_peripheral_id+0x1c>
		peripheral = 13;
    829c:	230d      	movs	r3, #13
    829e:	60fb      	str	r3, [r7, #12]
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    82a0:	687b      	ldr	r3, [r7, #4]
    82a2:	0e1b      	lsrs	r3, r3, #24
    82a4:	f003 030f 	and.w	r3, r3, #15
    82a8:	015a      	lsls	r2, r3, #5
    82aa:	6879      	ldr	r1, [r7, #4]
    82ac:	4b06      	ldr	r3, [pc, #24]	; (82c8 <_pac_get_peripheral_id+0x44>)
    82ae:	400b      	ands	r3, r1
    82b0:	68f9      	ldr	r1, [r7, #12]
    82b2:	40cb      	lsrs	r3, r1
    82b4:	4413      	add	r3, r2
    82b6:	60fb      	str	r3, [r7, #12]

	return peripheral;
    82b8:	68fb      	ldr	r3, [r7, #12]
}
    82ba:	4618      	mov	r0, r3
    82bc:	3714      	adds	r7, #20
    82be:	46bd      	mov	sp, r7
    82c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    82c4:	4770      	bx	lr
    82c6:	bf00      	nop
    82c8:	000fff00 	.word	0x000fff00

000082cc <_periph_lock>:

/**
 * \brief Enable write protect for the given hardware module
 */
int32_t _periph_lock(const void *const module)
{
    82cc:	b580      	push	{r7, lr}
    82ce:	b086      	sub	sp, #24
    82d0:	af00      	add	r7, sp, #0
    82d2:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    82d4:	687b      	ldr	r3, [r7, #4]
    82d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    82da:	bf8c      	ite	hi
    82dc:	2301      	movhi	r3, #1
    82de:	2300      	movls	r3, #0
    82e0:	b2db      	uxtb	r3, r3
    82e2:	2239      	movs	r2, #57	; 0x39
    82e4:	4917      	ldr	r1, [pc, #92]	; (8344 <_periph_lock+0x78>)
    82e6:	4618      	mov	r0, r3
    82e8:	4b17      	ldr	r3, [pc, #92]	; (8348 <_periph_lock+0x7c>)
    82ea:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    82ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    82f0:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    82f2:	6878      	ldr	r0, [r7, #4]
    82f4:	4b15      	ldr	r3, [pc, #84]	; (834c <_periph_lock+0x80>)
    82f6:	4798      	blx	r3
    82f8:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    82fa:	693b      	ldr	r3, [r7, #16]
    82fc:	b29b      	uxth	r3, r3
    82fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8302:	4619      	mov	r1, r3
    8304:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8308:	4b11      	ldr	r3, [pc, #68]	; (8350 <_periph_lock+0x84>)
    830a:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    830c:	f107 030f 	add.w	r3, r7, #15
    8310:	4619      	mov	r1, r3
    8312:	6878      	ldr	r0, [r7, #4]
    8314:	4b0f      	ldr	r3, [pc, #60]	; (8354 <_periph_lock+0x88>)
    8316:	4798      	blx	r3
	} while (!stat && timeout--);
    8318:	7bfb      	ldrb	r3, [r7, #15]
    831a:	f083 0301 	eor.w	r3, r3, #1
    831e:	b2db      	uxtb	r3, r3
    8320:	2b00      	cmp	r3, #0
    8322:	d004      	beq.n	832e <_periph_lock+0x62>
    8324:	697b      	ldr	r3, [r7, #20]
    8326:	1e5a      	subs	r2, r3, #1
    8328:	617a      	str	r2, [r7, #20]
    832a:	2b00      	cmp	r3, #0
    832c:	d1ee      	bne.n	830c <_periph_lock+0x40>

	if (timeout < 0) {
    832e:	697b      	ldr	r3, [r7, #20]
    8330:	2b00      	cmp	r3, #0
    8332:	da02      	bge.n	833a <_periph_lock+0x6e>
		return ERR_TIMEOUT;
    8334:	f06f 0307 	mvn.w	r3, #7
    8338:	e000      	b.n	833c <_periph_lock+0x70>
	}

	return ERR_NONE;
    833a:	2300      	movs	r3, #0
}
    833c:	4618      	mov	r0, r3
    833e:	3718      	adds	r7, #24
    8340:	46bd      	mov	sp, r7
    8342:	bd80      	pop	{r7, pc}
    8344:	0001a808 	.word	0x0001a808
    8348:	00006241 	.word	0x00006241
    834c:	00008285 	.word	0x00008285
    8350:	00008269 	.word	0x00008269
    8354:	000083e1 	.word	0x000083e1

00008358 <_periph_unlock>:

/**
 * \brief Disable write protect for the given hardware module
 */
int32_t _periph_unlock(const void *const module)
{
    8358:	b580      	push	{r7, lr}
    835a:	b086      	sub	sp, #24
    835c:	af00      	add	r7, sp, #0
    835e:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    8360:	687b      	ldr	r3, [r7, #4]
    8362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    8366:	bf8c      	ite	hi
    8368:	2301      	movhi	r3, #1
    836a:	2300      	movls	r3, #0
    836c:	b2db      	uxtb	r3, r3
    836e:	2253      	movs	r2, #83	; 0x53
    8370:	4916      	ldr	r1, [pc, #88]	; (83cc <_periph_unlock+0x74>)
    8372:	4618      	mov	r0, r3
    8374:	4b16      	ldr	r3, [pc, #88]	; (83d0 <_periph_unlock+0x78>)
    8376:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    8378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    837c:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    837e:	6878      	ldr	r0, [r7, #4]
    8380:	4b14      	ldr	r3, [pc, #80]	; (83d4 <_periph_unlock+0x7c>)
    8382:	4798      	blx	r3
    8384:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    8386:	693b      	ldr	r3, [r7, #16]
    8388:	b29b      	uxth	r3, r3
    838a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    838e:	4619      	mov	r1, r3
    8390:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8394:	4b10      	ldr	r3, [pc, #64]	; (83d8 <_periph_unlock+0x80>)
    8396:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    8398:	f107 030f 	add.w	r3, r7, #15
    839c:	4619      	mov	r1, r3
    839e:	6878      	ldr	r0, [r7, #4]
    83a0:	4b0e      	ldr	r3, [pc, #56]	; (83dc <_periph_unlock+0x84>)
    83a2:	4798      	blx	r3
	} while (stat && timeout--);
    83a4:	7bfb      	ldrb	r3, [r7, #15]
    83a6:	2b00      	cmp	r3, #0
    83a8:	d004      	beq.n	83b4 <_periph_unlock+0x5c>
    83aa:	697b      	ldr	r3, [r7, #20]
    83ac:	1e5a      	subs	r2, r3, #1
    83ae:	617a      	str	r2, [r7, #20]
    83b0:	2b00      	cmp	r3, #0
    83b2:	d1f1      	bne.n	8398 <_periph_unlock+0x40>

	if (timeout < 0) {
    83b4:	697b      	ldr	r3, [r7, #20]
    83b6:	2b00      	cmp	r3, #0
    83b8:	da02      	bge.n	83c0 <_periph_unlock+0x68>
		return ERR_TIMEOUT;
    83ba:	f06f 0307 	mvn.w	r3, #7
    83be:	e000      	b.n	83c2 <_periph_unlock+0x6a>
	}

	return ERR_NONE;
    83c0:	2300      	movs	r3, #0
}
    83c2:	4618      	mov	r0, r3
    83c4:	3718      	adds	r7, #24
    83c6:	46bd      	mov	sp, r7
    83c8:	bd80      	pop	{r7, pc}
    83ca:	bf00      	nop
    83cc:	0001a808 	.word	0x0001a808
    83d0:	00006241 	.word	0x00006241
    83d4:	00008285 	.word	0x00008285
    83d8:	00008269 	.word	0x00008269
    83dc:	000083e1 	.word	0x000083e1

000083e0 <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    83e0:	b580      	push	{r7, lr}
    83e2:	b084      	sub	sp, #16
    83e4:	af00      	add	r7, sp, #0
    83e6:	6078      	str	r0, [r7, #4]
    83e8:	6039      	str	r1, [r7, #0]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    83ea:	687b      	ldr	r3, [r7, #4]
    83ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    83f0:	bf8c      	ite	hi
    83f2:	2301      	movhi	r3, #1
    83f4:	2300      	movls	r3, #0
    83f6:	b2db      	uxtb	r3, r3
    83f8:	226d      	movs	r2, #109	; 0x6d
    83fa:	4931      	ldr	r1, [pc, #196]	; (84c0 <_periph_get_lock_state+0xe0>)
    83fc:	4618      	mov	r0, r3
    83fe:	4b31      	ldr	r3, [pc, #196]	; (84c4 <_periph_get_lock_state+0xe4>)
    8400:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    8402:	6878      	ldr	r0, [r7, #4]
    8404:	4b30      	ldr	r3, [pc, #192]	; (84c8 <_periph_get_lock_state+0xe8>)
    8406:	4798      	blx	r3
    8408:	4603      	mov	r3, r0
    840a:	f003 031f 	and.w	r3, r3, #31
    840e:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    8410:	687b      	ldr	r3, [r7, #4]
    8412:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    8416:	d211      	bcs.n	843c <_periph_get_lock_state+0x5c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    8418:	2201      	movs	r2, #1
    841a:	68fb      	ldr	r3, [r7, #12]
    841c:	fa02 f303 	lsl.w	r3, r2, r3
    8420:	4619      	mov	r1, r3
    8422:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8426:	4b29      	ldr	r3, [pc, #164]	; (84cc <_periph_get_lock_state+0xec>)
    8428:	4798      	blx	r3
    842a:	4603      	mov	r3, r0
    842c:	2b00      	cmp	r3, #0
    842e:	bf14      	ite	ne
    8430:	2301      	movne	r3, #1
    8432:	2300      	moveq	r3, #0
    8434:	b2da      	uxtb	r2, r3
    8436:	683b      	ldr	r3, [r7, #0]
    8438:	701a      	strb	r2, [r3, #0]
    843a:	e03c      	b.n	84b6 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    843c:	687b      	ldr	r3, [r7, #4]
    843e:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    8442:	d211      	bcs.n	8468 <_periph_get_lock_state+0x88>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    8444:	2201      	movs	r2, #1
    8446:	68fb      	ldr	r3, [r7, #12]
    8448:	fa02 f303 	lsl.w	r3, r2, r3
    844c:	4619      	mov	r1, r3
    844e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8452:	4b1f      	ldr	r3, [pc, #124]	; (84d0 <_periph_get_lock_state+0xf0>)
    8454:	4798      	blx	r3
    8456:	4603      	mov	r3, r0
    8458:	2b00      	cmp	r3, #0
    845a:	bf14      	ite	ne
    845c:	2301      	movne	r3, #1
    845e:	2300      	moveq	r3, #0
    8460:	b2da      	uxtb	r2, r3
    8462:	683b      	ldr	r3, [r7, #0]
    8464:	701a      	strb	r2, [r3, #0]
    8466:	e026      	b.n	84b6 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    8468:	687b      	ldr	r3, [r7, #4]
    846a:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    846e:	d211      	bcs.n	8494 <_periph_get_lock_state+0xb4>
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
    8470:	2201      	movs	r2, #1
    8472:	68fb      	ldr	r3, [r7, #12]
    8474:	fa02 f303 	lsl.w	r3, r2, r3
    8478:	4619      	mov	r1, r3
    847a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    847e:	4b15      	ldr	r3, [pc, #84]	; (84d4 <_periph_get_lock_state+0xf4>)
    8480:	4798      	blx	r3
    8482:	4603      	mov	r3, r0
    8484:	2b00      	cmp	r3, #0
    8486:	bf14      	ite	ne
    8488:	2301      	movne	r3, #1
    848a:	2300      	moveq	r3, #0
    848c:	b2da      	uxtb	r2, r3
    848e:	683b      	ldr	r3, [r7, #0]
    8490:	701a      	strb	r2, [r3, #0]
    8492:	e010      	b.n	84b6 <_periph_get_lock_state+0xd6>
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    8494:	2201      	movs	r2, #1
    8496:	68fb      	ldr	r3, [r7, #12]
    8498:	fa02 f303 	lsl.w	r3, r2, r3
    849c:	4619      	mov	r1, r3
    849e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    84a2:	4b0d      	ldr	r3, [pc, #52]	; (84d8 <_periph_get_lock_state+0xf8>)
    84a4:	4798      	blx	r3
    84a6:	4603      	mov	r3, r0
    84a8:	2b00      	cmp	r3, #0
    84aa:	bf14      	ite	ne
    84ac:	2301      	movne	r3, #1
    84ae:	2300      	moveq	r3, #0
    84b0:	b2da      	uxtb	r2, r3
    84b2:	683b      	ldr	r3, [r7, #0]
    84b4:	701a      	strb	r2, [r3, #0]
	}

	return ERR_NONE;
    84b6:	2300      	movs	r3, #0
}
    84b8:	4618      	mov	r0, r3
    84ba:	3710      	adds	r7, #16
    84bc:	46bd      	mov	sp, r7
    84be:	bd80      	pop	{r7, pc}
    84c0:	0001a808 	.word	0x0001a808
    84c4:	00006241 	.word	0x00006241
    84c8:	00008285 	.word	0x00008285
    84cc:	000081d1 	.word	0x000081d1
    84d0:	000081f7 	.word	0x000081f7
    84d4:	0000821d 	.word	0x0000821d
    84d8:	00008243 	.word	0x00008243

000084dc <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    84dc:	b480      	push	{r7}
    84de:	b083      	sub	sp, #12
    84e0:	af00      	add	r7, sp, #0
    84e2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    84e4:	687b      	ldr	r3, [r7, #4]
    84e6:	69db      	ldr	r3, [r3, #28]
    84e8:	0a9b      	lsrs	r3, r3, #10
    84ea:	f003 0301 	and.w	r3, r3, #1
    84ee:	2b00      	cmp	r3, #0
    84f0:	bf14      	ite	ne
    84f2:	2301      	movne	r3, #1
    84f4:	2300      	moveq	r3, #0
    84f6:	b2db      	uxtb	r3, r3
}
    84f8:	4618      	mov	r0, r3
    84fa:	370c      	adds	r7, #12
    84fc:	46bd      	mov	sp, r7
    84fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8502:	4770      	bx	lr

00008504 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    8504:	b480      	push	{r7}
    8506:	b083      	sub	sp, #12
    8508:	af00      	add	r7, sp, #0
    850a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    850c:	687b      	ldr	r3, [r7, #4]
    850e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8512:	61da      	str	r2, [r3, #28]
}
    8514:	bf00      	nop
    8516:	370c      	adds	r7, #12
    8518:	46bd      	mov	sp, r7
    851a:	f85d 7b04 	ldr.w	r7, [sp], #4
    851e:	4770      	bx	lr

00008520 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    8520:	b480      	push	{r7}
    8522:	b083      	sub	sp, #12
    8524:	af00      	add	r7, sp, #0
    8526:	6078      	str	r0, [r7, #4]
    8528:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    852a:	687b      	ldr	r3, [r7, #4]
    852c:	683a      	ldr	r2, [r7, #0]
    852e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8530:	bf00      	nop
    8532:	370c      	adds	r7, #12
    8534:	46bd      	mov	sp, r7
    8536:	f85d 7b04 	ldr.w	r7, [sp], #4
    853a:	4770      	bx	lr

0000853c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    853c:	b480      	push	{r7}
    853e:	b083      	sub	sp, #12
    8540:	af00      	add	r7, sp, #0
    8542:	6078      	str	r0, [r7, #4]
    8544:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    8546:	687b      	ldr	r3, [r7, #4]
    8548:	683a      	ldr	r2, [r7, #0]
    854a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    854c:	bf00      	nop
    854e:	370c      	adds	r7, #12
    8550:	46bd      	mov	sp, r7
    8552:	f85d 7b04 	ldr.w	r7, [sp], #4
    8556:	4770      	bx	lr

00008558 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    8558:	b480      	push	{r7}
    855a:	b083      	sub	sp, #12
    855c:	af00      	add	r7, sp, #0
    855e:	6078      	str	r0, [r7, #4]
    8560:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    8562:	687b      	ldr	r3, [r7, #4]
    8564:	683a      	ldr	r2, [r7, #0]
    8566:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8568:	bf00      	nop
    856a:	370c      	adds	r7, #12
    856c:	46bd      	mov	sp, r7
    856e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8572:	4770      	bx	lr

00008574 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    8574:	b480      	push	{r7}
    8576:	b083      	sub	sp, #12
    8578:	af00      	add	r7, sp, #0
    857a:	6078      	str	r0, [r7, #4]
    857c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    857e:	687b      	ldr	r3, [r7, #4]
    8580:	683a      	ldr	r2, [r7, #0]
    8582:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8584:	bf00      	nop
    8586:	370c      	adds	r7, #12
    8588:	46bd      	mov	sp, r7
    858a:	f85d 7b04 	ldr.w	r7, [sp], #4
    858e:	4770      	bx	lr

00008590 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    8590:	b480      	push	{r7}
    8592:	b085      	sub	sp, #20
    8594:	af00      	add	r7, sp, #0
    8596:	6078      	str	r0, [r7, #4]
    8598:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    859a:	687b      	ldr	r3, [r7, #4]
    859c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    859e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    85a0:	68fb      	ldr	r3, [r7, #12]
    85a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    85a6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    85a8:	683b      	ldr	r3, [r7, #0]
    85aa:	b2db      	uxtb	r3, r3
    85ac:	68fa      	ldr	r2, [r7, #12]
    85ae:	4313      	orrs	r3, r2
    85b0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    85b2:	687b      	ldr	r3, [r7, #4]
    85b4:	68fa      	ldr	r2, [r7, #12]
    85b6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    85b8:	bf00      	nop
    85ba:	3714      	adds	r7, #20
    85bc:	46bd      	mov	sp, r7
    85be:	f85d 7b04 	ldr.w	r7, [sp], #4
    85c2:	4770      	bx	lr

000085c4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    85c4:	b480      	push	{r7}
    85c6:	b085      	sub	sp, #20
    85c8:	af00      	add	r7, sp, #0
    85ca:	6078      	str	r0, [r7, #4]
    85cc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    85ce:	687b      	ldr	r3, [r7, #4]
    85d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    85d2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    85d4:	68fb      	ldr	r3, [r7, #12]
    85d6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    85da:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    85dc:	683b      	ldr	r3, [r7, #0]
    85de:	041b      	lsls	r3, r3, #16
    85e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    85e4:	68fa      	ldr	r2, [r7, #12]
    85e6:	4313      	orrs	r3, r2
    85e8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    85ea:	687b      	ldr	r3, [r7, #4]
    85ec:	68fa      	ldr	r2, [r7, #12]
    85ee:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    85f0:	bf00      	nop
    85f2:	3714      	adds	r7, #20
    85f4:	46bd      	mov	sp, r7
    85f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    85fa:	4770      	bx	lr

000085fc <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    85fc:	b480      	push	{r7}
    85fe:	b083      	sub	sp, #12
    8600:	af00      	add	r7, sp, #0
    8602:	6078      	str	r0, [r7, #4]
    8604:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    8606:	687b      	ldr	r3, [r7, #4]
    8608:	683a      	ldr	r2, [r7, #0]
    860a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    860c:	bf00      	nop
    860e:	370c      	adds	r7, #12
    8610:	46bd      	mov	sp, r7
    8612:	f85d 7b04 	ldr.w	r7, [sp], #4
    8616:	4770      	bx	lr

00008618 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    8618:	b480      	push	{r7}
    861a:	b083      	sub	sp, #12
    861c:	af00      	add	r7, sp, #0
    861e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    8620:	687b      	ldr	r3, [r7, #4]
    8622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    8624:	4618      	mov	r0, r3
    8626:	370c      	adds	r7, #12
    8628:	46bd      	mov	sp, r7
    862a:	f85d 7b04 	ldr.w	r7, [sp], #4
    862e:	4770      	bx	lr

00008630 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    8630:	b480      	push	{r7}
    8632:	b085      	sub	sp, #20
    8634:	af00      	add	r7, sp, #0
    8636:	60f8      	str	r0, [r7, #12]
    8638:	60b9      	str	r1, [r7, #8]
    863a:	607a      	str	r2, [r7, #4]
	while (count--) {
    863c:	e007      	b.n	864e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    863e:	68fb      	ldr	r3, [r7, #12]
    8640:	1c5a      	adds	r2, r3, #1
    8642:	60fa      	str	r2, [r7, #12]
    8644:	68ba      	ldr	r2, [r7, #8]
    8646:	1c51      	adds	r1, r2, #1
    8648:	60b9      	str	r1, [r7, #8]
    864a:	7812      	ldrb	r2, [r2, #0]
    864c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    864e:	687b      	ldr	r3, [r7, #4]
    8650:	1e5a      	subs	r2, r3, #1
    8652:	607a      	str	r2, [r7, #4]
    8654:	2b00      	cmp	r3, #0
    8656:	d1f2      	bne.n	863e <_qspi_memcpy+0xe>
	}
}
    8658:	bf00      	nop
    865a:	3714      	adds	r7, #20
    865c:	46bd      	mov	sp, r7
    865e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8662:	4770      	bx	lr

00008664 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    8664:	b580      	push	{r7, lr}
    8666:	b082      	sub	sp, #8
    8668:	af00      	add	r7, sp, #0
    866a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    866c:	4903      	ldr	r1, [pc, #12]	; (867c <_qspi_end_transfer+0x18>)
    866e:	6878      	ldr	r0, [r7, #4]
    8670:	4b03      	ldr	r3, [pc, #12]	; (8680 <_qspi_end_transfer+0x1c>)
    8672:	4798      	blx	r3
}
    8674:	bf00      	nop
    8676:	3708      	adds	r7, #8
    8678:	46bd      	mov	sp, r7
    867a:	bd80      	pop	{r7, pc}
    867c:	01000002 	.word	0x01000002
    8680:	00008521 	.word	0x00008521

00008684 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    8684:	b580      	push	{r7, lr}
    8686:	b082      	sub	sp, #8
    8688:	af00      	add	r7, sp, #0
    868a:	6078      	str	r0, [r7, #4]
    868c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    868e:	687b      	ldr	r3, [r7, #4]
    8690:	2b00      	cmp	r3, #0
    8692:	d004      	beq.n	869e <_qspi_sync_init+0x1a>
    8694:	683b      	ldr	r3, [r7, #0]
    8696:	2b00      	cmp	r3, #0
    8698:	d001      	beq.n	869e <_qspi_sync_init+0x1a>
    869a:	2301      	movs	r3, #1
    869c:	e000      	b.n	86a0 <_qspi_sync_init+0x1c>
    869e:	2300      	movs	r3, #0
    86a0:	f003 0301 	and.w	r3, r3, #1
    86a4:	b2db      	uxtb	r3, r3
    86a6:	2240      	movs	r2, #64	; 0x40
    86a8:	490c      	ldr	r1, [pc, #48]	; (86dc <_qspi_sync_init+0x58>)
    86aa:	4618      	mov	r0, r3
    86ac:	4b0c      	ldr	r3, [pc, #48]	; (86e0 <_qspi_sync_init+0x5c>)
    86ae:	4798      	blx	r3
	dev->prvt = hw;
    86b0:	687b      	ldr	r3, [r7, #4]
    86b2:	683a      	ldr	r2, [r7, #0]
    86b4:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    86b6:	687b      	ldr	r3, [r7, #4]
    86b8:	681b      	ldr	r3, [r3, #0]
    86ba:	2101      	movs	r1, #1
    86bc:	4618      	mov	r0, r3
    86be:	4b09      	ldr	r3, [pc, #36]	; (86e4 <_qspi_sync_init+0x60>)
    86c0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    86c2:	4909      	ldr	r1, [pc, #36]	; (86e8 <_qspi_sync_init+0x64>)
    86c4:	6838      	ldr	r0, [r7, #0]
    86c6:	4b09      	ldr	r3, [pc, #36]	; (86ec <_qspi_sync_init+0x68>)
    86c8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    86ca:	4909      	ldr	r1, [pc, #36]	; (86f0 <_qspi_sync_init+0x6c>)
    86cc:	6838      	ldr	r0, [r7, #0]
    86ce:	4b09      	ldr	r3, [pc, #36]	; (86f4 <_qspi_sync_init+0x70>)
    86d0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    86d2:	2300      	movs	r3, #0
}
    86d4:	4618      	mov	r0, r3
    86d6:	3708      	adds	r7, #8
    86d8:	46bd      	mov	sp, r7
    86da:	bd80      	pop	{r7, pc}
    86dc:	0001a820 	.word	0x0001a820
    86e0:	00006241 	.word	0x00006241
    86e4:	00008521 	.word	0x00008521
    86e8:	06000011 	.word	0x06000011
    86ec:	0000853d 	.word	0x0000853d
    86f0:	00241300 	.word	0x00241300
    86f4:	00008559 	.word	0x00008559

000086f8 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    86f8:	b580      	push	{r7, lr}
    86fa:	b082      	sub	sp, #8
    86fc:	af00      	add	r7, sp, #0
    86fe:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    8700:	687b      	ldr	r3, [r7, #4]
    8702:	681b      	ldr	r3, [r3, #0]
    8704:	2102      	movs	r1, #2
    8706:	4618      	mov	r0, r3
    8708:	4b03      	ldr	r3, [pc, #12]	; (8718 <_qspi_sync_enable+0x20>)
    870a:	4798      	blx	r3
	return ERR_NONE;
    870c:	2300      	movs	r3, #0
}
    870e:	4618      	mov	r0, r3
    8710:	3708      	adds	r7, #8
    8712:	46bd      	mov	sp, r7
    8714:	bd80      	pop	{r7, pc}
    8716:	bf00      	nop
    8718:	00008521 	.word	0x00008521

0000871c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    871c:	b580      	push	{r7, lr}
    871e:	b082      	sub	sp, #8
    8720:	af00      	add	r7, sp, #0
    8722:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    8724:	687b      	ldr	r3, [r7, #4]
    8726:	681b      	ldr	r3, [r3, #0]
    8728:	2100      	movs	r1, #0
    872a:	4618      	mov	r0, r3
    872c:	4b03      	ldr	r3, [pc, #12]	; (873c <_qspi_sync_disable+0x20>)
    872e:	4798      	blx	r3
	return ERR_NONE;
    8730:	2300      	movs	r3, #0
}
    8732:	4618      	mov	r0, r3
    8734:	3708      	adds	r7, #8
    8736:	46bd      	mov	sp, r7
    8738:	bd80      	pop	{r7, pc}
    873a:	bf00      	nop
    873c:	00008521 	.word	0x00008521

00008740 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8740:	b580      	push	{r7, lr}
    8742:	b084      	sub	sp, #16
    8744:	af00      	add	r7, sp, #0
    8746:	6078      	str	r0, [r7, #4]
    8748:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    874a:	687b      	ldr	r3, [r7, #4]
    874c:	681b      	ldr	r3, [r3, #0]
    874e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    8750:	683b      	ldr	r3, [r7, #0]
    8752:	781b      	ldrb	r3, [r3, #0]
    8754:	f003 0320 	and.w	r3, r3, #32
    8758:	b2db      	uxtb	r3, r3
    875a:	2b00      	cmp	r3, #0
    875c:	d005      	beq.n	876a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    875e:	683b      	ldr	r3, [r7, #0]
    8760:	689b      	ldr	r3, [r3, #8]
    8762:	4619      	mov	r1, r3
    8764:	68f8      	ldr	r0, [r7, #12]
    8766:	4b13      	ldr	r3, [pc, #76]	; (87b4 <_qspi_sync_command_set_ifr+0x74>)
    8768:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    876a:	683b      	ldr	r3, [r7, #0]
    876c:	781b      	ldrb	r3, [r3, #0]
    876e:	f003 0310 	and.w	r3, r3, #16
    8772:	b2db      	uxtb	r3, r3
    8774:	2b00      	cmp	r3, #0
    8776:	d005      	beq.n	8784 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    8778:	683b      	ldr	r3, [r7, #0]
    877a:	791b      	ldrb	r3, [r3, #4]
    877c:	4619      	mov	r1, r3
    877e:	68f8      	ldr	r0, [r7, #12]
    8780:	4b0d      	ldr	r3, [pc, #52]	; (87b8 <_qspi_sync_command_set_ifr+0x78>)
    8782:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    8784:	683b      	ldr	r3, [r7, #0]
    8786:	781b      	ldrb	r3, [r3, #0]
    8788:	f003 0340 	and.w	r3, r3, #64	; 0x40
    878c:	b2db      	uxtb	r3, r3
    878e:	2b00      	cmp	r3, #0
    8790:	d005      	beq.n	879e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    8792:	683b      	ldr	r3, [r7, #0]
    8794:	795b      	ldrb	r3, [r3, #5]
    8796:	4619      	mov	r1, r3
    8798:	68f8      	ldr	r0, [r7, #12]
    879a:	4b08      	ldr	r3, [pc, #32]	; (87bc <_qspi_sync_command_set_ifr+0x7c>)
    879c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    879e:	683b      	ldr	r3, [r7, #0]
    87a0:	681b      	ldr	r3, [r3, #0]
    87a2:	4619      	mov	r1, r3
    87a4:	68f8      	ldr	r0, [r7, #12]
    87a6:	4b06      	ldr	r3, [pc, #24]	; (87c0 <_qspi_sync_command_set_ifr+0x80>)
    87a8:	4798      	blx	r3
}
    87aa:	bf00      	nop
    87ac:	3710      	adds	r7, #16
    87ae:	46bd      	mov	sp, r7
    87b0:	bd80      	pop	{r7, pc}
    87b2:	bf00      	nop
    87b4:	00008575 	.word	0x00008575
    87b8:	00008591 	.word	0x00008591
    87bc:	000085c5 	.word	0x000085c5
    87c0:	000085fd 	.word	0x000085fd

000087c4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    87c4:	b580      	push	{r7, lr}
    87c6:	b084      	sub	sp, #16
    87c8:	af00      	add	r7, sp, #0
    87ca:	6078      	str	r0, [r7, #4]
    87cc:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    87ce:	687b      	ldr	r3, [r7, #4]
    87d0:	681b      	ldr	r3, [r3, #0]
    87d2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    87d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    87d8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    87da:	683b      	ldr	r3, [r7, #0]
    87dc:	781b      	ldrb	r3, [r3, #0]
    87de:	f003 0320 	and.w	r3, r3, #32
    87e2:	b2db      	uxtb	r3, r3
    87e4:	2b00      	cmp	r3, #0
    87e6:	d004      	beq.n	87f2 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    87e8:	683b      	ldr	r3, [r7, #0]
    87ea:	689b      	ldr	r3, [r3, #8]
    87ec:	68fa      	ldr	r2, [r7, #12]
    87ee:	4413      	add	r3, r2
    87f0:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    87f2:	68b8      	ldr	r0, [r7, #8]
    87f4:	4b18      	ldr	r3, [pc, #96]	; (8858 <_qspi_sync_run_transfer+0x94>)
    87f6:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    87f8:	683b      	ldr	r3, [r7, #0]
    87fa:	691b      	ldr	r3, [r3, #16]
    87fc:	2b00      	cmp	r3, #0
    87fe:	d103      	bne.n	8808 <_qspi_sync_run_transfer+0x44>
    8800:	683b      	ldr	r3, [r7, #0]
    8802:	695b      	ldr	r3, [r3, #20]
    8804:	2b00      	cmp	r3, #0
    8806:	d001      	beq.n	880c <_qspi_sync_run_transfer+0x48>
    8808:	2301      	movs	r3, #1
    880a:	e000      	b.n	880e <_qspi_sync_run_transfer+0x4a>
    880c:	2300      	movs	r3, #0
    880e:	f003 0301 	and.w	r3, r3, #1
    8812:	b2db      	uxtb	r3, r3
    8814:	2282      	movs	r2, #130	; 0x82
    8816:	4911      	ldr	r1, [pc, #68]	; (885c <_qspi_sync_run_transfer+0x98>)
    8818:	4618      	mov	r0, r3
    881a:	4b11      	ldr	r3, [pc, #68]	; (8860 <_qspi_sync_run_transfer+0x9c>)
    881c:	4798      	blx	r3

	if (cmd->tx_buf) {
    881e:	683b      	ldr	r3, [r7, #0]
    8820:	691b      	ldr	r3, [r3, #16]
    8822:	2b00      	cmp	r3, #0
    8824:	d008      	beq.n	8838 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    8826:	683b      	ldr	r3, [r7, #0]
    8828:	6919      	ldr	r1, [r3, #16]
    882a:	683b      	ldr	r3, [r7, #0]
    882c:	68db      	ldr	r3, [r3, #12]
    882e:	461a      	mov	r2, r3
    8830:	68f8      	ldr	r0, [r7, #12]
    8832:	4b0c      	ldr	r3, [pc, #48]	; (8864 <_qspi_sync_run_transfer+0xa0>)
    8834:	4798      	blx	r3
    8836:	e007      	b.n	8848 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    8838:	683b      	ldr	r3, [r7, #0]
    883a:	6958      	ldr	r0, [r3, #20]
    883c:	683b      	ldr	r3, [r7, #0]
    883e:	68db      	ldr	r3, [r3, #12]
    8840:	461a      	mov	r2, r3
    8842:	68f9      	ldr	r1, [r7, #12]
    8844:	4b07      	ldr	r3, [pc, #28]	; (8864 <_qspi_sync_run_transfer+0xa0>)
    8846:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    8848:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    884c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    8850:	bf00      	nop
    8852:	3710      	adds	r7, #16
    8854:	46bd      	mov	sp, r7
    8856:	bd80      	pop	{r7, pc}
    8858:	00008619 	.word	0x00008619
    885c:	0001a820 	.word	0x0001a820
    8860:	00006241 	.word	0x00006241
    8864:	00008631 	.word	0x00008631

00008868 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8868:	b580      	push	{r7, lr}
    886a:	b082      	sub	sp, #8
    886c:	af00      	add	r7, sp, #0
    886e:	6078      	str	r0, [r7, #4]
    8870:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    8872:	6839      	ldr	r1, [r7, #0]
    8874:	6878      	ldr	r0, [r7, #4]
    8876:	4b14      	ldr	r3, [pc, #80]	; (88c8 <_qspi_sync_serial_run_command+0x60>)
    8878:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    887a:	683b      	ldr	r3, [r7, #0]
    887c:	781b      	ldrb	r3, [r3, #0]
    887e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    8882:	b2db      	uxtb	r3, r3
    8884:	2b00      	cmp	r3, #0
    8886:	d003      	beq.n	8890 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    8888:	6839      	ldr	r1, [r7, #0]
    888a:	6878      	ldr	r0, [r7, #4]
    888c:	4b0f      	ldr	r3, [pc, #60]	; (88cc <_qspi_sync_serial_run_command+0x64>)
    888e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    8890:	687b      	ldr	r3, [r7, #4]
    8892:	681b      	ldr	r3, [r3, #0]
    8894:	4618      	mov	r0, r3
    8896:	4b0e      	ldr	r3, [pc, #56]	; (88d0 <_qspi_sync_serial_run_command+0x68>)
    8898:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    889a:	bf00      	nop
    889c:	687b      	ldr	r3, [r7, #4]
    889e:	681b      	ldr	r3, [r3, #0]
    88a0:	4618      	mov	r0, r3
    88a2:	4b0c      	ldr	r3, [pc, #48]	; (88d4 <_qspi_sync_serial_run_command+0x6c>)
    88a4:	4798      	blx	r3
    88a6:	4603      	mov	r3, r0
    88a8:	f083 0301 	eor.w	r3, r3, #1
    88ac:	b2db      	uxtb	r3, r3
    88ae:	2b00      	cmp	r3, #0
    88b0:	d1f4      	bne.n	889c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    88b2:	687b      	ldr	r3, [r7, #4]
    88b4:	681b      	ldr	r3, [r3, #0]
    88b6:	4618      	mov	r0, r3
    88b8:	4b07      	ldr	r3, [pc, #28]	; (88d8 <_qspi_sync_serial_run_command+0x70>)
    88ba:	4798      	blx	r3
	return ERR_NONE;
    88bc:	2300      	movs	r3, #0
}
    88be:	4618      	mov	r0, r3
    88c0:	3708      	adds	r7, #8
    88c2:	46bd      	mov	sp, r7
    88c4:	bd80      	pop	{r7, pc}
    88c6:	bf00      	nop
    88c8:	00008741 	.word	0x00008741
    88cc:	000087c5 	.word	0x000087c5
    88d0:	00008665 	.word	0x00008665
    88d4:	000084dd 	.word	0x000084dd
    88d8:	00008505 	.word	0x00008505

000088dc <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    88dc:	b480      	push	{r7}
    88de:	b083      	sub	sp, #12
    88e0:	af00      	add	r7, sp, #0
    88e2:	6078      	str	r0, [r7, #4]
    88e4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    88e6:	bf00      	nop
    88e8:	687b      	ldr	r3, [r7, #4]
    88ea:	691a      	ldr	r2, [r3, #16]
    88ec:	683b      	ldr	r3, [r7, #0]
    88ee:	4013      	ands	r3, r2
    88f0:	2b00      	cmp	r3, #0
    88f2:	d1f9      	bne.n	88e8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    88f4:	bf00      	nop
    88f6:	370c      	adds	r7, #12
    88f8:	46bd      	mov	sp, r7
    88fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    88fe:	4770      	bx	lr

00008900 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    8900:	b480      	push	{r7}
    8902:	b083      	sub	sp, #12
    8904:	af00      	add	r7, sp, #0
    8906:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    8908:	687b      	ldr	r3, [r7, #4]
    890a:	f44f 7280 	mov.w	r2, #256	; 0x100
    890e:	819a      	strh	r2, [r3, #12]
}
    8910:	bf00      	nop
    8912:	370c      	adds	r7, #12
    8914:	46bd      	mov	sp, r7
    8916:	f85d 7b04 	ldr.w	r7, [sp], #4
    891a:	4770      	bx	lr

0000891c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    891c:	b480      	push	{r7}
    891e:	b083      	sub	sp, #12
    8920:	af00      	add	r7, sp, #0
    8922:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    8924:	687b      	ldr	r3, [r7, #4]
    8926:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    892a:	819a      	strh	r2, [r3, #12]
}
    892c:	bf00      	nop
    892e:	370c      	adds	r7, #12
    8930:	46bd      	mov	sp, r7
    8932:	f85d 7b04 	ldr.w	r7, [sp], #4
    8936:	4770      	bx	lr

00008938 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    8938:	b480      	push	{r7}
    893a:	b083      	sub	sp, #12
    893c:	af00      	add	r7, sp, #0
    893e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    8940:	687b      	ldr	r3, [r7, #4]
    8942:	899b      	ldrh	r3, [r3, #12]
    8944:	b29b      	uxth	r3, r3
}
    8946:	4618      	mov	r0, r3
    8948:	370c      	adds	r7, #12
    894a:	46bd      	mov	sp, r7
    894c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8950:	4770      	bx	lr

00008952 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    8952:	b480      	push	{r7}
    8954:	b083      	sub	sp, #12
    8956:	af00      	add	r7, sp, #0
    8958:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    895a:	687b      	ldr	r3, [r7, #4]
    895c:	895b      	ldrh	r3, [r3, #10]
    895e:	b29b      	uxth	r3, r3
}
    8960:	4618      	mov	r0, r3
    8962:	370c      	adds	r7, #12
    8964:	46bd      	mov	sp, r7
    8966:	f85d 7b04 	ldr.w	r7, [sp], #4
    896a:	4770      	bx	lr

0000896c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    896c:	b580      	push	{r7, lr}
    896e:	b082      	sub	sp, #8
    8970:	af00      	add	r7, sp, #0
    8972:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    8974:	687b      	ldr	r3, [r7, #4]
    8976:	881b      	ldrh	r3, [r3, #0]
    8978:	b29b      	uxth	r3, r3
    897a:	f043 0301 	orr.w	r3, r3, #1
    897e:	b29a      	uxth	r2, r3
    8980:	687b      	ldr	r3, [r7, #4]
    8982:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    8984:	2101      	movs	r1, #1
    8986:	6878      	ldr	r0, [r7, #4]
    8988:	4b02      	ldr	r3, [pc, #8]	; (8994 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    898a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    898c:	bf00      	nop
    898e:	3708      	adds	r7, #8
    8990:	46bd      	mov	sp, r7
    8992:	bd80      	pop	{r7, pc}
    8994:	000088dd 	.word	0x000088dd

00008998 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8998:	b580      	push	{r7, lr}
    899a:	b082      	sub	sp, #8
    899c:	af00      	add	r7, sp, #0
    899e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    89a0:	687b      	ldr	r3, [r7, #4]
    89a2:	881b      	ldrh	r3, [r3, #0]
    89a4:	b29b      	uxth	r3, r3
    89a6:	f043 0302 	orr.w	r3, r3, #2
    89aa:	b29a      	uxth	r2, r3
    89ac:	687b      	ldr	r3, [r7, #4]
    89ae:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    89b0:	f248 0103 	movw	r1, #32771	; 0x8003
    89b4:	6878      	ldr	r0, [r7, #4]
    89b6:	4b03      	ldr	r3, [pc, #12]	; (89c4 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    89b8:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    89ba:	bf00      	nop
    89bc:	3708      	adds	r7, #8
    89be:	46bd      	mov	sp, r7
    89c0:	bd80      	pop	{r7, pc}
    89c2:	bf00      	nop
    89c4:	000088dd 	.word	0x000088dd

000089c8 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    89c8:	b580      	push	{r7, lr}
    89ca:	b084      	sub	sp, #16
    89cc:	af00      	add	r7, sp, #0
    89ce:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    89d0:	f248 0103 	movw	r1, #32771	; 0x8003
    89d4:	6878      	ldr	r0, [r7, #4]
    89d6:	4b0a      	ldr	r3, [pc, #40]	; (8a00 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    89d8:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    89da:	687b      	ldr	r3, [r7, #4]
    89dc:	881b      	ldrh	r3, [r3, #0]
    89de:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    89e0:	89fb      	ldrh	r3, [r7, #14]
    89e2:	085b      	lsrs	r3, r3, #1
    89e4:	b29b      	uxth	r3, r3
    89e6:	f003 0301 	and.w	r3, r3, #1
    89ea:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    89ec:	89fb      	ldrh	r3, [r7, #14]
    89ee:	2b00      	cmp	r3, #0
    89f0:	bf14      	ite	ne
    89f2:	2301      	movne	r3, #1
    89f4:	2300      	moveq	r3, #0
    89f6:	b2db      	uxtb	r3, r3
}
    89f8:	4618      	mov	r0, r3
    89fa:	3710      	adds	r7, #16
    89fc:	46bd      	mov	sp, r7
    89fe:	bd80      	pop	{r7, pc}
    8a00:	000088dd 	.word	0x000088dd

00008a04 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8a04:	b580      	push	{r7, lr}
    8a06:	b082      	sub	sp, #8
    8a08:	af00      	add	r7, sp, #0
    8a0a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    8a0c:	687b      	ldr	r3, [r7, #4]
    8a0e:	881b      	ldrh	r3, [r3, #0]
    8a10:	b29b      	uxth	r3, r3
    8a12:	f023 0302 	bic.w	r3, r3, #2
    8a16:	b29a      	uxth	r2, r3
    8a18:	687b      	ldr	r3, [r7, #4]
    8a1a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8a1c:	f248 0103 	movw	r1, #32771	; 0x8003
    8a20:	6878      	ldr	r0, [r7, #4]
    8a22:	4b03      	ldr	r3, [pc, #12]	; (8a30 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    8a24:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8a26:	bf00      	nop
    8a28:	3708      	adds	r7, #8
    8a2a:	46bd      	mov	sp, r7
    8a2c:	bd80      	pop	{r7, pc}
    8a2e:	bf00      	nop
    8a30:	000088dd 	.word	0x000088dd

00008a34 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    8a34:	b580      	push	{r7, lr}
    8a36:	b082      	sub	sp, #8
    8a38:	af00      	add	r7, sp, #0
    8a3a:	6078      	str	r0, [r7, #4]
    8a3c:	460b      	mov	r3, r1
    8a3e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    8a40:	687b      	ldr	r3, [r7, #4]
    8a42:	887a      	ldrh	r2, [r7, #2]
    8a44:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8a46:	f248 0103 	movw	r1, #32771	; 0x8003
    8a4a:	6878      	ldr	r0, [r7, #4]
    8a4c:	4b02      	ldr	r3, [pc, #8]	; (8a58 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    8a4e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8a50:	bf00      	nop
    8a52:	3708      	adds	r7, #8
    8a54:	46bd      	mov	sp, r7
    8a56:	bd80      	pop	{r7, pc}
    8a58:	000088dd 	.word	0x000088dd

00008a5c <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    8a5c:	b580      	push	{r7, lr}
    8a5e:	b082      	sub	sp, #8
    8a60:	af00      	add	r7, sp, #0
    8a62:	6078      	str	r0, [r7, #4]
    8a64:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    8a66:	687b      	ldr	r3, [r7, #4]
    8a68:	683a      	ldr	r2, [r7, #0]
    8a6a:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    8a6c:	2108      	movs	r1, #8
    8a6e:	6878      	ldr	r0, [r7, #4]
    8a70:	4b02      	ldr	r3, [pc, #8]	; (8a7c <hri_rtcmode0_write_COUNT_reg+0x20>)
    8a72:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8a74:	bf00      	nop
    8a76:	3708      	adds	r7, #8
    8a78:	46bd      	mov	sp, r7
    8a7a:	bd80      	pop	{r7, pc}
    8a7c:	000088dd 	.word	0x000088dd

00008a80 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    8a80:	b580      	push	{r7, lr}
    8a82:	b082      	sub	sp, #8
    8a84:	af00      	add	r7, sp, #0
    8a86:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    8a88:	2108      	movs	r1, #8
    8a8a:	6878      	ldr	r0, [r7, #4]
    8a8c:	4b03      	ldr	r3, [pc, #12]	; (8a9c <hri_rtcmode0_read_COUNT_reg+0x1c>)
    8a8e:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    8a90:	687b      	ldr	r3, [r7, #4]
    8a92:	699b      	ldr	r3, [r3, #24]
}
    8a94:	4618      	mov	r0, r3
    8a96:	3708      	adds	r7, #8
    8a98:	46bd      	mov	sp, r7
    8a9a:	bd80      	pop	{r7, pc}
    8a9c:	000088dd 	.word	0x000088dd

00008aa0 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    8aa0:	b480      	push	{r7}
    8aa2:	b083      	sub	sp, #12
    8aa4:	af00      	add	r7, sp, #0
    8aa6:	6078      	str	r0, [r7, #4]
    8aa8:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    8aaa:	687b      	ldr	r3, [r7, #4]
    8aac:	683a      	ldr	r2, [r7, #0]
    8aae:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    8ab0:	bf00      	nop
    8ab2:	370c      	adds	r7, #12
    8ab4:	46bd      	mov	sp, r7
    8ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aba:	4770      	bx	lr

00008abc <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    8abc:	b580      	push	{r7, lr}
    8abe:	b082      	sub	sp, #8
    8ac0:	af00      	add	r7, sp, #0
    8ac2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    8ac4:	687b      	ldr	r3, [r7, #4]
    8ac6:	2b00      	cmp	r3, #0
    8ac8:	d005      	beq.n	8ad6 <_calendar_init+0x1a>
    8aca:	687b      	ldr	r3, [r7, #4]
    8acc:	681b      	ldr	r3, [r3, #0]
    8ace:	2b00      	cmp	r3, #0
    8ad0:	d001      	beq.n	8ad6 <_calendar_init+0x1a>
    8ad2:	2301      	movs	r3, #1
    8ad4:	e000      	b.n	8ad8 <_calendar_init+0x1c>
    8ad6:	2300      	movs	r3, #0
    8ad8:	f003 0301 	and.w	r3, r3, #1
    8adc:	b2db      	uxtb	r3, r3
    8ade:	222f      	movs	r2, #47	; 0x2f
    8ae0:	491e      	ldr	r1, [pc, #120]	; (8b5c <_calendar_init+0xa0>)
    8ae2:	4618      	mov	r0, r3
    8ae4:	4b1e      	ldr	r3, [pc, #120]	; (8b60 <_calendar_init+0xa4>)
    8ae6:	4798      	blx	r3

	_rtc_dev = dev;
    8ae8:	4a1e      	ldr	r2, [pc, #120]	; (8b64 <_calendar_init+0xa8>)
    8aea:	687b      	ldr	r3, [r7, #4]
    8aec:	6013      	str	r3, [r2, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    8aee:	687b      	ldr	r3, [r7, #4]
    8af0:	681b      	ldr	r3, [r3, #0]
    8af2:	2101      	movs	r1, #1
    8af4:	4618      	mov	r0, r3
    8af6:	4b1c      	ldr	r3, [pc, #112]	; (8b68 <_calendar_init+0xac>)
    8af8:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    8afa:	687b      	ldr	r3, [r7, #4]
    8afc:	681b      	ldr	r3, [r3, #0]
    8afe:	4618      	mov	r0, r3
    8b00:	4b1a      	ldr	r3, [pc, #104]	; (8b6c <_calendar_init+0xb0>)
    8b02:	4798      	blx	r3
    8b04:	4603      	mov	r3, r0
    8b06:	2b00      	cmp	r3, #0
    8b08:	d00a      	beq.n	8b20 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    8b0a:	687b      	ldr	r3, [r7, #4]
    8b0c:	681b      	ldr	r3, [r3, #0]
    8b0e:	4618      	mov	r0, r3
    8b10:	4b17      	ldr	r3, [pc, #92]	; (8b70 <_calendar_init+0xb4>)
    8b12:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    8b14:	687b      	ldr	r3, [r7, #4]
    8b16:	681b      	ldr	r3, [r3, #0]
    8b18:	2102      	movs	r1, #2
    8b1a:	4618      	mov	r0, r3
    8b1c:	4b12      	ldr	r3, [pc, #72]	; (8b68 <_calendar_init+0xac>)
    8b1e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    8b20:	687b      	ldr	r3, [r7, #4]
    8b22:	681b      	ldr	r3, [r3, #0]
    8b24:	4618      	mov	r0, r3
    8b26:	4b13      	ldr	r3, [pc, #76]	; (8b74 <_calendar_init+0xb8>)
    8b28:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    8b2a:	687b      	ldr	r3, [r7, #4]
    8b2c:	681b      	ldr	r3, [r3, #0]
    8b2e:	2101      	movs	r1, #1
    8b30:	4618      	mov	r0, r3
    8b32:	4b0d      	ldr	r3, [pc, #52]	; (8b68 <_calendar_init+0xac>)
    8b34:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    8b36:	687b      	ldr	r3, [r7, #4]
    8b38:	681b      	ldr	r3, [r3, #0]
    8b3a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    8b3e:	4618      	mov	r0, r3
    8b40:	4b0d      	ldr	r3, [pc, #52]	; (8b78 <_calendar_init+0xbc>)
    8b42:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    8b44:	687b      	ldr	r3, [r7, #4]
    8b46:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    8b48:	2100      	movs	r1, #0
    8b4a:	4618      	mov	r0, r3
    8b4c:	4b0b      	ldr	r3, [pc, #44]	; (8b7c <_calendar_init+0xc0>)
    8b4e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    8b50:	2300      	movs	r3, #0
}
    8b52:	4618      	mov	r0, r3
    8b54:	3708      	adds	r7, #8
    8b56:	46bd      	mov	sp, r7
    8b58:	bd80      	pop	{r7, pc}
    8b5a:	bf00      	nop
    8b5c:	0001a838 	.word	0x0001a838
    8b60:	00006241 	.word	0x00006241
    8b64:	20002370 	.word	0x20002370
    8b68:	000088dd 	.word	0x000088dd
    8b6c:	000089c9 	.word	0x000089c9
    8b70:	00008a05 	.word	0x00008a05
    8b74:	0000896d 	.word	0x0000896d
    8b78:	00008a35 	.word	0x00008a35
    8b7c:	00008aa1 	.word	0x00008aa1

00008b80 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    8b80:	b580      	push	{r7, lr}
    8b82:	b082      	sub	sp, #8
    8b84:	af00      	add	r7, sp, #0
    8b86:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    8b88:	687b      	ldr	r3, [r7, #4]
    8b8a:	2b00      	cmp	r3, #0
    8b8c:	d005      	beq.n	8b9a <_calendar_enable+0x1a>
    8b8e:	687b      	ldr	r3, [r7, #4]
    8b90:	681b      	ldr	r3, [r3, #0]
    8b92:	2b00      	cmp	r3, #0
    8b94:	d001      	beq.n	8b9a <_calendar_enable+0x1a>
    8b96:	2301      	movs	r3, #1
    8b98:	e000      	b.n	8b9c <_calendar_enable+0x1c>
    8b9a:	2300      	movs	r3, #0
    8b9c:	f003 0301 	and.w	r3, r3, #1
    8ba0:	b2db      	uxtb	r3, r3
    8ba2:	2276      	movs	r2, #118	; 0x76
    8ba4:	4906      	ldr	r1, [pc, #24]	; (8bc0 <_calendar_enable+0x40>)
    8ba6:	4618      	mov	r0, r3
    8ba8:	4b06      	ldr	r3, [pc, #24]	; (8bc4 <_calendar_enable+0x44>)
    8baa:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    8bac:	687b      	ldr	r3, [r7, #4]
    8bae:	681b      	ldr	r3, [r3, #0]
    8bb0:	4618      	mov	r0, r3
    8bb2:	4b05      	ldr	r3, [pc, #20]	; (8bc8 <_calendar_enable+0x48>)
    8bb4:	4798      	blx	r3

	return ERR_NONE;
    8bb6:	2300      	movs	r3, #0
}
    8bb8:	4618      	mov	r0, r3
    8bba:	3708      	adds	r7, #8
    8bbc:	46bd      	mov	sp, r7
    8bbe:	bd80      	pop	{r7, pc}
    8bc0:	0001a838 	.word	0x0001a838
    8bc4:	00006241 	.word	0x00006241
    8bc8:	00008999 	.word	0x00008999

00008bcc <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    8bcc:	b580      	push	{r7, lr}
    8bce:	b082      	sub	sp, #8
    8bd0:	af00      	add	r7, sp, #0
    8bd2:	6078      	str	r0, [r7, #4]
    8bd4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    8bd6:	687b      	ldr	r3, [r7, #4]
    8bd8:	2b00      	cmp	r3, #0
    8bda:	d005      	beq.n	8be8 <_calendar_set_counter+0x1c>
    8bdc:	687b      	ldr	r3, [r7, #4]
    8bde:	681b      	ldr	r3, [r3, #0]
    8be0:	2b00      	cmp	r3, #0
    8be2:	d001      	beq.n	8be8 <_calendar_set_counter+0x1c>
    8be4:	2301      	movs	r3, #1
    8be6:	e000      	b.n	8bea <_calendar_set_counter+0x1e>
    8be8:	2300      	movs	r3, #0
    8bea:	f003 0301 	and.w	r3, r3, #1
    8bee:	b2db      	uxtb	r3, r3
    8bf0:	228e      	movs	r2, #142	; 0x8e
    8bf2:	4907      	ldr	r1, [pc, #28]	; (8c10 <_calendar_set_counter+0x44>)
    8bf4:	4618      	mov	r0, r3
    8bf6:	4b07      	ldr	r3, [pc, #28]	; (8c14 <_calendar_set_counter+0x48>)
    8bf8:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    8bfa:	687b      	ldr	r3, [r7, #4]
    8bfc:	681b      	ldr	r3, [r3, #0]
    8bfe:	6839      	ldr	r1, [r7, #0]
    8c00:	4618      	mov	r0, r3
    8c02:	4b05      	ldr	r3, [pc, #20]	; (8c18 <_calendar_set_counter+0x4c>)
    8c04:	4798      	blx	r3

	return ERR_NONE;
    8c06:	2300      	movs	r3, #0
}
    8c08:	4618      	mov	r0, r3
    8c0a:	3708      	adds	r7, #8
    8c0c:	46bd      	mov	sp, r7
    8c0e:	bd80      	pop	{r7, pc}
    8c10:	0001a838 	.word	0x0001a838
    8c14:	00006241 	.word	0x00006241
    8c18:	00008a5d 	.word	0x00008a5d

00008c1c <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    8c1c:	b580      	push	{r7, lr}
    8c1e:	b082      	sub	sp, #8
    8c20:	af00      	add	r7, sp, #0
    8c22:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    8c24:	687b      	ldr	r3, [r7, #4]
    8c26:	2b00      	cmp	r3, #0
    8c28:	d005      	beq.n	8c36 <_calendar_get_counter+0x1a>
    8c2a:	687b      	ldr	r3, [r7, #4]
    8c2c:	681b      	ldr	r3, [r3, #0]
    8c2e:	2b00      	cmp	r3, #0
    8c30:	d001      	beq.n	8c36 <_calendar_get_counter+0x1a>
    8c32:	2301      	movs	r3, #1
    8c34:	e000      	b.n	8c38 <_calendar_get_counter+0x1c>
    8c36:	2300      	movs	r3, #0
    8c38:	f003 0301 	and.w	r3, r3, #1
    8c3c:	b2db      	uxtb	r3, r3
    8c3e:	229a      	movs	r2, #154	; 0x9a
    8c40:	4906      	ldr	r1, [pc, #24]	; (8c5c <_calendar_get_counter+0x40>)
    8c42:	4618      	mov	r0, r3
    8c44:	4b06      	ldr	r3, [pc, #24]	; (8c60 <_calendar_get_counter+0x44>)
    8c46:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    8c48:	687b      	ldr	r3, [r7, #4]
    8c4a:	681b      	ldr	r3, [r3, #0]
    8c4c:	4618      	mov	r0, r3
    8c4e:	4b05      	ldr	r3, [pc, #20]	; (8c64 <_calendar_get_counter+0x48>)
    8c50:	4798      	blx	r3
    8c52:	4603      	mov	r3, r0
}
    8c54:	4618      	mov	r0, r3
    8c56:	3708      	adds	r7, #8
    8c58:	46bd      	mov	sp, r7
    8c5a:	bd80      	pop	{r7, pc}
    8c5c:	0001a838 	.word	0x0001a838
    8c60:	00006241 	.word	0x00006241
    8c64:	00008a81 	.word	0x00008a81

00008c68 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    8c68:	b580      	push	{r7, lr}
    8c6a:	b084      	sub	sp, #16
    8c6c:	af00      	add	r7, sp, #0
    8c6e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    8c70:	687b      	ldr	r3, [r7, #4]
    8c72:	681b      	ldr	r3, [r3, #0]
    8c74:	4618      	mov	r0, r3
    8c76:	4b19      	ldr	r3, [pc, #100]	; (8cdc <_rtc_interrupt_handler+0x74>)
    8c78:	4798      	blx	r3
    8c7a:	4603      	mov	r3, r0
    8c7c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    8c7e:	687b      	ldr	r3, [r7, #4]
    8c80:	681b      	ldr	r3, [r3, #0]
    8c82:	4618      	mov	r0, r3
    8c84:	4b16      	ldr	r3, [pc, #88]	; (8ce0 <_rtc_interrupt_handler+0x78>)
    8c86:	4798      	blx	r3
    8c88:	4603      	mov	r3, r0
    8c8a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    8c8c:	89fa      	ldrh	r2, [r7, #14]
    8c8e:	89bb      	ldrh	r3, [r7, #12]
    8c90:	4013      	ands	r3, r2
    8c92:	b29b      	uxth	r3, r3
    8c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8c98:	2b00      	cmp	r3, #0
    8c9a:	d009      	beq.n	8cb0 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    8c9c:	687b      	ldr	r3, [r7, #4]
    8c9e:	685b      	ldr	r3, [r3, #4]
    8ca0:	6878      	ldr	r0, [r7, #4]
    8ca2:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    8ca4:	687b      	ldr	r3, [r7, #4]
    8ca6:	681b      	ldr	r3, [r3, #0]
    8ca8:	4618      	mov	r0, r3
    8caa:	4b0e      	ldr	r3, [pc, #56]	; (8ce4 <_rtc_interrupt_handler+0x7c>)
    8cac:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    8cae:	e010      	b.n	8cd2 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    8cb0:	89fa      	ldrh	r2, [r7, #14]
    8cb2:	89bb      	ldrh	r3, [r7, #12]
    8cb4:	4013      	ands	r3, r2
    8cb6:	b29b      	uxth	r3, r3
    8cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8cbc:	2b00      	cmp	r3, #0
    8cbe:	d008      	beq.n	8cd2 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    8cc0:	687b      	ldr	r3, [r7, #4]
    8cc2:	689b      	ldr	r3, [r3, #8]
    8cc4:	6878      	ldr	r0, [r7, #4]
    8cc6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    8cc8:	687b      	ldr	r3, [r7, #4]
    8cca:	681b      	ldr	r3, [r3, #0]
    8ccc:	4618      	mov	r0, r3
    8cce:	4b06      	ldr	r3, [pc, #24]	; (8ce8 <_rtc_interrupt_handler+0x80>)
    8cd0:	4798      	blx	r3
}
    8cd2:	bf00      	nop
    8cd4:	3710      	adds	r7, #16
    8cd6:	46bd      	mov	sp, r7
    8cd8:	bd80      	pop	{r7, pc}
    8cda:	bf00      	nop
    8cdc:	00008939 	.word	0x00008939
    8ce0:	00008953 	.word	0x00008953
    8ce4:	00008901 	.word	0x00008901
    8ce8:	0000891d 	.word	0x0000891d

00008cec <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    8cec:	b580      	push	{r7, lr}
    8cee:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    8cf0:	4b03      	ldr	r3, [pc, #12]	; (8d00 <RTC_Handler+0x14>)
    8cf2:	681b      	ldr	r3, [r3, #0]
    8cf4:	4618      	mov	r0, r3
    8cf6:	4b03      	ldr	r3, [pc, #12]	; (8d04 <RTC_Handler+0x18>)
    8cf8:	4798      	blx	r3
}
    8cfa:	bf00      	nop
    8cfc:	bd80      	pop	{r7, pc}
    8cfe:	bf00      	nop
    8d00:	20002370 	.word	0x20002370
    8d04:	00008c69 	.word	0x00008c69

00008d08 <__NVIC_EnableIRQ>:
{
    8d08:	b480      	push	{r7}
    8d0a:	b083      	sub	sp, #12
    8d0c:	af00      	add	r7, sp, #0
    8d0e:	4603      	mov	r3, r0
    8d10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d16:	2b00      	cmp	r3, #0
    8d18:	db0b      	blt.n	8d32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d1a:	4909      	ldr	r1, [pc, #36]	; (8d40 <__NVIC_EnableIRQ+0x38>)
    8d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d20:	095b      	lsrs	r3, r3, #5
    8d22:	88fa      	ldrh	r2, [r7, #6]
    8d24:	f002 021f 	and.w	r2, r2, #31
    8d28:	2001      	movs	r0, #1
    8d2a:	fa00 f202 	lsl.w	r2, r0, r2
    8d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d32:	bf00      	nop
    8d34:	370c      	adds	r7, #12
    8d36:	46bd      	mov	sp, r7
    8d38:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d3c:	4770      	bx	lr
    8d3e:	bf00      	nop
    8d40:	e000e100 	.word	0xe000e100

00008d44 <__NVIC_DisableIRQ>:
{
    8d44:	b480      	push	{r7}
    8d46:	b083      	sub	sp, #12
    8d48:	af00      	add	r7, sp, #0
    8d4a:	4603      	mov	r3, r0
    8d4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d52:	2b00      	cmp	r3, #0
    8d54:	db10      	blt.n	8d78 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d56:	490b      	ldr	r1, [pc, #44]	; (8d84 <__NVIC_DisableIRQ+0x40>)
    8d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d5c:	095b      	lsrs	r3, r3, #5
    8d5e:	88fa      	ldrh	r2, [r7, #6]
    8d60:	f002 021f 	and.w	r2, r2, #31
    8d64:	2001      	movs	r0, #1
    8d66:	fa00 f202 	lsl.w	r2, r0, r2
    8d6a:	3320      	adds	r3, #32
    8d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8d70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8d74:	f3bf 8f6f 	isb	sy
}
    8d78:	bf00      	nop
    8d7a:	370c      	adds	r7, #12
    8d7c:	46bd      	mov	sp, r7
    8d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d82:	4770      	bx	lr
    8d84:	e000e100 	.word	0xe000e100

00008d88 <__NVIC_ClearPendingIRQ>:
{
    8d88:	b480      	push	{r7}
    8d8a:	b083      	sub	sp, #12
    8d8c:	af00      	add	r7, sp, #0
    8d8e:	4603      	mov	r3, r0
    8d90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d96:	2b00      	cmp	r3, #0
    8d98:	db0c      	blt.n	8db4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d9a:	4909      	ldr	r1, [pc, #36]	; (8dc0 <__NVIC_ClearPendingIRQ+0x38>)
    8d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8da0:	095b      	lsrs	r3, r3, #5
    8da2:	88fa      	ldrh	r2, [r7, #6]
    8da4:	f002 021f 	and.w	r2, r2, #31
    8da8:	2001      	movs	r0, #1
    8daa:	fa00 f202 	lsl.w	r2, r0, r2
    8dae:	3360      	adds	r3, #96	; 0x60
    8db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8db4:	bf00      	nop
    8db6:	370c      	adds	r7, #12
    8db8:	46bd      	mov	sp, r7
    8dba:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dbe:	4770      	bx	lr
    8dc0:	e000e100 	.word	0xe000e100

00008dc4 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    8dc4:	b480      	push	{r7}
    8dc6:	b083      	sub	sp, #12
    8dc8:	af00      	add	r7, sp, #0
    8dca:	6078      	str	r0, [r7, #4]
    8dcc:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8dce:	bf00      	nop
    8dd0:	687b      	ldr	r3, [r7, #4]
    8dd2:	69da      	ldr	r2, [r3, #28]
    8dd4:	683b      	ldr	r3, [r7, #0]
    8dd6:	4013      	ands	r3, r2
    8dd8:	2b00      	cmp	r3, #0
    8dda:	d1f9      	bne.n	8dd0 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    8ddc:	bf00      	nop
    8dde:	370c      	adds	r7, #12
    8de0:	46bd      	mov	sp, r7
    8de2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8de6:	4770      	bx	lr

00008de8 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    8de8:	b480      	push	{r7}
    8dea:	b083      	sub	sp, #12
    8dec:	af00      	add	r7, sp, #0
    8dee:	6078      	str	r0, [r7, #4]
    8df0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    8df2:	687b      	ldr	r3, [r7, #4]
    8df4:	69da      	ldr	r2, [r3, #28]
    8df6:	683b      	ldr	r3, [r7, #0]
    8df8:	4013      	ands	r3, r2
    8dfa:	2b00      	cmp	r3, #0
    8dfc:	bf14      	ite	ne
    8dfe:	2301      	movne	r3, #1
    8e00:	2300      	moveq	r3, #0
    8e02:	b2db      	uxtb	r3, r3
}
    8e04:	4618      	mov	r0, r3
    8e06:	370c      	adds	r7, #12
    8e08:	46bd      	mov	sp, r7
    8e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e0e:	4770      	bx	lr

00008e10 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    8e10:	b480      	push	{r7}
    8e12:	b083      	sub	sp, #12
    8e14:	af00      	add	r7, sp, #0
    8e16:	6078      	str	r0, [r7, #4]
    8e18:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8e1a:	bf00      	nop
    8e1c:	687b      	ldr	r3, [r7, #4]
    8e1e:	69da      	ldr	r2, [r3, #28]
    8e20:	683b      	ldr	r3, [r7, #0]
    8e22:	4013      	ands	r3, r2
    8e24:	2b00      	cmp	r3, #0
    8e26:	d1f9      	bne.n	8e1c <hri_sercomspi_wait_for_sync+0xc>
	};
}
    8e28:	bf00      	nop
    8e2a:	370c      	adds	r7, #12
    8e2c:	46bd      	mov	sp, r7
    8e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e32:	4770      	bx	lr

00008e34 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    8e34:	b480      	push	{r7}
    8e36:	b083      	sub	sp, #12
    8e38:	af00      	add	r7, sp, #0
    8e3a:	6078      	str	r0, [r7, #4]
    8e3c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    8e3e:	687b      	ldr	r3, [r7, #4]
    8e40:	69da      	ldr	r2, [r3, #28]
    8e42:	683b      	ldr	r3, [r7, #0]
    8e44:	4013      	ands	r3, r2
    8e46:	2b00      	cmp	r3, #0
    8e48:	bf14      	ite	ne
    8e4a:	2301      	movne	r3, #1
    8e4c:	2300      	moveq	r3, #0
    8e4e:	b2db      	uxtb	r3, r3
}
    8e50:	4618      	mov	r0, r3
    8e52:	370c      	adds	r7, #12
    8e54:	46bd      	mov	sp, r7
    8e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e5a:	4770      	bx	lr

00008e5c <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    8e5c:	b480      	push	{r7}
    8e5e:	b083      	sub	sp, #12
    8e60:	af00      	add	r7, sp, #0
    8e62:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    8e64:	687b      	ldr	r3, [r7, #4]
    8e66:	2201      	movs	r2, #1
    8e68:	761a      	strb	r2, [r3, #24]
}
    8e6a:	bf00      	nop
    8e6c:	370c      	adds	r7, #12
    8e6e:	46bd      	mov	sp, r7
    8e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e74:	4770      	bx	lr

00008e76 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    8e76:	b480      	push	{r7}
    8e78:	b083      	sub	sp, #12
    8e7a:	af00      	add	r7, sp, #0
    8e7c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    8e7e:	687b      	ldr	r3, [r7, #4]
    8e80:	2202      	movs	r2, #2
    8e82:	761a      	strb	r2, [r3, #24]
}
    8e84:	bf00      	nop
    8e86:	370c      	adds	r7, #12
    8e88:	46bd      	mov	sp, r7
    8e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e8e:	4770      	bx	lr

00008e90 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    8e90:	b480      	push	{r7}
    8e92:	b083      	sub	sp, #12
    8e94:	af00      	add	r7, sp, #0
    8e96:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    8e98:	687b      	ldr	r3, [r7, #4]
    8e9a:	7e1b      	ldrb	r3, [r3, #24]
    8e9c:	b2db      	uxtb	r3, r3
}
    8e9e:	4618      	mov	r0, r3
    8ea0:	370c      	adds	r7, #12
    8ea2:	46bd      	mov	sp, r7
    8ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ea8:	4770      	bx	lr

00008eaa <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    8eaa:	b480      	push	{r7}
    8eac:	b083      	sub	sp, #12
    8eae:	af00      	add	r7, sp, #0
    8eb0:	6078      	str	r0, [r7, #4]
    8eb2:	460b      	mov	r3, r1
    8eb4:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    8eb6:	687b      	ldr	r3, [r7, #4]
    8eb8:	78fa      	ldrb	r2, [r7, #3]
    8eba:	761a      	strb	r2, [r3, #24]
}
    8ebc:	bf00      	nop
    8ebe:	370c      	adds	r7, #12
    8ec0:	46bd      	mov	sp, r7
    8ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ec6:	4770      	bx	lr

00008ec8 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    8ec8:	b480      	push	{r7}
    8eca:	b085      	sub	sp, #20
    8ecc:	af00      	add	r7, sp, #0
    8ece:	6078      	str	r0, [r7, #4]
    8ed0:	460b      	mov	r3, r1
    8ed2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    8ed4:	687b      	ldr	r3, [r7, #4]
    8ed6:	7e1b      	ldrb	r3, [r3, #24]
    8ed8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8eda:	7bfa      	ldrb	r2, [r7, #15]
    8edc:	78fb      	ldrb	r3, [r7, #3]
    8ede:	4013      	ands	r3, r2
    8ee0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8ee2:	7bfb      	ldrb	r3, [r7, #15]
}
    8ee4:	4618      	mov	r0, r3
    8ee6:	3714      	adds	r7, #20
    8ee8:	46bd      	mov	sp, r7
    8eea:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eee:	4770      	bx	lr

00008ef0 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    8ef0:	b480      	push	{r7}
    8ef2:	b083      	sub	sp, #12
    8ef4:	af00      	add	r7, sp, #0
    8ef6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    8ef8:	687b      	ldr	r3, [r7, #4]
    8efa:	7e1b      	ldrb	r3, [r3, #24]
    8efc:	b2db      	uxtb	r3, r3
}
    8efe:	4618      	mov	r0, r3
    8f00:	370c      	adds	r7, #12
    8f02:	46bd      	mov	sp, r7
    8f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f08:	4770      	bx	lr

00008f0a <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    8f0a:	b480      	push	{r7}
    8f0c:	b083      	sub	sp, #12
    8f0e:	af00      	add	r7, sp, #0
    8f10:	6078      	str	r0, [r7, #4]
    8f12:	460b      	mov	r3, r1
    8f14:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    8f16:	687b      	ldr	r3, [r7, #4]
    8f18:	78fa      	ldrb	r2, [r7, #3]
    8f1a:	761a      	strb	r2, [r3, #24]
}
    8f1c:	bf00      	nop
    8f1e:	370c      	adds	r7, #12
    8f20:	46bd      	mov	sp, r7
    8f22:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f26:	4770      	bx	lr

00008f28 <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    8f28:	b480      	push	{r7}
    8f2a:	b083      	sub	sp, #12
    8f2c:	af00      	add	r7, sp, #0
    8f2e:	6078      	str	r0, [r7, #4]
    8f30:	460b      	mov	r3, r1
    8f32:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    8f34:	78fb      	ldrb	r3, [r7, #3]
    8f36:	f083 0301 	eor.w	r3, r3, #1
    8f3a:	b2db      	uxtb	r3, r3
    8f3c:	2b00      	cmp	r3, #0
    8f3e:	d003      	beq.n	8f48 <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    8f40:	687b      	ldr	r3, [r7, #4]
    8f42:	2201      	movs	r2, #1
    8f44:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    8f46:	e002      	b.n	8f4e <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    8f48:	687b      	ldr	r3, [r7, #4]
    8f4a:	2201      	movs	r2, #1
    8f4c:	759a      	strb	r2, [r3, #22]
}
    8f4e:	bf00      	nop
    8f50:	370c      	adds	r7, #12
    8f52:	46bd      	mov	sp, r7
    8f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f58:	4770      	bx	lr

00008f5a <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    8f5a:	b480      	push	{r7}
    8f5c:	b083      	sub	sp, #12
    8f5e:	af00      	add	r7, sp, #0
    8f60:	6078      	str	r0, [r7, #4]
    8f62:	460b      	mov	r3, r1
    8f64:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    8f66:	78fb      	ldrb	r3, [r7, #3]
    8f68:	f083 0301 	eor.w	r3, r3, #1
    8f6c:	b2db      	uxtb	r3, r3
    8f6e:	2b00      	cmp	r3, #0
    8f70:	d003      	beq.n	8f7a <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    8f72:	687b      	ldr	r3, [r7, #4]
    8f74:	2202      	movs	r2, #2
    8f76:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    8f78:	e002      	b.n	8f80 <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    8f7a:	687b      	ldr	r3, [r7, #4]
    8f7c:	2202      	movs	r2, #2
    8f7e:	759a      	strb	r2, [r3, #22]
}
    8f80:	bf00      	nop
    8f82:	370c      	adds	r7, #12
    8f84:	46bd      	mov	sp, r7
    8f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f8a:	4770      	bx	lr

00008f8c <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    8f8c:	b480      	push	{r7}
    8f8e:	b083      	sub	sp, #12
    8f90:	af00      	add	r7, sp, #0
    8f92:	6078      	str	r0, [r7, #4]
    8f94:	460b      	mov	r3, r1
    8f96:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    8f98:	78fb      	ldrb	r3, [r7, #3]
    8f9a:	f083 0301 	eor.w	r3, r3, #1
    8f9e:	b2db      	uxtb	r3, r3
    8fa0:	2b00      	cmp	r3, #0
    8fa2:	d003      	beq.n	8fac <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    8fa4:	687b      	ldr	r3, [r7, #4]
    8fa6:	2280      	movs	r2, #128	; 0x80
    8fa8:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    8faa:	e002      	b.n	8fb2 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    8fac:	687b      	ldr	r3, [r7, #4]
    8fae:	2280      	movs	r2, #128	; 0x80
    8fb0:	759a      	strb	r2, [r3, #22]
}
    8fb2:	bf00      	nop
    8fb4:	370c      	adds	r7, #12
    8fb6:	46bd      	mov	sp, r7
    8fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fbc:	4770      	bx	lr

00008fbe <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    8fbe:	b480      	push	{r7}
    8fc0:	b083      	sub	sp, #12
    8fc2:	af00      	add	r7, sp, #0
    8fc4:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    8fc6:	687b      	ldr	r3, [r7, #4]
    8fc8:	2201      	movs	r2, #1
    8fca:	759a      	strb	r2, [r3, #22]
}
    8fcc:	bf00      	nop
    8fce:	370c      	adds	r7, #12
    8fd0:	46bd      	mov	sp, r7
    8fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fd6:	4770      	bx	lr

00008fd8 <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    8fd8:	b480      	push	{r7}
    8fda:	b083      	sub	sp, #12
    8fdc:	af00      	add	r7, sp, #0
    8fde:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    8fe0:	687b      	ldr	r3, [r7, #4]
    8fe2:	2201      	movs	r2, #1
    8fe4:	751a      	strb	r2, [r3, #20]
}
    8fe6:	bf00      	nop
    8fe8:	370c      	adds	r7, #12
    8fea:	46bd      	mov	sp, r7
    8fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ff0:	4770      	bx	lr

00008ff2 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    8ff2:	b480      	push	{r7}
    8ff4:	b083      	sub	sp, #12
    8ff6:	af00      	add	r7, sp, #0
    8ff8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    8ffa:	687b      	ldr	r3, [r7, #4]
    8ffc:	2202      	movs	r2, #2
    8ffe:	759a      	strb	r2, [r3, #22]
}
    9000:	bf00      	nop
    9002:	370c      	adds	r7, #12
    9004:	46bd      	mov	sp, r7
    9006:	f85d 7b04 	ldr.w	r7, [sp], #4
    900a:	4770      	bx	lr

0000900c <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    900c:	b480      	push	{r7}
    900e:	b083      	sub	sp, #12
    9010:	af00      	add	r7, sp, #0
    9012:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    9014:	687b      	ldr	r3, [r7, #4]
    9016:	2202      	movs	r2, #2
    9018:	751a      	strb	r2, [r3, #20]
}
    901a:	bf00      	nop
    901c:	370c      	adds	r7, #12
    901e:	46bd      	mov	sp, r7
    9020:	f85d 7b04 	ldr.w	r7, [sp], #4
    9024:	4770      	bx	lr

00009026 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    9026:	b480      	push	{r7}
    9028:	b083      	sub	sp, #12
    902a:	af00      	add	r7, sp, #0
    902c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    902e:	687b      	ldr	r3, [r7, #4]
    9030:	2204      	movs	r2, #4
    9032:	759a      	strb	r2, [r3, #22]
}
    9034:	bf00      	nop
    9036:	370c      	adds	r7, #12
    9038:	46bd      	mov	sp, r7
    903a:	f85d 7b04 	ldr.w	r7, [sp], #4
    903e:	4770      	bx	lr

00009040 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    9040:	b480      	push	{r7}
    9042:	b083      	sub	sp, #12
    9044:	af00      	add	r7, sp, #0
    9046:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    9048:	687b      	ldr	r3, [r7, #4]
    904a:	2204      	movs	r2, #4
    904c:	751a      	strb	r2, [r3, #20]
}
    904e:	bf00      	nop
    9050:	370c      	adds	r7, #12
    9052:	46bd      	mov	sp, r7
    9054:	f85d 7b04 	ldr.w	r7, [sp], #4
    9058:	4770      	bx	lr

0000905a <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    905a:	b480      	push	{r7}
    905c:	b083      	sub	sp, #12
    905e:	af00      	add	r7, sp, #0
    9060:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    9062:	687b      	ldr	r3, [r7, #4]
    9064:	7d9b      	ldrb	r3, [r3, #22]
    9066:	b2db      	uxtb	r3, r3
}
    9068:	4618      	mov	r0, r3
    906a:	370c      	adds	r7, #12
    906c:	46bd      	mov	sp, r7
    906e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9072:	4770      	bx	lr

00009074 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9074:	b580      	push	{r7, lr}
    9076:	b082      	sub	sp, #8
    9078:	af00      	add	r7, sp, #0
    907a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    907c:	687b      	ldr	r3, [r7, #4]
    907e:	681b      	ldr	r3, [r3, #0]
    9080:	f043 0202 	orr.w	r2, r3, #2
    9084:	687b      	ldr	r3, [r7, #4]
    9086:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9088:	2103      	movs	r1, #3
    908a:	6878      	ldr	r0, [r7, #4]
    908c:	4b02      	ldr	r3, [pc, #8]	; (9098 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    908e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9090:	bf00      	nop
    9092:	3708      	adds	r7, #8
    9094:	46bd      	mov	sp, r7
    9096:	bd80      	pop	{r7, pc}
    9098:	00008dc5 	.word	0x00008dc5

0000909c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    909c:	b580      	push	{r7, lr}
    909e:	b082      	sub	sp, #8
    90a0:	af00      	add	r7, sp, #0
    90a2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    90a4:	687b      	ldr	r3, [r7, #4]
    90a6:	681b      	ldr	r3, [r3, #0]
    90a8:	f023 0202 	bic.w	r2, r3, #2
    90ac:	687b      	ldr	r3, [r7, #4]
    90ae:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    90b0:	2103      	movs	r1, #3
    90b2:	6878      	ldr	r0, [r7, #4]
    90b4:	4b02      	ldr	r3, [pc, #8]	; (90c0 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    90b6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    90b8:	bf00      	nop
    90ba:	3708      	adds	r7, #8
    90bc:	46bd      	mov	sp, r7
    90be:	bd80      	pop	{r7, pc}
    90c0:	00008dc5 	.word	0x00008dc5

000090c4 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    90c4:	b480      	push	{r7}
    90c6:	b085      	sub	sp, #20
    90c8:	af00      	add	r7, sp, #0
    90ca:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    90cc:	687b      	ldr	r3, [r7, #4]
    90ce:	681b      	ldr	r3, [r3, #0]
    90d0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    90d2:	68fb      	ldr	r3, [r7, #12]
    90d4:	0edb      	lsrs	r3, r3, #27
    90d6:	f003 0301 	and.w	r3, r3, #1
    90da:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    90dc:	68fb      	ldr	r3, [r7, #12]
    90de:	2b00      	cmp	r3, #0
    90e0:	bf14      	ite	ne
    90e2:	2301      	movne	r3, #1
    90e4:	2300      	moveq	r3, #0
    90e6:	b2db      	uxtb	r3, r3
}
    90e8:	4618      	mov	r0, r3
    90ea:	3714      	adds	r7, #20
    90ec:	46bd      	mov	sp, r7
    90ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    90f2:	4770      	bx	lr

000090f4 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    90f4:	b580      	push	{r7, lr}
    90f6:	b084      	sub	sp, #16
    90f8:	af00      	add	r7, sp, #0
    90fa:	6078      	str	r0, [r7, #4]
    90fc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    90fe:	2103      	movs	r1, #3
    9100:	6878      	ldr	r0, [r7, #4]
    9102:	4b07      	ldr	r3, [pc, #28]	; (9120 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    9104:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    9106:	687b      	ldr	r3, [r7, #4]
    9108:	681b      	ldr	r3, [r3, #0]
    910a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    910c:	68fa      	ldr	r2, [r7, #12]
    910e:	683b      	ldr	r3, [r7, #0]
    9110:	4013      	ands	r3, r2
    9112:	60fb      	str	r3, [r7, #12]
	return tmp;
    9114:	68fb      	ldr	r3, [r7, #12]
}
    9116:	4618      	mov	r0, r3
    9118:	3710      	adds	r7, #16
    911a:	46bd      	mov	sp, r7
    911c:	bd80      	pop	{r7, pc}
    911e:	bf00      	nop
    9120:	00008dc5 	.word	0x00008dc5

00009124 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    9124:	b580      	push	{r7, lr}
    9126:	b082      	sub	sp, #8
    9128:	af00      	add	r7, sp, #0
    912a:	6078      	str	r0, [r7, #4]
    912c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    912e:	687b      	ldr	r3, [r7, #4]
    9130:	683a      	ldr	r2, [r7, #0]
    9132:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9134:	2103      	movs	r1, #3
    9136:	6878      	ldr	r0, [r7, #4]
    9138:	4b02      	ldr	r3, [pc, #8]	; (9144 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    913a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    913c:	bf00      	nop
    913e:	3708      	adds	r7, #8
    9140:	46bd      	mov	sp, r7
    9142:	bd80      	pop	{r7, pc}
    9144:	00008dc5 	.word	0x00008dc5

00009148 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9148:	b580      	push	{r7, lr}
    914a:	b082      	sub	sp, #8
    914c:	af00      	add	r7, sp, #0
    914e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    9150:	687b      	ldr	r3, [r7, #4]
    9152:	681b      	ldr	r3, [r3, #0]
    9154:	f043 0202 	orr.w	r2, r3, #2
    9158:	687b      	ldr	r3, [r7, #4]
    915a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    915c:	2103      	movs	r1, #3
    915e:	6878      	ldr	r0, [r7, #4]
    9160:	4b02      	ldr	r3, [pc, #8]	; (916c <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    9162:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9164:	bf00      	nop
    9166:	3708      	adds	r7, #8
    9168:	46bd      	mov	sp, r7
    916a:	bd80      	pop	{r7, pc}
    916c:	00008e11 	.word	0x00008e11

00009170 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9170:	b580      	push	{r7, lr}
    9172:	b084      	sub	sp, #16
    9174:	af00      	add	r7, sp, #0
    9176:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9178:	2103      	movs	r1, #3
    917a:	6878      	ldr	r0, [r7, #4]
    917c:	4b09      	ldr	r3, [pc, #36]	; (91a4 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    917e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    9180:	687b      	ldr	r3, [r7, #4]
    9182:	681b      	ldr	r3, [r3, #0]
    9184:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    9186:	68fb      	ldr	r3, [r7, #12]
    9188:	085b      	lsrs	r3, r3, #1
    918a:	f003 0301 	and.w	r3, r3, #1
    918e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9190:	68fb      	ldr	r3, [r7, #12]
    9192:	2b00      	cmp	r3, #0
    9194:	bf14      	ite	ne
    9196:	2301      	movne	r3, #1
    9198:	2300      	moveq	r3, #0
    919a:	b2db      	uxtb	r3, r3
}
    919c:	4618      	mov	r0, r3
    919e:	3710      	adds	r7, #16
    91a0:	46bd      	mov	sp, r7
    91a2:	bd80      	pop	{r7, pc}
    91a4:	00008e11 	.word	0x00008e11

000091a8 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    91a8:	b580      	push	{r7, lr}
    91aa:	b082      	sub	sp, #8
    91ac:	af00      	add	r7, sp, #0
    91ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    91b0:	687b      	ldr	r3, [r7, #4]
    91b2:	681b      	ldr	r3, [r3, #0]
    91b4:	f023 0202 	bic.w	r2, r3, #2
    91b8:	687b      	ldr	r3, [r7, #4]
    91ba:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    91bc:	2103      	movs	r1, #3
    91be:	6878      	ldr	r0, [r7, #4]
    91c0:	4b02      	ldr	r3, [pc, #8]	; (91cc <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    91c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    91c4:	bf00      	nop
    91c6:	3708      	adds	r7, #8
    91c8:	46bd      	mov	sp, r7
    91ca:	bd80      	pop	{r7, pc}
    91cc:	00008e11 	.word	0x00008e11

000091d0 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    91d0:	b580      	push	{r7, lr}
    91d2:	b084      	sub	sp, #16
    91d4:	af00      	add	r7, sp, #0
    91d6:	6078      	str	r0, [r7, #4]
    91d8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    91da:	2103      	movs	r1, #3
    91dc:	6878      	ldr	r0, [r7, #4]
    91de:	4b07      	ldr	r3, [pc, #28]	; (91fc <hri_sercomspi_get_CTRLA_reg+0x2c>)
    91e0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    91e2:	687b      	ldr	r3, [r7, #4]
    91e4:	681b      	ldr	r3, [r3, #0]
    91e6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    91e8:	68fa      	ldr	r2, [r7, #12]
    91ea:	683b      	ldr	r3, [r7, #0]
    91ec:	4013      	ands	r3, r2
    91ee:	60fb      	str	r3, [r7, #12]
	return tmp;
    91f0:	68fb      	ldr	r3, [r7, #12]
}
    91f2:	4618      	mov	r0, r3
    91f4:	3710      	adds	r7, #16
    91f6:	46bd      	mov	sp, r7
    91f8:	bd80      	pop	{r7, pc}
    91fa:	bf00      	nop
    91fc:	00008e11 	.word	0x00008e11

00009200 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    9200:	b580      	push	{r7, lr}
    9202:	b082      	sub	sp, #8
    9204:	af00      	add	r7, sp, #0
    9206:	6078      	str	r0, [r7, #4]
    9208:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    920a:	687b      	ldr	r3, [r7, #4]
    920c:	683a      	ldr	r2, [r7, #0]
    920e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9210:	2103      	movs	r1, #3
    9212:	6878      	ldr	r0, [r7, #4]
    9214:	4b02      	ldr	r3, [pc, #8]	; (9220 <hri_sercomspi_write_CTRLA_reg+0x20>)
    9216:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9218:	bf00      	nop
    921a:	3708      	adds	r7, #8
    921c:	46bd      	mov	sp, r7
    921e:	bd80      	pop	{r7, pc}
    9220:	00008e11 	.word	0x00008e11

00009224 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    9224:	b580      	push	{r7, lr}
    9226:	b082      	sub	sp, #8
    9228:	af00      	add	r7, sp, #0
    922a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    922c:	687b      	ldr	r3, [r7, #4]
    922e:	685b      	ldr	r3, [r3, #4]
    9230:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    9234:	687b      	ldr	r3, [r7, #4]
    9236:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9238:	2104      	movs	r1, #4
    923a:	6878      	ldr	r0, [r7, #4]
    923c:	4b02      	ldr	r3, [pc, #8]	; (9248 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    923e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9240:	bf00      	nop
    9242:	3708      	adds	r7, #8
    9244:	46bd      	mov	sp, r7
    9246:	bd80      	pop	{r7, pc}
    9248:	00008dc5 	.word	0x00008dc5

0000924c <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    924c:	b580      	push	{r7, lr}
    924e:	b082      	sub	sp, #8
    9250:	af00      	add	r7, sp, #0
    9252:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    9254:	687b      	ldr	r3, [r7, #4]
    9256:	685b      	ldr	r3, [r3, #4]
    9258:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    925c:	687b      	ldr	r3, [r7, #4]
    925e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9260:	2104      	movs	r1, #4
    9262:	6878      	ldr	r0, [r7, #4]
    9264:	4b02      	ldr	r3, [pc, #8]	; (9270 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    9266:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9268:	bf00      	nop
    926a:	3708      	adds	r7, #8
    926c:	46bd      	mov	sp, r7
    926e:	bd80      	pop	{r7, pc}
    9270:	00008dc5 	.word	0x00008dc5

00009274 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    9274:	b580      	push	{r7, lr}
    9276:	b082      	sub	sp, #8
    9278:	af00      	add	r7, sp, #0
    927a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    927c:	687b      	ldr	r3, [r7, #4]
    927e:	685b      	ldr	r3, [r3, #4]
    9280:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    9284:	687b      	ldr	r3, [r7, #4]
    9286:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9288:	2104      	movs	r1, #4
    928a:	6878      	ldr	r0, [r7, #4]
    928c:	4b02      	ldr	r3, [pc, #8]	; (9298 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    928e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9290:	bf00      	nop
    9292:	3708      	adds	r7, #8
    9294:	46bd      	mov	sp, r7
    9296:	bd80      	pop	{r7, pc}
    9298:	00008dc5 	.word	0x00008dc5

0000929c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    929c:	b580      	push	{r7, lr}
    929e:	b082      	sub	sp, #8
    92a0:	af00      	add	r7, sp, #0
    92a2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    92a4:	687b      	ldr	r3, [r7, #4]
    92a6:	685b      	ldr	r3, [r3, #4]
    92a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    92ac:	687b      	ldr	r3, [r7, #4]
    92ae:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    92b0:	2104      	movs	r1, #4
    92b2:	6878      	ldr	r0, [r7, #4]
    92b4:	4b02      	ldr	r3, [pc, #8]	; (92c0 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    92b6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    92b8:	bf00      	nop
    92ba:	3708      	adds	r7, #8
    92bc:	46bd      	mov	sp, r7
    92be:	bd80      	pop	{r7, pc}
    92c0:	00008dc5 	.word	0x00008dc5

000092c4 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    92c4:	b580      	push	{r7, lr}
    92c6:	b082      	sub	sp, #8
    92c8:	af00      	add	r7, sp, #0
    92ca:	6078      	str	r0, [r7, #4]
    92cc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    92ce:	687b      	ldr	r3, [r7, #4]
    92d0:	685a      	ldr	r2, [r3, #4]
    92d2:	683b      	ldr	r3, [r7, #0]
    92d4:	041b      	lsls	r3, r3, #16
    92d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    92da:	431a      	orrs	r2, r3
    92dc:	687b      	ldr	r3, [r7, #4]
    92de:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    92e0:	2104      	movs	r1, #4
    92e2:	6878      	ldr	r0, [r7, #4]
    92e4:	4b02      	ldr	r3, [pc, #8]	; (92f0 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    92e6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    92e8:	bf00      	nop
    92ea:	3708      	adds	r7, #8
    92ec:	46bd      	mov	sp, r7
    92ee:	bd80      	pop	{r7, pc}
    92f0:	00008dc5 	.word	0x00008dc5

000092f4 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    92f4:	b580      	push	{r7, lr}
    92f6:	b082      	sub	sp, #8
    92f8:	af00      	add	r7, sp, #0
    92fa:	6078      	str	r0, [r7, #4]
    92fc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    92fe:	687b      	ldr	r3, [r7, #4]
    9300:	683a      	ldr	r2, [r7, #0]
    9302:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9304:	2104      	movs	r1, #4
    9306:	6878      	ldr	r0, [r7, #4]
    9308:	4b02      	ldr	r3, [pc, #8]	; (9314 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    930a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    930c:	bf00      	nop
    930e:	3708      	adds	r7, #8
    9310:	46bd      	mov	sp, r7
    9312:	bd80      	pop	{r7, pc}
    9314:	00008dc5 	.word	0x00008dc5

00009318 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    9318:	b580      	push	{r7, lr}
    931a:	b082      	sub	sp, #8
    931c:	af00      	add	r7, sp, #0
    931e:	6078      	str	r0, [r7, #4]
    9320:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    9322:	687b      	ldr	r3, [r7, #4]
    9324:	683a      	ldr	r2, [r7, #0]
    9326:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    9328:	2117      	movs	r1, #23
    932a:	6878      	ldr	r0, [r7, #4]
    932c:	4b02      	ldr	r3, [pc, #8]	; (9338 <hri_sercomspi_write_CTRLB_reg+0x20>)
    932e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9330:	bf00      	nop
    9332:	3708      	adds	r7, #8
    9334:	46bd      	mov	sp, r7
    9336:	bd80      	pop	{r7, pc}
    9338:	00008e11 	.word	0x00008e11

0000933c <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    933c:	b480      	push	{r7}
    933e:	b083      	sub	sp, #12
    9340:	af00      	add	r7, sp, #0
    9342:	6078      	str	r0, [r7, #4]
    9344:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    9346:	687b      	ldr	r3, [r7, #4]
    9348:	683a      	ldr	r2, [r7, #0]
    934a:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    934c:	bf00      	nop
    934e:	370c      	adds	r7, #12
    9350:	46bd      	mov	sp, r7
    9352:	f85d 7b04 	ldr.w	r7, [sp], #4
    9356:	4770      	bx	lr

00009358 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    9358:	b480      	push	{r7}
    935a:	b083      	sub	sp, #12
    935c:	af00      	add	r7, sp, #0
    935e:	6078      	str	r0, [r7, #4]
    9360:	460b      	mov	r3, r1
    9362:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    9364:	687b      	ldr	r3, [r7, #4]
    9366:	78fa      	ldrb	r2, [r7, #3]
    9368:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    936a:	bf00      	nop
    936c:	370c      	adds	r7, #12
    936e:	46bd      	mov	sp, r7
    9370:	f85d 7b04 	ldr.w	r7, [sp], #4
    9374:	4770      	bx	lr
	...

00009378 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    9378:	b580      	push	{r7, lr}
    937a:	b084      	sub	sp, #16
    937c:	af00      	add	r7, sp, #0
    937e:	6078      	str	r0, [r7, #4]
    9380:	460b      	mov	r3, r1
    9382:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    9384:	687b      	ldr	r3, [r7, #4]
    9386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9388:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    938a:	68fb      	ldr	r3, [r7, #12]
    938c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    9390:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    9392:	78fb      	ldrb	r3, [r7, #3]
    9394:	039b      	lsls	r3, r3, #14
    9396:	461a      	mov	r2, r3
    9398:	68fb      	ldr	r3, [r7, #12]
    939a:	4313      	orrs	r3, r2
    939c:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    939e:	687b      	ldr	r3, [r7, #4]
    93a0:	68fa      	ldr	r2, [r7, #12]
    93a2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    93a4:	2104      	movs	r1, #4
    93a6:	6878      	ldr	r0, [r7, #4]
    93a8:	4b02      	ldr	r3, [pc, #8]	; (93b4 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    93aa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    93ac:	bf00      	nop
    93ae:	3710      	adds	r7, #16
    93b0:	46bd      	mov	sp, r7
    93b2:	bd80      	pop	{r7, pc}
    93b4:	00008dc5 	.word	0x00008dc5

000093b8 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    93b8:	b580      	push	{r7, lr}
    93ba:	b082      	sub	sp, #8
    93bc:	af00      	add	r7, sp, #0
    93be:	6078      	str	r0, [r7, #4]
    93c0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    93c2:	687b      	ldr	r3, [r7, #4]
    93c4:	683a      	ldr	r2, [r7, #0]
    93c6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    93c8:	2104      	movs	r1, #4
    93ca:	6878      	ldr	r0, [r7, #4]
    93cc:	4b02      	ldr	r3, [pc, #8]	; (93d8 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    93ce:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    93d0:	bf00      	nop
    93d2:	3708      	adds	r7, #8
    93d4:	46bd      	mov	sp, r7
    93d6:	bd80      	pop	{r7, pc}
    93d8:	00008dc5 	.word	0x00008dc5

000093dc <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    93dc:	b580      	push	{r7, lr}
    93de:	b082      	sub	sp, #8
    93e0:	af00      	add	r7, sp, #0
    93e2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    93e4:	2104      	movs	r1, #4
    93e6:	6878      	ldr	r0, [r7, #4]
    93e8:	4b03      	ldr	r3, [pc, #12]	; (93f8 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    93ea:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    93ec:	687b      	ldr	r3, [r7, #4]
    93ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    93f0:	4618      	mov	r0, r3
    93f2:	3708      	adds	r7, #8
    93f4:	46bd      	mov	sp, r7
    93f6:	bd80      	pop	{r7, pc}
    93f8:	00008dc5 	.word	0x00008dc5

000093fc <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    93fc:	b480      	push	{r7}
    93fe:	b083      	sub	sp, #12
    9400:	af00      	add	r7, sp, #0
    9402:	6078      	str	r0, [r7, #4]
    9404:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    9406:	687b      	ldr	r3, [r7, #4]
    9408:	683a      	ldr	r2, [r7, #0]
    940a:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    940c:	bf00      	nop
    940e:	370c      	adds	r7, #12
    9410:	46bd      	mov	sp, r7
    9412:	f85d 7b04 	ldr.w	r7, [sp], #4
    9416:	4770      	bx	lr

00009418 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    9418:	b580      	push	{r7, lr}
    941a:	b082      	sub	sp, #8
    941c:	af00      	add	r7, sp, #0
    941e:	6078      	str	r0, [r7, #4]
    9420:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    9422:	687b      	ldr	r3, [r7, #4]
    9424:	683a      	ldr	r2, [r7, #0]
    9426:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9428:	2104      	movs	r1, #4
    942a:	6878      	ldr	r0, [r7, #4]
    942c:	4b02      	ldr	r3, [pc, #8]	; (9438 <hri_sercomi2cm_write_DATA_reg+0x20>)
    942e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9430:	bf00      	nop
    9432:	3708      	adds	r7, #8
    9434:	46bd      	mov	sp, r7
    9436:	bd80      	pop	{r7, pc}
    9438:	00008dc5 	.word	0x00008dc5

0000943c <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    943c:	b580      	push	{r7, lr}
    943e:	b082      	sub	sp, #8
    9440:	af00      	add	r7, sp, #0
    9442:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9444:	2104      	movs	r1, #4
    9446:	6878      	ldr	r0, [r7, #4]
    9448:	4b03      	ldr	r3, [pc, #12]	; (9458 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    944a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    944c:	687b      	ldr	r3, [r7, #4]
    944e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    9450:	4618      	mov	r0, r3
    9452:	3708      	adds	r7, #8
    9454:	46bd      	mov	sp, r7
    9456:	bd80      	pop	{r7, pc}
    9458:	00008dc5 	.word	0x00008dc5

0000945c <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    945c:	b480      	push	{r7}
    945e:	b083      	sub	sp, #12
    9460:	af00      	add	r7, sp, #0
    9462:	6078      	str	r0, [r7, #4]
    9464:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    9466:	687b      	ldr	r3, [r7, #4]
    9468:	683a      	ldr	r2, [r7, #0]
    946a:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    946c:	bf00      	nop
    946e:	370c      	adds	r7, #12
    9470:	46bd      	mov	sp, r7
    9472:	f85d 7b04 	ldr.w	r7, [sp], #4
    9476:	4770      	bx	lr

00009478 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    9478:	b480      	push	{r7}
    947a:	b083      	sub	sp, #12
    947c:	af00      	add	r7, sp, #0
    947e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    9480:	687b      	ldr	r3, [r7, #4]
    9482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    9484:	4618      	mov	r0, r3
    9486:	370c      	adds	r7, #12
    9488:	46bd      	mov	sp, r7
    948a:	f85d 7b04 	ldr.w	r7, [sp], #4
    948e:	4770      	bx	lr

00009490 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    9490:	b480      	push	{r7}
    9492:	b083      	sub	sp, #12
    9494:	af00      	add	r7, sp, #0
    9496:	6078      	str	r0, [r7, #4]
    9498:	460b      	mov	r3, r1
    949a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    949c:	687b      	ldr	r3, [r7, #4]
    949e:	78fa      	ldrb	r2, [r7, #3]
    94a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    94a4:	bf00      	nop
    94a6:	370c      	adds	r7, #12
    94a8:	46bd      	mov	sp, r7
    94aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    94ae:	4770      	bx	lr

000094b0 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    94b0:	b480      	push	{r7}
    94b2:	b083      	sub	sp, #12
    94b4:	af00      	add	r7, sp, #0
    94b6:	6078      	str	r0, [r7, #4]
    94b8:	460b      	mov	r3, r1
    94ba:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    94bc:	687b      	ldr	r3, [r7, #4]
    94be:	887a      	ldrh	r2, [r7, #2]
    94c0:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    94c2:	bf00      	nop
    94c4:	370c      	adds	r7, #12
    94c6:	46bd      	mov	sp, r7
    94c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    94cc:	4770      	bx	lr
	...

000094d0 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    94d0:	b580      	push	{r7, lr}
    94d2:	b082      	sub	sp, #8
    94d4:	af00      	add	r7, sp, #0
    94d6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    94d8:	2104      	movs	r1, #4
    94da:	6878      	ldr	r0, [r7, #4]
    94dc:	4b06      	ldr	r3, [pc, #24]	; (94f8 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    94de:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    94e0:	687b      	ldr	r3, [r7, #4]
    94e2:	8b5b      	ldrh	r3, [r3, #26]
    94e4:	b29b      	uxth	r3, r3
    94e6:	091b      	lsrs	r3, r3, #4
    94e8:	b29b      	uxth	r3, r3
    94ea:	f003 0303 	and.w	r3, r3, #3
    94ee:	b29b      	uxth	r3, r3
}
    94f0:	4618      	mov	r0, r3
    94f2:	3708      	adds	r7, #8
    94f4:	46bd      	mov	sp, r7
    94f6:	bd80      	pop	{r7, pc}
    94f8:	00008dc5 	.word	0x00008dc5

000094fc <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    94fc:	b580      	push	{r7, lr}
    94fe:	b082      	sub	sp, #8
    9500:	af00      	add	r7, sp, #0
    9502:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9504:	2104      	movs	r1, #4
    9506:	6878      	ldr	r0, [r7, #4]
    9508:	4b04      	ldr	r3, [pc, #16]	; (951c <hri_sercomi2cm_read_STATUS_reg+0x20>)
    950a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    950c:	687b      	ldr	r3, [r7, #4]
    950e:	8b5b      	ldrh	r3, [r3, #26]
    9510:	b29b      	uxth	r3, r3
}
    9512:	4618      	mov	r0, r3
    9514:	3708      	adds	r7, #8
    9516:	46bd      	mov	sp, r7
    9518:	bd80      	pop	{r7, pc}
    951a:	bf00      	nop
    951c:	00008dc5 	.word	0x00008dc5

00009520 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    9520:	b580      	push	{r7, lr}
    9522:	b082      	sub	sp, #8
    9524:	af00      	add	r7, sp, #0
    9526:	6078      	str	r0, [r7, #4]
    9528:	460b      	mov	r3, r1
    952a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    952c:	687b      	ldr	r3, [r7, #4]
    952e:	887a      	ldrh	r2, [r7, #2]
    9530:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9532:	2104      	movs	r1, #4
    9534:	6878      	ldr	r0, [r7, #4]
    9536:	4b03      	ldr	r3, [pc, #12]	; (9544 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    9538:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    953a:	bf00      	nop
    953c:	3708      	adds	r7, #8
    953e:	46bd      	mov	sp, r7
    9540:	bd80      	pop	{r7, pc}
    9542:	bf00      	nop
    9544:	00008dc5 	.word	0x00008dc5

00009548 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    9548:	b4b0      	push	{r4, r5, r7}
    954a:	b08d      	sub	sp, #52	; 0x34
    954c:	af00      	add	r7, sp, #0
    954e:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    9550:	4b13      	ldr	r3, [pc, #76]	; (95a0 <_sercom_get_hardware_index+0x58>)
    9552:	f107 040c 	add.w	r4, r7, #12
    9556:	461d      	mov	r5, r3
    9558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    955a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    955c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9560:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9564:	2300      	movs	r3, #0
    9566:	62fb      	str	r3, [r7, #44]	; 0x2c
    9568:	e010      	b.n	958c <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    956c:	009b      	lsls	r3, r3, #2
    956e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    9572:	4413      	add	r3, r2
    9574:	f853 3c24 	ldr.w	r3, [r3, #-36]
    9578:	461a      	mov	r2, r3
    957a:	687b      	ldr	r3, [r7, #4]
    957c:	429a      	cmp	r2, r3
    957e:	d102      	bne.n	9586 <_sercom_get_hardware_index+0x3e>
			return i;
    9580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9582:	b2db      	uxtb	r3, r3
    9584:	e006      	b.n	9594 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9588:	3301      	adds	r3, #1
    958a:	62fb      	str	r3, [r7, #44]	; 0x2c
    958c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    958e:	2b07      	cmp	r3, #7
    9590:	d9eb      	bls.n	956a <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    9592:	2300      	movs	r3, #0
}
    9594:	4618      	mov	r0, r3
    9596:	3734      	adds	r7, #52	; 0x34
    9598:	46bd      	mov	sp, r7
    959a:	bcb0      	pop	{r4, r5, r7}
    959c:	4770      	bx	lr
    959e:	bf00      	nop
    95a0:	0001a86c 	.word	0x0001a86c

000095a4 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    95a4:	b480      	push	{r7}
    95a6:	b083      	sub	sp, #12
    95a8:	af00      	add	r7, sp, #0
    95aa:	6078      	str	r0, [r7, #4]
    95ac:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    95ae:	687b      	ldr	r3, [r7, #4]
    95b0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    95b4:	d102      	bne.n	95bc <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    95b6:	4a0b      	ldr	r2, [pc, #44]	; (95e4 <_sercom_init_irq_param+0x40>)
    95b8:	683b      	ldr	r3, [r7, #0]
    95ba:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    95bc:	687b      	ldr	r3, [r7, #4]
    95be:	4a0a      	ldr	r2, [pc, #40]	; (95e8 <_sercom_init_irq_param+0x44>)
    95c0:	4293      	cmp	r3, r2
    95c2:	d102      	bne.n	95ca <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    95c4:	4a09      	ldr	r2, [pc, #36]	; (95ec <_sercom_init_irq_param+0x48>)
    95c6:	683b      	ldr	r3, [r7, #0]
    95c8:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    95ca:	687b      	ldr	r3, [r7, #4]
    95cc:	4a08      	ldr	r2, [pc, #32]	; (95f0 <_sercom_init_irq_param+0x4c>)
    95ce:	4293      	cmp	r3, r2
    95d0:	d102      	bne.n	95d8 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    95d2:	4a08      	ldr	r2, [pc, #32]	; (95f4 <_sercom_init_irq_param+0x50>)
    95d4:	683b      	ldr	r3, [r7, #0]
    95d6:	6013      	str	r3, [r2, #0]
	}
}
    95d8:	bf00      	nop
    95da:	370c      	adds	r7, #12
    95dc:	46bd      	mov	sp, r7
    95de:	f85d 7b04 	ldr.w	r7, [sp], #4
    95e2:	4770      	bx	lr
    95e4:	2000238c 	.word	0x2000238c
    95e8:	43000400 	.word	0x43000400
    95ec:	20002390 	.word	0x20002390
    95f0:	43000c00 	.word	0x43000c00
    95f4:	20002394 	.word	0x20002394

000095f8 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    95f8:	b580      	push	{r7, lr}
    95fa:	b084      	sub	sp, #16
    95fc:	af00      	add	r7, sp, #0
    95fe:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    9600:	6878      	ldr	r0, [r7, #4]
    9602:	4b13      	ldr	r3, [pc, #76]	; (9650 <_get_i2cm_index+0x58>)
    9604:	4798      	blx	r3
    9606:	4603      	mov	r3, r0
    9608:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    960a:	2300      	movs	r3, #0
    960c:	73fb      	strb	r3, [r7, #15]
    960e:	e010      	b.n	9632 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    9610:	7bfa      	ldrb	r2, [r7, #15]
    9612:	4910      	ldr	r1, [pc, #64]	; (9654 <_get_i2cm_index+0x5c>)
    9614:	4613      	mov	r3, r2
    9616:	005b      	lsls	r3, r3, #1
    9618:	4413      	add	r3, r2
    961a:	00db      	lsls	r3, r3, #3
    961c:	440b      	add	r3, r1
    961e:	781b      	ldrb	r3, [r3, #0]
    9620:	7bba      	ldrb	r2, [r7, #14]
    9622:	429a      	cmp	r2, r3
    9624:	d102      	bne.n	962c <_get_i2cm_index+0x34>
			return i;
    9626:	f997 300f 	ldrsb.w	r3, [r7, #15]
    962a:	e00d      	b.n	9648 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    962c:	7bfb      	ldrb	r3, [r7, #15]
    962e:	3301      	adds	r3, #1
    9630:	73fb      	strb	r3, [r7, #15]
    9632:	7bfb      	ldrb	r3, [r7, #15]
    9634:	2b01      	cmp	r3, #1
    9636:	d9eb      	bls.n	9610 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    9638:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    963c:	4906      	ldr	r1, [pc, #24]	; (9658 <_get_i2cm_index+0x60>)
    963e:	2000      	movs	r0, #0
    9640:	4b06      	ldr	r3, [pc, #24]	; (965c <_get_i2cm_index+0x64>)
    9642:	4798      	blx	r3
	return -1;
    9644:	f04f 33ff 	mov.w	r3, #4294967295
}
    9648:	4618      	mov	r0, r3
    964a:	3710      	adds	r7, #16
    964c:	46bd      	mov	sp, r7
    964e:	bd80      	pop	{r7, pc}
    9650:	00009549 	.word	0x00009549
    9654:	2000007c 	.word	0x2000007c
    9658:	0001a850 	.word	0x0001a850
    965c:	00006241 	.word	0x00006241

00009660 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    9660:	b580      	push	{r7, lr}
    9662:	b082      	sub	sp, #8
    9664:	af00      	add	r7, sp, #0
    9666:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    9668:	2103      	movs	r1, #3
    966a:	6878      	ldr	r0, [r7, #4]
    966c:	4b02      	ldr	r3, [pc, #8]	; (9678 <_sercom_i2c_send_stop+0x18>)
    966e:	4798      	blx	r3
}
    9670:	bf00      	nop
    9672:	3708      	adds	r7, #8
    9674:	46bd      	mov	sp, r7
    9676:	bd80      	pop	{r7, pc}
    9678:	000092c5 	.word	0x000092c5

0000967c <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    967c:	b590      	push	{r4, r7, lr}
    967e:	b087      	sub	sp, #28
    9680:	af00      	add	r7, sp, #0
    9682:	60f8      	str	r0, [r7, #12]
    9684:	60b9      	str	r1, [r7, #8]
    9686:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    9688:	68f8      	ldr	r0, [r7, #12]
    968a:	4b7d      	ldr	r3, [pc, #500]	; (9880 <_sercom_i2c_sync_analyse_flags+0x204>)
    968c:	4798      	blx	r3
    968e:	4603      	mov	r3, r0
    9690:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    9692:	68f8      	ldr	r0, [r7, #12]
    9694:	4b7b      	ldr	r3, [pc, #492]	; (9884 <_sercom_i2c_sync_analyse_flags+0x208>)
    9696:	4798      	blx	r3
    9698:	4603      	mov	r3, r0
    969a:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    969c:	68bb      	ldr	r3, [r7, #8]
    969e:	f003 0301 	and.w	r3, r3, #1
    96a2:	2b00      	cmp	r3, #0
    96a4:	f000 8095 	beq.w	97d2 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    96a8:	8a7b      	ldrh	r3, [r7, #18]
    96aa:	f003 0302 	and.w	r3, r3, #2
    96ae:	2b00      	cmp	r3, #0
    96b0:	d01d      	beq.n	96ee <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    96b2:	68f8      	ldr	r0, [r7, #12]
    96b4:	4b74      	ldr	r3, [pc, #464]	; (9888 <_sercom_i2c_sync_analyse_flags+0x20c>)
    96b6:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    96b8:	687b      	ldr	r3, [r7, #4]
    96ba:	885b      	ldrh	r3, [r3, #2]
    96bc:	b29b      	uxth	r3, r3
    96be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    96c2:	b29a      	uxth	r2, r3
    96c4:	687b      	ldr	r3, [r7, #4]
    96c6:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    96c8:	687b      	ldr	r3, [r7, #4]
    96ca:	885b      	ldrh	r3, [r3, #2]
    96cc:	b29b      	uxth	r3, r3
    96ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    96d2:	b29a      	uxth	r2, r3
    96d4:	687b      	ldr	r3, [r7, #4]
    96d6:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    96d8:	8a7b      	ldrh	r3, [r7, #18]
    96da:	f003 0301 	and.w	r3, r3, #1
    96de:	2b00      	cmp	r3, #0
    96e0:	d002      	beq.n	96e8 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    96e2:	f06f 0304 	mvn.w	r3, #4
    96e6:	e0c6      	b.n	9876 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    96e8:	f06f 0303 	mvn.w	r3, #3
    96ec:	e0c3      	b.n	9876 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    96ee:	8a7b      	ldrh	r3, [r7, #18]
    96f0:	f003 0304 	and.w	r3, r3, #4
    96f4:	2b00      	cmp	r3, #0
    96f6:	d01f      	beq.n	9738 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    96f8:	687b      	ldr	r3, [r7, #4]
    96fa:	685b      	ldr	r3, [r3, #4]
    96fc:	2b00      	cmp	r3, #0
    96fe:	dd07      	ble.n	9710 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    9700:	687b      	ldr	r3, [r7, #4]
    9702:	885b      	ldrh	r3, [r3, #2]
    9704:	b29b      	uxth	r3, r3
    9706:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    970a:	b29a      	uxth	r2, r3
    970c:	687b      	ldr	r3, [r7, #4]
    970e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    9710:	687b      	ldr	r3, [r7, #4]
    9712:	885b      	ldrh	r3, [r3, #2]
    9714:	b29b      	uxth	r3, r3
    9716:	b21b      	sxth	r3, r3
    9718:	2b00      	cmp	r3, #0
    971a:	da02      	bge.n	9722 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    971c:	68f8      	ldr	r0, [r7, #12]
    971e:	4b5b      	ldr	r3, [pc, #364]	; (988c <_sercom_i2c_sync_analyse_flags+0x210>)
    9720:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    9722:	687b      	ldr	r3, [r7, #4]
    9724:	885b      	ldrh	r3, [r3, #2]
    9726:	b29b      	uxth	r3, r3
    9728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    972c:	b29a      	uxth	r2, r3
    972e:	687b      	ldr	r3, [r7, #4]
    9730:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    9732:	f06f 0301 	mvn.w	r3, #1
    9736:	e09e      	b.n	9876 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    9738:	687b      	ldr	r3, [r7, #4]
    973a:	885b      	ldrh	r3, [r3, #2]
    973c:	b29b      	uxth	r3, r3
    973e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9742:	2b00      	cmp	r3, #0
    9744:	d01c      	beq.n	9780 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    9746:	687b      	ldr	r3, [r7, #4]
    9748:	881b      	ldrh	r3, [r3, #0]
    974a:	121b      	asrs	r3, r3, #8
    974c:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    974e:	f003 0406 	and.w	r4, r3, #6
    9752:	68f8      	ldr	r0, [r7, #12]
    9754:	4b4e      	ldr	r3, [pc, #312]	; (9890 <_sercom_i2c_sync_analyse_flags+0x214>)
    9756:	4798      	blx	r3
    9758:	4603      	mov	r3, r0
    975a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    975e:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    9760:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    9764:	4619      	mov	r1, r3
    9766:	68f8      	ldr	r0, [r7, #12]
    9768:	4b4a      	ldr	r3, [pc, #296]	; (9894 <_sercom_i2c_sync_analyse_flags+0x218>)
    976a:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    976c:	687b      	ldr	r3, [r7, #4]
    976e:	885b      	ldrh	r3, [r3, #2]
    9770:	b29b      	uxth	r3, r3
    9772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    9776:	b29a      	uxth	r2, r3
    9778:	687b      	ldr	r3, [r7, #4]
    977a:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    977c:	2300      	movs	r3, #0
    977e:	e07a      	b.n	9876 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    9780:	687b      	ldr	r3, [r7, #4]
    9782:	685b      	ldr	r3, [r3, #4]
    9784:	2b00      	cmp	r3, #0
    9786:	d111      	bne.n	97ac <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    9788:	687b      	ldr	r3, [r7, #4]
    978a:	885b      	ldrh	r3, [r3, #2]
    978c:	b29b      	uxth	r3, r3
    978e:	b21b      	sxth	r3, r3
    9790:	2b00      	cmp	r3, #0
    9792:	da02      	bge.n	979a <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    9794:	68f8      	ldr	r0, [r7, #12]
    9796:	4b3d      	ldr	r3, [pc, #244]	; (988c <_sercom_i2c_sync_analyse_flags+0x210>)
    9798:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    979a:	687b      	ldr	r3, [r7, #4]
    979c:	885b      	ldrh	r3, [r3, #2]
    979e:	b29b      	uxth	r3, r3
    97a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    97a4:	b29a      	uxth	r2, r3
    97a6:	687b      	ldr	r3, [r7, #4]
    97a8:	805a      	strh	r2, [r3, #2]
    97aa:	e010      	b.n	97ce <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    97ac:	687b      	ldr	r3, [r7, #4]
    97ae:	689b      	ldr	r3, [r3, #8]
    97b0:	781b      	ldrb	r3, [r3, #0]
    97b2:	4619      	mov	r1, r3
    97b4:	68f8      	ldr	r0, [r7, #12]
    97b6:	4b38      	ldr	r3, [pc, #224]	; (9898 <_sercom_i2c_sync_analyse_flags+0x21c>)
    97b8:	4798      	blx	r3
				msg->buffer++;
    97ba:	687b      	ldr	r3, [r7, #4]
    97bc:	689b      	ldr	r3, [r3, #8]
    97be:	1c5a      	adds	r2, r3, #1
    97c0:	687b      	ldr	r3, [r7, #4]
    97c2:	609a      	str	r2, [r3, #8]
				msg->len--;
    97c4:	687b      	ldr	r3, [r7, #4]
    97c6:	685b      	ldr	r3, [r3, #4]
    97c8:	1e5a      	subs	r2, r3, #1
    97ca:	687b      	ldr	r3, [r7, #4]
    97cc:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    97ce:	2300      	movs	r3, #0
    97d0:	e051      	b.n	9876 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    97d2:	68bb      	ldr	r3, [r7, #8]
    97d4:	f003 0302 	and.w	r3, r3, #2
    97d8:	2b00      	cmp	r3, #0
    97da:	d04b      	beq.n	9874 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    97dc:	687b      	ldr	r3, [r7, #4]
    97de:	685b      	ldr	r3, [r3, #4]
    97e0:	2b00      	cmp	r3, #0
    97e2:	d041      	beq.n	9868 <_sercom_i2c_sync_analyse_flags+0x1ec>
    97e4:	8a7b      	ldrh	r3, [r7, #18]
    97e6:	f003 0304 	and.w	r3, r3, #4
    97ea:	2b00      	cmp	r3, #0
    97ec:	d13c      	bne.n	9868 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    97ee:	687b      	ldr	r3, [r7, #4]
    97f0:	685b      	ldr	r3, [r3, #4]
    97f2:	1e5a      	subs	r2, r3, #1
    97f4:	687b      	ldr	r3, [r7, #4]
    97f6:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    97f8:	687b      	ldr	r3, [r7, #4]
    97fa:	685b      	ldr	r3, [r3, #4]
    97fc:	2b00      	cmp	r3, #0
    97fe:	d102      	bne.n	9806 <_sercom_i2c_sync_analyse_flags+0x18a>
    9800:	697b      	ldr	r3, [r7, #20]
    9802:	2b00      	cmp	r3, #0
    9804:	d006      	beq.n	9814 <_sercom_i2c_sync_analyse_flags+0x198>
    9806:	687b      	ldr	r3, [r7, #4]
    9808:	685b      	ldr	r3, [r3, #4]
    980a:	2b01      	cmp	r3, #1
    980c:	d105      	bne.n	981a <_sercom_i2c_sync_analyse_flags+0x19e>
    980e:	697b      	ldr	r3, [r7, #20]
    9810:	2b00      	cmp	r3, #0
    9812:	d002      	beq.n	981a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    9814:	68f8      	ldr	r0, [r7, #12]
    9816:	4b21      	ldr	r3, [pc, #132]	; (989c <_sercom_i2c_sync_analyse_flags+0x220>)
    9818:	4798      	blx	r3
			}

			if (msg->len == 0) {
    981a:	687b      	ldr	r3, [r7, #4]
    981c:	685b      	ldr	r3, [r3, #4]
    981e:	2b00      	cmp	r3, #0
    9820:	d113      	bne.n	984a <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    9822:	687b      	ldr	r3, [r7, #4]
    9824:	885b      	ldrh	r3, [r3, #2]
    9826:	b29b      	uxth	r3, r3
    9828:	b21b      	sxth	r3, r3
    982a:	2b00      	cmp	r3, #0
    982c:	da05      	bge.n	983a <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    982e:	68f8      	ldr	r0, [r7, #12]
    9830:	4b1b      	ldr	r3, [pc, #108]	; (98a0 <_sercom_i2c_sync_analyse_flags+0x224>)
    9832:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    9834:	68f8      	ldr	r0, [r7, #12]
    9836:	4b15      	ldr	r3, [pc, #84]	; (988c <_sercom_i2c_sync_analyse_flags+0x210>)
    9838:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    983a:	687b      	ldr	r3, [r7, #4]
    983c:	885b      	ldrh	r3, [r3, #2]
    983e:	b29b      	uxth	r3, r3
    9840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9844:	b29a      	uxth	r2, r3
    9846:	687b      	ldr	r3, [r7, #4]
    9848:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    984a:	687b      	ldr	r3, [r7, #4]
    984c:	689c      	ldr	r4, [r3, #8]
    984e:	1c62      	adds	r2, r4, #1
    9850:	687b      	ldr	r3, [r7, #4]
    9852:	609a      	str	r2, [r3, #8]
    9854:	68f8      	ldr	r0, [r7, #12]
    9856:	4b13      	ldr	r3, [pc, #76]	; (98a4 <_sercom_i2c_sync_analyse_flags+0x228>)
    9858:	4798      	blx	r3
    985a:	4603      	mov	r3, r0
    985c:	b2db      	uxtb	r3, r3
    985e:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    9860:	68f8      	ldr	r0, [r7, #12]
    9862:	4b11      	ldr	r3, [pc, #68]	; (98a8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    9864:	4798      	blx	r3
    9866:	e005      	b.n	9874 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    9868:	68f8      	ldr	r0, [r7, #12]
    986a:	4b0f      	ldr	r3, [pc, #60]	; (98a8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    986c:	4798      	blx	r3
			return I2C_NACK;
    986e:	f06f 0301 	mvn.w	r3, #1
    9872:	e000      	b.n	9876 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    9874:	2300      	movs	r3, #0
}
    9876:	4618      	mov	r0, r3
    9878:	371c      	adds	r7, #28
    987a:	46bd      	mov	sp, r7
    987c:	bd90      	pop	{r4, r7, pc}
    987e:	bf00      	nop
    9880:	000090c5 	.word	0x000090c5
    9884:	000094fd 	.word	0x000094fd
    9888:	00008e5d 	.word	0x00008e5d
    988c:	00009661 	.word	0x00009661
    9890:	000093dd 	.word	0x000093dd
    9894:	000093b9 	.word	0x000093b9
    9898:	00009419 	.word	0x00009419
    989c:	00009275 	.word	0x00009275
    98a0:	0000924d 	.word	0x0000924d
    98a4:	0000943d 	.word	0x0000943d
    98a8:	00008e77 	.word	0x00008e77

000098ac <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    98ac:	b580      	push	{r7, lr}
    98ae:	b086      	sub	sp, #24
    98b0:	af00      	add	r7, sp, #0
    98b2:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    98b4:	687b      	ldr	r3, [r7, #4]
    98b6:	691b      	ldr	r3, [r3, #16]
    98b8:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    98ba:	6938      	ldr	r0, [r7, #16]
    98bc:	4b37      	ldr	r3, [pc, #220]	; (999c <_sercom_i2c_m_irq_handler+0xf0>)
    98be:	4798      	blx	r3
    98c0:	4603      	mov	r3, r0
    98c2:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    98c4:	2300      	movs	r3, #0
    98c6:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    98c8:	687b      	ldr	r3, [r7, #4]
    98ca:	2b00      	cmp	r3, #0
    98cc:	bf14      	ite	ne
    98ce:	2301      	movne	r3, #1
    98d0:	2300      	moveq	r3, #0
    98d2:	b2db      	uxtb	r3, r3
    98d4:	f240 422a 	movw	r2, #1066	; 0x42a
    98d8:	4931      	ldr	r1, [pc, #196]	; (99a0 <_sercom_i2c_m_irq_handler+0xf4>)
    98da:	4618      	mov	r0, r3
    98dc:	4b31      	ldr	r3, [pc, #196]	; (99a4 <_sercom_i2c_m_irq_handler+0xf8>)
    98de:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    98e0:	687b      	ldr	r3, [r7, #4]
    98e2:	691b      	ldr	r3, [r3, #16]
    98e4:	2b00      	cmp	r3, #0
    98e6:	bf14      	ite	ne
    98e8:	2301      	movne	r3, #1
    98ea:	2300      	moveq	r3, #0
    98ec:	b2db      	uxtb	r3, r3
    98ee:	f240 422b 	movw	r2, #1067	; 0x42b
    98f2:	492b      	ldr	r1, [pc, #172]	; (99a0 <_sercom_i2c_m_irq_handler+0xf4>)
    98f4:	4618      	mov	r0, r3
    98f6:	4b2b      	ldr	r3, [pc, #172]	; (99a4 <_sercom_i2c_m_irq_handler+0xf8>)
    98f8:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    98fa:	bf00      	nop
    98fc:	68fb      	ldr	r3, [r7, #12]
    98fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9902:	2b00      	cmp	r3, #0
    9904:	d126      	bne.n	9954 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    9906:	687b      	ldr	r3, [r7, #4]
    9908:	461a      	mov	r2, r3
    990a:	68f9      	ldr	r1, [r7, #12]
    990c:	6938      	ldr	r0, [r7, #16]
    990e:	4b26      	ldr	r3, [pc, #152]	; (99a8 <_sercom_i2c_m_irq_handler+0xfc>)
    9910:	4798      	blx	r3
    9912:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    9914:	697b      	ldr	r3, [r7, #20]
    9916:	2b00      	cmp	r3, #0
    9918:	d11b      	bne.n	9952 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    991a:	68fb      	ldr	r3, [r7, #12]
    991c:	f003 0301 	and.w	r3, r3, #1
    9920:	2b00      	cmp	r3, #0
    9922:	d008      	beq.n	9936 <_sercom_i2c_m_irq_handler+0x8a>
    9924:	687b      	ldr	r3, [r7, #4]
    9926:	699b      	ldr	r3, [r3, #24]
    9928:	2b00      	cmp	r3, #0
    992a:	d004      	beq.n	9936 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    992c:	687b      	ldr	r3, [r7, #4]
    992e:	699b      	ldr	r3, [r3, #24]
    9930:	6878      	ldr	r0, [r7, #4]
    9932:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    9934:	e02e      	b.n	9994 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    9936:	68fb      	ldr	r3, [r7, #12]
    9938:	f003 0302 	and.w	r3, r3, #2
    993c:	2b00      	cmp	r3, #0
    993e:	d029      	beq.n	9994 <_sercom_i2c_m_irq_handler+0xe8>
    9940:	687b      	ldr	r3, [r7, #4]
    9942:	69db      	ldr	r3, [r3, #28]
    9944:	2b00      	cmp	r3, #0
    9946:	d025      	beq.n	9994 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    9948:	687b      	ldr	r3, [r7, #4]
    994a:	69db      	ldr	r3, [r3, #28]
    994c:	6878      	ldr	r0, [r7, #4]
    994e:	4798      	blx	r3
		return;
    9950:	e020      	b.n	9994 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    9952:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    9954:	687b      	ldr	r3, [r7, #4]
    9956:	885b      	ldrh	r3, [r3, #2]
    9958:	b29b      	uxth	r3, r3
    995a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    995e:	b29a      	uxth	r2, r3
    9960:	687b      	ldr	r3, [r7, #4]
    9962:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    9964:	687b      	ldr	r3, [r7, #4]
    9966:	695b      	ldr	r3, [r3, #20]
    9968:	2b00      	cmp	r3, #0
    996a:	d014      	beq.n	9996 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    996c:	697b      	ldr	r3, [r7, #20]
    996e:	2b00      	cmp	r3, #0
    9970:	d005      	beq.n	997e <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    9972:	687b      	ldr	r3, [r7, #4]
    9974:	695b      	ldr	r3, [r3, #20]
    9976:	6979      	ldr	r1, [r7, #20]
    9978:	6878      	ldr	r0, [r7, #4]
    997a:	4798      	blx	r3
    997c:	e005      	b.n	998a <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    997e:	687b      	ldr	r3, [r7, #4]
    9980:	695b      	ldr	r3, [r3, #20]
    9982:	f06f 0104 	mvn.w	r1, #4
    9986:	6878      	ldr	r0, [r7, #4]
    9988:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    998a:	2180      	movs	r1, #128	; 0x80
    998c:	6938      	ldr	r0, [r7, #16]
    998e:	4b07      	ldr	r3, [pc, #28]	; (99ac <_sercom_i2c_m_irq_handler+0x100>)
    9990:	4798      	blx	r3
    9992:	e000      	b.n	9996 <_sercom_i2c_m_irq_handler+0xea>
		return;
    9994:	bf00      	nop
	}
}
    9996:	3718      	adds	r7, #24
    9998:	46bd      	mov	sp, r7
    999a:	bd80      	pop	{r7, pc}
    999c:	00008e91 	.word	0x00008e91
    99a0:	0001a850 	.word	0x0001a850
    99a4:	00006241 	.word	0x00006241
    99a8:	0000967d 	.word	0x0000967d
    99ac:	00008eab 	.word	0x00008eab

000099b0 <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    99b0:	b580      	push	{r7, lr}
    99b2:	b082      	sub	sp, #8
    99b4:	af00      	add	r7, sp, #0
    99b6:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    99b8:	687b      	ldr	r3, [r7, #4]
    99ba:	2b00      	cmp	r3, #0
    99bc:	bf14      	ite	ne
    99be:	2301      	movne	r3, #1
    99c0:	2300      	moveq	r3, #0
    99c2:	b2db      	uxtb	r3, r3
    99c4:	f44f 628a 	mov.w	r2, #1104	; 0x450
    99c8:	4906      	ldr	r1, [pc, #24]	; (99e4 <_i2c_m_async_enable+0x34>)
    99ca:	4618      	mov	r0, r3
    99cc:	4b06      	ldr	r3, [pc, #24]	; (99e8 <_i2c_m_async_enable+0x38>)
    99ce:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    99d0:	687b      	ldr	r3, [r7, #4]
    99d2:	691b      	ldr	r3, [r3, #16]
    99d4:	4618      	mov	r0, r3
    99d6:	4b05      	ldr	r3, [pc, #20]	; (99ec <_i2c_m_async_enable+0x3c>)
    99d8:	4798      	blx	r3
    99da:	4603      	mov	r3, r0
}
    99dc:	4618      	mov	r0, r3
    99de:	3708      	adds	r7, #8
    99e0:	46bd      	mov	sp, r7
    99e2:	bd80      	pop	{r7, pc}
    99e4:	0001a850 	.word	0x0001a850
    99e8:	00006241 	.word	0x00006241
    99ec:	00009d41 	.word	0x00009d41

000099f0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    99f0:	b580      	push	{r7, lr}
    99f2:	b082      	sub	sp, #8
    99f4:	af00      	add	r7, sp, #0
    99f6:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    99f8:	6878      	ldr	r0, [r7, #4]
    99fa:	4b05      	ldr	r3, [pc, #20]	; (9a10 <_sercom_get_irq_num+0x20>)
    99fc:	4798      	blx	r3
    99fe:	4603      	mov	r3, r0
    9a00:	009b      	lsls	r3, r3, #2
    9a02:	b2db      	uxtb	r3, r3
    9a04:	332e      	adds	r3, #46	; 0x2e
    9a06:	b2db      	uxtb	r3, r3
}
    9a08:	4618      	mov	r0, r3
    9a0a:	3708      	adds	r7, #8
    9a0c:	46bd      	mov	sp, r7
    9a0e:	bd80      	pop	{r7, pc}
    9a10:	00009549 	.word	0x00009549

00009a14 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    9a14:	b580      	push	{r7, lr}
    9a16:	b086      	sub	sp, #24
    9a18:	af00      	add	r7, sp, #0
    9a1a:	6078      	str	r0, [r7, #4]
    9a1c:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    9a1e:	687b      	ldr	r3, [r7, #4]
    9a20:	2b00      	cmp	r3, #0
    9a22:	bf14      	ite	ne
    9a24:	2301      	movne	r3, #1
    9a26:	2300      	moveq	r3, #0
    9a28:	b2db      	uxtb	r3, r3
    9a2a:	f240 429e 	movw	r2, #1182	; 0x49e
    9a2e:	491d      	ldr	r1, [pc, #116]	; (9aa4 <_i2c_m_async_init+0x90>)
    9a30:	4618      	mov	r0, r3
    9a32:	4b1d      	ldr	r3, [pc, #116]	; (9aa8 <_i2c_m_async_init+0x94>)
    9a34:	4798      	blx	r3

	i2c_dev->hw = hw;
    9a36:	687b      	ldr	r3, [r7, #4]
    9a38:	683a      	ldr	r2, [r7, #0]
    9a3a:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    9a3c:	687b      	ldr	r3, [r7, #4]
    9a3e:	6839      	ldr	r1, [r7, #0]
    9a40:	4618      	mov	r0, r3
    9a42:	4b1a      	ldr	r3, [pc, #104]	; (9aac <_i2c_m_async_init+0x98>)
    9a44:	4798      	blx	r3
    9a46:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    9a48:	68fb      	ldr	r3, [r7, #12]
    9a4a:	2b00      	cmp	r3, #0
    9a4c:	d001      	beq.n	9a52 <_i2c_m_async_init+0x3e>
		return init_status;
    9a4e:	68fb      	ldr	r3, [r7, #12]
    9a50:	e024      	b.n	9a9c <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    9a52:	6879      	ldr	r1, [r7, #4]
    9a54:	6838      	ldr	r0, [r7, #0]
    9a56:	4b16      	ldr	r3, [pc, #88]	; (9ab0 <_i2c_m_async_init+0x9c>)
    9a58:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    9a5a:	6838      	ldr	r0, [r7, #0]
    9a5c:	4b15      	ldr	r3, [pc, #84]	; (9ab4 <_i2c_m_async_init+0xa0>)
    9a5e:	4798      	blx	r3
    9a60:	4603      	mov	r3, r0
    9a62:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9a64:	2300      	movs	r3, #0
    9a66:	613b      	str	r3, [r7, #16]
    9a68:	e014      	b.n	9a94 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    9a6a:	7dfb      	ldrb	r3, [r7, #23]
    9a6c:	b21b      	sxth	r3, r3
    9a6e:	4618      	mov	r0, r3
    9a70:	4b11      	ldr	r3, [pc, #68]	; (9ab8 <_i2c_m_async_init+0xa4>)
    9a72:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    9a74:	7dfb      	ldrb	r3, [r7, #23]
    9a76:	b21b      	sxth	r3, r3
    9a78:	4618      	mov	r0, r3
    9a7a:	4b10      	ldr	r3, [pc, #64]	; (9abc <_i2c_m_async_init+0xa8>)
    9a7c:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    9a7e:	7dfb      	ldrb	r3, [r7, #23]
    9a80:	b21b      	sxth	r3, r3
    9a82:	4618      	mov	r0, r3
    9a84:	4b0e      	ldr	r3, [pc, #56]	; (9ac0 <_i2c_m_async_init+0xac>)
    9a86:	4798      	blx	r3
		irq++;
    9a88:	7dfb      	ldrb	r3, [r7, #23]
    9a8a:	3301      	adds	r3, #1
    9a8c:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9a8e:	693b      	ldr	r3, [r7, #16]
    9a90:	3301      	adds	r3, #1
    9a92:	613b      	str	r3, [r7, #16]
    9a94:	693b      	ldr	r3, [r7, #16]
    9a96:	2b03      	cmp	r3, #3
    9a98:	d9e7      	bls.n	9a6a <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    9a9a:	2300      	movs	r3, #0
}
    9a9c:	4618      	mov	r0, r3
    9a9e:	3718      	adds	r7, #24
    9aa0:	46bd      	mov	sp, r7
    9aa2:	bd80      	pop	{r7, pc}
    9aa4:	0001a850 	.word	0x0001a850
    9aa8:	00006241 	.word	0x00006241
    9aac:	00009dcd 	.word	0x00009dcd
    9ab0:	000095a5 	.word	0x000095a5
    9ab4:	000099f1 	.word	0x000099f1
    9ab8:	00008d45 	.word	0x00008d45
    9abc:	00008d89 	.word	0x00008d89
    9ac0:	00008d09 	.word	0x00008d09

00009ac4 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    9ac4:	b590      	push	{r4, r7, lr}
    9ac6:	b087      	sub	sp, #28
    9ac8:	af00      	add	r7, sp, #0
    9aca:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    9acc:	687b      	ldr	r3, [r7, #4]
    9ace:	691b      	ldr	r3, [r3, #16]
    9ad0:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    9ad2:	687b      	ldr	r3, [r7, #4]
    9ad4:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    9ad6:	6978      	ldr	r0, [r7, #20]
    9ad8:	4b33      	ldr	r3, [pc, #204]	; (9ba8 <_sercom_i2c_send_address+0xe4>)
    9ada:	4798      	blx	r3
    9adc:	4603      	mov	r3, r0
    9ade:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    9ae0:	687b      	ldr	r3, [r7, #4]
    9ae2:	2b00      	cmp	r3, #0
    9ae4:	bf14      	ite	ne
    9ae6:	2301      	movne	r3, #1
    9ae8:	2300      	moveq	r3, #0
    9aea:	b2db      	uxtb	r3, r3
    9aec:	f240 42cc 	movw	r2, #1228	; 0x4cc
    9af0:	492e      	ldr	r1, [pc, #184]	; (9bac <_sercom_i2c_send_address+0xe8>)
    9af2:	4618      	mov	r0, r3
    9af4:	4b2e      	ldr	r3, [pc, #184]	; (9bb0 <_sercom_i2c_send_address+0xec>)
    9af6:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    9af8:	693b      	ldr	r3, [r7, #16]
    9afa:	685b      	ldr	r3, [r3, #4]
    9afc:	2b01      	cmp	r3, #1
    9afe:	d106      	bne.n	9b0e <_sercom_i2c_send_address+0x4a>
    9b00:	68fb      	ldr	r3, [r7, #12]
    9b02:	2b00      	cmp	r3, #0
    9b04:	d003      	beq.n	9b0e <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    9b06:	6978      	ldr	r0, [r7, #20]
    9b08:	4b2a      	ldr	r3, [pc, #168]	; (9bb4 <_sercom_i2c_send_address+0xf0>)
    9b0a:	4798      	blx	r3
    9b0c:	e002      	b.n	9b14 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    9b0e:	6978      	ldr	r0, [r7, #20]
    9b10:	4b29      	ldr	r3, [pc, #164]	; (9bb8 <_sercom_i2c_send_address+0xf4>)
    9b12:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    9b14:	693b      	ldr	r3, [r7, #16]
    9b16:	881b      	ldrh	r3, [r3, #0]
    9b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9b1c:	2b00      	cmp	r3, #0
    9b1e:	d022      	beq.n	9b66 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    9b20:	693b      	ldr	r3, [r7, #16]
    9b22:	885b      	ldrh	r3, [r3, #2]
    9b24:	b29b      	uxth	r3, r3
    9b26:	f003 0301 	and.w	r3, r3, #1
    9b2a:	2b00      	cmp	r3, #0
    9b2c:	d007      	beq.n	9b3e <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    9b2e:	693b      	ldr	r3, [r7, #16]
    9b30:	885b      	ldrh	r3, [r3, #2]
    9b32:	b29b      	uxth	r3, r3
    9b34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    9b38:	b29a      	uxth	r2, r3
    9b3a:	693b      	ldr	r3, [r7, #16]
    9b3c:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    9b3e:	693b      	ldr	r3, [r7, #16]
    9b40:	881b      	ldrh	r3, [r3, #0]
    9b42:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    9b44:	f240 74fe 	movw	r4, #2046	; 0x7fe
    9b48:	401c      	ands	r4, r3
    9b4a:	6978      	ldr	r0, [r7, #20]
    9b4c:	4b1b      	ldr	r3, [pc, #108]	; (9bbc <_sercom_i2c_send_address+0xf8>)
    9b4e:	4798      	blx	r3
    9b50:	4603      	mov	r3, r0
    9b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9b56:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    9b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9b5c:	4619      	mov	r1, r3
    9b5e:	6978      	ldr	r0, [r7, #20]
    9b60:	4b17      	ldr	r3, [pc, #92]	; (9bc0 <_sercom_i2c_send_address+0xfc>)
    9b62:	4798      	blx	r3
    9b64:	e01a      	b.n	9b9c <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    9b66:	693b      	ldr	r3, [r7, #16]
    9b68:	881b      	ldrh	r3, [r3, #0]
    9b6a:	005b      	lsls	r3, r3, #1
    9b6c:	b2db      	uxtb	r3, r3
    9b6e:	693a      	ldr	r2, [r7, #16]
    9b70:	8852      	ldrh	r2, [r2, #2]
    9b72:	b292      	uxth	r2, r2
    9b74:	f002 0201 	and.w	r2, r2, #1
    9b78:	2a00      	cmp	r2, #0
    9b7a:	bf14      	ite	ne
    9b7c:	2201      	movne	r2, #1
    9b7e:	2200      	moveq	r2, #0
    9b80:	b2d2      	uxtb	r2, r2
    9b82:	4313      	orrs	r3, r2
    9b84:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    9b86:	6978      	ldr	r0, [r7, #20]
    9b88:	4b0c      	ldr	r3, [pc, #48]	; (9bbc <_sercom_i2c_send_address+0xf8>)
    9b8a:	4798      	blx	r3
    9b8c:	4603      	mov	r3, r0
    9b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    9b92:	4323      	orrs	r3, r4
    9b94:	4619      	mov	r1, r3
    9b96:	6978      	ldr	r0, [r7, #20]
    9b98:	4b09      	ldr	r3, [pc, #36]	; (9bc0 <_sercom_i2c_send_address+0xfc>)
    9b9a:	4798      	blx	r3
	}

	return ERR_NONE;
    9b9c:	2300      	movs	r3, #0
}
    9b9e:	4618      	mov	r0, r3
    9ba0:	371c      	adds	r7, #28
    9ba2:	46bd      	mov	sp, r7
    9ba4:	bd90      	pop	{r4, r7, pc}
    9ba6:	bf00      	nop
    9ba8:	000090c5 	.word	0x000090c5
    9bac:	0001a850 	.word	0x0001a850
    9bb0:	00006241 	.word	0x00006241
    9bb4:	00009275 	.word	0x00009275
    9bb8:	0000929d 	.word	0x0000929d
    9bbc:	000093dd 	.word	0x000093dd
    9bc0:	000093b9 	.word	0x000093b9

00009bc4 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    9bc4:	b580      	push	{r7, lr}
    9bc6:	b084      	sub	sp, #16
    9bc8:	af00      	add	r7, sp, #0
    9bca:	6078      	str	r0, [r7, #4]
    9bcc:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    9bce:	687b      	ldr	r3, [r7, #4]
    9bd0:	2b00      	cmp	r3, #0
    9bd2:	bf14      	ite	ne
    9bd4:	2301      	movne	r3, #1
    9bd6:	2300      	moveq	r3, #0
    9bd8:	b2db      	uxtb	r3, r3
    9bda:	f240 42f4 	movw	r2, #1268	; 0x4f4
    9bde:	492a      	ldr	r1, [pc, #168]	; (9c88 <_i2c_m_async_transfer+0xc4>)
    9be0:	4618      	mov	r0, r3
    9be2:	4b2a      	ldr	r3, [pc, #168]	; (9c8c <_i2c_m_async_transfer+0xc8>)
    9be4:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    9be6:	687b      	ldr	r3, [r7, #4]
    9be8:	691b      	ldr	r3, [r3, #16]
    9bea:	2b00      	cmp	r3, #0
    9bec:	bf14      	ite	ne
    9bee:	2301      	movne	r3, #1
    9bf0:	2300      	moveq	r3, #0
    9bf2:	b2db      	uxtb	r3, r3
    9bf4:	f240 42f5 	movw	r2, #1269	; 0x4f5
    9bf8:	4923      	ldr	r1, [pc, #140]	; (9c88 <_i2c_m_async_transfer+0xc4>)
    9bfa:	4618      	mov	r0, r3
    9bfc:	4b23      	ldr	r3, [pc, #140]	; (9c8c <_i2c_m_async_transfer+0xc8>)
    9bfe:	4798      	blx	r3
	ASSERT(msg);
    9c00:	683b      	ldr	r3, [r7, #0]
    9c02:	2b00      	cmp	r3, #0
    9c04:	bf14      	ite	ne
    9c06:	2301      	movne	r3, #1
    9c08:	2300      	moveq	r3, #0
    9c0a:	b2db      	uxtb	r3, r3
    9c0c:	f240 42f6 	movw	r2, #1270	; 0x4f6
    9c10:	491d      	ldr	r1, [pc, #116]	; (9c88 <_i2c_m_async_transfer+0xc4>)
    9c12:	4618      	mov	r0, r3
    9c14:	4b1d      	ldr	r3, [pc, #116]	; (9c8c <_i2c_m_async_transfer+0xc8>)
    9c16:	4798      	blx	r3

	if (msg->len == 0) {
    9c18:	683b      	ldr	r3, [r7, #0]
    9c1a:	685b      	ldr	r3, [r3, #4]
    9c1c:	2b00      	cmp	r3, #0
    9c1e:	d101      	bne.n	9c24 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    9c20:	2300      	movs	r3, #0
    9c22:	e02d      	b.n	9c80 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    9c24:	687b      	ldr	r3, [r7, #4]
    9c26:	885b      	ldrh	r3, [r3, #2]
    9c28:	b29b      	uxth	r3, r3
    9c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9c2e:	2b00      	cmp	r3, #0
    9c30:	d002      	beq.n	9c38 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    9c32:	f06f 0303 	mvn.w	r3, #3
    9c36:	e023      	b.n	9c80 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    9c38:	683b      	ldr	r3, [r7, #0]
    9c3a:	885b      	ldrh	r3, [r3, #2]
    9c3c:	b29b      	uxth	r3, r3
    9c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9c42:	b29a      	uxth	r2, r3
    9c44:	683b      	ldr	r3, [r7, #0]
    9c46:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    9c48:	687b      	ldr	r3, [r7, #4]
    9c4a:	683a      	ldr	r2, [r7, #0]
    9c4c:	ca07      	ldmia	r2, {r0, r1, r2}
    9c4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    9c52:	687b      	ldr	r3, [r7, #4]
    9c54:	691b      	ldr	r3, [r3, #16]
    9c56:	4618      	mov	r0, r3
    9c58:	4b0d      	ldr	r3, [pc, #52]	; (9c90 <_i2c_m_async_transfer+0xcc>)
    9c5a:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    9c5c:	6878      	ldr	r0, [r7, #4]
    9c5e:	4b0d      	ldr	r3, [pc, #52]	; (9c94 <_i2c_m_async_transfer+0xd0>)
    9c60:	4798      	blx	r3
    9c62:	60f8      	str	r0, [r7, #12]

	if (ret) {
    9c64:	68fb      	ldr	r3, [r7, #12]
    9c66:	2b00      	cmp	r3, #0
    9c68:	d009      	beq.n	9c7e <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    9c6a:	687b      	ldr	r3, [r7, #4]
    9c6c:	885b      	ldrh	r3, [r3, #2]
    9c6e:	b29b      	uxth	r3, r3
    9c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9c74:	b29a      	uxth	r2, r3
    9c76:	687b      	ldr	r3, [r7, #4]
    9c78:	805a      	strh	r2, [r3, #2]

		return ret;
    9c7a:	68fb      	ldr	r3, [r7, #12]
    9c7c:	e000      	b.n	9c80 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    9c7e:	2300      	movs	r3, #0
}
    9c80:	4618      	mov	r0, r3
    9c82:	3710      	adds	r7, #16
    9c84:	46bd      	mov	sp, r7
    9c86:	bd80      	pop	{r7, pc}
    9c88:	0001a850 	.word	0x0001a850
    9c8c:	00006241 	.word	0x00006241
    9c90:	00009225 	.word	0x00009225
    9c94:	00009ac5 	.word	0x00009ac5

00009c98 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    9c98:	b480      	push	{r7}
    9c9a:	b085      	sub	sp, #20
    9c9c:	af00      	add	r7, sp, #0
    9c9e:	60f8      	str	r0, [r7, #12]
    9ca0:	460b      	mov	r3, r1
    9ca2:	607a      	str	r2, [r7, #4]
    9ca4:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    9ca6:	7afb      	ldrb	r3, [r7, #11]
    9ca8:	2b01      	cmp	r3, #1
    9caa:	d008      	beq.n	9cbe <_i2c_m_async_register_callback+0x26>
    9cac:	2b02      	cmp	r3, #2
    9cae:	d00a      	beq.n	9cc6 <_i2c_m_async_register_callback+0x2e>
    9cb0:	2b00      	cmp	r3, #0
    9cb2:	d000      	beq.n	9cb6 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    9cb4:	e00b      	b.n	9cce <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    9cb6:	68fb      	ldr	r3, [r7, #12]
    9cb8:	687a      	ldr	r2, [r7, #4]
    9cba:	615a      	str	r2, [r3, #20]
		break;
    9cbc:	e007      	b.n	9cce <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    9cbe:	68fb      	ldr	r3, [r7, #12]
    9cc0:	687a      	ldr	r2, [r7, #4]
    9cc2:	619a      	str	r2, [r3, #24]
		break;
    9cc4:	e003      	b.n	9cce <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    9cc6:	68fb      	ldr	r3, [r7, #12]
    9cc8:	687a      	ldr	r2, [r7, #4]
    9cca:	61da      	str	r2, [r3, #28]
		break;
    9ccc:	bf00      	nop
	}

	return ERR_NONE;
    9cce:	2300      	movs	r3, #0
}
    9cd0:	4618      	mov	r0, r3
    9cd2:	3714      	adds	r7, #20
    9cd4:	46bd      	mov	sp, r7
    9cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9cda:	4770      	bx	lr

00009cdc <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    9cdc:	b580      	push	{r7, lr}
    9cde:	b082      	sub	sp, #8
    9ce0:	af00      	add	r7, sp, #0
    9ce2:	6078      	str	r0, [r7, #4]
    9ce4:	460b      	mov	r3, r1
    9ce6:	70fb      	strb	r3, [r7, #3]
    9ce8:	4613      	mov	r3, r2
    9cea:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    9cec:	78fb      	ldrb	r3, [r7, #3]
    9cee:	2b01      	cmp	r3, #1
    9cf0:	d002      	beq.n	9cf8 <_i2c_m_async_set_irq_state+0x1c>
    9cf2:	78fb      	ldrb	r3, [r7, #3]
    9cf4:	2b02      	cmp	r3, #2
    9cf6:	d10e      	bne.n	9d16 <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    9cf8:	687b      	ldr	r3, [r7, #4]
    9cfa:	691b      	ldr	r3, [r3, #16]
    9cfc:	78ba      	ldrb	r2, [r7, #2]
    9cfe:	4611      	mov	r1, r2
    9d00:	4618      	mov	r0, r3
    9d02:	4b0c      	ldr	r3, [pc, #48]	; (9d34 <_i2c_m_async_set_irq_state+0x58>)
    9d04:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    9d06:	687b      	ldr	r3, [r7, #4]
    9d08:	691b      	ldr	r3, [r3, #16]
    9d0a:	78ba      	ldrb	r2, [r7, #2]
    9d0c:	4611      	mov	r1, r2
    9d0e:	4618      	mov	r0, r3
    9d10:	4b09      	ldr	r3, [pc, #36]	; (9d38 <_i2c_m_async_set_irq_state+0x5c>)
    9d12:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    9d14:	e009      	b.n	9d2a <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    9d16:	78fb      	ldrb	r3, [r7, #3]
    9d18:	2b00      	cmp	r3, #0
    9d1a:	d106      	bne.n	9d2a <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    9d1c:	687b      	ldr	r3, [r7, #4]
    9d1e:	691b      	ldr	r3, [r3, #16]
    9d20:	78ba      	ldrb	r2, [r7, #2]
    9d22:	4611      	mov	r1, r2
    9d24:	4618      	mov	r0, r3
    9d26:	4b05      	ldr	r3, [pc, #20]	; (9d3c <_i2c_m_async_set_irq_state+0x60>)
    9d28:	4798      	blx	r3
}
    9d2a:	bf00      	nop
    9d2c:	3708      	adds	r7, #8
    9d2e:	46bd      	mov	sp, r7
    9d30:	bd80      	pop	{r7, pc}
    9d32:	bf00      	nop
    9d34:	00008f5b 	.word	0x00008f5b
    9d38:	00008f29 	.word	0x00008f29
    9d3c:	00008f8d 	.word	0x00008f8d

00009d40 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    9d40:	b580      	push	{r7, lr}
    9d42:	b084      	sub	sp, #16
    9d44:	af00      	add	r7, sp, #0
    9d46:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    9d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9d4c:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    9d4e:	2304      	movs	r3, #4
    9d50:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    9d52:	687b      	ldr	r3, [r7, #4]
    9d54:	2b00      	cmp	r3, #0
    9d56:	bf14      	ite	ne
    9d58:	2301      	movne	r3, #1
    9d5a:	2300      	moveq	r3, #0
    9d5c:	b2db      	uxtb	r3, r3
    9d5e:	f240 6241 	movw	r2, #1601	; 0x641
    9d62:	4915      	ldr	r1, [pc, #84]	; (9db8 <_i2c_m_enable_implementation+0x78>)
    9d64:	4618      	mov	r0, r3
    9d66:	4b15      	ldr	r3, [pc, #84]	; (9dbc <_i2c_m_enable_implementation+0x7c>)
    9d68:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    9d6a:	6878      	ldr	r0, [r7, #4]
    9d6c:	4b14      	ldr	r3, [pc, #80]	; (9dc0 <_i2c_m_enable_implementation+0x80>)
    9d6e:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    9d70:	e016      	b.n	9da0 <_i2c_m_enable_implementation+0x60>
		timeout--;
    9d72:	68fb      	ldr	r3, [r7, #12]
    9d74:	3b01      	subs	r3, #1
    9d76:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    9d78:	68fb      	ldr	r3, [r7, #12]
    9d7a:	2b00      	cmp	r3, #0
    9d7c:	dc10      	bgt.n	9da0 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    9d7e:	68bb      	ldr	r3, [r7, #8]
    9d80:	3b01      	subs	r3, #1
    9d82:	60bb      	str	r3, [r7, #8]
    9d84:	68bb      	ldr	r3, [r7, #8]
    9d86:	2b00      	cmp	r3, #0
    9d88:	d007      	beq.n	9d9a <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    9d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9d8e:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    9d90:	2110      	movs	r1, #16
    9d92:	6878      	ldr	r0, [r7, #4]
    9d94:	4b0b      	ldr	r3, [pc, #44]	; (9dc4 <_i2c_m_enable_implementation+0x84>)
    9d96:	4798      	blx	r3
    9d98:	e002      	b.n	9da0 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    9d9a:	f06f 0305 	mvn.w	r3, #5
    9d9e:	e006      	b.n	9dae <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    9da0:	6878      	ldr	r0, [r7, #4]
    9da2:	4b09      	ldr	r3, [pc, #36]	; (9dc8 <_i2c_m_enable_implementation+0x88>)
    9da4:	4798      	blx	r3
    9da6:	4603      	mov	r3, r0
    9da8:	2b01      	cmp	r3, #1
    9daa:	d1e2      	bne.n	9d72 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    9dac:	2300      	movs	r3, #0
}
    9dae:	4618      	mov	r0, r3
    9db0:	3710      	adds	r7, #16
    9db2:	46bd      	mov	sp, r7
    9db4:	bd80      	pop	{r7, pc}
    9db6:	bf00      	nop
    9db8:	0001a850 	.word	0x0001a850
    9dbc:	00006241 	.word	0x00006241
    9dc0:	00009075 	.word	0x00009075
    9dc4:	00009521 	.word	0x00009521
    9dc8:	000094d1 	.word	0x000094d1

00009dcc <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    9dcc:	b580      	push	{r7, lr}
    9dce:	b084      	sub	sp, #16
    9dd0:	af00      	add	r7, sp, #0
    9dd2:	6078      	str	r0, [r7, #4]
    9dd4:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    9dd6:	6838      	ldr	r0, [r7, #0]
    9dd8:	4b42      	ldr	r3, [pc, #264]	; (9ee4 <_i2c_m_sync_init_impl+0x118>)
    9dda:	4798      	blx	r3
    9ddc:	4603      	mov	r3, r0
    9dde:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    9de0:	2101      	movs	r1, #1
    9de2:	6838      	ldr	r0, [r7, #0]
    9de4:	4b40      	ldr	r3, [pc, #256]	; (9ee8 <_i2c_m_sync_init_impl+0x11c>)
    9de6:	4798      	blx	r3
    9de8:	4603      	mov	r3, r0
    9dea:	f083 0301 	eor.w	r3, r3, #1
    9dee:	b2db      	uxtb	r3, r3
    9df0:	2b00      	cmp	r3, #0
    9df2:	d020      	beq.n	9e36 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    9df4:	7bfa      	ldrb	r2, [r7, #15]
    9df6:	493d      	ldr	r1, [pc, #244]	; (9eec <_i2c_m_sync_init_impl+0x120>)
    9df8:	4613      	mov	r3, r2
    9dfa:	005b      	lsls	r3, r3, #1
    9dfc:	4413      	add	r3, r2
    9dfe:	00db      	lsls	r3, r3, #3
    9e00:	440b      	add	r3, r1
    9e02:	3304      	adds	r3, #4
    9e04:	681b      	ldr	r3, [r3, #0]
    9e06:	f003 031c 	and.w	r3, r3, #28
    9e0a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    9e0c:	2102      	movs	r1, #2
    9e0e:	6838      	ldr	r0, [r7, #0]
    9e10:	4b37      	ldr	r3, [pc, #220]	; (9ef0 <_i2c_m_sync_init_impl+0x124>)
    9e12:	4798      	blx	r3
    9e14:	4603      	mov	r3, r0
    9e16:	2b00      	cmp	r3, #0
    9e18:	d006      	beq.n	9e28 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    9e1a:	6838      	ldr	r0, [r7, #0]
    9e1c:	4b35      	ldr	r3, [pc, #212]	; (9ef4 <_i2c_m_sync_init_impl+0x128>)
    9e1e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    9e20:	2102      	movs	r1, #2
    9e22:	6838      	ldr	r0, [r7, #0]
    9e24:	4b34      	ldr	r3, [pc, #208]	; (9ef8 <_i2c_m_sync_init_impl+0x12c>)
    9e26:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    9e28:	68bb      	ldr	r3, [r7, #8]
    9e2a:	f043 0301 	orr.w	r3, r3, #1
    9e2e:	4619      	mov	r1, r3
    9e30:	6838      	ldr	r0, [r7, #0]
    9e32:	4b32      	ldr	r3, [pc, #200]	; (9efc <_i2c_m_sync_init_impl+0x130>)
    9e34:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    9e36:	2101      	movs	r1, #1
    9e38:	6838      	ldr	r0, [r7, #0]
    9e3a:	4b2f      	ldr	r3, [pc, #188]	; (9ef8 <_i2c_m_sync_init_impl+0x12c>)
    9e3c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    9e3e:	7bfa      	ldrb	r2, [r7, #15]
    9e40:	492a      	ldr	r1, [pc, #168]	; (9eec <_i2c_m_sync_init_impl+0x120>)
    9e42:	4613      	mov	r3, r2
    9e44:	005b      	lsls	r3, r3, #1
    9e46:	4413      	add	r3, r2
    9e48:	00db      	lsls	r3, r3, #3
    9e4a:	440b      	add	r3, r1
    9e4c:	3304      	adds	r3, #4
    9e4e:	681b      	ldr	r3, [r3, #0]
    9e50:	4619      	mov	r1, r3
    9e52:	6838      	ldr	r0, [r7, #0]
    9e54:	4b29      	ldr	r3, [pc, #164]	; (9efc <_i2c_m_sync_init_impl+0x130>)
    9e56:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    9e58:	7bfa      	ldrb	r2, [r7, #15]
    9e5a:	4924      	ldr	r1, [pc, #144]	; (9eec <_i2c_m_sync_init_impl+0x120>)
    9e5c:	4613      	mov	r3, r2
    9e5e:	005b      	lsls	r3, r3, #1
    9e60:	4413      	add	r3, r2
    9e62:	00db      	lsls	r3, r3, #3
    9e64:	440b      	add	r3, r1
    9e66:	3308      	adds	r3, #8
    9e68:	681b      	ldr	r3, [r3, #0]
    9e6a:	4619      	mov	r1, r3
    9e6c:	6838      	ldr	r0, [r7, #0]
    9e6e:	4b24      	ldr	r3, [pc, #144]	; (9f00 <_i2c_m_sync_init_impl+0x134>)
    9e70:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    9e72:	7bfa      	ldrb	r2, [r7, #15]
    9e74:	491d      	ldr	r1, [pc, #116]	; (9eec <_i2c_m_sync_init_impl+0x120>)
    9e76:	4613      	mov	r3, r2
    9e78:	005b      	lsls	r3, r3, #1
    9e7a:	4413      	add	r3, r2
    9e7c:	00db      	lsls	r3, r3, #3
    9e7e:	440b      	add	r3, r1
    9e80:	330c      	adds	r3, #12
    9e82:	681b      	ldr	r3, [r3, #0]
    9e84:	4619      	mov	r1, r3
    9e86:	6838      	ldr	r0, [r7, #0]
    9e88:	4b1e      	ldr	r3, [pc, #120]	; (9f04 <_i2c_m_sync_init_impl+0x138>)
    9e8a:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    9e8c:	7bfa      	ldrb	r2, [r7, #15]
    9e8e:	4917      	ldr	r1, [pc, #92]	; (9eec <_i2c_m_sync_init_impl+0x120>)
    9e90:	4613      	mov	r3, r2
    9e92:	005b      	lsls	r3, r3, #1
    9e94:	4413      	add	r3, r2
    9e96:	00db      	lsls	r3, r3, #3
    9e98:	440b      	add	r3, r1
    9e9a:	3304      	adds	r3, #4
    9e9c:	681b      	ldr	r3, [r3, #0]
    9e9e:	0e1b      	lsrs	r3, r3, #24
    9ea0:	b29b      	uxth	r3, r3
    9ea2:	f003 0303 	and.w	r3, r3, #3
    9ea6:	b29a      	uxth	r2, r3
    9ea8:	687b      	ldr	r3, [r7, #4]
    9eaa:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    9eac:	687b      	ldr	r3, [r7, #4]
    9eae:	899b      	ldrh	r3, [r3, #12]
    9eb0:	2b01      	cmp	r3, #1
    9eb2:	bf8c      	ite	hi
    9eb4:	2301      	movhi	r3, #1
    9eb6:	2300      	movls	r3, #0
    9eb8:	b2db      	uxtb	r3, r3
    9eba:	4619      	mov	r1, r3
    9ebc:	6838      	ldr	r0, [r7, #0]
    9ebe:	4b12      	ldr	r3, [pc, #72]	; (9f08 <_i2c_m_sync_init_impl+0x13c>)
    9ec0:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    9ec2:	7bfa      	ldrb	r2, [r7, #15]
    9ec4:	4909      	ldr	r1, [pc, #36]	; (9eec <_i2c_m_sync_init_impl+0x120>)
    9ec6:	4613      	mov	r3, r2
    9ec8:	005b      	lsls	r3, r3, #1
    9eca:	4413      	add	r3, r2
    9ecc:	00db      	lsls	r3, r3, #3
    9ece:	440b      	add	r3, r1
    9ed0:	3312      	adds	r3, #18
    9ed2:	881a      	ldrh	r2, [r3, #0]
    9ed4:	687b      	ldr	r3, [r7, #4]
    9ed6:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    9ed8:	2300      	movs	r3, #0
}
    9eda:	4618      	mov	r0, r3
    9edc:	3710      	adds	r7, #16
    9ede:	46bd      	mov	sp, r7
    9ee0:	bd80      	pop	{r7, pc}
    9ee2:	bf00      	nop
    9ee4:	000095f9 	.word	0x000095f9
    9ee8:	00008de9 	.word	0x00008de9
    9eec:	2000007c 	.word	0x2000007c
    9ef0:	000090f5 	.word	0x000090f5
    9ef4:	0000909d 	.word	0x0000909d
    9ef8:	00008dc5 	.word	0x00008dc5
    9efc:	00009125 	.word	0x00009125
    9f00:	000092f5 	.word	0x000092f5
    9f04:	0000933d 	.word	0x0000933d
    9f08:	00009379 	.word	0x00009379

00009f0c <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    9f0c:	b580      	push	{r7, lr}
    9f0e:	b082      	sub	sp, #8
    9f10:	af00      	add	r7, sp, #0
    9f12:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    9f14:	2101      	movs	r1, #1
    9f16:	6878      	ldr	r0, [r7, #4]
    9f18:	4b07      	ldr	r3, [pc, #28]	; (9f38 <_spi_sync_enable+0x2c>)
    9f1a:	4798      	blx	r3
    9f1c:	4603      	mov	r3, r0
    9f1e:	2b00      	cmp	r3, #0
    9f20:	d002      	beq.n	9f28 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    9f22:	f06f 0303 	mvn.w	r3, #3
    9f26:	e003      	b.n	9f30 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    9f28:	6878      	ldr	r0, [r7, #4]
    9f2a:	4b04      	ldr	r3, [pc, #16]	; (9f3c <_spi_sync_enable+0x30>)
    9f2c:	4798      	blx	r3

	return ERR_NONE;
    9f2e:	2300      	movs	r3, #0
}
    9f30:	4618      	mov	r0, r3
    9f32:	3708      	adds	r7, #8
    9f34:	46bd      	mov	sp, r7
    9f36:	bd80      	pop	{r7, pc}
    9f38:	00008e35 	.word	0x00008e35
    9f3c:	00009149 	.word	0x00009149

00009f40 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    9f40:	b580      	push	{r7, lr}
    9f42:	b082      	sub	sp, #8
    9f44:	af00      	add	r7, sp, #0
    9f46:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    9f48:	2101      	movs	r1, #1
    9f4a:	6878      	ldr	r0, [r7, #4]
    9f4c:	4b07      	ldr	r3, [pc, #28]	; (9f6c <_spi_sync_disable+0x2c>)
    9f4e:	4798      	blx	r3
    9f50:	4603      	mov	r3, r0
    9f52:	2b00      	cmp	r3, #0
    9f54:	d002      	beq.n	9f5c <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    9f56:	f06f 0303 	mvn.w	r3, #3
    9f5a:	e003      	b.n	9f64 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    9f5c:	6878      	ldr	r0, [r7, #4]
    9f5e:	4b04      	ldr	r3, [pc, #16]	; (9f70 <_spi_sync_disable+0x30>)
    9f60:	4798      	blx	r3

	return ERR_NONE;
    9f62:	2300      	movs	r3, #0
}
    9f64:	4618      	mov	r0, r3
    9f66:	3708      	adds	r7, #8
    9f68:	46bd      	mov	sp, r7
    9f6a:	bd80      	pop	{r7, pc}
    9f6c:	00008e35 	.word	0x00008e35
    9f70:	000091a9 	.word	0x000091a9

00009f74 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    9f74:	b580      	push	{r7, lr}
    9f76:	b082      	sub	sp, #8
    9f78:	af00      	add	r7, sp, #0
    9f7a:	6078      	str	r0, [r7, #4]
    9f7c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    9f7e:	687b      	ldr	r3, [r7, #4]
    9f80:	2b00      	cmp	r3, #0
    9f82:	d004      	beq.n	9f8e <_spi_load_regs_master+0x1a>
    9f84:	683b      	ldr	r3, [r7, #0]
    9f86:	2b00      	cmp	r3, #0
    9f88:	d001      	beq.n	9f8e <_spi_load_regs_master+0x1a>
    9f8a:	2301      	movs	r3, #1
    9f8c:	e000      	b.n	9f90 <_spi_load_regs_master+0x1c>
    9f8e:	2300      	movs	r3, #0
    9f90:	f003 0301 	and.w	r3, r3, #1
    9f94:	b2db      	uxtb	r3, r3
    9f96:	f640 1242 	movw	r2, #2370	; 0x942
    9f9a:	4915      	ldr	r1, [pc, #84]	; (9ff0 <_spi_load_regs_master+0x7c>)
    9f9c:	4618      	mov	r0, r3
    9f9e:	4b15      	ldr	r3, [pc, #84]	; (9ff4 <_spi_load_regs_master+0x80>)
    9fa0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    9fa2:	683b      	ldr	r3, [r7, #0]
    9fa4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    9fa6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    9faa:	f023 0301 	bic.w	r3, r3, #1
    9fae:	4619      	mov	r1, r3
    9fb0:	6878      	ldr	r0, [r7, #4]
    9fb2:	4b11      	ldr	r3, [pc, #68]	; (9ff8 <_spi_load_regs_master+0x84>)
    9fb4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    9fb6:	683b      	ldr	r3, [r7, #0]
    9fb8:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    9fba:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    9fbe:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    9fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9fc6:	4619      	mov	r1, r3
    9fc8:	6878      	ldr	r0, [r7, #4]
    9fca:	4b0c      	ldr	r3, [pc, #48]	; (9ffc <_spi_load_regs_master+0x88>)
    9fcc:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    9fce:	683b      	ldr	r3, [r7, #0]
    9fd0:	7b1b      	ldrb	r3, [r3, #12]
    9fd2:	4619      	mov	r1, r3
    9fd4:	6878      	ldr	r0, [r7, #4]
    9fd6:	4b0a      	ldr	r3, [pc, #40]	; (a000 <_spi_load_regs_master+0x8c>)
    9fd8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    9fda:	683b      	ldr	r3, [r7, #0]
    9fdc:	7b5b      	ldrb	r3, [r3, #13]
    9fde:	4619      	mov	r1, r3
    9fe0:	6878      	ldr	r0, [r7, #4]
    9fe2:	4b08      	ldr	r3, [pc, #32]	; (a004 <_spi_load_regs_master+0x90>)
    9fe4:	4798      	blx	r3
}
    9fe6:	bf00      	nop
    9fe8:	3708      	adds	r7, #8
    9fea:	46bd      	mov	sp, r7
    9fec:	bd80      	pop	{r7, pc}
    9fee:	bf00      	nop
    9ff0:	0001a850 	.word	0x0001a850
    9ff4:	00006241 	.word	0x00006241
    9ff8:	00009201 	.word	0x00009201
    9ffc:	00009319 	.word	0x00009319
    a000:	00009359 	.word	0x00009359
    a004:	00009491 	.word	0x00009491

0000a008 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    a008:	b580      	push	{r7, lr}
    a00a:	b082      	sub	sp, #8
    a00c:	af00      	add	r7, sp, #0
    a00e:	6078      	str	r0, [r7, #4]
    a010:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    a012:	687b      	ldr	r3, [r7, #4]
    a014:	2b00      	cmp	r3, #0
    a016:	d004      	beq.n	a022 <_spi_load_regs_slave+0x1a>
    a018:	683b      	ldr	r3, [r7, #0]
    a01a:	2b00      	cmp	r3, #0
    a01c:	d001      	beq.n	a022 <_spi_load_regs_slave+0x1a>
    a01e:	2301      	movs	r3, #1
    a020:	e000      	b.n	a024 <_spi_load_regs_slave+0x1c>
    a022:	2300      	movs	r3, #0
    a024:	f003 0301 	and.w	r3, r3, #1
    a028:	b2db      	uxtb	r3, r3
    a02a:	f640 1256 	movw	r2, #2390	; 0x956
    a02e:	491a      	ldr	r1, [pc, #104]	; (a098 <_spi_load_regs_slave+0x90>)
    a030:	4618      	mov	r0, r3
    a032:	4b1a      	ldr	r3, [pc, #104]	; (a09c <_spi_load_regs_slave+0x94>)
    a034:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    a036:	683b      	ldr	r3, [r7, #0]
    a038:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    a03a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    a03e:	f023 0301 	bic.w	r3, r3, #1
    a042:	4619      	mov	r1, r3
    a044:	6878      	ldr	r0, [r7, #4]
    a046:	4b16      	ldr	r3, [pc, #88]	; (a0a0 <_spi_load_regs_slave+0x98>)
    a048:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    a04a:	683b      	ldr	r3, [r7, #0]
    a04c:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    a04e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    a052:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    a056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a05a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    a05e:	4619      	mov	r1, r3
    a060:	6878      	ldr	r0, [r7, #4]
    a062:	4b10      	ldr	r3, [pc, #64]	; (a0a4 <_spi_load_regs_slave+0x9c>)
    a064:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    a066:	683b      	ldr	r3, [r7, #0]
    a068:	689b      	ldr	r3, [r3, #8]
    a06a:	4619      	mov	r1, r3
    a06c:	6878      	ldr	r0, [r7, #4]
    a06e:	4b0e      	ldr	r3, [pc, #56]	; (a0a8 <_spi_load_regs_slave+0xa0>)
    a070:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    a072:	683b      	ldr	r3, [r7, #0]
    a074:	7b5b      	ldrb	r3, [r3, #13]
    a076:	4619      	mov	r1, r3
    a078:	6878      	ldr	r0, [r7, #4]
    a07a:	4b0c      	ldr	r3, [pc, #48]	; (a0ac <_spi_load_regs_slave+0xa4>)
    a07c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    a07e:	bf00      	nop
    a080:	f04f 31ff 	mov.w	r1, #4294967295
    a084:	6878      	ldr	r0, [r7, #4]
    a086:	4b0a      	ldr	r3, [pc, #40]	; (a0b0 <_spi_load_regs_slave+0xa8>)
    a088:	4798      	blx	r3
    a08a:	4603      	mov	r3, r0
    a08c:	2b00      	cmp	r3, #0
    a08e:	d1f7      	bne.n	a080 <_spi_load_regs_slave+0x78>
		;
}
    a090:	bf00      	nop
    a092:	3708      	adds	r7, #8
    a094:	46bd      	mov	sp, r7
    a096:	bd80      	pop	{r7, pc}
    a098:	0001a850 	.word	0x0001a850
    a09c:	00006241 	.word	0x00006241
    a0a0:	00009201 	.word	0x00009201
    a0a4:	00009319 	.word	0x00009319
    a0a8:	000093fd 	.word	0x000093fd
    a0ac:	00009491 	.word	0x00009491
    a0b0:	00008e35 	.word	0x00008e35

0000a0b4 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    a0b4:	b580      	push	{r7, lr}
    a0b6:	b084      	sub	sp, #16
    a0b8:	af00      	add	r7, sp, #0
    a0ba:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    a0bc:	687b      	ldr	r3, [r7, #4]
    a0be:	4618      	mov	r0, r3
    a0c0:	4b11      	ldr	r3, [pc, #68]	; (a108 <_spi_get_regs+0x54>)
    a0c2:	4798      	blx	r3
    a0c4:	4603      	mov	r3, r0
    a0c6:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    a0c8:	2300      	movs	r3, #0
    a0ca:	73fb      	strb	r3, [r7, #15]
    a0cc:	e014      	b.n	a0f8 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    a0ce:	7bfa      	ldrb	r2, [r7, #15]
    a0d0:	490e      	ldr	r1, [pc, #56]	; (a10c <_spi_get_regs+0x58>)
    a0d2:	4613      	mov	r3, r2
    a0d4:	011b      	lsls	r3, r3, #4
    a0d6:	4413      	add	r3, r2
    a0d8:	440b      	add	r3, r1
    a0da:	3310      	adds	r3, #16
    a0dc:	781b      	ldrb	r3, [r3, #0]
    a0de:	7bba      	ldrb	r2, [r7, #14]
    a0e0:	429a      	cmp	r2, r3
    a0e2:	d106      	bne.n	a0f2 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    a0e4:	7bfa      	ldrb	r2, [r7, #15]
    a0e6:	4613      	mov	r3, r2
    a0e8:	011b      	lsls	r3, r3, #4
    a0ea:	4413      	add	r3, r2
    a0ec:	4a07      	ldr	r2, [pc, #28]	; (a10c <_spi_get_regs+0x58>)
    a0ee:	4413      	add	r3, r2
    a0f0:	e006      	b.n	a100 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    a0f2:	7bfb      	ldrb	r3, [r7, #15]
    a0f4:	3301      	adds	r3, #1
    a0f6:	73fb      	strb	r3, [r7, #15]
    a0f8:	7bfb      	ldrb	r3, [r7, #15]
    a0fa:	2b01      	cmp	r3, #1
    a0fc:	d9e7      	bls.n	a0ce <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    a0fe:	2300      	movs	r3, #0
}
    a100:	4618      	mov	r0, r3
    a102:	3710      	adds	r7, #16
    a104:	46bd      	mov	sp, r7
    a106:	bd80      	pop	{r7, pc}
    a108:	00009549 	.word	0x00009549
    a10c:	0001a88c 	.word	0x0001a88c

0000a110 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    a110:	b580      	push	{r7, lr}
    a112:	b084      	sub	sp, #16
    a114:	af00      	add	r7, sp, #0
    a116:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    a118:	687b      	ldr	r3, [r7, #4]
    a11a:	681b      	ldr	r3, [r3, #0]
    a11c:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    a11e:	68f8      	ldr	r0, [r7, #12]
    a120:	4b21      	ldr	r3, [pc, #132]	; (a1a8 <_spi_handler+0x98>)
    a122:	4798      	blx	r3
    a124:	4603      	mov	r3, r0
    a126:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    a128:	68f8      	ldr	r0, [r7, #12]
    a12a:	4b20      	ldr	r3, [pc, #128]	; (a1ac <_spi_handler+0x9c>)
    a12c:	4798      	blx	r3
    a12e:	4603      	mov	r3, r0
    a130:	461a      	mov	r2, r3
    a132:	7afb      	ldrb	r3, [r7, #11]
    a134:	4013      	ands	r3, r2
    a136:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    a138:	7afb      	ldrb	r3, [r7, #11]
    a13a:	f003 0301 	and.w	r3, r3, #1
    a13e:	2b00      	cmp	r3, #0
    a140:	d004      	beq.n	a14c <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    a142:	687b      	ldr	r3, [r7, #4]
    a144:	689b      	ldr	r3, [r3, #8]
    a146:	6878      	ldr	r0, [r7, #4]
    a148:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    a14a:	e029      	b.n	a1a0 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    a14c:	7afb      	ldrb	r3, [r7, #11]
    a14e:	f003 0304 	and.w	r3, r3, #4
    a152:	2b00      	cmp	r3, #0
    a154:	d004      	beq.n	a160 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    a156:	687b      	ldr	r3, [r7, #4]
    a158:	68db      	ldr	r3, [r3, #12]
    a15a:	6878      	ldr	r0, [r7, #4]
    a15c:	4798      	blx	r3
}
    a15e:	e01f      	b.n	a1a0 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    a160:	7afb      	ldrb	r3, [r7, #11]
    a162:	f003 0302 	and.w	r3, r3, #2
    a166:	2b00      	cmp	r3, #0
    a168:	d008      	beq.n	a17c <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    a16a:	2102      	movs	r1, #2
    a16c:	68f8      	ldr	r0, [r7, #12]
    a16e:	4b10      	ldr	r3, [pc, #64]	; (a1b0 <_spi_handler+0xa0>)
    a170:	4798      	blx	r3
		dev->callbacks.complete(dev);
    a172:	687b      	ldr	r3, [r7, #4]
    a174:	691b      	ldr	r3, [r3, #16]
    a176:	6878      	ldr	r0, [r7, #4]
    a178:	4798      	blx	r3
}
    a17a:	e011      	b.n	a1a0 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    a17c:	f997 300b 	ldrsb.w	r3, [r7, #11]
    a180:	2b00      	cmp	r3, #0
    a182:	da0d      	bge.n	a1a0 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    a184:	2104      	movs	r1, #4
    a186:	68f8      	ldr	r0, [r7, #12]
    a188:	4b0a      	ldr	r3, [pc, #40]	; (a1b4 <_spi_handler+0xa4>)
    a18a:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    a18c:	2180      	movs	r1, #128	; 0x80
    a18e:	68f8      	ldr	r0, [r7, #12]
    a190:	4b07      	ldr	r3, [pc, #28]	; (a1b0 <_spi_handler+0xa0>)
    a192:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    a194:	687b      	ldr	r3, [r7, #4]
    a196:	695b      	ldr	r3, [r3, #20]
    a198:	f06f 0112 	mvn.w	r1, #18
    a19c:	6878      	ldr	r0, [r7, #4]
    a19e:	4798      	blx	r3
}
    a1a0:	bf00      	nop
    a1a2:	3710      	adds	r7, #16
    a1a4:	46bd      	mov	sp, r7
    a1a6:	bd80      	pop	{r7, pc}
    a1a8:	00008ef1 	.word	0x00008ef1
    a1ac:	0000905b 	.word	0x0000905b
    a1b0:	00008f0b 	.word	0x00008f0b
    a1b4:	000094b1 	.word	0x000094b1

0000a1b8 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    a1b8:	b580      	push	{r7, lr}
    a1ba:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a1bc:	4b03      	ldr	r3, [pc, #12]	; (a1cc <SERCOM4_0_Handler+0x14>)
    a1be:	681b      	ldr	r3, [r3, #0]
    a1c0:	4618      	mov	r0, r3
    a1c2:	4b03      	ldr	r3, [pc, #12]	; (a1d0 <SERCOM4_0_Handler+0x18>)
    a1c4:	4798      	blx	r3
}
    a1c6:	bf00      	nop
    a1c8:	bd80      	pop	{r7, pc}
    a1ca:	bf00      	nop
    a1cc:	2000238c 	.word	0x2000238c
    a1d0:	0000a111 	.word	0x0000a111

0000a1d4 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    a1d4:	b580      	push	{r7, lr}
    a1d6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a1d8:	4b03      	ldr	r3, [pc, #12]	; (a1e8 <SERCOM4_1_Handler+0x14>)
    a1da:	681b      	ldr	r3, [r3, #0]
    a1dc:	4618      	mov	r0, r3
    a1de:	4b03      	ldr	r3, [pc, #12]	; (a1ec <SERCOM4_1_Handler+0x18>)
    a1e0:	4798      	blx	r3
}
    a1e2:	bf00      	nop
    a1e4:	bd80      	pop	{r7, pc}
    a1e6:	bf00      	nop
    a1e8:	2000238c 	.word	0x2000238c
    a1ec:	0000a111 	.word	0x0000a111

0000a1f0 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    a1f0:	b580      	push	{r7, lr}
    a1f2:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a1f4:	4b03      	ldr	r3, [pc, #12]	; (a204 <SERCOM4_2_Handler+0x14>)
    a1f6:	681b      	ldr	r3, [r3, #0]
    a1f8:	4618      	mov	r0, r3
    a1fa:	4b03      	ldr	r3, [pc, #12]	; (a208 <SERCOM4_2_Handler+0x18>)
    a1fc:	4798      	blx	r3
}
    a1fe:	bf00      	nop
    a200:	bd80      	pop	{r7, pc}
    a202:	bf00      	nop
    a204:	2000238c 	.word	0x2000238c
    a208:	0000a111 	.word	0x0000a111

0000a20c <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    a20c:	b580      	push	{r7, lr}
    a20e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a210:	4b03      	ldr	r3, [pc, #12]	; (a220 <SERCOM4_3_Handler+0x14>)
    a212:	681b      	ldr	r3, [r3, #0]
    a214:	4618      	mov	r0, r3
    a216:	4b03      	ldr	r3, [pc, #12]	; (a224 <SERCOM4_3_Handler+0x18>)
    a218:	4798      	blx	r3
}
    a21a:	bf00      	nop
    a21c:	bd80      	pop	{r7, pc}
    a21e:	bf00      	nop
    a220:	2000238c 	.word	0x2000238c
    a224:	0000a111 	.word	0x0000a111

0000a228 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    a228:	b580      	push	{r7, lr}
    a22a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a22c:	4b03      	ldr	r3, [pc, #12]	; (a23c <SERCOM5_0_Handler+0x14>)
    a22e:	681b      	ldr	r3, [r3, #0]
    a230:	4618      	mov	r0, r3
    a232:	4b03      	ldr	r3, [pc, #12]	; (a240 <SERCOM5_0_Handler+0x18>)
    a234:	4798      	blx	r3
}
    a236:	bf00      	nop
    a238:	bd80      	pop	{r7, pc}
    a23a:	bf00      	nop
    a23c:	20002390 	.word	0x20002390
    a240:	000098ad 	.word	0x000098ad

0000a244 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    a244:	b580      	push	{r7, lr}
    a246:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a248:	4b03      	ldr	r3, [pc, #12]	; (a258 <SERCOM5_1_Handler+0x14>)
    a24a:	681b      	ldr	r3, [r3, #0]
    a24c:	4618      	mov	r0, r3
    a24e:	4b03      	ldr	r3, [pc, #12]	; (a25c <SERCOM5_1_Handler+0x18>)
    a250:	4798      	blx	r3
}
    a252:	bf00      	nop
    a254:	bd80      	pop	{r7, pc}
    a256:	bf00      	nop
    a258:	20002390 	.word	0x20002390
    a25c:	000098ad 	.word	0x000098ad

0000a260 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    a260:	b580      	push	{r7, lr}
    a262:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a264:	4b03      	ldr	r3, [pc, #12]	; (a274 <SERCOM5_2_Handler+0x14>)
    a266:	681b      	ldr	r3, [r3, #0]
    a268:	4618      	mov	r0, r3
    a26a:	4b03      	ldr	r3, [pc, #12]	; (a278 <SERCOM5_2_Handler+0x18>)
    a26c:	4798      	blx	r3
}
    a26e:	bf00      	nop
    a270:	bd80      	pop	{r7, pc}
    a272:	bf00      	nop
    a274:	20002390 	.word	0x20002390
    a278:	000098ad 	.word	0x000098ad

0000a27c <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    a27c:	b580      	push	{r7, lr}
    a27e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a280:	4b03      	ldr	r3, [pc, #12]	; (a290 <SERCOM5_3_Handler+0x14>)
    a282:	681b      	ldr	r3, [r3, #0]
    a284:	4618      	mov	r0, r3
    a286:	4b03      	ldr	r3, [pc, #12]	; (a294 <SERCOM5_3_Handler+0x18>)
    a288:	4798      	blx	r3
}
    a28a:	bf00      	nop
    a28c:	bd80      	pop	{r7, pc}
    a28e:	bf00      	nop
    a290:	20002390 	.word	0x20002390
    a294:	000098ad 	.word	0x000098ad

0000a298 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    a298:	b580      	push	{r7, lr}
    a29a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a29c:	4b03      	ldr	r3, [pc, #12]	; (a2ac <SERCOM7_0_Handler+0x14>)
    a29e:	681b      	ldr	r3, [r3, #0]
    a2a0:	4618      	mov	r0, r3
    a2a2:	4b03      	ldr	r3, [pc, #12]	; (a2b0 <SERCOM7_0_Handler+0x18>)
    a2a4:	4798      	blx	r3
}
    a2a6:	bf00      	nop
    a2a8:	bd80      	pop	{r7, pc}
    a2aa:	bf00      	nop
    a2ac:	20002394 	.word	0x20002394
    a2b0:	000098ad 	.word	0x000098ad

0000a2b4 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    a2b4:	b580      	push	{r7, lr}
    a2b6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a2b8:	4b03      	ldr	r3, [pc, #12]	; (a2c8 <SERCOM7_1_Handler+0x14>)
    a2ba:	681b      	ldr	r3, [r3, #0]
    a2bc:	4618      	mov	r0, r3
    a2be:	4b03      	ldr	r3, [pc, #12]	; (a2cc <SERCOM7_1_Handler+0x18>)
    a2c0:	4798      	blx	r3
}
    a2c2:	bf00      	nop
    a2c4:	bd80      	pop	{r7, pc}
    a2c6:	bf00      	nop
    a2c8:	20002394 	.word	0x20002394
    a2cc:	000098ad 	.word	0x000098ad

0000a2d0 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    a2d0:	b580      	push	{r7, lr}
    a2d2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a2d4:	4b03      	ldr	r3, [pc, #12]	; (a2e4 <SERCOM7_2_Handler+0x14>)
    a2d6:	681b      	ldr	r3, [r3, #0]
    a2d8:	4618      	mov	r0, r3
    a2da:	4b03      	ldr	r3, [pc, #12]	; (a2e8 <SERCOM7_2_Handler+0x18>)
    a2dc:	4798      	blx	r3
}
    a2de:	bf00      	nop
    a2e0:	bd80      	pop	{r7, pc}
    a2e2:	bf00      	nop
    a2e4:	20002394 	.word	0x20002394
    a2e8:	000098ad 	.word	0x000098ad

0000a2ec <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    a2ec:	b580      	push	{r7, lr}
    a2ee:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a2f0:	4b03      	ldr	r3, [pc, #12]	; (a300 <SERCOM7_3_Handler+0x14>)
    a2f2:	681b      	ldr	r3, [r3, #0]
    a2f4:	4618      	mov	r0, r3
    a2f6:	4b03      	ldr	r3, [pc, #12]	; (a304 <SERCOM7_3_Handler+0x18>)
    a2f8:	4798      	blx	r3
}
    a2fa:	bf00      	nop
    a2fc:	bd80      	pop	{r7, pc}
    a2fe:	bf00      	nop
    a300:	20002394 	.word	0x20002394
    a304:	000098ad 	.word	0x000098ad

0000a308 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    a308:	b580      	push	{r7, lr}
    a30a:	b084      	sub	sp, #16
    a30c:	af00      	add	r7, sp, #0
    a30e:	6078      	str	r0, [r7, #4]
    a310:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    a312:	683b      	ldr	r3, [r7, #0]
    a314:	4618      	mov	r0, r3
    a316:	4b35      	ldr	r3, [pc, #212]	; (a3ec <_spi_m_sync_init+0xe4>)
    a318:	4798      	blx	r3
    a31a:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    a31c:	687b      	ldr	r3, [r7, #4]
    a31e:	2b00      	cmp	r3, #0
    a320:	d004      	beq.n	a32c <_spi_m_sync_init+0x24>
    a322:	683b      	ldr	r3, [r7, #0]
    a324:	2b00      	cmp	r3, #0
    a326:	d001      	beq.n	a32c <_spi_m_sync_init+0x24>
    a328:	2301      	movs	r3, #1
    a32a:	e000      	b.n	a32e <_spi_m_sync_init+0x26>
    a32c:	2300      	movs	r3, #0
    a32e:	f003 0301 	and.w	r3, r3, #1
    a332:	b2db      	uxtb	r3, r3
    a334:	f640 12e9 	movw	r2, #2537	; 0x9e9
    a338:	492d      	ldr	r1, [pc, #180]	; (a3f0 <_spi_m_sync_init+0xe8>)
    a33a:	4618      	mov	r0, r3
    a33c:	4b2d      	ldr	r3, [pc, #180]	; (a3f4 <_spi_m_sync_init+0xec>)
    a33e:	4798      	blx	r3

	if (regs == NULL) {
    a340:	68fb      	ldr	r3, [r7, #12]
    a342:	2b00      	cmp	r3, #0
    a344:	d102      	bne.n	a34c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    a346:	f06f 030c 	mvn.w	r3, #12
    a34a:	e04a      	b.n	a3e2 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    a34c:	2101      	movs	r1, #1
    a34e:	6838      	ldr	r0, [r7, #0]
    a350:	4b29      	ldr	r3, [pc, #164]	; (a3f8 <_spi_m_sync_init+0xf0>)
    a352:	4798      	blx	r3
    a354:	4603      	mov	r3, r0
    a356:	f083 0301 	eor.w	r3, r3, #1
    a35a:	b2db      	uxtb	r3, r3
    a35c:	2b00      	cmp	r3, #0
    a35e:	d019      	beq.n	a394 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    a360:	68fb      	ldr	r3, [r7, #12]
    a362:	681b      	ldr	r3, [r3, #0]
    a364:	f003 031c 	and.w	r3, r3, #28
    a368:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    a36a:	2102      	movs	r1, #2
    a36c:	6838      	ldr	r0, [r7, #0]
    a36e:	4b23      	ldr	r3, [pc, #140]	; (a3fc <_spi_m_sync_init+0xf4>)
    a370:	4798      	blx	r3
    a372:	4603      	mov	r3, r0
    a374:	2b00      	cmp	r3, #0
    a376:	d006      	beq.n	a386 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    a378:	6838      	ldr	r0, [r7, #0]
    a37a:	4b21      	ldr	r3, [pc, #132]	; (a400 <_spi_m_sync_init+0xf8>)
    a37c:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    a37e:	2102      	movs	r1, #2
    a380:	6838      	ldr	r0, [r7, #0]
    a382:	4b20      	ldr	r3, [pc, #128]	; (a404 <_spi_m_sync_init+0xfc>)
    a384:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    a386:	68bb      	ldr	r3, [r7, #8]
    a388:	f043 0301 	orr.w	r3, r3, #1
    a38c:	4619      	mov	r1, r3
    a38e:	6838      	ldr	r0, [r7, #0]
    a390:	4b1d      	ldr	r3, [pc, #116]	; (a408 <_spi_m_sync_init+0x100>)
    a392:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    a394:	2101      	movs	r1, #1
    a396:	6838      	ldr	r0, [r7, #0]
    a398:	4b1a      	ldr	r3, [pc, #104]	; (a404 <_spi_m_sync_init+0xfc>)
    a39a:	4798      	blx	r3

	dev->prvt = hw;
    a39c:	687b      	ldr	r3, [r7, #4]
    a39e:	683a      	ldr	r2, [r7, #0]
    a3a0:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    a3a2:	68fb      	ldr	r3, [r7, #12]
    a3a4:	681b      	ldr	r3, [r3, #0]
    a3a6:	f003 031c 	and.w	r3, r3, #28
    a3aa:	2b08      	cmp	r3, #8
    a3ac:	d104      	bne.n	a3b8 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    a3ae:	68f9      	ldr	r1, [r7, #12]
    a3b0:	6838      	ldr	r0, [r7, #0]
    a3b2:	4b16      	ldr	r3, [pc, #88]	; (a40c <_spi_m_sync_init+0x104>)
    a3b4:	4798      	blx	r3
    a3b6:	e003      	b.n	a3c0 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    a3b8:	68f9      	ldr	r1, [r7, #12]
    a3ba:	6838      	ldr	r0, [r7, #0]
    a3bc:	4b14      	ldr	r3, [pc, #80]	; (a410 <_spi_m_sync_init+0x108>)
    a3be:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    a3c0:	68fb      	ldr	r3, [r7, #12]
    a3c2:	685b      	ldr	r3, [r3, #4]
    a3c4:	f003 0307 	and.w	r3, r3, #7
    a3c8:	2b00      	cmp	r3, #0
    a3ca:	d101      	bne.n	a3d0 <_spi_m_sync_init+0xc8>
    a3cc:	2201      	movs	r2, #1
    a3ce:	e000      	b.n	a3d2 <_spi_m_sync_init+0xca>
    a3d0:	2202      	movs	r2, #2
    a3d2:	687b      	ldr	r3, [r7, #4]
    a3d4:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    a3d6:	68fb      	ldr	r3, [r7, #12]
    a3d8:	89db      	ldrh	r3, [r3, #14]
    a3da:	b29a      	uxth	r2, r3
    a3dc:	687b      	ldr	r3, [r7, #4]
    a3de:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    a3e0:	2300      	movs	r3, #0
}
    a3e2:	4618      	mov	r0, r3
    a3e4:	3710      	adds	r7, #16
    a3e6:	46bd      	mov	sp, r7
    a3e8:	bd80      	pop	{r7, pc}
    a3ea:	bf00      	nop
    a3ec:	0000a0b5 	.word	0x0000a0b5
    a3f0:	0001a850 	.word	0x0001a850
    a3f4:	00006241 	.word	0x00006241
    a3f8:	00008e35 	.word	0x00008e35
    a3fc:	000091d1 	.word	0x000091d1
    a400:	000091a9 	.word	0x000091a9
    a404:	00008e11 	.word	0x00008e11
    a408:	00009201 	.word	0x00009201
    a40c:	0000a009 	.word	0x0000a009
    a410:	00009f75 	.word	0x00009f75

0000a414 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    a414:	b580      	push	{r7, lr}
    a416:	b086      	sub	sp, #24
    a418:	af00      	add	r7, sp, #0
    a41a:	6078      	str	r0, [r7, #4]
    a41c:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    a41e:	687b      	ldr	r3, [r7, #4]
    a420:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    a422:	6839      	ldr	r1, [r7, #0]
    a424:	6878      	ldr	r0, [r7, #4]
    a426:	4b1a      	ldr	r3, [pc, #104]	; (a490 <_spi_m_async_init+0x7c>)
    a428:	4798      	blx	r3
    a42a:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    a42c:	68bb      	ldr	r3, [r7, #8]
    a42e:	2b00      	cmp	r3, #0
    a430:	da01      	bge.n	a436 <_spi_m_async_init+0x22>
		return rc;
    a432:	68bb      	ldr	r3, [r7, #8]
    a434:	e028      	b.n	a488 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    a436:	6879      	ldr	r1, [r7, #4]
    a438:	6838      	ldr	r0, [r7, #0]
    a43a:	4b16      	ldr	r3, [pc, #88]	; (a494 <_spi_m_async_init+0x80>)
    a43c:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    a43e:	68fb      	ldr	r3, [r7, #12]
    a440:	2200      	movs	r2, #0
    a442:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    a444:	68fb      	ldr	r3, [r7, #12]
    a446:	2200      	movs	r2, #0
    a448:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    a44a:	68fb      	ldr	r3, [r7, #12]
    a44c:	2200      	movs	r2, #0
    a44e:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    a450:	6838      	ldr	r0, [r7, #0]
    a452:	4b11      	ldr	r3, [pc, #68]	; (a498 <_spi_m_async_init+0x84>)
    a454:	4798      	blx	r3
    a456:	4603      	mov	r3, r0
    a458:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    a45a:	2300      	movs	r3, #0
    a45c:	613b      	str	r3, [r7, #16]
    a45e:	e00f      	b.n	a480 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    a460:	7dfb      	ldrb	r3, [r7, #23]
    a462:	b21b      	sxth	r3, r3
    a464:	4618      	mov	r0, r3
    a466:	4b0d      	ldr	r3, [pc, #52]	; (a49c <_spi_m_async_init+0x88>)
    a468:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    a46a:	7dfb      	ldrb	r3, [r7, #23]
    a46c:	b21b      	sxth	r3, r3
    a46e:	4618      	mov	r0, r3
    a470:	4b0b      	ldr	r3, [pc, #44]	; (a4a0 <_spi_m_async_init+0x8c>)
    a472:	4798      	blx	r3
		irq++;
    a474:	7dfb      	ldrb	r3, [r7, #23]
    a476:	3301      	adds	r3, #1
    a478:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    a47a:	693b      	ldr	r3, [r7, #16]
    a47c:	3301      	adds	r3, #1
    a47e:	613b      	str	r3, [r7, #16]
    a480:	693b      	ldr	r3, [r7, #16]
    a482:	2b03      	cmp	r3, #3
    a484:	d9ec      	bls.n	a460 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    a486:	2300      	movs	r3, #0
}
    a488:	4618      	mov	r0, r3
    a48a:	3718      	adds	r7, #24
    a48c:	46bd      	mov	sp, r7
    a48e:	bd80      	pop	{r7, pc}
    a490:	0000a309 	.word	0x0000a309
    a494:	000095a5 	.word	0x000095a5
    a498:	000099f1 	.word	0x000099f1
    a49c:	00008d45 	.word	0x00008d45
    a4a0:	00008d89 	.word	0x00008d89

0000a4a4 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    a4a4:	b580      	push	{r7, lr}
    a4a6:	b082      	sub	sp, #8
    a4a8:	af00      	add	r7, sp, #0
    a4aa:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    a4ac:	687b      	ldr	r3, [r7, #4]
    a4ae:	2b00      	cmp	r3, #0
    a4b0:	d005      	beq.n	a4be <_spi_m_sync_enable+0x1a>
    a4b2:	687b      	ldr	r3, [r7, #4]
    a4b4:	681b      	ldr	r3, [r3, #0]
    a4b6:	2b00      	cmp	r3, #0
    a4b8:	d001      	beq.n	a4be <_spi_m_sync_enable+0x1a>
    a4ba:	2301      	movs	r3, #1
    a4bc:	e000      	b.n	a4c0 <_spi_m_sync_enable+0x1c>
    a4be:	2300      	movs	r3, #0
    a4c0:	f003 0301 	and.w	r3, r3, #1
    a4c4:	b2db      	uxtb	r3, r3
    a4c6:	f640 2248 	movw	r2, #2632	; 0xa48
    a4ca:	4907      	ldr	r1, [pc, #28]	; (a4e8 <_spi_m_sync_enable+0x44>)
    a4cc:	4618      	mov	r0, r3
    a4ce:	4b07      	ldr	r3, [pc, #28]	; (a4ec <_spi_m_sync_enable+0x48>)
    a4d0:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    a4d2:	687b      	ldr	r3, [r7, #4]
    a4d4:	681b      	ldr	r3, [r3, #0]
    a4d6:	4618      	mov	r0, r3
    a4d8:	4b05      	ldr	r3, [pc, #20]	; (a4f0 <_spi_m_sync_enable+0x4c>)
    a4da:	4798      	blx	r3
    a4dc:	4603      	mov	r3, r0
}
    a4de:	4618      	mov	r0, r3
    a4e0:	3708      	adds	r7, #8
    a4e2:	46bd      	mov	sp, r7
    a4e4:	bd80      	pop	{r7, pc}
    a4e6:	bf00      	nop
    a4e8:	0001a850 	.word	0x0001a850
    a4ec:	00006241 	.word	0x00006241
    a4f0:	00009f0d 	.word	0x00009f0d

0000a4f4 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    a4f4:	b580      	push	{r7, lr}
    a4f6:	b082      	sub	sp, #8
    a4f8:	af00      	add	r7, sp, #0
    a4fa:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    a4fc:	687b      	ldr	r3, [r7, #4]
    a4fe:	2b00      	cmp	r3, #0
    a500:	d005      	beq.n	a50e <_spi_m_sync_disable+0x1a>
    a502:	687b      	ldr	r3, [r7, #4]
    a504:	681b      	ldr	r3, [r3, #0]
    a506:	2b00      	cmp	r3, #0
    a508:	d001      	beq.n	a50e <_spi_m_sync_disable+0x1a>
    a50a:	2301      	movs	r3, #1
    a50c:	e000      	b.n	a510 <_spi_m_sync_disable+0x1c>
    a50e:	2300      	movs	r3, #0
    a510:	f003 0301 	and.w	r3, r3, #1
    a514:	b2db      	uxtb	r3, r3
    a516:	f640 2264 	movw	r2, #2660	; 0xa64
    a51a:	4907      	ldr	r1, [pc, #28]	; (a538 <_spi_m_sync_disable+0x44>)
    a51c:	4618      	mov	r0, r3
    a51e:	4b07      	ldr	r3, [pc, #28]	; (a53c <_spi_m_sync_disable+0x48>)
    a520:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    a522:	687b      	ldr	r3, [r7, #4]
    a524:	681b      	ldr	r3, [r3, #0]
    a526:	4618      	mov	r0, r3
    a528:	4b05      	ldr	r3, [pc, #20]	; (a540 <_spi_m_sync_disable+0x4c>)
    a52a:	4798      	blx	r3
    a52c:	4603      	mov	r3, r0
}
    a52e:	4618      	mov	r0, r3
    a530:	3708      	adds	r7, #8
    a532:	46bd      	mov	sp, r7
    a534:	bd80      	pop	{r7, pc}
    a536:	bf00      	nop
    a538:	0001a850 	.word	0x0001a850
    a53c:	00006241 	.word	0x00006241
    a540:	00009f41 	.word	0x00009f41

0000a544 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    a544:	b580      	push	{r7, lr}
    a546:	b082      	sub	sp, #8
    a548:	af00      	add	r7, sp, #0
    a54a:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    a54c:	bf00      	nop
    a54e:	2103      	movs	r1, #3
    a550:	6878      	ldr	r0, [r7, #4]
    a552:	4b06      	ldr	r3, [pc, #24]	; (a56c <_spi_wait_bus_idle+0x28>)
    a554:	4798      	blx	r3
    a556:	4603      	mov	r3, r0
    a558:	2b00      	cmp	r3, #0
    a55a:	d0f8      	beq.n	a54e <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    a55c:	2103      	movs	r1, #3
    a55e:	6878      	ldr	r0, [r7, #4]
    a560:	4b03      	ldr	r3, [pc, #12]	; (a570 <_spi_wait_bus_idle+0x2c>)
    a562:	4798      	blx	r3
}
    a564:	bf00      	nop
    a566:	3708      	adds	r7, #8
    a568:	46bd      	mov	sp, r7
    a56a:	bd80      	pop	{r7, pc}
    a56c:	00008ec9 	.word	0x00008ec9
    a570:	00008f0b 	.word	0x00008f0b

0000a574 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    a574:	b580      	push	{r7, lr}
    a576:	b086      	sub	sp, #24
    a578:	af00      	add	r7, sp, #0
    a57a:	60f8      	str	r0, [r7, #12]
    a57c:	60b9      	str	r1, [r7, #8]
    a57e:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    a580:	68bb      	ldr	r3, [r7, #8]
    a582:	f003 0304 	and.w	r3, r3, #4
    a586:	2b00      	cmp	r3, #0
    a588:	d101      	bne.n	a58e <_spi_rx_check_and_receive+0x1a>
		return false;
    a58a:	2300      	movs	r3, #0
    a58c:	e022      	b.n	a5d4 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    a58e:	68f8      	ldr	r0, [r7, #12]
    a590:	4b12      	ldr	r3, [pc, #72]	; (a5dc <_spi_rx_check_and_receive+0x68>)
    a592:	4798      	blx	r3
    a594:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    a596:	687b      	ldr	r3, [r7, #4]
    a598:	685b      	ldr	r3, [r3, #4]
    a59a:	2b00      	cmp	r3, #0
    a59c:	d014      	beq.n	a5c8 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    a59e:	687b      	ldr	r3, [r7, #4]
    a5a0:	685b      	ldr	r3, [r3, #4]
    a5a2:	1c59      	adds	r1, r3, #1
    a5a4:	687a      	ldr	r2, [r7, #4]
    a5a6:	6051      	str	r1, [r2, #4]
    a5a8:	697a      	ldr	r2, [r7, #20]
    a5aa:	b2d2      	uxtb	r2, r2
    a5ac:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    a5ae:	687b      	ldr	r3, [r7, #4]
    a5b0:	7c1b      	ldrb	r3, [r3, #16]
    a5b2:	2b01      	cmp	r3, #1
    a5b4:	d908      	bls.n	a5c8 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    a5b6:	687b      	ldr	r3, [r7, #4]
    a5b8:	685b      	ldr	r3, [r3, #4]
    a5ba:	1c59      	adds	r1, r3, #1
    a5bc:	687a      	ldr	r2, [r7, #4]
    a5be:	6051      	str	r1, [r2, #4]
    a5c0:	697a      	ldr	r2, [r7, #20]
    a5c2:	0a12      	lsrs	r2, r2, #8
    a5c4:	b2d2      	uxtb	r2, r2
    a5c6:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    a5c8:	687b      	ldr	r3, [r7, #4]
    a5ca:	68db      	ldr	r3, [r3, #12]
    a5cc:	1c5a      	adds	r2, r3, #1
    a5ce:	687b      	ldr	r3, [r7, #4]
    a5d0:	60da      	str	r2, [r3, #12]

	return true;
    a5d2:	2301      	movs	r3, #1
}
    a5d4:	4618      	mov	r0, r3
    a5d6:	3718      	adds	r7, #24
    a5d8:	46bd      	mov	sp, r7
    a5da:	bd80      	pop	{r7, pc}
    a5dc:	00009479 	.word	0x00009479

0000a5e0 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    a5e0:	b580      	push	{r7, lr}
    a5e2:	b086      	sub	sp, #24
    a5e4:	af00      	add	r7, sp, #0
    a5e6:	60f8      	str	r0, [r7, #12]
    a5e8:	60b9      	str	r1, [r7, #8]
    a5ea:	607a      	str	r2, [r7, #4]
    a5ec:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    a5ee:	68bb      	ldr	r3, [r7, #8]
    a5f0:	f003 0301 	and.w	r3, r3, #1
    a5f4:	2b00      	cmp	r3, #0
    a5f6:	d028      	beq.n	a64a <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    a5f8:	687b      	ldr	r3, [r7, #4]
    a5fa:	681b      	ldr	r3, [r3, #0]
    a5fc:	2b00      	cmp	r3, #0
    a5fe:	d018      	beq.n	a632 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    a600:	687b      	ldr	r3, [r7, #4]
    a602:	681b      	ldr	r3, [r3, #0]
    a604:	1c59      	adds	r1, r3, #1
    a606:	687a      	ldr	r2, [r7, #4]
    a608:	6011      	str	r1, [r2, #0]
    a60a:	781b      	ldrb	r3, [r3, #0]
    a60c:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    a60e:	687b      	ldr	r3, [r7, #4]
    a610:	7c1b      	ldrb	r3, [r3, #16]
    a612:	2b01      	cmp	r3, #1
    a614:	d90f      	bls.n	a636 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    a616:	687b      	ldr	r3, [r7, #4]
    a618:	681b      	ldr	r3, [r3, #0]
    a61a:	781b      	ldrb	r3, [r3, #0]
    a61c:	021b      	lsls	r3, r3, #8
    a61e:	461a      	mov	r2, r3
    a620:	697b      	ldr	r3, [r7, #20]
    a622:	4313      	orrs	r3, r2
    a624:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    a626:	687b      	ldr	r3, [r7, #4]
    a628:	681b      	ldr	r3, [r3, #0]
    a62a:	1c5a      	adds	r2, r3, #1
    a62c:	687b      	ldr	r3, [r7, #4]
    a62e:	601a      	str	r2, [r3, #0]
    a630:	e001      	b.n	a636 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    a632:	887b      	ldrh	r3, [r7, #2]
    a634:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    a636:	687b      	ldr	r3, [r7, #4]
    a638:	689b      	ldr	r3, [r3, #8]
    a63a:	1c5a      	adds	r2, r3, #1
    a63c:	687b      	ldr	r3, [r7, #4]
    a63e:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    a640:	6979      	ldr	r1, [r7, #20]
    a642:	68f8      	ldr	r0, [r7, #12]
    a644:	4b03      	ldr	r3, [pc, #12]	; (a654 <_spi_tx_check_and_send+0x74>)
    a646:	4798      	blx	r3
    a648:	e000      	b.n	a64c <_spi_tx_check_and_send+0x6c>
		return;
    a64a:	bf00      	nop
}
    a64c:	3718      	adds	r7, #24
    a64e:	46bd      	mov	sp, r7
    a650:	bd80      	pop	{r7, pc}
    a652:	bf00      	nop
    a654:	0000945d 	.word	0x0000945d

0000a658 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    a658:	b580      	push	{r7, lr}
    a65a:	b082      	sub	sp, #8
    a65c:	af00      	add	r7, sp, #0
    a65e:	6078      	str	r0, [r7, #4]
    a660:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    a662:	687b      	ldr	r3, [r7, #4]
    a664:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a668:	2b00      	cmp	r3, #0
    a66a:	d00b      	beq.n	a684 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    a66c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a670:	6838      	ldr	r0, [r7, #0]
    a672:	4b07      	ldr	r3, [pc, #28]	; (a690 <_spi_err_check+0x38>)
    a674:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    a676:	2180      	movs	r1, #128	; 0x80
    a678:	6838      	ldr	r0, [r7, #0]
    a67a:	4b06      	ldr	r3, [pc, #24]	; (a694 <_spi_err_check+0x3c>)
    a67c:	4798      	blx	r3
		return ERR_OVERFLOW;
    a67e:	f06f 0312 	mvn.w	r3, #18
    a682:	e000      	b.n	a686 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    a684:	2300      	movs	r3, #0
}
    a686:	4618      	mov	r0, r3
    a688:	3708      	adds	r7, #8
    a68a:	46bd      	mov	sp, r7
    a68c:	bd80      	pop	{r7, pc}
    a68e:	bf00      	nop
    a690:	000094b1 	.word	0x000094b1
    a694:	00008f0b 	.word	0x00008f0b

0000a698 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    a698:	b590      	push	{r4, r7, lr}
    a69a:	b08b      	sub	sp, #44	; 0x2c
    a69c:	af00      	add	r7, sp, #0
    a69e:	6078      	str	r0, [r7, #4]
    a6a0:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    a6a2:	687b      	ldr	r3, [r7, #4]
    a6a4:	681b      	ldr	r3, [r3, #0]
    a6a6:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    a6a8:	2300      	movs	r3, #0
    a6aa:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    a6ac:	683b      	ldr	r3, [r7, #0]
    a6ae:	681b      	ldr	r3, [r3, #0]
    a6b0:	60bb      	str	r3, [r7, #8]
    a6b2:	683b      	ldr	r3, [r7, #0]
    a6b4:	685b      	ldr	r3, [r3, #4]
    a6b6:	60fb      	str	r3, [r7, #12]
    a6b8:	2300      	movs	r3, #0
    a6ba:	613b      	str	r3, [r7, #16]
    a6bc:	2300      	movs	r3, #0
    a6be:	617b      	str	r3, [r7, #20]
    a6c0:	687b      	ldr	r3, [r7, #4]
    a6c2:	791b      	ldrb	r3, [r3, #4]
    a6c4:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    a6c6:	687b      	ldr	r3, [r7, #4]
    a6c8:	2b00      	cmp	r3, #0
    a6ca:	d004      	beq.n	a6d6 <_spi_m_sync_trans+0x3e>
    a6cc:	6a3b      	ldr	r3, [r7, #32]
    a6ce:	2b00      	cmp	r3, #0
    a6d0:	d001      	beq.n	a6d6 <_spi_m_sync_trans+0x3e>
    a6d2:	2301      	movs	r3, #1
    a6d4:	e000      	b.n	a6d8 <_spi_m_sync_trans+0x40>
    a6d6:	2300      	movs	r3, #0
    a6d8:	f003 0301 	and.w	r3, r3, #1
    a6dc:	b2db      	uxtb	r3, r3
    a6de:	f640 324d 	movw	r2, #2893	; 0xb4d
    a6e2:	492b      	ldr	r1, [pc, #172]	; (a790 <_spi_m_sync_trans+0xf8>)
    a6e4:	4618      	mov	r0, r3
    a6e6:	4b2b      	ldr	r3, [pc, #172]	; (a794 <_spi_m_sync_trans+0xfc>)
    a6e8:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    a6ea:	2107      	movs	r1, #7
    a6ec:	6a38      	ldr	r0, [r7, #32]
    a6ee:	4b2a      	ldr	r3, [pc, #168]	; (a798 <_spi_m_sync_trans+0x100>)
    a6f0:	4798      	blx	r3
    a6f2:	4603      	mov	r3, r0
    a6f4:	2b00      	cmp	r3, #0
    a6f6:	d002      	beq.n	a6fe <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    a6f8:	f06f 0303 	mvn.w	r3, #3
    a6fc:	e043      	b.n	a786 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    a6fe:	6a38      	ldr	r0, [r7, #32]
    a700:	4b26      	ldr	r3, [pc, #152]	; (a79c <_spi_m_sync_trans+0x104>)
    a702:	4798      	blx	r3
    a704:	4603      	mov	r3, r0
    a706:	f083 0301 	eor.w	r3, r3, #1
    a70a:	b2db      	uxtb	r3, r3
    a70c:	2b00      	cmp	r3, #0
    a70e:	d002      	beq.n	a716 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    a710:	f06f 0313 	mvn.w	r3, #19
    a714:	e037      	b.n	a786 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    a716:	6a38      	ldr	r0, [r7, #32]
    a718:	4b21      	ldr	r3, [pc, #132]	; (a7a0 <_spi_m_sync_trans+0x108>)
    a71a:	4798      	blx	r3
    a71c:	4603      	mov	r3, r0
    a71e:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    a720:	f107 0308 	add.w	r3, r7, #8
    a724:	461a      	mov	r2, r3
    a726:	69f9      	ldr	r1, [r7, #28]
    a728:	6a38      	ldr	r0, [r7, #32]
    a72a:	4b1e      	ldr	r3, [pc, #120]	; (a7a4 <_spi_m_sync_trans+0x10c>)
    a72c:	4798      	blx	r3
    a72e:	4603      	mov	r3, r0
    a730:	f083 0301 	eor.w	r3, r3, #1
    a734:	b2db      	uxtb	r3, r3
    a736:	2b00      	cmp	r3, #0
    a738:	d00b      	beq.n	a752 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    a73a:	697a      	ldr	r2, [r7, #20]
    a73c:	693b      	ldr	r3, [r7, #16]
    a73e:	429a      	cmp	r2, r3
    a740:	d307      	bcc.n	a752 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    a742:	687b      	ldr	r3, [r7, #4]
    a744:	88db      	ldrh	r3, [r3, #6]
    a746:	f107 0208 	add.w	r2, r7, #8
    a74a:	69f9      	ldr	r1, [r7, #28]
    a74c:	6a38      	ldr	r0, [r7, #32]
    a74e:	4c16      	ldr	r4, [pc, #88]	; (a7a8 <_spi_m_sync_trans+0x110>)
    a750:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    a752:	6a39      	ldr	r1, [r7, #32]
    a754:	69f8      	ldr	r0, [r7, #28]
    a756:	4b15      	ldr	r3, [pc, #84]	; (a7ac <_spi_m_sync_trans+0x114>)
    a758:	4798      	blx	r3
    a75a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a75e:	2b00      	cmp	r3, #0
    a760:	db0c      	blt.n	a77c <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    a762:	693a      	ldr	r2, [r7, #16]
    a764:	683b      	ldr	r3, [r7, #0]
    a766:	689b      	ldr	r3, [r3, #8]
    a768:	429a      	cmp	r2, r3
    a76a:	d3d4      	bcc.n	a716 <_spi_m_sync_trans+0x7e>
    a76c:	697a      	ldr	r2, [r7, #20]
    a76e:	683b      	ldr	r3, [r7, #0]
    a770:	689b      	ldr	r3, [r3, #8]
    a772:	429a      	cmp	r2, r3
    a774:	d3cf      	bcc.n	a716 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    a776:	693b      	ldr	r3, [r7, #16]
    a778:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    a77a:	e000      	b.n	a77e <_spi_m_sync_trans+0xe6>
			break;
    a77c:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    a77e:	6a38      	ldr	r0, [r7, #32]
    a780:	4b0b      	ldr	r3, [pc, #44]	; (a7b0 <_spi_m_sync_trans+0x118>)
    a782:	4798      	blx	r3

	return rc;
    a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    a786:	4618      	mov	r0, r3
    a788:	372c      	adds	r7, #44	; 0x2c
    a78a:	46bd      	mov	sp, r7
    a78c:	bd90      	pop	{r4, r7, pc}
    a78e:	bf00      	nop
    a790:	0001a850 	.word	0x0001a850
    a794:	00006241 	.word	0x00006241
    a798:	00008e35 	.word	0x00008e35
    a79c:	00009171 	.word	0x00009171
    a7a0:	00008ef1 	.word	0x00008ef1
    a7a4:	0000a575 	.word	0x0000a575
    a7a8:	0000a5e1 	.word	0x0000a5e1
    a7ac:	0000a659 	.word	0x0000a659
    a7b0:	0000a545 	.word	0x0000a545

0000a7b4 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    a7b4:	b580      	push	{r7, lr}
    a7b6:	b084      	sub	sp, #16
    a7b8:	af00      	add	r7, sp, #0
    a7ba:	6078      	str	r0, [r7, #4]
    a7bc:	460b      	mov	r3, r1
    a7be:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    a7c0:	687b      	ldr	r3, [r7, #4]
    a7c2:	681b      	ldr	r3, [r3, #0]
    a7c4:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    a7c6:	687b      	ldr	r3, [r7, #4]
    a7c8:	2b00      	cmp	r3, #0
    a7ca:	d004      	beq.n	a7d6 <_spi_m_async_enable_tx+0x22>
    a7cc:	68fb      	ldr	r3, [r7, #12]
    a7ce:	2b00      	cmp	r3, #0
    a7d0:	d001      	beq.n	a7d6 <_spi_m_async_enable_tx+0x22>
    a7d2:	2301      	movs	r3, #1
    a7d4:	e000      	b.n	a7d8 <_spi_m_async_enable_tx+0x24>
    a7d6:	2300      	movs	r3, #0
    a7d8:	f003 0301 	and.w	r3, r3, #1
    a7dc:	b2db      	uxtb	r3, r3
    a7de:	f640 3279 	movw	r2, #2937	; 0xb79
    a7e2:	4909      	ldr	r1, [pc, #36]	; (a808 <_spi_m_async_enable_tx+0x54>)
    a7e4:	4618      	mov	r0, r3
    a7e6:	4b09      	ldr	r3, [pc, #36]	; (a80c <_spi_m_async_enable_tx+0x58>)
    a7e8:	4798      	blx	r3

	if (state) {
    a7ea:	78fb      	ldrb	r3, [r7, #3]
    a7ec:	2b00      	cmp	r3, #0
    a7ee:	d003      	beq.n	a7f8 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    a7f0:	68f8      	ldr	r0, [r7, #12]
    a7f2:	4b07      	ldr	r3, [pc, #28]	; (a810 <_spi_m_async_enable_tx+0x5c>)
    a7f4:	4798      	blx	r3
    a7f6:	e002      	b.n	a7fe <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    a7f8:	68f8      	ldr	r0, [r7, #12]
    a7fa:	4b06      	ldr	r3, [pc, #24]	; (a814 <_spi_m_async_enable_tx+0x60>)
    a7fc:	4798      	blx	r3
	}

	return ERR_NONE;
    a7fe:	2300      	movs	r3, #0
}
    a800:	4618      	mov	r0, r3
    a802:	3710      	adds	r7, #16
    a804:	46bd      	mov	sp, r7
    a806:	bd80      	pop	{r7, pc}
    a808:	0001a850 	.word	0x0001a850
    a80c:	00006241 	.word	0x00006241
    a810:	00008fbf 	.word	0x00008fbf
    a814:	00008fd9 	.word	0x00008fd9

0000a818 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    a818:	b580      	push	{r7, lr}
    a81a:	b084      	sub	sp, #16
    a81c:	af00      	add	r7, sp, #0
    a81e:	6078      	str	r0, [r7, #4]
    a820:	460b      	mov	r3, r1
    a822:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    a824:	687b      	ldr	r3, [r7, #4]
    a826:	681b      	ldr	r3, [r3, #0]
    a828:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    a82a:	687b      	ldr	r3, [r7, #4]
    a82c:	2b00      	cmp	r3, #0
    a82e:	bf14      	ite	ne
    a830:	2301      	movne	r3, #1
    a832:	2300      	moveq	r3, #0
    a834:	b2db      	uxtb	r3, r3
    a836:	f640 328d 	movw	r2, #2957	; 0xb8d
    a83a:	490f      	ldr	r1, [pc, #60]	; (a878 <_spi_m_async_enable_rx+0x60>)
    a83c:	4618      	mov	r0, r3
    a83e:	4b0f      	ldr	r3, [pc, #60]	; (a87c <_spi_m_async_enable_rx+0x64>)
    a840:	4798      	blx	r3
	ASSERT(hw);
    a842:	68fb      	ldr	r3, [r7, #12]
    a844:	2b00      	cmp	r3, #0
    a846:	bf14      	ite	ne
    a848:	2301      	movne	r3, #1
    a84a:	2300      	moveq	r3, #0
    a84c:	b2db      	uxtb	r3, r3
    a84e:	f640 328e 	movw	r2, #2958	; 0xb8e
    a852:	4909      	ldr	r1, [pc, #36]	; (a878 <_spi_m_async_enable_rx+0x60>)
    a854:	4618      	mov	r0, r3
    a856:	4b09      	ldr	r3, [pc, #36]	; (a87c <_spi_m_async_enable_rx+0x64>)
    a858:	4798      	blx	r3

	if (state) {
    a85a:	78fb      	ldrb	r3, [r7, #3]
    a85c:	2b00      	cmp	r3, #0
    a85e:	d003      	beq.n	a868 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    a860:	68f8      	ldr	r0, [r7, #12]
    a862:	4b07      	ldr	r3, [pc, #28]	; (a880 <_spi_m_async_enable_rx+0x68>)
    a864:	4798      	blx	r3
    a866:	e002      	b.n	a86e <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    a868:	68f8      	ldr	r0, [r7, #12]
    a86a:	4b06      	ldr	r3, [pc, #24]	; (a884 <_spi_m_async_enable_rx+0x6c>)
    a86c:	4798      	blx	r3
	}

	return ERR_NONE;
    a86e:	2300      	movs	r3, #0
}
    a870:	4618      	mov	r0, r3
    a872:	3710      	adds	r7, #16
    a874:	46bd      	mov	sp, r7
    a876:	bd80      	pop	{r7, pc}
    a878:	0001a850 	.word	0x0001a850
    a87c:	00006241 	.word	0x00006241
    a880:	00009027 	.word	0x00009027
    a884:	00009041 	.word	0x00009041

0000a888 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    a888:	b580      	push	{r7, lr}
    a88a:	b082      	sub	sp, #8
    a88c:	af00      	add	r7, sp, #0
    a88e:	6078      	str	r0, [r7, #4]
    a890:	460b      	mov	r3, r1
    a892:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    a894:	687b      	ldr	r3, [r7, #4]
    a896:	2b00      	cmp	r3, #0
    a898:	d005      	beq.n	a8a6 <_spi_m_async_enable_tx_complete+0x1e>
    a89a:	687b      	ldr	r3, [r7, #4]
    a89c:	681b      	ldr	r3, [r3, #0]
    a89e:	2b00      	cmp	r3, #0
    a8a0:	d001      	beq.n	a8a6 <_spi_m_async_enable_tx_complete+0x1e>
    a8a2:	2301      	movs	r3, #1
    a8a4:	e000      	b.n	a8a8 <_spi_m_async_enable_tx_complete+0x20>
    a8a6:	2300      	movs	r3, #0
    a8a8:	f003 0301 	and.w	r3, r3, #1
    a8ac:	b2db      	uxtb	r3, r3
    a8ae:	f44f 623a 	mov.w	r2, #2976	; 0xba0
    a8b2:	490b      	ldr	r1, [pc, #44]	; (a8e0 <_spi_m_async_enable_tx_complete+0x58>)
    a8b4:	4618      	mov	r0, r3
    a8b6:	4b0b      	ldr	r3, [pc, #44]	; (a8e4 <_spi_m_async_enable_tx_complete+0x5c>)
    a8b8:	4798      	blx	r3

	if (state) {
    a8ba:	78fb      	ldrb	r3, [r7, #3]
    a8bc:	2b00      	cmp	r3, #0
    a8be:	d005      	beq.n	a8cc <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    a8c0:	687b      	ldr	r3, [r7, #4]
    a8c2:	681b      	ldr	r3, [r3, #0]
    a8c4:	4618      	mov	r0, r3
    a8c6:	4b08      	ldr	r3, [pc, #32]	; (a8e8 <_spi_m_async_enable_tx_complete+0x60>)
    a8c8:	4798      	blx	r3
    a8ca:	e004      	b.n	a8d6 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    a8cc:	687b      	ldr	r3, [r7, #4]
    a8ce:	681b      	ldr	r3, [r3, #0]
    a8d0:	4618      	mov	r0, r3
    a8d2:	4b06      	ldr	r3, [pc, #24]	; (a8ec <_spi_m_async_enable_tx_complete+0x64>)
    a8d4:	4798      	blx	r3
	}

	return ERR_NONE;
    a8d6:	2300      	movs	r3, #0
}
    a8d8:	4618      	mov	r0, r3
    a8da:	3708      	adds	r7, #8
    a8dc:	46bd      	mov	sp, r7
    a8de:	bd80      	pop	{r7, pc}
    a8e0:	0001a850 	.word	0x0001a850
    a8e4:	00006241 	.word	0x00006241
    a8e8:	00008ff3 	.word	0x00008ff3
    a8ec:	0000900d 	.word	0x0000900d

0000a8f0 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    a8f0:	b580      	push	{r7, lr}
    a8f2:	b082      	sub	sp, #8
    a8f4:	af00      	add	r7, sp, #0
    a8f6:	6078      	str	r0, [r7, #4]
    a8f8:	460b      	mov	r3, r1
    a8fa:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    a8fc:	687b      	ldr	r3, [r7, #4]
    a8fe:	2b00      	cmp	r3, #0
    a900:	d005      	beq.n	a90e <_spi_m_async_write_one+0x1e>
    a902:	687b      	ldr	r3, [r7, #4]
    a904:	681b      	ldr	r3, [r3, #0]
    a906:	2b00      	cmp	r3, #0
    a908:	d001      	beq.n	a90e <_spi_m_async_write_one+0x1e>
    a90a:	2301      	movs	r3, #1
    a90c:	e000      	b.n	a910 <_spi_m_async_write_one+0x20>
    a90e:	2300      	movs	r3, #0
    a910:	f003 0301 	and.w	r3, r3, #1
    a914:	b2db      	uxtb	r3, r3
    a916:	f640 32b2 	movw	r2, #2994	; 0xbb2
    a91a:	4908      	ldr	r1, [pc, #32]	; (a93c <_spi_m_async_write_one+0x4c>)
    a91c:	4618      	mov	r0, r3
    a91e:	4b08      	ldr	r3, [pc, #32]	; (a940 <_spi_m_async_write_one+0x50>)
    a920:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    a922:	687b      	ldr	r3, [r7, #4]
    a924:	681b      	ldr	r3, [r3, #0]
    a926:	887a      	ldrh	r2, [r7, #2]
    a928:	4611      	mov	r1, r2
    a92a:	4618      	mov	r0, r3
    a92c:	4b05      	ldr	r3, [pc, #20]	; (a944 <_spi_m_async_write_one+0x54>)
    a92e:	4798      	blx	r3

	return ERR_NONE;
    a930:	2300      	movs	r3, #0
}
    a932:	4618      	mov	r0, r3
    a934:	3708      	adds	r7, #8
    a936:	46bd      	mov	sp, r7
    a938:	bd80      	pop	{r7, pc}
    a93a:	bf00      	nop
    a93c:	0001a850 	.word	0x0001a850
    a940:	00006241 	.word	0x00006241
    a944:	0000945d 	.word	0x0000945d

0000a948 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    a948:	b580      	push	{r7, lr}
    a94a:	b082      	sub	sp, #8
    a94c:	af00      	add	r7, sp, #0
    a94e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    a950:	687b      	ldr	r3, [r7, #4]
    a952:	2b00      	cmp	r3, #0
    a954:	d005      	beq.n	a962 <_spi_m_async_read_one+0x1a>
    a956:	687b      	ldr	r3, [r7, #4]
    a958:	681b      	ldr	r3, [r3, #0]
    a95a:	2b00      	cmp	r3, #0
    a95c:	d001      	beq.n	a962 <_spi_m_async_read_one+0x1a>
    a95e:	2301      	movs	r3, #1
    a960:	e000      	b.n	a964 <_spi_m_async_read_one+0x1c>
    a962:	2300      	movs	r3, #0
    a964:	f003 0301 	and.w	r3, r3, #1
    a968:	b2db      	uxtb	r3, r3
    a96a:	f640 32cd 	movw	r2, #3021	; 0xbcd
    a96e:	4907      	ldr	r1, [pc, #28]	; (a98c <_spi_m_async_read_one+0x44>)
    a970:	4618      	mov	r0, r3
    a972:	4b07      	ldr	r3, [pc, #28]	; (a990 <_spi_m_async_read_one+0x48>)
    a974:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    a976:	687b      	ldr	r3, [r7, #4]
    a978:	681b      	ldr	r3, [r3, #0]
    a97a:	4618      	mov	r0, r3
    a97c:	4b05      	ldr	r3, [pc, #20]	; (a994 <_spi_m_async_read_one+0x4c>)
    a97e:	4798      	blx	r3
    a980:	4603      	mov	r3, r0
    a982:	b29b      	uxth	r3, r3
}
    a984:	4618      	mov	r0, r3
    a986:	3708      	adds	r7, #8
    a988:	46bd      	mov	sp, r7
    a98a:	bd80      	pop	{r7, pc}
    a98c:	0001a850 	.word	0x0001a850
    a990:	00006241 	.word	0x00006241
    a994:	00009479 	.word	0x00009479

0000a998 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    a998:	b580      	push	{r7, lr}
    a99a:	b086      	sub	sp, #24
    a99c:	af00      	add	r7, sp, #0
    a99e:	60f8      	str	r0, [r7, #12]
    a9a0:	460b      	mov	r3, r1
    a9a2:	607a      	str	r2, [r7, #4]
    a9a4:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    a9a6:	68fb      	ldr	r3, [r7, #12]
    a9a8:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    a9aa:	68fb      	ldr	r3, [r7, #12]
    a9ac:	2b00      	cmp	r3, #0
    a9ae:	d004      	beq.n	a9ba <_spi_m_async_register_callback+0x22>
    a9b0:	7afb      	ldrb	r3, [r7, #11]
    a9b2:	2b03      	cmp	r3, #3
    a9b4:	d801      	bhi.n	a9ba <_spi_m_async_register_callback+0x22>
    a9b6:	2301      	movs	r3, #1
    a9b8:	e000      	b.n	a9bc <_spi_m_async_register_callback+0x24>
    a9ba:	2300      	movs	r3, #0
    a9bc:	f003 0301 	and.w	r3, r3, #1
    a9c0:	b2db      	uxtb	r3, r3
    a9c2:	f640 32e6 	movw	r2, #3046	; 0xbe6
    a9c6:	4909      	ldr	r1, [pc, #36]	; (a9ec <_spi_m_async_register_callback+0x54>)
    a9c8:	4618      	mov	r0, r3
    a9ca:	4b09      	ldr	r3, [pc, #36]	; (a9f0 <_spi_m_async_register_callback+0x58>)
    a9cc:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    a9ce:	697b      	ldr	r3, [r7, #20]
    a9d0:	3308      	adds	r3, #8
    a9d2:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    a9d4:	7afb      	ldrb	r3, [r7, #11]
    a9d6:	009b      	lsls	r3, r3, #2
    a9d8:	693a      	ldr	r2, [r7, #16]
    a9da:	4413      	add	r3, r2
    a9dc:	687a      	ldr	r2, [r7, #4]
    a9de:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    a9e0:	2300      	movs	r3, #0
}
    a9e2:	4618      	mov	r0, r3
    a9e4:	3718      	adds	r7, #24
    a9e6:	46bd      	mov	sp, r7
    a9e8:	bd80      	pop	{r7, pc}
    a9ea:	bf00      	nop
    a9ec:	0001a850 	.word	0x0001a850
    a9f0:	00006241 	.word	0x00006241

0000a9f4 <__NVIC_EnableIRQ>:
{
    a9f4:	b480      	push	{r7}
    a9f6:	b083      	sub	sp, #12
    a9f8:	af00      	add	r7, sp, #0
    a9fa:	4603      	mov	r3, r0
    a9fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a9fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aa02:	2b00      	cmp	r3, #0
    aa04:	db0b      	blt.n	aa1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aa06:	4909      	ldr	r1, [pc, #36]	; (aa2c <__NVIC_EnableIRQ+0x38>)
    aa08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aa0c:	095b      	lsrs	r3, r3, #5
    aa0e:	88fa      	ldrh	r2, [r7, #6]
    aa10:	f002 021f 	and.w	r2, r2, #31
    aa14:	2001      	movs	r0, #1
    aa16:	fa00 f202 	lsl.w	r2, r0, r2
    aa1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aa1e:	bf00      	nop
    aa20:	370c      	adds	r7, #12
    aa22:	46bd      	mov	sp, r7
    aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa28:	4770      	bx	lr
    aa2a:	bf00      	nop
    aa2c:	e000e100 	.word	0xe000e100

0000aa30 <__NVIC_DisableIRQ>:
{
    aa30:	b480      	push	{r7}
    aa32:	b083      	sub	sp, #12
    aa34:	af00      	add	r7, sp, #0
    aa36:	4603      	mov	r3, r0
    aa38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    aa3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aa3e:	2b00      	cmp	r3, #0
    aa40:	db10      	blt.n	aa64 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aa42:	490b      	ldr	r1, [pc, #44]	; (aa70 <__NVIC_DisableIRQ+0x40>)
    aa44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aa48:	095b      	lsrs	r3, r3, #5
    aa4a:	88fa      	ldrh	r2, [r7, #6]
    aa4c:	f002 021f 	and.w	r2, r2, #31
    aa50:	2001      	movs	r0, #1
    aa52:	fa00 f202 	lsl.w	r2, r0, r2
    aa56:	3320      	adds	r3, #32
    aa58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    aa5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    aa60:	f3bf 8f6f 	isb	sy
}
    aa64:	bf00      	nop
    aa66:	370c      	adds	r7, #12
    aa68:	46bd      	mov	sp, r7
    aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa6e:	4770      	bx	lr
    aa70:	e000e100 	.word	0xe000e100

0000aa74 <__NVIC_ClearPendingIRQ>:
{
    aa74:	b480      	push	{r7}
    aa76:	b083      	sub	sp, #12
    aa78:	af00      	add	r7, sp, #0
    aa7a:	4603      	mov	r3, r0
    aa7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    aa7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aa82:	2b00      	cmp	r3, #0
    aa84:	db0c      	blt.n	aaa0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aa86:	4909      	ldr	r1, [pc, #36]	; (aaac <__NVIC_ClearPendingIRQ+0x38>)
    aa88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aa8c:	095b      	lsrs	r3, r3, #5
    aa8e:	88fa      	ldrh	r2, [r7, #6]
    aa90:	f002 021f 	and.w	r2, r2, #31
    aa94:	2001      	movs	r0, #1
    aa96:	fa00 f202 	lsl.w	r2, r0, r2
    aa9a:	3360      	adds	r3, #96	; 0x60
    aa9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aaa0:	bf00      	nop
    aaa2:	370c      	adds	r7, #12
    aaa4:	46bd      	mov	sp, r7
    aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaaa:	4770      	bx	lr
    aaac:	e000e100 	.word	0xe000e100

0000aab0 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    aab0:	b480      	push	{r7}
    aab2:	b083      	sub	sp, #12
    aab4:	af00      	add	r7, sp, #0
    aab6:	6078      	str	r0, [r7, #4]
    aab8:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    aaba:	bf00      	nop
    aabc:	687b      	ldr	r3, [r7, #4]
    aabe:	691a      	ldr	r2, [r3, #16]
    aac0:	683b      	ldr	r3, [r7, #0]
    aac2:	4013      	ands	r3, r2
    aac4:	2b00      	cmp	r3, #0
    aac6:	d1f9      	bne.n	aabc <hri_tc_wait_for_sync+0xc>
	};
}
    aac8:	bf00      	nop
    aaca:	370c      	adds	r7, #12
    aacc:	46bd      	mov	sp, r7
    aace:	f85d 7b04 	ldr.w	r7, [sp], #4
    aad2:	4770      	bx	lr

0000aad4 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    aad4:	b480      	push	{r7}
    aad6:	b083      	sub	sp, #12
    aad8:	af00      	add	r7, sp, #0
    aada:	6078      	str	r0, [r7, #4]
    aadc:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    aade:	687b      	ldr	r3, [r7, #4]
    aae0:	691a      	ldr	r2, [r3, #16]
    aae2:	683b      	ldr	r3, [r7, #0]
    aae4:	4013      	ands	r3, r2
    aae6:	2b00      	cmp	r3, #0
    aae8:	bf14      	ite	ne
    aaea:	2301      	movne	r3, #1
    aaec:	2300      	moveq	r3, #0
    aaee:	b2db      	uxtb	r3, r3
}
    aaf0:	4618      	mov	r0, r3
    aaf2:	370c      	adds	r7, #12
    aaf4:	46bd      	mov	sp, r7
    aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    aafa:	4770      	bx	lr

0000aafc <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    aafc:	b480      	push	{r7}
    aafe:	b083      	sub	sp, #12
    ab00:	af00      	add	r7, sp, #0
    ab02:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    ab04:	687b      	ldr	r3, [r7, #4]
    ab06:	7a9b      	ldrb	r3, [r3, #10]
    ab08:	b2db      	uxtb	r3, r3
    ab0a:	f003 0301 	and.w	r3, r3, #1
    ab0e:	2b00      	cmp	r3, #0
    ab10:	bf14      	ite	ne
    ab12:	2301      	movne	r3, #1
    ab14:	2300      	moveq	r3, #0
    ab16:	b2db      	uxtb	r3, r3
}
    ab18:	4618      	mov	r0, r3
    ab1a:	370c      	adds	r7, #12
    ab1c:	46bd      	mov	sp, r7
    ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab22:	4770      	bx	lr

0000ab24 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    ab24:	b480      	push	{r7}
    ab26:	b083      	sub	sp, #12
    ab28:	af00      	add	r7, sp, #0
    ab2a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    ab2c:	687b      	ldr	r3, [r7, #4]
    ab2e:	2201      	movs	r2, #1
    ab30:	729a      	strb	r2, [r3, #10]
}
    ab32:	bf00      	nop
    ab34:	370c      	adds	r7, #12
    ab36:	46bd      	mov	sp, r7
    ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab3c:	4770      	bx	lr

0000ab3e <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    ab3e:	b480      	push	{r7}
    ab40:	b083      	sub	sp, #12
    ab42:	af00      	add	r7, sp, #0
    ab44:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    ab46:	687b      	ldr	r3, [r7, #4]
    ab48:	2202      	movs	r2, #2
    ab4a:	729a      	strb	r2, [r3, #10]
}
    ab4c:	bf00      	nop
    ab4e:	370c      	adds	r7, #12
    ab50:	46bd      	mov	sp, r7
    ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab56:	4770      	bx	lr

0000ab58 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    ab58:	b480      	push	{r7}
    ab5a:	b083      	sub	sp, #12
    ab5c:	af00      	add	r7, sp, #0
    ab5e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    ab60:	687b      	ldr	r3, [r7, #4]
    ab62:	2201      	movs	r2, #1
    ab64:	725a      	strb	r2, [r3, #9]
}
    ab66:	bf00      	nop
    ab68:	370c      	adds	r7, #12
    ab6a:	46bd      	mov	sp, r7
    ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab70:	4770      	bx	lr

0000ab72 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    ab72:	b480      	push	{r7}
    ab74:	b083      	sub	sp, #12
    ab76:	af00      	add	r7, sp, #0
    ab78:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    ab7a:	687b      	ldr	r3, [r7, #4]
    ab7c:	7a5b      	ldrb	r3, [r3, #9]
    ab7e:	b2db      	uxtb	r3, r3
    ab80:	085b      	lsrs	r3, r3, #1
    ab82:	f003 0301 	and.w	r3, r3, #1
    ab86:	2b00      	cmp	r3, #0
    ab88:	bf14      	ite	ne
    ab8a:	2301      	movne	r3, #1
    ab8c:	2300      	moveq	r3, #0
    ab8e:	b2db      	uxtb	r3, r3
}
    ab90:	4618      	mov	r0, r3
    ab92:	370c      	adds	r7, #12
    ab94:	46bd      	mov	sp, r7
    ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab9a:	4770      	bx	lr

0000ab9c <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    ab9c:	b580      	push	{r7, lr}
    ab9e:	b082      	sub	sp, #8
    aba0:	af00      	add	r7, sp, #0
    aba2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    aba4:	687b      	ldr	r3, [r7, #4]
    aba6:	681b      	ldr	r3, [r3, #0]
    aba8:	f043 0202 	orr.w	r2, r3, #2
    abac:	687b      	ldr	r3, [r7, #4]
    abae:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    abb0:	2103      	movs	r1, #3
    abb2:	6878      	ldr	r0, [r7, #4]
    abb4:	4b02      	ldr	r3, [pc, #8]	; (abc0 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    abb6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    abb8:	bf00      	nop
    abba:	3708      	adds	r7, #8
    abbc:	46bd      	mov	sp, r7
    abbe:	bd80      	pop	{r7, pc}
    abc0:	0000aab1 	.word	0x0000aab1

0000abc4 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    abc4:	b580      	push	{r7, lr}
    abc6:	b084      	sub	sp, #16
    abc8:	af00      	add	r7, sp, #0
    abca:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    abcc:	2103      	movs	r1, #3
    abce:	6878      	ldr	r0, [r7, #4]
    abd0:	4b09      	ldr	r3, [pc, #36]	; (abf8 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    abd2:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    abd4:	687b      	ldr	r3, [r7, #4]
    abd6:	681b      	ldr	r3, [r3, #0]
    abd8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    abda:	68fb      	ldr	r3, [r7, #12]
    abdc:	085b      	lsrs	r3, r3, #1
    abde:	f003 0301 	and.w	r3, r3, #1
    abe2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    abe4:	68fb      	ldr	r3, [r7, #12]
    abe6:	2b00      	cmp	r3, #0
    abe8:	bf14      	ite	ne
    abea:	2301      	movne	r3, #1
    abec:	2300      	moveq	r3, #0
    abee:	b2db      	uxtb	r3, r3
}
    abf0:	4618      	mov	r0, r3
    abf2:	3710      	adds	r7, #16
    abf4:	46bd      	mov	sp, r7
    abf6:	bd80      	pop	{r7, pc}
    abf8:	0000aab1 	.word	0x0000aab1

0000abfc <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    abfc:	b580      	push	{r7, lr}
    abfe:	b082      	sub	sp, #8
    ac00:	af00      	add	r7, sp, #0
    ac02:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    ac04:	687b      	ldr	r3, [r7, #4]
    ac06:	681b      	ldr	r3, [r3, #0]
    ac08:	f023 0202 	bic.w	r2, r3, #2
    ac0c:	687b      	ldr	r3, [r7, #4]
    ac0e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    ac10:	2103      	movs	r1, #3
    ac12:	6878      	ldr	r0, [r7, #4]
    ac14:	4b02      	ldr	r3, [pc, #8]	; (ac20 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    ac16:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ac18:	bf00      	nop
    ac1a:	3708      	adds	r7, #8
    ac1c:	46bd      	mov	sp, r7
    ac1e:	bd80      	pop	{r7, pc}
    ac20:	0000aab1 	.word	0x0000aab1

0000ac24 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    ac24:	b480      	push	{r7}
    ac26:	b085      	sub	sp, #20
    ac28:	af00      	add	r7, sp, #0
    ac2a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    ac2c:	687b      	ldr	r3, [r7, #4]
    ac2e:	681b      	ldr	r3, [r3, #0]
    ac30:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    ac32:	68fb      	ldr	r3, [r7, #12]
    ac34:	089b      	lsrs	r3, r3, #2
    ac36:	f003 0303 	and.w	r3, r3, #3
    ac3a:	60fb      	str	r3, [r7, #12]
	return tmp;
    ac3c:	68fb      	ldr	r3, [r7, #12]
}
    ac3e:	4618      	mov	r0, r3
    ac40:	3714      	adds	r7, #20
    ac42:	46bd      	mov	sp, r7
    ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac48:	4770      	bx	lr
	...

0000ac4c <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    ac4c:	b580      	push	{r7, lr}
    ac4e:	b084      	sub	sp, #16
    ac50:	af00      	add	r7, sp, #0
    ac52:	6078      	str	r0, [r7, #4]
    ac54:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    ac56:	2103      	movs	r1, #3
    ac58:	6878      	ldr	r0, [r7, #4]
    ac5a:	4b07      	ldr	r3, [pc, #28]	; (ac78 <hri_tc_get_CTRLA_reg+0x2c>)
    ac5c:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    ac5e:	687b      	ldr	r3, [r7, #4]
    ac60:	681b      	ldr	r3, [r3, #0]
    ac62:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    ac64:	68fa      	ldr	r2, [r7, #12]
    ac66:	683b      	ldr	r3, [r7, #0]
    ac68:	4013      	ands	r3, r2
    ac6a:	60fb      	str	r3, [r7, #12]
	return tmp;
    ac6c:	68fb      	ldr	r3, [r7, #12]
}
    ac6e:	4618      	mov	r0, r3
    ac70:	3710      	adds	r7, #16
    ac72:	46bd      	mov	sp, r7
    ac74:	bd80      	pop	{r7, pc}
    ac76:	bf00      	nop
    ac78:	0000aab1 	.word	0x0000aab1

0000ac7c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    ac7c:	b580      	push	{r7, lr}
    ac7e:	b082      	sub	sp, #8
    ac80:	af00      	add	r7, sp, #0
    ac82:	6078      	str	r0, [r7, #4]
    ac84:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    ac86:	687b      	ldr	r3, [r7, #4]
    ac88:	683a      	ldr	r2, [r7, #0]
    ac8a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    ac8c:	2103      	movs	r1, #3
    ac8e:	6878      	ldr	r0, [r7, #4]
    ac90:	4b02      	ldr	r3, [pc, #8]	; (ac9c <hri_tc_write_CTRLA_reg+0x20>)
    ac92:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ac94:	bf00      	nop
    ac96:	3708      	adds	r7, #8
    ac98:	46bd      	mov	sp, r7
    ac9a:	bd80      	pop	{r7, pc}
    ac9c:	0000aab1 	.word	0x0000aab1

0000aca0 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    aca0:	b480      	push	{r7}
    aca2:	b083      	sub	sp, #12
    aca4:	af00      	add	r7, sp, #0
    aca6:	6078      	str	r0, [r7, #4]
    aca8:	460b      	mov	r3, r1
    acaa:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    acac:	687b      	ldr	r3, [r7, #4]
    acae:	887a      	ldrh	r2, [r7, #2]
    acb0:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    acb2:	bf00      	nop
    acb4:	370c      	adds	r7, #12
    acb6:	46bd      	mov	sp, r7
    acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    acbc:	4770      	bx	lr

0000acbe <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    acbe:	b480      	push	{r7}
    acc0:	b083      	sub	sp, #12
    acc2:	af00      	add	r7, sp, #0
    acc4:	6078      	str	r0, [r7, #4]
    acc6:	460b      	mov	r3, r1
    acc8:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    acca:	687b      	ldr	r3, [r7, #4]
    accc:	78fa      	ldrb	r2, [r7, #3]
    acce:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    acd0:	bf00      	nop
    acd2:	370c      	adds	r7, #12
    acd4:	46bd      	mov	sp, r7
    acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    acda:	4770      	bx	lr

0000acdc <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    acdc:	b480      	push	{r7}
    acde:	b083      	sub	sp, #12
    ace0:	af00      	add	r7, sp, #0
    ace2:	6078      	str	r0, [r7, #4]
    ace4:	460b      	mov	r3, r1
    ace6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    ace8:	687b      	ldr	r3, [r7, #4]
    acea:	78fa      	ldrb	r2, [r7, #3]
    acec:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    acee:	bf00      	nop
    acf0:	370c      	adds	r7, #12
    acf2:	46bd      	mov	sp, r7
    acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    acf8:	4770      	bx	lr
	...

0000acfc <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    acfc:	b580      	push	{r7, lr}
    acfe:	b082      	sub	sp, #8
    ad00:	af00      	add	r7, sp, #0
    ad02:	6078      	str	r0, [r7, #4]
    ad04:	460b      	mov	r3, r1
    ad06:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    ad08:	687b      	ldr	r3, [r7, #4]
    ad0a:	78fa      	ldrb	r2, [r7, #3]
    ad0c:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    ad0e:	2120      	movs	r1, #32
    ad10:	6878      	ldr	r0, [r7, #4]
    ad12:	4b03      	ldr	r3, [pc, #12]	; (ad20 <hri_tccount8_write_PER_reg+0x24>)
    ad14:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ad16:	bf00      	nop
    ad18:	3708      	adds	r7, #8
    ad1a:	46bd      	mov	sp, r7
    ad1c:	bd80      	pop	{r7, pc}
    ad1e:	bf00      	nop
    ad20:	0000aab1 	.word	0x0000aab1

0000ad24 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    ad24:	b580      	push	{r7, lr}
    ad26:	b082      	sub	sp, #8
    ad28:	af00      	add	r7, sp, #0
    ad2a:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    ad2c:	2120      	movs	r1, #32
    ad2e:	6878      	ldr	r0, [r7, #4]
    ad30:	4b04      	ldr	r3, [pc, #16]	; (ad44 <hri_tccount8_read_PER_reg+0x20>)
    ad32:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    ad34:	687b      	ldr	r3, [r7, #4]
    ad36:	7edb      	ldrb	r3, [r3, #27]
    ad38:	b2db      	uxtb	r3, r3
}
    ad3a:	4618      	mov	r0, r3
    ad3c:	3708      	adds	r7, #8
    ad3e:	46bd      	mov	sp, r7
    ad40:	bd80      	pop	{r7, pc}
    ad42:	bf00      	nop
    ad44:	0000aab1 	.word	0x0000aab1

0000ad48 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    ad48:	b580      	push	{r7, lr}
    ad4a:	b082      	sub	sp, #8
    ad4c:	af00      	add	r7, sp, #0
    ad4e:	6078      	str	r0, [r7, #4]
    ad50:	460b      	mov	r3, r1
    ad52:	70fb      	strb	r3, [r7, #3]
    ad54:	4613      	mov	r3, r2
    ad56:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    ad58:	78fb      	ldrb	r3, [r7, #3]
    ad5a:	687a      	ldr	r2, [r7, #4]
    ad5c:	4413      	add	r3, r2
    ad5e:	78ba      	ldrb	r2, [r7, #2]
    ad60:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ad62:	21c0      	movs	r1, #192	; 0xc0
    ad64:	6878      	ldr	r0, [r7, #4]
    ad66:	4b03      	ldr	r3, [pc, #12]	; (ad74 <hri_tccount8_write_CC_reg+0x2c>)
    ad68:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ad6a:	bf00      	nop
    ad6c:	3708      	adds	r7, #8
    ad6e:	46bd      	mov	sp, r7
    ad70:	bd80      	pop	{r7, pc}
    ad72:	bf00      	nop
    ad74:	0000aab1 	.word	0x0000aab1

0000ad78 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    ad78:	b580      	push	{r7, lr}
    ad7a:	b082      	sub	sp, #8
    ad7c:	af00      	add	r7, sp, #0
    ad7e:	6078      	str	r0, [r7, #4]
    ad80:	460b      	mov	r3, r1
    ad82:	70fb      	strb	r3, [r7, #3]
    ad84:	4613      	mov	r3, r2
    ad86:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    ad88:	78fb      	ldrb	r3, [r7, #3]
    ad8a:	687a      	ldr	r2, [r7, #4]
    ad8c:	330c      	adds	r3, #12
    ad8e:	005b      	lsls	r3, r3, #1
    ad90:	4413      	add	r3, r2
    ad92:	883a      	ldrh	r2, [r7, #0]
    ad94:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ad96:	21c0      	movs	r1, #192	; 0xc0
    ad98:	6878      	ldr	r0, [r7, #4]
    ad9a:	4b03      	ldr	r3, [pc, #12]	; (ada8 <hri_tccount16_write_CC_reg+0x30>)
    ad9c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ad9e:	bf00      	nop
    ada0:	3708      	adds	r7, #8
    ada2:	46bd      	mov	sp, r7
    ada4:	bd80      	pop	{r7, pc}
    ada6:	bf00      	nop
    ada8:	0000aab1 	.word	0x0000aab1

0000adac <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    adac:	b580      	push	{r7, lr}
    adae:	b082      	sub	sp, #8
    adb0:	af00      	add	r7, sp, #0
    adb2:	6078      	str	r0, [r7, #4]
    adb4:	460b      	mov	r3, r1
    adb6:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    adb8:	21c0      	movs	r1, #192	; 0xc0
    adba:	6878      	ldr	r0, [r7, #4]
    adbc:	4b06      	ldr	r3, [pc, #24]	; (add8 <hri_tccount16_read_CC_reg+0x2c>)
    adbe:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    adc0:	78fb      	ldrb	r3, [r7, #3]
    adc2:	687a      	ldr	r2, [r7, #4]
    adc4:	330c      	adds	r3, #12
    adc6:	005b      	lsls	r3, r3, #1
    adc8:	4413      	add	r3, r2
    adca:	889b      	ldrh	r3, [r3, #4]
    adcc:	b29b      	uxth	r3, r3
}
    adce:	4618      	mov	r0, r3
    add0:	3708      	adds	r7, #8
    add2:	46bd      	mov	sp, r7
    add4:	bd80      	pop	{r7, pc}
    add6:	bf00      	nop
    add8:	0000aab1 	.word	0x0000aab1

0000addc <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    addc:	b580      	push	{r7, lr}
    adde:	b084      	sub	sp, #16
    ade0:	af00      	add	r7, sp, #0
    ade2:	60f8      	str	r0, [r7, #12]
    ade4:	460b      	mov	r3, r1
    ade6:	607a      	str	r2, [r7, #4]
    ade8:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    adea:	7afb      	ldrb	r3, [r7, #11]
    adec:	68fa      	ldr	r2, [r7, #12]
    adee:	3306      	adds	r3, #6
    adf0:	009b      	lsls	r3, r3, #2
    adf2:	4413      	add	r3, r2
    adf4:	687a      	ldr	r2, [r7, #4]
    adf6:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    adf8:	21c0      	movs	r1, #192	; 0xc0
    adfa:	68f8      	ldr	r0, [r7, #12]
    adfc:	4b02      	ldr	r3, [pc, #8]	; (ae08 <hri_tccount32_write_CC_reg+0x2c>)
    adfe:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ae00:	bf00      	nop
    ae02:	3710      	adds	r7, #16
    ae04:	46bd      	mov	sp, r7
    ae06:	bd80      	pop	{r7, pc}
    ae08:	0000aab1 	.word	0x0000aab1

0000ae0c <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    ae0c:	b580      	push	{r7, lr}
    ae0e:	b082      	sub	sp, #8
    ae10:	af00      	add	r7, sp, #0
    ae12:	6078      	str	r0, [r7, #4]
    ae14:	460b      	mov	r3, r1
    ae16:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ae18:	21c0      	movs	r1, #192	; 0xc0
    ae1a:	6878      	ldr	r0, [r7, #4]
    ae1c:	4b05      	ldr	r3, [pc, #20]	; (ae34 <hri_tccount32_read_CC_reg+0x28>)
    ae1e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    ae20:	78fb      	ldrb	r3, [r7, #3]
    ae22:	687a      	ldr	r2, [r7, #4]
    ae24:	3306      	adds	r3, #6
    ae26:	009b      	lsls	r3, r3, #2
    ae28:	4413      	add	r3, r2
    ae2a:	685b      	ldr	r3, [r3, #4]
}
    ae2c:	4618      	mov	r0, r3
    ae2e:	3708      	adds	r7, #8
    ae30:	46bd      	mov	sp, r7
    ae32:	bd80      	pop	{r7, pc}
    ae34:	0000aab1 	.word	0x0000aab1

0000ae38 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    ae38:	b580      	push	{r7, lr}
    ae3a:	b084      	sub	sp, #16
    ae3c:	af00      	add	r7, sp, #0
    ae3e:	6078      	str	r0, [r7, #4]
    ae40:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    ae42:	6838      	ldr	r0, [r7, #0]
    ae44:	4b93      	ldr	r3, [pc, #588]	; (b094 <_timer_init+0x25c>)
    ae46:	4798      	blx	r3
    ae48:	4603      	mov	r3, r0
    ae4a:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    ae4c:	687b      	ldr	r3, [r7, #4]
    ae4e:	683a      	ldr	r2, [r7, #0]
    ae50:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    ae52:	2295      	movs	r2, #149	; 0x95
    ae54:	4990      	ldr	r1, [pc, #576]	; (b098 <_timer_init+0x260>)
    ae56:	2001      	movs	r0, #1
    ae58:	4b90      	ldr	r3, [pc, #576]	; (b09c <_timer_init+0x264>)
    ae5a:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    ae5c:	2101      	movs	r1, #1
    ae5e:	6838      	ldr	r0, [r7, #0]
    ae60:	4b8f      	ldr	r3, [pc, #572]	; (b0a0 <_timer_init+0x268>)
    ae62:	4798      	blx	r3
    ae64:	4603      	mov	r3, r0
    ae66:	f083 0301 	eor.w	r3, r3, #1
    ae6a:	b2db      	uxtb	r3, r3
    ae6c:	2b00      	cmp	r3, #0
    ae6e:	d011      	beq.n	ae94 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    ae70:	2102      	movs	r1, #2
    ae72:	6838      	ldr	r0, [r7, #0]
    ae74:	4b8b      	ldr	r3, [pc, #556]	; (b0a4 <_timer_init+0x26c>)
    ae76:	4798      	blx	r3
    ae78:	4603      	mov	r3, r0
    ae7a:	2b00      	cmp	r3, #0
    ae7c:	d006      	beq.n	ae8c <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    ae7e:	6838      	ldr	r0, [r7, #0]
    ae80:	4b89      	ldr	r3, [pc, #548]	; (b0a8 <_timer_init+0x270>)
    ae82:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    ae84:	2102      	movs	r1, #2
    ae86:	6838      	ldr	r0, [r7, #0]
    ae88:	4b88      	ldr	r3, [pc, #544]	; (b0ac <_timer_init+0x274>)
    ae8a:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    ae8c:	2101      	movs	r1, #1
    ae8e:	6838      	ldr	r0, [r7, #0]
    ae90:	4b87      	ldr	r3, [pc, #540]	; (b0b0 <_timer_init+0x278>)
    ae92:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    ae94:	2101      	movs	r1, #1
    ae96:	6838      	ldr	r0, [r7, #0]
    ae98:	4b84      	ldr	r3, [pc, #528]	; (b0ac <_timer_init+0x274>)
    ae9a:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    ae9c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    aea0:	4984      	ldr	r1, [pc, #528]	; (b0b4 <_timer_init+0x27c>)
    aea2:	4613      	mov	r3, r2
    aea4:	009b      	lsls	r3, r3, #2
    aea6:	4413      	add	r3, r2
    aea8:	009b      	lsls	r3, r3, #2
    aeaa:	440b      	add	r3, r1
    aeac:	3304      	adds	r3, #4
    aeae:	681b      	ldr	r3, [r3, #0]
    aeb0:	4619      	mov	r1, r3
    aeb2:	6838      	ldr	r0, [r7, #0]
    aeb4:	4b7e      	ldr	r3, [pc, #504]	; (b0b0 <_timer_init+0x278>)
    aeb6:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    aeb8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    aebc:	497d      	ldr	r1, [pc, #500]	; (b0b4 <_timer_init+0x27c>)
    aebe:	4613      	mov	r3, r2
    aec0:	009b      	lsls	r3, r3, #2
    aec2:	4413      	add	r3, r2
    aec4:	009b      	lsls	r3, r3, #2
    aec6:	440b      	add	r3, r1
    aec8:	330a      	adds	r3, #10
    aeca:	781b      	ldrb	r3, [r3, #0]
    aecc:	4619      	mov	r1, r3
    aece:	6838      	ldr	r0, [r7, #0]
    aed0:	4b79      	ldr	r3, [pc, #484]	; (b0b8 <_timer_init+0x280>)
    aed2:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    aed4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    aed8:	4976      	ldr	r1, [pc, #472]	; (b0b4 <_timer_init+0x27c>)
    aeda:	4613      	mov	r3, r2
    aedc:	009b      	lsls	r3, r3, #2
    aede:	4413      	add	r3, r2
    aee0:	009b      	lsls	r3, r3, #2
    aee2:	440b      	add	r3, r1
    aee4:	3308      	adds	r3, #8
    aee6:	881b      	ldrh	r3, [r3, #0]
    aee8:	4619      	mov	r1, r3
    aeea:	6838      	ldr	r0, [r7, #0]
    aeec:	4b73      	ldr	r3, [pc, #460]	; (b0bc <_timer_init+0x284>)
    aeee:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    aef0:	2101      	movs	r1, #1
    aef2:	6838      	ldr	r0, [r7, #0]
    aef4:	4b72      	ldr	r3, [pc, #456]	; (b0c0 <_timer_init+0x288>)
    aef6:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    aef8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    aefc:	496d      	ldr	r1, [pc, #436]	; (b0b4 <_timer_init+0x27c>)
    aefe:	4613      	mov	r3, r2
    af00:	009b      	lsls	r3, r3, #2
    af02:	4413      	add	r3, r2
    af04:	009b      	lsls	r3, r3, #2
    af06:	440b      	add	r3, r1
    af08:	3304      	adds	r3, #4
    af0a:	681b      	ldr	r3, [r3, #0]
    af0c:	f003 030c 	and.w	r3, r3, #12
    af10:	2b08      	cmp	r3, #8
    af12:	d11e      	bne.n	af52 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    af14:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af18:	4966      	ldr	r1, [pc, #408]	; (b0b4 <_timer_init+0x27c>)
    af1a:	4613      	mov	r3, r2
    af1c:	009b      	lsls	r3, r3, #2
    af1e:	4413      	add	r3, r2
    af20:	009b      	lsls	r3, r3, #2
    af22:	440b      	add	r3, r1
    af24:	330c      	adds	r3, #12
    af26:	681b      	ldr	r3, [r3, #0]
    af28:	461a      	mov	r2, r3
    af2a:	2100      	movs	r1, #0
    af2c:	6838      	ldr	r0, [r7, #0]
    af2e:	4b65      	ldr	r3, [pc, #404]	; (b0c4 <_timer_init+0x28c>)
    af30:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    af32:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af36:	495f      	ldr	r1, [pc, #380]	; (b0b4 <_timer_init+0x27c>)
    af38:	4613      	mov	r3, r2
    af3a:	009b      	lsls	r3, r3, #2
    af3c:	4413      	add	r3, r2
    af3e:	009b      	lsls	r3, r3, #2
    af40:	440b      	add	r3, r1
    af42:	3310      	adds	r3, #16
    af44:	681b      	ldr	r3, [r3, #0]
    af46:	461a      	mov	r2, r3
    af48:	2101      	movs	r1, #1
    af4a:	6838      	ldr	r0, [r7, #0]
    af4c:	4b5d      	ldr	r3, [pc, #372]	; (b0c4 <_timer_init+0x28c>)
    af4e:	4798      	blx	r3
    af50:	e06a      	b.n	b028 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    af52:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af56:	4957      	ldr	r1, [pc, #348]	; (b0b4 <_timer_init+0x27c>)
    af58:	4613      	mov	r3, r2
    af5a:	009b      	lsls	r3, r3, #2
    af5c:	4413      	add	r3, r2
    af5e:	009b      	lsls	r3, r3, #2
    af60:	440b      	add	r3, r1
    af62:	3304      	adds	r3, #4
    af64:	681b      	ldr	r3, [r3, #0]
    af66:	f003 030c 	and.w	r3, r3, #12
    af6a:	2b00      	cmp	r3, #0
    af6c:	d120      	bne.n	afb0 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    af6e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af72:	4950      	ldr	r1, [pc, #320]	; (b0b4 <_timer_init+0x27c>)
    af74:	4613      	mov	r3, r2
    af76:	009b      	lsls	r3, r3, #2
    af78:	4413      	add	r3, r2
    af7a:	009b      	lsls	r3, r3, #2
    af7c:	440b      	add	r3, r1
    af7e:	330c      	adds	r3, #12
    af80:	681b      	ldr	r3, [r3, #0]
    af82:	b29b      	uxth	r3, r3
    af84:	461a      	mov	r2, r3
    af86:	2100      	movs	r1, #0
    af88:	6838      	ldr	r0, [r7, #0]
    af8a:	4b4f      	ldr	r3, [pc, #316]	; (b0c8 <_timer_init+0x290>)
    af8c:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    af8e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af92:	4948      	ldr	r1, [pc, #288]	; (b0b4 <_timer_init+0x27c>)
    af94:	4613      	mov	r3, r2
    af96:	009b      	lsls	r3, r3, #2
    af98:	4413      	add	r3, r2
    af9a:	009b      	lsls	r3, r3, #2
    af9c:	440b      	add	r3, r1
    af9e:	3310      	adds	r3, #16
    afa0:	681b      	ldr	r3, [r3, #0]
    afa2:	b29b      	uxth	r3, r3
    afa4:	461a      	mov	r2, r3
    afa6:	2101      	movs	r1, #1
    afa8:	6838      	ldr	r0, [r7, #0]
    afaa:	4b47      	ldr	r3, [pc, #284]	; (b0c8 <_timer_init+0x290>)
    afac:	4798      	blx	r3
    afae:	e03b      	b.n	b028 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    afb0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    afb4:	493f      	ldr	r1, [pc, #252]	; (b0b4 <_timer_init+0x27c>)
    afb6:	4613      	mov	r3, r2
    afb8:	009b      	lsls	r3, r3, #2
    afba:	4413      	add	r3, r2
    afbc:	009b      	lsls	r3, r3, #2
    afbe:	440b      	add	r3, r1
    afc0:	3304      	adds	r3, #4
    afc2:	681b      	ldr	r3, [r3, #0]
    afc4:	f003 030c 	and.w	r3, r3, #12
    afc8:	2b04      	cmp	r3, #4
    afca:	d12d      	bne.n	b028 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    afcc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    afd0:	4938      	ldr	r1, [pc, #224]	; (b0b4 <_timer_init+0x27c>)
    afd2:	4613      	mov	r3, r2
    afd4:	009b      	lsls	r3, r3, #2
    afd6:	4413      	add	r3, r2
    afd8:	009b      	lsls	r3, r3, #2
    afda:	440b      	add	r3, r1
    afdc:	330c      	adds	r3, #12
    afde:	681b      	ldr	r3, [r3, #0]
    afe0:	b2db      	uxtb	r3, r3
    afe2:	461a      	mov	r2, r3
    afe4:	2100      	movs	r1, #0
    afe6:	6838      	ldr	r0, [r7, #0]
    afe8:	4b38      	ldr	r3, [pc, #224]	; (b0cc <_timer_init+0x294>)
    afea:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    afec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    aff0:	4930      	ldr	r1, [pc, #192]	; (b0b4 <_timer_init+0x27c>)
    aff2:	4613      	mov	r3, r2
    aff4:	009b      	lsls	r3, r3, #2
    aff6:	4413      	add	r3, r2
    aff8:	009b      	lsls	r3, r3, #2
    affa:	440b      	add	r3, r1
    affc:	3310      	adds	r3, #16
    affe:	681b      	ldr	r3, [r3, #0]
    b000:	b2db      	uxtb	r3, r3
    b002:	461a      	mov	r2, r3
    b004:	2101      	movs	r1, #1
    b006:	6838      	ldr	r0, [r7, #0]
    b008:	4b30      	ldr	r3, [pc, #192]	; (b0cc <_timer_init+0x294>)
    b00a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    b00c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b010:	4928      	ldr	r1, [pc, #160]	; (b0b4 <_timer_init+0x27c>)
    b012:	4613      	mov	r3, r2
    b014:	009b      	lsls	r3, r3, #2
    b016:	4413      	add	r3, r2
    b018:	009b      	lsls	r3, r3, #2
    b01a:	440b      	add	r3, r1
    b01c:	330b      	adds	r3, #11
    b01e:	781b      	ldrb	r3, [r3, #0]
    b020:	4619      	mov	r1, r3
    b022:	6838      	ldr	r0, [r7, #0]
    b024:	4b2a      	ldr	r3, [pc, #168]	; (b0d0 <_timer_init+0x298>)
    b026:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    b028:	6838      	ldr	r0, [r7, #0]
    b02a:	4b2a      	ldr	r3, [pc, #168]	; (b0d4 <_timer_init+0x29c>)
    b02c:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    b02e:	6879      	ldr	r1, [r7, #4]
    b030:	6838      	ldr	r0, [r7, #0]
    b032:	4b29      	ldr	r3, [pc, #164]	; (b0d8 <_timer_init+0x2a0>)
    b034:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    b036:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b03a:	491e      	ldr	r1, [pc, #120]	; (b0b4 <_timer_init+0x27c>)
    b03c:	4613      	mov	r3, r2
    b03e:	009b      	lsls	r3, r3, #2
    b040:	4413      	add	r3, r2
    b042:	009b      	lsls	r3, r3, #2
    b044:	440b      	add	r3, r1
    b046:	3302      	adds	r3, #2
    b048:	f9b3 3000 	ldrsh.w	r3, [r3]
    b04c:	4618      	mov	r0, r3
    b04e:	4b23      	ldr	r3, [pc, #140]	; (b0dc <_timer_init+0x2a4>)
    b050:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    b052:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b056:	4917      	ldr	r1, [pc, #92]	; (b0b4 <_timer_init+0x27c>)
    b058:	4613      	mov	r3, r2
    b05a:	009b      	lsls	r3, r3, #2
    b05c:	4413      	add	r3, r2
    b05e:	009b      	lsls	r3, r3, #2
    b060:	440b      	add	r3, r1
    b062:	3302      	adds	r3, #2
    b064:	f9b3 3000 	ldrsh.w	r3, [r3]
    b068:	4618      	mov	r0, r3
    b06a:	4b1d      	ldr	r3, [pc, #116]	; (b0e0 <_timer_init+0x2a8>)
    b06c:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    b06e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b072:	4910      	ldr	r1, [pc, #64]	; (b0b4 <_timer_init+0x27c>)
    b074:	4613      	mov	r3, r2
    b076:	009b      	lsls	r3, r3, #2
    b078:	4413      	add	r3, r2
    b07a:	009b      	lsls	r3, r3, #2
    b07c:	440b      	add	r3, r1
    b07e:	3302      	adds	r3, #2
    b080:	f9b3 3000 	ldrsh.w	r3, [r3]
    b084:	4618      	mov	r0, r3
    b086:	4b17      	ldr	r3, [pc, #92]	; (b0e4 <_timer_init+0x2ac>)
    b088:	4798      	blx	r3

	return ERR_NONE;
    b08a:	2300      	movs	r3, #0
}
    b08c:	4618      	mov	r0, r3
    b08e:	3710      	adds	r7, #16
    b090:	46bd      	mov	sp, r7
    b092:	bd80      	pop	{r7, pc}
    b094:	0000b5c5 	.word	0x0000b5c5
    b098:	0001a8b0 	.word	0x0001a8b0
    b09c:	00006241 	.word	0x00006241
    b0a0:	0000aad5 	.word	0x0000aad5
    b0a4:	0000ac4d 	.word	0x0000ac4d
    b0a8:	0000abfd 	.word	0x0000abfd
    b0ac:	0000aab1 	.word	0x0000aab1
    b0b0:	0000ac7d 	.word	0x0000ac7d
    b0b4:	200000ac 	.word	0x200000ac
    b0b8:	0000acdd 	.word	0x0000acdd
    b0bc:	0000aca1 	.word	0x0000aca1
    b0c0:	0000acbf 	.word	0x0000acbf
    b0c4:	0000addd 	.word	0x0000addd
    b0c8:	0000ad79 	.word	0x0000ad79
    b0cc:	0000ad49 	.word	0x0000ad49
    b0d0:	0000acfd 	.word	0x0000acfd
    b0d4:	0000ab59 	.word	0x0000ab59
    b0d8:	0000b62d 	.word	0x0000b62d
    b0dc:	0000aa31 	.word	0x0000aa31
    b0e0:	0000aa75 	.word	0x0000aa75
    b0e4:	0000a9f5 	.word	0x0000a9f5

0000b0e8 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    b0e8:	b580      	push	{r7, lr}
    b0ea:	b084      	sub	sp, #16
    b0ec:	af00      	add	r7, sp, #0
    b0ee:	6078      	str	r0, [r7, #4]
    b0f0:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    b0f2:	6838      	ldr	r0, [r7, #0]
    b0f4:	4b73      	ldr	r3, [pc, #460]	; (b2c4 <_pwm_init+0x1dc>)
    b0f6:	4798      	blx	r3
    b0f8:	4603      	mov	r3, r0
    b0fa:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    b0fc:	687b      	ldr	r3, [r7, #4]
    b0fe:	683a      	ldr	r2, [r7, #0]
    b100:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    b102:	2101      	movs	r1, #1
    b104:	6838      	ldr	r0, [r7, #0]
    b106:	4b70      	ldr	r3, [pc, #448]	; (b2c8 <_pwm_init+0x1e0>)
    b108:	4798      	blx	r3
    b10a:	4603      	mov	r3, r0
    b10c:	f083 0301 	eor.w	r3, r3, #1
    b110:	b2db      	uxtb	r3, r3
    b112:	2b00      	cmp	r3, #0
    b114:	d011      	beq.n	b13a <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    b116:	2102      	movs	r1, #2
    b118:	6838      	ldr	r0, [r7, #0]
    b11a:	4b6c      	ldr	r3, [pc, #432]	; (b2cc <_pwm_init+0x1e4>)
    b11c:	4798      	blx	r3
    b11e:	4603      	mov	r3, r0
    b120:	2b00      	cmp	r3, #0
    b122:	d006      	beq.n	b132 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    b124:	6838      	ldr	r0, [r7, #0]
    b126:	4b6a      	ldr	r3, [pc, #424]	; (b2d0 <_pwm_init+0x1e8>)
    b128:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    b12a:	2102      	movs	r1, #2
    b12c:	6838      	ldr	r0, [r7, #0]
    b12e:	4b69      	ldr	r3, [pc, #420]	; (b2d4 <_pwm_init+0x1ec>)
    b130:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    b132:	2101      	movs	r1, #1
    b134:	6838      	ldr	r0, [r7, #0]
    b136:	4b68      	ldr	r3, [pc, #416]	; (b2d8 <_pwm_init+0x1f0>)
    b138:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    b13a:	2101      	movs	r1, #1
    b13c:	6838      	ldr	r0, [r7, #0]
    b13e:	4b65      	ldr	r3, [pc, #404]	; (b2d4 <_pwm_init+0x1ec>)
    b140:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    b142:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b146:	4965      	ldr	r1, [pc, #404]	; (b2dc <_pwm_init+0x1f4>)
    b148:	4613      	mov	r3, r2
    b14a:	009b      	lsls	r3, r3, #2
    b14c:	4413      	add	r3, r2
    b14e:	009b      	lsls	r3, r3, #2
    b150:	440b      	add	r3, r1
    b152:	3304      	adds	r3, #4
    b154:	681b      	ldr	r3, [r3, #0]
    b156:	4619      	mov	r1, r3
    b158:	6838      	ldr	r0, [r7, #0]
    b15a:	4b5f      	ldr	r3, [pc, #380]	; (b2d8 <_pwm_init+0x1f0>)
    b15c:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    b15e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b162:	495e      	ldr	r1, [pc, #376]	; (b2dc <_pwm_init+0x1f4>)
    b164:	4613      	mov	r3, r2
    b166:	009b      	lsls	r3, r3, #2
    b168:	4413      	add	r3, r2
    b16a:	009b      	lsls	r3, r3, #2
    b16c:	440b      	add	r3, r1
    b16e:	330a      	adds	r3, #10
    b170:	781b      	ldrb	r3, [r3, #0]
    b172:	4619      	mov	r1, r3
    b174:	6838      	ldr	r0, [r7, #0]
    b176:	4b5a      	ldr	r3, [pc, #360]	; (b2e0 <_pwm_init+0x1f8>)
    b178:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    b17a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b17e:	4957      	ldr	r1, [pc, #348]	; (b2dc <_pwm_init+0x1f4>)
    b180:	4613      	mov	r3, r2
    b182:	009b      	lsls	r3, r3, #2
    b184:	4413      	add	r3, r2
    b186:	009b      	lsls	r3, r3, #2
    b188:	440b      	add	r3, r1
    b18a:	3308      	adds	r3, #8
    b18c:	881b      	ldrh	r3, [r3, #0]
    b18e:	4619      	mov	r1, r3
    b190:	6838      	ldr	r0, [r7, #0]
    b192:	4b54      	ldr	r3, [pc, #336]	; (b2e4 <_pwm_init+0x1fc>)
    b194:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    b196:	2103      	movs	r1, #3
    b198:	6838      	ldr	r0, [r7, #0]
    b19a:	4b53      	ldr	r3, [pc, #332]	; (b2e8 <_pwm_init+0x200>)
    b19c:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    b19e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b1a2:	494e      	ldr	r1, [pc, #312]	; (b2dc <_pwm_init+0x1f4>)
    b1a4:	4613      	mov	r3, r2
    b1a6:	009b      	lsls	r3, r3, #2
    b1a8:	4413      	add	r3, r2
    b1aa:	009b      	lsls	r3, r3, #2
    b1ac:	440b      	add	r3, r1
    b1ae:	3304      	adds	r3, #4
    b1b0:	681b      	ldr	r3, [r3, #0]
    b1b2:	f003 030c 	and.w	r3, r3, #12
    b1b6:	2b08      	cmp	r3, #8
    b1b8:	d11e      	bne.n	b1f8 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    b1ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b1be:	4947      	ldr	r1, [pc, #284]	; (b2dc <_pwm_init+0x1f4>)
    b1c0:	4613      	mov	r3, r2
    b1c2:	009b      	lsls	r3, r3, #2
    b1c4:	4413      	add	r3, r2
    b1c6:	009b      	lsls	r3, r3, #2
    b1c8:	440b      	add	r3, r1
    b1ca:	330c      	adds	r3, #12
    b1cc:	681b      	ldr	r3, [r3, #0]
    b1ce:	461a      	mov	r2, r3
    b1d0:	2100      	movs	r1, #0
    b1d2:	6838      	ldr	r0, [r7, #0]
    b1d4:	4b45      	ldr	r3, [pc, #276]	; (b2ec <_pwm_init+0x204>)
    b1d6:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    b1d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b1dc:	493f      	ldr	r1, [pc, #252]	; (b2dc <_pwm_init+0x1f4>)
    b1de:	4613      	mov	r3, r2
    b1e0:	009b      	lsls	r3, r3, #2
    b1e2:	4413      	add	r3, r2
    b1e4:	009b      	lsls	r3, r3, #2
    b1e6:	440b      	add	r3, r1
    b1e8:	3310      	adds	r3, #16
    b1ea:	681b      	ldr	r3, [r3, #0]
    b1ec:	461a      	mov	r2, r3
    b1ee:	2101      	movs	r1, #1
    b1f0:	6838      	ldr	r0, [r7, #0]
    b1f2:	4b3e      	ldr	r3, [pc, #248]	; (b2ec <_pwm_init+0x204>)
    b1f4:	4798      	blx	r3
    b1f6:	e031      	b.n	b25c <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    b1f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b1fc:	4937      	ldr	r1, [pc, #220]	; (b2dc <_pwm_init+0x1f4>)
    b1fe:	4613      	mov	r3, r2
    b200:	009b      	lsls	r3, r3, #2
    b202:	4413      	add	r3, r2
    b204:	009b      	lsls	r3, r3, #2
    b206:	440b      	add	r3, r1
    b208:	3304      	adds	r3, #4
    b20a:	681b      	ldr	r3, [r3, #0]
    b20c:	f003 030c 	and.w	r3, r3, #12
    b210:	2b00      	cmp	r3, #0
    b212:	d120      	bne.n	b256 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    b214:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b218:	4930      	ldr	r1, [pc, #192]	; (b2dc <_pwm_init+0x1f4>)
    b21a:	4613      	mov	r3, r2
    b21c:	009b      	lsls	r3, r3, #2
    b21e:	4413      	add	r3, r2
    b220:	009b      	lsls	r3, r3, #2
    b222:	440b      	add	r3, r1
    b224:	330c      	adds	r3, #12
    b226:	681b      	ldr	r3, [r3, #0]
    b228:	b29b      	uxth	r3, r3
    b22a:	461a      	mov	r2, r3
    b22c:	2100      	movs	r1, #0
    b22e:	6838      	ldr	r0, [r7, #0]
    b230:	4b2f      	ldr	r3, [pc, #188]	; (b2f0 <_pwm_init+0x208>)
    b232:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    b234:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b238:	4928      	ldr	r1, [pc, #160]	; (b2dc <_pwm_init+0x1f4>)
    b23a:	4613      	mov	r3, r2
    b23c:	009b      	lsls	r3, r3, #2
    b23e:	4413      	add	r3, r2
    b240:	009b      	lsls	r3, r3, #2
    b242:	440b      	add	r3, r1
    b244:	3310      	adds	r3, #16
    b246:	681b      	ldr	r3, [r3, #0]
    b248:	b29b      	uxth	r3, r3
    b24a:	461a      	mov	r2, r3
    b24c:	2101      	movs	r1, #1
    b24e:	6838      	ldr	r0, [r7, #0]
    b250:	4b27      	ldr	r3, [pc, #156]	; (b2f0 <_pwm_init+0x208>)
    b252:	4798      	blx	r3
    b254:	e002      	b.n	b25c <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    b256:	f04f 33ff 	mov.w	r3, #4294967295
    b25a:	e02e      	b.n	b2ba <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    b25c:	6879      	ldr	r1, [r7, #4]
    b25e:	6838      	ldr	r0, [r7, #0]
    b260:	4b24      	ldr	r3, [pc, #144]	; (b2f4 <_pwm_init+0x20c>)
    b262:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    b264:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b268:	491c      	ldr	r1, [pc, #112]	; (b2dc <_pwm_init+0x1f4>)
    b26a:	4613      	mov	r3, r2
    b26c:	009b      	lsls	r3, r3, #2
    b26e:	4413      	add	r3, r2
    b270:	009b      	lsls	r3, r3, #2
    b272:	440b      	add	r3, r1
    b274:	3302      	adds	r3, #2
    b276:	f9b3 3000 	ldrsh.w	r3, [r3]
    b27a:	4618      	mov	r0, r3
    b27c:	4b1e      	ldr	r3, [pc, #120]	; (b2f8 <_pwm_init+0x210>)
    b27e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    b280:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b284:	4915      	ldr	r1, [pc, #84]	; (b2dc <_pwm_init+0x1f4>)
    b286:	4613      	mov	r3, r2
    b288:	009b      	lsls	r3, r3, #2
    b28a:	4413      	add	r3, r2
    b28c:	009b      	lsls	r3, r3, #2
    b28e:	440b      	add	r3, r1
    b290:	3302      	adds	r3, #2
    b292:	f9b3 3000 	ldrsh.w	r3, [r3]
    b296:	4618      	mov	r0, r3
    b298:	4b18      	ldr	r3, [pc, #96]	; (b2fc <_pwm_init+0x214>)
    b29a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    b29c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b2a0:	490e      	ldr	r1, [pc, #56]	; (b2dc <_pwm_init+0x1f4>)
    b2a2:	4613      	mov	r3, r2
    b2a4:	009b      	lsls	r3, r3, #2
    b2a6:	4413      	add	r3, r2
    b2a8:	009b      	lsls	r3, r3, #2
    b2aa:	440b      	add	r3, r1
    b2ac:	3302      	adds	r3, #2
    b2ae:	f9b3 3000 	ldrsh.w	r3, [r3]
    b2b2:	4618      	mov	r0, r3
    b2b4:	4b12      	ldr	r3, [pc, #72]	; (b300 <_pwm_init+0x218>)
    b2b6:	4798      	blx	r3

	return 0;
    b2b8:	2300      	movs	r3, #0
}
    b2ba:	4618      	mov	r0, r3
    b2bc:	3710      	adds	r7, #16
    b2be:	46bd      	mov	sp, r7
    b2c0:	bd80      	pop	{r7, pc}
    b2c2:	bf00      	nop
    b2c4:	0000b5c5 	.word	0x0000b5c5
    b2c8:	0000aad5 	.word	0x0000aad5
    b2cc:	0000ac4d 	.word	0x0000ac4d
    b2d0:	0000abfd 	.word	0x0000abfd
    b2d4:	0000aab1 	.word	0x0000aab1
    b2d8:	0000ac7d 	.word	0x0000ac7d
    b2dc:	200000ac 	.word	0x200000ac
    b2e0:	0000acdd 	.word	0x0000acdd
    b2e4:	0000aca1 	.word	0x0000aca1
    b2e8:	0000acbf 	.word	0x0000acbf
    b2ec:	0000addd 	.word	0x0000addd
    b2f0:	0000ad79 	.word	0x0000ad79
    b2f4:	0000b62d 	.word	0x0000b62d
    b2f8:	0000aa31 	.word	0x0000aa31
    b2fc:	0000aa75 	.word	0x0000aa75
    b300:	0000a9f5 	.word	0x0000a9f5

0000b304 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    b304:	b580      	push	{r7, lr}
    b306:	b082      	sub	sp, #8
    b308:	af00      	add	r7, sp, #0
    b30a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    b30c:	687b      	ldr	r3, [r7, #4]
    b30e:	68db      	ldr	r3, [r3, #12]
    b310:	4618      	mov	r0, r3
    b312:	4b03      	ldr	r3, [pc, #12]	; (b320 <_timer_start+0x1c>)
    b314:	4798      	blx	r3
}
    b316:	bf00      	nop
    b318:	3708      	adds	r7, #8
    b31a:	46bd      	mov	sp, r7
    b31c:	bd80      	pop	{r7, pc}
    b31e:	bf00      	nop
    b320:	0000ab9d 	.word	0x0000ab9d

0000b324 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    b324:	b580      	push	{r7, lr}
    b326:	b082      	sub	sp, #8
    b328:	af00      	add	r7, sp, #0
    b32a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    b32c:	687b      	ldr	r3, [r7, #4]
    b32e:	691b      	ldr	r3, [r3, #16]
    b330:	4618      	mov	r0, r3
    b332:	4b03      	ldr	r3, [pc, #12]	; (b340 <_pwm_enable+0x1c>)
    b334:	4798      	blx	r3
}
    b336:	bf00      	nop
    b338:	3708      	adds	r7, #8
    b33a:	46bd      	mov	sp, r7
    b33c:	bd80      	pop	{r7, pc}
    b33e:	bf00      	nop
    b340:	0000ab9d 	.word	0x0000ab9d

0000b344 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    b344:	b580      	push	{r7, lr}
    b346:	b082      	sub	sp, #8
    b348:	af00      	add	r7, sp, #0
    b34a:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    b34c:	687b      	ldr	r3, [r7, #4]
    b34e:	68db      	ldr	r3, [r3, #12]
    b350:	4618      	mov	r0, r3
    b352:	4b03      	ldr	r3, [pc, #12]	; (b360 <_timer_stop+0x1c>)
    b354:	4798      	blx	r3
}
    b356:	bf00      	nop
    b358:	3708      	adds	r7, #8
    b35a:	46bd      	mov	sp, r7
    b35c:	bd80      	pop	{r7, pc}
    b35e:	bf00      	nop
    b360:	0000abfd 	.word	0x0000abfd

0000b364 <_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _timer_get_period(const struct _timer_device *const device)
{
    b364:	b580      	push	{r7, lr}
    b366:	b084      	sub	sp, #16
    b368:	af00      	add	r7, sp, #0
    b36a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b36c:	687b      	ldr	r3, [r7, #4]
    b36e:	68db      	ldr	r3, [r3, #12]
    b370:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    b372:	68f8      	ldr	r0, [r7, #12]
    b374:	4b13      	ldr	r3, [pc, #76]	; (b3c4 <_timer_get_period+0x60>)
    b376:	4798      	blx	r3
    b378:	4603      	mov	r3, r0
    b37a:	2b02      	cmp	r3, #2
    b37c:	d105      	bne.n	b38a <_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    b37e:	2100      	movs	r1, #0
    b380:	68f8      	ldr	r0, [r7, #12]
    b382:	4b11      	ldr	r3, [pc, #68]	; (b3c8 <_timer_get_period+0x64>)
    b384:	4798      	blx	r3
    b386:	4603      	mov	r3, r0
    b388:	e017      	b.n	b3ba <_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    b38a:	68f8      	ldr	r0, [r7, #12]
    b38c:	4b0d      	ldr	r3, [pc, #52]	; (b3c4 <_timer_get_period+0x60>)
    b38e:	4798      	blx	r3
    b390:	4603      	mov	r3, r0
    b392:	2b00      	cmp	r3, #0
    b394:	d105      	bne.n	b3a2 <_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    b396:	2100      	movs	r1, #0
    b398:	68f8      	ldr	r0, [r7, #12]
    b39a:	4b0c      	ldr	r3, [pc, #48]	; (b3cc <_timer_get_period+0x68>)
    b39c:	4798      	blx	r3
    b39e:	4603      	mov	r3, r0
    b3a0:	e00b      	b.n	b3ba <_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    b3a2:	68f8      	ldr	r0, [r7, #12]
    b3a4:	4b07      	ldr	r3, [pc, #28]	; (b3c4 <_timer_get_period+0x60>)
    b3a6:	4798      	blx	r3
    b3a8:	4603      	mov	r3, r0
    b3aa:	2b01      	cmp	r3, #1
    b3ac:	d104      	bne.n	b3b8 <_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    b3ae:	68f8      	ldr	r0, [r7, #12]
    b3b0:	4b07      	ldr	r3, [pc, #28]	; (b3d0 <_timer_get_period+0x6c>)
    b3b2:	4798      	blx	r3
    b3b4:	4603      	mov	r3, r0
    b3b6:	e000      	b.n	b3ba <_timer_get_period+0x56>
	}

	return 0;
    b3b8:	2300      	movs	r3, #0
}
    b3ba:	4618      	mov	r0, r3
    b3bc:	3710      	adds	r7, #16
    b3be:	46bd      	mov	sp, r7
    b3c0:	bd80      	pop	{r7, pc}
    b3c2:	bf00      	nop
    b3c4:	0000ac25 	.word	0x0000ac25
    b3c8:	0000ae0d 	.word	0x0000ae0d
    b3cc:	0000adad 	.word	0x0000adad
    b3d0:	0000ad25 	.word	0x0000ad25

0000b3d4 <_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    b3d4:	b580      	push	{r7, lr}
    b3d6:	b082      	sub	sp, #8
    b3d8:	af00      	add	r7, sp, #0
    b3da:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    b3dc:	687b      	ldr	r3, [r7, #4]
    b3de:	68db      	ldr	r3, [r3, #12]
    b3e0:	4618      	mov	r0, r3
    b3e2:	4b03      	ldr	r3, [pc, #12]	; (b3f0 <_timer_is_started+0x1c>)
    b3e4:	4798      	blx	r3
    b3e6:	4603      	mov	r3, r0
}
    b3e8:	4618      	mov	r0, r3
    b3ea:	3708      	adds	r7, #8
    b3ec:	46bd      	mov	sp, r7
    b3ee:	bd80      	pop	{r7, pc}
    b3f0:	0000abc5 	.word	0x0000abc5

0000b3f4 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    b3f4:	b580      	push	{r7, lr}
    b3f6:	b082      	sub	sp, #8
    b3f8:	af00      	add	r7, sp, #0
    b3fa:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    b3fc:	687b      	ldr	r3, [r7, #4]
    b3fe:	691b      	ldr	r3, [r3, #16]
    b400:	4618      	mov	r0, r3
    b402:	4b03      	ldr	r3, [pc, #12]	; (b410 <_pwm_is_enabled+0x1c>)
    b404:	4798      	blx	r3
    b406:	4603      	mov	r3, r0
}
    b408:	4618      	mov	r0, r3
    b40a:	3708      	adds	r7, #8
    b40c:	46bd      	mov	sp, r7
    b40e:	bd80      	pop	{r7, pc}
    b410:	0000abc5 	.word	0x0000abc5

0000b414 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    b414:	b480      	push	{r7}
    b416:	af00      	add	r7, sp, #0
	return NULL;
    b418:	2300      	movs	r3, #0
}
    b41a:	4618      	mov	r0, r3
    b41c:	46bd      	mov	sp, r7
    b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b422:	4770      	bx	lr

0000b424 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    b424:	b480      	push	{r7}
    b426:	af00      	add	r7, sp, #0
	return NULL;
    b428:	2300      	movs	r3, #0
}
    b42a:	4618      	mov	r0, r3
    b42c:	46bd      	mov	sp, r7
    b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b432:	4770      	bx	lr

0000b434 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    b434:	b580      	push	{r7, lr}
    b436:	b084      	sub	sp, #16
    b438:	af00      	add	r7, sp, #0
    b43a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b43c:	687b      	ldr	r3, [r7, #4]
    b43e:	68db      	ldr	r3, [r3, #12]
    b440:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    b442:	68f8      	ldr	r0, [r7, #12]
    b444:	4b0e      	ldr	r3, [pc, #56]	; (b480 <_timer_set_irq+0x4c>)
    b446:	4798      	blx	r3
    b448:	4603      	mov	r3, r0
    b44a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    b44c:	f240 12a3 	movw	r2, #419	; 0x1a3
    b450:	490c      	ldr	r1, [pc, #48]	; (b484 <_timer_set_irq+0x50>)
    b452:	2001      	movs	r0, #1
    b454:	4b0c      	ldr	r3, [pc, #48]	; (b488 <_timer_set_irq+0x54>)
    b456:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    b458:	f997 200b 	ldrsb.w	r2, [r7, #11]
    b45c:	490b      	ldr	r1, [pc, #44]	; (b48c <_timer_set_irq+0x58>)
    b45e:	4613      	mov	r3, r2
    b460:	009b      	lsls	r3, r3, #2
    b462:	4413      	add	r3, r2
    b464:	009b      	lsls	r3, r3, #2
    b466:	440b      	add	r3, r1
    b468:	3302      	adds	r3, #2
    b46a:	f9b3 3000 	ldrsh.w	r3, [r3]
    b46e:	b2db      	uxtb	r3, r3
    b470:	4618      	mov	r0, r3
    b472:	4b07      	ldr	r3, [pc, #28]	; (b490 <_timer_set_irq+0x5c>)
    b474:	4798      	blx	r3
}
    b476:	bf00      	nop
    b478:	3710      	adds	r7, #16
    b47a:	46bd      	mov	sp, r7
    b47c:	bd80      	pop	{r7, pc}
    b47e:	bf00      	nop
    b480:	0000b5c5 	.word	0x0000b5c5
    b484:	0001a8b0 	.word	0x0001a8b0
    b488:	00006241 	.word	0x00006241
    b48c:	200000ac 	.word	0x200000ac
    b490:	00006a81 	.word	0x00006a81

0000b494 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    b494:	b580      	push	{r7, lr}
    b496:	b084      	sub	sp, #16
    b498:	af00      	add	r7, sp, #0
    b49a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b49c:	687b      	ldr	r3, [r7, #4]
    b49e:	68db      	ldr	r3, [r3, #12]
    b4a0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    b4a2:	68f8      	ldr	r0, [r7, #12]
    b4a4:	4b07      	ldr	r3, [pc, #28]	; (b4c4 <tc_interrupt_handler+0x30>)
    b4a6:	4798      	blx	r3
    b4a8:	4603      	mov	r3, r0
    b4aa:	2b00      	cmp	r3, #0
    b4ac:	d006      	beq.n	b4bc <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    b4ae:	68f8      	ldr	r0, [r7, #12]
    b4b0:	4b05      	ldr	r3, [pc, #20]	; (b4c8 <tc_interrupt_handler+0x34>)
    b4b2:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    b4b4:	687b      	ldr	r3, [r7, #4]
    b4b6:	681b      	ldr	r3, [r3, #0]
    b4b8:	6878      	ldr	r0, [r7, #4]
    b4ba:	4798      	blx	r3
	}
}
    b4bc:	bf00      	nop
    b4be:	3710      	adds	r7, #16
    b4c0:	46bd      	mov	sp, r7
    b4c2:	bd80      	pop	{r7, pc}
    b4c4:	0000aafd 	.word	0x0000aafd
    b4c8:	0000ab25 	.word	0x0000ab25

0000b4cc <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    b4cc:	b580      	push	{r7, lr}
    b4ce:	b084      	sub	sp, #16
    b4d0:	af00      	add	r7, sp, #0
    b4d2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b4d4:	687b      	ldr	r3, [r7, #4]
    b4d6:	691b      	ldr	r3, [r3, #16]
    b4d8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    b4da:	68f8      	ldr	r0, [r7, #12]
    b4dc:	4b12      	ldr	r3, [pc, #72]	; (b528 <tc_pwm_interrupt_handler+0x5c>)
    b4de:	4798      	blx	r3
    b4e0:	4603      	mov	r3, r0
    b4e2:	2b00      	cmp	r3, #0
    b4e4:	d00a      	beq.n	b4fc <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    b4e6:	68f8      	ldr	r0, [r7, #12]
    b4e8:	4b10      	ldr	r3, [pc, #64]	; (b52c <tc_pwm_interrupt_handler+0x60>)
    b4ea:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    b4ec:	687b      	ldr	r3, [r7, #4]
    b4ee:	681b      	ldr	r3, [r3, #0]
    b4f0:	2b00      	cmp	r3, #0
    b4f2:	d003      	beq.n	b4fc <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    b4f4:	687b      	ldr	r3, [r7, #4]
    b4f6:	681b      	ldr	r3, [r3, #0]
    b4f8:	6878      	ldr	r0, [r7, #4]
    b4fa:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    b4fc:	68f8      	ldr	r0, [r7, #12]
    b4fe:	4b0c      	ldr	r3, [pc, #48]	; (b530 <tc_pwm_interrupt_handler+0x64>)
    b500:	4798      	blx	r3
    b502:	4603      	mov	r3, r0
    b504:	2b00      	cmp	r3, #0
    b506:	d00a      	beq.n	b51e <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    b508:	68f8      	ldr	r0, [r7, #12]
    b50a:	4b0a      	ldr	r3, [pc, #40]	; (b534 <tc_pwm_interrupt_handler+0x68>)
    b50c:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    b50e:	687b      	ldr	r3, [r7, #4]
    b510:	685b      	ldr	r3, [r3, #4]
    b512:	2b00      	cmp	r3, #0
    b514:	d003      	beq.n	b51e <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    b516:	687b      	ldr	r3, [r7, #4]
    b518:	685b      	ldr	r3, [r3, #4]
    b51a:	6878      	ldr	r0, [r7, #4]
    b51c:	4798      	blx	r3
		}
	}
}
    b51e:	bf00      	nop
    b520:	3710      	adds	r7, #16
    b522:	46bd      	mov	sp, r7
    b524:	bd80      	pop	{r7, pc}
    b526:	bf00      	nop
    b528:	0000aafd 	.word	0x0000aafd
    b52c:	0000ab25 	.word	0x0000ab25
    b530:	0000ab73 	.word	0x0000ab73
    b534:	0000ab3f 	.word	0x0000ab3f

0000b538 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    b538:	b580      	push	{r7, lr}
    b53a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    b53c:	4b03      	ldr	r3, [pc, #12]	; (b54c <TC0_Handler+0x14>)
    b53e:	681b      	ldr	r3, [r3, #0]
    b540:	4618      	mov	r0, r3
    b542:	4b03      	ldr	r3, [pc, #12]	; (b550 <TC0_Handler+0x18>)
    b544:	4798      	blx	r3
}
    b546:	bf00      	nop
    b548:	bd80      	pop	{r7, pc}
    b54a:	bf00      	nop
    b54c:	200023a8 	.word	0x200023a8
    b550:	0000b495 	.word	0x0000b495

0000b554 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    b554:	b580      	push	{r7, lr}
    b556:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    b558:	4b03      	ldr	r3, [pc, #12]	; (b568 <TC1_Handler+0x14>)
    b55a:	681b      	ldr	r3, [r3, #0]
    b55c:	4618      	mov	r0, r3
    b55e:	4b03      	ldr	r3, [pc, #12]	; (b56c <TC1_Handler+0x18>)
    b560:	4798      	blx	r3
}
    b562:	bf00      	nop
    b564:	bd80      	pop	{r7, pc}
    b566:	bf00      	nop
    b568:	200023ac 	.word	0x200023ac
    b56c:	0000b495 	.word	0x0000b495

0000b570 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    b570:	b580      	push	{r7, lr}
    b572:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    b574:	4b03      	ldr	r3, [pc, #12]	; (b584 <TC2_Handler+0x14>)
    b576:	681b      	ldr	r3, [r3, #0]
    b578:	4618      	mov	r0, r3
    b57a:	4b03      	ldr	r3, [pc, #12]	; (b588 <TC2_Handler+0x18>)
    b57c:	4798      	blx	r3
}
    b57e:	bf00      	nop
    b580:	bd80      	pop	{r7, pc}
    b582:	bf00      	nop
    b584:	200023b0 	.word	0x200023b0
    b588:	0000b495 	.word	0x0000b495

0000b58c <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    b58c:	b580      	push	{r7, lr}
    b58e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    b590:	4b03      	ldr	r3, [pc, #12]	; (b5a0 <TC3_Handler+0x14>)
    b592:	681b      	ldr	r3, [r3, #0]
    b594:	4618      	mov	r0, r3
    b596:	4b03      	ldr	r3, [pc, #12]	; (b5a4 <TC3_Handler+0x18>)
    b598:	4798      	blx	r3
}
    b59a:	bf00      	nop
    b59c:	bd80      	pop	{r7, pc}
    b59e:	bf00      	nop
    b5a0:	200023b4 	.word	0x200023b4
    b5a4:	0000b495 	.word	0x0000b495

0000b5a8 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    b5a8:	b580      	push	{r7, lr}
    b5aa:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    b5ac:	4b03      	ldr	r3, [pc, #12]	; (b5bc <TC7_Handler+0x14>)
    b5ae:	681b      	ldr	r3, [r3, #0]
    b5b0:	4618      	mov	r0, r3
    b5b2:	4b03      	ldr	r3, [pc, #12]	; (b5c0 <TC7_Handler+0x18>)
    b5b4:	4798      	blx	r3
}
    b5b6:	bf00      	nop
    b5b8:	bd80      	pop	{r7, pc}
    b5ba:	bf00      	nop
    b5bc:	200023b8 	.word	0x200023b8
    b5c0:	0000b4cd 	.word	0x0000b4cd

0000b5c4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    b5c4:	b580      	push	{r7, lr}
    b5c6:	b084      	sub	sp, #16
    b5c8:	af00      	add	r7, sp, #0
    b5ca:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    b5cc:	6878      	ldr	r0, [r7, #4]
    b5ce:	4b13      	ldr	r3, [pc, #76]	; (b61c <get_tc_index+0x58>)
    b5d0:	4798      	blx	r3
    b5d2:	4603      	mov	r3, r0
    b5d4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    b5d6:	2300      	movs	r3, #0
    b5d8:	73fb      	strb	r3, [r7, #15]
    b5da:	e010      	b.n	b5fe <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    b5dc:	7bfa      	ldrb	r2, [r7, #15]
    b5de:	4910      	ldr	r1, [pc, #64]	; (b620 <get_tc_index+0x5c>)
    b5e0:	4613      	mov	r3, r2
    b5e2:	009b      	lsls	r3, r3, #2
    b5e4:	4413      	add	r3, r2
    b5e6:	009b      	lsls	r3, r3, #2
    b5e8:	440b      	add	r3, r1
    b5ea:	781b      	ldrb	r3, [r3, #0]
    b5ec:	7bba      	ldrb	r2, [r7, #14]
    b5ee:	429a      	cmp	r2, r3
    b5f0:	d102      	bne.n	b5f8 <get_tc_index+0x34>
			return i;
    b5f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b5f6:	e00d      	b.n	b614 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    b5f8:	7bfb      	ldrb	r3, [r7, #15]
    b5fa:	3301      	adds	r3, #1
    b5fc:	73fb      	strb	r3, [r7, #15]
    b5fe:	7bfb      	ldrb	r3, [r7, #15]
    b600:	2b04      	cmp	r3, #4
    b602:	d9eb      	bls.n	b5dc <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    b604:	f240 2206 	movw	r2, #518	; 0x206
    b608:	4906      	ldr	r1, [pc, #24]	; (b624 <get_tc_index+0x60>)
    b60a:	2000      	movs	r0, #0
    b60c:	4b06      	ldr	r3, [pc, #24]	; (b628 <get_tc_index+0x64>)
    b60e:	4798      	blx	r3
	return -1;
    b610:	f04f 33ff 	mov.w	r3, #4294967295
}
    b614:	4618      	mov	r0, r3
    b616:	3710      	adds	r7, #16
    b618:	46bd      	mov	sp, r7
    b61a:	bd80      	pop	{r7, pc}
    b61c:	0000b6b1 	.word	0x0000b6b1
    b620:	200000ac 	.word	0x200000ac
    b624:	0001a8b0 	.word	0x0001a8b0
    b628:	00006241 	.word	0x00006241

0000b62c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    b62c:	b480      	push	{r7}
    b62e:	b083      	sub	sp, #12
    b630:	af00      	add	r7, sp, #0
    b632:	6078      	str	r0, [r7, #4]
    b634:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    b636:	687b      	ldr	r3, [r7, #4]
    b638:	4a13      	ldr	r2, [pc, #76]	; (b688 <_tc_init_irq_param+0x5c>)
    b63a:	4293      	cmp	r3, r2
    b63c:	d102      	bne.n	b644 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    b63e:	4a13      	ldr	r2, [pc, #76]	; (b68c <_tc_init_irq_param+0x60>)
    b640:	683b      	ldr	r3, [r7, #0]
    b642:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    b644:	687b      	ldr	r3, [r7, #4]
    b646:	4a12      	ldr	r2, [pc, #72]	; (b690 <_tc_init_irq_param+0x64>)
    b648:	4293      	cmp	r3, r2
    b64a:	d102      	bne.n	b652 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    b64c:	4a11      	ldr	r2, [pc, #68]	; (b694 <_tc_init_irq_param+0x68>)
    b64e:	683b      	ldr	r3, [r7, #0]
    b650:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    b652:	687b      	ldr	r3, [r7, #4]
    b654:	4a10      	ldr	r2, [pc, #64]	; (b698 <_tc_init_irq_param+0x6c>)
    b656:	4293      	cmp	r3, r2
    b658:	d102      	bne.n	b660 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    b65a:	4a10      	ldr	r2, [pc, #64]	; (b69c <_tc_init_irq_param+0x70>)
    b65c:	683b      	ldr	r3, [r7, #0]
    b65e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    b660:	687b      	ldr	r3, [r7, #4]
    b662:	4a0f      	ldr	r2, [pc, #60]	; (b6a0 <_tc_init_irq_param+0x74>)
    b664:	4293      	cmp	r3, r2
    b666:	d102      	bne.n	b66e <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    b668:	4a0e      	ldr	r2, [pc, #56]	; (b6a4 <_tc_init_irq_param+0x78>)
    b66a:	683b      	ldr	r3, [r7, #0]
    b66c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    b66e:	687b      	ldr	r3, [r7, #4]
    b670:	4a0d      	ldr	r2, [pc, #52]	; (b6a8 <_tc_init_irq_param+0x7c>)
    b672:	4293      	cmp	r3, r2
    b674:	d102      	bne.n	b67c <_tc_init_irq_param+0x50>
		_tc7_dev = (struct _pwm_device *)dev;
    b676:	4a0d      	ldr	r2, [pc, #52]	; (b6ac <_tc_init_irq_param+0x80>)
    b678:	683b      	ldr	r3, [r7, #0]
    b67a:	6013      	str	r3, [r2, #0]
	}
}
    b67c:	bf00      	nop
    b67e:	370c      	adds	r7, #12
    b680:	46bd      	mov	sp, r7
    b682:	f85d 7b04 	ldr.w	r7, [sp], #4
    b686:	4770      	bx	lr
    b688:	40003800 	.word	0x40003800
    b68c:	200023a8 	.word	0x200023a8
    b690:	40003c00 	.word	0x40003c00
    b694:	200023ac 	.word	0x200023ac
    b698:	4101a000 	.word	0x4101a000
    b69c:	200023b0 	.word	0x200023b0
    b6a0:	4101c000 	.word	0x4101c000
    b6a4:	200023b4 	.word	0x200023b4
    b6a8:	43001800 	.word	0x43001800
    b6ac:	200023b8 	.word	0x200023b8

0000b6b0 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    b6b0:	b4b0      	push	{r4, r5, r7}
    b6b2:	b08d      	sub	sp, #52	; 0x34
    b6b4:	af00      	add	r7, sp, #0
    b6b6:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    b6b8:	4b13      	ldr	r3, [pc, #76]	; (b708 <_get_hardware_offset+0x58>)
    b6ba:	f107 040c 	add.w	r4, r7, #12
    b6be:	461d      	mov	r5, r3
    b6c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b6c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b6c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    b6c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    b6cc:	2300      	movs	r3, #0
    b6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    b6d0:	e010      	b.n	b6f4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    b6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6d4:	009b      	lsls	r3, r3, #2
    b6d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b6da:	4413      	add	r3, r2
    b6dc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    b6e0:	461a      	mov	r2, r3
    b6e2:	687b      	ldr	r3, [r7, #4]
    b6e4:	429a      	cmp	r2, r3
    b6e6:	d102      	bne.n	b6ee <_get_hardware_offset+0x3e>
			return i;
    b6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6ea:	b2db      	uxtb	r3, r3
    b6ec:	e006      	b.n	b6fc <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    b6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6f0:	3301      	adds	r3, #1
    b6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    b6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6f6:	2b07      	cmp	r3, #7
    b6f8:	d9eb      	bls.n	b6d2 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    b6fa:	2300      	movs	r3, #0
}
    b6fc:	4618      	mov	r0, r3
    b6fe:	3734      	adds	r7, #52	; 0x34
    b700:	46bd      	mov	sp, r7
    b702:	bcb0      	pop	{r4, r5, r7}
    b704:	4770      	bx	lr
    b706:	bf00      	nop
    b708:	0001a8c4 	.word	0x0001a8c4

0000b70c <__NVIC_EnableIRQ>:
{
    b70c:	b480      	push	{r7}
    b70e:	b083      	sub	sp, #12
    b710:	af00      	add	r7, sp, #0
    b712:	4603      	mov	r3, r0
    b714:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b71a:	2b00      	cmp	r3, #0
    b71c:	db0b      	blt.n	b736 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b71e:	4909      	ldr	r1, [pc, #36]	; (b744 <__NVIC_EnableIRQ+0x38>)
    b720:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b724:	095b      	lsrs	r3, r3, #5
    b726:	88fa      	ldrh	r2, [r7, #6]
    b728:	f002 021f 	and.w	r2, r2, #31
    b72c:	2001      	movs	r0, #1
    b72e:	fa00 f202 	lsl.w	r2, r0, r2
    b732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b736:	bf00      	nop
    b738:	370c      	adds	r7, #12
    b73a:	46bd      	mov	sp, r7
    b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b740:	4770      	bx	lr
    b742:	bf00      	nop
    b744:	e000e100 	.word	0xe000e100

0000b748 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    b748:	b480      	push	{r7}
    b74a:	b087      	sub	sp, #28
    b74c:	af00      	add	r7, sp, #0
    b74e:	60f8      	str	r0, [r7, #12]
    b750:	460b      	mov	r3, r1
    b752:	607a      	str	r2, [r7, #4]
    b754:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    b756:	7afa      	ldrb	r2, [r7, #11]
    b758:	68f9      	ldr	r1, [r7, #12]
    b75a:	4613      	mov	r3, r2
    b75c:	009b      	lsls	r3, r3, #2
    b75e:	4413      	add	r3, r2
    b760:	009b      	lsls	r3, r3, #2
    b762:	440b      	add	r3, r1
    b764:	3340      	adds	r3, #64	; 0x40
    b766:	681b      	ldr	r3, [r3, #0]
    b768:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    b76a:	697a      	ldr	r2, [r7, #20]
    b76c:	687b      	ldr	r3, [r7, #4]
    b76e:	4013      	ands	r3, r2
    b770:	617b      	str	r3, [r7, #20]
	return tmp;
    b772:	697b      	ldr	r3, [r7, #20]
}
    b774:	4618      	mov	r0, r3
    b776:	371c      	adds	r7, #28
    b778:	46bd      	mov	sp, r7
    b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b77e:	4770      	bx	lr

0000b780 <hri_oscctrl_get_STATUS_reg>:
{
    b780:	b480      	push	{r7}
    b782:	b085      	sub	sp, #20
    b784:	af00      	add	r7, sp, #0
    b786:	6078      	str	r0, [r7, #4]
    b788:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    b78a:	687b      	ldr	r3, [r7, #4]
    b78c:	691b      	ldr	r3, [r3, #16]
    b78e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    b790:	68fa      	ldr	r2, [r7, #12]
    b792:	683b      	ldr	r3, [r7, #0]
    b794:	4013      	ands	r3, r2
    b796:	60fb      	str	r3, [r7, #12]
	return tmp;
    b798:	68fb      	ldr	r3, [r7, #12]
}
    b79a:	4618      	mov	r0, r3
    b79c:	3714      	adds	r7, #20
    b79e:	46bd      	mov	sp, r7
    b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7a4:	4770      	bx	lr

0000b7a6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    b7a6:	b480      	push	{r7}
    b7a8:	b085      	sub	sp, #20
    b7aa:	af00      	add	r7, sp, #0
    b7ac:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    b7ae:	687b      	ldr	r3, [r7, #4]
    b7b0:	f893 3020 	ldrb.w	r3, [r3, #32]
    b7b4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    b7b6:	7bfb      	ldrb	r3, [r7, #15]
    b7b8:	f003 0301 	and.w	r3, r3, #1
    b7bc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b7be:	7bfb      	ldrb	r3, [r7, #15]
    b7c0:	2b00      	cmp	r3, #0
    b7c2:	bf14      	ite	ne
    b7c4:	2301      	movne	r3, #1
    b7c6:	2300      	moveq	r3, #0
    b7c8:	b2db      	uxtb	r3, r3
}
    b7ca:	4618      	mov	r0, r3
    b7cc:	3714      	adds	r7, #20
    b7ce:	46bd      	mov	sp, r7
    b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7d4:	4770      	bx	lr

0000b7d6 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    b7d6:	b480      	push	{r7}
    b7d8:	b083      	sub	sp, #12
    b7da:	af00      	add	r7, sp, #0
    b7dc:	6078      	str	r0, [r7, #4]
    b7de:	460b      	mov	r3, r1
    b7e0:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    b7e2:	bf00      	nop
    b7e4:	687b      	ldr	r3, [r7, #4]
    b7e6:	789b      	ldrb	r3, [r3, #2]
    b7e8:	b2da      	uxtb	r2, r3
    b7ea:	78fb      	ldrb	r3, [r7, #3]
    b7ec:	4013      	ands	r3, r2
    b7ee:	b2db      	uxtb	r3, r3
    b7f0:	2b00      	cmp	r3, #0
    b7f2:	d1f7      	bne.n	b7e4 <hri_usb_wait_for_sync+0xe>
	};
}
    b7f4:	bf00      	nop
    b7f6:	370c      	adds	r7, #12
    b7f8:	46bd      	mov	sp, r7
    b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7fe:	4770      	bx	lr

0000b800 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    b800:	b480      	push	{r7}
    b802:	b083      	sub	sp, #12
    b804:	af00      	add	r7, sp, #0
    b806:	6078      	str	r0, [r7, #4]
    b808:	460b      	mov	r3, r1
    b80a:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    b80c:	687b      	ldr	r3, [r7, #4]
    b80e:	789b      	ldrb	r3, [r3, #2]
    b810:	b2da      	uxtb	r2, r3
    b812:	78fb      	ldrb	r3, [r7, #3]
    b814:	4013      	ands	r3, r2
    b816:	b2db      	uxtb	r3, r3
    b818:	2b00      	cmp	r3, #0
    b81a:	bf14      	ite	ne
    b81c:	2301      	movne	r3, #1
    b81e:	2300      	moveq	r3, #0
    b820:	b2db      	uxtb	r3, r3
}
    b822:	4618      	mov	r0, r3
    b824:	370c      	adds	r7, #12
    b826:	46bd      	mov	sp, r7
    b828:	f85d 7b04 	ldr.w	r7, [sp], #4
    b82c:	4770      	bx	lr

0000b82e <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    b82e:	b480      	push	{r7}
    b830:	b085      	sub	sp, #20
    b832:	af00      	add	r7, sp, #0
    b834:	6078      	str	r0, [r7, #4]
    b836:	460b      	mov	r3, r1
    b838:	70fb      	strb	r3, [r7, #3]
    b83a:	4613      	mov	r3, r2
    b83c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    b83e:	78fb      	ldrb	r3, [r7, #3]
    b840:	687a      	ldr	r2, [r7, #4]
    b842:	3308      	adds	r3, #8
    b844:	015b      	lsls	r3, r3, #5
    b846:	4413      	add	r3, r2
    b848:	3307      	adds	r3, #7
    b84a:	781b      	ldrb	r3, [r3, #0]
    b84c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    b84e:	7bfa      	ldrb	r2, [r7, #15]
    b850:	78bb      	ldrb	r3, [r7, #2]
    b852:	4013      	ands	r3, r2
    b854:	73fb      	strb	r3, [r7, #15]
	return tmp;
    b856:	7bfb      	ldrb	r3, [r7, #15]
}
    b858:	4618      	mov	r0, r3
    b85a:	3714      	adds	r7, #20
    b85c:	46bd      	mov	sp, r7
    b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b862:	4770      	bx	lr

0000b864 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    b864:	b480      	push	{r7}
    b866:	b083      	sub	sp, #12
    b868:	af00      	add	r7, sp, #0
    b86a:	6078      	str	r0, [r7, #4]
    b86c:	460b      	mov	r3, r1
    b86e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    b870:	78fb      	ldrb	r3, [r7, #3]
    b872:	687a      	ldr	r2, [r7, #4]
    b874:	3308      	adds	r3, #8
    b876:	015b      	lsls	r3, r3, #5
    b878:	4413      	add	r3, r2
    b87a:	3307      	adds	r3, #7
    b87c:	781b      	ldrb	r3, [r3, #0]
    b87e:	b2db      	uxtb	r3, r3
}
    b880:	4618      	mov	r0, r3
    b882:	370c      	adds	r7, #12
    b884:	46bd      	mov	sp, r7
    b886:	f85d 7b04 	ldr.w	r7, [sp], #4
    b88a:	4770      	bx	lr

0000b88c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    b88c:	b480      	push	{r7}
    b88e:	b083      	sub	sp, #12
    b890:	af00      	add	r7, sp, #0
    b892:	6078      	str	r0, [r7, #4]
    b894:	460b      	mov	r3, r1
    b896:	70fb      	strb	r3, [r7, #3]
    b898:	4613      	mov	r3, r2
    b89a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    b89c:	78fb      	ldrb	r3, [r7, #3]
    b89e:	687a      	ldr	r2, [r7, #4]
    b8a0:	3308      	adds	r3, #8
    b8a2:	015b      	lsls	r3, r3, #5
    b8a4:	4413      	add	r3, r2
    b8a6:	3307      	adds	r3, #7
    b8a8:	78ba      	ldrb	r2, [r7, #2]
    b8aa:	701a      	strb	r2, [r3, #0]
}
    b8ac:	bf00      	nop
    b8ae:	370c      	adds	r7, #12
    b8b0:	46bd      	mov	sp, r7
    b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8b6:	4770      	bx	lr

0000b8b8 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    b8b8:	b480      	push	{r7}
    b8ba:	b083      	sub	sp, #12
    b8bc:	af00      	add	r7, sp, #0
    b8be:	6078      	str	r0, [r7, #4]
    b8c0:	460b      	mov	r3, r1
    b8c2:	70fb      	strb	r3, [r7, #3]
    b8c4:	4613      	mov	r3, r2
    b8c6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    b8c8:	78fb      	ldrb	r3, [r7, #3]
    b8ca:	687a      	ldr	r2, [r7, #4]
    b8cc:	3308      	adds	r3, #8
    b8ce:	015b      	lsls	r3, r3, #5
    b8d0:	4413      	add	r3, r2
    b8d2:	3305      	adds	r3, #5
    b8d4:	78ba      	ldrb	r2, [r7, #2]
    b8d6:	701a      	strb	r2, [r3, #0]
}
    b8d8:	bf00      	nop
    b8da:	370c      	adds	r7, #12
    b8dc:	46bd      	mov	sp, r7
    b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8e2:	4770      	bx	lr

0000b8e4 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    b8e4:	b480      	push	{r7}
    b8e6:	b083      	sub	sp, #12
    b8e8:	af00      	add	r7, sp, #0
    b8ea:	6078      	str	r0, [r7, #4]
    b8ec:	460b      	mov	r3, r1
    b8ee:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    b8f0:	78fb      	ldrb	r3, [r7, #3]
    b8f2:	687a      	ldr	r2, [r7, #4]
    b8f4:	3308      	adds	r3, #8
    b8f6:	015b      	lsls	r3, r3, #5
    b8f8:	4413      	add	r3, r2
    b8fa:	3306      	adds	r3, #6
    b8fc:	781b      	ldrb	r3, [r3, #0]
    b8fe:	b2db      	uxtb	r3, r3
}
    b900:	4618      	mov	r0, r3
    b902:	370c      	adds	r7, #12
    b904:	46bd      	mov	sp, r7
    b906:	f85d 7b04 	ldr.w	r7, [sp], #4
    b90a:	4770      	bx	lr

0000b90c <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    b90c:	b480      	push	{r7}
    b90e:	b083      	sub	sp, #12
    b910:	af00      	add	r7, sp, #0
    b912:	6078      	str	r0, [r7, #4]
    b914:	460b      	mov	r3, r1
    b916:	70fb      	strb	r3, [r7, #3]
    b918:	4613      	mov	r3, r2
    b91a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    b91c:	78fb      	ldrb	r3, [r7, #3]
    b91e:	687a      	ldr	r2, [r7, #4]
    b920:	3308      	adds	r3, #8
    b922:	015b      	lsls	r3, r3, #5
    b924:	4413      	add	r3, r2
    b926:	3304      	adds	r3, #4
    b928:	78ba      	ldrb	r2, [r7, #2]
    b92a:	701a      	strb	r2, [r3, #0]
}
    b92c:	bf00      	nop
    b92e:	370c      	adds	r7, #12
    b930:	46bd      	mov	sp, r7
    b932:	f85d 7b04 	ldr.w	r7, [sp], #4
    b936:	4770      	bx	lr

0000b938 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    b938:	b480      	push	{r7}
    b93a:	b083      	sub	sp, #12
    b93c:	af00      	add	r7, sp, #0
    b93e:	6078      	str	r0, [r7, #4]
    b940:	460b      	mov	r3, r1
    b942:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    b944:	78fb      	ldrb	r3, [r7, #3]
    b946:	687a      	ldr	r2, [r7, #4]
    b948:	015b      	lsls	r3, r3, #5
    b94a:	4413      	add	r3, r2
    b94c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    b950:	2210      	movs	r2, #16
    b952:	701a      	strb	r2, [r3, #0]
}
    b954:	bf00      	nop
    b956:	370c      	adds	r7, #12
    b958:	46bd      	mov	sp, r7
    b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b95e:	4770      	bx	lr

0000b960 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    b960:	b480      	push	{r7}
    b962:	b083      	sub	sp, #12
    b964:	af00      	add	r7, sp, #0
    b966:	6078      	str	r0, [r7, #4]
    b968:	460b      	mov	r3, r1
    b96a:	70fb      	strb	r3, [r7, #3]
    b96c:	4613      	mov	r3, r2
    b96e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    b970:	78fb      	ldrb	r3, [r7, #3]
    b972:	687a      	ldr	r2, [r7, #4]
    b974:	015b      	lsls	r3, r3, #5
    b976:	4413      	add	r3, r2
    b978:	f203 1309 	addw	r3, r3, #265	; 0x109
    b97c:	78ba      	ldrb	r2, [r7, #2]
    b97e:	701a      	strb	r2, [r3, #0]
}
    b980:	bf00      	nop
    b982:	370c      	adds	r7, #12
    b984:	46bd      	mov	sp, r7
    b986:	f85d 7b04 	ldr.w	r7, [sp], #4
    b98a:	4770      	bx	lr

0000b98c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    b98c:	b480      	push	{r7}
    b98e:	b083      	sub	sp, #12
    b990:	af00      	add	r7, sp, #0
    b992:	6078      	str	r0, [r7, #4]
    b994:	460b      	mov	r3, r1
    b996:	70fb      	strb	r3, [r7, #3]
    b998:	4613      	mov	r3, r2
    b99a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    b99c:	78fb      	ldrb	r3, [r7, #3]
    b99e:	687a      	ldr	r2, [r7, #4]
    b9a0:	015b      	lsls	r3, r3, #5
    b9a2:	4413      	add	r3, r2
    b9a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    b9a8:	78ba      	ldrb	r2, [r7, #2]
    b9aa:	701a      	strb	r2, [r3, #0]
}
    b9ac:	bf00      	nop
    b9ae:	370c      	adds	r7, #12
    b9b0:	46bd      	mov	sp, r7
    b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9b6:	4770      	bx	lr

0000b9b8 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    b9b8:	b480      	push	{r7}
    b9ba:	b085      	sub	sp, #20
    b9bc:	af00      	add	r7, sp, #0
    b9be:	6078      	str	r0, [r7, #4]
    b9c0:	460b      	mov	r3, r1
    b9c2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    b9c4:	78fb      	ldrb	r3, [r7, #3]
    b9c6:	687a      	ldr	r2, [r7, #4]
    b9c8:	3308      	adds	r3, #8
    b9ca:	015b      	lsls	r3, r3, #5
    b9cc:	4413      	add	r3, r2
    b9ce:	781b      	ldrb	r3, [r3, #0]
    b9d0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    b9d2:	7bfb      	ldrb	r3, [r7, #15]
    b9d4:	f003 0307 	and.w	r3, r3, #7
    b9d8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    b9da:	7bfb      	ldrb	r3, [r7, #15]
}
    b9dc:	4618      	mov	r0, r3
    b9de:	3714      	adds	r7, #20
    b9e0:	46bd      	mov	sp, r7
    b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9e6:	4770      	bx	lr

0000b9e8 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    b9e8:	b480      	push	{r7}
    b9ea:	b085      	sub	sp, #20
    b9ec:	af00      	add	r7, sp, #0
    b9ee:	6078      	str	r0, [r7, #4]
    b9f0:	460b      	mov	r3, r1
    b9f2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    b9f4:	78fb      	ldrb	r3, [r7, #3]
    b9f6:	687a      	ldr	r2, [r7, #4]
    b9f8:	3308      	adds	r3, #8
    b9fa:	015b      	lsls	r3, r3, #5
    b9fc:	4413      	add	r3, r2
    b9fe:	781b      	ldrb	r3, [r3, #0]
    ba00:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    ba02:	7bfb      	ldrb	r3, [r7, #15]
    ba04:	091b      	lsrs	r3, r3, #4
    ba06:	b2db      	uxtb	r3, r3
    ba08:	f003 0307 	and.w	r3, r3, #7
    ba0c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ba0e:	7bfb      	ldrb	r3, [r7, #15]
}
    ba10:	4618      	mov	r0, r3
    ba12:	3714      	adds	r7, #20
    ba14:	46bd      	mov	sp, r7
    ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba1a:	4770      	bx	lr

0000ba1c <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    ba1c:	b480      	push	{r7}
    ba1e:	b083      	sub	sp, #12
    ba20:	af00      	add	r7, sp, #0
    ba22:	6078      	str	r0, [r7, #4]
    ba24:	460b      	mov	r3, r1
    ba26:	70fb      	strb	r3, [r7, #3]
    ba28:	4613      	mov	r3, r2
    ba2a:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    ba2c:	78fb      	ldrb	r3, [r7, #3]
    ba2e:	687a      	ldr	r2, [r7, #4]
    ba30:	3308      	adds	r3, #8
    ba32:	015b      	lsls	r3, r3, #5
    ba34:	4413      	add	r3, r2
    ba36:	78ba      	ldrb	r2, [r7, #2]
    ba38:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    ba3a:	bf00      	nop
    ba3c:	370c      	adds	r7, #12
    ba3e:	46bd      	mov	sp, r7
    ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba44:	4770      	bx	lr

0000ba46 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    ba46:	b480      	push	{r7}
    ba48:	b083      	sub	sp, #12
    ba4a:	af00      	add	r7, sp, #0
    ba4c:	6078      	str	r0, [r7, #4]
    ba4e:	460b      	mov	r3, r1
    ba50:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ba52:	78fb      	ldrb	r3, [r7, #3]
    ba54:	687a      	ldr	r2, [r7, #4]
    ba56:	3308      	adds	r3, #8
    ba58:	015b      	lsls	r3, r3, #5
    ba5a:	4413      	add	r3, r2
    ba5c:	781b      	ldrb	r3, [r3, #0]
    ba5e:	b2db      	uxtb	r3, r3
}
    ba60:	4618      	mov	r0, r3
    ba62:	370c      	adds	r7, #12
    ba64:	46bd      	mov	sp, r7
    ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba6a:	4770      	bx	lr

0000ba6c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    ba6c:	b480      	push	{r7}
    ba6e:	b083      	sub	sp, #12
    ba70:	af00      	add	r7, sp, #0
    ba72:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    ba74:	687b      	ldr	r3, [r7, #4]
    ba76:	8b9b      	ldrh	r3, [r3, #28]
    ba78:	b29b      	uxth	r3, r3
}
    ba7a:	4618      	mov	r0, r3
    ba7c:	370c      	adds	r7, #12
    ba7e:	46bd      	mov	sp, r7
    ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba84:	4770      	bx	lr

0000ba86 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    ba86:	b480      	push	{r7}
    ba88:	b083      	sub	sp, #12
    ba8a:	af00      	add	r7, sp, #0
    ba8c:	6078      	str	r0, [r7, #4]
    ba8e:	460b      	mov	r3, r1
    ba90:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    ba92:	687b      	ldr	r3, [r7, #4]
    ba94:	887a      	ldrh	r2, [r7, #2]
    ba96:	839a      	strh	r2, [r3, #28]
}
    ba98:	bf00      	nop
    ba9a:	370c      	adds	r7, #12
    ba9c:	46bd      	mov	sp, r7
    ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    baa2:	4770      	bx	lr

0000baa4 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    baa4:	b480      	push	{r7}
    baa6:	b083      	sub	sp, #12
    baa8:	af00      	add	r7, sp, #0
    baaa:	6078      	str	r0, [r7, #4]
    baac:	460b      	mov	r3, r1
    baae:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    bab0:	687b      	ldr	r3, [r7, #4]
    bab2:	887a      	ldrh	r2, [r7, #2]
    bab4:	831a      	strh	r2, [r3, #24]
}
    bab6:	bf00      	nop
    bab8:	370c      	adds	r7, #12
    baba:	46bd      	mov	sp, r7
    babc:	f85d 7b04 	ldr.w	r7, [sp], #4
    bac0:	4770      	bx	lr

0000bac2 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    bac2:	b480      	push	{r7}
    bac4:	b083      	sub	sp, #12
    bac6:	af00      	add	r7, sp, #0
    bac8:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    baca:	687b      	ldr	r3, [r7, #4]
    bacc:	8b1b      	ldrh	r3, [r3, #24]
    bace:	b29b      	uxth	r3, r3
}
    bad0:	4618      	mov	r0, r3
    bad2:	370c      	adds	r7, #12
    bad4:	46bd      	mov	sp, r7
    bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
    bada:	4770      	bx	lr

0000badc <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    badc:	b480      	push	{r7}
    bade:	b083      	sub	sp, #12
    bae0:	af00      	add	r7, sp, #0
    bae2:	6078      	str	r0, [r7, #4]
    bae4:	460b      	mov	r3, r1
    bae6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    bae8:	687b      	ldr	r3, [r7, #4]
    baea:	887a      	ldrh	r2, [r7, #2]
    baec:	829a      	strh	r2, [r3, #20]
}
    baee:	bf00      	nop
    baf0:	370c      	adds	r7, #12
    baf2:	46bd      	mov	sp, r7
    baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    baf8:	4770      	bx	lr

0000bafa <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    bafa:	b480      	push	{r7}
    bafc:	b085      	sub	sp, #20
    bafe:	af00      	add	r7, sp, #0
    bb00:	6078      	str	r0, [r7, #4]
    bb02:	460b      	mov	r3, r1
    bb04:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    bb06:	687b      	ldr	r3, [r7, #4]
    bb08:	789b      	ldrb	r3, [r3, #2]
    bb0a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    bb0c:	7bfa      	ldrb	r2, [r7, #15]
    bb0e:	78fb      	ldrb	r3, [r7, #3]
    bb10:	4013      	ands	r3, r2
    bb12:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bb14:	7bfb      	ldrb	r3, [r7, #15]
}
    bb16:	4618      	mov	r0, r3
    bb18:	3714      	adds	r7, #20
    bb1a:	46bd      	mov	sp, r7
    bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb20:	4770      	bx	lr
	...

0000bb24 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    bb24:	b580      	push	{r7, lr}
    bb26:	b082      	sub	sp, #8
    bb28:	af00      	add	r7, sp, #0
    bb2a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    bb2c:	687b      	ldr	r3, [r7, #4]
    bb2e:	781b      	ldrb	r3, [r3, #0]
    bb30:	b2db      	uxtb	r3, r3
    bb32:	f023 0302 	bic.w	r3, r3, #2
    bb36:	b2da      	uxtb	r2, r3
    bb38:	687b      	ldr	r3, [r7, #4]
    bb3a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    bb3c:	2103      	movs	r1, #3
    bb3e:	6878      	ldr	r0, [r7, #4]
    bb40:	4b02      	ldr	r3, [pc, #8]	; (bb4c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    bb42:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    bb44:	bf00      	nop
    bb46:	3708      	adds	r7, #8
    bb48:	46bd      	mov	sp, r7
    bb4a:	bd80      	pop	{r7, pc}
    bb4c:	0000b7d7 	.word	0x0000b7d7

0000bb50 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    bb50:	b580      	push	{r7, lr}
    bb52:	b084      	sub	sp, #16
    bb54:	af00      	add	r7, sp, #0
    bb56:	6078      	str	r0, [r7, #4]
    bb58:	460b      	mov	r3, r1
    bb5a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    bb5c:	2103      	movs	r1, #3
    bb5e:	6878      	ldr	r0, [r7, #4]
    bb60:	4b06      	ldr	r3, [pc, #24]	; (bb7c <hri_usb_get_CTRLA_reg+0x2c>)
    bb62:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    bb64:	687b      	ldr	r3, [r7, #4]
    bb66:	781b      	ldrb	r3, [r3, #0]
    bb68:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    bb6a:	7bfa      	ldrb	r2, [r7, #15]
    bb6c:	78fb      	ldrb	r3, [r7, #3]
    bb6e:	4013      	ands	r3, r2
    bb70:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bb72:	7bfb      	ldrb	r3, [r7, #15]
}
    bb74:	4618      	mov	r0, r3
    bb76:	3710      	adds	r7, #16
    bb78:	46bd      	mov	sp, r7
    bb7a:	bd80      	pop	{r7, pc}
    bb7c:	0000b7d7 	.word	0x0000b7d7

0000bb80 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    bb80:	b580      	push	{r7, lr}
    bb82:	b082      	sub	sp, #8
    bb84:	af00      	add	r7, sp, #0
    bb86:	6078      	str	r0, [r7, #4]
    bb88:	460b      	mov	r3, r1
    bb8a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    bb8c:	687b      	ldr	r3, [r7, #4]
    bb8e:	78fa      	ldrb	r2, [r7, #3]
    bb90:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    bb92:	2103      	movs	r1, #3
    bb94:	6878      	ldr	r0, [r7, #4]
    bb96:	4b03      	ldr	r3, [pc, #12]	; (bba4 <hri_usb_write_CTRLA_reg+0x24>)
    bb98:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    bb9a:	bf00      	nop
    bb9c:	3708      	adds	r7, #8
    bb9e:	46bd      	mov	sp, r7
    bba0:	bd80      	pop	{r7, pc}
    bba2:	bf00      	nop
    bba4:	0000b7d7 	.word	0x0000b7d7

0000bba8 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    bba8:	b580      	push	{r7, lr}
    bbaa:	b082      	sub	sp, #8
    bbac:	af00      	add	r7, sp, #0
    bbae:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    bbb0:	2103      	movs	r1, #3
    bbb2:	6878      	ldr	r0, [r7, #4]
    bbb4:	4b04      	ldr	r3, [pc, #16]	; (bbc8 <hri_usb_read_CTRLA_reg+0x20>)
    bbb6:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    bbb8:	687b      	ldr	r3, [r7, #4]
    bbba:	781b      	ldrb	r3, [r3, #0]
    bbbc:	b2db      	uxtb	r3, r3
}
    bbbe:	4618      	mov	r0, r3
    bbc0:	3708      	adds	r7, #8
    bbc2:	46bd      	mov	sp, r7
    bbc4:	bd80      	pop	{r7, pc}
    bbc6:	bf00      	nop
    bbc8:	0000b7d7 	.word	0x0000b7d7

0000bbcc <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    bbcc:	b480      	push	{r7}
    bbce:	b083      	sub	sp, #12
    bbd0:	af00      	add	r7, sp, #0
    bbd2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    bbd4:	687b      	ldr	r3, [r7, #4]
    bbd6:	891b      	ldrh	r3, [r3, #8]
    bbd8:	b29b      	uxth	r3, r3
    bbda:	f023 0301 	bic.w	r3, r3, #1
    bbde:	b29a      	uxth	r2, r3
    bbe0:	687b      	ldr	r3, [r7, #4]
    bbe2:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    bbe4:	bf00      	nop
    bbe6:	370c      	adds	r7, #12
    bbe8:	46bd      	mov	sp, r7
    bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbee:	4770      	bx	lr

0000bbf0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    bbf0:	b480      	push	{r7}
    bbf2:	b083      	sub	sp, #12
    bbf4:	af00      	add	r7, sp, #0
    bbf6:	6078      	str	r0, [r7, #4]
    bbf8:	460b      	mov	r3, r1
    bbfa:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    bbfc:	687b      	ldr	r3, [r7, #4]
    bbfe:	887a      	ldrh	r2, [r7, #2]
    bc00:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    bc02:	bf00      	nop
    bc04:	370c      	adds	r7, #12
    bc06:	46bd      	mov	sp, r7
    bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc0c:	4770      	bx	lr

0000bc0e <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    bc0e:	b480      	push	{r7}
    bc10:	b083      	sub	sp, #12
    bc12:	af00      	add	r7, sp, #0
    bc14:	6078      	str	r0, [r7, #4]
    bc16:	460b      	mov	r3, r1
    bc18:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    bc1a:	687b      	ldr	r3, [r7, #4]
    bc1c:	78fa      	ldrb	r2, [r7, #3]
    bc1e:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    bc20:	bf00      	nop
    bc22:	370c      	adds	r7, #12
    bc24:	46bd      	mov	sp, r7
    bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc2a:	4770      	bx	lr

0000bc2c <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    bc2c:	b480      	push	{r7}
    bc2e:	b083      	sub	sp, #12
    bc30:	af00      	add	r7, sp, #0
    bc32:	6078      	str	r0, [r7, #4]
    bc34:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    bc36:	687b      	ldr	r3, [r7, #4]
    bc38:	683a      	ldr	r2, [r7, #0]
    bc3a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    bc3c:	bf00      	nop
    bc3e:	370c      	adds	r7, #12
    bc40:	46bd      	mov	sp, r7
    bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc46:	4770      	bx	lr

0000bc48 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    bc48:	b480      	push	{r7}
    bc4a:	b083      	sub	sp, #12
    bc4c:	af00      	add	r7, sp, #0
    bc4e:	6078      	str	r0, [r7, #4]
    bc50:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    bc52:	2300      	movs	r3, #0
}
    bc54:	4618      	mov	r0, r3
    bc56:	370c      	adds	r7, #12
    bc58:	46bd      	mov	sp, r7
    bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc5e:	4770      	bx	lr

0000bc60 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    bc60:	b480      	push	{r7}
    bc62:	b085      	sub	sp, #20
    bc64:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    bc66:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bc6a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    bc6c:	4b28      	ldr	r3, [pc, #160]	; (bd10 <_usb_load_calib+0xb0>)
    bc6e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    bc70:	f003 031f 	and.w	r3, r3, #31
    bc74:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    bc76:	4b26      	ldr	r3, [pc, #152]	; (bd10 <_usb_load_calib+0xb0>)
    bc78:	681b      	ldr	r3, [r3, #0]
    bc7a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    bc7c:	f003 031f 	and.w	r3, r3, #31
    bc80:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    bc82:	4b23      	ldr	r3, [pc, #140]	; (bd10 <_usb_load_calib+0xb0>)
    bc84:	681b      	ldr	r3, [r3, #0]
    bc86:	0a9b      	lsrs	r3, r3, #10
    bc88:	f003 0307 	and.w	r3, r3, #7
    bc8c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    bc8e:	68fb      	ldr	r3, [r7, #12]
    bc90:	2b00      	cmp	r3, #0
    bc92:	d002      	beq.n	bc9a <_usb_load_calib+0x3a>
    bc94:	68fb      	ldr	r3, [r7, #12]
    bc96:	2b1f      	cmp	r3, #31
    bc98:	d101      	bne.n	bc9e <_usb_load_calib+0x3e>
		pad_transn = 9;
    bc9a:	2309      	movs	r3, #9
    bc9c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    bc9e:	68bb      	ldr	r3, [r7, #8]
    bca0:	2b00      	cmp	r3, #0
    bca2:	d002      	beq.n	bcaa <_usb_load_calib+0x4a>
    bca4:	68bb      	ldr	r3, [r7, #8]
    bca6:	2b1f      	cmp	r3, #31
    bca8:	d101      	bne.n	bcae <_usb_load_calib+0x4e>
		pad_transp = 25;
    bcaa:	2319      	movs	r3, #25
    bcac:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    bcae:	687b      	ldr	r3, [r7, #4]
    bcb0:	2b00      	cmp	r3, #0
    bcb2:	d002      	beq.n	bcba <_usb_load_calib+0x5a>
    bcb4:	687b      	ldr	r3, [r7, #4]
    bcb6:	2b07      	cmp	r3, #7
    bcb8:	d101      	bne.n	bcbe <_usb_load_calib+0x5e>
		pad_trim = 6;
    bcba:	2306      	movs	r3, #6
    bcbc:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    bcbe:	68fb      	ldr	r3, [r7, #12]
    bcc0:	b29b      	uxth	r3, r3
    bcc2:	019b      	lsls	r3, r3, #6
    bcc4:	b29b      	uxth	r3, r3
    bcc6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    bcca:	b29a      	uxth	r2, r3
    bccc:	68bb      	ldr	r3, [r7, #8]
    bcce:	b29b      	uxth	r3, r3
    bcd0:	f003 031f 	and.w	r3, r3, #31
    bcd4:	b29b      	uxth	r3, r3
    bcd6:	4313      	orrs	r3, r2
    bcd8:	b29a      	uxth	r2, r3
    bcda:	687b      	ldr	r3, [r7, #4]
    bcdc:	b29b      	uxth	r3, r3
    bcde:	031b      	lsls	r3, r3, #12
    bce0:	b29b      	uxth	r3, r3
    bce2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    bce6:	b29b      	uxth	r3, r3
    bce8:	4313      	orrs	r3, r2
    bcea:	b29a      	uxth	r2, r3
    bcec:	683b      	ldr	r3, [r7, #0]
    bcee:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    bcf0:	683a      	ldr	r2, [r7, #0]
    bcf2:	78d3      	ldrb	r3, [r2, #3]
    bcf4:	f043 0303 	orr.w	r3, r3, #3
    bcf8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    bcfa:	683a      	ldr	r2, [r7, #0]
    bcfc:	78d3      	ldrb	r3, [r2, #3]
    bcfe:	f043 030c 	orr.w	r3, r3, #12
    bd02:	70d3      	strb	r3, [r2, #3]
}
    bd04:	bf00      	nop
    bd06:	3714      	adds	r7, #20
    bd08:	46bd      	mov	sp, r7
    bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd0e:	4770      	bx	lr
    bd10:	00800084 	.word	0x00800084

0000bd14 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    bd14:	b580      	push	{r7, lr}
    bd16:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    bd18:	bf00      	nop
    bd1a:	2203      	movs	r2, #3
    bd1c:	2100      	movs	r1, #0
    bd1e:	4804      	ldr	r0, [pc, #16]	; (bd30 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    bd20:	4b04      	ldr	r3, [pc, #16]	; (bd34 <_usb_d_dev_wait_dpll_rdy+0x20>)
    bd22:	4798      	blx	r3
    bd24:	4603      	mov	r3, r0
    bd26:	2b03      	cmp	r3, #3
    bd28:	d1f7      	bne.n	bd1a <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    bd2a:	bf00      	nop
    bd2c:	bd80      	pop	{r7, pc}
    bd2e:	bf00      	nop
    bd30:	40001000 	.word	0x40001000
    bd34:	0000b749 	.word	0x0000b749

0000bd38 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    bd38:	b580      	push	{r7, lr}
    bd3a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    bd3c:	480e      	ldr	r0, [pc, #56]	; (bd78 <_usb_d_dev_wait_dfll_rdy+0x40>)
    bd3e:	4b0f      	ldr	r3, [pc, #60]	; (bd7c <_usb_d_dev_wait_dfll_rdy+0x44>)
    bd40:	4798      	blx	r3
    bd42:	4603      	mov	r3, r0
    bd44:	2b00      	cmp	r3, #0
    bd46:	d00a      	beq.n	bd5e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    bd48:	bf00      	nop
    bd4a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    bd4e:	480a      	ldr	r0, [pc, #40]	; (bd78 <_usb_d_dev_wait_dfll_rdy+0x40>)
    bd50:	4b0b      	ldr	r3, [pc, #44]	; (bd80 <_usb_d_dev_wait_dfll_rdy+0x48>)
    bd52:	4798      	blx	r3
    bd54:	4603      	mov	r3, r0
    bd56:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    bd5a:	d1f6      	bne.n	bd4a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    bd5c:	e009      	b.n	bd72 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    bd5e:	bf00      	nop
    bd60:	f44f 7180 	mov.w	r1, #256	; 0x100
    bd64:	4804      	ldr	r0, [pc, #16]	; (bd78 <_usb_d_dev_wait_dfll_rdy+0x40>)
    bd66:	4b06      	ldr	r3, [pc, #24]	; (bd80 <_usb_d_dev_wait_dfll_rdy+0x48>)
    bd68:	4798      	blx	r3
    bd6a:	4603      	mov	r3, r0
    bd6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    bd70:	d1f6      	bne.n	bd60 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    bd72:	bf00      	nop
    bd74:	bd80      	pop	{r7, pc}
    bd76:	bf00      	nop
    bd78:	40001000 	.word	0x40001000
    bd7c:	0000b7a7 	.word	0x0000b7a7
    bd80:	0000b781 	.word	0x0000b781

0000bd84 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    bd84:	b580      	push	{r7, lr}
    bd86:	b082      	sub	sp, #8
    bd88:	af00      	add	r7, sp, #0
    bd8a:	4603      	mov	r3, r0
    bd8c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    bd8e:	79fb      	ldrb	r3, [r7, #7]
    bd90:	2b00      	cmp	r3, #0
    bd92:	d102      	bne.n	bd9a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    bd94:	4b05      	ldr	r3, [pc, #20]	; (bdac <_usb_d_dev_wait_clk_rdy+0x28>)
    bd96:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    bd98:	e004      	b.n	bda4 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    bd9a:	79fb      	ldrb	r3, [r7, #7]
    bd9c:	2b01      	cmp	r3, #1
    bd9e:	d101      	bne.n	bda4 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    bda0:	4b03      	ldr	r3, [pc, #12]	; (bdb0 <_usb_d_dev_wait_clk_rdy+0x2c>)
    bda2:	4798      	blx	r3
}
    bda4:	bf00      	nop
    bda6:	3708      	adds	r7, #8
    bda8:	46bd      	mov	sp, r7
    bdaa:	bd80      	pop	{r7, pc}
    bdac:	0000bd39 	.word	0x0000bd39
    bdb0:	0000bd15 	.word	0x0000bd15

0000bdb4 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    bdb4:	b580      	push	{r7, lr}
    bdb6:	b082      	sub	sp, #8
    bdb8:	af00      	add	r7, sp, #0
    bdba:	4603      	mov	r3, r0
    bdbc:	6039      	str	r1, [r7, #0]
    bdbe:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    bdc0:	683b      	ldr	r3, [r7, #0]
    bdc2:	b2da      	uxtb	r2, r3
    bdc4:	79fb      	ldrb	r3, [r7, #7]
    bdc6:	4619      	mov	r1, r3
    bdc8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bdcc:	4b02      	ldr	r3, [pc, #8]	; (bdd8 <_usbd_ep_int_ack+0x24>)
    bdce:	4798      	blx	r3
}
    bdd0:	bf00      	nop
    bdd2:	3708      	adds	r7, #8
    bdd4:	46bd      	mov	sp, r7
    bdd6:	bd80      	pop	{r7, pc}
    bdd8:	0000b88d 	.word	0x0000b88d

0000bddc <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    bddc:	b580      	push	{r7, lr}
    bdde:	b082      	sub	sp, #8
    bde0:	af00      	add	r7, sp, #0
    bde2:	4603      	mov	r3, r0
    bde4:	6039      	str	r1, [r7, #0]
    bde6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    bde8:	683b      	ldr	r3, [r7, #0]
    bdea:	b2da      	uxtb	r2, r3
    bdec:	79fb      	ldrb	r3, [r7, #7]
    bdee:	4619      	mov	r1, r3
    bdf0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bdf4:	4b02      	ldr	r3, [pc, #8]	; (be00 <_usbd_ep_int_en+0x24>)
    bdf6:	4798      	blx	r3
}
    bdf8:	bf00      	nop
    bdfa:	3708      	adds	r7, #8
    bdfc:	46bd      	mov	sp, r7
    bdfe:	bd80      	pop	{r7, pc}
    be00:	0000b961 	.word	0x0000b961

0000be04 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    be04:	b580      	push	{r7, lr}
    be06:	b082      	sub	sp, #8
    be08:	af00      	add	r7, sp, #0
    be0a:	4603      	mov	r3, r0
    be0c:	6039      	str	r1, [r7, #0]
    be0e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    be10:	683b      	ldr	r3, [r7, #0]
    be12:	b2da      	uxtb	r2, r3
    be14:	79fb      	ldrb	r3, [r7, #7]
    be16:	4619      	mov	r1, r3
    be18:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    be1c:	4b02      	ldr	r3, [pc, #8]	; (be28 <_usbd_ep_int_dis+0x24>)
    be1e:	4798      	blx	r3
}
    be20:	bf00      	nop
    be22:	3708      	adds	r7, #8
    be24:	46bd      	mov	sp, r7
    be26:	bd80      	pop	{r7, pc}
    be28:	0000b98d 	.word	0x0000b98d

0000be2c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    be2c:	b580      	push	{r7, lr}
    be2e:	b082      	sub	sp, #8
    be30:	af00      	add	r7, sp, #0
    be32:	4603      	mov	r3, r0
    be34:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    be36:	79fb      	ldrb	r3, [r7, #7]
    be38:	4619      	mov	r1, r3
    be3a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    be3e:	4b06      	ldr	r3, [pc, #24]	; (be58 <_usbd_ep_is_ctrl+0x2c>)
    be40:	4798      	blx	r3
    be42:	4603      	mov	r3, r0
    be44:	2b11      	cmp	r3, #17
    be46:	bf0c      	ite	eq
    be48:	2301      	moveq	r3, #1
    be4a:	2300      	movne	r3, #0
    be4c:	b2db      	uxtb	r3, r3
}
    be4e:	4618      	mov	r0, r3
    be50:	3708      	adds	r7, #8
    be52:	46bd      	mov	sp, r7
    be54:	bd80      	pop	{r7, pc}
    be56:	bf00      	nop
    be58:	0000ba47 	.word	0x0000ba47

0000be5c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    be5c:	b580      	push	{r7, lr}
    be5e:	b082      	sub	sp, #8
    be60:	af00      	add	r7, sp, #0
    be62:	4603      	mov	r3, r0
    be64:	71fb      	strb	r3, [r7, #7]
    be66:	460b      	mov	r3, r1
    be68:	71bb      	strb	r3, [r7, #6]
    be6a:	4613      	mov	r3, r2
    be6c:	717b      	strb	r3, [r7, #5]
	if (st) {
    be6e:	797b      	ldrb	r3, [r7, #5]
    be70:	2b00      	cmp	r3, #0
    be72:	d00b      	beq.n	be8c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    be74:	79bb      	ldrb	r3, [r7, #6]
    be76:	2210      	movs	r2, #16
    be78:	fa02 f303 	lsl.w	r3, r2, r3
    be7c:	b2da      	uxtb	r2, r3
    be7e:	79fb      	ldrb	r3, [r7, #7]
    be80:	4619      	mov	r1, r3
    be82:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    be86:	4b09      	ldr	r3, [pc, #36]	; (beac <_usbd_ep_set_stall+0x50>)
    be88:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    be8a:	e00a      	b.n	bea2 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    be8c:	79bb      	ldrb	r3, [r7, #6]
    be8e:	2210      	movs	r2, #16
    be90:	fa02 f303 	lsl.w	r3, r2, r3
    be94:	b2da      	uxtb	r2, r3
    be96:	79fb      	ldrb	r3, [r7, #7]
    be98:	4619      	mov	r1, r3
    be9a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    be9e:	4b04      	ldr	r3, [pc, #16]	; (beb0 <_usbd_ep_set_stall+0x54>)
    bea0:	4798      	blx	r3
}
    bea2:	bf00      	nop
    bea4:	3708      	adds	r7, #8
    bea6:	46bd      	mov	sp, r7
    bea8:	bd80      	pop	{r7, pc}
    beaa:	bf00      	nop
    beac:	0000b8b9 	.word	0x0000b8b9
    beb0:	0000b90d 	.word	0x0000b90d

0000beb4 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    beb4:	b580      	push	{r7, lr}
    beb6:	b084      	sub	sp, #16
    beb8:	af00      	add	r7, sp, #0
    beba:	4603      	mov	r3, r0
    bebc:	460a      	mov	r2, r1
    bebe:	71fb      	strb	r3, [r7, #7]
    bec0:	4613      	mov	r3, r2
    bec2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    bec4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bec8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    beca:	79fb      	ldrb	r3, [r7, #7]
    becc:	4619      	mov	r1, r3
    bece:	68f8      	ldr	r0, [r7, #12]
    bed0:	4b08      	ldr	r3, [pc, #32]	; (bef4 <_usbd_ep_is_stalled+0x40>)
    bed2:	4798      	blx	r3
    bed4:	4603      	mov	r3, r0
    bed6:	4619      	mov	r1, r3
    bed8:	79bb      	ldrb	r3, [r7, #6]
    beda:	2210      	movs	r2, #16
    bedc:	fa02 f303 	lsl.w	r3, r2, r3
    bee0:	400b      	ands	r3, r1
    bee2:	2b00      	cmp	r3, #0
    bee4:	bf14      	ite	ne
    bee6:	2301      	movne	r3, #1
    bee8:	2300      	moveq	r3, #0
    beea:	b2db      	uxtb	r3, r3
}
    beec:	4618      	mov	r0, r3
    beee:	3710      	adds	r7, #16
    bef0:	46bd      	mov	sp, r7
    bef2:	bd80      	pop	{r7, pc}
    bef4:	0000b8e5 	.word	0x0000b8e5

0000bef8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    bef8:	b580      	push	{r7, lr}
    befa:	b084      	sub	sp, #16
    befc:	af00      	add	r7, sp, #0
    befe:	4603      	mov	r3, r0
    bf00:	460a      	mov	r2, r1
    bf02:	71fb      	strb	r3, [r7, #7]
    bf04:	4613      	mov	r3, r2
    bf06:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    bf08:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bf0c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    bf0e:	79fb      	ldrb	r3, [r7, #7]
    bf10:	4619      	mov	r1, r3
    bf12:	68f8      	ldr	r0, [r7, #12]
    bf14:	4b08      	ldr	r3, [pc, #32]	; (bf38 <_usbd_ep_is_stall_sent+0x40>)
    bf16:	4798      	blx	r3
    bf18:	4603      	mov	r3, r0
    bf1a:	4619      	mov	r1, r3
    bf1c:	79bb      	ldrb	r3, [r7, #6]
    bf1e:	2220      	movs	r2, #32
    bf20:	fa02 f303 	lsl.w	r3, r2, r3
    bf24:	400b      	ands	r3, r1
    bf26:	2b00      	cmp	r3, #0
    bf28:	bf14      	ite	ne
    bf2a:	2301      	movne	r3, #1
    bf2c:	2300      	moveq	r3, #0
    bf2e:	b2db      	uxtb	r3, r3
}
    bf30:	4618      	mov	r0, r3
    bf32:	3710      	adds	r7, #16
    bf34:	46bd      	mov	sp, r7
    bf36:	bd80      	pop	{r7, pc}
    bf38:	0000b865 	.word	0x0000b865

0000bf3c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    bf3c:	b580      	push	{r7, lr}
    bf3e:	b082      	sub	sp, #8
    bf40:	af00      	add	r7, sp, #0
    bf42:	4603      	mov	r3, r0
    bf44:	460a      	mov	r2, r1
    bf46:	71fb      	strb	r3, [r7, #7]
    bf48:	4613      	mov	r3, r2
    bf4a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    bf4c:	79bb      	ldrb	r3, [r7, #6]
    bf4e:	2220      	movs	r2, #32
    bf50:	409a      	lsls	r2, r3
    bf52:	79fb      	ldrb	r3, [r7, #7]
    bf54:	4611      	mov	r1, r2
    bf56:	4618      	mov	r0, r3
    bf58:	4b02      	ldr	r3, [pc, #8]	; (bf64 <_usbd_ep_ack_stall+0x28>)
    bf5a:	4798      	blx	r3
}
    bf5c:	bf00      	nop
    bf5e:	3708      	adds	r7, #8
    bf60:	46bd      	mov	sp, r7
    bf62:	bd80      	pop	{r7, pc}
    bf64:	0000bdb5 	.word	0x0000bdb5

0000bf68 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    bf68:	b580      	push	{r7, lr}
    bf6a:	b082      	sub	sp, #8
    bf6c:	af00      	add	r7, sp, #0
    bf6e:	4603      	mov	r3, r0
    bf70:	71fb      	strb	r3, [r7, #7]
    bf72:	460b      	mov	r3, r1
    bf74:	71bb      	strb	r3, [r7, #6]
    bf76:	4613      	mov	r3, r2
    bf78:	717b      	strb	r3, [r7, #5]
	if (en) {
    bf7a:	797b      	ldrb	r3, [r7, #5]
    bf7c:	2b00      	cmp	r3, #0
    bf7e:	d008      	beq.n	bf92 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    bf80:	79bb      	ldrb	r3, [r7, #6]
    bf82:	2220      	movs	r2, #32
    bf84:	409a      	lsls	r2, r3
    bf86:	79fb      	ldrb	r3, [r7, #7]
    bf88:	4611      	mov	r1, r2
    bf8a:	4618      	mov	r0, r3
    bf8c:	4b07      	ldr	r3, [pc, #28]	; (bfac <_usbd_ep_int_stall_en+0x44>)
    bf8e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    bf90:	e007      	b.n	bfa2 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    bf92:	79bb      	ldrb	r3, [r7, #6]
    bf94:	2220      	movs	r2, #32
    bf96:	409a      	lsls	r2, r3
    bf98:	79fb      	ldrb	r3, [r7, #7]
    bf9a:	4611      	mov	r1, r2
    bf9c:	4618      	mov	r0, r3
    bf9e:	4b04      	ldr	r3, [pc, #16]	; (bfb0 <_usbd_ep_int_stall_en+0x48>)
    bfa0:	4798      	blx	r3
}
    bfa2:	bf00      	nop
    bfa4:	3708      	adds	r7, #8
    bfa6:	46bd      	mov	sp, r7
    bfa8:	bd80      	pop	{r7, pc}
    bfaa:	bf00      	nop
    bfac:	0000bddd 	.word	0x0000bddd
    bfb0:	0000be05 	.word	0x0000be05

0000bfb4 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    bfb4:	b580      	push	{r7, lr}
    bfb6:	b082      	sub	sp, #8
    bfb8:	af00      	add	r7, sp, #0
    bfba:	4603      	mov	r3, r0
    bfbc:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    bfbe:	79fb      	ldrb	r3, [r7, #7]
    bfc0:	4619      	mov	r1, r3
    bfc2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bfc6:	4b03      	ldr	r3, [pc, #12]	; (bfd4 <_usbd_ep_stop_setup+0x20>)
    bfc8:	4798      	blx	r3
}
    bfca:	bf00      	nop
    bfcc:	3708      	adds	r7, #8
    bfce:	46bd      	mov	sp, r7
    bfd0:	bd80      	pop	{r7, pc}
    bfd2:	bf00      	nop
    bfd4:	0000b939 	.word	0x0000b939

0000bfd8 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    bfd8:	b580      	push	{r7, lr}
    bfda:	b082      	sub	sp, #8
    bfdc:	af00      	add	r7, sp, #0
    bfde:	4603      	mov	r3, r0
    bfe0:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    bfe2:	79fb      	ldrb	r3, [r7, #7]
    bfe4:	2210      	movs	r2, #16
    bfe6:	4619      	mov	r1, r3
    bfe8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bfec:	4b05      	ldr	r3, [pc, #20]	; (c004 <_usbd_ep_is_setup+0x2c>)
    bfee:	4798      	blx	r3
    bff0:	4603      	mov	r3, r0
    bff2:	2b00      	cmp	r3, #0
    bff4:	bf14      	ite	ne
    bff6:	2301      	movne	r3, #1
    bff8:	2300      	moveq	r3, #0
    bffa:	b2db      	uxtb	r3, r3
}
    bffc:	4618      	mov	r0, r3
    bffe:	3708      	adds	r7, #8
    c000:	46bd      	mov	sp, r7
    c002:	bd80      	pop	{r7, pc}
    c004:	0000b82f 	.word	0x0000b82f

0000c008 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    c008:	b580      	push	{r7, lr}
    c00a:	b082      	sub	sp, #8
    c00c:	af00      	add	r7, sp, #0
    c00e:	4603      	mov	r3, r0
    c010:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    c012:	79fb      	ldrb	r3, [r7, #7]
    c014:	2110      	movs	r1, #16
    c016:	4618      	mov	r0, r3
    c018:	4b02      	ldr	r3, [pc, #8]	; (c024 <_usbd_ep_ack_setup+0x1c>)
    c01a:	4798      	blx	r3
}
    c01c:	bf00      	nop
    c01e:	3708      	adds	r7, #8
    c020:	46bd      	mov	sp, r7
    c022:	bd80      	pop	{r7, pc}
    c024:	0000bdb5 	.word	0x0000bdb5

0000c028 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    c028:	b580      	push	{r7, lr}
    c02a:	b082      	sub	sp, #8
    c02c:	af00      	add	r7, sp, #0
    c02e:	4603      	mov	r3, r0
    c030:	71fb      	strb	r3, [r7, #7]
    c032:	460b      	mov	r3, r1
    c034:	71bb      	strb	r3, [r7, #6]
    c036:	4613      	mov	r3, r2
    c038:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    c03a:	797b      	ldrb	r3, [r7, #5]
    c03c:	2b00      	cmp	r3, #0
    c03e:	d00b      	beq.n	c058 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    c040:	79bb      	ldrb	r3, [r7, #6]
    c042:	2201      	movs	r2, #1
    c044:	fa02 f303 	lsl.w	r3, r2, r3
    c048:	b2da      	uxtb	r2, r3
    c04a:	79fb      	ldrb	r3, [r7, #7]
    c04c:	4619      	mov	r1, r3
    c04e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c052:	4b09      	ldr	r3, [pc, #36]	; (c078 <_usbd_ep_set_toggle+0x50>)
    c054:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    c056:	e00a      	b.n	c06e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    c058:	79bb      	ldrb	r3, [r7, #6]
    c05a:	2201      	movs	r2, #1
    c05c:	fa02 f303 	lsl.w	r3, r2, r3
    c060:	b2da      	uxtb	r2, r3
    c062:	79fb      	ldrb	r3, [r7, #7]
    c064:	4619      	mov	r1, r3
    c066:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c06a:	4b04      	ldr	r3, [pc, #16]	; (c07c <_usbd_ep_set_toggle+0x54>)
    c06c:	4798      	blx	r3
}
    c06e:	bf00      	nop
    c070:	3708      	adds	r7, #8
    c072:	46bd      	mov	sp, r7
    c074:	bd80      	pop	{r7, pc}
    c076:	bf00      	nop
    c078:	0000b8b9 	.word	0x0000b8b9
    c07c:	0000b90d 	.word	0x0000b90d

0000c080 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    c080:	b580      	push	{r7, lr}
    c082:	b082      	sub	sp, #8
    c084:	af00      	add	r7, sp, #0
    c086:	4603      	mov	r3, r0
    c088:	460a      	mov	r2, r1
    c08a:	71fb      	strb	r3, [r7, #7]
    c08c:	4613      	mov	r3, r2
    c08e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    c090:	79bb      	ldrb	r3, [r7, #6]
    c092:	2201      	movs	r2, #1
    c094:	409a      	lsls	r2, r3
    c096:	79fb      	ldrb	r3, [r7, #7]
    c098:	4611      	mov	r1, r2
    c09a:	4618      	mov	r0, r3
    c09c:	4b02      	ldr	r3, [pc, #8]	; (c0a8 <_usbd_ep_ack_io_cpt+0x28>)
    c09e:	4798      	blx	r3
}
    c0a0:	bf00      	nop
    c0a2:	3708      	adds	r7, #8
    c0a4:	46bd      	mov	sp, r7
    c0a6:	bd80      	pop	{r7, pc}
    c0a8:	0000bdb5 	.word	0x0000bdb5

0000c0ac <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    c0ac:	b480      	push	{r7}
    c0ae:	b085      	sub	sp, #20
    c0b0:	af00      	add	r7, sp, #0
    c0b2:	4603      	mov	r3, r0
    c0b4:	603a      	str	r2, [r7, #0]
    c0b6:	71fb      	strb	r3, [r7, #7]
    c0b8:	460b      	mov	r3, r1
    c0ba:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c0bc:	79fa      	ldrb	r2, [r7, #7]
    c0be:	79bb      	ldrb	r3, [r7, #6]
    c0c0:	0052      	lsls	r2, r2, #1
    c0c2:	4413      	add	r3, r2
    c0c4:	011b      	lsls	r3, r3, #4
    c0c6:	4a06      	ldr	r2, [pc, #24]	; (c0e0 <_usbd_ep_set_buf+0x34>)
    c0c8:	4413      	add	r3, r2
    c0ca:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    c0cc:	68fb      	ldr	r3, [r7, #12]
    c0ce:	683a      	ldr	r2, [r7, #0]
    c0d0:	601a      	str	r2, [r3, #0]
}
    c0d2:	bf00      	nop
    c0d4:	3714      	adds	r7, #20
    c0d6:	46bd      	mov	sp, r7
    c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0dc:	4770      	bx	lr
    c0de:	bf00      	nop
    c0e0:	200026c4 	.word	0x200026c4

0000c0e4 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    c0e4:	b480      	push	{r7}
    c0e6:	b085      	sub	sp, #20
    c0e8:	af00      	add	r7, sp, #0
    c0ea:	4603      	mov	r3, r0
    c0ec:	71fb      	strb	r3, [r7, #7]
    c0ee:	460b      	mov	r3, r1
    c0f0:	71bb      	strb	r3, [r7, #6]
    c0f2:	4613      	mov	r3, r2
    c0f4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c0f6:	79fa      	ldrb	r2, [r7, #7]
    c0f8:	79bb      	ldrb	r3, [r7, #6]
    c0fa:	0052      	lsls	r2, r2, #1
    c0fc:	4413      	add	r3, r2
    c0fe:	011b      	lsls	r3, r3, #4
    c100:	4a08      	ldr	r2, [pc, #32]	; (c124 <_usbd_ep_set_in_count+0x40>)
    c102:	4413      	add	r3, r2
    c104:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    c106:	88bb      	ldrh	r3, [r7, #4]
    c108:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c10c:	b299      	uxth	r1, r3
    c10e:	68fa      	ldr	r2, [r7, #12]
    c110:	6853      	ldr	r3, [r2, #4]
    c112:	f361 339b 	bfi	r3, r1, #14, #14
    c116:	6053      	str	r3, [r2, #4]
}
    c118:	bf00      	nop
    c11a:	3714      	adds	r7, #20
    c11c:	46bd      	mov	sp, r7
    c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c122:	4770      	bx	lr
    c124:	200026c4 	.word	0x200026c4

0000c128 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    c128:	b480      	push	{r7}
    c12a:	b085      	sub	sp, #20
    c12c:	af00      	add	r7, sp, #0
    c12e:	4603      	mov	r3, r0
    c130:	71fb      	strb	r3, [r7, #7]
    c132:	460b      	mov	r3, r1
    c134:	71bb      	strb	r3, [r7, #6]
    c136:	4613      	mov	r3, r2
    c138:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c13a:	79fa      	ldrb	r2, [r7, #7]
    c13c:	79bb      	ldrb	r3, [r7, #6]
    c13e:	0052      	lsls	r2, r2, #1
    c140:	4413      	add	r3, r2
    c142:	011b      	lsls	r3, r3, #4
    c144:	4a08      	ldr	r2, [pc, #32]	; (c168 <_usbd_ep_set_in_size+0x40>)
    c146:	4413      	add	r3, r2
    c148:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    c14a:	88bb      	ldrh	r3, [r7, #4]
    c14c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c150:	b299      	uxth	r1, r3
    c152:	68fa      	ldr	r2, [r7, #12]
    c154:	6853      	ldr	r3, [r2, #4]
    c156:	f361 030d 	bfi	r3, r1, #0, #14
    c15a:	6053      	str	r3, [r2, #4]
}
    c15c:	bf00      	nop
    c15e:	3714      	adds	r7, #20
    c160:	46bd      	mov	sp, r7
    c162:	f85d 7b04 	ldr.w	r7, [sp], #4
    c166:	4770      	bx	lr
    c168:	200026c4 	.word	0x200026c4

0000c16c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    c16c:	b480      	push	{r7}
    c16e:	b085      	sub	sp, #20
    c170:	af00      	add	r7, sp, #0
    c172:	4603      	mov	r3, r0
    c174:	71fb      	strb	r3, [r7, #7]
    c176:	460b      	mov	r3, r1
    c178:	71bb      	strb	r3, [r7, #6]
    c17a:	4613      	mov	r3, r2
    c17c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c17e:	79fa      	ldrb	r2, [r7, #7]
    c180:	79bb      	ldrb	r3, [r7, #6]
    c182:	0052      	lsls	r2, r2, #1
    c184:	4413      	add	r3, r2
    c186:	011b      	lsls	r3, r3, #4
    c188:	4a08      	ldr	r2, [pc, #32]	; (c1ac <_usbd_ep_set_out_count+0x40>)
    c18a:	4413      	add	r3, r2
    c18c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    c18e:	88bb      	ldrh	r3, [r7, #4]
    c190:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c194:	b299      	uxth	r1, r3
    c196:	68fa      	ldr	r2, [r7, #12]
    c198:	6853      	ldr	r3, [r2, #4]
    c19a:	f361 030d 	bfi	r3, r1, #0, #14
    c19e:	6053      	str	r3, [r2, #4]
}
    c1a0:	bf00      	nop
    c1a2:	3714      	adds	r7, #20
    c1a4:	46bd      	mov	sp, r7
    c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1aa:	4770      	bx	lr
    c1ac:	200026c4 	.word	0x200026c4

0000c1b0 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    c1b0:	b480      	push	{r7}
    c1b2:	b085      	sub	sp, #20
    c1b4:	af00      	add	r7, sp, #0
    c1b6:	4603      	mov	r3, r0
    c1b8:	71fb      	strb	r3, [r7, #7]
    c1ba:	460b      	mov	r3, r1
    c1bc:	71bb      	strb	r3, [r7, #6]
    c1be:	4613      	mov	r3, r2
    c1c0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c1c2:	79fa      	ldrb	r2, [r7, #7]
    c1c4:	79bb      	ldrb	r3, [r7, #6]
    c1c6:	0052      	lsls	r2, r2, #1
    c1c8:	4413      	add	r3, r2
    c1ca:	011b      	lsls	r3, r3, #4
    c1cc:	4a08      	ldr	r2, [pc, #32]	; (c1f0 <_usbd_ep_set_out_size+0x40>)
    c1ce:	4413      	add	r3, r2
    c1d0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    c1d2:	88bb      	ldrh	r3, [r7, #4]
    c1d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c1d8:	b299      	uxth	r1, r3
    c1da:	68fa      	ldr	r2, [r7, #12]
    c1dc:	6853      	ldr	r3, [r2, #4]
    c1de:	f361 339b 	bfi	r3, r1, #14, #14
    c1e2:	6053      	str	r3, [r2, #4]
}
    c1e4:	bf00      	nop
    c1e6:	3714      	adds	r7, #20
    c1e8:	46bd      	mov	sp, r7
    c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1ee:	4770      	bx	lr
    c1f0:	200026c4 	.word	0x200026c4

0000c1f4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    c1f4:	b580      	push	{r7, lr}
    c1f6:	b084      	sub	sp, #16
    c1f8:	af00      	add	r7, sp, #0
    c1fa:	60ba      	str	r2, [r7, #8]
    c1fc:	607b      	str	r3, [r7, #4]
    c1fe:	4603      	mov	r3, r0
    c200:	73fb      	strb	r3, [r7, #15]
    c202:	460b      	mov	r3, r1
    c204:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    c206:	68bb      	ldr	r3, [r7, #8]
    c208:	b29a      	uxth	r2, r3
    c20a:	7bb9      	ldrb	r1, [r7, #14]
    c20c:	7bfb      	ldrb	r3, [r7, #15]
    c20e:	4618      	mov	r0, r3
    c210:	4b06      	ldr	r3, [pc, #24]	; (c22c <_usbd_ep_set_in_trans+0x38>)
    c212:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    c214:	687b      	ldr	r3, [r7, #4]
    c216:	b29a      	uxth	r2, r3
    c218:	7bb9      	ldrb	r1, [r7, #14]
    c21a:	7bfb      	ldrb	r3, [r7, #15]
    c21c:	4618      	mov	r0, r3
    c21e:	4b04      	ldr	r3, [pc, #16]	; (c230 <_usbd_ep_set_in_trans+0x3c>)
    c220:	4798      	blx	r3
}
    c222:	bf00      	nop
    c224:	3710      	adds	r7, #16
    c226:	46bd      	mov	sp, r7
    c228:	bd80      	pop	{r7, pc}
    c22a:	bf00      	nop
    c22c:	0000c129 	.word	0x0000c129
    c230:	0000c0e5 	.word	0x0000c0e5

0000c234 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    c234:	b580      	push	{r7, lr}
    c236:	b084      	sub	sp, #16
    c238:	af00      	add	r7, sp, #0
    c23a:	60ba      	str	r2, [r7, #8]
    c23c:	607b      	str	r3, [r7, #4]
    c23e:	4603      	mov	r3, r0
    c240:	73fb      	strb	r3, [r7, #15]
    c242:	460b      	mov	r3, r1
    c244:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    c246:	68bb      	ldr	r3, [r7, #8]
    c248:	b29a      	uxth	r2, r3
    c24a:	7bb9      	ldrb	r1, [r7, #14]
    c24c:	7bfb      	ldrb	r3, [r7, #15]
    c24e:	4618      	mov	r0, r3
    c250:	4b06      	ldr	r3, [pc, #24]	; (c26c <_usbd_ep_set_out_trans+0x38>)
    c252:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    c254:	687b      	ldr	r3, [r7, #4]
    c256:	b29a      	uxth	r2, r3
    c258:	7bb9      	ldrb	r1, [r7, #14]
    c25a:	7bfb      	ldrb	r3, [r7, #15]
    c25c:	4618      	mov	r0, r3
    c25e:	4b04      	ldr	r3, [pc, #16]	; (c270 <_usbd_ep_set_out_trans+0x3c>)
    c260:	4798      	blx	r3
}
    c262:	bf00      	nop
    c264:	3710      	adds	r7, #16
    c266:	46bd      	mov	sp, r7
    c268:	bd80      	pop	{r7, pc}
    c26a:	bf00      	nop
    c26c:	0000c1b1 	.word	0x0000c1b1
    c270:	0000c16d 	.word	0x0000c16d

0000c274 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    c274:	b480      	push	{r7}
    c276:	b085      	sub	sp, #20
    c278:	af00      	add	r7, sp, #0
    c27a:	4603      	mov	r3, r0
    c27c:	460a      	mov	r2, r1
    c27e:	71fb      	strb	r3, [r7, #7]
    c280:	4613      	mov	r3, r2
    c282:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c284:	79fa      	ldrb	r2, [r7, #7]
    c286:	79bb      	ldrb	r3, [r7, #6]
    c288:	0052      	lsls	r2, r2, #1
    c28a:	4413      	add	r3, r2
    c28c:	011b      	lsls	r3, r3, #4
    c28e:	4a06      	ldr	r2, [pc, #24]	; (c2a8 <_usbd_ep_clear_bank_status+0x34>)
    c290:	4413      	add	r3, r2
    c292:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    c294:	68fb      	ldr	r3, [r7, #12]
    c296:	2200      	movs	r2, #0
    c298:	729a      	strb	r2, [r3, #10]
}
    c29a:	bf00      	nop
    c29c:	3714      	adds	r7, #20
    c29e:	46bd      	mov	sp, r7
    c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2a4:	4770      	bx	lr
    c2a6:	bf00      	nop
    c2a8:	200026c4 	.word	0x200026c4

0000c2ac <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    c2ac:	b580      	push	{r7, lr}
    c2ae:	b082      	sub	sp, #8
    c2b0:	af00      	add	r7, sp, #0
    c2b2:	4603      	mov	r3, r0
    c2b4:	71fb      	strb	r3, [r7, #7]
    c2b6:	460b      	mov	r3, r1
    c2b8:	71bb      	strb	r3, [r7, #6]
    c2ba:	4613      	mov	r3, r2
    c2bc:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    c2be:	797b      	ldrb	r3, [r7, #5]
    c2c0:	2b00      	cmp	r3, #0
    c2c2:	d00b      	beq.n	c2dc <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c2c4:	79bb      	ldrb	r3, [r7, #6]
    c2c6:	2240      	movs	r2, #64	; 0x40
    c2c8:	fa02 f303 	lsl.w	r3, r2, r3
    c2cc:	b2da      	uxtb	r2, r3
    c2ce:	79fb      	ldrb	r3, [r7, #7]
    c2d0:	4619      	mov	r1, r3
    c2d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c2d6:	4b09      	ldr	r3, [pc, #36]	; (c2fc <_usbd_ep_set_in_rdy+0x50>)
    c2d8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    c2da:	e00a      	b.n	c2f2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c2dc:	79bb      	ldrb	r3, [r7, #6]
    c2de:	2240      	movs	r2, #64	; 0x40
    c2e0:	fa02 f303 	lsl.w	r3, r2, r3
    c2e4:	b2da      	uxtb	r2, r3
    c2e6:	79fb      	ldrb	r3, [r7, #7]
    c2e8:	4619      	mov	r1, r3
    c2ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c2ee:	4b04      	ldr	r3, [pc, #16]	; (c300 <_usbd_ep_set_in_rdy+0x54>)
    c2f0:	4798      	blx	r3
}
    c2f2:	bf00      	nop
    c2f4:	3708      	adds	r7, #8
    c2f6:	46bd      	mov	sp, r7
    c2f8:	bd80      	pop	{r7, pc}
    c2fa:	bf00      	nop
    c2fc:	0000b8b9 	.word	0x0000b8b9
    c300:	0000b90d 	.word	0x0000b90d

0000c304 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    c304:	b580      	push	{r7, lr}
    c306:	b082      	sub	sp, #8
    c308:	af00      	add	r7, sp, #0
    c30a:	4603      	mov	r3, r0
    c30c:	71fb      	strb	r3, [r7, #7]
    c30e:	460b      	mov	r3, r1
    c310:	71bb      	strb	r3, [r7, #6]
    c312:	4613      	mov	r3, r2
    c314:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    c316:	797b      	ldrb	r3, [r7, #5]
    c318:	2b00      	cmp	r3, #0
    c31a:	d00b      	beq.n	c334 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c31c:	79bb      	ldrb	r3, [r7, #6]
    c31e:	2240      	movs	r2, #64	; 0x40
    c320:	fa02 f303 	lsl.w	r3, r2, r3
    c324:	b2da      	uxtb	r2, r3
    c326:	79fb      	ldrb	r3, [r7, #7]
    c328:	4619      	mov	r1, r3
    c32a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c32e:	4b09      	ldr	r3, [pc, #36]	; (c354 <_usbd_ep_set_out_rdy+0x50>)
    c330:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    c332:	e00a      	b.n	c34a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c334:	79bb      	ldrb	r3, [r7, #6]
    c336:	2240      	movs	r2, #64	; 0x40
    c338:	fa02 f303 	lsl.w	r3, r2, r3
    c33c:	b2da      	uxtb	r2, r3
    c33e:	79fb      	ldrb	r3, [r7, #7]
    c340:	4619      	mov	r1, r3
    c342:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c346:	4b04      	ldr	r3, [pc, #16]	; (c358 <_usbd_ep_set_out_rdy+0x54>)
    c348:	4798      	blx	r3
}
    c34a:	bf00      	nop
    c34c:	3708      	adds	r7, #8
    c34e:	46bd      	mov	sp, r7
    c350:	bd80      	pop	{r7, pc}
    c352:	bf00      	nop
    c354:	0000b90d 	.word	0x0000b90d
    c358:	0000b8b9 	.word	0x0000b8b9

0000c35c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    c35c:	b480      	push	{r7}
    c35e:	b083      	sub	sp, #12
    c360:	af00      	add	r7, sp, #0
    c362:	4603      	mov	r3, r0
    c364:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    c366:	88fb      	ldrh	r3, [r7, #6]
    c368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c36c:	d820      	bhi.n	c3b0 <_usbd_ep_pcksize_size+0x54>
    c36e:	88fb      	ldrh	r3, [r7, #6]
    c370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c374:	d81a      	bhi.n	c3ac <_usbd_ep_pcksize_size+0x50>
    c376:	88fb      	ldrh	r3, [r7, #6]
    c378:	2b80      	cmp	r3, #128	; 0x80
    c37a:	d815      	bhi.n	c3a8 <_usbd_ep_pcksize_size+0x4c>
    c37c:	88fb      	ldrh	r3, [r7, #6]
    c37e:	2b40      	cmp	r3, #64	; 0x40
    c380:	d810      	bhi.n	c3a4 <_usbd_ep_pcksize_size+0x48>
    c382:	88fb      	ldrh	r3, [r7, #6]
    c384:	2b20      	cmp	r3, #32
    c386:	d80b      	bhi.n	c3a0 <_usbd_ep_pcksize_size+0x44>
    c388:	88fb      	ldrh	r3, [r7, #6]
    c38a:	2b10      	cmp	r3, #16
    c38c:	d806      	bhi.n	c39c <_usbd_ep_pcksize_size+0x40>
    c38e:	88fb      	ldrh	r3, [r7, #6]
    c390:	2b08      	cmp	r3, #8
    c392:	bf8c      	ite	hi
    c394:	2301      	movhi	r3, #1
    c396:	2300      	movls	r3, #0
    c398:	b2db      	uxtb	r3, r3
    c39a:	e00a      	b.n	c3b2 <_usbd_ep_pcksize_size+0x56>
    c39c:	2302      	movs	r3, #2
    c39e:	e008      	b.n	c3b2 <_usbd_ep_pcksize_size+0x56>
    c3a0:	2303      	movs	r3, #3
    c3a2:	e006      	b.n	c3b2 <_usbd_ep_pcksize_size+0x56>
    c3a4:	2304      	movs	r3, #4
    c3a6:	e004      	b.n	c3b2 <_usbd_ep_pcksize_size+0x56>
    c3a8:	2305      	movs	r3, #5
    c3aa:	e002      	b.n	c3b2 <_usbd_ep_pcksize_size+0x56>
    c3ac:	2306      	movs	r3, #6
    c3ae:	e000      	b.n	c3b2 <_usbd_ep_pcksize_size+0x56>
    c3b0:	2307      	movs	r3, #7
}
    c3b2:	4618      	mov	r0, r3
    c3b4:	370c      	adds	r7, #12
    c3b6:	46bd      	mov	sp, r7
    c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3bc:	4770      	bx	lr
	...

0000c3c0 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    c3c0:	b480      	push	{r7}
    c3c2:	b085      	sub	sp, #20
    c3c4:	af00      	add	r7, sp, #0
    c3c6:	4603      	mov	r3, r0
    c3c8:	460a      	mov	r2, r1
    c3ca:	71fb      	strb	r3, [r7, #7]
    c3cc:	4613      	mov	r3, r2
    c3ce:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    c3d0:	79fb      	ldrb	r3, [r7, #7]
    c3d2:	2b00      	cmp	r3, #0
    c3d4:	d008      	beq.n	c3e8 <_usb_d_dev_ept+0x28>
    c3d6:	79bb      	ldrb	r3, [r7, #6]
    c3d8:	2b00      	cmp	r3, #0
    c3da:	d003      	beq.n	c3e4 <_usb_d_dev_ept+0x24>
    c3dc:	79fb      	ldrb	r3, [r7, #7]
    c3de:	3304      	adds	r3, #4
    c3e0:	b2db      	uxtb	r3, r3
    c3e2:	e002      	b.n	c3ea <_usb_d_dev_ept+0x2a>
    c3e4:	79fb      	ldrb	r3, [r7, #7]
    c3e6:	e000      	b.n	c3ea <_usb_d_dev_ept+0x2a>
    c3e8:	2300      	movs	r3, #0
    c3ea:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    c3ec:	7bfa      	ldrb	r2, [r7, #15]
    c3ee:	4613      	mov	r3, r2
    c3f0:	009b      	lsls	r3, r3, #2
    c3f2:	4413      	add	r3, r2
    c3f4:	009b      	lsls	r3, r3, #2
    c3f6:	3310      	adds	r3, #16
    c3f8:	4a04      	ldr	r2, [pc, #16]	; (c40c <_usb_d_dev_ept+0x4c>)
    c3fa:	4413      	add	r3, r2
    c3fc:	3304      	adds	r3, #4
}
    c3fe:	4618      	mov	r0, r3
    c400:	3714      	adds	r7, #20
    c402:	46bd      	mov	sp, r7
    c404:	f85d 7b04 	ldr.w	r7, [sp], #4
    c408:	4770      	bx	lr
    c40a:	bf00      	nop
    c40c:	200025fc 	.word	0x200025fc

0000c410 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    c410:	b580      	push	{r7, lr}
    c412:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    c414:	2104      	movs	r1, #4
    c416:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c41a:	4b03      	ldr	r3, [pc, #12]	; (c428 <_usb_d_dev_sof+0x18>)
    c41c:	4798      	blx	r3
	dev_inst.callbacks.sof();
    c41e:	4b03      	ldr	r3, [pc, #12]	; (c42c <_usb_d_dev_sof+0x1c>)
    c420:	681b      	ldr	r3, [r3, #0]
    c422:	4798      	blx	r3
}
    c424:	bf00      	nop
    c426:	bd80      	pop	{r7, pc}
    c428:	0000ba87 	.word	0x0000ba87
    c42c:	200025fc 	.word	0x200025fc

0000c430 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    c430:	b580      	push	{r7, lr}
    c432:	b084      	sub	sp, #16
    c434:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    c436:	2300      	movs	r3, #0
    c438:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c43a:	f240 2101 	movw	r1, #513	; 0x201
    c43e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c442:	4b1a      	ldr	r3, [pc, #104]	; (c4ac <_usb_d_dev_lpmsusp+0x7c>)
    c444:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c446:	f240 2101 	movw	r1, #513	; 0x201
    c44a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c44e:	4b18      	ldr	r3, [pc, #96]	; (c4b0 <_usb_d_dev_lpmsusp+0x80>)
    c450:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c452:	2170      	movs	r1, #112	; 0x70
    c454:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c458:	4b16      	ldr	r3, [pc, #88]	; (c4b4 <_usb_d_dev_lpmsusp+0x84>)
    c45a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    c45c:	2300      	movs	r3, #0
    c45e:	73fb      	strb	r3, [r7, #15]
    c460:	e018      	b.n	c494 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    c462:	7bfb      	ldrb	r3, [r7, #15]
    c464:	015b      	lsls	r3, r3, #5
    c466:	4a14      	ldr	r2, [pc, #80]	; (c4b8 <_usb_d_dev_lpmsusp+0x88>)
    c468:	4413      	add	r3, r2
    c46a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    c46c:	687b      	ldr	r3, [r7, #4]
    c46e:	891b      	ldrh	r3, [r3, #8]
    c470:	f3c3 0303 	ubfx	r3, r3, #0, #4
    c474:	b2db      	uxtb	r3, r3
    c476:	2b03      	cmp	r3, #3
    c478:	d109      	bne.n	c48e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    c47a:	687b      	ldr	r3, [r7, #4]
    c47c:	891b      	ldrh	r3, [r3, #8]
    c47e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    c482:	b29b      	uxth	r3, r3
    c484:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    c486:	687b      	ldr	r3, [r7, #4]
    c488:	2200      	movs	r2, #0
    c48a:	811a      	strh	r2, [r3, #8]
			break;
    c48c:	e005      	b.n	c49a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    c48e:	7bfb      	ldrb	r3, [r7, #15]
    c490:	3301      	adds	r3, #1
    c492:	73fb      	strb	r3, [r7, #15]
    c494:	7bfb      	ldrb	r3, [r7, #15]
    c496:	2b03      	cmp	r3, #3
    c498:	d9e3      	bls.n	c462 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    c49a:	4b08      	ldr	r3, [pc, #32]	; (c4bc <_usb_d_dev_lpmsusp+0x8c>)
    c49c:	685b      	ldr	r3, [r3, #4]
    c49e:	68b9      	ldr	r1, [r7, #8]
    c4a0:	2003      	movs	r0, #3
    c4a2:	4798      	blx	r3
}
    c4a4:	bf00      	nop
    c4a6:	3710      	adds	r7, #16
    c4a8:	46bd      	mov	sp, r7
    c4aa:	bd80      	pop	{r7, pc}
    c4ac:	0000ba87 	.word	0x0000ba87
    c4b0:	0000badd 	.word	0x0000badd
    c4b4:	0000baa5 	.word	0x0000baa5
    c4b8:	200026c4 	.word	0x200026c4
    c4bc:	200025fc 	.word	0x200025fc

0000c4c0 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    c4c0:	b580      	push	{r7, lr}
    c4c2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    c4c4:	2180      	movs	r1, #128	; 0x80
    c4c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c4ca:	4b04      	ldr	r3, [pc, #16]	; (c4dc <_usb_d_dev_ramerr+0x1c>)
    c4cc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    c4ce:	4b04      	ldr	r3, [pc, #16]	; (c4e0 <_usb_d_dev_ramerr+0x20>)
    c4d0:	685b      	ldr	r3, [r3, #4]
    c4d2:	2100      	movs	r1, #0
    c4d4:	2005      	movs	r0, #5
    c4d6:	4798      	blx	r3
}
    c4d8:	bf00      	nop
    c4da:	bd80      	pop	{r7, pc}
    c4dc:	0000ba87 	.word	0x0000ba87
    c4e0:	200025fc 	.word	0x200025fc

0000c4e4 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    c4e4:	b580      	push	{r7, lr}
    c4e6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c4e8:	2170      	movs	r1, #112	; 0x70
    c4ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c4ee:	4b0b      	ldr	r3, [pc, #44]	; (c51c <_usb_d_dev_wakeup+0x38>)
    c4f0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c4f2:	2170      	movs	r1, #112	; 0x70
    c4f4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c4f8:	4b09      	ldr	r3, [pc, #36]	; (c520 <_usb_d_dev_wakeup+0x3c>)
    c4fa:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c4fc:	f240 2101 	movw	r1, #513	; 0x201
    c500:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c504:	4b07      	ldr	r3, [pc, #28]	; (c524 <_usb_d_dev_wakeup+0x40>)
    c506:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    c508:	2000      	movs	r0, #0
    c50a:	4b07      	ldr	r3, [pc, #28]	; (c528 <_usb_d_dev_wakeup+0x44>)
    c50c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    c50e:	4b07      	ldr	r3, [pc, #28]	; (c52c <_usb_d_dev_wakeup+0x48>)
    c510:	685b      	ldr	r3, [r3, #4]
    c512:	2100      	movs	r1, #0
    c514:	2002      	movs	r0, #2
    c516:	4798      	blx	r3
}
    c518:	bf00      	nop
    c51a:	bd80      	pop	{r7, pc}
    c51c:	0000ba87 	.word	0x0000ba87
    c520:	0000badd 	.word	0x0000badd
    c524:	0000baa5 	.word	0x0000baa5
    c528:	0000bd85 	.word	0x0000bd85
    c52c:	200025fc 	.word	0x200025fc

0000c530 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    c530:	b580      	push	{r7, lr}
    c532:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    c534:	2200      	movs	r2, #0
    c536:	2100      	movs	r1, #0
    c538:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c53c:	4b0d      	ldr	r3, [pc, #52]	; (c574 <_usb_d_dev_reset+0x44>)
    c53e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    c540:	2108      	movs	r1, #8
    c542:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c546:	4b0c      	ldr	r3, [pc, #48]	; (c578 <_usb_d_dev_reset+0x48>)
    c548:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c54a:	2170      	movs	r1, #112	; 0x70
    c54c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c550:	4b0a      	ldr	r3, [pc, #40]	; (c57c <_usb_d_dev_reset+0x4c>)
    c552:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c554:	f240 2101 	movw	r1, #513	; 0x201
    c558:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c55c:	4b08      	ldr	r3, [pc, #32]	; (c580 <_usb_d_dev_reset+0x50>)
    c55e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    c560:	4b08      	ldr	r3, [pc, #32]	; (c584 <_usb_d_dev_reset+0x54>)
    c562:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    c564:	4b08      	ldr	r3, [pc, #32]	; (c588 <_usb_d_dev_reset+0x58>)
    c566:	685b      	ldr	r3, [r3, #4]
    c568:	2100      	movs	r1, #0
    c56a:	2001      	movs	r0, #1
    c56c:	4798      	blx	r3
}
    c56e:	bf00      	nop
    c570:	bd80      	pop	{r7, pc}
    c572:	bf00      	nop
    c574:	0000ba1d 	.word	0x0000ba1d
    c578:	0000ba87 	.word	0x0000ba87
    c57c:	0000badd 	.word	0x0000badd
    c580:	0000baa5 	.word	0x0000baa5
    c584:	0000d0ed 	.word	0x0000d0ed
    c588:	200025fc 	.word	0x200025fc

0000c58c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    c58c:	b580      	push	{r7, lr}
    c58e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c590:	f240 2101 	movw	r1, #513	; 0x201
    c594:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c598:	4b09      	ldr	r3, [pc, #36]	; (c5c0 <_usb_d_dev_suspend+0x34>)
    c59a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c59c:	f240 2101 	movw	r1, #513	; 0x201
    c5a0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c5a4:	4b07      	ldr	r3, [pc, #28]	; (c5c4 <_usb_d_dev_suspend+0x38>)
    c5a6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c5a8:	2170      	movs	r1, #112	; 0x70
    c5aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c5ae:	4b06      	ldr	r3, [pc, #24]	; (c5c8 <_usb_d_dev_suspend+0x3c>)
    c5b0:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    c5b2:	4b06      	ldr	r3, [pc, #24]	; (c5cc <_usb_d_dev_suspend+0x40>)
    c5b4:	685b      	ldr	r3, [r3, #4]
    c5b6:	2100      	movs	r1, #0
    c5b8:	2004      	movs	r0, #4
    c5ba:	4798      	blx	r3
}
    c5bc:	bf00      	nop
    c5be:	bd80      	pop	{r7, pc}
    c5c0:	0000ba87 	.word	0x0000ba87
    c5c4:	0000badd 	.word	0x0000badd
    c5c8:	0000baa5 	.word	0x0000baa5
    c5cc:	200025fc 	.word	0x200025fc

0000c5d0 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    c5d0:	b580      	push	{r7, lr}
    c5d2:	b082      	sub	sp, #8
    c5d4:	af00      	add	r7, sp, #0
	bool     rc    = true;
    c5d6:	2301      	movs	r3, #1
    c5d8:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    c5da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c5de:	4b22      	ldr	r3, [pc, #136]	; (c668 <_usb_d_dev_handle_nep+0x98>)
    c5e0:	4798      	blx	r3
    c5e2:	4603      	mov	r3, r0
    c5e4:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    c5e6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c5ea:	4b20      	ldr	r3, [pc, #128]	; (c66c <_usb_d_dev_handle_nep+0x9c>)
    c5ec:	4798      	blx	r3
    c5ee:	4603      	mov	r3, r0
    c5f0:	461a      	mov	r2, r3
    c5f2:	88bb      	ldrh	r3, [r7, #4]
    c5f4:	4013      	ands	r3, r2
    c5f6:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    c5f8:	88bb      	ldrh	r3, [r7, #4]
    c5fa:	f003 0304 	and.w	r3, r3, #4
    c5fe:	2b00      	cmp	r3, #0
    c600:	d003      	beq.n	c60a <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    c602:	4b1b      	ldr	r3, [pc, #108]	; (c670 <_usb_d_dev_handle_nep+0xa0>)
    c604:	4798      	blx	r3
		return true;
    c606:	2301      	movs	r3, #1
    c608:	e02a      	b.n	c660 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    c60a:	88bb      	ldrh	r3, [r7, #4]
    c60c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    c610:	2b00      	cmp	r3, #0
    c612:	d002      	beq.n	c61a <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    c614:	4b17      	ldr	r3, [pc, #92]	; (c674 <_usb_d_dev_handle_nep+0xa4>)
    c616:	4798      	blx	r3
    c618:	e021      	b.n	c65e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    c61a:	88bb      	ldrh	r3, [r7, #4]
    c61c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c620:	2b00      	cmp	r3, #0
    c622:	d002      	beq.n	c62a <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    c624:	4b14      	ldr	r3, [pc, #80]	; (c678 <_usb_d_dev_handle_nep+0xa8>)
    c626:	4798      	blx	r3
    c628:	e019      	b.n	c65e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    c62a:	88bb      	ldrh	r3, [r7, #4]
    c62c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c630:	2b00      	cmp	r3, #0
    c632:	d002      	beq.n	c63a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    c634:	4b11      	ldr	r3, [pc, #68]	; (c67c <_usb_d_dev_handle_nep+0xac>)
    c636:	4798      	blx	r3
    c638:	e011      	b.n	c65e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    c63a:	88bb      	ldrh	r3, [r7, #4]
    c63c:	f003 0308 	and.w	r3, r3, #8
    c640:	2b00      	cmp	r3, #0
    c642:	d002      	beq.n	c64a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    c644:	4b0e      	ldr	r3, [pc, #56]	; (c680 <_usb_d_dev_handle_nep+0xb0>)
    c646:	4798      	blx	r3
    c648:	e009      	b.n	c65e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    c64a:	88bb      	ldrh	r3, [r7, #4]
    c64c:	f003 0301 	and.w	r3, r3, #1
    c650:	2b00      	cmp	r3, #0
    c652:	d002      	beq.n	c65a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    c654:	4b0b      	ldr	r3, [pc, #44]	; (c684 <_usb_d_dev_handle_nep+0xb4>)
    c656:	4798      	blx	r3
    c658:	e001      	b.n	c65e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    c65a:	2300      	movs	r3, #0
    c65c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    c65e:	79fb      	ldrb	r3, [r7, #7]
}
    c660:	4618      	mov	r0, r3
    c662:	3708      	adds	r7, #8
    c664:	46bd      	mov	sp, r7
    c666:	bd80      	pop	{r7, pc}
    c668:	0000ba6d 	.word	0x0000ba6d
    c66c:	0000bac3 	.word	0x0000bac3
    c670:	0000c411 	.word	0x0000c411
    c674:	0000c431 	.word	0x0000c431
    c678:	0000c4c1 	.word	0x0000c4c1
    c67c:	0000c4e5 	.word	0x0000c4e5
    c680:	0000c531 	.word	0x0000c531
    c684:	0000c58d 	.word	0x0000c58d

0000c688 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    c688:	b590      	push	{r4, r7, lr}
    c68a:	b089      	sub	sp, #36	; 0x24
    c68c:	af00      	add	r7, sp, #0
    c68e:	6078      	str	r0, [r7, #4]
    c690:	460b      	mov	r3, r1
    c692:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    c694:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c698:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    c69a:	687b      	ldr	r3, [r7, #4]
    c69c:	7c9b      	ldrb	r3, [r3, #18]
    c69e:	f003 030f 	and.w	r3, r3, #15
    c6a2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    c6a4:	7dfb      	ldrb	r3, [r7, #23]
    c6a6:	015b      	lsls	r3, r3, #5
    c6a8:	4a73      	ldr	r2, [pc, #460]	; (c878 <_usb_d_dev_in_next+0x1f0>)
    c6aa:	4413      	add	r3, r2
    c6ac:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c6ae:	78fb      	ldrb	r3, [r7, #3]
    c6b0:	2b00      	cmp	r3, #0
    c6b2:	d006      	beq.n	c6c2 <_usb_d_dev_in_next+0x3a>
    c6b4:	693b      	ldr	r3, [r7, #16]
    c6b6:	3310      	adds	r3, #16
    c6b8:	685b      	ldr	r3, [r3, #4]
    c6ba:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c6be:	b29b      	uxth	r3, r3
    c6c0:	e000      	b.n	c6c4 <_usb_d_dev_in_next+0x3c>
    c6c2:	2300      	movs	r3, #0
    c6c4:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    c6c6:	687b      	ldr	r3, [r7, #4]
    c6c8:	8a1b      	ldrh	r3, [r3, #16]
    c6ca:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c6ce:	4293      	cmp	r3, r2
    c6d0:	d103      	bne.n	c6da <_usb_d_dev_in_next+0x52>
    c6d2:	687b      	ldr	r3, [r7, #4]
    c6d4:	8a1b      	ldrh	r3, [r3, #16]
    c6d6:	b21b      	sxth	r3, r3
    c6d8:	e004      	b.n	c6e4 <_usb_d_dev_in_next+0x5c>
    c6da:	687b      	ldr	r3, [r7, #4]
    c6dc:	8a1b      	ldrh	r3, [r3, #16]
    c6de:	3b01      	subs	r3, #1
    c6e0:	b29b      	uxth	r3, r3
    c6e2:	b21b      	sxth	r3, r3
    c6e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    c6e8:	4013      	ands	r3, r2
    c6ea:	b21b      	sxth	r3, r3
    c6ec:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    c6ee:	2300      	movs	r3, #0
    c6f0:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    c6f2:	687b      	ldr	r3, [r7, #4]
    c6f4:	7cdb      	ldrb	r3, [r3, #19]
    c6f6:	f003 0307 	and.w	r3, r3, #7
    c6fa:	b2db      	uxtb	r3, r3
    c6fc:	2b01      	cmp	r3, #1
    c6fe:	bf0c      	ite	eq
    c700:	2301      	moveq	r3, #1
    c702:	2300      	movne	r3, #0
    c704:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    c706:	78fb      	ldrb	r3, [r7, #3]
    c708:	2b00      	cmp	r3, #0
    c70a:	d004      	beq.n	c716 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    c70c:	7dfb      	ldrb	r3, [r7, #23]
    c70e:	2101      	movs	r1, #1
    c710:	4618      	mov	r0, r3
    c712:	4b5a      	ldr	r3, [pc, #360]	; (c87c <_usb_d_dev_in_next+0x1f4>)
    c714:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    c716:	687b      	ldr	r3, [r7, #4]
    c718:	689a      	ldr	r2, [r3, #8]
    c71a:	89fb      	ldrh	r3, [r7, #14]
    c71c:	441a      	add	r2, r3
    c71e:	687b      	ldr	r3, [r7, #4]
    c720:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    c722:	687b      	ldr	r3, [r7, #4]
    c724:	689a      	ldr	r2, [r3, #8]
    c726:	687b      	ldr	r3, [r7, #4]
    c728:	685b      	ldr	r3, [r3, #4]
    c72a:	429a      	cmp	r2, r3
    c72c:	d243      	bcs.n	c7b6 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    c72e:	687b      	ldr	r3, [r7, #4]
    c730:	685b      	ldr	r3, [r3, #4]
    c732:	b29a      	uxth	r2, r3
    c734:	687b      	ldr	r3, [r7, #4]
    c736:	689b      	ldr	r3, [r3, #8]
    c738:	b29b      	uxth	r3, r3
    c73a:	1ad3      	subs	r3, r2, r3
    c73c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    c73e:	687b      	ldr	r3, [r7, #4]
    c740:	7cdb      	ldrb	r3, [r3, #19]
    c742:	f003 0320 	and.w	r3, r3, #32
    c746:	b2db      	uxtb	r3, r3
    c748:	2b00      	cmp	r3, #0
    c74a:	d01b      	beq.n	c784 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    c74c:	687b      	ldr	r3, [r7, #4]
    c74e:	8a1b      	ldrh	r3, [r3, #16]
    c750:	8bfa      	ldrh	r2, [r7, #30]
    c752:	429a      	cmp	r2, r3
    c754:	d902      	bls.n	c75c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    c756:	687b      	ldr	r3, [r7, #4]
    c758:	8a1b      	ldrh	r3, [r3, #16]
    c75a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    c75c:	687b      	ldr	r3, [r7, #4]
    c75e:	68d8      	ldr	r0, [r3, #12]
    c760:	687b      	ldr	r3, [r7, #4]
    c762:	681a      	ldr	r2, [r3, #0]
    c764:	687b      	ldr	r3, [r7, #4]
    c766:	689b      	ldr	r3, [r3, #8]
    c768:	4413      	add	r3, r2
    c76a:	8bfa      	ldrh	r2, [r7, #30]
    c76c:	4619      	mov	r1, r3
    c76e:	4b44      	ldr	r3, [pc, #272]	; (c880 <_usb_d_dev_in_next+0x1f8>)
    c770:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    c772:	687b      	ldr	r3, [r7, #4]
    c774:	68db      	ldr	r3, [r3, #12]
    c776:	461a      	mov	r2, r3
    c778:	7dfb      	ldrb	r3, [r7, #23]
    c77a:	2101      	movs	r1, #1
    c77c:	4618      	mov	r0, r3
    c77e:	4b41      	ldr	r3, [pc, #260]	; (c884 <_usb_d_dev_in_next+0x1fc>)
    c780:	4798      	blx	r3
    c782:	e011      	b.n	c7a8 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    c784:	8bfb      	ldrh	r3, [r7, #30]
    c786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    c78a:	d902      	bls.n	c792 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    c78c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    c790:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    c792:	687b      	ldr	r3, [r7, #4]
    c794:	681a      	ldr	r2, [r3, #0]
    c796:	687b      	ldr	r3, [r7, #4]
    c798:	689b      	ldr	r3, [r3, #8]
    c79a:	4413      	add	r3, r2
    c79c:	461a      	mov	r2, r3
    c79e:	7dfb      	ldrb	r3, [r7, #23]
    c7a0:	2101      	movs	r1, #1
    c7a2:	4618      	mov	r0, r3
    c7a4:	4b37      	ldr	r3, [pc, #220]	; (c884 <_usb_d_dev_in_next+0x1fc>)
    c7a6:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    c7a8:	8bfa      	ldrh	r2, [r7, #30]
    c7aa:	7df8      	ldrb	r0, [r7, #23]
    c7ac:	2300      	movs	r3, #0
    c7ae:	2101      	movs	r1, #1
    c7b0:	4c35      	ldr	r4, [pc, #212]	; (c888 <_usb_d_dev_in_next+0x200>)
    c7b2:	47a0      	blx	r4
		goto _in_tx_exec;
    c7b4:	e041      	b.n	c83a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    c7b6:	687b      	ldr	r3, [r7, #4]
    c7b8:	7cdb      	ldrb	r3, [r3, #19]
    c7ba:	f003 0310 	and.w	r3, r3, #16
    c7be:	b2db      	uxtb	r3, r3
    c7c0:	2b00      	cmp	r3, #0
    c7c2:	d00b      	beq.n	c7dc <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    c7c4:	687a      	ldr	r2, [r7, #4]
    c7c6:	7cd3      	ldrb	r3, [r2, #19]
    c7c8:	f36f 1304 	bfc	r3, #4, #1
    c7cc:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    c7ce:	7df8      	ldrb	r0, [r7, #23]
    c7d0:	2300      	movs	r3, #0
    c7d2:	2200      	movs	r2, #0
    c7d4:	2101      	movs	r1, #1
    c7d6:	4c2c      	ldr	r4, [pc, #176]	; (c888 <_usb_d_dev_in_next+0x200>)
    c7d8:	47a0      	blx	r4
		goto _in_tx_exec;
    c7da:	e02e      	b.n	c83a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    c7dc:	7afb      	ldrb	r3, [r7, #11]
    c7de:	2b00      	cmp	r3, #0
    c7e0:	d006      	beq.n	c7f0 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    c7e2:	7dfb      	ldrb	r3, [r7, #23]
    c7e4:	224b      	movs	r2, #75	; 0x4b
    c7e6:	4619      	mov	r1, r3
    c7e8:	69b8      	ldr	r0, [r7, #24]
    c7ea:	4b28      	ldr	r3, [pc, #160]	; (c88c <_usb_d_dev_in_next+0x204>)
    c7ec:	4798      	blx	r3
    c7ee:	e005      	b.n	c7fc <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    c7f0:	7dfb      	ldrb	r3, [r7, #23]
    c7f2:	224a      	movs	r2, #74	; 0x4a
    c7f4:	4619      	mov	r1, r3
    c7f6:	69b8      	ldr	r0, [r7, #24]
    c7f8:	4b24      	ldr	r3, [pc, #144]	; (c88c <_usb_d_dev_in_next+0x204>)
    c7fa:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    c7fc:	687b      	ldr	r3, [r7, #4]
    c7fe:	8a1b      	ldrh	r3, [r3, #16]
    c800:	89ba      	ldrh	r2, [r7, #12]
    c802:	429a      	cmp	r2, r3
    c804:	d114      	bne.n	c830 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    c806:	687a      	ldr	r2, [r7, #4]
    c808:	7cd3      	ldrb	r3, [r2, #19]
    c80a:	f36f 1386 	bfc	r3, #6, #1
    c80e:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    c810:	4b1f      	ldr	r3, [pc, #124]	; (c890 <_usb_d_dev_in_next+0x208>)
    c812:	68db      	ldr	r3, [r3, #12]
    c814:	687a      	ldr	r2, [r7, #4]
    c816:	7c90      	ldrb	r0, [r2, #18]
    c818:	687a      	ldr	r2, [r7, #4]
    c81a:	6892      	ldr	r2, [r2, #8]
    c81c:	4611      	mov	r1, r2
    c81e:	4798      	blx	r3
    c820:	4603      	mov	r3, r0
    c822:	2b00      	cmp	r3, #0
    c824:	d124      	bne.n	c870 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    c826:	687a      	ldr	r2, [r7, #4]
    c828:	7cd3      	ldrb	r3, [r2, #19]
    c82a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c82e:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c830:	2100      	movs	r1, #0
    c832:	6878      	ldr	r0, [r7, #4]
    c834:	4b17      	ldr	r3, [pc, #92]	; (c894 <_usb_d_dev_in_next+0x20c>)
    c836:	4798      	blx	r3
	return;
    c838:	e01b      	b.n	c872 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    c83a:	78fb      	ldrb	r3, [r7, #3]
    c83c:	f083 0301 	eor.w	r3, r3, #1
    c840:	b2db      	uxtb	r3, r3
    c842:	2b00      	cmp	r3, #0
    c844:	d00d      	beq.n	c862 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    c846:	7afb      	ldrb	r3, [r7, #11]
    c848:	2b00      	cmp	r3, #0
    c84a:	d002      	beq.n	c852 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    c84c:	234e      	movs	r3, #78	; 0x4e
    c84e:	777b      	strb	r3, [r7, #29]
    c850:	e001      	b.n	c856 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    c852:	234a      	movs	r3, #74	; 0x4a
    c854:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    c856:	7f7a      	ldrb	r2, [r7, #29]
    c858:	7dfb      	ldrb	r3, [r7, #23]
    c85a:	4619      	mov	r1, r3
    c85c:	69b8      	ldr	r0, [r7, #24]
    c85e:	4b0e      	ldr	r3, [pc, #56]	; (c898 <_usb_d_dev_in_next+0x210>)
    c860:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    c862:	7dfb      	ldrb	r3, [r7, #23]
    c864:	2201      	movs	r2, #1
    c866:	2101      	movs	r1, #1
    c868:	4618      	mov	r0, r3
    c86a:	4b0c      	ldr	r3, [pc, #48]	; (c89c <_usb_d_dev_in_next+0x214>)
    c86c:	4798      	blx	r3
    c86e:	e000      	b.n	c872 <_usb_d_dev_in_next+0x1ea>
			return;
    c870:	bf00      	nop
}
    c872:	3724      	adds	r7, #36	; 0x24
    c874:	46bd      	mov	sp, r7
    c876:	bd90      	pop	{r4, r7, pc}
    c878:	200026c4 	.word	0x200026c4
    c87c:	0000c081 	.word	0x0000c081
    c880:	0001631d 	.word	0x0001631d
    c884:	0000c0ad 	.word	0x0000c0ad
    c888:	0000c1f5 	.word	0x0000c1f5
    c88c:	0000b98d 	.word	0x0000b98d
    c890:	200025fc 	.word	0x200025fc
    c894:	0000d9b1 	.word	0x0000d9b1
    c898:	0000b961 	.word	0x0000b961
    c89c:	0000c2ad 	.word	0x0000c2ad

0000c8a0 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    c8a0:	b590      	push	{r4, r7, lr}
    c8a2:	b08b      	sub	sp, #44	; 0x2c
    c8a4:	af00      	add	r7, sp, #0
    c8a6:	6078      	str	r0, [r7, #4]
    c8a8:	460b      	mov	r3, r1
    c8aa:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    c8ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c8b0:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    c8b2:	687b      	ldr	r3, [r7, #4]
    c8b4:	7c9b      	ldrb	r3, [r3, #18]
    c8b6:	f003 030f 	and.w	r3, r3, #15
    c8ba:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    c8bc:	7ffb      	ldrb	r3, [r7, #31]
    c8be:	015b      	lsls	r3, r3, #5
    c8c0:	4a94      	ldr	r2, [pc, #592]	; (cb14 <_usb_d_dev_out_next+0x274>)
    c8c2:	4413      	add	r3, r2
    c8c4:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    c8c6:	78fb      	ldrb	r3, [r7, #3]
    c8c8:	2b00      	cmp	r3, #0
    c8ca:	d005      	beq.n	c8d8 <_usb_d_dev_out_next+0x38>
    c8cc:	69bb      	ldr	r3, [r7, #24]
    c8ce:	685b      	ldr	r3, [r3, #4]
    c8d0:	f3c3 338d 	ubfx	r3, r3, #14, #14
    c8d4:	b29b      	uxth	r3, r3
    c8d6:	e000      	b.n	c8da <_usb_d_dev_out_next+0x3a>
    c8d8:	2300      	movs	r3, #0
    c8da:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    c8dc:	78fb      	ldrb	r3, [r7, #3]
    c8de:	2b00      	cmp	r3, #0
    c8e0:	d005      	beq.n	c8ee <_usb_d_dev_out_next+0x4e>
    c8e2:	69bb      	ldr	r3, [r7, #24]
    c8e4:	685b      	ldr	r3, [r3, #4]
    c8e6:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c8ea:	b29b      	uxth	r3, r3
    c8ec:	e000      	b.n	c8f0 <_usb_d_dev_out_next+0x50>
    c8ee:	2300      	movs	r3, #0
    c8f0:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c8f2:	687b      	ldr	r3, [r7, #4]
    c8f4:	8a1b      	ldrh	r3, [r3, #16]
    c8f6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c8fa:	4293      	cmp	r3, r2
    c8fc:	d004      	beq.n	c908 <_usb_d_dev_out_next+0x68>
    c8fe:	687b      	ldr	r3, [r7, #4]
    c900:	8a1b      	ldrh	r3, [r3, #16]
    c902:	3b01      	subs	r3, #1
    c904:	b29b      	uxth	r3, r3
    c906:	e001      	b.n	c90c <_usb_d_dev_out_next+0x6c>
    c908:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c90c:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    c90e:	8aba      	ldrh	r2, [r7, #20]
    c910:	8a7b      	ldrh	r3, [r7, #18]
    c912:	4013      	ands	r3, r2
    c914:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c916:	687b      	ldr	r3, [r7, #4]
    c918:	7cdb      	ldrb	r3, [r3, #19]
    c91a:	f003 0307 	and.w	r3, r3, #7
    c91e:	b2db      	uxtb	r3, r3
    c920:	2b01      	cmp	r3, #1
    c922:	bf0c      	ite	eq
    c924:	2301      	moveq	r3, #1
    c926:	2300      	movne	r3, #0
    c928:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    c92a:	78fb      	ldrb	r3, [r7, #3]
    c92c:	2b00      	cmp	r3, #0
    c92e:	d004      	beq.n	c93a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    c930:	7ffb      	ldrb	r3, [r7, #31]
    c932:	2100      	movs	r1, #0
    c934:	4618      	mov	r0, r3
    c936:	4b78      	ldr	r3, [pc, #480]	; (cb18 <_usb_d_dev_out_next+0x278>)
    c938:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    c93a:	687b      	ldr	r3, [r7, #4]
    c93c:	7cdb      	ldrb	r3, [r3, #19]
    c93e:	f003 0320 	and.w	r3, r3, #32
    c942:	b2db      	uxtb	r3, r3
    c944:	2b00      	cmp	r3, #0
    c946:	d01c      	beq.n	c982 <_usb_d_dev_out_next+0xe2>
    c948:	687b      	ldr	r3, [r7, #4]
    c94a:	685b      	ldr	r3, [r3, #4]
    c94c:	2b00      	cmp	r3, #0
    c94e:	d018      	beq.n	c982 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    c950:	687b      	ldr	r3, [r7, #4]
    c952:	685b      	ldr	r3, [r3, #4]
    c954:	b29a      	uxth	r2, r3
    c956:	687b      	ldr	r3, [r7, #4]
    c958:	689b      	ldr	r3, [r3, #8]
    c95a:	b29b      	uxth	r3, r3
    c95c:	1ad3      	subs	r3, r2, r3
    c95e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    c960:	687b      	ldr	r3, [r7, #4]
    c962:	681a      	ldr	r2, [r3, #0]
    c964:	687b      	ldr	r3, [r7, #4]
    c966:	689b      	ldr	r3, [r3, #8]
    c968:	18d0      	adds	r0, r2, r3
    c96a:	687b      	ldr	r3, [r7, #4]
    c96c:	68d9      	ldr	r1, [r3, #12]
    c96e:	89ba      	ldrh	r2, [r7, #12]
    c970:	8a3b      	ldrh	r3, [r7, #16]
    c972:	429a      	cmp	r2, r3
    c974:	d901      	bls.n	c97a <_usb_d_dev_out_next+0xda>
    c976:	8a3b      	ldrh	r3, [r7, #16]
    c978:	e000      	b.n	c97c <_usb_d_dev_out_next+0xdc>
    c97a:	89bb      	ldrh	r3, [r7, #12]
    c97c:	461a      	mov	r2, r3
    c97e:	4b67      	ldr	r3, [pc, #412]	; (cb1c <_usb_d_dev_out_next+0x27c>)
    c980:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    c982:	687b      	ldr	r3, [r7, #4]
    c984:	685b      	ldr	r3, [r3, #4]
    c986:	2b00      	cmp	r3, #0
    c988:	d121      	bne.n	c9ce <_usb_d_dev_out_next+0x12e>
    c98a:	687b      	ldr	r3, [r7, #4]
    c98c:	7cdb      	ldrb	r3, [r3, #19]
    c98e:	f003 0310 	and.w	r3, r3, #16
    c992:	b2db      	uxtb	r3, r3
    c994:	2b00      	cmp	r3, #0
    c996:	d01a      	beq.n	c9ce <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    c998:	687a      	ldr	r2, [r7, #4]
    c99a:	7cd3      	ldrb	r3, [r2, #19]
    c99c:	f36f 1304 	bfc	r3, #4, #1
    c9a0:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    c9a2:	687a      	ldr	r2, [r7, #4]
    c9a4:	7cd3      	ldrb	r3, [r2, #19]
    c9a6:	f043 0320 	orr.w	r3, r3, #32
    c9aa:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c9ac:	687b      	ldr	r3, [r7, #4]
    c9ae:	68db      	ldr	r3, [r3, #12]
    c9b0:	461a      	mov	r2, r3
    c9b2:	7ffb      	ldrb	r3, [r7, #31]
    c9b4:	2100      	movs	r1, #0
    c9b6:	4618      	mov	r0, r3
    c9b8:	4b59      	ldr	r3, [pc, #356]	; (cb20 <_usb_d_dev_out_next+0x280>)
    c9ba:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    c9bc:	687b      	ldr	r3, [r7, #4]
    c9be:	8a1b      	ldrh	r3, [r3, #16]
    c9c0:	461a      	mov	r2, r3
    c9c2:	7ff8      	ldrb	r0, [r7, #31]
    c9c4:	2300      	movs	r3, #0
    c9c6:	2100      	movs	r1, #0
    c9c8:	4c56      	ldr	r4, [pc, #344]	; (cb24 <_usb_d_dev_out_next+0x284>)
    c9ca:	47a0      	blx	r4
		goto _out_rx_exec;
    c9cc:	e090      	b.n	caf0 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    c9ce:	78fb      	ldrb	r3, [r7, #3]
    c9d0:	2b00      	cmp	r3, #0
    c9d2:	d010      	beq.n	c9f6 <_usb_d_dev_out_next+0x156>
    c9d4:	687b      	ldr	r3, [r7, #4]
    c9d6:	8a1b      	ldrh	r3, [r3, #16]
    c9d8:	8a3a      	ldrh	r2, [r7, #16]
    c9da:	429a      	cmp	r2, r3
    c9dc:	d20b      	bcs.n	c9f6 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    c9de:	687a      	ldr	r2, [r7, #4]
    c9e0:	7cd3      	ldrb	r3, [r2, #19]
    c9e2:	f36f 1304 	bfc	r3, #4, #1
    c9e6:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    c9e8:	687b      	ldr	r3, [r7, #4]
    c9ea:	689a      	ldr	r2, [r3, #8]
    c9ec:	8abb      	ldrh	r3, [r7, #20]
    c9ee:	441a      	add	r2, r3
    c9f0:	687b      	ldr	r3, [r7, #4]
    c9f2:	609a      	str	r2, [r3, #8]
    c9f4:	e05c      	b.n	cab0 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    c9f6:	687b      	ldr	r3, [r7, #4]
    c9f8:	689a      	ldr	r2, [r3, #8]
    c9fa:	8afb      	ldrh	r3, [r7, #22]
    c9fc:	441a      	add	r2, r3
    c9fe:	687b      	ldr	r3, [r7, #4]
    ca00:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    ca02:	687b      	ldr	r3, [r7, #4]
    ca04:	689a      	ldr	r2, [r3, #8]
    ca06:	687b      	ldr	r3, [r7, #4]
    ca08:	685b      	ldr	r3, [r3, #4]
    ca0a:	429a      	cmp	r2, r3
    ca0c:	d250      	bcs.n	cab0 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    ca0e:	687b      	ldr	r3, [r7, #4]
    ca10:	685b      	ldr	r3, [r3, #4]
    ca12:	b29a      	uxth	r2, r3
    ca14:	687b      	ldr	r3, [r7, #4]
    ca16:	689b      	ldr	r3, [r3, #8]
    ca18:	b29b      	uxth	r3, r3
    ca1a:	1ad3      	subs	r3, r2, r3
    ca1c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    ca1e:	687b      	ldr	r3, [r7, #4]
    ca20:	7cdb      	ldrb	r3, [r3, #19]
    ca22:	f003 0320 	and.w	r3, r3, #32
    ca26:	b2db      	uxtb	r3, r3
    ca28:	2b00      	cmp	r3, #0
    ca2a:	d010      	beq.n	ca4e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    ca2c:	687b      	ldr	r3, [r7, #4]
    ca2e:	8a1b      	ldrh	r3, [r3, #16]
    ca30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ca32:	429a      	cmp	r2, r3
    ca34:	d902      	bls.n	ca3c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    ca36:	687b      	ldr	r3, [r7, #4]
    ca38:	8a1b      	ldrh	r3, [r3, #16]
    ca3a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ca3c:	687b      	ldr	r3, [r7, #4]
    ca3e:	68db      	ldr	r3, [r3, #12]
    ca40:	461a      	mov	r2, r3
    ca42:	7ffb      	ldrb	r3, [r7, #31]
    ca44:	2100      	movs	r1, #0
    ca46:	4618      	mov	r0, r3
    ca48:	4b35      	ldr	r3, [pc, #212]	; (cb20 <_usb_d_dev_out_next+0x280>)
    ca4a:	4798      	blx	r3
    ca4c:	e029      	b.n	caa2 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    ca4e:	687b      	ldr	r3, [r7, #4]
    ca50:	8a1b      	ldrh	r3, [r3, #16]
    ca52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ca54:	429a      	cmp	r2, r3
    ca56:	d90f      	bls.n	ca78 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    ca58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    ca5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    ca5e:	d903      	bls.n	ca68 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    ca60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    ca64:	84fb      	strh	r3, [r7, #38]	; 0x26
    ca66:	e011      	b.n	ca8c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    ca68:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ca6a:	8a7b      	ldrh	r3, [r7, #18]
    ca6c:	4013      	ands	r3, r2
    ca6e:	b29b      	uxth	r3, r3
    ca70:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ca72:	1ad3      	subs	r3, r2, r3
    ca74:	84fb      	strh	r3, [r7, #38]	; 0x26
    ca76:	e009      	b.n	ca8c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    ca78:	687b      	ldr	r3, [r7, #4]
    ca7a:	8a1b      	ldrh	r3, [r3, #16]
    ca7c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ca7e:	429a      	cmp	r2, r3
    ca80:	d204      	bcs.n	ca8c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    ca82:	687a      	ldr	r2, [r7, #4]
    ca84:	7cd3      	ldrb	r3, [r2, #19]
    ca86:	f043 0320 	orr.w	r3, r3, #32
    ca8a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    ca8c:	687b      	ldr	r3, [r7, #4]
    ca8e:	681a      	ldr	r2, [r3, #0]
    ca90:	687b      	ldr	r3, [r7, #4]
    ca92:	689b      	ldr	r3, [r3, #8]
    ca94:	4413      	add	r3, r2
    ca96:	461a      	mov	r2, r3
    ca98:	7ffb      	ldrb	r3, [r7, #31]
    ca9a:	2100      	movs	r1, #0
    ca9c:	4618      	mov	r0, r3
    ca9e:	4b20      	ldr	r3, [pc, #128]	; (cb20 <_usb_d_dev_out_next+0x280>)
    caa0:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    caa2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    caa4:	7ff8      	ldrb	r0, [r7, #31]
    caa6:	2300      	movs	r3, #0
    caa8:	2100      	movs	r1, #0
    caaa:	4c1e      	ldr	r4, [pc, #120]	; (cb24 <_usb_d_dev_out_next+0x284>)
    caac:	47a0      	blx	r4
			goto _out_rx_exec;
    caae:	e01f      	b.n	caf0 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    cab0:	7bfb      	ldrb	r3, [r7, #15]
    cab2:	2b00      	cmp	r3, #0
    cab4:	d006      	beq.n	cac4 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    cab6:	7ffb      	ldrb	r3, [r7, #31]
    cab8:	222d      	movs	r2, #45	; 0x2d
    caba:	4619      	mov	r1, r3
    cabc:	6a38      	ldr	r0, [r7, #32]
    cabe:	4b1a      	ldr	r3, [pc, #104]	; (cb28 <_usb_d_dev_out_next+0x288>)
    cac0:	4798      	blx	r3
    cac2:	e005      	b.n	cad0 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    cac4:	7ffb      	ldrb	r3, [r7, #31]
    cac6:	2225      	movs	r2, #37	; 0x25
    cac8:	4619      	mov	r1, r3
    caca:	6a38      	ldr	r0, [r7, #32]
    cacc:	4b16      	ldr	r3, [pc, #88]	; (cb28 <_usb_d_dev_out_next+0x288>)
    cace:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    cad0:	7ffb      	ldrb	r3, [r7, #31]
    cad2:	2b00      	cmp	r3, #0
    cad4:	d107      	bne.n	cae6 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    cad6:	687b      	ldr	r3, [r7, #4]
    cad8:	68db      	ldr	r3, [r3, #12]
    cada:	461a      	mov	r2, r3
    cadc:	7ffb      	ldrb	r3, [r7, #31]
    cade:	2100      	movs	r1, #0
    cae0:	4618      	mov	r0, r3
    cae2:	4b0f      	ldr	r3, [pc, #60]	; (cb20 <_usb_d_dev_out_next+0x280>)
    cae4:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    cae6:	2100      	movs	r1, #0
    cae8:	6878      	ldr	r0, [r7, #4]
    caea:	4b10      	ldr	r3, [pc, #64]	; (cb2c <_usb_d_dev_out_next+0x28c>)
    caec:	4798      	blx	r3
	return;
    caee:	e031      	b.n	cb54 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    caf0:	78fb      	ldrb	r3, [r7, #3]
    caf2:	f083 0301 	eor.w	r3, r3, #1
    caf6:	b2db      	uxtb	r3, r3
    caf8:	2b00      	cmp	r3, #0
    cafa:	d025      	beq.n	cb48 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    cafc:	7bfb      	ldrb	r3, [r7, #15]
    cafe:	2b00      	cmp	r3, #0
    cb00:	d018      	beq.n	cb34 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    cb02:	7ffb      	ldrb	r3, [r7, #31]
    cb04:	2101      	movs	r1, #1
    cb06:	4618      	mov	r0, r3
    cb08:	4b09      	ldr	r3, [pc, #36]	; (cb30 <_usb_d_dev_out_next+0x290>)
    cb0a:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    cb0c:	232d      	movs	r3, #45	; 0x2d
    cb0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    cb12:	e012      	b.n	cb3a <_usb_d_dev_out_next+0x29a>
    cb14:	200026c4 	.word	0x200026c4
    cb18:	0000c081 	.word	0x0000c081
    cb1c:	0001631d 	.word	0x0001631d
    cb20:	0000c0ad 	.word	0x0000c0ad
    cb24:	0000c235 	.word	0x0000c235
    cb28:	0000b98d 	.word	0x0000b98d
    cb2c:	0000d9b1 	.word	0x0000d9b1
    cb30:	0000c275 	.word	0x0000c275
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    cb34:	2325      	movs	r3, #37	; 0x25
    cb36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    cb3a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    cb3e:	7ffb      	ldrb	r3, [r7, #31]
    cb40:	4619      	mov	r1, r3
    cb42:	6a38      	ldr	r0, [r7, #32]
    cb44:	4b05      	ldr	r3, [pc, #20]	; (cb5c <_usb_d_dev_out_next+0x2bc>)
    cb46:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    cb48:	7ffb      	ldrb	r3, [r7, #31]
    cb4a:	2201      	movs	r2, #1
    cb4c:	2100      	movs	r1, #0
    cb4e:	4618      	mov	r0, r3
    cb50:	4b03      	ldr	r3, [pc, #12]	; (cb60 <_usb_d_dev_out_next+0x2c0>)
    cb52:	4798      	blx	r3
}
    cb54:	372c      	adds	r7, #44	; 0x2c
    cb56:	46bd      	mov	sp, r7
    cb58:	bd90      	pop	{r4, r7, pc}
    cb5a:	bf00      	nop
    cb5c:	0000b961 	.word	0x0000b961
    cb60:	0000c305 	.word	0x0000c305

0000cb64 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    cb64:	b580      	push	{r7, lr}
    cb66:	b084      	sub	sp, #16
    cb68:	af00      	add	r7, sp, #0
    cb6a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    cb6c:	687b      	ldr	r3, [r7, #4]
    cb6e:	7c9b      	ldrb	r3, [r3, #18]
    cb70:	f003 030f 	and.w	r3, r3, #15
    cb74:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    cb76:	687b      	ldr	r3, [r7, #4]
    cb78:	7cdb      	ldrb	r3, [r3, #19]
    cb7a:	f003 0307 	and.w	r3, r3, #7
    cb7e:	b2db      	uxtb	r3, r3
    cb80:	2b01      	cmp	r3, #1
    cb82:	bf0c      	ite	eq
    cb84:	2301      	moveq	r3, #1
    cb86:	2300      	movne	r3, #0
    cb88:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    cb8a:	7bbb      	ldrb	r3, [r7, #14]
    cb8c:	f083 0301 	eor.w	r3, r3, #1
    cb90:	b2db      	uxtb	r3, r3
    cb92:	2b00      	cmp	r3, #0
    cb94:	d008      	beq.n	cba8 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    cb96:	7bfb      	ldrb	r3, [r7, #15]
    cb98:	4618      	mov	r0, r3
    cb9a:	4b20      	ldr	r3, [pc, #128]	; (cc1c <_usb_d_dev_handle_setup+0xb8>)
    cb9c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    cb9e:	7bfb      	ldrb	r3, [r7, #15]
    cba0:	4618      	mov	r0, r3
    cba2:	4b1f      	ldr	r3, [pc, #124]	; (cc20 <_usb_d_dev_handle_setup+0xbc>)
    cba4:	4798      	blx	r3
		return;
    cba6:	e036      	b.n	cc16 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    cba8:	687b      	ldr	r3, [r7, #4]
    cbaa:	7cdb      	ldrb	r3, [r3, #19]
    cbac:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cbb0:	b2db      	uxtb	r3, r3
    cbb2:	2b00      	cmp	r3, #0
    cbb4:	d010      	beq.n	cbd8 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    cbb6:	687a      	ldr	r2, [r7, #4]
    cbb8:	7cd3      	ldrb	r3, [r2, #19]
    cbba:	f36f 1386 	bfc	r3, #6, #1
    cbbe:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    cbc0:	7bfb      	ldrb	r3, [r7, #15]
    cbc2:	2200      	movs	r2, #0
    cbc4:	2101      	movs	r1, #1
    cbc6:	4618      	mov	r0, r3
    cbc8:	4b16      	ldr	r3, [pc, #88]	; (cc24 <_usb_d_dev_handle_setup+0xc0>)
    cbca:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    cbcc:	7bfb      	ldrb	r3, [r7, #15]
    cbce:	2200      	movs	r2, #0
    cbd0:	2100      	movs	r1, #0
    cbd2:	4618      	mov	r0, r3
    cbd4:	4b14      	ldr	r3, [pc, #80]	; (cc28 <_usb_d_dev_handle_setup+0xc4>)
    cbd6:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    cbd8:	687a      	ldr	r2, [r7, #4]
    cbda:	7cd3      	ldrb	r3, [r2, #19]
    cbdc:	f36f 03c3 	bfc	r3, #3, #1
    cbe0:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    cbe2:	7bfb      	ldrb	r3, [r7, #15]
    cbe4:	2100      	movs	r1, #0
    cbe6:	4618      	mov	r0, r3
    cbe8:	4b10      	ldr	r3, [pc, #64]	; (cc2c <_usb_d_dev_handle_setup+0xc8>)
    cbea:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    cbec:	7bfb      	ldrb	r3, [r7, #15]
    cbee:	2101      	movs	r1, #1
    cbf0:	4618      	mov	r0, r3
    cbf2:	4b0e      	ldr	r3, [pc, #56]	; (cc2c <_usb_d_dev_handle_setup+0xc8>)
    cbf4:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    cbf6:	7bfb      	ldrb	r3, [r7, #15]
    cbf8:	216f      	movs	r1, #111	; 0x6f
    cbfa:	4618      	mov	r0, r3
    cbfc:	4b0c      	ldr	r3, [pc, #48]	; (cc30 <_usb_d_dev_handle_setup+0xcc>)
    cbfe:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    cc00:	7bfb      	ldrb	r3, [r7, #15]
    cc02:	216f      	movs	r1, #111	; 0x6f
    cc04:	4618      	mov	r0, r3
    cc06:	4b0b      	ldr	r3, [pc, #44]	; (cc34 <_usb_d_dev_handle_setup+0xd0>)
    cc08:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    cc0a:	4b0b      	ldr	r3, [pc, #44]	; (cc38 <_usb_d_dev_handle_setup+0xd4>)
    cc0c:	689b      	ldr	r3, [r3, #8]
    cc0e:	687a      	ldr	r2, [r7, #4]
    cc10:	7c92      	ldrb	r2, [r2, #18]
    cc12:	4610      	mov	r0, r2
    cc14:	4798      	blx	r3
}
    cc16:	3710      	adds	r7, #16
    cc18:	46bd      	mov	sp, r7
    cc1a:	bd80      	pop	{r7, pc}
    cc1c:	0000c009 	.word	0x0000c009
    cc20:	0000bfb5 	.word	0x0000bfb5
    cc24:	0000c2ad 	.word	0x0000c2ad
    cc28:	0000c305 	.word	0x0000c305
    cc2c:	0000c275 	.word	0x0000c275
    cc30:	0000bdb5 	.word	0x0000bdb5
    cc34:	0000be05 	.word	0x0000be05
    cc38:	200025fc 	.word	0x200025fc

0000cc3c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    cc3c:	b580      	push	{r7, lr}
    cc3e:	b084      	sub	sp, #16
    cc40:	af00      	add	r7, sp, #0
    cc42:	6078      	str	r0, [r7, #4]
    cc44:	460b      	mov	r3, r1
    cc46:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cc48:	687b      	ldr	r3, [r7, #4]
    cc4a:	7c9b      	ldrb	r3, [r3, #18]
    cc4c:	f003 030f 	and.w	r3, r3, #15
    cc50:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    cc52:	78f9      	ldrb	r1, [r7, #3]
    cc54:	7bfb      	ldrb	r3, [r7, #15]
    cc56:	2200      	movs	r2, #0
    cc58:	4618      	mov	r0, r3
    cc5a:	4b07      	ldr	r3, [pc, #28]	; (cc78 <_usb_d_dev_handle_stall+0x3c>)
    cc5c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    cc5e:	4b07      	ldr	r3, [pc, #28]	; (cc7c <_usb_d_dev_handle_stall+0x40>)
    cc60:	691b      	ldr	r3, [r3, #16]
    cc62:	687a      	ldr	r2, [r7, #4]
    cc64:	7c90      	ldrb	r0, [r2, #18]
    cc66:	687a      	ldr	r2, [r7, #4]
    cc68:	6892      	ldr	r2, [r2, #8]
    cc6a:	2101      	movs	r1, #1
    cc6c:	4798      	blx	r3
}
    cc6e:	bf00      	nop
    cc70:	3710      	adds	r7, #16
    cc72:	46bd      	mov	sp, r7
    cc74:	bd80      	pop	{r7, pc}
    cc76:	bf00      	nop
    cc78:	0000bf69 	.word	0x0000bf69
    cc7c:	200025fc 	.word	0x200025fc

0000cc80 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    cc80:	b580      	push	{r7, lr}
    cc82:	b088      	sub	sp, #32
    cc84:	af00      	add	r7, sp, #0
    cc86:	6078      	str	r0, [r7, #4]
    cc88:	460b      	mov	r3, r1
    cc8a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    cc8c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cc90:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    cc92:	687b      	ldr	r3, [r7, #4]
    cc94:	7c9b      	ldrb	r3, [r3, #18]
    cc96:	f003 030f 	and.w	r3, r3, #15
    cc9a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    cc9c:	4b61      	ldr	r3, [pc, #388]	; (ce24 <_usb_d_dev_handle_trfail+0x1a4>)
    cc9e:	881b      	ldrh	r3, [r3, #0]
    cca0:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    cca2:	7efb      	ldrb	r3, [r7, #27]
    cca4:	015b      	lsls	r3, r3, #5
    cca6:	4a60      	ldr	r2, [pc, #384]	; (ce28 <_usb_d_dev_handle_trfail+0x1a8>)
    cca8:	4413      	add	r3, r2
    ccaa:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    ccac:	78fb      	ldrb	r3, [r7, #3]
    ccae:	2b00      	cmp	r3, #0
    ccb0:	d006      	beq.n	ccc0 <_usb_d_dev_handle_trfail+0x40>
    ccb2:	7efb      	ldrb	r3, [r7, #27]
    ccb4:	4619      	mov	r1, r3
    ccb6:	69f8      	ldr	r0, [r7, #28]
    ccb8:	4b5c      	ldr	r3, [pc, #368]	; (ce2c <_usb_d_dev_handle_trfail+0x1ac>)
    ccba:	4798      	blx	r3
    ccbc:	4603      	mov	r3, r0
    ccbe:	e005      	b.n	cccc <_usb_d_dev_handle_trfail+0x4c>
    ccc0:	7efb      	ldrb	r3, [r7, #27]
    ccc2:	4619      	mov	r1, r3
    ccc4:	69f8      	ldr	r0, [r7, #28]
    ccc6:	4b5a      	ldr	r3, [pc, #360]	; (ce30 <_usb_d_dev_handle_trfail+0x1b0>)
    ccc8:	4798      	blx	r3
    ccca:	4603      	mov	r3, r0
    cccc:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    ccce:	687b      	ldr	r3, [r7, #4]
    ccd0:	7cdb      	ldrb	r3, [r3, #19]
    ccd2:	f003 0307 	and.w	r3, r3, #7
    ccd6:	b2db      	uxtb	r3, r3
    ccd8:	2b01      	cmp	r3, #1
    ccda:	bf0c      	ite	eq
    ccdc:	2301      	moveq	r3, #1
    ccde:	2300      	movne	r3, #0
    cce0:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    cce2:	78fb      	ldrb	r3, [r7, #3]
    cce4:	011b      	lsls	r3, r3, #4
    cce6:	697a      	ldr	r2, [r7, #20]
    cce8:	4413      	add	r3, r2
    ccea:	7a9b      	ldrb	r3, [r3, #10]
    ccec:	b2db      	uxtb	r3, r3
    ccee:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    ccf0:	7cfb      	ldrb	r3, [r7, #19]
    ccf2:	2b02      	cmp	r3, #2
    ccf4:	d12f      	bne.n	cd56 <_usb_d_dev_handle_trfail+0xd6>
    ccf6:	7b3b      	ldrb	r3, [r7, #12]
    ccf8:	f003 0301 	and.w	r3, r3, #1
    ccfc:	b2db      	uxtb	r3, r3
    ccfe:	2b00      	cmp	r3, #0
    cd00:	d029      	beq.n	cd56 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    cd02:	78fb      	ldrb	r3, [r7, #3]
    cd04:	011b      	lsls	r3, r3, #4
    cd06:	697a      	ldr	r2, [r7, #20]
    cd08:	441a      	add	r2, r3
    cd0a:	7a93      	ldrb	r3, [r2, #10]
    cd0c:	f36f 0300 	bfc	r3, #0, #1
    cd10:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    cd12:	78fb      	ldrb	r3, [r7, #3]
    cd14:	f107 0220 	add.w	r2, r7, #32
    cd18:	4413      	add	r3, r2
    cd1a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cd1e:	7efb      	ldrb	r3, [r7, #27]
    cd20:	4619      	mov	r1, r3
    cd22:	69f8      	ldr	r0, [r7, #28]
    cd24:	4b43      	ldr	r3, [pc, #268]	; (ce34 <_usb_d_dev_handle_trfail+0x1b4>)
    cd26:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    cd28:	78fb      	ldrb	r3, [r7, #3]
    cd2a:	f107 0220 	add.w	r2, r7, #32
    cd2e:	4413      	add	r3, r2
    cd30:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cd34:	7efb      	ldrb	r3, [r7, #27]
    cd36:	4619      	mov	r1, r3
    cd38:	69f8      	ldr	r0, [r7, #28]
    cd3a:	4b3f      	ldr	r3, [pc, #252]	; (ce38 <_usb_d_dev_handle_trfail+0x1b8>)
    cd3c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    cd3e:	78fb      	ldrb	r3, [r7, #3]
    cd40:	2b00      	cmp	r3, #0
    cd42:	bf14      	ite	ne
    cd44:	2301      	movne	r3, #1
    cd46:	2300      	moveq	r3, #0
    cd48:	b2db      	uxtb	r3, r3
    cd4a:	2204      	movs	r2, #4
    cd4c:	4619      	mov	r1, r3
    cd4e:	6878      	ldr	r0, [r7, #4]
    cd50:	4b3a      	ldr	r3, [pc, #232]	; (ce3c <_usb_d_dev_handle_trfail+0x1bc>)
    cd52:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    cd54:	e062      	b.n	ce1c <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    cd56:	7b3b      	ldrb	r3, [r7, #12]
    cd58:	f003 0302 	and.w	r3, r3, #2
    cd5c:	b2db      	uxtb	r3, r3
    cd5e:	2b00      	cmp	r3, #0
    cd60:	d040      	beq.n	cde4 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    cd62:	78fb      	ldrb	r3, [r7, #3]
    cd64:	011b      	lsls	r3, r3, #4
    cd66:	697a      	ldr	r2, [r7, #20]
    cd68:	441a      	add	r2, r3
    cd6a:	7a93      	ldrb	r3, [r2, #10]
    cd6c:	f36f 0341 	bfc	r3, #1, #1
    cd70:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    cd72:	78fb      	ldrb	r3, [r7, #3]
    cd74:	f107 0220 	add.w	r2, r7, #32
    cd78:	4413      	add	r3, r2
    cd7a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cd7e:	7efb      	ldrb	r3, [r7, #27]
    cd80:	4619      	mov	r1, r3
    cd82:	69f8      	ldr	r0, [r7, #28]
    cd84:	4b2b      	ldr	r3, [pc, #172]	; (ce34 <_usb_d_dev_handle_trfail+0x1b4>)
    cd86:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    cd88:	78fb      	ldrb	r3, [r7, #3]
    cd8a:	f107 0220 	add.w	r2, r7, #32
    cd8e:	4413      	add	r3, r2
    cd90:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cd94:	7efb      	ldrb	r3, [r7, #27]
    cd96:	4619      	mov	r1, r3
    cd98:	69f8      	ldr	r0, [r7, #28]
    cd9a:	4b27      	ldr	r3, [pc, #156]	; (ce38 <_usb_d_dev_handle_trfail+0x1b8>)
    cd9c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    cd9e:	7cbb      	ldrb	r3, [r7, #18]
    cda0:	2b00      	cmp	r3, #0
    cda2:	d03b      	beq.n	ce1c <_usb_d_dev_handle_trfail+0x19c>
    cda4:	687b      	ldr	r3, [r7, #4]
    cda6:	7cdb      	ldrb	r3, [r3, #19]
    cda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cdac:	b2db      	uxtb	r3, r3
    cdae:	2b00      	cmp	r3, #0
    cdb0:	d034      	beq.n	ce1c <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    cdb2:	687b      	ldr	r3, [r7, #4]
    cdb4:	7cdb      	ldrb	r3, [r3, #19]
    cdb6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    cdba:	b2db      	uxtb	r3, r3
    cdbc:	461a      	mov	r2, r3
    cdbe:	78fb      	ldrb	r3, [r7, #3]
    cdc0:	4293      	cmp	r3, r2
    cdc2:	d02b      	beq.n	ce1c <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    cdc4:	687b      	ldr	r3, [r7, #4]
    cdc6:	7cdb      	ldrb	r3, [r3, #19]
    cdc8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    cdcc:	b2db      	uxtb	r3, r3
    cdce:	2b00      	cmp	r3, #0
    cdd0:	bf14      	ite	ne
    cdd2:	2301      	movne	r3, #1
    cdd4:	2300      	moveq	r3, #0
    cdd6:	b2db      	uxtb	r3, r3
    cdd8:	2200      	movs	r2, #0
    cdda:	4619      	mov	r1, r3
    cddc:	6878      	ldr	r0, [r7, #4]
    cdde:	4b17      	ldr	r3, [pc, #92]	; (ce3c <_usb_d_dev_handle_trfail+0x1bc>)
    cde0:	4798      	blx	r3
}
    cde2:	e01b      	b.n	ce1c <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    cde4:	78fa      	ldrb	r2, [r7, #3]
    cde6:	7efb      	ldrb	r3, [r7, #27]
    cde8:	4611      	mov	r1, r2
    cdea:	4618      	mov	r0, r3
    cdec:	4b14      	ldr	r3, [pc, #80]	; (ce40 <_usb_d_dev_handle_trfail+0x1c0>)
    cdee:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    cdf0:	78fb      	ldrb	r3, [r7, #3]
    cdf2:	f107 0220 	add.w	r2, r7, #32
    cdf6:	4413      	add	r3, r2
    cdf8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cdfc:	7efb      	ldrb	r3, [r7, #27]
    cdfe:	4619      	mov	r1, r3
    ce00:	69f8      	ldr	r0, [r7, #28]
    ce02:	4b0c      	ldr	r3, [pc, #48]	; (ce34 <_usb_d_dev_handle_trfail+0x1b4>)
    ce04:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    ce06:	78fb      	ldrb	r3, [r7, #3]
    ce08:	f107 0220 	add.w	r2, r7, #32
    ce0c:	4413      	add	r3, r2
    ce0e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ce12:	7efb      	ldrb	r3, [r7, #27]
    ce14:	4619      	mov	r1, r3
    ce16:	69f8      	ldr	r0, [r7, #28]
    ce18:	4b07      	ldr	r3, [pc, #28]	; (ce38 <_usb_d_dev_handle_trfail+0x1b8>)
    ce1a:	4798      	blx	r3
}
    ce1c:	bf00      	nop
    ce1e:	3720      	adds	r7, #32
    ce20:	46bd      	mov	sp, r7
    ce22:	bd80      	pop	{r7, pc}
    ce24:	0001a920 	.word	0x0001a920
    ce28:	200026c4 	.word	0x200026c4
    ce2c:	0000b9e9 	.word	0x0000b9e9
    ce30:	0000b9b9 	.word	0x0000b9b9
    ce34:	0000b88d 	.word	0x0000b88d
    ce38:	0000b98d 	.word	0x0000b98d
    ce3c:	0000d9f9 	.word	0x0000d9f9
    ce40:	0000c275 	.word	0x0000c275

0000ce44 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    ce44:	b580      	push	{r7, lr}
    ce46:	b082      	sub	sp, #8
    ce48:	af00      	add	r7, sp, #0
    ce4a:	6078      	str	r0, [r7, #4]
    ce4c:	460b      	mov	r3, r1
    ce4e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    ce50:	78fb      	ldrb	r3, [r7, #3]
    ce52:	f003 0310 	and.w	r3, r3, #16
    ce56:	2b00      	cmp	r3, #0
    ce58:	d003      	beq.n	ce62 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    ce5a:	6878      	ldr	r0, [r7, #4]
    ce5c:	4b0c      	ldr	r3, [pc, #48]	; (ce90 <_usb_d_dev_trans_setup_isr+0x4c>)
    ce5e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    ce60:	e012      	b.n	ce88 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    ce62:	78fb      	ldrb	r3, [r7, #3]
    ce64:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ce68:	2b00      	cmp	r3, #0
    ce6a:	d004      	beq.n	ce76 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    ce6c:	2101      	movs	r1, #1
    ce6e:	6878      	ldr	r0, [r7, #4]
    ce70:	4b08      	ldr	r3, [pc, #32]	; (ce94 <_usb_d_dev_trans_setup_isr+0x50>)
    ce72:	4798      	blx	r3
}
    ce74:	e008      	b.n	ce88 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    ce76:	78fb      	ldrb	r3, [r7, #3]
    ce78:	f003 0320 	and.w	r3, r3, #32
    ce7c:	2b00      	cmp	r3, #0
    ce7e:	d003      	beq.n	ce88 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    ce80:	2100      	movs	r1, #0
    ce82:	6878      	ldr	r0, [r7, #4]
    ce84:	4b03      	ldr	r3, [pc, #12]	; (ce94 <_usb_d_dev_trans_setup_isr+0x50>)
    ce86:	4798      	blx	r3
}
    ce88:	bf00      	nop
    ce8a:	3708      	adds	r7, #8
    ce8c:	46bd      	mov	sp, r7
    ce8e:	bd80      	pop	{r7, pc}
    ce90:	0000cb65 	.word	0x0000cb65
    ce94:	0000cc3d 	.word	0x0000cc3d

0000ce98 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    ce98:	b580      	push	{r7, lr}
    ce9a:	b082      	sub	sp, #8
    ce9c:	af00      	add	r7, sp, #0
    ce9e:	6078      	str	r0, [r7, #4]
    cea0:	460b      	mov	r3, r1
    cea2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    cea4:	78fb      	ldrb	r3, [r7, #3]
    cea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ceaa:	2b00      	cmp	r3, #0
    ceac:	d004      	beq.n	ceb8 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    ceae:	2101      	movs	r1, #1
    ceb0:	6878      	ldr	r0, [r7, #4]
    ceb2:	4b1a      	ldr	r3, [pc, #104]	; (cf1c <_usb_d_dev_trans_in_isr+0x84>)
    ceb4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    ceb6:	e02c      	b.n	cf12 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    ceb8:	78fb      	ldrb	r3, [r7, #3]
    ceba:	f003 0308 	and.w	r3, r3, #8
    cebe:	2b00      	cmp	r3, #0
    cec0:	d004      	beq.n	cecc <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    cec2:	2101      	movs	r1, #1
    cec4:	6878      	ldr	r0, [r7, #4]
    cec6:	4b16      	ldr	r3, [pc, #88]	; (cf20 <_usb_d_dev_trans_in_isr+0x88>)
    cec8:	4798      	blx	r3
}
    ceca:	e022      	b.n	cf12 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    cecc:	78fb      	ldrb	r3, [r7, #3]
    cece:	f003 0302 	and.w	r3, r3, #2
    ced2:	2b00      	cmp	r3, #0
    ced4:	d004      	beq.n	cee0 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    ced6:	2101      	movs	r1, #1
    ced8:	6878      	ldr	r0, [r7, #4]
    ceda:	4b12      	ldr	r3, [pc, #72]	; (cf24 <_usb_d_dev_trans_in_isr+0x8c>)
    cedc:	4798      	blx	r3
}
    cede:	e018      	b.n	cf12 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    cee0:	687b      	ldr	r3, [r7, #4]
    cee2:	7cdb      	ldrb	r3, [r3, #19]
    cee4:	f003 0307 	and.w	r3, r3, #7
    cee8:	b2db      	uxtb	r3, r3
    ceea:	2b01      	cmp	r3, #1
    ceec:	d111      	bne.n	cf12 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    ceee:	78fb      	ldrb	r3, [r7, #3]
    cef0:	f003 0304 	and.w	r3, r3, #4
    cef4:	2b00      	cmp	r3, #0
    cef6:	d004      	beq.n	cf02 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    cef8:	2100      	movs	r1, #0
    cefa:	6878      	ldr	r0, [r7, #4]
    cefc:	4b08      	ldr	r3, [pc, #32]	; (cf20 <_usb_d_dev_trans_in_isr+0x88>)
    cefe:	4798      	blx	r3
}
    cf00:	e007      	b.n	cf12 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    cf02:	78fb      	ldrb	r3, [r7, #3]
    cf04:	f003 0310 	and.w	r3, r3, #16
    cf08:	2b00      	cmp	r3, #0
    cf0a:	d002      	beq.n	cf12 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    cf0c:	6878      	ldr	r0, [r7, #4]
    cf0e:	4b06      	ldr	r3, [pc, #24]	; (cf28 <_usb_d_dev_trans_in_isr+0x90>)
    cf10:	4798      	blx	r3
}
    cf12:	bf00      	nop
    cf14:	3708      	adds	r7, #8
    cf16:	46bd      	mov	sp, r7
    cf18:	bd80      	pop	{r7, pc}
    cf1a:	bf00      	nop
    cf1c:	0000cc3d 	.word	0x0000cc3d
    cf20:	0000cc81 	.word	0x0000cc81
    cf24:	0000c689 	.word	0x0000c689
    cf28:	0000cb65 	.word	0x0000cb65

0000cf2c <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    cf2c:	b580      	push	{r7, lr}
    cf2e:	b082      	sub	sp, #8
    cf30:	af00      	add	r7, sp, #0
    cf32:	6078      	str	r0, [r7, #4]
    cf34:	460b      	mov	r3, r1
    cf36:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    cf38:	78fb      	ldrb	r3, [r7, #3]
    cf3a:	f003 0320 	and.w	r3, r3, #32
    cf3e:	2b00      	cmp	r3, #0
    cf40:	d004      	beq.n	cf4c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    cf42:	2100      	movs	r1, #0
    cf44:	6878      	ldr	r0, [r7, #4]
    cf46:	4b1a      	ldr	r3, [pc, #104]	; (cfb0 <_usb_d_dev_trans_out_isr+0x84>)
    cf48:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    cf4a:	e02c      	b.n	cfa6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    cf4c:	78fb      	ldrb	r3, [r7, #3]
    cf4e:	f003 0304 	and.w	r3, r3, #4
    cf52:	2b00      	cmp	r3, #0
    cf54:	d004      	beq.n	cf60 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    cf56:	2100      	movs	r1, #0
    cf58:	6878      	ldr	r0, [r7, #4]
    cf5a:	4b16      	ldr	r3, [pc, #88]	; (cfb4 <_usb_d_dev_trans_out_isr+0x88>)
    cf5c:	4798      	blx	r3
}
    cf5e:	e022      	b.n	cfa6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    cf60:	78fb      	ldrb	r3, [r7, #3]
    cf62:	f003 0301 	and.w	r3, r3, #1
    cf66:	2b00      	cmp	r3, #0
    cf68:	d004      	beq.n	cf74 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    cf6a:	2101      	movs	r1, #1
    cf6c:	6878      	ldr	r0, [r7, #4]
    cf6e:	4b12      	ldr	r3, [pc, #72]	; (cfb8 <_usb_d_dev_trans_out_isr+0x8c>)
    cf70:	4798      	blx	r3
}
    cf72:	e018      	b.n	cfa6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    cf74:	687b      	ldr	r3, [r7, #4]
    cf76:	7cdb      	ldrb	r3, [r3, #19]
    cf78:	f003 0307 	and.w	r3, r3, #7
    cf7c:	b2db      	uxtb	r3, r3
    cf7e:	2b01      	cmp	r3, #1
    cf80:	d111      	bne.n	cfa6 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    cf82:	78fb      	ldrb	r3, [r7, #3]
    cf84:	f003 0308 	and.w	r3, r3, #8
    cf88:	2b00      	cmp	r3, #0
    cf8a:	d004      	beq.n	cf96 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    cf8c:	2101      	movs	r1, #1
    cf8e:	6878      	ldr	r0, [r7, #4]
    cf90:	4b08      	ldr	r3, [pc, #32]	; (cfb4 <_usb_d_dev_trans_out_isr+0x88>)
    cf92:	4798      	blx	r3
}
    cf94:	e007      	b.n	cfa6 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    cf96:	78fb      	ldrb	r3, [r7, #3]
    cf98:	f003 0310 	and.w	r3, r3, #16
    cf9c:	2b00      	cmp	r3, #0
    cf9e:	d002      	beq.n	cfa6 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    cfa0:	6878      	ldr	r0, [r7, #4]
    cfa2:	4b06      	ldr	r3, [pc, #24]	; (cfbc <_usb_d_dev_trans_out_isr+0x90>)
    cfa4:	4798      	blx	r3
}
    cfa6:	bf00      	nop
    cfa8:	3708      	adds	r7, #8
    cfaa:	46bd      	mov	sp, r7
    cfac:	bd80      	pop	{r7, pc}
    cfae:	bf00      	nop
    cfb0:	0000cc3d 	.word	0x0000cc3d
    cfb4:	0000cc81 	.word	0x0000cc81
    cfb8:	0000c8a1 	.word	0x0000c8a1
    cfbc:	0000cb65 	.word	0x0000cb65

0000cfc0 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    cfc0:	b580      	push	{r7, lr}
    cfc2:	b084      	sub	sp, #16
    cfc4:	af00      	add	r7, sp, #0
    cfc6:	6078      	str	r0, [r7, #4]
    cfc8:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    cfca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cfce:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cfd0:	683b      	ldr	r3, [r7, #0]
    cfd2:	7c9b      	ldrb	r3, [r3, #18]
    cfd4:	f003 030f 	and.w	r3, r3, #15
    cfd8:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    cfda:	7afb      	ldrb	r3, [r7, #11]
    cfdc:	2201      	movs	r2, #1
    cfde:	409a      	lsls	r2, r3
    cfe0:	687b      	ldr	r3, [r7, #4]
    cfe2:	4013      	ands	r3, r2
    cfe4:	2b00      	cmp	r3, #0
    cfe6:	d03d      	beq.n	d064 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    cfe8:	7afb      	ldrb	r3, [r7, #11]
    cfea:	68fa      	ldr	r2, [r7, #12]
    cfec:	3308      	adds	r3, #8
    cfee:	015b      	lsls	r3, r3, #5
    cff0:	4413      	add	r3, r2
    cff2:	3307      	adds	r3, #7
    cff4:	781b      	ldrb	r3, [r3, #0]
    cff6:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    cff8:	7afb      	ldrb	r3, [r7, #11]
    cffa:	68fa      	ldr	r2, [r7, #12]
    cffc:	015b      	lsls	r3, r3, #5
    cffe:	4413      	add	r3, r2
    d000:	f203 1309 	addw	r3, r3, #265	; 0x109
    d004:	781b      	ldrb	r3, [r3, #0]
    d006:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    d008:	7aba      	ldrb	r2, [r7, #10]
    d00a:	7a7b      	ldrb	r3, [r7, #9]
    d00c:	4013      	ands	r3, r2
    d00e:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    d010:	7abb      	ldrb	r3, [r7, #10]
    d012:	2b00      	cmp	r3, #0
    d014:	d027      	beq.n	d066 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    d016:	683b      	ldr	r3, [r7, #0]
    d018:	7cdb      	ldrb	r3, [r3, #19]
    d01a:	f003 0307 	and.w	r3, r3, #7
    d01e:	b2db      	uxtb	r3, r3
    d020:	2b01      	cmp	r3, #1
    d022:	d10c      	bne.n	d03e <_usb_d_dev_handle_eps+0x7e>
    d024:	683b      	ldr	r3, [r7, #0]
    d026:	7cdb      	ldrb	r3, [r3, #19]
    d028:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d02c:	b2db      	uxtb	r3, r3
    d02e:	2b00      	cmp	r3, #0
    d030:	d105      	bne.n	d03e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    d032:	7abb      	ldrb	r3, [r7, #10]
    d034:	4619      	mov	r1, r3
    d036:	6838      	ldr	r0, [r7, #0]
    d038:	4b0c      	ldr	r3, [pc, #48]	; (d06c <_usb_d_dev_handle_eps+0xac>)
    d03a:	4798      	blx	r3
    d03c:	e013      	b.n	d066 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    d03e:	683b      	ldr	r3, [r7, #0]
    d040:	7cdb      	ldrb	r3, [r3, #19]
    d042:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    d046:	b2db      	uxtb	r3, r3
    d048:	2b00      	cmp	r3, #0
    d04a:	d005      	beq.n	d058 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    d04c:	7abb      	ldrb	r3, [r7, #10]
    d04e:	4619      	mov	r1, r3
    d050:	6838      	ldr	r0, [r7, #0]
    d052:	4b07      	ldr	r3, [pc, #28]	; (d070 <_usb_d_dev_handle_eps+0xb0>)
    d054:	4798      	blx	r3
    d056:	e006      	b.n	d066 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    d058:	7abb      	ldrb	r3, [r7, #10]
    d05a:	4619      	mov	r1, r3
    d05c:	6838      	ldr	r0, [r7, #0]
    d05e:	4b05      	ldr	r3, [pc, #20]	; (d074 <_usb_d_dev_handle_eps+0xb4>)
    d060:	4798      	blx	r3
    d062:	e000      	b.n	d066 <_usb_d_dev_handle_eps+0xa6>
		return;
    d064:	bf00      	nop
		}
	}
}
    d066:	3710      	adds	r7, #16
    d068:	46bd      	mov	sp, r7
    d06a:	bd80      	pop	{r7, pc}
    d06c:	0000ce45 	.word	0x0000ce45
    d070:	0000ce99 	.word	0x0000ce99
    d074:	0000cf2d 	.word	0x0000cf2d

0000d078 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    d078:	b580      	push	{r7, lr}
    d07a:	b084      	sub	sp, #16
    d07c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    d07e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d082:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    d084:	68bb      	ldr	r3, [r7, #8]
    d086:	8c1b      	ldrh	r3, [r3, #32]
    d088:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    d08a:	88fb      	ldrh	r3, [r7, #6]
    d08c:	2b00      	cmp	r3, #0
    d08e:	d104      	bne.n	d09a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    d090:	4b13      	ldr	r3, [pc, #76]	; (d0e0 <_usb_d_dev_handler+0x68>)
    d092:	4798      	blx	r3
    d094:	4603      	mov	r3, r0
    d096:	2b00      	cmp	r3, #0
    d098:	d11e      	bne.n	d0d8 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    d09a:	2300      	movs	r3, #0
    d09c:	73fb      	strb	r3, [r7, #15]
    d09e:	e017      	b.n	d0d0 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    d0a0:	7bfa      	ldrb	r2, [r7, #15]
    d0a2:	4613      	mov	r3, r2
    d0a4:	009b      	lsls	r3, r3, #2
    d0a6:	4413      	add	r3, r2
    d0a8:	009b      	lsls	r3, r3, #2
    d0aa:	3310      	adds	r3, #16
    d0ac:	4a0d      	ldr	r2, [pc, #52]	; (d0e4 <_usb_d_dev_handler+0x6c>)
    d0ae:	4413      	add	r3, r2
    d0b0:	3304      	adds	r3, #4
    d0b2:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    d0b4:	683b      	ldr	r3, [r7, #0]
    d0b6:	7c9b      	ldrb	r3, [r3, #18]
    d0b8:	2bff      	cmp	r3, #255	; 0xff
    d0ba:	d005      	beq.n	d0c8 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    d0bc:	88fb      	ldrh	r3, [r7, #6]
    d0be:	6839      	ldr	r1, [r7, #0]
    d0c0:	4618      	mov	r0, r3
    d0c2:	4b09      	ldr	r3, [pc, #36]	; (d0e8 <_usb_d_dev_handler+0x70>)
    d0c4:	4798      	blx	r3
    d0c6:	e000      	b.n	d0ca <_usb_d_dev_handler+0x52>
			continue;
    d0c8:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    d0ca:	7bfb      	ldrb	r3, [r7, #15]
    d0cc:	3301      	adds	r3, #1
    d0ce:	73fb      	strb	r3, [r7, #15]
    d0d0:	7bfb      	ldrb	r3, [r7, #15]
    d0d2:	2b08      	cmp	r3, #8
    d0d4:	d9e4      	bls.n	d0a0 <_usb_d_dev_handler+0x28>
    d0d6:	e000      	b.n	d0da <_usb_d_dev_handler+0x62>
			return;
    d0d8:	bf00      	nop
	}
}
    d0da:	3710      	adds	r7, #16
    d0dc:	46bd      	mov	sp, r7
    d0de:	bd80      	pop	{r7, pc}
    d0e0:	0000c5d1 	.word	0x0000c5d1
    d0e4:	200025fc 	.word	0x200025fc
    d0e8:	0000cfc1 	.word	0x0000cfc1

0000d0ec <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    d0ec:	b580      	push	{r7, lr}
    d0ee:	b082      	sub	sp, #8
    d0f0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    d0f2:	2300      	movs	r3, #0
    d0f4:	71fb      	strb	r3, [r7, #7]
    d0f6:	e023      	b.n	d140 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    d0f8:	79fa      	ldrb	r2, [r7, #7]
    d0fa:	4613      	mov	r3, r2
    d0fc:	009b      	lsls	r3, r3, #2
    d0fe:	4413      	add	r3, r2
    d100:	009b      	lsls	r3, r3, #2
    d102:	3310      	adds	r3, #16
    d104:	4a14      	ldr	r2, [pc, #80]	; (d158 <_usb_d_dev_reset_epts+0x6c>)
    d106:	4413      	add	r3, r2
    d108:	3304      	adds	r3, #4
    d10a:	2103      	movs	r1, #3
    d10c:	4618      	mov	r0, r3
    d10e:	4b13      	ldr	r3, [pc, #76]	; (d15c <_usb_d_dev_reset_epts+0x70>)
    d110:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    d112:	79fa      	ldrb	r2, [r7, #7]
    d114:	4910      	ldr	r1, [pc, #64]	; (d158 <_usb_d_dev_reset_epts+0x6c>)
    d116:	4613      	mov	r3, r2
    d118:	009b      	lsls	r3, r3, #2
    d11a:	4413      	add	r3, r2
    d11c:	009b      	lsls	r3, r3, #2
    d11e:	440b      	add	r3, r1
    d120:	3326      	adds	r3, #38	; 0x26
    d122:	22ff      	movs	r2, #255	; 0xff
    d124:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    d126:	79fa      	ldrb	r2, [r7, #7]
    d128:	490b      	ldr	r1, [pc, #44]	; (d158 <_usb_d_dev_reset_epts+0x6c>)
    d12a:	4613      	mov	r3, r2
    d12c:	009b      	lsls	r3, r3, #2
    d12e:	4413      	add	r3, r2
    d130:	009b      	lsls	r3, r3, #2
    d132:	440b      	add	r3, r1
    d134:	3327      	adds	r3, #39	; 0x27
    d136:	2200      	movs	r2, #0
    d138:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    d13a:	79fb      	ldrb	r3, [r7, #7]
    d13c:	3301      	adds	r3, #1
    d13e:	71fb      	strb	r3, [r7, #7]
    d140:	79fb      	ldrb	r3, [r7, #7]
    d142:	2b08      	cmp	r3, #8
    d144:	d9d8      	bls.n	d0f8 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    d146:	22a0      	movs	r2, #160	; 0xa0
    d148:	2100      	movs	r1, #0
    d14a:	4805      	ldr	r0, [pc, #20]	; (d160 <_usb_d_dev_reset_epts+0x74>)
    d14c:	4b05      	ldr	r3, [pc, #20]	; (d164 <_usb_d_dev_reset_epts+0x78>)
    d14e:	4798      	blx	r3
}
    d150:	bf00      	nop
    d152:	3708      	adds	r7, #8
    d154:	46bd      	mov	sp, r7
    d156:	bd80      	pop	{r7, pc}
    d158:	200025fc 	.word	0x200025fc
    d15c:	0000d9b1 	.word	0x0000d9b1
    d160:	200026c4 	.word	0x200026c4
    d164:	00016451 	.word	0x00016451

0000d168 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    d168:	b580      	push	{r7, lr}
    d16a:	b084      	sub	sp, #16
    d16c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    d16e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d172:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    d174:	2301      	movs	r3, #1
    d176:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    d178:	2304      	movs	r3, #4
    d17a:	713b      	strb	r3, [r7, #4]
    d17c:	2300      	movs	r3, #0
    d17e:	717b      	strb	r3, [r7, #5]
    d180:	2300      	movs	r3, #0
    d182:	71bb      	strb	r3, [r7, #6]
    d184:	2300      	movs	r3, #0
    d186:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    d188:	2101      	movs	r1, #1
    d18a:	68f8      	ldr	r0, [r7, #12]
    d18c:	4b26      	ldr	r3, [pc, #152]	; (d228 <_usb_d_dev_init+0xc0>)
    d18e:	4798      	blx	r3
    d190:	4603      	mov	r3, r0
    d192:	f083 0301 	eor.w	r3, r3, #1
    d196:	b2db      	uxtb	r3, r3
    d198:	2b00      	cmp	r3, #0
    d19a:	d011      	beq.n	d1c0 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    d19c:	2102      	movs	r1, #2
    d19e:	68f8      	ldr	r0, [r7, #12]
    d1a0:	4b22      	ldr	r3, [pc, #136]	; (d22c <_usb_d_dev_init+0xc4>)
    d1a2:	4798      	blx	r3
    d1a4:	4603      	mov	r3, r0
    d1a6:	2b00      	cmp	r3, #0
    d1a8:	d006      	beq.n	d1b8 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    d1aa:	68f8      	ldr	r0, [r7, #12]
    d1ac:	4b20      	ldr	r3, [pc, #128]	; (d230 <_usb_d_dev_init+0xc8>)
    d1ae:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    d1b0:	2102      	movs	r1, #2
    d1b2:	68f8      	ldr	r0, [r7, #12]
    d1b4:	4b1f      	ldr	r3, [pc, #124]	; (d234 <_usb_d_dev_init+0xcc>)
    d1b6:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    d1b8:	2101      	movs	r1, #1
    d1ba:	68f8      	ldr	r0, [r7, #12]
    d1bc:	4b1e      	ldr	r3, [pc, #120]	; (d238 <_usb_d_dev_init+0xd0>)
    d1be:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    d1c0:	2101      	movs	r1, #1
    d1c2:	68f8      	ldr	r0, [r7, #12]
    d1c4:	4b1b      	ldr	r3, [pc, #108]	; (d234 <_usb_d_dev_init+0xcc>)
    d1c6:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    d1c8:	4b1c      	ldr	r3, [pc, #112]	; (d23c <_usb_d_dev_init+0xd4>)
    d1ca:	4a1d      	ldr	r2, [pc, #116]	; (d240 <_usb_d_dev_init+0xd8>)
    d1cc:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    d1ce:	4b1b      	ldr	r3, [pc, #108]	; (d23c <_usb_d_dev_init+0xd4>)
    d1d0:	4a1b      	ldr	r2, [pc, #108]	; (d240 <_usb_d_dev_init+0xd8>)
    d1d2:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    d1d4:	4b19      	ldr	r3, [pc, #100]	; (d23c <_usb_d_dev_init+0xd4>)
    d1d6:	4a1a      	ldr	r2, [pc, #104]	; (d240 <_usb_d_dev_init+0xd8>)
    d1d8:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    d1da:	4b18      	ldr	r3, [pc, #96]	; (d23c <_usb_d_dev_init+0xd4>)
    d1dc:	4a18      	ldr	r2, [pc, #96]	; (d240 <_usb_d_dev_init+0xd8>)
    d1de:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    d1e0:	4b16      	ldr	r3, [pc, #88]	; (d23c <_usb_d_dev_init+0xd4>)
    d1e2:	4a17      	ldr	r2, [pc, #92]	; (d240 <_usb_d_dev_init+0xd8>)
    d1e4:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    d1e6:	4b17      	ldr	r3, [pc, #92]	; (d244 <_usb_d_dev_init+0xdc>)
    d1e8:	4798      	blx	r3

	_usb_load_calib();
    d1ea:	4b17      	ldr	r3, [pc, #92]	; (d248 <_usb_d_dev_init+0xe0>)
    d1ec:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    d1ee:	2104      	movs	r1, #4
    d1f0:	68f8      	ldr	r0, [r7, #12]
    d1f2:	4b11      	ldr	r3, [pc, #68]	; (d238 <_usb_d_dev_init+0xd0>)
    d1f4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    d1f6:	4b15      	ldr	r3, [pc, #84]	; (d24c <_usb_d_dev_init+0xe4>)
    d1f8:	4619      	mov	r1, r3
    d1fa:	68f8      	ldr	r0, [r7, #12]
    d1fc:	4b14      	ldr	r3, [pc, #80]	; (d250 <_usb_d_dev_init+0xe8>)
    d1fe:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    d200:	7afb      	ldrb	r3, [r7, #11]
    d202:	f107 0210 	add.w	r2, r7, #16
    d206:	4413      	add	r3, r2
    d208:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    d20c:	f043 0301 	orr.w	r3, r3, #1
    d210:	b2db      	uxtb	r3, r3
    d212:	b29b      	uxth	r3, r3
    d214:	4619      	mov	r1, r3
    d216:	68f8      	ldr	r0, [r7, #12]
    d218:	4b0e      	ldr	r3, [pc, #56]	; (d254 <_usb_d_dev_init+0xec>)
    d21a:	4798      	blx	r3

	return ERR_NONE;
    d21c:	2300      	movs	r3, #0
}
    d21e:	4618      	mov	r0, r3
    d220:	3710      	adds	r7, #16
    d222:	46bd      	mov	sp, r7
    d224:	bd80      	pop	{r7, pc}
    d226:	bf00      	nop
    d228:	0000b801 	.word	0x0000b801
    d22c:	0000bb51 	.word	0x0000bb51
    d230:	0000bb25 	.word	0x0000bb25
    d234:	0000b7d7 	.word	0x0000b7d7
    d238:	0000bb81 	.word	0x0000bb81
    d23c:	200025fc 	.word	0x200025fc
    d240:	0000bc49 	.word	0x0000bc49
    d244:	0000d0ed 	.word	0x0000d0ed
    d248:	0000bc61 	.word	0x0000bc61
    d24c:	200026c4 	.word	0x200026c4
    d250:	0000bc2d 	.word	0x0000bc2d
    d254:	0000bbf1 	.word	0x0000bbf1

0000d258 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    d258:	b580      	push	{r7, lr}
    d25a:	b082      	sub	sp, #8
    d25c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    d25e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d262:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    d264:	2103      	movs	r1, #3
    d266:	6878      	ldr	r0, [r7, #4]
    d268:	4b17      	ldr	r3, [pc, #92]	; (d2c8 <_usb_d_dev_enable+0x70>)
    d26a:	4798      	blx	r3
    d26c:	4603      	mov	r3, r0
    d26e:	2b00      	cmp	r3, #0
    d270:	d002      	beq.n	d278 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    d272:	f06f 0310 	mvn.w	r3, #16
    d276:	e023      	b.n	d2c0 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    d278:	6878      	ldr	r0, [r7, #4]
    d27a:	4b14      	ldr	r3, [pc, #80]	; (d2cc <_usb_d_dev_enable+0x74>)
    d27c:	4798      	blx	r3
    d27e:	4603      	mov	r3, r0
    d280:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    d282:	78fb      	ldrb	r3, [r7, #3]
    d284:	f003 0302 	and.w	r3, r3, #2
    d288:	2b00      	cmp	r3, #0
    d28a:	d107      	bne.n	d29c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    d28c:	78fb      	ldrb	r3, [r7, #3]
    d28e:	f043 0302 	orr.w	r3, r3, #2
    d292:	b2db      	uxtb	r3, r3
    d294:	4619      	mov	r1, r3
    d296:	6878      	ldr	r0, [r7, #4]
    d298:	4b0d      	ldr	r3, [pc, #52]	; (d2d0 <_usb_d_dev_enable+0x78>)
    d29a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    d29c:	2050      	movs	r0, #80	; 0x50
    d29e:	4b0d      	ldr	r3, [pc, #52]	; (d2d4 <_usb_d_dev_enable+0x7c>)
    d2a0:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    d2a2:	2051      	movs	r0, #81	; 0x51
    d2a4:	4b0b      	ldr	r3, [pc, #44]	; (d2d4 <_usb_d_dev_enable+0x7c>)
    d2a6:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    d2a8:	2052      	movs	r0, #82	; 0x52
    d2aa:	4b0a      	ldr	r3, [pc, #40]	; (d2d4 <_usb_d_dev_enable+0x7c>)
    d2ac:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    d2ae:	2053      	movs	r0, #83	; 0x53
    d2b0:	4b08      	ldr	r3, [pc, #32]	; (d2d4 <_usb_d_dev_enable+0x7c>)
    d2b2:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    d2b4:	f240 218d 	movw	r1, #653	; 0x28d
    d2b8:	6878      	ldr	r0, [r7, #4]
    d2ba:	4b07      	ldr	r3, [pc, #28]	; (d2d8 <_usb_d_dev_enable+0x80>)
    d2bc:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    d2be:	2300      	movs	r3, #0
}
    d2c0:	4618      	mov	r0, r3
    d2c2:	3708      	adds	r7, #8
    d2c4:	46bd      	mov	sp, r7
    d2c6:	bd80      	pop	{r7, pc}
    d2c8:	0000bafb 	.word	0x0000bafb
    d2cc:	0000bba9 	.word	0x0000bba9
    d2d0:	0000bb81 	.word	0x0000bb81
    d2d4:	0000b70d 	.word	0x0000b70d
    d2d8:	0000baa5 	.word	0x0000baa5

0000d2dc <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    d2dc:	b580      	push	{r7, lr}
    d2de:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    d2e0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d2e4:	4b01      	ldr	r3, [pc, #4]	; (d2ec <_usb_d_dev_attach+0x10>)
    d2e6:	4798      	blx	r3
}
    d2e8:	bf00      	nop
    d2ea:	bd80      	pop	{r7, pc}
    d2ec:	0000bbcd 	.word	0x0000bbcd

0000d2f0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    d2f0:	b580      	push	{r7, lr}
    d2f2:	b082      	sub	sp, #8
    d2f4:	af00      	add	r7, sp, #0
    d2f6:	4603      	mov	r3, r0
    d2f8:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    d2fa:	79fb      	ldrb	r3, [r7, #7]
    d2fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d300:	b2db      	uxtb	r3, r3
    d302:	4619      	mov	r1, r3
    d304:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d308:	4b02      	ldr	r3, [pc, #8]	; (d314 <_usb_d_dev_set_address+0x24>)
    d30a:	4798      	blx	r3
}
    d30c:	bf00      	nop
    d30e:	3708      	adds	r7, #8
    d310:	46bd      	mov	sp, r7
    d312:	bd80      	pop	{r7, pc}
    d314:	0000bc0f 	.word	0x0000bc0f

0000d318 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    d318:	b590      	push	{r4, r7, lr}
    d31a:	b085      	sub	sp, #20
    d31c:	af00      	add	r7, sp, #0
    d31e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    d320:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d324:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d326:	687b      	ldr	r3, [r7, #4]
    d328:	7c9b      	ldrb	r3, [r3, #18]
    d32a:	f003 030f 	and.w	r3, r3, #15
    d32e:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    d330:	687b      	ldr	r3, [r7, #4]
    d332:	68db      	ldr	r3, [r3, #12]
    d334:	461a      	mov	r2, r3
    d336:	7afb      	ldrb	r3, [r7, #11]
    d338:	2100      	movs	r1, #0
    d33a:	4618      	mov	r0, r3
    d33c:	4b0f      	ldr	r3, [pc, #60]	; (d37c <_usb_d_dev_trans_setup+0x64>)
    d33e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    d340:	687b      	ldr	r3, [r7, #4]
    d342:	8a1b      	ldrh	r3, [r3, #16]
    d344:	461a      	mov	r2, r3
    d346:	7af8      	ldrb	r0, [r7, #11]
    d348:	2300      	movs	r3, #0
    d34a:	2100      	movs	r1, #0
    d34c:	4c0c      	ldr	r4, [pc, #48]	; (d380 <_usb_d_dev_trans_setup+0x68>)
    d34e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    d350:	7afb      	ldrb	r3, [r7, #11]
    d352:	22b0      	movs	r2, #176	; 0xb0
    d354:	4619      	mov	r1, r3
    d356:	68f8      	ldr	r0, [r7, #12]
    d358:	4b0a      	ldr	r3, [pc, #40]	; (d384 <_usb_d_dev_trans_setup+0x6c>)
    d35a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    d35c:	7afb      	ldrb	r3, [r7, #11]
    d35e:	2200      	movs	r2, #0
    d360:	2100      	movs	r1, #0
    d362:	4618      	mov	r0, r3
    d364:	4b08      	ldr	r3, [pc, #32]	; (d388 <_usb_d_dev_trans_setup+0x70>)
    d366:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    d368:	7afb      	ldrb	r3, [r7, #11]
    d36a:	2210      	movs	r2, #16
    d36c:	4619      	mov	r1, r3
    d36e:	68f8      	ldr	r0, [r7, #12]
    d370:	4b06      	ldr	r3, [pc, #24]	; (d38c <_usb_d_dev_trans_setup+0x74>)
    d372:	4798      	blx	r3
}
    d374:	bf00      	nop
    d376:	3714      	adds	r7, #20
    d378:	46bd      	mov	sp, r7
    d37a:	bd90      	pop	{r4, r7, pc}
    d37c:	0000c0ad 	.word	0x0000c0ad
    d380:	0000c235 	.word	0x0000c235
    d384:	0000b90d 	.word	0x0000b90d
    d388:	0000c305 	.word	0x0000c305
    d38c:	0000b961 	.word	0x0000b961

0000d390 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    d390:	b580      	push	{r7, lr}
    d392:	b088      	sub	sp, #32
    d394:	af00      	add	r7, sp, #0
    d396:	4603      	mov	r3, r0
    d398:	71fb      	strb	r3, [r7, #7]
    d39a:	460b      	mov	r3, r1
    d39c:	71bb      	strb	r3, [r7, #6]
    d39e:	4613      	mov	r3, r2
    d3a0:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    d3a2:	79fb      	ldrb	r3, [r7, #7]
    d3a4:	f003 030f 	and.w	r3, r3, #15
    d3a8:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    d3aa:	79fb      	ldrb	r3, [r7, #7]
    d3ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d3b0:	2b00      	cmp	r3, #0
    d3b2:	bf14      	ite	ne
    d3b4:	2301      	movne	r3, #1
    d3b6:	2300      	moveq	r3, #0
    d3b8:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d3ba:	7fba      	ldrb	r2, [r7, #30]
    d3bc:	7ffb      	ldrb	r3, [r7, #31]
    d3be:	4611      	mov	r1, r2
    d3c0:	4618      	mov	r0, r3
    d3c2:	4b3e      	ldr	r3, [pc, #248]	; (d4bc <_usb_d_dev_ep_init+0x12c>)
    d3c4:	4798      	blx	r3
    d3c6:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    d3c8:	79bb      	ldrb	r3, [r7, #6]
    d3ca:	f003 0303 	and.w	r3, r3, #3
    d3ce:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    d3d0:	7ffa      	ldrb	r2, [r7, #31]
    d3d2:	4613      	mov	r3, r2
    d3d4:	005b      	lsls	r3, r3, #1
    d3d6:	4413      	add	r3, r2
    d3d8:	009b      	lsls	r3, r3, #2
    d3da:	4a39      	ldr	r2, [pc, #228]	; (d4c0 <_usb_d_dev_ep_init+0x130>)
    d3dc:	4413      	add	r3, r2
    d3de:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    d3e0:	7ffb      	ldrb	r3, [r7, #31]
    d3e2:	2b04      	cmp	r3, #4
    d3e4:	d902      	bls.n	d3ec <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    d3e6:	f06f 0311 	mvn.w	r3, #17
    d3ea:	e063      	b.n	d4b4 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    d3ec:	69bb      	ldr	r3, [r7, #24]
    d3ee:	7c9b      	ldrb	r3, [r3, #18]
    d3f0:	2bff      	cmp	r3, #255	; 0xff
    d3f2:	d002      	beq.n	d3fa <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    d3f4:	f06f 0313 	mvn.w	r3, #19
    d3f8:	e05c      	b.n	d4b4 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    d3fa:	7dfb      	ldrb	r3, [r7, #23]
    d3fc:	2b00      	cmp	r3, #0
    d3fe:	d11f      	bne.n	d440 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    d400:	7fbb      	ldrb	r3, [r7, #30]
    d402:	2b00      	cmp	r3, #0
    d404:	bf14      	ite	ne
    d406:	2301      	movne	r3, #1
    d408:	2300      	moveq	r3, #0
    d40a:	b2db      	uxtb	r3, r3
    d40c:	f083 0301 	eor.w	r3, r3, #1
    d410:	b2db      	uxtb	r3, r3
    d412:	f003 0301 	and.w	r3, r3, #1
    d416:	b2da      	uxtb	r2, r3
    d418:	7ffb      	ldrb	r3, [r7, #31]
    d41a:	4611      	mov	r1, r2
    d41c:	4618      	mov	r0, r3
    d41e:	4b27      	ldr	r3, [pc, #156]	; (d4bc <_usb_d_dev_ep_init+0x12c>)
    d420:	4798      	blx	r3
    d422:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    d424:	68fb      	ldr	r3, [r7, #12]
    d426:	7c9b      	ldrb	r3, [r3, #18]
    d428:	2bff      	cmp	r3, #255	; 0xff
    d42a:	d002      	beq.n	d432 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    d42c:	f06f 0313 	mvn.w	r3, #19
    d430:	e040      	b.n	d4b4 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    d432:	693b      	ldr	r3, [r7, #16]
    d434:	681b      	ldr	r3, [r3, #0]
    d436:	2b00      	cmp	r3, #0
    d438:	d102      	bne.n	d440 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    d43a:	f06f 0312 	mvn.w	r3, #18
    d43e:	e039      	b.n	d4b4 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    d440:	7fbb      	ldrb	r3, [r7, #30]
    d442:	2b00      	cmp	r3, #0
    d444:	d007      	beq.n	d456 <_usb_d_dev_ep_init+0xc6>
    d446:	693b      	ldr	r3, [r7, #16]
    d448:	685b      	ldr	r3, [r3, #4]
    d44a:	2b00      	cmp	r3, #0
    d44c:	bf14      	ite	ne
    d44e:	2301      	movne	r3, #1
    d450:	2300      	moveq	r3, #0
    d452:	b2db      	uxtb	r3, r3
    d454:	e006      	b.n	d464 <_usb_d_dev_ep_init+0xd4>
    d456:	693b      	ldr	r3, [r7, #16]
    d458:	681b      	ldr	r3, [r3, #0]
    d45a:	2b00      	cmp	r3, #0
    d45c:	bf14      	ite	ne
    d45e:	2301      	movne	r3, #1
    d460:	2300      	moveq	r3, #0
    d462:	b2db      	uxtb	r3, r3
    d464:	2b00      	cmp	r3, #0
    d466:	d00f      	beq.n	d488 <_usb_d_dev_ep_init+0xf8>
    d468:	7fbb      	ldrb	r3, [r7, #30]
    d46a:	2b00      	cmp	r3, #0
    d46c:	d003      	beq.n	d476 <_usb_d_dev_ep_init+0xe6>
    d46e:	693b      	ldr	r3, [r7, #16]
    d470:	895b      	ldrh	r3, [r3, #10]
    d472:	461a      	mov	r2, r3
    d474:	e002      	b.n	d47c <_usb_d_dev_ep_init+0xec>
    d476:	693b      	ldr	r3, [r7, #16]
    d478:	891b      	ldrh	r3, [r3, #8]
    d47a:	461a      	mov	r2, r3
    d47c:	88bb      	ldrh	r3, [r7, #4]
    d47e:	429a      	cmp	r2, r3
    d480:	da02      	bge.n	d488 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    d482:	f06f 0312 	mvn.w	r3, #18
    d486:	e015      	b.n	d4b4 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    d488:	7fbb      	ldrb	r3, [r7, #30]
    d48a:	2b00      	cmp	r3, #0
    d48c:	d002      	beq.n	d494 <_usb_d_dev_ep_init+0x104>
    d48e:	693b      	ldr	r3, [r7, #16]
    d490:	685b      	ldr	r3, [r3, #4]
    d492:	e001      	b.n	d498 <_usb_d_dev_ep_init+0x108>
    d494:	693b      	ldr	r3, [r7, #16]
    d496:	681b      	ldr	r3, [r3, #0]
    d498:	69ba      	ldr	r2, [r7, #24]
    d49a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    d49c:	69bb      	ldr	r3, [r7, #24]
    d49e:	88ba      	ldrh	r2, [r7, #4]
    d4a0:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    d4a2:	7dfb      	ldrb	r3, [r7, #23]
    d4a4:	3301      	adds	r3, #1
    d4a6:	b2da      	uxtb	r2, r3
    d4a8:	69bb      	ldr	r3, [r7, #24]
    d4aa:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    d4ac:	69bb      	ldr	r3, [r7, #24]
    d4ae:	79fa      	ldrb	r2, [r7, #7]
    d4b0:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    d4b2:	2300      	movs	r3, #0
}
    d4b4:	4618      	mov	r0, r3
    d4b6:	3720      	adds	r7, #32
    d4b8:	46bd      	mov	sp, r7
    d4ba:	bd80      	pop	{r7, pc}
    d4bc:	0000c3c1 	.word	0x0000c3c1
    d4c0:	0001a8e4 	.word	0x0001a8e4

0000d4c4 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    d4c4:	b580      	push	{r7, lr}
    d4c6:	b086      	sub	sp, #24
    d4c8:	af00      	add	r7, sp, #0
    d4ca:	4603      	mov	r3, r0
    d4cc:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    d4ce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d4d2:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    d4d4:	79fb      	ldrb	r3, [r7, #7]
    d4d6:	f003 030f 	and.w	r3, r3, #15
    d4da:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    d4dc:	79fb      	ldrb	r3, [r7, #7]
    d4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d4e2:	2b00      	cmp	r3, #0
    d4e4:	bf14      	ite	ne
    d4e6:	2301      	movne	r3, #1
    d4e8:	2300      	moveq	r3, #0
    d4ea:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d4ec:	7cba      	ldrb	r2, [r7, #18]
    d4ee:	7cfb      	ldrb	r3, [r7, #19]
    d4f0:	4611      	mov	r1, r2
    d4f2:	4618      	mov	r0, r3
    d4f4:	4b2a      	ldr	r3, [pc, #168]	; (d5a0 <_usb_d_dev_ep_deinit+0xdc>)
    d4f6:	4798      	blx	r3
    d4f8:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    d4fa:	7cfb      	ldrb	r3, [r7, #19]
    d4fc:	2b04      	cmp	r3, #4
    d4fe:	d84a      	bhi.n	d596 <_usb_d_dev_ep_deinit+0xd2>
    d500:	68fb      	ldr	r3, [r7, #12]
    d502:	7c9b      	ldrb	r3, [r3, #18]
    d504:	2bff      	cmp	r3, #255	; 0xff
    d506:	d046      	beq.n	d596 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    d508:	7cbb      	ldrb	r3, [r7, #18]
    d50a:	2203      	movs	r2, #3
    d50c:	4619      	mov	r1, r3
    d50e:	68f8      	ldr	r0, [r7, #12]
    d510:	4b24      	ldr	r3, [pc, #144]	; (d5a4 <_usb_d_dev_ep_deinit+0xe0>)
    d512:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    d514:	68fb      	ldr	r3, [r7, #12]
    d516:	7cdb      	ldrb	r3, [r3, #19]
    d518:	f003 0307 	and.w	r3, r3, #7
    d51c:	b2db      	uxtb	r3, r3
    d51e:	2b01      	cmp	r3, #1
    d520:	d107      	bne.n	d532 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    d522:	79fb      	ldrb	r3, [r7, #7]
    d524:	697a      	ldr	r2, [r7, #20]
    d526:	3308      	adds	r3, #8
    d528:	015b      	lsls	r3, r3, #5
    d52a:	4413      	add	r3, r2
    d52c:	2200      	movs	r2, #0
    d52e:	701a      	strb	r2, [r3, #0]
    d530:	e02a      	b.n	d588 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    d532:	f997 3007 	ldrsb.w	r3, [r7, #7]
    d536:	2b00      	cmp	r3, #0
    d538:	da15      	bge.n	d566 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    d53a:	79fb      	ldrb	r3, [r7, #7]
    d53c:	f003 030f 	and.w	r3, r3, #15
    d540:	79fa      	ldrb	r2, [r7, #7]
    d542:	f002 020f 	and.w	r2, r2, #15
    d546:	6979      	ldr	r1, [r7, #20]
    d548:	3208      	adds	r2, #8
    d54a:	0152      	lsls	r2, r2, #5
    d54c:	440a      	add	r2, r1
    d54e:	7812      	ldrb	r2, [r2, #0]
    d550:	b2d2      	uxtb	r2, r2
    d552:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    d556:	b2d1      	uxtb	r1, r2
    d558:	697a      	ldr	r2, [r7, #20]
    d55a:	3308      	adds	r3, #8
    d55c:	015b      	lsls	r3, r3, #5
    d55e:	4413      	add	r3, r2
    d560:	460a      	mov	r2, r1
    d562:	701a      	strb	r2, [r3, #0]
    d564:	e010      	b.n	d588 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    d566:	79fb      	ldrb	r3, [r7, #7]
    d568:	79fa      	ldrb	r2, [r7, #7]
    d56a:	6979      	ldr	r1, [r7, #20]
    d56c:	3208      	adds	r2, #8
    d56e:	0152      	lsls	r2, r2, #5
    d570:	440a      	add	r2, r1
    d572:	7812      	ldrb	r2, [r2, #0]
    d574:	b2d2      	uxtb	r2, r2
    d576:	f022 0207 	bic.w	r2, r2, #7
    d57a:	b2d1      	uxtb	r1, r2
    d57c:	697a      	ldr	r2, [r7, #20]
    d57e:	3308      	adds	r3, #8
    d580:	015b      	lsls	r3, r3, #5
    d582:	4413      	add	r3, r2
    d584:	460a      	mov	r2, r1
    d586:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    d588:	68fb      	ldr	r3, [r7, #12]
    d58a:	2200      	movs	r2, #0
    d58c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    d58e:	68fb      	ldr	r3, [r7, #12]
    d590:	22ff      	movs	r2, #255	; 0xff
    d592:	749a      	strb	r2, [r3, #18]
    d594:	e000      	b.n	d598 <_usb_d_dev_ep_deinit+0xd4>
		return;
    d596:	bf00      	nop
}
    d598:	3718      	adds	r7, #24
    d59a:	46bd      	mov	sp, r7
    d59c:	bd80      	pop	{r7, pc}
    d59e:	bf00      	nop
    d5a0:	0000c3c1 	.word	0x0000c3c1
    d5a4:	0000d9f9 	.word	0x0000d9f9

0000d5a8 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    d5a8:	b5b0      	push	{r4, r5, r7, lr}
    d5aa:	b088      	sub	sp, #32
    d5ac:	af00      	add	r7, sp, #0
    d5ae:	4603      	mov	r3, r0
    d5b0:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    d5b2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d5b6:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    d5b8:	79fb      	ldrb	r3, [r7, #7]
    d5ba:	f003 030f 	and.w	r3, r3, #15
    d5be:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    d5c0:	79fb      	ldrb	r3, [r7, #7]
    d5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d5c6:	2b00      	cmp	r3, #0
    d5c8:	bf14      	ite	ne
    d5ca:	2301      	movne	r3, #1
    d5cc:	2300      	moveq	r3, #0
    d5ce:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    d5d0:	7eba      	ldrb	r2, [r7, #26]
    d5d2:	7efb      	ldrb	r3, [r7, #27]
    d5d4:	4611      	mov	r1, r2
    d5d6:	4618      	mov	r0, r3
    d5d8:	4b70      	ldr	r3, [pc, #448]	; (d79c <_usb_d_dev_ep_enable+0x1f4>)
    d5da:	4798      	blx	r3
    d5dc:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    d5de:	7efb      	ldrb	r3, [r7, #27]
    d5e0:	4619      	mov	r1, r3
    d5e2:	69f8      	ldr	r0, [r7, #28]
    d5e4:	4b6e      	ldr	r3, [pc, #440]	; (d7a0 <_usb_d_dev_ep_enable+0x1f8>)
    d5e6:	4798      	blx	r3
    d5e8:	4603      	mov	r3, r0
    d5ea:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    d5ec:	7efb      	ldrb	r3, [r7, #27]
    d5ee:	2b04      	cmp	r3, #4
    d5f0:	d803      	bhi.n	d5fa <_usb_d_dev_ep_enable+0x52>
    d5f2:	697b      	ldr	r3, [r7, #20]
    d5f4:	7c9b      	ldrb	r3, [r3, #18]
    d5f6:	2bff      	cmp	r3, #255	; 0xff
    d5f8:	d102      	bne.n	d600 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    d5fa:	f06f 0311 	mvn.w	r3, #17
    d5fe:	e0c8      	b.n	d792 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    d600:	7efb      	ldrb	r3, [r7, #27]
    d602:	015b      	lsls	r3, r3, #5
    d604:	4a67      	ldr	r2, [pc, #412]	; (d7a4 <_usb_d_dev_ep_enable+0x1fc>)
    d606:	4413      	add	r3, r2
    d608:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    d60a:	697b      	ldr	r3, [r7, #20]
    d60c:	7cdb      	ldrb	r3, [r3, #19]
    d60e:	f003 0307 	and.w	r3, r3, #7
    d612:	b2db      	uxtb	r3, r3
    d614:	2b01      	cmp	r3, #1
    d616:	d14b      	bne.n	d6b0 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    d618:	7cfb      	ldrb	r3, [r7, #19]
    d61a:	f003 0377 	and.w	r3, r3, #119	; 0x77
    d61e:	2b00      	cmp	r3, #0
    d620:	d002      	beq.n	d628 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    d622:	f06f 0313 	mvn.w	r3, #19
    d626:	e0b4      	b.n	d792 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    d628:	7efb      	ldrb	r3, [r7, #27]
    d62a:	2211      	movs	r2, #17
    d62c:	4619      	mov	r1, r3
    d62e:	69f8      	ldr	r0, [r7, #28]
    d630:	4b5d      	ldr	r3, [pc, #372]	; (d7a8 <_usb_d_dev_ep_enable+0x200>)
    d632:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d634:	697b      	ldr	r3, [r7, #20]
    d636:	8a1b      	ldrh	r3, [r3, #16]
    d638:	039b      	lsls	r3, r3, #14
    d63a:	4c5c      	ldr	r4, [pc, #368]	; (d7ac <_usb_d_dev_ep_enable+0x204>)
    d63c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d63e:	697b      	ldr	r3, [r7, #20]
    d640:	8a1b      	ldrh	r3, [r3, #16]
    d642:	4618      	mov	r0, r3
    d644:	4b5a      	ldr	r3, [pc, #360]	; (d7b0 <_usb_d_dev_ep_enable+0x208>)
    d646:	4798      	blx	r3
    d648:	4603      	mov	r3, r0
    d64a:	071b      	lsls	r3, r3, #28
    d64c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d650:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d654:	68fb      	ldr	r3, [r7, #12]
    d656:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    d658:	68fb      	ldr	r3, [r7, #12]
    d65a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d65e:	697b      	ldr	r3, [r7, #20]
    d660:	8a1b      	ldrh	r3, [r3, #16]
    d662:	f3c3 050d 	ubfx	r5, r3, #0, #14
    d666:	697b      	ldr	r3, [r7, #20]
    d668:	8a1b      	ldrh	r3, [r3, #16]
    d66a:	4618      	mov	r0, r3
    d66c:	4b50      	ldr	r3, [pc, #320]	; (d7b0 <_usb_d_dev_ep_enable+0x208>)
    d66e:	4798      	blx	r3
    d670:	4603      	mov	r3, r0
    d672:	071b      	lsls	r3, r3, #28
    d674:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d678:	432b      	orrs	r3, r5
    d67a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    d67c:	7efb      	ldrb	r3, [r7, #27]
    d67e:	2200      	movs	r2, #0
    d680:	2100      	movs	r1, #0
    d682:	4618      	mov	r0, r3
    d684:	4b4b      	ldr	r3, [pc, #300]	; (d7b4 <_usb_d_dev_ep_enable+0x20c>)
    d686:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    d688:	7efb      	ldrb	r3, [r7, #27]
    d68a:	2200      	movs	r2, #0
    d68c:	2101      	movs	r1, #1
    d68e:	4618      	mov	r0, r3
    d690:	4b49      	ldr	r3, [pc, #292]	; (d7b8 <_usb_d_dev_ep_enable+0x210>)
    d692:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    d694:	7efb      	ldrb	r3, [r7, #27]
    d696:	2100      	movs	r1, #0
    d698:	4618      	mov	r0, r3
    d69a:	4b48      	ldr	r3, [pc, #288]	; (d7bc <_usb_d_dev_ep_enable+0x214>)
    d69c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    d69e:	7efb      	ldrb	r3, [r7, #27]
    d6a0:	2101      	movs	r1, #1
    d6a2:	4618      	mov	r0, r3
    d6a4:	4b45      	ldr	r3, [pc, #276]	; (d7bc <_usb_d_dev_ep_enable+0x214>)
    d6a6:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    d6a8:	6978      	ldr	r0, [r7, #20]
    d6aa:	4b45      	ldr	r3, [pc, #276]	; (d7c0 <_usb_d_dev_ep_enable+0x218>)
    d6ac:	4798      	blx	r3
    d6ae:	e06f      	b.n	d790 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    d6b0:	7ebb      	ldrb	r3, [r7, #26]
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	d038      	beq.n	d728 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    d6b6:	7cfb      	ldrb	r3, [r7, #19]
    d6b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    d6bc:	2b00      	cmp	r3, #0
    d6be:	d002      	beq.n	d6c6 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    d6c0:	f06f 0313 	mvn.w	r3, #19
    d6c4:	e065      	b.n	d792 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    d6c6:	697b      	ldr	r3, [r7, #20]
    d6c8:	7cdb      	ldrb	r3, [r3, #19]
    d6ca:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d6ce:	b2db      	uxtb	r3, r3
    d6d0:	011b      	lsls	r3, r3, #4
    d6d2:	b2db      	uxtb	r3, r3
    d6d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    d6d8:	b2da      	uxtb	r2, r3
    d6da:	7cfb      	ldrb	r3, [r7, #19]
    d6dc:	4313      	orrs	r3, r2
    d6de:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    d6e0:	7cfa      	ldrb	r2, [r7, #19]
    d6e2:	7efb      	ldrb	r3, [r7, #27]
    d6e4:	4619      	mov	r1, r3
    d6e6:	69f8      	ldr	r0, [r7, #28]
    d6e8:	4b2f      	ldr	r3, [pc, #188]	; (d7a8 <_usb_d_dev_ep_enable+0x200>)
    d6ea:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    d6ec:	68fb      	ldr	r3, [r7, #12]
    d6ee:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d6f2:	697b      	ldr	r3, [r7, #20]
    d6f4:	8a1b      	ldrh	r3, [r3, #16]
    d6f6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    d6fa:	697b      	ldr	r3, [r7, #20]
    d6fc:	8a1b      	ldrh	r3, [r3, #16]
    d6fe:	4618      	mov	r0, r3
    d700:	4b2b      	ldr	r3, [pc, #172]	; (d7b0 <_usb_d_dev_ep_enable+0x208>)
    d702:	4798      	blx	r3
    d704:	4603      	mov	r3, r0
    d706:	071b      	lsls	r3, r3, #28
    d708:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d70c:	432b      	orrs	r3, r5
    d70e:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    d710:	7efb      	ldrb	r3, [r7, #27]
    d712:	2200      	movs	r2, #0
    d714:	2101      	movs	r1, #1
    d716:	4618      	mov	r0, r3
    d718:	4b27      	ldr	r3, [pc, #156]	; (d7b8 <_usb_d_dev_ep_enable+0x210>)
    d71a:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    d71c:	7efb      	ldrb	r3, [r7, #27]
    d71e:	2101      	movs	r1, #1
    d720:	4618      	mov	r0, r3
    d722:	4b26      	ldr	r3, [pc, #152]	; (d7bc <_usb_d_dev_ep_enable+0x214>)
    d724:	4798      	blx	r3
    d726:	e033      	b.n	d790 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    d728:	7cfb      	ldrb	r3, [r7, #19]
    d72a:	f003 0307 	and.w	r3, r3, #7
    d72e:	2b00      	cmp	r3, #0
    d730:	d002      	beq.n	d738 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    d732:	f06f 0313 	mvn.w	r3, #19
    d736:	e02c      	b.n	d792 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    d738:	697b      	ldr	r3, [r7, #20]
    d73a:	7cdb      	ldrb	r3, [r3, #19]
    d73c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d740:	b2db      	uxtb	r3, r3
    d742:	461a      	mov	r2, r3
    d744:	7cfb      	ldrb	r3, [r7, #19]
    d746:	4313      	orrs	r3, r2
    d748:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    d74a:	7cfa      	ldrb	r2, [r7, #19]
    d74c:	7efb      	ldrb	r3, [r7, #27]
    d74e:	4619      	mov	r1, r3
    d750:	69f8      	ldr	r0, [r7, #28]
    d752:	4b15      	ldr	r3, [pc, #84]	; (d7a8 <_usb_d_dev_ep_enable+0x200>)
    d754:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d756:	697b      	ldr	r3, [r7, #20]
    d758:	8a1b      	ldrh	r3, [r3, #16]
    d75a:	039b      	lsls	r3, r3, #14
    d75c:	4c13      	ldr	r4, [pc, #76]	; (d7ac <_usb_d_dev_ep_enable+0x204>)
    d75e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d760:	697b      	ldr	r3, [r7, #20]
    d762:	8a1b      	ldrh	r3, [r3, #16]
    d764:	4618      	mov	r0, r3
    d766:	4b12      	ldr	r3, [pc, #72]	; (d7b0 <_usb_d_dev_ep_enable+0x208>)
    d768:	4798      	blx	r3
    d76a:	4603      	mov	r3, r0
    d76c:	071b      	lsls	r3, r3, #28
    d76e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d772:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d776:	68fb      	ldr	r3, [r7, #12]
    d778:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    d77a:	7efb      	ldrb	r3, [r7, #27]
    d77c:	2200      	movs	r2, #0
    d77e:	2100      	movs	r1, #0
    d780:	4618      	mov	r0, r3
    d782:	4b0c      	ldr	r3, [pc, #48]	; (d7b4 <_usb_d_dev_ep_enable+0x20c>)
    d784:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    d786:	7efb      	ldrb	r3, [r7, #27]
    d788:	2100      	movs	r1, #0
    d78a:	4618      	mov	r0, r3
    d78c:	4b0b      	ldr	r3, [pc, #44]	; (d7bc <_usb_d_dev_ep_enable+0x214>)
    d78e:	4798      	blx	r3
	}

	return USB_OK;
    d790:	2300      	movs	r3, #0
}
    d792:	4618      	mov	r0, r3
    d794:	3720      	adds	r7, #32
    d796:	46bd      	mov	sp, r7
    d798:	bdb0      	pop	{r4, r5, r7, pc}
    d79a:	bf00      	nop
    d79c:	0000c3c1 	.word	0x0000c3c1
    d7a0:	0000ba47 	.word	0x0000ba47
    d7a4:	200026c4 	.word	0x200026c4
    d7a8:	0000ba1d 	.word	0x0000ba1d
    d7ac:	0fffc000 	.word	0x0fffc000
    d7b0:	0000c35d 	.word	0x0000c35d
    d7b4:	0000c305 	.word	0x0000c305
    d7b8:	0000c2ad 	.word	0x0000c2ad
    d7bc:	0000c275 	.word	0x0000c275
    d7c0:	0000d319 	.word	0x0000d319

0000d7c4 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    d7c4:	b580      	push	{r7, lr}
    d7c6:	b084      	sub	sp, #16
    d7c8:	af00      	add	r7, sp, #0
    d7ca:	6078      	str	r0, [r7, #4]
    d7cc:	460b      	mov	r3, r1
    d7ce:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d7d0:	687b      	ldr	r3, [r7, #4]
    d7d2:	7c9b      	ldrb	r3, [r3, #18]
    d7d4:	f003 030f 	and.w	r3, r3, #15
    d7d8:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    d7da:	78fa      	ldrb	r2, [r7, #3]
    d7dc:	7bfb      	ldrb	r3, [r7, #15]
    d7de:	4611      	mov	r1, r2
    d7e0:	4618      	mov	r0, r3
    d7e2:	4b03      	ldr	r3, [pc, #12]	; (d7f0 <_usb_d_dev_ep_stall_get+0x2c>)
    d7e4:	4798      	blx	r3
    d7e6:	4603      	mov	r3, r0
}
    d7e8:	4618      	mov	r0, r3
    d7ea:	3710      	adds	r7, #16
    d7ec:	46bd      	mov	sp, r7
    d7ee:	bd80      	pop	{r7, pc}
    d7f0:	0000beb5 	.word	0x0000beb5

0000d7f4 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    d7f4:	b580      	push	{r7, lr}
    d7f6:	b084      	sub	sp, #16
    d7f8:	af00      	add	r7, sp, #0
    d7fa:	6078      	str	r0, [r7, #4]
    d7fc:	460b      	mov	r3, r1
    d7fe:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d800:	687b      	ldr	r3, [r7, #4]
    d802:	7c9b      	ldrb	r3, [r3, #18]
    d804:	f003 030f 	and.w	r3, r3, #15
    d808:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    d80a:	78f9      	ldrb	r1, [r7, #3]
    d80c:	7bfb      	ldrb	r3, [r7, #15]
    d80e:	2201      	movs	r2, #1
    d810:	4618      	mov	r0, r3
    d812:	4b0a      	ldr	r3, [pc, #40]	; (d83c <_usb_d_dev_ep_stall_set+0x48>)
    d814:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    d816:	78fb      	ldrb	r3, [r7, #3]
    d818:	2220      	movs	r2, #32
    d81a:	409a      	lsls	r2, r3
    d81c:	7bfb      	ldrb	r3, [r7, #15]
    d81e:	4611      	mov	r1, r2
    d820:	4618      	mov	r0, r3
    d822:	4b07      	ldr	r3, [pc, #28]	; (d840 <_usb_d_dev_ep_stall_set+0x4c>)
    d824:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    d826:	687a      	ldr	r2, [r7, #4]
    d828:	7cd3      	ldrb	r3, [r2, #19]
    d82a:	f043 0308 	orr.w	r3, r3, #8
    d82e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    d830:	2300      	movs	r3, #0
}
    d832:	4618      	mov	r0, r3
    d834:	3710      	adds	r7, #16
    d836:	46bd      	mov	sp, r7
    d838:	bd80      	pop	{r7, pc}
    d83a:	bf00      	nop
    d83c:	0000be5d 	.word	0x0000be5d
    d840:	0000bddd 	.word	0x0000bddd

0000d844 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    d844:	b580      	push	{r7, lr}
    d846:	b084      	sub	sp, #16
    d848:	af00      	add	r7, sp, #0
    d84a:	6078      	str	r0, [r7, #4]
    d84c:	460b      	mov	r3, r1
    d84e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    d850:	687b      	ldr	r3, [r7, #4]
    d852:	7c9b      	ldrb	r3, [r3, #18]
    d854:	f003 030f 	and.w	r3, r3, #15
    d858:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    d85a:	78fa      	ldrb	r2, [r7, #3]
    d85c:	7bfb      	ldrb	r3, [r7, #15]
    d85e:	4611      	mov	r1, r2
    d860:	4618      	mov	r0, r3
    d862:	4b28      	ldr	r3, [pc, #160]	; (d904 <_usb_d_dev_ep_stall_clr+0xc0>)
    d864:	4798      	blx	r3
    d866:	4603      	mov	r3, r0
    d868:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    d86a:	7bbb      	ldrb	r3, [r7, #14]
    d86c:	f083 0301 	eor.w	r3, r3, #1
    d870:	b2db      	uxtb	r3, r3
    d872:	2b00      	cmp	r3, #0
    d874:	d001      	beq.n	d87a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    d876:	2300      	movs	r3, #0
    d878:	e040      	b.n	d8fc <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    d87a:	78f9      	ldrb	r1, [r7, #3]
    d87c:	7bfb      	ldrb	r3, [r7, #15]
    d87e:	2200      	movs	r2, #0
    d880:	4618      	mov	r0, r3
    d882:	4b21      	ldr	r3, [pc, #132]	; (d908 <_usb_d_dev_ep_stall_clr+0xc4>)
    d884:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    d886:	78fb      	ldrb	r3, [r7, #3]
    d888:	2220      	movs	r2, #32
    d88a:	409a      	lsls	r2, r3
    d88c:	7bfb      	ldrb	r3, [r7, #15]
    d88e:	4611      	mov	r1, r2
    d890:	4618      	mov	r0, r3
    d892:	4b1e      	ldr	r3, [pc, #120]	; (d90c <_usb_d_dev_ep_stall_clr+0xc8>)
    d894:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    d896:	78fa      	ldrb	r2, [r7, #3]
    d898:	7bfb      	ldrb	r3, [r7, #15]
    d89a:	4611      	mov	r1, r2
    d89c:	4618      	mov	r0, r3
    d89e:	4b1c      	ldr	r3, [pc, #112]	; (d910 <_usb_d_dev_ep_stall_clr+0xcc>)
    d8a0:	4798      	blx	r3
    d8a2:	4603      	mov	r3, r0
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	d00b      	beq.n	d8c0 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    d8a8:	78fa      	ldrb	r2, [r7, #3]
    d8aa:	7bfb      	ldrb	r3, [r7, #15]
    d8ac:	4611      	mov	r1, r2
    d8ae:	4618      	mov	r0, r3
    d8b0:	4b18      	ldr	r3, [pc, #96]	; (d914 <_usb_d_dev_ep_stall_clr+0xd0>)
    d8b2:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    d8b4:	78f9      	ldrb	r1, [r7, #3]
    d8b6:	7bfb      	ldrb	r3, [r7, #15]
    d8b8:	2200      	movs	r2, #0
    d8ba:	4618      	mov	r0, r3
    d8bc:	4b16      	ldr	r3, [pc, #88]	; (d918 <_usb_d_dev_ep_stall_clr+0xd4>)
    d8be:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    d8c0:	687b      	ldr	r3, [r7, #4]
    d8c2:	7cdb      	ldrb	r3, [r3, #19]
    d8c4:	f003 0307 	and.w	r3, r3, #7
    d8c8:	b2db      	uxtb	r3, r3
    d8ca:	2b01      	cmp	r3, #1
    d8cc:	d110      	bne.n	d8f0 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    d8ce:	7bfb      	ldrb	r3, [r7, #15]
    d8d0:	4619      	mov	r1, r3
    d8d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d8d6:	4b11      	ldr	r3, [pc, #68]	; (d91c <_usb_d_dev_ep_stall_clr+0xd8>)
    d8d8:	4798      	blx	r3
    d8da:	4603      	mov	r3, r0
    d8dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
    d8e0:	2b00      	cmp	r3, #0
    d8e2:	d10a      	bne.n	d8fa <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    d8e4:	687a      	ldr	r2, [r7, #4]
    d8e6:	7cd3      	ldrb	r3, [r2, #19]
    d8e8:	f36f 03c3 	bfc	r3, #3, #1
    d8ec:	74d3      	strb	r3, [r2, #19]
    d8ee:	e004      	b.n	d8fa <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    d8f0:	687a      	ldr	r2, [r7, #4]
    d8f2:	7cd3      	ldrb	r3, [r2, #19]
    d8f4:	f36f 03c3 	bfc	r3, #3, #1
    d8f8:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    d8fa:	2300      	movs	r3, #0
}
    d8fc:	4618      	mov	r0, r3
    d8fe:	3710      	adds	r7, #16
    d900:	46bd      	mov	sp, r7
    d902:	bd80      	pop	{r7, pc}
    d904:	0000beb5 	.word	0x0000beb5
    d908:	0000be5d 	.word	0x0000be5d
    d90c:	0000be05 	.word	0x0000be05
    d910:	0000bef9 	.word	0x0000bef9
    d914:	0000bf3d 	.word	0x0000bf3d
    d918:	0000c029 	.word	0x0000c029
    d91c:	0000b8e5 	.word	0x0000b8e5

0000d920 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    d920:	b580      	push	{r7, lr}
    d922:	b086      	sub	sp, #24
    d924:	af00      	add	r7, sp, #0
    d926:	4603      	mov	r3, r0
    d928:	460a      	mov	r2, r1
    d92a:	71fb      	strb	r3, [r7, #7]
    d92c:	4613      	mov	r3, r2
    d92e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    d930:	79fb      	ldrb	r3, [r7, #7]
    d932:	f003 030f 	and.w	r3, r3, #15
    d936:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    d938:	79fb      	ldrb	r3, [r7, #7]
    d93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d93e:	2b00      	cmp	r3, #0
    d940:	bf14      	ite	ne
    d942:	2301      	movne	r3, #1
    d944:	2300      	moveq	r3, #0
    d946:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d948:	7cba      	ldrb	r2, [r7, #18]
    d94a:	7cfb      	ldrb	r3, [r7, #19]
    d94c:	4611      	mov	r1, r2
    d94e:	4618      	mov	r0, r3
    d950:	4b13      	ldr	r3, [pc, #76]	; (d9a0 <_usb_d_dev_ep_stall+0x80>)
    d952:	4798      	blx	r3
    d954:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    d956:	7cfb      	ldrb	r3, [r7, #19]
    d958:	2b04      	cmp	r3, #4
    d95a:	d902      	bls.n	d962 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    d95c:	f06f 0311 	mvn.w	r3, #17
    d960:	e01a      	b.n	d998 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    d962:	79bb      	ldrb	r3, [r7, #6]
    d964:	2b01      	cmp	r3, #1
    d966:	d106      	bne.n	d976 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    d968:	7cbb      	ldrb	r3, [r7, #18]
    d96a:	4619      	mov	r1, r3
    d96c:	68f8      	ldr	r0, [r7, #12]
    d96e:	4b0d      	ldr	r3, [pc, #52]	; (d9a4 <_usb_d_dev_ep_stall+0x84>)
    d970:	4798      	blx	r3
    d972:	6178      	str	r0, [r7, #20]
    d974:	e00f      	b.n	d996 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    d976:	79bb      	ldrb	r3, [r7, #6]
    d978:	2b00      	cmp	r3, #0
    d97a:	d106      	bne.n	d98a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    d97c:	7cbb      	ldrb	r3, [r7, #18]
    d97e:	4619      	mov	r1, r3
    d980:	68f8      	ldr	r0, [r7, #12]
    d982:	4b09      	ldr	r3, [pc, #36]	; (d9a8 <_usb_d_dev_ep_stall+0x88>)
    d984:	4798      	blx	r3
    d986:	6178      	str	r0, [r7, #20]
    d988:	e005      	b.n	d996 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    d98a:	7cbb      	ldrb	r3, [r7, #18]
    d98c:	4619      	mov	r1, r3
    d98e:	68f8      	ldr	r0, [r7, #12]
    d990:	4b06      	ldr	r3, [pc, #24]	; (d9ac <_usb_d_dev_ep_stall+0x8c>)
    d992:	4798      	blx	r3
    d994:	6178      	str	r0, [r7, #20]
	}
	return rc;
    d996:	697b      	ldr	r3, [r7, #20]
}
    d998:	4618      	mov	r0, r3
    d99a:	3718      	adds	r7, #24
    d99c:	46bd      	mov	sp, r7
    d99e:	bd80      	pop	{r7, pc}
    d9a0:	0000c3c1 	.word	0x0000c3c1
    d9a4:	0000d7f5 	.word	0x0000d7f5
    d9a8:	0000d845 	.word	0x0000d845
    d9ac:	0000d7c5 	.word	0x0000d7c5

0000d9b0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    d9b0:	b580      	push	{r7, lr}
    d9b2:	b082      	sub	sp, #8
    d9b4:	af00      	add	r7, sp, #0
    d9b6:	6078      	str	r0, [r7, #4]
    d9b8:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    d9ba:	687b      	ldr	r3, [r7, #4]
    d9bc:	7c9b      	ldrb	r3, [r3, #18]
    d9be:	2bff      	cmp	r3, #255	; 0xff
    d9c0:	d014      	beq.n	d9ec <_usb_d_dev_trans_done+0x3c>
    d9c2:	687b      	ldr	r3, [r7, #4]
    d9c4:	7cdb      	ldrb	r3, [r3, #19]
    d9c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d9ca:	b2db      	uxtb	r3, r3
    d9cc:	2b00      	cmp	r3, #0
    d9ce:	d00d      	beq.n	d9ec <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    d9d0:	687a      	ldr	r2, [r7, #4]
    d9d2:	7cd3      	ldrb	r3, [r2, #19]
    d9d4:	f36f 1386 	bfc	r3, #6, #1
    d9d8:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    d9da:	4b06      	ldr	r3, [pc, #24]	; (d9f4 <_usb_d_dev_trans_done+0x44>)
    d9dc:	691b      	ldr	r3, [r3, #16]
    d9de:	687a      	ldr	r2, [r7, #4]
    d9e0:	7c90      	ldrb	r0, [r2, #18]
    d9e2:	687a      	ldr	r2, [r7, #4]
    d9e4:	6892      	ldr	r2, [r2, #8]
    d9e6:	6839      	ldr	r1, [r7, #0]
    d9e8:	4798      	blx	r3
    d9ea:	e000      	b.n	d9ee <_usb_d_dev_trans_done+0x3e>
		return;
    d9ec:	bf00      	nop
}
    d9ee:	3708      	adds	r7, #8
    d9f0:	46bd      	mov	sp, r7
    d9f2:	bd80      	pop	{r7, pc}
    d9f4:	200025fc 	.word	0x200025fc

0000d9f8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    d9f8:	b580      	push	{r7, lr}
    d9fa:	b086      	sub	sp, #24
    d9fc:	af00      	add	r7, sp, #0
    d9fe:	60f8      	str	r0, [r7, #12]
    da00:	460b      	mov	r3, r1
    da02:	607a      	str	r2, [r7, #4]
    da04:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    da06:	68fb      	ldr	r3, [r7, #12]
    da08:	7c9b      	ldrb	r3, [r3, #18]
    da0a:	f003 030f 	and.w	r3, r3, #15
    da0e:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    da10:	4b1f      	ldr	r3, [pc, #124]	; (da90 <_usb_d_dev_trans_stop+0x98>)
    da12:	881b      	ldrh	r3, [r3, #0]
    da14:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    da16:	68fb      	ldr	r3, [r7, #12]
    da18:	7c9b      	ldrb	r3, [r3, #18]
    da1a:	2bff      	cmp	r3, #255	; 0xff
    da1c:	d033      	beq.n	da86 <_usb_d_dev_trans_stop+0x8e>
    da1e:	68fb      	ldr	r3, [r7, #12]
    da20:	7cdb      	ldrb	r3, [r3, #19]
    da22:	f003 0340 	and.w	r3, r3, #64	; 0x40
    da26:	b2db      	uxtb	r3, r3
    da28:	2b00      	cmp	r3, #0
    da2a:	d02c      	beq.n	da86 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    da2c:	7afb      	ldrb	r3, [r7, #11]
    da2e:	2b00      	cmp	r3, #0
    da30:	d006      	beq.n	da40 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    da32:	7dfb      	ldrb	r3, [r7, #23]
    da34:	2200      	movs	r2, #0
    da36:	2101      	movs	r1, #1
    da38:	4618      	mov	r0, r3
    da3a:	4b16      	ldr	r3, [pc, #88]	; (da94 <_usb_d_dev_trans_stop+0x9c>)
    da3c:	4798      	blx	r3
    da3e:	e005      	b.n	da4c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    da40:	7dfb      	ldrb	r3, [r7, #23]
    da42:	2200      	movs	r2, #0
    da44:	2100      	movs	r1, #0
    da46:	4618      	mov	r0, r3
    da48:	4b13      	ldr	r3, [pc, #76]	; (da98 <_usb_d_dev_trans_stop+0xa0>)
    da4a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    da4c:	7afb      	ldrb	r3, [r7, #11]
    da4e:	f107 0218 	add.w	r2, r7, #24
    da52:	4413      	add	r3, r2
    da54:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    da58:	461a      	mov	r2, r3
    da5a:	7dfb      	ldrb	r3, [r7, #23]
    da5c:	4611      	mov	r1, r2
    da5e:	4618      	mov	r0, r3
    da60:	4b0e      	ldr	r3, [pc, #56]	; (da9c <_usb_d_dev_trans_stop+0xa4>)
    da62:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    da64:	7afb      	ldrb	r3, [r7, #11]
    da66:	f107 0218 	add.w	r2, r7, #24
    da6a:	4413      	add	r3, r2
    da6c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    da70:	461a      	mov	r2, r3
    da72:	7dfb      	ldrb	r3, [r7, #23]
    da74:	4611      	mov	r1, r2
    da76:	4618      	mov	r0, r3
    da78:	4b09      	ldr	r3, [pc, #36]	; (daa0 <_usb_d_dev_trans_stop+0xa8>)
    da7a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    da7c:	6879      	ldr	r1, [r7, #4]
    da7e:	68f8      	ldr	r0, [r7, #12]
    da80:	4b08      	ldr	r3, [pc, #32]	; (daa4 <_usb_d_dev_trans_stop+0xac>)
    da82:	4798      	blx	r3
    da84:	e000      	b.n	da88 <_usb_d_dev_trans_stop+0x90>
		return;
    da86:	bf00      	nop
}
    da88:	3718      	adds	r7, #24
    da8a:	46bd      	mov	sp, r7
    da8c:	bd80      	pop	{r7, pc}
    da8e:	bf00      	nop
    da90:	0001a924 	.word	0x0001a924
    da94:	0000c2ad 	.word	0x0000c2ad
    da98:	0000c305 	.word	0x0000c305
    da9c:	0000bdb5 	.word	0x0000bdb5
    daa0:	0000be05 	.word	0x0000be05
    daa4:	0000d9b1 	.word	0x0000d9b1

0000daa8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    daa8:	b580      	push	{r7, lr}
    daaa:	b086      	sub	sp, #24
    daac:	af00      	add	r7, sp, #0
    daae:	4603      	mov	r3, r0
    dab0:	6039      	str	r1, [r7, #0]
    dab2:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    dab4:	79fb      	ldrb	r3, [r7, #7]
    dab6:	f003 030f 	and.w	r3, r3, #15
    daba:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    dabc:	7dfb      	ldrb	r3, [r7, #23]
    dabe:	015b      	lsls	r3, r3, #5
    dac0:	4a1e      	ldr	r2, [pc, #120]	; (db3c <_usb_d_dev_ep_read_req+0x94>)
    dac2:	4413      	add	r3, r2
    dac4:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    dac6:	693b      	ldr	r3, [r7, #16]
    dac8:	681b      	ldr	r3, [r3, #0]
    daca:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    dacc:	693b      	ldr	r3, [r7, #16]
    dace:	685b      	ldr	r3, [r3, #4]
    dad0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    dad4:	b29b      	uxth	r3, r3
    dad6:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    dad8:	7dfb      	ldrb	r3, [r7, #23]
    dada:	2b04      	cmp	r3, #4
    dadc:	d802      	bhi.n	dae4 <_usb_d_dev_ep_read_req+0x3c>
    dade:	683b      	ldr	r3, [r7, #0]
    dae0:	2b00      	cmp	r3, #0
    dae2:	d102      	bne.n	daea <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    dae4:	f06f 0311 	mvn.w	r3, #17
    dae8:	e023      	b.n	db32 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    daea:	7dfb      	ldrb	r3, [r7, #23]
    daec:	4618      	mov	r0, r3
    daee:	4b14      	ldr	r3, [pc, #80]	; (db40 <_usb_d_dev_ep_read_req+0x98>)
    daf0:	4798      	blx	r3
    daf2:	4603      	mov	r3, r0
    daf4:	f083 0301 	eor.w	r3, r3, #1
    daf8:	b2db      	uxtb	r3, r3
    dafa:	2b00      	cmp	r3, #0
    dafc:	d002      	beq.n	db04 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    dafe:	f06f 0312 	mvn.w	r3, #18
    db02:	e016      	b.n	db32 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    db04:	7dfb      	ldrb	r3, [r7, #23]
    db06:	4618      	mov	r0, r3
    db08:	4b0e      	ldr	r3, [pc, #56]	; (db44 <_usb_d_dev_ep_read_req+0x9c>)
    db0a:	4798      	blx	r3
    db0c:	4603      	mov	r3, r0
    db0e:	f083 0301 	eor.w	r3, r3, #1
    db12:	b2db      	uxtb	r3, r3
    db14:	2b00      	cmp	r3, #0
    db16:	d001      	beq.n	db1c <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    db18:	2300      	movs	r3, #0
    db1a:	e00a      	b.n	db32 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    db1c:	68fb      	ldr	r3, [r7, #12]
    db1e:	2208      	movs	r2, #8
    db20:	4619      	mov	r1, r3
    db22:	6838      	ldr	r0, [r7, #0]
    db24:	4b08      	ldr	r3, [pc, #32]	; (db48 <_usb_d_dev_ep_read_req+0xa0>)
    db26:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    db28:	7dfb      	ldrb	r3, [r7, #23]
    db2a:	4618      	mov	r0, r3
    db2c:	4b07      	ldr	r3, [pc, #28]	; (db4c <_usb_d_dev_ep_read_req+0xa4>)
    db2e:	4798      	blx	r3

	return bytes;
    db30:	897b      	ldrh	r3, [r7, #10]
}
    db32:	4618      	mov	r0, r3
    db34:	3718      	adds	r7, #24
    db36:	46bd      	mov	sp, r7
    db38:	bd80      	pop	{r7, pc}
    db3a:	bf00      	nop
    db3c:	200026c4 	.word	0x200026c4
    db40:	0000be2d 	.word	0x0000be2d
    db44:	0000bfd9 	.word	0x0000bfd9
    db48:	0001631d 	.word	0x0001631d
    db4c:	0000c009 	.word	0x0000c009

0000db50 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    db50:	b580      	push	{r7, lr}
    db52:	b086      	sub	sp, #24
    db54:	af00      	add	r7, sp, #0
    db56:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    db58:	687b      	ldr	r3, [r7, #4]
    db5a:	7a1b      	ldrb	r3, [r3, #8]
    db5c:	f003 030f 	and.w	r3, r3, #15
    db60:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    db62:	687b      	ldr	r3, [r7, #4]
    db64:	7a1b      	ldrb	r3, [r3, #8]
    db66:	f003 0380 	and.w	r3, r3, #128	; 0x80
    db6a:	2b00      	cmp	r3, #0
    db6c:	bf14      	ite	ne
    db6e:	2301      	movne	r3, #1
    db70:	2300      	moveq	r3, #0
    db72:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    db74:	7d7a      	ldrb	r2, [r7, #21]
    db76:	7dbb      	ldrb	r3, [r7, #22]
    db78:	4611      	mov	r1, r2
    db7a:	4618      	mov	r0, r3
    db7c:	4b5f      	ldr	r3, [pc, #380]	; (dcfc <_usb_d_dev_ep_trans+0x1ac>)
    db7e:	4798      	blx	r3
    db80:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    db82:	693b      	ldr	r3, [r7, #16]
    db84:	8a1b      	ldrh	r3, [r3, #16]
    db86:	f240 32ff 	movw	r2, #1023	; 0x3ff
    db8a:	4293      	cmp	r3, r2
    db8c:	d004      	beq.n	db98 <_usb_d_dev_ep_trans+0x48>
    db8e:	693b      	ldr	r3, [r7, #16]
    db90:	8a1b      	ldrh	r3, [r3, #16]
    db92:	3b01      	subs	r3, #1
    db94:	b29b      	uxth	r3, r3
    db96:	e001      	b.n	db9c <_usb_d_dev_ep_trans+0x4c>
    db98:	f240 33ff 	movw	r3, #1023	; 0x3ff
    db9c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    db9e:	687b      	ldr	r3, [r7, #4]
    dba0:	685a      	ldr	r2, [r3, #4]
    dba2:	89fb      	ldrh	r3, [r7, #14]
    dba4:	4013      	ands	r3, r2
    dba6:	2b00      	cmp	r3, #0
    dba8:	bf14      	ite	ne
    dbaa:	2301      	movne	r3, #1
    dbac:	2300      	moveq	r3, #0
    dbae:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    dbb0:	2300      	movs	r3, #0
    dbb2:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    dbb4:	7dbb      	ldrb	r3, [r7, #22]
    dbb6:	2b04      	cmp	r3, #4
    dbb8:	d902      	bls.n	dbc0 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    dbba:	f06f 0311 	mvn.w	r3, #17
    dbbe:	e098      	b.n	dcf2 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    dbc0:	687b      	ldr	r3, [r7, #4]
    dbc2:	681b      	ldr	r3, [r3, #0]
    dbc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    dbc8:	d31a      	bcc.n	dc00 <_usb_d_dev_ep_trans+0xb0>
    dbca:	687b      	ldr	r3, [r7, #4]
    dbcc:	681b      	ldr	r3, [r3, #0]
    dbce:	461a      	mov	r2, r3
    dbd0:	687b      	ldr	r3, [r7, #4]
    dbd2:	685b      	ldr	r3, [r3, #4]
    dbd4:	4413      	add	r3, r2
    dbd6:	4a4a      	ldr	r2, [pc, #296]	; (dd00 <_usb_d_dev_ep_trans+0x1b0>)
    dbd8:	4293      	cmp	r3, r2
    dbda:	d811      	bhi.n	dc00 <_usb_d_dev_ep_trans+0xb0>
    dbdc:	687b      	ldr	r3, [r7, #4]
    dbde:	681b      	ldr	r3, [r3, #0]
    dbe0:	f003 0303 	and.w	r3, r3, #3
    dbe4:	2b00      	cmp	r3, #0
    dbe6:	d10b      	bne.n	dc00 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    dbe8:	7d7b      	ldrb	r3, [r7, #21]
    dbea:	f083 0301 	eor.w	r3, r3, #1
    dbee:	b2db      	uxtb	r3, r3
    dbf0:	2b00      	cmp	r3, #0
    dbf2:	d00e      	beq.n	dc12 <_usb_d_dev_ep_trans+0xc2>
    dbf4:	687b      	ldr	r3, [r7, #4]
    dbf6:	685b      	ldr	r3, [r3, #4]
    dbf8:	693a      	ldr	r2, [r7, #16]
    dbfa:	8a12      	ldrh	r2, [r2, #16]
    dbfc:	4293      	cmp	r3, r2
    dbfe:	d208      	bcs.n	dc12 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    dc00:	693b      	ldr	r3, [r7, #16]
    dc02:	68db      	ldr	r3, [r3, #12]
    dc04:	2b00      	cmp	r3, #0
    dc06:	d102      	bne.n	dc0e <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    dc08:	f06f 0312 	mvn.w	r3, #18
    dc0c:	e071      	b.n	dcf2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    dc0e:	2301      	movs	r3, #1
    dc10:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    dc12:	7d7b      	ldrb	r3, [r7, #21]
    dc14:	f083 0301 	eor.w	r3, r3, #1
    dc18:	b2db      	uxtb	r3, r3
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	d009      	beq.n	dc32 <_usb_d_dev_ep_trans+0xe2>
    dc1e:	7b7b      	ldrb	r3, [r7, #13]
    dc20:	2b00      	cmp	r3, #0
    dc22:	d006      	beq.n	dc32 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    dc24:	693b      	ldr	r3, [r7, #16]
    dc26:	68db      	ldr	r3, [r3, #12]
    dc28:	2b00      	cmp	r3, #0
    dc2a:	d102      	bne.n	dc32 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    dc2c:	f06f 0311 	mvn.w	r3, #17
    dc30:	e05f      	b.n	dcf2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    dc32:	693b      	ldr	r3, [r7, #16]
    dc34:	7cdb      	ldrb	r3, [r3, #19]
    dc36:	f003 0308 	and.w	r3, r3, #8
    dc3a:	b2db      	uxtb	r3, r3
    dc3c:	2b00      	cmp	r3, #0
    dc3e:	d001      	beq.n	dc44 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    dc40:	2302      	movs	r3, #2
    dc42:	e056      	b.n	dcf2 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    dc44:	f107 0308 	add.w	r3, r7, #8
    dc48:	4618      	mov	r0, r3
    dc4a:	4b2e      	ldr	r3, [pc, #184]	; (dd04 <_usb_d_dev_ep_trans+0x1b4>)
    dc4c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    dc4e:	693b      	ldr	r3, [r7, #16]
    dc50:	7cdb      	ldrb	r3, [r3, #19]
    dc52:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dc56:	b2db      	uxtb	r3, r3
    dc58:	2b00      	cmp	r3, #0
    dc5a:	d006      	beq.n	dc6a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    dc5c:	f107 0308 	add.w	r3, r7, #8
    dc60:	4618      	mov	r0, r3
    dc62:	4b29      	ldr	r3, [pc, #164]	; (dd08 <_usb_d_dev_ep_trans+0x1b8>)
    dc64:	4798      	blx	r3
		return USB_BUSY;
    dc66:	2301      	movs	r3, #1
    dc68:	e043      	b.n	dcf2 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    dc6a:	693a      	ldr	r2, [r7, #16]
    dc6c:	7cd3      	ldrb	r3, [r2, #19]
    dc6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dc72:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    dc74:	f107 0308 	add.w	r3, r7, #8
    dc78:	4618      	mov	r0, r3
    dc7a:	4b23      	ldr	r3, [pc, #140]	; (dd08 <_usb_d_dev_ep_trans+0x1b8>)
    dc7c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    dc7e:	687b      	ldr	r3, [r7, #4]
    dc80:	681a      	ldr	r2, [r3, #0]
    dc82:	693b      	ldr	r3, [r7, #16]
    dc84:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    dc86:	687b      	ldr	r3, [r7, #4]
    dc88:	685a      	ldr	r2, [r3, #4]
    dc8a:	693b      	ldr	r3, [r7, #16]
    dc8c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    dc8e:	693b      	ldr	r3, [r7, #16]
    dc90:	2200      	movs	r2, #0
    dc92:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    dc94:	693a      	ldr	r2, [r7, #16]
    dc96:	7cd3      	ldrb	r3, [r2, #19]
    dc98:	7d79      	ldrb	r1, [r7, #21]
    dc9a:	f361 13c7 	bfi	r3, r1, #7, #1
    dc9e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    dca0:	693a      	ldr	r2, [r7, #16]
    dca2:	7cd3      	ldrb	r3, [r2, #19]
    dca4:	7df9      	ldrb	r1, [r7, #23]
    dca6:	f361 1345 	bfi	r3, r1, #5, #1
    dcaa:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    dcac:	687b      	ldr	r3, [r7, #4]
    dcae:	7a5b      	ldrb	r3, [r3, #9]
    dcb0:	2b00      	cmp	r3, #0
    dcb2:	d007      	beq.n	dcc4 <_usb_d_dev_ep_trans+0x174>
    dcb4:	7b7b      	ldrb	r3, [r7, #13]
    dcb6:	f083 0301 	eor.w	r3, r3, #1
    dcba:	b2db      	uxtb	r3, r3
    dcbc:	2b00      	cmp	r3, #0
    dcbe:	d001      	beq.n	dcc4 <_usb_d_dev_ep_trans+0x174>
    dcc0:	2301      	movs	r3, #1
    dcc2:	e000      	b.n	dcc6 <_usb_d_dev_ep_trans+0x176>
    dcc4:	2300      	movs	r3, #0
    dcc6:	b2db      	uxtb	r3, r3
    dcc8:	f003 0301 	and.w	r3, r3, #1
    dccc:	b2d9      	uxtb	r1, r3
    dcce:	693a      	ldr	r2, [r7, #16]
    dcd0:	7cd3      	ldrb	r3, [r2, #19]
    dcd2:	f361 1304 	bfi	r3, r1, #4, #1
    dcd6:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    dcd8:	7d7b      	ldrb	r3, [r7, #21]
    dcda:	2b00      	cmp	r3, #0
    dcdc:	d004      	beq.n	dce8 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    dcde:	2100      	movs	r1, #0
    dce0:	6938      	ldr	r0, [r7, #16]
    dce2:	4b0a      	ldr	r3, [pc, #40]	; (dd0c <_usb_d_dev_ep_trans+0x1bc>)
    dce4:	4798      	blx	r3
    dce6:	e003      	b.n	dcf0 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    dce8:	2100      	movs	r1, #0
    dcea:	6938      	ldr	r0, [r7, #16]
    dcec:	4b08      	ldr	r3, [pc, #32]	; (dd10 <_usb_d_dev_ep_trans+0x1c0>)
    dcee:	4798      	blx	r3
	}

	return ERR_NONE;
    dcf0:	2300      	movs	r3, #0
}
    dcf2:	4618      	mov	r0, r3
    dcf4:	3718      	adds	r7, #24
    dcf6:	46bd      	mov	sp, r7
    dcf8:	bd80      	pop	{r7, pc}
    dcfa:	bf00      	nop
    dcfc:	0000c3c1 	.word	0x0000c3c1
    dd00:	20041fff 	.word	0x20041fff
    dd04:	0000e51d 	.word	0x0000e51d
    dd08:	0000e543 	.word	0x0000e543
    dd0c:	0000c689 	.word	0x0000c689
    dd10:	0000c8a1 	.word	0x0000c8a1

0000dd14 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    dd14:	b580      	push	{r7, lr}
    dd16:	b084      	sub	sp, #16
    dd18:	af00      	add	r7, sp, #0
    dd1a:	4603      	mov	r3, r0
    dd1c:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    dd1e:	79fb      	ldrb	r3, [r7, #7]
    dd20:	f003 030f 	and.w	r3, r3, #15
    dd24:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    dd26:	79fb      	ldrb	r3, [r7, #7]
    dd28:	f003 0380 	and.w	r3, r3, #128	; 0x80
    dd2c:	2b00      	cmp	r3, #0
    dd2e:	bf14      	ite	ne
    dd30:	2301      	movne	r3, #1
    dd32:	2300      	moveq	r3, #0
    dd34:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    dd36:	7bba      	ldrb	r2, [r7, #14]
    dd38:	7bfb      	ldrb	r3, [r7, #15]
    dd3a:	4611      	mov	r1, r2
    dd3c:	4618      	mov	r0, r3
    dd3e:	4b08      	ldr	r3, [pc, #32]	; (dd60 <_usb_d_dev_ep_abort+0x4c>)
    dd40:	4798      	blx	r3
    dd42:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    dd44:	7bfb      	ldrb	r3, [r7, #15]
    dd46:	2b04      	cmp	r3, #4
    dd48:	d806      	bhi.n	dd58 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    dd4a:	7bbb      	ldrb	r3, [r7, #14]
    dd4c:	2202      	movs	r2, #2
    dd4e:	4619      	mov	r1, r3
    dd50:	68b8      	ldr	r0, [r7, #8]
    dd52:	4b04      	ldr	r3, [pc, #16]	; (dd64 <_usb_d_dev_ep_abort+0x50>)
    dd54:	4798      	blx	r3
    dd56:	e000      	b.n	dd5a <_usb_d_dev_ep_abort+0x46>
		return;
    dd58:	bf00      	nop
}
    dd5a:	3710      	adds	r7, #16
    dd5c:	46bd      	mov	sp, r7
    dd5e:	bd80      	pop	{r7, pc}
    dd60:	0000c3c1 	.word	0x0000c3c1
    dd64:	0000d9f9 	.word	0x0000d9f9

0000dd68 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    dd68:	b480      	push	{r7}
    dd6a:	b085      	sub	sp, #20
    dd6c:	af00      	add	r7, sp, #0
    dd6e:	4603      	mov	r3, r0
    dd70:	6039      	str	r1, [r7, #0]
    dd72:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    dd74:	683b      	ldr	r3, [r7, #0]
    dd76:	2b00      	cmp	r3, #0
    dd78:	d001      	beq.n	dd7e <_usb_d_dev_register_callback+0x16>
    dd7a:	683b      	ldr	r3, [r7, #0]
    dd7c:	e000      	b.n	dd80 <_usb_d_dev_register_callback+0x18>
    dd7e:	4b0a      	ldr	r3, [pc, #40]	; (dda8 <_usb_d_dev_register_callback+0x40>)
    dd80:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    dd82:	79fb      	ldrb	r3, [r7, #7]
    dd84:	2b01      	cmp	r3, #1
    dd86:	d103      	bne.n	dd90 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    dd88:	4a08      	ldr	r2, [pc, #32]	; (ddac <_usb_d_dev_register_callback+0x44>)
    dd8a:	68fb      	ldr	r3, [r7, #12]
    dd8c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    dd8e:	e005      	b.n	dd9c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    dd90:	79fb      	ldrb	r3, [r7, #7]
    dd92:	2b00      	cmp	r3, #0
    dd94:	d102      	bne.n	dd9c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    dd96:	4a05      	ldr	r2, [pc, #20]	; (ddac <_usb_d_dev_register_callback+0x44>)
    dd98:	68fb      	ldr	r3, [r7, #12]
    dd9a:	6013      	str	r3, [r2, #0]
}
    dd9c:	bf00      	nop
    dd9e:	3714      	adds	r7, #20
    dda0:	46bd      	mov	sp, r7
    dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
    dda6:	4770      	bx	lr
    dda8:	0000bc49 	.word	0x0000bc49
    ddac:	200025fc 	.word	0x200025fc

0000ddb0 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    ddb0:	b480      	push	{r7}
    ddb2:	b085      	sub	sp, #20
    ddb4:	af00      	add	r7, sp, #0
    ddb6:	4603      	mov	r3, r0
    ddb8:	6039      	str	r1, [r7, #0]
    ddba:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ddbc:	683b      	ldr	r3, [r7, #0]
    ddbe:	2b00      	cmp	r3, #0
    ddc0:	d001      	beq.n	ddc6 <_usb_d_dev_register_ep_callback+0x16>
    ddc2:	683b      	ldr	r3, [r7, #0]
    ddc4:	e000      	b.n	ddc8 <_usb_d_dev_register_ep_callback+0x18>
    ddc6:	4b0e      	ldr	r3, [pc, #56]	; (de00 <_usb_d_dev_register_ep_callback+0x50>)
    ddc8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    ddca:	79fb      	ldrb	r3, [r7, #7]
    ddcc:	2b00      	cmp	r3, #0
    ddce:	d103      	bne.n	ddd8 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    ddd0:	4a0c      	ldr	r2, [pc, #48]	; (de04 <_usb_d_dev_register_ep_callback+0x54>)
    ddd2:	68fb      	ldr	r3, [r7, #12]
    ddd4:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    ddd6:	e00c      	b.n	ddf2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    ddd8:	79fb      	ldrb	r3, [r7, #7]
    ddda:	2b01      	cmp	r3, #1
    dddc:	d103      	bne.n	dde6 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    ddde:	4a09      	ldr	r2, [pc, #36]	; (de04 <_usb_d_dev_register_ep_callback+0x54>)
    dde0:	68fb      	ldr	r3, [r7, #12]
    dde2:	60d3      	str	r3, [r2, #12]
}
    dde4:	e005      	b.n	ddf2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    dde6:	79fb      	ldrb	r3, [r7, #7]
    dde8:	2b02      	cmp	r3, #2
    ddea:	d102      	bne.n	ddf2 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    ddec:	4a05      	ldr	r2, [pc, #20]	; (de04 <_usb_d_dev_register_ep_callback+0x54>)
    ddee:	68fb      	ldr	r3, [r7, #12]
    ddf0:	6113      	str	r3, [r2, #16]
}
    ddf2:	bf00      	nop
    ddf4:	3714      	adds	r7, #20
    ddf6:	46bd      	mov	sp, r7
    ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    ddfc:	4770      	bx	lr
    ddfe:	bf00      	nop
    de00:	0000bc49 	.word	0x0000bc49
    de04:	200025fc 	.word	0x200025fc

0000de08 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    de08:	b580      	push	{r7, lr}
    de0a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    de0c:	4b01      	ldr	r3, [pc, #4]	; (de14 <USB_0_Handler+0xc>)
    de0e:	4798      	blx	r3
}
    de10:	bf00      	nop
    de12:	bd80      	pop	{r7, pc}
    de14:	0000d079 	.word	0x0000d079

0000de18 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    de18:	b580      	push	{r7, lr}
    de1a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    de1c:	4b01      	ldr	r3, [pc, #4]	; (de24 <USB_1_Handler+0xc>)
    de1e:	4798      	blx	r3
}
    de20:	bf00      	nop
    de22:	bd80      	pop	{r7, pc}
    de24:	0000d079 	.word	0x0000d079

0000de28 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    de28:	b580      	push	{r7, lr}
    de2a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    de2c:	4b01      	ldr	r3, [pc, #4]	; (de34 <USB_2_Handler+0xc>)
    de2e:	4798      	blx	r3
}
    de30:	bf00      	nop
    de32:	bd80      	pop	{r7, pc}
    de34:	0000d079 	.word	0x0000d079

0000de38 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    de38:	b580      	push	{r7, lr}
    de3a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    de3c:	4b01      	ldr	r3, [pc, #4]	; (de44 <USB_3_Handler+0xc>)
    de3e:	4798      	blx	r3
}
    de40:	bf00      	nop
    de42:	bd80      	pop	{r7, pc}
    de44:	0000d079 	.word	0x0000d079

0000de48 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    de48:	b480      	push	{r7}
    de4a:	b083      	sub	sp, #12
    de4c:	af00      	add	r7, sp, #0
    de4e:	6078      	str	r0, [r7, #4]
    de50:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    de52:	bf00      	nop
    de54:	687b      	ldr	r3, [r7, #4]
    de56:	689a      	ldr	r2, [r3, #8]
    de58:	683b      	ldr	r3, [r7, #0]
    de5a:	4013      	ands	r3, r2
    de5c:	2b00      	cmp	r3, #0
    de5e:	d1f9      	bne.n	de54 <hri_wdt_wait_for_sync+0xc>
	};
}
    de60:	bf00      	nop
    de62:	370c      	adds	r7, #12
    de64:	46bd      	mov	sp, r7
    de66:	f85d 7b04 	ldr.w	r7, [sp], #4
    de6a:	4770      	bx	lr

0000de6c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    de6c:	b580      	push	{r7, lr}
    de6e:	b084      	sub	sp, #16
    de70:	af00      	add	r7, sp, #0
    de72:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    de74:	210e      	movs	r1, #14
    de76:	6878      	ldr	r0, [r7, #4]
    de78:	4b0a      	ldr	r3, [pc, #40]	; (dea4 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    de7a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    de7c:	687b      	ldr	r3, [r7, #4]
    de7e:	781b      	ldrb	r3, [r3, #0]
    de80:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    de82:	7bfb      	ldrb	r3, [r7, #15]
    de84:	085b      	lsrs	r3, r3, #1
    de86:	b2db      	uxtb	r3, r3
    de88:	f003 0301 	and.w	r3, r3, #1
    de8c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    de8e:	7bfb      	ldrb	r3, [r7, #15]
    de90:	2b00      	cmp	r3, #0
    de92:	bf14      	ite	ne
    de94:	2301      	movne	r3, #1
    de96:	2300      	moveq	r3, #0
    de98:	b2db      	uxtb	r3, r3
}
    de9a:	4618      	mov	r0, r3
    de9c:	3710      	adds	r7, #16
    de9e:	46bd      	mov	sp, r7
    dea0:	bd80      	pop	{r7, pc}
    dea2:	bf00      	nop
    dea4:	0000de49 	.word	0x0000de49

0000dea8 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    dea8:	b580      	push	{r7, lr}
    deaa:	b082      	sub	sp, #8
    deac:	af00      	add	r7, sp, #0
    deae:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    deb0:	687b      	ldr	r3, [r7, #4]
    deb2:	781b      	ldrb	r3, [r3, #0]
    deb4:	b2db      	uxtb	r3, r3
    deb6:	f023 0304 	bic.w	r3, r3, #4
    deba:	b2da      	uxtb	r2, r3
    debc:	687b      	ldr	r3, [r7, #4]
    debe:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    dec0:	210e      	movs	r1, #14
    dec2:	6878      	ldr	r0, [r7, #4]
    dec4:	4b02      	ldr	r3, [pc, #8]	; (ded0 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    dec6:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    dec8:	bf00      	nop
    deca:	3708      	adds	r7, #8
    decc:	46bd      	mov	sp, r7
    dece:	bd80      	pop	{r7, pc}
    ded0:	0000de49 	.word	0x0000de49

0000ded4 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    ded4:	b580      	push	{r7, lr}
    ded6:	b084      	sub	sp, #16
    ded8:	af00      	add	r7, sp, #0
    deda:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    dedc:	210e      	movs	r1, #14
    dede:	6878      	ldr	r0, [r7, #4]
    dee0:	4b08      	ldr	r3, [pc, #32]	; (df04 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    dee2:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    dee4:	687b      	ldr	r3, [r7, #4]
    dee6:	781b      	ldrb	r3, [r3, #0]
    dee8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    deea:	7bfb      	ldrb	r3, [r7, #15]
    deec:	09db      	lsrs	r3, r3, #7
    deee:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    def0:	7bfb      	ldrb	r3, [r7, #15]
    def2:	2b00      	cmp	r3, #0
    def4:	bf14      	ite	ne
    def6:	2301      	movne	r3, #1
    def8:	2300      	moveq	r3, #0
    defa:	b2db      	uxtb	r3, r3
}
    defc:	4618      	mov	r0, r3
    defe:	3710      	adds	r7, #16
    df00:	46bd      	mov	sp, r7
    df02:	bd80      	pop	{r7, pc}
    df04:	0000de49 	.word	0x0000de49

0000df08 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    df08:	b480      	push	{r7}
    df0a:	b085      	sub	sp, #20
    df0c:	af00      	add	r7, sp, #0
    df0e:	6078      	str	r0, [r7, #4]
    df10:	460b      	mov	r3, r1
    df12:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    df14:	687b      	ldr	r3, [r7, #4]
    df16:	785b      	ldrb	r3, [r3, #1]
    df18:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    df1a:	7bfb      	ldrb	r3, [r7, #15]
    df1c:	f023 030f 	bic.w	r3, r3, #15
    df20:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    df22:	78fb      	ldrb	r3, [r7, #3]
    df24:	f003 030f 	and.w	r3, r3, #15
    df28:	b2da      	uxtb	r2, r3
    df2a:	7bfb      	ldrb	r3, [r7, #15]
    df2c:	4313      	orrs	r3, r2
    df2e:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    df30:	687b      	ldr	r3, [r7, #4]
    df32:	7bfa      	ldrb	r2, [r7, #15]
    df34:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    df36:	bf00      	nop
    df38:	3714      	adds	r7, #20
    df3a:	46bd      	mov	sp, r7
    df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    df40:	4770      	bx	lr
	...

0000df44 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    df44:	b580      	push	{r7, lr}
    df46:	b082      	sub	sp, #8
    df48:	af00      	add	r7, sp, #0
    df4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    df4c:	687b      	ldr	r3, [r7, #4]
    df4e:	2b00      	cmp	r3, #0
    df50:	d005      	beq.n	df5e <_wdt_init+0x1a>
    df52:	687b      	ldr	r3, [r7, #4]
    df54:	681b      	ldr	r3, [r3, #0]
    df56:	2b00      	cmp	r3, #0
    df58:	d001      	beq.n	df5e <_wdt_init+0x1a>
    df5a:	2301      	movs	r3, #1
    df5c:	e000      	b.n	df60 <_wdt_init+0x1c>
    df5e:	2300      	movs	r3, #0
    df60:	f003 0301 	and.w	r3, r3, #1
    df64:	b2db      	uxtb	r3, r3
    df66:	2250      	movs	r2, #80	; 0x50
    df68:	4913      	ldr	r1, [pc, #76]	; (dfb8 <_wdt_init+0x74>)
    df6a:	4618      	mov	r0, r3
    df6c:	4b13      	ldr	r3, [pc, #76]	; (dfbc <_wdt_init+0x78>)
    df6e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    df70:	687b      	ldr	r3, [r7, #4]
    df72:	681b      	ldr	r3, [r3, #0]
    df74:	4618      	mov	r0, r3
    df76:	4b12      	ldr	r3, [pc, #72]	; (dfc0 <_wdt_init+0x7c>)
    df78:	4798      	blx	r3
    df7a:	4603      	mov	r3, r0
    df7c:	2b00      	cmp	r3, #0
    df7e:	d107      	bne.n	df90 <_wdt_init+0x4c>
    df80:	687b      	ldr	r3, [r7, #4]
    df82:	681b      	ldr	r3, [r3, #0]
    df84:	4618      	mov	r0, r3
    df86:	4b0f      	ldr	r3, [pc, #60]	; (dfc4 <_wdt_init+0x80>)
    df88:	4798      	blx	r3
    df8a:	4603      	mov	r3, r0
    df8c:	2b00      	cmp	r3, #0
    df8e:	d002      	beq.n	df96 <_wdt_init+0x52>
		return ERR_DENIED;
    df90:	f06f 0310 	mvn.w	r3, #16
    df94:	e00b      	b.n	dfae <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    df96:	687b      	ldr	r3, [r7, #4]
    df98:	681b      	ldr	r3, [r3, #0]
    df9a:	4618      	mov	r0, r3
    df9c:	4b0a      	ldr	r3, [pc, #40]	; (dfc8 <_wdt_init+0x84>)
    df9e:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    dfa0:	687b      	ldr	r3, [r7, #4]
    dfa2:	681b      	ldr	r3, [r3, #0]
    dfa4:	210b      	movs	r1, #11
    dfa6:	4618      	mov	r0, r3
    dfa8:	4b08      	ldr	r3, [pc, #32]	; (dfcc <_wdt_init+0x88>)
    dfaa:	4798      	blx	r3
	}

	return ERR_NONE;
    dfac:	2300      	movs	r3, #0
}
    dfae:	4618      	mov	r0, r3
    dfb0:	3708      	adds	r7, #8
    dfb2:	46bd      	mov	sp, r7
    dfb4:	bd80      	pop	{r7, pc}
    dfb6:	bf00      	nop
    dfb8:	0001a928 	.word	0x0001a928
    dfbc:	00006241 	.word	0x00006241
    dfc0:	0000ded5 	.word	0x0000ded5
    dfc4:	0000de6d 	.word	0x0000de6d
    dfc8:	0000dea9 	.word	0x0000dea9
    dfcc:	0000df09 	.word	0x0000df09

0000dfd0 <hri_port_set_DIR_reg>:
{
    dfd0:	b480      	push	{r7}
    dfd2:	b085      	sub	sp, #20
    dfd4:	af00      	add	r7, sp, #0
    dfd6:	60f8      	str	r0, [r7, #12]
    dfd8:	460b      	mov	r3, r1
    dfda:	607a      	str	r2, [r7, #4]
    dfdc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    dfde:	7afb      	ldrb	r3, [r7, #11]
    dfe0:	68fa      	ldr	r2, [r7, #12]
    dfe2:	01db      	lsls	r3, r3, #7
    dfe4:	4413      	add	r3, r2
    dfe6:	3308      	adds	r3, #8
    dfe8:	687a      	ldr	r2, [r7, #4]
    dfea:	601a      	str	r2, [r3, #0]
}
    dfec:	bf00      	nop
    dfee:	3714      	adds	r7, #20
    dff0:	46bd      	mov	sp, r7
    dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    dff6:	4770      	bx	lr

0000dff8 <hri_port_clear_DIR_reg>:
{
    dff8:	b480      	push	{r7}
    dffa:	b085      	sub	sp, #20
    dffc:	af00      	add	r7, sp, #0
    dffe:	60f8      	str	r0, [r7, #12]
    e000:	460b      	mov	r3, r1
    e002:	607a      	str	r2, [r7, #4]
    e004:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    e006:	7afb      	ldrb	r3, [r7, #11]
    e008:	68fa      	ldr	r2, [r7, #12]
    e00a:	01db      	lsls	r3, r3, #7
    e00c:	4413      	add	r3, r2
    e00e:	3304      	adds	r3, #4
    e010:	687a      	ldr	r2, [r7, #4]
    e012:	601a      	str	r2, [r3, #0]
}
    e014:	bf00      	nop
    e016:	3714      	adds	r7, #20
    e018:	46bd      	mov	sp, r7
    e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e01e:	4770      	bx	lr

0000e020 <hri_port_set_OUT_reg>:
{
    e020:	b480      	push	{r7}
    e022:	b085      	sub	sp, #20
    e024:	af00      	add	r7, sp, #0
    e026:	60f8      	str	r0, [r7, #12]
    e028:	460b      	mov	r3, r1
    e02a:	607a      	str	r2, [r7, #4]
    e02c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    e02e:	7afb      	ldrb	r3, [r7, #11]
    e030:	68fa      	ldr	r2, [r7, #12]
    e032:	01db      	lsls	r3, r3, #7
    e034:	4413      	add	r3, r2
    e036:	3318      	adds	r3, #24
    e038:	687a      	ldr	r2, [r7, #4]
    e03a:	601a      	str	r2, [r3, #0]
}
    e03c:	bf00      	nop
    e03e:	3714      	adds	r7, #20
    e040:	46bd      	mov	sp, r7
    e042:	f85d 7b04 	ldr.w	r7, [sp], #4
    e046:	4770      	bx	lr

0000e048 <hri_port_clear_OUT_reg>:
{
    e048:	b480      	push	{r7}
    e04a:	b085      	sub	sp, #20
    e04c:	af00      	add	r7, sp, #0
    e04e:	60f8      	str	r0, [r7, #12]
    e050:	460b      	mov	r3, r1
    e052:	607a      	str	r2, [r7, #4]
    e054:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    e056:	7afb      	ldrb	r3, [r7, #11]
    e058:	68fa      	ldr	r2, [r7, #12]
    e05a:	01db      	lsls	r3, r3, #7
    e05c:	4413      	add	r3, r2
    e05e:	3314      	adds	r3, #20
    e060:	687a      	ldr	r2, [r7, #4]
    e062:	601a      	str	r2, [r3, #0]
}
    e064:	bf00      	nop
    e066:	3714      	adds	r7, #20
    e068:	46bd      	mov	sp, r7
    e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e06e:	4770      	bx	lr

0000e070 <hri_port_write_PMUX_PMUXE_bf>:
{
    e070:	b480      	push	{r7}
    e072:	b085      	sub	sp, #20
    e074:	af00      	add	r7, sp, #0
    e076:	6078      	str	r0, [r7, #4]
    e078:	4608      	mov	r0, r1
    e07a:	4611      	mov	r1, r2
    e07c:	461a      	mov	r2, r3
    e07e:	4603      	mov	r3, r0
    e080:	70fb      	strb	r3, [r7, #3]
    e082:	460b      	mov	r3, r1
    e084:	70bb      	strb	r3, [r7, #2]
    e086:	4613      	mov	r3, r2
    e088:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    e08a:	78fa      	ldrb	r2, [r7, #3]
    e08c:	78bb      	ldrb	r3, [r7, #2]
    e08e:	6879      	ldr	r1, [r7, #4]
    e090:	01d2      	lsls	r2, r2, #7
    e092:	440a      	add	r2, r1
    e094:	4413      	add	r3, r2
    e096:	3330      	adds	r3, #48	; 0x30
    e098:	781b      	ldrb	r3, [r3, #0]
    e09a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    e09c:	7bfb      	ldrb	r3, [r7, #15]
    e09e:	f023 030f 	bic.w	r3, r3, #15
    e0a2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    e0a4:	787b      	ldrb	r3, [r7, #1]
    e0a6:	f003 030f 	and.w	r3, r3, #15
    e0aa:	b2da      	uxtb	r2, r3
    e0ac:	7bfb      	ldrb	r3, [r7, #15]
    e0ae:	4313      	orrs	r3, r2
    e0b0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    e0b2:	78fa      	ldrb	r2, [r7, #3]
    e0b4:	78bb      	ldrb	r3, [r7, #2]
    e0b6:	6879      	ldr	r1, [r7, #4]
    e0b8:	01d2      	lsls	r2, r2, #7
    e0ba:	440a      	add	r2, r1
    e0bc:	4413      	add	r3, r2
    e0be:	3330      	adds	r3, #48	; 0x30
    e0c0:	7bfa      	ldrb	r2, [r7, #15]
    e0c2:	701a      	strb	r2, [r3, #0]
}
    e0c4:	bf00      	nop
    e0c6:	3714      	adds	r7, #20
    e0c8:	46bd      	mov	sp, r7
    e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0ce:	4770      	bx	lr

0000e0d0 <hri_port_write_PMUX_PMUXO_bf>:
{
    e0d0:	b480      	push	{r7}
    e0d2:	b085      	sub	sp, #20
    e0d4:	af00      	add	r7, sp, #0
    e0d6:	6078      	str	r0, [r7, #4]
    e0d8:	4608      	mov	r0, r1
    e0da:	4611      	mov	r1, r2
    e0dc:	461a      	mov	r2, r3
    e0de:	4603      	mov	r3, r0
    e0e0:	70fb      	strb	r3, [r7, #3]
    e0e2:	460b      	mov	r3, r1
    e0e4:	70bb      	strb	r3, [r7, #2]
    e0e6:	4613      	mov	r3, r2
    e0e8:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    e0ea:	78fa      	ldrb	r2, [r7, #3]
    e0ec:	78bb      	ldrb	r3, [r7, #2]
    e0ee:	6879      	ldr	r1, [r7, #4]
    e0f0:	01d2      	lsls	r2, r2, #7
    e0f2:	440a      	add	r2, r1
    e0f4:	4413      	add	r3, r2
    e0f6:	3330      	adds	r3, #48	; 0x30
    e0f8:	781b      	ldrb	r3, [r3, #0]
    e0fa:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    e0fc:	7bfb      	ldrb	r3, [r7, #15]
    e0fe:	f003 030f 	and.w	r3, r3, #15
    e102:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    e104:	787b      	ldrb	r3, [r7, #1]
    e106:	011b      	lsls	r3, r3, #4
    e108:	b2da      	uxtb	r2, r3
    e10a:	7bfb      	ldrb	r3, [r7, #15]
    e10c:	4313      	orrs	r3, r2
    e10e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    e110:	78fa      	ldrb	r2, [r7, #3]
    e112:	78bb      	ldrb	r3, [r7, #2]
    e114:	6879      	ldr	r1, [r7, #4]
    e116:	01d2      	lsls	r2, r2, #7
    e118:	440a      	add	r2, r1
    e11a:	4413      	add	r3, r2
    e11c:	3330      	adds	r3, #48	; 0x30
    e11e:	7bfa      	ldrb	r2, [r7, #15]
    e120:	701a      	strb	r2, [r3, #0]
}
    e122:	bf00      	nop
    e124:	3714      	adds	r7, #20
    e126:	46bd      	mov	sp, r7
    e128:	f85d 7b04 	ldr.w	r7, [sp], #4
    e12c:	4770      	bx	lr

0000e12e <hri_port_write_PINCFG_PMUXEN_bit>:
{
    e12e:	b480      	push	{r7}
    e130:	b085      	sub	sp, #20
    e132:	af00      	add	r7, sp, #0
    e134:	6078      	str	r0, [r7, #4]
    e136:	4608      	mov	r0, r1
    e138:	4611      	mov	r1, r2
    e13a:	461a      	mov	r2, r3
    e13c:	4603      	mov	r3, r0
    e13e:	70fb      	strb	r3, [r7, #3]
    e140:	460b      	mov	r3, r1
    e142:	70bb      	strb	r3, [r7, #2]
    e144:	4613      	mov	r3, r2
    e146:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    e148:	78fa      	ldrb	r2, [r7, #3]
    e14a:	78bb      	ldrb	r3, [r7, #2]
    e14c:	6879      	ldr	r1, [r7, #4]
    e14e:	01d2      	lsls	r2, r2, #7
    e150:	440a      	add	r2, r1
    e152:	4413      	add	r3, r2
    e154:	3340      	adds	r3, #64	; 0x40
    e156:	781b      	ldrb	r3, [r3, #0]
    e158:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    e15a:	7bfb      	ldrb	r3, [r7, #15]
    e15c:	f023 0301 	bic.w	r3, r3, #1
    e160:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    e162:	787a      	ldrb	r2, [r7, #1]
    e164:	7bfb      	ldrb	r3, [r7, #15]
    e166:	4313      	orrs	r3, r2
    e168:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    e16a:	78fa      	ldrb	r2, [r7, #3]
    e16c:	78bb      	ldrb	r3, [r7, #2]
    e16e:	6879      	ldr	r1, [r7, #4]
    e170:	01d2      	lsls	r2, r2, #7
    e172:	440a      	add	r2, r1
    e174:	4413      	add	r3, r2
    e176:	3340      	adds	r3, #64	; 0x40
    e178:	7bfa      	ldrb	r2, [r7, #15]
    e17a:	701a      	strb	r2, [r3, #0]
}
    e17c:	bf00      	nop
    e17e:	3714      	adds	r7, #20
    e180:	46bd      	mov	sp, r7
    e182:	f85d 7b04 	ldr.w	r7, [sp], #4
    e186:	4770      	bx	lr

0000e188 <hri_port_write_WRCONFIG_reg>:
{
    e188:	b480      	push	{r7}
    e18a:	b085      	sub	sp, #20
    e18c:	af00      	add	r7, sp, #0
    e18e:	60f8      	str	r0, [r7, #12]
    e190:	460b      	mov	r3, r1
    e192:	607a      	str	r2, [r7, #4]
    e194:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    e196:	7afb      	ldrb	r3, [r7, #11]
    e198:	68fa      	ldr	r2, [r7, #12]
    e19a:	01db      	lsls	r3, r3, #7
    e19c:	4413      	add	r3, r2
    e19e:	3328      	adds	r3, #40	; 0x28
    e1a0:	687a      	ldr	r2, [r7, #4]
    e1a2:	601a      	str	r2, [r3, #0]
}
    e1a4:	bf00      	nop
    e1a6:	3714      	adds	r7, #20
    e1a8:	46bd      	mov	sp, r7
    e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1ae:	4770      	bx	lr

0000e1b0 <_gpio_set_direction>:
{
    e1b0:	b580      	push	{r7, lr}
    e1b2:	b082      	sub	sp, #8
    e1b4:	af00      	add	r7, sp, #0
    e1b6:	4603      	mov	r3, r0
    e1b8:	6039      	str	r1, [r7, #0]
    e1ba:	71fb      	strb	r3, [r7, #7]
    e1bc:	4613      	mov	r3, r2
    e1be:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    e1c0:	79bb      	ldrb	r3, [r7, #6]
    e1c2:	2b01      	cmp	r3, #1
    e1c4:	d01c      	beq.n	e200 <_gpio_set_direction+0x50>
    e1c6:	2b02      	cmp	r3, #2
    e1c8:	d037      	beq.n	e23a <_gpio_set_direction+0x8a>
    e1ca:	2b00      	cmp	r3, #0
    e1cc:	d14e      	bne.n	e26c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    e1ce:	79fb      	ldrb	r3, [r7, #7]
    e1d0:	683a      	ldr	r2, [r7, #0]
    e1d2:	4619      	mov	r1, r3
    e1d4:	482a      	ldr	r0, [pc, #168]	; (e280 <_gpio_set_direction+0xd0>)
    e1d6:	4b2b      	ldr	r3, [pc, #172]	; (e284 <_gpio_set_direction+0xd4>)
    e1d8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    e1da:	683b      	ldr	r3, [r7, #0]
    e1dc:	b29b      	uxth	r3, r3
    e1de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e1e2:	79fb      	ldrb	r3, [r7, #7]
    e1e4:	4619      	mov	r1, r3
    e1e6:	4826      	ldr	r0, [pc, #152]	; (e280 <_gpio_set_direction+0xd0>)
    e1e8:	4b27      	ldr	r3, [pc, #156]	; (e288 <_gpio_set_direction+0xd8>)
    e1ea:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    e1ec:	683b      	ldr	r3, [r7, #0]
    e1ee:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    e1f0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    e1f4:	79fb      	ldrb	r3, [r7, #7]
    e1f6:	4619      	mov	r1, r3
    e1f8:	4821      	ldr	r0, [pc, #132]	; (e280 <_gpio_set_direction+0xd0>)
    e1fa:	4b23      	ldr	r3, [pc, #140]	; (e288 <_gpio_set_direction+0xd8>)
    e1fc:	4798      	blx	r3
		break;
    e1fe:	e03a      	b.n	e276 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    e200:	79fb      	ldrb	r3, [r7, #7]
    e202:	683a      	ldr	r2, [r7, #0]
    e204:	4619      	mov	r1, r3
    e206:	481e      	ldr	r0, [pc, #120]	; (e280 <_gpio_set_direction+0xd0>)
    e208:	4b1e      	ldr	r3, [pc, #120]	; (e284 <_gpio_set_direction+0xd4>)
    e20a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    e20c:	683b      	ldr	r3, [r7, #0]
    e20e:	b29b      	uxth	r3, r3
    e210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    e214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    e218:	79f9      	ldrb	r1, [r7, #7]
    e21a:	461a      	mov	r2, r3
    e21c:	4818      	ldr	r0, [pc, #96]	; (e280 <_gpio_set_direction+0xd0>)
    e21e:	4b1a      	ldr	r3, [pc, #104]	; (e288 <_gpio_set_direction+0xd8>)
    e220:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    e222:	683b      	ldr	r3, [r7, #0]
    e224:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    e226:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    e22a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    e22e:	79f9      	ldrb	r1, [r7, #7]
    e230:	461a      	mov	r2, r3
    e232:	4813      	ldr	r0, [pc, #76]	; (e280 <_gpio_set_direction+0xd0>)
    e234:	4b14      	ldr	r3, [pc, #80]	; (e288 <_gpio_set_direction+0xd8>)
    e236:	4798      	blx	r3
		break;
    e238:	e01d      	b.n	e276 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    e23a:	79fb      	ldrb	r3, [r7, #7]
    e23c:	683a      	ldr	r2, [r7, #0]
    e23e:	4619      	mov	r1, r3
    e240:	480f      	ldr	r0, [pc, #60]	; (e280 <_gpio_set_direction+0xd0>)
    e242:	4b12      	ldr	r3, [pc, #72]	; (e28c <_gpio_set_direction+0xdc>)
    e244:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    e246:	683b      	ldr	r3, [r7, #0]
    e248:	b29b      	uxth	r3, r3
    e24a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e24e:	79fb      	ldrb	r3, [r7, #7]
    e250:	4619      	mov	r1, r3
    e252:	480b      	ldr	r0, [pc, #44]	; (e280 <_gpio_set_direction+0xd0>)
    e254:	4b0c      	ldr	r3, [pc, #48]	; (e288 <_gpio_set_direction+0xd8>)
    e256:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    e258:	683b      	ldr	r3, [r7, #0]
    e25a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    e25c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    e260:	79fb      	ldrb	r3, [r7, #7]
    e262:	4619      	mov	r1, r3
    e264:	4806      	ldr	r0, [pc, #24]	; (e280 <_gpio_set_direction+0xd0>)
    e266:	4b08      	ldr	r3, [pc, #32]	; (e288 <_gpio_set_direction+0xd8>)
    e268:	4798      	blx	r3
		break;
    e26a:	e004      	b.n	e276 <_gpio_set_direction+0xc6>
		ASSERT(false);
    e26c:	2246      	movs	r2, #70	; 0x46
    e26e:	4908      	ldr	r1, [pc, #32]	; (e290 <_gpio_set_direction+0xe0>)
    e270:	2000      	movs	r0, #0
    e272:	4b08      	ldr	r3, [pc, #32]	; (e294 <_gpio_set_direction+0xe4>)
    e274:	4798      	blx	r3
}
    e276:	bf00      	nop
    e278:	3708      	adds	r7, #8
    e27a:	46bd      	mov	sp, r7
    e27c:	bd80      	pop	{r7, pc}
    e27e:	bf00      	nop
    e280:	41008000 	.word	0x41008000
    e284:	0000dff9 	.word	0x0000dff9
    e288:	0000e189 	.word	0x0000e189
    e28c:	0000dfd1 	.word	0x0000dfd1
    e290:	0001a940 	.word	0x0001a940
    e294:	00006241 	.word	0x00006241

0000e298 <_gpio_set_level>:
{
    e298:	b580      	push	{r7, lr}
    e29a:	b082      	sub	sp, #8
    e29c:	af00      	add	r7, sp, #0
    e29e:	4603      	mov	r3, r0
    e2a0:	6039      	str	r1, [r7, #0]
    e2a2:	71fb      	strb	r3, [r7, #7]
    e2a4:	4613      	mov	r3, r2
    e2a6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    e2a8:	79bb      	ldrb	r3, [r7, #6]
    e2aa:	2b00      	cmp	r3, #0
    e2ac:	d006      	beq.n	e2bc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    e2ae:	79fb      	ldrb	r3, [r7, #7]
    e2b0:	683a      	ldr	r2, [r7, #0]
    e2b2:	4619      	mov	r1, r3
    e2b4:	4806      	ldr	r0, [pc, #24]	; (e2d0 <_gpio_set_level+0x38>)
    e2b6:	4b07      	ldr	r3, [pc, #28]	; (e2d4 <_gpio_set_level+0x3c>)
    e2b8:	4798      	blx	r3
}
    e2ba:	e005      	b.n	e2c8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e2bc:	79fb      	ldrb	r3, [r7, #7]
    e2be:	683a      	ldr	r2, [r7, #0]
    e2c0:	4619      	mov	r1, r3
    e2c2:	4803      	ldr	r0, [pc, #12]	; (e2d0 <_gpio_set_level+0x38>)
    e2c4:	4b04      	ldr	r3, [pc, #16]	; (e2d8 <_gpio_set_level+0x40>)
    e2c6:	4798      	blx	r3
}
    e2c8:	bf00      	nop
    e2ca:	3708      	adds	r7, #8
    e2cc:	46bd      	mov	sp, r7
    e2ce:	bd80      	pop	{r7, pc}
    e2d0:	41008000 	.word	0x41008000
    e2d4:	0000e021 	.word	0x0000e021
    e2d8:	0000e049 	.word	0x0000e049

0000e2dc <_gpio_set_pin_function>:
{
    e2dc:	b590      	push	{r4, r7, lr}
    e2de:	b085      	sub	sp, #20
    e2e0:	af00      	add	r7, sp, #0
    e2e2:	6078      	str	r0, [r7, #4]
    e2e4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    e2e6:	687b      	ldr	r3, [r7, #4]
    e2e8:	095b      	lsrs	r3, r3, #5
    e2ea:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    e2ec:	687b      	ldr	r3, [r7, #4]
    e2ee:	b2db      	uxtb	r3, r3
    e2f0:	f003 031f 	and.w	r3, r3, #31
    e2f4:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    e2f6:	683b      	ldr	r3, [r7, #0]
    e2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
    e2fc:	d106      	bne.n	e30c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    e2fe:	7bba      	ldrb	r2, [r7, #14]
    e300:	7bf9      	ldrb	r1, [r7, #15]
    e302:	2300      	movs	r3, #0
    e304:	4812      	ldr	r0, [pc, #72]	; (e350 <_gpio_set_pin_function+0x74>)
    e306:	4c13      	ldr	r4, [pc, #76]	; (e354 <_gpio_set_pin_function+0x78>)
    e308:	47a0      	blx	r4
}
    e30a:	e01d      	b.n	e348 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    e30c:	7bba      	ldrb	r2, [r7, #14]
    e30e:	7bf9      	ldrb	r1, [r7, #15]
    e310:	2301      	movs	r3, #1
    e312:	480f      	ldr	r0, [pc, #60]	; (e350 <_gpio_set_pin_function+0x74>)
    e314:	4c0f      	ldr	r4, [pc, #60]	; (e354 <_gpio_set_pin_function+0x78>)
    e316:	47a0      	blx	r4
		if (pin & 1) {
    e318:	7bbb      	ldrb	r3, [r7, #14]
    e31a:	f003 0301 	and.w	r3, r3, #1
    e31e:	2b00      	cmp	r3, #0
    e320:	d009      	beq.n	e336 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    e322:	7bbb      	ldrb	r3, [r7, #14]
    e324:	085b      	lsrs	r3, r3, #1
    e326:	b2da      	uxtb	r2, r3
    e328:	683b      	ldr	r3, [r7, #0]
    e32a:	b2db      	uxtb	r3, r3
    e32c:	7bf9      	ldrb	r1, [r7, #15]
    e32e:	4808      	ldr	r0, [pc, #32]	; (e350 <_gpio_set_pin_function+0x74>)
    e330:	4c09      	ldr	r4, [pc, #36]	; (e358 <_gpio_set_pin_function+0x7c>)
    e332:	47a0      	blx	r4
}
    e334:	e008      	b.n	e348 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    e336:	7bbb      	ldrb	r3, [r7, #14]
    e338:	085b      	lsrs	r3, r3, #1
    e33a:	b2da      	uxtb	r2, r3
    e33c:	683b      	ldr	r3, [r7, #0]
    e33e:	b2db      	uxtb	r3, r3
    e340:	7bf9      	ldrb	r1, [r7, #15]
    e342:	4803      	ldr	r0, [pc, #12]	; (e350 <_gpio_set_pin_function+0x74>)
    e344:	4c05      	ldr	r4, [pc, #20]	; (e35c <_gpio_set_pin_function+0x80>)
    e346:	47a0      	blx	r4
}
    e348:	bf00      	nop
    e34a:	3714      	adds	r7, #20
    e34c:	46bd      	mov	sp, r7
    e34e:	bd90      	pop	{r4, r7, pc}
    e350:	41008000 	.word	0x41008000
    e354:	0000e12f 	.word	0x0000e12f
    e358:	0000e0d1 	.word	0x0000e0d1
    e35c:	0000e071 	.word	0x0000e071

0000e360 <gpio_set_pin_function>:
{
    e360:	b580      	push	{r7, lr}
    e362:	b082      	sub	sp, #8
    e364:	af00      	add	r7, sp, #0
    e366:	6078      	str	r0, [r7, #4]
    e368:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    e36a:	6839      	ldr	r1, [r7, #0]
    e36c:	6878      	ldr	r0, [r7, #4]
    e36e:	4b03      	ldr	r3, [pc, #12]	; (e37c <gpio_set_pin_function+0x1c>)
    e370:	4798      	blx	r3
}
    e372:	bf00      	nop
    e374:	3708      	adds	r7, #8
    e376:	46bd      	mov	sp, r7
    e378:	bd80      	pop	{r7, pc}
    e37a:	bf00      	nop
    e37c:	0000e2dd 	.word	0x0000e2dd

0000e380 <gpio_set_pin_direction>:
{
    e380:	b580      	push	{r7, lr}
    e382:	b082      	sub	sp, #8
    e384:	af00      	add	r7, sp, #0
    e386:	4603      	mov	r3, r0
    e388:	460a      	mov	r2, r1
    e38a:	71fb      	strb	r3, [r7, #7]
    e38c:	4613      	mov	r3, r2
    e38e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    e390:	79fb      	ldrb	r3, [r7, #7]
    e392:	095b      	lsrs	r3, r3, #5
    e394:	b2d8      	uxtb	r0, r3
    e396:	79fb      	ldrb	r3, [r7, #7]
    e398:	f003 031f 	and.w	r3, r3, #31
    e39c:	2201      	movs	r2, #1
    e39e:	fa02 f303 	lsl.w	r3, r2, r3
    e3a2:	79ba      	ldrb	r2, [r7, #6]
    e3a4:	4619      	mov	r1, r3
    e3a6:	4b03      	ldr	r3, [pc, #12]	; (e3b4 <gpio_set_pin_direction+0x34>)
    e3a8:	4798      	blx	r3
}
    e3aa:	bf00      	nop
    e3ac:	3708      	adds	r7, #8
    e3ae:	46bd      	mov	sp, r7
    e3b0:	bd80      	pop	{r7, pc}
    e3b2:	bf00      	nop
    e3b4:	0000e1b1 	.word	0x0000e1b1

0000e3b8 <gpio_set_pin_level>:
{
    e3b8:	b580      	push	{r7, lr}
    e3ba:	b082      	sub	sp, #8
    e3bc:	af00      	add	r7, sp, #0
    e3be:	4603      	mov	r3, r0
    e3c0:	460a      	mov	r2, r1
    e3c2:	71fb      	strb	r3, [r7, #7]
    e3c4:	4613      	mov	r3, r2
    e3c6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e3c8:	79fb      	ldrb	r3, [r7, #7]
    e3ca:	095b      	lsrs	r3, r3, #5
    e3cc:	b2d8      	uxtb	r0, r3
    e3ce:	79fb      	ldrb	r3, [r7, #7]
    e3d0:	f003 031f 	and.w	r3, r3, #31
    e3d4:	2201      	movs	r2, #1
    e3d6:	fa02 f303 	lsl.w	r3, r2, r3
    e3da:	79ba      	ldrb	r2, [r7, #6]
    e3dc:	4619      	mov	r1, r3
    e3de:	4b03      	ldr	r3, [pc, #12]	; (e3ec <gpio_set_pin_level+0x34>)
    e3e0:	4798      	blx	r3
}
    e3e2:	bf00      	nop
    e3e4:	3708      	adds	r7, #8
    e3e6:	46bd      	mov	sp, r7
    e3e8:	bd80      	pop	{r7, pc}
    e3ea:	bf00      	nop
    e3ec:	0000e299 	.word	0x0000e299

0000e3f0 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    e3f0:	b580      	push	{r7, lr}
    e3f2:	b082      	sub	sp, #8
    e3f4:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    e3f6:	2100      	movs	r1, #0
    e3f8:	2008      	movs	r0, #8
    e3fa:	4b24      	ldr	r3, [pc, #144]	; (e48c <QSPI_N25Q256_exit_xip+0x9c>)
    e3fc:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    e3fe:	2100      	movs	r1, #0
    e400:	202b      	movs	r0, #43	; 0x2b
    e402:	4b22      	ldr	r3, [pc, #136]	; (e48c <QSPI_N25Q256_exit_xip+0x9c>)
    e404:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    e406:	2100      	movs	r1, #0
    e408:	202a      	movs	r0, #42	; 0x2a
    e40a:	4b20      	ldr	r3, [pc, #128]	; (e48c <QSPI_N25Q256_exit_xip+0x9c>)
    e40c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    e40e:	2102      	movs	r1, #2
    e410:	2008      	movs	r0, #8
    e412:	4b1f      	ldr	r3, [pc, #124]	; (e490 <QSPI_N25Q256_exit_xip+0xa0>)
    e414:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    e416:	2102      	movs	r1, #2
    e418:	202b      	movs	r0, #43	; 0x2b
    e41a:	4b1d      	ldr	r3, [pc, #116]	; (e490 <QSPI_N25Q256_exit_xip+0xa0>)
    e41c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    e41e:	2102      	movs	r1, #2
    e420:	202a      	movs	r0, #42	; 0x2a
    e422:	4b1b      	ldr	r3, [pc, #108]	; (e490 <QSPI_N25Q256_exit_xip+0xa0>)
    e424:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    e426:	2101      	movs	r1, #1
    e428:	2008      	movs	r0, #8
    e42a:	4b1a      	ldr	r3, [pc, #104]	; (e494 <QSPI_N25Q256_exit_xip+0xa4>)
    e42c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    e42e:	2100      	movs	r1, #0
    e430:	202b      	movs	r0, #43	; 0x2b
    e432:	4b18      	ldr	r3, [pc, #96]	; (e494 <QSPI_N25Q256_exit_xip+0xa4>)
    e434:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    e436:	2100      	movs	r1, #0
    e438:	202a      	movs	r0, #42	; 0x2a
    e43a:	4b16      	ldr	r3, [pc, #88]	; (e494 <QSPI_N25Q256_exit_xip+0xa4>)
    e43c:	4798      	blx	r3

	delay_us(1);
    e43e:	2001      	movs	r0, #1
    e440:	4b15      	ldr	r3, [pc, #84]	; (e498 <QSPI_N25Q256_exit_xip+0xa8>)
    e442:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    e444:	2300      	movs	r3, #0
    e446:	607b      	str	r3, [r7, #4]
    e448:	e010      	b.n	e46c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    e44a:	2101      	movs	r1, #1
    e44c:	202a      	movs	r0, #42	; 0x2a
    e44e:	4b11      	ldr	r3, [pc, #68]	; (e494 <QSPI_N25Q256_exit_xip+0xa4>)
    e450:	4798      	blx	r3
		delay_us(1);
    e452:	2001      	movs	r0, #1
    e454:	4b10      	ldr	r3, [pc, #64]	; (e498 <QSPI_N25Q256_exit_xip+0xa8>)
    e456:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    e458:	2100      	movs	r1, #0
    e45a:	202a      	movs	r0, #42	; 0x2a
    e45c:	4b0d      	ldr	r3, [pc, #52]	; (e494 <QSPI_N25Q256_exit_xip+0xa4>)
    e45e:	4798      	blx	r3
		delay_us(1);
    e460:	2001      	movs	r0, #1
    e462:	4b0d      	ldr	r3, [pc, #52]	; (e498 <QSPI_N25Q256_exit_xip+0xa8>)
    e464:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    e466:	687b      	ldr	r3, [r7, #4]
    e468:	3301      	adds	r3, #1
    e46a:	607b      	str	r3, [r7, #4]
    e46c:	687b      	ldr	r3, [r7, #4]
    e46e:	2b06      	cmp	r3, #6
    e470:	ddeb      	ble.n	e44a <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    e472:	2101      	movs	r1, #1
    e474:	202b      	movs	r0, #43	; 0x2b
    e476:	4b07      	ldr	r3, [pc, #28]	; (e494 <QSPI_N25Q256_exit_xip+0xa4>)
    e478:	4798      	blx	r3
	delay_us(1);
    e47a:	2001      	movs	r0, #1
    e47c:	4b06      	ldr	r3, [pc, #24]	; (e498 <QSPI_N25Q256_exit_xip+0xa8>)
    e47e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    e480:	4b06      	ldr	r3, [pc, #24]	; (e49c <QSPI_N25Q256_exit_xip+0xac>)
    e482:	4798      	blx	r3
}
    e484:	bf00      	nop
    e486:	3708      	adds	r7, #8
    e488:	46bd      	mov	sp, r7
    e48a:	bd80      	pop	{r7, pc}
    e48c:	0000e361 	.word	0x0000e361
    e490:	0000e381 	.word	0x0000e381
    e494:	0000e3b9 	.word	0x0000e3b9
    e498:	00004649 	.word	0x00004649
    e49c:	000036a5 	.word	0x000036a5

0000e4a0 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    e4a0:	b598      	push	{r3, r4, r7, lr}
    e4a2:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    e4a4:	4806      	ldr	r0, [pc, #24]	; (e4c0 <spi_nor_flash_init+0x20>)
    e4a6:	4b07      	ldr	r3, [pc, #28]	; (e4c4 <spi_nor_flash_init+0x24>)
    e4a8:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    e4aa:	2300      	movs	r3, #0
    e4ac:	4a06      	ldr	r2, [pc, #24]	; (e4c8 <spi_nor_flash_init+0x28>)
    e4ae:	4904      	ldr	r1, [pc, #16]	; (e4c0 <spi_nor_flash_init+0x20>)
    e4b0:	4806      	ldr	r0, [pc, #24]	; (e4cc <spi_nor_flash_init+0x2c>)
    e4b2:	4c07      	ldr	r4, [pc, #28]	; (e4d0 <spi_nor_flash_init+0x30>)
    e4b4:	47a0      	blx	r4
    e4b6:	4602      	mov	r2, r0
    e4b8:	4b06      	ldr	r3, [pc, #24]	; (e4d4 <spi_nor_flash_init+0x34>)
    e4ba:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    e4bc:	bf00      	nop
    e4be:	bd98      	pop	{r3, r4, r7, pc}
    e4c0:	20003f70 	.word	0x20003f70
    e4c4:	00004d19 	.word	0x00004d19
    e4c8:	0000e3f1 	.word	0x0000e3f1
    e4cc:	20002764 	.word	0x20002764
    e4d0:	0000e90d 	.word	0x0000e90d
    e4d4:	20004110 	.word	0x20004110

0000e4d8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    e4d8:	b580      	push	{r7, lr}
    e4da:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    e4dc:	4805      	ldr	r0, [pc, #20]	; (e4f4 <cdc_device_acm_init+0x1c>)
    e4de:	4b06      	ldr	r3, [pc, #24]	; (e4f8 <cdc_device_acm_init+0x20>)
    e4e0:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    e4e2:	4b06      	ldr	r3, [pc, #24]	; (e4fc <cdc_device_acm_init+0x24>)
    e4e4:	4798      	blx	r3

	usbdc_start(single_desc);
    e4e6:	4806      	ldr	r0, [pc, #24]	; (e500 <cdc_device_acm_init+0x28>)
    e4e8:	4b06      	ldr	r3, [pc, #24]	; (e504 <cdc_device_acm_init+0x2c>)
    e4ea:	4798      	blx	r3
	usbdc_attach();
    e4ec:	4b06      	ldr	r3, [pc, #24]	; (e508 <cdc_device_acm_init+0x30>)
    e4ee:	4798      	blx	r3
}
    e4f0:	bf00      	nop
    e4f2:	bd80      	pop	{r7, pc}
    e4f4:	200027b4 	.word	0x200027b4
    e4f8:	00010035 	.word	0x00010035
    e4fc:	0000f2ad 	.word	0x0000f2ad
    e500:	20000168 	.word	0x20000168
    e504:	000100d1 	.word	0x000100d1
    e508:	00010121 	.word	0x00010121

0000e50c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    e50c:	b580      	push	{r7, lr}
    e50e:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    e510:	4b01      	ldr	r3, [pc, #4]	; (e518 <usb_init+0xc>)
    e512:	4798      	blx	r3
}
    e514:	bf00      	nop
    e516:	bd80      	pop	{r7, pc}
    e518:	0000e4d9 	.word	0x0000e4d9

0000e51c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    e51c:	b480      	push	{r7}
    e51e:	b085      	sub	sp, #20
    e520:	af00      	add	r7, sp, #0
    e522:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e524:	f3ef 8310 	mrs	r3, PRIMASK
    e528:	60fb      	str	r3, [r7, #12]
  return(result);
    e52a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    e52c:	687b      	ldr	r3, [r7, #4]
    e52e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    e530:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e532:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    e536:	bf00      	nop
    e538:	3714      	adds	r7, #20
    e53a:	46bd      	mov	sp, r7
    e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e540:	4770      	bx	lr

0000e542 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    e542:	b480      	push	{r7}
    e544:	b085      	sub	sp, #20
    e546:	af00      	add	r7, sp, #0
    e548:	6078      	str	r0, [r7, #4]
    e54a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    e54e:	687b      	ldr	r3, [r7, #4]
    e550:	681b      	ldr	r3, [r3, #0]
    e552:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e554:	68fb      	ldr	r3, [r7, #12]
    e556:	f383 8810 	msr	PRIMASK, r3
}
    e55a:	bf00      	nop
    e55c:	3714      	adds	r7, #20
    e55e:	46bd      	mov	sp, r7
    e560:	f85d 7b04 	ldr.w	r7, [sp], #4
    e564:	4770      	bx	lr
	...

0000e568 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    e568:	b580      	push	{r7, lr}
    e56a:	b08c      	sub	sp, #48	; 0x30
    e56c:	af00      	add	r7, sp, #0
    e56e:	6078      	str	r0, [r7, #4]
    e570:	460b      	mov	r3, r1
    e572:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e574:	687b      	ldr	r3, [r7, #4]
    e576:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e578:	687b      	ldr	r3, [r7, #4]
    e57a:	681b      	ldr	r3, [r3, #0]
    e57c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    e57e:	f107 030c 	add.w	r3, r7, #12
    e582:	2200      	movs	r2, #0
    e584:	601a      	str	r2, [r3, #0]
    e586:	605a      	str	r2, [r3, #4]
    e588:	609a      	str	r2, [r3, #8]
    e58a:	60da      	str	r2, [r3, #12]
    e58c:	611a      	str	r2, [r3, #16]
    e58e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    e590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e592:	7b1b      	ldrb	r3, [r3, #12]
    e594:	2b00      	cmp	r3, #0
    e596:	d001      	beq.n	e59c <n25q256a_xip_confirm+0x34>
    e598:	2206      	movs	r2, #6
    e59a:	e000      	b.n	e59e <n25q256a_xip_confirm+0x36>
    e59c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    e59e:	7b3b      	ldrb	r3, [r7, #12]
    e5a0:	f362 0302 	bfi	r3, r2, #0, #3
    e5a4:	733b      	strb	r3, [r7, #12]
    e5a6:	7b3b      	ldrb	r3, [r7, #12]
    e5a8:	f043 0310 	orr.w	r3, r3, #16
    e5ac:	733b      	strb	r3, [r7, #12]
    e5ae:	7b3b      	ldrb	r3, [r7, #12]
    e5b0:	f043 0320 	orr.w	r3, r3, #32
    e5b4:	733b      	strb	r3, [r7, #12]
    e5b6:	7b3b      	ldrb	r3, [r7, #12]
    e5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e5bc:	733b      	strb	r3, [r7, #12]
    e5be:	7b3b      	ldrb	r3, [r7, #12]
    e5c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e5c4:	733b      	strb	r3, [r7, #12]
    e5c6:	7b7b      	ldrb	r3, [r7, #13]
    e5c8:	f043 0303 	orr.w	r3, r3, #3
    e5cc:	737b      	strb	r3, [r7, #13]
    e5ce:	7b7b      	ldrb	r3, [r7, #13]
    e5d0:	2201      	movs	r2, #1
    e5d2:	f362 1305 	bfi	r3, r2, #4, #2
    e5d6:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    e5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e5da:	7b1b      	ldrb	r3, [r3, #12]
    e5dc:	2b00      	cmp	r3, #0
    e5de:	d001      	beq.n	e5e4 <n25q256a_xip_confirm+0x7c>
    e5e0:	2208      	movs	r2, #8
    e5e2:	e000      	b.n	e5e6 <n25q256a_xip_confirm+0x7e>
    e5e4:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    e5e6:	7bbb      	ldrb	r3, [r7, #14]
    e5e8:	f362 0304 	bfi	r3, r2, #0, #5
    e5ec:	73bb      	strb	r3, [r7, #14]
    e5ee:	230b      	movs	r3, #11
    e5f0:	743b      	strb	r3, [r7, #16]
    e5f2:	78fb      	ldrb	r3, [r7, #3]
    e5f4:	2b00      	cmp	r3, #0
    e5f6:	d001      	beq.n	e5fc <n25q256a_xip_confirm+0x94>
    e5f8:	2300      	movs	r3, #0
    e5fa:	e000      	b.n	e5fe <n25q256a_xip_confirm+0x96>
    e5fc:	23ff      	movs	r3, #255	; 0xff
    e5fe:	747b      	strb	r3, [r7, #17]
    e600:	2301      	movs	r3, #1
    e602:	61bb      	str	r3, [r7, #24]
    e604:	f107 0327 	add.w	r3, r7, #39	; 0x27
    e608:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    e60a:	f107 030c 	add.w	r3, r7, #12
    e60e:	4619      	mov	r1, r3
    e610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e612:	4b07      	ldr	r3, [pc, #28]	; (e630 <n25q256a_xip_confirm+0xc8>)
    e614:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    e616:	78fb      	ldrb	r3, [r7, #3]
    e618:	2b00      	cmp	r3, #0
    e61a:	d001      	beq.n	e620 <n25q256a_xip_confirm+0xb8>
    e61c:	2202      	movs	r2, #2
    e61e:	e000      	b.n	e622 <n25q256a_xip_confirm+0xba>
    e620:	2201      	movs	r2, #1
    e622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e624:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    e626:	2300      	movs	r3, #0
}
    e628:	4618      	mov	r0, r3
    e62a:	3730      	adds	r7, #48	; 0x30
    e62c:	46bd      	mov	sp, r7
    e62e:	bd80      	pop	{r7, pc}
    e630:	00004d91 	.word	0x00004d91

0000e634 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    e634:	b580      	push	{r7, lr}
    e636:	b08c      	sub	sp, #48	; 0x30
    e638:	af00      	add	r7, sp, #0
    e63a:	6078      	str	r0, [r7, #4]
    e63c:	460b      	mov	r3, r1
    e63e:	70fb      	strb	r3, [r7, #3]
    e640:	4613      	mov	r3, r2
    e642:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    e644:	2300      	movs	r3, #0
    e646:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    e648:	687b      	ldr	r3, [r7, #4]
    e64a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    e64c:	687b      	ldr	r3, [r7, #4]
    e64e:	681b      	ldr	r3, [r3, #0]
    e650:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    e652:	f107 030c 	add.w	r3, r7, #12
    e656:	2200      	movs	r2, #0
    e658:	601a      	str	r2, [r3, #0]
    e65a:	605a      	str	r2, [r3, #4]
    e65c:	609a      	str	r2, [r3, #8]
    e65e:	60da      	str	r2, [r3, #12]
    e660:	611a      	str	r2, [r3, #16]
    e662:	615a      	str	r2, [r3, #20]
    e664:	78fb      	ldrb	r3, [r7, #3]
    e666:	f003 0307 	and.w	r3, r3, #7
    e66a:	b2da      	uxtb	r2, r3
    e66c:	7b3b      	ldrb	r3, [r7, #12]
    e66e:	f362 0302 	bfi	r3, r2, #0, #3
    e672:	733b      	strb	r3, [r7, #12]
    e674:	7b3b      	ldrb	r3, [r7, #12]
    e676:	f043 0310 	orr.w	r3, r3, #16
    e67a:	733b      	strb	r3, [r7, #12]
    e67c:	7b3b      	ldrb	r3, [r7, #12]
    e67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e682:	733b      	strb	r3, [r7, #12]
    e684:	78bb      	ldrb	r3, [r7, #2]
    e686:	743b      	strb	r3, [r7, #16]
    e688:	2301      	movs	r3, #1
    e68a:	61bb      	str	r3, [r7, #24]
    e68c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    e690:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    e692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e694:	7b5b      	ldrb	r3, [r3, #13]
    e696:	2b00      	cmp	r3, #0
    e698:	d003      	beq.n	e6a2 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    e69a:	2100      	movs	r1, #0
    e69c:	6878      	ldr	r0, [r7, #4]
    e69e:	4b0a      	ldr	r3, [pc, #40]	; (e6c8 <n25q256a_read_reg+0x94>)
    e6a0:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    e6a2:	f107 030c 	add.w	r3, r7, #12
    e6a6:	4619      	mov	r1, r3
    e6a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e6aa:	4b08      	ldr	r3, [pc, #32]	; (e6cc <n25q256a_read_reg+0x98>)
    e6ac:	4798      	blx	r3
	if (n25q->xip_mode) {
    e6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e6b0:	7b5b      	ldrb	r3, [r3, #13]
    e6b2:	2b00      	cmp	r3, #0
    e6b4:	d003      	beq.n	e6be <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    e6b6:	2101      	movs	r1, #1
    e6b8:	6878      	ldr	r0, [r7, #4]
    e6ba:	4b03      	ldr	r3, [pc, #12]	; (e6c8 <n25q256a_read_reg+0x94>)
    e6bc:	4798      	blx	r3
	}
	return status;
    e6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    e6c0:	4618      	mov	r0, r3
    e6c2:	3730      	adds	r7, #48	; 0x30
    e6c4:	46bd      	mov	sp, r7
    e6c6:	bd80      	pop	{r7, pc}
    e6c8:	0000e569 	.word	0x0000e569
    e6cc:	00004d91 	.word	0x00004d91

0000e6d0 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    e6d0:	b580      	push	{r7, lr}
    e6d2:	b08c      	sub	sp, #48	; 0x30
    e6d4:	af00      	add	r7, sp, #0
    e6d6:	60f8      	str	r0, [r7, #12]
    e6d8:	607b      	str	r3, [r7, #4]
    e6da:	460b      	mov	r3, r1
    e6dc:	72fb      	strb	r3, [r7, #11]
    e6de:	4613      	mov	r3, r2
    e6e0:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e6e2:	68fb      	ldr	r3, [r7, #12]
    e6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e6e6:	68fb      	ldr	r3, [r7, #12]
    e6e8:	681b      	ldr	r3, [r3, #0]
    e6ea:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    e6ec:	f107 0310 	add.w	r3, r7, #16
    e6f0:	2200      	movs	r2, #0
    e6f2:	601a      	str	r2, [r3, #0]
    e6f4:	605a      	str	r2, [r3, #4]
    e6f6:	609a      	str	r2, [r3, #8]
    e6f8:	60da      	str	r2, [r3, #12]
    e6fa:	611a      	str	r2, [r3, #16]
    e6fc:	615a      	str	r2, [r3, #20]
    e6fe:	7afb      	ldrb	r3, [r7, #11]
    e700:	f003 0307 	and.w	r3, r3, #7
    e704:	b2da      	uxtb	r2, r3
    e706:	7c3b      	ldrb	r3, [r7, #16]
    e708:	f362 0302 	bfi	r3, r2, #0, #3
    e70c:	743b      	strb	r3, [r7, #16]
    e70e:	7c3b      	ldrb	r3, [r7, #16]
    e710:	f043 0310 	orr.w	r3, r3, #16
    e714:	743b      	strb	r3, [r7, #16]
    e716:	7c3b      	ldrb	r3, [r7, #16]
    e718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e71c:	743b      	strb	r3, [r7, #16]
    e71e:	7c7b      	ldrb	r3, [r7, #17]
    e720:	2202      	movs	r2, #2
    e722:	f362 1305 	bfi	r3, r2, #4, #2
    e726:	747b      	strb	r3, [r7, #17]
    e728:	7abb      	ldrb	r3, [r7, #10]
    e72a:	753b      	strb	r3, [r7, #20]
    e72c:	2301      	movs	r3, #1
    e72e:	61fb      	str	r3, [r7, #28]
    e730:	1d3b      	adds	r3, r7, #4
    e732:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e736:	7b5b      	ldrb	r3, [r3, #13]
    e738:	2b00      	cmp	r3, #0
    e73a:	d003      	beq.n	e744 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    e73c:	2100      	movs	r1, #0
    e73e:	68f8      	ldr	r0, [r7, #12]
    e740:	4b09      	ldr	r3, [pc, #36]	; (e768 <n25q256a_write_reg+0x98>)
    e742:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    e744:	f107 0310 	add.w	r3, r7, #16
    e748:	4619      	mov	r1, r3
    e74a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e74c:	4b07      	ldr	r3, [pc, #28]	; (e76c <n25q256a_write_reg+0x9c>)
    e74e:	4798      	blx	r3
	if (n25q->xip_mode) {
    e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e752:	7b5b      	ldrb	r3, [r3, #13]
    e754:	2b00      	cmp	r3, #0
    e756:	d003      	beq.n	e760 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    e758:	2101      	movs	r1, #1
    e75a:	68f8      	ldr	r0, [r7, #12]
    e75c:	4b02      	ldr	r3, [pc, #8]	; (e768 <n25q256a_write_reg+0x98>)
    e75e:	4798      	blx	r3
	}
}
    e760:	bf00      	nop
    e762:	3730      	adds	r7, #48	; 0x30
    e764:	46bd      	mov	sp, r7
    e766:	bd80      	pop	{r7, pc}
    e768:	0000e569 	.word	0x0000e569
    e76c:	00004d91 	.word	0x00004d91

0000e770 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    e770:	b580      	push	{r7, lr}
    e772:	b090      	sub	sp, #64	; 0x40
    e774:	af00      	add	r7, sp, #0
    e776:	6078      	str	r0, [r7, #4]
    e778:	460b      	mov	r3, r1
    e77a:	70fb      	strb	r3, [r7, #3]
    e77c:	4613      	mov	r3, r2
    e77e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e780:	687b      	ldr	r3, [r7, #4]
    e782:	681b      	ldr	r3, [r3, #0]
    e784:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    e786:	78bb      	ldrb	r3, [r7, #2]
    e788:	2b00      	cmp	r3, #0
    e78a:	d001      	beq.n	e790 <n25q256a_write_enable+0x20>
    e78c:	2306      	movs	r3, #6
    e78e:	e000      	b.n	e792 <n25q256a_write_enable+0x22>
    e790:	2304      	movs	r3, #4
    e792:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    e796:	f107 0320 	add.w	r3, r7, #32
    e79a:	2200      	movs	r2, #0
    e79c:	601a      	str	r2, [r3, #0]
    e79e:	605a      	str	r2, [r3, #4]
    e7a0:	609a      	str	r2, [r3, #8]
    e7a2:	60da      	str	r2, [r3, #12]
    e7a4:	611a      	str	r2, [r3, #16]
    e7a6:	615a      	str	r2, [r3, #20]
    e7a8:	78fb      	ldrb	r3, [r7, #3]
    e7aa:	f003 0307 	and.w	r3, r3, #7
    e7ae:	b2da      	uxtb	r2, r3
    e7b0:	f897 3020 	ldrb.w	r3, [r7, #32]
    e7b4:	f362 0302 	bfi	r3, r2, #0, #3
    e7b8:	f887 3020 	strb.w	r3, [r7, #32]
    e7bc:	f897 3020 	ldrb.w	r3, [r7, #32]
    e7c0:	f043 0310 	orr.w	r3, r3, #16
    e7c4:	f887 3020 	strb.w	r3, [r7, #32]
    e7c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    e7cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    e7d0:	f107 0308 	add.w	r3, r7, #8
    e7d4:	2200      	movs	r2, #0
    e7d6:	601a      	str	r2, [r3, #0]
    e7d8:	605a      	str	r2, [r3, #4]
    e7da:	609a      	str	r2, [r3, #8]
    e7dc:	60da      	str	r2, [r3, #12]
    e7de:	611a      	str	r2, [r3, #16]
    e7e0:	615a      	str	r2, [r3, #20]
    e7e2:	78fb      	ldrb	r3, [r7, #3]
    e7e4:	f003 0307 	and.w	r3, r3, #7
    e7e8:	b2da      	uxtb	r2, r3
    e7ea:	7a3b      	ldrb	r3, [r7, #8]
    e7ec:	f362 0302 	bfi	r3, r2, #0, #3
    e7f0:	723b      	strb	r3, [r7, #8]
    e7f2:	7a3b      	ldrb	r3, [r7, #8]
    e7f4:	f043 0310 	orr.w	r3, r3, #16
    e7f8:	723b      	strb	r3, [r7, #8]
    e7fa:	7a3b      	ldrb	r3, [r7, #8]
    e7fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e800:	723b      	strb	r3, [r7, #8]
    e802:	2305      	movs	r3, #5
    e804:	733b      	strb	r3, [r7, #12]
    e806:	2301      	movs	r3, #1
    e808:	617b      	str	r3, [r7, #20]
    e80a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    e80e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    e810:	f107 0320 	add.w	r3, r7, #32
    e814:	4619      	mov	r1, r3
    e816:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    e818:	4b08      	ldr	r3, [pc, #32]	; (e83c <n25q256a_write_enable+0xcc>)
    e81a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    e81c:	f107 0308 	add.w	r3, r7, #8
    e820:	4619      	mov	r1, r3
    e822:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    e824:	4b05      	ldr	r3, [pc, #20]	; (e83c <n25q256a_write_enable+0xcc>)
    e826:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    e828:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    e82c:	f003 0302 	and.w	r3, r3, #2
    e830:	2b00      	cmp	r3, #0
    e832:	d0ed      	beq.n	e810 <n25q256a_write_enable+0xa0>
}
    e834:	bf00      	nop
    e836:	3740      	adds	r7, #64	; 0x40
    e838:	46bd      	mov	sp, r7
    e83a:	bd80      	pop	{r7, pc}
    e83c:	00004d91 	.word	0x00004d91

0000e840 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    e840:	b590      	push	{r4, r7, lr}
    e842:	b087      	sub	sp, #28
    e844:	af00      	add	r7, sp, #0
    e846:	6078      	str	r0, [r7, #4]
    e848:	460b      	mov	r3, r1
    e84a:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    e84c:	687b      	ldr	r3, [r7, #4]
    e84e:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    e850:	68fb      	ldr	r3, [r7, #12]
    e852:	7b1b      	ldrb	r3, [r3, #12]
    e854:	2b00      	cmp	r3, #0
    e856:	d001      	beq.n	e85c <n25q256a_switch_mode+0x1c>
    e858:	2306      	movs	r3, #6
    e85a:	e000      	b.n	e85e <n25q256a_switch_mode+0x1e>
    e85c:	2300      	movs	r3, #0
    e85e:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    e860:	7afb      	ldrb	r3, [r7, #11]
    e862:	2265      	movs	r2, #101	; 0x65
    e864:	4619      	mov	r1, r3
    e866:	6878      	ldr	r0, [r7, #4]
    e868:	4b25      	ldr	r3, [pc, #148]	; (e900 <n25q256a_switch_mode+0xc0>)
    e86a:	4798      	blx	r3
    e86c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    e86e:	2300      	movs	r3, #0
    e870:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    e872:	68fb      	ldr	r3, [r7, #12]
    e874:	7b1b      	ldrb	r3, [r3, #12]
    e876:	78fa      	ldrb	r2, [r7, #3]
    e878:	429a      	cmp	r2, r3
    e87a:	d03d      	beq.n	e8f8 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    e87c:	78fb      	ldrb	r3, [r7, #3]
    e87e:	2b00      	cmp	r3, #0
    e880:	d00b      	beq.n	e89a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    e882:	697b      	ldr	r3, [r7, #20]
    e884:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e888:	2b00      	cmp	r3, #0
    e88a:	d011      	beq.n	e8b0 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    e88c:	697b      	ldr	r3, [r7, #20]
    e88e:	f003 031f 	and.w	r3, r3, #31
    e892:	617b      	str	r3, [r7, #20]
			modify = 1;
    e894:	2301      	movs	r3, #1
    e896:	74fb      	strb	r3, [r7, #19]
    e898:	e00a      	b.n	e8b0 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    e89a:	697b      	ldr	r3, [r7, #20]
    e89c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e8a0:	2b00      	cmp	r3, #0
    e8a2:	d105      	bne.n	e8b0 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    e8a4:	697b      	ldr	r3, [r7, #20]
    e8a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    e8aa:	617b      	str	r3, [r7, #20]
			modify = 1;
    e8ac:	2301      	movs	r3, #1
    e8ae:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    e8b0:	7cfb      	ldrb	r3, [r7, #19]
    e8b2:	2b00      	cmp	r3, #0
    e8b4:	d021      	beq.n	e8fa <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    e8b6:	68fb      	ldr	r3, [r7, #12]
    e8b8:	78fa      	ldrb	r2, [r7, #3]
    e8ba:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    e8bc:	7afb      	ldrb	r3, [r7, #11]
    e8be:	2201      	movs	r2, #1
    e8c0:	4619      	mov	r1, r3
    e8c2:	6878      	ldr	r0, [r7, #4]
    e8c4:	4b0f      	ldr	r3, [pc, #60]	; (e904 <n25q256a_switch_mode+0xc4>)
    e8c6:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    e8c8:	7af9      	ldrb	r1, [r7, #11]
    e8ca:	697b      	ldr	r3, [r7, #20]
    e8cc:	2261      	movs	r2, #97	; 0x61
    e8ce:	6878      	ldr	r0, [r7, #4]
    e8d0:	4c0d      	ldr	r4, [pc, #52]	; (e908 <n25q256a_switch_mode+0xc8>)
    e8d2:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    e8d4:	78fb      	ldrb	r3, [r7, #3]
    e8d6:	2b00      	cmp	r3, #0
    e8d8:	d001      	beq.n	e8de <n25q256a_switch_mode+0x9e>
    e8da:	2306      	movs	r3, #6
    e8dc:	e000      	b.n	e8e0 <n25q256a_switch_mode+0xa0>
    e8de:	2300      	movs	r3, #0
    e8e0:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    e8e2:	7afb      	ldrb	r3, [r7, #11]
    e8e4:	2265      	movs	r2, #101	; 0x65
    e8e6:	4619      	mov	r1, r3
    e8e8:	6878      	ldr	r0, [r7, #4]
    e8ea:	4b05      	ldr	r3, [pc, #20]	; (e900 <n25q256a_switch_mode+0xc0>)
    e8ec:	4798      	blx	r3
    e8ee:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    e8f0:	68fb      	ldr	r3, [r7, #12]
    e8f2:	78fa      	ldrb	r2, [r7, #3]
    e8f4:	731a      	strb	r2, [r3, #12]
    e8f6:	e000      	b.n	e8fa <n25q256a_switch_mode+0xba>
		return;
    e8f8:	bf00      	nop
	}
}
    e8fa:	371c      	adds	r7, #28
    e8fc:	46bd      	mov	sp, r7
    e8fe:	bd90      	pop	{r4, r7, pc}
    e900:	0000e635 	.word	0x0000e635
    e904:	0000e771 	.word	0x0000e771
    e908:	0000e6d1 	.word	0x0000e6d1

0000e90c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    e90c:	b580      	push	{r7, lr}
    e90e:	b086      	sub	sp, #24
    e910:	af00      	add	r7, sp, #0
    e912:	60f8      	str	r0, [r7, #12]
    e914:	60b9      	str	r1, [r7, #8]
    e916:	607a      	str	r2, [r7, #4]
    e918:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    e91a:	68fb      	ldr	r3, [r7, #12]
    e91c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    e91e:	4a0c      	ldr	r2, [pc, #48]	; (e950 <n25q256a_construct+0x44>)
    e920:	68b9      	ldr	r1, [r7, #8]
    e922:	68f8      	ldr	r0, [r7, #12]
    e924:	4b0b      	ldr	r3, [pc, #44]	; (e954 <n25q256a_construct+0x48>)
    e926:	4798      	blx	r3
	n25q->quad_mode    = 0;
    e928:	697b      	ldr	r3, [r7, #20]
    e92a:	2200      	movs	r2, #0
    e92c:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    e92e:	697b      	ldr	r3, [r7, #20]
    e930:	2200      	movs	r2, #0
    e932:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    e934:	697b      	ldr	r3, [r7, #20]
    e936:	687a      	ldr	r2, [r7, #4]
    e938:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    e93a:	78fb      	ldrb	r3, [r7, #3]
    e93c:	4619      	mov	r1, r3
    e93e:	68f8      	ldr	r0, [r7, #12]
    e940:	4b05      	ldr	r3, [pc, #20]	; (e958 <n25q256a_construct+0x4c>)
    e942:	4798      	blx	r3
	return me;
    e944:	68fb      	ldr	r3, [r7, #12]
}
    e946:	4618      	mov	r0, r3
    e948:	3718      	adds	r7, #24
    e94a:	46bd      	mov	sp, r7
    e94c:	bd80      	pop	{r7, pc}
    e94e:	bf00      	nop
    e950:	0001a95c 	.word	0x0001a95c
    e954:	0000ede9 	.word	0x0000ede9
    e958:	0000e841 	.word	0x0000e841

0000e95c <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    e95c:	b580      	push	{r7, lr}
    e95e:	b08c      	sub	sp, #48	; 0x30
    e960:	af00      	add	r7, sp, #0
    e962:	60f8      	str	r0, [r7, #12]
    e964:	60b9      	str	r1, [r7, #8]
    e966:	607a      	str	r2, [r7, #4]
    e968:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e96a:	68fb      	ldr	r3, [r7, #12]
    e96c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e96e:	68fb      	ldr	r3, [r7, #12]
    e970:	681b      	ldr	r3, [r3, #0]
    e972:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    e974:	f107 0310 	add.w	r3, r7, #16
    e978:	2200      	movs	r2, #0
    e97a:	601a      	str	r2, [r3, #0]
    e97c:	605a      	str	r2, [r3, #4]
    e97e:	609a      	str	r2, [r3, #8]
    e980:	60da      	str	r2, [r3, #12]
    e982:	611a      	str	r2, [r3, #16]
    e984:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    e986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e988:	7b1b      	ldrb	r3, [r3, #12]
    e98a:	2b00      	cmp	r3, #0
    e98c:	d001      	beq.n	e992 <n25q256a_read+0x36>
    e98e:	2206      	movs	r2, #6
    e990:	e000      	b.n	e994 <n25q256a_read+0x38>
    e992:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    e994:	7c3b      	ldrb	r3, [r7, #16]
    e996:	f362 0302 	bfi	r3, r2, #0, #3
    e99a:	743b      	strb	r3, [r7, #16]
    e99c:	7c3b      	ldrb	r3, [r7, #16]
    e99e:	f043 0310 	orr.w	r3, r3, #16
    e9a2:	743b      	strb	r3, [r7, #16]
    e9a4:	7c3b      	ldrb	r3, [r7, #16]
    e9a6:	f043 0320 	orr.w	r3, r3, #32
    e9aa:	743b      	strb	r3, [r7, #16]
    e9ac:	7c3b      	ldrb	r3, [r7, #16]
    e9ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e9b2:	743b      	strb	r3, [r7, #16]
    e9b4:	7c7b      	ldrb	r3, [r7, #17]
    e9b6:	2201      	movs	r2, #1
    e9b8:	f362 1305 	bfi	r3, r2, #4, #2
    e9bc:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    e9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e9c0:	7b1b      	ldrb	r3, [r3, #12]
    e9c2:	2b00      	cmp	r3, #0
    e9c4:	d001      	beq.n	e9ca <n25q256a_read+0x6e>
    e9c6:	220a      	movs	r2, #10
    e9c8:	e000      	b.n	e9cc <n25q256a_read+0x70>
    e9ca:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    e9cc:	7cbb      	ldrb	r3, [r7, #18]
    e9ce:	f362 0304 	bfi	r3, r2, #0, #5
    e9d2:	74bb      	strb	r3, [r7, #18]
    e9d4:	230b      	movs	r3, #11
    e9d6:	753b      	strb	r3, [r7, #20]
    e9d8:	687b      	ldr	r3, [r7, #4]
    e9da:	61bb      	str	r3, [r7, #24]
    e9dc:	683b      	ldr	r3, [r7, #0]
    e9de:	61fb      	str	r3, [r7, #28]
    e9e0:	68bb      	ldr	r3, [r7, #8]
    e9e2:	627b      	str	r3, [r7, #36]	; 0x24
	    .instruction                  = N25Q_FAST_READ,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    e9e4:	f107 0310 	add.w	r3, r7, #16
    e9e8:	4619      	mov	r1, r3
    e9ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e9ec:	4b03      	ldr	r3, [pc, #12]	; (e9fc <n25q256a_read+0xa0>)
    e9ee:	4798      	blx	r3
	return ERR_NONE;
    e9f0:	2300      	movs	r3, #0
}
    e9f2:	4618      	mov	r0, r3
    e9f4:	3730      	adds	r7, #48	; 0x30
    e9f6:	46bd      	mov	sp, r7
    e9f8:	bd80      	pop	{r7, pc}
    e9fa:	bf00      	nop
    e9fc:	00004d91 	.word	0x00004d91

0000ea00 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ea00:	b580      	push	{r7, lr}
    ea02:	b08c      	sub	sp, #48	; 0x30
    ea04:	af00      	add	r7, sp, #0
    ea06:	60f8      	str	r0, [r7, #12]
    ea08:	60b9      	str	r1, [r7, #8]
    ea0a:	607a      	str	r2, [r7, #4]
    ea0c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ea0e:	68fb      	ldr	r3, [r7, #12]
    ea10:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ea12:	68fb      	ldr	r3, [r7, #12]
    ea14:	681b      	ldr	r3, [r3, #0]
    ea16:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ea18:	f107 0310 	add.w	r3, r7, #16
    ea1c:	2200      	movs	r2, #0
    ea1e:	601a      	str	r2, [r3, #0]
    ea20:	605a      	str	r2, [r3, #4]
    ea22:	609a      	str	r2, [r3, #8]
    ea24:	60da      	str	r2, [r3, #12]
    ea26:	611a      	str	r2, [r3, #16]
    ea28:	615a      	str	r2, [r3, #20]
    ea2a:	7c3b      	ldrb	r3, [r7, #16]
    ea2c:	f043 0310 	orr.w	r3, r3, #16
    ea30:	743b      	strb	r3, [r7, #16]
    ea32:	7c3b      	ldrb	r3, [r7, #16]
    ea34:	f043 0320 	orr.w	r3, r3, #32
    ea38:	743b      	strb	r3, [r7, #16]
    ea3a:	7c3b      	ldrb	r3, [r7, #16]
    ea3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ea40:	743b      	strb	r3, [r7, #16]
    ea42:	7c7b      	ldrb	r3, [r7, #17]
    ea44:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ea48:	747b      	strb	r3, [r7, #17]
    ea4a:	2302      	movs	r3, #2
    ea4c:	753b      	strb	r3, [r7, #20]
    ea4e:	687b      	ldr	r3, [r7, #4]
    ea50:	61bb      	str	r3, [r7, #24]
    ea52:	683b      	ldr	r3, [r7, #0]
    ea54:	61fb      	str	r3, [r7, #28]
    ea56:	68bb      	ldr	r3, [r7, #8]
    ea58:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ea5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ea5c:	7b1b      	ldrb	r3, [r3, #12]
    ea5e:	2b00      	cmp	r3, #0
    ea60:	d001      	beq.n	ea66 <n25q256a_write+0x66>
    ea62:	2206      	movs	r2, #6
    ea64:	e000      	b.n	ea68 <n25q256a_write+0x68>
    ea66:	2200      	movs	r2, #0
    ea68:	7c3b      	ldrb	r3, [r7, #16]
    ea6a:	f362 0302 	bfi	r3, r2, #0, #3
    ea6e:	743b      	strb	r3, [r7, #16]
	while (length) {
    ea70:	e035      	b.n	eade <n25q256a_write+0xde>
		cmd.address = address;
    ea72:	687b      	ldr	r3, [r7, #4]
    ea74:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    ea76:	683b      	ldr	r3, [r7, #0]
    ea78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ea7c:	d802      	bhi.n	ea84 <n25q256a_write+0x84>
			cmd.buf_len = length;
    ea7e:	683b      	ldr	r3, [r7, #0]
    ea80:	61fb      	str	r3, [r7, #28]
    ea82:	e002      	b.n	ea8a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    ea84:	f44f 7380 	mov.w	r3, #256	; 0x100
    ea88:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ea8a:	7c3b      	ldrb	r3, [r7, #16]
    ea8c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ea90:	b2db      	uxtb	r3, r3
    ea92:	2201      	movs	r2, #1
    ea94:	4619      	mov	r1, r3
    ea96:	68f8      	ldr	r0, [r7, #12]
    ea98:	4b19      	ldr	r3, [pc, #100]	; (eb00 <n25q256a_write+0x100>)
    ea9a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    ea9c:	f107 0310 	add.w	r3, r7, #16
    eaa0:	4619      	mov	r1, r3
    eaa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    eaa4:	4b17      	ldr	r3, [pc, #92]	; (eb04 <n25q256a_write+0x104>)
    eaa6:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    eaa8:	bf00      	nop
    eaaa:	7c3b      	ldrb	r3, [r7, #16]
    eaac:	f3c3 0302 	ubfx	r3, r3, #0, #3
    eab0:	b2db      	uxtb	r3, r3
    eab2:	2270      	movs	r2, #112	; 0x70
    eab4:	4619      	mov	r1, r3
    eab6:	68f8      	ldr	r0, [r7, #12]
    eab8:	4b13      	ldr	r3, [pc, #76]	; (eb08 <n25q256a_write+0x108>)
    eaba:	4798      	blx	r3
    eabc:	4603      	mov	r3, r0
    eabe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    eac2:	2b00      	cmp	r3, #0
    eac4:	d0f1      	beq.n	eaaa <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    eac6:	6a3a      	ldr	r2, [r7, #32]
    eac8:	69fb      	ldr	r3, [r7, #28]
    eaca:	4413      	add	r3, r2
    eacc:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    eace:	69fb      	ldr	r3, [r7, #28]
    ead0:	683a      	ldr	r2, [r7, #0]
    ead2:	1ad3      	subs	r3, r2, r3
    ead4:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    ead6:	69fb      	ldr	r3, [r7, #28]
    ead8:	687a      	ldr	r2, [r7, #4]
    eada:	4413      	add	r3, r2
    eadc:	607b      	str	r3, [r7, #4]
	while (length) {
    eade:	683b      	ldr	r3, [r7, #0]
    eae0:	2b00      	cmp	r3, #0
    eae2:	d1c6      	bne.n	ea72 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    eae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eae6:	7b5b      	ldrb	r3, [r3, #13]
    eae8:	2b00      	cmp	r3, #0
    eaea:	d003      	beq.n	eaf4 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    eaec:	2101      	movs	r1, #1
    eaee:	68f8      	ldr	r0, [r7, #12]
    eaf0:	4b06      	ldr	r3, [pc, #24]	; (eb0c <n25q256a_write+0x10c>)
    eaf2:	4798      	blx	r3
	}
	return ERR_NONE;
    eaf4:	2300      	movs	r3, #0
}
    eaf6:	4618      	mov	r0, r3
    eaf8:	3730      	adds	r7, #48	; 0x30
    eafa:	46bd      	mov	sp, r7
    eafc:	bd80      	pop	{r7, pc}
    eafe:	bf00      	nop
    eb00:	0000e771 	.word	0x0000e771
    eb04:	00004d91 	.word	0x00004d91
    eb08:	0000e635 	.word	0x0000e635
    eb0c:	0000e569 	.word	0x0000e569

0000eb10 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    eb10:	b580      	push	{r7, lr}
    eb12:	b090      	sub	sp, #64	; 0x40
    eb14:	af00      	add	r7, sp, #0
    eb16:	60f8      	str	r0, [r7, #12]
    eb18:	60b9      	str	r1, [r7, #8]
    eb1a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    eb1c:	68fb      	ldr	r3, [r7, #12]
    eb1e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    eb20:	68fb      	ldr	r3, [r7, #12]
    eb22:	681b      	ldr	r3, [r3, #0]
    eb24:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    eb26:	f107 0314 	add.w	r3, r7, #20
    eb2a:	2200      	movs	r2, #0
    eb2c:	601a      	str	r2, [r3, #0]
    eb2e:	605a      	str	r2, [r3, #4]
    eb30:	609a      	str	r2, [r3, #8]
    eb32:	60da      	str	r2, [r3, #12]
    eb34:	611a      	str	r2, [r3, #16]
    eb36:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    eb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    eb3a:	7b1b      	ldrb	r3, [r3, #12]
    eb3c:	2b00      	cmp	r3, #0
    eb3e:	d001      	beq.n	eb44 <n25q256a_erase+0x34>
    eb40:	2206      	movs	r2, #6
    eb42:	e000      	b.n	eb46 <n25q256a_erase+0x36>
    eb44:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    eb46:	7d3b      	ldrb	r3, [r7, #20]
    eb48:	f362 0302 	bfi	r3, r2, #0, #3
    eb4c:	753b      	strb	r3, [r7, #20]
    eb4e:	7d3b      	ldrb	r3, [r7, #20]
    eb50:	f043 0310 	orr.w	r3, r3, #16
    eb54:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    eb56:	687b      	ldr	r3, [r7, #4]
    eb58:	4a56      	ldr	r2, [pc, #344]	; (ecb4 <n25q256a_erase+0x1a4>)
    eb5a:	4293      	cmp	r3, r2
    eb5c:	bf94      	ite	ls
    eb5e:	2301      	movls	r3, #1
    eb60:	2300      	movhi	r3, #0
    eb62:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    eb64:	7d3b      	ldrb	r3, [r7, #20]
    eb66:	f362 1345 	bfi	r3, r2, #5, #1
    eb6a:	753b      	strb	r3, [r7, #20]
    eb6c:	7d7b      	ldrb	r3, [r7, #21]
    eb6e:	2202      	movs	r2, #2
    eb70:	f362 1305 	bfi	r3, r2, #4, #2
    eb74:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    eb76:	68bb      	ldr	r3, [r7, #8]
    eb78:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    eb7a:	687b      	ldr	r3, [r7, #4]
    eb7c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    eb7e:	2300      	movs	r3, #0
    eb80:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    eb82:	687b      	ldr	r3, [r7, #4]
    eb84:	f3c3 030b 	ubfx	r3, r3, #0, #12
    eb88:	2b00      	cmp	r3, #0
    eb8a:	d104      	bne.n	eb96 <n25q256a_erase+0x86>
    eb8c:	68bb      	ldr	r3, [r7, #8]
    eb8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    eb92:	2b00      	cmp	r3, #0
    eb94:	d002      	beq.n	eb9c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    eb96:	f06f 030c 	mvn.w	r3, #12
    eb9a:	e087      	b.n	ecac <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    eb9c:	687b      	ldr	r3, [r7, #4]
    eb9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    eba2:	d368      	bcc.n	ec76 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    eba4:	23c7      	movs	r3, #199	; 0xc7
    eba6:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    eba8:	7d3b      	ldrb	r3, [r7, #20]
    ebaa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ebae:	b2db      	uxtb	r3, r3
    ebb0:	2201      	movs	r2, #1
    ebb2:	4619      	mov	r1, r3
    ebb4:	68f8      	ldr	r0, [r7, #12]
    ebb6:	4b40      	ldr	r3, [pc, #256]	; (ecb8 <n25q256a_erase+0x1a8>)
    ebb8:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    ebba:	f107 0314 	add.w	r3, r7, #20
    ebbe:	4619      	mov	r1, r3
    ebc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ebc2:	4b3e      	ldr	r3, [pc, #248]	; (ecbc <n25q256a_erase+0x1ac>)
    ebc4:	4798      	blx	r3
    ebc6:	e059      	b.n	ec7c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    ebc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ebca:	b29b      	uxth	r3, r3
    ebcc:	2b00      	cmp	r3, #0
    ebce:	d11f      	bne.n	ec10 <n25q256a_erase+0x100>
    ebd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ebd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ebd6:	d31b      	bcc.n	ec10 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    ebd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ebda:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    ebdc:	23d8      	movs	r3, #216	; 0xd8
    ebde:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ebe0:	7d3b      	ldrb	r3, [r7, #20]
    ebe2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ebe6:	b2db      	uxtb	r3, r3
    ebe8:	2201      	movs	r2, #1
    ebea:	4619      	mov	r1, r3
    ebec:	68f8      	ldr	r0, [r7, #12]
    ebee:	4b32      	ldr	r3, [pc, #200]	; (ecb8 <n25q256a_erase+0x1a8>)
    ebf0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ebf2:	f107 0314 	add.w	r3, r7, #20
    ebf6:	4619      	mov	r1, r3
    ebf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ebfa:	4b30      	ldr	r3, [pc, #192]	; (ecbc <n25q256a_erase+0x1ac>)
    ebfc:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    ebfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec00:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ec04:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    ec06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ec08:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    ec0c:	63bb      	str	r3, [r7, #56]	; 0x38
    ec0e:	e023      	b.n	ec58 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    ec10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ec12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    ec16:	d31b      	bcc.n	ec50 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    ec18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec1a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    ec1c:	2320      	movs	r3, #32
    ec1e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ec20:	7d3b      	ldrb	r3, [r7, #20]
    ec22:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ec26:	b2db      	uxtb	r3, r3
    ec28:	2201      	movs	r2, #1
    ec2a:	4619      	mov	r1, r3
    ec2c:	68f8      	ldr	r0, [r7, #12]
    ec2e:	4b22      	ldr	r3, [pc, #136]	; (ecb8 <n25q256a_erase+0x1a8>)
    ec30:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ec32:	f107 0314 	add.w	r3, r7, #20
    ec36:	4619      	mov	r1, r3
    ec38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ec3a:	4b20      	ldr	r3, [pc, #128]	; (ecbc <n25q256a_erase+0x1ac>)
    ec3c:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    ec3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    ec44:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    ec46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ec48:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    ec4c:	63bb      	str	r3, [r7, #56]	; 0x38
    ec4e:	e003      	b.n	ec58 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    ec50:	f06f 030c 	mvn.w	r3, #12
    ec54:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    ec56:	e011      	b.n	ec7c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ec58:	bf00      	nop
    ec5a:	7d3b      	ldrb	r3, [r7, #20]
    ec5c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ec60:	b2db      	uxtb	r3, r3
    ec62:	2270      	movs	r2, #112	; 0x70
    ec64:	4619      	mov	r1, r3
    ec66:	68f8      	ldr	r0, [r7, #12]
    ec68:	4b15      	ldr	r3, [pc, #84]	; (ecc0 <n25q256a_erase+0x1b0>)
    ec6a:	4798      	blx	r3
    ec6c:	4603      	mov	r3, r0
    ec6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ec72:	2b00      	cmp	r3, #0
    ec74:	d0f1      	beq.n	ec5a <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    ec76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ec78:	2b00      	cmp	r3, #0
    ec7a:	d1a5      	bne.n	ebc8 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ec7c:	bf00      	nop
    ec7e:	7d3b      	ldrb	r3, [r7, #20]
    ec80:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ec84:	b2db      	uxtb	r3, r3
    ec86:	2270      	movs	r2, #112	; 0x70
    ec88:	4619      	mov	r1, r3
    ec8a:	68f8      	ldr	r0, [r7, #12]
    ec8c:	4b0c      	ldr	r3, [pc, #48]	; (ecc0 <n25q256a_erase+0x1b0>)
    ec8e:	4798      	blx	r3
    ec90:	4603      	mov	r3, r0
    ec92:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ec96:	2b00      	cmp	r3, #0
    ec98:	d0f1      	beq.n	ec7e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    ec9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ec9c:	7b5b      	ldrb	r3, [r3, #13]
    ec9e:	2b00      	cmp	r3, #0
    eca0:	d003      	beq.n	ecaa <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    eca2:	2101      	movs	r1, #1
    eca4:	68f8      	ldr	r0, [r7, #12]
    eca6:	4b07      	ldr	r3, [pc, #28]	; (ecc4 <n25q256a_erase+0x1b4>)
    eca8:	4798      	blx	r3
	}
	return rc;
    ecaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    ecac:	4618      	mov	r0, r3
    ecae:	3740      	adds	r7, #64	; 0x40
    ecb0:	46bd      	mov	sp, r7
    ecb2:	bd80      	pop	{r7, pc}
    ecb4:	001fffff 	.word	0x001fffff
    ecb8:	0000e771 	.word	0x0000e771
    ecbc:	00004d91 	.word	0x00004d91
    ecc0:	0000e635 	.word	0x0000e635
    ecc4:	0000e569 	.word	0x0000e569

0000ecc8 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    ecc8:	b590      	push	{r4, r7, lr}
    ecca:	b085      	sub	sp, #20
    eccc:	af00      	add	r7, sp, #0
    ecce:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    ecd0:	687b      	ldr	r3, [r7, #4]
    ecd2:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ecd4:	68fb      	ldr	r3, [r7, #12]
    ecd6:	7b1b      	ldrb	r3, [r3, #12]
    ecd8:	2b00      	cmp	r3, #0
    ecda:	d001      	beq.n	ece0 <n25q256a_enable_xip+0x18>
    ecdc:	2306      	movs	r3, #6
    ecde:	e000      	b.n	ece2 <n25q256a_enable_xip+0x1a>
    ece0:	2300      	movs	r3, #0
    ece2:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    ece4:	68fb      	ldr	r3, [r7, #12]
    ece6:	7b5b      	ldrb	r3, [r3, #13]
    ece8:	2b00      	cmp	r3, #0
    ecea:	d129      	bne.n	ed40 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    ecec:	7afb      	ldrb	r3, [r7, #11]
    ecee:	2285      	movs	r2, #133	; 0x85
    ecf0:	4619      	mov	r1, r3
    ecf2:	6878      	ldr	r0, [r7, #4]
    ecf4:	4b15      	ldr	r3, [pc, #84]	; (ed4c <n25q256a_enable_xip+0x84>)
    ecf6:	4798      	blx	r3
    ecf8:	4603      	mov	r3, r0
    ecfa:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    ecfc:	7abb      	ldrb	r3, [r7, #10]
    ecfe:	f003 0308 	and.w	r3, r3, #8
    ed02:	2b00      	cmp	r3, #0
    ed04:	d015      	beq.n	ed32 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    ed06:	7abb      	ldrb	r3, [r7, #10]
    ed08:	f023 0308 	bic.w	r3, r3, #8
    ed0c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    ed0e:	7abb      	ldrb	r3, [r7, #10]
    ed10:	7af9      	ldrb	r1, [r7, #11]
    ed12:	2281      	movs	r2, #129	; 0x81
    ed14:	6878      	ldr	r0, [r7, #4]
    ed16:	4c0e      	ldr	r4, [pc, #56]	; (ed50 <n25q256a_enable_xip+0x88>)
    ed18:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ed1a:	bf00      	nop
    ed1c:	7afb      	ldrb	r3, [r7, #11]
    ed1e:	2270      	movs	r2, #112	; 0x70
    ed20:	4619      	mov	r1, r3
    ed22:	6878      	ldr	r0, [r7, #4]
    ed24:	4b09      	ldr	r3, [pc, #36]	; (ed4c <n25q256a_enable_xip+0x84>)
    ed26:	4798      	blx	r3
    ed28:	4603      	mov	r3, r0
    ed2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ed2e:	2b00      	cmp	r3, #0
    ed30:	d0f4      	beq.n	ed1c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    ed32:	68fb      	ldr	r3, [r7, #12]
    ed34:	2201      	movs	r2, #1
    ed36:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    ed38:	2101      	movs	r1, #1
    ed3a:	6878      	ldr	r0, [r7, #4]
    ed3c:	4b05      	ldr	r3, [pc, #20]	; (ed54 <n25q256a_enable_xip+0x8c>)
    ed3e:	4798      	blx	r3
	}
	return ERR_NONE;
    ed40:	2300      	movs	r3, #0
}
    ed42:	4618      	mov	r0, r3
    ed44:	3714      	adds	r7, #20
    ed46:	46bd      	mov	sp, r7
    ed48:	bd90      	pop	{r4, r7, pc}
    ed4a:	bf00      	nop
    ed4c:	0000e635 	.word	0x0000e635
    ed50:	0000e6d1 	.word	0x0000e6d1
    ed54:	0000e569 	.word	0x0000e569

0000ed58 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    ed58:	b580      	push	{r7, lr}
    ed5a:	b086      	sub	sp, #24
    ed5c:	af00      	add	r7, sp, #0
    ed5e:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ed60:	687b      	ldr	r3, [r7, #4]
    ed62:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ed64:	687b      	ldr	r3, [r7, #4]
    ed66:	681b      	ldr	r3, [r3, #0]
    ed68:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ed6a:	697b      	ldr	r3, [r7, #20]
    ed6c:	7b1b      	ldrb	r3, [r3, #12]
    ed6e:	2b00      	cmp	r3, #0
    ed70:	d001      	beq.n	ed76 <n25q256a_disable_xip+0x1e>
    ed72:	2306      	movs	r3, #6
    ed74:	e000      	b.n	ed78 <n25q256a_disable_xip+0x20>
    ed76:	2300      	movs	r3, #0
    ed78:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    ed7a:	2100      	movs	r1, #0
    ed7c:	6878      	ldr	r0, [r7, #4]
    ed7e:	4b15      	ldr	r3, [pc, #84]	; (edd4 <n25q256a_disable_xip+0x7c>)
    ed80:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    ed82:	7bfb      	ldrb	r3, [r7, #15]
    ed84:	2285      	movs	r2, #133	; 0x85
    ed86:	4619      	mov	r1, r3
    ed88:	6878      	ldr	r0, [r7, #4]
    ed8a:	4b13      	ldr	r3, [pc, #76]	; (edd8 <n25q256a_disable_xip+0x80>)
    ed8c:	4798      	blx	r3
    ed8e:	4603      	mov	r3, r0
    ed90:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    ed92:	7bbb      	ldrb	r3, [r7, #14]
    ed94:	f003 0308 	and.w	r3, r3, #8
    ed98:	2b00      	cmp	r3, #0
    ed9a:	d113      	bne.n	edc4 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    ed9c:	697b      	ldr	r3, [r7, #20]
    ed9e:	689b      	ldr	r3, [r3, #8]
    eda0:	2b00      	cmp	r3, #0
    eda2:	d00f      	beq.n	edc4 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    eda4:	693b      	ldr	r3, [r7, #16]
    eda6:	681b      	ldr	r3, [r3, #0]
    eda8:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    edaa:	6938      	ldr	r0, [r7, #16]
    edac:	4b0b      	ldr	r3, [pc, #44]	; (eddc <n25q256a_disable_xip+0x84>)
    edae:	4798      	blx	r3
			n25q->pin_exit_xip();
    edb0:	697b      	ldr	r3, [r7, #20]
    edb2:	689b      	ldr	r3, [r3, #8]
    edb4:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    edb6:	68b9      	ldr	r1, [r7, #8]
    edb8:	6938      	ldr	r0, [r7, #16]
    edba:	4b09      	ldr	r3, [pc, #36]	; (ede0 <n25q256a_disable_xip+0x88>)
    edbc:	4798      	blx	r3
			qspi_sync_enable(descr);
    edbe:	6938      	ldr	r0, [r7, #16]
    edc0:	4b08      	ldr	r3, [pc, #32]	; (ede4 <n25q256a_disable_xip+0x8c>)
    edc2:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    edc4:	697b      	ldr	r3, [r7, #20]
    edc6:	2200      	movs	r2, #0
    edc8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    edca:	2300      	movs	r3, #0
}
    edcc:	4618      	mov	r0, r3
    edce:	3718      	adds	r7, #24
    edd0:	46bd      	mov	sp, r7
    edd2:	bd80      	pop	{r7, pc}
    edd4:	0000e569 	.word	0x0000e569
    edd8:	0000e635 	.word	0x0000e635
    eddc:	00004d55 	.word	0x00004d55
    ede0:	00004ccd 	.word	0x00004ccd
    ede4:	00004d19 	.word	0x00004d19

0000ede8 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    ede8:	b480      	push	{r7}
    edea:	b085      	sub	sp, #20
    edec:	af00      	add	r7, sp, #0
    edee:	60f8      	str	r0, [r7, #12]
    edf0:	60b9      	str	r1, [r7, #8]
    edf2:	607a      	str	r2, [r7, #4]
	me->io        = io;
    edf4:	68fb      	ldr	r3, [r7, #12]
    edf6:	68ba      	ldr	r2, [r7, #8]
    edf8:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    edfa:	68fb      	ldr	r3, [r7, #12]
    edfc:	687a      	ldr	r2, [r7, #4]
    edfe:	605a      	str	r2, [r3, #4]

	return me;
    ee00:	68fb      	ldr	r3, [r7, #12]
}
    ee02:	4618      	mov	r0, r3
    ee04:	3714      	adds	r7, #20
    ee06:	46bd      	mov	sp, r7
    ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee0c:	4770      	bx	lr

0000ee0e <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    ee0e:	b480      	push	{r7}
    ee10:	b083      	sub	sp, #12
    ee12:	af00      	add	r7, sp, #0
    ee14:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ee16:	687b      	ldr	r3, [r7, #4]
    ee18:	781b      	ldrb	r3, [r3, #0]
    ee1a:	b29a      	uxth	r2, r3
    ee1c:	687b      	ldr	r3, [r7, #4]
    ee1e:	3301      	adds	r3, #1
    ee20:	781b      	ldrb	r3, [r3, #0]
    ee22:	b29b      	uxth	r3, r3
    ee24:	021b      	lsls	r3, r3, #8
    ee26:	b29b      	uxth	r3, r3
    ee28:	4413      	add	r3, r2
    ee2a:	b29b      	uxth	r3, r3
}
    ee2c:	4618      	mov	r0, r3
    ee2e:	370c      	adds	r7, #12
    ee30:	46bd      	mov	sp, r7
    ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee36:	4770      	bx	lr

0000ee38 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    ee38:	b480      	push	{r7}
    ee3a:	b083      	sub	sp, #12
    ee3c:	af00      	add	r7, sp, #0
    ee3e:	6078      	str	r0, [r7, #4]
	return desc[0];
    ee40:	687b      	ldr	r3, [r7, #4]
    ee42:	781b      	ldrb	r3, [r3, #0]
}
    ee44:	4618      	mov	r0, r3
    ee46:	370c      	adds	r7, #12
    ee48:	46bd      	mov	sp, r7
    ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee4e:	4770      	bx	lr

0000ee50 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    ee50:	b580      	push	{r7, lr}
    ee52:	b082      	sub	sp, #8
    ee54:	af00      	add	r7, sp, #0
    ee56:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ee58:	6878      	ldr	r0, [r7, #4]
    ee5a:	4b05      	ldr	r3, [pc, #20]	; (ee70 <usb_desc_next+0x20>)
    ee5c:	4798      	blx	r3
    ee5e:	4603      	mov	r3, r0
    ee60:	461a      	mov	r2, r3
    ee62:	687b      	ldr	r3, [r7, #4]
    ee64:	4413      	add	r3, r2
}
    ee66:	4618      	mov	r0, r3
    ee68:	3708      	adds	r7, #8
    ee6a:	46bd      	mov	sp, r7
    ee6c:	bd80      	pop	{r7, pc}
    ee6e:	bf00      	nop
    ee70:	0000ee39 	.word	0x0000ee39

0000ee74 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    ee74:	b580      	push	{r7, lr}
    ee76:	b08c      	sub	sp, #48	; 0x30
    ee78:	af00      	add	r7, sp, #0
    ee7a:	6078      	str	r0, [r7, #4]
    ee7c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    ee7e:	687b      	ldr	r3, [r7, #4]
    ee80:	689b      	ldr	r3, [r3, #8]
    ee82:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    ee84:	683b      	ldr	r3, [r7, #0]
    ee86:	681b      	ldr	r3, [r3, #0]
    ee88:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    ee8a:	2300      	movs	r3, #0
    ee8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    ee90:	e08f      	b.n	efb2 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    ee92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ee94:	2b00      	cmp	r3, #0
    ee96:	d102      	bne.n	ee9e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    ee98:	f06f 0309 	mvn.w	r3, #9
    ee9c:	e092      	b.n	efc4 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    ee9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eea0:	789b      	ldrb	r3, [r3, #2]
    eea2:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    eea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eea6:	795b      	ldrb	r3, [r3, #5]
    eea8:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    eeaa:	7c7b      	ldrb	r3, [r7, #17]
    eeac:	2b02      	cmp	r3, #2
    eeae:	d002      	beq.n	eeb6 <cdcdf_acm_enable+0x42>
    eeb0:	7c7b      	ldrb	r3, [r7, #17]
    eeb2:	2b0a      	cmp	r3, #10
    eeb4:	d121      	bne.n	eefa <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    eeb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    eeba:	6a3a      	ldr	r2, [r7, #32]
    eebc:	5cd2      	ldrb	r2, [r2, r3]
    eebe:	7bbb      	ldrb	r3, [r7, #14]
    eec0:	429a      	cmp	r2, r3
    eec2:	d102      	bne.n	eeca <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    eec4:	f06f 0311 	mvn.w	r3, #17
    eec8:	e07c      	b.n	efc4 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    eeca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    eece:	6a3a      	ldr	r2, [r7, #32]
    eed0:	5cd3      	ldrb	r3, [r2, r3]
    eed2:	2bff      	cmp	r3, #255	; 0xff
    eed4:	d002      	beq.n	eedc <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    eed6:	f06f 031b 	mvn.w	r3, #27
    eeda:	e073      	b.n	efc4 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    eedc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    eee0:	7bb9      	ldrb	r1, [r7, #14]
    eee2:	6a3a      	ldr	r2, [r7, #32]
    eee4:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    eee6:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    eee8:	683b      	ldr	r3, [r7, #0]
    eeea:	685b      	ldr	r3, [r3, #4]
    eeec:	2205      	movs	r2, #5
    eeee:	4619      	mov	r1, r3
    eef0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    eef2:	4b36      	ldr	r3, [pc, #216]	; (efcc <cdcdf_acm_enable+0x158>)
    eef4:	4798      	blx	r3
    eef6:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    eef8:	e047      	b.n	ef8a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    eefa:	f06f 0309 	mvn.w	r3, #9
    eefe:	e061      	b.n	efc4 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    ef00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef02:	789b      	ldrb	r3, [r3, #2]
    ef04:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    ef06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef08:	78db      	ldrb	r3, [r3, #3]
    ef0a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    ef0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef0e:	3304      	adds	r3, #4
    ef10:	4618      	mov	r0, r3
    ef12:	4b2f      	ldr	r3, [pc, #188]	; (efd0 <cdcdf_acm_enable+0x15c>)
    ef14:	4798      	blx	r3
    ef16:	4603      	mov	r3, r0
    ef18:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ef1a:	7ebb      	ldrb	r3, [r7, #26]
    ef1c:	7ef9      	ldrb	r1, [r7, #27]
    ef1e:	8bba      	ldrh	r2, [r7, #28]
    ef20:	4618      	mov	r0, r3
    ef22:	4b2c      	ldr	r3, [pc, #176]	; (efd4 <cdcdf_acm_enable+0x160>)
    ef24:	4798      	blx	r3
    ef26:	4603      	mov	r3, r0
    ef28:	2b00      	cmp	r3, #0
    ef2a:	d002      	beq.n	ef32 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    ef2c:	f06f 0313 	mvn.w	r3, #19
    ef30:	e048      	b.n	efc4 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    ef32:	7ebb      	ldrb	r3, [r7, #26]
    ef34:	b25b      	sxtb	r3, r3
    ef36:	2b00      	cmp	r3, #0
    ef38:	da0f      	bge.n	ef5a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    ef3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ef3e:	7eb9      	ldrb	r1, [r7, #26]
    ef40:	6a3a      	ldr	r2, [r7, #32]
    ef42:	4413      	add	r3, r2
    ef44:	460a      	mov	r2, r1
    ef46:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    ef48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ef4c:	6a3a      	ldr	r2, [r7, #32]
    ef4e:	4413      	add	r3, r2
    ef50:	789b      	ldrb	r3, [r3, #2]
    ef52:	4618      	mov	r0, r3
    ef54:	4b20      	ldr	r3, [pc, #128]	; (efd8 <cdcdf_acm_enable+0x164>)
    ef56:	4798      	blx	r3
    ef58:	e007      	b.n	ef6a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    ef5a:	7eba      	ldrb	r2, [r7, #26]
    ef5c:	6a3b      	ldr	r3, [r7, #32]
    ef5e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    ef60:	6a3b      	ldr	r3, [r7, #32]
    ef62:	791b      	ldrb	r3, [r3, #4]
    ef64:	4618      	mov	r0, r3
    ef66:	4b1c      	ldr	r3, [pc, #112]	; (efd8 <cdcdf_acm_enable+0x164>)
    ef68:	4798      	blx	r3
			}
			desc->sod = ep;
    ef6a:	683b      	ldr	r3, [r7, #0]
    ef6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ef6e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ef70:	683b      	ldr	r3, [r7, #0]
    ef72:	681b      	ldr	r3, [r3, #0]
    ef74:	4618      	mov	r0, r3
    ef76:	4b19      	ldr	r3, [pc, #100]	; (efdc <cdcdf_acm_enable+0x168>)
    ef78:	4798      	blx	r3
    ef7a:	4602      	mov	r2, r0
    ef7c:	683b      	ldr	r3, [r7, #0]
    ef7e:	685b      	ldr	r3, [r3, #4]
    ef80:	4619      	mov	r1, r3
    ef82:	4610      	mov	r0, r2
    ef84:	4b16      	ldr	r3, [pc, #88]	; (efe0 <cdcdf_acm_enable+0x16c>)
    ef86:	4798      	blx	r3
    ef88:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    ef8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef8c:	2b00      	cmp	r3, #0
    ef8e:	d1b7      	bne.n	ef00 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    ef90:	683b      	ldr	r3, [r7, #0]
    ef92:	681b      	ldr	r3, [r3, #0]
    ef94:	4618      	mov	r0, r3
    ef96:	4b11      	ldr	r3, [pc, #68]	; (efdc <cdcdf_acm_enable+0x168>)
    ef98:	4798      	blx	r3
    ef9a:	683b      	ldr	r3, [r7, #0]
    ef9c:	685b      	ldr	r3, [r3, #4]
    ef9e:	2204      	movs	r2, #4
    efa0:	4619      	mov	r1, r3
    efa2:	4b0a      	ldr	r3, [pc, #40]	; (efcc <cdcdf_acm_enable+0x158>)
    efa4:	4798      	blx	r3
    efa6:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    efa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    efac:	3301      	adds	r3, #1
    efae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    efb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    efb6:	2b01      	cmp	r3, #1
    efb8:	f67f af6b 	bls.w	ee92 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    efbc:	4b09      	ldr	r3, [pc, #36]	; (efe4 <cdcdf_acm_enable+0x170>)
    efbe:	2201      	movs	r2, #1
    efc0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    efc2:	2300      	movs	r3, #0
}
    efc4:	4618      	mov	r0, r3
    efc6:	3730      	adds	r7, #48	; 0x30
    efc8:	46bd      	mov	sp, r7
    efca:	bd80      	pop	{r7, pc}
    efcc:	00010235 	.word	0x00010235
    efd0:	0000ee0f 	.word	0x0000ee0f
    efd4:	00005dd5 	.word	0x00005dd5
    efd8:	00005ec1 	.word	0x00005ec1
    efdc:	0000ee51 	.word	0x0000ee51
    efe0:	00010291 	.word	0x00010291
    efe4:	20002800 	.word	0x20002800

0000efe8 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    efe8:	b580      	push	{r7, lr}
    efea:	b088      	sub	sp, #32
    efec:	af00      	add	r7, sp, #0
    efee:	6078      	str	r0, [r7, #4]
    eff0:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    eff2:	687b      	ldr	r3, [r7, #4]
    eff4:	689b      	ldr	r3, [r3, #8]
    eff6:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    eff8:	683b      	ldr	r3, [r7, #0]
    effa:	2b00      	cmp	r3, #0
    effc:	d00c      	beq.n	f018 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    effe:	683b      	ldr	r3, [r7, #0]
    f000:	681b      	ldr	r3, [r3, #0]
    f002:	795b      	ldrb	r3, [r3, #5]
    f004:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    f006:	7c7b      	ldrb	r3, [r7, #17]
    f008:	2b02      	cmp	r3, #2
    f00a:	d005      	beq.n	f018 <cdcdf_acm_disable+0x30>
    f00c:	7c7b      	ldrb	r3, [r7, #17]
    f00e:	2b0a      	cmp	r3, #10
    f010:	d002      	beq.n	f018 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    f012:	f06f 0309 	mvn.w	r3, #9
    f016:	e035      	b.n	f084 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    f018:	2300      	movs	r3, #0
    f01a:	77fb      	strb	r3, [r7, #31]
    f01c:	e01f      	b.n	f05e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    f01e:	7ffb      	ldrb	r3, [r7, #31]
    f020:	69ba      	ldr	r2, [r7, #24]
    f022:	5cd3      	ldrb	r3, [r2, r3]
    f024:	2bff      	cmp	r3, #255	; 0xff
    f026:	d016      	beq.n	f056 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    f028:	7ffb      	ldrb	r3, [r7, #31]
    f02a:	69ba      	ldr	r2, [r7, #24]
    f02c:	21ff      	movs	r1, #255	; 0xff
    f02e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    f030:	7ffb      	ldrb	r3, [r7, #31]
    f032:	69ba      	ldr	r2, [r7, #24]
    f034:	4413      	add	r3, r2
    f036:	789b      	ldrb	r3, [r3, #2]
    f038:	2bff      	cmp	r3, #255	; 0xff
    f03a:	d00d      	beq.n	f058 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    f03c:	7ffb      	ldrb	r3, [r7, #31]
    f03e:	69ba      	ldr	r2, [r7, #24]
    f040:	4413      	add	r3, r2
    f042:	789b      	ldrb	r3, [r3, #2]
    f044:	4618      	mov	r0, r3
    f046:	4b11      	ldr	r3, [pc, #68]	; (f08c <cdcdf_acm_disable+0xa4>)
    f048:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    f04a:	7ffb      	ldrb	r3, [r7, #31]
    f04c:	69ba      	ldr	r2, [r7, #24]
    f04e:	4413      	add	r3, r2
    f050:	22ff      	movs	r2, #255	; 0xff
    f052:	709a      	strb	r2, [r3, #2]
    f054:	e000      	b.n	f058 <cdcdf_acm_disable+0x70>
			continue;
    f056:	bf00      	nop
	for (i = 0; i < 2; i++) {
    f058:	7ffb      	ldrb	r3, [r7, #31]
    f05a:	3301      	adds	r3, #1
    f05c:	77fb      	strb	r3, [r7, #31]
    f05e:	7ffb      	ldrb	r3, [r7, #31]
    f060:	2b01      	cmp	r3, #1
    f062:	d9dc      	bls.n	f01e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    f064:	69bb      	ldr	r3, [r7, #24]
    f066:	791b      	ldrb	r3, [r3, #4]
    f068:	2bff      	cmp	r3, #255	; 0xff
    f06a:	d007      	beq.n	f07c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    f06c:	69bb      	ldr	r3, [r7, #24]
    f06e:	791b      	ldrb	r3, [r3, #4]
    f070:	4618      	mov	r0, r3
    f072:	4b06      	ldr	r3, [pc, #24]	; (f08c <cdcdf_acm_disable+0xa4>)
    f074:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    f076:	69bb      	ldr	r3, [r7, #24]
    f078:	22ff      	movs	r2, #255	; 0xff
    f07a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    f07c:	4b04      	ldr	r3, [pc, #16]	; (f090 <cdcdf_acm_disable+0xa8>)
    f07e:	2200      	movs	r2, #0
    f080:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    f082:	2300      	movs	r3, #0
}
    f084:	4618      	mov	r0, r3
    f086:	3720      	adds	r7, #32
    f088:	46bd      	mov	sp, r7
    f08a:	bd80      	pop	{r7, pc}
    f08c:	00005e71 	.word	0x00005e71
    f090:	20002800 	.word	0x20002800

0000f094 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    f094:	b580      	push	{r7, lr}
    f096:	b084      	sub	sp, #16
    f098:	af00      	add	r7, sp, #0
    f09a:	60f8      	str	r0, [r7, #12]
    f09c:	460b      	mov	r3, r1
    f09e:	607a      	str	r2, [r7, #4]
    f0a0:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    f0a2:	7afb      	ldrb	r3, [r7, #11]
    f0a4:	2b01      	cmp	r3, #1
    f0a6:	d009      	beq.n	f0bc <cdcdf_acm_ctrl+0x28>
    f0a8:	2b02      	cmp	r3, #2
    f0aa:	d00d      	beq.n	f0c8 <cdcdf_acm_ctrl+0x34>
    f0ac:	2b00      	cmp	r3, #0
    f0ae:	d10e      	bne.n	f0ce <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    f0b0:	6879      	ldr	r1, [r7, #4]
    f0b2:	68f8      	ldr	r0, [r7, #12]
    f0b4:	4b09      	ldr	r3, [pc, #36]	; (f0dc <cdcdf_acm_ctrl+0x48>)
    f0b6:	4798      	blx	r3
    f0b8:	4603      	mov	r3, r0
    f0ba:	e00a      	b.n	f0d2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    f0bc:	6879      	ldr	r1, [r7, #4]
    f0be:	68f8      	ldr	r0, [r7, #12]
    f0c0:	4b07      	ldr	r3, [pc, #28]	; (f0e0 <cdcdf_acm_ctrl+0x4c>)
    f0c2:	4798      	blx	r3
    f0c4:	4603      	mov	r3, r0
    f0c6:	e004      	b.n	f0d2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    f0c8:	f06f 031a 	mvn.w	r3, #26
    f0cc:	e001      	b.n	f0d2 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    f0ce:	f06f 030c 	mvn.w	r3, #12
	}
}
    f0d2:	4618      	mov	r0, r3
    f0d4:	3710      	adds	r7, #16
    f0d6:	46bd      	mov	sp, r7
    f0d8:	bd80      	pop	{r7, pc}
    f0da:	bf00      	nop
    f0dc:	0000ee75 	.word	0x0000ee75
    f0e0:	0000efe9 	.word	0x0000efe9

0000f0e4 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f0e4:	b590      	push	{r4, r7, lr}
    f0e6:	b087      	sub	sp, #28
    f0e8:	af00      	add	r7, sp, #0
    f0ea:	4603      	mov	r3, r0
    f0ec:	6039      	str	r1, [r7, #0]
    f0ee:	71fb      	strb	r3, [r7, #7]
    f0f0:	4613      	mov	r3, r2
    f0f2:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    f0f4:	683b      	ldr	r3, [r7, #0]
    f0f6:	799a      	ldrb	r2, [r3, #6]
    f0f8:	79db      	ldrb	r3, [r3, #7]
    f0fa:	021b      	lsls	r3, r3, #8
    f0fc:	4313      	orrs	r3, r2
    f0fe:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    f100:	4b2b      	ldr	r3, [pc, #172]	; (f1b0 <cdcdf_acm_set_req+0xcc>)
    f102:	4798      	blx	r3
    f104:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    f106:	683b      	ldr	r3, [r7, #0]
    f108:	785b      	ldrb	r3, [r3, #1]
    f10a:	2b20      	cmp	r3, #32
    f10c:	d002      	beq.n	f114 <cdcdf_acm_set_req+0x30>
    f10e:	2b22      	cmp	r3, #34	; 0x22
    f110:	d034      	beq.n	f17c <cdcdf_acm_set_req+0x98>
    f112:	e046      	b.n	f1a2 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    f114:	8afb      	ldrh	r3, [r7, #22]
    f116:	2b07      	cmp	r3, #7
    f118:	d002      	beq.n	f120 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    f11a:	f04f 33ff 	mov.w	r3, #4294967295
    f11e:	e042      	b.n	f1a6 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    f120:	79bb      	ldrb	r3, [r7, #6]
    f122:	2b00      	cmp	r3, #0
    f124:	d107      	bne.n	f136 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    f126:	8afa      	ldrh	r2, [r7, #22]
    f128:	79f8      	ldrb	r0, [r7, #7]
    f12a:	2300      	movs	r3, #0
    f12c:	6939      	ldr	r1, [r7, #16]
    f12e:	4c21      	ldr	r4, [pc, #132]	; (f1b4 <cdcdf_acm_set_req+0xd0>)
    f130:	47a0      	blx	r4
    f132:	4603      	mov	r3, r0
    f134:	e037      	b.n	f1a6 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    f136:	693a      	ldr	r2, [r7, #16]
    f138:	f107 0308 	add.w	r3, r7, #8
    f13c:	6810      	ldr	r0, [r2, #0]
    f13e:	6018      	str	r0, [r3, #0]
    f140:	8891      	ldrh	r1, [r2, #4]
    f142:	7992      	ldrb	r2, [r2, #6]
    f144:	8099      	strh	r1, [r3, #4]
    f146:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    f148:	4b1b      	ldr	r3, [pc, #108]	; (f1b8 <cdcdf_acm_set_req+0xd4>)
    f14a:	681b      	ldr	r3, [r3, #0]
    f14c:	2b00      	cmp	r3, #0
    f14e:	d008      	beq.n	f162 <cdcdf_acm_set_req+0x7e>
    f150:	4b19      	ldr	r3, [pc, #100]	; (f1b8 <cdcdf_acm_set_req+0xd4>)
    f152:	681b      	ldr	r3, [r3, #0]
    f154:	f107 0208 	add.w	r2, r7, #8
    f158:	4610      	mov	r0, r2
    f15a:	4798      	blx	r3
    f15c:	4603      	mov	r3, r0
    f15e:	2b00      	cmp	r3, #0
    f160:	d00a      	beq.n	f178 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    f162:	4b16      	ldr	r3, [pc, #88]	; (f1bc <cdcdf_acm_set_req+0xd8>)
    f164:	f107 0208 	add.w	r2, r7, #8
    f168:	e892 0003 	ldmia.w	r2, {r0, r1}
    f16c:	6018      	str	r0, [r3, #0]
    f16e:	3304      	adds	r3, #4
    f170:	8019      	strh	r1, [r3, #0]
    f172:	3302      	adds	r3, #2
    f174:	0c0a      	lsrs	r2, r1, #16
    f176:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    f178:	2300      	movs	r3, #0
    f17a:	e014      	b.n	f1a6 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    f17c:	2300      	movs	r3, #0
    f17e:	2200      	movs	r2, #0
    f180:	2100      	movs	r1, #0
    f182:	2000      	movs	r0, #0
    f184:	4c0b      	ldr	r4, [pc, #44]	; (f1b4 <cdcdf_acm_set_req+0xd0>)
    f186:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    f188:	4b0d      	ldr	r3, [pc, #52]	; (f1c0 <cdcdf_acm_set_req+0xdc>)
    f18a:	681b      	ldr	r3, [r3, #0]
    f18c:	2b00      	cmp	r3, #0
    f18e:	d006      	beq.n	f19e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    f190:	4b0b      	ldr	r3, [pc, #44]	; (f1c0 <cdcdf_acm_set_req+0xdc>)
    f192:	681b      	ldr	r3, [r3, #0]
    f194:	683a      	ldr	r2, [r7, #0]
    f196:	8852      	ldrh	r2, [r2, #2]
    f198:	b292      	uxth	r2, r2
    f19a:	4610      	mov	r0, r2
    f19c:	4798      	blx	r3
		}
		return ERR_NONE;
    f19e:	2300      	movs	r3, #0
    f1a0:	e001      	b.n	f1a6 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    f1a2:	f06f 030c 	mvn.w	r3, #12
	}
}
    f1a6:	4618      	mov	r0, r3
    f1a8:	371c      	adds	r7, #28
    f1aa:	46bd      	mov	sp, r7
    f1ac:	bd90      	pop	{r4, r7, pc}
    f1ae:	bf00      	nop
    f1b0:	00010131 	.word	0x00010131
    f1b4:	0000ffa5 	.word	0x0000ffa5
    f1b8:	20002814 	.word	0x20002814
    f1bc:	20002808 	.word	0x20002808
    f1c0:	20002810 	.word	0x20002810

0000f1c4 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f1c4:	b590      	push	{r4, r7, lr}
    f1c6:	b085      	sub	sp, #20
    f1c8:	af00      	add	r7, sp, #0
    f1ca:	4603      	mov	r3, r0
    f1cc:	6039      	str	r1, [r7, #0]
    f1ce:	71fb      	strb	r3, [r7, #7]
    f1d0:	4613      	mov	r3, r2
    f1d2:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    f1d4:	683b      	ldr	r3, [r7, #0]
    f1d6:	799a      	ldrb	r2, [r3, #6]
    f1d8:	79db      	ldrb	r3, [r3, #7]
    f1da:	021b      	lsls	r3, r3, #8
    f1dc:	4313      	orrs	r3, r2
    f1de:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    f1e0:	79bb      	ldrb	r3, [r7, #6]
    f1e2:	2b01      	cmp	r3, #1
    f1e4:	d101      	bne.n	f1ea <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    f1e6:	2300      	movs	r3, #0
    f1e8:	e013      	b.n	f212 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    f1ea:	683b      	ldr	r3, [r7, #0]
    f1ec:	785b      	ldrb	r3, [r3, #1]
    f1ee:	2b21      	cmp	r3, #33	; 0x21
    f1f0:	d10d      	bne.n	f20e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    f1f2:	89fb      	ldrh	r3, [r7, #14]
    f1f4:	2b07      	cmp	r3, #7
    f1f6:	d002      	beq.n	f1fe <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    f1f8:	f04f 33ff 	mov.w	r3, #4294967295
    f1fc:	e009      	b.n	f212 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    f1fe:	89fa      	ldrh	r2, [r7, #14]
    f200:	79f8      	ldrb	r0, [r7, #7]
    f202:	2300      	movs	r3, #0
    f204:	4905      	ldr	r1, [pc, #20]	; (f21c <cdcdf_acm_get_req+0x58>)
    f206:	4c06      	ldr	r4, [pc, #24]	; (f220 <cdcdf_acm_get_req+0x5c>)
    f208:	47a0      	blx	r4
    f20a:	4603      	mov	r3, r0
    f20c:	e001      	b.n	f212 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    f20e:	f06f 030c 	mvn.w	r3, #12
	}
}
    f212:	4618      	mov	r0, r3
    f214:	3714      	adds	r7, #20
    f216:	46bd      	mov	sp, r7
    f218:	bd90      	pop	{r4, r7, pc}
    f21a:	bf00      	nop
    f21c:	20002808 	.word	0x20002808
    f220:	0000ffa5 	.word	0x0000ffa5

0000f224 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f224:	b580      	push	{r7, lr}
    f226:	b082      	sub	sp, #8
    f228:	af00      	add	r7, sp, #0
    f22a:	4603      	mov	r3, r0
    f22c:	6039      	str	r1, [r7, #0]
    f22e:	71fb      	strb	r3, [r7, #7]
    f230:	4613      	mov	r3, r2
    f232:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    f234:	683b      	ldr	r3, [r7, #0]
    f236:	781b      	ldrb	r3, [r3, #0]
    f238:	095b      	lsrs	r3, r3, #5
    f23a:	b2db      	uxtb	r3, r3
    f23c:	f003 0303 	and.w	r3, r3, #3
    f240:	2b01      	cmp	r3, #1
    f242:	d002      	beq.n	f24a <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    f244:	f06f 0309 	mvn.w	r3, #9
    f248:	e026      	b.n	f298 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    f24a:	683b      	ldr	r3, [r7, #0]
    f24c:	889b      	ldrh	r3, [r3, #4]
    f24e:	b29a      	uxth	r2, r3
    f250:	4b13      	ldr	r3, [pc, #76]	; (f2a0 <cdcdf_acm_req+0x7c>)
    f252:	781b      	ldrb	r3, [r3, #0]
    f254:	b29b      	uxth	r3, r3
    f256:	429a      	cmp	r2, r3
    f258:	d007      	beq.n	f26a <cdcdf_acm_req+0x46>
    f25a:	683b      	ldr	r3, [r7, #0]
    f25c:	889b      	ldrh	r3, [r3, #4]
    f25e:	b29a      	uxth	r2, r3
    f260:	4b0f      	ldr	r3, [pc, #60]	; (f2a0 <cdcdf_acm_req+0x7c>)
    f262:	785b      	ldrb	r3, [r3, #1]
    f264:	b29b      	uxth	r3, r3
    f266:	429a      	cmp	r2, r3
    f268:	d114      	bne.n	f294 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    f26a:	683b      	ldr	r3, [r7, #0]
    f26c:	781b      	ldrb	r3, [r3, #0]
    f26e:	b25b      	sxtb	r3, r3
    f270:	2b00      	cmp	r3, #0
    f272:	da07      	bge.n	f284 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    f274:	79ba      	ldrb	r2, [r7, #6]
    f276:	79fb      	ldrb	r3, [r7, #7]
    f278:	6839      	ldr	r1, [r7, #0]
    f27a:	4618      	mov	r0, r3
    f27c:	4b09      	ldr	r3, [pc, #36]	; (f2a4 <cdcdf_acm_req+0x80>)
    f27e:	4798      	blx	r3
    f280:	4603      	mov	r3, r0
    f282:	e009      	b.n	f298 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    f284:	79ba      	ldrb	r2, [r7, #6]
    f286:	79fb      	ldrb	r3, [r7, #7]
    f288:	6839      	ldr	r1, [r7, #0]
    f28a:	4618      	mov	r0, r3
    f28c:	4b06      	ldr	r3, [pc, #24]	; (f2a8 <cdcdf_acm_req+0x84>)
    f28e:	4798      	blx	r3
    f290:	4603      	mov	r3, r0
    f292:	e001      	b.n	f298 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    f294:	f06f 0309 	mvn.w	r3, #9
	}
}
    f298:	4618      	mov	r0, r3
    f29a:	3708      	adds	r7, #8
    f29c:	46bd      	mov	sp, r7
    f29e:	bd80      	pop	{r7, pc}
    f2a0:	20002800 	.word	0x20002800
    f2a4:	0000f1c5 	.word	0x0000f1c5
    f2a8:	0000f0e5 	.word	0x0000f0e5

0000f2ac <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    f2ac:	b580      	push	{r7, lr}
    f2ae:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    f2b0:	4b0b      	ldr	r3, [pc, #44]	; (f2e0 <cdcdf_acm_init+0x34>)
    f2b2:	4798      	blx	r3
    f2b4:	4603      	mov	r3, r0
    f2b6:	2b01      	cmp	r3, #1
    f2b8:	d902      	bls.n	f2c0 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    f2ba:	f06f 0310 	mvn.w	r3, #16
    f2be:	e00d      	b.n	f2dc <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    f2c0:	4b08      	ldr	r3, [pc, #32]	; (f2e4 <cdcdf_acm_init+0x38>)
    f2c2:	4a09      	ldr	r2, [pc, #36]	; (f2e8 <cdcdf_acm_init+0x3c>)
    f2c4:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    f2c6:	4b07      	ldr	r3, [pc, #28]	; (f2e4 <cdcdf_acm_init+0x38>)
    f2c8:	4a08      	ldr	r2, [pc, #32]	; (f2ec <cdcdf_acm_init+0x40>)
    f2ca:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    f2cc:	4805      	ldr	r0, [pc, #20]	; (f2e4 <cdcdf_acm_init+0x38>)
    f2ce:	4b08      	ldr	r3, [pc, #32]	; (f2f0 <cdcdf_acm_init+0x44>)
    f2d0:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    f2d2:	4908      	ldr	r1, [pc, #32]	; (f2f4 <cdcdf_acm_init+0x48>)
    f2d4:	2001      	movs	r0, #1
    f2d6:	4b08      	ldr	r3, [pc, #32]	; (f2f8 <cdcdf_acm_init+0x4c>)
    f2d8:	4798      	blx	r3
	return ERR_NONE;
    f2da:	2300      	movs	r3, #0
}
    f2dc:	4618      	mov	r0, r3
    f2de:	bd80      	pop	{r7, pc}
    f2e0:	00010149 	.word	0x00010149
    f2e4:	200027f4 	.word	0x200027f4
    f2e8:	0000f095 	.word	0x0000f095
    f2ec:	20002800 	.word	0x20002800
    f2f0:	000100b1 	.word	0x000100b1
    f2f4:	20000170 	.word	0x20000170
    f2f8:	0000ffe1 	.word	0x0000ffe1

0000f2fc <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    f2fc:	b590      	push	{r4, r7, lr}
    f2fe:	b083      	sub	sp, #12
    f300:	af00      	add	r7, sp, #0
    f302:	6078      	str	r0, [r7, #4]
    f304:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    f306:	4b0b      	ldr	r3, [pc, #44]	; (f334 <cdcdf_acm_read+0x38>)
    f308:	4798      	blx	r3
    f30a:	4603      	mov	r3, r0
    f30c:	f083 0301 	eor.w	r3, r3, #1
    f310:	b2db      	uxtb	r3, r3
    f312:	2b00      	cmp	r3, #0
    f314:	d002      	beq.n	f31c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    f316:	f06f 0310 	mvn.w	r3, #16
    f31a:	e007      	b.n	f32c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    f31c:	4b06      	ldr	r3, [pc, #24]	; (f338 <cdcdf_acm_read+0x3c>)
    f31e:	7918      	ldrb	r0, [r3, #4]
    f320:	2300      	movs	r3, #0
    f322:	683a      	ldr	r2, [r7, #0]
    f324:	6879      	ldr	r1, [r7, #4]
    f326:	4c05      	ldr	r4, [pc, #20]	; (f33c <cdcdf_acm_read+0x40>)
    f328:	47a0      	blx	r4
    f32a:	4603      	mov	r3, r0
}
    f32c:	4618      	mov	r0, r3
    f32e:	370c      	adds	r7, #12
    f330:	46bd      	mov	sp, r7
    f332:	bd90      	pop	{r4, r7, pc}
    f334:	0000f421 	.word	0x0000f421
    f338:	20002800 	.word	0x20002800
    f33c:	0000ffa5 	.word	0x0000ffa5

0000f340 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    f340:	b590      	push	{r4, r7, lr}
    f342:	b083      	sub	sp, #12
    f344:	af00      	add	r7, sp, #0
    f346:	6078      	str	r0, [r7, #4]
    f348:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    f34a:	4b0b      	ldr	r3, [pc, #44]	; (f378 <cdcdf_acm_write+0x38>)
    f34c:	4798      	blx	r3
    f34e:	4603      	mov	r3, r0
    f350:	f083 0301 	eor.w	r3, r3, #1
    f354:	b2db      	uxtb	r3, r3
    f356:	2b00      	cmp	r3, #0
    f358:	d002      	beq.n	f360 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    f35a:	f06f 0310 	mvn.w	r3, #16
    f35e:	e007      	b.n	f370 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    f360:	4b06      	ldr	r3, [pc, #24]	; (f37c <cdcdf_acm_write+0x3c>)
    f362:	78d8      	ldrb	r0, [r3, #3]
    f364:	2301      	movs	r3, #1
    f366:	683a      	ldr	r2, [r7, #0]
    f368:	6879      	ldr	r1, [r7, #4]
    f36a:	4c05      	ldr	r4, [pc, #20]	; (f380 <cdcdf_acm_write+0x40>)
    f36c:	47a0      	blx	r4
    f36e:	4603      	mov	r3, r0
}
    f370:	4618      	mov	r0, r3
    f372:	370c      	adds	r7, #12
    f374:	46bd      	mov	sp, r7
    f376:	bd90      	pop	{r4, r7, pc}
    f378:	0000f421 	.word	0x0000f421
    f37c:	20002800 	.word	0x20002800
    f380:	0000ffa5 	.word	0x0000ffa5

0000f384 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    f384:	b580      	push	{r7, lr}
    f386:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    f388:	4b05      	ldr	r3, [pc, #20]	; (f3a0 <cdcdf_acm_stop_xfer+0x1c>)
    f38a:	78db      	ldrb	r3, [r3, #3]
    f38c:	4618      	mov	r0, r3
    f38e:	4b05      	ldr	r3, [pc, #20]	; (f3a4 <cdcdf_acm_stop_xfer+0x20>)
    f390:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    f392:	4b03      	ldr	r3, [pc, #12]	; (f3a0 <cdcdf_acm_stop_xfer+0x1c>)
    f394:	791b      	ldrb	r3, [r3, #4]
    f396:	4618      	mov	r0, r3
    f398:	4b02      	ldr	r3, [pc, #8]	; (f3a4 <cdcdf_acm_stop_xfer+0x20>)
    f39a:	4798      	blx	r3
}
    f39c:	bf00      	nop
    f39e:	bd80      	pop	{r7, pc}
    f3a0:	20002800 	.word	0x20002800
    f3a4:	00006099 	.word	0x00006099

0000f3a8 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    f3a8:	b580      	push	{r7, lr}
    f3aa:	b082      	sub	sp, #8
    f3ac:	af00      	add	r7, sp, #0
    f3ae:	4603      	mov	r3, r0
    f3b0:	6039      	str	r1, [r7, #0]
    f3b2:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    f3b4:	79fb      	ldrb	r3, [r7, #7]
    f3b6:	2b03      	cmp	r3, #3
    f3b8:	d822      	bhi.n	f400 <cdcdf_acm_register_callback+0x58>
    f3ba:	a201      	add	r2, pc, #4	; (adr r2, f3c0 <cdcdf_acm_register_callback+0x18>)
    f3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f3c0:	0000f3d1 	.word	0x0000f3d1
    f3c4:	0000f3e1 	.word	0x0000f3e1
    f3c8:	0000f3f1 	.word	0x0000f3f1
    f3cc:	0000f3f9 	.word	0x0000f3f9
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    f3d0:	4b0f      	ldr	r3, [pc, #60]	; (f410 <cdcdf_acm_register_callback+0x68>)
    f3d2:	791b      	ldrb	r3, [r3, #4]
    f3d4:	683a      	ldr	r2, [r7, #0]
    f3d6:	2102      	movs	r1, #2
    f3d8:	4618      	mov	r0, r3
    f3da:	4b0e      	ldr	r3, [pc, #56]	; (f414 <cdcdf_acm_register_callback+0x6c>)
    f3dc:	4798      	blx	r3
		break;
    f3de:	e012      	b.n	f406 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    f3e0:	4b0b      	ldr	r3, [pc, #44]	; (f410 <cdcdf_acm_register_callback+0x68>)
    f3e2:	78db      	ldrb	r3, [r3, #3]
    f3e4:	683a      	ldr	r2, [r7, #0]
    f3e6:	2102      	movs	r1, #2
    f3e8:	4618      	mov	r0, r3
    f3ea:	4b0a      	ldr	r3, [pc, #40]	; (f414 <cdcdf_acm_register_callback+0x6c>)
    f3ec:	4798      	blx	r3
		break;
    f3ee:	e00a      	b.n	f406 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    f3f0:	4a09      	ldr	r2, [pc, #36]	; (f418 <cdcdf_acm_register_callback+0x70>)
    f3f2:	683b      	ldr	r3, [r7, #0]
    f3f4:	6013      	str	r3, [r2, #0]
		break;
    f3f6:	e006      	b.n	f406 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    f3f8:	4a08      	ldr	r2, [pc, #32]	; (f41c <cdcdf_acm_register_callback+0x74>)
    f3fa:	683b      	ldr	r3, [r7, #0]
    f3fc:	6013      	str	r3, [r2, #0]
		break;
    f3fe:	e002      	b.n	f406 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    f400:	f06f 030c 	mvn.w	r3, #12
    f404:	e000      	b.n	f408 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    f406:	2300      	movs	r3, #0
}
    f408:	4618      	mov	r0, r3
    f40a:	3708      	adds	r7, #8
    f40c:	46bd      	mov	sp, r7
    f40e:	bd80      	pop	{r7, pc}
    f410:	20002800 	.word	0x20002800
    f414:	000061c5 	.word	0x000061c5
    f418:	20002814 	.word	0x20002814
    f41c:	20002810 	.word	0x20002810

0000f420 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    f420:	b480      	push	{r7}
    f422:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    f424:	4b03      	ldr	r3, [pc, #12]	; (f434 <cdcdf_acm_is_enabled+0x14>)
    f426:	795b      	ldrb	r3, [r3, #5]
}
    f428:	4618      	mov	r0, r3
    f42a:	46bd      	mov	sp, r7
    f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
    f430:	4770      	bx	lr
    f432:	bf00      	nop
    f434:	20002800 	.word	0x20002800

0000f438 <usb_get_u16>:
{
    f438:	b480      	push	{r7}
    f43a:	b083      	sub	sp, #12
    f43c:	af00      	add	r7, sp, #0
    f43e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    f440:	687b      	ldr	r3, [r7, #4]
    f442:	781b      	ldrb	r3, [r3, #0]
    f444:	b29a      	uxth	r2, r3
    f446:	687b      	ldr	r3, [r7, #4]
    f448:	3301      	adds	r3, #1
    f44a:	781b      	ldrb	r3, [r3, #0]
    f44c:	b29b      	uxth	r3, r3
    f44e:	021b      	lsls	r3, r3, #8
    f450:	b29b      	uxth	r3, r3
    f452:	4413      	add	r3, r2
    f454:	b29b      	uxth	r3, r3
}
    f456:	4618      	mov	r0, r3
    f458:	370c      	adds	r7, #12
    f45a:	46bd      	mov	sp, r7
    f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
    f460:	4770      	bx	lr

0000f462 <usb_desc_len>:
{
    f462:	b480      	push	{r7}
    f464:	b083      	sub	sp, #12
    f466:	af00      	add	r7, sp, #0
    f468:	6078      	str	r0, [r7, #4]
	return desc[0];
    f46a:	687b      	ldr	r3, [r7, #4]
    f46c:	781b      	ldrb	r3, [r3, #0]
}
    f46e:	4618      	mov	r0, r3
    f470:	370c      	adds	r7, #12
    f472:	46bd      	mov	sp, r7
    f474:	f85d 7b04 	ldr.w	r7, [sp], #4
    f478:	4770      	bx	lr
	...

0000f47c <usb_desc_next>:
{
    f47c:	b580      	push	{r7, lr}
    f47e:	b082      	sub	sp, #8
    f480:	af00      	add	r7, sp, #0
    f482:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    f484:	6878      	ldr	r0, [r7, #4]
    f486:	4b05      	ldr	r3, [pc, #20]	; (f49c <usb_desc_next+0x20>)
    f488:	4798      	blx	r3
    f48a:	4603      	mov	r3, r0
    f48c:	461a      	mov	r2, r3
    f48e:	687b      	ldr	r3, [r7, #4]
    f490:	4413      	add	r3, r2
}
    f492:	4618      	mov	r0, r3
    f494:	3708      	adds	r7, #8
    f496:	46bd      	mov	sp, r7
    f498:	bd80      	pop	{r7, pc}
    f49a:	bf00      	nop
    f49c:	0000f463 	.word	0x0000f463

0000f4a0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    f4a0:	b580      	push	{r7, lr}
    f4a2:	b082      	sub	sp, #8
    f4a4:	af00      	add	r7, sp, #0
    f4a6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    f4a8:	687b      	ldr	r3, [r7, #4]
    f4aa:	3302      	adds	r3, #2
    f4ac:	4618      	mov	r0, r3
    f4ae:	4b03      	ldr	r3, [pc, #12]	; (f4bc <usb_cfg_desc_total_len+0x1c>)
    f4b0:	4798      	blx	r3
    f4b2:	4603      	mov	r3, r0
}
    f4b4:	4618      	mov	r0, r3
    f4b6:	3708      	adds	r7, #8
    f4b8:	46bd      	mov	sp, r7
    f4ba:	bd80      	pop	{r7, pc}
    f4bc:	0000f439 	.word	0x0000f439

0000f4c0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    f4c0:	b590      	push	{r4, r7, lr}
    f4c2:	b085      	sub	sp, #20
    f4c4:	af00      	add	r7, sp, #0
    f4c6:	4603      	mov	r3, r0
    f4c8:	6039      	str	r1, [r7, #0]
    f4ca:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    f4cc:	2300      	movs	r3, #0
    f4ce:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    f4d0:	683b      	ldr	r3, [r7, #0]
    f4d2:	799a      	ldrb	r2, [r3, #6]
    f4d4:	79db      	ldrb	r3, [r3, #7]
    f4d6:	021b      	lsls	r3, r3, #8
    f4d8:	4313      	orrs	r3, r2
    f4da:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    f4dc:	897b      	ldrh	r3, [r7, #10]
    f4de:	2b12      	cmp	r3, #18
    f4e0:	d901      	bls.n	f4e6 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    f4e2:	2312      	movs	r3, #18
    f4e4:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    f4e6:	68fb      	ldr	r3, [r7, #12]
    f4e8:	2b00      	cmp	r3, #0
    f4ea:	d10a      	bne.n	f502 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    f4ec:	4b0f      	ldr	r3, [pc, #60]	; (f52c <usbdc_get_dev_desc+0x6c>)
    f4ee:	681b      	ldr	r3, [r3, #0]
    f4f0:	6818      	ldr	r0, [r3, #0]
    f4f2:	4b0e      	ldr	r3, [pc, #56]	; (f52c <usbdc_get_dev_desc+0x6c>)
    f4f4:	681b      	ldr	r3, [r3, #0]
    f4f6:	685b      	ldr	r3, [r3, #4]
    f4f8:	2201      	movs	r2, #1
    f4fa:	4619      	mov	r1, r3
    f4fc:	4b0c      	ldr	r3, [pc, #48]	; (f530 <usbdc_get_dev_desc+0x70>)
    f4fe:	4798      	blx	r3
    f500:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    f502:	68fb      	ldr	r3, [r7, #12]
    f504:	2b00      	cmp	r3, #0
    f506:	d101      	bne.n	f50c <usbdc_get_dev_desc+0x4c>
		return false;
    f508:	2300      	movs	r3, #0
    f50a:	e00b      	b.n	f524 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    f50c:	897a      	ldrh	r2, [r7, #10]
    f50e:	79f8      	ldrb	r0, [r7, #7]
    f510:	2300      	movs	r3, #0
    f512:	68f9      	ldr	r1, [r7, #12]
    f514:	4c07      	ldr	r4, [pc, #28]	; (f534 <usbdc_get_dev_desc+0x74>)
    f516:	47a0      	blx	r4
    f518:	4603      	mov	r3, r0
    f51a:	2b00      	cmp	r3, #0
    f51c:	d001      	beq.n	f522 <usbdc_get_dev_desc+0x62>
		return false;
    f51e:	2300      	movs	r3, #0
    f520:	e000      	b.n	f524 <usbdc_get_dev_desc+0x64>
	}
	return true;
    f522:	2301      	movs	r3, #1
}
    f524:	4618      	mov	r0, r3
    f526:	3714      	adds	r7, #20
    f528:	46bd      	mov	sp, r7
    f52a:	bd90      	pop	{r4, r7, pc}
    f52c:	20002818 	.word	0x20002818
    f530:	00010235 	.word	0x00010235
    f534:	0000ffa5 	.word	0x0000ffa5

0000f538 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    f538:	b590      	push	{r4, r7, lr}
    f53a:	b087      	sub	sp, #28
    f53c:	af00      	add	r7, sp, #0
    f53e:	4603      	mov	r3, r0
    f540:	6039      	str	r1, [r7, #0]
    f542:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    f544:	2300      	movs	r3, #0
    f546:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    f548:	683b      	ldr	r3, [r7, #0]
    f54a:	799a      	ldrb	r2, [r3, #6]
    f54c:	79db      	ldrb	r3, [r3, #7]
    f54e:	021b      	lsls	r3, r3, #8
    f550:	4313      	orrs	r3, r2
    f552:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    f554:	683b      	ldr	r3, [r7, #0]
    f556:	885b      	ldrh	r3, [r3, #2]
    f558:	b29b      	uxth	r3, r3
    f55a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    f55c:	8a7a      	ldrh	r2, [r7, #18]
    f55e:	4b1e      	ldr	r3, [pc, #120]	; (f5d8 <usbdc_get_cfg_desc+0xa0>)
    f560:	7f1b      	ldrb	r3, [r3, #28]
    f562:	3b01      	subs	r3, #1
    f564:	4013      	ands	r3, r2
    f566:	2b00      	cmp	r3, #0
    f568:	bf0c      	ite	eq
    f56a:	2301      	moveq	r3, #1
    f56c:	2300      	movne	r3, #0
    f56e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    f570:	697b      	ldr	r3, [r7, #20]
    f572:	2b00      	cmp	r3, #0
    f574:	d10c      	bne.n	f590 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    f576:	4b18      	ldr	r3, [pc, #96]	; (f5d8 <usbdc_get_cfg_desc+0xa0>)
    f578:	681b      	ldr	r3, [r3, #0]
    f57a:	6818      	ldr	r0, [r3, #0]
    f57c:	4b16      	ldr	r3, [pc, #88]	; (f5d8 <usbdc_get_cfg_desc+0xa0>)
    f57e:	681b      	ldr	r3, [r3, #0]
    f580:	6859      	ldr	r1, [r3, #4]
    f582:	7c3b      	ldrb	r3, [r7, #16]
    f584:	3301      	adds	r3, #1
    f586:	b2db      	uxtb	r3, r3
    f588:	461a      	mov	r2, r3
    f58a:	4b14      	ldr	r3, [pc, #80]	; (f5dc <usbdc_get_cfg_desc+0xa4>)
    f58c:	4798      	blx	r3
    f58e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    f590:	697b      	ldr	r3, [r7, #20]
    f592:	2b00      	cmp	r3, #0
    f594:	d101      	bne.n	f59a <usbdc_get_cfg_desc+0x62>
		return false;
    f596:	2300      	movs	r3, #0
    f598:	e019      	b.n	f5ce <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    f59a:	6978      	ldr	r0, [r7, #20]
    f59c:	4b10      	ldr	r3, [pc, #64]	; (f5e0 <usbdc_get_cfg_desc+0xa8>)
    f59e:	4798      	blx	r3
    f5a0:	4603      	mov	r3, r0
    f5a2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    f5a4:	8a7a      	ldrh	r2, [r7, #18]
    f5a6:	89fb      	ldrh	r3, [r7, #14]
    f5a8:	429a      	cmp	r2, r3
    f5aa:	d802      	bhi.n	f5b2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    f5ac:	2300      	movs	r3, #0
    f5ae:	747b      	strb	r3, [r7, #17]
    f5b0:	e001      	b.n	f5b6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    f5b2:	89fb      	ldrh	r3, [r7, #14]
    f5b4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    f5b6:	8a7a      	ldrh	r2, [r7, #18]
    f5b8:	7c7b      	ldrb	r3, [r7, #17]
    f5ba:	79f8      	ldrb	r0, [r7, #7]
    f5bc:	6979      	ldr	r1, [r7, #20]
    f5be:	4c09      	ldr	r4, [pc, #36]	; (f5e4 <usbdc_get_cfg_desc+0xac>)
    f5c0:	47a0      	blx	r4
    f5c2:	4603      	mov	r3, r0
    f5c4:	2b00      	cmp	r3, #0
    f5c6:	d001      	beq.n	f5cc <usbdc_get_cfg_desc+0x94>
		return false;
    f5c8:	2300      	movs	r3, #0
    f5ca:	e000      	b.n	f5ce <usbdc_get_cfg_desc+0x96>
	}
	return true;
    f5cc:	2301      	movs	r3, #1
}
    f5ce:	4618      	mov	r0, r3
    f5d0:	371c      	adds	r7, #28
    f5d2:	46bd      	mov	sp, r7
    f5d4:	bd90      	pop	{r4, r7, pc}
    f5d6:	bf00      	nop
    f5d8:	20002818 	.word	0x20002818
    f5dc:	000102f5 	.word	0x000102f5
    f5e0:	0000f4a1 	.word	0x0000f4a1
    f5e4:	0000ffa5 	.word	0x0000ffa5

0000f5e8 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    f5e8:	b590      	push	{r4, r7, lr}
    f5ea:	b085      	sub	sp, #20
    f5ec:	af00      	add	r7, sp, #0
    f5ee:	4603      	mov	r3, r0
    f5f0:	6039      	str	r1, [r7, #0]
    f5f2:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    f5f4:	683b      	ldr	r3, [r7, #0]
    f5f6:	799a      	ldrb	r2, [r3, #6]
    f5f8:	79db      	ldrb	r3, [r3, #7]
    f5fa:	021b      	lsls	r3, r3, #8
    f5fc:	4313      	orrs	r3, r2
    f5fe:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    f600:	683b      	ldr	r3, [r7, #0]
    f602:	885b      	ldrh	r3, [r3, #2]
    f604:	b29b      	uxth	r3, r3
    f606:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    f608:	89fa      	ldrh	r2, [r7, #14]
    f60a:	4b1a      	ldr	r3, [pc, #104]	; (f674 <usbdc_get_str_desc+0x8c>)
    f60c:	7f1b      	ldrb	r3, [r3, #28]
    f60e:	3b01      	subs	r3, #1
    f610:	4013      	ands	r3, r2
    f612:	2b00      	cmp	r3, #0
    f614:	bf0c      	ite	eq
    f616:	2301      	moveq	r3, #1
    f618:	2300      	movne	r3, #0
    f61a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    f61c:	4b15      	ldr	r3, [pc, #84]	; (f674 <usbdc_get_str_desc+0x8c>)
    f61e:	681b      	ldr	r3, [r3, #0]
    f620:	6818      	ldr	r0, [r3, #0]
    f622:	4b14      	ldr	r3, [pc, #80]	; (f674 <usbdc_get_str_desc+0x8c>)
    f624:	681b      	ldr	r3, [r3, #0]
    f626:	685b      	ldr	r3, [r3, #4]
    f628:	7b3a      	ldrb	r2, [r7, #12]
    f62a:	4619      	mov	r1, r3
    f62c:	4b12      	ldr	r3, [pc, #72]	; (f678 <usbdc_get_str_desc+0x90>)
    f62e:	4798      	blx	r3
    f630:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    f632:	68bb      	ldr	r3, [r7, #8]
    f634:	2b00      	cmp	r3, #0
    f636:	d101      	bne.n	f63c <usbdc_get_str_desc+0x54>
		return false;
    f638:	2300      	movs	r3, #0
    f63a:	e017      	b.n	f66c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    f63c:	68bb      	ldr	r3, [r7, #8]
    f63e:	781b      	ldrb	r3, [r3, #0]
    f640:	b29b      	uxth	r3, r3
    f642:	89fa      	ldrh	r2, [r7, #14]
    f644:	429a      	cmp	r2, r3
    f646:	d802      	bhi.n	f64e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    f648:	2300      	movs	r3, #0
    f64a:	737b      	strb	r3, [r7, #13]
    f64c:	e002      	b.n	f654 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    f64e:	68bb      	ldr	r3, [r7, #8]
    f650:	781b      	ldrb	r3, [r3, #0]
    f652:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    f654:	89fa      	ldrh	r2, [r7, #14]
    f656:	7b7b      	ldrb	r3, [r7, #13]
    f658:	79f8      	ldrb	r0, [r7, #7]
    f65a:	68b9      	ldr	r1, [r7, #8]
    f65c:	4c07      	ldr	r4, [pc, #28]	; (f67c <usbdc_get_str_desc+0x94>)
    f65e:	47a0      	blx	r4
    f660:	4603      	mov	r3, r0
    f662:	2b00      	cmp	r3, #0
    f664:	d001      	beq.n	f66a <usbdc_get_str_desc+0x82>
		return false;
    f666:	2300      	movs	r3, #0
    f668:	e000      	b.n	f66c <usbdc_get_str_desc+0x84>
	}
	return true;
    f66a:	2301      	movs	r3, #1
}
    f66c:	4618      	mov	r0, r3
    f66e:	3714      	adds	r7, #20
    f670:	46bd      	mov	sp, r7
    f672:	bd90      	pop	{r4, r7, pc}
    f674:	20002818 	.word	0x20002818
    f678:	0001036d 	.word	0x0001036d
    f67c:	0000ffa5 	.word	0x0000ffa5

0000f680 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    f680:	b580      	push	{r7, lr}
    f682:	b084      	sub	sp, #16
    f684:	af00      	add	r7, sp, #0
    f686:	4603      	mov	r3, r0
    f688:	6039      	str	r1, [r7, #0]
    f68a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    f68c:	683b      	ldr	r3, [r7, #0]
    f68e:	885b      	ldrh	r3, [r3, #2]
    f690:	b29b      	uxth	r3, r3
    f692:	0a1b      	lsrs	r3, r3, #8
    f694:	b29b      	uxth	r3, r3
    f696:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    f698:	7bfb      	ldrb	r3, [r7, #15]
    f69a:	2b02      	cmp	r3, #2
    f69c:	d00d      	beq.n	f6ba <usbdc_get_desc_req+0x3a>
    f69e:	2b03      	cmp	r3, #3
    f6a0:	d012      	beq.n	f6c8 <usbdc_get_desc_req+0x48>
    f6a2:	2b01      	cmp	r3, #1
    f6a4:	d002      	beq.n	f6ac <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    f6a6:	bf00      	nop
	}
	return false;
    f6a8:	2300      	movs	r3, #0
    f6aa:	e013      	b.n	f6d4 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    f6ac:	79fb      	ldrb	r3, [r7, #7]
    f6ae:	6839      	ldr	r1, [r7, #0]
    f6b0:	4618      	mov	r0, r3
    f6b2:	4b0a      	ldr	r3, [pc, #40]	; (f6dc <usbdc_get_desc_req+0x5c>)
    f6b4:	4798      	blx	r3
    f6b6:	4603      	mov	r3, r0
    f6b8:	e00c      	b.n	f6d4 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    f6ba:	79fb      	ldrb	r3, [r7, #7]
    f6bc:	6839      	ldr	r1, [r7, #0]
    f6be:	4618      	mov	r0, r3
    f6c0:	4b07      	ldr	r3, [pc, #28]	; (f6e0 <usbdc_get_desc_req+0x60>)
    f6c2:	4798      	blx	r3
    f6c4:	4603      	mov	r3, r0
    f6c6:	e005      	b.n	f6d4 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    f6c8:	79fb      	ldrb	r3, [r7, #7]
    f6ca:	6839      	ldr	r1, [r7, #0]
    f6cc:	4618      	mov	r0, r3
    f6ce:	4b05      	ldr	r3, [pc, #20]	; (f6e4 <usbdc_get_desc_req+0x64>)
    f6d0:	4798      	blx	r3
    f6d2:	4603      	mov	r3, r0
}
    f6d4:	4618      	mov	r0, r3
    f6d6:	3710      	adds	r7, #16
    f6d8:	46bd      	mov	sp, r7
    f6da:	bd80      	pop	{r7, pc}
    f6dc:	0000f4c1 	.word	0x0000f4c1
    f6e0:	0000f539 	.word	0x0000f539
    f6e4:	0000f5e9 	.word	0x0000f5e9

0000f6e8 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    f6e8:	b590      	push	{r4, r7, lr}
    f6ea:	b085      	sub	sp, #20
    f6ec:	af00      	add	r7, sp, #0
    f6ee:	4603      	mov	r3, r0
    f6f0:	6039      	str	r1, [r7, #0]
    f6f2:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    f6f4:	683b      	ldr	r3, [r7, #0]
    f6f6:	781b      	ldrb	r3, [r3, #0]
    f6f8:	f003 031f 	and.w	r3, r3, #31
    f6fc:	2b00      	cmp	r3, #0
    f6fe:	db1b      	blt.n	f738 <usbdc_get_status_req+0x50>
    f700:	2b01      	cmp	r3, #1
    f702:	dd02      	ble.n	f70a <usbdc_get_status_req+0x22>
    f704:	2b02      	cmp	r3, #2
    f706:	d003      	beq.n	f710 <usbdc_get_status_req+0x28>
    f708:	e016      	b.n	f738 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    f70a:	2300      	movs	r3, #0
    f70c:	60fb      	str	r3, [r7, #12]
		break;
    f70e:	e015      	b.n	f73c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    f710:	683b      	ldr	r3, [r7, #0]
    f712:	889b      	ldrh	r3, [r3, #4]
    f714:	b29b      	uxth	r3, r3
    f716:	b2db      	uxtb	r3, r3
    f718:	2102      	movs	r1, #2
    f71a:	4618      	mov	r0, r3
    f71c:	4b0f      	ldr	r3, [pc, #60]	; (f75c <usbdc_get_status_req+0x74>)
    f71e:	4798      	blx	r3
    f720:	4603      	mov	r3, r0
    f722:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    f724:	68fb      	ldr	r3, [r7, #12]
    f726:	2b00      	cmp	r3, #0
    f728:	da01      	bge.n	f72e <usbdc_get_status_req+0x46>
			return false;
    f72a:	2300      	movs	r3, #0
    f72c:	e012      	b.n	f754 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    f72e:	68fb      	ldr	r3, [r7, #12]
    f730:	f003 0301 	and.w	r3, r3, #1
    f734:	60fb      	str	r3, [r7, #12]
		break;
    f736:	e001      	b.n	f73c <usbdc_get_status_req+0x54>
	default:
		return false;
    f738:	2300      	movs	r3, #0
    f73a:	e00b      	b.n	f754 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    f73c:	4b08      	ldr	r3, [pc, #32]	; (f760 <usbdc_get_status_req+0x78>)
    f73e:	695b      	ldr	r3, [r3, #20]
    f740:	89ba      	ldrh	r2, [r7, #12]
    f742:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    f744:	4b06      	ldr	r3, [pc, #24]	; (f760 <usbdc_get_status_req+0x78>)
    f746:	6959      	ldr	r1, [r3, #20]
    f748:	79f8      	ldrb	r0, [r7, #7]
    f74a:	2300      	movs	r3, #0
    f74c:	2202      	movs	r2, #2
    f74e:	4c05      	ldr	r4, [pc, #20]	; (f764 <usbdc_get_status_req+0x7c>)
    f750:	47a0      	blx	r4
	return true;
    f752:	2301      	movs	r3, #1
}
    f754:	4618      	mov	r0, r3
    f756:	3714      	adds	r7, #20
    f758:	46bd      	mov	sp, r7
    f75a:	bd90      	pop	{r4, r7, pc}
    f75c:	00006171 	.word	0x00006171
    f760:	20002818 	.word	0x20002818
    f764:	0000ffa5 	.word	0x0000ffa5

0000f768 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    f768:	b590      	push	{r4, r7, lr}
    f76a:	b085      	sub	sp, #20
    f76c:	af00      	add	r7, sp, #0
    f76e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    f770:	4b1f      	ldr	r3, [pc, #124]	; (f7f0 <usbdc_get_interface+0x88>)
    f772:	691b      	ldr	r3, [r3, #16]
    f774:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    f776:	4b1e      	ldr	r3, [pc, #120]	; (f7f0 <usbdc_get_interface+0x88>)
    f778:	7f5b      	ldrb	r3, [r3, #29]
    f77a:	461a      	mov	r2, r3
    f77c:	687b      	ldr	r3, [r7, #4]
    f77e:	889b      	ldrh	r3, [r3, #4]
    f780:	b29b      	uxth	r3, r3
    f782:	fa42 f303 	asr.w	r3, r2, r3
    f786:	f003 0301 	and.w	r3, r3, #1
    f78a:	2b00      	cmp	r3, #0
    f78c:	d128      	bne.n	f7e0 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    f78e:	4b18      	ldr	r3, [pc, #96]	; (f7f0 <usbdc_get_interface+0x88>)
    f790:	695b      	ldr	r3, [r3, #20]
    f792:	2200      	movs	r2, #0
    f794:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    f796:	4b16      	ldr	r3, [pc, #88]	; (f7f0 <usbdc_get_interface+0x88>)
    f798:	6959      	ldr	r1, [r3, #20]
    f79a:	2300      	movs	r3, #0
    f79c:	2201      	movs	r2, #1
    f79e:	2000      	movs	r0, #0
    f7a0:	4c14      	ldr	r4, [pc, #80]	; (f7f4 <usbdc_get_interface+0x8c>)
    f7a2:	47a0      	blx	r4
		return true;
    f7a4:	2301      	movs	r3, #1
    f7a6:	e01f      	b.n	f7e8 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    f7a8:	68fb      	ldr	r3, [r7, #12]
    f7aa:	685b      	ldr	r3, [r3, #4]
    f7ac:	687a      	ldr	r2, [r7, #4]
    f7ae:	2102      	movs	r1, #2
    f7b0:	68f8      	ldr	r0, [r7, #12]
    f7b2:	4798      	blx	r3
    f7b4:	60b8      	str	r0, [r7, #8]
    f7b6:	68bb      	ldr	r3, [r7, #8]
    f7b8:	2b00      	cmp	r3, #0
    f7ba:	da03      	bge.n	f7c4 <usbdc_get_interface+0x5c>
			func = func->next;
    f7bc:	68fb      	ldr	r3, [r7, #12]
    f7be:	681b      	ldr	r3, [r3, #0]
    f7c0:	60fb      	str	r3, [r7, #12]
    f7c2:	e00d      	b.n	f7e0 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    f7c4:	4b0a      	ldr	r3, [pc, #40]	; (f7f0 <usbdc_get_interface+0x88>)
    f7c6:	695b      	ldr	r3, [r3, #20]
    f7c8:	68ba      	ldr	r2, [r7, #8]
    f7ca:	b2d2      	uxtb	r2, r2
    f7cc:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    f7ce:	4b08      	ldr	r3, [pc, #32]	; (f7f0 <usbdc_get_interface+0x88>)
    f7d0:	6959      	ldr	r1, [r3, #20]
    f7d2:	2300      	movs	r3, #0
    f7d4:	2201      	movs	r2, #1
    f7d6:	2000      	movs	r0, #0
    f7d8:	4c06      	ldr	r4, [pc, #24]	; (f7f4 <usbdc_get_interface+0x8c>)
    f7da:	47a0      	blx	r4
			return true;
    f7dc:	2301      	movs	r3, #1
    f7de:	e003      	b.n	f7e8 <usbdc_get_interface+0x80>
	while (NULL != func) {
    f7e0:	68fb      	ldr	r3, [r7, #12]
    f7e2:	2b00      	cmp	r3, #0
    f7e4:	d1e0      	bne.n	f7a8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    f7e6:	2300      	movs	r3, #0
}
    f7e8:	4618      	mov	r0, r3
    f7ea:	3714      	adds	r7, #20
    f7ec:	46bd      	mov	sp, r7
    f7ee:	bd90      	pop	{r4, r7, pc}
    f7f0:	20002818 	.word	0x20002818
    f7f4:	0000ffa5 	.word	0x0000ffa5

0000f7f8 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    f7f8:	b590      	push	{r4, r7, lr}
    f7fa:	b083      	sub	sp, #12
    f7fc:	af00      	add	r7, sp, #0
    f7fe:	4603      	mov	r3, r0
    f800:	6039      	str	r1, [r7, #0]
    f802:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    f804:	683b      	ldr	r3, [r7, #0]
    f806:	785b      	ldrb	r3, [r3, #1]
    f808:	2b0a      	cmp	r3, #10
    f80a:	d83a      	bhi.n	f882 <usbdc_get_req+0x8a>
    f80c:	a201      	add	r2, pc, #4	; (adr r2, f814 <usbdc_get_req+0x1c>)
    f80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f812:	bf00      	nop
    f814:	0000f86b 	.word	0x0000f86b
    f818:	0000f883 	.word	0x0000f883
    f81c:	0000f883 	.word	0x0000f883
    f820:	0000f883 	.word	0x0000f883
    f824:	0000f883 	.word	0x0000f883
    f828:	0000f883 	.word	0x0000f883
    f82c:	0000f841 	.word	0x0000f841
    f830:	0000f883 	.word	0x0000f883
    f834:	0000f84f 	.word	0x0000f84f
    f838:	0000f883 	.word	0x0000f883
    f83c:	0000f879 	.word	0x0000f879
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    f840:	79fb      	ldrb	r3, [r7, #7]
    f842:	6839      	ldr	r1, [r7, #0]
    f844:	4618      	mov	r0, r3
    f846:	4b11      	ldr	r3, [pc, #68]	; (f88c <usbdc_get_req+0x94>)
    f848:	4798      	blx	r3
    f84a:	4603      	mov	r3, r0
    f84c:	e01a      	b.n	f884 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    f84e:	4b10      	ldr	r3, [pc, #64]	; (f890 <usbdc_get_req+0x98>)
    f850:	695b      	ldr	r3, [r3, #20]
    f852:	4a0f      	ldr	r2, [pc, #60]	; (f890 <usbdc_get_req+0x98>)
    f854:	7ed2      	ldrb	r2, [r2, #27]
    f856:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    f858:	4b0d      	ldr	r3, [pc, #52]	; (f890 <usbdc_get_req+0x98>)
    f85a:	6959      	ldr	r1, [r3, #20]
    f85c:	79f8      	ldrb	r0, [r7, #7]
    f85e:	2300      	movs	r3, #0
    f860:	2201      	movs	r2, #1
    f862:	4c0c      	ldr	r4, [pc, #48]	; (f894 <usbdc_get_req+0x9c>)
    f864:	47a0      	blx	r4
		return true;
    f866:	2301      	movs	r3, #1
    f868:	e00c      	b.n	f884 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    f86a:	79fb      	ldrb	r3, [r7, #7]
    f86c:	6839      	ldr	r1, [r7, #0]
    f86e:	4618      	mov	r0, r3
    f870:	4b09      	ldr	r3, [pc, #36]	; (f898 <usbdc_get_req+0xa0>)
    f872:	4798      	blx	r3
    f874:	4603      	mov	r3, r0
    f876:	e005      	b.n	f884 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    f878:	6838      	ldr	r0, [r7, #0]
    f87a:	4b08      	ldr	r3, [pc, #32]	; (f89c <usbdc_get_req+0xa4>)
    f87c:	4798      	blx	r3
    f87e:	4603      	mov	r3, r0
    f880:	e000      	b.n	f884 <usbdc_get_req+0x8c>
	default:
		return false;
    f882:	2300      	movs	r3, #0
	}
}
    f884:	4618      	mov	r0, r3
    f886:	370c      	adds	r7, #12
    f888:	46bd      	mov	sp, r7
    f88a:	bd90      	pop	{r4, r7, pc}
    f88c:	0000f681 	.word	0x0000f681
    f890:	20002818 	.word	0x20002818
    f894:	0000ffa5 	.word	0x0000ffa5
    f898:	0000f6e9 	.word	0x0000f6e9
    f89c:	0000f769 	.word	0x0000f769

0000f8a0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    f8a0:	b590      	push	{r4, r7, lr}
    f8a2:	b083      	sub	sp, #12
    f8a4:	af00      	add	r7, sp, #0
    f8a6:	4603      	mov	r3, r0
    f8a8:	6039      	str	r1, [r7, #0]
    f8aa:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    f8ac:	683b      	ldr	r3, [r7, #0]
    f8ae:	781b      	ldrb	r3, [r3, #0]
    f8b0:	f003 031f 	and.w	r3, r3, #31
    f8b4:	2b02      	cmp	r3, #2
    f8b6:	d116      	bne.n	f8e6 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    f8b8:	683b      	ldr	r3, [r7, #0]
    f8ba:	88db      	ldrh	r3, [r3, #6]
    f8bc:	b29b      	uxth	r3, r3
    f8be:	2b00      	cmp	r3, #0
    f8c0:	d001      	beq.n	f8c6 <usbdc_clear_ftr_req+0x26>
			return false;
    f8c2:	2300      	movs	r3, #0
    f8c4:	e010      	b.n	f8e8 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    f8c6:	683b      	ldr	r3, [r7, #0]
    f8c8:	889b      	ldrh	r3, [r3, #4]
    f8ca:	b29b      	uxth	r3, r3
    f8cc:	b2db      	uxtb	r3, r3
    f8ce:	2100      	movs	r1, #0
    f8d0:	4618      	mov	r0, r3
    f8d2:	4b07      	ldr	r3, [pc, #28]	; (f8f0 <usbdc_clear_ftr_req+0x50>)
    f8d4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    f8d6:	79f8      	ldrb	r0, [r7, #7]
    f8d8:	2301      	movs	r3, #1
    f8da:	2200      	movs	r2, #0
    f8dc:	2100      	movs	r1, #0
    f8de:	4c05      	ldr	r4, [pc, #20]	; (f8f4 <usbdc_clear_ftr_req+0x54>)
    f8e0:	47a0      	blx	r4
		return true;
    f8e2:	2301      	movs	r3, #1
    f8e4:	e000      	b.n	f8e8 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    f8e6:	2300      	movs	r3, #0
	}
}
    f8e8:	4618      	mov	r0, r3
    f8ea:	370c      	adds	r7, #12
    f8ec:	46bd      	mov	sp, r7
    f8ee:	bd90      	pop	{r4, r7, pc}
    f8f0:	00006171 	.word	0x00006171
    f8f4:	0000ffa5 	.word	0x0000ffa5

0000f8f8 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    f8f8:	b590      	push	{r4, r7, lr}
    f8fa:	b083      	sub	sp, #12
    f8fc:	af00      	add	r7, sp, #0
    f8fe:	4603      	mov	r3, r0
    f900:	6039      	str	r1, [r7, #0]
    f902:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    f904:	683b      	ldr	r3, [r7, #0]
    f906:	781b      	ldrb	r3, [r3, #0]
    f908:	f003 031f 	and.w	r3, r3, #31
    f90c:	2b02      	cmp	r3, #2
    f90e:	d116      	bne.n	f93e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    f910:	683b      	ldr	r3, [r7, #0]
    f912:	88db      	ldrh	r3, [r3, #6]
    f914:	b29b      	uxth	r3, r3
    f916:	2b00      	cmp	r3, #0
    f918:	d001      	beq.n	f91e <usbdc_set_ftr_req+0x26>
			return false;
    f91a:	2300      	movs	r3, #0
    f91c:	e010      	b.n	f940 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    f91e:	683b      	ldr	r3, [r7, #0]
    f920:	889b      	ldrh	r3, [r3, #4]
    f922:	b29b      	uxth	r3, r3
    f924:	b2db      	uxtb	r3, r3
    f926:	2101      	movs	r1, #1
    f928:	4618      	mov	r0, r3
    f92a:	4b07      	ldr	r3, [pc, #28]	; (f948 <usbdc_set_ftr_req+0x50>)
    f92c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    f92e:	79f8      	ldrb	r0, [r7, #7]
    f930:	2301      	movs	r3, #1
    f932:	2200      	movs	r2, #0
    f934:	2100      	movs	r1, #0
    f936:	4c05      	ldr	r4, [pc, #20]	; (f94c <usbdc_set_ftr_req+0x54>)
    f938:	47a0      	blx	r4
		return true;
    f93a:	2301      	movs	r3, #1
    f93c:	e000      	b.n	f940 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    f93e:	2300      	movs	r3, #0
	}
}
    f940:	4618      	mov	r0, r3
    f942:	370c      	adds	r7, #12
    f944:	46bd      	mov	sp, r7
    f946:	bd90      	pop	{r4, r7, pc}
    f948:	00006171 	.word	0x00006171
    f94c:	0000ffa5 	.word	0x0000ffa5

0000f950 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    f950:	b580      	push	{r7, lr}
    f952:	b082      	sub	sp, #8
    f954:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    f956:	4b0a      	ldr	r3, [pc, #40]	; (f980 <usbdc_unconfig+0x30>)
    f958:	691b      	ldr	r3, [r3, #16]
    f95a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    f95c:	e008      	b.n	f970 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    f95e:	687b      	ldr	r3, [r7, #4]
    f960:	685b      	ldr	r3, [r3, #4]
    f962:	2200      	movs	r2, #0
    f964:	2101      	movs	r1, #1
    f966:	6878      	ldr	r0, [r7, #4]
    f968:	4798      	blx	r3
		func = func->next;
    f96a:	687b      	ldr	r3, [r7, #4]
    f96c:	681b      	ldr	r3, [r3, #0]
    f96e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    f970:	687b      	ldr	r3, [r7, #4]
    f972:	2b00      	cmp	r3, #0
    f974:	d1f3      	bne.n	f95e <usbdc_unconfig+0xe>
	}
}
    f976:	bf00      	nop
    f978:	3708      	adds	r7, #8
    f97a:	46bd      	mov	sp, r7
    f97c:	bd80      	pop	{r7, pc}
    f97e:	bf00      	nop
    f980:	20002818 	.word	0x20002818

0000f984 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    f984:	b580      	push	{r7, lr}
    f986:	b088      	sub	sp, #32
    f988:	af00      	add	r7, sp, #0
    f98a:	4603      	mov	r3, r0
    f98c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    f98e:	2300      	movs	r3, #0
    f990:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    f992:	23ff      	movs	r3, #255	; 0xff
    f994:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    f996:	79fb      	ldrb	r3, [r7, #7]
    f998:	2b00      	cmp	r3, #0
    f99a:	d103      	bne.n	f9a4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    f99c:	4b2e      	ldr	r3, [pc, #184]	; (fa58 <usbdc_set_config+0xd4>)
    f99e:	4798      	blx	r3
		return true;
    f9a0:	2301      	movs	r3, #1
    f9a2:	e055      	b.n	fa50 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    f9a4:	69bb      	ldr	r3, [r7, #24]
    f9a6:	2b00      	cmp	r3, #0
    f9a8:	d10a      	bne.n	f9c0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    f9aa:	4b2c      	ldr	r3, [pc, #176]	; (fa5c <usbdc_set_config+0xd8>)
    f9ac:	681b      	ldr	r3, [r3, #0]
    f9ae:	6818      	ldr	r0, [r3, #0]
    f9b0:	4b2a      	ldr	r3, [pc, #168]	; (fa5c <usbdc_set_config+0xd8>)
    f9b2:	681b      	ldr	r3, [r3, #0]
    f9b4:	685b      	ldr	r3, [r3, #4]
    f9b6:	79fa      	ldrb	r2, [r7, #7]
    f9b8:	4619      	mov	r1, r3
    f9ba:	4b29      	ldr	r3, [pc, #164]	; (fa60 <usbdc_set_config+0xdc>)
    f9bc:	4798      	blx	r3
    f9be:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    f9c0:	69bb      	ldr	r3, [r7, #24]
    f9c2:	2b00      	cmp	r3, #0
    f9c4:	d101      	bne.n	f9ca <usbdc_set_config+0x46>
		return false;
    f9c6:	2300      	movs	r3, #0
    f9c8:	e042      	b.n	fa50 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    f9ca:	69b8      	ldr	r0, [r7, #24]
    f9cc:	4b25      	ldr	r3, [pc, #148]	; (fa64 <usbdc_set_config+0xe0>)
    f9ce:	4798      	blx	r3
    f9d0:	4603      	mov	r3, r0
    f9d2:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    f9d4:	8abb      	ldrh	r3, [r7, #20]
    f9d6:	69ba      	ldr	r2, [r7, #24]
    f9d8:	4413      	add	r3, r2
    f9da:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    f9dc:	693b      	ldr	r3, [r7, #16]
    f9de:	2204      	movs	r2, #4
    f9e0:	4619      	mov	r1, r3
    f9e2:	69b8      	ldr	r0, [r7, #24]
    f9e4:	4b20      	ldr	r3, [pc, #128]	; (fa68 <usbdc_set_config+0xe4>)
    f9e6:	4798      	blx	r3
    f9e8:	4603      	mov	r3, r0
    f9ea:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    f9ec:	e02c      	b.n	fa48 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    f9ee:	68fb      	ldr	r3, [r7, #12]
    f9f0:	3302      	adds	r3, #2
    f9f2:	781b      	ldrb	r3, [r3, #0]
    f9f4:	7dfa      	ldrb	r2, [r7, #23]
    f9f6:	429a      	cmp	r2, r3
    f9f8:	d018      	beq.n	fa2c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    f9fa:	68fb      	ldr	r3, [r7, #12]
    f9fc:	789b      	ldrb	r3, [r3, #2]
    f9fe:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    fa00:	4b16      	ldr	r3, [pc, #88]	; (fa5c <usbdc_set_config+0xd8>)
    fa02:	691b      	ldr	r3, [r3, #16]
    fa04:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    fa06:	e00c      	b.n	fa22 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    fa08:	69fb      	ldr	r3, [r7, #28]
    fa0a:	685b      	ldr	r3, [r3, #4]
    fa0c:	f107 020c 	add.w	r2, r7, #12
    fa10:	2100      	movs	r1, #0
    fa12:	69f8      	ldr	r0, [r7, #28]
    fa14:	4798      	blx	r3
    fa16:	4603      	mov	r3, r0
    fa18:	2b00      	cmp	r3, #0
    fa1a:	d006      	beq.n	fa2a <usbdc_set_config+0xa6>
					func = func->next;
    fa1c:	69fb      	ldr	r3, [r7, #28]
    fa1e:	681b      	ldr	r3, [r3, #0]
    fa20:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    fa22:	69fb      	ldr	r3, [r7, #28]
    fa24:	2b00      	cmp	r3, #0
    fa26:	d1ef      	bne.n	fa08 <usbdc_set_config+0x84>
    fa28:	e000      	b.n	fa2c <usbdc_set_config+0xa8>
				} else {
					break;
    fa2a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    fa2c:	68fb      	ldr	r3, [r7, #12]
    fa2e:	4618      	mov	r0, r3
    fa30:	4b0e      	ldr	r3, [pc, #56]	; (fa6c <usbdc_set_config+0xe8>)
    fa32:	4798      	blx	r3
    fa34:	4603      	mov	r3, r0
    fa36:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    fa38:	68fb      	ldr	r3, [r7, #12]
    fa3a:	6939      	ldr	r1, [r7, #16]
    fa3c:	2204      	movs	r2, #4
    fa3e:	4618      	mov	r0, r3
    fa40:	4b09      	ldr	r3, [pc, #36]	; (fa68 <usbdc_set_config+0xe4>)
    fa42:	4798      	blx	r3
    fa44:	4603      	mov	r3, r0
    fa46:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    fa48:	68fb      	ldr	r3, [r7, #12]
    fa4a:	2b00      	cmp	r3, #0
    fa4c:	d1cf      	bne.n	f9ee <usbdc_set_config+0x6a>
	}
	return true;
    fa4e:	2301      	movs	r3, #1
}
    fa50:	4618      	mov	r0, r3
    fa52:	3720      	adds	r7, #32
    fa54:	46bd      	mov	sp, r7
    fa56:	bd80      	pop	{r7, pc}
    fa58:	0000f951 	.word	0x0000f951
    fa5c:	20002818 	.word	0x20002818
    fa60:	000102f5 	.word	0x000102f5
    fa64:	0000f4a1 	.word	0x0000f4a1
    fa68:	00010235 	.word	0x00010235
    fa6c:	0000f47d 	.word	0x0000f47d

0000fa70 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    fa70:	b580      	push	{r7, lr}
    fa72:	b082      	sub	sp, #8
    fa74:	af00      	add	r7, sp, #0
    fa76:	4603      	mov	r3, r0
    fa78:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    fa7a:	79fb      	ldrb	r3, [r7, #7]
    fa7c:	4618      	mov	r0, r3
    fa7e:	4b03      	ldr	r3, [pc, #12]	; (fa8c <usbdc_set_address+0x1c>)
    fa80:	4798      	blx	r3
}
    fa82:	bf00      	nop
    fa84:	3708      	adds	r7, #8
    fa86:	46bd      	mov	sp, r7
    fa88:	bd80      	pop	{r7, pc}
    fa8a:	bf00      	nop
    fa8c:	00005d8d 	.word	0x00005d8d

0000fa90 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    fa90:	b590      	push	{r4, r7, lr}
    fa92:	b087      	sub	sp, #28
    fa94:	af00      	add	r7, sp, #0
    fa96:	4603      	mov	r3, r0
    fa98:	460a      	mov	r2, r1
    fa9a:	80fb      	strh	r3, [r7, #6]
    fa9c:	4613      	mov	r3, r2
    fa9e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    faa0:	2300      	movs	r3, #0
    faa2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    faa4:	693b      	ldr	r3, [r7, #16]
    faa6:	2b00      	cmp	r3, #0
    faa8:	d10b      	bne.n	fac2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    faaa:	4b43      	ldr	r3, [pc, #268]	; (fbb8 <usbdc_set_interface+0x128>)
    faac:	681b      	ldr	r3, [r3, #0]
    faae:	6818      	ldr	r0, [r3, #0]
    fab0:	4b41      	ldr	r3, [pc, #260]	; (fbb8 <usbdc_set_interface+0x128>)
    fab2:	681b      	ldr	r3, [r3, #0]
    fab4:	6859      	ldr	r1, [r3, #4]
    fab6:	4b40      	ldr	r3, [pc, #256]	; (fbb8 <usbdc_set_interface+0x128>)
    fab8:	7edb      	ldrb	r3, [r3, #27]
    faba:	461a      	mov	r2, r3
    fabc:	4b3f      	ldr	r3, [pc, #252]	; (fbbc <usbdc_set_interface+0x12c>)
    fabe:	4798      	blx	r3
    fac0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    fac2:	693b      	ldr	r3, [r7, #16]
    fac4:	2b00      	cmp	r3, #0
    fac6:	d101      	bne.n	facc <usbdc_set_interface+0x3c>
		return false;
    fac8:	2300      	movs	r3, #0
    faca:	e071      	b.n	fbb0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    facc:	693b      	ldr	r3, [r7, #16]
    face:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    fad0:	6938      	ldr	r0, [r7, #16]
    fad2:	4b3b      	ldr	r3, [pc, #236]	; (fbc0 <usbdc_set_interface+0x130>)
    fad4:	4798      	blx	r3
    fad6:	4603      	mov	r3, r0
    fad8:	461a      	mov	r2, r3
    fada:	693b      	ldr	r3, [r7, #16]
    fadc:	4413      	add	r3, r2
    fade:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    fae0:	68bb      	ldr	r3, [r7, #8]
    fae2:	68f9      	ldr	r1, [r7, #12]
    fae4:	2204      	movs	r2, #4
    fae6:	4618      	mov	r0, r3
    fae8:	4b36      	ldr	r3, [pc, #216]	; (fbc4 <usbdc_set_interface+0x134>)
    faea:	4798      	blx	r3
    faec:	6138      	str	r0, [r7, #16]
    faee:	693b      	ldr	r3, [r7, #16]
    faf0:	2b00      	cmp	r3, #0
    faf2:	d113      	bne.n	fb1c <usbdc_set_interface+0x8c>
		return false;
    faf4:	2300      	movs	r3, #0
    faf6:	e05b      	b.n	fbb0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    faf8:	68bb      	ldr	r3, [r7, #8]
    fafa:	4618      	mov	r0, r3
    fafc:	4b32      	ldr	r3, [pc, #200]	; (fbc8 <usbdc_set_interface+0x138>)
    fafe:	4798      	blx	r3
    fb00:	4603      	mov	r3, r0
    fb02:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    fb04:	68bb      	ldr	r3, [r7, #8]
    fb06:	68f9      	ldr	r1, [r7, #12]
    fb08:	2204      	movs	r2, #4
    fb0a:	4618      	mov	r0, r3
    fb0c:	4b2d      	ldr	r3, [pc, #180]	; (fbc4 <usbdc_set_interface+0x134>)
    fb0e:	4798      	blx	r3
    fb10:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    fb12:	693b      	ldr	r3, [r7, #16]
    fb14:	2b00      	cmp	r3, #0
    fb16:	d101      	bne.n	fb1c <usbdc_set_interface+0x8c>
			return false;
    fb18:	2300      	movs	r3, #0
    fb1a:	e049      	b.n	fbb0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    fb1c:	693b      	ldr	r3, [r7, #16]
    fb1e:	3302      	adds	r3, #2
    fb20:	781b      	ldrb	r3, [r3, #0]
    fb22:	b29b      	uxth	r3, r3
    fb24:	88ba      	ldrh	r2, [r7, #4]
    fb26:	429a      	cmp	r2, r3
    fb28:	d1e6      	bne.n	faf8 <usbdc_set_interface+0x68>
    fb2a:	693b      	ldr	r3, [r7, #16]
    fb2c:	3303      	adds	r3, #3
    fb2e:	781b      	ldrb	r3, [r3, #0]
    fb30:	b29b      	uxth	r3, r3
    fb32:	88fa      	ldrh	r2, [r7, #6]
    fb34:	429a      	cmp	r2, r3
    fb36:	d1df      	bne.n	faf8 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    fb38:	693b      	ldr	r3, [r7, #16]
    fb3a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    fb3c:	4b1e      	ldr	r3, [pc, #120]	; (fbb8 <usbdc_set_interface+0x128>)
    fb3e:	691b      	ldr	r3, [r3, #16]
    fb40:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    fb42:	e031      	b.n	fba8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    fb44:	697b      	ldr	r3, [r7, #20]
    fb46:	685b      	ldr	r3, [r3, #4]
    fb48:	f107 0208 	add.w	r2, r7, #8
    fb4c:	2101      	movs	r1, #1
    fb4e:	6978      	ldr	r0, [r7, #20]
    fb50:	4798      	blx	r3
    fb52:	4603      	mov	r3, r0
    fb54:	2b00      	cmp	r3, #0
    fb56:	d003      	beq.n	fb60 <usbdc_set_interface+0xd0>
			func = func->next;
    fb58:	697b      	ldr	r3, [r7, #20]
    fb5a:	681b      	ldr	r3, [r3, #0]
    fb5c:	617b      	str	r3, [r7, #20]
    fb5e:	e023      	b.n	fba8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    fb60:	697b      	ldr	r3, [r7, #20]
    fb62:	685b      	ldr	r3, [r3, #4]
    fb64:	f107 0208 	add.w	r2, r7, #8
    fb68:	2100      	movs	r1, #0
    fb6a:	6978      	ldr	r0, [r7, #20]
    fb6c:	4798      	blx	r3
    fb6e:	4603      	mov	r3, r0
    fb70:	2b00      	cmp	r3, #0
    fb72:	d117      	bne.n	fba4 <usbdc_set_interface+0x114>
			if (alt_set) {
    fb74:	88fb      	ldrh	r3, [r7, #6]
    fb76:	2b00      	cmp	r3, #0
    fb78:	d00c      	beq.n	fb94 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    fb7a:	4b0f      	ldr	r3, [pc, #60]	; (fbb8 <usbdc_set_interface+0x128>)
    fb7c:	7f5b      	ldrb	r3, [r3, #29]
    fb7e:	b25a      	sxtb	r2, r3
    fb80:	88bb      	ldrh	r3, [r7, #4]
    fb82:	2101      	movs	r1, #1
    fb84:	fa01 f303 	lsl.w	r3, r1, r3
    fb88:	b25b      	sxtb	r3, r3
    fb8a:	4313      	orrs	r3, r2
    fb8c:	b25b      	sxtb	r3, r3
    fb8e:	b2da      	uxtb	r2, r3
    fb90:	4b09      	ldr	r3, [pc, #36]	; (fbb8 <usbdc_set_interface+0x128>)
    fb92:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    fb94:	2300      	movs	r3, #0
    fb96:	2200      	movs	r2, #0
    fb98:	2100      	movs	r1, #0
    fb9a:	2000      	movs	r0, #0
    fb9c:	4c0b      	ldr	r4, [pc, #44]	; (fbcc <usbdc_set_interface+0x13c>)
    fb9e:	47a0      	blx	r4
			return true;
    fba0:	2301      	movs	r3, #1
    fba2:	e005      	b.n	fbb0 <usbdc_set_interface+0x120>
		} else {
			return false;
    fba4:	2300      	movs	r3, #0
    fba6:	e003      	b.n	fbb0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    fba8:	697b      	ldr	r3, [r7, #20]
    fbaa:	2b00      	cmp	r3, #0
    fbac:	d1ca      	bne.n	fb44 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    fbae:	2300      	movs	r3, #0
}
    fbb0:	4618      	mov	r0, r3
    fbb2:	371c      	adds	r7, #28
    fbb4:	46bd      	mov	sp, r7
    fbb6:	bd90      	pop	{r4, r7, pc}
    fbb8:	20002818 	.word	0x20002818
    fbbc:	000102f5 	.word	0x000102f5
    fbc0:	0000f4a1 	.word	0x0000f4a1
    fbc4:	00010235 	.word	0x00010235
    fbc8:	0000f47d 	.word	0x0000f47d
    fbcc:	0000ffa5 	.word	0x0000ffa5

0000fbd0 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    fbd0:	b590      	push	{r4, r7, lr}
    fbd2:	b083      	sub	sp, #12
    fbd4:	af00      	add	r7, sp, #0
    fbd6:	4603      	mov	r3, r0
    fbd8:	6039      	str	r1, [r7, #0]
    fbda:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    fbdc:	683b      	ldr	r3, [r7, #0]
    fbde:	785b      	ldrb	r3, [r3, #1]
    fbe0:	3b01      	subs	r3, #1
    fbe2:	2b0a      	cmp	r3, #10
    fbe4:	d85b      	bhi.n	fc9e <usbdc_set_req+0xce>
    fbe6:	a201      	add	r2, pc, #4	; (adr r2, fbec <usbdc_set_req+0x1c>)
    fbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fbec:	0000fc6b 	.word	0x0000fc6b
    fbf0:	0000fc9f 	.word	0x0000fc9f
    fbf4:	0000fc79 	.word	0x0000fc79
    fbf8:	0000fc9f 	.word	0x0000fc9f
    fbfc:	0000fc19 	.word	0x0000fc19
    fc00:	0000fc9f 	.word	0x0000fc9f
    fc04:	0000fc9f 	.word	0x0000fc9f
    fc08:	0000fc9f 	.word	0x0000fc9f
    fc0c:	0000fc33 	.word	0x0000fc33
    fc10:	0000fc9f 	.word	0x0000fc9f
    fc14:	0000fc87 	.word	0x0000fc87
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    fc18:	79f8      	ldrb	r0, [r7, #7]
    fc1a:	2301      	movs	r3, #1
    fc1c:	2200      	movs	r2, #0
    fc1e:	2100      	movs	r1, #0
    fc20:	4c21      	ldr	r4, [pc, #132]	; (fca8 <usbdc_set_req+0xd8>)
    fc22:	47a0      	blx	r4
    fc24:	4603      	mov	r3, r0
    fc26:	2b00      	cmp	r3, #0
    fc28:	bf0c      	ite	eq
    fc2a:	2301      	moveq	r3, #1
    fc2c:	2300      	movne	r3, #0
    fc2e:	b2db      	uxtb	r3, r3
    fc30:	e036      	b.n	fca0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    fc32:	683b      	ldr	r3, [r7, #0]
    fc34:	885b      	ldrh	r3, [r3, #2]
    fc36:	b29b      	uxth	r3, r3
    fc38:	b2db      	uxtb	r3, r3
    fc3a:	4618      	mov	r0, r3
    fc3c:	4b1b      	ldr	r3, [pc, #108]	; (fcac <usbdc_set_req+0xdc>)
    fc3e:	4798      	blx	r3
    fc40:	4603      	mov	r3, r0
    fc42:	f083 0301 	eor.w	r3, r3, #1
    fc46:	b2db      	uxtb	r3, r3
    fc48:	2b00      	cmp	r3, #0
    fc4a:	d001      	beq.n	fc50 <usbdc_set_req+0x80>
			return false;
    fc4c:	2300      	movs	r3, #0
    fc4e:	e027      	b.n	fca0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    fc50:	79f8      	ldrb	r0, [r7, #7]
    fc52:	2301      	movs	r3, #1
    fc54:	2200      	movs	r2, #0
    fc56:	2100      	movs	r1, #0
    fc58:	4c13      	ldr	r4, [pc, #76]	; (fca8 <usbdc_set_req+0xd8>)
    fc5a:	47a0      	blx	r4
    fc5c:	4603      	mov	r3, r0
    fc5e:	2b00      	cmp	r3, #0
    fc60:	bf0c      	ite	eq
    fc62:	2301      	moveq	r3, #1
    fc64:	2300      	movne	r3, #0
    fc66:	b2db      	uxtb	r3, r3
    fc68:	e01a      	b.n	fca0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    fc6a:	79fb      	ldrb	r3, [r7, #7]
    fc6c:	6839      	ldr	r1, [r7, #0]
    fc6e:	4618      	mov	r0, r3
    fc70:	4b0f      	ldr	r3, [pc, #60]	; (fcb0 <usbdc_set_req+0xe0>)
    fc72:	4798      	blx	r3
    fc74:	4603      	mov	r3, r0
    fc76:	e013      	b.n	fca0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    fc78:	79fb      	ldrb	r3, [r7, #7]
    fc7a:	6839      	ldr	r1, [r7, #0]
    fc7c:	4618      	mov	r0, r3
    fc7e:	4b0d      	ldr	r3, [pc, #52]	; (fcb4 <usbdc_set_req+0xe4>)
    fc80:	4798      	blx	r3
    fc82:	4603      	mov	r3, r0
    fc84:	e00c      	b.n	fca0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    fc86:	683b      	ldr	r3, [r7, #0]
    fc88:	885b      	ldrh	r3, [r3, #2]
    fc8a:	b29a      	uxth	r2, r3
    fc8c:	683b      	ldr	r3, [r7, #0]
    fc8e:	889b      	ldrh	r3, [r3, #4]
    fc90:	b29b      	uxth	r3, r3
    fc92:	4619      	mov	r1, r3
    fc94:	4610      	mov	r0, r2
    fc96:	4b08      	ldr	r3, [pc, #32]	; (fcb8 <usbdc_set_req+0xe8>)
    fc98:	4798      	blx	r3
    fc9a:	4603      	mov	r3, r0
    fc9c:	e000      	b.n	fca0 <usbdc_set_req+0xd0>
	default:
		return false;
    fc9e:	2300      	movs	r3, #0
	}
}
    fca0:	4618      	mov	r0, r3
    fca2:	370c      	adds	r7, #12
    fca4:	46bd      	mov	sp, r7
    fca6:	bd90      	pop	{r4, r7, pc}
    fca8:	0000ffa5 	.word	0x0000ffa5
    fcac:	0000f985 	.word	0x0000f985
    fcb0:	0000f8a1 	.word	0x0000f8a1
    fcb4:	0000f8f9 	.word	0x0000f8f9
    fcb8:	0000fa91 	.word	0x0000fa91

0000fcbc <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    fcbc:	b580      	push	{r7, lr}
    fcbe:	b082      	sub	sp, #8
    fcc0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    fcc2:	4b0a      	ldr	r3, [pc, #40]	; (fcec <usbdc_sof_notify+0x30>)
    fcc4:	685b      	ldr	r3, [r3, #4]
    fcc6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    fcc8:	e009      	b.n	fcde <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    fcca:	687b      	ldr	r3, [r7, #4]
    fccc:	685b      	ldr	r3, [r3, #4]
    fcce:	2b00      	cmp	r3, #0
    fcd0:	d002      	beq.n	fcd8 <usbdc_sof_notify+0x1c>
			sof->cb();
    fcd2:	687b      	ldr	r3, [r7, #4]
    fcd4:	685b      	ldr	r3, [r3, #4]
    fcd6:	4798      	blx	r3
		}
		sof = sof->next;
    fcd8:	687b      	ldr	r3, [r7, #4]
    fcda:	681b      	ldr	r3, [r3, #0]
    fcdc:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    fcde:	687b      	ldr	r3, [r7, #4]
    fce0:	2b00      	cmp	r3, #0
    fce2:	d1f2      	bne.n	fcca <usbdc_sof_notify+0xe>
	}
}
    fce4:	bf00      	nop
    fce6:	3708      	adds	r7, #8
    fce8:	46bd      	mov	sp, r7
    fcea:	bd80      	pop	{r7, pc}
    fcec:	20002818 	.word	0x20002818

0000fcf0 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    fcf0:	b580      	push	{r7, lr}
    fcf2:	b084      	sub	sp, #16
    fcf4:	af00      	add	r7, sp, #0
    fcf6:	4603      	mov	r3, r0
    fcf8:	6039      	str	r1, [r7, #0]
    fcfa:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    fcfc:	4b0b      	ldr	r3, [pc, #44]	; (fd2c <usbdc_change_notify+0x3c>)
    fcfe:	68db      	ldr	r3, [r3, #12]
    fd00:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    fd02:	e00c      	b.n	fd1e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    fd04:	68fb      	ldr	r3, [r7, #12]
    fd06:	685b      	ldr	r3, [r3, #4]
    fd08:	2b00      	cmp	r3, #0
    fd0a:	d005      	beq.n	fd18 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    fd0c:	68fb      	ldr	r3, [r7, #12]
    fd0e:	685b      	ldr	r3, [r3, #4]
    fd10:	79fa      	ldrb	r2, [r7, #7]
    fd12:	6839      	ldr	r1, [r7, #0]
    fd14:	4610      	mov	r0, r2
    fd16:	4798      	blx	r3
		}
		cg = cg->next;
    fd18:	68fb      	ldr	r3, [r7, #12]
    fd1a:	681b      	ldr	r3, [r3, #0]
    fd1c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    fd1e:	68fb      	ldr	r3, [r7, #12]
    fd20:	2b00      	cmp	r3, #0
    fd22:	d1ef      	bne.n	fd04 <usbdc_change_notify+0x14>
	}
}
    fd24:	bf00      	nop
    fd26:	3710      	adds	r7, #16
    fd28:	46bd      	mov	sp, r7
    fd2a:	bd80      	pop	{r7, pc}
    fd2c:	20002818 	.word	0x20002818

0000fd30 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    fd30:	b580      	push	{r7, lr}
    fd32:	b084      	sub	sp, #16
    fd34:	af00      	add	r7, sp, #0
    fd36:	4603      	mov	r3, r0
    fd38:	6039      	str	r1, [r7, #0]
    fd3a:	71fb      	strb	r3, [r7, #7]
    fd3c:	4613      	mov	r3, r2
    fd3e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    fd40:	4b12      	ldr	r3, [pc, #72]	; (fd8c <usbdc_request_handler+0x5c>)
    fd42:	689b      	ldr	r3, [r3, #8]
    fd44:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    fd46:	e019      	b.n	fd7c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    fd48:	68fb      	ldr	r3, [r7, #12]
    fd4a:	685b      	ldr	r3, [r3, #4]
    fd4c:	2b00      	cmp	r3, #0
    fd4e:	d012      	beq.n	fd76 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    fd50:	68fb      	ldr	r3, [r7, #12]
    fd52:	685b      	ldr	r3, [r3, #4]
    fd54:	79ba      	ldrb	r2, [r7, #6]
    fd56:	79f8      	ldrb	r0, [r7, #7]
    fd58:	6839      	ldr	r1, [r7, #0]
    fd5a:	4798      	blx	r3
    fd5c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    fd5e:	68bb      	ldr	r3, [r7, #8]
    fd60:	2b00      	cmp	r3, #0
    fd62:	d101      	bne.n	fd68 <usbdc_request_handler+0x38>
				return true;
    fd64:	2301      	movs	r3, #1
    fd66:	e00d      	b.n	fd84 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    fd68:	68bb      	ldr	r3, [r7, #8]
    fd6a:	f113 0f0a 	cmn.w	r3, #10
    fd6e:	d002      	beq.n	fd76 <usbdc_request_handler+0x46>
				return -1;
    fd70:	f04f 33ff 	mov.w	r3, #4294967295
    fd74:	e006      	b.n	fd84 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    fd76:	68fb      	ldr	r3, [r7, #12]
    fd78:	681b      	ldr	r3, [r3, #0]
    fd7a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    fd7c:	68fb      	ldr	r3, [r7, #12]
    fd7e:	2b00      	cmp	r3, #0
    fd80:	d1e2      	bne.n	fd48 <usbdc_request_handler+0x18>
	}
	return false;
    fd82:	2300      	movs	r3, #0
}
    fd84:	4618      	mov	r0, r3
    fd86:	3710      	adds	r7, #16
    fd88:	46bd      	mov	sp, r7
    fd8a:	bd80      	pop	{r7, pc}
    fd8c:	20002818 	.word	0x20002818

0000fd90 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    fd90:	b580      	push	{r7, lr}
    fd92:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    fd94:	4b01      	ldr	r3, [pc, #4]	; (fd9c <usbd_sof_cb+0xc>)
    fd96:	4798      	blx	r3
}
    fd98:	bf00      	nop
    fd9a:	bd80      	pop	{r7, pc}
    fd9c:	0000fcbd 	.word	0x0000fcbd

0000fda0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    fda0:	b580      	push	{r7, lr}
    fda2:	b082      	sub	sp, #8
    fda4:	af00      	add	r7, sp, #0
    fda6:	4603      	mov	r3, r0
    fda8:	6039      	str	r1, [r7, #0]
    fdaa:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    fdac:	79fb      	ldrb	r3, [r7, #7]
    fdae:	2200      	movs	r2, #0
    fdb0:	6839      	ldr	r1, [r7, #0]
    fdb2:	4618      	mov	r0, r3
    fdb4:	4b14      	ldr	r3, [pc, #80]	; (fe08 <usbdc_cb_ctl_req+0x68>)
    fdb6:	4798      	blx	r3
    fdb8:	4603      	mov	r3, r0
    fdba:	f1b3 3fff 	cmp.w	r3, #4294967295
    fdbe:	d00b      	beq.n	fdd8 <usbdc_cb_ctl_req+0x38>
    fdc0:	2b01      	cmp	r3, #1
    fdc2:	d007      	beq.n	fdd4 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    fdc4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    fdc6:	683b      	ldr	r3, [r7, #0]
    fdc8:	781b      	ldrb	r3, [r3, #0]
    fdca:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    fdce:	2b00      	cmp	r3, #0
    fdd0:	d007      	beq.n	fde2 <usbdc_cb_ctl_req+0x42>
    fdd2:	e003      	b.n	fddc <usbdc_cb_ctl_req+0x3c>
		return true;
    fdd4:	2301      	movs	r3, #1
    fdd6:	e013      	b.n	fe00 <usbdc_cb_ctl_req+0x60>
		return false;
    fdd8:	2300      	movs	r3, #0
    fdda:	e011      	b.n	fe00 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    fddc:	2b80      	cmp	r3, #128	; 0x80
    fdde:	d007      	beq.n	fdf0 <usbdc_cb_ctl_req+0x50>
    fde0:	e00d      	b.n	fdfe <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    fde2:	79fb      	ldrb	r3, [r7, #7]
    fde4:	6839      	ldr	r1, [r7, #0]
    fde6:	4618      	mov	r0, r3
    fde8:	4b08      	ldr	r3, [pc, #32]	; (fe0c <usbdc_cb_ctl_req+0x6c>)
    fdea:	4798      	blx	r3
    fdec:	4603      	mov	r3, r0
    fdee:	e007      	b.n	fe00 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    fdf0:	79fb      	ldrb	r3, [r7, #7]
    fdf2:	6839      	ldr	r1, [r7, #0]
    fdf4:	4618      	mov	r0, r3
    fdf6:	4b06      	ldr	r3, [pc, #24]	; (fe10 <usbdc_cb_ctl_req+0x70>)
    fdf8:	4798      	blx	r3
    fdfa:	4603      	mov	r3, r0
    fdfc:	e000      	b.n	fe00 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    fdfe:	2300      	movs	r3, #0
	}
}
    fe00:	4618      	mov	r0, r3
    fe02:	3708      	adds	r7, #8
    fe04:	46bd      	mov	sp, r7
    fe06:	bd80      	pop	{r7, pc}
    fe08:	0000fd31 	.word	0x0000fd31
    fe0c:	0000fbd1 	.word	0x0000fbd1
    fe10:	0000f7f9 	.word	0x0000f7f9

0000fe14 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    fe14:	b580      	push	{r7, lr}
    fe16:	b082      	sub	sp, #8
    fe18:	af00      	add	r7, sp, #0
    fe1a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    fe1c:	687b      	ldr	r3, [r7, #4]
    fe1e:	781b      	ldrb	r3, [r3, #0]
    fe20:	2b00      	cmp	r3, #0
    fe22:	d135      	bne.n	fe90 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    fe24:	687b      	ldr	r3, [r7, #4]
    fe26:	785b      	ldrb	r3, [r3, #1]
    fe28:	2b05      	cmp	r3, #5
    fe2a:	d019      	beq.n	fe60 <usbdc_ctrl_status_end+0x4c>
    fe2c:	2b09      	cmp	r3, #9
    fe2e:	d000      	beq.n	fe32 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    fe30:	e02f      	b.n	fe92 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    fe32:	687b      	ldr	r3, [r7, #4]
    fe34:	885b      	ldrh	r3, [r3, #2]
    fe36:	b29b      	uxth	r3, r3
    fe38:	b2da      	uxtb	r2, r3
    fe3a:	4b17      	ldr	r3, [pc, #92]	; (fe98 <usbdc_ctrl_status_end+0x84>)
    fe3c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    fe3e:	687b      	ldr	r3, [r7, #4]
    fe40:	885b      	ldrh	r3, [r3, #2]
    fe42:	b29b      	uxth	r3, r3
    fe44:	2b00      	cmp	r3, #0
    fe46:	d001      	beq.n	fe4c <usbdc_ctrl_status_end+0x38>
    fe48:	2204      	movs	r2, #4
    fe4a:	e000      	b.n	fe4e <usbdc_ctrl_status_end+0x3a>
    fe4c:	2203      	movs	r2, #3
    fe4e:	4b12      	ldr	r3, [pc, #72]	; (fe98 <usbdc_ctrl_status_end+0x84>)
    fe50:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    fe52:	4b11      	ldr	r3, [pc, #68]	; (fe98 <usbdc_ctrl_status_end+0x84>)
    fe54:	7e9b      	ldrb	r3, [r3, #26]
    fe56:	4619      	mov	r1, r3
    fe58:	2001      	movs	r0, #1
    fe5a:	4b10      	ldr	r3, [pc, #64]	; (fe9c <usbdc_ctrl_status_end+0x88>)
    fe5c:	4798      	blx	r3
		break;
    fe5e:	e018      	b.n	fe92 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    fe60:	687b      	ldr	r3, [r7, #4]
    fe62:	885b      	ldrh	r3, [r3, #2]
    fe64:	b29b      	uxth	r3, r3
    fe66:	b2db      	uxtb	r3, r3
    fe68:	4618      	mov	r0, r3
    fe6a:	4b0d      	ldr	r3, [pc, #52]	; (fea0 <usbdc_ctrl_status_end+0x8c>)
    fe6c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    fe6e:	687b      	ldr	r3, [r7, #4]
    fe70:	885b      	ldrh	r3, [r3, #2]
    fe72:	b29b      	uxth	r3, r3
    fe74:	2b00      	cmp	r3, #0
    fe76:	d001      	beq.n	fe7c <usbdc_ctrl_status_end+0x68>
    fe78:	2203      	movs	r2, #3
    fe7a:	e000      	b.n	fe7e <usbdc_ctrl_status_end+0x6a>
    fe7c:	2202      	movs	r2, #2
    fe7e:	4b06      	ldr	r3, [pc, #24]	; (fe98 <usbdc_ctrl_status_end+0x84>)
    fe80:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    fe82:	4b05      	ldr	r3, [pc, #20]	; (fe98 <usbdc_ctrl_status_end+0x84>)
    fe84:	7e9b      	ldrb	r3, [r3, #26]
    fe86:	4619      	mov	r1, r3
    fe88:	2001      	movs	r0, #1
    fe8a:	4b04      	ldr	r3, [pc, #16]	; (fe9c <usbdc_ctrl_status_end+0x88>)
    fe8c:	4798      	blx	r3
		break;
    fe8e:	e000      	b.n	fe92 <usbdc_ctrl_status_end+0x7e>
		return;
    fe90:	bf00      	nop
	}
}
    fe92:	3708      	adds	r7, #8
    fe94:	46bd      	mov	sp, r7
    fe96:	bd80      	pop	{r7, pc}
    fe98:	20002818 	.word	0x20002818
    fe9c:	0000fcf1 	.word	0x0000fcf1
    fea0:	0000fa71 	.word	0x0000fa71

0000fea4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    fea4:	b580      	push	{r7, lr}
    fea6:	b082      	sub	sp, #8
    fea8:	af00      	add	r7, sp, #0
    feaa:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    feac:	2201      	movs	r2, #1
    feae:	6879      	ldr	r1, [r7, #4]
    feb0:	2000      	movs	r0, #0
    feb2:	4b03      	ldr	r3, [pc, #12]	; (fec0 <usbdc_ctrl_data_end+0x1c>)
    feb4:	4798      	blx	r3
	return false;
    feb6:	2300      	movs	r3, #0
}
    feb8:	4618      	mov	r0, r3
    feba:	3708      	adds	r7, #8
    febc:	46bd      	mov	sp, r7
    febe:	bd80      	pop	{r7, pc}
    fec0:	0000fd31 	.word	0x0000fd31

0000fec4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    fec4:	b580      	push	{r7, lr}
    fec6:	b082      	sub	sp, #8
    fec8:	af00      	add	r7, sp, #0
    feca:	4603      	mov	r3, r0
    fecc:	603a      	str	r2, [r7, #0]
    fece:	71fb      	strb	r3, [r7, #7]
    fed0:	460b      	mov	r3, r1
    fed2:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    fed4:	79bb      	ldrb	r3, [r7, #6]
    fed6:	2b00      	cmp	r3, #0
    fed8:	d002      	beq.n	fee0 <usbdc_cb_ctl_done+0x1c>
    feda:	2b01      	cmp	r3, #1
    fedc:	d004      	beq.n	fee8 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    fede:	e008      	b.n	fef2 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    fee0:	6838      	ldr	r0, [r7, #0]
    fee2:	4b06      	ldr	r3, [pc, #24]	; (fefc <usbdc_cb_ctl_done+0x38>)
    fee4:	4798      	blx	r3
		break;
    fee6:	e004      	b.n	fef2 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    fee8:	6838      	ldr	r0, [r7, #0]
    feea:	4b05      	ldr	r3, [pc, #20]	; (ff00 <usbdc_cb_ctl_done+0x3c>)
    feec:	4798      	blx	r3
    feee:	4603      	mov	r3, r0
    fef0:	e000      	b.n	fef4 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    fef2:	2300      	movs	r3, #0
}
    fef4:	4618      	mov	r0, r3
    fef6:	3708      	adds	r7, #8
    fef8:	46bd      	mov	sp, r7
    fefa:	bd80      	pop	{r7, pc}
    fefc:	0000fe15 	.word	0x0000fe15
    ff00:	0000fea5 	.word	0x0000fea5

0000ff04 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    ff04:	b580      	push	{r7, lr}
    ff06:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    ff08:	4b10      	ldr	r3, [pc, #64]	; (ff4c <usbdc_reset+0x48>)
    ff0a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    ff0c:	4b10      	ldr	r3, [pc, #64]	; (ff50 <usbdc_reset+0x4c>)
    ff0e:	2202      	movs	r2, #2
    ff10:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    ff12:	4b0f      	ldr	r3, [pc, #60]	; (ff50 <usbdc_reset+0x4c>)
    ff14:	2200      	movs	r2, #0
    ff16:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    ff18:	4b0d      	ldr	r3, [pc, #52]	; (ff50 <usbdc_reset+0x4c>)
    ff1a:	2200      	movs	r2, #0
    ff1c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    ff1e:	2000      	movs	r0, #0
    ff20:	4b0c      	ldr	r3, [pc, #48]	; (ff54 <usbdc_reset+0x50>)
    ff22:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    ff24:	4b0a      	ldr	r3, [pc, #40]	; (ff50 <usbdc_reset+0x4c>)
    ff26:	7f1b      	ldrb	r3, [r3, #28]
    ff28:	4618      	mov	r0, r3
    ff2a:	4b0b      	ldr	r3, [pc, #44]	; (ff58 <usbdc_reset+0x54>)
    ff2c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    ff2e:	4a0b      	ldr	r2, [pc, #44]	; (ff5c <usbdc_reset+0x58>)
    ff30:	2100      	movs	r1, #0
    ff32:	2000      	movs	r0, #0
    ff34:	4b0a      	ldr	r3, [pc, #40]	; (ff60 <usbdc_reset+0x5c>)
    ff36:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    ff38:	4a0a      	ldr	r2, [pc, #40]	; (ff64 <usbdc_reset+0x60>)
    ff3a:	2102      	movs	r1, #2
    ff3c:	2000      	movs	r0, #0
    ff3e:	4b08      	ldr	r3, [pc, #32]	; (ff60 <usbdc_reset+0x5c>)
    ff40:	4798      	blx	r3
	usb_d_ep_enable(0);
    ff42:	2000      	movs	r0, #0
    ff44:	4b08      	ldr	r3, [pc, #32]	; (ff68 <usbdc_reset+0x64>)
    ff46:	4798      	blx	r3
}
    ff48:	bf00      	nop
    ff4a:	bd80      	pop	{r7, pc}
    ff4c:	0000f951 	.word	0x0000f951
    ff50:	20002818 	.word	0x20002818
    ff54:	00005e71 	.word	0x00005e71
    ff58:	00005dad 	.word	0x00005dad
    ff5c:	0000fda1 	.word	0x0000fda1
    ff60:	000061c5 	.word	0x000061c5
    ff64:	0000fec5 	.word	0x0000fec5
    ff68:	00005ec1 	.word	0x00005ec1

0000ff6c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    ff6c:	b580      	push	{r7, lr}
    ff6e:	b082      	sub	sp, #8
    ff70:	af00      	add	r7, sp, #0
    ff72:	4603      	mov	r3, r0
    ff74:	6039      	str	r1, [r7, #0]
    ff76:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    ff78:	79fb      	ldrb	r3, [r7, #7]
    ff7a:	2b00      	cmp	r3, #0
    ff7c:	d002      	beq.n	ff84 <usbd_event_cb+0x18>
    ff7e:	2b01      	cmp	r3, #1
    ff80:	d005      	beq.n	ff8e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    ff82:	e007      	b.n	ff94 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    ff84:	6839      	ldr	r1, [r7, #0]
    ff86:	2000      	movs	r0, #0
    ff88:	4b04      	ldr	r3, [pc, #16]	; (ff9c <usbd_event_cb+0x30>)
    ff8a:	4798      	blx	r3
		break;
    ff8c:	e002      	b.n	ff94 <usbd_event_cb+0x28>
		usbdc_reset();
    ff8e:	4b04      	ldr	r3, [pc, #16]	; (ffa0 <usbd_event_cb+0x34>)
    ff90:	4798      	blx	r3
		break;
    ff92:	bf00      	nop
	}
}
    ff94:	bf00      	nop
    ff96:	3708      	adds	r7, #8
    ff98:	46bd      	mov	sp, r7
    ff9a:	bd80      	pop	{r7, pc}
    ff9c:	0000fcf1 	.word	0x0000fcf1
    ffa0:	0000ff05 	.word	0x0000ff05

0000ffa4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    ffa4:	b580      	push	{r7, lr}
    ffa6:	b088      	sub	sp, #32
    ffa8:	af00      	add	r7, sp, #0
    ffaa:	60b9      	str	r1, [r7, #8]
    ffac:	607a      	str	r2, [r7, #4]
    ffae:	461a      	mov	r2, r3
    ffb0:	4603      	mov	r3, r0
    ffb2:	73fb      	strb	r3, [r7, #15]
    ffb4:	4613      	mov	r3, r2
    ffb6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ffb8:	68bb      	ldr	r3, [r7, #8]
    ffba:	617b      	str	r3, [r7, #20]
    ffbc:	687b      	ldr	r3, [r7, #4]
    ffbe:	61bb      	str	r3, [r7, #24]
    ffc0:	7bfb      	ldrb	r3, [r7, #15]
    ffc2:	773b      	strb	r3, [r7, #28]
    ffc4:	7bbb      	ldrb	r3, [r7, #14]
    ffc6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    ffc8:	f107 0314 	add.w	r3, r7, #20
    ffcc:	4618      	mov	r0, r3
    ffce:	4b03      	ldr	r3, [pc, #12]	; (ffdc <usbdc_xfer+0x38>)
    ffd0:	4798      	blx	r3
    ffd2:	4603      	mov	r3, r0
}
    ffd4:	4618      	mov	r0, r3
    ffd6:	3720      	adds	r7, #32
    ffd8:	46bd      	mov	sp, r7
    ffda:	bd80      	pop	{r7, pc}
    ffdc:	00005f31 	.word	0x00005f31

0000ffe0 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    ffe0:	b580      	push	{r7, lr}
    ffe2:	b082      	sub	sp, #8
    ffe4:	af00      	add	r7, sp, #0
    ffe6:	4603      	mov	r3, r0
    ffe8:	6039      	str	r1, [r7, #0]
    ffea:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    ffec:	79fb      	ldrb	r3, [r7, #7]
    ffee:	2b01      	cmp	r3, #1
    fff0:	d009      	beq.n	10006 <STACK_SIZE+0x6>
    fff2:	2b02      	cmp	r3, #2
    fff4:	d00c      	beq.n	10010 <STACK_SIZE+0x10>
    fff6:	2b00      	cmp	r3, #0
    fff8:	d000      	beq.n	fffc <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    fffa:	e00e      	b.n	1001a <STACK_SIZE+0x1a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    fffc:	6839      	ldr	r1, [r7, #0]
    fffe:	4809      	ldr	r0, [pc, #36]	; (10024 <STACK_SIZE+0x24>)
   10000:	4b09      	ldr	r3, [pc, #36]	; (10028 <STACK_SIZE+0x28>)
   10002:	4798      	blx	r3
		break;
   10004:	e009      	b.n	1001a <STACK_SIZE+0x1a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   10006:	6839      	ldr	r1, [r7, #0]
   10008:	4808      	ldr	r0, [pc, #32]	; (1002c <STACK_SIZE+0x2c>)
   1000a:	4b07      	ldr	r3, [pc, #28]	; (10028 <STACK_SIZE+0x28>)
   1000c:	4798      	blx	r3
		break;
   1000e:	e004      	b.n	1001a <STACK_SIZE+0x1a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   10010:	6839      	ldr	r1, [r7, #0]
   10012:	4807      	ldr	r0, [pc, #28]	; (10030 <STACK_SIZE+0x30>)
   10014:	4b04      	ldr	r3, [pc, #16]	; (10028 <STACK_SIZE+0x28>)
   10016:	4798      	blx	r3
		break;
   10018:	bf00      	nop
	}
}
   1001a:	bf00      	nop
   1001c:	3708      	adds	r7, #8
   1001e:	46bd      	mov	sp, r7
   10020:	bd80      	pop	{r7, pc}
   10022:	bf00      	nop
   10024:	2000281c 	.word	0x2000281c
   10028:	0000631d 	.word	0x0000631d
   1002c:	20002820 	.word	0x20002820
   10030:	20002824 	.word	0x20002824

00010034 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   10034:	b580      	push	{r7, lr}
   10036:	b084      	sub	sp, #16
   10038:	af00      	add	r7, sp, #0
   1003a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   1003c:	687b      	ldr	r3, [r7, #4]
   1003e:	2b00      	cmp	r3, #0
   10040:	bf14      	ite	ne
   10042:	2301      	movne	r3, #1
   10044:	2300      	moveq	r3, #0
   10046:	b2db      	uxtb	r3, r3
   10048:	f240 3255 	movw	r2, #853	; 0x355
   1004c:	4910      	ldr	r1, [pc, #64]	; (10090 <usbdc_init+0x5c>)
   1004e:	4618      	mov	r0, r3
   10050:	4b10      	ldr	r3, [pc, #64]	; (10094 <usbdc_init+0x60>)
   10052:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   10054:	4b10      	ldr	r3, [pc, #64]	; (10098 <usbdc_init+0x64>)
   10056:	4798      	blx	r3
   10058:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   1005a:	68fb      	ldr	r3, [r7, #12]
   1005c:	2b00      	cmp	r3, #0
   1005e:	da01      	bge.n	10064 <usbdc_init+0x30>
		return rc;
   10060:	68fb      	ldr	r3, [r7, #12]
   10062:	e010      	b.n	10086 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   10064:	2220      	movs	r2, #32
   10066:	2100      	movs	r1, #0
   10068:	480c      	ldr	r0, [pc, #48]	; (1009c <usbdc_init+0x68>)
   1006a:	4b0d      	ldr	r3, [pc, #52]	; (100a0 <usbdc_init+0x6c>)
   1006c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   1006e:	4a0b      	ldr	r2, [pc, #44]	; (1009c <usbdc_init+0x68>)
   10070:	687b      	ldr	r3, [r7, #4]
   10072:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   10074:	490b      	ldr	r1, [pc, #44]	; (100a4 <usbdc_init+0x70>)
   10076:	2000      	movs	r0, #0
   10078:	4b0b      	ldr	r3, [pc, #44]	; (100a8 <usbdc_init+0x74>)
   1007a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   1007c:	490b      	ldr	r1, [pc, #44]	; (100ac <usbdc_init+0x78>)
   1007e:	2001      	movs	r0, #1
   10080:	4b09      	ldr	r3, [pc, #36]	; (100a8 <usbdc_init+0x74>)
   10082:	4798      	blx	r3

	return 0;
   10084:	2300      	movs	r3, #0
}
   10086:	4618      	mov	r0, r3
   10088:	3710      	adds	r7, #16
   1008a:	46bd      	mov	sp, r7
   1008c:	bd80      	pop	{r7, pc}
   1008e:	bf00      	nop
   10090:	0001a970 	.word	0x0001a970
   10094:	00006241 	.word	0x00006241
   10098:	00005c99 	.word	0x00005c99
   1009c:	20002818 	.word	0x20002818
   100a0:	00016451 	.word	0x00016451
   100a4:	0000fd91 	.word	0x0000fd91
   100a8:	00005d45 	.word	0x00005d45
   100ac:	0000ff6d 	.word	0x0000ff6d

000100b0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   100b0:	b580      	push	{r7, lr}
   100b2:	b082      	sub	sp, #8
   100b4:	af00      	add	r7, sp, #0
   100b6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   100b8:	6879      	ldr	r1, [r7, #4]
   100ba:	4803      	ldr	r0, [pc, #12]	; (100c8 <usbdc_register_function+0x18>)
   100bc:	4b03      	ldr	r3, [pc, #12]	; (100cc <usbdc_register_function+0x1c>)
   100be:	4798      	blx	r3
}
   100c0:	bf00      	nop
   100c2:	3708      	adds	r7, #8
   100c4:	46bd      	mov	sp, r7
   100c6:	bd80      	pop	{r7, pc}
   100c8:	20002828 	.word	0x20002828
   100cc:	0000631d 	.word	0x0000631d

000100d0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   100d0:	b580      	push	{r7, lr}
   100d2:	b082      	sub	sp, #8
   100d4:	af00      	add	r7, sp, #0
   100d6:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   100d8:	4b0f      	ldr	r3, [pc, #60]	; (10118 <usbdc_start+0x48>)
   100da:	7e9b      	ldrb	r3, [r3, #26]
   100dc:	2b00      	cmp	r3, #0
   100de:	d002      	beq.n	100e6 <usbdc_start+0x16>
		return ERR_BUSY;
   100e0:	f06f 0303 	mvn.w	r3, #3
   100e4:	e013      	b.n	1010e <usbdc_start+0x3e>
	}

	if (desces) {
   100e6:	687b      	ldr	r3, [r7, #4]
   100e8:	2b00      	cmp	r3, #0
   100ea:	d00e      	beq.n	1010a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   100ec:	4a0a      	ldr	r2, [pc, #40]	; (10118 <usbdc_start+0x48>)
   100ee:	687b      	ldr	r3, [r7, #4]
   100f0:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   100f2:	687b      	ldr	r3, [r7, #4]
   100f4:	681b      	ldr	r3, [r3, #0]
   100f6:	79da      	ldrb	r2, [r3, #7]
   100f8:	4b07      	ldr	r3, [pc, #28]	; (10118 <usbdc_start+0x48>)
   100fa:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   100fc:	4b06      	ldr	r3, [pc, #24]	; (10118 <usbdc_start+0x48>)
   100fe:	2201      	movs	r2, #1
   10100:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   10102:	4b06      	ldr	r3, [pc, #24]	; (1011c <usbdc_start+0x4c>)
   10104:	4798      	blx	r3
	return ERR_NONE;
   10106:	2300      	movs	r3, #0
   10108:	e001      	b.n	1010e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   1010a:	f06f 0308 	mvn.w	r3, #8
}
   1010e:	4618      	mov	r0, r3
   10110:	3708      	adds	r7, #8
   10112:	46bd      	mov	sp, r7
   10114:	bd80      	pop	{r7, pc}
   10116:	bf00      	nop
   10118:	20002818 	.word	0x20002818
   1011c:	00005d69 	.word	0x00005d69

00010120 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   10120:	b580      	push	{r7, lr}
   10122:	af00      	add	r7, sp, #0
	usb_d_attach();
   10124:	4b01      	ldr	r3, [pc, #4]	; (1012c <usbdc_attach+0xc>)
   10126:	4798      	blx	r3
}
   10128:	bf00      	nop
   1012a:	bd80      	pop	{r7, pc}
   1012c:	00005d7d 	.word	0x00005d7d

00010130 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   10130:	b480      	push	{r7}
   10132:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   10134:	4b03      	ldr	r3, [pc, #12]	; (10144 <usbdc_get_ctrl_buffer+0x14>)
   10136:	695b      	ldr	r3, [r3, #20]
}
   10138:	4618      	mov	r0, r3
   1013a:	46bd      	mov	sp, r7
   1013c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10140:	4770      	bx	lr
   10142:	bf00      	nop
   10144:	20002818 	.word	0x20002818

00010148 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   10148:	b480      	push	{r7}
   1014a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   1014c:	4b07      	ldr	r3, [pc, #28]	; (1016c <usbdc_get_state+0x24>)
   1014e:	7e9b      	ldrb	r3, [r3, #26]
   10150:	f003 0310 	and.w	r3, r3, #16
   10154:	2b00      	cmp	r3, #0
   10156:	d001      	beq.n	1015c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   10158:	2310      	movs	r3, #16
   1015a:	e001      	b.n	10160 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   1015c:	4b03      	ldr	r3, [pc, #12]	; (1016c <usbdc_get_state+0x24>)
   1015e:	7e9b      	ldrb	r3, [r3, #26]
}
   10160:	4618      	mov	r0, r3
   10162:	46bd      	mov	sp, r7
   10164:	f85d 7b04 	ldr.w	r7, [sp], #4
   10168:	4770      	bx	lr
   1016a:	bf00      	nop
   1016c:	20002818 	.word	0x20002818

00010170 <usb_get_u16>:
{
   10170:	b480      	push	{r7}
   10172:	b083      	sub	sp, #12
   10174:	af00      	add	r7, sp, #0
   10176:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   10178:	687b      	ldr	r3, [r7, #4]
   1017a:	781b      	ldrb	r3, [r3, #0]
   1017c:	b29a      	uxth	r2, r3
   1017e:	687b      	ldr	r3, [r7, #4]
   10180:	3301      	adds	r3, #1
   10182:	781b      	ldrb	r3, [r3, #0]
   10184:	b29b      	uxth	r3, r3
   10186:	021b      	lsls	r3, r3, #8
   10188:	b29b      	uxth	r3, r3
   1018a:	4413      	add	r3, r2
   1018c:	b29b      	uxth	r3, r3
}
   1018e:	4618      	mov	r0, r3
   10190:	370c      	adds	r7, #12
   10192:	46bd      	mov	sp, r7
   10194:	f85d 7b04 	ldr.w	r7, [sp], #4
   10198:	4770      	bx	lr

0001019a <usb_desc_len>:
{
   1019a:	b480      	push	{r7}
   1019c:	b083      	sub	sp, #12
   1019e:	af00      	add	r7, sp, #0
   101a0:	6078      	str	r0, [r7, #4]
	return desc[0];
   101a2:	687b      	ldr	r3, [r7, #4]
   101a4:	781b      	ldrb	r3, [r3, #0]
}
   101a6:	4618      	mov	r0, r3
   101a8:	370c      	adds	r7, #12
   101aa:	46bd      	mov	sp, r7
   101ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   101b0:	4770      	bx	lr

000101b2 <usb_desc_type>:
{
   101b2:	b480      	push	{r7}
   101b4:	b083      	sub	sp, #12
   101b6:	af00      	add	r7, sp, #0
   101b8:	6078      	str	r0, [r7, #4]
	return desc[1];
   101ba:	687b      	ldr	r3, [r7, #4]
   101bc:	3301      	adds	r3, #1
   101be:	781b      	ldrb	r3, [r3, #0]
}
   101c0:	4618      	mov	r0, r3
   101c2:	370c      	adds	r7, #12
   101c4:	46bd      	mov	sp, r7
   101c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   101ca:	4770      	bx	lr

000101cc <usb_desc_next>:
{
   101cc:	b580      	push	{r7, lr}
   101ce:	b082      	sub	sp, #8
   101d0:	af00      	add	r7, sp, #0
   101d2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   101d4:	6878      	ldr	r0, [r7, #4]
   101d6:	4b05      	ldr	r3, [pc, #20]	; (101ec <usb_desc_next+0x20>)
   101d8:	4798      	blx	r3
   101da:	4603      	mov	r3, r0
   101dc:	461a      	mov	r2, r3
   101de:	687b      	ldr	r3, [r7, #4]
   101e0:	4413      	add	r3, r2
}
   101e2:	4618      	mov	r0, r3
   101e4:	3708      	adds	r7, #8
   101e6:	46bd      	mov	sp, r7
   101e8:	bd80      	pop	{r7, pc}
   101ea:	bf00      	nop
   101ec:	0001019b 	.word	0x0001019b

000101f0 <usb_cfg_desc_total_len>:
{
   101f0:	b580      	push	{r7, lr}
   101f2:	b082      	sub	sp, #8
   101f4:	af00      	add	r7, sp, #0
   101f6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   101f8:	687b      	ldr	r3, [r7, #4]
   101fa:	3302      	adds	r3, #2
   101fc:	4618      	mov	r0, r3
   101fe:	4b03      	ldr	r3, [pc, #12]	; (1020c <usb_cfg_desc_total_len+0x1c>)
   10200:	4798      	blx	r3
   10202:	4603      	mov	r3, r0
}
   10204:	4618      	mov	r0, r3
   10206:	3708      	adds	r7, #8
   10208:	46bd      	mov	sp, r7
   1020a:	bd80      	pop	{r7, pc}
   1020c:	00010171 	.word	0x00010171

00010210 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   10210:	b580      	push	{r7, lr}
   10212:	b082      	sub	sp, #8
   10214:	af00      	add	r7, sp, #0
   10216:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   10218:	6878      	ldr	r0, [r7, #4]
   1021a:	4b05      	ldr	r3, [pc, #20]	; (10230 <usb_cfg_desc_next+0x20>)
   1021c:	4798      	blx	r3
   1021e:	4603      	mov	r3, r0
   10220:	461a      	mov	r2, r3
   10222:	687b      	ldr	r3, [r7, #4]
   10224:	4413      	add	r3, r2
}
   10226:	4618      	mov	r0, r3
   10228:	3708      	adds	r7, #8
   1022a:	46bd      	mov	sp, r7
   1022c:	bd80      	pop	{r7, pc}
   1022e:	bf00      	nop
   10230:	000101f1 	.word	0x000101f1

00010234 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   10234:	b580      	push	{r7, lr}
   10236:	b084      	sub	sp, #16
   10238:	af00      	add	r7, sp, #0
   1023a:	60f8      	str	r0, [r7, #12]
   1023c:	60b9      	str	r1, [r7, #8]
   1023e:	4613      	mov	r3, r2
   10240:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   10242:	e015      	b.n	10270 <usb_find_desc+0x3c>
		_desc_len_check();
   10244:	68f8      	ldr	r0, [r7, #12]
   10246:	4b0f      	ldr	r3, [pc, #60]	; (10284 <usb_find_desc+0x50>)
   10248:	4798      	blx	r3
   1024a:	4603      	mov	r3, r0
   1024c:	2b01      	cmp	r3, #1
   1024e:	d801      	bhi.n	10254 <usb_find_desc+0x20>
   10250:	2300      	movs	r3, #0
   10252:	e012      	b.n	1027a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   10254:	68f8      	ldr	r0, [r7, #12]
   10256:	4b0c      	ldr	r3, [pc, #48]	; (10288 <usb_find_desc+0x54>)
   10258:	4798      	blx	r3
   1025a:	4603      	mov	r3, r0
   1025c:	461a      	mov	r2, r3
   1025e:	79fb      	ldrb	r3, [r7, #7]
   10260:	4293      	cmp	r3, r2
   10262:	d101      	bne.n	10268 <usb_find_desc+0x34>
			return desc;
   10264:	68fb      	ldr	r3, [r7, #12]
   10266:	e008      	b.n	1027a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   10268:	68f8      	ldr	r0, [r7, #12]
   1026a:	4b08      	ldr	r3, [pc, #32]	; (1028c <usb_find_desc+0x58>)
   1026c:	4798      	blx	r3
   1026e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   10270:	68fa      	ldr	r2, [r7, #12]
   10272:	68bb      	ldr	r3, [r7, #8]
   10274:	429a      	cmp	r2, r3
   10276:	d3e5      	bcc.n	10244 <usb_find_desc+0x10>
	}
	return NULL;
   10278:	2300      	movs	r3, #0
}
   1027a:	4618      	mov	r0, r3
   1027c:	3710      	adds	r7, #16
   1027e:	46bd      	mov	sp, r7
   10280:	bd80      	pop	{r7, pc}
   10282:	bf00      	nop
   10284:	0001019b 	.word	0x0001019b
   10288:	000101b3 	.word	0x000101b3
   1028c:	000101cd 	.word	0x000101cd

00010290 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   10290:	b580      	push	{r7, lr}
   10292:	b082      	sub	sp, #8
   10294:	af00      	add	r7, sp, #0
   10296:	6078      	str	r0, [r7, #4]
   10298:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   1029a:	e019      	b.n	102d0 <usb_find_ep_desc+0x40>
		_desc_len_check();
   1029c:	6878      	ldr	r0, [r7, #4]
   1029e:	4b12      	ldr	r3, [pc, #72]	; (102e8 <usb_find_ep_desc+0x58>)
   102a0:	4798      	blx	r3
   102a2:	4603      	mov	r3, r0
   102a4:	2b01      	cmp	r3, #1
   102a6:	d801      	bhi.n	102ac <usb_find_ep_desc+0x1c>
   102a8:	2300      	movs	r3, #0
   102aa:	e018      	b.n	102de <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   102ac:	6878      	ldr	r0, [r7, #4]
   102ae:	4b0f      	ldr	r3, [pc, #60]	; (102ec <usb_find_ep_desc+0x5c>)
   102b0:	4798      	blx	r3
   102b2:	4603      	mov	r3, r0
   102b4:	2b04      	cmp	r3, #4
   102b6:	d010      	beq.n	102da <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   102b8:	6878      	ldr	r0, [r7, #4]
   102ba:	4b0c      	ldr	r3, [pc, #48]	; (102ec <usb_find_ep_desc+0x5c>)
   102bc:	4798      	blx	r3
   102be:	4603      	mov	r3, r0
   102c0:	2b05      	cmp	r3, #5
   102c2:	d101      	bne.n	102c8 <usb_find_ep_desc+0x38>
			return desc;
   102c4:	687b      	ldr	r3, [r7, #4]
   102c6:	e00a      	b.n	102de <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   102c8:	6878      	ldr	r0, [r7, #4]
   102ca:	4b09      	ldr	r3, [pc, #36]	; (102f0 <usb_find_ep_desc+0x60>)
   102cc:	4798      	blx	r3
   102ce:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   102d0:	687a      	ldr	r2, [r7, #4]
   102d2:	683b      	ldr	r3, [r7, #0]
   102d4:	429a      	cmp	r2, r3
   102d6:	d3e1      	bcc.n	1029c <usb_find_ep_desc+0xc>
   102d8:	e000      	b.n	102dc <usb_find_ep_desc+0x4c>
			break;
   102da:	bf00      	nop
	}
	return NULL;
   102dc:	2300      	movs	r3, #0
}
   102de:	4618      	mov	r0, r3
   102e0:	3708      	adds	r7, #8
   102e2:	46bd      	mov	sp, r7
   102e4:	bd80      	pop	{r7, pc}
   102e6:	bf00      	nop
   102e8:	0001019b 	.word	0x0001019b
   102ec:	000101b3 	.word	0x000101b3
   102f0:	000101cd 	.word	0x000101cd

000102f4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   102f4:	b580      	push	{r7, lr}
   102f6:	b084      	sub	sp, #16
   102f8:	af00      	add	r7, sp, #0
   102fa:	60f8      	str	r0, [r7, #12]
   102fc:	60b9      	str	r1, [r7, #8]
   102fe:	4613      	mov	r3, r2
   10300:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   10302:	2202      	movs	r2, #2
   10304:	68b9      	ldr	r1, [r7, #8]
   10306:	68f8      	ldr	r0, [r7, #12]
   10308:	4b15      	ldr	r3, [pc, #84]	; (10360 <usb_find_cfg_desc+0x6c>)
   1030a:	4798      	blx	r3
   1030c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   1030e:	68fb      	ldr	r3, [r7, #12]
   10310:	2b00      	cmp	r3, #0
   10312:	d11a      	bne.n	1034a <usb_find_cfg_desc+0x56>
		return NULL;
   10314:	2300      	movs	r3, #0
   10316:	e01f      	b.n	10358 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   10318:	68f8      	ldr	r0, [r7, #12]
   1031a:	4b12      	ldr	r3, [pc, #72]	; (10364 <usb_find_cfg_desc+0x70>)
   1031c:	4798      	blx	r3
   1031e:	4603      	mov	r3, r0
   10320:	2b01      	cmp	r3, #1
   10322:	d801      	bhi.n	10328 <usb_find_cfg_desc+0x34>
   10324:	2300      	movs	r3, #0
   10326:	e017      	b.n	10358 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   10328:	68fb      	ldr	r3, [r7, #12]
   1032a:	3301      	adds	r3, #1
   1032c:	781b      	ldrb	r3, [r3, #0]
   1032e:	2b02      	cmp	r3, #2
   10330:	d110      	bne.n	10354 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   10332:	68fb      	ldr	r3, [r7, #12]
   10334:	3305      	adds	r3, #5
   10336:	781b      	ldrb	r3, [r3, #0]
   10338:	79fa      	ldrb	r2, [r7, #7]
   1033a:	429a      	cmp	r2, r3
   1033c:	d101      	bne.n	10342 <usb_find_cfg_desc+0x4e>
			return desc;
   1033e:	68fb      	ldr	r3, [r7, #12]
   10340:	e00a      	b.n	10358 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   10342:	68f8      	ldr	r0, [r7, #12]
   10344:	4b08      	ldr	r3, [pc, #32]	; (10368 <usb_find_cfg_desc+0x74>)
   10346:	4798      	blx	r3
   10348:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   1034a:	68fa      	ldr	r2, [r7, #12]
   1034c:	68bb      	ldr	r3, [r7, #8]
   1034e:	429a      	cmp	r2, r3
   10350:	d3e2      	bcc.n	10318 <usb_find_cfg_desc+0x24>
   10352:	e000      	b.n	10356 <usb_find_cfg_desc+0x62>
			break;
   10354:	bf00      	nop
	}
	return NULL;
   10356:	2300      	movs	r3, #0
}
   10358:	4618      	mov	r0, r3
   1035a:	3710      	adds	r7, #16
   1035c:	46bd      	mov	sp, r7
   1035e:	bd80      	pop	{r7, pc}
   10360:	00010235 	.word	0x00010235
   10364:	0001019b 	.word	0x0001019b
   10368:	00010211 	.word	0x00010211

0001036c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   1036c:	b580      	push	{r7, lr}
   1036e:	b086      	sub	sp, #24
   10370:	af00      	add	r7, sp, #0
   10372:	60f8      	str	r0, [r7, #12]
   10374:	60b9      	str	r1, [r7, #8]
   10376:	4613      	mov	r3, r2
   10378:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   1037a:	2300      	movs	r3, #0
   1037c:	75fb      	strb	r3, [r7, #23]
   1037e:	e020      	b.n	103c2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   10380:	2203      	movs	r2, #3
   10382:	68b9      	ldr	r1, [r7, #8]
   10384:	68f8      	ldr	r0, [r7, #12]
   10386:	4b13      	ldr	r3, [pc, #76]	; (103d4 <usb_find_str_desc+0x68>)
   10388:	4798      	blx	r3
   1038a:	60f8      	str	r0, [r7, #12]
		if (desc) {
   1038c:	68fb      	ldr	r3, [r7, #12]
   1038e:	2b00      	cmp	r3, #0
   10390:	d015      	beq.n	103be <usb_find_str_desc+0x52>
			_desc_len_check();
   10392:	68f8      	ldr	r0, [r7, #12]
   10394:	4b10      	ldr	r3, [pc, #64]	; (103d8 <usb_find_str_desc+0x6c>)
   10396:	4798      	blx	r3
   10398:	4603      	mov	r3, r0
   1039a:	2b01      	cmp	r3, #1
   1039c:	d801      	bhi.n	103a2 <usb_find_str_desc+0x36>
   1039e:	2300      	movs	r3, #0
   103a0:	e014      	b.n	103cc <usb_find_str_desc+0x60>
			if (i == str_index) {
   103a2:	7dfa      	ldrb	r2, [r7, #23]
   103a4:	79fb      	ldrb	r3, [r7, #7]
   103a6:	429a      	cmp	r2, r3
   103a8:	d101      	bne.n	103ae <usb_find_str_desc+0x42>
				return desc;
   103aa:	68fb      	ldr	r3, [r7, #12]
   103ac:	e00e      	b.n	103cc <usb_find_str_desc+0x60>
			}
			i++;
   103ae:	7dfb      	ldrb	r3, [r7, #23]
   103b0:	3301      	adds	r3, #1
   103b2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   103b4:	68f8      	ldr	r0, [r7, #12]
   103b6:	4b09      	ldr	r3, [pc, #36]	; (103dc <usb_find_str_desc+0x70>)
   103b8:	4798      	blx	r3
   103ba:	60f8      	str	r0, [r7, #12]
   103bc:	e001      	b.n	103c2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
   103be:	2300      	movs	r3, #0
   103c0:	e004      	b.n	103cc <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   103c2:	68fa      	ldr	r2, [r7, #12]
   103c4:	68bb      	ldr	r3, [r7, #8]
   103c6:	429a      	cmp	r2, r3
   103c8:	d3da      	bcc.n	10380 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   103ca:	2300      	movs	r3, #0
}
   103cc:	4618      	mov	r0, r3
   103ce:	3718      	adds	r7, #24
   103d0:	46bd      	mov	sp, r7
   103d2:	bd80      	pop	{r7, pc}
   103d4:	00010235 	.word	0x00010235
   103d8:	0001019b 	.word	0x0001019b
   103dc:	000101cd 	.word	0x000101cd

000103e0 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
   103e0:	b480      	push	{r7}
   103e2:	b083      	sub	sp, #12
   103e4:	af00      	add	r7, sp, #0
   103e6:	6078      	str	r0, [r7, #4]
   103e8:	4a04      	ldr	r2, [pc, #16]	; (103fc <_ZN17ARINC_ConversionsC1Ev+0x1c>)
   103ea:	687b      	ldr	r3, [r7, #4]
   103ec:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
   103ee:	687b      	ldr	r3, [r7, #4]
   103f0:	4618      	mov	r0, r3
   103f2:	370c      	adds	r7, #12
   103f4:	46bd      	mov	sp, r7
   103f6:	bc80      	pop	{r7}
   103f8:	4770      	bx	lr
   103fa:	bf00      	nop
   103fc:	0001a990 	.word	0x0001a990

00010400 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
   10400:	b480      	push	{r7}
   10402:	b083      	sub	sp, #12
   10404:	af00      	add	r7, sp, #0
   10406:	6078      	str	r0, [r7, #4]
   10408:	4a04      	ldr	r2, [pc, #16]	; (1041c <_ZN17ARINC_ConversionsD1Ev+0x1c>)
   1040a:	687b      	ldr	r3, [r7, #4]
   1040c:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
   1040e:	687b      	ldr	r3, [r7, #4]
   10410:	4618      	mov	r0, r3
   10412:	370c      	adds	r7, #12
   10414:	46bd      	mov	sp, r7
   10416:	bc80      	pop	{r7}
   10418:	4770      	bx	lr
   1041a:	bf00      	nop
   1041c:	0001a990 	.word	0x0001a990

00010420 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   10420:	b5b0      	push	{r4, r5, r7, lr}
   10422:	b082      	sub	sp, #8
   10424:	af00      	add	r7, sp, #0
   10426:	6078      	str	r0, [r7, #4]
   10428:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   1042a:	4b0a      	ldr	r3, [pc, #40]	; (10454 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   1042c:	6878      	ldr	r0, [r7, #4]
   1042e:	4798      	blx	r3
   10430:	4604      	mov	r4, r0
   10432:	460d      	mov	r5, r1
   10434:	4b07      	ldr	r3, [pc, #28]	; (10454 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   10436:	6838      	ldr	r0, [r7, #0]
   10438:	4798      	blx	r3
   1043a:	4602      	mov	r2, r0
   1043c:	460b      	mov	r3, r1
   1043e:	4620      	mov	r0, r4
   10440:	4629      	mov	r1, r5
   10442:	4c05      	ldr	r4, [pc, #20]	; (10458 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
   10444:	47a0      	blx	r4
   10446:	4603      	mov	r3, r0
   10448:	460c      	mov	r4, r1
    }
   1044a:	4618      	mov	r0, r3
   1044c:	4621      	mov	r1, r4
   1044e:	3708      	adds	r7, #8
   10450:	46bd      	mov	sp, r7
   10452:	bdb0      	pop	{r4, r5, r7, pc}
   10454:	00015679 	.word	0x00015679
   10458:	0001428d 	.word	0x0001428d

0001045c <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
   1045c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10460:	b085      	sub	sp, #20
   10462:	af00      	add	r7, sp, #0
   10464:	6078      	str	r0, [r7, #4]
   10466:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
   10468:	2300      	movs	r3, #0
   1046a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   1046c:	2300      	movs	r3, #0
   1046e:	73bb      	strb	r3, [r7, #14]
   10470:	7bbb      	ldrb	r3, [r7, #14]
   10472:	2b02      	cmp	r3, #2
   10474:	d86d      	bhi.n	10552 <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
   10476:	7bbb      	ldrb	r3, [r7, #14]
   10478:	f1c3 0402 	rsb	r4, r3, #2
   1047c:	4b3c      	ldr	r3, [pc, #240]	; (10570 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   1047e:	6838      	ldr	r0, [r7, #0]
   10480:	4798      	blx	r3
   10482:	4680      	mov	r8, r0
   10484:	4689      	mov	r9, r1
   10486:	7bbb      	ldrb	r3, [r7, #14]
   10488:	f1c3 0302 	rsb	r3, r3, #2
   1048c:	4619      	mov	r1, r3
   1048e:	200a      	movs	r0, #10
   10490:	4b38      	ldr	r3, [pc, #224]	; (10574 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   10492:	4798      	blx	r3
   10494:	4602      	mov	r2, r0
   10496:	460b      	mov	r3, r1
   10498:	4d37      	ldr	r5, [pc, #220]	; (10578 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
   1049a:	4640      	mov	r0, r8
   1049c:	4649      	mov	r1, r9
   1049e:	47a8      	blx	r5
   104a0:	4602      	mov	r2, r0
   104a2:	460b      	mov	r3, r1
   104a4:	4611      	mov	r1, r2
   104a6:	461a      	mov	r2, r3
   104a8:	4b34      	ldr	r3, [pc, #208]	; (1057c <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   104aa:	4608      	mov	r0, r1
   104ac:	4611      	mov	r1, r2
   104ae:	4798      	blx	r3
   104b0:	4603      	mov	r3, r0
   104b2:	b2da      	uxtb	r2, r3
   104b4:	f107 0310 	add.w	r3, r7, #16
   104b8:	4423      	add	r3, r4
   104ba:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
   104be:	7bbb      	ldrb	r3, [r7, #14]
   104c0:	f1c3 0302 	rsb	r3, r3, #2
   104c4:	f107 0210 	add.w	r2, r7, #16
   104c8:	4413      	add	r3, r2
   104ca:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   104ce:	461a      	mov	r2, r3
   104d0:	4b2b      	ldr	r3, [pc, #172]	; (10580 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
   104d2:	4610      	mov	r0, r2
   104d4:	4798      	blx	r3
   104d6:	4605      	mov	r5, r0
   104d8:	460e      	mov	r6, r1
   104da:	7bbb      	ldrb	r3, [r7, #14]
   104dc:	f1c3 0302 	rsb	r3, r3, #2
   104e0:	4619      	mov	r1, r3
   104e2:	200a      	movs	r0, #10
   104e4:	4b23      	ldr	r3, [pc, #140]	; (10574 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   104e6:	4798      	blx	r3
   104e8:	4602      	mov	r2, r0
   104ea:	460b      	mov	r3, r1
   104ec:	4c25      	ldr	r4, [pc, #148]	; (10584 <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
   104ee:	4628      	mov	r0, r5
   104f0:	4631      	mov	r1, r6
   104f2:	47a0      	blx	r4
   104f4:	4603      	mov	r3, r0
   104f6:	460c      	mov	r4, r1
   104f8:	461d      	mov	r5, r3
   104fa:	4626      	mov	r6, r4
   104fc:	4b1c      	ldr	r3, [pc, #112]	; (10570 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   104fe:	6838      	ldr	r0, [r7, #0]
   10500:	4798      	blx	r3
   10502:	4c21      	ldr	r4, [pc, #132]	; (10588 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
   10504:	462a      	mov	r2, r5
   10506:	4633      	mov	r3, r6
   10508:	47a0      	blx	r4
   1050a:	4603      	mov	r3, r0
   1050c:	460c      	mov	r4, r1
   1050e:	4619      	mov	r1, r3
   10510:	4622      	mov	r2, r4
   10512:	4b1a      	ldr	r3, [pc, #104]	; (1057c <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   10514:	4608      	mov	r0, r1
   10516:	4611      	mov	r1, r2
   10518:	4798      	blx	r3
   1051a:	4603      	mov	r3, r0
   1051c:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
   1051e:	7bbb      	ldrb	r3, [r7, #14]
   10520:	f1c3 0302 	rsb	r3, r3, #2
   10524:	f107 0210 	add.w	r2, r7, #16
   10528:	4413      	add	r3, r2
   1052a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1052e:	461a      	mov	r2, r3
   10530:	7bbb      	ldrb	r3, [r7, #14]
   10532:	4619      	mov	r1, r3
   10534:	009b      	lsls	r3, r3, #2
   10536:	1acb      	subs	r3, r1, r3
   10538:	3306      	adds	r3, #6
   1053a:	fa02 f303 	lsl.w	r3, r2, r3
   1053e:	b25a      	sxtb	r2, r3
   10540:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10544:	4313      	orrs	r3, r2
   10546:	b25b      	sxtb	r3, r3
   10548:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   1054a:	7bbb      	ldrb	r3, [r7, #14]
   1054c:	3301      	adds	r3, #1
   1054e:	73bb      	strb	r3, [r7, #14]
   10550:	e78e      	b.n	10470 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
   10552:	687b      	ldr	r3, [r7, #4]
   10554:	681b      	ldr	r3, [r3, #0]
   10556:	681b      	ldr	r3, [r3, #0]
   10558:	7bfa      	ldrb	r2, [r7, #15]
   1055a:	4611      	mov	r1, r2
   1055c:	6878      	ldr	r0, [r7, #4]
   1055e:	4798      	blx	r3
   10560:	4603      	mov	r3, r0
   10562:	73fb      	strb	r3, [r7, #15]
	return result;
   10564:	7bfb      	ldrb	r3, [r7, #15]
	
}
   10566:	4618      	mov	r0, r3
   10568:	3714      	adds	r7, #20
   1056a:	46bd      	mov	sp, r7
   1056c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10570:	00015659 	.word	0x00015659
   10574:	00010421 	.word	0x00010421
   10578:	00015999 	.word	0x00015999
   1057c:	00015ca5 	.word	0x00015ca5
   10580:	00015679 	.word	0x00015679
   10584:	00015745 	.word	0x00015745
   10588:	000153dd 	.word	0x000153dd

0001058c <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
   1058c:	b480      	push	{r7}
   1058e:	b085      	sub	sp, #20
   10590:	af00      	add	r7, sp, #0
   10592:	6078      	str	r0, [r7, #4]
   10594:	460b      	mov	r3, r1
   10596:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
   10598:	2300      	movs	r3, #0
   1059a:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   1059c:	2300      	movs	r3, #0
   1059e:	60bb      	str	r3, [r7, #8]
   105a0:	68bb      	ldr	r3, [r7, #8]
   105a2:	2b07      	cmp	r3, #7
   105a4:	dc13      	bgt.n	105ce <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
   105a6:	7bfb      	ldrb	r3, [r7, #15]
   105a8:	005b      	lsls	r3, r3, #1
   105aa:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   105ac:	78fa      	ldrb	r2, [r7, #3]
   105ae:	68bb      	ldr	r3, [r7, #8]
   105b0:	fa42 f303 	asr.w	r3, r2, r3
   105b4:	b25b      	sxtb	r3, r3
   105b6:	f003 0301 	and.w	r3, r3, #1
   105ba:	b25a      	sxtb	r2, r3
   105bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
   105c0:	4313      	orrs	r3, r2
   105c2:	b25b      	sxtb	r3, r3
   105c4:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   105c6:	68bb      	ldr	r3, [r7, #8]
   105c8:	3301      	adds	r3, #1
   105ca:	60bb      	str	r3, [r7, #8]
   105cc:	e7e8      	b.n	105a0 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
   105ce:	7bfb      	ldrb	r3, [r7, #15]
   105d0:	4618      	mov	r0, r3
   105d2:	3714      	adds	r7, #20
   105d4:	46bd      	mov	sp, r7
   105d6:	bc80      	pop	{r7}
   105d8:	4770      	bx	lr

000105da <hri_port_toggle_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   105da:	b480      	push	{r7}
   105dc:	b085      	sub	sp, #20
   105de:	af00      	add	r7, sp, #0
   105e0:	60f8      	str	r0, [r7, #12]
   105e2:	460b      	mov	r3, r1
   105e4:	607a      	str	r2, [r7, #4]
   105e6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
   105e8:	7afb      	ldrb	r3, [r7, #11]
   105ea:	68fa      	ldr	r2, [r7, #12]
   105ec:	01db      	lsls	r3, r3, #7
   105ee:	4413      	add	r3, r2
   105f0:	331c      	adds	r3, #28
   105f2:	687a      	ldr	r2, [r7, #4]
   105f4:	601a      	str	r2, [r3, #0]
}
   105f6:	bf00      	nop
   105f8:	3714      	adds	r7, #20
   105fa:	46bd      	mov	sp, r7
   105fc:	bc80      	pop	{r7}
   105fe:	4770      	bx	lr

00010600 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
   10600:	b580      	push	{r7, lr}
   10602:	b082      	sub	sp, #8
   10604:	af00      	add	r7, sp, #0
   10606:	4603      	mov	r3, r0
   10608:	6039      	str	r1, [r7, #0]
   1060a:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
   1060c:	79fb      	ldrb	r3, [r7, #7]
   1060e:	683a      	ldr	r2, [r7, #0]
   10610:	4619      	mov	r1, r3
   10612:	4803      	ldr	r0, [pc, #12]	; (10620 <_gpio_toggle_level+0x20>)
   10614:	4b03      	ldr	r3, [pc, #12]	; (10624 <_gpio_toggle_level+0x24>)
   10616:	4798      	blx	r3
}
   10618:	bf00      	nop
   1061a:	3708      	adds	r7, #8
   1061c:	46bd      	mov	sp, r7
   1061e:	bd80      	pop	{r7, pc}
   10620:	41008000 	.word	0x41008000
   10624:	000105db 	.word	0x000105db

00010628 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
   10628:	b580      	push	{r7, lr}
   1062a:	b082      	sub	sp, #8
   1062c:	af00      	add	r7, sp, #0
   1062e:	4603      	mov	r3, r0
   10630:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
   10632:	79fb      	ldrb	r3, [r7, #7]
   10634:	115b      	asrs	r3, r3, #5
   10636:	b2d8      	uxtb	r0, r3
   10638:	79fb      	ldrb	r3, [r7, #7]
   1063a:	f003 031f 	and.w	r3, r3, #31
   1063e:	2201      	movs	r2, #1
   10640:	fa02 f303 	lsl.w	r3, r2, r3
   10644:	4619      	mov	r1, r3
   10646:	4b03      	ldr	r3, [pc, #12]	; (10654 <gpio_toggle_pin_level+0x2c>)
   10648:	4798      	blx	r3
}
   1064a:	bf00      	nop
   1064c:	3708      	adds	r7, #8
   1064e:	46bd      	mov	sp, r7
   10650:	bd80      	pop	{r7, pc}
   10652:	bf00      	nop
   10654:	00010601 	.word	0x00010601

00010658 <_ZL10blink_LED0v>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(void){
   10658:	b580      	push	{r7, lr}
   1065a:	af00      	add	r7, sp, #0
	gpio_toggle_pin_level(LED0);
   1065c:	2052      	movs	r0, #82	; 0x52
   1065e:	4b02      	ldr	r3, [pc, #8]	; (10668 <_ZL10blink_LED0v+0x10>)
   10660:	4798      	blx	r3
}
   10662:	bf00      	nop
   10664:	bd80      	pop	{r7, pc}
   10666:	bf00      	nop
   10668:	00010629 	.word	0x00010629

0001066c <_ZL12Receiver1Intv>:

static void Receiver1Int(void){
   1066c:	b480      	push	{r7}
   1066e:	af00      	add	r7, sp, #0
	ptrARINCInterface->newMessageR1=true;
   10670:	4b03      	ldr	r3, [pc, #12]	; (10680 <_ZL12Receiver1Intv+0x14>)
   10672:	681b      	ldr	r3, [r3, #0]
   10674:	2201      	movs	r2, #1
   10676:	741a      	strb	r2, [r3, #16]
}
   10678:	bf00      	nop
   1067a:	46bd      	mov	sp, r7
   1067c:	bc80      	pop	{r7}
   1067e:	4770      	bx	lr
   10680:	20002838 	.word	0x20002838

00010684 <_ZN14Protocol_ClassC2Ev>:
uint32_t	rawWord;
}Datagram;



class Protocol_Class: public virtual ARINC_Conversions
   10684:	b480      	push	{r7}
   10686:	b083      	sub	sp, #12
   10688:	af00      	add	r7, sp, #0
   1068a:	6078      	str	r0, [r7, #4]
   1068c:	6039      	str	r1, [r7, #0]
   1068e:	683b      	ldr	r3, [r7, #0]
   10690:	681a      	ldr	r2, [r3, #0]
   10692:	687b      	ldr	r3, [r7, #4]
   10694:	601a      	str	r2, [r3, #0]
   10696:	687b      	ldr	r3, [r7, #4]
   10698:	681b      	ldr	r3, [r3, #0]
   1069a:	3b14      	subs	r3, #20
   1069c:	681b      	ldr	r3, [r3, #0]
   1069e:	461a      	mov	r2, r3
   106a0:	687b      	ldr	r3, [r7, #4]
   106a2:	4413      	add	r3, r2
   106a4:	683a      	ldr	r2, [r7, #0]
   106a6:	6852      	ldr	r2, [r2, #4]
   106a8:	601a      	str	r2, [r3, #0]
   106aa:	687b      	ldr	r3, [r7, #4]
   106ac:	4618      	mov	r0, r3
   106ae:	370c      	adds	r7, #12
   106b0:	46bd      	mov	sp, r7
   106b2:	bc80      	pop	{r7}
   106b4:	4770      	bx	lr
	...

000106b8 <_ZN15ARINC_InterfaceC2Ev>:

// default constructor
ARINC_Interface::ARINC_Interface()
   106b8:	b580      	push	{r7, lr}
   106ba:	b082      	sub	sp, #8
   106bc:	af00      	add	r7, sp, #0
   106be:	6078      	str	r0, [r7, #4]
   106c0:	6039      	str	r1, [r7, #0]
   106c2:	687a      	ldr	r2, [r7, #4]
   106c4:	683b      	ldr	r3, [r7, #0]
   106c6:	3304      	adds	r3, #4
   106c8:	4619      	mov	r1, r3
   106ca:	4610      	mov	r0, r2
   106cc:	4b11      	ldr	r3, [pc, #68]	; (10714 <_ZN15ARINC_InterfaceC2Ev+0x5c>)
   106ce:	4798      	blx	r3
   106d0:	683b      	ldr	r3, [r7, #0]
   106d2:	681a      	ldr	r2, [r3, #0]
   106d4:	687b      	ldr	r3, [r7, #4]
   106d6:	601a      	str	r2, [r3, #0]
   106d8:	687b      	ldr	r3, [r7, #4]
   106da:	681b      	ldr	r3, [r3, #0]
   106dc:	3b14      	subs	r3, #20
   106de:	681b      	ldr	r3, [r3, #0]
   106e0:	461a      	mov	r2, r3
   106e2:	687b      	ldr	r3, [r7, #4]
   106e4:	4413      	add	r3, r2
   106e6:	683a      	ldr	r2, [r7, #0]
   106e8:	68d2      	ldr	r2, [r2, #12]
   106ea:	601a      	str	r2, [r3, #0]
   106ec:	687b      	ldr	r3, [r7, #4]
   106ee:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
   106f2:	4618      	mov	r0, r3
   106f4:	4b08      	ldr	r3, [pc, #32]	; (10718 <_ZN15ARINC_InterfaceC2Ev+0x60>)
   106f6:	4798      	blx	r3
   106f8:	687b      	ldr	r3, [r7, #4]
   106fa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
   106fe:	4618      	mov	r0, r3
   10700:	4b06      	ldr	r3, [pc, #24]	; (1071c <_ZN15ARINC_InterfaceC2Ev+0x64>)
   10702:	4798      	blx	r3
{
	ptrARINCInterface=this;
   10704:	4a06      	ldr	r2, [pc, #24]	; (10720 <_ZN15ARINC_InterfaceC2Ev+0x68>)
   10706:	687b      	ldr	r3, [r7, #4]
   10708:	6013      	str	r3, [r2, #0]

	//converter=ptrConverter;
} //ARINC_Interface
   1070a:	687b      	ldr	r3, [r7, #4]
   1070c:	4618      	mov	r0, r3
   1070e:	3708      	adds	r7, #8
   10710:	46bd      	mov	sp, r7
   10712:	bd80      	pop	{r7, pc}
   10714:	00010685 	.word	0x00010685
   10718:	00013039 	.word	0x00013039
   1071c:	00010bc5 	.word	0x00010bc5
   10720:	20002838 	.word	0x20002838

00010724 <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
   10724:	b580      	push	{r7, lr}
   10726:	b082      	sub	sp, #8
   10728:	af00      	add	r7, sp, #0
   1072a:	6078      	str	r0, [r7, #4]
   1072c:	687b      	ldr	r3, [r7, #4]
   1072e:	4618      	mov	r0, r3
   10730:	4b10      	ldr	r3, [pc, #64]	; (10774 <_ZN15ARINC_InterfaceC1Ev+0x50>)
   10732:	4798      	blx	r3
   10734:	687b      	ldr	r3, [r7, #4]
   10736:	4a10      	ldr	r2, [pc, #64]	; (10778 <_ZN15ARINC_InterfaceC1Ev+0x54>)
   10738:	4611      	mov	r1, r2
   1073a:	4618      	mov	r0, r3
   1073c:	4b0f      	ldr	r3, [pc, #60]	; (1077c <_ZN15ARINC_InterfaceC1Ev+0x58>)
   1073e:	4798      	blx	r3
   10740:	4a0f      	ldr	r2, [pc, #60]	; (10780 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
   10742:	687b      	ldr	r3, [r7, #4]
   10744:	601a      	str	r2, [r3, #0]
   10746:	4a0e      	ldr	r2, [pc, #56]	; (10780 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
   10748:	687b      	ldr	r3, [r7, #4]
   1074a:	601a      	str	r2, [r3, #0]
   1074c:	687b      	ldr	r3, [r7, #4]
   1074e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
   10752:	4618      	mov	r0, r3
   10754:	4b0b      	ldr	r3, [pc, #44]	; (10784 <_ZN15ARINC_InterfaceC1Ev+0x60>)
   10756:	4798      	blx	r3
   10758:	687b      	ldr	r3, [r7, #4]
   1075a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
   1075e:	4618      	mov	r0, r3
   10760:	4b09      	ldr	r3, [pc, #36]	; (10788 <_ZN15ARINC_InterfaceC1Ev+0x64>)
   10762:	4798      	blx	r3
	ptrARINCInterface=this;
   10764:	4a09      	ldr	r2, [pc, #36]	; (1078c <_ZN15ARINC_InterfaceC1Ev+0x68>)
   10766:	687b      	ldr	r3, [r7, #4]
   10768:	6013      	str	r3, [r2, #0]
} //ARINC_Interface
   1076a:	687b      	ldr	r3, [r7, #4]
   1076c:	4618      	mov	r0, r3
   1076e:	3708      	adds	r7, #8
   10770:	46bd      	mov	sp, r7
   10772:	bd80      	pop	{r7, pc}
   10774:	000103e1 	.word	0x000103e1
   10778:	0001b3c4 	.word	0x0001b3c4
   1077c:	00010685 	.word	0x00010685
   10780:	0001b3ac 	.word	0x0001b3ac
   10784:	00013039 	.word	0x00013039
   10788:	00010bc5 	.word	0x00010bc5
   1078c:	20002838 	.word	0x20002838

00010790 <_ZN15ARINC_InterfaceD2Ev>:


// default destructor
ARINC_Interface::~ARINC_Interface()
   10790:	b580      	push	{r7, lr}
   10792:	b082      	sub	sp, #8
   10794:	af00      	add	r7, sp, #0
   10796:	6078      	str	r0, [r7, #4]
   10798:	6039      	str	r1, [r7, #0]
   1079a:	683b      	ldr	r3, [r7, #0]
   1079c:	681a      	ldr	r2, [r3, #0]
   1079e:	687b      	ldr	r3, [r7, #4]
   107a0:	601a      	str	r2, [r3, #0]
   107a2:	687b      	ldr	r3, [r7, #4]
   107a4:	681b      	ldr	r3, [r3, #0]
   107a6:	3b14      	subs	r3, #20
   107a8:	681b      	ldr	r3, [r3, #0]
   107aa:	461a      	mov	r2, r3
   107ac:	687b      	ldr	r3, [r7, #4]
   107ae:	4413      	add	r3, r2
   107b0:	683a      	ldr	r2, [r7, #0]
   107b2:	68d2      	ldr	r2, [r2, #12]
   107b4:	601a      	str	r2, [r3, #0]
   107b6:	687b      	ldr	r3, [r7, #4]
   107b8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
   107bc:	4618      	mov	r0, r3
   107be:	4b0a      	ldr	r3, [pc, #40]	; (107e8 <_ZN15ARINC_InterfaceD2Ev+0x58>)
   107c0:	4798      	blx	r3
   107c2:	687b      	ldr	r3, [r7, #4]
   107c4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
   107c8:	4618      	mov	r0, r3
   107ca:	4b08      	ldr	r3, [pc, #32]	; (107ec <_ZN15ARINC_InterfaceD2Ev+0x5c>)
   107cc:	4798      	blx	r3
   107ce:	687a      	ldr	r2, [r7, #4]
   107d0:	683b      	ldr	r3, [r7, #0]
   107d2:	3304      	adds	r3, #4
   107d4:	4619      	mov	r1, r3
   107d6:	4610      	mov	r0, r2
   107d8:	4b05      	ldr	r3, [pc, #20]	; (107f0 <_ZN15ARINC_InterfaceD2Ev+0x60>)
   107da:	4798      	blx	r3
{
} //~ARINC_Interface
   107dc:	687b      	ldr	r3, [r7, #4]
   107de:	4618      	mov	r0, r3
   107e0:	3708      	adds	r7, #8
   107e2:	46bd      	mov	sp, r7
   107e4:	bd80      	pop	{r7, pc}
   107e6:	bf00      	nop
   107e8:	00010be5 	.word	0x00010be5
   107ec:	000130cd 	.word	0x000130cd
   107f0:	00011209 	.word	0x00011209

000107f4 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
   107f4:	b580      	push	{r7, lr}
   107f6:	b082      	sub	sp, #8
   107f8:	af00      	add	r7, sp, #0
   107fa:	6078      	str	r0, [r7, #4]
   107fc:	4a10      	ldr	r2, [pc, #64]	; (10840 <_ZN15ARINC_InterfaceD1Ev+0x4c>)
   107fe:	687b      	ldr	r3, [r7, #4]
   10800:	601a      	str	r2, [r3, #0]
   10802:	4a0f      	ldr	r2, [pc, #60]	; (10840 <_ZN15ARINC_InterfaceD1Ev+0x4c>)
   10804:	687b      	ldr	r3, [r7, #4]
   10806:	601a      	str	r2, [r3, #0]
   10808:	687b      	ldr	r3, [r7, #4]
   1080a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
   1080e:	4618      	mov	r0, r3
   10810:	4b0c      	ldr	r3, [pc, #48]	; (10844 <_ZN15ARINC_InterfaceD1Ev+0x50>)
   10812:	4798      	blx	r3
   10814:	687b      	ldr	r3, [r7, #4]
   10816:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
   1081a:	4618      	mov	r0, r3
   1081c:	4b0a      	ldr	r3, [pc, #40]	; (10848 <_ZN15ARINC_InterfaceD1Ev+0x54>)
   1081e:	4798      	blx	r3
   10820:	687b      	ldr	r3, [r7, #4]
   10822:	4a0a      	ldr	r2, [pc, #40]	; (1084c <_ZN15ARINC_InterfaceD1Ev+0x58>)
   10824:	4611      	mov	r1, r2
   10826:	4618      	mov	r0, r3
   10828:	4b09      	ldr	r3, [pc, #36]	; (10850 <_ZN15ARINC_InterfaceD1Ev+0x5c>)
   1082a:	4798      	blx	r3
   1082c:	687b      	ldr	r3, [r7, #4]
   1082e:	4618      	mov	r0, r3
   10830:	4b08      	ldr	r3, [pc, #32]	; (10854 <_ZN15ARINC_InterfaceD1Ev+0x60>)
   10832:	4798      	blx	r3
} //~ARINC_Interface
   10834:	687b      	ldr	r3, [r7, #4]
   10836:	4618      	mov	r0, r3
   10838:	3708      	adds	r7, #8
   1083a:	46bd      	mov	sp, r7
   1083c:	bd80      	pop	{r7, pc}
   1083e:	bf00      	nop
   10840:	0001b3ac 	.word	0x0001b3ac
   10844:	00010be5 	.word	0x00010be5
   10848:	000130cd 	.word	0x000130cd
   1084c:	0001b3c4 	.word	0x0001b3c4
   10850:	00011209 	.word	0x00011209
   10854:	00010401 	.word	0x00010401

00010858 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
   10858:	b580      	push	{r7, lr}
   1085a:	b082      	sub	sp, #8
   1085c:	af00      	add	r7, sp, #0
   1085e:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
   10860:	6878      	ldr	r0, [r7, #4]
   10862:	4b06      	ldr	r3, [pc, #24]	; (1087c <_ZN15ARINC_InterfaceD0Ev+0x24>)
   10864:	4798      	blx	r3
   10866:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   1086a:	6878      	ldr	r0, [r7, #4]
   1086c:	4b04      	ldr	r3, [pc, #16]	; (10880 <_ZN15ARINC_InterfaceD0Ev+0x28>)
   1086e:	4798      	blx	r3
   10870:	687b      	ldr	r3, [r7, #4]
   10872:	4618      	mov	r0, r3
   10874:	3708      	adds	r7, #8
   10876:	46bd      	mov	sp, r7
   10878:	bd80      	pop	{r7, pc}
   1087a:	bf00      	nop
   1087c:	000107f5 	.word	0x000107f5
   10880:	00014289 	.word	0x00014289

00010884 <_ZN15ARINC_Interface4InitEv>:




bool	ARINC_Interface::Init(void){
   10884:	b590      	push	{r4, r7, lr}
   10886:	b083      	sub	sp, #12
   10888:	af00      	add	r7, sp, #0
   1088a:	6078      	str	r0, [r7, #4]
	BITRATE0=false;
   1088c:	687b      	ldr	r3, [r7, #4]
   1088e:	2200      	movs	r2, #0
   10890:	731a      	strb	r2, [r3, #12]
	BITRATE1=false;
   10892:	687b      	ldr	r3, [r7, #4]
   10894:	2200      	movs	r2, #0
   10896:	735a      	strb	r2, [r3, #13]
	BITRATE2=false;
   10898:	687b      	ldr	r3, [r7, #4]
   1089a:	2200      	movs	r2, #0
   1089c:	739a      	strb	r2, [r3, #14]

	PARITY=false;
   1089e:	687b      	ldr	r3, [r7, #4]
   108a0:	2200      	movs	r2, #0
   108a2:	73da      	strb	r2, [r3, #15]
	HW_RESET();
   108a4:	6878      	ldr	r0, [r7, #4]
   108a6:	4b4f      	ldr	r3, [pc, #316]	; (109e4 <_ZN15ARINC_Interface4InitEv+0x160>)
   108a8:	4798      	blx	r3
	statusHolt=HI3593.Init();
   108aa:	687b      	ldr	r3, [r7, #4]
   108ac:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
   108b0:	4618      	mov	r0, r3
   108b2:	4b4d      	ldr	r3, [pc, #308]	; (109e8 <_ZN15ARINC_Interface4InitEv+0x164>)
   108b4:	4798      	blx	r3
   108b6:	4603      	mov	r3, r0
   108b8:	461a      	mov	r2, r3
   108ba:	687b      	ldr	r3, [r7, #4]
   108bc:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
	if (statusHolt!=TSR_Default){
   108c0:	687b      	ldr	r3, [r7, #4]
   108c2:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
   108c6:	2b01      	cmp	r3, #1
   108c8:	d008      	beq.n	108dc <_ZN15ARINC_Interface4InitEv+0x58>
		usb.println("\n\rHI-3593 failed to initilize\n\r");
   108ca:	4948      	ldr	r1, [pc, #288]	; (109ec <_ZN15ARINC_Interface4InitEv+0x168>)
   108cc:	4848      	ldr	r0, [pc, #288]	; (109f0 <_ZN15ARINC_Interface4InitEv+0x16c>)
   108ce:	4b49      	ldr	r3, [pc, #292]	; (109f4 <_ZN15ARINC_Interface4InitEv+0x170>)
   108d0:	4798      	blx	r3
		isOK=false;
   108d2:	687b      	ldr	r3, [r7, #4]
   108d4:	2200      	movs	r2, #0
   108d6:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
   108da:	e069      	b.n	109b0 <_ZN15ARINC_Interface4InitEv+0x12c>
	}else{
		isOK=true;
   108dc:	687b      	ldr	r3, [r7, #4]
   108de:	2201      	movs	r2, #1
   108e0:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
		newMessageR1=false;
   108e4:	687b      	ldr	r3, [r7, #4]
   108e6:	2200      	movs	r2, #0
   108e8:	741a      	strb	r2, [r3, #16]
			BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
   108ea:	687b      	ldr	r3, [r7, #4]
   108ec:	2200      	movs	r2, #0
   108ee:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
			MessageCount=0;
   108f2:	687b      	ldr	r3, [r7, #4]
   108f4:	2200      	movs	r2, #0
   108f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			ARINCLabel = 0x1D;         // Write ARINC Label
   108fa:	687b      	ldr	r3, [r7, #4]
   108fc:	221d      	movs	r2, #29
   108fe:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			Arate=0;
   10902:	687b      	ldr	r3, [r7, #4]
   10904:	2200      	movs	r2, #0
   10906:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
			(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
   1090a:	687b      	ldr	r3, [r7, #4]
   1090c:	3311      	adds	r3, #17
   1090e:	2210      	movs	r2, #16
   10910:	2100      	movs	r1, #0
   10912:	4618      	mov	r0, r3
   10914:	4b38      	ldr	r3, [pc, #224]	; (109f8 <_ZN15ARINC_Interface4InitEv+0x174>)
   10916:	4798      	blx	r3
			
			// Setup the Labels
			HI3593.initReceiver1Labels();     // initial Rec1 labels
   10918:	687b      	ldr	r3, [r7, #4]
   1091a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
   1091e:	4618      	mov	r0, r3
   10920:	4b36      	ldr	r3, [pc, #216]	; (109fc <_ZN15ARINC_Interface4InitEv+0x178>)
   10922:	4798      	blx	r3
			HI3593.initReceiver2Labels();     // initial Rec2 labels
   10924:	687b      	ldr	r3, [r7, #4]
   10926:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
   1092a:	4618      	mov	r0, r3
   1092c:	4b34      	ldr	r3, [pc, #208]	; (10a00 <_ZN15ARINC_Interface4InitEv+0x17c>)
   1092e:	4798      	blx	r3
			HI3593.MultiByteRead(REC1MEMORY, 32, LabelsAr1); // read in all Rec-1 labels into the passed array
   10930:	687b      	ldr	r3, [r7, #4]
   10932:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
   10936:	687b      	ldr	r3, [r7, #4]
   10938:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1093c:	2220      	movs	r2, #32
   1093e:	2198      	movs	r1, #152	; 0x98
   10940:	4c30      	ldr	r4, [pc, #192]	; (10a04 <_ZN15ARINC_Interface4InitEv+0x180>)
   10942:	47a0      	blx	r4
			HI3593.MultiByteRead(REC2MEMORY, 32, LabelsAr2); // read in all Rec-2 labels into the passed array
   10944:	687b      	ldr	r3, [r7, #4]
   10946:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
   1094a:	687b      	ldr	r3, [r7, #4]
   1094c:	f503 73b8 	add.w	r3, r3, #368	; 0x170
   10950:	2220      	movs	r2, #32
   10952:	21b8      	movs	r1, #184	; 0xb8
   10954:	4c2b      	ldr	r4, [pc, #172]	; (10a04 <_ZN15ARINC_Interface4InitEv+0x180>)
   10956:	47a0      	blx	r4

			Rec1Parity =0;
   10958:	687b      	ldr	r3, [r7, #4]
   1095a:	2200      	movs	r2, #0
   1095c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
			Rec2Parity =0;
   10960:	687b      	ldr	r3, [r7, #4]
   10962:	2200      	movs	r2, #0
   10964:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b


			HI3593.W_CommandValue(REC1CR,RFLIP | PLON | LABREC | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
   10968:	687b      	ldr	r3, [r7, #4]
   1096a:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
   1096e:	687b      	ldr	r3, [r7, #4]
   10970:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
   10974:	687b      	ldr	r3, [r7, #4]
   10976:	f893 319a 	ldrb.w	r3, [r3, #410]	; 0x19a
   1097a:	4313      	orrs	r3, r2
   1097c:	b2db      	uxtb	r3, r3
   1097e:	f063 0379 	orn	r3, r3, #121	; 0x79
   10982:	b2db      	uxtb	r3, r3
   10984:	461a      	mov	r2, r3
   10986:	2110      	movs	r1, #16
   10988:	4b1f      	ldr	r3, [pc, #124]	; (10a08 <_ZN15ARINC_Interface4InitEv+0x184>)
   1098a:	4798      	blx	r3
			HI3593.W_CommandValue(REC2CR,RFLIP | PLON | LABREC | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
   1098c:	687b      	ldr	r3, [r7, #4]
   1098e:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
   10992:	687b      	ldr	r3, [r7, #4]
   10994:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
   10998:	687b      	ldr	r3, [r7, #4]
   1099a:	f893 319b 	ldrb.w	r3, [r3, #411]	; 0x19b
   1099e:	4313      	orrs	r3, r2
   109a0:	b2db      	uxtb	r3, r3
   109a2:	f063 0379 	orn	r3, r3, #121	; 0x79
   109a6:	b2db      	uxtb	r3, r3
   109a8:	461a      	mov	r2, r3
   109aa:	2124      	movs	r1, #36	; 0x24
   109ac:	4b16      	ldr	r3, [pc, #88]	; (10a08 <_ZN15ARINC_Interface4InitEv+0x184>)
   109ae:	4798      	blx	r3
	}
	
	timer.Init(&TIMER_ARINC);
   109b0:	687b      	ldr	r3, [r7, #4]
   109b2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
   109b6:	4915      	ldr	r1, [pc, #84]	; (10a0c <_ZN15ARINC_Interface4InitEv+0x188>)
   109b8:	4618      	mov	r0, r3
   109ba:	4b15      	ldr	r3, [pc, #84]	; (10a10 <_ZN15ARINC_Interface4InitEv+0x18c>)
   109bc:	4798      	blx	r3
	timer.add_periodic_task(blink_LED0,1);
   109be:	687b      	ldr	r3, [r7, #4]
   109c0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
   109c4:	2201      	movs	r2, #1
   109c6:	4913      	ldr	r1, [pc, #76]	; (10a14 <_ZN15ARINC_Interface4InitEv+0x190>)
   109c8:	4618      	mov	r0, r3
   109ca:	4b13      	ldr	r3, [pc, #76]	; (10a18 <_ZN15ARINC_Interface4InitEv+0x194>)
   109cc:	4798      	blx	r3
	ext_irq_register(R1Int, Receiver1Int);
   109ce:	4913      	ldr	r1, [pc, #76]	; (10a1c <_ZN15ARINC_Interface4InitEv+0x198>)
   109d0:	2057      	movs	r0, #87	; 0x57
   109d2:	4b13      	ldr	r3, [pc, #76]	; (10a20 <_ZN15ARINC_Interface4InitEv+0x19c>)
   109d4:	4798      	blx	r3
	//HI3893.InitPriorityLabels();
	return isOK;
   109d6:	687b      	ldr	r3, [r7, #4]
   109d8:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
}
   109dc:	4618      	mov	r0, r3
   109de:	370c      	adds	r7, #12
   109e0:	46bd      	mov	sp, r7
   109e2:	bd90      	pop	{r4, r7, pc}
   109e4:	00010a85 	.word	0x00010a85
   109e8:	00010c05 	.word	0x00010c05
   109ec:	0001a9d0 	.word	0x0001a9d0
   109f0:	20003e1c 	.word	0x20003e1c
   109f4:	000139a9 	.word	0x000139a9
   109f8:	00016451 	.word	0x00016451
   109fc:	00010e19 	.word	0x00010e19
   10a00:	00010f81 	.word	0x00010f81
   10a04:	00010fed 	.word	0x00010fed
   10a08:	00011115 	.word	0x00011115
   10a0c:	20003ff0 	.word	0x20003ff0
   10a10:	000130e9 	.word	0x000130e9
   10a14:	00010659 	.word	0x00010659
   10a18:	0001318d 	.word	0x0001318d
   10a1c:	0001066d 	.word	0x0001066d
   10a20:	00004711 	.word	0x00004711

00010a24 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
   10a24:	b480      	push	{r7}
   10a26:	b085      	sub	sp, #20
   10a28:	af00      	add	r7, sp, #0
   10a2a:	6078      	str	r0, [r7, #4]
   10a2c:	460b      	mov	r3, r1
   10a2e:	70fb      	strb	r3, [r7, #3]
	uint32_t *data;
	uint8_t	j;
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   10a30:	2300      	movs	r3, #0
   10a32:	73fb      	strb	r3, [r7, #15]
   10a34:	7bfb      	ldrb	r3, [r7, #15]
   10a36:	2b3f      	cmp	r3, #63	; 0x3f
   10a38:	dc1e      	bgt.n	10a78 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x54>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
   10a3a:	687b      	ldr	r3, [r7, #4]
   10a3c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   10a40:	7bfb      	ldrb	r3, [r7, #15]
   10a42:	4413      	add	r3, r2
   10a44:	b2db      	uxtb	r3, r3
   10a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10a4a:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
   10a4c:	7bbb      	ldrb	r3, [r7, #14]
   10a4e:	687a      	ldr	r2, [r7, #4]
   10a50:	009b      	lsls	r3, r3, #2
   10a52:	4413      	add	r3, r2
   10a54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   10a58:	78fa      	ldrb	r2, [r7, #3]
   10a5a:	429a      	cmp	r2, r3
   10a5c:	d108      	bne.n	10a70 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x4c>
		{
			data=(uint32_t*)receiverBuffer[j];
   10a5e:	7bbb      	ldrb	r3, [r7, #14]
   10a60:	3310      	adds	r3, #16
   10a62:	009b      	lsls	r3, r3, #2
   10a64:	687a      	ldr	r2, [r7, #4]
   10a66:	4413      	add	r3, r2
   10a68:	60bb      	str	r3, [r7, #8]
			return *data;
   10a6a:	68bb      	ldr	r3, [r7, #8]
   10a6c:	681b      	ldr	r3, [r3, #0]
   10a6e:	e004      	b.n	10a7a <_ZN15ARINC_Interface15ReadBufferLabelEh+0x56>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   10a70:	7bfb      	ldrb	r3, [r7, #15]
   10a72:	3301      	adds	r3, #1
   10a74:	73fb      	strb	r3, [r7, #15]
   10a76:	e7dd      	b.n	10a34 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
		}
		
	}

	return 0;
   10a78:	2300      	movs	r3, #0
}
   10a7a:	4618      	mov	r0, r3
   10a7c:	3714      	adds	r7, #20
   10a7e:	46bd      	mov	sp, r7
   10a80:	bc80      	pop	{r7}
   10a82:	4770      	bx	lr

00010a84 <_ZN15ARINC_Interface8HW_RESETEv>:
	//crlf();
	usb.println("\n\r");
	usb.println(">");
}

void ARINC_Interface::HW_RESET(void){
   10a84:	b580      	push	{r7, lr}
   10a86:	b082      	sub	sp, #8
   10a88:	af00      	add	r7, sp, #0
   10a8a:	6078      	str	r0, [r7, #4]
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
   10a8c:	2001      	movs	r0, #1
   10a8e:	4b03      	ldr	r3, [pc, #12]	; (10a9c <_ZN15ARINC_Interface8HW_RESETEv+0x18>)
   10a90:	4798      	blx	r3
	//gpio_set_pin_level(MR,false);
}
   10a92:	bf00      	nop
   10a94:	3708      	adds	r7, #8
   10a96:	46bd      	mov	sp, r7
   10a98:	bd80      	pop	{r7, pc}
   10a9a:	bf00      	nop
   10a9c:	00004649 	.word	0x00004649

00010aa0 <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

   10aa0:	b580      	push	{r7, lr}
   10aa2:	b082      	sub	sp, #8
   10aa4:	af00      	add	r7, sp, #0
   10aa6:	6078      	str	r0, [r7, #4]
   10aa8:	6039      	str	r1, [r7, #0]
   10aaa:	687b      	ldr	r3, [r7, #4]
   10aac:	2b01      	cmp	r3, #1
   10aae:	d10c      	bne.n	10aca <_Z41__static_initialization_and_destruction_0ii+0x2a>
   10ab0:	683b      	ldr	r3, [r7, #0]
   10ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10ab6:	4293      	cmp	r3, r2
   10ab8:	d107      	bne.n	10aca <_Z41__static_initialization_and_destruction_0ii+0x2a>
   10aba:	4806      	ldr	r0, [pc, #24]	; (10ad4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10abc:	4b06      	ldr	r3, [pc, #24]	; (10ad8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10abe:	4798      	blx	r3
   10ac0:	4a06      	ldr	r2, [pc, #24]	; (10adc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   10ac2:	4907      	ldr	r1, [pc, #28]	; (10ae0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   10ac4:	4803      	ldr	r0, [pc, #12]	; (10ad4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10ac6:	4b07      	ldr	r3, [pc, #28]	; (10ae4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   10ac8:	4798      	blx	r3
   10aca:	bf00      	nop
   10acc:	3708      	adds	r7, #8
   10ace:	46bd      	mov	sp, r7
   10ad0:	bd80      	pop	{r7, pc}
   10ad2:	bf00      	nop
   10ad4:	2000283c 	.word	0x2000283c
   10ad8:	00010725 	.word	0x00010725
   10adc:	20000000 	.word	0x20000000
   10ae0:	000107f5 	.word	0x000107f5
   10ae4:	0001427d 	.word	0x0001427d

00010ae8 <_GLOBAL__sub_I_HexSymbols>:
   10ae8:	b580      	push	{r7, lr}
   10aea:	af00      	add	r7, sp, #0
   10aec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10af0:	2001      	movs	r0, #1
   10af2:	4b01      	ldr	r3, [pc, #4]	; (10af8 <_GLOBAL__sub_I_HexSymbols+0x10>)
   10af4:	4798      	blx	r3
   10af6:	bd80      	pop	{r7, pc}
   10af8:	00010aa1 	.word	0x00010aa1

00010afc <hri_port_set_OUT_reg>:
{
   10afc:	b480      	push	{r7}
   10afe:	b085      	sub	sp, #20
   10b00:	af00      	add	r7, sp, #0
   10b02:	60f8      	str	r0, [r7, #12]
   10b04:	460b      	mov	r3, r1
   10b06:	607a      	str	r2, [r7, #4]
   10b08:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   10b0a:	7afb      	ldrb	r3, [r7, #11]
   10b0c:	68fa      	ldr	r2, [r7, #12]
   10b0e:	01db      	lsls	r3, r3, #7
   10b10:	4413      	add	r3, r2
   10b12:	3318      	adds	r3, #24
   10b14:	687a      	ldr	r2, [r7, #4]
   10b16:	601a      	str	r2, [r3, #0]
}
   10b18:	bf00      	nop
   10b1a:	3714      	adds	r7, #20
   10b1c:	46bd      	mov	sp, r7
   10b1e:	bc80      	pop	{r7}
   10b20:	4770      	bx	lr

00010b22 <hri_port_clear_OUT_reg>:
{
   10b22:	b480      	push	{r7}
   10b24:	b085      	sub	sp, #20
   10b26:	af00      	add	r7, sp, #0
   10b28:	60f8      	str	r0, [r7, #12]
   10b2a:	460b      	mov	r3, r1
   10b2c:	607a      	str	r2, [r7, #4]
   10b2e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   10b30:	7afb      	ldrb	r3, [r7, #11]
   10b32:	68fa      	ldr	r2, [r7, #12]
   10b34:	01db      	lsls	r3, r3, #7
   10b36:	4413      	add	r3, r2
   10b38:	3314      	adds	r3, #20
   10b3a:	687a      	ldr	r2, [r7, #4]
   10b3c:	601a      	str	r2, [r3, #0]
}
   10b3e:	bf00      	nop
   10b40:	3714      	adds	r7, #20
   10b42:	46bd      	mov	sp, r7
   10b44:	bc80      	pop	{r7}
   10b46:	4770      	bx	lr

00010b48 <_gpio_set_level>:
{
   10b48:	b580      	push	{r7, lr}
   10b4a:	b082      	sub	sp, #8
   10b4c:	af00      	add	r7, sp, #0
   10b4e:	4603      	mov	r3, r0
   10b50:	6039      	str	r1, [r7, #0]
   10b52:	71fb      	strb	r3, [r7, #7]
   10b54:	4613      	mov	r3, r2
   10b56:	71bb      	strb	r3, [r7, #6]
	if (level) {
   10b58:	79bb      	ldrb	r3, [r7, #6]
   10b5a:	2b00      	cmp	r3, #0
   10b5c:	d006      	beq.n	10b6c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   10b5e:	79fb      	ldrb	r3, [r7, #7]
   10b60:	683a      	ldr	r2, [r7, #0]
   10b62:	4619      	mov	r1, r3
   10b64:	4806      	ldr	r0, [pc, #24]	; (10b80 <_gpio_set_level+0x38>)
   10b66:	4b07      	ldr	r3, [pc, #28]	; (10b84 <_gpio_set_level+0x3c>)
   10b68:	4798      	blx	r3
}
   10b6a:	e005      	b.n	10b78 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   10b6c:	79fb      	ldrb	r3, [r7, #7]
   10b6e:	683a      	ldr	r2, [r7, #0]
   10b70:	4619      	mov	r1, r3
   10b72:	4803      	ldr	r0, [pc, #12]	; (10b80 <_gpio_set_level+0x38>)
   10b74:	4b04      	ldr	r3, [pc, #16]	; (10b88 <_gpio_set_level+0x40>)
   10b76:	4798      	blx	r3
}
   10b78:	bf00      	nop
   10b7a:	3708      	adds	r7, #8
   10b7c:	46bd      	mov	sp, r7
   10b7e:	bd80      	pop	{r7, pc}
   10b80:	41008000 	.word	0x41008000
   10b84:	00010afd 	.word	0x00010afd
   10b88:	00010b23 	.word	0x00010b23

00010b8c <gpio_set_pin_level>:
{
   10b8c:	b580      	push	{r7, lr}
   10b8e:	b082      	sub	sp, #8
   10b90:	af00      	add	r7, sp, #0
   10b92:	4603      	mov	r3, r0
   10b94:	460a      	mov	r2, r1
   10b96:	71fb      	strb	r3, [r7, #7]
   10b98:	4613      	mov	r3, r2
   10b9a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   10b9c:	79fb      	ldrb	r3, [r7, #7]
   10b9e:	115b      	asrs	r3, r3, #5
   10ba0:	b2d8      	uxtb	r0, r3
   10ba2:	79fb      	ldrb	r3, [r7, #7]
   10ba4:	f003 031f 	and.w	r3, r3, #31
   10ba8:	2201      	movs	r2, #1
   10baa:	fa02 f303 	lsl.w	r3, r2, r3
   10bae:	79ba      	ldrb	r2, [r7, #6]
   10bb0:	4619      	mov	r1, r3
   10bb2:	4b03      	ldr	r3, [pc, #12]	; (10bc0 <gpio_set_pin_level+0x34>)
   10bb4:	4798      	blx	r3
}
   10bb6:	bf00      	nop
   10bb8:	3708      	adds	r7, #8
   10bba:	46bd      	mov	sp, r7
   10bbc:	bd80      	pop	{r7, pc}
   10bbe:	bf00      	nop
   10bc0:	00010b49 	.word	0x00010b49

00010bc4 <_ZN15Holt_3593_ClassC1Ev>:


#include "Holt_3593_Class.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
   10bc4:	b580      	push	{r7, lr}
   10bc6:	b082      	sub	sp, #8
   10bc8:	af00      	add	r7, sp, #0
   10bca:	6078      	str	r0, [r7, #4]
   10bcc:	687b      	ldr	r3, [r7, #4]
   10bce:	4618      	mov	r0, r3
   10bd0:	4b03      	ldr	r3, [pc, #12]	; (10be0 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
   10bd2:	4798      	blx	r3
{
} //Holt_3593_Class
   10bd4:	687b      	ldr	r3, [r7, #4]
   10bd6:	4618      	mov	r0, r3
   10bd8:	3708      	adds	r7, #8
   10bda:	46bd      	mov	sp, r7
   10bdc:	bd80      	pop	{r7, pc}
   10bde:	bf00      	nop
   10be0:	0001198d 	.word	0x0001198d

00010be4 <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
   10be4:	b580      	push	{r7, lr}
   10be6:	b082      	sub	sp, #8
   10be8:	af00      	add	r7, sp, #0
   10bea:	6078      	str	r0, [r7, #4]
   10bec:	687b      	ldr	r3, [r7, #4]
   10bee:	4618      	mov	r0, r3
   10bf0:	4b03      	ldr	r3, [pc, #12]	; (10c00 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
   10bf2:	4798      	blx	r3
{
} //~Holt_3593_Class
   10bf4:	687b      	ldr	r3, [r7, #4]
   10bf6:	4618      	mov	r0, r3
   10bf8:	3708      	adds	r7, #8
   10bfa:	46bd      	mov	sp, r7
   10bfc:	bd80      	pop	{r7, pc}
   10bfe:	bf00      	nop
   10c00:	000119ad 	.word	0x000119ad

00010c04 <_ZN15Holt_3593_Class4InitEv>:

// Priority Label-1 Table     
unsigned char LabelPriority2 [3];

  
 uint8_t	Holt_3593_Class::Init(void){
   10c04:	b590      	push	{r4, r7, lr}
   10c06:	b089      	sub	sp, #36	; 0x24
   10c08:	af02      	add	r7, sp, #8
   10c0a:	6078      	str	r0, [r7, #4]
	 
	 spi.setDescriptor(&SPI_HI3593);
   10c0c:	687b      	ldr	r3, [r7, #4]
   10c0e:	492d      	ldr	r1, [pc, #180]	; (10cc4 <_ZN15Holt_3593_Class4InitEv+0xc0>)
   10c10:	4618      	mov	r0, r3
   10c12:	4b2d      	ldr	r3, [pc, #180]	; (10cc8 <_ZN15Holt_3593_Class4InitEv+0xc4>)
   10c14:	4798      	blx	r3
	  spi.init();
   10c16:	687b      	ldr	r3, [r7, #4]
   10c18:	4618      	mov	r0, r3
   10c1a:	4b2c      	ldr	r3, [pc, #176]	; (10ccc <_ZN15Holt_3593_Class4InitEv+0xc8>)
   10c1c:	4798      	blx	r3
	 uint8_t	status=	Init3593(ACLKDIV,  // ARINC clock divisor
	 TMODE,    // Transmit mode. Set for "send as soon as possible"
	 SELFTEST_OFF, // Selftest defined by Mode switches
	 BITRATE,    // Arinc speed and if Parity is enabled by the switch
	 TFLIP );
   10c1e:	2340      	movs	r3, #64	; 0x40
   10c20:	9301      	str	r3, [sp, #4]
   10c22:	2300      	movs	r3, #0
   10c24:	9300      	str	r3, [sp, #0]
   10c26:	2300      	movs	r3, #0
   10c28:	2201      	movs	r2, #1
   10c2a:	2104      	movs	r1, #4
   10c2c:	6878      	ldr	r0, [r7, #4]
   10c2e:	4c28      	ldr	r4, [pc, #160]	; (10cd0 <_ZN15Holt_3593_Class4InitEv+0xcc>)
   10c30:	47a0      	blx	r4
   10c32:	4603      	mov	r3, r0
   10c34:	73fb      	strb	r3, [r7, #15]

	for (int i=0;i<32;i++)
   10c36:	2300      	movs	r3, #0
   10c38:	617b      	str	r3, [r7, #20]
   10c3a:	697b      	ldr	r3, [r7, #20]
   10c3c:	2b1f      	cmp	r3, #31
   10c3e:	dc1b      	bgt.n	10c78 <_ZN15Holt_3593_Class4InitEv+0x74>
	{
		LabelArray_2[i]=FlipByte(LabelArray_1[i]);
   10c40:	4a24      	ldr	r2, [pc, #144]	; (10cd4 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   10c42:	697b      	ldr	r3, [r7, #20]
   10c44:	4413      	add	r3, r2
   10c46:	781b      	ldrb	r3, [r3, #0]
   10c48:	4619      	mov	r1, r3
   10c4a:	6878      	ldr	r0, [r7, #4]
   10c4c:	4b22      	ldr	r3, [pc, #136]	; (10cd8 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   10c4e:	4798      	blx	r3
   10c50:	4603      	mov	r3, r0
   10c52:	4619      	mov	r1, r3
   10c54:	4a21      	ldr	r2, [pc, #132]	; (10cdc <_ZN15Holt_3593_Class4InitEv+0xd8>)
   10c56:	697b      	ldr	r3, [r7, #20]
   10c58:	4413      	add	r3, r2
   10c5a:	460a      	mov	r2, r1
   10c5c:	701a      	strb	r2, [r3, #0]
		LabelArray_1[i]=LabelArray_2[i];
   10c5e:	4a1f      	ldr	r2, [pc, #124]	; (10cdc <_ZN15Holt_3593_Class4InitEv+0xd8>)
   10c60:	697b      	ldr	r3, [r7, #20]
   10c62:	4413      	add	r3, r2
   10c64:	7819      	ldrb	r1, [r3, #0]
   10c66:	4a1b      	ldr	r2, [pc, #108]	; (10cd4 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   10c68:	697b      	ldr	r3, [r7, #20]
   10c6a:	4413      	add	r3, r2
   10c6c:	460a      	mov	r2, r1
   10c6e:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<32;i++)
   10c70:	697b      	ldr	r3, [r7, #20]
   10c72:	3301      	adds	r3, #1
   10c74:	617b      	str	r3, [r7, #20]
   10c76:	e7e0      	b.n	10c3a <_ZN15Holt_3593_Class4InitEv+0x36>
	}
	for (int i=0;i<3;i++)
   10c78:	2300      	movs	r3, #0
   10c7a:	613b      	str	r3, [r7, #16]
   10c7c:	693b      	ldr	r3, [r7, #16]
   10c7e:	2b02      	cmp	r3, #2
   10c80:	dc1b      	bgt.n	10cba <_ZN15Holt_3593_Class4InitEv+0xb6>
	{
		LabelPriority2[i]=FlipByte(LabelPriority1[i]);
   10c82:	4a17      	ldr	r2, [pc, #92]	; (10ce0 <_ZN15Holt_3593_Class4InitEv+0xdc>)
   10c84:	693b      	ldr	r3, [r7, #16]
   10c86:	4413      	add	r3, r2
   10c88:	781b      	ldrb	r3, [r3, #0]
   10c8a:	4619      	mov	r1, r3
   10c8c:	6878      	ldr	r0, [r7, #4]
   10c8e:	4b12      	ldr	r3, [pc, #72]	; (10cd8 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   10c90:	4798      	blx	r3
   10c92:	4603      	mov	r3, r0
   10c94:	4619      	mov	r1, r3
   10c96:	4a13      	ldr	r2, [pc, #76]	; (10ce4 <_ZN15Holt_3593_Class4InitEv+0xe0>)
   10c98:	693b      	ldr	r3, [r7, #16]
   10c9a:	4413      	add	r3, r2
   10c9c:	460a      	mov	r2, r1
   10c9e:	701a      	strb	r2, [r3, #0]
		LabelPriority1[i]=LabelPriority2[i];
   10ca0:	4a10      	ldr	r2, [pc, #64]	; (10ce4 <_ZN15Holt_3593_Class4InitEv+0xe0>)
   10ca2:	693b      	ldr	r3, [r7, #16]
   10ca4:	4413      	add	r3, r2
   10ca6:	7819      	ldrb	r1, [r3, #0]
   10ca8:	4a0d      	ldr	r2, [pc, #52]	; (10ce0 <_ZN15Holt_3593_Class4InitEv+0xdc>)
   10caa:	693b      	ldr	r3, [r7, #16]
   10cac:	4413      	add	r3, r2
   10cae:	460a      	mov	r2, r1
   10cb0:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<3;i++)
   10cb2:	693b      	ldr	r3, [r7, #16]
   10cb4:	3301      	adds	r3, #1
   10cb6:	613b      	str	r3, [r7, #16]
   10cb8:	e7e0      	b.n	10c7c <_ZN15Holt_3593_Class4InitEv+0x78>
	}
	return	status;
   10cba:	7bfb      	ldrb	r3, [r7, #15]
 } 
   10cbc:	4618      	mov	r0, r3
   10cbe:	371c      	adds	r7, #28
   10cc0:	46bd      	mov	sp, r7
   10cc2:	bd90      	pop	{r4, r7, pc}
   10cc4:	20003f10 	.word	0x20003f10
   10cc8:	000119f9 	.word	0x000119f9
   10ccc:	000119c1 	.word	0x000119c1
   10cd0:	00010ce9 	.word	0x00010ce9
   10cd4:	20000178 	.word	0x20000178
   10cd8:	00010e85 	.word	0x00010e85
   10cdc:	20002a30 	.word	0x20002a30
   10ce0:	20000198 	.word	0x20000198
   10ce4:	20002a50 	.word	0x20002a50

00010ce8 <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 
 // ------------------------------------------------------------------
 // Initialize the HI-3593
 // ------------------------------------------------------------------
 uint8_t Holt_3593_Class::Init3593(uint8_t AclkDiv, uint8_t tmode, uint8_t selftest, uint8_t arate, uint8_t tflip )
 {
   10ce8:	b580      	push	{r7, lr}
   10cea:	b084      	sub	sp, #16
   10cec:	af00      	add	r7, sp, #0
   10cee:	6078      	str	r0, [r7, #4]
   10cf0:	4608      	mov	r0, r1
   10cf2:	4611      	mov	r1, r2
   10cf4:	461a      	mov	r2, r3
   10cf6:	4603      	mov	r3, r0
   10cf8:	70fb      	strb	r3, [r7, #3]
   10cfa:	460b      	mov	r3, r1
   10cfc:	70bb      	strb	r3, [r7, #2]
   10cfe:	4613      	mov	r3, r2
   10d00:	707b      	strb	r3, [r7, #1]
	 unsigned char cmd=0;
   10d02:	2300      	movs	r3, #0
   10d04:	73fb      	strb	r3, [r7, #15]
	 
	 W_Command(RESETCMD);                // Reset the HI-3593
   10d06:	2104      	movs	r1, #4
   10d08:	6878      	ldr	r0, [r7, #4]
   10d0a:	4b18      	ldr	r3, [pc, #96]	; (10d6c <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x84>)
   10d0c:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
   10d0e:	78fb      	ldrb	r3, [r7, #3]
   10d10:	461a      	mov	r2, r3
   10d12:	2138      	movs	r1, #56	; 0x38
   10d14:	6878      	ldr	r0, [r7, #4]
   10d16:	4b16      	ldr	r3, [pc, #88]	; (10d70 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   10d18:	4798      	blx	r3
	 cmd =  arate;
   10d1a:	7e3b      	ldrb	r3, [r7, #24]
   10d1c:	73fb      	strb	r3, [r7, #15]
	 cmd |= selftest << 4;
   10d1e:	787b      	ldrb	r3, [r7, #1]
   10d20:	011b      	lsls	r3, r3, #4
   10d22:	b25a      	sxtb	r2, r3
   10d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10d28:	4313      	orrs	r3, r2
   10d2a:	b25b      	sxtb	r3, r3
   10d2c:	73fb      	strb	r3, [r7, #15]
	 cmd |= tmode << 5;
   10d2e:	78bb      	ldrb	r3, [r7, #2]
   10d30:	015b      	lsls	r3, r3, #5
   10d32:	b25a      	sxtb	r2, r3
   10d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10d38:	4313      	orrs	r3, r2
   10d3a:	b25b      	sxtb	r3, r3
   10d3c:	73fb      	strb	r3, [r7, #15]
	 cmd |= tflip << 6;                  // TFLIP on
   10d3e:	7f3b      	ldrb	r3, [r7, #28]
   10d40:	019b      	lsls	r3, r3, #6
   10d42:	b25a      	sxtb	r2, r3
   10d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10d48:	4313      	orrs	r3, r2
   10d4a:	b25b      	sxtb	r3, r3
   10d4c:	73fb      	strb	r3, [r7, #15]
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
   10d4e:	7bfb      	ldrb	r3, [r7, #15]
   10d50:	461a      	mov	r2, r3
   10d52:	2108      	movs	r1, #8
   10d54:	6878      	ldr	r0, [r7, #4]
   10d56:	4b06      	ldr	r3, [pc, #24]	; (10d70 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   10d58:	4798      	blx	r3
	 return R_Register (R_TSR);
   10d5a:	2180      	movs	r1, #128	; 0x80
   10d5c:	6878      	ldr	r0, [r7, #4]
   10d5e:	4b05      	ldr	r3, [pc, #20]	; (10d74 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x8c>)
   10d60:	4798      	blx	r3
   10d62:	4603      	mov	r3, r0
	 
	 
 }
   10d64:	4618      	mov	r0, r3
   10d66:	3710      	adds	r7, #16
   10d68:	46bd      	mov	sp, r7
   10d6a:	bd80      	pop	{r7, pc}
   10d6c:	000110c1 	.word	0x000110c1
   10d70:	00011115 	.word	0x00011115
   10d74:	00011189 	.word	0x00011189

00010d78 <_ZN15Holt_3593_Class4openEv>:
 
 void Holt_3593_Class::open(){
   10d78:	b580      	push	{r7, lr}
   10d7a:	b082      	sub	sp, #8
   10d7c:	af00      	add	r7, sp, #0
   10d7e:	6078      	str	r0, [r7, #4]
	 	spi.enable();
   10d80:	687b      	ldr	r3, [r7, #4]
   10d82:	4618      	mov	r0, r3
   10d84:	4b04      	ldr	r3, [pc, #16]	; (10d98 <_ZN15Holt_3593_Class4openEv+0x20>)
   10d86:	4798      	blx	r3
		 SS_Low();
   10d88:	6878      	ldr	r0, [r7, #4]
   10d8a:	4b04      	ldr	r3, [pc, #16]	; (10d9c <_ZN15Holt_3593_Class4openEv+0x24>)
   10d8c:	4798      	blx	r3
 }
   10d8e:	bf00      	nop
   10d90:	3708      	adds	r7, #8
   10d92:	46bd      	mov	sp, r7
   10d94:	bd80      	pop	{r7, pc}
   10d96:	bf00      	nop
   10d98:	00011a1d 	.word	0x00011a1d
   10d9c:	000111d1 	.word	0x000111d1

00010da0 <_ZN15Holt_3593_Class5closeEv>:
  void Holt_3593_Class::close(){
   10da0:	b580      	push	{r7, lr}
   10da2:	b082      	sub	sp, #8
   10da4:	af00      	add	r7, sp, #0
   10da6:	6078      	str	r0, [r7, #4]
	    SS_High();
   10da8:	6878      	ldr	r0, [r7, #4]
   10daa:	4b05      	ldr	r3, [pc, #20]	; (10dc0 <_ZN15Holt_3593_Class5closeEv+0x20>)
   10dac:	4798      	blx	r3
	  spi.disable();
   10dae:	687b      	ldr	r3, [r7, #4]
   10db0:	4618      	mov	r0, r3
   10db2:	4b04      	ldr	r3, [pc, #16]	; (10dc4 <_ZN15Holt_3593_Class5closeEv+0x24>)
   10db4:	4798      	blx	r3
	
  }
   10db6:	bf00      	nop
   10db8:	3708      	adds	r7, #8
   10dba:	46bd      	mov	sp, r7
   10dbc:	bd80      	pop	{r7, pc}
   10dbe:	bf00      	nop
   10dc0:	000111ed 	.word	0x000111ed
   10dc4:	00011ae1 	.word	0x00011ae1

00010dc8 <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
 
// ------------------------------------------------------------------
//  SPI function to load 8 bits of label data
// ------------------------------------------------------------------   
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
   10dc8:	b580      	push	{r7, lr}
   10dca:	b084      	sub	sp, #16
   10dcc:	af00      	add	r7, sp, #0
   10dce:	6078      	str	r0, [r7, #4]
   10dd0:	460b      	mov	r3, r1
   10dd2:	70fb      	strb	r3, [r7, #3]
   10dd4:	4613      	mov	r3, r2
   10dd6:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;    
 // rxbyte = Get_Byte();         // clear SPI status register
  uint8_t	p(txbyte);
   10dd8:	78fb      	ldrb	r3, [r7, #3]
   10dda:	73fb      	strb	r3, [r7, #15]
  Send_Byte(p)    ;   // write Data Register to begin transfer  
   10ddc:	7bfb      	ldrb	r3, [r7, #15]
   10dde:	4619      	mov	r1, r3
   10de0:	6878      	ldr	r0, [r7, #4]
   10de2:	4b0b      	ldr	r3, [pc, #44]	; (10e10 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x48>)
   10de4:	4798      	blx	r3
	  
  if (return_when_done) {  // optional wait for SPIF flag
   10de6:	78bb      	ldrb	r3, [r7, #2]
   10de8:	2b00      	cmp	r3, #0
   10dea:	d00a      	beq.n	10e02 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    while (!spi.isSPIReady());     
   10dec:	687b      	ldr	r3, [r7, #4]
   10dee:	4618      	mov	r0, r3
   10df0:	4b08      	ldr	r3, [pc, #32]	; (10e14 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x4c>)
   10df2:	4798      	blx	r3
   10df4:	4603      	mov	r3, r0
   10df6:	f083 0301 	eor.w	r3, r3, #1
   10dfa:	b2db      	uxtb	r3, r3
   10dfc:	2b00      	cmp	r3, #0
   10dfe:	d000      	beq.n	10e02 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
   10e00:	e7f4      	b.n	10dec <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x24>
  }
  return rxbyte = txbyte;
   10e02:	78fb      	ldrb	r3, [r7, #3]
   10e04:	73bb      	strb	r3, [r7, #14]
   10e06:	7bbb      	ldrb	r3, [r7, #14]
  
}
   10e08:	4618      	mov	r0, r3
   10e0a:	3710      	adds	r7, #16
   10e0c:	46bd      	mov	sp, r7
   10e0e:	bd80      	pop	{r7, pc}
   10e10:	00010ed5 	.word	0x00010ed5
   10e14:	00011b01 	.word	0x00011b01

00010e18 <_ZN15Holt_3593_Class19initReceiver1LabelsEv>:

// ------------------------------------------------------------------
//  Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------                              */
void Holt_3593_Class::initReceiver1Labels(void)
{
   10e18:	b580      	push	{r7, lr}
   10e1a:	b084      	sub	sp, #16
   10e1c:	af00      	add	r7, sp, #0
   10e1e:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
  open();
   10e20:	6878      	ldr	r0, [r7, #4]
   10e22:	4b14      	ldr	r3, [pc, #80]	; (10e74 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x5c>)
   10e24:	4798      	blx	r3

  dummy = txrx8bits_8(0x14,1);  
   10e26:	2201      	movs	r2, #1
   10e28:	2114      	movs	r1, #20
   10e2a:	6878      	ldr	r0, [r7, #4]
   10e2c:	4b12      	ldr	r3, [pc, #72]	; (10e78 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x60>)
   10e2e:	4798      	blx	r3
   10e30:	4603      	mov	r3, r0
   10e32:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   10e34:	231f      	movs	r3, #31
   10e36:	73fb      	strb	r3, [r7, #15]
   10e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10e3c:	2b00      	cmp	r3, #0
   10e3e:	db11      	blt.n	10e64 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_1[i],1);       
   10e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10e44:	4a0d      	ldr	r2, [pc, #52]	; (10e7c <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x64>)
   10e46:	5cd3      	ldrb	r3, [r2, r3]
   10e48:	2201      	movs	r2, #1
   10e4a:	4619      	mov	r1, r3
   10e4c:	6878      	ldr	r0, [r7, #4]
   10e4e:	4b0a      	ldr	r3, [pc, #40]	; (10e78 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x60>)
   10e50:	4798      	blx	r3
   10e52:	4603      	mov	r3, r0
   10e54:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   10e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10e5a:	b2db      	uxtb	r3, r3
   10e5c:	3b01      	subs	r3, #1
   10e5e:	b2db      	uxtb	r3, r3
   10e60:	73fb      	strb	r3, [r7, #15]
   10e62:	e7e9      	b.n	10e38 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x20>
  }    
 	  
	close();
   10e64:	6878      	ldr	r0, [r7, #4]
   10e66:	4b06      	ldr	r3, [pc, #24]	; (10e80 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x68>)
   10e68:	4798      	blx	r3
}
   10e6a:	bf00      	nop
   10e6c:	3710      	adds	r7, #16
   10e6e:	46bd      	mov	sp, r7
   10e70:	bd80      	pop	{r7, pc}
   10e72:	bf00      	nop
   10e74:	00010d79 	.word	0x00010d79
   10e78:	00010dc9 	.word	0x00010dc9
   10e7c:	20000178 	.word	0x20000178
   10e80:	00010da1 	.word	0x00010da1

00010e84 <_ZN15Holt_3593_Class8FlipByteEh>:
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
}

unsigned char Holt_3593_Class::FlipByte(unsigned char byte){
   10e84:	b480      	push	{r7}
   10e86:	b085      	sub	sp, #20
   10e88:	af00      	add	r7, sp, #0
   10e8a:	6078      	str	r0, [r7, #4]
   10e8c:	460b      	mov	r3, r1
   10e8e:	70fb      	strb	r3, [r7, #3]
	unsigned char rev=0;
   10e90:	2300      	movs	r3, #0
   10e92:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   10e94:	2300      	movs	r3, #0
   10e96:	60bb      	str	r3, [r7, #8]
   10e98:	68bb      	ldr	r3, [r7, #8]
   10e9a:	2b07      	cmp	r3, #7
   10e9c:	dc13      	bgt.n	10ec6 <_ZN15Holt_3593_Class8FlipByteEh+0x42>
	{
		rev=rev<<1;
   10e9e:	7bfb      	ldrb	r3, [r7, #15]
   10ea0:	005b      	lsls	r3, r3, #1
   10ea2:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   10ea4:	78fa      	ldrb	r2, [r7, #3]
   10ea6:	68bb      	ldr	r3, [r7, #8]
   10ea8:	fa42 f303 	asr.w	r3, r2, r3
   10eac:	b25b      	sxtb	r3, r3
   10eae:	f003 0301 	and.w	r3, r3, #1
   10eb2:	b25a      	sxtb	r2, r3
   10eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10eb8:	4313      	orrs	r3, r2
   10eba:	b25b      	sxtb	r3, r3
   10ebc:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   10ebe:	68bb      	ldr	r3, [r7, #8]
   10ec0:	3301      	adds	r3, #1
   10ec2:	60bb      	str	r3, [r7, #8]
   10ec4:	e7e8      	b.n	10e98 <_ZN15Holt_3593_Class8FlipByteEh+0x14>
	}
	return rev;
   10ec6:	7bfb      	ldrb	r3, [r7, #15]
}
   10ec8:	4618      	mov	r0, r3
   10eca:	3714      	adds	r7, #20
   10ecc:	46bd      	mov	sp, r7
   10ece:	bc80      	pop	{r7}
   10ed0:	4770      	bx	lr
	...

00010ed4 <_ZN15Holt_3593_Class9Send_ByteEh>:

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
   10ed4:	b580      	push	{r7, lr}
   10ed6:	b082      	sub	sp, #8
   10ed8:	af00      	add	r7, sp, #0
   10eda:	6078      	str	r0, [r7, #4]
   10edc:	460b      	mov	r3, r1
   10ede:	70fb      	strb	r3, [r7, #3]
	while (!spi.isSPIReady()); 
   10ee0:	687b      	ldr	r3, [r7, #4]
   10ee2:	4618      	mov	r0, r3
   10ee4:	4b0f      	ldr	r3, [pc, #60]	; (10f24 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   10ee6:	4798      	blx	r3
   10ee8:	4603      	mov	r3, r0
   10eea:	f083 0301 	eor.w	r3, r3, #1
   10eee:	b2db      	uxtb	r3, r3
   10ef0:	2b00      	cmp	r3, #0
   10ef2:	d000      	beq.n	10ef6 <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
   10ef4:	e7f4      	b.n	10ee0 <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi.write(&byte,1);
   10ef6:	687b      	ldr	r3, [r7, #4]
   10ef8:	1cf9      	adds	r1, r7, #3
   10efa:	2201      	movs	r2, #1
   10efc:	4618      	mov	r0, r3
   10efe:	4b0a      	ldr	r3, [pc, #40]	; (10f28 <_ZN15Holt_3593_Class9Send_ByteEh+0x54>)
   10f00:	4798      	blx	r3
	while (!spi.isSPIReady());  
   10f02:	687b      	ldr	r3, [r7, #4]
   10f04:	4618      	mov	r0, r3
   10f06:	4b07      	ldr	r3, [pc, #28]	; (10f24 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   10f08:	4798      	blx	r3
   10f0a:	4603      	mov	r3, r0
   10f0c:	f083 0301 	eor.w	r3, r3, #1
   10f10:	b2db      	uxtb	r3, r3
   10f12:	2b00      	cmp	r3, #0
   10f14:	d000      	beq.n	10f18 <_ZN15Holt_3593_Class9Send_ByteEh+0x44>
   10f16:	e7f4      	b.n	10f02 <_ZN15Holt_3593_Class9Send_ByteEh+0x2e>
	return byte;
   10f18:	78fb      	ldrb	r3, [r7, #3]
}
   10f1a:	4618      	mov	r0, r3
   10f1c:	3708      	adds	r7, #8
   10f1e:	46bd      	mov	sp, r7
   10f20:	bd80      	pop	{r7, pc}
   10f22:	bf00      	nop
   10f24:	00011b01 	.word	0x00011b01
   10f28:	00011a59 	.word	0x00011a59

00010f2c <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
   10f2c:	b580      	push	{r7, lr}
   10f2e:	b084      	sub	sp, #16
   10f30:	af00      	add	r7, sp, #0
   10f32:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	
	while (!spi.isSPIReady());
   10f34:	687b      	ldr	r3, [r7, #4]
   10f36:	4618      	mov	r0, r3
   10f38:	4b0f      	ldr	r3, [pc, #60]	; (10f78 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   10f3a:	4798      	blx	r3
   10f3c:	4603      	mov	r3, r0
   10f3e:	f083 0301 	eor.w	r3, r3, #1
   10f42:	b2db      	uxtb	r3, r3
   10f44:	2b00      	cmp	r3, #0
   10f46:	d000      	beq.n	10f4a <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>
   10f48:	e7f4      	b.n	10f34 <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi.read(&byte,1);
   10f4a:	687b      	ldr	r3, [r7, #4]
   10f4c:	f107 010f 	add.w	r1, r7, #15
   10f50:	2201      	movs	r2, #1
   10f52:	4618      	mov	r0, r3
   10f54:	4b09      	ldr	r3, [pc, #36]	; (10f7c <_ZN15Holt_3593_Class8Get_ByteEv+0x50>)
   10f56:	4798      	blx	r3
	while (!spi.isSPIReady());
   10f58:	687b      	ldr	r3, [r7, #4]
   10f5a:	4618      	mov	r0, r3
   10f5c:	4b06      	ldr	r3, [pc, #24]	; (10f78 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   10f5e:	4798      	blx	r3
   10f60:	4603      	mov	r3, r0
   10f62:	f083 0301 	eor.w	r3, r3, #1
   10f66:	b2db      	uxtb	r3, r3
   10f68:	2b00      	cmp	r3, #0
   10f6a:	d000      	beq.n	10f6e <_ZN15Holt_3593_Class8Get_ByteEv+0x42>
   10f6c:	e7f4      	b.n	10f58 <_ZN15Holt_3593_Class8Get_ByteEv+0x2c>


	
	return byte;
   10f6e:	7bfb      	ldrb	r3, [r7, #15]
}	
   10f70:	4618      	mov	r0, r3
   10f72:	3710      	adds	r7, #16
   10f74:	46bd      	mov	sp, r7
   10f76:	bd80      	pop	{r7, pc}
   10f78:	00011b01 	.word	0x00011b01
   10f7c:	00011a9d 	.word	0x00011a9d

00010f80 <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
   10f80:	b580      	push	{r7, lr}
   10f82:	b084      	sub	sp, #16
   10f84:	af00      	add	r7, sp, #0
   10f86:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
   10f88:	6878      	ldr	r0, [r7, #4]
   10f8a:	4b14      	ldr	r3, [pc, #80]	; (10fdc <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x5c>)
   10f8c:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
   10f8e:	2201      	movs	r2, #1
   10f90:	2128      	movs	r1, #40	; 0x28
   10f92:	6878      	ldr	r0, [r7, #4]
   10f94:	4b12      	ldr	r3, [pc, #72]	; (10fe0 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   10f96:	4798      	blx	r3
   10f98:	4603      	mov	r3, r0
   10f9a:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   10f9c:	231f      	movs	r3, #31
   10f9e:	73fb      	strb	r3, [r7, #15]
   10fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10fa4:	2b00      	cmp	r3, #0
   10fa6:	db11      	blt.n	10fcc <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
   10fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10fac:	4a0d      	ldr	r2, [pc, #52]	; (10fe4 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x64>)
   10fae:	5cd3      	ldrb	r3, [r2, r3]
   10fb0:	2201      	movs	r2, #1
   10fb2:	4619      	mov	r1, r3
   10fb4:	6878      	ldr	r0, [r7, #4]
   10fb6:	4b0a      	ldr	r3, [pc, #40]	; (10fe0 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   10fb8:	4798      	blx	r3
   10fba:	4603      	mov	r3, r0
   10fbc:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   10fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10fc2:	b2db      	uxtb	r3, r3
   10fc4:	3b01      	subs	r3, #1
   10fc6:	b2db      	uxtb	r3, r3
   10fc8:	73fb      	strb	r3, [r7, #15]
   10fca:	e7e9      	b.n	10fa0 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x20>
  }    
 	  
	close();
   10fcc:	6878      	ldr	r0, [r7, #4]
   10fce:	4b06      	ldr	r3, [pc, #24]	; (10fe8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x68>)
   10fd0:	4798      	blx	r3
}
   10fd2:	bf00      	nop
   10fd4:	3710      	adds	r7, #16
   10fd6:	46bd      	mov	sp, r7
   10fd8:	bd80      	pop	{r7, pc}
   10fda:	bf00      	nop
   10fdc:	00010d79 	.word	0x00010d79
   10fe0:	00010dc9 	.word	0x00010dc9
   10fe4:	20002a30 	.word	0x20002a30
   10fe8:	00010da1 	.word	0x00010da1

00010fec <_ZN15Holt_3593_Class13MultiByteReadEhhPh>:
//          count=number of bytes to read
//
// Output:  *passedArray = pointer to the array that gets loaded
// ------------------------------------------------------
void Holt_3593_Class::MultiByteRead(uint8_t ReadCommand, uint8_t count, unsigned char *passedArray)
{
   10fec:	b580      	push	{r7, lr}
   10fee:	b086      	sub	sp, #24
   10ff0:	af00      	add	r7, sp, #0
   10ff2:	60f8      	str	r0, [r7, #12]
   10ff4:	607b      	str	r3, [r7, #4]
   10ff6:	460b      	mov	r3, r1
   10ff8:	72fb      	strb	r3, [r7, #11]
   10ffa:	4613      	mov	r3, r2
   10ffc:	72bb      	strb	r3, [r7, #10]
   uint8_t dummy, ByteCount;
   open();
   10ffe:	68f8      	ldr	r0, [r7, #12]
   11000:	4b16      	ldr	r3, [pc, #88]	; (1105c <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x70>)
   11002:	4798      	blx	r3
   //dummy = Get_Byte();                  // clear SPI status register    
   Send_Byte(ReadCommand);
   11004:	7afb      	ldrb	r3, [r7, #11]
   11006:	4619      	mov	r1, r3
   11008:	68f8      	ldr	r0, [r7, #12]
   1100a:	4b15      	ldr	r3, [pc, #84]	; (11060 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x74>)
   1100c:	4798      	blx	r3
     
   while (!spi.isSPIReady());            // wait for SPIF flag assertion    
   1100e:	68fb      	ldr	r3, [r7, #12]
   11010:	4618      	mov	r0, r3
   11012:	4b14      	ldr	r3, [pc, #80]	; (11064 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x78>)
   11014:	4798      	blx	r3
   11016:	4603      	mov	r3, r0
   11018:	f083 0301 	eor.w	r3, r3, #1
   1101c:	b2db      	uxtb	r3, r3
   1101e:	2b00      	cmp	r3, #0
   11020:	d000      	beq.n	11024 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x38>
   11022:	e7f4      	b.n	1100e <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x22>
  // dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   11024:	2300      	movs	r3, #0
   11026:	75fb      	strb	r3, [r7, #23]
   11028:	7dfa      	ldrb	r2, [r7, #23]
   1102a:	7abb      	ldrb	r3, [r7, #10]
   1102c:	429a      	cmp	r2, r3
   1102e:	da0d      	bge.n	1104c <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x60>
      dummy =Get_Byte(); 
   11030:	68f8      	ldr	r0, [r7, #12]
   11032:	4b0d      	ldr	r3, [pc, #52]	; (11068 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x7c>)
   11034:	4798      	blx	r3
   11036:	4603      	mov	r3, r0
   11038:	75bb      	strb	r3, [r7, #22]
      passedArray[ByteCount] = dummy; 
   1103a:	7dfb      	ldrb	r3, [r7, #23]
   1103c:	687a      	ldr	r2, [r7, #4]
   1103e:	4413      	add	r3, r2
   11040:	7dba      	ldrb	r2, [r7, #22]
   11042:	701a      	strb	r2, [r3, #0]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   11044:	7dfb      	ldrb	r3, [r7, #23]
   11046:	3301      	adds	r3, #1
   11048:	75fb      	strb	r3, [r7, #23]
   1104a:	e7ed      	b.n	11028 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x3c>
     }

  close();
   1104c:	68f8      	ldr	r0, [r7, #12]
   1104e:	4b07      	ldr	r3, [pc, #28]	; (1106c <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x80>)
   11050:	4798      	blx	r3
  
}
   11052:	bf00      	nop
   11054:	3718      	adds	r7, #24
   11056:	46bd      	mov	sp, r7
   11058:	bd80      	pop	{r7, pc}
   1105a:	bf00      	nop
   1105c:	00010d79 	.word	0x00010d79
   11060:	00010ed5 	.word	0x00010ed5
   11064:	00011b01 	.word	0x00011b01
   11068:	00010f2d 	.word	0x00010f2d
   1106c:	00010da1 	.word	0x00010da1

00011070 <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
   11070:	b580      	push	{r7, lr}
   11072:	b084      	sub	sp, #16
   11074:	af00      	add	r7, sp, #0
   11076:	6078      	str	r0, [r7, #4]
   11078:	460b      	mov	r3, r1
   1107a:	70fb      	strb	r3, [r7, #3]
   1107c:	4613      	mov	r3, r2
   1107e:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
   11080:	78fb      	ldrb	r3, [r7, #3]
   11082:	73fb      	strb	r3, [r7, #15]
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
   11084:	7bfb      	ldrb	r3, [r7, #15]
   11086:	4619      	mov	r1, r3
   11088:	6878      	ldr	r0, [r7, #4]
   1108a:	4b0b      	ldr	r3, [pc, #44]	; (110b8 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x48>)
   1108c:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
   1108e:	78bb      	ldrb	r3, [r7, #2]
   11090:	2b00      	cmp	r3, #0
   11092:	d00a      	beq.n	110aa <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
		while (!spi.isSPIReady());      
   11094:	687b      	ldr	r3, [r7, #4]
   11096:	4618      	mov	r0, r3
   11098:	4b08      	ldr	r3, [pc, #32]	; (110bc <_ZN15Holt_3593_Class9txrx8bitsEhh+0x4c>)
   1109a:	4798      	blx	r3
   1109c:	4603      	mov	r3, r0
   1109e:	f083 0301 	eor.w	r3, r3, #1
   110a2:	b2db      	uxtb	r3, r3
   110a4:	2b00      	cmp	r3, #0
   110a6:	d000      	beq.n	110aa <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
   110a8:	e7f4      	b.n	11094 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x24>
    }

  rxbyte = txbyte;  // get received data byte from Data Register
   110aa:	78fb      	ldrb	r3, [r7, #3]
   110ac:	73bb      	strb	r3, [r7, #14]

  return rxbyte;
   110ae:	7bbb      	ldrb	r3, [r7, #14]
  
 }
   110b0:	4618      	mov	r0, r3
   110b2:	3710      	adds	r7, #16
   110b4:	46bd      	mov	sp, r7
   110b6:	bd80      	pop	{r7, pc}
   110b8:	00010ed5 	.word	0x00010ed5
   110bc:	00011b01 	.word	0x00011b01

000110c0 <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
   110c0:	b580      	push	{r7, lr}
   110c2:	b084      	sub	sp, #16
   110c4:	af00      	add	r7, sp, #0
   110c6:	6078      	str	r0, [r7, #4]
   110c8:	460b      	mov	r3, r1
   110ca:	70fb      	strb	r3, [r7, #3]

 	  uint8_t p(cmd); 
   110cc:	78fb      	ldrb	r3, [r7, #3]
   110ce:	73fb      	strb	r3, [r7, #15]
  open();
   110d0:	6878      	ldr	r0, [r7, #4]
   110d2:	4b0c      	ldr	r3, [pc, #48]	; (11104 <_ZN15Holt_3593_Class9W_CommandEc+0x44>)
   110d4:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
   110d6:	7bfb      	ldrb	r3, [r7, #15]
   110d8:	4619      	mov	r1, r3
   110da:	6878      	ldr	r0, [r7, #4]
   110dc:	4b0a      	ldr	r3, [pc, #40]	; (11108 <_ZN15Holt_3593_Class9W_CommandEc+0x48>)
   110de:	4798      	blx	r3
  while (!spi.isSPIReady()) {;}      // Wait for data to come back in.
   110e0:	687b      	ldr	r3, [r7, #4]
   110e2:	4618      	mov	r0, r3
   110e4:	4b09      	ldr	r3, [pc, #36]	; (1110c <_ZN15Holt_3593_Class9W_CommandEc+0x4c>)
   110e6:	4798      	blx	r3
   110e8:	4603      	mov	r3, r0
   110ea:	f083 0301 	eor.w	r3, r3, #1
   110ee:	b2db      	uxtb	r3, r3
   110f0:	2b00      	cmp	r3, #0
   110f2:	d000      	beq.n	110f6 <_ZN15Holt_3593_Class9W_CommandEc+0x36>
   110f4:	e7f4      	b.n	110e0 <_ZN15Holt_3593_Class9W_CommandEc+0x20>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
   110f6:	6878      	ldr	r0, [r7, #4]
   110f8:	4b05      	ldr	r3, [pc, #20]	; (11110 <_ZN15Holt_3593_Class9W_CommandEc+0x50>)
   110fa:	4798      	blx	r3
}
   110fc:	bf00      	nop
   110fe:	3710      	adds	r7, #16
   11100:	46bd      	mov	sp, r7
   11102:	bd80      	pop	{r7, pc}
   11104:	00010d79 	.word	0x00010d79
   11108:	00010ed5 	.word	0x00010ed5
   1110c:	00011b01 	.word	0x00011b01
   11110:	00010da1 	.word	0x00010da1

00011114 <_ZN15Holt_3593_Class14W_CommandValueEhh>:

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
   11114:	b580      	push	{r7, lr}
   11116:	b082      	sub	sp, #8
   11118:	af00      	add	r7, sp, #0
   1111a:	6078      	str	r0, [r7, #4]
   1111c:	460b      	mov	r3, r1
   1111e:	70fb      	strb	r3, [r7, #3]
   11120:	4613      	mov	r3, r2
   11122:	70bb      	strb	r3, [r7, #2]

  	
  open();                             // assert the SPI0 /SS strobe
   11124:	6878      	ldr	r0, [r7, #4]
   11126:	4b14      	ldr	r3, [pc, #80]	; (11178 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x64>)
   11128:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
   1112a:	78fb      	ldrb	r3, [r7, #3]
   1112c:	4619      	mov	r1, r3
   1112e:	6878      	ldr	r0, [r7, #4]
   11130:	4b12      	ldr	r3, [pc, #72]	; (1117c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   11132:	4798      	blx	r3
  while (!spi.isSPIReady());    
   11134:	687b      	ldr	r3, [r7, #4]
   11136:	4618      	mov	r0, r3
   11138:	4b11      	ldr	r3, [pc, #68]	; (11180 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   1113a:	4798      	blx	r3
   1113c:	4603      	mov	r3, r0
   1113e:	f083 0301 	eor.w	r3, r3, #1
   11142:	b2db      	uxtb	r3, r3
   11144:	2b00      	cmp	r3, #0
   11146:	d000      	beq.n	1114a <_ZN15Holt_3593_Class14W_CommandValueEhh+0x36>
   11148:	e7f4      	b.n	11134 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x20>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
   1114a:	78bb      	ldrb	r3, [r7, #2]
   1114c:	4619      	mov	r1, r3
   1114e:	6878      	ldr	r0, [r7, #4]
   11150:	4b0a      	ldr	r3, [pc, #40]	; (1117c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   11152:	4798      	blx	r3
  while (!spi.isSPIReady());    
   11154:	687b      	ldr	r3, [r7, #4]
   11156:	4618      	mov	r0, r3
   11158:	4b09      	ldr	r3, [pc, #36]	; (11180 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   1115a:	4798      	blx	r3
   1115c:	4603      	mov	r3, r0
   1115e:	f083 0301 	eor.w	r3, r3, #1
   11162:	b2db      	uxtb	r3, r3
   11164:	2b00      	cmp	r3, #0
   11166:	d000      	beq.n	1116a <_ZN15Holt_3593_Class14W_CommandValueEhh+0x56>
   11168:	e7f4      	b.n	11154 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
   1116a:	6878      	ldr	r0, [r7, #4]
   1116c:	4b05      	ldr	r3, [pc, #20]	; (11184 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x70>)
   1116e:	4798      	blx	r3
}
   11170:	bf00      	nop
   11172:	3708      	adds	r7, #8
   11174:	46bd      	mov	sp, r7
   11176:	bd80      	pop	{r7, pc}
   11178:	00010d79 	.word	0x00010d79
   1117c:	00010ed5 	.word	0x00010ed5
   11180:	00011b01 	.word	0x00011b01
   11184:	00010da1 	.word	0x00010da1

00011188 <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
   11188:	b580      	push	{r7, lr}
   1118a:	b084      	sub	sp, #16
   1118c:	af00      	add	r7, sp, #0
   1118e:	6078      	str	r0, [r7, #4]
   11190:	460b      	mov	r3, r1
   11192:	70fb      	strb	r3, [r7, #3]
  unsigned char R_Reg;
	
  open();
   11194:	6878      	ldr	r0, [r7, #4]
   11196:	4b0a      	ldr	r3, [pc, #40]	; (111c0 <_ZN15Holt_3593_Class10R_RegisterEc+0x38>)
   11198:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
   1119a:	78fb      	ldrb	r3, [r7, #3]
   1119c:	2201      	movs	r2, #1
   1119e:	4619      	mov	r1, r3
   111a0:	6878      	ldr	r0, [r7, #4]
   111a2:	4b08      	ldr	r3, [pc, #32]	; (111c4 <_ZN15Holt_3593_Class10R_RegisterEc+0x3c>)
   111a4:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
   111a6:	6878      	ldr	r0, [r7, #4]
   111a8:	4b07      	ldr	r3, [pc, #28]	; (111c8 <_ZN15Holt_3593_Class10R_RegisterEc+0x40>)
   111aa:	4798      	blx	r3
   111ac:	4603      	mov	r3, r0
   111ae:	73fb      	strb	r3, [r7, #15]
         
  close();
   111b0:	6878      	ldr	r0, [r7, #4]
   111b2:	4b06      	ldr	r3, [pc, #24]	; (111cc <_ZN15Holt_3593_Class10R_RegisterEc+0x44>)
   111b4:	4798      	blx	r3
  return R_Reg;
   111b6:	7bfb      	ldrb	r3, [r7, #15]
}
   111b8:	4618      	mov	r0, r3
   111ba:	3710      	adds	r7, #16
   111bc:	46bd      	mov	sp, r7
   111be:	bd80      	pop	{r7, pc}
   111c0:	00010d79 	.word	0x00010d79
   111c4:	00011071 	.word	0x00011071
   111c8:	00010f2d 	.word	0x00010f2d
   111cc:	00010da1 	.word	0x00010da1

000111d0 <_ZN15Holt_3593_Class6SS_LowEv>:
  //--------------------------------------------    
	open();                             // assert the SPI0 /SS strobe
  } 

void Holt_3593_Class::SS_Low(void)
{
   111d0:	b580      	push	{r7, lr}
   111d2:	b082      	sub	sp, #8
   111d4:	af00      	add	r7, sp, #0
   111d6:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);
   111d8:	2100      	movs	r1, #0
   111da:	204e      	movs	r0, #78	; 0x4e
   111dc:	4b02      	ldr	r3, [pc, #8]	; (111e8 <_ZN15Holt_3593_Class6SS_LowEv+0x18>)
   111de:	4798      	blx	r3
}
   111e0:	bf00      	nop
   111e2:	3708      	adds	r7, #8
   111e4:	46bd      	mov	sp, r7
   111e6:	bd80      	pop	{r7, pc}
   111e8:	00010b8d 	.word	0x00010b8d

000111ec <_ZN15Holt_3593_Class7SS_HighEv>:
void Holt_3593_Class::SS_High(void)
{
   111ec:	b580      	push	{r7, lr}
   111ee:	b082      	sub	sp, #8
   111f0:	af00      	add	r7, sp, #0
   111f2:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
   111f4:	2101      	movs	r1, #1
   111f6:	204e      	movs	r0, #78	; 0x4e
   111f8:	4b02      	ldr	r3, [pc, #8]	; (11204 <_ZN15Holt_3593_Class7SS_HighEv+0x18>)
   111fa:	4798      	blx	r3
}
   111fc:	bf00      	nop
   111fe:	3708      	adds	r7, #8
   11200:	46bd      	mov	sp, r7
   11202:	bd80      	pop	{r7, pc}
   11204:	00010b8d 	.word	0x00010b8d

00011208 <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
   11208:	b480      	push	{r7}
   1120a:	b083      	sub	sp, #12
   1120c:	af00      	add	r7, sp, #0
   1120e:	6078      	str	r0, [r7, #4]
   11210:	6039      	str	r1, [r7, #0]
   11212:	683b      	ldr	r3, [r7, #0]
   11214:	681a      	ldr	r2, [r3, #0]
   11216:	687b      	ldr	r3, [r7, #4]
   11218:	601a      	str	r2, [r3, #0]
   1121a:	687b      	ldr	r3, [r7, #4]
   1121c:	681b      	ldr	r3, [r3, #0]
   1121e:	3b14      	subs	r3, #20
   11220:	681b      	ldr	r3, [r3, #0]
   11222:	461a      	mov	r2, r3
   11224:	687b      	ldr	r3, [r7, #4]
   11226:	4413      	add	r3, r2
   11228:	683a      	ldr	r2, [r7, #0]
   1122a:	6852      	ldr	r2, [r2, #4]
   1122c:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
   1122e:	687b      	ldr	r3, [r7, #4]
   11230:	4618      	mov	r0, r3
   11232:	370c      	adds	r7, #12
   11234:	46bd      	mov	sp, r7
   11236:	bc80      	pop	{r7}
   11238:	4770      	bx	lr

0001123a <_ZN14Protocol_Class13GetActiveLineEv>:

uint8_t	Protocol_Class::GetActiveLine(void){
   1123a:	b590      	push	{r4, r7, lr}
   1123c:	b085      	sub	sp, #20
   1123e:	af00      	add	r7, sp, #0
   11240:	6078      	str	r0, [r7, #4]
	uint32_t	data=ReadBufferLabel(Label2Byte(270));
   11242:	687b      	ldr	r3, [r7, #4]
   11244:	681b      	ldr	r3, [r3, #0]
   11246:	3310      	adds	r3, #16
   11248:	681c      	ldr	r4, [r3, #0]
   1124a:	687b      	ldr	r3, [r7, #4]
   1124c:	681b      	ldr	r3, [r3, #0]
   1124e:	3b14      	subs	r3, #20
   11250:	681b      	ldr	r3, [r3, #0]
   11252:	461a      	mov	r2, r3
   11254:	687b      	ldr	r3, [r7, #4]
   11256:	4413      	add	r3, r2
   11258:	681b      	ldr	r3, [r3, #0]
   1125a:	3304      	adds	r3, #4
   1125c:	681b      	ldr	r3, [r3, #0]
   1125e:	687a      	ldr	r2, [r7, #4]
   11260:	6812      	ldr	r2, [r2, #0]
   11262:	3a14      	subs	r2, #20
   11264:	6812      	ldr	r2, [r2, #0]
   11266:	4611      	mov	r1, r2
   11268:	687a      	ldr	r2, [r7, #4]
   1126a:	440a      	add	r2, r1
   1126c:	f44f 7187 	mov.w	r1, #270	; 0x10e
   11270:	4610      	mov	r0, r2
   11272:	4798      	blx	r3
   11274:	4603      	mov	r3, r0
   11276:	4619      	mov	r1, r3
   11278:	6878      	ldr	r0, [r7, #4]
   1127a:	47a0      	blx	r4
   1127c:	60f8      	str	r0, [r7, #12]
	uint8_t	key=uint8_t((data&0xc0000)>>18);
   1127e:	68fb      	ldr	r3, [r7, #12]
   11280:	0c9b      	lsrs	r3, r3, #18
   11282:	b2db      	uxtb	r3, r3
   11284:	f003 0303 	and.w	r3, r3, #3
   11288:	72fb      	strb	r3, [r7, #11]

	return key;
   1128a:	7afb      	ldrb	r3, [r7, #11]
}
   1128c:	4618      	mov	r0, r3
   1128e:	3714      	adds	r7, #20
   11290:	46bd      	mov	sp, r7
   11292:	bd90      	pop	{r4, r7, pc}

00011294 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   11294:	b480      	push	{r7}
   11296:	b083      	sub	sp, #12
   11298:	af00      	add	r7, sp, #0
   1129a:	6078      	str	r0, [r7, #4]
    return (void *)0;
   1129c:	2300      	movs	r3, #0
	}
   1129e:	4618      	mov	r0, r3
   112a0:	370c      	adds	r7, #12
   112a2:	46bd      	mov	sp, r7
   112a4:	bc80      	pop	{r7}
   112a6:	4770      	bx	lr

000112a8 <free>:
//............................................................................
extern "C" void free(void *)
	{
   112a8:	b480      	push	{r7}
   112aa:	b083      	sub	sp, #12
   112ac:	af00      	add	r7, sp, #0
   112ae:	6078      	str	r0, [r7, #4]
	}
   112b0:	bf00      	nop
   112b2:	370c      	adds	r7, #12
   112b4:	46bd      	mov	sp, r7
   112b6:	bc80      	pop	{r7}
   112b8:	4770      	bx	lr

000112ba <_sbrk>:

extern "C" void *_sbrk (ptrdiff_t)
	{
   112ba:	b480      	push	{r7}
   112bc:	b083      	sub	sp, #12
   112be:	af00      	add	r7, sp, #0
   112c0:	6078      	str	r0, [r7, #4]
    return (void *)0;
   112c2:	2300      	movs	r3, #0
	}
   112c4:	4618      	mov	r0, r3
   112c6:	370c      	adds	r7, #12
   112c8:	46bd      	mov	sp, r7
   112ca:	bc80      	pop	{r7}
   112cc:	4770      	bx	lr

000112ce <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   112ce:	b480      	push	{r7}
   112d0:	af00      	add	r7, sp, #0
		}
   112d2:	bf00      	nop
   112d4:	46bd      	mov	sp, r7
   112d6:	bc80      	pop	{r7}
   112d8:	4770      	bx	lr
	...

000112dc <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
   112dc:	b580      	push	{r7, lr}
   112de:	b082      	sub	sp, #8
   112e0:	af00      	add	r7, sp, #0
   112e2:	6078      	str	r0, [r7, #4]
	free(p);
   112e4:	6878      	ldr	r0, [r7, #4]
   112e6:	4b03      	ldr	r3, [pc, #12]	; (112f4 <_ZdlPv+0x18>)
   112e8:	4798      	blx	r3
	}
   112ea:	bf00      	nop
   112ec:	3708      	adds	r7, #8
   112ee:	46bd      	mov	sp, r7
   112f0:	bd80      	pop	{r7, pc}
   112f2:	bf00      	nop
   112f4:	000112a9 	.word	0x000112a9

000112f8 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
   112f8:	b480      	push	{r7}
   112fa:	b083      	sub	sp, #12
   112fc:	af00      	add	r7, sp, #0
   112fe:	6078      	str	r0, [r7, #4]
   11300:	687b      	ldr	r3, [r7, #4]
   11302:	4618      	mov	r0, r3
   11304:	370c      	adds	r7, #12
   11306:	46bd      	mov	sp, r7
   11308:	bc80      	pop	{r7}
   1130a:	4770      	bx	lr

0001130c <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
   1130c:	b480      	push	{r7}
   1130e:	b083      	sub	sp, #12
   11310:	af00      	add	r7, sp, #0
   11312:	6078      	str	r0, [r7, #4]
   11314:	687b      	ldr	r3, [r7, #4]
   11316:	4618      	mov	r0, r3
   11318:	370c      	adds	r7, #12
   1131a:	46bd      	mov	sp, r7
   1131c:	bc80      	pop	{r7}
   1131e:	4770      	bx	lr

00011320 <_ZN11Diagnostics12troubleshootEhb>:
#include "diagnostics.h"
#include "CDC_Class.h"


//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
   11320:	b580      	push	{r7, lr}
   11322:	b084      	sub	sp, #16
   11324:	af00      	add	r7, sp, #0
   11326:	6078      	str	r0, [r7, #4]
   11328:	460b      	mov	r3, r1
   1132a:	70fb      	strb	r3, [r7, #3]
   1132c:	4613      	mov	r3, r2
   1132e:	70bb      	strb	r3, [r7, #2]
  bool _printoverride;
  errorcode = _code;
   11330:	687b      	ldr	r3, [r7, #4]
   11332:	78fa      	ldrb	r2, [r7, #3]
   11334:	701a      	strb	r2, [r3, #0]
  _printoverride = true;
#elif defined (RUNDIAGNOSTIC) && defined (ARDUINO_ARCH_AVR)
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
   11336:	78bb      	ldrb	r3, [r7, #2]
   11338:	73fb      	strb	r3, [r7, #15]
#endif
  if (_printoverride) {
   1133a:	7bfb      	ldrb	r3, [r7, #15]
   1133c:	2b00      	cmp	r3, #0
   1133e:	f000 80ba 	beq.w	114b6 <_ZN11Diagnostics12troubleshootEhb+0x196>
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
   11342:	78fb      	ldrb	r3, [r7, #3]
   11344:	2b14      	cmp	r3, #20
   11346:	f200 80a2 	bhi.w	1148e <_ZN11Diagnostics12troubleshootEhb+0x16e>
   1134a:	a201      	add	r2, pc, #4	; (adr r2, 11350 <_ZN11Diagnostics12troubleshootEhb+0x30>)
   1134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11350:	000113a5 	.word	0x000113a5
   11354:	000113b9 	.word	0x000113b9
   11358:	000113c3 	.word	0x000113c3
   1135c:	000113cd 	.word	0x000113cd
   11360:	000113d7 	.word	0x000113d7
   11364:	000113e9 	.word	0x000113e9
   11368:	000113f3 	.word	0x000113f3
   1136c:	00011405 	.word	0x00011405
   11370:	00011417 	.word	0x00011417
   11374:	0001142b 	.word	0x0001142b
   11378:	00011435 	.word	0x00011435
   1137c:	000113af 	.word	0x000113af
   11380:	00011421 	.word	0x00011421
   11384:	0001143f 	.word	0x0001143f
   11388:	00011449 	.word	0x00011449
   1138c:	00011453 	.word	0x00011453
   11390:	0001145d 	.word	0x0001145d
   11394:	00011467 	.word	0x00011467
   11398:	00011471 	.word	0x00011471
   1139c:	0001147b 	.word	0x0001147b
   113a0:	00011485 	.word	0x00011485
      case SUCCESS:
      usb.println(F("Function executed successfully"));
   113a4:	4946      	ldr	r1, [pc, #280]	; (114c0 <_ZN11Diagnostics12troubleshootEhb+0x1a0>)
   113a6:	4847      	ldr	r0, [pc, #284]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113a8:	4b47      	ldr	r3, [pc, #284]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   113aa:	4798      	blx	r3
      break;
   113ac:	e074      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NORESPONSE:
      usb.println(F("Check your wiring. Flash chip is non-responsive."));
   113ae:	4947      	ldr	r1, [pc, #284]	; (114cc <_ZN11Diagnostics12troubleshootEhb+0x1ac>)
   113b0:	4844      	ldr	r0, [pc, #272]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113b2:	4b45      	ldr	r3, [pc, #276]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   113b4:	4798      	blx	r3
      break;
   113b6:	e06f      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CALLBEGIN:
      usb.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
   113b8:	4945      	ldr	r1, [pc, #276]	; (114d0 <_ZN11Diagnostics12troubleshootEhb+0x1b0>)
   113ba:	4842      	ldr	r0, [pc, #264]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113bc:	4b42      	ldr	r3, [pc, #264]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   113be:	4798      	blx	r3
      break;
   113c0:	e06a      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCHIP:
      usb.println(F("Unable to identify chip. Are you sure this chip is supported?"));
   113c2:	4944      	ldr	r1, [pc, #272]	; (114d4 <_ZN11Diagnostics12troubleshootEhb+0x1b4>)
   113c4:	483f      	ldr	r0, [pc, #252]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113c6:	4b40      	ldr	r3, [pc, #256]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   113c8:	4798      	blx	r3
      //usb.println(F("Chip details:"));
      //TODO: Insert a diagnostics subroutine here.
      break;
   113ca:	e065      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCAP:
      usb.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
   113cc:	4942      	ldr	r1, [pc, #264]	; (114d8 <_ZN11Diagnostics12troubleshootEhb+0x1b8>)
   113ce:	483d      	ldr	r0, [pc, #244]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113d0:	4b3d      	ldr	r3, [pc, #244]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   113d2:	4798      	blx	r3
      break;
   113d4:	e060      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPBUSY:
      usb.println(F("Chip is busy."));
   113d6:	4941      	ldr	r1, [pc, #260]	; (114dc <_ZN11Diagnostics12troubleshootEhb+0x1bc>)
   113d8:	483a      	ldr	r0, [pc, #232]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113da:	4b3b      	ldr	r3, [pc, #236]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   113dc:	4798      	blx	r3
      usb.println(F("Make sure all pins have been connected properly"));
   113de:	4940      	ldr	r1, [pc, #256]	; (114e0 <_ZN11Diagnostics12troubleshootEhb+0x1c0>)
   113e0:	4838      	ldr	r0, [pc, #224]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113e2:	4b39      	ldr	r3, [pc, #228]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   113e4:	4798      	blx	r3
      break;
   113e6:	e057      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case OUTOFBOUNDS:
      usb.println(F("Page overflow has been disabled and the address called exceeds the memory"));
   113e8:	493e      	ldr	r1, [pc, #248]	; (114e4 <_ZN11Diagnostics12troubleshootEhb+0x1c4>)
   113ea:	4836      	ldr	r0, [pc, #216]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113ec:	4b36      	ldr	r3, [pc, #216]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   113ee:	4798      	blx	r3
      break;
   113f0:	e052      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CANTENWRITE:
      usb.println(F("Unable to Enable Writing to chip."));
   113f2:	493d      	ldr	r1, [pc, #244]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1c8>)
   113f4:	4833      	ldr	r0, [pc, #204]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113f6:	4b34      	ldr	r3, [pc, #208]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   113f8:	4798      	blx	r3
      usb.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
   113fa:	493c      	ldr	r1, [pc, #240]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1cc>)
   113fc:	4831      	ldr	r0, [pc, #196]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113fe:	4b32      	ldr	r3, [pc, #200]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11400:	4798      	blx	r3
      break;
   11402:	e049      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case PREVWRITTEN:
      usb.println(F("This sector already contains data."));
   11404:	493a      	ldr	r1, [pc, #232]	; (114f0 <_ZN11Diagnostics12troubleshootEhb+0x1d0>)
   11406:	482f      	ldr	r0, [pc, #188]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11408:	4b2f      	ldr	r3, [pc, #188]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1140a:	4798      	blx	r3
      usb.println(F("Please make sure the sectors being written to are erased."));
   1140c:	4939      	ldr	r1, [pc, #228]	; (114f4 <_ZN11Diagnostics12troubleshootEhb+0x1d4>)
   1140e:	482d      	ldr	r0, [pc, #180]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11410:	4b2d      	ldr	r3, [pc, #180]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11412:	4798      	blx	r3
      break;
   11414:	e040      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case LOWRAM:
      usb.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
   11416:	4938      	ldr	r1, [pc, #224]	; (114f8 <_ZN11Diagnostics12troubleshootEhb+0x1d8>)
   11418:	482a      	ldr	r0, [pc, #168]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1141a:	4b2b      	ldr	r3, [pc, #172]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1141c:	4798      	blx	r3
      /*#if defined (ARDUINO_ARCH_SAM)
        usb.print(F("Current Free SRAM: "));
        usb.println(freeRAM());
      #endif*/
      break;
   1141e:	e03b      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNSUPPORTEDFUNC:
      usb.println(F("This function is not supported by the flash memory hardware."));
   11420:	4936      	ldr	r1, [pc, #216]	; (114fc <_ZN11Diagnostics12troubleshootEhb+0x1dc>)
   11422:	4828      	ldr	r0, [pc, #160]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11424:	4b28      	ldr	r3, [pc, #160]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11426:	4798      	blx	r3
      break;
   11428:	e036      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case SYSSUSPEND:
      usb.println(F("Unable to suspend/resume operation."));
   1142a:	4935      	ldr	r1, [pc, #212]	; (11500 <_ZN11Diagnostics12troubleshootEhb+0x1e0>)
   1142c:	4825      	ldr	r0, [pc, #148]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1142e:	4b26      	ldr	r3, [pc, #152]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11430:	4798      	blx	r3
      break;
   11432:	e031      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case ERRORCHKFAIL:
      usb.println(F("Write Function has failed errorcheck."));
   11434:	4933      	ldr	r1, [pc, #204]	; (11504 <_ZN11Diagnostics12troubleshootEhb+0x1e4>)
   11436:	4823      	ldr	r0, [pc, #140]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11438:	4b23      	ldr	r3, [pc, #140]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1143a:	4798      	blx	r3
      break;
   1143c:	e02c      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO4BYTE:
      usb.println(F("Unable to enable 4-byte addressing."));
   1143e:	4932      	ldr	r1, [pc, #200]	; (11508 <_ZN11Diagnostics12troubleshootEhb+0x1e8>)
   11440:	4820      	ldr	r0, [pc, #128]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11442:	4b21      	ldr	r3, [pc, #132]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11444:	4798      	blx	r3
      break;
   11446:	e027      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO3BYTE:
      usb.println(F("Unable to disable 4-byte addressing."));
   11448:	4930      	ldr	r1, [pc, #192]	; (1150c <_ZN11Diagnostics12troubleshootEhb+0x1ec>)
   1144a:	481e      	ldr	r0, [pc, #120]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1144c:	4b1e      	ldr	r3, [pc, #120]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1144e:	4798      	blx	r3
      break;
   11450:	e022      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPISPOWEREDDOWN:
      usb.println(F("The chip is currently powered down."));
   11452:	492f      	ldr	r1, [pc, #188]	; (11510 <_ZN11Diagnostics12troubleshootEhb+0x1f0>)
   11454:	481b      	ldr	r0, [pc, #108]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11456:	4b1c      	ldr	r3, [pc, #112]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11458:	4798      	blx	r3
      break;
   1145a:	e01d      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDP:
      usb.println(F("The Flash chip does not support SFDP."));
   1145c:	492d      	ldr	r1, [pc, #180]	; (11514 <_ZN11Diagnostics12troubleshootEhb+0x1f4>)
   1145e:	4819      	ldr	r0, [pc, #100]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11460:	4b19      	ldr	r3, [pc, #100]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11462:	4798      	blx	r3
      break;
   11464:	e018      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASEPARAM:
      usb.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
   11466:	492c      	ldr	r1, [pc, #176]	; (11518 <_ZN11Diagnostics12troubleshootEhb+0x1f8>)
   11468:	4816      	ldr	r0, [pc, #88]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1146a:	4b17      	ldr	r3, [pc, #92]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1146c:	4798      	blx	r3
      break;
   1146e:	e013      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASETIME:
      usb.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
   11470:	492a      	ldr	r1, [pc, #168]	; (1151c <_ZN11Diagnostics12troubleshootEhb+0x1fc>)
   11472:	4814      	ldr	r0, [pc, #80]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11474:	4b14      	ldr	r3, [pc, #80]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11476:	4798      	blx	r3
      break;
   11478:	e00e      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPPROGRAMTIMEPARAM:
      usb.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
   1147a:	4929      	ldr	r1, [pc, #164]	; (11520 <_ZN11Diagnostics12troubleshootEhb+0x200>)
   1147c:	4811      	ldr	r0, [pc, #68]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1147e:	4b12      	ldr	r3, [pc, #72]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11480:	4798      	blx	r3
      break;
   11482:	e009      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOCHIPSELECTDECLARED:
      usb.println(F("No Chip Select pin defined in the custom SPI Array."));
   11484:	4927      	ldr	r1, [pc, #156]	; (11524 <_ZN11Diagnostics12troubleshootEhb+0x204>)
   11486:	480f      	ldr	r0, [pc, #60]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11488:	4b0f      	ldr	r3, [pc, #60]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1148a:	4798      	blx	r3
      break;
   1148c:	e004      	b.n	11498 <_ZN11Diagnostics12troubleshootEhb+0x178>

      default:
      usb.println(F("Unknown error"));
   1148e:	4926      	ldr	r1, [pc, #152]	; (11528 <_ZN11Diagnostics12troubleshootEhb+0x208>)
   11490:	480c      	ldr	r0, [pc, #48]	; (114c4 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11492:	4b0d      	ldr	r3, [pc, #52]	; (114c8 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11494:	4798      	blx	r3
      break;
   11496:	bf00      	nop
    }
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
   11498:	78fb      	ldrb	r3, [r7, #3]
   1149a:	2b0a      	cmp	r3, #10
   1149c:	d008      	beq.n	114b0 <_ZN11Diagnostics12troubleshootEhb+0x190>
   1149e:	78fb      	ldrb	r3, [r7, #3]
   114a0:	2b06      	cmp	r3, #6
   114a2:	d005      	beq.n	114b0 <_ZN11Diagnostics12troubleshootEhb+0x190>
   114a4:	78fb      	ldrb	r3, [r7, #3]
   114a6:	2b02      	cmp	r3, #2
   114a8:	d002      	beq.n	114b0 <_ZN11Diagnostics12troubleshootEhb+0x190>
   114aa:	78fb      	ldrb	r3, [r7, #3]
   114ac:	2b0b      	cmp	r3, #11
   114ae:	d102      	bne.n	114b6 <_ZN11Diagnostics12troubleshootEhb+0x196>
      _printSupportLink();
   114b0:	6878      	ldr	r0, [r7, #4]
   114b2:	4b1e      	ldr	r3, [pc, #120]	; (1152c <_ZN11Diagnostics12troubleshootEhb+0x20c>)
   114b4:	4798      	blx	r3
    }
  #endif
  }
}
   114b6:	bf00      	nop
   114b8:	3710      	adds	r7, #16
   114ba:	46bd      	mov	sp, r7
   114bc:	bd80      	pop	{r7, pc}
   114be:	bf00      	nop
   114c0:	0001b3f8 	.word	0x0001b3f8
   114c4:	20003e1c 	.word	0x20003e1c
   114c8:	00013951 	.word	0x00013951
   114cc:	0001b418 	.word	0x0001b418
   114d0:	0001b44c 	.word	0x0001b44c
   114d4:	0001b48c 	.word	0x0001b48c
   114d8:	0001b4cc 	.word	0x0001b4cc
   114dc:	0001b564 	.word	0x0001b564
   114e0:	0001b574 	.word	0x0001b574
   114e4:	0001b5a4 	.word	0x0001b5a4
   114e8:	0001b5f0 	.word	0x0001b5f0
   114ec:	0001b614 	.word	0x0001b614
   114f0:	0001b658 	.word	0x0001b658
   114f4:	0001b67c 	.word	0x0001b67c
   114f8:	0001b6b8 	.word	0x0001b6b8
   114fc:	0001b708 	.word	0x0001b708
   11500:	0001b748 	.word	0x0001b748
   11504:	0001b76c 	.word	0x0001b76c
   11508:	0001b794 	.word	0x0001b794
   1150c:	0001b7b8 	.word	0x0001b7b8
   11510:	0001b7e0 	.word	0x0001b7e0
   11514:	0001b804 	.word	0x0001b804
   11518:	0001b82c 	.word	0x0001b82c
   1151c:	0001b878 	.word	0x0001b878
   11520:	0001b8c8 	.word	0x0001b8c8
   11524:	0001b918 	.word	0x0001b918
   11528:	0001b94c 	.word	0x0001b94c
   1152c:	00011531 	.word	0x00011531

00011530 <_ZN11Diagnostics17_printSupportLinkEv>:
		usb.print(F("0"));
	}
	usb.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
   11530:	b580      	push	{r7, lr}
   11532:	b082      	sub	sp, #8
   11534:	af00      	add	r7, sp, #0
   11536:	6078      	str	r0, [r7, #4]
	usb.print(F("If this does not help resolve/clarify this issue, "));
   11538:	4905      	ldr	r1, [pc, #20]	; (11550 <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
   1153a:	4806      	ldr	r0, [pc, #24]	; (11554 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   1153c:	4b06      	ldr	r3, [pc, #24]	; (11558 <_ZN11Diagnostics17_printSupportLinkEv+0x28>)
   1153e:	4798      	blx	r3
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
   11540:	4906      	ldr	r1, [pc, #24]	; (1155c <_ZN11Diagnostics17_printSupportLinkEv+0x2c>)
   11542:	4804      	ldr	r0, [pc, #16]	; (11554 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   11544:	4b06      	ldr	r3, [pc, #24]	; (11560 <_ZN11Diagnostics17_printSupportLinkEv+0x30>)
   11546:	4798      	blx	r3
}
   11548:	bf00      	nop
   1154a:	3708      	adds	r7, #8
   1154c:	46bd      	mov	sp, r7
   1154e:	bd80      	pop	{r7, pc}
   11550:	0001b970 	.word	0x0001b970
   11554:	20003e1c 	.word	0x20003e1c
   11558:	000137d5 	.word	0x000137d5
   1155c:	0001b9a4 	.word	0x0001b9a4
   11560:	00013951 	.word	0x00013951

00011564 <_Z41__static_initialization_and_destruction_0ii>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
   11564:	b580      	push	{r7, lr}
   11566:	b082      	sub	sp, #8
   11568:	af00      	add	r7, sp, #0
   1156a:	6078      	str	r0, [r7, #4]
   1156c:	6039      	str	r1, [r7, #0]
   1156e:	687b      	ldr	r3, [r7, #4]
   11570:	2b01      	cmp	r3, #1
   11572:	d10c      	bne.n	1158e <_Z41__static_initialization_and_destruction_0ii+0x2a>
   11574:	683b      	ldr	r3, [r7, #0]
   11576:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1157a:	4293      	cmp	r3, r2
   1157c:	d107      	bne.n	1158e <_Z41__static_initialization_and_destruction_0ii+0x2a>
   1157e:	4806      	ldr	r0, [pc, #24]	; (11598 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11580:	4b06      	ldr	r3, [pc, #24]	; (1159c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11582:	4798      	blx	r3
   11584:	4a06      	ldr	r2, [pc, #24]	; (115a0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11586:	4907      	ldr	r1, [pc, #28]	; (115a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   11588:	4803      	ldr	r0, [pc, #12]	; (11598 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1158a:	4b07      	ldr	r3, [pc, #28]	; (115a8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1158c:	4798      	blx	r3
   1158e:	bf00      	nop
   11590:	3708      	adds	r7, #8
   11592:	46bd      	mov	sp, r7
   11594:	bd80      	pop	{r7, pc}
   11596:	bf00      	nop
   11598:	20002a58 	.word	0x20002a58
   1159c:	000112f9 	.word	0x000112f9
   115a0:	20000000 	.word	0x20000000
   115a4:	0001130d 	.word	0x0001130d
   115a8:	0001427d 	.word	0x0001427d

000115ac <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
   115ac:	b580      	push	{r7, lr}
   115ae:	af00      	add	r7, sp, #0
   115b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   115b4:	2001      	movs	r0, #1
   115b6:	4b01      	ldr	r3, [pc, #4]	; (115bc <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
   115b8:	4798      	blx	r3
   115ba:	bd80      	pop	{r7, pc}
   115bc:	00011565 	.word	0x00011565

000115c0 <_ZL14EventTimerTaskPK10timer_task>:
#define CHECK_EVENT_PERIOD 50
#endif
const tick_t	forever = 0x7fffffff;
EventHandler_Class	*ptrEventHandlerClass;

static void	EventTimerTask(const struct timer_task *const timer_task){
   115c0:	b480      	push	{r7}
   115c2:	b083      	sub	sp, #12
   115c4:	af00      	add	r7, sp, #0
   115c6:	6078      	str	r0, [r7, #4]
	ptrEventHandlerClass->eventTimeout=true;
   115c8:	4b04      	ldr	r3, [pc, #16]	; (115dc <_ZL14EventTimerTaskPK10timer_task+0x1c>)
   115ca:	681b      	ldr	r3, [r3, #0]
   115cc:	2201      	movs	r2, #1
   115ce:	701a      	strb	r2, [r3, #0]
}
   115d0:	bf00      	nop
   115d2:	370c      	adds	r7, #12
   115d4:	46bd      	mov	sp, r7
   115d6:	bc80      	pop	{r7}
   115d8:	4770      	bx	lr
   115da:	bf00      	nop
   115dc:	20003a64 	.word	0x20003a64

000115e0 <_ZN18EventHandler_ClassC1Ev>:


// default constructor
EventHandler_Class::EventHandler_Class()
   115e0:	b480      	push	{r7}
   115e2:	b083      	sub	sp, #12
   115e4:	af00      	add	r7, sp, #0
   115e6:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   115e8:	4a04      	ldr	r2, [pc, #16]	; (115fc <_ZN18EventHandler_ClassC1Ev+0x1c>)
   115ea:	687b      	ldr	r3, [r7, #4]
   115ec:	6013      	str	r3, [r2, #0]
} //EventHandler_Class
   115ee:	687b      	ldr	r3, [r7, #4]
   115f0:	4618      	mov	r0, r3
   115f2:	370c      	adds	r7, #12
   115f4:	46bd      	mov	sp, r7
   115f6:	bc80      	pop	{r7}
   115f8:	4770      	bx	lr
   115fa:	bf00      	nop
   115fc:	20003a64 	.word	0x20003a64

00011600 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
   11600:	b480      	push	{r7}
   11602:	b083      	sub	sp, #12
   11604:	af00      	add	r7, sp, #0
   11606:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   11608:	4a04      	ldr	r2, [pc, #16]	; (1161c <_ZN18EventHandler_ClassD1Ev+0x1c>)
   1160a:	687b      	ldr	r3, [r7, #4]
   1160c:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
   1160e:	687b      	ldr	r3, [r7, #4]
   11610:	4618      	mov	r0, r3
   11612:	370c      	adds	r7, #12
   11614:	46bd      	mov	sp, r7
   11616:	bc80      	pop	{r7}
   11618:	4770      	bx	lr
   1161a:	bf00      	nop
   1161c:	20003a64 	.word	0x20003a64

00011620 <_ZN18EventHandler_Class12WaitForEventER5eventttl>:
		usb<< "initializeEvents: event #" << i << " == " << (void*)&eventStorage[i] << ", next == " << (void*)eventStorage[i].next << newline;
	}

	#endif
}
bool	EventHandler_Class::WaitForEvent(event& e, uint16 eventClass, uint16 eventType, tick_t timeout){
   11620:	b590      	push	{r4, r7, lr}
   11622:	b087      	sub	sp, #28
   11624:	af02      	add	r7, sp, #8
   11626:	60f8      	str	r0, [r7, #12]
   11628:	60b9      	str	r1, [r7, #8]
   1162a:	4611      	mov	r1, r2
   1162c:	461a      	mov	r2, r3
   1162e:	460b      	mov	r3, r1
   11630:	80fb      	strh	r3, [r7, #6]
   11632:	4613      	mov	r3, r2
   11634:	80bb      	strh	r3, [r7, #4]
	return	WaitForEvent(e,(EventClass)eventClass,(EventType)eventType,timeout);
   11636:	88b9      	ldrh	r1, [r7, #4]
   11638:	88fa      	ldrh	r2, [r7, #6]
   1163a:	6a3b      	ldr	r3, [r7, #32]
   1163c:	9300      	str	r3, [sp, #0]
   1163e:	460b      	mov	r3, r1
   11640:	68b9      	ldr	r1, [r7, #8]
   11642:	68f8      	ldr	r0, [r7, #12]
   11644:	4c03      	ldr	r4, [pc, #12]	; (11654 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x34>)
   11646:	47a0      	blx	r4
   11648:	4603      	mov	r3, r0
}
   1164a:	4618      	mov	r0, r3
   1164c:	3714      	adds	r7, #20
   1164e:	46bd      	mov	sp, r7
   11650:	bd90      	pop	{r4, r7, pc}
   11652:	bf00      	nop
   11654:	00011659 	.word	0x00011659

00011658 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel>:

bool	EventHandler_Class::WaitForEvent(event& e, EventClass eventClass, EventType eventType, tick_t timeout)
{
   11658:	b590      	push	{r4, r7, lr}
   1165a:	b08b      	sub	sp, #44	; 0x2c
   1165c:	af00      	add	r7, sp, #0
   1165e:	60f8      	str	r0, [r7, #12]
   11660:	60b9      	str	r1, [r7, #8]
   11662:	4611      	mov	r1, r2
   11664:	461a      	mov	r2, r3
   11666:	460b      	mov	r3, r1
   11668:	80fb      	strh	r3, [r7, #6]
   1166a:	4613      	mov	r3, r2
   1166c:	80bb      	strh	r3, [r7, #4]
	bool	result(false);
   1166e:	2300      	movs	r3, #0
   11670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	event*	queue;
	event*	queuePrev(NULL);
   11674:	2300      	movs	r3, #0
   11676:	61fb      	str	r3, [r7, #28]
	
	
	e.eventClass = eventClass;
   11678:	68bb      	ldr	r3, [r7, #8]
   1167a:	88fa      	ldrh	r2, [r7, #6]
   1167c:	801a      	strh	r2, [r3, #0]
	e.eventType = eventType;
   1167e:	68bb      	ldr	r3, [r7, #8]
   11680:	88ba      	ldrh	r2, [r7, #4]
   11682:	805a      	strh	r2, [r3, #2]

	tick_t	timeoutTime;
	
	if (timeout != forever)
   11684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11686:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1168a:	4293      	cmp	r3, r2
   1168c:	d007      	beq.n	1169e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x46>
	timeoutTime = (eventTimer.get_ticks() + timeout);
   1168e:	4853      	ldr	r0, [pc, #332]	; (117dc <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11690:	4b53      	ldr	r3, [pc, #332]	; (117e0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   11692:	4798      	blx	r3
   11694:	4602      	mov	r2, r0
   11696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11698:	4413      	add	r3, r2
   1169a:	61bb      	str	r3, [r7, #24]
   1169c:	e002      	b.n	116a4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
	else
	timeoutTime = forever;
   1169e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   116a2:	61bb      	str	r3, [r7, #24]

	while (!result && (eventTimer.get_ticks() < timeoutTime))
   116a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   116a8:	f083 0301 	eor.w	r3, r3, #1
   116ac:	b2db      	uxtb	r3, r3
   116ae:	2b00      	cmp	r3, #0
   116b0:	d008      	beq.n	116c4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6c>
   116b2:	484a      	ldr	r0, [pc, #296]	; (117dc <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   116b4:	4b4a      	ldr	r3, [pc, #296]	; (117e0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   116b6:	4798      	blx	r3
   116b8:	4602      	mov	r2, r0
   116ba:	69bb      	ldr	r3, [r7, #24]
   116bc:	429a      	cmp	r2, r3
   116be:	d201      	bcs.n	116c4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6c>
   116c0:	2301      	movs	r3, #1
   116c2:	e000      	b.n	116c6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6e>
   116c4:	2300      	movs	r3, #0
   116c6:	2b00      	cmp	r3, #0
   116c8:	f000 8081 	beq.w	117ce <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x176>
	{
		if (eventHandler)
   116cc:	68fb      	ldr	r3, [r7, #12]
   116ce:	685b      	ldr	r3, [r3, #4]
   116d0:	2b00      	cmp	r3, #0
   116d2:	d002      	beq.n	116da <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x82>
		{
			eventHandler();
   116d4:	68fb      	ldr	r3, [r7, #12]
   116d6:	685b      	ldr	r3, [r3, #4]
   116d8:	4798      	blx	r3
		}

		queue = (event*)mainThreadEventQueue;
   116da:	4b42      	ldr	r3, [pc, #264]	; (117e4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x18c>)
   116dc:	681b      	ldr	r3, [r3, #0]
   116de:	623b      	str	r3, [r7, #32]

		while (queue)
   116e0:	6a3b      	ldr	r3, [r7, #32]
   116e2:	2b00      	cmp	r3, #0
   116e4:	d041      	beq.n	1176a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x112>
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
		
			#endif
			if (
			((e.eventClass == kAnyEventClass) ||
   116e6:	68bb      	ldr	r3, [r7, #8]
   116e8:	881b      	ldrh	r3, [r3, #0]
			if (
   116ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   116ee:	4293      	cmp	r3, r2
   116f0:	d005      	beq.n	116fe <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xa6>
			(queue->eventClass == e.eventClass))
   116f2:	6a3b      	ldr	r3, [r7, #32]
   116f4:	881a      	ldrh	r2, [r3, #0]
   116f6:	68bb      	ldr	r3, [r7, #8]
   116f8:	881b      	ldrh	r3, [r3, #0]
			((e.eventClass == kAnyEventClass) ||
   116fa:	429a      	cmp	r2, r3
   116fc:	d12f      	bne.n	1175e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x106>
			&&
			((e.eventType == kAnyEventType) ||
   116fe:	68bb      	ldr	r3, [r7, #8]
   11700:	885b      	ldrh	r3, [r3, #2]
			&&
   11702:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11706:	4293      	cmp	r3, r2
   11708:	d005      	beq.n	11716 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xbe>
			(queue->eventType == e.eventType))
   1170a:	6a3b      	ldr	r3, [r7, #32]
   1170c:	885a      	ldrh	r2, [r3, #2]
   1170e:	68bb      	ldr	r3, [r7, #8]
   11710:	885b      	ldrh	r3, [r3, #2]
			((e.eventType == kAnyEventType) ||
   11712:	429a      	cmp	r2, r3
   11714:	d123      	bne.n	1175e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x106>
			)
			{
				if (queuePrev)
   11716:	69fb      	ldr	r3, [r7, #28]
   11718:	2b00      	cmp	r3, #0
   1171a:	d004      	beq.n	11726 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xce>
				{
					queuePrev->next = queue->next;
   1171c:	6a3b      	ldr	r3, [r7, #32]
   1171e:	68da      	ldr	r2, [r3, #12]
   11720:	69fb      	ldr	r3, [r7, #28]
   11722:	60da      	str	r2, [r3, #12]
   11724:	e003      	b.n	1172e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xd6>
				}
				else
				{
					mainThreadEventQueue = queue->next;
   11726:	6a3b      	ldr	r3, [r7, #32]
   11728:	68db      	ldr	r3, [r3, #12]
   1172a:	4a2e      	ldr	r2, [pc, #184]	; (117e4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x18c>)
   1172c:	6013      	str	r3, [r2, #0]
				}
				
				e = *queue;
   1172e:	68ba      	ldr	r2, [r7, #8]
   11730:	6a3b      	ldr	r3, [r7, #32]
   11732:	4614      	mov	r4, r2
   11734:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11736:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				queue->next = eventQueue;
   1173a:	4b2b      	ldr	r3, [pc, #172]	; (117e8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x190>)
   1173c:	681a      	ldr	r2, [r3, #0]
   1173e:	6a3b      	ldr	r3, [r7, #32]
   11740:	60da      	str	r2, [r3, #12]
				eventQueue = queue;
   11742:	4a29      	ldr	r2, [pc, #164]	; (117e8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x190>)
   11744:	6a3b      	ldr	r3, [r7, #32]
   11746:	6013      	str	r3, [r2, #0]
				
				eventsInUse--;
   11748:	68fb      	ldr	r3, [r7, #12]
   1174a:	689b      	ldr	r3, [r3, #8]
   1174c:	1e5a      	subs	r2, r3, #1
   1174e:	68fb      	ldr	r3, [r7, #12]
   11750:	609a      	str	r2, [r3, #8]

				queue = NULL;
   11752:	2300      	movs	r3, #0
   11754:	623b      	str	r3, [r7, #32]
				result = true;
   11756:	2301      	movs	r3, #1
   11758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   1175c:	e004      	b.n	11768 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x110>
			}
			else
			{
				queuePrev = queue;
   1175e:	6a3b      	ldr	r3, [r7, #32]
   11760:	61fb      	str	r3, [r7, #28]
				queue = queue->next;
   11762:	6a3b      	ldr	r3, [r7, #32]
   11764:	68db      	ldr	r3, [r3, #12]
   11766:	623b      	str	r3, [r7, #32]
		while (queue)
   11768:	e7ba      	b.n	116e0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x88>
			}
		}

		if (result)
   1176a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1176e:	2b00      	cmp	r3, #0
   11770:	d198      	bne.n	116a4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
		
			#endif
		}
		else
		{
			tick_t	timeRemaining(timeoutTime - eventTimer.get_ticks());
   11772:	69bc      	ldr	r4, [r7, #24]
   11774:	4819      	ldr	r0, [pc, #100]	; (117dc <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11776:	4b1a      	ldr	r3, [pc, #104]	; (117e0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   11778:	4798      	blx	r3
   1177a:	4603      	mov	r3, r0
   1177c:	1ae3      	subs	r3, r4, r3
   1177e:	617b      	str	r3, [r7, #20]
			eventTimeout=false;
   11780:	68fb      	ldr	r3, [r7, #12]
   11782:	2200      	movs	r2, #0
   11784:	701a      	strb	r2, [r3, #0]
			if (timeRemaining > CHECK_EVENT_PERIOD){
   11786:	697b      	ldr	r3, [r7, #20]
   11788:	2b32      	cmp	r3, #50	; 0x32
   1178a:	dd05      	ble.n	11798 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x140>
				eventTimer.add_oneShot_task((FUNC_PTR)EventTimerTask,CHECK_EVENT_PERIOD);
   1178c:	2232      	movs	r2, #50	; 0x32
   1178e:	4917      	ldr	r1, [pc, #92]	; (117ec <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x194>)
   11790:	4812      	ldr	r0, [pc, #72]	; (117dc <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11792:	4b17      	ldr	r3, [pc, #92]	; (117f0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x198>)
   11794:	4798      	blx	r3
   11796:	e00d      	b.n	117b4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x15c>
			}else if (timeRemaining > 0){
   11798:	697b      	ldr	r3, [r7, #20]
   1179a:	2b00      	cmp	r3, #0
   1179c:	dd0a      	ble.n	117b4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x15c>
				eventTimer.add_oneShot_task((FUNC_PTR)EventTimerTask,timeoutTime - eventTimer.get_ticks());
   1179e:	69bc      	ldr	r4, [r7, #24]
   117a0:	480e      	ldr	r0, [pc, #56]	; (117dc <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   117a2:	4b0f      	ldr	r3, [pc, #60]	; (117e0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   117a4:	4798      	blx	r3
   117a6:	4603      	mov	r3, r0
   117a8:	1ae3      	subs	r3, r4, r3
   117aa:	461a      	mov	r2, r3
   117ac:	490f      	ldr	r1, [pc, #60]	; (117ec <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x194>)
   117ae:	480b      	ldr	r0, [pc, #44]	; (117dc <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   117b0:	4b0f      	ldr	r3, [pc, #60]	; (117f0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x198>)
   117b2:	4798      	blx	r3
			}
			eventTimer.start();
   117b4:	4809      	ldr	r0, [pc, #36]	; (117dc <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   117b6:	4b0f      	ldr	r3, [pc, #60]	; (117f4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x19c>)
   117b8:	4798      	blx	r3
			while (!eventTimeout);
   117ba:	68fb      	ldr	r3, [r7, #12]
   117bc:	781b      	ldrb	r3, [r3, #0]
   117be:	b2db      	uxtb	r3, r3
   117c0:	f083 0301 	eor.w	r3, r3, #1
   117c4:	b2db      	uxtb	r3, r3
   117c6:	2b00      	cmp	r3, #0
   117c8:	f43f af6c 	beq.w	116a4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
   117cc:	e7f5      	b.n	117ba <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x162>
		
		}
	}

	return result;
   117ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
   117d2:	4618      	mov	r0, r3
   117d4:	372c      	adds	r7, #44	; 0x2c
   117d6:	46bd      	mov	sp, r7
   117d8:	bd90      	pop	{r4, r7, pc}
   117da:	bf00      	nop
   117dc:	20003d94 	.word	0x20003d94
   117e0:	000131ed 	.word	0x000131ed
   117e4:	20003a60 	.word	0x20003a60
   117e8:	20003a5c 	.word	0x20003a5c
   117ec:	000115c1 	.word	0x000115c1
   117f0:	000131b5 	.word	0x000131b5
   117f4:	0001310d 	.word	0x0001310d

000117f8 <_ZN18EventHandler_Class13SendEventSelfERK5event>:
{
	SendEventSelf(e);
}

void EventHandler_Class::SendEventSelf(const event& e)
{
   117f8:	b580      	push	{r7, lr}
   117fa:	b084      	sub	sp, #16
   117fc:	af00      	add	r7, sp, #0
   117fe:	6078      	str	r0, [r7, #4]
   11800:	6039      	str	r1, [r7, #0]
	usb << "send event:\r";
	usb << "     class:   " << (uint16)e.eventClass << newline;
	usb << "     type:    " << (uint16)e.eventType << newline;
	
	#endif
	event*	theEvent(eventQueue);
   11802:	4b22      	ldr	r3, [pc, #136]	; (1188c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   11804:	681b      	ldr	r3, [r3, #0]
   11806:	60bb      	str	r3, [r7, #8]
	
	if (theEvent)
   11808:	68bb      	ldr	r3, [r7, #8]
   1180a:	2b00      	cmp	r3, #0
   1180c:	d035      	beq.n	1187a <_ZN18EventHandler_Class13SendEventSelfERK5event+0x82>
	{
		eventQueue = eventQueue->next;
   1180e:	4b1f      	ldr	r3, [pc, #124]	; (1188c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   11810:	681b      	ldr	r3, [r3, #0]
   11812:	68db      	ldr	r3, [r3, #12]
   11814:	4a1d      	ldr	r2, [pc, #116]	; (1188c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   11816:	6013      	str	r3, [r2, #0]
		theEvent->next = NULL;
   11818:	68bb      	ldr	r3, [r7, #8]
   1181a:	2200      	movs	r2, #0
   1181c:	60da      	str	r2, [r3, #12]
		eventsInUse++;
   1181e:	687b      	ldr	r3, [r7, #4]
   11820:	689b      	ldr	r3, [r3, #8]
   11822:	1c5a      	adds	r2, r3, #1
   11824:	687b      	ldr	r3, [r7, #4]
   11826:	609a      	str	r2, [r3, #8]

		event*	threadQueue((event*)mainThreadEventQueue);
   11828:	4b19      	ldr	r3, [pc, #100]	; (11890 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>)
   1182a:	681b      	ldr	r3, [r3, #0]
   1182c:	60fb      	str	r3, [r7, #12]
		if (threadQueue == NULL)
   1182e:	68fb      	ldr	r3, [r7, #12]
   11830:	2b00      	cmp	r3, #0
   11832:	d103      	bne.n	1183c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
		mainThreadEventQueue = theEvent;
   11834:	4a16      	ldr	r2, [pc, #88]	; (11890 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>)
   11836:	68bb      	ldr	r3, [r7, #8]
   11838:	6013      	str	r3, [r2, #0]
   1183a:	e00a      	b.n	11852 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
		else
		{
			while (threadQueue->next)
   1183c:	68fb      	ldr	r3, [r7, #12]
   1183e:	68db      	ldr	r3, [r3, #12]
   11840:	2b00      	cmp	r3, #0
   11842:	d003      	beq.n	1184c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x54>
			threadQueue = threadQueue->next;
   11844:	68fb      	ldr	r3, [r7, #12]
   11846:	68db      	ldr	r3, [r3, #12]
   11848:	60fb      	str	r3, [r7, #12]
			while (threadQueue->next)
   1184a:	e7f7      	b.n	1183c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
			threadQueue->next = theEvent;
   1184c:	68fb      	ldr	r3, [r7, #12]
   1184e:	68ba      	ldr	r2, [r7, #8]
   11850:	60da      	str	r2, [r3, #12]
			usb << "eventsInUsePeak => " << eventsInUsePeak << newline;
			
		}
		#endif

		(*theEvent).eventClass = e.eventClass;
   11852:	683b      	ldr	r3, [r7, #0]
   11854:	881a      	ldrh	r2, [r3, #0]
   11856:	68bb      	ldr	r3, [r7, #8]
   11858:	801a      	strh	r2, [r3, #0]
		(*theEvent).eventType = e.eventType;
   1185a:	683b      	ldr	r3, [r7, #0]
   1185c:	885a      	ldrh	r2, [r3, #2]
   1185e:	68bb      	ldr	r3, [r7, #8]
   11860:	805a      	strh	r2, [r3, #2]
		(*theEvent).data = e.data;
   11862:	68bb      	ldr	r3, [r7, #8]
   11864:	683a      	ldr	r2, [r7, #0]
   11866:	6892      	ldr	r2, [r2, #8]
   11868:	609a      	str	r2, [r3, #8]
		(*theEvent).timestamp = eventTimer.get_ticks();
   1186a:	480a      	ldr	r0, [pc, #40]	; (11894 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x9c>)
   1186c:	4b0a      	ldr	r3, [pc, #40]	; (11898 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa0>)
   1186e:	4798      	blx	r3
   11870:	4603      	mov	r3, r0
   11872:	461a      	mov	r2, r3
   11874:	68bb      	ldr	r3, [r7, #8]
   11876:	605a      	str	r2, [r3, #4]
		usb << "     type:    " << (uint16)e.eventType << newline;
		
		#endif
		eventQueueUnderflow++;
	}
}
   11878:	e004      	b.n	11884 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x8c>
		eventQueueUnderflow++;
   1187a:	687b      	ldr	r3, [r7, #4]
   1187c:	699b      	ldr	r3, [r3, #24]
   1187e:	1c5a      	adds	r2, r3, #1
   11880:	687b      	ldr	r3, [r7, #4]
   11882:	619a      	str	r2, [r3, #24]
}
   11884:	bf00      	nop
   11886:	3710      	adds	r7, #16
   11888:	46bd      	mov	sp, r7
   1188a:	bd80      	pop	{r7, pc}
   1188c:	20003a5c 	.word	0x20003a5c
   11890:	20003a60 	.word	0x20003a60
   11894:	20003d94 	.word	0x20003d94
   11898:	000131ed 	.word	0x000131ed

0001189c <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData>:
	
	SendEventSelf(theEvent);
}

void EventHandler_Class::SendErrorSelf(uint16_t et,const eventData& data)
{
   1189c:	b580      	push	{r7, lr}
   1189e:	b088      	sub	sp, #32
   118a0:	af00      	add	r7, sp, #0
   118a2:	60f8      	str	r0, [r7, #12]
   118a4:	460b      	mov	r3, r1
   118a6:	607a      	str	r2, [r7, #4]
   118a8:	817b      	strh	r3, [r7, #10]
	event		theEvent;
   118aa:	f107 0310 	add.w	r3, r7, #16
   118ae:	4618      	mov	r0, r3
   118b0:	4b09      	ldr	r3, [pc, #36]	; (118d8 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x3c>)
   118b2:	4798      	blx	r3
	theEvent.eventClass = kErrorEventClass;
   118b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   118b8:	823b      	strh	r3, [r7, #16]
	theEvent.eventType =(EventType)et ;
   118ba:	897b      	ldrh	r3, [r7, #10]
   118bc:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   118be:	687b      	ldr	r3, [r7, #4]
   118c0:	681b      	ldr	r3, [r3, #0]
   118c2:	61bb      	str	r3, [r7, #24]
	SendEventSelf(theEvent);
   118c4:	f107 0310 	add.w	r3, r7, #16
   118c8:	4619      	mov	r1, r3
   118ca:	68f8      	ldr	r0, [r7, #12]
   118cc:	4b03      	ldr	r3, [pc, #12]	; (118dc <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x40>)
   118ce:	4798      	blx	r3
}
   118d0:	bf00      	nop
   118d2:	3720      	adds	r7, #32
   118d4:	46bd      	mov	sp, r7
   118d6:	bd80      	pop	{r7, pc}
   118d8:	00001f69 	.word	0x00001f69
   118dc:	000117f9 	.word	0x000117f9

000118e0 <_ZN18EventHandler_Class10CheckEventEv>:
uint32_t EventHandler_Class::CheckEvent(void)
{
   118e0:	b580      	push	{r7, lr}
   118e2:	b08a      	sub	sp, #40	; 0x28
   118e4:	af00      	add	r7, sp, #0
   118e6:	6078      	str	r0, [r7, #4]
	
	float	temperatureSMPST = 0.0;	//stores temp value for fan off function
   118e8:	f04f 0300 	mov.w	r3, #0
   118ec:	627b      	str	r3, [r7, #36]	; 0x24
	float 	temperatureExhaust = 0.0;
   118ee:	f04f 0300 	mov.w	r3, #0
   118f2:	623b      	str	r3, [r7, #32]
	float	temperatureMagnetron = 0.0;
   118f4:	f04f 0300 	mov.w	r3, #0
   118f8:	61fb      	str	r3, [r7, #28]

	
	#if __DEBUG__ > 4
	usb<< "checkEvent" << newline;
	#endif
	event	e;
   118fa:	f107 030c 	add.w	r3, r7, #12
   118fe:	4618      	mov	r0, r3
   11900:	4b03      	ldr	r3, [pc, #12]	; (11910 <_ZN18EventHandler_Class10CheckEventEv+0x30>)
   11902:	4798      	blx	r3
	//Alive beacon function: i2cAlive is reset by a successful coreI2Cread to true and checked here.
	//If coreI2Cread was unsuccessful I2C is reseted



	return	(uint32_t)eventsInUse;
   11904:	687b      	ldr	r3, [r7, #4]
   11906:	689b      	ldr	r3, [r3, #8]
	
}
   11908:	4618      	mov	r0, r3
   1190a:	3728      	adds	r7, #40	; 0x28
   1190c:	46bd      	mov	sp, r7
   1190e:	bd80      	pop	{r7, pc}
   11910:	00001f69 	.word	0x00001f69

00011914 <_Z41__static_initialization_and_destruction_0ii>:


   11914:	b5b0      	push	{r4, r5, r7, lr}
   11916:	b082      	sub	sp, #8
   11918:	af00      	add	r7, sp, #0
   1191a:	6078      	str	r0, [r7, #4]
   1191c:	6039      	str	r1, [r7, #0]
   1191e:	687b      	ldr	r3, [r7, #4]
   11920:	2b01      	cmp	r3, #1
   11922:	d117      	bne.n	11954 <_Z41__static_initialization_and_destruction_0ii+0x40>
   11924:	683b      	ldr	r3, [r7, #0]
   11926:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1192a:	4293      	cmp	r3, r2
   1192c:	d112      	bne.n	11954 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
   1192e:	4b0b      	ldr	r3, [pc, #44]	; (1195c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   11930:	24ff      	movs	r4, #255	; 0xff
   11932:	461d      	mov	r5, r3
   11934:	2c00      	cmp	r4, #0
   11936:	db05      	blt.n	11944 <_Z41__static_initialization_and_destruction_0ii+0x30>
   11938:	4628      	mov	r0, r5
   1193a:	4b09      	ldr	r3, [pc, #36]	; (11960 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   1193c:	4798      	blx	r3
   1193e:	3510      	adds	r5, #16
   11940:	3c01      	subs	r4, #1
   11942:	e7f7      	b.n	11934 <_Z41__static_initialization_and_destruction_0ii+0x20>
   11944:	4807      	ldr	r0, [pc, #28]	; (11964 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   11946:	4b08      	ldr	r3, [pc, #32]	; (11968 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   11948:	4798      	blx	r3
   1194a:	4a08      	ldr	r2, [pc, #32]	; (1196c <_Z41__static_initialization_and_destruction_0ii+0x58>)
   1194c:	4908      	ldr	r1, [pc, #32]	; (11970 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1194e:	4805      	ldr	r0, [pc, #20]	; (11964 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   11950:	4b08      	ldr	r3, [pc, #32]	; (11974 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   11952:	4798      	blx	r3
   11954:	bf00      	nop
   11956:	3708      	adds	r7, #8
   11958:	46bd      	mov	sp, r7
   1195a:	bdb0      	pop	{r4, r5, r7, pc}
   1195c:	20002a5c 	.word	0x20002a5c
   11960:	00001f69 	.word	0x00001f69
   11964:	20003a74 	.word	0x20003a74
   11968:	000115e1 	.word	0x000115e1
   1196c:	20000000 	.word	0x20000000
   11970:	00011601 	.word	0x00011601
   11974:	0001427d 	.word	0x0001427d

00011978 <_GLOBAL__sub_I_maxEventCount>:
   11978:	b580      	push	{r7, lr}
   1197a:	af00      	add	r7, sp, #0
   1197c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11980:	2001      	movs	r0, #1
   11982:	4b01      	ldr	r3, [pc, #4]	; (11988 <_GLOBAL__sub_I_maxEventCount+0x10>)
   11984:	4798      	blx	r3
   11986:	bd80      	pop	{r7, pc}
   11988:	00011915 	.word	0x00011915

0001198c <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   1198c:	b480      	push	{r7}
   1198e:	b083      	sub	sp, #12
   11990:	af00      	add	r7, sp, #0
   11992:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   11994:	4a04      	ldr	r2, [pc, #16]	; (119a8 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   11996:	687b      	ldr	r3, [r7, #4]
   11998:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   1199a:	687b      	ldr	r3, [r7, #4]
   1199c:	4618      	mov	r0, r3
   1199e:	370c      	adds	r7, #12
   119a0:	46bd      	mov	sp, r7
   119a2:	bc80      	pop	{r7}
   119a4:	4770      	bx	lr
   119a6:	bf00      	nop
   119a8:	20003a90 	.word	0x20003a90

000119ac <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   119ac:	b480      	push	{r7}
   119ae:	b083      	sub	sp, #12
   119b0:	af00      	add	r7, sp, #0
   119b2:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   119b4:	687b      	ldr	r3, [r7, #4]
   119b6:	4618      	mov	r0, r3
   119b8:	370c      	adds	r7, #12
   119ba:	46bd      	mov	sp, r7
   119bc:	bc80      	pop	{r7}
   119be:	4770      	bx	lr

000119c0 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   119c0:	b580      	push	{r7, lr}
   119c2:	b082      	sub	sp, #8
   119c4:	af00      	add	r7, sp, #0
   119c6:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   119c8:	687b      	ldr	r3, [r7, #4]
   119ca:	685a      	ldr	r2, [r3, #4]
   119cc:	687b      	ldr	r3, [r7, #4]
   119ce:	3308      	adds	r3, #8
   119d0:	4619      	mov	r1, r3
   119d2:	4610      	mov	r0, r2
   119d4:	4b06      	ldr	r3, [pc, #24]	; (119f0 <_ZN13SPI_Syn_Class4initEv+0x30>)
   119d6:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   119d8:	687b      	ldr	r3, [r7, #4]
   119da:	685b      	ldr	r3, [r3, #4]
   119dc:	4618      	mov	r0, r3
   119de:	4b05      	ldr	r3, [pc, #20]	; (119f4 <_ZN13SPI_Syn_Class4initEv+0x34>)
   119e0:	4798      	blx	r3
	
	ready=true;
   119e2:	687b      	ldr	r3, [r7, #4]
   119e4:	2201      	movs	r2, #1
   119e6:	701a      	strb	r2, [r3, #0]
	
}
   119e8:	bf00      	nop
   119ea:	3708      	adds	r7, #8
   119ec:	46bd      	mov	sp, r7
   119ee:	bd80      	pop	{r7, pc}
   119f0:	000053b5 	.word	0x000053b5
   119f4:	00005229 	.word	0x00005229

000119f8 <_ZN13SPI_Syn_Class13setDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::setDescriptor(spi_m_sync_descriptor *spiDesc){
   119f8:	b480      	push	{r7}
   119fa:	b083      	sub	sp, #12
   119fc:	af00      	add	r7, sp, #0
   119fe:	6078      	str	r0, [r7, #4]
   11a00:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   11a02:	4a05      	ldr	r2, [pc, #20]	; (11a18 <_ZN13SPI_Syn_Class13setDescriptorEP21spi_m_sync_descriptor+0x20>)
   11a04:	687b      	ldr	r3, [r7, #4]
   11a06:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   11a08:	687b      	ldr	r3, [r7, #4]
   11a0a:	683a      	ldr	r2, [r7, #0]
   11a0c:	605a      	str	r2, [r3, #4]
}
   11a0e:	bf00      	nop
   11a10:	370c      	adds	r7, #12
   11a12:	46bd      	mov	sp, r7
   11a14:	bc80      	pop	{r7}
   11a16:	4770      	bx	lr
   11a18:	20003a90 	.word	0x20003a90

00011a1c <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
   11a1c:	b580      	push	{r7, lr}
   11a1e:	b082      	sub	sp, #8
   11a20:	af00      	add	r7, sp, #0
   11a22:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   11a24:	687b      	ldr	r3, [r7, #4]
   11a26:	685a      	ldr	r2, [r3, #4]
   11a28:	687b      	ldr	r3, [r7, #4]
   11a2a:	3308      	adds	r3, #8
   11a2c:	4619      	mov	r1, r3
   11a2e:	4610      	mov	r0, r2
   11a30:	4b07      	ldr	r3, [pc, #28]	; (11a50 <_ZN13SPI_Syn_Class6enableEv+0x34>)
   11a32:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   11a34:	687b      	ldr	r3, [r7, #4]
   11a36:	685b      	ldr	r3, [r3, #4]
   11a38:	4618      	mov	r0, r3
   11a3a:	4b06      	ldr	r3, [pc, #24]	; (11a54 <_ZN13SPI_Syn_Class6enableEv+0x38>)
   11a3c:	4798      	blx	r3
	ready=true;
   11a3e:	687b      	ldr	r3, [r7, #4]
   11a40:	2201      	movs	r2, #1
   11a42:	701a      	strb	r2, [r3, #0]
	return 0;
   11a44:	2300      	movs	r3, #0
}
   11a46:	4618      	mov	r0, r3
   11a48:	3708      	adds	r7, #8
   11a4a:	46bd      	mov	sp, r7
   11a4c:	bd80      	pop	{r7, pc}
   11a4e:	bf00      	nop
   11a50:	000053b5 	.word	0x000053b5
   11a54:	00005229 	.word	0x00005229

00011a58 <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
   11a58:	b580      	push	{r7, lr}
   11a5a:	b086      	sub	sp, #24
   11a5c:	af00      	add	r7, sp, #0
   11a5e:	60f8      	str	r0, [r7, #12]
   11a60:	60b9      	str	r1, [r7, #8]
   11a62:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   11a64:	68fb      	ldr	r3, [r7, #12]
   11a66:	2201      	movs	r2, #1
   11a68:	741a      	strb	r2, [r3, #16]
	w= io_write(spio,p,(uint16_t)n);
   11a6a:	68fb      	ldr	r3, [r7, #12]
   11a6c:	689b      	ldr	r3, [r3, #8]
   11a6e:	687a      	ldr	r2, [r7, #4]
   11a70:	b292      	uxth	r2, r2
   11a72:	68b9      	ldr	r1, [r7, #8]
   11a74:	4618      	mov	r0, r3
   11a76:	4b08      	ldr	r3, [pc, #32]	; (11a98 <_ZN13SPI_Syn_Class5writeEPKhl+0x40>)
   11a78:	4798      	blx	r3
   11a7a:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   11a7c:	697b      	ldr	r3, [r7, #20]
   11a7e:	2b00      	cmp	r3, #0
   11a80:	bf14      	ite	ne
   11a82:	2301      	movne	r3, #1
   11a84:	2300      	moveq	r3, #0
   11a86:	b2da      	uxtb	r2, r3
   11a88:	68fb      	ldr	r3, [r7, #12]
   11a8a:	741a      	strb	r2, [r3, #16]
	 return w;
   11a8c:	697b      	ldr	r3, [r7, #20]
	
}
   11a8e:	4618      	mov	r0, r3
   11a90:	3718      	adds	r7, #24
   11a92:	46bd      	mov	sp, r7
   11a94:	bd80      	pop	{r7, pc}
   11a96:	bf00      	nop
   11a98:	000141dd 	.word	0x000141dd

00011a9c <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
   11a9c:	b580      	push	{r7, lr}
   11a9e:	b086      	sub	sp, #24
   11aa0:	af00      	add	r7, sp, #0
   11aa2:	60f8      	str	r0, [r7, #12]
   11aa4:	60b9      	str	r1, [r7, #8]
   11aa6:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   11aa8:	68fb      	ldr	r3, [r7, #12]
   11aaa:	2201      	movs	r2, #1
   11aac:	745a      	strb	r2, [r3, #17]
	r=io_read(spio,p,(uint16_t)n);
   11aae:	68fb      	ldr	r3, [r7, #12]
   11ab0:	689b      	ldr	r3, [r3, #8]
   11ab2:	687a      	ldr	r2, [r7, #4]
   11ab4:	b292      	uxth	r2, r2
   11ab6:	68b9      	ldr	r1, [r7, #8]
   11ab8:	4618      	mov	r0, r3
   11aba:	4b08      	ldr	r3, [pc, #32]	; (11adc <_ZN13SPI_Syn_Class4readEPhl+0x40>)
   11abc:	4798      	blx	r3
   11abe:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   11ac0:	697b      	ldr	r3, [r7, #20]
   11ac2:	2b00      	cmp	r3, #0
   11ac4:	bf14      	ite	ne
   11ac6:	2301      	movne	r3, #1
   11ac8:	2300      	moveq	r3, #0
   11aca:	b2da      	uxtb	r2, r3
   11acc:	68fb      	ldr	r3, [r7, #12]
   11ace:	745a      	strb	r2, [r3, #17]
	return  r;
   11ad0:	697b      	ldr	r3, [r7, #20]
}
   11ad2:	4618      	mov	r0, r3
   11ad4:	3718      	adds	r7, #24
   11ad6:	46bd      	mov	sp, r7
   11ad8:	bd80      	pop	{r7, pc}
   11ada:	bf00      	nop
   11adc:	0001422d 	.word	0x0001422d

00011ae0 <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
   11ae0:	b580      	push	{r7, lr}
   11ae2:	b082      	sub	sp, #8
   11ae4:	af00      	add	r7, sp, #0
   11ae6:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   11ae8:	687b      	ldr	r3, [r7, #4]
   11aea:	685b      	ldr	r3, [r3, #4]
   11aec:	4618      	mov	r0, r3
   11aee:	4b03      	ldr	r3, [pc, #12]	; (11afc <_ZN13SPI_Syn_Class7disableEv+0x1c>)
   11af0:	4798      	blx	r3
	
}
   11af2:	bf00      	nop
   11af4:	3708      	adds	r7, #8
   11af6:	46bd      	mov	sp, r7
   11af8:	bd80      	pop	{r7, pc}
   11afa:	bf00      	nop
   11afc:	00005265 	.word	0x00005265

00011b00 <_ZN13SPI_Syn_Class10isSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::isSPIReady(void){
   11b00:	b480      	push	{r7}
   11b02:	b083      	sub	sp, #12
   11b04:	af00      	add	r7, sp, #0
   11b06:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
   11b08:	687b      	ldr	r3, [r7, #4]
   11b0a:	7c5b      	ldrb	r3, [r3, #17]
   11b0c:	b2db      	uxtb	r3, r3
   11b0e:	2b00      	cmp	r3, #0
   11b10:	d103      	bne.n	11b1a <_ZN13SPI_Syn_Class10isSPIReadyEv+0x1a>
   11b12:	687b      	ldr	r3, [r7, #4]
   11b14:	7c1b      	ldrb	r3, [r3, #16]
   11b16:	b2db      	uxtb	r3, r3
   11b18:	2b00      	cmp	r3, #0
   11b1a:	687b      	ldr	r3, [r7, #4]
   11b1c:	2201      	movs	r2, #1
   11b1e:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
   11b20:	687b      	ldr	r3, [r7, #4]
   11b22:	781b      	ldrb	r3, [r3, #0]
   11b24:	b2db      	uxtb	r3, r3
   11b26:	2b00      	cmp	r3, #0
   11b28:	d001      	beq.n	11b2e <_ZN13SPI_Syn_Class10isSPIReadyEv+0x2e>
	{
		
		return true;
   11b2a:	2301      	movs	r3, #1
   11b2c:	e000      	b.n	11b30 <_ZN13SPI_Syn_Class10isSPIReadyEv+0x30>
	} 
	else
	{
		return false;
   11b2e:	2300      	movs	r3, #0
	}
	return ready;
	
}
   11b30:	4618      	mov	r0, r3
   11b32:	370c      	adds	r7, #12
   11b34:	46bd      	mov	sp, r7
   11b36:	bc80      	pop	{r7}
   11b38:	4770      	bx	lr
	...

00011b3c <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
   11b3c:	b580      	push	{r7, lr}
   11b3e:	b082      	sub	sp, #8
   11b40:	af00      	add	r7, sp, #0
   11b42:	6078      	str	r0, [r7, #4]
   11b44:	6039      	str	r1, [r7, #0]
   11b46:	687b      	ldr	r3, [r7, #4]
   11b48:	3308      	adds	r3, #8
   11b4a:	4618      	mov	r0, r3
   11b4c:	4b06      	ldr	r3, [pc, #24]	; (11b68 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
   11b4e:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
   11b50:	687b      	ldr	r3, [r7, #4]
   11b52:	683a      	ldr	r2, [r7, #0]
   11b54:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
   11b56:	4a05      	ldr	r2, [pc, #20]	; (11b6c <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
   11b58:	687b      	ldr	r3, [r7, #4]
   11b5a:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
   11b5c:	687b      	ldr	r3, [r7, #4]
   11b5e:	4618      	mov	r0, r3
   11b60:	3708      	adds	r7, #8
   11b62:	46bd      	mov	sp, r7
   11b64:	bd80      	pop	{r7, pc}
   11b66:	bf00      	nop
   11b68:	0001400d 	.word	0x0001400d
   11b6c:	20003a94 	.word	0x20003a94

00011b70 <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
   11b70:	b580      	push	{r7, lr}
   11b72:	b082      	sub	sp, #8
   11b74:	af00      	add	r7, sp, #0
   11b76:	6078      	str	r0, [r7, #4]
   11b78:	687b      	ldr	r3, [r7, #4]
   11b7a:	3308      	adds	r3, #8
   11b7c:	4618      	mov	r0, r3
   11b7e:	4b03      	ldr	r3, [pc, #12]	; (11b8c <_ZN13AT24MAC_ClassD1Ev+0x1c>)
   11b80:	4798      	blx	r3
{
} //~AT24MAC_Class
   11b82:	687b      	ldr	r3, [r7, #4]
   11b84:	4618      	mov	r0, r3
   11b86:	3708      	adds	r7, #8
   11b88:	46bd      	mov	sp, r7
   11b8a:	bd80      	pop	{r7, pc}
   11b8c:	00014035 	.word	0x00014035

00011b90 <_ZN13AT24MAC_Class4InitEv>:


void AT24MAC_Class::Init(void){
   11b90:	b580      	push	{r7, lr}
   11b92:	b082      	sub	sp, #8
   11b94:	af00      	add	r7, sp, #0
   11b96:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
   11b98:	2156      	movs	r1, #86	; 0x56
   11b9a:	6878      	ldr	r0, [r7, #4]
   11b9c:	4b02      	ldr	r3, [pc, #8]	; (11ba8 <_ZN13AT24MAC_Class4InitEv+0x18>)
   11b9e:	4798      	blx	r3
}
   11ba0:	bf00      	nop
   11ba2:	3708      	adds	r7, #8
   11ba4:	46bd      	mov	sp, r7
   11ba6:	bd80      	pop	{r7, pc}
   11ba8:	00011bad 	.word	0x00011bad

00011bac <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
   11bac:	b580      	push	{r7, lr}
   11bae:	b082      	sub	sp, #8
   11bb0:	af00      	add	r7, sp, #0
   11bb2:	6078      	str	r0, [r7, #4]
   11bb4:	460b      	mov	r3, r1
   11bb6:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   11bb8:	687b      	ldr	r3, [r7, #4]
   11bba:	78fa      	ldrb	r2, [r7, #3]
   11bbc:	761a      	strb	r2, [r3, #24]
	i2ca.Set_descriptor(ptrI2CDescr);
   11bbe:	687b      	ldr	r3, [r7, #4]
   11bc0:	f103 0208 	add.w	r2, r3, #8
   11bc4:	687b      	ldr	r3, [r7, #4]
   11bc6:	685b      	ldr	r3, [r3, #4]
   11bc8:	4619      	mov	r1, r3
   11bca:	4610      	mov	r0, r2
   11bcc:	4b0a      	ldr	r3, [pc, #40]	; (11bf8 <_ZN13AT24MAC_Class4InitEh+0x4c>)
   11bce:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
   11bd0:	687b      	ldr	r3, [r7, #4]
   11bd2:	3308      	adds	r3, #8
   11bd4:	78fa      	ldrb	r2, [r7, #3]
   11bd6:	4611      	mov	r1, r2
   11bd8:	4618      	mov	r0, r3
   11bda:	4b08      	ldr	r3, [pc, #32]	; (11bfc <_ZN13AT24MAC_Class4InitEh+0x50>)
   11bdc:	4798      	blx	r3
   11bde:	4603      	mov	r3, r0
   11be0:	2b00      	cmp	r3, #0
   11be2:	bf0c      	ite	eq
   11be4:	2301      	moveq	r3, #1
   11be6:	2300      	movne	r3, #0
   11be8:	b2da      	uxtb	r2, r3
   11bea:	687b      	ldr	r3, [r7, #4]
   11bec:	701a      	strb	r2, [r3, #0]
}
   11bee:	bf00      	nop
   11bf0:	3708      	adds	r7, #8
   11bf2:	46bd      	mov	sp, r7
   11bf4:	bd80      	pop	{r7, pc}
   11bf6:	bf00      	nop
   11bf8:	00014049 	.word	0x00014049
   11bfc:	000140ed 	.word	0x000140ed

00011c00 <_ZN13AT24MAC_Class12WriteAddressEPhhh>:
	array[1]=value;
	uint32_t w= i2ca.Write(array,2);
	while(!i2ca.txReady);
	return	w;
}
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint8_t addr, uint8_t size){
   11c00:	b580      	push	{r7, lr}
   11c02:	b08c      	sub	sp, #48	; 0x30
   11c04:	af00      	add	r7, sp, #0
   11c06:	60f8      	str	r0, [r7, #12]
   11c08:	60b9      	str	r1, [r7, #8]
   11c0a:	4611      	mov	r1, r2
   11c0c:	461a      	mov	r2, r3
   11c0e:	460b      	mov	r3, r1
   11c10:	71fb      	strb	r3, [r7, #7]
   11c12:	4613      	mov	r3, r2
   11c14:	71bb      	strb	r3, [r7, #6]
	
	//uint8_t cmd=(uint8_t)AT24MAC_WRITE_CMD;
	
	uint8_t array[1+AT24MAC_BUFFER_SIZE],value;
	uint32_t w;
	isReady=false;
   11c16:	68fb      	ldr	r3, [r7, #12]
   11c18:	2200      	movs	r2, #0
   11c1a:	701a      	strb	r2, [r3, #0]
	array[0]=addr;
   11c1c:	79fb      	ldrb	r3, [r7, #7]
   11c1e:	743b      	strb	r3, [r7, #16]
	for (int i=1;i<size+1;i++)
   11c20:	2301      	movs	r3, #1
   11c22:	62fb      	str	r3, [r7, #44]	; 0x2c
   11c24:	79bb      	ldrb	r3, [r7, #6]
   11c26:	1c5a      	adds	r2, r3, #1
   11c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11c2a:	429a      	cmp	r2, r3
   11c2c:	dd11      	ble.n	11c52 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x52>
	{
				
		value=*p;
   11c2e:	68bb      	ldr	r3, [r7, #8]
   11c30:	781b      	ldrb	r3, [r3, #0]
   11c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		array[i]=value;
   11c36:	f107 0210 	add.w	r2, r7, #16
   11c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11c3c:	4413      	add	r3, r2
   11c3e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   11c42:	701a      	strb	r2, [r3, #0]
	
		p++;
   11c44:	68bb      	ldr	r3, [r7, #8]
   11c46:	3301      	adds	r3, #1
   11c48:	60bb      	str	r3, [r7, #8]
	for (int i=1;i<size+1;i++)
   11c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11c4c:	3301      	adds	r3, #1
   11c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   11c50:	e7e8      	b.n	11c24 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x24>
	}
	w= i2ca.Write(array,1+size);
   11c52:	68fb      	ldr	r3, [r7, #12]
   11c54:	f103 0008 	add.w	r0, r3, #8
   11c58:	79bb      	ldrb	r3, [r7, #6]
   11c5a:	b29b      	uxth	r3, r3
   11c5c:	3301      	adds	r3, #1
   11c5e:	b29a      	uxth	r2, r3
   11c60:	f107 0310 	add.w	r3, r7, #16
   11c64:	4619      	mov	r1, r3
   11c66:	4b09      	ldr	r3, [pc, #36]	; (11c8c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x8c>)
   11c68:	4798      	blx	r3
   11c6a:	4603      	mov	r3, r0
   11c6c:	627b      	str	r3, [r7, #36]	; 0x24
	while(!i2ca.txReady);
   11c6e:	68fb      	ldr	r3, [r7, #12]
   11c70:	7a1b      	ldrb	r3, [r3, #8]
   11c72:	b2db      	uxtb	r3, r3
   11c74:	f083 0301 	eor.w	r3, r3, #1
   11c78:	b2db      	uxtb	r3, r3
   11c7a:	2b00      	cmp	r3, #0
   11c7c:	d000      	beq.n	11c80 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x80>
   11c7e:	e7f6      	b.n	11c6e <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x6e>
	
	return	w;
   11c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   11c82:	4618      	mov	r0, r3
   11c84:	3730      	adds	r7, #48	; 0x30
   11c86:	46bd      	mov	sp, r7
   11c88:	bd80      	pop	{r7, pc}
   11c8a:	bf00      	nop
   11c8c:	00014135 	.word	0x00014135

00011c90 <_ZN13AT24MAC_Class12WriteAddressEPhth>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint16_t addr, uint8_t size){
   11c90:	b580      	push	{r7, lr}
   11c92:	b08c      	sub	sp, #48	; 0x30
   11c94:	af00      	add	r7, sp, #0
   11c96:	60f8      	str	r0, [r7, #12]
   11c98:	60b9      	str	r1, [r7, #8]
   11c9a:	4611      	mov	r1, r2
   11c9c:	461a      	mov	r2, r3
   11c9e:	460b      	mov	r3, r1
   11ca0:	80fb      	strh	r3, [r7, #6]
   11ca2:	4613      	mov	r3, r2
   11ca4:	717b      	strb	r3, [r7, #5]
	
	//uint8_t cmd=(uint8_t)AT24MAC_WRITE_CMD;
	
	uint8_t array[2+AT24MAC_BUFFER_SIZE],value;
	uint32_t w;
	isReady=false;
   11ca6:	68fb      	ldr	r3, [r7, #12]
   11ca8:	2200      	movs	r2, #0
   11caa:	701a      	strb	r2, [r3, #0]
	array[0]=(uint8_t)((addr&(0xff00))>>8);
   11cac:	88fb      	ldrh	r3, [r7, #6]
   11cae:	0a1b      	lsrs	r3, r3, #8
   11cb0:	b29b      	uxth	r3, r3
   11cb2:	b2db      	uxtb	r3, r3
   11cb4:	743b      	strb	r3, [r7, #16]
	array[1]=(uint8_t)(addr)&(0xff);
   11cb6:	88fb      	ldrh	r3, [r7, #6]
   11cb8:	b2db      	uxtb	r3, r3
   11cba:	747b      	strb	r3, [r7, #17]
	for (int i=2;i<size+2;i++)
   11cbc:	2302      	movs	r3, #2
   11cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   11cc0:	797b      	ldrb	r3, [r7, #5]
   11cc2:	1c9a      	adds	r2, r3, #2
   11cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11cc6:	429a      	cmp	r2, r3
   11cc8:	dd11      	ble.n	11cee <_ZN13AT24MAC_Class12WriteAddressEPhth+0x5e>
	{
		
		value=*p;
   11cca:	68bb      	ldr	r3, [r7, #8]
   11ccc:	781b      	ldrb	r3, [r3, #0]
   11cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		array[i]=value;
   11cd2:	f107 0210 	add.w	r2, r7, #16
   11cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11cd8:	4413      	add	r3, r2
   11cda:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   11cde:	701a      	strb	r2, [r3, #0]
		
		p++;
   11ce0:	68bb      	ldr	r3, [r7, #8]
   11ce2:	3301      	adds	r3, #1
   11ce4:	60bb      	str	r3, [r7, #8]
	for (int i=2;i<size+2;i++)
   11ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11ce8:	3301      	adds	r3, #1
   11cea:	62fb      	str	r3, [r7, #44]	; 0x2c
   11cec:	e7e8      	b.n	11cc0 <_ZN13AT24MAC_Class12WriteAddressEPhth+0x30>
	}
	w= i2ca.Write(array,2+size);
   11cee:	68fb      	ldr	r3, [r7, #12]
   11cf0:	f103 0008 	add.w	r0, r3, #8
   11cf4:	797b      	ldrb	r3, [r7, #5]
   11cf6:	b29b      	uxth	r3, r3
   11cf8:	3302      	adds	r3, #2
   11cfa:	b29a      	uxth	r2, r3
   11cfc:	f107 0310 	add.w	r3, r7, #16
   11d00:	4619      	mov	r1, r3
   11d02:	4b09      	ldr	r3, [pc, #36]	; (11d28 <_ZN13AT24MAC_Class12WriteAddressEPhth+0x98>)
   11d04:	4798      	blx	r3
   11d06:	4603      	mov	r3, r0
   11d08:	627b      	str	r3, [r7, #36]	; 0x24
	while(!i2ca.txReady);
   11d0a:	68fb      	ldr	r3, [r7, #12]
   11d0c:	7a1b      	ldrb	r3, [r3, #8]
   11d0e:	b2db      	uxtb	r3, r3
   11d10:	f083 0301 	eor.w	r3, r3, #1
   11d14:	b2db      	uxtb	r3, r3
   11d16:	2b00      	cmp	r3, #0
   11d18:	d000      	beq.n	11d1c <_ZN13AT24MAC_Class12WriteAddressEPhth+0x8c>
   11d1a:	e7f6      	b.n	11d0a <_ZN13AT24MAC_Class12WriteAddressEPhth+0x7a>
	
	return	w;
   11d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   11d1e:	4618      	mov	r0, r3
   11d20:	3730      	adds	r7, #48	; 0x30
   11d22:	46bd      	mov	sp, r7
   11d24:	bd80      	pop	{r7, pc}
   11d26:	bf00      	nop
   11d28:	00014135 	.word	0x00014135

00011d2c <_ZN13AT24MAC_Class11ReadAddressEPhhh>:
	i2ca.Read(&value,1);
	while(!i2ca.rxReady);
	return value;
}

uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint8_t addr, uint8_t size){
   11d2c:	b580      	push	{r7, lr}
   11d2e:	b086      	sub	sp, #24
   11d30:	af00      	add	r7, sp, #0
   11d32:	60f8      	str	r0, [r7, #12]
   11d34:	60b9      	str	r1, [r7, #8]
   11d36:	4611      	mov	r1, r2
   11d38:	461a      	mov	r2, r3
   11d3a:	460b      	mov	r3, r1
   11d3c:	71fb      	strb	r3, [r7, #7]
   11d3e:	4613      	mov	r3, r2
   11d40:	71bb      	strb	r3, [r7, #6]
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
   11d42:	68fb      	ldr	r3, [r7, #12]
   11d44:	3308      	adds	r3, #8
   11d46:	1df9      	adds	r1, r7, #7
   11d48:	2201      	movs	r2, #1
   11d4a:	4618      	mov	r0, r3
   11d4c:	4b11      	ldr	r3, [pc, #68]	; (11d94 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x68>)
   11d4e:	4798      	blx	r3
	while(!i2ca.txReady);
   11d50:	68fb      	ldr	r3, [r7, #12]
   11d52:	7a1b      	ldrb	r3, [r3, #8]
   11d54:	b2db      	uxtb	r3, r3
   11d56:	f083 0301 	eor.w	r3, r3, #1
   11d5a:	b2db      	uxtb	r3, r3
   11d5c:	2b00      	cmp	r3, #0
   11d5e:	d000      	beq.n	11d62 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x36>
   11d60:	e7f6      	b.n	11d50 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x24>
	uint32_t r= i2ca.Read(p,size);
   11d62:	68fb      	ldr	r3, [r7, #12]
   11d64:	3308      	adds	r3, #8
   11d66:	79ba      	ldrb	r2, [r7, #6]
   11d68:	b292      	uxth	r2, r2
   11d6a:	68b9      	ldr	r1, [r7, #8]
   11d6c:	4618      	mov	r0, r3
   11d6e:	4b0a      	ldr	r3, [pc, #40]	; (11d98 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x6c>)
   11d70:	4798      	blx	r3
   11d72:	4603      	mov	r3, r0
   11d74:	617b      	str	r3, [r7, #20]
	while(!i2ca.rxReady);
   11d76:	68fb      	ldr	r3, [r7, #12]
   11d78:	7a5b      	ldrb	r3, [r3, #9]
   11d7a:	b2db      	uxtb	r3, r3
   11d7c:	f083 0301 	eor.w	r3, r3, #1
   11d80:	b2db      	uxtb	r3, r3
   11d82:	2b00      	cmp	r3, #0
   11d84:	d000      	beq.n	11d88 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x5c>
   11d86:	e7f6      	b.n	11d76 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x4a>
	return r;
   11d88:	697b      	ldr	r3, [r7, #20]
}
   11d8a:	4618      	mov	r0, r3
   11d8c:	3718      	adds	r7, #24
   11d8e:	46bd      	mov	sp, r7
   11d90:	bd80      	pop	{r7, pc}
   11d92:	bf00      	nop
   11d94:	00014135 	.word	0x00014135
   11d98:	00014179 	.word	0x00014179

00011d9c <_ZN13AT24MAC_Class11ReadAddressEPhth>:
uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint16_t addr, uint8_t size){
   11d9c:	b580      	push	{r7, lr}
   11d9e:	b086      	sub	sp, #24
   11da0:	af00      	add	r7, sp, #0
   11da2:	60f8      	str	r0, [r7, #12]
   11da4:	60b9      	str	r1, [r7, #8]
   11da6:	4611      	mov	r1, r2
   11da8:	461a      	mov	r2, r3
   11daa:	460b      	mov	r3, r1
   11dac:	80fb      	strh	r3, [r7, #6]
   11dae:	4613      	mov	r3, r2
   11db0:	717b      	strb	r3, [r7, #5]
	//i2ca.read_cmd(addr,&value);
	
	i2ca.Write((uint8_t *)&addr,2);
   11db2:	68fb      	ldr	r3, [r7, #12]
   11db4:	3308      	adds	r3, #8
   11db6:	1db9      	adds	r1, r7, #6
   11db8:	2202      	movs	r2, #2
   11dba:	4618      	mov	r0, r3
   11dbc:	4b11      	ldr	r3, [pc, #68]	; (11e04 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x68>)
   11dbe:	4798      	blx	r3
	while(!i2ca.txReady);
   11dc0:	68fb      	ldr	r3, [r7, #12]
   11dc2:	7a1b      	ldrb	r3, [r3, #8]
   11dc4:	b2db      	uxtb	r3, r3
   11dc6:	f083 0301 	eor.w	r3, r3, #1
   11dca:	b2db      	uxtb	r3, r3
   11dcc:	2b00      	cmp	r3, #0
   11dce:	d000      	beq.n	11dd2 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x36>
   11dd0:	e7f6      	b.n	11dc0 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x24>
	uint32_t r= i2ca.Read(p,size);
   11dd2:	68fb      	ldr	r3, [r7, #12]
   11dd4:	3308      	adds	r3, #8
   11dd6:	797a      	ldrb	r2, [r7, #5]
   11dd8:	b292      	uxth	r2, r2
   11dda:	68b9      	ldr	r1, [r7, #8]
   11ddc:	4618      	mov	r0, r3
   11dde:	4b0a      	ldr	r3, [pc, #40]	; (11e08 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x6c>)
   11de0:	4798      	blx	r3
   11de2:	4603      	mov	r3, r0
   11de4:	617b      	str	r3, [r7, #20]
	while(!i2ca.rxReady);
   11de6:	68fb      	ldr	r3, [r7, #12]
   11de8:	7a5b      	ldrb	r3, [r3, #9]
   11dea:	b2db      	uxtb	r3, r3
   11dec:	f083 0301 	eor.w	r3, r3, #1
   11df0:	b2db      	uxtb	r3, r3
   11df2:	2b00      	cmp	r3, #0
   11df4:	d000      	beq.n	11df8 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x5c>
   11df6:	e7f6      	b.n	11de6 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x4a>
	return r;
   11df8:	697b      	ldr	r3, [r7, #20]
}
   11dfa:	4618      	mov	r0, r3
   11dfc:	3718      	adds	r7, #24
   11dfe:	46bd      	mov	sp, r7
   11e00:	bd80      	pop	{r7, pc}
   11e02:	bf00      	nop
   11e04:	00014135 	.word	0x00014135
   11e08:	00014179 	.word	0x00014179

00011e0c <_Z41__static_initialization_and_destruction_0ii>:
		isReady=false;
	}
	return isReady;	
}

   11e0c:	b580      	push	{r7, lr}
   11e0e:	b082      	sub	sp, #8
   11e10:	af00      	add	r7, sp, #0
   11e12:	6078      	str	r0, [r7, #4]
   11e14:	6039      	str	r1, [r7, #0]
   11e16:	687b      	ldr	r3, [r7, #4]
   11e18:	2b01      	cmp	r3, #1
   11e1a:	d10d      	bne.n	11e38 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   11e1c:	683b      	ldr	r3, [r7, #0]
   11e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11e22:	4293      	cmp	r3, r2
   11e24:	d108      	bne.n	11e38 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   11e26:	4906      	ldr	r1, [pc, #24]	; (11e40 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11e28:	4806      	ldr	r0, [pc, #24]	; (11e44 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11e2a:	4b07      	ldr	r3, [pc, #28]	; (11e48 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11e2c:	4798      	blx	r3
   11e2e:	4a07      	ldr	r2, [pc, #28]	; (11e4c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   11e30:	4907      	ldr	r1, [pc, #28]	; (11e50 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   11e32:	4804      	ldr	r0, [pc, #16]	; (11e44 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11e34:	4b07      	ldr	r3, [pc, #28]	; (11e54 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   11e36:	4798      	blx	r3
   11e38:	bf00      	nop
   11e3a:	3708      	adds	r7, #8
   11e3c:	46bd      	mov	sp, r7
   11e3e:	bd80      	pop	{r7, pc}
   11e40:	20004068 	.word	0x20004068
   11e44:	20003a98 	.word	0x20003a98
   11e48:	00011b3d 	.word	0x00011b3d
   11e4c:	20000000 	.word	0x20000000
   11e50:	00011b71 	.word	0x00011b71
   11e54:	0001427d 	.word	0x0001427d

00011e58 <_GLOBAL__sub_I_ptrAT24MACClass>:
   11e58:	b580      	push	{r7, lr}
   11e5a:	af00      	add	r7, sp, #0
   11e5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11e60:	2001      	movs	r0, #1
   11e62:	4b01      	ldr	r3, [pc, #4]	; (11e68 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
   11e64:	4798      	blx	r3
   11e66:	bd80      	pop	{r7, pc}
   11e68:	00011e0d 	.word	0x00011e0d

00011e6c <hri_port_set_DIR_reg>:
{
   11e6c:	b480      	push	{r7}
   11e6e:	b085      	sub	sp, #20
   11e70:	af00      	add	r7, sp, #0
   11e72:	60f8      	str	r0, [r7, #12]
   11e74:	460b      	mov	r3, r1
   11e76:	607a      	str	r2, [r7, #4]
   11e78:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   11e7a:	7afb      	ldrb	r3, [r7, #11]
   11e7c:	68fa      	ldr	r2, [r7, #12]
   11e7e:	01db      	lsls	r3, r3, #7
   11e80:	4413      	add	r3, r2
   11e82:	3308      	adds	r3, #8
   11e84:	687a      	ldr	r2, [r7, #4]
   11e86:	601a      	str	r2, [r3, #0]
}
   11e88:	bf00      	nop
   11e8a:	3714      	adds	r7, #20
   11e8c:	46bd      	mov	sp, r7
   11e8e:	bc80      	pop	{r7}
   11e90:	4770      	bx	lr

00011e92 <hri_port_clear_DIR_reg>:
{
   11e92:	b480      	push	{r7}
   11e94:	b085      	sub	sp, #20
   11e96:	af00      	add	r7, sp, #0
   11e98:	60f8      	str	r0, [r7, #12]
   11e9a:	460b      	mov	r3, r1
   11e9c:	607a      	str	r2, [r7, #4]
   11e9e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   11ea0:	7afb      	ldrb	r3, [r7, #11]
   11ea2:	68fa      	ldr	r2, [r7, #12]
   11ea4:	01db      	lsls	r3, r3, #7
   11ea6:	4413      	add	r3, r2
   11ea8:	3304      	adds	r3, #4
   11eaa:	687a      	ldr	r2, [r7, #4]
   11eac:	601a      	str	r2, [r3, #0]
}
   11eae:	bf00      	nop
   11eb0:	3714      	adds	r7, #20
   11eb2:	46bd      	mov	sp, r7
   11eb4:	bc80      	pop	{r7}
   11eb6:	4770      	bx	lr

00011eb8 <hri_port_set_OUT_reg>:
{
   11eb8:	b480      	push	{r7}
   11eba:	b085      	sub	sp, #20
   11ebc:	af00      	add	r7, sp, #0
   11ebe:	60f8      	str	r0, [r7, #12]
   11ec0:	460b      	mov	r3, r1
   11ec2:	607a      	str	r2, [r7, #4]
   11ec4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   11ec6:	7afb      	ldrb	r3, [r7, #11]
   11ec8:	68fa      	ldr	r2, [r7, #12]
   11eca:	01db      	lsls	r3, r3, #7
   11ecc:	4413      	add	r3, r2
   11ece:	3318      	adds	r3, #24
   11ed0:	687a      	ldr	r2, [r7, #4]
   11ed2:	601a      	str	r2, [r3, #0]
}
   11ed4:	bf00      	nop
   11ed6:	3714      	adds	r7, #20
   11ed8:	46bd      	mov	sp, r7
   11eda:	bc80      	pop	{r7}
   11edc:	4770      	bx	lr

00011ede <hri_port_clear_OUT_reg>:
{
   11ede:	b480      	push	{r7}
   11ee0:	b085      	sub	sp, #20
   11ee2:	af00      	add	r7, sp, #0
   11ee4:	60f8      	str	r0, [r7, #12]
   11ee6:	460b      	mov	r3, r1
   11ee8:	607a      	str	r2, [r7, #4]
   11eea:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   11eec:	7afb      	ldrb	r3, [r7, #11]
   11eee:	68fa      	ldr	r2, [r7, #12]
   11ef0:	01db      	lsls	r3, r3, #7
   11ef2:	4413      	add	r3, r2
   11ef4:	3314      	adds	r3, #20
   11ef6:	687a      	ldr	r2, [r7, #4]
   11ef8:	601a      	str	r2, [r3, #0]
}
   11efa:	bf00      	nop
   11efc:	3714      	adds	r7, #20
   11efe:	46bd      	mov	sp, r7
   11f00:	bc80      	pop	{r7}
   11f02:	4770      	bx	lr

00011f04 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   11f04:	b480      	push	{r7}
   11f06:	b085      	sub	sp, #20
   11f08:	af00      	add	r7, sp, #0
   11f0a:	6078      	str	r0, [r7, #4]
   11f0c:	4608      	mov	r0, r1
   11f0e:	4611      	mov	r1, r2
   11f10:	461a      	mov	r2, r3
   11f12:	4603      	mov	r3, r0
   11f14:	70fb      	strb	r3, [r7, #3]
   11f16:	460b      	mov	r3, r1
   11f18:	70bb      	strb	r3, [r7, #2]
   11f1a:	4613      	mov	r3, r2
   11f1c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   11f1e:	78fa      	ldrb	r2, [r7, #3]
   11f20:	78bb      	ldrb	r3, [r7, #2]
   11f22:	6879      	ldr	r1, [r7, #4]
   11f24:	01d2      	lsls	r2, r2, #7
   11f26:	440a      	add	r2, r1
   11f28:	4413      	add	r3, r2
   11f2a:	3330      	adds	r3, #48	; 0x30
   11f2c:	781b      	ldrb	r3, [r3, #0]
   11f2e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   11f30:	7bfb      	ldrb	r3, [r7, #15]
   11f32:	f023 030f 	bic.w	r3, r3, #15
   11f36:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   11f38:	787b      	ldrb	r3, [r7, #1]
   11f3a:	f003 030f 	and.w	r3, r3, #15
   11f3e:	b2da      	uxtb	r2, r3
   11f40:	7bfb      	ldrb	r3, [r7, #15]
   11f42:	4313      	orrs	r3, r2
   11f44:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   11f46:	78fa      	ldrb	r2, [r7, #3]
   11f48:	78bb      	ldrb	r3, [r7, #2]
   11f4a:	6879      	ldr	r1, [r7, #4]
   11f4c:	01d2      	lsls	r2, r2, #7
   11f4e:	440a      	add	r2, r1
   11f50:	4413      	add	r3, r2
   11f52:	3330      	adds	r3, #48	; 0x30
   11f54:	7bfa      	ldrb	r2, [r7, #15]
   11f56:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   11f58:	bf00      	nop
   11f5a:	3714      	adds	r7, #20
   11f5c:	46bd      	mov	sp, r7
   11f5e:	bc80      	pop	{r7}
   11f60:	4770      	bx	lr

00011f62 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   11f62:	b480      	push	{r7}
   11f64:	b085      	sub	sp, #20
   11f66:	af00      	add	r7, sp, #0
   11f68:	6078      	str	r0, [r7, #4]
   11f6a:	4608      	mov	r0, r1
   11f6c:	4611      	mov	r1, r2
   11f6e:	461a      	mov	r2, r3
   11f70:	4603      	mov	r3, r0
   11f72:	70fb      	strb	r3, [r7, #3]
   11f74:	460b      	mov	r3, r1
   11f76:	70bb      	strb	r3, [r7, #2]
   11f78:	4613      	mov	r3, r2
   11f7a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   11f7c:	78fa      	ldrb	r2, [r7, #3]
   11f7e:	78bb      	ldrb	r3, [r7, #2]
   11f80:	6879      	ldr	r1, [r7, #4]
   11f82:	01d2      	lsls	r2, r2, #7
   11f84:	440a      	add	r2, r1
   11f86:	4413      	add	r3, r2
   11f88:	3330      	adds	r3, #48	; 0x30
   11f8a:	781b      	ldrb	r3, [r3, #0]
   11f8c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   11f8e:	7bfb      	ldrb	r3, [r7, #15]
   11f90:	f003 030f 	and.w	r3, r3, #15
   11f94:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   11f96:	787b      	ldrb	r3, [r7, #1]
   11f98:	011b      	lsls	r3, r3, #4
   11f9a:	b2da      	uxtb	r2, r3
   11f9c:	7bfb      	ldrb	r3, [r7, #15]
   11f9e:	4313      	orrs	r3, r2
   11fa0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   11fa2:	78fa      	ldrb	r2, [r7, #3]
   11fa4:	78bb      	ldrb	r3, [r7, #2]
   11fa6:	6879      	ldr	r1, [r7, #4]
   11fa8:	01d2      	lsls	r2, r2, #7
   11faa:	440a      	add	r2, r1
   11fac:	4413      	add	r3, r2
   11fae:	3330      	adds	r3, #48	; 0x30
   11fb0:	7bfa      	ldrb	r2, [r7, #15]
   11fb2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   11fb4:	bf00      	nop
   11fb6:	3714      	adds	r7, #20
   11fb8:	46bd      	mov	sp, r7
   11fba:	bc80      	pop	{r7}
   11fbc:	4770      	bx	lr

00011fbe <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   11fbe:	b480      	push	{r7}
   11fc0:	b085      	sub	sp, #20
   11fc2:	af00      	add	r7, sp, #0
   11fc4:	6078      	str	r0, [r7, #4]
   11fc6:	4608      	mov	r0, r1
   11fc8:	4611      	mov	r1, r2
   11fca:	461a      	mov	r2, r3
   11fcc:	4603      	mov	r3, r0
   11fce:	70fb      	strb	r3, [r7, #3]
   11fd0:	460b      	mov	r3, r1
   11fd2:	70bb      	strb	r3, [r7, #2]
   11fd4:	4613      	mov	r3, r2
   11fd6:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   11fd8:	78fa      	ldrb	r2, [r7, #3]
   11fda:	78bb      	ldrb	r3, [r7, #2]
   11fdc:	6879      	ldr	r1, [r7, #4]
   11fde:	01d2      	lsls	r2, r2, #7
   11fe0:	440a      	add	r2, r1
   11fe2:	4413      	add	r3, r2
   11fe4:	3340      	adds	r3, #64	; 0x40
   11fe6:	781b      	ldrb	r3, [r3, #0]
   11fe8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   11fea:	7bfb      	ldrb	r3, [r7, #15]
   11fec:	f023 0301 	bic.w	r3, r3, #1
   11ff0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   11ff2:	787a      	ldrb	r2, [r7, #1]
   11ff4:	7bfb      	ldrb	r3, [r7, #15]
   11ff6:	4313      	orrs	r3, r2
   11ff8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   11ffa:	78fa      	ldrb	r2, [r7, #3]
   11ffc:	78bb      	ldrb	r3, [r7, #2]
   11ffe:	6879      	ldr	r1, [r7, #4]
   12000:	01d2      	lsls	r2, r2, #7
   12002:	440a      	add	r2, r1
   12004:	4413      	add	r3, r2
   12006:	3340      	adds	r3, #64	; 0x40
   12008:	7bfa      	ldrb	r2, [r7, #15]
   1200a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   1200c:	bf00      	nop
   1200e:	3714      	adds	r7, #20
   12010:	46bd      	mov	sp, r7
   12012:	bc80      	pop	{r7}
   12014:	4770      	bx	lr

00012016 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   12016:	b480      	push	{r7}
   12018:	b085      	sub	sp, #20
   1201a:	af00      	add	r7, sp, #0
   1201c:	60f8      	str	r0, [r7, #12]
   1201e:	460b      	mov	r3, r1
   12020:	607a      	str	r2, [r7, #4]
   12022:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   12024:	7afb      	ldrb	r3, [r7, #11]
   12026:	68fa      	ldr	r2, [r7, #12]
   12028:	01db      	lsls	r3, r3, #7
   1202a:	4413      	add	r3, r2
   1202c:	3328      	adds	r3, #40	; 0x28
   1202e:	687a      	ldr	r2, [r7, #4]
   12030:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   12032:	bf00      	nop
   12034:	3714      	adds	r7, #20
   12036:	46bd      	mov	sp, r7
   12038:	bc80      	pop	{r7}
   1203a:	4770      	bx	lr

0001203c <_gpio_set_direction>:
{
   1203c:	b580      	push	{r7, lr}
   1203e:	b082      	sub	sp, #8
   12040:	af00      	add	r7, sp, #0
   12042:	4603      	mov	r3, r0
   12044:	6039      	str	r1, [r7, #0]
   12046:	71fb      	strb	r3, [r7, #7]
   12048:	4613      	mov	r3, r2
   1204a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   1204c:	79bb      	ldrb	r3, [r7, #6]
   1204e:	2b01      	cmp	r3, #1
   12050:	d01c      	beq.n	1208c <_gpio_set_direction+0x50>
   12052:	2b02      	cmp	r3, #2
   12054:	d037      	beq.n	120c6 <_gpio_set_direction+0x8a>
   12056:	2b00      	cmp	r3, #0
   12058:	d14e      	bne.n	120f8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   1205a:	79fb      	ldrb	r3, [r7, #7]
   1205c:	683a      	ldr	r2, [r7, #0]
   1205e:	4619      	mov	r1, r3
   12060:	482a      	ldr	r0, [pc, #168]	; (1210c <_gpio_set_direction+0xd0>)
   12062:	4b2b      	ldr	r3, [pc, #172]	; (12110 <_gpio_set_direction+0xd4>)
   12064:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   12066:	683b      	ldr	r3, [r7, #0]
   12068:	b29b      	uxth	r3, r3
   1206a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   1206e:	79fb      	ldrb	r3, [r7, #7]
   12070:	4619      	mov	r1, r3
   12072:	4826      	ldr	r0, [pc, #152]	; (1210c <_gpio_set_direction+0xd0>)
   12074:	4b27      	ldr	r3, [pc, #156]	; (12114 <_gpio_set_direction+0xd8>)
   12076:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12078:	683b      	ldr	r3, [r7, #0]
   1207a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   1207c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12080:	79fb      	ldrb	r3, [r7, #7]
   12082:	4619      	mov	r1, r3
   12084:	4821      	ldr	r0, [pc, #132]	; (1210c <_gpio_set_direction+0xd0>)
   12086:	4b23      	ldr	r3, [pc, #140]	; (12114 <_gpio_set_direction+0xd8>)
   12088:	4798      	blx	r3
		break;
   1208a:	e03a      	b.n	12102 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   1208c:	79fb      	ldrb	r3, [r7, #7]
   1208e:	683a      	ldr	r2, [r7, #0]
   12090:	4619      	mov	r1, r3
   12092:	481e      	ldr	r0, [pc, #120]	; (1210c <_gpio_set_direction+0xd0>)
   12094:	4b1e      	ldr	r3, [pc, #120]	; (12110 <_gpio_set_direction+0xd4>)
   12096:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   12098:	683b      	ldr	r3, [r7, #0]
   1209a:	b29b      	uxth	r3, r3
   1209c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   120a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   120a4:	79f9      	ldrb	r1, [r7, #7]
   120a6:	461a      	mov	r2, r3
   120a8:	4818      	ldr	r0, [pc, #96]	; (1210c <_gpio_set_direction+0xd0>)
   120aa:	4b1a      	ldr	r3, [pc, #104]	; (12114 <_gpio_set_direction+0xd8>)
   120ac:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   120ae:	683b      	ldr	r3, [r7, #0]
   120b0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   120b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   120b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   120ba:	79f9      	ldrb	r1, [r7, #7]
   120bc:	461a      	mov	r2, r3
   120be:	4813      	ldr	r0, [pc, #76]	; (1210c <_gpio_set_direction+0xd0>)
   120c0:	4b14      	ldr	r3, [pc, #80]	; (12114 <_gpio_set_direction+0xd8>)
   120c2:	4798      	blx	r3
		break;
   120c4:	e01d      	b.n	12102 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   120c6:	79fb      	ldrb	r3, [r7, #7]
   120c8:	683a      	ldr	r2, [r7, #0]
   120ca:	4619      	mov	r1, r3
   120cc:	480f      	ldr	r0, [pc, #60]	; (1210c <_gpio_set_direction+0xd0>)
   120ce:	4b12      	ldr	r3, [pc, #72]	; (12118 <_gpio_set_direction+0xdc>)
   120d0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   120d2:	683b      	ldr	r3, [r7, #0]
   120d4:	b29b      	uxth	r3, r3
   120d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   120da:	79fb      	ldrb	r3, [r7, #7]
   120dc:	4619      	mov	r1, r3
   120de:	480b      	ldr	r0, [pc, #44]	; (1210c <_gpio_set_direction+0xd0>)
   120e0:	4b0c      	ldr	r3, [pc, #48]	; (12114 <_gpio_set_direction+0xd8>)
   120e2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   120e4:	683b      	ldr	r3, [r7, #0]
   120e6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   120e8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   120ec:	79fb      	ldrb	r3, [r7, #7]
   120ee:	4619      	mov	r1, r3
   120f0:	4806      	ldr	r0, [pc, #24]	; (1210c <_gpio_set_direction+0xd0>)
   120f2:	4b08      	ldr	r3, [pc, #32]	; (12114 <_gpio_set_direction+0xd8>)
   120f4:	4798      	blx	r3
		break;
   120f6:	e004      	b.n	12102 <_gpio_set_direction+0xc6>
		ASSERT(false);
   120f8:	2246      	movs	r2, #70	; 0x46
   120fa:	4908      	ldr	r1, [pc, #32]	; (1211c <_gpio_set_direction+0xe0>)
   120fc:	2000      	movs	r0, #0
   120fe:	4b08      	ldr	r3, [pc, #32]	; (12120 <_gpio_set_direction+0xe4>)
   12100:	4798      	blx	r3
}
   12102:	bf00      	nop
   12104:	3708      	adds	r7, #8
   12106:	46bd      	mov	sp, r7
   12108:	bd80      	pop	{r7, pc}
   1210a:	bf00      	nop
   1210c:	41008000 	.word	0x41008000
   12110:	00011e93 	.word	0x00011e93
   12114:	00012017 	.word	0x00012017
   12118:	00011e6d 	.word	0x00011e6d
   1211c:	0001ba3c 	.word	0x0001ba3c
   12120:	00006241 	.word	0x00006241

00012124 <_gpio_set_level>:
{
   12124:	b580      	push	{r7, lr}
   12126:	b082      	sub	sp, #8
   12128:	af00      	add	r7, sp, #0
   1212a:	4603      	mov	r3, r0
   1212c:	6039      	str	r1, [r7, #0]
   1212e:	71fb      	strb	r3, [r7, #7]
   12130:	4613      	mov	r3, r2
   12132:	71bb      	strb	r3, [r7, #6]
	if (level) {
   12134:	79bb      	ldrb	r3, [r7, #6]
   12136:	2b00      	cmp	r3, #0
   12138:	d006      	beq.n	12148 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   1213a:	79fb      	ldrb	r3, [r7, #7]
   1213c:	683a      	ldr	r2, [r7, #0]
   1213e:	4619      	mov	r1, r3
   12140:	4806      	ldr	r0, [pc, #24]	; (1215c <_gpio_set_level+0x38>)
   12142:	4b07      	ldr	r3, [pc, #28]	; (12160 <_gpio_set_level+0x3c>)
   12144:	4798      	blx	r3
}
   12146:	e005      	b.n	12154 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   12148:	79fb      	ldrb	r3, [r7, #7]
   1214a:	683a      	ldr	r2, [r7, #0]
   1214c:	4619      	mov	r1, r3
   1214e:	4803      	ldr	r0, [pc, #12]	; (1215c <_gpio_set_level+0x38>)
   12150:	4b04      	ldr	r3, [pc, #16]	; (12164 <_gpio_set_level+0x40>)
   12152:	4798      	blx	r3
}
   12154:	bf00      	nop
   12156:	3708      	adds	r7, #8
   12158:	46bd      	mov	sp, r7
   1215a:	bd80      	pop	{r7, pc}
   1215c:	41008000 	.word	0x41008000
   12160:	00011eb9 	.word	0x00011eb9
   12164:	00011edf 	.word	0x00011edf

00012168 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   12168:	b590      	push	{r4, r7, lr}
   1216a:	b085      	sub	sp, #20
   1216c:	af00      	add	r7, sp, #0
   1216e:	6078      	str	r0, [r7, #4]
   12170:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   12172:	687b      	ldr	r3, [r7, #4]
   12174:	095b      	lsrs	r3, r3, #5
   12176:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   12178:	687b      	ldr	r3, [r7, #4]
   1217a:	b2db      	uxtb	r3, r3
   1217c:	f003 031f 	and.w	r3, r3, #31
   12180:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   12182:	683b      	ldr	r3, [r7, #0]
   12184:	f1b3 3fff 	cmp.w	r3, #4294967295
   12188:	d106      	bne.n	12198 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   1218a:	7bba      	ldrb	r2, [r7, #14]
   1218c:	7bf9      	ldrb	r1, [r7, #15]
   1218e:	2300      	movs	r3, #0
   12190:	4812      	ldr	r0, [pc, #72]	; (121dc <_gpio_set_pin_function+0x74>)
   12192:	4c13      	ldr	r4, [pc, #76]	; (121e0 <_gpio_set_pin_function+0x78>)
   12194:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   12196:	e01d      	b.n	121d4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   12198:	7bba      	ldrb	r2, [r7, #14]
   1219a:	7bf9      	ldrb	r1, [r7, #15]
   1219c:	2301      	movs	r3, #1
   1219e:	480f      	ldr	r0, [pc, #60]	; (121dc <_gpio_set_pin_function+0x74>)
   121a0:	4c0f      	ldr	r4, [pc, #60]	; (121e0 <_gpio_set_pin_function+0x78>)
   121a2:	47a0      	blx	r4
		if (pin & 1) {
   121a4:	7bbb      	ldrb	r3, [r7, #14]
   121a6:	f003 0301 	and.w	r3, r3, #1
   121aa:	2b00      	cmp	r3, #0
   121ac:	d009      	beq.n	121c2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   121ae:	7bbb      	ldrb	r3, [r7, #14]
   121b0:	105b      	asrs	r3, r3, #1
   121b2:	b2da      	uxtb	r2, r3
   121b4:	683b      	ldr	r3, [r7, #0]
   121b6:	b2db      	uxtb	r3, r3
   121b8:	7bf9      	ldrb	r1, [r7, #15]
   121ba:	4808      	ldr	r0, [pc, #32]	; (121dc <_gpio_set_pin_function+0x74>)
   121bc:	4c09      	ldr	r4, [pc, #36]	; (121e4 <_gpio_set_pin_function+0x7c>)
   121be:	47a0      	blx	r4
}
   121c0:	e008      	b.n	121d4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   121c2:	7bbb      	ldrb	r3, [r7, #14]
   121c4:	105b      	asrs	r3, r3, #1
   121c6:	b2da      	uxtb	r2, r3
   121c8:	683b      	ldr	r3, [r7, #0]
   121ca:	b2db      	uxtb	r3, r3
   121cc:	7bf9      	ldrb	r1, [r7, #15]
   121ce:	4803      	ldr	r0, [pc, #12]	; (121dc <_gpio_set_pin_function+0x74>)
   121d0:	4c05      	ldr	r4, [pc, #20]	; (121e8 <_gpio_set_pin_function+0x80>)
   121d2:	47a0      	blx	r4
}
   121d4:	bf00      	nop
   121d6:	3714      	adds	r7, #20
   121d8:	46bd      	mov	sp, r7
   121da:	bd90      	pop	{r4, r7, pc}
   121dc:	41008000 	.word	0x41008000
   121e0:	00011fbf 	.word	0x00011fbf
   121e4:	00011f63 	.word	0x00011f63
   121e8:	00011f05 	.word	0x00011f05

000121ec <gpio_set_pin_function>:
{
   121ec:	b580      	push	{r7, lr}
   121ee:	b082      	sub	sp, #8
   121f0:	af00      	add	r7, sp, #0
   121f2:	6078      	str	r0, [r7, #4]
   121f4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   121f6:	6839      	ldr	r1, [r7, #0]
   121f8:	6878      	ldr	r0, [r7, #4]
   121fa:	4b03      	ldr	r3, [pc, #12]	; (12208 <gpio_set_pin_function+0x1c>)
   121fc:	4798      	blx	r3
}
   121fe:	bf00      	nop
   12200:	3708      	adds	r7, #8
   12202:	46bd      	mov	sp, r7
   12204:	bd80      	pop	{r7, pc}
   12206:	bf00      	nop
   12208:	00012169 	.word	0x00012169

0001220c <gpio_set_pin_direction>:
{
   1220c:	b580      	push	{r7, lr}
   1220e:	b082      	sub	sp, #8
   12210:	af00      	add	r7, sp, #0
   12212:	4603      	mov	r3, r0
   12214:	460a      	mov	r2, r1
   12216:	71fb      	strb	r3, [r7, #7]
   12218:	4613      	mov	r3, r2
   1221a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   1221c:	79fb      	ldrb	r3, [r7, #7]
   1221e:	115b      	asrs	r3, r3, #5
   12220:	b2d8      	uxtb	r0, r3
   12222:	79fb      	ldrb	r3, [r7, #7]
   12224:	f003 031f 	and.w	r3, r3, #31
   12228:	2201      	movs	r2, #1
   1222a:	fa02 f303 	lsl.w	r3, r2, r3
   1222e:	79ba      	ldrb	r2, [r7, #6]
   12230:	4619      	mov	r1, r3
   12232:	4b03      	ldr	r3, [pc, #12]	; (12240 <gpio_set_pin_direction+0x34>)
   12234:	4798      	blx	r3
}
   12236:	bf00      	nop
   12238:	3708      	adds	r7, #8
   1223a:	46bd      	mov	sp, r7
   1223c:	bd80      	pop	{r7, pc}
   1223e:	bf00      	nop
   12240:	0001203d 	.word	0x0001203d

00012244 <gpio_set_pin_level>:
{
   12244:	b580      	push	{r7, lr}
   12246:	b082      	sub	sp, #8
   12248:	af00      	add	r7, sp, #0
   1224a:	4603      	mov	r3, r0
   1224c:	460a      	mov	r2, r1
   1224e:	71fb      	strb	r3, [r7, #7]
   12250:	4613      	mov	r3, r2
   12252:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   12254:	79fb      	ldrb	r3, [r7, #7]
   12256:	115b      	asrs	r3, r3, #5
   12258:	b2d8      	uxtb	r0, r3
   1225a:	79fb      	ldrb	r3, [r7, #7]
   1225c:	f003 031f 	and.w	r3, r3, #31
   12260:	2201      	movs	r2, #1
   12262:	fa02 f303 	lsl.w	r3, r2, r3
   12266:	79ba      	ldrb	r2, [r7, #6]
   12268:	4619      	mov	r1, r3
   1226a:	4b03      	ldr	r3, [pc, #12]	; (12278 <gpio_set_pin_level+0x34>)
   1226c:	4798      	blx	r3
}
   1226e:	bf00      	nop
   12270:	3708      	adds	r7, #8
   12272:	46bd      	mov	sp, r7
   12274:	bd80      	pop	{r7, pc}
   12276:	bf00      	nop
   12278:	00012125 	.word	0x00012125

0001227c <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   1227c:	b580      	push	{r7, lr}
   1227e:	b082      	sub	sp, #8
   12280:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   12282:	2100      	movs	r1, #0
   12284:	2008      	movs	r0, #8
   12286:	4b24      	ldr	r3, [pc, #144]	; (12318 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   12288:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   1228a:	2100      	movs	r1, #0
   1228c:	202b      	movs	r0, #43	; 0x2b
   1228e:	4b22      	ldr	r3, [pc, #136]	; (12318 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   12290:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   12292:	2100      	movs	r1, #0
   12294:	202a      	movs	r0, #42	; 0x2a
   12296:	4b20      	ldr	r3, [pc, #128]	; (12318 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   12298:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   1229a:	2102      	movs	r1, #2
   1229c:	2008      	movs	r0, #8
   1229e:	4b1f      	ldr	r3, [pc, #124]	; (1231c <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   122a0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   122a2:	2102      	movs	r1, #2
   122a4:	202b      	movs	r0, #43	; 0x2b
   122a6:	4b1d      	ldr	r3, [pc, #116]	; (1231c <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   122a8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   122aa:	2102      	movs	r1, #2
   122ac:	202a      	movs	r0, #42	; 0x2a
   122ae:	4b1b      	ldr	r3, [pc, #108]	; (1231c <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   122b0:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   122b2:	2101      	movs	r1, #1
   122b4:	2008      	movs	r0, #8
   122b6:	4b1a      	ldr	r3, [pc, #104]	; (12320 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   122b8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   122ba:	2100      	movs	r1, #0
   122bc:	202b      	movs	r0, #43	; 0x2b
   122be:	4b18      	ldr	r3, [pc, #96]	; (12320 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   122c0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   122c2:	2100      	movs	r1, #0
   122c4:	202a      	movs	r0, #42	; 0x2a
   122c6:	4b16      	ldr	r3, [pc, #88]	; (12320 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   122c8:	4798      	blx	r3

	delay_us(1);
   122ca:	2001      	movs	r0, #1
   122cc:	4b15      	ldr	r3, [pc, #84]	; (12324 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   122ce:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   122d0:	2300      	movs	r3, #0
   122d2:	607b      	str	r3, [r7, #4]
   122d4:	687b      	ldr	r3, [r7, #4]
   122d6:	2b06      	cmp	r3, #6
   122d8:	dc11      	bgt.n	122fe <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   122da:	2101      	movs	r1, #1
   122dc:	202a      	movs	r0, #42	; 0x2a
   122de:	4b10      	ldr	r3, [pc, #64]	; (12320 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   122e0:	4798      	blx	r3
		delay_us(1);
   122e2:	2001      	movs	r0, #1
   122e4:	4b0f      	ldr	r3, [pc, #60]	; (12324 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   122e6:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   122e8:	2100      	movs	r1, #0
   122ea:	202a      	movs	r0, #42	; 0x2a
   122ec:	4b0c      	ldr	r3, [pc, #48]	; (12320 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   122ee:	4798      	blx	r3
		delay_us(1);
   122f0:	2001      	movs	r0, #1
   122f2:	4b0c      	ldr	r3, [pc, #48]	; (12324 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   122f4:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   122f6:	687b      	ldr	r3, [r7, #4]
   122f8:	3301      	adds	r3, #1
   122fa:	607b      	str	r3, [r7, #4]
   122fc:	e7ea      	b.n	122d4 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   122fe:	2101      	movs	r1, #1
   12300:	202b      	movs	r0, #43	; 0x2b
   12302:	4b07      	ldr	r3, [pc, #28]	; (12320 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12304:	4798      	blx	r3
	delay_us(1);
   12306:	2001      	movs	r0, #1
   12308:	4b06      	ldr	r3, [pc, #24]	; (12324 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1230a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   1230c:	4b06      	ldr	r3, [pc, #24]	; (12328 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   1230e:	4798      	blx	r3
}
   12310:	bf00      	nop
   12312:	3708      	adds	r7, #8
   12314:	46bd      	mov	sp, r7
   12316:	bd80      	pop	{r7, pc}
   12318:	000121ed 	.word	0x000121ed
   1231c:	0001220d 	.word	0x0001220d
   12320:	00012245 	.word	0x00012245
   12324:	00004649 	.word	0x00004649
   12328:	000036a5 	.word	0x000036a5

0001232c <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   1232c:	b480      	push	{r7}
   1232e:	b083      	sub	sp, #12
   12330:	af00      	add	r7, sp, #0
   12332:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   12334:	687b      	ldr	r3, [r7, #4]
   12336:	4618      	mov	r0, r3
   12338:	370c      	adds	r7, #12
   1233a:	46bd      	mov	sp, r7
   1233c:	bc80      	pop	{r7}
   1233e:	4770      	bx	lr

00012340 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   12340:	b480      	push	{r7}
   12342:	b083      	sub	sp, #12
   12344:	af00      	add	r7, sp, #0
   12346:	6078      	str	r0, [r7, #4]
   12348:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   1234a:	687b      	ldr	r3, [r7, #4]
   1234c:	683a      	ldr	r2, [r7, #0]
   1234e:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   12350:	687b      	ldr	r3, [r7, #4]
   12352:	4a04      	ldr	r2, [pc, #16]	; (12364 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   12354:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   12358:	687b      	ldr	r3, [r7, #4]
   1235a:	4618      	mov	r0, r3
   1235c:	370c      	adds	r7, #12
   1235e:	46bd      	mov	sp, r7
   12360:	bc80      	pop	{r7}
   12362:	4770      	bx	lr
   12364:	001fff00 	.word	0x001fff00

00012368 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   12368:	b480      	push	{r7}
   1236a:	b083      	sub	sp, #12
   1236c:	af00      	add	r7, sp, #0
   1236e:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   12370:	687b      	ldr	r3, [r7, #4]
   12372:	4618      	mov	r0, r3
   12374:	370c      	adds	r7, #12
   12376:	46bd      	mov	sp, r7
   12378:	bc80      	pop	{r7}
   1237a:	4770      	bx	lr

0001237c <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   1237c:	b580      	push	{r7, lr}
   1237e:	b082      	sub	sp, #8
   12380:	af00      	add	r7, sp, #0
   12382:	6078      	str	r0, [r7, #4]
	xferDone=false;
   12384:	687b      	ldr	r3, [r7, #4]
   12386:	2200      	movs	r2, #0
   12388:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   1238a:	6878      	ldr	r0, [r7, #4]
   1238c:	4b04      	ldr	r3, [pc, #16]	; (123a0 <_ZN13N25Q256_Class4InitEv+0x24>)
   1238e:	4798      	blx	r3
	return SelfTest();
   12390:	6878      	ldr	r0, [r7, #4]
   12392:	4b04      	ldr	r3, [pc, #16]	; (123a4 <_ZN13N25Q256_Class4InitEv+0x28>)
   12394:	4798      	blx	r3
   12396:	4603      	mov	r3, r0
}
   12398:	4618      	mov	r0, r3
   1239a:	3708      	adds	r7, #8
   1239c:	46bd      	mov	sp, r7
   1239e:	bd80      	pop	{r7, pc}
   123a0:	000123a9 	.word	0x000123a9
   123a4:	00012471 	.word	0x00012471

000123a8 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   123a8:	b590      	push	{r4, r7, lr}
   123aa:	b083      	sub	sp, #12
   123ac:	af00      	add	r7, sp, #0
   123ae:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   123b0:	687b      	ldr	r3, [r7, #4]
   123b2:	685b      	ldr	r3, [r3, #4]
   123b4:	4618      	mov	r0, r3
   123b6:	4b08      	ldr	r3, [pc, #32]	; (123d8 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   123b8:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   123ba:	687b      	ldr	r3, [r7, #4]
   123bc:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   123be:	2300      	movs	r3, #0
   123c0:	4a06      	ldr	r2, [pc, #24]	; (123dc <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   123c2:	4807      	ldr	r0, [pc, #28]	; (123e0 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   123c4:	4c07      	ldr	r4, [pc, #28]	; (123e4 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   123c6:	47a0      	blx	r4
   123c8:	4602      	mov	r2, r0
   123ca:	687b      	ldr	r3, [r7, #4]
   123cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   123d0:	bf00      	nop
   123d2:	370c      	adds	r7, #12
   123d4:	46bd      	mov	sp, r7
   123d6:	bd90      	pop	{r4, r7, pc}
   123d8:	00004d19 	.word	0x00004d19
   123dc:	0001227d 	.word	0x0001227d
   123e0:	20003ab8 	.word	0x20003ab8
   123e4:	0000e90d 	.word	0x0000e90d

000123e8 <_ZN13N25Q256_Class12WriteAddressEPhmm>:

uint32_t	N25Q256_Class::Write(uint8_t *p, uint32_t size){
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH,p, 0, size));
	return	w;
}
uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   123e8:	b590      	push	{r4, r7, lr}
   123ea:	b087      	sub	sp, #28
   123ec:	af00      	add	r7, sp, #0
   123ee:	60f8      	str	r0, [r7, #12]
   123f0:	60b9      	str	r1, [r7, #8]
   123f2:	607a      	str	r2, [r7, #4]
   123f4:	603b      	str	r3, [r7, #0]
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   123f6:	68fb      	ldr	r3, [r7, #12]
   123f8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   123fc:	685b      	ldr	r3, [r3, #4]
   123fe:	685c      	ldr	r4, [r3, #4]
   12400:	68fb      	ldr	r3, [r7, #12]
   12402:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   12406:	683b      	ldr	r3, [r7, #0]
   12408:	687a      	ldr	r2, [r7, #4]
   1240a:	68b9      	ldr	r1, [r7, #8]
   1240c:	47a0      	blx	r4
   1240e:	4603      	mov	r3, r0
   12410:	617b      	str	r3, [r7, #20]
	return	w;
   12412:	697b      	ldr	r3, [r7, #20]
}
   12414:	4618      	mov	r0, r3
   12416:	371c      	adds	r7, #28
   12418:	46bd      	mov	sp, r7
   1241a:	bd90      	pop	{r4, r7, pc}

0001241c <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   1241c:	b590      	push	{r4, r7, lr}
   1241e:	b087      	sub	sp, #28
   12420:	af00      	add	r7, sp, #0
   12422:	60f8      	str	r0, [r7, #12]
   12424:	60b9      	str	r1, [r7, #8]
   12426:	607a      	str	r2, [r7, #4]
   12428:	603b      	str	r3, [r7, #0]
	xferDone=false;
   1242a:	68fb      	ldr	r3, [r7, #12]
   1242c:	2200      	movs	r2, #0
   1242e:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   12430:	68fb      	ldr	r3, [r7, #12]
   12432:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   12436:	685b      	ldr	r3, [r3, #4]
   12438:	681c      	ldr	r4, [r3, #0]
   1243a:	68fb      	ldr	r3, [r7, #12]
   1243c:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   12440:	683b      	ldr	r3, [r7, #0]
   12442:	687a      	ldr	r2, [r7, #4]
   12444:	68b9      	ldr	r1, [r7, #8]
   12446:	47a0      	blx	r4
   12448:	4603      	mov	r3, r0
   1244a:	617b      	str	r3, [r7, #20]
	return	r;
   1244c:	697b      	ldr	r3, [r7, #20]
}
   1244e:	4618      	mov	r0, r3
   12450:	371c      	adds	r7, #28
   12452:	46bd      	mov	sp, r7
   12454:	bd90      	pop	{r4, r7, pc}

00012456 <_ZN13N25Q256_Class17GetMemoryCapacityEv>:
		uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
		uint8_t vcfg = n25q256a_read_reg(SPI_NOR_FLASH, width, N25Q_READ_STATUS_REGISTER);
		return	vcfg;
	
	}
uint32_t	N25Q256_Class::GetMemoryCapacity(){
   12456:	b480      	push	{r7}
   12458:	b083      	sub	sp, #12
   1245a:	af00      	add	r7, sp, #0
   1245c:	6078      	str	r0, [r7, #4]
	return	memoryCapacity;
   1245e:	687b      	ldr	r3, [r7, #4]
   12460:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
}
   12464:	4618      	mov	r0, r3
   12466:	370c      	adds	r7, #12
   12468:	46bd      	mov	sp, r7
   1246a:	bc80      	pop	{r7}
   1246c:	4770      	bx	lr
	...

00012470 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   12470:	b590      	push	{r4, r7, lr}
   12472:	b085      	sub	sp, #20
   12474:	af00      	add	r7, sp, #0
   12476:	6078      	str	r0, [r7, #4]
	for (int i = 0; i <QSPI_BUFFER_SIZE ; i++) {
   12478:	2300      	movs	r3, #0
   1247a:	60fb      	str	r3, [r7, #12]
   1247c:	68fb      	ldr	r3, [r7, #12]
   1247e:	2bff      	cmp	r3, #255	; 0xff
   12480:	dc0b      	bgt.n	1249a <_ZN13N25Q256_Class8SelfTestEv+0x2a>
		tx_buffer[i] = (uint8_t)i;
   12482:	68fb      	ldr	r3, [r7, #12]
   12484:	b2d9      	uxtb	r1, r3
   12486:	687a      	ldr	r2, [r7, #4]
   12488:	68fb      	ldr	r3, [r7, #12]
   1248a:	4413      	add	r3, r2
   1248c:	3308      	adds	r3, #8
   1248e:	460a      	mov	r2, r1
   12490:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <QSPI_BUFFER_SIZE ; i++) {
   12492:	68fb      	ldr	r3, [r7, #12]
   12494:	3301      	adds	r3, #1
   12496:	60fb      	str	r3, [r7, #12]
   12498:	e7f0      	b.n	1247c <_ZN13N25Q256_Class8SelfTestEv+0xc>
	}
	if (ERR_NONE ==WriteAddress((uint8_t *)tx_buffer,0,QSPI_BUFFER_SIZE)) {
   1249a:	687b      	ldr	r3, [r7, #4]
   1249c:	f103 0108 	add.w	r1, r3, #8
   124a0:	f44f 7380 	mov.w	r3, #256	; 0x100
   124a4:	2200      	movs	r2, #0
   124a6:	6878      	ldr	r0, [r7, #4]
   124a8:	4c1e      	ldr	r4, [pc, #120]	; (12524 <_ZN13N25Q256_Class8SelfTestEv+0xb4>)
   124aa:	47a0      	blx	r4
   124ac:	4603      	mov	r3, r0
   124ae:	2b00      	cmp	r3, #0
		//usb.print("Flash write successful \n\r");
	}
	delay_ms(100);
   124b0:	2064      	movs	r0, #100	; 0x64
   124b2:	4b1d      	ldr	r3, [pc, #116]	; (12528 <_ZN13N25Q256_Class8SelfTestEv+0xb8>)
   124b4:	4798      	blx	r3
	/* Read data from flash memory */
	if (ERR_NONE == ReadAddress((uint8_t *)rx_buffer,0,QSPI_BUFFER_SIZE)) {
   124b6:	687b      	ldr	r3, [r7, #4]
   124b8:	f503 7184 	add.w	r1, r3, #264	; 0x108
   124bc:	f44f 7380 	mov.w	r3, #256	; 0x100
   124c0:	2200      	movs	r2, #0
   124c2:	6878      	ldr	r0, [r7, #4]
   124c4:	4c19      	ldr	r4, [pc, #100]	; (1252c <_ZN13N25Q256_Class8SelfTestEv+0xbc>)
   124c6:	47a0      	blx	r4
   124c8:	4603      	mov	r3, r0
   124ca:	2b00      	cmp	r3, #0
		//while(!memory.xferDone);
		//usb.print("Flash read successful\n\r");
	}
	delay_ms(100);
   124cc:	2064      	movs	r0, #100	; 0x64
   124ce:	4b16      	ldr	r3, [pc, #88]	; (12528 <_ZN13N25Q256_Class8SelfTestEv+0xb8>)
   124d0:	4798      	blx	r3
	isOK	 = true;
   124d2:	687b      	ldr	r3, [r7, #4]
   124d4:	2201      	movs	r2, #1
   124d6:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_BUFFER_SIZE; i++) {
   124da:	2300      	movs	r3, #0
   124dc:	60bb      	str	r3, [r7, #8]
   124de:	68bb      	ldr	r3, [r7, #8]
   124e0:	2bff      	cmp	r3, #255	; 0xff
   124e2:	dc18      	bgt.n	12516 <_ZN13N25Q256_Class8SelfTestEv+0xa6>
		if (tx_buffer[i] != rx_buffer[i]) {
   124e4:	687a      	ldr	r2, [r7, #4]
   124e6:	68bb      	ldr	r3, [r7, #8]
   124e8:	4413      	add	r3, r2
   124ea:	3308      	adds	r3, #8
   124ec:	781a      	ldrb	r2, [r3, #0]
   124ee:	6879      	ldr	r1, [r7, #4]
   124f0:	68bb      	ldr	r3, [r7, #8]
   124f2:	440b      	add	r3, r1
   124f4:	f503 7384 	add.w	r3, r3, #264	; 0x108
   124f8:	781b      	ldrb	r3, [r3, #0]
   124fa:	429a      	cmp	r2, r3
   124fc:	d007      	beq.n	1250e <_ZN13N25Q256_Class8SelfTestEv+0x9e>
			isOK = false;
   124fe:	687b      	ldr	r3, [r7, #4]
   12500:	2200      	movs	r2, #0
   12502:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			i=QSPI_BUFFER_SIZE;
   12506:	f44f 7380 	mov.w	r3, #256	; 0x100
   1250a:	60bb      	str	r3, [r7, #8]
			break;
   1250c:	e003      	b.n	12516 <_ZN13N25Q256_Class8SelfTestEv+0xa6>
	for (int i = 0; i < QSPI_BUFFER_SIZE; i++) {
   1250e:	68bb      	ldr	r3, [r7, #8]
   12510:	3301      	adds	r3, #1
   12512:	60bb      	str	r3, [r7, #8]
   12514:	e7e3      	b.n	124de <_ZN13N25Q256_Class8SelfTestEv+0x6e>
		}
					
	}
	return	isOK;
   12516:	687b      	ldr	r3, [r7, #4]
   12518:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   1251c:	4618      	mov	r0, r3
   1251e:	3714      	adds	r7, #20
   12520:	46bd      	mov	sp, r7
   12522:	bd90      	pop	{r4, r7, pc}
   12524:	000123e9 	.word	0x000123e9
   12528:	0000467d 	.word	0x0000467d
   1252c:	0001241d 	.word	0x0001241d

00012530 <_Z41__static_initialization_and_destruction_0ii>:
   12530:	b580      	push	{r7, lr}
   12532:	b082      	sub	sp, #8
   12534:	af00      	add	r7, sp, #0
   12536:	6078      	str	r0, [r7, #4]
   12538:	6039      	str	r1, [r7, #0]
   1253a:	687b      	ldr	r3, [r7, #4]
   1253c:	2b01      	cmp	r3, #1
   1253e:	d10d      	bne.n	1255c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   12540:	683b      	ldr	r3, [r7, #0]
   12542:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12546:	4293      	cmp	r3, r2
   12548:	d108      	bne.n	1255c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1254a:	4906      	ldr	r1, [pc, #24]	; (12564 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1254c:	4806      	ldr	r0, [pc, #24]	; (12568 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1254e:	4b07      	ldr	r3, [pc, #28]	; (1256c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   12550:	4798      	blx	r3
   12552:	4a07      	ldr	r2, [pc, #28]	; (12570 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12554:	4907      	ldr	r1, [pc, #28]	; (12574 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   12556:	4804      	ldr	r0, [pc, #16]	; (12568 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12558:	4b07      	ldr	r3, [pc, #28]	; (12578 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1255a:	4798      	blx	r3
   1255c:	bf00      	nop
   1255e:	3708      	adds	r7, #8
   12560:	46bd      	mov	sp, r7
   12562:	bd80      	pop	{r7, pc}
   12564:	20003f70 	.word	0x20003f70
   12568:	20003ac8 	.word	0x20003ac8
   1256c:	00012341 	.word	0x00012341
   12570:	20000000 	.word	0x20000000
   12574:	00012369 	.word	0x00012369
   12578:	0001427d 	.word	0x0001427d

0001257c <_GLOBAL__sub_I_ptrN25Q256Class>:
   1257c:	b580      	push	{r7, lr}
   1257e:	af00      	add	r7, sp, #0
   12580:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12584:	2001      	movs	r0, #1
   12586:	4b01      	ldr	r3, [pc, #4]	; (1258c <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   12588:	4798      	blx	r3
   1258a:	bd80      	pop	{r7, pc}
   1258c:	00012531 	.word	0x00012531

00012590 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   12590:	b580      	push	{r7, lr}
   12592:	b082      	sub	sp, #8
   12594:	af00      	add	r7, sp, #0
   12596:	6078      	str	r0, [r7, #4]
   12598:	687b      	ldr	r3, [r7, #4]
   1259a:	4618      	mov	r0, r3
   1259c:	4b06      	ldr	r3, [pc, #24]	; (125b8 <_ZN14Calendar_ClassC1Ev+0x28>)
   1259e:	4798      	blx	r3
   125a0:	4a06      	ldr	r2, [pc, #24]	; (125bc <_ZN14Calendar_ClassC1Ev+0x2c>)
   125a2:	687b      	ldr	r3, [r7, #4]
   125a4:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   125a6:	4a06      	ldr	r2, [pc, #24]	; (125c0 <_ZN14Calendar_ClassC1Ev+0x30>)
   125a8:	687b      	ldr	r3, [r7, #4]
   125aa:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   125ac:	687b      	ldr	r3, [r7, #4]
   125ae:	4618      	mov	r0, r3
   125b0:	3708      	adds	r7, #8
   125b2:	46bd      	mov	sp, r7
   125b4:	bd80      	pop	{r7, pc}
   125b6:	bf00      	nop
   125b8:	00012ced 	.word	0x00012ced
   125bc:	0001ba7c 	.word	0x0001ba7c
   125c0:	20003ce0 	.word	0x20003ce0

000125c4 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   125c4:	b580      	push	{r7, lr}
   125c6:	b082      	sub	sp, #8
   125c8:	af00      	add	r7, sp, #0
   125ca:	6078      	str	r0, [r7, #4]
   125cc:	6039      	str	r1, [r7, #0]
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	4618      	mov	r0, r3
   125d2:	4b08      	ldr	r3, [pc, #32]	; (125f4 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   125d4:	4798      	blx	r3
   125d6:	4a08      	ldr	r2, [pc, #32]	; (125f8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   125d8:	687b      	ldr	r3, [r7, #4]
   125da:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	683a      	ldr	r2, [r7, #0]
   125e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
   125e4:	4a05      	ldr	r2, [pc, #20]	; (125fc <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   125e6:	687b      	ldr	r3, [r7, #4]
   125e8:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   125ea:	687b      	ldr	r3, [r7, #4]
   125ec:	4618      	mov	r0, r3
   125ee:	3708      	adds	r7, #8
   125f0:	46bd      	mov	sp, r7
   125f2:	bd80      	pop	{r7, pc}
   125f4:	00012ced 	.word	0x00012ced
   125f8:	0001ba7c 	.word	0x0001ba7c
   125fc:	20003ce0 	.word	0x20003ce0

00012600 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   12600:	b580      	push	{r7, lr}
   12602:	b082      	sub	sp, #8
   12604:	af00      	add	r7, sp, #0
   12606:	6078      	str	r0, [r7, #4]
   12608:	4a05      	ldr	r2, [pc, #20]	; (12620 <_ZN14Calendar_ClassD1Ev+0x20>)
   1260a:	687b      	ldr	r3, [r7, #4]
   1260c:	601a      	str	r2, [r3, #0]
   1260e:	687b      	ldr	r3, [r7, #4]
   12610:	4618      	mov	r0, r3
   12612:	4b04      	ldr	r3, [pc, #16]	; (12624 <_ZN14Calendar_ClassD1Ev+0x24>)
   12614:	4798      	blx	r3
{
} //~Calendar_Class
   12616:	687b      	ldr	r3, [r7, #4]
   12618:	4618      	mov	r0, r3
   1261a:	3708      	adds	r7, #8
   1261c:	46bd      	mov	sp, r7
   1261e:	bd80      	pop	{r7, pc}
   12620:	0001ba7c 	.word	0x0001ba7c
   12624:	00012d0d 	.word	0x00012d0d

00012628 <_ZN14Calendar_Class4InitEv>:

void	Calendar_Class::Init(void){
   12628:	b580      	push	{r7, lr}
   1262a:	b082      	sub	sp, #8
   1262c:	af00      	add	r7, sp, #0
   1262e:	6078      	str	r0, [r7, #4]
	ptrMemory=&eeprom;
   12630:	687b      	ldr	r3, [r7, #4]
   12632:	4a53      	ldr	r2, [pc, #332]	; (12780 <_ZN14Calendar_Class4InitEv+0x158>)
   12634:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	calendar_enable(ptrCalendar);
   12638:	687b      	ldr	r3, [r7, #4]
   1263a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1263e:	4618      	mov	r0, r3
   12640:	4b50      	ldr	r3, [pc, #320]	; (12784 <_ZN14Calendar_Class4InitEv+0x15c>)
   12642:	4798      	blx	r3
	ptrMemory->Init();
   12644:	687b      	ldr	r3, [r7, #4]
   12646:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1264a:	4618      	mov	r0, r3
   1264c:	4b4e      	ldr	r3, [pc, #312]	; (12788 <_ZN14Calendar_Class4InitEv+0x160>)
   1264e:	4798      	blx	r3
	InitMaxDate();
   12650:	6878      	ldr	r0, [r7, #4]
   12652:	4b4e      	ldr	r3, [pc, #312]	; (1278c <_ZN14Calendar_Class4InitEv+0x164>)
   12654:	4798      	blx	r3
	
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	ReadLastDateTime();
   12656:	687b      	ldr	r3, [r7, #4]
   12658:	4618      	mov	r0, r3
   1265a:	4b4d      	ldr	r3, [pc, #308]	; (12790 <_ZN14Calendar_Class4InitEv+0x168>)
   1265c:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   1265e:	687b      	ldr	r3, [r7, #4]
   12660:	681b      	ldr	r3, [r3, #0]
   12662:	3304      	adds	r3, #4
   12664:	681b      	ldr	r3, [r3, #0]
   12666:	687a      	ldr	r2, [r7, #4]
   12668:	3260      	adds	r2, #96	; 0x60
   1266a:	4611      	mov	r1, r2
   1266c:	6878      	ldr	r0, [r7, #4]
   1266e:	4798      	blx	r3
   12670:	4602      	mov	r2, r0
   12672:	687b      	ldr	r3, [r7, #4]
   12674:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   12678:	687b      	ldr	r3, [r7, #4]
   1267a:	681b      	ldr	r3, [r3, #0]
   1267c:	3304      	adds	r3, #4
   1267e:	681b      	ldr	r3, [r3, #0]
   12680:	687a      	ldr	r2, [r7, #4]
   12682:	326c      	adds	r2, #108	; 0x6c
   12684:	4611      	mov	r1, r2
   12686:	6878      	ldr	r0, [r7, #4]
   12688:	4798      	blx	r3
   1268a:	4602      	mov	r2, r0
   1268c:	687b      	ldr	r3, [r7, #4]
   1268e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   12692:	687b      	ldr	r3, [r7, #4]
   12694:	681b      	ldr	r3, [r3, #0]
   12696:	3304      	adds	r3, #4
   12698:	681b      	ldr	r3, [r3, #0]
   1269a:	687a      	ldr	r2, [r7, #4]
   1269c:	327c      	adds	r2, #124	; 0x7c
   1269e:	4611      	mov	r1, r2
   126a0:	6878      	ldr	r0, [r7, #4]
   126a2:	4798      	blx	r3
   126a4:	4602      	mov	r2, r0
   126a6:	687b      	ldr	r3, [r7, #4]
   126a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   126ac:	687b      	ldr	r3, [r7, #4]
   126ae:	681b      	ldr	r3, [r3, #0]
   126b0:	3304      	adds	r3, #4
   126b2:	681b      	ldr	r3, [r3, #0]
   126b4:	687a      	ldr	r2, [r7, #4]
   126b6:	3284      	adds	r2, #132	; 0x84
   126b8:	4611      	mov	r1, r2
   126ba:	6878      	ldr	r0, [r7, #4]
   126bc:	4798      	blx	r3
   126be:	4602      	mov	r2, r0
   126c0:	687b      	ldr	r3, [r7, #4]
   126c2:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   126c4:	6878      	ldr	r0, [r7, #4]
   126c6:	4b33      	ldr	r3, [pc, #204]	; (12794 <_ZN14Calendar_Class4InitEv+0x16c>)
   126c8:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   126ca:	687b      	ldr	r3, [r7, #4]
   126cc:	681b      	ldr	r3, [r3, #0]
   126ce:	3304      	adds	r3, #4
   126d0:	681b      	ldr	r3, [r3, #0]
   126d2:	687a      	ldr	r2, [r7, #4]
   126d4:	3274      	adds	r2, #116	; 0x74
   126d6:	4611      	mov	r1, r2
   126d8:	6878      	ldr	r0, [r7, #4]
   126da:	4798      	blx	r3
   126dc:	4602      	mov	r2, r0
   126de:	687b      	ldr	r3, [r7, #4]
   126e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   126e4:	687b      	ldr	r3, [r7, #4]
   126e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   126ea:	687b      	ldr	r3, [r7, #4]
   126ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   126f0:	429a      	cmp	r2, r3
   126f2:	d80e      	bhi.n	12712 <_ZN14Calendar_Class4InitEv+0xea>
   126f4:	687b      	ldr	r3, [r7, #4]
   126f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   126fa:	687b      	ldr	r3, [r7, #4]
   126fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   12700:	429a      	cmp	r2, r3
   12702:	d006      	beq.n	12712 <_ZN14Calendar_Class4InitEv+0xea>
   12704:	687b      	ldr	r3, [r7, #4]
   12706:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1270a:	687b      	ldr	r3, [r7, #4]
   1270c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1270e:	429a      	cmp	r2, r3
   12710:	d106      	bne.n	12720 <_ZN14Calendar_Class4InitEv+0xf8>
	{
		SetDateTime(&compilationDateTime);
   12712:	687b      	ldr	r3, [r7, #4]
   12714:	3374      	adds	r3, #116	; 0x74
   12716:	4619      	mov	r1, r3
   12718:	6878      	ldr	r0, [r7, #4]
   1271a:	4b1f      	ldr	r3, [pc, #124]	; (12798 <_ZN14Calendar_Class4InitEv+0x170>)
   1271c:	4798      	blx	r3
   1271e:	e022      	b.n	12766 <_ZN14Calendar_Class4InitEv+0x13e>
	}
	else
	{
		if (lastTimestamp<currentTimestamp)
   12720:	687b      	ldr	r3, [r7, #4]
   12722:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12726:	687b      	ldr	r3, [r7, #4]
   12728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   1272c:	429a      	cmp	r2, r3
   1272e:	d206      	bcs.n	1273e <_ZN14Calendar_Class4InitEv+0x116>
		{
			SetDateTime(&compilationDateTime);
   12730:	687b      	ldr	r3, [r7, #4]
   12732:	3374      	adds	r3, #116	; 0x74
   12734:	4619      	mov	r1, r3
   12736:	6878      	ldr	r0, [r7, #4]
   12738:	4b17      	ldr	r3, [pc, #92]	; (12798 <_ZN14Calendar_Class4InitEv+0x170>)
   1273a:	4798      	blx	r3
   1273c:	e013      	b.n	12766 <_ZN14Calendar_Class4InitEv+0x13e>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   1273e:	687b      	ldr	r3, [r7, #4]
   12740:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12744:	687b      	ldr	r3, [r7, #4]
   12746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   12748:	429a      	cmp	r2, r3
   1274a:	d106      	bne.n	1275a <_ZN14Calendar_Class4InitEv+0x132>
			{
				SetDateTime(&compilationDateTime);
   1274c:	687b      	ldr	r3, [r7, #4]
   1274e:	3374      	adds	r3, #116	; 0x74
   12750:	4619      	mov	r1, r3
   12752:	6878      	ldr	r0, [r7, #4]
   12754:	4b10      	ldr	r3, [pc, #64]	; (12798 <_ZN14Calendar_Class4InitEv+0x170>)
   12756:	4798      	blx	r3
   12758:	e005      	b.n	12766 <_ZN14Calendar_Class4InitEv+0x13e>
			} 
			else
			{
				SetDateTime(&lastDateTime);
   1275a:	687b      	ldr	r3, [r7, #4]
   1275c:	3360      	adds	r3, #96	; 0x60
   1275e:	4619      	mov	r1, r3
   12760:	6878      	ldr	r0, [r7, #4]
   12762:	4b0d      	ldr	r3, [pc, #52]	; (12798 <_ZN14Calendar_Class4InitEv+0x170>)
   12764:	4798      	blx	r3
			}
		
		}
	}
	enlapsedTime=false;
   12766:	687b      	ldr	r3, [r7, #4]
   12768:	2200      	movs	r2, #0
   1276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SaveCurrentDateTime();
   1276e:	687b      	ldr	r3, [r7, #4]
   12770:	4618      	mov	r0, r3
   12772:	4b0a      	ldr	r3, [pc, #40]	; (1279c <_ZN14Calendar_Class4InitEv+0x174>)
   12774:	4798      	blx	r3
	
}
   12776:	bf00      	nop
   12778:	3708      	adds	r7, #8
   1277a:	46bd      	mov	sp, r7
   1277c:	bd80      	pop	{r7, pc}
   1277e:	bf00      	nop
   12780:	20003a98 	.word	0x20003a98
   12784:	000042d5 	.word	0x000042d5
   12788:	00011b91 	.word	0x00011b91
   1278c:	000127a1 	.word	0x000127a1
   12790:	00012fc1 	.word	0x00012fc1
   12794:	00012847 	.word	0x00012847
   12798:	00012a3d 	.word	0x00012a3d
   1279c:	00012f51 	.word	0x00012f51

000127a0 <_ZN14Calendar_Class11InitMaxDateEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitMaxDate(void){
   127a0:	b480      	push	{r7}
   127a2:	b083      	sub	sp, #12
   127a4:	af00      	add	r7, sp, #0
   127a6:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   127a8:	687b      	ldr	r3, [r7, #4]
   127aa:	f640 0202 	movw	r2, #2050	; 0x802
   127ae:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   127b2:	687b      	ldr	r3, [r7, #4]
   127b4:	220c      	movs	r2, #12
   127b6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   127ba:	687b      	ldr	r3, [r7, #4]
   127bc:	221f      	movs	r2, #31
   127be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   127c2:	687b      	ldr	r3, [r7, #4]
   127c4:	220c      	movs	r2, #12
   127c6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   127ca:	687b      	ldr	r3, [r7, #4]
   127cc:	223b      	movs	r2, #59	; 0x3b
   127ce:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   127d2:	687b      	ldr	r3, [r7, #4]
   127d4:	223b      	movs	r2, #59	; 0x3b
   127d6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   127da:	687b      	ldr	r3, [r7, #4]
   127dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   127e0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   127e4:	687b      	ldr	r3, [r7, #4]
   127e6:	22ff      	movs	r2, #255	; 0xff
   127e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	22ff      	movs	r2, #255	; 0xff
   127f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   127f4:	687b      	ldr	r3, [r7, #4]
   127f6:	22ff      	movs	r2, #255	; 0xff
   127f8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   127fc:	687b      	ldr	r3, [r7, #4]
   127fe:	22ff      	movs	r2, #255	; 0xff
   12800:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   12804:	687b      	ldr	r3, [r7, #4]
   12806:	22ff      	movs	r2, #255	; 0xff
   12808:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   1280c:	687b      	ldr	r3, [r7, #4]
   1280e:	2200      	movs	r2, #0
   12810:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	2200      	movs	r2, #0
   12818:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   1281c:	687b      	ldr	r3, [r7, #4]
   1281e:	2200      	movs	r2, #0
   12820:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   12824:	687b      	ldr	r3, [r7, #4]
   12826:	2200      	movs	r2, #0
   12828:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   1282c:	687b      	ldr	r3, [r7, #4]
   1282e:	2200      	movs	r2, #0
   12830:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   12834:	687b      	ldr	r3, [r7, #4]
   12836:	2200      	movs	r2, #0
   12838:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   1283c:	bf00      	nop
   1283e:	370c      	adds	r7, #12
   12840:	46bd      	mov	sp, r7
   12842:	bc80      	pop	{r7}
   12844:	4770      	bx	lr

00012846 <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   12846:	b480      	push	{r7}
   12848:	b083      	sub	sp, #12
   1284a:	af00      	add	r7, sp, #0
   1284c:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   1284e:	2332      	movs	r3, #50	; 0x32
   12850:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   12854:	4613      	mov	r3, r2
   12856:	009b      	lsls	r3, r3, #2
   12858:	4413      	add	r3, r2
   1285a:	005b      	lsls	r3, r3, #1
   1285c:	461a      	mov	r2, r3
   1285e:	2330      	movs	r3, #48	; 0x30
   12860:	3b30      	subs	r3, #48	; 0x30
   12862:	441a      	add	r2, r3
   12864:	4613      	mov	r3, r2
   12866:	009b      	lsls	r3, r3, #2
   12868:	4413      	add	r3, r2
   1286a:	005b      	lsls	r3, r3, #1
   1286c:	461a      	mov	r2, r3
   1286e:	2332      	movs	r3, #50	; 0x32
   12870:	3b30      	subs	r3, #48	; 0x30
   12872:	4413      	add	r3, r2
   12874:	b29b      	uxth	r3, r3
   12876:	461a      	mov	r2, r3
   12878:	0092      	lsls	r2, r2, #2
   1287a:	4413      	add	r3, r2
   1287c:	005b      	lsls	r3, r3, #1
   1287e:	b29a      	uxth	r2, r3
   12880:	2330      	movs	r3, #48	; 0x30
   12882:	b29b      	uxth	r3, r3
   12884:	4413      	add	r3, r2
   12886:	b29b      	uxth	r3, r3
   12888:	3b30      	subs	r3, #48	; 0x30
   1288a:	b29a      	uxth	r2, r3
   1288c:	687b      	ldr	r3, [r7, #4]
   1288e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   12892:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   12894:	2b6e      	cmp	r3, #110	; 0x6e
   12896:	d106      	bne.n	128a6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   12898:	2375      	movs	r3, #117	; 0x75
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1289a:	2b61      	cmp	r3, #97	; 0x61
   1289c:	d101      	bne.n	128a2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   1289e:	2301      	movs	r3, #1
   128a0:	e02f      	b.n	12902 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   128a2:	2306      	movs	r3, #6
   128a4:	e02d      	b.n	12902 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   128a6:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   128a8:	2b62      	cmp	r3, #98	; 0x62
   128aa:	d029      	beq.n	12900 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   128ac:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   128ae:	2b72      	cmp	r3, #114	; 0x72
   128b0:	d106      	bne.n	128c0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   128b2:	234a      	movs	r3, #74	; 0x4a
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   128b4:	2b4d      	cmp	r3, #77	; 0x4d
   128b6:	d101      	bne.n	128bc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   128b8:	2303      	movs	r3, #3
   128ba:	e022      	b.n	12902 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   128bc:	2304      	movs	r3, #4
   128be:	e020      	b.n	12902 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   128c0:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   128c2:	2b79      	cmp	r3, #121	; 0x79
   128c4:	d01a      	beq.n	128fc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   128c6:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   128c8:	2b6c      	cmp	r3, #108	; 0x6c
   128ca:	d015      	beq.n	128f8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   128cc:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   128ce:	2b67      	cmp	r3, #103	; 0x67
   128d0:	d010      	beq.n	128f4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   128d2:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   128d4:	2b70      	cmp	r3, #112	; 0x70
   128d6:	d00b      	beq.n	128f0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   128d8:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   128da:	2b74      	cmp	r3, #116	; 0x74
   128dc:	d006      	beq.n	128ec <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   128de:	236c      	movs	r3, #108	; 0x6c
   128e0:	2b76      	cmp	r3, #118	; 0x76
   128e2:	d101      	bne.n	128e8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   128e4:	230b      	movs	r3, #11
   128e6:	e00c      	b.n	12902 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   128e8:	230c      	movs	r3, #12
   128ea:	e00a      	b.n	12902 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   128ec:	230a      	movs	r3, #10
   128ee:	e008      	b.n	12902 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   128f0:	2309      	movs	r3, #9
   128f2:	e006      	b.n	12902 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   128f4:	2308      	movs	r3, #8
   128f6:	e004      	b.n	12902 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   128f8:	2307      	movs	r3, #7
   128fa:	e002      	b.n	12902 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   128fc:	2305      	movs	r3, #5
   128fe:	e000      	b.n	12902 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   12900:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   12902:	687a      	ldr	r2, [r7, #4]
   12904:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   12908:	2332      	movs	r3, #50	; 0x32
   1290a:	2b20      	cmp	r3, #32
   1290c:	d008      	beq.n	12920 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   1290e:	2332      	movs	r3, #50	; 0x32
   12910:	3b30      	subs	r3, #48	; 0x30
   12912:	b2db      	uxtb	r3, r3
   12914:	461a      	mov	r2, r3
   12916:	0092      	lsls	r2, r2, #2
   12918:	4413      	add	r3, r2
   1291a:	005b      	lsls	r3, r3, #1
   1291c:	b2db      	uxtb	r3, r3
   1291e:	e000      	b.n	12922 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   12920:	2300      	movs	r3, #0
   12922:	2239      	movs	r2, #57	; 0x39
   12924:	4413      	add	r3, r2
   12926:	b2db      	uxtb	r3, r3
   12928:	3b30      	subs	r3, #48	; 0x30
   1292a:	b2da      	uxtb	r2, r3
   1292c:	687b      	ldr	r3, [r7, #4]
   1292e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   12932:	2331      	movs	r3, #49	; 0x31
   12934:	3b30      	subs	r3, #48	; 0x30
   12936:	b2db      	uxtb	r3, r3
   12938:	461a      	mov	r2, r3
   1293a:	0092      	lsls	r2, r2, #2
   1293c:	4413      	add	r3, r2
   1293e:	005b      	lsls	r3, r3, #1
   12940:	b2db      	uxtb	r3, r3
   12942:	2237      	movs	r2, #55	; 0x37
   12944:	4413      	add	r3, r2
   12946:	b2db      	uxtb	r3, r3
   12948:	3b30      	subs	r3, #48	; 0x30
   1294a:	b2da      	uxtb	r2, r3
   1294c:	687b      	ldr	r3, [r7, #4]
   1294e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   12952:	2331      	movs	r3, #49	; 0x31
   12954:	3b30      	subs	r3, #48	; 0x30
   12956:	b2db      	uxtb	r3, r3
   12958:	461a      	mov	r2, r3
   1295a:	0092      	lsls	r2, r2, #2
   1295c:	4413      	add	r3, r2
   1295e:	005b      	lsls	r3, r3, #1
   12960:	b2db      	uxtb	r3, r3
   12962:	2231      	movs	r2, #49	; 0x31
   12964:	4413      	add	r3, r2
   12966:	b2db      	uxtb	r3, r3
   12968:	3b30      	subs	r3, #48	; 0x30
   1296a:	b2da      	uxtb	r2, r3
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   12972:	2330      	movs	r3, #48	; 0x30
   12974:	3b30      	subs	r3, #48	; 0x30
   12976:	b2db      	uxtb	r3, r3
   12978:	461a      	mov	r2, r3
   1297a:	0092      	lsls	r2, r2, #2
   1297c:	4413      	add	r3, r2
   1297e:	005b      	lsls	r3, r3, #1
   12980:	b2db      	uxtb	r3, r3
   12982:	2236      	movs	r2, #54	; 0x36
   12984:	4413      	add	r3, r2
   12986:	b2db      	uxtb	r3, r3
   12988:	3b30      	subs	r3, #48	; 0x30
   1298a:	b2da      	uxtb	r2, r3
   1298c:	687b      	ldr	r3, [r7, #4]
   1298e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
   12992:	bf00      	nop
   12994:	370c      	adds	r7, #12
   12996:	46bd      	mov	sp, r7
   12998:	bc80      	pop	{r7}
   1299a:	4770      	bx	lr

0001299c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   1299c:	b580      	push	{r7, lr}
   1299e:	b082      	sub	sp, #8
   129a0:	af00      	add	r7, sp, #0
   129a2:	6078      	str	r0, [r7, #4]
   129a4:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   129a6:	687b      	ldr	r3, [r7, #4]
   129a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   129ac:	6839      	ldr	r1, [r7, #0]
   129ae:	4618      	mov	r0, r3
   129b0:	4b03      	ldr	r3, [pc, #12]	; (129c0 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   129b2:	4798      	blx	r3
   129b4:	4603      	mov	r3, r0
}
   129b6:	4618      	mov	r0, r3
   129b8:	3708      	adds	r7, #8
   129ba:	46bd      	mov	sp, r7
   129bc:	bd80      	pop	{r7, pc}
   129be:	bf00      	nop
   129c0:	00004425 	.word	0x00004425

000129c4 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   129c4:	b480      	push	{r7}
   129c6:	b083      	sub	sp, #12
   129c8:	af00      	add	r7, sp, #0
   129ca:	6078      	str	r0, [r7, #4]
   129cc:	460b      	mov	r3, r1
   129ce:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   129d0:	887b      	ldrh	r3, [r7, #2]
   129d2:	f003 0303 	and.w	r3, r3, #3
   129d6:	2b00      	cmp	r3, #0
   129d8:	d001      	beq.n	129de <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   129da:	2300      	movs	r3, #0
   129dc:	e000      	b.n	129e0 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   129de:	2301      	movs	r3, #1
	}
}
   129e0:	4618      	mov	r0, r3
   129e2:	370c      	adds	r7, #12
   129e4:	46bd      	mov	sp, r7
   129e6:	bc80      	pop	{r7}
   129e8:	4770      	bx	lr
	...

000129ec <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   129ec:	b580      	push	{r7, lr}
   129ee:	b082      	sub	sp, #8
   129f0:	af00      	add	r7, sp, #0
   129f2:	6078      	str	r0, [r7, #4]
   129f4:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   129f6:	687b      	ldr	r3, [r7, #4]
   129f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   129fc:	6839      	ldr	r1, [r7, #0]
   129fe:	4618      	mov	r0, r3
   12a00:	4b03      	ldr	r3, [pc, #12]	; (12a10 <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   12a02:	4798      	blx	r3
   12a04:	4603      	mov	r3, r0
}
   12a06:	4618      	mov	r0, r3
   12a08:	3708      	adds	r7, #8
   12a0a:	46bd      	mov	sp, r7
   12a0c:	bd80      	pop	{r7, pc}
   12a0e:	bf00      	nop
   12a10:	00004315 	.word	0x00004315

00012a14 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   12a14:	b580      	push	{r7, lr}
   12a16:	b082      	sub	sp, #8
   12a18:	af00      	add	r7, sp, #0
   12a1a:	6078      	str	r0, [r7, #4]
   12a1c:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   12a1e:	687b      	ldr	r3, [r7, #4]
   12a20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   12a24:	6839      	ldr	r1, [r7, #0]
   12a26:	4618      	mov	r0, r3
   12a28:	4b03      	ldr	r3, [pc, #12]	; (12a38 <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   12a2a:	4798      	blx	r3
   12a2c:	4603      	mov	r3, r0
}
   12a2e:	4618      	mov	r0, r3
   12a30:	3708      	adds	r7, #8
   12a32:	46bd      	mov	sp, r7
   12a34:	bd80      	pop	{r7, pc}
   12a36:	bf00      	nop
   12a38:	0000439d 	.word	0x0000439d

00012a3c <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   12a3c:	b580      	push	{r7, lr}
   12a3e:	b084      	sub	sp, #16
   12a40:	af00      	add	r7, sp, #0
   12a42:	6078      	str	r0, [r7, #4]
   12a44:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   12a46:	683a      	ldr	r2, [r7, #0]
   12a48:	f107 030c 	add.w	r3, r7, #12
   12a4c:	3204      	adds	r2, #4
   12a4e:	6810      	ldr	r0, [r2, #0]
   12a50:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   12a52:	f107 030c 	add.w	r3, r7, #12
   12a56:	4619      	mov	r1, r3
   12a58:	6878      	ldr	r0, [r7, #4]
   12a5a:	4b0a      	ldr	r3, [pc, #40]	; (12a84 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   12a5c:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   12a5e:	683a      	ldr	r2, [r7, #0]
   12a60:	f107 0308 	add.w	r3, r7, #8
   12a64:	8811      	ldrh	r1, [r2, #0]
   12a66:	7892      	ldrb	r2, [r2, #2]
   12a68:	8019      	strh	r1, [r3, #0]
   12a6a:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   12a6c:	f107 0308 	add.w	r3, r7, #8
   12a70:	4619      	mov	r1, r3
   12a72:	6878      	ldr	r0, [r7, #4]
   12a74:	4b04      	ldr	r3, [pc, #16]	; (12a88 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   12a76:	4798      	blx	r3
   12a78:	4603      	mov	r3, r0
			
}
   12a7a:	4618      	mov	r0, r3
   12a7c:	3710      	adds	r7, #16
   12a7e:	46bd      	mov	sp, r7
   12a80:	bd80      	pop	{r7, pc}
   12a82:	bf00      	nop
   12a84:	00012a15 	.word	0x00012a15
   12a88:	000129ed 	.word	0x000129ed

00012a8c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b086      	sub	sp, #24
   12a90:	af00      	add	r7, sp, #0
   12a92:	6078      	str	r0, [r7, #4]
   12a94:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   12a96:	2300      	movs	r3, #0
   12a98:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   12a9a:	2300      	movs	r3, #0
   12a9c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   12a9e:	683b      	ldr	r3, [r7, #0]
   12aa0:	88db      	ldrh	r3, [r3, #6]
   12aa2:	b2da      	uxtb	r2, r3
   12aa4:	687b      	ldr	r3, [r7, #4]
   12aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   12aaa:	699b      	ldr	r3, [r3, #24]
   12aac:	b2db      	uxtb	r3, r3
   12aae:	1ad3      	subs	r3, r2, r3
   12ab0:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   12ab2:	683b      	ldr	r3, [r7, #0]
   12ab4:	795b      	ldrb	r3, [r3, #5]
   12ab6:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   12ab8:	683b      	ldr	r3, [r7, #0]
   12aba:	791b      	ldrb	r3, [r3, #4]
   12abc:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   12abe:	683b      	ldr	r3, [r7, #0]
   12ac0:	789b      	ldrb	r3, [r3, #2]
   12ac2:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   12ac4:	683b      	ldr	r3, [r7, #0]
   12ac6:	785b      	ldrb	r3, [r3, #1]
   12ac8:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   12aca:	683b      	ldr	r3, [r7, #0]
   12acc:	781b      	ldrb	r3, [r3, #0]
   12ace:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   12ad0:	2300      	movs	r3, #0
   12ad2:	613b      	str	r3, [r7, #16]
   12ad4:	7bfa      	ldrb	r2, [r7, #15]
   12ad6:	693b      	ldr	r3, [r7, #16]
   12ad8:	429a      	cmp	r2, r3
   12ada:	d91e      	bls.n	12b1a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   12adc:	687b      	ldr	r3, [r7, #4]
   12ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   12ae2:	699b      	ldr	r3, [r3, #24]
   12ae4:	b29a      	uxth	r2, r3
   12ae6:	693b      	ldr	r3, [r7, #16]
   12ae8:	b29b      	uxth	r3, r3
   12aea:	4413      	add	r3, r2
   12aec:	b29b      	uxth	r3, r3
   12aee:	4619      	mov	r1, r3
   12af0:	6878      	ldr	r0, [r7, #4]
   12af2:	4b27      	ldr	r3, [pc, #156]	; (12b90 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   12af4:	4798      	blx	r3
   12af6:	4603      	mov	r3, r0
   12af8:	2b00      	cmp	r3, #0
   12afa:	d006      	beq.n	12b0a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   12afc:	697b      	ldr	r3, [r7, #20]
   12afe:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   12b02:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   12b06:	617b      	str	r3, [r7, #20]
   12b08:	e003      	b.n	12b12 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   12b0a:	697a      	ldr	r2, [r7, #20]
   12b0c:	4b21      	ldr	r3, [pc, #132]	; (12b94 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   12b0e:	4413      	add	r3, r2
   12b10:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   12b12:	693b      	ldr	r3, [r7, #16]
   12b14:	3301      	adds	r3, #1
   12b16:	613b      	str	r3, [r7, #16]
   12b18:	e7dc      	b.n	12ad4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   12b1a:	2301      	movs	r3, #1
   12b1c:	613b      	str	r3, [r7, #16]
   12b1e:	7bba      	ldrb	r2, [r7, #14]
   12b20:	693b      	ldr	r3, [r7, #16]
   12b22:	429a      	cmp	r2, r3
   12b24:	d910      	bls.n	12b48 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   12b26:	683b      	ldr	r3, [r7, #0]
   12b28:	88db      	ldrh	r3, [r3, #6]
   12b2a:	4619      	mov	r1, r3
   12b2c:	693b      	ldr	r3, [r7, #16]
   12b2e:	b2db      	uxtb	r3, r3
   12b30:	461a      	mov	r2, r3
   12b32:	6878      	ldr	r0, [r7, #4]
   12b34:	4b18      	ldr	r3, [pc, #96]	; (12b98 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   12b36:	4798      	blx	r3
   12b38:	4602      	mov	r2, r0
   12b3a:	697b      	ldr	r3, [r7, #20]
   12b3c:	4413      	add	r3, r2
   12b3e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   12b40:	693b      	ldr	r3, [r7, #16]
   12b42:	3301      	adds	r3, #1
   12b44:	613b      	str	r3, [r7, #16]
   12b46:	e7ea      	b.n	12b1e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   12b48:	7b7b      	ldrb	r3, [r7, #13]
   12b4a:	3b01      	subs	r3, #1
   12b4c:	4a13      	ldr	r2, [pc, #76]	; (12b9c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   12b4e:	fb02 f303 	mul.w	r3, r2, r3
   12b52:	461a      	mov	r2, r3
   12b54:	697b      	ldr	r3, [r7, #20]
   12b56:	4413      	add	r3, r2
   12b58:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   12b5a:	7b3b      	ldrb	r3, [r7, #12]
   12b5c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   12b60:	fb02 f303 	mul.w	r3, r2, r3
   12b64:	461a      	mov	r2, r3
   12b66:	697b      	ldr	r3, [r7, #20]
   12b68:	4413      	add	r3, r2
   12b6a:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   12b6c:	7afa      	ldrb	r2, [r7, #11]
   12b6e:	4613      	mov	r3, r2
   12b70:	011b      	lsls	r3, r3, #4
   12b72:	1a9b      	subs	r3, r3, r2
   12b74:	009b      	lsls	r3, r3, #2
   12b76:	461a      	mov	r2, r3
   12b78:	697b      	ldr	r3, [r7, #20]
   12b7a:	4413      	add	r3, r2
   12b7c:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   12b7e:	7abb      	ldrb	r3, [r7, #10]
   12b80:	697a      	ldr	r2, [r7, #20]
   12b82:	4413      	add	r3, r2
   12b84:	617b      	str	r3, [r7, #20]

	return tmp;
   12b86:	697b      	ldr	r3, [r7, #20]
}
   12b88:	4618      	mov	r0, r3
   12b8a:	3718      	adds	r7, #24
   12b8c:	46bd      	mov	sp, r7
   12b8e:	bd80      	pop	{r7, pc}
   12b90:	000129c5 	.word	0x000129c5
   12b94:	01e13380 	.word	0x01e13380
   12b98:	00012ba1 	.word	0x00012ba1
   12b9c:	00015180 	.word	0x00015180

00012ba0 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   12ba0:	b580      	push	{r7, lr}
   12ba2:	b086      	sub	sp, #24
   12ba4:	af00      	add	r7, sp, #0
   12ba6:	60f8      	str	r0, [r7, #12]
   12ba8:	60b9      	str	r1, [r7, #8]
   12baa:	4613      	mov	r3, r2
   12bac:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   12bae:	2300      	movs	r3, #0
   12bb0:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   12bb2:	68bb      	ldr	r3, [r7, #8]
   12bb4:	b29b      	uxth	r3, r3
   12bb6:	4619      	mov	r1, r3
   12bb8:	68f8      	ldr	r0, [r7, #12]
   12bba:	4b2f      	ldr	r3, [pc, #188]	; (12c78 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   12bbc:	4798      	blx	r3
   12bbe:	4603      	mov	r3, r0
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d028      	beq.n	12c16 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   12bc4:	79fb      	ldrb	r3, [r7, #7]
   12bc6:	3b01      	subs	r3, #1
   12bc8:	2b0b      	cmp	r3, #11
   12bca:	d84c      	bhi.n	12c66 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   12bcc:	a201      	add	r2, pc, #4	; (adr r2, 12bd4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   12bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12bd2:	bf00      	nop
   12bd4:	00012c05 	.word	0x00012c05
   12bd8:	00012c0b 	.word	0x00012c0b
   12bdc:	00012c05 	.word	0x00012c05
   12be0:	00012c11 	.word	0x00012c11
   12be4:	00012c05 	.word	0x00012c05
   12be8:	00012c11 	.word	0x00012c11
   12bec:	00012c05 	.word	0x00012c05
   12bf0:	00012c05 	.word	0x00012c05
   12bf4:	00012c11 	.word	0x00012c11
   12bf8:	00012c05 	.word	0x00012c05
   12bfc:	00012c11 	.word	0x00012c11
   12c00:	00012c05 	.word	0x00012c05
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   12c04:	4b1d      	ldr	r3, [pc, #116]	; (12c7c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   12c06:	617b      	str	r3, [r7, #20]
			break;
   12c08:	e030      	b.n	12c6c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   12c0a:	4b1d      	ldr	r3, [pc, #116]	; (12c80 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   12c0c:	617b      	str	r3, [r7, #20]
			break;
   12c0e:	e02d      	b.n	12c6c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   12c10:	4b1c      	ldr	r3, [pc, #112]	; (12c84 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   12c12:	617b      	str	r3, [r7, #20]
			break;
   12c14:	e02a      	b.n	12c6c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   12c16:	79fb      	ldrb	r3, [r7, #7]
   12c18:	3b01      	subs	r3, #1
   12c1a:	2b0b      	cmp	r3, #11
   12c1c:	d825      	bhi.n	12c6a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   12c1e:	a201      	add	r2, pc, #4	; (adr r2, 12c24 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   12c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12c24:	00012c55 	.word	0x00012c55
   12c28:	00012c5b 	.word	0x00012c5b
   12c2c:	00012c55 	.word	0x00012c55
   12c30:	00012c61 	.word	0x00012c61
   12c34:	00012c55 	.word	0x00012c55
   12c38:	00012c61 	.word	0x00012c61
   12c3c:	00012c55 	.word	0x00012c55
   12c40:	00012c55 	.word	0x00012c55
   12c44:	00012c61 	.word	0x00012c61
   12c48:	00012c55 	.word	0x00012c55
   12c4c:	00012c61 	.word	0x00012c61
   12c50:	00012c55 	.word	0x00012c55
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   12c54:	4b09      	ldr	r3, [pc, #36]	; (12c7c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   12c56:	617b      	str	r3, [r7, #20]
			break;
   12c58:	e008      	b.n	12c6c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   12c5a:	4b0b      	ldr	r3, [pc, #44]	; (12c88 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   12c5c:	617b      	str	r3, [r7, #20]
			break;
   12c5e:	e005      	b.n	12c6c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   12c60:	4b08      	ldr	r3, [pc, #32]	; (12c84 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   12c62:	617b      	str	r3, [r7, #20]
			break;
   12c64:	e002      	b.n	12c6c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   12c66:	bf00      	nop
   12c68:	e000      	b.n	12c6c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   12c6a:	bf00      	nop
		}
	}

	return sec_in_month;
   12c6c:	697b      	ldr	r3, [r7, #20]
}
   12c6e:	4618      	mov	r0, r3
   12c70:	3718      	adds	r7, #24
   12c72:	46bd      	mov	sp, r7
   12c74:	bd80      	pop	{r7, pc}
   12c76:	bf00      	nop
   12c78:	000129c5 	.word	0x000129c5
   12c7c:	0028de80 	.word	0x0028de80
   12c80:	00263b80 	.word	0x00263b80
   12c84:	00278d00 	.word	0x00278d00
   12c88:	0024ea00 	.word	0x0024ea00

00012c8c <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.min   = tmp_minutes;
	dt->time.sec   = tmp;

	return ERR_NONE;
}
   12c8c:	b580      	push	{r7, lr}
   12c8e:	b082      	sub	sp, #8
   12c90:	af00      	add	r7, sp, #0
   12c92:	6078      	str	r0, [r7, #4]
   12c94:	6039      	str	r1, [r7, #0]
   12c96:	687b      	ldr	r3, [r7, #4]
   12c98:	2b01      	cmp	r3, #1
   12c9a:	d10d      	bne.n	12cb8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   12c9c:	683b      	ldr	r3, [r7, #0]
   12c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12ca2:	4293      	cmp	r3, r2
   12ca4:	d108      	bne.n	12cb8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   12ca6:	4906      	ldr	r1, [pc, #24]	; (12cc0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12ca8:	4806      	ldr	r0, [pc, #24]	; (12cc4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12caa:	4b07      	ldr	r3, [pc, #28]	; (12cc8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   12cac:	4798      	blx	r3
   12cae:	4a07      	ldr	r2, [pc, #28]	; (12ccc <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12cb0:	4907      	ldr	r1, [pc, #28]	; (12cd0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   12cb2:	4804      	ldr	r0, [pc, #16]	; (12cc4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12cb4:	4b07      	ldr	r3, [pc, #28]	; (12cd4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   12cb6:	4798      	blx	r3
   12cb8:	bf00      	nop
   12cba:	3708      	adds	r7, #8
   12cbc:	46bd      	mov	sp, r7
   12cbe:	bd80      	pop	{r7, pc}
   12cc0:	200040a8 	.word	0x200040a8
   12cc4:	20003ce8 	.word	0x20003ce8
   12cc8:	000125c5 	.word	0x000125c5
   12ccc:	20000000 	.word	0x20000000
   12cd0:	00012601 	.word	0x00012601
   12cd4:	0001427d 	.word	0x0001427d

00012cd8 <_GLOBAL__sub_I_ptrCalendarClass>:
   12cd8:	b580      	push	{r7, lr}
   12cda:	af00      	add	r7, sp, #0
   12cdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12ce0:	2001      	movs	r0, #1
   12ce2:	4b01      	ldr	r3, [pc, #4]	; (12ce8 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   12ce4:	4798      	blx	r3
   12ce6:	bd80      	pop	{r7, pc}
   12ce8:	00012c8d 	.word	0x00012c8d

00012cec <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   12cec:	b480      	push	{r7}
   12cee:	b083      	sub	sp, #12
   12cf0:	af00      	add	r7, sp, #0
   12cf2:	6078      	str	r0, [r7, #4]
   12cf4:	4a04      	ldr	r2, [pc, #16]	; (12d08 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   12cf6:	687b      	ldr	r3, [r7, #4]
   12cf8:	601a      	str	r2, [r3, #0]
{
} //~D
   12cfa:	687b      	ldr	r3, [r7, #4]
   12cfc:	4618      	mov	r0, r3
   12cfe:	370c      	adds	r7, #12
   12d00:	46bd      	mov	sp, r7
   12d02:	bc80      	pop	{r7}
   12d04:	4770      	bx	lr
   12d06:	bf00      	nop
   12d08:	0001ba8c 	.word	0x0001ba8c

00012d0c <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   12d0c:	b480      	push	{r7}
   12d0e:	b083      	sub	sp, #12
   12d10:	af00      	add	r7, sp, #0
   12d12:	6078      	str	r0, [r7, #4]
   12d14:	4a04      	ldr	r2, [pc, #16]	; (12d28 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   12d16:	687b      	ldr	r3, [r7, #4]
   12d18:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   12d1a:	687b      	ldr	r3, [r7, #4]
   12d1c:	4618      	mov	r0, r3
   12d1e:	370c      	adds	r7, #12
   12d20:	46bd      	mov	sp, r7
   12d22:	bc80      	pop	{r7}
   12d24:	4770      	bx	lr
   12d26:	bf00      	nop
   12d28:	0001ba8c 	.word	0x0001ba8c

00012d2c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv>:

tick_t	DateTimeLog_Class::GetPowerInterrupTime(void){
   12d2c:	b590      	push	{r4, r7, lr}
   12d2e:	b085      	sub	sp, #20
   12d30:	af00      	add	r7, sp, #0
   12d32:	6078      	str	r0, [r7, #4]

	GetDateTime(&dateTime);
   12d34:	687b      	ldr	r3, [r7, #4]
   12d36:	681b      	ldr	r3, [r3, #0]
   12d38:	681b      	ldr	r3, [r3, #0]
   12d3a:	687a      	ldr	r2, [r7, #4]
   12d3c:	3226      	adds	r2, #38	; 0x26
   12d3e:	4611      	mov	r1, r2
   12d40:	6878      	ldr	r0, [r7, #4]
   12d42:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&dateTime);
   12d44:	687b      	ldr	r3, [r7, #4]
   12d46:	681b      	ldr	r3, [r3, #0]
   12d48:	3304      	adds	r3, #4
   12d4a:	681b      	ldr	r3, [r3, #0]
   12d4c:	687a      	ldr	r2, [r7, #4]
   12d4e:	3226      	adds	r2, #38	; 0x26
   12d50:	4611      	mov	r1, r2
   12d52:	6878      	ldr	r0, [r7, #4]
   12d54:	4798      	blx	r3
   12d56:	4602      	mov	r2, r0
   12d58:	687b      	ldr	r3, [r7, #4]
   12d5a:	609a      	str	r2, [r3, #8]
	ReadLastDateTime();
   12d5c:	6878      	ldr	r0, [r7, #4]
   12d5e:	4b1a      	ldr	r3, [pc, #104]	; (12dc8 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x9c>)
   12d60:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   12d62:	687b      	ldr	r3, [r7, #4]
   12d64:	681b      	ldr	r3, [r3, #0]
   12d66:	3304      	adds	r3, #4
   12d68:	681b      	ldr	r3, [r3, #0]
   12d6a:	687a      	ldr	r2, [r7, #4]
   12d6c:	322e      	adds	r2, #46	; 0x2e
   12d6e:	4611      	mov	r1, r2
   12d70:	6878      	ldr	r0, [r7, #4]
   12d72:	4798      	blx	r3
   12d74:	4602      	mov	r2, r0
   12d76:	687b      	ldr	r3, [r7, #4]
   12d78:	60da      	str	r2, [r3, #12]
	tick_t diferencia;
	if (lastTimestamp==calendar.nullTimestamp)
   12d7a:	687b      	ldr	r3, [r7, #4]
   12d7c:	68da      	ldr	r2, [r3, #12]
   12d7e:	4b13      	ldr	r3, [pc, #76]	; (12dcc <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa0>)
   12d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   12d82:	429a      	cmp	r2, r3
   12d84:	d103      	bne.n	12d8e <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x62>
	{
		diferencia=UPDATE_TIME_MAX*2;
   12d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12d8a:	60fb      	str	r3, [r7, #12]
   12d8c:	e016      	b.n	12dbc <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x90>
	} 
	else
	{
		timeDifference=difftime((time_t)currentTimestamp,(time_t)lastTimestamp);
   12d8e:	687b      	ldr	r3, [r7, #4]
   12d90:	689b      	ldr	r3, [r3, #8]
   12d92:	461a      	mov	r2, r3
   12d94:	687b      	ldr	r3, [r7, #4]
   12d96:	68db      	ldr	r3, [r3, #12]
   12d98:	4619      	mov	r1, r3
   12d9a:	4610      	mov	r0, r2
   12d9c:	4b0c      	ldr	r3, [pc, #48]	; (12dd0 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa4>)
   12d9e:	4798      	blx	r3
   12da0:	4603      	mov	r3, r0
   12da2:	460c      	mov	r4, r1
   12da4:	687a      	ldr	r2, [r7, #4]
   12da6:	e9c2 3406 	strd	r3, r4, [r2, #24]
		diferencia=(uint32_t)timeDifference;
   12daa:	687b      	ldr	r3, [r7, #4]
   12dac:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
   12db0:	4a08      	ldr	r2, [pc, #32]	; (12dd4 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa8>)
   12db2:	4618      	mov	r0, r3
   12db4:	4621      	mov	r1, r4
   12db6:	4790      	blx	r2
   12db8:	4603      	mov	r3, r0
   12dba:	60fb      	str	r3, [r7, #12]
	}

	return	diferencia;
   12dbc:	68fb      	ldr	r3, [r7, #12]
}
   12dbe:	4618      	mov	r0, r3
   12dc0:	3714      	adds	r7, #20
   12dc2:	46bd      	mov	sp, r7
   12dc4:	bd90      	pop	{r4, r7, pc}
   12dc6:	bf00      	nop
   12dc8:	00012fc1 	.word	0x00012fc1
   12dcc:	20003ce8 	.word	0x20003ce8
   12dd0:	00016051 	.word	0x00016051
   12dd4:	00015ca5 	.word	0x00015ca5

00012dd8 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    abs(_Tp __x)
   12dd8:	b5b0      	push	{r4, r5, r7, lr}
   12dda:	b082      	sub	sp, #8
   12ddc:	af00      	add	r7, sp, #0
   12dde:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
   12de0:	4b07      	ldr	r3, [pc, #28]	; (12e00 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
   12de2:	6878      	ldr	r0, [r7, #4]
   12de4:	4798      	blx	r3
   12de6:	4602      	mov	r2, r0
   12de8:	460b      	mov	r3, r1
   12dea:	4614      	mov	r4, r2
   12dec:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   12df0:	4623      	mov	r3, r4
   12df2:	462c      	mov	r4, r5
   12df4:	4618      	mov	r0, r3
   12df6:	4621      	mov	r1, r4
   12df8:	3708      	adds	r7, #8
   12dfa:	46bd      	mov	sp, r7
   12dfc:	bdb0      	pop	{r4, r5, r7, pc}
   12dfe:	bf00      	nop
   12e00:	00015679 	.word	0x00015679

00012e04 <_ZN17DateTimeLog_Class14WasInterruptedEv>:

bool	DateTimeLog_Class::WasInterrupted(void){
   12e04:	b5b0      	push	{r4, r5, r7, lr}
   12e06:	b082      	sub	sp, #8
   12e08:	af00      	add	r7, sp, #0
   12e0a:	6078      	str	r0, [r7, #4]
	
	if (abs(GetPowerInterrupTime()-UPDATE_TIME_MAX)>UPDATE_ERROR)
   12e0c:	6878      	ldr	r0, [r7, #4]
   12e0e:	4b12      	ldr	r3, [pc, #72]	; (12e58 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x54>)
   12e10:	4798      	blx	r3
   12e12:	4603      	mov	r3, r0
   12e14:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   12e18:	4618      	mov	r0, r3
   12e1a:	4b10      	ldr	r3, [pc, #64]	; (12e5c <_ZN17DateTimeLog_Class14WasInterruptedEv+0x58>)
   12e1c:	4798      	blx	r3
   12e1e:	2301      	movs	r3, #1
   12e20:	461d      	mov	r5, r3
   12e22:	4c0f      	ldr	r4, [pc, #60]	; (12e60 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x5c>)
   12e24:	f04f 0200 	mov.w	r2, #0
   12e28:	4b0e      	ldr	r3, [pc, #56]	; (12e64 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x60>)
   12e2a:	47a0      	blx	r4
   12e2c:	4603      	mov	r3, r0
   12e2e:	2b00      	cmp	r3, #0
   12e30:	d101      	bne.n	12e36 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x32>
   12e32:	2300      	movs	r3, #0
   12e34:	461d      	mov	r5, r3
   12e36:	b2eb      	uxtb	r3, r5
   12e38:	2b00      	cmp	r3, #0
   12e3a:	d003      	beq.n	12e44 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x40>
	{
		powerInterrupt=true;
   12e3c:	687b      	ldr	r3, [r7, #4]
   12e3e:	2201      	movs	r2, #1
   12e40:	711a      	strb	r2, [r3, #4]
   12e42:	e002      	b.n	12e4a <_ZN17DateTimeLog_Class14WasInterruptedEv+0x46>
	} 
	else
	{
		powerInterrupt=false;
   12e44:	687b      	ldr	r3, [r7, #4]
   12e46:	2200      	movs	r2, #0
   12e48:	711a      	strb	r2, [r3, #4]
	}
	return	powerInterrupt;
   12e4a:	687b      	ldr	r3, [r7, #4]
   12e4c:	791b      	ldrb	r3, [r3, #4]
   12e4e:	b2db      	uxtb	r3, r3
}
   12e50:	4618      	mov	r0, r3
   12e52:	3708      	adds	r7, #8
   12e54:	46bd      	mov	sp, r7
   12e56:	bdb0      	pop	{r4, r5, r7, pc}
   12e58:	00012d2d 	.word	0x00012d2d
   12e5c:	00012dd9 	.word	0x00012dd9
   12e60:	00015c65 	.word	0x00015c65
   12e64:	40490000 	.word	0x40490000

00012e68 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv>:

uint32_t	DateTimeLog_Class::IncrementMemoryStack(){
   12e68:	b590      	push	{r4, r7, lr}
   12e6a:	b085      	sub	sp, #20
   12e6c:	af00      	add	r7, sp, #0
   12e6e:	6078      	str	r0, [r7, #4]
	
	uint32_t r=	eeprom.ReadAddress((uint8_t*)&stackValue,stackAdress,1);
   12e70:	687b      	ldr	r3, [r7, #4]
   12e72:	f103 0122 	add.w	r1, r3, #34	; 0x22
   12e76:	687b      	ldr	r3, [r7, #4]
   12e78:	8c1a      	ldrh	r2, [r3, #32]
   12e7a:	2301      	movs	r3, #1
   12e7c:	480c      	ldr	r0, [pc, #48]	; (12eb0 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   12e7e:	4c0d      	ldr	r4, [pc, #52]	; (12eb4 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x4c>)
   12e80:	47a0      	blx	r4
   12e82:	60f8      	str	r0, [r7, #12]
	stackValue=(uint16_t)RollStack();
   12e84:	6878      	ldr	r0, [r7, #4]
   12e86:	4b0c      	ldr	r3, [pc, #48]	; (12eb8 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x50>)
   12e88:	4798      	blx	r3
   12e8a:	4603      	mov	r3, r0
   12e8c:	b29a      	uxth	r2, r3
   12e8e:	687b      	ldr	r3, [r7, #4]
   12e90:	845a      	strh	r2, [r3, #34]	; 0x22
	r=	eeprom.WriteAddress((uint8_t*)&stackValue,stackAdress,1);
   12e92:	687b      	ldr	r3, [r7, #4]
   12e94:	f103 0122 	add.w	r1, r3, #34	; 0x22
   12e98:	687b      	ldr	r3, [r7, #4]
   12e9a:	8c1a      	ldrh	r2, [r3, #32]
   12e9c:	2301      	movs	r3, #1
   12e9e:	4804      	ldr	r0, [pc, #16]	; (12eb0 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   12ea0:	4c06      	ldr	r4, [pc, #24]	; (12ebc <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x54>)
   12ea2:	47a0      	blx	r4
   12ea4:	60f8      	str	r0, [r7, #12]
	return r;
   12ea6:	68fb      	ldr	r3, [r7, #12]
}
   12ea8:	4618      	mov	r0, r3
   12eaa:	3714      	adds	r7, #20
   12eac:	46bd      	mov	sp, r7
   12eae:	bd90      	pop	{r4, r7, pc}
   12eb0:	20003a98 	.word	0x20003a98
   12eb4:	00011d9d 	.word	0x00011d9d
   12eb8:	00012ec1 	.word	0x00012ec1
   12ebc:	00011c91 	.word	0x00011c91

00012ec0 <_ZN17DateTimeLog_Class9RollStackEv>:
 uint8_t DateTimeLog_Class::RollStack(void)
 {
   12ec0:	b480      	push	{r7}
   12ec2:	b083      	sub	sp, #12
   12ec4:	af00      	add	r7, sp, #0
   12ec6:	6078      	str	r0, [r7, #4]
	 return (uint8_t)(stackValue +1 ) % AT24MAC_BUFFER_SIZE;
   12ec8:	687b      	ldr	r3, [r7, #4]
   12eca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   12ecc:	b2db      	uxtb	r3, r3
   12ece:	3301      	adds	r3, #1
   12ed0:	b2db      	uxtb	r3, r3
   12ed2:	f003 030f 	and.w	r3, r3, #15
   12ed6:	b2db      	uxtb	r3, r3
 }
   12ed8:	4618      	mov	r0, r3
   12eda:	370c      	adds	r7, #12
   12edc:	46bd      	mov	sp, r7
   12ede:	bc80      	pop	{r7}
   12ee0:	4770      	bx	lr
	...

00012ee4 <_ZN17DateTimeLog_Class14ReadStackValueEv>:
 
 uint8_t	DateTimeLog_Class::ReadStackValue(void){
   12ee4:	b590      	push	{r4, r7, lr}
   12ee6:	b085      	sub	sp, #20
   12ee8:	af00      	add	r7, sp, #0
   12eea:	6078      	str	r0, [r7, #4]
	 uint8_t s;
	eeprom.ReadAddress(&s,stackAdress,1);
   12eec:	687b      	ldr	r3, [r7, #4]
   12eee:	8c1a      	ldrh	r2, [r3, #32]
   12ef0:	f107 010f 	add.w	r1, r7, #15
   12ef4:	2301      	movs	r3, #1
   12ef6:	4804      	ldr	r0, [pc, #16]	; (12f08 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x24>)
   12ef8:	4c04      	ldr	r4, [pc, #16]	; (12f0c <_ZN17DateTimeLog_Class14ReadStackValueEv+0x28>)
   12efa:	47a0      	blx	r4
	 return	s;
   12efc:	7bfb      	ldrb	r3, [r7, #15]
 }
   12efe:	4618      	mov	r0, r3
   12f00:	3714      	adds	r7, #20
   12f02:	46bd      	mov	sp, r7
   12f04:	bd90      	pop	{r4, r7, pc}
   12f06:	bf00      	nop
   12f08:	20003a98 	.word	0x20003a98
   12f0c:	00011d9d 	.word	0x00011d9d

00012f10 <_ZN17DateTimeLog_Class23SetCalendarStackAddressEm>:
 
 uint16_t	DateTimeLog_Class::SetCalendarStackAddress(uint32_t add){
   12f10:	b480      	push	{r7}
   12f12:	b083      	sub	sp, #12
   12f14:	af00      	add	r7, sp, #0
   12f16:	6078      	str	r0, [r7, #4]
   12f18:	6039      	str	r1, [r7, #0]
	 stackAdress=(uint16_t)(add&0xffff);
   12f1a:	683b      	ldr	r3, [r7, #0]
   12f1c:	b29a      	uxth	r2, r3
   12f1e:	687b      	ldr	r3, [r7, #4]
   12f20:	841a      	strh	r2, [r3, #32]
	 return	stackAdress;
   12f22:	687b      	ldr	r3, [r7, #4]
   12f24:	8c1b      	ldrh	r3, [r3, #32]
 }
   12f26:	4618      	mov	r0, r3
   12f28:	370c      	adds	r7, #12
   12f2a:	46bd      	mov	sp, r7
   12f2c:	bc80      	pop	{r7}
   12f2e:	4770      	bx	lr

00012f30 <_ZN17DateTimeLog_Class18SetCalendarAddressEm>:
uint16_t	DateTimeLog_Class::SetCalendarAddress(uint32_t add){
   12f30:	b480      	push	{r7}
   12f32:	b083      	sub	sp, #12
   12f34:	af00      	add	r7, sp, #0
   12f36:	6078      	str	r0, [r7, #4]
   12f38:	6039      	str	r1, [r7, #0]
	dataTimeLogsAddress=(uint16_t)(add&0xffff);
   12f3a:	683b      	ldr	r3, [r7, #0]
   12f3c:	b29a      	uxth	r2, r3
   12f3e:	687b      	ldr	r3, [r7, #4]
   12f40:	849a      	strh	r2, [r3, #36]	; 0x24
	return	dataTimeLogsAddress;
   12f42:	687b      	ldr	r3, [r7, #4]
   12f44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
   12f46:	4618      	mov	r0, r3
   12f48:	370c      	adds	r7, #12
   12f4a:	46bd      	mov	sp, r7
   12f4c:	bc80      	pop	{r7}
   12f4e:	4770      	bx	lr

00012f50 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv>:
uint32_t	DateTimeLog_Class::SaveCurrentDateTime(void){
   12f50:	b590      	push	{r4, r7, lr}
   12f52:	b085      	sub	sp, #20
   12f54:	af00      	add	r7, sp, #0
   12f56:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   12f58:	6878      	ldr	r0, [r7, #4]
   12f5a:	4b15      	ldr	r3, [pc, #84]	; (12fb0 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x60>)
   12f5c:	4798      	blx	r3
   12f5e:	4603      	mov	r3, r0
   12f60:	b29a      	uxth	r2, r3
   12f62:	687b      	ldr	r3, [r7, #4]
   12f64:	845a      	strh	r2, [r3, #34]	; 0x22
	GetDateTime(&dateTime);
   12f66:	687b      	ldr	r3, [r7, #4]
   12f68:	681b      	ldr	r3, [r3, #0]
   12f6a:	681b      	ldr	r3, [r3, #0]
   12f6c:	687a      	ldr	r2, [r7, #4]
   12f6e:	3226      	adds	r2, #38	; 0x26
   12f70:	4611      	mov	r1, r2
   12f72:	6878      	ldr	r0, [r7, #4]
   12f74:	4798      	blx	r3
	handler=(PTR_DATE_TIME)(&dateTime);
   12f76:	687b      	ldr	r3, [r7, #4]
   12f78:	3326      	adds	r3, #38	; 0x26
   12f7a:	461a      	mov	r2, r3
   12f7c:	687b      	ldr	r3, [r7, #4]
   12f7e:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t	w= eeprom.WriteAddress((uint8_t*)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   12f80:	687b      	ldr	r3, [r7, #4]
   12f82:	6b99      	ldr	r1, [r3, #56]	; 0x38
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12f88:	b2da      	uxtb	r2, r3
   12f8a:	687b      	ldr	r3, [r7, #4]
   12f8c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   12f8e:	b2db      	uxtb	r3, r3
   12f90:	4413      	add	r3, r2
   12f92:	b2da      	uxtb	r2, r3
   12f94:	2308      	movs	r3, #8
   12f96:	4807      	ldr	r0, [pc, #28]	; (12fb4 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x64>)
   12f98:	4c07      	ldr	r4, [pc, #28]	; (12fb8 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x68>)
   12f9a:	47a0      	blx	r4
   12f9c:	60f8      	str	r0, [r7, #12]
	IncrementMemoryStack();
   12f9e:	6878      	ldr	r0, [r7, #4]
   12fa0:	4b06      	ldr	r3, [pc, #24]	; (12fbc <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x6c>)
   12fa2:	4798      	blx	r3
	return	w;
   12fa4:	68fb      	ldr	r3, [r7, #12]
}
   12fa6:	4618      	mov	r0, r3
   12fa8:	3714      	adds	r7, #20
   12faa:	46bd      	mov	sp, r7
   12fac:	bd90      	pop	{r4, r7, pc}
   12fae:	bf00      	nop
   12fb0:	00012ee5 	.word	0x00012ee5
   12fb4:	20003a98 	.word	0x20003a98
   12fb8:	00011c01 	.word	0x00011c01
   12fbc:	00012e69 	.word	0x00012e69

00012fc0 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv>:

uint32_t	DateTimeLog_Class::ReadLastDateTime(void){
   12fc0:	b590      	push	{r4, r7, lr}
   12fc2:	b085      	sub	sp, #20
   12fc4:	af00      	add	r7, sp, #0
   12fc6:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   12fc8:	6878      	ldr	r0, [r7, #4]
   12fca:	4b0f      	ldr	r3, [pc, #60]	; (13008 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x48>)
   12fcc:	4798      	blx	r3
   12fce:	4603      	mov	r3, r0
   12fd0:	b29a      	uxth	r2, r3
   12fd2:	687b      	ldr	r3, [r7, #4]
   12fd4:	845a      	strh	r2, [r3, #34]	; 0x22
	handler=(PTR_DATE_TIME)(&lastDateTime);
   12fd6:	687b      	ldr	r3, [r7, #4]
   12fd8:	332e      	adds	r3, #46	; 0x2e
   12fda:	461a      	mov	r2, r3
   12fdc:	687b      	ldr	r3, [r7, #4]
   12fde:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t r=	eeprom.ReadAddress((uint8_t *)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   12fe0:	687b      	ldr	r3, [r7, #4]
   12fe2:	6b99      	ldr	r1, [r3, #56]	; 0x38
   12fe4:	687b      	ldr	r3, [r7, #4]
   12fe6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12fe8:	b2da      	uxtb	r2, r3
   12fea:	687b      	ldr	r3, [r7, #4]
   12fec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   12fee:	b2db      	uxtb	r3, r3
   12ff0:	4413      	add	r3, r2
   12ff2:	b2da      	uxtb	r2, r3
   12ff4:	2308      	movs	r3, #8
   12ff6:	4805      	ldr	r0, [pc, #20]	; (1300c <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x4c>)
   12ff8:	4c05      	ldr	r4, [pc, #20]	; (13010 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x50>)
   12ffa:	47a0      	blx	r4
   12ffc:	60f8      	str	r0, [r7, #12]
	return	r;
   12ffe:	68fb      	ldr	r3, [r7, #12]
}
   13000:	4618      	mov	r0, r3
   13002:	3714      	adds	r7, #20
   13004:	46bd      	mov	sp, r7
   13006:	bd90      	pop	{r4, r7, pc}
   13008:	00012ee5 	.word	0x00012ee5
   1300c:	20003a98 	.word	0x20003a98
   13010:	00011d2d 	.word	0x00011d2d

00013014 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   13014:	b580      	push	{r7, lr}
   13016:	b082      	sub	sp, #8
   13018:	af00      	add	r7, sp, #0
   1301a:	6078      	str	r0, [r7, #4]
	ptrTimerClass->setTimeout();
   1301c:	4b04      	ldr	r3, [pc, #16]	; (13030 <_ZL7task_cbPK10timer_task+0x1c>)
   1301e:	681b      	ldr	r3, [r3, #0]
   13020:	4618      	mov	r0, r3
   13022:	4b04      	ldr	r3, [pc, #16]	; (13034 <_ZL7task_cbPK10timer_task+0x20>)
   13024:	4798      	blx	r3
}
   13026:	bf00      	nop
   13028:	3708      	adds	r7, #8
   1302a:	46bd      	mov	sp, r7
   1302c:	bd80      	pop	{r7, pc}
   1302e:	bf00      	nop
   13030:	20003d90 	.word	0x20003d90
   13034:	00013131 	.word	0x00013131

00013038 <_ZN11Timer_ClassC1Ev>:
// default constructor
Timer_Class::Timer_Class()
   13038:	b480      	push	{r7}
   1303a:	b083      	sub	sp, #12
   1303c:	af00      	add	r7, sp, #0
   1303e:	6078      	str	r0, [r7, #4]
{
	prtTimer=this;
   13040:	687b      	ldr	r3, [r7, #4]
   13042:	687a      	ldr	r2, [r7, #4]
   13044:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
   13046:	4a08      	ldr	r2, [pc, #32]	; (13068 <_ZN11Timer_ClassC1Ev+0x30>)
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   1304c:	687b      	ldr	r3, [r7, #4]
   1304e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13052:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
   13054:	687b      	ldr	r3, [r7, #4]
   13056:	4a05      	ldr	r2, [pc, #20]	; (1306c <_ZN11Timer_ClassC1Ev+0x34>)
   13058:	621a      	str	r2, [r3, #32]
} //Timer_Class
   1305a:	687b      	ldr	r3, [r7, #4]
   1305c:	4618      	mov	r0, r3
   1305e:	370c      	adds	r7, #12
   13060:	46bd      	mov	sp, r7
   13062:	bc80      	pop	{r7}
   13064:	4770      	bx	lr
   13066:	bf00      	nop
   13068:	20003d90 	.word	0x20003d90
   1306c:	00013015 	.word	0x00013015

00013070 <_ZN11Timer_ClassC1EP16timer_descriptor>:

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   13070:	b480      	push	{r7}
   13072:	b083      	sub	sp, #12
   13074:	af00      	add	r7, sp, #0
   13076:	6078      	str	r0, [r7, #4]
   13078:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   1307a:	687b      	ldr	r3, [r7, #4]
   1307c:	683a      	ldr	r2, [r7, #0]
   1307e:	609a      	str	r2, [r3, #8]
	ptrTimerClass=this;
   13080:	4a07      	ldr	r2, [pc, #28]	; (130a0 <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
   13082:	687b      	ldr	r3, [r7, #4]
   13084:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   13086:	687b      	ldr	r3, [r7, #4]
   13088:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1308c:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
   1308e:	687b      	ldr	r3, [r7, #4]
   13090:	4a04      	ldr	r2, [pc, #16]	; (130a4 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
   13092:	621a      	str	r2, [r3, #32]
} //Timer_Class
   13094:	687b      	ldr	r3, [r7, #4]
   13096:	4618      	mov	r0, r3
   13098:	370c      	adds	r7, #12
   1309a:	46bd      	mov	sp, r7
   1309c:	bc80      	pop	{r7}
   1309e:	4770      	bx	lr
   130a0:	20003d90 	.word	0x20003d90
   130a4:	00013015 	.word	0x00013015

000130a8 <_ZN11Timer_Class14set_descriptorEP16timer_descriptor>:
void	Timer_Class::set_descriptor(timer_descriptor * descr){
   130a8:	b480      	push	{r7}
   130aa:	b083      	sub	sp, #12
   130ac:	af00      	add	r7, sp, #0
   130ae:	6078      	str	r0, [r7, #4]
   130b0:	6039      	str	r1, [r7, #0]
		timer_descr=descr;
   130b2:	687b      	ldr	r3, [r7, #4]
   130b4:	683a      	ldr	r2, [r7, #0]
   130b6:	609a      	str	r2, [r3, #8]
		ptrTimerClass=this;
   130b8:	4a03      	ldr	r2, [pc, #12]	; (130c8 <_ZN11Timer_Class14set_descriptorEP16timer_descriptor+0x20>)
   130ba:	687b      	ldr	r3, [r7, #4]
   130bc:	6013      	str	r3, [r2, #0]
}
   130be:	bf00      	nop
   130c0:	370c      	adds	r7, #12
   130c2:	46bd      	mov	sp, r7
   130c4:	bc80      	pop	{r7}
   130c6:	4770      	bx	lr
   130c8:	20003d90 	.word	0x20003d90

000130cc <_ZN11Timer_ClassD1Ev>:

// default destructor
Timer_Class::~Timer_Class()
   130cc:	b480      	push	{r7}
   130ce:	b083      	sub	sp, #12
   130d0:	af00      	add	r7, sp, #0
   130d2:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	2200      	movs	r2, #0
   130d8:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   130da:	687b      	ldr	r3, [r7, #4]
   130dc:	4618      	mov	r0, r3
   130de:	370c      	adds	r7, #12
   130e0:	46bd      	mov	sp, r7
   130e2:	bc80      	pop	{r7}
   130e4:	4770      	bx	lr
	...

000130e8 <_ZN11Timer_Class4InitEP16timer_descriptor>:



void Timer_Class::Init(timer_descriptor * descr){
   130e8:	b580      	push	{r7, lr}
   130ea:	b082      	sub	sp, #8
   130ec:	af00      	add	r7, sp, #0
   130ee:	6078      	str	r0, [r7, #4]
   130f0:	6039      	str	r1, [r7, #0]
	set_descriptor(descr);
   130f2:	6839      	ldr	r1, [r7, #0]
   130f4:	6878      	ldr	r0, [r7, #4]
   130f6:	4b04      	ldr	r3, [pc, #16]	; (13108 <_ZN11Timer_Class4InitEP16timer_descriptor+0x20>)
   130f8:	4798      	blx	r3
	ticks=0;
   130fa:	687b      	ldr	r3, [r7, #4]
   130fc:	2200      	movs	r2, #0
   130fe:	629a      	str	r2, [r3, #40]	; 0x28
}
   13100:	bf00      	nop
   13102:	3708      	adds	r7, #8
   13104:	46bd      	mov	sp, r7
   13106:	bd80      	pop	{r7, pc}
   13108:	000130a9 	.word	0x000130a9

0001310c <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
   1310c:	b580      	push	{r7, lr}
   1310e:	b084      	sub	sp, #16
   13110:	af00      	add	r7, sp, #0
   13112:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   13114:	687b      	ldr	r3, [r7, #4]
   13116:	689b      	ldr	r3, [r3, #8]
   13118:	4618      	mov	r0, r3
   1311a:	4b04      	ldr	r3, [pc, #16]	; (1312c <_ZN11Timer_Class5startEv+0x20>)
   1311c:	4798      	blx	r3
   1311e:	60f8      	str	r0, [r7, #12]
	return status;
   13120:	68fb      	ldr	r3, [r7, #12]
	
}
   13122:	4618      	mov	r0, r3
   13124:	3710      	adds	r7, #16
   13126:	46bd      	mov	sp, r7
   13128:	bd80      	pop	{r7, pc}
   1312a:	bf00      	nop
   1312c:	00005499 	.word	0x00005499

00013130 <_ZN11Timer_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void Timer_Class::setTimeout(){
   13130:	b480      	push	{r7}
   13132:	b083      	sub	sp, #12
   13134:	af00      	add	r7, sp, #0
   13136:	6078      	str	r0, [r7, #4]
	timeout=1;
   13138:	687b      	ldr	r3, [r7, #4]
   1313a:	2201      	movs	r2, #1
   1313c:	705a      	strb	r2, [r3, #1]
}
   1313e:	bf00      	nop
   13140:	370c      	adds	r7, #12
   13142:	46bd      	mov	sp, r7
   13144:	bc80      	pop	{r7}
   13146:	4770      	bx	lr

00013148 <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t Timer_Class::add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   13148:	b580      	push	{r7, lr}
   1314a:	b086      	sub	sp, #24
   1314c:	af00      	add	r7, sp, #0
   1314e:	60f8      	str	r0, [r7, #12]
   13150:	60b9      	str	r1, [r7, #8]
   13152:	607a      	str	r2, [r7, #4]
   13154:	70fb      	strb	r3, [r7, #3]
	int32_t	status;

	task.interval = interval;
   13156:	68fb      	ldr	r3, [r7, #12]
   13158:	687a      	ldr	r2, [r7, #4]
   1315a:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
   1315c:	68fb      	ldr	r3, [r7, #12]
   1315e:	68ba      	ldr	r2, [r7, #8]
   13160:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
   13162:	68fb      	ldr	r3, [r7, #12]
   13164:	78fa      	ldrb	r2, [r7, #3]
   13166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	status=timer_add_task(timer_descr, &task);
   1316a:	68fb      	ldr	r3, [r7, #12]
   1316c:	689a      	ldr	r2, [r3, #8]
   1316e:	68fb      	ldr	r3, [r7, #12]
   13170:	3314      	adds	r3, #20
   13172:	4619      	mov	r1, r3
   13174:	4610      	mov	r0, r2
   13176:	4b04      	ldr	r3, [pc, #16]	; (13188 <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode+0x40>)
   13178:	4798      	blx	r3
   1317a:	6178      	str	r0, [r7, #20]
	
	return status;
   1317c:	697b      	ldr	r3, [r7, #20]
}
   1317e:	4618      	mov	r0, r3
   13180:	3718      	adds	r7, #24
   13182:	46bd      	mov	sp, r7
   13184:	bd80      	pop	{r7, pc}
   13186:	bf00      	nop
   13188:	00005549 	.word	0x00005549

0001318c <_ZN11Timer_Class17add_periodic_taskEPFvvEm>:
int32_t Timer_Class::add_periodic_task(FUNC_PTR func,uint32_t interval){
   1318c:	b590      	push	{r4, r7, lr}
   1318e:	b087      	sub	sp, #28
   13190:	af00      	add	r7, sp, #0
   13192:	60f8      	str	r0, [r7, #12]
   13194:	60b9      	str	r1, [r7, #8]
   13196:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_REPEAT);
   13198:	2301      	movs	r3, #1
   1319a:	687a      	ldr	r2, [r7, #4]
   1319c:	68b9      	ldr	r1, [r7, #8]
   1319e:	68f8      	ldr	r0, [r7, #12]
   131a0:	4c03      	ldr	r4, [pc, #12]	; (131b0 <_ZN11Timer_Class17add_periodic_taskEPFvvEm+0x24>)
   131a2:	47a0      	blx	r4
   131a4:	6178      	str	r0, [r7, #20]
		return status;
   131a6:	697b      	ldr	r3, [r7, #20]
}
   131a8:	4618      	mov	r0, r3
   131aa:	371c      	adds	r7, #28
   131ac:	46bd      	mov	sp, r7
   131ae:	bd90      	pop	{r4, r7, pc}
   131b0:	00013149 	.word	0x00013149

000131b4 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm>:
int32_t Timer_Class::add_oneShot_task(FUNC_PTR func,uint32_t interval){
   131b4:	b590      	push	{r4, r7, lr}
   131b6:	b087      	sub	sp, #28
   131b8:	af00      	add	r7, sp, #0
   131ba:	60f8      	str	r0, [r7, #12]
   131bc:	60b9      	str	r1, [r7, #8]
   131be:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_ONE_SHOT);
   131c0:	2300      	movs	r3, #0
   131c2:	687a      	ldr	r2, [r7, #4]
   131c4:	68b9      	ldr	r1, [r7, #8]
   131c6:	68f8      	ldr	r0, [r7, #12]
   131c8:	4c06      	ldr	r4, [pc, #24]	; (131e4 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm+0x30>)
   131ca:	47a0      	blx	r4
   131cc:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   131ce:	68fb      	ldr	r3, [r7, #12]
   131d0:	689b      	ldr	r3, [r3, #8]
   131d2:	4618      	mov	r0, r3
   131d4:	4b04      	ldr	r3, [pc, #16]	; (131e8 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm+0x34>)
   131d6:	4798      	blx	r3
   131d8:	6178      	str	r0, [r7, #20]
	return status;
   131da:	697b      	ldr	r3, [r7, #20]
}
   131dc:	4618      	mov	r0, r3
   131de:	371c      	adds	r7, #28
   131e0:	46bd      	mov	sp, r7
   131e2:	bd90      	pop	{r4, r7, pc}
   131e4:	00013149 	.word	0x00013149
   131e8:	00005499 	.word	0x00005499

000131ec <_ZN11Timer_Class9get_ticksEv>:
	timer_remove_task(timer_descr, &task);
}



uint32_t	Timer_Class::get_ticks(void){
   131ec:	b580      	push	{r7, lr}
   131ee:	b082      	sub	sp, #8
   131f0:	af00      	add	r7, sp, #0
   131f2:	6078      	str	r0, [r7, #4]
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
   131f4:	687b      	ldr	r3, [r7, #4]
   131f6:	689a      	ldr	r2, [r3, #8]
   131f8:	687b      	ldr	r3, [r7, #4]
   131fa:	3328      	adds	r3, #40	; 0x28
   131fc:	4619      	mov	r1, r3
   131fe:	4610      	mov	r0, r2
   13200:	4b03      	ldr	r3, [pc, #12]	; (13210 <_ZN11Timer_Class9get_ticksEv+0x24>)
   13202:	4798      	blx	r3
	return ticks;
   13204:	687b      	ldr	r3, [r7, #4]
   13206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
   13208:	4618      	mov	r0, r3
   1320a:	3708      	adds	r7, #8
   1320c:	46bd      	mov	sp, r7
   1320e:	bd80      	pop	{r7, pc}
   13210:	00005731 	.word	0x00005731

00013214 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
   13214:	b580      	push	{r7, lr}
   13216:	b082      	sub	sp, #8
   13218:	af00      	add	r7, sp, #0
   1321a:	6078      	str	r0, [r7, #4]
   1321c:	6039      	str	r1, [r7, #0]
   1321e:	687b      	ldr	r3, [r7, #4]
   13220:	2b01      	cmp	r3, #1
   13222:	d11f      	bne.n	13264 <_Z41__static_initialization_and_destruction_0ii+0x50>
   13224:	683b      	ldr	r3, [r7, #0]
   13226:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1322a:	4293      	cmp	r3, r2
   1322c:	d11a      	bne.n	13264 <_Z41__static_initialization_and_destruction_0ii+0x50>
Timer_Class eventTimer(&TIMER_EVENT);
   1322e:	490f      	ldr	r1, [pc, #60]	; (1326c <_Z41__static_initialization_and_destruction_0ii+0x58>)
   13230:	480f      	ldr	r0, [pc, #60]	; (13270 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   13232:	4b10      	ldr	r3, [pc, #64]	; (13274 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   13234:	4798      	blx	r3
   13236:	4a10      	ldr	r2, [pc, #64]	; (13278 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   13238:	4910      	ldr	r1, [pc, #64]	; (1327c <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1323a:	480d      	ldr	r0, [pc, #52]	; (13270 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1323c:	4b10      	ldr	r3, [pc, #64]	; (13280 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   1323e:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
   13240:	4910      	ldr	r1, [pc, #64]	; (13284 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   13242:	4811      	ldr	r0, [pc, #68]	; (13288 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   13244:	4b0b      	ldr	r3, [pc, #44]	; (13274 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   13246:	4798      	blx	r3
   13248:	4a0b      	ldr	r2, [pc, #44]	; (13278 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   1324a:	490c      	ldr	r1, [pc, #48]	; (1327c <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1324c:	480e      	ldr	r0, [pc, #56]	; (13288 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   1324e:	4b0c      	ldr	r3, [pc, #48]	; (13280 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   13250:	4798      	blx	r3
   13252:	490e      	ldr	r1, [pc, #56]	; (1328c <_Z41__static_initialization_and_destruction_0ii+0x78>)
   13254:	480e      	ldr	r0, [pc, #56]	; (13290 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   13256:	4b07      	ldr	r3, [pc, #28]	; (13274 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   13258:	4798      	blx	r3
   1325a:	4a07      	ldr	r2, [pc, #28]	; (13278 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   1325c:	4907      	ldr	r1, [pc, #28]	; (1327c <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1325e:	480c      	ldr	r0, [pc, #48]	; (13290 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   13260:	4b07      	ldr	r3, [pc, #28]	; (13280 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   13262:	4798      	blx	r3
   13264:	bf00      	nop
   13266:	3708      	adds	r7, #8
   13268:	46bd      	mov	sp, r7
   1326a:	bd80      	pop	{r7, pc}
   1326c:	20003f74 	.word	0x20003f74
   13270:	20003d94 	.word	0x20003d94
   13274:	00013071 	.word	0x00013071
   13278:	20000000 	.word	0x20000000
   1327c:	000130cd 	.word	0x000130cd
   13280:	0001427d 	.word	0x0001427d
   13284:	2000404c 	.word	0x2000404c
   13288:	20003dc0 	.word	0x20003dc0
   1328c:	20003f90 	.word	0x20003f90
   13290:	20003dec 	.word	0x20003dec

00013294 <_GLOBAL__sub_I_ptrTimerClass>:
   13294:	b580      	push	{r7, lr}
   13296:	af00      	add	r7, sp, #0
   13298:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1329c:	2001      	movs	r0, #1
   1329e:	4b01      	ldr	r3, [pc, #4]	; (132a4 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   132a0:	4798      	blx	r3
   132a2:	bd80      	pop	{r7, pc}
   132a4:	00013215 	.word	0x00013215

000132a8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   132a8:	b480      	push	{r7}
   132aa:	b083      	sub	sp, #12
   132ac:	af00      	add	r7, sp, #0
   132ae:	6078      	str	r0, [r7, #4]
   132b0:	4a05      	ldr	r2, [pc, #20]	; (132c8 <_ZN5PrintC1Ev+0x20>)
   132b2:	687b      	ldr	r3, [r7, #4]
   132b4:	601a      	str	r2, [r3, #0]
   132b6:	687b      	ldr	r3, [r7, #4]
   132b8:	2200      	movs	r2, #0
   132ba:	605a      	str	r2, [r3, #4]
   132bc:	687b      	ldr	r3, [r7, #4]
   132be:	4618      	mov	r0, r3
   132c0:	370c      	adds	r7, #12
   132c2:	46bd      	mov	sp, r7
   132c4:	bc80      	pop	{r7}
   132c6:	4770      	bx	lr
   132c8:	0001bb08 	.word	0x0001bb08

000132cc <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   132cc:	b480      	push	{r7}
   132ce:	b083      	sub	sp, #12
   132d0:	af00      	add	r7, sp, #0
   132d2:	6078      	str	r0, [r7, #4]
   132d4:	2300      	movs	r3, #0
   132d6:	4618      	mov	r0, r3
   132d8:	370c      	adds	r7, #12
   132da:	46bd      	mov	sp, r7
   132dc:	bc80      	pop	{r7}
   132de:	4770      	bx	lr

000132e0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   132e0:	b480      	push	{r7}
   132e2:	b083      	sub	sp, #12
   132e4:	af00      	add	r7, sp, #0
   132e6:	6078      	str	r0, [r7, #4]
   132e8:	bf00      	nop
   132ea:	370c      	adds	r7, #12
   132ec:	46bd      	mov	sp, r7
   132ee:	bc80      	pop	{r7}
   132f0:	4770      	bx	lr
	...

000132f4 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   132f4:	b580      	push	{r7, lr}
   132f6:	b082      	sub	sp, #8
   132f8:	af00      	add	r7, sp, #0
   132fa:	6078      	str	r0, [r7, #4]
   132fc:	687b      	ldr	r3, [r7, #4]
   132fe:	4618      	mov	r0, r3
   13300:	4b06      	ldr	r3, [pc, #24]	; (1331c <_ZN6StreamC1Ev+0x28>)
   13302:	4798      	blx	r3
   13304:	4a06      	ldr	r2, [pc, #24]	; (13320 <_ZN6StreamC1Ev+0x2c>)
   13306:	687b      	ldr	r3, [r7, #4]
   13308:	601a      	str	r2, [r3, #0]
   1330a:	687b      	ldr	r3, [r7, #4]
   1330c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13310:	609a      	str	r2, [r3, #8]
   13312:	687b      	ldr	r3, [r7, #4]
   13314:	4618      	mov	r0, r3
   13316:	3708      	adds	r7, #8
   13318:	46bd      	mov	sp, r7
   1331a:	bd80      	pop	{r7, pc}
   1331c:	000132a9 	.word	0x000132a9
   13320:	0001bacc 	.word	0x0001bacc

00013324 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   13324:	b480      	push	{r7}
   13326:	b083      	sub	sp, #12
   13328:	af00      	add	r7, sp, #0
   1332a:	4603      	mov	r3, r0
   1332c:	603a      	str	r2, [r7, #0]
   1332e:	71fb      	strb	r3, [r7, #7]
   13330:	460b      	mov	r3, r1
   13332:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   13334:	4b08      	ldr	r3, [pc, #32]	; (13358 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   13336:	681b      	ldr	r3, [r3, #0]
   13338:	2201      	movs	r2, #1
   1333a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->terminalStarted=true;
   1333c:	4b06      	ldr	r3, [pc, #24]	; (13358 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   1333e:	681b      	ldr	r3, [r3, #0]
   13340:	2201      	movs	r2, #1
   13342:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
   13344:	4b04      	ldr	r3, [pc, #16]	; (13358 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   13346:	681b      	ldr	r3, [r3, #0]
   13348:	2201      	movs	r2, #1
   1334a:	741a      	strb	r2, [r3, #16]


	return false;
   1334c:	2300      	movs	r3, #0
}
   1334e:	4618      	mov	r0, r3
   13350:	370c      	adds	r7, #12
   13352:	46bd      	mov	sp, r7
   13354:	bc80      	pop	{r7}
   13356:	4770      	bx	lr
   13358:	20003e18 	.word	0x20003e18

0001335c <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   1335c:	b480      	push	{r7}
   1335e:	b083      	sub	sp, #12
   13360:	af00      	add	r7, sp, #0
   13362:	4603      	mov	r3, r0
   13364:	603a      	str	r2, [r7, #0]
   13366:	71fb      	strb	r3, [r7, #7]
   13368:	460b      	mov	r3, r1
   1336a:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   1336c:	4b08      	ldr	r3, [pc, #32]	; (13390 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1336e:	681b      	ldr	r3, [r3, #0]
   13370:	2201      	movs	r2, #1
   13372:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
   13374:	4b06      	ldr	r3, [pc, #24]	; (13390 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   13376:	681b      	ldr	r3, [r3, #0]
   13378:	2201      	movs	r2, #1
   1337a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
   1337c:	4b04      	ldr	r3, [pc, #16]	; (13390 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1337e:	681b      	ldr	r3, [r3, #0]
   13380:	2201      	movs	r2, #1
   13382:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   13384:	2300      	movs	r3, #0
}
   13386:	4618      	mov	r0, r3
   13388:	370c      	adds	r7, #12
   1338a:	46bd      	mov	sp, r7
   1338c:	bc80      	pop	{r7}
   1338e:	4770      	bx	lr
   13390:	20003e18 	.word	0x20003e18

00013394 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   13394:	b580      	push	{r7, lr}
   13396:	b082      	sub	sp, #8
   13398:	af00      	add	r7, sp, #0
   1339a:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   1339c:	793b      	ldrb	r3, [r7, #4]
   1339e:	f003 0301 	and.w	r3, r3, #1
   133a2:	b2db      	uxtb	r3, r3
   133a4:	2b00      	cmp	r3, #0
   133a6:	d013      	beq.n	133d0 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   133a8:	490c      	ldr	r1, [pc, #48]	; (133dc <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   133aa:	2000      	movs	r0, #0
   133ac:	4b0c      	ldr	r3, [pc, #48]	; (133e0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   133ae:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   133b0:	490c      	ldr	r1, [pc, #48]	; (133e4 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   133b2:	2001      	movs	r0, #1
   133b4:	4b0a      	ldr	r3, [pc, #40]	; (133e0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   133b6:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   133b8:	4b0b      	ldr	r3, [pc, #44]	; (133e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   133ba:	681b      	ldr	r3, [r3, #0]
   133bc:	2201      	movs	r2, #1
   133be:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   133c0:	4b09      	ldr	r3, [pc, #36]	; (133e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   133c2:	681b      	ldr	r3, [r3, #0]
   133c4:	2201      	movs	r2, #1
   133c6:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->plugged=true;
   133c8:	4b07      	ldr	r3, [pc, #28]	; (133e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   133ca:	681b      	ldr	r3, [r3, #0]
   133cc:	2201      	movs	r2, #1
   133ce:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   133d0:	2300      	movs	r3, #0
}
   133d2:	4618      	mov	r0, r3
   133d4:	3708      	adds	r7, #8
   133d6:	46bd      	mov	sp, r7
   133d8:	bd80      	pop	{r7, pc}
   133da:	bf00      	nop
   133dc:	00013325 	.word	0x00013325
   133e0:	0000f3a9 	.word	0x0000f3a9
   133e4:	0001335d 	.word	0x0001335d
   133e8:	20003e18 	.word	0x20003e18

000133ec <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   133ec:	b580      	push	{r7, lr}
   133ee:	b082      	sub	sp, #8
   133f0:	af00      	add	r7, sp, #0
   133f2:	6078      	str	r0, [r7, #4]
   133f4:	687b      	ldr	r3, [r7, #4]
   133f6:	4618      	mov	r0, r3
   133f8:	4b0a      	ldr	r3, [pc, #40]	; (13424 <_ZN9CDC_ClassC1Ev+0x38>)
   133fa:	4798      	blx	r3
   133fc:	687b      	ldr	r3, [r7, #4]
   133fe:	3310      	adds	r3, #16
   13400:	4618      	mov	r0, r3
   13402:	4b09      	ldr	r3, [pc, #36]	; (13428 <_ZN9CDC_ClassC1Ev+0x3c>)
   13404:	4798      	blx	r3
   13406:	4a09      	ldr	r2, [pc, #36]	; (1342c <_ZN9CDC_ClassC1Ev+0x40>)
   13408:	687b      	ldr	r3, [r7, #4]
   1340a:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   1340c:	687b      	ldr	r3, [r7, #4]
   1340e:	f04f 32ff 	mov.w	r2, #4294967295
   13412:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   13414:	4a06      	ldr	r2, [pc, #24]	; (13430 <_ZN9CDC_ClassC1Ev+0x44>)
   13416:	687b      	ldr	r3, [r7, #4]
   13418:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   1341a:	687b      	ldr	r3, [r7, #4]
   1341c:	4618      	mov	r0, r3
   1341e:	3708      	adds	r7, #8
   13420:	46bd      	mov	sp, r7
   13422:	bd80      	pop	{r7, pc}
   13424:	000132f5 	.word	0x000132f5
   13428:	00013bd9 	.word	0x00013bd9
   1342c:	0001ba9c 	.word	0x0001ba9c
   13430:	20003e18 	.word	0x20003e18

00013434 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   13434:	b580      	push	{r7, lr}
   13436:	b082      	sub	sp, #8
   13438:	af00      	add	r7, sp, #0
   1343a:	6078      	str	r0, [r7, #4]
   1343c:	4a06      	ldr	r2, [pc, #24]	; (13458 <_ZN9CDC_ClassD1Ev+0x24>)
   1343e:	687b      	ldr	r3, [r7, #4]
   13440:	601a      	str	r2, [r3, #0]
   13442:	687b      	ldr	r3, [r7, #4]
   13444:	3310      	adds	r3, #16
   13446:	4618      	mov	r0, r3
   13448:	4b04      	ldr	r3, [pc, #16]	; (1345c <_ZN9CDC_ClassD1Ev+0x28>)
   1344a:	4798      	blx	r3
{
} //~CDC_Class
   1344c:	687b      	ldr	r3, [r7, #4]
   1344e:	4618      	mov	r0, r3
   13450:	3708      	adds	r7, #8
   13452:	46bd      	mov	sp, r7
   13454:	bd80      	pop	{r7, pc}
   13456:	bf00      	nop
   13458:	0001ba9c 	.word	0x0001ba9c
   1345c:	00013bf9 	.word	0x00013bf9

00013460 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   13460:	b580      	push	{r7, lr}
   13462:	b082      	sub	sp, #8
   13464:	af00      	add	r7, sp, #0
   13466:	6078      	str	r0, [r7, #4]
	
	OnInit();
   13468:	687b      	ldr	r3, [r7, #4]
   1346a:	3310      	adds	r3, #16
   1346c:	4618      	mov	r0, r3
   1346e:	4b06      	ldr	r3, [pc, #24]	; (13488 <_ZN9CDC_Class4InitEv+0x28>)
   13470:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   13472:	4906      	ldr	r1, [pc, #24]	; (1348c <_ZN9CDC_Class4InitEv+0x2c>)
   13474:	2003      	movs	r0, #3
   13476:	4b06      	ldr	r3, [pc, #24]	; (13490 <_ZN9CDC_Class4InitEv+0x30>)
   13478:	4798      	blx	r3
	
		
	if (plugged)
   1347a:	687b      	ldr	r3, [r7, #4]
   1347c:	7c1b      	ldrb	r3, [r3, #16]
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	

}
   1347e:	bf00      	nop
   13480:	3708      	adds	r7, #8
   13482:	46bd      	mov	sp, r7
   13484:	bd80      	pop	{r7, pc}
   13486:	bf00      	nop
   13488:	00013c0d 	.word	0x00013c0d
   1348c:	00013395 	.word	0x00013395
   13490:	0000f3a9 	.word	0x0000f3a9

00013494 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   13494:	b580      	push	{r7, lr}
   13496:	b082      	sub	sp, #8
   13498:	af00      	add	r7, sp, #0
   1349a:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   1349c:	4b03      	ldr	r3, [pc, #12]	; (134ac <_ZN9CDC_Class9IsEnabledEv+0x18>)
   1349e:	4798      	blx	r3
   134a0:	4603      	mov	r3, r0
	
}
   134a2:	4618      	mov	r0, r3
   134a4:	3708      	adds	r7, #8
   134a6:	46bd      	mov	sp, r7
   134a8:	bd80      	pop	{r7, pc}
   134aa:	bf00      	nop
   134ac:	0000f421 	.word	0x0000f421

000134b0 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   134b0:	b580      	push	{r7, lr}
   134b2:	b084      	sub	sp, #16
   134b4:	af00      	add	r7, sp, #0
   134b6:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   134b8:	687b      	ldr	r3, [r7, #4]
   134ba:	699b      	ldr	r3, [r3, #24]
   134bc:	f1b3 3fff 	cmp.w	r3, #4294967295
   134c0:	bf14      	ite	ne
   134c2:	2301      	movne	r3, #1
   134c4:	2300      	moveq	r3, #0
   134c6:	b2db      	uxtb	r3, r3
   134c8:	2b00      	cmp	r3, #0
   134ca:	d002      	beq.n	134d2 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   134cc:	687b      	ldr	r3, [r7, #4]
   134ce:	699b      	ldr	r3, [r3, #24]
   134d0:	e011      	b.n	134f6 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	681b      	ldr	r3, [r3, #0]
   134d6:	331c      	adds	r3, #28
   134d8:	681b      	ldr	r3, [r3, #0]
   134da:	f107 010f 	add.w	r1, r7, #15
   134de:	2201      	movs	r2, #1
   134e0:	6878      	ldr	r0, [r7, #4]
   134e2:	4798      	blx	r3
   134e4:	4602      	mov	r2, r0
   134e6:	687b      	ldr	r3, [r7, #4]
   134e8:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   134ea:	7bfb      	ldrb	r3, [r7, #15]
   134ec:	461a      	mov	r2, r3
   134ee:	687b      	ldr	r3, [r7, #4]
   134f0:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   134f2:	687b      	ldr	r3, [r7, #4]
   134f4:	699b      	ldr	r3, [r3, #24]
}
   134f6:	4618      	mov	r0, r3
   134f8:	3710      	adds	r7, #16
   134fa:	46bd      	mov	sp, r7
   134fc:	bd80      	pop	{r7, pc}
	...

00013500 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   13500:	b580      	push	{r7, lr}
   13502:	b086      	sub	sp, #24
   13504:	af00      	add	r7, sp, #0
   13506:	60f8      	str	r0, [r7, #12]
   13508:	60b9      	str	r1, [r7, #8]
   1350a:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	rxReady=false;
   1350c:	68fb      	ldr	r3, [r7, #12]
   1350e:	2200      	movs	r2, #0
   13510:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   13512:	687b      	ldr	r3, [r7, #4]
   13514:	4619      	mov	r1, r3
   13516:	68b8      	ldr	r0, [r7, #8]
   13518:	4b08      	ldr	r3, [pc, #32]	; (1353c <_ZN9CDC_Class8readDataEPvl+0x3c>)
   1351a:	4798      	blx	r3
   1351c:	4603      	mov	r3, r0
   1351e:	75fb      	strb	r3, [r7, #23]
	while(!rxReady);
   13520:	68fb      	ldr	r3, [r7, #12]
   13522:	7d5b      	ldrb	r3, [r3, #21]
   13524:	b2db      	uxtb	r3, r3
   13526:	f083 0301 	eor.w	r3, r3, #1
   1352a:	b2db      	uxtb	r3, r3
   1352c:	2b00      	cmp	r3, #0
   1352e:	d000      	beq.n	13532 <_ZN9CDC_Class8readDataEPvl+0x32>
   13530:	e7f6      	b.n	13520 <_ZN9CDC_Class8readDataEPvl+0x20>
	return r;
   13532:	7dfb      	ldrb	r3, [r7, #23]
}
   13534:	4618      	mov	r0, r3
   13536:	3718      	adds	r7, #24
   13538:	46bd      	mov	sp, r7
   1353a:	bd80      	pop	{r7, pc}
   1353c:	0000f2fd 	.word	0x0000f2fd

00013540 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   13540:	b580      	push	{r7, lr}
   13542:	b084      	sub	sp, #16
   13544:	af00      	add	r7, sp, #0
   13546:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   13548:	687b      	ldr	r3, [r7, #4]
   1354a:	2200      	movs	r2, #0
   1354c:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   1354e:	f107 030f 	add.w	r3, r7, #15
   13552:	2101      	movs	r1, #1
   13554:	4618      	mov	r0, r3
   13556:	4b08      	ldr	r3, [pc, #32]	; (13578 <_ZN9CDC_Class4readEv+0x38>)
   13558:	4798      	blx	r3
	while(!rxReady);
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	7d5b      	ldrb	r3, [r3, #21]
   1355e:	b2db      	uxtb	r3, r3
   13560:	f083 0301 	eor.w	r3, r3, #1
   13564:	b2db      	uxtb	r3, r3
   13566:	2b00      	cmp	r3, #0
   13568:	d000      	beq.n	1356c <_ZN9CDC_Class4readEv+0x2c>
   1356a:	e7f6      	b.n	1355a <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   1356c:	7bfb      	ldrb	r3, [r7, #15]
}
   1356e:	4618      	mov	r0, r3
   13570:	3710      	adds	r7, #16
   13572:	46bd      	mov	sp, r7
   13574:	bd80      	pop	{r7, pc}
   13576:	bf00      	nop
   13578:	0000f2fd 	.word	0x0000f2fd

0001357c <_ZN9CDC_Class5flushEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	while(!rxReady);
	return r;
}
void	CDC_Class::flush(void){
   1357c:	b580      	push	{r7, lr}
   1357e:	b082      	sub	sp, #8
   13580:	af00      	add	r7, sp, #0
   13582:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   13584:	687b      	ldr	r3, [r7, #4]
   13586:	331c      	adds	r3, #28
   13588:	2140      	movs	r1, #64	; 0x40
   1358a:	4618      	mov	r0, r3
   1358c:	4b02      	ldr	r3, [pc, #8]	; (13598 <_ZN9CDC_Class5flushEv+0x1c>)
   1358e:	4798      	blx	r3
}
   13590:	bf00      	nop
   13592:	3708      	adds	r7, #8
   13594:	46bd      	mov	sp, r7
   13596:	bd80      	pop	{r7, pc}
   13598:	0000f341 	.word	0x0000f341

0001359c <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   1359c:	b580      	push	{r7, lr}
   1359e:	b082      	sub	sp, #8
   135a0:	af00      	add	r7, sp, #0
   135a2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   135a4:	4b02      	ldr	r3, [pc, #8]	; (135b0 <_ZN9CDC_Class5clearEv+0x14>)
   135a6:	4798      	blx	r3
}
   135a8:	bf00      	nop
   135aa:	3708      	adds	r7, #8
   135ac:	46bd      	mov	sp, r7
   135ae:	bd80      	pop	{r7, pc}
   135b0:	0000f385 	.word	0x0000f385

000135b4 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   135b4:	b580      	push	{r7, lr}
   135b6:	b082      	sub	sp, #8
   135b8:	af00      	add	r7, sp, #0
   135ba:	6078      	str	r0, [r7, #4]
   135bc:	460b      	mov	r3, r1
   135be:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
   135c0:	687b      	ldr	r3, [r7, #4]
   135c2:	7d1b      	ldrb	r3, [r3, #20]
   135c4:	b2db      	uxtb	r3, r3
   135c6:	f083 0301 	eor.w	r3, r3, #1
   135ca:	b2db      	uxtb	r3, r3
   135cc:	2b00      	cmp	r3, #0
   135ce:	d000      	beq.n	135d2 <_ZN9CDC_Class5writeEh+0x1e>
   135d0:	e7f6      	b.n	135c0 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
   135d2:	687b      	ldr	r3, [r7, #4]
   135d4:	681b      	ldr	r3, [r3, #0]
   135d6:	3324      	adds	r3, #36	; 0x24
   135d8:	681b      	ldr	r3, [r3, #0]
   135da:	1cf9      	adds	r1, r7, #3
   135dc:	2201      	movs	r2, #1
   135de:	6878      	ldr	r0, [r7, #4]
   135e0:	4798      	blx	r3
   135e2:	4603      	mov	r3, r0
}
   135e4:	4618      	mov	r0, r3
   135e6:	3708      	adds	r7, #8
   135e8:	46bd      	mov	sp, r7
   135ea:	bd80      	pop	{r7, pc}

000135ec <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   135ec:	b580      	push	{r7, lr}
   135ee:	b086      	sub	sp, #24
   135f0:	af00      	add	r7, sp, #0
   135f2:	60f8      	str	r0, [r7, #12]
   135f4:	60b9      	str	r1, [r7, #8]
   135f6:	607a      	str	r2, [r7, #4]
	
	txReady=false;
   135f8:	68fb      	ldr	r3, [r7, #12]
   135fa:	2200      	movs	r2, #0
   135fc:	751a      	strb	r2, [r3, #20]
	if (CheckTerminal())
   135fe:	68fb      	ldr	r3, [r7, #12]
   13600:	3310      	adds	r3, #16
   13602:	4618      	mov	r0, r3
   13604:	4b14      	ldr	r3, [pc, #80]	; (13658 <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
   13606:	4798      	blx	r3
   13608:	4603      	mov	r3, r0
   1360a:	2b00      	cmp	r3, #0
   1360c:	d01e      	beq.n	1364c <_ZN9CDC_Class9writeDataEPKvl+0x60>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   1360e:	687b      	ldr	r3, [r7, #4]
   13610:	4619      	mov	r1, r3
   13612:	68b8      	ldr	r0, [r7, #8]
   13614:	4b11      	ldr	r3, [pc, #68]	; (1365c <_ZN9CDC_Class9writeDataEPKvl+0x70>)
   13616:	4798      	blx	r3
   13618:	4603      	mov	r3, r0
   1361a:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted)){
   1361c:	68fb      	ldr	r3, [r7, #12]
   1361e:	7d1b      	ldrb	r3, [r3, #20]
   13620:	b2db      	uxtb	r3, r3
   13622:	f083 0301 	eor.w	r3, r3, #1
   13626:	b2db      	uxtb	r3, r3
   13628:	2b00      	cmp	r3, #0
   1362a:	d006      	beq.n	1363a <_ZN9CDC_Class9writeDataEPKvl+0x4e>
   1362c:	68fb      	ldr	r3, [r7, #12]
   1362e:	7c5b      	ldrb	r3, [r3, #17]
   13630:	b2db      	uxtb	r3, r3
   13632:	2b00      	cmp	r3, #0
   13634:	d001      	beq.n	1363a <_ZN9CDC_Class9writeDataEPKvl+0x4e>
   13636:	2301      	movs	r3, #1
   13638:	e000      	b.n	1363c <_ZN9CDC_Class9writeDataEPKvl+0x50>
   1363a:	2300      	movs	r3, #0
   1363c:	2b00      	cmp	r3, #0
   1363e:	d000      	beq.n	13642 <_ZN9CDC_Class9writeDataEPKvl+0x56>
   13640:	e7ec      	b.n	1361c <_ZN9CDC_Class9writeDataEPKvl+0x30>
			
			};
			usbTimer.Stop();
   13642:	4807      	ldr	r0, [pc, #28]	; (13660 <_ZN9CDC_Class9writeDataEPKvl+0x74>)
   13644:	4b07      	ldr	r3, [pc, #28]	; (13664 <_ZN9CDC_Class9writeDataEPKvl+0x78>)
   13646:	4798      	blx	r3
		return r;
   13648:	697b      	ldr	r3, [r7, #20]
   1364a:	e000      	b.n	1364e <_ZN9CDC_Class9writeDataEPKvl+0x62>
	} 
	else
	{
		return 0;
   1364c:	2300      	movs	r3, #0
	}
	

}
   1364e:	4618      	mov	r0, r3
   13650:	3718      	adds	r7, #24
   13652:	46bd      	mov	sp, r7
   13654:	bd80      	pop	{r7, pc}
   13656:	bf00      	nop
   13658:	00013ca9 	.word	0x00013ca9
   1365c:	0000f341 	.word	0x0000f341
   13660:	20003e84 	.word	0x20003e84
   13664:	00013e69 	.word	0x00013e69

00013668 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   13668:	b580      	push	{r7, lr}
   1366a:	b086      	sub	sp, #24
   1366c:	af00      	add	r7, sp, #0
   1366e:	60f8      	str	r0, [r7, #12]
   13670:	60b9      	str	r1, [r7, #8]
   13672:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   13674:	68fb      	ldr	r3, [r7, #12]
   13676:	2200      	movs	r2, #0
   13678:	751a      	strb	r2, [r3, #20]
/*	uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);*/
 	if (CheckTerminal(size)){
   1367a:	68fb      	ldr	r3, [r7, #12]
   1367c:	3310      	adds	r3, #16
   1367e:	6879      	ldr	r1, [r7, #4]
   13680:	4618      	mov	r0, r3
   13682:	4b14      	ldr	r3, [pc, #80]	; (136d4 <_ZN9CDC_Class5writeEPKhj+0x6c>)
   13684:	4798      	blx	r3
   13686:	4603      	mov	r3, r0
   13688:	2b00      	cmp	r3, #0
   1368a:	d01c      	beq.n	136c6 <_ZN9CDC_Class5writeEPKhj+0x5e>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   1368c:	6879      	ldr	r1, [r7, #4]
   1368e:	68b8      	ldr	r0, [r7, #8]
   13690:	4b11      	ldr	r3, [pc, #68]	; (136d8 <_ZN9CDC_Class5writeEPKhj+0x70>)
   13692:	4798      	blx	r3
   13694:	4603      	mov	r3, r0
   13696:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted));
   13698:	68fb      	ldr	r3, [r7, #12]
   1369a:	7d1b      	ldrb	r3, [r3, #20]
   1369c:	b2db      	uxtb	r3, r3
   1369e:	f083 0301 	eor.w	r3, r3, #1
   136a2:	b2db      	uxtb	r3, r3
   136a4:	2b00      	cmp	r3, #0
   136a6:	d006      	beq.n	136b6 <_ZN9CDC_Class5writeEPKhj+0x4e>
   136a8:	68fb      	ldr	r3, [r7, #12]
   136aa:	7c5b      	ldrb	r3, [r3, #17]
   136ac:	b2db      	uxtb	r3, r3
   136ae:	2b00      	cmp	r3, #0
   136b0:	d001      	beq.n	136b6 <_ZN9CDC_Class5writeEPKhj+0x4e>
   136b2:	2301      	movs	r3, #1
   136b4:	e000      	b.n	136b8 <_ZN9CDC_Class5writeEPKhj+0x50>
   136b6:	2300      	movs	r3, #0
   136b8:	2b00      	cmp	r3, #0
   136ba:	d000      	beq.n	136be <_ZN9CDC_Class5writeEPKhj+0x56>
   136bc:	e7ec      	b.n	13698 <_ZN9CDC_Class5writeEPKhj+0x30>
		//while((!txReady));
		usbTimer.Stop();
   136be:	4807      	ldr	r0, [pc, #28]	; (136dc <_ZN9CDC_Class5writeEPKhj+0x74>)
   136c0:	4b07      	ldr	r3, [pc, #28]	; (136e0 <_ZN9CDC_Class5writeEPKhj+0x78>)
   136c2:	4798      	blx	r3
   136c4:	e001      	b.n	136ca <_ZN9CDC_Class5writeEPKhj+0x62>
	}else{
 		r=0;
   136c6:	2300      	movs	r3, #0
   136c8:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   136ca:	697b      	ldr	r3, [r7, #20]
}
   136cc:	4618      	mov	r0, r3
   136ce:	3718      	adds	r7, #24
   136d0:	46bd      	mov	sp, r7
   136d2:	bd80      	pop	{r7, pc}
   136d4:	00013d21 	.word	0x00013d21
   136d8:	0000f341 	.word	0x0000f341
   136dc:	20003e84 	.word	0x20003e84
   136e0:	00013e69 	.word	0x00013e69

000136e4 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   136e4:	b480      	push	{r7}
   136e6:	b083      	sub	sp, #12
   136e8:	af00      	add	r7, sp, #0
   136ea:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   136ec:	687b      	ldr	r3, [r7, #4]
   136ee:	7d5b      	ldrb	r3, [r3, #21]
   136f0:	b2db      	uxtb	r3, r3
   136f2:	2b00      	cmp	r3, #0
   136f4:	d006      	beq.n	13704 <_ZN9CDC_Class9availableEv+0x20>
   136f6:	687b      	ldr	r3, [r7, #4]
   136f8:	7d1b      	ldrb	r3, [r3, #20]
   136fa:	b2db      	uxtb	r3, r3
   136fc:	2b00      	cmp	r3, #0
   136fe:	d001      	beq.n	13704 <_ZN9CDC_Class9availableEv+0x20>
   13700:	2301      	movs	r3, #1
   13702:	e000      	b.n	13706 <_ZN9CDC_Class9availableEv+0x22>
   13704:	2300      	movs	r3, #0
   13706:	2b00      	cmp	r3, #0
   13708:	d001      	beq.n	1370e <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   1370a:	2301      	movs	r3, #1
   1370c:	e000      	b.n	13710 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   1370e:	2300      	movs	r3, #0
	}
	
}
   13710:	4618      	mov	r0, r3
   13712:	370c      	adds	r7, #12
   13714:	46bd      	mov	sp, r7
   13716:	bc80      	pop	{r7}
   13718:	4770      	bx	lr
	...

0001371c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   1371c:	b580      	push	{r7, lr}
   1371e:	b082      	sub	sp, #8
   13720:	af00      	add	r7, sp, #0
   13722:	6078      	str	r0, [r7, #4]
   13724:	6039      	str	r1, [r7, #0]
   13726:	687b      	ldr	r3, [r7, #4]
   13728:	2b01      	cmp	r3, #1
   1372a:	d10c      	bne.n	13746 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   1372c:	683b      	ldr	r3, [r7, #0]
   1372e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13732:	4293      	cmp	r3, r2
   13734:	d107      	bne.n	13746 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13736:	4806      	ldr	r0, [pc, #24]	; (13750 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13738:	4b06      	ldr	r3, [pc, #24]	; (13754 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1373a:	4798      	blx	r3
   1373c:	4a06      	ldr	r2, [pc, #24]	; (13758 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1373e:	4907      	ldr	r1, [pc, #28]	; (1375c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13740:	4803      	ldr	r0, [pc, #12]	; (13750 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13742:	4b07      	ldr	r3, [pc, #28]	; (13760 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13744:	4798      	blx	r3
   13746:	bf00      	nop
   13748:	3708      	adds	r7, #8
   1374a:	46bd      	mov	sp, r7
   1374c:	bd80      	pop	{r7, pc}
   1374e:	bf00      	nop
   13750:	20003e1c 	.word	0x20003e1c
   13754:	000133ed 	.word	0x000133ed
   13758:	20000000 	.word	0x20000000
   1375c:	00013435 	.word	0x00013435
   13760:	0001427d 	.word	0x0001427d

00013764 <_GLOBAL__sub_I_ptrCDCClass>:
   13764:	b580      	push	{r7, lr}
   13766:	af00      	add	r7, sp, #0
   13768:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1376c:	2001      	movs	r0, #1
   1376e:	4b01      	ldr	r3, [pc, #4]	; (13774 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   13770:	4798      	blx	r3
   13772:	bd80      	pop	{r7, pc}
   13774:	0001371d 	.word	0x0001371d

00013778 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   13778:	b580      	push	{r7, lr}
   1377a:	b086      	sub	sp, #24
   1377c:	af00      	add	r7, sp, #0
   1377e:	60f8      	str	r0, [r7, #12]
   13780:	60b9      	str	r1, [r7, #8]
   13782:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   13784:	2300      	movs	r3, #0
   13786:	617b      	str	r3, [r7, #20]
  while (size--) {
   13788:	687b      	ldr	r3, [r7, #4]
   1378a:	1e5a      	subs	r2, r3, #1
   1378c:	607a      	str	r2, [r7, #4]
   1378e:	2b00      	cmp	r3, #0
   13790:	bf14      	ite	ne
   13792:	2301      	movne	r3, #1
   13794:	2300      	moveq	r3, #0
   13796:	b2db      	uxtb	r3, r3
   13798:	2b00      	cmp	r3, #0
   1379a:	d016      	beq.n	137ca <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   1379c:	68fb      	ldr	r3, [r7, #12]
   1379e:	681b      	ldr	r3, [r3, #0]
   137a0:	681a      	ldr	r2, [r3, #0]
   137a2:	68bb      	ldr	r3, [r7, #8]
   137a4:	1c59      	adds	r1, r3, #1
   137a6:	60b9      	str	r1, [r7, #8]
   137a8:	781b      	ldrb	r3, [r3, #0]
   137aa:	4619      	mov	r1, r3
   137ac:	68f8      	ldr	r0, [r7, #12]
   137ae:	4790      	blx	r2
   137b0:	4603      	mov	r3, r0
   137b2:	2b00      	cmp	r3, #0
   137b4:	bf14      	ite	ne
   137b6:	2301      	movne	r3, #1
   137b8:	2300      	moveq	r3, #0
   137ba:	b2db      	uxtb	r3, r3
   137bc:	2b00      	cmp	r3, #0
   137be:	d003      	beq.n	137c8 <_ZN5Print5writeEPKhj+0x50>
   137c0:	697b      	ldr	r3, [r7, #20]
   137c2:	3301      	adds	r3, #1
   137c4:	617b      	str	r3, [r7, #20]
  while (size--) {
   137c6:	e7df      	b.n	13788 <_ZN5Print5writeEPKhj+0x10>
    else break;
   137c8:	bf00      	nop
  }
  return n;
   137ca:	697b      	ldr	r3, [r7, #20]
}
   137cc:	4618      	mov	r0, r3
   137ce:	3718      	adds	r7, #24
   137d0:	46bd      	mov	sp, r7
   137d2:	bd80      	pop	{r7, pc}

000137d4 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
   137d4:	b580      	push	{r7, lr}
   137d6:	b082      	sub	sp, #8
   137d8:	af00      	add	r7, sp, #0
   137da:	6078      	str	r0, [r7, #4]
   137dc:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
   137de:	6839      	ldr	r1, [r7, #0]
   137e0:	6878      	ldr	r0, [r7, #4]
   137e2:	4b03      	ldr	r3, [pc, #12]	; (137f0 <_ZN5Print5printEPK19__FlashStringHelper+0x1c>)
   137e4:	4798      	blx	r3
   137e6:	4603      	mov	r3, r0
}
   137e8:	4618      	mov	r0, r3
   137ea:	3708      	adds	r7, #8
   137ec:	46bd      	mov	sp, r7
   137ee:	bd80      	pop	{r7, pc}
   137f0:	000137f5 	.word	0x000137f5

000137f4 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
   137f4:	b580      	push	{r7, lr}
   137f6:	b082      	sub	sp, #8
   137f8:	af00      	add	r7, sp, #0
   137fa:	6078      	str	r0, [r7, #4]
   137fc:	6039      	str	r1, [r7, #0]
  return write(str);
   137fe:	6839      	ldr	r1, [r7, #0]
   13800:	6878      	ldr	r0, [r7, #4]
   13802:	4b03      	ldr	r3, [pc, #12]	; (13810 <_ZN5Print5printEPKc+0x1c>)
   13804:	4798      	blx	r3
   13806:	4603      	mov	r3, r0
}
   13808:	4618      	mov	r0, r3
   1380a:	3708      	adds	r7, #8
   1380c:	46bd      	mov	sp, r7
   1380e:	bd80      	pop	{r7, pc}
   13810:	00001fa9 	.word	0x00001fa9

00013814 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
   13814:	b580      	push	{r7, lr}
   13816:	b082      	sub	sp, #8
   13818:	af00      	add	r7, sp, #0
   1381a:	6078      	str	r0, [r7, #4]
   1381c:	460b      	mov	r3, r1
   1381e:	70fb      	strb	r3, [r7, #3]
  return write(c);
   13820:	687b      	ldr	r3, [r7, #4]
   13822:	681b      	ldr	r3, [r3, #0]
   13824:	681b      	ldr	r3, [r3, #0]
   13826:	78fa      	ldrb	r2, [r7, #3]
   13828:	4611      	mov	r1, r2
   1382a:	6878      	ldr	r0, [r7, #4]
   1382c:	4798      	blx	r3
   1382e:	4603      	mov	r3, r0
}
   13830:	4618      	mov	r0, r3
   13832:	3708      	adds	r7, #8
   13834:	46bd      	mov	sp, r7
   13836:	bd80      	pop	{r7, pc}

00013838 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
   13838:	b580      	push	{r7, lr}
   1383a:	b084      	sub	sp, #16
   1383c:	af00      	add	r7, sp, #0
   1383e:	60f8      	str	r0, [r7, #12]
   13840:	460b      	mov	r3, r1
   13842:	607a      	str	r2, [r7, #4]
   13844:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
   13846:	7afb      	ldrb	r3, [r7, #11]
   13848:	687a      	ldr	r2, [r7, #4]
   1384a:	4619      	mov	r1, r3
   1384c:	68f8      	ldr	r0, [r7, #12]
   1384e:	4b03      	ldr	r3, [pc, #12]	; (1385c <_ZN5Print5printEhi+0x24>)
   13850:	4798      	blx	r3
   13852:	4603      	mov	r3, r0
}
   13854:	4618      	mov	r0, r3
   13856:	3710      	adds	r7, #16
   13858:	46bd      	mov	sp, r7
   1385a:	bd80      	pop	{r7, pc}
   1385c:	0001390d 	.word	0x0001390d

00013860 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
   13860:	b580      	push	{r7, lr}
   13862:	b084      	sub	sp, #16
   13864:	af00      	add	r7, sp, #0
   13866:	60f8      	str	r0, [r7, #12]
   13868:	60b9      	str	r1, [r7, #8]
   1386a:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
   1386c:	687a      	ldr	r2, [r7, #4]
   1386e:	68b9      	ldr	r1, [r7, #8]
   13870:	68f8      	ldr	r0, [r7, #12]
   13872:	4b03      	ldr	r3, [pc, #12]	; (13880 <_ZN5Print5printEii+0x20>)
   13874:	4798      	blx	r3
   13876:	4603      	mov	r3, r0
}
   13878:	4618      	mov	r0, r3
   1387a:	3710      	adds	r7, #16
   1387c:	46bd      	mov	sp, r7
   1387e:	bd80      	pop	{r7, pc}
   13880:	00013885 	.word	0x00013885

00013884 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   13884:	b580      	push	{r7, lr}
   13886:	b086      	sub	sp, #24
   13888:	af00      	add	r7, sp, #0
   1388a:	60f8      	str	r0, [r7, #12]
   1388c:	60b9      	str	r1, [r7, #8]
   1388e:	607a      	str	r2, [r7, #4]
  if (base == 0) {
   13890:	687b      	ldr	r3, [r7, #4]
   13892:	2b00      	cmp	r3, #0
   13894:	d109      	bne.n	138aa <_ZN5Print5printEli+0x26>
    return write(n);
   13896:	68fb      	ldr	r3, [r7, #12]
   13898:	681b      	ldr	r3, [r3, #0]
   1389a:	681b      	ldr	r3, [r3, #0]
   1389c:	68ba      	ldr	r2, [r7, #8]
   1389e:	b2d2      	uxtb	r2, r2
   138a0:	4611      	mov	r1, r2
   138a2:	68f8      	ldr	r0, [r7, #12]
   138a4:	4798      	blx	r3
   138a6:	4603      	mov	r3, r0
   138a8:	e028      	b.n	138fc <_ZN5Print5printEli+0x78>
  } else if (base == 10) {
   138aa:	687b      	ldr	r3, [r7, #4]
   138ac:	2b0a      	cmp	r3, #10
   138ae:	d11d      	bne.n	138ec <_ZN5Print5printEli+0x68>
    if (n < 0) {
   138b0:	68bb      	ldr	r3, [r7, #8]
   138b2:	2b00      	cmp	r3, #0
   138b4:	da12      	bge.n	138dc <_ZN5Print5printEli+0x58>
      int t = print('-');
   138b6:	212d      	movs	r1, #45	; 0x2d
   138b8:	68f8      	ldr	r0, [r7, #12]
   138ba:	4b12      	ldr	r3, [pc, #72]	; (13904 <_ZN5Print5printEli+0x80>)
   138bc:	4798      	blx	r3
   138be:	4603      	mov	r3, r0
   138c0:	617b      	str	r3, [r7, #20]
      n = -n;
   138c2:	68bb      	ldr	r3, [r7, #8]
   138c4:	425b      	negs	r3, r3
   138c6:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
   138c8:	68bb      	ldr	r3, [r7, #8]
   138ca:	220a      	movs	r2, #10
   138cc:	4619      	mov	r1, r3
   138ce:	68f8      	ldr	r0, [r7, #12]
   138d0:	4b0d      	ldr	r3, [pc, #52]	; (13908 <_ZN5Print5printEli+0x84>)
   138d2:	4798      	blx	r3
   138d4:	4602      	mov	r2, r0
   138d6:	697b      	ldr	r3, [r7, #20]
   138d8:	4413      	add	r3, r2
   138da:	e00f      	b.n	138fc <_ZN5Print5printEli+0x78>
    }
    return printNumber(n, 10);
   138dc:	68bb      	ldr	r3, [r7, #8]
   138de:	220a      	movs	r2, #10
   138e0:	4619      	mov	r1, r3
   138e2:	68f8      	ldr	r0, [r7, #12]
   138e4:	4b08      	ldr	r3, [pc, #32]	; (13908 <_ZN5Print5printEli+0x84>)
   138e6:	4798      	blx	r3
   138e8:	4603      	mov	r3, r0
   138ea:	e007      	b.n	138fc <_ZN5Print5printEli+0x78>
  } else {
    return printNumber(n, base);
   138ec:	68bb      	ldr	r3, [r7, #8]
   138ee:	687a      	ldr	r2, [r7, #4]
   138f0:	b2d2      	uxtb	r2, r2
   138f2:	4619      	mov	r1, r3
   138f4:	68f8      	ldr	r0, [r7, #12]
   138f6:	4b04      	ldr	r3, [pc, #16]	; (13908 <_ZN5Print5printEli+0x84>)
   138f8:	4798      	blx	r3
   138fa:	4603      	mov	r3, r0
  }
}
   138fc:	4618      	mov	r0, r3
   138fe:	3718      	adds	r7, #24
   13900:	46bd      	mov	sp, r7
   13902:	bd80      	pop	{r7, pc}
   13904:	00013815 	.word	0x00013815
   13908:	00013a15 	.word	0x00013a15

0001390c <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
   1390c:	b580      	push	{r7, lr}
   1390e:	b084      	sub	sp, #16
   13910:	af00      	add	r7, sp, #0
   13912:	60f8      	str	r0, [r7, #12]
   13914:	60b9      	str	r1, [r7, #8]
   13916:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
   13918:	687b      	ldr	r3, [r7, #4]
   1391a:	2b00      	cmp	r3, #0
   1391c:	d109      	bne.n	13932 <_ZN5Print5printEmi+0x26>
   1391e:	68fb      	ldr	r3, [r7, #12]
   13920:	681b      	ldr	r3, [r3, #0]
   13922:	681b      	ldr	r3, [r3, #0]
   13924:	68ba      	ldr	r2, [r7, #8]
   13926:	b2d2      	uxtb	r2, r2
   13928:	4611      	mov	r1, r2
   1392a:	68f8      	ldr	r0, [r7, #12]
   1392c:	4798      	blx	r3
   1392e:	4603      	mov	r3, r0
   13930:	e007      	b.n	13942 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
   13932:	687b      	ldr	r3, [r7, #4]
   13934:	b2db      	uxtb	r3, r3
   13936:	461a      	mov	r2, r3
   13938:	68b9      	ldr	r1, [r7, #8]
   1393a:	68f8      	ldr	r0, [r7, #12]
   1393c:	4b03      	ldr	r3, [pc, #12]	; (1394c <_ZN5Print5printEmi+0x40>)
   1393e:	4798      	blx	r3
   13940:	4603      	mov	r3, r0
}
   13942:	4618      	mov	r0, r3
   13944:	3710      	adds	r7, #16
   13946:	46bd      	mov	sp, r7
   13948:	bd80      	pop	{r7, pc}
   1394a:	bf00      	nop
   1394c:	00013a15 	.word	0x00013a15

00013950 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
   13950:	b580      	push	{r7, lr}
   13952:	b084      	sub	sp, #16
   13954:	af00      	add	r7, sp, #0
   13956:	6078      	str	r0, [r7, #4]
   13958:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
   1395a:	6839      	ldr	r1, [r7, #0]
   1395c:	6878      	ldr	r0, [r7, #4]
   1395e:	4b07      	ldr	r3, [pc, #28]	; (1397c <_ZN5Print7printlnEPK19__FlashStringHelper+0x2c>)
   13960:	4798      	blx	r3
   13962:	60f8      	str	r0, [r7, #12]
  n += println();
   13964:	6878      	ldr	r0, [r7, #4]
   13966:	4b06      	ldr	r3, [pc, #24]	; (13980 <_ZN5Print7printlnEPK19__FlashStringHelper+0x30>)
   13968:	4798      	blx	r3
   1396a:	4602      	mov	r2, r0
   1396c:	68fb      	ldr	r3, [r7, #12]
   1396e:	4413      	add	r3, r2
   13970:	60fb      	str	r3, [r7, #12]
  return n;
   13972:	68fb      	ldr	r3, [r7, #12]
}
   13974:	4618      	mov	r0, r3
   13976:	3710      	adds	r7, #16
   13978:	46bd      	mov	sp, r7
   1397a:	bd80      	pop	{r7, pc}
   1397c:	000137d5 	.word	0x000137d5
   13980:	00013985 	.word	0x00013985

00013984 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   13984:	b580      	push	{r7, lr}
   13986:	b082      	sub	sp, #8
   13988:	af00      	add	r7, sp, #0
   1398a:	6078      	str	r0, [r7, #4]
  return write("\r\n");
   1398c:	4904      	ldr	r1, [pc, #16]	; (139a0 <_ZN5Print7printlnEv+0x1c>)
   1398e:	6878      	ldr	r0, [r7, #4]
   13990:	4b04      	ldr	r3, [pc, #16]	; (139a4 <_ZN5Print7printlnEv+0x20>)
   13992:	4798      	blx	r3
   13994:	4603      	mov	r3, r0
}
   13996:	4618      	mov	r0, r3
   13998:	3708      	adds	r7, #8
   1399a:	46bd      	mov	sp, r7
   1399c:	bd80      	pop	{r7, pc}
   1399e:	bf00      	nop
   139a0:	0001baf0 	.word	0x0001baf0
   139a4:	00001fa9 	.word	0x00001fa9

000139a8 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
   139a8:	b580      	push	{r7, lr}
   139aa:	b084      	sub	sp, #16
   139ac:	af00      	add	r7, sp, #0
   139ae:	6078      	str	r0, [r7, #4]
   139b0:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
   139b2:	6839      	ldr	r1, [r7, #0]
   139b4:	6878      	ldr	r0, [r7, #4]
   139b6:	4b07      	ldr	r3, [pc, #28]	; (139d4 <_ZN5Print7printlnEPKc+0x2c>)
   139b8:	4798      	blx	r3
   139ba:	60f8      	str	r0, [r7, #12]
  n += println();
   139bc:	6878      	ldr	r0, [r7, #4]
   139be:	4b06      	ldr	r3, [pc, #24]	; (139d8 <_ZN5Print7printlnEPKc+0x30>)
   139c0:	4798      	blx	r3
   139c2:	4602      	mov	r2, r0
   139c4:	68fb      	ldr	r3, [r7, #12]
   139c6:	4413      	add	r3, r2
   139c8:	60fb      	str	r3, [r7, #12]
  return n;
   139ca:	68fb      	ldr	r3, [r7, #12]
}
   139cc:	4618      	mov	r0, r3
   139ce:	3710      	adds	r7, #16
   139d0:	46bd      	mov	sp, r7
   139d2:	bd80      	pop	{r7, pc}
   139d4:	000137f5 	.word	0x000137f5
   139d8:	00013985 	.word	0x00013985

000139dc <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   139dc:	b580      	push	{r7, lr}
   139de:	b086      	sub	sp, #24
   139e0:	af00      	add	r7, sp, #0
   139e2:	60f8      	str	r0, [r7, #12]
   139e4:	60b9      	str	r1, [r7, #8]
   139e6:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
   139e8:	687a      	ldr	r2, [r7, #4]
   139ea:	68b9      	ldr	r1, [r7, #8]
   139ec:	68f8      	ldr	r0, [r7, #12]
   139ee:	4b07      	ldr	r3, [pc, #28]	; (13a0c <_ZN5Print7printlnEmi+0x30>)
   139f0:	4798      	blx	r3
   139f2:	6178      	str	r0, [r7, #20]
  n += println();
   139f4:	68f8      	ldr	r0, [r7, #12]
   139f6:	4b06      	ldr	r3, [pc, #24]	; (13a10 <_ZN5Print7printlnEmi+0x34>)
   139f8:	4798      	blx	r3
   139fa:	4602      	mov	r2, r0
   139fc:	697b      	ldr	r3, [r7, #20]
   139fe:	4413      	add	r3, r2
   13a00:	617b      	str	r3, [r7, #20]
  return n;
   13a02:	697b      	ldr	r3, [r7, #20]
}
   13a04:	4618      	mov	r0, r3
   13a06:	3718      	adds	r7, #24
   13a08:	46bd      	mov	sp, r7
   13a0a:	bd80      	pop	{r7, pc}
   13a0c:	0001390d 	.word	0x0001390d
   13a10:	00013985 	.word	0x00013985

00013a14 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   13a14:	b580      	push	{r7, lr}
   13a16:	b08e      	sub	sp, #56	; 0x38
   13a18:	af00      	add	r7, sp, #0
   13a1a:	60f8      	str	r0, [r7, #12]
   13a1c:	60b9      	str	r1, [r7, #8]
   13a1e:	4613      	mov	r3, r2
   13a20:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
   13a22:	f107 0310 	add.w	r3, r7, #16
   13a26:	3320      	adds	r3, #32
   13a28:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
   13a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13a2c:	2200      	movs	r2, #0
   13a2e:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   13a30:	79fb      	ldrb	r3, [r7, #7]
   13a32:	2b01      	cmp	r3, #1
   13a34:	dc01      	bgt.n	13a3a <_ZN5Print11printNumberEmh+0x26>
   13a36:	230a      	movs	r3, #10
   13a38:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
   13a3a:	79fa      	ldrb	r2, [r7, #7]
   13a3c:	68bb      	ldr	r3, [r7, #8]
   13a3e:	fbb3 f1f2 	udiv	r1, r3, r2
   13a42:	fb02 f201 	mul.w	r2, r2, r1
   13a46:	1a9b      	subs	r3, r3, r2
   13a48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
   13a4c:	79fb      	ldrb	r3, [r7, #7]
   13a4e:	68ba      	ldr	r2, [r7, #8]
   13a50:	fbb2 f3f3 	udiv	r3, r2, r3
   13a54:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   13a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13a58:	3b01      	subs	r3, #1
   13a5a:	637b      	str	r3, [r7, #52]	; 0x34
   13a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   13a60:	2b09      	cmp	r3, #9
   13a62:	dc04      	bgt.n	13a6e <_ZN5Print11printNumberEmh+0x5a>
   13a64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   13a68:	3330      	adds	r3, #48	; 0x30
   13a6a:	b2db      	uxtb	r3, r3
   13a6c:	e003      	b.n	13a76 <_ZN5Print11printNumberEmh+0x62>
   13a6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   13a72:	3337      	adds	r3, #55	; 0x37
   13a74:	b2db      	uxtb	r3, r3
   13a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   13a78:	7013      	strb	r3, [r2, #0]
  } while(n);
   13a7a:	68bb      	ldr	r3, [r7, #8]
   13a7c:	2b00      	cmp	r3, #0
   13a7e:	d000      	beq.n	13a82 <_ZN5Print11printNumberEmh+0x6e>
  do {
   13a80:	e7db      	b.n	13a3a <_ZN5Print11printNumberEmh+0x26>

  return write(str);
   13a82:	6b79      	ldr	r1, [r7, #52]	; 0x34
   13a84:	68f8      	ldr	r0, [r7, #12]
   13a86:	4b03      	ldr	r3, [pc, #12]	; (13a94 <_ZN5Print11printNumberEmh+0x80>)
   13a88:	4798      	blx	r3
   13a8a:	4603      	mov	r3, r0
}
   13a8c:	4618      	mov	r0, r3
   13a8e:	3738      	adds	r7, #56	; 0x38
   13a90:	46bd      	mov	sp, r7
   13a92:	bd80      	pop	{r7, pc}
   13a94:	00001fa9 	.word	0x00001fa9

00013a98 <hri_port_read_DIR_reg>:
{
   13a98:	b480      	push	{r7}
   13a9a:	b083      	sub	sp, #12
   13a9c:	af00      	add	r7, sp, #0
   13a9e:	6078      	str	r0, [r7, #4]
   13aa0:	460b      	mov	r3, r1
   13aa2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   13aa4:	78fb      	ldrb	r3, [r7, #3]
   13aa6:	687a      	ldr	r2, [r7, #4]
   13aa8:	01db      	lsls	r3, r3, #7
   13aaa:	4413      	add	r3, r2
   13aac:	681b      	ldr	r3, [r3, #0]
}
   13aae:	4618      	mov	r0, r3
   13ab0:	370c      	adds	r7, #12
   13ab2:	46bd      	mov	sp, r7
   13ab4:	bc80      	pop	{r7}
   13ab6:	4770      	bx	lr

00013ab8 <hri_port_read_OUT_reg>:
{
   13ab8:	b480      	push	{r7}
   13aba:	b083      	sub	sp, #12
   13abc:	af00      	add	r7, sp, #0
   13abe:	6078      	str	r0, [r7, #4]
   13ac0:	460b      	mov	r3, r1
   13ac2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   13ac4:	78fb      	ldrb	r3, [r7, #3]
   13ac6:	687a      	ldr	r2, [r7, #4]
   13ac8:	01db      	lsls	r3, r3, #7
   13aca:	4413      	add	r3, r2
   13acc:	3310      	adds	r3, #16
   13ace:	681b      	ldr	r3, [r3, #0]
}
   13ad0:	4618      	mov	r0, r3
   13ad2:	370c      	adds	r7, #12
   13ad4:	46bd      	mov	sp, r7
   13ad6:	bc80      	pop	{r7}
   13ad8:	4770      	bx	lr

00013ada <hri_port_read_IN_reg>:
{
   13ada:	b480      	push	{r7}
   13adc:	b083      	sub	sp, #12
   13ade:	af00      	add	r7, sp, #0
   13ae0:	6078      	str	r0, [r7, #4]
   13ae2:	460b      	mov	r3, r1
   13ae4:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   13ae6:	78fb      	ldrb	r3, [r7, #3]
   13ae8:	687a      	ldr	r2, [r7, #4]
   13aea:	01db      	lsls	r3, r3, #7
   13aec:	4413      	add	r3, r2
   13aee:	3320      	adds	r3, #32
   13af0:	681b      	ldr	r3, [r3, #0]
}
   13af2:	4618      	mov	r0, r3
   13af4:	370c      	adds	r7, #12
   13af6:	46bd      	mov	sp, r7
   13af8:	bc80      	pop	{r7}
   13afa:	4770      	bx	lr

00013afc <_gpio_get_level>:
{
   13afc:	b580      	push	{r7, lr}
   13afe:	b086      	sub	sp, #24
   13b00:	af00      	add	r7, sp, #0
   13b02:	4603      	mov	r3, r0
   13b04:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
   13b06:	f107 030c 	add.w	r3, r7, #12
   13b0a:	4618      	mov	r0, r3
   13b0c:	4b13      	ldr	r3, [pc, #76]	; (13b5c <_gpio_get_level+0x60>)
   13b0e:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   13b10:	79fb      	ldrb	r3, [r7, #7]
   13b12:	4619      	mov	r1, r3
   13b14:	4812      	ldr	r0, [pc, #72]	; (13b60 <_gpio_get_level+0x64>)
   13b16:	4b13      	ldr	r3, [pc, #76]	; (13b64 <_gpio_get_level+0x68>)
   13b18:	4798      	blx	r3
   13b1a:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   13b1c:	79fb      	ldrb	r3, [r7, #7]
   13b1e:	4619      	mov	r1, r3
   13b20:	480f      	ldr	r0, [pc, #60]	; (13b60 <_gpio_get_level+0x64>)
   13b22:	4b11      	ldr	r3, [pc, #68]	; (13b68 <_gpio_get_level+0x6c>)
   13b24:	4798      	blx	r3
   13b26:	4602      	mov	r2, r0
   13b28:	697b      	ldr	r3, [r7, #20]
   13b2a:	43db      	mvns	r3, r3
   13b2c:	4013      	ands	r3, r2
   13b2e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   13b30:	79fb      	ldrb	r3, [r7, #7]
   13b32:	4619      	mov	r1, r3
   13b34:	480a      	ldr	r0, [pc, #40]	; (13b60 <_gpio_get_level+0x64>)
   13b36:	4b0d      	ldr	r3, [pc, #52]	; (13b6c <_gpio_get_level+0x70>)
   13b38:	4798      	blx	r3
   13b3a:	4602      	mov	r2, r0
   13b3c:	697b      	ldr	r3, [r7, #20]
   13b3e:	4013      	ands	r3, r2
   13b40:	693a      	ldr	r2, [r7, #16]
   13b42:	4313      	orrs	r3, r2
   13b44:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
   13b46:	f107 030c 	add.w	r3, r7, #12
   13b4a:	4618      	mov	r0, r3
   13b4c:	4b08      	ldr	r3, [pc, #32]	; (13b70 <_gpio_get_level+0x74>)
   13b4e:	4798      	blx	r3
	return tmp;
   13b50:	693b      	ldr	r3, [r7, #16]
}
   13b52:	4618      	mov	r0, r3
   13b54:	3718      	adds	r7, #24
   13b56:	46bd      	mov	sp, r7
   13b58:	bd80      	pop	{r7, pc}
   13b5a:	bf00      	nop
   13b5c:	0000e51d 	.word	0x0000e51d
   13b60:	41008000 	.word	0x41008000
   13b64:	00013a99 	.word	0x00013a99
   13b68:	00013adb 	.word	0x00013adb
   13b6c:	00013ab9 	.word	0x00013ab9
   13b70:	0000e543 	.word	0x0000e543

00013b74 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   13b74:	b580      	push	{r7, lr}
   13b76:	b082      	sub	sp, #8
   13b78:	af00      	add	r7, sp, #0
   13b7a:	4603      	mov	r3, r0
   13b7c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   13b7e:	79fb      	ldrb	r3, [r7, #7]
   13b80:	115b      	asrs	r3, r3, #5
   13b82:	b2db      	uxtb	r3, r3
   13b84:	4618      	mov	r0, r3
   13b86:	4b09      	ldr	r3, [pc, #36]	; (13bac <gpio_get_pin_level+0x38>)
   13b88:	4798      	blx	r3
   13b8a:	4601      	mov	r1, r0
   13b8c:	79fb      	ldrb	r3, [r7, #7]
   13b8e:	f003 031f 	and.w	r3, r3, #31
   13b92:	2201      	movs	r2, #1
   13b94:	fa02 f303 	lsl.w	r3, r2, r3
   13b98:	400b      	ands	r3, r1
   13b9a:	2b00      	cmp	r3, #0
   13b9c:	bf14      	ite	ne
   13b9e:	2301      	movne	r3, #1
   13ba0:	2300      	moveq	r3, #0
   13ba2:	b2db      	uxtb	r3, r3
}
   13ba4:	4618      	mov	r0, r3
   13ba6:	3708      	adds	r7, #8
   13ba8:	46bd      	mov	sp, r7
   13baa:	bd80      	pop	{r7, pc}
   13bac:	00013afd 	.word	0x00013afd

00013bb0 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   13bb0:	b480      	push	{r7}
   13bb2:	b083      	sub	sp, #12
   13bb4:	af00      	add	r7, sp, #0
   13bb6:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   13bb8:	4b06      	ldr	r3, [pc, #24]	; (13bd4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   13bba:	681b      	ldr	r3, [r3, #0]
   13bbc:	2201      	movs	r2, #1
   13bbe:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->terminalStarted=false;
   13bc0:	4b04      	ldr	r3, [pc, #16]	; (13bd4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   13bc2:	681b      	ldr	r3, [r3, #0]
   13bc4:	2200      	movs	r2, #0
   13bc6:	705a      	strb	r2, [r3, #1]
}
   13bc8:	bf00      	nop
   13bca:	370c      	adds	r7, #12
   13bcc:	46bd      	mov	sp, r7
   13bce:	bc80      	pop	{r7}
   13bd0:	4770      	bx	lr
   13bd2:	bf00      	nop
   13bd4:	20003e7c 	.word	0x20003e7c

00013bd8 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   13bd8:	b480      	push	{r7}
   13bda:	b083      	sub	sp, #12
   13bdc:	af00      	add	r7, sp, #0
   13bde:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   13be0:	4a04      	ldr	r2, [pc, #16]	; (13bf4 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   13be2:	687b      	ldr	r3, [r7, #4]
   13be4:	6013      	str	r3, [r2, #0]
} //SerialTerminal_Class
   13be6:	687b      	ldr	r3, [r7, #4]
   13be8:	4618      	mov	r0, r3
   13bea:	370c      	adds	r7, #12
   13bec:	46bd      	mov	sp, r7
   13bee:	bc80      	pop	{r7}
   13bf0:	4770      	bx	lr
   13bf2:	bf00      	nop
   13bf4:	20003e7c 	.word	0x20003e7c

00013bf8 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   13bf8:	b480      	push	{r7}
   13bfa:	b083      	sub	sp, #12
   13bfc:	af00      	add	r7, sp, #0
   13bfe:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   13c00:	687b      	ldr	r3, [r7, #4]
   13c02:	4618      	mov	r0, r3
   13c04:	370c      	adds	r7, #12
   13c06:	46bd      	mov	sp, r7
   13c08:	bc80      	pop	{r7}
   13c0a:	4770      	bx	lr

00013c0c <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   13c0c:	b580      	push	{r7, lr}
   13c0e:	b082      	sub	sp, #8
   13c10:	af00      	add	r7, sp, #0
   13c12:	6078      	str	r0, [r7, #4]
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   13c14:	2040      	movs	r0, #64	; 0x40
   13c16:	4b1c      	ldr	r3, [pc, #112]	; (13c88 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>)
   13c18:	4798      	blx	r3
   13c1a:	4603      	mov	r3, r0
   13c1c:	461a      	mov	r2, r3
   13c1e:	687b      	ldr	r3, [r7, #4]
   13c20:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   13c22:	687b      	ldr	r3, [r7, #4]
   13c24:	78db      	ldrb	r3, [r3, #3]
   13c26:	2b00      	cmp	r3, #0
   13c28:	d024      	beq.n	13c74 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
		{
			timeout=false;
   13c2a:	687b      	ldr	r3, [r7, #4]
   13c2c:	2200      	movs	r2, #0
   13c2e:	709a      	strb	r2, [r3, #2]
			terminalStarted=true;
   13c30:	687b      	ldr	r3, [r7, #4]
   13c32:	2201      	movs	r2, #1
   13c34:	705a      	strb	r2, [r3, #1]
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   13c36:	f44f 7216 	mov.w	r2, #600	; 0x258
   13c3a:	4914      	ldr	r1, [pc, #80]	; (13c8c <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
   13c3c:	4814      	ldr	r0, [pc, #80]	; (13c90 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   13c3e:	4b15      	ldr	r3, [pc, #84]	; (13c94 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   13c40:	4798      	blx	r3
			usbTimer.Start();
   13c42:	4813      	ldr	r0, [pc, #76]	; (13c90 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   13c44:	4b14      	ldr	r3, [pc, #80]	; (13c98 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   13c46:	4798      	blx	r3
			while (!usb.IsEnabled()){
   13c48:	4814      	ldr	r0, [pc, #80]	; (13c9c <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   13c4a:	4b15      	ldr	r3, [pc, #84]	; (13ca0 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   13c4c:	4798      	blx	r3
   13c4e:	4603      	mov	r3, r0
   13c50:	f083 0301 	eor.w	r3, r3, #1
   13c54:	b2db      	uxtb	r3, r3
   13c56:	2b00      	cmp	r3, #0
   13c58:	d008      	beq.n	13c6c <_ZN20SerialTerminal_Class6OnInitEv+0x60>
				if (timeout)
   13c5a:	687b      	ldr	r3, [r7, #4]
   13c5c:	789b      	ldrb	r3, [r3, #2]
   13c5e:	b2db      	uxtb	r3, r3
   13c60:	2b00      	cmp	r3, #0
   13c62:	d0f1      	beq.n	13c48 <_ZN20SerialTerminal_Class6OnInitEv+0x3c>
				{
					plugged=false;
   13c64:	687b      	ldr	r3, [r7, #4]
   13c66:	2200      	movs	r2, #0
   13c68:	701a      	strb	r2, [r3, #0]
					return;
   13c6a:	e009      	b.n	13c80 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
				else
				{
				}
			}
			
			usbTimer.Stop();
   13c6c:	4808      	ldr	r0, [pc, #32]	; (13c90 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   13c6e:	4b0d      	ldr	r3, [pc, #52]	; (13ca4 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   13c70:	4798      	blx	r3
   13c72:	e005      	b.n	13c80 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
		} 
		else
		{
			plugged=false;
   13c74:	687b      	ldr	r3, [r7, #4]
   13c76:	2200      	movs	r2, #0
   13c78:	701a      	strb	r2, [r3, #0]
			terminalStarted=false;
   13c7a:	687b      	ldr	r3, [r7, #4]
   13c7c:	2200      	movs	r2, #0
   13c7e:	705a      	strb	r2, [r3, #1]
		}
		
}
   13c80:	3708      	adds	r7, #8
   13c82:	46bd      	mov	sp, r7
   13c84:	bd80      	pop	{r7, pc}
   13c86:	bf00      	nop
   13c88:	00013b75 	.word	0x00013b75
   13c8c:	00013bb1 	.word	0x00013bb1
   13c90:	20003e84 	.word	0x20003e84
   13c94:	00013eed 	.word	0x00013eed
   13c98:	00013e45 	.word	0x00013e45
   13c9c:	20003e1c 	.word	0x20003e1c
   13ca0:	00013495 	.word	0x00013495
   13ca4:	00013e69 	.word	0x00013e69

00013ca8 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
   13ca8:	b580      	push	{r7, lr}
   13caa:	b082      	sub	sp, #8
   13cac:	af00      	add	r7, sp, #0
   13cae:	6078      	str	r0, [r7, #4]
	if (terminalStarted)
   13cb0:	687b      	ldr	r3, [r7, #4]
   13cb2:	785b      	ldrb	r3, [r3, #1]
   13cb4:	b2db      	uxtb	r3, r3
   13cb6:	2b00      	cmp	r3, #0
   13cb8:	d01f      	beq.n	13cfa <_ZN20SerialTerminal_Class13CheckTerminalEv+0x52>
	{
		if (plugged||usb.IsEnabled())
   13cba:	687b      	ldr	r3, [r7, #4]
   13cbc:	781b      	ldrb	r3, [r3, #0]
   13cbe:	b2db      	uxtb	r3, r3
   13cc0:	2b00      	cmp	r3, #0
   13cc2:	d105      	bne.n	13cd0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x28>
   13cc4:	4812      	ldr	r0, [pc, #72]	; (13d10 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x68>)
   13cc6:	4b13      	ldr	r3, [pc, #76]	; (13d14 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x6c>)
   13cc8:	4798      	blx	r3
   13cca:	4603      	mov	r3, r0
   13ccc:	2b00      	cmp	r3, #0
   13cce:	d001      	beq.n	13cd4 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2c>
   13cd0:	2301      	movs	r3, #1
   13cd2:	e000      	b.n	13cd6 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
   13cd4:	2300      	movs	r3, #0
   13cd6:	2b00      	cmp	r3, #0
   13cd8:	d00b      	beq.n	13cf2 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x4a>
		{
			terminalStarted=usbTimer.Start()==0;
   13cda:	480f      	ldr	r0, [pc, #60]	; (13d18 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x70>)
   13cdc:	4b0f      	ldr	r3, [pc, #60]	; (13d1c <_ZN20SerialTerminal_Class13CheckTerminalEv+0x74>)
   13cde:	4798      	blx	r3
   13ce0:	4603      	mov	r3, r0
   13ce2:	2b00      	cmp	r3, #0
   13ce4:	bf0c      	ite	eq
   13ce6:	2301      	moveq	r3, #1
   13ce8:	2300      	movne	r3, #0
   13cea:	b2da      	uxtb	r2, r3
   13cec:	687b      	ldr	r3, [r7, #4]
   13cee:	705a      	strb	r2, [r3, #1]
   13cf0:	e007      	b.n	13d02 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
		else
		{
			terminalStarted=false;
   13cf2:	687b      	ldr	r3, [r7, #4]
   13cf4:	2200      	movs	r2, #0
   13cf6:	705a      	strb	r2, [r3, #1]
   13cf8:	e003      	b.n	13d02 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
	}
	else
	{
		return	terminalStarted;
   13cfa:	687b      	ldr	r3, [r7, #4]
   13cfc:	785b      	ldrb	r3, [r3, #1]
   13cfe:	b2db      	uxtb	r3, r3
   13d00:	e002      	b.n	13d08 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x60>
	}
	
	return	terminalStarted;
   13d02:	687b      	ldr	r3, [r7, #4]
   13d04:	785b      	ldrb	r3, [r3, #1]
   13d06:	b2db      	uxtb	r3, r3
}
   13d08:	4618      	mov	r0, r3
   13d0a:	3708      	adds	r7, #8
   13d0c:	46bd      	mov	sp, r7
   13d0e:	bd80      	pop	{r7, pc}
   13d10:	20003e1c 	.word	0x20003e1c
   13d14:	00013495 	.word	0x00013495
   13d18:	20003e84 	.word	0x20003e84
   13d1c:	00013e45 	.word	0x00013e45

00013d20 <_ZN20SerialTerminal_Class13CheckTerminalEm>:
bool	SerialTerminal_Class::CheckTerminal(uint32_t size){
   13d20:	b580      	push	{r7, lr}
   13d22:	b082      	sub	sp, #8
   13d24:	af00      	add	r7, sp, #0
   13d26:	6078      	str	r0, [r7, #4]
   13d28:	6039      	str	r1, [r7, #0]
	if (terminalStarted)
   13d2a:	687b      	ldr	r3, [r7, #4]
   13d2c:	785b      	ldrb	r3, [r3, #1]
   13d2e:	b2db      	uxtb	r3, r3
   13d30:	2b00      	cmp	r3, #0
   13d32:	d02f      	beq.n	13d94 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x74>
	{
		if (plugged||usb.IsEnabled())
   13d34:	687b      	ldr	r3, [r7, #4]
   13d36:	781b      	ldrb	r3, [r3, #0]
   13d38:	b2db      	uxtb	r3, r3
   13d3a:	2b00      	cmp	r3, #0
   13d3c:	d105      	bne.n	13d4a <_ZN20SerialTerminal_Class13CheckTerminalEm+0x2a>
   13d3e:	481b      	ldr	r0, [pc, #108]	; (13dac <_ZN20SerialTerminal_Class13CheckTerminalEm+0x8c>)
   13d40:	4b1b      	ldr	r3, [pc, #108]	; (13db0 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x90>)
   13d42:	4798      	blx	r3
   13d44:	4603      	mov	r3, r0
   13d46:	2b00      	cmp	r3, #0
   13d48:	d001      	beq.n	13d4e <_ZN20SerialTerminal_Class13CheckTerminalEm+0x2e>
   13d4a:	2301      	movs	r3, #1
   13d4c:	e000      	b.n	13d50 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x30>
   13d4e:	2300      	movs	r3, #0
   13d50:	2b00      	cmp	r3, #0
   13d52:	d01b      	beq.n	13d8c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x6c>
		{
			usbTimer.Stop();
   13d54:	4817      	ldr	r0, [pc, #92]	; (13db4 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
   13d56:	4b18      	ldr	r3, [pc, #96]	; (13db8 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x98>)
   13d58:	4798      	blx	r3
			usbTimer.Remove_task();
   13d5a:	4816      	ldr	r0, [pc, #88]	; (13db4 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
   13d5c:	4b17      	ldr	r3, [pc, #92]	; (13dbc <_ZN20SerialTerminal_Class13CheckTerminalEm+0x9c>)
   13d5e:	4798      	blx	r3
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*size);
   13d60:	683a      	ldr	r2, [r7, #0]
   13d62:	4613      	mov	r3, r2
   13d64:	009b      	lsls	r3, r3, #2
   13d66:	4413      	add	r3, r2
   13d68:	005b      	lsls	r3, r3, #1
   13d6a:	461a      	mov	r2, r3
   13d6c:	4914      	ldr	r1, [pc, #80]	; (13dc0 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa0>)
   13d6e:	4811      	ldr	r0, [pc, #68]	; (13db4 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
   13d70:	4b14      	ldr	r3, [pc, #80]	; (13dc4 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa4>)
   13d72:	4798      	blx	r3
			terminalStarted=usbTimer.Start()==0;
   13d74:	480f      	ldr	r0, [pc, #60]	; (13db4 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
   13d76:	4b14      	ldr	r3, [pc, #80]	; (13dc8 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa8>)
   13d78:	4798      	blx	r3
   13d7a:	4603      	mov	r3, r0
   13d7c:	2b00      	cmp	r3, #0
   13d7e:	bf0c      	ite	eq
   13d80:	2301      	moveq	r3, #1
   13d82:	2300      	movne	r3, #0
   13d84:	b2da      	uxtb	r2, r3
   13d86:	687b      	ldr	r3, [r7, #4]
   13d88:	705a      	strb	r2, [r3, #1]
   13d8a:	e007      	b.n	13d9c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x7c>
		}
		else
		{
			terminalStarted=false;
   13d8c:	687b      	ldr	r3, [r7, #4]
   13d8e:	2200      	movs	r2, #0
   13d90:	705a      	strb	r2, [r3, #1]
   13d92:	e003      	b.n	13d9c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x7c>
		}
	}
	else
	{
		return	terminalStarted;
   13d94:	687b      	ldr	r3, [r7, #4]
   13d96:	785b      	ldrb	r3, [r3, #1]
   13d98:	b2db      	uxtb	r3, r3
   13d9a:	e002      	b.n	13da2 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x82>
	}
	
	return	terminalStarted;
   13d9c:	687b      	ldr	r3, [r7, #4]
   13d9e:	785b      	ldrb	r3, [r3, #1]
   13da0:	b2db      	uxtb	r3, r3
   13da2:	4618      	mov	r0, r3
   13da4:	3708      	adds	r7, #8
   13da6:	46bd      	mov	sp, r7
   13da8:	bd80      	pop	{r7, pc}
   13daa:	bf00      	nop
   13dac:	20003e1c 	.word	0x20003e1c
   13db0:	00013495 	.word	0x00013495
   13db4:	20003e84 	.word	0x20003e84
   13db8:	00013e69 	.word	0x00013e69
   13dbc:	00013f15 	.word	0x00013f15
   13dc0:	00013bb1 	.word	0x00013bb1
   13dc4:	00013eed 	.word	0x00013eed
   13dc8:	00013e45 	.word	0x00013e45

00013dcc <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   13dcc:	b580      	push	{r7, lr}
   13dce:	b082      	sub	sp, #8
   13dd0:	af00      	add	r7, sp, #0
   13dd2:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
   13dd4:	4b04      	ldr	r3, [pc, #16]	; (13de8 <_ZL7task_cbPK10timer_task+0x1c>)
   13dd6:	681b      	ldr	r3, [r3, #0]
   13dd8:	4618      	mov	r0, r3
   13dda:	4b04      	ldr	r3, [pc, #16]	; (13dec <_ZL7task_cbPK10timer_task+0x20>)
   13ddc:	4798      	blx	r3
}
   13dde:	bf00      	nop
   13de0:	3708      	adds	r7, #8
   13de2:	46bd      	mov	sp, r7
   13de4:	bd80      	pop	{r7, pc}
   13de6:	bf00      	nop
   13de8:	20003e80 	.word	0x20003e80
   13dec:	00013e91 	.word	0x00013e91

00013df0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task.cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
   13df0:	b480      	push	{r7}
   13df2:	b083      	sub	sp, #12
   13df4:	af00      	add	r7, sp, #0
   13df6:	6078      	str	r0, [r7, #4]
   13df8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   13dfa:	687b      	ldr	r3, [r7, #4]
   13dfc:	683a      	ldr	r2, [r7, #0]
   13dfe:	609a      	str	r2, [r3, #8]
	ptrTimerSerialClass=this;
   13e00:	4a07      	ldr	r2, [pc, #28]	; (13e20 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x30>)
   13e02:	687b      	ldr	r3, [r7, #4]
   13e04:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   13e06:	687b      	ldr	r3, [r7, #4]
   13e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13e0c:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
   13e0e:	687b      	ldr	r3, [r7, #4]
   13e10:	4a04      	ldr	r2, [pc, #16]	; (13e24 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
   13e12:	621a      	str	r2, [r3, #32]
} //Timer_Class
   13e14:	687b      	ldr	r3, [r7, #4]
   13e16:	4618      	mov	r0, r3
   13e18:	370c      	adds	r7, #12
   13e1a:	46bd      	mov	sp, r7
   13e1c:	bc80      	pop	{r7}
   13e1e:	4770      	bx	lr
   13e20:	20003e80 	.word	0x20003e80
   13e24:	00013dcd 	.word	0x00013dcd

00013e28 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
   13e28:	b480      	push	{r7}
   13e2a:	b083      	sub	sp, #12
   13e2c:	af00      	add	r7, sp, #0
   13e2e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   13e30:	687b      	ldr	r3, [r7, #4]
   13e32:	2200      	movs	r2, #0
   13e34:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   13e36:	687b      	ldr	r3, [r7, #4]
   13e38:	4618      	mov	r0, r3
   13e3a:	370c      	adds	r7, #12
   13e3c:	46bd      	mov	sp, r7
   13e3e:	bc80      	pop	{r7}
   13e40:	4770      	bx	lr
	...

00013e44 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
   13e44:	b580      	push	{r7, lr}
   13e46:	b084      	sub	sp, #16
   13e48:	af00      	add	r7, sp, #0
   13e4a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   13e4c:	687b      	ldr	r3, [r7, #4]
   13e4e:	689b      	ldr	r3, [r3, #8]
   13e50:	4618      	mov	r0, r3
   13e52:	4b04      	ldr	r3, [pc, #16]	; (13e64 <_ZN17TimerSerial_Class5StartEv+0x20>)
   13e54:	4798      	blx	r3
   13e56:	60f8      	str	r0, [r7, #12]
	return status;
   13e58:	68fb      	ldr	r3, [r7, #12]
	
}
   13e5a:	4618      	mov	r0, r3
   13e5c:	3710      	adds	r7, #16
   13e5e:	46bd      	mov	sp, r7
   13e60:	bd80      	pop	{r7, pc}
   13e62:	bf00      	nop
   13e64:	00005499 	.word	0x00005499

00013e68 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
   13e68:	b580      	push	{r7, lr}
   13e6a:	b084      	sub	sp, #16
   13e6c:	af00      	add	r7, sp, #0
   13e6e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   13e70:	687b      	ldr	r3, [r7, #4]
   13e72:	689b      	ldr	r3, [r3, #8]
   13e74:	4618      	mov	r0, r3
   13e76:	4b05      	ldr	r3, [pc, #20]	; (13e8c <_ZN17TimerSerial_Class4StopEv+0x24>)
   13e78:	4798      	blx	r3
   13e7a:	60f8      	str	r0, [r7, #12]
	timeout=0;
   13e7c:	687b      	ldr	r3, [r7, #4]
   13e7e:	2200      	movs	r2, #0
   13e80:	705a      	strb	r2, [r3, #1]
	return status;
   13e82:	68fb      	ldr	r3, [r7, #12]
}
   13e84:	4618      	mov	r0, r3
   13e86:	3710      	adds	r7, #16
   13e88:	46bd      	mov	sp, r7
   13e8a:	bd80      	pop	{r7, pc}
   13e8c:	000054ed 	.word	0x000054ed

00013e90 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void TimerSerial_Class::setTimeout(){
   13e90:	b480      	push	{r7}
   13e92:	b083      	sub	sp, #12
   13e94:	af00      	add	r7, sp, #0
   13e96:	6078      	str	r0, [r7, #4]
	timeout=1;
   13e98:	687b      	ldr	r3, [r7, #4]
   13e9a:	2201      	movs	r2, #1
   13e9c:	705a      	strb	r2, [r3, #1]
}
   13e9e:	bf00      	nop
   13ea0:	370c      	adds	r7, #12
   13ea2:	46bd      	mov	sp, r7
   13ea4:	bc80      	pop	{r7}
   13ea6:	4770      	bx	lr

00013ea8 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   13ea8:	b580      	push	{r7, lr}
   13eaa:	b086      	sub	sp, #24
   13eac:	af00      	add	r7, sp, #0
   13eae:	60f8      	str	r0, [r7, #12]
   13eb0:	60b9      	str	r1, [r7, #8]
   13eb2:	607a      	str	r2, [r7, #4]
   13eb4:	70fb      	strb	r3, [r7, #3]
	int32_t	status;

	task.interval = interval;
   13eb6:	68fb      	ldr	r3, [r7, #12]
   13eb8:	687a      	ldr	r2, [r7, #4]
   13eba:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
   13ebc:	68fb      	ldr	r3, [r7, #12]
   13ebe:	68ba      	ldr	r2, [r7, #8]
   13ec0:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
   13ec2:	68fb      	ldr	r3, [r7, #12]
   13ec4:	78fa      	ldrb	r2, [r7, #3]
   13ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	status=timer_add_task(timer_descr, &task);
   13eca:	68fb      	ldr	r3, [r7, #12]
   13ecc:	689a      	ldr	r2, [r3, #8]
   13ece:	68fb      	ldr	r3, [r7, #12]
   13ed0:	3314      	adds	r3, #20
   13ed2:	4619      	mov	r1, r3
   13ed4:	4610      	mov	r0, r2
   13ed6:	4b04      	ldr	r3, [pc, #16]	; (13ee8 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x40>)
   13ed8:	4798      	blx	r3
   13eda:	6178      	str	r0, [r7, #20]
	
	return status;
   13edc:	697b      	ldr	r3, [r7, #20]
}
   13ede:	4618      	mov	r0, r3
   13ee0:	3718      	adds	r7, #24
   13ee2:	46bd      	mov	sp, r7
   13ee4:	bd80      	pop	{r7, pc}
   13ee6:	bf00      	nop
   13ee8:	00005549 	.word	0x00005549

00013eec <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
   13eec:	b590      	push	{r4, r7, lr}
   13eee:	b087      	sub	sp, #28
   13ef0:	af00      	add	r7, sp, #0
   13ef2:	60f8      	str	r0, [r7, #12]
   13ef4:	60b9      	str	r1, [r7, #8]
   13ef6:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   13ef8:	2300      	movs	r3, #0
   13efa:	687a      	ldr	r2, [r7, #4]
   13efc:	68b9      	ldr	r1, [r7, #8]
   13efe:	68f8      	ldr	r0, [r7, #12]
   13f00:	4c03      	ldr	r4, [pc, #12]	; (13f10 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
   13f02:	47a0      	blx	r4
   13f04:	6178      	str	r0, [r7, #20]
	return status;
   13f06:	697b      	ldr	r3, [r7, #20]
}
   13f08:	4618      	mov	r0, r3
   13f0a:	371c      	adds	r7, #28
   13f0c:	46bd      	mov	sp, r7
   13f0e:	bd90      	pop	{r4, r7, pc}
   13f10:	00013ea9 	.word	0x00013ea9

00013f14 <_ZN17TimerSerial_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	TimerSerial_Class::Remove_task(void){
   13f14:	b580      	push	{r7, lr}
   13f16:	b082      	sub	sp, #8
   13f18:	af00      	add	r7, sp, #0
   13f1a:	6078      	str	r0, [r7, #4]
	timer_remove_task(timer_descr, &task);
   13f1c:	687b      	ldr	r3, [r7, #4]
   13f1e:	689a      	ldr	r2, [r3, #8]
   13f20:	687b      	ldr	r3, [r7, #4]
   13f22:	3314      	adds	r3, #20
   13f24:	4619      	mov	r1, r3
   13f26:	4610      	mov	r0, r2
   13f28:	4b02      	ldr	r3, [pc, #8]	; (13f34 <_ZN17TimerSerial_Class11Remove_taskEv+0x20>)
   13f2a:	4798      	blx	r3
}
   13f2c:	bf00      	nop
   13f2e:	3708      	adds	r7, #8
   13f30:	46bd      	mov	sp, r7
   13f32:	bd80      	pop	{r7, pc}
   13f34:	00005641 	.word	0x00005641

00013f38 <_Z41__static_initialization_and_destruction_0ii>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

TimerSerial_Class usbTimer(&TIMER_INTERFACE);
   13f38:	b580      	push	{r7, lr}
   13f3a:	b082      	sub	sp, #8
   13f3c:	af00      	add	r7, sp, #0
   13f3e:	6078      	str	r0, [r7, #4]
   13f40:	6039      	str	r1, [r7, #0]
   13f42:	687b      	ldr	r3, [r7, #4]
   13f44:	2b01      	cmp	r3, #1
   13f46:	d10d      	bne.n	13f64 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13f48:	683b      	ldr	r3, [r7, #0]
   13f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13f4e:	4293      	cmp	r3, r2
   13f50:	d108      	bne.n	13f64 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13f52:	4906      	ldr	r1, [pc, #24]	; (13f6c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13f54:	4806      	ldr	r0, [pc, #24]	; (13f70 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13f56:	4b07      	ldr	r3, [pc, #28]	; (13f74 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13f58:	4798      	blx	r3
   13f5a:	4a07      	ldr	r2, [pc, #28]	; (13f78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13f5c:	4907      	ldr	r1, [pc, #28]	; (13f7c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13f5e:	4804      	ldr	r0, [pc, #16]	; (13f70 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13f60:	4b07      	ldr	r3, [pc, #28]	; (13f80 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   13f62:	4798      	blx	r3
   13f64:	bf00      	nop
   13f66:	3708      	adds	r7, #8
   13f68:	46bd      	mov	sp, r7
   13f6a:	bd80      	pop	{r7, pc}
   13f6c:	20003f90 	.word	0x20003f90
   13f70:	20003e84 	.word	0x20003e84
   13f74:	00013df1 	.word	0x00013df1
   13f78:	20000000 	.word	0x20000000
   13f7c:	00013e29 	.word	0x00013e29
   13f80:	0001427d 	.word	0x0001427d

00013f84 <_GLOBAL__sub_I_ptrTimerSerialClass>:
   13f84:	b580      	push	{r7, lr}
   13f86:	af00      	add	r7, sp, #0
   13f88:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13f8c:	2001      	movs	r0, #1
   13f8e:	4b01      	ldr	r3, [pc, #4]	; (13f94 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
   13f90:	4798      	blx	r3
   13f92:	bd80      	pop	{r7, pc}
   13f94:	00013f39 	.word	0x00013f39

00013f98 <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
#include "I2C_Asyn_Class.h"


I2C_Asyn_Class	*ptrI2C_Asyn_Class;
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
   13f98:	b480      	push	{r7}
   13f9a:	b083      	sub	sp, #12
   13f9c:	af00      	add	r7, sp, #0
   13f9e:	6078      	str	r0, [r7, #4]

	ptrI2C_Asyn_Class->txReady=true;
   13fa0:	4b04      	ldr	r3, [pc, #16]	; (13fb4 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x1c>)
   13fa2:	681b      	ldr	r3, [r3, #0]
   13fa4:	2201      	movs	r2, #1
   13fa6:	701a      	strb	r2, [r3, #0]

}
   13fa8:	bf00      	nop
   13faa:	370c      	adds	r7, #12
   13fac:	46bd      	mov	sp, r7
   13fae:	bc80      	pop	{r7}
   13fb0:	4770      	bx	lr
   13fb2:	bf00      	nop
   13fb4:	20003eb0 	.word	0x20003eb0

00013fb8 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
   13fb8:	b480      	push	{r7}
   13fba:	b083      	sub	sp, #12
   13fbc:	af00      	add	r7, sp, #0
   13fbe:	6078      	str	r0, [r7, #4]
	ptrI2C_Asyn_Class->rxReady=true;
   13fc0:	4b04      	ldr	r3, [pc, #16]	; (13fd4 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x1c>)
   13fc2:	681b      	ldr	r3, [r3, #0]
   13fc4:	2201      	movs	r2, #1
   13fc6:	705a      	strb	r2, [r3, #1]
}
   13fc8:	bf00      	nop
   13fca:	370c      	adds	r7, #12
   13fcc:	46bd      	mov	sp, r7
   13fce:	bc80      	pop	{r7}
   13fd0:	4770      	bx	lr
   13fd2:	bf00      	nop
   13fd4:	20003eb0 	.word	0x20003eb0

00013fd8 <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
   13fd8:	b580      	push	{r7, lr}
   13fda:	b082      	sub	sp, #8
   13fdc:	af00      	add	r7, sp, #0
   13fde:	6078      	str	r0, [r7, #4]

		ptrI2C_Asyn_Class->Clear_ack();
   13fe0:	4b08      	ldr	r3, [pc, #32]	; (14004 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
   13fe2:	681b      	ldr	r3, [r3, #0]
   13fe4:	4618      	mov	r0, r3
   13fe6:	4b08      	ldr	r3, [pc, #32]	; (14008 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
   13fe8:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
   13fea:	4b06      	ldr	r3, [pc, #24]	; (14004 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
   13fec:	681b      	ldr	r3, [r3, #0]
   13fee:	2201      	movs	r2, #1
   13ff0:	701a      	strb	r2, [r3, #0]
		ptrI2C_Asyn_Class->rxReady=true;
   13ff2:	4b04      	ldr	r3, [pc, #16]	; (14004 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
   13ff4:	681b      	ldr	r3, [r3, #0]
   13ff6:	2201      	movs	r2, #1
   13ff8:	705a      	strb	r2, [r3, #1]
 }
   13ffa:	bf00      	nop
   13ffc:	3708      	adds	r7, #8
   13ffe:	46bd      	mov	sp, r7
   14000:	bd80      	pop	{r7, pc}
   14002:	bf00      	nop
   14004:	20003eb0 	.word	0x20003eb0
   14008:	000141bd 	.word	0x000141bd

0001400c <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
   1400c:	b480      	push	{r7}
   1400e:	b083      	sub	sp, #12
   14010:	af00      	add	r7, sp, #0
   14012:	6078      	str	r0, [r7, #4]
{
	ptrI2CAsynDescr=&I2C_EEPROM;
   14014:	687b      	ldr	r3, [r7, #4]
   14016:	4a05      	ldr	r2, [pc, #20]	; (1402c <_ZN14I2C_Asyn_ClassC1Ev+0x20>)
   14018:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
   1401a:	4a05      	ldr	r2, [pc, #20]	; (14030 <_ZN14I2C_Asyn_ClassC1Ev+0x24>)
   1401c:	687b      	ldr	r3, [r7, #4]
   1401e:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
   14020:	687b      	ldr	r3, [r7, #4]
   14022:	4618      	mov	r0, r3
   14024:	370c      	adds	r7, #12
   14026:	46bd      	mov	sp, r7
   14028:	bc80      	pop	{r7}
   1402a:	4770      	bx	lr
   1402c:	20004068 	.word	0x20004068
   14030:	20003eb0 	.word	0x20003eb0

00014034 <_ZN14I2C_Asyn_ClassD1Ev>:
	ptrI2CAsynDescr=i2c_a;
	ptrI2C_Asyn_Class=this;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
   14034:	b480      	push	{r7}
   14036:	b083      	sub	sp, #12
   14038:	af00      	add	r7, sp, #0
   1403a:	6078      	str	r0, [r7, #4]
{
} //~I2C_Asyn_Class
   1403c:	687b      	ldr	r3, [r7, #4]
   1403e:	4618      	mov	r0, r3
   14040:	370c      	adds	r7, #12
   14042:	46bd      	mov	sp, r7
   14044:	bc80      	pop	{r7}
   14046:	4770      	bx	lr

00014048 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
   14048:	b480      	push	{r7}
   1404a:	b083      	sub	sp, #12
   1404c:	af00      	add	r7, sp, #0
   1404e:	6078      	str	r0, [r7, #4]
   14050:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
   14052:	687b      	ldr	r3, [r7, #4]
   14054:	683a      	ldr	r2, [r7, #0]
   14056:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
   14058:	4a03      	ldr	r2, [pc, #12]	; (14068 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x20>)
   1405a:	687b      	ldr	r3, [r7, #4]
   1405c:	6013      	str	r3, [r2, #0]
}
   1405e:	bf00      	nop
   14060:	370c      	adds	r7, #12
   14062:	46bd      	mov	sp, r7
   14064:	bc80      	pop	{r7}
   14066:	4770      	bx	lr
   14068:	20003eb0 	.word	0x20003eb0

0001406c <_ZN14I2C_Asyn_Class4InitEv>:

uint8_t	I2C_Asyn_Class::Init(void){
   1406c:	b580      	push	{r7, lr}
   1406e:	b084      	sub	sp, #16
   14070:	af00      	add	r7, sp, #0
   14072:	6078      	str	r0, [r7, #4]
	

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
   14074:	687b      	ldr	r3, [r7, #4]
   14076:	689a      	ldr	r2, [r3, #8]
   14078:	687b      	ldr	r3, [r7, #4]
   1407a:	3304      	adds	r3, #4
   1407c:	4619      	mov	r1, r3
   1407e:	4610      	mov	r0, r2
   14080:	4b14      	ldr	r3, [pc, #80]	; (140d4 <_ZN14I2C_Asyn_Class4InitEv+0x68>)
   14082:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
   14084:	687b      	ldr	r3, [r7, #4]
   14086:	689b      	ldr	r3, [r3, #8]
   14088:	4618      	mov	r0, r3
   1408a:	4b13      	ldr	r3, [pc, #76]	; (140d8 <_ZN14I2C_Asyn_Class4InitEv+0x6c>)
   1408c:	4798      	blx	r3
   1408e:	4603      	mov	r3, r0
   14090:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
   14092:	687b      	ldr	r3, [r7, #4]
   14094:	689b      	ldr	r3, [r3, #8]
   14096:	4a11      	ldr	r2, [pc, #68]	; (140dc <_ZN14I2C_Asyn_Class4InitEv+0x70>)
   14098:	2101      	movs	r1, #1
   1409a:	4618      	mov	r0, r3
   1409c:	4b10      	ldr	r3, [pc, #64]	; (140e0 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
   1409e:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
   140a0:	687b      	ldr	r3, [r7, #4]
   140a2:	689b      	ldr	r3, [r3, #8]
   140a4:	4a0f      	ldr	r2, [pc, #60]	; (140e4 <_ZN14I2C_Asyn_Class4InitEv+0x78>)
   140a6:	2102      	movs	r1, #2
   140a8:	4618      	mov	r0, r3
   140aa:	4b0d      	ldr	r3, [pc, #52]	; (140e0 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
   140ac:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
   140ae:	687b      	ldr	r3, [r7, #4]
   140b0:	689b      	ldr	r3, [r3, #8]
   140b2:	4a0d      	ldr	r2, [pc, #52]	; (140e8 <_ZN14I2C_Asyn_Class4InitEv+0x7c>)
   140b4:	2100      	movs	r1, #0
   140b6:	4618      	mov	r0, r3
   140b8:	4b09      	ldr	r3, [pc, #36]	; (140e0 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
   140ba:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	txReady=true;
   140bc:	687b      	ldr	r3, [r7, #4]
   140be:	2201      	movs	r2, #1
   140c0:	701a      	strb	r2, [r3, #0]
	rxReady=true;
   140c2:	687b      	ldr	r3, [r7, #4]
   140c4:	2201      	movs	r2, #1
   140c6:	705a      	strb	r2, [r3, #1]
	return ena;
   140c8:	7bfb      	ldrb	r3, [r7, #15]
	
}
   140ca:	4618      	mov	r0, r3
   140cc:	3710      	adds	r7, #16
   140ce:	46bd      	mov	sp, r7
   140d0:	bd80      	pop	{r7, pc}
   140d2:	bf00      	nop
   140d4:	00004bab 	.word	0x00004bab
   140d8:	00004abd 	.word	0x00004abd
   140dc:	00013f99 	.word	0x00013f99
   140e0:	00004b63 	.word	0x00004b63
   140e4:	00013fb9 	.word	0x00013fb9
   140e8:	00013fd9 	.word	0x00013fd9

000140ec <_ZN14I2C_Asyn_Class4InitEh>:
uint8_t	I2C_Asyn_Class::Init(uint8_t add){
   140ec:	b580      	push	{r7, lr}
   140ee:	b084      	sub	sp, #16
   140f0:	af00      	add	r7, sp, #0
   140f2:	6078      	str	r0, [r7, #4]
   140f4:	460b      	mov	r3, r1
   140f6:	70fb      	strb	r3, [r7, #3]
	uint8_t ena=Init();
   140f8:	6878      	ldr	r0, [r7, #4]
   140fa:	4b0c      	ldr	r3, [pc, #48]	; (1412c <_ZN14I2C_Asyn_Class4InitEh+0x40>)
   140fc:	4798      	blx	r3
   140fe:	4603      	mov	r3, r0
   14100:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
   14102:	687b      	ldr	r3, [r7, #4]
   14104:	689b      	ldr	r3, [r3, #8]
   14106:	78fa      	ldrb	r2, [r7, #3]
   14108:	b211      	sxth	r1, r2
   1410a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1410e:	4618      	mov	r0, r3
   14110:	4b07      	ldr	r3, [pc, #28]	; (14130 <_ZN14I2C_Asyn_Class4InitEh+0x44>)
   14112:	4798      	blx	r3
	txReady=true;
   14114:	687b      	ldr	r3, [r7, #4]
   14116:	2201      	movs	r2, #1
   14118:	701a      	strb	r2, [r3, #0]
	rxReady=true;
   1411a:	687b      	ldr	r3, [r7, #4]
   1411c:	2201      	movs	r2, #1
   1411e:	705a      	strb	r2, [r3, #1]
	return ena;
   14120:	7bfb      	ldrb	r3, [r7, #15]
}
   14122:	4618      	mov	r0, r3
   14124:	3710      	adds	r7, #16
   14126:	46bd      	mov	sp, r7
   14128:	bd80      	pop	{r7, pc}
   1412a:	bf00      	nop
   1412c:	0001406d 	.word	0x0001406d
   14130:	00004b29 	.word	0x00004b29

00014134 <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
   14134:	b580      	push	{r7, lr}
   14136:	b084      	sub	sp, #16
   14138:	af00      	add	r7, sp, #0
   1413a:	60f8      	str	r0, [r7, #12]
   1413c:	60b9      	str	r1, [r7, #8]
   1413e:	4613      	mov	r3, r2
   14140:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
   14142:	68fb      	ldr	r3, [r7, #12]
   14144:	781b      	ldrb	r3, [r3, #0]
   14146:	b2db      	uxtb	r3, r3
   14148:	f083 0301 	eor.w	r3, r3, #1
   1414c:	b2db      	uxtb	r3, r3
   1414e:	2b00      	cmp	r3, #0
   14150:	d000      	beq.n	14154 <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
   14152:	e7f6      	b.n	14142 <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
   14154:	68fb      	ldr	r3, [r7, #12]
   14156:	2200      	movs	r2, #0
   14158:	701a      	strb	r2, [r3, #0]
	return io_write(I2C_io, buffer, lenght);
   1415a:	68fb      	ldr	r3, [r7, #12]
   1415c:	685b      	ldr	r3, [r3, #4]
   1415e:	88fa      	ldrh	r2, [r7, #6]
   14160:	68b9      	ldr	r1, [r7, #8]
   14162:	4618      	mov	r0, r3
   14164:	4b03      	ldr	r3, [pc, #12]	; (14174 <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
   14166:	4798      	blx	r3
   14168:	4603      	mov	r3, r0
}
   1416a:	4618      	mov	r0, r3
   1416c:	3710      	adds	r7, #16
   1416e:	46bd      	mov	sp, r7
   14170:	bd80      	pop	{r7, pc}
   14172:	bf00      	nop
   14174:	000141dd 	.word	0x000141dd

00014178 <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
   14178:	b580      	push	{r7, lr}
   1417a:	b084      	sub	sp, #16
   1417c:	af00      	add	r7, sp, #0
   1417e:	60f8      	str	r0, [r7, #12]
   14180:	60b9      	str	r1, [r7, #8]
   14182:	4613      	mov	r3, r2
   14184:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
   14186:	68fb      	ldr	r3, [r7, #12]
   14188:	785b      	ldrb	r3, [r3, #1]
   1418a:	b2db      	uxtb	r3, r3
   1418c:	f083 0301 	eor.w	r3, r3, #1
   14190:	b2db      	uxtb	r3, r3
   14192:	2b00      	cmp	r3, #0
   14194:	d000      	beq.n	14198 <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
   14196:	e7f6      	b.n	14186 <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
   14198:	68fb      	ldr	r3, [r7, #12]
   1419a:	2200      	movs	r2, #0
   1419c:	705a      	strb	r2, [r3, #1]
		return io_read(I2C_io, buffer, lenght);
   1419e:	68fb      	ldr	r3, [r7, #12]
   141a0:	685b      	ldr	r3, [r3, #4]
   141a2:	88fa      	ldrh	r2, [r7, #6]
   141a4:	68b9      	ldr	r1, [r7, #8]
   141a6:	4618      	mov	r0, r3
   141a8:	4b03      	ldr	r3, [pc, #12]	; (141b8 <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
   141aa:	4798      	blx	r3
   141ac:	4603      	mov	r3, r0
}
   141ae:	4618      	mov	r0, r3
   141b0:	3710      	adds	r7, #16
   141b2:	46bd      	mov	sp, r7
   141b4:	bd80      	pop	{r7, pc}
   141b6:	bf00      	nop
   141b8:	0001422d 	.word	0x0001422d

000141bc <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
   141bc:	b480      	push	{r7}
   141be:	b083      	sub	sp, #12
   141c0:	af00      	add	r7, sp, #0
   141c2:	6078      	str	r0, [r7, #4]
	 ack=false;
   141c4:	687b      	ldr	r3, [r7, #4]
   141c6:	2200      	movs	r2, #0
   141c8:	709a      	strb	r2, [r3, #2]
	 return ack;
   141ca:	687b      	ldr	r3, [r7, #4]
   141cc:	789b      	ldrb	r3, [r3, #2]
   141ce:	b2db      	uxtb	r3, r3
   141d0:	4618      	mov	r0, r3
   141d2:	370c      	adds	r7, #12
   141d4:	46bd      	mov	sp, r7
   141d6:	bc80      	pop	{r7}
   141d8:	4770      	bx	lr
	...

000141dc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   141dc:	b580      	push	{r7, lr}
   141de:	b084      	sub	sp, #16
   141e0:	af00      	add	r7, sp, #0
   141e2:	60f8      	str	r0, [r7, #12]
   141e4:	60b9      	str	r1, [r7, #8]
   141e6:	4613      	mov	r3, r2
   141e8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   141ea:	68fb      	ldr	r3, [r7, #12]
   141ec:	2b00      	cmp	r3, #0
   141ee:	d004      	beq.n	141fa <io_write+0x1e>
   141f0:	68bb      	ldr	r3, [r7, #8]
   141f2:	2b00      	cmp	r3, #0
   141f4:	d001      	beq.n	141fa <io_write+0x1e>
   141f6:	2301      	movs	r3, #1
   141f8:	e000      	b.n	141fc <io_write+0x20>
   141fa:	2300      	movs	r3, #0
   141fc:	f003 0301 	and.w	r3, r3, #1
   14200:	b2db      	uxtb	r3, r3
   14202:	2234      	movs	r2, #52	; 0x34
   14204:	4907      	ldr	r1, [pc, #28]	; (14224 <io_write+0x48>)
   14206:	4618      	mov	r0, r3
   14208:	4b07      	ldr	r3, [pc, #28]	; (14228 <io_write+0x4c>)
   1420a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   1420c:	68fb      	ldr	r3, [r7, #12]
   1420e:	681b      	ldr	r3, [r3, #0]
   14210:	88fa      	ldrh	r2, [r7, #6]
   14212:	68b9      	ldr	r1, [r7, #8]
   14214:	68f8      	ldr	r0, [r7, #12]
   14216:	4798      	blx	r3
   14218:	4603      	mov	r3, r0
}
   1421a:	4618      	mov	r0, r3
   1421c:	3710      	adds	r7, #16
   1421e:	46bd      	mov	sp, r7
   14220:	bd80      	pop	{r7, pc}
   14222:	bf00      	nop
   14224:	0001bb18 	.word	0x0001bb18
   14228:	00006241 	.word	0x00006241

0001422c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   1422c:	b580      	push	{r7, lr}
   1422e:	b084      	sub	sp, #16
   14230:	af00      	add	r7, sp, #0
   14232:	60f8      	str	r0, [r7, #12]
   14234:	60b9      	str	r1, [r7, #8]
   14236:	4613      	mov	r3, r2
   14238:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   1423a:	68fb      	ldr	r3, [r7, #12]
   1423c:	2b00      	cmp	r3, #0
   1423e:	d004      	beq.n	1424a <io_read+0x1e>
   14240:	68bb      	ldr	r3, [r7, #8]
   14242:	2b00      	cmp	r3, #0
   14244:	d001      	beq.n	1424a <io_read+0x1e>
   14246:	2301      	movs	r3, #1
   14248:	e000      	b.n	1424c <io_read+0x20>
   1424a:	2300      	movs	r3, #0
   1424c:	f003 0301 	and.w	r3, r3, #1
   14250:	b2db      	uxtb	r3, r3
   14252:	223d      	movs	r2, #61	; 0x3d
   14254:	4907      	ldr	r1, [pc, #28]	; (14274 <io_read+0x48>)
   14256:	4618      	mov	r0, r3
   14258:	4b07      	ldr	r3, [pc, #28]	; (14278 <io_read+0x4c>)
   1425a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   1425c:	68fb      	ldr	r3, [r7, #12]
   1425e:	685b      	ldr	r3, [r3, #4]
   14260:	88fa      	ldrh	r2, [r7, #6]
   14262:	68b9      	ldr	r1, [r7, #8]
   14264:	68f8      	ldr	r0, [r7, #12]
   14266:	4798      	blx	r3
   14268:	4603      	mov	r3, r0
}
   1426a:	4618      	mov	r0, r3
   1426c:	3710      	adds	r7, #16
   1426e:	46bd      	mov	sp, r7
   14270:	bd80      	pop	{r7, pc}
   14272:	bf00      	nop
   14274:	0001bb18 	.word	0x0001bb18
   14278:	00006241 	.word	0x00006241

0001427c <__aeabi_atexit>:
   1427c:	460b      	mov	r3, r1
   1427e:	4601      	mov	r1, r0
   14280:	4618      	mov	r0, r3
   14282:	f001 bedf 	b.w	16044 <__cxa_atexit>
   14286:	bf00      	nop

00014288 <_ZdlPvj>:
   14288:	f7fd b828 	b.w	112dc <_ZdlPv>

0001428c <pow>:
   1428c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14290:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 14584 <pow+0x2f8>
   14294:	b08d      	sub	sp, #52	; 0x34
   14296:	4606      	mov	r6, r0
   14298:	460f      	mov	r7, r1
   1429a:	4614      	mov	r4, r2
   1429c:	461d      	mov	r5, r3
   1429e:	f000 f973 	bl	14588 <__ieee754_pow>
   142a2:	f999 8000 	ldrsb.w	r8, [r9]
   142a6:	f1b8 3fff 	cmp.w	r8, #4294967295
   142aa:	e9cd 0100 	strd	r0, r1, [sp]
   142ae:	d036      	beq.n	1431e <pow+0x92>
   142b0:	4622      	mov	r2, r4
   142b2:	462b      	mov	r3, r5
   142b4:	4620      	mov	r0, r4
   142b6:	4629      	mov	r1, r5
   142b8:	f001 fcde 	bl	15c78 <__aeabi_dcmpun>
   142bc:	4683      	mov	fp, r0
   142be:	bb70      	cbnz	r0, 1431e <pow+0x92>
   142c0:	4632      	mov	r2, r6
   142c2:	463b      	mov	r3, r7
   142c4:	4630      	mov	r0, r6
   142c6:	4639      	mov	r1, r7
   142c8:	f001 fcd6 	bl	15c78 <__aeabi_dcmpun>
   142cc:	2200      	movs	r2, #0
   142ce:	4682      	mov	sl, r0
   142d0:	2300      	movs	r3, #0
   142d2:	2800      	cmp	r0, #0
   142d4:	f040 80a0 	bne.w	14418 <pow+0x18c>
   142d8:	4630      	mov	r0, r6
   142da:	4639      	mov	r1, r7
   142dc:	f001 fc9a 	bl	15c14 <__aeabi_dcmpeq>
   142e0:	b310      	cbz	r0, 14328 <pow+0x9c>
   142e2:	2200      	movs	r2, #0
   142e4:	2300      	movs	r3, #0
   142e6:	4620      	mov	r0, r4
   142e8:	4629      	mov	r1, r5
   142ea:	f001 fc93 	bl	15c14 <__aeabi_dcmpeq>
   142ee:	4683      	mov	fp, r0
   142f0:	2800      	cmp	r0, #0
   142f2:	d06a      	beq.n	143ca <pow+0x13e>
   142f4:	2201      	movs	r2, #1
   142f6:	4b9c      	ldr	r3, [pc, #624]	; (14568 <pow+0x2dc>)
   142f8:	9202      	str	r2, [sp, #8]
   142fa:	2100      	movs	r1, #0
   142fc:	2200      	movs	r2, #0
   142fe:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   14302:	e9cd 6704 	strd	r6, r7, [sp, #16]
   14306:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1430a:	e9cd 1208 	strd	r1, r2, [sp, #32]
   1430e:	9303      	str	r3, [sp, #12]
   14310:	f1b8 0f00 	cmp.w	r8, #0
   14314:	d045      	beq.n	143a2 <pow+0x116>
   14316:	4c95      	ldr	r4, [pc, #596]	; (1456c <pow+0x2e0>)
   14318:	2300      	movs	r3, #0
   1431a:	e9cd 3400 	strd	r3, r4, [sp]
   1431e:	e9dd 0100 	ldrd	r0, r1, [sp]
   14322:	b00d      	add	sp, #52	; 0x34
   14324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14328:	e9dd 0100 	ldrd	r0, r1, [sp]
   1432c:	f000 ff32 	bl	15194 <finite>
   14330:	4680      	mov	r8, r0
   14332:	2800      	cmp	r0, #0
   14334:	f000 808b 	beq.w	1444e <pow+0x1c2>
   14338:	f04f 0a00 	mov.w	sl, #0
   1433c:	f04f 0b00 	mov.w	fp, #0
   14340:	4652      	mov	r2, sl
   14342:	465b      	mov	r3, fp
   14344:	e9dd 0100 	ldrd	r0, r1, [sp]
   14348:	f001 fc64 	bl	15c14 <__aeabi_dcmpeq>
   1434c:	2800      	cmp	r0, #0
   1434e:	d0e6      	beq.n	1431e <pow+0x92>
   14350:	4630      	mov	r0, r6
   14352:	4639      	mov	r1, r7
   14354:	f000 ff1e 	bl	15194 <finite>
   14358:	2800      	cmp	r0, #0
   1435a:	d0e0      	beq.n	1431e <pow+0x92>
   1435c:	4620      	mov	r0, r4
   1435e:	4629      	mov	r1, r5
   14360:	f000 ff18 	bl	15194 <finite>
   14364:	2800      	cmp	r0, #0
   14366:	d0da      	beq.n	1431e <pow+0x92>
   14368:	f999 3000 	ldrsb.w	r3, [r9]
   1436c:	4a7e      	ldr	r2, [pc, #504]	; (14568 <pow+0x2dc>)
   1436e:	9203      	str	r2, [sp, #12]
   14370:	2104      	movs	r1, #4
   14372:	2200      	movs	r2, #0
   14374:	2b02      	cmp	r3, #2
   14376:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1437a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1437e:	e9cd ab08 	strd	sl, fp, [sp, #32]
   14382:	9102      	str	r1, [sp, #8]
   14384:	920a      	str	r2, [sp, #40]	; 0x28
   14386:	d003      	beq.n	14390 <pow+0x104>
   14388:	a802      	add	r0, sp, #8
   1438a:	f000 ff09 	bl	151a0 <matherr>
   1438e:	b968      	cbnz	r0, 143ac <pow+0x120>
   14390:	f001 fe64 	bl	1605c <__errno>
   14394:	2322      	movs	r3, #34	; 0x22
   14396:	6003      	str	r3, [r0, #0]
   14398:	e008      	b.n	143ac <pow+0x120>
   1439a:	2300      	movs	r3, #0
   1439c:	2400      	movs	r4, #0
   1439e:	e9cd 3408 	strd	r3, r4, [sp, #32]
   143a2:	a802      	add	r0, sp, #8
   143a4:	f000 fefc 	bl	151a0 <matherr>
   143a8:	2800      	cmp	r0, #0
   143aa:	d030      	beq.n	1440e <pow+0x182>
   143ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   143ae:	b11b      	cbz	r3, 143b8 <pow+0x12c>
   143b0:	f001 fe54 	bl	1605c <__errno>
   143b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   143b6:	6003      	str	r3, [r0, #0]
   143b8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   143bc:	e9cd 3400 	strd	r3, r4, [sp]
   143c0:	e9dd 0100 	ldrd	r0, r1, [sp]
   143c4:	b00d      	add	sp, #52	; 0x34
   143c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143ca:	4620      	mov	r0, r4
   143cc:	4629      	mov	r1, r5
   143ce:	f000 fee1 	bl	15194 <finite>
   143d2:	2800      	cmp	r0, #0
   143d4:	d0a3      	beq.n	1431e <pow+0x92>
   143d6:	2200      	movs	r2, #0
   143d8:	2300      	movs	r3, #0
   143da:	4620      	mov	r0, r4
   143dc:	4629      	mov	r1, r5
   143de:	f001 fc23 	bl	15c28 <__aeabi_dcmplt>
   143e2:	2800      	cmp	r0, #0
   143e4:	d09b      	beq.n	1431e <pow+0x92>
   143e6:	f999 3000 	ldrsb.w	r3, [r9]
   143ea:	4a5f      	ldr	r2, [pc, #380]	; (14568 <pow+0x2dc>)
   143ec:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   143f0:	2101      	movs	r1, #1
   143f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
   143f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
   143fa:	9102      	str	r1, [sp, #8]
   143fc:	9203      	str	r2, [sp, #12]
   143fe:	2b00      	cmp	r3, #0
   14400:	d0cb      	beq.n	1439a <pow+0x10e>
   14402:	495b      	ldr	r1, [pc, #364]	; (14570 <pow+0x2e4>)
   14404:	2000      	movs	r0, #0
   14406:	2b02      	cmp	r3, #2
   14408:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1440c:	d1c9      	bne.n	143a2 <pow+0x116>
   1440e:	f001 fe25 	bl	1605c <__errno>
   14412:	2321      	movs	r3, #33	; 0x21
   14414:	6003      	str	r3, [r0, #0]
   14416:	e7c9      	b.n	143ac <pow+0x120>
   14418:	4620      	mov	r0, r4
   1441a:	4629      	mov	r1, r5
   1441c:	f001 fbfa 	bl	15c14 <__aeabi_dcmpeq>
   14420:	2800      	cmp	r0, #0
   14422:	f43f af7c 	beq.w	1431e <pow+0x92>
   14426:	4b51      	ldr	r3, [pc, #324]	; (1456c <pow+0x2e0>)
   14428:	494f      	ldr	r1, [pc, #316]	; (14568 <pow+0x2dc>)
   1442a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   1442e:	2001      	movs	r0, #1
   14430:	2200      	movs	r2, #0
   14432:	f1b8 0f02 	cmp.w	r8, #2
   14436:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1443a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1443e:	9002      	str	r0, [sp, #8]
   14440:	9103      	str	r1, [sp, #12]
   14442:	e9cd 2308 	strd	r2, r3, [sp, #32]
   14446:	d1ac      	bne.n	143a2 <pow+0x116>
   14448:	e9cd 2300 	strd	r2, r3, [sp]
   1444c:	e767      	b.n	1431e <pow+0x92>
   1444e:	4630      	mov	r0, r6
   14450:	4639      	mov	r1, r7
   14452:	f000 fe9f 	bl	15194 <finite>
   14456:	2800      	cmp	r0, #0
   14458:	f43f af6e 	beq.w	14338 <pow+0xac>
   1445c:	4620      	mov	r0, r4
   1445e:	4629      	mov	r1, r5
   14460:	f000 fe98 	bl	15194 <finite>
   14464:	2800      	cmp	r0, #0
   14466:	f43f af67 	beq.w	14338 <pow+0xac>
   1446a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1446e:	4610      	mov	r0, r2
   14470:	4619      	mov	r1, r3
   14472:	f001 fc01 	bl	15c78 <__aeabi_dcmpun>
   14476:	2800      	cmp	r0, #0
   14478:	d158      	bne.n	1452c <pow+0x2a0>
   1447a:	2303      	movs	r3, #3
   1447c:	f999 8000 	ldrsb.w	r8, [r9]
   14480:	9302      	str	r3, [sp, #8]
   14482:	4b39      	ldr	r3, [pc, #228]	; (14568 <pow+0x2dc>)
   14484:	900a      	str	r0, [sp, #40]	; 0x28
   14486:	9303      	str	r3, [sp, #12]
   14488:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1448c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   14490:	2200      	movs	r2, #0
   14492:	2300      	movs	r3, #0
   14494:	4630      	mov	r0, r6
   14496:	4639      	mov	r1, r7
   14498:	f1b8 0f00 	cmp.w	r8, #0
   1449c:	d126      	bne.n	144ec <pow+0x260>
   1449e:	4f35      	ldr	r7, [pc, #212]	; (14574 <pow+0x2e8>)
   144a0:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   144a4:	e9cd 6708 	strd	r6, r7, [sp, #32]
   144a8:	f001 fbbe 	bl	15c28 <__aeabi_dcmplt>
   144ac:	2800      	cmp	r0, #0
   144ae:	f43f af6b 	beq.w	14388 <pow+0xfc>
   144b2:	2200      	movs	r2, #0
   144b4:	4b30      	ldr	r3, [pc, #192]	; (14578 <pow+0x2ec>)
   144b6:	4620      	mov	r0, r4
   144b8:	4629      	mov	r1, r5
   144ba:	f001 f943 	bl	15744 <__aeabi_dmul>
   144be:	4604      	mov	r4, r0
   144c0:	460d      	mov	r5, r1
   144c2:	f000 fe75 	bl	151b0 <rint>
   144c6:	4602      	mov	r2, r0
   144c8:	460b      	mov	r3, r1
   144ca:	4620      	mov	r0, r4
   144cc:	4629      	mov	r1, r5
   144ce:	f001 fba1 	bl	15c14 <__aeabi_dcmpeq>
   144d2:	bb40      	cbnz	r0, 14526 <pow+0x29a>
   144d4:	4b29      	ldr	r3, [pc, #164]	; (1457c <pow+0x2f0>)
   144d6:	f999 8000 	ldrsb.w	r8, [r9]
   144da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   144de:	e9cd 2308 	strd	r2, r3, [sp, #32]
   144e2:	f1b8 0f02 	cmp.w	r8, #2
   144e6:	f47f af4f 	bne.w	14388 <pow+0xfc>
   144ea:	e751      	b.n	14390 <pow+0x104>
   144ec:	4f24      	ldr	r7, [pc, #144]	; (14580 <pow+0x2f4>)
   144ee:	2600      	movs	r6, #0
   144f0:	e9cd 6708 	strd	r6, r7, [sp, #32]
   144f4:	f001 fb98 	bl	15c28 <__aeabi_dcmplt>
   144f8:	2800      	cmp	r0, #0
   144fa:	d0f2      	beq.n	144e2 <pow+0x256>
   144fc:	2200      	movs	r2, #0
   144fe:	4b1e      	ldr	r3, [pc, #120]	; (14578 <pow+0x2ec>)
   14500:	4620      	mov	r0, r4
   14502:	4629      	mov	r1, r5
   14504:	f001 f91e 	bl	15744 <__aeabi_dmul>
   14508:	4604      	mov	r4, r0
   1450a:	460d      	mov	r5, r1
   1450c:	f000 fe50 	bl	151b0 <rint>
   14510:	4602      	mov	r2, r0
   14512:	460b      	mov	r3, r1
   14514:	4620      	mov	r0, r4
   14516:	4629      	mov	r1, r5
   14518:	f001 fb7c 	bl	15c14 <__aeabi_dcmpeq>
   1451c:	b918      	cbnz	r0, 14526 <pow+0x29a>
   1451e:	4b14      	ldr	r3, [pc, #80]	; (14570 <pow+0x2e4>)
   14520:	2200      	movs	r2, #0
   14522:	e9cd 2308 	strd	r2, r3, [sp, #32]
   14526:	f999 8000 	ldrsb.w	r8, [r9]
   1452a:	e7da      	b.n	144e2 <pow+0x256>
   1452c:	f999 9000 	ldrsb.w	r9, [r9]
   14530:	4b0d      	ldr	r3, [pc, #52]	; (14568 <pow+0x2dc>)
   14532:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   14536:	2201      	movs	r2, #1
   14538:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1453c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   14540:	9202      	str	r2, [sp, #8]
   14542:	9303      	str	r3, [sp, #12]
   14544:	f1b9 0f00 	cmp.w	r9, #0
   14548:	f43f af27 	beq.w	1439a <pow+0x10e>
   1454c:	2200      	movs	r2, #0
   1454e:	2300      	movs	r3, #0
   14550:	4610      	mov	r0, r2
   14552:	4619      	mov	r1, r3
   14554:	f001 fa20 	bl	15998 <__aeabi_ddiv>
   14558:	f1b9 0f02 	cmp.w	r9, #2
   1455c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   14560:	f43f af55 	beq.w	1440e <pow+0x182>
   14564:	e71d      	b.n	143a2 <pow+0x116>
   14566:	bf00      	nop
   14568:	0001bb2c 	.word	0x0001bb2c
   1456c:	3ff00000 	.word	0x3ff00000
   14570:	fff00000 	.word	0xfff00000
   14574:	47efffff 	.word	0x47efffff
   14578:	3fe00000 	.word	0x3fe00000
   1457c:	c7efffff 	.word	0xc7efffff
   14580:	7ff00000 	.word	0x7ff00000
   14584:	2000019b 	.word	0x2000019b

00014588 <__ieee754_pow>:
   14588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1458c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   14590:	ea57 0402 	orrs.w	r4, r7, r2
   14594:	b093      	sub	sp, #76	; 0x4c
   14596:	d037      	beq.n	14608 <__ieee754_pow+0x80>
   14598:	4c67      	ldr	r4, [pc, #412]	; (14738 <__ieee754_pow+0x1b0>)
   1459a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   1459e:	42a6      	cmp	r6, r4
   145a0:	4683      	mov	fp, r0
   145a2:	460d      	mov	r5, r1
   145a4:	dc29      	bgt.n	145fa <__ieee754_pow+0x72>
   145a6:	469a      	mov	sl, r3
   145a8:	4696      	mov	lr, r2
   145aa:	d025      	beq.n	145f8 <__ieee754_pow+0x70>
   145ac:	42a7      	cmp	r7, r4
   145ae:	dc24      	bgt.n	145fa <__ieee754_pow+0x72>
   145b0:	4c61      	ldr	r4, [pc, #388]	; (14738 <__ieee754_pow+0x1b0>)
   145b2:	42a7      	cmp	r7, r4
   145b4:	d079      	beq.n	146aa <__ieee754_pow+0x122>
   145b6:	2d00      	cmp	r5, #0
   145b8:	4689      	mov	r9, r1
   145ba:	4680      	mov	r8, r0
   145bc:	e9cd 2300 	strd	r2, r3, [sp]
   145c0:	db77      	blt.n	146b2 <__ieee754_pow+0x12a>
   145c2:	2400      	movs	r4, #0
   145c4:	f1be 0f00 	cmp.w	lr, #0
   145c8:	d12c      	bne.n	14624 <__ieee754_pow+0x9c>
   145ca:	4b5b      	ldr	r3, [pc, #364]	; (14738 <__ieee754_pow+0x1b0>)
   145cc:	429f      	cmp	r7, r3
   145ce:	f000 808b 	beq.w	146e8 <__ieee754_pow+0x160>
   145d2:	4b5a      	ldr	r3, [pc, #360]	; (1473c <__ieee754_pow+0x1b4>)
   145d4:	429f      	cmp	r7, r3
   145d6:	d061      	beq.n	1469c <__ieee754_pow+0x114>
   145d8:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
   145dc:	f000 83ba 	beq.w	14d54 <__ieee754_pow+0x7cc>
   145e0:	4b57      	ldr	r3, [pc, #348]	; (14740 <__ieee754_pow+0x1b8>)
   145e2:	459a      	cmp	sl, r3
   145e4:	d11e      	bne.n	14624 <__ieee754_pow+0x9c>
   145e6:	2d00      	cmp	r5, #0
   145e8:	db1c      	blt.n	14624 <__ieee754_pow+0x9c>
   145ea:	4640      	mov	r0, r8
   145ec:	4649      	mov	r1, r9
   145ee:	b013      	add	sp, #76	; 0x4c
   145f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145f4:	f000 bd0e 	b.w	15014 <__ieee754_sqrt>
   145f8:	b158      	cbz	r0, 14612 <__ieee754_pow+0x8a>
   145fa:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   145fe:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   14602:	ea56 030b 	orrs.w	r3, r6, fp
   14606:	d106      	bne.n	14616 <__ieee754_pow+0x8e>
   14608:	494c      	ldr	r1, [pc, #304]	; (1473c <__ieee754_pow+0x1b4>)
   1460a:	2000      	movs	r0, #0
   1460c:	b013      	add	sp, #76	; 0x4c
   1460e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14612:	42b7      	cmp	r7, r6
   14614:	ddcc      	ble.n	145b0 <__ieee754_pow+0x28>
   14616:	484b      	ldr	r0, [pc, #300]	; (14744 <__ieee754_pow+0x1bc>)
   14618:	b013      	add	sp, #76	; 0x4c
   1461a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1461e:	f000 bdc1 	b.w	151a4 <nan>
   14622:	2400      	movs	r4, #0
   14624:	4640      	mov	r0, r8
   14626:	4649      	mov	r1, r9
   14628:	f000 fdb0 	bl	1518c <fabs>
   1462c:	f1bb 0f00 	cmp.w	fp, #0
   14630:	d119      	bne.n	14666 <__ieee754_pow+0xde>
   14632:	b126      	cbz	r6, 1463e <__ieee754_pow+0xb6>
   14634:	4b41      	ldr	r3, [pc, #260]	; (1473c <__ieee754_pow+0x1b4>)
   14636:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   1463a:	429a      	cmp	r2, r3
   1463c:	d113      	bne.n	14666 <__ieee754_pow+0xde>
   1463e:	f1ba 0f00 	cmp.w	sl, #0
   14642:	f2c0 83bc 	blt.w	14dbe <__ieee754_pow+0x836>
   14646:	2d00      	cmp	r5, #0
   14648:	dae0      	bge.n	1460c <__ieee754_pow+0x84>
   1464a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   1464e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   14652:	ea56 0304 	orrs.w	r3, r6, r4
   14656:	f000 848f 	beq.w	14f78 <__ieee754_pow+0x9f0>
   1465a:	2c01      	cmp	r4, #1
   1465c:	d1d6      	bne.n	1460c <__ieee754_pow+0x84>
   1465e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   14662:	4619      	mov	r1, r3
   14664:	e7d2      	b.n	1460c <__ieee754_pow+0x84>
   14666:	0fed      	lsrs	r5, r5, #31
   14668:	3d01      	subs	r5, #1
   1466a:	ea54 0305 	orrs.w	r3, r4, r5
   1466e:	d04e      	beq.n	1470e <__ieee754_pow+0x186>
   14670:	4b35      	ldr	r3, [pc, #212]	; (14748 <__ieee754_pow+0x1c0>)
   14672:	429f      	cmp	r7, r3
   14674:	dd6e      	ble.n	14754 <__ieee754_pow+0x1cc>
   14676:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   1467a:	429f      	cmp	r7, r3
   1467c:	f340 83e8 	ble.w	14e50 <__ieee754_pow+0x8c8>
   14680:	4b32      	ldr	r3, [pc, #200]	; (1474c <__ieee754_pow+0x1c4>)
   14682:	429e      	cmp	r6, r3
   14684:	dd4e      	ble.n	14724 <__ieee754_pow+0x19c>
   14686:	f1ba 0f00 	cmp.w	sl, #0
   1468a:	dd4e      	ble.n	1472a <__ieee754_pow+0x1a2>
   1468c:	a328      	add	r3, pc, #160	; (adr r3, 14730 <__ieee754_pow+0x1a8>)
   1468e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14692:	4610      	mov	r0, r2
   14694:	4619      	mov	r1, r3
   14696:	f001 f855 	bl	15744 <__aeabi_dmul>
   1469a:	e7b7      	b.n	1460c <__ieee754_pow+0x84>
   1469c:	f1ba 0f00 	cmp.w	sl, #0
   146a0:	f2c0 843c 	blt.w	14f1c <__ieee754_pow+0x994>
   146a4:	4640      	mov	r0, r8
   146a6:	4649      	mov	r1, r9
   146a8:	e7b0      	b.n	1460c <__ieee754_pow+0x84>
   146aa:	f1be 0f00 	cmp.w	lr, #0
   146ae:	d082      	beq.n	145b6 <__ieee754_pow+0x2e>
   146b0:	e7a3      	b.n	145fa <__ieee754_pow+0x72>
   146b2:	4b27      	ldr	r3, [pc, #156]	; (14750 <__ieee754_pow+0x1c8>)
   146b4:	429f      	cmp	r7, r3
   146b6:	dc28      	bgt.n	1470a <__ieee754_pow+0x182>
   146b8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   146bc:	429f      	cmp	r7, r3
   146be:	dd80      	ble.n	145c2 <__ieee754_pow+0x3a>
   146c0:	153b      	asrs	r3, r7, #20
   146c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   146c6:	2b14      	cmp	r3, #20
   146c8:	f340 843e 	ble.w	14f48 <__ieee754_pow+0x9c0>
   146cc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   146d0:	fa2e f203 	lsr.w	r2, lr, r3
   146d4:	fa02 f303 	lsl.w	r3, r2, r3
   146d8:	459e      	cmp	lr, r3
   146da:	f47f af72 	bne.w	145c2 <__ieee754_pow+0x3a>
   146de:	f002 0201 	and.w	r2, r2, #1
   146e2:	f1c2 0402 	rsb	r4, r2, #2
   146e6:	e76d      	b.n	145c4 <__ieee754_pow+0x3c>
   146e8:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   146ec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   146f0:	ea53 030b 	orrs.w	r3, r3, fp
   146f4:	d088      	beq.n	14608 <__ieee754_pow+0x80>
   146f6:	4b15      	ldr	r3, [pc, #84]	; (1474c <__ieee754_pow+0x1c4>)
   146f8:	429e      	cmp	r6, r3
   146fa:	f340 8332 	ble.w	14d62 <__ieee754_pow+0x7da>
   146fe:	f1ba 0f00 	cmp.w	sl, #0
   14702:	db12      	blt.n	1472a <__ieee754_pow+0x1a2>
   14704:	e9dd 0100 	ldrd	r0, r1, [sp]
   14708:	e780      	b.n	1460c <__ieee754_pow+0x84>
   1470a:	2402      	movs	r4, #2
   1470c:	e75a      	b.n	145c4 <__ieee754_pow+0x3c>
   1470e:	4642      	mov	r2, r8
   14710:	464b      	mov	r3, r9
   14712:	4640      	mov	r0, r8
   14714:	4649      	mov	r1, r9
   14716:	f000 fe61 	bl	153dc <__aeabi_dsub>
   1471a:	4602      	mov	r2, r0
   1471c:	460b      	mov	r3, r1
   1471e:	f001 f93b 	bl	15998 <__aeabi_ddiv>
   14722:	e773      	b.n	1460c <__ieee754_pow+0x84>
   14724:	f1ba 0f00 	cmp.w	sl, #0
   14728:	dbb0      	blt.n	1468c <__ieee754_pow+0x104>
   1472a:	2000      	movs	r0, #0
   1472c:	2100      	movs	r1, #0
   1472e:	e76d      	b.n	1460c <__ieee754_pow+0x84>
   14730:	8800759c 	.word	0x8800759c
   14734:	7e37e43c 	.word	0x7e37e43c
   14738:	7ff00000 	.word	0x7ff00000
   1473c:	3ff00000 	.word	0x3ff00000
   14740:	3fe00000 	.word	0x3fe00000
   14744:	0001bc64 	.word	0x0001bc64
   14748:	41e00000 	.word	0x41e00000
   1474c:	3fefffff 	.word	0x3fefffff
   14750:	433fffff 	.word	0x433fffff
   14754:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   14758:	f04f 0200 	mov.w	r2, #0
   1475c:	da05      	bge.n	1476a <__ieee754_pow+0x1e2>
   1475e:	4bd4      	ldr	r3, [pc, #848]	; (14ab0 <__ieee754_pow+0x528>)
   14760:	f000 fff0 	bl	15744 <__aeabi_dmul>
   14764:	f06f 0234 	mvn.w	r2, #52	; 0x34
   14768:	460e      	mov	r6, r1
   1476a:	1533      	asrs	r3, r6, #20
   1476c:	4fd1      	ldr	r7, [pc, #836]	; (14ab4 <__ieee754_pow+0x52c>)
   1476e:	f3c6 0613 	ubfx	r6, r6, #0, #20
   14772:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   14776:	4413      	add	r3, r2
   14778:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   1477c:	42be      	cmp	r6, r7
   1477e:	461a      	mov	r2, r3
   14780:	930d      	str	r3, [sp, #52]	; 0x34
   14782:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   14786:	f340 8321 	ble.w	14dcc <__ieee754_pow+0x844>
   1478a:	4bcb      	ldr	r3, [pc, #812]	; (14ab8 <__ieee754_pow+0x530>)
   1478c:	429e      	cmp	r6, r3
   1478e:	f340 83fd 	ble.w	14f8c <__ieee754_pow+0xa04>
   14792:	4613      	mov	r3, r2
   14794:	3301      	adds	r3, #1
   14796:	930d      	str	r3, [sp, #52]	; 0x34
   14798:	4bc8      	ldr	r3, [pc, #800]	; (14abc <__ieee754_pow+0x534>)
   1479a:	2200      	movs	r2, #0
   1479c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   147a0:	2700      	movs	r7, #0
   147a2:	2600      	movs	r6, #0
   147a4:	e9cd 6708 	strd	r6, r7, [sp, #32]
   147a8:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   147ac:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   147b0:	2700      	movs	r7, #0
   147b2:	4602      	mov	r2, r0
   147b4:	4653      	mov	r3, sl
   147b6:	4651      	mov	r1, sl
   147b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   147bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   147c0:	f000 fe0c 	bl	153dc <__aeabi_dsub>
   147c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   147c8:	4680      	mov	r8, r0
   147ca:	4689      	mov	r9, r1
   147cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   147d0:	f000 fe06 	bl	153e0 <__adddf3>
   147d4:	4602      	mov	r2, r0
   147d6:	460b      	mov	r3, r1
   147d8:	2000      	movs	r0, #0
   147da:	49b8      	ldr	r1, [pc, #736]	; (14abc <__ieee754_pow+0x534>)
   147dc:	f001 f8dc 	bl	15998 <__aeabi_ddiv>
   147e0:	460a      	mov	r2, r1
   147e2:	4601      	mov	r1, r0
   147e4:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   147e8:	4613      	mov	r3, r2
   147ea:	4649      	mov	r1, r9
   147ec:	4602      	mov	r2, r0
   147ee:	4640      	mov	r0, r8
   147f0:	f000 ffa8 	bl	15744 <__aeabi_dmul>
   147f4:	ea4f 036a 	mov.w	r3, sl, asr #1
   147f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   147fc:	468c      	mov	ip, r1
   147fe:	4683      	mov	fp, r0
   14800:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   14804:	e9cd bc04 	strd	fp, ip, [sp, #16]
   14808:	46da      	mov	sl, fp
   1480a:	468b      	mov	fp, r1
   1480c:	19d9      	adds	r1, r3, r7
   1480e:	2300      	movs	r3, #0
   14810:	e9cd ab02 	strd	sl, fp, [sp, #8]
   14814:	9302      	str	r3, [sp, #8]
   14816:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   1481a:	2000      	movs	r0, #0
   1481c:	4606      	mov	r6, r0
   1481e:	460f      	mov	r7, r1
   14820:	4602      	mov	r2, r0
   14822:	460b      	mov	r3, r1
   14824:	4650      	mov	r0, sl
   14826:	4659      	mov	r1, fp
   14828:	f000 ff8c 	bl	15744 <__aeabi_dmul>
   1482c:	4602      	mov	r2, r0
   1482e:	460b      	mov	r3, r1
   14830:	4640      	mov	r0, r8
   14832:	4649      	mov	r1, r9
   14834:	f000 fdd2 	bl	153dc <__aeabi_dsub>
   14838:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1483c:	4680      	mov	r8, r0
   1483e:	4689      	mov	r9, r1
   14840:	4630      	mov	r0, r6
   14842:	4639      	mov	r1, r7
   14844:	f000 fdca 	bl	153dc <__aeabi_dsub>
   14848:	4602      	mov	r2, r0
   1484a:	460b      	mov	r3, r1
   1484c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   14850:	f000 fdc4 	bl	153dc <__aeabi_dsub>
   14854:	4652      	mov	r2, sl
   14856:	465b      	mov	r3, fp
   14858:	f000 ff74 	bl	15744 <__aeabi_dmul>
   1485c:	4602      	mov	r2, r0
   1485e:	460b      	mov	r3, r1
   14860:	4640      	mov	r0, r8
   14862:	4649      	mov	r1, r9
   14864:	f000 fdba 	bl	153dc <__aeabi_dsub>
   14868:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1486c:	f000 ff6a 	bl	15744 <__aeabi_dmul>
   14870:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   14874:	e9cd 0106 	strd	r0, r1, [sp, #24]
   14878:	4632      	mov	r2, r6
   1487a:	463b      	mov	r3, r7
   1487c:	4630      	mov	r0, r6
   1487e:	4639      	mov	r1, r7
   14880:	f000 ff60 	bl	15744 <__aeabi_dmul>
   14884:	a378      	add	r3, pc, #480	; (adr r3, 14a68 <__ieee754_pow+0x4e0>)
   14886:	e9d3 2300 	ldrd	r2, r3, [r3]
   1488a:	4606      	mov	r6, r0
   1488c:	460f      	mov	r7, r1
   1488e:	f000 ff59 	bl	15744 <__aeabi_dmul>
   14892:	a377      	add	r3, pc, #476	; (adr r3, 14a70 <__ieee754_pow+0x4e8>)
   14894:	e9d3 2300 	ldrd	r2, r3, [r3]
   14898:	f000 fda2 	bl	153e0 <__adddf3>
   1489c:	4632      	mov	r2, r6
   1489e:	463b      	mov	r3, r7
   148a0:	f000 ff50 	bl	15744 <__aeabi_dmul>
   148a4:	a374      	add	r3, pc, #464	; (adr r3, 14a78 <__ieee754_pow+0x4f0>)
   148a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   148aa:	f000 fd99 	bl	153e0 <__adddf3>
   148ae:	4632      	mov	r2, r6
   148b0:	463b      	mov	r3, r7
   148b2:	f000 ff47 	bl	15744 <__aeabi_dmul>
   148b6:	a372      	add	r3, pc, #456	; (adr r3, 14a80 <__ieee754_pow+0x4f8>)
   148b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   148bc:	f000 fd90 	bl	153e0 <__adddf3>
   148c0:	4632      	mov	r2, r6
   148c2:	463b      	mov	r3, r7
   148c4:	f000 ff3e 	bl	15744 <__aeabi_dmul>
   148c8:	a36f      	add	r3, pc, #444	; (adr r3, 14a88 <__ieee754_pow+0x500>)
   148ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   148ce:	f000 fd87 	bl	153e0 <__adddf3>
   148d2:	4632      	mov	r2, r6
   148d4:	463b      	mov	r3, r7
   148d6:	f000 ff35 	bl	15744 <__aeabi_dmul>
   148da:	a36d      	add	r3, pc, #436	; (adr r3, 14a90 <__ieee754_pow+0x508>)
   148dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   148e0:	f000 fd7e 	bl	153e0 <__adddf3>
   148e4:	4632      	mov	r2, r6
   148e6:	4680      	mov	r8, r0
   148e8:	4689      	mov	r9, r1
   148ea:	463b      	mov	r3, r7
   148ec:	4630      	mov	r0, r6
   148ee:	4639      	mov	r1, r7
   148f0:	f000 ff28 	bl	15744 <__aeabi_dmul>
   148f4:	4602      	mov	r2, r0
   148f6:	460b      	mov	r3, r1
   148f8:	4640      	mov	r0, r8
   148fa:	4649      	mov	r1, r9
   148fc:	f000 ff22 	bl	15744 <__aeabi_dmul>
   14900:	4652      	mov	r2, sl
   14902:	4606      	mov	r6, r0
   14904:	460f      	mov	r7, r1
   14906:	465b      	mov	r3, fp
   14908:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1490c:	f000 fd68 	bl	153e0 <__adddf3>
   14910:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   14914:	f000 ff16 	bl	15744 <__aeabi_dmul>
   14918:	4632      	mov	r2, r6
   1491a:	463b      	mov	r3, r7
   1491c:	f000 fd60 	bl	153e0 <__adddf3>
   14920:	4652      	mov	r2, sl
   14922:	4680      	mov	r8, r0
   14924:	4689      	mov	r9, r1
   14926:	465b      	mov	r3, fp
   14928:	4650      	mov	r0, sl
   1492a:	4659      	mov	r1, fp
   1492c:	f000 ff0a 	bl	15744 <__aeabi_dmul>
   14930:	2200      	movs	r2, #0
   14932:	4b63      	ldr	r3, [pc, #396]	; (14ac0 <__ieee754_pow+0x538>)
   14934:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   14938:	f000 fd52 	bl	153e0 <__adddf3>
   1493c:	4642      	mov	r2, r8
   1493e:	464b      	mov	r3, r9
   14940:	f000 fd4e 	bl	153e0 <__adddf3>
   14944:	9802      	ldr	r0, [sp, #8]
   14946:	460f      	mov	r7, r1
   14948:	4606      	mov	r6, r0
   1494a:	4632      	mov	r2, r6
   1494c:	463b      	mov	r3, r7
   1494e:	4650      	mov	r0, sl
   14950:	4659      	mov	r1, fp
   14952:	f000 fef7 	bl	15744 <__aeabi_dmul>
   14956:	2200      	movs	r2, #0
   14958:	4682      	mov	sl, r0
   1495a:	468b      	mov	fp, r1
   1495c:	4b58      	ldr	r3, [pc, #352]	; (14ac0 <__ieee754_pow+0x538>)
   1495e:	4630      	mov	r0, r6
   14960:	4639      	mov	r1, r7
   14962:	f000 fd3b 	bl	153dc <__aeabi_dsub>
   14966:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1496a:	f000 fd37 	bl	153dc <__aeabi_dsub>
   1496e:	4602      	mov	r2, r0
   14970:	460b      	mov	r3, r1
   14972:	4640      	mov	r0, r8
   14974:	4649      	mov	r1, r9
   14976:	f000 fd31 	bl	153dc <__aeabi_dsub>
   1497a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1497e:	f000 fee1 	bl	15744 <__aeabi_dmul>
   14982:	4632      	mov	r2, r6
   14984:	4680      	mov	r8, r0
   14986:	4689      	mov	r9, r1
   14988:	463b      	mov	r3, r7
   1498a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1498e:	f000 fed9 	bl	15744 <__aeabi_dmul>
   14992:	4602      	mov	r2, r0
   14994:	460b      	mov	r3, r1
   14996:	4640      	mov	r0, r8
   14998:	4649      	mov	r1, r9
   1499a:	f000 fd21 	bl	153e0 <__adddf3>
   1499e:	4680      	mov	r8, r0
   149a0:	4689      	mov	r9, r1
   149a2:	4602      	mov	r2, r0
   149a4:	460b      	mov	r3, r1
   149a6:	4650      	mov	r0, sl
   149a8:	4659      	mov	r1, fp
   149aa:	e9cd ab04 	strd	sl, fp, [sp, #16]
   149ae:	f000 fd17 	bl	153e0 <__adddf3>
   149b2:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   149b6:	a338      	add	r3, pc, #224	; (adr r3, 14a98 <__ieee754_pow+0x510>)
   149b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   149bc:	4650      	mov	r0, sl
   149be:	460f      	mov	r7, r1
   149c0:	f000 fec0 	bl	15744 <__aeabi_dmul>
   149c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   149c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   149cc:	4639      	mov	r1, r7
   149ce:	4650      	mov	r0, sl
   149d0:	f000 fd04 	bl	153dc <__aeabi_dsub>
   149d4:	4602      	mov	r2, r0
   149d6:	460b      	mov	r3, r1
   149d8:	4640      	mov	r0, r8
   149da:	4649      	mov	r1, r9
   149dc:	f000 fcfe 	bl	153dc <__aeabi_dsub>
   149e0:	a32f      	add	r3, pc, #188	; (adr r3, 14aa0 <__ieee754_pow+0x518>)
   149e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   149e6:	f000 fead 	bl	15744 <__aeabi_dmul>
   149ea:	a32f      	add	r3, pc, #188	; (adr r3, 14aa8 <__ieee754_pow+0x520>)
   149ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   149f0:	4680      	mov	r8, r0
   149f2:	4689      	mov	r9, r1
   149f4:	4650      	mov	r0, sl
   149f6:	4639      	mov	r1, r7
   149f8:	f000 fea4 	bl	15744 <__aeabi_dmul>
   149fc:	4602      	mov	r2, r0
   149fe:	460b      	mov	r3, r1
   14a00:	4640      	mov	r0, r8
   14a02:	4649      	mov	r1, r9
   14a04:	f000 fcec 	bl	153e0 <__adddf3>
   14a08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   14a0c:	f000 fce8 	bl	153e0 <__adddf3>
   14a10:	4680      	mov	r8, r0
   14a12:	980d      	ldr	r0, [sp, #52]	; 0x34
   14a14:	4689      	mov	r9, r1
   14a16:	f000 fe2f 	bl	15678 <__aeabi_i2d>
   14a1a:	4642      	mov	r2, r8
   14a1c:	4606      	mov	r6, r0
   14a1e:	460f      	mov	r7, r1
   14a20:	464b      	mov	r3, r9
   14a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14a26:	f000 fcdb 	bl	153e0 <__adddf3>
   14a2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   14a2e:	f000 fcd7 	bl	153e0 <__adddf3>
   14a32:	4632      	mov	r2, r6
   14a34:	463b      	mov	r3, r7
   14a36:	f000 fcd3 	bl	153e0 <__adddf3>
   14a3a:	4632      	mov	r2, r6
   14a3c:	463b      	mov	r3, r7
   14a3e:	4650      	mov	r0, sl
   14a40:	468b      	mov	fp, r1
   14a42:	f000 fccb 	bl	153dc <__aeabi_dsub>
   14a46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   14a4a:	f000 fcc7 	bl	153dc <__aeabi_dsub>
   14a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14a52:	f000 fcc3 	bl	153dc <__aeabi_dsub>
   14a56:	4602      	mov	r2, r0
   14a58:	460b      	mov	r3, r1
   14a5a:	4640      	mov	r0, r8
   14a5c:	4649      	mov	r1, r9
   14a5e:	f000 fcbd 	bl	153dc <__aeabi_dsub>
   14a62:	4680      	mov	r8, r0
   14a64:	e02e      	b.n	14ac4 <__ieee754_pow+0x53c>
   14a66:	bf00      	nop
   14a68:	4a454eef 	.word	0x4a454eef
   14a6c:	3fca7e28 	.word	0x3fca7e28
   14a70:	93c9db65 	.word	0x93c9db65
   14a74:	3fcd864a 	.word	0x3fcd864a
   14a78:	a91d4101 	.word	0xa91d4101
   14a7c:	3fd17460 	.word	0x3fd17460
   14a80:	518f264d 	.word	0x518f264d
   14a84:	3fd55555 	.word	0x3fd55555
   14a88:	db6fabff 	.word	0xdb6fabff
   14a8c:	3fdb6db6 	.word	0x3fdb6db6
   14a90:	33333303 	.word	0x33333303
   14a94:	3fe33333 	.word	0x3fe33333
   14a98:	e0000000 	.word	0xe0000000
   14a9c:	3feec709 	.word	0x3feec709
   14aa0:	dc3a03fd 	.word	0xdc3a03fd
   14aa4:	3feec709 	.word	0x3feec709
   14aa8:	145b01f5 	.word	0x145b01f5
   14aac:	be3e2fe0 	.word	0xbe3e2fe0
   14ab0:	43400000 	.word	0x43400000
   14ab4:	0003988e 	.word	0x0003988e
   14ab8:	000bb679 	.word	0x000bb679
   14abc:	3ff00000 	.word	0x3ff00000
   14ac0:	40080000 	.word	0x40080000
   14ac4:	4689      	mov	r9, r1
   14ac6:	3c01      	subs	r4, #1
   14ac8:	ea54 0305 	orrs.w	r3, r4, r5
   14acc:	e9dd 0100 	ldrd	r0, r1, [sp]
   14ad0:	bf14      	ite	ne
   14ad2:	4cd9      	ldrne	r4, [pc, #868]	; (14e38 <__ieee754_pow+0x8b0>)
   14ad4:	4cd9      	ldreq	r4, [pc, #868]	; (14e3c <__ieee754_pow+0x8b4>)
   14ad6:	2300      	movs	r3, #0
   14ad8:	e9cd 3404 	strd	r3, r4, [sp, #16]
   14adc:	4603      	mov	r3, r0
   14ade:	460c      	mov	r4, r1
   14ae0:	e9cd 3402 	strd	r3, r4, [sp, #8]
   14ae4:	2300      	movs	r3, #0
   14ae6:	9302      	str	r3, [sp, #8]
   14ae8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   14aec:	4622      	mov	r2, r4
   14aee:	462b      	mov	r3, r5
   14af0:	f000 fc74 	bl	153dc <__aeabi_dsub>
   14af4:	4652      	mov	r2, sl
   14af6:	465b      	mov	r3, fp
   14af8:	f000 fe24 	bl	15744 <__aeabi_dmul>
   14afc:	e9dd 2300 	ldrd	r2, r3, [sp]
   14b00:	4606      	mov	r6, r0
   14b02:	460f      	mov	r7, r1
   14b04:	4640      	mov	r0, r8
   14b06:	4649      	mov	r1, r9
   14b08:	f000 fe1c 	bl	15744 <__aeabi_dmul>
   14b0c:	4602      	mov	r2, r0
   14b0e:	460b      	mov	r3, r1
   14b10:	4630      	mov	r0, r6
   14b12:	4639      	mov	r1, r7
   14b14:	f000 fc64 	bl	153e0 <__adddf3>
   14b18:	4622      	mov	r2, r4
   14b1a:	4680      	mov	r8, r0
   14b1c:	4689      	mov	r9, r1
   14b1e:	462b      	mov	r3, r5
   14b20:	4650      	mov	r0, sl
   14b22:	4659      	mov	r1, fp
   14b24:	e9cd 8900 	strd	r8, r9, [sp]
   14b28:	f000 fe0c 	bl	15744 <__aeabi_dmul>
   14b2c:	460b      	mov	r3, r1
   14b2e:	4602      	mov	r2, r0
   14b30:	4606      	mov	r6, r0
   14b32:	460f      	mov	r7, r1
   14b34:	4640      	mov	r0, r8
   14b36:	4649      	mov	r1, r9
   14b38:	f000 fc52 	bl	153e0 <__adddf3>
   14b3c:	4bc0      	ldr	r3, [pc, #768]	; (14e40 <__ieee754_pow+0x8b8>)
   14b3e:	4299      	cmp	r1, r3
   14b40:	4604      	mov	r4, r0
   14b42:	460d      	mov	r5, r1
   14b44:	468a      	mov	sl, r1
   14b46:	f340 8116 	ble.w	14d76 <__ieee754_pow+0x7ee>
   14b4a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   14b4e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   14b52:	4303      	orrs	r3, r0
   14b54:	f040 81ea 	bne.w	14f2c <__ieee754_pow+0x9a4>
   14b58:	a3a3      	add	r3, pc, #652	; (adr r3, 14de8 <__ieee754_pow+0x860>)
   14b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   14b5e:	e9dd 0100 	ldrd	r0, r1, [sp]
   14b62:	f000 fc3d 	bl	153e0 <__adddf3>
   14b66:	4632      	mov	r2, r6
   14b68:	4680      	mov	r8, r0
   14b6a:	4689      	mov	r9, r1
   14b6c:	463b      	mov	r3, r7
   14b6e:	4620      	mov	r0, r4
   14b70:	4629      	mov	r1, r5
   14b72:	f000 fc33 	bl	153dc <__aeabi_dsub>
   14b76:	4602      	mov	r2, r0
   14b78:	460b      	mov	r3, r1
   14b7a:	4640      	mov	r0, r8
   14b7c:	4649      	mov	r1, r9
   14b7e:	f001 f871 	bl	15c64 <__aeabi_dcmpgt>
   14b82:	2800      	cmp	r0, #0
   14b84:	f040 81d2 	bne.w	14f2c <__ieee754_pow+0x9a4>
   14b88:	46a8      	mov	r8, r5
   14b8a:	ea4f 5328 	mov.w	r3, r8, asr #20
   14b8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   14b92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   14b96:	fa42 f303 	asr.w	r3, r2, r3
   14b9a:	4453      	add	r3, sl
   14b9c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   14ba0:	4da8      	ldr	r5, [pc, #672]	; (14e44 <__ieee754_pow+0x8bc>)
   14ba2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   14ba6:	4115      	asrs	r5, r2
   14ba8:	f3c3 0413 	ubfx	r4, r3, #0, #20
   14bac:	ea23 0105 	bic.w	r1, r3, r5
   14bb0:	2000      	movs	r0, #0
   14bb2:	f1c2 0b14 	rsb	fp, r2, #20
   14bb6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   14bba:	f1ba 0f00 	cmp.w	sl, #0
   14bbe:	4602      	mov	r2, r0
   14bc0:	460b      	mov	r3, r1
   14bc2:	fa44 fb0b 	asr.w	fp, r4, fp
   14bc6:	4630      	mov	r0, r6
   14bc8:	4639      	mov	r1, r7
   14bca:	bfb8      	it	lt
   14bcc:	f1cb 0b00 	rsblt	fp, fp, #0
   14bd0:	f000 fc04 	bl	153dc <__aeabi_dsub>
   14bd4:	4602      	mov	r2, r0
   14bd6:	460b      	mov	r3, r1
   14bd8:	4606      	mov	r6, r0
   14bda:	460f      	mov	r7, r1
   14bdc:	e9dd 0100 	ldrd	r0, r1, [sp]
   14be0:	f000 fbfe 	bl	153e0 <__adddf3>
   14be4:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   14be8:	460d      	mov	r5, r1
   14bea:	2400      	movs	r4, #0
   14bec:	a380      	add	r3, pc, #512	; (adr r3, 14df0 <__ieee754_pow+0x868>)
   14bee:	e9d3 2300 	ldrd	r2, r3, [r3]
   14bf2:	4620      	mov	r0, r4
   14bf4:	4629      	mov	r1, r5
   14bf6:	f000 fda5 	bl	15744 <__aeabi_dmul>
   14bfa:	4632      	mov	r2, r6
   14bfc:	4680      	mov	r8, r0
   14bfe:	4689      	mov	r9, r1
   14c00:	463b      	mov	r3, r7
   14c02:	4620      	mov	r0, r4
   14c04:	4629      	mov	r1, r5
   14c06:	f000 fbe9 	bl	153dc <__aeabi_dsub>
   14c0a:	4602      	mov	r2, r0
   14c0c:	460b      	mov	r3, r1
   14c0e:	e9dd 0100 	ldrd	r0, r1, [sp]
   14c12:	f000 fbe3 	bl	153dc <__aeabi_dsub>
   14c16:	a378      	add	r3, pc, #480	; (adr r3, 14df8 <__ieee754_pow+0x870>)
   14c18:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c1c:	f000 fd92 	bl	15744 <__aeabi_dmul>
   14c20:	a377      	add	r3, pc, #476	; (adr r3, 14e00 <__ieee754_pow+0x878>)
   14c22:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c26:	4606      	mov	r6, r0
   14c28:	460f      	mov	r7, r1
   14c2a:	4620      	mov	r0, r4
   14c2c:	4629      	mov	r1, r5
   14c2e:	f000 fd89 	bl	15744 <__aeabi_dmul>
   14c32:	4602      	mov	r2, r0
   14c34:	460b      	mov	r3, r1
   14c36:	4630      	mov	r0, r6
   14c38:	4639      	mov	r1, r7
   14c3a:	f000 fbd1 	bl	153e0 <__adddf3>
   14c3e:	4606      	mov	r6, r0
   14c40:	460f      	mov	r7, r1
   14c42:	4602      	mov	r2, r0
   14c44:	460b      	mov	r3, r1
   14c46:	4640      	mov	r0, r8
   14c48:	4649      	mov	r1, r9
   14c4a:	f000 fbc9 	bl	153e0 <__adddf3>
   14c4e:	4642      	mov	r2, r8
   14c50:	464b      	mov	r3, r9
   14c52:	4604      	mov	r4, r0
   14c54:	460d      	mov	r5, r1
   14c56:	f000 fbc1 	bl	153dc <__aeabi_dsub>
   14c5a:	4602      	mov	r2, r0
   14c5c:	460b      	mov	r3, r1
   14c5e:	4630      	mov	r0, r6
   14c60:	4639      	mov	r1, r7
   14c62:	f000 fbbb 	bl	153dc <__aeabi_dsub>
   14c66:	4622      	mov	r2, r4
   14c68:	4680      	mov	r8, r0
   14c6a:	4689      	mov	r9, r1
   14c6c:	462b      	mov	r3, r5
   14c6e:	4620      	mov	r0, r4
   14c70:	4629      	mov	r1, r5
   14c72:	f000 fd67 	bl	15744 <__aeabi_dmul>
   14c76:	a364      	add	r3, pc, #400	; (adr r3, 14e08 <__ieee754_pow+0x880>)
   14c78:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c7c:	4606      	mov	r6, r0
   14c7e:	460f      	mov	r7, r1
   14c80:	f000 fd60 	bl	15744 <__aeabi_dmul>
   14c84:	a362      	add	r3, pc, #392	; (adr r3, 14e10 <__ieee754_pow+0x888>)
   14c86:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c8a:	f000 fba7 	bl	153dc <__aeabi_dsub>
   14c8e:	4632      	mov	r2, r6
   14c90:	463b      	mov	r3, r7
   14c92:	f000 fd57 	bl	15744 <__aeabi_dmul>
   14c96:	a360      	add	r3, pc, #384	; (adr r3, 14e18 <__ieee754_pow+0x890>)
   14c98:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c9c:	f000 fba0 	bl	153e0 <__adddf3>
   14ca0:	4632      	mov	r2, r6
   14ca2:	463b      	mov	r3, r7
   14ca4:	f000 fd4e 	bl	15744 <__aeabi_dmul>
   14ca8:	a35d      	add	r3, pc, #372	; (adr r3, 14e20 <__ieee754_pow+0x898>)
   14caa:	e9d3 2300 	ldrd	r2, r3, [r3]
   14cae:	f000 fb95 	bl	153dc <__aeabi_dsub>
   14cb2:	4632      	mov	r2, r6
   14cb4:	463b      	mov	r3, r7
   14cb6:	f000 fd45 	bl	15744 <__aeabi_dmul>
   14cba:	a35b      	add	r3, pc, #364	; (adr r3, 14e28 <__ieee754_pow+0x8a0>)
   14cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   14cc0:	f000 fb8e 	bl	153e0 <__adddf3>
   14cc4:	4632      	mov	r2, r6
   14cc6:	463b      	mov	r3, r7
   14cc8:	f000 fd3c 	bl	15744 <__aeabi_dmul>
   14ccc:	4602      	mov	r2, r0
   14cce:	460b      	mov	r3, r1
   14cd0:	4620      	mov	r0, r4
   14cd2:	4629      	mov	r1, r5
   14cd4:	f000 fb82 	bl	153dc <__aeabi_dsub>
   14cd8:	4606      	mov	r6, r0
   14cda:	460f      	mov	r7, r1
   14cdc:	4602      	mov	r2, r0
   14cde:	460b      	mov	r3, r1
   14ce0:	4620      	mov	r0, r4
   14ce2:	4629      	mov	r1, r5
   14ce4:	f000 fd2e 	bl	15744 <__aeabi_dmul>
   14ce8:	2200      	movs	r2, #0
   14cea:	e9cd 0100 	strd	r0, r1, [sp]
   14cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14cf2:	4630      	mov	r0, r6
   14cf4:	4639      	mov	r1, r7
   14cf6:	f000 fb71 	bl	153dc <__aeabi_dsub>
   14cfa:	4602      	mov	r2, r0
   14cfc:	460b      	mov	r3, r1
   14cfe:	e9dd 0100 	ldrd	r0, r1, [sp]
   14d02:	f000 fe49 	bl	15998 <__aeabi_ddiv>
   14d06:	4642      	mov	r2, r8
   14d08:	4606      	mov	r6, r0
   14d0a:	460f      	mov	r7, r1
   14d0c:	464b      	mov	r3, r9
   14d0e:	4620      	mov	r0, r4
   14d10:	4629      	mov	r1, r5
   14d12:	f000 fd17 	bl	15744 <__aeabi_dmul>
   14d16:	4642      	mov	r2, r8
   14d18:	464b      	mov	r3, r9
   14d1a:	f000 fb61 	bl	153e0 <__adddf3>
   14d1e:	4602      	mov	r2, r0
   14d20:	460b      	mov	r3, r1
   14d22:	4630      	mov	r0, r6
   14d24:	4639      	mov	r1, r7
   14d26:	f000 fb59 	bl	153dc <__aeabi_dsub>
   14d2a:	4622      	mov	r2, r4
   14d2c:	462b      	mov	r3, r5
   14d2e:	f000 fb55 	bl	153dc <__aeabi_dsub>
   14d32:	4602      	mov	r2, r0
   14d34:	460b      	mov	r3, r1
   14d36:	2000      	movs	r0, #0
   14d38:	493f      	ldr	r1, [pc, #252]	; (14e38 <__ieee754_pow+0x8b0>)
   14d3a:	f000 fb4f 	bl	153dc <__aeabi_dsub>
   14d3e:	448a      	add	sl, r1
   14d40:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   14d44:	f2c0 8133 	blt.w	14fae <__ieee754_pow+0xa26>
   14d48:	4651      	mov	r1, sl
   14d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14d4e:	f000 fcf9 	bl	15744 <__aeabi_dmul>
   14d52:	e45b      	b.n	1460c <__ieee754_pow+0x84>
   14d54:	4642      	mov	r2, r8
   14d56:	4640      	mov	r0, r8
   14d58:	464b      	mov	r3, r9
   14d5a:	4649      	mov	r1, r9
   14d5c:	f000 fcf2 	bl	15744 <__aeabi_dmul>
   14d60:	e454      	b.n	1460c <__ieee754_pow+0x84>
   14d62:	f1ba 0f00 	cmp.w	sl, #0
   14d66:	f6bf ace0 	bge.w	1472a <__ieee754_pow+0x1a2>
   14d6a:	e9dd 3400 	ldrd	r3, r4, [sp]
   14d6e:	4618      	mov	r0, r3
   14d70:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   14d74:	e44a      	b.n	1460c <__ieee754_pow+0x84>
   14d76:	4b34      	ldr	r3, [pc, #208]	; (14e48 <__ieee754_pow+0x8c0>)
   14d78:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   14d7c:	4598      	cmp	r8, r3
   14d7e:	f340 80f2 	ble.w	14f66 <__ieee754_pow+0x9de>
   14d82:	4b32      	ldr	r3, [pc, #200]	; (14e4c <__ieee754_pow+0x8c4>)
   14d84:	440b      	add	r3, r1
   14d86:	4303      	orrs	r3, r0
   14d88:	d10c      	bne.n	14da4 <__ieee754_pow+0x81c>
   14d8a:	4632      	mov	r2, r6
   14d8c:	463b      	mov	r3, r7
   14d8e:	f000 fb25 	bl	153dc <__aeabi_dsub>
   14d92:	4602      	mov	r2, r0
   14d94:	460b      	mov	r3, r1
   14d96:	e9dd 0100 	ldrd	r0, r1, [sp]
   14d9a:	f000 ff4f 	bl	15c3c <__aeabi_dcmple>
   14d9e:	2800      	cmp	r0, #0
   14da0:	f43f aef3 	beq.w	14b8a <__ieee754_pow+0x602>
   14da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   14da8:	a321      	add	r3, pc, #132	; (adr r3, 14e30 <__ieee754_pow+0x8a8>)
   14daa:	e9d3 2300 	ldrd	r2, r3, [r3]
   14dae:	f000 fcc9 	bl	15744 <__aeabi_dmul>
   14db2:	a31f      	add	r3, pc, #124	; (adr r3, 14e30 <__ieee754_pow+0x8a8>)
   14db4:	e9d3 2300 	ldrd	r2, r3, [r3]
   14db8:	f000 fcc4 	bl	15744 <__aeabi_dmul>
   14dbc:	e426      	b.n	1460c <__ieee754_pow+0x84>
   14dbe:	4602      	mov	r2, r0
   14dc0:	460b      	mov	r3, r1
   14dc2:	2000      	movs	r0, #0
   14dc4:	491c      	ldr	r1, [pc, #112]	; (14e38 <__ieee754_pow+0x8b0>)
   14dc6:	f000 fde7 	bl	15998 <__aeabi_ddiv>
   14dca:	e43c      	b.n	14646 <__ieee754_pow+0xbe>
   14dcc:	2200      	movs	r2, #0
   14dce:	2300      	movs	r3, #0
   14dd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   14dd4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   14dd8:	4b17      	ldr	r3, [pc, #92]	; (14e38 <__ieee754_pow+0x8b0>)
   14dda:	2200      	movs	r2, #0
   14ddc:	2700      	movs	r7, #0
   14dde:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14de2:	e4e6      	b.n	147b2 <__ieee754_pow+0x22a>
   14de4:	f3af 8000 	nop.w
   14de8:	652b82fe 	.word	0x652b82fe
   14dec:	3c971547 	.word	0x3c971547
   14df0:	00000000 	.word	0x00000000
   14df4:	3fe62e43 	.word	0x3fe62e43
   14df8:	fefa39ef 	.word	0xfefa39ef
   14dfc:	3fe62e42 	.word	0x3fe62e42
   14e00:	0ca86c39 	.word	0x0ca86c39
   14e04:	be205c61 	.word	0xbe205c61
   14e08:	72bea4d0 	.word	0x72bea4d0
   14e0c:	3e663769 	.word	0x3e663769
   14e10:	c5d26bf1 	.word	0xc5d26bf1
   14e14:	3ebbbd41 	.word	0x3ebbbd41
   14e18:	af25de2c 	.word	0xaf25de2c
   14e1c:	3f11566a 	.word	0x3f11566a
   14e20:	16bebd93 	.word	0x16bebd93
   14e24:	3f66c16c 	.word	0x3f66c16c
   14e28:	5555553e 	.word	0x5555553e
   14e2c:	3fc55555 	.word	0x3fc55555
   14e30:	c2f8f359 	.word	0xc2f8f359
   14e34:	01a56e1f 	.word	0x01a56e1f
   14e38:	3ff00000 	.word	0x3ff00000
   14e3c:	bff00000 	.word	0xbff00000
   14e40:	408fffff 	.word	0x408fffff
   14e44:	000fffff 	.word	0x000fffff
   14e48:	4090cbff 	.word	0x4090cbff
   14e4c:	3f6f3400 	.word	0x3f6f3400
   14e50:	4b6b      	ldr	r3, [pc, #428]	; (15000 <__ieee754_pow+0xa78>)
   14e52:	429e      	cmp	r6, r3
   14e54:	f77f ac66 	ble.w	14724 <__ieee754_pow+0x19c>
   14e58:	4b6a      	ldr	r3, [pc, #424]	; (15004 <__ieee754_pow+0xa7c>)
   14e5a:	429e      	cmp	r6, r3
   14e5c:	f73f ac13 	bgt.w	14686 <__ieee754_pow+0xfe>
   14e60:	2200      	movs	r2, #0
   14e62:	4b68      	ldr	r3, [pc, #416]	; (15004 <__ieee754_pow+0xa7c>)
   14e64:	f000 faba 	bl	153dc <__aeabi_dsub>
   14e68:	a357      	add	r3, pc, #348	; (adr r3, 14fc8 <__ieee754_pow+0xa40>)
   14e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e6e:	4606      	mov	r6, r0
   14e70:	460f      	mov	r7, r1
   14e72:	f000 fc67 	bl	15744 <__aeabi_dmul>
   14e76:	a356      	add	r3, pc, #344	; (adr r3, 14fd0 <__ieee754_pow+0xa48>)
   14e78:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e7c:	4680      	mov	r8, r0
   14e7e:	4689      	mov	r9, r1
   14e80:	4630      	mov	r0, r6
   14e82:	4639      	mov	r1, r7
   14e84:	f000 fc5e 	bl	15744 <__aeabi_dmul>
   14e88:	2200      	movs	r2, #0
   14e8a:	4682      	mov	sl, r0
   14e8c:	468b      	mov	fp, r1
   14e8e:	4b5e      	ldr	r3, [pc, #376]	; (15008 <__ieee754_pow+0xa80>)
   14e90:	4630      	mov	r0, r6
   14e92:	4639      	mov	r1, r7
   14e94:	f000 fc56 	bl	15744 <__aeabi_dmul>
   14e98:	4602      	mov	r2, r0
   14e9a:	460b      	mov	r3, r1
   14e9c:	a14e      	add	r1, pc, #312	; (adr r1, 14fd8 <__ieee754_pow+0xa50>)
   14e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
   14ea2:	f000 fa9b 	bl	153dc <__aeabi_dsub>
   14ea6:	4632      	mov	r2, r6
   14ea8:	463b      	mov	r3, r7
   14eaa:	f000 fc4b 	bl	15744 <__aeabi_dmul>
   14eae:	4602      	mov	r2, r0
   14eb0:	460b      	mov	r3, r1
   14eb2:	2000      	movs	r0, #0
   14eb4:	4955      	ldr	r1, [pc, #340]	; (1500c <__ieee754_pow+0xa84>)
   14eb6:	f000 fa91 	bl	153dc <__aeabi_dsub>
   14eba:	4632      	mov	r2, r6
   14ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   14ec0:	463b      	mov	r3, r7
   14ec2:	4630      	mov	r0, r6
   14ec4:	4639      	mov	r1, r7
   14ec6:	f000 fc3d 	bl	15744 <__aeabi_dmul>
   14eca:	4602      	mov	r2, r0
   14ecc:	460b      	mov	r3, r1
   14ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14ed2:	f000 fc37 	bl	15744 <__aeabi_dmul>
   14ed6:	a342      	add	r3, pc, #264	; (adr r3, 14fe0 <__ieee754_pow+0xa58>)
   14ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
   14edc:	f000 fc32 	bl	15744 <__aeabi_dmul>
   14ee0:	4602      	mov	r2, r0
   14ee2:	460b      	mov	r3, r1
   14ee4:	4650      	mov	r0, sl
   14ee6:	4659      	mov	r1, fp
   14ee8:	f000 fa78 	bl	153dc <__aeabi_dsub>
   14eec:	4602      	mov	r2, r0
   14eee:	460b      	mov	r3, r1
   14ef0:	4606      	mov	r6, r0
   14ef2:	460f      	mov	r7, r1
   14ef4:	4640      	mov	r0, r8
   14ef6:	4649      	mov	r1, r9
   14ef8:	f000 fa72 	bl	153e0 <__adddf3>
   14efc:	4642      	mov	r2, r8
   14efe:	464b      	mov	r3, r9
   14f00:	2000      	movs	r0, #0
   14f02:	4682      	mov	sl, r0
   14f04:	468b      	mov	fp, r1
   14f06:	f000 fa69 	bl	153dc <__aeabi_dsub>
   14f0a:	4602      	mov	r2, r0
   14f0c:	460b      	mov	r3, r1
   14f0e:	4630      	mov	r0, r6
   14f10:	4639      	mov	r1, r7
   14f12:	f000 fa63 	bl	153dc <__aeabi_dsub>
   14f16:	4680      	mov	r8, r0
   14f18:	4689      	mov	r9, r1
   14f1a:	e5d4      	b.n	14ac6 <__ieee754_pow+0x53e>
   14f1c:	4642      	mov	r2, r8
   14f1e:	464b      	mov	r3, r9
   14f20:	2000      	movs	r0, #0
   14f22:	4938      	ldr	r1, [pc, #224]	; (15004 <__ieee754_pow+0xa7c>)
   14f24:	f000 fd38 	bl	15998 <__aeabi_ddiv>
   14f28:	f7ff bb70 	b.w	1460c <__ieee754_pow+0x84>
   14f2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   14f30:	a32d      	add	r3, pc, #180	; (adr r3, 14fe8 <__ieee754_pow+0xa60>)
   14f32:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f36:	f000 fc05 	bl	15744 <__aeabi_dmul>
   14f3a:	a32b      	add	r3, pc, #172	; (adr r3, 14fe8 <__ieee754_pow+0xa60>)
   14f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f40:	f000 fc00 	bl	15744 <__aeabi_dmul>
   14f44:	f7ff bb62 	b.w	1460c <__ieee754_pow+0x84>
   14f48:	f1be 0f00 	cmp.w	lr, #0
   14f4c:	f47f ab69 	bne.w	14622 <__ieee754_pow+0x9a>
   14f50:	f1c3 0314 	rsb	r3, r3, #20
   14f54:	fa47 f203 	asr.w	r2, r7, r3
   14f58:	fa02 f303 	lsl.w	r3, r2, r3
   14f5c:	429f      	cmp	r7, r3
   14f5e:	d02a      	beq.n	14fb6 <__ieee754_pow+0xa2e>
   14f60:	4674      	mov	r4, lr
   14f62:	f7ff bb36 	b.w	145d2 <__ieee754_pow+0x4a>
   14f66:	4b29      	ldr	r3, [pc, #164]	; (1500c <__ieee754_pow+0xa84>)
   14f68:	4598      	cmp	r8, r3
   14f6a:	f73f ae0e 	bgt.w	14b8a <__ieee754_pow+0x602>
   14f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14f72:	4692      	mov	sl, r2
   14f74:	4693      	mov	fp, r2
   14f76:	e638      	b.n	14bea <__ieee754_pow+0x662>
   14f78:	4602      	mov	r2, r0
   14f7a:	460b      	mov	r3, r1
   14f7c:	f000 fa2e 	bl	153dc <__aeabi_dsub>
   14f80:	4602      	mov	r2, r0
   14f82:	460b      	mov	r3, r1
   14f84:	f000 fd08 	bl	15998 <__aeabi_ddiv>
   14f88:	f7ff bb40 	b.w	1460c <__ieee754_pow+0x84>
   14f8c:	a318      	add	r3, pc, #96	; (adr r3, 14ff0 <__ieee754_pow+0xa68>)
   14f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f92:	e9cd 2308 	strd	r2, r3, [sp, #32]
   14f96:	a318      	add	r3, pc, #96	; (adr r3, 14ff8 <__ieee754_pow+0xa70>)
   14f98:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f9c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   14fa0:	4b1b      	ldr	r3, [pc, #108]	; (15010 <__ieee754_pow+0xa88>)
   14fa2:	2200      	movs	r2, #0
   14fa4:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   14fa8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14fac:	e401      	b.n	147b2 <__ieee754_pow+0x22a>
   14fae:	465a      	mov	r2, fp
   14fb0:	f000 f98a 	bl	152c8 <scalbn>
   14fb4:	e6c9      	b.n	14d4a <__ieee754_pow+0x7c2>
   14fb6:	f002 0201 	and.w	r2, r2, #1
   14fba:	f1c2 0402 	rsb	r4, r2, #2
   14fbe:	f7ff bb08 	b.w	145d2 <__ieee754_pow+0x4a>
   14fc2:	bf00      	nop
   14fc4:	f3af 8000 	nop.w
   14fc8:	60000000 	.word	0x60000000
   14fcc:	3ff71547 	.word	0x3ff71547
   14fd0:	f85ddf44 	.word	0xf85ddf44
   14fd4:	3e54ae0b 	.word	0x3e54ae0b
   14fd8:	55555555 	.word	0x55555555
   14fdc:	3fd55555 	.word	0x3fd55555
   14fe0:	652b82fe 	.word	0x652b82fe
   14fe4:	3ff71547 	.word	0x3ff71547
   14fe8:	8800759c 	.word	0x8800759c
   14fec:	7e37e43c 	.word	0x7e37e43c
   14ff0:	40000000 	.word	0x40000000
   14ff4:	3fe2b803 	.word	0x3fe2b803
   14ff8:	43cfd006 	.word	0x43cfd006
   14ffc:	3e4cfdeb 	.word	0x3e4cfdeb
   15000:	3feffffe 	.word	0x3feffffe
   15004:	3ff00000 	.word	0x3ff00000
   15008:	3fd00000 	.word	0x3fd00000
   1500c:	3fe00000 	.word	0x3fe00000
   15010:	3ff80000 	.word	0x3ff80000

00015014 <__ieee754_sqrt>:
   15014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15018:	4f5b      	ldr	r7, [pc, #364]	; (15188 <__ieee754_sqrt+0x174>)
   1501a:	438f      	bics	r7, r1
   1501c:	4605      	mov	r5, r0
   1501e:	460c      	mov	r4, r1
   15020:	f000 8092 	beq.w	15148 <__ieee754_sqrt+0x134>
   15024:	2900      	cmp	r1, #0
   15026:	460b      	mov	r3, r1
   15028:	4602      	mov	r2, r0
   1502a:	dd6f      	ble.n	1510c <__ieee754_sqrt+0xf8>
   1502c:	150f      	asrs	r7, r1, #20
   1502e:	d07b      	beq.n	15128 <__ieee754_sqrt+0x114>
   15030:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   15034:	f3c3 0313 	ubfx	r3, r3, #0, #20
   15038:	07f8      	lsls	r0, r7, #31
   1503a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1503e:	d45c      	bmi.n	150fa <__ieee754_sqrt+0xe6>
   15040:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   15044:	2600      	movs	r6, #0
   15046:	440b      	add	r3, r1
   15048:	107f      	asrs	r7, r7, #1
   1504a:	0052      	lsls	r2, r2, #1
   1504c:	46b6      	mov	lr, r6
   1504e:	2016      	movs	r0, #22
   15050:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   15054:	eb0e 0401 	add.w	r4, lr, r1
   15058:	429c      	cmp	r4, r3
   1505a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   1505e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   15062:	dc03      	bgt.n	1506c <__ieee754_sqrt+0x58>
   15064:	1b1b      	subs	r3, r3, r4
   15066:	eb04 0e01 	add.w	lr, r4, r1
   1506a:	440e      	add	r6, r1
   1506c:	3801      	subs	r0, #1
   1506e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   15072:	ea4f 0151 	mov.w	r1, r1, lsr #1
   15076:	d1ed      	bne.n	15054 <__ieee754_sqrt+0x40>
   15078:	4684      	mov	ip, r0
   1507a:	2420      	movs	r4, #32
   1507c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   15080:	e009      	b.n	15096 <__ieee754_sqrt+0x82>
   15082:	d020      	beq.n	150c6 <__ieee754_sqrt+0xb2>
   15084:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   15088:	3c01      	subs	r4, #1
   1508a:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1508e:	442b      	add	r3, r5
   15090:	ea4f 0242 	mov.w	r2, r2, lsl #1
   15094:	d020      	beq.n	150d8 <__ieee754_sqrt+0xc4>
   15096:	4573      	cmp	r3, lr
   15098:	eb01 050c 	add.w	r5, r1, ip
   1509c:	ddf1      	ble.n	15082 <__ieee754_sqrt+0x6e>
   1509e:	2d00      	cmp	r5, #0
   150a0:	eb05 0c01 	add.w	ip, r5, r1
   150a4:	db09      	blt.n	150ba <__ieee754_sqrt+0xa6>
   150a6:	46f0      	mov	r8, lr
   150a8:	4295      	cmp	r5, r2
   150aa:	eba3 030e 	sub.w	r3, r3, lr
   150ae:	d900      	bls.n	150b2 <__ieee754_sqrt+0x9e>
   150b0:	3b01      	subs	r3, #1
   150b2:	1b52      	subs	r2, r2, r5
   150b4:	4408      	add	r0, r1
   150b6:	46c6      	mov	lr, r8
   150b8:	e7e4      	b.n	15084 <__ieee754_sqrt+0x70>
   150ba:	f1bc 0f00 	cmp.w	ip, #0
   150be:	dbf2      	blt.n	150a6 <__ieee754_sqrt+0x92>
   150c0:	f10e 0801 	add.w	r8, lr, #1
   150c4:	e7f0      	b.n	150a8 <__ieee754_sqrt+0x94>
   150c6:	4295      	cmp	r5, r2
   150c8:	d8dc      	bhi.n	15084 <__ieee754_sqrt+0x70>
   150ca:	2d00      	cmp	r5, #0
   150cc:	eb05 0c01 	add.w	ip, r5, r1
   150d0:	db44      	blt.n	1515c <__ieee754_sqrt+0x148>
   150d2:	4698      	mov	r8, r3
   150d4:	2300      	movs	r3, #0
   150d6:	e7ec      	b.n	150b2 <__ieee754_sqrt+0x9e>
   150d8:	4313      	orrs	r3, r2
   150da:	d113      	bne.n	15104 <__ieee754_sqrt+0xf0>
   150dc:	0840      	lsrs	r0, r0, #1
   150de:	1073      	asrs	r3, r6, #1
   150e0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   150e4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   150e8:	07f2      	lsls	r2, r6, #31
   150ea:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   150ee:	bf48      	it	mi
   150f0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   150f4:	4649      	mov	r1, r9
   150f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   150fa:	005b      	lsls	r3, r3, #1
   150fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   15100:	0052      	lsls	r2, r2, #1
   15102:	e79d      	b.n	15040 <__ieee754_sqrt+0x2c>
   15104:	1c41      	adds	r1, r0, #1
   15106:	d02d      	beq.n	15164 <__ieee754_sqrt+0x150>
   15108:	3001      	adds	r0, #1
   1510a:	e7e7      	b.n	150dc <__ieee754_sqrt+0xc8>
   1510c:	4606      	mov	r6, r0
   1510e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   15112:	433e      	orrs	r6, r7
   15114:	d0ef      	beq.n	150f6 <__ieee754_sqrt+0xe2>
   15116:	bb69      	cbnz	r1, 15174 <__ieee754_sqrt+0x160>
   15118:	460f      	mov	r7, r1
   1511a:	0ad3      	lsrs	r3, r2, #11
   1511c:	3f15      	subs	r7, #21
   1511e:	0552      	lsls	r2, r2, #21
   15120:	2b00      	cmp	r3, #0
   15122:	d0fa      	beq.n	1511a <__ieee754_sqrt+0x106>
   15124:	02de      	lsls	r6, r3, #11
   15126:	d420      	bmi.n	1516a <__ieee754_sqrt+0x156>
   15128:	2400      	movs	r4, #0
   1512a:	e000      	b.n	1512e <__ieee754_sqrt+0x11a>
   1512c:	4604      	mov	r4, r0
   1512e:	005b      	lsls	r3, r3, #1
   15130:	02dd      	lsls	r5, r3, #11
   15132:	f104 0001 	add.w	r0, r4, #1
   15136:	d5f9      	bpl.n	1512c <__ieee754_sqrt+0x118>
   15138:	f1c0 0120 	rsb	r1, r0, #32
   1513c:	fa22 f101 	lsr.w	r1, r2, r1
   15140:	430b      	orrs	r3, r1
   15142:	1b3f      	subs	r7, r7, r4
   15144:	4082      	lsls	r2, r0
   15146:	e773      	b.n	15030 <__ieee754_sqrt+0x1c>
   15148:	4602      	mov	r2, r0
   1514a:	460b      	mov	r3, r1
   1514c:	f000 fafa 	bl	15744 <__aeabi_dmul>
   15150:	462a      	mov	r2, r5
   15152:	4623      	mov	r3, r4
   15154:	f000 f944 	bl	153e0 <__adddf3>
   15158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1515c:	f1bc 0f00 	cmp.w	ip, #0
   15160:	daae      	bge.n	150c0 <__ieee754_sqrt+0xac>
   15162:	e7b6      	b.n	150d2 <__ieee754_sqrt+0xbe>
   15164:	3601      	adds	r6, #1
   15166:	4620      	mov	r0, r4
   15168:	e7b9      	b.n	150de <__ieee754_sqrt+0xca>
   1516a:	2000      	movs	r0, #0
   1516c:	2120      	movs	r1, #32
   1516e:	f04f 34ff 	mov.w	r4, #4294967295
   15172:	e7e3      	b.n	1513c <__ieee754_sqrt+0x128>
   15174:	4602      	mov	r2, r0
   15176:	460b      	mov	r3, r1
   15178:	f000 f930 	bl	153dc <__aeabi_dsub>
   1517c:	4602      	mov	r2, r0
   1517e:	460b      	mov	r3, r1
   15180:	f000 fc0a 	bl	15998 <__aeabi_ddiv>
   15184:	e7b7      	b.n	150f6 <__ieee754_sqrt+0xe2>
   15186:	bf00      	nop
   15188:	7ff00000 	.word	0x7ff00000

0001518c <fabs>:
   1518c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15190:	4770      	bx	lr
   15192:	bf00      	nop

00015194 <finite>:
   15194:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   15198:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   1519c:	0fc0      	lsrs	r0, r0, #31
   1519e:	4770      	bx	lr

000151a0 <matherr>:
   151a0:	2000      	movs	r0, #0
   151a2:	4770      	bx	lr

000151a4 <nan>:
   151a4:	2000      	movs	r0, #0
   151a6:	4901      	ldr	r1, [pc, #4]	; (151ac <nan+0x8>)
   151a8:	4770      	bx	lr
   151aa:	bf00      	nop
   151ac:	7ff80000 	.word	0x7ff80000

000151b0 <rint>:
   151b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   151b2:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   151b6:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   151ba:	2e13      	cmp	r6, #19
   151bc:	b083      	sub	sp, #12
   151be:	4602      	mov	r2, r0
   151c0:	460b      	mov	r3, r1
   151c2:	460c      	mov	r4, r1
   151c4:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   151c8:	4607      	mov	r7, r0
   151ca:	dc2e      	bgt.n	1522a <rint+0x7a>
   151cc:	2e00      	cmp	r6, #0
   151ce:	db49      	blt.n	15264 <rint+0xb4>
   151d0:	493a      	ldr	r1, [pc, #232]	; (152bc <rint+0x10c>)
   151d2:	4131      	asrs	r1, r6
   151d4:	ea03 0001 	and.w	r0, r3, r1
   151d8:	4310      	orrs	r0, r2
   151da:	d02b      	beq.n	15234 <rint+0x84>
   151dc:	0849      	lsrs	r1, r1, #1
   151de:	400b      	ands	r3, r1
   151e0:	ea53 0702 	orrs.w	r7, r3, r2
   151e4:	d00c      	beq.n	15200 <rint+0x50>
   151e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   151ea:	2e13      	cmp	r6, #19
   151ec:	ea24 0101 	bic.w	r1, r4, r1
   151f0:	fa43 f406 	asr.w	r4, r3, r6
   151f4:	ea44 0401 	orr.w	r4, r4, r1
   151f8:	bf0c      	ite	eq
   151fa:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   151fe:	2700      	movne	r7, #0
   15200:	4b2f      	ldr	r3, [pc, #188]	; (152c0 <rint+0x110>)
   15202:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   15206:	4621      	mov	r1, r4
   15208:	e9d5 4500 	ldrd	r4, r5, [r5]
   1520c:	4638      	mov	r0, r7
   1520e:	4622      	mov	r2, r4
   15210:	462b      	mov	r3, r5
   15212:	f000 f8e5 	bl	153e0 <__adddf3>
   15216:	e9cd 0100 	strd	r0, r1, [sp]
   1521a:	4622      	mov	r2, r4
   1521c:	462b      	mov	r3, r5
   1521e:	e9dd 0100 	ldrd	r0, r1, [sp]
   15222:	f000 f8db 	bl	153dc <__aeabi_dsub>
   15226:	b003      	add	sp, #12
   15228:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1522a:	2e33      	cmp	r6, #51	; 0x33
   1522c:	dd06      	ble.n	1523c <rint+0x8c>
   1522e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   15232:	d040      	beq.n	152b6 <rint+0x106>
   15234:	4610      	mov	r0, r2
   15236:	4619      	mov	r1, r3
   15238:	b003      	add	sp, #12
   1523a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1523c:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   15240:	f04f 31ff 	mov.w	r1, #4294967295
   15244:	fa21 f10e 	lsr.w	r1, r1, lr
   15248:	4208      	tst	r0, r1
   1524a:	d0f3      	beq.n	15234 <rint+0x84>
   1524c:	0849      	lsrs	r1, r1, #1
   1524e:	4208      	tst	r0, r1
   15250:	d0d6      	beq.n	15200 <rint+0x50>
   15252:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15256:	ea20 0101 	bic.w	r1, r0, r1
   1525a:	fa43 fe0e 	asr.w	lr, r3, lr
   1525e:	ea4e 0701 	orr.w	r7, lr, r1
   15262:	e7cd      	b.n	15200 <rint+0x50>
   15264:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15268:	4301      	orrs	r1, r0
   1526a:	d0e3      	beq.n	15234 <rint+0x84>
   1526c:	f3c3 0113 	ubfx	r1, r3, #0, #20
   15270:	4e13      	ldr	r6, [pc, #76]	; (152c0 <rint+0x110>)
   15272:	4301      	orrs	r1, r0
   15274:	f1c1 0c00 	rsb	ip, r1, #0
   15278:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   1527c:	e9d6 6700 	ldrd	r6, r7, [r6]
   15280:	ea4c 0c01 	orr.w	ip, ip, r1
   15284:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   15288:	0c5c      	lsrs	r4, r3, #17
   1528a:	0464      	lsls	r4, r4, #17
   1528c:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   15290:	ea43 0104 	orr.w	r1, r3, r4
   15294:	4632      	mov	r2, r6
   15296:	463b      	mov	r3, r7
   15298:	f000 f8a2 	bl	153e0 <__adddf3>
   1529c:	e9cd 0100 	strd	r0, r1, [sp]
   152a0:	4632      	mov	r2, r6
   152a2:	463b      	mov	r3, r7
   152a4:	e9dd 0100 	ldrd	r0, r1, [sp]
   152a8:	f000 f898 	bl	153dc <__aeabi_dsub>
   152ac:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   152b0:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   152b4:	e7c0      	b.n	15238 <rint+0x88>
   152b6:	f000 f893 	bl	153e0 <__adddf3>
   152ba:	e7bd      	b.n	15238 <rint+0x88>
   152bc:	000fffff 	.word	0x000fffff
   152c0:	0001bb30 	.word	0x0001bb30
   152c4:	00000000 	.word	0x00000000

000152c8 <scalbn>:
   152c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152ca:	f3c1 560a 	ubfx	r6, r1, #20, #11
   152ce:	4604      	mov	r4, r0
   152d0:	460d      	mov	r5, r1
   152d2:	460b      	mov	r3, r1
   152d4:	4617      	mov	r7, r2
   152d6:	bb0e      	cbnz	r6, 1531c <scalbn+0x54>
   152d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   152dc:	4303      	orrs	r3, r0
   152de:	4686      	mov	lr, r0
   152e0:	d025      	beq.n	1532e <scalbn+0x66>
   152e2:	2200      	movs	r2, #0
   152e4:	4b34      	ldr	r3, [pc, #208]	; (153b8 <scalbn+0xf0>)
   152e6:	f000 fa2d 	bl	15744 <__aeabi_dmul>
   152ea:	4a34      	ldr	r2, [pc, #208]	; (153bc <scalbn+0xf4>)
   152ec:	4297      	cmp	r7, r2
   152ee:	4604      	mov	r4, r0
   152f0:	460d      	mov	r5, r1
   152f2:	460b      	mov	r3, r1
   152f4:	db2a      	blt.n	1534c <scalbn+0x84>
   152f6:	f3c1 560a 	ubfx	r6, r1, #20, #11
   152fa:	3e36      	subs	r6, #54	; 0x36
   152fc:	443e      	add	r6, r7
   152fe:	f240 72fe 	movw	r2, #2046	; 0x7fe
   15302:	4296      	cmp	r6, r2
   15304:	dc28      	bgt.n	15358 <scalbn+0x90>
   15306:	2e00      	cmp	r6, #0
   15308:	dd12      	ble.n	15330 <scalbn+0x68>
   1530a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1530e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   15312:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   15316:	4620      	mov	r0, r4
   15318:	4629      	mov	r1, r5
   1531a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1531c:	f240 72ff 	movw	r2, #2047	; 0x7ff
   15320:	4296      	cmp	r6, r2
   15322:	d1eb      	bne.n	152fc <scalbn+0x34>
   15324:	4602      	mov	r2, r0
   15326:	460b      	mov	r3, r1
   15328:	f000 f85a 	bl	153e0 <__adddf3>
   1532c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1532e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15330:	f116 0f35 	cmn.w	r6, #53	; 0x35
   15334:	da1d      	bge.n	15372 <scalbn+0xaa>
   15336:	f24c 3350 	movw	r3, #50000	; 0xc350
   1533a:	429f      	cmp	r7, r3
   1533c:	4622      	mov	r2, r4
   1533e:	462b      	mov	r3, r5
   15340:	dc25      	bgt.n	1538e <scalbn+0xc6>
   15342:	a119      	add	r1, pc, #100	; (adr r1, 153a8 <scalbn+0xe0>)
   15344:	e9d1 0100 	ldrd	r0, r1, [r1]
   15348:	f000 f83c 	bl	153c4 <copysign>
   1534c:	a316      	add	r3, pc, #88	; (adr r3, 153a8 <scalbn+0xe0>)
   1534e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15352:	f000 f9f7 	bl	15744 <__aeabi_dmul>
   15356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15358:	4622      	mov	r2, r4
   1535a:	462b      	mov	r3, r5
   1535c:	a114      	add	r1, pc, #80	; (adr r1, 153b0 <scalbn+0xe8>)
   1535e:	e9d1 0100 	ldrd	r0, r1, [r1]
   15362:	f000 f82f 	bl	153c4 <copysign>
   15366:	a312      	add	r3, pc, #72	; (adr r3, 153b0 <scalbn+0xe8>)
   15368:	e9d3 2300 	ldrd	r2, r3, [r3]
   1536c:	f000 f9ea 	bl	15744 <__aeabi_dmul>
   15370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15372:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   15376:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1537a:	3636      	adds	r6, #54	; 0x36
   1537c:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   15380:	4620      	mov	r0, r4
   15382:	4629      	mov	r1, r5
   15384:	2200      	movs	r2, #0
   15386:	4b0e      	ldr	r3, [pc, #56]	; (153c0 <scalbn+0xf8>)
   15388:	f000 f9dc 	bl	15744 <__aeabi_dmul>
   1538c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1538e:	a108      	add	r1, pc, #32	; (adr r1, 153b0 <scalbn+0xe8>)
   15390:	e9d1 0100 	ldrd	r0, r1, [r1]
   15394:	f000 f816 	bl	153c4 <copysign>
   15398:	a305      	add	r3, pc, #20	; (adr r3, 153b0 <scalbn+0xe8>)
   1539a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1539e:	f000 f9d1 	bl	15744 <__aeabi_dmul>
   153a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   153a4:	f3af 8000 	nop.w
   153a8:	c2f8f359 	.word	0xc2f8f359
   153ac:	01a56e1f 	.word	0x01a56e1f
   153b0:	8800759c 	.word	0x8800759c
   153b4:	7e37e43c 	.word	0x7e37e43c
   153b8:	43500000 	.word	0x43500000
   153bc:	ffff3cb0 	.word	0xffff3cb0
   153c0:	3c900000 	.word	0x3c900000

000153c4 <copysign>:
   153c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   153c8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   153cc:	ea42 0103 	orr.w	r1, r2, r3
   153d0:	4770      	bx	lr
   153d2:	bf00      	nop

000153d4 <__aeabi_drsub>:
   153d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   153d8:	e002      	b.n	153e0 <__adddf3>
   153da:	bf00      	nop

000153dc <__aeabi_dsub>:
   153dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000153e0 <__adddf3>:
   153e0:	b530      	push	{r4, r5, lr}
   153e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   153e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   153ea:	ea94 0f05 	teq	r4, r5
   153ee:	bf08      	it	eq
   153f0:	ea90 0f02 	teqeq	r0, r2
   153f4:	bf1f      	itttt	ne
   153f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   153fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   153fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   15402:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   15406:	f000 80e2 	beq.w	155ce <__adddf3+0x1ee>
   1540a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1540e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   15412:	bfb8      	it	lt
   15414:	426d      	neglt	r5, r5
   15416:	dd0c      	ble.n	15432 <__adddf3+0x52>
   15418:	442c      	add	r4, r5
   1541a:	ea80 0202 	eor.w	r2, r0, r2
   1541e:	ea81 0303 	eor.w	r3, r1, r3
   15422:	ea82 0000 	eor.w	r0, r2, r0
   15426:	ea83 0101 	eor.w	r1, r3, r1
   1542a:	ea80 0202 	eor.w	r2, r0, r2
   1542e:	ea81 0303 	eor.w	r3, r1, r3
   15432:	2d36      	cmp	r5, #54	; 0x36
   15434:	bf88      	it	hi
   15436:	bd30      	pophi	{r4, r5, pc}
   15438:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1543c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   15440:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   15444:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   15448:	d002      	beq.n	15450 <__adddf3+0x70>
   1544a:	4240      	negs	r0, r0
   1544c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15450:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   15454:	ea4f 3303 	mov.w	r3, r3, lsl #12
   15458:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1545c:	d002      	beq.n	15464 <__adddf3+0x84>
   1545e:	4252      	negs	r2, r2
   15460:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   15464:	ea94 0f05 	teq	r4, r5
   15468:	f000 80a7 	beq.w	155ba <__adddf3+0x1da>
   1546c:	f1a4 0401 	sub.w	r4, r4, #1
   15470:	f1d5 0e20 	rsbs	lr, r5, #32
   15474:	db0d      	blt.n	15492 <__adddf3+0xb2>
   15476:	fa02 fc0e 	lsl.w	ip, r2, lr
   1547a:	fa22 f205 	lsr.w	r2, r2, r5
   1547e:	1880      	adds	r0, r0, r2
   15480:	f141 0100 	adc.w	r1, r1, #0
   15484:	fa03 f20e 	lsl.w	r2, r3, lr
   15488:	1880      	adds	r0, r0, r2
   1548a:	fa43 f305 	asr.w	r3, r3, r5
   1548e:	4159      	adcs	r1, r3
   15490:	e00e      	b.n	154b0 <__adddf3+0xd0>
   15492:	f1a5 0520 	sub.w	r5, r5, #32
   15496:	f10e 0e20 	add.w	lr, lr, #32
   1549a:	2a01      	cmp	r2, #1
   1549c:	fa03 fc0e 	lsl.w	ip, r3, lr
   154a0:	bf28      	it	cs
   154a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   154a6:	fa43 f305 	asr.w	r3, r3, r5
   154aa:	18c0      	adds	r0, r0, r3
   154ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   154b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   154b4:	d507      	bpl.n	154c6 <__adddf3+0xe6>
   154b6:	f04f 0e00 	mov.w	lr, #0
   154ba:	f1dc 0c00 	rsbs	ip, ip, #0
   154be:	eb7e 0000 	sbcs.w	r0, lr, r0
   154c2:	eb6e 0101 	sbc.w	r1, lr, r1
   154c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   154ca:	d31b      	bcc.n	15504 <__adddf3+0x124>
   154cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   154d0:	d30c      	bcc.n	154ec <__adddf3+0x10c>
   154d2:	0849      	lsrs	r1, r1, #1
   154d4:	ea5f 0030 	movs.w	r0, r0, rrx
   154d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   154dc:	f104 0401 	add.w	r4, r4, #1
   154e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   154e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   154e8:	f080 809a 	bcs.w	15620 <__adddf3+0x240>
   154ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   154f0:	bf08      	it	eq
   154f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   154f6:	f150 0000 	adcs.w	r0, r0, #0
   154fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   154fe:	ea41 0105 	orr.w	r1, r1, r5
   15502:	bd30      	pop	{r4, r5, pc}
   15504:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   15508:	4140      	adcs	r0, r0
   1550a:	eb41 0101 	adc.w	r1, r1, r1
   1550e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   15512:	f1a4 0401 	sub.w	r4, r4, #1
   15516:	d1e9      	bne.n	154ec <__adddf3+0x10c>
   15518:	f091 0f00 	teq	r1, #0
   1551c:	bf04      	itt	eq
   1551e:	4601      	moveq	r1, r0
   15520:	2000      	moveq	r0, #0
   15522:	fab1 f381 	clz	r3, r1
   15526:	bf08      	it	eq
   15528:	3320      	addeq	r3, #32
   1552a:	f1a3 030b 	sub.w	r3, r3, #11
   1552e:	f1b3 0220 	subs.w	r2, r3, #32
   15532:	da0c      	bge.n	1554e <__adddf3+0x16e>
   15534:	320c      	adds	r2, #12
   15536:	dd08      	ble.n	1554a <__adddf3+0x16a>
   15538:	f102 0c14 	add.w	ip, r2, #20
   1553c:	f1c2 020c 	rsb	r2, r2, #12
   15540:	fa01 f00c 	lsl.w	r0, r1, ip
   15544:	fa21 f102 	lsr.w	r1, r1, r2
   15548:	e00c      	b.n	15564 <__adddf3+0x184>
   1554a:	f102 0214 	add.w	r2, r2, #20
   1554e:	bfd8      	it	le
   15550:	f1c2 0c20 	rsble	ip, r2, #32
   15554:	fa01 f102 	lsl.w	r1, r1, r2
   15558:	fa20 fc0c 	lsr.w	ip, r0, ip
   1555c:	bfdc      	itt	le
   1555e:	ea41 010c 	orrle.w	r1, r1, ip
   15562:	4090      	lslle	r0, r2
   15564:	1ae4      	subs	r4, r4, r3
   15566:	bfa2      	ittt	ge
   15568:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1556c:	4329      	orrge	r1, r5
   1556e:	bd30      	popge	{r4, r5, pc}
   15570:	ea6f 0404 	mvn.w	r4, r4
   15574:	3c1f      	subs	r4, #31
   15576:	da1c      	bge.n	155b2 <__adddf3+0x1d2>
   15578:	340c      	adds	r4, #12
   1557a:	dc0e      	bgt.n	1559a <__adddf3+0x1ba>
   1557c:	f104 0414 	add.w	r4, r4, #20
   15580:	f1c4 0220 	rsb	r2, r4, #32
   15584:	fa20 f004 	lsr.w	r0, r0, r4
   15588:	fa01 f302 	lsl.w	r3, r1, r2
   1558c:	ea40 0003 	orr.w	r0, r0, r3
   15590:	fa21 f304 	lsr.w	r3, r1, r4
   15594:	ea45 0103 	orr.w	r1, r5, r3
   15598:	bd30      	pop	{r4, r5, pc}
   1559a:	f1c4 040c 	rsb	r4, r4, #12
   1559e:	f1c4 0220 	rsb	r2, r4, #32
   155a2:	fa20 f002 	lsr.w	r0, r0, r2
   155a6:	fa01 f304 	lsl.w	r3, r1, r4
   155aa:	ea40 0003 	orr.w	r0, r0, r3
   155ae:	4629      	mov	r1, r5
   155b0:	bd30      	pop	{r4, r5, pc}
   155b2:	fa21 f004 	lsr.w	r0, r1, r4
   155b6:	4629      	mov	r1, r5
   155b8:	bd30      	pop	{r4, r5, pc}
   155ba:	f094 0f00 	teq	r4, #0
   155be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   155c2:	bf06      	itte	eq
   155c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   155c8:	3401      	addeq	r4, #1
   155ca:	3d01      	subne	r5, #1
   155cc:	e74e      	b.n	1546c <__adddf3+0x8c>
   155ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   155d2:	bf18      	it	ne
   155d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   155d8:	d029      	beq.n	1562e <__adddf3+0x24e>
   155da:	ea94 0f05 	teq	r4, r5
   155de:	bf08      	it	eq
   155e0:	ea90 0f02 	teqeq	r0, r2
   155e4:	d005      	beq.n	155f2 <__adddf3+0x212>
   155e6:	ea54 0c00 	orrs.w	ip, r4, r0
   155ea:	bf04      	itt	eq
   155ec:	4619      	moveq	r1, r3
   155ee:	4610      	moveq	r0, r2
   155f0:	bd30      	pop	{r4, r5, pc}
   155f2:	ea91 0f03 	teq	r1, r3
   155f6:	bf1e      	ittt	ne
   155f8:	2100      	movne	r1, #0
   155fa:	2000      	movne	r0, #0
   155fc:	bd30      	popne	{r4, r5, pc}
   155fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   15602:	d105      	bne.n	15610 <__adddf3+0x230>
   15604:	0040      	lsls	r0, r0, #1
   15606:	4149      	adcs	r1, r1
   15608:	bf28      	it	cs
   1560a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1560e:	bd30      	pop	{r4, r5, pc}
   15610:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   15614:	bf3c      	itt	cc
   15616:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1561a:	bd30      	popcc	{r4, r5, pc}
   1561c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15620:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   15624:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   15628:	f04f 0000 	mov.w	r0, #0
   1562c:	bd30      	pop	{r4, r5, pc}
   1562e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   15632:	bf1a      	itte	ne
   15634:	4619      	movne	r1, r3
   15636:	4610      	movne	r0, r2
   15638:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1563c:	bf1c      	itt	ne
   1563e:	460b      	movne	r3, r1
   15640:	4602      	movne	r2, r0
   15642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   15646:	bf06      	itte	eq
   15648:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1564c:	ea91 0f03 	teqeq	r1, r3
   15650:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   15654:	bd30      	pop	{r4, r5, pc}
   15656:	bf00      	nop

00015658 <__aeabi_ui2d>:
   15658:	f090 0f00 	teq	r0, #0
   1565c:	bf04      	itt	eq
   1565e:	2100      	moveq	r1, #0
   15660:	4770      	bxeq	lr
   15662:	b530      	push	{r4, r5, lr}
   15664:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15668:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1566c:	f04f 0500 	mov.w	r5, #0
   15670:	f04f 0100 	mov.w	r1, #0
   15674:	e750      	b.n	15518 <__adddf3+0x138>
   15676:	bf00      	nop

00015678 <__aeabi_i2d>:
   15678:	f090 0f00 	teq	r0, #0
   1567c:	bf04      	itt	eq
   1567e:	2100      	moveq	r1, #0
   15680:	4770      	bxeq	lr
   15682:	b530      	push	{r4, r5, lr}
   15684:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15688:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1568c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   15690:	bf48      	it	mi
   15692:	4240      	negmi	r0, r0
   15694:	f04f 0100 	mov.w	r1, #0
   15698:	e73e      	b.n	15518 <__adddf3+0x138>
   1569a:	bf00      	nop

0001569c <__aeabi_f2d>:
   1569c:	0042      	lsls	r2, r0, #1
   1569e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   156a2:	ea4f 0131 	mov.w	r1, r1, rrx
   156a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   156aa:	bf1f      	itttt	ne
   156ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   156b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   156b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   156b8:	4770      	bxne	lr
   156ba:	f092 0f00 	teq	r2, #0
   156be:	bf14      	ite	ne
   156c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   156c4:	4770      	bxeq	lr
   156c6:	b530      	push	{r4, r5, lr}
   156c8:	f44f 7460 	mov.w	r4, #896	; 0x380
   156cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   156d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   156d4:	e720      	b.n	15518 <__adddf3+0x138>
   156d6:	bf00      	nop

000156d8 <__aeabi_ul2d>:
   156d8:	ea50 0201 	orrs.w	r2, r0, r1
   156dc:	bf08      	it	eq
   156de:	4770      	bxeq	lr
   156e0:	b530      	push	{r4, r5, lr}
   156e2:	f04f 0500 	mov.w	r5, #0
   156e6:	e00a      	b.n	156fe <__aeabi_l2d+0x16>

000156e8 <__aeabi_l2d>:
   156e8:	ea50 0201 	orrs.w	r2, r0, r1
   156ec:	bf08      	it	eq
   156ee:	4770      	bxeq	lr
   156f0:	b530      	push	{r4, r5, lr}
   156f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   156f6:	d502      	bpl.n	156fe <__aeabi_l2d+0x16>
   156f8:	4240      	negs	r0, r0
   156fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   156fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15702:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15706:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1570a:	f43f aedc 	beq.w	154c6 <__adddf3+0xe6>
   1570e:	f04f 0203 	mov.w	r2, #3
   15712:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   15716:	bf18      	it	ne
   15718:	3203      	addne	r2, #3
   1571a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1571e:	bf18      	it	ne
   15720:	3203      	addne	r2, #3
   15722:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   15726:	f1c2 0320 	rsb	r3, r2, #32
   1572a:	fa00 fc03 	lsl.w	ip, r0, r3
   1572e:	fa20 f002 	lsr.w	r0, r0, r2
   15732:	fa01 fe03 	lsl.w	lr, r1, r3
   15736:	ea40 000e 	orr.w	r0, r0, lr
   1573a:	fa21 f102 	lsr.w	r1, r1, r2
   1573e:	4414      	add	r4, r2
   15740:	e6c1      	b.n	154c6 <__adddf3+0xe6>
   15742:	bf00      	nop

00015744 <__aeabi_dmul>:
   15744:	b570      	push	{r4, r5, r6, lr}
   15746:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1574a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1574e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   15752:	bf1d      	ittte	ne
   15754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   15758:	ea94 0f0c 	teqne	r4, ip
   1575c:	ea95 0f0c 	teqne	r5, ip
   15760:	f000 f8de 	bleq	15920 <__aeabi_dmul+0x1dc>
   15764:	442c      	add	r4, r5
   15766:	ea81 0603 	eor.w	r6, r1, r3
   1576a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1576e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   15772:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   15776:	bf18      	it	ne
   15778:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1577c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   15780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   15784:	d038      	beq.n	157f8 <__aeabi_dmul+0xb4>
   15786:	fba0 ce02 	umull	ip, lr, r0, r2
   1578a:	f04f 0500 	mov.w	r5, #0
   1578e:	fbe1 e502 	umlal	lr, r5, r1, r2
   15792:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   15796:	fbe0 e503 	umlal	lr, r5, r0, r3
   1579a:	f04f 0600 	mov.w	r6, #0
   1579e:	fbe1 5603 	umlal	r5, r6, r1, r3
   157a2:	f09c 0f00 	teq	ip, #0
   157a6:	bf18      	it	ne
   157a8:	f04e 0e01 	orrne.w	lr, lr, #1
   157ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   157b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   157b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   157b8:	d204      	bcs.n	157c4 <__aeabi_dmul+0x80>
   157ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   157be:	416d      	adcs	r5, r5
   157c0:	eb46 0606 	adc.w	r6, r6, r6
   157c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   157c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   157cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   157d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   157d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   157d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   157dc:	bf88      	it	hi
   157de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   157e2:	d81e      	bhi.n	15822 <__aeabi_dmul+0xde>
   157e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   157e8:	bf08      	it	eq
   157ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   157ee:	f150 0000 	adcs.w	r0, r0, #0
   157f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   157f6:	bd70      	pop	{r4, r5, r6, pc}
   157f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   157fc:	ea46 0101 	orr.w	r1, r6, r1
   15800:	ea40 0002 	orr.w	r0, r0, r2
   15804:	ea81 0103 	eor.w	r1, r1, r3
   15808:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1580c:	bfc2      	ittt	gt
   1580e:	ebd4 050c 	rsbsgt	r5, r4, ip
   15812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   15816:	bd70      	popgt	{r4, r5, r6, pc}
   15818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1581c:	f04f 0e00 	mov.w	lr, #0
   15820:	3c01      	subs	r4, #1
   15822:	f300 80ab 	bgt.w	1597c <__aeabi_dmul+0x238>
   15826:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1582a:	bfde      	ittt	le
   1582c:	2000      	movle	r0, #0
   1582e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   15832:	bd70      	pople	{r4, r5, r6, pc}
   15834:	f1c4 0400 	rsb	r4, r4, #0
   15838:	3c20      	subs	r4, #32
   1583a:	da35      	bge.n	158a8 <__aeabi_dmul+0x164>
   1583c:	340c      	adds	r4, #12
   1583e:	dc1b      	bgt.n	15878 <__aeabi_dmul+0x134>
   15840:	f104 0414 	add.w	r4, r4, #20
   15844:	f1c4 0520 	rsb	r5, r4, #32
   15848:	fa00 f305 	lsl.w	r3, r0, r5
   1584c:	fa20 f004 	lsr.w	r0, r0, r4
   15850:	fa01 f205 	lsl.w	r2, r1, r5
   15854:	ea40 0002 	orr.w	r0, r0, r2
   15858:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1585c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15860:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   15864:	fa21 f604 	lsr.w	r6, r1, r4
   15868:	eb42 0106 	adc.w	r1, r2, r6
   1586c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   15870:	bf08      	it	eq
   15872:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   15876:	bd70      	pop	{r4, r5, r6, pc}
   15878:	f1c4 040c 	rsb	r4, r4, #12
   1587c:	f1c4 0520 	rsb	r5, r4, #32
   15880:	fa00 f304 	lsl.w	r3, r0, r4
   15884:	fa20 f005 	lsr.w	r0, r0, r5
   15888:	fa01 f204 	lsl.w	r2, r1, r4
   1588c:	ea40 0002 	orr.w	r0, r0, r2
   15890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   15894:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   15898:	f141 0100 	adc.w	r1, r1, #0
   1589c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   158a0:	bf08      	it	eq
   158a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   158a6:	bd70      	pop	{r4, r5, r6, pc}
   158a8:	f1c4 0520 	rsb	r5, r4, #32
   158ac:	fa00 f205 	lsl.w	r2, r0, r5
   158b0:	ea4e 0e02 	orr.w	lr, lr, r2
   158b4:	fa20 f304 	lsr.w	r3, r0, r4
   158b8:	fa01 f205 	lsl.w	r2, r1, r5
   158bc:	ea43 0302 	orr.w	r3, r3, r2
   158c0:	fa21 f004 	lsr.w	r0, r1, r4
   158c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   158c8:	fa21 f204 	lsr.w	r2, r1, r4
   158cc:	ea20 0002 	bic.w	r0, r0, r2
   158d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   158d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   158d8:	bf08      	it	eq
   158da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   158de:	bd70      	pop	{r4, r5, r6, pc}
   158e0:	f094 0f00 	teq	r4, #0
   158e4:	d10f      	bne.n	15906 <__aeabi_dmul+0x1c2>
   158e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   158ea:	0040      	lsls	r0, r0, #1
   158ec:	eb41 0101 	adc.w	r1, r1, r1
   158f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   158f4:	bf08      	it	eq
   158f6:	3c01      	subeq	r4, #1
   158f8:	d0f7      	beq.n	158ea <__aeabi_dmul+0x1a6>
   158fa:	ea41 0106 	orr.w	r1, r1, r6
   158fe:	f095 0f00 	teq	r5, #0
   15902:	bf18      	it	ne
   15904:	4770      	bxne	lr
   15906:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1590a:	0052      	lsls	r2, r2, #1
   1590c:	eb43 0303 	adc.w	r3, r3, r3
   15910:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   15914:	bf08      	it	eq
   15916:	3d01      	subeq	r5, #1
   15918:	d0f7      	beq.n	1590a <__aeabi_dmul+0x1c6>
   1591a:	ea43 0306 	orr.w	r3, r3, r6
   1591e:	4770      	bx	lr
   15920:	ea94 0f0c 	teq	r4, ip
   15924:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   15928:	bf18      	it	ne
   1592a:	ea95 0f0c 	teqne	r5, ip
   1592e:	d00c      	beq.n	1594a <__aeabi_dmul+0x206>
   15930:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   15934:	bf18      	it	ne
   15936:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1593a:	d1d1      	bne.n	158e0 <__aeabi_dmul+0x19c>
   1593c:	ea81 0103 	eor.w	r1, r1, r3
   15940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   15944:	f04f 0000 	mov.w	r0, #0
   15948:	bd70      	pop	{r4, r5, r6, pc}
   1594a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1594e:	bf06      	itte	eq
   15950:	4610      	moveq	r0, r2
   15952:	4619      	moveq	r1, r3
   15954:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   15958:	d019      	beq.n	1598e <__aeabi_dmul+0x24a>
   1595a:	ea94 0f0c 	teq	r4, ip
   1595e:	d102      	bne.n	15966 <__aeabi_dmul+0x222>
   15960:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   15964:	d113      	bne.n	1598e <__aeabi_dmul+0x24a>
   15966:	ea95 0f0c 	teq	r5, ip
   1596a:	d105      	bne.n	15978 <__aeabi_dmul+0x234>
   1596c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   15970:	bf1c      	itt	ne
   15972:	4610      	movne	r0, r2
   15974:	4619      	movne	r1, r3
   15976:	d10a      	bne.n	1598e <__aeabi_dmul+0x24a>
   15978:	ea81 0103 	eor.w	r1, r1, r3
   1597c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   15980:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   15984:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   15988:	f04f 0000 	mov.w	r0, #0
   1598c:	bd70      	pop	{r4, r5, r6, pc}
   1598e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   15992:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   15996:	bd70      	pop	{r4, r5, r6, pc}

00015998 <__aeabi_ddiv>:
   15998:	b570      	push	{r4, r5, r6, lr}
   1599a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1599e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   159a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   159a6:	bf1d      	ittte	ne
   159a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   159ac:	ea94 0f0c 	teqne	r4, ip
   159b0:	ea95 0f0c 	teqne	r5, ip
   159b4:	f000 f8a7 	bleq	15b06 <__aeabi_ddiv+0x16e>
   159b8:	eba4 0405 	sub.w	r4, r4, r5
   159bc:	ea81 0e03 	eor.w	lr, r1, r3
   159c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   159c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   159c8:	f000 8088 	beq.w	15adc <__aeabi_ddiv+0x144>
   159cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   159d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   159d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   159d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   159dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   159e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   159e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   159e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   159ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   159f0:	429d      	cmp	r5, r3
   159f2:	bf08      	it	eq
   159f4:	4296      	cmpeq	r6, r2
   159f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   159fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   159fe:	d202      	bcs.n	15a06 <__aeabi_ddiv+0x6e>
   15a00:	085b      	lsrs	r3, r3, #1
   15a02:	ea4f 0232 	mov.w	r2, r2, rrx
   15a06:	1ab6      	subs	r6, r6, r2
   15a08:	eb65 0503 	sbc.w	r5, r5, r3
   15a0c:	085b      	lsrs	r3, r3, #1
   15a0e:	ea4f 0232 	mov.w	r2, r2, rrx
   15a12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   15a16:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   15a1a:	ebb6 0e02 	subs.w	lr, r6, r2
   15a1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   15a22:	bf22      	ittt	cs
   15a24:	1ab6      	subcs	r6, r6, r2
   15a26:	4675      	movcs	r5, lr
   15a28:	ea40 000c 	orrcs.w	r0, r0, ip
   15a2c:	085b      	lsrs	r3, r3, #1
   15a2e:	ea4f 0232 	mov.w	r2, r2, rrx
   15a32:	ebb6 0e02 	subs.w	lr, r6, r2
   15a36:	eb75 0e03 	sbcs.w	lr, r5, r3
   15a3a:	bf22      	ittt	cs
   15a3c:	1ab6      	subcs	r6, r6, r2
   15a3e:	4675      	movcs	r5, lr
   15a40:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   15a44:	085b      	lsrs	r3, r3, #1
   15a46:	ea4f 0232 	mov.w	r2, r2, rrx
   15a4a:	ebb6 0e02 	subs.w	lr, r6, r2
   15a4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   15a52:	bf22      	ittt	cs
   15a54:	1ab6      	subcs	r6, r6, r2
   15a56:	4675      	movcs	r5, lr
   15a58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   15a5c:	085b      	lsrs	r3, r3, #1
   15a5e:	ea4f 0232 	mov.w	r2, r2, rrx
   15a62:	ebb6 0e02 	subs.w	lr, r6, r2
   15a66:	eb75 0e03 	sbcs.w	lr, r5, r3
   15a6a:	bf22      	ittt	cs
   15a6c:	1ab6      	subcs	r6, r6, r2
   15a6e:	4675      	movcs	r5, lr
   15a70:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   15a74:	ea55 0e06 	orrs.w	lr, r5, r6
   15a78:	d018      	beq.n	15aac <__aeabi_ddiv+0x114>
   15a7a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   15a7e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   15a82:	ea4f 1606 	mov.w	r6, r6, lsl #4
   15a86:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   15a8a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   15a8e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   15a92:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   15a96:	d1c0      	bne.n	15a1a <__aeabi_ddiv+0x82>
   15a98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   15a9c:	d10b      	bne.n	15ab6 <__aeabi_ddiv+0x11e>
   15a9e:	ea41 0100 	orr.w	r1, r1, r0
   15aa2:	f04f 0000 	mov.w	r0, #0
   15aa6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   15aaa:	e7b6      	b.n	15a1a <__aeabi_ddiv+0x82>
   15aac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   15ab0:	bf04      	itt	eq
   15ab2:	4301      	orreq	r1, r0
   15ab4:	2000      	moveq	r0, #0
   15ab6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   15aba:	bf88      	it	hi
   15abc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   15ac0:	f63f aeaf 	bhi.w	15822 <__aeabi_dmul+0xde>
   15ac4:	ebb5 0c03 	subs.w	ip, r5, r3
   15ac8:	bf04      	itt	eq
   15aca:	ebb6 0c02 	subseq.w	ip, r6, r2
   15ace:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   15ad2:	f150 0000 	adcs.w	r0, r0, #0
   15ad6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   15ada:	bd70      	pop	{r4, r5, r6, pc}
   15adc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   15ae0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   15ae4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   15ae8:	bfc2      	ittt	gt
   15aea:	ebd4 050c 	rsbsgt	r5, r4, ip
   15aee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   15af2:	bd70      	popgt	{r4, r5, r6, pc}
   15af4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   15af8:	f04f 0e00 	mov.w	lr, #0
   15afc:	3c01      	subs	r4, #1
   15afe:	e690      	b.n	15822 <__aeabi_dmul+0xde>
   15b00:	ea45 0e06 	orr.w	lr, r5, r6
   15b04:	e68d      	b.n	15822 <__aeabi_dmul+0xde>
   15b06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   15b0a:	ea94 0f0c 	teq	r4, ip
   15b0e:	bf08      	it	eq
   15b10:	ea95 0f0c 	teqeq	r5, ip
   15b14:	f43f af3b 	beq.w	1598e <__aeabi_dmul+0x24a>
   15b18:	ea94 0f0c 	teq	r4, ip
   15b1c:	d10a      	bne.n	15b34 <__aeabi_ddiv+0x19c>
   15b1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   15b22:	f47f af34 	bne.w	1598e <__aeabi_dmul+0x24a>
   15b26:	ea95 0f0c 	teq	r5, ip
   15b2a:	f47f af25 	bne.w	15978 <__aeabi_dmul+0x234>
   15b2e:	4610      	mov	r0, r2
   15b30:	4619      	mov	r1, r3
   15b32:	e72c      	b.n	1598e <__aeabi_dmul+0x24a>
   15b34:	ea95 0f0c 	teq	r5, ip
   15b38:	d106      	bne.n	15b48 <__aeabi_ddiv+0x1b0>
   15b3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   15b3e:	f43f aefd 	beq.w	1593c <__aeabi_dmul+0x1f8>
   15b42:	4610      	mov	r0, r2
   15b44:	4619      	mov	r1, r3
   15b46:	e722      	b.n	1598e <__aeabi_dmul+0x24a>
   15b48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   15b4c:	bf18      	it	ne
   15b4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   15b52:	f47f aec5 	bne.w	158e0 <__aeabi_dmul+0x19c>
   15b56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   15b5a:	f47f af0d 	bne.w	15978 <__aeabi_dmul+0x234>
   15b5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   15b62:	f47f aeeb 	bne.w	1593c <__aeabi_dmul+0x1f8>
   15b66:	e712      	b.n	1598e <__aeabi_dmul+0x24a>

00015b68 <__gedf2>:
   15b68:	f04f 3cff 	mov.w	ip, #4294967295
   15b6c:	e006      	b.n	15b7c <__cmpdf2+0x4>
   15b6e:	bf00      	nop

00015b70 <__ledf2>:
   15b70:	f04f 0c01 	mov.w	ip, #1
   15b74:	e002      	b.n	15b7c <__cmpdf2+0x4>
   15b76:	bf00      	nop

00015b78 <__cmpdf2>:
   15b78:	f04f 0c01 	mov.w	ip, #1
   15b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
   15b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   15b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   15b88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   15b8c:	bf18      	it	ne
   15b8e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   15b92:	d01b      	beq.n	15bcc <__cmpdf2+0x54>
   15b94:	b001      	add	sp, #4
   15b96:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   15b9a:	bf0c      	ite	eq
   15b9c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   15ba0:	ea91 0f03 	teqne	r1, r3
   15ba4:	bf02      	ittt	eq
   15ba6:	ea90 0f02 	teqeq	r0, r2
   15baa:	2000      	moveq	r0, #0
   15bac:	4770      	bxeq	lr
   15bae:	f110 0f00 	cmn.w	r0, #0
   15bb2:	ea91 0f03 	teq	r1, r3
   15bb6:	bf58      	it	pl
   15bb8:	4299      	cmppl	r1, r3
   15bba:	bf08      	it	eq
   15bbc:	4290      	cmpeq	r0, r2
   15bbe:	bf2c      	ite	cs
   15bc0:	17d8      	asrcs	r0, r3, #31
   15bc2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   15bc6:	f040 0001 	orr.w	r0, r0, #1
   15bca:	4770      	bx	lr
   15bcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   15bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   15bd4:	d102      	bne.n	15bdc <__cmpdf2+0x64>
   15bd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   15bda:	d107      	bne.n	15bec <__cmpdf2+0x74>
   15bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   15be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   15be4:	d1d6      	bne.n	15b94 <__cmpdf2+0x1c>
   15be6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   15bea:	d0d3      	beq.n	15b94 <__cmpdf2+0x1c>
   15bec:	f85d 0b04 	ldr.w	r0, [sp], #4
   15bf0:	4770      	bx	lr
   15bf2:	bf00      	nop

00015bf4 <__aeabi_cdrcmple>:
   15bf4:	4684      	mov	ip, r0
   15bf6:	4610      	mov	r0, r2
   15bf8:	4662      	mov	r2, ip
   15bfa:	468c      	mov	ip, r1
   15bfc:	4619      	mov	r1, r3
   15bfe:	4663      	mov	r3, ip
   15c00:	e000      	b.n	15c04 <__aeabi_cdcmpeq>
   15c02:	bf00      	nop

00015c04 <__aeabi_cdcmpeq>:
   15c04:	b501      	push	{r0, lr}
   15c06:	f7ff ffb7 	bl	15b78 <__cmpdf2>
   15c0a:	2800      	cmp	r0, #0
   15c0c:	bf48      	it	mi
   15c0e:	f110 0f00 	cmnmi.w	r0, #0
   15c12:	bd01      	pop	{r0, pc}

00015c14 <__aeabi_dcmpeq>:
   15c14:	f84d ed08 	str.w	lr, [sp, #-8]!
   15c18:	f7ff fff4 	bl	15c04 <__aeabi_cdcmpeq>
   15c1c:	bf0c      	ite	eq
   15c1e:	2001      	moveq	r0, #1
   15c20:	2000      	movne	r0, #0
   15c22:	f85d fb08 	ldr.w	pc, [sp], #8
   15c26:	bf00      	nop

00015c28 <__aeabi_dcmplt>:
   15c28:	f84d ed08 	str.w	lr, [sp, #-8]!
   15c2c:	f7ff ffea 	bl	15c04 <__aeabi_cdcmpeq>
   15c30:	bf34      	ite	cc
   15c32:	2001      	movcc	r0, #1
   15c34:	2000      	movcs	r0, #0
   15c36:	f85d fb08 	ldr.w	pc, [sp], #8
   15c3a:	bf00      	nop

00015c3c <__aeabi_dcmple>:
   15c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   15c40:	f7ff ffe0 	bl	15c04 <__aeabi_cdcmpeq>
   15c44:	bf94      	ite	ls
   15c46:	2001      	movls	r0, #1
   15c48:	2000      	movhi	r0, #0
   15c4a:	f85d fb08 	ldr.w	pc, [sp], #8
   15c4e:	bf00      	nop

00015c50 <__aeabi_dcmpge>:
   15c50:	f84d ed08 	str.w	lr, [sp, #-8]!
   15c54:	f7ff ffce 	bl	15bf4 <__aeabi_cdrcmple>
   15c58:	bf94      	ite	ls
   15c5a:	2001      	movls	r0, #1
   15c5c:	2000      	movhi	r0, #0
   15c5e:	f85d fb08 	ldr.w	pc, [sp], #8
   15c62:	bf00      	nop

00015c64 <__aeabi_dcmpgt>:
   15c64:	f84d ed08 	str.w	lr, [sp, #-8]!
   15c68:	f7ff ffc4 	bl	15bf4 <__aeabi_cdrcmple>
   15c6c:	bf34      	ite	cc
   15c6e:	2001      	movcc	r0, #1
   15c70:	2000      	movcs	r0, #0
   15c72:	f85d fb08 	ldr.w	pc, [sp], #8
   15c76:	bf00      	nop

00015c78 <__aeabi_dcmpun>:
   15c78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   15c7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   15c80:	d102      	bne.n	15c88 <__aeabi_dcmpun+0x10>
   15c82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   15c86:	d10a      	bne.n	15c9e <__aeabi_dcmpun+0x26>
   15c88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   15c8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   15c90:	d102      	bne.n	15c98 <__aeabi_dcmpun+0x20>
   15c92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   15c96:	d102      	bne.n	15c9e <__aeabi_dcmpun+0x26>
   15c98:	f04f 0000 	mov.w	r0, #0
   15c9c:	4770      	bx	lr
   15c9e:	f04f 0001 	mov.w	r0, #1
   15ca2:	4770      	bx	lr

00015ca4 <__aeabi_d2uiz>:
   15ca4:	004a      	lsls	r2, r1, #1
   15ca6:	d211      	bcs.n	15ccc <__aeabi_d2uiz+0x28>
   15ca8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   15cac:	d211      	bcs.n	15cd2 <__aeabi_d2uiz+0x2e>
   15cae:	d50d      	bpl.n	15ccc <__aeabi_d2uiz+0x28>
   15cb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   15cb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   15cb8:	d40e      	bmi.n	15cd8 <__aeabi_d2uiz+0x34>
   15cba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   15cbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   15cc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   15cc6:	fa23 f002 	lsr.w	r0, r3, r2
   15cca:	4770      	bx	lr
   15ccc:	f04f 0000 	mov.w	r0, #0
   15cd0:	4770      	bx	lr
   15cd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   15cd6:	d102      	bne.n	15cde <__aeabi_d2uiz+0x3a>
   15cd8:	f04f 30ff 	mov.w	r0, #4294967295
   15cdc:	4770      	bx	lr
   15cde:	f04f 0000 	mov.w	r0, #0
   15ce2:	4770      	bx	lr

00015ce4 <__aeabi_f2uiz>:
   15ce4:	0042      	lsls	r2, r0, #1
   15ce6:	d20e      	bcs.n	15d06 <__aeabi_f2uiz+0x22>
   15ce8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   15cec:	d30b      	bcc.n	15d06 <__aeabi_f2uiz+0x22>
   15cee:	f04f 039e 	mov.w	r3, #158	; 0x9e
   15cf2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   15cf6:	d409      	bmi.n	15d0c <__aeabi_f2uiz+0x28>
   15cf8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   15cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   15d00:	fa23 f002 	lsr.w	r0, r3, r2
   15d04:	4770      	bx	lr
   15d06:	f04f 0000 	mov.w	r0, #0
   15d0a:	4770      	bx	lr
   15d0c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   15d10:	d101      	bne.n	15d16 <__aeabi_f2uiz+0x32>
   15d12:	0242      	lsls	r2, r0, #9
   15d14:	d102      	bne.n	15d1c <__aeabi_f2uiz+0x38>
   15d16:	f04f 30ff 	mov.w	r0, #4294967295
   15d1a:	4770      	bx	lr
   15d1c:	f04f 0000 	mov.w	r0, #0
   15d20:	4770      	bx	lr
   15d22:	bf00      	nop

00015d24 <__aeabi_uldivmod>:
   15d24:	b953      	cbnz	r3, 15d3c <__aeabi_uldivmod+0x18>
   15d26:	b94a      	cbnz	r2, 15d3c <__aeabi_uldivmod+0x18>
   15d28:	2900      	cmp	r1, #0
   15d2a:	bf08      	it	eq
   15d2c:	2800      	cmpeq	r0, #0
   15d2e:	bf1c      	itt	ne
   15d30:	f04f 31ff 	movne.w	r1, #4294967295
   15d34:	f04f 30ff 	movne.w	r0, #4294967295
   15d38:	f000 b97a 	b.w	16030 <__aeabi_idiv0>
   15d3c:	f1ad 0c08 	sub.w	ip, sp, #8
   15d40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   15d44:	f000 f806 	bl	15d54 <__udivmoddi4>
   15d48:	f8dd e004 	ldr.w	lr, [sp, #4]
   15d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   15d50:	b004      	add	sp, #16
   15d52:	4770      	bx	lr

00015d54 <__udivmoddi4>:
   15d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15d58:	468c      	mov	ip, r1
   15d5a:	460d      	mov	r5, r1
   15d5c:	4604      	mov	r4, r0
   15d5e:	9e08      	ldr	r6, [sp, #32]
   15d60:	2b00      	cmp	r3, #0
   15d62:	d151      	bne.n	15e08 <__udivmoddi4+0xb4>
   15d64:	428a      	cmp	r2, r1
   15d66:	4617      	mov	r7, r2
   15d68:	d96d      	bls.n	15e46 <__udivmoddi4+0xf2>
   15d6a:	fab2 fe82 	clz	lr, r2
   15d6e:	f1be 0f00 	cmp.w	lr, #0
   15d72:	d00b      	beq.n	15d8c <__udivmoddi4+0x38>
   15d74:	f1ce 0c20 	rsb	ip, lr, #32
   15d78:	fa01 f50e 	lsl.w	r5, r1, lr
   15d7c:	fa20 fc0c 	lsr.w	ip, r0, ip
   15d80:	fa02 f70e 	lsl.w	r7, r2, lr
   15d84:	ea4c 0c05 	orr.w	ip, ip, r5
   15d88:	fa00 f40e 	lsl.w	r4, r0, lr
   15d8c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   15d90:	0c25      	lsrs	r5, r4, #16
   15d92:	fbbc f8fa 	udiv	r8, ip, sl
   15d96:	fa1f f987 	uxth.w	r9, r7
   15d9a:	fb0a cc18 	mls	ip, sl, r8, ip
   15d9e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   15da2:	fb08 f309 	mul.w	r3, r8, r9
   15da6:	42ab      	cmp	r3, r5
   15da8:	d90a      	bls.n	15dc0 <__udivmoddi4+0x6c>
   15daa:	19ed      	adds	r5, r5, r7
   15dac:	f108 32ff 	add.w	r2, r8, #4294967295
   15db0:	f080 8123 	bcs.w	15ffa <__udivmoddi4+0x2a6>
   15db4:	42ab      	cmp	r3, r5
   15db6:	f240 8120 	bls.w	15ffa <__udivmoddi4+0x2a6>
   15dba:	f1a8 0802 	sub.w	r8, r8, #2
   15dbe:	443d      	add	r5, r7
   15dc0:	1aed      	subs	r5, r5, r3
   15dc2:	b2a4      	uxth	r4, r4
   15dc4:	fbb5 f0fa 	udiv	r0, r5, sl
   15dc8:	fb0a 5510 	mls	r5, sl, r0, r5
   15dcc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   15dd0:	fb00 f909 	mul.w	r9, r0, r9
   15dd4:	45a1      	cmp	r9, r4
   15dd6:	d909      	bls.n	15dec <__udivmoddi4+0x98>
   15dd8:	19e4      	adds	r4, r4, r7
   15dda:	f100 33ff 	add.w	r3, r0, #4294967295
   15dde:	f080 810a 	bcs.w	15ff6 <__udivmoddi4+0x2a2>
   15de2:	45a1      	cmp	r9, r4
   15de4:	f240 8107 	bls.w	15ff6 <__udivmoddi4+0x2a2>
   15de8:	3802      	subs	r0, #2
   15dea:	443c      	add	r4, r7
   15dec:	eba4 0409 	sub.w	r4, r4, r9
   15df0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   15df4:	2100      	movs	r1, #0
   15df6:	2e00      	cmp	r6, #0
   15df8:	d061      	beq.n	15ebe <__udivmoddi4+0x16a>
   15dfa:	fa24 f40e 	lsr.w	r4, r4, lr
   15dfe:	2300      	movs	r3, #0
   15e00:	6034      	str	r4, [r6, #0]
   15e02:	6073      	str	r3, [r6, #4]
   15e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15e08:	428b      	cmp	r3, r1
   15e0a:	d907      	bls.n	15e1c <__udivmoddi4+0xc8>
   15e0c:	2e00      	cmp	r6, #0
   15e0e:	d054      	beq.n	15eba <__udivmoddi4+0x166>
   15e10:	2100      	movs	r1, #0
   15e12:	e886 0021 	stmia.w	r6, {r0, r5}
   15e16:	4608      	mov	r0, r1
   15e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15e1c:	fab3 f183 	clz	r1, r3
   15e20:	2900      	cmp	r1, #0
   15e22:	f040 808e 	bne.w	15f42 <__udivmoddi4+0x1ee>
   15e26:	42ab      	cmp	r3, r5
   15e28:	d302      	bcc.n	15e30 <__udivmoddi4+0xdc>
   15e2a:	4282      	cmp	r2, r0
   15e2c:	f200 80fa 	bhi.w	16024 <__udivmoddi4+0x2d0>
   15e30:	1a84      	subs	r4, r0, r2
   15e32:	eb65 0503 	sbc.w	r5, r5, r3
   15e36:	2001      	movs	r0, #1
   15e38:	46ac      	mov	ip, r5
   15e3a:	2e00      	cmp	r6, #0
   15e3c:	d03f      	beq.n	15ebe <__udivmoddi4+0x16a>
   15e3e:	e886 1010 	stmia.w	r6, {r4, ip}
   15e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15e46:	b912      	cbnz	r2, 15e4e <__udivmoddi4+0xfa>
   15e48:	2701      	movs	r7, #1
   15e4a:	fbb7 f7f2 	udiv	r7, r7, r2
   15e4e:	fab7 fe87 	clz	lr, r7
   15e52:	f1be 0f00 	cmp.w	lr, #0
   15e56:	d134      	bne.n	15ec2 <__udivmoddi4+0x16e>
   15e58:	1beb      	subs	r3, r5, r7
   15e5a:	0c3a      	lsrs	r2, r7, #16
   15e5c:	fa1f fc87 	uxth.w	ip, r7
   15e60:	2101      	movs	r1, #1
   15e62:	fbb3 f8f2 	udiv	r8, r3, r2
   15e66:	0c25      	lsrs	r5, r4, #16
   15e68:	fb02 3318 	mls	r3, r2, r8, r3
   15e6c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   15e70:	fb0c f308 	mul.w	r3, ip, r8
   15e74:	42ab      	cmp	r3, r5
   15e76:	d907      	bls.n	15e88 <__udivmoddi4+0x134>
   15e78:	19ed      	adds	r5, r5, r7
   15e7a:	f108 30ff 	add.w	r0, r8, #4294967295
   15e7e:	d202      	bcs.n	15e86 <__udivmoddi4+0x132>
   15e80:	42ab      	cmp	r3, r5
   15e82:	f200 80d1 	bhi.w	16028 <__udivmoddi4+0x2d4>
   15e86:	4680      	mov	r8, r0
   15e88:	1aed      	subs	r5, r5, r3
   15e8a:	b2a3      	uxth	r3, r4
   15e8c:	fbb5 f0f2 	udiv	r0, r5, r2
   15e90:	fb02 5510 	mls	r5, r2, r0, r5
   15e94:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   15e98:	fb0c fc00 	mul.w	ip, ip, r0
   15e9c:	45a4      	cmp	ip, r4
   15e9e:	d907      	bls.n	15eb0 <__udivmoddi4+0x15c>
   15ea0:	19e4      	adds	r4, r4, r7
   15ea2:	f100 33ff 	add.w	r3, r0, #4294967295
   15ea6:	d202      	bcs.n	15eae <__udivmoddi4+0x15a>
   15ea8:	45a4      	cmp	ip, r4
   15eaa:	f200 80b8 	bhi.w	1601e <__udivmoddi4+0x2ca>
   15eae:	4618      	mov	r0, r3
   15eb0:	eba4 040c 	sub.w	r4, r4, ip
   15eb4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   15eb8:	e79d      	b.n	15df6 <__udivmoddi4+0xa2>
   15eba:	4631      	mov	r1, r6
   15ebc:	4630      	mov	r0, r6
   15ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15ec2:	f1ce 0420 	rsb	r4, lr, #32
   15ec6:	fa05 f30e 	lsl.w	r3, r5, lr
   15eca:	fa07 f70e 	lsl.w	r7, r7, lr
   15ece:	fa20 f804 	lsr.w	r8, r0, r4
   15ed2:	0c3a      	lsrs	r2, r7, #16
   15ed4:	fa25 f404 	lsr.w	r4, r5, r4
   15ed8:	ea48 0803 	orr.w	r8, r8, r3
   15edc:	fbb4 f1f2 	udiv	r1, r4, r2
   15ee0:	ea4f 4518 	mov.w	r5, r8, lsr #16
   15ee4:	fb02 4411 	mls	r4, r2, r1, r4
   15ee8:	fa1f fc87 	uxth.w	ip, r7
   15eec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   15ef0:	fb01 f30c 	mul.w	r3, r1, ip
   15ef4:	42ab      	cmp	r3, r5
   15ef6:	fa00 f40e 	lsl.w	r4, r0, lr
   15efa:	d909      	bls.n	15f10 <__udivmoddi4+0x1bc>
   15efc:	19ed      	adds	r5, r5, r7
   15efe:	f101 30ff 	add.w	r0, r1, #4294967295
   15f02:	f080 808a 	bcs.w	1601a <__udivmoddi4+0x2c6>
   15f06:	42ab      	cmp	r3, r5
   15f08:	f240 8087 	bls.w	1601a <__udivmoddi4+0x2c6>
   15f0c:	3902      	subs	r1, #2
   15f0e:	443d      	add	r5, r7
   15f10:	1aeb      	subs	r3, r5, r3
   15f12:	fa1f f588 	uxth.w	r5, r8
   15f16:	fbb3 f0f2 	udiv	r0, r3, r2
   15f1a:	fb02 3310 	mls	r3, r2, r0, r3
   15f1e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   15f22:	fb00 f30c 	mul.w	r3, r0, ip
   15f26:	42ab      	cmp	r3, r5
   15f28:	d907      	bls.n	15f3a <__udivmoddi4+0x1e6>
   15f2a:	19ed      	adds	r5, r5, r7
   15f2c:	f100 38ff 	add.w	r8, r0, #4294967295
   15f30:	d26f      	bcs.n	16012 <__udivmoddi4+0x2be>
   15f32:	42ab      	cmp	r3, r5
   15f34:	d96d      	bls.n	16012 <__udivmoddi4+0x2be>
   15f36:	3802      	subs	r0, #2
   15f38:	443d      	add	r5, r7
   15f3a:	1aeb      	subs	r3, r5, r3
   15f3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   15f40:	e78f      	b.n	15e62 <__udivmoddi4+0x10e>
   15f42:	f1c1 0720 	rsb	r7, r1, #32
   15f46:	fa22 f807 	lsr.w	r8, r2, r7
   15f4a:	408b      	lsls	r3, r1
   15f4c:	fa05 f401 	lsl.w	r4, r5, r1
   15f50:	ea48 0303 	orr.w	r3, r8, r3
   15f54:	fa20 fe07 	lsr.w	lr, r0, r7
   15f58:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   15f5c:	40fd      	lsrs	r5, r7
   15f5e:	ea4e 0e04 	orr.w	lr, lr, r4
   15f62:	fbb5 f9fc 	udiv	r9, r5, ip
   15f66:	ea4f 441e 	mov.w	r4, lr, lsr #16
   15f6a:	fb0c 5519 	mls	r5, ip, r9, r5
   15f6e:	fa1f f883 	uxth.w	r8, r3
   15f72:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   15f76:	fb09 f408 	mul.w	r4, r9, r8
   15f7a:	42ac      	cmp	r4, r5
   15f7c:	fa02 f201 	lsl.w	r2, r2, r1
   15f80:	fa00 fa01 	lsl.w	sl, r0, r1
   15f84:	d908      	bls.n	15f98 <__udivmoddi4+0x244>
   15f86:	18ed      	adds	r5, r5, r3
   15f88:	f109 30ff 	add.w	r0, r9, #4294967295
   15f8c:	d243      	bcs.n	16016 <__udivmoddi4+0x2c2>
   15f8e:	42ac      	cmp	r4, r5
   15f90:	d941      	bls.n	16016 <__udivmoddi4+0x2c2>
   15f92:	f1a9 0902 	sub.w	r9, r9, #2
   15f96:	441d      	add	r5, r3
   15f98:	1b2d      	subs	r5, r5, r4
   15f9a:	fa1f fe8e 	uxth.w	lr, lr
   15f9e:	fbb5 f0fc 	udiv	r0, r5, ip
   15fa2:	fb0c 5510 	mls	r5, ip, r0, r5
   15fa6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   15faa:	fb00 f808 	mul.w	r8, r0, r8
   15fae:	45a0      	cmp	r8, r4
   15fb0:	d907      	bls.n	15fc2 <__udivmoddi4+0x26e>
   15fb2:	18e4      	adds	r4, r4, r3
   15fb4:	f100 35ff 	add.w	r5, r0, #4294967295
   15fb8:	d229      	bcs.n	1600e <__udivmoddi4+0x2ba>
   15fba:	45a0      	cmp	r8, r4
   15fbc:	d927      	bls.n	1600e <__udivmoddi4+0x2ba>
   15fbe:	3802      	subs	r0, #2
   15fc0:	441c      	add	r4, r3
   15fc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   15fc6:	eba4 0408 	sub.w	r4, r4, r8
   15fca:	fba0 8902 	umull	r8, r9, r0, r2
   15fce:	454c      	cmp	r4, r9
   15fd0:	46c6      	mov	lr, r8
   15fd2:	464d      	mov	r5, r9
   15fd4:	d315      	bcc.n	16002 <__udivmoddi4+0x2ae>
   15fd6:	d012      	beq.n	15ffe <__udivmoddi4+0x2aa>
   15fd8:	b156      	cbz	r6, 15ff0 <__udivmoddi4+0x29c>
   15fda:	ebba 030e 	subs.w	r3, sl, lr
   15fde:	eb64 0405 	sbc.w	r4, r4, r5
   15fe2:	fa04 f707 	lsl.w	r7, r4, r7
   15fe6:	40cb      	lsrs	r3, r1
   15fe8:	431f      	orrs	r7, r3
   15fea:	40cc      	lsrs	r4, r1
   15fec:	6037      	str	r7, [r6, #0]
   15fee:	6074      	str	r4, [r6, #4]
   15ff0:	2100      	movs	r1, #0
   15ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15ff6:	4618      	mov	r0, r3
   15ff8:	e6f8      	b.n	15dec <__udivmoddi4+0x98>
   15ffa:	4690      	mov	r8, r2
   15ffc:	e6e0      	b.n	15dc0 <__udivmoddi4+0x6c>
   15ffe:	45c2      	cmp	sl, r8
   16000:	d2ea      	bcs.n	15fd8 <__udivmoddi4+0x284>
   16002:	ebb8 0e02 	subs.w	lr, r8, r2
   16006:	eb69 0503 	sbc.w	r5, r9, r3
   1600a:	3801      	subs	r0, #1
   1600c:	e7e4      	b.n	15fd8 <__udivmoddi4+0x284>
   1600e:	4628      	mov	r0, r5
   16010:	e7d7      	b.n	15fc2 <__udivmoddi4+0x26e>
   16012:	4640      	mov	r0, r8
   16014:	e791      	b.n	15f3a <__udivmoddi4+0x1e6>
   16016:	4681      	mov	r9, r0
   16018:	e7be      	b.n	15f98 <__udivmoddi4+0x244>
   1601a:	4601      	mov	r1, r0
   1601c:	e778      	b.n	15f10 <__udivmoddi4+0x1bc>
   1601e:	3802      	subs	r0, #2
   16020:	443c      	add	r4, r7
   16022:	e745      	b.n	15eb0 <__udivmoddi4+0x15c>
   16024:	4608      	mov	r0, r1
   16026:	e708      	b.n	15e3a <__udivmoddi4+0xe6>
   16028:	f1a8 0802 	sub.w	r8, r8, #2
   1602c:	443d      	add	r5, r7
   1602e:	e72b      	b.n	15e88 <__udivmoddi4+0x134>

00016030 <__aeabi_idiv0>:
   16030:	4770      	bx	lr
   16032:	bf00      	nop

00016034 <ctime>:
   16034:	b508      	push	{r3, lr}
   16036:	f000 f84d 	bl	160d4 <localtime>
   1603a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1603e:	f000 bda3 	b.w	16b88 <asctime>
   16042:	bf00      	nop

00016044 <__cxa_atexit>:
   16044:	4613      	mov	r3, r2
   16046:	460a      	mov	r2, r1
   16048:	4601      	mov	r1, r0
   1604a:	2002      	movs	r0, #2
   1604c:	f000 bd30 	b.w	16ab0 <__register_exitproc>

00016050 <difftime>:
   16050:	b508      	push	{r3, lr}
   16052:	1a40      	subs	r0, r0, r1
   16054:	f7ff fb10 	bl	15678 <__aeabi_i2d>
   16058:	bd08      	pop	{r3, pc}
   1605a:	bf00      	nop

0001605c <__errno>:
   1605c:	4b01      	ldr	r3, [pc, #4]	; (16064 <__errno+0x8>)
   1605e:	6818      	ldr	r0, [r3, #0]
   16060:	4770      	bx	lr
   16062:	bf00      	nop
   16064:	2000019c 	.word	0x2000019c

00016068 <ffs>:
   16068:	b140      	cbz	r0, 1607c <ffs+0x14>
   1606a:	2300      	movs	r3, #0
   1606c:	fa40 f103 	asr.w	r1, r0, r3
   16070:	1c5a      	adds	r2, r3, #1
   16072:	07c9      	lsls	r1, r1, #31
   16074:	4613      	mov	r3, r2
   16076:	d5f9      	bpl.n	1606c <ffs+0x4>
   16078:	4610      	mov	r0, r2
   1607a:	4770      	bx	lr
   1607c:	4602      	mov	r2, r0
   1607e:	4610      	mov	r0, r2
   16080:	4770      	bx	lr
   16082:	bf00      	nop

00016084 <__libc_init_array>:
   16084:	b570      	push	{r4, r5, r6, lr}
   16086:	4e0f      	ldr	r6, [pc, #60]	; (160c4 <__libc_init_array+0x40>)
   16088:	4d0f      	ldr	r5, [pc, #60]	; (160c8 <__libc_init_array+0x44>)
   1608a:	1b76      	subs	r6, r6, r5
   1608c:	10b6      	asrs	r6, r6, #2
   1608e:	bf18      	it	ne
   16090:	2400      	movne	r4, #0
   16092:	d005      	beq.n	160a0 <__libc_init_array+0x1c>
   16094:	3401      	adds	r4, #1
   16096:	f855 3b04 	ldr.w	r3, [r5], #4
   1609a:	4798      	blx	r3
   1609c:	42a6      	cmp	r6, r4
   1609e:	d1f9      	bne.n	16094 <__libc_init_array+0x10>
   160a0:	4e0a      	ldr	r6, [pc, #40]	; (160cc <__libc_init_array+0x48>)
   160a2:	4d0b      	ldr	r5, [pc, #44]	; (160d0 <__libc_init_array+0x4c>)
   160a4:	1b76      	subs	r6, r6, r5
   160a6:	f005 fe99 	bl	1bddc <_init>
   160aa:	10b6      	asrs	r6, r6, #2
   160ac:	bf18      	it	ne
   160ae:	2400      	movne	r4, #0
   160b0:	d006      	beq.n	160c0 <__libc_init_array+0x3c>
   160b2:	3401      	adds	r4, #1
   160b4:	f855 3b04 	ldr.w	r3, [r5], #4
   160b8:	4798      	blx	r3
   160ba:	42a6      	cmp	r6, r4
   160bc:	d1f9      	bne.n	160b2 <__libc_init_array+0x2e>
   160be:	bd70      	pop	{r4, r5, r6, pc}
   160c0:	bd70      	pop	{r4, r5, r6, pc}
   160c2:	bf00      	nop
   160c4:	0001bde8 	.word	0x0001bde8
   160c8:	0001bde8 	.word	0x0001bde8
   160cc:	0001be34 	.word	0x0001be34
   160d0:	0001bde8 	.word	0x0001bde8

000160d4 <localtime>:
   160d4:	4b02      	ldr	r3, [pc, #8]	; (160e0 <localtime+0xc>)
   160d6:	6819      	ldr	r1, [r3, #0]
   160d8:	317c      	adds	r1, #124	; 0x7c
   160da:	f000 b803 	b.w	160e4 <localtime_r>
   160de:	bf00      	nop
   160e0:	2000019c 	.word	0x2000019c

000160e4 <localtime_r>:
   160e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   160e8:	460c      	mov	r4, r1
   160ea:	4607      	mov	r7, r0
   160ec:	f000 fde0 	bl	16cb0 <__gettzinfo>
   160f0:	4621      	mov	r1, r4
   160f2:	4680      	mov	r8, r0
   160f4:	4638      	mov	r0, r7
   160f6:	f000 fddf 	bl	16cb8 <gmtime_r>
   160fa:	6946      	ldr	r6, [r0, #20]
   160fc:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   16100:	07b1      	lsls	r1, r6, #30
   16102:	4604      	mov	r4, r0
   16104:	f000 80b9 	beq.w	1627a <localtime_r+0x196>
   16108:	17f5      	asrs	r5, r6, #31
   1610a:	4b7f      	ldr	r3, [pc, #508]	; (16308 <localtime_r+0x224>)
   1610c:	fb83 2306 	smull	r2, r3, r3, r6
   16110:	ebc5 15e3 	rsb	r5, r5, r3, asr #7
   16114:	f44f 73c8 	mov.w	r3, #400	; 0x190
   16118:	fb03 6515 	mls	r5, r3, r5, r6
   1611c:	2d00      	cmp	r5, #0
   1611e:	bf0c      	ite	eq
   16120:	2530      	moveq	r5, #48	; 0x30
   16122:	2500      	movne	r5, #0
   16124:	4b79      	ldr	r3, [pc, #484]	; (1630c <localtime_r+0x228>)
   16126:	441d      	add	r5, r3
   16128:	f000 fb1a 	bl	16760 <__tz_lock>
   1612c:	f000 fb24 	bl	16778 <_tzset_unlocked>
   16130:	4b77      	ldr	r3, [pc, #476]	; (16310 <localtime_r+0x22c>)
   16132:	681b      	ldr	r3, [r3, #0]
   16134:	b343      	cbz	r3, 16188 <localtime_r+0xa4>
   16136:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1613a:	429e      	cmp	r6, r3
   1613c:	d005      	beq.n	1614a <localtime_r+0x66>
   1613e:	4630      	mov	r0, r6
   16140:	f000 fa4c 	bl	165dc <__tzcalc_limits>
   16144:	2800      	cmp	r0, #0
   16146:	f000 80a6 	beq.w	16296 <localtime_r+0x1b2>
   1614a:	f8d8 3000 	ldr.w	r3, [r8]
   1614e:	b983      	cbnz	r3, 16172 <localtime_r+0x8e>
   16150:	683b      	ldr	r3, [r7, #0]
   16152:	f8d8 201c 	ldr.w	r2, [r8, #28]
   16156:	4293      	cmp	r3, r2
   16158:	f280 80a1 	bge.w	1629e <localtime_r+0x1ba>
   1615c:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   16160:	4293      	cmp	r3, r2
   16162:	bfb4      	ite	lt
   16164:	2301      	movlt	r3, #1
   16166:	2300      	movge	r3, #0
   16168:	6223      	str	r3, [r4, #32]
   1616a:	da0e      	bge.n	1618a <localtime_r+0xa6>
   1616c:	f8d8 603c 	ldr.w	r6, [r8, #60]	; 0x3c
   16170:	e00d      	b.n	1618e <localtime_r+0xaa>
   16172:	683b      	ldr	r3, [r7, #0]
   16174:	f8d8 201c 	ldr.w	r2, [r8, #28]
   16178:	4293      	cmp	r3, r2
   1617a:	db04      	blt.n	16186 <localtime_r+0xa2>
   1617c:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   16180:	4293      	cmp	r3, r2
   16182:	f2c0 808c 	blt.w	1629e <localtime_r+0x1ba>
   16186:	2300      	movs	r3, #0
   16188:	6223      	str	r3, [r4, #32]
   1618a:	f8d8 6020 	ldr.w	r6, [r8, #32]
   1618e:	4a61      	ldr	r2, [pc, #388]	; (16314 <localtime_r+0x230>)
   16190:	4f61      	ldr	r7, [pc, #388]	; (16318 <localtime_r+0x234>)
   16192:	68a1      	ldr	r1, [r4, #8]
   16194:	fb82 3206 	smull	r3, r2, r2, r6
   16198:	4432      	add	r2, r6
   1619a:	17f3      	asrs	r3, r6, #31
   1619c:	12d2      	asrs	r2, r2, #11
   1619e:	1ad0      	subs	r0, r2, r3
   161a0:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   161a4:	fb0e 6010 	mls	r0, lr, r0, r6
   161a8:	fb87 6700 	smull	r6, r7, r7, r0
   161ac:	183e      	adds	r6, r7, r0
   161ae:	17c7      	asrs	r7, r0, #31
   161b0:	ebc7 1766 	rsb	r7, r7, r6, asr #5
   161b4:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
   161b8:	6826      	ldr	r6, [r4, #0]
   161ba:	1ad3      	subs	r3, r2, r3
   161bc:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
   161c0:	6862      	ldr	r2, [r4, #4]
   161c2:	1a30      	subs	r0, r6, r0
   161c4:	1acb      	subs	r3, r1, r3
   161c6:	1bd2      	subs	r2, r2, r7
   161c8:	283b      	cmp	r0, #59	; 0x3b
   161ca:	e884 000d 	stmia.w	r4, {r0, r2, r3}
   161ce:	dd4d      	ble.n	1626c <localtime_r+0x188>
   161d0:	3201      	adds	r2, #1
   161d2:	383c      	subs	r0, #60	; 0x3c
   161d4:	e884 0005 	stmia.w	r4, {r0, r2}
   161d8:	2a3b      	cmp	r2, #59	; 0x3b
   161da:	dd40      	ble.n	1625e <localtime_r+0x17a>
   161dc:	3301      	adds	r3, #1
   161de:	3a3c      	subs	r2, #60	; 0x3c
   161e0:	60a3      	str	r3, [r4, #8]
   161e2:	6062      	str	r2, [r4, #4]
   161e4:	2b17      	cmp	r3, #23
   161e6:	dd1d      	ble.n	16224 <localtime_r+0x140>
   161e8:	69a2      	ldr	r2, [r4, #24]
   161ea:	69e1      	ldr	r1, [r4, #28]
   161ec:	3201      	adds	r2, #1
   161ee:	2a06      	cmp	r2, #6
   161f0:	bfc8      	it	gt
   161f2:	2200      	movgt	r2, #0
   161f4:	61a2      	str	r2, [r4, #24]
   161f6:	68e2      	ldr	r2, [r4, #12]
   161f8:	3101      	adds	r1, #1
   161fa:	61e1      	str	r1, [r4, #28]
   161fc:	3b18      	subs	r3, #24
   161fe:	3201      	adds	r2, #1
   16200:	6921      	ldr	r1, [r4, #16]
   16202:	60a3      	str	r3, [r4, #8]
   16204:	60e2      	str	r2, [r4, #12]
   16206:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1620a:	429a      	cmp	r2, r3
   1620c:	dd05      	ble.n	1621a <localtime_r+0x136>
   1620e:	3101      	adds	r1, #1
   16210:	1ad2      	subs	r2, r2, r3
   16212:	290c      	cmp	r1, #12
   16214:	60e2      	str	r2, [r4, #12]
   16216:	d045      	beq.n	162a4 <localtime_r+0x1c0>
   16218:	6121      	str	r1, [r4, #16]
   1621a:	f000 faa7 	bl	1676c <__tz_unlock>
   1621e:	4620      	mov	r0, r4
   16220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16224:	2b00      	cmp	r3, #0
   16226:	daf8      	bge.n	1621a <localtime_r+0x136>
   16228:	69a2      	ldr	r2, [r4, #24]
   1622a:	69e1      	ldr	r1, [r4, #28]
   1622c:	3a01      	subs	r2, #1
   1622e:	bf48      	it	mi
   16230:	2206      	movmi	r2, #6
   16232:	61a2      	str	r2, [r4, #24]
   16234:	68e2      	ldr	r2, [r4, #12]
   16236:	3901      	subs	r1, #1
   16238:	3318      	adds	r3, #24
   1623a:	3a01      	subs	r2, #1
   1623c:	61e1      	str	r1, [r4, #28]
   1623e:	60a3      	str	r3, [r4, #8]
   16240:	60e2      	str	r2, [r4, #12]
   16242:	2a00      	cmp	r2, #0
   16244:	d1e9      	bne.n	1621a <localtime_r+0x136>
   16246:	6923      	ldr	r3, [r4, #16]
   16248:	3b01      	subs	r3, #1
   1624a:	d432      	bmi.n	162b2 <localtime_r+0x1ce>
   1624c:	6123      	str	r3, [r4, #16]
   1624e:	009b      	lsls	r3, r3, #2
   16250:	58eb      	ldr	r3, [r5, r3]
   16252:	60e3      	str	r3, [r4, #12]
   16254:	f000 fa8a 	bl	1676c <__tz_unlock>
   16258:	4620      	mov	r0, r4
   1625a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1625e:	2a00      	cmp	r2, #0
   16260:	dac0      	bge.n	161e4 <localtime_r+0x100>
   16262:	3b01      	subs	r3, #1
   16264:	323c      	adds	r2, #60	; 0x3c
   16266:	60a3      	str	r3, [r4, #8]
   16268:	6062      	str	r2, [r4, #4]
   1626a:	e7bb      	b.n	161e4 <localtime_r+0x100>
   1626c:	2800      	cmp	r0, #0
   1626e:	dab3      	bge.n	161d8 <localtime_r+0xf4>
   16270:	3a01      	subs	r2, #1
   16272:	303c      	adds	r0, #60	; 0x3c
   16274:	e884 0005 	stmia.w	r4, {r0, r2}
   16278:	e7ae      	b.n	161d8 <localtime_r+0xf4>
   1627a:	4b23      	ldr	r3, [pc, #140]	; (16308 <localtime_r+0x224>)
   1627c:	17f5      	asrs	r5, r6, #31
   1627e:	fb83 2306 	smull	r2, r3, r3, r6
   16282:	ebc5 1363 	rsb	r3, r5, r3, asr #5
   16286:	2264      	movs	r2, #100	; 0x64
   16288:	fb02 6313 	mls	r3, r2, r3, r6
   1628c:	2b00      	cmp	r3, #0
   1628e:	f43f af3c 	beq.w	1610a <localtime_r+0x26>
   16292:	2530      	movs	r5, #48	; 0x30
   16294:	e746      	b.n	16124 <localtime_r+0x40>
   16296:	f04f 33ff 	mov.w	r3, #4294967295
   1629a:	6223      	str	r3, [r4, #32]
   1629c:	e775      	b.n	1618a <localtime_r+0xa6>
   1629e:	2301      	movs	r3, #1
   162a0:	6223      	str	r3, [r4, #32]
   162a2:	e763      	b.n	1616c <localtime_r+0x88>
   162a4:	6963      	ldr	r3, [r4, #20]
   162a6:	2200      	movs	r2, #0
   162a8:	3301      	adds	r3, #1
   162aa:	6163      	str	r3, [r4, #20]
   162ac:	6122      	str	r2, [r4, #16]
   162ae:	61e2      	str	r2, [r4, #28]
   162b0:	e7b3      	b.n	1621a <localtime_r+0x136>
   162b2:	6963      	ldr	r3, [r4, #20]
   162b4:	1e5a      	subs	r2, r3, #1
   162b6:	210b      	movs	r1, #11
   162b8:	6162      	str	r2, [r4, #20]
   162ba:	0792      	lsls	r2, r2, #30
   162bc:	6121      	str	r1, [r4, #16]
   162be:	d013      	beq.n	162e8 <localtime_r+0x204>
   162c0:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   162c4:	17d3      	asrs	r3, r2, #31
   162c6:	4910      	ldr	r1, [pc, #64]	; (16308 <localtime_r+0x224>)
   162c8:	fb81 0102 	smull	r0, r1, r1, r2
   162cc:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
   162d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   162d4:	fb01 2313 	mls	r3, r1, r3, r2
   162d8:	fab3 f383 	clz	r3, r3
   162dc:	095b      	lsrs	r3, r3, #5
   162de:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   162e2:	61e3      	str	r3, [r4, #28]
   162e4:	232c      	movs	r3, #44	; 0x2c
   162e6:	e7b3      	b.n	16250 <localtime_r+0x16c>
   162e8:	4907      	ldr	r1, [pc, #28]	; (16308 <localtime_r+0x224>)
   162ea:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   162ee:	fb81 3102 	smull	r3, r1, r1, r2
   162f2:	17d3      	asrs	r3, r2, #31
   162f4:	ebc3 1161 	rsb	r1, r3, r1, asr #5
   162f8:	2064      	movs	r0, #100	; 0x64
   162fa:	fb00 2111 	mls	r1, r0, r1, r2
   162fe:	2900      	cmp	r1, #0
   16300:	d0e1      	beq.n	162c6 <localtime_r+0x1e2>
   16302:	f240 136d 	movw	r3, #365	; 0x16d
   16306:	e7ec      	b.n	162e2 <localtime_r+0x1fe>
   16308:	51eb851f 	.word	0x51eb851f
   1630c:	0001bb44 	.word	0x0001bb44
   16310:	20003ed0 	.word	0x20003ed0
   16314:	91a2b3c5 	.word	0x91a2b3c5
   16318:	88888889 	.word	0x88888889

0001631c <memcpy>:
   1631c:	4684      	mov	ip, r0
   1631e:	ea41 0300 	orr.w	r3, r1, r0
   16322:	f013 0303 	ands.w	r3, r3, #3
   16326:	d16d      	bne.n	16404 <memcpy+0xe8>
   16328:	3a40      	subs	r2, #64	; 0x40
   1632a:	d341      	bcc.n	163b0 <memcpy+0x94>
   1632c:	f851 3b04 	ldr.w	r3, [r1], #4
   16330:	f840 3b04 	str.w	r3, [r0], #4
   16334:	f851 3b04 	ldr.w	r3, [r1], #4
   16338:	f840 3b04 	str.w	r3, [r0], #4
   1633c:	f851 3b04 	ldr.w	r3, [r1], #4
   16340:	f840 3b04 	str.w	r3, [r0], #4
   16344:	f851 3b04 	ldr.w	r3, [r1], #4
   16348:	f840 3b04 	str.w	r3, [r0], #4
   1634c:	f851 3b04 	ldr.w	r3, [r1], #4
   16350:	f840 3b04 	str.w	r3, [r0], #4
   16354:	f851 3b04 	ldr.w	r3, [r1], #4
   16358:	f840 3b04 	str.w	r3, [r0], #4
   1635c:	f851 3b04 	ldr.w	r3, [r1], #4
   16360:	f840 3b04 	str.w	r3, [r0], #4
   16364:	f851 3b04 	ldr.w	r3, [r1], #4
   16368:	f840 3b04 	str.w	r3, [r0], #4
   1636c:	f851 3b04 	ldr.w	r3, [r1], #4
   16370:	f840 3b04 	str.w	r3, [r0], #4
   16374:	f851 3b04 	ldr.w	r3, [r1], #4
   16378:	f840 3b04 	str.w	r3, [r0], #4
   1637c:	f851 3b04 	ldr.w	r3, [r1], #4
   16380:	f840 3b04 	str.w	r3, [r0], #4
   16384:	f851 3b04 	ldr.w	r3, [r1], #4
   16388:	f840 3b04 	str.w	r3, [r0], #4
   1638c:	f851 3b04 	ldr.w	r3, [r1], #4
   16390:	f840 3b04 	str.w	r3, [r0], #4
   16394:	f851 3b04 	ldr.w	r3, [r1], #4
   16398:	f840 3b04 	str.w	r3, [r0], #4
   1639c:	f851 3b04 	ldr.w	r3, [r1], #4
   163a0:	f840 3b04 	str.w	r3, [r0], #4
   163a4:	f851 3b04 	ldr.w	r3, [r1], #4
   163a8:	f840 3b04 	str.w	r3, [r0], #4
   163ac:	3a40      	subs	r2, #64	; 0x40
   163ae:	d2bd      	bcs.n	1632c <memcpy+0x10>
   163b0:	3230      	adds	r2, #48	; 0x30
   163b2:	d311      	bcc.n	163d8 <memcpy+0xbc>
   163b4:	f851 3b04 	ldr.w	r3, [r1], #4
   163b8:	f840 3b04 	str.w	r3, [r0], #4
   163bc:	f851 3b04 	ldr.w	r3, [r1], #4
   163c0:	f840 3b04 	str.w	r3, [r0], #4
   163c4:	f851 3b04 	ldr.w	r3, [r1], #4
   163c8:	f840 3b04 	str.w	r3, [r0], #4
   163cc:	f851 3b04 	ldr.w	r3, [r1], #4
   163d0:	f840 3b04 	str.w	r3, [r0], #4
   163d4:	3a10      	subs	r2, #16
   163d6:	d2ed      	bcs.n	163b4 <memcpy+0x98>
   163d8:	320c      	adds	r2, #12
   163da:	d305      	bcc.n	163e8 <memcpy+0xcc>
   163dc:	f851 3b04 	ldr.w	r3, [r1], #4
   163e0:	f840 3b04 	str.w	r3, [r0], #4
   163e4:	3a04      	subs	r2, #4
   163e6:	d2f9      	bcs.n	163dc <memcpy+0xc0>
   163e8:	3204      	adds	r2, #4
   163ea:	d008      	beq.n	163fe <memcpy+0xe2>
   163ec:	07d2      	lsls	r2, r2, #31
   163ee:	bf1c      	itt	ne
   163f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   163f4:	f800 3b01 	strbne.w	r3, [r0], #1
   163f8:	d301      	bcc.n	163fe <memcpy+0xe2>
   163fa:	880b      	ldrh	r3, [r1, #0]
   163fc:	8003      	strh	r3, [r0, #0]
   163fe:	4660      	mov	r0, ip
   16400:	4770      	bx	lr
   16402:	bf00      	nop
   16404:	2a08      	cmp	r2, #8
   16406:	d313      	bcc.n	16430 <memcpy+0x114>
   16408:	078b      	lsls	r3, r1, #30
   1640a:	d08d      	beq.n	16328 <memcpy+0xc>
   1640c:	f010 0303 	ands.w	r3, r0, #3
   16410:	d08a      	beq.n	16328 <memcpy+0xc>
   16412:	f1c3 0304 	rsb	r3, r3, #4
   16416:	1ad2      	subs	r2, r2, r3
   16418:	07db      	lsls	r3, r3, #31
   1641a:	bf1c      	itt	ne
   1641c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   16420:	f800 3b01 	strbne.w	r3, [r0], #1
   16424:	d380      	bcc.n	16328 <memcpy+0xc>
   16426:	f831 3b02 	ldrh.w	r3, [r1], #2
   1642a:	f820 3b02 	strh.w	r3, [r0], #2
   1642e:	e77b      	b.n	16328 <memcpy+0xc>
   16430:	3a04      	subs	r2, #4
   16432:	d3d9      	bcc.n	163e8 <memcpy+0xcc>
   16434:	3a01      	subs	r2, #1
   16436:	f811 3b01 	ldrb.w	r3, [r1], #1
   1643a:	f800 3b01 	strb.w	r3, [r0], #1
   1643e:	d2f9      	bcs.n	16434 <memcpy+0x118>
   16440:	780b      	ldrb	r3, [r1, #0]
   16442:	7003      	strb	r3, [r0, #0]
   16444:	784b      	ldrb	r3, [r1, #1]
   16446:	7043      	strb	r3, [r0, #1]
   16448:	788b      	ldrb	r3, [r1, #2]
   1644a:	7083      	strb	r3, [r0, #2]
   1644c:	4660      	mov	r0, ip
   1644e:	4770      	bx	lr

00016450 <memset>:
   16450:	b470      	push	{r4, r5, r6}
   16452:	0786      	lsls	r6, r0, #30
   16454:	d046      	beq.n	164e4 <memset+0x94>
   16456:	1e54      	subs	r4, r2, #1
   16458:	2a00      	cmp	r2, #0
   1645a:	d041      	beq.n	164e0 <memset+0x90>
   1645c:	b2ca      	uxtb	r2, r1
   1645e:	4603      	mov	r3, r0
   16460:	e002      	b.n	16468 <memset+0x18>
   16462:	f114 34ff 	adds.w	r4, r4, #4294967295
   16466:	d33b      	bcc.n	164e0 <memset+0x90>
   16468:	f803 2b01 	strb.w	r2, [r3], #1
   1646c:	079d      	lsls	r5, r3, #30
   1646e:	d1f8      	bne.n	16462 <memset+0x12>
   16470:	2c03      	cmp	r4, #3
   16472:	d92e      	bls.n	164d2 <memset+0x82>
   16474:	b2cd      	uxtb	r5, r1
   16476:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1647a:	2c0f      	cmp	r4, #15
   1647c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   16480:	d919      	bls.n	164b6 <memset+0x66>
   16482:	f103 0210 	add.w	r2, r3, #16
   16486:	4626      	mov	r6, r4
   16488:	3e10      	subs	r6, #16
   1648a:	2e0f      	cmp	r6, #15
   1648c:	f842 5c10 	str.w	r5, [r2, #-16]
   16490:	f842 5c0c 	str.w	r5, [r2, #-12]
   16494:	f842 5c08 	str.w	r5, [r2, #-8]
   16498:	f842 5c04 	str.w	r5, [r2, #-4]
   1649c:	f102 0210 	add.w	r2, r2, #16
   164a0:	d8f2      	bhi.n	16488 <memset+0x38>
   164a2:	f1a4 0210 	sub.w	r2, r4, #16
   164a6:	f022 020f 	bic.w	r2, r2, #15
   164aa:	f004 040f 	and.w	r4, r4, #15
   164ae:	3210      	adds	r2, #16
   164b0:	2c03      	cmp	r4, #3
   164b2:	4413      	add	r3, r2
   164b4:	d90d      	bls.n	164d2 <memset+0x82>
   164b6:	461e      	mov	r6, r3
   164b8:	4622      	mov	r2, r4
   164ba:	3a04      	subs	r2, #4
   164bc:	2a03      	cmp	r2, #3
   164be:	f846 5b04 	str.w	r5, [r6], #4
   164c2:	d8fa      	bhi.n	164ba <memset+0x6a>
   164c4:	1f22      	subs	r2, r4, #4
   164c6:	f022 0203 	bic.w	r2, r2, #3
   164ca:	3204      	adds	r2, #4
   164cc:	4413      	add	r3, r2
   164ce:	f004 0403 	and.w	r4, r4, #3
   164d2:	b12c      	cbz	r4, 164e0 <memset+0x90>
   164d4:	b2c9      	uxtb	r1, r1
   164d6:	441c      	add	r4, r3
   164d8:	f803 1b01 	strb.w	r1, [r3], #1
   164dc:	429c      	cmp	r4, r3
   164de:	d1fb      	bne.n	164d8 <memset+0x88>
   164e0:	bc70      	pop	{r4, r5, r6}
   164e2:	4770      	bx	lr
   164e4:	4614      	mov	r4, r2
   164e6:	4603      	mov	r3, r0
   164e8:	e7c2      	b.n	16470 <memset+0x20>
   164ea:	bf00      	nop
	...

00016500 <strlen>:
   16500:	f890 f000 	pld	[r0]
   16504:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   16508:	f020 0107 	bic.w	r1, r0, #7
   1650c:	f06f 0c00 	mvn.w	ip, #0
   16510:	f010 0407 	ands.w	r4, r0, #7
   16514:	f891 f020 	pld	[r1, #32]
   16518:	f040 8049 	bne.w	165ae <strlen+0xae>
   1651c:	f04f 0400 	mov.w	r4, #0
   16520:	f06f 0007 	mvn.w	r0, #7
   16524:	e9d1 2300 	ldrd	r2, r3, [r1]
   16528:	f891 f040 	pld	[r1, #64]	; 0x40
   1652c:	f100 0008 	add.w	r0, r0, #8
   16530:	fa82 f24c 	uadd8	r2, r2, ip
   16534:	faa4 f28c 	sel	r2, r4, ip
   16538:	fa83 f34c 	uadd8	r3, r3, ip
   1653c:	faa2 f38c 	sel	r3, r2, ip
   16540:	bb4b      	cbnz	r3, 16596 <strlen+0x96>
   16542:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   16546:	fa82 f24c 	uadd8	r2, r2, ip
   1654a:	f100 0008 	add.w	r0, r0, #8
   1654e:	faa4 f28c 	sel	r2, r4, ip
   16552:	fa83 f34c 	uadd8	r3, r3, ip
   16556:	faa2 f38c 	sel	r3, r2, ip
   1655a:	b9e3      	cbnz	r3, 16596 <strlen+0x96>
   1655c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   16560:	fa82 f24c 	uadd8	r2, r2, ip
   16564:	f100 0008 	add.w	r0, r0, #8
   16568:	faa4 f28c 	sel	r2, r4, ip
   1656c:	fa83 f34c 	uadd8	r3, r3, ip
   16570:	faa2 f38c 	sel	r3, r2, ip
   16574:	b97b      	cbnz	r3, 16596 <strlen+0x96>
   16576:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1657a:	f101 0120 	add.w	r1, r1, #32
   1657e:	fa82 f24c 	uadd8	r2, r2, ip
   16582:	f100 0008 	add.w	r0, r0, #8
   16586:	faa4 f28c 	sel	r2, r4, ip
   1658a:	fa83 f34c 	uadd8	r3, r3, ip
   1658e:	faa2 f38c 	sel	r3, r2, ip
   16592:	2b00      	cmp	r3, #0
   16594:	d0c6      	beq.n	16524 <strlen+0x24>
   16596:	2a00      	cmp	r2, #0
   16598:	bf04      	itt	eq
   1659a:	3004      	addeq	r0, #4
   1659c:	461a      	moveq	r2, r3
   1659e:	ba12      	rev	r2, r2
   165a0:	fab2 f282 	clz	r2, r2
   165a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   165a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   165ac:	4770      	bx	lr
   165ae:	e9d1 2300 	ldrd	r2, r3, [r1]
   165b2:	f004 0503 	and.w	r5, r4, #3
   165b6:	f1c4 0000 	rsb	r0, r4, #0
   165ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   165be:	f014 0f04 	tst.w	r4, #4
   165c2:	f891 f040 	pld	[r1, #64]	; 0x40
   165c6:	fa0c f505 	lsl.w	r5, ip, r5
   165ca:	ea62 0205 	orn	r2, r2, r5
   165ce:	bf1c      	itt	ne
   165d0:	ea63 0305 	ornne	r3, r3, r5
   165d4:	4662      	movne	r2, ip
   165d6:	f04f 0400 	mov.w	r4, #0
   165da:	e7a9      	b.n	16530 <strlen+0x30>

000165dc <__tzcalc_limits>:
   165dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165e0:	b083      	sub	sp, #12
   165e2:	4605      	mov	r5, r0
   165e4:	f000 fb64 	bl	16cb0 <__gettzinfo>
   165e8:	f240 73b1 	movw	r3, #1969	; 0x7b1
   165ec:	429d      	cmp	r5, r3
   165ee:	f340 8093 	ble.w	16718 <__tzcalc_limits+0x13c>
   165f2:	4c57      	ldr	r4, [pc, #348]	; (16750 <__tzcalc_limits+0x174>)
   165f4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1675c <__tzcalc_limits+0x180>
   165f8:	6045      	str	r5, [r0, #4]
   165fa:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   165fe:	18ee      	adds	r6, r5, r3
   16600:	f2a5 726d 	subw	r2, r5, #1901	; 0x76d
   16604:	fb84 3102 	smull	r3, r1, r4, r2
   16608:	10b7      	asrs	r7, r6, #2
   1660a:	f240 1e6d 	movw	lr, #365	; 0x16d
   1660e:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
   16612:	f2a5 76b2 	subw	r6, r5, #1970	; 0x7b2
   16616:	17d2      	asrs	r2, r2, #31
   16618:	eb05 030c 	add.w	r3, r5, ip
   1661c:	fb0e 7606 	mla	r6, lr, r6, r7
   16620:	eba2 1261 	sub.w	r2, r2, r1, asr #5
   16624:	17ef      	asrs	r7, r5, #31
   16626:	fb84 c105 	smull	ip, r1, r4, r5
   1662a:	4416      	add	r6, r2
   1662c:	fb84 e403 	smull	lr, r4, r4, r3
   16630:	f44f 72c8 	mov.w	r2, #400	; 0x190
   16634:	ebc7 1ee1 	rsb	lr, r7, r1, asr #7
   16638:	17db      	asrs	r3, r3, #31
   1663a:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
   1663e:	fb02 5e1e 	mls	lr, r2, lr, r5
   16642:	ebc7 1761 	rsb	r7, r7, r1, asr #5
   16646:	2264      	movs	r2, #100	; 0x64
   16648:	441e      	add	r6, r3
   1664a:	f1be 0f00 	cmp.w	lr, #0
   1664e:	bf0c      	ite	eq
   16650:	2330      	moveq	r3, #48	; 0x30
   16652:	2300      	movne	r3, #0
   16654:	fb02 5717 	mls	r7, r2, r7, r5
   16658:	9301      	str	r3, [sp, #4]
   1665a:	f005 0503 	and.w	r5, r5, #3
   1665e:	4604      	mov	r4, r0
   16660:	f100 0c38 	add.w	ip, r0, #56	; 0x38
   16664:	7a23      	ldrb	r3, [r4, #8]
   16666:	2b4a      	cmp	r3, #74	; 0x4a
   16668:	d05a      	beq.n	16720 <__tzcalc_limits+0x144>
   1666a:	2b44      	cmp	r3, #68	; 0x44
   1666c:	d068      	beq.n	16740 <__tzcalc_limits+0x164>
   1666e:	2d00      	cmp	r5, #0
   16670:	d04b      	beq.n	1670a <__tzcalc_limits+0x12e>
   16672:	f8dd 9004 	ldr.w	r9, [sp, #4]
   16676:	68e3      	ldr	r3, [r4, #12]
   16678:	4a36      	ldr	r2, [pc, #216]	; (16754 <__tzcalc_limits+0x178>)
   1667a:	2b01      	cmp	r3, #1
   1667c:	4491      	add	r9, r2
   1667e:	dd62      	ble.n	16746 <__tzcalc_limits+0x16a>
   16680:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
   16684:	f1ab 0b02 	sub.w	fp, fp, #2
   16688:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   1668c:	eb09 0a0b 	add.w	sl, r9, fp
   16690:	f1a9 0304 	sub.w	r3, r9, #4
   16694:	4632      	mov	r2, r6
   16696:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1669a:	459a      	cmp	sl, r3
   1669c:	440a      	add	r2, r1
   1669e:	d1fa      	bne.n	16696 <__tzcalc_limits+0xba>
   166a0:	f10b 0b04 	add.w	fp, fp, #4
   166a4:	4b2c      	ldr	r3, [pc, #176]	; (16758 <__tzcalc_limits+0x17c>)
   166a6:	f859 900b 	ldr.w	r9, [r9, fp]
   166aa:	1d11      	adds	r1, r2, #4
   166ac:	fb83 a301 	smull	sl, r3, r3, r1
   166b0:	440b      	add	r3, r1
   166b2:	ea4f 7ae1 	mov.w	sl, r1, asr #31
   166b6:	ebca 0aa3 	rsb	sl, sl, r3, asr #2
   166ba:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
   166be:	6963      	ldr	r3, [r4, #20]
   166c0:	eba1 010a 	sub.w	r1, r1, sl
   166c4:	1a59      	subs	r1, r3, r1
   166c6:	6923      	ldr	r3, [r4, #16]
   166c8:	f103 33ff 	add.w	r3, r3, #4294967295
   166cc:	bf48      	it	mi
   166ce:	3107      	addmi	r1, #7
   166d0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   166d4:	440b      	add	r3, r1
   166d6:	454b      	cmp	r3, r9
   166d8:	db02      	blt.n	166e0 <__tzcalc_limits+0x104>
   166da:	3b07      	subs	r3, #7
   166dc:	454b      	cmp	r3, r9
   166de:	dafc      	bge.n	166da <__tzcalc_limits+0xfe>
   166e0:	441a      	add	r2, r3
   166e2:	69a1      	ldr	r1, [r4, #24]
   166e4:	6a23      	ldr	r3, [r4, #32]
   166e6:	fb08 1102 	mla	r1, r8, r2, r1
   166ea:	440b      	add	r3, r1
   166ec:	f844 3f1c 	str.w	r3, [r4, #28]!
   166f0:	45a4      	cmp	ip, r4
   166f2:	d1b7      	bne.n	16664 <__tzcalc_limits+0x88>
   166f4:	69c3      	ldr	r3, [r0, #28]
   166f6:	6b82      	ldr	r2, [r0, #56]	; 0x38
   166f8:	4293      	cmp	r3, r2
   166fa:	bfac      	ite	ge
   166fc:	2300      	movge	r3, #0
   166fe:	2301      	movlt	r3, #1
   16700:	6003      	str	r3, [r0, #0]
   16702:	2001      	movs	r0, #1
   16704:	b003      	add	sp, #12
   16706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1670a:	9b01      	ldr	r3, [sp, #4]
   1670c:	2f00      	cmp	r7, #0
   1670e:	bf0c      	ite	eq
   16710:	4699      	moveq	r9, r3
   16712:	f04f 0930 	movne.w	r9, #48	; 0x30
   16716:	e7ae      	b.n	16676 <__tzcalc_limits+0x9a>
   16718:	2000      	movs	r0, #0
   1671a:	b003      	add	sp, #12
   1671c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16720:	6962      	ldr	r2, [r4, #20]
   16722:	18b1      	adds	r1, r6, r2
   16724:	b93d      	cbnz	r5, 16736 <__tzcalc_limits+0x15a>
   16726:	b137      	cbz	r7, 16736 <__tzcalc_limits+0x15a>
   16728:	2a3b      	cmp	r2, #59	; 0x3b
   1672a:	bfd4      	ite	le
   1672c:	2200      	movle	r2, #0
   1672e:	2201      	movgt	r2, #1
   16730:	440a      	add	r2, r1
   16732:	3a01      	subs	r2, #1
   16734:	e7d5      	b.n	166e2 <__tzcalc_limits+0x106>
   16736:	f1be 0f00 	cmp.w	lr, #0
   1673a:	d0f5      	beq.n	16728 <__tzcalc_limits+0x14c>
   1673c:	2200      	movs	r2, #0
   1673e:	e7f7      	b.n	16730 <__tzcalc_limits+0x154>
   16740:	6962      	ldr	r2, [r4, #20]
   16742:	4432      	add	r2, r6
   16744:	e7cd      	b.n	166e2 <__tzcalc_limits+0x106>
   16746:	4632      	mov	r2, r6
   16748:	f04f 0b00 	mov.w	fp, #0
   1674c:	e7aa      	b.n	166a4 <__tzcalc_limits+0xc8>
   1674e:	bf00      	nop
   16750:	51eb851f 	.word	0x51eb851f
   16754:	0001bb44 	.word	0x0001bb44
   16758:	92492493 	.word	0x92492493
   1675c:	00015180 	.word	0x00015180

00016760 <__tz_lock>:
   16760:	4801      	ldr	r0, [pc, #4]	; (16768 <__tz_lock+0x8>)
   16762:	f000 bb93 	b.w	16e8c <__retarget_lock_acquire>
   16766:	bf00      	nop
   16768:	20004130 	.word	0x20004130

0001676c <__tz_unlock>:
   1676c:	4801      	ldr	r0, [pc, #4]	; (16774 <__tz_unlock+0x8>)
   1676e:	f000 bb91 	b.w	16e94 <__retarget_lock_release>
   16772:	bf00      	nop
   16774:	20004130 	.word	0x20004130

00016778 <_tzset_unlocked>:
   16778:	4b01      	ldr	r3, [pc, #4]	; (16780 <_tzset_unlocked+0x8>)
   1677a:	6818      	ldr	r0, [r3, #0]
   1677c:	f000 b802 	b.w	16784 <_tzset_unlocked_r>
   16780:	2000019c 	.word	0x2000019c

00016784 <_tzset_unlocked_r>:
   16784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16788:	b08b      	sub	sp, #44	; 0x2c
   1678a:	4607      	mov	r7, r0
   1678c:	f000 fa90 	bl	16cb0 <__gettzinfo>
   16790:	49bb      	ldr	r1, [pc, #748]	; (16a80 <_tzset_unlocked_r+0x2fc>)
   16792:	4dbc      	ldr	r5, [pc, #752]	; (16a84 <_tzset_unlocked_r+0x300>)
   16794:	4606      	mov	r6, r0
   16796:	4638      	mov	r0, r7
   16798:	f000 fa82 	bl	16ca0 <_getenv_r>
   1679c:	4604      	mov	r4, r0
   1679e:	2800      	cmp	r0, #0
   167a0:	f000 80f7 	beq.w	16992 <_tzset_unlocked_r+0x20e>
   167a4:	6829      	ldr	r1, [r5, #0]
   167a6:	b131      	cbz	r1, 167b6 <_tzset_unlocked_r+0x32>
   167a8:	f000 fefe 	bl	175a8 <strcmp>
   167ac:	b910      	cbnz	r0, 167b4 <_tzset_unlocked_r+0x30>
   167ae:	b00b      	add	sp, #44	; 0x2c
   167b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167b4:	6829      	ldr	r1, [r5, #0]
   167b6:	4608      	mov	r0, r1
   167b8:	f7fa fd76 	bl	112a8 <free>
   167bc:	4620      	mov	r0, r4
   167be:	f7ff fe9f 	bl	16500 <strlen>
   167c2:	1c41      	adds	r1, r0, #1
   167c4:	4638      	mov	r0, r7
   167c6:	f000 fb69 	bl	16e9c <_malloc_r>
   167ca:	6028      	str	r0, [r5, #0]
   167cc:	b110      	cbz	r0, 167d4 <_tzset_unlocked_r+0x50>
   167ce:	4621      	mov	r1, r4
   167d0:	f001 f854 	bl	1787c <strcpy>
   167d4:	7823      	ldrb	r3, [r4, #0]
   167d6:	4aac      	ldr	r2, [pc, #688]	; (16a88 <_tzset_unlocked_r+0x304>)
   167d8:	49ac      	ldr	r1, [pc, #688]	; (16a8c <_tzset_unlocked_r+0x308>)
   167da:	2b3a      	cmp	r3, #58	; 0x3a
   167dc:	bf08      	it	eq
   167de:	3401      	addeq	r4, #1
   167e0:	ad08      	add	r5, sp, #32
   167e2:	462b      	mov	r3, r5
   167e4:	4620      	mov	r0, r4
   167e6:	f000 fe9f 	bl	17528 <siscanf>
   167ea:	2800      	cmp	r0, #0
   167ec:	dddf      	ble.n	167ae <_tzset_unlocked_r+0x2a>
   167ee:	9b08      	ldr	r3, [sp, #32]
   167f0:	5ce2      	ldrb	r2, [r4, r3]
   167f2:	2a2d      	cmp	r2, #45	; 0x2d
   167f4:	441c      	add	r4, r3
   167f6:	f000 80c8 	beq.w	1698a <_tzset_unlocked_r+0x206>
   167fa:	2a2b      	cmp	r2, #43	; 0x2b
   167fc:	bf08      	it	eq
   167fe:	3401      	addeq	r4, #1
   16800:	f04f 0801 	mov.w	r8, #1
   16804:	ab06      	add	r3, sp, #24
   16806:	9302      	str	r3, [sp, #8]
   16808:	f10d 0316 	add.w	r3, sp, #22
   1680c:	2700      	movs	r7, #0
   1680e:	9300      	str	r3, [sp, #0]
   16810:	9503      	str	r5, [sp, #12]
   16812:	9501      	str	r5, [sp, #4]
   16814:	aa05      	add	r2, sp, #20
   16816:	462b      	mov	r3, r5
   16818:	499d      	ldr	r1, [pc, #628]	; (16a90 <_tzset_unlocked_r+0x30c>)
   1681a:	f8ad 7016 	strh.w	r7, [sp, #22]
   1681e:	4620      	mov	r0, r4
   16820:	f8ad 7018 	strh.w	r7, [sp, #24]
   16824:	f000 fe80 	bl	17528 <siscanf>
   16828:	42b8      	cmp	r0, r7
   1682a:	ddc0      	ble.n	167ae <_tzset_unlocked_r+0x2a>
   1682c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   16830:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   16834:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   16838:	9808      	ldr	r0, [sp, #32]
   1683a:	f8df a26c 	ldr.w	sl, [pc, #620]	; 16aa8 <_tzset_unlocked_r+0x324>
   1683e:	f8df 925c 	ldr.w	r9, [pc, #604]	; 16a9c <_tzset_unlocked_r+0x318>
   16842:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   16846:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1684a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1684e:	fb01 3302 	mla	r3, r1, r2, r3
   16852:	fb08 f303 	mul.w	r3, r8, r3
   16856:	6233      	str	r3, [r6, #32]
   16858:	4404      	add	r4, r0
   1685a:	4b8b      	ldr	r3, [pc, #556]	; (16a88 <_tzset_unlocked_r+0x304>)
   1685c:	f8c9 3000 	str.w	r3, [r9]
   16860:	4620      	mov	r0, r4
   16862:	4652      	mov	r2, sl
   16864:	4989      	ldr	r1, [pc, #548]	; (16a8c <_tzset_unlocked_r+0x308>)
   16866:	462b      	mov	r3, r5
   16868:	f000 fe5e 	bl	17528 <siscanf>
   1686c:	42b8      	cmp	r0, r7
   1686e:	f340 8082 	ble.w	16976 <_tzset_unlocked_r+0x1f2>
   16872:	9808      	ldr	r0, [sp, #32]
   16874:	f8c9 a004 	str.w	sl, [r9, #4]
   16878:	5c23      	ldrb	r3, [r4, r0]
   1687a:	2b2d      	cmp	r3, #45	; 0x2d
   1687c:	4404      	add	r4, r0
   1687e:	f000 8095 	beq.w	169ac <_tzset_unlocked_r+0x228>
   16882:	2b2b      	cmp	r3, #43	; 0x2b
   16884:	bf08      	it	eq
   16886:	3401      	addeq	r4, #1
   16888:	f04f 0801 	mov.w	r8, #1
   1688c:	ab06      	add	r3, sp, #24
   1688e:	9302      	str	r3, [sp, #8]
   16890:	f10d 0316 	add.w	r3, sp, #22
   16894:	2700      	movs	r7, #0
   16896:	9300      	str	r3, [sp, #0]
   16898:	9503      	str	r5, [sp, #12]
   1689a:	9501      	str	r5, [sp, #4]
   1689c:	462b      	mov	r3, r5
   1689e:	aa05      	add	r2, sp, #20
   168a0:	497b      	ldr	r1, [pc, #492]	; (16a90 <_tzset_unlocked_r+0x30c>)
   168a2:	f8ad 7014 	strh.w	r7, [sp, #20]
   168a6:	4620      	mov	r0, r4
   168a8:	f8ad 7016 	strh.w	r7, [sp, #22]
   168ac:	f8ad 7018 	strh.w	r7, [sp, #24]
   168b0:	9708      	str	r7, [sp, #32]
   168b2:	f000 fe39 	bl	17528 <siscanf>
   168b6:	42b8      	cmp	r0, r7
   168b8:	dd7c      	ble.n	169b4 <_tzset_unlocked_r+0x230>
   168ba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   168be:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   168c2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   168c6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   168ca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   168ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   168d2:	fb01 3302 	mla	r3, r1, r2, r3
   168d6:	fb08 f303 	mul.w	r3, r8, r3
   168da:	63f3      	str	r3, [r6, #60]	; 0x3c
   168dc:	9b08      	ldr	r3, [sp, #32]
   168de:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 16aac <_tzset_unlocked_r+0x328>
   168e2:	441c      	add	r4, r3
   168e4:	46b0      	mov	r8, r6
   168e6:	f04f 0a00 	mov.w	sl, #0
   168ea:	7827      	ldrb	r7, [r4, #0]
   168ec:	2f2c      	cmp	r7, #44	; 0x2c
   168ee:	bf04      	itt	eq
   168f0:	7867      	ldrbeq	r7, [r4, #1]
   168f2:	3401      	addeq	r4, #1
   168f4:	2f4d      	cmp	r7, #77	; 0x4d
   168f6:	d062      	beq.n	169be <_tzset_unlocked_r+0x23a>
   168f8:	2f4a      	cmp	r7, #74	; 0x4a
   168fa:	bf08      	it	eq
   168fc:	3401      	addeq	r4, #1
   168fe:	f04f 020a 	mov.w	r2, #10
   16902:	a909      	add	r1, sp, #36	; 0x24
   16904:	4620      	mov	r0, r4
   16906:	bf18      	it	ne
   16908:	2744      	movne	r7, #68	; 0x44
   1690a:	f001 f91d 	bl	17b48 <strtoul>
   1690e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   16912:	f8ad 001e 	strh.w	r0, [sp, #30]
   16916:	454c      	cmp	r4, r9
   16918:	f000 809c 	beq.w	16a54 <_tzset_unlocked_r+0x2d0>
   1691c:	b280      	uxth	r0, r0
   1691e:	f8c8 0014 	str.w	r0, [r8, #20]
   16922:	f888 7008 	strb.w	r7, [r8, #8]
   16926:	2400      	movs	r4, #0
   16928:	2302      	movs	r3, #2
   1692a:	f8ad 3014 	strh.w	r3, [sp, #20]
   1692e:	f8ad 4016 	strh.w	r4, [sp, #22]
   16932:	f8ad 4018 	strh.w	r4, [sp, #24]
   16936:	9408      	str	r4, [sp, #32]
   16938:	f899 3000 	ldrb.w	r3, [r9]
   1693c:	2b2f      	cmp	r3, #47	; 0x2f
   1693e:	d06c      	beq.n	16a1a <_tzset_unlocked_r+0x296>
   16940:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   16944:	f10a 0a01 	add.w	sl, sl, #1
   16948:	f1ba 0f02 	cmp.w	sl, #2
   1694c:	f8c8 3018 	str.w	r3, [r8, #24]
   16950:	444c      	add	r4, r9
   16952:	f108 081c 	add.w	r8, r8, #28
   16956:	d1c8      	bne.n	168ea <_tzset_unlocked_r+0x166>
   16958:	6870      	ldr	r0, [r6, #4]
   1695a:	f7ff fe3f 	bl	165dc <__tzcalc_limits>
   1695e:	6a32      	ldr	r2, [r6, #32]
   16960:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   16962:	484c      	ldr	r0, [pc, #304]	; (16a94 <_tzset_unlocked_r+0x310>)
   16964:	494c      	ldr	r1, [pc, #304]	; (16a98 <_tzset_unlocked_r+0x314>)
   16966:	1a9b      	subs	r3, r3, r2
   16968:	bf18      	it	ne
   1696a:	2301      	movne	r3, #1
   1696c:	6003      	str	r3, [r0, #0]
   1696e:	600a      	str	r2, [r1, #0]
   16970:	b00b      	add	sp, #44	; 0x2c
   16972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16976:	4948      	ldr	r1, [pc, #288]	; (16a98 <_tzset_unlocked_r+0x314>)
   16978:	4a46      	ldr	r2, [pc, #280]	; (16a94 <_tzset_unlocked_r+0x310>)
   1697a:	6a30      	ldr	r0, [r6, #32]
   1697c:	f8d9 3000 	ldr.w	r3, [r9]
   16980:	6008      	str	r0, [r1, #0]
   16982:	6017      	str	r7, [r2, #0]
   16984:	f8c9 3004 	str.w	r3, [r9, #4]
   16988:	e711      	b.n	167ae <_tzset_unlocked_r+0x2a>
   1698a:	3401      	adds	r4, #1
   1698c:	f04f 38ff 	mov.w	r8, #4294967295
   16990:	e738      	b.n	16804 <_tzset_unlocked_r+0x80>
   16992:	4b42      	ldr	r3, [pc, #264]	; (16a9c <_tzset_unlocked_r+0x318>)
   16994:	493f      	ldr	r1, [pc, #252]	; (16a94 <_tzset_unlocked_r+0x310>)
   16996:	4e40      	ldr	r6, [pc, #256]	; (16a98 <_tzset_unlocked_r+0x314>)
   16998:	4a41      	ldr	r2, [pc, #260]	; (16aa0 <_tzset_unlocked_r+0x31c>)
   1699a:	6828      	ldr	r0, [r5, #0]
   1699c:	6034      	str	r4, [r6, #0]
   1699e:	600c      	str	r4, [r1, #0]
   169a0:	601a      	str	r2, [r3, #0]
   169a2:	605a      	str	r2, [r3, #4]
   169a4:	f7fa fc80 	bl	112a8 <free>
   169a8:	602c      	str	r4, [r5, #0]
   169aa:	e700      	b.n	167ae <_tzset_unlocked_r+0x2a>
   169ac:	3401      	adds	r4, #1
   169ae:	f04f 38ff 	mov.w	r8, #4294967295
   169b2:	e76b      	b.n	1688c <_tzset_unlocked_r+0x108>
   169b4:	6a33      	ldr	r3, [r6, #32]
   169b6:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   169ba:	63f3      	str	r3, [r6, #60]	; 0x3c
   169bc:	e78e      	b.n	168dc <_tzset_unlocked_r+0x158>
   169be:	f10d 021e 	add.w	r2, sp, #30
   169c2:	ab07      	add	r3, sp, #28
   169c4:	9202      	str	r2, [sp, #8]
   169c6:	9300      	str	r3, [sp, #0]
   169c8:	9503      	str	r5, [sp, #12]
   169ca:	9501      	str	r5, [sp, #4]
   169cc:	462b      	mov	r3, r5
   169ce:	f10d 021a 	add.w	r2, sp, #26
   169d2:	4659      	mov	r1, fp
   169d4:	4620      	mov	r0, r4
   169d6:	f000 fda7 	bl	17528 <siscanf>
   169da:	2803      	cmp	r0, #3
   169dc:	f47f aee7 	bne.w	167ae <_tzset_unlocked_r+0x2a>
   169e0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   169e4:	1e5a      	subs	r2, r3, #1
   169e6:	2a0b      	cmp	r2, #11
   169e8:	f63f aee1 	bhi.w	167ae <_tzset_unlocked_r+0x2a>
   169ec:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   169f0:	1e51      	subs	r1, r2, #1
   169f2:	2904      	cmp	r1, #4
   169f4:	f63f aedb 	bhi.w	167ae <_tzset_unlocked_r+0x2a>
   169f8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   169fc:	2906      	cmp	r1, #6
   169fe:	f63f aed6 	bhi.w	167ae <_tzset_unlocked_r+0x2a>
   16a02:	f888 7008 	strb.w	r7, [r8, #8]
   16a06:	f8c8 300c 	str.w	r3, [r8, #12]
   16a0a:	f8c8 2010 	str.w	r2, [r8, #16]
   16a0e:	f8c8 1014 	str.w	r1, [r8, #20]
   16a12:	9b08      	ldr	r3, [sp, #32]
   16a14:	eb04 0903 	add.w	r9, r4, r3
   16a18:	e785      	b.n	16926 <_tzset_unlocked_r+0x1a2>
   16a1a:	ab06      	add	r3, sp, #24
   16a1c:	9302      	str	r3, [sp, #8]
   16a1e:	f10d 0316 	add.w	r3, sp, #22
   16a22:	9300      	str	r3, [sp, #0]
   16a24:	aa05      	add	r2, sp, #20
   16a26:	462b      	mov	r3, r5
   16a28:	491e      	ldr	r1, [pc, #120]	; (16aa4 <_tzset_unlocked_r+0x320>)
   16a2a:	9503      	str	r5, [sp, #12]
   16a2c:	9501      	str	r5, [sp, #4]
   16a2e:	4648      	mov	r0, r9
   16a30:	f000 fd7a 	bl	17528 <siscanf>
   16a34:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   16a38:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   16a3c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   16a40:	9c08      	ldr	r4, [sp, #32]
   16a42:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   16a46:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   16a4a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   16a4e:	fb01 2303 	mla	r3, r1, r3, r2
   16a52:	e777      	b.n	16944 <_tzset_unlocked_r+0x1c0>
   16a54:	f1ba 0f00 	cmp.w	sl, #0
   16a58:	d009      	beq.n	16a6e <_tzset_unlocked_r+0x2ea>
   16a5a:	224d      	movs	r2, #77	; 0x4d
   16a5c:	230b      	movs	r3, #11
   16a5e:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
   16a62:	62b3      	str	r3, [r6, #40]	; 0x28
   16a64:	2201      	movs	r2, #1
   16a66:	2300      	movs	r3, #0
   16a68:	62f2      	str	r2, [r6, #44]	; 0x2c
   16a6a:	6333      	str	r3, [r6, #48]	; 0x30
   16a6c:	e75b      	b.n	16926 <_tzset_unlocked_r+0x1a2>
   16a6e:	234d      	movs	r3, #77	; 0x4d
   16a70:	2203      	movs	r2, #3
   16a72:	7233      	strb	r3, [r6, #8]
   16a74:	2302      	movs	r3, #2
   16a76:	f8c6 a014 	str.w	sl, [r6, #20]
   16a7a:	60f2      	str	r2, [r6, #12]
   16a7c:	6133      	str	r3, [r6, #16]
   16a7e:	e752      	b.n	16926 <_tzset_unlocked_r+0x1a2>
   16a80:	0001bba4 	.word	0x0001bba4
   16a84:	20003ecc 	.word	0x20003ecc
   16a88:	20003ec0 	.word	0x20003ec0
   16a8c:	0001bbac 	.word	0x0001bbac
   16a90:	0001bbbc 	.word	0x0001bbbc
   16a94:	20003ed0 	.word	0x20003ed0
   16a98:	20003ed4 	.word	0x20003ed4
   16a9c:	200005c8 	.word	0x200005c8
   16aa0:	0001bba8 	.word	0x0001bba8
   16aa4:	0001bbe4 	.word	0x0001bbe4
   16aa8:	20003eb4 	.word	0x20003eb4
   16aac:	0001bbd0 	.word	0x0001bbd0

00016ab0 <__register_exitproc>:
   16ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16ab4:	4d2c      	ldr	r5, [pc, #176]	; (16b68 <__register_exitproc+0xb8>)
   16ab6:	4606      	mov	r6, r0
   16ab8:	6828      	ldr	r0, [r5, #0]
   16aba:	4698      	mov	r8, r3
   16abc:	460f      	mov	r7, r1
   16abe:	4691      	mov	r9, r2
   16ac0:	f000 f9e6 	bl	16e90 <__retarget_lock_acquire_recursive>
   16ac4:	4b29      	ldr	r3, [pc, #164]	; (16b6c <__register_exitproc+0xbc>)
   16ac6:	681c      	ldr	r4, [r3, #0]
   16ac8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   16acc:	2b00      	cmp	r3, #0
   16ace:	d03e      	beq.n	16b4e <__register_exitproc+0x9e>
   16ad0:	685a      	ldr	r2, [r3, #4]
   16ad2:	2a1f      	cmp	r2, #31
   16ad4:	dc1c      	bgt.n	16b10 <__register_exitproc+0x60>
   16ad6:	f102 0e01 	add.w	lr, r2, #1
   16ada:	b176      	cbz	r6, 16afa <__register_exitproc+0x4a>
   16adc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   16ae0:	2401      	movs	r4, #1
   16ae2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   16ae6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   16aea:	4094      	lsls	r4, r2
   16aec:	4320      	orrs	r0, r4
   16aee:	2e02      	cmp	r6, #2
   16af0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   16af4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   16af8:	d023      	beq.n	16b42 <__register_exitproc+0x92>
   16afa:	3202      	adds	r2, #2
   16afc:	f8c3 e004 	str.w	lr, [r3, #4]
   16b00:	6828      	ldr	r0, [r5, #0]
   16b02:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   16b06:	f000 f9c7 	bl	16e98 <__retarget_lock_release_recursive>
   16b0a:	2000      	movs	r0, #0
   16b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16b10:	4b17      	ldr	r3, [pc, #92]	; (16b70 <__register_exitproc+0xc0>)
   16b12:	b30b      	cbz	r3, 16b58 <__register_exitproc+0xa8>
   16b14:	f44f 70c8 	mov.w	r0, #400	; 0x190
   16b18:	f7fa fbbc 	bl	11294 <malloc>
   16b1c:	4603      	mov	r3, r0
   16b1e:	b1d8      	cbz	r0, 16b58 <__register_exitproc+0xa8>
   16b20:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   16b24:	6002      	str	r2, [r0, #0]
   16b26:	2100      	movs	r1, #0
   16b28:	6041      	str	r1, [r0, #4]
   16b2a:	460a      	mov	r2, r1
   16b2c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   16b30:	f04f 0e01 	mov.w	lr, #1
   16b34:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   16b38:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   16b3c:	2e00      	cmp	r6, #0
   16b3e:	d0dc      	beq.n	16afa <__register_exitproc+0x4a>
   16b40:	e7cc      	b.n	16adc <__register_exitproc+0x2c>
   16b42:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   16b46:	430c      	orrs	r4, r1
   16b48:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   16b4c:	e7d5      	b.n	16afa <__register_exitproc+0x4a>
   16b4e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   16b52:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   16b56:	e7bb      	b.n	16ad0 <__register_exitproc+0x20>
   16b58:	6828      	ldr	r0, [r5, #0]
   16b5a:	f000 f99d 	bl	16e98 <__retarget_lock_release_recursive>
   16b5e:	f04f 30ff 	mov.w	r0, #4294967295
   16b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16b66:	bf00      	nop
   16b68:	200005d0 	.word	0x200005d0
   16b6c:	0001bb40 	.word	0x0001bb40
   16b70:	00011295 	.word	0x00011295

00016b74 <register_fini>:
   16b74:	4b02      	ldr	r3, [pc, #8]	; (16b80 <register_fini+0xc>)
   16b76:	b113      	cbz	r3, 16b7e <register_fini+0xa>
   16b78:	4802      	ldr	r0, [pc, #8]	; (16b84 <register_fini+0x10>)
   16b7a:	f000 b833 	b.w	16be4 <atexit>
   16b7e:	4770      	bx	lr
   16b80:	00000000 	.word	0x00000000
   16b84:	00016bf1 	.word	0x00016bf1

00016b88 <asctime>:
   16b88:	4b02      	ldr	r3, [pc, #8]	; (16b94 <asctime+0xc>)
   16b8a:	6819      	ldr	r1, [r3, #0]
   16b8c:	3160      	adds	r1, #96	; 0x60
   16b8e:	f000 b803 	b.w	16b98 <asctime_r>
   16b92:	bf00      	nop
   16b94:	2000019c 	.word	0x2000019c

00016b98 <asctime_r>:
   16b98:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b9a:	6946      	ldr	r6, [r0, #20]
   16b9c:	6807      	ldr	r7, [r0, #0]
   16b9e:	6905      	ldr	r5, [r0, #16]
   16ba0:	6984      	ldr	r4, [r0, #24]
   16ba2:	4b0d      	ldr	r3, [pc, #52]	; (16bd8 <asctime_r+0x40>)
   16ba4:	4a0d      	ldr	r2, [pc, #52]	; (16bdc <asctime_r+0x44>)
   16ba6:	b087      	sub	sp, #28
   16ba8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   16bac:	9703      	str	r7, [sp, #12]
   16bae:	460f      	mov	r7, r1
   16bb0:	6841      	ldr	r1, [r0, #4]
   16bb2:	9604      	str	r6, [sp, #16]
   16bb4:	6886      	ldr	r6, [r0, #8]
   16bb6:	68c0      	ldr	r0, [r0, #12]
   16bb8:	9102      	str	r1, [sp, #8]
   16bba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   16bbe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   16bc2:	e88d 0041 	stmia.w	sp, {r0, r6}
   16bc6:	442b      	add	r3, r5
   16bc8:	4422      	add	r2, r4
   16bca:	4638      	mov	r0, r7
   16bcc:	4904      	ldr	r1, [pc, #16]	; (16be0 <asctime_r+0x48>)
   16bce:	f000 fc85 	bl	174dc <siprintf>
   16bd2:	4638      	mov	r0, r7
   16bd4:	b007      	add	sp, #28
   16bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16bd8:	0001bc30 	.word	0x0001bc30
   16bdc:	0001bc18 	.word	0x0001bc18
   16be0:	0001bbf8 	.word	0x0001bbf8

00016be4 <atexit>:
   16be4:	2300      	movs	r3, #0
   16be6:	4601      	mov	r1, r0
   16be8:	461a      	mov	r2, r3
   16bea:	4618      	mov	r0, r3
   16bec:	f7ff bf60 	b.w	16ab0 <__register_exitproc>

00016bf0 <__libc_fini_array>:
   16bf0:	b538      	push	{r3, r4, r5, lr}
   16bf2:	4c0a      	ldr	r4, [pc, #40]	; (16c1c <__libc_fini_array+0x2c>)
   16bf4:	4d0a      	ldr	r5, [pc, #40]	; (16c20 <__libc_fini_array+0x30>)
   16bf6:	1b64      	subs	r4, r4, r5
   16bf8:	10a4      	asrs	r4, r4, #2
   16bfa:	d00a      	beq.n	16c12 <__libc_fini_array+0x22>
   16bfc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   16c00:	3b01      	subs	r3, #1
   16c02:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   16c06:	3c01      	subs	r4, #1
   16c08:	f855 3904 	ldr.w	r3, [r5], #-4
   16c0c:	4798      	blx	r3
   16c0e:	2c00      	cmp	r4, #0
   16c10:	d1f9      	bne.n	16c06 <__libc_fini_array+0x16>
   16c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16c16:	f005 b90d 	b.w	1be34 <_fini>
   16c1a:	bf00      	nop
   16c1c:	0001be44 	.word	0x0001be44
   16c20:	0001be40 	.word	0x0001be40

00016c24 <_findenv_r>:
   16c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c28:	4f1c      	ldr	r7, [pc, #112]	; (16c9c <_findenv_r+0x78>)
   16c2a:	460e      	mov	r6, r1
   16c2c:	4691      	mov	r9, r2
   16c2e:	4680      	mov	r8, r0
   16c30:	f002 faf2 	bl	19218 <__env_lock>
   16c34:	683d      	ldr	r5, [r7, #0]
   16c36:	b1f5      	cbz	r5, 16c76 <_findenv_r+0x52>
   16c38:	7834      	ldrb	r4, [r6, #0]
   16c3a:	b15c      	cbz	r4, 16c54 <_findenv_r+0x30>
   16c3c:	2c3d      	cmp	r4, #61	; 0x3d
   16c3e:	bf18      	it	ne
   16c40:	4634      	movne	r4, r6
   16c42:	d102      	bne.n	16c4a <_findenv_r+0x26>
   16c44:	e017      	b.n	16c76 <_findenv_r+0x52>
   16c46:	2b3d      	cmp	r3, #61	; 0x3d
   16c48:	d015      	beq.n	16c76 <_findenv_r+0x52>
   16c4a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   16c4e:	2b00      	cmp	r3, #0
   16c50:	d1f9      	bne.n	16c46 <_findenv_r+0x22>
   16c52:	1ba4      	subs	r4, r4, r6
   16c54:	6828      	ldr	r0, [r5, #0]
   16c56:	b170      	cbz	r0, 16c76 <_findenv_r+0x52>
   16c58:	4622      	mov	r2, r4
   16c5a:	4631      	mov	r1, r6
   16c5c:	f000 fe6c 	bl	17938 <strncmp>
   16c60:	b928      	cbnz	r0, 16c6e <_findenv_r+0x4a>
   16c62:	6828      	ldr	r0, [r5, #0]
   16c64:	5d03      	ldrb	r3, [r0, r4]
   16c66:	2b3d      	cmp	r3, #61	; 0x3d
   16c68:	eb00 0a04 	add.w	sl, r0, r4
   16c6c:	d009      	beq.n	16c82 <_findenv_r+0x5e>
   16c6e:	f855 0f04 	ldr.w	r0, [r5, #4]!
   16c72:	2800      	cmp	r0, #0
   16c74:	d1f0      	bne.n	16c58 <_findenv_r+0x34>
   16c76:	4640      	mov	r0, r8
   16c78:	f002 fad4 	bl	19224 <__env_unlock>
   16c7c:	2000      	movs	r0, #0
   16c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16c82:	683b      	ldr	r3, [r7, #0]
   16c84:	1aed      	subs	r5, r5, r3
   16c86:	10ad      	asrs	r5, r5, #2
   16c88:	4640      	mov	r0, r8
   16c8a:	f8c9 5000 	str.w	r5, [r9]
   16c8e:	f002 fac9 	bl	19224 <__env_unlock>
   16c92:	f10a 0001 	add.w	r0, sl, #1
   16c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16c9a:	bf00      	nop
   16c9c:	20000a24 	.word	0x20000a24

00016ca0 <_getenv_r>:
   16ca0:	b500      	push	{lr}
   16ca2:	b083      	sub	sp, #12
   16ca4:	aa01      	add	r2, sp, #4
   16ca6:	f7ff ffbd 	bl	16c24 <_findenv_r>
   16caa:	b003      	add	sp, #12
   16cac:	f85d fb04 	ldr.w	pc, [sp], #4

00016cb0 <__gettzinfo>:
   16cb0:	4800      	ldr	r0, [pc, #0]	; (16cb4 <__gettzinfo+0x4>)
   16cb2:	4770      	bx	lr
   16cb4:	200005d4 	.word	0x200005d4

00016cb8 <gmtime_r>:
   16cb8:	6800      	ldr	r0, [r0, #0]
   16cba:	4b65      	ldr	r3, [pc, #404]	; (16e50 <gmtime_r+0x198>)
   16cbc:	fb83 2300 	smull	r2, r3, r3, r0
   16cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16cc4:	4403      	add	r3, r0
   16cc6:	4d63      	ldr	r5, [pc, #396]	; (16e54 <gmtime_r+0x19c>)
   16cc8:	17c2      	asrs	r2, r0, #31
   16cca:	ebc2 4323 	rsb	r3, r2, r3, asr #16
   16cce:	fb05 0513 	mls	r5, r5, r3, r0
   16cd2:	2d00      	cmp	r5, #0
   16cd4:	f2c0 80b3 	blt.w	16e3e <gmtime_r+0x186>
   16cd8:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   16cdc:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
   16ce0:	4e5d      	ldr	r6, [pc, #372]	; (16e58 <gmtime_r+0x1a0>)
   16ce2:	485e      	ldr	r0, [pc, #376]	; (16e5c <gmtime_r+0x1a4>)
   16ce4:	4a5e      	ldr	r2, [pc, #376]	; (16e60 <gmtime_r+0x1a8>)
   16ce6:	4c5f      	ldr	r4, [pc, #380]	; (16e64 <gmtime_r+0x1ac>)
   16ce8:	f8df c18c 	ldr.w	ip, [pc, #396]	; 16e78 <gmtime_r+0x1c0>
   16cec:	f8df e18c 	ldr.w	lr, [pc, #396]	; 16e7c <gmtime_r+0x1c4>
   16cf0:	fb86 7603 	smull	r7, r6, r6, r3
   16cf4:	17df      	asrs	r7, r3, #31
   16cf6:	ebc7 36e6 	rsb	r6, r7, r6, asr #15
   16cfa:	fb00 3006 	mla	r0, r0, r6, r3
   16cfe:	0887      	lsrs	r7, r0, #2
   16d00:	fba2 8207 	umull	r8, r2, r2, r7
   16d04:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
   16d08:	fba4 8707 	umull	r8, r7, r4, r7
   16d0c:	ea4f 1810 	mov.w	r8, r0, lsr #4
   16d10:	eba2 12d7 	sub.w	r2, r2, r7, lsr #7
   16d14:	fbac c708 	umull	ip, r7, ip, r8
   16d18:	eba2 1217 	sub.w	r2, r2, r7, lsr #4
   16d1c:	f8df c160 	ldr.w	ip, [pc, #352]	; 16e80 <gmtime_r+0x1c8>
   16d20:	4f51      	ldr	r7, [pc, #324]	; (16e68 <gmtime_r+0x1b0>)
   16d22:	fbae 8e02 	umull	r8, lr, lr, r2
   16d26:	fbac 9c02 	umull	r9, ip, ip, r2
   16d2a:	eba2 080e 	sub.w	r8, r2, lr
   16d2e:	0892      	lsrs	r2, r2, #2
   16d30:	eb0e 0e58 	add.w	lr, lr, r8, lsr #1
   16d34:	eb00 30dc 	add.w	r0, r0, ip, lsr #15
   16d38:	fba4 4202 	umull	r4, r2, r4, r2
   16d3c:	eba0 12d2 	sub.w	r2, r0, r2, lsr #7
   16d40:	ea4f 241e 	mov.w	r4, lr, lsr #8
   16d44:	f240 106d 	movw	r0, #365	; 0x16d
   16d48:	fb00 2214 	mls	r2, r0, r4, r2
   16d4c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 16e84 <gmtime_r+0x1cc>
   16d50:	fb87 0e05 	smull	r0, lr, r7, r5
   16d54:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   16d58:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   16d5c:	44ae      	add	lr, r5
   16d5e:	3002      	adds	r0, #2
   16d60:	ebcc 2eee 	rsb	lr, ip, lr, asr #11
   16d64:	4f41      	ldr	r7, [pc, #260]	; (16e6c <gmtime_r+0x1b4>)
   16d66:	f8c1 e008 	str.w	lr, [r1, #8]
   16d6a:	f103 0c03 	add.w	ip, r3, #3
   16d6e:	fba8 3000 	umull	r3, r0, r8, r0
   16d72:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   16d76:	fb03 551e 	mls	r5, r3, lr, r5
   16d7a:	4b3d      	ldr	r3, [pc, #244]	; (16e70 <gmtime_r+0x1b8>)
   16d7c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 16e88 <gmtime_r+0x1d0>
   16d80:	fb87 e705 	smull	lr, r7, r7, r5
   16d84:	fb83 390c 	smull	r3, r9, r3, ip
   16d88:	197b      	adds	r3, r7, r5
   16d8a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   16d8e:	fb07 4606 	mla	r6, r7, r6, r4
   16d92:	17ef      	asrs	r7, r5, #31
   16d94:	44e1      	add	r9, ip
   16d96:	ebc7 1363 	rsb	r3, r7, r3, asr #5
   16d9a:	ea4f 77ec 	mov.w	r7, ip, asr #31
   16d9e:	09c0      	lsrs	r0, r0, #7
   16da0:	ebc7 07a9 	rsb	r7, r7, r9, asr #2
   16da4:	2809      	cmp	r0, #9
   16da6:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
   16daa:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
   16dae:	ebac 0707 	sub.w	r7, ip, r7
   16db2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
   16db6:	bf8c      	ite	hi
   16db8:	f06f 0c09 	mvnhi.w	ip, #9
   16dbc:	f04f 0c02 	movls.w	ip, #2
   16dc0:	4460      	add	r0, ip
   16dc2:	f10e 0e02 	add.w	lr, lr, #2
   16dc6:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
   16dca:	fba8 8e0e 	umull	r8, lr, r8, lr
   16dce:	eba5 058c 	sub.w	r5, r5, ip, lsl #2
   16dd2:	f102 0801 	add.w	r8, r2, #1
   16dd6:	2801      	cmp	r0, #1
   16dd8:	bf98      	it	ls
   16dda:	3601      	addls	r6, #1
   16ddc:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
   16de0:	eba8 0e9e 	sub.w	lr, r8, lr, lsr #2
   16de4:	604b      	str	r3, [r1, #4]
   16de6:	600d      	str	r5, [r1, #0]
   16de8:	618f      	str	r7, [r1, #24]
   16dea:	d225      	bcs.n	16e38 <gmtime_r+0x180>
   16dec:	07a3      	lsls	r3, r4, #30
   16dee:	d018      	beq.n	16e22 <gmtime_r+0x16a>
   16df0:	4b20      	ldr	r3, [pc, #128]	; (16e74 <gmtime_r+0x1bc>)
   16df2:	fba3 5304 	umull	r5, r3, r3, r4
   16df6:	09db      	lsrs	r3, r3, #7
   16df8:	f44f 75c8 	mov.w	r5, #400	; 0x190
   16dfc:	fb05 4413 	mls	r4, r5, r3, r4
   16e00:	fab4 f484 	clz	r4, r4
   16e04:	0964      	lsrs	r4, r4, #5
   16e06:	323b      	adds	r2, #59	; 0x3b
   16e08:	4422      	add	r2, r4
   16e0a:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   16e0e:	2300      	movs	r3, #0
   16e10:	6108      	str	r0, [r1, #16]
   16e12:	614e      	str	r6, [r1, #20]
   16e14:	61ca      	str	r2, [r1, #28]
   16e16:	f8c1 e00c 	str.w	lr, [r1, #12]
   16e1a:	620b      	str	r3, [r1, #32]
   16e1c:	4608      	mov	r0, r1
   16e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16e22:	4b14      	ldr	r3, [pc, #80]	; (16e74 <gmtime_r+0x1bc>)
   16e24:	fba3 5304 	umull	r5, r3, r3, r4
   16e28:	095b      	lsrs	r3, r3, #5
   16e2a:	2564      	movs	r5, #100	; 0x64
   16e2c:	fb05 4313 	mls	r3, r5, r3, r4
   16e30:	2b00      	cmp	r3, #0
   16e32:	d0dd      	beq.n	16df0 <gmtime_r+0x138>
   16e34:	2401      	movs	r4, #1
   16e36:	e7e6      	b.n	16e06 <gmtime_r+0x14e>
   16e38:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
   16e3c:	e7e5      	b.n	16e0a <gmtime_r+0x152>
   16e3e:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
   16e42:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   16e46:	f505 75c0 	add.w	r5, r5, #384	; 0x180
   16e4a:	f603 236b 	addw	r3, r3, #2667	; 0xa6b
   16e4e:	e747      	b.n	16ce0 <gmtime_r+0x28>
   16e50:	c22e4507 	.word	0xc22e4507
   16e54:	00015180 	.word	0x00015180
   16e58:	396b06bd 	.word	0x396b06bd
   16e5c:	fffdc54f 	.word	0xfffdc54f
   16e60:	396b207f 	.word	0x396b207f
   16e64:	59c67cd9 	.word	0x59c67cd9
   16e68:	91a2b3c5 	.word	0x91a2b3c5
   16e6c:	88888889 	.word	0x88888889
   16e70:	92492493 	.word	0x92492493
   16e74:	51eb851f 	.word	0x51eb851f
   16e78:	0072d641 	.word	0x0072d641
   16e7c:	6719f361 	.word	0x6719f361
   16e80:	e5d32b1f 	.word	0xe5d32b1f
   16e84:	d62b80d7 	.word	0xd62b80d7
   16e88:	cccccccd 	.word	0xcccccccd

00016e8c <__retarget_lock_acquire>:
   16e8c:	4770      	bx	lr
   16e8e:	bf00      	nop

00016e90 <__retarget_lock_acquire_recursive>:
   16e90:	4770      	bx	lr
   16e92:	bf00      	nop

00016e94 <__retarget_lock_release>:
   16e94:	4770      	bx	lr
   16e96:	bf00      	nop

00016e98 <__retarget_lock_release_recursive>:
   16e98:	4770      	bx	lr
   16e9a:	bf00      	nop

00016e9c <_malloc_r>:
   16e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ea0:	f101 060b 	add.w	r6, r1, #11
   16ea4:	2e16      	cmp	r6, #22
   16ea6:	b083      	sub	sp, #12
   16ea8:	4605      	mov	r5, r0
   16eaa:	f240 809e 	bls.w	16fea <_malloc_r+0x14e>
   16eae:	f036 0607 	bics.w	r6, r6, #7
   16eb2:	f100 80bd 	bmi.w	17030 <_malloc_r+0x194>
   16eb6:	42b1      	cmp	r1, r6
   16eb8:	f200 80ba 	bhi.w	17030 <_malloc_r+0x194>
   16ebc:	f000 faf0 	bl	174a0 <__malloc_lock>
   16ec0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   16ec4:	f0c0 8293 	bcc.w	173ee <_malloc_r+0x552>
   16ec8:	0a73      	lsrs	r3, r6, #9
   16eca:	f000 80b8 	beq.w	1703e <_malloc_r+0x1a2>
   16ece:	2b04      	cmp	r3, #4
   16ed0:	f200 8179 	bhi.w	171c6 <_malloc_r+0x32a>
   16ed4:	09b3      	lsrs	r3, r6, #6
   16ed6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   16eda:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   16ede:	00c3      	lsls	r3, r0, #3
   16ee0:	4fbf      	ldr	r7, [pc, #764]	; (171e0 <_malloc_r+0x344>)
   16ee2:	443b      	add	r3, r7
   16ee4:	f1a3 0108 	sub.w	r1, r3, #8
   16ee8:	685c      	ldr	r4, [r3, #4]
   16eea:	42a1      	cmp	r1, r4
   16eec:	d106      	bne.n	16efc <_malloc_r+0x60>
   16eee:	e00c      	b.n	16f0a <_malloc_r+0x6e>
   16ef0:	2a00      	cmp	r2, #0
   16ef2:	f280 80aa 	bge.w	1704a <_malloc_r+0x1ae>
   16ef6:	68e4      	ldr	r4, [r4, #12]
   16ef8:	42a1      	cmp	r1, r4
   16efa:	d006      	beq.n	16f0a <_malloc_r+0x6e>
   16efc:	6863      	ldr	r3, [r4, #4]
   16efe:	f023 0303 	bic.w	r3, r3, #3
   16f02:	1b9a      	subs	r2, r3, r6
   16f04:	2a0f      	cmp	r2, #15
   16f06:	ddf3      	ble.n	16ef0 <_malloc_r+0x54>
   16f08:	4670      	mov	r0, lr
   16f0a:	693c      	ldr	r4, [r7, #16]
   16f0c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 171f4 <_malloc_r+0x358>
   16f10:	4574      	cmp	r4, lr
   16f12:	f000 81ab 	beq.w	1726c <_malloc_r+0x3d0>
   16f16:	6863      	ldr	r3, [r4, #4]
   16f18:	f023 0303 	bic.w	r3, r3, #3
   16f1c:	1b9a      	subs	r2, r3, r6
   16f1e:	2a0f      	cmp	r2, #15
   16f20:	f300 8190 	bgt.w	17244 <_malloc_r+0x3a8>
   16f24:	2a00      	cmp	r2, #0
   16f26:	f8c7 e014 	str.w	lr, [r7, #20]
   16f2a:	f8c7 e010 	str.w	lr, [r7, #16]
   16f2e:	f280 809d 	bge.w	1706c <_malloc_r+0x1d0>
   16f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16f36:	f080 8161 	bcs.w	171fc <_malloc_r+0x360>
   16f3a:	08db      	lsrs	r3, r3, #3
   16f3c:	f103 0c01 	add.w	ip, r3, #1
   16f40:	1099      	asrs	r1, r3, #2
   16f42:	687a      	ldr	r2, [r7, #4]
   16f44:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   16f48:	f8c4 8008 	str.w	r8, [r4, #8]
   16f4c:	2301      	movs	r3, #1
   16f4e:	408b      	lsls	r3, r1
   16f50:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   16f54:	4313      	orrs	r3, r2
   16f56:	3908      	subs	r1, #8
   16f58:	60e1      	str	r1, [r4, #12]
   16f5a:	607b      	str	r3, [r7, #4]
   16f5c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   16f60:	f8c8 400c 	str.w	r4, [r8, #12]
   16f64:	1082      	asrs	r2, r0, #2
   16f66:	2401      	movs	r4, #1
   16f68:	4094      	lsls	r4, r2
   16f6a:	429c      	cmp	r4, r3
   16f6c:	f200 808b 	bhi.w	17086 <_malloc_r+0x1ea>
   16f70:	421c      	tst	r4, r3
   16f72:	d106      	bne.n	16f82 <_malloc_r+0xe6>
   16f74:	f020 0003 	bic.w	r0, r0, #3
   16f78:	0064      	lsls	r4, r4, #1
   16f7a:	421c      	tst	r4, r3
   16f7c:	f100 0004 	add.w	r0, r0, #4
   16f80:	d0fa      	beq.n	16f78 <_malloc_r+0xdc>
   16f82:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   16f86:	46cc      	mov	ip, r9
   16f88:	4680      	mov	r8, r0
   16f8a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   16f8e:	459c      	cmp	ip, r3
   16f90:	d107      	bne.n	16fa2 <_malloc_r+0x106>
   16f92:	e16d      	b.n	17270 <_malloc_r+0x3d4>
   16f94:	2a00      	cmp	r2, #0
   16f96:	f280 817b 	bge.w	17290 <_malloc_r+0x3f4>
   16f9a:	68db      	ldr	r3, [r3, #12]
   16f9c:	459c      	cmp	ip, r3
   16f9e:	f000 8167 	beq.w	17270 <_malloc_r+0x3d4>
   16fa2:	6859      	ldr	r1, [r3, #4]
   16fa4:	f021 0103 	bic.w	r1, r1, #3
   16fa8:	1b8a      	subs	r2, r1, r6
   16faa:	2a0f      	cmp	r2, #15
   16fac:	ddf2      	ble.n	16f94 <_malloc_r+0xf8>
   16fae:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   16fb2:	f8d3 8008 	ldr.w	r8, [r3, #8]
   16fb6:	9300      	str	r3, [sp, #0]
   16fb8:	199c      	adds	r4, r3, r6
   16fba:	4628      	mov	r0, r5
   16fbc:	f046 0601 	orr.w	r6, r6, #1
   16fc0:	f042 0501 	orr.w	r5, r2, #1
   16fc4:	605e      	str	r6, [r3, #4]
   16fc6:	f8c8 c00c 	str.w	ip, [r8, #12]
   16fca:	f8cc 8008 	str.w	r8, [ip, #8]
   16fce:	617c      	str	r4, [r7, #20]
   16fd0:	613c      	str	r4, [r7, #16]
   16fd2:	f8c4 e00c 	str.w	lr, [r4, #12]
   16fd6:	f8c4 e008 	str.w	lr, [r4, #8]
   16fda:	6065      	str	r5, [r4, #4]
   16fdc:	505a      	str	r2, [r3, r1]
   16fde:	f000 fa65 	bl	174ac <__malloc_unlock>
   16fe2:	9b00      	ldr	r3, [sp, #0]
   16fe4:	f103 0408 	add.w	r4, r3, #8
   16fe8:	e01e      	b.n	17028 <_malloc_r+0x18c>
   16fea:	2910      	cmp	r1, #16
   16fec:	d820      	bhi.n	17030 <_malloc_r+0x194>
   16fee:	f000 fa57 	bl	174a0 <__malloc_lock>
   16ff2:	2610      	movs	r6, #16
   16ff4:	2318      	movs	r3, #24
   16ff6:	2002      	movs	r0, #2
   16ff8:	4f79      	ldr	r7, [pc, #484]	; (171e0 <_malloc_r+0x344>)
   16ffa:	443b      	add	r3, r7
   16ffc:	f1a3 0208 	sub.w	r2, r3, #8
   17000:	685c      	ldr	r4, [r3, #4]
   17002:	4294      	cmp	r4, r2
   17004:	f000 813d 	beq.w	17282 <_malloc_r+0x3e6>
   17008:	6863      	ldr	r3, [r4, #4]
   1700a:	68e1      	ldr	r1, [r4, #12]
   1700c:	68a6      	ldr	r6, [r4, #8]
   1700e:	f023 0303 	bic.w	r3, r3, #3
   17012:	4423      	add	r3, r4
   17014:	4628      	mov	r0, r5
   17016:	685a      	ldr	r2, [r3, #4]
   17018:	60f1      	str	r1, [r6, #12]
   1701a:	f042 0201 	orr.w	r2, r2, #1
   1701e:	608e      	str	r6, [r1, #8]
   17020:	605a      	str	r2, [r3, #4]
   17022:	f000 fa43 	bl	174ac <__malloc_unlock>
   17026:	3408      	adds	r4, #8
   17028:	4620      	mov	r0, r4
   1702a:	b003      	add	sp, #12
   1702c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17030:	2400      	movs	r4, #0
   17032:	230c      	movs	r3, #12
   17034:	4620      	mov	r0, r4
   17036:	602b      	str	r3, [r5, #0]
   17038:	b003      	add	sp, #12
   1703a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1703e:	2040      	movs	r0, #64	; 0x40
   17040:	f44f 7300 	mov.w	r3, #512	; 0x200
   17044:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   17048:	e74a      	b.n	16ee0 <_malloc_r+0x44>
   1704a:	4423      	add	r3, r4
   1704c:	68e1      	ldr	r1, [r4, #12]
   1704e:	685a      	ldr	r2, [r3, #4]
   17050:	68a6      	ldr	r6, [r4, #8]
   17052:	f042 0201 	orr.w	r2, r2, #1
   17056:	60f1      	str	r1, [r6, #12]
   17058:	4628      	mov	r0, r5
   1705a:	608e      	str	r6, [r1, #8]
   1705c:	605a      	str	r2, [r3, #4]
   1705e:	f000 fa25 	bl	174ac <__malloc_unlock>
   17062:	3408      	adds	r4, #8
   17064:	4620      	mov	r0, r4
   17066:	b003      	add	sp, #12
   17068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1706c:	4423      	add	r3, r4
   1706e:	4628      	mov	r0, r5
   17070:	685a      	ldr	r2, [r3, #4]
   17072:	f042 0201 	orr.w	r2, r2, #1
   17076:	605a      	str	r2, [r3, #4]
   17078:	f000 fa18 	bl	174ac <__malloc_unlock>
   1707c:	3408      	adds	r4, #8
   1707e:	4620      	mov	r0, r4
   17080:	b003      	add	sp, #12
   17082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17086:	68bc      	ldr	r4, [r7, #8]
   17088:	6863      	ldr	r3, [r4, #4]
   1708a:	f023 0803 	bic.w	r8, r3, #3
   1708e:	45b0      	cmp	r8, r6
   17090:	d304      	bcc.n	1709c <_malloc_r+0x200>
   17092:	eba8 0306 	sub.w	r3, r8, r6
   17096:	2b0f      	cmp	r3, #15
   17098:	f300 8085 	bgt.w	171a6 <_malloc_r+0x30a>
   1709c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 171f8 <_malloc_r+0x35c>
   170a0:	4b50      	ldr	r3, [pc, #320]	; (171e4 <_malloc_r+0x348>)
   170a2:	f8d9 2000 	ldr.w	r2, [r9]
   170a6:	681b      	ldr	r3, [r3, #0]
   170a8:	3201      	adds	r2, #1
   170aa:	4433      	add	r3, r6
   170ac:	eb04 0a08 	add.w	sl, r4, r8
   170b0:	f000 8155 	beq.w	1735e <_malloc_r+0x4c2>
   170b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   170b8:	330f      	adds	r3, #15
   170ba:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   170be:	f02b 0b0f 	bic.w	fp, fp, #15
   170c2:	4659      	mov	r1, fp
   170c4:	4628      	mov	r0, r5
   170c6:	f000 f9f7 	bl	174b8 <_sbrk_r>
   170ca:	1c41      	adds	r1, r0, #1
   170cc:	4602      	mov	r2, r0
   170ce:	f000 80fc 	beq.w	172ca <_malloc_r+0x42e>
   170d2:	4582      	cmp	sl, r0
   170d4:	f200 80f7 	bhi.w	172c6 <_malloc_r+0x42a>
   170d8:	4b43      	ldr	r3, [pc, #268]	; (171e8 <_malloc_r+0x34c>)
   170da:	6819      	ldr	r1, [r3, #0]
   170dc:	4459      	add	r1, fp
   170de:	6019      	str	r1, [r3, #0]
   170e0:	f000 814d 	beq.w	1737e <_malloc_r+0x4e2>
   170e4:	f8d9 0000 	ldr.w	r0, [r9]
   170e8:	3001      	adds	r0, #1
   170ea:	bf1b      	ittet	ne
   170ec:	eba2 0a0a 	subne.w	sl, r2, sl
   170f0:	4451      	addne	r1, sl
   170f2:	f8c9 2000 	streq.w	r2, [r9]
   170f6:	6019      	strne	r1, [r3, #0]
   170f8:	f012 0107 	ands.w	r1, r2, #7
   170fc:	f000 8115 	beq.w	1732a <_malloc_r+0x48e>
   17100:	f1c1 0008 	rsb	r0, r1, #8
   17104:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   17108:	4402      	add	r2, r0
   1710a:	3108      	adds	r1, #8
   1710c:	eb02 090b 	add.w	r9, r2, fp
   17110:	f3c9 090b 	ubfx	r9, r9, #0, #12
   17114:	eba1 0909 	sub.w	r9, r1, r9
   17118:	4649      	mov	r1, r9
   1711a:	4628      	mov	r0, r5
   1711c:	9301      	str	r3, [sp, #4]
   1711e:	9200      	str	r2, [sp, #0]
   17120:	f000 f9ca 	bl	174b8 <_sbrk_r>
   17124:	1c43      	adds	r3, r0, #1
   17126:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1712a:	f000 8143 	beq.w	173b4 <_malloc_r+0x518>
   1712e:	1a80      	subs	r0, r0, r2
   17130:	4448      	add	r0, r9
   17132:	f040 0001 	orr.w	r0, r0, #1
   17136:	6819      	ldr	r1, [r3, #0]
   17138:	60ba      	str	r2, [r7, #8]
   1713a:	4449      	add	r1, r9
   1713c:	42bc      	cmp	r4, r7
   1713e:	6050      	str	r0, [r2, #4]
   17140:	6019      	str	r1, [r3, #0]
   17142:	d017      	beq.n	17174 <_malloc_r+0x2d8>
   17144:	f1b8 0f0f 	cmp.w	r8, #15
   17148:	f240 80fb 	bls.w	17342 <_malloc_r+0x4a6>
   1714c:	6860      	ldr	r0, [r4, #4]
   1714e:	f1a8 020c 	sub.w	r2, r8, #12
   17152:	f022 0207 	bic.w	r2, r2, #7
   17156:	eb04 0e02 	add.w	lr, r4, r2
   1715a:	f000 0001 	and.w	r0, r0, #1
   1715e:	f04f 0c05 	mov.w	ip, #5
   17162:	4310      	orrs	r0, r2
   17164:	2a0f      	cmp	r2, #15
   17166:	6060      	str	r0, [r4, #4]
   17168:	f8ce c004 	str.w	ip, [lr, #4]
   1716c:	f8ce c008 	str.w	ip, [lr, #8]
   17170:	f200 8117 	bhi.w	173a2 <_malloc_r+0x506>
   17174:	4b1d      	ldr	r3, [pc, #116]	; (171ec <_malloc_r+0x350>)
   17176:	68bc      	ldr	r4, [r7, #8]
   17178:	681a      	ldr	r2, [r3, #0]
   1717a:	4291      	cmp	r1, r2
   1717c:	bf88      	it	hi
   1717e:	6019      	strhi	r1, [r3, #0]
   17180:	4b1b      	ldr	r3, [pc, #108]	; (171f0 <_malloc_r+0x354>)
   17182:	681a      	ldr	r2, [r3, #0]
   17184:	4291      	cmp	r1, r2
   17186:	6862      	ldr	r2, [r4, #4]
   17188:	bf88      	it	hi
   1718a:	6019      	strhi	r1, [r3, #0]
   1718c:	f022 0203 	bic.w	r2, r2, #3
   17190:	4296      	cmp	r6, r2
   17192:	eba2 0306 	sub.w	r3, r2, r6
   17196:	d801      	bhi.n	1719c <_malloc_r+0x300>
   17198:	2b0f      	cmp	r3, #15
   1719a:	dc04      	bgt.n	171a6 <_malloc_r+0x30a>
   1719c:	4628      	mov	r0, r5
   1719e:	f000 f985 	bl	174ac <__malloc_unlock>
   171a2:	2400      	movs	r4, #0
   171a4:	e740      	b.n	17028 <_malloc_r+0x18c>
   171a6:	19a2      	adds	r2, r4, r6
   171a8:	f043 0301 	orr.w	r3, r3, #1
   171ac:	f046 0601 	orr.w	r6, r6, #1
   171b0:	6066      	str	r6, [r4, #4]
   171b2:	4628      	mov	r0, r5
   171b4:	60ba      	str	r2, [r7, #8]
   171b6:	6053      	str	r3, [r2, #4]
   171b8:	f000 f978 	bl	174ac <__malloc_unlock>
   171bc:	3408      	adds	r4, #8
   171be:	4620      	mov	r0, r4
   171c0:	b003      	add	sp, #12
   171c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171c6:	2b14      	cmp	r3, #20
   171c8:	d971      	bls.n	172ae <_malloc_r+0x412>
   171ca:	2b54      	cmp	r3, #84	; 0x54
   171cc:	f200 80a3 	bhi.w	17316 <_malloc_r+0x47a>
   171d0:	0b33      	lsrs	r3, r6, #12
   171d2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   171d6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   171da:	00c3      	lsls	r3, r0, #3
   171dc:	e680      	b.n	16ee0 <_malloc_r+0x44>
   171de:	bf00      	nop
   171e0:	20000614 	.word	0x20000614
   171e4:	20003f08 	.word	0x20003f08
   171e8:	20003ed8 	.word	0x20003ed8
   171ec:	20003f00 	.word	0x20003f00
   171f0:	20003f04 	.word	0x20003f04
   171f4:	2000061c 	.word	0x2000061c
   171f8:	20000a1c 	.word	0x20000a1c
   171fc:	0a5a      	lsrs	r2, r3, #9
   171fe:	2a04      	cmp	r2, #4
   17200:	d95b      	bls.n	172ba <_malloc_r+0x41e>
   17202:	2a14      	cmp	r2, #20
   17204:	f200 80ae 	bhi.w	17364 <_malloc_r+0x4c8>
   17208:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1720c:	00c9      	lsls	r1, r1, #3
   1720e:	325b      	adds	r2, #91	; 0x5b
   17210:	eb07 0c01 	add.w	ip, r7, r1
   17214:	5879      	ldr	r1, [r7, r1]
   17216:	f1ac 0c08 	sub.w	ip, ip, #8
   1721a:	458c      	cmp	ip, r1
   1721c:	f000 8088 	beq.w	17330 <_malloc_r+0x494>
   17220:	684a      	ldr	r2, [r1, #4]
   17222:	f022 0203 	bic.w	r2, r2, #3
   17226:	4293      	cmp	r3, r2
   17228:	d273      	bcs.n	17312 <_malloc_r+0x476>
   1722a:	6889      	ldr	r1, [r1, #8]
   1722c:	458c      	cmp	ip, r1
   1722e:	d1f7      	bne.n	17220 <_malloc_r+0x384>
   17230:	f8dc 200c 	ldr.w	r2, [ip, #12]
   17234:	687b      	ldr	r3, [r7, #4]
   17236:	60e2      	str	r2, [r4, #12]
   17238:	f8c4 c008 	str.w	ip, [r4, #8]
   1723c:	6094      	str	r4, [r2, #8]
   1723e:	f8cc 400c 	str.w	r4, [ip, #12]
   17242:	e68f      	b.n	16f64 <_malloc_r+0xc8>
   17244:	19a1      	adds	r1, r4, r6
   17246:	f046 0c01 	orr.w	ip, r6, #1
   1724a:	f042 0601 	orr.w	r6, r2, #1
   1724e:	f8c4 c004 	str.w	ip, [r4, #4]
   17252:	4628      	mov	r0, r5
   17254:	6179      	str	r1, [r7, #20]
   17256:	6139      	str	r1, [r7, #16]
   17258:	f8c1 e00c 	str.w	lr, [r1, #12]
   1725c:	f8c1 e008 	str.w	lr, [r1, #8]
   17260:	604e      	str	r6, [r1, #4]
   17262:	50e2      	str	r2, [r4, r3]
   17264:	f000 f922 	bl	174ac <__malloc_unlock>
   17268:	3408      	adds	r4, #8
   1726a:	e6dd      	b.n	17028 <_malloc_r+0x18c>
   1726c:	687b      	ldr	r3, [r7, #4]
   1726e:	e679      	b.n	16f64 <_malloc_r+0xc8>
   17270:	f108 0801 	add.w	r8, r8, #1
   17274:	f018 0f03 	tst.w	r8, #3
   17278:	f10c 0c08 	add.w	ip, ip, #8
   1727c:	f47f ae85 	bne.w	16f8a <_malloc_r+0xee>
   17280:	e02d      	b.n	172de <_malloc_r+0x442>
   17282:	68dc      	ldr	r4, [r3, #12]
   17284:	42a3      	cmp	r3, r4
   17286:	bf08      	it	eq
   17288:	3002      	addeq	r0, #2
   1728a:	f43f ae3e 	beq.w	16f0a <_malloc_r+0x6e>
   1728e:	e6bb      	b.n	17008 <_malloc_r+0x16c>
   17290:	4419      	add	r1, r3
   17292:	461c      	mov	r4, r3
   17294:	684a      	ldr	r2, [r1, #4]
   17296:	68db      	ldr	r3, [r3, #12]
   17298:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1729c:	f042 0201 	orr.w	r2, r2, #1
   172a0:	604a      	str	r2, [r1, #4]
   172a2:	4628      	mov	r0, r5
   172a4:	60f3      	str	r3, [r6, #12]
   172a6:	609e      	str	r6, [r3, #8]
   172a8:	f000 f900 	bl	174ac <__malloc_unlock>
   172ac:	e6bc      	b.n	17028 <_malloc_r+0x18c>
   172ae:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   172b2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   172b6:	00c3      	lsls	r3, r0, #3
   172b8:	e612      	b.n	16ee0 <_malloc_r+0x44>
   172ba:	099a      	lsrs	r2, r3, #6
   172bc:	f102 0139 	add.w	r1, r2, #57	; 0x39
   172c0:	00c9      	lsls	r1, r1, #3
   172c2:	3238      	adds	r2, #56	; 0x38
   172c4:	e7a4      	b.n	17210 <_malloc_r+0x374>
   172c6:	42bc      	cmp	r4, r7
   172c8:	d054      	beq.n	17374 <_malloc_r+0x4d8>
   172ca:	68bc      	ldr	r4, [r7, #8]
   172cc:	6862      	ldr	r2, [r4, #4]
   172ce:	f022 0203 	bic.w	r2, r2, #3
   172d2:	e75d      	b.n	17190 <_malloc_r+0x2f4>
   172d4:	f859 3908 	ldr.w	r3, [r9], #-8
   172d8:	4599      	cmp	r9, r3
   172da:	f040 8086 	bne.w	173ea <_malloc_r+0x54e>
   172de:	f010 0f03 	tst.w	r0, #3
   172e2:	f100 30ff 	add.w	r0, r0, #4294967295
   172e6:	d1f5      	bne.n	172d4 <_malloc_r+0x438>
   172e8:	687b      	ldr	r3, [r7, #4]
   172ea:	ea23 0304 	bic.w	r3, r3, r4
   172ee:	607b      	str	r3, [r7, #4]
   172f0:	0064      	lsls	r4, r4, #1
   172f2:	429c      	cmp	r4, r3
   172f4:	f63f aec7 	bhi.w	17086 <_malloc_r+0x1ea>
   172f8:	2c00      	cmp	r4, #0
   172fa:	f43f aec4 	beq.w	17086 <_malloc_r+0x1ea>
   172fe:	421c      	tst	r4, r3
   17300:	4640      	mov	r0, r8
   17302:	f47f ae3e 	bne.w	16f82 <_malloc_r+0xe6>
   17306:	0064      	lsls	r4, r4, #1
   17308:	421c      	tst	r4, r3
   1730a:	f100 0004 	add.w	r0, r0, #4
   1730e:	d0fa      	beq.n	17306 <_malloc_r+0x46a>
   17310:	e637      	b.n	16f82 <_malloc_r+0xe6>
   17312:	468c      	mov	ip, r1
   17314:	e78c      	b.n	17230 <_malloc_r+0x394>
   17316:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1731a:	d815      	bhi.n	17348 <_malloc_r+0x4ac>
   1731c:	0bf3      	lsrs	r3, r6, #15
   1731e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   17322:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   17326:	00c3      	lsls	r3, r0, #3
   17328:	e5da      	b.n	16ee0 <_malloc_r+0x44>
   1732a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1732e:	e6ed      	b.n	1710c <_malloc_r+0x270>
   17330:	687b      	ldr	r3, [r7, #4]
   17332:	1092      	asrs	r2, r2, #2
   17334:	2101      	movs	r1, #1
   17336:	fa01 f202 	lsl.w	r2, r1, r2
   1733a:	4313      	orrs	r3, r2
   1733c:	607b      	str	r3, [r7, #4]
   1733e:	4662      	mov	r2, ip
   17340:	e779      	b.n	17236 <_malloc_r+0x39a>
   17342:	2301      	movs	r3, #1
   17344:	6053      	str	r3, [r2, #4]
   17346:	e729      	b.n	1719c <_malloc_r+0x300>
   17348:	f240 5254 	movw	r2, #1364	; 0x554
   1734c:	4293      	cmp	r3, r2
   1734e:	d822      	bhi.n	17396 <_malloc_r+0x4fa>
   17350:	0cb3      	lsrs	r3, r6, #18
   17352:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   17356:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1735a:	00c3      	lsls	r3, r0, #3
   1735c:	e5c0      	b.n	16ee0 <_malloc_r+0x44>
   1735e:	f103 0b10 	add.w	fp, r3, #16
   17362:	e6ae      	b.n	170c2 <_malloc_r+0x226>
   17364:	2a54      	cmp	r2, #84	; 0x54
   17366:	d829      	bhi.n	173bc <_malloc_r+0x520>
   17368:	0b1a      	lsrs	r2, r3, #12
   1736a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1736e:	00c9      	lsls	r1, r1, #3
   17370:	326e      	adds	r2, #110	; 0x6e
   17372:	e74d      	b.n	17210 <_malloc_r+0x374>
   17374:	4b20      	ldr	r3, [pc, #128]	; (173f8 <_malloc_r+0x55c>)
   17376:	6819      	ldr	r1, [r3, #0]
   17378:	4459      	add	r1, fp
   1737a:	6019      	str	r1, [r3, #0]
   1737c:	e6b2      	b.n	170e4 <_malloc_r+0x248>
   1737e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   17382:	2800      	cmp	r0, #0
   17384:	f47f aeae 	bne.w	170e4 <_malloc_r+0x248>
   17388:	eb08 030b 	add.w	r3, r8, fp
   1738c:	68ba      	ldr	r2, [r7, #8]
   1738e:	f043 0301 	orr.w	r3, r3, #1
   17392:	6053      	str	r3, [r2, #4]
   17394:	e6ee      	b.n	17174 <_malloc_r+0x2d8>
   17396:	207f      	movs	r0, #127	; 0x7f
   17398:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1739c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   173a0:	e59e      	b.n	16ee0 <_malloc_r+0x44>
   173a2:	f104 0108 	add.w	r1, r4, #8
   173a6:	4628      	mov	r0, r5
   173a8:	9300      	str	r3, [sp, #0]
   173aa:	f001 ff91 	bl	192d0 <_free_r>
   173ae:	9b00      	ldr	r3, [sp, #0]
   173b0:	6819      	ldr	r1, [r3, #0]
   173b2:	e6df      	b.n	17174 <_malloc_r+0x2d8>
   173b4:	2001      	movs	r0, #1
   173b6:	f04f 0900 	mov.w	r9, #0
   173ba:	e6bc      	b.n	17136 <_malloc_r+0x29a>
   173bc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   173c0:	d805      	bhi.n	173ce <_malloc_r+0x532>
   173c2:	0bda      	lsrs	r2, r3, #15
   173c4:	f102 0178 	add.w	r1, r2, #120	; 0x78
   173c8:	00c9      	lsls	r1, r1, #3
   173ca:	3277      	adds	r2, #119	; 0x77
   173cc:	e720      	b.n	17210 <_malloc_r+0x374>
   173ce:	f240 5154 	movw	r1, #1364	; 0x554
   173d2:	428a      	cmp	r2, r1
   173d4:	d805      	bhi.n	173e2 <_malloc_r+0x546>
   173d6:	0c9a      	lsrs	r2, r3, #18
   173d8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   173dc:	00c9      	lsls	r1, r1, #3
   173de:	327c      	adds	r2, #124	; 0x7c
   173e0:	e716      	b.n	17210 <_malloc_r+0x374>
   173e2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   173e6:	227e      	movs	r2, #126	; 0x7e
   173e8:	e712      	b.n	17210 <_malloc_r+0x374>
   173ea:	687b      	ldr	r3, [r7, #4]
   173ec:	e780      	b.n	172f0 <_malloc_r+0x454>
   173ee:	08f0      	lsrs	r0, r6, #3
   173f0:	f106 0308 	add.w	r3, r6, #8
   173f4:	e600      	b.n	16ff8 <_malloc_r+0x15c>
   173f6:	bf00      	nop
   173f8:	20003ed8 	.word	0x20003ed8
   173fc:	00000000 	.word	0x00000000

00017400 <memchr>:
   17400:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   17404:	2a10      	cmp	r2, #16
   17406:	db2b      	blt.n	17460 <memchr+0x60>
   17408:	f010 0f07 	tst.w	r0, #7
   1740c:	d008      	beq.n	17420 <memchr+0x20>
   1740e:	f810 3b01 	ldrb.w	r3, [r0], #1
   17412:	3a01      	subs	r2, #1
   17414:	428b      	cmp	r3, r1
   17416:	d02d      	beq.n	17474 <memchr+0x74>
   17418:	f010 0f07 	tst.w	r0, #7
   1741c:	b342      	cbz	r2, 17470 <memchr+0x70>
   1741e:	d1f6      	bne.n	1740e <memchr+0xe>
   17420:	b4f0      	push	{r4, r5, r6, r7}
   17422:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   17426:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1742a:	f022 0407 	bic.w	r4, r2, #7
   1742e:	f07f 0700 	mvns.w	r7, #0
   17432:	2300      	movs	r3, #0
   17434:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   17438:	3c08      	subs	r4, #8
   1743a:	ea85 0501 	eor.w	r5, r5, r1
   1743e:	ea86 0601 	eor.w	r6, r6, r1
   17442:	fa85 f547 	uadd8	r5, r5, r7
   17446:	faa3 f587 	sel	r5, r3, r7
   1744a:	fa86 f647 	uadd8	r6, r6, r7
   1744e:	faa5 f687 	sel	r6, r5, r7
   17452:	b98e      	cbnz	r6, 17478 <memchr+0x78>
   17454:	d1ee      	bne.n	17434 <memchr+0x34>
   17456:	bcf0      	pop	{r4, r5, r6, r7}
   17458:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1745c:	f002 0207 	and.w	r2, r2, #7
   17460:	b132      	cbz	r2, 17470 <memchr+0x70>
   17462:	f810 3b01 	ldrb.w	r3, [r0], #1
   17466:	3a01      	subs	r2, #1
   17468:	ea83 0301 	eor.w	r3, r3, r1
   1746c:	b113      	cbz	r3, 17474 <memchr+0x74>
   1746e:	d1f8      	bne.n	17462 <memchr+0x62>
   17470:	2000      	movs	r0, #0
   17472:	4770      	bx	lr
   17474:	3801      	subs	r0, #1
   17476:	4770      	bx	lr
   17478:	2d00      	cmp	r5, #0
   1747a:	bf06      	itte	eq
   1747c:	4635      	moveq	r5, r6
   1747e:	3803      	subeq	r0, #3
   17480:	3807      	subne	r0, #7
   17482:	f015 0f01 	tst.w	r5, #1
   17486:	d107      	bne.n	17498 <memchr+0x98>
   17488:	3001      	adds	r0, #1
   1748a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1748e:	bf02      	ittt	eq
   17490:	3001      	addeq	r0, #1
   17492:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   17496:	3001      	addeq	r0, #1
   17498:	bcf0      	pop	{r4, r5, r6, r7}
   1749a:	3801      	subs	r0, #1
   1749c:	4770      	bx	lr
   1749e:	bf00      	nop

000174a0 <__malloc_lock>:
   174a0:	4801      	ldr	r0, [pc, #4]	; (174a8 <__malloc_lock+0x8>)
   174a2:	f7ff bcf5 	b.w	16e90 <__retarget_lock_acquire_recursive>
   174a6:	bf00      	nop
   174a8:	20004124 	.word	0x20004124

000174ac <__malloc_unlock>:
   174ac:	4801      	ldr	r0, [pc, #4]	; (174b4 <__malloc_unlock+0x8>)
   174ae:	f7ff bcf3 	b.w	16e98 <__retarget_lock_release_recursive>
   174b2:	bf00      	nop
   174b4:	20004124 	.word	0x20004124

000174b8 <_sbrk_r>:
   174b8:	b538      	push	{r3, r4, r5, lr}
   174ba:	4c07      	ldr	r4, [pc, #28]	; (174d8 <_sbrk_r+0x20>)
   174bc:	2300      	movs	r3, #0
   174be:	4605      	mov	r5, r0
   174c0:	4608      	mov	r0, r1
   174c2:	6023      	str	r3, [r4, #0]
   174c4:	f7f9 fef9 	bl	112ba <_sbrk>
   174c8:	1c43      	adds	r3, r0, #1
   174ca:	d000      	beq.n	174ce <_sbrk_r+0x16>
   174cc:	bd38      	pop	{r3, r4, r5, pc}
   174ce:	6823      	ldr	r3, [r4, #0]
   174d0:	2b00      	cmp	r3, #0
   174d2:	d0fb      	beq.n	174cc <_sbrk_r+0x14>
   174d4:	602b      	str	r3, [r5, #0]
   174d6:	bd38      	pop	{r3, r4, r5, pc}
   174d8:	20004138 	.word	0x20004138

000174dc <siprintf>:
   174dc:	b40e      	push	{r1, r2, r3}
   174de:	b5f0      	push	{r4, r5, r6, r7, lr}
   174e0:	b09c      	sub	sp, #112	; 0x70
   174e2:	ab21      	add	r3, sp, #132	; 0x84
   174e4:	490f      	ldr	r1, [pc, #60]	; (17524 <siprintf+0x48>)
   174e6:	f853 2b04 	ldr.w	r2, [r3], #4
   174ea:	9301      	str	r3, [sp, #4]
   174ec:	4605      	mov	r5, r0
   174ee:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   174f2:	6808      	ldr	r0, [r1, #0]
   174f4:	9502      	str	r5, [sp, #8]
   174f6:	f44f 7702 	mov.w	r7, #520	; 0x208
   174fa:	f64f 76ff 	movw	r6, #65535	; 0xffff
   174fe:	a902      	add	r1, sp, #8
   17500:	9506      	str	r5, [sp, #24]
   17502:	f8ad 7014 	strh.w	r7, [sp, #20]
   17506:	9404      	str	r4, [sp, #16]
   17508:	9407      	str	r4, [sp, #28]
   1750a:	f8ad 6016 	strh.w	r6, [sp, #22]
   1750e:	f000 fbaf 	bl	17c70 <_svfiprintf_r>
   17512:	9b02      	ldr	r3, [sp, #8]
   17514:	2200      	movs	r2, #0
   17516:	701a      	strb	r2, [r3, #0]
   17518:	b01c      	add	sp, #112	; 0x70
   1751a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1751e:	b003      	add	sp, #12
   17520:	4770      	bx	lr
   17522:	bf00      	nop
   17524:	2000019c 	.word	0x2000019c

00017528 <siscanf>:
   17528:	b40e      	push	{r1, r2, r3}
   1752a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1752c:	b09c      	sub	sp, #112	; 0x70
   1752e:	ac21      	add	r4, sp, #132	; 0x84
   17530:	f44f 7201 	mov.w	r2, #516	; 0x204
   17534:	f854 6b04 	ldr.w	r6, [r4], #4
   17538:	f8ad 2014 	strh.w	r2, [sp, #20]
   1753c:	9002      	str	r0, [sp, #8]
   1753e:	9006      	str	r0, [sp, #24]
   17540:	f7fe ffde 	bl	16500 <strlen>
   17544:	4b0c      	ldr	r3, [pc, #48]	; (17578 <siscanf+0x50>)
   17546:	9401      	str	r4, [sp, #4]
   17548:	4605      	mov	r5, r0
   1754a:	4632      	mov	r2, r6
   1754c:	4f0b      	ldr	r7, [pc, #44]	; (1757c <siscanf+0x54>)
   1754e:	6818      	ldr	r0, [r3, #0]
   17550:	9503      	str	r5, [sp, #12]
   17552:	4623      	mov	r3, r4
   17554:	f64f 76ff 	movw	r6, #65535	; 0xffff
   17558:	2400      	movs	r4, #0
   1755a:	a902      	add	r1, sp, #8
   1755c:	9507      	str	r5, [sp, #28]
   1755e:	970a      	str	r7, [sp, #40]	; 0x28
   17560:	940e      	str	r4, [sp, #56]	; 0x38
   17562:	9413      	str	r4, [sp, #76]	; 0x4c
   17564:	f8ad 6016 	strh.w	r6, [sp, #22]
   17568:	f001 f94a 	bl	18800 <__ssvfiscanf_r>
   1756c:	b01c      	add	sp, #112	; 0x70
   1756e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   17572:	b003      	add	sp, #12
   17574:	4770      	bx	lr
   17576:	bf00      	nop
   17578:	2000019c 	.word	0x2000019c
   1757c:	00017581 	.word	0x00017581

00017580 <__seofread>:
   17580:	2000      	movs	r0, #0
   17582:	4770      	bx	lr
	...
   175a0:	eba2 0003 	sub.w	r0, r2, r3
   175a4:	4770      	bx	lr
   175a6:	bf00      	nop

000175a8 <strcmp>:
   175a8:	7802      	ldrb	r2, [r0, #0]
   175aa:	780b      	ldrb	r3, [r1, #0]
   175ac:	2a01      	cmp	r2, #1
   175ae:	bf28      	it	cs
   175b0:	429a      	cmpcs	r2, r3
   175b2:	d1f5      	bne.n	175a0 <__seofread+0x20>
   175b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   175b8:	ea40 0401 	orr.w	r4, r0, r1
   175bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   175c0:	f06f 0c00 	mvn.w	ip, #0
   175c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   175c8:	b312      	cbz	r2, 17610 <strcmp+0x68>
   175ca:	ea80 0401 	eor.w	r4, r0, r1
   175ce:	f014 0f07 	tst.w	r4, #7
   175d2:	d16a      	bne.n	176aa <strcmp+0x102>
   175d4:	f000 0407 	and.w	r4, r0, #7
   175d8:	f020 0007 	bic.w	r0, r0, #7
   175dc:	f004 0503 	and.w	r5, r4, #3
   175e0:	f021 0107 	bic.w	r1, r1, #7
   175e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   175e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   175ec:	f014 0f04 	tst.w	r4, #4
   175f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   175f4:	fa0c f405 	lsl.w	r4, ip, r5
   175f8:	ea62 0204 	orn	r2, r2, r4
   175fc:	ea66 0604 	orn	r6, r6, r4
   17600:	d00a      	beq.n	17618 <strcmp+0x70>
   17602:	ea63 0304 	orn	r3, r3, r4
   17606:	4662      	mov	r2, ip
   17608:	ea67 0704 	orn	r7, r7, r4
   1760c:	4666      	mov	r6, ip
   1760e:	e003      	b.n	17618 <strcmp+0x70>
   17610:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   17614:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   17618:	fa82 f54c 	uadd8	r5, r2, ip
   1761c:	ea82 0406 	eor.w	r4, r2, r6
   17620:	faa4 f48c 	sel	r4, r4, ip
   17624:	bb6c      	cbnz	r4, 17682 <strcmp+0xda>
   17626:	fa83 f54c 	uadd8	r5, r3, ip
   1762a:	ea83 0507 	eor.w	r5, r3, r7
   1762e:	faa5 f58c 	sel	r5, r5, ip
   17632:	b995      	cbnz	r5, 1765a <strcmp+0xb2>
   17634:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   17638:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1763c:	fa82 f54c 	uadd8	r5, r2, ip
   17640:	ea82 0406 	eor.w	r4, r2, r6
   17644:	faa4 f48c 	sel	r4, r4, ip
   17648:	fa83 f54c 	uadd8	r5, r3, ip
   1764c:	ea83 0507 	eor.w	r5, r3, r7
   17650:	faa5 f58c 	sel	r5, r5, ip
   17654:	4325      	orrs	r5, r4
   17656:	d0db      	beq.n	17610 <strcmp+0x68>
   17658:	b99c      	cbnz	r4, 17682 <strcmp+0xda>
   1765a:	ba2d      	rev	r5, r5
   1765c:	fab5 f485 	clz	r4, r5
   17660:	f024 0407 	bic.w	r4, r4, #7
   17664:	fa27 f104 	lsr.w	r1, r7, r4
   17668:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1766c:	fa23 f304 	lsr.w	r3, r3, r4
   17670:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   17674:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   17678:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1767c:	eba0 0001 	sub.w	r0, r0, r1
   17680:	4770      	bx	lr
   17682:	ba24      	rev	r4, r4
   17684:	fab4 f484 	clz	r4, r4
   17688:	f024 0407 	bic.w	r4, r4, #7
   1768c:	fa26 f104 	lsr.w	r1, r6, r4
   17690:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   17694:	fa22 f204 	lsr.w	r2, r2, r4
   17698:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1769c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   176a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   176a4:	eba0 0001 	sub.w	r0, r0, r1
   176a8:	4770      	bx	lr
   176aa:	f014 0f03 	tst.w	r4, #3
   176ae:	d13c      	bne.n	1772a <strcmp+0x182>
   176b0:	f010 0403 	ands.w	r4, r0, #3
   176b4:	d128      	bne.n	17708 <strcmp+0x160>
   176b6:	f850 2b08 	ldr.w	r2, [r0], #8
   176ba:	f851 3b08 	ldr.w	r3, [r1], #8
   176be:	fa82 f54c 	uadd8	r5, r2, ip
   176c2:	ea82 0503 	eor.w	r5, r2, r3
   176c6:	faa5 f58c 	sel	r5, r5, ip
   176ca:	b95d      	cbnz	r5, 176e4 <strcmp+0x13c>
   176cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
   176d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   176d4:	fa82 f54c 	uadd8	r5, r2, ip
   176d8:	ea82 0503 	eor.w	r5, r2, r3
   176dc:	faa5 f58c 	sel	r5, r5, ip
   176e0:	2d00      	cmp	r5, #0
   176e2:	d0e8      	beq.n	176b6 <strcmp+0x10e>
   176e4:	ba2d      	rev	r5, r5
   176e6:	fab5 f485 	clz	r4, r5
   176ea:	f024 0407 	bic.w	r4, r4, #7
   176ee:	fa23 f104 	lsr.w	r1, r3, r4
   176f2:	fa22 f204 	lsr.w	r2, r2, r4
   176f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   176fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   176fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   17702:	eba0 0001 	sub.w	r0, r0, r1
   17706:	4770      	bx	lr
   17708:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1770c:	f020 0003 	bic.w	r0, r0, #3
   17710:	f850 2b08 	ldr.w	r2, [r0], #8
   17714:	f021 0103 	bic.w	r1, r1, #3
   17718:	f851 3b08 	ldr.w	r3, [r1], #8
   1771c:	fa0c f404 	lsl.w	r4, ip, r4
   17720:	ea62 0204 	orn	r2, r2, r4
   17724:	ea63 0304 	orn	r3, r3, r4
   17728:	e7c9      	b.n	176be <strcmp+0x116>
   1772a:	f010 0403 	ands.w	r4, r0, #3
   1772e:	d01a      	beq.n	17766 <strcmp+0x1be>
   17730:	eba1 0104 	sub.w	r1, r1, r4
   17734:	f020 0003 	bic.w	r0, r0, #3
   17738:	07e4      	lsls	r4, r4, #31
   1773a:	f850 2b04 	ldr.w	r2, [r0], #4
   1773e:	d006      	beq.n	1774e <strcmp+0x1a6>
   17740:	d20f      	bcs.n	17762 <strcmp+0x1ba>
   17742:	788b      	ldrb	r3, [r1, #2]
   17744:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   17748:	1ae4      	subs	r4, r4, r3
   1774a:	d106      	bne.n	1775a <strcmp+0x1b2>
   1774c:	b12b      	cbz	r3, 1775a <strcmp+0x1b2>
   1774e:	78cb      	ldrb	r3, [r1, #3]
   17750:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   17754:	1ae4      	subs	r4, r4, r3
   17756:	d100      	bne.n	1775a <strcmp+0x1b2>
   17758:	b91b      	cbnz	r3, 17762 <strcmp+0x1ba>
   1775a:	4620      	mov	r0, r4
   1775c:	f85d 4b10 	ldr.w	r4, [sp], #16
   17760:	4770      	bx	lr
   17762:	f101 0104 	add.w	r1, r1, #4
   17766:	f850 2b04 	ldr.w	r2, [r0], #4
   1776a:	07cc      	lsls	r4, r1, #31
   1776c:	f021 0103 	bic.w	r1, r1, #3
   17770:	f851 3b04 	ldr.w	r3, [r1], #4
   17774:	d848      	bhi.n	17808 <strcmp+0x260>
   17776:	d224      	bcs.n	177c2 <strcmp+0x21a>
   17778:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1777c:	fa82 f54c 	uadd8	r5, r2, ip
   17780:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   17784:	faa5 f58c 	sel	r5, r5, ip
   17788:	d10a      	bne.n	177a0 <strcmp+0x1f8>
   1778a:	b965      	cbnz	r5, 177a6 <strcmp+0x1fe>
   1778c:	f851 3b04 	ldr.w	r3, [r1], #4
   17790:	ea84 0402 	eor.w	r4, r4, r2
   17794:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   17798:	d10e      	bne.n	177b8 <strcmp+0x210>
   1779a:	f850 2b04 	ldr.w	r2, [r0], #4
   1779e:	e7eb      	b.n	17778 <strcmp+0x1d0>
   177a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
   177a4:	e055      	b.n	17852 <strcmp+0x2aa>
   177a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   177aa:	d14d      	bne.n	17848 <strcmp+0x2a0>
   177ac:	7808      	ldrb	r0, [r1, #0]
   177ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   177b2:	f1c0 0000 	rsb	r0, r0, #0
   177b6:	4770      	bx	lr
   177b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
   177bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   177c0:	e047      	b.n	17852 <strcmp+0x2aa>
   177c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   177c6:	fa82 f54c 	uadd8	r5, r2, ip
   177ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   177ce:	faa5 f58c 	sel	r5, r5, ip
   177d2:	d10a      	bne.n	177ea <strcmp+0x242>
   177d4:	b965      	cbnz	r5, 177f0 <strcmp+0x248>
   177d6:	f851 3b04 	ldr.w	r3, [r1], #4
   177da:	ea84 0402 	eor.w	r4, r4, r2
   177de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   177e2:	d10c      	bne.n	177fe <strcmp+0x256>
   177e4:	f850 2b04 	ldr.w	r2, [r0], #4
   177e8:	e7eb      	b.n	177c2 <strcmp+0x21a>
   177ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
   177ee:	e030      	b.n	17852 <strcmp+0x2aa>
   177f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   177f4:	d128      	bne.n	17848 <strcmp+0x2a0>
   177f6:	880b      	ldrh	r3, [r1, #0]
   177f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   177fc:	e029      	b.n	17852 <strcmp+0x2aa>
   177fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
   17802:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   17806:	e024      	b.n	17852 <strcmp+0x2aa>
   17808:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1780c:	fa82 f54c 	uadd8	r5, r2, ip
   17810:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   17814:	faa5 f58c 	sel	r5, r5, ip
   17818:	d10a      	bne.n	17830 <strcmp+0x288>
   1781a:	b965      	cbnz	r5, 17836 <strcmp+0x28e>
   1781c:	f851 3b04 	ldr.w	r3, [r1], #4
   17820:	ea84 0402 	eor.w	r4, r4, r2
   17824:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   17828:	d109      	bne.n	1783e <strcmp+0x296>
   1782a:	f850 2b04 	ldr.w	r2, [r0], #4
   1782e:	e7eb      	b.n	17808 <strcmp+0x260>
   17830:	ea4f 6313 	mov.w	r3, r3, lsr #24
   17834:	e00d      	b.n	17852 <strcmp+0x2aa>
   17836:	f015 0fff 	tst.w	r5, #255	; 0xff
   1783a:	d105      	bne.n	17848 <strcmp+0x2a0>
   1783c:	680b      	ldr	r3, [r1, #0]
   1783e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   17842:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   17846:	e004      	b.n	17852 <strcmp+0x2aa>
   17848:	f04f 0000 	mov.w	r0, #0
   1784c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   17850:	4770      	bx	lr
   17852:	ba12      	rev	r2, r2
   17854:	ba1b      	rev	r3, r3
   17856:	fa82 f44c 	uadd8	r4, r2, ip
   1785a:	ea82 0403 	eor.w	r4, r2, r3
   1785e:	faa4 f58c 	sel	r5, r4, ip
   17862:	fab5 f485 	clz	r4, r5
   17866:	fa02 f204 	lsl.w	r2, r2, r4
   1786a:	fa03 f304 	lsl.w	r3, r3, r4
   1786e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   17872:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   17876:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1787a:	4770      	bx	lr

0001787c <strcpy>:
   1787c:	ea80 0201 	eor.w	r2, r0, r1
   17880:	4684      	mov	ip, r0
   17882:	f012 0f03 	tst.w	r2, #3
   17886:	d14f      	bne.n	17928 <strcpy+0xac>
   17888:	f011 0f03 	tst.w	r1, #3
   1788c:	d132      	bne.n	178f4 <strcpy+0x78>
   1788e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   17892:	f011 0f04 	tst.w	r1, #4
   17896:	f851 3b04 	ldr.w	r3, [r1], #4
   1789a:	d00b      	beq.n	178b4 <strcpy+0x38>
   1789c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   178a0:	439a      	bics	r2, r3
   178a2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   178a6:	bf04      	itt	eq
   178a8:	f84c 3b04 	streq.w	r3, [ip], #4
   178ac:	f851 3b04 	ldreq.w	r3, [r1], #4
   178b0:	d116      	bne.n	178e0 <strcpy+0x64>
   178b2:	bf00      	nop
   178b4:	f851 4b04 	ldr.w	r4, [r1], #4
   178b8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   178bc:	439a      	bics	r2, r3
   178be:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   178c2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   178c6:	d10b      	bne.n	178e0 <strcpy+0x64>
   178c8:	f84c 3b04 	str.w	r3, [ip], #4
   178cc:	43a2      	bics	r2, r4
   178ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   178d2:	bf04      	itt	eq
   178d4:	f851 3b04 	ldreq.w	r3, [r1], #4
   178d8:	f84c 4b04 	streq.w	r4, [ip], #4
   178dc:	d0ea      	beq.n	178b4 <strcpy+0x38>
   178de:	4623      	mov	r3, r4
   178e0:	f80c 3b01 	strb.w	r3, [ip], #1
   178e4:	f013 0fff 	tst.w	r3, #255	; 0xff
   178e8:	ea4f 2333 	mov.w	r3, r3, ror #8
   178ec:	d1f8      	bne.n	178e0 <strcpy+0x64>
   178ee:	f85d 4b04 	ldr.w	r4, [sp], #4
   178f2:	4770      	bx	lr
   178f4:	f011 0f01 	tst.w	r1, #1
   178f8:	d006      	beq.n	17908 <strcpy+0x8c>
   178fa:	f811 2b01 	ldrb.w	r2, [r1], #1
   178fe:	f80c 2b01 	strb.w	r2, [ip], #1
   17902:	2a00      	cmp	r2, #0
   17904:	bf08      	it	eq
   17906:	4770      	bxeq	lr
   17908:	f011 0f02 	tst.w	r1, #2
   1790c:	d0bf      	beq.n	1788e <strcpy+0x12>
   1790e:	f831 2b02 	ldrh.w	r2, [r1], #2
   17912:	f012 0fff 	tst.w	r2, #255	; 0xff
   17916:	bf16      	itet	ne
   17918:	f82c 2b02 	strhne.w	r2, [ip], #2
   1791c:	f88c 2000 	strbeq.w	r2, [ip]
   17920:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   17924:	d1b3      	bne.n	1788e <strcpy+0x12>
   17926:	4770      	bx	lr
   17928:	f811 2b01 	ldrb.w	r2, [r1], #1
   1792c:	f80c 2b01 	strb.w	r2, [ip], #1
   17930:	2a00      	cmp	r2, #0
   17932:	d1f9      	bne.n	17928 <strcpy+0xac>
   17934:	4770      	bx	lr
   17936:	bf00      	nop

00017938 <strncmp>:
   17938:	2a00      	cmp	r2, #0
   1793a:	d041      	beq.n	179c0 <strncmp+0x88>
   1793c:	ea40 0301 	orr.w	r3, r0, r1
   17940:	f013 0303 	ands.w	r3, r3, #3
   17944:	b4f0      	push	{r4, r5, r6, r7}
   17946:	d125      	bne.n	17994 <strncmp+0x5c>
   17948:	2a03      	cmp	r2, #3
   1794a:	d923      	bls.n	17994 <strncmp+0x5c>
   1794c:	6804      	ldr	r4, [r0, #0]
   1794e:	680d      	ldr	r5, [r1, #0]
   17950:	42ac      	cmp	r4, r5
   17952:	d11f      	bne.n	17994 <strncmp+0x5c>
   17954:	3a04      	subs	r2, #4
   17956:	d038      	beq.n	179ca <strncmp+0x92>
   17958:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1795c:	ea25 0404 	bic.w	r4, r5, r4
   17960:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   17964:	d12e      	bne.n	179c4 <strncmp+0x8c>
   17966:	3004      	adds	r0, #4
   17968:	3104      	adds	r1, #4
   1796a:	e00f      	b.n	1798c <strncmp+0x54>
   1796c:	f850 3b04 	ldr.w	r3, [r0], #4
   17970:	680e      	ldr	r6, [r1, #0]
   17972:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   17976:	42b3      	cmp	r3, r6
   17978:	ea24 0403 	bic.w	r4, r4, r3
   1797c:	f101 0104 	add.w	r1, r1, #4
   17980:	d126      	bne.n	179d0 <strncmp+0x98>
   17982:	3a04      	subs	r2, #4
   17984:	d021      	beq.n	179ca <strncmp+0x92>
   17986:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1798a:	d11b      	bne.n	179c4 <strncmp+0x8c>
   1798c:	2a03      	cmp	r2, #3
   1798e:	4607      	mov	r7, r0
   17990:	460d      	mov	r5, r1
   17992:	d8eb      	bhi.n	1796c <strncmp+0x34>
   17994:	7805      	ldrb	r5, [r0, #0]
   17996:	780c      	ldrb	r4, [r1, #0]
   17998:	42ac      	cmp	r4, r5
   1799a:	f102 33ff 	add.w	r3, r2, #4294967295
   1799e:	d11a      	bne.n	179d6 <strncmp+0x9e>
   179a0:	b183      	cbz	r3, 179c4 <strncmp+0x8c>
   179a2:	b914      	cbnz	r4, 179aa <strncmp+0x72>
   179a4:	e00e      	b.n	179c4 <strncmp+0x8c>
   179a6:	b16b      	cbz	r3, 179c4 <strncmp+0x8c>
   179a8:	b17a      	cbz	r2, 179ca <strncmp+0x92>
   179aa:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   179ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   179b2:	42a2      	cmp	r2, r4
   179b4:	f103 33ff 	add.w	r3, r3, #4294967295
   179b8:	d0f5      	beq.n	179a6 <strncmp+0x6e>
   179ba:	1b10      	subs	r0, r2, r4
   179bc:	bcf0      	pop	{r4, r5, r6, r7}
   179be:	4770      	bx	lr
   179c0:	4610      	mov	r0, r2
   179c2:	4770      	bx	lr
   179c4:	2000      	movs	r0, #0
   179c6:	bcf0      	pop	{r4, r5, r6, r7}
   179c8:	4770      	bx	lr
   179ca:	4610      	mov	r0, r2
   179cc:	bcf0      	pop	{r4, r5, r6, r7}
   179ce:	4770      	bx	lr
   179d0:	4629      	mov	r1, r5
   179d2:	4638      	mov	r0, r7
   179d4:	e7de      	b.n	17994 <strncmp+0x5c>
   179d6:	462a      	mov	r2, r5
   179d8:	e7ef      	b.n	179ba <strncmp+0x82>
   179da:	bf00      	nop

000179dc <_strtoul_l.isra.0>:
   179dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179e0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   179e4:	460e      	mov	r6, r1
   179e6:	4607      	mov	r7, r0
   179e8:	4615      	mov	r5, r2
   179ea:	4698      	mov	r8, r3
   179ec:	468a      	mov	sl, r1
   179ee:	e000      	b.n	179f2 <_strtoul_l.isra.0+0x16>
   179f0:	46a2      	mov	sl, r4
   179f2:	4654      	mov	r4, sl
   179f4:	4648      	mov	r0, r9
   179f6:	f814 bb01 	ldrb.w	fp, [r4], #1
   179fa:	f001 fd6b 	bl	194d4 <__locale_ctype_ptr_l>
   179fe:	4458      	add	r0, fp
   17a00:	7840      	ldrb	r0, [r0, #1]
   17a02:	f010 0008 	ands.w	r0, r0, #8
   17a06:	d1f3      	bne.n	179f0 <_strtoul_l.isra.0+0x14>
   17a08:	4659      	mov	r1, fp
   17a0a:	292d      	cmp	r1, #45	; 0x2d
   17a0c:	d059      	beq.n	17ac2 <_strtoul_l.isra.0+0xe6>
   17a0e:	292b      	cmp	r1, #43	; 0x2b
   17a10:	bf04      	itt	eq
   17a12:	7821      	ldrbeq	r1, [r4, #0]
   17a14:	f10a 0402 	addeq.w	r4, sl, #2
   17a18:	f1b8 0f00 	cmp.w	r8, #0
   17a1c:	d00c      	beq.n	17a38 <_strtoul_l.isra.0+0x5c>
   17a1e:	f1b8 0f10 	cmp.w	r8, #16
   17a22:	d053      	beq.n	17acc <_strtoul_l.isra.0+0xf0>
   17a24:	f04f 3cff 	mov.w	ip, #4294967295
   17a28:	fbbc fcf8 	udiv	ip, ip, r8
   17a2c:	fb08 fa0c 	mul.w	sl, r8, ip
   17a30:	ea6f 0a0a 	mvn.w	sl, sl
   17a34:	46c1      	mov	r9, r8
   17a36:	e008      	b.n	17a4a <_strtoul_l.isra.0+0x6e>
   17a38:	2930      	cmp	r1, #48	; 0x30
   17a3a:	d058      	beq.n	17aee <_strtoul_l.isra.0+0x112>
   17a3c:	f04f 080a 	mov.w	r8, #10
   17a40:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 17b20 <_strtoul_l.isra.0+0x144>
   17a44:	46c1      	mov	r9, r8
   17a46:	f04f 0a05 	mov.w	sl, #5
   17a4a:	2300      	movs	r3, #0
   17a4c:	469e      	mov	lr, r3
   17a4e:	e005      	b.n	17a5c <_strtoul_l.isra.0+0x80>
   17a50:	d02a      	beq.n	17aa8 <_strtoul_l.isra.0+0xcc>
   17a52:	fb09 2e0e 	mla	lr, r9, lr, r2
   17a56:	2301      	movs	r3, #1
   17a58:	f814 1b01 	ldrb.w	r1, [r4], #1
   17a5c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   17a60:	2a09      	cmp	r2, #9
   17a62:	d905      	bls.n	17a70 <_strtoul_l.isra.0+0x94>
   17a64:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   17a68:	2a19      	cmp	r2, #25
   17a6a:	d80a      	bhi.n	17a82 <_strtoul_l.isra.0+0xa6>
   17a6c:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   17a70:	4590      	cmp	r8, r2
   17a72:	dd0e      	ble.n	17a92 <_strtoul_l.isra.0+0xb6>
   17a74:	2b00      	cmp	r3, #0
   17a76:	db01      	blt.n	17a7c <_strtoul_l.isra.0+0xa0>
   17a78:	45e6      	cmp	lr, ip
   17a7a:	d9e9      	bls.n	17a50 <_strtoul_l.isra.0+0x74>
   17a7c:	f04f 33ff 	mov.w	r3, #4294967295
   17a80:	e7ea      	b.n	17a58 <_strtoul_l.isra.0+0x7c>
   17a82:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   17a86:	2a19      	cmp	r2, #25
   17a88:	d803      	bhi.n	17a92 <_strtoul_l.isra.0+0xb6>
   17a8a:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   17a8e:	4590      	cmp	r8, r2
   17a90:	dcf0      	bgt.n	17a74 <_strtoul_l.isra.0+0x98>
   17a92:	2b00      	cmp	r3, #0
   17a94:	db0d      	blt.n	17ab2 <_strtoul_l.isra.0+0xd6>
   17a96:	b108      	cbz	r0, 17a9c <_strtoul_l.isra.0+0xc0>
   17a98:	f1ce 0e00 	rsb	lr, lr, #0
   17a9c:	b10d      	cbz	r5, 17aa2 <_strtoul_l.isra.0+0xc6>
   17a9e:	b973      	cbnz	r3, 17abe <_strtoul_l.isra.0+0xe2>
   17aa0:	602e      	str	r6, [r5, #0]
   17aa2:	4670      	mov	r0, lr
   17aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17aa8:	4552      	cmp	r2, sl
   17aaa:	ddd2      	ble.n	17a52 <_strtoul_l.isra.0+0x76>
   17aac:	f04f 33ff 	mov.w	r3, #4294967295
   17ab0:	e7d2      	b.n	17a58 <_strtoul_l.isra.0+0x7c>
   17ab2:	2322      	movs	r3, #34	; 0x22
   17ab4:	603b      	str	r3, [r7, #0]
   17ab6:	f04f 3eff 	mov.w	lr, #4294967295
   17aba:	2d00      	cmp	r5, #0
   17abc:	d0f1      	beq.n	17aa2 <_strtoul_l.isra.0+0xc6>
   17abe:	1e66      	subs	r6, r4, #1
   17ac0:	e7ee      	b.n	17aa0 <_strtoul_l.isra.0+0xc4>
   17ac2:	7821      	ldrb	r1, [r4, #0]
   17ac4:	2001      	movs	r0, #1
   17ac6:	f10a 0402 	add.w	r4, sl, #2
   17aca:	e7a5      	b.n	17a18 <_strtoul_l.isra.0+0x3c>
   17acc:	2930      	cmp	r1, #48	; 0x30
   17ace:	d11b      	bne.n	17b08 <_strtoul_l.isra.0+0x12c>
   17ad0:	7823      	ldrb	r3, [r4, #0]
   17ad2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   17ad6:	2b58      	cmp	r3, #88	; 0x58
   17ad8:	d11c      	bne.n	17b14 <_strtoul_l.isra.0+0x138>
   17ada:	f04f 0910 	mov.w	r9, #16
   17ade:	7861      	ldrb	r1, [r4, #1]
   17ae0:	46c8      	mov	r8, r9
   17ae2:	f04f 0a0f 	mov.w	sl, #15
   17ae6:	3402      	adds	r4, #2
   17ae8:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   17aec:	e7ad      	b.n	17a4a <_strtoul_l.isra.0+0x6e>
   17aee:	7823      	ldrb	r3, [r4, #0]
   17af0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   17af4:	2b58      	cmp	r3, #88	; 0x58
   17af6:	d0f0      	beq.n	17ada <_strtoul_l.isra.0+0xfe>
   17af8:	f04f 0808 	mov.w	r8, #8
   17afc:	46c1      	mov	r9, r8
   17afe:	f04f 0a07 	mov.w	sl, #7
   17b02:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   17b06:	e7a0      	b.n	17a4a <_strtoul_l.isra.0+0x6e>
   17b08:	f04f 0a0f 	mov.w	sl, #15
   17b0c:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   17b10:	46c1      	mov	r9, r8
   17b12:	e79a      	b.n	17a4a <_strtoul_l.isra.0+0x6e>
   17b14:	46c1      	mov	r9, r8
   17b16:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   17b1a:	f04f 0a0f 	mov.w	sl, #15
   17b1e:	e794      	b.n	17a4a <_strtoul_l.isra.0+0x6e>
   17b20:	19999999 	.word	0x19999999

00017b24 <_strtoul_r>:
   17b24:	b530      	push	{r4, r5, lr}
   17b26:	4c06      	ldr	r4, [pc, #24]	; (17b40 <_strtoul_r+0x1c>)
   17b28:	4d06      	ldr	r5, [pc, #24]	; (17b44 <_strtoul_r+0x20>)
   17b2a:	6824      	ldr	r4, [r4, #0]
   17b2c:	6b64      	ldr	r4, [r4, #52]	; 0x34
   17b2e:	b083      	sub	sp, #12
   17b30:	2c00      	cmp	r4, #0
   17b32:	bf08      	it	eq
   17b34:	462c      	moveq	r4, r5
   17b36:	9400      	str	r4, [sp, #0]
   17b38:	f7ff ff50 	bl	179dc <_strtoul_l.isra.0>
   17b3c:	b003      	add	sp, #12
   17b3e:	bd30      	pop	{r4, r5, pc}
   17b40:	2000019c 	.word	0x2000019c
   17b44:	20000a28 	.word	0x20000a28

00017b48 <strtoul>:
   17b48:	b530      	push	{r4, r5, lr}
   17b4a:	4c08      	ldr	r4, [pc, #32]	; (17b6c <strtoul+0x24>)
   17b4c:	4b08      	ldr	r3, [pc, #32]	; (17b70 <strtoul+0x28>)
   17b4e:	6825      	ldr	r5, [r4, #0]
   17b50:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   17b52:	b083      	sub	sp, #12
   17b54:	2c00      	cmp	r4, #0
   17b56:	bf08      	it	eq
   17b58:	461c      	moveq	r4, r3
   17b5a:	9400      	str	r4, [sp, #0]
   17b5c:	4613      	mov	r3, r2
   17b5e:	460a      	mov	r2, r1
   17b60:	4601      	mov	r1, r0
   17b62:	4628      	mov	r0, r5
   17b64:	f7ff ff3a 	bl	179dc <_strtoul_l.isra.0>
   17b68:	b003      	add	sp, #12
   17b6a:	bd30      	pop	{r4, r5, pc}
   17b6c:	2000019c 	.word	0x2000019c
   17b70:	20000a28 	.word	0x20000a28

00017b74 <__ssprint_r>:
   17b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b78:	6893      	ldr	r3, [r2, #8]
   17b7a:	b083      	sub	sp, #12
   17b7c:	4690      	mov	r8, r2
   17b7e:	2b00      	cmp	r3, #0
   17b80:	d070      	beq.n	17c64 <__ssprint_r+0xf0>
   17b82:	4682      	mov	sl, r0
   17b84:	460c      	mov	r4, r1
   17b86:	6817      	ldr	r7, [r2, #0]
   17b88:	688d      	ldr	r5, [r1, #8]
   17b8a:	6808      	ldr	r0, [r1, #0]
   17b8c:	e042      	b.n	17c14 <__ssprint_r+0xa0>
   17b8e:	89a3      	ldrh	r3, [r4, #12]
   17b90:	f413 6f90 	tst.w	r3, #1152	; 0x480
   17b94:	d02e      	beq.n	17bf4 <__ssprint_r+0x80>
   17b96:	6965      	ldr	r5, [r4, #20]
   17b98:	6921      	ldr	r1, [r4, #16]
   17b9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   17b9e:	eba0 0b01 	sub.w	fp, r0, r1
   17ba2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   17ba6:	f10b 0001 	add.w	r0, fp, #1
   17baa:	106d      	asrs	r5, r5, #1
   17bac:	4430      	add	r0, r6
   17bae:	42a8      	cmp	r0, r5
   17bb0:	462a      	mov	r2, r5
   17bb2:	bf84      	itt	hi
   17bb4:	4605      	movhi	r5, r0
   17bb6:	462a      	movhi	r2, r5
   17bb8:	055b      	lsls	r3, r3, #21
   17bba:	d538      	bpl.n	17c2e <__ssprint_r+0xba>
   17bbc:	4611      	mov	r1, r2
   17bbe:	4650      	mov	r0, sl
   17bc0:	f7ff f96c 	bl	16e9c <_malloc_r>
   17bc4:	2800      	cmp	r0, #0
   17bc6:	d03c      	beq.n	17c42 <__ssprint_r+0xce>
   17bc8:	465a      	mov	r2, fp
   17bca:	6921      	ldr	r1, [r4, #16]
   17bcc:	9001      	str	r0, [sp, #4]
   17bce:	f7fe fba5 	bl	1631c <memcpy>
   17bd2:	89a2      	ldrh	r2, [r4, #12]
   17bd4:	9b01      	ldr	r3, [sp, #4]
   17bd6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   17bda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   17bde:	81a2      	strh	r2, [r4, #12]
   17be0:	eba5 020b 	sub.w	r2, r5, fp
   17be4:	eb03 000b 	add.w	r0, r3, fp
   17be8:	6165      	str	r5, [r4, #20]
   17bea:	6123      	str	r3, [r4, #16]
   17bec:	6020      	str	r0, [r4, #0]
   17bee:	60a2      	str	r2, [r4, #8]
   17bf0:	4635      	mov	r5, r6
   17bf2:	46b3      	mov	fp, r6
   17bf4:	465a      	mov	r2, fp
   17bf6:	4649      	mov	r1, r9
   17bf8:	f001 fcc2 	bl	19580 <memmove>
   17bfc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   17c00:	68a2      	ldr	r2, [r4, #8]
   17c02:	6820      	ldr	r0, [r4, #0]
   17c04:	1b55      	subs	r5, r2, r5
   17c06:	4458      	add	r0, fp
   17c08:	1b9e      	subs	r6, r3, r6
   17c0a:	60a5      	str	r5, [r4, #8]
   17c0c:	6020      	str	r0, [r4, #0]
   17c0e:	f8c8 6008 	str.w	r6, [r8, #8]
   17c12:	b33e      	cbz	r6, 17c64 <__ssprint_r+0xf0>
   17c14:	687e      	ldr	r6, [r7, #4]
   17c16:	463b      	mov	r3, r7
   17c18:	3708      	adds	r7, #8
   17c1a:	2e00      	cmp	r6, #0
   17c1c:	d0fa      	beq.n	17c14 <__ssprint_r+0xa0>
   17c1e:	42ae      	cmp	r6, r5
   17c20:	f8d3 9000 	ldr.w	r9, [r3]
   17c24:	46ab      	mov	fp, r5
   17c26:	d2b2      	bcs.n	17b8e <__ssprint_r+0x1a>
   17c28:	4635      	mov	r5, r6
   17c2a:	46b3      	mov	fp, r6
   17c2c:	e7e2      	b.n	17bf4 <__ssprint_r+0x80>
   17c2e:	4650      	mov	r0, sl
   17c30:	f001 fd0a 	bl	19648 <_realloc_r>
   17c34:	4603      	mov	r3, r0
   17c36:	2800      	cmp	r0, #0
   17c38:	d1d2      	bne.n	17be0 <__ssprint_r+0x6c>
   17c3a:	6921      	ldr	r1, [r4, #16]
   17c3c:	4650      	mov	r0, sl
   17c3e:	f001 fb47 	bl	192d0 <_free_r>
   17c42:	230c      	movs	r3, #12
   17c44:	f8ca 3000 	str.w	r3, [sl]
   17c48:	89a3      	ldrh	r3, [r4, #12]
   17c4a:	2200      	movs	r2, #0
   17c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17c50:	f04f 30ff 	mov.w	r0, #4294967295
   17c54:	81a3      	strh	r3, [r4, #12]
   17c56:	f8c8 2008 	str.w	r2, [r8, #8]
   17c5a:	f8c8 2004 	str.w	r2, [r8, #4]
   17c5e:	b003      	add	sp, #12
   17c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c64:	2000      	movs	r0, #0
   17c66:	f8c8 0004 	str.w	r0, [r8, #4]
   17c6a:	b003      	add	sp, #12
   17c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017c70 <_svfiprintf_r>:
   17c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c74:	b0ad      	sub	sp, #180	; 0xb4
   17c76:	460c      	mov	r4, r1
   17c78:	9105      	str	r1, [sp, #20]
   17c7a:	8989      	ldrh	r1, [r1, #12]
   17c7c:	9307      	str	r3, [sp, #28]
   17c7e:	060d      	lsls	r5, r1, #24
   17c80:	900a      	str	r0, [sp, #40]	; 0x28
   17c82:	d503      	bpl.n	17c8c <_svfiprintf_r+0x1c>
   17c84:	6923      	ldr	r3, [r4, #16]
   17c86:	2b00      	cmp	r3, #0
   17c88:	f000 84d6 	beq.w	18638 <_svfiprintf_r+0x9c8>
   17c8c:	2300      	movs	r3, #0
   17c8e:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   17c92:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   17c94:	930b      	str	r3, [sp, #44]	; 0x2c
   17c96:	4693      	mov	fp, r2
   17c98:	9311      	str	r3, [sp, #68]	; 0x44
   17c9a:	9310      	str	r3, [sp, #64]	; 0x40
   17c9c:	9302      	str	r3, [sp, #8]
   17c9e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   17ca2:	46d1      	mov	r9, sl
   17ca4:	f89b 3000 	ldrb.w	r3, [fp]
   17ca8:	465c      	mov	r4, fp
   17caa:	b1eb      	cbz	r3, 17ce8 <_svfiprintf_r+0x78>
   17cac:	2b25      	cmp	r3, #37	; 0x25
   17cae:	d102      	bne.n	17cb6 <_svfiprintf_r+0x46>
   17cb0:	e01a      	b.n	17ce8 <_svfiprintf_r+0x78>
   17cb2:	2b25      	cmp	r3, #37	; 0x25
   17cb4:	d003      	beq.n	17cbe <_svfiprintf_r+0x4e>
   17cb6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   17cba:	2b00      	cmp	r3, #0
   17cbc:	d1f9      	bne.n	17cb2 <_svfiprintf_r+0x42>
   17cbe:	eba4 050b 	sub.w	r5, r4, fp
   17cc2:	b18d      	cbz	r5, 17ce8 <_svfiprintf_r+0x78>
   17cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17cc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17cc8:	f8c9 b000 	str.w	fp, [r9]
   17ccc:	3301      	adds	r3, #1
   17cce:	442a      	add	r2, r5
   17cd0:	2b07      	cmp	r3, #7
   17cd2:	f8c9 5004 	str.w	r5, [r9, #4]
   17cd6:	9211      	str	r2, [sp, #68]	; 0x44
   17cd8:	9310      	str	r3, [sp, #64]	; 0x40
   17cda:	f300 83c3 	bgt.w	18464 <_svfiprintf_r+0x7f4>
   17cde:	f109 0908 	add.w	r9, r9, #8
   17ce2:	9b02      	ldr	r3, [sp, #8]
   17ce4:	442b      	add	r3, r5
   17ce6:	9302      	str	r3, [sp, #8]
   17ce8:	7823      	ldrb	r3, [r4, #0]
   17cea:	2b00      	cmp	r3, #0
   17cec:	f000 834b 	beq.w	18386 <_svfiprintf_r+0x716>
   17cf0:	2000      	movs	r0, #0
   17cf2:	f04f 0300 	mov.w	r3, #0
   17cf6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   17cfa:	f104 0b01 	add.w	fp, r4, #1
   17cfe:	7862      	ldrb	r2, [r4, #1]
   17d00:	4605      	mov	r5, r0
   17d02:	4603      	mov	r3, r0
   17d04:	f04f 38ff 	mov.w	r8, #4294967295
   17d08:	4604      	mov	r4, r0
   17d0a:	f10b 0b01 	add.w	fp, fp, #1
   17d0e:	f1a2 0120 	sub.w	r1, r2, #32
   17d12:	2958      	cmp	r1, #88	; 0x58
   17d14:	f200 826b 	bhi.w	181ee <_svfiprintf_r+0x57e>
   17d18:	e8df f011 	tbh	[pc, r1, lsl #1]
   17d1c:	026900bd 	.word	0x026900bd
   17d20:	00b80269 	.word	0x00b80269
   17d24:	02690269 	.word	0x02690269
   17d28:	02690269 	.word	0x02690269
   17d2c:	02690269 	.word	0x02690269
   17d30:	00b30059 	.word	0x00b30059
   17d34:	00630269 	.word	0x00630269
   17d38:	026901c0 	.word	0x026901c0
   17d3c:	01ad01bb 	.word	0x01ad01bb
   17d40:	01ad01ad 	.word	0x01ad01ad
   17d44:	01ad01ad 	.word	0x01ad01ad
   17d48:	01ad01ad 	.word	0x01ad01ad
   17d4c:	01ad01ad 	.word	0x01ad01ad
   17d50:	02690269 	.word	0x02690269
   17d54:	02690269 	.word	0x02690269
   17d58:	02690269 	.word	0x02690269
   17d5c:	02690269 	.word	0x02690269
   17d60:	02690269 	.word	0x02690269
   17d64:	0269015f 	.word	0x0269015f
   17d68:	02690269 	.word	0x02690269
   17d6c:	02690269 	.word	0x02690269
   17d70:	02690269 	.word	0x02690269
   17d74:	02690269 	.word	0x02690269
   17d78:	014d0269 	.word	0x014d0269
   17d7c:	02690269 	.word	0x02690269
   17d80:	02690269 	.word	0x02690269
   17d84:	013c0269 	.word	0x013c0269
   17d88:	02690269 	.word	0x02690269
   17d8c:	02690125 	.word	0x02690125
   17d90:	02690269 	.word	0x02690269
   17d94:	02690269 	.word	0x02690269
   17d98:	02690269 	.word	0x02690269
   17d9c:	02690269 	.word	0x02690269
   17da0:	00c50269 	.word	0x00c50269
   17da4:	02690200 	.word	0x02690200
   17da8:	02690269 	.word	0x02690269
   17dac:	020001fb 	.word	0x020001fb
   17db0:	02690269 	.word	0x02690269
   17db4:	026901ee 	.word	0x026901ee
   17db8:	007a01da 	.word	0x007a01da
   17dbc:	02310236 	.word	0x02310236
   17dc0:	020e0269 	.word	0x020e0269
   17dc4:	00680269 	.word	0x00680269
   17dc8:	02690269 	.word	0x02690269
   17dcc:	008f      	.short	0x008f
   17dce:	9907      	ldr	r1, [sp, #28]
   17dd0:	680c      	ldr	r4, [r1, #0]
   17dd2:	460a      	mov	r2, r1
   17dd4:	2c00      	cmp	r4, #0
   17dd6:	f102 0204 	add.w	r2, r2, #4
   17dda:	f280 83c9 	bge.w	18570 <_svfiprintf_r+0x900>
   17dde:	4264      	negs	r4, r4
   17de0:	9207      	str	r2, [sp, #28]
   17de2:	f043 0304 	orr.w	r3, r3, #4
   17de6:	f89b 2000 	ldrb.w	r2, [fp]
   17dea:	e78e      	b.n	17d0a <_svfiprintf_r+0x9a>
   17dec:	9406      	str	r4, [sp, #24]
   17dee:	069c      	lsls	r4, r3, #26
   17df0:	f100 80d6 	bmi.w	17fa0 <_svfiprintf_r+0x330>
   17df4:	9907      	ldr	r1, [sp, #28]
   17df6:	06d8      	lsls	r0, r3, #27
   17df8:	460a      	mov	r2, r1
   17dfa:	f100 820a 	bmi.w	18212 <_svfiprintf_r+0x5a2>
   17dfe:	065e      	lsls	r6, r3, #25
   17e00:	f140 8207 	bpl.w	18212 <_svfiprintf_r+0x5a2>
   17e04:	880c      	ldrh	r4, [r1, #0]
   17e06:	3104      	adds	r1, #4
   17e08:	2500      	movs	r5, #0
   17e0a:	2201      	movs	r2, #1
   17e0c:	9107      	str	r1, [sp, #28]
   17e0e:	e1cc      	b.n	181aa <_svfiprintf_r+0x53a>
   17e10:	f013 0220 	ands.w	r2, r3, #32
   17e14:	9406      	str	r4, [sp, #24]
   17e16:	f040 80d5 	bne.w	17fc4 <_svfiprintf_r+0x354>
   17e1a:	f013 0110 	ands.w	r1, r3, #16
   17e1e:	f040 81fe 	bne.w	1821e <_svfiprintf_r+0x5ae>
   17e22:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   17e26:	f000 81fa 	beq.w	1821e <_svfiprintf_r+0x5ae>
   17e2a:	9807      	ldr	r0, [sp, #28]
   17e2c:	460a      	mov	r2, r1
   17e2e:	4601      	mov	r1, r0
   17e30:	3104      	adds	r1, #4
   17e32:	8804      	ldrh	r4, [r0, #0]
   17e34:	9107      	str	r1, [sp, #28]
   17e36:	2500      	movs	r5, #0
   17e38:	e1b7      	b.n	181aa <_svfiprintf_r+0x53a>
   17e3a:	9406      	str	r4, [sp, #24]
   17e3c:	2800      	cmp	r0, #0
   17e3e:	f040 8431 	bne.w	186a4 <_svfiprintf_r+0xa34>
   17e42:	49ba      	ldr	r1, [pc, #744]	; (1812c <_svfiprintf_r+0x4bc>)
   17e44:	910b      	str	r1, [sp, #44]	; 0x2c
   17e46:	069d      	lsls	r5, r3, #26
   17e48:	f100 8096 	bmi.w	17f78 <_svfiprintf_r+0x308>
   17e4c:	9807      	ldr	r0, [sp, #28]
   17e4e:	06dc      	lsls	r4, r3, #27
   17e50:	4601      	mov	r1, r0
   17e52:	d402      	bmi.n	17e5a <_svfiprintf_r+0x1ea>
   17e54:	0658      	lsls	r0, r3, #25
   17e56:	f100 83a9 	bmi.w	185ac <_svfiprintf_r+0x93c>
   17e5a:	680c      	ldr	r4, [r1, #0]
   17e5c:	3104      	adds	r1, #4
   17e5e:	9107      	str	r1, [sp, #28]
   17e60:	2500      	movs	r5, #0
   17e62:	07d9      	lsls	r1, r3, #31
   17e64:	f140 8094 	bpl.w	17f90 <_svfiprintf_r+0x320>
   17e68:	ea54 0105 	orrs.w	r1, r4, r5
   17e6c:	f000 8090 	beq.w	17f90 <_svfiprintf_r+0x320>
   17e70:	2130      	movs	r1, #48	; 0x30
   17e72:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   17e76:	f043 0302 	orr.w	r3, r3, #2
   17e7a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   17e7e:	2202      	movs	r2, #2
   17e80:	e193      	b.n	181aa <_svfiprintf_r+0x53a>
   17e82:	f89b 2000 	ldrb.w	r2, [fp]
   17e86:	2001      	movs	r0, #1
   17e88:	252b      	movs	r5, #43	; 0x2b
   17e8a:	e73e      	b.n	17d0a <_svfiprintf_r+0x9a>
   17e8c:	f043 0301 	orr.w	r3, r3, #1
   17e90:	f89b 2000 	ldrb.w	r2, [fp]
   17e94:	e739      	b.n	17d0a <_svfiprintf_r+0x9a>
   17e96:	f89b 2000 	ldrb.w	r2, [fp]
   17e9a:	2d00      	cmp	r5, #0
   17e9c:	f47f af35 	bne.w	17d0a <_svfiprintf_r+0x9a>
   17ea0:	2001      	movs	r0, #1
   17ea2:	2520      	movs	r5, #32
   17ea4:	e731      	b.n	17d0a <_svfiprintf_r+0x9a>
   17ea6:	9907      	ldr	r1, [sp, #28]
   17ea8:	9406      	str	r4, [sp, #24]
   17eaa:	680a      	ldr	r2, [r1, #0]
   17eac:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   17eb0:	f04f 0000 	mov.w	r0, #0
   17eb4:	460a      	mov	r2, r1
   17eb6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   17eba:	3204      	adds	r2, #4
   17ebc:	2001      	movs	r0, #1
   17ebe:	9000      	str	r0, [sp, #0]
   17ec0:	9207      	str	r2, [sp, #28]
   17ec2:	9004      	str	r0, [sp, #16]
   17ec4:	ae12      	add	r6, sp, #72	; 0x48
   17ec6:	9301      	str	r3, [sp, #4]
   17ec8:	f04f 0800 	mov.w	r8, #0
   17ecc:	9b01      	ldr	r3, [sp, #4]
   17ece:	f013 0302 	ands.w	r3, r3, #2
   17ed2:	9308      	str	r3, [sp, #32]
   17ed4:	d002      	beq.n	17edc <_svfiprintf_r+0x26c>
   17ed6:	9b00      	ldr	r3, [sp, #0]
   17ed8:	3302      	adds	r3, #2
   17eda:	9300      	str	r3, [sp, #0]
   17edc:	9b01      	ldr	r3, [sp, #4]
   17ede:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   17ee2:	9309      	str	r3, [sp, #36]	; 0x24
   17ee4:	f040 81a2 	bne.w	1822c <_svfiprintf_r+0x5bc>
   17ee8:	9b06      	ldr	r3, [sp, #24]
   17eea:	9a00      	ldr	r2, [sp, #0]
   17eec:	1a9c      	subs	r4, r3, r2
   17eee:	2c00      	cmp	r4, #0
   17ef0:	f340 819c 	ble.w	1822c <_svfiprintf_r+0x5bc>
   17ef4:	2c10      	cmp	r4, #16
   17ef6:	9911      	ldr	r1, [sp, #68]	; 0x44
   17ef8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17efa:	4d8d      	ldr	r5, [pc, #564]	; (18130 <_svfiprintf_r+0x4c0>)
   17efc:	dd25      	ble.n	17f4a <_svfiprintf_r+0x2da>
   17efe:	4648      	mov	r0, r9
   17f00:	2310      	movs	r3, #16
   17f02:	46c1      	mov	r9, r8
   17f04:	46b0      	mov	r8, r6
   17f06:	9e05      	ldr	r6, [sp, #20]
   17f08:	e004      	b.n	17f14 <_svfiprintf_r+0x2a4>
   17f0a:	3c10      	subs	r4, #16
   17f0c:	2c10      	cmp	r4, #16
   17f0e:	f100 0008 	add.w	r0, r0, #8
   17f12:	dd17      	ble.n	17f44 <_svfiprintf_r+0x2d4>
   17f14:	3201      	adds	r2, #1
   17f16:	3110      	adds	r1, #16
   17f18:	2a07      	cmp	r2, #7
   17f1a:	9111      	str	r1, [sp, #68]	; 0x44
   17f1c:	9210      	str	r2, [sp, #64]	; 0x40
   17f1e:	6005      	str	r5, [r0, #0]
   17f20:	6043      	str	r3, [r0, #4]
   17f22:	ddf2      	ble.n	17f0a <_svfiprintf_r+0x29a>
   17f24:	aa0f      	add	r2, sp, #60	; 0x3c
   17f26:	4631      	mov	r1, r6
   17f28:	4638      	mov	r0, r7
   17f2a:	9303      	str	r3, [sp, #12]
   17f2c:	f7ff fe22 	bl	17b74 <__ssprint_r>
   17f30:	2800      	cmp	r0, #0
   17f32:	f040 822f 	bne.w	18394 <_svfiprintf_r+0x724>
   17f36:	3c10      	subs	r4, #16
   17f38:	2c10      	cmp	r4, #16
   17f3a:	9911      	ldr	r1, [sp, #68]	; 0x44
   17f3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17f3e:	9b03      	ldr	r3, [sp, #12]
   17f40:	4650      	mov	r0, sl
   17f42:	dce7      	bgt.n	17f14 <_svfiprintf_r+0x2a4>
   17f44:	4646      	mov	r6, r8
   17f46:	46c8      	mov	r8, r9
   17f48:	4681      	mov	r9, r0
   17f4a:	1c53      	adds	r3, r2, #1
   17f4c:	4421      	add	r1, r4
   17f4e:	2b07      	cmp	r3, #7
   17f50:	9111      	str	r1, [sp, #68]	; 0x44
   17f52:	9310      	str	r3, [sp, #64]	; 0x40
   17f54:	f8c9 5000 	str.w	r5, [r9]
   17f58:	f8c9 4004 	str.w	r4, [r9, #4]
   17f5c:	f300 82f2 	bgt.w	18544 <_svfiprintf_r+0x8d4>
   17f60:	f109 0908 	add.w	r9, r9, #8
   17f64:	e164      	b.n	18230 <_svfiprintf_r+0x5c0>
   17f66:	9406      	str	r4, [sp, #24]
   17f68:	2800      	cmp	r0, #0
   17f6a:	f040 83a5 	bne.w	186b8 <_svfiprintf_r+0xa48>
   17f6e:	4971      	ldr	r1, [pc, #452]	; (18134 <_svfiprintf_r+0x4c4>)
   17f70:	910b      	str	r1, [sp, #44]	; 0x2c
   17f72:	069d      	lsls	r5, r3, #26
   17f74:	f57f af6a 	bpl.w	17e4c <_svfiprintf_r+0x1dc>
   17f78:	9c07      	ldr	r4, [sp, #28]
   17f7a:	3407      	adds	r4, #7
   17f7c:	f024 0107 	bic.w	r1, r4, #7
   17f80:	f101 0008 	add.w	r0, r1, #8
   17f84:	e9d1 4500 	ldrd	r4, r5, [r1]
   17f88:	07d9      	lsls	r1, r3, #31
   17f8a:	9007      	str	r0, [sp, #28]
   17f8c:	f53f af6c 	bmi.w	17e68 <_svfiprintf_r+0x1f8>
   17f90:	2202      	movs	r2, #2
   17f92:	e10a      	b.n	181aa <_svfiprintf_r+0x53a>
   17f94:	f043 0310 	orr.w	r3, r3, #16
   17f98:	9406      	str	r4, [sp, #24]
   17f9a:	069c      	lsls	r4, r3, #26
   17f9c:	f57f af2a 	bpl.w	17df4 <_svfiprintf_r+0x184>
   17fa0:	9c07      	ldr	r4, [sp, #28]
   17fa2:	3407      	adds	r4, #7
   17fa4:	f024 0207 	bic.w	r2, r4, #7
   17fa8:	f102 0108 	add.w	r1, r2, #8
   17fac:	e9d2 4500 	ldrd	r4, r5, [r2]
   17fb0:	9107      	str	r1, [sp, #28]
   17fb2:	2201      	movs	r2, #1
   17fb4:	e0f9      	b.n	181aa <_svfiprintf_r+0x53a>
   17fb6:	f043 0310 	orr.w	r3, r3, #16
   17fba:	f013 0220 	ands.w	r2, r3, #32
   17fbe:	9406      	str	r4, [sp, #24]
   17fc0:	f43f af2b 	beq.w	17e1a <_svfiprintf_r+0x1aa>
   17fc4:	9c07      	ldr	r4, [sp, #28]
   17fc6:	3407      	adds	r4, #7
   17fc8:	f024 0207 	bic.w	r2, r4, #7
   17fcc:	f102 0108 	add.w	r1, r2, #8
   17fd0:	e9d2 4500 	ldrd	r4, r5, [r2]
   17fd4:	9107      	str	r1, [sp, #28]
   17fd6:	2200      	movs	r2, #0
   17fd8:	e0e7      	b.n	181aa <_svfiprintf_r+0x53a>
   17fda:	9406      	str	r4, [sp, #24]
   17fdc:	2800      	cmp	r0, #0
   17fde:	f040 8365 	bne.w	186ac <_svfiprintf_r+0xa3c>
   17fe2:	f043 0310 	orr.w	r3, r3, #16
   17fe6:	069c      	lsls	r4, r3, #26
   17fe8:	f100 82fa 	bmi.w	185e0 <_svfiprintf_r+0x970>
   17fec:	06d8      	lsls	r0, r3, #27
   17fee:	d402      	bmi.n	17ff6 <_svfiprintf_r+0x386>
   17ff0:	0659      	lsls	r1, r3, #25
   17ff2:	f100 82c4 	bmi.w	1857e <_svfiprintf_r+0x90e>
   17ff6:	9907      	ldr	r1, [sp, #28]
   17ff8:	680c      	ldr	r4, [r1, #0]
   17ffa:	460a      	mov	r2, r1
   17ffc:	17e5      	asrs	r5, r4, #31
   17ffe:	3204      	adds	r2, #4
   18000:	9207      	str	r2, [sp, #28]
   18002:	4620      	mov	r0, r4
   18004:	4629      	mov	r1, r5
   18006:	2800      	cmp	r0, #0
   18008:	f171 0200 	sbcs.w	r2, r1, #0
   1800c:	f2c0 82c5 	blt.w	1859a <_svfiprintf_r+0x92a>
   18010:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   18014:	9203      	str	r2, [sp, #12]
   18016:	f1b8 3fff 	cmp.w	r8, #4294967295
   1801a:	f04f 0201 	mov.w	r2, #1
   1801e:	f040 80ce 	bne.w	181be <_svfiprintf_r+0x54e>
   18022:	ea54 0105 	orrs.w	r1, r4, r5
   18026:	f000 820d 	beq.w	18444 <_svfiprintf_r+0x7d4>
   1802a:	9301      	str	r3, [sp, #4]
   1802c:	2a01      	cmp	r2, #1
   1802e:	f000 826b 	beq.w	18508 <_svfiprintf_r+0x898>
   18032:	2a02      	cmp	r2, #2
   18034:	f040 822d 	bne.w	18492 <_svfiprintf_r+0x822>
   18038:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1803a:	4656      	mov	r6, sl
   1803c:	0923      	lsrs	r3, r4, #4
   1803e:	f004 010f 	and.w	r1, r4, #15
   18042:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   18046:	092a      	lsrs	r2, r5, #4
   18048:	461c      	mov	r4, r3
   1804a:	4615      	mov	r5, r2
   1804c:	5c43      	ldrb	r3, [r0, r1]
   1804e:	f806 3d01 	strb.w	r3, [r6, #-1]!
   18052:	ea54 0305 	orrs.w	r3, r4, r5
   18056:	d1f1      	bne.n	1803c <_svfiprintf_r+0x3cc>
   18058:	ebaa 0306 	sub.w	r3, sl, r6
   1805c:	9304      	str	r3, [sp, #16]
   1805e:	9b04      	ldr	r3, [sp, #16]
   18060:	9a03      	ldr	r2, [sp, #12]
   18062:	4543      	cmp	r3, r8
   18064:	bfb8      	it	lt
   18066:	4643      	movlt	r3, r8
   18068:	9300      	str	r3, [sp, #0]
   1806a:	2a00      	cmp	r2, #0
   1806c:	f43f af2e 	beq.w	17ecc <_svfiprintf_r+0x25c>
   18070:	3301      	adds	r3, #1
   18072:	9300      	str	r3, [sp, #0]
   18074:	e72a      	b.n	17ecc <_svfiprintf_r+0x25c>
   18076:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1807a:	2400      	movs	r4, #0
   1807c:	f81b 2b01 	ldrb.w	r2, [fp], #1
   18080:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   18084:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   18088:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1808c:	2909      	cmp	r1, #9
   1808e:	d9f5      	bls.n	1807c <_svfiprintf_r+0x40c>
   18090:	e63d      	b.n	17d0e <_svfiprintf_r+0x9e>
   18092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18096:	f89b 2000 	ldrb.w	r2, [fp]
   1809a:	e636      	b.n	17d0a <_svfiprintf_r+0x9a>
   1809c:	f89b 2000 	ldrb.w	r2, [fp]
   180a0:	2a2a      	cmp	r2, #42	; 0x2a
   180a2:	f10b 0601 	add.w	r6, fp, #1
   180a6:	f000 82e7 	beq.w	18678 <_svfiprintf_r+0xa08>
   180aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   180ae:	2909      	cmp	r1, #9
   180b0:	46b3      	mov	fp, r6
   180b2:	f04f 0800 	mov.w	r8, #0
   180b6:	f63f ae2a 	bhi.w	17d0e <_svfiprintf_r+0x9e>
   180ba:	f81b 2b01 	ldrb.w	r2, [fp], #1
   180be:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   180c2:	eb01 0848 	add.w	r8, r1, r8, lsl #1
   180c6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   180ca:	2909      	cmp	r1, #9
   180cc:	d9f5      	bls.n	180ba <_svfiprintf_r+0x44a>
   180ce:	e61e      	b.n	17d0e <_svfiprintf_r+0x9e>
   180d0:	2800      	cmp	r0, #0
   180d2:	f040 82dd 	bne.w	18690 <_svfiprintf_r+0xa20>
   180d6:	069a      	lsls	r2, r3, #26
   180d8:	f100 8276 	bmi.w	185c8 <_svfiprintf_r+0x958>
   180dc:	06de      	lsls	r6, r3, #27
   180de:	f100 8297 	bmi.w	18610 <_svfiprintf_r+0x9a0>
   180e2:	065d      	lsls	r5, r3, #25
   180e4:	f140 8294 	bpl.w	18610 <_svfiprintf_r+0x9a0>
   180e8:	9a07      	ldr	r2, [sp, #28]
   180ea:	6813      	ldr	r3, [r2, #0]
   180ec:	3204      	adds	r2, #4
   180ee:	9207      	str	r2, [sp, #28]
   180f0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   180f4:	801a      	strh	r2, [r3, #0]
   180f6:	e5d5      	b.n	17ca4 <_svfiprintf_r+0x34>
   180f8:	f89b 2000 	ldrb.w	r2, [fp]
   180fc:	2a6c      	cmp	r2, #108	; 0x6c
   180fe:	bf03      	ittte	eq
   18100:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
   18104:	f043 0320 	orreq.w	r3, r3, #32
   18108:	f10b 0b01 	addeq.w	fp, fp, #1
   1810c:	f043 0310 	orrne.w	r3, r3, #16
   18110:	e5fb      	b.n	17d0a <_svfiprintf_r+0x9a>
   18112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18116:	f89b 2000 	ldrb.w	r2, [fp]
   1811a:	e5f6      	b.n	17d0a <_svfiprintf_r+0x9a>
   1811c:	9406      	str	r4, [sp, #24]
   1811e:	2800      	cmp	r0, #0
   18120:	f43f af61 	beq.w	17fe6 <_svfiprintf_r+0x376>
   18124:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   18128:	e75d      	b.n	17fe6 <_svfiprintf_r+0x376>
   1812a:	bf00      	nop
   1812c:	0001bc68 	.word	0x0001bc68
   18130:	0001bc84 	.word	0x0001bc84
   18134:	0001bc54 	.word	0x0001bc54
   18138:	9907      	ldr	r1, [sp, #28]
   1813a:	9406      	str	r4, [sp, #24]
   1813c:	680e      	ldr	r6, [r1, #0]
   1813e:	f04f 0200 	mov.w	r2, #0
   18142:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   18146:	1d0c      	adds	r4, r1, #4
   18148:	2e00      	cmp	r6, #0
   1814a:	f000 8283 	beq.w	18654 <_svfiprintf_r+0x9e4>
   1814e:	f1b8 3fff 	cmp.w	r8, #4294967295
   18152:	f000 8265 	beq.w	18620 <_svfiprintf_r+0x9b0>
   18156:	4642      	mov	r2, r8
   18158:	2100      	movs	r1, #0
   1815a:	4630      	mov	r0, r6
   1815c:	9300      	str	r3, [sp, #0]
   1815e:	f7ff f94f 	bl	17400 <memchr>
   18162:	9b00      	ldr	r3, [sp, #0]
   18164:	2800      	cmp	r0, #0
   18166:	f000 827e 	beq.w	18666 <_svfiprintf_r+0x9f6>
   1816a:	1b82      	subs	r2, r0, r6
   1816c:	9301      	str	r3, [sp, #4]
   1816e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   18172:	9204      	str	r2, [sp, #16]
   18174:	9407      	str	r4, [sp, #28]
   18176:	9303      	str	r3, [sp, #12]
   18178:	f04f 0800 	mov.w	r8, #0
   1817c:	e76f      	b.n	1805e <_svfiprintf_r+0x3ee>
   1817e:	f043 0320 	orr.w	r3, r3, #32
   18182:	f89b 2000 	ldrb.w	r2, [fp]
   18186:	e5c0      	b.n	17d0a <_svfiprintf_r+0x9a>
   18188:	9807      	ldr	r0, [sp, #28]
   1818a:	4ab3      	ldr	r2, [pc, #716]	; (18458 <_svfiprintf_r+0x7e8>)
   1818c:	9406      	str	r4, [sp, #24]
   1818e:	920b      	str	r2, [sp, #44]	; 0x2c
   18190:	6804      	ldr	r4, [r0, #0]
   18192:	2278      	movs	r2, #120	; 0x78
   18194:	2130      	movs	r1, #48	; 0x30
   18196:	3004      	adds	r0, #4
   18198:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1819c:	f043 0302 	orr.w	r3, r3, #2
   181a0:	9007      	str	r0, [sp, #28]
   181a2:	2500      	movs	r5, #0
   181a4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   181a8:	2202      	movs	r2, #2
   181aa:	f04f 0100 	mov.w	r1, #0
   181ae:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   181b2:	2100      	movs	r1, #0
   181b4:	9103      	str	r1, [sp, #12]
   181b6:	f1b8 3fff 	cmp.w	r8, #4294967295
   181ba:	f43f af32 	beq.w	18022 <_svfiprintf_r+0x3b2>
   181be:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   181c2:	9101      	str	r1, [sp, #4]
   181c4:	ea54 0105 	orrs.w	r1, r4, r5
   181c8:	f47f af30 	bne.w	1802c <_svfiprintf_r+0x3bc>
   181cc:	f1b8 0f00 	cmp.w	r8, #0
   181d0:	f040 8137 	bne.w	18442 <_svfiprintf_r+0x7d2>
   181d4:	2a00      	cmp	r2, #0
   181d6:	f040 81b1 	bne.w	1853c <_svfiprintf_r+0x8cc>
   181da:	f013 0301 	ands.w	r3, r3, #1
   181de:	9304      	str	r3, [sp, #16]
   181e0:	f000 81cb 	beq.w	1857a <_svfiprintf_r+0x90a>
   181e4:	ae2c      	add	r6, sp, #176	; 0xb0
   181e6:	2330      	movs	r3, #48	; 0x30
   181e8:	f806 3d41 	strb.w	r3, [r6, #-65]!
   181ec:	e737      	b.n	1805e <_svfiprintf_r+0x3ee>
   181ee:	9406      	str	r4, [sp, #24]
   181f0:	2800      	cmp	r0, #0
   181f2:	f040 825e 	bne.w	186b2 <_svfiprintf_r+0xa42>
   181f6:	2a00      	cmp	r2, #0
   181f8:	f000 80c5 	beq.w	18386 <_svfiprintf_r+0x716>
   181fc:	2101      	movs	r1, #1
   181fe:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   18202:	f04f 0200 	mov.w	r2, #0
   18206:	9100      	str	r1, [sp, #0]
   18208:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1820c:	9104      	str	r1, [sp, #16]
   1820e:	ae12      	add	r6, sp, #72	; 0x48
   18210:	e659      	b.n	17ec6 <_svfiprintf_r+0x256>
   18212:	3104      	adds	r1, #4
   18214:	6814      	ldr	r4, [r2, #0]
   18216:	9107      	str	r1, [sp, #28]
   18218:	2201      	movs	r2, #1
   1821a:	2500      	movs	r5, #0
   1821c:	e7c5      	b.n	181aa <_svfiprintf_r+0x53a>
   1821e:	9807      	ldr	r0, [sp, #28]
   18220:	4601      	mov	r1, r0
   18222:	3104      	adds	r1, #4
   18224:	6804      	ldr	r4, [r0, #0]
   18226:	9107      	str	r1, [sp, #28]
   18228:	2500      	movs	r5, #0
   1822a:	e7be      	b.n	181aa <_svfiprintf_r+0x53a>
   1822c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1822e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18230:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   18234:	b16a      	cbz	r2, 18252 <_svfiprintf_r+0x5e2>
   18236:	3301      	adds	r3, #1
   18238:	3101      	adds	r1, #1
   1823a:	f10d 0037 	add.w	r0, sp, #55	; 0x37
   1823e:	2201      	movs	r2, #1
   18240:	2b07      	cmp	r3, #7
   18242:	9111      	str	r1, [sp, #68]	; 0x44
   18244:	9310      	str	r3, [sp, #64]	; 0x40
   18246:	e889 0005 	stmia.w	r9, {r0, r2}
   1824a:	f300 8145 	bgt.w	184d8 <_svfiprintf_r+0x868>
   1824e:	f109 0908 	add.w	r9, r9, #8
   18252:	9a08      	ldr	r2, [sp, #32]
   18254:	b162      	cbz	r2, 18270 <_svfiprintf_r+0x600>
   18256:	3301      	adds	r3, #1
   18258:	3102      	adds	r1, #2
   1825a:	a80e      	add	r0, sp, #56	; 0x38
   1825c:	2202      	movs	r2, #2
   1825e:	2b07      	cmp	r3, #7
   18260:	9111      	str	r1, [sp, #68]	; 0x44
   18262:	9310      	str	r3, [sp, #64]	; 0x40
   18264:	e889 0005 	stmia.w	r9, {r0, r2}
   18268:	f300 8142 	bgt.w	184f0 <_svfiprintf_r+0x880>
   1826c:	f109 0908 	add.w	r9, r9, #8
   18270:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18272:	2a80      	cmp	r2, #128	; 0x80
   18274:	f000 809b 	beq.w	183ae <_svfiprintf_r+0x73e>
   18278:	9a04      	ldr	r2, [sp, #16]
   1827a:	eba8 0502 	sub.w	r5, r8, r2
   1827e:	2d00      	cmp	r5, #0
   18280:	dd31      	ble.n	182e6 <_svfiprintf_r+0x676>
   18282:	2d10      	cmp	r5, #16
   18284:	4c75      	ldr	r4, [pc, #468]	; (1845c <_svfiprintf_r+0x7ec>)
   18286:	dd23      	ble.n	182d0 <_svfiprintf_r+0x660>
   18288:	464a      	mov	r2, r9
   1828a:	f04f 0810 	mov.w	r8, #16
   1828e:	46b1      	mov	r9, r6
   18290:	4626      	mov	r6, r4
   18292:	9c05      	ldr	r4, [sp, #20]
   18294:	e004      	b.n	182a0 <_svfiprintf_r+0x630>
   18296:	3d10      	subs	r5, #16
   18298:	2d10      	cmp	r5, #16
   1829a:	f102 0208 	add.w	r2, r2, #8
   1829e:	dd14      	ble.n	182ca <_svfiprintf_r+0x65a>
   182a0:	3301      	adds	r3, #1
   182a2:	3110      	adds	r1, #16
   182a4:	2b07      	cmp	r3, #7
   182a6:	9111      	str	r1, [sp, #68]	; 0x44
   182a8:	9310      	str	r3, [sp, #64]	; 0x40
   182aa:	e882 0140 	stmia.w	r2, {r6, r8}
   182ae:	ddf2      	ble.n	18296 <_svfiprintf_r+0x626>
   182b0:	aa0f      	add	r2, sp, #60	; 0x3c
   182b2:	4621      	mov	r1, r4
   182b4:	4638      	mov	r0, r7
   182b6:	f7ff fc5d 	bl	17b74 <__ssprint_r>
   182ba:	2800      	cmp	r0, #0
   182bc:	d16a      	bne.n	18394 <_svfiprintf_r+0x724>
   182be:	3d10      	subs	r5, #16
   182c0:	2d10      	cmp	r5, #16
   182c2:	9911      	ldr	r1, [sp, #68]	; 0x44
   182c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   182c6:	4652      	mov	r2, sl
   182c8:	dcea      	bgt.n	182a0 <_svfiprintf_r+0x630>
   182ca:	4634      	mov	r4, r6
   182cc:	464e      	mov	r6, r9
   182ce:	4691      	mov	r9, r2
   182d0:	3301      	adds	r3, #1
   182d2:	4429      	add	r1, r5
   182d4:	2b07      	cmp	r3, #7
   182d6:	9111      	str	r1, [sp, #68]	; 0x44
   182d8:	9310      	str	r3, [sp, #64]	; 0x40
   182da:	e889 0030 	stmia.w	r9, {r4, r5}
   182de:	f300 80ca 	bgt.w	18476 <_svfiprintf_r+0x806>
   182e2:	f109 0908 	add.w	r9, r9, #8
   182e6:	9804      	ldr	r0, [sp, #16]
   182e8:	f8c9 6000 	str.w	r6, [r9]
   182ec:	3301      	adds	r3, #1
   182ee:	4401      	add	r1, r0
   182f0:	2b07      	cmp	r3, #7
   182f2:	9111      	str	r1, [sp, #68]	; 0x44
   182f4:	9310      	str	r3, [sp, #64]	; 0x40
   182f6:	f8c9 0004 	str.w	r0, [r9, #4]
   182fa:	f300 8090 	bgt.w	1841e <_svfiprintf_r+0x7ae>
   182fe:	f109 0908 	add.w	r9, r9, #8
   18302:	9b01      	ldr	r3, [sp, #4]
   18304:	075b      	lsls	r3, r3, #29
   18306:	d530      	bpl.n	1836a <_svfiprintf_r+0x6fa>
   18308:	9b06      	ldr	r3, [sp, #24]
   1830a:	9a00      	ldr	r2, [sp, #0]
   1830c:	1a9c      	subs	r4, r3, r2
   1830e:	2c00      	cmp	r4, #0
   18310:	dd2b      	ble.n	1836a <_svfiprintf_r+0x6fa>
   18312:	2c10      	cmp	r4, #16
   18314:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18316:	4d52      	ldr	r5, [pc, #328]	; (18460 <_svfiprintf_r+0x7f0>)
   18318:	dd1c      	ble.n	18354 <_svfiprintf_r+0x6e4>
   1831a:	2610      	movs	r6, #16
   1831c:	f8dd 8014 	ldr.w	r8, [sp, #20]
   18320:	e004      	b.n	1832c <_svfiprintf_r+0x6bc>
   18322:	3c10      	subs	r4, #16
   18324:	2c10      	cmp	r4, #16
   18326:	f109 0908 	add.w	r9, r9, #8
   1832a:	dd13      	ble.n	18354 <_svfiprintf_r+0x6e4>
   1832c:	3301      	adds	r3, #1
   1832e:	3110      	adds	r1, #16
   18330:	2b07      	cmp	r3, #7
   18332:	9111      	str	r1, [sp, #68]	; 0x44
   18334:	9310      	str	r3, [sp, #64]	; 0x40
   18336:	e889 0060 	stmia.w	r9, {r5, r6}
   1833a:	ddf2      	ble.n	18322 <_svfiprintf_r+0x6b2>
   1833c:	aa0f      	add	r2, sp, #60	; 0x3c
   1833e:	4641      	mov	r1, r8
   18340:	4638      	mov	r0, r7
   18342:	f7ff fc17 	bl	17b74 <__ssprint_r>
   18346:	bb28      	cbnz	r0, 18394 <_svfiprintf_r+0x724>
   18348:	3c10      	subs	r4, #16
   1834a:	2c10      	cmp	r4, #16
   1834c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1834e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18350:	46d1      	mov	r9, sl
   18352:	dceb      	bgt.n	1832c <_svfiprintf_r+0x6bc>
   18354:	3301      	adds	r3, #1
   18356:	4421      	add	r1, r4
   18358:	2b07      	cmp	r3, #7
   1835a:	9111      	str	r1, [sp, #68]	; 0x44
   1835c:	9310      	str	r3, [sp, #64]	; 0x40
   1835e:	f8c9 5000 	str.w	r5, [r9]
   18362:	f8c9 4004 	str.w	r4, [r9, #4]
   18366:	f300 80f9 	bgt.w	1855c <_svfiprintf_r+0x8ec>
   1836a:	9b02      	ldr	r3, [sp, #8]
   1836c:	9a06      	ldr	r2, [sp, #24]
   1836e:	9800      	ldr	r0, [sp, #0]
   18370:	4282      	cmp	r2, r0
   18372:	bfac      	ite	ge
   18374:	189b      	addge	r3, r3, r2
   18376:	181b      	addlt	r3, r3, r0
   18378:	9302      	str	r3, [sp, #8]
   1837a:	2900      	cmp	r1, #0
   1837c:	d159      	bne.n	18432 <_svfiprintf_r+0x7c2>
   1837e:	2300      	movs	r3, #0
   18380:	9310      	str	r3, [sp, #64]	; 0x40
   18382:	46d1      	mov	r9, sl
   18384:	e48e      	b.n	17ca4 <_svfiprintf_r+0x34>
   18386:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18388:	b123      	cbz	r3, 18394 <_svfiprintf_r+0x724>
   1838a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1838c:	9905      	ldr	r1, [sp, #20]
   1838e:	aa0f      	add	r2, sp, #60	; 0x3c
   18390:	f7ff fbf0 	bl	17b74 <__ssprint_r>
   18394:	9b05      	ldr	r3, [sp, #20]
   18396:	899b      	ldrh	r3, [r3, #12]
   18398:	f013 0f40 	tst.w	r3, #64	; 0x40
   1839c:	9b02      	ldr	r3, [sp, #8]
   1839e:	bf18      	it	ne
   183a0:	f04f 33ff 	movne.w	r3, #4294967295
   183a4:	9302      	str	r3, [sp, #8]
   183a6:	9802      	ldr	r0, [sp, #8]
   183a8:	b02d      	add	sp, #180	; 0xb4
   183aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183ae:	9a06      	ldr	r2, [sp, #24]
   183b0:	9800      	ldr	r0, [sp, #0]
   183b2:	1a15      	subs	r5, r2, r0
   183b4:	2d00      	cmp	r5, #0
   183b6:	f77f af5f 	ble.w	18278 <_svfiprintf_r+0x608>
   183ba:	2d10      	cmp	r5, #16
   183bc:	4c27      	ldr	r4, [pc, #156]	; (1845c <_svfiprintf_r+0x7ec>)
   183be:	dd22      	ble.n	18406 <_svfiprintf_r+0x796>
   183c0:	464a      	mov	r2, r9
   183c2:	46b1      	mov	r9, r6
   183c4:	4626      	mov	r6, r4
   183c6:	9c05      	ldr	r4, [sp, #20]
   183c8:	e004      	b.n	183d4 <_svfiprintf_r+0x764>
   183ca:	3d10      	subs	r5, #16
   183cc:	2d10      	cmp	r5, #16
   183ce:	f102 0208 	add.w	r2, r2, #8
   183d2:	dd15      	ble.n	18400 <_svfiprintf_r+0x790>
   183d4:	3301      	adds	r3, #1
   183d6:	3110      	adds	r1, #16
   183d8:	2010      	movs	r0, #16
   183da:	2b07      	cmp	r3, #7
   183dc:	9111      	str	r1, [sp, #68]	; 0x44
   183de:	9310      	str	r3, [sp, #64]	; 0x40
   183e0:	6016      	str	r6, [r2, #0]
   183e2:	6050      	str	r0, [r2, #4]
   183e4:	ddf1      	ble.n	183ca <_svfiprintf_r+0x75a>
   183e6:	aa0f      	add	r2, sp, #60	; 0x3c
   183e8:	4621      	mov	r1, r4
   183ea:	4638      	mov	r0, r7
   183ec:	f7ff fbc2 	bl	17b74 <__ssprint_r>
   183f0:	2800      	cmp	r0, #0
   183f2:	d1cf      	bne.n	18394 <_svfiprintf_r+0x724>
   183f4:	3d10      	subs	r5, #16
   183f6:	2d10      	cmp	r5, #16
   183f8:	9911      	ldr	r1, [sp, #68]	; 0x44
   183fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   183fc:	4652      	mov	r2, sl
   183fe:	dce9      	bgt.n	183d4 <_svfiprintf_r+0x764>
   18400:	4634      	mov	r4, r6
   18402:	464e      	mov	r6, r9
   18404:	4691      	mov	r9, r2
   18406:	3301      	adds	r3, #1
   18408:	4429      	add	r1, r5
   1840a:	2b07      	cmp	r3, #7
   1840c:	9111      	str	r1, [sp, #68]	; 0x44
   1840e:	9310      	str	r3, [sp, #64]	; 0x40
   18410:	e889 0030 	stmia.w	r9, {r4, r5}
   18414:	f300 80f0 	bgt.w	185f8 <_svfiprintf_r+0x988>
   18418:	f109 0908 	add.w	r9, r9, #8
   1841c:	e72c      	b.n	18278 <_svfiprintf_r+0x608>
   1841e:	aa0f      	add	r2, sp, #60	; 0x3c
   18420:	9905      	ldr	r1, [sp, #20]
   18422:	4638      	mov	r0, r7
   18424:	f7ff fba6 	bl	17b74 <__ssprint_r>
   18428:	2800      	cmp	r0, #0
   1842a:	d1b3      	bne.n	18394 <_svfiprintf_r+0x724>
   1842c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1842e:	46d1      	mov	r9, sl
   18430:	e767      	b.n	18302 <_svfiprintf_r+0x692>
   18432:	aa0f      	add	r2, sp, #60	; 0x3c
   18434:	9905      	ldr	r1, [sp, #20]
   18436:	4638      	mov	r0, r7
   18438:	f7ff fb9c 	bl	17b74 <__ssprint_r>
   1843c:	2800      	cmp	r0, #0
   1843e:	d09e      	beq.n	1837e <_svfiprintf_r+0x70e>
   18440:	e7a8      	b.n	18394 <_svfiprintf_r+0x724>
   18442:	9b01      	ldr	r3, [sp, #4]
   18444:	2a01      	cmp	r2, #1
   18446:	f000 80b7 	beq.w	185b8 <_svfiprintf_r+0x948>
   1844a:	2a02      	cmp	r2, #2
   1844c:	d11e      	bne.n	1848c <_svfiprintf_r+0x81c>
   1844e:	9301      	str	r3, [sp, #4]
   18450:	2400      	movs	r4, #0
   18452:	2500      	movs	r5, #0
   18454:	e5f0      	b.n	18038 <_svfiprintf_r+0x3c8>
   18456:	bf00      	nop
   18458:	0001bc68 	.word	0x0001bc68
   1845c:	0001bc94 	.word	0x0001bc94
   18460:	0001bc84 	.word	0x0001bc84
   18464:	aa0f      	add	r2, sp, #60	; 0x3c
   18466:	9905      	ldr	r1, [sp, #20]
   18468:	4638      	mov	r0, r7
   1846a:	f7ff fb83 	bl	17b74 <__ssprint_r>
   1846e:	2800      	cmp	r0, #0
   18470:	d190      	bne.n	18394 <_svfiprintf_r+0x724>
   18472:	46d1      	mov	r9, sl
   18474:	e435      	b.n	17ce2 <_svfiprintf_r+0x72>
   18476:	aa0f      	add	r2, sp, #60	; 0x3c
   18478:	9905      	ldr	r1, [sp, #20]
   1847a:	4638      	mov	r0, r7
   1847c:	f7ff fb7a 	bl	17b74 <__ssprint_r>
   18480:	2800      	cmp	r0, #0
   18482:	d187      	bne.n	18394 <_svfiprintf_r+0x724>
   18484:	9911      	ldr	r1, [sp, #68]	; 0x44
   18486:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18488:	46d1      	mov	r9, sl
   1848a:	e72c      	b.n	182e6 <_svfiprintf_r+0x676>
   1848c:	9301      	str	r3, [sp, #4]
   1848e:	2400      	movs	r4, #0
   18490:	2500      	movs	r5, #0
   18492:	4651      	mov	r1, sl
   18494:	e000      	b.n	18498 <_svfiprintf_r+0x828>
   18496:	4631      	mov	r1, r6
   18498:	08e2      	lsrs	r2, r4, #3
   1849a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1849e:	08e8      	lsrs	r0, r5, #3
   184a0:	f004 0307 	and.w	r3, r4, #7
   184a4:	4605      	mov	r5, r0
   184a6:	4614      	mov	r4, r2
   184a8:	3330      	adds	r3, #48	; 0x30
   184aa:	ea54 0205 	orrs.w	r2, r4, r5
   184ae:	f801 3c01 	strb.w	r3, [r1, #-1]
   184b2:	f101 36ff 	add.w	r6, r1, #4294967295
   184b6:	d1ee      	bne.n	18496 <_svfiprintf_r+0x826>
   184b8:	9a01      	ldr	r2, [sp, #4]
   184ba:	07d2      	lsls	r2, r2, #31
   184bc:	f57f adcc 	bpl.w	18058 <_svfiprintf_r+0x3e8>
   184c0:	2b30      	cmp	r3, #48	; 0x30
   184c2:	f43f adc9 	beq.w	18058 <_svfiprintf_r+0x3e8>
   184c6:	3902      	subs	r1, #2
   184c8:	2330      	movs	r3, #48	; 0x30
   184ca:	f806 3c01 	strb.w	r3, [r6, #-1]
   184ce:	ebaa 0301 	sub.w	r3, sl, r1
   184d2:	9304      	str	r3, [sp, #16]
   184d4:	460e      	mov	r6, r1
   184d6:	e5c2      	b.n	1805e <_svfiprintf_r+0x3ee>
   184d8:	aa0f      	add	r2, sp, #60	; 0x3c
   184da:	9905      	ldr	r1, [sp, #20]
   184dc:	4638      	mov	r0, r7
   184de:	f7ff fb49 	bl	17b74 <__ssprint_r>
   184e2:	2800      	cmp	r0, #0
   184e4:	f47f af56 	bne.w	18394 <_svfiprintf_r+0x724>
   184e8:	9911      	ldr	r1, [sp, #68]	; 0x44
   184ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   184ec:	46d1      	mov	r9, sl
   184ee:	e6b0      	b.n	18252 <_svfiprintf_r+0x5e2>
   184f0:	aa0f      	add	r2, sp, #60	; 0x3c
   184f2:	9905      	ldr	r1, [sp, #20]
   184f4:	4638      	mov	r0, r7
   184f6:	f7ff fb3d 	bl	17b74 <__ssprint_r>
   184fa:	2800      	cmp	r0, #0
   184fc:	f47f af4a 	bne.w	18394 <_svfiprintf_r+0x724>
   18500:	9911      	ldr	r1, [sp, #68]	; 0x44
   18502:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18504:	46d1      	mov	r9, sl
   18506:	e6b3      	b.n	18270 <_svfiprintf_r+0x600>
   18508:	2d00      	cmp	r5, #0
   1850a:	bf08      	it	eq
   1850c:	2c0a      	cmpeq	r4, #10
   1850e:	d352      	bcc.n	185b6 <_svfiprintf_r+0x946>
   18510:	4656      	mov	r6, sl
   18512:	4620      	mov	r0, r4
   18514:	4629      	mov	r1, r5
   18516:	220a      	movs	r2, #10
   18518:	2300      	movs	r3, #0
   1851a:	f7fd fc03 	bl	15d24 <__aeabi_uldivmod>
   1851e:	3230      	adds	r2, #48	; 0x30
   18520:	f806 2d01 	strb.w	r2, [r6, #-1]!
   18524:	4620      	mov	r0, r4
   18526:	4629      	mov	r1, r5
   18528:	2300      	movs	r3, #0
   1852a:	220a      	movs	r2, #10
   1852c:	f7fd fbfa 	bl	15d24 <__aeabi_uldivmod>
   18530:	4604      	mov	r4, r0
   18532:	460d      	mov	r5, r1
   18534:	ea54 0305 	orrs.w	r3, r4, r5
   18538:	d1eb      	bne.n	18512 <_svfiprintf_r+0x8a2>
   1853a:	e58d      	b.n	18058 <_svfiprintf_r+0x3e8>
   1853c:	f8cd 8010 	str.w	r8, [sp, #16]
   18540:	4656      	mov	r6, sl
   18542:	e58c      	b.n	1805e <_svfiprintf_r+0x3ee>
   18544:	aa0f      	add	r2, sp, #60	; 0x3c
   18546:	9905      	ldr	r1, [sp, #20]
   18548:	4638      	mov	r0, r7
   1854a:	f7ff fb13 	bl	17b74 <__ssprint_r>
   1854e:	2800      	cmp	r0, #0
   18550:	f47f af20 	bne.w	18394 <_svfiprintf_r+0x724>
   18554:	9911      	ldr	r1, [sp, #68]	; 0x44
   18556:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18558:	46d1      	mov	r9, sl
   1855a:	e669      	b.n	18230 <_svfiprintf_r+0x5c0>
   1855c:	aa0f      	add	r2, sp, #60	; 0x3c
   1855e:	9905      	ldr	r1, [sp, #20]
   18560:	4638      	mov	r0, r7
   18562:	f7ff fb07 	bl	17b74 <__ssprint_r>
   18566:	2800      	cmp	r0, #0
   18568:	f47f af14 	bne.w	18394 <_svfiprintf_r+0x724>
   1856c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1856e:	e6fc      	b.n	1836a <_svfiprintf_r+0x6fa>
   18570:	9207      	str	r2, [sp, #28]
   18572:	f89b 2000 	ldrb.w	r2, [fp]
   18576:	f7ff bbc8 	b.w	17d0a <_svfiprintf_r+0x9a>
   1857a:	4656      	mov	r6, sl
   1857c:	e56f      	b.n	1805e <_svfiprintf_r+0x3ee>
   1857e:	9e07      	ldr	r6, [sp, #28]
   18580:	f9b6 4000 	ldrsh.w	r4, [r6]
   18584:	4632      	mov	r2, r6
   18586:	17e5      	asrs	r5, r4, #31
   18588:	4620      	mov	r0, r4
   1858a:	3204      	adds	r2, #4
   1858c:	4629      	mov	r1, r5
   1858e:	2800      	cmp	r0, #0
   18590:	9207      	str	r2, [sp, #28]
   18592:	f171 0200 	sbcs.w	r2, r1, #0
   18596:	f6bf ad3b 	bge.w	18010 <_svfiprintf_r+0x3a0>
   1859a:	222d      	movs	r2, #45	; 0x2d
   1859c:	4264      	negs	r4, r4
   1859e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   185a2:	9203      	str	r2, [sp, #12]
   185a4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   185a8:	2201      	movs	r2, #1
   185aa:	e604      	b.n	181b6 <_svfiprintf_r+0x546>
   185ac:	880c      	ldrh	r4, [r1, #0]
   185ae:	3104      	adds	r1, #4
   185b0:	2500      	movs	r5, #0
   185b2:	9107      	str	r1, [sp, #28]
   185b4:	e455      	b.n	17e62 <_svfiprintf_r+0x1f2>
   185b6:	9b01      	ldr	r3, [sp, #4]
   185b8:	9301      	str	r3, [sp, #4]
   185ba:	ae2c      	add	r6, sp, #176	; 0xb0
   185bc:	3430      	adds	r4, #48	; 0x30
   185be:	2301      	movs	r3, #1
   185c0:	f806 4d41 	strb.w	r4, [r6, #-65]!
   185c4:	9304      	str	r3, [sp, #16]
   185c6:	e54a      	b.n	1805e <_svfiprintf_r+0x3ee>
   185c8:	9a07      	ldr	r2, [sp, #28]
   185ca:	9902      	ldr	r1, [sp, #8]
   185cc:	6813      	ldr	r3, [r2, #0]
   185ce:	17cd      	asrs	r5, r1, #31
   185d0:	4608      	mov	r0, r1
   185d2:	3204      	adds	r2, #4
   185d4:	4629      	mov	r1, r5
   185d6:	9207      	str	r2, [sp, #28]
   185d8:	e9c3 0100 	strd	r0, r1, [r3]
   185dc:	f7ff bb62 	b.w	17ca4 <_svfiprintf_r+0x34>
   185e0:	9c07      	ldr	r4, [sp, #28]
   185e2:	3407      	adds	r4, #7
   185e4:	f024 0407 	bic.w	r4, r4, #7
   185e8:	e9d4 0100 	ldrd	r0, r1, [r4]
   185ec:	f104 0208 	add.w	r2, r4, #8
   185f0:	9207      	str	r2, [sp, #28]
   185f2:	4604      	mov	r4, r0
   185f4:	460d      	mov	r5, r1
   185f6:	e506      	b.n	18006 <_svfiprintf_r+0x396>
   185f8:	aa0f      	add	r2, sp, #60	; 0x3c
   185fa:	9905      	ldr	r1, [sp, #20]
   185fc:	4638      	mov	r0, r7
   185fe:	f7ff fab9 	bl	17b74 <__ssprint_r>
   18602:	2800      	cmp	r0, #0
   18604:	f47f aec6 	bne.w	18394 <_svfiprintf_r+0x724>
   18608:	9911      	ldr	r1, [sp, #68]	; 0x44
   1860a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1860c:	46d1      	mov	r9, sl
   1860e:	e633      	b.n	18278 <_svfiprintf_r+0x608>
   18610:	9a07      	ldr	r2, [sp, #28]
   18612:	6813      	ldr	r3, [r2, #0]
   18614:	3204      	adds	r2, #4
   18616:	9207      	str	r2, [sp, #28]
   18618:	9a02      	ldr	r2, [sp, #8]
   1861a:	601a      	str	r2, [r3, #0]
   1861c:	f7ff bb42 	b.w	17ca4 <_svfiprintf_r+0x34>
   18620:	4630      	mov	r0, r6
   18622:	9301      	str	r3, [sp, #4]
   18624:	9407      	str	r4, [sp, #28]
   18626:	f7fd ff6b 	bl	16500 <strlen>
   1862a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1862e:	9004      	str	r0, [sp, #16]
   18630:	9303      	str	r3, [sp, #12]
   18632:	f04f 0800 	mov.w	r8, #0
   18636:	e512      	b.n	1805e <_svfiprintf_r+0x3ee>
   18638:	2140      	movs	r1, #64	; 0x40
   1863a:	9200      	str	r2, [sp, #0]
   1863c:	f7fe fc2e 	bl	16e9c <_malloc_r>
   18640:	9a05      	ldr	r2, [sp, #20]
   18642:	6010      	str	r0, [r2, #0]
   18644:	6110      	str	r0, [r2, #16]
   18646:	9a00      	ldr	r2, [sp, #0]
   18648:	b328      	cbz	r0, 18696 <_svfiprintf_r+0xa26>
   1864a:	9905      	ldr	r1, [sp, #20]
   1864c:	2340      	movs	r3, #64	; 0x40
   1864e:	614b      	str	r3, [r1, #20]
   18650:	f7ff bb1c 	b.w	17c8c <_svfiprintf_r+0x1c>
   18654:	4642      	mov	r2, r8
   18656:	2a06      	cmp	r2, #6
   18658:	bf28      	it	cs
   1865a:	2206      	movcs	r2, #6
   1865c:	9204      	str	r2, [sp, #16]
   1865e:	9407      	str	r4, [sp, #28]
   18660:	9200      	str	r2, [sp, #0]
   18662:	4e17      	ldr	r6, [pc, #92]	; (186c0 <_svfiprintf_r+0xa50>)
   18664:	e42f      	b.n	17ec6 <_svfiprintf_r+0x256>
   18666:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1866a:	f8cd 8010 	str.w	r8, [sp, #16]
   1866e:	9203      	str	r2, [sp, #12]
   18670:	9407      	str	r4, [sp, #28]
   18672:	9301      	str	r3, [sp, #4]
   18674:	4680      	mov	r8, r0
   18676:	e4f2      	b.n	1805e <_svfiprintf_r+0x3ee>
   18678:	9a07      	ldr	r2, [sp, #28]
   1867a:	6811      	ldr	r1, [r2, #0]
   1867c:	f89b 2001 	ldrb.w	r2, [fp, #1]
   18680:	ea41 78e1 	orr.w	r8, r1, r1, asr #31
   18684:	9907      	ldr	r1, [sp, #28]
   18686:	3104      	adds	r1, #4
   18688:	46b3      	mov	fp, r6
   1868a:	9107      	str	r1, [sp, #28]
   1868c:	f7ff bb3d 	b.w	17d0a <_svfiprintf_r+0x9a>
   18690:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   18694:	e51f      	b.n	180d6 <_svfiprintf_r+0x466>
   18696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18698:	230c      	movs	r3, #12
   1869a:	6013      	str	r3, [r2, #0]
   1869c:	f04f 33ff 	mov.w	r3, #4294967295
   186a0:	9302      	str	r3, [sp, #8]
   186a2:	e680      	b.n	183a6 <_svfiprintf_r+0x736>
   186a4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   186a8:	f7ff bbcb 	b.w	17e42 <_svfiprintf_r+0x1d2>
   186ac:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   186b0:	e497      	b.n	17fe2 <_svfiprintf_r+0x372>
   186b2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   186b6:	e59e      	b.n	181f6 <_svfiprintf_r+0x586>
   186b8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   186bc:	e457      	b.n	17f6e <_svfiprintf_r+0x2fe>
   186be:	bf00      	nop
   186c0:	0001bc7c 	.word	0x0001bc7c

000186c4 <_sungetc_r>:
   186c4:	b538      	push	{r3, r4, r5, lr}
   186c6:	1c4b      	adds	r3, r1, #1
   186c8:	d01a      	beq.n	18700 <_sungetc_r+0x3c>
   186ca:	8993      	ldrh	r3, [r2, #12]
   186cc:	6b14      	ldr	r4, [r2, #48]	; 0x30
   186ce:	f023 0320 	bic.w	r3, r3, #32
   186d2:	b2cd      	uxtb	r5, r1
   186d4:	8193      	strh	r3, [r2, #12]
   186d6:	b1b4      	cbz	r4, 18706 <_sungetc_r+0x42>
   186d8:	4614      	mov	r4, r2
   186da:	6852      	ldr	r2, [r2, #4]
   186dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   186de:	429a      	cmp	r2, r3
   186e0:	da09      	bge.n	186f6 <_sungetc_r+0x32>
   186e2:	6823      	ldr	r3, [r4, #0]
   186e4:	1e5a      	subs	r2, r3, #1
   186e6:	6022      	str	r2, [r4, #0]
   186e8:	f803 5c01 	strb.w	r5, [r3, #-1]
   186ec:	6863      	ldr	r3, [r4, #4]
   186ee:	3301      	adds	r3, #1
   186f0:	6063      	str	r3, [r4, #4]
   186f2:	4628      	mov	r0, r5
   186f4:	bd38      	pop	{r3, r4, r5, pc}
   186f6:	4621      	mov	r1, r4
   186f8:	f000 fd52 	bl	191a0 <__submore>
   186fc:	2800      	cmp	r0, #0
   186fe:	d0f0      	beq.n	186e2 <_sungetc_r+0x1e>
   18700:	f04f 35ff 	mov.w	r5, #4294967295
   18704:	e7f5      	b.n	186f2 <_sungetc_r+0x2e>
   18706:	6911      	ldr	r1, [r2, #16]
   18708:	6813      	ldr	r3, [r2, #0]
   1870a:	b129      	cbz	r1, 18718 <_sungetc_r+0x54>
   1870c:	4299      	cmp	r1, r3
   1870e:	d203      	bcs.n	18718 <_sungetc_r+0x54>
   18710:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   18714:	428d      	cmp	r5, r1
   18716:	d00f      	beq.n	18738 <_sungetc_r+0x74>
   18718:	6393      	str	r3, [r2, #56]	; 0x38
   1871a:	4613      	mov	r3, r2
   1871c:	6854      	ldr	r4, [r2, #4]
   1871e:	63d4      	str	r4, [r2, #60]	; 0x3c
   18720:	f102 0040 	add.w	r0, r2, #64	; 0x40
   18724:	2103      	movs	r1, #3
   18726:	6310      	str	r0, [r2, #48]	; 0x30
   18728:	6351      	str	r1, [r2, #52]	; 0x34
   1872a:	f803 5f42 	strb.w	r5, [r3, #66]!
   1872e:	2101      	movs	r1, #1
   18730:	6013      	str	r3, [r2, #0]
   18732:	6051      	str	r1, [r2, #4]
   18734:	4628      	mov	r0, r5
   18736:	bd38      	pop	{r3, r4, r5, pc}
   18738:	6851      	ldr	r1, [r2, #4]
   1873a:	3b01      	subs	r3, #1
   1873c:	3101      	adds	r1, #1
   1873e:	6013      	str	r3, [r2, #0]
   18740:	6051      	str	r1, [r2, #4]
   18742:	e7d6      	b.n	186f2 <_sungetc_r+0x2e>

00018744 <__ssrefill_r>:
   18744:	b510      	push	{r4, lr}
   18746:	460c      	mov	r4, r1
   18748:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1874a:	b169      	cbz	r1, 18768 <__ssrefill_r+0x24>
   1874c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18750:	4299      	cmp	r1, r3
   18752:	d001      	beq.n	18758 <__ssrefill_r+0x14>
   18754:	f000 fdbc 	bl	192d0 <_free_r>
   18758:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1875a:	6063      	str	r3, [r4, #4]
   1875c:	2000      	movs	r0, #0
   1875e:	6320      	str	r0, [r4, #48]	; 0x30
   18760:	b113      	cbz	r3, 18768 <__ssrefill_r+0x24>
   18762:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   18764:	6023      	str	r3, [r4, #0]
   18766:	bd10      	pop	{r4, pc}
   18768:	89a3      	ldrh	r3, [r4, #12]
   1876a:	6922      	ldr	r2, [r4, #16]
   1876c:	6022      	str	r2, [r4, #0]
   1876e:	f043 0320 	orr.w	r3, r3, #32
   18772:	2200      	movs	r2, #0
   18774:	81a3      	strh	r3, [r4, #12]
   18776:	6062      	str	r2, [r4, #4]
   18778:	f04f 30ff 	mov.w	r0, #4294967295
   1877c:	bd10      	pop	{r4, pc}
   1877e:	bf00      	nop

00018780 <_sfread_r>:
   18780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18784:	b083      	sub	sp, #12
   18786:	fb02 f903 	mul.w	r9, r2, r3
   1878a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1878c:	f1b9 0f00 	cmp.w	r9, #0
   18790:	d028      	beq.n	187e4 <_sfread_r+0x64>
   18792:	4607      	mov	r7, r0
   18794:	469a      	mov	sl, r3
   18796:	9201      	str	r2, [sp, #4]
   18798:	460d      	mov	r5, r1
   1879a:	464e      	mov	r6, r9
   1879c:	f04f 0800 	mov.w	r8, #0
   187a0:	e00f      	b.n	187c2 <_sfread_r+0x42>
   187a2:	6821      	ldr	r1, [r4, #0]
   187a4:	f7fd fdba 	bl	1631c <memcpy>
   187a8:	6822      	ldr	r2, [r4, #0]
   187aa:	f8c4 8004 	str.w	r8, [r4, #4]
   187ae:	445a      	add	r2, fp
   187b0:	6022      	str	r2, [r4, #0]
   187b2:	4621      	mov	r1, r4
   187b4:	4638      	mov	r0, r7
   187b6:	445d      	add	r5, fp
   187b8:	eba6 060b 	sub.w	r6, r6, fp
   187bc:	f7ff ffc2 	bl	18744 <__ssrefill_r>
   187c0:	b9a0      	cbnz	r0, 187ec <_sfread_r+0x6c>
   187c2:	f8d4 b004 	ldr.w	fp, [r4, #4]
   187c6:	455e      	cmp	r6, fp
   187c8:	4628      	mov	r0, r5
   187ca:	465a      	mov	r2, fp
   187cc:	d8e9      	bhi.n	187a2 <_sfread_r+0x22>
   187ce:	4632      	mov	r2, r6
   187d0:	6821      	ldr	r1, [r4, #0]
   187d2:	f7fd fda3 	bl	1631c <memcpy>
   187d6:	6862      	ldr	r2, [r4, #4]
   187d8:	6823      	ldr	r3, [r4, #0]
   187da:	1b92      	subs	r2, r2, r6
   187dc:	441e      	add	r6, r3
   187de:	46d1      	mov	r9, sl
   187e0:	6062      	str	r2, [r4, #4]
   187e2:	6026      	str	r6, [r4, #0]
   187e4:	4648      	mov	r0, r9
   187e6:	b003      	add	sp, #12
   187e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187ec:	9b01      	ldr	r3, [sp, #4]
   187ee:	eba9 0906 	sub.w	r9, r9, r6
   187f2:	fbb9 f9f3 	udiv	r9, r9, r3
   187f6:	4648      	mov	r0, r9
   187f8:	b003      	add	sp, #12
   187fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187fe:	bf00      	nop

00018800 <__ssvfiscanf_r>:
   18800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18804:	468b      	mov	fp, r1
   18806:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   1880a:	b0d9      	sub	sp, #356	; 0x164
   1880c:	4607      	mov	r7, r0
   1880e:	0488      	lsls	r0, r1, #18
   18810:	9306      	str	r3, [sp, #24]
   18812:	d409      	bmi.n	18828 <__ssvfiscanf_r+0x28>
   18814:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   18818:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1881c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   18820:	f8ab 100c 	strh.w	r1, [fp, #12]
   18824:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   18828:	4614      	mov	r4, r2
   1882a:	4626      	mov	r6, r4
   1882c:	2300      	movs	r3, #0
   1882e:	9307      	str	r3, [sp, #28]
   18830:	9304      	str	r3, [sp, #16]
   18832:	469a      	mov	sl, r3
   18834:	9305      	str	r3, [sp, #20]
   18836:	f816 3b01 	ldrb.w	r3, [r6], #1
   1883a:	930b      	str	r3, [sp, #44]	; 0x2c
   1883c:	b363      	cbz	r3, 18898 <__ssvfiscanf_r+0x98>
   1883e:	f000 fe4d 	bl	194dc <__locale_ctype_ptr>
   18842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18844:	4418      	add	r0, r3
   18846:	7845      	ldrb	r5, [r0, #1]
   18848:	f015 0508 	ands.w	r5, r5, #8
   1884c:	d028      	beq.n	188a0 <__ssvfiscanf_r+0xa0>
   1884e:	f8db 2004 	ldr.w	r2, [fp, #4]
   18852:	e012      	b.n	1887a <__ssvfiscanf_r+0x7a>
   18854:	f000 fe42 	bl	194dc <__locale_ctype_ptr>
   18858:	f8db 3000 	ldr.w	r3, [fp]
   1885c:	781a      	ldrb	r2, [r3, #0]
   1885e:	4410      	add	r0, r2
   18860:	3301      	adds	r3, #1
   18862:	7842      	ldrb	r2, [r0, #1]
   18864:	0712      	lsls	r2, r2, #28
   18866:	d510      	bpl.n	1888a <__ssvfiscanf_r+0x8a>
   18868:	f8db 2004 	ldr.w	r2, [fp, #4]
   1886c:	f8cb 3000 	str.w	r3, [fp]
   18870:	3a01      	subs	r2, #1
   18872:	f10a 0a01 	add.w	sl, sl, #1
   18876:	f8cb 2004 	str.w	r2, [fp, #4]
   1887a:	2a00      	cmp	r2, #0
   1887c:	dcea      	bgt.n	18854 <__ssvfiscanf_r+0x54>
   1887e:	4659      	mov	r1, fp
   18880:	4638      	mov	r0, r7
   18882:	f7ff ff5f 	bl	18744 <__ssrefill_r>
   18886:	2800      	cmp	r0, #0
   18888:	d0e4      	beq.n	18854 <__ssvfiscanf_r+0x54>
   1888a:	4634      	mov	r4, r6
   1888c:	4626      	mov	r6, r4
   1888e:	f816 3b01 	ldrb.w	r3, [r6], #1
   18892:	930b      	str	r3, [sp, #44]	; 0x2c
   18894:	2b00      	cmp	r3, #0
   18896:	d1d2      	bne.n	1883e <__ssvfiscanf_r+0x3e>
   18898:	9805      	ldr	r0, [sp, #20]
   1889a:	b059      	add	sp, #356	; 0x164
   1889c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188a0:	2b25      	cmp	r3, #37	; 0x25
   188a2:	f040 8084 	bne.w	189ae <__ssvfiscanf_r+0x1ae>
   188a6:	f894 8001 	ldrb.w	r8, [r4, #1]
   188aa:	462c      	mov	r4, r5
   188ac:	1c73      	adds	r3, r6, #1
   188ae:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
   188b2:	f200 8187 	bhi.w	18bc4 <__ssvfiscanf_r+0x3c4>
   188b6:	e8df f018 	tbh	[pc, r8, lsl #1]
   188ba:	0093      	.short	0x0093
   188bc:	01850185 	.word	0x01850185
   188c0:	01850185 	.word	0x01850185
   188c4:	01850185 	.word	0x01850185
   188c8:	01850185 	.word	0x01850185
   188cc:	01850185 	.word	0x01850185
   188d0:	01850185 	.word	0x01850185
   188d4:	01850185 	.word	0x01850185
   188d8:	01850185 	.word	0x01850185
   188dc:	01850185 	.word	0x01850185
   188e0:	01850185 	.word	0x01850185
   188e4:	01850185 	.word	0x01850185
   188e8:	01850185 	.word	0x01850185
   188ec:	01850185 	.word	0x01850185
   188f0:	01850185 	.word	0x01850185
   188f4:	01850185 	.word	0x01850185
   188f8:	01850185 	.word	0x01850185
   188fc:	01850185 	.word	0x01850185
   18900:	01850185 	.word	0x01850185
   18904:	01850079 	.word	0x01850079
   18908:	01850185 	.word	0x01850185
   1890c:	017f0185 	.word	0x017f0185
   18910:	01850185 	.word	0x01850185
   18914:	01850185 	.word	0x01850185
   18918:	01760185 	.word	0x01760185
   1891c:	01760176 	.word	0x01760176
   18920:	01760176 	.word	0x01760176
   18924:	01760176 	.word	0x01760176
   18928:	01760176 	.word	0x01760176
   1892c:	01850176 	.word	0x01850176
   18930:	01850185 	.word	0x01850185
   18934:	01850185 	.word	0x01850185
   18938:	01850185 	.word	0x01850185
   1893c:	01850185 	.word	0x01850185
   18940:	01720185 	.word	0x01720185
   18944:	01850185 	.word	0x01850185
   18948:	01850185 	.word	0x01850185
   1894c:	01850185 	.word	0x01850185
   18950:	016c0185 	.word	0x016c0185
   18954:	01850185 	.word	0x01850185
   18958:	01850168 	.word	0x01850168
   1895c:	01850185 	.word	0x01850185
   18960:	01850185 	.word	0x01850185
   18964:	01850185 	.word	0x01850185
   18968:	01640185 	.word	0x01640185
   1896c:	01850185 	.word	0x01850185
   18970:	0185015b 	.word	0x0185015b
   18974:	01850185 	.word	0x01850185
   18978:	01850185 	.word	0x01850185
   1897c:	01850185 	.word	0x01850185
   18980:	01030115 	.word	0x01030115
   18984:	01850185 	.word	0x01850185
   18988:	011a0185 	.word	0x011a0185
   1898c:	0185009a 	.word	0x0185009a
   18990:	01510185 	.word	0x01510185
   18994:	013a0185 	.word	0x013a0185
   18998:	012a0133 	.word	0x012a0133
   1899c:	01850185 	.word	0x01850185
   189a0:	01850127 	.word	0x01850127
   189a4:	01850120 	.word	0x01850120
   189a8:	01640185 	.word	0x01640185
   189ac:	461e      	mov	r6, r3
   189ae:	f8db 3004 	ldr.w	r3, [fp, #4]
   189b2:	2b00      	cmp	r3, #0
   189b4:	f340 8375 	ble.w	190a2 <__ssvfiscanf_r+0x8a2>
   189b8:	f8db 3000 	ldr.w	r3, [fp]
   189bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   189c0:	7819      	ldrb	r1, [r3, #0]
   189c2:	4291      	cmp	r1, r2
   189c4:	f47f af68 	bne.w	18898 <__ssvfiscanf_r+0x98>
   189c8:	f8db 2004 	ldr.w	r2, [fp, #4]
   189cc:	3301      	adds	r3, #1
   189ce:	3a01      	subs	r2, #1
   189d0:	f8cb 3000 	str.w	r3, [fp]
   189d4:	f10a 0a01 	add.w	sl, sl, #1
   189d8:	f8cb 2004 	str.w	r2, [fp, #4]
   189dc:	4634      	mov	r4, r6
   189de:	e755      	b.n	1888c <__ssvfiscanf_r+0x8c>
   189e0:	f04f 33ff 	mov.w	r3, #4294967295
   189e4:	9305      	str	r3, [sp, #20]
   189e6:	9805      	ldr	r0, [sp, #20]
   189e8:	b059      	add	sp, #356	; 0x164
   189ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189ee:	9303      	str	r3, [sp, #12]
   189f0:	4ba7      	ldr	r3, [pc, #668]	; (18c90 <__ssvfiscanf_r+0x490>)
   189f2:	9307      	str	r3, [sp, #28]
   189f4:	2300      	movs	r3, #0
   189f6:	9304      	str	r3, [sp, #16]
   189f8:	2603      	movs	r6, #3
   189fa:	f8db 3004 	ldr.w	r3, [fp, #4]
   189fe:	2b00      	cmp	r3, #0
   18a00:	dd69      	ble.n	18ad6 <__ssvfiscanf_r+0x2d6>
   18a02:	0669      	lsls	r1, r5, #25
   18a04:	d533      	bpl.n	18a6e <__ssvfiscanf_r+0x26e>
   18a06:	2e02      	cmp	r6, #2
   18a08:	f000 81f7 	beq.w	18dfa <__ssvfiscanf_r+0x5fa>
   18a0c:	2e03      	cmp	r6, #3
   18a0e:	f000 8143 	beq.w	18c98 <__ssvfiscanf_r+0x498>
   18a12:	2e01      	cmp	r6, #1
   18a14:	f000 810a 	beq.w	18c2c <__ssvfiscanf_r+0x42c>
   18a18:	2c00      	cmp	r4, #0
   18a1a:	bf08      	it	eq
   18a1c:	2401      	moveq	r4, #1
   18a1e:	f015 0301 	ands.w	r3, r5, #1
   18a22:	f040 8247 	bne.w	18eb4 <__ssvfiscanf_r+0x6b4>
   18a26:	06ed      	lsls	r5, r5, #27
   18a28:	f140 831c 	bpl.w	19064 <__ssvfiscanf_r+0x864>
   18a2c:	461d      	mov	r5, r3
   18a2e:	e009      	b.n	18a44 <__ssvfiscanf_r+0x244>
   18a30:	4413      	add	r3, r2
   18a32:	f8cb 3000 	str.w	r3, [fp]
   18a36:	4415      	add	r5, r2
   18a38:	1aa4      	subs	r4, r4, r2
   18a3a:	f7ff fe83 	bl	18744 <__ssrefill_r>
   18a3e:	2800      	cmp	r0, #0
   18a40:	f040 82d6 	bne.w	18ff0 <__ssvfiscanf_r+0x7f0>
   18a44:	f8db 2004 	ldr.w	r2, [fp, #4]
   18a48:	f8db 3000 	ldr.w	r3, [fp]
   18a4c:	42a2      	cmp	r2, r4
   18a4e:	4659      	mov	r1, fp
   18a50:	4638      	mov	r0, r7
   18a52:	dbed      	blt.n	18a30 <__ssvfiscanf_r+0x230>
   18a54:	1b12      	subs	r2, r2, r4
   18a56:	4423      	add	r3, r4
   18a58:	f8cb 2004 	str.w	r2, [fp, #4]
   18a5c:	4425      	add	r5, r4
   18a5e:	f8cb 3000 	str.w	r3, [fp]
   18a62:	9e03      	ldr	r6, [sp, #12]
   18a64:	44aa      	add	sl, r5
   18a66:	4634      	mov	r4, r6
   18a68:	e710      	b.n	1888c <__ssvfiscanf_r+0x8c>
   18a6a:	f8cb 3000 	str.w	r3, [fp]
   18a6e:	f000 fd35 	bl	194dc <__locale_ctype_ptr>
   18a72:	f8db 3000 	ldr.w	r3, [fp]
   18a76:	781a      	ldrb	r2, [r3, #0]
   18a78:	4410      	add	r0, r2
   18a7a:	3301      	adds	r3, #1
   18a7c:	7842      	ldrb	r2, [r0, #1]
   18a7e:	0712      	lsls	r2, r2, #28
   18a80:	d5c1      	bpl.n	18a06 <__ssvfiscanf_r+0x206>
   18a82:	f8db 2004 	ldr.w	r2, [fp, #4]
   18a86:	3a01      	subs	r2, #1
   18a88:	2a00      	cmp	r2, #0
   18a8a:	f10a 0a01 	add.w	sl, sl, #1
   18a8e:	f8cb 2004 	str.w	r2, [fp, #4]
   18a92:	dcea      	bgt.n	18a6a <__ssvfiscanf_r+0x26a>
   18a94:	4659      	mov	r1, fp
   18a96:	4638      	mov	r0, r7
   18a98:	f7ff fe54 	bl	18744 <__ssrefill_r>
   18a9c:	2800      	cmp	r0, #0
   18a9e:	d0e6      	beq.n	18a6e <__ssvfiscanf_r+0x26e>
   18aa0:	9a05      	ldr	r2, [sp, #20]
   18aa2:	2a00      	cmp	r2, #0
   18aa4:	d09c      	beq.n	189e0 <__ssvfiscanf_r+0x1e0>
   18aa6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   18aaa:	f013 0f40 	tst.w	r3, #64	; 0x40
   18aae:	4613      	mov	r3, r2
   18ab0:	bf18      	it	ne
   18ab2:	f04f 33ff 	movne.w	r3, #4294967295
   18ab6:	9305      	str	r3, [sp, #20]
   18ab8:	9805      	ldr	r0, [sp, #20]
   18aba:	b059      	add	sp, #356	; 0x164
   18abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ac0:	9303      	str	r3, [sp, #12]
   18ac2:	4b73      	ldr	r3, [pc, #460]	; (18c90 <__ssvfiscanf_r+0x490>)
   18ac4:	9307      	str	r3, [sp, #28]
   18ac6:	230a      	movs	r3, #10
   18ac8:	9304      	str	r3, [sp, #16]
   18aca:	f8db 3004 	ldr.w	r3, [fp, #4]
   18ace:	2b00      	cmp	r3, #0
   18ad0:	f04f 0603 	mov.w	r6, #3
   18ad4:	dc95      	bgt.n	18a02 <__ssvfiscanf_r+0x202>
   18ad6:	4659      	mov	r1, fp
   18ad8:	4638      	mov	r0, r7
   18ada:	f7ff fe33 	bl	18744 <__ssrefill_r>
   18ade:	2800      	cmp	r0, #0
   18ae0:	d08f      	beq.n	18a02 <__ssvfiscanf_r+0x202>
   18ae2:	e7dd      	b.n	18aa0 <__ssvfiscanf_r+0x2a0>
   18ae4:	9303      	str	r3, [sp, #12]
   18ae6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   18aea:	2600      	movs	r6, #0
   18aec:	e785      	b.n	189fa <__ssvfiscanf_r+0x1fa>
   18aee:	f896 8001 	ldrb.w	r8, [r6, #1]
   18af2:	f045 0504 	orr.w	r5, r5, #4
   18af6:	461e      	mov	r6, r3
   18af8:	e6d8      	b.n	188ac <__ssvfiscanf_r+0xac>
   18afa:	9303      	str	r3, [sp, #12]
   18afc:	4b65      	ldr	r3, [pc, #404]	; (18c94 <__ssvfiscanf_r+0x494>)
   18afe:	9307      	str	r3, [sp, #28]
   18b00:	230a      	movs	r3, #10
   18b02:	9304      	str	r3, [sp, #16]
   18b04:	2603      	movs	r6, #3
   18b06:	e778      	b.n	189fa <__ssvfiscanf_r+0x1fa>
   18b08:	9303      	str	r3, [sp, #12]
   18b0a:	2602      	movs	r6, #2
   18b0c:	e775      	b.n	189fa <__ssvfiscanf_r+0x1fa>
   18b0e:	9303      	str	r3, [sp, #12]
   18b10:	f445 7508 	orr.w	r5, r5, #544	; 0x220
   18b14:	4b5f      	ldr	r3, [pc, #380]	; (18c94 <__ssvfiscanf_r+0x494>)
   18b16:	9307      	str	r3, [sp, #28]
   18b18:	2310      	movs	r3, #16
   18b1a:	9304      	str	r3, [sp, #16]
   18b1c:	2603      	movs	r6, #3
   18b1e:	e76c      	b.n	189fa <__ssvfiscanf_r+0x1fa>
   18b20:	9303      	str	r3, [sp, #12]
   18b22:	4b5c      	ldr	r3, [pc, #368]	; (18c94 <__ssvfiscanf_r+0x494>)
   18b24:	9307      	str	r3, [sp, #28]
   18b26:	2308      	movs	r3, #8
   18b28:	9304      	str	r3, [sp, #16]
   18b2a:	2603      	movs	r6, #3
   18b2c:	e765      	b.n	189fa <__ssvfiscanf_r+0x1fa>
   18b2e:	9303      	str	r3, [sp, #12]
   18b30:	06eb      	lsls	r3, r5, #27
   18b32:	d478      	bmi.n	18c26 <__ssvfiscanf_r+0x426>
   18b34:	076e      	lsls	r6, r5, #29
   18b36:	f100 82d4 	bmi.w	190e2 <__ssvfiscanf_r+0x8e2>
   18b3a:	07ec      	lsls	r4, r5, #31
   18b3c:	f100 82c0 	bmi.w	190c0 <__ssvfiscanf_r+0x8c0>
   18b40:	07a8      	lsls	r0, r5, #30
   18b42:	f140 82bd 	bpl.w	190c0 <__ssvfiscanf_r+0x8c0>
   18b46:	9a06      	ldr	r2, [sp, #24]
   18b48:	9e03      	ldr	r6, [sp, #12]
   18b4a:	6813      	ldr	r3, [r2, #0]
   18b4c:	4650      	mov	r0, sl
   18b4e:	17c1      	asrs	r1, r0, #31
   18b50:	3204      	adds	r2, #4
   18b52:	9206      	str	r2, [sp, #24]
   18b54:	e9c3 0100 	strd	r0, r1, [r3]
   18b58:	4634      	mov	r4, r6
   18b5a:	e697      	b.n	1888c <__ssvfiscanf_r+0x8c>
   18b5c:	f896 8001 	ldrb.w	r8, [r6, #1]
   18b60:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   18b64:	f000 82a5 	beq.w	190b2 <__ssvfiscanf_r+0x8b2>
   18b68:	f045 0501 	orr.w	r5, r5, #1
   18b6c:	461e      	mov	r6, r3
   18b6e:	e69d      	b.n	188ac <__ssvfiscanf_r+0xac>
   18b70:	4619      	mov	r1, r3
   18b72:	a818      	add	r0, sp, #96	; 0x60
   18b74:	f000 ff0e 	bl	19994 <__sccl>
   18b78:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   18b7c:	9003      	str	r0, [sp, #12]
   18b7e:	2601      	movs	r6, #1
   18b80:	e73b      	b.n	189fa <__ssvfiscanf_r+0x1fa>
   18b82:	9303      	str	r3, [sp, #12]
   18b84:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   18b88:	e7c4      	b.n	18b14 <__ssvfiscanf_r+0x314>
   18b8a:	9303      	str	r3, [sp, #12]
   18b8c:	f045 0501 	orr.w	r5, r5, #1
   18b90:	e7c7      	b.n	18b22 <__ssvfiscanf_r+0x322>
   18b92:	f896 8001 	ldrb.w	r8, [r6, #1]
   18b96:	f045 0502 	orr.w	r5, r5, #2
   18b9a:	461e      	mov	r6, r3
   18b9c:	e686      	b.n	188ac <__ssvfiscanf_r+0xac>
   18b9e:	9303      	str	r3, [sp, #12]
   18ba0:	f045 0501 	orr.w	r5, r5, #1
   18ba4:	e78d      	b.n	18ac2 <__ssvfiscanf_r+0x2c2>
   18ba6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   18baa:	eb08 0444 	add.w	r4, r8, r4, lsl #1
   18bae:	3c30      	subs	r4, #48	; 0x30
   18bb0:	f896 8001 	ldrb.w	r8, [r6, #1]
   18bb4:	461e      	mov	r6, r3
   18bb6:	e679      	b.n	188ac <__ssvfiscanf_r+0xac>
   18bb8:	f896 8001 	ldrb.w	r8, [r6, #1]
   18bbc:	f045 0510 	orr.w	r5, r5, #16
   18bc0:	461e      	mov	r6, r3
   18bc2:	e673      	b.n	188ac <__ssvfiscanf_r+0xac>
   18bc4:	9303      	str	r3, [sp, #12]
   18bc6:	f000 fc89 	bl	194dc <__locale_ctype_ptr>
   18bca:	4440      	add	r0, r8
   18bcc:	7843      	ldrb	r3, [r0, #1]
   18bce:	f003 0303 	and.w	r3, r3, #3
   18bd2:	2b01      	cmp	r3, #1
   18bd4:	f47f af75 	bne.w	18ac2 <__ssvfiscanf_r+0x2c2>
   18bd8:	f045 0501 	orr.w	r5, r5, #1
   18bdc:	e771      	b.n	18ac2 <__ssvfiscanf_r+0x2c2>
   18bde:	ab0c      	add	r3, sp, #48	; 0x30
   18be0:	4618      	mov	r0, r3
   18be2:	2208      	movs	r2, #8
   18be4:	2100      	movs	r1, #0
   18be6:	9308      	str	r3, [sp, #32]
   18be8:	f7fd fc32 	bl	16450 <memset>
   18bec:	f015 0310 	ands.w	r3, r5, #16
   18bf0:	9309      	str	r3, [sp, #36]	; 0x24
   18bf2:	f000 81e1 	beq.w	18fb8 <__ssvfiscanf_r+0x7b8>
   18bf6:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   18bfa:	2600      	movs	r6, #0
   18bfc:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   18c00:	f000 fc6c 	bl	194dc <__locale_ctype_ptr>
   18c04:	f8db 3000 	ldr.w	r3, [fp]
   18c08:	781b      	ldrb	r3, [r3, #0]
   18c0a:	4403      	add	r3, r0
   18c0c:	785b      	ldrb	r3, [r3, #1]
   18c0e:	071a      	lsls	r2, r3, #28
   18c10:	d402      	bmi.n	18c18 <__ssvfiscanf_r+0x418>
   18c12:	2c00      	cmp	r4, #0
   18c14:	f040 8270 	bne.w	190f8 <__ssvfiscanf_r+0x8f8>
   18c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18c1a:	b923      	cbnz	r3, 18c26 <__ssvfiscanf_r+0x426>
   18c1c:	f8c9 3000 	str.w	r3, [r9]
   18c20:	9b05      	ldr	r3, [sp, #20]
   18c22:	3301      	adds	r3, #1
   18c24:	9305      	str	r3, [sp, #20]
   18c26:	9e03      	ldr	r6, [sp, #12]
   18c28:	4634      	mov	r4, r6
   18c2a:	e62f      	b.n	1888c <__ssvfiscanf_r+0x8c>
   18c2c:	2c00      	cmp	r4, #0
   18c2e:	bf08      	it	eq
   18c30:	f04f 34ff 	moveq.w	r4, #4294967295
   18c34:	06e8      	lsls	r0, r5, #27
   18c36:	f140 810b 	bpl.w	18e50 <__ssvfiscanf_r+0x650>
   18c3a:	f8db 2000 	ldr.w	r2, [fp]
   18c3e:	2500      	movs	r5, #0
   18c40:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   18c44:	7813      	ldrb	r3, [r2, #0]
   18c46:	f818 3003 	ldrb.w	r3, [r8, r3]
   18c4a:	3201      	adds	r2, #1
   18c4c:	b1db      	cbz	r3, 18c86 <__ssvfiscanf_r+0x486>
   18c4e:	f8db 3004 	ldr.w	r3, [fp, #4]
   18c52:	f8cb 2000 	str.w	r2, [fp]
   18c56:	3501      	adds	r5, #1
   18c58:	3b01      	subs	r3, #1
   18c5a:	42ac      	cmp	r4, r5
   18c5c:	f8cb 3004 	str.w	r3, [fp, #4]
   18c60:	f43f aeff 	beq.w	18a62 <__ssvfiscanf_r+0x262>
   18c64:	2b00      	cmp	r3, #0
   18c66:	dced      	bgt.n	18c44 <__ssvfiscanf_r+0x444>
   18c68:	4659      	mov	r1, fp
   18c6a:	4638      	mov	r0, r7
   18c6c:	f7ff fd6a 	bl	18744 <__ssrefill_r>
   18c70:	2800      	cmp	r0, #0
   18c72:	f47f aef6 	bne.w	18a62 <__ssvfiscanf_r+0x262>
   18c76:	f8db 2000 	ldr.w	r2, [fp]
   18c7a:	7813      	ldrb	r3, [r2, #0]
   18c7c:	f818 3003 	ldrb.w	r3, [r8, r3]
   18c80:	3201      	adds	r2, #1
   18c82:	2b00      	cmp	r3, #0
   18c84:	d1e3      	bne.n	18c4e <__ssvfiscanf_r+0x44e>
   18c86:	2d00      	cmp	r5, #0
   18c88:	f47f aeeb 	bne.w	18a62 <__ssvfiscanf_r+0x262>
   18c8c:	e604      	b.n	18898 <__ssvfiscanf_r+0x98>
   18c8e:	bf00      	nop
   18c90:	00019b31 	.word	0x00019b31
   18c94:	00017b25 	.word	0x00017b25
   18c98:	1e63      	subs	r3, r4, #1
   18c9a:	2b26      	cmp	r3, #38	; 0x26
   18c9c:	bf8c      	ite	hi
   18c9e:	f1a4 0227 	subhi.w	r2, r4, #39	; 0x27
   18ca2:	2200      	movls	r2, #0
   18ca4:	f04f 0900 	mov.w	r9, #0
   18ca8:	4611      	mov	r1, r2
   18caa:	ae0e      	add	r6, sp, #56	; 0x38
   18cac:	464b      	mov	r3, r9
   18cae:	46b9      	mov	r9, r7
   18cb0:	9f04      	ldr	r7, [sp, #16]
   18cb2:	4652      	mov	r2, sl
   18cb4:	bf88      	it	hi
   18cb6:	2427      	movhi	r4, #39	; 0x27
   18cb8:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
   18cbc:	46b0      	mov	r8, r6
   18cbe:	468a      	mov	sl, r1
   18cc0:	f8db 0000 	ldr.w	r0, [fp]
   18cc4:	f890 e000 	ldrb.w	lr, [r0]
   18cc8:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
   18ccc:	294d      	cmp	r1, #77	; 0x4d
   18cce:	d842      	bhi.n	18d56 <__ssvfiscanf_r+0x556>
   18cd0:	e8df f001 	tbb	[pc, r1]
   18cd4:	418e418e 	.word	0x418e418e
   18cd8:	5d5d6341 	.word	0x5d5d6341
   18cdc:	5d5d5d5d 	.word	0x5d5d5d5d
   18ce0:	4188885d 	.word	0x4188885d
   18ce4:	41414141 	.word	0x41414141
   18ce8:	58584141 	.word	0x58584141
   18cec:	58585858 	.word	0x58585858
   18cf0:	41414141 	.word	0x41414141
   18cf4:	41414141 	.word	0x41414141
   18cf8:	41414141 	.word	0x41414141
   18cfc:	41414141 	.word	0x41414141
   18d00:	41412741 	.word	0x41412741
   18d04:	41414141 	.word	0x41414141
   18d08:	58584141 	.word	0x58584141
   18d0c:	58585858 	.word	0x58585858
   18d10:	41414141 	.word	0x41414141
   18d14:	41414141 	.word	0x41414141
   18d18:	41414141 	.word	0x41414141
   18d1c:	41414141 	.word	0x41414141
   18d20:	2741      	.short	0x2741
   18d22:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
   18d26:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   18d2a:	d114      	bne.n	18d56 <__ssvfiscanf_r+0x556>
   18d2c:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   18d30:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
   18d34:	2710      	movs	r7, #16
   18d36:	f8db 1004 	ldr.w	r1, [fp, #4]
   18d3a:	f888 e000 	strb.w	lr, [r8]
   18d3e:	3901      	subs	r1, #1
   18d40:	2900      	cmp	r1, #0
   18d42:	f108 0801 	add.w	r8, r8, #1
   18d46:	f8cb 1004 	str.w	r1, [fp, #4]
   18d4a:	dd40      	ble.n	18dce <__ssvfiscanf_r+0x5ce>
   18d4c:	3001      	adds	r0, #1
   18d4e:	f8cb 0000 	str.w	r0, [fp]
   18d52:	3c01      	subs	r4, #1
   18d54:	d1b4      	bne.n	18cc0 <__ssvfiscanf_r+0x4c0>
   18d56:	05e8      	lsls	r0, r5, #23
   18d58:	9704      	str	r7, [sp, #16]
   18d5a:	4692      	mov	sl, r2
   18d5c:	464f      	mov	r7, r9
   18d5e:	4699      	mov	r9, r3
   18d60:	d505      	bpl.n	18d6e <__ssvfiscanf_r+0x56e>
   18d62:	45b0      	cmp	r8, r6
   18d64:	f200 8194 	bhi.w	19090 <__ssvfiscanf_r+0x890>
   18d68:	45b0      	cmp	r8, r6
   18d6a:	f43f ad95 	beq.w	18898 <__ssvfiscanf_r+0x98>
   18d6e:	f015 0410 	ands.w	r4, r5, #16
   18d72:	f000 80e5 	beq.w	18f40 <__ssvfiscanf_r+0x740>
   18d76:	eba8 0606 	sub.w	r6, r8, r6
   18d7a:	44b1      	add	r9, r6
   18d7c:	9e03      	ldr	r6, [sp, #12]
   18d7e:	44ca      	add	sl, r9
   18d80:	4634      	mov	r4, r6
   18d82:	e583      	b.n	1888c <__ssvfiscanf_r+0x8c>
   18d84:	2f0a      	cmp	r7, #10
   18d86:	dde6      	ble.n	18d56 <__ssvfiscanf_r+0x556>
   18d88:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   18d8c:	e7d3      	b.n	18d36 <__ssvfiscanf_r+0x536>
   18d8e:	49b3      	ldr	r1, [pc, #716]	; (1905c <__ssvfiscanf_r+0x85c>)
   18d90:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   18d94:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   18d98:	e7cd      	b.n	18d36 <__ssvfiscanf_r+0x536>
   18d9a:	0529      	lsls	r1, r5, #20
   18d9c:	d5cb      	bpl.n	18d36 <__ssvfiscanf_r+0x536>
   18d9e:	b917      	cbnz	r7, 18da6 <__ssvfiscanf_r+0x5a6>
   18da0:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   18da4:	2708      	movs	r7, #8
   18da6:	0569      	lsls	r1, r5, #21
   18da8:	f100 80fa 	bmi.w	18fa0 <__ssvfiscanf_r+0x7a0>
   18dac:	f425 7560 	bic.w	r5, r5, #896	; 0x380
   18db0:	f1ba 0f00 	cmp.w	sl, #0
   18db4:	d002      	beq.n	18dbc <__ssvfiscanf_r+0x5bc>
   18db6:	f10a 3aff 	add.w	sl, sl, #4294967295
   18dba:	3401      	adds	r4, #1
   18dbc:	f8db 1004 	ldr.w	r1, [fp, #4]
   18dc0:	3901      	subs	r1, #1
   18dc2:	2900      	cmp	r1, #0
   18dc4:	f103 0301 	add.w	r3, r3, #1
   18dc8:	f8cb 1004 	str.w	r1, [fp, #4]
   18dcc:	dcbe      	bgt.n	18d4c <__ssvfiscanf_r+0x54c>
   18dce:	4659      	mov	r1, fp
   18dd0:	4648      	mov	r0, r9
   18dd2:	9308      	str	r3, [sp, #32]
   18dd4:	9204      	str	r2, [sp, #16]
   18dd6:	f7ff fcb5 	bl	18744 <__ssrefill_r>
   18dda:	9a04      	ldr	r2, [sp, #16]
   18ddc:	9b08      	ldr	r3, [sp, #32]
   18dde:	2800      	cmp	r0, #0
   18de0:	d0b7      	beq.n	18d52 <__ssvfiscanf_r+0x552>
   18de2:	e7b8      	b.n	18d56 <__ssvfiscanf_r+0x556>
   18de4:	499d      	ldr	r1, [pc, #628]	; (1905c <__ssvfiscanf_r+0x85c>)
   18de6:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   18dea:	2f08      	cmp	r7, #8
   18dec:	dccc      	bgt.n	18d88 <__ssvfiscanf_r+0x588>
   18dee:	e7b2      	b.n	18d56 <__ssvfiscanf_r+0x556>
   18df0:	0629      	lsls	r1, r5, #24
   18df2:	d5b0      	bpl.n	18d56 <__ssvfiscanf_r+0x556>
   18df4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   18df8:	e79d      	b.n	18d36 <__ssvfiscanf_r+0x536>
   18dfa:	2c00      	cmp	r4, #0
   18dfc:	bf08      	it	eq
   18dfe:	f04f 34ff 	moveq.w	r4, #4294967295
   18e02:	f015 0601 	ands.w	r6, r5, #1
   18e06:	f47f aeea 	bne.w	18bde <__ssvfiscanf_r+0x3de>
   18e0a:	06eb      	lsls	r3, r5, #27
   18e0c:	f140 80f4 	bpl.w	18ff8 <__ssvfiscanf_r+0x7f8>
   18e10:	f000 fb64 	bl	194dc <__locale_ctype_ptr>
   18e14:	f8db 3000 	ldr.w	r3, [fp]
   18e18:	781a      	ldrb	r2, [r3, #0]
   18e1a:	4410      	add	r0, r2
   18e1c:	3301      	adds	r3, #1
   18e1e:	7842      	ldrb	r2, [r0, #1]
   18e20:	0715      	lsls	r5, r2, #28
   18e22:	d411      	bmi.n	18e48 <__ssvfiscanf_r+0x648>
   18e24:	f8db 2004 	ldr.w	r2, [fp, #4]
   18e28:	f8cb 3000 	str.w	r3, [fp]
   18e2c:	3601      	adds	r6, #1
   18e2e:	3a01      	subs	r2, #1
   18e30:	42b4      	cmp	r4, r6
   18e32:	f8cb 2004 	str.w	r2, [fp, #4]
   18e36:	d007      	beq.n	18e48 <__ssvfiscanf_r+0x648>
   18e38:	2a00      	cmp	r2, #0
   18e3a:	dce9      	bgt.n	18e10 <__ssvfiscanf_r+0x610>
   18e3c:	4659      	mov	r1, fp
   18e3e:	4638      	mov	r0, r7
   18e40:	f7ff fc80 	bl	18744 <__ssrefill_r>
   18e44:	2800      	cmp	r0, #0
   18e46:	d0e3      	beq.n	18e10 <__ssvfiscanf_r+0x610>
   18e48:	44b2      	add	sl, r6
   18e4a:	9e03      	ldr	r6, [sp, #12]
   18e4c:	4634      	mov	r4, r6
   18e4e:	e51d      	b.n	1888c <__ssvfiscanf_r+0x8c>
   18e50:	9a06      	ldr	r2, [sp, #24]
   18e52:	6815      	ldr	r5, [r2, #0]
   18e54:	1d16      	adds	r6, r2, #4
   18e56:	46a9      	mov	r9, r5
   18e58:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   18e5c:	f8db 3000 	ldr.w	r3, [fp]
   18e60:	781a      	ldrb	r2, [r3, #0]
   18e62:	f818 2002 	ldrb.w	r2, [r8, r2]
   18e66:	1c59      	adds	r1, r3, #1
   18e68:	b1c2      	cbz	r2, 18e9c <__ssvfiscanf_r+0x69c>
   18e6a:	f8db 2004 	ldr.w	r2, [fp, #4]
   18e6e:	f8cb 1000 	str.w	r1, [fp]
   18e72:	3a01      	subs	r2, #1
   18e74:	f8cb 2004 	str.w	r2, [fp, #4]
   18e78:	781b      	ldrb	r3, [r3, #0]
   18e7a:	f809 3b01 	strb.w	r3, [r9], #1
   18e7e:	3c01      	subs	r4, #1
   18e80:	d00c      	beq.n	18e9c <__ssvfiscanf_r+0x69c>
   18e82:	f8db 3004 	ldr.w	r3, [fp, #4]
   18e86:	2b00      	cmp	r3, #0
   18e88:	dce8      	bgt.n	18e5c <__ssvfiscanf_r+0x65c>
   18e8a:	4659      	mov	r1, fp
   18e8c:	4638      	mov	r0, r7
   18e8e:	f7ff fc59 	bl	18744 <__ssrefill_r>
   18e92:	2800      	cmp	r0, #0
   18e94:	d0e2      	beq.n	18e5c <__ssvfiscanf_r+0x65c>
   18e96:	454d      	cmp	r5, r9
   18e98:	f43f ae02 	beq.w	18aa0 <__ssvfiscanf_r+0x2a0>
   18e9c:	ebb9 0505 	subs.w	r5, r9, r5
   18ea0:	f43f acfa 	beq.w	18898 <__ssvfiscanf_r+0x98>
   18ea4:	9a05      	ldr	r2, [sp, #20]
   18ea6:	9606      	str	r6, [sp, #24]
   18ea8:	2300      	movs	r3, #0
   18eaa:	3201      	adds	r2, #1
   18eac:	9205      	str	r2, [sp, #20]
   18eae:	f889 3000 	strb.w	r3, [r9]
   18eb2:	e5d6      	b.n	18a62 <__ssvfiscanf_r+0x262>
   18eb4:	ab0c      	add	r3, sp, #48	; 0x30
   18eb6:	4618      	mov	r0, r3
   18eb8:	2208      	movs	r2, #8
   18eba:	2100      	movs	r1, #0
   18ebc:	9308      	str	r3, [sp, #32]
   18ebe:	f7fd fac7 	bl	16450 <memset>
   18ec2:	f015 0310 	ands.w	r3, r5, #16
   18ec6:	9309      	str	r3, [sp, #36]	; 0x24
   18ec8:	d06d      	beq.n	18fa6 <__ssvfiscanf_r+0x7a6>
   18eca:	f04f 0900 	mov.w	r9, #0
   18ece:	2c00      	cmp	r4, #0
   18ed0:	f43f aea9 	beq.w	18c26 <__ssvfiscanf_r+0x426>
   18ed4:	2500      	movs	r5, #0
   18ed6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   18eda:	f000 faed 	bl	194b8 <__locale_mb_cur_max>
   18ede:	4285      	cmp	r5, r0
   18ee0:	f43f adde 	beq.w	18aa0 <__ssvfiscanf_r+0x2a0>
   18ee4:	e89b 000c 	ldmia.w	fp, {r2, r3}
   18ee8:	f812 0b01 	ldrb.w	r0, [r2], #1
   18eec:	f8cb 2000 	str.w	r2, [fp]
   18ef0:	3b01      	subs	r3, #1
   18ef2:	9a08      	ldr	r2, [sp, #32]
   18ef4:	9200      	str	r2, [sp, #0]
   18ef6:	1c6e      	adds	r6, r5, #1
   18ef8:	f8cb 3004 	str.w	r3, [fp, #4]
   18efc:	f808 0005 	strb.w	r0, [r8, r5]
   18f00:	4633      	mov	r3, r6
   18f02:	4642      	mov	r2, r8
   18f04:	4649      	mov	r1, r9
   18f06:	4638      	mov	r0, r7
   18f08:	f000 faf6 	bl	194f8 <_mbrtowc_r>
   18f0c:	1c43      	adds	r3, r0, #1
   18f0e:	f43f adc7 	beq.w	18aa0 <__ssvfiscanf_r+0x2a0>
   18f12:	2800      	cmp	r0, #0
   18f14:	d15d      	bne.n	18fd2 <__ssvfiscanf_r+0x7d2>
   18f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18f18:	2b00      	cmp	r3, #0
   18f1a:	d15e      	bne.n	18fda <__ssvfiscanf_r+0x7da>
   18f1c:	f8c9 3000 	str.w	r3, [r9]
   18f20:	44b2      	add	sl, r6
   18f22:	3c01      	subs	r4, #1
   18f24:	f109 0904 	add.w	r9, r9, #4
   18f28:	2500      	movs	r5, #0
   18f2a:	f8db 3004 	ldr.w	r3, [fp, #4]
   18f2e:	2b00      	cmp	r3, #0
   18f30:	dd2d      	ble.n	18f8e <__ssvfiscanf_r+0x78e>
   18f32:	2c00      	cmp	r4, #0
   18f34:	d1d1      	bne.n	18eda <__ssvfiscanf_r+0x6da>
   18f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18f38:	2b00      	cmp	r3, #0
   18f3a:	f43f ae71 	beq.w	18c20 <__ssvfiscanf_r+0x420>
   18f3e:	e672      	b.n	18c26 <__ssvfiscanf_r+0x426>
   18f40:	4622      	mov	r2, r4
   18f42:	4631      	mov	r1, r6
   18f44:	f888 4000 	strb.w	r4, [r8]
   18f48:	9b04      	ldr	r3, [sp, #16]
   18f4a:	9c07      	ldr	r4, [sp, #28]
   18f4c:	4638      	mov	r0, r7
   18f4e:	47a0      	blx	r4
   18f50:	06a9      	lsls	r1, r5, #26
   18f52:	d438      	bmi.n	18fc6 <__ssvfiscanf_r+0x7c6>
   18f54:	076a      	lsls	r2, r5, #29
   18f56:	f100 80be 	bmi.w	190d6 <__ssvfiscanf_r+0x8d6>
   18f5a:	f015 0201 	ands.w	r2, r5, #1
   18f5e:	d132      	bne.n	18fc6 <__ssvfiscanf_r+0x7c6>
   18f60:	07ab      	lsls	r3, r5, #30
   18f62:	d530      	bpl.n	18fc6 <__ssvfiscanf_r+0x7c6>
   18f64:	9b07      	ldr	r3, [sp, #28]
   18f66:	4619      	mov	r1, r3
   18f68:	4b3d      	ldr	r3, [pc, #244]	; (19060 <__ssvfiscanf_r+0x860>)
   18f6a:	4299      	cmp	r1, r3
   18f6c:	4638      	mov	r0, r7
   18f6e:	9b04      	ldr	r3, [sp, #16]
   18f70:	4631      	mov	r1, r6
   18f72:	f000 8105 	beq.w	19180 <__ssvfiscanf_r+0x980>
   18f76:	f000 febb 	bl	19cf0 <_strtoll_r>
   18f7a:	9a06      	ldr	r2, [sp, #24]
   18f7c:	6813      	ldr	r3, [r2, #0]
   18f7e:	e9c3 0100 	strd	r0, r1, [r3]
   18f82:	3204      	adds	r2, #4
   18f84:	9206      	str	r2, [sp, #24]
   18f86:	9b05      	ldr	r3, [sp, #20]
   18f88:	3301      	adds	r3, #1
   18f8a:	9305      	str	r3, [sp, #20]
   18f8c:	e6f3      	b.n	18d76 <__ssvfiscanf_r+0x576>
   18f8e:	4659      	mov	r1, fp
   18f90:	4638      	mov	r0, r7
   18f92:	f7ff fbd7 	bl	18744 <__ssrefill_r>
   18f96:	2800      	cmp	r0, #0
   18f98:	d0cb      	beq.n	18f32 <__ssvfiscanf_r+0x732>
   18f9a:	2d00      	cmp	r5, #0
   18f9c:	d0cb      	beq.n	18f36 <__ssvfiscanf_r+0x736>
   18f9e:	e57f      	b.n	18aa0 <__ssvfiscanf_r+0x2a0>
   18fa0:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
   18fa4:	e6c7      	b.n	18d36 <__ssvfiscanf_r+0x536>
   18fa6:	9a06      	ldr	r2, [sp, #24]
   18fa8:	4613      	mov	r3, r2
   18faa:	3304      	adds	r3, #4
   18fac:	f8d2 9000 	ldr.w	r9, [r2]
   18fb0:	9306      	str	r3, [sp, #24]
   18fb2:	2c00      	cmp	r4, #0
   18fb4:	d18e      	bne.n	18ed4 <__ssvfiscanf_r+0x6d4>
   18fb6:	e633      	b.n	18c20 <__ssvfiscanf_r+0x420>
   18fb8:	9a06      	ldr	r2, [sp, #24]
   18fba:	4613      	mov	r3, r2
   18fbc:	3304      	adds	r3, #4
   18fbe:	f8d2 9000 	ldr.w	r9, [r2]
   18fc2:	9306      	str	r3, [sp, #24]
   18fc4:	e619      	b.n	18bfa <__ssvfiscanf_r+0x3fa>
   18fc6:	9a06      	ldr	r2, [sp, #24]
   18fc8:	6813      	ldr	r3, [r2, #0]
   18fca:	3204      	adds	r2, #4
   18fcc:	9206      	str	r2, [sp, #24]
   18fce:	6018      	str	r0, [r3, #0]
   18fd0:	e7d9      	b.n	18f86 <__ssvfiscanf_r+0x786>
   18fd2:	3002      	adds	r0, #2
   18fd4:	d105      	bne.n	18fe2 <__ssvfiscanf_r+0x7e2>
   18fd6:	4635      	mov	r5, r6
   18fd8:	e7a7      	b.n	18f2a <__ssvfiscanf_r+0x72a>
   18fda:	44b2      	add	sl, r6
   18fdc:	3c01      	subs	r4, #1
   18fde:	4605      	mov	r5, r0
   18fe0:	e7a3      	b.n	18f2a <__ssvfiscanf_r+0x72a>
   18fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18fe4:	44b2      	add	sl, r6
   18fe6:	3c01      	subs	r4, #1
   18fe8:	2b00      	cmp	r3, #0
   18fea:	d09b      	beq.n	18f24 <__ssvfiscanf_r+0x724>
   18fec:	2500      	movs	r5, #0
   18fee:	e79c      	b.n	18f2a <__ssvfiscanf_r+0x72a>
   18ff0:	2d00      	cmp	r5, #0
   18ff2:	f47f ad36 	bne.w	18a62 <__ssvfiscanf_r+0x262>
   18ff6:	e553      	b.n	18aa0 <__ssvfiscanf_r+0x2a0>
   18ff8:	9a06      	ldr	r2, [sp, #24]
   18ffa:	6816      	ldr	r6, [r2, #0]
   18ffc:	f102 0804 	add.w	r8, r2, #4
   19000:	4635      	mov	r5, r6
   19002:	f000 fa6b 	bl	194dc <__locale_ctype_ptr>
   19006:	f8db 2000 	ldr.w	r2, [fp]
   1900a:	7813      	ldrb	r3, [r2, #0]
   1900c:	4418      	add	r0, r3
   1900e:	1c51      	adds	r1, r2, #1
   19010:	7843      	ldrb	r3, [r0, #1]
   19012:	0718      	lsls	r0, r3, #28
   19014:	d415      	bmi.n	19042 <__ssvfiscanf_r+0x842>
   19016:	f8db 3004 	ldr.w	r3, [fp, #4]
   1901a:	f8cb 1000 	str.w	r1, [fp]
   1901e:	3b01      	subs	r3, #1
   19020:	f8cb 3004 	str.w	r3, [fp, #4]
   19024:	7813      	ldrb	r3, [r2, #0]
   19026:	f805 3b01 	strb.w	r3, [r5], #1
   1902a:	3c01      	subs	r4, #1
   1902c:	d009      	beq.n	19042 <__ssvfiscanf_r+0x842>
   1902e:	f8db 3004 	ldr.w	r3, [fp, #4]
   19032:	2b00      	cmp	r3, #0
   19034:	dce5      	bgt.n	19002 <__ssvfiscanf_r+0x802>
   19036:	4659      	mov	r1, fp
   19038:	4638      	mov	r0, r7
   1903a:	f7ff fb83 	bl	18744 <__ssrefill_r>
   1903e:	2800      	cmp	r0, #0
   19040:	d0df      	beq.n	19002 <__ssvfiscanf_r+0x802>
   19042:	1bae      	subs	r6, r5, r6
   19044:	9a05      	ldr	r2, [sp, #20]
   19046:	f8cd 8018 	str.w	r8, [sp, #24]
   1904a:	44b2      	add	sl, r6
   1904c:	9e03      	ldr	r6, [sp, #12]
   1904e:	2300      	movs	r3, #0
   19050:	3201      	adds	r2, #1
   19052:	9205      	str	r2, [sp, #20]
   19054:	702b      	strb	r3, [r5, #0]
   19056:	4634      	mov	r4, r6
   19058:	e418      	b.n	1888c <__ssvfiscanf_r+0x8c>
   1905a:	bf00      	nop
   1905c:	0001bca4 	.word	0x0001bca4
   19060:	00017b25 	.word	0x00017b25
   19064:	9d06      	ldr	r5, [sp, #24]
   19066:	4623      	mov	r3, r4
   19068:	6829      	ldr	r1, [r5, #0]
   1906a:	f8cd b000 	str.w	fp, [sp]
   1906e:	2201      	movs	r2, #1
   19070:	4638      	mov	r0, r7
   19072:	f7ff fb85 	bl	18780 <_sfread_r>
   19076:	1d2e      	adds	r6, r5, #4
   19078:	2800      	cmp	r0, #0
   1907a:	f43f ad11 	beq.w	18aa0 <__ssvfiscanf_r+0x2a0>
   1907e:	9b05      	ldr	r3, [sp, #20]
   19080:	9606      	str	r6, [sp, #24]
   19082:	9e03      	ldr	r6, [sp, #12]
   19084:	3301      	adds	r3, #1
   19086:	4482      	add	sl, r0
   19088:	9305      	str	r3, [sp, #20]
   1908a:	4634      	mov	r4, r6
   1908c:	f7ff bbfe 	b.w	1888c <__ssvfiscanf_r+0x8c>
   19090:	f818 1c01 	ldrb.w	r1, [r8, #-1]
   19094:	465a      	mov	r2, fp
   19096:	4638      	mov	r0, r7
   19098:	f7ff fb14 	bl	186c4 <_sungetc_r>
   1909c:	f108 38ff 	add.w	r8, r8, #4294967295
   190a0:	e662      	b.n	18d68 <__ssvfiscanf_r+0x568>
   190a2:	4659      	mov	r1, fp
   190a4:	4638      	mov	r0, r7
   190a6:	f7ff fb4d 	bl	18744 <__ssrefill_r>
   190aa:	2800      	cmp	r0, #0
   190ac:	f43f ac84 	beq.w	189b8 <__ssvfiscanf_r+0x1b8>
   190b0:	e4f6      	b.n	18aa0 <__ssvfiscanf_r+0x2a0>
   190b2:	f896 8002 	ldrb.w	r8, [r6, #2]
   190b6:	f045 0502 	orr.w	r5, r5, #2
   190ba:	3602      	adds	r6, #2
   190bc:	f7ff bbf6 	b.w	188ac <__ssvfiscanf_r+0xac>
   190c0:	9a06      	ldr	r2, [sp, #24]
   190c2:	9e03      	ldr	r6, [sp, #12]
   190c4:	6813      	ldr	r3, [r2, #0]
   190c6:	f8c3 a000 	str.w	sl, [r3]
   190ca:	4613      	mov	r3, r2
   190cc:	3304      	adds	r3, #4
   190ce:	9306      	str	r3, [sp, #24]
   190d0:	4634      	mov	r4, r6
   190d2:	f7ff bbdb 	b.w	1888c <__ssvfiscanf_r+0x8c>
   190d6:	9a06      	ldr	r2, [sp, #24]
   190d8:	6813      	ldr	r3, [r2, #0]
   190da:	3204      	adds	r2, #4
   190dc:	9206      	str	r2, [sp, #24]
   190de:	8018      	strh	r0, [r3, #0]
   190e0:	e751      	b.n	18f86 <__ssvfiscanf_r+0x786>
   190e2:	9a06      	ldr	r2, [sp, #24]
   190e4:	9e03      	ldr	r6, [sp, #12]
   190e6:	6813      	ldr	r3, [r2, #0]
   190e8:	f8a3 a000 	strh.w	sl, [r3]
   190ec:	4613      	mov	r3, r2
   190ee:	3304      	adds	r3, #4
   190f0:	9306      	str	r3, [sp, #24]
   190f2:	4634      	mov	r4, r6
   190f4:	f7ff bbca 	b.w	1888c <__ssvfiscanf_r+0x8c>
   190f8:	f000 f9de 	bl	194b8 <__locale_mb_cur_max>
   190fc:	4286      	cmp	r6, r0
   190fe:	f43f accf 	beq.w	18aa0 <__ssvfiscanf_r+0x2a0>
   19102:	e89b 000c 	ldmia.w	fp, {r2, r3}
   19106:	f812 0b01 	ldrb.w	r0, [r2], #1
   1910a:	f8cb 2000 	str.w	r2, [fp]
   1910e:	3b01      	subs	r3, #1
   19110:	9a08      	ldr	r2, [sp, #32]
   19112:	9200      	str	r2, [sp, #0]
   19114:	1c75      	adds	r5, r6, #1
   19116:	f8cb 3004 	str.w	r3, [fp, #4]
   1911a:	4649      	mov	r1, r9
   1911c:	f808 0006 	strb.w	r0, [r8, r6]
   19120:	462b      	mov	r3, r5
   19122:	4642      	mov	r2, r8
   19124:	4638      	mov	r0, r7
   19126:	f000 f9e7 	bl	194f8 <_mbrtowc_r>
   1912a:	1c41      	adds	r1, r0, #1
   1912c:	f43f acb8 	beq.w	18aa0 <__ssvfiscanf_r+0x2a0>
   19130:	b198      	cbz	r0, 1915a <__ssvfiscanf_r+0x95a>
   19132:	3002      	adds	r0, #2
   19134:	bf08      	it	eq
   19136:	462e      	moveq	r6, r5
   19138:	d12e      	bne.n	19198 <__ssvfiscanf_r+0x998>
   1913a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1913e:	2b00      	cmp	r3, #0
   19140:	f73f ad5e 	bgt.w	18c00 <__ssvfiscanf_r+0x400>
   19144:	4659      	mov	r1, fp
   19146:	4638      	mov	r0, r7
   19148:	f7ff fafc 	bl	18744 <__ssrefill_r>
   1914c:	2800      	cmp	r0, #0
   1914e:	f43f ad57 	beq.w	18c00 <__ssvfiscanf_r+0x400>
   19152:	2e00      	cmp	r6, #0
   19154:	f47f aca4 	bne.w	18aa0 <__ssvfiscanf_r+0x2a0>
   19158:	e55e      	b.n	18c18 <__ssvfiscanf_r+0x418>
   1915a:	f8c9 0000 	str.w	r0, [r9]
   1915e:	f000 f99d 	bl	1949c <iswspace>
   19162:	4606      	mov	r6, r0
   19164:	b178      	cbz	r0, 19186 <__ssvfiscanf_r+0x986>
   19166:	2d00      	cmp	r5, #0
   19168:	f43f ad56 	beq.w	18c18 <__ssvfiscanf_r+0x418>
   1916c:	4445      	add	r5, r8
   1916e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   19172:	465a      	mov	r2, fp
   19174:	4638      	mov	r0, r7
   19176:	f7ff faa5 	bl	186c4 <_sungetc_r>
   1917a:	4545      	cmp	r5, r8
   1917c:	d1f7      	bne.n	1916e <__ssvfiscanf_r+0x96e>
   1917e:	e54b      	b.n	18c18 <__ssvfiscanf_r+0x418>
   19180:	f000 fea6 	bl	19ed0 <_strtoull_r>
   19184:	e6f9      	b.n	18f7a <__ssvfiscanf_r+0x77a>
   19186:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19188:	44aa      	add	sl, r5
   1918a:	3c01      	subs	r4, #1
   1918c:	2b00      	cmp	r3, #0
   1918e:	d1d4      	bne.n	1913a <__ssvfiscanf_r+0x93a>
   19190:	f109 0904 	add.w	r9, r9, #4
   19194:	461e      	mov	r6, r3
   19196:	e7d0      	b.n	1913a <__ssvfiscanf_r+0x93a>
   19198:	f8d9 0000 	ldr.w	r0, [r9]
   1919c:	e7df      	b.n	1915e <__ssvfiscanf_r+0x95e>
   1919e:	bf00      	nop

000191a0 <__submore>:
   191a0:	f101 0340 	add.w	r3, r1, #64	; 0x40
   191a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   191a8:	460c      	mov	r4, r1
   191aa:	6b09      	ldr	r1, [r1, #48]	; 0x30
   191ac:	4299      	cmp	r1, r3
   191ae:	d014      	beq.n	191da <__submore+0x3a>
   191b0:	6b66      	ldr	r6, [r4, #52]	; 0x34
   191b2:	0077      	lsls	r7, r6, #1
   191b4:	463a      	mov	r2, r7
   191b6:	f000 fa47 	bl	19648 <_realloc_r>
   191ba:	4605      	mov	r5, r0
   191bc:	b340      	cbz	r0, 19210 <__submore+0x70>
   191be:	eb00 0806 	add.w	r8, r0, r6
   191c2:	4632      	mov	r2, r6
   191c4:	4640      	mov	r0, r8
   191c6:	4629      	mov	r1, r5
   191c8:	f7fd f8a8 	bl	1631c <memcpy>
   191cc:	f8c4 8000 	str.w	r8, [r4]
   191d0:	6325      	str	r5, [r4, #48]	; 0x30
   191d2:	6367      	str	r7, [r4, #52]	; 0x34
   191d4:	2000      	movs	r0, #0
   191d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   191da:	f44f 6180 	mov.w	r1, #1024	; 0x400
   191de:	f7fd fe5d 	bl	16e9c <_malloc_r>
   191e2:	b1a8      	cbz	r0, 19210 <__submore+0x70>
   191e4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   191e8:	6320      	str	r0, [r4, #48]	; 0x30
   191ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
   191ee:	6362      	str	r2, [r4, #52]	; 0x34
   191f0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   191f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   191f8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   191fc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   19200:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   19204:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   19208:	6020      	str	r0, [r4, #0]
   1920a:	2000      	movs	r0, #0
   1920c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19210:	f04f 30ff 	mov.w	r0, #4294967295
   19214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019218 <__env_lock>:
   19218:	4801      	ldr	r0, [pc, #4]	; (19220 <__env_lock+0x8>)
   1921a:	f7fd be39 	b.w	16e90 <__retarget_lock_acquire_recursive>
   1921e:	bf00      	nop
   19220:	2000411c 	.word	0x2000411c

00019224 <__env_unlock>:
   19224:	4801      	ldr	r0, [pc, #4]	; (1922c <__env_unlock+0x8>)
   19226:	f7fd be37 	b.w	16e98 <__retarget_lock_release_recursive>
   1922a:	bf00      	nop
   1922c:	2000411c 	.word	0x2000411c

00019230 <_malloc_trim_r>:
   19230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19232:	4f24      	ldr	r7, [pc, #144]	; (192c4 <_malloc_trim_r+0x94>)
   19234:	460c      	mov	r4, r1
   19236:	4606      	mov	r6, r0
   19238:	f7fe f932 	bl	174a0 <__malloc_lock>
   1923c:	68bb      	ldr	r3, [r7, #8]
   1923e:	685d      	ldr	r5, [r3, #4]
   19240:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   19244:	310f      	adds	r1, #15
   19246:	f025 0503 	bic.w	r5, r5, #3
   1924a:	4429      	add	r1, r5
   1924c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   19250:	f021 010f 	bic.w	r1, r1, #15
   19254:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   19258:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1925c:	db07      	blt.n	1926e <_malloc_trim_r+0x3e>
   1925e:	2100      	movs	r1, #0
   19260:	4630      	mov	r0, r6
   19262:	f7fe f929 	bl	174b8 <_sbrk_r>
   19266:	68bb      	ldr	r3, [r7, #8]
   19268:	442b      	add	r3, r5
   1926a:	4298      	cmp	r0, r3
   1926c:	d004      	beq.n	19278 <_malloc_trim_r+0x48>
   1926e:	4630      	mov	r0, r6
   19270:	f7fe f91c 	bl	174ac <__malloc_unlock>
   19274:	2000      	movs	r0, #0
   19276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19278:	4261      	negs	r1, r4
   1927a:	4630      	mov	r0, r6
   1927c:	f7fe f91c 	bl	174b8 <_sbrk_r>
   19280:	3001      	adds	r0, #1
   19282:	d00d      	beq.n	192a0 <_malloc_trim_r+0x70>
   19284:	4b10      	ldr	r3, [pc, #64]	; (192c8 <_malloc_trim_r+0x98>)
   19286:	68ba      	ldr	r2, [r7, #8]
   19288:	6819      	ldr	r1, [r3, #0]
   1928a:	1b2d      	subs	r5, r5, r4
   1928c:	f045 0501 	orr.w	r5, r5, #1
   19290:	4630      	mov	r0, r6
   19292:	1b09      	subs	r1, r1, r4
   19294:	6055      	str	r5, [r2, #4]
   19296:	6019      	str	r1, [r3, #0]
   19298:	f7fe f908 	bl	174ac <__malloc_unlock>
   1929c:	2001      	movs	r0, #1
   1929e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   192a0:	2100      	movs	r1, #0
   192a2:	4630      	mov	r0, r6
   192a4:	f7fe f908 	bl	174b8 <_sbrk_r>
   192a8:	68ba      	ldr	r2, [r7, #8]
   192aa:	1a83      	subs	r3, r0, r2
   192ac:	2b0f      	cmp	r3, #15
   192ae:	ddde      	ble.n	1926e <_malloc_trim_r+0x3e>
   192b0:	4c06      	ldr	r4, [pc, #24]	; (192cc <_malloc_trim_r+0x9c>)
   192b2:	4905      	ldr	r1, [pc, #20]	; (192c8 <_malloc_trim_r+0x98>)
   192b4:	6824      	ldr	r4, [r4, #0]
   192b6:	f043 0301 	orr.w	r3, r3, #1
   192ba:	1b00      	subs	r0, r0, r4
   192bc:	6053      	str	r3, [r2, #4]
   192be:	6008      	str	r0, [r1, #0]
   192c0:	e7d5      	b.n	1926e <_malloc_trim_r+0x3e>
   192c2:	bf00      	nop
   192c4:	20000614 	.word	0x20000614
   192c8:	20003ed8 	.word	0x20003ed8
   192cc:	20000a1c 	.word	0x20000a1c

000192d0 <_free_r>:
   192d0:	2900      	cmp	r1, #0
   192d2:	d044      	beq.n	1935e <_free_r+0x8e>
   192d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192d8:	460d      	mov	r5, r1
   192da:	4680      	mov	r8, r0
   192dc:	f7fe f8e0 	bl	174a0 <__malloc_lock>
   192e0:	f855 7c04 	ldr.w	r7, [r5, #-4]
   192e4:	4969      	ldr	r1, [pc, #420]	; (1948c <_free_r+0x1bc>)
   192e6:	f027 0301 	bic.w	r3, r7, #1
   192ea:	f1a5 0408 	sub.w	r4, r5, #8
   192ee:	18e2      	adds	r2, r4, r3
   192f0:	688e      	ldr	r6, [r1, #8]
   192f2:	6850      	ldr	r0, [r2, #4]
   192f4:	42b2      	cmp	r2, r6
   192f6:	f020 0003 	bic.w	r0, r0, #3
   192fa:	d05e      	beq.n	193ba <_free_r+0xea>
   192fc:	07fe      	lsls	r6, r7, #31
   192fe:	6050      	str	r0, [r2, #4]
   19300:	d40b      	bmi.n	1931a <_free_r+0x4a>
   19302:	f855 7c08 	ldr.w	r7, [r5, #-8]
   19306:	1be4      	subs	r4, r4, r7
   19308:	f101 0e08 	add.w	lr, r1, #8
   1930c:	68a5      	ldr	r5, [r4, #8]
   1930e:	4575      	cmp	r5, lr
   19310:	443b      	add	r3, r7
   19312:	d06d      	beq.n	193f0 <_free_r+0x120>
   19314:	68e7      	ldr	r7, [r4, #12]
   19316:	60ef      	str	r7, [r5, #12]
   19318:	60bd      	str	r5, [r7, #8]
   1931a:	1815      	adds	r5, r2, r0
   1931c:	686d      	ldr	r5, [r5, #4]
   1931e:	07ed      	lsls	r5, r5, #31
   19320:	d53e      	bpl.n	193a0 <_free_r+0xd0>
   19322:	f043 0201 	orr.w	r2, r3, #1
   19326:	6062      	str	r2, [r4, #4]
   19328:	50e3      	str	r3, [r4, r3]
   1932a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1932e:	d217      	bcs.n	19360 <_free_r+0x90>
   19330:	08db      	lsrs	r3, r3, #3
   19332:	1c58      	adds	r0, r3, #1
   19334:	109a      	asrs	r2, r3, #2
   19336:	684d      	ldr	r5, [r1, #4]
   19338:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   1933c:	60a7      	str	r7, [r4, #8]
   1933e:	2301      	movs	r3, #1
   19340:	4093      	lsls	r3, r2
   19342:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   19346:	432b      	orrs	r3, r5
   19348:	3a08      	subs	r2, #8
   1934a:	60e2      	str	r2, [r4, #12]
   1934c:	604b      	str	r3, [r1, #4]
   1934e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   19352:	60fc      	str	r4, [r7, #12]
   19354:	4640      	mov	r0, r8
   19356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1935a:	f7fe b8a7 	b.w	174ac <__malloc_unlock>
   1935e:	4770      	bx	lr
   19360:	0a5a      	lsrs	r2, r3, #9
   19362:	2a04      	cmp	r2, #4
   19364:	d852      	bhi.n	1940c <_free_r+0x13c>
   19366:	099a      	lsrs	r2, r3, #6
   19368:	f102 0739 	add.w	r7, r2, #57	; 0x39
   1936c:	00ff      	lsls	r7, r7, #3
   1936e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   19372:	19c8      	adds	r0, r1, r7
   19374:	59ca      	ldr	r2, [r1, r7]
   19376:	3808      	subs	r0, #8
   19378:	4290      	cmp	r0, r2
   1937a:	d04f      	beq.n	1941c <_free_r+0x14c>
   1937c:	6851      	ldr	r1, [r2, #4]
   1937e:	f021 0103 	bic.w	r1, r1, #3
   19382:	428b      	cmp	r3, r1
   19384:	d232      	bcs.n	193ec <_free_r+0x11c>
   19386:	6892      	ldr	r2, [r2, #8]
   19388:	4290      	cmp	r0, r2
   1938a:	d1f7      	bne.n	1937c <_free_r+0xac>
   1938c:	68c3      	ldr	r3, [r0, #12]
   1938e:	60a0      	str	r0, [r4, #8]
   19390:	60e3      	str	r3, [r4, #12]
   19392:	609c      	str	r4, [r3, #8]
   19394:	60c4      	str	r4, [r0, #12]
   19396:	4640      	mov	r0, r8
   19398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1939c:	f7fe b886 	b.w	174ac <__malloc_unlock>
   193a0:	6895      	ldr	r5, [r2, #8]
   193a2:	4f3b      	ldr	r7, [pc, #236]	; (19490 <_free_r+0x1c0>)
   193a4:	42bd      	cmp	r5, r7
   193a6:	4403      	add	r3, r0
   193a8:	d040      	beq.n	1942c <_free_r+0x15c>
   193aa:	68d0      	ldr	r0, [r2, #12]
   193ac:	60e8      	str	r0, [r5, #12]
   193ae:	f043 0201 	orr.w	r2, r3, #1
   193b2:	6085      	str	r5, [r0, #8]
   193b4:	6062      	str	r2, [r4, #4]
   193b6:	50e3      	str	r3, [r4, r3]
   193b8:	e7b7      	b.n	1932a <_free_r+0x5a>
   193ba:	07ff      	lsls	r7, r7, #31
   193bc:	4403      	add	r3, r0
   193be:	d407      	bmi.n	193d0 <_free_r+0x100>
   193c0:	f855 2c08 	ldr.w	r2, [r5, #-8]
   193c4:	1aa4      	subs	r4, r4, r2
   193c6:	4413      	add	r3, r2
   193c8:	68a0      	ldr	r0, [r4, #8]
   193ca:	68e2      	ldr	r2, [r4, #12]
   193cc:	60c2      	str	r2, [r0, #12]
   193ce:	6090      	str	r0, [r2, #8]
   193d0:	4a30      	ldr	r2, [pc, #192]	; (19494 <_free_r+0x1c4>)
   193d2:	6812      	ldr	r2, [r2, #0]
   193d4:	f043 0001 	orr.w	r0, r3, #1
   193d8:	4293      	cmp	r3, r2
   193da:	6060      	str	r0, [r4, #4]
   193dc:	608c      	str	r4, [r1, #8]
   193de:	d3b9      	bcc.n	19354 <_free_r+0x84>
   193e0:	4b2d      	ldr	r3, [pc, #180]	; (19498 <_free_r+0x1c8>)
   193e2:	4640      	mov	r0, r8
   193e4:	6819      	ldr	r1, [r3, #0]
   193e6:	f7ff ff23 	bl	19230 <_malloc_trim_r>
   193ea:	e7b3      	b.n	19354 <_free_r+0x84>
   193ec:	4610      	mov	r0, r2
   193ee:	e7cd      	b.n	1938c <_free_r+0xbc>
   193f0:	1811      	adds	r1, r2, r0
   193f2:	6849      	ldr	r1, [r1, #4]
   193f4:	07c9      	lsls	r1, r1, #31
   193f6:	d444      	bmi.n	19482 <_free_r+0x1b2>
   193f8:	6891      	ldr	r1, [r2, #8]
   193fa:	68d2      	ldr	r2, [r2, #12]
   193fc:	60ca      	str	r2, [r1, #12]
   193fe:	4403      	add	r3, r0
   19400:	f043 0001 	orr.w	r0, r3, #1
   19404:	6091      	str	r1, [r2, #8]
   19406:	6060      	str	r0, [r4, #4]
   19408:	50e3      	str	r3, [r4, r3]
   1940a:	e7a3      	b.n	19354 <_free_r+0x84>
   1940c:	2a14      	cmp	r2, #20
   1940e:	d816      	bhi.n	1943e <_free_r+0x16e>
   19410:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   19414:	00ff      	lsls	r7, r7, #3
   19416:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   1941a:	e7aa      	b.n	19372 <_free_r+0xa2>
   1941c:	10aa      	asrs	r2, r5, #2
   1941e:	2301      	movs	r3, #1
   19420:	684d      	ldr	r5, [r1, #4]
   19422:	4093      	lsls	r3, r2
   19424:	432b      	orrs	r3, r5
   19426:	604b      	str	r3, [r1, #4]
   19428:	4603      	mov	r3, r0
   1942a:	e7b0      	b.n	1938e <_free_r+0xbe>
   1942c:	f043 0201 	orr.w	r2, r3, #1
   19430:	614c      	str	r4, [r1, #20]
   19432:	610c      	str	r4, [r1, #16]
   19434:	60e5      	str	r5, [r4, #12]
   19436:	60a5      	str	r5, [r4, #8]
   19438:	6062      	str	r2, [r4, #4]
   1943a:	50e3      	str	r3, [r4, r3]
   1943c:	e78a      	b.n	19354 <_free_r+0x84>
   1943e:	2a54      	cmp	r2, #84	; 0x54
   19440:	d806      	bhi.n	19450 <_free_r+0x180>
   19442:	0b1a      	lsrs	r2, r3, #12
   19444:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   19448:	00ff      	lsls	r7, r7, #3
   1944a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   1944e:	e790      	b.n	19372 <_free_r+0xa2>
   19450:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   19454:	d806      	bhi.n	19464 <_free_r+0x194>
   19456:	0bda      	lsrs	r2, r3, #15
   19458:	f102 0778 	add.w	r7, r2, #120	; 0x78
   1945c:	00ff      	lsls	r7, r7, #3
   1945e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   19462:	e786      	b.n	19372 <_free_r+0xa2>
   19464:	f240 5054 	movw	r0, #1364	; 0x554
   19468:	4282      	cmp	r2, r0
   1946a:	d806      	bhi.n	1947a <_free_r+0x1aa>
   1946c:	0c9a      	lsrs	r2, r3, #18
   1946e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   19472:	00ff      	lsls	r7, r7, #3
   19474:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   19478:	e77b      	b.n	19372 <_free_r+0xa2>
   1947a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   1947e:	257e      	movs	r5, #126	; 0x7e
   19480:	e777      	b.n	19372 <_free_r+0xa2>
   19482:	f043 0101 	orr.w	r1, r3, #1
   19486:	6061      	str	r1, [r4, #4]
   19488:	6013      	str	r3, [r2, #0]
   1948a:	e763      	b.n	19354 <_free_r+0x84>
   1948c:	20000614 	.word	0x20000614
   19490:	2000061c 	.word	0x2000061c
   19494:	20000a20 	.word	0x20000a20
   19498:	20003f08 	.word	0x20003f08

0001949c <iswspace>:
   1949c:	28ff      	cmp	r0, #255	; 0xff
   1949e:	d901      	bls.n	194a4 <iswspace+0x8>
   194a0:	2000      	movs	r0, #0
   194a2:	4770      	bx	lr
   194a4:	b510      	push	{r4, lr}
   194a6:	4604      	mov	r4, r0
   194a8:	f000 f818 	bl	194dc <__locale_ctype_ptr>
   194ac:	4420      	add	r0, r4
   194ae:	7840      	ldrb	r0, [r0, #1]
   194b0:	f000 0008 	and.w	r0, r0, #8
   194b4:	bd10      	pop	{r4, pc}
   194b6:	bf00      	nop

000194b8 <__locale_mb_cur_max>:
   194b8:	4b04      	ldr	r3, [pc, #16]	; (194cc <__locale_mb_cur_max+0x14>)
   194ba:	4a05      	ldr	r2, [pc, #20]	; (194d0 <__locale_mb_cur_max+0x18>)
   194bc:	681b      	ldr	r3, [r3, #0]
   194be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   194c0:	2b00      	cmp	r3, #0
   194c2:	bf08      	it	eq
   194c4:	4613      	moveq	r3, r2
   194c6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   194ca:	4770      	bx	lr
   194cc:	2000019c 	.word	0x2000019c
   194d0:	20000a28 	.word	0x20000a28

000194d4 <__locale_ctype_ptr_l>:
   194d4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   194d8:	4770      	bx	lr
   194da:	bf00      	nop

000194dc <__locale_ctype_ptr>:
   194dc:	4b04      	ldr	r3, [pc, #16]	; (194f0 <__locale_ctype_ptr+0x14>)
   194de:	4a05      	ldr	r2, [pc, #20]	; (194f4 <__locale_ctype_ptr+0x18>)
   194e0:	681b      	ldr	r3, [r3, #0]
   194e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   194e4:	2b00      	cmp	r3, #0
   194e6:	bf08      	it	eq
   194e8:	4613      	moveq	r3, r2
   194ea:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   194ee:	4770      	bx	lr
   194f0:	2000019c 	.word	0x2000019c
   194f4:	20000a28 	.word	0x20000a28

000194f8 <_mbrtowc_r>:
   194f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   194fa:	b083      	sub	sp, #12
   194fc:	4607      	mov	r7, r0
   194fe:	9d08      	ldr	r5, [sp, #32]
   19500:	b192      	cbz	r2, 19528 <_mbrtowc_r+0x30>
   19502:	4c11      	ldr	r4, [pc, #68]	; (19548 <_mbrtowc_r+0x50>)
   19504:	4e11      	ldr	r6, [pc, #68]	; (1954c <_mbrtowc_r+0x54>)
   19506:	6824      	ldr	r4, [r4, #0]
   19508:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1950a:	9500      	str	r5, [sp, #0]
   1950c:	2c00      	cmp	r4, #0
   1950e:	bf08      	it	eq
   19510:	4634      	moveq	r4, r6
   19512:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   19516:	47a0      	blx	r4
   19518:	1c43      	adds	r3, r0, #1
   1951a:	d103      	bne.n	19524 <_mbrtowc_r+0x2c>
   1951c:	2200      	movs	r2, #0
   1951e:	238a      	movs	r3, #138	; 0x8a
   19520:	602a      	str	r2, [r5, #0]
   19522:	603b      	str	r3, [r7, #0]
   19524:	b003      	add	sp, #12
   19526:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19528:	4b07      	ldr	r3, [pc, #28]	; (19548 <_mbrtowc_r+0x50>)
   1952a:	4908      	ldr	r1, [pc, #32]	; (1954c <_mbrtowc_r+0x54>)
   1952c:	681b      	ldr	r3, [r3, #0]
   1952e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   19530:	9500      	str	r5, [sp, #0]
   19532:	2b00      	cmp	r3, #0
   19534:	bf08      	it	eq
   19536:	460b      	moveq	r3, r1
   19538:	4614      	mov	r4, r2
   1953a:	4621      	mov	r1, r4
   1953c:	4a04      	ldr	r2, [pc, #16]	; (19550 <_mbrtowc_r+0x58>)
   1953e:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   19542:	2301      	movs	r3, #1
   19544:	47a0      	blx	r4
   19546:	e7e7      	b.n	19518 <_mbrtowc_r+0x20>
   19548:	2000019c 	.word	0x2000019c
   1954c:	20000a28 	.word	0x20000a28
   19550:	0001bc64 	.word	0x0001bc64

00019554 <__ascii_mbtowc>:
   19554:	b082      	sub	sp, #8
   19556:	b149      	cbz	r1, 1956c <__ascii_mbtowc+0x18>
   19558:	b15a      	cbz	r2, 19572 <__ascii_mbtowc+0x1e>
   1955a:	b16b      	cbz	r3, 19578 <__ascii_mbtowc+0x24>
   1955c:	7813      	ldrb	r3, [r2, #0]
   1955e:	600b      	str	r3, [r1, #0]
   19560:	7812      	ldrb	r2, [r2, #0]
   19562:	1c10      	adds	r0, r2, #0
   19564:	bf18      	it	ne
   19566:	2001      	movne	r0, #1
   19568:	b002      	add	sp, #8
   1956a:	4770      	bx	lr
   1956c:	a901      	add	r1, sp, #4
   1956e:	2a00      	cmp	r2, #0
   19570:	d1f3      	bne.n	1955a <__ascii_mbtowc+0x6>
   19572:	4610      	mov	r0, r2
   19574:	b002      	add	sp, #8
   19576:	4770      	bx	lr
   19578:	f06f 0001 	mvn.w	r0, #1
   1957c:	e7f4      	b.n	19568 <__ascii_mbtowc+0x14>
   1957e:	bf00      	nop

00019580 <memmove>:
   19580:	4288      	cmp	r0, r1
   19582:	b5f0      	push	{r4, r5, r6, r7, lr}
   19584:	d90d      	bls.n	195a2 <memmove+0x22>
   19586:	188b      	adds	r3, r1, r2
   19588:	4298      	cmp	r0, r3
   1958a:	d20a      	bcs.n	195a2 <memmove+0x22>
   1958c:	1884      	adds	r4, r0, r2
   1958e:	2a00      	cmp	r2, #0
   19590:	d051      	beq.n	19636 <memmove+0xb6>
   19592:	4622      	mov	r2, r4
   19594:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   19598:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1959c:	4299      	cmp	r1, r3
   1959e:	d1f9      	bne.n	19594 <memmove+0x14>
   195a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   195a2:	2a0f      	cmp	r2, #15
   195a4:	d948      	bls.n	19638 <memmove+0xb8>
   195a6:	ea41 0300 	orr.w	r3, r1, r0
   195aa:	079b      	lsls	r3, r3, #30
   195ac:	d146      	bne.n	1963c <memmove+0xbc>
   195ae:	f100 0410 	add.w	r4, r0, #16
   195b2:	f101 0310 	add.w	r3, r1, #16
   195b6:	4615      	mov	r5, r2
   195b8:	f853 6c10 	ldr.w	r6, [r3, #-16]
   195bc:	f844 6c10 	str.w	r6, [r4, #-16]
   195c0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   195c4:	f844 6c0c 	str.w	r6, [r4, #-12]
   195c8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   195cc:	f844 6c08 	str.w	r6, [r4, #-8]
   195d0:	3d10      	subs	r5, #16
   195d2:	f853 6c04 	ldr.w	r6, [r3, #-4]
   195d6:	f844 6c04 	str.w	r6, [r4, #-4]
   195da:	2d0f      	cmp	r5, #15
   195dc:	f103 0310 	add.w	r3, r3, #16
   195e0:	f104 0410 	add.w	r4, r4, #16
   195e4:	d8e8      	bhi.n	195b8 <memmove+0x38>
   195e6:	f1a2 0310 	sub.w	r3, r2, #16
   195ea:	f023 030f 	bic.w	r3, r3, #15
   195ee:	f002 0e0f 	and.w	lr, r2, #15
   195f2:	3310      	adds	r3, #16
   195f4:	f1be 0f03 	cmp.w	lr, #3
   195f8:	4419      	add	r1, r3
   195fa:	4403      	add	r3, r0
   195fc:	d921      	bls.n	19642 <memmove+0xc2>
   195fe:	1f1e      	subs	r6, r3, #4
   19600:	460d      	mov	r5, r1
   19602:	4674      	mov	r4, lr
   19604:	3c04      	subs	r4, #4
   19606:	f855 7b04 	ldr.w	r7, [r5], #4
   1960a:	f846 7f04 	str.w	r7, [r6, #4]!
   1960e:	2c03      	cmp	r4, #3
   19610:	d8f8      	bhi.n	19604 <memmove+0x84>
   19612:	f1ae 0404 	sub.w	r4, lr, #4
   19616:	f024 0403 	bic.w	r4, r4, #3
   1961a:	3404      	adds	r4, #4
   1961c:	4421      	add	r1, r4
   1961e:	4423      	add	r3, r4
   19620:	f002 0203 	and.w	r2, r2, #3
   19624:	b162      	cbz	r2, 19640 <memmove+0xc0>
   19626:	3b01      	subs	r3, #1
   19628:	440a      	add	r2, r1
   1962a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1962e:	f803 4f01 	strb.w	r4, [r3, #1]!
   19632:	428a      	cmp	r2, r1
   19634:	d1f9      	bne.n	1962a <memmove+0xaa>
   19636:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19638:	4603      	mov	r3, r0
   1963a:	e7f3      	b.n	19624 <memmove+0xa4>
   1963c:	4603      	mov	r3, r0
   1963e:	e7f2      	b.n	19626 <memmove+0xa6>
   19640:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19642:	4672      	mov	r2, lr
   19644:	e7ee      	b.n	19624 <memmove+0xa4>
   19646:	bf00      	nop

00019648 <_realloc_r>:
   19648:	2900      	cmp	r1, #0
   1964a:	f000 8095 	beq.w	19778 <_realloc_r+0x130>
   1964e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19652:	460d      	mov	r5, r1
   19654:	4616      	mov	r6, r2
   19656:	b083      	sub	sp, #12
   19658:	4680      	mov	r8, r0
   1965a:	f106 070b 	add.w	r7, r6, #11
   1965e:	f7fd ff1f 	bl	174a0 <__malloc_lock>
   19662:	f855 ec04 	ldr.w	lr, [r5, #-4]
   19666:	2f16      	cmp	r7, #22
   19668:	f02e 0403 	bic.w	r4, lr, #3
   1966c:	f1a5 0908 	sub.w	r9, r5, #8
   19670:	d83c      	bhi.n	196ec <_realloc_r+0xa4>
   19672:	2210      	movs	r2, #16
   19674:	4617      	mov	r7, r2
   19676:	42be      	cmp	r6, r7
   19678:	d83d      	bhi.n	196f6 <_realloc_r+0xae>
   1967a:	4294      	cmp	r4, r2
   1967c:	da43      	bge.n	19706 <_realloc_r+0xbe>
   1967e:	4bc4      	ldr	r3, [pc, #784]	; (19990 <_realloc_r+0x348>)
   19680:	6899      	ldr	r1, [r3, #8]
   19682:	eb09 0004 	add.w	r0, r9, r4
   19686:	4288      	cmp	r0, r1
   19688:	f000 80b4 	beq.w	197f4 <_realloc_r+0x1ac>
   1968c:	6843      	ldr	r3, [r0, #4]
   1968e:	f023 0101 	bic.w	r1, r3, #1
   19692:	4401      	add	r1, r0
   19694:	6849      	ldr	r1, [r1, #4]
   19696:	07c9      	lsls	r1, r1, #31
   19698:	d54c      	bpl.n	19734 <_realloc_r+0xec>
   1969a:	f01e 0f01 	tst.w	lr, #1
   1969e:	f000 809b 	beq.w	197d8 <_realloc_r+0x190>
   196a2:	4631      	mov	r1, r6
   196a4:	4640      	mov	r0, r8
   196a6:	f7fd fbf9 	bl	16e9c <_malloc_r>
   196aa:	4606      	mov	r6, r0
   196ac:	2800      	cmp	r0, #0
   196ae:	d03a      	beq.n	19726 <_realloc_r+0xde>
   196b0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   196b4:	f023 0301 	bic.w	r3, r3, #1
   196b8:	444b      	add	r3, r9
   196ba:	f1a0 0208 	sub.w	r2, r0, #8
   196be:	429a      	cmp	r2, r3
   196c0:	f000 8121 	beq.w	19906 <_realloc_r+0x2be>
   196c4:	1f22      	subs	r2, r4, #4
   196c6:	2a24      	cmp	r2, #36	; 0x24
   196c8:	f200 8107 	bhi.w	198da <_realloc_r+0x292>
   196cc:	2a13      	cmp	r2, #19
   196ce:	f200 80db 	bhi.w	19888 <_realloc_r+0x240>
   196d2:	4603      	mov	r3, r0
   196d4:	462a      	mov	r2, r5
   196d6:	6811      	ldr	r1, [r2, #0]
   196d8:	6019      	str	r1, [r3, #0]
   196da:	6851      	ldr	r1, [r2, #4]
   196dc:	6059      	str	r1, [r3, #4]
   196de:	6892      	ldr	r2, [r2, #8]
   196e0:	609a      	str	r2, [r3, #8]
   196e2:	4629      	mov	r1, r5
   196e4:	4640      	mov	r0, r8
   196e6:	f7ff fdf3 	bl	192d0 <_free_r>
   196ea:	e01c      	b.n	19726 <_realloc_r+0xde>
   196ec:	f027 0707 	bic.w	r7, r7, #7
   196f0:	2f00      	cmp	r7, #0
   196f2:	463a      	mov	r2, r7
   196f4:	dabf      	bge.n	19676 <_realloc_r+0x2e>
   196f6:	2600      	movs	r6, #0
   196f8:	230c      	movs	r3, #12
   196fa:	4630      	mov	r0, r6
   196fc:	f8c8 3000 	str.w	r3, [r8]
   19700:	b003      	add	sp, #12
   19702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19706:	462e      	mov	r6, r5
   19708:	1be3      	subs	r3, r4, r7
   1970a:	2b0f      	cmp	r3, #15
   1970c:	d81e      	bhi.n	1974c <_realloc_r+0x104>
   1970e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   19712:	f003 0301 	and.w	r3, r3, #1
   19716:	4323      	orrs	r3, r4
   19718:	444c      	add	r4, r9
   1971a:	f8c9 3004 	str.w	r3, [r9, #4]
   1971e:	6863      	ldr	r3, [r4, #4]
   19720:	f043 0301 	orr.w	r3, r3, #1
   19724:	6063      	str	r3, [r4, #4]
   19726:	4640      	mov	r0, r8
   19728:	f7fd fec0 	bl	174ac <__malloc_unlock>
   1972c:	4630      	mov	r0, r6
   1972e:	b003      	add	sp, #12
   19730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19734:	f023 0303 	bic.w	r3, r3, #3
   19738:	18e1      	adds	r1, r4, r3
   1973a:	4291      	cmp	r1, r2
   1973c:	db1f      	blt.n	1977e <_realloc_r+0x136>
   1973e:	68c3      	ldr	r3, [r0, #12]
   19740:	6882      	ldr	r2, [r0, #8]
   19742:	462e      	mov	r6, r5
   19744:	60d3      	str	r3, [r2, #12]
   19746:	460c      	mov	r4, r1
   19748:	609a      	str	r2, [r3, #8]
   1974a:	e7dd      	b.n	19708 <_realloc_r+0xc0>
   1974c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   19750:	eb09 0107 	add.w	r1, r9, r7
   19754:	f002 0201 	and.w	r2, r2, #1
   19758:	444c      	add	r4, r9
   1975a:	f043 0301 	orr.w	r3, r3, #1
   1975e:	4317      	orrs	r7, r2
   19760:	f8c9 7004 	str.w	r7, [r9, #4]
   19764:	604b      	str	r3, [r1, #4]
   19766:	6863      	ldr	r3, [r4, #4]
   19768:	f043 0301 	orr.w	r3, r3, #1
   1976c:	3108      	adds	r1, #8
   1976e:	6063      	str	r3, [r4, #4]
   19770:	4640      	mov	r0, r8
   19772:	f7ff fdad 	bl	192d0 <_free_r>
   19776:	e7d6      	b.n	19726 <_realloc_r+0xde>
   19778:	4611      	mov	r1, r2
   1977a:	f7fd bb8f 	b.w	16e9c <_malloc_r>
   1977e:	f01e 0f01 	tst.w	lr, #1
   19782:	d18e      	bne.n	196a2 <_realloc_r+0x5a>
   19784:	f855 1c08 	ldr.w	r1, [r5, #-8]
   19788:	eba9 0a01 	sub.w	sl, r9, r1
   1978c:	f8da 1004 	ldr.w	r1, [sl, #4]
   19790:	f021 0103 	bic.w	r1, r1, #3
   19794:	440b      	add	r3, r1
   19796:	4423      	add	r3, r4
   19798:	4293      	cmp	r3, r2
   1979a:	db25      	blt.n	197e8 <_realloc_r+0x1a0>
   1979c:	68c2      	ldr	r2, [r0, #12]
   1979e:	6881      	ldr	r1, [r0, #8]
   197a0:	4656      	mov	r6, sl
   197a2:	60ca      	str	r2, [r1, #12]
   197a4:	6091      	str	r1, [r2, #8]
   197a6:	f8da 100c 	ldr.w	r1, [sl, #12]
   197aa:	f856 0f08 	ldr.w	r0, [r6, #8]!
   197ae:	1f22      	subs	r2, r4, #4
   197b0:	2a24      	cmp	r2, #36	; 0x24
   197b2:	60c1      	str	r1, [r0, #12]
   197b4:	6088      	str	r0, [r1, #8]
   197b6:	f200 8094 	bhi.w	198e2 <_realloc_r+0x29a>
   197ba:	2a13      	cmp	r2, #19
   197bc:	d96f      	bls.n	1989e <_realloc_r+0x256>
   197be:	6829      	ldr	r1, [r5, #0]
   197c0:	f8ca 1008 	str.w	r1, [sl, #8]
   197c4:	6869      	ldr	r1, [r5, #4]
   197c6:	f8ca 100c 	str.w	r1, [sl, #12]
   197ca:	2a1b      	cmp	r2, #27
   197cc:	f200 80a2 	bhi.w	19914 <_realloc_r+0x2cc>
   197d0:	3508      	adds	r5, #8
   197d2:	f10a 0210 	add.w	r2, sl, #16
   197d6:	e063      	b.n	198a0 <_realloc_r+0x258>
   197d8:	f855 3c08 	ldr.w	r3, [r5, #-8]
   197dc:	eba9 0a03 	sub.w	sl, r9, r3
   197e0:	f8da 1004 	ldr.w	r1, [sl, #4]
   197e4:	f021 0103 	bic.w	r1, r1, #3
   197e8:	1863      	adds	r3, r4, r1
   197ea:	4293      	cmp	r3, r2
   197ec:	f6ff af59 	blt.w	196a2 <_realloc_r+0x5a>
   197f0:	4656      	mov	r6, sl
   197f2:	e7d8      	b.n	197a6 <_realloc_r+0x15e>
   197f4:	6841      	ldr	r1, [r0, #4]
   197f6:	f021 0b03 	bic.w	fp, r1, #3
   197fa:	44a3      	add	fp, r4
   197fc:	f107 0010 	add.w	r0, r7, #16
   19800:	4583      	cmp	fp, r0
   19802:	da56      	bge.n	198b2 <_realloc_r+0x26a>
   19804:	f01e 0f01 	tst.w	lr, #1
   19808:	f47f af4b 	bne.w	196a2 <_realloc_r+0x5a>
   1980c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   19810:	eba9 0a01 	sub.w	sl, r9, r1
   19814:	f8da 1004 	ldr.w	r1, [sl, #4]
   19818:	f021 0103 	bic.w	r1, r1, #3
   1981c:	448b      	add	fp, r1
   1981e:	4558      	cmp	r0, fp
   19820:	dce2      	bgt.n	197e8 <_realloc_r+0x1a0>
   19822:	4656      	mov	r6, sl
   19824:	f8da 100c 	ldr.w	r1, [sl, #12]
   19828:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1982c:	1f22      	subs	r2, r4, #4
   1982e:	2a24      	cmp	r2, #36	; 0x24
   19830:	60c1      	str	r1, [r0, #12]
   19832:	6088      	str	r0, [r1, #8]
   19834:	f200 808f 	bhi.w	19956 <_realloc_r+0x30e>
   19838:	2a13      	cmp	r2, #19
   1983a:	f240 808a 	bls.w	19952 <_realloc_r+0x30a>
   1983e:	6829      	ldr	r1, [r5, #0]
   19840:	f8ca 1008 	str.w	r1, [sl, #8]
   19844:	6869      	ldr	r1, [r5, #4]
   19846:	f8ca 100c 	str.w	r1, [sl, #12]
   1984a:	2a1b      	cmp	r2, #27
   1984c:	f200 808a 	bhi.w	19964 <_realloc_r+0x31c>
   19850:	3508      	adds	r5, #8
   19852:	f10a 0210 	add.w	r2, sl, #16
   19856:	6829      	ldr	r1, [r5, #0]
   19858:	6011      	str	r1, [r2, #0]
   1985a:	6869      	ldr	r1, [r5, #4]
   1985c:	6051      	str	r1, [r2, #4]
   1985e:	68a9      	ldr	r1, [r5, #8]
   19860:	6091      	str	r1, [r2, #8]
   19862:	eb0a 0107 	add.w	r1, sl, r7
   19866:	ebab 0207 	sub.w	r2, fp, r7
   1986a:	f042 0201 	orr.w	r2, r2, #1
   1986e:	6099      	str	r1, [r3, #8]
   19870:	604a      	str	r2, [r1, #4]
   19872:	f8da 3004 	ldr.w	r3, [sl, #4]
   19876:	f003 0301 	and.w	r3, r3, #1
   1987a:	431f      	orrs	r7, r3
   1987c:	4640      	mov	r0, r8
   1987e:	f8ca 7004 	str.w	r7, [sl, #4]
   19882:	f7fd fe13 	bl	174ac <__malloc_unlock>
   19886:	e751      	b.n	1972c <_realloc_r+0xe4>
   19888:	682b      	ldr	r3, [r5, #0]
   1988a:	6003      	str	r3, [r0, #0]
   1988c:	686b      	ldr	r3, [r5, #4]
   1988e:	6043      	str	r3, [r0, #4]
   19890:	2a1b      	cmp	r2, #27
   19892:	d82d      	bhi.n	198f0 <_realloc_r+0x2a8>
   19894:	f100 0308 	add.w	r3, r0, #8
   19898:	f105 0208 	add.w	r2, r5, #8
   1989c:	e71b      	b.n	196d6 <_realloc_r+0x8e>
   1989e:	4632      	mov	r2, r6
   198a0:	6829      	ldr	r1, [r5, #0]
   198a2:	6011      	str	r1, [r2, #0]
   198a4:	6869      	ldr	r1, [r5, #4]
   198a6:	6051      	str	r1, [r2, #4]
   198a8:	68a9      	ldr	r1, [r5, #8]
   198aa:	6091      	str	r1, [r2, #8]
   198ac:	461c      	mov	r4, r3
   198ae:	46d1      	mov	r9, sl
   198b0:	e72a      	b.n	19708 <_realloc_r+0xc0>
   198b2:	eb09 0107 	add.w	r1, r9, r7
   198b6:	ebab 0b07 	sub.w	fp, fp, r7
   198ba:	f04b 0201 	orr.w	r2, fp, #1
   198be:	6099      	str	r1, [r3, #8]
   198c0:	604a      	str	r2, [r1, #4]
   198c2:	f855 3c04 	ldr.w	r3, [r5, #-4]
   198c6:	f003 0301 	and.w	r3, r3, #1
   198ca:	431f      	orrs	r7, r3
   198cc:	4640      	mov	r0, r8
   198ce:	f845 7c04 	str.w	r7, [r5, #-4]
   198d2:	f7fd fdeb 	bl	174ac <__malloc_unlock>
   198d6:	462e      	mov	r6, r5
   198d8:	e728      	b.n	1972c <_realloc_r+0xe4>
   198da:	4629      	mov	r1, r5
   198dc:	f7ff fe50 	bl	19580 <memmove>
   198e0:	e6ff      	b.n	196e2 <_realloc_r+0x9a>
   198e2:	4629      	mov	r1, r5
   198e4:	4630      	mov	r0, r6
   198e6:	461c      	mov	r4, r3
   198e8:	46d1      	mov	r9, sl
   198ea:	f7ff fe49 	bl	19580 <memmove>
   198ee:	e70b      	b.n	19708 <_realloc_r+0xc0>
   198f0:	68ab      	ldr	r3, [r5, #8]
   198f2:	6083      	str	r3, [r0, #8]
   198f4:	68eb      	ldr	r3, [r5, #12]
   198f6:	60c3      	str	r3, [r0, #12]
   198f8:	2a24      	cmp	r2, #36	; 0x24
   198fa:	d017      	beq.n	1992c <_realloc_r+0x2e4>
   198fc:	f100 0310 	add.w	r3, r0, #16
   19900:	f105 0210 	add.w	r2, r5, #16
   19904:	e6e7      	b.n	196d6 <_realloc_r+0x8e>
   19906:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1990a:	f023 0303 	bic.w	r3, r3, #3
   1990e:	441c      	add	r4, r3
   19910:	462e      	mov	r6, r5
   19912:	e6f9      	b.n	19708 <_realloc_r+0xc0>
   19914:	68a9      	ldr	r1, [r5, #8]
   19916:	f8ca 1010 	str.w	r1, [sl, #16]
   1991a:	68e9      	ldr	r1, [r5, #12]
   1991c:	f8ca 1014 	str.w	r1, [sl, #20]
   19920:	2a24      	cmp	r2, #36	; 0x24
   19922:	d00c      	beq.n	1993e <_realloc_r+0x2f6>
   19924:	3510      	adds	r5, #16
   19926:	f10a 0218 	add.w	r2, sl, #24
   1992a:	e7b9      	b.n	198a0 <_realloc_r+0x258>
   1992c:	692b      	ldr	r3, [r5, #16]
   1992e:	6103      	str	r3, [r0, #16]
   19930:	696b      	ldr	r3, [r5, #20]
   19932:	6143      	str	r3, [r0, #20]
   19934:	f105 0218 	add.w	r2, r5, #24
   19938:	f100 0318 	add.w	r3, r0, #24
   1993c:	e6cb      	b.n	196d6 <_realloc_r+0x8e>
   1993e:	692a      	ldr	r2, [r5, #16]
   19940:	f8ca 2018 	str.w	r2, [sl, #24]
   19944:	696a      	ldr	r2, [r5, #20]
   19946:	f8ca 201c 	str.w	r2, [sl, #28]
   1994a:	3518      	adds	r5, #24
   1994c:	f10a 0220 	add.w	r2, sl, #32
   19950:	e7a6      	b.n	198a0 <_realloc_r+0x258>
   19952:	4632      	mov	r2, r6
   19954:	e77f      	b.n	19856 <_realloc_r+0x20e>
   19956:	4629      	mov	r1, r5
   19958:	4630      	mov	r0, r6
   1995a:	9301      	str	r3, [sp, #4]
   1995c:	f7ff fe10 	bl	19580 <memmove>
   19960:	9b01      	ldr	r3, [sp, #4]
   19962:	e77e      	b.n	19862 <_realloc_r+0x21a>
   19964:	68a9      	ldr	r1, [r5, #8]
   19966:	f8ca 1010 	str.w	r1, [sl, #16]
   1996a:	68e9      	ldr	r1, [r5, #12]
   1996c:	f8ca 1014 	str.w	r1, [sl, #20]
   19970:	2a24      	cmp	r2, #36	; 0x24
   19972:	d003      	beq.n	1997c <_realloc_r+0x334>
   19974:	3510      	adds	r5, #16
   19976:	f10a 0218 	add.w	r2, sl, #24
   1997a:	e76c      	b.n	19856 <_realloc_r+0x20e>
   1997c:	692a      	ldr	r2, [r5, #16]
   1997e:	f8ca 2018 	str.w	r2, [sl, #24]
   19982:	696a      	ldr	r2, [r5, #20]
   19984:	f8ca 201c 	str.w	r2, [sl, #28]
   19988:	3518      	adds	r5, #24
   1998a:	f10a 0220 	add.w	r2, sl, #32
   1998e:	e762      	b.n	19856 <_realloc_r+0x20e>
   19990:	20000614 	.word	0x20000614

00019994 <__sccl>:
   19994:	b470      	push	{r4, r5, r6}
   19996:	780c      	ldrb	r4, [r1, #0]
   19998:	2c5e      	cmp	r4, #94	; 0x5e
   1999a:	d02f      	beq.n	199fc <__sccl+0x68>
   1999c:	2200      	movs	r2, #0
   1999e:	1c4d      	adds	r5, r1, #1
   199a0:	4616      	mov	r6, r2
   199a2:	1e43      	subs	r3, r0, #1
   199a4:	f100 01ff 	add.w	r1, r0, #255	; 0xff
   199a8:	f803 2f01 	strb.w	r2, [r3, #1]!
   199ac:	428b      	cmp	r3, r1
   199ae:	d1fb      	bne.n	199a8 <__sccl+0x14>
   199b0:	b174      	cbz	r4, 199d0 <__sccl+0x3c>
   199b2:	f086 0201 	eor.w	r2, r6, #1
   199b6:	5502      	strb	r2, [r0, r4]
   199b8:	1c6e      	adds	r6, r5, #1
   199ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   199be:	2b2d      	cmp	r3, #45	; 0x2d
   199c0:	4631      	mov	r1, r6
   199c2:	d00d      	beq.n	199e0 <__sccl+0x4c>
   199c4:	2b5d      	cmp	r3, #93	; 0x5d
   199c6:	d004      	beq.n	199d2 <__sccl+0x3e>
   199c8:	b133      	cbz	r3, 199d8 <__sccl+0x44>
   199ca:	461c      	mov	r4, r3
   199cc:	4635      	mov	r5, r6
   199ce:	e7f2      	b.n	199b6 <__sccl+0x22>
   199d0:	1e69      	subs	r1, r5, #1
   199d2:	4608      	mov	r0, r1
   199d4:	bc70      	pop	{r4, r5, r6}
   199d6:	4770      	bx	lr
   199d8:	4629      	mov	r1, r5
   199da:	4608      	mov	r0, r1
   199dc:	bc70      	pop	{r4, r5, r6}
   199de:	4770      	bx	lr
   199e0:	7869      	ldrb	r1, [r5, #1]
   199e2:	295d      	cmp	r1, #93	; 0x5d
   199e4:	d0f1      	beq.n	199ca <__sccl+0x36>
   199e6:	428c      	cmp	r4, r1
   199e8:	dcef      	bgt.n	199ca <__sccl+0x36>
   199ea:	3502      	adds	r5, #2
   199ec:	1903      	adds	r3, r0, r4
   199ee:	3401      	adds	r4, #1
   199f0:	42a1      	cmp	r1, r4
   199f2:	f803 2f01 	strb.w	r2, [r3, #1]!
   199f6:	dcfa      	bgt.n	199ee <__sccl+0x5a>
   199f8:	3602      	adds	r6, #2
   199fa:	e7de      	b.n	199ba <__sccl+0x26>
   199fc:	2201      	movs	r2, #1
   199fe:	784c      	ldrb	r4, [r1, #1]
   19a00:	4616      	mov	r6, r2
   19a02:	1c8d      	adds	r5, r1, #2
   19a04:	e7cd      	b.n	199a2 <__sccl+0xe>
   19a06:	bf00      	nop

00019a08 <_strtol_l.isra.0>:
   19a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a0c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   19a10:	460f      	mov	r7, r1
   19a12:	4680      	mov	r8, r0
   19a14:	4616      	mov	r6, r2
   19a16:	461d      	mov	r5, r3
   19a18:	468a      	mov	sl, r1
   19a1a:	e000      	b.n	19a1e <_strtol_l.isra.0+0x16>
   19a1c:	46a2      	mov	sl, r4
   19a1e:	4654      	mov	r4, sl
   19a20:	4648      	mov	r0, r9
   19a22:	f814 bb01 	ldrb.w	fp, [r4], #1
   19a26:	f7ff fd55 	bl	194d4 <__locale_ctype_ptr_l>
   19a2a:	4458      	add	r0, fp
   19a2c:	7842      	ldrb	r2, [r0, #1]
   19a2e:	f012 0208 	ands.w	r2, r2, #8
   19a32:	d1f3      	bne.n	19a1c <_strtol_l.isra.0+0x14>
   19a34:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   19a38:	d04f      	beq.n	19ada <_strtol_l.isra.0+0xd2>
   19a3a:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   19a3e:	bf04      	itt	eq
   19a40:	f894 b000 	ldrbeq.w	fp, [r4]
   19a44:	f10a 0402 	addeq.w	r4, sl, #2
   19a48:	b11d      	cbz	r5, 19a52 <_strtol_l.isra.0+0x4a>
   19a4a:	2d10      	cmp	r5, #16
   19a4c:	d056      	beq.n	19afc <_strtol_l.isra.0+0xf4>
   19a4e:	46ac      	mov	ip, r5
   19a50:	e004      	b.n	19a5c <_strtol_l.isra.0+0x54>
   19a52:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   19a56:	d060      	beq.n	19b1a <_strtol_l.isra.0+0x112>
   19a58:	250a      	movs	r5, #10
   19a5a:	46ac      	mov	ip, r5
   19a5c:	2a00      	cmp	r2, #0
   19a5e:	bf0c      	ite	eq
   19a60:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   19a64:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   19a68:	2100      	movs	r1, #0
   19a6a:	fbb9 fefc 	udiv	lr, r9, ip
   19a6e:	4608      	mov	r0, r1
   19a70:	fb0c 9a1e 	mls	sl, ip, lr, r9
   19a74:	e005      	b.n	19a82 <_strtol_l.isra.0+0x7a>
   19a76:	d029      	beq.n	19acc <_strtol_l.isra.0+0xc4>
   19a78:	fb0c 3000 	mla	r0, ip, r0, r3
   19a7c:	2101      	movs	r1, #1
   19a7e:	f814 bb01 	ldrb.w	fp, [r4], #1
   19a82:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   19a86:	2b09      	cmp	r3, #9
   19a88:	d905      	bls.n	19a96 <_strtol_l.isra.0+0x8e>
   19a8a:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   19a8e:	2b19      	cmp	r3, #25
   19a90:	d80b      	bhi.n	19aaa <_strtol_l.isra.0+0xa2>
   19a92:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   19a96:	429d      	cmp	r5, r3
   19a98:	dd0f      	ble.n	19aba <_strtol_l.isra.0+0xb2>
   19a9a:	f1b1 3fff 	cmp.w	r1, #4294967295
   19a9e:	d0ee      	beq.n	19a7e <_strtol_l.isra.0+0x76>
   19aa0:	4586      	cmp	lr, r0
   19aa2:	d2e8      	bcs.n	19a76 <_strtol_l.isra.0+0x6e>
   19aa4:	f04f 31ff 	mov.w	r1, #4294967295
   19aa8:	e7e9      	b.n	19a7e <_strtol_l.isra.0+0x76>
   19aaa:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   19aae:	2b19      	cmp	r3, #25
   19ab0:	d803      	bhi.n	19aba <_strtol_l.isra.0+0xb2>
   19ab2:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   19ab6:	429d      	cmp	r5, r3
   19ab8:	dcef      	bgt.n	19a9a <_strtol_l.isra.0+0x92>
   19aba:	1c4b      	adds	r3, r1, #1
   19abc:	d013      	beq.n	19ae6 <_strtol_l.isra.0+0xde>
   19abe:	b102      	cbz	r2, 19ac2 <_strtol_l.isra.0+0xba>
   19ac0:	4240      	negs	r0, r0
   19ac2:	b146      	cbz	r6, 19ad6 <_strtol_l.isra.0+0xce>
   19ac4:	b9c1      	cbnz	r1, 19af8 <_strtol_l.isra.0+0xf0>
   19ac6:	6037      	str	r7, [r6, #0]
   19ac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19acc:	459a      	cmp	sl, r3
   19ace:	dad3      	bge.n	19a78 <_strtol_l.isra.0+0x70>
   19ad0:	f04f 31ff 	mov.w	r1, #4294967295
   19ad4:	e7d3      	b.n	19a7e <_strtol_l.isra.0+0x76>
   19ad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ada:	f894 b000 	ldrb.w	fp, [r4]
   19ade:	2201      	movs	r2, #1
   19ae0:	f10a 0402 	add.w	r4, sl, #2
   19ae4:	e7b0      	b.n	19a48 <_strtol_l.isra.0+0x40>
   19ae6:	2322      	movs	r3, #34	; 0x22
   19ae8:	f8c8 3000 	str.w	r3, [r8]
   19aec:	b1ee      	cbz	r6, 19b2a <_strtol_l.isra.0+0x122>
   19aee:	1e67      	subs	r7, r4, #1
   19af0:	4648      	mov	r0, r9
   19af2:	6037      	str	r7, [r6, #0]
   19af4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19af8:	4681      	mov	r9, r0
   19afa:	e7f8      	b.n	19aee <_strtol_l.isra.0+0xe6>
   19afc:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   19b00:	d1a5      	bne.n	19a4e <_strtol_l.isra.0+0x46>
   19b02:	7823      	ldrb	r3, [r4, #0]
   19b04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   19b08:	2b58      	cmp	r3, #88	; 0x58
   19b0a:	d1a0      	bne.n	19a4e <_strtol_l.isra.0+0x46>
   19b0c:	f04f 0c10 	mov.w	ip, #16
   19b10:	f894 b001 	ldrb.w	fp, [r4, #1]
   19b14:	4665      	mov	r5, ip
   19b16:	3402      	adds	r4, #2
   19b18:	e7a0      	b.n	19a5c <_strtol_l.isra.0+0x54>
   19b1a:	7823      	ldrb	r3, [r4, #0]
   19b1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   19b20:	2b58      	cmp	r3, #88	; 0x58
   19b22:	d0f3      	beq.n	19b0c <_strtol_l.isra.0+0x104>
   19b24:	2508      	movs	r5, #8
   19b26:	46ac      	mov	ip, r5
   19b28:	e798      	b.n	19a5c <_strtol_l.isra.0+0x54>
   19b2a:	4648      	mov	r0, r9
   19b2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019b30 <_strtol_r>:
   19b30:	b530      	push	{r4, r5, lr}
   19b32:	4c06      	ldr	r4, [pc, #24]	; (19b4c <_strtol_r+0x1c>)
   19b34:	4d06      	ldr	r5, [pc, #24]	; (19b50 <_strtol_r+0x20>)
   19b36:	6824      	ldr	r4, [r4, #0]
   19b38:	6b64      	ldr	r4, [r4, #52]	; 0x34
   19b3a:	b083      	sub	sp, #12
   19b3c:	2c00      	cmp	r4, #0
   19b3e:	bf08      	it	eq
   19b40:	462c      	moveq	r4, r5
   19b42:	9400      	str	r4, [sp, #0]
   19b44:	f7ff ff60 	bl	19a08 <_strtol_l.isra.0>
   19b48:	b003      	add	sp, #12
   19b4a:	bd30      	pop	{r4, r5, pc}
   19b4c:	2000019c 	.word	0x2000019c
   19b50:	20000a28 	.word	0x20000a28

00019b54 <_strtoll_l.isra.0>:
   19b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b58:	b085      	sub	sp, #20
   19b5a:	461e      	mov	r6, r3
   19b5c:	9102      	str	r1, [sp, #8]
   19b5e:	9003      	str	r0, [sp, #12]
   19b60:	9200      	str	r2, [sp, #0]
   19b62:	4688      	mov	r8, r1
   19b64:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   19b66:	e000      	b.n	19b6a <_strtoll_l.isra.0+0x16>
   19b68:	46a8      	mov	r8, r5
   19b6a:	4645      	mov	r5, r8
   19b6c:	4638      	mov	r0, r7
   19b6e:	f815 4b01 	ldrb.w	r4, [r5], #1
   19b72:	f7ff fcaf 	bl	194d4 <__locale_ctype_ptr_l>
   19b76:	4420      	add	r0, r4
   19b78:	7843      	ldrb	r3, [r0, #1]
   19b7a:	f013 0308 	ands.w	r3, r3, #8
   19b7e:	d1f3      	bne.n	19b68 <_strtoll_l.isra.0+0x14>
   19b80:	2c2d      	cmp	r4, #45	; 0x2d
   19b82:	f000 8081 	beq.w	19c88 <_strtoll_l.isra.0+0x134>
   19b86:	2c2b      	cmp	r4, #43	; 0x2b
   19b88:	bf03      	ittte	eq
   19b8a:	782c      	ldrbeq	r4, [r5, #0]
   19b8c:	9301      	streq	r3, [sp, #4]
   19b8e:	f108 0502 	addeq.w	r5, r8, #2
   19b92:	9301      	strne	r3, [sp, #4]
   19b94:	b166      	cbz	r6, 19bb0 <_strtoll_l.isra.0+0x5c>
   19b96:	2e10      	cmp	r6, #16
   19b98:	f000 8088 	beq.w	19cac <_strtoll_l.isra.0+0x158>
   19b9c:	9b01      	ldr	r3, [sp, #4]
   19b9e:	46b0      	mov	r8, r6
   19ba0:	ea4f 79e6 	mov.w	r9, r6, asr #31
   19ba4:	b97b      	cbnz	r3, 19bc6 <_strtoll_l.isra.0+0x72>
   19ba6:	f04f 3aff 	mov.w	sl, #4294967295
   19baa:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
   19bae:	e00e      	b.n	19bce <_strtoll_l.isra.0+0x7a>
   19bb0:	2c30      	cmp	r4, #48	; 0x30
   19bb2:	f000 808a 	beq.w	19cca <_strtoll_l.isra.0+0x176>
   19bb6:	f04f 080a 	mov.w	r8, #10
   19bba:	f04f 0900 	mov.w	r9, #0
   19bbe:	260a      	movs	r6, #10
   19bc0:	9b01      	ldr	r3, [sp, #4]
   19bc2:	2b00      	cmp	r3, #0
   19bc4:	d0ef      	beq.n	19ba6 <_strtoll_l.isra.0+0x52>
   19bc6:	f04f 0a00 	mov.w	sl, #0
   19bca:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
   19bce:	4642      	mov	r2, r8
   19bd0:	464b      	mov	r3, r9
   19bd2:	4650      	mov	r0, sl
   19bd4:	4639      	mov	r1, r7
   19bd6:	f7fc f8a5 	bl	15d24 <__aeabi_uldivmod>
   19bda:	464b      	mov	r3, r9
   19bdc:	4693      	mov	fp, r2
   19bde:	4650      	mov	r0, sl
   19be0:	4642      	mov	r2, r8
   19be2:	4639      	mov	r1, r7
   19be4:	f7fc f89e 	bl	15d24 <__aeabi_uldivmod>
   19be8:	f04f 0e00 	mov.w	lr, #0
   19bec:	2200      	movs	r2, #0
   19bee:	2300      	movs	r3, #0
   19bf0:	e00f      	b.n	19c12 <_strtoll_l.isra.0+0xbe>
   19bf2:	d044      	beq.n	19c7e <_strtoll_l.isra.0+0x12a>
   19bf4:	fb02 f409 	mul.w	r4, r2, r9
   19bf8:	fb08 4403 	mla	r4, r8, r3, r4
   19bfc:	fba2 2308 	umull	r2, r3, r2, r8
   19c00:	4423      	add	r3, r4
   19c02:	eb12 020c 	adds.w	r2, r2, ip
   19c06:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
   19c0a:	f04f 0e01 	mov.w	lr, #1
   19c0e:	f815 4b01 	ldrb.w	r4, [r5], #1
   19c12:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   19c16:	f1bc 0f09 	cmp.w	ip, #9
   19c1a:	d906      	bls.n	19c2a <_strtoll_l.isra.0+0xd6>
   19c1c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   19c20:	f1bc 0f19 	cmp.w	ip, #25
   19c24:	d80d      	bhi.n	19c42 <_strtoll_l.isra.0+0xee>
   19c26:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
   19c2a:	4566      	cmp	r6, ip
   19c2c:	dd12      	ble.n	19c54 <_strtoll_l.isra.0+0x100>
   19c2e:	f1be 3fff 	cmp.w	lr, #4294967295
   19c32:	d0ec      	beq.n	19c0e <_strtoll_l.isra.0+0xba>
   19c34:	4299      	cmp	r1, r3
   19c36:	bf08      	it	eq
   19c38:	4290      	cmpeq	r0, r2
   19c3a:	d2da      	bcs.n	19bf2 <_strtoll_l.isra.0+0x9e>
   19c3c:	f04f 3eff 	mov.w	lr, #4294967295
   19c40:	e7e5      	b.n	19c0e <_strtoll_l.isra.0+0xba>
   19c42:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   19c46:	f1bc 0f19 	cmp.w	ip, #25
   19c4a:	d803      	bhi.n	19c54 <_strtoll_l.isra.0+0x100>
   19c4c:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
   19c50:	4566      	cmp	r6, ip
   19c52:	dcec      	bgt.n	19c2e <_strtoll_l.isra.0+0xda>
   19c54:	f1be 3fff 	cmp.w	lr, #4294967295
   19c58:	d01c      	beq.n	19c94 <_strtoll_l.isra.0+0x140>
   19c5a:	9901      	ldr	r1, [sp, #4]
   19c5c:	b111      	cbz	r1, 19c64 <_strtoll_l.isra.0+0x110>
   19c5e:	4252      	negs	r2, r2
   19c60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   19c64:	9900      	ldr	r1, [sp, #0]
   19c66:	b129      	cbz	r1, 19c74 <_strtoll_l.isra.0+0x120>
   19c68:	f1be 0f00 	cmp.w	lr, #0
   19c6c:	d11b      	bne.n	19ca6 <_strtoll_l.isra.0+0x152>
   19c6e:	9d02      	ldr	r5, [sp, #8]
   19c70:	9900      	ldr	r1, [sp, #0]
   19c72:	600d      	str	r5, [r1, #0]
   19c74:	4610      	mov	r0, r2
   19c76:	4619      	mov	r1, r3
   19c78:	b005      	add	sp, #20
   19c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c7e:	45e3      	cmp	fp, ip
   19c80:	dab8      	bge.n	19bf4 <_strtoll_l.isra.0+0xa0>
   19c82:	f04f 3eff 	mov.w	lr, #4294967295
   19c86:	e7c2      	b.n	19c0e <_strtoll_l.isra.0+0xba>
   19c88:	2301      	movs	r3, #1
   19c8a:	782c      	ldrb	r4, [r5, #0]
   19c8c:	9301      	str	r3, [sp, #4]
   19c8e:	f108 0502 	add.w	r5, r8, #2
   19c92:	e77f      	b.n	19b94 <_strtoll_l.isra.0+0x40>
   19c94:	9a03      	ldr	r2, [sp, #12]
   19c96:	2322      	movs	r3, #34	; 0x22
   19c98:	6013      	str	r3, [r2, #0]
   19c9a:	9b00      	ldr	r3, [sp, #0]
   19c9c:	b32b      	cbz	r3, 19cea <_strtoll_l.isra.0+0x196>
   19c9e:	4652      	mov	r2, sl
   19ca0:	463b      	mov	r3, r7
   19ca2:	3d01      	subs	r5, #1
   19ca4:	e7e4      	b.n	19c70 <_strtoll_l.isra.0+0x11c>
   19ca6:	4692      	mov	sl, r2
   19ca8:	461f      	mov	r7, r3
   19caa:	e7f8      	b.n	19c9e <_strtoll_l.isra.0+0x14a>
   19cac:	2c30      	cmp	r4, #48	; 0x30
   19cae:	d117      	bne.n	19ce0 <_strtoll_l.isra.0+0x18c>
   19cb0:	782b      	ldrb	r3, [r5, #0]
   19cb2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   19cb6:	2b58      	cmp	r3, #88	; 0x58
   19cb8:	d112      	bne.n	19ce0 <_strtoll_l.isra.0+0x18c>
   19cba:	786c      	ldrb	r4, [r5, #1]
   19cbc:	f04f 0810 	mov.w	r8, #16
   19cc0:	f04f 0900 	mov.w	r9, #0
   19cc4:	3502      	adds	r5, #2
   19cc6:	2610      	movs	r6, #16
   19cc8:	e77a      	b.n	19bc0 <_strtoll_l.isra.0+0x6c>
   19cca:	782b      	ldrb	r3, [r5, #0]
   19ccc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   19cd0:	2b58      	cmp	r3, #88	; 0x58
   19cd2:	d0f2      	beq.n	19cba <_strtoll_l.isra.0+0x166>
   19cd4:	f04f 0808 	mov.w	r8, #8
   19cd8:	f04f 0900 	mov.w	r9, #0
   19cdc:	2608      	movs	r6, #8
   19cde:	e76f      	b.n	19bc0 <_strtoll_l.isra.0+0x6c>
   19ce0:	f04f 0810 	mov.w	r8, #16
   19ce4:	f04f 0900 	mov.w	r9, #0
   19ce8:	e76a      	b.n	19bc0 <_strtoll_l.isra.0+0x6c>
   19cea:	4652      	mov	r2, sl
   19cec:	463b      	mov	r3, r7
   19cee:	e7c1      	b.n	19c74 <_strtoll_l.isra.0+0x120>

00019cf0 <_strtoll_r>:
   19cf0:	b530      	push	{r4, r5, lr}
   19cf2:	4c06      	ldr	r4, [pc, #24]	; (19d0c <_strtoll_r+0x1c>)
   19cf4:	4d06      	ldr	r5, [pc, #24]	; (19d10 <_strtoll_r+0x20>)
   19cf6:	6824      	ldr	r4, [r4, #0]
   19cf8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   19cfa:	b083      	sub	sp, #12
   19cfc:	2c00      	cmp	r4, #0
   19cfe:	bf08      	it	eq
   19d00:	462c      	moveq	r4, r5
   19d02:	9400      	str	r4, [sp, #0]
   19d04:	f7ff ff26 	bl	19b54 <_strtoll_l.isra.0>
   19d08:	b003      	add	sp, #12
   19d0a:	bd30      	pop	{r4, r5, pc}
   19d0c:	2000019c 	.word	0x2000019c
   19d10:	20000a28 	.word	0x20000a28

00019d14 <_strtoull_l.isra.0>:
   19d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d18:	b085      	sub	sp, #20
   19d1a:	4693      	mov	fp, r2
   19d1c:	9102      	str	r1, [sp, #8]
   19d1e:	9003      	str	r0, [sp, #12]
   19d20:	469a      	mov	sl, r3
   19d22:	460f      	mov	r7, r1
   19d24:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   19d26:	e000      	b.n	19d2a <_strtoull_l.isra.0+0x16>
   19d28:	462f      	mov	r7, r5
   19d2a:	463d      	mov	r5, r7
   19d2c:	4630      	mov	r0, r6
   19d2e:	f815 4b01 	ldrb.w	r4, [r5], #1
   19d32:	f7ff fbcf 	bl	194d4 <__locale_ctype_ptr_l>
   19d36:	4420      	add	r0, r4
   19d38:	7843      	ldrb	r3, [r0, #1]
   19d3a:	f013 0308 	ands.w	r3, r3, #8
   19d3e:	d1f3      	bne.n	19d28 <_strtoull_l.isra.0+0x14>
   19d40:	2c2d      	cmp	r4, #45	; 0x2d
   19d42:	f000 8089 	beq.w	19e58 <_strtoull_l.isra.0+0x144>
   19d46:	2c2b      	cmp	r4, #43	; 0x2b
   19d48:	bf03      	ittte	eq
   19d4a:	782c      	ldrbeq	r4, [r5, #0]
   19d4c:	9301      	streq	r3, [sp, #4]
   19d4e:	1cbd      	addeq	r5, r7, #2
   19d50:	9301      	strne	r3, [sp, #4]
   19d52:	f1ba 0f00 	cmp.w	sl, #0
   19d56:	d019      	beq.n	19d8c <_strtoull_l.isra.0+0x78>
   19d58:	f1ba 0f10 	cmp.w	sl, #16
   19d5c:	f000 8081 	beq.w	19e62 <_strtoull_l.isra.0+0x14e>
   19d60:	46d0      	mov	r8, sl
   19d62:	ea4f 79ea 	mov.w	r9, sl, asr #31
   19d66:	4642      	mov	r2, r8
   19d68:	464b      	mov	r3, r9
   19d6a:	f04f 30ff 	mov.w	r0, #4294967295
   19d6e:	f04f 31ff 	mov.w	r1, #4294967295
   19d72:	f7fb ffd7 	bl	15d24 <__aeabi_uldivmod>
   19d76:	4642      	mov	r2, r8
   19d78:	4606      	mov	r6, r0
   19d7a:	460f      	mov	r7, r1
   19d7c:	464b      	mov	r3, r9
   19d7e:	f04f 30ff 	mov.w	r0, #4294967295
   19d82:	f04f 31ff 	mov.w	r1, #4294967295
   19d86:	f7fb ffcd 	bl	15d24 <__aeabi_uldivmod>
   19d8a:	e00b      	b.n	19da4 <_strtoull_l.isra.0+0x90>
   19d8c:	2c30      	cmp	r4, #48	; 0x30
   19d8e:	d07d      	beq.n	19e8c <_strtoull_l.isra.0+0x178>
   19d90:	4f4e      	ldr	r7, [pc, #312]	; (19ecc <_strtoull_l.isra.0+0x1b8>)
   19d92:	2205      	movs	r2, #5
   19d94:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   19d98:	f04f 080a 	mov.w	r8, #10
   19d9c:	f04f 0900 	mov.w	r9, #0
   19da0:	f04f 0a0a 	mov.w	sl, #10
   19da4:	f04f 0e00 	mov.w	lr, #0
   19da8:	2000      	movs	r0, #0
   19daa:	2100      	movs	r1, #0
   19dac:	e011      	b.n	19dd2 <_strtoull_l.isra.0+0xbe>
   19dae:	42b9      	cmp	r1, r7
   19db0:	bf08      	it	eq
   19db2:	42b0      	cmpeq	r0, r6
   19db4:	d03f      	beq.n	19e36 <_strtoull_l.isra.0+0x122>
   19db6:	fb00 f409 	mul.w	r4, r0, r9
   19dba:	fb08 4401 	mla	r4, r8, r1, r4
   19dbe:	fba0 0108 	umull	r0, r1, r0, r8
   19dc2:	4421      	add	r1, r4
   19dc4:	18c0      	adds	r0, r0, r3
   19dc6:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   19dca:	f04f 0e01 	mov.w	lr, #1
   19dce:	f815 4b01 	ldrb.w	r4, [r5], #1
   19dd2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   19dd6:	2b09      	cmp	r3, #9
   19dd8:	d905      	bls.n	19de6 <_strtoull_l.isra.0+0xd2>
   19dda:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   19dde:	2b19      	cmp	r3, #25
   19de0:	d80d      	bhi.n	19dfe <_strtoull_l.isra.0+0xea>
   19de2:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   19de6:	459a      	cmp	sl, r3
   19de8:	dd11      	ble.n	19e0e <_strtoull_l.isra.0+0xfa>
   19dea:	f1be 0f00 	cmp.w	lr, #0
   19dee:	db03      	blt.n	19df8 <_strtoull_l.isra.0+0xe4>
   19df0:	428f      	cmp	r7, r1
   19df2:	bf08      	it	eq
   19df4:	4286      	cmpeq	r6, r0
   19df6:	d2da      	bcs.n	19dae <_strtoull_l.isra.0+0x9a>
   19df8:	f04f 3eff 	mov.w	lr, #4294967295
   19dfc:	e7e7      	b.n	19dce <_strtoull_l.isra.0+0xba>
   19dfe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   19e02:	2b19      	cmp	r3, #25
   19e04:	d803      	bhi.n	19e0e <_strtoull_l.isra.0+0xfa>
   19e06:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   19e0a:	459a      	cmp	sl, r3
   19e0c:	dced      	bgt.n	19dea <_strtoull_l.isra.0+0xd6>
   19e0e:	f1be 0f00 	cmp.w	lr, #0
   19e12:	db15      	blt.n	19e40 <_strtoull_l.isra.0+0x12c>
   19e14:	9b01      	ldr	r3, [sp, #4]
   19e16:	b113      	cbz	r3, 19e1e <_strtoull_l.isra.0+0x10a>
   19e18:	4240      	negs	r0, r0
   19e1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19e1e:	f1bb 0f00 	cmp.w	fp, #0
   19e22:	d005      	beq.n	19e30 <_strtoull_l.isra.0+0x11c>
   19e24:	f1be 0f00 	cmp.w	lr, #0
   19e28:	d114      	bne.n	19e54 <_strtoull_l.isra.0+0x140>
   19e2a:	9d02      	ldr	r5, [sp, #8]
   19e2c:	f8cb 5000 	str.w	r5, [fp]
   19e30:	b005      	add	sp, #20
   19e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e36:	4293      	cmp	r3, r2
   19e38:	ddbd      	ble.n	19db6 <_strtoull_l.isra.0+0xa2>
   19e3a:	f04f 3eff 	mov.w	lr, #4294967295
   19e3e:	e7c6      	b.n	19dce <_strtoull_l.isra.0+0xba>
   19e40:	9a03      	ldr	r2, [sp, #12]
   19e42:	2322      	movs	r3, #34	; 0x22
   19e44:	6013      	str	r3, [r2, #0]
   19e46:	f04f 30ff 	mov.w	r0, #4294967295
   19e4a:	f04f 31ff 	mov.w	r1, #4294967295
   19e4e:	f1bb 0f00 	cmp.w	fp, #0
   19e52:	d0ed      	beq.n	19e30 <_strtoull_l.isra.0+0x11c>
   19e54:	3d01      	subs	r5, #1
   19e56:	e7e9      	b.n	19e2c <_strtoull_l.isra.0+0x118>
   19e58:	2301      	movs	r3, #1
   19e5a:	782c      	ldrb	r4, [r5, #0]
   19e5c:	9301      	str	r3, [sp, #4]
   19e5e:	1cbd      	adds	r5, r7, #2
   19e60:	e777      	b.n	19d52 <_strtoull_l.isra.0+0x3e>
   19e62:	2c30      	cmp	r4, #48	; 0x30
   19e64:	d123      	bne.n	19eae <_strtoull_l.isra.0+0x19a>
   19e66:	782b      	ldrb	r3, [r5, #0]
   19e68:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   19e6c:	2b58      	cmp	r3, #88	; 0x58
   19e6e:	d128      	bne.n	19ec2 <_strtoull_l.isra.0+0x1ae>
   19e70:	786c      	ldrb	r4, [r5, #1]
   19e72:	220f      	movs	r2, #15
   19e74:	3502      	adds	r5, #2
   19e76:	f04f 36ff 	mov.w	r6, #4294967295
   19e7a:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   19e7e:	f04f 0810 	mov.w	r8, #16
   19e82:	f04f 0900 	mov.w	r9, #0
   19e86:	f04f 0a10 	mov.w	sl, #16
   19e8a:	e78b      	b.n	19da4 <_strtoull_l.isra.0+0x90>
   19e8c:	782b      	ldrb	r3, [r5, #0]
   19e8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   19e92:	2b58      	cmp	r3, #88	; 0x58
   19e94:	d0ec      	beq.n	19e70 <_strtoull_l.isra.0+0x15c>
   19e96:	2207      	movs	r2, #7
   19e98:	f04f 36ff 	mov.w	r6, #4294967295
   19e9c:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   19ea0:	f04f 0808 	mov.w	r8, #8
   19ea4:	f04f 0900 	mov.w	r9, #0
   19ea8:	f04f 0a08 	mov.w	sl, #8
   19eac:	e77a      	b.n	19da4 <_strtoull_l.isra.0+0x90>
   19eae:	220f      	movs	r2, #15
   19eb0:	f04f 36ff 	mov.w	r6, #4294967295
   19eb4:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   19eb8:	f04f 0810 	mov.w	r8, #16
   19ebc:	f04f 0900 	mov.w	r9, #0
   19ec0:	e770      	b.n	19da4 <_strtoull_l.isra.0+0x90>
   19ec2:	f04f 0810 	mov.w	r8, #16
   19ec6:	f04f 0900 	mov.w	r9, #0
   19eca:	e74c      	b.n	19d66 <_strtoull_l.isra.0+0x52>
   19ecc:	19999999 	.word	0x19999999

00019ed0 <_strtoull_r>:
   19ed0:	b530      	push	{r4, r5, lr}
   19ed2:	4c06      	ldr	r4, [pc, #24]	; (19eec <_strtoull_r+0x1c>)
   19ed4:	4d06      	ldr	r5, [pc, #24]	; (19ef0 <_strtoull_r+0x20>)
   19ed6:	6824      	ldr	r4, [r4, #0]
   19ed8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   19eda:	b083      	sub	sp, #12
   19edc:	2c00      	cmp	r4, #0
   19ede:	bf08      	it	eq
   19ee0:	462c      	moveq	r4, r5
   19ee2:	9400      	str	r4, [sp, #0]
   19ee4:	f7ff ff16 	bl	19d14 <_strtoull_l.isra.0>
   19ee8:	b003      	add	sp, #12
   19eea:	bd30      	pop	{r4, r5, pc}
   19eec:	2000019c 	.word	0x2000019c
   19ef0:	20000a28 	.word	0x20000a28

00019ef4 <__ascii_wctomb>:
   19ef4:	b121      	cbz	r1, 19f00 <__ascii_wctomb+0xc>
   19ef6:	2aff      	cmp	r2, #255	; 0xff
   19ef8:	d804      	bhi.n	19f04 <__ascii_wctomb+0x10>
   19efa:	700a      	strb	r2, [r1, #0]
   19efc:	2001      	movs	r0, #1
   19efe:	4770      	bx	lr
   19f00:	4608      	mov	r0, r1
   19f02:	4770      	bx	lr
   19f04:	238a      	movs	r3, #138	; 0x8a
   19f06:	6003      	str	r3, [r0, #0]
   19f08:	f04f 30ff 	mov.w	r0, #4294967295
   19f0c:	4770      	bx	lr
   19f0e:	bf00      	nop
   19f10:	2e2f2e2e 	.word	0x2e2f2e2e
   19f14:	2e2e2f2e 	.word	0x2e2e2f2e
   19f18:	554c412f 	.word	0x554c412f
   19f1c:	6972445f 	.word	0x6972445f
   19f20:	2f726576 	.word	0x2f726576
   19f24:	5f554c41 	.word	0x5f554c41
   19f28:	76697244 	.word	0x76697244
   19f2c:	682f7265 	.word	0x682f7265
   19f30:	692f6c61 	.word	0x692f6c61
   19f34:	756c636e 	.word	0x756c636e
   19f38:	682f6564 	.word	0x682f6564
   19f3c:	775f6c61 	.word	0x775f6c61
   19f40:	682e7464 	.word	0x682e7464
   19f44:	00000000 	.word	0x00000000
   19f48:	656c6553 	.word	0x656c6553
   19f4c:	64657463 	.word	0x64657463
   19f50:	6e696c20 	.word	0x6e696c20
   19f54:	00003a65 	.word	0x00003a65
   19f58:	00000a0d 	.word	0x00000a0d
   19f5c:	2a2a2a2a 	.word	0x2a2a2a2a
   19f60:	66694c20 	.word	0x66694c20
   19f64:	75502065 	.word	0x75502065
   19f68:	2065736c 	.word	0x2065736c
   19f6c:	69746341 	.word	0x69746341
   19f70:	65746176 	.word	0x65746176
   19f74:	2a2a2a64 	.word	0x2a2a2a64
   19f78:	0000002a 	.word	0x0000002a

00019f7c <_ZTV10AMMC_Class>:
	...
   19f90:	0001058d 0001045d 00000709 0000074d     ....].......M...
   19fa0:	00010a25                                %...

00019fa4 <_ZTT10AMMC_Class>:
   19fa4:	00019f90 00019fd0 00019ff8 00019ff8     ................
   19fb4:	00019fd0 00019f90                       ........

00019fbc <_ZTC10AMMC_Class0_15ARINC_Interface>:
	...
   19fd0:	0001058d 0001045d 00000000 00000000     ....]...........
   19fe0:	00010a25                                %...

00019fe4 <_ZTC10AMMC_Class0_14Protocol_Class>:
	...
   19ff8:	0001058d 0001045d 00000000 00000000     ....]...........
   1a008:	000112cf                                ....

0001a00c <factoryDefaultsConfiguration>:
   1a00c:	000000ac 00000004 0000070c 00000000     ................
   1a01c:	00000000 00000001 000003e8 000003e8     ................
   1a02c:	000003e8 00000000 00000000 00000000     ................
   1a03c:	3e051eb8 c4128000 42aa0000 42700000     ...>.......B..pB
   1a04c:	3e051eb8 c4128000 42960000 42480000     ...>.......B..HB
   1a05c:	3de147ae 3e0f5c29 3e2e147b c3f68000     .G.=)\.>{..>....
   1a06c:	c424c000 c444c000 43200000 42f00000     ..$...D... C...B
   1a07c:	425c0000 444f8000 428c0000 43200000     ..\B..OD...B.. C
   1a08c:	bc9ba5e3 41780000 3fbae148 42a00000     ......xAH..?...B
   1a09c:	41200000 41200000 00000014 00000078     .. A.. A....x...
   1a0ac:	be23d70a 41d00000 00000078              ..#....Ax...

0001a0b8 <factoryDefaultsCycles>:
   1a0b8:	000001c0 00000005 0000000c 00000024     ............$...
   1a0c8:	756e614d 00006c61 00000000 00000000     Manual..........
   1a0d8:	00000000 00000001 00000258 0000000f     ........X.......
   1a0e8:	000004b0 63697551 7453206b 00747261     ....Quick Start.
	...
   1a100:	00000001 00000258 0000001e 0000012c     ....X.......,...
   1a110:	2030332b 73636573 00000000 00000000     +30 secs........
   1a120:	00000000 00000001 000000f0 0000001e     ................
   1a130:	0000001e 73657250 31207465 00000000     ....Preset 1....
	...
   1a158:	73657250 32207465 00000000 00000000     Preset 2........
	...
   1a17c:	73657250 33207465 00000000 00000000     Preset 3........
	...
   1a1a0:	73657250 34207465 00000000 00000000     Preset 4........
	...
   1a1c4:	73657250 35207465 00000000 00000000     Preset 5........
	...
   1a1e8:	73657250 36207465 00000000 00000000     Preset 6........
	...
   1a20c:	73657250 37207465 00000000 00000000     Preset 7........
	...
   1a230:	73657250 38207465 00000000 00000000     Preset 8........
	...
   1a254:	73657250 39207465 00000000 00000000     Preset 9........
	...
   1a278:	65736552 00000074 74696e49 696c6169     Reset...Initiali
   1a288:	0000657a 75736552 0000656d 6e617453     ze..Resume..Stan
   1a298:	4f796264 00004646 70657250 53657261     dbyOFF..PrepareS
   1a2a8:	646e6174 4e4f7962 00000000 6e617453     tandbyON....Stan
   1a2b8:	4f796264 0000004e 6e617453 52796264     dbyON...StandbyR
   1a2c8:	79646165 00000000 616c6544 00646579     eady....Delayed.
   1a2d8:	65746e49 70757272 00646574 00004e4f     Interrupted.ON..
   1a2e8:	706f7453 50646570 65636f72 00007373     StoppedProcess..
   1a2f8:	61656c43 0070756e 696e6946 64656873     Cleanup.Finished
   1a308:	00000000 7065654b 00746f48 666c6553     ....KeepHot.Self
   1a318:	746f7250 00746365 6f727245 00000072     Protect.Error...
   1a328:	6e69614d 616e6574 0065636e 55494d48     Maintenance.HMIU
   1a338:	74616470 00000065 6d726946 65726177     pdate...Firmware
   1a348:	61647055 00006574 72727543 20746e65     Update..Current 
   1a358:	74617453 00000065 6c637943 75442065     State...Cycle Du
   1a368:	69746172 00006e6f 616d6552 6e696e69     ration..Remainin
   1a378:	69542067 0000656d 67726154 50207465     g Time..Target P
   1a388:	7265776f 00000000 00776f4e 6967614d     ower....Now.Magi
   1a398:	00000063 00203a20 00007830 00000a0d     c... : .0x......

0001a3a8 <_ZTV17ConfigState_Class>:
	...
   1a3b0:	000112cf                                ....

0001a3b4 <_ZTV14DateTime_Class>:
	...
   1a3bc:	0001299d 00012a8d 49505351 6f725020     .)...*..QSPI Pro
   1a3cc:	6d617267 61745320 64657472 00000d0a     gram Started....
   1a3dc:	73616c46 61642068 76206174 66697265     Flash data verif
   1a3ec:	74616369 206e6f69 6c696166 0a2e6465     ication failed..
   1a3fc:	0000000d 74696220 00003a20 00000a0d     .... bit :......
   1a40c:	74697257 202d2065 64616552 20736920     Write - Read is 
   1a41c:	63637573 66737365 69206c75 5351206e     successful in QS
   1a42c:	46204950 6873616c 6d656d20 2079726f     PI Flash memory 
   1a43c:	00000000 202a2a2a 72617453 20705574     ....*** StartUp 
   1a44c:	6f676c41 68746972 206e656d 74736554     Algorithmen Test
   1a45c:	2a2a2a20 00000000 202a2a2a 65746144      ***....*** Date
   1a46c:	0020203a 206c754a 32203932 00303230     :  .Jul 29 2020.
   1a47c:	6d695420 00203a65 313a3731 34353a37      Time: .17:17:54
   1a48c:	00000000 202a2a2a 20554c41 74696e69     ....*** ALU init
   1a49c:	65746169 2a2a2064 0000002a 69746341     iated ***...Acti
   1a4ac:	6c206576 3a656e69 00000020 646e6168     ve line: ...hand
   1a4bc:	4147656c 76454e49 20746e65 65636572     leGAINEvent rece
   1a4cc:	64657669 7773203a 68637469 20676e69     ived: switching 
   1a4dc:	6d6f7266 00000020 206f7420 00000000     from ... to ....
   1a4ec:	6c662820 20736761 00203d3d 00000a0d      (flags == .....
   1a4fc:	646e6168 7453656c 49657461 6974696e     handleStateIniti
   1a50c:	7a696c61 66203a65 7367616c 203d3d20     alize: flags == 
   1a51c:	00007830 646e6168 7453656c 49657461     0x..handleStateI
   1a52c:	6974696e 7a696c61 00000065 646e6168     nitialize...hand
   1a53c:	7453656c 53657461 646e6174 464f7962     leStateStandbyOF
   1a54c:	00000046 646e6168 7453656c 50657461     F...handleStateP
   1a55c:	61706572 74536572 62646e61 004e4f79     repareStandbyON.

0001a56c <_ZTV12States_Class>:
	...
   1a574:	00002b89 682f2e2e 702f6c70 2f74726f     .+..../hpl/port/
   1a584:	5f6c7068 6f697067 7361625f 00682e65     hpl_gpio_base.h.
   1a594:	682f2e2e 692f6c61 756c636e 682f6564     ../hal/include/h
   1a5a4:	775f6c61 682e7464 00000000 682f2e2e     al_wdt.h....../h
   1a5b4:	732f6c61 682f6372 635f6c61 6e656c61     al/src/hal_calen
   1a5c4:	2e726164 00000063 682f2e2e 732f6c61     dar.c...../hal/s
   1a5d4:	682f6372 635f6c61 615f6e61 636e7973     rc/hal_can_async
   1a5e4:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   1a5f4:	635f6c61 735f6372 2e636e79 00000063     al_crc_sync.c...
   1a604:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   1a614:	6d5f6332 7973615f 632e636e 00000000     2c_m_async.c....
   1a624:	682f2e2e 732f6c61 682f6372 705f6c61     ../hal/src/hal_p
   1a634:	632e6d77 00000000 682f2e2e 732f6c61     wm.c....../hal/s
   1a644:	682f6372 715f6c61 5f697073 636e7973     rc/hal_qspi_sync
   1a654:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   1a664:	735f6c61 6d5f6970 7973615f 632e636e     al_spi_m_async.c
   1a674:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   1a684:	735f6c61 6d5f6970 6e79735f 00632e63     al_spi_m_sync.c.
   1a694:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
   1a6a4:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
   1a6b4:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   1a6c4:	2e747369 00000063                       ist.c...

0001a6cc <_map>:
   1a6cc:	00000004 00000004 00000005 00000005     ................
   1a6dc:	00000006 00000056 00000007 00000057     ....V.......W...
   1a6ec:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
   1a6fc:	632e6369 00000000                       ic.c....

0001a704 <user_mux_confs>:
   1a704:	00000100 00000000 00000000 00000000     ................
	...

0001a748 <channel_confs>:
   1a748:	0000065e 00000000 00000000 00000000     ^...............
	...

0001a788 <interrupt_cfg>:
	...
   1a808:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
   1a818:	632e6361 00000000 682f2e2e 712f6c70     ac.c....../hpl/q
   1a828:	2f697073 5f6c7068 69707371 0000632e     spi/hpl_qspi.c..
   1a838:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
   1a848:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
   1a858:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   1a868:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
   1a878:	41014000 43000000 43000400 43000800     .@.A...C...C...C
   1a888:	43000c00                                ...C

0001a88c <sercomspi_regs>:
   1a88c:	0020000c 00020000 00000000 01ff004f     .. .........O...
   1a89c:	30000c04 02000000 00000000 ff004f00     ...0.........O..
   1a8ac:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1a8bc:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1a8cc:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1a8dc:	43001400 43001800                       ...C...C

0001a8e4 <_usb_ep_cfgs>:
   1a8e4:	200023bc 00000000 00000040 200023fc     .#. ....@....#. 
   1a8f4:	2000243c 00400040 2000247c 200024bc     <$. @.@.|$. .$. 
   1a904:	00400040 200024fc 2000253c 00400040     @.@..$. <%. @.@.
   1a914:	2000257c 200025bc 00400040 00000804     |%. .%. @.@.....
   1a924:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   1a934:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   1a944:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1a954:	7361625f 00682e65                       _base.h.

0001a95c <n25q256a_interface>:
   1a95c:	0000e95d 0000ea01 0000eb11 0000ecc9     ]...............
   1a96c:	0000ed59 752f2e2e 642f6273 63697665     Y...../usb/devic
   1a97c:	73752f65 2e636462 00000063              e/usbdc.c...

0001a988 <_ZTV17ARINC_Conversions>:
	...
   1a990:	0001058d 0001045d                       ....]...

0001a998 <_ZL5Mesg1>:
   1a998:	4e495241 614c2043 3a6c6562 00000020     ARINC Label: ...

0001a9a8 <_ZL5Mesg2>:
   1a9a8:	61746144 0000203a                       Data: ..

0001a9b0 <_ZL10HexToAscii>:
   1a9b0:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0001a9c0 <_ZL11HistoryMesg>:
   1a9c0:	74736948 2079726f 4f464946 0000203a     History FIFO: ..
   1a9d0:	49480d0a 3935332d 61662033 64656c69     ..HI-3593 failed
   1a9e0:	206f7420 74696e69 7a696c69 000d0a65      to initilize...
   1a9f0:	2d0a0d0a 68202d2d 41203273 434e4952     ...--- hs2 ARINC
   1aa00:	746e4920 61667265 20206563 2d2d2d2d      Interface  ----
   1aa10:	00000d0a 2d2d0a72 6f67212d 656d2074     ....r.---!got me
   1aa20:	67617373 2d2d2165 00002d2d 72540d0a     ssage!----....Tr
   1aa30:	6d736e61 26207469 63655220 65766965     ansmit & Receive
   1aa40:	74695720 614c2068 736c6562 646f4d20      With Labels Mod
   1aa50:	000d0a65 45530d0a 542d464c 2c545345     e.....SELF-TEST,
   1aa60:	746e4920 616e7265 6944206c 61746967      Internal Digita
   1aa70:	6f4c206c 622d706f 2c6b6361 206f4e20     l Loop-back, No 
   1aa80:	61746164 20736920 6e617274 74696d73     data is transmit
   1aa90:	20646574 65747865 6c616e72 0d0a796c     ted externally..
   1aaa0:	00000000 6f200d0a 6154206e 20656c62     ...... on Table 
   1aab0:	6562616c 6120736c 45206572 6c62616e     labels are Enabl
   1aac0:	00006465 500a0d0a 73736572 2d575320     ed.....Press SW-
   1aad0:	6f742031 61747320 69207472 6974696e     1 to start initi
   1aae0:	796c6c61 000a0d0a 202d2d2d 74747542     ally....--- Butt
   1aaf0:	43206e6f 616d6d6f 2073646e 0a2d2d2d     on Commands ---.
   1ab00:	0000000d 70532020 20656361 20726142     ....  Space Bar 
   1ab10:	44206f74 6c707369 53207961 75746174     to Display Statu
   1ab20:	6e612073 6f432064 6f72746e 6552206c     s and Control Re
   1ab30:	74736967 0a737265 0000000d 20702020     gisters.....  p 
   1ab40:	50206f74 65737561 00000d0a 206d2020     to Pause....  m 
   1ab50:	44206f74 6c707369 4c207961 6c656261     to Display Label
   1ab60:	6d654d20 0079726f 003e0d0a 72540d0a      Memory...>...Tr
   1ab70:	6d736e61 69747469 0d0a676e 0000003e     ansmitting..>...
   1ab80:	49480d0a 3935332d 74532033 73757461     ..HI-3593 Status
   1ab90:	6f43202c 6f72746e 6552206c 74736967     , Control Regist
   1aba0:	0d737265 0000000a 20090d0a 2a2a2a20     ers........  ***
   1abb0:	50202a2a 73736572 70732020 62656361     ** Press  spaceb
   1abc0:	74207261 6f63206f 6e69746e 2a206575     ar to continue *
   1abd0:	2a2a2a2a 0000002a 540d0a0a 736e6172     *****......Trans
   1abe0:	2074696d 73756150 0d0a6465 00000000     mit Paused......
   1abf0:	72500d0a 20737365 44454c4f 5455425f     ..Press OLED_BUT
   1ac00:	2d4e4f54 6f742032 61727420 696d736e     TON-2 to transmi
   1ac10:	6e6f2074 72662065 20656d61 20646e61     t one frame and 
   1ac20:	73756170 000d0a65 72500d0a 20737365     pause.....Press 
   1ac30:	44454c4f 5455425f 2d4e4f54 6f742033     OLED_BUTTON-3 to
   1ac40:	73655220 0a656d75 0000000d 72540d0a      Resume.......Tr
   1ac50:	6d736e61 65747469 65522072 656d7573     ansmitter Resume
   1ac60:	2e2e2e64 00000d0a 65520d0a 76696563     d.........Receiv
   1ac70:	31207265 62614c20 0a736c65 0000000d     er 1 Labels.....
   1ac80:	65520d0a 76696563 32207265 62614c20     ..Receiver 2 Lab
   1ac90:	0a736c65 0000000d 72540d0a 6d736e61     els.......Transm
   1aca0:	26207469 63655220 65766965 68634520     it & Receive Ech
   1acb0:	6f4d206f 0d0a6564 00000000 6c530d0a     o Mode........Sl
   1acc0:	5320776f 64656570 00000000 61460d0a     ow Speed......Fa
   1acd0:	53207473 64656570 00000000 72540d0a     st Speed......Tr
   1ace0:	6d736e61 65747469 61502072 79746972     ansmitter Parity
   1acf0:	616e4520 64656c62 00000000 61540d0a      Enabled......Ta
   1ad00:	20656c62 6562616c 6120736c 45206572     ble labels are E
   1ad10:	6c62616e 00006465 2d0a0d0a 43202d2d     nabled.....--- C
   1ad20:	6f736e6f 4320656c 616d6d6f 2073646e     onsole Commands 
   1ad30:	706c6548 2d2d2d20 00000000 20502020     Help ---....  P 
   1ad40:	6150203d 79746972 676f5420 20656c67     = Parity Toggle 
   1ad50:	6f2f6e6f 00006666 20542020 4654203d     on/off..  T = TF
   1ad60:	2050494c 676f5420 20656c67 6f2f6e6f     LIP  Toggle on/o
   1ad70:	00006666 20522020 4652203d 2050494c     ff..  R = RFLIP 
   1ad80:	676f5420 20656c67 6f2f6e6f 00006666      Toggle on/off..
   1ad90:	20532020 4453203d 202c4e4f 2c394453       S = SDON, SD9,
   1ada0:	31445320 6f542030 656c6767 2f6e6f20      SD10 Toggle on/
   1adb0:	0066666f 20482020 6854203d 48207369     off.  H = This H
   1adc0:	20706c65 65676150 00000000 70532020     elp Page....  Sp
   1add0:	20656361 20726142 6944203d 616c7073     ace Bar = Displa
   1ade0:	74532079 73757461 646e6120 6e6f4320     y Status and Con
   1adf0:	6c6f7274 67657220 00000073 20492020     trol regs...  I 
   1ae00:	6e49203d 6d657263 20746e65 7373654d     = Increment Mess
   1ae10:	20656761 20646e61 6e617254 74696d73     age and Transmit
   1ae20:	7845202e 726f6c70 4d207265 2065646f     . Explorer Mode 
   1ae30:	4f202d20 21594c4e 00000000 204d2020      - ONLY!....  M 
   1ae40:	6e45203d 20726574 74737543 4d206d6f     = Enter Custom M
   1ae50:	61737365 202e6567 6c707845 7265726f     essage. Explorer
   1ae60:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
   1ae70:	4e452020 3d524554 61725420 696d736e       ENTER= Transmi
   1ae80:	656e2074 6d207478 61737365 202e6567     t next message. 
   1ae90:	6c707845 7265726f 646f4d20 2d202065     Explorer Mode  -
   1aea0:	4c4e4f20 00002159 00207830 30307826      ONLY!..0x .&x00
   1aeb0:	00002030 50205854 74697261 4e4f2079     0 ..TX Parity ON
   1aec0:	003e0d0a 50205854 74697261 464f2079     ..>.TX Parity OF
   1aed0:	3e0d0a46 00000000 494c4654 65532050     F..>....TFLIP Se
   1aee0:	3e0d0a74 00000000 494c4654 6c432050     t..>....TFLIP Cl
   1aef0:	65726165 3e0d0a64 00000000 2d434552     eared..>....REC-
   1af00:	46522031 2050494c 0a746553 00003e0d     1 RFLIP Set..>..
   1af10:	2d434552 46522031 2050494c 61656c43     REC-1 RFLIP Clea
   1af20:	0a646572 00003e0d 2d434552 46522032     red..>..REC-2 RF
   1af30:	2050494c 0a746553 00003e0d 2d434552     LIP Set..>..REC-
   1af40:	46522032 2050494c 61656c43 0a646572     2 RFLIP Cleared.
   1af50:	00003e0d 2d434552 44532031 532c4e4f     .>..REC-1 SDON,S
   1af60:	61203944 5320646e 20303144 0a746553     D9 and SD10 Set.
   1af70:	00003e0d 2d434552 44532031 532c4e4f     .>..REC-1 SDON,S
   1af80:	61203944 5320646e 20303144 61656c43     D9 and SD10 Clea
   1af90:	0a646572 00003e0d 2d434552 44532032     red..>..REC-2 SD
   1afa0:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   1afb0:	0a746553 00003e0d 2d434552 44532032     Set..>..REC-2 SD
   1afc0:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   1afd0:	61656c43 0a646572 00003e0d 500a0d0a     Cleared..>.....P
   1afe0:	73736572 61705320 42206563 6f207261     ress Space Bar o
   1aff0:	57532072 7420342d 6572206f 656d7573     r SW-4 to resume
   1b000:	00000000 6562614c 2020736c 202d2030     ....Labels  0 - 
   1b010:	203a3336 00000020 00000020 614c0d0a     63:  ... .....La
   1b020:	736c6562 34362020 3732312d 0020203a     bels  64-127:  .
   1b030:	614c0d0a 736c6562 38323120 3139312d     ..Labels 128-191
   1b040:	0020203a 614c0d0a 736c6562 32393120     :  ...Labels 192
   1b050:	3535322d 0020203a 614c0d0a 736c6562     -255:  ...Labels
   1b060:	20302020 3336202d 0020203a 543e0d0a       0 - 63:  ...>T
   1b070:	20202058 74614420 00003a61 6562614c     X    Data:..Labe
   1b080:	00003a6c 0000003e 2d636552 61442031     l:..>...Rec-1 Da
   1b090:	003a6174 2d314c50 61442031 003a6174     ta:.PL1-1 Data:.
   1b0a0:	6374614d 00003a68 2d314c50 61442032     Match:..PL1-2 Da
   1b0b0:	003a6174 2d314c50 61442033 003a6174     ta:.PL1-3 Data:.
   1b0c0:	2d636552 61442032 003a6174 2d324c50     Rec-2 Data:.PL2-
   1b0d0:	61442031 003a6174 2d324c50 61442032     1 Data:.PL2-2 Da
   1b0e0:	003a6174 2d324c50 61442033 003a6174     ta:.PL2-3 Data:.
   1b0f0:	00000d0a 78450d0a 726f6c70 4d207265     ......Explorer M
   1b100:	0a65646f 0000000d 6c200d0a 6c656261     ode....... label
   1b110:	61542073 20656c62 45207369 6c62616e     s Table is Enabl
   1b120:	00006465 2d0a0d0a 42202d2d 6f747475     ed.....--- Butto
   1b130:	6f43206e 6e616d6d 2d207364 00002d2d     n Commands ---..
   1b140:	20200d0a 63617073 72616265 206f7420     ..  spacebar to 
   1b150:	70736944 2079616c 74617453 61207375     Display Status a
   1b160:	4320646e 72746e6f 52206c6f 73696765     nd Control Regis
   1b170:	73726574 00000000 20200d0a 44454c4f     ters......  OLED
   1b180:	5455422d 324e4f54 61727420 696d736e     -BUTTON2 transmi
   1b190:	6e6f2074 656d2065 67617373 72662065     t one message fr
   1b1a0:	74206d6f 736e6172 2074696d 66667562     om transmit buff
   1b1b0:	00007265 20200d0a 6f74204c 69725020     er....  L to Pri
   1b1c0:	4c20746e 6c656261 6d654d20 0a79726f     nt Label Memory.
   1b1d0:	0000000d 72500d0a 20737365 45544e45     ......Press ENTE
   1b1e0:	6f742052 61725420 696d736e 726f2074     R to Transmit or
   1b1f0:	65737520 65687420 294d2820 6d6f6320      use the (M) com
   1b200:	646e616d 206f7420 65746e65 20612072     mand to enter a 
   1b210:	74737563 6d206d6f 61737365 00006567     custom message..
   1b220:	73657250 57532073 726f2034 61707320     Press SW4 or spa
   1b230:	61626563 6f742072 6e6f6320 756e6974     cebar to continu
   1b240:	00000065 73657250 70732073 62656361     e...Press spaceb
   1b250:	74207261 6f63206f 6e69746e 00006575     ar to continue..
   1b260:	433e0d0a 616d6d6f 4d20646e 00000000     ..>Command M....
   1b270:	6e450d0a 20726574 79622033 20736574     ..Enter 3 bytes 
   1b280:	414c202b 204c4542 54206f74 736e6172     + LABEL to Trans
   1b290:	2074696d 6c6c6f66 6465776f 20796220     mit followed by 
   1b2a0:	45544e45 000d0a52 6f540d0a 61725420     ENTER.....To Tra
   1b2b0:	696d736e 65202c74 7265746e 62203320     nsmit, enter 3 b
   1b2c0:	73657479 6c6f6620 65776f6c 79622064     ytes followed by
   1b2d0:	4c206120 6c656261 74796220 6f662065      a Label byte fo
   1b2e0:	776f6c6c 62206465 4e452079 0a524554     llowed by ENTER.
   1b2f0:	0000000d 6d726f46 203a7461 73746942     ....Format: Bits
   1b300:	322d3233 42202c35 32737469 37312d34     32-25, Bits24-17
   1b310:	6942202c 36317374 202c392d 4542414c     , Bits16-9, LABE
   1b320:	3a0d0a4c 00000000 6d617845 3a656c70     L..:....Example:
   1b330:	20313020 34203332 37362035 544e4520      01 23 45 67 ENT
   1b340:	0d0a5245 0000003a 65725020 52207373     ER..:... Press R
   1b350:	52555445 0000004e 61725420 696d736e     ETURN... Transmi
   1b360:	676e6974 002e2e2e 61725420 696d736e     ting.... Transmi
   1b370:	21646574 00000000 6d6d6f43 20646e61     ted!....Command 
   1b380:	49203a49 6572636e 746e656d 74616420     I: Increment dat
   1b390:	3e0d0a61 00000000                       a..>....

0001b398 <_ZTV15ARINC_Interface>:
	...
   1b3ac:	0001058d 0001045d 000107f5 00010859     ....].......Y...
   1b3bc:	00010a25                                %...

0001b3c0 <_ZTT15ARINC_Interface>:
   1b3c0:	0001b3ac 0001b3e4 0001b3e4 0001b3ac     ................

0001b3d0 <_ZTC15ARINC_Interface0_14Protocol_Class>:
	...
   1b3e4:	0001058d 0001045d 00000000 00000000     ....]...........
   1b3f4:	000112cf 636e7546 6e6f6974 65786520     ....Function exe
   1b404:	65747563 75732064 73656363 6c756673     cuted successful
   1b414:	0000796c 63656843 6f79206b 77207275     ly..Check your w
   1b424:	6e697269 46202e67 6873616c 69686320     iring. Flash chi
   1b434:	73692070 6e6f6e20 7365722d 736e6f70     p is non-respons
   1b444:	2e657669 00000000 6e6f632a 75727473     ive.....*constru
   1b454:	726f7463 5f666f5f 696f6863 2e2a6563     ctor_of_choice*.
   1b464:	69676562 2029286e 20736177 20746f6e     begin() was not 
   1b474:	6c6c6163 69206465 6f76206e 73206469     called in void s
   1b484:	70757465 00002928 62616e55 7420656c     etup()..Unable t
   1b494:	6469206f 69746e65 63207966 2e706968     o identify chip.
   1b4a4:	65724120 756f7920 72757320 68742065      Are you sure th
   1b4b4:	63207369 20706968 73207369 6f707075     is chip is suppo
   1b4c4:	64657472 0000003f 62616e55 7420656c     rted?...Unable t
   1b4d4:	6469206f 69746e65 63207966 63617061     o identify capac
   1b4e4:	2e797469 20734920 73696874 69686320     ity. Is this chi
   1b4f4:	666f2070 69636966 796c6c61 70757320     p officially sup
   1b504:	74726f70 203f6465 6e206649 202c746f     ported? If not, 
   1b514:	61656c70 64206573 6e696665 20612065     please define a 
   1b524:	50414360 54494341 63206059 74736e6f     `CAPACITY` const
   1b534:	20746e61 20646e61 6c636e69 20656475     ant and include 
   1b544:	69207469 6c66206e 2e687361 69676562     it in flash.begi
   1b554:	4143286e 49434150 2e295954 00000000     n(CAPACITY).....
   1b564:	70696843 20736920 79737562 0000002e     Chip is busy....
   1b574:	656b614d 72757320 6c612065 6970206c     Make sure all pi
   1b584:	6820736e 20657661 6e656562 6e6f6320     ns have been con
   1b594:	7463656e 70206465 65706f72 00796c72     nected properly.
   1b5a4:	65676150 65766f20 6f6c6672 61682077     Page overflow ha
   1b5b4:	65622073 64206e65 62617369 2064656c     s been disabled 
   1b5c4:	20646e61 20656874 72646461 20737365     and the address 
   1b5d4:	6c6c6163 65206465 65656378 74207364     called exceeds t
   1b5e4:	6d206568 726f6d65 00000079 62616e55     he memory...Unab
   1b5f4:	7420656c 6e45206f 656c6261 69725720     le to Enable Wri
   1b604:	676e6974 206f7420 70696863 0000002e     ting to chip....
   1b614:	61656c50 6d206573 20656b61 65727573     Please make sure
   1b624:	65687420 4c4f4820 20262044 54495257      the HOLD & WRIT
   1b634:	4f525045 54434554 6e697020 72612073     EPROTECT pins ar
   1b644:	75702065 64656c6c 20707520 56206f74     e pulled up to V
   1b654:	00004343 73696854 63657320 20726f74     CC..This sector 
   1b664:	65726c61 20796461 746e6f63 736e6961     already contains
   1b674:	74616420 00002e61 61656c50 6d206573      data...Please m
   1b684:	20656b61 65727573 65687420 63657320     ake sure the sec
   1b694:	73726f74 69656220 7720676e 74746972     tors being writt
   1b6a4:	74206e65 7261206f 72652065 64657361     en to are erased
   1b6b4:	0000002e 20756f59 20657261 6e6e7572     ....You are runn
   1b6c4:	20676e69 20776f6c 53206e6f 2e4d4152     ing low on SRAM.
   1b6d4:	656c5020 20657361 6974706f 6573696d      Please optimise
   1b6e4:	756f7920 72702072 6172676f 6f66206d      your program fo
   1b6f4:	65622072 72657474 4d415220 61737520     r better RAM usa
   1b704:	00006567 73696854 6e756620 6f697463     ge..This functio
   1b714:	7369206e 746f6e20 70757320 74726f70     n is not support
   1b724:	62206465 68742079 6c662065 20687361     ed by the flash 
   1b734:	6f6d656d 68207972 77647261 2e657261     memory hardware.
   1b744:	00000000 62616e55 7420656c 7573206f     ....Unable to su
   1b754:	6e657073 65722f64 656d7573 65706f20     spend/resume ope
   1b764:	69746172 002e6e6f 74697257 75462065     ration..Write Fu
   1b774:	6974636e 68206e6f 66207361 656c6961     nction has faile
   1b784:	72652064 63726f72 6b636568 0000002e     d errorcheck....
   1b794:	62616e55 7420656c 6e65206f 656c6261     Unable to enable
   1b7a4:	622d3420 20657479 72646461 69737365      4-byte addressi
   1b7b4:	002e676e 62616e55 7420656c 6964206f     ng..Unable to di
   1b7c4:	6c626173 2d342065 65747962 64646120     sable 4-byte add
   1b7d4:	73736572 2e676e69 00000000 20656854     ressing.....The 
   1b7e4:	70696863 20736920 72727563 6c746e65     chip is currentl
   1b7f4:	6f702079 65726577 6f642064 002e6e77     y powered down..
   1b804:	20656854 73616c46 68632068 64207069     The Flash chip d
   1b814:	2073656f 20746f6e 70707573 2074726f     oes not support 
   1b824:	50444653 0000002e 62616e55 7420656c     SFDP....Unable t
   1b834:	6572206f 45206461 65736172 72615020     o read Erase Par
   1b844:	74656d61 20737265 6d6f7266 69686320     ameters from chi
   1b854:	52202e70 72657665 676e6974 206f7420     p. Reverting to 
   1b864:	7262696c 20797261 61666564 73746c75     library defaults
   1b874:	0000002e 62616e55 7420656c 6572206f     ....Unable to re
   1b884:	65206461 65736172 6d697420 66207365     ad erase times f
   1b894:	206d6f72 73616c66 656d2068 79726f6d     rom flash memory
   1b8a4:	6552202e 74726576 20676e69 6c206f74     . Reverting to l
   1b8b4:	61726269 64207972 75616665 2e73746c     ibrary defaults.
   1b8c4:	00000000 62616e55 7420656c 6572206f     ....Unable to re
   1b8d4:	70206461 72676f72 74206d61 73656d69     ad program times
   1b8e4:	6f726620 6c66206d 20687361 6f6d656d      from flash memo
   1b8f4:	202e7972 65766552 6e697472 6f742067     ry. Reverting to
   1b904:	62696c20 79726172 66656420 746c7561      library default
   1b914:	00002e73 43206f4e 20706968 656c6553     s...No Chip Sele
   1b924:	70207463 64206e69 6e696665 69206465     ct pin defined i
   1b934:	6874206e 75632065 6d6f7473 49505320     n the custom SPI
   1b944:	72724120 002e7961 6e6b6e55 206e776f      Array..Unknown 
   1b954:	6f727265 00000072 6f727245 6f632072     error...Error co
   1b964:	203a6564 00007830 00000030 74206649     de: 0x..0...If t
   1b974:	20736968 73656f64 746f6e20 6c656820     his does not hel
   1b984:	65722070 766c6f73 6c632f65 66697261     p resolve/clarif
   1b994:	68742079 69207369 65757373 0000202c     y this issue, ..
   1b9a4:	61656c70 72206573 65736961 206e6120     please raise an 
   1b9b4:	75737369 74612065 74746820 2f2f3a70     issue at http://
   1b9c4:	2e777777 2d327368 69676e65 7265656e     www.hs2-engineer
   1b9d4:	2e676e69 692f6564 7865646e 7068702e     ing.de/index.php
   1b9e4:	6e6f632f 74636174 6d74682e 6977206c     /contact.html wi
   1b9f4:	74206874 64206568 69617465 6f20736c     th the details o
   1ba04:	68772066 79207461 2072756f 65726577     f what your were
   1ba14:	696f6420 7720676e 206e6568 73696874      doing when this
   1ba24:	72726520 6f20726f 72756363 00646572      error occurred.

0001ba34 <maxEventCount>:
   1ba34:	01000010                                         ..

0001ba36 <sizeOfEventQueue>:
   1ba36:	ffff0100                                         ..

0001ba38 <forever>:
   1ba38:	7fffffff 2e2f2e2e 2e2e2f2e 554c412f     ....../../../ALU
   1ba48:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
   1ba58:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
   1ba68:	6f697067 7361625f 00682e65              gpio_base.h.

0001ba74 <_ZTV14Calendar_Class>:
	...
   1ba7c:	0001299d 00012a8d                       .)...*..

0001ba84 <_ZTV17DateTimeLog_Class>:
	...
   1ba8c:	000112cf 000112cf                       ........

0001ba94 <_ZTV9CDC_Class>:
	...
   1ba9c:	000135b5 00013669 000132cd 0001357d     .5..i6...2..}5..
   1baac:	000136e5 00013541 000134b1 00013501     .6..A5...4...5..
   1babc:	0001359d 000135ed                       .5...5..

0001bac4 <_ZTV6Stream>:
	...
   1bacc:	000112cf 00013779 000132cd 000132e1     ....y7...2...2..
   1badc:	000112cf 000112cf 000112cf 2e257830     ............0x%.
   1baec:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   1bafc:	0066766f                                ovf.

0001bb00 <_ZTV5Print>:
	...
   1bb08:	000112cf 00013779 000132cd 000132e1     ....y7...2...2..
   1bb18:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   1bb28:	00632e6f 00776f70                       o.c.pow.

0001bb30 <TWO52>:
   1bb30:	00000000 43300000 00000000 c3300000     ......0C......0.

0001bb40 <_global_impure_ptr>:
   1bb40:	200001a0                                ... 

0001bb44 <__month_lengths>:
   1bb44:	0000001f 0000001c 0000001f 0000001e     ................
   1bb54:	0000001f 0000001e 0000001f 0000001f     ................
   1bb64:	0000001e 0000001f 0000001e 0000001f     ................
   1bb74:	0000001f 0000001d 0000001f 0000001e     ................
   1bb84:	0000001f 0000001e 0000001f 0000001f     ................
   1bb94:	0000001e 0000001f 0000001e 0000001f     ................
   1bba4:	00005a54 00544d47 5b303125 392d305e     TZ..GMT.%10[^0-9
   1bbb4:	5d2d2b2c 00006e25 25756825 68253a6e     ,+-]%n..%hu%n:%h
   1bbc4:	3a6e2575 25756825 0000006e 7568254d     u%n:%hu%n...M%hu
   1bbd4:	252e6e25 6e257568 7568252e 00006e25     %n.%hu%n.%hu%n..
   1bbe4:	7568252f 253a6e25 6e257568 7568253a     /%hu%n:%hu%n:%hu
   1bbf4:	00006e25 73332e25 332e2520 64332573     %n..%.3s %.3s%3d
   1bc04:	322e2520 2e253a64 253a6432 2064322e      %.2d:%.2d:%.2d 
   1bc14:	000a6425                                %d..

0001bc18 <day_name.4727>:
   1bc18:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   1bc28:	61536972 00000074                       riSat...

0001bc30 <mon_name.4728>:
   1bc30:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   1bc40:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   1bc50:	63654476 33323130 37363534 42413938     vDec0123456789AB
   1bc60:	46454443 00000000 33323130 37363534     CDEF....01234567
   1bc70:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   1bc80:	0000296c                                l)..

0001bc84 <blanks.7203>:
   1bc84:	20202020 20202020 20202020 20202020                     

0001bc94 <zeroes.7204>:
   1bc94:	30303030 30303030 30303030 30303030     0000000000000000

0001bca4 <basefix.6796>:
   1bca4:	0001000a 00030002 00050004 00070006     ................
   1bcb4:	00090008 000b000a 000d000c 000f000e     ................
   1bcc4:	00000010 00000043 49534f50 00000058     ....C...POSIX...
   1bcd4:	0000002e                                ....

0001bcd8 <_ctype_>:
   1bcd8:	20202000 20202020 28282020 20282828     .         ((((( 
   1bce8:	20202020 20202020 20202020 20202020                     
   1bcf8:	10108820 10101010 10101010 10101010      ...............
   1bd08:	04040410 04040404 10040404 10101010     ................
   1bd18:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1bd28:	01010101 01010101 01010101 10101010     ................
   1bd38:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1bd48:	02020202 02020202 02020202 10101010     ................
   1bd58:	00000020 00000000 00000000 00000000      ...............
	...

0001bddc <_init>:
   1bddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bdde:	bf00      	nop
   1bde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1bde2:	bc08      	pop	{r3}
   1bde4:	469e      	mov	lr, r3
   1bde6:	4770      	bx	lr

0001bde8 <__init_array_start>:
   1bde8:	00016b75 	.word	0x00016b75

0001bdec <__frame_dummy_init_array_entry>:
   1bdec:	00000289 000006b1 000007d5 00000871     ............q...
   1bdfc:	00000e49 000011c9 00001879 00001c9d     I.......y.......
   1be0c:	00002ccd 00010ae9 000115ad 00011979     .,..........y...
   1be1c:	00011e59 0001257d 00012cd9 00013295     Y...}%...,...2..
   1be2c:	00013765 00013f85                       e7...?..

0001be34 <_fini>:
   1be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1be36:	bf00      	nop
   1be38:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1be3a:	bc08      	pop	{r3}
   1be3c:	469e      	mov	lr, r3
   1be3e:	4770      	bx	lr

0001be40 <__fini_array_start>:
   1be40:	00000265 	.word	0x00000265
