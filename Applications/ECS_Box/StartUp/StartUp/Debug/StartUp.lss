
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00019a38  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00019a38  00019a38  00029a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000005f4  20000000  00019a40  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  000305f4  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  000305f4  2**0
                  CONTENTS
  5 .bss          00004c08  200005f8  0001a038  000305f4  2**3
                  ALLOC
  6 .stack        00010000  20005200  0001ec40  000305f4  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  000305f4  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00030622  2**0
                  CONTENTS, READONLY
  9 .debug_info   000d86a8  00000000  00000000  0003067b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00011941  00000000  00000000  00108d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000260b0  00000000  00000000  0011a664  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004468  00000000  00000000  00140714  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003f70  00000000  00000000  00144b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00060c75  00000000  00000000  00148aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0005df17  00000000  00000000  001a9761  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0014a619  00000000  00000000  00207678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00012094  00000000  00000000  00351c94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 52 01 20 45 0e 00 00 c9 0e 00 00 c9 0e 00 00     .R. E...........
      10:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 00 00 00 00     ................
	...
      2c:	c9 0e 00 00 c9 0e 00 00 00 00 00 00 c9 0e 00 00     ................
      3c:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
      4c:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
      5c:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
      6c:	f1 90 00 00 e5 7a 00 00 c9 0e 00 00 c9 0e 00 00     .....z..........
      7c:	c9 0e 00 00 f5 7a 00 00 05 7b 00 00 15 7b 00 00     .....z...{...{..
      8c:	25 7b 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     %{..............
      9c:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
      ac:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
      bc:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
      cc:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
      dc:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 00 00 00 00     ................
	...
      f4:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
     104:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
     114:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
     124:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
     134:	c9 0e 00 00 bd a5 00 00 d9 a5 00 00 f5 a5 00 00     ................
     144:	11 a6 00 00 2d a6 00 00 49 a6 00 00 65 a6 00 00     ....-...I...e...
     154:	81 a6 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
     164:	c9 0e 00 00 9d a6 00 00 b9 a6 00 00 d5 a6 00 00     ................
     174:	f1 a6 00 00 c9 0e 00 00 21 6d 00 00 59 e1 00 00     ........!m..Y...
     184:	69 e1 00 00 79 e1 00 00 89 e1 00 00 c9 0e 00 00     i...y...........
     194:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
     1a4:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
     1b4:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
     1c4:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
     1d4:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
     1e4:	c9 0e 00 00 c9 0e 00 00 25 b8 00 00 41 b8 00 00     ........%...A...
     1f4:	5d b8 00 00 79 b8 00 00 95 b8 00 00 b1 b8 00 00     ]...y...........
     204:	c9 0e 00 00 cd b8 00 00 c9 0e 00 00 c9 0e 00 00     ................
     214:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
     224:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
     234:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
     244:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
     254:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005f8 	.word	0x200005f8
     280:	00000000 	.word	0x00000000
     284:	00019a40 	.word	0x00019a40

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00019a40 	.word	0x00019a40
     2c4:	200005fc 	.word	0x200005fc
     2c8:	00019a40 	.word	0x00019a40
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
     2d8:	6039      	str	r1, [r7, #0]
	{
	data = v;
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	683a      	ldr	r2, [r7, #0]
     2de:	601a      	str	r2, [r3, #0]
	}
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	4618      	mov	r0, r3
     2e4:	370c      	adds	r7, #12
     2e6:	46bd      	mov	sp, r7
     2e8:	bc80      	pop	{r7}
     2ea:	4770      	bx	lr

000002ec <_ZL11ARINCTimeUpPK10timer_task>:
#include "MemoryManagment_Class.h"
#include "CDC_Class.h"
#include "DateTime_Class.h"
#include "N25Q256_Class.h"
ALU_Class	*ptrALUClass;
static void ARINCTimeUp(const struct timer_task *const timer_task){
     2ec:	b480      	push	{r7}
     2ee:	b083      	sub	sp, #12
     2f0:	af00      	add	r7, sp, #0
     2f2:	6078      	str	r0, [r7, #4]
	ptrALUClass->arincTXTimeUP=true;
     2f4:	4b04      	ldr	r3, [pc, #16]	; (308 <_ZL11ARINCTimeUpPK10timer_task+0x1c>)
     2f6:	681b      	ldr	r3, [r3, #0]
     2f8:	2201      	movs	r2, #1
     2fa:	751a      	strb	r2, [r3, #20]
}
     2fc:	bf00      	nop
     2fe:	370c      	adds	r7, #12
     300:	46bd      	mov	sp, r7
     302:	bc80      	pop	{r7}
     304:	4770      	bx	lr
     306:	bf00      	nop
     308:	20000614 	.word	0x20000614

0000030c <_ZN9ALU_ClassC1Ev>:

// default constructor
ALU_Class::ALU_Class()
     30c:	b480      	push	{r7}
     30e:	b083      	sub	sp, #12
     310:	af00      	add	r7, sp, #0
     312:	6078      	str	r0, [r7, #4]
{
	ptrPbit=&pBIT;
     314:	687b      	ldr	r3, [r7, #4]
     316:	4a05      	ldr	r2, [pc, #20]	; (32c <_ZN9ALU_ClassC1Ev+0x20>)
     318:	611a      	str	r2, [r3, #16]
	ptrALUClass=this;
     31a:	4a05      	ldr	r2, [pc, #20]	; (330 <_ZN9ALU_ClassC1Ev+0x24>)
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	6013      	str	r3, [r2, #0]
} //ALU_Class
     320:	687b      	ldr	r3, [r7, #4]
     322:	4618      	mov	r0, r3
     324:	370c      	adds	r7, #12
     326:	46bd      	mov	sp, r7
     328:	bc80      	pop	{r7}
     32a:	4770      	bx	lr
     32c:	20002914 	.word	0x20002914
     330:	20000614 	.word	0x20000614

00000334 <_ZN9ALU_ClassD1Ev>:

// default destructor
ALU_Class::~ALU_Class()
     334:	b480      	push	{r7}
     336:	b083      	sub	sp, #12
     338:	af00      	add	r7, sp, #0
     33a:	6078      	str	r0, [r7, #4]
{
} //~ALU_Class
     33c:	687b      	ldr	r3, [r7, #4]
     33e:	4618      	mov	r0, r3
     340:	370c      	adds	r7, #12
     342:	46bd      	mov	sp, r7
     344:	bc80      	pop	{r7}
     346:	4770      	bx	lr

00000348 <_ZN9ALU_Class4InitEv>:

uint32_t	ALU_Class::Init(void){
     348:	b580      	push	{r7, lr}
     34a:	b086      	sub	sp, #24
     34c:	af00      	add	r7, sp, #0
     34e:	6078      	str	r0, [r7, #4]
	uint32_t	s;
	StartLivePulse();
     350:	6878      	ldr	r0, [r7, #4]
     352:	4b2f      	ldr	r3, [pc, #188]	; (410 <_ZN9ALU_Class4InitEv+0xc8>)
     354:	4798      	blx	r3
		
	cBit.statusBits.hvacOK=hvac.Init();
     356:	482f      	ldr	r0, [pc, #188]	; (414 <_ZN9ALU_Class4InitEv+0xcc>)
     358:	4b2f      	ldr	r3, [pc, #188]	; (418 <_ZN9ALU_Class4InitEv+0xd0>)
     35a:	4798      	blx	r3
     35c:	4603      	mov	r3, r0
     35e:	461a      	mov	r2, r3
     360:	4b2e      	ldr	r3, [pc, #184]	; (41c <_ZN9ALU_Class4InitEv+0xd4>)
     362:	701a      	strb	r2, [r3, #0]
	
	hvac.SetCRCConfigData();
     364:	482b      	ldr	r0, [pc, #172]	; (414 <_ZN9ALU_Class4InitEv+0xcc>)
     366:	4b2e      	ldr	r3, [pc, #184]	; (420 <_ZN9ALU_Class4InitEv+0xd8>)
     368:	4798      	blx	r3
	SetInitialConfiguration(configuration);
     36a:	687b      	ldr	r3, [r7, #4]
     36c:	331c      	adds	r3, #28
     36e:	4619      	mov	r1, r3
     370:	6878      	ldr	r0, [r7, #4]
     372:	4b2c      	ldr	r3, [pc, #176]	; (424 <_ZN9ALU_Class4InitEv+0xdc>)
     374:	4798      	blx	r3
	memory.WriteDefaultState();
     376:	482c      	ldr	r0, [pc, #176]	; (428 <_ZN9ALU_Class4InitEv+0xe0>)
     378:	4b2c      	ldr	r3, [pc, #176]	; (42c <_ZN9ALU_Class4InitEv+0xe4>)
     37a:	4798      	blx	r3
	hvac.SetInitialState();
     37c:	4825      	ldr	r0, [pc, #148]	; (414 <_ZN9ALU_Class4InitEv+0xcc>)
     37e:	4b2c      	ldr	r3, [pc, #176]	; (430 <_ZN9ALU_Class4InitEv+0xe8>)
     380:	4798      	blx	r3
	uhr.Init();
     382:	482c      	ldr	r0, [pc, #176]	; (434 <_ZN9ALU_Class4InitEv+0xec>)
     384:	4b2c      	ldr	r3, [pc, #176]	; (438 <_ZN9ALU_Class4InitEv+0xf0>)
     386:	4798      	blx	r3
	hvac.saveCurrentState();
     388:	4822      	ldr	r0, [pc, #136]	; (414 <_ZN9ALU_Class4InitEv+0xcc>)
     38a:	4b2c      	ldr	r3, [pc, #176]	; (43c <_ZN9ALU_Class4InitEv+0xf4>)
     38c:	4798      	blx	r3
	
	if (!(interfaces.Init()))
     38e:	482c      	ldr	r0, [pc, #176]	; (440 <_ZN9ALU_Class4InitEv+0xf8>)
     390:	4b2c      	ldr	r3, [pc, #176]	; (444 <_ZN9ALU_Class4InitEv+0xfc>)
     392:	4798      	blx	r3
     394:	4603      	mov	r3, r0
     396:	f083 0301 	eor.w	r3, r3, #1
     39a:	b2db      	uxtb	r3, r3
     39c:	2b00      	cmp	r3, #0
     39e:	d00e      	beq.n	3be <_ZN9ALU_Class4InitEv+0x76>
	{	
		NotifyError(kARINCINnterfaceError,s);
     3a0:	f107 030c 	add.w	r3, r7, #12
     3a4:	6979      	ldr	r1, [r7, #20]
     3a6:	4618      	mov	r0, r3
     3a8:	4b27      	ldr	r3, [pc, #156]	; (448 <_ZN9ALU_Class4InitEv+0x100>)
     3aa:	4798      	blx	r3
     3ac:	f107 030c 	add.w	r3, r7, #12
     3b0:	461a      	mov	r2, r3
     3b2:	2100      	movs	r1, #0
     3b4:	6878      	ldr	r0, [r7, #4]
     3b6:	4b25      	ldr	r3, [pc, #148]	; (44c <_ZN9ALU_Class4InitEv+0x104>)
     3b8:	4798      	blx	r3
		return s;
     3ba:	697b      	ldr	r3, [r7, #20]
     3bc:	e024      	b.n	408 <_ZN9ALU_Class4InitEv+0xc0>
	} 
	else
	{
		arincTimer.Start_periodic_task(FUNC_PTR(ARINCTimeUp),500);
     3be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     3c2:	4923      	ldr	r1, [pc, #140]	; (450 <_ZN9ALU_Class4InitEv+0x108>)
     3c4:	4823      	ldr	r0, [pc, #140]	; (454 <_ZN9ALU_Class4InitEv+0x10c>)
     3c6:	4b24      	ldr	r3, [pc, #144]	; (458 <_ZN9ALU_Class4InitEv+0x110>)
     3c8:	4798      	blx	r3
		
		s=pBIT.CheckCurrentStatus(status);
     3ca:	687b      	ldr	r3, [r7, #4]
     3cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
     3d0:	4619      	mov	r1, r3
     3d2:	4822      	ldr	r0, [pc, #136]	; (45c <_ZN9ALU_Class4InitEv+0x114>)
     3d4:	4b22      	ldr	r3, [pc, #136]	; (460 <_ZN9ALU_Class4InitEv+0x118>)
     3d6:	4798      	blx	r3
     3d8:	6178      	str	r0, [r7, #20]
		if (s>0)
     3da:	697b      	ldr	r3, [r7, #20]
     3dc:	2b00      	cmp	r3, #0
     3de:	d00e      	beq.n	3fe <_ZN9ALU_Class4InitEv+0xb6>
		{
			NotifyError(kpBITError,s);
     3e0:	f107 0310 	add.w	r3, r7, #16
     3e4:	6979      	ldr	r1, [r7, #20]
     3e6:	4618      	mov	r0, r3
     3e8:	4b17      	ldr	r3, [pc, #92]	; (448 <_ZN9ALU_Class4InitEv+0x100>)
     3ea:	4798      	blx	r3
     3ec:	f107 0310 	add.w	r3, r7, #16
     3f0:	461a      	mov	r2, r3
     3f2:	2101      	movs	r1, #1
     3f4:	6878      	ldr	r0, [r7, #4]
     3f6:	4b15      	ldr	r3, [pc, #84]	; (44c <_ZN9ALU_Class4InitEv+0x104>)
     3f8:	4798      	blx	r3
			return s;
     3fa:	697b      	ldr	r3, [r7, #20]
     3fc:	e004      	b.n	408 <_ZN9ALU_Class4InitEv+0xc0>
		} 
		else
		{
			hvac.Start(0);
     3fe:	2100      	movs	r1, #0
     400:	4804      	ldr	r0, [pc, #16]	; (414 <_ZN9ALU_Class4InitEv+0xcc>)
     402:	4b18      	ldr	r3, [pc, #96]	; (464 <_ZN9ALU_Class4InitEv+0x11c>)
     404:	4798      	blx	r3
		}
	}
	  
	return s;
     406:	697b      	ldr	r3, [r7, #20]
}
     408:	4618      	mov	r0, r3
     40a:	3718      	adds	r7, #24
     40c:	46bd      	mov	sp, r7
     40e:	bd80      	pop	{r7, pc}
     410:	00000535 	.word	0x00000535
     414:	20002928 	.word	0x20002928
     418:	00002189 	.word	0x00002189
     41c:	20000d30 	.word	0x20000d30
     420:	00002d49 	.word	0x00002d49
     424:	00000581 	.word	0x00000581
     428:	200014e0 	.word	0x200014e0
     42c:	00001b25 	.word	0x00001b25
     430:	00000a45 	.word	0x00000a45
     434:	20000d38 	.word	0x20000d38
     438:	00000d9d 	.word	0x00000d9d
     43c:	00002c19 	.word	0x00002c19
     440:	20000df8 	.word	0x20000df8
     444:	00001125 	.word	0x00001125
     448:	000002d1 	.word	0x000002d1
     44c:	000006a9 	.word	0x000006a9
     450:	000002ed 	.word	0x000002ed
     454:	20004ca0 	.word	0x20004ca0
     458:	000143ad 	.word	0x000143ad
     45c:	20002914 	.word	0x20002914
     460:	00001cc5 	.word	0x00001cc5
     464:	000021f5 	.word	0x000021f5

00000468 <_ZN9ALU_Class13RunControllerEv>:

uint32_t	ALU_Class::RunController(void){
     468:	b580      	push	{r7, lr}
     46a:	b082      	sub	sp, #8
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		while (!arincTXTimeUP)
     470:	687b      	ldr	r3, [r7, #4]
     472:	7d1b      	ldrb	r3, [r3, #20]
     474:	b2db      	uxtb	r3, r3
     476:	f083 0301 	eor.w	r3, r3, #1
     47a:	b2db      	uxtb	r3, r3
     47c:	2b00      	cmp	r3, #0
     47e:	d012      	beq.n	4a6 <_ZN9ALU_Class13RunControllerEv+0x3e>
		{
			if (!pBIT)
     480:	480c      	ldr	r0, [pc, #48]	; (4b4 <_ZN9ALU_Class13RunControllerEv+0x4c>)
     482:	4b0d      	ldr	r3, [pc, #52]	; (4b8 <_ZN9ALU_Class13RunControllerEv+0x50>)
     484:	4798      	blx	r3
     486:	4603      	mov	r3, r0
     488:	f083 0301 	eor.w	r3, r3, #1
     48c:	b2db      	uxtb	r3, r3
     48e:	2b00      	cmp	r3, #0
     490:	d004      	beq.n	49c <_ZN9ALU_Class13RunControllerEv+0x34>
			{
				hvac.Stop(0);
     492:	2100      	movs	r1, #0
     494:	4809      	ldr	r0, [pc, #36]	; (4bc <_ZN9ALU_Class13RunControllerEv+0x54>)
     496:	4b0a      	ldr	r3, [pc, #40]	; (4c0 <_ZN9ALU_Class13RunControllerEv+0x58>)
     498:	4798      	blx	r3
     49a:	e7e9      	b.n	470 <_ZN9ALU_Class13RunControllerEv+0x8>
			}
			else
			{
				hvac.Resume(0);
     49c:	2100      	movs	r1, #0
     49e:	4807      	ldr	r0, [pc, #28]	; (4bc <_ZN9ALU_Class13RunControllerEv+0x54>)
     4a0:	4b08      	ldr	r3, [pc, #32]	; (4c4 <_ZN9ALU_Class13RunControllerEv+0x5c>)
     4a2:	4798      	blx	r3
		while (!arincTXTimeUP)
     4a4:	e7e4      	b.n	470 <_ZN9ALU_Class13RunControllerEv+0x8>
			}
		}
		arinc.TrasmitSingleLabel();
     4a6:	4808      	ldr	r0, [pc, #32]	; (4c8 <_ZN9ALU_Class13RunControllerEv+0x60>)
     4a8:	4b08      	ldr	r3, [pc, #32]	; (4cc <_ZN9ALU_Class13RunControllerEv+0x64>)
     4aa:	4798      	blx	r3
		arincTXTimeUP=false;
     4ac:	687b      	ldr	r3, [r7, #4]
     4ae:	2200      	movs	r2, #0
     4b0:	751a      	strb	r2, [r3, #20]
	while (1)
     4b2:	e7dd      	b.n	470 <_ZN9ALU_Class13RunControllerEv+0x8>
     4b4:	20002914 	.word	0x20002914
     4b8:	00001cad 	.word	0x00001cad
     4bc:	20002928 	.word	0x20002928
     4c0:	00002ca9 	.word	0x00002ca9
     4c4:	000021a9 	.word	0x000021a9
     4c8:	2000342c 	.word	0x2000342c
     4cc:	00010efd 	.word	0x00010efd

000004d0 <_ZN9ALU_Class15GetSelectedAMMCEv>:
	}
	
}

uint8_t	ALU_Class::GetSelectedAMMC(void){
     4d0:	b580      	push	{r7, lr}
     4d2:	b082      	sub	sp, #8
     4d4:	af00      	add	r7, sp, #0
     4d6:	6078      	str	r0, [r7, #4]
	activeLine=arinc.GetActiveLine();
     4d8:	4811      	ldr	r0, [pc, #68]	; (520 <_ZN9ALU_Class15GetSelectedAMMCEv+0x50>)
     4da:	4b12      	ldr	r3, [pc, #72]	; (524 <_ZN9ALU_Class15GetSelectedAMMCEv+0x54>)
     4dc:	4798      	blx	r3
     4de:	4603      	mov	r3, r0
     4e0:	461a      	mov	r2, r3
     4e2:	687b      	ldr	r3, [r7, #4]
     4e4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		switch (activeLine)
     4e8:	687b      	ldr	r3, [r7, #4]
     4ea:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
     4ee:	2b01      	cmp	r3, #1
     4f0:	d002      	beq.n	4f8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x28>
     4f2:	2b02      	cmp	r3, #2
     4f4:	d004      	beq.n	500 <_ZN9ALU_Class15GetSelectedAMMCEv+0x30>
     4f6:	e007      	b.n	508 <_ZN9ALU_Class15GetSelectedAMMCEv+0x38>
		{
			case 1:
			ammc=&ammc1;
     4f8:	4b0b      	ldr	r3, [pc, #44]	; (528 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     4fa:	4a0c      	ldr	r2, [pc, #48]	; (52c <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     4fc:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     4fe:	e007      	b.n	510 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			
			case 2:
			ammc=&ammc2;
     500:	4b09      	ldr	r3, [pc, #36]	; (528 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     502:	4a0b      	ldr	r2, [pc, #44]	; (530 <_ZN9ALU_Class15GetSelectedAMMCEv+0x60>)
     504:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     506:	e003      	b.n	510 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			default:
			ammc=&ammc1;
     508:	4b07      	ldr	r3, [pc, #28]	; (528 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     50a:	4a08      	ldr	r2, [pc, #32]	; (52c <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     50c:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     50e:	bf00      	nop
		}
	return activeLine;	
     510:	687b      	ldr	r3, [r7, #4]
     512:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
}
     516:	4618      	mov	r0, r3
     518:	3708      	adds	r7, #8
     51a:	46bd      	mov	sp, r7
     51c:	bd80      	pop	{r7, pc}
     51e:	bf00      	nop
     520:	2000342c 	.word	0x2000342c
     524:	0001198f 	.word	0x0001198f
     528:	20000d2c 	.word	0x20000d2c
     52c:	2000074c 	.word	0x2000074c
     530:	20000a3c 	.word	0x20000a3c

00000534 <_ZN9ALU_Class14StartLivePulseEv>:
	
}
int32_t	ALU_Class::FeedWatchDog(void){
	return wdt_feed(&WATCHDOG);
}
uint8_t	ALU_Class::StartLivePulse(void){
     534:	b580      	push	{r7, lr}
     536:	b084      	sub	sp, #16
     538:	af00      	add	r7, sp, #0
     53a:	6078      	str	r0, [r7, #4]
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     53c:	4909      	ldr	r1, [pc, #36]	; (564 <_ZN9ALU_Class14StartLivePulseEv+0x30>)
     53e:	480a      	ldr	r0, [pc, #40]	; (568 <_ZN9ALU_Class14StartLivePulseEv+0x34>)
     540:	4b0a      	ldr	r3, [pc, #40]	; (56c <_ZN9ALU_Class14StartLivePulseEv+0x38>)
     542:	4798      	blx	r3
     544:	4603      	mov	r3, r0
     546:	490a      	ldr	r1, [pc, #40]	; (570 <_ZN9ALU_Class14StartLivePulseEv+0x3c>)
     548:	4618      	mov	r0, r3
     54a:	4b0a      	ldr	r3, [pc, #40]	; (574 <_ZN9ALU_Class14StartLivePulseEv+0x40>)
     54c:	4798      	blx	r3
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     54e:	480a      	ldr	r0, [pc, #40]	; (578 <_ZN9ALU_Class14StartLivePulseEv+0x44>)
     550:	4b0a      	ldr	r3, [pc, #40]	; (57c <_ZN9ALU_Class14StartLivePulseEv+0x48>)
     552:	4798      	blx	r3
     554:	4603      	mov	r3, r0
     556:	60fb      	str	r3, [r7, #12]
	return p;
     558:	68fb      	ldr	r3, [r7, #12]
     55a:	b2db      	uxtb	r3, r3
}
     55c:	4618      	mov	r0, r3
     55e:	3710      	adds	r7, #16
     560:	46bd      	mov	sp, r7
     562:	bd80      	pop	{r7, pc}
     564:	00017c48 	.word	0x00017c48
     568:	20004cc4 	.word	0x20004cc4
     56c:	0000071d 	.word	0x0000071d
     570:	00017c44 	.word	0x00017c44
     574:	000006fd 	.word	0x000006fd
     578:	20005008 	.word	0x20005008
     57c:	00005019 	.word	0x00005019

00000580 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData>:
		nextUptimeUpdate = hvacTimer.Get_ticks()+ 1000;
	}
	
	return (alu.FeedWatchDog()>0);
}
uint32_t ALU_Class::SetInitialConfiguration(ConfigurationData& cd){
     580:	b580      	push	{r7, lr}
     582:	b088      	sub	sp, #32
     584:	af00      	add	r7, sp, #0
     586:	6078      	str	r0, [r7, #4]
     588:	6039      	str	r1, [r7, #0]
	uint32_t	w,crc,refCRC,e;
	w=0;
     58a:	2300      	movs	r3, #0
     58c:	61bb      	str	r3, [r7, #24]
	uint32_t	r=memory.ReadLastConfigurationData(cd);
     58e:	6839      	ldr	r1, [r7, #0]
     590:	4835      	ldr	r0, [pc, #212]	; (668 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     592:	4b36      	ldr	r3, [pc, #216]	; (66c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xec>)
     594:	4798      	blx	r3
     596:	61f8      	str	r0, [r7, #28]
	if (memory.IsConfigurationDataUpdated())
     598:	4835      	ldr	r0, [pc, #212]	; (670 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf0>)
     59a:	4b36      	ldr	r3, [pc, #216]	; (674 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf4>)
     59c:	4798      	blx	r3
     59e:	4603      	mov	r3, r0
     5a0:	2b00      	cmp	r3, #0
     5a2:	d007      	beq.n	5b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x34>
	{
		r=memory.ReadUpdatedConfigurationData(configuration);
     5a4:	687b      	ldr	r3, [r7, #4]
     5a6:	331c      	adds	r3, #28
     5a8:	4619      	mov	r1, r3
     5aa:	482f      	ldr	r0, [pc, #188]	; (668 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     5ac:	4b32      	ldr	r3, [pc, #200]	; (678 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf8>)
     5ae:	4798      	blx	r3
     5b0:	61f8      	str	r0, [r7, #28]
     5b2:	e04d      	b.n	650 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd0>
		
	}
	else
	{
		crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(configuration));
     5b4:	22ac      	movs	r2, #172	; 0xac
     5b6:	6839      	ldr	r1, [r7, #0]
     5b8:	482d      	ldr	r0, [pc, #180]	; (670 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf0>)
     5ba:	4b30      	ldr	r3, [pc, #192]	; (67c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xfc>)
     5bc:	4798      	blx	r3
     5be:	6178      	str	r0, [r7, #20]
		refCRC=memory.ReadCRCConfigurationData();
     5c0:	4829      	ldr	r0, [pc, #164]	; (668 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     5c2:	4b2f      	ldr	r3, [pc, #188]	; (680 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x100>)
     5c4:	4798      	blx	r3
     5c6:	6138      	str	r0, [r7, #16]
		if (crc==refCRC)
     5c8:	697a      	ldr	r2, [r7, #20]
     5ca:	693b      	ldr	r3, [r7, #16]
     5cc:	429a      	cmp	r2, r3
     5ce:	d108      	bne.n	5e2 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x62>
		{
			configuration=cd;
     5d0:	687b      	ldr	r3, [r7, #4]
     5d2:	683a      	ldr	r2, [r7, #0]
     5d4:	331c      	adds	r3, #28
     5d6:	4611      	mov	r1, r2
     5d8:	22ac      	movs	r2, #172	; 0xac
     5da:	4618      	mov	r0, r3
     5dc:	4b29      	ldr	r3, [pc, #164]	; (684 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x104>)
     5de:	4798      	blx	r3
     5e0:	e036      	b.n	650 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd0>
		
		} 
		else
		{
		
			r=memory.ReadDefaultConfigurationData(configuration);
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	331c      	adds	r3, #28
     5e6:	4619      	mov	r1, r3
     5e8:	481f      	ldr	r0, [pc, #124]	; (668 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     5ea:	4b27      	ldr	r3, [pc, #156]	; (688 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     5ec:	4798      	blx	r3
     5ee:	61f8      	str	r0, [r7, #28]
			crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
     5f0:	687b      	ldr	r3, [r7, #4]
     5f2:	331c      	adds	r3, #28
     5f4:	22ac      	movs	r2, #172	; 0xac
     5f6:	4619      	mov	r1, r3
     5f8:	481d      	ldr	r0, [pc, #116]	; (670 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf0>)
     5fa:	4b20      	ldr	r3, [pc, #128]	; (67c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xfc>)
     5fc:	4798      	blx	r3
     5fe:	6178      	str	r0, [r7, #20]
			if (crc==hvac.CRC32)
     600:	4b22      	ldr	r3, [pc, #136]	; (68c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     602:	f8d3 24d0 	ldr.w	r2, [r3, #1232]	; 0x4d0
     606:	697b      	ldr	r3, [r7, #20]
     608:	429a      	cmp	r2, r3
     60a:	d105      	bne.n	618 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x98>
			{
				w=memory.WriteCRCConfigurationData(crc);
     60c:	6979      	ldr	r1, [r7, #20]
     60e:	4816      	ldr	r0, [pc, #88]	; (668 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     610:	4b1f      	ldr	r3, [pc, #124]	; (690 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     612:	4798      	blx	r3
     614:	61b8      	str	r0, [r7, #24]
     616:	e01b      	b.n	650 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd0>
				
			}
			else
			{
							
				configuration=factoryDefaultsConfiguration;
     618:	687b      	ldr	r3, [r7, #4]
     61a:	4a1e      	ldr	r2, [pc, #120]	; (694 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x114>)
     61c:	331c      	adds	r3, #28
     61e:	4611      	mov	r1, r2
     620:	22ac      	movs	r2, #172	; 0xac
     622:	4618      	mov	r0, r3
     624:	4b17      	ldr	r3, [pc, #92]	; (684 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x104>)
     626:	4798      	blx	r3
				e=qspiFlash.Erase(0);
     628:	2100      	movs	r1, #0
     62a:	481b      	ldr	r0, [pc, #108]	; (698 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x118>)
     62c:	4b1b      	ldr	r3, [pc, #108]	; (69c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     62e:	4798      	blx	r3
     630:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultConfiguration(configuration);
     632:	687b      	ldr	r3, [r7, #4]
     634:	331c      	adds	r3, #28
     636:	4619      	mov	r1, r3
     638:	480b      	ldr	r0, [pc, #44]	; (668 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     63a:	4b19      	ldr	r3, [pc, #100]	; (6a0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x120>)
     63c:	4798      	blx	r3
     63e:	61b8      	str	r0, [r7, #24]
				w=memory.WriteCRCConfigurationData(hvac.CRC32);
     640:	4b12      	ldr	r3, [pc, #72]	; (68c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     642:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
     646:	4619      	mov	r1, r3
     648:	4807      	ldr	r0, [pc, #28]	; (668 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     64a:	4b11      	ldr	r3, [pc, #68]	; (690 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     64c:	4798      	blx	r3
     64e:	61b8      	str	r0, [r7, #24]
			
		}
		
		
	}
	hvac.SetConfigurationData(configuration);
     650:	687b      	ldr	r3, [r7, #4]
     652:	331c      	adds	r3, #28
     654:	4619      	mov	r1, r3
     656:	480d      	ldr	r0, [pc, #52]	; (68c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     658:	4b12      	ldr	r3, [pc, #72]	; (6a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     65a:	4798      	blx	r3
	return r;
     65c:	69fb      	ldr	r3, [r7, #28]
};
     65e:	4618      	mov	r0, r3
     660:	3720      	adds	r7, #32
     662:	46bd      	mov	sp, r7
     664:	bd80      	pop	{r7, pc}
     666:	bf00      	nop
     668:	200014e0 	.word	0x200014e0
     66c:	000019b5 	.word	0x000019b5
     670:	2000135c 	.word	0x2000135c
     674:	00001ef9 	.word	0x00001ef9
     678:	000019e5 	.word	0x000019e5
     67c:	00000c11 	.word	0x00000c11
     680:	00001a4d 	.word	0x00001a4d
     684:	000177d9 	.word	0x000177d9
     688:	00001985 	.word	0x00001985
     68c:	20002928 	.word	0x20002928
     690:	00001b89 	.word	0x00001b89
     694:	00017d10 	.word	0x00017d10
     698:	200048a4 	.word	0x200048a4
     69c:	000134c9 	.word	0x000134c9
     6a0:	00001af5 	.word	0x00001af5
     6a4:	00002cf9 	.word	0x00002cf9

000006a8 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData>:

void ALU_Class::NotifyError(Internal_Fault_List ifl,const eventData& data)
{
     6a8:	b580      	push	{r7, lr}
     6aa:	b084      	sub	sp, #16
     6ac:	af00      	add	r7, sp, #0
     6ae:	60f8      	str	r0, [r7, #12]
     6b0:	460b      	mov	r3, r1
     6b2:	607a      	str	r2, [r7, #4]
     6b4:	72fb      	strb	r3, [r7, #11]
	listener.SendErrorSelf(uint16_t(ifl),data);
     6b6:	7afb      	ldrb	r3, [r7, #11]
     6b8:	b29b      	uxth	r3, r3
     6ba:	687a      	ldr	r2, [r7, #4]
     6bc:	4619      	mov	r1, r3
     6be:	4803      	ldr	r0, [pc, #12]	; (6cc <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x24>)
     6c0:	4b03      	ldr	r3, [pc, #12]	; (6d0 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x28>)
     6c2:	4798      	blx	r3
}
     6c4:	bf00      	nop
     6c6:	3710      	adds	r7, #16
     6c8:	46bd      	mov	sp, r7
     6ca:	bd80      	pop	{r7, pc}
     6cc:	2000475c 	.word	0x2000475c
     6d0:	00011fdd 	.word	0x00011fdd

000006d4 <_ZlsIhER5PrintS1_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     6d4:	b580      	push	{r7, lr}
     6d6:	b082      	sub	sp, #8
     6d8:	af00      	add	r7, sp, #0
     6da:	6078      	str	r0, [r7, #4]
     6dc:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     6de:	683b      	ldr	r3, [r7, #0]
     6e0:	781b      	ldrb	r3, [r3, #0]
     6e2:	220a      	movs	r2, #10
     6e4:	4619      	mov	r1, r3
     6e6:	6878      	ldr	r0, [r7, #4]
     6e8:	4b03      	ldr	r3, [pc, #12]	; (6f8 <_ZlsIhER5PrintS1_RKT_+0x24>)
     6ea:	4798      	blx	r3
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	4618      	mov	r0, r3
     6f0:	3708      	adds	r7, #8
     6f2:	46bd      	mov	sp, r7
     6f4:	bd80      	pop	{r7, pc}
     6f6:	bf00      	nop
     6f8:	00014bf5 	.word	0x00014bf5

000006fc <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     6fc:	b580      	push	{r7, lr}
     6fe:	b082      	sub	sp, #8
     700:	af00      	add	r7, sp, #0
     702:	6078      	str	r0, [r7, #4]
     704:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     706:	6839      	ldr	r1, [r7, #0]
     708:	6878      	ldr	r0, [r7, #4]
     70a:	4b03      	ldr	r3, [pc, #12]	; (718 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     70c:	4798      	blx	r3
     70e:	687b      	ldr	r3, [r7, #4]
     710:	4618      	mov	r0, r3
     712:	3708      	adds	r7, #8
     714:	46bd      	mov	sp, r7
     716:	bd80      	pop	{r7, pc}
     718:	00014bb1 	.word	0x00014bb1

0000071c <_ZlsIA30_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     71c:	b580      	push	{r7, lr}
     71e:	b082      	sub	sp, #8
     720:	af00      	add	r7, sp, #0
     722:	6078      	str	r0, [r7, #4]
     724:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     726:	6839      	ldr	r1, [r7, #0]
     728:	6878      	ldr	r0, [r7, #4]
     72a:	4b03      	ldr	r3, [pc, #12]	; (738 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     72c:	4798      	blx	r3
     72e:	687b      	ldr	r3, [r7, #4]
     730:	4618      	mov	r0, r3
     732:	3708      	adds	r7, #8
     734:	46bd      	mov	sp, r7
     736:	bd80      	pop	{r7, pc}
     738:	00014bb1 	.word	0x00014bb1

0000073c <_Z41__static_initialization_and_destruction_0ii>:
void ALU_Class::NotifyError(Fault_List fl,const eventData& data)
{
	listener.SendErrorSelf(uint16_t(fl),data);
}
     73c:	b580      	push	{r7, lr}
     73e:	b082      	sub	sp, #8
     740:	af00      	add	r7, sp, #0
     742:	6078      	str	r0, [r7, #4]
     744:	6039      	str	r1, [r7, #0]
     746:	687b      	ldr	r3, [r7, #4]
     748:	2b01      	cmp	r3, #1
     74a:	d10c      	bne.n	766 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     74c:	683b      	ldr	r3, [r7, #0]
     74e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     752:	4293      	cmp	r3, r2
     754:	d107      	bne.n	766 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     756:	4806      	ldr	r0, [pc, #24]	; (770 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     758:	4b06      	ldr	r3, [pc, #24]	; (774 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     75a:	4798      	blx	r3
     75c:	4a06      	ldr	r2, [pc, #24]	; (778 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     75e:	4907      	ldr	r1, [pc, #28]	; (77c <_Z41__static_initialization_and_destruction_0ii+0x40>)
     760:	4803      	ldr	r0, [pc, #12]	; (770 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     762:	4b07      	ldr	r3, [pc, #28]	; (780 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     764:	4798      	blx	r3
     766:	bf00      	nop
     768:	3708      	adds	r7, #8
     76a:	46bd      	mov	sp, r7
     76c:	bd80      	pop	{r7, pc}
     76e:	bf00      	nop
     770:	20000618 	.word	0x20000618
     774:	0000030d 	.word	0x0000030d
     778:	20000000 	.word	0x20000000
     77c:	00000335 	.word	0x00000335
     780:	000159a5 	.word	0x000159a5

00000784 <_GLOBAL__sub_I_ptrALUClass>:
     784:	b580      	push	{r7, lr}
     786:	af00      	add	r7, sp, #0
     788:	f64f 71ff 	movw	r1, #65535	; 0xffff
     78c:	2001      	movs	r0, #1
     78e:	4b01      	ldr	r3, [pc, #4]	; (794 <_GLOBAL__sub_I_ptrALUClass+0x10>)
     790:	4798      	blx	r3
     792:	bd80      	pop	{r7, pc}
     794:	0000073d 	.word	0x0000073d

00000798 <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     798:	b580      	push	{r7, lr}
     79a:	b082      	sub	sp, #8
     79c:	af00      	add	r7, sp, #0
     79e:	6078      	str	r0, [r7, #4]
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
     7a6:	4618      	mov	r0, r3
     7a8:	4b0a      	ldr	r3, [pc, #40]	; (7d4 <_ZN10AMMC_ClassC1Ev+0x3c>)
     7aa:	4798      	blx	r3
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	4a0a      	ldr	r2, [pc, #40]	; (7d8 <_ZN10AMMC_ClassC1Ev+0x40>)
     7b0:	4611      	mov	r1, r2
     7b2:	4618      	mov	r0, r3
     7b4:	4b09      	ldr	r3, [pc, #36]	; (7dc <_ZN10AMMC_ClassC1Ev+0x44>)
     7b6:	4798      	blx	r3
     7b8:	4a09      	ldr	r2, [pc, #36]	; (7e0 <_ZN10AMMC_ClassC1Ev+0x48>)
     7ba:	687b      	ldr	r3, [r7, #4]
     7bc:	601a      	str	r2, [r3, #0]
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
     7c4:	4a07      	ldr	r2, [pc, #28]	; (7e4 <_ZN10AMMC_ClassC1Ev+0x4c>)
     7c6:	601a      	str	r2, [r3, #0]
{
} //AMMC_Class
     7c8:	687b      	ldr	r3, [r7, #4]
     7ca:	4618      	mov	r0, r3
     7cc:	3708      	adds	r7, #8
     7ce:	46bd      	mov	sp, r7
     7d0:	bd80      	pop	{r7, pc}
     7d2:	bf00      	nop
     7d4:	00010731 	.word	0x00010731
     7d8:	00017c9c 	.word	0x00017c9c
     7dc:	00010b2d 	.word	0x00010b2d
     7e0:	00017c74 	.word	0x00017c74
     7e4:	00017c90 	.word	0x00017c90

000007e8 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     7e8:	b580      	push	{r7, lr}
     7ea:	b082      	sub	sp, #8
     7ec:	af00      	add	r7, sp, #0
     7ee:	6078      	str	r0, [r7, #4]
     7f0:	4a0c      	ldr	r2, [pc, #48]	; (824 <_ZN10AMMC_ClassD1Ev+0x3c>)
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	601a      	str	r2, [r3, #0]
     7f6:	687b      	ldr	r3, [r7, #4]
     7f8:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
     7fc:	4a0a      	ldr	r2, [pc, #40]	; (828 <_ZN10AMMC_ClassD1Ev+0x40>)
     7fe:	601a      	str	r2, [r3, #0]
     800:	687b      	ldr	r3, [r7, #4]
     802:	4a0a      	ldr	r2, [pc, #40]	; (82c <_ZN10AMMC_ClassD1Ev+0x44>)
     804:	4611      	mov	r1, r2
     806:	4618      	mov	r0, r3
     808:	4b09      	ldr	r3, [pc, #36]	; (830 <_ZN10AMMC_ClassD1Ev+0x48>)
     80a:	4798      	blx	r3
     80c:	687b      	ldr	r3, [r7, #4]
     80e:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
     812:	4618      	mov	r0, r3
     814:	4b07      	ldr	r3, [pc, #28]	; (834 <_ZN10AMMC_ClassD1Ev+0x4c>)
     816:	4798      	blx	r3
{
} //~AMMC_Class
     818:	687b      	ldr	r3, [r7, #4]
     81a:	4618      	mov	r0, r3
     81c:	3708      	adds	r7, #8
     81e:	46bd      	mov	sp, r7
     820:	bd80      	pop	{r7, pc}
     822:	bf00      	nop
     824:	00017c74 	.word	0x00017c74
     828:	00017c90 	.word	0x00017c90
     82c:	00017c9c 	.word	0x00017c9c
     830:	00010bf1 	.word	0x00010bf1
     834:	00010751 	.word	0x00010751

00000838 <_ZN10AMMC_ClassD0Ev>:
AMMC_Class::~AMMC_Class()
     838:	b580      	push	{r7, lr}
     83a:	b082      	sub	sp, #8
     83c:	af00      	add	r7, sp, #0
     83e:	6078      	str	r0, [r7, #4]
} //~AMMC_Class
     840:	6878      	ldr	r0, [r7, #4]
     842:	4b06      	ldr	r3, [pc, #24]	; (85c <_ZN10AMMC_ClassD0Ev+0x24>)
     844:	4798      	blx	r3
     846:	f44f 713c 	mov.w	r1, #752	; 0x2f0
     84a:	6878      	ldr	r0, [r7, #4]
     84c:	4b04      	ldr	r3, [pc, #16]	; (860 <_ZN10AMMC_ClassD0Ev+0x28>)
     84e:	4798      	blx	r3
     850:	687b      	ldr	r3, [r7, #4]
     852:	4618      	mov	r0, r3
     854:	3708      	adds	r7, #8
     856:	46bd      	mov	sp, r7
     858:	bd80      	pop	{r7, pc}
     85a:	bf00      	nop
     85c:	000007e9 	.word	0x000007e9
     860:	000159b1 	.word	0x000159b1

00000864 <_Z41__static_initialization_and_destruction_0ii>:
	return	selected;
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     864:	b580      	push	{r7, lr}
     866:	b082      	sub	sp, #8
     868:	af00      	add	r7, sp, #0
     86a:	6078      	str	r0, [r7, #4]
     86c:	6039      	str	r1, [r7, #0]
     86e:	687b      	ldr	r3, [r7, #4]
     870:	2b01      	cmp	r3, #1
     872:	d114      	bne.n	89e <_Z41__static_initialization_and_destruction_0ii+0x3a>
     874:	683b      	ldr	r3, [r7, #0]
     876:	f64f 72ff 	movw	r2, #65535	; 0xffff
     87a:	4293      	cmp	r3, r2
     87c:	d10f      	bne.n	89e <_Z41__static_initialization_and_destruction_0ii+0x3a>
AMMC_Class	ammc1;
     87e:	480a      	ldr	r0, [pc, #40]	; (8a8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     880:	4b0a      	ldr	r3, [pc, #40]	; (8ac <_Z41__static_initialization_and_destruction_0ii+0x48>)
     882:	4798      	blx	r3
     884:	4a0a      	ldr	r2, [pc, #40]	; (8b0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     886:	490b      	ldr	r1, [pc, #44]	; (8b4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     888:	4807      	ldr	r0, [pc, #28]	; (8a8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     88a:	4b0b      	ldr	r3, [pc, #44]	; (8b8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     88c:	4798      	blx	r3
AMMC_Class	ammc2;
     88e:	480b      	ldr	r0, [pc, #44]	; (8bc <_Z41__static_initialization_and_destruction_0ii+0x58>)
     890:	4b06      	ldr	r3, [pc, #24]	; (8ac <_Z41__static_initialization_and_destruction_0ii+0x48>)
     892:	4798      	blx	r3
     894:	4a06      	ldr	r2, [pc, #24]	; (8b0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     896:	4907      	ldr	r1, [pc, #28]	; (8b4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     898:	4808      	ldr	r0, [pc, #32]	; (8bc <_Z41__static_initialization_and_destruction_0ii+0x58>)
     89a:	4b07      	ldr	r3, [pc, #28]	; (8b8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     89c:	4798      	blx	r3
     89e:	bf00      	nop
     8a0:	3708      	adds	r7, #8
     8a2:	46bd      	mov	sp, r7
     8a4:	bd80      	pop	{r7, pc}
     8a6:	bf00      	nop
     8a8:	2000074c 	.word	0x2000074c
     8ac:	00000799 	.word	0x00000799
     8b0:	20000000 	.word	0x20000000
     8b4:	000007e9 	.word	0x000007e9
     8b8:	000159a5 	.word	0x000159a5
     8bc:	20000a3c 	.word	0x20000a3c

000008c0 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     8c0:	b580      	push	{r7, lr}
     8c2:	af00      	add	r7, sp, #0
     8c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     8c8:	2001      	movs	r0, #1
     8ca:	4b01      	ldr	r3, [pc, #4]	; (8d0 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     8cc:	4798      	blx	r3
     8ce:	bd80      	pop	{r7, pc}
     8d0:	00000865 	.word	0x00000865

000008d4 <_ZN10CBIT_ClassC1Ev>:


#include "CBIT_Class.h"

// default constructor
CBIT_Class::CBIT_Class()
     8d4:	b480      	push	{r7}
     8d6:	b083      	sub	sp, #12
     8d8:	af00      	add	r7, sp, #0
     8da:	6078      	str	r0, [r7, #4]
{
} //CBIT_Class
     8dc:	687b      	ldr	r3, [r7, #4]
     8de:	4618      	mov	r0, r3
     8e0:	370c      	adds	r7, #12
     8e2:	46bd      	mov	sp, r7
     8e4:	bc80      	pop	{r7}
     8e6:	4770      	bx	lr

000008e8 <_ZN10CBIT_ClassD1Ev>:

// default destructor
CBIT_Class::~CBIT_Class()
     8e8:	b480      	push	{r7}
     8ea:	b083      	sub	sp, #12
     8ec:	af00      	add	r7, sp, #0
     8ee:	6078      	str	r0, [r7, #4]
{
} //~CBIT_Class
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	4618      	mov	r0, r3
     8f4:	370c      	adds	r7, #12
     8f6:	46bd      	mov	sp, r7
     8f8:	bc80      	pop	{r7}
     8fa:	4770      	bx	lr

000008fc <_ZN10CBIT_Class4IsOKEv>:

bool	CBIT_Class::IsOK(void){
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	6078      	str	r0, [r7, #4]
	return	isOK;
     904:	687b      	ldr	r3, [r7, #4]
     906:	785b      	ldrb	r3, [r3, #1]
     908:	b2db      	uxtb	r3, r3
}
     90a:	4618      	mov	r0, r3
     90c:	370c      	adds	r7, #12
     90e:	46bd      	mov	sp, r7
     910:	bc80      	pop	{r7}
     912:	4770      	bx	lr

00000914 <_Z41__static_initialization_and_destruction_0ii>:
CBIT_Class::operator bool(){
	return	isOK;
}

     914:	b580      	push	{r7, lr}
     916:	b082      	sub	sp, #8
     918:	af00      	add	r7, sp, #0
     91a:	6078      	str	r0, [r7, #4]
     91c:	6039      	str	r1, [r7, #0]
     91e:	687b      	ldr	r3, [r7, #4]
     920:	2b01      	cmp	r3, #1
     922:	d10c      	bne.n	93e <_Z41__static_initialization_and_destruction_0ii+0x2a>
     924:	683b      	ldr	r3, [r7, #0]
     926:	f64f 72ff 	movw	r2, #65535	; 0xffff
     92a:	4293      	cmp	r3, r2
     92c:	d107      	bne.n	93e <_Z41__static_initialization_and_destruction_0ii+0x2a>
     92e:	4806      	ldr	r0, [pc, #24]	; (948 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     930:	4b06      	ldr	r3, [pc, #24]	; (94c <_Z41__static_initialization_and_destruction_0ii+0x38>)
     932:	4798      	blx	r3
     934:	4a06      	ldr	r2, [pc, #24]	; (950 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     936:	4907      	ldr	r1, [pc, #28]	; (954 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     938:	4803      	ldr	r0, [pc, #12]	; (948 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     93a:	4b07      	ldr	r3, [pc, #28]	; (958 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     93c:	4798      	blx	r3
     93e:	bf00      	nop
     940:	3708      	adds	r7, #8
     942:	46bd      	mov	sp, r7
     944:	bd80      	pop	{r7, pc}
     946:	bf00      	nop
     948:	20000d30 	.word	0x20000d30
     94c:	000008d5 	.word	0x000008d5
     950:	20000000 	.word	0x20000000
     954:	000008e9 	.word	0x000008e9
     958:	000159a5 	.word	0x000159a5

0000095c <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
     95c:	b580      	push	{r7, lr}
     95e:	af00      	add	r7, sp, #0
     960:	f64f 71ff 	movw	r1, #65535	; 0xffff
     964:	2001      	movs	r0, #1
     966:	4b01      	ldr	r3, [pc, #4]	; (96c <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x10>)
     968:	4798      	blx	r3
     96a:	bd80      	pop	{r7, pc}
     96c:	00000915 	.word	0x00000915

00000970 <_ZN17ConfigState_ClassC1Ev>:
	
};


// default constructor
ConfigState_Class::ConfigState_Class()
     970:	b480      	push	{r7}
     972:	b083      	sub	sp, #12
     974:	af00      	add	r7, sp, #0
     976:	6078      	str	r0, [r7, #4]
     978:	4a12      	ldr	r2, [pc, #72]	; (9c4 <_ZN17ConfigState_ClassC1Ev+0x54>)
     97a:	687b      	ldr	r3, [r7, #4]
     97c:	601a      	str	r2, [r3, #0]
{
	defaultState.currentState = kGAINStateReset;
     97e:	687b      	ldr	r3, [r7, #4]
     980:	2200      	movs	r2, #0
     982:	621a      	str	r2, [r3, #32]
	defaultState.callingState = kGAINStateReset;
     984:	687b      	ldr	r3, [r7, #4]
     986:	2200      	movs	r2, #0
     988:	625a      	str	r2, [r3, #36]	; 0x24
	defaultState.internalCateringState = 0;
     98a:	687b      	ldr	r3, [r7, #4]
     98c:	2200      	movs	r2, #0
     98e:	629a      	str	r2, [r3, #40]	; 0x28
	//defaultState.targetUDC = 0.0;
	defaultState.cycleDuration = 0;
     990:	687b      	ldr	r3, [r7, #4]
     992:	2200      	movs	r2, #0
     994:	63da      	str	r2, [r3, #60]	; 0x3c
	defaultState.inStateTime = 0;
     996:	687b      	ldr	r3, [r7, #4]
     998:	2200      	movs	r2, #0
     99a:	635a      	str	r2, [r3, #52]	; 0x34
	defaultState.remainingTime = 0;
     99c:	687b      	ldr	r3, [r7, #4]
     99e:	2200      	movs	r2, #0
     9a0:	641a      	str	r2, [r3, #64]	; 0x40
	defaultState.waitingExceededTime = 0;
     9a2:	687b      	ldr	r3, [r7, #4]
     9a4:	2200      	movs	r2, #0
     9a6:	649a      	str	r2, [r3, #72]	; 0x48
	defaultState.fansOnAfterCateringCycleTime = forever;
     9a8:	4b07      	ldr	r3, [pc, #28]	; (9c8 <_ZN17ConfigState_ClassC1Ev+0x58>)
     9aa:	681a      	ldr	r2, [r3, #0]
     9ac:	687b      	ldr	r3, [r7, #4]
     9ae:	64da      	str	r2, [r3, #76]	; 0x4c
	defaultState.magic=0xCAFEBABE;
     9b0:	687b      	ldr	r3, [r7, #4]
     9b2:	4a06      	ldr	r2, [pc, #24]	; (9cc <_ZN17ConfigState_ClassC1Ev+0x5c>)
     9b4:	605a      	str	r2, [r3, #4]
} //ConfigState_Class
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	4618      	mov	r0, r3
     9ba:	370c      	adds	r7, #12
     9bc:	46bd      	mov	sp, r7
     9be:	bc80      	pop	{r7}
     9c0:	4770      	bx	lr
     9c2:	bf00      	nop
     9c4:	000180b4 	.word	0x000180b4
     9c8:	00019890 	.word	0x00019890
     9cc:	cafebabe 	.word	0xcafebabe

000009d0 <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
     9d0:	b480      	push	{r7}
     9d2:	b083      	sub	sp, #12
     9d4:	af00      	add	r7, sp, #0
     9d6:	6078      	str	r0, [r7, #4]
     9d8:	4a04      	ldr	r2, [pc, #16]	; (9ec <_ZN17ConfigState_ClassD1Ev+0x1c>)
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	601a      	str	r2, [r3, #0]
{
} //~ConfigState_Class
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4618      	mov	r0, r3
     9e2:	370c      	adds	r7, #12
     9e4:	46bd      	mov	sp, r7
     9e6:	bc80      	pop	{r7}
     9e8:	4770      	bx	lr
     9ea:	bf00      	nop
     9ec:	000180b4 	.word	0x000180b4

000009f0 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb>:

void ConfigState_Class::SetFactoryDefaults(uint32_t subPartNumber, bool config, bool cycles)
{
     9f0:	b580      	push	{r7, lr}
     9f2:	b084      	sub	sp, #16
     9f4:	af00      	add	r7, sp, #0
     9f6:	60f8      	str	r0, [r7, #12]
     9f8:	60b9      	str	r1, [r7, #8]
     9fa:	4611      	mov	r1, r2
     9fc:	461a      	mov	r2, r3
     9fe:	460b      	mov	r3, r1
     a00:	71fb      	strb	r3, [r7, #7]
     a02:	4613      	mov	r3, r2
     a04:	71bb      	strb	r3, [r7, #6]
	
	if (config)
     a06:	79fb      	ldrb	r3, [r7, #7]
     a08:	2b00      	cmp	r3, #0
     a0a:	d00f      	beq.n	a2c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x3c>
	{
		memcpy(&configuration, &factoryDefaultsConfiguration, sizeof(configuration));
     a0c:	68fb      	ldr	r3, [r7, #12]
     a0e:	3364      	adds	r3, #100	; 0x64
     a10:	22ac      	movs	r2, #172	; 0xac
     a12:	4908      	ldr	r1, [pc, #32]	; (a34 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x44>)
     a14:	4618      	mov	r0, r3
     a16:	4b08      	ldr	r3, [pc, #32]	; (a38 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x48>)
     a18:	4798      	blx	r3
		configuration.commons.subPartNumber = subPartNumber;
     a1a:	68fb      	ldr	r3, [r7, #12]
     a1c:	68ba      	ldr	r2, [r7, #8]
     a1e:	671a      	str	r2, [r3, #112]	; 0x70
		memory.writeConfigurationDataArea(configuration);
     a20:	68fb      	ldr	r3, [r7, #12]
     a22:	3364      	adds	r3, #100	; 0x64
     a24:	4619      	mov	r1, r3
     a26:	4805      	ldr	r0, [pc, #20]	; (a3c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x4c>)
     a28:	4b05      	ldr	r3, [pc, #20]	; (a40 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x50>)
     a2a:	4798      	blx	r3
	}
	
	
}
     a2c:	bf00      	nop
     a2e:	3710      	adds	r7, #16
     a30:	46bd      	mov	sp, r7
     a32:	bd80      	pop	{r7, pc}
     a34:	00017d10 	.word	0x00017d10
     a38:	000177d9 	.word	0x000177d9
     a3c:	2000135c 	.word	0x2000135c
     a40:	00001da9 	.word	0x00001da9

00000a44 <_ZN17ConfigState_Class15SetInitialStateEv>:


uint32_t ConfigState_Class::SetInitialState(){
     a44:	b580      	push	{r7, lr}
     a46:	b084      	sub	sp, #16
     a48:	af00      	add	r7, sp, #0
     a4a:	6078      	str	r0, [r7, #4]
		uint32_t	r;
		r=memory.ReadApplicationState(lastState);
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
     a52:	4619      	mov	r1, r3
     a54:	4823      	ldr	r0, [pc, #140]	; (ae4 <_ZN17ConfigState_Class15SetInitialStateEv+0xa0>)
     a56:	4b24      	ldr	r3, [pc, #144]	; (ae8 <_ZN17ConfigState_Class15SetInitialStateEv+0xa4>)
     a58:	4798      	blx	r3
     a5a:	60f8      	str	r0, [r7, #12]
		if (memory.IsStateDataValid(lastState))
     a5c:	687b      	ldr	r3, [r7, #4]
     a5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
     a62:	4619      	mov	r1, r3
     a64:	4821      	ldr	r0, [pc, #132]	; (aec <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
     a66:	4b22      	ldr	r3, [pc, #136]	; (af0 <_ZN17ConfigState_Class15SetInitialStateEv+0xac>)
     a68:	4798      	blx	r3
     a6a:	4603      	mov	r3, r0
     a6c:	2b00      	cmp	r3, #0
     a6e:	d007      	beq.n	a80 <_ZN17ConfigState_Class15SetInitialStateEv+0x3c>
		{
				hvac.SetCurrentState(lastState);
     a70:	687b      	ldr	r3, [r7, #4]
     a72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
     a76:	4619      	mov	r1, r3
     a78:	481e      	ldr	r0, [pc, #120]	; (af4 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     a7a:	4b1f      	ldr	r3, [pc, #124]	; (af8 <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
     a7c:	4798      	blx	r3
     a7e:	e02b      	b.n	ad8 <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
		} 
		else
		{	
			r=memory.ReadFastApplicationState(lastState);
     a80:	687b      	ldr	r3, [r7, #4]
     a82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
     a86:	4619      	mov	r1, r3
     a88:	481c      	ldr	r0, [pc, #112]	; (afc <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
     a8a:	4b1d      	ldr	r3, [pc, #116]	; (b00 <_ZN17ConfigState_Class15SetInitialStateEv+0xbc>)
     a8c:	4798      	blx	r3
     a8e:	60f8      	str	r0, [r7, #12]
			if (memory.IsFastStateDataValid(lastState))
     a90:	687b      	ldr	r3, [r7, #4]
     a92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
     a96:	4619      	mov	r1, r3
     a98:	4814      	ldr	r0, [pc, #80]	; (aec <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
     a9a:	4b1a      	ldr	r3, [pc, #104]	; (b04 <_ZN17ConfigState_Class15SetInitialStateEv+0xc0>)
     a9c:	4798      	blx	r3
     a9e:	4603      	mov	r3, r0
     aa0:	2b00      	cmp	r3, #0
     aa2:	d00e      	beq.n	ac2 <_ZN17ConfigState_Class15SetInitialStateEv+0x7e>
			{
				hvac.SetCurrentState(lastState);
     aa4:	687b      	ldr	r3, [r7, #4]
     aa6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
     aaa:	4619      	mov	r1, r3
     aac:	4811      	ldr	r0, [pc, #68]	; (af4 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     aae:	4b12      	ldr	r3, [pc, #72]	; (af8 <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
     ab0:	4798      	blx	r3
				memory.SaveApplicationState(lastState);
     ab2:	687b      	ldr	r3, [r7, #4]
     ab4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
     ab8:	4619      	mov	r1, r3
     aba:	4813      	ldr	r0, [pc, #76]	; (b08 <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
     abc:	4b13      	ldr	r3, [pc, #76]	; (b0c <_ZN17ConfigState_Class15SetInitialStateEv+0xc8>)
     abe:	4798      	blx	r3
     ac0:	e00a      	b.n	ad8 <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
			} 
			else
			{
				hvac.SetDefaultState();
     ac2:	480c      	ldr	r0, [pc, #48]	; (af4 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     ac4:	4b12      	ldr	r3, [pc, #72]	; (b10 <_ZN17ConfigState_Class15SetInitialStateEv+0xcc>)
     ac6:	4798      	blx	r3
				memory.WriteValidApplicationState(hvac.defaultState);
     ac8:	4912      	ldr	r1, [pc, #72]	; (b14 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
     aca:	480f      	ldr	r0, [pc, #60]	; (b08 <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
     acc:	4b12      	ldr	r3, [pc, #72]	; (b18 <_ZN17ConfigState_Class15SetInitialStateEv+0xd4>)
     ace:	4798      	blx	r3
				memory.WriteFastCurrentState(hvac.defaultState);
     ad0:	4910      	ldr	r1, [pc, #64]	; (b14 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
     ad2:	480a      	ldr	r0, [pc, #40]	; (afc <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
     ad4:	4b11      	ldr	r3, [pc, #68]	; (b1c <_ZN17ConfigState_Class15SetInitialStateEv+0xd8>)
     ad6:	4798      	blx	r3
			}
					
		
		}

		return r;
     ad8:	68fb      	ldr	r3, [r7, #12]
	};
     ada:	4618      	mov	r0, r3
     adc:	3710      	adds	r7, #16
     ade:	46bd      	mov	sp, r7
     ae0:	bd80      	pop	{r7, pc}
     ae2:	bf00      	nop
     ae4:	200014e0 	.word	0x200014e0
     ae8:	00001bf9 	.word	0x00001bf9
     aec:	2000135c 	.word	0x2000135c
     af0:	00001fad 	.word	0x00001fad
     af4:	20002928 	.word	0x20002928
     af8:	00002d21 	.word	0x00002d21
     afc:	200014d0 	.word	0x200014d0
     b00:	00000f39 	.word	0x00000f39
     b04:	00001ff1 	.word	0x00001ff1
     b08:	20000e70 	.word	0x20000e70
     b0c:	00001855 	.word	0x00001855
     b10:	00000b21 	.word	0x00000b21
     b14:	2000292c 	.word	0x2000292c
     b18:	000017b5 	.word	0x000017b5
     b1c:	00000f81 	.word	0x00000f81

00000b20 <_ZN17ConfigState_Class15SetDefaultStateEv>:
		usb<<NEWLINE;
			
	}
	
}
void	ConfigState_Class::SetDefaultState(void){
     b20:	b580      	push	{r7, lr}
     b22:	b082      	sub	sp, #8
     b24:	af00      	add	r7, sp, #0
     b26:	6078      	str	r0, [r7, #4]
	hvac.SetCurrentState(defaultState);
     b28:	687b      	ldr	r3, [r7, #4]
     b2a:	3304      	adds	r3, #4
     b2c:	4619      	mov	r1, r3
     b2e:	4803      	ldr	r0, [pc, #12]	; (b3c <_ZN17ConfigState_Class15SetDefaultStateEv+0x1c>)
     b30:	4b03      	ldr	r3, [pc, #12]	; (b40 <_ZN17ConfigState_Class15SetDefaultStateEv+0x20>)
     b32:	4798      	blx	r3

}
     b34:	bf00      	nop
     b36:	3708      	adds	r7, #8
     b38:	46bd      	mov	sp, r7
     b3a:	bd80      	pop	{r7, pc}
     b3c:	20002928 	.word	0x20002928
     b40:	00002d21 	.word	0x00002d21

00000b44 <_ZlsIA4_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     b44:	b580      	push	{r7, lr}
     b46:	b082      	sub	sp, #8
     b48:	af00      	add	r7, sp, #0
     b4a:	6078      	str	r0, [r7, #4]
     b4c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     b4e:	6839      	ldr	r1, [r7, #0]
     b50:	6878      	ldr	r0, [r7, #4]
     b52:	4b03      	ldr	r3, [pc, #12]	; (b60 <_ZlsIA4_cER5PrintS2_RKT_+0x1c>)
     b54:	4798      	blx	r3
     b56:	687b      	ldr	r3, [r7, #4]
     b58:	4618      	mov	r0, r3
     b5a:	3708      	adds	r7, #8
     b5c:	46bd      	mov	sp, r7
     b5e:	bd80      	pop	{r7, pc}
     b60:	00014bb1 	.word	0x00014bb1

00000b64 <_ZlsImER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     b64:	b580      	push	{r7, lr}
     b66:	b082      	sub	sp, #8
     b68:	af00      	add	r7, sp, #0
     b6a:	6078      	str	r0, [r7, #4]
     b6c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     b6e:	683b      	ldr	r3, [r7, #0]
     b70:	681b      	ldr	r3, [r3, #0]
     b72:	220a      	movs	r2, #10
     b74:	4619      	mov	r1, r3
     b76:	6878      	ldr	r0, [r7, #4]
     b78:	4b03      	ldr	r3, [pc, #12]	; (b88 <_ZlsImER5PrintS1_RKT_+0x24>)
     b7a:	4798      	blx	r3
     b7c:	687b      	ldr	r3, [r7, #4]
     b7e:	4618      	mov	r0, r3
     b80:	3708      	adds	r7, #8
     b82:	46bd      	mov	sp, r7
     b84:	bd80      	pop	{r7, pc}
     b86:	bf00      	nop
     b88:	00014c1d 	.word	0x00014c1d

00000b8c <_ZN11CRC32_ClassC1Ev>:

#include "CRC32_Class.h"
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
     b8c:	b480      	push	{r7}
     b8e:	b083      	sub	sp, #12
     b90:	af00      	add	r7, sp, #0
     b92:	6078      	str	r0, [r7, #4]
{
} //CRC32_Class
     b94:	687b      	ldr	r3, [r7, #4]
     b96:	4618      	mov	r0, r3
     b98:	370c      	adds	r7, #12
     b9a:	46bd      	mov	sp, r7
     b9c:	bc80      	pop	{r7}
     b9e:	4770      	bx	lr

00000ba0 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
     ba0:	b480      	push	{r7}
     ba2:	b083      	sub	sp, #12
     ba4:	af00      	add	r7, sp, #0
     ba6:	6078      	str	r0, [r7, #4]
{
} //~CRC32_Class
     ba8:	687b      	ldr	r3, [r7, #4]
     baa:	4618      	mov	r0, r3
     bac:	370c      	adds	r7, #12
     bae:	46bd      	mov	sp, r7
     bb0:	bc80      	pop	{r7}
     bb2:	4770      	bx	lr

00000bb4 <_ZN11CRC32_Class4InitEm>:

uint32_t	CRC32_Class::Init(uint32_t refCRC/* =0xFFFFFFFF */){
     bb4:	b580      	push	{r7, lr}
     bb6:	b082      	sub	sp, #8
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
     bbc:	6039      	str	r1, [r7, #0]
	crc_sync_enable(&CRC_CALC);
     bbe:	4806      	ldr	r0, [pc, #24]	; (bd8 <_ZN11CRC32_Class4InitEm+0x24>)
     bc0:	4b06      	ldr	r3, [pc, #24]	; (bdc <_ZN11CRC32_Class4InitEm+0x28>)
     bc2:	4798      	blx	r3
	refCRC32=refCRC;
     bc4:	687b      	ldr	r3, [r7, #4]
     bc6:	683a      	ldr	r2, [r7, #0]
     bc8:	601a      	str	r2, [r3, #0]
	return	refCRC32;
     bca:	687b      	ldr	r3, [r7, #4]
     bcc:	681b      	ldr	r3, [r3, #0]
}
     bce:	4618      	mov	r0, r3
     bd0:	3708      	adds	r7, #8
     bd2:	46bd      	mov	sp, r7
     bd4:	bd80      	pop	{r7, pc}
     bd6:	bf00      	nop
     bd8:	20005144 	.word	0x20005144
     bdc:	00004995 	.word	0x00004995

00000be0 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
     be0:	b590      	push	{r4, r7, lr}
     be2:	b083      	sub	sp, #12
     be4:	af00      	add	r7, sp, #0
     be6:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
     be8:	4b07      	ldr	r3, [pc, #28]	; (c08 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
     bea:	6878      	ldr	r0, [r7, #4]
     bec:	4798      	blx	r3
     bee:	4603      	mov	r3, r0
     bf0:	460c      	mov	r4, r1
     bf2:	4618      	mov	r0, r3
     bf4:	4621      	mov	r1, r4
     bf6:	4b05      	ldr	r3, [pc, #20]	; (c0c <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x2c>)
     bf8:	4798      	blx	r3
     bfa:	4603      	mov	r3, r0
     bfc:	460c      	mov	r4, r1
     bfe:	4618      	mov	r0, r3
     c00:	4621      	mov	r1, r4
     c02:	370c      	adds	r7, #12
     c04:	46bd      	mov	sp, r7
     c06:	bd90      	pop	{r4, r7, pc}
     c08:	00016ea1 	.word	0x00016ea1
     c0c:	000159b9 	.word	0x000159b9

00000c10 <_ZN11CRC32_Class12CalculateCRCEPmm>:
	uint32_t	lenght32=(uint32_t)floor(len/4);
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
	return (crc^0xFFFFFFFF);
}

uint32_t	CRC32_Class::CalculateCRC(uint32_t *const data, const uint32_t len){
     c10:	b590      	push	{r4, r7, lr}
     c12:	b087      	sub	sp, #28
     c14:	af00      	add	r7, sp, #0
     c16:	60f8      	str	r0, [r7, #12]
     c18:	60b9      	str	r1, [r7, #8]
     c1a:	607a      	str	r2, [r7, #4]
	uint32_t	lenght32=(uint32_t)floor(len/4);
     c1c:	687b      	ldr	r3, [r7, #4]
     c1e:	089b      	lsrs	r3, r3, #2
     c20:	4618      	mov	r0, r3
     c22:	4b0f      	ldr	r3, [pc, #60]	; (c60 <_ZN11CRC32_Class12CalculateCRCEPmm+0x50>)
     c24:	4798      	blx	r3
     c26:	460a      	mov	r2, r1
     c28:	4601      	mov	r1, r0
     c2a:	4b0e      	ldr	r3, [pc, #56]	; (c64 <_ZN11CRC32_Class12CalculateCRCEPmm+0x54>)
     c2c:	4608      	mov	r0, r1
     c2e:	4611      	mov	r1, r2
     c30:	4798      	blx	r3
     c32:	4603      	mov	r3, r0
     c34:	617b      	str	r3, [r7, #20]
	uint32_t crc=Init();
     c36:	f04f 31ff 	mov.w	r1, #4294967295
     c3a:	68f8      	ldr	r0, [r7, #12]
     c3c:	4b0a      	ldr	r3, [pc, #40]	; (c68 <_ZN11CRC32_Class12CalculateCRCEPmm+0x58>)
     c3e:	4798      	blx	r3
     c40:	4603      	mov	r3, r0
     c42:	613b      	str	r3, [r7, #16]
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
     c44:	f107 0310 	add.w	r3, r7, #16
     c48:	697a      	ldr	r2, [r7, #20]
     c4a:	68b9      	ldr	r1, [r7, #8]
     c4c:	4807      	ldr	r0, [pc, #28]	; (c6c <_ZN11CRC32_Class12CalculateCRCEPmm+0x5c>)
     c4e:	4c08      	ldr	r4, [pc, #32]	; (c70 <_ZN11CRC32_Class12CalculateCRCEPmm+0x60>)
     c50:	47a0      	blx	r4
	return (crc^0xFFFFFFFF);
     c52:	693b      	ldr	r3, [r7, #16]
     c54:	43db      	mvns	r3, r3
     c56:	4618      	mov	r0, r3
     c58:	371c      	adds	r7, #28
     c5a:	46bd      	mov	sp, r7
     c5c:	bd90      	pop	{r4, r7, pc}
     c5e:	bf00      	nop
     c60:	00000be1 	.word	0x00000be1
     c64:	000174ed 	.word	0x000174ed
     c68:	00000bb5 	.word	0x00000bb5
     c6c:	20005144 	.word	0x20005144
     c70:	000049d1 	.word	0x000049d1

00000c74 <_ZN15DataLoger_ClassC1Ev>:
#include "ConfigurationData.h"
#include "MemoryStruct_Class.h"
#include "N25Q256_Class.h"

// default constructor
DataLoger_Class::DataLoger_Class()
     c74:	b580      	push	{r7, lr}
     c76:	b082      	sub	sp, #8
     c78:	af00      	add	r7, sp, #0
     c7a:	6078      	str	r0, [r7, #4]
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	4618      	mov	r0, r3
     c80:	4b06      	ldr	r3, [pc, #24]	; (c9c <_ZN15DataLoger_ClassC1Ev+0x28>)
     c82:	4798      	blx	r3
     c84:	687b      	ldr	r3, [r7, #4]
     c86:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
     c8a:	4618      	mov	r0, r3
     c8c:	4b04      	ldr	r3, [pc, #16]	; (ca0 <_ZN15DataLoger_ClassC1Ev+0x2c>)
     c8e:	4798      	blx	r3
{
} //DataLoger_Class
     c90:	687b      	ldr	r3, [r7, #4]
     c92:	4618      	mov	r0, r3
     c94:	3708      	adds	r7, #8
     c96:	46bd      	mov	sp, r7
     c98:	bd80      	pop	{r7, pc}
     c9a:	bf00      	nop
     c9c:	0001340d 	.word	0x0001340d
     ca0:	00000cd9 	.word	0x00000cd9

00000ca4 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
     ca4:	b580      	push	{r7, lr}
     ca6:	b082      	sub	sp, #8
     ca8:	af00      	add	r7, sp, #0
     caa:	6078      	str	r0, [r7, #4]
     cac:	687b      	ldr	r3, [r7, #4]
     cae:	4618      	mov	r0, r3
     cb0:	4b03      	ldr	r3, [pc, #12]	; (cc0 <_ZN15DataLoger_ClassD1Ev+0x1c>)
     cb2:	4798      	blx	r3
{
} //~DataLoger_Class
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	4618      	mov	r0, r3
     cb8:	3708      	adds	r7, #8
     cba:	46bd      	mov	sp, r7
     cbc:	bd80      	pop	{r7, pc}
     cbe:	bf00      	nop
     cc0:	00013449 	.word	0x00013449

00000cc4 <_ZN15DataLoger_Class13LogResetEventEv>:
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)PTR_CONFIG_DATA(cd),add,sizeof(dataOnMemory));
	
	return	r;
}

uint32_t	DataLoger_Class::LogResetEvent(void){
     cc4:	b480      	push	{r7}
     cc6:	b083      	sub	sp, #12
     cc8:	af00      	add	r7, sp, #0
     cca:	6078      	str	r0, [r7, #4]
	return 0;
     ccc:	2300      	movs	r3, #0
     cce:	4618      	mov	r0, r3
     cd0:	370c      	adds	r7, #12
     cd2:	46bd      	mov	sp, r7
     cd4:	bc80      	pop	{r7}
     cd6:	4770      	bx	lr

00000cd8 <_ZN11RingBufferNILi512EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
     cd8:	b580      	push	{r7, lr}
     cda:	b082      	sub	sp, #8
     cdc:	af00      	add	r7, sp, #0
     cde:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
     ce0:	687b      	ldr	r3, [r7, #4]
     ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
     ce6:	2100      	movs	r1, #0
     ce8:	4618      	mov	r0, r3
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <_ZN11RingBufferNILi512EEC1Ev+0x28>)
     cec:	4798      	blx	r3
    clear();
     cee:	6878      	ldr	r0, [r7, #4]
     cf0:	4b04      	ldr	r3, [pc, #16]	; (d04 <_ZN11RingBufferNILi512EEC1Ev+0x2c>)
     cf2:	4798      	blx	r3
}
     cf4:	687b      	ldr	r3, [r7, #4]
     cf6:	4618      	mov	r0, r3
     cf8:	3708      	adds	r7, #8
     cfa:	46bd      	mov	sp, r7
     cfc:	bd80      	pop	{r7, pc}
     cfe:	bf00      	nop
     d00:	0001790d 	.word	0x0001790d
     d04:	00000d09 	.word	0x00000d09

00000d08 <_ZN11RingBufferNILi512EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
     d08:	b480      	push	{r7}
     d0a:	b083      	sub	sp, #12
     d0c:	af00      	add	r7, sp, #0
     d0e:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
     d10:	687b      	ldr	r3, [r7, #4]
     d12:	2200      	movs	r2, #0
     d14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  _iTail = 0;
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	2200      	movs	r2, #0
     d1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
     d20:	bf00      	nop
     d22:	370c      	adds	r7, #12
     d24:	46bd      	mov	sp, r7
     d26:	bc80      	pop	{r7}
     d28:	4770      	bx	lr
	...

00000d2c <_ZN14DateTime_ClassC1Ev>:

#include "DateTime_Class.h"
#include "FastStorage_Class.h"

// default constructor
DateTime_Class::DateTime_Class()
     d2c:	b580      	push	{r7, lr}
     d2e:	b082      	sub	sp, #8
     d30:	af00      	add	r7, sp, #0
     d32:	6078      	str	r0, [r7, #4]
     d34:	687b      	ldr	r3, [r7, #4]
     d36:	33a8      	adds	r3, #168	; 0xa8
     d38:	4618      	mov	r0, r3
     d3a:	4b07      	ldr	r3, [pc, #28]	; (d58 <_ZN14DateTime_ClassC1Ev+0x2c>)
     d3c:	4798      	blx	r3
     d3e:	687b      	ldr	r3, [r7, #4]
     d40:	4618      	mov	r0, r3
     d42:	4b06      	ldr	r3, [pc, #24]	; (d5c <_ZN14DateTime_ClassC1Ev+0x30>)
     d44:	4798      	blx	r3
     d46:	4a06      	ldr	r2, [pc, #24]	; (d60 <_ZN14DateTime_ClassC1Ev+0x34>)
     d48:	687b      	ldr	r3, [r7, #4]
     d4a:	601a      	str	r2, [r3, #0]
{
} //DateTime_Class
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	4618      	mov	r0, r3
     d50:	3708      	adds	r7, #8
     d52:	46bd      	mov	sp, r7
     d54:	bd80      	pop	{r7, pc}
     d56:	bf00      	nop
     d58:	00000ecf 	.word	0x00000ecf
     d5c:	0001381d 	.word	0x0001381d
     d60:	000180c0 	.word	0x000180c0

00000d64 <_ZN14DateTime_ClassD1Ev>:

// default destructor
DateTime_Class::~DateTime_Class()
     d64:	b580      	push	{r7, lr}
     d66:	b082      	sub	sp, #8
     d68:	af00      	add	r7, sp, #0
     d6a:	6078      	str	r0, [r7, #4]
     d6c:	4a08      	ldr	r2, [pc, #32]	; (d90 <_ZN14DateTime_ClassD1Ev+0x2c>)
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	601a      	str	r2, [r3, #0]
     d72:	687b      	ldr	r3, [r7, #4]
     d74:	4618      	mov	r0, r3
     d76:	4b07      	ldr	r3, [pc, #28]	; (d94 <_ZN14DateTime_ClassD1Ev+0x30>)
     d78:	4798      	blx	r3
     d7a:	687b      	ldr	r3, [r7, #4]
     d7c:	33a8      	adds	r3, #168	; 0xa8
     d7e:	4618      	mov	r0, r3
     d80:	4b05      	ldr	r3, [pc, #20]	; (d98 <_ZN14DateTime_ClassD1Ev+0x34>)
     d82:	4798      	blx	r3
{
} //~DateTime_Class
     d84:	687b      	ldr	r3, [r7, #4]
     d86:	4618      	mov	r0, r3
     d88:	3708      	adds	r7, #8
     d8a:	46bd      	mov	sp, r7
     d8c:	bd80      	pop	{r7, pc}
     d8e:	bf00      	nop
     d90:	000180c0 	.word	0x000180c0
     d94:	0001388d 	.word	0x0001388d
     d98:	00000ee3 	.word	0x00000ee3

00000d9c <_ZN14DateTime_Class4InitEv>:

void	DateTime_Class::Init(){
     d9c:	b580      	push	{r7, lr}
     d9e:	b084      	sub	sp, #16
     da0:	af00      	add	r7, sp, #0
     da2:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&eepromMap->stack;
     da4:	4b0b      	ldr	r3, [pc, #44]	; (dd4 <_ZN14DateTime_Class4InitEv+0x38>)
     da6:	681b      	ldr	r3, [r3, #0]
     da8:	3368      	adds	r3, #104	; 0x68
     daa:	60fb      	str	r3, [r7, #12]
	calendar.SetCalendarStackAddress(add);
     dac:	68f9      	ldr	r1, [r7, #12]
     dae:	480a      	ldr	r0, [pc, #40]	; (dd8 <_ZN14DateTime_Class4InitEv+0x3c>)
     db0:	4b0a      	ldr	r3, [pc, #40]	; (ddc <_ZN14DateTime_Class4InitEv+0x40>)
     db2:	4798      	blx	r3
	uint32_t	addTimeLogs=(uint32_t)&eepromMap->timeLogs[0];
     db4:	4b07      	ldr	r3, [pc, #28]	; (dd4 <_ZN14DateTime_Class4InitEv+0x38>)
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	336c      	adds	r3, #108	; 0x6c
     dba:	60bb      	str	r3, [r7, #8]
	calendar.SetCalendarAddress(addTimeLogs);
     dbc:	68b9      	ldr	r1, [r7, #8]
     dbe:	4806      	ldr	r0, [pc, #24]	; (dd8 <_ZN14DateTime_Class4InitEv+0x3c>)
     dc0:	4b07      	ldr	r3, [pc, #28]	; (de0 <_ZN14DateTime_Class4InitEv+0x44>)
     dc2:	4798      	blx	r3
	calendar.Init();
     dc4:	4804      	ldr	r0, [pc, #16]	; (dd8 <_ZN14DateTime_Class4InitEv+0x3c>)
     dc6:	4b07      	ldr	r3, [pc, #28]	; (de4 <_ZN14DateTime_Class4InitEv+0x48>)
     dc8:	4798      	blx	r3
	
}
     dca:	bf00      	nop
     dcc:	3710      	adds	r7, #16
     dce:	46bd      	mov	sp, r7
     dd0:	bd80      	pop	{r7, pc}
     dd2:	bf00      	nop
     dd4:	20000df0 	.word	0x20000df0
     dd8:	20004ae0 	.word	0x20004ae0
     ddc:	0001418d 	.word	0x0001418d
     de0:	000141ad 	.word	0x000141ad
     de4:	000138b5 	.word	0x000138b5

00000de8 <_Z41__static_initialization_and_destruction_0ii>:

     de8:	b580      	push	{r7, lr}
     dea:	b082      	sub	sp, #8
     dec:	af00      	add	r7, sp, #0
     dee:	6078      	str	r0, [r7, #4]
     df0:	6039      	str	r1, [r7, #0]
     df2:	687b      	ldr	r3, [r7, #4]
     df4:	2b01      	cmp	r3, #1
     df6:	d10c      	bne.n	e12 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     df8:	683b      	ldr	r3, [r7, #0]
     dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
     dfe:	4293      	cmp	r3, r2
     e00:	d107      	bne.n	e12 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     e02:	4806      	ldr	r0, [pc, #24]	; (e1c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     e04:	4b06      	ldr	r3, [pc, #24]	; (e20 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     e06:	4798      	blx	r3
     e08:	4a06      	ldr	r2, [pc, #24]	; (e24 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     e0a:	4907      	ldr	r1, [pc, #28]	; (e28 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     e0c:	4803      	ldr	r0, [pc, #12]	; (e1c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     e0e:	4b07      	ldr	r3, [pc, #28]	; (e2c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     e10:	4798      	blx	r3
     e12:	bf00      	nop
     e14:	3708      	adds	r7, #8
     e16:	46bd      	mov	sp, r7
     e18:	bd80      	pop	{r7, pc}
     e1a:	bf00      	nop
     e1c:	20000d38 	.word	0x20000d38
     e20:	00000d2d 	.word	0x00000d2d
     e24:	20000000 	.word	0x20000000
     e28:	00000d65 	.word	0x00000d65
     e2c:	000159a5 	.word	0x000159a5

00000e30 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev>:
     e30:	b580      	push	{r7, lr}
     e32:	af00      	add	r7, sp, #0
     e34:	f64f 71ff 	movw	r1, #65535	; 0xffff
     e38:	2001      	movs	r0, #1
     e3a:	4b01      	ldr	r3, [pc, #4]	; (e40 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x10>)
     e3c:	4798      	blx	r3
     e3e:	bd80      	pop	{r7, pc}
     e40:	00000de9 	.word	0x00000de9

00000e44 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     e44:	b580      	push	{r7, lr}
     e46:	b082      	sub	sp, #8
     e48:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     e4a:	4b16      	ldr	r3, [pc, #88]	; (ea4 <Reset_Handler+0x60>)
     e4c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     e4e:	4b16      	ldr	r3, [pc, #88]	; (ea8 <Reset_Handler+0x64>)
     e50:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     e52:	687a      	ldr	r2, [r7, #4]
     e54:	683b      	ldr	r3, [r7, #0]
     e56:	429a      	cmp	r2, r3
     e58:	d00c      	beq.n	e74 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     e5a:	e007      	b.n	e6c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     e5c:	683b      	ldr	r3, [r7, #0]
     e5e:	1d1a      	adds	r2, r3, #4
     e60:	603a      	str	r2, [r7, #0]
     e62:	687a      	ldr	r2, [r7, #4]
     e64:	1d11      	adds	r1, r2, #4
     e66:	6079      	str	r1, [r7, #4]
     e68:	6812      	ldr	r2, [r2, #0]
     e6a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     e6c:	683b      	ldr	r3, [r7, #0]
     e6e:	4a0f      	ldr	r2, [pc, #60]	; (eac <Reset_Handler+0x68>)
     e70:	4293      	cmp	r3, r2
     e72:	d3f3      	bcc.n	e5c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     e74:	4b0e      	ldr	r3, [pc, #56]	; (eb0 <Reset_Handler+0x6c>)
     e76:	603b      	str	r3, [r7, #0]
     e78:	e004      	b.n	e84 <Reset_Handler+0x40>
                *pDest++ = 0;
     e7a:	683b      	ldr	r3, [r7, #0]
     e7c:	1d1a      	adds	r2, r3, #4
     e7e:	603a      	str	r2, [r7, #0]
     e80:	2200      	movs	r2, #0
     e82:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     e84:	683b      	ldr	r3, [r7, #0]
     e86:	4a0b      	ldr	r2, [pc, #44]	; (eb4 <Reset_Handler+0x70>)
     e88:	4293      	cmp	r3, r2
     e8a:	d3f6      	bcc.n	e7a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     e8c:	4b0a      	ldr	r3, [pc, #40]	; (eb8 <Reset_Handler+0x74>)
     e8e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     e90:	4a0a      	ldr	r2, [pc, #40]	; (ebc <Reset_Handler+0x78>)
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     e98:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     e9a:	4b09      	ldr	r3, [pc, #36]	; (ec0 <Reset_Handler+0x7c>)
     e9c:	4798      	blx	r3

        /* Branch to main function */
        main();
     e9e:	4b09      	ldr	r3, [pc, #36]	; (ec4 <Reset_Handler+0x80>)
     ea0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     ea2:	e7fe      	b.n	ea2 <Reset_Handler+0x5e>
     ea4:	00019a40 	.word	0x00019a40
     ea8:	20000000 	.word	0x20000000
     eac:	200005f4 	.word	0x200005f4
     eb0:	200005f8 	.word	0x200005f8
     eb4:	20005200 	.word	0x20005200
     eb8:	00000000 	.word	0x00000000
     ebc:	e000ed00 	.word	0xe000ed00
     ec0:	00017789 	.word	0x00017789
     ec4:	0000133d 	.word	0x0000133d

00000ec8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     ec8:	b480      	push	{r7}
     eca:	af00      	add	r7, sp, #0
        while (1) {
     ecc:	e7fe      	b.n	ecc <Dummy_Handler+0x4>

00000ece <_ZN17FastStorage_ClassC1Ev>:
#include "MemoryManagment_Class.h"

EEPROMMemoryStruct		*eepromMap=NULL;

// default constructor
FastStorage_Class::FastStorage_Class()
     ece:	b480      	push	{r7}
     ed0:	b083      	sub	sp, #12
     ed2:	af00      	add	r7, sp, #0
     ed4:	6078      	str	r0, [r7, #4]
{
} //FastStorage_Class
     ed6:	687b      	ldr	r3, [r7, #4]
     ed8:	4618      	mov	r0, r3
     eda:	370c      	adds	r7, #12
     edc:	46bd      	mov	sp, r7
     ede:	bc80      	pop	{r7}
     ee0:	4770      	bx	lr

00000ee2 <_ZN17FastStorage_ClassD1Ev>:

// default destructor
FastStorage_Class::~FastStorage_Class()
     ee2:	b480      	push	{r7}
     ee4:	b083      	sub	sp, #12
     ee6:	af00      	add	r7, sp, #0
     ee8:	6078      	str	r0, [r7, #4]
{
} //~FastStorage_Class
     eea:	687b      	ldr	r3, [r7, #4]
     eec:	4618      	mov	r0, r3
     eee:	370c      	adds	r7, #12
     ef0:	46bd      	mov	sp, r7
     ef2:	bc80      	pop	{r7}
     ef4:	4770      	bx	lr
	...

00000ef8 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv>:


uint32_t	FastStorage_Class::ReadFastCRCApplicationState(void){
     ef8:	b590      	push	{r4, r7, lr}
     efa:	b087      	sub	sp, #28
     efc:	af00      	add	r7, sp, #0
     efe:	6078      	str	r0, [r7, #4]
	uint32_t	crc,add32;
	add32=(uint32_t)&eepromMap->crcAppState;
     f00:	4b0a      	ldr	r3, [pc, #40]	; (f2c <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x34>)
     f02:	681b      	ldr	r3, [r3, #0]
     f04:	3304      	adds	r3, #4
     f06:	617b      	str	r3, [r7, #20]
	eepromAddress=(uint16_t)(0xffff&add32);
     f08:	697b      	ldr	r3, [r7, #20]
     f0a:	b29a      	uxth	r2, r3
     f0c:	687b      	ldr	r3, [r7, #4]
     f0e:	819a      	strh	r2, [r3, #12]
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(&crc),eepromAddress,sizeof(uint32_t));
     f10:	687b      	ldr	r3, [r7, #4]
     f12:	899a      	ldrh	r2, [r3, #12]
     f14:	f107 010c 	add.w	r1, r7, #12
     f18:	2304      	movs	r3, #4
     f1a:	4805      	ldr	r0, [pc, #20]	; (f30 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x38>)
     f1c:	4c05      	ldr	r4, [pc, #20]	; (f34 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x3c>)
     f1e:	47a0      	blx	r4
     f20:	6138      	str	r0, [r7, #16]
	return	crc;
     f22:	68fb      	ldr	r3, [r7, #12]
}
     f24:	4618      	mov	r0, r3
     f26:	371c      	adds	r7, #28
     f28:	46bd      	mov	sp, r7
     f2a:	bd90      	pop	{r4, r7, pc}
     f2c:	20000df0 	.word	0x20000df0
     f30:	20004830 	.word	0x20004830
     f34:	00012d0d 	.word	0x00012d0d

00000f38 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState>:
uint32_t	FastStorage_Class::ReadFastApplicationState(HVACState& hs){
     f38:	b590      	push	{r4, r7, lr}
     f3a:	b085      	sub	sp, #20
     f3c:	af00      	add	r7, sp, #0
     f3e:	6078      	str	r0, [r7, #4]
     f40:	6039      	str	r1, [r7, #0]
	uint32_t	crc,add32,r;
	add32=(uint32_t)&eepromMap->appState;
     f42:	4b0c      	ldr	r3, [pc, #48]	; (f74 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x3c>)
     f44:	681b      	ldr	r3, [r3, #0]
     f46:	3308      	adds	r3, #8
     f48:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
     f4a:	68fb      	ldr	r3, [r7, #12]
     f4c:	b29a      	uxth	r2, r3
     f4e:	687b      	ldr	r3, [r7, #4]
     f50:	819a      	strh	r2, [r3, #12]
	handlerAppState=PTR_HVAC_STATE(&hs);
     f52:	683a      	ldr	r2, [r7, #0]
     f54:	687b      	ldr	r3, [r7, #4]
     f56:	601a      	str	r2, [r3, #0]
	r=eeprom.ReadAddress((uint8_t*)handlerAppState,eepromAddress,sizeof(HVACState));
     f58:	687b      	ldr	r3, [r7, #4]
     f5a:	6819      	ldr	r1, [r3, #0]
     f5c:	687b      	ldr	r3, [r7, #4]
     f5e:	899a      	ldrh	r2, [r3, #12]
     f60:	2360      	movs	r3, #96	; 0x60
     f62:	4805      	ldr	r0, [pc, #20]	; (f78 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x40>)
     f64:	4c05      	ldr	r4, [pc, #20]	; (f7c <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x44>)
     f66:	47a0      	blx	r4
     f68:	60b8      	str	r0, [r7, #8]
	return	r;
     f6a:	68bb      	ldr	r3, [r7, #8]
}
     f6c:	4618      	mov	r0, r3
     f6e:	3714      	adds	r7, #20
     f70:	46bd      	mov	sp, r7
     f72:	bd90      	pop	{r4, r7, pc}
     f74:	20000df0 	.word	0x20000df0
     f78:	20004830 	.word	0x20004830
     f7c:	00012d0d 	.word	0x00012d0d

00000f80 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState>:
	eepromAddress=(uint16_t)(0xffff&add32);
	handlerCalendar=(PTR_DATE_TIME)(&cdt);
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(handlerCalendar),(uint8_t)eepromAddress,sizeof(calendar_date_time)*AT24MAC_BUFFER_SIZE);
	return	r;
}
uint32_t	FastStorage_Class::WriteFastCurrentState(HVACState& hs){
     f80:	b580      	push	{r7, lr}
     f82:	b084      	sub	sp, #16
     f84:	af00      	add	r7, sp, #0
     f86:	6078      	str	r0, [r7, #4]
     f88:	6039      	str	r1, [r7, #0]
	uint32_t	add32=(uint32_t)&eepromMap->appState;
     f8a:	4b12      	ldr	r3, [pc, #72]	; (fd4 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x54>)
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	3308      	adds	r3, #8
     f90:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	b29a      	uxth	r2, r3
     f96:	687b      	ldr	r3, [r7, #4]
     f98:	819a      	strh	r2, [r3, #12]
	uint32_t	w=WriteFastAppState(hs,eepromAddress);
     f9a:	687b      	ldr	r3, [r7, #4]
     f9c:	899b      	ldrh	r3, [r3, #12]
     f9e:	461a      	mov	r2, r3
     fa0:	6839      	ldr	r1, [r7, #0]
     fa2:	6878      	ldr	r0, [r7, #4]
     fa4:	4b0c      	ldr	r3, [pc, #48]	; (fd8 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x58>)
     fa6:	4798      	blx	r3
     fa8:	60b8      	str	r0, [r7, #8]
	crc32=		memory.CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
     faa:	2260      	movs	r2, #96	; 0x60
     fac:	6839      	ldr	r1, [r7, #0]
     fae:	480b      	ldr	r0, [pc, #44]	; (fdc <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x5c>)
     fb0:	4b0b      	ldr	r3, [pc, #44]	; (fe0 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x60>)
     fb2:	4798      	blx	r3
     fb4:	4602      	mov	r2, r0
     fb6:	687b      	ldr	r3, [r7, #4]
     fb8:	609a      	str	r2, [r3, #8]
	w=WriteFastCRCAppState(crc32);
     fba:	687b      	ldr	r3, [r7, #4]
     fbc:	689b      	ldr	r3, [r3, #8]
     fbe:	4619      	mov	r1, r3
     fc0:	6878      	ldr	r0, [r7, #4]
     fc2:	4b08      	ldr	r3, [pc, #32]	; (fe4 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x64>)
     fc4:	4798      	blx	r3
     fc6:	60b8      	str	r0, [r7, #8]
	return	w;
     fc8:	68bb      	ldr	r3, [r7, #8]
}
     fca:	4618      	mov	r0, r3
     fcc:	3710      	adds	r7, #16
     fce:	46bd      	mov	sp, r7
     fd0:	bd80      	pop	{r7, pc}
     fd2:	bf00      	nop
     fd4:	20000df0 	.word	0x20000df0
     fd8:	00000fe9 	.word	0x00000fe9
     fdc:	2000135c 	.word	0x2000135c
     fe0:	00000c11 	.word	0x00000c11
     fe4:	00001021 	.word	0x00001021

00000fe8 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem>:
uint32_t	FastStorage_Class::WriteFastAppState(HVACState& hs,uint32_t add){
     fe8:	b590      	push	{r4, r7, lr}
     fea:	b087      	sub	sp, #28
     fec:	af00      	add	r7, sp, #0
     fee:	60f8      	str	r0, [r7, #12]
     ff0:	60b9      	str	r1, [r7, #8]
     ff2:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
     ff4:	68ba      	ldr	r2, [r7, #8]
     ff6:	68fb      	ldr	r3, [r7, #12]
     ff8:	601a      	str	r2, [r3, #0]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)handlerAppState,(uint16_t)add,sizeof(HVACState));
     ffa:	68fb      	ldr	r3, [r7, #12]
     ffc:	6819      	ldr	r1, [r3, #0]
     ffe:	687b      	ldr	r3, [r7, #4]
    1000:	b29a      	uxth	r2, r3
    1002:	2360      	movs	r3, #96	; 0x60
    1004:	4804      	ldr	r0, [pc, #16]	; (1018 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x30>)
    1006:	4c05      	ldr	r4, [pc, #20]	; (101c <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x34>)
    1008:	47a0      	blx	r4
    100a:	6178      	str	r0, [r7, #20]
	return	w;
    100c:	697b      	ldr	r3, [r7, #20]
}
    100e:	4618      	mov	r0, r3
    1010:	371c      	adds	r7, #28
    1012:	46bd      	mov	sp, r7
    1014:	bd90      	pop	{r4, r7, pc}
    1016:	bf00      	nop
    1018:	20004830 	.word	0x20004830
    101c:	00012c09 	.word	0x00012c09

00001020 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm>:
uint32_t	FastStorage_Class::WriteFastCRCAppState(uint32_t crc){
    1020:	b590      	push	{r4, r7, lr}
    1022:	b085      	sub	sp, #20
    1024:	af00      	add	r7, sp, #0
    1026:	6078      	str	r0, [r7, #4]
    1028:	6039      	str	r1, [r7, #0]
	uint16_t	add=(uint32_t)&eepromMap->crcAppState;
    102a:	4b08      	ldr	r3, [pc, #32]	; (104c <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x2c>)
    102c:	681b      	ldr	r3, [r3, #0]
    102e:	3304      	adds	r3, #4
    1030:	81fb      	strh	r3, [r7, #14]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&crc),(uint16_t)add,sizeof(uint32_t));
    1032:	89fa      	ldrh	r2, [r7, #14]
    1034:	4639      	mov	r1, r7
    1036:	2304      	movs	r3, #4
    1038:	4805      	ldr	r0, [pc, #20]	; (1050 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x30>)
    103a:	4c06      	ldr	r4, [pc, #24]	; (1054 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x34>)
    103c:	47a0      	blx	r4
    103e:	60b8      	str	r0, [r7, #8]
	return	w;
    1040:	68bb      	ldr	r3, [r7, #8]
    1042:	4618      	mov	r0, r3
    1044:	3714      	adds	r7, #20
    1046:	46bd      	mov	sp, r7
    1048:	bd90      	pop	{r4, r7, pc}
    104a:	bf00      	nop
    104c:	20000df0 	.word	0x20000df0
    1050:	20004830 	.word	0x20004830
    1054:	00012c09 	.word	0x00012c09

00001058 <_ZN18FlapperValve_ClassC1Ev>:

#include "FlapperValve_Class.h"
#include "MCP23017_Class.h"

// default constructor
FlapperValve_Class::FlapperValve_Class()
    1058:	b480      	push	{r7}
    105a:	b083      	sub	sp, #12
    105c:	af00      	add	r7, sp, #0
    105e:	6078      	str	r0, [r7, #4]
{
} //FlapperValve_Class
    1060:	687b      	ldr	r3, [r7, #4]
    1062:	4618      	mov	r0, r3
    1064:	370c      	adds	r7, #12
    1066:	46bd      	mov	sp, r7
    1068:	bc80      	pop	{r7}
    106a:	4770      	bx	lr

0000106c <_ZN18FlapperValve_ClassD1Ev>:

// default destructor
FlapperValve_Class::~FlapperValve_Class()
    106c:	b480      	push	{r7}
    106e:	b083      	sub	sp, #12
    1070:	af00      	add	r7, sp, #0
    1072:	6078      	str	r0, [r7, #4]
{
} //~FlapperValve_Class
    1074:	687b      	ldr	r3, [r7, #4]
    1076:	4618      	mov	r0, r3
    1078:	370c      	adds	r7, #12
    107a:	46bd      	mov	sp, r7
    107c:	bc80      	pop	{r7}
    107e:	4770      	bx	lr

00001080 <_ZN18FlapperValve_Class4InitEv>:
bool	FlapperValve_Class::Init(void){
    1080:	b580      	push	{r7, lr}
    1082:	b082      	sub	sp, #8
    1084:	af00      	add	r7, sp, #0
    1086:	6078      	str	r0, [r7, #4]
		return	mcp.Init();
    1088:	4803      	ldr	r0, [pc, #12]	; (1098 <_ZN18FlapperValve_Class4InitEv+0x18>)
    108a:	4b04      	ldr	r3, [pc, #16]	; (109c <_ZN18FlapperValve_Class4InitEv+0x1c>)
    108c:	4798      	blx	r3
    108e:	4603      	mov	r3, r0
}
    1090:	4618      	mov	r0, r3
    1092:	3708      	adds	r7, #8
    1094:	46bd      	mov	sp, r7
    1096:	bd80      	pop	{r7, pc}
    1098:	2000477c 	.word	0x2000477c
    109c:	0001219d 	.word	0x0001219d

000010a0 <_Z41__static_initialization_and_destruction_0ii>:
    10a0:	b580      	push	{r7, lr}
    10a2:	b082      	sub	sp, #8
    10a4:	af00      	add	r7, sp, #0
    10a6:	6078      	str	r0, [r7, #4]
    10a8:	6039      	str	r1, [r7, #0]
    10aa:	687b      	ldr	r3, [r7, #4]
    10ac:	2b01      	cmp	r3, #1
    10ae:	d10c      	bne.n	10ca <_Z41__static_initialization_and_destruction_0ii+0x2a>
    10b0:	683b      	ldr	r3, [r7, #0]
    10b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    10b6:	4293      	cmp	r3, r2
    10b8:	d107      	bne.n	10ca <_Z41__static_initialization_and_destruction_0ii+0x2a>
    10ba:	4806      	ldr	r0, [pc, #24]	; (10d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    10bc:	4b06      	ldr	r3, [pc, #24]	; (10d8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    10be:	4798      	blx	r3
    10c0:	4a06      	ldr	r2, [pc, #24]	; (10dc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    10c2:	4907      	ldr	r1, [pc, #28]	; (10e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    10c4:	4803      	ldr	r0, [pc, #12]	; (10d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    10c6:	4b07      	ldr	r3, [pc, #28]	; (10e4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    10c8:	4798      	blx	r3
    10ca:	bf00      	nop
    10cc:	3708      	adds	r7, #8
    10ce:	46bd      	mov	sp, r7
    10d0:	bd80      	pop	{r7, pc}
    10d2:	bf00      	nop
    10d4:	20000df4 	.word	0x20000df4
    10d8:	00001059 	.word	0x00001059
    10dc:	20000000 	.word	0x20000000
    10e0:	0000106d 	.word	0x0000106d
    10e4:	000159a5 	.word	0x000159a5

000010e8 <_GLOBAL__sub_I__ZN18FlapperValve_ClassC2Ev>:
    10e8:	b580      	push	{r7, lr}
    10ea:	af00      	add	r7, sp, #0
    10ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    10f0:	2001      	movs	r0, #1
    10f2:	4b01      	ldr	r3, [pc, #4]	; (10f8 <_GLOBAL__sub_I__ZN18FlapperValve_ClassC2Ev+0x10>)
    10f4:	4798      	blx	r3
    10f6:	bd80      	pop	{r7, pc}
    10f8:	000010a1 	.word	0x000010a1

000010fc <_ZN16Interfaces_ClassC1Ev>:
#include "ALU_Class.h"
#include "Error_Labelling_Class.h"
#include "Maintenance_Tool.h"

// default constructor
Interfaces_Class::Interfaces_Class()
    10fc:	b480      	push	{r7}
    10fe:	b083      	sub	sp, #12
    1100:	af00      	add	r7, sp, #0
    1102:	6078      	str	r0, [r7, #4]
{
} //Interfaces_Class
    1104:	687b      	ldr	r3, [r7, #4]
    1106:	4618      	mov	r0, r3
    1108:	370c      	adds	r7, #12
    110a:	46bd      	mov	sp, r7
    110c:	bc80      	pop	{r7}
    110e:	4770      	bx	lr

00001110 <_ZN16Interfaces_ClassD1Ev>:

// default destructor
Interfaces_Class::~Interfaces_Class()
    1110:	b480      	push	{r7}
    1112:	b083      	sub	sp, #12
    1114:	af00      	add	r7, sp, #0
    1116:	6078      	str	r0, [r7, #4]
{
} //~Interfaces_Class
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	4618      	mov	r0, r3
    111c:	370c      	adds	r7, #12
    111e:	46bd      	mov	sp, r7
    1120:	bc80      	pop	{r7}
    1122:	4770      	bx	lr

00001124 <_ZN16Interfaces_Class4InitEv>:

bool	Interfaces_Class::Init(){
    1124:	b580      	push	{r7, lr}
    1126:	b084      	sub	sp, #16
    1128:	af00      	add	r7, sp, #0
    112a:	6078      	str	r0, [r7, #4]
	result=arinc.Init();
    112c:	4815      	ldr	r0, [pc, #84]	; (1184 <_ZN16Interfaces_Class4InitEv+0x60>)
    112e:	4b16      	ldr	r3, [pc, #88]	; (1188 <_ZN16Interfaces_Class4InitEv+0x64>)
    1130:	4798      	blx	r3
    1132:	4603      	mov	r3, r0
    1134:	461a      	mov	r2, r3
    1136:	687b      	ldr	r3, [r7, #4]
    1138:	66da      	str	r2, [r3, #108]	; 0x6c
	if (result==0x01)
    113a:	687b      	ldr	r3, [r7, #4]
    113c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    113e:	2b01      	cmp	r3, #1
    1140:	d106      	bne.n	1150 <_ZN16Interfaces_Class4InitEv+0x2c>
	{
		arinc.TrasmitSingleLabel();
    1142:	4810      	ldr	r0, [pc, #64]	; (1184 <_ZN16Interfaces_Class4InitEv+0x60>)
    1144:	4b11      	ldr	r3, [pc, #68]	; (118c <_ZN16Interfaces_Class4InitEv+0x68>)
    1146:	4798      	blx	r3
		if (maintenance.IsAppConnected())
    1148:	4811      	ldr	r0, [pc, #68]	; (1190 <_ZN16Interfaces_Class4InitEv+0x6c>)
    114a:	4b12      	ldr	r3, [pc, #72]	; (1194 <_ZN16Interfaces_Class4InitEv+0x70>)
    114c:	4798      	blx	r3
    114e:	e00e      	b.n	116e <_ZN16Interfaces_Class4InitEv+0x4a>
		{
		}
	} 
	else
	{
		alu.NotifyError(kARINCINnterfaceError,result);
    1150:	687b      	ldr	r3, [r7, #4]
    1152:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    1154:	f107 030c 	add.w	r3, r7, #12
    1158:	4611      	mov	r1, r2
    115a:	4618      	mov	r0, r3
    115c:	4b0e      	ldr	r3, [pc, #56]	; (1198 <_ZN16Interfaces_Class4InitEv+0x74>)
    115e:	4798      	blx	r3
    1160:	f107 030c 	add.w	r3, r7, #12
    1164:	461a      	mov	r2, r3
    1166:	2100      	movs	r1, #0
    1168:	480c      	ldr	r0, [pc, #48]	; (119c <_ZN16Interfaces_Class4InitEv+0x78>)
    116a:	4b0d      	ldr	r3, [pc, #52]	; (11a0 <_ZN16Interfaces_Class4InitEv+0x7c>)
    116c:	4798      	blx	r3
	}
	return result;
    116e:	687b      	ldr	r3, [r7, #4]
    1170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1172:	2b00      	cmp	r3, #0
    1174:	bf14      	ite	ne
    1176:	2301      	movne	r3, #1
    1178:	2300      	moveq	r3, #0
    117a:	b2db      	uxtb	r3, r3
}
    117c:	4618      	mov	r0, r3
    117e:	3710      	adds	r7, #16
    1180:	46bd      	mov	sp, r7
    1182:	bd80      	pop	{r7, pc}
    1184:	2000342c 	.word	0x2000342c
    1188:	00010cd1 	.word	0x00010cd1
    118c:	00010efd 	.word	0x00010efd
    1190:	20004e18 	.word	0x20004e18
    1194:	00015851 	.word	0x00015851
    1198:	000002d1 	.word	0x000002d1
    119c:	20000618 	.word	0x20000618
    11a0:	000006a9 	.word	0x000006a9

000011a4 <_ZN16Interfaces_Class26CheckInternalCommunicationEv>:
	
	return	r;
}

uint32_t Interfaces_Class::CheckInternalCommunication(void)
{
    11a4:	b580      	push	{r7, lr}
    11a6:	b084      	sub	sp, #16
    11a8:	af00      	add	r7, sp, #0
    11aa:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    11ac:	2300      	movs	r3, #0
    11ae:	60fb      	str	r3, [r7, #12]
	request.internRequest.I2CExpanderGotMessage=CheckI2CExpander(1);
    11b0:	2101      	movs	r1, #1
    11b2:	6878      	ldr	r0, [r7, #4]
    11b4:	4b09      	ldr	r3, [pc, #36]	; (11dc <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x38>)
    11b6:	4798      	blx	r3
    11b8:	4603      	mov	r3, r0
    11ba:	461a      	mov	r2, r3
    11bc:	687b      	ldr	r3, [r7, #4]
    11be:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	request.internRequest.LTC2983GotMessage=CheckLTC2983();
    11c2:	6878      	ldr	r0, [r7, #4]
    11c4:	4b06      	ldr	r3, [pc, #24]	; (11e0 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x3c>)
    11c6:	4798      	blx	r3
    11c8:	4603      	mov	r3, r0
    11ca:	461a      	mov	r2, r3
    11cc:	687b      	ldr	r3, [r7, #4]
    11ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	return	0;
    11d2:	2300      	movs	r3, #0
}
    11d4:	4618      	mov	r0, r3
    11d6:	3710      	adds	r7, #16
    11d8:	46bd      	mov	sp, r7
    11da:	bd80      	pop	{r7, pc}
    11dc:	000011e5 	.word	0x000011e5
    11e0:	0000121d 	.word	0x0000121d

000011e4 <_ZN16Interfaces_Class16CheckI2CExpanderEh>:
	request.externRequest.arinc1GotMessage=arinc.newMessageR1;
	request.externRequest.arinc1GotMessage=arinc.newMessageR2;
	request.externRequest.USBGotMessage=CheckUSBInterface();
	return	0;
}
bool	Interfaces_Class::CheckI2CExpander(uint8_t add){
    11e4:	b580      	push	{r7, lr}
    11e6:	b082      	sub	sp, #8
    11e8:	af00      	add	r7, sp, #0
    11ea:	6078      	str	r0, [r7, #4]
    11ec:	460b      	mov	r3, r1
    11ee:	70fb      	strb	r3, [r7, #3]
		if (mcp.hasChanged)
    11f0:	4b08      	ldr	r3, [pc, #32]	; (1214 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    11f2:	785b      	ldrb	r3, [r3, #1]
    11f4:	b2db      	uxtb	r3, r3
    11f6:	2b00      	cmp	r3, #0
    11f8:	d005      	beq.n	1206 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x22>
		{
			mcp.SavePorts();
    11fa:	4806      	ldr	r0, [pc, #24]	; (1214 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    11fc:	4b06      	ldr	r3, [pc, #24]	; (1218 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x34>)
    11fe:	4798      	blx	r3
			mcp.hasChanged=false;
    1200:	4b04      	ldr	r3, [pc, #16]	; (1214 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    1202:	2200      	movs	r2, #0
    1204:	705a      	strb	r2, [r3, #1]
		}
		return	mcp.hasChanged;
    1206:	4b03      	ldr	r3, [pc, #12]	; (1214 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    1208:	785b      	ldrb	r3, [r3, #1]
    120a:	b2db      	uxtb	r3, r3
}
    120c:	4618      	mov	r0, r3
    120e:	3708      	adds	r7, #8
    1210:	46bd      	mov	sp, r7
    1212:	bd80      	pop	{r7, pc}
    1214:	2000477c 	.word	0x2000477c
    1218:	000122b9 	.word	0x000122b9

0000121c <_ZN16Interfaces_Class12CheckLTC2983Ev>:
						
		}
		return	usb.connected;
}

bool	Interfaces_Class::CheckLTC2983(void){
    121c:	b580      	push	{r7, lr}
    121e:	b082      	sub	sp, #8
    1220:	af00      	add	r7, sp, #0
    1222:	6078      	str	r0, [r7, #4]
	if (temperatures.conversionFinished)
    1224:	4b15      	ldr	r3, [pc, #84]	; (127c <_ZN16Interfaces_Class12CheckLTC2983Ev+0x60>)
    1226:	7a5b      	ldrb	r3, [r3, #9]
    1228:	b2db      	uxtb	r3, r3
    122a:	2b00      	cmp	r3, #0
    122c:	d01f      	beq.n	126e <_ZN16Interfaces_Class12CheckLTC2983Ev+0x52>
	{
		for (i = 0; i <NUMBER_TEMPERATURE_CHANNELS ; i++)
    122e:	687b      	ldr	r3, [r7, #4]
    1230:	2200      	movs	r2, #0
    1232:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    1236:	687b      	ldr	r3, [r7, #4]
    1238:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    123c:	2b02      	cmp	r3, #2
    123e:	dc13      	bgt.n	1268 <_ZN16Interfaces_Class12CheckLTC2983Ev+0x4c>
		{
			temperatures.SaveChannelValue(temperatures.activeChannels[i]);
    1240:	687b      	ldr	r3, [r7, #4]
    1242:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    1246:	461a      	mov	r2, r3
    1248:	4b0c      	ldr	r3, [pc, #48]	; (127c <_ZN16Interfaces_Class12CheckLTC2983Ev+0x60>)
    124a:	4413      	add	r3, r2
    124c:	7a9b      	ldrb	r3, [r3, #10]
    124e:	4619      	mov	r1, r3
    1250:	480a      	ldr	r0, [pc, #40]	; (127c <_ZN16Interfaces_Class12CheckLTC2983Ev+0x60>)
    1252:	4b0b      	ldr	r3, [pc, #44]	; (1280 <_ZN16Interfaces_Class12CheckLTC2983Ev+0x64>)
    1254:	4798      	blx	r3
		for (i = 0; i <NUMBER_TEMPERATURE_CHANNELS ; i++)
    1256:	687b      	ldr	r3, [r7, #4]
    1258:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    125c:	3301      	adds	r3, #1
    125e:	b2da      	uxtb	r2, r3
    1260:	687b      	ldr	r3, [r7, #4]
    1262:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    1266:	e7e6      	b.n	1236 <_ZN16Interfaces_Class12CheckLTC2983Ev+0x1a>
		}
		temperatures.conversionFinished=0;
    1268:	4b04      	ldr	r3, [pc, #16]	; (127c <_ZN16Interfaces_Class12CheckLTC2983Ev+0x60>)
    126a:	2200      	movs	r2, #0
    126c:	725a      	strb	r2, [r3, #9]
	} 
	else
	{
	}
	return	temperatures.conversionFinished;
    126e:	4b03      	ldr	r3, [pc, #12]	; (127c <_ZN16Interfaces_Class12CheckLTC2983Ev+0x60>)
    1270:	7a5b      	ldrb	r3, [r3, #9]
    1272:	b2db      	uxtb	r3, r3
}
    1274:	4618      	mov	r0, r3
    1276:	3708      	adds	r7, #8
    1278:	46bd      	mov	sp, r7
    127a:	bd80      	pop	{r7, pc}
    127c:	200047c4 	.word	0x200047c4
    1280:	00012405 	.word	0x00012405

00001284 <_ZN16Interfaces_Class9GetStatusER10HVACStatus>:
	{
		
	}
	return	arinc.newMessageR1||arinc.newMessageR2;
}
uint32_t	Interfaces_Class::GetStatus(HVACStatus& s){
    1284:	b480      	push	{r7}
    1286:	b085      	sub	sp, #20
    1288:	af00      	add	r7, sp, #0
    128a:	6078      	str	r0, [r7, #4]
    128c:	6039      	str	r1, [r7, #0]
	s=status;
    128e:	683a      	ldr	r2, [r7, #0]
    1290:	687b      	ldr	r3, [r7, #4]
    1292:	3360      	adds	r3, #96	; 0x60
    1294:	e893 0003 	ldmia.w	r3, {r0, r1}
    1298:	e882 0003 	stmia.w	r2, {r0, r1}
	uint32_t	*p=(uint32_t*)(&s.statusBits);
    129c:	683b      	ldr	r3, [r7, #0]
    129e:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    12a0:	2300      	movs	r3, #0
    12a2:	60bb      	str	r3, [r7, #8]
    12a4:	68bb      	ldr	r3, [r7, #8]
    12a6:	2b03      	cmp	r3, #3
    12a8:	d812      	bhi.n	12d0 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x4c>
	{
		s.rawStatus+=(*p)&(0x01<<i);
    12aa:	683b      	ldr	r3, [r7, #0]
    12ac:	685a      	ldr	r2, [r3, #4]
    12ae:	68fb      	ldr	r3, [r7, #12]
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	2001      	movs	r0, #1
    12b4:	68b9      	ldr	r1, [r7, #8]
    12b6:	fa00 f101 	lsl.w	r1, r0, r1
    12ba:	400b      	ands	r3, r1
    12bc:	441a      	add	r2, r3
    12be:	683b      	ldr	r3, [r7, #0]
    12c0:	605a      	str	r2, [r3, #4]
		p++;
    12c2:	68fb      	ldr	r3, [r7, #12]
    12c4:	3304      	adds	r3, #4
    12c6:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    12c8:	68bb      	ldr	r3, [r7, #8]
    12ca:	3301      	adds	r3, #1
    12cc:	60bb      	str	r3, [r7, #8]
    12ce:	e7e9      	b.n	12a4 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x20>
	}
	return	status.rawStatus;
    12d0:	687b      	ldr	r3, [r7, #4]
    12d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    12d4:	4618      	mov	r0, r3
    12d6:	3714      	adds	r7, #20
    12d8:	46bd      	mov	sp, r7
    12da:	bc80      	pop	{r7}
    12dc:	4770      	bx	lr
	...

000012e0 <_Z41__static_initialization_and_destruction_0ii>:

    12e0:	b580      	push	{r7, lr}
    12e2:	b082      	sub	sp, #8
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
    12e8:	6039      	str	r1, [r7, #0]
    12ea:	687b      	ldr	r3, [r7, #4]
    12ec:	2b01      	cmp	r3, #1
    12ee:	d10c      	bne.n	130a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    12f0:	683b      	ldr	r3, [r7, #0]
    12f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12f6:	4293      	cmp	r3, r2
    12f8:	d107      	bne.n	130a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    12fa:	4806      	ldr	r0, [pc, #24]	; (1314 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    12fc:	4b06      	ldr	r3, [pc, #24]	; (1318 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    12fe:	4798      	blx	r3
    1300:	4a06      	ldr	r2, [pc, #24]	; (131c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1302:	4907      	ldr	r1, [pc, #28]	; (1320 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1304:	4803      	ldr	r0, [pc, #12]	; (1314 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1306:	4b07      	ldr	r3, [pc, #28]	; (1324 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1308:	4798      	blx	r3
    130a:	bf00      	nop
    130c:	3708      	adds	r7, #8
    130e:	46bd      	mov	sp, r7
    1310:	bd80      	pop	{r7, pc}
    1312:	bf00      	nop
    1314:	20000df8 	.word	0x20000df8
    1318:	000010fd 	.word	0x000010fd
    131c:	20000000 	.word	0x20000000
    1320:	00001111 	.word	0x00001111
    1324:	000159a5 	.word	0x000159a5

00001328 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:
    1328:	b580      	push	{r7, lr}
    132a:	af00      	add	r7, sp, #0
    132c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1330:	2001      	movs	r0, #1
    1332:	4b01      	ldr	r3, [pc, #4]	; (1338 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x10>)
    1334:	4798      	blx	r3
    1336:	bd80      	pop	{r7, pc}
    1338:	000012e1 	.word	0x000012e1

0000133c <main>:
		
	}
}

int main(void)
{
    133c:	b580      	push	{r7, lr}
    133e:	b082      	sub	sp, #8
    1340:	af00      	add	r7, sp, #0
	atmel_start_init();
    1342:	4b40      	ldr	r3, [pc, #256]	; (1444 <main+0x108>)
    1344:	4798      	blx	r3
	
	usb.Init();
    1346:	4840      	ldr	r0, [pc, #256]	; (1448 <main+0x10c>)
    1348:	4b40      	ldr	r3, [pc, #256]	; (144c <main+0x110>)
    134a:	4798      	blx	r3
	delay_ms(100);
    134c:	2064      	movs	r0, #100	; 0x64
    134e:	4b40      	ldr	r3, [pc, #256]	; (1450 <main+0x114>)
    1350:	4798      	blx	r3
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    1352:	4940      	ldr	r1, [pc, #256]	; (1454 <main+0x118>)
    1354:	483c      	ldr	r0, [pc, #240]	; (1448 <main+0x10c>)
    1356:	4b40      	ldr	r3, [pc, #256]	; (1458 <main+0x11c>)
    1358:	4798      	blx	r3
    135a:	4603      	mov	r3, r0
    135c:	493d      	ldr	r1, [pc, #244]	; (1454 <main+0x118>)
    135e:	4618      	mov	r0, r3
    1360:	4b3d      	ldr	r3, [pc, #244]	; (1458 <main+0x11c>)
    1362:	4798      	blx	r3
    1364:	4603      	mov	r3, r0
    1366:	493d      	ldr	r1, [pc, #244]	; (145c <main+0x120>)
    1368:	4618      	mov	r0, r3
    136a:	4b3d      	ldr	r3, [pc, #244]	; (1460 <main+0x124>)
    136c:	4798      	blx	r3
    136e:	4603      	mov	r3, r0
    1370:	4938      	ldr	r1, [pc, #224]	; (1454 <main+0x118>)
    1372:	4618      	mov	r0, r3
    1374:	4b38      	ldr	r3, [pc, #224]	; (1458 <main+0x11c>)
    1376:	4798      	blx	r3
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
    1378:	493a      	ldr	r1, [pc, #232]	; (1464 <main+0x128>)
    137a:	4833      	ldr	r0, [pc, #204]	; (1448 <main+0x10c>)
    137c:	4b3a      	ldr	r3, [pc, #232]	; (1468 <main+0x12c>)
    137e:	4798      	blx	r3
    1380:	4603      	mov	r3, r0
    1382:	493a      	ldr	r1, [pc, #232]	; (146c <main+0x130>)
    1384:	4618      	mov	r0, r3
    1386:	4b38      	ldr	r3, [pc, #224]	; (1468 <main+0x12c>)
    1388:	4798      	blx	r3
    138a:	4603      	mov	r3, r0
    138c:	4938      	ldr	r1, [pc, #224]	; (1470 <main+0x134>)
    138e:	4618      	mov	r0, r3
    1390:	4b38      	ldr	r3, [pc, #224]	; (1474 <main+0x138>)
    1392:	4798      	blx	r3
    1394:	4603      	mov	r3, r0
    1396:	4938      	ldr	r1, [pc, #224]	; (1478 <main+0x13c>)
    1398:	4618      	mov	r0, r3
    139a:	4b38      	ldr	r3, [pc, #224]	; (147c <main+0x140>)
    139c:	4798      	blx	r3
    139e:	4603      	mov	r3, r0
    13a0:	492c      	ldr	r1, [pc, #176]	; (1454 <main+0x118>)
    13a2:	4618      	mov	r0, r3
    13a4:	4b2c      	ldr	r3, [pc, #176]	; (1458 <main+0x11c>)
    13a6:	4798      	blx	r3
    13a8:	4603      	mov	r3, r0
    13aa:	492a      	ldr	r1, [pc, #168]	; (1454 <main+0x118>)
    13ac:	4618      	mov	r0, r3
    13ae:	4b2a      	ldr	r3, [pc, #168]	; (1458 <main+0x11c>)
    13b0:	4798      	blx	r3
	//QSPIDriverTest();
	memory.Init();
    13b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    13b6:	4832      	ldr	r0, [pc, #200]	; (1480 <main+0x144>)
    13b8:	4b32      	ldr	r3, [pc, #200]	; (1484 <main+0x148>)
    13ba:	4798      	blx	r3
	alu.Init();
    13bc:	4832      	ldr	r0, [pc, #200]	; (1488 <main+0x14c>)
    13be:	4b33      	ldr	r3, [pc, #204]	; (148c <main+0x150>)
    13c0:	4798      	blx	r3
	alu.RunController();
    13c2:	4831      	ldr	r0, [pc, #196]	; (1488 <main+0x14c>)
    13c4:	4b32      	ldr	r3, [pc, #200]	; (1490 <main+0x154>)
    13c6:	4798      	blx	r3
	usb<<"*** ALU initiated ***"<<NEWLINE;
    13c8:	4932      	ldr	r1, [pc, #200]	; (1494 <main+0x158>)
    13ca:	481f      	ldr	r0, [pc, #124]	; (1448 <main+0x10c>)
    13cc:	4b32      	ldr	r3, [pc, #200]	; (1498 <main+0x15c>)
    13ce:	4798      	blx	r3
    13d0:	4603      	mov	r3, r0
    13d2:	4920      	ldr	r1, [pc, #128]	; (1454 <main+0x118>)
    13d4:	4618      	mov	r0, r3
    13d6:	4b20      	ldr	r3, [pc, #128]	; (1458 <main+0x11c>)
    13d8:	4798      	blx	r3
	uint8_t	line= alu.GetSelectedAMMC();
    13da:	482b      	ldr	r0, [pc, #172]	; (1488 <main+0x14c>)
    13dc:	4b2f      	ldr	r3, [pc, #188]	; (149c <main+0x160>)
    13de:	4798      	blx	r3
    13e0:	4603      	mov	r3, r0
    13e2:	71fb      	strb	r3, [r7, #7]
	usb<<"Active line: "<<line<<NEWLINE;
    13e4:	492e      	ldr	r1, [pc, #184]	; (14a0 <main+0x164>)
    13e6:	4818      	ldr	r0, [pc, #96]	; (1448 <main+0x10c>)
    13e8:	4b2e      	ldr	r3, [pc, #184]	; (14a4 <main+0x168>)
    13ea:	4798      	blx	r3
    13ec:	4602      	mov	r2, r0
    13ee:	1dfb      	adds	r3, r7, #7
    13f0:	4619      	mov	r1, r3
    13f2:	4610      	mov	r0, r2
    13f4:	4b2c      	ldr	r3, [pc, #176]	; (14a8 <main+0x16c>)
    13f6:	4798      	blx	r3
    13f8:	4603      	mov	r3, r0
    13fa:	4916      	ldr	r1, [pc, #88]	; (1454 <main+0x118>)
    13fc:	4618      	mov	r0, r3
    13fe:	4b16      	ldr	r3, [pc, #88]	; (1458 <main+0x11c>)
    1400:	4798      	blx	r3
	if (!pBIT)
    1402:	482a      	ldr	r0, [pc, #168]	; (14ac <main+0x170>)
    1404:	4b2a      	ldr	r3, [pc, #168]	; (14b0 <main+0x174>)
    1406:	4798      	blx	r3
    1408:	4603      	mov	r3, r0
    140a:	f083 0301 	eor.w	r3, r3, #1
    140e:	b2db      	uxtb	r3, r3
    1410:	2b00      	cmp	r3, #0
    1412:	d004      	beq.n	141e <main+0xe2>
	{
		hvac.Stop(0);
    1414:	2100      	movs	r1, #0
    1416:	4827      	ldr	r0, [pc, #156]	; (14b4 <main+0x178>)
    1418:	4b27      	ldr	r3, [pc, #156]	; (14b8 <main+0x17c>)
    141a:	4798      	blx	r3
    141c:	e003      	b.n	1426 <main+0xea>
	} 
	else
	{
		hvac.Start(0);
    141e:	2100      	movs	r1, #0
    1420:	4824      	ldr	r0, [pc, #144]	; (14b4 <main+0x178>)
    1422:	4b26      	ldr	r3, [pc, #152]	; (14bc <main+0x180>)
    1424:	4798      	blx	r3
	}
    /* Replace with your application code */
    while (1) 
    {
		delay_ms(1000);
    1426:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    142a:	4b09      	ldr	r3, [pc, #36]	; (1450 <main+0x114>)
    142c:	4798      	blx	r3
		usb<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    142e:	490b      	ldr	r1, [pc, #44]	; (145c <main+0x120>)
    1430:	4805      	ldr	r0, [pc, #20]	; (1448 <main+0x10c>)
    1432:	4b0b      	ldr	r3, [pc, #44]	; (1460 <main+0x124>)
    1434:	4798      	blx	r3
    1436:	4603      	mov	r3, r0
    1438:	4906      	ldr	r1, [pc, #24]	; (1454 <main+0x118>)
    143a:	4618      	mov	r0, r3
    143c:	4b06      	ldr	r3, [pc, #24]	; (1458 <main+0x11c>)
    143e:	4798      	blx	r3
		delay_ms(1000);
    1440:	e7f1      	b.n	1426 <main+0xea>
    1442:	bf00      	nop
    1444:	00002eb9 	.word	0x00002eb9
    1448:	20004cc4 	.word	0x20004cc4
    144c:	00014751 	.word	0x00014751
    1450:	00004a65 	.word	0x00004a65
    1454:	0001810c 	.word	0x0001810c
    1458:	000006fd 	.word	0x000006fd
    145c:	00018144 	.word	0x00018144
    1460:	000014c1 	.word	0x000014c1
    1464:	00018168 	.word	0x00018168
    1468:	000014e1 	.word	0x000014e1
    146c:	00018174 	.word	0x00018174
    1470:	00018180 	.word	0x00018180
    1474:	00001501 	.word	0x00001501
    1478:	00018188 	.word	0x00018188
    147c:	00001521 	.word	0x00001521
    1480:	20000e70 	.word	0x20000e70
    1484:	00001671 	.word	0x00001671
    1488:	20000618 	.word	0x20000618
    148c:	00000349 	.word	0x00000349
    1490:	00000469 	.word	0x00000469
    1494:	00018194 	.word	0x00018194
    1498:	00001541 	.word	0x00001541
    149c:	000004d1 	.word	0x000004d1
    14a0:	000181ac 	.word	0x000181ac
    14a4:	00001561 	.word	0x00001561
    14a8:	000006d5 	.word	0x000006d5
    14ac:	20002914 	.word	0x20002914
    14b0:	00001cad 	.word	0x00001cad
    14b4:	20002928 	.word	0x20002928
    14b8:	00002ca9 	.word	0x00002ca9
    14bc:	000021f5 	.word	0x000021f5

000014c0 <_ZlsIA33_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    14c0:	b580      	push	{r7, lr}
    14c2:	b082      	sub	sp, #8
    14c4:	af00      	add	r7, sp, #0
    14c6:	6078      	str	r0, [r7, #4]
    14c8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    14ca:	6839      	ldr	r1, [r7, #0]
    14cc:	6878      	ldr	r0, [r7, #4]
    14ce:	4b03      	ldr	r3, [pc, #12]	; (14dc <_ZlsIA33_cER5PrintS2_RKT_+0x1c>)
    14d0:	4798      	blx	r3
    14d2:	687b      	ldr	r3, [r7, #4]
    14d4:	4618      	mov	r0, r3
    14d6:	3708      	adds	r7, #8
    14d8:	46bd      	mov	sp, r7
    14da:	bd80      	pop	{r7, pc}
    14dc:	00014bb1 	.word	0x00014bb1

000014e0 <_ZlsIA12_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    14e0:	b580      	push	{r7, lr}
    14e2:	b082      	sub	sp, #8
    14e4:	af00      	add	r7, sp, #0
    14e6:	6078      	str	r0, [r7, #4]
    14e8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    14ea:	6839      	ldr	r1, [r7, #0]
    14ec:	6878      	ldr	r0, [r7, #4]
    14ee:	4b03      	ldr	r3, [pc, #12]	; (14fc <_ZlsIA12_cER5PrintS2_RKT_+0x1c>)
    14f0:	4798      	blx	r3
    14f2:	687b      	ldr	r3, [r7, #4]
    14f4:	4618      	mov	r0, r3
    14f6:	3708      	adds	r7, #8
    14f8:	46bd      	mov	sp, r7
    14fa:	bd80      	pop	{r7, pc}
    14fc:	00014bb1 	.word	0x00014bb1

00001500 <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1500:	b580      	push	{r7, lr}
    1502:	b082      	sub	sp, #8
    1504:	af00      	add	r7, sp, #0
    1506:	6078      	str	r0, [r7, #4]
    1508:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    150a:	6839      	ldr	r1, [r7, #0]
    150c:	6878      	ldr	r0, [r7, #4]
    150e:	4b03      	ldr	r3, [pc, #12]	; (151c <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
    1510:	4798      	blx	r3
    1512:	687b      	ldr	r3, [r7, #4]
    1514:	4618      	mov	r0, r3
    1516:	3708      	adds	r7, #8
    1518:	46bd      	mov	sp, r7
    151a:	bd80      	pop	{r7, pc}
    151c:	00014bb1 	.word	0x00014bb1

00001520 <_ZlsIA9_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1520:	b580      	push	{r7, lr}
    1522:	b082      	sub	sp, #8
    1524:	af00      	add	r7, sp, #0
    1526:	6078      	str	r0, [r7, #4]
    1528:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    152a:	6839      	ldr	r1, [r7, #0]
    152c:	6878      	ldr	r0, [r7, #4]
    152e:	4b03      	ldr	r3, [pc, #12]	; (153c <_ZlsIA9_cER5PrintS2_RKT_+0x1c>)
    1530:	4798      	blx	r3
    1532:	687b      	ldr	r3, [r7, #4]
    1534:	4618      	mov	r0, r3
    1536:	3708      	adds	r7, #8
    1538:	46bd      	mov	sp, r7
    153a:	bd80      	pop	{r7, pc}
    153c:	00014bb1 	.word	0x00014bb1

00001540 <_ZlsIA22_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1540:	b580      	push	{r7, lr}
    1542:	b082      	sub	sp, #8
    1544:	af00      	add	r7, sp, #0
    1546:	6078      	str	r0, [r7, #4]
    1548:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    154a:	6839      	ldr	r1, [r7, #0]
    154c:	6878      	ldr	r0, [r7, #4]
    154e:	4b03      	ldr	r3, [pc, #12]	; (155c <_ZlsIA22_cER5PrintS2_RKT_+0x1c>)
    1550:	4798      	blx	r3
    1552:	687b      	ldr	r3, [r7, #4]
    1554:	4618      	mov	r0, r3
    1556:	3708      	adds	r7, #8
    1558:	46bd      	mov	sp, r7
    155a:	bd80      	pop	{r7, pc}
    155c:	00014bb1 	.word	0x00014bb1

00001560 <_ZlsIA14_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1560:	b580      	push	{r7, lr}
    1562:	b082      	sub	sp, #8
    1564:	af00      	add	r7, sp, #0
    1566:	6078      	str	r0, [r7, #4]
    1568:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    156a:	6839      	ldr	r1, [r7, #0]
    156c:	6878      	ldr	r0, [r7, #4]
    156e:	4b03      	ldr	r3, [pc, #12]	; (157c <_ZlsIA14_cER5PrintS2_RKT_+0x1c>)
    1570:	4798      	blx	r3
    1572:	687b      	ldr	r3, [r7, #4]
    1574:	4618      	mov	r0, r3
    1576:	3708      	adds	r7, #8
    1578:	46bd      	mov	sp, r7
    157a:	bd80      	pop	{r7, pc}
    157c:	00014bb1 	.word	0x00014bb1

00001580 <_ZN19PersistenceServicesD1Ev>:

/*
 	Dient dem Zugriff auf software customization area, hardware description area,
	heating program area und dem persistentes Speichern von aktuellem Heizzustand.
*/
class PersistenceServices: public	CRC32_Class
    1580:	b580      	push	{r7, lr}
    1582:	b082      	sub	sp, #8
    1584:	af00      	add	r7, sp, #0
    1586:	6078      	str	r0, [r7, #4]
    1588:	687b      	ldr	r3, [r7, #4]
    158a:	4618      	mov	r0, r3
    158c:	4b03      	ldr	r3, [pc, #12]	; (159c <_ZN19PersistenceServicesD1Ev+0x1c>)
    158e:	4798      	blx	r3
    1590:	687b      	ldr	r3, [r7, #4]
    1592:	4618      	mov	r0, r3
    1594:	3708      	adds	r7, #8
    1596:	46bd      	mov	sp, r7
    1598:	bd80      	pop	{r7, pc}
    159a:	bf00      	nop
    159c:	00000ba1 	.word	0x00000ba1

000015a0 <_ZN21MemoryManagment_ClassC1Ev>:
#include "MemoryManagment_Class.h"
#include "AT24MAC_Class.h"
#include "CDC_Class.h"

// default constructor
MemoryManagment_Class::MemoryManagment_Class()
    15a0:	b580      	push	{r7, lr}
    15a2:	b082      	sub	sp, #8
    15a4:	af00      	add	r7, sp, #0
    15a6:	6078      	str	r0, [r7, #4]
    15a8:	687b      	ldr	r3, [r7, #4]
    15aa:	4618      	mov	r0, r3
    15ac:	4b17      	ldr	r3, [pc, #92]	; (160c <_ZN21MemoryManagment_ClassC1Ev+0x6c>)
    15ae:	4798      	blx	r3
    15b0:	687b      	ldr	r3, [r7, #4]
    15b2:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    15b6:	4618      	mov	r0, r3
    15b8:	4b15      	ldr	r3, [pc, #84]	; (1610 <_ZN21MemoryManagment_ClassC1Ev+0x70>)
    15ba:	4798      	blx	r3
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
    15c2:	4618      	mov	r0, r3
    15c4:	4b13      	ldr	r3, [pc, #76]	; (1614 <_ZN21MemoryManagment_ClassC1Ev+0x74>)
    15c6:	4798      	blx	r3
    15c8:	687b      	ldr	r3, [r7, #4]
    15ca:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
    15ce:	4618      	mov	r0, r3
    15d0:	4b11      	ldr	r3, [pc, #68]	; (1618 <_ZN21MemoryManagment_ClassC1Ev+0x78>)
    15d2:	4798      	blx	r3
    15d4:	687b      	ldr	r3, [r7, #4]
    15d6:	f203 732c 	addw	r3, r3, #1836	; 0x72c
    15da:	4618      	mov	r0, r3
    15dc:	4b0f      	ldr	r3, [pc, #60]	; (161c <_ZN21MemoryManagment_ClassC1Ev+0x7c>)
    15de:	4798      	blx	r3
    15e0:	687b      	ldr	r3, [r7, #4]
    15e2:	2200      	movs	r2, #0
    15e4:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
{
	_currentAddress=0;
    15e8:	687b      	ldr	r3, [r7, #4]
    15ea:	2200      	movs	r2, #0
    15ec:	f8c3 294c 	str.w	r2, [r3, #2380]	; 0x94c
	head=512;
    15f0:	687b      	ldr	r3, [r7, #4]
    15f2:	f44f 7200 	mov.w	r2, #512	; 0x200
    15f6:	f8c3 2964 	str.w	r2, [r3, #2404]	; 0x964
	tail=0;
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	2200      	movs	r2, #0
    15fe:	f8c3 2968 	str.w	r2, [r3, #2408]	; 0x968

	
} //MemoryManagment_Class
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	4618      	mov	r0, r3
    1606:	3708      	adds	r7, #8
    1608:	46bd      	mov	sp, r7
    160a:	bd80      	pop	{r7, pc}
    160c:	00000c75 	.word	0x00000c75
    1610:	00001d81 	.word	0x00001d81
    1614:	00000ecf 	.word	0x00000ecf
    1618:	0000195d 	.word	0x0000195d
    161c:	00000cd9 	.word	0x00000cd9

00001620 <_ZN21MemoryManagment_ClassD1Ev>:



// default destructor
MemoryManagment_Class::~MemoryManagment_Class()
    1620:	b580      	push	{r7, lr}
    1622:	b082      	sub	sp, #8
    1624:	af00      	add	r7, sp, #0
    1626:	6078      	str	r0, [r7, #4]
    1628:	687b      	ldr	r3, [r7, #4]
    162a:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
    162e:	4618      	mov	r0, r3
    1630:	4b0b      	ldr	r3, [pc, #44]	; (1660 <_ZN21MemoryManagment_ClassD1Ev+0x40>)
    1632:	4798      	blx	r3
    1634:	687b      	ldr	r3, [r7, #4]
    1636:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
    163a:	4618      	mov	r0, r3
    163c:	4b09      	ldr	r3, [pc, #36]	; (1664 <_ZN21MemoryManagment_ClassD1Ev+0x44>)
    163e:	4798      	blx	r3
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    1646:	4618      	mov	r0, r3
    1648:	4b07      	ldr	r3, [pc, #28]	; (1668 <_ZN21MemoryManagment_ClassD1Ev+0x48>)
    164a:	4798      	blx	r3
    164c:	687b      	ldr	r3, [r7, #4]
    164e:	4618      	mov	r0, r3
    1650:	4b06      	ldr	r3, [pc, #24]	; (166c <_ZN21MemoryManagment_ClassD1Ev+0x4c>)
    1652:	4798      	blx	r3
{
} //~MemoryManagment_Class
    1654:	687b      	ldr	r3, [r7, #4]
    1656:	4618      	mov	r0, r3
    1658:	3708      	adds	r7, #8
    165a:	46bd      	mov	sp, r7
    165c:	bd80      	pop	{r7, pc}
    165e:	bf00      	nop
    1660:	00001971 	.word	0x00001971
    1664:	00000ee3 	.word	0x00000ee3
    1668:	00001581 	.word	0x00001581
    166c:	00000ca5 	.word	0x00000ca5

00001670 <_ZN21MemoryManagment_Class4InitEm>:

bool	MemoryManagment_Class::Init(uint32_t flashChipSize){
    1670:	b580      	push	{r7, lr}
    1672:	b082      	sub	sp, #8
    1674:	af00      	add	r7, sp, #0
    1676:	6078      	str	r0, [r7, #4]
    1678:	6039      	str	r1, [r7, #0]
		if (qspiFlash.Init())
    167a:	481d      	ldr	r0, [pc, #116]	; (16f0 <_ZN21MemoryManagment_Class4InitEm+0x80>)
    167c:	4b1d      	ldr	r3, [pc, #116]	; (16f4 <_ZN21MemoryManagment_Class4InitEm+0x84>)
    167e:	4798      	blx	r3
    1680:	4603      	mov	r3, r0
    1682:	2b00      	cmp	r3, #0
    1684:	d009      	beq.n	169a <_ZN21MemoryManagment_Class4InitEm+0x2a>
		{
			usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
    1686:	491c      	ldr	r1, [pc, #112]	; (16f8 <_ZN21MemoryManagment_Class4InitEm+0x88>)
    1688:	481c      	ldr	r0, [pc, #112]	; (16fc <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    168a:	4b1d      	ldr	r3, [pc, #116]	; (1700 <_ZN21MemoryManagment_Class4InitEm+0x90>)
    168c:	4798      	blx	r3
    168e:	4603      	mov	r3, r0
    1690:	491c      	ldr	r1, [pc, #112]	; (1704 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    1692:	4618      	mov	r0, r3
    1694:	4b1c      	ldr	r3, [pc, #112]	; (1708 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    1696:	4798      	blx	r3
    1698:	e008      	b.n	16ac <_ZN21MemoryManagment_Class4InitEm+0x3c>
		} 
		else
		{
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
    169a:	491c      	ldr	r1, [pc, #112]	; (170c <_ZN21MemoryManagment_Class4InitEm+0x9c>)
    169c:	4817      	ldr	r0, [pc, #92]	; (16fc <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    169e:	4b18      	ldr	r3, [pc, #96]	; (1700 <_ZN21MemoryManagment_Class4InitEm+0x90>)
    16a0:	4798      	blx	r3
    16a2:	4603      	mov	r3, r0
    16a4:	4917      	ldr	r1, [pc, #92]	; (1704 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    16a6:	4618      	mov	r0, r3
    16a8:	4b17      	ldr	r3, [pc, #92]	; (1708 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    16aa:	4798      	blx	r3
		}
		if (eeprom.Init())
    16ac:	4818      	ldr	r0, [pc, #96]	; (1710 <_ZN21MemoryManagment_Class4InitEm+0xa0>)
    16ae:	4b19      	ldr	r3, [pc, #100]	; (1714 <_ZN21MemoryManagment_Class4InitEm+0xa4>)
    16b0:	4798      	blx	r3
    16b2:	4603      	mov	r3, r0
    16b4:	2b00      	cmp	r3, #0
    16b6:	d009      	beq.n	16cc <_ZN21MemoryManagment_Class4InitEm+0x5c>
		{
			usb<<"EEPROM Memory SelfTest PASSED"<<NEWLINE;
    16b8:	4917      	ldr	r1, [pc, #92]	; (1718 <_ZN21MemoryManagment_Class4InitEm+0xa8>)
    16ba:	4810      	ldr	r0, [pc, #64]	; (16fc <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    16bc:	4b17      	ldr	r3, [pc, #92]	; (171c <_ZN21MemoryManagment_Class4InitEm+0xac>)
    16be:	4798      	blx	r3
    16c0:	4603      	mov	r3, r0
    16c2:	4910      	ldr	r1, [pc, #64]	; (1704 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    16c4:	4618      	mov	r0, r3
    16c6:	4b10      	ldr	r3, [pc, #64]	; (1708 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    16c8:	4798      	blx	r3
    16ca:	e008      	b.n	16de <_ZN21MemoryManagment_Class4InitEm+0x6e>
		
		} 
		else
		{
			usb<<"EEPROM Memory SelfTest FAILED"<<NEWLINE;
    16cc:	4914      	ldr	r1, [pc, #80]	; (1720 <_ZN21MemoryManagment_Class4InitEm+0xb0>)
    16ce:	480b      	ldr	r0, [pc, #44]	; (16fc <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    16d0:	4b12      	ldr	r3, [pc, #72]	; (171c <_ZN21MemoryManagment_Class4InitEm+0xac>)
    16d2:	4798      	blx	r3
    16d4:	4603      	mov	r3, r0
    16d6:	490b      	ldr	r1, [pc, #44]	; (1704 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    16d8:	4618      	mov	r0, r3
    16da:	4b0b      	ldr	r3, [pc, #44]	; (1708 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    16dc:	4798      	blx	r3
		}
		
		SetChipID(flashChipSize);
    16de:	6839      	ldr	r1, [r7, #0]
    16e0:	6878      	ldr	r0, [r7, #4]
    16e2:	4b10      	ldr	r3, [pc, #64]	; (1724 <_ZN21MemoryManagment_Class4InitEm+0xb4>)
    16e4:	4798      	blx	r3
}
    16e6:	bf00      	nop
    16e8:	4618      	mov	r0, r3
    16ea:	3708      	adds	r7, #8
    16ec:	46bd      	mov	sp, r7
    16ee:	bd80      	pop	{r7, pc}
    16f0:	200048a4 	.word	0x200048a4
    16f4:	0001345d 	.word	0x0001345d
    16f8:	000181bc 	.word	0x000181bc
    16fc:	20004cc4 	.word	0x20004cc4
    1700:	000018e1 	.word	0x000018e1
    1704:	000181dc 	.word	0x000181dc
    1708:	000006fd 	.word	0x000006fd
    170c:	000181e0 	.word	0x000181e0
    1710:	20004830 	.word	0x20004830
    1714:	00012aa5 	.word	0x00012aa5
    1718:	00018200 	.word	0x00018200
    171c:	0000071d 	.word	0x0000071d
    1720:	00018220 	.word	0x00018220
    1724:	00001755 	.word	0x00001755

00001728 <_ZN21MemoryManagment_Class13_troubleshootEhb>:
 uint8_t	MemoryManagment_Class::GetErrorCode(){
	 
	 // PLease don forget to do the real impelementation
	 return	0;
 }
  void MemoryManagment_Class::_troubleshoot(uint8_t _code, bool printoverride) {
    1728:	b580      	push	{r7, lr}
    172a:	b082      	sub	sp, #8
    172c:	af00      	add	r7, sp, #0
    172e:	6078      	str	r0, [r7, #4]
    1730:	460b      	mov	r3, r1
    1732:	70fb      	strb	r3, [r7, #3]
    1734:	4613      	mov	r3, r2
    1736:	70bb      	strb	r3, [r7, #2]
	  diagnostics.troubleshoot(_code, printoverride);
    1738:	78ba      	ldrb	r2, [r7, #2]
    173a:	78fb      	ldrb	r3, [r7, #3]
    173c:	4619      	mov	r1, r3
    173e:	4803      	ldr	r0, [pc, #12]	; (174c <_ZN21MemoryManagment_Class13_troubleshootEhb+0x24>)
    1740:	4b03      	ldr	r3, [pc, #12]	; (1750 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x28>)
    1742:	4798      	blx	r3
  }
    1744:	bf00      	nop
    1746:	3708      	adds	r7, #8
    1748:	46bd      	mov	sp, r7
    174a:	bd80      	pop	{r7, pc}
    174c:	20003740 	.word	0x20003740
    1750:	00011a61 	.word	0x00011a61

00001754 <_ZN21MemoryManagment_Class9SetChipIDEm>:

 bool MemoryManagment_Class::SetChipID(uint32_t flashChipSize) {
    1754:	b580      	push	{r7, lr}
    1756:	b082      	sub	sp, #8
    1758:	af00      	add	r7, sp, #0
    175a:	6078      	str	r0, [r7, #4]
    175c:	6039      	str	r1, [r7, #0]
	 //set some default values

	 logArea.capacity =GetMemoryCapacity();
    175e:	687b      	ldr	r3, [r7, #4]
    1760:	4618      	mov	r0, r3
    1762:	4b12      	ldr	r3, [pc, #72]	; (17ac <_ZN21MemoryManagment_Class9SetChipIDEm+0x58>)
    1764:	4798      	blx	r3
    1766:	4602      	mov	r2, r0
    1768:	687b      	ldr	r3, [r7, #4]
    176a:	f8c3 2958 	str.w	r2, [r3, #2392]	; 0x958


	 if (!logArea.capacity) {
    176e:	687b      	ldr	r3, [r7, #4]
    1770:	f8d3 3958 	ldr.w	r3, [r3, #2392]	; 0x958
    1774:	2b00      	cmp	r3, #0
    1776:	d113      	bne.n	17a0 <_ZN21MemoryManagment_Class9SetChipIDEm+0x4c>
		 #ifdef RUNDIAGNOSTIC
		 usb.println(F("Chip capacity cannot be identified"));
		 #endif
		 if (flashChipSize) {
    1778:	683b      	ldr	r3, [r7, #0]
    177a:	2b00      	cmp	r3, #0
    177c:	d009      	beq.n	1792 <_ZN21MemoryManagment_Class9SetChipIDEm+0x3e>
			 // If a custom chip size is defined
			 #ifdef RUNDIAGNOSTIC
			 usb.println(F("Custom Chipsize defined"));
			 #endif
			 logArea.capacity = flashChipSize;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	683a      	ldr	r2, [r7, #0]
    1782:	f8c3 2958 	str.w	r2, [r3, #2392]	; 0x958
			 logArea.supported = false;
    1786:	687b      	ldr	r3, [r7, #4]
    1788:	2200      	movs	r2, #0
    178a:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
			 return true;
    178e:	2301      	movs	r3, #1
    1790:	e007      	b.n	17a2 <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

		 else {
			 _troubleshoot(UNKNOWNCAP);
    1792:	2200      	movs	r2, #0
    1794:	2103      	movs	r1, #3
    1796:	6878      	ldr	r0, [r7, #4]
    1798:	4b05      	ldr	r3, [pc, #20]	; (17b0 <_ZN21MemoryManagment_Class9SetChipIDEm+0x5c>)
    179a:	4798      	blx	r3
			 return false;
    179c:	2300      	movs	r3, #0
    179e:	e000      	b.n	17a2 <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

	 }
	 return true;
    17a0:	2301      	movs	r3, #1
 }
    17a2:	4618      	mov	r0, r3
    17a4:	3708      	adds	r7, #8
    17a6:	46bd      	mov	sp, r7
    17a8:	bd80      	pop	{r7, pc}
    17aa:	bf00      	nop
    17ac:	000135dd 	.word	0x000135dd
    17b0:	00001729 	.word	0x00001729

000017b4 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState>:
	handlerAppState=PTR_HVAC_STATE(&as);
	uint32_t	add=(uint32_t )(&flashMap->hvacDefaultState);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
	return	r;
}
 uint32_t	MemoryManagment_Class::WriteValidApplicationState(HVACState& hs ){
    17b4:	b580      	push	{r7, lr}
    17b6:	b084      	sub	sp, #16
    17b8:	af00      	add	r7, sp, #0
    17ba:	6078      	str	r0, [r7, #4]
    17bc:	6039      	str	r1, [r7, #0]
	uint32_t w=  WriteCurrentState(hs);
    17be:	687b      	ldr	r3, [r7, #4]
    17c0:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
    17c4:	6839      	ldr	r1, [r7, #0]
    17c6:	4618      	mov	r0, r3
    17c8:	4b0f      	ldr	r3, [pc, #60]	; (1808 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x54>)
    17ca:	4798      	blx	r3
    17cc:	60f8      	str	r0, [r7, #12]
	crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    17ce:	687b      	ldr	r3, [r7, #4]
    17d0:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    17d4:	2260      	movs	r2, #96	; 0x60
    17d6:	6839      	ldr	r1, [r7, #0]
    17d8:	4618      	mov	r0, r3
    17da:	4b0c      	ldr	r3, [pc, #48]	; (180c <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x58>)
    17dc:	4798      	blx	r3
    17de:	4602      	mov	r2, r0
    17e0:	687b      	ldr	r3, [r7, #4]
    17e2:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	w=WriteCRCAppState(crc32);
    17e6:	687b      	ldr	r3, [r7, #4]
    17e8:	f503 62ce 	add.w	r2, r3, #1648	; 0x670
    17ec:	687b      	ldr	r3, [r7, #4]
    17ee:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
    17f2:	4619      	mov	r1, r3
    17f4:	4610      	mov	r0, r2
    17f6:	4b06      	ldr	r3, [pc, #24]	; (1810 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x5c>)
    17f8:	4798      	blx	r3
    17fa:	60f8      	str	r0, [r7, #12]
	return	w;
    17fc:	68fb      	ldr	r3, [r7, #12]
 }
    17fe:	4618      	mov	r0, r3
    1800:	3710      	adds	r7, #16
    1802:	46bd      	mov	sp, r7
    1804:	bd80      	pop	{r7, pc}
    1806:	bf00      	nop
    1808:	00001b59 	.word	0x00001b59
    180c:	00000c11 	.word	0x00000c11
    1810:	00001bc1 	.word	0x00001bc1

00001814 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState>:
 uint32_t	MemoryManagment_Class::WriteValidConfigurationData(ConfigurationData& cd){
	 uint32_t	w=WriteCurrentConfigurationData(cd);
	 crc32=CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(ConfigurationData));
	 w=WriteCRCConfigurationData(crc32);
 };
 uint32_t	MemoryManagment_Class::SaveCurrentState(HVACState& hs){
    1814:	b580      	push	{r7, lr}
    1816:	b084      	sub	sp, #16
    1818:	af00      	add	r7, sp, #0
    181a:	6078      	str	r0, [r7, #4]
    181c:	6039      	str	r1, [r7, #0]
	 uint32_t	add=(uint32_t)&flashMap->hvacState;
    181e:	4b0b      	ldr	r3, [pc, #44]	; (184c <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x38>)
    1820:	681b      	ldr	r3, [r3, #0]
    1822:	33cc      	adds	r3, #204	; 0xcc
    1824:	60fb      	str	r3, [r7, #12]
	 uint32_t	bufferAddres=((uint32_t)&flashBuffer);
    1826:	687b      	ldr	r3, [r7, #4]
    1828:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
    182c:	60bb      	str	r3, [r7, #8]
	 bufferAddres+=add;
    182e:	68ba      	ldr	r2, [r7, #8]
    1830:	68fb      	ldr	r3, [r7, #12]
    1832:	4413      	add	r3, r2
    1834:	60bb      	str	r3, [r7, #8]
	 memcpy((void*)bufferAddres,&hs,sizeof(HVACState));
    1836:	68bb      	ldr	r3, [r7, #8]
    1838:	2260      	movs	r2, #96	; 0x60
    183a:	6839      	ldr	r1, [r7, #0]
    183c:	4618      	mov	r0, r3
    183e:	4b04      	ldr	r3, [pc, #16]	; (1850 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x3c>)
    1840:	4798      	blx	r3
	 return	bufferAddres;
    1842:	68bb      	ldr	r3, [r7, #8]
 }
    1844:	4618      	mov	r0, r3
    1846:	3710      	adds	r7, #16
    1848:	46bd      	mov	sp, r7
    184a:	bd80      	pop	{r7, pc}
    184c:	20002910 	.word	0x20002910
    1850:	000177d9 	.word	0x000177d9

00001854 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState>:
uint32_t	MemoryManagment_Class::SaveApplicationState(HVACState& hs ){
    1854:	b580      	push	{r7, lr}
    1856:	b084      	sub	sp, #16
    1858:	af00      	add	r7, sp, #0
    185a:	6078      	str	r0, [r7, #4]
    185c:	6039      	str	r1, [r7, #0]
	  uint32_t w=  SaveCurrentState(hs);
    185e:	6839      	ldr	r1, [r7, #0]
    1860:	6878      	ldr	r0, [r7, #4]
    1862:	4b0e      	ldr	r3, [pc, #56]	; (189c <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x48>)
    1864:	4798      	blx	r3
    1866:	60f8      	str	r0, [r7, #12]
	  crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    1868:	687b      	ldr	r3, [r7, #4]
    186a:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    186e:	2260      	movs	r2, #96	; 0x60
    1870:	6839      	ldr	r1, [r7, #0]
    1872:	4618      	mov	r0, r3
    1874:	4b0a      	ldr	r3, [pc, #40]	; (18a0 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x4c>)
    1876:	4798      	blx	r3
    1878:	4602      	mov	r2, r0
    187a:	687b      	ldr	r3, [r7, #4]
    187c:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	  w=SaveCRCAppState(crc32);
    1880:	687b      	ldr	r3, [r7, #4]
    1882:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
    1886:	4619      	mov	r1, r3
    1888:	6878      	ldr	r0, [r7, #4]
    188a:	4b06      	ldr	r3, [pc, #24]	; (18a4 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x50>)
    188c:	4798      	blx	r3
    188e:	60f8      	str	r0, [r7, #12]
	  return	w;
    1890:	68fb      	ldr	r3, [r7, #12]
  }
    1892:	4618      	mov	r0, r3
    1894:	3710      	adds	r7, #16
    1896:	46bd      	mov	sp, r7
    1898:	bd80      	pop	{r7, pc}
    189a:	bf00      	nop
    189c:	00001815 	.word	0x00001815
    18a0:	00000c11 	.word	0x00000c11
    18a4:	000018a9 	.word	0x000018a9

000018a8 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm>:
uint32_t	MemoryManagment_Class::SaveCRCAppState(uint32_t crc){
    18a8:	b480      	push	{r7}
    18aa:	b085      	sub	sp, #20
    18ac:	af00      	add	r7, sp, #0
    18ae:	6078      	str	r0, [r7, #4]
    18b0:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->crcAppState;
    18b2:	4b0a      	ldr	r3, [pc, #40]	; (18dc <_ZN21MemoryManagment_Class15SaveCRCAppStateEm+0x34>)
    18b4:	681b      	ldr	r3, [r3, #0]
    18b6:	33cc      	adds	r3, #204	; 0xcc
    18b8:	60fb      	str	r3, [r7, #12]
	uint32_t	bufferAddres=((uint32_t)&flashBuffer)+add;
    18ba:	687b      	ldr	r3, [r7, #4]
    18bc:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
    18c0:	461a      	mov	r2, r3
    18c2:	68fb      	ldr	r3, [r7, #12]
    18c4:	4413      	add	r3, r2
    18c6:	60bb      	str	r3, [r7, #8]
	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
    18c8:	68bb      	ldr	r3, [r7, #8]
    18ca:	683a      	ldr	r2, [r7, #0]
    18cc:	601a      	str	r2, [r3, #0]
	return	bufferAddres;
    18ce:	68bb      	ldr	r3, [r7, #8]
}
    18d0:	4618      	mov	r0, r3
    18d2:	3714      	adds	r7, #20
    18d4:	46bd      	mov	sp, r7
    18d6:	bc80      	pop	{r7}
    18d8:	4770      	bx	lr
    18da:	bf00      	nop
    18dc:	20002910 	.word	0x20002910

000018e0 <_ZlsIA29_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    18e0:	b580      	push	{r7, lr}
    18e2:	b082      	sub	sp, #8
    18e4:	af00      	add	r7, sp, #0
    18e6:	6078      	str	r0, [r7, #4]
    18e8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    18ea:	6839      	ldr	r1, [r7, #0]
    18ec:	6878      	ldr	r0, [r7, #4]
    18ee:	4b03      	ldr	r3, [pc, #12]	; (18fc <_ZlsIA29_cER5PrintS2_RKT_+0x1c>)
    18f0:	4798      	blx	r3
    18f2:	687b      	ldr	r3, [r7, #4]
    18f4:	4618      	mov	r0, r3
    18f6:	3708      	adds	r7, #8
    18f8:	46bd      	mov	sp, r7
    18fa:	bd80      	pop	{r7, pc}
    18fc:	00014bb1 	.word	0x00014bb1

00001900 <_Z41__static_initialization_and_destruction_0ii>:
 
    1900:	b580      	push	{r7, lr}
    1902:	b082      	sub	sp, #8
    1904:	af00      	add	r7, sp, #0
    1906:	6078      	str	r0, [r7, #4]
    1908:	6039      	str	r1, [r7, #0]
    190a:	687b      	ldr	r3, [r7, #4]
    190c:	2b01      	cmp	r3, #1
    190e:	d10c      	bne.n	192a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1910:	683b      	ldr	r3, [r7, #0]
    1912:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1916:	4293      	cmp	r3, r2
    1918:	d107      	bne.n	192a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    191a:	4806      	ldr	r0, [pc, #24]	; (1934 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    191c:	4b06      	ldr	r3, [pc, #24]	; (1938 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    191e:	4798      	blx	r3
    1920:	4a06      	ldr	r2, [pc, #24]	; (193c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1922:	4907      	ldr	r1, [pc, #28]	; (1940 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1924:	4803      	ldr	r0, [pc, #12]	; (1934 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1926:	4b07      	ldr	r3, [pc, #28]	; (1944 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1928:	4798      	blx	r3
    192a:	bf00      	nop
    192c:	3708      	adds	r7, #8
    192e:	46bd      	mov	sp, r7
    1930:	bd80      	pop	{r7, pc}
    1932:	bf00      	nop
    1934:	20000e70 	.word	0x20000e70
    1938:	000015a1 	.word	0x000015a1
    193c:	20000000 	.word	0x20000000
    1940:	00001621 	.word	0x00001621
    1944:	000159a5 	.word	0x000159a5

00001948 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev>:
    1948:	b580      	push	{r7, lr}
    194a:	af00      	add	r7, sp, #0
    194c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1950:	2001      	movs	r0, #1
    1952:	4b01      	ldr	r3, [pc, #4]	; (1958 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x10>)
    1954:	4798      	blx	r3
    1956:	bd80      	pop	{r7, pc}
    1958:	00001901 	.word	0x00001901

0000195c <_ZN18MemoryStruct_ClassC1Ev>:
#include "MemoryManagment_Class.h"

MemoryFlashStruct	*flashMap=NULL;

// default constructor
MemoryStruct_Class::MemoryStruct_Class()
    195c:	b480      	push	{r7}
    195e:	b083      	sub	sp, #12
    1960:	af00      	add	r7, sp, #0
    1962:	6078      	str	r0, [r7, #4]
{
} //MemoryStruct_Class
    1964:	687b      	ldr	r3, [r7, #4]
    1966:	4618      	mov	r0, r3
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	bc80      	pop	{r7}
    196e:	4770      	bx	lr

00001970 <_ZN18MemoryStruct_ClassD1Ev>:

// default destructor
MemoryStruct_Class::~MemoryStruct_Class()
    1970:	b480      	push	{r7}
    1972:	b083      	sub	sp, #12
    1974:	af00      	add	r7, sp, #0
    1976:	6078      	str	r0, [r7, #4]
{
} //~MemoryStruct_Class
    1978:	687b      	ldr	r3, [r7, #4]
    197a:	4618      	mov	r0, r3
    197c:	370c      	adds	r7, #12
    197e:	46bd      	mov	sp, r7
    1980:	bc80      	pop	{r7}
    1982:	4770      	bx	lr

00001984 <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData>:

uint32_t	MemoryStruct_Class::ReadDefaultConfigurationData(ConfigurationData& cd){
    1984:	b580      	push	{r7, lr}
    1986:	b084      	sub	sp, #16
    1988:	af00      	add	r7, sp, #0
    198a:	6078      	str	r0, [r7, #4]
    198c:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->defaultConfiguration;
    198e:	4b07      	ldr	r3, [pc, #28]	; (19ac <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x28>)
    1990:	681b      	ldr	r3, [r3, #0]
    1992:	3310      	adds	r3, #16
    1994:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    1996:	68fa      	ldr	r2, [r7, #12]
    1998:	6839      	ldr	r1, [r7, #0]
    199a:	6878      	ldr	r0, [r7, #4]
    199c:	4b04      	ldr	r3, [pc, #16]	; (19b0 <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x2c>)
    199e:	4798      	blx	r3
    19a0:	60b8      	str	r0, [r7, #8]
	return	r;
    19a2:	68bb      	ldr	r3, [r7, #8]
}
    19a4:	4618      	mov	r0, r3
    19a6:	3710      	adds	r7, #16
    19a8:	46bd      	mov	sp, r7
    19aa:	bd80      	pop	{r7, pc}
    19ac:	20002910 	.word	0x20002910
    19b0:	00001a15 	.word	0x00001a15

000019b4 <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData>:
uint32_t	MemoryStruct_Class::ReadLastConfigurationData(ConfigurationData& cd){
    19b4:	b580      	push	{r7, lr}
    19b6:	b084      	sub	sp, #16
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->lastConfiguracion;
    19be:	4b07      	ldr	r3, [pc, #28]	; (19dc <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData+0x28>)
    19c0:	681b      	ldr	r3, [r3, #0]
    19c2:	3310      	adds	r3, #16
    19c4:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    19c6:	68fa      	ldr	r2, [r7, #12]
    19c8:	6839      	ldr	r1, [r7, #0]
    19ca:	6878      	ldr	r0, [r7, #4]
    19cc:	4b04      	ldr	r3, [pc, #16]	; (19e0 <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData+0x2c>)
    19ce:	4798      	blx	r3
    19d0:	60b8      	str	r0, [r7, #8]
	return	r;
    19d2:	68bb      	ldr	r3, [r7, #8]
}
    19d4:	4618      	mov	r0, r3
    19d6:	3710      	adds	r7, #16
    19d8:	46bd      	mov	sp, r7
    19da:	bd80      	pop	{r7, pc}
    19dc:	20002910 	.word	0x20002910
    19e0:	00001a15 	.word	0x00001a15

000019e4 <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData>:
uint32_t	MemoryStruct_Class::ReadUpdatedConfigurationData(ConfigurationData& cd){
    19e4:	b580      	push	{r7, lr}
    19e6:	b084      	sub	sp, #16
    19e8:	af00      	add	r7, sp, #0
    19ea:	6078      	str	r0, [r7, #4]
    19ec:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->updatedConfiguration;
    19ee:	4b07      	ldr	r3, [pc, #28]	; (1a0c <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x28>)
    19f0:	681b      	ldr	r3, [r3, #0]
    19f2:	3310      	adds	r3, #16
    19f4:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    19f6:	68fa      	ldr	r2, [r7, #12]
    19f8:	6839      	ldr	r1, [r7, #0]
    19fa:	6878      	ldr	r0, [r7, #4]
    19fc:	4b04      	ldr	r3, [pc, #16]	; (1a10 <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x2c>)
    19fe:	4798      	blx	r3
    1a00:	60b8      	str	r0, [r7, #8]
	return	r;
    1a02:	68bb      	ldr	r3, [r7, #8]
}
    1a04:	4618      	mov	r0, r3
    1a06:	3710      	adds	r7, #16
    1a08:	46bd      	mov	sp, r7
    1a0a:	bd80      	pop	{r7, pc}
    1a0c:	20002910 	.word	0x20002910
    1a10:	00001a15 	.word	0x00001a15

00001a14 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam>:

uint32_t	MemoryStruct_Class::ReadConfigurationData(ConfigurationData& cd,uint32_t add){
    1a14:	b590      	push	{r4, r7, lr}
    1a16:	b087      	sub	sp, #28
    1a18:	af00      	add	r7, sp, #0
    1a1a:	60f8      	str	r0, [r7, #12]
    1a1c:	60b9      	str	r1, [r7, #8]
    1a1e:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    1a20:	68ba      	ldr	r2, [r7, #8]
    1a22:	68fb      	ldr	r3, [r7, #12]
    1a24:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    1a28:	68fb      	ldr	r3, [r7, #12]
    1a2a:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    1a2e:	23ac      	movs	r3, #172	; 0xac
    1a30:	687a      	ldr	r2, [r7, #4]
    1a32:	4804      	ldr	r0, [pc, #16]	; (1a44 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam+0x30>)
    1a34:	4c04      	ldr	r4, [pc, #16]	; (1a48 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam+0x34>)
    1a36:	47a0      	blx	r4
    1a38:	6178      	str	r0, [r7, #20]
	return	r;
    1a3a:	697b      	ldr	r3, [r7, #20]
}
    1a3c:	4618      	mov	r0, r3
    1a3e:	371c      	adds	r7, #28
    1a40:	46bd      	mov	sp, r7
    1a42:	bd90      	pop	{r4, r7, pc}
    1a44:	200048a4 	.word	0x200048a4
    1a48:	0001352d 	.word	0x0001352d

00001a4c <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv>:

uint32_t	MemoryStruct_Class::ReadCRCConfigurationData(void){
    1a4c:	b590      	push	{r4, r7, lr}
    1a4e:	b087      	sub	sp, #28
    1a50:	af00      	add	r7, sp, #0
    1a52:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	uint32_t	add=(uint32_t)&flashMap->crcConfigData;
    1a54:	4b08      	ldr	r3, [pc, #32]	; (1a78 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x2c>)
    1a56:	681b      	ldr	r3, [r3, #0]
    1a58:	3310      	adds	r3, #16
    1a5a:	617b      	str	r3, [r7, #20]
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    1a5c:	f107 010c 	add.w	r1, r7, #12
    1a60:	2304      	movs	r3, #4
    1a62:	697a      	ldr	r2, [r7, #20]
    1a64:	4805      	ldr	r0, [pc, #20]	; (1a7c <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x30>)
    1a66:	4c06      	ldr	r4, [pc, #24]	; (1a80 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x34>)
    1a68:	47a0      	blx	r4
    1a6a:	6138      	str	r0, [r7, #16]
	return	crc;
    1a6c:	68fb      	ldr	r3, [r7, #12]
}
    1a6e:	4618      	mov	r0, r3
    1a70:	371c      	adds	r7, #28
    1a72:	46bd      	mov	sp, r7
    1a74:	bd90      	pop	{r4, r7, pc}
    1a76:	bf00      	nop
    1a78:	20002910 	.word	0x20002910
    1a7c:	200048a4 	.word	0x200048a4
    1a80:	0001352d 	.word	0x0001352d

00001a84 <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam>:
uint32_t	MemoryStruct_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
    1a84:	b590      	push	{r4, r7, lr}
    1a86:	b087      	sub	sp, #28
    1a88:	af00      	add	r7, sp, #0
    1a8a:	60f8      	str	r0, [r7, #12]
    1a8c:	60b9      	str	r1, [r7, #8]
    1a8e:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    1a90:	68ba      	ldr	r2, [r7, #8]
    1a92:	68fb      	ldr	r3, [r7, #12]
    1a94:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    1a98:	68fb      	ldr	r3, [r7, #12]
    1a9a:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    1a9e:	23ac      	movs	r3, #172	; 0xac
    1aa0:	687a      	ldr	r2, [r7, #4]
    1aa2:	4804      	ldr	r0, [pc, #16]	; (1ab4 <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam+0x30>)
    1aa4:	4c04      	ldr	r4, [pc, #16]	; (1ab8 <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam+0x34>)
    1aa6:	47a0      	blx	r4
    1aa8:	6178      	str	r0, [r7, #20]
	return	w;
    1aaa:	697b      	ldr	r3, [r7, #20]
}
    1aac:	4618      	mov	r0, r3
    1aae:	371c      	adds	r7, #28
    1ab0:	46bd      	mov	sp, r7
    1ab2:	bd90      	pop	{r4, r7, pc}
    1ab4:	200048a4 	.word	0x200048a4
    1ab8:	000134f9 	.word	0x000134f9

00001abc <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem>:
uint32_t	MemoryStruct_Class::WriteApplicationState(HVACState& hs,uint32_t add){
    1abc:	b590      	push	{r4, r7, lr}
    1abe:	b087      	sub	sp, #28
    1ac0:	af00      	add	r7, sp, #0
    1ac2:	60f8      	str	r0, [r7, #12]
    1ac4:	60b9      	str	r1, [r7, #8]
    1ac6:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    1ac8:	68ba      	ldr	r2, [r7, #8]
    1aca:	68fb      	ldr	r3, [r7, #12]
    1acc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
    1ad0:	68fb      	ldr	r3, [r7, #12]
    1ad2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    1ad6:	2360      	movs	r3, #96	; 0x60
    1ad8:	687a      	ldr	r2, [r7, #4]
    1ada:	4804      	ldr	r0, [pc, #16]	; (1aec <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem+0x30>)
    1adc:	4c04      	ldr	r4, [pc, #16]	; (1af0 <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem+0x34>)
    1ade:	47a0      	blx	r4
    1ae0:	6178      	str	r0, [r7, #20]
	return	w;
    1ae2:	697b      	ldr	r3, [r7, #20]
}
    1ae4:	4618      	mov	r0, r3
    1ae6:	371c      	adds	r7, #28
    1ae8:	46bd      	mov	sp, r7
    1aea:	bd90      	pop	{r4, r7, pc}
    1aec:	200048a4 	.word	0x200048a4
    1af0:	000134f9 	.word	0x000134f9

00001af4 <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData>:
uint32_t	MemoryStruct_Class::WriteDefaultConfiguration(ConfigurationData& cd){
    1af4:	b580      	push	{r7, lr}
    1af6:	b084      	sub	sp, #16
    1af8:	af00      	add	r7, sp, #0
    1afa:	6078      	str	r0, [r7, #4]
    1afc:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->defaultConfiguration;
    1afe:	4b07      	ldr	r3, [pc, #28]	; (1b1c <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData+0x28>)
    1b00:	681b      	ldr	r3, [r3, #0]
    1b02:	3310      	adds	r3, #16
    1b04:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteConfigurationData(cd,add);
    1b06:	68fa      	ldr	r2, [r7, #12]
    1b08:	6839      	ldr	r1, [r7, #0]
    1b0a:	6878      	ldr	r0, [r7, #4]
    1b0c:	4b04      	ldr	r3, [pc, #16]	; (1b20 <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData+0x2c>)
    1b0e:	4798      	blx	r3
    1b10:	60b8      	str	r0, [r7, #8]
	return	w;
    1b12:	68bb      	ldr	r3, [r7, #8]
}
    1b14:	4618      	mov	r0, r3
    1b16:	3710      	adds	r7, #16
    1b18:	46bd      	mov	sp, r7
    1b1a:	bd80      	pop	{r7, pc}
    1b1c:	20002910 	.word	0x20002910
    1b20:	00001a85 	.word	0x00001a85

00001b24 <_ZN18MemoryStruct_Class17WriteDefaultStateEv>:
uint32_t	MemoryStruct_Class::WriteDefaultState(void){
    1b24:	b580      	push	{r7, lr}
    1b26:	b084      	sub	sp, #16
    1b28:	af00      	add	r7, sp, #0
    1b2a:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&flashMap->hvacDefaultState;
    1b2c:	4b07      	ldr	r3, [pc, #28]	; (1b4c <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x28>)
    1b2e:	681b      	ldr	r3, [r3, #0]
    1b30:	33cc      	adds	r3, #204	; 0xcc
    1b32:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hvac.defaultState,add);
    1b34:	68fa      	ldr	r2, [r7, #12]
    1b36:	4906      	ldr	r1, [pc, #24]	; (1b50 <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x2c>)
    1b38:	6878      	ldr	r0, [r7, #4]
    1b3a:	4b06      	ldr	r3, [pc, #24]	; (1b54 <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x30>)
    1b3c:	4798      	blx	r3
    1b3e:	60b8      	str	r0, [r7, #8]
	return	w;
    1b40:	68bb      	ldr	r3, [r7, #8]
}
    1b42:	4618      	mov	r0, r3
    1b44:	3710      	adds	r7, #16
    1b46:	46bd      	mov	sp, r7
    1b48:	bd80      	pop	{r7, pc}
    1b4a:	bf00      	nop
    1b4c:	20002910 	.word	0x20002910
    1b50:	2000292c 	.word	0x2000292c
    1b54:	00001abd 	.word	0x00001abd

00001b58 <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState>:

uint32_t	MemoryStruct_Class::WriteCurrentState(HVACState& hs){
    1b58:	b580      	push	{r7, lr}
    1b5a:	b084      	sub	sp, #16
    1b5c:	af00      	add	r7, sp, #0
    1b5e:	6078      	str	r0, [r7, #4]
    1b60:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacState;
    1b62:	4b07      	ldr	r3, [pc, #28]	; (1b80 <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState+0x28>)
    1b64:	681b      	ldr	r3, [r3, #0]
    1b66:	33cc      	adds	r3, #204	; 0xcc
    1b68:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hs,add);
    1b6a:	68fa      	ldr	r2, [r7, #12]
    1b6c:	6839      	ldr	r1, [r7, #0]
    1b6e:	6878      	ldr	r0, [r7, #4]
    1b70:	4b04      	ldr	r3, [pc, #16]	; (1b84 <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState+0x2c>)
    1b72:	4798      	blx	r3
    1b74:	60b8      	str	r0, [r7, #8]
	return	w;
    1b76:	68bb      	ldr	r3, [r7, #8]
}
    1b78:	4618      	mov	r0, r3
    1b7a:	3710      	adds	r7, #16
    1b7c:	46bd      	mov	sp, r7
    1b7e:	bd80      	pop	{r7, pc}
    1b80:	20002910 	.word	0x20002910
    1b84:	00001abd 	.word	0x00001abd

00001b88 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm>:

uint32_t	MemoryStruct_Class::WriteCRCConfigurationData(uint32_t crc){
    1b88:	b590      	push	{r4, r7, lr}
    1b8a:	b085      	sub	sp, #20
    1b8c:	af00      	add	r7, sp, #0
    1b8e:	6078      	str	r0, [r7, #4]
    1b90:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->crcConfigData;
    1b92:	4b08      	ldr	r3, [pc, #32]	; (1bb4 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x2c>)
    1b94:	681b      	ldr	r3, [r3, #0]
    1b96:	3310      	adds	r3, #16
    1b98:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    1b9a:	4639      	mov	r1, r7
    1b9c:	2304      	movs	r3, #4
    1b9e:	68fa      	ldr	r2, [r7, #12]
    1ba0:	4805      	ldr	r0, [pc, #20]	; (1bb8 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x30>)
    1ba2:	4c06      	ldr	r4, [pc, #24]	; (1bbc <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x34>)
    1ba4:	47a0      	blx	r4
    1ba6:	60b8      	str	r0, [r7, #8]
	return	w;
    1ba8:	68bb      	ldr	r3, [r7, #8]
}
    1baa:	4618      	mov	r0, r3
    1bac:	3714      	adds	r7, #20
    1bae:	46bd      	mov	sp, r7
    1bb0:	bd90      	pop	{r4, r7, pc}
    1bb2:	bf00      	nop
    1bb4:	20002910 	.word	0x20002910
    1bb8:	200048a4 	.word	0x200048a4
    1bbc:	000134f9 	.word	0x000134f9

00001bc0 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm>:
uint32_t	MemoryStruct_Class::WriteCRCAppState(uint32_t crc){
    1bc0:	b590      	push	{r4, r7, lr}
    1bc2:	b085      	sub	sp, #20
    1bc4:	af00      	add	r7, sp, #0
    1bc6:	6078      	str	r0, [r7, #4]
    1bc8:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->crcAppState;
    1bca:	4b08      	ldr	r3, [pc, #32]	; (1bec <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x2c>)
    1bcc:	681b      	ldr	r3, [r3, #0]
    1bce:	33cc      	adds	r3, #204	; 0xcc
    1bd0:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    1bd2:	4639      	mov	r1, r7
    1bd4:	2304      	movs	r3, #4
    1bd6:	68fa      	ldr	r2, [r7, #12]
    1bd8:	4805      	ldr	r0, [pc, #20]	; (1bf0 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x30>)
    1bda:	4c06      	ldr	r4, [pc, #24]	; (1bf4 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x34>)
    1bdc:	47a0      	blx	r4
    1bde:	60b8      	str	r0, [r7, #8]
	return	w;
    1be0:	68bb      	ldr	r3, [r7, #8]
}
    1be2:	4618      	mov	r0, r3
    1be4:	3714      	adds	r7, #20
    1be6:	46bd      	mov	sp, r7
    1be8:	bd90      	pop	{r4, r7, pc}
    1bea:	bf00      	nop
    1bec:	20002910 	.word	0x20002910
    1bf0:	200048a4 	.word	0x200048a4
    1bf4:	000134f9 	.word	0x000134f9

00001bf8 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState>:
uint32_t	MemoryStruct_Class::WriteLastConfigurationData(ConfigurationData& cd){
	uint32_t	add=(uint32_t)&flashMap->lastConfiguracion;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	MemoryStruct_Class::ReadApplicationState(HVACState& as){
    1bf8:	b590      	push	{r4, r7, lr}
    1bfa:	b085      	sub	sp, #20
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
    1c00:	6039      	str	r1, [r7, #0]
	flashAddress=(uint32_t)&flashMap->hvacState;
    1c02:	4b0d      	ldr	r3, [pc, #52]	; (1c38 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x40>)
    1c04:	681b      	ldr	r3, [r3, #0]
    1c06:	33cc      	adds	r3, #204	; 0xcc
    1c08:	461a      	mov	r2, r3
    1c0a:	687b      	ldr	r3, [r7, #4]
    1c0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	handlerAppState=PTR_HVAC_STATE(&as);
    1c10:	683a      	ldr	r2, [r7, #0]
    1c12:	687b      	ldr	r3, [r7, #4]
    1c14:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,flashAddress,sizeof(HVACState));
    1c18:	687b      	ldr	r3, [r7, #4]
    1c1a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    1c1e:	687b      	ldr	r3, [r7, #4]
    1c20:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    1c24:	2360      	movs	r3, #96	; 0x60
    1c26:	4805      	ldr	r0, [pc, #20]	; (1c3c <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x44>)
    1c28:	4c05      	ldr	r4, [pc, #20]	; (1c40 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x48>)
    1c2a:	47a0      	blx	r4
    1c2c:	60f8      	str	r0, [r7, #12]
	return	r;
    1c2e:	68fb      	ldr	r3, [r7, #12]
}
    1c30:	4618      	mov	r0, r3
    1c32:	3714      	adds	r7, #20
    1c34:	46bd      	mov	sp, r7
    1c36:	bd90      	pop	{r4, r7, pc}
    1c38:	20002910 	.word	0x20002910
    1c3c:	200048a4 	.word	0x200048a4
    1c40:	0001352d 	.word	0x0001352d

00001c44 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv>:
uint32_t	MemoryStruct_Class::ReadCRCApplicationState(void){
    1c44:	b590      	push	{r4, r7, lr}
    1c46:	b085      	sub	sp, #20
    1c48:	af00      	add	r7, sp, #0
    1c4a:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	flashAddress=(uint32_t)&flashMap->crcAppState;
    1c4c:	4b0a      	ldr	r3, [pc, #40]	; (1c78 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x34>)
    1c4e:	681b      	ldr	r3, [r3, #0]
    1c50:	33cc      	adds	r3, #204	; 0xcc
    1c52:	461a      	mov	r2, r3
    1c54:	687b      	ldr	r3, [r7, #4]
    1c56:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),flashAddress,sizeof(uint32_t));
    1c5a:	687b      	ldr	r3, [r7, #4]
    1c5c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    1c60:	f107 0108 	add.w	r1, r7, #8
    1c64:	2304      	movs	r3, #4
    1c66:	4805      	ldr	r0, [pc, #20]	; (1c7c <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x38>)
    1c68:	4c05      	ldr	r4, [pc, #20]	; (1c80 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x3c>)
    1c6a:	47a0      	blx	r4
    1c6c:	60f8      	str	r0, [r7, #12]
	return	crc;
    1c6e:	68bb      	ldr	r3, [r7, #8]
    1c70:	4618      	mov	r0, r3
    1c72:	3714      	adds	r7, #20
    1c74:	46bd      	mov	sp, r7
    1c76:	bd90      	pop	{r4, r7, pc}
    1c78:	20002910 	.word	0x20002910
    1c7c:	200048a4 	.word	0x200048a4
    1c80:	0001352d 	.word	0x0001352d

00001c84 <_ZN10PBIT_ClassC1Ev>:

#include "PBIT_Class.h"
#include "Interfaces_Class.h"

// default constructor
PBIT_Class::PBIT_Class()
    1c84:	b480      	push	{r7}
    1c86:	b083      	sub	sp, #12
    1c88:	af00      	add	r7, sp, #0
    1c8a:	6078      	str	r0, [r7, #4]
{
} //PBIT_Class
    1c8c:	687b      	ldr	r3, [r7, #4]
    1c8e:	4618      	mov	r0, r3
    1c90:	370c      	adds	r7, #12
    1c92:	46bd      	mov	sp, r7
    1c94:	bc80      	pop	{r7}
    1c96:	4770      	bx	lr

00001c98 <_ZN10PBIT_ClassD1Ev>:

// default destructor
PBIT_Class::~PBIT_Class()
    1c98:	b480      	push	{r7}
    1c9a:	b083      	sub	sp, #12
    1c9c:	af00      	add	r7, sp, #0
    1c9e:	6078      	str	r0, [r7, #4]
{
} //~PBIT_Class
    1ca0:	687b      	ldr	r3, [r7, #4]
    1ca2:	4618      	mov	r0, r3
    1ca4:	370c      	adds	r7, #12
    1ca6:	46bd      	mov	sp, r7
    1ca8:	bc80      	pop	{r7}
    1caa:	4770      	bx	lr

00001cac <_ZN10PBIT_ClasscvbEv>:
		isOK=true;
	}
	return isOK;
}

PBIT_Class::operator bool(){
    1cac:	b480      	push	{r7}
    1cae:	b083      	sub	sp, #12
    1cb0:	af00      	add	r7, sp, #0
    1cb2:	6078      	str	r0, [r7, #4]
	return	isOK;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	781b      	ldrb	r3, [r3, #0]
    1cb8:	b2db      	uxtb	r3, r3
}
    1cba:	4618      	mov	r0, r3
    1cbc:	370c      	adds	r7, #12
    1cbe:	46bd      	mov	sp, r7
    1cc0:	bc80      	pop	{r7}
    1cc2:	4770      	bx	lr

00001cc4 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus>:

uint32_t  PBIT_Class::CheckCurrentStatus(HVACStatus& cs){
    1cc4:	b580      	push	{r7, lr}
    1cc6:	b086      	sub	sp, #24
    1cc8:	af00      	add	r7, sp, #0
    1cca:	6078      	str	r0, [r7, #4]
    1ccc:	6039      	str	r1, [r7, #0]
	interfaces.GetStatus(cs);
    1cce:	6839      	ldr	r1, [r7, #0]
    1cd0:	4812      	ldr	r0, [pc, #72]	; (1d1c <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x58>)
    1cd2:	4b13      	ldr	r3, [pc, #76]	; (1d20 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x5c>)
    1cd4:	4798      	blx	r3
	uint32_t	*s=(uint32_t*)&cs.statusBits;
    1cd6:	683b      	ldr	r3, [r7, #0]
    1cd8:	613b      	str	r3, [r7, #16]
	uint32_t	v=*s;
    1cda:	693b      	ldr	r3, [r7, #16]
    1cdc:	681b      	ldr	r3, [r3, #0]
    1cde:	60fb      	str	r3, [r7, #12]

	for (int i=0;i<32;i++)
    1ce0:	2300      	movs	r3, #0
    1ce2:	617b      	str	r3, [r7, #20]
    1ce4:	697b      	ldr	r3, [r7, #20]
    1ce6:	2b1f      	cmp	r3, #31
    1ce8:	dc0d      	bgt.n	1d06 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x42>
	{
		v+=(0x01<<i)&(v);
    1cea:	2201      	movs	r2, #1
    1cec:	697b      	ldr	r3, [r7, #20]
    1cee:	fa02 f303 	lsl.w	r3, r2, r3
    1cf2:	461a      	mov	r2, r3
    1cf4:	68fb      	ldr	r3, [r7, #12]
    1cf6:	401a      	ands	r2, r3
    1cf8:	68fb      	ldr	r3, [r7, #12]
    1cfa:	4413      	add	r3, r2
    1cfc:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<32;i++)
    1cfe:	697b      	ldr	r3, [r7, #20]
    1d00:	3301      	adds	r3, #1
    1d02:	617b      	str	r3, [r7, #20]
    1d04:	e7ee      	b.n	1ce4 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x20>
		
	}
	if (v==0)
    1d06:	68fb      	ldr	r3, [r7, #12]
    1d08:	2b00      	cmp	r3, #0
    1d0a:	d102      	bne.n	1d12 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x4e>
	{
		isOK=true;
    1d0c:	687b      	ldr	r3, [r7, #4]
    1d0e:	2201      	movs	r2, #1
    1d10:	701a      	strb	r2, [r3, #0]
	}
	return	v;
    1d12:	68fb      	ldr	r3, [r7, #12]
}
    1d14:	4618      	mov	r0, r3
    1d16:	3718      	adds	r7, #24
    1d18:	46bd      	mov	sp, r7
    1d1a:	bd80      	pop	{r7, pc}
    1d1c:	20000df8 	.word	0x20000df8
    1d20:	00001285 	.word	0x00001285

00001d24 <_Z41__static_initialization_and_destruction_0ii>:

    1d24:	b580      	push	{r7, lr}
    1d26:	b082      	sub	sp, #8
    1d28:	af00      	add	r7, sp, #0
    1d2a:	6078      	str	r0, [r7, #4]
    1d2c:	6039      	str	r1, [r7, #0]
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	2b01      	cmp	r3, #1
    1d32:	d10c      	bne.n	1d4e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1d34:	683b      	ldr	r3, [r7, #0]
    1d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1d3a:	4293      	cmp	r3, r2
    1d3c:	d107      	bne.n	1d4e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1d3e:	4806      	ldr	r0, [pc, #24]	; (1d58 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1d40:	4b06      	ldr	r3, [pc, #24]	; (1d5c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1d42:	4798      	blx	r3
    1d44:	4a06      	ldr	r2, [pc, #24]	; (1d60 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1d46:	4907      	ldr	r1, [pc, #28]	; (1d64 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1d48:	4803      	ldr	r0, [pc, #12]	; (1d58 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1d4a:	4b07      	ldr	r3, [pc, #28]	; (1d68 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1d4c:	4798      	blx	r3
    1d4e:	bf00      	nop
    1d50:	3708      	adds	r7, #8
    1d52:	46bd      	mov	sp, r7
    1d54:	bd80      	pop	{r7, pc}
    1d56:	bf00      	nop
    1d58:	20002914 	.word	0x20002914
    1d5c:	00001c85 	.word	0x00001c85
    1d60:	20000000 	.word	0x20000000
    1d64:	00001c99 	.word	0x00001c99
    1d68:	000159a5 	.word	0x000159a5

00001d6c <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:
    1d6c:	b580      	push	{r7, lr}
    1d6e:	af00      	add	r7, sp, #0
    1d70:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1d74:	2001      	movs	r0, #1
    1d76:	4b01      	ldr	r3, [pc, #4]	; (1d7c <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x10>)
    1d78:	4798      	blx	r3
    1d7a:	bd80      	pop	{r7, pc}
    1d7c:	00001d25 	.word	0x00001d25

00001d80 <_ZN19PersistenceServicesC1Ev>:
tick_t PersistenceServices::lastUpdate[kNumberOfUsageTimeCounters + kNumberOfCycleDescriptions];	




PersistenceServices::PersistenceServices(void)
    1d80:	b580      	push	{r7, lr}
    1d82:	b082      	sub	sp, #8
    1d84:	af00      	add	r7, sp, #0
    1d86:	6078      	str	r0, [r7, #4]
	:lastValidSaveWorkingStateForGAINIndex(0)
    1d88:	687b      	ldr	r3, [r7, #4]
    1d8a:	4618      	mov	r0, r3
    1d8c:	4b05      	ldr	r3, [pc, #20]	; (1da4 <_ZN19PersistenceServicesC1Ev+0x24>)
    1d8e:	4798      	blx	r3
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	2200      	movs	r2, #0
    1d94:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
	{
	}
    1d98:	687b      	ldr	r3, [r7, #4]
    1d9a:	4618      	mov	r0, r3
    1d9c:	3708      	adds	r7, #8
    1d9e:	46bd      	mov	sp, r7
    1da0:	bd80      	pop	{r7, pc}
    1da2:	bf00      	nop
    1da4:	00000b8d 	.word	0x00000b8d

00001da8 <_ZN19PersistenceServices26writeConfigurationDataAreaER17ConfigurationData>:
	
	return result;
	}

bool PersistenceServices::writeConfigurationDataArea(ConfigurationData& data)
	{
    1da8:	b480      	push	{r7}
    1daa:	b085      	sub	sp, #20
    1dac:	af00      	add	r7, sp, #0
    1dae:	6078      	str	r0, [r7, #4]
    1db0:	6039      	str	r1, [r7, #0]
	bool	result(true);
    1db2:	2301      	movs	r3, #1
    1db4:	73fb      	strb	r3, [r7, #15]

	data.commons.version = kConfigurationDataVersion;
    1db6:	683b      	ldr	r3, [r7, #0]
    1db8:	2204      	movs	r2, #4
    1dba:	605a      	str	r2, [r3, #4]
	data.commons.size = kConfigurationDataSize;
    1dbc:	683b      	ldr	r3, [r7, #0]
    1dbe:	22ac      	movs	r2, #172	; 0xac
    1dc0:	601a      	str	r2, [r3, #0]
	data.commons.partNumber = PARTNUMBER;
    1dc2:	683b      	ldr	r3, [r7, #0]
    1dc4:	f240 720c 	movw	r2, #1804	; 0x70c
    1dc8:	609a      	str	r2, [r3, #8]



	

	return result;
    1dca:	7bfb      	ldrb	r3, [r7, #15]
	}
    1dcc:	4618      	mov	r0, r3
    1dce:	3714      	adds	r7, #20
    1dd0:	46bd      	mov	sp, r7
    1dd2:	bc80      	pop	{r7}
    1dd4:	4770      	bx	lr

00001dd6 <_ZN19PersistenceServices20readCycleDescriptionER16CycleDescriptionh>:
	
	return result;
	}

bool PersistenceServices::readCycleDescription(CycleDescription& cycle, uint8 id)
	{
    1dd6:	b480      	push	{r7}
    1dd8:	b087      	sub	sp, #28
    1dda:	af00      	add	r7, sp, #0
    1ddc:	60f8      	str	r0, [r7, #12]
    1dde:	60b9      	str	r1, [r7, #8]
    1de0:	4613      	mov	r3, r2
    1de2:	71fb      	strb	r3, [r7, #7]
	bool		result(false);
    1de4:	2300      	movs	r3, #0
    1de6:	75fb      	strb	r3, [r7, #23]
		{


		}

	return result;
    1de8:	7dfb      	ldrb	r3, [r7, #23]
	}
    1dea:	4618      	mov	r0, r3
    1dec:	371c      	adds	r7, #28
    1dee:	46bd      	mov	sp, r7
    1df0:	bc80      	pop	{r7}
    1df2:	4770      	bx	lr

00001df4 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData>:
	invalidatePersistentArea(kNVM2,FRAMProxy.persistentConfigurationArea.header);

	}

bool PersistenceServices::readPersistentConfigurationDataArea(PersistentConfigurationData& data)
	{
    1df4:	b590      	push	{r4, r7, lr}
    1df6:	b085      	sub	sp, #20
    1df8:	af00      	add	r7, sp, #0
    1dfa:	6078      	str	r0, [r7, #4]
    1dfc:	6039      	str	r1, [r7, #0]
	bool		result;

	result = isPersistentAreaValid(kNVM2, FRAMProxy.persistentConfigurationArea.header, sizeof(PersistentConfigurationDataArea));
    1dfe:	2300      	movs	r3, #0
    1e00:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
    1e04:	2344      	movs	r3, #68	; 0x44
    1e06:	2102      	movs	r1, #2
    1e08:	6878      	ldr	r0, [r7, #4]
    1e0a:	4c1e      	ldr	r4, [pc, #120]	; (1e84 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData+0x90>)
    1e0c:	47a0      	blx	r4
    1e0e:	4603      	mov	r3, r0
    1e10:	73fb      	strb	r3, [r7, #15]
	if (result)
    1e12:	7bfb      	ldrb	r3, [r7, #15]
    1e14:	2b00      	cmp	r3, #0
    1e16:	d003      	beq.n	1e20 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData+0x2c>
		{
		int32	address((int32)&FRAMProxy.persistentConfigurationArea.configuration);
    1e18:	2300      	movs	r3, #0
    1e1a:	f203 5314 	addw	r3, r3, #1300	; 0x514
    1e1e:	60bb      	str	r3, [r7, #8]
	
		}

	result &= (data.version == kPersistentConfigurationDataVersion);
    1e20:	7bfb      	ldrb	r3, [r7, #15]
    1e22:	683a      	ldr	r2, [r7, #0]
    1e24:	6852      	ldr	r2, [r2, #4]
    1e26:	2a02      	cmp	r2, #2
    1e28:	bf0c      	ite	eq
    1e2a:	2201      	moveq	r2, #1
    1e2c:	2200      	movne	r2, #0
    1e2e:	b2d2      	uxtb	r2, r2
    1e30:	4013      	ands	r3, r2
    1e32:	2b00      	cmp	r3, #0
    1e34:	bf14      	ite	ne
    1e36:	2301      	movne	r3, #1
    1e38:	2300      	moveq	r3, #0
    1e3a:	73fb      	strb	r3, [r7, #15]
	result &= (data.size == kPersistentConfigurationDataSize);
    1e3c:	7bfb      	ldrb	r3, [r7, #15]
    1e3e:	683a      	ldr	r2, [r7, #0]
    1e40:	6812      	ldr	r2, [r2, #0]
    1e42:	2a38      	cmp	r2, #56	; 0x38
    1e44:	bf0c      	ite	eq
    1e46:	2201      	moveq	r2, #1
    1e48:	2200      	movne	r2, #0
    1e4a:	b2d2      	uxtb	r2, r2
    1e4c:	4013      	ands	r3, r2
    1e4e:	2b00      	cmp	r3, #0
    1e50:	bf14      	ite	ne
    1e52:	2301      	movne	r3, #1
    1e54:	2300      	moveq	r3, #0
    1e56:	73fb      	strb	r3, [r7, #15]
	result &= (data.partNumber == PARTNUMBER);
    1e58:	7bfb      	ldrb	r3, [r7, #15]
    1e5a:	683a      	ldr	r2, [r7, #0]
    1e5c:	6892      	ldr	r2, [r2, #8]
    1e5e:	f240 710c 	movw	r1, #1804	; 0x70c
    1e62:	428a      	cmp	r2, r1
    1e64:	bf0c      	ite	eq
    1e66:	2201      	moveq	r2, #1
    1e68:	2200      	movne	r2, #0
    1e6a:	b2d2      	uxtb	r2, r2
    1e6c:	4013      	ands	r3, r2
    1e6e:	2b00      	cmp	r3, #0
    1e70:	bf14      	ite	ne
    1e72:	2301      	movne	r3, #1
    1e74:	2300      	moveq	r3, #0
    1e76:	73fb      	strb	r3, [r7, #15]
	return result;
    1e78:	7bfb      	ldrb	r3, [r7, #15]
	}
    1e7a:	4618      	mov	r0, r3
    1e7c:	3714      	adds	r7, #20
    1e7e:	46bd      	mov	sp, r7
    1e80:	bd90      	pop	{r4, r7, pc}
    1e82:	bf00      	nop
    1e84:	00001f75 	.word	0x00001f75

00001e88 <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData>:
	
bool PersistenceServices::writePersistentConfigurationDataArea(PersistentConfigurationData& data)
	{
    1e88:	b590      	push	{r4, r7, lr}
    1e8a:	b085      	sub	sp, #20
    1e8c:	af00      	add	r7, sp, #0
    1e8e:	6078      	str	r0, [r7, #4]
    1e90:	6039      	str	r1, [r7, #0]
	bool		result(true);
    1e92:	2301      	movs	r3, #1
    1e94:	73fb      	strb	r3, [r7, #15]

	data.version = kPersistentConfigurationDataVersion;
    1e96:	683b      	ldr	r3, [r7, #0]
    1e98:	2202      	movs	r2, #2
    1e9a:	605a      	str	r2, [r3, #4]
	data.size = kPersistentConfigurationDataSize;
    1e9c:	683b      	ldr	r3, [r7, #0]
    1e9e:	2238      	movs	r2, #56	; 0x38
    1ea0:	601a      	str	r2, [r3, #0]
	data.partNumber = PARTNUMBER;
    1ea2:	683b      	ldr	r3, [r7, #0]
    1ea4:	f240 720c 	movw	r2, #1804	; 0x70c
    1ea8:	609a      	str	r2, [r3, #8]

	int32	address((int32)&FRAMProxy.persistentConfigurationArea.configuration);
    1eaa:	2300      	movs	r3, #0
    1eac:	f203 5314 	addw	r3, r3, #1300	; 0x514
    1eb0:	60bb      	str	r3, [r7, #8]

    invalidatePersistentArea(kNVM2, FRAMProxy.persistentConfigurationArea.header);
    1eb2:	2300      	movs	r3, #0
    1eb4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
    1eb8:	461a      	mov	r2, r3
    1eba:	2102      	movs	r1, #2
    1ebc:	6878      	ldr	r0, [r7, #4]
    1ebe:	4b07      	ldr	r3, [pc, #28]	; (1edc <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData+0x54>)
    1ec0:	4798      	blx	r3
	 validatePersistentArea(kNVM2, FRAMProxy.persistentConfigurationArea.header, sizeof(PersistentConfigurationDataArea));
    1ec2:	2300      	movs	r3, #0
    1ec4:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
    1ec8:	2344      	movs	r3, #68	; 0x44
    1eca:	2102      	movs	r1, #2
    1ecc:	6878      	ldr	r0, [r7, #4]
    1ece:	4c04      	ldr	r4, [pc, #16]	; (1ee0 <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData+0x58>)
    1ed0:	47a0      	blx	r4


	return result;
    1ed2:	7bfb      	ldrb	r3, [r7, #15]
	}
    1ed4:	4618      	mov	r0, r3
    1ed6:	3714      	adds	r7, #20
    1ed8:	46bd      	mov	sp, r7
    1eda:	bd90      	pop	{r4, r7, pc}
    1edc:	00002035 	.word	0x00002035
    1ee0:	00002055 	.word	0x00002055

00001ee4 <_ZN19PersistenceServices26restoreWorkingStateForGAINER9HVACState>:


	}

void PersistenceServices::restoreWorkingStateForGAIN(HVACState& v)
	{
    1ee4:	b480      	push	{r7}
    1ee6:	b083      	sub	sp, #12
    1ee8:	af00      	add	r7, sp, #0
    1eea:	6078      	str	r0, [r7, #4]
    1eec:	6039      	str	r1, [r7, #0]
	int32	address;
	


	}
    1eee:	bf00      	nop
    1ef0:	370c      	adds	r7, #12
    1ef2:	46bd      	mov	sp, r7
    1ef4:	bc80      	pop	{r7}
    1ef6:	4770      	bx	lr

00001ef8 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv>:
	value += increment;

	}
	
bool PersistenceServices::IsConfigurationDataUpdated()
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	b086      	sub	sp, #24
    1efc:	af00      	add	r7, sp, #0
    1efe:	6078      	str	r0, [r7, #4]
	uint32_t	ver=factoryDefaultsConfiguration.commons.version;
    1f00:	4b17      	ldr	r3, [pc, #92]	; (1f60 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x68>)
    1f02:	685b      	ldr	r3, [r3, #4]
    1f04:	617b      	str	r3, [r7, #20]
	uint32_t	verUp=memory.ReadUpdatedConfigurationData(configuration);
    1f06:	687b      	ldr	r3, [r7, #4]
    1f08:	33c4      	adds	r3, #196	; 0xc4
    1f0a:	4619      	mov	r1, r3
    1f0c:	4815      	ldr	r0, [pc, #84]	; (1f64 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    1f0e:	4b16      	ldr	r3, [pc, #88]	; (1f68 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x70>)
    1f10:	4798      	blx	r3
    1f12:	6138      	str	r0, [r7, #16]

	if ((verUp>0))
    1f14:	693b      	ldr	r3, [r7, #16]
    1f16:	2b00      	cmp	r3, #0
    1f18:	d001      	beq.n	1f1e <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x26>
	{
		return false;
    1f1a:	2300      	movs	r3, #0
    1f1c:	e01c      	b.n	1f58 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
	} 
	else
	{
		uint32_t	refCRC=memory.ReadCRCConfigurationData();
    1f1e:	4811      	ldr	r0, [pc, #68]	; (1f64 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    1f20:	4b12      	ldr	r3, [pc, #72]	; (1f6c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x74>)
    1f22:	4798      	blx	r3
    1f24:	60f8      	str	r0, [r7, #12]
		uint32_t	crc=CalculateCRC((uint32_t *)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
    1f26:	6878      	ldr	r0, [r7, #4]
    1f28:	687b      	ldr	r3, [r7, #4]
    1f2a:	33c4      	adds	r3, #196	; 0xc4
    1f2c:	22ac      	movs	r2, #172	; 0xac
    1f2e:	4619      	mov	r1, r3
    1f30:	4b0f      	ldr	r3, [pc, #60]	; (1f70 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x78>)
    1f32:	4798      	blx	r3
    1f34:	60b8      	str	r0, [r7, #8]
		if (refCRC==crc)
    1f36:	68fa      	ldr	r2, [r7, #12]
    1f38:	68bb      	ldr	r3, [r7, #8]
    1f3a:	429a      	cmp	r2, r3
    1f3c:	d10b      	bne.n	1f56 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x5e>
		{
			verUp=configuration.commons.version;
    1f3e:	687b      	ldr	r3, [r7, #4]
    1f40:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
    1f44:	613b      	str	r3, [r7, #16]
			return (verUp>ver);
    1f46:	693a      	ldr	r2, [r7, #16]
    1f48:	697b      	ldr	r3, [r7, #20]
    1f4a:	429a      	cmp	r2, r3
    1f4c:	bf8c      	ite	hi
    1f4e:	2301      	movhi	r3, #1
    1f50:	2300      	movls	r3, #0
    1f52:	b2db      	uxtb	r3, r3
    1f54:	e000      	b.n	1f58 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
		} 
		else
		{
			return	false;
    1f56:	2300      	movs	r3, #0
		}
		
	}
	return	false;

}
    1f58:	4618      	mov	r0, r3
    1f5a:	3718      	adds	r7, #24
    1f5c:	46bd      	mov	sp, r7
    1f5e:	bd80      	pop	{r7, pc}
    1f60:	00017d10 	.word	0x00017d10
    1f64:	200014e0 	.word	0x200014e0
    1f68:	000019e5 	.word	0x000019e5
    1f6c:	00001a4d 	.word	0x00001a4d
    1f70:	00000c11 	.word	0x00000c11

00001f74 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm>:
    }
#endif


bool PersistenceServices::isPersistentAreaValid(uint8 nvm, NVMHeader& adr, uint32 size)
	{
    1f74:	b480      	push	{r7}
    1f76:	b089      	sub	sp, #36	; 0x24
    1f78:	af00      	add	r7, sp, #0
    1f7a:	60f8      	str	r0, [r7, #12]
    1f7c:	607a      	str	r2, [r7, #4]
    1f7e:	603b      	str	r3, [r7, #0]
    1f80:	460b      	mov	r3, r1
    1f82:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;
	bool		result;


	result = (header.magic == validMagic) && (header.size == size);
    1f84:	693b      	ldr	r3, [r7, #16]
    1f86:	4a08      	ldr	r2, [pc, #32]	; (1fa8 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x34>)
    1f88:	4293      	cmp	r3, r2
    1f8a:	d105      	bne.n	1f98 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x24>
    1f8c:	697a      	ldr	r2, [r7, #20]
    1f8e:	683b      	ldr	r3, [r7, #0]
    1f90:	429a      	cmp	r2, r3
    1f92:	d101      	bne.n	1f98 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x24>
    1f94:	2301      	movs	r3, #1
    1f96:	e000      	b.n	1f9a <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x26>
    1f98:	2300      	movs	r3, #0
    1f9a:	77fb      	strb	r3, [r7, #31]
	

	return result;
    1f9c:	7ffb      	ldrb	r3, [r7, #31]
	}
    1f9e:	4618      	mov	r0, r3
    1fa0:	3724      	adds	r7, #36	; 0x24
    1fa2:	46bd      	mov	sp, r7
    1fa4:	bc80      	pop	{r7}
    1fa6:	4770      	bx	lr
    1fa8:	14031869 	.word	0x14031869

00001fac <_ZN19PersistenceServices16IsStateDataValidER9HVACState>:
bool PersistenceServices::IsStateDataValid(HVACState& as)
{
    1fac:	b580      	push	{r7, lr}
    1fae:	b084      	sub	sp, #16
    1fb0:	af00      	add	r7, sp, #0
    1fb2:	6078      	str	r0, [r7, #4]
    1fb4:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadCRCApplicationState();
    1fb6:	480b      	ldr	r0, [pc, #44]	; (1fe4 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x38>)
    1fb8:	4b0b      	ldr	r3, [pc, #44]	; (1fe8 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x3c>)
    1fba:	4798      	blx	r3
    1fbc:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(lastState));
    1fbe:	687b      	ldr	r3, [r7, #4]
    1fc0:	2260      	movs	r2, #96	; 0x60
    1fc2:	6839      	ldr	r1, [r7, #0]
    1fc4:	4618      	mov	r0, r3
    1fc6:	4b09      	ldr	r3, [pc, #36]	; (1fec <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x40>)
    1fc8:	4798      	blx	r3
    1fca:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    1fcc:	68fa      	ldr	r2, [r7, #12]
    1fce:	68bb      	ldr	r3, [r7, #8]
    1fd0:	429a      	cmp	r2, r3
    1fd2:	bf0c      	ite	eq
    1fd4:	2301      	moveq	r3, #1
    1fd6:	2300      	movne	r3, #0
    1fd8:	b2db      	uxtb	r3, r3
}
    1fda:	4618      	mov	r0, r3
    1fdc:	3710      	adds	r7, #16
    1fde:	46bd      	mov	sp, r7
    1fe0:	bd80      	pop	{r7, pc}
    1fe2:	bf00      	nop
    1fe4:	200014e0 	.word	0x200014e0
    1fe8:	00001c45 	.word	0x00001c45
    1fec:	00000c11 	.word	0x00000c11

00001ff0 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState>:
bool PersistenceServices::IsFastStateDataValid(HVACState& as)
{
    1ff0:	b580      	push	{r7, lr}
    1ff2:	b084      	sub	sp, #16
    1ff4:	af00      	add	r7, sp, #0
    1ff6:	6078      	str	r0, [r7, #4]
    1ff8:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadFastCRCApplicationState();
    1ffa:	480b      	ldr	r0, [pc, #44]	; (2028 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x38>)
    1ffc:	4b0b      	ldr	r3, [pc, #44]	; (202c <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x3c>)
    1ffe:	4798      	blx	r3
    2000:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(HVACState));
    2002:	687b      	ldr	r3, [r7, #4]
    2004:	2260      	movs	r2, #96	; 0x60
    2006:	6839      	ldr	r1, [r7, #0]
    2008:	4618      	mov	r0, r3
    200a:	4b09      	ldr	r3, [pc, #36]	; (2030 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x40>)
    200c:	4798      	blx	r3
    200e:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    2010:	68fa      	ldr	r2, [r7, #12]
    2012:	68bb      	ldr	r3, [r7, #8]
    2014:	429a      	cmp	r2, r3
    2016:	bf0c      	ite	eq
    2018:	2301      	moveq	r3, #1
    201a:	2300      	movne	r3, #0
    201c:	b2db      	uxtb	r3, r3
}
    201e:	4618      	mov	r0, r3
    2020:	3710      	adds	r7, #16
    2022:	46bd      	mov	sp, r7
    2024:	bd80      	pop	{r7, pc}
    2026:	bf00      	nop
    2028:	200014d0 	.word	0x200014d0
    202c:	00000ef9 	.word	0x00000ef9
    2030:	00000c11 	.word	0x00000c11

00002034 <_ZN19PersistenceServices24invalidatePersistentAreaEhR9NVMHeader>:

void PersistenceServices::invalidatePersistentArea(uint8 nvm, NVMHeader& adr)
	{
    2034:	b480      	push	{r7}
    2036:	b089      	sub	sp, #36	; 0x24
    2038:	af00      	add	r7, sp, #0
    203a:	60f8      	str	r0, [r7, #12]
    203c:	460b      	mov	r3, r1
    203e:	607a      	str	r2, [r7, #4]
    2040:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;

	header.magic = 0;
    2042:	2300      	movs	r3, #0
    2044:	617b      	str	r3, [r7, #20]
	header.size = 0;
    2046:	2300      	movs	r3, #0
    2048:	61bb      	str	r3, [r7, #24]

	}
    204a:	bf00      	nop
    204c:	3724      	adds	r7, #36	; 0x24
    204e:	46bd      	mov	sp, r7
    2050:	bc80      	pop	{r7}
    2052:	4770      	bx	lr

00002054 <_ZN19PersistenceServices22validatePersistentAreaEhR9NVMHeaderm>:

void PersistenceServices::validatePersistentArea(uint8 nvm, NVMHeader& adr, uint32 size)
	{
    2054:	b480      	push	{r7}
    2056:	b089      	sub	sp, #36	; 0x24
    2058:	af00      	add	r7, sp, #0
    205a:	60f8      	str	r0, [r7, #12]
    205c:	607a      	str	r2, [r7, #4]
    205e:	603b      	str	r3, [r7, #0]
    2060:	460b      	mov	r3, r1
    2062:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;

	header.magic = validMagic;
    2064:	4b04      	ldr	r3, [pc, #16]	; (2078 <_ZN19PersistenceServices22validatePersistentAreaEhR9NVMHeaderm+0x24>)
    2066:	617b      	str	r3, [r7, #20]
	header.size = size;
    2068:	683b      	ldr	r3, [r7, #0]
    206a:	61bb      	str	r3, [r7, #24]


	

	}
    206c:	bf00      	nop
    206e:	3724      	adds	r7, #36	; 0x24
    2070:	46bd      	mov	sp, r7
    2072:	bc80      	pop	{r7}
    2074:	4770      	bx	lr
    2076:	bf00      	nop
    2078:	14031869 	.word	0x14031869

0000207c <_ZN5eventC1Ev>:
		tick_t		timestamp;
		eventData	data;
		event*		next;
	};

inline event::event()
    207c:	b580      	push	{r7, lr}
    207e:	b082      	sub	sp, #8
    2080:	af00      	add	r7, sp, #0
    2082:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    2084:	687b      	ldr	r3, [r7, #4]
    2086:	f64f 72ff 	movw	r2, #65535	; 0xffff
    208a:	801a      	strh	r2, [r3, #0]
    208c:	687b      	ldr	r3, [r7, #4]
    208e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2092:	805a      	strh	r2, [r3, #2]
    2094:	687b      	ldr	r3, [r7, #4]
    2096:	2200      	movs	r2, #0
    2098:	605a      	str	r2, [r3, #4]
    209a:	687b      	ldr	r3, [r7, #4]
    209c:	3308      	adds	r3, #8
    209e:	2100      	movs	r1, #0
    20a0:	4618      	mov	r0, r3
    20a2:	4b05      	ldr	r3, [pc, #20]	; (20b8 <_ZN5eventC1Ev+0x3c>)
    20a4:	4798      	blx	r3
    20a6:	687b      	ldr	r3, [r7, #4]
    20a8:	2200      	movs	r2, #0
    20aa:	60da      	str	r2, [r3, #12]
	{
	}
    20ac:	687b      	ldr	r3, [r7, #4]
    20ae:	4618      	mov	r0, r3
    20b0:	3708      	adds	r7, #8
    20b2:	46bd      	mov	sp, r7
    20b4:	bd80      	pop	{r7, pc}
    20b6:	bf00      	nop
    20b8:	000002d1 	.word	0x000002d1

000020bc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    20bc:	b590      	push	{r4, r7, lr}
    20be:	b083      	sub	sp, #12
    20c0:	af00      	add	r7, sp, #0
    20c2:	6078      	str	r0, [r7, #4]
    20c4:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    20c6:	683b      	ldr	r3, [r7, #0]
    20c8:	2b00      	cmp	r3, #0
    20ca:	d101      	bne.n	20d0 <_ZN5Print5writeEPKc+0x14>
    20cc:	2300      	movs	r3, #0
    20ce:	e00c      	b.n	20ea <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    20d0:	687b      	ldr	r3, [r7, #4]
    20d2:	681b      	ldr	r3, [r3, #0]
    20d4:	3304      	adds	r3, #4
    20d6:	681c      	ldr	r4, [r3, #0]
    20d8:	6838      	ldr	r0, [r7, #0]
    20da:	4b06      	ldr	r3, [pc, #24]	; (20f4 <_ZN5Print5writeEPKc+0x38>)
    20dc:	4798      	blx	r3
    20de:	4603      	mov	r3, r0
    20e0:	461a      	mov	r2, r3
    20e2:	6839      	ldr	r1, [r7, #0]
    20e4:	6878      	ldr	r0, [r7, #4]
    20e6:	47a0      	blx	r4
    20e8:	4603      	mov	r3, r0
    }
    20ea:	4618      	mov	r0, r3
    20ec:	370c      	adds	r7, #12
    20ee:	46bd      	mov	sp, r7
    20f0:	bd90      	pop	{r4, r7, pc}
    20f2:	bf00      	nop
    20f4:	00017a01 	.word	0x00017a01

000020f8 <_ZN12States_ClassC1Ev>:
#include "ALU_Class.h"
#include "CBIT_Class.h"
#include "FlapperValve_Class.h"

	// default constructor
States_Class::States_Class(void)
    20f8:	b580      	push	{r7, lr}
    20fa:	b082      	sub	sp, #8
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
    2100:	687b      	ldr	r3, [r7, #4]
    2102:	4618      	mov	r0, r3
    2104:	4b0d      	ldr	r3, [pc, #52]	; (213c <_ZN12States_ClassC1Ev+0x44>)
    2106:	4798      	blx	r3
    2108:	687b      	ldr	r3, [r7, #4]
    210a:	f503 7320 	add.w	r3, r3, #640	; 0x280
    210e:	4618      	mov	r0, r3
    2110:	4b0b      	ldr	r3, [pc, #44]	; (2140 <_ZN12States_ClassC1Ev+0x48>)
    2112:	4798      	blx	r3
    2114:	4a0b      	ldr	r2, [pc, #44]	; (2144 <_ZN12States_ClassC1Ev+0x4c>)
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	601a      	str	r2, [r3, #0]
	{
	listener.eventHandler = NULL;
    211a:	4b0b      	ldr	r3, [pc, #44]	; (2148 <_ZN12States_ClassC1Ev+0x50>)
    211c:	2200      	movs	r2, #0
    211e:	605a      	str	r2, [r3, #4]
state=defaultState;
    2120:	687a      	ldr	r2, [r7, #4]
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	f502 7057 	add.w	r0, r2, #860	; 0x35c
    2128:	3304      	adds	r3, #4
    212a:	2260      	movs	r2, #96	; 0x60
    212c:	4619      	mov	r1, r3
    212e:	4b07      	ldr	r3, [pc, #28]	; (214c <_ZN12States_ClassC1Ev+0x54>)
    2130:	4798      	blx	r3
	}
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	4618      	mov	r0, r3
    2136:	3708      	adds	r7, #8
    2138:	46bd      	mov	sp, r7
    213a:	bd80      	pop	{r7, pc}
    213c:	00000971 	.word	0x00000971
    2140:	000010fd 	.word	0x000010fd
    2144:	00018360 	.word	0x00018360
    2148:	2000475c 	.word	0x2000475c
    214c:	000177d9 	.word	0x000177d9

00002150 <_ZN12States_ClassD1Ev>:

// default destructor
States_Class::~States_Class()
    2150:	b580      	push	{r7, lr}
    2152:	b082      	sub	sp, #8
    2154:	af00      	add	r7, sp, #0
    2156:	6078      	str	r0, [r7, #4]
    2158:	4a08      	ldr	r2, [pc, #32]	; (217c <_ZN12States_ClassD1Ev+0x2c>)
    215a:	687b      	ldr	r3, [r7, #4]
    215c:	601a      	str	r2, [r3, #0]
    215e:	687b      	ldr	r3, [r7, #4]
    2160:	f503 7320 	add.w	r3, r3, #640	; 0x280
    2164:	4618      	mov	r0, r3
    2166:	4b06      	ldr	r3, [pc, #24]	; (2180 <_ZN12States_ClassD1Ev+0x30>)
    2168:	4798      	blx	r3
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	4618      	mov	r0, r3
    216e:	4b05      	ldr	r3, [pc, #20]	; (2184 <_ZN12States_ClassD1Ev+0x34>)
    2170:	4798      	blx	r3
{
} //~States_Class
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	4618      	mov	r0, r3
    2176:	3708      	adds	r7, #8
    2178:	46bd      	mov	sp, r7
    217a:	bd80      	pop	{r7, pc}
    217c:	00018360 	.word	0x00018360
    2180:	00001111 	.word	0x00001111
    2184:	000009d1 	.word	0x000009d1

00002188 <_ZN12States_Class4InitEv>:

bool States_Class::Init(void){
    2188:	b580      	push	{r7, lr}
    218a:	b082      	sub	sp, #8
    218c:	af00      	add	r7, sp, #0
    218e:	6078      	str	r0, [r7, #4]
	return fv1.Init();
    2190:	4803      	ldr	r0, [pc, #12]	; (21a0 <_ZN12States_Class4InitEv+0x18>)
    2192:	4b04      	ldr	r3, [pc, #16]	; (21a4 <_ZN12States_Class4InitEv+0x1c>)
    2194:	4798      	blx	r3
    2196:	4603      	mov	r3, r0
	
}
    2198:	4618      	mov	r0, r3
    219a:	3708      	adds	r7, #8
    219c:	46bd      	mov	sp, r7
    219e:	bd80      	pop	{r7, pc}
    21a0:	20000df4 	.word	0x20000df4
    21a4:	00001081 	.word	0x00001081

000021a8 <_ZN12States_Class6ResumeEh>:
void States_Class::Resume(uint8_t	operationMode){
    21a8:	b580      	push	{r7, lr}
    21aa:	b082      	sub	sp, #8
    21ac:	af00      	add	r7, sp, #0
    21ae:	6078      	str	r0, [r7, #4]
    21b0:	460b      	mov	r3, r1
    21b2:	70fb      	strb	r3, [r7, #3]
		if (operationMode==0)
    21b4:	78fb      	ldrb	r3, [r7, #3]
    21b6:	2b00      	cmp	r3, #0
    21b8:	d10c      	bne.n	21d4 <_ZN12States_Class6ResumeEh+0x2c>
		{
			usb<<"Air Conditioning System Operating"<<NEWLINE;
    21ba:	4908      	ldr	r1, [pc, #32]	; (21dc <_ZN12States_Class6ResumeEh+0x34>)
    21bc:	4808      	ldr	r0, [pc, #32]	; (21e0 <_ZN12States_Class6ResumeEh+0x38>)
    21be:	4b09      	ldr	r3, [pc, #36]	; (21e4 <_ZN12States_Class6ResumeEh+0x3c>)
    21c0:	4798      	blx	r3
    21c2:	4603      	mov	r3, r0
    21c4:	4908      	ldr	r1, [pc, #32]	; (21e8 <_ZN12States_Class6ResumeEh+0x40>)
    21c6:	4618      	mov	r0, r3
    21c8:	4b08      	ldr	r3, [pc, #32]	; (21ec <_ZN12States_Class6ResumeEh+0x44>)
    21ca:	4798      	blx	r3
			delay_ms(100);
    21cc:	2064      	movs	r0, #100	; 0x64
    21ce:	4b08      	ldr	r3, [pc, #32]	; (21f0 <_ZN12States_Class6ResumeEh+0x48>)
    21d0:	4798      	blx	r3
			return;
    21d2:	bf00      	nop
		}
		
}
    21d4:	3708      	adds	r7, #8
    21d6:	46bd      	mov	sp, r7
    21d8:	bd80      	pop	{r7, pc}
    21da:	bf00      	nop
    21dc:	00018240 	.word	0x00018240
    21e0:	20004cc4 	.word	0x20004cc4
    21e4:	00002d79 	.word	0x00002d79
    21e8:	00018264 	.word	0x00018264
    21ec:	000006fd 	.word	0x000006fd
    21f0:	00004a65 	.word	0x00004a65

000021f4 <_ZN12States_Class5StartEh>:

void States_Class::Start(uint8_t	operationMode)
	{
    21f4:	b590      	push	{r4, r7, lr}
    21f6:	b08b      	sub	sp, #44	; 0x2c
    21f8:	af02      	add	r7, sp, #8
    21fa:	6078      	str	r0, [r7, #4]
    21fc:	460b      	mov	r3, r1
    21fe:	70fb      	strb	r3, [r7, #3]
	if (operationMode==0)
    2200:	78fb      	ldrb	r3, [r7, #3]
    2202:	2b00      	cmp	r3, #0
    2204:	d10c      	bne.n	2220 <_ZN12States_Class5StartEh+0x2c>
	{
		usb<<"Air Conditioning System Started"<<NEWLINE;
    2206:	4959      	ldr	r1, [pc, #356]	; (236c <_ZN12States_Class5StartEh+0x178>)
    2208:	4859      	ldr	r0, [pc, #356]	; (2370 <_ZN12States_Class5StartEh+0x17c>)
    220a:	4b5a      	ldr	r3, [pc, #360]	; (2374 <_ZN12States_Class5StartEh+0x180>)
    220c:	4798      	blx	r3
    220e:	4603      	mov	r3, r0
    2210:	4959      	ldr	r1, [pc, #356]	; (2378 <_ZN12States_Class5StartEh+0x184>)
    2212:	4618      	mov	r0, r3
    2214:	4b59      	ldr	r3, [pc, #356]	; (237c <_ZN12States_Class5StartEh+0x188>)
    2216:	4798      	blx	r3
		delay_ms(100);
    2218:	2064      	movs	r0, #100	; 0x64
    221a:	4b59      	ldr	r3, [pc, #356]	; (2380 <_ZN12States_Class5StartEh+0x18c>)
    221c:	4798      	blx	r3
    221e:	e0a2      	b.n	2366 <_ZN12States_Class5StartEh+0x172>
		return;
	}
		
		
	event	e;
    2220:	f107 0308 	add.w	r3, r7, #8
    2224:	4618      	mov	r0, r3
    2226:	4b57      	ldr	r3, [pc, #348]	; (2384 <_ZN12States_Class5StartEh+0x190>)
    2228:	4798      	blx	r3
    tick_t	timerValue = 0L;
    222a:	2300      	movs	r3, #0
    222c:	61fb      	str	r3, [r7, #28]
    bool	isCurrentStateValid = false;
    222e:	2300      	movs	r3, #0
    2230:	76fb      	strb	r3, [r7, #27]
	memory.ReadFastApplicationState(lastState);
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2238:	4619      	mov	r1, r3
    223a:	4853      	ldr	r0, [pc, #332]	; (2388 <_ZN12States_Class5StartEh+0x194>)
    223c:	4b53      	ldr	r3, [pc, #332]	; (238c <_ZN12States_Class5StartEh+0x198>)
    223e:	4798      	blx	r3
	state.currentState = kGAINStateReset;
    2240:	687b      	ldr	r3, [r7, #4]
    2242:	2200      	movs	r2, #0
    2244:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
	if (calendar.WasInterrupted())
    2248:	4851      	ldr	r0, [pc, #324]	; (2390 <_ZN12States_Class5StartEh+0x19c>)
    224a:	4b52      	ldr	r3, [pc, #328]	; (2394 <_ZN12States_Class5StartEh+0x1a0>)
    224c:	4798      	blx	r3
    224e:	4603      	mov	r3, r0
    2250:	2b00      	cmp	r3, #0
    2252:	d019      	beq.n	2288 <_ZN12States_Class5StartEh+0x94>
	{
		powerInterruptDuration = calendar.GetPowerInterrupTime();
    2254:	484e      	ldr	r0, [pc, #312]	; (2390 <_ZN12States_Class5StartEh+0x19c>)
    2256:	4b50      	ldr	r3, [pc, #320]	; (2398 <_ZN12States_Class5StartEh+0x1a4>)
    2258:	4798      	blx	r3
    225a:	4602      	mov	r2, r0
    225c:	687b      	ldr	r3, [r7, #4]
    225e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
		#ifdef OFFLINE
		resumeLastStateValid = ((powerInterruptDuration > 0) && (powerInterruptDuration < 5000L));
		#else
		resumeLastStateValid = ((powerInterruptDuration >= 0) && (powerInterruptDuration < 5000L));
    2262:	687b      	ldr	r3, [r7, #4]
    2264:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2268:	2b00      	cmp	r3, #0
    226a:	db08      	blt.n	227e <_ZN12States_Class5StartEh+0x8a>
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2272:	f241 3287 	movw	r2, #4999	; 0x1387
    2276:	4293      	cmp	r3, r2
    2278:	dc01      	bgt.n	227e <_ZN12States_Class5StartEh+0x8a>
    227a:	2201      	movs	r2, #1
    227c:	e000      	b.n	2280 <_ZN12States_Class5StartEh+0x8c>
    227e:	2200      	movs	r2, #0
    2280:	687b      	ldr	r3, [r7, #4]
    2282:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    2286:	e002      	b.n	228e <_ZN12States_Class5StartEh+0x9a>

		usb << "powerInterruptDuration was " << powerInterruptDuration << (resumeLastStateValid?" 200msec":" power resume") << newline;
		
		#endif
	}else{
		memory.LogResetEvent();
    2288:	4844      	ldr	r0, [pc, #272]	; (239c <_ZN12States_Class5StartEh+0x1a8>)
    228a:	4b45      	ldr	r3, [pc, #276]	; (23a0 <_ZN12States_Class5StartEh+0x1ac>)
    228c:	4798      	blx	r3
	}

	

	//	Check persistent memory
	if (SetInitialState()<0){
    228e:	687b      	ldr	r3, [r7, #4]
    2290:	4618      	mov	r0, r3
    2292:	4b44      	ldr	r3, [pc, #272]	; (23a4 <_ZN12States_Class5StartEh+0x1b0>)
    2294:	4798      	blx	r3
    2296:	2300      	movs	r3, #0
    2298:	2b00      	cmp	r3, #0
    229a:	d003      	beq.n	22a4 <_ZN12States_Class5StartEh+0xb0>
		SetDefaultState();
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	4618      	mov	r0, r3
    22a0:	4b41      	ldr	r3, [pc, #260]	; (23a8 <_ZN12States_Class5StartEh+0x1b4>)
    22a2:	4798      	blx	r3
	}



	readResult=memory.ReadLastConfigurationData(configuration);
    22a4:	687b      	ldr	r3, [r7, #4]
    22a6:	f203 4324 	addw	r3, r3, #1060	; 0x424
    22aa:	4619      	mov	r1, r3
    22ac:	483f      	ldr	r0, [pc, #252]	; (23ac <_ZN12States_Class5StartEh+0x1b8>)
    22ae:	4b40      	ldr	r3, [pc, #256]	; (23b0 <_ZN12States_Class5StartEh+0x1bc>)
    22b0:	4798      	blx	r3
    22b2:	4602      	mov	r2, r0
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4
	if (readResult>0)
    22ba:	687b      	ldr	r3, [r7, #4]
    22bc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
    22c0:	2b00      	cmp	r3, #0
    22c2:	d005      	beq.n	22d0 <_ZN12States_Class5StartEh+0xdc>
		{
	#if __DEBUG__ > 3
		usb << "readConfigurationDataArea failed!" << newline;
	#endif
		SetFactoryDefaults(0, true, false);
    22c4:	6878      	ldr	r0, [r7, #4]
    22c6:	2300      	movs	r3, #0
    22c8:	2201      	movs	r2, #1
    22ca:	2100      	movs	r1, #0
    22cc:	4c39      	ldr	r4, [pc, #228]	; (23b4 <_ZN12States_Class5StartEh+0x1c0>)
    22ce:	47a0      	blx	r4
		usb << "configuration.m == " << configuration.m << newline;
		usb << "configuration.zA0 == " << configuration.zA0 << newline;
		}
#endif

	if (!memory.readPersistentConfigurationDataArea(persistentConfiguration))
    22d0:	687b      	ldr	r3, [r7, #4]
    22d2:	f503 7347 	add.w	r3, r3, #796	; 0x31c
    22d6:	4619      	mov	r1, r3
    22d8:	4837      	ldr	r0, [pc, #220]	; (23b8 <_ZN12States_Class5StartEh+0x1c4>)
    22da:	4b38      	ldr	r3, [pc, #224]	; (23bc <_ZN12States_Class5StartEh+0x1c8>)
    22dc:	4798      	blx	r3
    22de:	4603      	mov	r3, r0
    22e0:	f083 0301 	eor.w	r3, r3, #1
    22e4:	b2db      	uxtb	r3, r3
    22e6:	2b00      	cmp	r3, #0
    22e8:	d002      	beq.n	22f0 <_ZN12States_Class5StartEh+0xfc>
		{
	#if __DEBUG__ > 2
		usb << "readPersistentConfigurationDataArea failed!" << memory.getUptime() << newline;
	#endif
		setPersistentConfigurationDefaults();
    22ea:	6878      	ldr	r0, [r7, #4]
    22ec:	4b34      	ldr	r3, [pc, #208]	; (23c0 <_ZN12States_Class5StartEh+0x1cc>)
    22ee:	4798      	blx	r3
					<< ", duration == " << persistentConfiguration.cycle.duration << ", maximum time == " << persistentConfiguration.cycle.maximumDuration
					<< ", flags == " << persistentConfiguration.cycle.cycleFlags << newline;
#endif
	

	interfaces.CheckInternalCommunication();
    22f0:	4834      	ldr	r0, [pc, #208]	; (23c4 <_ZN12States_Class5StartEh+0x1d0>)
    22f2:	4b35      	ldr	r3, [pc, #212]	; (23c8 <_ZN12States_Class5StartEh+0x1d4>)
    22f4:	4798      	blx	r3

	if (isCurrentStateValid)
    22f6:	7efb      	ldrb	r3, [r7, #27]
    22f8:	2b00      	cmp	r3, #0
    22fa:	d007      	beq.n	230c <_ZN12States_Class5StartEh+0x118>
    {
		prepareStateChangeEvent(e, kGAINStateResume);
    22fc:	f107 0108 	add.w	r1, r7, #8
    2300:	2300      	movs	r3, #0
    2302:	2202      	movs	r2, #2
    2304:	6878      	ldr	r0, [r7, #4]
    2306:	4c31      	ldr	r4, [pc, #196]	; (23cc <_ZN12States_Class5StartEh+0x1d8>)
    2308:	47a0      	blx	r4
    230a:	e006      	b.n	231a <_ZN12States_Class5StartEh+0x126>
    }else{
		prepareStateChangeEvent(e, kGAINStateInitialize);
    230c:	f107 0108 	add.w	r1, r7, #8
    2310:	2300      	movs	r3, #0
    2312:	2201      	movs	r2, #1
    2314:	6878      	ldr	r0, [r7, #4]
    2316:	4c2d      	ldr	r4, [pc, #180]	; (23cc <_ZN12States_Class5StartEh+0x1d8>)
    2318:	47a0      	blx	r4
    }

	listener.SendEventSelf(e);
    231a:	f107 0308 	add.w	r3, r7, #8
    231e:	4619      	mov	r1, r3
    2320:	482b      	ldr	r0, [pc, #172]	; (23d0 <_ZN12States_Class5StartEh+0x1dc>)
    2322:	4b2c      	ldr	r3, [pc, #176]	; (23d4 <_ZN12States_Class5StartEh+0x1e0>)
    2324:	4798      	blx	r3



    while (cBit.IsOK())
    2326:	482c      	ldr	r0, [pc, #176]	; (23d8 <_ZN12States_Class5StartEh+0x1e4>)
    2328:	4b2c      	ldr	r3, [pc, #176]	; (23dc <_ZN12States_Class5StartEh+0x1e8>)
    232a:	4798      	blx	r3
    232c:	4603      	mov	r3, r0
    232e:	2b00      	cmp	r3, #0
    2330:	d015      	beq.n	235e <_ZN12States_Class5StartEh+0x16a>
		{
		if (listener.WaitForEvent(e, kGAINEventClass, kGAINSwitchStateEvent))
    2332:	4b2b      	ldr	r3, [pc, #172]	; (23e0 <_ZN12States_Class5StartEh+0x1ec>)
    2334:	681b      	ldr	r3, [r3, #0]
    2336:	f107 0108 	add.w	r1, r7, #8
    233a:	9300      	str	r3, [sp, #0]
    233c:	f44f 7300 	mov.w	r3, #512	; 0x200
    2340:	f44f 7200 	mov.w	r2, #512	; 0x200
    2344:	4822      	ldr	r0, [pc, #136]	; (23d0 <_ZN12States_Class5StartEh+0x1dc>)
    2346:	4c27      	ldr	r4, [pc, #156]	; (23e4 <_ZN12States_Class5StartEh+0x1f0>)
    2348:	47a0      	blx	r4
    234a:	4603      	mov	r3, r0
    234c:	2b00      	cmp	r3, #0
    234e:	d0ea      	beq.n	2326 <_ZN12States_Class5StartEh+0x132>
			{
			handleHVACEvent(e);
    2350:	f107 0308 	add.w	r3, r7, #8
    2354:	4619      	mov	r1, r3
    2356:	6878      	ldr	r0, [r7, #4]
    2358:	4b23      	ldr	r3, [pc, #140]	; (23e8 <_ZN12States_Class5StartEh+0x1f4>)
    235a:	4798      	blx	r3
    while (cBit.IsOK())
    235c:	e7e3      	b.n	2326 <_ZN12States_Class5StartEh+0x132>
			}
        else{

        }
		}
		Stop(0);
    235e:	2100      	movs	r1, #0
    2360:	6878      	ldr	r0, [r7, #4]
    2362:	4b22      	ldr	r3, [pc, #136]	; (23ec <_ZN12States_Class5StartEh+0x1f8>)
    2364:	4798      	blx	r3
	}
    2366:	3724      	adds	r7, #36	; 0x24
    2368:	46bd      	mov	sp, r7
    236a:	bd90      	pop	{r4, r7, pc}
    236c:	00018268 	.word	0x00018268
    2370:	20004cc4 	.word	0x20004cc4
    2374:	00002d99 	.word	0x00002d99
    2378:	00018264 	.word	0x00018264
    237c:	000006fd 	.word	0x000006fd
    2380:	00004a65 	.word	0x00004a65
    2384:	0000207d 	.word	0x0000207d
    2388:	200014d0 	.word	0x200014d0
    238c:	00000f39 	.word	0x00000f39
    2390:	20004ae0 	.word	0x20004ae0
    2394:	00014081 	.word	0x00014081
    2398:	00013fa9 	.word	0x00013fa9
    239c:	20000e70 	.word	0x20000e70
    23a0:	00000cc5 	.word	0x00000cc5
    23a4:	00000a45 	.word	0x00000a45
    23a8:	00000b21 	.word	0x00000b21
    23ac:	200014e0 	.word	0x200014e0
    23b0:	000019b5 	.word	0x000019b5
    23b4:	000009f1 	.word	0x000009f1
    23b8:	2000135c 	.word	0x2000135c
    23bc:	00001df5 	.word	0x00001df5
    23c0:	000023f1 	.word	0x000023f1
    23c4:	20000df8 	.word	0x20000df8
    23c8:	000011a5 	.word	0x000011a5
    23cc:	00002bb9 	.word	0x00002bb9
    23d0:	2000475c 	.word	0x2000475c
    23d4:	00011f39 	.word	0x00011f39
    23d8:	20000d30 	.word	0x20000d30
    23dc:	000008fd 	.word	0x000008fd
    23e0:	00019890 	.word	0x00019890
    23e4:	00011d61 	.word	0x00011d61
    23e8:	00002495 	.word	0x00002495
    23ec:	00002ca9 	.word	0x00002ca9

000023f0 <_ZN12States_Class34setPersistentConfigurationDefaultsEv>:


void States_Class::setPersistentConfigurationDefaults(void)
	{
    23f0:	b580      	push	{r7, lr}
    23f2:	b082      	sub	sp, #8
    23f4:	af00      	add	r7, sp, #0
    23f6:	6078      	str	r0, [r7, #4]
	setPersistentConfiguration(0);
    23f8:	2100      	movs	r1, #0
    23fa:	6878      	ldr	r0, [r7, #4]
    23fc:	4b02      	ldr	r3, [pc, #8]	; (2408 <_ZN12States_Class34setPersistentConfigurationDefaultsEv+0x18>)
    23fe:	4798      	blx	r3
	}
    2400:	bf00      	nop
    2402:	3708      	adds	r7, #8
    2404:	46bd      	mov	sp, r7
    2406:	bd80      	pop	{r7, pc}
    2408:	0000240d 	.word	0x0000240d

0000240c <_ZN12States_Class26setPersistentConfigurationEh>:

void States_Class::setPersistentConfiguration(uint8 cycleID)
	{
    240c:	b580      	push	{r7, lr}
    240e:	b082      	sub	sp, #8
    2410:	af00      	add	r7, sp, #0
    2412:	6078      	str	r0, [r7, #4]
    2414:	460b      	mov	r3, r1
    2416:	70fb      	strb	r3, [r7, #3]
	persistentConfiguration.cycleDescriptionID = cycleID;
    2418:	78fa      	ldrb	r2, [r7, #3]
    241a:	687b      	ldr	r3, [r7, #4]
    241c:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	readCycleDescription(persistentConfiguration.cycle, persistentConfiguration.cycleDescriptionID);
    2420:	687b      	ldr	r3, [r7, #4]
    2422:	f503 714b 	add.w	r1, r3, #812	; 0x32c
    2426:	687b      	ldr	r3, [r7, #4]
    2428:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
    242c:	b2db      	uxtb	r3, r3
    242e:	461a      	mov	r2, r3
    2430:	6878      	ldr	r0, [r7, #4]
    2432:	4b09      	ldr	r3, [pc, #36]	; (2458 <_ZN12States_Class26setPersistentConfigurationEh+0x4c>)
    2434:	4798      	blx	r3
   writeResult=memory.writePersistentConfigurationDataArea(persistentConfiguration);
    2436:	687b      	ldr	r3, [r7, #4]
    2438:	f503 7347 	add.w	r3, r3, #796	; 0x31c
    243c:	4619      	mov	r1, r3
    243e:	4807      	ldr	r0, [pc, #28]	; (245c <_ZN12States_Class26setPersistentConfigurationEh+0x50>)
    2440:	4b07      	ldr	r3, [pc, #28]	; (2460 <_ZN12States_Class26setPersistentConfigurationEh+0x54>)
    2442:	4798      	blx	r3
    2444:	4603      	mov	r3, r0
    2446:	461a      	mov	r2, r3
    2448:	687b      	ldr	r3, [r7, #4]
    244a:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
	} 	
    244e:	bf00      	nop
    2450:	3708      	adds	r7, #8
    2452:	46bd      	mov	sp, r7
    2454:	bd80      	pop	{r7, pc}
    2456:	bf00      	nop
    2458:	00002465 	.word	0x00002465
    245c:	2000135c 	.word	0x2000135c
    2460:	00001e89 	.word	0x00001e89

00002464 <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh>:



bool States_Class::readCycleDescription(CycleDescription& cycle, uint8 id)
	{
    2464:	b580      	push	{r7, lr}
    2466:	b086      	sub	sp, #24
    2468:	af00      	add	r7, sp, #0
    246a:	60f8      	str	r0, [r7, #12]
    246c:	60b9      	str	r1, [r7, #8]
    246e:	4613      	mov	r3, r2
    2470:	71fb      	strb	r3, [r7, #7]
	bool	result(memory.readCycleDescription(cycle, id));
    2472:	79fb      	ldrb	r3, [r7, #7]
    2474:	461a      	mov	r2, r3
    2476:	68b9      	ldr	r1, [r7, #8]
    2478:	4804      	ldr	r0, [pc, #16]	; (248c <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh+0x28>)
    247a:	4b05      	ldr	r3, [pc, #20]	; (2490 <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh+0x2c>)
    247c:	4798      	blx	r3
    247e:	4603      	mov	r3, r0
    2480:	75fb      	strb	r3, [r7, #23]

	return result;
    2482:	7dfb      	ldrb	r3, [r7, #23]
	}
    2484:	4618      	mov	r0, r3
    2486:	3718      	adds	r7, #24
    2488:	46bd      	mov	sp, r7
    248a:	bd80      	pop	{r7, pc}
    248c:	2000135c 	.word	0x2000135c
    2490:	00001dd7 	.word	0x00001dd7

00002494 <_ZN12States_Class15handleHVACEventER5event>:


void States_Class::handleHVACEvent(event& e)
	{
    2494:	b580      	push	{r7, lr}
    2496:	b084      	sub	sp, #16
    2498:	af00      	add	r7, sp, #0
    249a:	6078      	str	r0, [r7, #4]
    249c:	6039      	str	r1, [r7, #0]
	if (state.currentState != kGAINStateResume)
    249e:	687b      	ldr	r3, [r7, #4]
    24a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    24a4:	2b02      	cmp	r3, #2
    24a6:	d005      	beq.n	24b4 <_ZN12States_Class15handleHVACEventER5event+0x20>
		state.callingState = state.currentState;
    24a8:	687b      	ldr	r3, [r7, #4]
    24aa:	f8d3 2378 	ldr.w	r2, [r3, #888]	; 0x378
    24ae:	687b      	ldr	r3, [r7, #4]
    24b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
	state.currentState = e.data.wordData[0];
    24b4:	683b      	ldr	r3, [r7, #0]
    24b6:	891b      	ldrh	r3, [r3, #8]
    24b8:	461a      	mov	r2, r3
    24ba:	687b      	ldr	r3, [r7, #4]
    24bc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
	state.stateFlags = e.data.wordData[1];
    24c0:	683b      	ldr	r3, [r7, #0]
    24c2:	895b      	ldrh	r3, [r3, #10]
    24c4:	461a      	mov	r2, r3
    24c6:	687b      	ldr	r3, [r7, #4]
    24c8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
	state.stateEntryTime = hvacTimer.Get_ticks();
    24cc:	486a      	ldr	r0, [pc, #424]	; (2678 <_ZN12States_Class15handleHVACEventER5event+0x1e4>)
    24ce:	4b6b      	ldr	r3, [pc, #428]	; (267c <_ZN12States_Class15handleHVACEventER5event+0x1e8>)
    24d0:	4798      	blx	r3
    24d2:	4603      	mov	r3, r0
    24d4:	461a      	mov	r2, r3
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388

#if __DEBUG__ > 0
	
	usb << "handleGAINEvent received: switching from ";
    24dc:	4968      	ldr	r1, [pc, #416]	; (2680 <_ZN12States_Class15handleHVACEventER5event+0x1ec>)
    24de:	4869      	ldr	r0, [pc, #420]	; (2684 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    24e0:	4b69      	ldr	r3, [pc, #420]	; (2688 <_ZN12States_Class15handleHVACEventER5event+0x1f4>)
    24e2:	4798      	blx	r3
	usb.write(gainStateDescription[state.callingState]);
    24e4:	687b      	ldr	r3, [r7, #4]
    24e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
    24ea:	4a68      	ldr	r2, [pc, #416]	; (268c <_ZN12States_Class15handleHVACEventER5event+0x1f8>)
    24ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    24f0:	4619      	mov	r1, r3
    24f2:	4864      	ldr	r0, [pc, #400]	; (2684 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    24f4:	4b66      	ldr	r3, [pc, #408]	; (2690 <_ZN12States_Class15handleHVACEventER5event+0x1fc>)
    24f6:	4798      	blx	r3
	usb << " to ";
    24f8:	4966      	ldr	r1, [pc, #408]	; (2694 <_ZN12States_Class15handleHVACEventER5event+0x200>)
    24fa:	4862      	ldr	r0, [pc, #392]	; (2684 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    24fc:	4b66      	ldr	r3, [pc, #408]	; (2698 <_ZN12States_Class15handleHVACEventER5event+0x204>)
    24fe:	4798      	blx	r3
	usb.write(gainStateDescription[state.currentState]);
    2500:	687b      	ldr	r3, [r7, #4]
    2502:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    2506:	4a61      	ldr	r2, [pc, #388]	; (268c <_ZN12States_Class15handleHVACEventER5event+0x1f8>)
    2508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    250c:	4619      	mov	r1, r3
    250e:	485d      	ldr	r0, [pc, #372]	; (2684 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    2510:	4b5f      	ldr	r3, [pc, #380]	; (2690 <_ZN12States_Class15handleHVACEventER5event+0x1fc>)
    2512:	4798      	blx	r3
	usb << " (flags == " << state.stateFlags << ')' << NEWLINE;
    2514:	4961      	ldr	r1, [pc, #388]	; (269c <_ZN12States_Class15handleHVACEventER5event+0x208>)
    2516:	485b      	ldr	r0, [pc, #364]	; (2684 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    2518:	4b61      	ldr	r3, [pc, #388]	; (26a0 <_ZN12States_Class15handleHVACEventER5event+0x20c>)
    251a:	4798      	blx	r3
    251c:	4602      	mov	r2, r0
    251e:	687b      	ldr	r3, [r7, #4]
    2520:	f503 7361 	add.w	r3, r3, #900	; 0x384
    2524:	4619      	mov	r1, r3
    2526:	4610      	mov	r0, r2
    2528:	4b5e      	ldr	r3, [pc, #376]	; (26a4 <_ZN12States_Class15handleHVACEventER5event+0x210>)
    252a:	4798      	blx	r3
    252c:	4602      	mov	r2, r0
    252e:	2329      	movs	r3, #41	; 0x29
    2530:	73fb      	strb	r3, [r7, #15]
    2532:	f107 030f 	add.w	r3, r7, #15
    2536:	4619      	mov	r1, r3
    2538:	4610      	mov	r0, r2
    253a:	4b5b      	ldr	r3, [pc, #364]	; (26a8 <_ZN12States_Class15handleHVACEventER5event+0x214>)
    253c:	4798      	blx	r3
    253e:	4603      	mov	r3, r0
    2540:	495a      	ldr	r1, [pc, #360]	; (26ac <_ZN12States_Class15handleHVACEventER5event+0x218>)
    2542:	4618      	mov	r0, r3
    2544:	4b5a      	ldr	r3, [pc, #360]	; (26b0 <_ZN12States_Class15handleHVACEventER5event+0x21c>)
    2546:	4798      	blx	r3
	
#endif

	saveCurrentState();
    2548:	6878      	ldr	r0, [r7, #4]
    254a:	4b5a      	ldr	r3, [pc, #360]	; (26b4 <_ZN12States_Class15handleHVACEventER5event+0x220>)
    254c:	4798      	blx	r3

	switch (state.currentState)
    254e:	687b      	ldr	r3, [r7, #4]
    2550:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    2554:	3b01      	subs	r3, #1
    2556:	2b0f      	cmp	r3, #15
    2558:	f200 8084 	bhi.w	2664 <_ZN12States_Class15handleHVACEventER5event+0x1d0>
    255c:	a201      	add	r2, pc, #4	; (adr r2, 2564 <_ZN12States_Class15handleHVACEventER5event+0xd0>)
    255e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2562:	bf00      	nop
    2564:	000025a5 	.word	0x000025a5
    2568:	000025b5 	.word	0x000025b5
    256c:	000025c5 	.word	0x000025c5
    2570:	000025d5 	.word	0x000025d5
    2574:	000025e5 	.word	0x000025e5
    2578:	000025f5 	.word	0x000025f5
    257c:	00002665 	.word	0x00002665
    2580:	00002665 	.word	0x00002665
    2584:	00002605 	.word	0x00002605
    2588:	00002625 	.word	0x00002625
    258c:	00002665 	.word	0x00002665
    2590:	00002615 	.word	0x00002615
    2594:	00002665 	.word	0x00002665
    2598:	00002635 	.word	0x00002635
    259c:	00002645 	.word	0x00002645
    25a0:	00002655 	.word	0x00002655
		{
		case kGAINStateInitialize:
			handleStateInitialize(state.stateFlags);
    25a4:	687b      	ldr	r3, [r7, #4]
    25a6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    25aa:	4619      	mov	r1, r3
    25ac:	6878      	ldr	r0, [r7, #4]
    25ae:	4b42      	ldr	r3, [pc, #264]	; (26b8 <_ZN12States_Class15handleHVACEventER5event+0x224>)
    25b0:	4798      	blx	r3
			break;
    25b2:	e05c      	b.n	266e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateResume:
			handleStateResume(state.stateFlags);
    25b4:	687b      	ldr	r3, [r7, #4]
    25b6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    25ba:	4619      	mov	r1, r3
    25bc:	6878      	ldr	r0, [r7, #4]
    25be:	4b3f      	ldr	r3, [pc, #252]	; (26bc <_ZN12States_Class15handleHVACEventER5event+0x228>)
    25c0:	4798      	blx	r3
			break;
    25c2:	e054      	b.n	266e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyOFF:
			handleStateStandbyOFF(state.stateFlags);
    25c4:	687b      	ldr	r3, [r7, #4]
    25c6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    25ca:	4619      	mov	r1, r3
    25cc:	6878      	ldr	r0, [r7, #4]
    25ce:	4b3c      	ldr	r3, [pc, #240]	; (26c0 <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    25d0:	4798      	blx	r3
			break;
    25d2:	e04c      	b.n	266e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStatePrepareStandbyON:
			handleStatePrepareStandbyON(state.stateFlags);
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    25da:	4619      	mov	r1, r3
    25dc:	6878      	ldr	r0, [r7, #4]
    25de:	4b39      	ldr	r3, [pc, #228]	; (26c4 <_ZN12States_Class15handleHVACEventER5event+0x230>)
    25e0:	4798      	blx	r3
			break;
    25e2:	e044      	b.n	266e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyON:
			handleStateStandbyON(state.stateFlags);
    25e4:	687b      	ldr	r3, [r7, #4]
    25e6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    25ea:	4619      	mov	r1, r3
    25ec:	6878      	ldr	r0, [r7, #4]
    25ee:	4b36      	ldr	r3, [pc, #216]	; (26c8 <_ZN12States_Class15handleHVACEventER5event+0x234>)
    25f0:	4798      	blx	r3
			break;
    25f2:	e03c      	b.n	266e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyReady:
			handleStateStandbyReady(state.stateFlags);
    25f4:	687b      	ldr	r3, [r7, #4]
    25f6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    25fa:	4619      	mov	r1, r3
    25fc:	6878      	ldr	r0, [r7, #4]
    25fe:	4b33      	ldr	r3, [pc, #204]	; (26cc <_ZN12States_Class15handleHVACEventER5event+0x238>)
    2600:	4798      	blx	r3
			break;
    2602:	e034      	b.n	266e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateON:
			handleStateON(state.stateFlags);
    2604:	687b      	ldr	r3, [r7, #4]
    2606:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    260a:	4619      	mov	r1, r3
    260c:	6878      	ldr	r0, [r7, #4]
    260e:	4b30      	ldr	r3, [pc, #192]	; (26d0 <_ZN12States_Class15handleHVACEventER5event+0x23c>)
    2610:	4798      	blx	r3
			break;
    2612:	e02c      	b.n	266e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateFinished:
			handleStateFinished(state.stateFlags);
    2614:	687b      	ldr	r3, [r7, #4]
    2616:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    261a:	4619      	mov	r1, r3
    261c:	6878      	ldr	r0, [r7, #4]
    261e:	4b2d      	ldr	r3, [pc, #180]	; (26d4 <_ZN12States_Class15handleHVACEventER5event+0x240>)
    2620:	4798      	blx	r3
			break;
    2622:	e024      	b.n	266e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStoppedProcess:
			handleStateStoppedProcess(state.stateFlags);
    2624:	687b      	ldr	r3, [r7, #4]
    2626:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    262a:	4619      	mov	r1, r3
    262c:	6878      	ldr	r0, [r7, #4]
    262e:	4b2a      	ldr	r3, [pc, #168]	; (26d8 <_ZN12States_Class15handleHVACEventER5event+0x244>)
    2630:	4798      	blx	r3
			break;
    2632:	e01c      	b.n	266e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateSelfProtect:
			handleStateSelfProtect(state.stateFlags);
    2634:	687b      	ldr	r3, [r7, #4]
    2636:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    263a:	4619      	mov	r1, r3
    263c:	6878      	ldr	r0, [r7, #4]
    263e:	4b27      	ldr	r3, [pc, #156]	; (26dc <_ZN12States_Class15handleHVACEventER5event+0x248>)
    2640:	4798      	blx	r3
			break;
    2642:	e014      	b.n	266e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateError:
			handleStateError(state.stateFlags);
    2644:	687b      	ldr	r3, [r7, #4]
    2646:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    264a:	4619      	mov	r1, r3
    264c:	6878      	ldr	r0, [r7, #4]
    264e:	4b24      	ldr	r3, [pc, #144]	; (26e0 <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    2650:	4798      	blx	r3
			break;
    2652:	e00c      	b.n	266e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateMaintenance:
			handleStateMaintenance(state.stateFlags);
    2654:	687b      	ldr	r3, [r7, #4]
    2656:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
    265a:	4619      	mov	r1, r3
    265c:	6878      	ldr	r0, [r7, #4]
    265e:	4b21      	ldr	r3, [pc, #132]	; (26e4 <_ZN12States_Class15handleHVACEventER5event+0x250>)
    2660:	4798      	blx	r3
			break;
    2662:	e004      	b.n	266e <_ZN12States_Class15handleHVACEventER5event+0x1da>

		default:
			handleStateError(kGAINErrorIllegalStateTransition);
    2664:	2102      	movs	r1, #2
    2666:	6878      	ldr	r0, [r7, #4]
    2668:	4b1d      	ldr	r3, [pc, #116]	; (26e0 <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    266a:	4798      	blx	r3
			break;
    266c:	bf00      	nop
		}
	}
    266e:	bf00      	nop
    2670:	3710      	adds	r7, #16
    2672:	46bd      	mov	sp, r7
    2674:	bd80      	pop	{r7, pc}
    2676:	bf00      	nop
    2678:	20004c60 	.word	0x20004c60
    267c:	00014441 	.word	0x00014441
    2680:	00018288 	.word	0x00018288
    2684:	20004cc4 	.word	0x20004cc4
    2688:	00002db9 	.word	0x00002db9
    268c:	20000004 	.word	0x20000004
    2690:	000020bd 	.word	0x000020bd
    2694:	000182b4 	.word	0x000182b4
    2698:	00002dd9 	.word	0x00002dd9
    269c:	000182bc 	.word	0x000182bc
    26a0:	000014e1 	.word	0x000014e1
    26a4:	00000b65 	.word	0x00000b65
    26a8:	00002df9 	.word	0x00002df9
    26ac:	00018264 	.word	0x00018264
    26b0:	000006fd 	.word	0x000006fd
    26b4:	00002c19 	.word	0x00002c19
    26b8:	000026e9 	.word	0x000026e9
    26bc:	000027c5 	.word	0x000027c5
    26c0:	00002885 	.word	0x00002885
    26c4:	0000291d 	.word	0x0000291d
    26c8:	000029ad 	.word	0x000029ad
    26cc:	00002a15 	.word	0x00002a15
    26d0:	00002a4d 	.word	0x00002a4d
    26d4:	00002a99 	.word	0x00002a99
    26d8:	00002ad1 	.word	0x00002ad1
    26dc:	00002b11 	.word	0x00002b11
    26e0:	00002b49 	.word	0x00002b49
    26e4:	00002b81 	.word	0x00002b81

000026e8 <_ZN12States_Class21handleStateInitializeEm>:


void States_Class::handleStateInitialize(uint32 flags)
	{
    26e8:	b590      	push	{r4, r7, lr}
    26ea:	b089      	sub	sp, #36	; 0x24
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
    26f0:	6039      	str	r1, [r7, #0]
	event	e;
    26f2:	f107 030c 	add.w	r3, r7, #12
    26f6:	4618      	mov	r0, r3
    26f8:	4b22      	ldr	r3, [pc, #136]	; (2784 <_ZN12States_Class21handleStateInitializeEm+0x9c>)
    26fa:	4798      	blx	r3
   	uint16	selfTestResult(kGAINNoError);
    26fc:	2300      	movs	r3, #0
    26fe:	83fb      	strh	r3, [r7, #30]
	
#if __DEBUG__ > 0
	
	usb << "handleStateInitialize: flags == 0x" << flags << NEWLINE;
    2700:	4921      	ldr	r1, [pc, #132]	; (2788 <_ZN12States_Class21handleStateInitializeEm+0xa0>)
    2702:	4822      	ldr	r0, [pc, #136]	; (278c <_ZN12States_Class21handleStateInitializeEm+0xa4>)
    2704:	4b22      	ldr	r3, [pc, #136]	; (2790 <_ZN12States_Class21handleStateInitializeEm+0xa8>)
    2706:	4798      	blx	r3
    2708:	4602      	mov	r2, r0
    270a:	463b      	mov	r3, r7
    270c:	4619      	mov	r1, r3
    270e:	4610      	mov	r0, r2
    2710:	4b20      	ldr	r3, [pc, #128]	; (2794 <_ZN12States_Class21handleStateInitializeEm+0xac>)
    2712:	4798      	blx	r3
    2714:	4603      	mov	r3, r0
    2716:	4920      	ldr	r1, [pc, #128]	; (2798 <_ZN12States_Class21handleStateInitializeEm+0xb0>)
    2718:	4618      	mov	r0, r3
    271a:	4b20      	ldr	r3, [pc, #128]	; (279c <_ZN12States_Class21handleStateInitializeEm+0xb4>)
    271c:	4798      	blx	r3
		
#endif
	
	
	listener.CheckEvent();
    271e:	4820      	ldr	r0, [pc, #128]	; (27a0 <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    2720:	4b20      	ldr	r3, [pc, #128]	; (27a4 <_ZN12States_Class21handleStateInitializeEm+0xbc>)
    2722:	4798      	blx	r3
	if (pBIT.isOK)
    2724:	4b20      	ldr	r3, [pc, #128]	; (27a8 <_ZN12States_Class21handleStateInitializeEm+0xc0>)
    2726:	781b      	ldrb	r3, [r3, #0]
    2728:	b2db      	uxtb	r3, r3
    272a:	2b00      	cmp	r3, #0
    272c:	d021      	beq.n	2772 <_ZN12States_Class21handleStateInitializeEm+0x8a>
	{
		#if __DEBUG__ > 0
		
		usb << "handleStateInitialize" << NEWLINE;
    272e:	491f      	ldr	r1, [pc, #124]	; (27ac <_ZN12States_Class21handleStateInitializeEm+0xc4>)
    2730:	4816      	ldr	r0, [pc, #88]	; (278c <_ZN12States_Class21handleStateInitializeEm+0xa4>)
    2732:	4b1f      	ldr	r3, [pc, #124]	; (27b0 <_ZN12States_Class21handleStateInitializeEm+0xc8>)
    2734:	4798      	blx	r3
    2736:	4603      	mov	r3, r0
    2738:	4917      	ldr	r1, [pc, #92]	; (2798 <_ZN12States_Class21handleStateInitializeEm+0xb0>)
    273a:	4618      	mov	r0, r3
    273c:	4b17      	ldr	r3, [pc, #92]	; (279c <_ZN12States_Class21handleStateInitializeEm+0xb4>)
    273e:	4798      	blx	r3

		#ifdef _OFFLINE
		prepareStateChangeEvent(e, kGAINStateInterrupted);
		listener.SendEventSelf(e);
		#else
		selfTestResult = handlePowerOnSelftest();
    2740:	6878      	ldr	r0, [r7, #4]
    2742:	4b1c      	ldr	r3, [pc, #112]	; (27b4 <_ZN12States_Class21handleStateInitializeEm+0xcc>)
    2744:	4798      	blx	r3
    2746:	4603      	mov	r3, r0
    2748:	83fb      	strh	r3, [r7, #30]
		if (selfTestResult == kGAINNoError)
    274a:	8bfb      	ldrh	r3, [r7, #30]
    274c:	2b00      	cmp	r3, #0
    274e:	d10c      	bne.n	276a <_ZN12States_Class21handleStateInitializeEm+0x82>
		{
			prepareStateChangeEvent(e, kGAINStateStandbyOFF);
    2750:	f107 010c 	add.w	r1, r7, #12
    2754:	2300      	movs	r3, #0
    2756:	2203      	movs	r2, #3
    2758:	6878      	ldr	r0, [r7, #4]
    275a:	4c17      	ldr	r4, [pc, #92]	; (27b8 <_ZN12States_Class21handleStateInitializeEm+0xd0>)
    275c:	47a0      	blx	r4
			listener.SendEventSelf(e);
    275e:	f107 030c 	add.w	r3, r7, #12
    2762:	4619      	mov	r1, r3
    2764:	480e      	ldr	r0, [pc, #56]	; (27a0 <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    2766:	4b15      	ldr	r3, [pc, #84]	; (27bc <_ZN12States_Class21handleStateInitializeEm+0xd4>)
    2768:	4798      	blx	r3
		}
		#endif

		listener.CheckEvent();
    276a:	480d      	ldr	r0, [pc, #52]	; (27a0 <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    276c:	4b0d      	ldr	r3, [pc, #52]	; (27a4 <_ZN12States_Class21handleStateInitializeEm+0xbc>)
    276e:	4798      	blx	r3
	}



	
	}
    2770:	e003      	b.n	277a <_ZN12States_Class21handleStateInitializeEm+0x92>
		Stop();
    2772:	2100      	movs	r1, #0
    2774:	6878      	ldr	r0, [r7, #4]
    2776:	4b12      	ldr	r3, [pc, #72]	; (27c0 <_ZN12States_Class21handleStateInitializeEm+0xd8>)
    2778:	4798      	blx	r3
	}
    277a:	bf00      	nop
    277c:	3724      	adds	r7, #36	; 0x24
    277e:	46bd      	mov	sp, r7
    2780:	bd90      	pop	{r4, r7, pc}
    2782:	bf00      	nop
    2784:	0000207d 	.word	0x0000207d
    2788:	000182c8 	.word	0x000182c8
    278c:	20004cc4 	.word	0x20004cc4
    2790:	00002e1d 	.word	0x00002e1d
    2794:	00000b65 	.word	0x00000b65
    2798:	00018264 	.word	0x00018264
    279c:	000006fd 	.word	0x000006fd
    27a0:	2000475c 	.word	0x2000475c
    27a4:	00012021 	.word	0x00012021
    27a8:	20002914 	.word	0x20002914
    27ac:	000182ec 	.word	0x000182ec
    27b0:	00001541 	.word	0x00001541
    27b4:	00002bf5 	.word	0x00002bf5
    27b8:	00002bb9 	.word	0x00002bb9
    27bc:	00011f39 	.word	0x00011f39
    27c0:	00002ca9 	.word	0x00002ca9

000027c4 <_ZN12States_Class17handleStateResumeEm>:


void States_Class::handleStateResume(uint32 flags)
	{
    27c4:	b590      	push	{r4, r7, lr}
    27c6:	b089      	sub	sp, #36	; 0x24
    27c8:	af00      	add	r7, sp, #0
    27ca:	6078      	str	r0, [r7, #4]
    27cc:	6039      	str	r1, [r7, #0]
	event	e;
    27ce:	f107 030c 	add.w	r3, r7, #12
    27d2:	4618      	mov	r0, r3
    27d4:	4b24      	ldr	r3, [pc, #144]	; (2868 <_ZN12States_Class17handleStateResumeEm+0xa4>)
    27d6:	4798      	blx	r3
	uint8	currentState(state.currentState);
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    27de:	77fb      	strb	r3, [r7, #31]
    uint16	selfTestResult(kGAINNoError);
    27e0:	2300      	movs	r3, #0
    27e2:	83bb      	strh	r3, [r7, #28]
#endif

#if __DEBUG__ > 3
	usb << "state.currentState (before) " << state.currentState << newline;
#endif
	memory.restoreWorkingStateForGAIN(state);
    27e4:	687b      	ldr	r3, [r7, #4]
    27e6:	f503 7357 	add.w	r3, r3, #860	; 0x35c
    27ea:	4619      	mov	r1, r3
    27ec:	481f      	ldr	r0, [pc, #124]	; (286c <_ZN12States_Class17handleStateResumeEm+0xa8>)
    27ee:	4b20      	ldr	r3, [pc, #128]	; (2870 <_ZN12States_Class17handleStateResumeEm+0xac>)
    27f0:	4798      	blx	r3
	usb << "state.currentState (after) " << state.currentState << newline;
#endif


    //Switch into current state if no error occured
    if(selfTestResult == kGAINNoError)
    27f2:	8bbb      	ldrh	r3, [r7, #28]
    27f4:	2b00      	cmp	r3, #0
    27f6:	d125      	bne.n	2844 <_ZN12States_Class17handleStateResumeEm+0x80>
    {
        switch (state.currentState)
    27f8:	687b      	ldr	r3, [r7, #4]
    27fa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    27fe:	2b09      	cmp	r3, #9
    2800:	d002      	beq.n	2808 <_ZN12States_Class17handleStateResumeEm+0x44>
    2802:	2b0a      	cmp	r3, #10
    2804:	d00b      	beq.n	281e <_ZN12States_Class17handleStateResumeEm+0x5a>
    2806:	e012      	b.n	282e <_ZN12States_Class17handleStateResumeEm+0x6a>
        {
        case kGAINStateON:
            prepareStateChangeEvent(e, state.currentState, true);
    2808:	687b      	ldr	r3, [r7, #4]
    280a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    280e:	b29a      	uxth	r2, r3
    2810:	f107 010c 	add.w	r1, r7, #12
    2814:	2301      	movs	r3, #1
    2816:	6878      	ldr	r0, [r7, #4]
    2818:	4c16      	ldr	r4, [pc, #88]	; (2874 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    281a:	47a0      	blx	r4
            break;
    281c:	e012      	b.n	2844 <_ZN12States_Class17handleStateResumeEm+0x80>

        case kGAINStateStoppedProcess:
            prepareStateChangeEvent(e, kGAINStateStoppedProcess);
    281e:	f107 010c 	add.w	r1, r7, #12
    2822:	2300      	movs	r3, #0
    2824:	220a      	movs	r2, #10
    2826:	6878      	ldr	r0, [r7, #4]
    2828:	4c12      	ldr	r4, [pc, #72]	; (2874 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    282a:	47a0      	blx	r4
            break;
    282c:	e00a      	b.n	2844 <_ZN12States_Class17handleStateResumeEm+0x80>

        default:
            prepareStateChangeEvent(e, state.currentState);
    282e:	687b      	ldr	r3, [r7, #4]
    2830:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    2834:	b29a      	uxth	r2, r3
    2836:	f107 010c 	add.w	r1, r7, #12
    283a:	2300      	movs	r3, #0
    283c:	6878      	ldr	r0, [r7, #4]
    283e:	4c0d      	ldr	r4, [pc, #52]	; (2874 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    2840:	47a0      	blx	r4
            break;
    2842:	bf00      	nop
        }
    }

	state.currentState = currentState;
    2844:	7ffa      	ldrb	r2, [r7, #31]
    2846:	687b      	ldr	r3, [r7, #4]
    2848:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

	listener.CheckEvent();
    284c:	480a      	ldr	r0, [pc, #40]	; (2878 <_ZN12States_Class17handleStateResumeEm+0xb4>)
    284e:	4b0b      	ldr	r3, [pc, #44]	; (287c <_ZN12States_Class17handleStateResumeEm+0xb8>)
    2850:	4798      	blx	r3
	listener.SendEventSelf(e);
    2852:	f107 030c 	add.w	r3, r7, #12
    2856:	4619      	mov	r1, r3
    2858:	4807      	ldr	r0, [pc, #28]	; (2878 <_ZN12States_Class17handleStateResumeEm+0xb4>)
    285a:	4b09      	ldr	r3, [pc, #36]	; (2880 <_ZN12States_Class17handleStateResumeEm+0xbc>)
    285c:	4798      	blx	r3
	}
    285e:	bf00      	nop
    2860:	3724      	adds	r7, #36	; 0x24
    2862:	46bd      	mov	sp, r7
    2864:	bd90      	pop	{r4, r7, pc}
    2866:	bf00      	nop
    2868:	0000207d 	.word	0x0000207d
    286c:	2000135c 	.word	0x2000135c
    2870:	00001ee5 	.word	0x00001ee5
    2874:	00002bb9 	.word	0x00002bb9
    2878:	2000475c 	.word	0x2000475c
    287c:	00012021 	.word	0x00012021
    2880:	00011f39 	.word	0x00011f39

00002884 <_ZN12States_Class21handleStateStandbyOFFEm>:
				
void States_Class::handleStateStandbyOFF(uint32 flags)
	{
    2884:	b580      	push	{r7, lr}
    2886:	b088      	sub	sp, #32
    2888:	af00      	add	r7, sp, #0
    288a:	6078      	str	r0, [r7, #4]
    288c:	6039      	str	r1, [r7, #0]
	event	e;
    288e:	f107 030c 	add.w	r3, r7, #12
    2892:	4618      	mov	r0, r3
    2894:	4b18      	ldr	r3, [pc, #96]	; (28f8 <_ZN12States_Class21handleStateStandbyOFFEm+0x74>)
    2896:	4798      	blx	r3
	bool	done(false);
    2898:	2300      	movs	r3, #0
    289a:	77fb      	strb	r3, [r7, #31]
   	
#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    289c:	4917      	ldr	r1, [pc, #92]	; (28fc <_ZN12States_Class21handleStateStandbyOFFEm+0x78>)
    289e:	4818      	ldr	r0, [pc, #96]	; (2900 <_ZN12States_Class21handleStateStandbyOFFEm+0x7c>)
    28a0:	4b18      	ldr	r3, [pc, #96]	; (2904 <_ZN12States_Class21handleStateStandbyOFFEm+0x80>)
    28a2:	4798      	blx	r3
    28a4:	4603      	mov	r3, r0
    28a6:	4918      	ldr	r1, [pc, #96]	; (2908 <_ZN12States_Class21handleStateStandbyOFFEm+0x84>)
    28a8:	4618      	mov	r0, r3
    28aa:	4b18      	ldr	r3, [pc, #96]	; (290c <_ZN12States_Class21handleStateStandbyOFFEm+0x88>)
    28ac:	4798      	blx	r3
		
#endif

	state.smpsTemperatureOutOfRangeEventSent = false;
    28ae:	687a      	ldr	r2, [r7, #4]
    28b0:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
    28b4:	f36f 0341 	bfc	r3, #1, #1
    28b8:	f882 33b8 	strb.w	r3, [r2, #952]	; 0x3b8
	state.magnetronTemperatureOutOfRangeEventSent = false;
    28bc:	687a      	ldr	r2, [r7, #4]
    28be:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
    28c2:	f36f 03c3 	bfc	r3, #3, #1
    28c6:	f882 33b8 	strb.w	r3, [r2, #952]	; 0x3b8
	state.exhaustTemperatureOutOfRangeEventSent = false;
    28ca:	687a      	ldr	r2, [r7, #4]
    28cc:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
    28d0:	f36f 0382 	bfc	r3, #2, #1
    28d4:	f882 33b8 	strb.w	r3, [r2, #952]	; 0x3b8

	state.magnetronFanFailureDetectionTime = forever;
    28d8:	4b0d      	ldr	r3, [pc, #52]	; (2910 <_ZN12States_Class21handleStateStandbyOFFEm+0x8c>)
    28da:	681a      	ldr	r2, [r3, #0]
    28dc:	687b      	ldr	r3, [r7, #4]
    28de:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0




	listener.SendEventSelf(e);
    28e2:	f107 030c 	add.w	r3, r7, #12
    28e6:	4619      	mov	r1, r3
    28e8:	480a      	ldr	r0, [pc, #40]	; (2914 <_ZN12States_Class21handleStateStandbyOFFEm+0x90>)
    28ea:	4b0b      	ldr	r3, [pc, #44]	; (2918 <_ZN12States_Class21handleStateStandbyOFFEm+0x94>)
    28ec:	4798      	blx	r3
	}
    28ee:	bf00      	nop
    28f0:	3720      	adds	r7, #32
    28f2:	46bd      	mov	sp, r7
    28f4:	bd80      	pop	{r7, pc}
    28f6:	bf00      	nop
    28f8:	0000207d 	.word	0x0000207d
    28fc:	00018304 	.word	0x00018304
    2900:	20004cc4 	.word	0x20004cc4
    2904:	00001541 	.word	0x00001541
    2908:	00018264 	.word	0x00018264
    290c:	000006fd 	.word	0x000006fd
    2910:	00019890 	.word	0x00019890
    2914:	2000475c 	.word	0x2000475c
    2918:	00011f39 	.word	0x00011f39

0000291c <_ZN12States_Class27handleStatePrepareStandbyONEm>:

void States_Class::handleStatePrepareStandbyON(uint32 flags)
	{
    291c:	b580      	push	{r7, lr}
    291e:	b08a      	sub	sp, #40	; 0x28
    2920:	af00      	add	r7, sp, #0
    2922:	6078      	str	r0, [r7, #4]
    2924:	6039      	str	r1, [r7, #0]
	event	e;
    2926:	f107 030c 	add.w	r3, r7, #12
    292a:	4618      	mov	r0, r3
    292c:	4b15      	ldr	r3, [pc, #84]	; (2984 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x68>)
    292e:	4798      	blx	r3
	bool	done(false);
    2930:	2300      	movs	r3, #0
    2932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32	connectFlags(state.alarmState?kConnectFlagsAlarmOn:0);
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
    293c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    2940:	b2db      	uxtb	r3, r3
    2942:	2b00      	cmp	r3, #0
    2944:	d001      	beq.n	294a <_ZN12States_Class27handleStatePrepareStandbyONEm+0x2e>
    2946:	2301      	movs	r3, #1
    2948:	e000      	b.n	294c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x30>
    294a:	2300      	movs	r3, #0
    294c:	623b      	str	r3, [r7, #32]
	   	
#ifdef __DEBUG__
	
	usb << "handleStatePrepareStandbyON" << NEWLINE;
    294e:	490e      	ldr	r1, [pc, #56]	; (2988 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x6c>)
    2950:	480e      	ldr	r0, [pc, #56]	; (298c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x70>)
    2952:	4b0f      	ldr	r3, [pc, #60]	; (2990 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x74>)
    2954:	4798      	blx	r3
    2956:	4603      	mov	r3, r0
    2958:	490e      	ldr	r1, [pc, #56]	; (2994 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x78>)
    295a:	4618      	mov	r0, r3
    295c:	4b0e      	ldr	r3, [pc, #56]	; (2998 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x7c>)
    295e:	4798      	blx	r3
		
#endif

	
	tick_t	leaveDisplayTime = hvacTimer.Get_ticks() + 4000;
    2960:	480e      	ldr	r0, [pc, #56]	; (299c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x80>)
    2962:	4b0f      	ldr	r3, [pc, #60]	; (29a0 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x84>)
    2964:	4798      	blx	r3
    2966:	4603      	mov	r3, r0
    2968:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
    296c:	61fb      	str	r3, [r7, #28]

	

	listener.SendEventSelf(e);
    296e:	f107 030c 	add.w	r3, r7, #12
    2972:	4619      	mov	r1, r3
    2974:	480b      	ldr	r0, [pc, #44]	; (29a4 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x88>)
    2976:	4b0c      	ldr	r3, [pc, #48]	; (29a8 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x8c>)
    2978:	4798      	blx	r3
	}
    297a:	bf00      	nop
    297c:	3728      	adds	r7, #40	; 0x28
    297e:	46bd      	mov	sp, r7
    2980:	bd80      	pop	{r7, pc}
    2982:	bf00      	nop
    2984:	0000207d 	.word	0x0000207d
    2988:	0001831c 	.word	0x0001831c
    298c:	20004cc4 	.word	0x20004cc4
    2990:	00002e3d 	.word	0x00002e3d
    2994:	00018264 	.word	0x00018264
    2998:	000006fd 	.word	0x000006fd
    299c:	20004c60 	.word	0x20004c60
    29a0:	00014441 	.word	0x00014441
    29a4:	2000475c 	.word	0x2000475c
    29a8:	00011f39 	.word	0x00011f39

000029ac <_ZN12States_Class20handleStateStandbyONEm>:

void States_Class::handleStateStandbyON(uint32 flags)
	{
    29ac:	b580      	push	{r7, lr}
    29ae:	b088      	sub	sp, #32
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    29b4:	6039      	str	r1, [r7, #0]
	event	e;
    29b6:	f107 030c 	add.w	r3, r7, #12
    29ba:	4618      	mov	r0, r3
    29bc:	4b12      	ldr	r3, [pc, #72]	; (2a08 <_ZN12States_Class20handleStateStandbyONEm+0x5c>)
    29be:	4798      	blx	r3
	bool	done(false);
    29c0:	2300      	movs	r3, #0
    29c2:	77fb      	strb	r3, [r7, #31]
	
	usb << "handleStateStandbyON" << newline;
		
#endif

	state.latchClosedConfirmPending = false;
    29c4:	687a      	ldr	r2, [r7, #4]
    29c6:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
    29ca:	f36f 1345 	bfc	r3, #5, #1
    29ce:	f882 33b8 	strb.w	r3, [r2, #952]	; 0x3b8
    state.remainingTime = (tick_t)persistentConfiguration.cycle.duration * 1000L;
    29d2:	687b      	ldr	r3, [r7, #4]
    29d4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
    29d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    29dc:	fb02 f203 	mul.w	r2, r2, r3
    29e0:	687b      	ldr	r3, [r7, #4]
    29e2:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

	
	state.reedRelayOpen = false;
    29e6:	687a      	ldr	r2, [r7, #4]
    29e8:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
    29ec:	f36f 1304 	bfc	r3, #4, #1
    29f0:	f882 33b8 	strb.w	r3, [r2, #952]	; 0x3b8
	
	listener.SendEventSelf(e);
    29f4:	f107 030c 	add.w	r3, r7, #12
    29f8:	4619      	mov	r1, r3
    29fa:	4804      	ldr	r0, [pc, #16]	; (2a0c <_ZN12States_Class20handleStateStandbyONEm+0x60>)
    29fc:	4b04      	ldr	r3, [pc, #16]	; (2a10 <_ZN12States_Class20handleStateStandbyONEm+0x64>)
    29fe:	4798      	blx	r3
	}
    2a00:	bf00      	nop
    2a02:	3720      	adds	r7, #32
    2a04:	46bd      	mov	sp, r7
    2a06:	bd80      	pop	{r7, pc}
    2a08:	0000207d 	.word	0x0000207d
    2a0c:	2000475c 	.word	0x2000475c
    2a10:	00011f39 	.word	0x00011f39

00002a14 <_ZN12States_Class23handleStateStandbyReadyEm>:

void States_Class::handleStateStandbyReady(uint32 flags)
	{
    2a14:	b580      	push	{r7, lr}
    2a16:	b088      	sub	sp, #32
    2a18:	af00      	add	r7, sp, #0
    2a1a:	6078      	str	r0, [r7, #4]
    2a1c:	6039      	str	r1, [r7, #0]
	event	e;
    2a1e:	f107 030c 	add.w	r3, r7, #12
    2a22:	4618      	mov	r0, r3
    2a24:	4b06      	ldr	r3, [pc, #24]	; (2a40 <_ZN12States_Class23handleStateStandbyReadyEm+0x2c>)
    2a26:	4798      	blx	r3
	bool	done(false);
    2a28:	2300      	movs	r3, #0
    2a2a:	77fb      	strb	r3, [r7, #31]

	
	listener.SendEventSelf(e);
    2a2c:	f107 030c 	add.w	r3, r7, #12
    2a30:	4619      	mov	r1, r3
    2a32:	4804      	ldr	r0, [pc, #16]	; (2a44 <_ZN12States_Class23handleStateStandbyReadyEm+0x30>)
    2a34:	4b04      	ldr	r3, [pc, #16]	; (2a48 <_ZN12States_Class23handleStateStandbyReadyEm+0x34>)
    2a36:	4798      	blx	r3
	}
    2a38:	bf00      	nop
    2a3a:	3720      	adds	r7, #32
    2a3c:	46bd      	mov	sp, r7
    2a3e:	bd80      	pop	{r7, pc}
    2a40:	0000207d 	.word	0x0000207d
    2a44:	2000475c 	.word	0x2000475c
    2a48:	00011f39 	.word	0x00011f39

00002a4c <_ZN12States_Class13handleStateONEm>:

	listener.SendEventSelf(e);
	}

void States_Class::handleStateON(uint32 flags)
	{
    2a4c:	b580      	push	{r7, lr}
    2a4e:	b088      	sub	sp, #32
    2a50:	af00      	add	r7, sp, #0
    2a52:	6078      	str	r0, [r7, #4]
    2a54:	6039      	str	r1, [r7, #0]
	event	e;
    2a56:	f107 030c 	add.w	r3, r7, #12
    2a5a:	4618      	mov	r0, r3
    2a5c:	4b0b      	ldr	r3, [pc, #44]	; (2a8c <_ZN12States_Class13handleStateONEm+0x40>)
    2a5e:	4798      	blx	r3
	bool	done(false);
    2a60:	2300      	movs	r3, #0
    2a62:	77fb      	strb	r3, [r7, #31]
	bool	checkForEmptyCavity(true);
    2a64:	2301      	movs	r3, #1
    2a66:	77bb      	strb	r3, [r7, #30]
	bool	checkForSMPSTemperature(true);
    2a68:	2301      	movs	r3, #1
    2a6a:	777b      	strb	r3, [r7, #29]
	bool	resume(flags != 0);		
    2a6c:	683b      	ldr	r3, [r7, #0]
    2a6e:	2b00      	cmp	r3, #0
    2a70:	bf14      	ite	ne
    2a72:	2301      	movne	r3, #1
    2a74:	2300      	moveq	r3, #0
    2a76:	773b      	strb	r3, [r7, #28]
	usb << "handleStateON: resume == " << (resume?"true":"false") << newline;
		
#endif


	listener.SendEventSelf(e);
    2a78:	f107 030c 	add.w	r3, r7, #12
    2a7c:	4619      	mov	r1, r3
    2a7e:	4804      	ldr	r0, [pc, #16]	; (2a90 <_ZN12States_Class13handleStateONEm+0x44>)
    2a80:	4b04      	ldr	r3, [pc, #16]	; (2a94 <_ZN12States_Class13handleStateONEm+0x48>)
    2a82:	4798      	blx	r3
	}
    2a84:	bf00      	nop
    2a86:	3720      	adds	r7, #32
    2a88:	46bd      	mov	sp, r7
    2a8a:	bd80      	pop	{r7, pc}
    2a8c:	0000207d 	.word	0x0000207d
    2a90:	2000475c 	.word	0x2000475c
    2a94:	00011f39 	.word	0x00011f39

00002a98 <_ZN12States_Class19handleStateFinishedEm>:

void States_Class::handleStateFinished(uint32 flags)
	{
    2a98:	b580      	push	{r7, lr}
    2a9a:	b088      	sub	sp, #32
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	6078      	str	r0, [r7, #4]
    2aa0:	6039      	str	r1, [r7, #0]
	event	e;
    2aa2:	f107 030c 	add.w	r3, r7, #12
    2aa6:	4618      	mov	r0, r3
    2aa8:	4b06      	ldr	r3, [pc, #24]	; (2ac4 <_ZN12States_Class19handleStateFinishedEm+0x2c>)
    2aaa:	4798      	blx	r3
	bool	done(false);
    2aac:	2300      	movs	r3, #0
    2aae:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    2ab0:	f107 030c 	add.w	r3, r7, #12
    2ab4:	4619      	mov	r1, r3
    2ab6:	4804      	ldr	r0, [pc, #16]	; (2ac8 <_ZN12States_Class19handleStateFinishedEm+0x30>)
    2ab8:	4b04      	ldr	r3, [pc, #16]	; (2acc <_ZN12States_Class19handleStateFinishedEm+0x34>)
    2aba:	4798      	blx	r3
	}
    2abc:	bf00      	nop
    2abe:	3720      	adds	r7, #32
    2ac0:	46bd      	mov	sp, r7
    2ac2:	bd80      	pop	{r7, pc}
    2ac4:	0000207d 	.word	0x0000207d
    2ac8:	2000475c 	.word	0x2000475c
    2acc:	00011f39 	.word	0x00011f39

00002ad0 <_ZN12States_Class25handleStateStoppedProcessEm>:

void States_Class::handleStateStoppedProcess(uint32 flags)
	{
    2ad0:	b580      	push	{r7, lr}
    2ad2:	b088      	sub	sp, #32
    2ad4:	af00      	add	r7, sp, #0
    2ad6:	6078      	str	r0, [r7, #4]
    2ad8:	6039      	str	r1, [r7, #0]
	event	e;
    2ada:	f107 030c 	add.w	r3, r7, #12
    2ade:	4618      	mov	r0, r3
    2ae0:	4b08      	ldr	r3, [pc, #32]	; (2b04 <_ZN12States_Class25handleStateStoppedProcessEm+0x34>)
    2ae2:	4798      	blx	r3
 	bool	done(false);
    2ae4:	2300      	movs	r3, #0
    2ae6:	77fb      	strb	r3, [r7, #31]
 	bool	abortCycle(true);
    2ae8:	2301      	movs	r3, #1
    2aea:	77bb      	strb	r3, [r7, #30]
    uint16	resumeFlags(flags);
    2aec:	683b      	ldr	r3, [r7, #0]
    2aee:	83bb      	strh	r3, [r7, #28]
	listener.SendEventSelf(e);
    2af0:	f107 030c 	add.w	r3, r7, #12
    2af4:	4619      	mov	r1, r3
    2af6:	4804      	ldr	r0, [pc, #16]	; (2b08 <_ZN12States_Class25handleStateStoppedProcessEm+0x38>)
    2af8:	4b04      	ldr	r3, [pc, #16]	; (2b0c <_ZN12States_Class25handleStateStoppedProcessEm+0x3c>)
    2afa:	4798      	blx	r3
	}
    2afc:	bf00      	nop
    2afe:	3720      	adds	r7, #32
    2b00:	46bd      	mov	sp, r7
    2b02:	bd80      	pop	{r7, pc}
    2b04:	0000207d 	.word	0x0000207d
    2b08:	2000475c 	.word	0x2000475c
    2b0c:	00011f39 	.word	0x00011f39

00002b10 <_ZN12States_Class22handleStateSelfProtectEm>:

void States_Class::handleStateSelfProtect(uint32_t error)
	{
    2b10:	b580      	push	{r7, lr}
    2b12:	b088      	sub	sp, #32
    2b14:	af00      	add	r7, sp, #0
    2b16:	6078      	str	r0, [r7, #4]
    2b18:	6039      	str	r1, [r7, #0]
	event	e;
    2b1a:	f107 030c 	add.w	r3, r7, #12
    2b1e:	4618      	mov	r0, r3
    2b20:	4b06      	ldr	r3, [pc, #24]	; (2b3c <_ZN12States_Class22handleStateSelfProtectEm+0x2c>)
    2b22:	4798      	blx	r3
	bool	done(false);
    2b24:	2300      	movs	r3, #0
    2b26:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    2b28:	f107 030c 	add.w	r3, r7, #12
    2b2c:	4619      	mov	r1, r3
    2b2e:	4804      	ldr	r0, [pc, #16]	; (2b40 <_ZN12States_Class22handleStateSelfProtectEm+0x30>)
    2b30:	4b04      	ldr	r3, [pc, #16]	; (2b44 <_ZN12States_Class22handleStateSelfProtectEm+0x34>)
    2b32:	4798      	blx	r3
	}
    2b34:	bf00      	nop
    2b36:	3720      	adds	r7, #32
    2b38:	46bd      	mov	sp, r7
    2b3a:	bd80      	pop	{r7, pc}
    2b3c:	0000207d 	.word	0x0000207d
    2b40:	2000475c 	.word	0x2000475c
    2b44:	00011f39 	.word	0x00011f39

00002b48 <_ZN12States_Class16handleStateErrorEm>:

void States_Class::handleStateError(uint32_t error)
	{
    2b48:	b580      	push	{r7, lr}
    2b4a:	b088      	sub	sp, #32
    2b4c:	af00      	add	r7, sp, #0
    2b4e:	6078      	str	r0, [r7, #4]
    2b50:	6039      	str	r1, [r7, #0]
	event	e;
    2b52:	f107 030c 	add.w	r3, r7, #12
    2b56:	4618      	mov	r0, r3
    2b58:	4b06      	ldr	r3, [pc, #24]	; (2b74 <_ZN12States_Class16handleStateErrorEm+0x2c>)
    2b5a:	4798      	blx	r3
	bool	done(false);
    2b5c:	2300      	movs	r3, #0
    2b5e:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    2b60:	f107 030c 	add.w	r3, r7, #12
    2b64:	4619      	mov	r1, r3
    2b66:	4804      	ldr	r0, [pc, #16]	; (2b78 <_ZN12States_Class16handleStateErrorEm+0x30>)
    2b68:	4b04      	ldr	r3, [pc, #16]	; (2b7c <_ZN12States_Class16handleStateErrorEm+0x34>)
    2b6a:	4798      	blx	r3
	}
    2b6c:	bf00      	nop
    2b6e:	3720      	adds	r7, #32
    2b70:	46bd      	mov	sp, r7
    2b72:	bd80      	pop	{r7, pc}
    2b74:	0000207d 	.word	0x0000207d
    2b78:	2000475c 	.word	0x2000475c
    2b7c:	00011f39 	.word	0x00011f39

00002b80 <_ZN12States_Class22handleStateMaintenanceEm>:

void States_Class::handleStateMaintenance(uint32 flags)
	{
    2b80:	b580      	push	{r7, lr}
    2b82:	b088      	sub	sp, #32
    2b84:	af00      	add	r7, sp, #0
    2b86:	6078      	str	r0, [r7, #4]
    2b88:	6039      	str	r1, [r7, #0]
	event	e;
    2b8a:	f107 030c 	add.w	r3, r7, #12
    2b8e:	4618      	mov	r0, r3
    2b90:	4b06      	ldr	r3, [pc, #24]	; (2bac <_ZN12States_Class22handleStateMaintenanceEm+0x2c>)
    2b92:	4798      	blx	r3
	bool	done(false);
    2b94:	2300      	movs	r3, #0
    2b96:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    2b98:	f107 030c 	add.w	r3, r7, #12
    2b9c:	4619      	mov	r1, r3
    2b9e:	4804      	ldr	r0, [pc, #16]	; (2bb0 <_ZN12States_Class22handleStateMaintenanceEm+0x30>)
    2ba0:	4b04      	ldr	r3, [pc, #16]	; (2bb4 <_ZN12States_Class22handleStateMaintenanceEm+0x34>)
    2ba2:	4798      	blx	r3
	}
    2ba4:	bf00      	nop
    2ba6:	3720      	adds	r7, #32
    2ba8:	46bd      	mov	sp, r7
    2baa:	bd80      	pop	{r7, pc}
    2bac:	0000207d 	.word	0x0000207d
    2bb0:	2000475c 	.word	0x2000475c
    2bb4:	00011f39 	.word	0x00011f39

00002bb8 <_ZN12States_Class23prepareStateChangeEventER5eventtt>:
	done = false;
	return result;
	}

void States_Class::prepareStateChangeEvent(event& e, uint16 newState, uint16 data)
	{
    2bb8:	b480      	push	{r7}
    2bba:	b085      	sub	sp, #20
    2bbc:	af00      	add	r7, sp, #0
    2bbe:	60f8      	str	r0, [r7, #12]
    2bc0:	60b9      	str	r1, [r7, #8]
    2bc2:	4611      	mov	r1, r2
    2bc4:	461a      	mov	r2, r3
    2bc6:	460b      	mov	r3, r1
    2bc8:	80fb      	strh	r3, [r7, #6]
    2bca:	4613      	mov	r3, r2
    2bcc:	80bb      	strh	r3, [r7, #4]
	e.eventClass =(EventClass)kGAINEventClass;
    2bce:	68bb      	ldr	r3, [r7, #8]
    2bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
    2bd4:	801a      	strh	r2, [r3, #0]
	e.eventType = (EventType)kGAINSwitchStateEvent;
    2bd6:	68bb      	ldr	r3, [r7, #8]
    2bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
    2bdc:	805a      	strh	r2, [r3, #2]
	e.data.wordData[0] = newState;
    2bde:	68bb      	ldr	r3, [r7, #8]
    2be0:	88fa      	ldrh	r2, [r7, #6]
    2be2:	811a      	strh	r2, [r3, #8]
	e.data.wordData[1] = data;
    2be4:	68bb      	ldr	r3, [r7, #8]
    2be6:	88ba      	ldrh	r2, [r7, #4]
    2be8:	815a      	strh	r2, [r3, #10]
	}
    2bea:	bf00      	nop
    2bec:	3714      	adds	r7, #20
    2bee:	46bd      	mov	sp, r7
    2bf0:	bc80      	pop	{r7}
    2bf2:	4770      	bx	lr

00002bf4 <_ZN12States_Class21handlePowerOnSelftestEv>:

uint32_t States_Class::handlePowerOnSelftest(void)
	{
    2bf4:	b580      	push	{r7, lr}
    2bf6:	b088      	sub	sp, #32
    2bf8:	af00      	add	r7, sp, #0
    2bfa:	6078      	str	r0, [r7, #4]
	event	e;
    2bfc:	f107 030c 	add.w	r3, r7, #12
    2c00:	4618      	mov	r0, r3
    2c02:	4b04      	ldr	r3, [pc, #16]	; (2c14 <_ZN12States_Class21handlePowerOnSelftestEv+0x20>)
    2c04:	4798      	blx	r3
	uint16	selfTestResult(kGAINNoError);
    2c06:	2300      	movs	r3, #0
    2c08:	83fb      	strh	r3, [r7, #30]
	bool	moduleAvailable;
	int16	temperature;
		
	return selfTestResult;
    2c0a:	8bfb      	ldrh	r3, [r7, #30]
	}
    2c0c:	4618      	mov	r0, r3
    2c0e:	3720      	adds	r7, #32
    2c10:	46bd      	mov	sp, r7
    2c12:	bd80      	pop	{r7, pc}
    2c14:	0000207d 	.word	0x0000207d

00002c18 <_ZN12States_Class16saveCurrentStateEv>:


void States_Class::saveCurrentState(void){
    2c18:	b580      	push	{r7, lr}
    2c1a:	b084      	sub	sp, #16
    2c1c:	af00      	add	r7, sp, #0
    2c1e:	6078      	str	r0, [r7, #4]
		calendar_date_time	cdt;
		calendar.GetDateTime(&cdt);
    2c20:	f107 0308 	add.w	r3, r7, #8
    2c24:	4619      	mov	r1, r3
    2c26:	4819      	ldr	r0, [pc, #100]	; (2c8c <_ZN12States_Class16saveCurrentStateEv+0x74>)
    2c28:	4b19      	ldr	r3, [pc, #100]	; (2c90 <_ZN12States_Class16saveCurrentStateEv+0x78>)
    2c2a:	4798      	blx	r3
		state.dateTime=cdt;
    2c2c:	687b      	ldr	r3, [r7, #4]
    2c2e:	f503 7359 	add.w	r3, r3, #868	; 0x364
    2c32:	f107 0208 	add.w	r2, r7, #8
    2c36:	e892 0003 	ldmia.w	r2, {r0, r1}
    2c3a:	e883 0003 	stmia.w	r3, {r0, r1}
		state.now = calendar.convert_datetime_to_timestamp(&cdt);
    2c3e:	f107 0308 	add.w	r3, r7, #8
    2c42:	4619      	mov	r1, r3
    2c44:	4811      	ldr	r0, [pc, #68]	; (2c8c <_ZN12States_Class16saveCurrentStateEv+0x74>)
    2c46:	4b13      	ldr	r3, [pc, #76]	; (2c94 <_ZN12States_Class16saveCurrentStateEv+0x7c>)
    2c48:	4798      	blx	r3
    2c4a:	4603      	mov	r3, r0
    2c4c:	461a      	mov	r2, r3
    2c4e:	687b      	ldr	r3, [r7, #4]
    2c50:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
	if (state.currentState!=kGAINStateMaintenance){
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    2c5a:	2b10      	cmp	r3, #16
    2c5c:	d012      	beq.n	2c84 <_ZN12States_Class16saveCurrentStateEv+0x6c>
		memory.WriteFastCurrentState(state);
    2c5e:	687b      	ldr	r3, [r7, #4]
    2c60:	f503 7357 	add.w	r3, r3, #860	; 0x35c
    2c64:	4619      	mov	r1, r3
    2c66:	480c      	ldr	r0, [pc, #48]	; (2c98 <_ZN12States_Class16saveCurrentStateEv+0x80>)
    2c68:	4b0c      	ldr	r3, [pc, #48]	; (2c9c <_ZN12States_Class16saveCurrentStateEv+0x84>)
    2c6a:	4798      	blx	r3
		//memory.ReadFastApplicationState(lastState);
		if (state.currentState==0)
    2c6c:	687b      	ldr	r3, [r7, #4]
    2c6e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
    2c72:	2b00      	cmp	r3, #0
    2c74:	d106      	bne.n	2c84 <_ZN12States_Class16saveCurrentStateEv+0x6c>
		{
			memory.SaveApplicationState(state);
    2c76:	687b      	ldr	r3, [r7, #4]
    2c78:	f503 7357 	add.w	r3, r3, #860	; 0x35c
    2c7c:	4619      	mov	r1, r3
    2c7e:	4808      	ldr	r0, [pc, #32]	; (2ca0 <_ZN12States_Class16saveCurrentStateEv+0x88>)
    2c80:	4b08      	ldr	r3, [pc, #32]	; (2ca4 <_ZN12States_Class16saveCurrentStateEv+0x8c>)
    2c82:	4798      	blx	r3
// 		 if (state.currentState > kGAINStateResume){
// 			 
// 			memory.clearWorkingStateForGAIN();
// 		 }
	}
}
    2c84:	bf00      	nop
    2c86:	3710      	adds	r7, #16
    2c88:	46bd      	mov	sp, r7
    2c8a:	bd80      	pop	{r7, pc}
    2c8c:	20004ae0 	.word	0x20004ae0
    2c90:	00013c19 	.word	0x00013c19
    2c94:	00013d09 	.word	0x00013d09
    2c98:	200014d0 	.word	0x200014d0
    2c9c:	00000f81 	.word	0x00000f81
    2ca0:	20000e70 	.word	0x20000e70
    2ca4:	00001855 	.word	0x00001855

00002ca8 <_ZN12States_Class4StopEh>:


uint8_t	States_Class::Stop(uint8_t	layer){
    2ca8:	b580      	push	{r7, lr}
    2caa:	b082      	sub	sp, #8
    2cac:	af00      	add	r7, sp, #0
    2cae:	6078      	str	r0, [r7, #4]
    2cb0:	460b      	mov	r3, r1
    2cb2:	70fb      	strb	r3, [r7, #3]
		if (layer==0)
    2cb4:	78fb      	ldrb	r3, [r7, #3]
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	d10d      	bne.n	2cd6 <_ZN12States_Class4StopEh+0x2e>
		{
			usb<<"Air Conditioning System Stopped"<<NEWLINE;
    2cba:	4909      	ldr	r1, [pc, #36]	; (2ce0 <_ZN12States_Class4StopEh+0x38>)
    2cbc:	4809      	ldr	r0, [pc, #36]	; (2ce4 <_ZN12States_Class4StopEh+0x3c>)
    2cbe:	4b0a      	ldr	r3, [pc, #40]	; (2ce8 <_ZN12States_Class4StopEh+0x40>)
    2cc0:	4798      	blx	r3
    2cc2:	4603      	mov	r3, r0
    2cc4:	4909      	ldr	r1, [pc, #36]	; (2cec <_ZN12States_Class4StopEh+0x44>)
    2cc6:	4618      	mov	r0, r3
    2cc8:	4b09      	ldr	r3, [pc, #36]	; (2cf0 <_ZN12States_Class4StopEh+0x48>)
    2cca:	4798      	blx	r3
			delay_ms(100);
    2ccc:	2064      	movs	r0, #100	; 0x64
    2cce:	4b09      	ldr	r3, [pc, #36]	; (2cf4 <_ZN12States_Class4StopEh+0x4c>)
    2cd0:	4798      	blx	r3
			return layer;
    2cd2:	78fb      	ldrb	r3, [r7, #3]
    2cd4:	e000      	b.n	2cd8 <_ZN12States_Class4StopEh+0x30>
		}
	return	layer;
    2cd6:	78fb      	ldrb	r3, [r7, #3]
}
    2cd8:	4618      	mov	r0, r3
    2cda:	3708      	adds	r7, #8
    2cdc:	46bd      	mov	sp, r7
    2cde:	bd80      	pop	{r7, pc}
    2ce0:	00018338 	.word	0x00018338
    2ce4:	20004cc4 	.word	0x20004cc4
    2ce8:	00002d99 	.word	0x00002d99
    2cec:	00018264 	.word	0x00018264
    2cf0:	000006fd 	.word	0x000006fd
    2cf4:	00004a65 	.word	0x00004a65

00002cf8 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData>:
	cd=&configuration;
}
void	States_Class::GetCurrentState(HVACState& hs){
	hs=state;
}
void	States_Class::SetConfigurationData(ConfigurationData& cd){
    2cf8:	b580      	push	{r7, lr}
    2cfa:	b082      	sub	sp, #8
    2cfc:	af00      	add	r7, sp, #0
    2cfe:	6078      	str	r0, [r7, #4]
    2d00:	6039      	str	r1, [r7, #0]
	configuration=cd;
    2d02:	687b      	ldr	r3, [r7, #4]
    2d04:	683a      	ldr	r2, [r7, #0]
    2d06:	f203 4324 	addw	r3, r3, #1060	; 0x424
    2d0a:	4611      	mov	r1, r2
    2d0c:	22ac      	movs	r2, #172	; 0xac
    2d0e:	4618      	mov	r0, r3
    2d10:	4b02      	ldr	r3, [pc, #8]	; (2d1c <_ZN12States_Class20SetConfigurationDataER17ConfigurationData+0x24>)
    2d12:	4798      	blx	r3
}
    2d14:	bf00      	nop
    2d16:	3708      	adds	r7, #8
    2d18:	46bd      	mov	sp, r7
    2d1a:	bd80      	pop	{r7, pc}
    2d1c:	000177d9 	.word	0x000177d9

00002d20 <_ZN12States_Class15SetCurrentStateER9HVACState>:
void	States_Class::SetCurrentState(HVACState& hs){
    2d20:	b580      	push	{r7, lr}
    2d22:	b082      	sub	sp, #8
    2d24:	af00      	add	r7, sp, #0
    2d26:	6078      	str	r0, [r7, #4]
    2d28:	6039      	str	r1, [r7, #0]
	state=hs;
    2d2a:	687b      	ldr	r3, [r7, #4]
    2d2c:	683a      	ldr	r2, [r7, #0]
    2d2e:	f503 7357 	add.w	r3, r3, #860	; 0x35c
    2d32:	4611      	mov	r1, r2
    2d34:	2260      	movs	r2, #96	; 0x60
    2d36:	4618      	mov	r0, r3
    2d38:	4b02      	ldr	r3, [pc, #8]	; (2d44 <_ZN12States_Class15SetCurrentStateER9HVACState+0x24>)
    2d3a:	4798      	blx	r3
}
    2d3c:	bf00      	nop
    2d3e:	3708      	adds	r7, #8
    2d40:	46bd      	mov	sp, r7
    2d42:	bd80      	pop	{r7, pc}
    2d44:	000177d9 	.word	0x000177d9

00002d48 <_ZN12States_Class16SetCRCConfigDataEv>:
void	States_Class::SetCRCConfigData(void){
    2d48:	b580      	push	{r7, lr}
    2d4a:	b082      	sub	sp, #8
    2d4c:	af00      	add	r7, sp, #0
    2d4e:	6078      	str	r0, [r7, #4]
	CRC32=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&factoryDefaultsConfiguration),sizeof(factoryDefaultsConfiguration));
    2d50:	22ac      	movs	r2, #172	; 0xac
    2d52:	4906      	ldr	r1, [pc, #24]	; (2d6c <_ZN12States_Class16SetCRCConfigDataEv+0x24>)
    2d54:	4806      	ldr	r0, [pc, #24]	; (2d70 <_ZN12States_Class16SetCRCConfigDataEv+0x28>)
    2d56:	4b07      	ldr	r3, [pc, #28]	; (2d74 <_ZN12States_Class16SetCRCConfigDataEv+0x2c>)
    2d58:	4798      	blx	r3
    2d5a:	4602      	mov	r2, r0
    2d5c:	687b      	ldr	r3, [r7, #4]
    2d5e:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
}
    2d62:	bf00      	nop
    2d64:	3708      	adds	r7, #8
    2d66:	46bd      	mov	sp, r7
    2d68:	bd80      	pop	{r7, pc}
    2d6a:	bf00      	nop
    2d6c:	00017d10 	.word	0x00017d10
    2d70:	2000135c 	.word	0x2000135c
    2d74:	00000c11 	.word	0x00000c11

00002d78 <_ZlsIA34_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2d78:	b580      	push	{r7, lr}
    2d7a:	b082      	sub	sp, #8
    2d7c:	af00      	add	r7, sp, #0
    2d7e:	6078      	str	r0, [r7, #4]
    2d80:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2d82:	6839      	ldr	r1, [r7, #0]
    2d84:	6878      	ldr	r0, [r7, #4]
    2d86:	4b03      	ldr	r3, [pc, #12]	; (2d94 <_ZlsIA34_cER5PrintS2_RKT_+0x1c>)
    2d88:	4798      	blx	r3
    2d8a:	687b      	ldr	r3, [r7, #4]
    2d8c:	4618      	mov	r0, r3
    2d8e:	3708      	adds	r7, #8
    2d90:	46bd      	mov	sp, r7
    2d92:	bd80      	pop	{r7, pc}
    2d94:	00014bb1 	.word	0x00014bb1

00002d98 <_ZlsIA32_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2d98:	b580      	push	{r7, lr}
    2d9a:	b082      	sub	sp, #8
    2d9c:	af00      	add	r7, sp, #0
    2d9e:	6078      	str	r0, [r7, #4]
    2da0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2da2:	6839      	ldr	r1, [r7, #0]
    2da4:	6878      	ldr	r0, [r7, #4]
    2da6:	4b03      	ldr	r3, [pc, #12]	; (2db4 <_ZlsIA32_cER5PrintS2_RKT_+0x1c>)
    2da8:	4798      	blx	r3
    2daa:	687b      	ldr	r3, [r7, #4]
    2dac:	4618      	mov	r0, r3
    2dae:	3708      	adds	r7, #8
    2db0:	46bd      	mov	sp, r7
    2db2:	bd80      	pop	{r7, pc}
    2db4:	00014bb1 	.word	0x00014bb1

00002db8 <_ZlsIA42_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2db8:	b580      	push	{r7, lr}
    2dba:	b082      	sub	sp, #8
    2dbc:	af00      	add	r7, sp, #0
    2dbe:	6078      	str	r0, [r7, #4]
    2dc0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2dc2:	6839      	ldr	r1, [r7, #0]
    2dc4:	6878      	ldr	r0, [r7, #4]
    2dc6:	4b03      	ldr	r3, [pc, #12]	; (2dd4 <_ZlsIA42_cER5PrintS2_RKT_+0x1c>)
    2dc8:	4798      	blx	r3
    2dca:	687b      	ldr	r3, [r7, #4]
    2dcc:	4618      	mov	r0, r3
    2dce:	3708      	adds	r7, #8
    2dd0:	46bd      	mov	sp, r7
    2dd2:	bd80      	pop	{r7, pc}
    2dd4:	00014bb1 	.word	0x00014bb1

00002dd8 <_ZlsIA5_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2dd8:	b580      	push	{r7, lr}
    2dda:	b082      	sub	sp, #8
    2ddc:	af00      	add	r7, sp, #0
    2dde:	6078      	str	r0, [r7, #4]
    2de0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2de2:	6839      	ldr	r1, [r7, #0]
    2de4:	6878      	ldr	r0, [r7, #4]
    2de6:	4b03      	ldr	r3, [pc, #12]	; (2df4 <_ZlsIA5_cER5PrintS2_RKT_+0x1c>)
    2de8:	4798      	blx	r3
    2dea:	687b      	ldr	r3, [r7, #4]
    2dec:	4618      	mov	r0, r3
    2dee:	3708      	adds	r7, #8
    2df0:	46bd      	mov	sp, r7
    2df2:	bd80      	pop	{r7, pc}
    2df4:	00014bb1 	.word	0x00014bb1

00002df8 <_ZlsIcER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2df8:	b580      	push	{r7, lr}
    2dfa:	b082      	sub	sp, #8
    2dfc:	af00      	add	r7, sp, #0
    2dfe:	6078      	str	r0, [r7, #4]
    2e00:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2e02:	683b      	ldr	r3, [r7, #0]
    2e04:	781b      	ldrb	r3, [r3, #0]
    2e06:	4619      	mov	r1, r3
    2e08:	6878      	ldr	r0, [r7, #4]
    2e0a:	4b03      	ldr	r3, [pc, #12]	; (2e18 <_ZlsIcER5PrintS1_RKT_+0x20>)
    2e0c:	4798      	blx	r3
    2e0e:	687b      	ldr	r3, [r7, #4]
    2e10:	4618      	mov	r0, r3
    2e12:	3708      	adds	r7, #8
    2e14:	46bd      	mov	sp, r7
    2e16:	bd80      	pop	{r7, pc}
    2e18:	00014bd1 	.word	0x00014bd1

00002e1c <_ZlsIA35_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2e1c:	b580      	push	{r7, lr}
    2e1e:	b082      	sub	sp, #8
    2e20:	af00      	add	r7, sp, #0
    2e22:	6078      	str	r0, [r7, #4]
    2e24:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2e26:	6839      	ldr	r1, [r7, #0]
    2e28:	6878      	ldr	r0, [r7, #4]
    2e2a:	4b03      	ldr	r3, [pc, #12]	; (2e38 <_ZlsIA35_cER5PrintS2_RKT_+0x1c>)
    2e2c:	4798      	blx	r3
    2e2e:	687b      	ldr	r3, [r7, #4]
    2e30:	4618      	mov	r0, r3
    2e32:	3708      	adds	r7, #8
    2e34:	46bd      	mov	sp, r7
    2e36:	bd80      	pop	{r7, pc}
    2e38:	00014bb1 	.word	0x00014bb1

00002e3c <_ZlsIA28_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2e3c:	b580      	push	{r7, lr}
    2e3e:	b082      	sub	sp, #8
    2e40:	af00      	add	r7, sp, #0
    2e42:	6078      	str	r0, [r7, #4]
    2e44:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2e46:	6839      	ldr	r1, [r7, #0]
    2e48:	6878      	ldr	r0, [r7, #4]
    2e4a:	4b03      	ldr	r3, [pc, #12]	; (2e58 <_ZlsIA28_cER5PrintS2_RKT_+0x1c>)
    2e4c:	4798      	blx	r3
    2e4e:	687b      	ldr	r3, [r7, #4]
    2e50:	4618      	mov	r0, r3
    2e52:	3708      	adds	r7, #8
    2e54:	46bd      	mov	sp, r7
    2e56:	bd80      	pop	{r7, pc}
    2e58:	00014bb1 	.word	0x00014bb1

00002e5c <_Z41__static_initialization_and_destruction_0ii>:
	s=state.status;
	return	state.status.rawStatus;
}


    2e5c:	b580      	push	{r7, lr}
    2e5e:	b082      	sub	sp, #8
    2e60:	af00      	add	r7, sp, #0
    2e62:	6078      	str	r0, [r7, #4]
    2e64:	6039      	str	r1, [r7, #0]
    2e66:	687b      	ldr	r3, [r7, #4]
    2e68:	2b01      	cmp	r3, #1
    2e6a:	d10c      	bne.n	2e86 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2e6c:	683b      	ldr	r3, [r7, #0]
    2e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2e72:	4293      	cmp	r3, r2
    2e74:	d107      	bne.n	2e86 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2e76:	4806      	ldr	r0, [pc, #24]	; (2e90 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2e78:	4b06      	ldr	r3, [pc, #24]	; (2e94 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2e7a:	4798      	blx	r3
    2e7c:	4a06      	ldr	r2, [pc, #24]	; (2e98 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2e7e:	4907      	ldr	r1, [pc, #28]	; (2e9c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2e80:	4803      	ldr	r0, [pc, #12]	; (2e90 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2e82:	4b07      	ldr	r3, [pc, #28]	; (2ea0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2e84:	4798      	blx	r3
    2e86:	bf00      	nop
    2e88:	3708      	adds	r7, #8
    2e8a:	46bd      	mov	sp, r7
    2e8c:	bd80      	pop	{r7, pc}
    2e8e:	bf00      	nop
    2e90:	20002928 	.word	0x20002928
    2e94:	000020f9 	.word	0x000020f9
    2e98:	20000000 	.word	0x20000000
    2e9c:	00002151 	.word	0x00002151
    2ea0:	000159a5 	.word	0x000159a5

00002ea4 <_GLOBAL__sub_I__ZN12States_ClassC2Ev>:
    2ea4:	b580      	push	{r7, lr}
    2ea6:	af00      	add	r7, sp, #0
    2ea8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2eac:	2001      	movs	r0, #1
    2eae:	4b01      	ldr	r3, [pc, #4]	; (2eb4 <_GLOBAL__sub_I__ZN12States_ClassC2Ev+0x10>)
    2eb0:	4798      	blx	r3
    2eb2:	bd80      	pop	{r7, pc}
    2eb4:	00002e5d 	.word	0x00002e5d

00002eb8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    2eb8:	b580      	push	{r7, lr}
    2eba:	af00      	add	r7, sp, #0
	system_init();
    2ebc:	4b03      	ldr	r3, [pc, #12]	; (2ecc <atmel_start_init+0x14>)
    2ebe:	4798      	blx	r3
	usb_init();
    2ec0:	4b03      	ldr	r3, [pc, #12]	; (2ed0 <atmel_start_init+0x18>)
    2ec2:	4798      	blx	r3
	spi_nor_flash_init();
    2ec4:	4b03      	ldr	r3, [pc, #12]	; (2ed4 <atmel_start_init+0x1c>)
    2ec6:	4798      	blx	r3
}
    2ec8:	bf00      	nop
    2eca:	bd80      	pop	{r7, pc}
    2ecc:	00004179 	.word	0x00004179
    2ed0:	0000e85d 	.word	0x0000e85d
    2ed4:	0000e7f1 	.word	0x0000e7f1

00002ed8 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    2ed8:	b480      	push	{r7}
    2eda:	b085      	sub	sp, #20
    2edc:	af00      	add	r7, sp, #0
    2ede:	60f8      	str	r0, [r7, #12]
    2ee0:	460b      	mov	r3, r1
    2ee2:	607a      	str	r2, [r7, #4]
    2ee4:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    2ee6:	7afa      	ldrb	r2, [r7, #11]
    2ee8:	68fb      	ldr	r3, [r7, #12]
    2eea:	3220      	adds	r2, #32
    2eec:	6879      	ldr	r1, [r7, #4]
    2eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2ef2:	bf00      	nop
    2ef4:	3714      	adds	r7, #20
    2ef6:	46bd      	mov	sp, r7
    2ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2efc:	4770      	bx	lr

00002efe <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    2efe:	b480      	push	{r7}
    2f00:	b083      	sub	sp, #12
    2f02:	af00      	add	r7, sp, #0
    2f04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    2f06:	687b      	ldr	r3, [r7, #4]
    2f08:	691b      	ldr	r3, [r3, #16]
    2f0a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2f0e:	687b      	ldr	r3, [r7, #4]
    2f10:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f12:	bf00      	nop
    2f14:	370c      	adds	r7, #12
    2f16:	46bd      	mov	sp, r7
    2f18:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f1c:	4770      	bx	lr

00002f1e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    2f1e:	b480      	push	{r7}
    2f20:	b083      	sub	sp, #12
    2f22:	af00      	add	r7, sp, #0
    2f24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    2f26:	687b      	ldr	r3, [r7, #4]
    2f28:	691b      	ldr	r3, [r3, #16]
    2f2a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f32:	bf00      	nop
    2f34:	370c      	adds	r7, #12
    2f36:	46bd      	mov	sp, r7
    2f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f3c:	4770      	bx	lr

00002f3e <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    2f3e:	b480      	push	{r7}
    2f40:	b083      	sub	sp, #12
    2f42:	af00      	add	r7, sp, #0
    2f44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    2f46:	687b      	ldr	r3, [r7, #4]
    2f48:	691b      	ldr	r3, [r3, #16]
    2f4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    2f4e:	687b      	ldr	r3, [r7, #4]
    2f50:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f52:	bf00      	nop
    2f54:	370c      	adds	r7, #12
    2f56:	46bd      	mov	sp, r7
    2f58:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f5c:	4770      	bx	lr

00002f5e <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    2f5e:	b480      	push	{r7}
    2f60:	b083      	sub	sp, #12
    2f62:	af00      	add	r7, sp, #0
    2f64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    2f66:	687b      	ldr	r3, [r7, #4]
    2f68:	691b      	ldr	r3, [r3, #16]
    2f6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    2f6e:	687b      	ldr	r3, [r7, #4]
    2f70:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f72:	bf00      	nop
    2f74:	370c      	adds	r7, #12
    2f76:	46bd      	mov	sp, r7
    2f78:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f7c:	4770      	bx	lr

00002f7e <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    2f7e:	b480      	push	{r7}
    2f80:	b083      	sub	sp, #12
    2f82:	af00      	add	r7, sp, #0
    2f84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	695b      	ldr	r3, [r3, #20]
    2f8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2f8e:	687b      	ldr	r3, [r7, #4]
    2f90:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f92:	bf00      	nop
    2f94:	370c      	adds	r7, #12
    2f96:	46bd      	mov	sp, r7
    2f98:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f9c:	4770      	bx	lr

00002f9e <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    2f9e:	b480      	push	{r7}
    2fa0:	b083      	sub	sp, #12
    2fa2:	af00      	add	r7, sp, #0
    2fa4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    2fa6:	687b      	ldr	r3, [r7, #4]
    2fa8:	695b      	ldr	r3, [r3, #20]
    2faa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    2fae:	687b      	ldr	r3, [r7, #4]
    2fb0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2fb2:	bf00      	nop
    2fb4:	370c      	adds	r7, #12
    2fb6:	46bd      	mov	sp, r7
    2fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fbc:	4770      	bx	lr

00002fbe <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    2fbe:	b480      	push	{r7}
    2fc0:	b083      	sub	sp, #12
    2fc2:	af00      	add	r7, sp, #0
    2fc4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    2fc6:	687b      	ldr	r3, [r7, #4]
    2fc8:	695b      	ldr	r3, [r3, #20]
    2fca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2fce:	687b      	ldr	r3, [r7, #4]
    2fd0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2fd2:	bf00      	nop
    2fd4:	370c      	adds	r7, #12
    2fd6:	46bd      	mov	sp, r7
    2fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fdc:	4770      	bx	lr

00002fde <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    2fde:	b480      	push	{r7}
    2fe0:	b083      	sub	sp, #12
    2fe2:	af00      	add	r7, sp, #0
    2fe4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    2fe6:	687b      	ldr	r3, [r7, #4]
    2fe8:	695b      	ldr	r3, [r3, #20]
    2fea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2fee:	687b      	ldr	r3, [r7, #4]
    2ff0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2ff2:	bf00      	nop
    2ff4:	370c      	adds	r7, #12
    2ff6:	46bd      	mov	sp, r7
    2ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ffc:	4770      	bx	lr

00002ffe <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    2ffe:	b480      	push	{r7}
    3000:	b083      	sub	sp, #12
    3002:	af00      	add	r7, sp, #0
    3004:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    3006:	687b      	ldr	r3, [r7, #4]
    3008:	695b      	ldr	r3, [r3, #20]
    300a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    300e:	687b      	ldr	r3, [r7, #4]
    3010:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3012:	bf00      	nop
    3014:	370c      	adds	r7, #12
    3016:	46bd      	mov	sp, r7
    3018:	f85d 7b04 	ldr.w	r7, [sp], #4
    301c:	4770      	bx	lr

0000301e <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    301e:	b480      	push	{r7}
    3020:	b083      	sub	sp, #12
    3022:	af00      	add	r7, sp, #0
    3024:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    3026:	687b      	ldr	r3, [r7, #4]
    3028:	695b      	ldr	r3, [r3, #20]
    302a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    302e:	687b      	ldr	r3, [r7, #4]
    3030:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3032:	bf00      	nop
    3034:	370c      	adds	r7, #12
    3036:	46bd      	mov	sp, r7
    3038:	f85d 7b04 	ldr.w	r7, [sp], #4
    303c:	4770      	bx	lr

0000303e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    303e:	b480      	push	{r7}
    3040:	b083      	sub	sp, #12
    3042:	af00      	add	r7, sp, #0
    3044:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	699b      	ldr	r3, [r3, #24]
    304a:	f043 0201 	orr.w	r2, r3, #1
    304e:	687b      	ldr	r3, [r7, #4]
    3050:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3052:	bf00      	nop
    3054:	370c      	adds	r7, #12
    3056:	46bd      	mov	sp, r7
    3058:	f85d 7b04 	ldr.w	r7, [sp], #4
    305c:	4770      	bx	lr

0000305e <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    305e:	b480      	push	{r7}
    3060:	b083      	sub	sp, #12
    3062:	af00      	add	r7, sp, #0
    3064:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    3066:	687b      	ldr	r3, [r7, #4]
    3068:	699b      	ldr	r3, [r3, #24]
    306a:	f043 0202 	orr.w	r2, r3, #2
    306e:	687b      	ldr	r3, [r7, #4]
    3070:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3072:	bf00      	nop
    3074:	370c      	adds	r7, #12
    3076:	46bd      	mov	sp, r7
    3078:	f85d 7b04 	ldr.w	r7, [sp], #4
    307c:	4770      	bx	lr

0000307e <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    307e:	b480      	push	{r7}
    3080:	b083      	sub	sp, #12
    3082:	af00      	add	r7, sp, #0
    3084:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    3086:	687b      	ldr	r3, [r7, #4]
    3088:	699b      	ldr	r3, [r3, #24]
    308a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    308e:	687b      	ldr	r3, [r7, #4]
    3090:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3092:	bf00      	nop
    3094:	370c      	adds	r7, #12
    3096:	46bd      	mov	sp, r7
    3098:	f85d 7b04 	ldr.w	r7, [sp], #4
    309c:	4770      	bx	lr

0000309e <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    309e:	b480      	push	{r7}
    30a0:	b083      	sub	sp, #12
    30a2:	af00      	add	r7, sp, #0
    30a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    30a6:	687b      	ldr	r3, [r7, #4]
    30a8:	699b      	ldr	r3, [r3, #24]
    30aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    30ae:	687b      	ldr	r3, [r7, #4]
    30b0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    30b2:	bf00      	nop
    30b4:	370c      	adds	r7, #12
    30b6:	46bd      	mov	sp, r7
    30b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    30bc:	4770      	bx	lr

000030be <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
    30be:	b480      	push	{r7}
    30c0:	b083      	sub	sp, #12
    30c2:	af00      	add	r7, sp, #0
    30c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    30c6:	687b      	ldr	r3, [r7, #4]
    30c8:	699b      	ldr	r3, [r3, #24]
    30ca:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    30ce:	687b      	ldr	r3, [r7, #4]
    30d0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    30d2:	bf00      	nop
    30d4:	370c      	adds	r7, #12
    30d6:	46bd      	mov	sp, r7
    30d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    30dc:	4770      	bx	lr

000030de <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    30de:	b480      	push	{r7}
    30e0:	b083      	sub	sp, #12
    30e2:	af00      	add	r7, sp, #0
    30e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    30e6:	687b      	ldr	r3, [r7, #4]
    30e8:	69db      	ldr	r3, [r3, #28]
    30ea:	f043 0220 	orr.w	r2, r3, #32
    30ee:	687b      	ldr	r3, [r7, #4]
    30f0:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    30f2:	bf00      	nop
    30f4:	370c      	adds	r7, #12
    30f6:	46bd      	mov	sp, r7
    30f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    30fc:	4770      	bx	lr

000030fe <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    30fe:	b480      	push	{r7}
    3100:	b083      	sub	sp, #12
    3102:	af00      	add	r7, sp, #0
    3104:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    3106:	687b      	ldr	r3, [r7, #4]
    3108:	69db      	ldr	r3, [r3, #28]
    310a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    310e:	687b      	ldr	r3, [r7, #4]
    3110:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3112:	bf00      	nop
    3114:	370c      	adds	r7, #12
    3116:	46bd      	mov	sp, r7
    3118:	f85d 7b04 	ldr.w	r7, [sp], #4
    311c:	4770      	bx	lr

0000311e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    311e:	b480      	push	{r7}
    3120:	b083      	sub	sp, #12
    3122:	af00      	add	r7, sp, #0
    3124:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    3126:	687b      	ldr	r3, [r7, #4]
    3128:	69db      	ldr	r3, [r3, #28]
    312a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    312e:	687b      	ldr	r3, [r7, #4]
    3130:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3132:	bf00      	nop
    3134:	370c      	adds	r7, #12
    3136:	46bd      	mov	sp, r7
    3138:	f85d 7b04 	ldr.w	r7, [sp], #4
    313c:	4770      	bx	lr

0000313e <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    313e:	b480      	push	{r7}
    3140:	b083      	sub	sp, #12
    3142:	af00      	add	r7, sp, #0
    3144:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    3146:	687b      	ldr	r3, [r7, #4]
    3148:	6a1b      	ldr	r3, [r3, #32]
    314a:	f043 0201 	orr.w	r2, r3, #1
    314e:	687b      	ldr	r3, [r7, #4]
    3150:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3152:	bf00      	nop
    3154:	370c      	adds	r7, #12
    3156:	46bd      	mov	sp, r7
    3158:	f85d 7b04 	ldr.w	r7, [sp], #4
    315c:	4770      	bx	lr

0000315e <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    315e:	b480      	push	{r7}
    3160:	b083      	sub	sp, #12
    3162:	af00      	add	r7, sp, #0
    3164:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    3166:	687b      	ldr	r3, [r7, #4]
    3168:	6a1b      	ldr	r3, [r3, #32]
    316a:	f043 0202 	orr.w	r2, r3, #2
    316e:	687b      	ldr	r3, [r7, #4]
    3170:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3172:	bf00      	nop
    3174:	370c      	adds	r7, #12
    3176:	46bd      	mov	sp, r7
    3178:	f85d 7b04 	ldr.w	r7, [sp], #4
    317c:	4770      	bx	lr

0000317e <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    317e:	b480      	push	{r7}
    3180:	b083      	sub	sp, #12
    3182:	af00      	add	r7, sp, #0
    3184:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    3186:	687b      	ldr	r3, [r7, #4]
    3188:	6a1b      	ldr	r3, [r3, #32]
    318a:	f043 0204 	orr.w	r2, r3, #4
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3192:	bf00      	nop
    3194:	370c      	adds	r7, #12
    3196:	46bd      	mov	sp, r7
    3198:	f85d 7b04 	ldr.w	r7, [sp], #4
    319c:	4770      	bx	lr

0000319e <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    319e:	b480      	push	{r7}
    31a0:	b083      	sub	sp, #12
    31a2:	af00      	add	r7, sp, #0
    31a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    31a6:	687b      	ldr	r3, [r7, #4]
    31a8:	6a1b      	ldr	r3, [r3, #32]
    31aa:	f043 0208 	orr.w	r2, r3, #8
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    31b2:	bf00      	nop
    31b4:	370c      	adds	r7, #12
    31b6:	46bd      	mov	sp, r7
    31b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    31bc:	4770      	bx	lr

000031be <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    31be:	b480      	push	{r7}
    31c0:	b083      	sub	sp, #12
    31c2:	af00      	add	r7, sp, #0
    31c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    31c6:	687b      	ldr	r3, [r7, #4]
    31c8:	6a1b      	ldr	r3, [r3, #32]
    31ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    31ce:	687b      	ldr	r3, [r7, #4]
    31d0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    31d2:	bf00      	nop
    31d4:	370c      	adds	r7, #12
    31d6:	46bd      	mov	sp, r7
    31d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    31dc:	4770      	bx	lr

000031de <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    31de:	b480      	push	{r7}
    31e0:	b085      	sub	sp, #20
    31e2:	af00      	add	r7, sp, #0
    31e4:	60f8      	str	r0, [r7, #12]
    31e6:	460b      	mov	r3, r1
    31e8:	607a      	str	r2, [r7, #4]
    31ea:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    31ec:	7afb      	ldrb	r3, [r7, #11]
    31ee:	68fa      	ldr	r2, [r7, #12]
    31f0:	01db      	lsls	r3, r3, #7
    31f2:	4413      	add	r3, r2
    31f4:	3308      	adds	r3, #8
    31f6:	687a      	ldr	r2, [r7, #4]
    31f8:	601a      	str	r2, [r3, #0]
}
    31fa:	bf00      	nop
    31fc:	3714      	adds	r7, #20
    31fe:	46bd      	mov	sp, r7
    3200:	f85d 7b04 	ldr.w	r7, [sp], #4
    3204:	4770      	bx	lr

00003206 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    3206:	b480      	push	{r7}
    3208:	b085      	sub	sp, #20
    320a:	af00      	add	r7, sp, #0
    320c:	60f8      	str	r0, [r7, #12]
    320e:	460b      	mov	r3, r1
    3210:	607a      	str	r2, [r7, #4]
    3212:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3214:	7afb      	ldrb	r3, [r7, #11]
    3216:	68fa      	ldr	r2, [r7, #12]
    3218:	01db      	lsls	r3, r3, #7
    321a:	4413      	add	r3, r2
    321c:	3304      	adds	r3, #4
    321e:	687a      	ldr	r2, [r7, #4]
    3220:	601a      	str	r2, [r3, #0]
}
    3222:	bf00      	nop
    3224:	3714      	adds	r7, #20
    3226:	46bd      	mov	sp, r7
    3228:	f85d 7b04 	ldr.w	r7, [sp], #4
    322c:	4770      	bx	lr

0000322e <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    322e:	b480      	push	{r7}
    3230:	b085      	sub	sp, #20
    3232:	af00      	add	r7, sp, #0
    3234:	60f8      	str	r0, [r7, #12]
    3236:	460b      	mov	r3, r1
    3238:	607a      	str	r2, [r7, #4]
    323a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    323c:	7afb      	ldrb	r3, [r7, #11]
    323e:	68fa      	ldr	r2, [r7, #12]
    3240:	01db      	lsls	r3, r3, #7
    3242:	4413      	add	r3, r2
    3244:	3318      	adds	r3, #24
    3246:	687a      	ldr	r2, [r7, #4]
    3248:	601a      	str	r2, [r3, #0]
}
    324a:	bf00      	nop
    324c:	3714      	adds	r7, #20
    324e:	46bd      	mov	sp, r7
    3250:	f85d 7b04 	ldr.w	r7, [sp], #4
    3254:	4770      	bx	lr

00003256 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    3256:	b480      	push	{r7}
    3258:	b085      	sub	sp, #20
    325a:	af00      	add	r7, sp, #0
    325c:	60f8      	str	r0, [r7, #12]
    325e:	460b      	mov	r3, r1
    3260:	607a      	str	r2, [r7, #4]
    3262:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3264:	7afb      	ldrb	r3, [r7, #11]
    3266:	68fa      	ldr	r2, [r7, #12]
    3268:	01db      	lsls	r3, r3, #7
    326a:	4413      	add	r3, r2
    326c:	3314      	adds	r3, #20
    326e:	687a      	ldr	r2, [r7, #4]
    3270:	601a      	str	r2, [r3, #0]
}
    3272:	bf00      	nop
    3274:	3714      	adds	r7, #20
    3276:	46bd      	mov	sp, r7
    3278:	f85d 7b04 	ldr.w	r7, [sp], #4
    327c:	4770      	bx	lr

0000327e <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    327e:	b480      	push	{r7}
    3280:	b085      	sub	sp, #20
    3282:	af00      	add	r7, sp, #0
    3284:	6078      	str	r0, [r7, #4]
    3286:	4608      	mov	r0, r1
    3288:	4611      	mov	r1, r2
    328a:	461a      	mov	r2, r3
    328c:	4603      	mov	r3, r0
    328e:	70fb      	strb	r3, [r7, #3]
    3290:	460b      	mov	r3, r1
    3292:	70bb      	strb	r3, [r7, #2]
    3294:	4613      	mov	r3, r2
    3296:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3298:	78fa      	ldrb	r2, [r7, #3]
    329a:	78bb      	ldrb	r3, [r7, #2]
    329c:	6879      	ldr	r1, [r7, #4]
    329e:	01d2      	lsls	r2, r2, #7
    32a0:	440a      	add	r2, r1
    32a2:	4413      	add	r3, r2
    32a4:	3330      	adds	r3, #48	; 0x30
    32a6:	781b      	ldrb	r3, [r3, #0]
    32a8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    32aa:	7bfb      	ldrb	r3, [r7, #15]
    32ac:	f023 030f 	bic.w	r3, r3, #15
    32b0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    32b2:	787b      	ldrb	r3, [r7, #1]
    32b4:	f003 030f 	and.w	r3, r3, #15
    32b8:	b2da      	uxtb	r2, r3
    32ba:	7bfb      	ldrb	r3, [r7, #15]
    32bc:	4313      	orrs	r3, r2
    32be:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    32c0:	78fa      	ldrb	r2, [r7, #3]
    32c2:	78bb      	ldrb	r3, [r7, #2]
    32c4:	6879      	ldr	r1, [r7, #4]
    32c6:	01d2      	lsls	r2, r2, #7
    32c8:	440a      	add	r2, r1
    32ca:	4413      	add	r3, r2
    32cc:	3330      	adds	r3, #48	; 0x30
    32ce:	7bfa      	ldrb	r2, [r7, #15]
    32d0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    32d2:	bf00      	nop
    32d4:	3714      	adds	r7, #20
    32d6:	46bd      	mov	sp, r7
    32d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    32dc:	4770      	bx	lr

000032de <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    32de:	b480      	push	{r7}
    32e0:	b085      	sub	sp, #20
    32e2:	af00      	add	r7, sp, #0
    32e4:	6078      	str	r0, [r7, #4]
    32e6:	4608      	mov	r0, r1
    32e8:	4611      	mov	r1, r2
    32ea:	461a      	mov	r2, r3
    32ec:	4603      	mov	r3, r0
    32ee:	70fb      	strb	r3, [r7, #3]
    32f0:	460b      	mov	r3, r1
    32f2:	70bb      	strb	r3, [r7, #2]
    32f4:	4613      	mov	r3, r2
    32f6:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    32f8:	78fa      	ldrb	r2, [r7, #3]
    32fa:	78bb      	ldrb	r3, [r7, #2]
    32fc:	6879      	ldr	r1, [r7, #4]
    32fe:	01d2      	lsls	r2, r2, #7
    3300:	440a      	add	r2, r1
    3302:	4413      	add	r3, r2
    3304:	3330      	adds	r3, #48	; 0x30
    3306:	781b      	ldrb	r3, [r3, #0]
    3308:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    330a:	7bfb      	ldrb	r3, [r7, #15]
    330c:	f003 030f 	and.w	r3, r3, #15
    3310:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    3312:	787b      	ldrb	r3, [r7, #1]
    3314:	011b      	lsls	r3, r3, #4
    3316:	b2da      	uxtb	r2, r3
    3318:	7bfb      	ldrb	r3, [r7, #15]
    331a:	4313      	orrs	r3, r2
    331c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    331e:	78fa      	ldrb	r2, [r7, #3]
    3320:	78bb      	ldrb	r3, [r7, #2]
    3322:	6879      	ldr	r1, [r7, #4]
    3324:	01d2      	lsls	r2, r2, #7
    3326:	440a      	add	r2, r1
    3328:	4413      	add	r3, r2
    332a:	3330      	adds	r3, #48	; 0x30
    332c:	7bfa      	ldrb	r2, [r7, #15]
    332e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3330:	bf00      	nop
    3332:	3714      	adds	r7, #20
    3334:	46bd      	mov	sp, r7
    3336:	f85d 7b04 	ldr.w	r7, [sp], #4
    333a:	4770      	bx	lr

0000333c <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    333c:	b480      	push	{r7}
    333e:	b085      	sub	sp, #20
    3340:	af00      	add	r7, sp, #0
    3342:	6078      	str	r0, [r7, #4]
    3344:	4608      	mov	r0, r1
    3346:	4611      	mov	r1, r2
    3348:	461a      	mov	r2, r3
    334a:	4603      	mov	r3, r0
    334c:	70fb      	strb	r3, [r7, #3]
    334e:	460b      	mov	r3, r1
    3350:	70bb      	strb	r3, [r7, #2]
    3352:	4613      	mov	r3, r2
    3354:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3356:	78fa      	ldrb	r2, [r7, #3]
    3358:	78bb      	ldrb	r3, [r7, #2]
    335a:	6879      	ldr	r1, [r7, #4]
    335c:	01d2      	lsls	r2, r2, #7
    335e:	440a      	add	r2, r1
    3360:	4413      	add	r3, r2
    3362:	3340      	adds	r3, #64	; 0x40
    3364:	781b      	ldrb	r3, [r3, #0]
    3366:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3368:	7bfb      	ldrb	r3, [r7, #15]
    336a:	f023 0301 	bic.w	r3, r3, #1
    336e:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3370:	787a      	ldrb	r2, [r7, #1]
    3372:	7bfb      	ldrb	r3, [r7, #15]
    3374:	4313      	orrs	r3, r2
    3376:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3378:	78fa      	ldrb	r2, [r7, #3]
    337a:	78bb      	ldrb	r3, [r7, #2]
    337c:	6879      	ldr	r1, [r7, #4]
    337e:	01d2      	lsls	r2, r2, #7
    3380:	440a      	add	r2, r1
    3382:	4413      	add	r3, r2
    3384:	3340      	adds	r3, #64	; 0x40
    3386:	7bfa      	ldrb	r2, [r7, #15]
    3388:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    338a:	bf00      	nop
    338c:	3714      	adds	r7, #20
    338e:	46bd      	mov	sp, r7
    3390:	f85d 7b04 	ldr.w	r7, [sp], #4
    3394:	4770      	bx	lr

00003396 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    3396:	b490      	push	{r4, r7}
    3398:	b082      	sub	sp, #8
    339a:	af00      	add	r7, sp, #0
    339c:	6078      	str	r0, [r7, #4]
    339e:	460b      	mov	r3, r1
    33a0:	70fb      	strb	r3, [r7, #3]
    33a2:	4613      	mov	r3, r2
    33a4:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    33a6:	78fa      	ldrb	r2, [r7, #3]
    33a8:	78bb      	ldrb	r3, [r7, #2]
    33aa:	78f8      	ldrb	r0, [r7, #3]
    33ac:	78b9      	ldrb	r1, [r7, #2]
    33ae:	687c      	ldr	r4, [r7, #4]
    33b0:	01c0      	lsls	r0, r0, #7
    33b2:	4420      	add	r0, r4
    33b4:	4401      	add	r1, r0
    33b6:	3140      	adds	r1, #64	; 0x40
    33b8:	7809      	ldrb	r1, [r1, #0]
    33ba:	b2c9      	uxtb	r1, r1
    33bc:	f041 0104 	orr.w	r1, r1, #4
    33c0:	b2c8      	uxtb	r0, r1
    33c2:	6879      	ldr	r1, [r7, #4]
    33c4:	01d2      	lsls	r2, r2, #7
    33c6:	440a      	add	r2, r1
    33c8:	4413      	add	r3, r2
    33ca:	3340      	adds	r3, #64	; 0x40
    33cc:	4602      	mov	r2, r0
    33ce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    33d0:	bf00      	nop
    33d2:	3708      	adds	r7, #8
    33d4:	46bd      	mov	sp, r7
    33d6:	bc90      	pop	{r4, r7}
    33d8:	4770      	bx	lr

000033da <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    33da:	b490      	push	{r4, r7}
    33dc:	b082      	sub	sp, #8
    33de:	af00      	add	r7, sp, #0
    33e0:	6078      	str	r0, [r7, #4]
    33e2:	460b      	mov	r3, r1
    33e4:	70fb      	strb	r3, [r7, #3]
    33e6:	4613      	mov	r3, r2
    33e8:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    33ea:	78fa      	ldrb	r2, [r7, #3]
    33ec:	78bb      	ldrb	r3, [r7, #2]
    33ee:	78f8      	ldrb	r0, [r7, #3]
    33f0:	78b9      	ldrb	r1, [r7, #2]
    33f2:	687c      	ldr	r4, [r7, #4]
    33f4:	01c0      	lsls	r0, r0, #7
    33f6:	4420      	add	r0, r4
    33f8:	4401      	add	r1, r0
    33fa:	3140      	adds	r1, #64	; 0x40
    33fc:	7809      	ldrb	r1, [r1, #0]
    33fe:	b2c9      	uxtb	r1, r1
    3400:	f021 0104 	bic.w	r1, r1, #4
    3404:	b2c8      	uxtb	r0, r1
    3406:	6879      	ldr	r1, [r7, #4]
    3408:	01d2      	lsls	r2, r2, #7
    340a:	440a      	add	r2, r1
    340c:	4413      	add	r3, r2
    340e:	3340      	adds	r3, #64	; 0x40
    3410:	4602      	mov	r2, r0
    3412:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3414:	bf00      	nop
    3416:	3708      	adds	r7, #8
    3418:	46bd      	mov	sp, r7
    341a:	bc90      	pop	{r4, r7}
    341c:	4770      	bx	lr

0000341e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    341e:	b480      	push	{r7}
    3420:	b085      	sub	sp, #20
    3422:	af00      	add	r7, sp, #0
    3424:	60f8      	str	r0, [r7, #12]
    3426:	460b      	mov	r3, r1
    3428:	607a      	str	r2, [r7, #4]
    342a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    342c:	7afb      	ldrb	r3, [r7, #11]
    342e:	68fa      	ldr	r2, [r7, #12]
    3430:	01db      	lsls	r3, r3, #7
    3432:	4413      	add	r3, r2
    3434:	3328      	adds	r3, #40	; 0x28
    3436:	687a      	ldr	r2, [r7, #4]
    3438:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    343a:	bf00      	nop
    343c:	3714      	adds	r7, #20
    343e:	46bd      	mov	sp, r7
    3440:	f85d 7b04 	ldr.w	r7, [sp], #4
    3444:	4770      	bx	lr
	...

00003448 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    3448:	b580      	push	{r7, lr}
    344a:	b082      	sub	sp, #8
    344c:	af00      	add	r7, sp, #0
    344e:	4603      	mov	r3, r0
    3450:	6039      	str	r1, [r7, #0]
    3452:	71fb      	strb	r3, [r7, #7]
    3454:	4613      	mov	r3, r2
    3456:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    3458:	79bb      	ldrb	r3, [r7, #6]
    345a:	2b01      	cmp	r3, #1
    345c:	d01c      	beq.n	3498 <_gpio_set_direction+0x50>
    345e:	2b02      	cmp	r3, #2
    3460:	d037      	beq.n	34d2 <_gpio_set_direction+0x8a>
    3462:	2b00      	cmp	r3, #0
    3464:	d14e      	bne.n	3504 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    3466:	79fb      	ldrb	r3, [r7, #7]
    3468:	683a      	ldr	r2, [r7, #0]
    346a:	4619      	mov	r1, r3
    346c:	482a      	ldr	r0, [pc, #168]	; (3518 <_gpio_set_direction+0xd0>)
    346e:	4b2b      	ldr	r3, [pc, #172]	; (351c <_gpio_set_direction+0xd4>)
    3470:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    3472:	683b      	ldr	r3, [r7, #0]
    3474:	b29b      	uxth	r3, r3
    3476:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    347a:	79fb      	ldrb	r3, [r7, #7]
    347c:	4619      	mov	r1, r3
    347e:	4826      	ldr	r0, [pc, #152]	; (3518 <_gpio_set_direction+0xd0>)
    3480:	4b27      	ldr	r3, [pc, #156]	; (3520 <_gpio_set_direction+0xd8>)
    3482:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3484:	683b      	ldr	r3, [r7, #0]
    3486:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    3488:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    348c:	79fb      	ldrb	r3, [r7, #7]
    348e:	4619      	mov	r1, r3
    3490:	4821      	ldr	r0, [pc, #132]	; (3518 <_gpio_set_direction+0xd0>)
    3492:	4b23      	ldr	r3, [pc, #140]	; (3520 <_gpio_set_direction+0xd8>)
    3494:	4798      	blx	r3
		break;
    3496:	e03a      	b.n	350e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    3498:	79fb      	ldrb	r3, [r7, #7]
    349a:	683a      	ldr	r2, [r7, #0]
    349c:	4619      	mov	r1, r3
    349e:	481e      	ldr	r0, [pc, #120]	; (3518 <_gpio_set_direction+0xd0>)
    34a0:	4b1e      	ldr	r3, [pc, #120]	; (351c <_gpio_set_direction+0xd4>)
    34a2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    34a4:	683b      	ldr	r3, [r7, #0]
    34a6:	b29b      	uxth	r3, r3
    34a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    34ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    34b0:	79f9      	ldrb	r1, [r7, #7]
    34b2:	461a      	mov	r2, r3
    34b4:	4818      	ldr	r0, [pc, #96]	; (3518 <_gpio_set_direction+0xd0>)
    34b6:	4b1a      	ldr	r3, [pc, #104]	; (3520 <_gpio_set_direction+0xd8>)
    34b8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    34ba:	683b      	ldr	r3, [r7, #0]
    34bc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    34be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    34c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    34c6:	79f9      	ldrb	r1, [r7, #7]
    34c8:	461a      	mov	r2, r3
    34ca:	4813      	ldr	r0, [pc, #76]	; (3518 <_gpio_set_direction+0xd0>)
    34cc:	4b14      	ldr	r3, [pc, #80]	; (3520 <_gpio_set_direction+0xd8>)
    34ce:	4798      	blx	r3
		break;
    34d0:	e01d      	b.n	350e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    34d2:	79fb      	ldrb	r3, [r7, #7]
    34d4:	683a      	ldr	r2, [r7, #0]
    34d6:	4619      	mov	r1, r3
    34d8:	480f      	ldr	r0, [pc, #60]	; (3518 <_gpio_set_direction+0xd0>)
    34da:	4b12      	ldr	r3, [pc, #72]	; (3524 <_gpio_set_direction+0xdc>)
    34dc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    34de:	683b      	ldr	r3, [r7, #0]
    34e0:	b29b      	uxth	r3, r3
    34e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    34e6:	79fb      	ldrb	r3, [r7, #7]
    34e8:	4619      	mov	r1, r3
    34ea:	480b      	ldr	r0, [pc, #44]	; (3518 <_gpio_set_direction+0xd0>)
    34ec:	4b0c      	ldr	r3, [pc, #48]	; (3520 <_gpio_set_direction+0xd8>)
    34ee:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    34f0:	683b      	ldr	r3, [r7, #0]
    34f2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    34f4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    34f8:	79fb      	ldrb	r3, [r7, #7]
    34fa:	4619      	mov	r1, r3
    34fc:	4806      	ldr	r0, [pc, #24]	; (3518 <_gpio_set_direction+0xd0>)
    34fe:	4b08      	ldr	r3, [pc, #32]	; (3520 <_gpio_set_direction+0xd8>)
    3500:	4798      	blx	r3
		break;
    3502:	e004      	b.n	350e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    3504:	2246      	movs	r2, #70	; 0x46
    3506:	4908      	ldr	r1, [pc, #32]	; (3528 <_gpio_set_direction+0xe0>)
    3508:	2000      	movs	r0, #0
    350a:	4b08      	ldr	r3, [pc, #32]	; (352c <_gpio_set_direction+0xe4>)
    350c:	4798      	blx	r3
	}
}
    350e:	bf00      	nop
    3510:	3708      	adds	r7, #8
    3512:	46bd      	mov	sp, r7
    3514:	bd80      	pop	{r7, pc}
    3516:	bf00      	nop
    3518:	41008000 	.word	0x41008000
    351c:	00003207 	.word	0x00003207
    3520:	0000341f 	.word	0x0000341f
    3524:	000031df 	.word	0x000031df
    3528:	00018364 	.word	0x00018364
    352c:	000065d9 	.word	0x000065d9

00003530 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    3530:	b580      	push	{r7, lr}
    3532:	b082      	sub	sp, #8
    3534:	af00      	add	r7, sp, #0
    3536:	4603      	mov	r3, r0
    3538:	6039      	str	r1, [r7, #0]
    353a:	71fb      	strb	r3, [r7, #7]
    353c:	4613      	mov	r3, r2
    353e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    3540:	79bb      	ldrb	r3, [r7, #6]
    3542:	2b00      	cmp	r3, #0
    3544:	d006      	beq.n	3554 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    3546:	79fb      	ldrb	r3, [r7, #7]
    3548:	683a      	ldr	r2, [r7, #0]
    354a:	4619      	mov	r1, r3
    354c:	4806      	ldr	r0, [pc, #24]	; (3568 <_gpio_set_level+0x38>)
    354e:	4b07      	ldr	r3, [pc, #28]	; (356c <_gpio_set_level+0x3c>)
    3550:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    3552:	e005      	b.n	3560 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    3554:	79fb      	ldrb	r3, [r7, #7]
    3556:	683a      	ldr	r2, [r7, #0]
    3558:	4619      	mov	r1, r3
    355a:	4803      	ldr	r0, [pc, #12]	; (3568 <_gpio_set_level+0x38>)
    355c:	4b04      	ldr	r3, [pc, #16]	; (3570 <_gpio_set_level+0x40>)
    355e:	4798      	blx	r3
}
    3560:	bf00      	nop
    3562:	3708      	adds	r7, #8
    3564:	46bd      	mov	sp, r7
    3566:	bd80      	pop	{r7, pc}
    3568:	41008000 	.word	0x41008000
    356c:	0000322f 	.word	0x0000322f
    3570:	00003257 	.word	0x00003257

00003574 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    3574:	b580      	push	{r7, lr}
    3576:	b082      	sub	sp, #8
    3578:	af00      	add	r7, sp, #0
    357a:	4603      	mov	r3, r0
    357c:	71fb      	strb	r3, [r7, #7]
    357e:	460b      	mov	r3, r1
    3580:	71bb      	strb	r3, [r7, #6]
    3582:	4613      	mov	r3, r2
    3584:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    3586:	797b      	ldrb	r3, [r7, #5]
    3588:	2b01      	cmp	r3, #1
    358a:	d00a      	beq.n	35a2 <_gpio_set_pin_pull_mode+0x2e>
    358c:	2b02      	cmp	r3, #2
    358e:	d01f      	beq.n	35d0 <_gpio_set_pin_pull_mode+0x5c>
    3590:	2b00      	cmp	r3, #0
    3592:	d134      	bne.n	35fe <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    3594:	79ba      	ldrb	r2, [r7, #6]
    3596:	79fb      	ldrb	r3, [r7, #7]
    3598:	4619      	mov	r1, r3
    359a:	481e      	ldr	r0, [pc, #120]	; (3614 <_gpio_set_pin_pull_mode+0xa0>)
    359c:	4b1e      	ldr	r3, [pc, #120]	; (3618 <_gpio_set_pin_pull_mode+0xa4>)
    359e:	4798      	blx	r3
		break;
    35a0:	e033      	b.n	360a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    35a2:	79bb      	ldrb	r3, [r7, #6]
    35a4:	2201      	movs	r2, #1
    35a6:	409a      	lsls	r2, r3
    35a8:	79fb      	ldrb	r3, [r7, #7]
    35aa:	4619      	mov	r1, r3
    35ac:	4819      	ldr	r0, [pc, #100]	; (3614 <_gpio_set_pin_pull_mode+0xa0>)
    35ae:	4b1b      	ldr	r3, [pc, #108]	; (361c <_gpio_set_pin_pull_mode+0xa8>)
    35b0:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    35b2:	79ba      	ldrb	r2, [r7, #6]
    35b4:	79fb      	ldrb	r3, [r7, #7]
    35b6:	4619      	mov	r1, r3
    35b8:	4816      	ldr	r0, [pc, #88]	; (3614 <_gpio_set_pin_pull_mode+0xa0>)
    35ba:	4b19      	ldr	r3, [pc, #100]	; (3620 <_gpio_set_pin_pull_mode+0xac>)
    35bc:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    35be:	79bb      	ldrb	r3, [r7, #6]
    35c0:	2201      	movs	r2, #1
    35c2:	409a      	lsls	r2, r3
    35c4:	79fb      	ldrb	r3, [r7, #7]
    35c6:	4619      	mov	r1, r3
    35c8:	4812      	ldr	r0, [pc, #72]	; (3614 <_gpio_set_pin_pull_mode+0xa0>)
    35ca:	4b16      	ldr	r3, [pc, #88]	; (3624 <_gpio_set_pin_pull_mode+0xb0>)
    35cc:	4798      	blx	r3
		break;
    35ce:	e01c      	b.n	360a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    35d0:	79bb      	ldrb	r3, [r7, #6]
    35d2:	2201      	movs	r2, #1
    35d4:	409a      	lsls	r2, r3
    35d6:	79fb      	ldrb	r3, [r7, #7]
    35d8:	4619      	mov	r1, r3
    35da:	480e      	ldr	r0, [pc, #56]	; (3614 <_gpio_set_pin_pull_mode+0xa0>)
    35dc:	4b0f      	ldr	r3, [pc, #60]	; (361c <_gpio_set_pin_pull_mode+0xa8>)
    35de:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    35e0:	79ba      	ldrb	r2, [r7, #6]
    35e2:	79fb      	ldrb	r3, [r7, #7]
    35e4:	4619      	mov	r1, r3
    35e6:	480b      	ldr	r0, [pc, #44]	; (3614 <_gpio_set_pin_pull_mode+0xa0>)
    35e8:	4b0d      	ldr	r3, [pc, #52]	; (3620 <_gpio_set_pin_pull_mode+0xac>)
    35ea:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    35ec:	79bb      	ldrb	r3, [r7, #6]
    35ee:	2201      	movs	r2, #1
    35f0:	409a      	lsls	r2, r3
    35f2:	79fb      	ldrb	r3, [r7, #7]
    35f4:	4619      	mov	r1, r3
    35f6:	4807      	ldr	r0, [pc, #28]	; (3614 <_gpio_set_pin_pull_mode+0xa0>)
    35f8:	4b0b      	ldr	r3, [pc, #44]	; (3628 <_gpio_set_pin_pull_mode+0xb4>)
    35fa:	4798      	blx	r3
		break;
    35fc:	e005      	b.n	360a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    35fe:	2289      	movs	r2, #137	; 0x89
    3600:	490a      	ldr	r1, [pc, #40]	; (362c <_gpio_set_pin_pull_mode+0xb8>)
    3602:	2000      	movs	r0, #0
    3604:	4b0a      	ldr	r3, [pc, #40]	; (3630 <_gpio_set_pin_pull_mode+0xbc>)
    3606:	4798      	blx	r3
		break;
    3608:	bf00      	nop
	}
}
    360a:	bf00      	nop
    360c:	3708      	adds	r7, #8
    360e:	46bd      	mov	sp, r7
    3610:	bd80      	pop	{r7, pc}
    3612:	bf00      	nop
    3614:	41008000 	.word	0x41008000
    3618:	000033db 	.word	0x000033db
    361c:	00003207 	.word	0x00003207
    3620:	00003397 	.word	0x00003397
    3624:	0000322f 	.word	0x0000322f
    3628:	00003257 	.word	0x00003257
    362c:	00018364 	.word	0x00018364
    3630:	000065d9 	.word	0x000065d9

00003634 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    3634:	b590      	push	{r4, r7, lr}
    3636:	b085      	sub	sp, #20
    3638:	af00      	add	r7, sp, #0
    363a:	6078      	str	r0, [r7, #4]
    363c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	095b      	lsrs	r3, r3, #5
    3642:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    3644:	687b      	ldr	r3, [r7, #4]
    3646:	b2db      	uxtb	r3, r3
    3648:	f003 031f 	and.w	r3, r3, #31
    364c:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    364e:	683b      	ldr	r3, [r7, #0]
    3650:	f1b3 3fff 	cmp.w	r3, #4294967295
    3654:	d106      	bne.n	3664 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    3656:	7bba      	ldrb	r2, [r7, #14]
    3658:	7bf9      	ldrb	r1, [r7, #15]
    365a:	2300      	movs	r3, #0
    365c:	4812      	ldr	r0, [pc, #72]	; (36a8 <_gpio_set_pin_function+0x74>)
    365e:	4c13      	ldr	r4, [pc, #76]	; (36ac <_gpio_set_pin_function+0x78>)
    3660:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    3662:	e01d      	b.n	36a0 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    3664:	7bba      	ldrb	r2, [r7, #14]
    3666:	7bf9      	ldrb	r1, [r7, #15]
    3668:	2301      	movs	r3, #1
    366a:	480f      	ldr	r0, [pc, #60]	; (36a8 <_gpio_set_pin_function+0x74>)
    366c:	4c0f      	ldr	r4, [pc, #60]	; (36ac <_gpio_set_pin_function+0x78>)
    366e:	47a0      	blx	r4
		if (pin & 1) {
    3670:	7bbb      	ldrb	r3, [r7, #14]
    3672:	f003 0301 	and.w	r3, r3, #1
    3676:	2b00      	cmp	r3, #0
    3678:	d009      	beq.n	368e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    367a:	7bbb      	ldrb	r3, [r7, #14]
    367c:	085b      	lsrs	r3, r3, #1
    367e:	b2da      	uxtb	r2, r3
    3680:	683b      	ldr	r3, [r7, #0]
    3682:	b2db      	uxtb	r3, r3
    3684:	7bf9      	ldrb	r1, [r7, #15]
    3686:	4808      	ldr	r0, [pc, #32]	; (36a8 <_gpio_set_pin_function+0x74>)
    3688:	4c09      	ldr	r4, [pc, #36]	; (36b0 <_gpio_set_pin_function+0x7c>)
    368a:	47a0      	blx	r4
}
    368c:	e008      	b.n	36a0 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    368e:	7bbb      	ldrb	r3, [r7, #14]
    3690:	085b      	lsrs	r3, r3, #1
    3692:	b2da      	uxtb	r2, r3
    3694:	683b      	ldr	r3, [r7, #0]
    3696:	b2db      	uxtb	r3, r3
    3698:	7bf9      	ldrb	r1, [r7, #15]
    369a:	4803      	ldr	r0, [pc, #12]	; (36a8 <_gpio_set_pin_function+0x74>)
    369c:	4c05      	ldr	r4, [pc, #20]	; (36b4 <_gpio_set_pin_function+0x80>)
    369e:	47a0      	blx	r4
}
    36a0:	bf00      	nop
    36a2:	3714      	adds	r7, #20
    36a4:	46bd      	mov	sp, r7
    36a6:	bd90      	pop	{r4, r7, pc}
    36a8:	41008000 	.word	0x41008000
    36ac:	0000333d 	.word	0x0000333d
    36b0:	000032df 	.word	0x000032df
    36b4:	0000327f 	.word	0x0000327f

000036b8 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    36b8:	b580      	push	{r7, lr}
    36ba:	b082      	sub	sp, #8
    36bc:	af00      	add	r7, sp, #0
    36be:	4603      	mov	r3, r0
    36c0:	460a      	mov	r2, r1
    36c2:	71fb      	strb	r3, [r7, #7]
    36c4:	4613      	mov	r3, r2
    36c6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    36c8:	79fb      	ldrb	r3, [r7, #7]
    36ca:	095b      	lsrs	r3, r3, #5
    36cc:	b2d8      	uxtb	r0, r3
    36ce:	79fb      	ldrb	r3, [r7, #7]
    36d0:	f003 031f 	and.w	r3, r3, #31
    36d4:	b2db      	uxtb	r3, r3
    36d6:	79ba      	ldrb	r2, [r7, #6]
    36d8:	4619      	mov	r1, r3
    36da:	4b03      	ldr	r3, [pc, #12]	; (36e8 <gpio_set_pin_pull_mode+0x30>)
    36dc:	4798      	blx	r3
}
    36de:	bf00      	nop
    36e0:	3708      	adds	r7, #8
    36e2:	46bd      	mov	sp, r7
    36e4:	bd80      	pop	{r7, pc}
    36e6:	bf00      	nop
    36e8:	00003575 	.word	0x00003575

000036ec <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    36ec:	b580      	push	{r7, lr}
    36ee:	b082      	sub	sp, #8
    36f0:	af00      	add	r7, sp, #0
    36f2:	6078      	str	r0, [r7, #4]
    36f4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    36f6:	6839      	ldr	r1, [r7, #0]
    36f8:	6878      	ldr	r0, [r7, #4]
    36fa:	4b03      	ldr	r3, [pc, #12]	; (3708 <gpio_set_pin_function+0x1c>)
    36fc:	4798      	blx	r3
}
    36fe:	bf00      	nop
    3700:	3708      	adds	r7, #8
    3702:	46bd      	mov	sp, r7
    3704:	bd80      	pop	{r7, pc}
    3706:	bf00      	nop
    3708:	00003635 	.word	0x00003635

0000370c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    370c:	b580      	push	{r7, lr}
    370e:	b082      	sub	sp, #8
    3710:	af00      	add	r7, sp, #0
    3712:	4603      	mov	r3, r0
    3714:	460a      	mov	r2, r1
    3716:	71fb      	strb	r3, [r7, #7]
    3718:	4613      	mov	r3, r2
    371a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    371c:	79fb      	ldrb	r3, [r7, #7]
    371e:	095b      	lsrs	r3, r3, #5
    3720:	b2d8      	uxtb	r0, r3
    3722:	79fb      	ldrb	r3, [r7, #7]
    3724:	f003 031f 	and.w	r3, r3, #31
    3728:	2201      	movs	r2, #1
    372a:	fa02 f303 	lsl.w	r3, r2, r3
    372e:	79ba      	ldrb	r2, [r7, #6]
    3730:	4619      	mov	r1, r3
    3732:	4b03      	ldr	r3, [pc, #12]	; (3740 <gpio_set_pin_direction+0x34>)
    3734:	4798      	blx	r3
}
    3736:	bf00      	nop
    3738:	3708      	adds	r7, #8
    373a:	46bd      	mov	sp, r7
    373c:	bd80      	pop	{r7, pc}
    373e:	bf00      	nop
    3740:	00003449 	.word	0x00003449

00003744 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    3744:	b580      	push	{r7, lr}
    3746:	b082      	sub	sp, #8
    3748:	af00      	add	r7, sp, #0
    374a:	4603      	mov	r3, r0
    374c:	460a      	mov	r2, r1
    374e:	71fb      	strb	r3, [r7, #7]
    3750:	4613      	mov	r3, r2
    3752:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3754:	79fb      	ldrb	r3, [r7, #7]
    3756:	095b      	lsrs	r3, r3, #5
    3758:	b2d8      	uxtb	r0, r3
    375a:	79fb      	ldrb	r3, [r7, #7]
    375c:	f003 031f 	and.w	r3, r3, #31
    3760:	2201      	movs	r2, #1
    3762:	fa02 f303 	lsl.w	r3, r2, r3
    3766:	79ba      	ldrb	r2, [r7, #6]
    3768:	4619      	mov	r1, r3
    376a:	4b03      	ldr	r3, [pc, #12]	; (3778 <gpio_set_pin_level+0x34>)
    376c:	4798      	blx	r3
}
    376e:	bf00      	nop
    3770:	3708      	adds	r7, #8
    3772:	46bd      	mov	sp, r7
    3774:	bd80      	pop	{r7, pc}
    3776:	bf00      	nop
    3778:	00003531 	.word	0x00003531

0000377c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    377c:	b580      	push	{r7, lr}
    377e:	af00      	add	r7, sp, #0
	_init_chip();
    3780:	4b01      	ldr	r3, [pc, #4]	; (3788 <init_mcu+0xc>)
    3782:	4798      	blx	r3
}
    3784:	bf00      	nop
    3786:	bd80      	pop	{r7, pc}
    3788:	000071e1 	.word	0x000071e1

0000378c <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    378c:	b580      	push	{r7, lr}
    378e:	b082      	sub	sp, #8
    3790:	af00      	add	r7, sp, #0
    3792:	6078      	str	r0, [r7, #4]
    3794:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    3796:	687b      	ldr	r3, [r7, #4]
    3798:	2b00      	cmp	r3, #0
    379a:	d004      	beq.n	37a6 <wdt_init+0x1a>
    379c:	683b      	ldr	r3, [r7, #0]
    379e:	2b00      	cmp	r3, #0
    37a0:	d001      	beq.n	37a6 <wdt_init+0x1a>
    37a2:	2301      	movs	r3, #1
    37a4:	e000      	b.n	37a8 <wdt_init+0x1c>
    37a6:	2300      	movs	r3, #0
    37a8:	f003 0301 	and.w	r3, r3, #1
    37ac:	b2db      	uxtb	r3, r3
    37ae:	2248      	movs	r2, #72	; 0x48
    37b0:	4907      	ldr	r1, [pc, #28]	; (37d0 <wdt_init+0x44>)
    37b2:	4618      	mov	r0, r3
    37b4:	4b07      	ldr	r3, [pc, #28]	; (37d4 <wdt_init+0x48>)
    37b6:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    37b8:	687b      	ldr	r3, [r7, #4]
    37ba:	683a      	ldr	r2, [r7, #0]
    37bc:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    37be:	687b      	ldr	r3, [r7, #4]
    37c0:	4618      	mov	r0, r3
    37c2:	4b05      	ldr	r3, [pc, #20]	; (37d8 <wdt_init+0x4c>)
    37c4:	4798      	blx	r3
    37c6:	4603      	mov	r3, r0
}
    37c8:	4618      	mov	r0, r3
    37ca:	3708      	adds	r7, #8
    37cc:	46bd      	mov	sp, r7
    37ce:	bd80      	pop	{r7, pc}
    37d0:	00018380 	.word	0x00018380
    37d4:	000065d9 	.word	0x000065d9
    37d8:	0000e295 	.word	0x0000e295

000037dc <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    37dc:	b580      	push	{r7, lr}
    37de:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    37e0:	4804      	ldr	r0, [pc, #16]	; (37f4 <CRC_CALC_init+0x18>)
    37e2:	4b05      	ldr	r3, [pc, #20]	; (37f8 <CRC_CALC_init+0x1c>)
    37e4:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    37e6:	4905      	ldr	r1, [pc, #20]	; (37fc <CRC_CALC_init+0x20>)
    37e8:	4805      	ldr	r0, [pc, #20]	; (3800 <CRC_CALC_init+0x24>)
    37ea:	4b06      	ldr	r3, [pc, #24]	; (3804 <CRC_CALC_init+0x28>)
    37ec:	4798      	blx	r3
}
    37ee:	bf00      	nop
    37f0:	bd80      	pop	{r7, pc}
    37f2:	bf00      	nop
    37f4:	40000800 	.word	0x40000800
    37f8:	0000305f 	.word	0x0000305f
    37fc:	41002000 	.word	0x41002000
    3800:	20005144 	.word	0x20005144
    3804:	00004949 	.word	0x00004949

00003808 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    3808:	b580      	push	{r7, lr}
    380a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    380c:	2244      	movs	r2, #68	; 0x44
    380e:	2104      	movs	r1, #4
    3810:	4825      	ldr	r0, [pc, #148]	; (38a8 <EXTERNAL_IRQ_0_init+0xa0>)
    3812:	4b26      	ldr	r3, [pc, #152]	; (38ac <EXTERNAL_IRQ_0_init+0xa4>)
    3814:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    3816:	4826      	ldr	r0, [pc, #152]	; (38b0 <EXTERNAL_IRQ_0_init+0xa8>)
    3818:	4b26      	ldr	r3, [pc, #152]	; (38b4 <EXTERNAL_IRQ_0_init+0xac>)
    381a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    381c:	2101      	movs	r1, #1
    381e:	2040      	movs	r0, #64	; 0x40
    3820:	4b25      	ldr	r3, [pc, #148]	; (38b8 <EXTERNAL_IRQ_0_init+0xb0>)
    3822:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    3824:	2100      	movs	r1, #0
    3826:	2040      	movs	r0, #64	; 0x40
    3828:	4b24      	ldr	r3, [pc, #144]	; (38bc <EXTERNAL_IRQ_0_init+0xb4>)
    382a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    382c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    3830:	2040      	movs	r0, #64	; 0x40
    3832:	4b23      	ldr	r3, [pc, #140]	; (38c0 <EXTERNAL_IRQ_0_init+0xb8>)
    3834:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    3836:	2101      	movs	r1, #1
    3838:	2004      	movs	r0, #4
    383a:	4b1f      	ldr	r3, [pc, #124]	; (38b8 <EXTERNAL_IRQ_0_init+0xb0>)
    383c:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    383e:	2102      	movs	r1, #2
    3840:	2004      	movs	r0, #4
    3842:	4b1e      	ldr	r3, [pc, #120]	; (38bc <EXTERNAL_IRQ_0_init+0xb4>)
    3844:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    3846:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    384a:	2004      	movs	r0, #4
    384c:	4b1c      	ldr	r3, [pc, #112]	; (38c0 <EXTERNAL_IRQ_0_init+0xb8>)
    384e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    3850:	2101      	movs	r1, #1
    3852:	2005      	movs	r0, #5
    3854:	4b18      	ldr	r3, [pc, #96]	; (38b8 <EXTERNAL_IRQ_0_init+0xb0>)
    3856:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    3858:	2102      	movs	r1, #2
    385a:	2005      	movs	r0, #5
    385c:	4b17      	ldr	r3, [pc, #92]	; (38bc <EXTERNAL_IRQ_0_init+0xb4>)
    385e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    3860:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    3864:	2005      	movs	r0, #5
    3866:	4b16      	ldr	r3, [pc, #88]	; (38c0 <EXTERNAL_IRQ_0_init+0xb8>)
    3868:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    386a:	2101      	movs	r1, #1
    386c:	2056      	movs	r0, #86	; 0x56
    386e:	4b12      	ldr	r3, [pc, #72]	; (38b8 <EXTERNAL_IRQ_0_init+0xb0>)
    3870:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    3872:	2102      	movs	r1, #2
    3874:	2056      	movs	r0, #86	; 0x56
    3876:	4b11      	ldr	r3, [pc, #68]	; (38bc <EXTERNAL_IRQ_0_init+0xb4>)
    3878:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    387a:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    387e:	2056      	movs	r0, #86	; 0x56
    3880:	4b0f      	ldr	r3, [pc, #60]	; (38c0 <EXTERNAL_IRQ_0_init+0xb8>)
    3882:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    3884:	2101      	movs	r1, #1
    3886:	2057      	movs	r0, #87	; 0x57
    3888:	4b0b      	ldr	r3, [pc, #44]	; (38b8 <EXTERNAL_IRQ_0_init+0xb0>)
    388a:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    388c:	2102      	movs	r1, #2
    388e:	2057      	movs	r0, #87	; 0x57
    3890:	4b0a      	ldr	r3, [pc, #40]	; (38bc <EXTERNAL_IRQ_0_init+0xb4>)
    3892:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    3894:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    3898:	2057      	movs	r0, #87	; 0x57
    389a:	4b09      	ldr	r3, [pc, #36]	; (38c0 <EXTERNAL_IRQ_0_init+0xb8>)
    389c:	4798      	blx	r3

	ext_irq_init();
    389e:	4b09      	ldr	r3, [pc, #36]	; (38c4 <EXTERNAL_IRQ_0_init+0xbc>)
    38a0:	4798      	blx	r3
}
    38a2:	bf00      	nop
    38a4:	bd80      	pop	{r7, pc}
    38a6:	bf00      	nop
    38a8:	40001c00 	.word	0x40001c00
    38ac:	00002ed9 	.word	0x00002ed9
    38b0:	40000800 	.word	0x40000800
    38b4:	00002fbf 	.word	0x00002fbf
    38b8:	0000370d 	.word	0x0000370d
    38bc:	000036b9 	.word	0x000036b9
    38c0:	000036ed 	.word	0x000036ed
    38c4:	00004aad 	.word	0x00004aad

000038c8 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    38c8:	b580      	push	{r7, lr}
    38ca:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    38cc:	2244      	movs	r2, #68	; 0x44
    38ce:	210b      	movs	r1, #11
    38d0:	4804      	ldr	r0, [pc, #16]	; (38e4 <EVENT_SYSTEM_0_init+0x1c>)
    38d2:	4b05      	ldr	r3, [pc, #20]	; (38e8 <EVENT_SYSTEM_0_init+0x20>)
    38d4:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    38d6:	4805      	ldr	r0, [pc, #20]	; (38ec <EVENT_SYSTEM_0_init+0x24>)
    38d8:	4b05      	ldr	r3, [pc, #20]	; (38f0 <EVENT_SYSTEM_0_init+0x28>)
    38da:	4798      	blx	r3

	event_system_init();
    38dc:	4b05      	ldr	r3, [pc, #20]	; (38f4 <EVENT_SYSTEM_0_init+0x2c>)
    38de:	4798      	blx	r3
}
    38e0:	bf00      	nop
    38e2:	bd80      	pop	{r7, pc}
    38e4:	40001c00 	.word	0x40001c00
    38e8:	00002ed9 	.word	0x00002ed9
    38ec:	40000800 	.word	0x40000800
    38f0:	0000307f 	.word	0x0000307f
    38f4:	00004a99 	.word	0x00004a99

000038f8 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    38f8:	b580      	push	{r7, lr}
    38fa:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    38fc:	2101      	movs	r1, #1
    38fe:	202b      	movs	r0, #43	; 0x2b
    3900:	4b2b      	ldr	r3, [pc, #172]	; (39b0 <QSPI_N25Q256_PORT_init+0xb8>)
    3902:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    3904:	2100      	movs	r1, #0
    3906:	202b      	movs	r0, #43	; 0x2b
    3908:	4b2a      	ldr	r3, [pc, #168]	; (39b4 <QSPI_N25Q256_PORT_init+0xbc>)
    390a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    390c:	492a      	ldr	r1, [pc, #168]	; (39b8 <QSPI_N25Q256_PORT_init+0xc0>)
    390e:	202b      	movs	r0, #43	; 0x2b
    3910:	4b2a      	ldr	r3, [pc, #168]	; (39bc <QSPI_N25Q256_PORT_init+0xc4>)
    3912:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    3914:	2102      	movs	r1, #2
    3916:	2008      	movs	r0, #8
    3918:	4b25      	ldr	r3, [pc, #148]	; (39b0 <QSPI_N25Q256_PORT_init+0xb8>)
    391a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    391c:	2100      	movs	r1, #0
    391e:	2008      	movs	r0, #8
    3920:	4b27      	ldr	r3, [pc, #156]	; (39c0 <QSPI_N25Q256_PORT_init+0xc8>)
    3922:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    3924:	2100      	movs	r1, #0
    3926:	2008      	movs	r0, #8
    3928:	4b22      	ldr	r3, [pc, #136]	; (39b4 <QSPI_N25Q256_PORT_init+0xbc>)
    392a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    392c:	4925      	ldr	r1, [pc, #148]	; (39c4 <QSPI_N25Q256_PORT_init+0xcc>)
    392e:	2008      	movs	r0, #8
    3930:	4b22      	ldr	r3, [pc, #136]	; (39bc <QSPI_N25Q256_PORT_init+0xc4>)
    3932:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    3934:	2102      	movs	r1, #2
    3936:	2009      	movs	r0, #9
    3938:	4b1d      	ldr	r3, [pc, #116]	; (39b0 <QSPI_N25Q256_PORT_init+0xb8>)
    393a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    393c:	2100      	movs	r1, #0
    393e:	2009      	movs	r0, #9
    3940:	4b1f      	ldr	r3, [pc, #124]	; (39c0 <QSPI_N25Q256_PORT_init+0xc8>)
    3942:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    3944:	2100      	movs	r1, #0
    3946:	2009      	movs	r0, #9
    3948:	4b1a      	ldr	r3, [pc, #104]	; (39b4 <QSPI_N25Q256_PORT_init+0xbc>)
    394a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    394c:	491e      	ldr	r1, [pc, #120]	; (39c8 <QSPI_N25Q256_PORT_init+0xd0>)
    394e:	2009      	movs	r0, #9
    3950:	4b1a      	ldr	r3, [pc, #104]	; (39bc <QSPI_N25Q256_PORT_init+0xc4>)
    3952:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    3954:	2102      	movs	r1, #2
    3956:	200a      	movs	r0, #10
    3958:	4b15      	ldr	r3, [pc, #84]	; (39b0 <QSPI_N25Q256_PORT_init+0xb8>)
    395a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    395c:	2100      	movs	r1, #0
    395e:	200a      	movs	r0, #10
    3960:	4b17      	ldr	r3, [pc, #92]	; (39c0 <QSPI_N25Q256_PORT_init+0xc8>)
    3962:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    3964:	2100      	movs	r1, #0
    3966:	200a      	movs	r0, #10
    3968:	4b12      	ldr	r3, [pc, #72]	; (39b4 <QSPI_N25Q256_PORT_init+0xbc>)
    396a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    396c:	4917      	ldr	r1, [pc, #92]	; (39cc <QSPI_N25Q256_PORT_init+0xd4>)
    396e:	200a      	movs	r0, #10
    3970:	4b12      	ldr	r3, [pc, #72]	; (39bc <QSPI_N25Q256_PORT_init+0xc4>)
    3972:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    3974:	2102      	movs	r1, #2
    3976:	200b      	movs	r0, #11
    3978:	4b0d      	ldr	r3, [pc, #52]	; (39b0 <QSPI_N25Q256_PORT_init+0xb8>)
    397a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    397c:	2100      	movs	r1, #0
    397e:	200b      	movs	r0, #11
    3980:	4b0f      	ldr	r3, [pc, #60]	; (39c0 <QSPI_N25Q256_PORT_init+0xc8>)
    3982:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    3984:	2100      	movs	r1, #0
    3986:	200b      	movs	r0, #11
    3988:	4b0a      	ldr	r3, [pc, #40]	; (39b4 <QSPI_N25Q256_PORT_init+0xbc>)
    398a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    398c:	4910      	ldr	r1, [pc, #64]	; (39d0 <QSPI_N25Q256_PORT_init+0xd8>)
    398e:	200b      	movs	r0, #11
    3990:	4b0a      	ldr	r3, [pc, #40]	; (39bc <QSPI_N25Q256_PORT_init+0xc4>)
    3992:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    3994:	2101      	movs	r1, #1
    3996:	202a      	movs	r0, #42	; 0x2a
    3998:	4b05      	ldr	r3, [pc, #20]	; (39b0 <QSPI_N25Q256_PORT_init+0xb8>)
    399a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    399c:	2100      	movs	r1, #0
    399e:	202a      	movs	r0, #42	; 0x2a
    39a0:	4b04      	ldr	r3, [pc, #16]	; (39b4 <QSPI_N25Q256_PORT_init+0xbc>)
    39a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    39a4:	490b      	ldr	r1, [pc, #44]	; (39d4 <QSPI_N25Q256_PORT_init+0xdc>)
    39a6:	202a      	movs	r0, #42	; 0x2a
    39a8:	4b04      	ldr	r3, [pc, #16]	; (39bc <QSPI_N25Q256_PORT_init+0xc4>)
    39aa:	4798      	blx	r3
}
    39ac:	bf00      	nop
    39ae:	bd80      	pop	{r7, pc}
    39b0:	0000370d 	.word	0x0000370d
    39b4:	000036b9 	.word	0x000036b9
    39b8:	002b0007 	.word	0x002b0007
    39bc:	000036ed 	.word	0x000036ed
    39c0:	00003745 	.word	0x00003745
    39c4:	00080007 	.word	0x00080007
    39c8:	00090007 	.word	0x00090007
    39cc:	000a0007 	.word	0x000a0007
    39d0:	000b0007 	.word	0x000b0007
    39d4:	002a0007 	.word	0x002a0007

000039d8 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    39d8:	b580      	push	{r7, lr}
    39da:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    39dc:	4805      	ldr	r0, [pc, #20]	; (39f4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    39de:	4b06      	ldr	r3, [pc, #24]	; (39f8 <QSPI_N25Q256_CLOCK_init+0x20>)
    39e0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    39e2:	4804      	ldr	r0, [pc, #16]	; (39f4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    39e4:	4b05      	ldr	r3, [pc, #20]	; (39fc <QSPI_N25Q256_CLOCK_init+0x24>)
    39e6:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    39e8:	4802      	ldr	r0, [pc, #8]	; (39f4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    39ea:	4b05      	ldr	r3, [pc, #20]	; (3a00 <QSPI_N25Q256_CLOCK_init+0x28>)
    39ec:	4798      	blx	r3
}
    39ee:	bf00      	nop
    39f0:	bd80      	pop	{r7, pc}
    39f2:	bf00      	nop
    39f4:	40000800 	.word	0x40000800
    39f8:	00002f1f 	.word	0x00002f1f
    39fc:	00002f5f 	.word	0x00002f5f
    3a00:	0000311f 	.word	0x0000311f

00003a04 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    3a04:	b580      	push	{r7, lr}
    3a06:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    3a08:	4b04      	ldr	r3, [pc, #16]	; (3a1c <QSPI_N25Q256_init+0x18>)
    3a0a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    3a0c:	4904      	ldr	r1, [pc, #16]	; (3a20 <QSPI_N25Q256_init+0x1c>)
    3a0e:	4805      	ldr	r0, [pc, #20]	; (3a24 <QSPI_N25Q256_init+0x20>)
    3a10:	4b05      	ldr	r3, [pc, #20]	; (3a28 <QSPI_N25Q256_init+0x24>)
    3a12:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    3a14:	4b05      	ldr	r3, [pc, #20]	; (3a2c <QSPI_N25Q256_init+0x28>)
    3a16:	4798      	blx	r3
}
    3a18:	bf00      	nop
    3a1a:	bd80      	pop	{r7, pc}
    3a1c:	000039d9 	.word	0x000039d9
    3a20:	42003400 	.word	0x42003400
    3a24:	20004fcc 	.word	0x20004fcc
    3a28:	000050b5 	.word	0x000050b5
    3a2c:	000038f9 	.word	0x000038f9

00003a30 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    3a30:	b580      	push	{r7, lr}
    3a32:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    3a34:	4802      	ldr	r0, [pc, #8]	; (3a40 <DATETIME_CLOCK_CLOCK_init+0x10>)
    3a36:	4b03      	ldr	r3, [pc, #12]	; (3a44 <DATETIME_CLOCK_CLOCK_init+0x14>)
    3a38:	4798      	blx	r3
}
    3a3a:	bf00      	nop
    3a3c:	bd80      	pop	{r7, pc}
    3a3e:	bf00      	nop
    3a40:	40000800 	.word	0x40000800
    3a44:	00002f9f 	.word	0x00002f9f

00003a48 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    3a48:	b580      	push	{r7, lr}
    3a4a:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    3a4c:	4b03      	ldr	r3, [pc, #12]	; (3a5c <DATETIME_CLOCK_init+0x14>)
    3a4e:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    3a50:	4903      	ldr	r1, [pc, #12]	; (3a60 <DATETIME_CLOCK_init+0x18>)
    3a52:	4804      	ldr	r0, [pc, #16]	; (3a64 <DATETIME_CLOCK_init+0x1c>)
    3a54:	4b04      	ldr	r3, [pc, #16]	; (3a68 <DATETIME_CLOCK_init+0x20>)
    3a56:	4798      	blx	r3
}
    3a58:	bf00      	nop
    3a5a:	bd80      	pop	{r7, pc}
    3a5c:	00003a31 	.word	0x00003a31
    3a60:	40002400 	.word	0x40002400
    3a64:	20005120 	.word	0x20005120
    3a68:	0000464d 	.word	0x0000464d

00003a6c <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    3a6c:	b580      	push	{r7, lr}
    3a6e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    3a70:	2100      	movs	r1, #0
    3a72:	2010      	movs	r0, #16
    3a74:	4b11      	ldr	r3, [pc, #68]	; (3abc <SPI_MEMORIES_PORT_init+0x50>)
    3a76:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    3a78:	2102      	movs	r1, #2
    3a7a:	2010      	movs	r0, #16
    3a7c:	4b10      	ldr	r3, [pc, #64]	; (3ac0 <SPI_MEMORIES_PORT_init+0x54>)
    3a7e:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    3a80:	4910      	ldr	r1, [pc, #64]	; (3ac4 <SPI_MEMORIES_PORT_init+0x58>)
    3a82:	2010      	movs	r0, #16
    3a84:	4b10      	ldr	r3, [pc, #64]	; (3ac8 <SPI_MEMORIES_PORT_init+0x5c>)
    3a86:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    3a88:	2100      	movs	r1, #0
    3a8a:	2011      	movs	r0, #17
    3a8c:	4b0b      	ldr	r3, [pc, #44]	; (3abc <SPI_MEMORIES_PORT_init+0x50>)
    3a8e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    3a90:	2102      	movs	r1, #2
    3a92:	2011      	movs	r0, #17
    3a94:	4b0a      	ldr	r3, [pc, #40]	; (3ac0 <SPI_MEMORIES_PORT_init+0x54>)
    3a96:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    3a98:	490c      	ldr	r1, [pc, #48]	; (3acc <SPI_MEMORIES_PORT_init+0x60>)
    3a9a:	2011      	movs	r0, #17
    3a9c:	4b0a      	ldr	r3, [pc, #40]	; (3ac8 <SPI_MEMORIES_PORT_init+0x5c>)
    3a9e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    3aa0:	2101      	movs	r1, #1
    3aa2:	2012      	movs	r0, #18
    3aa4:	4b06      	ldr	r3, [pc, #24]	; (3ac0 <SPI_MEMORIES_PORT_init+0x54>)
    3aa6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    3aa8:	2100      	movs	r1, #0
    3aaa:	2012      	movs	r0, #18
    3aac:	4b08      	ldr	r3, [pc, #32]	; (3ad0 <SPI_MEMORIES_PORT_init+0x64>)
    3aae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    3ab0:	4908      	ldr	r1, [pc, #32]	; (3ad4 <SPI_MEMORIES_PORT_init+0x68>)
    3ab2:	2012      	movs	r0, #18
    3ab4:	4b04      	ldr	r3, [pc, #16]	; (3ac8 <SPI_MEMORIES_PORT_init+0x5c>)
    3ab6:	4798      	blx	r3
}
    3ab8:	bf00      	nop
    3aba:	bd80      	pop	{r7, pc}
    3abc:	00003745 	.word	0x00003745
    3ac0:	0000370d 	.word	0x0000370d
    3ac4:	00100002 	.word	0x00100002
    3ac8:	000036ed 	.word	0x000036ed
    3acc:	00110002 	.word	0x00110002
    3ad0:	000036b9 	.word	0x000036b9
    3ad4:	00120002 	.word	0x00120002

00003ad8 <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    3ad8:	b580      	push	{r7, lr}
    3ada:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3adc:	2245      	movs	r2, #69	; 0x45
    3ade:	2108      	movs	r1, #8
    3ae0:	4806      	ldr	r0, [pc, #24]	; (3afc <SPI_MEMORIES_CLOCK_init+0x24>)
    3ae2:	4b07      	ldr	r3, [pc, #28]	; (3b00 <SPI_MEMORIES_CLOCK_init+0x28>)
    3ae4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3ae6:	224a      	movs	r2, #74	; 0x4a
    3ae8:	2103      	movs	r1, #3
    3aea:	4804      	ldr	r0, [pc, #16]	; (3afc <SPI_MEMORIES_CLOCK_init+0x24>)
    3aec:	4b04      	ldr	r3, [pc, #16]	; (3b00 <SPI_MEMORIES_CLOCK_init+0x28>)
    3aee:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    3af0:	4804      	ldr	r0, [pc, #16]	; (3b04 <SPI_MEMORIES_CLOCK_init+0x2c>)
    3af2:	4b05      	ldr	r3, [pc, #20]	; (3b08 <SPI_MEMORIES_CLOCK_init+0x30>)
    3af4:	4798      	blx	r3
}
    3af6:	bf00      	nop
    3af8:	bd80      	pop	{r7, pc}
    3afa:	bf00      	nop
    3afc:	40001c00 	.word	0x40001c00
    3b00:	00002ed9 	.word	0x00002ed9
    3b04:	40000800 	.word	0x40000800
    3b08:	00002fdf 	.word	0x00002fdf

00003b0c <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    3b0c:	b580      	push	{r7, lr}
    3b0e:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    3b10:	4b04      	ldr	r3, [pc, #16]	; (3b24 <SPI_MEMORIES_init+0x18>)
    3b12:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    3b14:	4904      	ldr	r1, [pc, #16]	; (3b28 <SPI_MEMORIES_init+0x1c>)
    3b16:	4805      	ldr	r0, [pc, #20]	; (3b2c <SPI_MEMORIES_init+0x20>)
    3b18:	4b05      	ldr	r3, [pc, #20]	; (3b30 <SPI_MEMORIES_init+0x24>)
    3b1a:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    3b1c:	4b05      	ldr	r3, [pc, #20]	; (3b34 <SPI_MEMORIES_init+0x28>)
    3b1e:	4798      	blx	r3
}
    3b20:	bf00      	nop
    3b22:	bd80      	pop	{r7, pc}
    3b24:	00003ad9 	.word	0x00003ad9
    3b28:	40003400 	.word	0x40003400
    3b2c:	20004f38 	.word	0x20004f38
    3b30:	00005591 	.word	0x00005591
    3b34:	00003a6d 	.word	0x00003a6d

00003b38 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    3b38:	b580      	push	{r7, lr}
    3b3a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    3b3c:	2100      	movs	r1, #0
    3b3e:	203b      	movs	r0, #59	; 0x3b
    3b40:	4b11      	ldr	r3, [pc, #68]	; (3b88 <SPI_TEMP_PORT_init+0x50>)
    3b42:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    3b44:	2102      	movs	r1, #2
    3b46:	203b      	movs	r0, #59	; 0x3b
    3b48:	4b10      	ldr	r3, [pc, #64]	; (3b8c <SPI_TEMP_PORT_init+0x54>)
    3b4a:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    3b4c:	4910      	ldr	r1, [pc, #64]	; (3b90 <SPI_TEMP_PORT_init+0x58>)
    3b4e:	203b      	movs	r0, #59	; 0x3b
    3b50:	4b10      	ldr	r3, [pc, #64]	; (3b94 <SPI_TEMP_PORT_init+0x5c>)
    3b52:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    3b54:	2100      	movs	r1, #0
    3b56:	203a      	movs	r0, #58	; 0x3a
    3b58:	4b0b      	ldr	r3, [pc, #44]	; (3b88 <SPI_TEMP_PORT_init+0x50>)
    3b5a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    3b5c:	2102      	movs	r1, #2
    3b5e:	203a      	movs	r0, #58	; 0x3a
    3b60:	4b0a      	ldr	r3, [pc, #40]	; (3b8c <SPI_TEMP_PORT_init+0x54>)
    3b62:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    3b64:	490c      	ldr	r1, [pc, #48]	; (3b98 <SPI_TEMP_PORT_init+0x60>)
    3b66:	203a      	movs	r0, #58	; 0x3a
    3b68:	4b0a      	ldr	r3, [pc, #40]	; (3b94 <SPI_TEMP_PORT_init+0x5c>)
    3b6a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    3b6c:	2101      	movs	r1, #1
    3b6e:	203c      	movs	r0, #60	; 0x3c
    3b70:	4b06      	ldr	r3, [pc, #24]	; (3b8c <SPI_TEMP_PORT_init+0x54>)
    3b72:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    3b74:	2100      	movs	r1, #0
    3b76:	203c      	movs	r0, #60	; 0x3c
    3b78:	4b08      	ldr	r3, [pc, #32]	; (3b9c <SPI_TEMP_PORT_init+0x64>)
    3b7a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    3b7c:	4908      	ldr	r1, [pc, #32]	; (3ba0 <SPI_TEMP_PORT_init+0x68>)
    3b7e:	203c      	movs	r0, #60	; 0x3c
    3b80:	4b04      	ldr	r3, [pc, #16]	; (3b94 <SPI_TEMP_PORT_init+0x5c>)
    3b82:	4798      	blx	r3
}
    3b84:	bf00      	nop
    3b86:	bd80      	pop	{r7, pc}
    3b88:	00003745 	.word	0x00003745
    3b8c:	0000370d 	.word	0x0000370d
    3b90:	003b0003 	.word	0x003b0003
    3b94:	000036ed 	.word	0x000036ed
    3b98:	003a0003 	.word	0x003a0003
    3b9c:	000036b9 	.word	0x000036b9
    3ba0:	003c0003 	.word	0x003c0003

00003ba4 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    3ba4:	b580      	push	{r7, lr}
    3ba6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3ba8:	2240      	movs	r2, #64	; 0x40
    3baa:	2122      	movs	r1, #34	; 0x22
    3bac:	4806      	ldr	r0, [pc, #24]	; (3bc8 <SPI_TEMP_CLOCK_init+0x24>)
    3bae:	4b07      	ldr	r3, [pc, #28]	; (3bcc <SPI_TEMP_CLOCK_init+0x28>)
    3bb0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3bb2:	2243      	movs	r2, #67	; 0x43
    3bb4:	2103      	movs	r1, #3
    3bb6:	4804      	ldr	r0, [pc, #16]	; (3bc8 <SPI_TEMP_CLOCK_init+0x24>)
    3bb8:	4b04      	ldr	r3, [pc, #16]	; (3bcc <SPI_TEMP_CLOCK_init+0x28>)
    3bba:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    3bbc:	4804      	ldr	r0, [pc, #16]	; (3bd0 <SPI_TEMP_CLOCK_init+0x2c>)
    3bbe:	4b05      	ldr	r3, [pc, #20]	; (3bd4 <SPI_TEMP_CLOCK_init+0x30>)
    3bc0:	4798      	blx	r3
}
    3bc2:	bf00      	nop
    3bc4:	bd80      	pop	{r7, pc}
    3bc6:	bf00      	nop
    3bc8:	40001c00 	.word	0x40001c00
    3bcc:	00002ed9 	.word	0x00002ed9
    3bd0:	40000800 	.word	0x40000800
    3bd4:	0000313f 	.word	0x0000313f

00003bd8 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    3bd8:	b580      	push	{r7, lr}
    3bda:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    3bdc:	4b05      	ldr	r3, [pc, #20]	; (3bf4 <SPI_TEMP_init+0x1c>)
    3bde:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    3be0:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    3be4:	4804      	ldr	r0, [pc, #16]	; (3bf8 <SPI_TEMP_init+0x20>)
    3be6:	4b05      	ldr	r3, [pc, #20]	; (3bfc <SPI_TEMP_init+0x24>)
    3be8:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    3bea:	4b05      	ldr	r3, [pc, #20]	; (3c00 <SPI_TEMP_init+0x28>)
    3bec:	4798      	blx	r3
}
    3bee:	bf00      	nop
    3bf0:	bd80      	pop	{r7, pc}
    3bf2:	bf00      	nop
    3bf4:	00003ba5 	.word	0x00003ba5
    3bf8:	20004f68 	.word	0x20004f68
    3bfc:	000053dd 	.word	0x000053dd
    3c00:	00003b39 	.word	0x00003b39

00003c04 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    3c04:	b580      	push	{r7, lr}
    3c06:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    3c08:	2100      	movs	r1, #0
    3c0a:	2017      	movs	r0, #23
    3c0c:	4b07      	ldr	r3, [pc, #28]	; (3c2c <I2C_EXPANDER_PORT_init+0x28>)
    3c0e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    3c10:	4907      	ldr	r1, [pc, #28]	; (3c30 <I2C_EXPANDER_PORT_init+0x2c>)
    3c12:	2017      	movs	r0, #23
    3c14:	4b07      	ldr	r3, [pc, #28]	; (3c34 <I2C_EXPANDER_PORT_init+0x30>)
    3c16:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    3c18:	2100      	movs	r1, #0
    3c1a:	2016      	movs	r0, #22
    3c1c:	4b03      	ldr	r3, [pc, #12]	; (3c2c <I2C_EXPANDER_PORT_init+0x28>)
    3c1e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    3c20:	4905      	ldr	r1, [pc, #20]	; (3c38 <I2C_EXPANDER_PORT_init+0x34>)
    3c22:	2016      	movs	r0, #22
    3c24:	4b03      	ldr	r3, [pc, #12]	; (3c34 <I2C_EXPANDER_PORT_init+0x30>)
    3c26:	4798      	blx	r3
}
    3c28:	bf00      	nop
    3c2a:	bd80      	pop	{r7, pc}
    3c2c:	000036b9 	.word	0x000036b9
    3c30:	00170003 	.word	0x00170003
    3c34:	000036ed 	.word	0x000036ed
    3c38:	00160003 	.word	0x00160003

00003c3c <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    3c3c:	b580      	push	{r7, lr}
    3c3e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3c40:	2242      	movs	r2, #66	; 0x42
    3c42:	2123      	movs	r1, #35	; 0x23
    3c44:	4806      	ldr	r0, [pc, #24]	; (3c60 <I2C_EXPANDER_CLOCK_init+0x24>)
    3c46:	4b07      	ldr	r3, [pc, #28]	; (3c64 <I2C_EXPANDER_CLOCK_init+0x28>)
    3c48:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3c4a:	2246      	movs	r2, #70	; 0x46
    3c4c:	2103      	movs	r1, #3
    3c4e:	4804      	ldr	r0, [pc, #16]	; (3c60 <I2C_EXPANDER_CLOCK_init+0x24>)
    3c50:	4b04      	ldr	r3, [pc, #16]	; (3c64 <I2C_EXPANDER_CLOCK_init+0x28>)
    3c52:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    3c54:	4804      	ldr	r0, [pc, #16]	; (3c68 <I2C_EXPANDER_CLOCK_init+0x2c>)
    3c56:	4b05      	ldr	r3, [pc, #20]	; (3c6c <I2C_EXPANDER_CLOCK_init+0x30>)
    3c58:	4798      	blx	r3
}
    3c5a:	bf00      	nop
    3c5c:	bd80      	pop	{r7, pc}
    3c5e:	bf00      	nop
    3c60:	40001c00 	.word	0x40001c00
    3c64:	00002ed9 	.word	0x00002ed9
    3c68:	40000800 	.word	0x40000800
    3c6c:	0000315f 	.word	0x0000315f

00003c70 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    3c70:	b580      	push	{r7, lr}
    3c72:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    3c74:	4b04      	ldr	r3, [pc, #16]	; (3c88 <I2C_EXPANDER_init+0x18>)
    3c76:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    3c78:	4904      	ldr	r1, [pc, #16]	; (3c8c <I2C_EXPANDER_init+0x1c>)
    3c7a:	4805      	ldr	r0, [pc, #20]	; (3c90 <I2C_EXPANDER_init+0x20>)
    3c7c:	4b05      	ldr	r3, [pc, #20]	; (3c94 <I2C_EXPANDER_init+0x24>)
    3c7e:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    3c80:	4b05      	ldr	r3, [pc, #20]	; (3c98 <I2C_EXPANDER_init+0x28>)
    3c82:	4798      	blx	r3
}
    3c84:	bf00      	nop
    3c86:	bd80      	pop	{r7, pc}
    3c88:	00003c3d 	.word	0x00003c3d
    3c8c:	43000400 	.word	0x43000400
    3c90:	20005084 	.word	0x20005084
    3c94:	00004e11 	.word	0x00004e11
    3c98:	00003c05 	.word	0x00003c05

00003c9c <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    3c9c:	b580      	push	{r7, lr}
    3c9e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    3ca0:	2100      	movs	r1, #0
    3ca2:	2044      	movs	r0, #68	; 0x44
    3ca4:	4b11      	ldr	r3, [pc, #68]	; (3cec <SPI_HI3593_PORT_init+0x50>)
    3ca6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    3ca8:	2102      	movs	r1, #2
    3caa:	2044      	movs	r0, #68	; 0x44
    3cac:	4b10      	ldr	r3, [pc, #64]	; (3cf0 <SPI_HI3593_PORT_init+0x54>)
    3cae:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    3cb0:	4910      	ldr	r1, [pc, #64]	; (3cf4 <SPI_HI3593_PORT_init+0x58>)
    3cb2:	2044      	movs	r0, #68	; 0x44
    3cb4:	4b10      	ldr	r3, [pc, #64]	; (3cf8 <SPI_HI3593_PORT_init+0x5c>)
    3cb6:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    3cb8:	2100      	movs	r1, #0
    3cba:	2045      	movs	r0, #69	; 0x45
    3cbc:	4b0b      	ldr	r3, [pc, #44]	; (3cec <SPI_HI3593_PORT_init+0x50>)
    3cbe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    3cc0:	2102      	movs	r1, #2
    3cc2:	2045      	movs	r0, #69	; 0x45
    3cc4:	4b0a      	ldr	r3, [pc, #40]	; (3cf0 <SPI_HI3593_PORT_init+0x54>)
    3cc6:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    3cc8:	490c      	ldr	r1, [pc, #48]	; (3cfc <SPI_HI3593_PORT_init+0x60>)
    3cca:	2045      	movs	r0, #69	; 0x45
    3ccc:	4b0a      	ldr	r3, [pc, #40]	; (3cf8 <SPI_HI3593_PORT_init+0x5c>)
    3cce:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    3cd0:	2101      	movs	r1, #1
    3cd2:	2047      	movs	r0, #71	; 0x47
    3cd4:	4b06      	ldr	r3, [pc, #24]	; (3cf0 <SPI_HI3593_PORT_init+0x54>)
    3cd6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    3cd8:	2100      	movs	r1, #0
    3cda:	2047      	movs	r0, #71	; 0x47
    3cdc:	4b08      	ldr	r3, [pc, #32]	; (3d00 <SPI_HI3593_PORT_init+0x64>)
    3cde:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    3ce0:	4908      	ldr	r1, [pc, #32]	; (3d04 <SPI_HI3593_PORT_init+0x68>)
    3ce2:	2047      	movs	r0, #71	; 0x47
    3ce4:	4b04      	ldr	r3, [pc, #16]	; (3cf8 <SPI_HI3593_PORT_init+0x5c>)
    3ce6:	4798      	blx	r3
}
    3ce8:	bf00      	nop
    3cea:	bd80      	pop	{r7, pc}
    3cec:	00003745 	.word	0x00003745
    3cf0:	0000370d 	.word	0x0000370d
    3cf4:	00440002 	.word	0x00440002
    3cf8:	000036ed 	.word	0x000036ed
    3cfc:	00450002 	.word	0x00450002
    3d00:	000036b9 	.word	0x000036b9
    3d04:	00470002 	.word	0x00470002

00003d08 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    3d08:	b580      	push	{r7, lr}
    3d0a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3d0c:	2242      	movs	r2, #66	; 0x42
    3d0e:	2124      	movs	r1, #36	; 0x24
    3d10:	4806      	ldr	r0, [pc, #24]	; (3d2c <SPI_HI3593_CLOCK_init+0x24>)
    3d12:	4b07      	ldr	r3, [pc, #28]	; (3d30 <SPI_HI3593_CLOCK_init+0x28>)
    3d14:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3d16:	224a      	movs	r2, #74	; 0x4a
    3d18:	2103      	movs	r1, #3
    3d1a:	4804      	ldr	r0, [pc, #16]	; (3d2c <SPI_HI3593_CLOCK_init+0x24>)
    3d1c:	4b04      	ldr	r3, [pc, #16]	; (3d30 <SPI_HI3593_CLOCK_init+0x28>)
    3d1e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    3d20:	4804      	ldr	r0, [pc, #16]	; (3d34 <SPI_HI3593_CLOCK_init+0x2c>)
    3d22:	4b05      	ldr	r3, [pc, #20]	; (3d38 <SPI_HI3593_CLOCK_init+0x30>)
    3d24:	4798      	blx	r3
}
    3d26:	bf00      	nop
    3d28:	bd80      	pop	{r7, pc}
    3d2a:	bf00      	nop
    3d2c:	40001c00 	.word	0x40001c00
    3d30:	00002ed9 	.word	0x00002ed9
    3d34:	40000800 	.word	0x40000800
    3d38:	0000317f 	.word	0x0000317f

00003d3c <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    3d3c:	b580      	push	{r7, lr}
    3d3e:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    3d40:	4b04      	ldr	r3, [pc, #16]	; (3d54 <SPI_HI3593_init+0x18>)
    3d42:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    3d44:	4904      	ldr	r1, [pc, #16]	; (3d58 <SPI_HI3593_init+0x1c>)
    3d46:	4805      	ldr	r0, [pc, #20]	; (3d5c <SPI_HI3593_init+0x20>)
    3d48:	4b05      	ldr	r3, [pc, #20]	; (3d60 <SPI_HI3593_init+0x24>)
    3d4a:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    3d4c:	4b05      	ldr	r3, [pc, #20]	; (3d64 <SPI_HI3593_init+0x28>)
    3d4e:	4798      	blx	r3
}
    3d50:	bf00      	nop
    3d52:	bd80      	pop	{r7, pc}
    3d54:	00003d09 	.word	0x00003d09
    3d58:	43000800 	.word	0x43000800
    3d5c:	20004f50 	.word	0x20004f50
    3d60:	00005591 	.word	0x00005591
    3d64:	00003c9d 	.word	0x00003c9d

00003d68 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    3d68:	b580      	push	{r7, lr}
    3d6a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    3d6c:	2100      	movs	r1, #0
    3d6e:	2068      	movs	r0, #104	; 0x68
    3d70:	4b07      	ldr	r3, [pc, #28]	; (3d90 <I2C_EEPROM_PORT_init+0x28>)
    3d72:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    3d74:	4907      	ldr	r1, [pc, #28]	; (3d94 <I2C_EEPROM_PORT_init+0x2c>)
    3d76:	2068      	movs	r0, #104	; 0x68
    3d78:	4b07      	ldr	r3, [pc, #28]	; (3d98 <I2C_EEPROM_PORT_init+0x30>)
    3d7a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    3d7c:	2100      	movs	r1, #0
    3d7e:	2069      	movs	r0, #105	; 0x69
    3d80:	4b03      	ldr	r3, [pc, #12]	; (3d90 <I2C_EEPROM_PORT_init+0x28>)
    3d82:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    3d84:	4905      	ldr	r1, [pc, #20]	; (3d9c <I2C_EEPROM_PORT_init+0x34>)
    3d86:	2069      	movs	r0, #105	; 0x69
    3d88:	4b03      	ldr	r3, [pc, #12]	; (3d98 <I2C_EEPROM_PORT_init+0x30>)
    3d8a:	4798      	blx	r3
}
    3d8c:	bf00      	nop
    3d8e:	bd80      	pop	{r7, pc}
    3d90:	000036b9 	.word	0x000036b9
    3d94:	00680002 	.word	0x00680002
    3d98:	000036ed 	.word	0x000036ed
    3d9c:	00690002 	.word	0x00690002

00003da0 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    3da0:	b580      	push	{r7, lr}
    3da2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3da4:	2242      	movs	r2, #66	; 0x42
    3da6:	2125      	movs	r1, #37	; 0x25
    3da8:	4806      	ldr	r0, [pc, #24]	; (3dc4 <I2C_EEPROM_CLOCK_init+0x24>)
    3daa:	4b07      	ldr	r3, [pc, #28]	; (3dc8 <I2C_EEPROM_CLOCK_init+0x28>)
    3dac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3dae:	224a      	movs	r2, #74	; 0x4a
    3db0:	2103      	movs	r1, #3
    3db2:	4804      	ldr	r0, [pc, #16]	; (3dc4 <I2C_EEPROM_CLOCK_init+0x24>)
    3db4:	4b04      	ldr	r3, [pc, #16]	; (3dc8 <I2C_EEPROM_CLOCK_init+0x28>)
    3db6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    3db8:	4804      	ldr	r0, [pc, #16]	; (3dcc <I2C_EEPROM_CLOCK_init+0x2c>)
    3dba:	4b05      	ldr	r3, [pc, #20]	; (3dd0 <I2C_EEPROM_CLOCK_init+0x30>)
    3dbc:	4798      	blx	r3
}
    3dbe:	bf00      	nop
    3dc0:	bd80      	pop	{r7, pc}
    3dc2:	bf00      	nop
    3dc4:	40001c00 	.word	0x40001c00
    3dc8:	00002ed9 	.word	0x00002ed9
    3dcc:	40000800 	.word	0x40000800
    3dd0:	0000319f 	.word	0x0000319f

00003dd4 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    3dd8:	4b04      	ldr	r3, [pc, #16]	; (3dec <I2C_EEPROM_init+0x18>)
    3dda:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    3ddc:	4904      	ldr	r1, [pc, #16]	; (3df0 <I2C_EEPROM_init+0x1c>)
    3dde:	4805      	ldr	r0, [pc, #20]	; (3df4 <I2C_EEPROM_init+0x20>)
    3de0:	4b05      	ldr	r3, [pc, #20]	; (3df8 <I2C_EEPROM_init+0x24>)
    3de2:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    3de4:	4b05      	ldr	r3, [pc, #20]	; (3dfc <I2C_EEPROM_init+0x28>)
    3de6:	4798      	blx	r3
}
    3de8:	bf00      	nop
    3dea:	bd80      	pop	{r7, pc}
    3dec:	00003da1 	.word	0x00003da1
    3df0:	43000c00 	.word	0x43000c00
    3df4:	200050e0 	.word	0x200050e0
    3df8:	00004e11 	.word	0x00004e11
    3dfc:	00003d69 	.word	0x00003d69

00003e00 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    3e00:	b580      	push	{r7, lr}
    3e02:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    3e04:	4808      	ldr	r0, [pc, #32]	; (3e28 <TIMER_USB_init+0x28>)
    3e06:	4b09      	ldr	r3, [pc, #36]	; (3e2c <TIMER_USB_init+0x2c>)
    3e08:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3e0a:	2243      	movs	r2, #67	; 0x43
    3e0c:	2109      	movs	r1, #9
    3e0e:	4808      	ldr	r0, [pc, #32]	; (3e30 <TIMER_USB_init+0x30>)
    3e10:	4b08      	ldr	r3, [pc, #32]	; (3e34 <TIMER_USB_init+0x34>)
    3e12:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    3e14:	4b08      	ldr	r3, [pc, #32]	; (3e38 <TIMER_USB_init+0x38>)
    3e16:	4798      	blx	r3
    3e18:	4603      	mov	r3, r0
    3e1a:	461a      	mov	r2, r3
    3e1c:	4907      	ldr	r1, [pc, #28]	; (3e3c <TIMER_USB_init+0x3c>)
    3e1e:	4808      	ldr	r0, [pc, #32]	; (3e40 <TIMER_USB_init+0x40>)
    3e20:	4b08      	ldr	r3, [pc, #32]	; (3e44 <TIMER_USB_init+0x44>)
    3e22:	4798      	blx	r3
}
    3e24:	bf00      	nop
    3e26:	bd80      	pop	{r7, pc}
    3e28:	40000800 	.word	0x40000800
    3e2c:	00002fff 	.word	0x00002fff
    3e30:	40001c00 	.word	0x40001c00
    3e34:	00002ed9 	.word	0x00002ed9
    3e38:	0000b701 	.word	0x0000b701
    3e3c:	40003800 	.word	0x40003800
    3e40:	20005068 	.word	0x20005068
    3e44:	00005821 	.word	0x00005821

00003e48 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    3e48:	b580      	push	{r7, lr}
    3e4a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    3e4c:	4808      	ldr	r0, [pc, #32]	; (3e70 <TIMER_EVENT_init+0x28>)
    3e4e:	4b09      	ldr	r3, [pc, #36]	; (3e74 <TIMER_EVENT_init+0x2c>)
    3e50:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3e52:	2245      	movs	r2, #69	; 0x45
    3e54:	2109      	movs	r1, #9
    3e56:	4808      	ldr	r0, [pc, #32]	; (3e78 <TIMER_EVENT_init+0x30>)
    3e58:	4b08      	ldr	r3, [pc, #32]	; (3e7c <TIMER_EVENT_init+0x34>)
    3e5a:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    3e5c:	4b08      	ldr	r3, [pc, #32]	; (3e80 <TIMER_EVENT_init+0x38>)
    3e5e:	4798      	blx	r3
    3e60:	4603      	mov	r3, r0
    3e62:	461a      	mov	r2, r3
    3e64:	4907      	ldr	r1, [pc, #28]	; (3e84 <TIMER_EVENT_init+0x3c>)
    3e66:	4808      	ldr	r0, [pc, #32]	; (3e88 <TIMER_EVENT_init+0x40>)
    3e68:	4b08      	ldr	r3, [pc, #32]	; (3e8c <TIMER_EVENT_init+0x44>)
    3e6a:	4798      	blx	r3
}
    3e6c:	bf00      	nop
    3e6e:	bd80      	pop	{r7, pc}
    3e70:	40000800 	.word	0x40000800
    3e74:	0000301f 	.word	0x0000301f
    3e78:	40001c00 	.word	0x40001c00
    3e7c:	00002ed9 	.word	0x00002ed9
    3e80:	0000b701 	.word	0x0000b701
    3e84:	40003c00 	.word	0x40003c00
    3e88:	20004fd0 	.word	0x20004fd0
    3e8c:	00005821 	.word	0x00005821

00003e90 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    3e90:	b580      	push	{r7, lr}
    3e92:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    3e94:	4808      	ldr	r0, [pc, #32]	; (3eb8 <TIMER_ARINC_init+0x28>)
    3e96:	4b09      	ldr	r3, [pc, #36]	; (3ebc <TIMER_ARINC_init+0x2c>)
    3e98:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3e9a:	2244      	movs	r2, #68	; 0x44
    3e9c:	211a      	movs	r1, #26
    3e9e:	4808      	ldr	r0, [pc, #32]	; (3ec0 <TIMER_ARINC_init+0x30>)
    3ea0:	4b08      	ldr	r3, [pc, #32]	; (3ec4 <TIMER_ARINC_init+0x34>)
    3ea2:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    3ea4:	4b08      	ldr	r3, [pc, #32]	; (3ec8 <TIMER_ARINC_init+0x38>)
    3ea6:	4798      	blx	r3
    3ea8:	4603      	mov	r3, r0
    3eaa:	461a      	mov	r2, r3
    3eac:	4907      	ldr	r1, [pc, #28]	; (3ecc <TIMER_ARINC_init+0x3c>)
    3eae:	4808      	ldr	r0, [pc, #32]	; (3ed0 <TIMER_ARINC_init+0x40>)
    3eb0:	4b08      	ldr	r3, [pc, #32]	; (3ed4 <TIMER_ARINC_init+0x44>)
    3eb2:	4798      	blx	r3
}
    3eb4:	bf00      	nop
    3eb6:	bd80      	pop	{r7, pc}
    3eb8:	40000800 	.word	0x40000800
    3ebc:	0000309f 	.word	0x0000309f
    3ec0:	40001c00 	.word	0x40001c00
    3ec4:	00002ed9 	.word	0x00002ed9
    3ec8:	0000b701 	.word	0x0000b701
    3ecc:	4101a000 	.word	0x4101a000
    3ed0:	2000504c 	.word	0x2000504c
    3ed4:	00005821 	.word	0x00005821

00003ed8 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    3ed8:	b580      	push	{r7, lr}
    3eda:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    3edc:	4808      	ldr	r0, [pc, #32]	; (3f00 <TIMER_HVAC_init+0x28>)
    3ede:	4b09      	ldr	r3, [pc, #36]	; (3f04 <TIMER_HVAC_init+0x2c>)
    3ee0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3ee2:	2245      	movs	r2, #69	; 0x45
    3ee4:	211a      	movs	r1, #26
    3ee6:	4808      	ldr	r0, [pc, #32]	; (3f08 <TIMER_HVAC_init+0x30>)
    3ee8:	4b08      	ldr	r3, [pc, #32]	; (3f0c <TIMER_HVAC_init+0x34>)
    3eea:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    3eec:	4b08      	ldr	r3, [pc, #32]	; (3f10 <TIMER_HVAC_init+0x38>)
    3eee:	4798      	blx	r3
    3ef0:	4603      	mov	r3, r0
    3ef2:	461a      	mov	r2, r3
    3ef4:	4907      	ldr	r1, [pc, #28]	; (3f14 <TIMER_HVAC_init+0x3c>)
    3ef6:	4808      	ldr	r0, [pc, #32]	; (3f18 <TIMER_HVAC_init+0x40>)
    3ef8:	4b08      	ldr	r3, [pc, #32]	; (3f1c <TIMER_HVAC_init+0x44>)
    3efa:	4798      	blx	r3
}
    3efc:	bf00      	nop
    3efe:	bd80      	pop	{r7, pc}
    3f00:	40000800 	.word	0x40000800
    3f04:	000030bf 	.word	0x000030bf
    3f08:	40001c00 	.word	0x40001c00
    3f0c:	00002ed9 	.word	0x00002ed9
    3f10:	0000b701 	.word	0x0000b701
    3f14:	4101c000 	.word	0x4101c000
    3f18:	200050c4 	.word	0x200050c4
    3f1c:	00005821 	.word	0x00005821

00003f20 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    3f20:	b580      	push	{r7, lr}
    3f22:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    3f24:	4808      	ldr	r0, [pc, #32]	; (3f48 <TIMER_MAINTENANCE_init+0x28>)
    3f26:	4b09      	ldr	r3, [pc, #36]	; (3f4c <TIMER_MAINTENANCE_init+0x2c>)
    3f28:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3f2a:	2246      	movs	r2, #70	; 0x46
    3f2c:	211e      	movs	r1, #30
    3f2e:	4808      	ldr	r0, [pc, #32]	; (3f50 <TIMER_MAINTENANCE_init+0x30>)
    3f30:	4b08      	ldr	r3, [pc, #32]	; (3f54 <TIMER_MAINTENANCE_init+0x34>)
    3f32:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    3f34:	4b08      	ldr	r3, [pc, #32]	; (3f58 <TIMER_MAINTENANCE_init+0x38>)
    3f36:	4798      	blx	r3
    3f38:	4603      	mov	r3, r0
    3f3a:	461a      	mov	r2, r3
    3f3c:	4907      	ldr	r1, [pc, #28]	; (3f5c <TIMER_MAINTENANCE_init+0x3c>)
    3f3e:	4808      	ldr	r0, [pc, #32]	; (3f60 <TIMER_MAINTENANCE_init+0x40>)
    3f40:	4b08      	ldr	r3, [pc, #32]	; (3f64 <TIMER_MAINTENANCE_init+0x44>)
    3f42:	4798      	blx	r3
}
    3f44:	bf00      	nop
    3f46:	bd80      	pop	{r7, pc}
    3f48:	40000800 	.word	0x40000800
    3f4c:	000030df 	.word	0x000030df
    3f50:	40001c00 	.word	0x40001c00
    3f54:	00002ed9 	.word	0x00002ed9
    3f58:	0000b701 	.word	0x0000b701
    3f5c:	42001400 	.word	0x42001400
    3f60:	20004fb0 	.word	0x20004fb0
    3f64:	00005821 	.word	0x00005821

00003f68 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    3f68:	b580      	push	{r7, lr}
    3f6a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    3f6c:	4808      	ldr	r0, [pc, #32]	; (3f90 <TIMER_INTERFACE_init+0x28>)
    3f6e:	4b09      	ldr	r3, [pc, #36]	; (3f94 <TIMER_INTERFACE_init+0x2c>)
    3f70:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3f72:	2246      	movs	r2, #70	; 0x46
    3f74:	211e      	movs	r1, #30
    3f76:	4808      	ldr	r0, [pc, #32]	; (3f98 <TIMER_INTERFACE_init+0x30>)
    3f78:	4b08      	ldr	r3, [pc, #32]	; (3f9c <TIMER_INTERFACE_init+0x34>)
    3f7a:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    3f7c:	4b08      	ldr	r3, [pc, #32]	; (3fa0 <TIMER_INTERFACE_init+0x38>)
    3f7e:	4798      	blx	r3
    3f80:	4603      	mov	r3, r0
    3f82:	461a      	mov	r2, r3
    3f84:	4907      	ldr	r1, [pc, #28]	; (3fa4 <TIMER_INTERFACE_init+0x3c>)
    3f86:	4808      	ldr	r0, [pc, #32]	; (3fa8 <TIMER_INTERFACE_init+0x40>)
    3f88:	4b08      	ldr	r3, [pc, #32]	; (3fac <TIMER_INTERFACE_init+0x44>)
    3f8a:	4798      	blx	r3
}
    3f8c:	bf00      	nop
    3f8e:	bd80      	pop	{r7, pc}
    3f90:	40000800 	.word	0x40000800
    3f94:	000030ff 	.word	0x000030ff
    3f98:	40001c00 	.word	0x40001c00
    3f9c:	00002ed9 	.word	0x00002ed9
    3fa0:	0000b701 	.word	0x0000b701
    3fa4:	42001800 	.word	0x42001800
    3fa8:	20004fec 	.word	0x20004fec
    3fac:	00005821 	.word	0x00005821

00003fb0 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    3fb0:	b480      	push	{r7}
    3fb2:	af00      	add	r7, sp, #0
}
    3fb4:	bf00      	nop
    3fb6:	46bd      	mov	sp, r7
    3fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fbc:	4770      	bx	lr
	...

00003fc0 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    3fc0:	b580      	push	{r7, lr}
    3fc2:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    3fc4:	4804      	ldr	r0, [pc, #16]	; (3fd8 <LIVE_PULSE_CLOCK_init+0x18>)
    3fc6:	4b05      	ldr	r3, [pc, #20]	; (3fdc <LIVE_PULSE_CLOCK_init+0x1c>)
    3fc8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3fca:	224b      	movs	r2, #75	; 0x4b
    3fcc:	2127      	movs	r1, #39	; 0x27
    3fce:	4804      	ldr	r0, [pc, #16]	; (3fe0 <LIVE_PULSE_CLOCK_init+0x20>)
    3fd0:	4b04      	ldr	r3, [pc, #16]	; (3fe4 <LIVE_PULSE_CLOCK_init+0x24>)
    3fd2:	4798      	blx	r3
}
    3fd4:	bf00      	nop
    3fd6:	bd80      	pop	{r7, pc}
    3fd8:	40000800 	.word	0x40000800
    3fdc:	000031bf 	.word	0x000031bf
    3fe0:	40001c00 	.word	0x40001c00
    3fe4:	00002ed9 	.word	0x00002ed9

00003fe8 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    3fe8:	b580      	push	{r7, lr}
    3fea:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    3fec:	4b06      	ldr	r3, [pc, #24]	; (4008 <LIVE_PULSE_init+0x20>)
    3fee:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    3ff0:	4b06      	ldr	r3, [pc, #24]	; (400c <LIVE_PULSE_init+0x24>)
    3ff2:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    3ff4:	4b06      	ldr	r3, [pc, #24]	; (4010 <LIVE_PULSE_init+0x28>)
    3ff6:	4798      	blx	r3
    3ff8:	4603      	mov	r3, r0
    3ffa:	461a      	mov	r2, r3
    3ffc:	4905      	ldr	r1, [pc, #20]	; (4014 <LIVE_PULSE_init+0x2c>)
    3ffe:	4806      	ldr	r0, [pc, #24]	; (4018 <LIVE_PULSE_init+0x30>)
    4000:	4b06      	ldr	r3, [pc, #24]	; (401c <LIVE_PULSE_init+0x34>)
    4002:	4798      	blx	r3
}
    4004:	bf00      	nop
    4006:	bd80      	pop	{r7, pc}
    4008:	00003fc1 	.word	0x00003fc1
    400c:	00003fb1 	.word	0x00003fb1
    4010:	0000b711 	.word	0x0000b711
    4014:	43001800 	.word	0x43001800
    4018:	20005008 	.word	0x20005008
    401c:	00004fb5 	.word	0x00004fb5

00004020 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    4020:	b580      	push	{r7, lr}
    4022:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    4024:	2102      	movs	r1, #2
    4026:	2018      	movs	r0, #24
    4028:	4b0f      	ldr	r3, [pc, #60]	; (4068 <CDCUSB_PORT_init+0x48>)
    402a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    402c:	2100      	movs	r1, #0
    402e:	2018      	movs	r0, #24
    4030:	4b0e      	ldr	r3, [pc, #56]	; (406c <CDCUSB_PORT_init+0x4c>)
    4032:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    4034:	2100      	movs	r1, #0
    4036:	2018      	movs	r0, #24
    4038:	4b0d      	ldr	r3, [pc, #52]	; (4070 <CDCUSB_PORT_init+0x50>)
    403a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    403c:	490d      	ldr	r1, [pc, #52]	; (4074 <CDCUSB_PORT_init+0x54>)
    403e:	2018      	movs	r0, #24
    4040:	4b0d      	ldr	r3, [pc, #52]	; (4078 <CDCUSB_PORT_init+0x58>)
    4042:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    4044:	2102      	movs	r1, #2
    4046:	2019      	movs	r0, #25
    4048:	4b07      	ldr	r3, [pc, #28]	; (4068 <CDCUSB_PORT_init+0x48>)
    404a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    404c:	2100      	movs	r1, #0
    404e:	2019      	movs	r0, #25
    4050:	4b06      	ldr	r3, [pc, #24]	; (406c <CDCUSB_PORT_init+0x4c>)
    4052:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    4054:	2100      	movs	r1, #0
    4056:	2019      	movs	r0, #25
    4058:	4b05      	ldr	r3, [pc, #20]	; (4070 <CDCUSB_PORT_init+0x50>)
    405a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    405c:	4907      	ldr	r1, [pc, #28]	; (407c <CDCUSB_PORT_init+0x5c>)
    405e:	2019      	movs	r0, #25
    4060:	4b05      	ldr	r3, [pc, #20]	; (4078 <CDCUSB_PORT_init+0x58>)
    4062:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    4064:	bf00      	nop
    4066:	bd80      	pop	{r7, pc}
    4068:	0000370d 	.word	0x0000370d
    406c:	00003745 	.word	0x00003745
    4070:	000036b9 	.word	0x000036b9
    4074:	00180007 	.word	0x00180007
    4078:	000036ed 	.word	0x000036ed
    407c:	00190007 	.word	0x00190007

00004080 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    4080:	b580      	push	{r7, lr}
    4082:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    4084:	2242      	movs	r2, #66	; 0x42
    4086:	210a      	movs	r1, #10
    4088:	4805      	ldr	r0, [pc, #20]	; (40a0 <CDCUSB_CLOCK_init+0x20>)
    408a:	4b06      	ldr	r3, [pc, #24]	; (40a4 <CDCUSB_CLOCK_init+0x24>)
    408c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    408e:	4806      	ldr	r0, [pc, #24]	; (40a8 <CDCUSB_CLOCK_init+0x28>)
    4090:	4b06      	ldr	r3, [pc, #24]	; (40ac <CDCUSB_CLOCK_init+0x2c>)
    4092:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    4094:	4804      	ldr	r0, [pc, #16]	; (40a8 <CDCUSB_CLOCK_init+0x28>)
    4096:	4b06      	ldr	r3, [pc, #24]	; (40b0 <CDCUSB_CLOCK_init+0x30>)
    4098:	4798      	blx	r3
}
    409a:	bf00      	nop
    409c:	bd80      	pop	{r7, pc}
    409e:	bf00      	nop
    40a0:	40001c00 	.word	0x40001c00
    40a4:	00002ed9 	.word	0x00002ed9
    40a8:	40000800 	.word	0x40000800
    40ac:	00002eff 	.word	0x00002eff
    40b0:	0000303f 	.word	0x0000303f

000040b4 <CDCUSB_init>:

void CDCUSB_init(void)
{
    40b4:	b580      	push	{r7, lr}
    40b6:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    40b8:	4b03      	ldr	r3, [pc, #12]	; (40c8 <CDCUSB_init+0x14>)
    40ba:	4798      	blx	r3
	usb_d_init();
    40bc:	4b03      	ldr	r3, [pc, #12]	; (40cc <CDCUSB_init+0x18>)
    40be:	4798      	blx	r3
	CDCUSB_PORT_init();
    40c0:	4b03      	ldr	r3, [pc, #12]	; (40d0 <CDCUSB_init+0x1c>)
    40c2:	4798      	blx	r3
}
    40c4:	bf00      	nop
    40c6:	bd80      	pop	{r7, pc}
    40c8:	00004081 	.word	0x00004081
    40cc:	00006031 	.word	0x00006031
    40d0:	00004021 	.word	0x00004021

000040d4 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    40d4:	b580      	push	{r7, lr}
    40d6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    40d8:	4802      	ldr	r0, [pc, #8]	; (40e4 <WATCHDOG_CLOCK_init+0x10>)
    40da:	4b03      	ldr	r3, [pc, #12]	; (40e8 <WATCHDOG_CLOCK_init+0x14>)
    40dc:	4798      	blx	r3
}
    40de:	bf00      	nop
    40e0:	bd80      	pop	{r7, pc}
    40e2:	bf00      	nop
    40e4:	40000800 	.word	0x40000800
    40e8:	00002f7f 	.word	0x00002f7f

000040ec <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    40ec:	b580      	push	{r7, lr}
    40ee:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    40f0:	4b03      	ldr	r3, [pc, #12]	; (4100 <WATCHDOG_init+0x14>)
    40f2:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    40f4:	4903      	ldr	r1, [pc, #12]	; (4104 <WATCHDOG_init+0x18>)
    40f6:	4804      	ldr	r0, [pc, #16]	; (4108 <WATCHDOG_init+0x1c>)
    40f8:	4b04      	ldr	r3, [pc, #16]	; (410c <WATCHDOG_init+0x20>)
    40fa:	4798      	blx	r3
}
    40fc:	bf00      	nop
    40fe:	bd80      	pop	{r7, pc}
    4100:	000040d5 	.word	0x000040d5
    4104:	40002000 	.word	0x40002000
    4108:	20005140 	.word	0x20005140
    410c:	0000378d 	.word	0x0000378d

00004110 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    4110:	b580      	push	{r7, lr}
    4112:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    4114:	4904      	ldr	r1, [pc, #16]	; (4128 <CAN_CCU_PORT_init+0x18>)
    4116:	202d      	movs	r0, #45	; 0x2d
    4118:	4b04      	ldr	r3, [pc, #16]	; (412c <CAN_CCU_PORT_init+0x1c>)
    411a:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    411c:	4904      	ldr	r1, [pc, #16]	; (4130 <CAN_CCU_PORT_init+0x20>)
    411e:	202c      	movs	r0, #44	; 0x2c
    4120:	4b02      	ldr	r3, [pc, #8]	; (412c <CAN_CCU_PORT_init+0x1c>)
    4122:	4798      	blx	r3
}
    4124:	bf00      	nop
    4126:	bd80      	pop	{r7, pc}
    4128:	002d0007 	.word	0x002d0007
    412c:	000036ed 	.word	0x000036ed
    4130:	002c0007 	.word	0x002c0007

00004134 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    4134:	b580      	push	{r7, lr}
    4136:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    4138:	4807      	ldr	r0, [pc, #28]	; (4158 <CAN_CCU_init+0x24>)
    413a:	4b08      	ldr	r3, [pc, #32]	; (415c <CAN_CCU_init+0x28>)
    413c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    413e:	2243      	movs	r2, #67	; 0x43
    4140:	211c      	movs	r1, #28
    4142:	4807      	ldr	r0, [pc, #28]	; (4160 <CAN_CCU_init+0x2c>)
    4144:	4b07      	ldr	r3, [pc, #28]	; (4164 <CAN_CCU_init+0x30>)
    4146:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    4148:	4907      	ldr	r1, [pc, #28]	; (4168 <CAN_CCU_init+0x34>)
    414a:	4808      	ldr	r0, [pc, #32]	; (416c <CAN_CCU_init+0x38>)
    414c:	4b08      	ldr	r3, [pc, #32]	; (4170 <CAN_CCU_init+0x3c>)
    414e:	4798      	blx	r3
	CAN_CCU_PORT_init();
    4150:	4b08      	ldr	r3, [pc, #32]	; (4174 <CAN_CCU_init+0x40>)
    4152:	4798      	blx	r3
}
    4154:	bf00      	nop
    4156:	bd80      	pop	{r7, pc}
    4158:	40000800 	.word	0x40000800
    415c:	00002f3f 	.word	0x00002f3f
    4160:	40001c00 	.word	0x40001c00
    4164:	00002ed9 	.word	0x00002ed9
    4168:	42000400 	.word	0x42000400
    416c:	20005024 	.word	0x20005024
    4170:	0000485d 	.word	0x0000485d
    4174:	00004111 	.word	0x00004111

00004178 <system_init>:

void system_init(void)
{
    4178:	b580      	push	{r7, lr}
    417a:	af00      	add	r7, sp, #0
	init_mcu();
    417c:	4b50      	ldr	r3, [pc, #320]	; (42c0 <system_init+0x148>)
    417e:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    4180:	2101      	movs	r1, #1
    4182:	200f      	movs	r0, #15
    4184:	4b4f      	ldr	r3, [pc, #316]	; (42c4 <system_init+0x14c>)
    4186:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    4188:	2102      	movs	r1, #2
    418a:	200f      	movs	r0, #15
    418c:	4b4e      	ldr	r3, [pc, #312]	; (42c8 <system_init+0x150>)
    418e:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    4190:	f04f 31ff 	mov.w	r1, #4294967295
    4194:	200f      	movs	r0, #15
    4196:	4b4d      	ldr	r3, [pc, #308]	; (42cc <system_init+0x154>)
    4198:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    419a:	2101      	movs	r1, #1
    419c:	2013      	movs	r0, #19
    419e:	4b49      	ldr	r3, [pc, #292]	; (42c4 <system_init+0x14c>)
    41a0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    41a2:	2102      	movs	r1, #2
    41a4:	2013      	movs	r0, #19
    41a6:	4b48      	ldr	r3, [pc, #288]	; (42c8 <system_init+0x150>)
    41a8:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    41aa:	f04f 31ff 	mov.w	r1, #4294967295
    41ae:	2013      	movs	r0, #19
    41b0:	4b46      	ldr	r3, [pc, #280]	; (42cc <system_init+0x154>)
    41b2:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    41b4:	2101      	movs	r1, #1
    41b6:	2027      	movs	r0, #39	; 0x27
    41b8:	4b43      	ldr	r3, [pc, #268]	; (42c8 <system_init+0x150>)
    41ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    41bc:	2102      	movs	r1, #2
    41be:	2027      	movs	r0, #39	; 0x27
    41c0:	4b43      	ldr	r3, [pc, #268]	; (42d0 <system_init+0x158>)
    41c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    41c4:	f04f 31ff 	mov.w	r1, #4294967295
    41c8:	2027      	movs	r0, #39	; 0x27
    41ca:	4b40      	ldr	r3, [pc, #256]	; (42cc <system_init+0x154>)
    41cc:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    41ce:	2101      	movs	r1, #1
    41d0:	203d      	movs	r0, #61	; 0x3d
    41d2:	4b3c      	ldr	r3, [pc, #240]	; (42c4 <system_init+0x14c>)
    41d4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    41d6:	2102      	movs	r1, #2
    41d8:	203d      	movs	r0, #61	; 0x3d
    41da:	4b3b      	ldr	r3, [pc, #236]	; (42c8 <system_init+0x150>)
    41dc:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    41de:	f04f 31ff 	mov.w	r1, #4294967295
    41e2:	203d      	movs	r0, #61	; 0x3d
    41e4:	4b39      	ldr	r3, [pc, #228]	; (42cc <system_init+0x154>)
    41e6:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    41e8:	2101      	movs	r1, #1
    41ea:	203f      	movs	r0, #63	; 0x3f
    41ec:	4b36      	ldr	r3, [pc, #216]	; (42c8 <system_init+0x150>)
    41ee:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    41f0:	2101      	movs	r1, #1
    41f2:	203f      	movs	r0, #63	; 0x3f
    41f4:	4b36      	ldr	r3, [pc, #216]	; (42d0 <system_init+0x158>)
    41f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    41f8:	f04f 31ff 	mov.w	r1, #4294967295
    41fc:	203f      	movs	r0, #63	; 0x3f
    41fe:	4b33      	ldr	r3, [pc, #204]	; (42cc <system_init+0x154>)
    4200:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    4202:	2100      	movs	r1, #0
    4204:	204d      	movs	r0, #77	; 0x4d
    4206:	4b2f      	ldr	r3, [pc, #188]	; (42c4 <system_init+0x14c>)
    4208:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    420a:	2102      	movs	r1, #2
    420c:	204d      	movs	r0, #77	; 0x4d
    420e:	4b2e      	ldr	r3, [pc, #184]	; (42c8 <system_init+0x150>)
    4210:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    4212:	f04f 31ff 	mov.w	r1, #4294967295
    4216:	204d      	movs	r0, #77	; 0x4d
    4218:	4b2c      	ldr	r3, [pc, #176]	; (42cc <system_init+0x154>)
    421a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    421c:	2101      	movs	r1, #1
    421e:	204e      	movs	r0, #78	; 0x4e
    4220:	4b28      	ldr	r3, [pc, #160]	; (42c4 <system_init+0x14c>)
    4222:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    4224:	2102      	movs	r1, #2
    4226:	204e      	movs	r0, #78	; 0x4e
    4228:	4b27      	ldr	r3, [pc, #156]	; (42c8 <system_init+0x150>)
    422a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    422c:	f04f 31ff 	mov.w	r1, #4294967295
    4230:	204e      	movs	r0, #78	; 0x4e
    4232:	4b26      	ldr	r3, [pc, #152]	; (42cc <system_init+0x154>)
    4234:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    4236:	2100      	movs	r1, #0
    4238:	204f      	movs	r0, #79	; 0x4f
    423a:	4b22      	ldr	r3, [pc, #136]	; (42c4 <system_init+0x14c>)
    423c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    423e:	2102      	movs	r1, #2
    4240:	204f      	movs	r0, #79	; 0x4f
    4242:	4b21      	ldr	r3, [pc, #132]	; (42c8 <system_init+0x150>)
    4244:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    4246:	f04f 31ff 	mov.w	r1, #4294967295
    424a:	204f      	movs	r0, #79	; 0x4f
    424c:	4b1f      	ldr	r3, [pc, #124]	; (42cc <system_init+0x154>)
    424e:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    4250:	2100      	movs	r1, #0
    4252:	2052      	movs	r0, #82	; 0x52
    4254:	4b1b      	ldr	r3, [pc, #108]	; (42c4 <system_init+0x14c>)
    4256:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    4258:	2102      	movs	r1, #2
    425a:	2052      	movs	r0, #82	; 0x52
    425c:	4b1a      	ldr	r3, [pc, #104]	; (42c8 <system_init+0x150>)
    425e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    4260:	f04f 31ff 	mov.w	r1, #4294967295
    4264:	2052      	movs	r0, #82	; 0x52
    4266:	4b19      	ldr	r3, [pc, #100]	; (42cc <system_init+0x154>)
    4268:	4798      	blx	r3

	CRC_CALC_init();
    426a:	4b1a      	ldr	r3, [pc, #104]	; (42d4 <system_init+0x15c>)
    426c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    426e:	4b1a      	ldr	r3, [pc, #104]	; (42d8 <system_init+0x160>)
    4270:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    4272:	4b1a      	ldr	r3, [pc, #104]	; (42dc <system_init+0x164>)
    4274:	4798      	blx	r3

	QSPI_N25Q256_init();
    4276:	4b1a      	ldr	r3, [pc, #104]	; (42e0 <system_init+0x168>)
    4278:	4798      	blx	r3

	DATETIME_CLOCK_init();
    427a:	4b1a      	ldr	r3, [pc, #104]	; (42e4 <system_init+0x16c>)
    427c:	4798      	blx	r3

	SPI_MEMORIES_init();
    427e:	4b1a      	ldr	r3, [pc, #104]	; (42e8 <system_init+0x170>)
    4280:	4798      	blx	r3

	SPI_TEMP_init();
    4282:	4b1a      	ldr	r3, [pc, #104]	; (42ec <system_init+0x174>)
    4284:	4798      	blx	r3

	I2C_EXPANDER_init();
    4286:	4b1a      	ldr	r3, [pc, #104]	; (42f0 <system_init+0x178>)
    4288:	4798      	blx	r3

	SPI_HI3593_init();
    428a:	4b1a      	ldr	r3, [pc, #104]	; (42f4 <system_init+0x17c>)
    428c:	4798      	blx	r3

	I2C_EEPROM_init();
    428e:	4b1a      	ldr	r3, [pc, #104]	; (42f8 <system_init+0x180>)
    4290:	4798      	blx	r3

	TIMER_USB_init();
    4292:	4b1a      	ldr	r3, [pc, #104]	; (42fc <system_init+0x184>)
    4294:	4798      	blx	r3
	TIMER_EVENT_init();
    4296:	4b1a      	ldr	r3, [pc, #104]	; (4300 <system_init+0x188>)
    4298:	4798      	blx	r3
	TIMER_ARINC_init();
    429a:	4b1a      	ldr	r3, [pc, #104]	; (4304 <system_init+0x18c>)
    429c:	4798      	blx	r3
	TIMER_HVAC_init();
    429e:	4b1a      	ldr	r3, [pc, #104]	; (4308 <system_init+0x190>)
    42a0:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    42a2:	4b1a      	ldr	r3, [pc, #104]	; (430c <system_init+0x194>)
    42a4:	4798      	blx	r3
	TIMER_INTERFACE_init();
    42a6:	4b1a      	ldr	r3, [pc, #104]	; (4310 <system_init+0x198>)
    42a8:	4798      	blx	r3
	LIVE_PULSE_init();
    42aa:	4b1a      	ldr	r3, [pc, #104]	; (4314 <system_init+0x19c>)
    42ac:	4798      	blx	r3

	CDCUSB_init();
    42ae:	4b1a      	ldr	r3, [pc, #104]	; (4318 <system_init+0x1a0>)
    42b0:	4798      	blx	r3

	WATCHDOG_init();
    42b2:	4b1a      	ldr	r3, [pc, #104]	; (431c <system_init+0x1a4>)
    42b4:	4798      	blx	r3
	CAN_CCU_init();
    42b6:	4b1a      	ldr	r3, [pc, #104]	; (4320 <system_init+0x1a8>)
    42b8:	4798      	blx	r3
}
    42ba:	bf00      	nop
    42bc:	bd80      	pop	{r7, pc}
    42be:	bf00      	nop
    42c0:	0000377d 	.word	0x0000377d
    42c4:	00003745 	.word	0x00003745
    42c8:	0000370d 	.word	0x0000370d
    42cc:	000036ed 	.word	0x000036ed
    42d0:	000036b9 	.word	0x000036b9
    42d4:	000037dd 	.word	0x000037dd
    42d8:	00003809 	.word	0x00003809
    42dc:	000038c9 	.word	0x000038c9
    42e0:	00003a05 	.word	0x00003a05
    42e4:	00003a49 	.word	0x00003a49
    42e8:	00003b0d 	.word	0x00003b0d
    42ec:	00003bd9 	.word	0x00003bd9
    42f0:	00003c71 	.word	0x00003c71
    42f4:	00003d3d 	.word	0x00003d3d
    42f8:	00003dd5 	.word	0x00003dd5
    42fc:	00003e01 	.word	0x00003e01
    4300:	00003e49 	.word	0x00003e49
    4304:	00003e91 	.word	0x00003e91
    4308:	00003ed9 	.word	0x00003ed9
    430c:	00003f21 	.word	0x00003f21
    4310:	00003f69 	.word	0x00003f69
    4314:	00003fe9 	.word	0x00003fe9
    4318:	000040b5 	.word	0x000040b5
    431c:	000040ed 	.word	0x000040ed
    4320:	00004135 	.word	0x00004135

00004324 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    4324:	b480      	push	{r7}
    4326:	b083      	sub	sp, #12
    4328:	af00      	add	r7, sp, #0
    432a:	4603      	mov	r3, r0
    432c:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    432e:	88fb      	ldrh	r3, [r7, #6]
    4330:	f003 0303 	and.w	r3, r3, #3
    4334:	2b00      	cmp	r3, #0
    4336:	d001      	beq.n	433c <leap_year+0x18>
		return false;
    4338:	2300      	movs	r3, #0
    433a:	e000      	b.n	433e <leap_year+0x1a>
	} else {
		return true;
    433c:	2301      	movs	r3, #1
	}
}
    433e:	4618      	mov	r0, r3
    4340:	370c      	adds	r7, #12
    4342:	46bd      	mov	sp, r7
    4344:	f85d 7b04 	ldr.w	r7, [sp], #4
    4348:	4770      	bx	lr
	...

0000434c <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    434c:	b580      	push	{r7, lr}
    434e:	b084      	sub	sp, #16
    4350:	af00      	add	r7, sp, #0
    4352:	6078      	str	r0, [r7, #4]
    4354:	460b      	mov	r3, r1
    4356:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    4358:	2300      	movs	r3, #0
    435a:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    435c:	687b      	ldr	r3, [r7, #4]
    435e:	b29b      	uxth	r3, r3
    4360:	4618      	mov	r0, r3
    4362:	4b2f      	ldr	r3, [pc, #188]	; (4420 <get_secs_in_month+0xd4>)
    4364:	4798      	blx	r3
    4366:	4603      	mov	r3, r0
    4368:	2b00      	cmp	r3, #0
    436a:	d028      	beq.n	43be <get_secs_in_month+0x72>
		switch (month) {
    436c:	78fb      	ldrb	r3, [r7, #3]
    436e:	3b01      	subs	r3, #1
    4370:	2b0b      	cmp	r3, #11
    4372:	d84c      	bhi.n	440e <get_secs_in_month+0xc2>
    4374:	a201      	add	r2, pc, #4	; (adr r2, 437c <get_secs_in_month+0x30>)
    4376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    437a:	bf00      	nop
    437c:	000043ad 	.word	0x000043ad
    4380:	000043b3 	.word	0x000043b3
    4384:	000043ad 	.word	0x000043ad
    4388:	000043b9 	.word	0x000043b9
    438c:	000043ad 	.word	0x000043ad
    4390:	000043b9 	.word	0x000043b9
    4394:	000043ad 	.word	0x000043ad
    4398:	000043ad 	.word	0x000043ad
    439c:	000043b9 	.word	0x000043b9
    43a0:	000043ad 	.word	0x000043ad
    43a4:	000043b9 	.word	0x000043b9
    43a8:	000043ad 	.word	0x000043ad
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    43ac:	4b1d      	ldr	r3, [pc, #116]	; (4424 <get_secs_in_month+0xd8>)
    43ae:	60fb      	str	r3, [r7, #12]
			break;
    43b0:	e030      	b.n	4414 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    43b2:	4b1d      	ldr	r3, [pc, #116]	; (4428 <get_secs_in_month+0xdc>)
    43b4:	60fb      	str	r3, [r7, #12]
			break;
    43b6:	e02d      	b.n	4414 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    43b8:	4b1c      	ldr	r3, [pc, #112]	; (442c <get_secs_in_month+0xe0>)
    43ba:	60fb      	str	r3, [r7, #12]
			break;
    43bc:	e02a      	b.n	4414 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    43be:	78fb      	ldrb	r3, [r7, #3]
    43c0:	3b01      	subs	r3, #1
    43c2:	2b0b      	cmp	r3, #11
    43c4:	d825      	bhi.n	4412 <get_secs_in_month+0xc6>
    43c6:	a201      	add	r2, pc, #4	; (adr r2, 43cc <get_secs_in_month+0x80>)
    43c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    43cc:	000043fd 	.word	0x000043fd
    43d0:	00004403 	.word	0x00004403
    43d4:	000043fd 	.word	0x000043fd
    43d8:	00004409 	.word	0x00004409
    43dc:	000043fd 	.word	0x000043fd
    43e0:	00004409 	.word	0x00004409
    43e4:	000043fd 	.word	0x000043fd
    43e8:	000043fd 	.word	0x000043fd
    43ec:	00004409 	.word	0x00004409
    43f0:	000043fd 	.word	0x000043fd
    43f4:	00004409 	.word	0x00004409
    43f8:	000043fd 	.word	0x000043fd
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    43fc:	4b09      	ldr	r3, [pc, #36]	; (4424 <get_secs_in_month+0xd8>)
    43fe:	60fb      	str	r3, [r7, #12]
			break;
    4400:	e008      	b.n	4414 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    4402:	4b0b      	ldr	r3, [pc, #44]	; (4430 <get_secs_in_month+0xe4>)
    4404:	60fb      	str	r3, [r7, #12]
			break;
    4406:	e005      	b.n	4414 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    4408:	4b08      	ldr	r3, [pc, #32]	; (442c <get_secs_in_month+0xe0>)
    440a:	60fb      	str	r3, [r7, #12]
			break;
    440c:	e002      	b.n	4414 <get_secs_in_month+0xc8>
			break;
    440e:	bf00      	nop
    4410:	e000      	b.n	4414 <get_secs_in_month+0xc8>
		default:
			break;
    4412:	bf00      	nop
		}
	}

	return sec_in_month;
    4414:	68fb      	ldr	r3, [r7, #12]
}
    4416:	4618      	mov	r0, r3
    4418:	3710      	adds	r7, #16
    441a:	46bd      	mov	sp, r7
    441c:	bd80      	pop	{r7, pc}
    441e:	bf00      	nop
    4420:	00004325 	.word	0x00004325
    4424:	0028de80 	.word	0x0028de80
    4428:	00263b80 	.word	0x00263b80
    442c:	00278d00 	.word	0x00278d00
    4430:	0024ea00 	.word	0x0024ea00

00004434 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    4434:	b580      	push	{r7, lr}
    4436:	b08a      	sub	sp, #40	; 0x28
    4438:	af00      	add	r7, sp, #0
    443a:	60f8      	str	r0, [r7, #12]
    443c:	60b9      	str	r1, [r7, #8]
    443e:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    4440:	68fb      	ldr	r3, [r7, #12]
    4442:	699b      	ldr	r3, [r3, #24]
    4444:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    4446:	2301      	movs	r3, #1
    4448:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    444a:	2301      	movs	r3, #1
    444c:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    444e:	2300      	movs	r3, #0
    4450:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    4452:	2300      	movs	r3, #0
    4454:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    4456:	68bb      	ldr	r3, [r7, #8]
    4458:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    445a:	6a3b      	ldr	r3, [r7, #32]
    445c:	b29b      	uxth	r3, r3
    445e:	4618      	mov	r0, r3
    4460:	4b32      	ldr	r3, [pc, #200]	; (452c <convert_timestamp_to_datetime+0xf8>)
    4462:	4798      	blx	r3
    4464:	4603      	mov	r3, r0
    4466:	2b00      	cmp	r3, #0
    4468:	d001      	beq.n	446e <convert_timestamp_to_datetime+0x3a>
    446a:	4b31      	ldr	r3, [pc, #196]	; (4530 <convert_timestamp_to_datetime+0xfc>)
    446c:	e000      	b.n	4470 <convert_timestamp_to_datetime+0x3c>
    446e:	4b31      	ldr	r3, [pc, #196]	; (4534 <convert_timestamp_to_datetime+0x100>)
    4470:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    4472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4474:	69bb      	ldr	r3, [r7, #24]
    4476:	429a      	cmp	r2, r3
    4478:	d307      	bcc.n	448a <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    447a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    447c:	69bb      	ldr	r3, [r7, #24]
    447e:	1ad3      	subs	r3, r2, r3
    4480:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    4482:	6a3b      	ldr	r3, [r7, #32]
    4484:	3301      	adds	r3, #1
    4486:	623b      	str	r3, [r7, #32]
    4488:	e7e7      	b.n	445a <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    448a:	7ffb      	ldrb	r3, [r7, #31]
    448c:	4619      	mov	r1, r3
    448e:	6a38      	ldr	r0, [r7, #32]
    4490:	4b29      	ldr	r3, [pc, #164]	; (4538 <convert_timestamp_to_datetime+0x104>)
    4492:	4798      	blx	r3
    4494:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    4496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4498:	697b      	ldr	r3, [r7, #20]
    449a:	429a      	cmp	r2, r3
    449c:	d307      	bcc.n	44ae <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    449e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    44a0:	697b      	ldr	r3, [r7, #20]
    44a2:	1ad3      	subs	r3, r2, r3
    44a4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    44a6:	7ffb      	ldrb	r3, [r7, #31]
    44a8:	3301      	adds	r3, #1
    44aa:	77fb      	strb	r3, [r7, #31]
    44ac:	e7ed      	b.n	448a <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    44ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44b0:	4a22      	ldr	r2, [pc, #136]	; (453c <convert_timestamp_to_datetime+0x108>)
    44b2:	4293      	cmp	r3, r2
    44b4:	d909      	bls.n	44ca <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    44b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44b8:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    44bc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    44c0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    44c2:	7fbb      	ldrb	r3, [r7, #30]
    44c4:	3301      	adds	r3, #1
    44c6:	77bb      	strb	r3, [r7, #30]
    44c8:	e7f1      	b.n	44ae <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    44ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44cc:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    44d0:	d307      	bcc.n	44e2 <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    44d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44d4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    44d8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    44da:	7f7b      	ldrb	r3, [r7, #29]
    44dc:	3301      	adds	r3, #1
    44de:	777b      	strb	r3, [r7, #29]
    44e0:	e7f3      	b.n	44ca <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    44e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44e4:	2b3b      	cmp	r3, #59	; 0x3b
    44e6:	d906      	bls.n	44f6 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    44e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44ea:	3b3c      	subs	r3, #60	; 0x3c
    44ec:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    44ee:	7f3b      	ldrb	r3, [r7, #28]
    44f0:	3301      	adds	r3, #1
    44f2:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    44f4:	e7f5      	b.n	44e2 <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    44f6:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    44f8:	6a3b      	ldr	r3, [r7, #32]
    44fa:	b29a      	uxth	r2, r3
    44fc:	687b      	ldr	r3, [r7, #4]
    44fe:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    4500:	687b      	ldr	r3, [r7, #4]
    4502:	7ffa      	ldrb	r2, [r7, #31]
    4504:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    4506:	687b      	ldr	r3, [r7, #4]
    4508:	7fba      	ldrb	r2, [r7, #30]
    450a:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    450c:	687b      	ldr	r3, [r7, #4]
    450e:	7f7a      	ldrb	r2, [r7, #29]
    4510:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    4512:	687b      	ldr	r3, [r7, #4]
    4514:	7f3a      	ldrb	r2, [r7, #28]
    4516:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    4518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    451a:	b2da      	uxtb	r2, r3
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    4520:	2300      	movs	r3, #0
}
    4522:	4618      	mov	r0, r3
    4524:	3728      	adds	r7, #40	; 0x28
    4526:	46bd      	mov	sp, r7
    4528:	bd80      	pop	{r7, pc}
    452a:	bf00      	nop
    452c:	00004325 	.word	0x00004325
    4530:	01e28500 	.word	0x01e28500
    4534:	01e13380 	.word	0x01e13380
    4538:	0000434d 	.word	0x0000434d
    453c:	0001517f 	.word	0x0001517f

00004540 <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    4540:	b580      	push	{r7, lr}
    4542:	b086      	sub	sp, #24
    4544:	af00      	add	r7, sp, #0
    4546:	6078      	str	r0, [r7, #4]
    4548:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    454a:	2300      	movs	r3, #0
    454c:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    454e:	2300      	movs	r3, #0
    4550:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    4552:	683b      	ldr	r3, [r7, #0]
    4554:	88db      	ldrh	r3, [r3, #6]
    4556:	b2da      	uxtb	r2, r3
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	699b      	ldr	r3, [r3, #24]
    455c:	b2db      	uxtb	r3, r3
    455e:	1ad3      	subs	r3, r2, r3
    4560:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    4562:	683b      	ldr	r3, [r7, #0]
    4564:	795b      	ldrb	r3, [r3, #5]
    4566:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    4568:	683b      	ldr	r3, [r7, #0]
    456a:	791b      	ldrb	r3, [r3, #4]
    456c:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    456e:	683b      	ldr	r3, [r7, #0]
    4570:	789b      	ldrb	r3, [r3, #2]
    4572:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    4574:	683b      	ldr	r3, [r7, #0]
    4576:	785b      	ldrb	r3, [r3, #1]
    4578:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    457a:	683b      	ldr	r3, [r7, #0]
    457c:	781b      	ldrb	r3, [r3, #0]
    457e:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    4580:	2300      	movs	r3, #0
    4582:	613b      	str	r3, [r7, #16]
    4584:	e01a      	b.n	45bc <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    4586:	687b      	ldr	r3, [r7, #4]
    4588:	699b      	ldr	r3, [r3, #24]
    458a:	b29a      	uxth	r2, r3
    458c:	693b      	ldr	r3, [r7, #16]
    458e:	b29b      	uxth	r3, r3
    4590:	4413      	add	r3, r2
    4592:	b29b      	uxth	r3, r3
    4594:	4618      	mov	r0, r3
    4596:	4b29      	ldr	r3, [pc, #164]	; (463c <convert_datetime_to_timestamp+0xfc>)
    4598:	4798      	blx	r3
    459a:	4603      	mov	r3, r0
    459c:	2b00      	cmp	r3, #0
    459e:	d006      	beq.n	45ae <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    45a0:	697b      	ldr	r3, [r7, #20]
    45a2:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    45a6:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    45aa:	617b      	str	r3, [r7, #20]
    45ac:	e003      	b.n	45b6 <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    45ae:	697a      	ldr	r2, [r7, #20]
    45b0:	4b23      	ldr	r3, [pc, #140]	; (4640 <convert_datetime_to_timestamp+0x100>)
    45b2:	4413      	add	r3, r2
    45b4:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    45b6:	693b      	ldr	r3, [r7, #16]
    45b8:	3301      	adds	r3, #1
    45ba:	613b      	str	r3, [r7, #16]
    45bc:	7bfa      	ldrb	r2, [r7, #15]
    45be:	693b      	ldr	r3, [r7, #16]
    45c0:	429a      	cmp	r2, r3
    45c2:	d8e0      	bhi.n	4586 <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    45c4:	2301      	movs	r3, #1
    45c6:	613b      	str	r3, [r7, #16]
    45c8:	e00f      	b.n	45ea <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    45ca:	683b      	ldr	r3, [r7, #0]
    45cc:	88db      	ldrh	r3, [r3, #6]
    45ce:	461a      	mov	r2, r3
    45d0:	693b      	ldr	r3, [r7, #16]
    45d2:	b2db      	uxtb	r3, r3
    45d4:	4619      	mov	r1, r3
    45d6:	4610      	mov	r0, r2
    45d8:	4b1a      	ldr	r3, [pc, #104]	; (4644 <convert_datetime_to_timestamp+0x104>)
    45da:	4798      	blx	r3
    45dc:	4602      	mov	r2, r0
    45de:	697b      	ldr	r3, [r7, #20]
    45e0:	4413      	add	r3, r2
    45e2:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    45e4:	693b      	ldr	r3, [r7, #16]
    45e6:	3301      	adds	r3, #1
    45e8:	613b      	str	r3, [r7, #16]
    45ea:	7bba      	ldrb	r2, [r7, #14]
    45ec:	693b      	ldr	r3, [r7, #16]
    45ee:	429a      	cmp	r2, r3
    45f0:	d8eb      	bhi.n	45ca <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    45f2:	7b7b      	ldrb	r3, [r7, #13]
    45f4:	3b01      	subs	r3, #1
    45f6:	4a14      	ldr	r2, [pc, #80]	; (4648 <convert_datetime_to_timestamp+0x108>)
    45f8:	fb02 f303 	mul.w	r3, r2, r3
    45fc:	461a      	mov	r2, r3
    45fe:	697b      	ldr	r3, [r7, #20]
    4600:	4413      	add	r3, r2
    4602:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    4604:	7b3b      	ldrb	r3, [r7, #12]
    4606:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    460a:	fb02 f303 	mul.w	r3, r2, r3
    460e:	461a      	mov	r2, r3
    4610:	697b      	ldr	r3, [r7, #20]
    4612:	4413      	add	r3, r2
    4614:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    4616:	7afa      	ldrb	r2, [r7, #11]
    4618:	4613      	mov	r3, r2
    461a:	011b      	lsls	r3, r3, #4
    461c:	1a9b      	subs	r3, r3, r2
    461e:	009b      	lsls	r3, r3, #2
    4620:	461a      	mov	r2, r3
    4622:	697b      	ldr	r3, [r7, #20]
    4624:	4413      	add	r3, r2
    4626:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    4628:	7abb      	ldrb	r3, [r7, #10]
    462a:	697a      	ldr	r2, [r7, #20]
    462c:	4413      	add	r3, r2
    462e:	617b      	str	r3, [r7, #20]

	return tmp;
    4630:	697b      	ldr	r3, [r7, #20]
}
    4632:	4618      	mov	r0, r3
    4634:	3718      	adds	r7, #24
    4636:	46bd      	mov	sp, r7
    4638:	bd80      	pop	{r7, pc}
    463a:	bf00      	nop
    463c:	00004325 	.word	0x00004325
    4640:	01e13380 	.word	0x01e13380
    4644:	0000434d 	.word	0x0000434d
    4648:	00015180 	.word	0x00015180

0000464c <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    464c:	b580      	push	{r7, lr}
    464e:	b084      	sub	sp, #16
    4650:	af00      	add	r7, sp, #0
    4652:	6078      	str	r0, [r7, #4]
    4654:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    4656:	2300      	movs	r3, #0
    4658:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    465a:	687b      	ldr	r3, [r7, #4]
    465c:	2b00      	cmp	r3, #0
    465e:	bf14      	ite	ne
    4660:	2301      	movne	r3, #1
    4662:	2300      	moveq	r3, #0
    4664:	b2db      	uxtb	r3, r3
    4666:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    466a:	4911      	ldr	r1, [pc, #68]	; (46b0 <calendar_init+0x64>)
    466c:	4618      	mov	r0, r3
    466e:	4b11      	ldr	r3, [pc, #68]	; (46b4 <calendar_init+0x68>)
    4670:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    4672:	687b      	ldr	r3, [r7, #4]
    4674:	681a      	ldr	r2, [r3, #0]
    4676:	683b      	ldr	r3, [r7, #0]
    4678:	429a      	cmp	r2, r3
    467a:	d101      	bne.n	4680 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    467c:	2300      	movs	r3, #0
    467e:	e013      	b.n	46a8 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    4680:	687b      	ldr	r3, [r7, #4]
    4682:	681b      	ldr	r3, [r3, #0]
    4684:	2b00      	cmp	r3, #0
    4686:	d002      	beq.n	468e <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    4688:	f06f 0311 	mvn.w	r3, #17
    468c:	e00c      	b.n	46a8 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    468e:	687b      	ldr	r3, [r7, #4]
    4690:	683a      	ldr	r2, [r7, #0]
    4692:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    4694:	687b      	ldr	r3, [r7, #4]
    4696:	4618      	mov	r0, r3
    4698:	4b07      	ldr	r3, [pc, #28]	; (46b8 <calendar_init+0x6c>)
    469a:	4798      	blx	r3
    469c:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    469e:	687b      	ldr	r3, [r7, #4]
    46a0:	f240 72b2 	movw	r2, #1970	; 0x7b2
    46a4:	619a      	str	r2, [r3, #24]

	return ret;
    46a6:	68fb      	ldr	r3, [r7, #12]
}
    46a8:	4618      	mov	r0, r3
    46aa:	3710      	adds	r7, #16
    46ac:	46bd      	mov	sp, r7
    46ae:	bd80      	pop	{r7, pc}
    46b0:	0001839c 	.word	0x0001839c
    46b4:	000065d9 	.word	0x000065d9
    46b8:	00008ecd 	.word	0x00008ecd

000046bc <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    46bc:	b580      	push	{r7, lr}
    46be:	b082      	sub	sp, #8
    46c0:	af00      	add	r7, sp, #0
    46c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    46c4:	687b      	ldr	r3, [r7, #4]
    46c6:	2b00      	cmp	r3, #0
    46c8:	bf14      	ite	ne
    46ca:	2301      	movne	r3, #1
    46cc:	2300      	moveq	r3, #0
    46ce:	b2db      	uxtb	r3, r3
    46d0:	f240 12e5 	movw	r2, #485	; 0x1e5
    46d4:	4906      	ldr	r1, [pc, #24]	; (46f0 <calendar_enable+0x34>)
    46d6:	4618      	mov	r0, r3
    46d8:	4b06      	ldr	r3, [pc, #24]	; (46f4 <calendar_enable+0x38>)
    46da:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    46dc:	687b      	ldr	r3, [r7, #4]
    46de:	4618      	mov	r0, r3
    46e0:	4b05      	ldr	r3, [pc, #20]	; (46f8 <calendar_enable+0x3c>)
    46e2:	4798      	blx	r3

	return ERR_NONE;
    46e4:	2300      	movs	r3, #0
}
    46e6:	4618      	mov	r0, r3
    46e8:	3708      	adds	r7, #8
    46ea:	46bd      	mov	sp, r7
    46ec:	bd80      	pop	{r7, pc}
    46ee:	bf00      	nop
    46f0:	0001839c 	.word	0x0001839c
    46f4:	000065d9 	.word	0x000065d9
    46f8:	00008f85 	.word	0x00008f85

000046fc <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    46fc:	b580      	push	{r7, lr}
    46fe:	b086      	sub	sp, #24
    4700:	af00      	add	r7, sp, #0
    4702:	6078      	str	r0, [r7, #4]
    4704:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    4706:	687b      	ldr	r3, [r7, #4]
    4708:	2b00      	cmp	r3, #0
    470a:	bf14      	ite	ne
    470c:	2301      	movne	r3, #1
    470e:	2300      	moveq	r3, #0
    4710:	b2db      	uxtb	r3, r3
    4712:	f44f 7203 	mov.w	r2, #524	; 0x20c
    4716:	4915      	ldr	r1, [pc, #84]	; (476c <calendar_set_time+0x70>)
    4718:	4618      	mov	r0, r3
    471a:	4b15      	ldr	r3, [pc, #84]	; (4770 <calendar_set_time+0x74>)
    471c:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    471e:	687b      	ldr	r3, [r7, #4]
    4720:	4618      	mov	r0, r3
    4722:	4b14      	ldr	r3, [pc, #80]	; (4774 <calendar_set_time+0x78>)
    4724:	4798      	blx	r3
    4726:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    4728:	f107 0308 	add.w	r3, r7, #8
    472c:	461a      	mov	r2, r3
    472e:	6979      	ldr	r1, [r7, #20]
    4730:	6878      	ldr	r0, [r7, #4]
    4732:	4b11      	ldr	r3, [pc, #68]	; (4778 <calendar_set_time+0x7c>)
    4734:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    4736:	683b      	ldr	r3, [r7, #0]
    4738:	781b      	ldrb	r3, [r3, #0]
    473a:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    473c:	683b      	ldr	r3, [r7, #0]
    473e:	785b      	ldrb	r3, [r3, #1]
    4740:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    4742:	683b      	ldr	r3, [r7, #0]
    4744:	789b      	ldrb	r3, [r3, #2]
    4746:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    4748:	f107 0308 	add.w	r3, r7, #8
    474c:	4619      	mov	r1, r3
    474e:	6878      	ldr	r0, [r7, #4]
    4750:	4b0a      	ldr	r3, [pc, #40]	; (477c <calendar_set_time+0x80>)
    4752:	4798      	blx	r3
    4754:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    4756:	687b      	ldr	r3, [r7, #4]
    4758:	6939      	ldr	r1, [r7, #16]
    475a:	4618      	mov	r0, r3
    475c:	4b08      	ldr	r3, [pc, #32]	; (4780 <calendar_set_time+0x84>)
    475e:	4798      	blx	r3

	return ERR_NONE;
    4760:	2300      	movs	r3, #0
}
    4762:	4618      	mov	r0, r3
    4764:	3718      	adds	r7, #24
    4766:	46bd      	mov	sp, r7
    4768:	bd80      	pop	{r7, pc}
    476a:	bf00      	nop
    476c:	0001839c 	.word	0x0001839c
    4770:	000065d9 	.word	0x000065d9
    4774:	00009021 	.word	0x00009021
    4778:	00004435 	.word	0x00004435
    477c:	00004541 	.word	0x00004541
    4780:	00008fd1 	.word	0x00008fd1

00004784 <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    4784:	b580      	push	{r7, lr}
    4786:	b086      	sub	sp, #24
    4788:	af00      	add	r7, sp, #0
    478a:	6078      	str	r0, [r7, #4]
    478c:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    478e:	687b      	ldr	r3, [r7, #4]
    4790:	2b00      	cmp	r3, #0
    4792:	bf14      	ite	ne
    4794:	2301      	movne	r3, #1
    4796:	2300      	moveq	r3, #0
    4798:	b2db      	uxtb	r3, r3
    479a:	f44f 7209 	mov.w	r2, #548	; 0x224
    479e:	4915      	ldr	r1, [pc, #84]	; (47f4 <calendar_set_date+0x70>)
    47a0:	4618      	mov	r0, r3
    47a2:	4b15      	ldr	r3, [pc, #84]	; (47f8 <calendar_set_date+0x74>)
    47a4:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    47a6:	687b      	ldr	r3, [r7, #4]
    47a8:	4618      	mov	r0, r3
    47aa:	4b14      	ldr	r3, [pc, #80]	; (47fc <calendar_set_date+0x78>)
    47ac:	4798      	blx	r3
    47ae:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    47b0:	f107 0308 	add.w	r3, r7, #8
    47b4:	461a      	mov	r2, r3
    47b6:	6979      	ldr	r1, [r7, #20]
    47b8:	6878      	ldr	r0, [r7, #4]
    47ba:	4b11      	ldr	r3, [pc, #68]	; (4800 <calendar_set_date+0x7c>)
    47bc:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    47be:	683b      	ldr	r3, [r7, #0]
    47c0:	781b      	ldrb	r3, [r3, #0]
    47c2:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    47c4:	683b      	ldr	r3, [r7, #0]
    47c6:	785b      	ldrb	r3, [r3, #1]
    47c8:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    47ca:	683b      	ldr	r3, [r7, #0]
    47cc:	885b      	ldrh	r3, [r3, #2]
    47ce:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    47d0:	f107 0308 	add.w	r3, r7, #8
    47d4:	4619      	mov	r1, r3
    47d6:	6878      	ldr	r0, [r7, #4]
    47d8:	4b0a      	ldr	r3, [pc, #40]	; (4804 <calendar_set_date+0x80>)
    47da:	4798      	blx	r3
    47dc:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    47de:	687b      	ldr	r3, [r7, #4]
    47e0:	6939      	ldr	r1, [r7, #16]
    47e2:	4618      	mov	r0, r3
    47e4:	4b08      	ldr	r3, [pc, #32]	; (4808 <calendar_set_date+0x84>)
    47e6:	4798      	blx	r3

	return ERR_NONE;
    47e8:	2300      	movs	r3, #0
}
    47ea:	4618      	mov	r0, r3
    47ec:	3718      	adds	r7, #24
    47ee:	46bd      	mov	sp, r7
    47f0:	bd80      	pop	{r7, pc}
    47f2:	bf00      	nop
    47f4:	0001839c 	.word	0x0001839c
    47f8:	000065d9 	.word	0x000065d9
    47fc:	00009021 	.word	0x00009021
    4800:	00004435 	.word	0x00004435
    4804:	00004541 	.word	0x00004541
    4808:	00008fd1 	.word	0x00008fd1

0000480c <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    480c:	b580      	push	{r7, lr}
    480e:	b084      	sub	sp, #16
    4810:	af00      	add	r7, sp, #0
    4812:	6078      	str	r0, [r7, #4]
    4814:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    4816:	687b      	ldr	r3, [r7, #4]
    4818:	2b00      	cmp	r3, #0
    481a:	bf14      	ite	ne
    481c:	2301      	movne	r3, #1
    481e:	2300      	moveq	r3, #0
    4820:	b2db      	uxtb	r3, r3
    4822:	f240 223b 	movw	r2, #571	; 0x23b
    4826:	4909      	ldr	r1, [pc, #36]	; (484c <calendar_get_date_time+0x40>)
    4828:	4618      	mov	r0, r3
    482a:	4b09      	ldr	r3, [pc, #36]	; (4850 <calendar_get_date_time+0x44>)
    482c:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    482e:	687b      	ldr	r3, [r7, #4]
    4830:	4618      	mov	r0, r3
    4832:	4b08      	ldr	r3, [pc, #32]	; (4854 <calendar_get_date_time+0x48>)
    4834:	4798      	blx	r3
    4836:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    4838:	683a      	ldr	r2, [r7, #0]
    483a:	68f9      	ldr	r1, [r7, #12]
    483c:	6878      	ldr	r0, [r7, #4]
    483e:	4b06      	ldr	r3, [pc, #24]	; (4858 <calendar_get_date_time+0x4c>)
    4840:	4798      	blx	r3

	return ERR_NONE;
    4842:	2300      	movs	r3, #0
}
    4844:	4618      	mov	r0, r3
    4846:	3710      	adds	r7, #16
    4848:	46bd      	mov	sp, r7
    484a:	bd80      	pop	{r7, pc}
    484c:	0001839c 	.word	0x0001839c
    4850:	000065d9 	.word	0x000065d9
    4854:	00009021 	.word	0x00009021
    4858:	00004435 	.word	0x00004435

0000485c <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    485c:	b580      	push	{r7, lr}
    485e:	b084      	sub	sp, #16
    4860:	af00      	add	r7, sp, #0
    4862:	6078      	str	r0, [r7, #4]
    4864:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    4866:	687b      	ldr	r3, [r7, #4]
    4868:	2b00      	cmp	r3, #0
    486a:	d004      	beq.n	4876 <can_async_init+0x1a>
    486c:	683b      	ldr	r3, [r7, #0]
    486e:	2b00      	cmp	r3, #0
    4870:	d001      	beq.n	4876 <can_async_init+0x1a>
    4872:	2301      	movs	r3, #1
    4874:	e000      	b.n	4878 <can_async_init+0x1c>
    4876:	2300      	movs	r3, #0
    4878:	f003 0301 	and.w	r3, r3, #1
    487c:	b2db      	uxtb	r3, r3
    487e:	2241      	movs	r2, #65	; 0x41
    4880:	490e      	ldr	r1, [pc, #56]	; (48bc <can_async_init+0x60>)
    4882:	4618      	mov	r0, r3
    4884:	4b0e      	ldr	r3, [pc, #56]	; (48c0 <can_async_init+0x64>)
    4886:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    4888:	687b      	ldr	r3, [r7, #4]
    488a:	6839      	ldr	r1, [r7, #0]
    488c:	4618      	mov	r0, r3
    488e:	4b0d      	ldr	r3, [pc, #52]	; (48c4 <can_async_init+0x68>)
    4890:	4798      	blx	r3
    4892:	60f8      	str	r0, [r7, #12]
	if (rc) {
    4894:	68fb      	ldr	r3, [r7, #12]
    4896:	2b00      	cmp	r3, #0
    4898:	d001      	beq.n	489e <can_async_init+0x42>
		return rc;
    489a:	68fb      	ldr	r3, [r7, #12]
    489c:	e009      	b.n	48b2 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    489e:	687b      	ldr	r3, [r7, #4]
    48a0:	4a09      	ldr	r2, [pc, #36]	; (48c8 <can_async_init+0x6c>)
    48a2:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    48a4:	687b      	ldr	r3, [r7, #4]
    48a6:	4a09      	ldr	r2, [pc, #36]	; (48cc <can_async_init+0x70>)
    48a8:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	4a08      	ldr	r2, [pc, #32]	; (48d0 <can_async_init+0x74>)
    48ae:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    48b0:	2300      	movs	r3, #0
}
    48b2:	4618      	mov	r0, r3
    48b4:	3710      	adds	r7, #16
    48b6:	46bd      	mov	sp, r7
    48b8:	bd80      	pop	{r7, pc}
    48ba:	bf00      	nop
    48bc:	000183b8 	.word	0x000183b8
    48c0:	000065d9 	.word	0x000065d9
    48c4:	00006b35 	.word	0x00006b35
    48c8:	000048d5 	.word	0x000048d5
    48cc:	000048f9 	.word	0x000048f9
    48d0:	0000491d 	.word	0x0000491d

000048d4 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    48d4:	b580      	push	{r7, lr}
    48d6:	b084      	sub	sp, #16
    48d8:	af00      	add	r7, sp, #0
    48da:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    48dc:	687b      	ldr	r3, [r7, #4]
    48de:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    48e0:	68fb      	ldr	r3, [r7, #12]
    48e2:	69db      	ldr	r3, [r3, #28]
    48e4:	2b00      	cmp	r3, #0
    48e6:	d003      	beq.n	48f0 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    48e8:	68fb      	ldr	r3, [r7, #12]
    48ea:	69db      	ldr	r3, [r3, #28]
    48ec:	68f8      	ldr	r0, [r7, #12]
    48ee:	4798      	blx	r3
	}
}
    48f0:	bf00      	nop
    48f2:	3710      	adds	r7, #16
    48f4:	46bd      	mov	sp, r7
    48f6:	bd80      	pop	{r7, pc}

000048f8 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    48f8:	b580      	push	{r7, lr}
    48fa:	b084      	sub	sp, #16
    48fc:	af00      	add	r7, sp, #0
    48fe:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4900:	687b      	ldr	r3, [r7, #4]
    4902:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    4904:	68fb      	ldr	r3, [r7, #12]
    4906:	6a1b      	ldr	r3, [r3, #32]
    4908:	2b00      	cmp	r3, #0
    490a:	d003      	beq.n	4914 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    490c:	68fb      	ldr	r3, [r7, #12]
    490e:	6a1b      	ldr	r3, [r3, #32]
    4910:	68f8      	ldr	r0, [r7, #12]
    4912:	4798      	blx	r3
	}
}
    4914:	bf00      	nop
    4916:	3710      	adds	r7, #16
    4918:	46bd      	mov	sp, r7
    491a:	bd80      	pop	{r7, pc}

0000491c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    491c:	b580      	push	{r7, lr}
    491e:	b084      	sub	sp, #16
    4920:	af00      	add	r7, sp, #0
    4922:	6078      	str	r0, [r7, #4]
    4924:	460b      	mov	r3, r1
    4926:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4928:	687b      	ldr	r3, [r7, #4]
    492a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    492c:	68fb      	ldr	r3, [r7, #12]
    492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4930:	2b00      	cmp	r3, #0
    4932:	d005      	beq.n	4940 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    4934:	68fb      	ldr	r3, [r7, #12]
    4936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4938:	78fa      	ldrb	r2, [r7, #3]
    493a:	4611      	mov	r1, r2
    493c:	68f8      	ldr	r0, [r7, #12]
    493e:	4798      	blx	r3
	}
}
    4940:	bf00      	nop
    4942:	3710      	adds	r7, #16
    4944:	46bd      	mov	sp, r7
    4946:	bd80      	pop	{r7, pc}

00004948 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    4948:	b580      	push	{r7, lr}
    494a:	b082      	sub	sp, #8
    494c:	af00      	add	r7, sp, #0
    494e:	6078      	str	r0, [r7, #4]
    4950:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    4952:	687b      	ldr	r3, [r7, #4]
    4954:	2b00      	cmp	r3, #0
    4956:	d004      	beq.n	4962 <crc_sync_init+0x1a>
    4958:	683b      	ldr	r3, [r7, #0]
    495a:	2b00      	cmp	r3, #0
    495c:	d001      	beq.n	4962 <crc_sync_init+0x1a>
    495e:	2301      	movs	r3, #1
    4960:	e000      	b.n	4964 <crc_sync_init+0x1c>
    4962:	2300      	movs	r3, #0
    4964:	f003 0301 	and.w	r3, r3, #1
    4968:	b2db      	uxtb	r3, r3
    496a:	222b      	movs	r2, #43	; 0x2b
    496c:	4906      	ldr	r1, [pc, #24]	; (4988 <crc_sync_init+0x40>)
    496e:	4618      	mov	r0, r3
    4970:	4b06      	ldr	r3, [pc, #24]	; (498c <crc_sync_init+0x44>)
    4972:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    4974:	687b      	ldr	r3, [r7, #4]
    4976:	6839      	ldr	r1, [r7, #0]
    4978:	4618      	mov	r0, r3
    497a:	4b05      	ldr	r3, [pc, #20]	; (4990 <crc_sync_init+0x48>)
    497c:	4798      	blx	r3
    497e:	4603      	mov	r3, r0
}
    4980:	4618      	mov	r0, r3
    4982:	3708      	adds	r7, #8
    4984:	46bd      	mov	sp, r7
    4986:	bd80      	pop	{r7, pc}
    4988:	000183d4 	.word	0x000183d4
    498c:	000065d9 	.word	0x000065d9
    4990:	0000735d 	.word	0x0000735d

00004994 <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
    4994:	b580      	push	{r7, lr}
    4996:	b082      	sub	sp, #8
    4998:	af00      	add	r7, sp, #0
    499a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	2b00      	cmp	r3, #0
    49a0:	bf14      	ite	ne
    49a2:	2301      	movne	r3, #1
    49a4:	2300      	moveq	r3, #0
    49a6:	b2db      	uxtb	r3, r3
    49a8:	223f      	movs	r2, #63	; 0x3f
    49aa:	4906      	ldr	r1, [pc, #24]	; (49c4 <crc_sync_enable+0x30>)
    49ac:	4618      	mov	r0, r3
    49ae:	4b06      	ldr	r3, [pc, #24]	; (49c8 <crc_sync_enable+0x34>)
    49b0:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
    49b2:	687b      	ldr	r3, [r7, #4]
    49b4:	4618      	mov	r0, r3
    49b6:	4b05      	ldr	r3, [pc, #20]	; (49cc <crc_sync_enable+0x38>)
    49b8:	4798      	blx	r3
    49ba:	4603      	mov	r3, r0
}
    49bc:	4618      	mov	r0, r3
    49be:	3708      	adds	r7, #8
    49c0:	46bd      	mov	sp, r7
    49c2:	bd80      	pop	{r7, pc}
    49c4:	000183d4 	.word	0x000183d4
    49c8:	000065d9 	.word	0x000065d9
    49cc:	0000737b 	.word	0x0000737b

000049d0 <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
    49d0:	b590      	push	{r4, r7, lr}
    49d2:	b085      	sub	sp, #20
    49d4:	af00      	add	r7, sp, #0
    49d6:	60f8      	str	r0, [r7, #12]
    49d8:	60b9      	str	r1, [r7, #8]
    49da:	607a      	str	r2, [r7, #4]
    49dc:	603b      	str	r3, [r7, #0]
	ASSERT(descr && data && len && pcrc);
    49de:	68fb      	ldr	r3, [r7, #12]
    49e0:	2b00      	cmp	r3, #0
    49e2:	d00a      	beq.n	49fa <crc_sync_crc32+0x2a>
    49e4:	68bb      	ldr	r3, [r7, #8]
    49e6:	2b00      	cmp	r3, #0
    49e8:	d007      	beq.n	49fa <crc_sync_crc32+0x2a>
    49ea:	687b      	ldr	r3, [r7, #4]
    49ec:	2b00      	cmp	r3, #0
    49ee:	d004      	beq.n	49fa <crc_sync_crc32+0x2a>
    49f0:	683b      	ldr	r3, [r7, #0]
    49f2:	2b00      	cmp	r3, #0
    49f4:	d001      	beq.n	49fa <crc_sync_crc32+0x2a>
    49f6:	2301      	movs	r3, #1
    49f8:	e000      	b.n	49fc <crc_sync_crc32+0x2c>
    49fa:	2300      	movs	r3, #0
    49fc:	f003 0301 	and.w	r3, r3, #1
    4a00:	b2db      	uxtb	r3, r3
    4a02:	2253      	movs	r2, #83	; 0x53
    4a04:	4907      	ldr	r1, [pc, #28]	; (4a24 <crc_sync_crc32+0x54>)
    4a06:	4618      	mov	r0, r3
    4a08:	4b07      	ldr	r3, [pc, #28]	; (4a28 <crc_sync_crc32+0x58>)
    4a0a:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
    4a0c:	68f8      	ldr	r0, [r7, #12]
    4a0e:	683b      	ldr	r3, [r7, #0]
    4a10:	687a      	ldr	r2, [r7, #4]
    4a12:	68b9      	ldr	r1, [r7, #8]
    4a14:	4c05      	ldr	r4, [pc, #20]	; (4a2c <crc_sync_crc32+0x5c>)
    4a16:	47a0      	blx	r4
    4a18:	4603      	mov	r3, r0
}
    4a1a:	4618      	mov	r0, r3
    4a1c:	3714      	adds	r7, #20
    4a1e:	46bd      	mov	sp, r7
    4a20:	bd90      	pop	{r4, r7, pc}
    4a22:	bf00      	nop
    4a24:	000183d4 	.word	0x000183d4
    4a28:	000065d9 	.word	0x000065d9
    4a2c:	00007391 	.word	0x00007391

00004a30 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    4a30:	b590      	push	{r4, r7, lr}
    4a32:	b083      	sub	sp, #12
    4a34:	af00      	add	r7, sp, #0
    4a36:	4603      	mov	r3, r0
    4a38:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    4a3a:	4b07      	ldr	r3, [pc, #28]	; (4a58 <delay_us+0x28>)
    4a3c:	681c      	ldr	r4, [r3, #0]
    4a3e:	88fb      	ldrh	r3, [r7, #6]
    4a40:	4618      	mov	r0, r3
    4a42:	4b06      	ldr	r3, [pc, #24]	; (4a5c <delay_us+0x2c>)
    4a44:	4798      	blx	r3
    4a46:	4603      	mov	r3, r0
    4a48:	4619      	mov	r1, r3
    4a4a:	4620      	mov	r0, r4
    4a4c:	4b04      	ldr	r3, [pc, #16]	; (4a60 <delay_us+0x30>)
    4a4e:	4798      	blx	r3
}
    4a50:	bf00      	nop
    4a52:	370c      	adds	r7, #12
    4a54:	46bd      	mov	sp, r7
    4a56:	bd90      	pop	{r4, r7, pc}
    4a58:	20002e04 	.word	0x20002e04
    4a5c:	00006f8d 	.word	0x00006f8d
    4a60:	00007121 	.word	0x00007121

00004a64 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4a64:	b590      	push	{r4, r7, lr}
    4a66:	b083      	sub	sp, #12
    4a68:	af00      	add	r7, sp, #0
    4a6a:	4603      	mov	r3, r0
    4a6c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    4a6e:	4b07      	ldr	r3, [pc, #28]	; (4a8c <delay_ms+0x28>)
    4a70:	681c      	ldr	r4, [r3, #0]
    4a72:	88fb      	ldrh	r3, [r7, #6]
    4a74:	4618      	mov	r0, r3
    4a76:	4b06      	ldr	r3, [pc, #24]	; (4a90 <delay_ms+0x2c>)
    4a78:	4798      	blx	r3
    4a7a:	4603      	mov	r3, r0
    4a7c:	4619      	mov	r1, r3
    4a7e:	4620      	mov	r0, r4
    4a80:	4b04      	ldr	r3, [pc, #16]	; (4a94 <delay_ms+0x30>)
    4a82:	4798      	blx	r3
}
    4a84:	bf00      	nop
    4a86:	370c      	adds	r7, #12
    4a88:	46bd      	mov	sp, r7
    4a8a:	bd90      	pop	{r4, r7, pc}
    4a8c:	20002e04 	.word	0x20002e04
    4a90:	000070f9 	.word	0x000070f9
    4a94:	00007121 	.word	0x00007121

00004a98 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4a98:	b580      	push	{r7, lr}
    4a9a:	af00      	add	r7, sp, #0
	return _event_system_init();
    4a9c:	4b02      	ldr	r3, [pc, #8]	; (4aa8 <event_system_init+0x10>)
    4a9e:	4798      	blx	r3
    4aa0:	4603      	mov	r3, r0
}
    4aa2:	4618      	mov	r0, r3
    4aa4:	bd80      	pop	{r7, pc}
    4aa6:	bf00      	nop
    4aa8:	00007bc1 	.word	0x00007bc1

00004aac <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    4aac:	b580      	push	{r7, lr}
    4aae:	b082      	sub	sp, #8
    4ab0:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4ab2:	2300      	movs	r3, #0
    4ab4:	80fb      	strh	r3, [r7, #6]
    4ab6:	e00e      	b.n	4ad6 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    4ab8:	88fb      	ldrh	r3, [r7, #6]
    4aba:	4a0c      	ldr	r2, [pc, #48]	; (4aec <ext_irq_init+0x40>)
    4abc:	00db      	lsls	r3, r3, #3
    4abe:	4413      	add	r3, r2
    4ac0:	f04f 32ff 	mov.w	r2, #4294967295
    4ac4:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    4ac6:	88fb      	ldrh	r3, [r7, #6]
    4ac8:	4a08      	ldr	r2, [pc, #32]	; (4aec <ext_irq_init+0x40>)
    4aca:	2100      	movs	r1, #0
    4acc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4ad0:	88fb      	ldrh	r3, [r7, #6]
    4ad2:	3301      	adds	r3, #1
    4ad4:	80fb      	strh	r3, [r7, #6]
    4ad6:	88fb      	ldrh	r3, [r7, #6]
    4ad8:	2b04      	cmp	r3, #4
    4ada:	d9ed      	bls.n	4ab8 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    4adc:	4804      	ldr	r0, [pc, #16]	; (4af0 <ext_irq_init+0x44>)
    4ade:	4b05      	ldr	r3, [pc, #20]	; (4af4 <ext_irq_init+0x48>)
    4ae0:	4798      	blx	r3
    4ae2:	4603      	mov	r3, r0
}
    4ae4:	4618      	mov	r0, r3
    4ae6:	3708      	adds	r7, #8
    4ae8:	46bd      	mov	sp, r7
    4aea:	bd80      	pop	{r7, pc}
    4aec:	20002e08 	.word	0x20002e08
    4af0:	00004c51 	.word	0x00004c51
    4af4:	000077cd 	.word	0x000077cd

00004af8 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    4af8:	b580      	push	{r7, lr}
    4afa:	b086      	sub	sp, #24
    4afc:	af00      	add	r7, sp, #0
    4afe:	6078      	str	r0, [r7, #4]
    4b00:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    4b02:	2300      	movs	r3, #0
    4b04:	75fb      	strb	r3, [r7, #23]
    4b06:	2300      	movs	r3, #0
    4b08:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    4b0a:	2300      	movs	r3, #0
    4b0c:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    4b0e:	e012      	b.n	4b36 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    4b10:	7dfb      	ldrb	r3, [r7, #23]
    4b12:	4a4d      	ldr	r2, [pc, #308]	; (4c48 <ext_irq_register+0x150>)
    4b14:	00db      	lsls	r3, r3, #3
    4b16:	4413      	add	r3, r2
    4b18:	685a      	ldr	r2, [r3, #4]
    4b1a:	687b      	ldr	r3, [r7, #4]
    4b1c:	429a      	cmp	r2, r3
    4b1e:	d107      	bne.n	4b30 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    4b20:	7dfb      	ldrb	r3, [r7, #23]
    4b22:	4949      	ldr	r1, [pc, #292]	; (4c48 <ext_irq_register+0x150>)
    4b24:	683a      	ldr	r2, [r7, #0]
    4b26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    4b2a:	2301      	movs	r3, #1
    4b2c:	757b      	strb	r3, [r7, #21]
			break;
    4b2e:	e005      	b.n	4b3c <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    4b30:	7dfb      	ldrb	r3, [r7, #23]
    4b32:	3301      	adds	r3, #1
    4b34:	75fb      	strb	r3, [r7, #23]
    4b36:	7dfb      	ldrb	r3, [r7, #23]
    4b38:	2b04      	cmp	r3, #4
    4b3a:	d9e9      	bls.n	4b10 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    4b3c:	683b      	ldr	r3, [r7, #0]
    4b3e:	2b00      	cmp	r3, #0
    4b40:	d10e      	bne.n	4b60 <ext_irq_register+0x68>
		if (!found) {
    4b42:	7d7b      	ldrb	r3, [r7, #21]
    4b44:	f083 0301 	eor.w	r3, r3, #1
    4b48:	b2db      	uxtb	r3, r3
    4b4a:	2b00      	cmp	r3, #0
    4b4c:	d002      	beq.n	4b54 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    4b4e:	f06f 030c 	mvn.w	r3, #12
    4b52:	e074      	b.n	4c3e <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    4b54:	2100      	movs	r1, #0
    4b56:	6878      	ldr	r0, [r7, #4]
    4b58:	4b3c      	ldr	r3, [pc, #240]	; (4c4c <ext_irq_register+0x154>)
    4b5a:	4798      	blx	r3
    4b5c:	4603      	mov	r3, r0
    4b5e:	e06e      	b.n	4c3e <ext_irq_register+0x146>
	}

	if (!found) {
    4b60:	7d7b      	ldrb	r3, [r7, #21]
    4b62:	f083 0301 	eor.w	r3, r3, #1
    4b66:	b2db      	uxtb	r3, r3
    4b68:	2b00      	cmp	r3, #0
    4b6a:	d05a      	beq.n	4c22 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4b6c:	2300      	movs	r3, #0
    4b6e:	75fb      	strb	r3, [r7, #23]
    4b70:	e016      	b.n	4ba0 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    4b72:	7dfb      	ldrb	r3, [r7, #23]
    4b74:	4a34      	ldr	r2, [pc, #208]	; (4c48 <ext_irq_register+0x150>)
    4b76:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	d10d      	bne.n	4b9a <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    4b7e:	7dfb      	ldrb	r3, [r7, #23]
    4b80:	4931      	ldr	r1, [pc, #196]	; (4c48 <ext_irq_register+0x150>)
    4b82:	683a      	ldr	r2, [r7, #0]
    4b84:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    4b88:	7dfb      	ldrb	r3, [r7, #23]
    4b8a:	4a2f      	ldr	r2, [pc, #188]	; (4c48 <ext_irq_register+0x150>)
    4b8c:	00db      	lsls	r3, r3, #3
    4b8e:	4413      	add	r3, r2
    4b90:	687a      	ldr	r2, [r7, #4]
    4b92:	605a      	str	r2, [r3, #4]
				found           = true;
    4b94:	2301      	movs	r3, #1
    4b96:	757b      	strb	r3, [r7, #21]
				break;
    4b98:	e005      	b.n	4ba6 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4b9a:	7dfb      	ldrb	r3, [r7, #23]
    4b9c:	3301      	adds	r3, #1
    4b9e:	75fb      	strb	r3, [r7, #23]
    4ba0:	7dfb      	ldrb	r3, [r7, #23]
    4ba2:	2b04      	cmp	r3, #4
    4ba4:	d9e5      	bls.n	4b72 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    4ba6:	e036      	b.n	4c16 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    4ba8:	7dfb      	ldrb	r3, [r7, #23]
    4baa:	4a27      	ldr	r2, [pc, #156]	; (4c48 <ext_irq_register+0x150>)
    4bac:	00db      	lsls	r3, r3, #3
    4bae:	4413      	add	r3, r2
    4bb0:	685a      	ldr	r2, [r3, #4]
    4bb2:	7dbb      	ldrb	r3, [r7, #22]
    4bb4:	4924      	ldr	r1, [pc, #144]	; (4c48 <ext_irq_register+0x150>)
    4bb6:	00db      	lsls	r3, r3, #3
    4bb8:	440b      	add	r3, r1
    4bba:	685b      	ldr	r3, [r3, #4]
    4bbc:	429a      	cmp	r2, r3
    4bbe:	d227      	bcs.n	4c10 <ext_irq_register+0x118>
    4bc0:	7dbb      	ldrb	r3, [r7, #22]
    4bc2:	4a21      	ldr	r2, [pc, #132]	; (4c48 <ext_irq_register+0x150>)
    4bc4:	00db      	lsls	r3, r3, #3
    4bc6:	4413      	add	r3, r2
    4bc8:	685b      	ldr	r3, [r3, #4]
    4bca:	f1b3 3fff 	cmp.w	r3, #4294967295
    4bce:	d01f      	beq.n	4c10 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    4bd0:	7dbb      	ldrb	r3, [r7, #22]
    4bd2:	491d      	ldr	r1, [pc, #116]	; (4c48 <ext_irq_register+0x150>)
    4bd4:	f107 020c 	add.w	r2, r7, #12
    4bd8:	00db      	lsls	r3, r3, #3
    4bda:	440b      	add	r3, r1
    4bdc:	e893 0003 	ldmia.w	r3, {r0, r1}
    4be0:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    4be4:	7dbb      	ldrb	r3, [r7, #22]
    4be6:	7dfa      	ldrb	r2, [r7, #23]
    4be8:	4817      	ldr	r0, [pc, #92]	; (4c48 <ext_irq_register+0x150>)
    4bea:	4917      	ldr	r1, [pc, #92]	; (4c48 <ext_irq_register+0x150>)
    4bec:	00db      	lsls	r3, r3, #3
    4bee:	4403      	add	r3, r0
    4bf0:	00d2      	lsls	r2, r2, #3
    4bf2:	440a      	add	r2, r1
    4bf4:	e892 0003 	ldmia.w	r2, {r0, r1}
    4bf8:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    4bfc:	7dfb      	ldrb	r3, [r7, #23]
    4bfe:	4a12      	ldr	r2, [pc, #72]	; (4c48 <ext_irq_register+0x150>)
    4c00:	00db      	lsls	r3, r3, #3
    4c02:	4413      	add	r3, r2
    4c04:	f107 020c 	add.w	r2, r7, #12
    4c08:	e892 0003 	ldmia.w	r2, {r0, r1}
    4c0c:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    4c10:	7dbb      	ldrb	r3, [r7, #22]
    4c12:	3301      	adds	r3, #1
    4c14:	75bb      	strb	r3, [r7, #22]
    4c16:	7dbb      	ldrb	r3, [r7, #22]
    4c18:	2b04      	cmp	r3, #4
    4c1a:	d802      	bhi.n	4c22 <ext_irq_register+0x12a>
    4c1c:	7dfb      	ldrb	r3, [r7, #23]
    4c1e:	2b04      	cmp	r3, #4
    4c20:	d9c2      	bls.n	4ba8 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    4c22:	7d7b      	ldrb	r3, [r7, #21]
    4c24:	f083 0301 	eor.w	r3, r3, #1
    4c28:	b2db      	uxtb	r3, r3
    4c2a:	2b00      	cmp	r3, #0
    4c2c:	d002      	beq.n	4c34 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    4c2e:	f06f 030c 	mvn.w	r3, #12
    4c32:	e004      	b.n	4c3e <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    4c34:	2101      	movs	r1, #1
    4c36:	6878      	ldr	r0, [r7, #4]
    4c38:	4b04      	ldr	r3, [pc, #16]	; (4c4c <ext_irq_register+0x154>)
    4c3a:	4798      	blx	r3
    4c3c:	4603      	mov	r3, r0
}
    4c3e:	4618      	mov	r0, r3
    4c40:	3718      	adds	r7, #24
    4c42:	46bd      	mov	sp, r7
    4c44:	bd80      	pop	{r7, pc}
    4c46:	bf00      	nop
    4c48:	20002e08 	.word	0x20002e08
    4c4c:	00007919 	.word	0x00007919

00004c50 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    4c50:	b580      	push	{r7, lr}
    4c52:	b084      	sub	sp, #16
    4c54:	af00      	add	r7, sp, #0
    4c56:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4c58:	2300      	movs	r3, #0
    4c5a:	73fb      	strb	r3, [r7, #15]
    4c5c:	2305      	movs	r3, #5
    4c5e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    4c60:	e02a      	b.n	4cb8 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    4c62:	7bba      	ldrb	r2, [r7, #14]
    4c64:	7bfb      	ldrb	r3, [r7, #15]
    4c66:	4413      	add	r3, r2
    4c68:	105b      	asrs	r3, r3, #1
    4c6a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    4c6c:	7b7b      	ldrb	r3, [r7, #13]
    4c6e:	2b04      	cmp	r3, #4
    4c70:	d827      	bhi.n	4cc2 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    4c72:	7b7b      	ldrb	r3, [r7, #13]
    4c74:	4a16      	ldr	r2, [pc, #88]	; (4cd0 <process_ext_irq+0x80>)
    4c76:	00db      	lsls	r3, r3, #3
    4c78:	4413      	add	r3, r2
    4c7a:	685a      	ldr	r2, [r3, #4]
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	429a      	cmp	r2, r3
    4c80:	d10b      	bne.n	4c9a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    4c82:	7b7b      	ldrb	r3, [r7, #13]
    4c84:	4a12      	ldr	r2, [pc, #72]	; (4cd0 <process_ext_irq+0x80>)
    4c86:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4c8a:	2b00      	cmp	r3, #0
    4c8c:	d01b      	beq.n	4cc6 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    4c8e:	7b7b      	ldrb	r3, [r7, #13]
    4c90:	4a0f      	ldr	r2, [pc, #60]	; (4cd0 <process_ext_irq+0x80>)
    4c92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4c96:	4798      	blx	r3
			}
			return;
    4c98:	e015      	b.n	4cc6 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    4c9a:	7b7b      	ldrb	r3, [r7, #13]
    4c9c:	4a0c      	ldr	r2, [pc, #48]	; (4cd0 <process_ext_irq+0x80>)
    4c9e:	00db      	lsls	r3, r3, #3
    4ca0:	4413      	add	r3, r2
    4ca2:	685a      	ldr	r2, [r3, #4]
    4ca4:	687b      	ldr	r3, [r7, #4]
    4ca6:	429a      	cmp	r2, r3
    4ca8:	d203      	bcs.n	4cb2 <process_ext_irq+0x62>
			lower = middle + 1;
    4caa:	7b7b      	ldrb	r3, [r7, #13]
    4cac:	3301      	adds	r3, #1
    4cae:	73fb      	strb	r3, [r7, #15]
    4cb0:	e002      	b.n	4cb8 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    4cb2:	7b7b      	ldrb	r3, [r7, #13]
    4cb4:	3b01      	subs	r3, #1
    4cb6:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    4cb8:	7bba      	ldrb	r2, [r7, #14]
    4cba:	7bfb      	ldrb	r3, [r7, #15]
    4cbc:	429a      	cmp	r2, r3
    4cbe:	d2d0      	bcs.n	4c62 <process_ext_irq+0x12>
    4cc0:	e002      	b.n	4cc8 <process_ext_irq+0x78>
			return;
    4cc2:	bf00      	nop
    4cc4:	e000      	b.n	4cc8 <process_ext_irq+0x78>
			return;
    4cc6:	bf00      	nop
		}
	}
}
    4cc8:	3710      	adds	r7, #16
    4cca:	46bd      	mov	sp, r7
    4ccc:	bd80      	pop	{r7, pc}
    4cce:	bf00      	nop
    4cd0:	20002e08 	.word	0x20002e08

00004cd4 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4cd4:	b580      	push	{r7, lr}
    4cd6:	b084      	sub	sp, #16
    4cd8:	af00      	add	r7, sp, #0
    4cda:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    4cdc:	687b      	ldr	r3, [r7, #4]
    4cde:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4ce0:	687b      	ldr	r3, [r7, #4]
    4ce2:	885b      	ldrh	r3, [r3, #2]
    4ce4:	b29b      	uxth	r3, r3
    4ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4cea:	2b00      	cmp	r3, #0
    4cec:	d107      	bne.n	4cfe <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    4cee:	68fb      	ldr	r3, [r7, #12]
    4cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	d003      	beq.n	4cfe <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    4cf6:	68fb      	ldr	r3, [r7, #12]
    4cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4cfa:	68f8      	ldr	r0, [r7, #12]
    4cfc:	4798      	blx	r3
		}
	}
}
    4cfe:	bf00      	nop
    4d00:	3710      	adds	r7, #16
    4d02:	46bd      	mov	sp, r7
    4d04:	bd80      	pop	{r7, pc}

00004d06 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4d06:	b580      	push	{r7, lr}
    4d08:	b084      	sub	sp, #16
    4d0a:	af00      	add	r7, sp, #0
    4d0c:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    4d0e:	687b      	ldr	r3, [r7, #4]
    4d10:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4d12:	687b      	ldr	r3, [r7, #4]
    4d14:	885b      	ldrh	r3, [r3, #2]
    4d16:	b29b      	uxth	r3, r3
    4d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d107      	bne.n	4d30 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    4d20:	68fb      	ldr	r3, [r7, #12]
    4d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d24:	2b00      	cmp	r3, #0
    4d26:	d003      	beq.n	4d30 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    4d28:	68fb      	ldr	r3, [r7, #12]
    4d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d2c:	68f8      	ldr	r0, [r7, #12]
    4d2e:	4798      	blx	r3
		}
	}
}
    4d30:	bf00      	nop
    4d32:	3710      	adds	r7, #16
    4d34:	46bd      	mov	sp, r7
    4d36:	bd80      	pop	{r7, pc}

00004d38 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    4d38:	b580      	push	{r7, lr}
    4d3a:	b084      	sub	sp, #16
    4d3c:	af00      	add	r7, sp, #0
    4d3e:	6078      	str	r0, [r7, #4]
    4d40:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4d46:	687b      	ldr	r3, [r7, #4]
    4d48:	885b      	ldrh	r3, [r3, #2]
    4d4a:	b29b      	uxth	r3, r3
    4d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4d50:	2b00      	cmp	r3, #0
    4d52:	d108      	bne.n	4d66 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    4d54:	68fb      	ldr	r3, [r7, #12]
    4d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d004      	beq.n	4d66 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    4d5c:	68fb      	ldr	r3, [r7, #12]
    4d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4d60:	6839      	ldr	r1, [r7, #0]
    4d62:	68f8      	ldr	r0, [r7, #12]
    4d64:	4798      	blx	r3
		}
	}
}
    4d66:	bf00      	nop
    4d68:	3710      	adds	r7, #16
    4d6a:	46bd      	mov	sp, r7
    4d6c:	bd80      	pop	{r7, pc}
	...

00004d70 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    4d70:	b580      	push	{r7, lr}
    4d72:	b08a      	sub	sp, #40	; 0x28
    4d74:	af00      	add	r7, sp, #0
    4d76:	60f8      	str	r0, [r7, #12]
    4d78:	60b9      	str	r1, [r7, #8]
    4d7a:	4613      	mov	r3, r2
    4d7c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    4d7e:	68fb      	ldr	r3, [r7, #12]
    4d80:	3b28      	subs	r3, #40	; 0x28
    4d82:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    4d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d86:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    4d88:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    4d8a:	88fb      	ldrh	r3, [r7, #6]
    4d8c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    4d8e:	f248 0301 	movw	r3, #32769	; 0x8001
    4d92:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    4d94:	68bb      	ldr	r3, [r7, #8]
    4d96:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d9a:	f107 0214 	add.w	r2, r7, #20
    4d9e:	4611      	mov	r1, r2
    4da0:	4618      	mov	r0, r3
    4da2:	4b06      	ldr	r3, [pc, #24]	; (4dbc <i2c_m_async_read+0x4c>)
    4da4:	4798      	blx	r3
    4da6:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    4da8:	6a3b      	ldr	r3, [r7, #32]
    4daa:	2b00      	cmp	r3, #0
    4dac:	d001      	beq.n	4db2 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    4dae:	6a3b      	ldr	r3, [r7, #32]
    4db0:	e000      	b.n	4db4 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    4db2:	88fb      	ldrh	r3, [r7, #6]
}
    4db4:	4618      	mov	r0, r3
    4db6:	3728      	adds	r7, #40	; 0x28
    4db8:	46bd      	mov	sp, r7
    4dba:	bd80      	pop	{r7, pc}
    4dbc:	00009fc9 	.word	0x00009fc9

00004dc0 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    4dc0:	b580      	push	{r7, lr}
    4dc2:	b08a      	sub	sp, #40	; 0x28
    4dc4:	af00      	add	r7, sp, #0
    4dc6:	60f8      	str	r0, [r7, #12]
    4dc8:	60b9      	str	r1, [r7, #8]
    4dca:	4613      	mov	r3, r2
    4dcc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    4dce:	68fb      	ldr	r3, [r7, #12]
    4dd0:	3b28      	subs	r3, #40	; 0x28
    4dd2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    4dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4dd6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    4dd8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    4dda:	88fb      	ldrh	r3, [r7, #6]
    4ddc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    4dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4de2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    4de4:	68bb      	ldr	r3, [r7, #8]
    4de6:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4dea:	f107 0214 	add.w	r2, r7, #20
    4dee:	4611      	mov	r1, r2
    4df0:	4618      	mov	r0, r3
    4df2:	4b06      	ldr	r3, [pc, #24]	; (4e0c <i2c_m_async_write+0x4c>)
    4df4:	4798      	blx	r3
    4df6:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    4df8:	6a3b      	ldr	r3, [r7, #32]
    4dfa:	2b00      	cmp	r3, #0
    4dfc:	d001      	beq.n	4e02 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    4dfe:	6a3b      	ldr	r3, [r7, #32]
    4e00:	e000      	b.n	4e04 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    4e02:	88fb      	ldrh	r3, [r7, #6]
}
    4e04:	4618      	mov	r0, r3
    4e06:	3728      	adds	r7, #40	; 0x28
    4e08:	46bd      	mov	sp, r7
    4e0a:	bd80      	pop	{r7, pc}
    4e0c:	00009fc9 	.word	0x00009fc9

00004e10 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    4e10:	b580      	push	{r7, lr}
    4e12:	b084      	sub	sp, #16
    4e14:	af00      	add	r7, sp, #0
    4e16:	6078      	str	r0, [r7, #4]
    4e18:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	2b00      	cmp	r3, #0
    4e1e:	bf14      	ite	ne
    4e20:	2301      	movne	r3, #1
    4e22:	2300      	moveq	r3, #0
    4e24:	b2db      	uxtb	r3, r3
    4e26:	2289      	movs	r2, #137	; 0x89
    4e28:	4915      	ldr	r1, [pc, #84]	; (4e80 <i2c_m_async_init+0x70>)
    4e2a:	4618      	mov	r0, r3
    4e2c:	4b15      	ldr	r3, [pc, #84]	; (4e84 <i2c_m_async_init+0x74>)
    4e2e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4e30:	687b      	ldr	r3, [r7, #4]
    4e32:	6839      	ldr	r1, [r7, #0]
    4e34:	4618      	mov	r0, r3
    4e36:	4b14      	ldr	r3, [pc, #80]	; (4e88 <i2c_m_async_init+0x78>)
    4e38:	4798      	blx	r3
    4e3a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    4e3c:	68fb      	ldr	r3, [r7, #12]
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d001      	beq.n	4e46 <i2c_m_async_init+0x36>
		return init_status;
    4e42:	68fb      	ldr	r3, [r7, #12]
    4e44:	e018      	b.n	4e78 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	4a10      	ldr	r2, [pc, #64]	; (4e8c <i2c_m_async_init+0x7c>)
    4e4a:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	4a10      	ldr	r2, [pc, #64]	; (4e90 <i2c_m_async_init+0x80>)
    4e50:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4e52:	687b      	ldr	r3, [r7, #4]
    4e54:	4a0f      	ldr	r2, [pc, #60]	; (4e94 <i2c_m_async_init+0x84>)
    4e56:	2101      	movs	r1, #1
    4e58:	4618      	mov	r0, r3
    4e5a:	4b0f      	ldr	r3, [pc, #60]	; (4e98 <i2c_m_async_init+0x88>)
    4e5c:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    4e5e:	687b      	ldr	r3, [r7, #4]
    4e60:	4a0e      	ldr	r2, [pc, #56]	; (4e9c <i2c_m_async_init+0x8c>)
    4e62:	2102      	movs	r1, #2
    4e64:	4618      	mov	r0, r3
    4e66:	4b0c      	ldr	r3, [pc, #48]	; (4e98 <i2c_m_async_init+0x88>)
    4e68:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	4a0c      	ldr	r2, [pc, #48]	; (4ea0 <i2c_m_async_init+0x90>)
    4e6e:	2100      	movs	r1, #0
    4e70:	4618      	mov	r0, r3
    4e72:	4b09      	ldr	r3, [pc, #36]	; (4e98 <i2c_m_async_init+0x88>)
    4e74:	4798      	blx	r3

	return ERR_NONE;
    4e76:	2300      	movs	r3, #0
}
    4e78:	4618      	mov	r0, r3
    4e7a:	3710      	adds	r7, #16
    4e7c:	46bd      	mov	sp, r7
    4e7e:	bd80      	pop	{r7, pc}
    4e80:	000183f0 	.word	0x000183f0
    4e84:	000065d9 	.word	0x000065d9
    4e88:	00009e19 	.word	0x00009e19
    4e8c:	00004d71 	.word	0x00004d71
    4e90:	00004dc1 	.word	0x00004dc1
    4e94:	00004cd5 	.word	0x00004cd5
    4e98:	0000a09d 	.word	0x0000a09d
    4e9c:	00004d07 	.word	0x00004d07
    4ea0:	00004d39 	.word	0x00004d39

00004ea4 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    4ea4:	b580      	push	{r7, lr}
    4ea6:	b084      	sub	sp, #16
    4ea8:	af00      	add	r7, sp, #0
    4eaa:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    4eac:	687b      	ldr	r3, [r7, #4]
    4eae:	2b00      	cmp	r3, #0
    4eb0:	bf14      	ite	ne
    4eb2:	2301      	movne	r3, #1
    4eb4:	2300      	moveq	r3, #0
    4eb6:	b2db      	uxtb	r3, r3
    4eb8:	22b9      	movs	r2, #185	; 0xb9
    4eba:	4911      	ldr	r1, [pc, #68]	; (4f00 <i2c_m_async_enable+0x5c>)
    4ebc:	4618      	mov	r0, r3
    4ebe:	4b11      	ldr	r3, [pc, #68]	; (4f04 <i2c_m_async_enable+0x60>)
    4ec0:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    4ec2:	687b      	ldr	r3, [r7, #4]
    4ec4:	4618      	mov	r0, r3
    4ec6:	4b10      	ldr	r3, [pc, #64]	; (4f08 <i2c_m_async_enable+0x64>)
    4ec8:	4798      	blx	r3
    4eca:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    4ecc:	68fb      	ldr	r3, [r7, #12]
    4ece:	2b00      	cmp	r3, #0
    4ed0:	d111      	bne.n	4ef6 <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    4ed2:	687b      	ldr	r3, [r7, #4]
    4ed4:	2201      	movs	r2, #1
    4ed6:	2101      	movs	r1, #1
    4ed8:	4618      	mov	r0, r3
    4eda:	4b0c      	ldr	r3, [pc, #48]	; (4f0c <i2c_m_async_enable+0x68>)
    4edc:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    4ede:	687b      	ldr	r3, [r7, #4]
    4ee0:	2201      	movs	r2, #1
    4ee2:	2102      	movs	r1, #2
    4ee4:	4618      	mov	r0, r3
    4ee6:	4b09      	ldr	r3, [pc, #36]	; (4f0c <i2c_m_async_enable+0x68>)
    4ee8:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    4eea:	687b      	ldr	r3, [r7, #4]
    4eec:	2201      	movs	r2, #1
    4eee:	2100      	movs	r1, #0
    4ef0:	4618      	mov	r0, r3
    4ef2:	4b06      	ldr	r3, [pc, #24]	; (4f0c <i2c_m_async_enable+0x68>)
    4ef4:	4798      	blx	r3
	}
	return rc;
    4ef6:	68fb      	ldr	r3, [r7, #12]
}
    4ef8:	4618      	mov	r0, r3
    4efa:	3710      	adds	r7, #16
    4efc:	46bd      	mov	sp, r7
    4efe:	bd80      	pop	{r7, pc}
    4f00:	000183f0 	.word	0x000183f0
    4f04:	000065d9 	.word	0x000065d9
    4f08:	00009db5 	.word	0x00009db5
    4f0c:	0000a0e1 	.word	0x0000a0e1

00004f10 <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    4f10:	b480      	push	{r7}
    4f12:	b085      	sub	sp, #20
    4f14:	af00      	add	r7, sp, #0
    4f16:	60f8      	str	r0, [r7, #12]
    4f18:	460b      	mov	r3, r1
    4f1a:	607a      	str	r2, [r7, #4]
    4f1c:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    4f1e:	897b      	ldrh	r3, [r7, #10]
    4f20:	f3c3 0309 	ubfx	r3, r3, #0, #10
    4f24:	b21a      	sxth	r2, r3
    4f26:	687b      	ldr	r3, [r7, #4]
    4f28:	b21b      	sxth	r3, r3
    4f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4f2e:	b21b      	sxth	r3, r3
    4f30:	4313      	orrs	r3, r2
    4f32:	b21b      	sxth	r3, r3
    4f34:	b29a      	uxth	r2, r3
    4f36:	68fb      	ldr	r3, [r7, #12]
    4f38:	879a      	strh	r2, [r3, #60]	; 0x3c
    4f3a:	68fb      	ldr	r3, [r7, #12]
    4f3c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    4f3e:	4618      	mov	r0, r3
    4f40:	3714      	adds	r7, #20
    4f42:	46bd      	mov	sp, r7
    4f44:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f48:	4770      	bx	lr

00004f4a <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    4f4a:	b480      	push	{r7}
    4f4c:	b085      	sub	sp, #20
    4f4e:	af00      	add	r7, sp, #0
    4f50:	60f8      	str	r0, [r7, #12]
    4f52:	460b      	mov	r3, r1
    4f54:	607a      	str	r2, [r7, #4]
    4f56:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    4f58:	7afb      	ldrb	r3, [r7, #11]
    4f5a:	2b01      	cmp	r3, #1
    4f5c:	d007      	beq.n	4f6e <i2c_m_async_register_callback+0x24>
    4f5e:	2b02      	cmp	r3, #2
    4f60:	d009      	beq.n	4f76 <i2c_m_async_register_callback+0x2c>
    4f62:	2b00      	cmp	r3, #0
    4f64:	d10b      	bne.n	4f7e <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    4f66:	68fb      	ldr	r3, [r7, #12]
    4f68:	687a      	ldr	r2, [r7, #4]
    4f6a:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    4f6c:	e00a      	b.n	4f84 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    4f6e:	68fb      	ldr	r3, [r7, #12]
    4f70:	687a      	ldr	r2, [r7, #4]
    4f72:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    4f74:	e006      	b.n	4f84 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    4f76:	68fb      	ldr	r3, [r7, #12]
    4f78:	687a      	ldr	r2, [r7, #4]
    4f7a:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    4f7c:	e002      	b.n	4f84 <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    4f7e:	f06f 030c 	mvn.w	r3, #12
    4f82:	e000      	b.n	4f86 <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    4f84:	2300      	movs	r3, #0
}
    4f86:	4618      	mov	r0, r3
    4f88:	3714      	adds	r7, #20
    4f8a:	46bd      	mov	sp, r7
    4f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f90:	4770      	bx	lr

00004f92 <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    4f92:	b480      	push	{r7}
    4f94:	b083      	sub	sp, #12
    4f96:	af00      	add	r7, sp, #0
    4f98:	6078      	str	r0, [r7, #4]
    4f9a:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    4f9c:	687b      	ldr	r3, [r7, #4]
    4f9e:	f103 0228 	add.w	r2, r3, #40	; 0x28
    4fa2:	683b      	ldr	r3, [r7, #0]
    4fa4:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    4fa6:	2300      	movs	r3, #0
}
    4fa8:	4618      	mov	r0, r3
    4faa:	370c      	adds	r7, #12
    4fac:	46bd      	mov	sp, r7
    4fae:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fb2:	4770      	bx	lr

00004fb4 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    4fb4:	b580      	push	{r7, lr}
    4fb6:	b084      	sub	sp, #16
    4fb8:	af00      	add	r7, sp, #0
    4fba:	60f8      	str	r0, [r7, #12]
    4fbc:	60b9      	str	r1, [r7, #8]
    4fbe:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    4fc0:	68fb      	ldr	r3, [r7, #12]
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	d004      	beq.n	4fd0 <pwm_init+0x1c>
    4fc6:	68bb      	ldr	r3, [r7, #8]
    4fc8:	2b00      	cmp	r3, #0
    4fca:	d001      	beq.n	4fd0 <pwm_init+0x1c>
    4fcc:	2301      	movs	r3, #1
    4fce:	e000      	b.n	4fd2 <pwm_init+0x1e>
    4fd0:	2300      	movs	r3, #0
    4fd2:	f003 0301 	and.w	r3, r3, #1
    4fd6:	b2db      	uxtb	r3, r3
    4fd8:	2233      	movs	r2, #51	; 0x33
    4fda:	490a      	ldr	r1, [pc, #40]	; (5004 <pwm_init+0x50>)
    4fdc:	4618      	mov	r0, r3
    4fde:	4b0a      	ldr	r3, [pc, #40]	; (5008 <pwm_init+0x54>)
    4fe0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    4fe2:	68fb      	ldr	r3, [r7, #12]
    4fe4:	68b9      	ldr	r1, [r7, #8]
    4fe6:	4618      	mov	r0, r3
    4fe8:	4b08      	ldr	r3, [pc, #32]	; (500c <pwm_init+0x58>)
    4fea:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    4fec:	68fb      	ldr	r3, [r7, #12]
    4fee:	4a08      	ldr	r2, [pc, #32]	; (5010 <pwm_init+0x5c>)
    4ff0:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    4ff2:	68fb      	ldr	r3, [r7, #12]
    4ff4:	4a07      	ldr	r2, [pc, #28]	; (5014 <pwm_init+0x60>)
    4ff6:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    4ff8:	2300      	movs	r3, #0
}
    4ffa:	4618      	mov	r0, r3
    4ffc:	3710      	adds	r7, #16
    4ffe:	46bd      	mov	sp, r7
    5000:	bd80      	pop	{r7, pc}
    5002:	bf00      	nop
    5004:	00018410 	.word	0x00018410
    5008:	000065d9 	.word	0x000065d9
    500c:	0000b445 	.word	0x0000b445
    5010:	0000506d 	.word	0x0000506d
    5014:	00005091 	.word	0x00005091

00005018 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    5018:	b580      	push	{r7, lr}
    501a:	b082      	sub	sp, #8
    501c:	af00      	add	r7, sp, #0
    501e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5020:	687b      	ldr	r3, [r7, #4]
    5022:	2b00      	cmp	r3, #0
    5024:	bf14      	ite	ne
    5026:	2301      	movne	r3, #1
    5028:	2300      	moveq	r3, #0
    502a:	b2db      	uxtb	r3, r3
    502c:	224a      	movs	r2, #74	; 0x4a
    502e:	490b      	ldr	r1, [pc, #44]	; (505c <pwm_enable+0x44>)
    5030:	4618      	mov	r0, r3
    5032:	4b0b      	ldr	r3, [pc, #44]	; (5060 <pwm_enable+0x48>)
    5034:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    5036:	687b      	ldr	r3, [r7, #4]
    5038:	4618      	mov	r0, r3
    503a:	4b0a      	ldr	r3, [pc, #40]	; (5064 <pwm_enable+0x4c>)
    503c:	4798      	blx	r3
    503e:	4603      	mov	r3, r0
    5040:	2b00      	cmp	r3, #0
    5042:	d002      	beq.n	504a <pwm_enable+0x32>
		return ERR_DENIED;
    5044:	f06f 0310 	mvn.w	r3, #16
    5048:	e004      	b.n	5054 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    504a:	687b      	ldr	r3, [r7, #4]
    504c:	4618      	mov	r0, r3
    504e:	4b06      	ldr	r3, [pc, #24]	; (5068 <pwm_enable+0x50>)
    5050:	4798      	blx	r3

	return ERR_NONE;
    5052:	2300      	movs	r3, #0
}
    5054:	4618      	mov	r0, r3
    5056:	3708      	adds	r7, #8
    5058:	46bd      	mov	sp, r7
    505a:	bd80      	pop	{r7, pc}
    505c:	00018410 	.word	0x00018410
    5060:	000065d9 	.word	0x000065d9
    5064:	0000b6e1 	.word	0x0000b6e1
    5068:	0000b681 	.word	0x0000b681

0000506c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    506c:	b580      	push	{r7, lr}
    506e:	b084      	sub	sp, #16
    5070:	af00      	add	r7, sp, #0
    5072:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    5074:	687b      	ldr	r3, [r7, #4]
    5076:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    5078:	68fb      	ldr	r3, [r7, #12]
    507a:	695b      	ldr	r3, [r3, #20]
    507c:	2b00      	cmp	r3, #0
    507e:	d003      	beq.n	5088 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    5080:	68fb      	ldr	r3, [r7, #12]
    5082:	695b      	ldr	r3, [r3, #20]
    5084:	68f8      	ldr	r0, [r7, #12]
    5086:	4798      	blx	r3
	}
}
    5088:	bf00      	nop
    508a:	3710      	adds	r7, #16
    508c:	46bd      	mov	sp, r7
    508e:	bd80      	pop	{r7, pc}

00005090 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    5090:	b580      	push	{r7, lr}
    5092:	b084      	sub	sp, #16
    5094:	af00      	add	r7, sp, #0
    5096:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    5098:	687b      	ldr	r3, [r7, #4]
    509a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    509c:	68fb      	ldr	r3, [r7, #12]
    509e:	699b      	ldr	r3, [r3, #24]
    50a0:	2b00      	cmp	r3, #0
    50a2:	d003      	beq.n	50ac <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    50a4:	68fb      	ldr	r3, [r7, #12]
    50a6:	699b      	ldr	r3, [r3, #24]
    50a8:	68f8      	ldr	r0, [r7, #12]
    50aa:	4798      	blx	r3
	}
}
    50ac:	bf00      	nop
    50ae:	3710      	adds	r7, #16
    50b0:	46bd      	mov	sp, r7
    50b2:	bd80      	pop	{r7, pc}

000050b4 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    50b4:	b580      	push	{r7, lr}
    50b6:	b082      	sub	sp, #8
    50b8:	af00      	add	r7, sp, #0
    50ba:	6078      	str	r0, [r7, #4]
    50bc:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    50be:	687b      	ldr	r3, [r7, #4]
    50c0:	2b00      	cmp	r3, #0
    50c2:	d004      	beq.n	50ce <qspi_sync_init+0x1a>
    50c4:	683b      	ldr	r3, [r7, #0]
    50c6:	2b00      	cmp	r3, #0
    50c8:	d001      	beq.n	50ce <qspi_sync_init+0x1a>
    50ca:	2301      	movs	r3, #1
    50cc:	e000      	b.n	50d0 <qspi_sync_init+0x1c>
    50ce:	2300      	movs	r3, #0
    50d0:	f003 0301 	and.w	r3, r3, #1
    50d4:	b2db      	uxtb	r3, r3
    50d6:	2231      	movs	r2, #49	; 0x31
    50d8:	4906      	ldr	r1, [pc, #24]	; (50f4 <qspi_sync_init+0x40>)
    50da:	4618      	mov	r0, r3
    50dc:	4b06      	ldr	r3, [pc, #24]	; (50f8 <qspi_sync_init+0x44>)
    50de:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    50e0:	687b      	ldr	r3, [r7, #4]
    50e2:	6839      	ldr	r1, [r7, #0]
    50e4:	4618      	mov	r0, r3
    50e6:	4b05      	ldr	r3, [pc, #20]	; (50fc <qspi_sync_init+0x48>)
    50e8:	4798      	blx	r3
    50ea:	4603      	mov	r3, r0
}
    50ec:	4618      	mov	r0, r3
    50ee:	3708      	adds	r7, #8
    50f0:	46bd      	mov	sp, r7
    50f2:	bd80      	pop	{r7, pc}
    50f4:	00018428 	.word	0x00018428
    50f8:	000065d9 	.word	0x000065d9
    50fc:	00008a95 	.word	0x00008a95

00005100 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    5100:	b580      	push	{r7, lr}
    5102:	b082      	sub	sp, #8
    5104:	af00      	add	r7, sp, #0
    5106:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    5108:	687b      	ldr	r3, [r7, #4]
    510a:	2b00      	cmp	r3, #0
    510c:	bf14      	ite	ne
    510e:	2301      	movne	r3, #1
    5110:	2300      	moveq	r3, #0
    5112:	b2db      	uxtb	r3, r3
    5114:	223f      	movs	r2, #63	; 0x3f
    5116:	4906      	ldr	r1, [pc, #24]	; (5130 <qspi_sync_enable+0x30>)
    5118:	4618      	mov	r0, r3
    511a:	4b06      	ldr	r3, [pc, #24]	; (5134 <qspi_sync_enable+0x34>)
    511c:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    511e:	687b      	ldr	r3, [r7, #4]
    5120:	4618      	mov	r0, r3
    5122:	4b05      	ldr	r3, [pc, #20]	; (5138 <qspi_sync_enable+0x38>)
    5124:	4798      	blx	r3
    5126:	4603      	mov	r3, r0
}
    5128:	4618      	mov	r0, r3
    512a:	3708      	adds	r7, #8
    512c:	46bd      	mov	sp, r7
    512e:	bd80      	pop	{r7, pc}
    5130:	00018428 	.word	0x00018428
    5134:	000065d9 	.word	0x000065d9
    5138:	00008b09 	.word	0x00008b09

0000513c <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    513c:	b580      	push	{r7, lr}
    513e:	b082      	sub	sp, #8
    5140:	af00      	add	r7, sp, #0
    5142:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    5144:	687b      	ldr	r3, [r7, #4]
    5146:	2b00      	cmp	r3, #0
    5148:	bf14      	ite	ne
    514a:	2301      	movne	r3, #1
    514c:	2300      	moveq	r3, #0
    514e:	b2db      	uxtb	r3, r3
    5150:	2246      	movs	r2, #70	; 0x46
    5152:	4906      	ldr	r1, [pc, #24]	; (516c <qspi_sync_disable+0x30>)
    5154:	4618      	mov	r0, r3
    5156:	4b06      	ldr	r3, [pc, #24]	; (5170 <qspi_sync_disable+0x34>)
    5158:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    515a:	687b      	ldr	r3, [r7, #4]
    515c:	4618      	mov	r0, r3
    515e:	4b05      	ldr	r3, [pc, #20]	; (5174 <qspi_sync_disable+0x38>)
    5160:	4798      	blx	r3
    5162:	4603      	mov	r3, r0
}
    5164:	4618      	mov	r0, r3
    5166:	3708      	adds	r7, #8
    5168:	46bd      	mov	sp, r7
    516a:	bd80      	pop	{r7, pc}
    516c:	00018428 	.word	0x00018428
    5170:	000065d9 	.word	0x000065d9
    5174:	00008b2d 	.word	0x00008b2d

00005178 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    5178:	b580      	push	{r7, lr}
    517a:	b082      	sub	sp, #8
    517c:	af00      	add	r7, sp, #0
    517e:	6078      	str	r0, [r7, #4]
    5180:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    5182:	687b      	ldr	r3, [r7, #4]
    5184:	2b00      	cmp	r3, #0
    5186:	d004      	beq.n	5192 <qspi_sync_serial_run_command+0x1a>
    5188:	683b      	ldr	r3, [r7, #0]
    518a:	2b00      	cmp	r3, #0
    518c:	d001      	beq.n	5192 <qspi_sync_serial_run_command+0x1a>
    518e:	2301      	movs	r3, #1
    5190:	e000      	b.n	5194 <qspi_sync_serial_run_command+0x1c>
    5192:	2300      	movs	r3, #0
    5194:	f003 0301 	and.w	r3, r3, #1
    5198:	b2db      	uxtb	r3, r3
    519a:	224d      	movs	r2, #77	; 0x4d
    519c:	4906      	ldr	r1, [pc, #24]	; (51b8 <qspi_sync_serial_run_command+0x40>)
    519e:	4618      	mov	r0, r3
    51a0:	4b06      	ldr	r3, [pc, #24]	; (51bc <qspi_sync_serial_run_command+0x44>)
    51a2:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    51a4:	687b      	ldr	r3, [r7, #4]
    51a6:	6839      	ldr	r1, [r7, #0]
    51a8:	4618      	mov	r0, r3
    51aa:	4b05      	ldr	r3, [pc, #20]	; (51c0 <qspi_sync_serial_run_command+0x48>)
    51ac:	4798      	blx	r3
    51ae:	4603      	mov	r3, r0
}
    51b0:	4618      	mov	r0, r3
    51b2:	3708      	adds	r7, #8
    51b4:	46bd      	mov	sp, r7
    51b6:	bd80      	pop	{r7, pc}
    51b8:	00018428 	.word	0x00018428
    51bc:	000065d9 	.word	0x000065d9
    51c0:	00008c79 	.word	0x00008c79

000051c4 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    51c4:	b580      	push	{r7, lr}
    51c6:	b084      	sub	sp, #16
    51c8:	af00      	add	r7, sp, #0
    51ca:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    51cc:	687b      	ldr	r3, [r7, #4]
    51ce:	3b04      	subs	r3, #4
    51d0:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    51d2:	687b      	ldr	r3, [r7, #4]
    51d4:	791b      	ldrb	r3, [r3, #4]
    51d6:	2b01      	cmp	r3, #1
    51d8:	d80e      	bhi.n	51f8 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    51da:	68fb      	ldr	r3, [r7, #12]
    51dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    51de:	68fb      	ldr	r3, [r7, #12]
    51e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    51e2:	1c58      	adds	r0, r3, #1
    51e4:	68f9      	ldr	r1, [r7, #12]
    51e6:	6448      	str	r0, [r1, #68]	; 0x44
    51e8:	4413      	add	r3, r2
    51ea:	781b      	ldrb	r3, [r3, #0]
    51ec:	b29b      	uxth	r3, r3
    51ee:	4619      	mov	r1, r3
    51f0:	6878      	ldr	r0, [r7, #4]
    51f2:	4b11      	ldr	r3, [pc, #68]	; (5238 <_spi_dev_tx+0x74>)
    51f4:	4798      	blx	r3
    51f6:	e00d      	b.n	5214 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    51f8:	68fb      	ldr	r3, [r7, #12]
    51fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    51fc:	68fb      	ldr	r3, [r7, #12]
    51fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5200:	1c58      	adds	r0, r3, #1
    5202:	68f9      	ldr	r1, [r7, #12]
    5204:	6448      	str	r0, [r1, #68]	; 0x44
    5206:	005b      	lsls	r3, r3, #1
    5208:	4413      	add	r3, r2
    520a:	881b      	ldrh	r3, [r3, #0]
    520c:	4619      	mov	r1, r3
    520e:	6878      	ldr	r0, [r7, #4]
    5210:	4b09      	ldr	r3, [pc, #36]	; (5238 <_spi_dev_tx+0x74>)
    5212:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    5214:	68fb      	ldr	r3, [r7, #12]
    5216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    5218:	68fb      	ldr	r3, [r7, #12]
    521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    521c:	429a      	cmp	r2, r3
    521e:	d107      	bne.n	5230 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    5220:	2100      	movs	r1, #0
    5222:	6878      	ldr	r0, [r7, #4]
    5224:	4b05      	ldr	r3, [pc, #20]	; (523c <_spi_dev_tx+0x78>)
    5226:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    5228:	2101      	movs	r1, #1
    522a:	6878      	ldr	r0, [r7, #4]
    522c:	4b04      	ldr	r3, [pc, #16]	; (5240 <_spi_dev_tx+0x7c>)
    522e:	4798      	blx	r3
	}
}
    5230:	bf00      	nop
    5232:	3710      	adds	r7, #16
    5234:	46bd      	mov	sp, r7
    5236:	bd80      	pop	{r7, pc}
    5238:	0000acf5 	.word	0x0000acf5
    523c:	0000abb9 	.word	0x0000abb9
    5240:	0000ac8d 	.word	0x0000ac8d

00005244 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    5244:	b590      	push	{r4, r7, lr}
    5246:	b085      	sub	sp, #20
    5248:	af00      	add	r7, sp, #0
    524a:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    524c:	687b      	ldr	r3, [r7, #4]
    524e:	3b04      	subs	r3, #4
    5250:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    5252:	68fb      	ldr	r3, [r7, #12]
    5254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5256:	2b00      	cmp	r3, #0
    5258:	d021      	beq.n	529e <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    525a:	687b      	ldr	r3, [r7, #4]
    525c:	791b      	ldrb	r3, [r3, #4]
    525e:	2b01      	cmp	r3, #1
    5260:	d80e      	bhi.n	5280 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    5262:	68fb      	ldr	r3, [r7, #12]
    5264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    5266:	68fb      	ldr	r3, [r7, #12]
    5268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    526a:	1c58      	adds	r0, r3, #1
    526c:	68f9      	ldr	r1, [r7, #12]
    526e:	6448      	str	r0, [r1, #68]	; 0x44
    5270:	18d4      	adds	r4, r2, r3
    5272:	6878      	ldr	r0, [r7, #4]
    5274:	4b2e      	ldr	r3, [pc, #184]	; (5330 <_spi_dev_rx+0xec>)
    5276:	4798      	blx	r3
    5278:	4603      	mov	r3, r0
    527a:	b2db      	uxtb	r3, r3
    527c:	7023      	strb	r3, [r4, #0]
    527e:	e016      	b.n	52ae <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    5280:	68fb      	ldr	r3, [r7, #12]
    5282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    5284:	68fb      	ldr	r3, [r7, #12]
    5286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5288:	1c58      	adds	r0, r3, #1
    528a:	68f9      	ldr	r1, [r7, #12]
    528c:	6448      	str	r0, [r1, #68]	; 0x44
    528e:	005b      	lsls	r3, r3, #1
    5290:	18d4      	adds	r4, r2, r3
    5292:	6878      	ldr	r0, [r7, #4]
    5294:	4b26      	ldr	r3, [pc, #152]	; (5330 <_spi_dev_rx+0xec>)
    5296:	4798      	blx	r3
    5298:	4603      	mov	r3, r0
    529a:	8023      	strh	r3, [r4, #0]
    529c:	e007      	b.n	52ae <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    529e:	6878      	ldr	r0, [r7, #4]
    52a0:	4b23      	ldr	r3, [pc, #140]	; (5330 <_spi_dev_rx+0xec>)
    52a2:	4798      	blx	r3
		spi->xfercnt++;
    52a4:	68fb      	ldr	r3, [r7, #12]
    52a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    52a8:	1c5a      	adds	r2, r3, #1
    52aa:	68fb      	ldr	r3, [r7, #12]
    52ac:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    52ae:	68fb      	ldr	r3, [r7, #12]
    52b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    52b2:	68fb      	ldr	r3, [r7, #12]
    52b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    52b6:	429a      	cmp	r2, r3
    52b8:	d226      	bcs.n	5308 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    52ba:	68fb      	ldr	r3, [r7, #12]
    52bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    52be:	2b00      	cmp	r3, #0
    52c0:	d01b      	beq.n	52fa <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    52c2:	687b      	ldr	r3, [r7, #4]
    52c4:	791b      	ldrb	r3, [r3, #4]
    52c6:	2b01      	cmp	r3, #1
    52c8:	d80b      	bhi.n	52e2 <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    52ca:	68fb      	ldr	r3, [r7, #12]
    52cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    52ce:	68fb      	ldr	r3, [r7, #12]
    52d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    52d2:	4413      	add	r3, r2
    52d4:	781b      	ldrb	r3, [r3, #0]
    52d6:	b29b      	uxth	r3, r3
    52d8:	4619      	mov	r1, r3
    52da:	6878      	ldr	r0, [r7, #4]
    52dc:	4b15      	ldr	r3, [pc, #84]	; (5334 <_spi_dev_rx+0xf0>)
    52de:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    52e0:	e022      	b.n	5328 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    52e2:	68fb      	ldr	r3, [r7, #12]
    52e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    52e6:	68fb      	ldr	r3, [r7, #12]
    52e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    52ea:	005b      	lsls	r3, r3, #1
    52ec:	4413      	add	r3, r2
    52ee:	881b      	ldrh	r3, [r3, #0]
    52f0:	4619      	mov	r1, r3
    52f2:	6878      	ldr	r0, [r7, #4]
    52f4:	4b0f      	ldr	r3, [pc, #60]	; (5334 <_spi_dev_rx+0xf0>)
    52f6:	4798      	blx	r3
}
    52f8:	e016      	b.n	5328 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    52fa:	687b      	ldr	r3, [r7, #4]
    52fc:	88db      	ldrh	r3, [r3, #6]
    52fe:	4619      	mov	r1, r3
    5300:	6878      	ldr	r0, [r7, #4]
    5302:	4b0c      	ldr	r3, [pc, #48]	; (5334 <_spi_dev_rx+0xf0>)
    5304:	4798      	blx	r3
}
    5306:	e00f      	b.n	5328 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    5308:	2100      	movs	r1, #0
    530a:	6878      	ldr	r0, [r7, #4]
    530c:	4b0a      	ldr	r3, [pc, #40]	; (5338 <_spi_dev_rx+0xf4>)
    530e:	4798      	blx	r3
		spi->stat = 0;
    5310:	68fb      	ldr	r3, [r7, #12]
    5312:	2200      	movs	r2, #0
    5314:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    5318:	68fb      	ldr	r3, [r7, #12]
    531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    531c:	2b00      	cmp	r3, #0
    531e:	d003      	beq.n	5328 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    5320:	68fb      	ldr	r3, [r7, #12]
    5322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5324:	68f8      	ldr	r0, [r7, #12]
    5326:	4798      	blx	r3
}
    5328:	bf00      	nop
    532a:	3714      	adds	r7, #20
    532c:	46bd      	mov	sp, r7
    532e:	bd90      	pop	{r4, r7, pc}
    5330:	0000ad4d 	.word	0x0000ad4d
    5334:	0000acf5 	.word	0x0000acf5
    5338:	0000ac1d 	.word	0x0000ac1d

0000533c <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    533c:	b580      	push	{r7, lr}
    533e:	b084      	sub	sp, #16
    5340:	af00      	add	r7, sp, #0
    5342:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    5344:	687b      	ldr	r3, [r7, #4]
    5346:	3b04      	subs	r3, #4
    5348:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    534a:	68fb      	ldr	r3, [r7, #12]
    534c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    534e:	68fb      	ldr	r3, [r7, #12]
    5350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5352:	429a      	cmp	r2, r3
    5354:	d30f      	bcc.n	5376 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    5356:	2100      	movs	r1, #0
    5358:	6878      	ldr	r0, [r7, #4]
    535a:	4b09      	ldr	r3, [pc, #36]	; (5380 <_spi_dev_complete+0x44>)
    535c:	4798      	blx	r3
		spi->stat = 0;
    535e:	68fb      	ldr	r3, [r7, #12]
    5360:	2200      	movs	r2, #0
    5362:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    5366:	68fb      	ldr	r3, [r7, #12]
    5368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    536a:	2b00      	cmp	r3, #0
    536c:	d003      	beq.n	5376 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    536e:	68fb      	ldr	r3, [r7, #12]
    5370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5372:	68f8      	ldr	r0, [r7, #12]
    5374:	4798      	blx	r3
		}
	}
}
    5376:	bf00      	nop
    5378:	3710      	adds	r7, #16
    537a:	46bd      	mov	sp, r7
    537c:	bd80      	pop	{r7, pc}
    537e:	bf00      	nop
    5380:	0000ac8d 	.word	0x0000ac8d

00005384 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    5384:	b580      	push	{r7, lr}
    5386:	b084      	sub	sp, #16
    5388:	af00      	add	r7, sp, #0
    538a:	6078      	str	r0, [r7, #4]
    538c:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    538e:	687b      	ldr	r3, [r7, #4]
    5390:	3b04      	subs	r3, #4
    5392:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    5394:	2100      	movs	r1, #0
    5396:	6878      	ldr	r0, [r7, #4]
    5398:	4b0d      	ldr	r3, [pc, #52]	; (53d0 <_spi_dev_error+0x4c>)
    539a:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    539c:	2100      	movs	r1, #0
    539e:	6878      	ldr	r0, [r7, #4]
    53a0:	4b0c      	ldr	r3, [pc, #48]	; (53d4 <_spi_dev_error+0x50>)
    53a2:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    53a4:	2100      	movs	r1, #0
    53a6:	6878      	ldr	r0, [r7, #4]
    53a8:	4b0b      	ldr	r3, [pc, #44]	; (53d8 <_spi_dev_error+0x54>)
    53aa:	4798      	blx	r3
	spi->stat = 0;
    53ac:	68fb      	ldr	r3, [r7, #12]
    53ae:	2200      	movs	r2, #0
    53b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    53b4:	68fb      	ldr	r3, [r7, #12]
    53b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    53b8:	2b00      	cmp	r3, #0
    53ba:	d004      	beq.n	53c6 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    53bc:	68fb      	ldr	r3, [r7, #12]
    53be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    53c0:	6839      	ldr	r1, [r7, #0]
    53c2:	68f8      	ldr	r0, [r7, #12]
    53c4:	4798      	blx	r3
	}
}
    53c6:	bf00      	nop
    53c8:	3710      	adds	r7, #16
    53ca:	46bd      	mov	sp, r7
    53cc:	bd80      	pop	{r7, pc}
    53ce:	bf00      	nop
    53d0:	0000abb9 	.word	0x0000abb9
    53d4:	0000ac1d 	.word	0x0000ac1d
    53d8:	0000ac8d 	.word	0x0000ac8d

000053dc <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    53dc:	b580      	push	{r7, lr}
    53de:	b084      	sub	sp, #16
    53e0:	af00      	add	r7, sp, #0
    53e2:	6078      	str	r0, [r7, #4]
    53e4:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    53e6:	2300      	movs	r3, #0
    53e8:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    53ea:	687b      	ldr	r3, [r7, #4]
    53ec:	2b00      	cmp	r3, #0
    53ee:	d004      	beq.n	53fa <spi_m_async_init+0x1e>
    53f0:	683b      	ldr	r3, [r7, #0]
    53f2:	2b00      	cmp	r3, #0
    53f4:	d001      	beq.n	53fa <spi_m_async_init+0x1e>
    53f6:	2301      	movs	r3, #1
    53f8:	e000      	b.n	53fc <spi_m_async_init+0x20>
    53fa:	2300      	movs	r3, #0
    53fc:	f003 0301 	and.w	r3, r3, #1
    5400:	b2db      	uxtb	r3, r3
    5402:	22a5      	movs	r2, #165	; 0xa5
    5404:	491c      	ldr	r1, [pc, #112]	; (5478 <spi_m_async_init+0x9c>)
    5406:	4618      	mov	r0, r3
    5408:	4b1c      	ldr	r3, [pc, #112]	; (547c <spi_m_async_init+0xa0>)
    540a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    540c:	687b      	ldr	r3, [r7, #4]
    540e:	683a      	ldr	r2, [r7, #0]
    5410:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    5412:	687b      	ldr	r3, [r7, #4]
    5414:	3304      	adds	r3, #4
    5416:	6839      	ldr	r1, [r7, #0]
    5418:	4618      	mov	r0, r3
    541a:	4b19      	ldr	r3, [pc, #100]	; (5480 <spi_m_async_init+0xa4>)
    541c:	4798      	blx	r3
    541e:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    5420:	68fb      	ldr	r3, [r7, #12]
    5422:	2b00      	cmp	r3, #0
    5424:	db23      	blt.n	546e <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    5426:	687b      	ldr	r3, [r7, #4]
    5428:	3304      	adds	r3, #4
    542a:	4a16      	ldr	r2, [pc, #88]	; (5484 <spi_m_async_init+0xa8>)
    542c:	2100      	movs	r1, #0
    542e:	4618      	mov	r0, r3
    5430:	4b15      	ldr	r3, [pc, #84]	; (5488 <spi_m_async_init+0xac>)
    5432:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    5434:	687b      	ldr	r3, [r7, #4]
    5436:	3304      	adds	r3, #4
    5438:	4a14      	ldr	r2, [pc, #80]	; (548c <spi_m_async_init+0xb0>)
    543a:	2101      	movs	r1, #1
    543c:	4618      	mov	r0, r3
    543e:	4b12      	ldr	r3, [pc, #72]	; (5488 <spi_m_async_init+0xac>)
    5440:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    5442:	687b      	ldr	r3, [r7, #4]
    5444:	3304      	adds	r3, #4
    5446:	4a12      	ldr	r2, [pc, #72]	; (5490 <spi_m_async_init+0xb4>)
    5448:	2102      	movs	r1, #2
    544a:	4618      	mov	r0, r3
    544c:	4b0e      	ldr	r3, [pc, #56]	; (5488 <spi_m_async_init+0xac>)
    544e:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    5450:	687b      	ldr	r3, [r7, #4]
    5452:	3304      	adds	r3, #4
    5454:	4a0f      	ldr	r2, [pc, #60]	; (5494 <spi_m_async_init+0xb8>)
    5456:	2103      	movs	r1, #3
    5458:	4618      	mov	r0, r3
    545a:	4b0b      	ldr	r3, [pc, #44]	; (5488 <spi_m_async_init+0xac>)
    545c:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    545e:	687b      	ldr	r3, [r7, #4]
    5460:	4a0d      	ldr	r2, [pc, #52]	; (5498 <spi_m_async_init+0xbc>)
    5462:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    5464:	687b      	ldr	r3, [r7, #4]
    5466:	4a0d      	ldr	r2, [pc, #52]	; (549c <spi_m_async_init+0xc0>)
    5468:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    546a:	2300      	movs	r3, #0
    546c:	e000      	b.n	5470 <spi_m_async_init+0x94>
		return rc;
    546e:	68fb      	ldr	r3, [r7, #12]
}
    5470:	4618      	mov	r0, r3
    5472:	3710      	adds	r7, #16
    5474:	46bd      	mov	sp, r7
    5476:	bd80      	pop	{r7, pc}
    5478:	00018444 	.word	0x00018444
    547c:	000065d9 	.word	0x000065d9
    5480:	0000a819 	.word	0x0000a819
    5484:	000051c5 	.word	0x000051c5
    5488:	0000ad9d 	.word	0x0000ad9d
    548c:	00005245 	.word	0x00005245
    5490:	0000533d 	.word	0x0000533d
    5494:	00005385 	.word	0x00005385
    5498:	000054a1 	.word	0x000054a1
    549c:	00005521 	.word	0x00005521

000054a0 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    54a0:	b580      	push	{r7, lr}
    54a2:	b086      	sub	sp, #24
    54a4:	af00      	add	r7, sp, #0
    54a6:	60f8      	str	r0, [r7, #12]
    54a8:	60b9      	str	r1, [r7, #8]
    54aa:	4613      	mov	r3, r2
    54ac:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    54ae:	68fb      	ldr	r3, [r7, #12]
    54b0:	2b00      	cmp	r3, #0
    54b2:	bf14      	ite	ne
    54b4:	2301      	movne	r3, #1
    54b6:	2300      	moveq	r3, #0
    54b8:	b2db      	uxtb	r3, r3
    54ba:	f240 1205 	movw	r2, #261	; 0x105
    54be:	4914      	ldr	r1, [pc, #80]	; (5510 <_spi_m_async_io_read+0x70>)
    54c0:	4618      	mov	r0, r3
    54c2:	4b14      	ldr	r3, [pc, #80]	; (5514 <_spi_m_async_io_read+0x74>)
    54c4:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    54c6:	68fb      	ldr	r3, [r7, #12]
    54c8:	3b24      	subs	r3, #36	; 0x24
    54ca:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    54cc:	697b      	ldr	r3, [r7, #20]
    54ce:	68ba      	ldr	r2, [r7, #8]
    54d0:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    54d2:	697b      	ldr	r3, [r7, #20]
    54d4:	2200      	movs	r2, #0
    54d6:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    54d8:	88fa      	ldrh	r2, [r7, #6]
    54da:	697b      	ldr	r3, [r7, #20]
    54dc:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    54de:	697b      	ldr	r3, [r7, #20]
    54e0:	2200      	movs	r2, #0
    54e2:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    54e4:	697b      	ldr	r3, [r7, #20]
    54e6:	2210      	movs	r2, #16
    54e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    54ec:	697b      	ldr	r3, [r7, #20]
    54ee:	3304      	adds	r3, #4
    54f0:	2101      	movs	r1, #1
    54f2:	4618      	mov	r0, r3
    54f4:	4b08      	ldr	r3, [pc, #32]	; (5518 <_spi_m_async_io_read+0x78>)
    54f6:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    54f8:	697b      	ldr	r3, [r7, #20]
    54fa:	3304      	adds	r3, #4
    54fc:	f240 11ff 	movw	r1, #511	; 0x1ff
    5500:	4618      	mov	r0, r3
    5502:	4b06      	ldr	r3, [pc, #24]	; (551c <_spi_m_async_io_read+0x7c>)
    5504:	4798      	blx	r3

	return ERR_NONE;
    5506:	2300      	movs	r3, #0
}
    5508:	4618      	mov	r0, r3
    550a:	3718      	adds	r7, #24
    550c:	46bd      	mov	sp, r7
    550e:	bd80      	pop	{r7, pc}
    5510:	00018444 	.word	0x00018444
    5514:	000065d9 	.word	0x000065d9
    5518:	0000ac1d 	.word	0x0000ac1d
    551c:	0000acf5 	.word	0x0000acf5

00005520 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    5520:	b580      	push	{r7, lr}
    5522:	b086      	sub	sp, #24
    5524:	af00      	add	r7, sp, #0
    5526:	60f8      	str	r0, [r7, #12]
    5528:	60b9      	str	r1, [r7, #8]
    552a:	4613      	mov	r3, r2
    552c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    552e:	68fb      	ldr	r3, [r7, #12]
    5530:	2b00      	cmp	r3, #0
    5532:	bf14      	ite	ne
    5534:	2301      	movne	r3, #1
    5536:	2300      	moveq	r3, #0
    5538:	b2db      	uxtb	r3, r3
    553a:	f240 1227 	movw	r2, #295	; 0x127
    553e:	4911      	ldr	r1, [pc, #68]	; (5584 <_spi_m_async_io_write+0x64>)
    5540:	4618      	mov	r0, r3
    5542:	4b11      	ldr	r3, [pc, #68]	; (5588 <_spi_m_async_io_write+0x68>)
    5544:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    5546:	68fb      	ldr	r3, [r7, #12]
    5548:	3b24      	subs	r3, #36	; 0x24
    554a:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    554c:	697b      	ldr	r3, [r7, #20]
    554e:	2200      	movs	r2, #0
    5550:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    5552:	697b      	ldr	r3, [r7, #20]
    5554:	68ba      	ldr	r2, [r7, #8]
    5556:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    5558:	88fa      	ldrh	r2, [r7, #6]
    555a:	697b      	ldr	r3, [r7, #20]
    555c:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    555e:	697b      	ldr	r3, [r7, #20]
    5560:	2200      	movs	r2, #0
    5562:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    5564:	697b      	ldr	r3, [r7, #20]
    5566:	2210      	movs	r2, #16
    5568:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    556c:	697b      	ldr	r3, [r7, #20]
    556e:	3304      	adds	r3, #4
    5570:	2101      	movs	r1, #1
    5572:	4618      	mov	r0, r3
    5574:	4b05      	ldr	r3, [pc, #20]	; (558c <_spi_m_async_io_write+0x6c>)
    5576:	4798      	blx	r3

	return ERR_NONE;
    5578:	2300      	movs	r3, #0
}
    557a:	4618      	mov	r0, r3
    557c:	3718      	adds	r7, #24
    557e:	46bd      	mov	sp, r7
    5580:	bd80      	pop	{r7, pc}
    5582:	bf00      	nop
    5584:	00018444 	.word	0x00018444
    5588:	000065d9 	.word	0x000065d9
    558c:	0000abb9 	.word	0x0000abb9

00005590 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    5590:	b580      	push	{r7, lr}
    5592:	b084      	sub	sp, #16
    5594:	af00      	add	r7, sp, #0
    5596:	6078      	str	r0, [r7, #4]
    5598:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    559a:	2300      	movs	r3, #0
    559c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    559e:	687b      	ldr	r3, [r7, #4]
    55a0:	2b00      	cmp	r3, #0
    55a2:	d004      	beq.n	55ae <spi_m_sync_init+0x1e>
    55a4:	683b      	ldr	r3, [r7, #0]
    55a6:	2b00      	cmp	r3, #0
    55a8:	d001      	beq.n	55ae <spi_m_sync_init+0x1e>
    55aa:	2301      	movs	r3, #1
    55ac:	e000      	b.n	55b0 <spi_m_sync_init+0x20>
    55ae:	2300      	movs	r3, #0
    55b0:	f003 0301 	and.w	r3, r3, #1
    55b4:	b2db      	uxtb	r3, r3
    55b6:	2240      	movs	r2, #64	; 0x40
    55b8:	4910      	ldr	r1, [pc, #64]	; (55fc <spi_m_sync_init+0x6c>)
    55ba:	4618      	mov	r0, r3
    55bc:	4b10      	ldr	r3, [pc, #64]	; (5600 <spi_m_sync_init+0x70>)
    55be:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    55c0:	687b      	ldr	r3, [r7, #4]
    55c2:	683a      	ldr	r2, [r7, #0]
    55c4:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    55c6:	687b      	ldr	r3, [r7, #4]
    55c8:	3304      	adds	r3, #4
    55ca:	6839      	ldr	r1, [r7, #0]
    55cc:	4618      	mov	r0, r3
    55ce:	4b0d      	ldr	r3, [pc, #52]	; (5604 <spi_m_sync_init+0x74>)
    55d0:	4798      	blx	r3
    55d2:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    55d4:	68fb      	ldr	r3, [r7, #12]
    55d6:	2b00      	cmp	r3, #0
    55d8:	da01      	bge.n	55de <spi_m_sync_init+0x4e>
		return rc;
    55da:	68fb      	ldr	r3, [r7, #12]
    55dc:	e00a      	b.n	55f4 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    55de:	687b      	ldr	r3, [r7, #4]
    55e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    55e4:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    55e6:	687b      	ldr	r3, [r7, #4]
    55e8:	4a07      	ldr	r2, [pc, #28]	; (5608 <spi_m_sync_init+0x78>)
    55ea:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    55ec:	687b      	ldr	r3, [r7, #4]
    55ee:	4a07      	ldr	r2, [pc, #28]	; (560c <spi_m_sync_init+0x7c>)
    55f0:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    55f2:	2300      	movs	r3, #0
}
    55f4:	4618      	mov	r0, r3
    55f6:	3710      	adds	r7, #16
    55f8:	46bd      	mov	sp, r7
    55fa:	bd80      	pop	{r7, pc}
    55fc:	00018464 	.word	0x00018464
    5600:	000065d9 	.word	0x000065d9
    5604:	0000a70d 	.word	0x0000a70d
    5608:	00005689 	.word	0x00005689
    560c:	000056e1 	.word	0x000056e1

00005610 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    5610:	b580      	push	{r7, lr}
    5612:	b082      	sub	sp, #8
    5614:	af00      	add	r7, sp, #0
    5616:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    5618:	687b      	ldr	r3, [r7, #4]
    561a:	2b00      	cmp	r3, #0
    561c:	bf14      	ite	ne
    561e:	2301      	movne	r3, #1
    5620:	2300      	moveq	r3, #0
    5622:	b2db      	uxtb	r3, r3
    5624:	2257      	movs	r2, #87	; 0x57
    5626:	4906      	ldr	r1, [pc, #24]	; (5640 <spi_m_sync_enable+0x30>)
    5628:	4618      	mov	r0, r3
    562a:	4b06      	ldr	r3, [pc, #24]	; (5644 <spi_m_sync_enable+0x34>)
    562c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    562e:	687b      	ldr	r3, [r7, #4]
    5630:	3304      	adds	r3, #4
    5632:	4618      	mov	r0, r3
    5634:	4b04      	ldr	r3, [pc, #16]	; (5648 <spi_m_sync_enable+0x38>)
    5636:	4798      	blx	r3
}
    5638:	bf00      	nop
    563a:	3708      	adds	r7, #8
    563c:	46bd      	mov	sp, r7
    563e:	bd80      	pop	{r7, pc}
    5640:	00018464 	.word	0x00018464
    5644:	000065d9 	.word	0x000065d9
    5648:	0000a8a9 	.word	0x0000a8a9

0000564c <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    564c:	b580      	push	{r7, lr}
    564e:	b082      	sub	sp, #8
    5650:	af00      	add	r7, sp, #0
    5652:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	2b00      	cmp	r3, #0
    5658:	bf14      	ite	ne
    565a:	2301      	movne	r3, #1
    565c:	2300      	moveq	r3, #0
    565e:	b2db      	uxtb	r3, r3
    5660:	225d      	movs	r2, #93	; 0x5d
    5662:	4906      	ldr	r1, [pc, #24]	; (567c <spi_m_sync_disable+0x30>)
    5664:	4618      	mov	r0, r3
    5666:	4b06      	ldr	r3, [pc, #24]	; (5680 <spi_m_sync_disable+0x34>)
    5668:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    566a:	687b      	ldr	r3, [r7, #4]
    566c:	3304      	adds	r3, #4
    566e:	4618      	mov	r0, r3
    5670:	4b04      	ldr	r3, [pc, #16]	; (5684 <spi_m_sync_disable+0x38>)
    5672:	4798      	blx	r3
}
    5674:	bf00      	nop
    5676:	3708      	adds	r7, #8
    5678:	46bd      	mov	sp, r7
    567a:	bd80      	pop	{r7, pc}
    567c:	00018464 	.word	0x00018464
    5680:	000065d9 	.word	0x000065d9
    5684:	0000a8f9 	.word	0x0000a8f9

00005688 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    5688:	b580      	push	{r7, lr}
    568a:	b088      	sub	sp, #32
    568c:	af00      	add	r7, sp, #0
    568e:	60f8      	str	r0, [r7, #12]
    5690:	60b9      	str	r1, [r7, #8]
    5692:	4613      	mov	r3, r2
    5694:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    5696:	68fb      	ldr	r3, [r7, #12]
    5698:	2b00      	cmp	r3, #0
    569a:	bf14      	ite	ne
    569c:	2301      	movne	r3, #1
    569e:	2300      	moveq	r3, #0
    56a0:	b2db      	uxtb	r3, r3
    56a2:	2287      	movs	r2, #135	; 0x87
    56a4:	490b      	ldr	r1, [pc, #44]	; (56d4 <_spi_m_sync_io_read+0x4c>)
    56a6:	4618      	mov	r0, r3
    56a8:	4b0b      	ldr	r3, [pc, #44]	; (56d8 <_spi_m_sync_io_read+0x50>)
    56aa:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    56ac:	68fb      	ldr	r3, [r7, #12]
    56ae:	3b0c      	subs	r3, #12
    56b0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    56b2:	68bb      	ldr	r3, [r7, #8]
    56b4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    56b6:	2300      	movs	r3, #0
    56b8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    56ba:	88fb      	ldrh	r3, [r7, #6]
    56bc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    56be:	f107 0310 	add.w	r3, r7, #16
    56c2:	4619      	mov	r1, r3
    56c4:	69f8      	ldr	r0, [r7, #28]
    56c6:	4b05      	ldr	r3, [pc, #20]	; (56dc <_spi_m_sync_io_read+0x54>)
    56c8:	4798      	blx	r3
    56ca:	4603      	mov	r3, r0
}
    56cc:	4618      	mov	r0, r3
    56ce:	3720      	adds	r7, #32
    56d0:	46bd      	mov	sp, r7
    56d2:	bd80      	pop	{r7, pc}
    56d4:	00018464 	.word	0x00018464
    56d8:	000065d9 	.word	0x000065d9
    56dc:	00005739 	.word	0x00005739

000056e0 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    56e0:	b580      	push	{r7, lr}
    56e2:	b088      	sub	sp, #32
    56e4:	af00      	add	r7, sp, #0
    56e6:	60f8      	str	r0, [r7, #12]
    56e8:	60b9      	str	r1, [r7, #8]
    56ea:	4613      	mov	r3, r2
    56ec:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    56ee:	68fb      	ldr	r3, [r7, #12]
    56f0:	2b00      	cmp	r3, #0
    56f2:	bf14      	ite	ne
    56f4:	2301      	movne	r3, #1
    56f6:	2300      	moveq	r3, #0
    56f8:	b2db      	uxtb	r3, r3
    56fa:	22a3      	movs	r2, #163	; 0xa3
    56fc:	490b      	ldr	r1, [pc, #44]	; (572c <_spi_m_sync_io_write+0x4c>)
    56fe:	4618      	mov	r0, r3
    5700:	4b0b      	ldr	r3, [pc, #44]	; (5730 <_spi_m_sync_io_write+0x50>)
    5702:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    5704:	68fb      	ldr	r3, [r7, #12]
    5706:	3b0c      	subs	r3, #12
    5708:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    570a:	2300      	movs	r3, #0
    570c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    570e:	68bb      	ldr	r3, [r7, #8]
    5710:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    5712:	88fb      	ldrh	r3, [r7, #6]
    5714:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    5716:	f107 0310 	add.w	r3, r7, #16
    571a:	4619      	mov	r1, r3
    571c:	69f8      	ldr	r0, [r7, #28]
    571e:	4b05      	ldr	r3, [pc, #20]	; (5734 <_spi_m_sync_io_write+0x54>)
    5720:	4798      	blx	r3
    5722:	4603      	mov	r3, r0
}
    5724:	4618      	mov	r0, r3
    5726:	3720      	adds	r7, #32
    5728:	46bd      	mov	sp, r7
    572a:	bd80      	pop	{r7, pc}
    572c:	00018464 	.word	0x00018464
    5730:	000065d9 	.word	0x000065d9
    5734:	00005739 	.word	0x00005739

00005738 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    5738:	b580      	push	{r7, lr}
    573a:	b086      	sub	sp, #24
    573c:	af00      	add	r7, sp, #0
    573e:	6078      	str	r0, [r7, #4]
    5740:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    5742:	687b      	ldr	r3, [r7, #4]
    5744:	2b00      	cmp	r3, #0
    5746:	d004      	beq.n	5752 <spi_m_sync_transfer+0x1a>
    5748:	683b      	ldr	r3, [r7, #0]
    574a:	2b00      	cmp	r3, #0
    574c:	d001      	beq.n	5752 <spi_m_sync_transfer+0x1a>
    574e:	2301      	movs	r3, #1
    5750:	e000      	b.n	5754 <spi_m_sync_transfer+0x1c>
    5752:	2300      	movs	r3, #0
    5754:	f003 0301 	and.w	r3, r3, #1
    5758:	b2db      	uxtb	r3, r3
    575a:	22b3      	movs	r2, #179	; 0xb3
    575c:	490c      	ldr	r1, [pc, #48]	; (5790 <spi_m_sync_transfer+0x58>)
    575e:	4618      	mov	r0, r3
    5760:	4b0c      	ldr	r3, [pc, #48]	; (5794 <spi_m_sync_transfer+0x5c>)
    5762:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    5764:	683b      	ldr	r3, [r7, #0]
    5766:	681b      	ldr	r3, [r3, #0]
    5768:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    576a:	683b      	ldr	r3, [r7, #0]
    576c:	685b      	ldr	r3, [r3, #4]
    576e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    5770:	683b      	ldr	r3, [r7, #0]
    5772:	689b      	ldr	r3, [r3, #8]
    5774:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    5776:	687b      	ldr	r3, [r7, #4]
    5778:	3304      	adds	r3, #4
    577a:	f107 020c 	add.w	r2, r7, #12
    577e:	4611      	mov	r1, r2
    5780:	4618      	mov	r0, r3
    5782:	4b05      	ldr	r3, [pc, #20]	; (5798 <spi_m_sync_transfer+0x60>)
    5784:	4798      	blx	r3
    5786:	4603      	mov	r3, r0
}
    5788:	4618      	mov	r0, r3
    578a:	3718      	adds	r7, #24
    578c:	46bd      	mov	sp, r7
    578e:	bd80      	pop	{r7, pc}
    5790:	00018464 	.word	0x00018464
    5794:	000065d9 	.word	0x000065d9
    5798:	0000aa9d 	.word	0x0000aa9d

0000579c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    579c:	b580      	push	{r7, lr}
    579e:	b082      	sub	sp, #8
    57a0:	af00      	add	r7, sp, #0
    57a2:	6078      	str	r0, [r7, #4]
    57a4:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    57a6:	687b      	ldr	r3, [r7, #4]
    57a8:	2b00      	cmp	r3, #0
    57aa:	d004      	beq.n	57b6 <spi_m_sync_get_io_descriptor+0x1a>
    57ac:	683b      	ldr	r3, [r7, #0]
    57ae:	2b00      	cmp	r3, #0
    57b0:	d001      	beq.n	57b6 <spi_m_sync_get_io_descriptor+0x1a>
    57b2:	2301      	movs	r3, #1
    57b4:	e000      	b.n	57b8 <spi_m_sync_get_io_descriptor+0x1c>
    57b6:	2300      	movs	r3, #0
    57b8:	f003 0301 	and.w	r3, r3, #1
    57bc:	b2db      	uxtb	r3, r3
    57be:	22bd      	movs	r2, #189	; 0xbd
    57c0:	4906      	ldr	r1, [pc, #24]	; (57dc <spi_m_sync_get_io_descriptor+0x40>)
    57c2:	4618      	mov	r0, r3
    57c4:	4b06      	ldr	r3, [pc, #24]	; (57e0 <spi_m_sync_get_io_descriptor+0x44>)
    57c6:	4798      	blx	r3
	*io = &spi->io;
    57c8:	687b      	ldr	r3, [r7, #4]
    57ca:	f103 020c 	add.w	r2, r3, #12
    57ce:	683b      	ldr	r3, [r7, #0]
    57d0:	601a      	str	r2, [r3, #0]
	return 0;
    57d2:	2300      	movs	r3, #0
}
    57d4:	4618      	mov	r0, r3
    57d6:	3708      	adds	r7, #8
    57d8:	46bd      	mov	sp, r7
    57da:	bd80      	pop	{r7, pc}
    57dc:	00018464 	.word	0x00018464
    57e0:	000065d9 	.word	0x000065d9

000057e4 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    57e4:	b480      	push	{r7}
    57e6:	b083      	sub	sp, #12
    57e8:	af00      	add	r7, sp, #0
    57ea:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    57ec:	687b      	ldr	r3, [r7, #4]
    57ee:	681b      	ldr	r3, [r3, #0]
}
    57f0:	4618      	mov	r0, r3
    57f2:	370c      	adds	r7, #12
    57f4:	46bd      	mov	sp, r7
    57f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    57fa:	4770      	bx	lr

000057fc <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    57fc:	b480      	push	{r7}
    57fe:	b083      	sub	sp, #12
    5800:	af00      	add	r7, sp, #0
    5802:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    5804:	687b      	ldr	r3, [r7, #4]
    5806:	2b00      	cmp	r3, #0
    5808:	d002      	beq.n	5810 <list_get_next_element+0x14>
    580a:	687b      	ldr	r3, [r7, #4]
    580c:	681b      	ldr	r3, [r3, #0]
    580e:	e000      	b.n	5812 <list_get_next_element+0x16>
    5810:	2300      	movs	r3, #0
}
    5812:	4618      	mov	r0, r3
    5814:	370c      	adds	r7, #12
    5816:	46bd      	mov	sp, r7
    5818:	f85d 7b04 	ldr.w	r7, [sp], #4
    581c:	4770      	bx	lr
	...

00005820 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    5820:	b580      	push	{r7, lr}
    5822:	b084      	sub	sp, #16
    5824:	af00      	add	r7, sp, #0
    5826:	60f8      	str	r0, [r7, #12]
    5828:	60b9      	str	r1, [r7, #8]
    582a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    582c:	68fb      	ldr	r3, [r7, #12]
    582e:	2b00      	cmp	r3, #0
    5830:	d004      	beq.n	583c <timer_init+0x1c>
    5832:	68bb      	ldr	r3, [r7, #8]
    5834:	2b00      	cmp	r3, #0
    5836:	d001      	beq.n	583c <timer_init+0x1c>
    5838:	2301      	movs	r3, #1
    583a:	e000      	b.n	583e <timer_init+0x1e>
    583c:	2300      	movs	r3, #0
    583e:	f003 0301 	and.w	r3, r3, #1
    5842:	b2db      	uxtb	r3, r3
    5844:	223b      	movs	r2, #59	; 0x3b
    5846:	490a      	ldr	r1, [pc, #40]	; (5870 <timer_init+0x50>)
    5848:	4618      	mov	r0, r3
    584a:	4b0a      	ldr	r3, [pc, #40]	; (5874 <timer_init+0x54>)
    584c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    584e:	68fb      	ldr	r3, [r7, #12]
    5850:	68b9      	ldr	r1, [r7, #8]
    5852:	4618      	mov	r0, r3
    5854:	4b08      	ldr	r3, [pc, #32]	; (5878 <timer_init+0x58>)
    5856:	4798      	blx	r3
	descr->time                           = 0;
    5858:	68fb      	ldr	r3, [r7, #12]
    585a:	2200      	movs	r2, #0
    585c:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    585e:	68fb      	ldr	r3, [r7, #12]
    5860:	4a06      	ldr	r2, [pc, #24]	; (587c <timer_init+0x5c>)
    5862:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    5864:	2300      	movs	r3, #0
}
    5866:	4618      	mov	r0, r3
    5868:	3710      	adds	r7, #16
    586a:	46bd      	mov	sp, r7
    586c:	bd80      	pop	{r7, pc}
    586e:	bf00      	nop
    5870:	00018480 	.word	0x00018480
    5874:	000065d9 	.word	0x000065d9
    5878:	0000b195 	.word	0x0000b195
    587c:	00005bc9 	.word	0x00005bc9

00005880 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    5880:	b580      	push	{r7, lr}
    5882:	b082      	sub	sp, #8
    5884:	af00      	add	r7, sp, #0
    5886:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5888:	687b      	ldr	r3, [r7, #4]
    588a:	2b00      	cmp	r3, #0
    588c:	bf14      	ite	ne
    588e:	2301      	movne	r3, #1
    5890:	2300      	moveq	r3, #0
    5892:	b2db      	uxtb	r3, r3
    5894:	2253      	movs	r2, #83	; 0x53
    5896:	490b      	ldr	r1, [pc, #44]	; (58c4 <timer_start+0x44>)
    5898:	4618      	mov	r0, r3
    589a:	4b0b      	ldr	r3, [pc, #44]	; (58c8 <timer_start+0x48>)
    589c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    589e:	687b      	ldr	r3, [r7, #4]
    58a0:	4618      	mov	r0, r3
    58a2:	4b0a      	ldr	r3, [pc, #40]	; (58cc <timer_start+0x4c>)
    58a4:	4798      	blx	r3
    58a6:	4603      	mov	r3, r0
    58a8:	2b00      	cmp	r3, #0
    58aa:	d002      	beq.n	58b2 <timer_start+0x32>
		return ERR_DENIED;
    58ac:	f06f 0310 	mvn.w	r3, #16
    58b0:	e004      	b.n	58bc <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    58b2:	687b      	ldr	r3, [r7, #4]
    58b4:	4618      	mov	r0, r3
    58b6:	4b06      	ldr	r3, [pc, #24]	; (58d0 <timer_start+0x50>)
    58b8:	4798      	blx	r3

	return ERR_NONE;
    58ba:	2300      	movs	r3, #0
}
    58bc:	4618      	mov	r0, r3
    58be:	3708      	adds	r7, #8
    58c0:	46bd      	mov	sp, r7
    58c2:	bd80      	pop	{r7, pc}
    58c4:	00018480 	.word	0x00018480
    58c8:	000065d9 	.word	0x000065d9
    58cc:	0000b6c1 	.word	0x0000b6c1
    58d0:	0000b661 	.word	0x0000b661

000058d4 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    58d4:	b580      	push	{r7, lr}
    58d6:	b082      	sub	sp, #8
    58d8:	af00      	add	r7, sp, #0
    58da:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    58dc:	687b      	ldr	r3, [r7, #4]
    58de:	2b00      	cmp	r3, #0
    58e0:	bf14      	ite	ne
    58e2:	2301      	movne	r3, #1
    58e4:	2300      	moveq	r3, #0
    58e6:	b2db      	uxtb	r3, r3
    58e8:	2261      	movs	r2, #97	; 0x61
    58ea:	490d      	ldr	r1, [pc, #52]	; (5920 <timer_stop+0x4c>)
    58ec:	4618      	mov	r0, r3
    58ee:	4b0d      	ldr	r3, [pc, #52]	; (5924 <timer_stop+0x50>)
    58f0:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    58f2:	687b      	ldr	r3, [r7, #4]
    58f4:	4618      	mov	r0, r3
    58f6:	4b0c      	ldr	r3, [pc, #48]	; (5928 <timer_stop+0x54>)
    58f8:	4798      	blx	r3
    58fa:	4603      	mov	r3, r0
    58fc:	f083 0301 	eor.w	r3, r3, #1
    5900:	b2db      	uxtb	r3, r3
    5902:	2b00      	cmp	r3, #0
    5904:	d002      	beq.n	590c <timer_stop+0x38>
		return ERR_DENIED;
    5906:	f06f 0310 	mvn.w	r3, #16
    590a:	e004      	b.n	5916 <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    590c:	687b      	ldr	r3, [r7, #4]
    590e:	4618      	mov	r0, r3
    5910:	4b06      	ldr	r3, [pc, #24]	; (592c <timer_stop+0x58>)
    5912:	4798      	blx	r3

	return ERR_NONE;
    5914:	2300      	movs	r3, #0
}
    5916:	4618      	mov	r0, r3
    5918:	3708      	adds	r7, #8
    591a:	46bd      	mov	sp, r7
    591c:	bd80      	pop	{r7, pc}
    591e:	bf00      	nop
    5920:	00018480 	.word	0x00018480
    5924:	000065d9 	.word	0x000065d9
    5928:	0000b6c1 	.word	0x0000b6c1
    592c:	0000b6a1 	.word	0x0000b6a1

00005930 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    5930:	b580      	push	{r7, lr}
    5932:	b084      	sub	sp, #16
    5934:	af00      	add	r7, sp, #0
    5936:	6078      	str	r0, [r7, #4]
    5938:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    593a:	687b      	ldr	r3, [r7, #4]
    593c:	2b00      	cmp	r3, #0
    593e:	d004      	beq.n	594a <timer_add_task+0x1a>
    5940:	683b      	ldr	r3, [r7, #0]
    5942:	2b00      	cmp	r3, #0
    5944:	d001      	beq.n	594a <timer_add_task+0x1a>
    5946:	2301      	movs	r3, #1
    5948:	e000      	b.n	594c <timer_add_task+0x1c>
    594a:	2300      	movs	r3, #0
    594c:	f003 0301 	and.w	r3, r3, #1
    5950:	b2db      	uxtb	r3, r3
    5952:	227a      	movs	r2, #122	; 0x7a
    5954:	492d      	ldr	r1, [pc, #180]	; (5a0c <timer_add_task+0xdc>)
    5956:	4618      	mov	r0, r3
    5958:	4b2d      	ldr	r3, [pc, #180]	; (5a10 <timer_add_task+0xe0>)
    595a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    595c:	687b      	ldr	r3, [r7, #4]
    595e:	7e1b      	ldrb	r3, [r3, #24]
    5960:	b2db      	uxtb	r3, r3
    5962:	f043 0301 	orr.w	r3, r3, #1
    5966:	b2da      	uxtb	r2, r3
    5968:	687b      	ldr	r3, [r7, #4]
    596a:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    596c:	687b      	ldr	r3, [r7, #4]
    596e:	3314      	adds	r3, #20
    5970:	6839      	ldr	r1, [r7, #0]
    5972:	4618      	mov	r0, r3
    5974:	4b27      	ldr	r3, [pc, #156]	; (5a14 <timer_add_task+0xe4>)
    5976:	4798      	blx	r3
    5978:	4603      	mov	r3, r0
    597a:	2b00      	cmp	r3, #0
    597c:	d00f      	beq.n	599e <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    597e:	687b      	ldr	r3, [r7, #4]
    5980:	7e1b      	ldrb	r3, [r3, #24]
    5982:	b2db      	uxtb	r3, r3
    5984:	f023 0301 	bic.w	r3, r3, #1
    5988:	b2da      	uxtb	r2, r3
    598a:	687b      	ldr	r3, [r7, #4]
    598c:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    598e:	227f      	movs	r2, #127	; 0x7f
    5990:	491e      	ldr	r1, [pc, #120]	; (5a0c <timer_add_task+0xdc>)
    5992:	2000      	movs	r0, #0
    5994:	4b1e      	ldr	r3, [pc, #120]	; (5a10 <timer_add_task+0xe0>)
    5996:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    5998:	f06f 0311 	mvn.w	r3, #17
    599c:	e032      	b.n	5a04 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    599e:	687b      	ldr	r3, [r7, #4]
    59a0:	691a      	ldr	r2, [r3, #16]
    59a2:	683b      	ldr	r3, [r7, #0]
    59a4:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    59a6:	687b      	ldr	r3, [r7, #4]
    59a8:	f103 0014 	add.w	r0, r3, #20
    59ac:	687b      	ldr	r3, [r7, #4]
    59ae:	691b      	ldr	r3, [r3, #16]
    59b0:	461a      	mov	r2, r3
    59b2:	6839      	ldr	r1, [r7, #0]
    59b4:	4b18      	ldr	r3, [pc, #96]	; (5a18 <timer_add_task+0xe8>)
    59b6:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    59b8:	687b      	ldr	r3, [r7, #4]
    59ba:	7e1b      	ldrb	r3, [r3, #24]
    59bc:	b2db      	uxtb	r3, r3
    59be:	f023 0301 	bic.w	r3, r3, #1
    59c2:	b2da      	uxtb	r2, r3
    59c4:	687b      	ldr	r3, [r7, #4]
    59c6:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    59c8:	687b      	ldr	r3, [r7, #4]
    59ca:	7e1b      	ldrb	r3, [r3, #24]
    59cc:	b2db      	uxtb	r3, r3
    59ce:	f003 0302 	and.w	r3, r3, #2
    59d2:	2b00      	cmp	r3, #0
    59d4:	d015      	beq.n	5a02 <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    59d6:	f107 030c 	add.w	r3, r7, #12
    59da:	4618      	mov	r0, r3
    59dc:	4b0f      	ldr	r3, [pc, #60]	; (5a1c <timer_add_task+0xec>)
    59de:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    59e0:	687b      	ldr	r3, [r7, #4]
    59e2:	7e1b      	ldrb	r3, [r3, #24]
    59e4:	b2db      	uxtb	r3, r3
    59e6:	f023 0302 	bic.w	r3, r3, #2
    59ea:	b2da      	uxtb	r2, r3
    59ec:	687b      	ldr	r3, [r7, #4]
    59ee:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	4618      	mov	r0, r3
    59f4:	4b0a      	ldr	r3, [pc, #40]	; (5a20 <timer_add_task+0xf0>)
    59f6:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    59f8:	f107 030c 	add.w	r3, r7, #12
    59fc:	4618      	mov	r0, r3
    59fe:	4b09      	ldr	r3, [pc, #36]	; (5a24 <timer_add_task+0xf4>)
    5a00:	4798      	blx	r3
	}

	return ERR_NONE;
    5a02:	2300      	movs	r3, #0
}
    5a04:	4618      	mov	r0, r3
    5a06:	3710      	adds	r7, #16
    5a08:	46bd      	mov	sp, r7
    5a0a:	bd80      	pop	{r7, pc}
    5a0c:	00018480 	.word	0x00018480
    5a10:	000065d9 	.word	0x000065d9
    5a14:	00006601 	.word	0x00006601
    5a18:	00005b19 	.word	0x00005b19
    5a1c:	0000e86d 	.word	0x0000e86d
    5a20:	0000b721 	.word	0x0000b721
    5a24:	0000e893 	.word	0x0000e893

00005a28 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    5a28:	b580      	push	{r7, lr}
    5a2a:	b084      	sub	sp, #16
    5a2c:	af00      	add	r7, sp, #0
    5a2e:	6078      	str	r0, [r7, #4]
    5a30:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    5a32:	687b      	ldr	r3, [r7, #4]
    5a34:	2b00      	cmp	r3, #0
    5a36:	d004      	beq.n	5a42 <timer_remove_task+0x1a>
    5a38:	683b      	ldr	r3, [r7, #0]
    5a3a:	2b00      	cmp	r3, #0
    5a3c:	d001      	beq.n	5a42 <timer_remove_task+0x1a>
    5a3e:	2301      	movs	r3, #1
    5a40:	e000      	b.n	5a44 <timer_remove_task+0x1c>
    5a42:	2300      	movs	r3, #0
    5a44:	f003 0301 	and.w	r3, r3, #1
    5a48:	b2db      	uxtb	r3, r3
    5a4a:	2295      	movs	r2, #149	; 0x95
    5a4c:	492b      	ldr	r1, [pc, #172]	; (5afc <timer_remove_task+0xd4>)
    5a4e:	4618      	mov	r0, r3
    5a50:	4b2b      	ldr	r3, [pc, #172]	; (5b00 <timer_remove_task+0xd8>)
    5a52:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    5a54:	687b      	ldr	r3, [r7, #4]
    5a56:	7e1b      	ldrb	r3, [r3, #24]
    5a58:	b2db      	uxtb	r3, r3
    5a5a:	f043 0301 	orr.w	r3, r3, #1
    5a5e:	b2da      	uxtb	r2, r3
    5a60:	687b      	ldr	r3, [r7, #4]
    5a62:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	3314      	adds	r3, #20
    5a68:	6839      	ldr	r1, [r7, #0]
    5a6a:	4618      	mov	r0, r3
    5a6c:	4b25      	ldr	r3, [pc, #148]	; (5b04 <timer_remove_task+0xdc>)
    5a6e:	4798      	blx	r3
    5a70:	4603      	mov	r3, r0
    5a72:	f083 0301 	eor.w	r3, r3, #1
    5a76:	b2db      	uxtb	r3, r3
    5a78:	2b00      	cmp	r3, #0
    5a7a:	d00f      	beq.n	5a9c <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5a7c:	687b      	ldr	r3, [r7, #4]
    5a7e:	7e1b      	ldrb	r3, [r3, #24]
    5a80:	b2db      	uxtb	r3, r3
    5a82:	f023 0301 	bic.w	r3, r3, #1
    5a86:	b2da      	uxtb	r2, r3
    5a88:	687b      	ldr	r3, [r7, #4]
    5a8a:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    5a8c:	229a      	movs	r2, #154	; 0x9a
    5a8e:	491b      	ldr	r1, [pc, #108]	; (5afc <timer_remove_task+0xd4>)
    5a90:	2000      	movs	r0, #0
    5a92:	4b1b      	ldr	r3, [pc, #108]	; (5b00 <timer_remove_task+0xd8>)
    5a94:	4798      	blx	r3
		return ERR_NOT_FOUND;
    5a96:	f06f 0309 	mvn.w	r3, #9
    5a9a:	e02b      	b.n	5af4 <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    5a9c:	687b      	ldr	r3, [r7, #4]
    5a9e:	3314      	adds	r3, #20
    5aa0:	6839      	ldr	r1, [r7, #0]
    5aa2:	4618      	mov	r0, r3
    5aa4:	4b18      	ldr	r3, [pc, #96]	; (5b08 <timer_remove_task+0xe0>)
    5aa6:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5aa8:	687b      	ldr	r3, [r7, #4]
    5aaa:	7e1b      	ldrb	r3, [r3, #24]
    5aac:	b2db      	uxtb	r3, r3
    5aae:	f023 0301 	bic.w	r3, r3, #1
    5ab2:	b2da      	uxtb	r2, r3
    5ab4:	687b      	ldr	r3, [r7, #4]
    5ab6:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	7e1b      	ldrb	r3, [r3, #24]
    5abc:	b2db      	uxtb	r3, r3
    5abe:	f003 0302 	and.w	r3, r3, #2
    5ac2:	2b00      	cmp	r3, #0
    5ac4:	d015      	beq.n	5af2 <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    5ac6:	f107 030c 	add.w	r3, r7, #12
    5aca:	4618      	mov	r0, r3
    5acc:	4b0f      	ldr	r3, [pc, #60]	; (5b0c <timer_remove_task+0xe4>)
    5ace:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	7e1b      	ldrb	r3, [r3, #24]
    5ad4:	b2db      	uxtb	r3, r3
    5ad6:	f023 0302 	bic.w	r3, r3, #2
    5ada:	b2da      	uxtb	r2, r3
    5adc:	687b      	ldr	r3, [r7, #4]
    5ade:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    5ae0:	687b      	ldr	r3, [r7, #4]
    5ae2:	4618      	mov	r0, r3
    5ae4:	4b0a      	ldr	r3, [pc, #40]	; (5b10 <timer_remove_task+0xe8>)
    5ae6:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5ae8:	f107 030c 	add.w	r3, r7, #12
    5aec:	4618      	mov	r0, r3
    5aee:	4b09      	ldr	r3, [pc, #36]	; (5b14 <timer_remove_task+0xec>)
    5af0:	4798      	blx	r3
	}

	return ERR_NONE;
    5af2:	2300      	movs	r3, #0
}
    5af4:	4618      	mov	r0, r3
    5af6:	3710      	adds	r7, #16
    5af8:	46bd      	mov	sp, r7
    5afa:	bd80      	pop	{r7, pc}
    5afc:	00018480 	.word	0x00018480
    5b00:	000065d9 	.word	0x000065d9
    5b04:	00006601 	.word	0x00006601
    5b08:	00006763 	.word	0x00006763
    5b0c:	0000e86d 	.word	0x0000e86d
    5b10:	0000b721 	.word	0x0000b721
    5b14:	0000e893 	.word	0x0000e893

00005b18 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    5b18:	b580      	push	{r7, lr}
    5b1a:	b088      	sub	sp, #32
    5b1c:	af00      	add	r7, sp, #0
    5b1e:	60f8      	str	r0, [r7, #12]
    5b20:	60b9      	str	r1, [r7, #8]
    5b22:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    5b24:	2300      	movs	r3, #0
    5b26:	61bb      	str	r3, [r7, #24]
    5b28:	68f8      	ldr	r0, [r7, #12]
    5b2a:	4b23      	ldr	r3, [pc, #140]	; (5bb8 <timer_add_timer_task+0xa0>)
    5b2c:	4798      	blx	r3
    5b2e:	6138      	str	r0, [r7, #16]

	if (!head) {
    5b30:	693b      	ldr	r3, [r7, #16]
    5b32:	2b00      	cmp	r3, #0
    5b34:	d104      	bne.n	5b40 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    5b36:	68b9      	ldr	r1, [r7, #8]
    5b38:	68f8      	ldr	r0, [r7, #12]
    5b3a:	4b20      	ldr	r3, [pc, #128]	; (5bbc <timer_add_timer_task+0xa4>)
    5b3c:	4798      	blx	r3
		return;
    5b3e:	e037      	b.n	5bb0 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5b40:	693b      	ldr	r3, [r7, #16]
    5b42:	61fb      	str	r3, [r7, #28]
    5b44:	e022      	b.n	5b8c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    5b46:	69fb      	ldr	r3, [r7, #28]
    5b48:	685a      	ldr	r2, [r3, #4]
    5b4a:	687b      	ldr	r3, [r7, #4]
    5b4c:	429a      	cmp	r2, r3
    5b4e:	d808      	bhi.n	5b62 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    5b50:	69fb      	ldr	r3, [r7, #28]
    5b52:	689a      	ldr	r2, [r3, #8]
    5b54:	69fb      	ldr	r3, [r7, #28]
    5b56:	6859      	ldr	r1, [r3, #4]
    5b58:	687b      	ldr	r3, [r7, #4]
    5b5a:	1acb      	subs	r3, r1, r3
    5b5c:	4413      	add	r3, r2
    5b5e:	617b      	str	r3, [r7, #20]
    5b60:	e009      	b.n	5b76 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    5b62:	69fb      	ldr	r3, [r7, #28]
    5b64:	689a      	ldr	r2, [r3, #8]
    5b66:	69fb      	ldr	r3, [r7, #28]
    5b68:	685b      	ldr	r3, [r3, #4]
    5b6a:	441a      	add	r2, r3
    5b6c:	687b      	ldr	r3, [r7, #4]
    5b6e:	425b      	negs	r3, r3
    5b70:	4413      	add	r3, r2
    5b72:	3301      	adds	r3, #1
    5b74:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    5b76:	68bb      	ldr	r3, [r7, #8]
    5b78:	689a      	ldr	r2, [r3, #8]
    5b7a:	697b      	ldr	r3, [r7, #20]
    5b7c:	429a      	cmp	r2, r3
    5b7e:	d909      	bls.n	5b94 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    5b80:	69fb      	ldr	r3, [r7, #28]
    5b82:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5b84:	69f8      	ldr	r0, [r7, #28]
    5b86:	4b0e      	ldr	r3, [pc, #56]	; (5bc0 <timer_add_timer_task+0xa8>)
    5b88:	4798      	blx	r3
    5b8a:	61f8      	str	r0, [r7, #28]
    5b8c:	69fb      	ldr	r3, [r7, #28]
    5b8e:	2b00      	cmp	r3, #0
    5b90:	d1d9      	bne.n	5b46 <timer_add_timer_task+0x2e>
    5b92:	e000      	b.n	5b96 <timer_add_timer_task+0x7e>
			break;
    5b94:	bf00      	nop
	}

	if (it == head) {
    5b96:	69fa      	ldr	r2, [r7, #28]
    5b98:	693b      	ldr	r3, [r7, #16]
    5b9a:	429a      	cmp	r2, r3
    5b9c:	d104      	bne.n	5ba8 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    5b9e:	68b9      	ldr	r1, [r7, #8]
    5ba0:	68f8      	ldr	r0, [r7, #12]
    5ba2:	4b06      	ldr	r3, [pc, #24]	; (5bbc <timer_add_timer_task+0xa4>)
    5ba4:	4798      	blx	r3
    5ba6:	e003      	b.n	5bb0 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    5ba8:	68b9      	ldr	r1, [r7, #8]
    5baa:	69b8      	ldr	r0, [r7, #24]
    5bac:	4b05      	ldr	r3, [pc, #20]	; (5bc4 <timer_add_timer_task+0xac>)
    5bae:	4798      	blx	r3
	}
}
    5bb0:	3720      	adds	r7, #32
    5bb2:	46bd      	mov	sp, r7
    5bb4:	bd80      	pop	{r7, pc}
    5bb6:	bf00      	nop
    5bb8:	000057e5 	.word	0x000057e5
    5bbc:	00006639 	.word	0x00006639
    5bc0:	000057fd 	.word	0x000057fd
    5bc4:	00006691 	.word	0x00006691

00005bc8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    5bc8:	b580      	push	{r7, lr}
    5bca:	b086      	sub	sp, #24
    5bcc:	af00      	add	r7, sp, #0
    5bce:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    5bd0:	687b      	ldr	r3, [r7, #4]
    5bd2:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    5bd4:	693b      	ldr	r3, [r7, #16]
    5bd6:	3314      	adds	r3, #20
    5bd8:	4618      	mov	r0, r3
    5bda:	4b27      	ldr	r3, [pc, #156]	; (5c78 <timer_process_counted+0xb0>)
    5bdc:	4798      	blx	r3
    5bde:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    5be0:	693b      	ldr	r3, [r7, #16]
    5be2:	691b      	ldr	r3, [r3, #16]
    5be4:	1c5a      	adds	r2, r3, #1
    5be6:	693b      	ldr	r3, [r7, #16]
    5be8:	611a      	str	r2, [r3, #16]
    5bea:	693b      	ldr	r3, [r7, #16]
    5bec:	691b      	ldr	r3, [r3, #16]
    5bee:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    5bf0:	693b      	ldr	r3, [r7, #16]
    5bf2:	7e1b      	ldrb	r3, [r3, #24]
    5bf4:	b2db      	uxtb	r3, r3
    5bf6:	f003 0301 	and.w	r3, r3, #1
    5bfa:	2b00      	cmp	r3, #0
    5bfc:	d106      	bne.n	5c0c <timer_process_counted+0x44>
    5bfe:	693b      	ldr	r3, [r7, #16]
    5c00:	7e1b      	ldrb	r3, [r3, #24]
    5c02:	b2db      	uxtb	r3, r3
    5c04:	f003 0302 	and.w	r3, r3, #2
    5c08:	2b00      	cmp	r3, #0
    5c0a:	d027      	beq.n	5c5c <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    5c0c:	693b      	ldr	r3, [r7, #16]
    5c0e:	7e1b      	ldrb	r3, [r3, #24]
    5c10:	b2db      	uxtb	r3, r3
    5c12:	f043 0302 	orr.w	r3, r3, #2
    5c16:	b2da      	uxtb	r2, r3
    5c18:	693b      	ldr	r3, [r7, #16]
    5c1a:	761a      	strb	r2, [r3, #24]
		return;
    5c1c:	e029      	b.n	5c72 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    5c1e:	697b      	ldr	r3, [r7, #20]
    5c20:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    5c22:	693b      	ldr	r3, [r7, #16]
    5c24:	3314      	adds	r3, #20
    5c26:	4618      	mov	r0, r3
    5c28:	4b14      	ldr	r3, [pc, #80]	; (5c7c <timer_process_counted+0xb4>)
    5c2a:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    5c2c:	68bb      	ldr	r3, [r7, #8]
    5c2e:	7c1b      	ldrb	r3, [r3, #16]
    5c30:	2b01      	cmp	r3, #1
    5c32:	d109      	bne.n	5c48 <timer_process_counted+0x80>
			tmp->time_label = time;
    5c34:	68bb      	ldr	r3, [r7, #8]
    5c36:	68fa      	ldr	r2, [r7, #12]
    5c38:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    5c3a:	693b      	ldr	r3, [r7, #16]
    5c3c:	3314      	adds	r3, #20
    5c3e:	68fa      	ldr	r2, [r7, #12]
    5c40:	68b9      	ldr	r1, [r7, #8]
    5c42:	4618      	mov	r0, r3
    5c44:	4b0e      	ldr	r3, [pc, #56]	; (5c80 <timer_process_counted+0xb8>)
    5c46:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    5c48:	693b      	ldr	r3, [r7, #16]
    5c4a:	3314      	adds	r3, #20
    5c4c:	4618      	mov	r0, r3
    5c4e:	4b0a      	ldr	r3, [pc, #40]	; (5c78 <timer_process_counted+0xb0>)
    5c50:	4798      	blx	r3
    5c52:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    5c54:	68bb      	ldr	r3, [r7, #8]
    5c56:	68db      	ldr	r3, [r3, #12]
    5c58:	68b8      	ldr	r0, [r7, #8]
    5c5a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    5c5c:	697b      	ldr	r3, [r7, #20]
    5c5e:	2b00      	cmp	r3, #0
    5c60:	d007      	beq.n	5c72 <timer_process_counted+0xaa>
    5c62:	697b      	ldr	r3, [r7, #20]
    5c64:	685b      	ldr	r3, [r3, #4]
    5c66:	68fa      	ldr	r2, [r7, #12]
    5c68:	1ad2      	subs	r2, r2, r3
    5c6a:	697b      	ldr	r3, [r7, #20]
    5c6c:	689b      	ldr	r3, [r3, #8]
    5c6e:	429a      	cmp	r2, r3
    5c70:	d2d5      	bcs.n	5c1e <timer_process_counted+0x56>
	}
}
    5c72:	3718      	adds	r7, #24
    5c74:	46bd      	mov	sp, r7
    5c76:	bd80      	pop	{r7, pc}
    5c78:	000057e5 	.word	0x000057e5
    5c7c:	00006731 	.word	0x00006731
    5c80:	00005b19 	.word	0x00005b19

00005c84 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    5c84:	b480      	push	{r7}
    5c86:	b085      	sub	sp, #20
    5c88:	af00      	add	r7, sp, #0
    5c8a:	4603      	mov	r3, r0
    5c8c:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5c8e:	2300      	movs	r3, #0
    5c90:	73fb      	strb	r3, [r7, #15]
    5c92:	e029      	b.n	5ce8 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    5c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5c98:	4a19      	ldr	r2, [pc, #100]	; (5d00 <_usb_d_find_ep+0x7c>)
    5c9a:	015b      	lsls	r3, r3, #5
    5c9c:	4413      	add	r3, r2
    5c9e:	3301      	adds	r3, #1
    5ca0:	781b      	ldrb	r3, [r3, #0]
    5ca2:	79fa      	ldrb	r2, [r7, #7]
    5ca4:	429a      	cmp	r2, r3
    5ca6:	d102      	bne.n	5cae <_usb_d_find_ep+0x2a>
			return i;
    5ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5cac:	e022      	b.n	5cf4 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    5cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5cb2:	4a13      	ldr	r2, [pc, #76]	; (5d00 <_usb_d_find_ep+0x7c>)
    5cb4:	015b      	lsls	r3, r3, #5
    5cb6:	4413      	add	r3, r2
    5cb8:	781b      	ldrb	r3, [r3, #0]
    5cba:	2b00      	cmp	r3, #0
    5cbc:	d10e      	bne.n	5cdc <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    5cbe:	79fb      	ldrb	r3, [r7, #7]
    5cc0:	f003 030f 	and.w	r3, r3, #15
    5cc4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    5cc8:	490d      	ldr	r1, [pc, #52]	; (5d00 <_usb_d_find_ep+0x7c>)
    5cca:	0152      	lsls	r2, r2, #5
    5ccc:	440a      	add	r2, r1
    5cce:	3201      	adds	r2, #1
    5cd0:	7812      	ldrb	r2, [r2, #0]
    5cd2:	4293      	cmp	r3, r2
    5cd4:	d102      	bne.n	5cdc <_usb_d_find_ep+0x58>
			return i;
    5cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5cda:	e00b      	b.n	5cf4 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5ce0:	b2db      	uxtb	r3, r3
    5ce2:	3301      	adds	r3, #1
    5ce4:	b2db      	uxtb	r3, r3
    5ce6:	73fb      	strb	r3, [r7, #15]
    5ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5cec:	2b03      	cmp	r3, #3
    5cee:	ddd1      	ble.n	5c94 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    5cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
    5cf4:	4618      	mov	r0, r3
    5cf6:	3714      	adds	r7, #20
    5cf8:	46bd      	mov	sp, r7
    5cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cfe:	4770      	bx	lr
    5d00:	20002e30 	.word	0x20002e30

00005d04 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    5d04:	b580      	push	{r7, lr}
    5d06:	b088      	sub	sp, #32
    5d08:	af00      	add	r7, sp, #0
    5d0a:	60ba      	str	r2, [r7, #8]
    5d0c:	607b      	str	r3, [r7, #4]
    5d0e:	4603      	mov	r3, r0
    5d10:	73fb      	strb	r3, [r7, #15]
    5d12:	460b      	mov	r3, r1
    5d14:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    5d16:	68bb      	ldr	r3, [r7, #8]
    5d18:	617b      	str	r3, [r7, #20]
    5d1a:	687b      	ldr	r3, [r7, #4]
    5d1c:	61bb      	str	r3, [r7, #24]
    5d1e:	7bbb      	ldrb	r3, [r7, #14]
    5d20:	2b00      	cmp	r3, #0
    5d22:	d004      	beq.n	5d2e <_usb_d_trans+0x2a>
    5d24:	7bfb      	ldrb	r3, [r7, #15]
    5d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5d2a:	b2db      	uxtb	r3, r3
    5d2c:	e003      	b.n	5d36 <_usb_d_trans+0x32>
    5d2e:	7bfb      	ldrb	r3, [r7, #15]
    5d30:	f003 030f 	and.w	r3, r3, #15
    5d34:	b2db      	uxtb	r3, r3
    5d36:	773b      	strb	r3, [r7, #28]
    5d38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    5d3c:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    5d3e:	f107 0314 	add.w	r3, r7, #20
    5d42:	4618      	mov	r0, r3
    5d44:	4b03      	ldr	r3, [pc, #12]	; (5d54 <_usb_d_trans+0x50>)
    5d46:	4798      	blx	r3
    5d48:	4603      	mov	r3, r0
}
    5d4a:	4618      	mov	r0, r3
    5d4c:	3720      	adds	r7, #32
    5d4e:	46bd      	mov	sp, r7
    5d50:	bd80      	pop	{r7, pc}
    5d52:	bf00      	nop
    5d54:	0000dea1 	.word	0x0000dea1

00005d58 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    5d58:	b480      	push	{r7}
    5d5a:	b085      	sub	sp, #20
    5d5c:	af00      	add	r7, sp, #0
    5d5e:	60f8      	str	r0, [r7, #12]
    5d60:	60b9      	str	r1, [r7, #8]
    5d62:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    5d64:	2300      	movs	r3, #0
}
    5d66:	4618      	mov	r0, r3
    5d68:	3714      	adds	r7, #20
    5d6a:	46bd      	mov	sp, r7
    5d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d70:	4770      	bx	lr
	...

00005d74 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    5d74:	b580      	push	{r7, lr}
    5d76:	b086      	sub	sp, #24
    5d78:	af00      	add	r7, sp, #0
    5d7a:	4603      	mov	r3, r0
    5d7c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5d7e:	79fb      	ldrb	r3, [r7, #7]
    5d80:	4618      	mov	r0, r3
    5d82:	4b2a      	ldr	r3, [pc, #168]	; (5e2c <usb_d_cb_trans_setup+0xb8>)
    5d84:	4798      	blx	r3
    5d86:	4603      	mov	r3, r0
    5d88:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5d8e:	015b      	lsls	r3, r3, #5
    5d90:	4a27      	ldr	r2, [pc, #156]	; (5e30 <usb_d_cb_trans_setup+0xbc>)
    5d92:	4413      	add	r3, r2
    5d94:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    5d96:	693b      	ldr	r3, [r7, #16]
    5d98:	330c      	adds	r3, #12
    5d9a:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    5d9c:	79fb      	ldrb	r3, [r7, #7]
    5d9e:	68f9      	ldr	r1, [r7, #12]
    5da0:	4618      	mov	r0, r3
    5da2:	4b24      	ldr	r3, [pc, #144]	; (5e34 <usb_d_cb_trans_setup+0xc0>)
    5da4:	4798      	blx	r3
    5da6:	4603      	mov	r3, r0
    5da8:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    5daa:	7afb      	ldrb	r3, [r7, #11]
    5dac:	2b08      	cmp	r3, #8
    5dae:	d00d      	beq.n	5dcc <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5db0:	79fb      	ldrb	r3, [r7, #7]
    5db2:	2101      	movs	r1, #1
    5db4:	4618      	mov	r0, r3
    5db6:	4b20      	ldr	r3, [pc, #128]	; (5e38 <usb_d_cb_trans_setup+0xc4>)
    5db8:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5dba:	79fb      	ldrb	r3, [r7, #7]
    5dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5dc0:	b2db      	uxtb	r3, r3
    5dc2:	2101      	movs	r1, #1
    5dc4:	4618      	mov	r0, r3
    5dc6:	4b1c      	ldr	r3, [pc, #112]	; (5e38 <usb_d_cb_trans_setup+0xc4>)
    5dc8:	4798      	blx	r3
		return;
    5dca:	e02b      	b.n	5e24 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5dcc:	79fb      	ldrb	r3, [r7, #7]
    5dce:	2100      	movs	r1, #0
    5dd0:	4618      	mov	r0, r3
    5dd2:	4b19      	ldr	r3, [pc, #100]	; (5e38 <usb_d_cb_trans_setup+0xc4>)
    5dd4:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    5dd6:	79fb      	ldrb	r3, [r7, #7]
    5dd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5ddc:	b2db      	uxtb	r3, r3
    5dde:	2100      	movs	r1, #0
    5de0:	4618      	mov	r0, r3
    5de2:	4b15      	ldr	r3, [pc, #84]	; (5e38 <usb_d_cb_trans_setup+0xc4>)
    5de4:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    5de6:	693b      	ldr	r3, [r7, #16]
    5de8:	2201      	movs	r2, #1
    5dea:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    5dec:	693b      	ldr	r3, [r7, #16]
    5dee:	695b      	ldr	r3, [r3, #20]
    5df0:	79fa      	ldrb	r2, [r7, #7]
    5df2:	68f9      	ldr	r1, [r7, #12]
    5df4:	4610      	mov	r0, r2
    5df6:	4798      	blx	r3
    5df8:	4603      	mov	r3, r0
    5dfa:	f083 0301 	eor.w	r3, r3, #1
    5dfe:	b2db      	uxtb	r3, r3
    5e00:	2b00      	cmp	r3, #0
    5e02:	d00f      	beq.n	5e24 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    5e04:	693b      	ldr	r3, [r7, #16]
    5e06:	2205      	movs	r2, #5
    5e08:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5e0a:	79fb      	ldrb	r3, [r7, #7]
    5e0c:	2101      	movs	r1, #1
    5e0e:	4618      	mov	r0, r3
    5e10:	4b09      	ldr	r3, [pc, #36]	; (5e38 <usb_d_cb_trans_setup+0xc4>)
    5e12:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5e14:	79fb      	ldrb	r3, [r7, #7]
    5e16:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5e1a:	b2db      	uxtb	r3, r3
    5e1c:	2101      	movs	r1, #1
    5e1e:	4618      	mov	r0, r3
    5e20:	4b05      	ldr	r3, [pc, #20]	; (5e38 <usb_d_cb_trans_setup+0xc4>)
    5e22:	4798      	blx	r3
	}
}
    5e24:	3718      	adds	r7, #24
    5e26:	46bd      	mov	sp, r7
    5e28:	bd80      	pop	{r7, pc}
    5e2a:	bf00      	nop
    5e2c:	00005c85 	.word	0x00005c85
    5e30:	20002e30 	.word	0x20002e30
    5e34:	0000ddf9 	.word	0x0000ddf9
    5e38:	0000dc71 	.word	0x0000dc71

00005e3c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    5e3c:	b580      	push	{r7, lr}
    5e3e:	b084      	sub	sp, #16
    5e40:	af00      	add	r7, sp, #0
    5e42:	4603      	mov	r3, r0
    5e44:	6039      	str	r1, [r7, #0]
    5e46:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5e48:	79fb      	ldrb	r3, [r7, #7]
    5e4a:	4618      	mov	r0, r3
    5e4c:	4b0d      	ldr	r3, [pc, #52]	; (5e84 <usb_d_cb_trans_more+0x48>)
    5e4e:	4798      	blx	r3
    5e50:	4603      	mov	r3, r0
    5e52:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5e58:	015b      	lsls	r3, r3, #5
    5e5a:	4a0b      	ldr	r2, [pc, #44]	; (5e88 <usb_d_cb_trans_more+0x4c>)
    5e5c:	4413      	add	r3, r2
    5e5e:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    5e60:	68bb      	ldr	r3, [r7, #8]
    5e62:	789b      	ldrb	r3, [r3, #2]
    5e64:	2b03      	cmp	r3, #3
    5e66:	d107      	bne.n	5e78 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    5e68:	68bb      	ldr	r3, [r7, #8]
    5e6a:	699b      	ldr	r3, [r3, #24]
    5e6c:	79fa      	ldrb	r2, [r7, #7]
    5e6e:	6839      	ldr	r1, [r7, #0]
    5e70:	4610      	mov	r0, r2
    5e72:	4798      	blx	r3
    5e74:	4603      	mov	r3, r0
    5e76:	e000      	b.n	5e7a <usb_d_cb_trans_more+0x3e>
	}
	return false;
    5e78:	2300      	movs	r3, #0
}
    5e7a:	4618      	mov	r0, r3
    5e7c:	3710      	adds	r7, #16
    5e7e:	46bd      	mov	sp, r7
    5e80:	bd80      	pop	{r7, pc}
    5e82:	bf00      	nop
    5e84:	00005c85 	.word	0x00005c85
    5e88:	20002e30 	.word	0x20002e30

00005e8c <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    5e8c:	b590      	push	{r4, r7, lr}
    5e8e:	b087      	sub	sp, #28
    5e90:	af02      	add	r7, sp, #8
    5e92:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    5e94:	687b      	ldr	r3, [r7, #4]
    5e96:	789b      	ldrb	r3, [r3, #2]
    5e98:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    5e9a:	687b      	ldr	r3, [r7, #4]
    5e9c:	7b1b      	ldrb	r3, [r3, #12]
    5e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	bf14      	ite	ne
    5ea6:	2301      	movne	r3, #1
    5ea8:	2300      	moveq	r3, #0
    5eaa:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    5eac:	7bfb      	ldrb	r3, [r7, #15]
    5eae:	2b03      	cmp	r3, #3
    5eb0:	d13a      	bne.n	5f28 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    5eb2:	687b      	ldr	r3, [r7, #4]
    5eb4:	69db      	ldr	r3, [r3, #28]
    5eb6:	687a      	ldr	r2, [r7, #4]
    5eb8:	7850      	ldrb	r0, [r2, #1]
    5eba:	687a      	ldr	r2, [r7, #4]
    5ebc:	320c      	adds	r2, #12
    5ebe:	2101      	movs	r1, #1
    5ec0:	4798      	blx	r3
    5ec2:	4603      	mov	r3, r0
    5ec4:	737b      	strb	r3, [r7, #13]
		if (err) {
    5ec6:	7b7b      	ldrb	r3, [r7, #13]
    5ec8:	2b00      	cmp	r3, #0
    5eca:	d015      	beq.n	5ef8 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    5ecc:	687b      	ldr	r3, [r7, #4]
    5ece:	2205      	movs	r2, #5
    5ed0:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    5ed2:	687b      	ldr	r3, [r7, #4]
    5ed4:	2202      	movs	r2, #2
    5ed6:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    5ed8:	7bbb      	ldrb	r3, [r7, #14]
    5eda:	2b00      	cmp	r3, #0
    5edc:	d002      	beq.n	5ee4 <usb_d_ctrl_trans_done+0x58>
    5ede:	687b      	ldr	r3, [r7, #4]
    5ee0:	785b      	ldrb	r3, [r3, #1]
    5ee2:	e004      	b.n	5eee <usb_d_ctrl_trans_done+0x62>
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	785b      	ldrb	r3, [r3, #1]
    5ee8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5eec:	b2db      	uxtb	r3, r3
    5eee:	2101      	movs	r1, #1
    5ef0:	4618      	mov	r0, r3
    5ef2:	4b15      	ldr	r3, [pc, #84]	; (5f48 <usb_d_ctrl_trans_done+0xbc>)
    5ef4:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    5ef6:	e022      	b.n	5f3e <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5ef8:	687b      	ldr	r3, [r7, #4]
    5efa:	2204      	movs	r2, #4
    5efc:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    5efe:	687b      	ldr	r3, [r7, #4]
    5f00:	7858      	ldrb	r0, [r3, #1]
    5f02:	7bbb      	ldrb	r3, [r7, #14]
    5f04:	2b00      	cmp	r3, #0
    5f06:	bf14      	ite	ne
    5f08:	2301      	movne	r3, #1
    5f0a:	2300      	moveq	r3, #0
    5f0c:	b2db      	uxtb	r3, r3
    5f0e:	f083 0301 	eor.w	r3, r3, #1
    5f12:	b2db      	uxtb	r3, r3
    5f14:	f003 0301 	and.w	r3, r3, #1
    5f18:	b2d9      	uxtb	r1, r3
    5f1a:	2301      	movs	r3, #1
    5f1c:	9300      	str	r3, [sp, #0]
    5f1e:	2300      	movs	r3, #0
    5f20:	2200      	movs	r2, #0
    5f22:	4c0a      	ldr	r4, [pc, #40]	; (5f4c <usb_d_ctrl_trans_done+0xc0>)
    5f24:	47a0      	blx	r4
}
    5f26:	e00a      	b.n	5f3e <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    5f28:	687b      	ldr	r3, [r7, #4]
    5f2a:	69db      	ldr	r3, [r3, #28]
    5f2c:	687a      	ldr	r2, [r7, #4]
    5f2e:	7850      	ldrb	r0, [r2, #1]
    5f30:	687a      	ldr	r2, [r7, #4]
    5f32:	320c      	adds	r2, #12
    5f34:	2100      	movs	r1, #0
    5f36:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5f38:	687b      	ldr	r3, [r7, #4]
    5f3a:	2202      	movs	r2, #2
    5f3c:	709a      	strb	r2, [r3, #2]
}
    5f3e:	bf00      	nop
    5f40:	3714      	adds	r7, #20
    5f42:	46bd      	mov	sp, r7
    5f44:	bd90      	pop	{r4, r7, pc}
    5f46:	bf00      	nop
    5f48:	0000dc71 	.word	0x0000dc71
    5f4c:	00005d05 	.word	0x00005d05

00005f50 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    5f50:	b580      	push	{r7, lr}
    5f52:	b086      	sub	sp, #24
    5f54:	af00      	add	r7, sp, #0
    5f56:	4603      	mov	r3, r0
    5f58:	60b9      	str	r1, [r7, #8]
    5f5a:	607a      	str	r2, [r7, #4]
    5f5c:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5f5e:	7bfb      	ldrb	r3, [r7, #15]
    5f60:	4618      	mov	r0, r3
    5f62:	4b2f      	ldr	r3, [pc, #188]	; (6020 <_usb_d_cb_trans_done+0xd0>)
    5f64:	4798      	blx	r3
    5f66:	4603      	mov	r3, r0
    5f68:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5f6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5f6e:	015b      	lsls	r3, r3, #5
    5f70:	4a2c      	ldr	r2, [pc, #176]	; (6024 <_usb_d_cb_trans_done+0xd4>)
    5f72:	4413      	add	r3, r2
    5f74:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    5f76:	68bb      	ldr	r3, [r7, #8]
    5f78:	2b00      	cmp	r3, #0
    5f7a:	d10e      	bne.n	5f9a <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5f7c:	693b      	ldr	r3, [r7, #16]
    5f7e:	2200      	movs	r2, #0
    5f80:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5f82:	693b      	ldr	r3, [r7, #16]
    5f84:	781b      	ldrb	r3, [r3, #0]
    5f86:	2b00      	cmp	r3, #0
    5f88:	d103      	bne.n	5f92 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    5f8a:	6938      	ldr	r0, [r7, #16]
    5f8c:	4b26      	ldr	r3, [pc, #152]	; (6028 <_usb_d_cb_trans_done+0xd8>)
    5f8e:	4798      	blx	r3
			return;
    5f90:	e043      	b.n	601a <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5f92:	693b      	ldr	r3, [r7, #16]
    5f94:	2201      	movs	r2, #1
    5f96:	709a      	strb	r2, [r3, #2]
    5f98:	e038      	b.n	600c <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    5f9a:	68bb      	ldr	r3, [r7, #8]
    5f9c:	2b01      	cmp	r3, #1
    5f9e:	d113      	bne.n	5fc8 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    5fa0:	693b      	ldr	r3, [r7, #16]
    5fa2:	2202      	movs	r2, #2
    5fa4:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5fa6:	693b      	ldr	r3, [r7, #16]
    5fa8:	781b      	ldrb	r3, [r3, #0]
    5faa:	2b00      	cmp	r3, #0
    5fac:	d108      	bne.n	5fc0 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5fae:	693b      	ldr	r3, [r7, #16]
    5fb0:	2202      	movs	r2, #2
    5fb2:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5fb4:	7bfb      	ldrb	r3, [r7, #15]
    5fb6:	2100      	movs	r1, #0
    5fb8:	4618      	mov	r0, r3
    5fba:	4b1c      	ldr	r3, [pc, #112]	; (602c <_usb_d_cb_trans_done+0xdc>)
    5fbc:	4798      	blx	r3
    5fbe:	e025      	b.n	600c <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    5fc0:	693b      	ldr	r3, [r7, #16]
    5fc2:	2205      	movs	r2, #5
    5fc4:	709a      	strb	r2, [r3, #2]
    5fc6:	e021      	b.n	600c <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    5fc8:	68bb      	ldr	r3, [r7, #8]
    5fca:	2b02      	cmp	r3, #2
    5fcc:	d10e      	bne.n	5fec <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    5fce:	693b      	ldr	r3, [r7, #16]
    5fd0:	2204      	movs	r2, #4
    5fd2:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5fd4:	693b      	ldr	r3, [r7, #16]
    5fd6:	781b      	ldrb	r3, [r3, #0]
    5fd8:	2b00      	cmp	r3, #0
    5fda:	d103      	bne.n	5fe4 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5fdc:	693b      	ldr	r3, [r7, #16]
    5fde:	2202      	movs	r2, #2
    5fe0:	709a      	strb	r2, [r3, #2]
			return;
    5fe2:	e01a      	b.n	601a <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5fe4:	693b      	ldr	r3, [r7, #16]
    5fe6:	2201      	movs	r2, #1
    5fe8:	709a      	strb	r2, [r3, #2]
    5fea:	e00f      	b.n	600c <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    5fec:	68bb      	ldr	r3, [r7, #8]
    5fee:	2b03      	cmp	r3, #3
    5ff0:	d106      	bne.n	6000 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    5ff2:	693b      	ldr	r3, [r7, #16]
    5ff4:	2200      	movs	r2, #0
    5ff6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    5ff8:	693b      	ldr	r3, [r7, #16]
    5ffa:	2205      	movs	r2, #5
    5ffc:	70da      	strb	r2, [r3, #3]
    5ffe:	e005      	b.n	600c <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    6000:	693b      	ldr	r3, [r7, #16]
    6002:	2206      	movs	r2, #6
    6004:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    6006:	693b      	ldr	r3, [r7, #16]
    6008:	2206      	movs	r2, #6
    600a:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    600c:	693b      	ldr	r3, [r7, #16]
    600e:	69db      	ldr	r3, [r3, #28]
    6010:	693a      	ldr	r2, [r7, #16]
    6012:	78d1      	ldrb	r1, [r2, #3]
    6014:	687a      	ldr	r2, [r7, #4]
    6016:	7bf8      	ldrb	r0, [r7, #15]
    6018:	4798      	blx	r3
}
    601a:	3718      	adds	r7, #24
    601c:	46bd      	mov	sp, r7
    601e:	bd80      	pop	{r7, pc}
    6020:	00005c85 	.word	0x00005c85
    6024:	20002e30 	.word	0x20002e30
    6028:	00005e8d 	.word	0x00005e8d
    602c:	0000dc71 	.word	0x0000dc71

00006030 <usb_d_init>:

int32_t usb_d_init(void)
{
    6030:	b580      	push	{r7, lr}
    6032:	b082      	sub	sp, #8
    6034:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    6036:	4b21      	ldr	r3, [pc, #132]	; (60bc <usb_d_init+0x8c>)
    6038:	4798      	blx	r3
    603a:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    603c:	683b      	ldr	r3, [r7, #0]
    603e:	2b00      	cmp	r3, #0
    6040:	da01      	bge.n	6046 <usb_d_init+0x16>
		return rc;
    6042:	683b      	ldr	r3, [r7, #0]
    6044:	e036      	b.n	60b4 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    6046:	2280      	movs	r2, #128	; 0x80
    6048:	2100      	movs	r1, #0
    604a:	481d      	ldr	r0, [pc, #116]	; (60c0 <usb_d_init+0x90>)
    604c:	4b1d      	ldr	r3, [pc, #116]	; (60c4 <usb_d_init+0x94>)
    604e:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6050:	2300      	movs	r3, #0
    6052:	71fb      	strb	r3, [r7, #7]
    6054:	e01e      	b.n	6094 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    6056:	79fb      	ldrb	r3, [r7, #7]
    6058:	4a19      	ldr	r2, [pc, #100]	; (60c0 <usb_d_init+0x90>)
    605a:	015b      	lsls	r3, r3, #5
    605c:	4413      	add	r3, r2
    605e:	3301      	adds	r3, #1
    6060:	22ff      	movs	r2, #255	; 0xff
    6062:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    6064:	79fb      	ldrb	r3, [r7, #7]
    6066:	4a16      	ldr	r2, [pc, #88]	; (60c0 <usb_d_init+0x90>)
    6068:	015b      	lsls	r3, r3, #5
    606a:	4413      	add	r3, r2
    606c:	3314      	adds	r3, #20
    606e:	4a16      	ldr	r2, [pc, #88]	; (60c8 <usb_d_init+0x98>)
    6070:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    6072:	79fb      	ldrb	r3, [r7, #7]
    6074:	4a12      	ldr	r2, [pc, #72]	; (60c0 <usb_d_init+0x90>)
    6076:	015b      	lsls	r3, r3, #5
    6078:	4413      	add	r3, r2
    607a:	3318      	adds	r3, #24
    607c:	4a12      	ldr	r2, [pc, #72]	; (60c8 <usb_d_init+0x98>)
    607e:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    6080:	79fb      	ldrb	r3, [r7, #7]
    6082:	4a0f      	ldr	r2, [pc, #60]	; (60c0 <usb_d_init+0x90>)
    6084:	015b      	lsls	r3, r3, #5
    6086:	4413      	add	r3, r2
    6088:	331c      	adds	r3, #28
    608a:	4a0f      	ldr	r2, [pc, #60]	; (60c8 <usb_d_init+0x98>)
    608c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    608e:	79fb      	ldrb	r3, [r7, #7]
    6090:	3301      	adds	r3, #1
    6092:	71fb      	strb	r3, [r7, #7]
    6094:	79fb      	ldrb	r3, [r7, #7]
    6096:	2b03      	cmp	r3, #3
    6098:	d9dd      	bls.n	6056 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    609a:	490c      	ldr	r1, [pc, #48]	; (60cc <usb_d_init+0x9c>)
    609c:	2000      	movs	r0, #0
    609e:	4b0c      	ldr	r3, [pc, #48]	; (60d0 <usb_d_init+0xa0>)
    60a0:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    60a2:	490c      	ldr	r1, [pc, #48]	; (60d4 <usb_d_init+0xa4>)
    60a4:	2001      	movs	r0, #1
    60a6:	4b0a      	ldr	r3, [pc, #40]	; (60d0 <usb_d_init+0xa0>)
    60a8:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    60aa:	490b      	ldr	r1, [pc, #44]	; (60d8 <usb_d_init+0xa8>)
    60ac:	2002      	movs	r0, #2
    60ae:	4b08      	ldr	r3, [pc, #32]	; (60d0 <usb_d_init+0xa0>)
    60b0:	4798      	blx	r3
	return ERR_NONE;
    60b2:	2300      	movs	r3, #0
}
    60b4:	4618      	mov	r0, r3
    60b6:	3708      	adds	r7, #8
    60b8:	46bd      	mov	sp, r7
    60ba:	bd80      	pop	{r7, pc}
    60bc:	0000d4b9 	.word	0x0000d4b9
    60c0:	20002e30 	.word	0x20002e30
    60c4:	0001790d 	.word	0x0001790d
    60c8:	00005d59 	.word	0x00005d59
    60cc:	00005d75 	.word	0x00005d75
    60d0:	0000e101 	.word	0x0000e101
    60d4:	00005e3d 	.word	0x00005e3d
    60d8:	00005f51 	.word	0x00005f51

000060dc <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    60dc:	b580      	push	{r7, lr}
    60de:	b082      	sub	sp, #8
    60e0:	af00      	add	r7, sp, #0
    60e2:	4603      	mov	r3, r0
    60e4:	6039      	str	r1, [r7, #0]
    60e6:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    60e8:	79fb      	ldrb	r3, [r7, #7]
    60ea:	6839      	ldr	r1, [r7, #0]
    60ec:	4618      	mov	r0, r3
    60ee:	4b03      	ldr	r3, [pc, #12]	; (60fc <usb_d_register_callback+0x20>)
    60f0:	4798      	blx	r3
}
    60f2:	bf00      	nop
    60f4:	3708      	adds	r7, #8
    60f6:	46bd      	mov	sp, r7
    60f8:	bd80      	pop	{r7, pc}
    60fa:	bf00      	nop
    60fc:	0000e0b9 	.word	0x0000e0b9

00006100 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    6100:	b580      	push	{r7, lr}
    6102:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    6104:	4b02      	ldr	r3, [pc, #8]	; (6110 <usb_d_enable+0x10>)
    6106:	4798      	blx	r3
    6108:	4603      	mov	r3, r0
}
    610a:	4618      	mov	r0, r3
    610c:	bd80      	pop	{r7, pc}
    610e:	bf00      	nop
    6110:	0000d5a9 	.word	0x0000d5a9

00006114 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    6114:	b580      	push	{r7, lr}
    6116:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    6118:	4b01      	ldr	r3, [pc, #4]	; (6120 <usb_d_attach+0xc>)
    611a:	4798      	blx	r3
}
    611c:	bf00      	nop
    611e:	bd80      	pop	{r7, pc}
    6120:	0000d62d 	.word	0x0000d62d

00006124 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    6124:	b580      	push	{r7, lr}
    6126:	b082      	sub	sp, #8
    6128:	af00      	add	r7, sp, #0
    612a:	4603      	mov	r3, r0
    612c:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    612e:	79fb      	ldrb	r3, [r7, #7]
    6130:	4618      	mov	r0, r3
    6132:	4b03      	ldr	r3, [pc, #12]	; (6140 <usb_d_set_address+0x1c>)
    6134:	4798      	blx	r3
}
    6136:	bf00      	nop
    6138:	3708      	adds	r7, #8
    613a:	46bd      	mov	sp, r7
    613c:	bd80      	pop	{r7, pc}
    613e:	bf00      	nop
    6140:	0000d641 	.word	0x0000d641

00006144 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    6144:	b580      	push	{r7, lr}
    6146:	b082      	sub	sp, #8
    6148:	af00      	add	r7, sp, #0
    614a:	4603      	mov	r3, r0
    614c:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    614e:	79fb      	ldrb	r3, [r7, #7]
    6150:	b29b      	uxth	r3, r3
    6152:	461a      	mov	r2, r3
    6154:	2100      	movs	r1, #0
    6156:	2000      	movs	r0, #0
    6158:	4b03      	ldr	r3, [pc, #12]	; (6168 <usb_d_ep0_init+0x24>)
    615a:	4798      	blx	r3
    615c:	4603      	mov	r3, r0
}
    615e:	4618      	mov	r0, r3
    6160:	3708      	adds	r7, #8
    6162:	46bd      	mov	sp, r7
    6164:	bd80      	pop	{r7, pc}
    6166:	bf00      	nop
    6168:	0000616d 	.word	0x0000616d

0000616c <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    616c:	b580      	push	{r7, lr}
    616e:	b086      	sub	sp, #24
    6170:	af00      	add	r7, sp, #0
    6172:	4603      	mov	r3, r0
    6174:	71fb      	strb	r3, [r7, #7]
    6176:	460b      	mov	r3, r1
    6178:	71bb      	strb	r3, [r7, #6]
    617a:	4613      	mov	r3, r2
    617c:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    617e:	79fb      	ldrb	r3, [r7, #7]
    6180:	4618      	mov	r0, r3
    6182:	4b1e      	ldr	r3, [pc, #120]	; (61fc <usb_d_ep_init+0x90>)
    6184:	4798      	blx	r3
    6186:	4603      	mov	r3, r0
    6188:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    618a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    618e:	015b      	lsls	r3, r3, #5
    6190:	4a1b      	ldr	r2, [pc, #108]	; (6200 <usb_d_ep_init+0x94>)
    6192:	4413      	add	r3, r2
    6194:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    6196:	f997 3017 	ldrsb.w	r3, [r7, #23]
    619a:	2b00      	cmp	r3, #0
    619c:	db02      	blt.n	61a4 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    619e:	f06f 0313 	mvn.w	r3, #19
    61a2:	e027      	b.n	61f4 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    61a4:	20ff      	movs	r0, #255	; 0xff
    61a6:	4b15      	ldr	r3, [pc, #84]	; (61fc <usb_d_ep_init+0x90>)
    61a8:	4798      	blx	r3
    61aa:	4603      	mov	r3, r0
    61ac:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    61ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    61b2:	2b00      	cmp	r3, #0
    61b4:	da02      	bge.n	61bc <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    61b6:	f06f 0314 	mvn.w	r3, #20
    61ba:	e01b      	b.n	61f4 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    61bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
    61c0:	015b      	lsls	r3, r3, #5
    61c2:	4a0f      	ldr	r2, [pc, #60]	; (6200 <usb_d_ep_init+0x94>)
    61c4:	4413      	add	r3, r2
    61c6:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    61c8:	88ba      	ldrh	r2, [r7, #4]
    61ca:	79b9      	ldrb	r1, [r7, #6]
    61cc:	79fb      	ldrb	r3, [r7, #7]
    61ce:	4618      	mov	r0, r3
    61d0:	4b0c      	ldr	r3, [pc, #48]	; (6204 <usb_d_ep_init+0x98>)
    61d2:	4798      	blx	r3
    61d4:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    61d6:	68fb      	ldr	r3, [r7, #12]
    61d8:	2b00      	cmp	r3, #0
    61da:	da01      	bge.n	61e0 <usb_d_ep_init+0x74>
		return rc;
    61dc:	68fb      	ldr	r3, [r7, #12]
    61de:	e009      	b.n	61f4 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    61e0:	693b      	ldr	r3, [r7, #16]
    61e2:	79fa      	ldrb	r2, [r7, #7]
    61e4:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    61e6:	79bb      	ldrb	r3, [r7, #6]
    61e8:	f003 0303 	and.w	r3, r3, #3
    61ec:	b2da      	uxtb	r2, r3
    61ee:	693b      	ldr	r3, [r7, #16]
    61f0:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    61f2:	2300      	movs	r3, #0
}
    61f4:	4618      	mov	r0, r3
    61f6:	3718      	adds	r7, #24
    61f8:	46bd      	mov	sp, r7
    61fa:	bd80      	pop	{r7, pc}
    61fc:	00005c85 	.word	0x00005c85
    6200:	20002e30 	.word	0x20002e30
    6204:	0000d6e1 	.word	0x0000d6e1

00006208 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    6208:	b580      	push	{r7, lr}
    620a:	b084      	sub	sp, #16
    620c:	af00      	add	r7, sp, #0
    620e:	4603      	mov	r3, r0
    6210:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6212:	79fb      	ldrb	r3, [r7, #7]
    6214:	4618      	mov	r0, r3
    6216:	4b0d      	ldr	r3, [pc, #52]	; (624c <usb_d_ep_deinit+0x44>)
    6218:	4798      	blx	r3
    621a:	4603      	mov	r3, r0
    621c:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    621e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6222:	015b      	lsls	r3, r3, #5
    6224:	4a0a      	ldr	r2, [pc, #40]	; (6250 <usb_d_ep_deinit+0x48>)
    6226:	4413      	add	r3, r2
    6228:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    622a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    622e:	2b00      	cmp	r3, #0
    6230:	db07      	blt.n	6242 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    6232:	79fb      	ldrb	r3, [r7, #7]
    6234:	4618      	mov	r0, r3
    6236:	4b07      	ldr	r3, [pc, #28]	; (6254 <usb_d_ep_deinit+0x4c>)
    6238:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    623a:	68bb      	ldr	r3, [r7, #8]
    623c:	22ff      	movs	r2, #255	; 0xff
    623e:	705a      	strb	r2, [r3, #1]
    6240:	e000      	b.n	6244 <usb_d_ep_deinit+0x3c>
		return;
    6242:	bf00      	nop
}
    6244:	3710      	adds	r7, #16
    6246:	46bd      	mov	sp, r7
    6248:	bd80      	pop	{r7, pc}
    624a:	bf00      	nop
    624c:	00005c85 	.word	0x00005c85
    6250:	20002e30 	.word	0x20002e30
    6254:	0000d815 	.word	0x0000d815

00006258 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    6258:	b580      	push	{r7, lr}
    625a:	b086      	sub	sp, #24
    625c:	af00      	add	r7, sp, #0
    625e:	4603      	mov	r3, r0
    6260:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6262:	79fb      	ldrb	r3, [r7, #7]
    6264:	4618      	mov	r0, r3
    6266:	4b15      	ldr	r3, [pc, #84]	; (62bc <usb_d_ep_enable+0x64>)
    6268:	4798      	blx	r3
    626a:	4603      	mov	r3, r0
    626c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    626e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6272:	015b      	lsls	r3, r3, #5
    6274:	4a12      	ldr	r2, [pc, #72]	; (62c0 <usb_d_ep_enable+0x68>)
    6276:	4413      	add	r3, r2
    6278:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    627a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    627e:	2b00      	cmp	r3, #0
    6280:	da02      	bge.n	6288 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    6282:	f06f 0311 	mvn.w	r3, #17
    6286:	e014      	b.n	62b2 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    6288:	693b      	ldr	r3, [r7, #16]
    628a:	781b      	ldrb	r3, [r3, #0]
    628c:	2b00      	cmp	r3, #0
    628e:	d101      	bne.n	6294 <usb_d_ep_enable+0x3c>
    6290:	2202      	movs	r2, #2
    6292:	e000      	b.n	6296 <usb_d_ep_enable+0x3e>
    6294:	2201      	movs	r2, #1
    6296:	693b      	ldr	r3, [r7, #16]
    6298:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    629a:	79fb      	ldrb	r3, [r7, #7]
    629c:	4618      	mov	r0, r3
    629e:	4b09      	ldr	r3, [pc, #36]	; (62c4 <usb_d_ep_enable+0x6c>)
    62a0:	4798      	blx	r3
    62a2:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    62a4:	68fb      	ldr	r3, [r7, #12]
    62a6:	2b00      	cmp	r3, #0
    62a8:	da02      	bge.n	62b0 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    62aa:	693b      	ldr	r3, [r7, #16]
    62ac:	2200      	movs	r2, #0
    62ae:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    62b0:	68fb      	ldr	r3, [r7, #12]
}
    62b2:	4618      	mov	r0, r3
    62b4:	3718      	adds	r7, #24
    62b6:	46bd      	mov	sp, r7
    62b8:	bd80      	pop	{r7, pc}
    62ba:	bf00      	nop
    62bc:	00005c85 	.word	0x00005c85
    62c0:	20002e30 	.word	0x20002e30
    62c4:	0000d8f9 	.word	0x0000d8f9

000062c8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    62c8:	b590      	push	{r4, r7, lr}
    62ca:	b08d      	sub	sp, #52	; 0x34
    62cc:	af02      	add	r7, sp, #8
    62ce:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    62d0:	687b      	ldr	r3, [r7, #4]
    62d2:	7a1b      	ldrb	r3, [r3, #8]
    62d4:	4618      	mov	r0, r3
    62d6:	4b51      	ldr	r3, [pc, #324]	; (641c <usb_d_ep_transfer+0x154>)
    62d8:	4798      	blx	r3
    62da:	4603      	mov	r3, r0
    62dc:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    62de:	f997 301f 	ldrsb.w	r3, [r7, #31]
    62e2:	015b      	lsls	r3, r3, #5
    62e4:	4a4e      	ldr	r2, [pc, #312]	; (6420 <usb_d_ep_transfer+0x158>)
    62e6:	4413      	add	r3, r2
    62e8:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    62ea:	687b      	ldr	r3, [r7, #4]
    62ec:	7a1b      	ldrb	r3, [r3, #8]
    62ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    62f2:	2b00      	cmp	r3, #0
    62f4:	bf14      	ite	ne
    62f6:	2301      	movne	r3, #1
    62f8:	2300      	moveq	r3, #0
    62fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    62fe:	687b      	ldr	r3, [r7, #4]
    6300:	7a5b      	ldrb	r3, [r3, #9]
    6302:	2b00      	cmp	r3, #0
    6304:	bf14      	ite	ne
    6306:	2301      	movne	r3, #1
    6308:	2300      	moveq	r3, #0
    630a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    630e:	687b      	ldr	r3, [r7, #4]
    6310:	685b      	ldr	r3, [r3, #4]
    6312:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    6314:	f997 301f 	ldrsb.w	r3, [r7, #31]
    6318:	2b00      	cmp	r3, #0
    631a:	da02      	bge.n	6322 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    631c:	f06f 0311 	mvn.w	r3, #17
    6320:	e077      	b.n	6412 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    6322:	f107 0308 	add.w	r3, r7, #8
    6326:	4618      	mov	r0, r3
    6328:	4b3e      	ldr	r3, [pc, #248]	; (6424 <usb_d_ep_transfer+0x15c>)
    632a:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    632c:	69bb      	ldr	r3, [r7, #24]
    632e:	789b      	ldrb	r3, [r3, #2]
    6330:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    6332:	7bfb      	ldrb	r3, [r7, #15]
    6334:	b2db      	uxtb	r3, r3
    6336:	2b01      	cmp	r3, #1
    6338:	d10c      	bne.n	6354 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    633a:	69bb      	ldr	r3, [r7, #24]
    633c:	2203      	movs	r2, #3
    633e:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    6340:	f107 0308 	add.w	r3, r7, #8
    6344:	4618      	mov	r0, r3
    6346:	4b38      	ldr	r3, [pc, #224]	; (6428 <usb_d_ep_transfer+0x160>)
    6348:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    634a:	69bb      	ldr	r3, [r7, #24]
    634c:	781b      	ldrb	r3, [r3, #0]
    634e:	2b00      	cmp	r3, #0
    6350:	d151      	bne.n	63f6 <usb_d_ep_transfer+0x12e>
    6352:	e017      	b.n	6384 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    6354:	f107 0308 	add.w	r3, r7, #8
    6358:	4618      	mov	r0, r3
    635a:	4b33      	ldr	r3, [pc, #204]	; (6428 <usb_d_ep_transfer+0x160>)
    635c:	4798      	blx	r3
		switch (state) {
    635e:	7bfb      	ldrb	r3, [r7, #15]
    6360:	b2db      	uxtb	r3, r3
    6362:	2b05      	cmp	r3, #5
    6364:	d004      	beq.n	6370 <usb_d_ep_transfer+0xa8>
    6366:	2b06      	cmp	r3, #6
    6368:	d004      	beq.n	6374 <usb_d_ep_transfer+0xac>
    636a:	2b00      	cmp	r3, #0
    636c:	d005      	beq.n	637a <usb_d_ep_transfer+0xb2>
    636e:	e007      	b.n	6380 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    6370:	2302      	movs	r3, #2
    6372:	e04e      	b.n	6412 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    6374:	f06f 030f 	mvn.w	r3, #15
    6378:	e04b      	b.n	6412 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    637a:	f06f 0312 	mvn.w	r3, #18
    637e:	e048      	b.n	6412 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    6380:	2301      	movs	r3, #1
    6382:	e046      	b.n	6412 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    6384:	69bb      	ldr	r3, [r7, #24]
    6386:	7c9b      	ldrb	r3, [r3, #18]
    6388:	b29a      	uxth	r2, r3
    638a:	69bb      	ldr	r3, [r7, #24]
    638c:	7cdb      	ldrb	r3, [r3, #19]
    638e:	b29b      	uxth	r3, r3
    6390:	021b      	lsls	r3, r3, #8
    6392:	b29b      	uxth	r3, r3
    6394:	4413      	add	r3, r2
    6396:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    6398:	8afb      	ldrh	r3, [r7, #22]
    639a:	2b00      	cmp	r3, #0
    639c:	d10b      	bne.n	63b6 <usb_d_ep_transfer+0xee>
			dir                 = true;
    639e:	2301      	movs	r3, #1
    63a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    63a4:	2300      	movs	r3, #0
    63a6:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    63a8:	2301      	movs	r3, #1
    63aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    63ae:	69bb      	ldr	r3, [r7, #24]
    63b0:	2204      	movs	r2, #4
    63b2:	709a      	strb	r2, [r3, #2]
    63b4:	e01f      	b.n	63f6 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    63b6:	69bb      	ldr	r3, [r7, #24]
    63b8:	7b1b      	ldrb	r3, [r3, #12]
    63ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
    63be:	2b00      	cmp	r3, #0
    63c0:	bf14      	ite	ne
    63c2:	2301      	movne	r3, #1
    63c4:	2300      	moveq	r3, #0
    63c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    63ca:	8afa      	ldrh	r2, [r7, #22]
    63cc:	6a3b      	ldr	r3, [r7, #32]
    63ce:	429a      	cmp	r2, r3
    63d0:	d201      	bcs.n	63d6 <usb_d_ep_transfer+0x10e>
				len = req_len;
    63d2:	8afb      	ldrh	r3, [r7, #22]
    63d4:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    63d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    63da:	2b00      	cmp	r3, #0
    63dc:	d008      	beq.n	63f0 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    63de:	8afa      	ldrh	r2, [r7, #22]
    63e0:	6a3b      	ldr	r3, [r7, #32]
    63e2:	429a      	cmp	r2, r3
    63e4:	bf8c      	ite	hi
    63e6:	2301      	movhi	r3, #1
    63e8:	2300      	movls	r3, #0
    63ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    63ee:	e002      	b.n	63f6 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    63f0:	2300      	movs	r3, #0
    63f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    63f6:	687b      	ldr	r3, [r7, #4]
    63f8:	7a18      	ldrb	r0, [r3, #8]
    63fa:	687b      	ldr	r3, [r7, #4]
    63fc:	681a      	ldr	r2, [r3, #0]
    63fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    6402:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    6406:	9300      	str	r3, [sp, #0]
    6408:	6a3b      	ldr	r3, [r7, #32]
    640a:	4c08      	ldr	r4, [pc, #32]	; (642c <usb_d_ep_transfer+0x164>)
    640c:	47a0      	blx	r4
    640e:	6138      	str	r0, [r7, #16]
	return rc;
    6410:	693b      	ldr	r3, [r7, #16]
}
    6412:	4618      	mov	r0, r3
    6414:	372c      	adds	r7, #44	; 0x2c
    6416:	46bd      	mov	sp, r7
    6418:	bd90      	pop	{r4, r7, pc}
    641a:	bf00      	nop
    641c:	00005c85 	.word	0x00005c85
    6420:	20002e30 	.word	0x20002e30
    6424:	0000e86d 	.word	0x0000e86d
    6428:	0000e893 	.word	0x0000e893
    642c:	00005d05 	.word	0x00005d05

00006430 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    6430:	b580      	push	{r7, lr}
    6432:	b084      	sub	sp, #16
    6434:	af00      	add	r7, sp, #0
    6436:	4603      	mov	r3, r0
    6438:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    643a:	79fb      	ldrb	r3, [r7, #7]
    643c:	4618      	mov	r0, r3
    643e:	4b0e      	ldr	r3, [pc, #56]	; (6478 <usb_d_ep_abort+0x48>)
    6440:	4798      	blx	r3
    6442:	4603      	mov	r3, r0
    6444:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6446:	f997 300f 	ldrsb.w	r3, [r7, #15]
    644a:	015b      	lsls	r3, r3, #5
    644c:	4a0b      	ldr	r2, [pc, #44]	; (647c <usb_d_ep_abort+0x4c>)
    644e:	4413      	add	r3, r2
    6450:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    6452:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6456:	2b00      	cmp	r3, #0
    6458:	db0a      	blt.n	6470 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    645a:	79fb      	ldrb	r3, [r7, #7]
    645c:	4618      	mov	r0, r3
    645e:	4b08      	ldr	r3, [pc, #32]	; (6480 <usb_d_ep_abort+0x50>)
    6460:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    6462:	68bb      	ldr	r3, [r7, #8]
    6464:	2201      	movs	r2, #1
    6466:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    6468:	68bb      	ldr	r3, [r7, #8]
    646a:	2204      	movs	r2, #4
    646c:	70da      	strb	r2, [r3, #3]
    646e:	e000      	b.n	6472 <usb_d_ep_abort+0x42>
		return;
    6470:	bf00      	nop
}
    6472:	3710      	adds	r7, #16
    6474:	46bd      	mov	sp, r7
    6476:	bd80      	pop	{r7, pc}
    6478:	00005c85 	.word	0x00005c85
    647c:	20002e30 	.word	0x20002e30
    6480:	0000e065 	.word	0x0000e065

00006484 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    6484:	b580      	push	{r7, lr}
    6486:	b086      	sub	sp, #24
    6488:	af00      	add	r7, sp, #0
    648a:	4603      	mov	r3, r0
    648c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    648e:	79fb      	ldrb	r3, [r7, #7]
    6490:	4618      	mov	r0, r3
    6492:	4b1a      	ldr	r3, [pc, #104]	; (64fc <_usb_d_ep_halt_clr+0x78>)
    6494:	4798      	blx	r3
    6496:	4603      	mov	r3, r0
    6498:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    649a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    649e:	015b      	lsls	r3, r3, #5
    64a0:	4a17      	ldr	r2, [pc, #92]	; (6500 <_usb_d_ep_halt_clr+0x7c>)
    64a2:	4413      	add	r3, r2
    64a4:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    64a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    64aa:	2b00      	cmp	r3, #0
    64ac:	da02      	bge.n	64b4 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    64ae:	f06f 0311 	mvn.w	r3, #17
    64b2:	e01f      	b.n	64f4 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    64b4:	79fb      	ldrb	r3, [r7, #7]
    64b6:	2102      	movs	r1, #2
    64b8:	4618      	mov	r0, r3
    64ba:	4b12      	ldr	r3, [pc, #72]	; (6504 <_usb_d_ep_halt_clr+0x80>)
    64bc:	4798      	blx	r3
    64be:	4603      	mov	r3, r0
    64c0:	2b00      	cmp	r3, #0
    64c2:	d016      	beq.n	64f2 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    64c4:	79fb      	ldrb	r3, [r7, #7]
    64c6:	2100      	movs	r1, #0
    64c8:	4618      	mov	r0, r3
    64ca:	4b0e      	ldr	r3, [pc, #56]	; (6504 <_usb_d_ep_halt_clr+0x80>)
    64cc:	4798      	blx	r3
    64ce:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    64d0:	68fb      	ldr	r3, [r7, #12]
    64d2:	2b00      	cmp	r3, #0
    64d4:	da01      	bge.n	64da <_usb_d_ep_halt_clr+0x56>
			return rc;
    64d6:	68fb      	ldr	r3, [r7, #12]
    64d8:	e00c      	b.n	64f4 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    64da:	693b      	ldr	r3, [r7, #16]
    64dc:	2201      	movs	r2, #1
    64de:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    64e0:	693b      	ldr	r3, [r7, #16]
    64e2:	2203      	movs	r2, #3
    64e4:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    64e6:	693b      	ldr	r3, [r7, #16]
    64e8:	69db      	ldr	r3, [r3, #28]
    64ea:	79f8      	ldrb	r0, [r7, #7]
    64ec:	2200      	movs	r2, #0
    64ee:	2103      	movs	r1, #3
    64f0:	4798      	blx	r3
	}
	return ERR_NONE;
    64f2:	2300      	movs	r3, #0
}
    64f4:	4618      	mov	r0, r3
    64f6:	3718      	adds	r7, #24
    64f8:	46bd      	mov	sp, r7
    64fa:	bd80      	pop	{r7, pc}
    64fc:	00005c85 	.word	0x00005c85
    6500:	20002e30 	.word	0x20002e30
    6504:	0000dc71 	.word	0x0000dc71

00006508 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    6508:	b580      	push	{r7, lr}
    650a:	b082      	sub	sp, #8
    650c:	af00      	add	r7, sp, #0
    650e:	4603      	mov	r3, r0
    6510:	460a      	mov	r2, r1
    6512:	71fb      	strb	r3, [r7, #7]
    6514:	4613      	mov	r3, r2
    6516:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    6518:	79bb      	ldrb	r3, [r7, #6]
    651a:	2b00      	cmp	r3, #0
    651c:	d105      	bne.n	652a <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    651e:	79fb      	ldrb	r3, [r7, #7]
    6520:	4618      	mov	r0, r3
    6522:	4b0c      	ldr	r3, [pc, #48]	; (6554 <usb_d_ep_halt+0x4c>)
    6524:	4798      	blx	r3
    6526:	4603      	mov	r3, r0
    6528:	e00f      	b.n	654a <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    652a:	79bb      	ldrb	r3, [r7, #6]
    652c:	2b01      	cmp	r3, #1
    652e:	d106      	bne.n	653e <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6530:	79fb      	ldrb	r3, [r7, #7]
    6532:	2101      	movs	r1, #1
    6534:	4618      	mov	r0, r3
    6536:	4b08      	ldr	r3, [pc, #32]	; (6558 <usb_d_ep_halt+0x50>)
    6538:	4798      	blx	r3
    653a:	4603      	mov	r3, r0
    653c:	e005      	b.n	654a <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    653e:	79fb      	ldrb	r3, [r7, #7]
    6540:	2102      	movs	r1, #2
    6542:	4618      	mov	r0, r3
    6544:	4b04      	ldr	r3, [pc, #16]	; (6558 <usb_d_ep_halt+0x50>)
    6546:	4798      	blx	r3
    6548:	4603      	mov	r3, r0
	}
}
    654a:	4618      	mov	r0, r3
    654c:	3708      	adds	r7, #8
    654e:	46bd      	mov	sp, r7
    6550:	bd80      	pop	{r7, pc}
    6552:	bf00      	nop
    6554:	00006485 	.word	0x00006485
    6558:	0000dc71 	.word	0x0000dc71

0000655c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    655c:	b580      	push	{r7, lr}
    655e:	b086      	sub	sp, #24
    6560:	af00      	add	r7, sp, #0
    6562:	4603      	mov	r3, r0
    6564:	603a      	str	r2, [r7, #0]
    6566:	71fb      	strb	r3, [r7, #7]
    6568:	460b      	mov	r3, r1
    656a:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    656c:	79fb      	ldrb	r3, [r7, #7]
    656e:	4618      	mov	r0, r3
    6570:	4b16      	ldr	r3, [pc, #88]	; (65cc <usb_d_ep_register_callback+0x70>)
    6572:	4798      	blx	r3
    6574:	4603      	mov	r3, r0
    6576:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6578:	f997 3017 	ldrsb.w	r3, [r7, #23]
    657c:	015b      	lsls	r3, r3, #5
    657e:	4a14      	ldr	r2, [pc, #80]	; (65d0 <usb_d_ep_register_callback+0x74>)
    6580:	4413      	add	r3, r2
    6582:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    6584:	683b      	ldr	r3, [r7, #0]
    6586:	2b00      	cmp	r3, #0
    6588:	d001      	beq.n	658e <usb_d_ep_register_callback+0x32>
    658a:	683b      	ldr	r3, [r7, #0]
    658c:	e000      	b.n	6590 <usb_d_ep_register_callback+0x34>
    658e:	4b11      	ldr	r3, [pc, #68]	; (65d4 <usb_d_ep_register_callback+0x78>)
    6590:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    6592:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6596:	2b00      	cmp	r3, #0
    6598:	db13      	blt.n	65c2 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    659a:	79bb      	ldrb	r3, [r7, #6]
    659c:	2b01      	cmp	r3, #1
    659e:	d008      	beq.n	65b2 <usb_d_ep_register_callback+0x56>
    65a0:	2b02      	cmp	r3, #2
    65a2:	d00a      	beq.n	65ba <usb_d_ep_register_callback+0x5e>
    65a4:	2b00      	cmp	r3, #0
    65a6:	d000      	beq.n	65aa <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    65a8:	e00c      	b.n	65c4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    65aa:	693b      	ldr	r3, [r7, #16]
    65ac:	68fa      	ldr	r2, [r7, #12]
    65ae:	615a      	str	r2, [r3, #20]
		break;
    65b0:	e008      	b.n	65c4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    65b2:	693b      	ldr	r3, [r7, #16]
    65b4:	68fa      	ldr	r2, [r7, #12]
    65b6:	619a      	str	r2, [r3, #24]
		break;
    65b8:	e004      	b.n	65c4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    65ba:	693b      	ldr	r3, [r7, #16]
    65bc:	68fa      	ldr	r2, [r7, #12]
    65be:	61da      	str	r2, [r3, #28]
		break;
    65c0:	e000      	b.n	65c4 <usb_d_ep_register_callback+0x68>
		return;
    65c2:	bf00      	nop
	}
}
    65c4:	3718      	adds	r7, #24
    65c6:	46bd      	mov	sp, r7
    65c8:	bd80      	pop	{r7, pc}
    65ca:	bf00      	nop
    65cc:	00005c85 	.word	0x00005c85
    65d0:	20002e30 	.word	0x20002e30
    65d4:	00005d59 	.word	0x00005d59

000065d8 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    65d8:	b480      	push	{r7}
    65da:	b085      	sub	sp, #20
    65dc:	af00      	add	r7, sp, #0
    65de:	4603      	mov	r3, r0
    65e0:	60b9      	str	r1, [r7, #8]
    65e2:	607a      	str	r2, [r7, #4]
    65e4:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    65e6:	7bfb      	ldrb	r3, [r7, #15]
    65e8:	f083 0301 	eor.w	r3, r3, #1
    65ec:	b2db      	uxtb	r3, r3
    65ee:	2b00      	cmp	r3, #0
    65f0:	d000      	beq.n	65f4 <assert+0x1c>
		__asm("BKPT #0");
    65f2:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    65f4:	bf00      	nop
    65f6:	3714      	adds	r7, #20
    65f8:	46bd      	mov	sp, r7
    65fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    65fe:	4770      	bx	lr

00006600 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    6600:	b480      	push	{r7}
    6602:	b085      	sub	sp, #20
    6604:	af00      	add	r7, sp, #0
    6606:	6078      	str	r0, [r7, #4]
    6608:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    660a:	687b      	ldr	r3, [r7, #4]
    660c:	681b      	ldr	r3, [r3, #0]
    660e:	60fb      	str	r3, [r7, #12]
    6610:	e008      	b.n	6624 <is_list_element+0x24>
		if (it == element) {
    6612:	68fa      	ldr	r2, [r7, #12]
    6614:	683b      	ldr	r3, [r7, #0]
    6616:	429a      	cmp	r2, r3
    6618:	d101      	bne.n	661e <is_list_element+0x1e>
			return true;
    661a:	2301      	movs	r3, #1
    661c:	e006      	b.n	662c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    661e:	68fb      	ldr	r3, [r7, #12]
    6620:	681b      	ldr	r3, [r3, #0]
    6622:	60fb      	str	r3, [r7, #12]
    6624:	68fb      	ldr	r3, [r7, #12]
    6626:	2b00      	cmp	r3, #0
    6628:	d1f3      	bne.n	6612 <is_list_element+0x12>
		}
	}

	return false;
    662a:	2300      	movs	r3, #0
}
    662c:	4618      	mov	r0, r3
    662e:	3714      	adds	r7, #20
    6630:	46bd      	mov	sp, r7
    6632:	f85d 7b04 	ldr.w	r7, [sp], #4
    6636:	4770      	bx	lr

00006638 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    6638:	b580      	push	{r7, lr}
    663a:	b082      	sub	sp, #8
    663c:	af00      	add	r7, sp, #0
    663e:	6078      	str	r0, [r7, #4]
    6640:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    6642:	6839      	ldr	r1, [r7, #0]
    6644:	6878      	ldr	r0, [r7, #4]
    6646:	4b0f      	ldr	r3, [pc, #60]	; (6684 <list_insert_as_head+0x4c>)
    6648:	4798      	blx	r3
    664a:	4603      	mov	r3, r0
    664c:	2b00      	cmp	r3, #0
    664e:	bf14      	ite	ne
    6650:	2301      	movne	r3, #1
    6652:	2300      	moveq	r3, #0
    6654:	b2db      	uxtb	r3, r3
    6656:	f083 0301 	eor.w	r3, r3, #1
    665a:	b2db      	uxtb	r3, r3
    665c:	f003 0301 	and.w	r3, r3, #1
    6660:	b2db      	uxtb	r3, r3
    6662:	2239      	movs	r2, #57	; 0x39
    6664:	4908      	ldr	r1, [pc, #32]	; (6688 <list_insert_as_head+0x50>)
    6666:	4618      	mov	r0, r3
    6668:	4b08      	ldr	r3, [pc, #32]	; (668c <list_insert_as_head+0x54>)
    666a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    666c:	687b      	ldr	r3, [r7, #4]
    666e:	681a      	ldr	r2, [r3, #0]
    6670:	683b      	ldr	r3, [r7, #0]
    6672:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    6674:	687b      	ldr	r3, [r7, #4]
    6676:	683a      	ldr	r2, [r7, #0]
    6678:	601a      	str	r2, [r3, #0]
}
    667a:	bf00      	nop
    667c:	3708      	adds	r7, #8
    667e:	46bd      	mov	sp, r7
    6680:	bd80      	pop	{r7, pc}
    6682:	bf00      	nop
    6684:	00006601 	.word	0x00006601
    6688:	00018498 	.word	0x00018498
    668c:	000065d9 	.word	0x000065d9

00006690 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    6690:	b480      	push	{r7}
    6692:	b083      	sub	sp, #12
    6694:	af00      	add	r7, sp, #0
    6696:	6078      	str	r0, [r7, #4]
    6698:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    669a:	687b      	ldr	r3, [r7, #4]
    669c:	681a      	ldr	r2, [r3, #0]
    669e:	683b      	ldr	r3, [r7, #0]
    66a0:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    66a2:	687b      	ldr	r3, [r7, #4]
    66a4:	683a      	ldr	r2, [r7, #0]
    66a6:	601a      	str	r2, [r3, #0]
}
    66a8:	bf00      	nop
    66aa:	370c      	adds	r7, #12
    66ac:	46bd      	mov	sp, r7
    66ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    66b2:	4770      	bx	lr

000066b4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    66b4:	b580      	push	{r7, lr}
    66b6:	b084      	sub	sp, #16
    66b8:	af00      	add	r7, sp, #0
    66ba:	6078      	str	r0, [r7, #4]
    66bc:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    66be:	687b      	ldr	r3, [r7, #4]
    66c0:	681b      	ldr	r3, [r3, #0]
    66c2:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    66c4:	6839      	ldr	r1, [r7, #0]
    66c6:	6878      	ldr	r0, [r7, #4]
    66c8:	4b16      	ldr	r3, [pc, #88]	; (6724 <list_insert_at_end+0x70>)
    66ca:	4798      	blx	r3
    66cc:	4603      	mov	r3, r0
    66ce:	2b00      	cmp	r3, #0
    66d0:	bf14      	ite	ne
    66d2:	2301      	movne	r3, #1
    66d4:	2300      	moveq	r3, #0
    66d6:	b2db      	uxtb	r3, r3
    66d8:	f083 0301 	eor.w	r3, r3, #1
    66dc:	b2db      	uxtb	r3, r3
    66de:	f003 0301 	and.w	r3, r3, #1
    66e2:	b2db      	uxtb	r3, r3
    66e4:	224f      	movs	r2, #79	; 0x4f
    66e6:	4910      	ldr	r1, [pc, #64]	; (6728 <list_insert_at_end+0x74>)
    66e8:	4618      	mov	r0, r3
    66ea:	4b10      	ldr	r3, [pc, #64]	; (672c <list_insert_at_end+0x78>)
    66ec:	4798      	blx	r3

	if (!list->head) {
    66ee:	687b      	ldr	r3, [r7, #4]
    66f0:	681b      	ldr	r3, [r3, #0]
    66f2:	2b00      	cmp	r3, #0
    66f4:	d109      	bne.n	670a <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    66f6:	687b      	ldr	r3, [r7, #4]
    66f8:	683a      	ldr	r2, [r7, #0]
    66fa:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    66fc:	683b      	ldr	r3, [r7, #0]
    66fe:	2200      	movs	r2, #0
    6700:	601a      	str	r2, [r3, #0]
		return;
    6702:	e00c      	b.n	671e <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    6704:	68fb      	ldr	r3, [r7, #12]
    6706:	681b      	ldr	r3, [r3, #0]
    6708:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    670a:	68fb      	ldr	r3, [r7, #12]
    670c:	681b      	ldr	r3, [r3, #0]
    670e:	2b00      	cmp	r3, #0
    6710:	d1f8      	bne.n	6704 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    6712:	68fb      	ldr	r3, [r7, #12]
    6714:	683a      	ldr	r2, [r7, #0]
    6716:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    6718:	683b      	ldr	r3, [r7, #0]
    671a:	2200      	movs	r2, #0
    671c:	601a      	str	r2, [r3, #0]
}
    671e:	3710      	adds	r7, #16
    6720:	46bd      	mov	sp, r7
    6722:	bd80      	pop	{r7, pc}
    6724:	00006601 	.word	0x00006601
    6728:	00018498 	.word	0x00018498
    672c:	000065d9 	.word	0x000065d9

00006730 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    6730:	b480      	push	{r7}
    6732:	b085      	sub	sp, #20
    6734:	af00      	add	r7, sp, #0
    6736:	6078      	str	r0, [r7, #4]
	if (list->head) {
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	681b      	ldr	r3, [r3, #0]
    673c:	2b00      	cmp	r3, #0
    673e:	d009      	beq.n	6754 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    6740:	687b      	ldr	r3, [r7, #4]
    6742:	681b      	ldr	r3, [r3, #0]
    6744:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    6746:	687b      	ldr	r3, [r7, #4]
    6748:	681b      	ldr	r3, [r3, #0]
    674a:	681a      	ldr	r2, [r3, #0]
    674c:	687b      	ldr	r3, [r7, #4]
    674e:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    6750:	68fb      	ldr	r3, [r7, #12]
    6752:	e000      	b.n	6756 <list_remove_head+0x26>
	}

	return NULL;
    6754:	2300      	movs	r3, #0
}
    6756:	4618      	mov	r0, r3
    6758:	3714      	adds	r7, #20
    675a:	46bd      	mov	sp, r7
    675c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6760:	4770      	bx	lr

00006762 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    6762:	b480      	push	{r7}
    6764:	b085      	sub	sp, #20
    6766:	af00      	add	r7, sp, #0
    6768:	6078      	str	r0, [r7, #4]
    676a:	6039      	str	r1, [r7, #0]
	if (!element) {
    676c:	683b      	ldr	r3, [r7, #0]
    676e:	2b00      	cmp	r3, #0
    6770:	d101      	bne.n	6776 <list_delete_element+0x14>
		return false;
    6772:	2300      	movs	r3, #0
    6774:	e024      	b.n	67c0 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    6776:	687b      	ldr	r3, [r7, #4]
    6778:	681a      	ldr	r2, [r3, #0]
    677a:	683b      	ldr	r3, [r7, #0]
    677c:	429a      	cmp	r2, r3
    677e:	d106      	bne.n	678e <list_delete_element+0x2c>
		list->head = list->head->next;
    6780:	687b      	ldr	r3, [r7, #4]
    6782:	681b      	ldr	r3, [r3, #0]
    6784:	681a      	ldr	r2, [r3, #0]
    6786:	687b      	ldr	r3, [r7, #4]
    6788:	601a      	str	r2, [r3, #0]
		return true;
    678a:	2301      	movs	r3, #1
    678c:	e018      	b.n	67c0 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    678e:	687b      	ldr	r3, [r7, #4]
    6790:	681b      	ldr	r3, [r3, #0]
    6792:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    6794:	e002      	b.n	679c <list_delete_element+0x3a>
			it = it->next;
    6796:	68fb      	ldr	r3, [r7, #12]
    6798:	681b      	ldr	r3, [r3, #0]
    679a:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    679c:	68fb      	ldr	r3, [r7, #12]
    679e:	2b00      	cmp	r3, #0
    67a0:	d004      	beq.n	67ac <list_delete_element+0x4a>
    67a2:	68fb      	ldr	r3, [r7, #12]
    67a4:	681a      	ldr	r2, [r3, #0]
    67a6:	683b      	ldr	r3, [r7, #0]
    67a8:	429a      	cmp	r2, r3
    67aa:	d1f4      	bne.n	6796 <list_delete_element+0x34>
		}
		if (it) {
    67ac:	68fb      	ldr	r3, [r7, #12]
    67ae:	2b00      	cmp	r3, #0
    67b0:	d005      	beq.n	67be <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    67b2:	683b      	ldr	r3, [r7, #0]
    67b4:	681a      	ldr	r2, [r3, #0]
    67b6:	68fb      	ldr	r3, [r7, #12]
    67b8:	601a      	str	r2, [r3, #0]
			return true;
    67ba:	2301      	movs	r3, #1
    67bc:	e000      	b.n	67c0 <list_delete_element+0x5e>
		}
	}

	return false;
    67be:	2300      	movs	r3, #0
}
    67c0:	4618      	mov	r0, r3
    67c2:	3714      	adds	r7, #20
    67c4:	46bd      	mov	sp, r7
    67c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    67ca:	4770      	bx	lr

000067cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    67cc:	b480      	push	{r7}
    67ce:	b083      	sub	sp, #12
    67d0:	af00      	add	r7, sp, #0
    67d2:	4603      	mov	r3, r0
    67d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    67d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    67da:	2b00      	cmp	r3, #0
    67dc:	db0b      	blt.n	67f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    67de:	4909      	ldr	r1, [pc, #36]	; (6804 <__NVIC_EnableIRQ+0x38>)
    67e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    67e4:	095b      	lsrs	r3, r3, #5
    67e6:	88fa      	ldrh	r2, [r7, #6]
    67e8:	f002 021f 	and.w	r2, r2, #31
    67ec:	2001      	movs	r0, #1
    67ee:	fa00 f202 	lsl.w	r2, r0, r2
    67f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    67f6:	bf00      	nop
    67f8:	370c      	adds	r7, #12
    67fa:	46bd      	mov	sp, r7
    67fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6800:	4770      	bx	lr
    6802:	bf00      	nop
    6804:	e000e100 	.word	0xe000e100

00006808 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    6808:	b480      	push	{r7}
    680a:	b083      	sub	sp, #12
    680c:	af00      	add	r7, sp, #0
    680e:	4603      	mov	r3, r0
    6810:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6816:	2b00      	cmp	r3, #0
    6818:	db10      	blt.n	683c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    681a:	490b      	ldr	r1, [pc, #44]	; (6848 <__NVIC_DisableIRQ+0x40>)
    681c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6820:	095b      	lsrs	r3, r3, #5
    6822:	88fa      	ldrh	r2, [r7, #6]
    6824:	f002 021f 	and.w	r2, r2, #31
    6828:	2001      	movs	r0, #1
    682a:	fa00 f202 	lsl.w	r2, r0, r2
    682e:	3320      	adds	r3, #32
    6830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    6834:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6838:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    683c:	bf00      	nop
    683e:	370c      	adds	r7, #12
    6840:	46bd      	mov	sp, r7
    6842:	f85d 7b04 	ldr.w	r7, [sp], #4
    6846:	4770      	bx	lr
    6848:	e000e100 	.word	0xe000e100

0000684c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    684c:	b480      	push	{r7}
    684e:	b083      	sub	sp, #12
    6850:	af00      	add	r7, sp, #0
    6852:	4603      	mov	r3, r0
    6854:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    685a:	2b00      	cmp	r3, #0
    685c:	db0c      	blt.n	6878 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    685e:	4909      	ldr	r1, [pc, #36]	; (6884 <__NVIC_ClearPendingIRQ+0x38>)
    6860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6864:	095b      	lsrs	r3, r3, #5
    6866:	88fa      	ldrh	r2, [r7, #6]
    6868:	f002 021f 	and.w	r2, r2, #31
    686c:	2001      	movs	r0, #1
    686e:	fa00 f202 	lsl.w	r2, r0, r2
    6872:	3360      	adds	r3, #96	; 0x60
    6874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    6878:	bf00      	nop
    687a:	370c      	adds	r7, #12
    687c:	46bd      	mov	sp, r7
    687e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6882:	4770      	bx	lr
    6884:	e000e100 	.word	0xe000e100

00006888 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    6888:	b480      	push	{r7}
    688a:	b083      	sub	sp, #12
    688c:	af00      	add	r7, sp, #0
    688e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    6890:	687b      	ldr	r3, [r7, #4]
    6892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6894:	095b      	lsrs	r3, r3, #5
    6896:	f003 0301 	and.w	r3, r3, #1
    689a:	2b00      	cmp	r3, #0
    689c:	bf14      	ite	ne
    689e:	2301      	movne	r3, #1
    68a0:	2300      	moveq	r3, #0
    68a2:	b2db      	uxtb	r3, r3
}
    68a4:	4618      	mov	r0, r3
    68a6:	370c      	adds	r7, #12
    68a8:	46bd      	mov	sp, r7
    68aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    68ae:	4770      	bx	lr

000068b0 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    68b0:	b480      	push	{r7}
    68b2:	b083      	sub	sp, #12
    68b4:	af00      	add	r7, sp, #0
    68b6:	6078      	str	r0, [r7, #4]
    68b8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    68ba:	687b      	ldr	r3, [r7, #4]
    68bc:	683a      	ldr	r2, [r7, #0]
    68be:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    68c0:	bf00      	nop
    68c2:	370c      	adds	r7, #12
    68c4:	46bd      	mov	sp, r7
    68c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    68ca:	4770      	bx	lr

000068cc <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    68cc:	b480      	push	{r7}
    68ce:	b083      	sub	sp, #12
    68d0:	af00      	add	r7, sp, #0
    68d2:	6078      	str	r0, [r7, #4]
    68d4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    68d6:	687b      	ldr	r3, [r7, #4]
    68d8:	683a      	ldr	r2, [r7, #0]
    68da:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    68dc:	bf00      	nop
    68de:	370c      	adds	r7, #12
    68e0:	46bd      	mov	sp, r7
    68e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    68e6:	4770      	bx	lr

000068e8 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    68e8:	b480      	push	{r7}
    68ea:	b083      	sub	sp, #12
    68ec:	af00      	add	r7, sp, #0
    68ee:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    68f0:	687b      	ldr	r3, [r7, #4]
    68f2:	699b      	ldr	r3, [r3, #24]
    68f4:	f043 0201 	orr.w	r2, r3, #1
    68f8:	687b      	ldr	r3, [r7, #4]
    68fa:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    68fc:	bf00      	nop
    68fe:	370c      	adds	r7, #12
    6900:	46bd      	mov	sp, r7
    6902:	f85d 7b04 	ldr.w	r7, [sp], #4
    6906:	4770      	bx	lr

00006908 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    6908:	b480      	push	{r7}
    690a:	b085      	sub	sp, #20
    690c:	af00      	add	r7, sp, #0
    690e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    6910:	687b      	ldr	r3, [r7, #4]
    6912:	699b      	ldr	r3, [r3, #24]
    6914:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    6916:	68fb      	ldr	r3, [r7, #12]
    6918:	f003 0301 	and.w	r3, r3, #1
    691c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    691e:	68fb      	ldr	r3, [r7, #12]
    6920:	2b00      	cmp	r3, #0
    6922:	bf14      	ite	ne
    6924:	2301      	movne	r3, #1
    6926:	2300      	moveq	r3, #0
    6928:	b2db      	uxtb	r3, r3
}
    692a:	4618      	mov	r0, r3
    692c:	3714      	adds	r7, #20
    692e:	46bd      	mov	sp, r7
    6930:	f85d 7b04 	ldr.w	r7, [sp], #4
    6934:	4770      	bx	lr

00006936 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    6936:	b480      	push	{r7}
    6938:	b083      	sub	sp, #12
    693a:	af00      	add	r7, sp, #0
    693c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    693e:	687b      	ldr	r3, [r7, #4]
    6940:	699b      	ldr	r3, [r3, #24]
    6942:	f023 0201 	bic.w	r2, r3, #1
    6946:	687b      	ldr	r3, [r7, #4]
    6948:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    694a:	bf00      	nop
    694c:	370c      	adds	r7, #12
    694e:	46bd      	mov	sp, r7
    6950:	f85d 7b04 	ldr.w	r7, [sp], #4
    6954:	4770      	bx	lr

00006956 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    6956:	b480      	push	{r7}
    6958:	b083      	sub	sp, #12
    695a:	af00      	add	r7, sp, #0
    695c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    695e:	687b      	ldr	r3, [r7, #4]
    6960:	699b      	ldr	r3, [r3, #24]
    6962:	f043 0202 	orr.w	r2, r3, #2
    6966:	687b      	ldr	r3, [r7, #4]
    6968:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    696a:	bf00      	nop
    696c:	370c      	adds	r7, #12
    696e:	46bd      	mov	sp, r7
    6970:	f85d 7b04 	ldr.w	r7, [sp], #4
    6974:	4770      	bx	lr

00006976 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    6976:	b480      	push	{r7}
    6978:	b083      	sub	sp, #12
    697a:	af00      	add	r7, sp, #0
    697c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    697e:	687b      	ldr	r3, [r7, #4]
    6980:	699b      	ldr	r3, [r3, #24]
    6982:	f023 0202 	bic.w	r2, r3, #2
    6986:	687b      	ldr	r3, [r7, #4]
    6988:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    698a:	bf00      	nop
    698c:	370c      	adds	r7, #12
    698e:	46bd      	mov	sp, r7
    6990:	f85d 7b04 	ldr.w	r7, [sp], #4
    6994:	4770      	bx	lr

00006996 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    6996:	b480      	push	{r7}
    6998:	b083      	sub	sp, #12
    699a:	af00      	add	r7, sp, #0
    699c:	6078      	str	r0, [r7, #4]
    699e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    69a0:	687b      	ldr	r3, [r7, #4]
    69a2:	699a      	ldr	r2, [r3, #24]
    69a4:	683b      	ldr	r3, [r7, #0]
    69a6:	431a      	orrs	r2, r3
    69a8:	687b      	ldr	r3, [r7, #4]
    69aa:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    69ac:	bf00      	nop
    69ae:	370c      	adds	r7, #12
    69b0:	46bd      	mov	sp, r7
    69b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    69b6:	4770      	bx	lr

000069b8 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    69b8:	b480      	push	{r7}
    69ba:	b083      	sub	sp, #12
    69bc:	af00      	add	r7, sp, #0
    69be:	6078      	str	r0, [r7, #4]
    69c0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    69c2:	687b      	ldr	r3, [r7, #4]
    69c4:	683a      	ldr	r2, [r7, #0]
    69c6:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    69c8:	bf00      	nop
    69ca:	370c      	adds	r7, #12
    69cc:	46bd      	mov	sp, r7
    69ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    69d2:	4770      	bx	lr

000069d4 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    69d4:	b480      	push	{r7}
    69d6:	b083      	sub	sp, #12
    69d8:	af00      	add	r7, sp, #0
    69da:	6078      	str	r0, [r7, #4]
    69dc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    69de:	687b      	ldr	r3, [r7, #4]
    69e0:	683a      	ldr	r2, [r7, #0]
    69e2:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    69e4:	bf00      	nop
    69e6:	370c      	adds	r7, #12
    69e8:	46bd      	mov	sp, r7
    69ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    69ee:	4770      	bx	lr

000069f0 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    69f0:	b480      	push	{r7}
    69f2:	b083      	sub	sp, #12
    69f4:	af00      	add	r7, sp, #0
    69f6:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    69f8:	687b      	ldr	r3, [r7, #4]
    69fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    69fc:	4618      	mov	r0, r3
    69fe:	370c      	adds	r7, #12
    6a00:	46bd      	mov	sp, r7
    6a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a06:	4770      	bx	lr

00006a08 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    6a08:	b480      	push	{r7}
    6a0a:	b083      	sub	sp, #12
    6a0c:	af00      	add	r7, sp, #0
    6a0e:	6078      	str	r0, [r7, #4]
    6a10:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    6a12:	687b      	ldr	r3, [r7, #4]
    6a14:	683a      	ldr	r2, [r7, #0]
    6a16:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    6a18:	bf00      	nop
    6a1a:	370c      	adds	r7, #12
    6a1c:	46bd      	mov	sp, r7
    6a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a22:	4770      	bx	lr

00006a24 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    6a24:	b480      	push	{r7}
    6a26:	b083      	sub	sp, #12
    6a28:	af00      	add	r7, sp, #0
    6a2a:	6078      	str	r0, [r7, #4]
    6a2c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    6a2e:	687b      	ldr	r3, [r7, #4]
    6a30:	683a      	ldr	r2, [r7, #0]
    6a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    6a36:	bf00      	nop
    6a38:	370c      	adds	r7, #12
    6a3a:	46bd      	mov	sp, r7
    6a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a40:	4770      	bx	lr

00006a42 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    6a42:	b480      	push	{r7}
    6a44:	b083      	sub	sp, #12
    6a46:	af00      	add	r7, sp, #0
    6a48:	6078      	str	r0, [r7, #4]
    6a4a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    6a4c:	687b      	ldr	r3, [r7, #4]
    6a4e:	683a      	ldr	r2, [r7, #0]
    6a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    6a54:	bf00      	nop
    6a56:	370c      	adds	r7, #12
    6a58:	46bd      	mov	sp, r7
    6a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a5e:	4770      	bx	lr

00006a60 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    6a60:	b480      	push	{r7}
    6a62:	b083      	sub	sp, #12
    6a64:	af00      	add	r7, sp, #0
    6a66:	6078      	str	r0, [r7, #4]
    6a68:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    6a6a:	687b      	ldr	r3, [r7, #4]
    6a6c:	683a      	ldr	r2, [r7, #0]
    6a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    6a72:	bf00      	nop
    6a74:	370c      	adds	r7, #12
    6a76:	46bd      	mov	sp, r7
    6a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a7c:	4770      	bx	lr

00006a7e <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    6a7e:	b480      	push	{r7}
    6a80:	b083      	sub	sp, #12
    6a82:	af00      	add	r7, sp, #0
    6a84:	6078      	str	r0, [r7, #4]
    6a86:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    6a88:	687b      	ldr	r3, [r7, #4]
    6a8a:	683a      	ldr	r2, [r7, #0]
    6a8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    6a90:	bf00      	nop
    6a92:	370c      	adds	r7, #12
    6a94:	46bd      	mov	sp, r7
    6a96:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a9a:	4770      	bx	lr

00006a9c <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    6a9c:	b480      	push	{r7}
    6a9e:	b083      	sub	sp, #12
    6aa0:	af00      	add	r7, sp, #0
    6aa2:	6078      	str	r0, [r7, #4]
    6aa4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    6aa6:	687b      	ldr	r3, [r7, #4]
    6aa8:	683a      	ldr	r2, [r7, #0]
    6aaa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6aae:	bf00      	nop
    6ab0:	370c      	adds	r7, #12
    6ab2:	46bd      	mov	sp, r7
    6ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ab8:	4770      	bx	lr

00006aba <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    6aba:	b480      	push	{r7}
    6abc:	b083      	sub	sp, #12
    6abe:	af00      	add	r7, sp, #0
    6ac0:	6078      	str	r0, [r7, #4]
    6ac2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    6ac4:	687b      	ldr	r3, [r7, #4]
    6ac6:	683a      	ldr	r2, [r7, #0]
    6ac8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    6acc:	bf00      	nop
    6ace:	370c      	adds	r7, #12
    6ad0:	46bd      	mov	sp, r7
    6ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ad6:	4770      	bx	lr

00006ad8 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    6ad8:	b480      	push	{r7}
    6ada:	b083      	sub	sp, #12
    6adc:	af00      	add	r7, sp, #0
    6ade:	6078      	str	r0, [r7, #4]
    6ae0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    6ae2:	687b      	ldr	r3, [r7, #4]
    6ae4:	683a      	ldr	r2, [r7, #0]
    6ae6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6aea:	bf00      	nop
    6aec:	370c      	adds	r7, #12
    6aee:	46bd      	mov	sp, r7
    6af0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6af4:	4770      	bx	lr

00006af6 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    6af6:	b480      	push	{r7}
    6af8:	b083      	sub	sp, #12
    6afa:	af00      	add	r7, sp, #0
    6afc:	6078      	str	r0, [r7, #4]
    6afe:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    6b00:	687b      	ldr	r3, [r7, #4]
    6b02:	683a      	ldr	r2, [r7, #0]
    6b04:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    6b08:	bf00      	nop
    6b0a:	370c      	adds	r7, #12
    6b0c:	46bd      	mov	sp, r7
    6b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b12:	4770      	bx	lr

00006b14 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    6b14:	b480      	push	{r7}
    6b16:	b083      	sub	sp, #12
    6b18:	af00      	add	r7, sp, #0
    6b1a:	6078      	str	r0, [r7, #4]
    6b1c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    6b1e:	687b      	ldr	r3, [r7, #4]
    6b20:	683a      	ldr	r2, [r7, #0]
    6b22:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6b26:	bf00      	nop
    6b28:	370c      	adds	r7, #12
    6b2a:	46bd      	mov	sp, r7
    6b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b30:	4770      	bx	lr
	...

00006b34 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    6b34:	b580      	push	{r7, lr}
    6b36:	b082      	sub	sp, #8
    6b38:	af00      	add	r7, sp, #0
    6b3a:	6078      	str	r0, [r7, #4]
    6b3c:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    6b3e:	687b      	ldr	r3, [r7, #4]
    6b40:	683a      	ldr	r2, [r7, #0]
    6b42:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	681b      	ldr	r3, [r3, #0]
    6b48:	4618      	mov	r0, r3
    6b4a:	4b55      	ldr	r3, [pc, #340]	; (6ca0 <_can_async_init+0x16c>)
    6b4c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    6b4e:	bf00      	nop
    6b50:	687b      	ldr	r3, [r7, #4]
    6b52:	681b      	ldr	r3, [r3, #0]
    6b54:	4618      	mov	r0, r3
    6b56:	4b53      	ldr	r3, [pc, #332]	; (6ca4 <_can_async_init+0x170>)
    6b58:	4798      	blx	r3
    6b5a:	4603      	mov	r3, r0
    6b5c:	f083 0301 	eor.w	r3, r3, #1
    6b60:	b2db      	uxtb	r3, r3
    6b62:	2b00      	cmp	r3, #0
    6b64:	d1f4      	bne.n	6b50 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    6b66:	687b      	ldr	r3, [r7, #4]
    6b68:	681b      	ldr	r3, [r3, #0]
    6b6a:	4618      	mov	r0, r3
    6b6c:	4b4e      	ldr	r3, [pc, #312]	; (6ca8 <_can_async_init+0x174>)
    6b6e:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    6b70:	683b      	ldr	r3, [r7, #0]
    6b72:	4a4e      	ldr	r2, [pc, #312]	; (6cac <_can_async_init+0x178>)
    6b74:	4293      	cmp	r3, r2
    6b76:	d17a      	bne.n	6c6e <_can_async_init+0x13a>
		_can1_dev    = dev;
    6b78:	4a4d      	ldr	r2, [pc, #308]	; (6cb0 <_can_async_init+0x17c>)
    6b7a:	687b      	ldr	r3, [r7, #4]
    6b7c:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    6b7e:	687b      	ldr	r3, [r7, #4]
    6b80:	4a4c      	ldr	r2, [pc, #304]	; (6cb4 <_can_async_init+0x180>)
    6b82:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    6b84:	687b      	ldr	r3, [r7, #4]
    6b86:	681b      	ldr	r3, [r3, #0]
    6b88:	f44f 7140 	mov.w	r1, #768	; 0x300
    6b8c:	4618      	mov	r0, r3
    6b8e:	4b4a      	ldr	r3, [pc, #296]	; (6cb8 <_can_async_init+0x184>)
    6b90:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    6b92:	687b      	ldr	r3, [r7, #4]
    6b94:	681b      	ldr	r3, [r3, #0]
    6b96:	2102      	movs	r1, #2
    6b98:	4618      	mov	r0, r3
    6b9a:	4b48      	ldr	r3, [pc, #288]	; (6cbc <_can_async_init+0x188>)
    6b9c:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    6b9e:	687b      	ldr	r3, [r7, #4]
    6ba0:	681b      	ldr	r3, [r3, #0]
    6ba2:	4947      	ldr	r1, [pc, #284]	; (6cc0 <_can_async_init+0x18c>)
    6ba4:	4618      	mov	r0, r3
    6ba6:	4b47      	ldr	r3, [pc, #284]	; (6cc4 <_can_async_init+0x190>)
    6ba8:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    6baa:	687b      	ldr	r3, [r7, #4]
    6bac:	681b      	ldr	r3, [r3, #0]
    6bae:	4946      	ldr	r1, [pc, #280]	; (6cc8 <_can_async_init+0x194>)
    6bb0:	4618      	mov	r0, r3
    6bb2:	4b46      	ldr	r3, [pc, #280]	; (6ccc <_can_async_init+0x198>)
    6bb4:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    6bb6:	687b      	ldr	r3, [r7, #4]
    6bb8:	681a      	ldr	r2, [r3, #0]
    6bba:	4b45      	ldr	r3, [pc, #276]	; (6cd0 <_can_async_init+0x19c>)
    6bbc:	b29b      	uxth	r3, r3
    6bbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6bc6:	4619      	mov	r1, r3
    6bc8:	4610      	mov	r0, r2
    6bca:	4b42      	ldr	r3, [pc, #264]	; (6cd4 <_can_async_init+0x1a0>)
    6bcc:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    6bce:	687b      	ldr	r3, [r7, #4]
    6bd0:	681b      	ldr	r3, [r3, #0]
    6bd2:	2107      	movs	r1, #7
    6bd4:	4618      	mov	r0, r3
    6bd6:	4b40      	ldr	r3, [pc, #256]	; (6cd8 <_can_async_init+0x1a4>)
    6bd8:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    6bda:	687b      	ldr	r3, [r7, #4]
    6bdc:	681b      	ldr	r3, [r3, #0]
    6bde:	2107      	movs	r1, #7
    6be0:	4618      	mov	r0, r3
    6be2:	4b3e      	ldr	r3, [pc, #248]	; (6cdc <_can_async_init+0x1a8>)
    6be4:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    6be6:	687b      	ldr	r3, [r7, #4]
    6be8:	681a      	ldr	r2, [r3, #0]
    6bea:	4b3d      	ldr	r3, [pc, #244]	; (6ce0 <_can_async_init+0x1ac>)
    6bec:	b29b      	uxth	r3, r3
    6bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    6bf2:	4619      	mov	r1, r3
    6bf4:	4610      	mov	r0, r2
    6bf6:	4b3b      	ldr	r3, [pc, #236]	; (6ce4 <_can_async_init+0x1b0>)
    6bf8:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    6bfa:	687b      	ldr	r3, [r7, #4]
    6bfc:	681a      	ldr	r2, [r3, #0]
    6bfe:	4b3a      	ldr	r3, [pc, #232]	; (6ce8 <_can_async_init+0x1b4>)
    6c00:	b29b      	uxth	r3, r3
    6c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6c06:	4619      	mov	r1, r3
    6c08:	4610      	mov	r0, r2
    6c0a:	4b38      	ldr	r3, [pc, #224]	; (6cec <_can_async_init+0x1b8>)
    6c0c:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    6c0e:	687b      	ldr	r3, [r7, #4]
    6c10:	681b      	ldr	r3, [r3, #0]
    6c12:	2108      	movs	r1, #8
    6c14:	4618      	mov	r0, r3
    6c16:	4b36      	ldr	r3, [pc, #216]	; (6cf0 <_can_async_init+0x1bc>)
    6c18:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    6c1a:	687b      	ldr	r3, [r7, #4]
    6c1c:	681a      	ldr	r2, [r3, #0]
    6c1e:	4b35      	ldr	r3, [pc, #212]	; (6cf4 <_can_async_init+0x1c0>)
    6c20:	b29b      	uxth	r3, r3
    6c22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    6c26:	4619      	mov	r1, r3
    6c28:	4610      	mov	r0, r2
    6c2a:	4b33      	ldr	r3, [pc, #204]	; (6cf8 <_can_async_init+0x1c4>)
    6c2c:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    6c2e:	687b      	ldr	r3, [r7, #4]
    6c30:	681a      	ldr	r2, [r3, #0]
    6c32:	4b32      	ldr	r3, [pc, #200]	; (6cfc <_can_async_init+0x1c8>)
    6c34:	b29b      	uxth	r3, r3
    6c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6c3a:	4619      	mov	r1, r3
    6c3c:	4610      	mov	r0, r2
    6c3e:	4b30      	ldr	r3, [pc, #192]	; (6d00 <_can_async_init+0x1cc>)
    6c40:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    6c42:	687b      	ldr	r3, [r7, #4]
    6c44:	681b      	ldr	r3, [r3, #0]
    6c46:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    6c4a:	4618      	mov	r0, r3
    6c4c:	4b2d      	ldr	r3, [pc, #180]	; (6d04 <_can_async_init+0x1d0>)
    6c4e:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    6c50:	204f      	movs	r0, #79	; 0x4f
    6c52:	4b2d      	ldr	r3, [pc, #180]	; (6d08 <_can_async_init+0x1d4>)
    6c54:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    6c56:	204f      	movs	r0, #79	; 0x4f
    6c58:	4b2c      	ldr	r3, [pc, #176]	; (6d0c <_can_async_init+0x1d8>)
    6c5a:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    6c5c:	204f      	movs	r0, #79	; 0x4f
    6c5e:	4b2c      	ldr	r3, [pc, #176]	; (6d10 <_can_async_init+0x1dc>)
    6c60:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    6c62:	687b      	ldr	r3, [r7, #4]
    6c64:	681b      	ldr	r3, [r3, #0]
    6c66:	2101      	movs	r1, #1
    6c68:	4618      	mov	r0, r3
    6c6a:	4b2a      	ldr	r3, [pc, #168]	; (6d14 <_can_async_init+0x1e0>)
    6c6c:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    6c6e:	687b      	ldr	r3, [r7, #4]
    6c70:	681b      	ldr	r3, [r3, #0]
    6c72:	4618      	mov	r0, r3
    6c74:	4b28      	ldr	r3, [pc, #160]	; (6d18 <_can_async_init+0x1e4>)
    6c76:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    6c78:	687b      	ldr	r3, [r7, #4]
    6c7a:	681b      	ldr	r3, [r3, #0]
    6c7c:	4618      	mov	r0, r3
    6c7e:	4b27      	ldr	r3, [pc, #156]	; (6d1c <_can_async_init+0x1e8>)
    6c80:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    6c82:	bf00      	nop
    6c84:	687b      	ldr	r3, [r7, #4]
    6c86:	681b      	ldr	r3, [r3, #0]
    6c88:	4618      	mov	r0, r3
    6c8a:	4b06      	ldr	r3, [pc, #24]	; (6ca4 <_can_async_init+0x170>)
    6c8c:	4798      	blx	r3
    6c8e:	4603      	mov	r3, r0
    6c90:	2b00      	cmp	r3, #0
    6c92:	d1f7      	bne.n	6c84 <_can_async_init+0x150>
	};

	return ERR_NONE;
    6c94:	2300      	movs	r3, #0
}
    6c96:	4618      	mov	r0, r3
    6c98:	3708      	adds	r7, #8
    6c9a:	46bd      	mov	sp, r7
    6c9c:	bd80      	pop	{r7, pc}
    6c9e:	bf00      	nop
    6ca0:	000068e9 	.word	0x000068e9
    6ca4:	00006909 	.word	0x00006909
    6ca8:	00006957 	.word	0x00006957
    6cac:	42000400 	.word	0x42000400
    6cb0:	20002f50 	.word	0x20002f50
    6cb4:	20000068 	.word	0x20000068
    6cb8:	00006997 	.word	0x00006997
    6cbc:	000068b1 	.word	0x000068b1
    6cc0:	00010c01 	.word	0x00010c01
    6cc4:	000069b9 	.word	0x000069b9
    6cc8:	00010c10 	.word	0x00010c10
    6ccc:	000068cd 	.word	0x000068cd
    6cd0:	20005190 	.word	0x20005190
    6cd4:	00006a9d 	.word	0x00006a9d
    6cd8:	00006abb 	.word	0x00006abb
    6cdc:	00006af7 	.word	0x00006af7
    6ce0:	20005148 	.word	0x20005148
    6ce4:	00006ad9 	.word	0x00006ad9
    6ce8:	20002eb0 	.word	0x20002eb0
    6cec:	00006b15 	.word	0x00006b15
    6cf0:	00006a25 	.word	0x00006a25
    6cf4:	20002ec0 	.word	0x20002ec0
    6cf8:	00006a43 	.word	0x00006a43
    6cfc:	20002f40 	.word	0x20002f40
    6d00:	00006a61 	.word	0x00006a61
    6d04:	00006a7f 	.word	0x00006a7f
    6d08:	00006809 	.word	0x00006809
    6d0c:	0000684d 	.word	0x0000684d
    6d10:	000067cd 	.word	0x000067cd
    6d14:	00006a09 	.word	0x00006a09
    6d18:	00006977 	.word	0x00006977
    6d1c:	00006937 	.word	0x00006937

00006d20 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    6d20:	b590      	push	{r4, r7, lr}
    6d22:	b083      	sub	sp, #12
    6d24:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    6d26:	4b2c      	ldr	r3, [pc, #176]	; (6dd8 <CAN1_Handler+0xb8>)
    6d28:	681b      	ldr	r3, [r3, #0]
    6d2a:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    6d2c:	687b      	ldr	r3, [r7, #4]
    6d2e:	681b      	ldr	r3, [r3, #0]
    6d30:	4618      	mov	r0, r3
    6d32:	4b2a      	ldr	r3, [pc, #168]	; (6ddc <CAN1_Handler+0xbc>)
    6d34:	4798      	blx	r3
    6d36:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    6d38:	683b      	ldr	r3, [r7, #0]
    6d3a:	f003 0301 	and.w	r3, r3, #1
    6d3e:	2b00      	cmp	r3, #0
    6d40:	d003      	beq.n	6d4a <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    6d42:	687b      	ldr	r3, [r7, #4]
    6d44:	689b      	ldr	r3, [r3, #8]
    6d46:	6878      	ldr	r0, [r7, #4]
    6d48:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    6d4a:	683b      	ldr	r3, [r7, #0]
    6d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    6d50:	2b00      	cmp	r3, #0
    6d52:	d003      	beq.n	6d5c <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    6d54:	687b      	ldr	r3, [r7, #4]
    6d56:	685b      	ldr	r3, [r3, #4]
    6d58:	6878      	ldr	r0, [r7, #4]
    6d5a:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    6d5c:	683b      	ldr	r3, [r7, #0]
    6d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    6d62:	2b00      	cmp	r3, #0
    6d64:	d004      	beq.n	6d70 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    6d66:	687b      	ldr	r3, [r7, #4]
    6d68:	68db      	ldr	r3, [r3, #12]
    6d6a:	2103      	movs	r1, #3
    6d6c:	6878      	ldr	r0, [r7, #4]
    6d6e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    6d70:	683b      	ldr	r3, [r7, #0]
    6d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    6d76:	2b00      	cmp	r3, #0
    6d78:	d004      	beq.n	6d84 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    6d7a:	687b      	ldr	r3, [r7, #4]
    6d7c:	68db      	ldr	r3, [r3, #12]
    6d7e:	2100      	movs	r1, #0
    6d80:	6878      	ldr	r0, [r7, #4]
    6d82:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    6d84:	683b      	ldr	r3, [r7, #0]
    6d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    6d8a:	2b00      	cmp	r3, #0
    6d8c:	d00f      	beq.n	6dae <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    6d8e:	687b      	ldr	r3, [r7, #4]
    6d90:	68dc      	ldr	r4, [r3, #12]
    6d92:	687b      	ldr	r3, [r7, #4]
    6d94:	681b      	ldr	r3, [r3, #0]
    6d96:	4618      	mov	r0, r3
    6d98:	4b11      	ldr	r3, [pc, #68]	; (6de0 <CAN1_Handler+0xc0>)
    6d9a:	4798      	blx	r3
    6d9c:	4603      	mov	r3, r0
    6d9e:	2b00      	cmp	r3, #0
    6da0:	d001      	beq.n	6da6 <CAN1_Handler+0x86>
    6da2:	2302      	movs	r3, #2
    6da4:	e000      	b.n	6da8 <CAN1_Handler+0x88>
    6da6:	2301      	movs	r3, #1
    6da8:	4619      	mov	r1, r3
    6daa:	6878      	ldr	r0, [r7, #4]
    6dac:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    6dae:	683b      	ldr	r3, [r7, #0]
    6db0:	f003 0308 	and.w	r3, r3, #8
    6db4:	2b00      	cmp	r3, #0
    6db6:	d004      	beq.n	6dc2 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	68db      	ldr	r3, [r3, #12]
    6dbc:	2104      	movs	r1, #4
    6dbe:	6878      	ldr	r0, [r7, #4]
    6dc0:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    6dc2:	687b      	ldr	r3, [r7, #4]
    6dc4:	681b      	ldr	r3, [r3, #0]
    6dc6:	6839      	ldr	r1, [r7, #0]
    6dc8:	4618      	mov	r0, r3
    6dca:	4b06      	ldr	r3, [pc, #24]	; (6de4 <CAN1_Handler+0xc4>)
    6dcc:	4798      	blx	r3
}
    6dce:	bf00      	nop
    6dd0:	370c      	adds	r7, #12
    6dd2:	46bd      	mov	sp, r7
    6dd4:	bd90      	pop	{r4, r7, pc}
    6dd6:	bf00      	nop
    6dd8:	20002f50 	.word	0x20002f50
    6ddc:	000069f1 	.word	0x000069f1
    6de0:	00006889 	.word	0x00006889
    6de4:	000069d5 	.word	0x000069d5

00006de8 <__NVIC_SetPendingIRQ>:
{
    6de8:	b480      	push	{r7}
    6dea:	b083      	sub	sp, #12
    6dec:	af00      	add	r7, sp, #0
    6dee:	4603      	mov	r3, r0
    6df0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6df6:	2b00      	cmp	r3, #0
    6df8:	db0c      	blt.n	6e14 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6dfa:	4909      	ldr	r1, [pc, #36]	; (6e20 <__NVIC_SetPendingIRQ+0x38>)
    6dfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6e00:	095b      	lsrs	r3, r3, #5
    6e02:	88fa      	ldrh	r2, [r7, #6]
    6e04:	f002 021f 	and.w	r2, r2, #31
    6e08:	2001      	movs	r0, #1
    6e0a:	fa00 f202 	lsl.w	r2, r0, r2
    6e0e:	3340      	adds	r3, #64	; 0x40
    6e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e14:	bf00      	nop
    6e16:	370c      	adds	r7, #12
    6e18:	46bd      	mov	sp, r7
    6e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e1e:	4770      	bx	lr
    6e20:	e000e100 	.word	0xe000e100

00006e24 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    6e24:	b580      	push	{r7, lr}
    6e26:	b082      	sub	sp, #8
    6e28:	af00      	add	r7, sp, #0
    6e2a:	4603      	mov	r3, r0
    6e2c:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    6e2e:	79fb      	ldrb	r3, [r7, #7]
    6e30:	b21b      	sxth	r3, r3
    6e32:	4618      	mov	r0, r3
    6e34:	4b02      	ldr	r3, [pc, #8]	; (6e40 <_irq_set+0x1c>)
    6e36:	4798      	blx	r3
}
    6e38:	bf00      	nop
    6e3a:	3708      	adds	r7, #8
    6e3c:	46bd      	mov	sp, r7
    6e3e:	bd80      	pop	{r7, pc}
    6e40:	00006de9 	.word	0x00006de9

00006e44 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    6e44:	b480      	push	{r7}
    6e46:	b083      	sub	sp, #12
    6e48:	af00      	add	r7, sp, #0
    6e4a:	4603      	mov	r3, r0
    6e4c:	6039      	str	r1, [r7, #0]
    6e4e:	80fb      	strh	r3, [r7, #6]
    6e50:	4613      	mov	r3, r2
    6e52:	717b      	strb	r3, [r7, #5]
	switch (power) {
    6e54:	797b      	ldrb	r3, [r7, #5]
    6e56:	3b04      	subs	r3, #4
    6e58:	2b05      	cmp	r3, #5
    6e5a:	d86b      	bhi.n	6f34 <_get_cycles_for_us_internal+0xf0>
    6e5c:	a201      	add	r2, pc, #4	; (adr r2, 6e64 <_get_cycles_for_us_internal+0x20>)
    6e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6e62:	bf00      	nop
    6e64:	00006f13 	.word	0x00006f13
    6e68:	00006ef3 	.word	0x00006ef3
    6e6c:	00006ed5 	.word	0x00006ed5
    6e70:	00006eb7 	.word	0x00006eb7
    6e74:	00006e99 	.word	0x00006e99
    6e78:	00006e7d 	.word	0x00006e7d
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    6e7c:	88fb      	ldrh	r3, [r7, #6]
    6e7e:	683a      	ldr	r2, [r7, #0]
    6e80:	4935      	ldr	r1, [pc, #212]	; (6f58 <_get_cycles_for_us_internal+0x114>)
    6e82:	fba1 1202 	umull	r1, r2, r1, r2
    6e86:	0c92      	lsrs	r2, r2, #18
    6e88:	fb02 f303 	mul.w	r3, r2, r3
    6e8c:	3302      	adds	r3, #2
    6e8e:	4a33      	ldr	r2, [pc, #204]	; (6f5c <_get_cycles_for_us_internal+0x118>)
    6e90:	fba2 2303 	umull	r2, r3, r2, r3
    6e94:	085b      	lsrs	r3, r3, #1
    6e96:	e059      	b.n	6f4c <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    6e98:	88fb      	ldrh	r3, [r7, #6]
    6e9a:	683a      	ldr	r2, [r7, #0]
    6e9c:	0952      	lsrs	r2, r2, #5
    6e9e:	4930      	ldr	r1, [pc, #192]	; (6f60 <_get_cycles_for_us_internal+0x11c>)
    6ea0:	fba1 1202 	umull	r1, r2, r1, r2
    6ea4:	09d2      	lsrs	r2, r2, #7
    6ea6:	fb02 f303 	mul.w	r3, r2, r3
    6eaa:	331d      	adds	r3, #29
    6eac:	4a2d      	ldr	r2, [pc, #180]	; (6f64 <_get_cycles_for_us_internal+0x120>)
    6eae:	fba2 2303 	umull	r2, r3, r2, r3
    6eb2:	091b      	lsrs	r3, r3, #4
    6eb4:	e04a      	b.n	6f4c <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    6eb6:	88fb      	ldrh	r3, [r7, #6]
    6eb8:	683a      	ldr	r2, [r7, #0]
    6eba:	492b      	ldr	r1, [pc, #172]	; (6f68 <_get_cycles_for_us_internal+0x124>)
    6ebc:	fba1 1202 	umull	r1, r2, r1, r2
    6ec0:	0b52      	lsrs	r2, r2, #13
    6ec2:	fb02 f303 	mul.w	r3, r2, r3
    6ec6:	f203 132b 	addw	r3, r3, #299	; 0x12b
    6eca:	4a28      	ldr	r2, [pc, #160]	; (6f6c <_get_cycles_for_us_internal+0x128>)
    6ecc:	fba2 2303 	umull	r2, r3, r2, r3
    6ed0:	095b      	lsrs	r3, r3, #5
    6ed2:	e03b      	b.n	6f4c <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    6ed4:	88fb      	ldrh	r3, [r7, #6]
    6ed6:	683a      	ldr	r2, [r7, #0]
    6ed8:	4925      	ldr	r1, [pc, #148]	; (6f70 <_get_cycles_for_us_internal+0x12c>)
    6eda:	fba1 1202 	umull	r1, r2, r1, r2
    6ede:	0992      	lsrs	r2, r2, #6
    6ee0:	fb02 f303 	mul.w	r3, r2, r3
    6ee4:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    6ee8:	4a22      	ldr	r2, [pc, #136]	; (6f74 <_get_cycles_for_us_internal+0x130>)
    6eea:	fba2 2303 	umull	r2, r3, r2, r3
    6eee:	099b      	lsrs	r3, r3, #6
    6ef0:	e02c      	b.n	6f4c <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    6ef2:	88fb      	ldrh	r3, [r7, #6]
    6ef4:	683a      	ldr	r2, [r7, #0]
    6ef6:	4920      	ldr	r1, [pc, #128]	; (6f78 <_get_cycles_for_us_internal+0x134>)
    6ef8:	fba1 1202 	umull	r1, r2, r1, r2
    6efc:	0952      	lsrs	r2, r2, #5
    6efe:	fb02 f303 	mul.w	r3, r2, r3
    6f02:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    6f06:	332f      	adds	r3, #47	; 0x2f
    6f08:	4a1c      	ldr	r2, [pc, #112]	; (6f7c <_get_cycles_for_us_internal+0x138>)
    6f0a:	fba2 2303 	umull	r2, r3, r2, r3
    6f0e:	0b5b      	lsrs	r3, r3, #13
    6f10:	e01c      	b.n	6f4c <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    6f12:	88fb      	ldrh	r3, [r7, #6]
    6f14:	683a      	ldr	r2, [r7, #0]
    6f16:	491a      	ldr	r1, [pc, #104]	; (6f80 <_get_cycles_for_us_internal+0x13c>)
    6f18:	fba1 1202 	umull	r1, r2, r1, r2
    6f1c:	08d2      	lsrs	r2, r2, #3
    6f1e:	fb02 f303 	mul.w	r3, r2, r3
    6f22:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    6f26:	f203 33df 	addw	r3, r3, #991	; 0x3df
    6f2a:	4a16      	ldr	r2, [pc, #88]	; (6f84 <_get_cycles_for_us_internal+0x140>)
    6f2c:	fba2 2303 	umull	r2, r3, r2, r3
    6f30:	0c5b      	lsrs	r3, r3, #17
    6f32:	e00b      	b.n	6f4c <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    6f34:	88fb      	ldrh	r3, [r7, #6]
    6f36:	683a      	ldr	r2, [r7, #0]
    6f38:	fb02 f303 	mul.w	r3, r2, r3
    6f3c:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    6f40:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    6f44:	4a10      	ldr	r2, [pc, #64]	; (6f88 <_get_cycles_for_us_internal+0x144>)
    6f46:	fba2 2303 	umull	r2, r3, r2, r3
    6f4a:	0c9b      	lsrs	r3, r3, #18
	}
}
    6f4c:	4618      	mov	r0, r3
    6f4e:	370c      	adds	r7, #12
    6f50:	46bd      	mov	sp, r7
    6f52:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f56:	4770      	bx	lr
    6f58:	431bde83 	.word	0x431bde83
    6f5c:	aaaaaaab 	.word	0xaaaaaaab
    6f60:	0a7c5ac5 	.word	0x0a7c5ac5
    6f64:	88888889 	.word	0x88888889
    6f68:	d1b71759 	.word	0xd1b71759
    6f6c:	1b4e81b5 	.word	0x1b4e81b5
    6f70:	10624dd3 	.word	0x10624dd3
    6f74:	057619f1 	.word	0x057619f1
    6f78:	51eb851f 	.word	0x51eb851f
    6f7c:	45e7b273 	.word	0x45e7b273
    6f80:	cccccccd 	.word	0xcccccccd
    6f84:	6fd91d85 	.word	0x6fd91d85
    6f88:	165e9f81 	.word	0x165e9f81

00006f8c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    6f8c:	b580      	push	{r7, lr}
    6f8e:	b082      	sub	sp, #8
    6f90:	af00      	add	r7, sp, #0
    6f92:	4603      	mov	r3, r0
    6f94:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    6f96:	88fb      	ldrh	r3, [r7, #6]
    6f98:	2209      	movs	r2, #9
    6f9a:	4904      	ldr	r1, [pc, #16]	; (6fac <_get_cycles_for_us+0x20>)
    6f9c:	4618      	mov	r0, r3
    6f9e:	4b04      	ldr	r3, [pc, #16]	; (6fb0 <_get_cycles_for_us+0x24>)
    6fa0:	4798      	blx	r3
    6fa2:	4603      	mov	r3, r0
}
    6fa4:	4618      	mov	r0, r3
    6fa6:	3708      	adds	r7, #8
    6fa8:	46bd      	mov	sp, r7
    6faa:	bd80      	pop	{r7, pc}
    6fac:	07270e00 	.word	0x07270e00
    6fb0:	00006e45 	.word	0x00006e45

00006fb4 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    6fb4:	b480      	push	{r7}
    6fb6:	b083      	sub	sp, #12
    6fb8:	af00      	add	r7, sp, #0
    6fba:	4603      	mov	r3, r0
    6fbc:	6039      	str	r1, [r7, #0]
    6fbe:	80fb      	strh	r3, [r7, #6]
    6fc0:	4613      	mov	r3, r2
    6fc2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    6fc4:	797b      	ldrb	r3, [r7, #5]
    6fc6:	3b04      	subs	r3, #4
    6fc8:	2b05      	cmp	r3, #5
    6fca:	d870      	bhi.n	70ae <_get_cycles_for_ms_internal+0xfa>
    6fcc:	a201      	add	r2, pc, #4	; (adr r2, 6fd4 <_get_cycles_for_ms_internal+0x20>)
    6fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6fd2:	bf00      	nop
    6fd4:	00007091 	.word	0x00007091
    6fd8:	00007075 	.word	0x00007075
    6fdc:	00007059 	.word	0x00007059
    6fe0:	00007035 	.word	0x00007035
    6fe4:	00007011 	.word	0x00007011
    6fe8:	00006fed 	.word	0x00006fed
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    6fec:	88fb      	ldrh	r3, [r7, #6]
    6fee:	683a      	ldr	r2, [r7, #0]
    6ff0:	4937      	ldr	r1, [pc, #220]	; (70d0 <_get_cycles_for_ms_internal+0x11c>)
    6ff2:	fba1 1202 	umull	r1, r2, r1, r2
    6ff6:	0c92      	lsrs	r2, r2, #18
    6ff8:	fb02 f303 	mul.w	r3, r2, r3
    6ffc:	3302      	adds	r3, #2
    6ffe:	4a35      	ldr	r2, [pc, #212]	; (70d4 <_get_cycles_for_ms_internal+0x120>)
    7000:	fba2 2303 	umull	r2, r3, r2, r3
    7004:	085b      	lsrs	r3, r3, #1
    7006:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    700a:	fb02 f303 	mul.w	r3, r2, r3
    700e:	e058      	b.n	70c2 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    7010:	88fb      	ldrh	r3, [r7, #6]
    7012:	683a      	ldr	r2, [r7, #0]
    7014:	0952      	lsrs	r2, r2, #5
    7016:	4930      	ldr	r1, [pc, #192]	; (70d8 <_get_cycles_for_ms_internal+0x124>)
    7018:	fba1 1202 	umull	r1, r2, r1, r2
    701c:	09d2      	lsrs	r2, r2, #7
    701e:	fb02 f303 	mul.w	r3, r2, r3
    7022:	3302      	adds	r3, #2
    7024:	4a2b      	ldr	r2, [pc, #172]	; (70d4 <_get_cycles_for_ms_internal+0x120>)
    7026:	fba2 2303 	umull	r2, r3, r2, r3
    702a:	085b      	lsrs	r3, r3, #1
    702c:	2264      	movs	r2, #100	; 0x64
    702e:	fb02 f303 	mul.w	r3, r2, r3
    7032:	e046      	b.n	70c2 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    7034:	88fb      	ldrh	r3, [r7, #6]
    7036:	683a      	ldr	r2, [r7, #0]
    7038:	4928      	ldr	r1, [pc, #160]	; (70dc <_get_cycles_for_ms_internal+0x128>)
    703a:	fba1 1202 	umull	r1, r2, r1, r2
    703e:	0b52      	lsrs	r2, r2, #13
    7040:	fb02 f303 	mul.w	r3, r2, r3
    7044:	3302      	adds	r3, #2
    7046:	4a23      	ldr	r2, [pc, #140]	; (70d4 <_get_cycles_for_ms_internal+0x120>)
    7048:	fba2 2303 	umull	r2, r3, r2, r3
    704c:	085a      	lsrs	r2, r3, #1
    704e:	4613      	mov	r3, r2
    7050:	009b      	lsls	r3, r3, #2
    7052:	4413      	add	r3, r2
    7054:	005b      	lsls	r3, r3, #1
    7056:	e034      	b.n	70c2 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    7058:	88fb      	ldrh	r3, [r7, #6]
    705a:	683a      	ldr	r2, [r7, #0]
    705c:	4920      	ldr	r1, [pc, #128]	; (70e0 <_get_cycles_for_ms_internal+0x12c>)
    705e:	fba1 1202 	umull	r1, r2, r1, r2
    7062:	0992      	lsrs	r2, r2, #6
    7064:	fb02 f303 	mul.w	r3, r2, r3
    7068:	3302      	adds	r3, #2
    706a:	4a1a      	ldr	r2, [pc, #104]	; (70d4 <_get_cycles_for_ms_internal+0x120>)
    706c:	fba2 2303 	umull	r2, r3, r2, r3
    7070:	085b      	lsrs	r3, r3, #1
    7072:	e026      	b.n	70c2 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    7074:	88fb      	ldrh	r3, [r7, #6]
    7076:	683a      	ldr	r2, [r7, #0]
    7078:	491a      	ldr	r1, [pc, #104]	; (70e4 <_get_cycles_for_ms_internal+0x130>)
    707a:	fba1 1202 	umull	r1, r2, r1, r2
    707e:	0952      	lsrs	r2, r2, #5
    7080:	fb02 f303 	mul.w	r3, r2, r3
    7084:	331d      	adds	r3, #29
    7086:	4a18      	ldr	r2, [pc, #96]	; (70e8 <_get_cycles_for_ms_internal+0x134>)
    7088:	fba2 2303 	umull	r2, r3, r2, r3
    708c:	091b      	lsrs	r3, r3, #4
    708e:	e018      	b.n	70c2 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    7090:	88fb      	ldrh	r3, [r7, #6]
    7092:	683a      	ldr	r2, [r7, #0]
    7094:	4915      	ldr	r1, [pc, #84]	; (70ec <_get_cycles_for_ms_internal+0x138>)
    7096:	fba1 1202 	umull	r1, r2, r1, r2
    709a:	08d2      	lsrs	r2, r2, #3
    709c:	fb02 f303 	mul.w	r3, r2, r3
    70a0:	f203 132b 	addw	r3, r3, #299	; 0x12b
    70a4:	4a12      	ldr	r2, [pc, #72]	; (70f0 <_get_cycles_for_ms_internal+0x13c>)
    70a6:	fba2 2303 	umull	r2, r3, r2, r3
    70aa:	095b      	lsrs	r3, r3, #5
    70ac:	e009      	b.n	70c2 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    70ae:	88fb      	ldrh	r3, [r7, #6]
    70b0:	683a      	ldr	r2, [r7, #0]
    70b2:	fb02 f303 	mul.w	r3, r2, r3
    70b6:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    70ba:	4a0e      	ldr	r2, [pc, #56]	; (70f4 <_get_cycles_for_ms_internal+0x140>)
    70bc:	fba2 2303 	umull	r2, r3, r2, r3
    70c0:	099b      	lsrs	r3, r3, #6
	}
}
    70c2:	4618      	mov	r0, r3
    70c4:	370c      	adds	r7, #12
    70c6:	46bd      	mov	sp, r7
    70c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    70cc:	4770      	bx	lr
    70ce:	bf00      	nop
    70d0:	431bde83 	.word	0x431bde83
    70d4:	aaaaaaab 	.word	0xaaaaaaab
    70d8:	0a7c5ac5 	.word	0x0a7c5ac5
    70dc:	d1b71759 	.word	0xd1b71759
    70e0:	10624dd3 	.word	0x10624dd3
    70e4:	51eb851f 	.word	0x51eb851f
    70e8:	88888889 	.word	0x88888889
    70ec:	cccccccd 	.word	0xcccccccd
    70f0:	1b4e81b5 	.word	0x1b4e81b5
    70f4:	057619f1 	.word	0x057619f1

000070f8 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    70f8:	b580      	push	{r7, lr}
    70fa:	b082      	sub	sp, #8
    70fc:	af00      	add	r7, sp, #0
    70fe:	4603      	mov	r3, r0
    7100:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    7102:	88fb      	ldrh	r3, [r7, #6]
    7104:	2209      	movs	r2, #9
    7106:	4904      	ldr	r1, [pc, #16]	; (7118 <_get_cycles_for_ms+0x20>)
    7108:	4618      	mov	r0, r3
    710a:	4b04      	ldr	r3, [pc, #16]	; (711c <_get_cycles_for_ms+0x24>)
    710c:	4798      	blx	r3
    710e:	4603      	mov	r3, r0
}
    7110:	4618      	mov	r0, r3
    7112:	3708      	adds	r7, #8
    7114:	46bd      	mov	sp, r7
    7116:	bd80      	pop	{r7, pc}
    7118:	07270e00 	.word	0x07270e00
    711c:	00006fb5 	.word	0x00006fb5

00007120 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    7120:	b480      	push	{r7}
    7122:	b083      	sub	sp, #12
    7124:	af00      	add	r7, sp, #0
    7126:	6078      	str	r0, [r7, #4]
    7128:	6039      	str	r1, [r7, #0]
    712a:	bf00      	nop
    712c:	f3af 8000 	nop.w

00007130 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    7130:	3901      	subs	r1, #1
    7132:	d8fd      	bhi.n	7130 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    7134:	bf00      	nop
    7136:	370c      	adds	r7, #12
    7138:	46bd      	mov	sp, r7
    713a:	f85d 7b04 	ldr.w	r7, [sp], #4
    713e:	4770      	bx	lr

00007140 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    7140:	b480      	push	{r7}
    7142:	b083      	sub	sp, #12
    7144:	af00      	add	r7, sp, #0
    7146:	6078      	str	r0, [r7, #4]
    7148:	460b      	mov	r3, r1
    714a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    714c:	687b      	ldr	r3, [r7, #4]
    714e:	881b      	ldrh	r3, [r3, #0]
    7150:	b29a      	uxth	r2, r3
    7152:	887b      	ldrh	r3, [r7, #2]
    7154:	021b      	lsls	r3, r3, #8
    7156:	b29b      	uxth	r3, r3
    7158:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    715c:	b29b      	uxth	r3, r3
    715e:	4313      	orrs	r3, r2
    7160:	b29a      	uxth	r2, r3
    7162:	687b      	ldr	r3, [r7, #4]
    7164:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    7166:	bf00      	nop
    7168:	370c      	adds	r7, #12
    716a:	46bd      	mov	sp, r7
    716c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7170:	4770      	bx	lr

00007172 <hri_port_set_EVCTRL_reg>:
{
    7172:	b480      	push	{r7}
    7174:	b085      	sub	sp, #20
    7176:	af00      	add	r7, sp, #0
    7178:	60f8      	str	r0, [r7, #12]
    717a:	460b      	mov	r3, r1
    717c:	607a      	str	r2, [r7, #4]
    717e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    7180:	7afb      	ldrb	r3, [r7, #11]
    7182:	7afa      	ldrb	r2, [r7, #11]
    7184:	68f9      	ldr	r1, [r7, #12]
    7186:	01d2      	lsls	r2, r2, #7
    7188:	440a      	add	r2, r1
    718a:	322c      	adds	r2, #44	; 0x2c
    718c:	6811      	ldr	r1, [r2, #0]
    718e:	687a      	ldr	r2, [r7, #4]
    7190:	430a      	orrs	r2, r1
    7192:	68f9      	ldr	r1, [r7, #12]
    7194:	01db      	lsls	r3, r3, #7
    7196:	440b      	add	r3, r1
    7198:	332c      	adds	r3, #44	; 0x2c
    719a:	601a      	str	r2, [r3, #0]
}
    719c:	bf00      	nop
    719e:	3714      	adds	r7, #20
    71a0:	46bd      	mov	sp, r7
    71a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    71a6:	4770      	bx	lr

000071a8 <_port_event_init>:

static inline void _port_event_init()
{
    71a8:	b580      	push	{r7, lr}
    71aa:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    71ac:	2200      	movs	r2, #0
    71ae:	2100      	movs	r1, #0
    71b0:	4809      	ldr	r0, [pc, #36]	; (71d8 <_port_event_init+0x30>)
    71b2:	4b0a      	ldr	r3, [pc, #40]	; (71dc <_port_event_init+0x34>)
    71b4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    71b6:	2200      	movs	r2, #0
    71b8:	2101      	movs	r1, #1
    71ba:	4807      	ldr	r0, [pc, #28]	; (71d8 <_port_event_init+0x30>)
    71bc:	4b07      	ldr	r3, [pc, #28]	; (71dc <_port_event_init+0x34>)
    71be:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    71c0:	22ef      	movs	r2, #239	; 0xef
    71c2:	2102      	movs	r1, #2
    71c4:	4804      	ldr	r0, [pc, #16]	; (71d8 <_port_event_init+0x30>)
    71c6:	4b05      	ldr	r3, [pc, #20]	; (71dc <_port_event_init+0x34>)
    71c8:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    71ca:	2200      	movs	r2, #0
    71cc:	2103      	movs	r1, #3
    71ce:	4802      	ldr	r0, [pc, #8]	; (71d8 <_port_event_init+0x30>)
    71d0:	4b02      	ldr	r3, [pc, #8]	; (71dc <_port_event_init+0x34>)
    71d2:	4798      	blx	r3
}
    71d4:	bf00      	nop
    71d6:	bd80      	pop	{r7, pc}
    71d8:	41008000 	.word	0x41008000
    71dc:	00007173 	.word	0x00007173

000071e0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    71e0:	b580      	push	{r7, lr}
    71e2:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    71e4:	2104      	movs	r1, #4
    71e6:	480b      	ldr	r0, [pc, #44]	; (7214 <_init_chip+0x34>)
    71e8:	4b0b      	ldr	r3, [pc, #44]	; (7218 <_init_chip+0x38>)
    71ea:	4798      	blx	r3

	_osc32kctrl_init_sources();
    71ec:	4b0b      	ldr	r3, [pc, #44]	; (721c <_init_chip+0x3c>)
    71ee:	4798      	blx	r3
	_oscctrl_init_sources();
    71f0:	4b0b      	ldr	r3, [pc, #44]	; (7220 <_init_chip+0x40>)
    71f2:	4798      	blx	r3
	_mclk_init();
    71f4:	4b0b      	ldr	r3, [pc, #44]	; (7224 <_init_chip+0x44>)
    71f6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    71f8:	f44f 6084 	mov.w	r0, #1056	; 0x420
    71fc:	4b0a      	ldr	r3, [pc, #40]	; (7228 <_init_chip+0x48>)
    71fe:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    7200:	4b0a      	ldr	r3, [pc, #40]	; (722c <_init_chip+0x4c>)
    7202:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    7204:	f640 30df 	movw	r0, #3039	; 0xbdf
    7208:	4b07      	ldr	r3, [pc, #28]	; (7228 <_init_chip+0x48>)
    720a:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    720c:	4b08      	ldr	r3, [pc, #32]	; (7230 <_init_chip+0x50>)
    720e:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    7210:	bf00      	nop
    7212:	bd80      	pop	{r7, pc}
    7214:	41004000 	.word	0x41004000
    7218:	00007141 	.word	0x00007141
    721c:	00007ec1 	.word	0x00007ec1
    7220:	00008389 	.word	0x00008389
    7224:	00007de1 	.word	0x00007de1
    7228:	00007ca1 	.word	0x00007ca1
    722c:	000083c9 	.word	0x000083c9
    7230:	000071a9 	.word	0x000071a9

00007234 <hri_dsu_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
    7234:	b480      	push	{r7}
    7236:	b083      	sub	sp, #12
    7238:	af00      	add	r7, sp, #0
    723a:	6078      	str	r0, [r7, #4]
    723c:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    723e:	687b      	ldr	r3, [r7, #4]
    7240:	683a      	ldr	r2, [r7, #0]
    7242:	605a      	str	r2, [r3, #4]
	DSU_CRITICAL_SECTION_LEAVE();
}
    7244:	bf00      	nop
    7246:	370c      	adds	r7, #12
    7248:	46bd      	mov	sp, r7
    724a:	f85d 7b04 	ldr.w	r7, [sp], #4
    724e:	4770      	bx	lr

00007250 <hri_dsu_write_LENGTH_LENGTH_bf>:
	tmp = (tmp & DSU_LENGTH_LENGTH(mask)) >> DSU_LENGTH_LENGTH_Pos;
	return tmp;
}

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
    7250:	b480      	push	{r7}
    7252:	b085      	sub	sp, #20
    7254:	af00      	add	r7, sp, #0
    7256:	6078      	str	r0, [r7, #4]
    7258:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    725a:	687b      	ldr	r3, [r7, #4]
    725c:	689b      	ldr	r3, [r3, #8]
    725e:	60fb      	str	r3, [r7, #12]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    7260:	68fb      	ldr	r3, [r7, #12]
    7262:	f003 0303 	and.w	r3, r3, #3
    7266:	60fb      	str	r3, [r7, #12]
	tmp |= DSU_LENGTH_LENGTH(data);
    7268:	683b      	ldr	r3, [r7, #0]
    726a:	009b      	lsls	r3, r3, #2
    726c:	68fa      	ldr	r2, [r7, #12]
    726e:	4313      	orrs	r3, r2
    7270:	60fb      	str	r3, [r7, #12]
	((Dsu *)hw)->LENGTH.reg = tmp;
    7272:	687b      	ldr	r3, [r7, #4]
    7274:	68fa      	ldr	r2, [r7, #12]
    7276:	609a      	str	r2, [r3, #8]
	DSU_CRITICAL_SECTION_LEAVE();
}
    7278:	bf00      	nop
    727a:	3714      	adds	r7, #20
    727c:	46bd      	mov	sp, r7
    727e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7282:	4770      	bx	lr

00007284 <hri_dsu_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
    7284:	b480      	push	{r7}
    7286:	b083      	sub	sp, #12
    7288:	af00      	add	r7, sp, #0
    728a:	6078      	str	r0, [r7, #4]
    728c:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    728e:	687b      	ldr	r3, [r7, #4]
    7290:	683a      	ldr	r2, [r7, #0]
    7292:	60da      	str	r2, [r3, #12]
	DSU_CRITICAL_SECTION_LEAVE();
}
    7294:	bf00      	nop
    7296:	370c      	adds	r7, #12
    7298:	46bd      	mov	sp, r7
    729a:	f85d 7b04 	ldr.w	r7, [sp], #4
    729e:	4770      	bx	lr

000072a0 <hri_dsu_read_DATA_reg>:
	((Dsu *)hw)->DATA.reg ^= mask;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline hri_dsu_data_reg_t hri_dsu_read_DATA_reg(const void *const hw)
{
    72a0:	b480      	push	{r7}
    72a2:	b083      	sub	sp, #12
    72a4:	af00      	add	r7, sp, #0
    72a6:	6078      	str	r0, [r7, #4]
	return ((Dsu *)hw)->DATA.reg;
    72a8:	687b      	ldr	r3, [r7, #4]
    72aa:	68db      	ldr	r3, [r3, #12]
}
    72ac:	4618      	mov	r0, r3
    72ae:	370c      	adds	r7, #12
    72b0:	46bd      	mov	sp, r7
    72b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    72b6:	4770      	bx	lr

000072b8 <hri_dsu_get_STATUSA_DONE_bit>:
{
	return ((Dsu *)hw)->CFG.reg;
}

static inline bool hri_dsu_get_STATUSA_DONE_bit(const void *const hw)
{
    72b8:	b480      	push	{r7}
    72ba:	b083      	sub	sp, #12
    72bc:	af00      	add	r7, sp, #0
    72be:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    72c0:	687b      	ldr	r3, [r7, #4]
    72c2:	785b      	ldrb	r3, [r3, #1]
    72c4:	b2db      	uxtb	r3, r3
    72c6:	f003 0301 	and.w	r3, r3, #1
    72ca:	2b00      	cmp	r3, #0
    72cc:	bf14      	ite	ne
    72ce:	2301      	movne	r3, #1
    72d0:	2300      	moveq	r3, #0
    72d2:	b2db      	uxtb	r3, r3
}
    72d4:	4618      	mov	r0, r3
    72d6:	370c      	adds	r7, #12
    72d8:	46bd      	mov	sp, r7
    72da:	f85d 7b04 	ldr.w	r7, [sp], #4
    72de:	4770      	bx	lr

000072e0 <hri_dsu_clear_STATUSA_DONE_bit>:

static inline void hri_dsu_clear_STATUSA_DONE_bit(const void *const hw)
{
    72e0:	b480      	push	{r7}
    72e2:	b083      	sub	sp, #12
    72e4:	af00      	add	r7, sp, #0
    72e6:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    72e8:	687b      	ldr	r3, [r7, #4]
    72ea:	2201      	movs	r2, #1
    72ec:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    72ee:	bf00      	nop
    72f0:	370c      	adds	r7, #12
    72f2:	46bd      	mov	sp, r7
    72f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    72f8:	4770      	bx	lr

000072fa <hri_dsu_get_STATUSA_BERR_bit>:
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_CRSTEXT;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dsu_get_STATUSA_BERR_bit(const void *const hw)
{
    72fa:	b480      	push	{r7}
    72fc:	b083      	sub	sp, #12
    72fe:	af00      	add	r7, sp, #0
    7300:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    7302:	687b      	ldr	r3, [r7, #4]
    7304:	785b      	ldrb	r3, [r3, #1]
    7306:	b2db      	uxtb	r3, r3
    7308:	089b      	lsrs	r3, r3, #2
    730a:	f003 0301 	and.w	r3, r3, #1
    730e:	2b00      	cmp	r3, #0
    7310:	bf14      	ite	ne
    7312:	2301      	movne	r3, #1
    7314:	2300      	moveq	r3, #0
    7316:	b2db      	uxtb	r3, r3
}
    7318:	4618      	mov	r0, r3
    731a:	370c      	adds	r7, #12
    731c:	46bd      	mov	sp, r7
    731e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7322:	4770      	bx	lr

00007324 <hri_dsu_clear_STATUSA_BERR_bit>:

static inline void hri_dsu_clear_STATUSA_BERR_bit(const void *const hw)
{
    7324:	b480      	push	{r7}
    7326:	b083      	sub	sp, #12
    7328:	af00      	add	r7, sp, #0
    732a:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    732c:	687b      	ldr	r3, [r7, #4]
    732e:	2204      	movs	r2, #4
    7330:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    7332:	bf00      	nop
    7334:	370c      	adds	r7, #12
    7336:	46bd      	mov	sp, r7
    7338:	f85d 7b04 	ldr.w	r7, [sp], #4
    733c:	4770      	bx	lr

0000733e <hri_dsu_write_CTRL_reg>:
{
	return ((Dsu *)hw)->STATUSA.reg;
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
    733e:	b480      	push	{r7}
    7340:	b083      	sub	sp, #12
    7342:	af00      	add	r7, sp, #0
    7344:	6078      	str	r0, [r7, #4]
    7346:	460b      	mov	r3, r1
    7348:	70fb      	strb	r3, [r7, #3]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    734a:	687b      	ldr	r3, [r7, #4]
    734c:	78fa      	ldrb	r2, [r7, #3]
    734e:	701a      	strb	r2, [r3, #0]
	DSU_CRITICAL_SECTION_LEAVE();
}
    7350:	bf00      	nop
    7352:	370c      	adds	r7, #12
    7354:	46bd      	mov	sp, r7
    7356:	f85d 7b04 	ldr.w	r7, [sp], #4
    735a:	4770      	bx	lr

0000735c <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    735c:	b480      	push	{r7}
    735e:	b083      	sub	sp, #12
    7360:	af00      	add	r7, sp, #0
    7362:	6078      	str	r0, [r7, #4]
    7364:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    7366:	687b      	ldr	r3, [r7, #4]
    7368:	683a      	ldr	r2, [r7, #0]
    736a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    736c:	2300      	movs	r3, #0
}
    736e:	4618      	mov	r0, r3
    7370:	370c      	adds	r7, #12
    7372:	46bd      	mov	sp, r7
    7374:	f85d 7b04 	ldr.w	r7, [sp], #4
    7378:	4770      	bx	lr

0000737a <_crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
    737a:	b480      	push	{r7}
    737c:	b083      	sub	sp, #12
    737e:	af00      	add	r7, sp, #0
    7380:	6078      	str	r0, [r7, #4]
	(void)device;

	return ERR_NONE;
    7382:	2300      	movs	r3, #0
}
    7384:	4618      	mov	r0, r3
    7386:	370c      	adds	r7, #12
    7388:	46bd      	mov	sp, r7
    738a:	f85d 7b04 	ldr.w	r7, [sp], #4
    738e:	4770      	bx	lr

00007390 <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    7390:	b580      	push	{r7, lr}
    7392:	b086      	sub	sp, #24
    7394:	af00      	add	r7, sp, #0
    7396:	60f8      	str	r0, [r7, #12]
    7398:	60b9      	str	r1, [r7, #8]
    739a:	607a      	str	r2, [r7, #4]
    739c:	603b      	str	r3, [r7, #0]
	int32_t rc = ERR_NONE;
    739e:	2300      	movs	r3, #0
    73a0:	617b      	str	r3, [r7, #20]
	if (((uint32_t)data) & 0x00000003) {
    73a2:	68bb      	ldr	r3, [r7, #8]
    73a4:	f003 0303 	and.w	r3, r3, #3
    73a8:	2b00      	cmp	r3, #0
    73aa:	d002      	beq.n	73b2 <_crc_sync_crc32+0x22>
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
    73ac:	f06f 030c 	mvn.w	r3, #12
    73b0:	e05e      	b.n	7470 <_crc_sync_crc32+0xe0>
	}

	CRITICAL_SECTION_ENTER()
    73b2:	f107 0310 	add.w	r3, r7, #16
    73b6:	4618      	mov	r0, r3
    73b8:	4b2f      	ldr	r3, [pc, #188]	; (7478 <_crc_sync_crc32+0xe8>)
    73ba:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    73bc:	68fb      	ldr	r3, [r7, #12]
    73be:	681b      	ldr	r3, [r3, #0]
    73c0:	4618      	mov	r0, r3
    73c2:	4b2e      	ldr	r3, [pc, #184]	; (747c <_crc_sync_crc32+0xec>)
    73c4:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    73c6:	68fb      	ldr	r3, [r7, #12]
    73c8:	681b      	ldr	r3, [r3, #0]
    73ca:	68ba      	ldr	r2, [r7, #8]
    73cc:	4611      	mov	r1, r2
    73ce:	4618      	mov	r0, r3
    73d0:	4b2b      	ldr	r3, [pc, #172]	; (7480 <_crc_sync_crc32+0xf0>)
    73d2:	4798      	blx	r3
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    73d4:	68fb      	ldr	r3, [r7, #12]
    73d6:	681b      	ldr	r3, [r3, #0]
    73d8:	6879      	ldr	r1, [r7, #4]
    73da:	4618      	mov	r0, r3
    73dc:	4b29      	ldr	r3, [pc, #164]	; (7484 <_crc_sync_crc32+0xf4>)
    73de:	4798      	blx	r3
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    73e0:	68fb      	ldr	r3, [r7, #12]
    73e2:	681a      	ldr	r2, [r3, #0]
    73e4:	683b      	ldr	r3, [r7, #0]
    73e6:	681b      	ldr	r3, [r3, #0]
    73e8:	4619      	mov	r1, r3
    73ea:	4610      	mov	r0, r2
    73ec:	4b26      	ldr	r3, [pc, #152]	; (7488 <_crc_sync_crc32+0xf8>)
    73ee:	4798      	blx	r3
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    73f0:	68fb      	ldr	r3, [r7, #12]
    73f2:	681b      	ldr	r3, [r3, #0]
    73f4:	2104      	movs	r1, #4
    73f6:	4618      	mov	r0, r3
    73f8:	4b24      	ldr	r3, [pc, #144]	; (748c <_crc_sync_crc32+0xfc>)
    73fa:	4798      	blx	r3

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    73fc:	bf00      	nop
    73fe:	68fb      	ldr	r3, [r7, #12]
    7400:	681b      	ldr	r3, [r3, #0]
    7402:	4618      	mov	r0, r3
    7404:	4b22      	ldr	r3, [pc, #136]	; (7490 <_crc_sync_crc32+0x100>)
    7406:	4798      	blx	r3
    7408:	4603      	mov	r3, r0
    740a:	f083 0301 	eor.w	r3, r3, #1
    740e:	b2db      	uxtb	r3, r3
    7410:	2b00      	cmp	r3, #0
    7412:	d1f4      	bne.n	73fe <_crc_sync_crc32+0x6e>
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    7414:	68fb      	ldr	r3, [r7, #12]
    7416:	681b      	ldr	r3, [r3, #0]
    7418:	4618      	mov	r0, r3
    741a:	4b1e      	ldr	r3, [pc, #120]	; (7494 <_crc_sync_crc32+0x104>)
    741c:	4798      	blx	r3
    741e:	4603      	mov	r3, r0
    7420:	2b00      	cmp	r3, #0
    7422:	d00d      	beq.n	7440 <_crc_sync_crc32+0xb0>
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
    7424:	68fb      	ldr	r3, [r7, #12]
    7426:	681b      	ldr	r3, [r3, #0]
    7428:	4618      	mov	r0, r3
    742a:	4b1b      	ldr	r3, [pc, #108]	; (7498 <_crc_sync_crc32+0x108>)
    742c:	4798      	blx	r3
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    742e:	68fb      	ldr	r3, [r7, #12]
    7430:	681b      	ldr	r3, [r3, #0]
    7432:	4618      	mov	r0, r3
    7434:	4b19      	ldr	r3, [pc, #100]	; (749c <_crc_sync_crc32+0x10c>)
    7436:	4798      	blx	r3
		rc = ERR_IO;
    7438:	f06f 0305 	mvn.w	r3, #5
    743c:	617b      	str	r3, [r7, #20]
    743e:	e007      	b.n	7450 <_crc_sync_crc32+0xc0>
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    7440:	68fb      	ldr	r3, [r7, #12]
    7442:	681b      	ldr	r3, [r3, #0]
    7444:	4618      	mov	r0, r3
    7446:	4b16      	ldr	r3, [pc, #88]	; (74a0 <_crc_sync_crc32+0x110>)
    7448:	4798      	blx	r3
    744a:	4602      	mov	r2, r0
    744c:	683b      	ldr	r3, [r7, #0]
    744e:	601a      	str	r2, [r3, #0]
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    7450:	68fb      	ldr	r3, [r7, #12]
    7452:	681b      	ldr	r3, [r3, #0]
    7454:	4618      	mov	r0, r3
    7456:	4b11      	ldr	r3, [pc, #68]	; (749c <_crc_sync_crc32+0x10c>)
    7458:	4798      	blx	r3

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    745a:	68fb      	ldr	r3, [r7, #12]
    745c:	681b      	ldr	r3, [r3, #0]
    745e:	4618      	mov	r0, r3
    7460:	4b10      	ldr	r3, [pc, #64]	; (74a4 <_crc_sync_crc32+0x114>)
    7462:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    7464:	f107 0310 	add.w	r3, r7, #16
    7468:	4618      	mov	r0, r3
    746a:	4b0f      	ldr	r3, [pc, #60]	; (74a8 <_crc_sync_crc32+0x118>)
    746c:	4798      	blx	r3

	return rc;
    746e:	697b      	ldr	r3, [r7, #20]
}
    7470:	4618      	mov	r0, r3
    7472:	3718      	adds	r7, #24
    7474:	46bd      	mov	sp, r7
    7476:	bd80      	pop	{r7, pc}
    7478:	0000e86d 	.word	0x0000e86d
    747c:	00008769 	.word	0x00008769
    7480:	00007235 	.word	0x00007235
    7484:	00007251 	.word	0x00007251
    7488:	00007285 	.word	0x00007285
    748c:	0000733f 	.word	0x0000733f
    7490:	000072b9 	.word	0x000072b9
    7494:	000072fb 	.word	0x000072fb
    7498:	00007325 	.word	0x00007325
    749c:	000072e1 	.word	0x000072e1
    74a0:	000072a1 	.word	0x000072a1
    74a4:	000086dd 	.word	0x000086dd
    74a8:	0000e893 	.word	0x0000e893

000074ac <__NVIC_EnableIRQ>:
{
    74ac:	b480      	push	{r7}
    74ae:	b083      	sub	sp, #12
    74b0:	af00      	add	r7, sp, #0
    74b2:	4603      	mov	r3, r0
    74b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    74b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74ba:	2b00      	cmp	r3, #0
    74bc:	db0b      	blt.n	74d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74be:	4909      	ldr	r1, [pc, #36]	; (74e4 <__NVIC_EnableIRQ+0x38>)
    74c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74c4:	095b      	lsrs	r3, r3, #5
    74c6:	88fa      	ldrh	r2, [r7, #6]
    74c8:	f002 021f 	and.w	r2, r2, #31
    74cc:	2001      	movs	r0, #1
    74ce:	fa00 f202 	lsl.w	r2, r0, r2
    74d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    74d6:	bf00      	nop
    74d8:	370c      	adds	r7, #12
    74da:	46bd      	mov	sp, r7
    74dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    74e0:	4770      	bx	lr
    74e2:	bf00      	nop
    74e4:	e000e100 	.word	0xe000e100

000074e8 <__NVIC_DisableIRQ>:
{
    74e8:	b480      	push	{r7}
    74ea:	b083      	sub	sp, #12
    74ec:	af00      	add	r7, sp, #0
    74ee:	4603      	mov	r3, r0
    74f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    74f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74f6:	2b00      	cmp	r3, #0
    74f8:	db10      	blt.n	751c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74fa:	490b      	ldr	r1, [pc, #44]	; (7528 <__NVIC_DisableIRQ+0x40>)
    74fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7500:	095b      	lsrs	r3, r3, #5
    7502:	88fa      	ldrh	r2, [r7, #6]
    7504:	f002 021f 	and.w	r2, r2, #31
    7508:	2001      	movs	r0, #1
    750a:	fa00 f202 	lsl.w	r2, r0, r2
    750e:	3320      	adds	r3, #32
    7510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7514:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7518:	f3bf 8f6f 	isb	sy
}
    751c:	bf00      	nop
    751e:	370c      	adds	r7, #12
    7520:	46bd      	mov	sp, r7
    7522:	f85d 7b04 	ldr.w	r7, [sp], #4
    7526:	4770      	bx	lr
    7528:	e000e100 	.word	0xe000e100

0000752c <__NVIC_ClearPendingIRQ>:
{
    752c:	b480      	push	{r7}
    752e:	b083      	sub	sp, #12
    7530:	af00      	add	r7, sp, #0
    7532:	4603      	mov	r3, r0
    7534:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    753a:	2b00      	cmp	r3, #0
    753c:	db0c      	blt.n	7558 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    753e:	4909      	ldr	r1, [pc, #36]	; (7564 <__NVIC_ClearPendingIRQ+0x38>)
    7540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7544:	095b      	lsrs	r3, r3, #5
    7546:	88fa      	ldrh	r2, [r7, #6]
    7548:	f002 021f 	and.w	r2, r2, #31
    754c:	2001      	movs	r0, #1
    754e:	fa00 f202 	lsl.w	r2, r0, r2
    7552:	3360      	adds	r3, #96	; 0x60
    7554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7558:	bf00      	nop
    755a:	370c      	adds	r7, #12
    755c:	46bd      	mov	sp, r7
    755e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7562:	4770      	bx	lr
    7564:	e000e100 	.word	0xe000e100

00007568 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    7568:	b480      	push	{r7}
    756a:	b083      	sub	sp, #12
    756c:	af00      	add	r7, sp, #0
    756e:	6078      	str	r0, [r7, #4]
    7570:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    7572:	bf00      	nop
    7574:	687b      	ldr	r3, [r7, #4]
    7576:	685a      	ldr	r2, [r3, #4]
    7578:	683b      	ldr	r3, [r7, #0]
    757a:	4013      	ands	r3, r2
    757c:	2b00      	cmp	r3, #0
    757e:	d1f9      	bne.n	7574 <hri_eic_wait_for_sync+0xc>
	};
}
    7580:	bf00      	nop
    7582:	370c      	adds	r7, #12
    7584:	46bd      	mov	sp, r7
    7586:	f85d 7b04 	ldr.w	r7, [sp], #4
    758a:	4770      	bx	lr

0000758c <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    758c:	b480      	push	{r7}
    758e:	b083      	sub	sp, #12
    7590:	af00      	add	r7, sp, #0
    7592:	6078      	str	r0, [r7, #4]
    7594:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    7596:	687b      	ldr	r3, [r7, #4]
    7598:	685a      	ldr	r2, [r3, #4]
    759a:	683b      	ldr	r3, [r7, #0]
    759c:	4013      	ands	r3, r2
    759e:	2b00      	cmp	r3, #0
    75a0:	bf14      	ite	ne
    75a2:	2301      	movne	r3, #1
    75a4:	2300      	moveq	r3, #0
    75a6:	b2db      	uxtb	r3, r3
}
    75a8:	4618      	mov	r0, r3
    75aa:	370c      	adds	r7, #12
    75ac:	46bd      	mov	sp, r7
    75ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    75b2:	4770      	bx	lr

000075b4 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    75b4:	b480      	push	{r7}
    75b6:	b083      	sub	sp, #12
    75b8:	af00      	add	r7, sp, #0
    75ba:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    75bc:	687b      	ldr	r3, [r7, #4]
    75be:	695b      	ldr	r3, [r3, #20]
}
    75c0:	4618      	mov	r0, r3
    75c2:	370c      	adds	r7, #12
    75c4:	46bd      	mov	sp, r7
    75c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    75ca:	4770      	bx	lr

000075cc <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    75cc:	b480      	push	{r7}
    75ce:	b083      	sub	sp, #12
    75d0:	af00      	add	r7, sp, #0
    75d2:	6078      	str	r0, [r7, #4]
    75d4:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    75d6:	687b      	ldr	r3, [r7, #4]
    75d8:	683a      	ldr	r2, [r7, #0]
    75da:	615a      	str	r2, [r3, #20]
}
    75dc:	bf00      	nop
    75de:	370c      	adds	r7, #12
    75e0:	46bd      	mov	sp, r7
    75e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    75e6:	4770      	bx	lr

000075e8 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    75e8:	b480      	push	{r7}
    75ea:	b083      	sub	sp, #12
    75ec:	af00      	add	r7, sp, #0
    75ee:	6078      	str	r0, [r7, #4]
    75f0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    75f2:	687b      	ldr	r3, [r7, #4]
    75f4:	683a      	ldr	r2, [r7, #0]
    75f6:	611a      	str	r2, [r3, #16]
}
    75f8:	bf00      	nop
    75fa:	370c      	adds	r7, #12
    75fc:	46bd      	mov	sp, r7
    75fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7602:	4770      	bx	lr

00007604 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    7604:	b480      	push	{r7}
    7606:	b083      	sub	sp, #12
    7608:	af00      	add	r7, sp, #0
    760a:	6078      	str	r0, [r7, #4]
    760c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    760e:	687b      	ldr	r3, [r7, #4]
    7610:	683a      	ldr	r2, [r7, #0]
    7612:	60da      	str	r2, [r3, #12]
}
    7614:	bf00      	nop
    7616:	370c      	adds	r7, #12
    7618:	46bd      	mov	sp, r7
    761a:	f85d 7b04 	ldr.w	r7, [sp], #4
    761e:	4770      	bx	lr

00007620 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7620:	b580      	push	{r7, lr}
    7622:	b082      	sub	sp, #8
    7624:	af00      	add	r7, sp, #0
    7626:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    7628:	687b      	ldr	r3, [r7, #4]
    762a:	781b      	ldrb	r3, [r3, #0]
    762c:	b2db      	uxtb	r3, r3
    762e:	f043 0302 	orr.w	r3, r3, #2
    7632:	b2da      	uxtb	r2, r3
    7634:	687b      	ldr	r3, [r7, #4]
    7636:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    7638:	2103      	movs	r1, #3
    763a:	6878      	ldr	r0, [r7, #4]
    763c:	4b02      	ldr	r3, [pc, #8]	; (7648 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    763e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    7640:	bf00      	nop
    7642:	3708      	adds	r7, #8
    7644:	46bd      	mov	sp, r7
    7646:	bd80      	pop	{r7, pc}
    7648:	00007569 	.word	0x00007569

0000764c <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    764c:	b580      	push	{r7, lr}
    764e:	b082      	sub	sp, #8
    7650:	af00      	add	r7, sp, #0
    7652:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    7654:	687b      	ldr	r3, [r7, #4]
    7656:	781b      	ldrb	r3, [r3, #0]
    7658:	b2db      	uxtb	r3, r3
    765a:	f023 0302 	bic.w	r3, r3, #2
    765e:	b2da      	uxtb	r2, r3
    7660:	687b      	ldr	r3, [r7, #4]
    7662:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    7664:	2103      	movs	r1, #3
    7666:	6878      	ldr	r0, [r7, #4]
    7668:	4b02      	ldr	r3, [pc, #8]	; (7674 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    766a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    766c:	bf00      	nop
    766e:	3708      	adds	r7, #8
    7670:	46bd      	mov	sp, r7
    7672:	bd80      	pop	{r7, pc}
    7674:	00007569 	.word	0x00007569

00007678 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    7678:	b580      	push	{r7, lr}
    767a:	b084      	sub	sp, #16
    767c:	af00      	add	r7, sp, #0
    767e:	6078      	str	r0, [r7, #4]
    7680:	460b      	mov	r3, r1
    7682:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	781b      	ldrb	r3, [r3, #0]
    7688:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    768a:	7bfb      	ldrb	r3, [r7, #15]
    768c:	f023 0310 	bic.w	r3, r3, #16
    7690:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    7692:	78fb      	ldrb	r3, [r7, #3]
    7694:	011b      	lsls	r3, r3, #4
    7696:	b25a      	sxtb	r2, r3
    7698:	f997 300f 	ldrsb.w	r3, [r7, #15]
    769c:	4313      	orrs	r3, r2
    769e:	b25b      	sxtb	r3, r3
    76a0:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    76a2:	687b      	ldr	r3, [r7, #4]
    76a4:	7bfa      	ldrb	r2, [r7, #15]
    76a6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    76a8:	2103      	movs	r1, #3
    76aa:	6878      	ldr	r0, [r7, #4]
    76ac:	4b02      	ldr	r3, [pc, #8]	; (76b8 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    76ae:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    76b0:	bf00      	nop
    76b2:	3710      	adds	r7, #16
    76b4:	46bd      	mov	sp, r7
    76b6:	bd80      	pop	{r7, pc}
    76b8:	00007569 	.word	0x00007569

000076bc <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    76bc:	b580      	push	{r7, lr}
    76be:	b084      	sub	sp, #16
    76c0:	af00      	add	r7, sp, #0
    76c2:	6078      	str	r0, [r7, #4]
    76c4:	460b      	mov	r3, r1
    76c6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    76c8:	2103      	movs	r1, #3
    76ca:	6878      	ldr	r0, [r7, #4]
    76cc:	4b06      	ldr	r3, [pc, #24]	; (76e8 <hri_eic_get_CTRLA_reg+0x2c>)
    76ce:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    76d0:	687b      	ldr	r3, [r7, #4]
    76d2:	781b      	ldrb	r3, [r3, #0]
    76d4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    76d6:	7bfa      	ldrb	r2, [r7, #15]
    76d8:	78fb      	ldrb	r3, [r7, #3]
    76da:	4013      	ands	r3, r2
    76dc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    76de:	7bfb      	ldrb	r3, [r7, #15]
}
    76e0:	4618      	mov	r0, r3
    76e2:	3710      	adds	r7, #16
    76e4:	46bd      	mov	sp, r7
    76e6:	bd80      	pop	{r7, pc}
    76e8:	00007569 	.word	0x00007569

000076ec <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    76ec:	b580      	push	{r7, lr}
    76ee:	b082      	sub	sp, #8
    76f0:	af00      	add	r7, sp, #0
    76f2:	6078      	str	r0, [r7, #4]
    76f4:	460b      	mov	r3, r1
    76f6:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    76f8:	687b      	ldr	r3, [r7, #4]
    76fa:	78fa      	ldrb	r2, [r7, #3]
    76fc:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    76fe:	2103      	movs	r1, #3
    7700:	6878      	ldr	r0, [r7, #4]
    7702:	4b03      	ldr	r3, [pc, #12]	; (7710 <hri_eic_write_CTRLA_reg+0x24>)
    7704:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    7706:	bf00      	nop
    7708:	3708      	adds	r7, #8
    770a:	46bd      	mov	sp, r7
    770c:	bd80      	pop	{r7, pc}
    770e:	bf00      	nop
    7710:	00007569 	.word	0x00007569

00007714 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    7714:	b480      	push	{r7}
    7716:	b083      	sub	sp, #12
    7718:	af00      	add	r7, sp, #0
    771a:	6078      	str	r0, [r7, #4]
    771c:	460b      	mov	r3, r1
    771e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    7720:	687b      	ldr	r3, [r7, #4]
    7722:	78fa      	ldrb	r2, [r7, #3]
    7724:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7726:	bf00      	nop
    7728:	370c      	adds	r7, #12
    772a:	46bd      	mov	sp, r7
    772c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7730:	4770      	bx	lr

00007732 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    7732:	b480      	push	{r7}
    7734:	b083      	sub	sp, #12
    7736:	af00      	add	r7, sp, #0
    7738:	6078      	str	r0, [r7, #4]
    773a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    773c:	687b      	ldr	r3, [r7, #4]
    773e:	683a      	ldr	r2, [r7, #0]
    7740:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7742:	bf00      	nop
    7744:	370c      	adds	r7, #12
    7746:	46bd      	mov	sp, r7
    7748:	f85d 7b04 	ldr.w	r7, [sp], #4
    774c:	4770      	bx	lr

0000774e <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    774e:	b480      	push	{r7}
    7750:	b083      	sub	sp, #12
    7752:	af00      	add	r7, sp, #0
    7754:	6078      	str	r0, [r7, #4]
    7756:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    7758:	687b      	ldr	r3, [r7, #4]
    775a:	683a      	ldr	r2, [r7, #0]
    775c:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    775e:	bf00      	nop
    7760:	370c      	adds	r7, #12
    7762:	46bd      	mov	sp, r7
    7764:	f85d 7b04 	ldr.w	r7, [sp], #4
    7768:	4770      	bx	lr

0000776a <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    776a:	b480      	push	{r7}
    776c:	b085      	sub	sp, #20
    776e:	af00      	add	r7, sp, #0
    7770:	60f8      	str	r0, [r7, #12]
    7772:	460b      	mov	r3, r1
    7774:	607a      	str	r2, [r7, #4]
    7776:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    7778:	7afb      	ldrb	r3, [r7, #11]
    777a:	68fa      	ldr	r2, [r7, #12]
    777c:	3306      	adds	r3, #6
    777e:	009b      	lsls	r3, r3, #2
    7780:	4413      	add	r3, r2
    7782:	687a      	ldr	r2, [r7, #4]
    7784:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7786:	bf00      	nop
    7788:	3714      	adds	r7, #20
    778a:	46bd      	mov	sp, r7
    778c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7790:	4770      	bx	lr

00007792 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    7792:	b480      	push	{r7}
    7794:	b083      	sub	sp, #12
    7796:	af00      	add	r7, sp, #0
    7798:	6078      	str	r0, [r7, #4]
    779a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    779c:	687b      	ldr	r3, [r7, #4]
    779e:	683a      	ldr	r2, [r7, #0]
    77a0:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    77a2:	bf00      	nop
    77a4:	370c      	adds	r7, #12
    77a6:	46bd      	mov	sp, r7
    77a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    77ac:	4770      	bx	lr

000077ae <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    77ae:	b480      	push	{r7}
    77b0:	b083      	sub	sp, #12
    77b2:	af00      	add	r7, sp, #0
    77b4:	6078      	str	r0, [r7, #4]
    77b6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    77b8:	687b      	ldr	r3, [r7, #4]
    77ba:	683a      	ldr	r2, [r7, #0]
    77bc:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    77be:	bf00      	nop
    77c0:	370c      	adds	r7, #12
    77c2:	46bd      	mov	sp, r7
    77c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    77c8:	4770      	bx	lr
	...

000077cc <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    77cc:	b580      	push	{r7, lr}
    77ce:	b082      	sub	sp, #8
    77d0:	af00      	add	r7, sp, #0
    77d2:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    77d4:	2101      	movs	r1, #1
    77d6:	483d      	ldr	r0, [pc, #244]	; (78cc <_ext_irq_init+0x100>)
    77d8:	4b3d      	ldr	r3, [pc, #244]	; (78d0 <_ext_irq_init+0x104>)
    77da:	4798      	blx	r3
    77dc:	4603      	mov	r3, r0
    77de:	f083 0301 	eor.w	r3, r3, #1
    77e2:	b2db      	uxtb	r3, r3
    77e4:	2b00      	cmp	r3, #0
    77e6:	d011      	beq.n	780c <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    77e8:	2102      	movs	r1, #2
    77ea:	4838      	ldr	r0, [pc, #224]	; (78cc <_ext_irq_init+0x100>)
    77ec:	4b39      	ldr	r3, [pc, #228]	; (78d4 <_ext_irq_init+0x108>)
    77ee:	4798      	blx	r3
    77f0:	4603      	mov	r3, r0
    77f2:	2b00      	cmp	r3, #0
    77f4:	d006      	beq.n	7804 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    77f6:	4835      	ldr	r0, [pc, #212]	; (78cc <_ext_irq_init+0x100>)
    77f8:	4b37      	ldr	r3, [pc, #220]	; (78d8 <_ext_irq_init+0x10c>)
    77fa:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    77fc:	2102      	movs	r1, #2
    77fe:	4833      	ldr	r0, [pc, #204]	; (78cc <_ext_irq_init+0x100>)
    7800:	4b36      	ldr	r3, [pc, #216]	; (78dc <_ext_irq_init+0x110>)
    7802:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    7804:	2101      	movs	r1, #1
    7806:	4831      	ldr	r0, [pc, #196]	; (78cc <_ext_irq_init+0x100>)
    7808:	4b35      	ldr	r3, [pc, #212]	; (78e0 <_ext_irq_init+0x114>)
    780a:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    780c:	2101      	movs	r1, #1
    780e:	482f      	ldr	r0, [pc, #188]	; (78cc <_ext_irq_init+0x100>)
    7810:	4b32      	ldr	r3, [pc, #200]	; (78dc <_ext_irq_init+0x110>)
    7812:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    7814:	2100      	movs	r1, #0
    7816:	482d      	ldr	r0, [pc, #180]	; (78cc <_ext_irq_init+0x100>)
    7818:	4b32      	ldr	r3, [pc, #200]	; (78e4 <_ext_irq_init+0x118>)
    781a:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    781c:	2100      	movs	r1, #0
    781e:	482b      	ldr	r0, [pc, #172]	; (78cc <_ext_irq_init+0x100>)
    7820:	4b31      	ldr	r3, [pc, #196]	; (78e8 <_ext_irq_init+0x11c>)
    7822:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    7824:	2100      	movs	r1, #0
    7826:	4829      	ldr	r0, [pc, #164]	; (78cc <_ext_irq_init+0x100>)
    7828:	4b30      	ldr	r3, [pc, #192]	; (78ec <_ext_irq_init+0x120>)
    782a:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    782c:	f240 3131 	movw	r1, #817	; 0x331
    7830:	4826      	ldr	r0, [pc, #152]	; (78cc <_ext_irq_init+0x100>)
    7832:	4b2f      	ldr	r3, [pc, #188]	; (78f0 <_ext_irq_init+0x124>)
    7834:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    7836:	f240 3131 	movw	r1, #817	; 0x331
    783a:	4824      	ldr	r0, [pc, #144]	; (78cc <_ext_irq_init+0x100>)
    783c:	4b2d      	ldr	r3, [pc, #180]	; (78f4 <_ext_irq_init+0x128>)
    783e:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    7840:	2100      	movs	r1, #0
    7842:	4822      	ldr	r0, [pc, #136]	; (78cc <_ext_irq_init+0x100>)
    7844:	4b2c      	ldr	r3, [pc, #176]	; (78f8 <_ext_irq_init+0x12c>)
    7846:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    7848:	4a2c      	ldr	r2, [pc, #176]	; (78fc <_ext_irq_init+0x130>)
    784a:	2100      	movs	r1, #0
    784c:	481f      	ldr	r0, [pc, #124]	; (78cc <_ext_irq_init+0x100>)
    784e:	4b2c      	ldr	r3, [pc, #176]	; (7900 <_ext_irq_init+0x134>)
    7850:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    7852:	2211      	movs	r2, #17
    7854:	2101      	movs	r1, #1
    7856:	481d      	ldr	r0, [pc, #116]	; (78cc <_ext_irq_init+0x100>)
    7858:	4b29      	ldr	r3, [pc, #164]	; (7900 <_ext_irq_init+0x134>)
    785a:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    785c:	481b      	ldr	r0, [pc, #108]	; (78cc <_ext_irq_init+0x100>)
    785e:	4b29      	ldr	r3, [pc, #164]	; (7904 <_ext_irq_init+0x138>)
    7860:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    7862:	200c      	movs	r0, #12
    7864:	4b28      	ldr	r3, [pc, #160]	; (7908 <_ext_irq_init+0x13c>)
    7866:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    7868:	200c      	movs	r0, #12
    786a:	4b28      	ldr	r3, [pc, #160]	; (790c <_ext_irq_init+0x140>)
    786c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    786e:	200c      	movs	r0, #12
    7870:	4b27      	ldr	r3, [pc, #156]	; (7910 <_ext_irq_init+0x144>)
    7872:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    7874:	2010      	movs	r0, #16
    7876:	4b24      	ldr	r3, [pc, #144]	; (7908 <_ext_irq_init+0x13c>)
    7878:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    787a:	2010      	movs	r0, #16
    787c:	4b23      	ldr	r3, [pc, #140]	; (790c <_ext_irq_init+0x140>)
    787e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    7880:	2010      	movs	r0, #16
    7882:	4b23      	ldr	r3, [pc, #140]	; (7910 <_ext_irq_init+0x144>)
    7884:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    7886:	2011      	movs	r0, #17
    7888:	4b1f      	ldr	r3, [pc, #124]	; (7908 <_ext_irq_init+0x13c>)
    788a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    788c:	2011      	movs	r0, #17
    788e:	4b1f      	ldr	r3, [pc, #124]	; (790c <_ext_irq_init+0x140>)
    7890:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    7892:	2011      	movs	r0, #17
    7894:	4b1e      	ldr	r3, [pc, #120]	; (7910 <_ext_irq_init+0x144>)
    7896:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    7898:	2012      	movs	r0, #18
    789a:	4b1b      	ldr	r3, [pc, #108]	; (7908 <_ext_irq_init+0x13c>)
    789c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    789e:	2012      	movs	r0, #18
    78a0:	4b1a      	ldr	r3, [pc, #104]	; (790c <_ext_irq_init+0x140>)
    78a2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    78a4:	2012      	movs	r0, #18
    78a6:	4b1a      	ldr	r3, [pc, #104]	; (7910 <_ext_irq_init+0x144>)
    78a8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    78aa:	2013      	movs	r0, #19
    78ac:	4b16      	ldr	r3, [pc, #88]	; (7908 <_ext_irq_init+0x13c>)
    78ae:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    78b0:	2013      	movs	r0, #19
    78b2:	4b16      	ldr	r3, [pc, #88]	; (790c <_ext_irq_init+0x140>)
    78b4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    78b6:	2013      	movs	r0, #19
    78b8:	4b15      	ldr	r3, [pc, #84]	; (7910 <_ext_irq_init+0x144>)
    78ba:	4798      	blx	r3

	callback = cb;
    78bc:	4a15      	ldr	r2, [pc, #84]	; (7914 <_ext_irq_init+0x148>)
    78be:	687b      	ldr	r3, [r7, #4]
    78c0:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    78c2:	2300      	movs	r3, #0
}
    78c4:	4618      	mov	r0, r3
    78c6:	3708      	adds	r7, #8
    78c8:	46bd      	mov	sp, r7
    78ca:	bd80      	pop	{r7, pc}
    78cc:	40002800 	.word	0x40002800
    78d0:	0000758d 	.word	0x0000758d
    78d4:	000076bd 	.word	0x000076bd
    78d8:	0000764d 	.word	0x0000764d
    78dc:	00007569 	.word	0x00007569
    78e0:	000076ed 	.word	0x000076ed
    78e4:	00007679 	.word	0x00007679
    78e8:	00007715 	.word	0x00007715
    78ec:	00007733 	.word	0x00007733
    78f0:	0000774f 	.word	0x0000774f
    78f4:	00007793 	.word	0x00007793
    78f8:	000077af 	.word	0x000077af
    78fc:	00990003 	.word	0x00990003
    7900:	0000776b 	.word	0x0000776b
    7904:	00007621 	.word	0x00007621
    7908:	000074e9 	.word	0x000074e9
    790c:	0000752d 	.word	0x0000752d
    7910:	000074ad 	.word	0x000074ad
    7914:	20002f54 	.word	0x20002f54

00007918 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    7918:	b580      	push	{r7, lr}
    791a:	b084      	sub	sp, #16
    791c:	af00      	add	r7, sp, #0
    791e:	6078      	str	r0, [r7, #4]
    7920:	460b      	mov	r3, r1
    7922:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    7924:	23ff      	movs	r3, #255	; 0xff
    7926:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    7928:	2300      	movs	r3, #0
    792a:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    792c:	e010      	b.n	7950 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    792e:	7bbb      	ldrb	r3, [r7, #14]
    7930:	4a1c      	ldr	r2, [pc, #112]	; (79a4 <_ext_irq_enable+0x8c>)
    7932:	00db      	lsls	r3, r3, #3
    7934:	4413      	add	r3, r2
    7936:	685a      	ldr	r2, [r3, #4]
    7938:	687b      	ldr	r3, [r7, #4]
    793a:	429a      	cmp	r2, r3
    793c:	d105      	bne.n	794a <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    793e:	7bbb      	ldrb	r3, [r7, #14]
    7940:	4a18      	ldr	r2, [pc, #96]	; (79a4 <_ext_irq_enable+0x8c>)
    7942:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    7946:	73fb      	strb	r3, [r7, #15]
			break;
    7948:	e005      	b.n	7956 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    794a:	7bbb      	ldrb	r3, [r7, #14]
    794c:	3301      	adds	r3, #1
    794e:	73bb      	strb	r3, [r7, #14]
    7950:	7bbb      	ldrb	r3, [r7, #14]
    7952:	2b04      	cmp	r3, #4
    7954:	d9eb      	bls.n	792e <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    7956:	7bfb      	ldrb	r3, [r7, #15]
    7958:	2bff      	cmp	r3, #255	; 0xff
    795a:	d102      	bne.n	7962 <_ext_irq_enable+0x4a>
		return -1;
    795c:	f04f 33ff 	mov.w	r3, #4294967295
    7960:	e01c      	b.n	799c <_ext_irq_enable+0x84>
	}

	if (enable) {
    7962:	78fb      	ldrb	r3, [r7, #3]
    7964:	2b00      	cmp	r3, #0
    7966:	d008      	beq.n	797a <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    7968:	7bfb      	ldrb	r3, [r7, #15]
    796a:	2201      	movs	r2, #1
    796c:	fa02 f303 	lsl.w	r3, r2, r3
    7970:	4619      	mov	r1, r3
    7972:	480d      	ldr	r0, [pc, #52]	; (79a8 <_ext_irq_enable+0x90>)
    7974:	4b0d      	ldr	r3, [pc, #52]	; (79ac <_ext_irq_enable+0x94>)
    7976:	4798      	blx	r3
    7978:	e00f      	b.n	799a <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    797a:	7bfb      	ldrb	r3, [r7, #15]
    797c:	2201      	movs	r2, #1
    797e:	fa02 f303 	lsl.w	r3, r2, r3
    7982:	4619      	mov	r1, r3
    7984:	4808      	ldr	r0, [pc, #32]	; (79a8 <_ext_irq_enable+0x90>)
    7986:	4b0a      	ldr	r3, [pc, #40]	; (79b0 <_ext_irq_enable+0x98>)
    7988:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    798a:	7bfb      	ldrb	r3, [r7, #15]
    798c:	2201      	movs	r2, #1
    798e:	fa02 f303 	lsl.w	r3, r2, r3
    7992:	4619      	mov	r1, r3
    7994:	4804      	ldr	r0, [pc, #16]	; (79a8 <_ext_irq_enable+0x90>)
    7996:	4b07      	ldr	r3, [pc, #28]	; (79b4 <_ext_irq_enable+0x9c>)
    7998:	4798      	blx	r3
	}

	return ERR_NONE;
    799a:	2300      	movs	r3, #0
}
    799c:	4618      	mov	r0, r3
    799e:	3710      	adds	r7, #16
    79a0:	46bd      	mov	sp, r7
    79a2:	bd80      	pop	{r7, pc}
    79a4:	000184b8 	.word	0x000184b8
    79a8:	40002800 	.word	0x40002800
    79ac:	000075e9 	.word	0x000075e9
    79b0:	00007605 	.word	0x00007605
    79b4:	000075cd 	.word	0x000075cd

000079b8 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    79b8:	b580      	push	{r7, lr}
    79ba:	b084      	sub	sp, #16
    79bc:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    79be:	4841      	ldr	r0, [pc, #260]	; (7ac4 <_ext_irq_handler+0x10c>)
    79c0:	4b41      	ldr	r3, [pc, #260]	; (7ac8 <_ext_irq_handler+0x110>)
    79c2:	4798      	blx	r3
    79c4:	4603      	mov	r3, r0
    79c6:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    79c8:	f04f 33ff 	mov.w	r3, #4294967295
    79cc:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    79ce:	683b      	ldr	r3, [r7, #0]
    79d0:	4619      	mov	r1, r3
    79d2:	483c      	ldr	r0, [pc, #240]	; (7ac4 <_ext_irq_handler+0x10c>)
    79d4:	4b3d      	ldr	r3, [pc, #244]	; (7acc <_ext_irq_handler+0x114>)
    79d6:	4798      	blx	r3

	ASSERT(callback);
    79d8:	4b3d      	ldr	r3, [pc, #244]	; (7ad0 <_ext_irq_handler+0x118>)
    79da:	681b      	ldr	r3, [r3, #0]
    79dc:	2b00      	cmp	r3, #0
    79de:	bf14      	ite	ne
    79e0:	2301      	movne	r3, #1
    79e2:	2300      	moveq	r3, #0
    79e4:	b2db      	uxtb	r3, r3
    79e6:	22f8      	movs	r2, #248	; 0xf8
    79e8:	493a      	ldr	r1, [pc, #232]	; (7ad4 <_ext_irq_handler+0x11c>)
    79ea:	4618      	mov	r0, r3
    79ec:	4b3a      	ldr	r3, [pc, #232]	; (7ad8 <_ext_irq_handler+0x120>)
    79ee:	4798      	blx	r3

	while (flags) {
    79f0:	e060      	b.n	7ab4 <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    79f2:	683b      	ldr	r3, [r7, #0]
    79f4:	4618      	mov	r0, r3
    79f6:	4b39      	ldr	r3, [pc, #228]	; (7adc <_ext_irq_handler+0x124>)
    79f8:	4798      	blx	r3
    79fa:	4603      	mov	r3, r0
    79fc:	b2db      	uxtb	r3, r3
    79fe:	3b01      	subs	r3, #1
    7a00:	b2db      	uxtb	r3, r3
    7a02:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    7a04:	e047      	b.n	7a96 <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    7a06:	2300      	movs	r3, #0
    7a08:	71fb      	strb	r3, [r7, #7]
    7a0a:	2305      	movs	r3, #5
    7a0c:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    7a0e:	e024      	b.n	7a5a <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    7a10:	79ba      	ldrb	r2, [r7, #6]
    7a12:	79fb      	ldrb	r3, [r7, #7]
    7a14:	4413      	add	r3, r2
    7a16:	105b      	asrs	r3, r3, #1
    7a18:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    7a1a:	797b      	ldrb	r3, [r7, #5]
    7a1c:	4a30      	ldr	r2, [pc, #192]	; (7ae0 <_ext_irq_handler+0x128>)
    7a1e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    7a22:	461a      	mov	r2, r3
    7a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7a28:	429a      	cmp	r2, r3
    7a2a:	d106      	bne.n	7a3a <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    7a2c:	797b      	ldrb	r3, [r7, #5]
    7a2e:	4a2c      	ldr	r2, [pc, #176]	; (7ae0 <_ext_irq_handler+0x128>)
    7a30:	00db      	lsls	r3, r3, #3
    7a32:	4413      	add	r3, r2
    7a34:	685b      	ldr	r3, [r3, #4]
    7a36:	60bb      	str	r3, [r7, #8]
					break;
    7a38:	e013      	b.n	7a62 <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    7a3a:	797b      	ldrb	r3, [r7, #5]
    7a3c:	4a28      	ldr	r2, [pc, #160]	; (7ae0 <_ext_irq_handler+0x128>)
    7a3e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    7a42:	461a      	mov	r2, r3
    7a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7a48:	429a      	cmp	r2, r3
    7a4a:	da03      	bge.n	7a54 <_ext_irq_handler+0x9c>
					lower = middle + 1;
    7a4c:	797b      	ldrb	r3, [r7, #5]
    7a4e:	3301      	adds	r3, #1
    7a50:	71fb      	strb	r3, [r7, #7]
    7a52:	e002      	b.n	7a5a <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    7a54:	797b      	ldrb	r3, [r7, #5]
    7a56:	3b01      	subs	r3, #1
    7a58:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    7a5a:	79ba      	ldrb	r2, [r7, #6]
    7a5c:	79fb      	ldrb	r3, [r7, #7]
    7a5e:	429a      	cmp	r2, r3
    7a60:	d2d6      	bcs.n	7a10 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    7a62:	68bb      	ldr	r3, [r7, #8]
    7a64:	f1b3 3fff 	cmp.w	r3, #4294967295
    7a68:	d003      	beq.n	7a72 <_ext_irq_handler+0xba>
				callback(pin);
    7a6a:	4b19      	ldr	r3, [pc, #100]	; (7ad0 <_ext_irq_handler+0x118>)
    7a6c:	681b      	ldr	r3, [r3, #0]
    7a6e:	68b8      	ldr	r0, [r7, #8]
    7a70:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    7a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7a76:	2201      	movs	r2, #1
    7a78:	fa02 f303 	lsl.w	r3, r2, r3
    7a7c:	43da      	mvns	r2, r3
    7a7e:	683b      	ldr	r3, [r7, #0]
    7a80:	4013      	ands	r3, r2
    7a82:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    7a84:	683b      	ldr	r3, [r7, #0]
    7a86:	4618      	mov	r0, r3
    7a88:	4b14      	ldr	r3, [pc, #80]	; (7adc <_ext_irq_handler+0x124>)
    7a8a:	4798      	blx	r3
    7a8c:	4603      	mov	r3, r0
    7a8e:	b2db      	uxtb	r3, r3
    7a90:	3b01      	subs	r3, #1
    7a92:	b2db      	uxtb	r3, r3
    7a94:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    7a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
    7a9e:	d1b2      	bne.n	7a06 <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    7aa0:	4808      	ldr	r0, [pc, #32]	; (7ac4 <_ext_irq_handler+0x10c>)
    7aa2:	4b09      	ldr	r3, [pc, #36]	; (7ac8 <_ext_irq_handler+0x110>)
    7aa4:	4798      	blx	r3
    7aa6:	4603      	mov	r3, r0
    7aa8:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    7aaa:	683b      	ldr	r3, [r7, #0]
    7aac:	4619      	mov	r1, r3
    7aae:	4805      	ldr	r0, [pc, #20]	; (7ac4 <_ext_irq_handler+0x10c>)
    7ab0:	4b06      	ldr	r3, [pc, #24]	; (7acc <_ext_irq_handler+0x114>)
    7ab2:	4798      	blx	r3
	while (flags) {
    7ab4:	683b      	ldr	r3, [r7, #0]
    7ab6:	2b00      	cmp	r3, #0
    7ab8:	d19b      	bne.n	79f2 <_ext_irq_handler+0x3a>
	}
}
    7aba:	bf00      	nop
    7abc:	3710      	adds	r7, #16
    7abe:	46bd      	mov	sp, r7
    7ac0:	bd80      	pop	{r7, pc}
    7ac2:	bf00      	nop
    7ac4:	40002800 	.word	0x40002800
    7ac8:	000075b5 	.word	0x000075b5
    7acc:	000075cd 	.word	0x000075cd
    7ad0:	20002f54 	.word	0x20002f54
    7ad4:	000184e0 	.word	0x000184e0
    7ad8:	000065d9 	.word	0x000065d9
    7adc:	0001776d 	.word	0x0001776d
    7ae0:	000184b8 	.word	0x000184b8

00007ae4 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    7ae4:	b580      	push	{r7, lr}
    7ae6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7ae8:	4b01      	ldr	r3, [pc, #4]	; (7af0 <EIC_0_Handler+0xc>)
    7aea:	4798      	blx	r3
} /**
    7aec:	bf00      	nop
    7aee:	bd80      	pop	{r7, pc}
    7af0:	000079b9 	.word	0x000079b9

00007af4 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    7af4:	b580      	push	{r7, lr}
    7af6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7af8:	4b01      	ldr	r3, [pc, #4]	; (7b00 <EIC_4_Handler+0xc>)
    7afa:	4798      	blx	r3
} /**
    7afc:	bf00      	nop
    7afe:	bd80      	pop	{r7, pc}
    7b00:	000079b9 	.word	0x000079b9

00007b04 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    7b04:	b580      	push	{r7, lr}
    7b06:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7b08:	4b01      	ldr	r3, [pc, #4]	; (7b10 <EIC_5_Handler+0xc>)
    7b0a:	4798      	blx	r3
} /**
    7b0c:	bf00      	nop
    7b0e:	bd80      	pop	{r7, pc}
    7b10:	000079b9 	.word	0x000079b9

00007b14 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    7b14:	b580      	push	{r7, lr}
    7b16:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7b18:	4b01      	ldr	r3, [pc, #4]	; (7b20 <EIC_6_Handler+0xc>)
    7b1a:	4798      	blx	r3
} /**
    7b1c:	bf00      	nop
    7b1e:	bd80      	pop	{r7, pc}
    7b20:	000079b9 	.word	0x000079b9

00007b24 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    7b24:	b580      	push	{r7, lr}
    7b26:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7b28:	4b01      	ldr	r3, [pc, #4]	; (7b30 <EIC_7_Handler+0xc>)
    7b2a:	4798      	blx	r3
}
    7b2c:	bf00      	nop
    7b2e:	bd80      	pop	{r7, pc}
    7b30:	000079b9 	.word	0x000079b9

00007b34 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    7b34:	b480      	push	{r7}
    7b36:	b085      	sub	sp, #20
    7b38:	af00      	add	r7, sp, #0
    7b3a:	60f8      	str	r0, [r7, #12]
    7b3c:	460b      	mov	r3, r1
    7b3e:	607a      	str	r2, [r7, #4]
    7b40:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    7b42:	7afa      	ldrb	r2, [r7, #11]
    7b44:	68fb      	ldr	r3, [r7, #12]
    7b46:	3248      	adds	r2, #72	; 0x48
    7b48:	6879      	ldr	r1, [r7, #4]
    7b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    7b4e:	bf00      	nop
    7b50:	3714      	adds	r7, #20
    7b52:	46bd      	mov	sp, r7
    7b54:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b58:	4770      	bx	lr

00007b5a <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    7b5a:	b480      	push	{r7}
    7b5c:	b083      	sub	sp, #12
    7b5e:	af00      	add	r7, sp, #0
    7b60:	6078      	str	r0, [r7, #4]
    7b62:	460b      	mov	r3, r1
    7b64:	70fb      	strb	r3, [r7, #3]
    7b66:	4613      	mov	r3, r2
    7b68:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    7b6a:	78fb      	ldrb	r3, [r7, #3]
    7b6c:	687a      	ldr	r2, [r7, #4]
    7b6e:	3304      	adds	r3, #4
    7b70:	00db      	lsls	r3, r3, #3
    7b72:	4413      	add	r3, r2
    7b74:	78ba      	ldrb	r2, [r7, #2]
    7b76:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    7b78:	78fb      	ldrb	r3, [r7, #3]
    7b7a:	78ba      	ldrb	r2, [r7, #2]
    7b7c:	43d2      	mvns	r2, r2
    7b7e:	b2d1      	uxtb	r1, r2
    7b80:	687a      	ldr	r2, [r7, #4]
    7b82:	3304      	adds	r3, #4
    7b84:	00db      	lsls	r3, r3, #3
    7b86:	4413      	add	r3, r2
    7b88:	460a      	mov	r2, r1
    7b8a:	711a      	strb	r2, [r3, #4]
}
    7b8c:	bf00      	nop
    7b8e:	370c      	adds	r7, #12
    7b90:	46bd      	mov	sp, r7
    7b92:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b96:	4770      	bx	lr

00007b98 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    7b98:	b480      	push	{r7}
    7b9a:	b085      	sub	sp, #20
    7b9c:	af00      	add	r7, sp, #0
    7b9e:	60f8      	str	r0, [r7, #12]
    7ba0:	460b      	mov	r3, r1
    7ba2:	607a      	str	r2, [r7, #4]
    7ba4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    7ba6:	7afa      	ldrb	r2, [r7, #11]
    7ba8:	68fb      	ldr	r3, [r7, #12]
    7baa:	3204      	adds	r2, #4
    7bac:	6879      	ldr	r1, [r7, #4]
    7bae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    7bb2:	bf00      	nop
    7bb4:	3714      	adds	r7, #20
    7bb6:	46bd      	mov	sp, r7
    7bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bbc:	4770      	bx	lr
	...

00007bc0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    7bc0:	b580      	push	{r7, lr}
    7bc2:	b082      	sub	sp, #8
    7bc4:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    7bc6:	2300      	movs	r3, #0
    7bc8:	71fb      	strb	r3, [r7, #7]
    7bca:	e00b      	b.n	7be4 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    7bcc:	79fb      	ldrb	r3, [r7, #7]
    7bce:	4a18      	ldr	r2, [pc, #96]	; (7c30 <_event_system_init+0x70>)
    7bd0:	5cd3      	ldrb	r3, [r2, r3]
    7bd2:	461a      	mov	r2, r3
    7bd4:	79fb      	ldrb	r3, [r7, #7]
    7bd6:	4619      	mov	r1, r3
    7bd8:	4816      	ldr	r0, [pc, #88]	; (7c34 <_event_system_init+0x74>)
    7bda:	4b17      	ldr	r3, [pc, #92]	; (7c38 <_event_system_init+0x78>)
    7bdc:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    7bde:	79fb      	ldrb	r3, [r7, #7]
    7be0:	3301      	adds	r3, #1
    7be2:	71fb      	strb	r3, [r7, #7]
    7be4:	79fb      	ldrb	r3, [r7, #7]
    7be6:	2b42      	cmp	r3, #66	; 0x42
    7be8:	d9f0      	bls.n	7bcc <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    7bea:	2300      	movs	r3, #0
    7bec:	71fb      	strb	r3, [r7, #7]
    7bee:	e016      	b.n	7c1e <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    7bf0:	79fb      	ldrb	r3, [r7, #7]
    7bf2:	4a12      	ldr	r2, [pc, #72]	; (7c3c <_event_system_init+0x7c>)
    7bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    7bf8:	461a      	mov	r2, r3
    7bfa:	79fb      	ldrb	r3, [r7, #7]
    7bfc:	4619      	mov	r1, r3
    7bfe:	480d      	ldr	r0, [pc, #52]	; (7c34 <_event_system_init+0x74>)
    7c00:	4b0f      	ldr	r3, [pc, #60]	; (7c40 <_event_system_init+0x80>)
    7c02:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    7c04:	79fb      	ldrb	r3, [r7, #7]
    7c06:	4a0f      	ldr	r2, [pc, #60]	; (7c44 <_event_system_init+0x84>)
    7c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c0c:	b2da      	uxtb	r2, r3
    7c0e:	79fb      	ldrb	r3, [r7, #7]
    7c10:	4619      	mov	r1, r3
    7c12:	4808      	ldr	r0, [pc, #32]	; (7c34 <_event_system_init+0x74>)
    7c14:	4b0c      	ldr	r3, [pc, #48]	; (7c48 <_event_system_init+0x88>)
    7c16:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    7c18:	79fb      	ldrb	r3, [r7, #7]
    7c1a:	3301      	adds	r3, #1
    7c1c:	71fb      	strb	r3, [r7, #7]
    7c1e:	79fb      	ldrb	r3, [r7, #7]
    7c20:	2b1f      	cmp	r3, #31
    7c22:	d9e5      	bls.n	7bf0 <_event_system_init+0x30>
	}

	return ERR_NONE;
    7c24:	2300      	movs	r3, #0
}
    7c26:	4618      	mov	r0, r3
    7c28:	3708      	adds	r7, #8
    7c2a:	46bd      	mov	sp, r7
    7c2c:	bd80      	pop	{r7, pc}
    7c2e:	bf00      	nop
    7c30:	000184f8 	.word	0x000184f8
    7c34:	4100e000 	.word	0x4100e000
    7c38:	00007b35 	.word	0x00007b35
    7c3c:	0001853c 	.word	0x0001853c
    7c40:	00007b99 	.word	0x00007b99
    7c44:	0001857c 	.word	0x0001857c
    7c48:	00007b5b 	.word	0x00007b5b

00007c4c <hri_gclk_wait_for_sync>:
{
    7c4c:	b480      	push	{r7}
    7c4e:	b083      	sub	sp, #12
    7c50:	af00      	add	r7, sp, #0
    7c52:	6078      	str	r0, [r7, #4]
    7c54:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7c56:	bf00      	nop
    7c58:	687b      	ldr	r3, [r7, #4]
    7c5a:	685a      	ldr	r2, [r3, #4]
    7c5c:	683b      	ldr	r3, [r7, #0]
    7c5e:	4013      	ands	r3, r2
    7c60:	2b00      	cmp	r3, #0
    7c62:	d1f9      	bne.n	7c58 <hri_gclk_wait_for_sync+0xc>
}
    7c64:	bf00      	nop
    7c66:	370c      	adds	r7, #12
    7c68:	46bd      	mov	sp, r7
    7c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c6e:	4770      	bx	lr

00007c70 <hri_gclk_write_GENCTRL_reg>:
{
    7c70:	b580      	push	{r7, lr}
    7c72:	b084      	sub	sp, #16
    7c74:	af00      	add	r7, sp, #0
    7c76:	60f8      	str	r0, [r7, #12]
    7c78:	460b      	mov	r3, r1
    7c7a:	607a      	str	r2, [r7, #4]
    7c7c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7c7e:	7afa      	ldrb	r2, [r7, #11]
    7c80:	68fb      	ldr	r3, [r7, #12]
    7c82:	3208      	adds	r2, #8
    7c84:	6879      	ldr	r1, [r7, #4]
    7c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    7c8a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    7c8e:	68f8      	ldr	r0, [r7, #12]
    7c90:	4b02      	ldr	r3, [pc, #8]	; (7c9c <hri_gclk_write_GENCTRL_reg+0x2c>)
    7c92:	4798      	blx	r3
}
    7c94:	bf00      	nop
    7c96:	3710      	adds	r7, #16
    7c98:	46bd      	mov	sp, r7
    7c9a:	bd80      	pop	{r7, pc}
    7c9c:	00007c4d 	.word	0x00007c4d

00007ca0 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    7ca0:	b580      	push	{r7, lr}
    7ca2:	b082      	sub	sp, #8
    7ca4:	af00      	add	r7, sp, #0
    7ca6:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    7ca8:	687b      	ldr	r3, [r7, #4]
    7caa:	f003 0301 	and.w	r3, r3, #1
    7cae:	2b00      	cmp	r3, #0
    7cb0:	d004      	beq.n	7cbc <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    7cb2:	4a36      	ldr	r2, [pc, #216]	; (7d8c <_gclk_init_generators_by_fref+0xec>)
    7cb4:	2100      	movs	r1, #0
    7cb6:	4836      	ldr	r0, [pc, #216]	; (7d90 <_gclk_init_generators_by_fref+0xf0>)
    7cb8:	4b36      	ldr	r3, [pc, #216]	; (7d94 <_gclk_init_generators_by_fref+0xf4>)
    7cba:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	f003 0302 	and.w	r3, r3, #2
    7cc2:	2b00      	cmp	r3, #0
    7cc4:	d004      	beq.n	7cd0 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    7cc6:	4a34      	ldr	r2, [pc, #208]	; (7d98 <_gclk_init_generators_by_fref+0xf8>)
    7cc8:	2101      	movs	r1, #1
    7cca:	4831      	ldr	r0, [pc, #196]	; (7d90 <_gclk_init_generators_by_fref+0xf0>)
    7ccc:	4b31      	ldr	r3, [pc, #196]	; (7d94 <_gclk_init_generators_by_fref+0xf4>)
    7cce:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    7cd0:	687b      	ldr	r3, [r7, #4]
    7cd2:	f003 0304 	and.w	r3, r3, #4
    7cd6:	2b00      	cmp	r3, #0
    7cd8:	d004      	beq.n	7ce4 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    7cda:	4a30      	ldr	r2, [pc, #192]	; (7d9c <_gclk_init_generators_by_fref+0xfc>)
    7cdc:	2102      	movs	r1, #2
    7cde:	482c      	ldr	r0, [pc, #176]	; (7d90 <_gclk_init_generators_by_fref+0xf0>)
    7ce0:	4b2c      	ldr	r3, [pc, #176]	; (7d94 <_gclk_init_generators_by_fref+0xf4>)
    7ce2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    7ce4:	687b      	ldr	r3, [r7, #4]
    7ce6:	f003 0308 	and.w	r3, r3, #8
    7cea:	2b00      	cmp	r3, #0
    7cec:	d004      	beq.n	7cf8 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    7cee:	4a2c      	ldr	r2, [pc, #176]	; (7da0 <_gclk_init_generators_by_fref+0x100>)
    7cf0:	2103      	movs	r1, #3
    7cf2:	4827      	ldr	r0, [pc, #156]	; (7d90 <_gclk_init_generators_by_fref+0xf0>)
    7cf4:	4b27      	ldr	r3, [pc, #156]	; (7d94 <_gclk_init_generators_by_fref+0xf4>)
    7cf6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    7cf8:	687b      	ldr	r3, [r7, #4]
    7cfa:	f003 0310 	and.w	r3, r3, #16
    7cfe:	2b00      	cmp	r3, #0
    7d00:	d004      	beq.n	7d0c <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    7d02:	4a28      	ldr	r2, [pc, #160]	; (7da4 <_gclk_init_generators_by_fref+0x104>)
    7d04:	2104      	movs	r1, #4
    7d06:	4822      	ldr	r0, [pc, #136]	; (7d90 <_gclk_init_generators_by_fref+0xf0>)
    7d08:	4b22      	ldr	r3, [pc, #136]	; (7d94 <_gclk_init_generators_by_fref+0xf4>)
    7d0a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    7d0c:	687b      	ldr	r3, [r7, #4]
    7d0e:	f003 0320 	and.w	r3, r3, #32
    7d12:	2b00      	cmp	r3, #0
    7d14:	d004      	beq.n	7d20 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    7d16:	4a24      	ldr	r2, [pc, #144]	; (7da8 <_gclk_init_generators_by_fref+0x108>)
    7d18:	2105      	movs	r1, #5
    7d1a:	481d      	ldr	r0, [pc, #116]	; (7d90 <_gclk_init_generators_by_fref+0xf0>)
    7d1c:	4b1d      	ldr	r3, [pc, #116]	; (7d94 <_gclk_init_generators_by_fref+0xf4>)
    7d1e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    7d20:	687b      	ldr	r3, [r7, #4]
    7d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7d26:	2b00      	cmp	r3, #0
    7d28:	d004      	beq.n	7d34 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    7d2a:	4a20      	ldr	r2, [pc, #128]	; (7dac <_gclk_init_generators_by_fref+0x10c>)
    7d2c:	2106      	movs	r1, #6
    7d2e:	4818      	ldr	r0, [pc, #96]	; (7d90 <_gclk_init_generators_by_fref+0xf0>)
    7d30:	4b18      	ldr	r3, [pc, #96]	; (7d94 <_gclk_init_generators_by_fref+0xf4>)
    7d32:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    7d34:	687b      	ldr	r3, [r7, #4]
    7d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7d3a:	2b00      	cmp	r3, #0
    7d3c:	d004      	beq.n	7d48 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    7d3e:	4a1c      	ldr	r2, [pc, #112]	; (7db0 <_gclk_init_generators_by_fref+0x110>)
    7d40:	2107      	movs	r1, #7
    7d42:	4813      	ldr	r0, [pc, #76]	; (7d90 <_gclk_init_generators_by_fref+0xf0>)
    7d44:	4b13      	ldr	r3, [pc, #76]	; (7d94 <_gclk_init_generators_by_fref+0xf4>)
    7d46:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    7d48:	687b      	ldr	r3, [r7, #4]
    7d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7d4e:	2b00      	cmp	r3, #0
    7d50:	d004      	beq.n	7d5c <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    7d52:	4a18      	ldr	r2, [pc, #96]	; (7db4 <_gclk_init_generators_by_fref+0x114>)
    7d54:	2108      	movs	r1, #8
    7d56:	480e      	ldr	r0, [pc, #56]	; (7d90 <_gclk_init_generators_by_fref+0xf0>)
    7d58:	4b0e      	ldr	r3, [pc, #56]	; (7d94 <_gclk_init_generators_by_fref+0xf4>)
    7d5a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    7d5c:	687b      	ldr	r3, [r7, #4]
    7d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    7d62:	2b00      	cmp	r3, #0
    7d64:	d004      	beq.n	7d70 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    7d66:	4a14      	ldr	r2, [pc, #80]	; (7db8 <_gclk_init_generators_by_fref+0x118>)
    7d68:	210a      	movs	r1, #10
    7d6a:	4809      	ldr	r0, [pc, #36]	; (7d90 <_gclk_init_generators_by_fref+0xf0>)
    7d6c:	4b09      	ldr	r3, [pc, #36]	; (7d94 <_gclk_init_generators_by_fref+0xf4>)
    7d6e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    7d70:	687b      	ldr	r3, [r7, #4]
    7d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    7d76:	2b00      	cmp	r3, #0
    7d78:	d004      	beq.n	7d84 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    7d7a:	4a10      	ldr	r2, [pc, #64]	; (7dbc <_gclk_init_generators_by_fref+0x11c>)
    7d7c:	210b      	movs	r1, #11
    7d7e:	4804      	ldr	r0, [pc, #16]	; (7d90 <_gclk_init_generators_by_fref+0xf0>)
    7d80:	4b04      	ldr	r3, [pc, #16]	; (7d94 <_gclk_init_generators_by_fref+0xf4>)
    7d82:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    7d84:	bf00      	nop
    7d86:	3708      	adds	r7, #8
    7d88:	46bd      	mov	sp, r7
    7d8a:	bd80      	pop	{r7, pc}
    7d8c:	00010107 	.word	0x00010107
    7d90:	40001c00 	.word	0x40001c00
    7d94:	00007c71 	.word	0x00007c71
    7d98:	00010907 	.word	0x00010907
    7d9c:	00010906 	.word	0x00010906
    7da0:	00020908 	.word	0x00020908
    7da4:	00010901 	.word	0x00010901
    7da8:	00062901 	.word	0x00062901
    7dac:	000c2901 	.word	0x000c2901
    7db0:	00082908 	.word	0x00082908
    7db4:	00032901 	.word	0x00032901
    7db8:	00010905 	.word	0x00010905
    7dbc:	00041905 	.word	0x00041905

00007dc0 <hri_mclk_write_CPUDIV_reg>:
{
    7dc0:	b480      	push	{r7}
    7dc2:	b083      	sub	sp, #12
    7dc4:	af00      	add	r7, sp, #0
    7dc6:	6078      	str	r0, [r7, #4]
    7dc8:	460b      	mov	r3, r1
    7dca:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    7dcc:	687b      	ldr	r3, [r7, #4]
    7dce:	78fa      	ldrb	r2, [r7, #3]
    7dd0:	715a      	strb	r2, [r3, #5]
}
    7dd2:	bf00      	nop
    7dd4:	370c      	adds	r7, #12
    7dd6:	46bd      	mov	sp, r7
    7dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ddc:	4770      	bx	lr
	...

00007de0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    7de0:	b580      	push	{r7, lr}
    7de2:	b082      	sub	sp, #8
    7de4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    7de6:	4b05      	ldr	r3, [pc, #20]	; (7dfc <_mclk_init+0x1c>)
    7de8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    7dea:	2101      	movs	r1, #1
    7dec:	6878      	ldr	r0, [r7, #4]
    7dee:	4b04      	ldr	r3, [pc, #16]	; (7e00 <_mclk_init+0x20>)
    7df0:	4798      	blx	r3
}
    7df2:	bf00      	nop
    7df4:	3708      	adds	r7, #8
    7df6:	46bd      	mov	sp, r7
    7df8:	bd80      	pop	{r7, pc}
    7dfa:	bf00      	nop
    7dfc:	40000800 	.word	0x40000800
    7e00:	00007dc1 	.word	0x00007dc1

00007e04 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    7e04:	b480      	push	{r7}
    7e06:	b083      	sub	sp, #12
    7e08:	af00      	add	r7, sp, #0
    7e0a:	6078      	str	r0, [r7, #4]
    7e0c:	460b      	mov	r3, r1
    7e0e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    7e10:	687b      	ldr	r3, [r7, #4]
    7e12:	78fa      	ldrb	r2, [r7, #3]
    7e14:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7e16:	bf00      	nop
    7e18:	370c      	adds	r7, #12
    7e1a:	46bd      	mov	sp, r7
    7e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e20:	4770      	bx	lr

00007e22 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    7e22:	b480      	push	{r7}
    7e24:	b083      	sub	sp, #12
    7e26:	af00      	add	r7, sp, #0
    7e28:	6078      	str	r0, [r7, #4]
    7e2a:	460b      	mov	r3, r1
    7e2c:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    7e2e:	687b      	ldr	r3, [r7, #4]
    7e30:	887a      	ldrh	r2, [r7, #2]
    7e32:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7e34:	bf00      	nop
    7e36:	370c      	adds	r7, #12
    7e38:	46bd      	mov	sp, r7
    7e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e3e:	4770      	bx	lr

00007e40 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    7e40:	b480      	push	{r7}
    7e42:	b083      	sub	sp, #12
    7e44:	af00      	add	r7, sp, #0
    7e46:	6078      	str	r0, [r7, #4]
    7e48:	460b      	mov	r3, r1
    7e4a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    7e4c:	687b      	ldr	r3, [r7, #4]
    7e4e:	78fa      	ldrb	r2, [r7, #3]
    7e50:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7e52:	bf00      	nop
    7e54:	370c      	adds	r7, #12
    7e56:	46bd      	mov	sp, r7
    7e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e5c:	4770      	bx	lr

00007e5e <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    7e5e:	b480      	push	{r7}
    7e60:	b083      	sub	sp, #12
    7e62:	af00      	add	r7, sp, #0
    7e64:	6078      	str	r0, [r7, #4]
    7e66:	460b      	mov	r3, r1
    7e68:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    7e6a:	687b      	ldr	r3, [r7, #4]
    7e6c:	78fa      	ldrb	r2, [r7, #3]
    7e6e:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7e70:	bf00      	nop
    7e72:	370c      	adds	r7, #12
    7e74:	46bd      	mov	sp, r7
    7e76:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e7a:	4770      	bx	lr

00007e7c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    7e7c:	b480      	push	{r7}
    7e7e:	b085      	sub	sp, #20
    7e80:	af00      	add	r7, sp, #0
    7e82:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    7e84:	687b      	ldr	r3, [r7, #4]
    7e86:	69db      	ldr	r3, [r3, #28]
    7e88:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    7e8a:	68fb      	ldr	r3, [r7, #12]
    7e8c:	0a1b      	lsrs	r3, r3, #8
    7e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7e92:	60fb      	str	r3, [r7, #12]
	return tmp;
    7e94:	68fb      	ldr	r3, [r7, #12]
}
    7e96:	4618      	mov	r0, r3
    7e98:	3714      	adds	r7, #20
    7e9a:	46bd      	mov	sp, r7
    7e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ea0:	4770      	bx	lr

00007ea2 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    7ea2:	b480      	push	{r7}
    7ea4:	b083      	sub	sp, #12
    7ea6:	af00      	add	r7, sp, #0
    7ea8:	6078      	str	r0, [r7, #4]
    7eaa:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    7eac:	687b      	ldr	r3, [r7, #4]
    7eae:	683a      	ldr	r2, [r7, #0]
    7eb0:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7eb2:	bf00      	nop
    7eb4:	370c      	adds	r7, #12
    7eb6:	46bd      	mov	sp, r7
    7eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ebc:	4770      	bx	lr
	...

00007ec0 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    7ec0:	b580      	push	{r7, lr}
    7ec2:	b082      	sub	sp, #8
    7ec4:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    7ec6:	4b13      	ldr	r3, [pc, #76]	; (7f14 <_osc32kctrl_init_sources+0x54>)
    7ec8:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    7eca:	2300      	movs	r3, #0
    7ecc:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    7ece:	f242 018e 	movw	r1, #8334	; 0x208e
    7ed2:	6878      	ldr	r0, [r7, #4]
    7ed4:	4b10      	ldr	r3, [pc, #64]	; (7f18 <_osc32kctrl_init_sources+0x58>)
    7ed6:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    7ed8:	2100      	movs	r1, #0
    7eda:	6878      	ldr	r0, [r7, #4]
    7edc:	4b0f      	ldr	r3, [pc, #60]	; (7f1c <_osc32kctrl_init_sources+0x5c>)
    7ede:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    7ee0:	2100      	movs	r1, #0
    7ee2:	6878      	ldr	r0, [r7, #4]
    7ee4:	4b0e      	ldr	r3, [pc, #56]	; (7f20 <_osc32kctrl_init_sources+0x60>)
    7ee6:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    7ee8:	6878      	ldr	r0, [r7, #4]
    7eea:	4b0e      	ldr	r3, [pc, #56]	; (7f24 <_osc32kctrl_init_sources+0x64>)
    7eec:	4798      	blx	r3
    7eee:	4603      	mov	r3, r0
    7ef0:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    7ef2:	887b      	ldrh	r3, [r7, #2]
    7ef4:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    7ef6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    7efa:	4619      	mov	r1, r3
    7efc:	6878      	ldr	r0, [r7, #4]
    7efe:	4b0a      	ldr	r3, [pc, #40]	; (7f28 <_osc32kctrl_init_sources+0x68>)
    7f00:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    7f02:	2100      	movs	r1, #0
    7f04:	6878      	ldr	r0, [r7, #4]
    7f06:	4b09      	ldr	r3, [pc, #36]	; (7f2c <_osc32kctrl_init_sources+0x6c>)
    7f08:	4798      	blx	r3
	(void)calib;
}
    7f0a:	bf00      	nop
    7f0c:	3708      	adds	r7, #8
    7f0e:	46bd      	mov	sp, r7
    7f10:	bd80      	pop	{r7, pc}
    7f12:	bf00      	nop
    7f14:	40001400 	.word	0x40001400
    7f18:	00007e23 	.word	0x00007e23
    7f1c:	00007e41 	.word	0x00007e41
    7f20:	00007e5f 	.word	0x00007e5f
    7f24:	00007e7d 	.word	0x00007e7d
    7f28:	00007ea3 	.word	0x00007ea3
    7f2c:	00007e05 	.word	0x00007e05

00007f30 <hri_gclk_wait_for_sync>:
{
    7f30:	b480      	push	{r7}
    7f32:	b083      	sub	sp, #12
    7f34:	af00      	add	r7, sp, #0
    7f36:	6078      	str	r0, [r7, #4]
    7f38:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7f3a:	bf00      	nop
    7f3c:	687b      	ldr	r3, [r7, #4]
    7f3e:	685a      	ldr	r2, [r3, #4]
    7f40:	683b      	ldr	r3, [r7, #0]
    7f42:	4013      	ands	r3, r2
    7f44:	2b00      	cmp	r3, #0
    7f46:	d1f9      	bne.n	7f3c <hri_gclk_wait_for_sync+0xc>
}
    7f48:	bf00      	nop
    7f4a:	370c      	adds	r7, #12
    7f4c:	46bd      	mov	sp, r7
    7f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f52:	4770      	bx	lr

00007f54 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    7f54:	b480      	push	{r7}
    7f56:	b083      	sub	sp, #12
    7f58:	af00      	add	r7, sp, #0
    7f5a:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    7f5c:	687b      	ldr	r3, [r7, #4]
    7f5e:	685b      	ldr	r3, [r3, #4]
    7f60:	089b      	lsrs	r3, r3, #2
    7f62:	f003 0301 	and.w	r3, r3, #1
    7f66:	2b00      	cmp	r3, #0
    7f68:	bf14      	ite	ne
    7f6a:	2301      	movne	r3, #1
    7f6c:	2300      	moveq	r3, #0
    7f6e:	b2db      	uxtb	r3, r3
}
    7f70:	4618      	mov	r0, r3
    7f72:	370c      	adds	r7, #12
    7f74:	46bd      	mov	sp, r7
    7f76:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f7a:	4770      	bx	lr

00007f7c <hri_gclk_read_SYNCBUSY_reg>:
{
    7f7c:	b480      	push	{r7}
    7f7e:	b083      	sub	sp, #12
    7f80:	af00      	add	r7, sp, #0
    7f82:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    7f84:	687b      	ldr	r3, [r7, #4]
    7f86:	685b      	ldr	r3, [r3, #4]
}
    7f88:	4618      	mov	r0, r3
    7f8a:	370c      	adds	r7, #12
    7f8c:	46bd      	mov	sp, r7
    7f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f92:	4770      	bx	lr

00007f94 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    7f94:	b580      	push	{r7, lr}
    7f96:	b086      	sub	sp, #24
    7f98:	af00      	add	r7, sp, #0
    7f9a:	60f8      	str	r0, [r7, #12]
    7f9c:	460b      	mov	r3, r1
    7f9e:	607a      	str	r2, [r7, #4]
    7fa0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    7fa2:	7afa      	ldrb	r2, [r7, #11]
    7fa4:	68fb      	ldr	r3, [r7, #12]
    7fa6:	3208      	adds	r2, #8
    7fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7fac:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    7fae:	697b      	ldr	r3, [r7, #20]
    7fb0:	f023 030f 	bic.w	r3, r3, #15
    7fb4:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    7fb6:	687b      	ldr	r3, [r7, #4]
    7fb8:	f003 030f 	and.w	r3, r3, #15
    7fbc:	697a      	ldr	r2, [r7, #20]
    7fbe:	4313      	orrs	r3, r2
    7fc0:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    7fc2:	7afa      	ldrb	r2, [r7, #11]
    7fc4:	68fb      	ldr	r3, [r7, #12]
    7fc6:	3208      	adds	r2, #8
    7fc8:	6979      	ldr	r1, [r7, #20]
    7fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    7fce:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    7fd2:	68f8      	ldr	r0, [r7, #12]
    7fd4:	4b02      	ldr	r3, [pc, #8]	; (7fe0 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    7fd6:	4798      	blx	r3
}
    7fd8:	bf00      	nop
    7fda:	3718      	adds	r7, #24
    7fdc:	46bd      	mov	sp, r7
    7fde:	bd80      	pop	{r7, pc}
    7fe0:	00007f31 	.word	0x00007f31

00007fe4 <hri_gclk_write_PCHCTRL_reg>:
{
    7fe4:	b480      	push	{r7}
    7fe6:	b085      	sub	sp, #20
    7fe8:	af00      	add	r7, sp, #0
    7fea:	60f8      	str	r0, [r7, #12]
    7fec:	460b      	mov	r3, r1
    7fee:	607a      	str	r2, [r7, #4]
    7ff0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    7ff2:	7afa      	ldrb	r2, [r7, #11]
    7ff4:	68fb      	ldr	r3, [r7, #12]
    7ff6:	3220      	adds	r2, #32
    7ff8:	6879      	ldr	r1, [r7, #4]
    7ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7ffe:	bf00      	nop
    8000:	3714      	adds	r7, #20
    8002:	46bd      	mov	sp, r7
    8004:	f85d 7b04 	ldr.w	r7, [sp], #4
    8008:	4770      	bx	lr

0000800a <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    800a:	b480      	push	{r7}
    800c:	b085      	sub	sp, #20
    800e:	af00      	add	r7, sp, #0
    8010:	60f8      	str	r0, [r7, #12]
    8012:	460b      	mov	r3, r1
    8014:	607a      	str	r2, [r7, #4]
    8016:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    8018:	bf00      	nop
    801a:	7afa      	ldrb	r2, [r7, #11]
    801c:	68f9      	ldr	r1, [r7, #12]
    801e:	4613      	mov	r3, r2
    8020:	009b      	lsls	r3, r3, #2
    8022:	4413      	add	r3, r2
    8024:	009b      	lsls	r3, r3, #2
    8026:	440b      	add	r3, r1
    8028:	333c      	adds	r3, #60	; 0x3c
    802a:	681a      	ldr	r2, [r3, #0]
    802c:	687b      	ldr	r3, [r7, #4]
    802e:	4013      	ands	r3, r2
    8030:	2b00      	cmp	r3, #0
    8032:	d1f2      	bne.n	801a <hri_oscctrl_wait_for_sync+0x10>
	};
}
    8034:	bf00      	nop
    8036:	3714      	adds	r7, #20
    8038:	46bd      	mov	sp, r7
    803a:	f85d 7b04 	ldr.w	r7, [sp], #4
    803e:	4770      	bx	lr

00008040 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    8040:	b480      	push	{r7}
    8042:	b083      	sub	sp, #12
    8044:	af00      	add	r7, sp, #0
    8046:	6078      	str	r0, [r7, #4]
    8048:	460b      	mov	r3, r1
    804a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    804c:	78fa      	ldrb	r2, [r7, #3]
    804e:	6879      	ldr	r1, [r7, #4]
    8050:	4613      	mov	r3, r2
    8052:	009b      	lsls	r3, r3, #2
    8054:	4413      	add	r3, r2
    8056:	009b      	lsls	r3, r3, #2
    8058:	440b      	add	r3, r1
    805a:	3340      	adds	r3, #64	; 0x40
    805c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    805e:	f003 0301 	and.w	r3, r3, #1
    8062:	2b00      	cmp	r3, #0
    8064:	bf14      	ite	ne
    8066:	2301      	movne	r3, #1
    8068:	2300      	moveq	r3, #0
    806a:	b2db      	uxtb	r3, r3
}
    806c:	4618      	mov	r0, r3
    806e:	370c      	adds	r7, #12
    8070:	46bd      	mov	sp, r7
    8072:	f85d 7b04 	ldr.w	r7, [sp], #4
    8076:	4770      	bx	lr

00008078 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    8078:	b480      	push	{r7}
    807a:	b083      	sub	sp, #12
    807c:	af00      	add	r7, sp, #0
    807e:	6078      	str	r0, [r7, #4]
    8080:	460b      	mov	r3, r1
    8082:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    8084:	78fa      	ldrb	r2, [r7, #3]
    8086:	6879      	ldr	r1, [r7, #4]
    8088:	4613      	mov	r3, r2
    808a:	009b      	lsls	r3, r3, #2
    808c:	4413      	add	r3, r2
    808e:	009b      	lsls	r3, r3, #2
    8090:	440b      	add	r3, r1
    8092:	3340      	adds	r3, #64	; 0x40
    8094:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    8096:	085b      	lsrs	r3, r3, #1
    8098:	f003 0301 	and.w	r3, r3, #1
    809c:	2b00      	cmp	r3, #0
    809e:	bf14      	ite	ne
    80a0:	2301      	movne	r3, #1
    80a2:	2300      	moveq	r3, #0
    80a4:	b2db      	uxtb	r3, r3
}
    80a6:	4618      	mov	r0, r3
    80a8:	370c      	adds	r7, #12
    80aa:	46bd      	mov	sp, r7
    80ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    80b0:	4770      	bx	lr
	...

000080b4 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    80b4:	b580      	push	{r7, lr}
    80b6:	b082      	sub	sp, #8
    80b8:	af00      	add	r7, sp, #0
    80ba:	6078      	str	r0, [r7, #4]
    80bc:	460b      	mov	r3, r1
    80be:	70fb      	strb	r3, [r7, #3]
    80c0:	4613      	mov	r3, r2
    80c2:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    80c4:	78fa      	ldrb	r2, [r7, #3]
    80c6:	6879      	ldr	r1, [r7, #4]
    80c8:	4613      	mov	r3, r2
    80ca:	009b      	lsls	r3, r3, #2
    80cc:	4413      	add	r3, r2
    80ce:	009b      	lsls	r3, r3, #2
    80d0:	440b      	add	r3, r1
    80d2:	3330      	adds	r3, #48	; 0x30
    80d4:	78ba      	ldrb	r2, [r7, #2]
    80d6:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    80d8:	78fb      	ldrb	r3, [r7, #3]
    80da:	2202      	movs	r2, #2
    80dc:	4619      	mov	r1, r3
    80de:	6878      	ldr	r0, [r7, #4]
    80e0:	4b02      	ldr	r3, [pc, #8]	; (80ec <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    80e2:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    80e4:	bf00      	nop
    80e6:	3708      	adds	r7, #8
    80e8:	46bd      	mov	sp, r7
    80ea:	bd80      	pop	{r7, pc}
    80ec:	0000800b 	.word	0x0000800b

000080f0 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    80f0:	b580      	push	{r7, lr}
    80f2:	b084      	sub	sp, #16
    80f4:	af00      	add	r7, sp, #0
    80f6:	60f8      	str	r0, [r7, #12]
    80f8:	460b      	mov	r3, r1
    80fa:	607a      	str	r2, [r7, #4]
    80fc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    80fe:	7afa      	ldrb	r2, [r7, #11]
    8100:	68f9      	ldr	r1, [r7, #12]
    8102:	4613      	mov	r3, r2
    8104:	009b      	lsls	r3, r3, #2
    8106:	4413      	add	r3, r2
    8108:	009b      	lsls	r3, r3, #2
    810a:	440b      	add	r3, r1
    810c:	3334      	adds	r3, #52	; 0x34
    810e:	687a      	ldr	r2, [r7, #4]
    8110:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    8112:	7afb      	ldrb	r3, [r7, #11]
    8114:	2206      	movs	r2, #6
    8116:	4619      	mov	r1, r3
    8118:	68f8      	ldr	r0, [r7, #12]
    811a:	4b03      	ldr	r3, [pc, #12]	; (8128 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    811c:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    811e:	bf00      	nop
    8120:	3710      	adds	r7, #16
    8122:	46bd      	mov	sp, r7
    8124:	bd80      	pop	{r7, pc}
    8126:	bf00      	nop
    8128:	0000800b 	.word	0x0000800b

0000812c <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    812c:	b480      	push	{r7}
    812e:	b085      	sub	sp, #20
    8130:	af00      	add	r7, sp, #0
    8132:	60f8      	str	r0, [r7, #12]
    8134:	460b      	mov	r3, r1
    8136:	607a      	str	r2, [r7, #4]
    8138:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    813a:	7afa      	ldrb	r2, [r7, #11]
    813c:	68f9      	ldr	r1, [r7, #12]
    813e:	4613      	mov	r3, r2
    8140:	009b      	lsls	r3, r3, #2
    8142:	4413      	add	r3, r2
    8144:	009b      	lsls	r3, r3, #2
    8146:	440b      	add	r3, r1
    8148:	3338      	adds	r3, #56	; 0x38
    814a:	687a      	ldr	r2, [r7, #4]
    814c:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    814e:	bf00      	nop
    8150:	3714      	adds	r7, #20
    8152:	46bd      	mov	sp, r7
    8154:	f85d 7b04 	ldr.w	r7, [sp], #4
    8158:	4770      	bx	lr

0000815a <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    815a:	b480      	push	{r7}
    815c:	b083      	sub	sp, #12
    815e:	af00      	add	r7, sp, #0
    8160:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    8162:	687b      	ldr	r3, [r7, #4]
    8164:	691b      	ldr	r3, [r3, #16]
    8166:	085b      	lsrs	r3, r3, #1
    8168:	f003 0301 	and.w	r3, r3, #1
    816c:	2b00      	cmp	r3, #0
    816e:	bf14      	ite	ne
    8170:	2301      	movne	r3, #1
    8172:	2300      	moveq	r3, #0
    8174:	b2db      	uxtb	r3, r3
}
    8176:	4618      	mov	r0, r3
    8178:	370c      	adds	r7, #12
    817a:	46bd      	mov	sp, r7
    817c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8180:	4770      	bx	lr

00008182 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    8182:	b480      	push	{r7}
    8184:	b083      	sub	sp, #12
    8186:	af00      	add	r7, sp, #0
    8188:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    818a:	687b      	ldr	r3, [r7, #4]
    818c:	691b      	ldr	r3, [r3, #16]
    818e:	0a1b      	lsrs	r3, r3, #8
    8190:	f003 0301 	and.w	r3, r3, #1
    8194:	2b00      	cmp	r3, #0
    8196:	bf14      	ite	ne
    8198:	2301      	movne	r3, #1
    819a:	2300      	moveq	r3, #0
    819c:	b2db      	uxtb	r3, r3
}
    819e:	4618      	mov	r0, r3
    81a0:	370c      	adds	r7, #12
    81a2:	46bd      	mov	sp, r7
    81a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    81a8:	4770      	bx	lr

000081aa <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    81aa:	b480      	push	{r7}
    81ac:	b085      	sub	sp, #20
    81ae:	af00      	add	r7, sp, #0
    81b0:	6078      	str	r0, [r7, #4]
    81b2:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    81b4:	687b      	ldr	r3, [r7, #4]
    81b6:	691b      	ldr	r3, [r3, #16]
    81b8:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    81ba:	68fa      	ldr	r2, [r7, #12]
    81bc:	683b      	ldr	r3, [r7, #0]
    81be:	4013      	ands	r3, r2
    81c0:	60fb      	str	r3, [r7, #12]
	return tmp;
    81c2:	68fb      	ldr	r3, [r7, #12]
}
    81c4:	4618      	mov	r0, r3
    81c6:	3714      	adds	r7, #20
    81c8:	46bd      	mov	sp, r7
    81ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    81ce:	4770      	bx	lr

000081d0 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    81d0:	b480      	push	{r7}
    81d2:	b085      	sub	sp, #20
    81d4:	af00      	add	r7, sp, #0
    81d6:	60f8      	str	r0, [r7, #12]
    81d8:	460b      	mov	r3, r1
    81da:	607a      	str	r2, [r7, #4]
    81dc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    81de:	7afb      	ldrb	r3, [r7, #11]
    81e0:	68fa      	ldr	r2, [r7, #12]
    81e2:	3304      	adds	r3, #4
    81e4:	009b      	lsls	r3, r3, #2
    81e6:	4413      	add	r3, r2
    81e8:	687a      	ldr	r2, [r7, #4]
    81ea:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    81ec:	bf00      	nop
    81ee:	3714      	adds	r7, #20
    81f0:	46bd      	mov	sp, r7
    81f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    81f6:	4770      	bx	lr

000081f8 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    81f8:	b480      	push	{r7}
    81fa:	b083      	sub	sp, #12
    81fc:	af00      	add	r7, sp, #0
    81fe:	6078      	str	r0, [r7, #4]
    8200:	460b      	mov	r3, r1
    8202:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    8204:	687b      	ldr	r3, [r7, #4]
    8206:	78fa      	ldrb	r2, [r7, #3]
    8208:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    820a:	bf00      	nop
    820c:	370c      	adds	r7, #12
    820e:	46bd      	mov	sp, r7
    8210:	f85d 7b04 	ldr.w	r7, [sp], #4
    8214:	4770      	bx	lr

00008216 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    8216:	b480      	push	{r7}
    8218:	b085      	sub	sp, #20
    821a:	af00      	add	r7, sp, #0
    821c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    821e:	687b      	ldr	r3, [r7, #4]
    8220:	f893 3020 	ldrb.w	r3, [r3, #32]
    8224:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8226:	7bfb      	ldrb	r3, [r7, #15]
    8228:	f003 0301 	and.w	r3, r3, #1
    822c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    822e:	7bfb      	ldrb	r3, [r7, #15]
    8230:	2b00      	cmp	r3, #0
    8232:	bf14      	ite	ne
    8234:	2301      	movne	r3, #1
    8236:	2300      	moveq	r3, #0
    8238:	b2db      	uxtb	r3, r3
}
    823a:	4618      	mov	r0, r3
    823c:	3714      	adds	r7, #20
    823e:	46bd      	mov	sp, r7
    8240:	f85d 7b04 	ldr.w	r7, [sp], #4
    8244:	4770      	bx	lr

00008246 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    8246:	b480      	push	{r7}
    8248:	b083      	sub	sp, #12
    824a:	af00      	add	r7, sp, #0
    824c:	6078      	str	r0, [r7, #4]
    824e:	460b      	mov	r3, r1
    8250:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    8252:	687b      	ldr	r3, [r7, #4]
    8254:	78fa      	ldrb	r2, [r7, #3]
    8256:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    825a:	bf00      	nop
    825c:	370c      	adds	r7, #12
    825e:	46bd      	mov	sp, r7
    8260:	f85d 7b04 	ldr.w	r7, [sp], #4
    8264:	4770      	bx	lr

00008266 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    8266:	b480      	push	{r7}
    8268:	b083      	sub	sp, #12
    826a:	af00      	add	r7, sp, #0
    826c:	6078      	str	r0, [r7, #4]
    826e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    8270:	687b      	ldr	r3, [r7, #4]
    8272:	683a      	ldr	r2, [r7, #0]
    8274:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    8276:	bf00      	nop
    8278:	370c      	adds	r7, #12
    827a:	46bd      	mov	sp, r7
    827c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8280:	4770      	bx	lr

00008282 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    8282:	b480      	push	{r7}
    8284:	b083      	sub	sp, #12
    8286:	af00      	add	r7, sp, #0
    8288:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    828a:	687b      	ldr	r3, [r7, #4]
    828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    828e:	4618      	mov	r0, r3
    8290:	370c      	adds	r7, #12
    8292:	46bd      	mov	sp, r7
    8294:	f85d 7b04 	ldr.w	r7, [sp], #4
    8298:	4770      	bx	lr

0000829a <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    829a:	b480      	push	{r7}
    829c:	b083      	sub	sp, #12
    829e:	af00      	add	r7, sp, #0
    82a0:	6078      	str	r0, [r7, #4]
    82a2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    82a4:	687b      	ldr	r3, [r7, #4]
    82a6:	683a      	ldr	r2, [r7, #0]
    82a8:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    82aa:	bf00      	nop
    82ac:	370c      	adds	r7, #12
    82ae:	46bd      	mov	sp, r7
    82b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    82b4:	4770      	bx	lr

000082b6 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    82b6:	b480      	push	{r7}
    82b8:	b085      	sub	sp, #20
    82ba:	af00      	add	r7, sp, #0
    82bc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    82be:	687b      	ldr	r3, [r7, #4]
    82c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    82c4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    82c6:	7bfb      	ldrb	r3, [r7, #15]
    82c8:	085b      	lsrs	r3, r3, #1
    82ca:	b2db      	uxtb	r3, r3
    82cc:	f003 0301 	and.w	r3, r3, #1
    82d0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    82d2:	7bfb      	ldrb	r3, [r7, #15]
    82d4:	2b00      	cmp	r3, #0
    82d6:	bf14      	ite	ne
    82d8:	2301      	movne	r3, #1
    82da:	2300      	moveq	r3, #0
    82dc:	b2db      	uxtb	r3, r3
}
    82de:	4618      	mov	r0, r3
    82e0:	3714      	adds	r7, #20
    82e2:	46bd      	mov	sp, r7
    82e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    82e8:	4770      	bx	lr

000082ea <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    82ea:	b480      	push	{r7}
    82ec:	b085      	sub	sp, #20
    82ee:	af00      	add	r7, sp, #0
    82f0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    82f2:	687b      	ldr	r3, [r7, #4]
    82f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    82f8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    82fa:	7bfb      	ldrb	r3, [r7, #15]
    82fc:	089b      	lsrs	r3, r3, #2
    82fe:	b2db      	uxtb	r3, r3
    8300:	f003 0301 	and.w	r3, r3, #1
    8304:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8306:	7bfb      	ldrb	r3, [r7, #15]
    8308:	2b00      	cmp	r3, #0
    830a:	bf14      	ite	ne
    830c:	2301      	movne	r3, #1
    830e:	2300      	moveq	r3, #0
    8310:	b2db      	uxtb	r3, r3
}
    8312:	4618      	mov	r0, r3
    8314:	3714      	adds	r7, #20
    8316:	46bd      	mov	sp, r7
    8318:	f85d 7b04 	ldr.w	r7, [sp], #4
    831c:	4770      	bx	lr

0000831e <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    831e:	b480      	push	{r7}
    8320:	b085      	sub	sp, #20
    8322:	af00      	add	r7, sp, #0
    8324:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    8326:	687b      	ldr	r3, [r7, #4]
    8328:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    832c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    832e:	7bfb      	ldrb	r3, [r7, #15]
    8330:	08db      	lsrs	r3, r3, #3
    8332:	b2db      	uxtb	r3, r3
    8334:	f003 0301 	and.w	r3, r3, #1
    8338:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    833a:	7bfb      	ldrb	r3, [r7, #15]
    833c:	2b00      	cmp	r3, #0
    833e:	bf14      	ite	ne
    8340:	2301      	movne	r3, #1
    8342:	2300      	moveq	r3, #0
    8344:	b2db      	uxtb	r3, r3
}
    8346:	4618      	mov	r0, r3
    8348:	3714      	adds	r7, #20
    834a:	46bd      	mov	sp, r7
    834c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8350:	4770      	bx	lr

00008352 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    8352:	b480      	push	{r7}
    8354:	b085      	sub	sp, #20
    8356:	af00      	add	r7, sp, #0
    8358:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    835a:	687b      	ldr	r3, [r7, #4]
    835c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    8360:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    8362:	7bfb      	ldrb	r3, [r7, #15]
    8364:	091b      	lsrs	r3, r3, #4
    8366:	b2db      	uxtb	r3, r3
    8368:	f003 0301 	and.w	r3, r3, #1
    836c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    836e:	7bfb      	ldrb	r3, [r7, #15]
    8370:	2b00      	cmp	r3, #0
    8372:	bf14      	ite	ne
    8374:	2301      	movne	r3, #1
    8376:	2300      	moveq	r3, #0
    8378:	b2db      	uxtb	r3, r3
}
    837a:	4618      	mov	r0, r3
    837c:	3714      	adds	r7, #20
    837e:	46bd      	mov	sp, r7
    8380:	f85d 7b04 	ldr.w	r7, [sp], #4
    8384:	4770      	bx	lr
	...

00008388 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    8388:	b580      	push	{r7, lr}
    838a:	b082      	sub	sp, #8
    838c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    838e:	4b0a      	ldr	r3, [pc, #40]	; (83b8 <_oscctrl_init_sources+0x30>)
    8390:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    8392:	4a0a      	ldr	r2, [pc, #40]	; (83bc <_oscctrl_init_sources+0x34>)
    8394:	2101      	movs	r1, #1
    8396:	6878      	ldr	r0, [r7, #4]
    8398:	4b09      	ldr	r3, [pc, #36]	; (83c0 <_oscctrl_init_sources+0x38>)
    839a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    839c:	bf00      	nop
    839e:	6878      	ldr	r0, [r7, #4]
    83a0:	4b08      	ldr	r3, [pc, #32]	; (83c4 <_oscctrl_init_sources+0x3c>)
    83a2:	4798      	blx	r3
    83a4:	4603      	mov	r3, r0
    83a6:	f083 0301 	eor.w	r3, r3, #1
    83aa:	b2db      	uxtb	r3, r3
    83ac:	2b00      	cmp	r3, #0
    83ae:	d1f6      	bne.n	839e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    83b0:	bf00      	nop
    83b2:	3708      	adds	r7, #8
    83b4:	46bd      	mov	sp, r7
    83b6:	bd80      	pop	{r7, pc}
    83b8:	40001000 	.word	0x40001000
    83bc:	03002646 	.word	0x03002646
    83c0:	000081d1 	.word	0x000081d1
    83c4:	0000815b 	.word	0x0000815b

000083c8 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    83c8:	b580      	push	{r7, lr}
    83ca:	b084      	sub	sp, #16
    83cc:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    83ce:	4b6b      	ldr	r3, [pc, #428]	; (857c <_oscctrl_init_referenced_generators+0x1b4>)
    83d0:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    83d2:	2204      	movs	r2, #4
    83d4:	2100      	movs	r1, #0
    83d6:	486a      	ldr	r0, [pc, #424]	; (8580 <_oscctrl_init_referenced_generators+0x1b8>)
    83d8:	4b6a      	ldr	r3, [pc, #424]	; (8584 <_oscctrl_init_referenced_generators+0x1bc>)
    83da:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    83dc:	bf00      	nop
    83de:	4868      	ldr	r0, [pc, #416]	; (8580 <_oscctrl_init_referenced_generators+0x1b8>)
    83e0:	4b69      	ldr	r3, [pc, #420]	; (8588 <_oscctrl_init_referenced_generators+0x1c0>)
    83e2:	4798      	blx	r3
    83e4:	4603      	mov	r3, r0
    83e6:	2b00      	cmp	r3, #0
    83e8:	d1f9      	bne.n	83de <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    83ea:	2100      	movs	r1, #0
    83ec:	68f8      	ldr	r0, [r7, #12]
    83ee:	4b67      	ldr	r3, [pc, #412]	; (858c <_oscctrl_init_referenced_generators+0x1c4>)
    83f0:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    83f2:	4967      	ldr	r1, [pc, #412]	; (8590 <_oscctrl_init_referenced_generators+0x1c8>)
    83f4:	68f8      	ldr	r0, [r7, #12]
    83f6:	4b67      	ldr	r3, [pc, #412]	; (8594 <_oscctrl_init_referenced_generators+0x1cc>)
    83f8:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    83fa:	bf00      	nop
    83fc:	68f8      	ldr	r0, [r7, #12]
    83fe:	4b66      	ldr	r3, [pc, #408]	; (8598 <_oscctrl_init_referenced_generators+0x1d0>)
    8400:	4798      	blx	r3
    8402:	4603      	mov	r3, r0
    8404:	2b00      	cmp	r3, #0
    8406:	d1f9      	bne.n	83fc <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    8408:	2100      	movs	r1, #0
    840a:	68f8      	ldr	r0, [r7, #12]
    840c:	4b63      	ldr	r3, [pc, #396]	; (859c <_oscctrl_init_referenced_generators+0x1d4>)
    840e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    8410:	bf00      	nop
    8412:	68f8      	ldr	r0, [r7, #12]
    8414:	4b62      	ldr	r3, [pc, #392]	; (85a0 <_oscctrl_init_referenced_generators+0x1d8>)
    8416:	4798      	blx	r3
    8418:	4603      	mov	r3, r0
    841a:	2b00      	cmp	r3, #0
    841c:	d1f9      	bne.n	8412 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    841e:	2302      	movs	r3, #2
    8420:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    8422:	7afb      	ldrb	r3, [r7, #11]
    8424:	4619      	mov	r1, r3
    8426:	68f8      	ldr	r0, [r7, #12]
    8428:	4b58      	ldr	r3, [pc, #352]	; (858c <_oscctrl_init_referenced_generators+0x1c4>)
    842a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    842c:	bf00      	nop
    842e:	68f8      	ldr	r0, [r7, #12]
    8430:	4b5c      	ldr	r3, [pc, #368]	; (85a4 <_oscctrl_init_referenced_generators+0x1dc>)
    8432:	4798      	blx	r3
    8434:	4603      	mov	r3, r0
    8436:	2b00      	cmp	r3, #0
    8438:	d1f9      	bne.n	842e <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    843a:	68f8      	ldr	r0, [r7, #12]
    843c:	4b5a      	ldr	r3, [pc, #360]	; (85a8 <_oscctrl_init_referenced_generators+0x1e0>)
    843e:	4798      	blx	r3
    8440:	4603      	mov	r3, r0
    8442:	4619      	mov	r1, r3
    8444:	68f8      	ldr	r0, [r7, #12]
    8446:	4b59      	ldr	r3, [pc, #356]	; (85ac <_oscctrl_init_referenced_generators+0x1e4>)
    8448:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    844a:	bf00      	nop
    844c:	68f8      	ldr	r0, [r7, #12]
    844e:	4b58      	ldr	r3, [pc, #352]	; (85b0 <_oscctrl_init_referenced_generators+0x1e8>)
    8450:	4798      	blx	r3
    8452:	4603      	mov	r3, r0
    8454:	2b00      	cmp	r3, #0
    8456:	d1f9      	bne.n	844c <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    8458:	2319      	movs	r3, #25
    845a:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    845c:	7afb      	ldrb	r3, [r7, #11]
    845e:	4619      	mov	r1, r3
    8460:	68f8      	ldr	r0, [r7, #12]
    8462:	4b4e      	ldr	r3, [pc, #312]	; (859c <_oscctrl_init_referenced_generators+0x1d4>)
    8464:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    8466:	bf00      	nop
    8468:	68f8      	ldr	r0, [r7, #12]
    846a:	4b4d      	ldr	r3, [pc, #308]	; (85a0 <_oscctrl_init_referenced_generators+0x1d8>)
    846c:	4798      	blx	r3
    846e:	4603      	mov	r3, r0
    8470:	2b00      	cmp	r3, #0
    8472:	d1f9      	bne.n	8468 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    8474:	2245      	movs	r2, #69	; 0x45
    8476:	2101      	movs	r1, #1
    8478:	4841      	ldr	r0, [pc, #260]	; (8580 <_oscctrl_init_referenced_generators+0x1b8>)
    847a:	4b4e      	ldr	r3, [pc, #312]	; (85b4 <_oscctrl_init_referenced_generators+0x1ec>)
    847c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    847e:	223b      	movs	r2, #59	; 0x3b
    8480:	2100      	movs	r1, #0
    8482:	68f8      	ldr	r0, [r7, #12]
    8484:	4b4c      	ldr	r3, [pc, #304]	; (85b8 <_oscctrl_init_referenced_generators+0x1f0>)
    8486:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    8488:	f44f 6201 	mov.w	r2, #2064	; 0x810
    848c:	2100      	movs	r1, #0
    848e:	68f8      	ldr	r0, [r7, #12]
    8490:	4b4a      	ldr	r3, [pc, #296]	; (85bc <_oscctrl_init_referenced_generators+0x1f4>)
    8492:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    8494:	2242      	movs	r2, #66	; 0x42
    8496:	2100      	movs	r1, #0
    8498:	68f8      	ldr	r0, [r7, #12]
    849a:	4b49      	ldr	r3, [pc, #292]	; (85c0 <_oscctrl_init_referenced_generators+0x1f8>)
    849c:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    849e:	4a49      	ldr	r2, [pc, #292]	; (85c4 <_oscctrl_init_referenced_generators+0x1fc>)
    84a0:	2101      	movs	r1, #1
    84a2:	68f8      	ldr	r0, [r7, #12]
    84a4:	4b44      	ldr	r3, [pc, #272]	; (85b8 <_oscctrl_init_referenced_generators+0x1f0>)
    84a6:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    84a8:	f44f 6203 	mov.w	r2, #2096	; 0x830
    84ac:	2101      	movs	r1, #1
    84ae:	68f8      	ldr	r0, [r7, #12]
    84b0:	4b42      	ldr	r3, [pc, #264]	; (85bc <_oscctrl_init_referenced_generators+0x1f4>)
    84b2:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    84b4:	2202      	movs	r2, #2
    84b6:	2101      	movs	r1, #1
    84b8:	68f8      	ldr	r0, [r7, #12]
    84ba:	4b41      	ldr	r3, [pc, #260]	; (85c0 <_oscctrl_init_referenced_generators+0x1f8>)
    84bc:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    84be:	68f8      	ldr	r0, [r7, #12]
    84c0:	4b41      	ldr	r3, [pc, #260]	; (85c8 <_oscctrl_init_referenced_generators+0x200>)
    84c2:	4798      	blx	r3
    84c4:	4603      	mov	r3, r0
    84c6:	2b00      	cmp	r3, #0
    84c8:	d00c      	beq.n	84e4 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    84ca:	f44f 6310 	mov.w	r3, #2304	; 0x900
    84ce:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    84d0:	bf00      	nop
    84d2:	6879      	ldr	r1, [r7, #4]
    84d4:	68f8      	ldr	r0, [r7, #12]
    84d6:	4b3d      	ldr	r3, [pc, #244]	; (85cc <_oscctrl_init_referenced_generators+0x204>)
    84d8:	4798      	blx	r3
    84da:	4602      	mov	r2, r0
    84dc:	687b      	ldr	r3, [r7, #4]
    84de:	429a      	cmp	r2, r3
    84e0:	d1f7      	bne.n	84d2 <_oscctrl_init_referenced_generators+0x10a>
    84e2:	e009      	b.n	84f8 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    84e4:	bf00      	nop
    84e6:	68f8      	ldr	r0, [r7, #12]
    84e8:	4b39      	ldr	r3, [pc, #228]	; (85d0 <_oscctrl_init_referenced_generators+0x208>)
    84ea:	4798      	blx	r3
    84ec:	4603      	mov	r3, r0
    84ee:	f083 0301 	eor.w	r3, r3, #1
    84f2:	b2db      	uxtb	r3, r3
    84f4:	2b00      	cmp	r3, #0
    84f6:	d1f6      	bne.n	84e6 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    84f8:	bf00      	nop
    84fa:	2100      	movs	r1, #0
    84fc:	68f8      	ldr	r0, [r7, #12]
    84fe:	4b35      	ldr	r3, [pc, #212]	; (85d4 <_oscctrl_init_referenced_generators+0x20c>)
    8500:	4798      	blx	r3
    8502:	4603      	mov	r3, r0
    8504:	f083 0301 	eor.w	r3, r3, #1
    8508:	b2db      	uxtb	r3, r3
    850a:	2b00      	cmp	r3, #0
    850c:	d009      	beq.n	8522 <_oscctrl_init_referenced_generators+0x15a>
    850e:	2100      	movs	r1, #0
    8510:	68f8      	ldr	r0, [r7, #12]
    8512:	4b31      	ldr	r3, [pc, #196]	; (85d8 <_oscctrl_init_referenced_generators+0x210>)
    8514:	4798      	blx	r3
    8516:	4603      	mov	r3, r0
    8518:	f083 0301 	eor.w	r3, r3, #1
    851c:	b2db      	uxtb	r3, r3
    851e:	2b00      	cmp	r3, #0
    8520:	d1eb      	bne.n	84fa <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    8522:	bf00      	nop
    8524:	2101      	movs	r1, #1
    8526:	68f8      	ldr	r0, [r7, #12]
    8528:	4b2a      	ldr	r3, [pc, #168]	; (85d4 <_oscctrl_init_referenced_generators+0x20c>)
    852a:	4798      	blx	r3
    852c:	4603      	mov	r3, r0
    852e:	f083 0301 	eor.w	r3, r3, #1
    8532:	b2db      	uxtb	r3, r3
    8534:	2b00      	cmp	r3, #0
    8536:	d009      	beq.n	854c <_oscctrl_init_referenced_generators+0x184>
    8538:	2101      	movs	r1, #1
    853a:	68f8      	ldr	r0, [r7, #12]
    853c:	4b26      	ldr	r3, [pc, #152]	; (85d8 <_oscctrl_init_referenced_generators+0x210>)
    853e:	4798      	blx	r3
    8540:	4603      	mov	r3, r0
    8542:	f083 0301 	eor.w	r3, r3, #1
    8546:	b2db      	uxtb	r3, r3
    8548:	2b00      	cmp	r3, #0
    854a:	d1eb      	bne.n	8524 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    854c:	bf00      	nop
    854e:	480c      	ldr	r0, [pc, #48]	; (8580 <_oscctrl_init_referenced_generators+0x1b8>)
    8550:	4b22      	ldr	r3, [pc, #136]	; (85dc <_oscctrl_init_referenced_generators+0x214>)
    8552:	4798      	blx	r3
    8554:	4603      	mov	r3, r0
    8556:	2b00      	cmp	r3, #0
    8558:	d1f9      	bne.n	854e <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    855a:	2207      	movs	r2, #7
    855c:	2100      	movs	r1, #0
    855e:	4808      	ldr	r0, [pc, #32]	; (8580 <_oscctrl_init_referenced_generators+0x1b8>)
    8560:	4b08      	ldr	r3, [pc, #32]	; (8584 <_oscctrl_init_referenced_generators+0x1bc>)
    8562:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    8564:	bf00      	nop
    8566:	4806      	ldr	r0, [pc, #24]	; (8580 <_oscctrl_init_referenced_generators+0x1b8>)
    8568:	4b07      	ldr	r3, [pc, #28]	; (8588 <_oscctrl_init_referenced_generators+0x1c0>)
    856a:	4798      	blx	r3
    856c:	4603      	mov	r3, r0
    856e:	2b00      	cmp	r3, #0
    8570:	d1f9      	bne.n	8566 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    8572:	bf00      	nop
    8574:	3710      	adds	r7, #16
    8576:	46bd      	mov	sp, r7
    8578:	bd80      	pop	{r7, pc}
    857a:	bf00      	nop
    857c:	40001000 	.word	0x40001000
    8580:	40001c00 	.word	0x40001c00
    8584:	00007f95 	.word	0x00007f95
    8588:	00007f55 	.word	0x00007f55
    858c:	000081f9 	.word	0x000081f9
    8590:	0401bb80 	.word	0x0401bb80
    8594:	0000829b 	.word	0x0000829b
    8598:	00008353 	.word	0x00008353
    859c:	00008247 	.word	0x00008247
    85a0:	000082eb 	.word	0x000082eb
    85a4:	000082b7 	.word	0x000082b7
    85a8:	00008283 	.word	0x00008283
    85ac:	00008267 	.word	0x00008267
    85b0:	0000831f 	.word	0x0000831f
    85b4:	00007fe5 	.word	0x00007fe5
    85b8:	000080f1 	.word	0x000080f1
    85bc:	0000812d 	.word	0x0000812d
    85c0:	000080b5 	.word	0x000080b5
    85c4:	000407a0 	.word	0x000407a0
    85c8:	00008217 	.word	0x00008217
    85cc:	000081ab 	.word	0x000081ab
    85d0:	00008183 	.word	0x00008183
    85d4:	00008041 	.word	0x00008041
    85d8:	00008079 	.word	0x00008079
    85dc:	00007f7d 	.word	0x00007f7d

000085e0 <hri_pac_get_STATUSA_reg>:
{
	return (((Pac *)hw)->STATUSA.reg & PAC_STATUSA_TC1) >> PAC_STATUSA_TC1_Pos;
}

static inline hri_pac_statusa_reg_t hri_pac_get_STATUSA_reg(const void *const hw, hri_pac_statusa_reg_t mask)
{
    85e0:	b480      	push	{r7}
    85e2:	b085      	sub	sp, #20
    85e4:	af00      	add	r7, sp, #0
    85e6:	6078      	str	r0, [r7, #4]
    85e8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSA.reg;
    85ea:	687b      	ldr	r3, [r7, #4]
    85ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    85ee:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    85f0:	68fa      	ldr	r2, [r7, #12]
    85f2:	683b      	ldr	r3, [r7, #0]
    85f4:	4013      	ands	r3, r2
    85f6:	60fb      	str	r3, [r7, #12]
	return tmp;
    85f8:	68fb      	ldr	r3, [r7, #12]
}
    85fa:	4618      	mov	r0, r3
    85fc:	3714      	adds	r7, #20
    85fe:	46bd      	mov	sp, r7
    8600:	f85d 7b04 	ldr.w	r7, [sp], #4
    8604:	4770      	bx	lr

00008606 <hri_pac_get_STATUSB_reg>:
{
	return (((Pac *)hw)->STATUSB.reg & PAC_STATUSB_RAMECC) >> PAC_STATUSB_RAMECC_Pos;
}

static inline hri_pac_statusb_reg_t hri_pac_get_STATUSB_reg(const void *const hw, hri_pac_statusb_reg_t mask)
{
    8606:	b480      	push	{r7}
    8608:	b085      	sub	sp, #20
    860a:	af00      	add	r7, sp, #0
    860c:	6078      	str	r0, [r7, #4]
    860e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSB.reg;
    8610:	687b      	ldr	r3, [r7, #4]
    8612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8614:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8616:	68fa      	ldr	r2, [r7, #12]
    8618:	683b      	ldr	r3, [r7, #0]
    861a:	4013      	ands	r3, r2
    861c:	60fb      	str	r3, [r7, #12]
	return tmp;
    861e:	68fb      	ldr	r3, [r7, #12]
}
    8620:	4618      	mov	r0, r3
    8622:	3714      	adds	r7, #20
    8624:	46bd      	mov	sp, r7
    8626:	f85d 7b04 	ldr.w	r7, [sp], #4
    862a:	4770      	bx	lr

0000862c <hri_pac_get_STATUSC_reg>:
{
	return (((Pac *)hw)->STATUSC.reg & PAC_STATUSC_CCL) >> PAC_STATUSC_CCL_Pos;
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
    862c:	b480      	push	{r7}
    862e:	b085      	sub	sp, #20
    8630:	af00      	add	r7, sp, #0
    8632:	6078      	str	r0, [r7, #4]
    8634:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    8636:	687b      	ldr	r3, [r7, #4]
    8638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    863a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    863c:	68fa      	ldr	r2, [r7, #12]
    863e:	683b      	ldr	r3, [r7, #0]
    8640:	4013      	ands	r3, r2
    8642:	60fb      	str	r3, [r7, #12]
	return tmp;
    8644:	68fb      	ldr	r3, [r7, #12]
}
    8646:	4618      	mov	r0, r3
    8648:	3714      	adds	r7, #20
    864a:	46bd      	mov	sp, r7
    864c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8650:	4770      	bx	lr

00008652 <hri_pac_get_STATUSD_reg>:
{
	return (((Pac *)hw)->STATUSD.reg & PAC_STATUSD_PCC) >> PAC_STATUSD_PCC_Pos;
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
    8652:	b480      	push	{r7}
    8654:	b085      	sub	sp, #20
    8656:	af00      	add	r7, sp, #0
    8658:	6078      	str	r0, [r7, #4]
    865a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    865c:	687b      	ldr	r3, [r7, #4]
    865e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8660:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8662:	68fa      	ldr	r2, [r7, #12]
    8664:	683b      	ldr	r3, [r7, #0]
    8666:	4013      	ands	r3, r2
    8668:	60fb      	str	r3, [r7, #12]
	return tmp;
    866a:	68fb      	ldr	r3, [r7, #12]
}
    866c:	4618      	mov	r0, r3
    866e:	3714      	adds	r7, #20
    8670:	46bd      	mov	sp, r7
    8672:	f85d 7b04 	ldr.w	r7, [sp], #4
    8676:	4770      	bx	lr

00008678 <hri_pac_write_WRCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
    8678:	b480      	push	{r7}
    867a:	b083      	sub	sp, #12
    867c:	af00      	add	r7, sp, #0
    867e:	6078      	str	r0, [r7, #4]
    8680:	6039      	str	r1, [r7, #0]
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    8682:	687b      	ldr	r3, [r7, #4]
    8684:	683a      	ldr	r2, [r7, #0]
    8686:	601a      	str	r2, [r3, #0]
	PAC_CRITICAL_SECTION_LEAVE();
}
    8688:	bf00      	nop
    868a:	370c      	adds	r7, #12
    868c:	46bd      	mov	sp, r7
    868e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8692:	4770      	bx	lr

00008694 <_pac_get_peripheral_id>:
#include <compiler.h>
#include <utils_assert.h>
#include <hpl_pac.h>

static uint32_t _pac_get_peripheral_id(const void *const module)
{
    8694:	b480      	push	{r7}
    8696:	b085      	sub	sp, #20
    8698:	af00      	add	r7, sp, #0
    869a:	6078      	str	r0, [r7, #4]
	uint32_t peripheral = 10;
    869c:	230a      	movs	r3, #10
    869e:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    86a0:	687b      	ldr	r3, [r7, #4]
    86a2:	f003 4382 	and.w	r3, r3, #1090519040	; 0x41000000
    86a6:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    86aa:	d101      	bne.n	86b0 <_pac_get_peripheral_id+0x1c>
		peripheral = 13;
    86ac:	230d      	movs	r3, #13
    86ae:	60fb      	str	r3, [r7, #12]
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    86b0:	687b      	ldr	r3, [r7, #4]
    86b2:	0e1b      	lsrs	r3, r3, #24
    86b4:	f003 030f 	and.w	r3, r3, #15
    86b8:	015a      	lsls	r2, r3, #5
    86ba:	6879      	ldr	r1, [r7, #4]
    86bc:	4b06      	ldr	r3, [pc, #24]	; (86d8 <_pac_get_peripheral_id+0x44>)
    86be:	400b      	ands	r3, r1
    86c0:	68f9      	ldr	r1, [r7, #12]
    86c2:	40cb      	lsrs	r3, r1
    86c4:	4413      	add	r3, r2
    86c6:	60fb      	str	r3, [r7, #12]

	return peripheral;
    86c8:	68fb      	ldr	r3, [r7, #12]
}
    86ca:	4618      	mov	r0, r3
    86cc:	3714      	adds	r7, #20
    86ce:	46bd      	mov	sp, r7
    86d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    86d4:	4770      	bx	lr
    86d6:	bf00      	nop
    86d8:	000fff00 	.word	0x000fff00

000086dc <_periph_lock>:

/**
 * \brief Enable write protect for the given hardware module
 */
int32_t _periph_lock(const void *const module)
{
    86dc:	b580      	push	{r7, lr}
    86de:	b086      	sub	sp, #24
    86e0:	af00      	add	r7, sp, #0
    86e2:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    86e4:	687b      	ldr	r3, [r7, #4]
    86e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    86ea:	bf8c      	ite	hi
    86ec:	2301      	movhi	r3, #1
    86ee:	2300      	movls	r3, #0
    86f0:	b2db      	uxtb	r3, r3
    86f2:	2239      	movs	r2, #57	; 0x39
    86f4:	4917      	ldr	r1, [pc, #92]	; (8754 <_periph_lock+0x78>)
    86f6:	4618      	mov	r0, r3
    86f8:	4b17      	ldr	r3, [pc, #92]	; (8758 <_periph_lock+0x7c>)
    86fa:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    86fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8700:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    8702:	6878      	ldr	r0, [r7, #4]
    8704:	4b15      	ldr	r3, [pc, #84]	; (875c <_periph_lock+0x80>)
    8706:	4798      	blx	r3
    8708:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    870a:	693b      	ldr	r3, [r7, #16]
    870c:	b29b      	uxth	r3, r3
    870e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8712:	4619      	mov	r1, r3
    8714:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8718:	4b11      	ldr	r3, [pc, #68]	; (8760 <_periph_lock+0x84>)
    871a:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    871c:	f107 030f 	add.w	r3, r7, #15
    8720:	4619      	mov	r1, r3
    8722:	6878      	ldr	r0, [r7, #4]
    8724:	4b0f      	ldr	r3, [pc, #60]	; (8764 <_periph_lock+0x88>)
    8726:	4798      	blx	r3
	} while (!stat && timeout--);
    8728:	7bfb      	ldrb	r3, [r7, #15]
    872a:	f083 0301 	eor.w	r3, r3, #1
    872e:	b2db      	uxtb	r3, r3
    8730:	2b00      	cmp	r3, #0
    8732:	d004      	beq.n	873e <_periph_lock+0x62>
    8734:	697b      	ldr	r3, [r7, #20]
    8736:	1e5a      	subs	r2, r3, #1
    8738:	617a      	str	r2, [r7, #20]
    873a:	2b00      	cmp	r3, #0
    873c:	d1ee      	bne.n	871c <_periph_lock+0x40>

	if (timeout < 0) {
    873e:	697b      	ldr	r3, [r7, #20]
    8740:	2b00      	cmp	r3, #0
    8742:	da02      	bge.n	874a <_periph_lock+0x6e>
		return ERR_TIMEOUT;
    8744:	f06f 0307 	mvn.w	r3, #7
    8748:	e000      	b.n	874c <_periph_lock+0x70>
	}

	return ERR_NONE;
    874a:	2300      	movs	r3, #0
}
    874c:	4618      	mov	r0, r3
    874e:	3718      	adds	r7, #24
    8750:	46bd      	mov	sp, r7
    8752:	bd80      	pop	{r7, pc}
    8754:	000185fc 	.word	0x000185fc
    8758:	000065d9 	.word	0x000065d9
    875c:	00008695 	.word	0x00008695
    8760:	00008679 	.word	0x00008679
    8764:	000087f1 	.word	0x000087f1

00008768 <_periph_unlock>:

/**
 * \brief Disable write protect for the given hardware module
 */
int32_t _periph_unlock(const void *const module)
{
    8768:	b580      	push	{r7, lr}
    876a:	b086      	sub	sp, #24
    876c:	af00      	add	r7, sp, #0
    876e:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    8770:	687b      	ldr	r3, [r7, #4]
    8772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    8776:	bf8c      	ite	hi
    8778:	2301      	movhi	r3, #1
    877a:	2300      	movls	r3, #0
    877c:	b2db      	uxtb	r3, r3
    877e:	2253      	movs	r2, #83	; 0x53
    8780:	4916      	ldr	r1, [pc, #88]	; (87dc <_periph_unlock+0x74>)
    8782:	4618      	mov	r0, r3
    8784:	4b16      	ldr	r3, [pc, #88]	; (87e0 <_periph_unlock+0x78>)
    8786:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    8788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    878c:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    878e:	6878      	ldr	r0, [r7, #4]
    8790:	4b14      	ldr	r3, [pc, #80]	; (87e4 <_periph_unlock+0x7c>)
    8792:	4798      	blx	r3
    8794:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    8796:	693b      	ldr	r3, [r7, #16]
    8798:	b29b      	uxth	r3, r3
    879a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    879e:	4619      	mov	r1, r3
    87a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    87a4:	4b10      	ldr	r3, [pc, #64]	; (87e8 <_periph_unlock+0x80>)
    87a6:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    87a8:	f107 030f 	add.w	r3, r7, #15
    87ac:	4619      	mov	r1, r3
    87ae:	6878      	ldr	r0, [r7, #4]
    87b0:	4b0e      	ldr	r3, [pc, #56]	; (87ec <_periph_unlock+0x84>)
    87b2:	4798      	blx	r3
	} while (stat && timeout--);
    87b4:	7bfb      	ldrb	r3, [r7, #15]
    87b6:	2b00      	cmp	r3, #0
    87b8:	d004      	beq.n	87c4 <_periph_unlock+0x5c>
    87ba:	697b      	ldr	r3, [r7, #20]
    87bc:	1e5a      	subs	r2, r3, #1
    87be:	617a      	str	r2, [r7, #20]
    87c0:	2b00      	cmp	r3, #0
    87c2:	d1f1      	bne.n	87a8 <_periph_unlock+0x40>

	if (timeout < 0) {
    87c4:	697b      	ldr	r3, [r7, #20]
    87c6:	2b00      	cmp	r3, #0
    87c8:	da02      	bge.n	87d0 <_periph_unlock+0x68>
		return ERR_TIMEOUT;
    87ca:	f06f 0307 	mvn.w	r3, #7
    87ce:	e000      	b.n	87d2 <_periph_unlock+0x6a>
	}

	return ERR_NONE;
    87d0:	2300      	movs	r3, #0
}
    87d2:	4618      	mov	r0, r3
    87d4:	3718      	adds	r7, #24
    87d6:	46bd      	mov	sp, r7
    87d8:	bd80      	pop	{r7, pc}
    87da:	bf00      	nop
    87dc:	000185fc 	.word	0x000185fc
    87e0:	000065d9 	.word	0x000065d9
    87e4:	00008695 	.word	0x00008695
    87e8:	00008679 	.word	0x00008679
    87ec:	000087f1 	.word	0x000087f1

000087f0 <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    87f0:	b580      	push	{r7, lr}
    87f2:	b084      	sub	sp, #16
    87f4:	af00      	add	r7, sp, #0
    87f6:	6078      	str	r0, [r7, #4]
    87f8:	6039      	str	r1, [r7, #0]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    87fa:	687b      	ldr	r3, [r7, #4]
    87fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    8800:	bf8c      	ite	hi
    8802:	2301      	movhi	r3, #1
    8804:	2300      	movls	r3, #0
    8806:	b2db      	uxtb	r3, r3
    8808:	226d      	movs	r2, #109	; 0x6d
    880a:	4931      	ldr	r1, [pc, #196]	; (88d0 <_periph_get_lock_state+0xe0>)
    880c:	4618      	mov	r0, r3
    880e:	4b31      	ldr	r3, [pc, #196]	; (88d4 <_periph_get_lock_state+0xe4>)
    8810:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    8812:	6878      	ldr	r0, [r7, #4]
    8814:	4b30      	ldr	r3, [pc, #192]	; (88d8 <_periph_get_lock_state+0xe8>)
    8816:	4798      	blx	r3
    8818:	4603      	mov	r3, r0
    881a:	f003 031f 	and.w	r3, r3, #31
    881e:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    8820:	687b      	ldr	r3, [r7, #4]
    8822:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    8826:	d211      	bcs.n	884c <_periph_get_lock_state+0x5c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    8828:	2201      	movs	r2, #1
    882a:	68fb      	ldr	r3, [r7, #12]
    882c:	fa02 f303 	lsl.w	r3, r2, r3
    8830:	4619      	mov	r1, r3
    8832:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8836:	4b29      	ldr	r3, [pc, #164]	; (88dc <_periph_get_lock_state+0xec>)
    8838:	4798      	blx	r3
    883a:	4603      	mov	r3, r0
    883c:	2b00      	cmp	r3, #0
    883e:	bf14      	ite	ne
    8840:	2301      	movne	r3, #1
    8842:	2300      	moveq	r3, #0
    8844:	b2da      	uxtb	r2, r3
    8846:	683b      	ldr	r3, [r7, #0]
    8848:	701a      	strb	r2, [r3, #0]
    884a:	e03c      	b.n	88c6 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    884c:	687b      	ldr	r3, [r7, #4]
    884e:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    8852:	d211      	bcs.n	8878 <_periph_get_lock_state+0x88>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    8854:	2201      	movs	r2, #1
    8856:	68fb      	ldr	r3, [r7, #12]
    8858:	fa02 f303 	lsl.w	r3, r2, r3
    885c:	4619      	mov	r1, r3
    885e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8862:	4b1f      	ldr	r3, [pc, #124]	; (88e0 <_periph_get_lock_state+0xf0>)
    8864:	4798      	blx	r3
    8866:	4603      	mov	r3, r0
    8868:	2b00      	cmp	r3, #0
    886a:	bf14      	ite	ne
    886c:	2301      	movne	r3, #1
    886e:	2300      	moveq	r3, #0
    8870:	b2da      	uxtb	r2, r3
    8872:	683b      	ldr	r3, [r7, #0]
    8874:	701a      	strb	r2, [r3, #0]
    8876:	e026      	b.n	88c6 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    8878:	687b      	ldr	r3, [r7, #4]
    887a:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    887e:	d211      	bcs.n	88a4 <_periph_get_lock_state+0xb4>
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
    8880:	2201      	movs	r2, #1
    8882:	68fb      	ldr	r3, [r7, #12]
    8884:	fa02 f303 	lsl.w	r3, r2, r3
    8888:	4619      	mov	r1, r3
    888a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    888e:	4b15      	ldr	r3, [pc, #84]	; (88e4 <_periph_get_lock_state+0xf4>)
    8890:	4798      	blx	r3
    8892:	4603      	mov	r3, r0
    8894:	2b00      	cmp	r3, #0
    8896:	bf14      	ite	ne
    8898:	2301      	movne	r3, #1
    889a:	2300      	moveq	r3, #0
    889c:	b2da      	uxtb	r2, r3
    889e:	683b      	ldr	r3, [r7, #0]
    88a0:	701a      	strb	r2, [r3, #0]
    88a2:	e010      	b.n	88c6 <_periph_get_lock_state+0xd6>
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    88a4:	2201      	movs	r2, #1
    88a6:	68fb      	ldr	r3, [r7, #12]
    88a8:	fa02 f303 	lsl.w	r3, r2, r3
    88ac:	4619      	mov	r1, r3
    88ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    88b2:	4b0d      	ldr	r3, [pc, #52]	; (88e8 <_periph_get_lock_state+0xf8>)
    88b4:	4798      	blx	r3
    88b6:	4603      	mov	r3, r0
    88b8:	2b00      	cmp	r3, #0
    88ba:	bf14      	ite	ne
    88bc:	2301      	movne	r3, #1
    88be:	2300      	moveq	r3, #0
    88c0:	b2da      	uxtb	r2, r3
    88c2:	683b      	ldr	r3, [r7, #0]
    88c4:	701a      	strb	r2, [r3, #0]
	}

	return ERR_NONE;
    88c6:	2300      	movs	r3, #0
}
    88c8:	4618      	mov	r0, r3
    88ca:	3710      	adds	r7, #16
    88cc:	46bd      	mov	sp, r7
    88ce:	bd80      	pop	{r7, pc}
    88d0:	000185fc 	.word	0x000185fc
    88d4:	000065d9 	.word	0x000065d9
    88d8:	00008695 	.word	0x00008695
    88dc:	000085e1 	.word	0x000085e1
    88e0:	00008607 	.word	0x00008607
    88e4:	0000862d 	.word	0x0000862d
    88e8:	00008653 	.word	0x00008653

000088ec <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    88ec:	b480      	push	{r7}
    88ee:	b083      	sub	sp, #12
    88f0:	af00      	add	r7, sp, #0
    88f2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    88f4:	687b      	ldr	r3, [r7, #4]
    88f6:	69db      	ldr	r3, [r3, #28]
    88f8:	0a9b      	lsrs	r3, r3, #10
    88fa:	f003 0301 	and.w	r3, r3, #1
    88fe:	2b00      	cmp	r3, #0
    8900:	bf14      	ite	ne
    8902:	2301      	movne	r3, #1
    8904:	2300      	moveq	r3, #0
    8906:	b2db      	uxtb	r3, r3
}
    8908:	4618      	mov	r0, r3
    890a:	370c      	adds	r7, #12
    890c:	46bd      	mov	sp, r7
    890e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8912:	4770      	bx	lr

00008914 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    8914:	b480      	push	{r7}
    8916:	b083      	sub	sp, #12
    8918:	af00      	add	r7, sp, #0
    891a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    891c:	687b      	ldr	r3, [r7, #4]
    891e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8922:	61da      	str	r2, [r3, #28]
}
    8924:	bf00      	nop
    8926:	370c      	adds	r7, #12
    8928:	46bd      	mov	sp, r7
    892a:	f85d 7b04 	ldr.w	r7, [sp], #4
    892e:	4770      	bx	lr

00008930 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    8930:	b480      	push	{r7}
    8932:	b083      	sub	sp, #12
    8934:	af00      	add	r7, sp, #0
    8936:	6078      	str	r0, [r7, #4]
    8938:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    893a:	687b      	ldr	r3, [r7, #4]
    893c:	683a      	ldr	r2, [r7, #0]
    893e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8940:	bf00      	nop
    8942:	370c      	adds	r7, #12
    8944:	46bd      	mov	sp, r7
    8946:	f85d 7b04 	ldr.w	r7, [sp], #4
    894a:	4770      	bx	lr

0000894c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    894c:	b480      	push	{r7}
    894e:	b083      	sub	sp, #12
    8950:	af00      	add	r7, sp, #0
    8952:	6078      	str	r0, [r7, #4]
    8954:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    8956:	687b      	ldr	r3, [r7, #4]
    8958:	683a      	ldr	r2, [r7, #0]
    895a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    895c:	bf00      	nop
    895e:	370c      	adds	r7, #12
    8960:	46bd      	mov	sp, r7
    8962:	f85d 7b04 	ldr.w	r7, [sp], #4
    8966:	4770      	bx	lr

00008968 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    8968:	b480      	push	{r7}
    896a:	b083      	sub	sp, #12
    896c:	af00      	add	r7, sp, #0
    896e:	6078      	str	r0, [r7, #4]
    8970:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    8972:	687b      	ldr	r3, [r7, #4]
    8974:	683a      	ldr	r2, [r7, #0]
    8976:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8978:	bf00      	nop
    897a:	370c      	adds	r7, #12
    897c:	46bd      	mov	sp, r7
    897e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8982:	4770      	bx	lr

00008984 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    8984:	b480      	push	{r7}
    8986:	b083      	sub	sp, #12
    8988:	af00      	add	r7, sp, #0
    898a:	6078      	str	r0, [r7, #4]
    898c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    898e:	687b      	ldr	r3, [r7, #4]
    8990:	683a      	ldr	r2, [r7, #0]
    8992:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8994:	bf00      	nop
    8996:	370c      	adds	r7, #12
    8998:	46bd      	mov	sp, r7
    899a:	f85d 7b04 	ldr.w	r7, [sp], #4
    899e:	4770      	bx	lr

000089a0 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    89a0:	b480      	push	{r7}
    89a2:	b085      	sub	sp, #20
    89a4:	af00      	add	r7, sp, #0
    89a6:	6078      	str	r0, [r7, #4]
    89a8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    89aa:	687b      	ldr	r3, [r7, #4]
    89ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    89ae:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    89b0:	68fb      	ldr	r3, [r7, #12]
    89b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    89b6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    89b8:	683b      	ldr	r3, [r7, #0]
    89ba:	b2db      	uxtb	r3, r3
    89bc:	68fa      	ldr	r2, [r7, #12]
    89be:	4313      	orrs	r3, r2
    89c0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    89c2:	687b      	ldr	r3, [r7, #4]
    89c4:	68fa      	ldr	r2, [r7, #12]
    89c6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    89c8:	bf00      	nop
    89ca:	3714      	adds	r7, #20
    89cc:	46bd      	mov	sp, r7
    89ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    89d2:	4770      	bx	lr

000089d4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    89d4:	b480      	push	{r7}
    89d6:	b085      	sub	sp, #20
    89d8:	af00      	add	r7, sp, #0
    89da:	6078      	str	r0, [r7, #4]
    89dc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    89de:	687b      	ldr	r3, [r7, #4]
    89e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    89e2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    89e4:	68fb      	ldr	r3, [r7, #12]
    89e6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    89ea:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    89ec:	683b      	ldr	r3, [r7, #0]
    89ee:	041b      	lsls	r3, r3, #16
    89f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    89f4:	68fa      	ldr	r2, [r7, #12]
    89f6:	4313      	orrs	r3, r2
    89f8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    89fa:	687b      	ldr	r3, [r7, #4]
    89fc:	68fa      	ldr	r2, [r7, #12]
    89fe:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8a00:	bf00      	nop
    8a02:	3714      	adds	r7, #20
    8a04:	46bd      	mov	sp, r7
    8a06:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a0a:	4770      	bx	lr

00008a0c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    8a0c:	b480      	push	{r7}
    8a0e:	b083      	sub	sp, #12
    8a10:	af00      	add	r7, sp, #0
    8a12:	6078      	str	r0, [r7, #4]
    8a14:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    8a16:	687b      	ldr	r3, [r7, #4]
    8a18:	683a      	ldr	r2, [r7, #0]
    8a1a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8a1c:	bf00      	nop
    8a1e:	370c      	adds	r7, #12
    8a20:	46bd      	mov	sp, r7
    8a22:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a26:	4770      	bx	lr

00008a28 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    8a28:	b480      	push	{r7}
    8a2a:	b083      	sub	sp, #12
    8a2c:	af00      	add	r7, sp, #0
    8a2e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    8a30:	687b      	ldr	r3, [r7, #4]
    8a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    8a34:	4618      	mov	r0, r3
    8a36:	370c      	adds	r7, #12
    8a38:	46bd      	mov	sp, r7
    8a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a3e:	4770      	bx	lr

00008a40 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    8a40:	b480      	push	{r7}
    8a42:	b085      	sub	sp, #20
    8a44:	af00      	add	r7, sp, #0
    8a46:	60f8      	str	r0, [r7, #12]
    8a48:	60b9      	str	r1, [r7, #8]
    8a4a:	607a      	str	r2, [r7, #4]
	while (count--) {
    8a4c:	e007      	b.n	8a5e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    8a4e:	68fb      	ldr	r3, [r7, #12]
    8a50:	1c5a      	adds	r2, r3, #1
    8a52:	60fa      	str	r2, [r7, #12]
    8a54:	68ba      	ldr	r2, [r7, #8]
    8a56:	1c51      	adds	r1, r2, #1
    8a58:	60b9      	str	r1, [r7, #8]
    8a5a:	7812      	ldrb	r2, [r2, #0]
    8a5c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    8a5e:	687b      	ldr	r3, [r7, #4]
    8a60:	1e5a      	subs	r2, r3, #1
    8a62:	607a      	str	r2, [r7, #4]
    8a64:	2b00      	cmp	r3, #0
    8a66:	d1f2      	bne.n	8a4e <_qspi_memcpy+0xe>
	}
}
    8a68:	bf00      	nop
    8a6a:	3714      	adds	r7, #20
    8a6c:	46bd      	mov	sp, r7
    8a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a72:	4770      	bx	lr

00008a74 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    8a74:	b580      	push	{r7, lr}
    8a76:	b082      	sub	sp, #8
    8a78:	af00      	add	r7, sp, #0
    8a7a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    8a7c:	4903      	ldr	r1, [pc, #12]	; (8a8c <_qspi_end_transfer+0x18>)
    8a7e:	6878      	ldr	r0, [r7, #4]
    8a80:	4b03      	ldr	r3, [pc, #12]	; (8a90 <_qspi_end_transfer+0x1c>)
    8a82:	4798      	blx	r3
}
    8a84:	bf00      	nop
    8a86:	3708      	adds	r7, #8
    8a88:	46bd      	mov	sp, r7
    8a8a:	bd80      	pop	{r7, pc}
    8a8c:	01000002 	.word	0x01000002
    8a90:	00008931 	.word	0x00008931

00008a94 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    8a94:	b580      	push	{r7, lr}
    8a96:	b082      	sub	sp, #8
    8a98:	af00      	add	r7, sp, #0
    8a9a:	6078      	str	r0, [r7, #4]
    8a9c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    8a9e:	687b      	ldr	r3, [r7, #4]
    8aa0:	2b00      	cmp	r3, #0
    8aa2:	d004      	beq.n	8aae <_qspi_sync_init+0x1a>
    8aa4:	683b      	ldr	r3, [r7, #0]
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	d001      	beq.n	8aae <_qspi_sync_init+0x1a>
    8aaa:	2301      	movs	r3, #1
    8aac:	e000      	b.n	8ab0 <_qspi_sync_init+0x1c>
    8aae:	2300      	movs	r3, #0
    8ab0:	f003 0301 	and.w	r3, r3, #1
    8ab4:	b2db      	uxtb	r3, r3
    8ab6:	2240      	movs	r2, #64	; 0x40
    8ab8:	490c      	ldr	r1, [pc, #48]	; (8aec <_qspi_sync_init+0x58>)
    8aba:	4618      	mov	r0, r3
    8abc:	4b0c      	ldr	r3, [pc, #48]	; (8af0 <_qspi_sync_init+0x5c>)
    8abe:	4798      	blx	r3
	dev->prvt = hw;
    8ac0:	687b      	ldr	r3, [r7, #4]
    8ac2:	683a      	ldr	r2, [r7, #0]
    8ac4:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    8ac6:	687b      	ldr	r3, [r7, #4]
    8ac8:	681b      	ldr	r3, [r3, #0]
    8aca:	2101      	movs	r1, #1
    8acc:	4618      	mov	r0, r3
    8ace:	4b09      	ldr	r3, [pc, #36]	; (8af4 <_qspi_sync_init+0x60>)
    8ad0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    8ad2:	4909      	ldr	r1, [pc, #36]	; (8af8 <_qspi_sync_init+0x64>)
    8ad4:	6838      	ldr	r0, [r7, #0]
    8ad6:	4b09      	ldr	r3, [pc, #36]	; (8afc <_qspi_sync_init+0x68>)
    8ad8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    8ada:	4909      	ldr	r1, [pc, #36]	; (8b00 <_qspi_sync_init+0x6c>)
    8adc:	6838      	ldr	r0, [r7, #0]
    8ade:	4b09      	ldr	r3, [pc, #36]	; (8b04 <_qspi_sync_init+0x70>)
    8ae0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    8ae2:	2300      	movs	r3, #0
}
    8ae4:	4618      	mov	r0, r3
    8ae6:	3708      	adds	r7, #8
    8ae8:	46bd      	mov	sp, r7
    8aea:	bd80      	pop	{r7, pc}
    8aec:	00018614 	.word	0x00018614
    8af0:	000065d9 	.word	0x000065d9
    8af4:	00008931 	.word	0x00008931
    8af8:	06000011 	.word	0x06000011
    8afc:	0000894d 	.word	0x0000894d
    8b00:	00241300 	.word	0x00241300
    8b04:	00008969 	.word	0x00008969

00008b08 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    8b08:	b580      	push	{r7, lr}
    8b0a:	b082      	sub	sp, #8
    8b0c:	af00      	add	r7, sp, #0
    8b0e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    8b10:	687b      	ldr	r3, [r7, #4]
    8b12:	681b      	ldr	r3, [r3, #0]
    8b14:	2102      	movs	r1, #2
    8b16:	4618      	mov	r0, r3
    8b18:	4b03      	ldr	r3, [pc, #12]	; (8b28 <_qspi_sync_enable+0x20>)
    8b1a:	4798      	blx	r3
	return ERR_NONE;
    8b1c:	2300      	movs	r3, #0
}
    8b1e:	4618      	mov	r0, r3
    8b20:	3708      	adds	r7, #8
    8b22:	46bd      	mov	sp, r7
    8b24:	bd80      	pop	{r7, pc}
    8b26:	bf00      	nop
    8b28:	00008931 	.word	0x00008931

00008b2c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    8b2c:	b580      	push	{r7, lr}
    8b2e:	b082      	sub	sp, #8
    8b30:	af00      	add	r7, sp, #0
    8b32:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    8b34:	687b      	ldr	r3, [r7, #4]
    8b36:	681b      	ldr	r3, [r3, #0]
    8b38:	2100      	movs	r1, #0
    8b3a:	4618      	mov	r0, r3
    8b3c:	4b03      	ldr	r3, [pc, #12]	; (8b4c <_qspi_sync_disable+0x20>)
    8b3e:	4798      	blx	r3
	return ERR_NONE;
    8b40:	2300      	movs	r3, #0
}
    8b42:	4618      	mov	r0, r3
    8b44:	3708      	adds	r7, #8
    8b46:	46bd      	mov	sp, r7
    8b48:	bd80      	pop	{r7, pc}
    8b4a:	bf00      	nop
    8b4c:	00008931 	.word	0x00008931

00008b50 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8b50:	b580      	push	{r7, lr}
    8b52:	b084      	sub	sp, #16
    8b54:	af00      	add	r7, sp, #0
    8b56:	6078      	str	r0, [r7, #4]
    8b58:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    8b5a:	687b      	ldr	r3, [r7, #4]
    8b5c:	681b      	ldr	r3, [r3, #0]
    8b5e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    8b60:	683b      	ldr	r3, [r7, #0]
    8b62:	781b      	ldrb	r3, [r3, #0]
    8b64:	f003 0320 	and.w	r3, r3, #32
    8b68:	b2db      	uxtb	r3, r3
    8b6a:	2b00      	cmp	r3, #0
    8b6c:	d005      	beq.n	8b7a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    8b6e:	683b      	ldr	r3, [r7, #0]
    8b70:	689b      	ldr	r3, [r3, #8]
    8b72:	4619      	mov	r1, r3
    8b74:	68f8      	ldr	r0, [r7, #12]
    8b76:	4b13      	ldr	r3, [pc, #76]	; (8bc4 <_qspi_sync_command_set_ifr+0x74>)
    8b78:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    8b7a:	683b      	ldr	r3, [r7, #0]
    8b7c:	781b      	ldrb	r3, [r3, #0]
    8b7e:	f003 0310 	and.w	r3, r3, #16
    8b82:	b2db      	uxtb	r3, r3
    8b84:	2b00      	cmp	r3, #0
    8b86:	d005      	beq.n	8b94 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    8b88:	683b      	ldr	r3, [r7, #0]
    8b8a:	791b      	ldrb	r3, [r3, #4]
    8b8c:	4619      	mov	r1, r3
    8b8e:	68f8      	ldr	r0, [r7, #12]
    8b90:	4b0d      	ldr	r3, [pc, #52]	; (8bc8 <_qspi_sync_command_set_ifr+0x78>)
    8b92:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    8b94:	683b      	ldr	r3, [r7, #0]
    8b96:	781b      	ldrb	r3, [r3, #0]
    8b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8b9c:	b2db      	uxtb	r3, r3
    8b9e:	2b00      	cmp	r3, #0
    8ba0:	d005      	beq.n	8bae <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    8ba2:	683b      	ldr	r3, [r7, #0]
    8ba4:	795b      	ldrb	r3, [r3, #5]
    8ba6:	4619      	mov	r1, r3
    8ba8:	68f8      	ldr	r0, [r7, #12]
    8baa:	4b08      	ldr	r3, [pc, #32]	; (8bcc <_qspi_sync_command_set_ifr+0x7c>)
    8bac:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    8bae:	683b      	ldr	r3, [r7, #0]
    8bb0:	681b      	ldr	r3, [r3, #0]
    8bb2:	4619      	mov	r1, r3
    8bb4:	68f8      	ldr	r0, [r7, #12]
    8bb6:	4b06      	ldr	r3, [pc, #24]	; (8bd0 <_qspi_sync_command_set_ifr+0x80>)
    8bb8:	4798      	blx	r3
}
    8bba:	bf00      	nop
    8bbc:	3710      	adds	r7, #16
    8bbe:	46bd      	mov	sp, r7
    8bc0:	bd80      	pop	{r7, pc}
    8bc2:	bf00      	nop
    8bc4:	00008985 	.word	0x00008985
    8bc8:	000089a1 	.word	0x000089a1
    8bcc:	000089d5 	.word	0x000089d5
    8bd0:	00008a0d 	.word	0x00008a0d

00008bd4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8bd4:	b580      	push	{r7, lr}
    8bd6:	b084      	sub	sp, #16
    8bd8:	af00      	add	r7, sp, #0
    8bda:	6078      	str	r0, [r7, #4]
    8bdc:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    8bde:	687b      	ldr	r3, [r7, #4]
    8be0:	681b      	ldr	r3, [r3, #0]
    8be2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    8be4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    8be8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    8bea:	683b      	ldr	r3, [r7, #0]
    8bec:	781b      	ldrb	r3, [r3, #0]
    8bee:	f003 0320 	and.w	r3, r3, #32
    8bf2:	b2db      	uxtb	r3, r3
    8bf4:	2b00      	cmp	r3, #0
    8bf6:	d004      	beq.n	8c02 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    8bf8:	683b      	ldr	r3, [r7, #0]
    8bfa:	689b      	ldr	r3, [r3, #8]
    8bfc:	68fa      	ldr	r2, [r7, #12]
    8bfe:	4413      	add	r3, r2
    8c00:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    8c02:	68b8      	ldr	r0, [r7, #8]
    8c04:	4b18      	ldr	r3, [pc, #96]	; (8c68 <_qspi_sync_run_transfer+0x94>)
    8c06:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    8c08:	683b      	ldr	r3, [r7, #0]
    8c0a:	691b      	ldr	r3, [r3, #16]
    8c0c:	2b00      	cmp	r3, #0
    8c0e:	d103      	bne.n	8c18 <_qspi_sync_run_transfer+0x44>
    8c10:	683b      	ldr	r3, [r7, #0]
    8c12:	695b      	ldr	r3, [r3, #20]
    8c14:	2b00      	cmp	r3, #0
    8c16:	d001      	beq.n	8c1c <_qspi_sync_run_transfer+0x48>
    8c18:	2301      	movs	r3, #1
    8c1a:	e000      	b.n	8c1e <_qspi_sync_run_transfer+0x4a>
    8c1c:	2300      	movs	r3, #0
    8c1e:	f003 0301 	and.w	r3, r3, #1
    8c22:	b2db      	uxtb	r3, r3
    8c24:	2282      	movs	r2, #130	; 0x82
    8c26:	4911      	ldr	r1, [pc, #68]	; (8c6c <_qspi_sync_run_transfer+0x98>)
    8c28:	4618      	mov	r0, r3
    8c2a:	4b11      	ldr	r3, [pc, #68]	; (8c70 <_qspi_sync_run_transfer+0x9c>)
    8c2c:	4798      	blx	r3

	if (cmd->tx_buf) {
    8c2e:	683b      	ldr	r3, [r7, #0]
    8c30:	691b      	ldr	r3, [r3, #16]
    8c32:	2b00      	cmp	r3, #0
    8c34:	d008      	beq.n	8c48 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    8c36:	683b      	ldr	r3, [r7, #0]
    8c38:	6919      	ldr	r1, [r3, #16]
    8c3a:	683b      	ldr	r3, [r7, #0]
    8c3c:	68db      	ldr	r3, [r3, #12]
    8c3e:	461a      	mov	r2, r3
    8c40:	68f8      	ldr	r0, [r7, #12]
    8c42:	4b0c      	ldr	r3, [pc, #48]	; (8c74 <_qspi_sync_run_transfer+0xa0>)
    8c44:	4798      	blx	r3
    8c46:	e007      	b.n	8c58 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    8c48:	683b      	ldr	r3, [r7, #0]
    8c4a:	6958      	ldr	r0, [r3, #20]
    8c4c:	683b      	ldr	r3, [r7, #0]
    8c4e:	68db      	ldr	r3, [r3, #12]
    8c50:	461a      	mov	r2, r3
    8c52:	68f9      	ldr	r1, [r7, #12]
    8c54:	4b07      	ldr	r3, [pc, #28]	; (8c74 <_qspi_sync_run_transfer+0xa0>)
    8c56:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    8c58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8c5c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    8c60:	bf00      	nop
    8c62:	3710      	adds	r7, #16
    8c64:	46bd      	mov	sp, r7
    8c66:	bd80      	pop	{r7, pc}
    8c68:	00008a29 	.word	0x00008a29
    8c6c:	00018614 	.word	0x00018614
    8c70:	000065d9 	.word	0x000065d9
    8c74:	00008a41 	.word	0x00008a41

00008c78 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8c78:	b580      	push	{r7, lr}
    8c7a:	b082      	sub	sp, #8
    8c7c:	af00      	add	r7, sp, #0
    8c7e:	6078      	str	r0, [r7, #4]
    8c80:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    8c82:	6839      	ldr	r1, [r7, #0]
    8c84:	6878      	ldr	r0, [r7, #4]
    8c86:	4b14      	ldr	r3, [pc, #80]	; (8cd8 <_qspi_sync_serial_run_command+0x60>)
    8c88:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    8c8a:	683b      	ldr	r3, [r7, #0]
    8c8c:	781b      	ldrb	r3, [r3, #0]
    8c8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    8c92:	b2db      	uxtb	r3, r3
    8c94:	2b00      	cmp	r3, #0
    8c96:	d003      	beq.n	8ca0 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    8c98:	6839      	ldr	r1, [r7, #0]
    8c9a:	6878      	ldr	r0, [r7, #4]
    8c9c:	4b0f      	ldr	r3, [pc, #60]	; (8cdc <_qspi_sync_serial_run_command+0x64>)
    8c9e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    8ca0:	687b      	ldr	r3, [r7, #4]
    8ca2:	681b      	ldr	r3, [r3, #0]
    8ca4:	4618      	mov	r0, r3
    8ca6:	4b0e      	ldr	r3, [pc, #56]	; (8ce0 <_qspi_sync_serial_run_command+0x68>)
    8ca8:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    8caa:	bf00      	nop
    8cac:	687b      	ldr	r3, [r7, #4]
    8cae:	681b      	ldr	r3, [r3, #0]
    8cb0:	4618      	mov	r0, r3
    8cb2:	4b0c      	ldr	r3, [pc, #48]	; (8ce4 <_qspi_sync_serial_run_command+0x6c>)
    8cb4:	4798      	blx	r3
    8cb6:	4603      	mov	r3, r0
    8cb8:	f083 0301 	eor.w	r3, r3, #1
    8cbc:	b2db      	uxtb	r3, r3
    8cbe:	2b00      	cmp	r3, #0
    8cc0:	d1f4      	bne.n	8cac <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    8cc2:	687b      	ldr	r3, [r7, #4]
    8cc4:	681b      	ldr	r3, [r3, #0]
    8cc6:	4618      	mov	r0, r3
    8cc8:	4b07      	ldr	r3, [pc, #28]	; (8ce8 <_qspi_sync_serial_run_command+0x70>)
    8cca:	4798      	blx	r3
	return ERR_NONE;
    8ccc:	2300      	movs	r3, #0
}
    8cce:	4618      	mov	r0, r3
    8cd0:	3708      	adds	r7, #8
    8cd2:	46bd      	mov	sp, r7
    8cd4:	bd80      	pop	{r7, pc}
    8cd6:	bf00      	nop
    8cd8:	00008b51 	.word	0x00008b51
    8cdc:	00008bd5 	.word	0x00008bd5
    8ce0:	00008a75 	.word	0x00008a75
    8ce4:	000088ed 	.word	0x000088ed
    8ce8:	00008915 	.word	0x00008915

00008cec <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    8cec:	b480      	push	{r7}
    8cee:	b083      	sub	sp, #12
    8cf0:	af00      	add	r7, sp, #0
    8cf2:	6078      	str	r0, [r7, #4]
    8cf4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    8cf6:	bf00      	nop
    8cf8:	687b      	ldr	r3, [r7, #4]
    8cfa:	691a      	ldr	r2, [r3, #16]
    8cfc:	683b      	ldr	r3, [r7, #0]
    8cfe:	4013      	ands	r3, r2
    8d00:	2b00      	cmp	r3, #0
    8d02:	d1f9      	bne.n	8cf8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    8d04:	bf00      	nop
    8d06:	370c      	adds	r7, #12
    8d08:	46bd      	mov	sp, r7
    8d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d0e:	4770      	bx	lr

00008d10 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    8d10:	b480      	push	{r7}
    8d12:	b083      	sub	sp, #12
    8d14:	af00      	add	r7, sp, #0
    8d16:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    8d18:	687b      	ldr	r3, [r7, #4]
    8d1a:	f44f 7280 	mov.w	r2, #256	; 0x100
    8d1e:	819a      	strh	r2, [r3, #12]
}
    8d20:	bf00      	nop
    8d22:	370c      	adds	r7, #12
    8d24:	46bd      	mov	sp, r7
    8d26:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d2a:	4770      	bx	lr

00008d2c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    8d2c:	b480      	push	{r7}
    8d2e:	b083      	sub	sp, #12
    8d30:	af00      	add	r7, sp, #0
    8d32:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    8d34:	687b      	ldr	r3, [r7, #4]
    8d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    8d3a:	819a      	strh	r2, [r3, #12]
}
    8d3c:	bf00      	nop
    8d3e:	370c      	adds	r7, #12
    8d40:	46bd      	mov	sp, r7
    8d42:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d46:	4770      	bx	lr

00008d48 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    8d48:	b480      	push	{r7}
    8d4a:	b083      	sub	sp, #12
    8d4c:	af00      	add	r7, sp, #0
    8d4e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    8d50:	687b      	ldr	r3, [r7, #4]
    8d52:	899b      	ldrh	r3, [r3, #12]
    8d54:	b29b      	uxth	r3, r3
}
    8d56:	4618      	mov	r0, r3
    8d58:	370c      	adds	r7, #12
    8d5a:	46bd      	mov	sp, r7
    8d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d60:	4770      	bx	lr

00008d62 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    8d62:	b480      	push	{r7}
    8d64:	b083      	sub	sp, #12
    8d66:	af00      	add	r7, sp, #0
    8d68:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    8d6a:	687b      	ldr	r3, [r7, #4]
    8d6c:	895b      	ldrh	r3, [r3, #10]
    8d6e:	b29b      	uxth	r3, r3
}
    8d70:	4618      	mov	r0, r3
    8d72:	370c      	adds	r7, #12
    8d74:	46bd      	mov	sp, r7
    8d76:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d7a:	4770      	bx	lr

00008d7c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    8d7c:	b580      	push	{r7, lr}
    8d7e:	b082      	sub	sp, #8
    8d80:	af00      	add	r7, sp, #0
    8d82:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    8d84:	687b      	ldr	r3, [r7, #4]
    8d86:	881b      	ldrh	r3, [r3, #0]
    8d88:	b29b      	uxth	r3, r3
    8d8a:	f043 0301 	orr.w	r3, r3, #1
    8d8e:	b29a      	uxth	r2, r3
    8d90:	687b      	ldr	r3, [r7, #4]
    8d92:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    8d94:	2101      	movs	r1, #1
    8d96:	6878      	ldr	r0, [r7, #4]
    8d98:	4b02      	ldr	r3, [pc, #8]	; (8da4 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    8d9a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8d9c:	bf00      	nop
    8d9e:	3708      	adds	r7, #8
    8da0:	46bd      	mov	sp, r7
    8da2:	bd80      	pop	{r7, pc}
    8da4:	00008ced 	.word	0x00008ced

00008da8 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8da8:	b580      	push	{r7, lr}
    8daa:	b082      	sub	sp, #8
    8dac:	af00      	add	r7, sp, #0
    8dae:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    8db0:	687b      	ldr	r3, [r7, #4]
    8db2:	881b      	ldrh	r3, [r3, #0]
    8db4:	b29b      	uxth	r3, r3
    8db6:	f043 0302 	orr.w	r3, r3, #2
    8dba:	b29a      	uxth	r2, r3
    8dbc:	687b      	ldr	r3, [r7, #4]
    8dbe:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8dc0:	f248 0103 	movw	r1, #32771	; 0x8003
    8dc4:	6878      	ldr	r0, [r7, #4]
    8dc6:	4b03      	ldr	r3, [pc, #12]	; (8dd4 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    8dc8:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8dca:	bf00      	nop
    8dcc:	3708      	adds	r7, #8
    8dce:	46bd      	mov	sp, r7
    8dd0:	bd80      	pop	{r7, pc}
    8dd2:	bf00      	nop
    8dd4:	00008ced 	.word	0x00008ced

00008dd8 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8dd8:	b580      	push	{r7, lr}
    8dda:	b084      	sub	sp, #16
    8ddc:	af00      	add	r7, sp, #0
    8dde:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8de0:	f248 0103 	movw	r1, #32771	; 0x8003
    8de4:	6878      	ldr	r0, [r7, #4]
    8de6:	4b0a      	ldr	r3, [pc, #40]	; (8e10 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    8de8:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    8dea:	687b      	ldr	r3, [r7, #4]
    8dec:	881b      	ldrh	r3, [r3, #0]
    8dee:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    8df0:	89fb      	ldrh	r3, [r7, #14]
    8df2:	085b      	lsrs	r3, r3, #1
    8df4:	b29b      	uxth	r3, r3
    8df6:	f003 0301 	and.w	r3, r3, #1
    8dfa:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    8dfc:	89fb      	ldrh	r3, [r7, #14]
    8dfe:	2b00      	cmp	r3, #0
    8e00:	bf14      	ite	ne
    8e02:	2301      	movne	r3, #1
    8e04:	2300      	moveq	r3, #0
    8e06:	b2db      	uxtb	r3, r3
}
    8e08:	4618      	mov	r0, r3
    8e0a:	3710      	adds	r7, #16
    8e0c:	46bd      	mov	sp, r7
    8e0e:	bd80      	pop	{r7, pc}
    8e10:	00008ced 	.word	0x00008ced

00008e14 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8e14:	b580      	push	{r7, lr}
    8e16:	b082      	sub	sp, #8
    8e18:	af00      	add	r7, sp, #0
    8e1a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    8e1c:	687b      	ldr	r3, [r7, #4]
    8e1e:	881b      	ldrh	r3, [r3, #0]
    8e20:	b29b      	uxth	r3, r3
    8e22:	f023 0302 	bic.w	r3, r3, #2
    8e26:	b29a      	uxth	r2, r3
    8e28:	687b      	ldr	r3, [r7, #4]
    8e2a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8e2c:	f248 0103 	movw	r1, #32771	; 0x8003
    8e30:	6878      	ldr	r0, [r7, #4]
    8e32:	4b03      	ldr	r3, [pc, #12]	; (8e40 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    8e34:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8e36:	bf00      	nop
    8e38:	3708      	adds	r7, #8
    8e3a:	46bd      	mov	sp, r7
    8e3c:	bd80      	pop	{r7, pc}
    8e3e:	bf00      	nop
    8e40:	00008ced 	.word	0x00008ced

00008e44 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    8e44:	b580      	push	{r7, lr}
    8e46:	b082      	sub	sp, #8
    8e48:	af00      	add	r7, sp, #0
    8e4a:	6078      	str	r0, [r7, #4]
    8e4c:	460b      	mov	r3, r1
    8e4e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    8e50:	687b      	ldr	r3, [r7, #4]
    8e52:	887a      	ldrh	r2, [r7, #2]
    8e54:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8e56:	f248 0103 	movw	r1, #32771	; 0x8003
    8e5a:	6878      	ldr	r0, [r7, #4]
    8e5c:	4b02      	ldr	r3, [pc, #8]	; (8e68 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    8e5e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8e60:	bf00      	nop
    8e62:	3708      	adds	r7, #8
    8e64:	46bd      	mov	sp, r7
    8e66:	bd80      	pop	{r7, pc}
    8e68:	00008ced 	.word	0x00008ced

00008e6c <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    8e6c:	b580      	push	{r7, lr}
    8e6e:	b082      	sub	sp, #8
    8e70:	af00      	add	r7, sp, #0
    8e72:	6078      	str	r0, [r7, #4]
    8e74:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    8e76:	687b      	ldr	r3, [r7, #4]
    8e78:	683a      	ldr	r2, [r7, #0]
    8e7a:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    8e7c:	2108      	movs	r1, #8
    8e7e:	6878      	ldr	r0, [r7, #4]
    8e80:	4b02      	ldr	r3, [pc, #8]	; (8e8c <hri_rtcmode0_write_COUNT_reg+0x20>)
    8e82:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8e84:	bf00      	nop
    8e86:	3708      	adds	r7, #8
    8e88:	46bd      	mov	sp, r7
    8e8a:	bd80      	pop	{r7, pc}
    8e8c:	00008ced 	.word	0x00008ced

00008e90 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    8e90:	b580      	push	{r7, lr}
    8e92:	b082      	sub	sp, #8
    8e94:	af00      	add	r7, sp, #0
    8e96:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    8e98:	2108      	movs	r1, #8
    8e9a:	6878      	ldr	r0, [r7, #4]
    8e9c:	4b03      	ldr	r3, [pc, #12]	; (8eac <hri_rtcmode0_read_COUNT_reg+0x1c>)
    8e9e:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    8ea0:	687b      	ldr	r3, [r7, #4]
    8ea2:	699b      	ldr	r3, [r3, #24]
}
    8ea4:	4618      	mov	r0, r3
    8ea6:	3708      	adds	r7, #8
    8ea8:	46bd      	mov	sp, r7
    8eaa:	bd80      	pop	{r7, pc}
    8eac:	00008ced 	.word	0x00008ced

00008eb0 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    8eb0:	b480      	push	{r7}
    8eb2:	b083      	sub	sp, #12
    8eb4:	af00      	add	r7, sp, #0
    8eb6:	6078      	str	r0, [r7, #4]
    8eb8:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    8eba:	687b      	ldr	r3, [r7, #4]
    8ebc:	683a      	ldr	r2, [r7, #0]
    8ebe:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    8ec0:	bf00      	nop
    8ec2:	370c      	adds	r7, #12
    8ec4:	46bd      	mov	sp, r7
    8ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eca:	4770      	bx	lr

00008ecc <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    8ecc:	b580      	push	{r7, lr}
    8ece:	b082      	sub	sp, #8
    8ed0:	af00      	add	r7, sp, #0
    8ed2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    8ed4:	687b      	ldr	r3, [r7, #4]
    8ed6:	2b00      	cmp	r3, #0
    8ed8:	d005      	beq.n	8ee6 <_calendar_init+0x1a>
    8eda:	687b      	ldr	r3, [r7, #4]
    8edc:	681b      	ldr	r3, [r3, #0]
    8ede:	2b00      	cmp	r3, #0
    8ee0:	d001      	beq.n	8ee6 <_calendar_init+0x1a>
    8ee2:	2301      	movs	r3, #1
    8ee4:	e000      	b.n	8ee8 <_calendar_init+0x1c>
    8ee6:	2300      	movs	r3, #0
    8ee8:	f003 0301 	and.w	r3, r3, #1
    8eec:	b2db      	uxtb	r3, r3
    8eee:	222f      	movs	r2, #47	; 0x2f
    8ef0:	491b      	ldr	r1, [pc, #108]	; (8f60 <_calendar_init+0x94>)
    8ef2:	4618      	mov	r0, r3
    8ef4:	4b1b      	ldr	r3, [pc, #108]	; (8f64 <_calendar_init+0x98>)
    8ef6:	4798      	blx	r3

	_rtc_dev = dev;
    8ef8:	4a1b      	ldr	r2, [pc, #108]	; (8f68 <_calendar_init+0x9c>)
    8efa:	687b      	ldr	r3, [r7, #4]
    8efc:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    8efe:	687b      	ldr	r3, [r7, #4]
    8f00:	681b      	ldr	r3, [r3, #0]
    8f02:	4618      	mov	r0, r3
    8f04:	4b19      	ldr	r3, [pc, #100]	; (8f6c <_calendar_init+0xa0>)
    8f06:	4798      	blx	r3
    8f08:	4603      	mov	r3, r0
    8f0a:	2b00      	cmp	r3, #0
    8f0c:	d00a      	beq.n	8f24 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    8f0e:	687b      	ldr	r3, [r7, #4]
    8f10:	681b      	ldr	r3, [r3, #0]
    8f12:	4618      	mov	r0, r3
    8f14:	4b16      	ldr	r3, [pc, #88]	; (8f70 <_calendar_init+0xa4>)
    8f16:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    8f18:	687b      	ldr	r3, [r7, #4]
    8f1a:	681b      	ldr	r3, [r3, #0]
    8f1c:	2102      	movs	r1, #2
    8f1e:	4618      	mov	r0, r3
    8f20:	4b14      	ldr	r3, [pc, #80]	; (8f74 <_calendar_init+0xa8>)
    8f22:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    8f24:	687b      	ldr	r3, [r7, #4]
    8f26:	681b      	ldr	r3, [r3, #0]
    8f28:	4618      	mov	r0, r3
    8f2a:	4b13      	ldr	r3, [pc, #76]	; (8f78 <_calendar_init+0xac>)
    8f2c:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    8f2e:	687b      	ldr	r3, [r7, #4]
    8f30:	681b      	ldr	r3, [r3, #0]
    8f32:	2101      	movs	r1, #1
    8f34:	4618      	mov	r0, r3
    8f36:	4b0f      	ldr	r3, [pc, #60]	; (8f74 <_calendar_init+0xa8>)
    8f38:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    8f3a:	687b      	ldr	r3, [r7, #4]
    8f3c:	681b      	ldr	r3, [r3, #0]
    8f3e:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    8f42:	4618      	mov	r0, r3
    8f44:	4b0d      	ldr	r3, [pc, #52]	; (8f7c <_calendar_init+0xb0>)
    8f46:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    8f48:	687b      	ldr	r3, [r7, #4]
    8f4a:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    8f4c:	2100      	movs	r1, #0
    8f4e:	4618      	mov	r0, r3
    8f50:	4b0b      	ldr	r3, [pc, #44]	; (8f80 <_calendar_init+0xb4>)
    8f52:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    8f54:	2300      	movs	r3, #0
}
    8f56:	4618      	mov	r0, r3
    8f58:	3708      	adds	r7, #8
    8f5a:	46bd      	mov	sp, r7
    8f5c:	bd80      	pop	{r7, pc}
    8f5e:	bf00      	nop
    8f60:	0001862c 	.word	0x0001862c
    8f64:	000065d9 	.word	0x000065d9
    8f68:	20002f58 	.word	0x20002f58
    8f6c:	00008dd9 	.word	0x00008dd9
    8f70:	00008e15 	.word	0x00008e15
    8f74:	00008ced 	.word	0x00008ced
    8f78:	00008d7d 	.word	0x00008d7d
    8f7c:	00008e45 	.word	0x00008e45
    8f80:	00008eb1 	.word	0x00008eb1

00008f84 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    8f84:	b580      	push	{r7, lr}
    8f86:	b082      	sub	sp, #8
    8f88:	af00      	add	r7, sp, #0
    8f8a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    8f8c:	687b      	ldr	r3, [r7, #4]
    8f8e:	2b00      	cmp	r3, #0
    8f90:	d005      	beq.n	8f9e <_calendar_enable+0x1a>
    8f92:	687b      	ldr	r3, [r7, #4]
    8f94:	681b      	ldr	r3, [r3, #0]
    8f96:	2b00      	cmp	r3, #0
    8f98:	d001      	beq.n	8f9e <_calendar_enable+0x1a>
    8f9a:	2301      	movs	r3, #1
    8f9c:	e000      	b.n	8fa0 <_calendar_enable+0x1c>
    8f9e:	2300      	movs	r3, #0
    8fa0:	f003 0301 	and.w	r3, r3, #1
    8fa4:	b2db      	uxtb	r3, r3
    8fa6:	2275      	movs	r2, #117	; 0x75
    8fa8:	4906      	ldr	r1, [pc, #24]	; (8fc4 <_calendar_enable+0x40>)
    8faa:	4618      	mov	r0, r3
    8fac:	4b06      	ldr	r3, [pc, #24]	; (8fc8 <_calendar_enable+0x44>)
    8fae:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    8fb0:	687b      	ldr	r3, [r7, #4]
    8fb2:	681b      	ldr	r3, [r3, #0]
    8fb4:	4618      	mov	r0, r3
    8fb6:	4b05      	ldr	r3, [pc, #20]	; (8fcc <_calendar_enable+0x48>)
    8fb8:	4798      	blx	r3

	return ERR_NONE;
    8fba:	2300      	movs	r3, #0
}
    8fbc:	4618      	mov	r0, r3
    8fbe:	3708      	adds	r7, #8
    8fc0:	46bd      	mov	sp, r7
    8fc2:	bd80      	pop	{r7, pc}
    8fc4:	0001862c 	.word	0x0001862c
    8fc8:	000065d9 	.word	0x000065d9
    8fcc:	00008da9 	.word	0x00008da9

00008fd0 <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    8fd0:	b580      	push	{r7, lr}
    8fd2:	b082      	sub	sp, #8
    8fd4:	af00      	add	r7, sp, #0
    8fd6:	6078      	str	r0, [r7, #4]
    8fd8:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    8fda:	687b      	ldr	r3, [r7, #4]
    8fdc:	2b00      	cmp	r3, #0
    8fde:	d005      	beq.n	8fec <_calendar_set_counter+0x1c>
    8fe0:	687b      	ldr	r3, [r7, #4]
    8fe2:	681b      	ldr	r3, [r3, #0]
    8fe4:	2b00      	cmp	r3, #0
    8fe6:	d001      	beq.n	8fec <_calendar_set_counter+0x1c>
    8fe8:	2301      	movs	r3, #1
    8fea:	e000      	b.n	8fee <_calendar_set_counter+0x1e>
    8fec:	2300      	movs	r3, #0
    8fee:	f003 0301 	and.w	r3, r3, #1
    8ff2:	b2db      	uxtb	r3, r3
    8ff4:	228d      	movs	r2, #141	; 0x8d
    8ff6:	4907      	ldr	r1, [pc, #28]	; (9014 <_calendar_set_counter+0x44>)
    8ff8:	4618      	mov	r0, r3
    8ffa:	4b07      	ldr	r3, [pc, #28]	; (9018 <_calendar_set_counter+0x48>)
    8ffc:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    8ffe:	687b      	ldr	r3, [r7, #4]
    9000:	681b      	ldr	r3, [r3, #0]
    9002:	6839      	ldr	r1, [r7, #0]
    9004:	4618      	mov	r0, r3
    9006:	4b05      	ldr	r3, [pc, #20]	; (901c <_calendar_set_counter+0x4c>)
    9008:	4798      	blx	r3

	return ERR_NONE;
    900a:	2300      	movs	r3, #0
}
    900c:	4618      	mov	r0, r3
    900e:	3708      	adds	r7, #8
    9010:	46bd      	mov	sp, r7
    9012:	bd80      	pop	{r7, pc}
    9014:	0001862c 	.word	0x0001862c
    9018:	000065d9 	.word	0x000065d9
    901c:	00008e6d 	.word	0x00008e6d

00009020 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    9020:	b580      	push	{r7, lr}
    9022:	b082      	sub	sp, #8
    9024:	af00      	add	r7, sp, #0
    9026:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    9028:	687b      	ldr	r3, [r7, #4]
    902a:	2b00      	cmp	r3, #0
    902c:	d005      	beq.n	903a <_calendar_get_counter+0x1a>
    902e:	687b      	ldr	r3, [r7, #4]
    9030:	681b      	ldr	r3, [r3, #0]
    9032:	2b00      	cmp	r3, #0
    9034:	d001      	beq.n	903a <_calendar_get_counter+0x1a>
    9036:	2301      	movs	r3, #1
    9038:	e000      	b.n	903c <_calendar_get_counter+0x1c>
    903a:	2300      	movs	r3, #0
    903c:	f003 0301 	and.w	r3, r3, #1
    9040:	b2db      	uxtb	r3, r3
    9042:	2299      	movs	r2, #153	; 0x99
    9044:	4906      	ldr	r1, [pc, #24]	; (9060 <_calendar_get_counter+0x40>)
    9046:	4618      	mov	r0, r3
    9048:	4b06      	ldr	r3, [pc, #24]	; (9064 <_calendar_get_counter+0x44>)
    904a:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    904c:	687b      	ldr	r3, [r7, #4]
    904e:	681b      	ldr	r3, [r3, #0]
    9050:	4618      	mov	r0, r3
    9052:	4b05      	ldr	r3, [pc, #20]	; (9068 <_calendar_get_counter+0x48>)
    9054:	4798      	blx	r3
    9056:	4603      	mov	r3, r0
}
    9058:	4618      	mov	r0, r3
    905a:	3708      	adds	r7, #8
    905c:	46bd      	mov	sp, r7
    905e:	bd80      	pop	{r7, pc}
    9060:	0001862c 	.word	0x0001862c
    9064:	000065d9 	.word	0x000065d9
    9068:	00008e91 	.word	0x00008e91

0000906c <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    906c:	b580      	push	{r7, lr}
    906e:	b084      	sub	sp, #16
    9070:	af00      	add	r7, sp, #0
    9072:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    9074:	687b      	ldr	r3, [r7, #4]
    9076:	681b      	ldr	r3, [r3, #0]
    9078:	4618      	mov	r0, r3
    907a:	4b19      	ldr	r3, [pc, #100]	; (90e0 <_rtc_interrupt_handler+0x74>)
    907c:	4798      	blx	r3
    907e:	4603      	mov	r3, r0
    9080:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    9082:	687b      	ldr	r3, [r7, #4]
    9084:	681b      	ldr	r3, [r3, #0]
    9086:	4618      	mov	r0, r3
    9088:	4b16      	ldr	r3, [pc, #88]	; (90e4 <_rtc_interrupt_handler+0x78>)
    908a:	4798      	blx	r3
    908c:	4603      	mov	r3, r0
    908e:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    9090:	89fa      	ldrh	r2, [r7, #14]
    9092:	89bb      	ldrh	r3, [r7, #12]
    9094:	4013      	ands	r3, r2
    9096:	b29b      	uxth	r3, r3
    9098:	f403 7380 	and.w	r3, r3, #256	; 0x100
    909c:	2b00      	cmp	r3, #0
    909e:	d009      	beq.n	90b4 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    90a0:	687b      	ldr	r3, [r7, #4]
    90a2:	685b      	ldr	r3, [r3, #4]
    90a4:	6878      	ldr	r0, [r7, #4]
    90a6:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    90a8:	687b      	ldr	r3, [r7, #4]
    90aa:	681b      	ldr	r3, [r3, #0]
    90ac:	4618      	mov	r0, r3
    90ae:	4b0e      	ldr	r3, [pc, #56]	; (90e8 <_rtc_interrupt_handler+0x7c>)
    90b0:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    90b2:	e010      	b.n	90d6 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    90b4:	89fa      	ldrh	r2, [r7, #14]
    90b6:	89bb      	ldrh	r3, [r7, #12]
    90b8:	4013      	ands	r3, r2
    90ba:	b29b      	uxth	r3, r3
    90bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    90c0:	2b00      	cmp	r3, #0
    90c2:	d008      	beq.n	90d6 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    90c4:	687b      	ldr	r3, [r7, #4]
    90c6:	689b      	ldr	r3, [r3, #8]
    90c8:	6878      	ldr	r0, [r7, #4]
    90ca:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    90cc:	687b      	ldr	r3, [r7, #4]
    90ce:	681b      	ldr	r3, [r3, #0]
    90d0:	4618      	mov	r0, r3
    90d2:	4b06      	ldr	r3, [pc, #24]	; (90ec <_rtc_interrupt_handler+0x80>)
    90d4:	4798      	blx	r3
}
    90d6:	bf00      	nop
    90d8:	3710      	adds	r7, #16
    90da:	46bd      	mov	sp, r7
    90dc:	bd80      	pop	{r7, pc}
    90de:	bf00      	nop
    90e0:	00008d49 	.word	0x00008d49
    90e4:	00008d63 	.word	0x00008d63
    90e8:	00008d11 	.word	0x00008d11
    90ec:	00008d2d 	.word	0x00008d2d

000090f0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    90f0:	b580      	push	{r7, lr}
    90f2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    90f4:	4b03      	ldr	r3, [pc, #12]	; (9104 <RTC_Handler+0x14>)
    90f6:	681b      	ldr	r3, [r3, #0]
    90f8:	4618      	mov	r0, r3
    90fa:	4b03      	ldr	r3, [pc, #12]	; (9108 <RTC_Handler+0x18>)
    90fc:	4798      	blx	r3
}
    90fe:	bf00      	nop
    9100:	bd80      	pop	{r7, pc}
    9102:	bf00      	nop
    9104:	20002f58 	.word	0x20002f58
    9108:	0000906d 	.word	0x0000906d

0000910c <__NVIC_EnableIRQ>:
{
    910c:	b480      	push	{r7}
    910e:	b083      	sub	sp, #12
    9110:	af00      	add	r7, sp, #0
    9112:	4603      	mov	r3, r0
    9114:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    911a:	2b00      	cmp	r3, #0
    911c:	db0b      	blt.n	9136 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    911e:	4909      	ldr	r1, [pc, #36]	; (9144 <__NVIC_EnableIRQ+0x38>)
    9120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9124:	095b      	lsrs	r3, r3, #5
    9126:	88fa      	ldrh	r2, [r7, #6]
    9128:	f002 021f 	and.w	r2, r2, #31
    912c:	2001      	movs	r0, #1
    912e:	fa00 f202 	lsl.w	r2, r0, r2
    9132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9136:	bf00      	nop
    9138:	370c      	adds	r7, #12
    913a:	46bd      	mov	sp, r7
    913c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9140:	4770      	bx	lr
    9142:	bf00      	nop
    9144:	e000e100 	.word	0xe000e100

00009148 <__NVIC_DisableIRQ>:
{
    9148:	b480      	push	{r7}
    914a:	b083      	sub	sp, #12
    914c:	af00      	add	r7, sp, #0
    914e:	4603      	mov	r3, r0
    9150:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9156:	2b00      	cmp	r3, #0
    9158:	db10      	blt.n	917c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    915a:	490b      	ldr	r1, [pc, #44]	; (9188 <__NVIC_DisableIRQ+0x40>)
    915c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9160:	095b      	lsrs	r3, r3, #5
    9162:	88fa      	ldrh	r2, [r7, #6]
    9164:	f002 021f 	and.w	r2, r2, #31
    9168:	2001      	movs	r0, #1
    916a:	fa00 f202 	lsl.w	r2, r0, r2
    916e:	3320      	adds	r3, #32
    9170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    9174:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9178:	f3bf 8f6f 	isb	sy
}
    917c:	bf00      	nop
    917e:	370c      	adds	r7, #12
    9180:	46bd      	mov	sp, r7
    9182:	f85d 7b04 	ldr.w	r7, [sp], #4
    9186:	4770      	bx	lr
    9188:	e000e100 	.word	0xe000e100

0000918c <__NVIC_ClearPendingIRQ>:
{
    918c:	b480      	push	{r7}
    918e:	b083      	sub	sp, #12
    9190:	af00      	add	r7, sp, #0
    9192:	4603      	mov	r3, r0
    9194:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    919a:	2b00      	cmp	r3, #0
    919c:	db0c      	blt.n	91b8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    919e:	4909      	ldr	r1, [pc, #36]	; (91c4 <__NVIC_ClearPendingIRQ+0x38>)
    91a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    91a4:	095b      	lsrs	r3, r3, #5
    91a6:	88fa      	ldrh	r2, [r7, #6]
    91a8:	f002 021f 	and.w	r2, r2, #31
    91ac:	2001      	movs	r0, #1
    91ae:	fa00 f202 	lsl.w	r2, r0, r2
    91b2:	3360      	adds	r3, #96	; 0x60
    91b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    91b8:	bf00      	nop
    91ba:	370c      	adds	r7, #12
    91bc:	46bd      	mov	sp, r7
    91be:	f85d 7b04 	ldr.w	r7, [sp], #4
    91c2:	4770      	bx	lr
    91c4:	e000e100 	.word	0xe000e100

000091c8 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    91c8:	b480      	push	{r7}
    91ca:	b083      	sub	sp, #12
    91cc:	af00      	add	r7, sp, #0
    91ce:	6078      	str	r0, [r7, #4]
    91d0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    91d2:	bf00      	nop
    91d4:	687b      	ldr	r3, [r7, #4]
    91d6:	69da      	ldr	r2, [r3, #28]
    91d8:	683b      	ldr	r3, [r7, #0]
    91da:	4013      	ands	r3, r2
    91dc:	2b00      	cmp	r3, #0
    91de:	d1f9      	bne.n	91d4 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    91e0:	bf00      	nop
    91e2:	370c      	adds	r7, #12
    91e4:	46bd      	mov	sp, r7
    91e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    91ea:	4770      	bx	lr

000091ec <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    91ec:	b480      	push	{r7}
    91ee:	b083      	sub	sp, #12
    91f0:	af00      	add	r7, sp, #0
    91f2:	6078      	str	r0, [r7, #4]
    91f4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    91f6:	687b      	ldr	r3, [r7, #4]
    91f8:	69da      	ldr	r2, [r3, #28]
    91fa:	683b      	ldr	r3, [r7, #0]
    91fc:	4013      	ands	r3, r2
    91fe:	2b00      	cmp	r3, #0
    9200:	bf14      	ite	ne
    9202:	2301      	movne	r3, #1
    9204:	2300      	moveq	r3, #0
    9206:	b2db      	uxtb	r3, r3
}
    9208:	4618      	mov	r0, r3
    920a:	370c      	adds	r7, #12
    920c:	46bd      	mov	sp, r7
    920e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9212:	4770      	bx	lr

00009214 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    9214:	b480      	push	{r7}
    9216:	b083      	sub	sp, #12
    9218:	af00      	add	r7, sp, #0
    921a:	6078      	str	r0, [r7, #4]
    921c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    921e:	bf00      	nop
    9220:	687b      	ldr	r3, [r7, #4]
    9222:	69da      	ldr	r2, [r3, #28]
    9224:	683b      	ldr	r3, [r7, #0]
    9226:	4013      	ands	r3, r2
    9228:	2b00      	cmp	r3, #0
    922a:	d1f9      	bne.n	9220 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    922c:	bf00      	nop
    922e:	370c      	adds	r7, #12
    9230:	46bd      	mov	sp, r7
    9232:	f85d 7b04 	ldr.w	r7, [sp], #4
    9236:	4770      	bx	lr

00009238 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    9238:	b480      	push	{r7}
    923a:	b083      	sub	sp, #12
    923c:	af00      	add	r7, sp, #0
    923e:	6078      	str	r0, [r7, #4]
    9240:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    9242:	687b      	ldr	r3, [r7, #4]
    9244:	69da      	ldr	r2, [r3, #28]
    9246:	683b      	ldr	r3, [r7, #0]
    9248:	4013      	ands	r3, r2
    924a:	2b00      	cmp	r3, #0
    924c:	bf14      	ite	ne
    924e:	2301      	movne	r3, #1
    9250:	2300      	moveq	r3, #0
    9252:	b2db      	uxtb	r3, r3
}
    9254:	4618      	mov	r0, r3
    9256:	370c      	adds	r7, #12
    9258:	46bd      	mov	sp, r7
    925a:	f85d 7b04 	ldr.w	r7, [sp], #4
    925e:	4770      	bx	lr

00009260 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    9260:	b480      	push	{r7}
    9262:	b083      	sub	sp, #12
    9264:	af00      	add	r7, sp, #0
    9266:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    9268:	687b      	ldr	r3, [r7, #4]
    926a:	2201      	movs	r2, #1
    926c:	761a      	strb	r2, [r3, #24]
}
    926e:	bf00      	nop
    9270:	370c      	adds	r7, #12
    9272:	46bd      	mov	sp, r7
    9274:	f85d 7b04 	ldr.w	r7, [sp], #4
    9278:	4770      	bx	lr

0000927a <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    927a:	b480      	push	{r7}
    927c:	b083      	sub	sp, #12
    927e:	af00      	add	r7, sp, #0
    9280:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    9282:	687b      	ldr	r3, [r7, #4]
    9284:	2202      	movs	r2, #2
    9286:	761a      	strb	r2, [r3, #24]
}
    9288:	bf00      	nop
    928a:	370c      	adds	r7, #12
    928c:	46bd      	mov	sp, r7
    928e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9292:	4770      	bx	lr

00009294 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    9294:	b480      	push	{r7}
    9296:	b083      	sub	sp, #12
    9298:	af00      	add	r7, sp, #0
    929a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    929c:	687b      	ldr	r3, [r7, #4]
    929e:	7e1b      	ldrb	r3, [r3, #24]
    92a0:	b2db      	uxtb	r3, r3
}
    92a2:	4618      	mov	r0, r3
    92a4:	370c      	adds	r7, #12
    92a6:	46bd      	mov	sp, r7
    92a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    92ac:	4770      	bx	lr

000092ae <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    92ae:	b480      	push	{r7}
    92b0:	b083      	sub	sp, #12
    92b2:	af00      	add	r7, sp, #0
    92b4:	6078      	str	r0, [r7, #4]
    92b6:	460b      	mov	r3, r1
    92b8:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    92ba:	687b      	ldr	r3, [r7, #4]
    92bc:	78fa      	ldrb	r2, [r7, #3]
    92be:	761a      	strb	r2, [r3, #24]
}
    92c0:	bf00      	nop
    92c2:	370c      	adds	r7, #12
    92c4:	46bd      	mov	sp, r7
    92c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    92ca:	4770      	bx	lr

000092cc <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    92cc:	b480      	push	{r7}
    92ce:	b085      	sub	sp, #20
    92d0:	af00      	add	r7, sp, #0
    92d2:	6078      	str	r0, [r7, #4]
    92d4:	460b      	mov	r3, r1
    92d6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    92d8:	687b      	ldr	r3, [r7, #4]
    92da:	7e1b      	ldrb	r3, [r3, #24]
    92dc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    92de:	7bfa      	ldrb	r2, [r7, #15]
    92e0:	78fb      	ldrb	r3, [r7, #3]
    92e2:	4013      	ands	r3, r2
    92e4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    92e6:	7bfb      	ldrb	r3, [r7, #15]
}
    92e8:	4618      	mov	r0, r3
    92ea:	3714      	adds	r7, #20
    92ec:	46bd      	mov	sp, r7
    92ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    92f2:	4770      	bx	lr

000092f4 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    92f4:	b480      	push	{r7}
    92f6:	b083      	sub	sp, #12
    92f8:	af00      	add	r7, sp, #0
    92fa:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    92fc:	687b      	ldr	r3, [r7, #4]
    92fe:	7e1b      	ldrb	r3, [r3, #24]
    9300:	b2db      	uxtb	r3, r3
}
    9302:	4618      	mov	r0, r3
    9304:	370c      	adds	r7, #12
    9306:	46bd      	mov	sp, r7
    9308:	f85d 7b04 	ldr.w	r7, [sp], #4
    930c:	4770      	bx	lr

0000930e <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    930e:	b480      	push	{r7}
    9310:	b083      	sub	sp, #12
    9312:	af00      	add	r7, sp, #0
    9314:	6078      	str	r0, [r7, #4]
    9316:	460b      	mov	r3, r1
    9318:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    931a:	687b      	ldr	r3, [r7, #4]
    931c:	78fa      	ldrb	r2, [r7, #3]
    931e:	761a      	strb	r2, [r3, #24]
}
    9320:	bf00      	nop
    9322:	370c      	adds	r7, #12
    9324:	46bd      	mov	sp, r7
    9326:	f85d 7b04 	ldr.w	r7, [sp], #4
    932a:	4770      	bx	lr

0000932c <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    932c:	b480      	push	{r7}
    932e:	b083      	sub	sp, #12
    9330:	af00      	add	r7, sp, #0
    9332:	6078      	str	r0, [r7, #4]
    9334:	460b      	mov	r3, r1
    9336:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    9338:	78fb      	ldrb	r3, [r7, #3]
    933a:	f083 0301 	eor.w	r3, r3, #1
    933e:	b2db      	uxtb	r3, r3
    9340:	2b00      	cmp	r3, #0
    9342:	d003      	beq.n	934c <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    9344:	687b      	ldr	r3, [r7, #4]
    9346:	2201      	movs	r2, #1
    9348:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    934a:	e002      	b.n	9352 <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    934c:	687b      	ldr	r3, [r7, #4]
    934e:	2201      	movs	r2, #1
    9350:	759a      	strb	r2, [r3, #22]
}
    9352:	bf00      	nop
    9354:	370c      	adds	r7, #12
    9356:	46bd      	mov	sp, r7
    9358:	f85d 7b04 	ldr.w	r7, [sp], #4
    935c:	4770      	bx	lr

0000935e <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    935e:	b480      	push	{r7}
    9360:	b083      	sub	sp, #12
    9362:	af00      	add	r7, sp, #0
    9364:	6078      	str	r0, [r7, #4]
    9366:	460b      	mov	r3, r1
    9368:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    936a:	78fb      	ldrb	r3, [r7, #3]
    936c:	f083 0301 	eor.w	r3, r3, #1
    9370:	b2db      	uxtb	r3, r3
    9372:	2b00      	cmp	r3, #0
    9374:	d003      	beq.n	937e <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    9376:	687b      	ldr	r3, [r7, #4]
    9378:	2202      	movs	r2, #2
    937a:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    937c:	e002      	b.n	9384 <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    937e:	687b      	ldr	r3, [r7, #4]
    9380:	2202      	movs	r2, #2
    9382:	759a      	strb	r2, [r3, #22]
}
    9384:	bf00      	nop
    9386:	370c      	adds	r7, #12
    9388:	46bd      	mov	sp, r7
    938a:	f85d 7b04 	ldr.w	r7, [sp], #4
    938e:	4770      	bx	lr

00009390 <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    9390:	b480      	push	{r7}
    9392:	b083      	sub	sp, #12
    9394:	af00      	add	r7, sp, #0
    9396:	6078      	str	r0, [r7, #4]
    9398:	460b      	mov	r3, r1
    939a:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    939c:	78fb      	ldrb	r3, [r7, #3]
    939e:	f083 0301 	eor.w	r3, r3, #1
    93a2:	b2db      	uxtb	r3, r3
    93a4:	2b00      	cmp	r3, #0
    93a6:	d003      	beq.n	93b0 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    93a8:	687b      	ldr	r3, [r7, #4]
    93aa:	2280      	movs	r2, #128	; 0x80
    93ac:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    93ae:	e002      	b.n	93b6 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    93b0:	687b      	ldr	r3, [r7, #4]
    93b2:	2280      	movs	r2, #128	; 0x80
    93b4:	759a      	strb	r2, [r3, #22]
}
    93b6:	bf00      	nop
    93b8:	370c      	adds	r7, #12
    93ba:	46bd      	mov	sp, r7
    93bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    93c0:	4770      	bx	lr

000093c2 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    93c2:	b480      	push	{r7}
    93c4:	b083      	sub	sp, #12
    93c6:	af00      	add	r7, sp, #0
    93c8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    93ca:	687b      	ldr	r3, [r7, #4]
    93cc:	2201      	movs	r2, #1
    93ce:	759a      	strb	r2, [r3, #22]
}
    93d0:	bf00      	nop
    93d2:	370c      	adds	r7, #12
    93d4:	46bd      	mov	sp, r7
    93d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    93da:	4770      	bx	lr

000093dc <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    93dc:	b480      	push	{r7}
    93de:	b083      	sub	sp, #12
    93e0:	af00      	add	r7, sp, #0
    93e2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    93e4:	687b      	ldr	r3, [r7, #4]
    93e6:	2201      	movs	r2, #1
    93e8:	751a      	strb	r2, [r3, #20]
}
    93ea:	bf00      	nop
    93ec:	370c      	adds	r7, #12
    93ee:	46bd      	mov	sp, r7
    93f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    93f4:	4770      	bx	lr

000093f6 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    93f6:	b480      	push	{r7}
    93f8:	b083      	sub	sp, #12
    93fa:	af00      	add	r7, sp, #0
    93fc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    93fe:	687b      	ldr	r3, [r7, #4]
    9400:	2202      	movs	r2, #2
    9402:	759a      	strb	r2, [r3, #22]
}
    9404:	bf00      	nop
    9406:	370c      	adds	r7, #12
    9408:	46bd      	mov	sp, r7
    940a:	f85d 7b04 	ldr.w	r7, [sp], #4
    940e:	4770      	bx	lr

00009410 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    9410:	b480      	push	{r7}
    9412:	b083      	sub	sp, #12
    9414:	af00      	add	r7, sp, #0
    9416:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    9418:	687b      	ldr	r3, [r7, #4]
    941a:	2202      	movs	r2, #2
    941c:	751a      	strb	r2, [r3, #20]
}
    941e:	bf00      	nop
    9420:	370c      	adds	r7, #12
    9422:	46bd      	mov	sp, r7
    9424:	f85d 7b04 	ldr.w	r7, [sp], #4
    9428:	4770      	bx	lr

0000942a <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    942a:	b480      	push	{r7}
    942c:	b083      	sub	sp, #12
    942e:	af00      	add	r7, sp, #0
    9430:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    9432:	687b      	ldr	r3, [r7, #4]
    9434:	2204      	movs	r2, #4
    9436:	759a      	strb	r2, [r3, #22]
}
    9438:	bf00      	nop
    943a:	370c      	adds	r7, #12
    943c:	46bd      	mov	sp, r7
    943e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9442:	4770      	bx	lr

00009444 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    9444:	b480      	push	{r7}
    9446:	b083      	sub	sp, #12
    9448:	af00      	add	r7, sp, #0
    944a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    944c:	687b      	ldr	r3, [r7, #4]
    944e:	2204      	movs	r2, #4
    9450:	751a      	strb	r2, [r3, #20]
}
    9452:	bf00      	nop
    9454:	370c      	adds	r7, #12
    9456:	46bd      	mov	sp, r7
    9458:	f85d 7b04 	ldr.w	r7, [sp], #4
    945c:	4770      	bx	lr

0000945e <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    945e:	b480      	push	{r7}
    9460:	b083      	sub	sp, #12
    9462:	af00      	add	r7, sp, #0
    9464:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    9466:	687b      	ldr	r3, [r7, #4]
    9468:	7d9b      	ldrb	r3, [r3, #22]
    946a:	b2db      	uxtb	r3, r3
}
    946c:	4618      	mov	r0, r3
    946e:	370c      	adds	r7, #12
    9470:	46bd      	mov	sp, r7
    9472:	f85d 7b04 	ldr.w	r7, [sp], #4
    9476:	4770      	bx	lr

00009478 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9478:	b580      	push	{r7, lr}
    947a:	b082      	sub	sp, #8
    947c:	af00      	add	r7, sp, #0
    947e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    9480:	687b      	ldr	r3, [r7, #4]
    9482:	681b      	ldr	r3, [r3, #0]
    9484:	f043 0202 	orr.w	r2, r3, #2
    9488:	687b      	ldr	r3, [r7, #4]
    948a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    948c:	2103      	movs	r1, #3
    948e:	6878      	ldr	r0, [r7, #4]
    9490:	4b02      	ldr	r3, [pc, #8]	; (949c <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    9492:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9494:	bf00      	nop
    9496:	3708      	adds	r7, #8
    9498:	46bd      	mov	sp, r7
    949a:	bd80      	pop	{r7, pc}
    949c:	000091c9 	.word	0x000091c9

000094a0 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    94a0:	b580      	push	{r7, lr}
    94a2:	b082      	sub	sp, #8
    94a4:	af00      	add	r7, sp, #0
    94a6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    94a8:	687b      	ldr	r3, [r7, #4]
    94aa:	681b      	ldr	r3, [r3, #0]
    94ac:	f023 0202 	bic.w	r2, r3, #2
    94b0:	687b      	ldr	r3, [r7, #4]
    94b2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    94b4:	2103      	movs	r1, #3
    94b6:	6878      	ldr	r0, [r7, #4]
    94b8:	4b02      	ldr	r3, [pc, #8]	; (94c4 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    94ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    94bc:	bf00      	nop
    94be:	3708      	adds	r7, #8
    94c0:	46bd      	mov	sp, r7
    94c2:	bd80      	pop	{r7, pc}
    94c4:	000091c9 	.word	0x000091c9

000094c8 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    94c8:	b480      	push	{r7}
    94ca:	b085      	sub	sp, #20
    94cc:	af00      	add	r7, sp, #0
    94ce:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    94d0:	687b      	ldr	r3, [r7, #4]
    94d2:	681b      	ldr	r3, [r3, #0]
    94d4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    94d6:	68fb      	ldr	r3, [r7, #12]
    94d8:	0edb      	lsrs	r3, r3, #27
    94da:	f003 0301 	and.w	r3, r3, #1
    94de:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    94e0:	68fb      	ldr	r3, [r7, #12]
    94e2:	2b00      	cmp	r3, #0
    94e4:	bf14      	ite	ne
    94e6:	2301      	movne	r3, #1
    94e8:	2300      	moveq	r3, #0
    94ea:	b2db      	uxtb	r3, r3
}
    94ec:	4618      	mov	r0, r3
    94ee:	3714      	adds	r7, #20
    94f0:	46bd      	mov	sp, r7
    94f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    94f6:	4770      	bx	lr

000094f8 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    94f8:	b580      	push	{r7, lr}
    94fa:	b084      	sub	sp, #16
    94fc:	af00      	add	r7, sp, #0
    94fe:	6078      	str	r0, [r7, #4]
    9500:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9502:	2103      	movs	r1, #3
    9504:	6878      	ldr	r0, [r7, #4]
    9506:	4b07      	ldr	r3, [pc, #28]	; (9524 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    9508:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    950a:	687b      	ldr	r3, [r7, #4]
    950c:	681b      	ldr	r3, [r3, #0]
    950e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9510:	68fa      	ldr	r2, [r7, #12]
    9512:	683b      	ldr	r3, [r7, #0]
    9514:	4013      	ands	r3, r2
    9516:	60fb      	str	r3, [r7, #12]
	return tmp;
    9518:	68fb      	ldr	r3, [r7, #12]
}
    951a:	4618      	mov	r0, r3
    951c:	3710      	adds	r7, #16
    951e:	46bd      	mov	sp, r7
    9520:	bd80      	pop	{r7, pc}
    9522:	bf00      	nop
    9524:	000091c9 	.word	0x000091c9

00009528 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    9528:	b580      	push	{r7, lr}
    952a:	b082      	sub	sp, #8
    952c:	af00      	add	r7, sp, #0
    952e:	6078      	str	r0, [r7, #4]
    9530:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    9532:	687b      	ldr	r3, [r7, #4]
    9534:	683a      	ldr	r2, [r7, #0]
    9536:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9538:	2103      	movs	r1, #3
    953a:	6878      	ldr	r0, [r7, #4]
    953c:	4b02      	ldr	r3, [pc, #8]	; (9548 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    953e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9540:	bf00      	nop
    9542:	3708      	adds	r7, #8
    9544:	46bd      	mov	sp, r7
    9546:	bd80      	pop	{r7, pc}
    9548:	000091c9 	.word	0x000091c9

0000954c <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    954c:	b580      	push	{r7, lr}
    954e:	b082      	sub	sp, #8
    9550:	af00      	add	r7, sp, #0
    9552:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    9554:	687b      	ldr	r3, [r7, #4]
    9556:	681b      	ldr	r3, [r3, #0]
    9558:	f043 0202 	orr.w	r2, r3, #2
    955c:	687b      	ldr	r3, [r7, #4]
    955e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9560:	2103      	movs	r1, #3
    9562:	6878      	ldr	r0, [r7, #4]
    9564:	4b02      	ldr	r3, [pc, #8]	; (9570 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    9566:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9568:	bf00      	nop
    956a:	3708      	adds	r7, #8
    956c:	46bd      	mov	sp, r7
    956e:	bd80      	pop	{r7, pc}
    9570:	00009215 	.word	0x00009215

00009574 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9574:	b580      	push	{r7, lr}
    9576:	b084      	sub	sp, #16
    9578:	af00      	add	r7, sp, #0
    957a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    957c:	2103      	movs	r1, #3
    957e:	6878      	ldr	r0, [r7, #4]
    9580:	4b09      	ldr	r3, [pc, #36]	; (95a8 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    9582:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    9584:	687b      	ldr	r3, [r7, #4]
    9586:	681b      	ldr	r3, [r3, #0]
    9588:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    958a:	68fb      	ldr	r3, [r7, #12]
    958c:	085b      	lsrs	r3, r3, #1
    958e:	f003 0301 	and.w	r3, r3, #1
    9592:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9594:	68fb      	ldr	r3, [r7, #12]
    9596:	2b00      	cmp	r3, #0
    9598:	bf14      	ite	ne
    959a:	2301      	movne	r3, #1
    959c:	2300      	moveq	r3, #0
    959e:	b2db      	uxtb	r3, r3
}
    95a0:	4618      	mov	r0, r3
    95a2:	3710      	adds	r7, #16
    95a4:	46bd      	mov	sp, r7
    95a6:	bd80      	pop	{r7, pc}
    95a8:	00009215 	.word	0x00009215

000095ac <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    95ac:	b580      	push	{r7, lr}
    95ae:	b082      	sub	sp, #8
    95b0:	af00      	add	r7, sp, #0
    95b2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    95b4:	687b      	ldr	r3, [r7, #4]
    95b6:	681b      	ldr	r3, [r3, #0]
    95b8:	f023 0202 	bic.w	r2, r3, #2
    95bc:	687b      	ldr	r3, [r7, #4]
    95be:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    95c0:	2103      	movs	r1, #3
    95c2:	6878      	ldr	r0, [r7, #4]
    95c4:	4b02      	ldr	r3, [pc, #8]	; (95d0 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    95c6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    95c8:	bf00      	nop
    95ca:	3708      	adds	r7, #8
    95cc:	46bd      	mov	sp, r7
    95ce:	bd80      	pop	{r7, pc}
    95d0:	00009215 	.word	0x00009215

000095d4 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    95d4:	b580      	push	{r7, lr}
    95d6:	b084      	sub	sp, #16
    95d8:	af00      	add	r7, sp, #0
    95da:	6078      	str	r0, [r7, #4]
    95dc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    95de:	2103      	movs	r1, #3
    95e0:	6878      	ldr	r0, [r7, #4]
    95e2:	4b07      	ldr	r3, [pc, #28]	; (9600 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    95e4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    95e6:	687b      	ldr	r3, [r7, #4]
    95e8:	681b      	ldr	r3, [r3, #0]
    95ea:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    95ec:	68fa      	ldr	r2, [r7, #12]
    95ee:	683b      	ldr	r3, [r7, #0]
    95f0:	4013      	ands	r3, r2
    95f2:	60fb      	str	r3, [r7, #12]
	return tmp;
    95f4:	68fb      	ldr	r3, [r7, #12]
}
    95f6:	4618      	mov	r0, r3
    95f8:	3710      	adds	r7, #16
    95fa:	46bd      	mov	sp, r7
    95fc:	bd80      	pop	{r7, pc}
    95fe:	bf00      	nop
    9600:	00009215 	.word	0x00009215

00009604 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    9604:	b580      	push	{r7, lr}
    9606:	b082      	sub	sp, #8
    9608:	af00      	add	r7, sp, #0
    960a:	6078      	str	r0, [r7, #4]
    960c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    960e:	687b      	ldr	r3, [r7, #4]
    9610:	683a      	ldr	r2, [r7, #0]
    9612:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9614:	2103      	movs	r1, #3
    9616:	6878      	ldr	r0, [r7, #4]
    9618:	4b02      	ldr	r3, [pc, #8]	; (9624 <hri_sercomspi_write_CTRLA_reg+0x20>)
    961a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    961c:	bf00      	nop
    961e:	3708      	adds	r7, #8
    9620:	46bd      	mov	sp, r7
    9622:	bd80      	pop	{r7, pc}
    9624:	00009215 	.word	0x00009215

00009628 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    9628:	b580      	push	{r7, lr}
    962a:	b082      	sub	sp, #8
    962c:	af00      	add	r7, sp, #0
    962e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    9630:	687b      	ldr	r3, [r7, #4]
    9632:	685b      	ldr	r3, [r3, #4]
    9634:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    9638:	687b      	ldr	r3, [r7, #4]
    963a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    963c:	2104      	movs	r1, #4
    963e:	6878      	ldr	r0, [r7, #4]
    9640:	4b02      	ldr	r3, [pc, #8]	; (964c <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    9642:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9644:	bf00      	nop
    9646:	3708      	adds	r7, #8
    9648:	46bd      	mov	sp, r7
    964a:	bd80      	pop	{r7, pc}
    964c:	000091c9 	.word	0x000091c9

00009650 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    9650:	b580      	push	{r7, lr}
    9652:	b082      	sub	sp, #8
    9654:	af00      	add	r7, sp, #0
    9656:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    9658:	687b      	ldr	r3, [r7, #4]
    965a:	685b      	ldr	r3, [r3, #4]
    965c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    9660:	687b      	ldr	r3, [r7, #4]
    9662:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9664:	2104      	movs	r1, #4
    9666:	6878      	ldr	r0, [r7, #4]
    9668:	4b02      	ldr	r3, [pc, #8]	; (9674 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    966a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    966c:	bf00      	nop
    966e:	3708      	adds	r7, #8
    9670:	46bd      	mov	sp, r7
    9672:	bd80      	pop	{r7, pc}
    9674:	000091c9 	.word	0x000091c9

00009678 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    9678:	b580      	push	{r7, lr}
    967a:	b082      	sub	sp, #8
    967c:	af00      	add	r7, sp, #0
    967e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9680:	687b      	ldr	r3, [r7, #4]
    9682:	685b      	ldr	r3, [r3, #4]
    9684:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    9688:	687b      	ldr	r3, [r7, #4]
    968a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    968c:	2104      	movs	r1, #4
    968e:	6878      	ldr	r0, [r7, #4]
    9690:	4b02      	ldr	r3, [pc, #8]	; (969c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    9692:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9694:	bf00      	nop
    9696:	3708      	adds	r7, #8
    9698:	46bd      	mov	sp, r7
    969a:	bd80      	pop	{r7, pc}
    969c:	000091c9 	.word	0x000091c9

000096a0 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    96a0:	b580      	push	{r7, lr}
    96a2:	b082      	sub	sp, #8
    96a4:	af00      	add	r7, sp, #0
    96a6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    96a8:	687b      	ldr	r3, [r7, #4]
    96aa:	685b      	ldr	r3, [r3, #4]
    96ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    96b0:	687b      	ldr	r3, [r7, #4]
    96b2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    96b4:	2104      	movs	r1, #4
    96b6:	6878      	ldr	r0, [r7, #4]
    96b8:	4b02      	ldr	r3, [pc, #8]	; (96c4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    96ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    96bc:	bf00      	nop
    96be:	3708      	adds	r7, #8
    96c0:	46bd      	mov	sp, r7
    96c2:	bd80      	pop	{r7, pc}
    96c4:	000091c9 	.word	0x000091c9

000096c8 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    96c8:	b580      	push	{r7, lr}
    96ca:	b082      	sub	sp, #8
    96cc:	af00      	add	r7, sp, #0
    96ce:	6078      	str	r0, [r7, #4]
    96d0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    96d2:	687b      	ldr	r3, [r7, #4]
    96d4:	685a      	ldr	r2, [r3, #4]
    96d6:	683b      	ldr	r3, [r7, #0]
    96d8:	041b      	lsls	r3, r3, #16
    96da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    96de:	431a      	orrs	r2, r3
    96e0:	687b      	ldr	r3, [r7, #4]
    96e2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    96e4:	2104      	movs	r1, #4
    96e6:	6878      	ldr	r0, [r7, #4]
    96e8:	4b02      	ldr	r3, [pc, #8]	; (96f4 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    96ea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    96ec:	bf00      	nop
    96ee:	3708      	adds	r7, #8
    96f0:	46bd      	mov	sp, r7
    96f2:	bd80      	pop	{r7, pc}
    96f4:	000091c9 	.word	0x000091c9

000096f8 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    96f8:	b580      	push	{r7, lr}
    96fa:	b082      	sub	sp, #8
    96fc:	af00      	add	r7, sp, #0
    96fe:	6078      	str	r0, [r7, #4]
    9700:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    9702:	687b      	ldr	r3, [r7, #4]
    9704:	683a      	ldr	r2, [r7, #0]
    9706:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9708:	2104      	movs	r1, #4
    970a:	6878      	ldr	r0, [r7, #4]
    970c:	4b02      	ldr	r3, [pc, #8]	; (9718 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    970e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9710:	bf00      	nop
    9712:	3708      	adds	r7, #8
    9714:	46bd      	mov	sp, r7
    9716:	bd80      	pop	{r7, pc}
    9718:	000091c9 	.word	0x000091c9

0000971c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    971c:	b580      	push	{r7, lr}
    971e:	b082      	sub	sp, #8
    9720:	af00      	add	r7, sp, #0
    9722:	6078      	str	r0, [r7, #4]
    9724:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    9726:	687b      	ldr	r3, [r7, #4]
    9728:	683a      	ldr	r2, [r7, #0]
    972a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    972c:	2117      	movs	r1, #23
    972e:	6878      	ldr	r0, [r7, #4]
    9730:	4b02      	ldr	r3, [pc, #8]	; (973c <hri_sercomspi_write_CTRLB_reg+0x20>)
    9732:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9734:	bf00      	nop
    9736:	3708      	adds	r7, #8
    9738:	46bd      	mov	sp, r7
    973a:	bd80      	pop	{r7, pc}
    973c:	00009215 	.word	0x00009215

00009740 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    9740:	b480      	push	{r7}
    9742:	b083      	sub	sp, #12
    9744:	af00      	add	r7, sp, #0
    9746:	6078      	str	r0, [r7, #4]
    9748:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    974a:	687b      	ldr	r3, [r7, #4]
    974c:	683a      	ldr	r2, [r7, #0]
    974e:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9750:	bf00      	nop
    9752:	370c      	adds	r7, #12
    9754:	46bd      	mov	sp, r7
    9756:	f85d 7b04 	ldr.w	r7, [sp], #4
    975a:	4770      	bx	lr

0000975c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    975c:	b480      	push	{r7}
    975e:	b083      	sub	sp, #12
    9760:	af00      	add	r7, sp, #0
    9762:	6078      	str	r0, [r7, #4]
    9764:	460b      	mov	r3, r1
    9766:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    9768:	687b      	ldr	r3, [r7, #4]
    976a:	78fa      	ldrb	r2, [r7, #3]
    976c:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    976e:	bf00      	nop
    9770:	370c      	adds	r7, #12
    9772:	46bd      	mov	sp, r7
    9774:	f85d 7b04 	ldr.w	r7, [sp], #4
    9778:	4770      	bx	lr
	...

0000977c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    977c:	b580      	push	{r7, lr}
    977e:	b084      	sub	sp, #16
    9780:	af00      	add	r7, sp, #0
    9782:	6078      	str	r0, [r7, #4]
    9784:	460b      	mov	r3, r1
    9786:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    9788:	687b      	ldr	r3, [r7, #4]
    978a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    978c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    978e:	68fb      	ldr	r3, [r7, #12]
    9790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    9794:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    9796:	78fb      	ldrb	r3, [r7, #3]
    9798:	039b      	lsls	r3, r3, #14
    979a:	461a      	mov	r2, r3
    979c:	68fb      	ldr	r3, [r7, #12]
    979e:	4313      	orrs	r3, r2
    97a0:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    97a2:	687b      	ldr	r3, [r7, #4]
    97a4:	68fa      	ldr	r2, [r7, #12]
    97a6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    97a8:	2104      	movs	r1, #4
    97aa:	6878      	ldr	r0, [r7, #4]
    97ac:	4b02      	ldr	r3, [pc, #8]	; (97b8 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    97ae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    97b0:	bf00      	nop
    97b2:	3710      	adds	r7, #16
    97b4:	46bd      	mov	sp, r7
    97b6:	bd80      	pop	{r7, pc}
    97b8:	000091c9 	.word	0x000091c9

000097bc <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    97bc:	b580      	push	{r7, lr}
    97be:	b082      	sub	sp, #8
    97c0:	af00      	add	r7, sp, #0
    97c2:	6078      	str	r0, [r7, #4]
    97c4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    97c6:	687b      	ldr	r3, [r7, #4]
    97c8:	683a      	ldr	r2, [r7, #0]
    97ca:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    97cc:	2104      	movs	r1, #4
    97ce:	6878      	ldr	r0, [r7, #4]
    97d0:	4b02      	ldr	r3, [pc, #8]	; (97dc <hri_sercomi2cm_write_ADDR_reg+0x20>)
    97d2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    97d4:	bf00      	nop
    97d6:	3708      	adds	r7, #8
    97d8:	46bd      	mov	sp, r7
    97da:	bd80      	pop	{r7, pc}
    97dc:	000091c9 	.word	0x000091c9

000097e0 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    97e0:	b580      	push	{r7, lr}
    97e2:	b082      	sub	sp, #8
    97e4:	af00      	add	r7, sp, #0
    97e6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    97e8:	2104      	movs	r1, #4
    97ea:	6878      	ldr	r0, [r7, #4]
    97ec:	4b03      	ldr	r3, [pc, #12]	; (97fc <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    97ee:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    97f0:	687b      	ldr	r3, [r7, #4]
    97f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    97f4:	4618      	mov	r0, r3
    97f6:	3708      	adds	r7, #8
    97f8:	46bd      	mov	sp, r7
    97fa:	bd80      	pop	{r7, pc}
    97fc:	000091c9 	.word	0x000091c9

00009800 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    9800:	b480      	push	{r7}
    9802:	b083      	sub	sp, #12
    9804:	af00      	add	r7, sp, #0
    9806:	6078      	str	r0, [r7, #4]
    9808:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    980a:	687b      	ldr	r3, [r7, #4]
    980c:	683a      	ldr	r2, [r7, #0]
    980e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9810:	bf00      	nop
    9812:	370c      	adds	r7, #12
    9814:	46bd      	mov	sp, r7
    9816:	f85d 7b04 	ldr.w	r7, [sp], #4
    981a:	4770      	bx	lr

0000981c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    981c:	b580      	push	{r7, lr}
    981e:	b082      	sub	sp, #8
    9820:	af00      	add	r7, sp, #0
    9822:	6078      	str	r0, [r7, #4]
    9824:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    9826:	687b      	ldr	r3, [r7, #4]
    9828:	683a      	ldr	r2, [r7, #0]
    982a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    982c:	2104      	movs	r1, #4
    982e:	6878      	ldr	r0, [r7, #4]
    9830:	4b02      	ldr	r3, [pc, #8]	; (983c <hri_sercomi2cm_write_DATA_reg+0x20>)
    9832:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9834:	bf00      	nop
    9836:	3708      	adds	r7, #8
    9838:	46bd      	mov	sp, r7
    983a:	bd80      	pop	{r7, pc}
    983c:	000091c9 	.word	0x000091c9

00009840 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    9840:	b580      	push	{r7, lr}
    9842:	b082      	sub	sp, #8
    9844:	af00      	add	r7, sp, #0
    9846:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9848:	2104      	movs	r1, #4
    984a:	6878      	ldr	r0, [r7, #4]
    984c:	4b03      	ldr	r3, [pc, #12]	; (985c <hri_sercomi2cm_read_DATA_reg+0x1c>)
    984e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    9850:	687b      	ldr	r3, [r7, #4]
    9852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    9854:	4618      	mov	r0, r3
    9856:	3708      	adds	r7, #8
    9858:	46bd      	mov	sp, r7
    985a:	bd80      	pop	{r7, pc}
    985c:	000091c9 	.word	0x000091c9

00009860 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    9860:	b480      	push	{r7}
    9862:	b083      	sub	sp, #12
    9864:	af00      	add	r7, sp, #0
    9866:	6078      	str	r0, [r7, #4]
    9868:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    986a:	687b      	ldr	r3, [r7, #4]
    986c:	683a      	ldr	r2, [r7, #0]
    986e:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9870:	bf00      	nop
    9872:	370c      	adds	r7, #12
    9874:	46bd      	mov	sp, r7
    9876:	f85d 7b04 	ldr.w	r7, [sp], #4
    987a:	4770      	bx	lr

0000987c <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    987c:	b480      	push	{r7}
    987e:	b083      	sub	sp, #12
    9880:	af00      	add	r7, sp, #0
    9882:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    9884:	687b      	ldr	r3, [r7, #4]
    9886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    9888:	4618      	mov	r0, r3
    988a:	370c      	adds	r7, #12
    988c:	46bd      	mov	sp, r7
    988e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9892:	4770      	bx	lr

00009894 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    9894:	b480      	push	{r7}
    9896:	b083      	sub	sp, #12
    9898:	af00      	add	r7, sp, #0
    989a:	6078      	str	r0, [r7, #4]
    989c:	460b      	mov	r3, r1
    989e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    98a0:	687b      	ldr	r3, [r7, #4]
    98a2:	78fa      	ldrb	r2, [r7, #3]
    98a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    98a8:	bf00      	nop
    98aa:	370c      	adds	r7, #12
    98ac:	46bd      	mov	sp, r7
    98ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    98b2:	4770      	bx	lr

000098b4 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    98b4:	b480      	push	{r7}
    98b6:	b083      	sub	sp, #12
    98b8:	af00      	add	r7, sp, #0
    98ba:	6078      	str	r0, [r7, #4]
    98bc:	460b      	mov	r3, r1
    98be:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    98c0:	687b      	ldr	r3, [r7, #4]
    98c2:	887a      	ldrh	r2, [r7, #2]
    98c4:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    98c6:	bf00      	nop
    98c8:	370c      	adds	r7, #12
    98ca:	46bd      	mov	sp, r7
    98cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    98d0:	4770      	bx	lr
	...

000098d4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    98d4:	b580      	push	{r7, lr}
    98d6:	b082      	sub	sp, #8
    98d8:	af00      	add	r7, sp, #0
    98da:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    98dc:	2104      	movs	r1, #4
    98de:	6878      	ldr	r0, [r7, #4]
    98e0:	4b06      	ldr	r3, [pc, #24]	; (98fc <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    98e2:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    98e4:	687b      	ldr	r3, [r7, #4]
    98e6:	8b5b      	ldrh	r3, [r3, #26]
    98e8:	b29b      	uxth	r3, r3
    98ea:	091b      	lsrs	r3, r3, #4
    98ec:	b29b      	uxth	r3, r3
    98ee:	f003 0303 	and.w	r3, r3, #3
    98f2:	b29b      	uxth	r3, r3
}
    98f4:	4618      	mov	r0, r3
    98f6:	3708      	adds	r7, #8
    98f8:	46bd      	mov	sp, r7
    98fa:	bd80      	pop	{r7, pc}
    98fc:	000091c9 	.word	0x000091c9

00009900 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    9900:	b580      	push	{r7, lr}
    9902:	b082      	sub	sp, #8
    9904:	af00      	add	r7, sp, #0
    9906:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9908:	2104      	movs	r1, #4
    990a:	6878      	ldr	r0, [r7, #4]
    990c:	4b04      	ldr	r3, [pc, #16]	; (9920 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    990e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    9910:	687b      	ldr	r3, [r7, #4]
    9912:	8b5b      	ldrh	r3, [r3, #26]
    9914:	b29b      	uxth	r3, r3
}
    9916:	4618      	mov	r0, r3
    9918:	3708      	adds	r7, #8
    991a:	46bd      	mov	sp, r7
    991c:	bd80      	pop	{r7, pc}
    991e:	bf00      	nop
    9920:	000091c9 	.word	0x000091c9

00009924 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    9924:	b580      	push	{r7, lr}
    9926:	b082      	sub	sp, #8
    9928:	af00      	add	r7, sp, #0
    992a:	6078      	str	r0, [r7, #4]
    992c:	460b      	mov	r3, r1
    992e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    9930:	687b      	ldr	r3, [r7, #4]
    9932:	887a      	ldrh	r2, [r7, #2]
    9934:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9936:	2104      	movs	r1, #4
    9938:	6878      	ldr	r0, [r7, #4]
    993a:	4b03      	ldr	r3, [pc, #12]	; (9948 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    993c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    993e:	bf00      	nop
    9940:	3708      	adds	r7, #8
    9942:	46bd      	mov	sp, r7
    9944:	bd80      	pop	{r7, pc}
    9946:	bf00      	nop
    9948:	000091c9 	.word	0x000091c9

0000994c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    994c:	b4b0      	push	{r4, r5, r7}
    994e:	b08d      	sub	sp, #52	; 0x34
    9950:	af00      	add	r7, sp, #0
    9952:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    9954:	4b13      	ldr	r3, [pc, #76]	; (99a4 <_sercom_get_hardware_index+0x58>)
    9956:	f107 040c 	add.w	r4, r7, #12
    995a:	461d      	mov	r5, r3
    995c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    995e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9960:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9964:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9968:	2300      	movs	r3, #0
    996a:	62fb      	str	r3, [r7, #44]	; 0x2c
    996c:	e010      	b.n	9990 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    996e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9970:	009b      	lsls	r3, r3, #2
    9972:	f107 0230 	add.w	r2, r7, #48	; 0x30
    9976:	4413      	add	r3, r2
    9978:	f853 3c24 	ldr.w	r3, [r3, #-36]
    997c:	461a      	mov	r2, r3
    997e:	687b      	ldr	r3, [r7, #4]
    9980:	429a      	cmp	r2, r3
    9982:	d102      	bne.n	998a <_sercom_get_hardware_index+0x3e>
			return i;
    9984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9986:	b2db      	uxtb	r3, r3
    9988:	e006      	b.n	9998 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    998a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    998c:	3301      	adds	r3, #1
    998e:	62fb      	str	r3, [r7, #44]	; 0x2c
    9990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9992:	2b07      	cmp	r3, #7
    9994:	d9eb      	bls.n	996e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    9996:	2300      	movs	r3, #0
}
    9998:	4618      	mov	r0, r3
    999a:	3734      	adds	r7, #52	; 0x34
    999c:	46bd      	mov	sp, r7
    999e:	bcb0      	pop	{r4, r5, r7}
    99a0:	4770      	bx	lr
    99a2:	bf00      	nop
    99a4:	00018660 	.word	0x00018660

000099a8 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    99a8:	b480      	push	{r7}
    99aa:	b083      	sub	sp, #12
    99ac:	af00      	add	r7, sp, #0
    99ae:	6078      	str	r0, [r7, #4]
    99b0:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    99b2:	687b      	ldr	r3, [r7, #4]
    99b4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    99b8:	d102      	bne.n	99c0 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    99ba:	4a0b      	ldr	r2, [pc, #44]	; (99e8 <_sercom_init_irq_param+0x40>)
    99bc:	683b      	ldr	r3, [r7, #0]
    99be:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    99c0:	687b      	ldr	r3, [r7, #4]
    99c2:	4a0a      	ldr	r2, [pc, #40]	; (99ec <_sercom_init_irq_param+0x44>)
    99c4:	4293      	cmp	r3, r2
    99c6:	d102      	bne.n	99ce <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    99c8:	4a09      	ldr	r2, [pc, #36]	; (99f0 <_sercom_init_irq_param+0x48>)
    99ca:	683b      	ldr	r3, [r7, #0]
    99cc:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    99ce:	687b      	ldr	r3, [r7, #4]
    99d0:	4a08      	ldr	r2, [pc, #32]	; (99f4 <_sercom_init_irq_param+0x4c>)
    99d2:	4293      	cmp	r3, r2
    99d4:	d102      	bne.n	99dc <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    99d6:	4a08      	ldr	r2, [pc, #32]	; (99f8 <_sercom_init_irq_param+0x50>)
    99d8:	683b      	ldr	r3, [r7, #0]
    99da:	6013      	str	r3, [r2, #0]
	}
}
    99dc:	bf00      	nop
    99de:	370c      	adds	r7, #12
    99e0:	46bd      	mov	sp, r7
    99e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    99e6:	4770      	bx	lr
    99e8:	20002f74 	.word	0x20002f74
    99ec:	43000400 	.word	0x43000400
    99f0:	20002f78 	.word	0x20002f78
    99f4:	43000c00 	.word	0x43000c00
    99f8:	20002f7c 	.word	0x20002f7c

000099fc <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    99fc:	b580      	push	{r7, lr}
    99fe:	b084      	sub	sp, #16
    9a00:	af00      	add	r7, sp, #0
    9a02:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    9a04:	6878      	ldr	r0, [r7, #4]
    9a06:	4b13      	ldr	r3, [pc, #76]	; (9a54 <_get_i2cm_index+0x58>)
    9a08:	4798      	blx	r3
    9a0a:	4603      	mov	r3, r0
    9a0c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    9a0e:	2300      	movs	r3, #0
    9a10:	73fb      	strb	r3, [r7, #15]
    9a12:	e010      	b.n	9a36 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    9a14:	7bfa      	ldrb	r2, [r7, #15]
    9a16:	4910      	ldr	r1, [pc, #64]	; (9a58 <_get_i2cm_index+0x5c>)
    9a18:	4613      	mov	r3, r2
    9a1a:	005b      	lsls	r3, r3, #1
    9a1c:	4413      	add	r3, r2
    9a1e:	00db      	lsls	r3, r3, #3
    9a20:	440b      	add	r3, r1
    9a22:	781b      	ldrb	r3, [r3, #0]
    9a24:	7bba      	ldrb	r2, [r7, #14]
    9a26:	429a      	cmp	r2, r3
    9a28:	d102      	bne.n	9a30 <_get_i2cm_index+0x34>
			return i;
    9a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9a2e:	e00d      	b.n	9a4c <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    9a30:	7bfb      	ldrb	r3, [r7, #15]
    9a32:	3301      	adds	r3, #1
    9a34:	73fb      	strb	r3, [r7, #15]
    9a36:	7bfb      	ldrb	r3, [r7, #15]
    9a38:	2b01      	cmp	r3, #1
    9a3a:	d9eb      	bls.n	9a14 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    9a3c:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    9a40:	4906      	ldr	r1, [pc, #24]	; (9a5c <_get_i2cm_index+0x60>)
    9a42:	2000      	movs	r0, #0
    9a44:	4b06      	ldr	r3, [pc, #24]	; (9a60 <_get_i2cm_index+0x64>)
    9a46:	4798      	blx	r3
	return -1;
    9a48:	f04f 33ff 	mov.w	r3, #4294967295
}
    9a4c:	4618      	mov	r0, r3
    9a4e:	3710      	adds	r7, #16
    9a50:	46bd      	mov	sp, r7
    9a52:	bd80      	pop	{r7, pc}
    9a54:	0000994d 	.word	0x0000994d
    9a58:	2000007c 	.word	0x2000007c
    9a5c:	00018644 	.word	0x00018644
    9a60:	000065d9 	.word	0x000065d9

00009a64 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    9a64:	b580      	push	{r7, lr}
    9a66:	b082      	sub	sp, #8
    9a68:	af00      	add	r7, sp, #0
    9a6a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    9a6c:	2103      	movs	r1, #3
    9a6e:	6878      	ldr	r0, [r7, #4]
    9a70:	4b02      	ldr	r3, [pc, #8]	; (9a7c <_sercom_i2c_send_stop+0x18>)
    9a72:	4798      	blx	r3
}
    9a74:	bf00      	nop
    9a76:	3708      	adds	r7, #8
    9a78:	46bd      	mov	sp, r7
    9a7a:	bd80      	pop	{r7, pc}
    9a7c:	000096c9 	.word	0x000096c9

00009a80 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    9a80:	b590      	push	{r4, r7, lr}
    9a82:	b087      	sub	sp, #28
    9a84:	af00      	add	r7, sp, #0
    9a86:	60f8      	str	r0, [r7, #12]
    9a88:	60b9      	str	r1, [r7, #8]
    9a8a:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    9a8c:	68f8      	ldr	r0, [r7, #12]
    9a8e:	4b7d      	ldr	r3, [pc, #500]	; (9c84 <_sercom_i2c_sync_analyse_flags+0x204>)
    9a90:	4798      	blx	r3
    9a92:	4603      	mov	r3, r0
    9a94:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    9a96:	68f8      	ldr	r0, [r7, #12]
    9a98:	4b7b      	ldr	r3, [pc, #492]	; (9c88 <_sercom_i2c_sync_analyse_flags+0x208>)
    9a9a:	4798      	blx	r3
    9a9c:	4603      	mov	r3, r0
    9a9e:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    9aa0:	68bb      	ldr	r3, [r7, #8]
    9aa2:	f003 0301 	and.w	r3, r3, #1
    9aa6:	2b00      	cmp	r3, #0
    9aa8:	f000 8095 	beq.w	9bd6 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    9aac:	8a7b      	ldrh	r3, [r7, #18]
    9aae:	f003 0302 	and.w	r3, r3, #2
    9ab2:	2b00      	cmp	r3, #0
    9ab4:	d01d      	beq.n	9af2 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    9ab6:	68f8      	ldr	r0, [r7, #12]
    9ab8:	4b74      	ldr	r3, [pc, #464]	; (9c8c <_sercom_i2c_sync_analyse_flags+0x20c>)
    9aba:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    9abc:	687b      	ldr	r3, [r7, #4]
    9abe:	885b      	ldrh	r3, [r3, #2]
    9ac0:	b29b      	uxth	r3, r3
    9ac2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    9ac6:	b29a      	uxth	r2, r3
    9ac8:	687b      	ldr	r3, [r7, #4]
    9aca:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    9acc:	687b      	ldr	r3, [r7, #4]
    9ace:	885b      	ldrh	r3, [r3, #2]
    9ad0:	b29b      	uxth	r3, r3
    9ad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9ad6:	b29a      	uxth	r2, r3
    9ad8:	687b      	ldr	r3, [r7, #4]
    9ada:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    9adc:	8a7b      	ldrh	r3, [r7, #18]
    9ade:	f003 0301 	and.w	r3, r3, #1
    9ae2:	2b00      	cmp	r3, #0
    9ae4:	d002      	beq.n	9aec <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    9ae6:	f06f 0304 	mvn.w	r3, #4
    9aea:	e0c6      	b.n	9c7a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    9aec:	f06f 0303 	mvn.w	r3, #3
    9af0:	e0c3      	b.n	9c7a <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    9af2:	8a7b      	ldrh	r3, [r7, #18]
    9af4:	f003 0304 	and.w	r3, r3, #4
    9af8:	2b00      	cmp	r3, #0
    9afa:	d01f      	beq.n	9b3c <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    9afc:	687b      	ldr	r3, [r7, #4]
    9afe:	685b      	ldr	r3, [r3, #4]
    9b00:	2b00      	cmp	r3, #0
    9b02:	dd07      	ble.n	9b14 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    9b04:	687b      	ldr	r3, [r7, #4]
    9b06:	885b      	ldrh	r3, [r3, #2]
    9b08:	b29b      	uxth	r3, r3
    9b0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    9b0e:	b29a      	uxth	r2, r3
    9b10:	687b      	ldr	r3, [r7, #4]
    9b12:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    9b14:	687b      	ldr	r3, [r7, #4]
    9b16:	885b      	ldrh	r3, [r3, #2]
    9b18:	b29b      	uxth	r3, r3
    9b1a:	b21b      	sxth	r3, r3
    9b1c:	2b00      	cmp	r3, #0
    9b1e:	da02      	bge.n	9b26 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    9b20:	68f8      	ldr	r0, [r7, #12]
    9b22:	4b5b      	ldr	r3, [pc, #364]	; (9c90 <_sercom_i2c_sync_analyse_flags+0x210>)
    9b24:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    9b26:	687b      	ldr	r3, [r7, #4]
    9b28:	885b      	ldrh	r3, [r3, #2]
    9b2a:	b29b      	uxth	r3, r3
    9b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9b30:	b29a      	uxth	r2, r3
    9b32:	687b      	ldr	r3, [r7, #4]
    9b34:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    9b36:	f06f 0301 	mvn.w	r3, #1
    9b3a:	e09e      	b.n	9c7a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    9b3c:	687b      	ldr	r3, [r7, #4]
    9b3e:	885b      	ldrh	r3, [r3, #2]
    9b40:	b29b      	uxth	r3, r3
    9b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9b46:	2b00      	cmp	r3, #0
    9b48:	d01c      	beq.n	9b84 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    9b4a:	687b      	ldr	r3, [r7, #4]
    9b4c:	881b      	ldrh	r3, [r3, #0]
    9b4e:	121b      	asrs	r3, r3, #8
    9b50:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    9b52:	f003 0406 	and.w	r4, r3, #6
    9b56:	68f8      	ldr	r0, [r7, #12]
    9b58:	4b4e      	ldr	r3, [pc, #312]	; (9c94 <_sercom_i2c_sync_analyse_flags+0x214>)
    9b5a:	4798      	blx	r3
    9b5c:	4603      	mov	r3, r0
    9b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9b62:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    9b64:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    9b68:	4619      	mov	r1, r3
    9b6a:	68f8      	ldr	r0, [r7, #12]
    9b6c:	4b4a      	ldr	r3, [pc, #296]	; (9c98 <_sercom_i2c_sync_analyse_flags+0x218>)
    9b6e:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    9b70:	687b      	ldr	r3, [r7, #4]
    9b72:	885b      	ldrh	r3, [r3, #2]
    9b74:	b29b      	uxth	r3, r3
    9b76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    9b7a:	b29a      	uxth	r2, r3
    9b7c:	687b      	ldr	r3, [r7, #4]
    9b7e:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    9b80:	2300      	movs	r3, #0
    9b82:	e07a      	b.n	9c7a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    9b84:	687b      	ldr	r3, [r7, #4]
    9b86:	685b      	ldr	r3, [r3, #4]
    9b88:	2b00      	cmp	r3, #0
    9b8a:	d111      	bne.n	9bb0 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    9b8c:	687b      	ldr	r3, [r7, #4]
    9b8e:	885b      	ldrh	r3, [r3, #2]
    9b90:	b29b      	uxth	r3, r3
    9b92:	b21b      	sxth	r3, r3
    9b94:	2b00      	cmp	r3, #0
    9b96:	da02      	bge.n	9b9e <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    9b98:	68f8      	ldr	r0, [r7, #12]
    9b9a:	4b3d      	ldr	r3, [pc, #244]	; (9c90 <_sercom_i2c_sync_analyse_flags+0x210>)
    9b9c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    9b9e:	687b      	ldr	r3, [r7, #4]
    9ba0:	885b      	ldrh	r3, [r3, #2]
    9ba2:	b29b      	uxth	r3, r3
    9ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9ba8:	b29a      	uxth	r2, r3
    9baa:	687b      	ldr	r3, [r7, #4]
    9bac:	805a      	strh	r2, [r3, #2]
    9bae:	e010      	b.n	9bd2 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    9bb0:	687b      	ldr	r3, [r7, #4]
    9bb2:	689b      	ldr	r3, [r3, #8]
    9bb4:	781b      	ldrb	r3, [r3, #0]
    9bb6:	4619      	mov	r1, r3
    9bb8:	68f8      	ldr	r0, [r7, #12]
    9bba:	4b38      	ldr	r3, [pc, #224]	; (9c9c <_sercom_i2c_sync_analyse_flags+0x21c>)
    9bbc:	4798      	blx	r3
				msg->buffer++;
    9bbe:	687b      	ldr	r3, [r7, #4]
    9bc0:	689b      	ldr	r3, [r3, #8]
    9bc2:	1c5a      	adds	r2, r3, #1
    9bc4:	687b      	ldr	r3, [r7, #4]
    9bc6:	609a      	str	r2, [r3, #8]
				msg->len--;
    9bc8:	687b      	ldr	r3, [r7, #4]
    9bca:	685b      	ldr	r3, [r3, #4]
    9bcc:	1e5a      	subs	r2, r3, #1
    9bce:	687b      	ldr	r3, [r7, #4]
    9bd0:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    9bd2:	2300      	movs	r3, #0
    9bd4:	e051      	b.n	9c7a <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    9bd6:	68bb      	ldr	r3, [r7, #8]
    9bd8:	f003 0302 	and.w	r3, r3, #2
    9bdc:	2b00      	cmp	r3, #0
    9bde:	d04b      	beq.n	9c78 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    9be0:	687b      	ldr	r3, [r7, #4]
    9be2:	685b      	ldr	r3, [r3, #4]
    9be4:	2b00      	cmp	r3, #0
    9be6:	d041      	beq.n	9c6c <_sercom_i2c_sync_analyse_flags+0x1ec>
    9be8:	8a7b      	ldrh	r3, [r7, #18]
    9bea:	f003 0304 	and.w	r3, r3, #4
    9bee:	2b00      	cmp	r3, #0
    9bf0:	d13c      	bne.n	9c6c <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    9bf2:	687b      	ldr	r3, [r7, #4]
    9bf4:	685b      	ldr	r3, [r3, #4]
    9bf6:	1e5a      	subs	r2, r3, #1
    9bf8:	687b      	ldr	r3, [r7, #4]
    9bfa:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    9bfc:	687b      	ldr	r3, [r7, #4]
    9bfe:	685b      	ldr	r3, [r3, #4]
    9c00:	2b00      	cmp	r3, #0
    9c02:	d102      	bne.n	9c0a <_sercom_i2c_sync_analyse_flags+0x18a>
    9c04:	697b      	ldr	r3, [r7, #20]
    9c06:	2b00      	cmp	r3, #0
    9c08:	d006      	beq.n	9c18 <_sercom_i2c_sync_analyse_flags+0x198>
    9c0a:	687b      	ldr	r3, [r7, #4]
    9c0c:	685b      	ldr	r3, [r3, #4]
    9c0e:	2b01      	cmp	r3, #1
    9c10:	d105      	bne.n	9c1e <_sercom_i2c_sync_analyse_flags+0x19e>
    9c12:	697b      	ldr	r3, [r7, #20]
    9c14:	2b00      	cmp	r3, #0
    9c16:	d002      	beq.n	9c1e <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    9c18:	68f8      	ldr	r0, [r7, #12]
    9c1a:	4b21      	ldr	r3, [pc, #132]	; (9ca0 <_sercom_i2c_sync_analyse_flags+0x220>)
    9c1c:	4798      	blx	r3
			}

			if (msg->len == 0) {
    9c1e:	687b      	ldr	r3, [r7, #4]
    9c20:	685b      	ldr	r3, [r3, #4]
    9c22:	2b00      	cmp	r3, #0
    9c24:	d113      	bne.n	9c4e <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    9c26:	687b      	ldr	r3, [r7, #4]
    9c28:	885b      	ldrh	r3, [r3, #2]
    9c2a:	b29b      	uxth	r3, r3
    9c2c:	b21b      	sxth	r3, r3
    9c2e:	2b00      	cmp	r3, #0
    9c30:	da05      	bge.n	9c3e <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    9c32:	68f8      	ldr	r0, [r7, #12]
    9c34:	4b1b      	ldr	r3, [pc, #108]	; (9ca4 <_sercom_i2c_sync_analyse_flags+0x224>)
    9c36:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    9c38:	68f8      	ldr	r0, [r7, #12]
    9c3a:	4b15      	ldr	r3, [pc, #84]	; (9c90 <_sercom_i2c_sync_analyse_flags+0x210>)
    9c3c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    9c3e:	687b      	ldr	r3, [r7, #4]
    9c40:	885b      	ldrh	r3, [r3, #2]
    9c42:	b29b      	uxth	r3, r3
    9c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9c48:	b29a      	uxth	r2, r3
    9c4a:	687b      	ldr	r3, [r7, #4]
    9c4c:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    9c4e:	687b      	ldr	r3, [r7, #4]
    9c50:	689c      	ldr	r4, [r3, #8]
    9c52:	1c62      	adds	r2, r4, #1
    9c54:	687b      	ldr	r3, [r7, #4]
    9c56:	609a      	str	r2, [r3, #8]
    9c58:	68f8      	ldr	r0, [r7, #12]
    9c5a:	4b13      	ldr	r3, [pc, #76]	; (9ca8 <_sercom_i2c_sync_analyse_flags+0x228>)
    9c5c:	4798      	blx	r3
    9c5e:	4603      	mov	r3, r0
    9c60:	b2db      	uxtb	r3, r3
    9c62:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    9c64:	68f8      	ldr	r0, [r7, #12]
    9c66:	4b11      	ldr	r3, [pc, #68]	; (9cac <_sercom_i2c_sync_analyse_flags+0x22c>)
    9c68:	4798      	blx	r3
    9c6a:	e005      	b.n	9c78 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    9c6c:	68f8      	ldr	r0, [r7, #12]
    9c6e:	4b0f      	ldr	r3, [pc, #60]	; (9cac <_sercom_i2c_sync_analyse_flags+0x22c>)
    9c70:	4798      	blx	r3
			return I2C_NACK;
    9c72:	f06f 0301 	mvn.w	r3, #1
    9c76:	e000      	b.n	9c7a <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    9c78:	2300      	movs	r3, #0
}
    9c7a:	4618      	mov	r0, r3
    9c7c:	371c      	adds	r7, #28
    9c7e:	46bd      	mov	sp, r7
    9c80:	bd90      	pop	{r4, r7, pc}
    9c82:	bf00      	nop
    9c84:	000094c9 	.word	0x000094c9
    9c88:	00009901 	.word	0x00009901
    9c8c:	00009261 	.word	0x00009261
    9c90:	00009a65 	.word	0x00009a65
    9c94:	000097e1 	.word	0x000097e1
    9c98:	000097bd 	.word	0x000097bd
    9c9c:	0000981d 	.word	0x0000981d
    9ca0:	00009679 	.word	0x00009679
    9ca4:	00009651 	.word	0x00009651
    9ca8:	00009841 	.word	0x00009841
    9cac:	0000927b 	.word	0x0000927b

00009cb0 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    9cb0:	b580      	push	{r7, lr}
    9cb2:	b086      	sub	sp, #24
    9cb4:	af00      	add	r7, sp, #0
    9cb6:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    9cb8:	687b      	ldr	r3, [r7, #4]
    9cba:	691b      	ldr	r3, [r3, #16]
    9cbc:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    9cbe:	6938      	ldr	r0, [r7, #16]
    9cc0:	4b37      	ldr	r3, [pc, #220]	; (9da0 <_sercom_i2c_m_irq_handler+0xf0>)
    9cc2:	4798      	blx	r3
    9cc4:	4603      	mov	r3, r0
    9cc6:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    9cc8:	2300      	movs	r3, #0
    9cca:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    9ccc:	687b      	ldr	r3, [r7, #4]
    9cce:	2b00      	cmp	r3, #0
    9cd0:	bf14      	ite	ne
    9cd2:	2301      	movne	r3, #1
    9cd4:	2300      	moveq	r3, #0
    9cd6:	b2db      	uxtb	r3, r3
    9cd8:	f240 422a 	movw	r2, #1066	; 0x42a
    9cdc:	4931      	ldr	r1, [pc, #196]	; (9da4 <_sercom_i2c_m_irq_handler+0xf4>)
    9cde:	4618      	mov	r0, r3
    9ce0:	4b31      	ldr	r3, [pc, #196]	; (9da8 <_sercom_i2c_m_irq_handler+0xf8>)
    9ce2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    9ce4:	687b      	ldr	r3, [r7, #4]
    9ce6:	691b      	ldr	r3, [r3, #16]
    9ce8:	2b00      	cmp	r3, #0
    9cea:	bf14      	ite	ne
    9cec:	2301      	movne	r3, #1
    9cee:	2300      	moveq	r3, #0
    9cf0:	b2db      	uxtb	r3, r3
    9cf2:	f240 422b 	movw	r2, #1067	; 0x42b
    9cf6:	492b      	ldr	r1, [pc, #172]	; (9da4 <_sercom_i2c_m_irq_handler+0xf4>)
    9cf8:	4618      	mov	r0, r3
    9cfa:	4b2b      	ldr	r3, [pc, #172]	; (9da8 <_sercom_i2c_m_irq_handler+0xf8>)
    9cfc:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    9cfe:	bf00      	nop
    9d00:	68fb      	ldr	r3, [r7, #12]
    9d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9d06:	2b00      	cmp	r3, #0
    9d08:	d126      	bne.n	9d58 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    9d0a:	687b      	ldr	r3, [r7, #4]
    9d0c:	461a      	mov	r2, r3
    9d0e:	68f9      	ldr	r1, [r7, #12]
    9d10:	6938      	ldr	r0, [r7, #16]
    9d12:	4b26      	ldr	r3, [pc, #152]	; (9dac <_sercom_i2c_m_irq_handler+0xfc>)
    9d14:	4798      	blx	r3
    9d16:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    9d18:	697b      	ldr	r3, [r7, #20]
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	d11b      	bne.n	9d56 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    9d1e:	68fb      	ldr	r3, [r7, #12]
    9d20:	f003 0301 	and.w	r3, r3, #1
    9d24:	2b00      	cmp	r3, #0
    9d26:	d008      	beq.n	9d3a <_sercom_i2c_m_irq_handler+0x8a>
    9d28:	687b      	ldr	r3, [r7, #4]
    9d2a:	699b      	ldr	r3, [r3, #24]
    9d2c:	2b00      	cmp	r3, #0
    9d2e:	d004      	beq.n	9d3a <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    9d30:	687b      	ldr	r3, [r7, #4]
    9d32:	699b      	ldr	r3, [r3, #24]
    9d34:	6878      	ldr	r0, [r7, #4]
    9d36:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    9d38:	e02e      	b.n	9d98 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    9d3a:	68fb      	ldr	r3, [r7, #12]
    9d3c:	f003 0302 	and.w	r3, r3, #2
    9d40:	2b00      	cmp	r3, #0
    9d42:	d029      	beq.n	9d98 <_sercom_i2c_m_irq_handler+0xe8>
    9d44:	687b      	ldr	r3, [r7, #4]
    9d46:	69db      	ldr	r3, [r3, #28]
    9d48:	2b00      	cmp	r3, #0
    9d4a:	d025      	beq.n	9d98 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    9d4c:	687b      	ldr	r3, [r7, #4]
    9d4e:	69db      	ldr	r3, [r3, #28]
    9d50:	6878      	ldr	r0, [r7, #4]
    9d52:	4798      	blx	r3
		return;
    9d54:	e020      	b.n	9d98 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    9d56:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    9d58:	687b      	ldr	r3, [r7, #4]
    9d5a:	885b      	ldrh	r3, [r3, #2]
    9d5c:	b29b      	uxth	r3, r3
    9d5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9d62:	b29a      	uxth	r2, r3
    9d64:	687b      	ldr	r3, [r7, #4]
    9d66:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    9d68:	687b      	ldr	r3, [r7, #4]
    9d6a:	695b      	ldr	r3, [r3, #20]
    9d6c:	2b00      	cmp	r3, #0
    9d6e:	d014      	beq.n	9d9a <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    9d70:	697b      	ldr	r3, [r7, #20]
    9d72:	2b00      	cmp	r3, #0
    9d74:	d005      	beq.n	9d82 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    9d76:	687b      	ldr	r3, [r7, #4]
    9d78:	695b      	ldr	r3, [r3, #20]
    9d7a:	6979      	ldr	r1, [r7, #20]
    9d7c:	6878      	ldr	r0, [r7, #4]
    9d7e:	4798      	blx	r3
    9d80:	e005      	b.n	9d8e <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    9d82:	687b      	ldr	r3, [r7, #4]
    9d84:	695b      	ldr	r3, [r3, #20]
    9d86:	f06f 0104 	mvn.w	r1, #4
    9d8a:	6878      	ldr	r0, [r7, #4]
    9d8c:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    9d8e:	2180      	movs	r1, #128	; 0x80
    9d90:	6938      	ldr	r0, [r7, #16]
    9d92:	4b07      	ldr	r3, [pc, #28]	; (9db0 <_sercom_i2c_m_irq_handler+0x100>)
    9d94:	4798      	blx	r3
    9d96:	e000      	b.n	9d9a <_sercom_i2c_m_irq_handler+0xea>
		return;
    9d98:	bf00      	nop
	}
}
    9d9a:	3718      	adds	r7, #24
    9d9c:	46bd      	mov	sp, r7
    9d9e:	bd80      	pop	{r7, pc}
    9da0:	00009295 	.word	0x00009295
    9da4:	00018644 	.word	0x00018644
    9da8:	000065d9 	.word	0x000065d9
    9dac:	00009a81 	.word	0x00009a81
    9db0:	000092af 	.word	0x000092af

00009db4 <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    9db4:	b580      	push	{r7, lr}
    9db6:	b082      	sub	sp, #8
    9db8:	af00      	add	r7, sp, #0
    9dba:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    9dbc:	687b      	ldr	r3, [r7, #4]
    9dbe:	2b00      	cmp	r3, #0
    9dc0:	bf14      	ite	ne
    9dc2:	2301      	movne	r3, #1
    9dc4:	2300      	moveq	r3, #0
    9dc6:	b2db      	uxtb	r3, r3
    9dc8:	f44f 628a 	mov.w	r2, #1104	; 0x450
    9dcc:	4906      	ldr	r1, [pc, #24]	; (9de8 <_i2c_m_async_enable+0x34>)
    9dce:	4618      	mov	r0, r3
    9dd0:	4b06      	ldr	r3, [pc, #24]	; (9dec <_i2c_m_async_enable+0x38>)
    9dd2:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    9dd4:	687b      	ldr	r3, [r7, #4]
    9dd6:	691b      	ldr	r3, [r3, #16]
    9dd8:	4618      	mov	r0, r3
    9dda:	4b05      	ldr	r3, [pc, #20]	; (9df0 <_i2c_m_async_enable+0x3c>)
    9ddc:	4798      	blx	r3
    9dde:	4603      	mov	r3, r0
}
    9de0:	4618      	mov	r0, r3
    9de2:	3708      	adds	r7, #8
    9de4:	46bd      	mov	sp, r7
    9de6:	bd80      	pop	{r7, pc}
    9de8:	00018644 	.word	0x00018644
    9dec:	000065d9 	.word	0x000065d9
    9df0:	0000a145 	.word	0x0000a145

00009df4 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    9df4:	b580      	push	{r7, lr}
    9df6:	b082      	sub	sp, #8
    9df8:	af00      	add	r7, sp, #0
    9dfa:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    9dfc:	6878      	ldr	r0, [r7, #4]
    9dfe:	4b05      	ldr	r3, [pc, #20]	; (9e14 <_sercom_get_irq_num+0x20>)
    9e00:	4798      	blx	r3
    9e02:	4603      	mov	r3, r0
    9e04:	009b      	lsls	r3, r3, #2
    9e06:	b2db      	uxtb	r3, r3
    9e08:	332e      	adds	r3, #46	; 0x2e
    9e0a:	b2db      	uxtb	r3, r3
}
    9e0c:	4618      	mov	r0, r3
    9e0e:	3708      	adds	r7, #8
    9e10:	46bd      	mov	sp, r7
    9e12:	bd80      	pop	{r7, pc}
    9e14:	0000994d 	.word	0x0000994d

00009e18 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    9e18:	b580      	push	{r7, lr}
    9e1a:	b086      	sub	sp, #24
    9e1c:	af00      	add	r7, sp, #0
    9e1e:	6078      	str	r0, [r7, #4]
    9e20:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    9e22:	687b      	ldr	r3, [r7, #4]
    9e24:	2b00      	cmp	r3, #0
    9e26:	bf14      	ite	ne
    9e28:	2301      	movne	r3, #1
    9e2a:	2300      	moveq	r3, #0
    9e2c:	b2db      	uxtb	r3, r3
    9e2e:	f240 429e 	movw	r2, #1182	; 0x49e
    9e32:	491d      	ldr	r1, [pc, #116]	; (9ea8 <_i2c_m_async_init+0x90>)
    9e34:	4618      	mov	r0, r3
    9e36:	4b1d      	ldr	r3, [pc, #116]	; (9eac <_i2c_m_async_init+0x94>)
    9e38:	4798      	blx	r3

	i2c_dev->hw = hw;
    9e3a:	687b      	ldr	r3, [r7, #4]
    9e3c:	683a      	ldr	r2, [r7, #0]
    9e3e:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    9e40:	687b      	ldr	r3, [r7, #4]
    9e42:	6839      	ldr	r1, [r7, #0]
    9e44:	4618      	mov	r0, r3
    9e46:	4b1a      	ldr	r3, [pc, #104]	; (9eb0 <_i2c_m_async_init+0x98>)
    9e48:	4798      	blx	r3
    9e4a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    9e4c:	68fb      	ldr	r3, [r7, #12]
    9e4e:	2b00      	cmp	r3, #0
    9e50:	d001      	beq.n	9e56 <_i2c_m_async_init+0x3e>
		return init_status;
    9e52:	68fb      	ldr	r3, [r7, #12]
    9e54:	e024      	b.n	9ea0 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    9e56:	6879      	ldr	r1, [r7, #4]
    9e58:	6838      	ldr	r0, [r7, #0]
    9e5a:	4b16      	ldr	r3, [pc, #88]	; (9eb4 <_i2c_m_async_init+0x9c>)
    9e5c:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    9e5e:	6838      	ldr	r0, [r7, #0]
    9e60:	4b15      	ldr	r3, [pc, #84]	; (9eb8 <_i2c_m_async_init+0xa0>)
    9e62:	4798      	blx	r3
    9e64:	4603      	mov	r3, r0
    9e66:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9e68:	2300      	movs	r3, #0
    9e6a:	613b      	str	r3, [r7, #16]
    9e6c:	e014      	b.n	9e98 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    9e6e:	7dfb      	ldrb	r3, [r7, #23]
    9e70:	b21b      	sxth	r3, r3
    9e72:	4618      	mov	r0, r3
    9e74:	4b11      	ldr	r3, [pc, #68]	; (9ebc <_i2c_m_async_init+0xa4>)
    9e76:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    9e78:	7dfb      	ldrb	r3, [r7, #23]
    9e7a:	b21b      	sxth	r3, r3
    9e7c:	4618      	mov	r0, r3
    9e7e:	4b10      	ldr	r3, [pc, #64]	; (9ec0 <_i2c_m_async_init+0xa8>)
    9e80:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    9e82:	7dfb      	ldrb	r3, [r7, #23]
    9e84:	b21b      	sxth	r3, r3
    9e86:	4618      	mov	r0, r3
    9e88:	4b0e      	ldr	r3, [pc, #56]	; (9ec4 <_i2c_m_async_init+0xac>)
    9e8a:	4798      	blx	r3
		irq++;
    9e8c:	7dfb      	ldrb	r3, [r7, #23]
    9e8e:	3301      	adds	r3, #1
    9e90:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9e92:	693b      	ldr	r3, [r7, #16]
    9e94:	3301      	adds	r3, #1
    9e96:	613b      	str	r3, [r7, #16]
    9e98:	693b      	ldr	r3, [r7, #16]
    9e9a:	2b03      	cmp	r3, #3
    9e9c:	d9e7      	bls.n	9e6e <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    9e9e:	2300      	movs	r3, #0
}
    9ea0:	4618      	mov	r0, r3
    9ea2:	3718      	adds	r7, #24
    9ea4:	46bd      	mov	sp, r7
    9ea6:	bd80      	pop	{r7, pc}
    9ea8:	00018644 	.word	0x00018644
    9eac:	000065d9 	.word	0x000065d9
    9eb0:	0000a1d1 	.word	0x0000a1d1
    9eb4:	000099a9 	.word	0x000099a9
    9eb8:	00009df5 	.word	0x00009df5
    9ebc:	00009149 	.word	0x00009149
    9ec0:	0000918d 	.word	0x0000918d
    9ec4:	0000910d 	.word	0x0000910d

00009ec8 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    9ec8:	b590      	push	{r4, r7, lr}
    9eca:	b087      	sub	sp, #28
    9ecc:	af00      	add	r7, sp, #0
    9ece:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    9ed0:	687b      	ldr	r3, [r7, #4]
    9ed2:	691b      	ldr	r3, [r3, #16]
    9ed4:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    9ed6:	687b      	ldr	r3, [r7, #4]
    9ed8:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    9eda:	6978      	ldr	r0, [r7, #20]
    9edc:	4b33      	ldr	r3, [pc, #204]	; (9fac <_sercom_i2c_send_address+0xe4>)
    9ede:	4798      	blx	r3
    9ee0:	4603      	mov	r3, r0
    9ee2:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    9ee4:	687b      	ldr	r3, [r7, #4]
    9ee6:	2b00      	cmp	r3, #0
    9ee8:	bf14      	ite	ne
    9eea:	2301      	movne	r3, #1
    9eec:	2300      	moveq	r3, #0
    9eee:	b2db      	uxtb	r3, r3
    9ef0:	f240 42cc 	movw	r2, #1228	; 0x4cc
    9ef4:	492e      	ldr	r1, [pc, #184]	; (9fb0 <_sercom_i2c_send_address+0xe8>)
    9ef6:	4618      	mov	r0, r3
    9ef8:	4b2e      	ldr	r3, [pc, #184]	; (9fb4 <_sercom_i2c_send_address+0xec>)
    9efa:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    9efc:	693b      	ldr	r3, [r7, #16]
    9efe:	685b      	ldr	r3, [r3, #4]
    9f00:	2b01      	cmp	r3, #1
    9f02:	d106      	bne.n	9f12 <_sercom_i2c_send_address+0x4a>
    9f04:	68fb      	ldr	r3, [r7, #12]
    9f06:	2b00      	cmp	r3, #0
    9f08:	d003      	beq.n	9f12 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    9f0a:	6978      	ldr	r0, [r7, #20]
    9f0c:	4b2a      	ldr	r3, [pc, #168]	; (9fb8 <_sercom_i2c_send_address+0xf0>)
    9f0e:	4798      	blx	r3
    9f10:	e002      	b.n	9f18 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    9f12:	6978      	ldr	r0, [r7, #20]
    9f14:	4b29      	ldr	r3, [pc, #164]	; (9fbc <_sercom_i2c_send_address+0xf4>)
    9f16:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    9f18:	693b      	ldr	r3, [r7, #16]
    9f1a:	881b      	ldrh	r3, [r3, #0]
    9f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9f20:	2b00      	cmp	r3, #0
    9f22:	d022      	beq.n	9f6a <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    9f24:	693b      	ldr	r3, [r7, #16]
    9f26:	885b      	ldrh	r3, [r3, #2]
    9f28:	b29b      	uxth	r3, r3
    9f2a:	f003 0301 	and.w	r3, r3, #1
    9f2e:	2b00      	cmp	r3, #0
    9f30:	d007      	beq.n	9f42 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    9f32:	693b      	ldr	r3, [r7, #16]
    9f34:	885b      	ldrh	r3, [r3, #2]
    9f36:	b29b      	uxth	r3, r3
    9f38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    9f3c:	b29a      	uxth	r2, r3
    9f3e:	693b      	ldr	r3, [r7, #16]
    9f40:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    9f42:	693b      	ldr	r3, [r7, #16]
    9f44:	881b      	ldrh	r3, [r3, #0]
    9f46:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    9f48:	f240 74fe 	movw	r4, #2046	; 0x7fe
    9f4c:	401c      	ands	r4, r3
    9f4e:	6978      	ldr	r0, [r7, #20]
    9f50:	4b1b      	ldr	r3, [pc, #108]	; (9fc0 <_sercom_i2c_send_address+0xf8>)
    9f52:	4798      	blx	r3
    9f54:	4603      	mov	r3, r0
    9f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9f5a:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    9f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9f60:	4619      	mov	r1, r3
    9f62:	6978      	ldr	r0, [r7, #20]
    9f64:	4b17      	ldr	r3, [pc, #92]	; (9fc4 <_sercom_i2c_send_address+0xfc>)
    9f66:	4798      	blx	r3
    9f68:	e01a      	b.n	9fa0 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    9f6a:	693b      	ldr	r3, [r7, #16]
    9f6c:	881b      	ldrh	r3, [r3, #0]
    9f6e:	005b      	lsls	r3, r3, #1
    9f70:	b2db      	uxtb	r3, r3
    9f72:	693a      	ldr	r2, [r7, #16]
    9f74:	8852      	ldrh	r2, [r2, #2]
    9f76:	b292      	uxth	r2, r2
    9f78:	f002 0201 	and.w	r2, r2, #1
    9f7c:	2a00      	cmp	r2, #0
    9f7e:	bf14      	ite	ne
    9f80:	2201      	movne	r2, #1
    9f82:	2200      	moveq	r2, #0
    9f84:	b2d2      	uxtb	r2, r2
    9f86:	4313      	orrs	r3, r2
    9f88:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    9f8a:	6978      	ldr	r0, [r7, #20]
    9f8c:	4b0c      	ldr	r3, [pc, #48]	; (9fc0 <_sercom_i2c_send_address+0xf8>)
    9f8e:	4798      	blx	r3
    9f90:	4603      	mov	r3, r0
    9f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    9f96:	4323      	orrs	r3, r4
    9f98:	4619      	mov	r1, r3
    9f9a:	6978      	ldr	r0, [r7, #20]
    9f9c:	4b09      	ldr	r3, [pc, #36]	; (9fc4 <_sercom_i2c_send_address+0xfc>)
    9f9e:	4798      	blx	r3
	}

	return ERR_NONE;
    9fa0:	2300      	movs	r3, #0
}
    9fa2:	4618      	mov	r0, r3
    9fa4:	371c      	adds	r7, #28
    9fa6:	46bd      	mov	sp, r7
    9fa8:	bd90      	pop	{r4, r7, pc}
    9faa:	bf00      	nop
    9fac:	000094c9 	.word	0x000094c9
    9fb0:	00018644 	.word	0x00018644
    9fb4:	000065d9 	.word	0x000065d9
    9fb8:	00009679 	.word	0x00009679
    9fbc:	000096a1 	.word	0x000096a1
    9fc0:	000097e1 	.word	0x000097e1
    9fc4:	000097bd 	.word	0x000097bd

00009fc8 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    9fc8:	b580      	push	{r7, lr}
    9fca:	b084      	sub	sp, #16
    9fcc:	af00      	add	r7, sp, #0
    9fce:	6078      	str	r0, [r7, #4]
    9fd0:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    9fd2:	687b      	ldr	r3, [r7, #4]
    9fd4:	2b00      	cmp	r3, #0
    9fd6:	bf14      	ite	ne
    9fd8:	2301      	movne	r3, #1
    9fda:	2300      	moveq	r3, #0
    9fdc:	b2db      	uxtb	r3, r3
    9fde:	f240 42f4 	movw	r2, #1268	; 0x4f4
    9fe2:	492a      	ldr	r1, [pc, #168]	; (a08c <_i2c_m_async_transfer+0xc4>)
    9fe4:	4618      	mov	r0, r3
    9fe6:	4b2a      	ldr	r3, [pc, #168]	; (a090 <_i2c_m_async_transfer+0xc8>)
    9fe8:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    9fea:	687b      	ldr	r3, [r7, #4]
    9fec:	691b      	ldr	r3, [r3, #16]
    9fee:	2b00      	cmp	r3, #0
    9ff0:	bf14      	ite	ne
    9ff2:	2301      	movne	r3, #1
    9ff4:	2300      	moveq	r3, #0
    9ff6:	b2db      	uxtb	r3, r3
    9ff8:	f240 42f5 	movw	r2, #1269	; 0x4f5
    9ffc:	4923      	ldr	r1, [pc, #140]	; (a08c <_i2c_m_async_transfer+0xc4>)
    9ffe:	4618      	mov	r0, r3
    a000:	4b23      	ldr	r3, [pc, #140]	; (a090 <_i2c_m_async_transfer+0xc8>)
    a002:	4798      	blx	r3
	ASSERT(msg);
    a004:	683b      	ldr	r3, [r7, #0]
    a006:	2b00      	cmp	r3, #0
    a008:	bf14      	ite	ne
    a00a:	2301      	movne	r3, #1
    a00c:	2300      	moveq	r3, #0
    a00e:	b2db      	uxtb	r3, r3
    a010:	f240 42f6 	movw	r2, #1270	; 0x4f6
    a014:	491d      	ldr	r1, [pc, #116]	; (a08c <_i2c_m_async_transfer+0xc4>)
    a016:	4618      	mov	r0, r3
    a018:	4b1d      	ldr	r3, [pc, #116]	; (a090 <_i2c_m_async_transfer+0xc8>)
    a01a:	4798      	blx	r3

	if (msg->len == 0) {
    a01c:	683b      	ldr	r3, [r7, #0]
    a01e:	685b      	ldr	r3, [r3, #4]
    a020:	2b00      	cmp	r3, #0
    a022:	d101      	bne.n	a028 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    a024:	2300      	movs	r3, #0
    a026:	e02d      	b.n	a084 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    a028:	687b      	ldr	r3, [r7, #4]
    a02a:	885b      	ldrh	r3, [r3, #2]
    a02c:	b29b      	uxth	r3, r3
    a02e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a032:	2b00      	cmp	r3, #0
    a034:	d002      	beq.n	a03c <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    a036:	f06f 0303 	mvn.w	r3, #3
    a03a:	e023      	b.n	a084 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    a03c:	683b      	ldr	r3, [r7, #0]
    a03e:	885b      	ldrh	r3, [r3, #2]
    a040:	b29b      	uxth	r3, r3
    a042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a046:	b29a      	uxth	r2, r3
    a048:	683b      	ldr	r3, [r7, #0]
    a04a:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    a04c:	687b      	ldr	r3, [r7, #4]
    a04e:	683a      	ldr	r2, [r7, #0]
    a050:	ca07      	ldmia	r2, {r0, r1, r2}
    a052:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    a056:	687b      	ldr	r3, [r7, #4]
    a058:	691b      	ldr	r3, [r3, #16]
    a05a:	4618      	mov	r0, r3
    a05c:	4b0d      	ldr	r3, [pc, #52]	; (a094 <_i2c_m_async_transfer+0xcc>)
    a05e:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    a060:	6878      	ldr	r0, [r7, #4]
    a062:	4b0d      	ldr	r3, [pc, #52]	; (a098 <_i2c_m_async_transfer+0xd0>)
    a064:	4798      	blx	r3
    a066:	60f8      	str	r0, [r7, #12]

	if (ret) {
    a068:	68fb      	ldr	r3, [r7, #12]
    a06a:	2b00      	cmp	r3, #0
    a06c:	d009      	beq.n	a082 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    a06e:	687b      	ldr	r3, [r7, #4]
    a070:	885b      	ldrh	r3, [r3, #2]
    a072:	b29b      	uxth	r3, r3
    a074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a078:	b29a      	uxth	r2, r3
    a07a:	687b      	ldr	r3, [r7, #4]
    a07c:	805a      	strh	r2, [r3, #2]

		return ret;
    a07e:	68fb      	ldr	r3, [r7, #12]
    a080:	e000      	b.n	a084 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    a082:	2300      	movs	r3, #0
}
    a084:	4618      	mov	r0, r3
    a086:	3710      	adds	r7, #16
    a088:	46bd      	mov	sp, r7
    a08a:	bd80      	pop	{r7, pc}
    a08c:	00018644 	.word	0x00018644
    a090:	000065d9 	.word	0x000065d9
    a094:	00009629 	.word	0x00009629
    a098:	00009ec9 	.word	0x00009ec9

0000a09c <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    a09c:	b480      	push	{r7}
    a09e:	b085      	sub	sp, #20
    a0a0:	af00      	add	r7, sp, #0
    a0a2:	60f8      	str	r0, [r7, #12]
    a0a4:	460b      	mov	r3, r1
    a0a6:	607a      	str	r2, [r7, #4]
    a0a8:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    a0aa:	7afb      	ldrb	r3, [r7, #11]
    a0ac:	2b01      	cmp	r3, #1
    a0ae:	d008      	beq.n	a0c2 <_i2c_m_async_register_callback+0x26>
    a0b0:	2b02      	cmp	r3, #2
    a0b2:	d00a      	beq.n	a0ca <_i2c_m_async_register_callback+0x2e>
    a0b4:	2b00      	cmp	r3, #0
    a0b6:	d000      	beq.n	a0ba <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    a0b8:	e00b      	b.n	a0d2 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    a0ba:	68fb      	ldr	r3, [r7, #12]
    a0bc:	687a      	ldr	r2, [r7, #4]
    a0be:	615a      	str	r2, [r3, #20]
		break;
    a0c0:	e007      	b.n	a0d2 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    a0c2:	68fb      	ldr	r3, [r7, #12]
    a0c4:	687a      	ldr	r2, [r7, #4]
    a0c6:	619a      	str	r2, [r3, #24]
		break;
    a0c8:	e003      	b.n	a0d2 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    a0ca:	68fb      	ldr	r3, [r7, #12]
    a0cc:	687a      	ldr	r2, [r7, #4]
    a0ce:	61da      	str	r2, [r3, #28]
		break;
    a0d0:	bf00      	nop
	}

	return ERR_NONE;
    a0d2:	2300      	movs	r3, #0
}
    a0d4:	4618      	mov	r0, r3
    a0d6:	3714      	adds	r7, #20
    a0d8:	46bd      	mov	sp, r7
    a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0de:	4770      	bx	lr

0000a0e0 <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    a0e0:	b580      	push	{r7, lr}
    a0e2:	b082      	sub	sp, #8
    a0e4:	af00      	add	r7, sp, #0
    a0e6:	6078      	str	r0, [r7, #4]
    a0e8:	460b      	mov	r3, r1
    a0ea:	70fb      	strb	r3, [r7, #3]
    a0ec:	4613      	mov	r3, r2
    a0ee:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    a0f0:	78fb      	ldrb	r3, [r7, #3]
    a0f2:	2b01      	cmp	r3, #1
    a0f4:	d002      	beq.n	a0fc <_i2c_m_async_set_irq_state+0x1c>
    a0f6:	78fb      	ldrb	r3, [r7, #3]
    a0f8:	2b02      	cmp	r3, #2
    a0fa:	d10e      	bne.n	a11a <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    a0fc:	687b      	ldr	r3, [r7, #4]
    a0fe:	691b      	ldr	r3, [r3, #16]
    a100:	78ba      	ldrb	r2, [r7, #2]
    a102:	4611      	mov	r1, r2
    a104:	4618      	mov	r0, r3
    a106:	4b0c      	ldr	r3, [pc, #48]	; (a138 <_i2c_m_async_set_irq_state+0x58>)
    a108:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    a10a:	687b      	ldr	r3, [r7, #4]
    a10c:	691b      	ldr	r3, [r3, #16]
    a10e:	78ba      	ldrb	r2, [r7, #2]
    a110:	4611      	mov	r1, r2
    a112:	4618      	mov	r0, r3
    a114:	4b09      	ldr	r3, [pc, #36]	; (a13c <_i2c_m_async_set_irq_state+0x5c>)
    a116:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    a118:	e009      	b.n	a12e <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    a11a:	78fb      	ldrb	r3, [r7, #3]
    a11c:	2b00      	cmp	r3, #0
    a11e:	d106      	bne.n	a12e <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    a120:	687b      	ldr	r3, [r7, #4]
    a122:	691b      	ldr	r3, [r3, #16]
    a124:	78ba      	ldrb	r2, [r7, #2]
    a126:	4611      	mov	r1, r2
    a128:	4618      	mov	r0, r3
    a12a:	4b05      	ldr	r3, [pc, #20]	; (a140 <_i2c_m_async_set_irq_state+0x60>)
    a12c:	4798      	blx	r3
}
    a12e:	bf00      	nop
    a130:	3708      	adds	r7, #8
    a132:	46bd      	mov	sp, r7
    a134:	bd80      	pop	{r7, pc}
    a136:	bf00      	nop
    a138:	0000935f 	.word	0x0000935f
    a13c:	0000932d 	.word	0x0000932d
    a140:	00009391 	.word	0x00009391

0000a144 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    a144:	b580      	push	{r7, lr}
    a146:	b084      	sub	sp, #16
    a148:	af00      	add	r7, sp, #0
    a14a:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    a14c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a150:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    a152:	2304      	movs	r3, #4
    a154:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    a156:	687b      	ldr	r3, [r7, #4]
    a158:	2b00      	cmp	r3, #0
    a15a:	bf14      	ite	ne
    a15c:	2301      	movne	r3, #1
    a15e:	2300      	moveq	r3, #0
    a160:	b2db      	uxtb	r3, r3
    a162:	f240 6241 	movw	r2, #1601	; 0x641
    a166:	4915      	ldr	r1, [pc, #84]	; (a1bc <_i2c_m_enable_implementation+0x78>)
    a168:	4618      	mov	r0, r3
    a16a:	4b15      	ldr	r3, [pc, #84]	; (a1c0 <_i2c_m_enable_implementation+0x7c>)
    a16c:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    a16e:	6878      	ldr	r0, [r7, #4]
    a170:	4b14      	ldr	r3, [pc, #80]	; (a1c4 <_i2c_m_enable_implementation+0x80>)
    a172:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    a174:	e016      	b.n	a1a4 <_i2c_m_enable_implementation+0x60>
		timeout--;
    a176:	68fb      	ldr	r3, [r7, #12]
    a178:	3b01      	subs	r3, #1
    a17a:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    a17c:	68fb      	ldr	r3, [r7, #12]
    a17e:	2b00      	cmp	r3, #0
    a180:	dc10      	bgt.n	a1a4 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    a182:	68bb      	ldr	r3, [r7, #8]
    a184:	3b01      	subs	r3, #1
    a186:	60bb      	str	r3, [r7, #8]
    a188:	68bb      	ldr	r3, [r7, #8]
    a18a:	2b00      	cmp	r3, #0
    a18c:	d007      	beq.n	a19e <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    a18e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a192:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    a194:	2110      	movs	r1, #16
    a196:	6878      	ldr	r0, [r7, #4]
    a198:	4b0b      	ldr	r3, [pc, #44]	; (a1c8 <_i2c_m_enable_implementation+0x84>)
    a19a:	4798      	blx	r3
    a19c:	e002      	b.n	a1a4 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    a19e:	f06f 0305 	mvn.w	r3, #5
    a1a2:	e006      	b.n	a1b2 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    a1a4:	6878      	ldr	r0, [r7, #4]
    a1a6:	4b09      	ldr	r3, [pc, #36]	; (a1cc <_i2c_m_enable_implementation+0x88>)
    a1a8:	4798      	blx	r3
    a1aa:	4603      	mov	r3, r0
    a1ac:	2b01      	cmp	r3, #1
    a1ae:	d1e2      	bne.n	a176 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    a1b0:	2300      	movs	r3, #0
}
    a1b2:	4618      	mov	r0, r3
    a1b4:	3710      	adds	r7, #16
    a1b6:	46bd      	mov	sp, r7
    a1b8:	bd80      	pop	{r7, pc}
    a1ba:	bf00      	nop
    a1bc:	00018644 	.word	0x00018644
    a1c0:	000065d9 	.word	0x000065d9
    a1c4:	00009479 	.word	0x00009479
    a1c8:	00009925 	.word	0x00009925
    a1cc:	000098d5 	.word	0x000098d5

0000a1d0 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    a1d0:	b580      	push	{r7, lr}
    a1d2:	b084      	sub	sp, #16
    a1d4:	af00      	add	r7, sp, #0
    a1d6:	6078      	str	r0, [r7, #4]
    a1d8:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    a1da:	6838      	ldr	r0, [r7, #0]
    a1dc:	4b42      	ldr	r3, [pc, #264]	; (a2e8 <_i2c_m_sync_init_impl+0x118>)
    a1de:	4798      	blx	r3
    a1e0:	4603      	mov	r3, r0
    a1e2:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    a1e4:	2101      	movs	r1, #1
    a1e6:	6838      	ldr	r0, [r7, #0]
    a1e8:	4b40      	ldr	r3, [pc, #256]	; (a2ec <_i2c_m_sync_init_impl+0x11c>)
    a1ea:	4798      	blx	r3
    a1ec:	4603      	mov	r3, r0
    a1ee:	f083 0301 	eor.w	r3, r3, #1
    a1f2:	b2db      	uxtb	r3, r3
    a1f4:	2b00      	cmp	r3, #0
    a1f6:	d020      	beq.n	a23a <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    a1f8:	7bfa      	ldrb	r2, [r7, #15]
    a1fa:	493d      	ldr	r1, [pc, #244]	; (a2f0 <_i2c_m_sync_init_impl+0x120>)
    a1fc:	4613      	mov	r3, r2
    a1fe:	005b      	lsls	r3, r3, #1
    a200:	4413      	add	r3, r2
    a202:	00db      	lsls	r3, r3, #3
    a204:	440b      	add	r3, r1
    a206:	3304      	adds	r3, #4
    a208:	681b      	ldr	r3, [r3, #0]
    a20a:	f003 031c 	and.w	r3, r3, #28
    a20e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    a210:	2102      	movs	r1, #2
    a212:	6838      	ldr	r0, [r7, #0]
    a214:	4b37      	ldr	r3, [pc, #220]	; (a2f4 <_i2c_m_sync_init_impl+0x124>)
    a216:	4798      	blx	r3
    a218:	4603      	mov	r3, r0
    a21a:	2b00      	cmp	r3, #0
    a21c:	d006      	beq.n	a22c <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    a21e:	6838      	ldr	r0, [r7, #0]
    a220:	4b35      	ldr	r3, [pc, #212]	; (a2f8 <_i2c_m_sync_init_impl+0x128>)
    a222:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    a224:	2102      	movs	r1, #2
    a226:	6838      	ldr	r0, [r7, #0]
    a228:	4b34      	ldr	r3, [pc, #208]	; (a2fc <_i2c_m_sync_init_impl+0x12c>)
    a22a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    a22c:	68bb      	ldr	r3, [r7, #8]
    a22e:	f043 0301 	orr.w	r3, r3, #1
    a232:	4619      	mov	r1, r3
    a234:	6838      	ldr	r0, [r7, #0]
    a236:	4b32      	ldr	r3, [pc, #200]	; (a300 <_i2c_m_sync_init_impl+0x130>)
    a238:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    a23a:	2101      	movs	r1, #1
    a23c:	6838      	ldr	r0, [r7, #0]
    a23e:	4b2f      	ldr	r3, [pc, #188]	; (a2fc <_i2c_m_sync_init_impl+0x12c>)
    a240:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    a242:	7bfa      	ldrb	r2, [r7, #15]
    a244:	492a      	ldr	r1, [pc, #168]	; (a2f0 <_i2c_m_sync_init_impl+0x120>)
    a246:	4613      	mov	r3, r2
    a248:	005b      	lsls	r3, r3, #1
    a24a:	4413      	add	r3, r2
    a24c:	00db      	lsls	r3, r3, #3
    a24e:	440b      	add	r3, r1
    a250:	3304      	adds	r3, #4
    a252:	681b      	ldr	r3, [r3, #0]
    a254:	4619      	mov	r1, r3
    a256:	6838      	ldr	r0, [r7, #0]
    a258:	4b29      	ldr	r3, [pc, #164]	; (a300 <_i2c_m_sync_init_impl+0x130>)
    a25a:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    a25c:	7bfa      	ldrb	r2, [r7, #15]
    a25e:	4924      	ldr	r1, [pc, #144]	; (a2f0 <_i2c_m_sync_init_impl+0x120>)
    a260:	4613      	mov	r3, r2
    a262:	005b      	lsls	r3, r3, #1
    a264:	4413      	add	r3, r2
    a266:	00db      	lsls	r3, r3, #3
    a268:	440b      	add	r3, r1
    a26a:	3308      	adds	r3, #8
    a26c:	681b      	ldr	r3, [r3, #0]
    a26e:	4619      	mov	r1, r3
    a270:	6838      	ldr	r0, [r7, #0]
    a272:	4b24      	ldr	r3, [pc, #144]	; (a304 <_i2c_m_sync_init_impl+0x134>)
    a274:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    a276:	7bfa      	ldrb	r2, [r7, #15]
    a278:	491d      	ldr	r1, [pc, #116]	; (a2f0 <_i2c_m_sync_init_impl+0x120>)
    a27a:	4613      	mov	r3, r2
    a27c:	005b      	lsls	r3, r3, #1
    a27e:	4413      	add	r3, r2
    a280:	00db      	lsls	r3, r3, #3
    a282:	440b      	add	r3, r1
    a284:	330c      	adds	r3, #12
    a286:	681b      	ldr	r3, [r3, #0]
    a288:	4619      	mov	r1, r3
    a28a:	6838      	ldr	r0, [r7, #0]
    a28c:	4b1e      	ldr	r3, [pc, #120]	; (a308 <_i2c_m_sync_init_impl+0x138>)
    a28e:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    a290:	7bfa      	ldrb	r2, [r7, #15]
    a292:	4917      	ldr	r1, [pc, #92]	; (a2f0 <_i2c_m_sync_init_impl+0x120>)
    a294:	4613      	mov	r3, r2
    a296:	005b      	lsls	r3, r3, #1
    a298:	4413      	add	r3, r2
    a29a:	00db      	lsls	r3, r3, #3
    a29c:	440b      	add	r3, r1
    a29e:	3304      	adds	r3, #4
    a2a0:	681b      	ldr	r3, [r3, #0]
    a2a2:	0e1b      	lsrs	r3, r3, #24
    a2a4:	b29b      	uxth	r3, r3
    a2a6:	f003 0303 	and.w	r3, r3, #3
    a2aa:	b29a      	uxth	r2, r3
    a2ac:	687b      	ldr	r3, [r7, #4]
    a2ae:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    a2b0:	687b      	ldr	r3, [r7, #4]
    a2b2:	899b      	ldrh	r3, [r3, #12]
    a2b4:	2b01      	cmp	r3, #1
    a2b6:	bf8c      	ite	hi
    a2b8:	2301      	movhi	r3, #1
    a2ba:	2300      	movls	r3, #0
    a2bc:	b2db      	uxtb	r3, r3
    a2be:	4619      	mov	r1, r3
    a2c0:	6838      	ldr	r0, [r7, #0]
    a2c2:	4b12      	ldr	r3, [pc, #72]	; (a30c <_i2c_m_sync_init_impl+0x13c>)
    a2c4:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    a2c6:	7bfa      	ldrb	r2, [r7, #15]
    a2c8:	4909      	ldr	r1, [pc, #36]	; (a2f0 <_i2c_m_sync_init_impl+0x120>)
    a2ca:	4613      	mov	r3, r2
    a2cc:	005b      	lsls	r3, r3, #1
    a2ce:	4413      	add	r3, r2
    a2d0:	00db      	lsls	r3, r3, #3
    a2d2:	440b      	add	r3, r1
    a2d4:	3312      	adds	r3, #18
    a2d6:	881a      	ldrh	r2, [r3, #0]
    a2d8:	687b      	ldr	r3, [r7, #4]
    a2da:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    a2dc:	2300      	movs	r3, #0
}
    a2de:	4618      	mov	r0, r3
    a2e0:	3710      	adds	r7, #16
    a2e2:	46bd      	mov	sp, r7
    a2e4:	bd80      	pop	{r7, pc}
    a2e6:	bf00      	nop
    a2e8:	000099fd 	.word	0x000099fd
    a2ec:	000091ed 	.word	0x000091ed
    a2f0:	2000007c 	.word	0x2000007c
    a2f4:	000094f9 	.word	0x000094f9
    a2f8:	000094a1 	.word	0x000094a1
    a2fc:	000091c9 	.word	0x000091c9
    a300:	00009529 	.word	0x00009529
    a304:	000096f9 	.word	0x000096f9
    a308:	00009741 	.word	0x00009741
    a30c:	0000977d 	.word	0x0000977d

0000a310 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    a310:	b580      	push	{r7, lr}
    a312:	b082      	sub	sp, #8
    a314:	af00      	add	r7, sp, #0
    a316:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    a318:	2101      	movs	r1, #1
    a31a:	6878      	ldr	r0, [r7, #4]
    a31c:	4b07      	ldr	r3, [pc, #28]	; (a33c <_spi_sync_enable+0x2c>)
    a31e:	4798      	blx	r3
    a320:	4603      	mov	r3, r0
    a322:	2b00      	cmp	r3, #0
    a324:	d002      	beq.n	a32c <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    a326:	f06f 0303 	mvn.w	r3, #3
    a32a:	e003      	b.n	a334 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    a32c:	6878      	ldr	r0, [r7, #4]
    a32e:	4b04      	ldr	r3, [pc, #16]	; (a340 <_spi_sync_enable+0x30>)
    a330:	4798      	blx	r3

	return ERR_NONE;
    a332:	2300      	movs	r3, #0
}
    a334:	4618      	mov	r0, r3
    a336:	3708      	adds	r7, #8
    a338:	46bd      	mov	sp, r7
    a33a:	bd80      	pop	{r7, pc}
    a33c:	00009239 	.word	0x00009239
    a340:	0000954d 	.word	0x0000954d

0000a344 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    a344:	b580      	push	{r7, lr}
    a346:	b082      	sub	sp, #8
    a348:	af00      	add	r7, sp, #0
    a34a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    a34c:	2101      	movs	r1, #1
    a34e:	6878      	ldr	r0, [r7, #4]
    a350:	4b07      	ldr	r3, [pc, #28]	; (a370 <_spi_sync_disable+0x2c>)
    a352:	4798      	blx	r3
    a354:	4603      	mov	r3, r0
    a356:	2b00      	cmp	r3, #0
    a358:	d002      	beq.n	a360 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    a35a:	f06f 0303 	mvn.w	r3, #3
    a35e:	e003      	b.n	a368 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    a360:	6878      	ldr	r0, [r7, #4]
    a362:	4b04      	ldr	r3, [pc, #16]	; (a374 <_spi_sync_disable+0x30>)
    a364:	4798      	blx	r3

	return ERR_NONE;
    a366:	2300      	movs	r3, #0
}
    a368:	4618      	mov	r0, r3
    a36a:	3708      	adds	r7, #8
    a36c:	46bd      	mov	sp, r7
    a36e:	bd80      	pop	{r7, pc}
    a370:	00009239 	.word	0x00009239
    a374:	000095ad 	.word	0x000095ad

0000a378 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    a378:	b580      	push	{r7, lr}
    a37a:	b082      	sub	sp, #8
    a37c:	af00      	add	r7, sp, #0
    a37e:	6078      	str	r0, [r7, #4]
    a380:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    a382:	687b      	ldr	r3, [r7, #4]
    a384:	2b00      	cmp	r3, #0
    a386:	d004      	beq.n	a392 <_spi_load_regs_master+0x1a>
    a388:	683b      	ldr	r3, [r7, #0]
    a38a:	2b00      	cmp	r3, #0
    a38c:	d001      	beq.n	a392 <_spi_load_regs_master+0x1a>
    a38e:	2301      	movs	r3, #1
    a390:	e000      	b.n	a394 <_spi_load_regs_master+0x1c>
    a392:	2300      	movs	r3, #0
    a394:	f003 0301 	and.w	r3, r3, #1
    a398:	b2db      	uxtb	r3, r3
    a39a:	f640 1245 	movw	r2, #2373	; 0x945
    a39e:	4915      	ldr	r1, [pc, #84]	; (a3f4 <_spi_load_regs_master+0x7c>)
    a3a0:	4618      	mov	r0, r3
    a3a2:	4b15      	ldr	r3, [pc, #84]	; (a3f8 <_spi_load_regs_master+0x80>)
    a3a4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    a3a6:	683b      	ldr	r3, [r7, #0]
    a3a8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    a3aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    a3ae:	f023 0301 	bic.w	r3, r3, #1
    a3b2:	4619      	mov	r1, r3
    a3b4:	6878      	ldr	r0, [r7, #4]
    a3b6:	4b11      	ldr	r3, [pc, #68]	; (a3fc <_spi_load_regs_master+0x84>)
    a3b8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    a3ba:	683b      	ldr	r3, [r7, #0]
    a3bc:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    a3be:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    a3c2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    a3c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a3ca:	4619      	mov	r1, r3
    a3cc:	6878      	ldr	r0, [r7, #4]
    a3ce:	4b0c      	ldr	r3, [pc, #48]	; (a400 <_spi_load_regs_master+0x88>)
    a3d0:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    a3d2:	683b      	ldr	r3, [r7, #0]
    a3d4:	7b1b      	ldrb	r3, [r3, #12]
    a3d6:	4619      	mov	r1, r3
    a3d8:	6878      	ldr	r0, [r7, #4]
    a3da:	4b0a      	ldr	r3, [pc, #40]	; (a404 <_spi_load_regs_master+0x8c>)
    a3dc:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    a3de:	683b      	ldr	r3, [r7, #0]
    a3e0:	7b5b      	ldrb	r3, [r3, #13]
    a3e2:	4619      	mov	r1, r3
    a3e4:	6878      	ldr	r0, [r7, #4]
    a3e6:	4b08      	ldr	r3, [pc, #32]	; (a408 <_spi_load_regs_master+0x90>)
    a3e8:	4798      	blx	r3
}
    a3ea:	bf00      	nop
    a3ec:	3708      	adds	r7, #8
    a3ee:	46bd      	mov	sp, r7
    a3f0:	bd80      	pop	{r7, pc}
    a3f2:	bf00      	nop
    a3f4:	00018644 	.word	0x00018644
    a3f8:	000065d9 	.word	0x000065d9
    a3fc:	00009605 	.word	0x00009605
    a400:	0000971d 	.word	0x0000971d
    a404:	0000975d 	.word	0x0000975d
    a408:	00009895 	.word	0x00009895

0000a40c <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    a40c:	b580      	push	{r7, lr}
    a40e:	b082      	sub	sp, #8
    a410:	af00      	add	r7, sp, #0
    a412:	6078      	str	r0, [r7, #4]
    a414:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    a416:	687b      	ldr	r3, [r7, #4]
    a418:	2b00      	cmp	r3, #0
    a41a:	d004      	beq.n	a426 <_spi_load_regs_slave+0x1a>
    a41c:	683b      	ldr	r3, [r7, #0]
    a41e:	2b00      	cmp	r3, #0
    a420:	d001      	beq.n	a426 <_spi_load_regs_slave+0x1a>
    a422:	2301      	movs	r3, #1
    a424:	e000      	b.n	a428 <_spi_load_regs_slave+0x1c>
    a426:	2300      	movs	r3, #0
    a428:	f003 0301 	and.w	r3, r3, #1
    a42c:	b2db      	uxtb	r3, r3
    a42e:	f640 1259 	movw	r2, #2393	; 0x959
    a432:	491a      	ldr	r1, [pc, #104]	; (a49c <_spi_load_regs_slave+0x90>)
    a434:	4618      	mov	r0, r3
    a436:	4b1a      	ldr	r3, [pc, #104]	; (a4a0 <_spi_load_regs_slave+0x94>)
    a438:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    a43a:	683b      	ldr	r3, [r7, #0]
    a43c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    a43e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    a442:	f023 0301 	bic.w	r3, r3, #1
    a446:	4619      	mov	r1, r3
    a448:	6878      	ldr	r0, [r7, #4]
    a44a:	4b16      	ldr	r3, [pc, #88]	; (a4a4 <_spi_load_regs_slave+0x98>)
    a44c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    a44e:	683b      	ldr	r3, [r7, #0]
    a450:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    a452:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    a456:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    a45a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a45e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    a462:	4619      	mov	r1, r3
    a464:	6878      	ldr	r0, [r7, #4]
    a466:	4b10      	ldr	r3, [pc, #64]	; (a4a8 <_spi_load_regs_slave+0x9c>)
    a468:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    a46a:	683b      	ldr	r3, [r7, #0]
    a46c:	689b      	ldr	r3, [r3, #8]
    a46e:	4619      	mov	r1, r3
    a470:	6878      	ldr	r0, [r7, #4]
    a472:	4b0e      	ldr	r3, [pc, #56]	; (a4ac <_spi_load_regs_slave+0xa0>)
    a474:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    a476:	683b      	ldr	r3, [r7, #0]
    a478:	7b5b      	ldrb	r3, [r3, #13]
    a47a:	4619      	mov	r1, r3
    a47c:	6878      	ldr	r0, [r7, #4]
    a47e:	4b0c      	ldr	r3, [pc, #48]	; (a4b0 <_spi_load_regs_slave+0xa4>)
    a480:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    a482:	bf00      	nop
    a484:	f04f 31ff 	mov.w	r1, #4294967295
    a488:	6878      	ldr	r0, [r7, #4]
    a48a:	4b0a      	ldr	r3, [pc, #40]	; (a4b4 <_spi_load_regs_slave+0xa8>)
    a48c:	4798      	blx	r3
    a48e:	4603      	mov	r3, r0
    a490:	2b00      	cmp	r3, #0
    a492:	d1f7      	bne.n	a484 <_spi_load_regs_slave+0x78>
		;
}
    a494:	bf00      	nop
    a496:	3708      	adds	r7, #8
    a498:	46bd      	mov	sp, r7
    a49a:	bd80      	pop	{r7, pc}
    a49c:	00018644 	.word	0x00018644
    a4a0:	000065d9 	.word	0x000065d9
    a4a4:	00009605 	.word	0x00009605
    a4a8:	0000971d 	.word	0x0000971d
    a4ac:	00009801 	.word	0x00009801
    a4b0:	00009895 	.word	0x00009895
    a4b4:	00009239 	.word	0x00009239

0000a4b8 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    a4b8:	b580      	push	{r7, lr}
    a4ba:	b084      	sub	sp, #16
    a4bc:	af00      	add	r7, sp, #0
    a4be:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    a4c0:	687b      	ldr	r3, [r7, #4]
    a4c2:	4618      	mov	r0, r3
    a4c4:	4b11      	ldr	r3, [pc, #68]	; (a50c <_spi_get_regs+0x54>)
    a4c6:	4798      	blx	r3
    a4c8:	4603      	mov	r3, r0
    a4ca:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    a4cc:	2300      	movs	r3, #0
    a4ce:	73fb      	strb	r3, [r7, #15]
    a4d0:	e014      	b.n	a4fc <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    a4d2:	7bfa      	ldrb	r2, [r7, #15]
    a4d4:	490e      	ldr	r1, [pc, #56]	; (a510 <_spi_get_regs+0x58>)
    a4d6:	4613      	mov	r3, r2
    a4d8:	011b      	lsls	r3, r3, #4
    a4da:	4413      	add	r3, r2
    a4dc:	440b      	add	r3, r1
    a4de:	3310      	adds	r3, #16
    a4e0:	781b      	ldrb	r3, [r3, #0]
    a4e2:	7bba      	ldrb	r2, [r7, #14]
    a4e4:	429a      	cmp	r2, r3
    a4e6:	d106      	bne.n	a4f6 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    a4e8:	7bfa      	ldrb	r2, [r7, #15]
    a4ea:	4613      	mov	r3, r2
    a4ec:	011b      	lsls	r3, r3, #4
    a4ee:	4413      	add	r3, r2
    a4f0:	4a07      	ldr	r2, [pc, #28]	; (a510 <_spi_get_regs+0x58>)
    a4f2:	4413      	add	r3, r2
    a4f4:	e006      	b.n	a504 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    a4f6:	7bfb      	ldrb	r3, [r7, #15]
    a4f8:	3301      	adds	r3, #1
    a4fa:	73fb      	strb	r3, [r7, #15]
    a4fc:	7bfb      	ldrb	r3, [r7, #15]
    a4fe:	2b02      	cmp	r3, #2
    a500:	d9e7      	bls.n	a4d2 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    a502:	2300      	movs	r3, #0
}
    a504:	4618      	mov	r0, r3
    a506:	3710      	adds	r7, #16
    a508:	46bd      	mov	sp, r7
    a50a:	bd80      	pop	{r7, pc}
    a50c:	0000994d 	.word	0x0000994d
    a510:	00018680 	.word	0x00018680

0000a514 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    a514:	b580      	push	{r7, lr}
    a516:	b084      	sub	sp, #16
    a518:	af00      	add	r7, sp, #0
    a51a:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    a51c:	687b      	ldr	r3, [r7, #4]
    a51e:	681b      	ldr	r3, [r3, #0]
    a520:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    a522:	68f8      	ldr	r0, [r7, #12]
    a524:	4b21      	ldr	r3, [pc, #132]	; (a5ac <_spi_handler+0x98>)
    a526:	4798      	blx	r3
    a528:	4603      	mov	r3, r0
    a52a:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    a52c:	68f8      	ldr	r0, [r7, #12]
    a52e:	4b20      	ldr	r3, [pc, #128]	; (a5b0 <_spi_handler+0x9c>)
    a530:	4798      	blx	r3
    a532:	4603      	mov	r3, r0
    a534:	461a      	mov	r2, r3
    a536:	7afb      	ldrb	r3, [r7, #11]
    a538:	4013      	ands	r3, r2
    a53a:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    a53c:	7afb      	ldrb	r3, [r7, #11]
    a53e:	f003 0301 	and.w	r3, r3, #1
    a542:	2b00      	cmp	r3, #0
    a544:	d004      	beq.n	a550 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    a546:	687b      	ldr	r3, [r7, #4]
    a548:	689b      	ldr	r3, [r3, #8]
    a54a:	6878      	ldr	r0, [r7, #4]
    a54c:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    a54e:	e029      	b.n	a5a4 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    a550:	7afb      	ldrb	r3, [r7, #11]
    a552:	f003 0304 	and.w	r3, r3, #4
    a556:	2b00      	cmp	r3, #0
    a558:	d004      	beq.n	a564 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    a55a:	687b      	ldr	r3, [r7, #4]
    a55c:	68db      	ldr	r3, [r3, #12]
    a55e:	6878      	ldr	r0, [r7, #4]
    a560:	4798      	blx	r3
}
    a562:	e01f      	b.n	a5a4 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    a564:	7afb      	ldrb	r3, [r7, #11]
    a566:	f003 0302 	and.w	r3, r3, #2
    a56a:	2b00      	cmp	r3, #0
    a56c:	d008      	beq.n	a580 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    a56e:	2102      	movs	r1, #2
    a570:	68f8      	ldr	r0, [r7, #12]
    a572:	4b10      	ldr	r3, [pc, #64]	; (a5b4 <_spi_handler+0xa0>)
    a574:	4798      	blx	r3
		dev->callbacks.complete(dev);
    a576:	687b      	ldr	r3, [r7, #4]
    a578:	691b      	ldr	r3, [r3, #16]
    a57a:	6878      	ldr	r0, [r7, #4]
    a57c:	4798      	blx	r3
}
    a57e:	e011      	b.n	a5a4 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    a580:	f997 300b 	ldrsb.w	r3, [r7, #11]
    a584:	2b00      	cmp	r3, #0
    a586:	da0d      	bge.n	a5a4 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    a588:	2104      	movs	r1, #4
    a58a:	68f8      	ldr	r0, [r7, #12]
    a58c:	4b0a      	ldr	r3, [pc, #40]	; (a5b8 <_spi_handler+0xa4>)
    a58e:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    a590:	2180      	movs	r1, #128	; 0x80
    a592:	68f8      	ldr	r0, [r7, #12]
    a594:	4b07      	ldr	r3, [pc, #28]	; (a5b4 <_spi_handler+0xa0>)
    a596:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    a598:	687b      	ldr	r3, [r7, #4]
    a59a:	695b      	ldr	r3, [r3, #20]
    a59c:	f06f 0112 	mvn.w	r1, #18
    a5a0:	6878      	ldr	r0, [r7, #4]
    a5a2:	4798      	blx	r3
}
    a5a4:	bf00      	nop
    a5a6:	3710      	adds	r7, #16
    a5a8:	46bd      	mov	sp, r7
    a5aa:	bd80      	pop	{r7, pc}
    a5ac:	000092f5 	.word	0x000092f5
    a5b0:	0000945f 	.word	0x0000945f
    a5b4:	0000930f 	.word	0x0000930f
    a5b8:	000098b5 	.word	0x000098b5

0000a5bc <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    a5bc:	b580      	push	{r7, lr}
    a5be:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a5c0:	4b03      	ldr	r3, [pc, #12]	; (a5d0 <SERCOM4_0_Handler+0x14>)
    a5c2:	681b      	ldr	r3, [r3, #0]
    a5c4:	4618      	mov	r0, r3
    a5c6:	4b03      	ldr	r3, [pc, #12]	; (a5d4 <SERCOM4_0_Handler+0x18>)
    a5c8:	4798      	blx	r3
}
    a5ca:	bf00      	nop
    a5cc:	bd80      	pop	{r7, pc}
    a5ce:	bf00      	nop
    a5d0:	20002f74 	.word	0x20002f74
    a5d4:	0000a515 	.word	0x0000a515

0000a5d8 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    a5d8:	b580      	push	{r7, lr}
    a5da:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a5dc:	4b03      	ldr	r3, [pc, #12]	; (a5ec <SERCOM4_1_Handler+0x14>)
    a5de:	681b      	ldr	r3, [r3, #0]
    a5e0:	4618      	mov	r0, r3
    a5e2:	4b03      	ldr	r3, [pc, #12]	; (a5f0 <SERCOM4_1_Handler+0x18>)
    a5e4:	4798      	blx	r3
}
    a5e6:	bf00      	nop
    a5e8:	bd80      	pop	{r7, pc}
    a5ea:	bf00      	nop
    a5ec:	20002f74 	.word	0x20002f74
    a5f0:	0000a515 	.word	0x0000a515

0000a5f4 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    a5f4:	b580      	push	{r7, lr}
    a5f6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a5f8:	4b03      	ldr	r3, [pc, #12]	; (a608 <SERCOM4_2_Handler+0x14>)
    a5fa:	681b      	ldr	r3, [r3, #0]
    a5fc:	4618      	mov	r0, r3
    a5fe:	4b03      	ldr	r3, [pc, #12]	; (a60c <SERCOM4_2_Handler+0x18>)
    a600:	4798      	blx	r3
}
    a602:	bf00      	nop
    a604:	bd80      	pop	{r7, pc}
    a606:	bf00      	nop
    a608:	20002f74 	.word	0x20002f74
    a60c:	0000a515 	.word	0x0000a515

0000a610 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    a610:	b580      	push	{r7, lr}
    a612:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a614:	4b03      	ldr	r3, [pc, #12]	; (a624 <SERCOM4_3_Handler+0x14>)
    a616:	681b      	ldr	r3, [r3, #0]
    a618:	4618      	mov	r0, r3
    a61a:	4b03      	ldr	r3, [pc, #12]	; (a628 <SERCOM4_3_Handler+0x18>)
    a61c:	4798      	blx	r3
}
    a61e:	bf00      	nop
    a620:	bd80      	pop	{r7, pc}
    a622:	bf00      	nop
    a624:	20002f74 	.word	0x20002f74
    a628:	0000a515 	.word	0x0000a515

0000a62c <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    a62c:	b580      	push	{r7, lr}
    a62e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a630:	4b03      	ldr	r3, [pc, #12]	; (a640 <SERCOM5_0_Handler+0x14>)
    a632:	681b      	ldr	r3, [r3, #0]
    a634:	4618      	mov	r0, r3
    a636:	4b03      	ldr	r3, [pc, #12]	; (a644 <SERCOM5_0_Handler+0x18>)
    a638:	4798      	blx	r3
}
    a63a:	bf00      	nop
    a63c:	bd80      	pop	{r7, pc}
    a63e:	bf00      	nop
    a640:	20002f78 	.word	0x20002f78
    a644:	00009cb1 	.word	0x00009cb1

0000a648 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    a648:	b580      	push	{r7, lr}
    a64a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a64c:	4b03      	ldr	r3, [pc, #12]	; (a65c <SERCOM5_1_Handler+0x14>)
    a64e:	681b      	ldr	r3, [r3, #0]
    a650:	4618      	mov	r0, r3
    a652:	4b03      	ldr	r3, [pc, #12]	; (a660 <SERCOM5_1_Handler+0x18>)
    a654:	4798      	blx	r3
}
    a656:	bf00      	nop
    a658:	bd80      	pop	{r7, pc}
    a65a:	bf00      	nop
    a65c:	20002f78 	.word	0x20002f78
    a660:	00009cb1 	.word	0x00009cb1

0000a664 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    a664:	b580      	push	{r7, lr}
    a666:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a668:	4b03      	ldr	r3, [pc, #12]	; (a678 <SERCOM5_2_Handler+0x14>)
    a66a:	681b      	ldr	r3, [r3, #0]
    a66c:	4618      	mov	r0, r3
    a66e:	4b03      	ldr	r3, [pc, #12]	; (a67c <SERCOM5_2_Handler+0x18>)
    a670:	4798      	blx	r3
}
    a672:	bf00      	nop
    a674:	bd80      	pop	{r7, pc}
    a676:	bf00      	nop
    a678:	20002f78 	.word	0x20002f78
    a67c:	00009cb1 	.word	0x00009cb1

0000a680 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    a680:	b580      	push	{r7, lr}
    a682:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a684:	4b03      	ldr	r3, [pc, #12]	; (a694 <SERCOM5_3_Handler+0x14>)
    a686:	681b      	ldr	r3, [r3, #0]
    a688:	4618      	mov	r0, r3
    a68a:	4b03      	ldr	r3, [pc, #12]	; (a698 <SERCOM5_3_Handler+0x18>)
    a68c:	4798      	blx	r3
}
    a68e:	bf00      	nop
    a690:	bd80      	pop	{r7, pc}
    a692:	bf00      	nop
    a694:	20002f78 	.word	0x20002f78
    a698:	00009cb1 	.word	0x00009cb1

0000a69c <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    a69c:	b580      	push	{r7, lr}
    a69e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a6a0:	4b03      	ldr	r3, [pc, #12]	; (a6b0 <SERCOM7_0_Handler+0x14>)
    a6a2:	681b      	ldr	r3, [r3, #0]
    a6a4:	4618      	mov	r0, r3
    a6a6:	4b03      	ldr	r3, [pc, #12]	; (a6b4 <SERCOM7_0_Handler+0x18>)
    a6a8:	4798      	blx	r3
}
    a6aa:	bf00      	nop
    a6ac:	bd80      	pop	{r7, pc}
    a6ae:	bf00      	nop
    a6b0:	20002f7c 	.word	0x20002f7c
    a6b4:	00009cb1 	.word	0x00009cb1

0000a6b8 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    a6b8:	b580      	push	{r7, lr}
    a6ba:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a6bc:	4b03      	ldr	r3, [pc, #12]	; (a6cc <SERCOM7_1_Handler+0x14>)
    a6be:	681b      	ldr	r3, [r3, #0]
    a6c0:	4618      	mov	r0, r3
    a6c2:	4b03      	ldr	r3, [pc, #12]	; (a6d0 <SERCOM7_1_Handler+0x18>)
    a6c4:	4798      	blx	r3
}
    a6c6:	bf00      	nop
    a6c8:	bd80      	pop	{r7, pc}
    a6ca:	bf00      	nop
    a6cc:	20002f7c 	.word	0x20002f7c
    a6d0:	00009cb1 	.word	0x00009cb1

0000a6d4 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    a6d4:	b580      	push	{r7, lr}
    a6d6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a6d8:	4b03      	ldr	r3, [pc, #12]	; (a6e8 <SERCOM7_2_Handler+0x14>)
    a6da:	681b      	ldr	r3, [r3, #0]
    a6dc:	4618      	mov	r0, r3
    a6de:	4b03      	ldr	r3, [pc, #12]	; (a6ec <SERCOM7_2_Handler+0x18>)
    a6e0:	4798      	blx	r3
}
    a6e2:	bf00      	nop
    a6e4:	bd80      	pop	{r7, pc}
    a6e6:	bf00      	nop
    a6e8:	20002f7c 	.word	0x20002f7c
    a6ec:	00009cb1 	.word	0x00009cb1

0000a6f0 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    a6f0:	b580      	push	{r7, lr}
    a6f2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a6f4:	4b03      	ldr	r3, [pc, #12]	; (a704 <SERCOM7_3_Handler+0x14>)
    a6f6:	681b      	ldr	r3, [r3, #0]
    a6f8:	4618      	mov	r0, r3
    a6fa:	4b03      	ldr	r3, [pc, #12]	; (a708 <SERCOM7_3_Handler+0x18>)
    a6fc:	4798      	blx	r3
}
    a6fe:	bf00      	nop
    a700:	bd80      	pop	{r7, pc}
    a702:	bf00      	nop
    a704:	20002f7c 	.word	0x20002f7c
    a708:	00009cb1 	.word	0x00009cb1

0000a70c <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    a70c:	b580      	push	{r7, lr}
    a70e:	b084      	sub	sp, #16
    a710:	af00      	add	r7, sp, #0
    a712:	6078      	str	r0, [r7, #4]
    a714:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    a716:	683b      	ldr	r3, [r7, #0]
    a718:	4618      	mov	r0, r3
    a71a:	4b35      	ldr	r3, [pc, #212]	; (a7f0 <_spi_m_sync_init+0xe4>)
    a71c:	4798      	blx	r3
    a71e:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    a720:	687b      	ldr	r3, [r7, #4]
    a722:	2b00      	cmp	r3, #0
    a724:	d004      	beq.n	a730 <_spi_m_sync_init+0x24>
    a726:	683b      	ldr	r3, [r7, #0]
    a728:	2b00      	cmp	r3, #0
    a72a:	d001      	beq.n	a730 <_spi_m_sync_init+0x24>
    a72c:	2301      	movs	r3, #1
    a72e:	e000      	b.n	a732 <_spi_m_sync_init+0x26>
    a730:	2300      	movs	r3, #0
    a732:	f003 0301 	and.w	r3, r3, #1
    a736:	b2db      	uxtb	r3, r3
    a738:	f640 12ec 	movw	r2, #2540	; 0x9ec
    a73c:	492d      	ldr	r1, [pc, #180]	; (a7f4 <_spi_m_sync_init+0xe8>)
    a73e:	4618      	mov	r0, r3
    a740:	4b2d      	ldr	r3, [pc, #180]	; (a7f8 <_spi_m_sync_init+0xec>)
    a742:	4798      	blx	r3

	if (regs == NULL) {
    a744:	68fb      	ldr	r3, [r7, #12]
    a746:	2b00      	cmp	r3, #0
    a748:	d102      	bne.n	a750 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    a74a:	f06f 030c 	mvn.w	r3, #12
    a74e:	e04a      	b.n	a7e6 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    a750:	2101      	movs	r1, #1
    a752:	6838      	ldr	r0, [r7, #0]
    a754:	4b29      	ldr	r3, [pc, #164]	; (a7fc <_spi_m_sync_init+0xf0>)
    a756:	4798      	blx	r3
    a758:	4603      	mov	r3, r0
    a75a:	f083 0301 	eor.w	r3, r3, #1
    a75e:	b2db      	uxtb	r3, r3
    a760:	2b00      	cmp	r3, #0
    a762:	d019      	beq.n	a798 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    a764:	68fb      	ldr	r3, [r7, #12]
    a766:	681b      	ldr	r3, [r3, #0]
    a768:	f003 031c 	and.w	r3, r3, #28
    a76c:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    a76e:	2102      	movs	r1, #2
    a770:	6838      	ldr	r0, [r7, #0]
    a772:	4b23      	ldr	r3, [pc, #140]	; (a800 <_spi_m_sync_init+0xf4>)
    a774:	4798      	blx	r3
    a776:	4603      	mov	r3, r0
    a778:	2b00      	cmp	r3, #0
    a77a:	d006      	beq.n	a78a <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    a77c:	6838      	ldr	r0, [r7, #0]
    a77e:	4b21      	ldr	r3, [pc, #132]	; (a804 <_spi_m_sync_init+0xf8>)
    a780:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    a782:	2102      	movs	r1, #2
    a784:	6838      	ldr	r0, [r7, #0]
    a786:	4b20      	ldr	r3, [pc, #128]	; (a808 <_spi_m_sync_init+0xfc>)
    a788:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    a78a:	68bb      	ldr	r3, [r7, #8]
    a78c:	f043 0301 	orr.w	r3, r3, #1
    a790:	4619      	mov	r1, r3
    a792:	6838      	ldr	r0, [r7, #0]
    a794:	4b1d      	ldr	r3, [pc, #116]	; (a80c <_spi_m_sync_init+0x100>)
    a796:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    a798:	2101      	movs	r1, #1
    a79a:	6838      	ldr	r0, [r7, #0]
    a79c:	4b1a      	ldr	r3, [pc, #104]	; (a808 <_spi_m_sync_init+0xfc>)
    a79e:	4798      	blx	r3

	dev->prvt = hw;
    a7a0:	687b      	ldr	r3, [r7, #4]
    a7a2:	683a      	ldr	r2, [r7, #0]
    a7a4:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    a7a6:	68fb      	ldr	r3, [r7, #12]
    a7a8:	681b      	ldr	r3, [r3, #0]
    a7aa:	f003 031c 	and.w	r3, r3, #28
    a7ae:	2b08      	cmp	r3, #8
    a7b0:	d104      	bne.n	a7bc <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    a7b2:	68f9      	ldr	r1, [r7, #12]
    a7b4:	6838      	ldr	r0, [r7, #0]
    a7b6:	4b16      	ldr	r3, [pc, #88]	; (a810 <_spi_m_sync_init+0x104>)
    a7b8:	4798      	blx	r3
    a7ba:	e003      	b.n	a7c4 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    a7bc:	68f9      	ldr	r1, [r7, #12]
    a7be:	6838      	ldr	r0, [r7, #0]
    a7c0:	4b14      	ldr	r3, [pc, #80]	; (a814 <_spi_m_sync_init+0x108>)
    a7c2:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    a7c4:	68fb      	ldr	r3, [r7, #12]
    a7c6:	685b      	ldr	r3, [r3, #4]
    a7c8:	f003 0307 	and.w	r3, r3, #7
    a7cc:	2b00      	cmp	r3, #0
    a7ce:	d101      	bne.n	a7d4 <_spi_m_sync_init+0xc8>
    a7d0:	2201      	movs	r2, #1
    a7d2:	e000      	b.n	a7d6 <_spi_m_sync_init+0xca>
    a7d4:	2202      	movs	r2, #2
    a7d6:	687b      	ldr	r3, [r7, #4]
    a7d8:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    a7da:	68fb      	ldr	r3, [r7, #12]
    a7dc:	89db      	ldrh	r3, [r3, #14]
    a7de:	b29a      	uxth	r2, r3
    a7e0:	687b      	ldr	r3, [r7, #4]
    a7e2:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    a7e4:	2300      	movs	r3, #0
}
    a7e6:	4618      	mov	r0, r3
    a7e8:	3710      	adds	r7, #16
    a7ea:	46bd      	mov	sp, r7
    a7ec:	bd80      	pop	{r7, pc}
    a7ee:	bf00      	nop
    a7f0:	0000a4b9 	.word	0x0000a4b9
    a7f4:	00018644 	.word	0x00018644
    a7f8:	000065d9 	.word	0x000065d9
    a7fc:	00009239 	.word	0x00009239
    a800:	000095d5 	.word	0x000095d5
    a804:	000095ad 	.word	0x000095ad
    a808:	00009215 	.word	0x00009215
    a80c:	00009605 	.word	0x00009605
    a810:	0000a40d 	.word	0x0000a40d
    a814:	0000a379 	.word	0x0000a379

0000a818 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    a818:	b580      	push	{r7, lr}
    a81a:	b086      	sub	sp, #24
    a81c:	af00      	add	r7, sp, #0
    a81e:	6078      	str	r0, [r7, #4]
    a820:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    a822:	687b      	ldr	r3, [r7, #4]
    a824:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    a826:	6839      	ldr	r1, [r7, #0]
    a828:	6878      	ldr	r0, [r7, #4]
    a82a:	4b1a      	ldr	r3, [pc, #104]	; (a894 <_spi_m_async_init+0x7c>)
    a82c:	4798      	blx	r3
    a82e:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    a830:	68bb      	ldr	r3, [r7, #8]
    a832:	2b00      	cmp	r3, #0
    a834:	da01      	bge.n	a83a <_spi_m_async_init+0x22>
		return rc;
    a836:	68bb      	ldr	r3, [r7, #8]
    a838:	e028      	b.n	a88c <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    a83a:	6879      	ldr	r1, [r7, #4]
    a83c:	6838      	ldr	r0, [r7, #0]
    a83e:	4b16      	ldr	r3, [pc, #88]	; (a898 <_spi_m_async_init+0x80>)
    a840:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    a842:	68fb      	ldr	r3, [r7, #12]
    a844:	2200      	movs	r2, #0
    a846:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    a848:	68fb      	ldr	r3, [r7, #12]
    a84a:	2200      	movs	r2, #0
    a84c:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    a84e:	68fb      	ldr	r3, [r7, #12]
    a850:	2200      	movs	r2, #0
    a852:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    a854:	6838      	ldr	r0, [r7, #0]
    a856:	4b11      	ldr	r3, [pc, #68]	; (a89c <_spi_m_async_init+0x84>)
    a858:	4798      	blx	r3
    a85a:	4603      	mov	r3, r0
    a85c:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    a85e:	2300      	movs	r3, #0
    a860:	613b      	str	r3, [r7, #16]
    a862:	e00f      	b.n	a884 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    a864:	7dfb      	ldrb	r3, [r7, #23]
    a866:	b21b      	sxth	r3, r3
    a868:	4618      	mov	r0, r3
    a86a:	4b0d      	ldr	r3, [pc, #52]	; (a8a0 <_spi_m_async_init+0x88>)
    a86c:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    a86e:	7dfb      	ldrb	r3, [r7, #23]
    a870:	b21b      	sxth	r3, r3
    a872:	4618      	mov	r0, r3
    a874:	4b0b      	ldr	r3, [pc, #44]	; (a8a4 <_spi_m_async_init+0x8c>)
    a876:	4798      	blx	r3
		irq++;
    a878:	7dfb      	ldrb	r3, [r7, #23]
    a87a:	3301      	adds	r3, #1
    a87c:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    a87e:	693b      	ldr	r3, [r7, #16]
    a880:	3301      	adds	r3, #1
    a882:	613b      	str	r3, [r7, #16]
    a884:	693b      	ldr	r3, [r7, #16]
    a886:	2b03      	cmp	r3, #3
    a888:	d9ec      	bls.n	a864 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    a88a:	2300      	movs	r3, #0
}
    a88c:	4618      	mov	r0, r3
    a88e:	3718      	adds	r7, #24
    a890:	46bd      	mov	sp, r7
    a892:	bd80      	pop	{r7, pc}
    a894:	0000a70d 	.word	0x0000a70d
    a898:	000099a9 	.word	0x000099a9
    a89c:	00009df5 	.word	0x00009df5
    a8a0:	00009149 	.word	0x00009149
    a8a4:	0000918d 	.word	0x0000918d

0000a8a8 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    a8a8:	b580      	push	{r7, lr}
    a8aa:	b082      	sub	sp, #8
    a8ac:	af00      	add	r7, sp, #0
    a8ae:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    a8b0:	687b      	ldr	r3, [r7, #4]
    a8b2:	2b00      	cmp	r3, #0
    a8b4:	d005      	beq.n	a8c2 <_spi_m_sync_enable+0x1a>
    a8b6:	687b      	ldr	r3, [r7, #4]
    a8b8:	681b      	ldr	r3, [r3, #0]
    a8ba:	2b00      	cmp	r3, #0
    a8bc:	d001      	beq.n	a8c2 <_spi_m_sync_enable+0x1a>
    a8be:	2301      	movs	r3, #1
    a8c0:	e000      	b.n	a8c4 <_spi_m_sync_enable+0x1c>
    a8c2:	2300      	movs	r3, #0
    a8c4:	f003 0301 	and.w	r3, r3, #1
    a8c8:	b2db      	uxtb	r3, r3
    a8ca:	f640 224b 	movw	r2, #2635	; 0xa4b
    a8ce:	4907      	ldr	r1, [pc, #28]	; (a8ec <_spi_m_sync_enable+0x44>)
    a8d0:	4618      	mov	r0, r3
    a8d2:	4b07      	ldr	r3, [pc, #28]	; (a8f0 <_spi_m_sync_enable+0x48>)
    a8d4:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    a8d6:	687b      	ldr	r3, [r7, #4]
    a8d8:	681b      	ldr	r3, [r3, #0]
    a8da:	4618      	mov	r0, r3
    a8dc:	4b05      	ldr	r3, [pc, #20]	; (a8f4 <_spi_m_sync_enable+0x4c>)
    a8de:	4798      	blx	r3
    a8e0:	4603      	mov	r3, r0
}
    a8e2:	4618      	mov	r0, r3
    a8e4:	3708      	adds	r7, #8
    a8e6:	46bd      	mov	sp, r7
    a8e8:	bd80      	pop	{r7, pc}
    a8ea:	bf00      	nop
    a8ec:	00018644 	.word	0x00018644
    a8f0:	000065d9 	.word	0x000065d9
    a8f4:	0000a311 	.word	0x0000a311

0000a8f8 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    a8f8:	b580      	push	{r7, lr}
    a8fa:	b082      	sub	sp, #8
    a8fc:	af00      	add	r7, sp, #0
    a8fe:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    a900:	687b      	ldr	r3, [r7, #4]
    a902:	2b00      	cmp	r3, #0
    a904:	d005      	beq.n	a912 <_spi_m_sync_disable+0x1a>
    a906:	687b      	ldr	r3, [r7, #4]
    a908:	681b      	ldr	r3, [r3, #0]
    a90a:	2b00      	cmp	r3, #0
    a90c:	d001      	beq.n	a912 <_spi_m_sync_disable+0x1a>
    a90e:	2301      	movs	r3, #1
    a910:	e000      	b.n	a914 <_spi_m_sync_disable+0x1c>
    a912:	2300      	movs	r3, #0
    a914:	f003 0301 	and.w	r3, r3, #1
    a918:	b2db      	uxtb	r3, r3
    a91a:	f640 2267 	movw	r2, #2663	; 0xa67
    a91e:	4907      	ldr	r1, [pc, #28]	; (a93c <_spi_m_sync_disable+0x44>)
    a920:	4618      	mov	r0, r3
    a922:	4b07      	ldr	r3, [pc, #28]	; (a940 <_spi_m_sync_disable+0x48>)
    a924:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    a926:	687b      	ldr	r3, [r7, #4]
    a928:	681b      	ldr	r3, [r3, #0]
    a92a:	4618      	mov	r0, r3
    a92c:	4b05      	ldr	r3, [pc, #20]	; (a944 <_spi_m_sync_disable+0x4c>)
    a92e:	4798      	blx	r3
    a930:	4603      	mov	r3, r0
}
    a932:	4618      	mov	r0, r3
    a934:	3708      	adds	r7, #8
    a936:	46bd      	mov	sp, r7
    a938:	bd80      	pop	{r7, pc}
    a93a:	bf00      	nop
    a93c:	00018644 	.word	0x00018644
    a940:	000065d9 	.word	0x000065d9
    a944:	0000a345 	.word	0x0000a345

0000a948 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    a948:	b580      	push	{r7, lr}
    a94a:	b082      	sub	sp, #8
    a94c:	af00      	add	r7, sp, #0
    a94e:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    a950:	bf00      	nop
    a952:	2103      	movs	r1, #3
    a954:	6878      	ldr	r0, [r7, #4]
    a956:	4b06      	ldr	r3, [pc, #24]	; (a970 <_spi_wait_bus_idle+0x28>)
    a958:	4798      	blx	r3
    a95a:	4603      	mov	r3, r0
    a95c:	2b00      	cmp	r3, #0
    a95e:	d0f8      	beq.n	a952 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    a960:	2103      	movs	r1, #3
    a962:	6878      	ldr	r0, [r7, #4]
    a964:	4b03      	ldr	r3, [pc, #12]	; (a974 <_spi_wait_bus_idle+0x2c>)
    a966:	4798      	blx	r3
}
    a968:	bf00      	nop
    a96a:	3708      	adds	r7, #8
    a96c:	46bd      	mov	sp, r7
    a96e:	bd80      	pop	{r7, pc}
    a970:	000092cd 	.word	0x000092cd
    a974:	0000930f 	.word	0x0000930f

0000a978 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    a978:	b580      	push	{r7, lr}
    a97a:	b086      	sub	sp, #24
    a97c:	af00      	add	r7, sp, #0
    a97e:	60f8      	str	r0, [r7, #12]
    a980:	60b9      	str	r1, [r7, #8]
    a982:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    a984:	68bb      	ldr	r3, [r7, #8]
    a986:	f003 0304 	and.w	r3, r3, #4
    a98a:	2b00      	cmp	r3, #0
    a98c:	d101      	bne.n	a992 <_spi_rx_check_and_receive+0x1a>
		return false;
    a98e:	2300      	movs	r3, #0
    a990:	e022      	b.n	a9d8 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    a992:	68f8      	ldr	r0, [r7, #12]
    a994:	4b12      	ldr	r3, [pc, #72]	; (a9e0 <_spi_rx_check_and_receive+0x68>)
    a996:	4798      	blx	r3
    a998:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    a99a:	687b      	ldr	r3, [r7, #4]
    a99c:	685b      	ldr	r3, [r3, #4]
    a99e:	2b00      	cmp	r3, #0
    a9a0:	d014      	beq.n	a9cc <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    a9a2:	687b      	ldr	r3, [r7, #4]
    a9a4:	685b      	ldr	r3, [r3, #4]
    a9a6:	1c59      	adds	r1, r3, #1
    a9a8:	687a      	ldr	r2, [r7, #4]
    a9aa:	6051      	str	r1, [r2, #4]
    a9ac:	697a      	ldr	r2, [r7, #20]
    a9ae:	b2d2      	uxtb	r2, r2
    a9b0:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    a9b2:	687b      	ldr	r3, [r7, #4]
    a9b4:	7c1b      	ldrb	r3, [r3, #16]
    a9b6:	2b01      	cmp	r3, #1
    a9b8:	d908      	bls.n	a9cc <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    a9ba:	687b      	ldr	r3, [r7, #4]
    a9bc:	685b      	ldr	r3, [r3, #4]
    a9be:	1c59      	adds	r1, r3, #1
    a9c0:	687a      	ldr	r2, [r7, #4]
    a9c2:	6051      	str	r1, [r2, #4]
    a9c4:	697a      	ldr	r2, [r7, #20]
    a9c6:	0a12      	lsrs	r2, r2, #8
    a9c8:	b2d2      	uxtb	r2, r2
    a9ca:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    a9cc:	687b      	ldr	r3, [r7, #4]
    a9ce:	68db      	ldr	r3, [r3, #12]
    a9d0:	1c5a      	adds	r2, r3, #1
    a9d2:	687b      	ldr	r3, [r7, #4]
    a9d4:	60da      	str	r2, [r3, #12]

	return true;
    a9d6:	2301      	movs	r3, #1
}
    a9d8:	4618      	mov	r0, r3
    a9da:	3718      	adds	r7, #24
    a9dc:	46bd      	mov	sp, r7
    a9de:	bd80      	pop	{r7, pc}
    a9e0:	0000987d 	.word	0x0000987d

0000a9e4 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    a9e4:	b580      	push	{r7, lr}
    a9e6:	b086      	sub	sp, #24
    a9e8:	af00      	add	r7, sp, #0
    a9ea:	60f8      	str	r0, [r7, #12]
    a9ec:	60b9      	str	r1, [r7, #8]
    a9ee:	607a      	str	r2, [r7, #4]
    a9f0:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    a9f2:	68bb      	ldr	r3, [r7, #8]
    a9f4:	f003 0301 	and.w	r3, r3, #1
    a9f8:	2b00      	cmp	r3, #0
    a9fa:	d028      	beq.n	aa4e <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    a9fc:	687b      	ldr	r3, [r7, #4]
    a9fe:	681b      	ldr	r3, [r3, #0]
    aa00:	2b00      	cmp	r3, #0
    aa02:	d018      	beq.n	aa36 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    aa04:	687b      	ldr	r3, [r7, #4]
    aa06:	681b      	ldr	r3, [r3, #0]
    aa08:	1c59      	adds	r1, r3, #1
    aa0a:	687a      	ldr	r2, [r7, #4]
    aa0c:	6011      	str	r1, [r2, #0]
    aa0e:	781b      	ldrb	r3, [r3, #0]
    aa10:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    aa12:	687b      	ldr	r3, [r7, #4]
    aa14:	7c1b      	ldrb	r3, [r3, #16]
    aa16:	2b01      	cmp	r3, #1
    aa18:	d90f      	bls.n	aa3a <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    aa1a:	687b      	ldr	r3, [r7, #4]
    aa1c:	681b      	ldr	r3, [r3, #0]
    aa1e:	781b      	ldrb	r3, [r3, #0]
    aa20:	021b      	lsls	r3, r3, #8
    aa22:	461a      	mov	r2, r3
    aa24:	697b      	ldr	r3, [r7, #20]
    aa26:	4313      	orrs	r3, r2
    aa28:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    aa2a:	687b      	ldr	r3, [r7, #4]
    aa2c:	681b      	ldr	r3, [r3, #0]
    aa2e:	1c5a      	adds	r2, r3, #1
    aa30:	687b      	ldr	r3, [r7, #4]
    aa32:	601a      	str	r2, [r3, #0]
    aa34:	e001      	b.n	aa3a <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    aa36:	887b      	ldrh	r3, [r7, #2]
    aa38:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    aa3a:	687b      	ldr	r3, [r7, #4]
    aa3c:	689b      	ldr	r3, [r3, #8]
    aa3e:	1c5a      	adds	r2, r3, #1
    aa40:	687b      	ldr	r3, [r7, #4]
    aa42:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    aa44:	6979      	ldr	r1, [r7, #20]
    aa46:	68f8      	ldr	r0, [r7, #12]
    aa48:	4b03      	ldr	r3, [pc, #12]	; (aa58 <_spi_tx_check_and_send+0x74>)
    aa4a:	4798      	blx	r3
    aa4c:	e000      	b.n	aa50 <_spi_tx_check_and_send+0x6c>
		return;
    aa4e:	bf00      	nop
}
    aa50:	3718      	adds	r7, #24
    aa52:	46bd      	mov	sp, r7
    aa54:	bd80      	pop	{r7, pc}
    aa56:	bf00      	nop
    aa58:	00009861 	.word	0x00009861

0000aa5c <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    aa5c:	b580      	push	{r7, lr}
    aa5e:	b082      	sub	sp, #8
    aa60:	af00      	add	r7, sp, #0
    aa62:	6078      	str	r0, [r7, #4]
    aa64:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    aa66:	687b      	ldr	r3, [r7, #4]
    aa68:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aa6c:	2b00      	cmp	r3, #0
    aa6e:	d00b      	beq.n	aa88 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    aa70:	f64f 71ff 	movw	r1, #65535	; 0xffff
    aa74:	6838      	ldr	r0, [r7, #0]
    aa76:	4b07      	ldr	r3, [pc, #28]	; (aa94 <_spi_err_check+0x38>)
    aa78:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    aa7a:	2180      	movs	r1, #128	; 0x80
    aa7c:	6838      	ldr	r0, [r7, #0]
    aa7e:	4b06      	ldr	r3, [pc, #24]	; (aa98 <_spi_err_check+0x3c>)
    aa80:	4798      	blx	r3
		return ERR_OVERFLOW;
    aa82:	f06f 0312 	mvn.w	r3, #18
    aa86:	e000      	b.n	aa8a <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    aa88:	2300      	movs	r3, #0
}
    aa8a:	4618      	mov	r0, r3
    aa8c:	3708      	adds	r7, #8
    aa8e:	46bd      	mov	sp, r7
    aa90:	bd80      	pop	{r7, pc}
    aa92:	bf00      	nop
    aa94:	000098b5 	.word	0x000098b5
    aa98:	0000930f 	.word	0x0000930f

0000aa9c <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    aa9c:	b590      	push	{r4, r7, lr}
    aa9e:	b08b      	sub	sp, #44	; 0x2c
    aaa0:	af00      	add	r7, sp, #0
    aaa2:	6078      	str	r0, [r7, #4]
    aaa4:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    aaa6:	687b      	ldr	r3, [r7, #4]
    aaa8:	681b      	ldr	r3, [r3, #0]
    aaaa:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    aaac:	2300      	movs	r3, #0
    aaae:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    aab0:	683b      	ldr	r3, [r7, #0]
    aab2:	681b      	ldr	r3, [r3, #0]
    aab4:	60bb      	str	r3, [r7, #8]
    aab6:	683b      	ldr	r3, [r7, #0]
    aab8:	685b      	ldr	r3, [r3, #4]
    aaba:	60fb      	str	r3, [r7, #12]
    aabc:	2300      	movs	r3, #0
    aabe:	613b      	str	r3, [r7, #16]
    aac0:	2300      	movs	r3, #0
    aac2:	617b      	str	r3, [r7, #20]
    aac4:	687b      	ldr	r3, [r7, #4]
    aac6:	791b      	ldrb	r3, [r3, #4]
    aac8:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    aaca:	687b      	ldr	r3, [r7, #4]
    aacc:	2b00      	cmp	r3, #0
    aace:	d004      	beq.n	aada <_spi_m_sync_trans+0x3e>
    aad0:	6a3b      	ldr	r3, [r7, #32]
    aad2:	2b00      	cmp	r3, #0
    aad4:	d001      	beq.n	aada <_spi_m_sync_trans+0x3e>
    aad6:	2301      	movs	r3, #1
    aad8:	e000      	b.n	aadc <_spi_m_sync_trans+0x40>
    aada:	2300      	movs	r3, #0
    aadc:	f003 0301 	and.w	r3, r3, #1
    aae0:	b2db      	uxtb	r3, r3
    aae2:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    aae6:	492b      	ldr	r1, [pc, #172]	; (ab94 <_spi_m_sync_trans+0xf8>)
    aae8:	4618      	mov	r0, r3
    aaea:	4b2b      	ldr	r3, [pc, #172]	; (ab98 <_spi_m_sync_trans+0xfc>)
    aaec:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    aaee:	2107      	movs	r1, #7
    aaf0:	6a38      	ldr	r0, [r7, #32]
    aaf2:	4b2a      	ldr	r3, [pc, #168]	; (ab9c <_spi_m_sync_trans+0x100>)
    aaf4:	4798      	blx	r3
    aaf6:	4603      	mov	r3, r0
    aaf8:	2b00      	cmp	r3, #0
    aafa:	d002      	beq.n	ab02 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    aafc:	f06f 0303 	mvn.w	r3, #3
    ab00:	e043      	b.n	ab8a <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    ab02:	6a38      	ldr	r0, [r7, #32]
    ab04:	4b26      	ldr	r3, [pc, #152]	; (aba0 <_spi_m_sync_trans+0x104>)
    ab06:	4798      	blx	r3
    ab08:	4603      	mov	r3, r0
    ab0a:	f083 0301 	eor.w	r3, r3, #1
    ab0e:	b2db      	uxtb	r3, r3
    ab10:	2b00      	cmp	r3, #0
    ab12:	d002      	beq.n	ab1a <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    ab14:	f06f 0313 	mvn.w	r3, #19
    ab18:	e037      	b.n	ab8a <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    ab1a:	6a38      	ldr	r0, [r7, #32]
    ab1c:	4b21      	ldr	r3, [pc, #132]	; (aba4 <_spi_m_sync_trans+0x108>)
    ab1e:	4798      	blx	r3
    ab20:	4603      	mov	r3, r0
    ab22:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    ab24:	f107 0308 	add.w	r3, r7, #8
    ab28:	461a      	mov	r2, r3
    ab2a:	69f9      	ldr	r1, [r7, #28]
    ab2c:	6a38      	ldr	r0, [r7, #32]
    ab2e:	4b1e      	ldr	r3, [pc, #120]	; (aba8 <_spi_m_sync_trans+0x10c>)
    ab30:	4798      	blx	r3
    ab32:	4603      	mov	r3, r0
    ab34:	f083 0301 	eor.w	r3, r3, #1
    ab38:	b2db      	uxtb	r3, r3
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	d00b      	beq.n	ab56 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    ab3e:	697a      	ldr	r2, [r7, #20]
    ab40:	693b      	ldr	r3, [r7, #16]
    ab42:	429a      	cmp	r2, r3
    ab44:	d307      	bcc.n	ab56 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    ab46:	687b      	ldr	r3, [r7, #4]
    ab48:	88db      	ldrh	r3, [r3, #6]
    ab4a:	f107 0208 	add.w	r2, r7, #8
    ab4e:	69f9      	ldr	r1, [r7, #28]
    ab50:	6a38      	ldr	r0, [r7, #32]
    ab52:	4c16      	ldr	r4, [pc, #88]	; (abac <_spi_m_sync_trans+0x110>)
    ab54:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    ab56:	6a39      	ldr	r1, [r7, #32]
    ab58:	69f8      	ldr	r0, [r7, #28]
    ab5a:	4b15      	ldr	r3, [pc, #84]	; (abb0 <_spi_m_sync_trans+0x114>)
    ab5c:	4798      	blx	r3
    ab5e:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ab62:	2b00      	cmp	r3, #0
    ab64:	db0c      	blt.n	ab80 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    ab66:	693a      	ldr	r2, [r7, #16]
    ab68:	683b      	ldr	r3, [r7, #0]
    ab6a:	689b      	ldr	r3, [r3, #8]
    ab6c:	429a      	cmp	r2, r3
    ab6e:	d3d4      	bcc.n	ab1a <_spi_m_sync_trans+0x7e>
    ab70:	697a      	ldr	r2, [r7, #20]
    ab72:	683b      	ldr	r3, [r7, #0]
    ab74:	689b      	ldr	r3, [r3, #8]
    ab76:	429a      	cmp	r2, r3
    ab78:	d3cf      	bcc.n	ab1a <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    ab7a:	693b      	ldr	r3, [r7, #16]
    ab7c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    ab7e:	e000      	b.n	ab82 <_spi_m_sync_trans+0xe6>
			break;
    ab80:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    ab82:	6a38      	ldr	r0, [r7, #32]
    ab84:	4b0b      	ldr	r3, [pc, #44]	; (abb4 <_spi_m_sync_trans+0x118>)
    ab86:	4798      	blx	r3

	return rc;
    ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ab8a:	4618      	mov	r0, r3
    ab8c:	372c      	adds	r7, #44	; 0x2c
    ab8e:	46bd      	mov	sp, r7
    ab90:	bd90      	pop	{r4, r7, pc}
    ab92:	bf00      	nop
    ab94:	00018644 	.word	0x00018644
    ab98:	000065d9 	.word	0x000065d9
    ab9c:	00009239 	.word	0x00009239
    aba0:	00009575 	.word	0x00009575
    aba4:	000092f5 	.word	0x000092f5
    aba8:	0000a979 	.word	0x0000a979
    abac:	0000a9e5 	.word	0x0000a9e5
    abb0:	0000aa5d 	.word	0x0000aa5d
    abb4:	0000a949 	.word	0x0000a949

0000abb8 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    abb8:	b580      	push	{r7, lr}
    abba:	b084      	sub	sp, #16
    abbc:	af00      	add	r7, sp, #0
    abbe:	6078      	str	r0, [r7, #4]
    abc0:	460b      	mov	r3, r1
    abc2:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    abc4:	687b      	ldr	r3, [r7, #4]
    abc6:	681b      	ldr	r3, [r3, #0]
    abc8:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    abca:	687b      	ldr	r3, [r7, #4]
    abcc:	2b00      	cmp	r3, #0
    abce:	d004      	beq.n	abda <_spi_m_async_enable_tx+0x22>
    abd0:	68fb      	ldr	r3, [r7, #12]
    abd2:	2b00      	cmp	r3, #0
    abd4:	d001      	beq.n	abda <_spi_m_async_enable_tx+0x22>
    abd6:	2301      	movs	r3, #1
    abd8:	e000      	b.n	abdc <_spi_m_async_enable_tx+0x24>
    abda:	2300      	movs	r3, #0
    abdc:	f003 0301 	and.w	r3, r3, #1
    abe0:	b2db      	uxtb	r3, r3
    abe2:	f640 327c 	movw	r2, #2940	; 0xb7c
    abe6:	4909      	ldr	r1, [pc, #36]	; (ac0c <_spi_m_async_enable_tx+0x54>)
    abe8:	4618      	mov	r0, r3
    abea:	4b09      	ldr	r3, [pc, #36]	; (ac10 <_spi_m_async_enable_tx+0x58>)
    abec:	4798      	blx	r3

	if (state) {
    abee:	78fb      	ldrb	r3, [r7, #3]
    abf0:	2b00      	cmp	r3, #0
    abf2:	d003      	beq.n	abfc <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    abf4:	68f8      	ldr	r0, [r7, #12]
    abf6:	4b07      	ldr	r3, [pc, #28]	; (ac14 <_spi_m_async_enable_tx+0x5c>)
    abf8:	4798      	blx	r3
    abfa:	e002      	b.n	ac02 <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    abfc:	68f8      	ldr	r0, [r7, #12]
    abfe:	4b06      	ldr	r3, [pc, #24]	; (ac18 <_spi_m_async_enable_tx+0x60>)
    ac00:	4798      	blx	r3
	}

	return ERR_NONE;
    ac02:	2300      	movs	r3, #0
}
    ac04:	4618      	mov	r0, r3
    ac06:	3710      	adds	r7, #16
    ac08:	46bd      	mov	sp, r7
    ac0a:	bd80      	pop	{r7, pc}
    ac0c:	00018644 	.word	0x00018644
    ac10:	000065d9 	.word	0x000065d9
    ac14:	000093c3 	.word	0x000093c3
    ac18:	000093dd 	.word	0x000093dd

0000ac1c <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    ac1c:	b580      	push	{r7, lr}
    ac1e:	b084      	sub	sp, #16
    ac20:	af00      	add	r7, sp, #0
    ac22:	6078      	str	r0, [r7, #4]
    ac24:	460b      	mov	r3, r1
    ac26:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    ac28:	687b      	ldr	r3, [r7, #4]
    ac2a:	681b      	ldr	r3, [r3, #0]
    ac2c:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    ac2e:	687b      	ldr	r3, [r7, #4]
    ac30:	2b00      	cmp	r3, #0
    ac32:	bf14      	ite	ne
    ac34:	2301      	movne	r3, #1
    ac36:	2300      	moveq	r3, #0
    ac38:	b2db      	uxtb	r3, r3
    ac3a:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    ac3e:	490f      	ldr	r1, [pc, #60]	; (ac7c <_spi_m_async_enable_rx+0x60>)
    ac40:	4618      	mov	r0, r3
    ac42:	4b0f      	ldr	r3, [pc, #60]	; (ac80 <_spi_m_async_enable_rx+0x64>)
    ac44:	4798      	blx	r3
	ASSERT(hw);
    ac46:	68fb      	ldr	r3, [r7, #12]
    ac48:	2b00      	cmp	r3, #0
    ac4a:	bf14      	ite	ne
    ac4c:	2301      	movne	r3, #1
    ac4e:	2300      	moveq	r3, #0
    ac50:	b2db      	uxtb	r3, r3
    ac52:	f640 3291 	movw	r2, #2961	; 0xb91
    ac56:	4909      	ldr	r1, [pc, #36]	; (ac7c <_spi_m_async_enable_rx+0x60>)
    ac58:	4618      	mov	r0, r3
    ac5a:	4b09      	ldr	r3, [pc, #36]	; (ac80 <_spi_m_async_enable_rx+0x64>)
    ac5c:	4798      	blx	r3

	if (state) {
    ac5e:	78fb      	ldrb	r3, [r7, #3]
    ac60:	2b00      	cmp	r3, #0
    ac62:	d003      	beq.n	ac6c <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    ac64:	68f8      	ldr	r0, [r7, #12]
    ac66:	4b07      	ldr	r3, [pc, #28]	; (ac84 <_spi_m_async_enable_rx+0x68>)
    ac68:	4798      	blx	r3
    ac6a:	e002      	b.n	ac72 <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    ac6c:	68f8      	ldr	r0, [r7, #12]
    ac6e:	4b06      	ldr	r3, [pc, #24]	; (ac88 <_spi_m_async_enable_rx+0x6c>)
    ac70:	4798      	blx	r3
	}

	return ERR_NONE;
    ac72:	2300      	movs	r3, #0
}
    ac74:	4618      	mov	r0, r3
    ac76:	3710      	adds	r7, #16
    ac78:	46bd      	mov	sp, r7
    ac7a:	bd80      	pop	{r7, pc}
    ac7c:	00018644 	.word	0x00018644
    ac80:	000065d9 	.word	0x000065d9
    ac84:	0000942b 	.word	0x0000942b
    ac88:	00009445 	.word	0x00009445

0000ac8c <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    ac8c:	b580      	push	{r7, lr}
    ac8e:	b082      	sub	sp, #8
    ac90:	af00      	add	r7, sp, #0
    ac92:	6078      	str	r0, [r7, #4]
    ac94:	460b      	mov	r3, r1
    ac96:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    ac98:	687b      	ldr	r3, [r7, #4]
    ac9a:	2b00      	cmp	r3, #0
    ac9c:	d005      	beq.n	acaa <_spi_m_async_enable_tx_complete+0x1e>
    ac9e:	687b      	ldr	r3, [r7, #4]
    aca0:	681b      	ldr	r3, [r3, #0]
    aca2:	2b00      	cmp	r3, #0
    aca4:	d001      	beq.n	acaa <_spi_m_async_enable_tx_complete+0x1e>
    aca6:	2301      	movs	r3, #1
    aca8:	e000      	b.n	acac <_spi_m_async_enable_tx_complete+0x20>
    acaa:	2300      	movs	r3, #0
    acac:	f003 0301 	and.w	r3, r3, #1
    acb0:	b2db      	uxtb	r3, r3
    acb2:	f640 32a3 	movw	r2, #2979	; 0xba3
    acb6:	490b      	ldr	r1, [pc, #44]	; (ace4 <_spi_m_async_enable_tx_complete+0x58>)
    acb8:	4618      	mov	r0, r3
    acba:	4b0b      	ldr	r3, [pc, #44]	; (ace8 <_spi_m_async_enable_tx_complete+0x5c>)
    acbc:	4798      	blx	r3

	if (state) {
    acbe:	78fb      	ldrb	r3, [r7, #3]
    acc0:	2b00      	cmp	r3, #0
    acc2:	d005      	beq.n	acd0 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    acc4:	687b      	ldr	r3, [r7, #4]
    acc6:	681b      	ldr	r3, [r3, #0]
    acc8:	4618      	mov	r0, r3
    acca:	4b08      	ldr	r3, [pc, #32]	; (acec <_spi_m_async_enable_tx_complete+0x60>)
    accc:	4798      	blx	r3
    acce:	e004      	b.n	acda <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    acd0:	687b      	ldr	r3, [r7, #4]
    acd2:	681b      	ldr	r3, [r3, #0]
    acd4:	4618      	mov	r0, r3
    acd6:	4b06      	ldr	r3, [pc, #24]	; (acf0 <_spi_m_async_enable_tx_complete+0x64>)
    acd8:	4798      	blx	r3
	}

	return ERR_NONE;
    acda:	2300      	movs	r3, #0
}
    acdc:	4618      	mov	r0, r3
    acde:	3708      	adds	r7, #8
    ace0:	46bd      	mov	sp, r7
    ace2:	bd80      	pop	{r7, pc}
    ace4:	00018644 	.word	0x00018644
    ace8:	000065d9 	.word	0x000065d9
    acec:	000093f7 	.word	0x000093f7
    acf0:	00009411 	.word	0x00009411

0000acf4 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    acf4:	b580      	push	{r7, lr}
    acf6:	b082      	sub	sp, #8
    acf8:	af00      	add	r7, sp, #0
    acfa:	6078      	str	r0, [r7, #4]
    acfc:	460b      	mov	r3, r1
    acfe:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    ad00:	687b      	ldr	r3, [r7, #4]
    ad02:	2b00      	cmp	r3, #0
    ad04:	d005      	beq.n	ad12 <_spi_m_async_write_one+0x1e>
    ad06:	687b      	ldr	r3, [r7, #4]
    ad08:	681b      	ldr	r3, [r3, #0]
    ad0a:	2b00      	cmp	r3, #0
    ad0c:	d001      	beq.n	ad12 <_spi_m_async_write_one+0x1e>
    ad0e:	2301      	movs	r3, #1
    ad10:	e000      	b.n	ad14 <_spi_m_async_write_one+0x20>
    ad12:	2300      	movs	r3, #0
    ad14:	f003 0301 	and.w	r3, r3, #1
    ad18:	b2db      	uxtb	r3, r3
    ad1a:	f640 32b5 	movw	r2, #2997	; 0xbb5
    ad1e:	4908      	ldr	r1, [pc, #32]	; (ad40 <_spi_m_async_write_one+0x4c>)
    ad20:	4618      	mov	r0, r3
    ad22:	4b08      	ldr	r3, [pc, #32]	; (ad44 <_spi_m_async_write_one+0x50>)
    ad24:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    ad26:	687b      	ldr	r3, [r7, #4]
    ad28:	681b      	ldr	r3, [r3, #0]
    ad2a:	887a      	ldrh	r2, [r7, #2]
    ad2c:	4611      	mov	r1, r2
    ad2e:	4618      	mov	r0, r3
    ad30:	4b05      	ldr	r3, [pc, #20]	; (ad48 <_spi_m_async_write_one+0x54>)
    ad32:	4798      	blx	r3

	return ERR_NONE;
    ad34:	2300      	movs	r3, #0
}
    ad36:	4618      	mov	r0, r3
    ad38:	3708      	adds	r7, #8
    ad3a:	46bd      	mov	sp, r7
    ad3c:	bd80      	pop	{r7, pc}
    ad3e:	bf00      	nop
    ad40:	00018644 	.word	0x00018644
    ad44:	000065d9 	.word	0x000065d9
    ad48:	00009861 	.word	0x00009861

0000ad4c <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    ad4c:	b580      	push	{r7, lr}
    ad4e:	b082      	sub	sp, #8
    ad50:	af00      	add	r7, sp, #0
    ad52:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    ad54:	687b      	ldr	r3, [r7, #4]
    ad56:	2b00      	cmp	r3, #0
    ad58:	d005      	beq.n	ad66 <_spi_m_async_read_one+0x1a>
    ad5a:	687b      	ldr	r3, [r7, #4]
    ad5c:	681b      	ldr	r3, [r3, #0]
    ad5e:	2b00      	cmp	r3, #0
    ad60:	d001      	beq.n	ad66 <_spi_m_async_read_one+0x1a>
    ad62:	2301      	movs	r3, #1
    ad64:	e000      	b.n	ad68 <_spi_m_async_read_one+0x1c>
    ad66:	2300      	movs	r3, #0
    ad68:	f003 0301 	and.w	r3, r3, #1
    ad6c:	b2db      	uxtb	r3, r3
    ad6e:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
    ad72:	4907      	ldr	r1, [pc, #28]	; (ad90 <_spi_m_async_read_one+0x44>)
    ad74:	4618      	mov	r0, r3
    ad76:	4b07      	ldr	r3, [pc, #28]	; (ad94 <_spi_m_async_read_one+0x48>)
    ad78:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    ad7a:	687b      	ldr	r3, [r7, #4]
    ad7c:	681b      	ldr	r3, [r3, #0]
    ad7e:	4618      	mov	r0, r3
    ad80:	4b05      	ldr	r3, [pc, #20]	; (ad98 <_spi_m_async_read_one+0x4c>)
    ad82:	4798      	blx	r3
    ad84:	4603      	mov	r3, r0
    ad86:	b29b      	uxth	r3, r3
}
    ad88:	4618      	mov	r0, r3
    ad8a:	3708      	adds	r7, #8
    ad8c:	46bd      	mov	sp, r7
    ad8e:	bd80      	pop	{r7, pc}
    ad90:	00018644 	.word	0x00018644
    ad94:	000065d9 	.word	0x000065d9
    ad98:	0000987d 	.word	0x0000987d

0000ad9c <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    ad9c:	b580      	push	{r7, lr}
    ad9e:	b086      	sub	sp, #24
    ada0:	af00      	add	r7, sp, #0
    ada2:	60f8      	str	r0, [r7, #12]
    ada4:	460b      	mov	r3, r1
    ada6:	607a      	str	r2, [r7, #4]
    ada8:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    adaa:	68fb      	ldr	r3, [r7, #12]
    adac:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    adae:	68fb      	ldr	r3, [r7, #12]
    adb0:	2b00      	cmp	r3, #0
    adb2:	d004      	beq.n	adbe <_spi_m_async_register_callback+0x22>
    adb4:	7afb      	ldrb	r3, [r7, #11]
    adb6:	2b03      	cmp	r3, #3
    adb8:	d801      	bhi.n	adbe <_spi_m_async_register_callback+0x22>
    adba:	2301      	movs	r3, #1
    adbc:	e000      	b.n	adc0 <_spi_m_async_register_callback+0x24>
    adbe:	2300      	movs	r3, #0
    adc0:	f003 0301 	and.w	r3, r3, #1
    adc4:	b2db      	uxtb	r3, r3
    adc6:	f640 32e9 	movw	r2, #3049	; 0xbe9
    adca:	4909      	ldr	r1, [pc, #36]	; (adf0 <_spi_m_async_register_callback+0x54>)
    adcc:	4618      	mov	r0, r3
    adce:	4b09      	ldr	r3, [pc, #36]	; (adf4 <_spi_m_async_register_callback+0x58>)
    add0:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    add2:	697b      	ldr	r3, [r7, #20]
    add4:	3308      	adds	r3, #8
    add6:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    add8:	7afb      	ldrb	r3, [r7, #11]
    adda:	009b      	lsls	r3, r3, #2
    addc:	693a      	ldr	r2, [r7, #16]
    adde:	4413      	add	r3, r2
    ade0:	687a      	ldr	r2, [r7, #4]
    ade2:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    ade4:	2300      	movs	r3, #0
}
    ade6:	4618      	mov	r0, r3
    ade8:	3718      	adds	r7, #24
    adea:	46bd      	mov	sp, r7
    adec:	bd80      	pop	{r7, pc}
    adee:	bf00      	nop
    adf0:	00018644 	.word	0x00018644
    adf4:	000065d9 	.word	0x000065d9

0000adf8 <__NVIC_EnableIRQ>:
{
    adf8:	b480      	push	{r7}
    adfa:	b083      	sub	sp, #12
    adfc:	af00      	add	r7, sp, #0
    adfe:	4603      	mov	r3, r0
    ae00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ae02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ae06:	2b00      	cmp	r3, #0
    ae08:	db0b      	blt.n	ae22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ae0a:	4909      	ldr	r1, [pc, #36]	; (ae30 <__NVIC_EnableIRQ+0x38>)
    ae0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ae10:	095b      	lsrs	r3, r3, #5
    ae12:	88fa      	ldrh	r2, [r7, #6]
    ae14:	f002 021f 	and.w	r2, r2, #31
    ae18:	2001      	movs	r0, #1
    ae1a:	fa00 f202 	lsl.w	r2, r0, r2
    ae1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ae22:	bf00      	nop
    ae24:	370c      	adds	r7, #12
    ae26:	46bd      	mov	sp, r7
    ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae2c:	4770      	bx	lr
    ae2e:	bf00      	nop
    ae30:	e000e100 	.word	0xe000e100

0000ae34 <__NVIC_DisableIRQ>:
{
    ae34:	b480      	push	{r7}
    ae36:	b083      	sub	sp, #12
    ae38:	af00      	add	r7, sp, #0
    ae3a:	4603      	mov	r3, r0
    ae3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ae3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ae42:	2b00      	cmp	r3, #0
    ae44:	db10      	blt.n	ae68 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ae46:	490b      	ldr	r1, [pc, #44]	; (ae74 <__NVIC_DisableIRQ+0x40>)
    ae48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ae4c:	095b      	lsrs	r3, r3, #5
    ae4e:	88fa      	ldrh	r2, [r7, #6]
    ae50:	f002 021f 	and.w	r2, r2, #31
    ae54:	2001      	movs	r0, #1
    ae56:	fa00 f202 	lsl.w	r2, r0, r2
    ae5a:	3320      	adds	r3, #32
    ae5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    ae60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ae64:	f3bf 8f6f 	isb	sy
}
    ae68:	bf00      	nop
    ae6a:	370c      	adds	r7, #12
    ae6c:	46bd      	mov	sp, r7
    ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae72:	4770      	bx	lr
    ae74:	e000e100 	.word	0xe000e100

0000ae78 <__NVIC_ClearPendingIRQ>:
{
    ae78:	b480      	push	{r7}
    ae7a:	b083      	sub	sp, #12
    ae7c:	af00      	add	r7, sp, #0
    ae7e:	4603      	mov	r3, r0
    ae80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ae82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ae86:	2b00      	cmp	r3, #0
    ae88:	db0c      	blt.n	aea4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ae8a:	4909      	ldr	r1, [pc, #36]	; (aeb0 <__NVIC_ClearPendingIRQ+0x38>)
    ae8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ae90:	095b      	lsrs	r3, r3, #5
    ae92:	88fa      	ldrh	r2, [r7, #6]
    ae94:	f002 021f 	and.w	r2, r2, #31
    ae98:	2001      	movs	r0, #1
    ae9a:	fa00 f202 	lsl.w	r2, r0, r2
    ae9e:	3360      	adds	r3, #96	; 0x60
    aea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aea4:	bf00      	nop
    aea6:	370c      	adds	r7, #12
    aea8:	46bd      	mov	sp, r7
    aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    aeae:	4770      	bx	lr
    aeb0:	e000e100 	.word	0xe000e100

0000aeb4 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    aeb4:	b480      	push	{r7}
    aeb6:	b083      	sub	sp, #12
    aeb8:	af00      	add	r7, sp, #0
    aeba:	6078      	str	r0, [r7, #4]
    aebc:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    aebe:	bf00      	nop
    aec0:	687b      	ldr	r3, [r7, #4]
    aec2:	691a      	ldr	r2, [r3, #16]
    aec4:	683b      	ldr	r3, [r7, #0]
    aec6:	4013      	ands	r3, r2
    aec8:	2b00      	cmp	r3, #0
    aeca:	d1f9      	bne.n	aec0 <hri_tc_wait_for_sync+0xc>
	};
}
    aecc:	bf00      	nop
    aece:	370c      	adds	r7, #12
    aed0:	46bd      	mov	sp, r7
    aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aed6:	4770      	bx	lr

0000aed8 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    aed8:	b480      	push	{r7}
    aeda:	b083      	sub	sp, #12
    aedc:	af00      	add	r7, sp, #0
    aede:	6078      	str	r0, [r7, #4]
    aee0:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    aee2:	687b      	ldr	r3, [r7, #4]
    aee4:	691a      	ldr	r2, [r3, #16]
    aee6:	683b      	ldr	r3, [r7, #0]
    aee8:	4013      	ands	r3, r2
    aeea:	2b00      	cmp	r3, #0
    aeec:	bf14      	ite	ne
    aeee:	2301      	movne	r3, #1
    aef0:	2300      	moveq	r3, #0
    aef2:	b2db      	uxtb	r3, r3
}
    aef4:	4618      	mov	r0, r3
    aef6:	370c      	adds	r7, #12
    aef8:	46bd      	mov	sp, r7
    aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
    aefe:	4770      	bx	lr

0000af00 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    af00:	b480      	push	{r7}
    af02:	b083      	sub	sp, #12
    af04:	af00      	add	r7, sp, #0
    af06:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    af08:	687b      	ldr	r3, [r7, #4]
    af0a:	7a9b      	ldrb	r3, [r3, #10]
    af0c:	b2db      	uxtb	r3, r3
    af0e:	f003 0301 	and.w	r3, r3, #1
    af12:	2b00      	cmp	r3, #0
    af14:	bf14      	ite	ne
    af16:	2301      	movne	r3, #1
    af18:	2300      	moveq	r3, #0
    af1a:	b2db      	uxtb	r3, r3
}
    af1c:	4618      	mov	r0, r3
    af1e:	370c      	adds	r7, #12
    af20:	46bd      	mov	sp, r7
    af22:	f85d 7b04 	ldr.w	r7, [sp], #4
    af26:	4770      	bx	lr

0000af28 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    af28:	b480      	push	{r7}
    af2a:	b083      	sub	sp, #12
    af2c:	af00      	add	r7, sp, #0
    af2e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    af30:	687b      	ldr	r3, [r7, #4]
    af32:	2201      	movs	r2, #1
    af34:	729a      	strb	r2, [r3, #10]
}
    af36:	bf00      	nop
    af38:	370c      	adds	r7, #12
    af3a:	46bd      	mov	sp, r7
    af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    af40:	4770      	bx	lr

0000af42 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    af42:	b480      	push	{r7}
    af44:	b083      	sub	sp, #12
    af46:	af00      	add	r7, sp, #0
    af48:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    af4a:	687b      	ldr	r3, [r7, #4]
    af4c:	2202      	movs	r2, #2
    af4e:	729a      	strb	r2, [r3, #10]
}
    af50:	bf00      	nop
    af52:	370c      	adds	r7, #12
    af54:	46bd      	mov	sp, r7
    af56:	f85d 7b04 	ldr.w	r7, [sp], #4
    af5a:	4770      	bx	lr

0000af5c <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    af5c:	b480      	push	{r7}
    af5e:	b083      	sub	sp, #12
    af60:	af00      	add	r7, sp, #0
    af62:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    af64:	687b      	ldr	r3, [r7, #4]
    af66:	2201      	movs	r2, #1
    af68:	725a      	strb	r2, [r3, #9]
}
    af6a:	bf00      	nop
    af6c:	370c      	adds	r7, #12
    af6e:	46bd      	mov	sp, r7
    af70:	f85d 7b04 	ldr.w	r7, [sp], #4
    af74:	4770      	bx	lr

0000af76 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    af76:	b480      	push	{r7}
    af78:	b083      	sub	sp, #12
    af7a:	af00      	add	r7, sp, #0
    af7c:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    af7e:	687b      	ldr	r3, [r7, #4]
    af80:	7a5b      	ldrb	r3, [r3, #9]
    af82:	b2db      	uxtb	r3, r3
    af84:	085b      	lsrs	r3, r3, #1
    af86:	f003 0301 	and.w	r3, r3, #1
    af8a:	2b00      	cmp	r3, #0
    af8c:	bf14      	ite	ne
    af8e:	2301      	movne	r3, #1
    af90:	2300      	moveq	r3, #0
    af92:	b2db      	uxtb	r3, r3
}
    af94:	4618      	mov	r0, r3
    af96:	370c      	adds	r7, #12
    af98:	46bd      	mov	sp, r7
    af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    af9e:	4770      	bx	lr

0000afa0 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    afa0:	b580      	push	{r7, lr}
    afa2:	b082      	sub	sp, #8
    afa4:	af00      	add	r7, sp, #0
    afa6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    afa8:	687b      	ldr	r3, [r7, #4]
    afaa:	681b      	ldr	r3, [r3, #0]
    afac:	f043 0202 	orr.w	r2, r3, #2
    afb0:	687b      	ldr	r3, [r7, #4]
    afb2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    afb4:	2103      	movs	r1, #3
    afb6:	6878      	ldr	r0, [r7, #4]
    afb8:	4b02      	ldr	r3, [pc, #8]	; (afc4 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    afba:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    afbc:	bf00      	nop
    afbe:	3708      	adds	r7, #8
    afc0:	46bd      	mov	sp, r7
    afc2:	bd80      	pop	{r7, pc}
    afc4:	0000aeb5 	.word	0x0000aeb5

0000afc8 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    afc8:	b580      	push	{r7, lr}
    afca:	b084      	sub	sp, #16
    afcc:	af00      	add	r7, sp, #0
    afce:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    afd0:	2103      	movs	r1, #3
    afd2:	6878      	ldr	r0, [r7, #4]
    afd4:	4b09      	ldr	r3, [pc, #36]	; (affc <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    afd6:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    afd8:	687b      	ldr	r3, [r7, #4]
    afda:	681b      	ldr	r3, [r3, #0]
    afdc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    afde:	68fb      	ldr	r3, [r7, #12]
    afe0:	085b      	lsrs	r3, r3, #1
    afe2:	f003 0301 	and.w	r3, r3, #1
    afe6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    afe8:	68fb      	ldr	r3, [r7, #12]
    afea:	2b00      	cmp	r3, #0
    afec:	bf14      	ite	ne
    afee:	2301      	movne	r3, #1
    aff0:	2300      	moveq	r3, #0
    aff2:	b2db      	uxtb	r3, r3
}
    aff4:	4618      	mov	r0, r3
    aff6:	3710      	adds	r7, #16
    aff8:	46bd      	mov	sp, r7
    affa:	bd80      	pop	{r7, pc}
    affc:	0000aeb5 	.word	0x0000aeb5

0000b000 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    b000:	b580      	push	{r7, lr}
    b002:	b082      	sub	sp, #8
    b004:	af00      	add	r7, sp, #0
    b006:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    b008:	687b      	ldr	r3, [r7, #4]
    b00a:	681b      	ldr	r3, [r3, #0]
    b00c:	f023 0202 	bic.w	r2, r3, #2
    b010:	687b      	ldr	r3, [r7, #4]
    b012:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b014:	2103      	movs	r1, #3
    b016:	6878      	ldr	r0, [r7, #4]
    b018:	4b02      	ldr	r3, [pc, #8]	; (b024 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    b01a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b01c:	bf00      	nop
    b01e:	3708      	adds	r7, #8
    b020:	46bd      	mov	sp, r7
    b022:	bd80      	pop	{r7, pc}
    b024:	0000aeb5 	.word	0x0000aeb5

0000b028 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    b028:	b580      	push	{r7, lr}
    b02a:	b084      	sub	sp, #16
    b02c:	af00      	add	r7, sp, #0
    b02e:	6078      	str	r0, [r7, #4]
    b030:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b032:	2103      	movs	r1, #3
    b034:	6878      	ldr	r0, [r7, #4]
    b036:	4b07      	ldr	r3, [pc, #28]	; (b054 <hri_tc_get_CTRLA_reg+0x2c>)
    b038:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    b03a:	687b      	ldr	r3, [r7, #4]
    b03c:	681b      	ldr	r3, [r3, #0]
    b03e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    b040:	68fa      	ldr	r2, [r7, #12]
    b042:	683b      	ldr	r3, [r7, #0]
    b044:	4013      	ands	r3, r2
    b046:	60fb      	str	r3, [r7, #12]
	return tmp;
    b048:	68fb      	ldr	r3, [r7, #12]
}
    b04a:	4618      	mov	r0, r3
    b04c:	3710      	adds	r7, #16
    b04e:	46bd      	mov	sp, r7
    b050:	bd80      	pop	{r7, pc}
    b052:	bf00      	nop
    b054:	0000aeb5 	.word	0x0000aeb5

0000b058 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    b058:	b580      	push	{r7, lr}
    b05a:	b082      	sub	sp, #8
    b05c:	af00      	add	r7, sp, #0
    b05e:	6078      	str	r0, [r7, #4]
    b060:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    b062:	687b      	ldr	r3, [r7, #4]
    b064:	683a      	ldr	r2, [r7, #0]
    b066:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b068:	2103      	movs	r1, #3
    b06a:	6878      	ldr	r0, [r7, #4]
    b06c:	4b02      	ldr	r3, [pc, #8]	; (b078 <hri_tc_write_CTRLA_reg+0x20>)
    b06e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b070:	bf00      	nop
    b072:	3708      	adds	r7, #8
    b074:	46bd      	mov	sp, r7
    b076:	bd80      	pop	{r7, pc}
    b078:	0000aeb5 	.word	0x0000aeb5

0000b07c <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    b07c:	b480      	push	{r7}
    b07e:	b083      	sub	sp, #12
    b080:	af00      	add	r7, sp, #0
    b082:	6078      	str	r0, [r7, #4]
    b084:	460b      	mov	r3, r1
    b086:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    b088:	687b      	ldr	r3, [r7, #4]
    b08a:	887a      	ldrh	r2, [r7, #2]
    b08c:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    b08e:	bf00      	nop
    b090:	370c      	adds	r7, #12
    b092:	46bd      	mov	sp, r7
    b094:	f85d 7b04 	ldr.w	r7, [sp], #4
    b098:	4770      	bx	lr

0000b09a <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    b09a:	b480      	push	{r7}
    b09c:	b083      	sub	sp, #12
    b09e:	af00      	add	r7, sp, #0
    b0a0:	6078      	str	r0, [r7, #4]
    b0a2:	460b      	mov	r3, r1
    b0a4:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    b0a6:	687b      	ldr	r3, [r7, #4]
    b0a8:	78fa      	ldrb	r2, [r7, #3]
    b0aa:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    b0ac:	bf00      	nop
    b0ae:	370c      	adds	r7, #12
    b0b0:	46bd      	mov	sp, r7
    b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0b6:	4770      	bx	lr

0000b0b8 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    b0b8:	b480      	push	{r7}
    b0ba:	b083      	sub	sp, #12
    b0bc:	af00      	add	r7, sp, #0
    b0be:	6078      	str	r0, [r7, #4]
    b0c0:	460b      	mov	r3, r1
    b0c2:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    b0c4:	687b      	ldr	r3, [r7, #4]
    b0c6:	78fa      	ldrb	r2, [r7, #3]
    b0c8:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    b0ca:	bf00      	nop
    b0cc:	370c      	adds	r7, #12
    b0ce:	46bd      	mov	sp, r7
    b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0d4:	4770      	bx	lr
	...

0000b0d8 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    b0d8:	b580      	push	{r7, lr}
    b0da:	b082      	sub	sp, #8
    b0dc:	af00      	add	r7, sp, #0
    b0de:	6078      	str	r0, [r7, #4]
    b0e0:	460b      	mov	r3, r1
    b0e2:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    b0e4:	687b      	ldr	r3, [r7, #4]
    b0e6:	78fa      	ldrb	r2, [r7, #3]
    b0e8:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    b0ea:	2120      	movs	r1, #32
    b0ec:	6878      	ldr	r0, [r7, #4]
    b0ee:	4b03      	ldr	r3, [pc, #12]	; (b0fc <hri_tccount8_write_PER_reg+0x24>)
    b0f0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b0f2:	bf00      	nop
    b0f4:	3708      	adds	r7, #8
    b0f6:	46bd      	mov	sp, r7
    b0f8:	bd80      	pop	{r7, pc}
    b0fa:	bf00      	nop
    b0fc:	0000aeb5 	.word	0x0000aeb5

0000b100 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    b100:	b580      	push	{r7, lr}
    b102:	b082      	sub	sp, #8
    b104:	af00      	add	r7, sp, #0
    b106:	6078      	str	r0, [r7, #4]
    b108:	460b      	mov	r3, r1
    b10a:	70fb      	strb	r3, [r7, #3]
    b10c:	4613      	mov	r3, r2
    b10e:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    b110:	78fb      	ldrb	r3, [r7, #3]
    b112:	687a      	ldr	r2, [r7, #4]
    b114:	4413      	add	r3, r2
    b116:	78ba      	ldrb	r2, [r7, #2]
    b118:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    b11a:	21c0      	movs	r1, #192	; 0xc0
    b11c:	6878      	ldr	r0, [r7, #4]
    b11e:	4b03      	ldr	r3, [pc, #12]	; (b12c <hri_tccount8_write_CC_reg+0x2c>)
    b120:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b122:	bf00      	nop
    b124:	3708      	adds	r7, #8
    b126:	46bd      	mov	sp, r7
    b128:	bd80      	pop	{r7, pc}
    b12a:	bf00      	nop
    b12c:	0000aeb5 	.word	0x0000aeb5

0000b130 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    b130:	b580      	push	{r7, lr}
    b132:	b082      	sub	sp, #8
    b134:	af00      	add	r7, sp, #0
    b136:	6078      	str	r0, [r7, #4]
    b138:	460b      	mov	r3, r1
    b13a:	70fb      	strb	r3, [r7, #3]
    b13c:	4613      	mov	r3, r2
    b13e:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    b140:	78fb      	ldrb	r3, [r7, #3]
    b142:	687a      	ldr	r2, [r7, #4]
    b144:	330c      	adds	r3, #12
    b146:	005b      	lsls	r3, r3, #1
    b148:	4413      	add	r3, r2
    b14a:	883a      	ldrh	r2, [r7, #0]
    b14c:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    b14e:	21c0      	movs	r1, #192	; 0xc0
    b150:	6878      	ldr	r0, [r7, #4]
    b152:	4b03      	ldr	r3, [pc, #12]	; (b160 <hri_tccount16_write_CC_reg+0x30>)
    b154:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b156:	bf00      	nop
    b158:	3708      	adds	r7, #8
    b15a:	46bd      	mov	sp, r7
    b15c:	bd80      	pop	{r7, pc}
    b15e:	bf00      	nop
    b160:	0000aeb5 	.word	0x0000aeb5

0000b164 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    b164:	b580      	push	{r7, lr}
    b166:	b084      	sub	sp, #16
    b168:	af00      	add	r7, sp, #0
    b16a:	60f8      	str	r0, [r7, #12]
    b16c:	460b      	mov	r3, r1
    b16e:	607a      	str	r2, [r7, #4]
    b170:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    b172:	7afb      	ldrb	r3, [r7, #11]
    b174:	68fa      	ldr	r2, [r7, #12]
    b176:	3306      	adds	r3, #6
    b178:	009b      	lsls	r3, r3, #2
    b17a:	4413      	add	r3, r2
    b17c:	687a      	ldr	r2, [r7, #4]
    b17e:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    b180:	21c0      	movs	r1, #192	; 0xc0
    b182:	68f8      	ldr	r0, [r7, #12]
    b184:	4b02      	ldr	r3, [pc, #8]	; (b190 <hri_tccount32_write_CC_reg+0x2c>)
    b186:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b188:	bf00      	nop
    b18a:	3710      	adds	r7, #16
    b18c:	46bd      	mov	sp, r7
    b18e:	bd80      	pop	{r7, pc}
    b190:	0000aeb5 	.word	0x0000aeb5

0000b194 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    b194:	b580      	push	{r7, lr}
    b196:	b084      	sub	sp, #16
    b198:	af00      	add	r7, sp, #0
    b19a:	6078      	str	r0, [r7, #4]
    b19c:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    b19e:	6838      	ldr	r0, [r7, #0]
    b1a0:	4b93      	ldr	r3, [pc, #588]	; (b3f0 <_timer_init+0x25c>)
    b1a2:	4798      	blx	r3
    b1a4:	4603      	mov	r3, r0
    b1a6:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    b1a8:	687b      	ldr	r3, [r7, #4]
    b1aa:	683a      	ldr	r2, [r7, #0]
    b1ac:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    b1ae:	2299      	movs	r2, #153	; 0x99
    b1b0:	4990      	ldr	r1, [pc, #576]	; (b3f4 <_timer_init+0x260>)
    b1b2:	2001      	movs	r0, #1
    b1b4:	4b90      	ldr	r3, [pc, #576]	; (b3f8 <_timer_init+0x264>)
    b1b6:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    b1b8:	2101      	movs	r1, #1
    b1ba:	6838      	ldr	r0, [r7, #0]
    b1bc:	4b8f      	ldr	r3, [pc, #572]	; (b3fc <_timer_init+0x268>)
    b1be:	4798      	blx	r3
    b1c0:	4603      	mov	r3, r0
    b1c2:	f083 0301 	eor.w	r3, r3, #1
    b1c6:	b2db      	uxtb	r3, r3
    b1c8:	2b00      	cmp	r3, #0
    b1ca:	d011      	beq.n	b1f0 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    b1cc:	2102      	movs	r1, #2
    b1ce:	6838      	ldr	r0, [r7, #0]
    b1d0:	4b8b      	ldr	r3, [pc, #556]	; (b400 <_timer_init+0x26c>)
    b1d2:	4798      	blx	r3
    b1d4:	4603      	mov	r3, r0
    b1d6:	2b00      	cmp	r3, #0
    b1d8:	d006      	beq.n	b1e8 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    b1da:	6838      	ldr	r0, [r7, #0]
    b1dc:	4b89      	ldr	r3, [pc, #548]	; (b404 <_timer_init+0x270>)
    b1de:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    b1e0:	2102      	movs	r1, #2
    b1e2:	6838      	ldr	r0, [r7, #0]
    b1e4:	4b88      	ldr	r3, [pc, #544]	; (b408 <_timer_init+0x274>)
    b1e6:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    b1e8:	2101      	movs	r1, #1
    b1ea:	6838      	ldr	r0, [r7, #0]
    b1ec:	4b87      	ldr	r3, [pc, #540]	; (b40c <_timer_init+0x278>)
    b1ee:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    b1f0:	2101      	movs	r1, #1
    b1f2:	6838      	ldr	r0, [r7, #0]
    b1f4:	4b84      	ldr	r3, [pc, #528]	; (b408 <_timer_init+0x274>)
    b1f6:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    b1f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b1fc:	4984      	ldr	r1, [pc, #528]	; (b410 <_timer_init+0x27c>)
    b1fe:	4613      	mov	r3, r2
    b200:	009b      	lsls	r3, r3, #2
    b202:	4413      	add	r3, r2
    b204:	009b      	lsls	r3, r3, #2
    b206:	440b      	add	r3, r1
    b208:	3304      	adds	r3, #4
    b20a:	681b      	ldr	r3, [r3, #0]
    b20c:	4619      	mov	r1, r3
    b20e:	6838      	ldr	r0, [r7, #0]
    b210:	4b7e      	ldr	r3, [pc, #504]	; (b40c <_timer_init+0x278>)
    b212:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    b214:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b218:	497d      	ldr	r1, [pc, #500]	; (b410 <_timer_init+0x27c>)
    b21a:	4613      	mov	r3, r2
    b21c:	009b      	lsls	r3, r3, #2
    b21e:	4413      	add	r3, r2
    b220:	009b      	lsls	r3, r3, #2
    b222:	440b      	add	r3, r1
    b224:	330a      	adds	r3, #10
    b226:	781b      	ldrb	r3, [r3, #0]
    b228:	4619      	mov	r1, r3
    b22a:	6838      	ldr	r0, [r7, #0]
    b22c:	4b79      	ldr	r3, [pc, #484]	; (b414 <_timer_init+0x280>)
    b22e:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    b230:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b234:	4976      	ldr	r1, [pc, #472]	; (b410 <_timer_init+0x27c>)
    b236:	4613      	mov	r3, r2
    b238:	009b      	lsls	r3, r3, #2
    b23a:	4413      	add	r3, r2
    b23c:	009b      	lsls	r3, r3, #2
    b23e:	440b      	add	r3, r1
    b240:	3308      	adds	r3, #8
    b242:	881b      	ldrh	r3, [r3, #0]
    b244:	4619      	mov	r1, r3
    b246:	6838      	ldr	r0, [r7, #0]
    b248:	4b73      	ldr	r3, [pc, #460]	; (b418 <_timer_init+0x284>)
    b24a:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    b24c:	2101      	movs	r1, #1
    b24e:	6838      	ldr	r0, [r7, #0]
    b250:	4b72      	ldr	r3, [pc, #456]	; (b41c <_timer_init+0x288>)
    b252:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    b254:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b258:	496d      	ldr	r1, [pc, #436]	; (b410 <_timer_init+0x27c>)
    b25a:	4613      	mov	r3, r2
    b25c:	009b      	lsls	r3, r3, #2
    b25e:	4413      	add	r3, r2
    b260:	009b      	lsls	r3, r3, #2
    b262:	440b      	add	r3, r1
    b264:	3304      	adds	r3, #4
    b266:	681b      	ldr	r3, [r3, #0]
    b268:	f003 030c 	and.w	r3, r3, #12
    b26c:	2b08      	cmp	r3, #8
    b26e:	d11e      	bne.n	b2ae <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    b270:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b274:	4966      	ldr	r1, [pc, #408]	; (b410 <_timer_init+0x27c>)
    b276:	4613      	mov	r3, r2
    b278:	009b      	lsls	r3, r3, #2
    b27a:	4413      	add	r3, r2
    b27c:	009b      	lsls	r3, r3, #2
    b27e:	440b      	add	r3, r1
    b280:	330c      	adds	r3, #12
    b282:	681b      	ldr	r3, [r3, #0]
    b284:	461a      	mov	r2, r3
    b286:	2100      	movs	r1, #0
    b288:	6838      	ldr	r0, [r7, #0]
    b28a:	4b65      	ldr	r3, [pc, #404]	; (b420 <_timer_init+0x28c>)
    b28c:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    b28e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b292:	495f      	ldr	r1, [pc, #380]	; (b410 <_timer_init+0x27c>)
    b294:	4613      	mov	r3, r2
    b296:	009b      	lsls	r3, r3, #2
    b298:	4413      	add	r3, r2
    b29a:	009b      	lsls	r3, r3, #2
    b29c:	440b      	add	r3, r1
    b29e:	3310      	adds	r3, #16
    b2a0:	681b      	ldr	r3, [r3, #0]
    b2a2:	461a      	mov	r2, r3
    b2a4:	2101      	movs	r1, #1
    b2a6:	6838      	ldr	r0, [r7, #0]
    b2a8:	4b5d      	ldr	r3, [pc, #372]	; (b420 <_timer_init+0x28c>)
    b2aa:	4798      	blx	r3
    b2ac:	e06a      	b.n	b384 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    b2ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b2b2:	4957      	ldr	r1, [pc, #348]	; (b410 <_timer_init+0x27c>)
    b2b4:	4613      	mov	r3, r2
    b2b6:	009b      	lsls	r3, r3, #2
    b2b8:	4413      	add	r3, r2
    b2ba:	009b      	lsls	r3, r3, #2
    b2bc:	440b      	add	r3, r1
    b2be:	3304      	adds	r3, #4
    b2c0:	681b      	ldr	r3, [r3, #0]
    b2c2:	f003 030c 	and.w	r3, r3, #12
    b2c6:	2b00      	cmp	r3, #0
    b2c8:	d120      	bne.n	b30c <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    b2ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b2ce:	4950      	ldr	r1, [pc, #320]	; (b410 <_timer_init+0x27c>)
    b2d0:	4613      	mov	r3, r2
    b2d2:	009b      	lsls	r3, r3, #2
    b2d4:	4413      	add	r3, r2
    b2d6:	009b      	lsls	r3, r3, #2
    b2d8:	440b      	add	r3, r1
    b2da:	330c      	adds	r3, #12
    b2dc:	681b      	ldr	r3, [r3, #0]
    b2de:	b29b      	uxth	r3, r3
    b2e0:	461a      	mov	r2, r3
    b2e2:	2100      	movs	r1, #0
    b2e4:	6838      	ldr	r0, [r7, #0]
    b2e6:	4b4f      	ldr	r3, [pc, #316]	; (b424 <_timer_init+0x290>)
    b2e8:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    b2ea:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b2ee:	4948      	ldr	r1, [pc, #288]	; (b410 <_timer_init+0x27c>)
    b2f0:	4613      	mov	r3, r2
    b2f2:	009b      	lsls	r3, r3, #2
    b2f4:	4413      	add	r3, r2
    b2f6:	009b      	lsls	r3, r3, #2
    b2f8:	440b      	add	r3, r1
    b2fa:	3310      	adds	r3, #16
    b2fc:	681b      	ldr	r3, [r3, #0]
    b2fe:	b29b      	uxth	r3, r3
    b300:	461a      	mov	r2, r3
    b302:	2101      	movs	r1, #1
    b304:	6838      	ldr	r0, [r7, #0]
    b306:	4b47      	ldr	r3, [pc, #284]	; (b424 <_timer_init+0x290>)
    b308:	4798      	blx	r3
    b30a:	e03b      	b.n	b384 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    b30c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b310:	493f      	ldr	r1, [pc, #252]	; (b410 <_timer_init+0x27c>)
    b312:	4613      	mov	r3, r2
    b314:	009b      	lsls	r3, r3, #2
    b316:	4413      	add	r3, r2
    b318:	009b      	lsls	r3, r3, #2
    b31a:	440b      	add	r3, r1
    b31c:	3304      	adds	r3, #4
    b31e:	681b      	ldr	r3, [r3, #0]
    b320:	f003 030c 	and.w	r3, r3, #12
    b324:	2b04      	cmp	r3, #4
    b326:	d12d      	bne.n	b384 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    b328:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b32c:	4938      	ldr	r1, [pc, #224]	; (b410 <_timer_init+0x27c>)
    b32e:	4613      	mov	r3, r2
    b330:	009b      	lsls	r3, r3, #2
    b332:	4413      	add	r3, r2
    b334:	009b      	lsls	r3, r3, #2
    b336:	440b      	add	r3, r1
    b338:	330c      	adds	r3, #12
    b33a:	681b      	ldr	r3, [r3, #0]
    b33c:	b2db      	uxtb	r3, r3
    b33e:	461a      	mov	r2, r3
    b340:	2100      	movs	r1, #0
    b342:	6838      	ldr	r0, [r7, #0]
    b344:	4b38      	ldr	r3, [pc, #224]	; (b428 <_timer_init+0x294>)
    b346:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    b348:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b34c:	4930      	ldr	r1, [pc, #192]	; (b410 <_timer_init+0x27c>)
    b34e:	4613      	mov	r3, r2
    b350:	009b      	lsls	r3, r3, #2
    b352:	4413      	add	r3, r2
    b354:	009b      	lsls	r3, r3, #2
    b356:	440b      	add	r3, r1
    b358:	3310      	adds	r3, #16
    b35a:	681b      	ldr	r3, [r3, #0]
    b35c:	b2db      	uxtb	r3, r3
    b35e:	461a      	mov	r2, r3
    b360:	2101      	movs	r1, #1
    b362:	6838      	ldr	r0, [r7, #0]
    b364:	4b30      	ldr	r3, [pc, #192]	; (b428 <_timer_init+0x294>)
    b366:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    b368:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b36c:	4928      	ldr	r1, [pc, #160]	; (b410 <_timer_init+0x27c>)
    b36e:	4613      	mov	r3, r2
    b370:	009b      	lsls	r3, r3, #2
    b372:	4413      	add	r3, r2
    b374:	009b      	lsls	r3, r3, #2
    b376:	440b      	add	r3, r1
    b378:	330b      	adds	r3, #11
    b37a:	781b      	ldrb	r3, [r3, #0]
    b37c:	4619      	mov	r1, r3
    b37e:	6838      	ldr	r0, [r7, #0]
    b380:	4b2a      	ldr	r3, [pc, #168]	; (b42c <_timer_init+0x298>)
    b382:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    b384:	6838      	ldr	r0, [r7, #0]
    b386:	4b2a      	ldr	r3, [pc, #168]	; (b430 <_timer_init+0x29c>)
    b388:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    b38a:	6879      	ldr	r1, [r7, #4]
    b38c:	6838      	ldr	r0, [r7, #0]
    b38e:	4b29      	ldr	r3, [pc, #164]	; (b434 <_timer_init+0x2a0>)
    b390:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    b392:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b396:	491e      	ldr	r1, [pc, #120]	; (b410 <_timer_init+0x27c>)
    b398:	4613      	mov	r3, r2
    b39a:	009b      	lsls	r3, r3, #2
    b39c:	4413      	add	r3, r2
    b39e:	009b      	lsls	r3, r3, #2
    b3a0:	440b      	add	r3, r1
    b3a2:	3302      	adds	r3, #2
    b3a4:	f9b3 3000 	ldrsh.w	r3, [r3]
    b3a8:	4618      	mov	r0, r3
    b3aa:	4b23      	ldr	r3, [pc, #140]	; (b438 <_timer_init+0x2a4>)
    b3ac:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    b3ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b3b2:	4917      	ldr	r1, [pc, #92]	; (b410 <_timer_init+0x27c>)
    b3b4:	4613      	mov	r3, r2
    b3b6:	009b      	lsls	r3, r3, #2
    b3b8:	4413      	add	r3, r2
    b3ba:	009b      	lsls	r3, r3, #2
    b3bc:	440b      	add	r3, r1
    b3be:	3302      	adds	r3, #2
    b3c0:	f9b3 3000 	ldrsh.w	r3, [r3]
    b3c4:	4618      	mov	r0, r3
    b3c6:	4b1d      	ldr	r3, [pc, #116]	; (b43c <_timer_init+0x2a8>)
    b3c8:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    b3ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b3ce:	4910      	ldr	r1, [pc, #64]	; (b410 <_timer_init+0x27c>)
    b3d0:	4613      	mov	r3, r2
    b3d2:	009b      	lsls	r3, r3, #2
    b3d4:	4413      	add	r3, r2
    b3d6:	009b      	lsls	r3, r3, #2
    b3d8:	440b      	add	r3, r1
    b3da:	3302      	adds	r3, #2
    b3dc:	f9b3 3000 	ldrsh.w	r3, [r3]
    b3e0:	4618      	mov	r0, r3
    b3e2:	4b17      	ldr	r3, [pc, #92]	; (b440 <_timer_init+0x2ac>)
    b3e4:	4798      	blx	r3

	return ERR_NONE;
    b3e6:	2300      	movs	r3, #0
}
    b3e8:	4618      	mov	r0, r3
    b3ea:	3710      	adds	r7, #16
    b3ec:	46bd      	mov	sp, r7
    b3ee:	bd80      	pop	{r7, pc}
    b3f0:	0000b8e9 	.word	0x0000b8e9
    b3f4:	000186b4 	.word	0x000186b4
    b3f8:	000065d9 	.word	0x000065d9
    b3fc:	0000aed9 	.word	0x0000aed9
    b400:	0000b029 	.word	0x0000b029
    b404:	0000b001 	.word	0x0000b001
    b408:	0000aeb5 	.word	0x0000aeb5
    b40c:	0000b059 	.word	0x0000b059
    b410:	200000ac 	.word	0x200000ac
    b414:	0000b0b9 	.word	0x0000b0b9
    b418:	0000b07d 	.word	0x0000b07d
    b41c:	0000b09b 	.word	0x0000b09b
    b420:	0000b165 	.word	0x0000b165
    b424:	0000b131 	.word	0x0000b131
    b428:	0000b101 	.word	0x0000b101
    b42c:	0000b0d9 	.word	0x0000b0d9
    b430:	0000af5d 	.word	0x0000af5d
    b434:	0000b951 	.word	0x0000b951
    b438:	0000ae35 	.word	0x0000ae35
    b43c:	0000ae79 	.word	0x0000ae79
    b440:	0000adf9 	.word	0x0000adf9

0000b444 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    b444:	b580      	push	{r7, lr}
    b446:	b084      	sub	sp, #16
    b448:	af00      	add	r7, sp, #0
    b44a:	6078      	str	r0, [r7, #4]
    b44c:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    b44e:	6838      	ldr	r0, [r7, #0]
    b450:	4b73      	ldr	r3, [pc, #460]	; (b620 <_pwm_init+0x1dc>)
    b452:	4798      	blx	r3
    b454:	4603      	mov	r3, r0
    b456:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    b458:	687b      	ldr	r3, [r7, #4]
    b45a:	683a      	ldr	r2, [r7, #0]
    b45c:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    b45e:	2101      	movs	r1, #1
    b460:	6838      	ldr	r0, [r7, #0]
    b462:	4b70      	ldr	r3, [pc, #448]	; (b624 <_pwm_init+0x1e0>)
    b464:	4798      	blx	r3
    b466:	4603      	mov	r3, r0
    b468:	f083 0301 	eor.w	r3, r3, #1
    b46c:	b2db      	uxtb	r3, r3
    b46e:	2b00      	cmp	r3, #0
    b470:	d011      	beq.n	b496 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    b472:	2102      	movs	r1, #2
    b474:	6838      	ldr	r0, [r7, #0]
    b476:	4b6c      	ldr	r3, [pc, #432]	; (b628 <_pwm_init+0x1e4>)
    b478:	4798      	blx	r3
    b47a:	4603      	mov	r3, r0
    b47c:	2b00      	cmp	r3, #0
    b47e:	d006      	beq.n	b48e <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    b480:	6838      	ldr	r0, [r7, #0]
    b482:	4b6a      	ldr	r3, [pc, #424]	; (b62c <_pwm_init+0x1e8>)
    b484:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    b486:	2102      	movs	r1, #2
    b488:	6838      	ldr	r0, [r7, #0]
    b48a:	4b69      	ldr	r3, [pc, #420]	; (b630 <_pwm_init+0x1ec>)
    b48c:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    b48e:	2101      	movs	r1, #1
    b490:	6838      	ldr	r0, [r7, #0]
    b492:	4b68      	ldr	r3, [pc, #416]	; (b634 <_pwm_init+0x1f0>)
    b494:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    b496:	2101      	movs	r1, #1
    b498:	6838      	ldr	r0, [r7, #0]
    b49a:	4b65      	ldr	r3, [pc, #404]	; (b630 <_pwm_init+0x1ec>)
    b49c:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    b49e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b4a2:	4965      	ldr	r1, [pc, #404]	; (b638 <_pwm_init+0x1f4>)
    b4a4:	4613      	mov	r3, r2
    b4a6:	009b      	lsls	r3, r3, #2
    b4a8:	4413      	add	r3, r2
    b4aa:	009b      	lsls	r3, r3, #2
    b4ac:	440b      	add	r3, r1
    b4ae:	3304      	adds	r3, #4
    b4b0:	681b      	ldr	r3, [r3, #0]
    b4b2:	4619      	mov	r1, r3
    b4b4:	6838      	ldr	r0, [r7, #0]
    b4b6:	4b5f      	ldr	r3, [pc, #380]	; (b634 <_pwm_init+0x1f0>)
    b4b8:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    b4ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b4be:	495e      	ldr	r1, [pc, #376]	; (b638 <_pwm_init+0x1f4>)
    b4c0:	4613      	mov	r3, r2
    b4c2:	009b      	lsls	r3, r3, #2
    b4c4:	4413      	add	r3, r2
    b4c6:	009b      	lsls	r3, r3, #2
    b4c8:	440b      	add	r3, r1
    b4ca:	330a      	adds	r3, #10
    b4cc:	781b      	ldrb	r3, [r3, #0]
    b4ce:	4619      	mov	r1, r3
    b4d0:	6838      	ldr	r0, [r7, #0]
    b4d2:	4b5a      	ldr	r3, [pc, #360]	; (b63c <_pwm_init+0x1f8>)
    b4d4:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    b4d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b4da:	4957      	ldr	r1, [pc, #348]	; (b638 <_pwm_init+0x1f4>)
    b4dc:	4613      	mov	r3, r2
    b4de:	009b      	lsls	r3, r3, #2
    b4e0:	4413      	add	r3, r2
    b4e2:	009b      	lsls	r3, r3, #2
    b4e4:	440b      	add	r3, r1
    b4e6:	3308      	adds	r3, #8
    b4e8:	881b      	ldrh	r3, [r3, #0]
    b4ea:	4619      	mov	r1, r3
    b4ec:	6838      	ldr	r0, [r7, #0]
    b4ee:	4b54      	ldr	r3, [pc, #336]	; (b640 <_pwm_init+0x1fc>)
    b4f0:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    b4f2:	2103      	movs	r1, #3
    b4f4:	6838      	ldr	r0, [r7, #0]
    b4f6:	4b53      	ldr	r3, [pc, #332]	; (b644 <_pwm_init+0x200>)
    b4f8:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    b4fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b4fe:	494e      	ldr	r1, [pc, #312]	; (b638 <_pwm_init+0x1f4>)
    b500:	4613      	mov	r3, r2
    b502:	009b      	lsls	r3, r3, #2
    b504:	4413      	add	r3, r2
    b506:	009b      	lsls	r3, r3, #2
    b508:	440b      	add	r3, r1
    b50a:	3304      	adds	r3, #4
    b50c:	681b      	ldr	r3, [r3, #0]
    b50e:	f003 030c 	and.w	r3, r3, #12
    b512:	2b08      	cmp	r3, #8
    b514:	d11e      	bne.n	b554 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    b516:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b51a:	4947      	ldr	r1, [pc, #284]	; (b638 <_pwm_init+0x1f4>)
    b51c:	4613      	mov	r3, r2
    b51e:	009b      	lsls	r3, r3, #2
    b520:	4413      	add	r3, r2
    b522:	009b      	lsls	r3, r3, #2
    b524:	440b      	add	r3, r1
    b526:	330c      	adds	r3, #12
    b528:	681b      	ldr	r3, [r3, #0]
    b52a:	461a      	mov	r2, r3
    b52c:	2100      	movs	r1, #0
    b52e:	6838      	ldr	r0, [r7, #0]
    b530:	4b45      	ldr	r3, [pc, #276]	; (b648 <_pwm_init+0x204>)
    b532:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    b534:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b538:	493f      	ldr	r1, [pc, #252]	; (b638 <_pwm_init+0x1f4>)
    b53a:	4613      	mov	r3, r2
    b53c:	009b      	lsls	r3, r3, #2
    b53e:	4413      	add	r3, r2
    b540:	009b      	lsls	r3, r3, #2
    b542:	440b      	add	r3, r1
    b544:	3310      	adds	r3, #16
    b546:	681b      	ldr	r3, [r3, #0]
    b548:	461a      	mov	r2, r3
    b54a:	2101      	movs	r1, #1
    b54c:	6838      	ldr	r0, [r7, #0]
    b54e:	4b3e      	ldr	r3, [pc, #248]	; (b648 <_pwm_init+0x204>)
    b550:	4798      	blx	r3
    b552:	e031      	b.n	b5b8 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    b554:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b558:	4937      	ldr	r1, [pc, #220]	; (b638 <_pwm_init+0x1f4>)
    b55a:	4613      	mov	r3, r2
    b55c:	009b      	lsls	r3, r3, #2
    b55e:	4413      	add	r3, r2
    b560:	009b      	lsls	r3, r3, #2
    b562:	440b      	add	r3, r1
    b564:	3304      	adds	r3, #4
    b566:	681b      	ldr	r3, [r3, #0]
    b568:	f003 030c 	and.w	r3, r3, #12
    b56c:	2b00      	cmp	r3, #0
    b56e:	d120      	bne.n	b5b2 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    b570:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b574:	4930      	ldr	r1, [pc, #192]	; (b638 <_pwm_init+0x1f4>)
    b576:	4613      	mov	r3, r2
    b578:	009b      	lsls	r3, r3, #2
    b57a:	4413      	add	r3, r2
    b57c:	009b      	lsls	r3, r3, #2
    b57e:	440b      	add	r3, r1
    b580:	330c      	adds	r3, #12
    b582:	681b      	ldr	r3, [r3, #0]
    b584:	b29b      	uxth	r3, r3
    b586:	461a      	mov	r2, r3
    b588:	2100      	movs	r1, #0
    b58a:	6838      	ldr	r0, [r7, #0]
    b58c:	4b2f      	ldr	r3, [pc, #188]	; (b64c <_pwm_init+0x208>)
    b58e:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    b590:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b594:	4928      	ldr	r1, [pc, #160]	; (b638 <_pwm_init+0x1f4>)
    b596:	4613      	mov	r3, r2
    b598:	009b      	lsls	r3, r3, #2
    b59a:	4413      	add	r3, r2
    b59c:	009b      	lsls	r3, r3, #2
    b59e:	440b      	add	r3, r1
    b5a0:	3310      	adds	r3, #16
    b5a2:	681b      	ldr	r3, [r3, #0]
    b5a4:	b29b      	uxth	r3, r3
    b5a6:	461a      	mov	r2, r3
    b5a8:	2101      	movs	r1, #1
    b5aa:	6838      	ldr	r0, [r7, #0]
    b5ac:	4b27      	ldr	r3, [pc, #156]	; (b64c <_pwm_init+0x208>)
    b5ae:	4798      	blx	r3
    b5b0:	e002      	b.n	b5b8 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    b5b2:	f04f 33ff 	mov.w	r3, #4294967295
    b5b6:	e02e      	b.n	b616 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    b5b8:	6879      	ldr	r1, [r7, #4]
    b5ba:	6838      	ldr	r0, [r7, #0]
    b5bc:	4b24      	ldr	r3, [pc, #144]	; (b650 <_pwm_init+0x20c>)
    b5be:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    b5c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b5c4:	491c      	ldr	r1, [pc, #112]	; (b638 <_pwm_init+0x1f4>)
    b5c6:	4613      	mov	r3, r2
    b5c8:	009b      	lsls	r3, r3, #2
    b5ca:	4413      	add	r3, r2
    b5cc:	009b      	lsls	r3, r3, #2
    b5ce:	440b      	add	r3, r1
    b5d0:	3302      	adds	r3, #2
    b5d2:	f9b3 3000 	ldrsh.w	r3, [r3]
    b5d6:	4618      	mov	r0, r3
    b5d8:	4b1e      	ldr	r3, [pc, #120]	; (b654 <_pwm_init+0x210>)
    b5da:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    b5dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b5e0:	4915      	ldr	r1, [pc, #84]	; (b638 <_pwm_init+0x1f4>)
    b5e2:	4613      	mov	r3, r2
    b5e4:	009b      	lsls	r3, r3, #2
    b5e6:	4413      	add	r3, r2
    b5e8:	009b      	lsls	r3, r3, #2
    b5ea:	440b      	add	r3, r1
    b5ec:	3302      	adds	r3, #2
    b5ee:	f9b3 3000 	ldrsh.w	r3, [r3]
    b5f2:	4618      	mov	r0, r3
    b5f4:	4b18      	ldr	r3, [pc, #96]	; (b658 <_pwm_init+0x214>)
    b5f6:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    b5f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b5fc:	490e      	ldr	r1, [pc, #56]	; (b638 <_pwm_init+0x1f4>)
    b5fe:	4613      	mov	r3, r2
    b600:	009b      	lsls	r3, r3, #2
    b602:	4413      	add	r3, r2
    b604:	009b      	lsls	r3, r3, #2
    b606:	440b      	add	r3, r1
    b608:	3302      	adds	r3, #2
    b60a:	f9b3 3000 	ldrsh.w	r3, [r3]
    b60e:	4618      	mov	r0, r3
    b610:	4b12      	ldr	r3, [pc, #72]	; (b65c <_pwm_init+0x218>)
    b612:	4798      	blx	r3

	return 0;
    b614:	2300      	movs	r3, #0
}
    b616:	4618      	mov	r0, r3
    b618:	3710      	adds	r7, #16
    b61a:	46bd      	mov	sp, r7
    b61c:	bd80      	pop	{r7, pc}
    b61e:	bf00      	nop
    b620:	0000b8e9 	.word	0x0000b8e9
    b624:	0000aed9 	.word	0x0000aed9
    b628:	0000b029 	.word	0x0000b029
    b62c:	0000b001 	.word	0x0000b001
    b630:	0000aeb5 	.word	0x0000aeb5
    b634:	0000b059 	.word	0x0000b059
    b638:	200000ac 	.word	0x200000ac
    b63c:	0000b0b9 	.word	0x0000b0b9
    b640:	0000b07d 	.word	0x0000b07d
    b644:	0000b09b 	.word	0x0000b09b
    b648:	0000b165 	.word	0x0000b165
    b64c:	0000b131 	.word	0x0000b131
    b650:	0000b951 	.word	0x0000b951
    b654:	0000ae35 	.word	0x0000ae35
    b658:	0000ae79 	.word	0x0000ae79
    b65c:	0000adf9 	.word	0x0000adf9

0000b660 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    b660:	b580      	push	{r7, lr}
    b662:	b082      	sub	sp, #8
    b664:	af00      	add	r7, sp, #0
    b666:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    b668:	687b      	ldr	r3, [r7, #4]
    b66a:	68db      	ldr	r3, [r3, #12]
    b66c:	4618      	mov	r0, r3
    b66e:	4b03      	ldr	r3, [pc, #12]	; (b67c <_timer_start+0x1c>)
    b670:	4798      	blx	r3
}
    b672:	bf00      	nop
    b674:	3708      	adds	r7, #8
    b676:	46bd      	mov	sp, r7
    b678:	bd80      	pop	{r7, pc}
    b67a:	bf00      	nop
    b67c:	0000afa1 	.word	0x0000afa1

0000b680 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    b680:	b580      	push	{r7, lr}
    b682:	b082      	sub	sp, #8
    b684:	af00      	add	r7, sp, #0
    b686:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    b688:	687b      	ldr	r3, [r7, #4]
    b68a:	691b      	ldr	r3, [r3, #16]
    b68c:	4618      	mov	r0, r3
    b68e:	4b03      	ldr	r3, [pc, #12]	; (b69c <_pwm_enable+0x1c>)
    b690:	4798      	blx	r3
}
    b692:	bf00      	nop
    b694:	3708      	adds	r7, #8
    b696:	46bd      	mov	sp, r7
    b698:	bd80      	pop	{r7, pc}
    b69a:	bf00      	nop
    b69c:	0000afa1 	.word	0x0000afa1

0000b6a0 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    b6a0:	b580      	push	{r7, lr}
    b6a2:	b082      	sub	sp, #8
    b6a4:	af00      	add	r7, sp, #0
    b6a6:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    b6a8:	687b      	ldr	r3, [r7, #4]
    b6aa:	68db      	ldr	r3, [r3, #12]
    b6ac:	4618      	mov	r0, r3
    b6ae:	4b03      	ldr	r3, [pc, #12]	; (b6bc <_timer_stop+0x1c>)
    b6b0:	4798      	blx	r3
}
    b6b2:	bf00      	nop
    b6b4:	3708      	adds	r7, #8
    b6b6:	46bd      	mov	sp, r7
    b6b8:	bd80      	pop	{r7, pc}
    b6ba:	bf00      	nop
    b6bc:	0000b001 	.word	0x0000b001

0000b6c0 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    b6c0:	b580      	push	{r7, lr}
    b6c2:	b082      	sub	sp, #8
    b6c4:	af00      	add	r7, sp, #0
    b6c6:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    b6c8:	687b      	ldr	r3, [r7, #4]
    b6ca:	68db      	ldr	r3, [r3, #12]
    b6cc:	4618      	mov	r0, r3
    b6ce:	4b03      	ldr	r3, [pc, #12]	; (b6dc <_timer_is_started+0x1c>)
    b6d0:	4798      	blx	r3
    b6d2:	4603      	mov	r3, r0
}
    b6d4:	4618      	mov	r0, r3
    b6d6:	3708      	adds	r7, #8
    b6d8:	46bd      	mov	sp, r7
    b6da:	bd80      	pop	{r7, pc}
    b6dc:	0000afc9 	.word	0x0000afc9

0000b6e0 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    b6e0:	b580      	push	{r7, lr}
    b6e2:	b082      	sub	sp, #8
    b6e4:	af00      	add	r7, sp, #0
    b6e6:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    b6e8:	687b      	ldr	r3, [r7, #4]
    b6ea:	691b      	ldr	r3, [r3, #16]
    b6ec:	4618      	mov	r0, r3
    b6ee:	4b03      	ldr	r3, [pc, #12]	; (b6fc <_pwm_is_enabled+0x1c>)
    b6f0:	4798      	blx	r3
    b6f2:	4603      	mov	r3, r0
}
    b6f4:	4618      	mov	r0, r3
    b6f6:	3708      	adds	r7, #8
    b6f8:	46bd      	mov	sp, r7
    b6fa:	bd80      	pop	{r7, pc}
    b6fc:	0000afc9 	.word	0x0000afc9

0000b700 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    b700:	b480      	push	{r7}
    b702:	af00      	add	r7, sp, #0
	return NULL;
    b704:	2300      	movs	r3, #0
}
    b706:	4618      	mov	r0, r3
    b708:	46bd      	mov	sp, r7
    b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b70e:	4770      	bx	lr

0000b710 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    b710:	b480      	push	{r7}
    b712:	af00      	add	r7, sp, #0
	return NULL;
    b714:	2300      	movs	r3, #0
}
    b716:	4618      	mov	r0, r3
    b718:	46bd      	mov	sp, r7
    b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b71e:	4770      	bx	lr

0000b720 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    b720:	b580      	push	{r7, lr}
    b722:	b084      	sub	sp, #16
    b724:	af00      	add	r7, sp, #0
    b726:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b728:	687b      	ldr	r3, [r7, #4]
    b72a:	68db      	ldr	r3, [r3, #12]
    b72c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    b72e:	68f8      	ldr	r0, [r7, #12]
    b730:	4b0e      	ldr	r3, [pc, #56]	; (b76c <_timer_set_irq+0x4c>)
    b732:	4798      	blx	r3
    b734:	4603      	mov	r3, r0
    b736:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    b738:	f240 12a7 	movw	r2, #423	; 0x1a7
    b73c:	490c      	ldr	r1, [pc, #48]	; (b770 <_timer_set_irq+0x50>)
    b73e:	2001      	movs	r0, #1
    b740:	4b0c      	ldr	r3, [pc, #48]	; (b774 <_timer_set_irq+0x54>)
    b742:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    b744:	f997 200b 	ldrsb.w	r2, [r7, #11]
    b748:	490b      	ldr	r1, [pc, #44]	; (b778 <_timer_set_irq+0x58>)
    b74a:	4613      	mov	r3, r2
    b74c:	009b      	lsls	r3, r3, #2
    b74e:	4413      	add	r3, r2
    b750:	009b      	lsls	r3, r3, #2
    b752:	440b      	add	r3, r1
    b754:	3302      	adds	r3, #2
    b756:	f9b3 3000 	ldrsh.w	r3, [r3]
    b75a:	b2db      	uxtb	r3, r3
    b75c:	4618      	mov	r0, r3
    b75e:	4b07      	ldr	r3, [pc, #28]	; (b77c <_timer_set_irq+0x5c>)
    b760:	4798      	blx	r3
}
    b762:	bf00      	nop
    b764:	3710      	adds	r7, #16
    b766:	46bd      	mov	sp, r7
    b768:	bd80      	pop	{r7, pc}
    b76a:	bf00      	nop
    b76c:	0000b8e9 	.word	0x0000b8e9
    b770:	000186b4 	.word	0x000186b4
    b774:	000065d9 	.word	0x000065d9
    b778:	200000ac 	.word	0x200000ac
    b77c:	00006e25 	.word	0x00006e25

0000b780 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    b780:	b580      	push	{r7, lr}
    b782:	b084      	sub	sp, #16
    b784:	af00      	add	r7, sp, #0
    b786:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b788:	687b      	ldr	r3, [r7, #4]
    b78a:	68db      	ldr	r3, [r3, #12]
    b78c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    b78e:	68f8      	ldr	r0, [r7, #12]
    b790:	4b07      	ldr	r3, [pc, #28]	; (b7b0 <tc_interrupt_handler+0x30>)
    b792:	4798      	blx	r3
    b794:	4603      	mov	r3, r0
    b796:	2b00      	cmp	r3, #0
    b798:	d006      	beq.n	b7a8 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    b79a:	68f8      	ldr	r0, [r7, #12]
    b79c:	4b05      	ldr	r3, [pc, #20]	; (b7b4 <tc_interrupt_handler+0x34>)
    b79e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    b7a0:	687b      	ldr	r3, [r7, #4]
    b7a2:	681b      	ldr	r3, [r3, #0]
    b7a4:	6878      	ldr	r0, [r7, #4]
    b7a6:	4798      	blx	r3
	}
}
    b7a8:	bf00      	nop
    b7aa:	3710      	adds	r7, #16
    b7ac:	46bd      	mov	sp, r7
    b7ae:	bd80      	pop	{r7, pc}
    b7b0:	0000af01 	.word	0x0000af01
    b7b4:	0000af29 	.word	0x0000af29

0000b7b8 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    b7b8:	b580      	push	{r7, lr}
    b7ba:	b084      	sub	sp, #16
    b7bc:	af00      	add	r7, sp, #0
    b7be:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b7c0:	687b      	ldr	r3, [r7, #4]
    b7c2:	691b      	ldr	r3, [r3, #16]
    b7c4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    b7c6:	68f8      	ldr	r0, [r7, #12]
    b7c8:	4b12      	ldr	r3, [pc, #72]	; (b814 <tc_pwm_interrupt_handler+0x5c>)
    b7ca:	4798      	blx	r3
    b7cc:	4603      	mov	r3, r0
    b7ce:	2b00      	cmp	r3, #0
    b7d0:	d00a      	beq.n	b7e8 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    b7d2:	68f8      	ldr	r0, [r7, #12]
    b7d4:	4b10      	ldr	r3, [pc, #64]	; (b818 <tc_pwm_interrupt_handler+0x60>)
    b7d6:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    b7d8:	687b      	ldr	r3, [r7, #4]
    b7da:	681b      	ldr	r3, [r3, #0]
    b7dc:	2b00      	cmp	r3, #0
    b7de:	d003      	beq.n	b7e8 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    b7e0:	687b      	ldr	r3, [r7, #4]
    b7e2:	681b      	ldr	r3, [r3, #0]
    b7e4:	6878      	ldr	r0, [r7, #4]
    b7e6:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    b7e8:	68f8      	ldr	r0, [r7, #12]
    b7ea:	4b0c      	ldr	r3, [pc, #48]	; (b81c <tc_pwm_interrupt_handler+0x64>)
    b7ec:	4798      	blx	r3
    b7ee:	4603      	mov	r3, r0
    b7f0:	2b00      	cmp	r3, #0
    b7f2:	d00a      	beq.n	b80a <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    b7f4:	68f8      	ldr	r0, [r7, #12]
    b7f6:	4b0a      	ldr	r3, [pc, #40]	; (b820 <tc_pwm_interrupt_handler+0x68>)
    b7f8:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    b7fa:	687b      	ldr	r3, [r7, #4]
    b7fc:	685b      	ldr	r3, [r3, #4]
    b7fe:	2b00      	cmp	r3, #0
    b800:	d003      	beq.n	b80a <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    b802:	687b      	ldr	r3, [r7, #4]
    b804:	685b      	ldr	r3, [r3, #4]
    b806:	6878      	ldr	r0, [r7, #4]
    b808:	4798      	blx	r3
		}
	}
}
    b80a:	bf00      	nop
    b80c:	3710      	adds	r7, #16
    b80e:	46bd      	mov	sp, r7
    b810:	bd80      	pop	{r7, pc}
    b812:	bf00      	nop
    b814:	0000af01 	.word	0x0000af01
    b818:	0000af29 	.word	0x0000af29
    b81c:	0000af77 	.word	0x0000af77
    b820:	0000af43 	.word	0x0000af43

0000b824 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    b824:	b580      	push	{r7, lr}
    b826:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    b828:	4b03      	ldr	r3, [pc, #12]	; (b838 <TC0_Handler+0x14>)
    b82a:	681b      	ldr	r3, [r3, #0]
    b82c:	4618      	mov	r0, r3
    b82e:	4b03      	ldr	r3, [pc, #12]	; (b83c <TC0_Handler+0x18>)
    b830:	4798      	blx	r3
}
    b832:	bf00      	nop
    b834:	bd80      	pop	{r7, pc}
    b836:	bf00      	nop
    b838:	20002f90 	.word	0x20002f90
    b83c:	0000b781 	.word	0x0000b781

0000b840 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    b840:	b580      	push	{r7, lr}
    b842:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    b844:	4b03      	ldr	r3, [pc, #12]	; (b854 <TC1_Handler+0x14>)
    b846:	681b      	ldr	r3, [r3, #0]
    b848:	4618      	mov	r0, r3
    b84a:	4b03      	ldr	r3, [pc, #12]	; (b858 <TC1_Handler+0x18>)
    b84c:	4798      	blx	r3
}
    b84e:	bf00      	nop
    b850:	bd80      	pop	{r7, pc}
    b852:	bf00      	nop
    b854:	20002f94 	.word	0x20002f94
    b858:	0000b781 	.word	0x0000b781

0000b85c <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    b85c:	b580      	push	{r7, lr}
    b85e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    b860:	4b03      	ldr	r3, [pc, #12]	; (b870 <TC2_Handler+0x14>)
    b862:	681b      	ldr	r3, [r3, #0]
    b864:	4618      	mov	r0, r3
    b866:	4b03      	ldr	r3, [pc, #12]	; (b874 <TC2_Handler+0x18>)
    b868:	4798      	blx	r3
}
    b86a:	bf00      	nop
    b86c:	bd80      	pop	{r7, pc}
    b86e:	bf00      	nop
    b870:	20002f98 	.word	0x20002f98
    b874:	0000b781 	.word	0x0000b781

0000b878 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    b878:	b580      	push	{r7, lr}
    b87a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    b87c:	4b03      	ldr	r3, [pc, #12]	; (b88c <TC3_Handler+0x14>)
    b87e:	681b      	ldr	r3, [r3, #0]
    b880:	4618      	mov	r0, r3
    b882:	4b03      	ldr	r3, [pc, #12]	; (b890 <TC3_Handler+0x18>)
    b884:	4798      	blx	r3
}
    b886:	bf00      	nop
    b888:	bd80      	pop	{r7, pc}
    b88a:	bf00      	nop
    b88c:	20002f9c 	.word	0x20002f9c
    b890:	0000b781 	.word	0x0000b781

0000b894 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    b894:	b580      	push	{r7, lr}
    b896:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    b898:	4b03      	ldr	r3, [pc, #12]	; (b8a8 <TC4_Handler+0x14>)
    b89a:	681b      	ldr	r3, [r3, #0]
    b89c:	4618      	mov	r0, r3
    b89e:	4b03      	ldr	r3, [pc, #12]	; (b8ac <TC4_Handler+0x18>)
    b8a0:	4798      	blx	r3
}
    b8a2:	bf00      	nop
    b8a4:	bd80      	pop	{r7, pc}
    b8a6:	bf00      	nop
    b8a8:	20002fa0 	.word	0x20002fa0
    b8ac:	0000b781 	.word	0x0000b781

0000b8b0 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    b8b0:	b580      	push	{r7, lr}
    b8b2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    b8b4:	4b03      	ldr	r3, [pc, #12]	; (b8c4 <TC5_Handler+0x14>)
    b8b6:	681b      	ldr	r3, [r3, #0]
    b8b8:	4618      	mov	r0, r3
    b8ba:	4b03      	ldr	r3, [pc, #12]	; (b8c8 <TC5_Handler+0x18>)
    b8bc:	4798      	blx	r3
}
    b8be:	bf00      	nop
    b8c0:	bd80      	pop	{r7, pc}
    b8c2:	bf00      	nop
    b8c4:	20002fa4 	.word	0x20002fa4
    b8c8:	0000b781 	.word	0x0000b781

0000b8cc <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    b8cc:	b580      	push	{r7, lr}
    b8ce:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    b8d0:	4b03      	ldr	r3, [pc, #12]	; (b8e0 <TC7_Handler+0x14>)
    b8d2:	681b      	ldr	r3, [r3, #0]
    b8d4:	4618      	mov	r0, r3
    b8d6:	4b03      	ldr	r3, [pc, #12]	; (b8e4 <TC7_Handler+0x18>)
    b8d8:	4798      	blx	r3
}
    b8da:	bf00      	nop
    b8dc:	bd80      	pop	{r7, pc}
    b8de:	bf00      	nop
    b8e0:	20002fa8 	.word	0x20002fa8
    b8e4:	0000b7b9 	.word	0x0000b7b9

0000b8e8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    b8e8:	b580      	push	{r7, lr}
    b8ea:	b084      	sub	sp, #16
    b8ec:	af00      	add	r7, sp, #0
    b8ee:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    b8f0:	6878      	ldr	r0, [r7, #4]
    b8f2:	4b13      	ldr	r3, [pc, #76]	; (b940 <get_tc_index+0x58>)
    b8f4:	4798      	blx	r3
    b8f6:	4603      	mov	r3, r0
    b8f8:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    b8fa:	2300      	movs	r3, #0
    b8fc:	73fb      	strb	r3, [r7, #15]
    b8fe:	e010      	b.n	b922 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    b900:	7bfa      	ldrb	r2, [r7, #15]
    b902:	4910      	ldr	r1, [pc, #64]	; (b944 <get_tc_index+0x5c>)
    b904:	4613      	mov	r3, r2
    b906:	009b      	lsls	r3, r3, #2
    b908:	4413      	add	r3, r2
    b90a:	009b      	lsls	r3, r3, #2
    b90c:	440b      	add	r3, r1
    b90e:	781b      	ldrb	r3, [r3, #0]
    b910:	7bba      	ldrb	r2, [r7, #14]
    b912:	429a      	cmp	r2, r3
    b914:	d102      	bne.n	b91c <get_tc_index+0x34>
			return i;
    b916:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b91a:	e00d      	b.n	b938 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    b91c:	7bfb      	ldrb	r3, [r7, #15]
    b91e:	3301      	adds	r3, #1
    b920:	73fb      	strb	r3, [r7, #15]
    b922:	7bfb      	ldrb	r3, [r7, #15]
    b924:	2b06      	cmp	r3, #6
    b926:	d9eb      	bls.n	b900 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    b928:	f240 221a 	movw	r2, #538	; 0x21a
    b92c:	4906      	ldr	r1, [pc, #24]	; (b948 <get_tc_index+0x60>)
    b92e:	2000      	movs	r0, #0
    b930:	4b06      	ldr	r3, [pc, #24]	; (b94c <get_tc_index+0x64>)
    b932:	4798      	blx	r3
	return -1;
    b934:	f04f 33ff 	mov.w	r3, #4294967295
}
    b938:	4618      	mov	r0, r3
    b93a:	3710      	adds	r7, #16
    b93c:	46bd      	mov	sp, r7
    b93e:	bd80      	pop	{r7, pc}
    b940:	0000ba01 	.word	0x0000ba01
    b944:	200000ac 	.word	0x200000ac
    b948:	000186b4 	.word	0x000186b4
    b94c:	000065d9 	.word	0x000065d9

0000b950 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    b950:	b480      	push	{r7}
    b952:	b083      	sub	sp, #12
    b954:	af00      	add	r7, sp, #0
    b956:	6078      	str	r0, [r7, #4]
    b958:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    b95a:	687b      	ldr	r3, [r7, #4]
    b95c:	4a1a      	ldr	r2, [pc, #104]	; (b9c8 <_tc_init_irq_param+0x78>)
    b95e:	4293      	cmp	r3, r2
    b960:	d102      	bne.n	b968 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    b962:	4a1a      	ldr	r2, [pc, #104]	; (b9cc <_tc_init_irq_param+0x7c>)
    b964:	683b      	ldr	r3, [r7, #0]
    b966:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    b968:	687b      	ldr	r3, [r7, #4]
    b96a:	4a19      	ldr	r2, [pc, #100]	; (b9d0 <_tc_init_irq_param+0x80>)
    b96c:	4293      	cmp	r3, r2
    b96e:	d102      	bne.n	b976 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    b970:	4a18      	ldr	r2, [pc, #96]	; (b9d4 <_tc_init_irq_param+0x84>)
    b972:	683b      	ldr	r3, [r7, #0]
    b974:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    b976:	687b      	ldr	r3, [r7, #4]
    b978:	4a17      	ldr	r2, [pc, #92]	; (b9d8 <_tc_init_irq_param+0x88>)
    b97a:	4293      	cmp	r3, r2
    b97c:	d102      	bne.n	b984 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    b97e:	4a17      	ldr	r2, [pc, #92]	; (b9dc <_tc_init_irq_param+0x8c>)
    b980:	683b      	ldr	r3, [r7, #0]
    b982:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    b984:	687b      	ldr	r3, [r7, #4]
    b986:	4a16      	ldr	r2, [pc, #88]	; (b9e0 <_tc_init_irq_param+0x90>)
    b988:	4293      	cmp	r3, r2
    b98a:	d102      	bne.n	b992 <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    b98c:	4a15      	ldr	r2, [pc, #84]	; (b9e4 <_tc_init_irq_param+0x94>)
    b98e:	683b      	ldr	r3, [r7, #0]
    b990:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    b992:	687b      	ldr	r3, [r7, #4]
    b994:	4a14      	ldr	r2, [pc, #80]	; (b9e8 <_tc_init_irq_param+0x98>)
    b996:	4293      	cmp	r3, r2
    b998:	d102      	bne.n	b9a0 <_tc_init_irq_param+0x50>
		_tc4_dev = (struct _timer_device *)dev;
    b99a:	4a14      	ldr	r2, [pc, #80]	; (b9ec <_tc_init_irq_param+0x9c>)
    b99c:	683b      	ldr	r3, [r7, #0]
    b99e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    b9a0:	687b      	ldr	r3, [r7, #4]
    b9a2:	4a13      	ldr	r2, [pc, #76]	; (b9f0 <_tc_init_irq_param+0xa0>)
    b9a4:	4293      	cmp	r3, r2
    b9a6:	d102      	bne.n	b9ae <_tc_init_irq_param+0x5e>
		_tc5_dev = (struct _timer_device *)dev;
    b9a8:	4a12      	ldr	r2, [pc, #72]	; (b9f4 <_tc_init_irq_param+0xa4>)
    b9aa:	683b      	ldr	r3, [r7, #0]
    b9ac:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    b9ae:	687b      	ldr	r3, [r7, #4]
    b9b0:	4a11      	ldr	r2, [pc, #68]	; (b9f8 <_tc_init_irq_param+0xa8>)
    b9b2:	4293      	cmp	r3, r2
    b9b4:	d102      	bne.n	b9bc <_tc_init_irq_param+0x6c>
		_tc7_dev = (struct _pwm_device *)dev;
    b9b6:	4a11      	ldr	r2, [pc, #68]	; (b9fc <_tc_init_irq_param+0xac>)
    b9b8:	683b      	ldr	r3, [r7, #0]
    b9ba:	6013      	str	r3, [r2, #0]
	}
}
    b9bc:	bf00      	nop
    b9be:	370c      	adds	r7, #12
    b9c0:	46bd      	mov	sp, r7
    b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9c6:	4770      	bx	lr
    b9c8:	40003800 	.word	0x40003800
    b9cc:	20002f90 	.word	0x20002f90
    b9d0:	40003c00 	.word	0x40003c00
    b9d4:	20002f94 	.word	0x20002f94
    b9d8:	4101a000 	.word	0x4101a000
    b9dc:	20002f98 	.word	0x20002f98
    b9e0:	4101c000 	.word	0x4101c000
    b9e4:	20002f9c 	.word	0x20002f9c
    b9e8:	42001400 	.word	0x42001400
    b9ec:	20002fa0 	.word	0x20002fa0
    b9f0:	42001800 	.word	0x42001800
    b9f4:	20002fa4 	.word	0x20002fa4
    b9f8:	43001800 	.word	0x43001800
    b9fc:	20002fa8 	.word	0x20002fa8

0000ba00 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    ba00:	b4b0      	push	{r4, r5, r7}
    ba02:	b08d      	sub	sp, #52	; 0x34
    ba04:	af00      	add	r7, sp, #0
    ba06:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    ba08:	4b13      	ldr	r3, [pc, #76]	; (ba58 <_get_hardware_offset+0x58>)
    ba0a:	f107 040c 	add.w	r4, r7, #12
    ba0e:	461d      	mov	r5, r3
    ba10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ba12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ba14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    ba18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    ba1c:	2300      	movs	r3, #0
    ba1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    ba20:	e010      	b.n	ba44 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    ba22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba24:	009b      	lsls	r3, r3, #2
    ba26:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ba2a:	4413      	add	r3, r2
    ba2c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    ba30:	461a      	mov	r2, r3
    ba32:	687b      	ldr	r3, [r7, #4]
    ba34:	429a      	cmp	r2, r3
    ba36:	d102      	bne.n	ba3e <_get_hardware_offset+0x3e>
			return i;
    ba38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba3a:	b2db      	uxtb	r3, r3
    ba3c:	e006      	b.n	ba4c <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    ba3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba40:	3301      	adds	r3, #1
    ba42:	62fb      	str	r3, [r7, #44]	; 0x2c
    ba44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba46:	2b07      	cmp	r3, #7
    ba48:	d9eb      	bls.n	ba22 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    ba4a:	2300      	movs	r3, #0
}
    ba4c:	4618      	mov	r0, r3
    ba4e:	3734      	adds	r7, #52	; 0x34
    ba50:	46bd      	mov	sp, r7
    ba52:	bcb0      	pop	{r4, r5, r7}
    ba54:	4770      	bx	lr
    ba56:	bf00      	nop
    ba58:	000186c8 	.word	0x000186c8

0000ba5c <__NVIC_EnableIRQ>:
{
    ba5c:	b480      	push	{r7}
    ba5e:	b083      	sub	sp, #12
    ba60:	af00      	add	r7, sp, #0
    ba62:	4603      	mov	r3, r0
    ba64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ba66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ba6a:	2b00      	cmp	r3, #0
    ba6c:	db0b      	blt.n	ba86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ba6e:	4909      	ldr	r1, [pc, #36]	; (ba94 <__NVIC_EnableIRQ+0x38>)
    ba70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ba74:	095b      	lsrs	r3, r3, #5
    ba76:	88fa      	ldrh	r2, [r7, #6]
    ba78:	f002 021f 	and.w	r2, r2, #31
    ba7c:	2001      	movs	r0, #1
    ba7e:	fa00 f202 	lsl.w	r2, r0, r2
    ba82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ba86:	bf00      	nop
    ba88:	370c      	adds	r7, #12
    ba8a:	46bd      	mov	sp, r7
    ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba90:	4770      	bx	lr
    ba92:	bf00      	nop
    ba94:	e000e100 	.word	0xe000e100

0000ba98 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    ba98:	b480      	push	{r7}
    ba9a:	b087      	sub	sp, #28
    ba9c:	af00      	add	r7, sp, #0
    ba9e:	60f8      	str	r0, [r7, #12]
    baa0:	460b      	mov	r3, r1
    baa2:	607a      	str	r2, [r7, #4]
    baa4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    baa6:	7afa      	ldrb	r2, [r7, #11]
    baa8:	68f9      	ldr	r1, [r7, #12]
    baaa:	4613      	mov	r3, r2
    baac:	009b      	lsls	r3, r3, #2
    baae:	4413      	add	r3, r2
    bab0:	009b      	lsls	r3, r3, #2
    bab2:	440b      	add	r3, r1
    bab4:	3340      	adds	r3, #64	; 0x40
    bab6:	681b      	ldr	r3, [r3, #0]
    bab8:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    baba:	697a      	ldr	r2, [r7, #20]
    babc:	687b      	ldr	r3, [r7, #4]
    babe:	4013      	ands	r3, r2
    bac0:	617b      	str	r3, [r7, #20]
	return tmp;
    bac2:	697b      	ldr	r3, [r7, #20]
}
    bac4:	4618      	mov	r0, r3
    bac6:	371c      	adds	r7, #28
    bac8:	46bd      	mov	sp, r7
    baca:	f85d 7b04 	ldr.w	r7, [sp], #4
    bace:	4770      	bx	lr

0000bad0 <hri_oscctrl_get_STATUS_reg>:
{
    bad0:	b480      	push	{r7}
    bad2:	b085      	sub	sp, #20
    bad4:	af00      	add	r7, sp, #0
    bad6:	6078      	str	r0, [r7, #4]
    bad8:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    bada:	687b      	ldr	r3, [r7, #4]
    badc:	691b      	ldr	r3, [r3, #16]
    bade:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    bae0:	68fa      	ldr	r2, [r7, #12]
    bae2:	683b      	ldr	r3, [r7, #0]
    bae4:	4013      	ands	r3, r2
    bae6:	60fb      	str	r3, [r7, #12]
	return tmp;
    bae8:	68fb      	ldr	r3, [r7, #12]
}
    baea:	4618      	mov	r0, r3
    baec:	3714      	adds	r7, #20
    baee:	46bd      	mov	sp, r7
    baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    baf4:	4770      	bx	lr

0000baf6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    baf6:	b480      	push	{r7}
    baf8:	b085      	sub	sp, #20
    bafa:	af00      	add	r7, sp, #0
    bafc:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    bafe:	687b      	ldr	r3, [r7, #4]
    bb00:	f893 3020 	ldrb.w	r3, [r3, #32]
    bb04:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    bb06:	7bfb      	ldrb	r3, [r7, #15]
    bb08:	f003 0301 	and.w	r3, r3, #1
    bb0c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    bb0e:	7bfb      	ldrb	r3, [r7, #15]
    bb10:	2b00      	cmp	r3, #0
    bb12:	bf14      	ite	ne
    bb14:	2301      	movne	r3, #1
    bb16:	2300      	moveq	r3, #0
    bb18:	b2db      	uxtb	r3, r3
}
    bb1a:	4618      	mov	r0, r3
    bb1c:	3714      	adds	r7, #20
    bb1e:	46bd      	mov	sp, r7
    bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb24:	4770      	bx	lr

0000bb26 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    bb26:	b480      	push	{r7}
    bb28:	b083      	sub	sp, #12
    bb2a:	af00      	add	r7, sp, #0
    bb2c:	6078      	str	r0, [r7, #4]
    bb2e:	460b      	mov	r3, r1
    bb30:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    bb32:	bf00      	nop
    bb34:	687b      	ldr	r3, [r7, #4]
    bb36:	789b      	ldrb	r3, [r3, #2]
    bb38:	b2da      	uxtb	r2, r3
    bb3a:	78fb      	ldrb	r3, [r7, #3]
    bb3c:	4013      	ands	r3, r2
    bb3e:	b2db      	uxtb	r3, r3
    bb40:	2b00      	cmp	r3, #0
    bb42:	d1f7      	bne.n	bb34 <hri_usb_wait_for_sync+0xe>
	};
}
    bb44:	bf00      	nop
    bb46:	370c      	adds	r7, #12
    bb48:	46bd      	mov	sp, r7
    bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb4e:	4770      	bx	lr

0000bb50 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    bb50:	b480      	push	{r7}
    bb52:	b083      	sub	sp, #12
    bb54:	af00      	add	r7, sp, #0
    bb56:	6078      	str	r0, [r7, #4]
    bb58:	460b      	mov	r3, r1
    bb5a:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    bb5c:	687b      	ldr	r3, [r7, #4]
    bb5e:	789b      	ldrb	r3, [r3, #2]
    bb60:	b2da      	uxtb	r2, r3
    bb62:	78fb      	ldrb	r3, [r7, #3]
    bb64:	4013      	ands	r3, r2
    bb66:	b2db      	uxtb	r3, r3
    bb68:	2b00      	cmp	r3, #0
    bb6a:	bf14      	ite	ne
    bb6c:	2301      	movne	r3, #1
    bb6e:	2300      	moveq	r3, #0
    bb70:	b2db      	uxtb	r3, r3
}
    bb72:	4618      	mov	r0, r3
    bb74:	370c      	adds	r7, #12
    bb76:	46bd      	mov	sp, r7
    bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb7c:	4770      	bx	lr

0000bb7e <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    bb7e:	b480      	push	{r7}
    bb80:	b085      	sub	sp, #20
    bb82:	af00      	add	r7, sp, #0
    bb84:	6078      	str	r0, [r7, #4]
    bb86:	460b      	mov	r3, r1
    bb88:	70fb      	strb	r3, [r7, #3]
    bb8a:	4613      	mov	r3, r2
    bb8c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    bb8e:	78fb      	ldrb	r3, [r7, #3]
    bb90:	687a      	ldr	r2, [r7, #4]
    bb92:	3308      	adds	r3, #8
    bb94:	015b      	lsls	r3, r3, #5
    bb96:	4413      	add	r3, r2
    bb98:	3307      	adds	r3, #7
    bb9a:	781b      	ldrb	r3, [r3, #0]
    bb9c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    bb9e:	7bfa      	ldrb	r2, [r7, #15]
    bba0:	78bb      	ldrb	r3, [r7, #2]
    bba2:	4013      	ands	r3, r2
    bba4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bba6:	7bfb      	ldrb	r3, [r7, #15]
}
    bba8:	4618      	mov	r0, r3
    bbaa:	3714      	adds	r7, #20
    bbac:	46bd      	mov	sp, r7
    bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbb2:	4770      	bx	lr

0000bbb4 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    bbb4:	b480      	push	{r7}
    bbb6:	b083      	sub	sp, #12
    bbb8:	af00      	add	r7, sp, #0
    bbba:	6078      	str	r0, [r7, #4]
    bbbc:	460b      	mov	r3, r1
    bbbe:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    bbc0:	78fb      	ldrb	r3, [r7, #3]
    bbc2:	687a      	ldr	r2, [r7, #4]
    bbc4:	3308      	adds	r3, #8
    bbc6:	015b      	lsls	r3, r3, #5
    bbc8:	4413      	add	r3, r2
    bbca:	3307      	adds	r3, #7
    bbcc:	781b      	ldrb	r3, [r3, #0]
    bbce:	b2db      	uxtb	r3, r3
}
    bbd0:	4618      	mov	r0, r3
    bbd2:	370c      	adds	r7, #12
    bbd4:	46bd      	mov	sp, r7
    bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbda:	4770      	bx	lr

0000bbdc <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    bbdc:	b480      	push	{r7}
    bbde:	b083      	sub	sp, #12
    bbe0:	af00      	add	r7, sp, #0
    bbe2:	6078      	str	r0, [r7, #4]
    bbe4:	460b      	mov	r3, r1
    bbe6:	70fb      	strb	r3, [r7, #3]
    bbe8:	4613      	mov	r3, r2
    bbea:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    bbec:	78fb      	ldrb	r3, [r7, #3]
    bbee:	687a      	ldr	r2, [r7, #4]
    bbf0:	3308      	adds	r3, #8
    bbf2:	015b      	lsls	r3, r3, #5
    bbf4:	4413      	add	r3, r2
    bbf6:	3307      	adds	r3, #7
    bbf8:	78ba      	ldrb	r2, [r7, #2]
    bbfa:	701a      	strb	r2, [r3, #0]
}
    bbfc:	bf00      	nop
    bbfe:	370c      	adds	r7, #12
    bc00:	46bd      	mov	sp, r7
    bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc06:	4770      	bx	lr

0000bc08 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    bc08:	b480      	push	{r7}
    bc0a:	b083      	sub	sp, #12
    bc0c:	af00      	add	r7, sp, #0
    bc0e:	6078      	str	r0, [r7, #4]
    bc10:	460b      	mov	r3, r1
    bc12:	70fb      	strb	r3, [r7, #3]
    bc14:	4613      	mov	r3, r2
    bc16:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    bc18:	78fb      	ldrb	r3, [r7, #3]
    bc1a:	687a      	ldr	r2, [r7, #4]
    bc1c:	3308      	adds	r3, #8
    bc1e:	015b      	lsls	r3, r3, #5
    bc20:	4413      	add	r3, r2
    bc22:	3305      	adds	r3, #5
    bc24:	78ba      	ldrb	r2, [r7, #2]
    bc26:	701a      	strb	r2, [r3, #0]
}
    bc28:	bf00      	nop
    bc2a:	370c      	adds	r7, #12
    bc2c:	46bd      	mov	sp, r7
    bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc32:	4770      	bx	lr

0000bc34 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    bc34:	b480      	push	{r7}
    bc36:	b083      	sub	sp, #12
    bc38:	af00      	add	r7, sp, #0
    bc3a:	6078      	str	r0, [r7, #4]
    bc3c:	460b      	mov	r3, r1
    bc3e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    bc40:	78fb      	ldrb	r3, [r7, #3]
    bc42:	687a      	ldr	r2, [r7, #4]
    bc44:	3308      	adds	r3, #8
    bc46:	015b      	lsls	r3, r3, #5
    bc48:	4413      	add	r3, r2
    bc4a:	3306      	adds	r3, #6
    bc4c:	781b      	ldrb	r3, [r3, #0]
    bc4e:	b2db      	uxtb	r3, r3
}
    bc50:	4618      	mov	r0, r3
    bc52:	370c      	adds	r7, #12
    bc54:	46bd      	mov	sp, r7
    bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc5a:	4770      	bx	lr

0000bc5c <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    bc5c:	b480      	push	{r7}
    bc5e:	b083      	sub	sp, #12
    bc60:	af00      	add	r7, sp, #0
    bc62:	6078      	str	r0, [r7, #4]
    bc64:	460b      	mov	r3, r1
    bc66:	70fb      	strb	r3, [r7, #3]
    bc68:	4613      	mov	r3, r2
    bc6a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    bc6c:	78fb      	ldrb	r3, [r7, #3]
    bc6e:	687a      	ldr	r2, [r7, #4]
    bc70:	3308      	adds	r3, #8
    bc72:	015b      	lsls	r3, r3, #5
    bc74:	4413      	add	r3, r2
    bc76:	3304      	adds	r3, #4
    bc78:	78ba      	ldrb	r2, [r7, #2]
    bc7a:	701a      	strb	r2, [r3, #0]
}
    bc7c:	bf00      	nop
    bc7e:	370c      	adds	r7, #12
    bc80:	46bd      	mov	sp, r7
    bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc86:	4770      	bx	lr

0000bc88 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    bc88:	b480      	push	{r7}
    bc8a:	b083      	sub	sp, #12
    bc8c:	af00      	add	r7, sp, #0
    bc8e:	6078      	str	r0, [r7, #4]
    bc90:	460b      	mov	r3, r1
    bc92:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    bc94:	78fb      	ldrb	r3, [r7, #3]
    bc96:	687a      	ldr	r2, [r7, #4]
    bc98:	015b      	lsls	r3, r3, #5
    bc9a:	4413      	add	r3, r2
    bc9c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    bca0:	2210      	movs	r2, #16
    bca2:	701a      	strb	r2, [r3, #0]
}
    bca4:	bf00      	nop
    bca6:	370c      	adds	r7, #12
    bca8:	46bd      	mov	sp, r7
    bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcae:	4770      	bx	lr

0000bcb0 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    bcb0:	b480      	push	{r7}
    bcb2:	b083      	sub	sp, #12
    bcb4:	af00      	add	r7, sp, #0
    bcb6:	6078      	str	r0, [r7, #4]
    bcb8:	460b      	mov	r3, r1
    bcba:	70fb      	strb	r3, [r7, #3]
    bcbc:	4613      	mov	r3, r2
    bcbe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    bcc0:	78fb      	ldrb	r3, [r7, #3]
    bcc2:	687a      	ldr	r2, [r7, #4]
    bcc4:	015b      	lsls	r3, r3, #5
    bcc6:	4413      	add	r3, r2
    bcc8:	f203 1309 	addw	r3, r3, #265	; 0x109
    bccc:	78ba      	ldrb	r2, [r7, #2]
    bcce:	701a      	strb	r2, [r3, #0]
}
    bcd0:	bf00      	nop
    bcd2:	370c      	adds	r7, #12
    bcd4:	46bd      	mov	sp, r7
    bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcda:	4770      	bx	lr

0000bcdc <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    bcdc:	b480      	push	{r7}
    bcde:	b083      	sub	sp, #12
    bce0:	af00      	add	r7, sp, #0
    bce2:	6078      	str	r0, [r7, #4]
    bce4:	460b      	mov	r3, r1
    bce6:	70fb      	strb	r3, [r7, #3]
    bce8:	4613      	mov	r3, r2
    bcea:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    bcec:	78fb      	ldrb	r3, [r7, #3]
    bcee:	687a      	ldr	r2, [r7, #4]
    bcf0:	015b      	lsls	r3, r3, #5
    bcf2:	4413      	add	r3, r2
    bcf4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    bcf8:	78ba      	ldrb	r2, [r7, #2]
    bcfa:	701a      	strb	r2, [r3, #0]
}
    bcfc:	bf00      	nop
    bcfe:	370c      	adds	r7, #12
    bd00:	46bd      	mov	sp, r7
    bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd06:	4770      	bx	lr

0000bd08 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    bd08:	b480      	push	{r7}
    bd0a:	b085      	sub	sp, #20
    bd0c:	af00      	add	r7, sp, #0
    bd0e:	6078      	str	r0, [r7, #4]
    bd10:	460b      	mov	r3, r1
    bd12:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    bd14:	78fb      	ldrb	r3, [r7, #3]
    bd16:	687a      	ldr	r2, [r7, #4]
    bd18:	3308      	adds	r3, #8
    bd1a:	015b      	lsls	r3, r3, #5
    bd1c:	4413      	add	r3, r2
    bd1e:	781b      	ldrb	r3, [r3, #0]
    bd20:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    bd22:	7bfb      	ldrb	r3, [r7, #15]
    bd24:	f003 0307 	and.w	r3, r3, #7
    bd28:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bd2a:	7bfb      	ldrb	r3, [r7, #15]
}
    bd2c:	4618      	mov	r0, r3
    bd2e:	3714      	adds	r7, #20
    bd30:	46bd      	mov	sp, r7
    bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd36:	4770      	bx	lr

0000bd38 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    bd38:	b480      	push	{r7}
    bd3a:	b085      	sub	sp, #20
    bd3c:	af00      	add	r7, sp, #0
    bd3e:	6078      	str	r0, [r7, #4]
    bd40:	460b      	mov	r3, r1
    bd42:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    bd44:	78fb      	ldrb	r3, [r7, #3]
    bd46:	687a      	ldr	r2, [r7, #4]
    bd48:	3308      	adds	r3, #8
    bd4a:	015b      	lsls	r3, r3, #5
    bd4c:	4413      	add	r3, r2
    bd4e:	781b      	ldrb	r3, [r3, #0]
    bd50:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    bd52:	7bfb      	ldrb	r3, [r7, #15]
    bd54:	091b      	lsrs	r3, r3, #4
    bd56:	b2db      	uxtb	r3, r3
    bd58:	f003 0307 	and.w	r3, r3, #7
    bd5c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bd5e:	7bfb      	ldrb	r3, [r7, #15]
}
    bd60:	4618      	mov	r0, r3
    bd62:	3714      	adds	r7, #20
    bd64:	46bd      	mov	sp, r7
    bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd6a:	4770      	bx	lr

0000bd6c <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    bd6c:	b480      	push	{r7}
    bd6e:	b083      	sub	sp, #12
    bd70:	af00      	add	r7, sp, #0
    bd72:	6078      	str	r0, [r7, #4]
    bd74:	460b      	mov	r3, r1
    bd76:	70fb      	strb	r3, [r7, #3]
    bd78:	4613      	mov	r3, r2
    bd7a:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    bd7c:	78fb      	ldrb	r3, [r7, #3]
    bd7e:	687a      	ldr	r2, [r7, #4]
    bd80:	3308      	adds	r3, #8
    bd82:	015b      	lsls	r3, r3, #5
    bd84:	4413      	add	r3, r2
    bd86:	78ba      	ldrb	r2, [r7, #2]
    bd88:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    bd8a:	bf00      	nop
    bd8c:	370c      	adds	r7, #12
    bd8e:	46bd      	mov	sp, r7
    bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd94:	4770      	bx	lr

0000bd96 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    bd96:	b480      	push	{r7}
    bd98:	b083      	sub	sp, #12
    bd9a:	af00      	add	r7, sp, #0
    bd9c:	6078      	str	r0, [r7, #4]
    bd9e:	460b      	mov	r3, r1
    bda0:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    bda2:	78fb      	ldrb	r3, [r7, #3]
    bda4:	687a      	ldr	r2, [r7, #4]
    bda6:	3308      	adds	r3, #8
    bda8:	015b      	lsls	r3, r3, #5
    bdaa:	4413      	add	r3, r2
    bdac:	781b      	ldrb	r3, [r3, #0]
    bdae:	b2db      	uxtb	r3, r3
}
    bdb0:	4618      	mov	r0, r3
    bdb2:	370c      	adds	r7, #12
    bdb4:	46bd      	mov	sp, r7
    bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdba:	4770      	bx	lr

0000bdbc <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    bdbc:	b480      	push	{r7}
    bdbe:	b083      	sub	sp, #12
    bdc0:	af00      	add	r7, sp, #0
    bdc2:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    bdc4:	687b      	ldr	r3, [r7, #4]
    bdc6:	8b9b      	ldrh	r3, [r3, #28]
    bdc8:	b29b      	uxth	r3, r3
}
    bdca:	4618      	mov	r0, r3
    bdcc:	370c      	adds	r7, #12
    bdce:	46bd      	mov	sp, r7
    bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdd4:	4770      	bx	lr

0000bdd6 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    bdd6:	b480      	push	{r7}
    bdd8:	b083      	sub	sp, #12
    bdda:	af00      	add	r7, sp, #0
    bddc:	6078      	str	r0, [r7, #4]
    bdde:	460b      	mov	r3, r1
    bde0:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    bde2:	687b      	ldr	r3, [r7, #4]
    bde4:	887a      	ldrh	r2, [r7, #2]
    bde6:	839a      	strh	r2, [r3, #28]
}
    bde8:	bf00      	nop
    bdea:	370c      	adds	r7, #12
    bdec:	46bd      	mov	sp, r7
    bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdf2:	4770      	bx	lr

0000bdf4 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    bdf4:	b480      	push	{r7}
    bdf6:	b083      	sub	sp, #12
    bdf8:	af00      	add	r7, sp, #0
    bdfa:	6078      	str	r0, [r7, #4]
    bdfc:	460b      	mov	r3, r1
    bdfe:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    be00:	687b      	ldr	r3, [r7, #4]
    be02:	887a      	ldrh	r2, [r7, #2]
    be04:	831a      	strh	r2, [r3, #24]
}
    be06:	bf00      	nop
    be08:	370c      	adds	r7, #12
    be0a:	46bd      	mov	sp, r7
    be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    be10:	4770      	bx	lr

0000be12 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    be12:	b480      	push	{r7}
    be14:	b083      	sub	sp, #12
    be16:	af00      	add	r7, sp, #0
    be18:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    be1a:	687b      	ldr	r3, [r7, #4]
    be1c:	8b1b      	ldrh	r3, [r3, #24]
    be1e:	b29b      	uxth	r3, r3
}
    be20:	4618      	mov	r0, r3
    be22:	370c      	adds	r7, #12
    be24:	46bd      	mov	sp, r7
    be26:	f85d 7b04 	ldr.w	r7, [sp], #4
    be2a:	4770      	bx	lr

0000be2c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    be2c:	b480      	push	{r7}
    be2e:	b083      	sub	sp, #12
    be30:	af00      	add	r7, sp, #0
    be32:	6078      	str	r0, [r7, #4]
    be34:	460b      	mov	r3, r1
    be36:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    be38:	687b      	ldr	r3, [r7, #4]
    be3a:	887a      	ldrh	r2, [r7, #2]
    be3c:	829a      	strh	r2, [r3, #20]
}
    be3e:	bf00      	nop
    be40:	370c      	adds	r7, #12
    be42:	46bd      	mov	sp, r7
    be44:	f85d 7b04 	ldr.w	r7, [sp], #4
    be48:	4770      	bx	lr

0000be4a <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    be4a:	b480      	push	{r7}
    be4c:	b085      	sub	sp, #20
    be4e:	af00      	add	r7, sp, #0
    be50:	6078      	str	r0, [r7, #4]
    be52:	460b      	mov	r3, r1
    be54:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    be56:	687b      	ldr	r3, [r7, #4]
    be58:	789b      	ldrb	r3, [r3, #2]
    be5a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    be5c:	7bfa      	ldrb	r2, [r7, #15]
    be5e:	78fb      	ldrb	r3, [r7, #3]
    be60:	4013      	ands	r3, r2
    be62:	73fb      	strb	r3, [r7, #15]
	return tmp;
    be64:	7bfb      	ldrb	r3, [r7, #15]
}
    be66:	4618      	mov	r0, r3
    be68:	3714      	adds	r7, #20
    be6a:	46bd      	mov	sp, r7
    be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    be70:	4770      	bx	lr
	...

0000be74 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    be74:	b580      	push	{r7, lr}
    be76:	b082      	sub	sp, #8
    be78:	af00      	add	r7, sp, #0
    be7a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    be7c:	687b      	ldr	r3, [r7, #4]
    be7e:	781b      	ldrb	r3, [r3, #0]
    be80:	b2db      	uxtb	r3, r3
    be82:	f023 0302 	bic.w	r3, r3, #2
    be86:	b2da      	uxtb	r2, r3
    be88:	687b      	ldr	r3, [r7, #4]
    be8a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    be8c:	2103      	movs	r1, #3
    be8e:	6878      	ldr	r0, [r7, #4]
    be90:	4b02      	ldr	r3, [pc, #8]	; (be9c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    be92:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    be94:	bf00      	nop
    be96:	3708      	adds	r7, #8
    be98:	46bd      	mov	sp, r7
    be9a:	bd80      	pop	{r7, pc}
    be9c:	0000bb27 	.word	0x0000bb27

0000bea0 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    bea0:	b580      	push	{r7, lr}
    bea2:	b084      	sub	sp, #16
    bea4:	af00      	add	r7, sp, #0
    bea6:	6078      	str	r0, [r7, #4]
    bea8:	460b      	mov	r3, r1
    beaa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    beac:	2103      	movs	r1, #3
    beae:	6878      	ldr	r0, [r7, #4]
    beb0:	4b06      	ldr	r3, [pc, #24]	; (becc <hri_usb_get_CTRLA_reg+0x2c>)
    beb2:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    beb4:	687b      	ldr	r3, [r7, #4]
    beb6:	781b      	ldrb	r3, [r3, #0]
    beb8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    beba:	7bfa      	ldrb	r2, [r7, #15]
    bebc:	78fb      	ldrb	r3, [r7, #3]
    bebe:	4013      	ands	r3, r2
    bec0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bec2:	7bfb      	ldrb	r3, [r7, #15]
}
    bec4:	4618      	mov	r0, r3
    bec6:	3710      	adds	r7, #16
    bec8:	46bd      	mov	sp, r7
    beca:	bd80      	pop	{r7, pc}
    becc:	0000bb27 	.word	0x0000bb27

0000bed0 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    bed0:	b580      	push	{r7, lr}
    bed2:	b082      	sub	sp, #8
    bed4:	af00      	add	r7, sp, #0
    bed6:	6078      	str	r0, [r7, #4]
    bed8:	460b      	mov	r3, r1
    beda:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    bedc:	687b      	ldr	r3, [r7, #4]
    bede:	78fa      	ldrb	r2, [r7, #3]
    bee0:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    bee2:	2103      	movs	r1, #3
    bee4:	6878      	ldr	r0, [r7, #4]
    bee6:	4b03      	ldr	r3, [pc, #12]	; (bef4 <hri_usb_write_CTRLA_reg+0x24>)
    bee8:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    beea:	bf00      	nop
    beec:	3708      	adds	r7, #8
    beee:	46bd      	mov	sp, r7
    bef0:	bd80      	pop	{r7, pc}
    bef2:	bf00      	nop
    bef4:	0000bb27 	.word	0x0000bb27

0000bef8 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    bef8:	b580      	push	{r7, lr}
    befa:	b082      	sub	sp, #8
    befc:	af00      	add	r7, sp, #0
    befe:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    bf00:	2103      	movs	r1, #3
    bf02:	6878      	ldr	r0, [r7, #4]
    bf04:	4b04      	ldr	r3, [pc, #16]	; (bf18 <hri_usb_read_CTRLA_reg+0x20>)
    bf06:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    bf08:	687b      	ldr	r3, [r7, #4]
    bf0a:	781b      	ldrb	r3, [r3, #0]
    bf0c:	b2db      	uxtb	r3, r3
}
    bf0e:	4618      	mov	r0, r3
    bf10:	3708      	adds	r7, #8
    bf12:	46bd      	mov	sp, r7
    bf14:	bd80      	pop	{r7, pc}
    bf16:	bf00      	nop
    bf18:	0000bb27 	.word	0x0000bb27

0000bf1c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    bf1c:	b480      	push	{r7}
    bf1e:	b083      	sub	sp, #12
    bf20:	af00      	add	r7, sp, #0
    bf22:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    bf24:	687b      	ldr	r3, [r7, #4]
    bf26:	891b      	ldrh	r3, [r3, #8]
    bf28:	b29b      	uxth	r3, r3
    bf2a:	f023 0301 	bic.w	r3, r3, #1
    bf2e:	b29a      	uxth	r2, r3
    bf30:	687b      	ldr	r3, [r7, #4]
    bf32:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    bf34:	bf00      	nop
    bf36:	370c      	adds	r7, #12
    bf38:	46bd      	mov	sp, r7
    bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf3e:	4770      	bx	lr

0000bf40 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    bf40:	b480      	push	{r7}
    bf42:	b083      	sub	sp, #12
    bf44:	af00      	add	r7, sp, #0
    bf46:	6078      	str	r0, [r7, #4]
    bf48:	460b      	mov	r3, r1
    bf4a:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    bf4c:	687b      	ldr	r3, [r7, #4]
    bf4e:	887a      	ldrh	r2, [r7, #2]
    bf50:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    bf52:	bf00      	nop
    bf54:	370c      	adds	r7, #12
    bf56:	46bd      	mov	sp, r7
    bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf5c:	4770      	bx	lr

0000bf5e <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    bf5e:	b480      	push	{r7}
    bf60:	b083      	sub	sp, #12
    bf62:	af00      	add	r7, sp, #0
    bf64:	6078      	str	r0, [r7, #4]
    bf66:	460b      	mov	r3, r1
    bf68:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    bf6a:	687b      	ldr	r3, [r7, #4]
    bf6c:	78fa      	ldrb	r2, [r7, #3]
    bf6e:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    bf70:	bf00      	nop
    bf72:	370c      	adds	r7, #12
    bf74:	46bd      	mov	sp, r7
    bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf7a:	4770      	bx	lr

0000bf7c <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    bf7c:	b480      	push	{r7}
    bf7e:	b083      	sub	sp, #12
    bf80:	af00      	add	r7, sp, #0
    bf82:	6078      	str	r0, [r7, #4]
    bf84:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    bf86:	687b      	ldr	r3, [r7, #4]
    bf88:	683a      	ldr	r2, [r7, #0]
    bf8a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    bf8c:	bf00      	nop
    bf8e:	370c      	adds	r7, #12
    bf90:	46bd      	mov	sp, r7
    bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf96:	4770      	bx	lr

0000bf98 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    bf98:	b480      	push	{r7}
    bf9a:	b083      	sub	sp, #12
    bf9c:	af00      	add	r7, sp, #0
    bf9e:	6078      	str	r0, [r7, #4]
    bfa0:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    bfa2:	2300      	movs	r3, #0
}
    bfa4:	4618      	mov	r0, r3
    bfa6:	370c      	adds	r7, #12
    bfa8:	46bd      	mov	sp, r7
    bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    bfae:	4770      	bx	lr

0000bfb0 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    bfb0:	b480      	push	{r7}
    bfb2:	b085      	sub	sp, #20
    bfb4:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    bfb6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bfba:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    bfbc:	4b28      	ldr	r3, [pc, #160]	; (c060 <_usb_load_calib+0xb0>)
    bfbe:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    bfc0:	f003 031f 	and.w	r3, r3, #31
    bfc4:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    bfc6:	4b26      	ldr	r3, [pc, #152]	; (c060 <_usb_load_calib+0xb0>)
    bfc8:	681b      	ldr	r3, [r3, #0]
    bfca:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    bfcc:	f003 031f 	and.w	r3, r3, #31
    bfd0:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    bfd2:	4b23      	ldr	r3, [pc, #140]	; (c060 <_usb_load_calib+0xb0>)
    bfd4:	681b      	ldr	r3, [r3, #0]
    bfd6:	0a9b      	lsrs	r3, r3, #10
    bfd8:	f003 0307 	and.w	r3, r3, #7
    bfdc:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    bfde:	68fb      	ldr	r3, [r7, #12]
    bfe0:	2b00      	cmp	r3, #0
    bfe2:	d002      	beq.n	bfea <_usb_load_calib+0x3a>
    bfe4:	68fb      	ldr	r3, [r7, #12]
    bfe6:	2b1f      	cmp	r3, #31
    bfe8:	d101      	bne.n	bfee <_usb_load_calib+0x3e>
		pad_transn = 9;
    bfea:	2309      	movs	r3, #9
    bfec:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    bfee:	68bb      	ldr	r3, [r7, #8]
    bff0:	2b00      	cmp	r3, #0
    bff2:	d002      	beq.n	bffa <_usb_load_calib+0x4a>
    bff4:	68bb      	ldr	r3, [r7, #8]
    bff6:	2b1f      	cmp	r3, #31
    bff8:	d101      	bne.n	bffe <_usb_load_calib+0x4e>
		pad_transp = 25;
    bffa:	2319      	movs	r3, #25
    bffc:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    bffe:	687b      	ldr	r3, [r7, #4]
    c000:	2b00      	cmp	r3, #0
    c002:	d002      	beq.n	c00a <_usb_load_calib+0x5a>
    c004:	687b      	ldr	r3, [r7, #4]
    c006:	2b07      	cmp	r3, #7
    c008:	d101      	bne.n	c00e <_usb_load_calib+0x5e>
		pad_trim = 6;
    c00a:	2306      	movs	r3, #6
    c00c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    c00e:	68fb      	ldr	r3, [r7, #12]
    c010:	b29b      	uxth	r3, r3
    c012:	019b      	lsls	r3, r3, #6
    c014:	b29b      	uxth	r3, r3
    c016:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    c01a:	b29a      	uxth	r2, r3
    c01c:	68bb      	ldr	r3, [r7, #8]
    c01e:	b29b      	uxth	r3, r3
    c020:	f003 031f 	and.w	r3, r3, #31
    c024:	b29b      	uxth	r3, r3
    c026:	4313      	orrs	r3, r2
    c028:	b29a      	uxth	r2, r3
    c02a:	687b      	ldr	r3, [r7, #4]
    c02c:	b29b      	uxth	r3, r3
    c02e:	031b      	lsls	r3, r3, #12
    c030:	b29b      	uxth	r3, r3
    c032:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    c036:	b29b      	uxth	r3, r3
    c038:	4313      	orrs	r3, r2
    c03a:	b29a      	uxth	r2, r3
    c03c:	683b      	ldr	r3, [r7, #0]
    c03e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    c040:	683a      	ldr	r2, [r7, #0]
    c042:	78d3      	ldrb	r3, [r2, #3]
    c044:	f043 0303 	orr.w	r3, r3, #3
    c048:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    c04a:	683a      	ldr	r2, [r7, #0]
    c04c:	78d3      	ldrb	r3, [r2, #3]
    c04e:	f043 030c 	orr.w	r3, r3, #12
    c052:	70d3      	strb	r3, [r2, #3]
}
    c054:	bf00      	nop
    c056:	3714      	adds	r7, #20
    c058:	46bd      	mov	sp, r7
    c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c05e:	4770      	bx	lr
    c060:	00800084 	.word	0x00800084

0000c064 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    c064:	b580      	push	{r7, lr}
    c066:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    c068:	bf00      	nop
    c06a:	2203      	movs	r2, #3
    c06c:	2100      	movs	r1, #0
    c06e:	4804      	ldr	r0, [pc, #16]	; (c080 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    c070:	4b04      	ldr	r3, [pc, #16]	; (c084 <_usb_d_dev_wait_dpll_rdy+0x20>)
    c072:	4798      	blx	r3
    c074:	4603      	mov	r3, r0
    c076:	2b03      	cmp	r3, #3
    c078:	d1f7      	bne.n	c06a <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    c07a:	bf00      	nop
    c07c:	bd80      	pop	{r7, pc}
    c07e:	bf00      	nop
    c080:	40001000 	.word	0x40001000
    c084:	0000ba99 	.word	0x0000ba99

0000c088 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    c088:	b580      	push	{r7, lr}
    c08a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    c08c:	480e      	ldr	r0, [pc, #56]	; (c0c8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    c08e:	4b0f      	ldr	r3, [pc, #60]	; (c0cc <_usb_d_dev_wait_dfll_rdy+0x44>)
    c090:	4798      	blx	r3
    c092:	4603      	mov	r3, r0
    c094:	2b00      	cmp	r3, #0
    c096:	d00a      	beq.n	c0ae <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    c098:	bf00      	nop
    c09a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    c09e:	480a      	ldr	r0, [pc, #40]	; (c0c8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    c0a0:	4b0b      	ldr	r3, [pc, #44]	; (c0d0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    c0a2:	4798      	blx	r3
    c0a4:	4603      	mov	r3, r0
    c0a6:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    c0aa:	d1f6      	bne.n	c09a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    c0ac:	e009      	b.n	c0c2 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    c0ae:	bf00      	nop
    c0b0:	f44f 7180 	mov.w	r1, #256	; 0x100
    c0b4:	4804      	ldr	r0, [pc, #16]	; (c0c8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    c0b6:	4b06      	ldr	r3, [pc, #24]	; (c0d0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    c0b8:	4798      	blx	r3
    c0ba:	4603      	mov	r3, r0
    c0bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c0c0:	d1f6      	bne.n	c0b0 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    c0c2:	bf00      	nop
    c0c4:	bd80      	pop	{r7, pc}
    c0c6:	bf00      	nop
    c0c8:	40001000 	.word	0x40001000
    c0cc:	0000baf7 	.word	0x0000baf7
    c0d0:	0000bad1 	.word	0x0000bad1

0000c0d4 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    c0d4:	b580      	push	{r7, lr}
    c0d6:	b082      	sub	sp, #8
    c0d8:	af00      	add	r7, sp, #0
    c0da:	4603      	mov	r3, r0
    c0dc:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    c0de:	79fb      	ldrb	r3, [r7, #7]
    c0e0:	2b00      	cmp	r3, #0
    c0e2:	d102      	bne.n	c0ea <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    c0e4:	4b05      	ldr	r3, [pc, #20]	; (c0fc <_usb_d_dev_wait_clk_rdy+0x28>)
    c0e6:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    c0e8:	e004      	b.n	c0f4 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    c0ea:	79fb      	ldrb	r3, [r7, #7]
    c0ec:	2b01      	cmp	r3, #1
    c0ee:	d101      	bne.n	c0f4 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    c0f0:	4b03      	ldr	r3, [pc, #12]	; (c100 <_usb_d_dev_wait_clk_rdy+0x2c>)
    c0f2:	4798      	blx	r3
}
    c0f4:	bf00      	nop
    c0f6:	3708      	adds	r7, #8
    c0f8:	46bd      	mov	sp, r7
    c0fa:	bd80      	pop	{r7, pc}
    c0fc:	0000c089 	.word	0x0000c089
    c100:	0000c065 	.word	0x0000c065

0000c104 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    c104:	b580      	push	{r7, lr}
    c106:	b082      	sub	sp, #8
    c108:	af00      	add	r7, sp, #0
    c10a:	4603      	mov	r3, r0
    c10c:	6039      	str	r1, [r7, #0]
    c10e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    c110:	683b      	ldr	r3, [r7, #0]
    c112:	b2da      	uxtb	r2, r3
    c114:	79fb      	ldrb	r3, [r7, #7]
    c116:	4619      	mov	r1, r3
    c118:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c11c:	4b02      	ldr	r3, [pc, #8]	; (c128 <_usbd_ep_int_ack+0x24>)
    c11e:	4798      	blx	r3
}
    c120:	bf00      	nop
    c122:	3708      	adds	r7, #8
    c124:	46bd      	mov	sp, r7
    c126:	bd80      	pop	{r7, pc}
    c128:	0000bbdd 	.word	0x0000bbdd

0000c12c <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    c12c:	b580      	push	{r7, lr}
    c12e:	b082      	sub	sp, #8
    c130:	af00      	add	r7, sp, #0
    c132:	4603      	mov	r3, r0
    c134:	6039      	str	r1, [r7, #0]
    c136:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    c138:	683b      	ldr	r3, [r7, #0]
    c13a:	b2da      	uxtb	r2, r3
    c13c:	79fb      	ldrb	r3, [r7, #7]
    c13e:	4619      	mov	r1, r3
    c140:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c144:	4b02      	ldr	r3, [pc, #8]	; (c150 <_usbd_ep_int_en+0x24>)
    c146:	4798      	blx	r3
}
    c148:	bf00      	nop
    c14a:	3708      	adds	r7, #8
    c14c:	46bd      	mov	sp, r7
    c14e:	bd80      	pop	{r7, pc}
    c150:	0000bcb1 	.word	0x0000bcb1

0000c154 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    c154:	b580      	push	{r7, lr}
    c156:	b082      	sub	sp, #8
    c158:	af00      	add	r7, sp, #0
    c15a:	4603      	mov	r3, r0
    c15c:	6039      	str	r1, [r7, #0]
    c15e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    c160:	683b      	ldr	r3, [r7, #0]
    c162:	b2da      	uxtb	r2, r3
    c164:	79fb      	ldrb	r3, [r7, #7]
    c166:	4619      	mov	r1, r3
    c168:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c16c:	4b02      	ldr	r3, [pc, #8]	; (c178 <_usbd_ep_int_dis+0x24>)
    c16e:	4798      	blx	r3
}
    c170:	bf00      	nop
    c172:	3708      	adds	r7, #8
    c174:	46bd      	mov	sp, r7
    c176:	bd80      	pop	{r7, pc}
    c178:	0000bcdd 	.word	0x0000bcdd

0000c17c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    c17c:	b580      	push	{r7, lr}
    c17e:	b082      	sub	sp, #8
    c180:	af00      	add	r7, sp, #0
    c182:	4603      	mov	r3, r0
    c184:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    c186:	79fb      	ldrb	r3, [r7, #7]
    c188:	4619      	mov	r1, r3
    c18a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c18e:	4b06      	ldr	r3, [pc, #24]	; (c1a8 <_usbd_ep_is_ctrl+0x2c>)
    c190:	4798      	blx	r3
    c192:	4603      	mov	r3, r0
    c194:	2b11      	cmp	r3, #17
    c196:	bf0c      	ite	eq
    c198:	2301      	moveq	r3, #1
    c19a:	2300      	movne	r3, #0
    c19c:	b2db      	uxtb	r3, r3
}
    c19e:	4618      	mov	r0, r3
    c1a0:	3708      	adds	r7, #8
    c1a2:	46bd      	mov	sp, r7
    c1a4:	bd80      	pop	{r7, pc}
    c1a6:	bf00      	nop
    c1a8:	0000bd97 	.word	0x0000bd97

0000c1ac <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    c1ac:	b580      	push	{r7, lr}
    c1ae:	b082      	sub	sp, #8
    c1b0:	af00      	add	r7, sp, #0
    c1b2:	4603      	mov	r3, r0
    c1b4:	71fb      	strb	r3, [r7, #7]
    c1b6:	460b      	mov	r3, r1
    c1b8:	71bb      	strb	r3, [r7, #6]
    c1ba:	4613      	mov	r3, r2
    c1bc:	717b      	strb	r3, [r7, #5]
	if (st) {
    c1be:	797b      	ldrb	r3, [r7, #5]
    c1c0:	2b00      	cmp	r3, #0
    c1c2:	d00b      	beq.n	c1dc <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    c1c4:	79bb      	ldrb	r3, [r7, #6]
    c1c6:	2210      	movs	r2, #16
    c1c8:	fa02 f303 	lsl.w	r3, r2, r3
    c1cc:	b2da      	uxtb	r2, r3
    c1ce:	79fb      	ldrb	r3, [r7, #7]
    c1d0:	4619      	mov	r1, r3
    c1d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c1d6:	4b09      	ldr	r3, [pc, #36]	; (c1fc <_usbd_ep_set_stall+0x50>)
    c1d8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    c1da:	e00a      	b.n	c1f2 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    c1dc:	79bb      	ldrb	r3, [r7, #6]
    c1de:	2210      	movs	r2, #16
    c1e0:	fa02 f303 	lsl.w	r3, r2, r3
    c1e4:	b2da      	uxtb	r2, r3
    c1e6:	79fb      	ldrb	r3, [r7, #7]
    c1e8:	4619      	mov	r1, r3
    c1ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c1ee:	4b04      	ldr	r3, [pc, #16]	; (c200 <_usbd_ep_set_stall+0x54>)
    c1f0:	4798      	blx	r3
}
    c1f2:	bf00      	nop
    c1f4:	3708      	adds	r7, #8
    c1f6:	46bd      	mov	sp, r7
    c1f8:	bd80      	pop	{r7, pc}
    c1fa:	bf00      	nop
    c1fc:	0000bc09 	.word	0x0000bc09
    c200:	0000bc5d 	.word	0x0000bc5d

0000c204 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    c204:	b580      	push	{r7, lr}
    c206:	b084      	sub	sp, #16
    c208:	af00      	add	r7, sp, #0
    c20a:	4603      	mov	r3, r0
    c20c:	460a      	mov	r2, r1
    c20e:	71fb      	strb	r3, [r7, #7]
    c210:	4613      	mov	r3, r2
    c212:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    c214:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c218:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    c21a:	79fb      	ldrb	r3, [r7, #7]
    c21c:	4619      	mov	r1, r3
    c21e:	68f8      	ldr	r0, [r7, #12]
    c220:	4b08      	ldr	r3, [pc, #32]	; (c244 <_usbd_ep_is_stalled+0x40>)
    c222:	4798      	blx	r3
    c224:	4603      	mov	r3, r0
    c226:	4619      	mov	r1, r3
    c228:	79bb      	ldrb	r3, [r7, #6]
    c22a:	2210      	movs	r2, #16
    c22c:	fa02 f303 	lsl.w	r3, r2, r3
    c230:	400b      	ands	r3, r1
    c232:	2b00      	cmp	r3, #0
    c234:	bf14      	ite	ne
    c236:	2301      	movne	r3, #1
    c238:	2300      	moveq	r3, #0
    c23a:	b2db      	uxtb	r3, r3
}
    c23c:	4618      	mov	r0, r3
    c23e:	3710      	adds	r7, #16
    c240:	46bd      	mov	sp, r7
    c242:	bd80      	pop	{r7, pc}
    c244:	0000bc35 	.word	0x0000bc35

0000c248 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    c248:	b580      	push	{r7, lr}
    c24a:	b084      	sub	sp, #16
    c24c:	af00      	add	r7, sp, #0
    c24e:	4603      	mov	r3, r0
    c250:	460a      	mov	r2, r1
    c252:	71fb      	strb	r3, [r7, #7]
    c254:	4613      	mov	r3, r2
    c256:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    c258:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c25c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    c25e:	79fb      	ldrb	r3, [r7, #7]
    c260:	4619      	mov	r1, r3
    c262:	68f8      	ldr	r0, [r7, #12]
    c264:	4b08      	ldr	r3, [pc, #32]	; (c288 <_usbd_ep_is_stall_sent+0x40>)
    c266:	4798      	blx	r3
    c268:	4603      	mov	r3, r0
    c26a:	4619      	mov	r1, r3
    c26c:	79bb      	ldrb	r3, [r7, #6]
    c26e:	2220      	movs	r2, #32
    c270:	fa02 f303 	lsl.w	r3, r2, r3
    c274:	400b      	ands	r3, r1
    c276:	2b00      	cmp	r3, #0
    c278:	bf14      	ite	ne
    c27a:	2301      	movne	r3, #1
    c27c:	2300      	moveq	r3, #0
    c27e:	b2db      	uxtb	r3, r3
}
    c280:	4618      	mov	r0, r3
    c282:	3710      	adds	r7, #16
    c284:	46bd      	mov	sp, r7
    c286:	bd80      	pop	{r7, pc}
    c288:	0000bbb5 	.word	0x0000bbb5

0000c28c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    c28c:	b580      	push	{r7, lr}
    c28e:	b082      	sub	sp, #8
    c290:	af00      	add	r7, sp, #0
    c292:	4603      	mov	r3, r0
    c294:	460a      	mov	r2, r1
    c296:	71fb      	strb	r3, [r7, #7]
    c298:	4613      	mov	r3, r2
    c29a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    c29c:	79bb      	ldrb	r3, [r7, #6]
    c29e:	2220      	movs	r2, #32
    c2a0:	409a      	lsls	r2, r3
    c2a2:	79fb      	ldrb	r3, [r7, #7]
    c2a4:	4611      	mov	r1, r2
    c2a6:	4618      	mov	r0, r3
    c2a8:	4b02      	ldr	r3, [pc, #8]	; (c2b4 <_usbd_ep_ack_stall+0x28>)
    c2aa:	4798      	blx	r3
}
    c2ac:	bf00      	nop
    c2ae:	3708      	adds	r7, #8
    c2b0:	46bd      	mov	sp, r7
    c2b2:	bd80      	pop	{r7, pc}
    c2b4:	0000c105 	.word	0x0000c105

0000c2b8 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    c2b8:	b580      	push	{r7, lr}
    c2ba:	b082      	sub	sp, #8
    c2bc:	af00      	add	r7, sp, #0
    c2be:	4603      	mov	r3, r0
    c2c0:	71fb      	strb	r3, [r7, #7]
    c2c2:	460b      	mov	r3, r1
    c2c4:	71bb      	strb	r3, [r7, #6]
    c2c6:	4613      	mov	r3, r2
    c2c8:	717b      	strb	r3, [r7, #5]
	if (en) {
    c2ca:	797b      	ldrb	r3, [r7, #5]
    c2cc:	2b00      	cmp	r3, #0
    c2ce:	d008      	beq.n	c2e2 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    c2d0:	79bb      	ldrb	r3, [r7, #6]
    c2d2:	2220      	movs	r2, #32
    c2d4:	409a      	lsls	r2, r3
    c2d6:	79fb      	ldrb	r3, [r7, #7]
    c2d8:	4611      	mov	r1, r2
    c2da:	4618      	mov	r0, r3
    c2dc:	4b07      	ldr	r3, [pc, #28]	; (c2fc <_usbd_ep_int_stall_en+0x44>)
    c2de:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    c2e0:	e007      	b.n	c2f2 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    c2e2:	79bb      	ldrb	r3, [r7, #6]
    c2e4:	2220      	movs	r2, #32
    c2e6:	409a      	lsls	r2, r3
    c2e8:	79fb      	ldrb	r3, [r7, #7]
    c2ea:	4611      	mov	r1, r2
    c2ec:	4618      	mov	r0, r3
    c2ee:	4b04      	ldr	r3, [pc, #16]	; (c300 <_usbd_ep_int_stall_en+0x48>)
    c2f0:	4798      	blx	r3
}
    c2f2:	bf00      	nop
    c2f4:	3708      	adds	r7, #8
    c2f6:	46bd      	mov	sp, r7
    c2f8:	bd80      	pop	{r7, pc}
    c2fa:	bf00      	nop
    c2fc:	0000c12d 	.word	0x0000c12d
    c300:	0000c155 	.word	0x0000c155

0000c304 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    c304:	b580      	push	{r7, lr}
    c306:	b082      	sub	sp, #8
    c308:	af00      	add	r7, sp, #0
    c30a:	4603      	mov	r3, r0
    c30c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    c30e:	79fb      	ldrb	r3, [r7, #7]
    c310:	4619      	mov	r1, r3
    c312:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c316:	4b03      	ldr	r3, [pc, #12]	; (c324 <_usbd_ep_stop_setup+0x20>)
    c318:	4798      	blx	r3
}
    c31a:	bf00      	nop
    c31c:	3708      	adds	r7, #8
    c31e:	46bd      	mov	sp, r7
    c320:	bd80      	pop	{r7, pc}
    c322:	bf00      	nop
    c324:	0000bc89 	.word	0x0000bc89

0000c328 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    c328:	b580      	push	{r7, lr}
    c32a:	b082      	sub	sp, #8
    c32c:	af00      	add	r7, sp, #0
    c32e:	4603      	mov	r3, r0
    c330:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    c332:	79fb      	ldrb	r3, [r7, #7]
    c334:	2210      	movs	r2, #16
    c336:	4619      	mov	r1, r3
    c338:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c33c:	4b05      	ldr	r3, [pc, #20]	; (c354 <_usbd_ep_is_setup+0x2c>)
    c33e:	4798      	blx	r3
    c340:	4603      	mov	r3, r0
    c342:	2b00      	cmp	r3, #0
    c344:	bf14      	ite	ne
    c346:	2301      	movne	r3, #1
    c348:	2300      	moveq	r3, #0
    c34a:	b2db      	uxtb	r3, r3
}
    c34c:	4618      	mov	r0, r3
    c34e:	3708      	adds	r7, #8
    c350:	46bd      	mov	sp, r7
    c352:	bd80      	pop	{r7, pc}
    c354:	0000bb7f 	.word	0x0000bb7f

0000c358 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    c358:	b580      	push	{r7, lr}
    c35a:	b082      	sub	sp, #8
    c35c:	af00      	add	r7, sp, #0
    c35e:	4603      	mov	r3, r0
    c360:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    c362:	79fb      	ldrb	r3, [r7, #7]
    c364:	2110      	movs	r1, #16
    c366:	4618      	mov	r0, r3
    c368:	4b02      	ldr	r3, [pc, #8]	; (c374 <_usbd_ep_ack_setup+0x1c>)
    c36a:	4798      	blx	r3
}
    c36c:	bf00      	nop
    c36e:	3708      	adds	r7, #8
    c370:	46bd      	mov	sp, r7
    c372:	bd80      	pop	{r7, pc}
    c374:	0000c105 	.word	0x0000c105

0000c378 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    c378:	b580      	push	{r7, lr}
    c37a:	b082      	sub	sp, #8
    c37c:	af00      	add	r7, sp, #0
    c37e:	4603      	mov	r3, r0
    c380:	71fb      	strb	r3, [r7, #7]
    c382:	460b      	mov	r3, r1
    c384:	71bb      	strb	r3, [r7, #6]
    c386:	4613      	mov	r3, r2
    c388:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    c38a:	797b      	ldrb	r3, [r7, #5]
    c38c:	2b00      	cmp	r3, #0
    c38e:	d00b      	beq.n	c3a8 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    c390:	79bb      	ldrb	r3, [r7, #6]
    c392:	2201      	movs	r2, #1
    c394:	fa02 f303 	lsl.w	r3, r2, r3
    c398:	b2da      	uxtb	r2, r3
    c39a:	79fb      	ldrb	r3, [r7, #7]
    c39c:	4619      	mov	r1, r3
    c39e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c3a2:	4b09      	ldr	r3, [pc, #36]	; (c3c8 <_usbd_ep_set_toggle+0x50>)
    c3a4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    c3a6:	e00a      	b.n	c3be <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    c3a8:	79bb      	ldrb	r3, [r7, #6]
    c3aa:	2201      	movs	r2, #1
    c3ac:	fa02 f303 	lsl.w	r3, r2, r3
    c3b0:	b2da      	uxtb	r2, r3
    c3b2:	79fb      	ldrb	r3, [r7, #7]
    c3b4:	4619      	mov	r1, r3
    c3b6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c3ba:	4b04      	ldr	r3, [pc, #16]	; (c3cc <_usbd_ep_set_toggle+0x54>)
    c3bc:	4798      	blx	r3
}
    c3be:	bf00      	nop
    c3c0:	3708      	adds	r7, #8
    c3c2:	46bd      	mov	sp, r7
    c3c4:	bd80      	pop	{r7, pc}
    c3c6:	bf00      	nop
    c3c8:	0000bc09 	.word	0x0000bc09
    c3cc:	0000bc5d 	.word	0x0000bc5d

0000c3d0 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    c3d0:	b580      	push	{r7, lr}
    c3d2:	b082      	sub	sp, #8
    c3d4:	af00      	add	r7, sp, #0
    c3d6:	4603      	mov	r3, r0
    c3d8:	460a      	mov	r2, r1
    c3da:	71fb      	strb	r3, [r7, #7]
    c3dc:	4613      	mov	r3, r2
    c3de:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    c3e0:	79bb      	ldrb	r3, [r7, #6]
    c3e2:	2201      	movs	r2, #1
    c3e4:	409a      	lsls	r2, r3
    c3e6:	79fb      	ldrb	r3, [r7, #7]
    c3e8:	4611      	mov	r1, r2
    c3ea:	4618      	mov	r0, r3
    c3ec:	4b02      	ldr	r3, [pc, #8]	; (c3f8 <_usbd_ep_ack_io_cpt+0x28>)
    c3ee:	4798      	blx	r3
}
    c3f0:	bf00      	nop
    c3f2:	3708      	adds	r7, #8
    c3f4:	46bd      	mov	sp, r7
    c3f6:	bd80      	pop	{r7, pc}
    c3f8:	0000c105 	.word	0x0000c105

0000c3fc <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    c3fc:	b480      	push	{r7}
    c3fe:	b085      	sub	sp, #20
    c400:	af00      	add	r7, sp, #0
    c402:	4603      	mov	r3, r0
    c404:	603a      	str	r2, [r7, #0]
    c406:	71fb      	strb	r3, [r7, #7]
    c408:	460b      	mov	r3, r1
    c40a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c40c:	79fa      	ldrb	r2, [r7, #7]
    c40e:	79bb      	ldrb	r3, [r7, #6]
    c410:	0052      	lsls	r2, r2, #1
    c412:	4413      	add	r3, r2
    c414:	011b      	lsls	r3, r3, #4
    c416:	4a06      	ldr	r2, [pc, #24]	; (c430 <_usbd_ep_set_buf+0x34>)
    c418:	4413      	add	r3, r2
    c41a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    c41c:	68fb      	ldr	r3, [r7, #12]
    c41e:	683a      	ldr	r2, [r7, #0]
    c420:	601a      	str	r2, [r3, #0]
}
    c422:	bf00      	nop
    c424:	3714      	adds	r7, #20
    c426:	46bd      	mov	sp, r7
    c428:	f85d 7b04 	ldr.w	r7, [sp], #4
    c42c:	4770      	bx	lr
    c42e:	bf00      	nop
    c430:	200032b4 	.word	0x200032b4

0000c434 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    c434:	b480      	push	{r7}
    c436:	b085      	sub	sp, #20
    c438:	af00      	add	r7, sp, #0
    c43a:	4603      	mov	r3, r0
    c43c:	71fb      	strb	r3, [r7, #7]
    c43e:	460b      	mov	r3, r1
    c440:	71bb      	strb	r3, [r7, #6]
    c442:	4613      	mov	r3, r2
    c444:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c446:	79fa      	ldrb	r2, [r7, #7]
    c448:	79bb      	ldrb	r3, [r7, #6]
    c44a:	0052      	lsls	r2, r2, #1
    c44c:	4413      	add	r3, r2
    c44e:	011b      	lsls	r3, r3, #4
    c450:	4a08      	ldr	r2, [pc, #32]	; (c474 <_usbd_ep_set_in_count+0x40>)
    c452:	4413      	add	r3, r2
    c454:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    c456:	88bb      	ldrh	r3, [r7, #4]
    c458:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c45c:	b299      	uxth	r1, r3
    c45e:	68fa      	ldr	r2, [r7, #12]
    c460:	6853      	ldr	r3, [r2, #4]
    c462:	f361 339b 	bfi	r3, r1, #14, #14
    c466:	6053      	str	r3, [r2, #4]
}
    c468:	bf00      	nop
    c46a:	3714      	adds	r7, #20
    c46c:	46bd      	mov	sp, r7
    c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c472:	4770      	bx	lr
    c474:	200032b4 	.word	0x200032b4

0000c478 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    c478:	b480      	push	{r7}
    c47a:	b085      	sub	sp, #20
    c47c:	af00      	add	r7, sp, #0
    c47e:	4603      	mov	r3, r0
    c480:	71fb      	strb	r3, [r7, #7]
    c482:	460b      	mov	r3, r1
    c484:	71bb      	strb	r3, [r7, #6]
    c486:	4613      	mov	r3, r2
    c488:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c48a:	79fa      	ldrb	r2, [r7, #7]
    c48c:	79bb      	ldrb	r3, [r7, #6]
    c48e:	0052      	lsls	r2, r2, #1
    c490:	4413      	add	r3, r2
    c492:	011b      	lsls	r3, r3, #4
    c494:	4a08      	ldr	r2, [pc, #32]	; (c4b8 <_usbd_ep_set_in_size+0x40>)
    c496:	4413      	add	r3, r2
    c498:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    c49a:	88bb      	ldrh	r3, [r7, #4]
    c49c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c4a0:	b299      	uxth	r1, r3
    c4a2:	68fa      	ldr	r2, [r7, #12]
    c4a4:	6853      	ldr	r3, [r2, #4]
    c4a6:	f361 030d 	bfi	r3, r1, #0, #14
    c4aa:	6053      	str	r3, [r2, #4]
}
    c4ac:	bf00      	nop
    c4ae:	3714      	adds	r7, #20
    c4b0:	46bd      	mov	sp, r7
    c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4b6:	4770      	bx	lr
    c4b8:	200032b4 	.word	0x200032b4

0000c4bc <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    c4bc:	b480      	push	{r7}
    c4be:	b085      	sub	sp, #20
    c4c0:	af00      	add	r7, sp, #0
    c4c2:	4603      	mov	r3, r0
    c4c4:	71fb      	strb	r3, [r7, #7]
    c4c6:	460b      	mov	r3, r1
    c4c8:	71bb      	strb	r3, [r7, #6]
    c4ca:	4613      	mov	r3, r2
    c4cc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c4ce:	79fa      	ldrb	r2, [r7, #7]
    c4d0:	79bb      	ldrb	r3, [r7, #6]
    c4d2:	0052      	lsls	r2, r2, #1
    c4d4:	4413      	add	r3, r2
    c4d6:	011b      	lsls	r3, r3, #4
    c4d8:	4a08      	ldr	r2, [pc, #32]	; (c4fc <_usbd_ep_set_out_count+0x40>)
    c4da:	4413      	add	r3, r2
    c4dc:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    c4de:	88bb      	ldrh	r3, [r7, #4]
    c4e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c4e4:	b299      	uxth	r1, r3
    c4e6:	68fa      	ldr	r2, [r7, #12]
    c4e8:	6853      	ldr	r3, [r2, #4]
    c4ea:	f361 030d 	bfi	r3, r1, #0, #14
    c4ee:	6053      	str	r3, [r2, #4]
}
    c4f0:	bf00      	nop
    c4f2:	3714      	adds	r7, #20
    c4f4:	46bd      	mov	sp, r7
    c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4fa:	4770      	bx	lr
    c4fc:	200032b4 	.word	0x200032b4

0000c500 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    c500:	b480      	push	{r7}
    c502:	b085      	sub	sp, #20
    c504:	af00      	add	r7, sp, #0
    c506:	4603      	mov	r3, r0
    c508:	71fb      	strb	r3, [r7, #7]
    c50a:	460b      	mov	r3, r1
    c50c:	71bb      	strb	r3, [r7, #6]
    c50e:	4613      	mov	r3, r2
    c510:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c512:	79fa      	ldrb	r2, [r7, #7]
    c514:	79bb      	ldrb	r3, [r7, #6]
    c516:	0052      	lsls	r2, r2, #1
    c518:	4413      	add	r3, r2
    c51a:	011b      	lsls	r3, r3, #4
    c51c:	4a08      	ldr	r2, [pc, #32]	; (c540 <_usbd_ep_set_out_size+0x40>)
    c51e:	4413      	add	r3, r2
    c520:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    c522:	88bb      	ldrh	r3, [r7, #4]
    c524:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c528:	b299      	uxth	r1, r3
    c52a:	68fa      	ldr	r2, [r7, #12]
    c52c:	6853      	ldr	r3, [r2, #4]
    c52e:	f361 339b 	bfi	r3, r1, #14, #14
    c532:	6053      	str	r3, [r2, #4]
}
    c534:	bf00      	nop
    c536:	3714      	adds	r7, #20
    c538:	46bd      	mov	sp, r7
    c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c53e:	4770      	bx	lr
    c540:	200032b4 	.word	0x200032b4

0000c544 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    c544:	b580      	push	{r7, lr}
    c546:	b084      	sub	sp, #16
    c548:	af00      	add	r7, sp, #0
    c54a:	60ba      	str	r2, [r7, #8]
    c54c:	607b      	str	r3, [r7, #4]
    c54e:	4603      	mov	r3, r0
    c550:	73fb      	strb	r3, [r7, #15]
    c552:	460b      	mov	r3, r1
    c554:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    c556:	68bb      	ldr	r3, [r7, #8]
    c558:	b29a      	uxth	r2, r3
    c55a:	7bb9      	ldrb	r1, [r7, #14]
    c55c:	7bfb      	ldrb	r3, [r7, #15]
    c55e:	4618      	mov	r0, r3
    c560:	4b06      	ldr	r3, [pc, #24]	; (c57c <_usbd_ep_set_in_trans+0x38>)
    c562:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    c564:	687b      	ldr	r3, [r7, #4]
    c566:	b29a      	uxth	r2, r3
    c568:	7bb9      	ldrb	r1, [r7, #14]
    c56a:	7bfb      	ldrb	r3, [r7, #15]
    c56c:	4618      	mov	r0, r3
    c56e:	4b04      	ldr	r3, [pc, #16]	; (c580 <_usbd_ep_set_in_trans+0x3c>)
    c570:	4798      	blx	r3
}
    c572:	bf00      	nop
    c574:	3710      	adds	r7, #16
    c576:	46bd      	mov	sp, r7
    c578:	bd80      	pop	{r7, pc}
    c57a:	bf00      	nop
    c57c:	0000c479 	.word	0x0000c479
    c580:	0000c435 	.word	0x0000c435

0000c584 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    c584:	b580      	push	{r7, lr}
    c586:	b084      	sub	sp, #16
    c588:	af00      	add	r7, sp, #0
    c58a:	60ba      	str	r2, [r7, #8]
    c58c:	607b      	str	r3, [r7, #4]
    c58e:	4603      	mov	r3, r0
    c590:	73fb      	strb	r3, [r7, #15]
    c592:	460b      	mov	r3, r1
    c594:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    c596:	68bb      	ldr	r3, [r7, #8]
    c598:	b29a      	uxth	r2, r3
    c59a:	7bb9      	ldrb	r1, [r7, #14]
    c59c:	7bfb      	ldrb	r3, [r7, #15]
    c59e:	4618      	mov	r0, r3
    c5a0:	4b06      	ldr	r3, [pc, #24]	; (c5bc <_usbd_ep_set_out_trans+0x38>)
    c5a2:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    c5a4:	687b      	ldr	r3, [r7, #4]
    c5a6:	b29a      	uxth	r2, r3
    c5a8:	7bb9      	ldrb	r1, [r7, #14]
    c5aa:	7bfb      	ldrb	r3, [r7, #15]
    c5ac:	4618      	mov	r0, r3
    c5ae:	4b04      	ldr	r3, [pc, #16]	; (c5c0 <_usbd_ep_set_out_trans+0x3c>)
    c5b0:	4798      	blx	r3
}
    c5b2:	bf00      	nop
    c5b4:	3710      	adds	r7, #16
    c5b6:	46bd      	mov	sp, r7
    c5b8:	bd80      	pop	{r7, pc}
    c5ba:	bf00      	nop
    c5bc:	0000c501 	.word	0x0000c501
    c5c0:	0000c4bd 	.word	0x0000c4bd

0000c5c4 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    c5c4:	b480      	push	{r7}
    c5c6:	b085      	sub	sp, #20
    c5c8:	af00      	add	r7, sp, #0
    c5ca:	4603      	mov	r3, r0
    c5cc:	460a      	mov	r2, r1
    c5ce:	71fb      	strb	r3, [r7, #7]
    c5d0:	4613      	mov	r3, r2
    c5d2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c5d4:	79fa      	ldrb	r2, [r7, #7]
    c5d6:	79bb      	ldrb	r3, [r7, #6]
    c5d8:	0052      	lsls	r2, r2, #1
    c5da:	4413      	add	r3, r2
    c5dc:	011b      	lsls	r3, r3, #4
    c5de:	4a06      	ldr	r2, [pc, #24]	; (c5f8 <_usbd_ep_clear_bank_status+0x34>)
    c5e0:	4413      	add	r3, r2
    c5e2:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    c5e4:	68fb      	ldr	r3, [r7, #12]
    c5e6:	2200      	movs	r2, #0
    c5e8:	729a      	strb	r2, [r3, #10]
}
    c5ea:	bf00      	nop
    c5ec:	3714      	adds	r7, #20
    c5ee:	46bd      	mov	sp, r7
    c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5f4:	4770      	bx	lr
    c5f6:	bf00      	nop
    c5f8:	200032b4 	.word	0x200032b4

0000c5fc <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    c5fc:	b580      	push	{r7, lr}
    c5fe:	b082      	sub	sp, #8
    c600:	af00      	add	r7, sp, #0
    c602:	4603      	mov	r3, r0
    c604:	71fb      	strb	r3, [r7, #7]
    c606:	460b      	mov	r3, r1
    c608:	71bb      	strb	r3, [r7, #6]
    c60a:	4613      	mov	r3, r2
    c60c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    c60e:	797b      	ldrb	r3, [r7, #5]
    c610:	2b00      	cmp	r3, #0
    c612:	d00b      	beq.n	c62c <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c614:	79bb      	ldrb	r3, [r7, #6]
    c616:	2240      	movs	r2, #64	; 0x40
    c618:	fa02 f303 	lsl.w	r3, r2, r3
    c61c:	b2da      	uxtb	r2, r3
    c61e:	79fb      	ldrb	r3, [r7, #7]
    c620:	4619      	mov	r1, r3
    c622:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c626:	4b09      	ldr	r3, [pc, #36]	; (c64c <_usbd_ep_set_in_rdy+0x50>)
    c628:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    c62a:	e00a      	b.n	c642 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c62c:	79bb      	ldrb	r3, [r7, #6]
    c62e:	2240      	movs	r2, #64	; 0x40
    c630:	fa02 f303 	lsl.w	r3, r2, r3
    c634:	b2da      	uxtb	r2, r3
    c636:	79fb      	ldrb	r3, [r7, #7]
    c638:	4619      	mov	r1, r3
    c63a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c63e:	4b04      	ldr	r3, [pc, #16]	; (c650 <_usbd_ep_set_in_rdy+0x54>)
    c640:	4798      	blx	r3
}
    c642:	bf00      	nop
    c644:	3708      	adds	r7, #8
    c646:	46bd      	mov	sp, r7
    c648:	bd80      	pop	{r7, pc}
    c64a:	bf00      	nop
    c64c:	0000bc09 	.word	0x0000bc09
    c650:	0000bc5d 	.word	0x0000bc5d

0000c654 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    c654:	b580      	push	{r7, lr}
    c656:	b082      	sub	sp, #8
    c658:	af00      	add	r7, sp, #0
    c65a:	4603      	mov	r3, r0
    c65c:	71fb      	strb	r3, [r7, #7]
    c65e:	460b      	mov	r3, r1
    c660:	71bb      	strb	r3, [r7, #6]
    c662:	4613      	mov	r3, r2
    c664:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    c666:	797b      	ldrb	r3, [r7, #5]
    c668:	2b00      	cmp	r3, #0
    c66a:	d00b      	beq.n	c684 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c66c:	79bb      	ldrb	r3, [r7, #6]
    c66e:	2240      	movs	r2, #64	; 0x40
    c670:	fa02 f303 	lsl.w	r3, r2, r3
    c674:	b2da      	uxtb	r2, r3
    c676:	79fb      	ldrb	r3, [r7, #7]
    c678:	4619      	mov	r1, r3
    c67a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c67e:	4b09      	ldr	r3, [pc, #36]	; (c6a4 <_usbd_ep_set_out_rdy+0x50>)
    c680:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    c682:	e00a      	b.n	c69a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c684:	79bb      	ldrb	r3, [r7, #6]
    c686:	2240      	movs	r2, #64	; 0x40
    c688:	fa02 f303 	lsl.w	r3, r2, r3
    c68c:	b2da      	uxtb	r2, r3
    c68e:	79fb      	ldrb	r3, [r7, #7]
    c690:	4619      	mov	r1, r3
    c692:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c696:	4b04      	ldr	r3, [pc, #16]	; (c6a8 <_usbd_ep_set_out_rdy+0x54>)
    c698:	4798      	blx	r3
}
    c69a:	bf00      	nop
    c69c:	3708      	adds	r7, #8
    c69e:	46bd      	mov	sp, r7
    c6a0:	bd80      	pop	{r7, pc}
    c6a2:	bf00      	nop
    c6a4:	0000bc5d 	.word	0x0000bc5d
    c6a8:	0000bc09 	.word	0x0000bc09

0000c6ac <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    c6ac:	b480      	push	{r7}
    c6ae:	b083      	sub	sp, #12
    c6b0:	af00      	add	r7, sp, #0
    c6b2:	4603      	mov	r3, r0
    c6b4:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    c6b6:	88fb      	ldrh	r3, [r7, #6]
    c6b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c6bc:	d820      	bhi.n	c700 <_usbd_ep_pcksize_size+0x54>
    c6be:	88fb      	ldrh	r3, [r7, #6]
    c6c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c6c4:	d81a      	bhi.n	c6fc <_usbd_ep_pcksize_size+0x50>
    c6c6:	88fb      	ldrh	r3, [r7, #6]
    c6c8:	2b80      	cmp	r3, #128	; 0x80
    c6ca:	d815      	bhi.n	c6f8 <_usbd_ep_pcksize_size+0x4c>
    c6cc:	88fb      	ldrh	r3, [r7, #6]
    c6ce:	2b40      	cmp	r3, #64	; 0x40
    c6d0:	d810      	bhi.n	c6f4 <_usbd_ep_pcksize_size+0x48>
    c6d2:	88fb      	ldrh	r3, [r7, #6]
    c6d4:	2b20      	cmp	r3, #32
    c6d6:	d80b      	bhi.n	c6f0 <_usbd_ep_pcksize_size+0x44>
    c6d8:	88fb      	ldrh	r3, [r7, #6]
    c6da:	2b10      	cmp	r3, #16
    c6dc:	d806      	bhi.n	c6ec <_usbd_ep_pcksize_size+0x40>
    c6de:	88fb      	ldrh	r3, [r7, #6]
    c6e0:	2b08      	cmp	r3, #8
    c6e2:	bf8c      	ite	hi
    c6e4:	2301      	movhi	r3, #1
    c6e6:	2300      	movls	r3, #0
    c6e8:	b2db      	uxtb	r3, r3
    c6ea:	e00a      	b.n	c702 <_usbd_ep_pcksize_size+0x56>
    c6ec:	2302      	movs	r3, #2
    c6ee:	e008      	b.n	c702 <_usbd_ep_pcksize_size+0x56>
    c6f0:	2303      	movs	r3, #3
    c6f2:	e006      	b.n	c702 <_usbd_ep_pcksize_size+0x56>
    c6f4:	2304      	movs	r3, #4
    c6f6:	e004      	b.n	c702 <_usbd_ep_pcksize_size+0x56>
    c6f8:	2305      	movs	r3, #5
    c6fa:	e002      	b.n	c702 <_usbd_ep_pcksize_size+0x56>
    c6fc:	2306      	movs	r3, #6
    c6fe:	e000      	b.n	c702 <_usbd_ep_pcksize_size+0x56>
    c700:	2307      	movs	r3, #7
}
    c702:	4618      	mov	r0, r3
    c704:	370c      	adds	r7, #12
    c706:	46bd      	mov	sp, r7
    c708:	f85d 7b04 	ldr.w	r7, [sp], #4
    c70c:	4770      	bx	lr
	...

0000c710 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    c710:	b480      	push	{r7}
    c712:	b085      	sub	sp, #20
    c714:	af00      	add	r7, sp, #0
    c716:	4603      	mov	r3, r0
    c718:	460a      	mov	r2, r1
    c71a:	71fb      	strb	r3, [r7, #7]
    c71c:	4613      	mov	r3, r2
    c71e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    c720:	79fb      	ldrb	r3, [r7, #7]
    c722:	2b00      	cmp	r3, #0
    c724:	d008      	beq.n	c738 <_usb_d_dev_ept+0x28>
    c726:	79bb      	ldrb	r3, [r7, #6]
    c728:	2b00      	cmp	r3, #0
    c72a:	d003      	beq.n	c734 <_usb_d_dev_ept+0x24>
    c72c:	79fb      	ldrb	r3, [r7, #7]
    c72e:	3304      	adds	r3, #4
    c730:	b2db      	uxtb	r3, r3
    c732:	e002      	b.n	c73a <_usb_d_dev_ept+0x2a>
    c734:	79fb      	ldrb	r3, [r7, #7]
    c736:	e000      	b.n	c73a <_usb_d_dev_ept+0x2a>
    c738:	2300      	movs	r3, #0
    c73a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    c73c:	7bfa      	ldrb	r2, [r7, #15]
    c73e:	4613      	mov	r3, r2
    c740:	009b      	lsls	r3, r3, #2
    c742:	4413      	add	r3, r2
    c744:	009b      	lsls	r3, r3, #2
    c746:	3310      	adds	r3, #16
    c748:	4a04      	ldr	r2, [pc, #16]	; (c75c <_usb_d_dev_ept+0x4c>)
    c74a:	4413      	add	r3, r2
    c74c:	3304      	adds	r3, #4
}
    c74e:	4618      	mov	r0, r3
    c750:	3714      	adds	r7, #20
    c752:	46bd      	mov	sp, r7
    c754:	f85d 7b04 	ldr.w	r7, [sp], #4
    c758:	4770      	bx	lr
    c75a:	bf00      	nop
    c75c:	200031ec 	.word	0x200031ec

0000c760 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    c760:	b580      	push	{r7, lr}
    c762:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    c764:	2104      	movs	r1, #4
    c766:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c76a:	4b03      	ldr	r3, [pc, #12]	; (c778 <_usb_d_dev_sof+0x18>)
    c76c:	4798      	blx	r3
	dev_inst.callbacks.sof();
    c76e:	4b03      	ldr	r3, [pc, #12]	; (c77c <_usb_d_dev_sof+0x1c>)
    c770:	681b      	ldr	r3, [r3, #0]
    c772:	4798      	blx	r3
}
    c774:	bf00      	nop
    c776:	bd80      	pop	{r7, pc}
    c778:	0000bdd7 	.word	0x0000bdd7
    c77c:	200031ec 	.word	0x200031ec

0000c780 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    c780:	b580      	push	{r7, lr}
    c782:	b084      	sub	sp, #16
    c784:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    c786:	2300      	movs	r3, #0
    c788:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c78a:	f240 2101 	movw	r1, #513	; 0x201
    c78e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c792:	4b1a      	ldr	r3, [pc, #104]	; (c7fc <_usb_d_dev_lpmsusp+0x7c>)
    c794:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c796:	f240 2101 	movw	r1, #513	; 0x201
    c79a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c79e:	4b18      	ldr	r3, [pc, #96]	; (c800 <_usb_d_dev_lpmsusp+0x80>)
    c7a0:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c7a2:	2170      	movs	r1, #112	; 0x70
    c7a4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c7a8:	4b16      	ldr	r3, [pc, #88]	; (c804 <_usb_d_dev_lpmsusp+0x84>)
    c7aa:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    c7ac:	2300      	movs	r3, #0
    c7ae:	73fb      	strb	r3, [r7, #15]
    c7b0:	e018      	b.n	c7e4 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    c7b2:	7bfb      	ldrb	r3, [r7, #15]
    c7b4:	015b      	lsls	r3, r3, #5
    c7b6:	4a14      	ldr	r2, [pc, #80]	; (c808 <_usb_d_dev_lpmsusp+0x88>)
    c7b8:	4413      	add	r3, r2
    c7ba:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    c7bc:	687b      	ldr	r3, [r7, #4]
    c7be:	891b      	ldrh	r3, [r3, #8]
    c7c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
    c7c4:	b2db      	uxtb	r3, r3
    c7c6:	2b03      	cmp	r3, #3
    c7c8:	d109      	bne.n	c7de <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    c7ca:	687b      	ldr	r3, [r7, #4]
    c7cc:	891b      	ldrh	r3, [r3, #8]
    c7ce:	f3c3 130a 	ubfx	r3, r3, #4, #11
    c7d2:	b29b      	uxth	r3, r3
    c7d4:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    c7d6:	687b      	ldr	r3, [r7, #4]
    c7d8:	2200      	movs	r2, #0
    c7da:	811a      	strh	r2, [r3, #8]
			break;
    c7dc:	e005      	b.n	c7ea <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    c7de:	7bfb      	ldrb	r3, [r7, #15]
    c7e0:	3301      	adds	r3, #1
    c7e2:	73fb      	strb	r3, [r7, #15]
    c7e4:	7bfb      	ldrb	r3, [r7, #15]
    c7e6:	2b03      	cmp	r3, #3
    c7e8:	d9e3      	bls.n	c7b2 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    c7ea:	4b08      	ldr	r3, [pc, #32]	; (c80c <_usb_d_dev_lpmsusp+0x8c>)
    c7ec:	685b      	ldr	r3, [r3, #4]
    c7ee:	68b9      	ldr	r1, [r7, #8]
    c7f0:	2003      	movs	r0, #3
    c7f2:	4798      	blx	r3
}
    c7f4:	bf00      	nop
    c7f6:	3710      	adds	r7, #16
    c7f8:	46bd      	mov	sp, r7
    c7fa:	bd80      	pop	{r7, pc}
    c7fc:	0000bdd7 	.word	0x0000bdd7
    c800:	0000be2d 	.word	0x0000be2d
    c804:	0000bdf5 	.word	0x0000bdf5
    c808:	200032b4 	.word	0x200032b4
    c80c:	200031ec 	.word	0x200031ec

0000c810 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    c810:	b580      	push	{r7, lr}
    c812:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    c814:	2180      	movs	r1, #128	; 0x80
    c816:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c81a:	4b04      	ldr	r3, [pc, #16]	; (c82c <_usb_d_dev_ramerr+0x1c>)
    c81c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    c81e:	4b04      	ldr	r3, [pc, #16]	; (c830 <_usb_d_dev_ramerr+0x20>)
    c820:	685b      	ldr	r3, [r3, #4]
    c822:	2100      	movs	r1, #0
    c824:	2005      	movs	r0, #5
    c826:	4798      	blx	r3
}
    c828:	bf00      	nop
    c82a:	bd80      	pop	{r7, pc}
    c82c:	0000bdd7 	.word	0x0000bdd7
    c830:	200031ec 	.word	0x200031ec

0000c834 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    c834:	b580      	push	{r7, lr}
    c836:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c838:	2170      	movs	r1, #112	; 0x70
    c83a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c83e:	4b0b      	ldr	r3, [pc, #44]	; (c86c <_usb_d_dev_wakeup+0x38>)
    c840:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c842:	2170      	movs	r1, #112	; 0x70
    c844:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c848:	4b09      	ldr	r3, [pc, #36]	; (c870 <_usb_d_dev_wakeup+0x3c>)
    c84a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c84c:	f240 2101 	movw	r1, #513	; 0x201
    c850:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c854:	4b07      	ldr	r3, [pc, #28]	; (c874 <_usb_d_dev_wakeup+0x40>)
    c856:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    c858:	2000      	movs	r0, #0
    c85a:	4b07      	ldr	r3, [pc, #28]	; (c878 <_usb_d_dev_wakeup+0x44>)
    c85c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    c85e:	4b07      	ldr	r3, [pc, #28]	; (c87c <_usb_d_dev_wakeup+0x48>)
    c860:	685b      	ldr	r3, [r3, #4]
    c862:	2100      	movs	r1, #0
    c864:	2002      	movs	r0, #2
    c866:	4798      	blx	r3
}
    c868:	bf00      	nop
    c86a:	bd80      	pop	{r7, pc}
    c86c:	0000bdd7 	.word	0x0000bdd7
    c870:	0000be2d 	.word	0x0000be2d
    c874:	0000bdf5 	.word	0x0000bdf5
    c878:	0000c0d5 	.word	0x0000c0d5
    c87c:	200031ec 	.word	0x200031ec

0000c880 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    c880:	b580      	push	{r7, lr}
    c882:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    c884:	2200      	movs	r2, #0
    c886:	2100      	movs	r1, #0
    c888:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c88c:	4b0d      	ldr	r3, [pc, #52]	; (c8c4 <_usb_d_dev_reset+0x44>)
    c88e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    c890:	2108      	movs	r1, #8
    c892:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c896:	4b0c      	ldr	r3, [pc, #48]	; (c8c8 <_usb_d_dev_reset+0x48>)
    c898:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c89a:	2170      	movs	r1, #112	; 0x70
    c89c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c8a0:	4b0a      	ldr	r3, [pc, #40]	; (c8cc <_usb_d_dev_reset+0x4c>)
    c8a2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c8a4:	f240 2101 	movw	r1, #513	; 0x201
    c8a8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c8ac:	4b08      	ldr	r3, [pc, #32]	; (c8d0 <_usb_d_dev_reset+0x50>)
    c8ae:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    c8b0:	4b08      	ldr	r3, [pc, #32]	; (c8d4 <_usb_d_dev_reset+0x54>)
    c8b2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    c8b4:	4b08      	ldr	r3, [pc, #32]	; (c8d8 <_usb_d_dev_reset+0x58>)
    c8b6:	685b      	ldr	r3, [r3, #4]
    c8b8:	2100      	movs	r1, #0
    c8ba:	2001      	movs	r0, #1
    c8bc:	4798      	blx	r3
}
    c8be:	bf00      	nop
    c8c0:	bd80      	pop	{r7, pc}
    c8c2:	bf00      	nop
    c8c4:	0000bd6d 	.word	0x0000bd6d
    c8c8:	0000bdd7 	.word	0x0000bdd7
    c8cc:	0000be2d 	.word	0x0000be2d
    c8d0:	0000bdf5 	.word	0x0000bdf5
    c8d4:	0000d43d 	.word	0x0000d43d
    c8d8:	200031ec 	.word	0x200031ec

0000c8dc <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    c8dc:	b580      	push	{r7, lr}
    c8de:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c8e0:	f240 2101 	movw	r1, #513	; 0x201
    c8e4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c8e8:	4b09      	ldr	r3, [pc, #36]	; (c910 <_usb_d_dev_suspend+0x34>)
    c8ea:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c8ec:	f240 2101 	movw	r1, #513	; 0x201
    c8f0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c8f4:	4b07      	ldr	r3, [pc, #28]	; (c914 <_usb_d_dev_suspend+0x38>)
    c8f6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c8f8:	2170      	movs	r1, #112	; 0x70
    c8fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c8fe:	4b06      	ldr	r3, [pc, #24]	; (c918 <_usb_d_dev_suspend+0x3c>)
    c900:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    c902:	4b06      	ldr	r3, [pc, #24]	; (c91c <_usb_d_dev_suspend+0x40>)
    c904:	685b      	ldr	r3, [r3, #4]
    c906:	2100      	movs	r1, #0
    c908:	2004      	movs	r0, #4
    c90a:	4798      	blx	r3
}
    c90c:	bf00      	nop
    c90e:	bd80      	pop	{r7, pc}
    c910:	0000bdd7 	.word	0x0000bdd7
    c914:	0000be2d 	.word	0x0000be2d
    c918:	0000bdf5 	.word	0x0000bdf5
    c91c:	200031ec 	.word	0x200031ec

0000c920 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    c920:	b580      	push	{r7, lr}
    c922:	b082      	sub	sp, #8
    c924:	af00      	add	r7, sp, #0
	bool     rc    = true;
    c926:	2301      	movs	r3, #1
    c928:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    c92a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c92e:	4b22      	ldr	r3, [pc, #136]	; (c9b8 <_usb_d_dev_handle_nep+0x98>)
    c930:	4798      	blx	r3
    c932:	4603      	mov	r3, r0
    c934:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    c936:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c93a:	4b20      	ldr	r3, [pc, #128]	; (c9bc <_usb_d_dev_handle_nep+0x9c>)
    c93c:	4798      	blx	r3
    c93e:	4603      	mov	r3, r0
    c940:	461a      	mov	r2, r3
    c942:	88bb      	ldrh	r3, [r7, #4]
    c944:	4013      	ands	r3, r2
    c946:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    c948:	88bb      	ldrh	r3, [r7, #4]
    c94a:	f003 0304 	and.w	r3, r3, #4
    c94e:	2b00      	cmp	r3, #0
    c950:	d003      	beq.n	c95a <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    c952:	4b1b      	ldr	r3, [pc, #108]	; (c9c0 <_usb_d_dev_handle_nep+0xa0>)
    c954:	4798      	blx	r3
		return true;
    c956:	2301      	movs	r3, #1
    c958:	e02a      	b.n	c9b0 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    c95a:	88bb      	ldrh	r3, [r7, #4]
    c95c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    c960:	2b00      	cmp	r3, #0
    c962:	d002      	beq.n	c96a <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    c964:	4b17      	ldr	r3, [pc, #92]	; (c9c4 <_usb_d_dev_handle_nep+0xa4>)
    c966:	4798      	blx	r3
    c968:	e021      	b.n	c9ae <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    c96a:	88bb      	ldrh	r3, [r7, #4]
    c96c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c970:	2b00      	cmp	r3, #0
    c972:	d002      	beq.n	c97a <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    c974:	4b14      	ldr	r3, [pc, #80]	; (c9c8 <_usb_d_dev_handle_nep+0xa8>)
    c976:	4798      	blx	r3
    c978:	e019      	b.n	c9ae <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    c97a:	88bb      	ldrh	r3, [r7, #4]
    c97c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c980:	2b00      	cmp	r3, #0
    c982:	d002      	beq.n	c98a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    c984:	4b11      	ldr	r3, [pc, #68]	; (c9cc <_usb_d_dev_handle_nep+0xac>)
    c986:	4798      	blx	r3
    c988:	e011      	b.n	c9ae <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    c98a:	88bb      	ldrh	r3, [r7, #4]
    c98c:	f003 0308 	and.w	r3, r3, #8
    c990:	2b00      	cmp	r3, #0
    c992:	d002      	beq.n	c99a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    c994:	4b0e      	ldr	r3, [pc, #56]	; (c9d0 <_usb_d_dev_handle_nep+0xb0>)
    c996:	4798      	blx	r3
    c998:	e009      	b.n	c9ae <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    c99a:	88bb      	ldrh	r3, [r7, #4]
    c99c:	f003 0301 	and.w	r3, r3, #1
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	d002      	beq.n	c9aa <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    c9a4:	4b0b      	ldr	r3, [pc, #44]	; (c9d4 <_usb_d_dev_handle_nep+0xb4>)
    c9a6:	4798      	blx	r3
    c9a8:	e001      	b.n	c9ae <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    c9aa:	2300      	movs	r3, #0
    c9ac:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    c9ae:	79fb      	ldrb	r3, [r7, #7]
}
    c9b0:	4618      	mov	r0, r3
    c9b2:	3708      	adds	r7, #8
    c9b4:	46bd      	mov	sp, r7
    c9b6:	bd80      	pop	{r7, pc}
    c9b8:	0000bdbd 	.word	0x0000bdbd
    c9bc:	0000be13 	.word	0x0000be13
    c9c0:	0000c761 	.word	0x0000c761
    c9c4:	0000c781 	.word	0x0000c781
    c9c8:	0000c811 	.word	0x0000c811
    c9cc:	0000c835 	.word	0x0000c835
    c9d0:	0000c881 	.word	0x0000c881
    c9d4:	0000c8dd 	.word	0x0000c8dd

0000c9d8 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    c9d8:	b590      	push	{r4, r7, lr}
    c9da:	b089      	sub	sp, #36	; 0x24
    c9dc:	af00      	add	r7, sp, #0
    c9de:	6078      	str	r0, [r7, #4]
    c9e0:	460b      	mov	r3, r1
    c9e2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    c9e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c9e8:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    c9ea:	687b      	ldr	r3, [r7, #4]
    c9ec:	7c9b      	ldrb	r3, [r3, #18]
    c9ee:	f003 030f 	and.w	r3, r3, #15
    c9f2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    c9f4:	7dfb      	ldrb	r3, [r7, #23]
    c9f6:	015b      	lsls	r3, r3, #5
    c9f8:	4a73      	ldr	r2, [pc, #460]	; (cbc8 <_usb_d_dev_in_next+0x1f0>)
    c9fa:	4413      	add	r3, r2
    c9fc:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c9fe:	78fb      	ldrb	r3, [r7, #3]
    ca00:	2b00      	cmp	r3, #0
    ca02:	d006      	beq.n	ca12 <_usb_d_dev_in_next+0x3a>
    ca04:	693b      	ldr	r3, [r7, #16]
    ca06:	3310      	adds	r3, #16
    ca08:	685b      	ldr	r3, [r3, #4]
    ca0a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ca0e:	b29b      	uxth	r3, r3
    ca10:	e000      	b.n	ca14 <_usb_d_dev_in_next+0x3c>
    ca12:	2300      	movs	r3, #0
    ca14:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    ca16:	687b      	ldr	r3, [r7, #4]
    ca18:	8a1b      	ldrh	r3, [r3, #16]
    ca1a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ca1e:	4293      	cmp	r3, r2
    ca20:	d103      	bne.n	ca2a <_usb_d_dev_in_next+0x52>
    ca22:	687b      	ldr	r3, [r7, #4]
    ca24:	8a1b      	ldrh	r3, [r3, #16]
    ca26:	b21b      	sxth	r3, r3
    ca28:	e004      	b.n	ca34 <_usb_d_dev_in_next+0x5c>
    ca2a:	687b      	ldr	r3, [r7, #4]
    ca2c:	8a1b      	ldrh	r3, [r3, #16]
    ca2e:	3b01      	subs	r3, #1
    ca30:	b29b      	uxth	r3, r3
    ca32:	b21b      	sxth	r3, r3
    ca34:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    ca38:	4013      	ands	r3, r2
    ca3a:	b21b      	sxth	r3, r3
    ca3c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    ca3e:	2300      	movs	r3, #0
    ca40:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    ca42:	687b      	ldr	r3, [r7, #4]
    ca44:	7cdb      	ldrb	r3, [r3, #19]
    ca46:	f003 0307 	and.w	r3, r3, #7
    ca4a:	b2db      	uxtb	r3, r3
    ca4c:	2b01      	cmp	r3, #1
    ca4e:	bf0c      	ite	eq
    ca50:	2301      	moveq	r3, #1
    ca52:	2300      	movne	r3, #0
    ca54:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    ca56:	78fb      	ldrb	r3, [r7, #3]
    ca58:	2b00      	cmp	r3, #0
    ca5a:	d004      	beq.n	ca66 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    ca5c:	7dfb      	ldrb	r3, [r7, #23]
    ca5e:	2101      	movs	r1, #1
    ca60:	4618      	mov	r0, r3
    ca62:	4b5a      	ldr	r3, [pc, #360]	; (cbcc <_usb_d_dev_in_next+0x1f4>)
    ca64:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    ca66:	687b      	ldr	r3, [r7, #4]
    ca68:	689a      	ldr	r2, [r3, #8]
    ca6a:	89fb      	ldrh	r3, [r7, #14]
    ca6c:	441a      	add	r2, r3
    ca6e:	687b      	ldr	r3, [r7, #4]
    ca70:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    ca72:	687b      	ldr	r3, [r7, #4]
    ca74:	689a      	ldr	r2, [r3, #8]
    ca76:	687b      	ldr	r3, [r7, #4]
    ca78:	685b      	ldr	r3, [r3, #4]
    ca7a:	429a      	cmp	r2, r3
    ca7c:	d243      	bcs.n	cb06 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    ca7e:	687b      	ldr	r3, [r7, #4]
    ca80:	685b      	ldr	r3, [r3, #4]
    ca82:	b29a      	uxth	r2, r3
    ca84:	687b      	ldr	r3, [r7, #4]
    ca86:	689b      	ldr	r3, [r3, #8]
    ca88:	b29b      	uxth	r3, r3
    ca8a:	1ad3      	subs	r3, r2, r3
    ca8c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    ca8e:	687b      	ldr	r3, [r7, #4]
    ca90:	7cdb      	ldrb	r3, [r3, #19]
    ca92:	f003 0320 	and.w	r3, r3, #32
    ca96:	b2db      	uxtb	r3, r3
    ca98:	2b00      	cmp	r3, #0
    ca9a:	d01b      	beq.n	cad4 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    ca9c:	687b      	ldr	r3, [r7, #4]
    ca9e:	8a1b      	ldrh	r3, [r3, #16]
    caa0:	8bfa      	ldrh	r2, [r7, #30]
    caa2:	429a      	cmp	r2, r3
    caa4:	d902      	bls.n	caac <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    caa6:	687b      	ldr	r3, [r7, #4]
    caa8:	8a1b      	ldrh	r3, [r3, #16]
    caaa:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    caac:	687b      	ldr	r3, [r7, #4]
    caae:	68d8      	ldr	r0, [r3, #12]
    cab0:	687b      	ldr	r3, [r7, #4]
    cab2:	681a      	ldr	r2, [r3, #0]
    cab4:	687b      	ldr	r3, [r7, #4]
    cab6:	689b      	ldr	r3, [r3, #8]
    cab8:	4413      	add	r3, r2
    caba:	8bfa      	ldrh	r2, [r7, #30]
    cabc:	4619      	mov	r1, r3
    cabe:	4b44      	ldr	r3, [pc, #272]	; (cbd0 <_usb_d_dev_in_next+0x1f8>)
    cac0:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    cac2:	687b      	ldr	r3, [r7, #4]
    cac4:	68db      	ldr	r3, [r3, #12]
    cac6:	461a      	mov	r2, r3
    cac8:	7dfb      	ldrb	r3, [r7, #23]
    caca:	2101      	movs	r1, #1
    cacc:	4618      	mov	r0, r3
    cace:	4b41      	ldr	r3, [pc, #260]	; (cbd4 <_usb_d_dev_in_next+0x1fc>)
    cad0:	4798      	blx	r3
    cad2:	e011      	b.n	caf8 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    cad4:	8bfb      	ldrh	r3, [r7, #30]
    cad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    cada:	d902      	bls.n	cae2 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    cadc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    cae0:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    cae2:	687b      	ldr	r3, [r7, #4]
    cae4:	681a      	ldr	r2, [r3, #0]
    cae6:	687b      	ldr	r3, [r7, #4]
    cae8:	689b      	ldr	r3, [r3, #8]
    caea:	4413      	add	r3, r2
    caec:	461a      	mov	r2, r3
    caee:	7dfb      	ldrb	r3, [r7, #23]
    caf0:	2101      	movs	r1, #1
    caf2:	4618      	mov	r0, r3
    caf4:	4b37      	ldr	r3, [pc, #220]	; (cbd4 <_usb_d_dev_in_next+0x1fc>)
    caf6:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    caf8:	8bfa      	ldrh	r2, [r7, #30]
    cafa:	7df8      	ldrb	r0, [r7, #23]
    cafc:	2300      	movs	r3, #0
    cafe:	2101      	movs	r1, #1
    cb00:	4c35      	ldr	r4, [pc, #212]	; (cbd8 <_usb_d_dev_in_next+0x200>)
    cb02:	47a0      	blx	r4
		goto _in_tx_exec;
    cb04:	e041      	b.n	cb8a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    cb06:	687b      	ldr	r3, [r7, #4]
    cb08:	7cdb      	ldrb	r3, [r3, #19]
    cb0a:	f003 0310 	and.w	r3, r3, #16
    cb0e:	b2db      	uxtb	r3, r3
    cb10:	2b00      	cmp	r3, #0
    cb12:	d00b      	beq.n	cb2c <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    cb14:	687a      	ldr	r2, [r7, #4]
    cb16:	7cd3      	ldrb	r3, [r2, #19]
    cb18:	f36f 1304 	bfc	r3, #4, #1
    cb1c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    cb1e:	7df8      	ldrb	r0, [r7, #23]
    cb20:	2300      	movs	r3, #0
    cb22:	2200      	movs	r2, #0
    cb24:	2101      	movs	r1, #1
    cb26:	4c2c      	ldr	r4, [pc, #176]	; (cbd8 <_usb_d_dev_in_next+0x200>)
    cb28:	47a0      	blx	r4
		goto _in_tx_exec;
    cb2a:	e02e      	b.n	cb8a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    cb2c:	7afb      	ldrb	r3, [r7, #11]
    cb2e:	2b00      	cmp	r3, #0
    cb30:	d006      	beq.n	cb40 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    cb32:	7dfb      	ldrb	r3, [r7, #23]
    cb34:	224b      	movs	r2, #75	; 0x4b
    cb36:	4619      	mov	r1, r3
    cb38:	69b8      	ldr	r0, [r7, #24]
    cb3a:	4b28      	ldr	r3, [pc, #160]	; (cbdc <_usb_d_dev_in_next+0x204>)
    cb3c:	4798      	blx	r3
    cb3e:	e005      	b.n	cb4c <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    cb40:	7dfb      	ldrb	r3, [r7, #23]
    cb42:	224a      	movs	r2, #74	; 0x4a
    cb44:	4619      	mov	r1, r3
    cb46:	69b8      	ldr	r0, [r7, #24]
    cb48:	4b24      	ldr	r3, [pc, #144]	; (cbdc <_usb_d_dev_in_next+0x204>)
    cb4a:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    cb4c:	687b      	ldr	r3, [r7, #4]
    cb4e:	8a1b      	ldrh	r3, [r3, #16]
    cb50:	89ba      	ldrh	r2, [r7, #12]
    cb52:	429a      	cmp	r2, r3
    cb54:	d114      	bne.n	cb80 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    cb56:	687a      	ldr	r2, [r7, #4]
    cb58:	7cd3      	ldrb	r3, [r2, #19]
    cb5a:	f36f 1386 	bfc	r3, #6, #1
    cb5e:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    cb60:	4b1f      	ldr	r3, [pc, #124]	; (cbe0 <_usb_d_dev_in_next+0x208>)
    cb62:	68db      	ldr	r3, [r3, #12]
    cb64:	687a      	ldr	r2, [r7, #4]
    cb66:	7c90      	ldrb	r0, [r2, #18]
    cb68:	687a      	ldr	r2, [r7, #4]
    cb6a:	6892      	ldr	r2, [r2, #8]
    cb6c:	4611      	mov	r1, r2
    cb6e:	4798      	blx	r3
    cb70:	4603      	mov	r3, r0
    cb72:	2b00      	cmp	r3, #0
    cb74:	d124      	bne.n	cbc0 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    cb76:	687a      	ldr	r2, [r7, #4]
    cb78:	7cd3      	ldrb	r3, [r2, #19]
    cb7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cb7e:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    cb80:	2100      	movs	r1, #0
    cb82:	6878      	ldr	r0, [r7, #4]
    cb84:	4b17      	ldr	r3, [pc, #92]	; (cbe4 <_usb_d_dev_in_next+0x20c>)
    cb86:	4798      	blx	r3
	return;
    cb88:	e01b      	b.n	cbc2 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    cb8a:	78fb      	ldrb	r3, [r7, #3]
    cb8c:	f083 0301 	eor.w	r3, r3, #1
    cb90:	b2db      	uxtb	r3, r3
    cb92:	2b00      	cmp	r3, #0
    cb94:	d00d      	beq.n	cbb2 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    cb96:	7afb      	ldrb	r3, [r7, #11]
    cb98:	2b00      	cmp	r3, #0
    cb9a:	d002      	beq.n	cba2 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    cb9c:	234e      	movs	r3, #78	; 0x4e
    cb9e:	777b      	strb	r3, [r7, #29]
    cba0:	e001      	b.n	cba6 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    cba2:	234a      	movs	r3, #74	; 0x4a
    cba4:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    cba6:	7f7a      	ldrb	r2, [r7, #29]
    cba8:	7dfb      	ldrb	r3, [r7, #23]
    cbaa:	4619      	mov	r1, r3
    cbac:	69b8      	ldr	r0, [r7, #24]
    cbae:	4b0e      	ldr	r3, [pc, #56]	; (cbe8 <_usb_d_dev_in_next+0x210>)
    cbb0:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    cbb2:	7dfb      	ldrb	r3, [r7, #23]
    cbb4:	2201      	movs	r2, #1
    cbb6:	2101      	movs	r1, #1
    cbb8:	4618      	mov	r0, r3
    cbba:	4b0c      	ldr	r3, [pc, #48]	; (cbec <_usb_d_dev_in_next+0x214>)
    cbbc:	4798      	blx	r3
    cbbe:	e000      	b.n	cbc2 <_usb_d_dev_in_next+0x1ea>
			return;
    cbc0:	bf00      	nop
}
    cbc2:	3724      	adds	r7, #36	; 0x24
    cbc4:	46bd      	mov	sp, r7
    cbc6:	bd90      	pop	{r4, r7, pc}
    cbc8:	200032b4 	.word	0x200032b4
    cbcc:	0000c3d1 	.word	0x0000c3d1
    cbd0:	000177d9 	.word	0x000177d9
    cbd4:	0000c3fd 	.word	0x0000c3fd
    cbd8:	0000c545 	.word	0x0000c545
    cbdc:	0000bcdd 	.word	0x0000bcdd
    cbe0:	200031ec 	.word	0x200031ec
    cbe4:	0000dd01 	.word	0x0000dd01
    cbe8:	0000bcb1 	.word	0x0000bcb1
    cbec:	0000c5fd 	.word	0x0000c5fd

0000cbf0 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    cbf0:	b590      	push	{r4, r7, lr}
    cbf2:	b08b      	sub	sp, #44	; 0x2c
    cbf4:	af00      	add	r7, sp, #0
    cbf6:	6078      	str	r0, [r7, #4]
    cbf8:	460b      	mov	r3, r1
    cbfa:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    cbfc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cc00:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    cc02:	687b      	ldr	r3, [r7, #4]
    cc04:	7c9b      	ldrb	r3, [r3, #18]
    cc06:	f003 030f 	and.w	r3, r3, #15
    cc0a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    cc0c:	7ffb      	ldrb	r3, [r7, #31]
    cc0e:	015b      	lsls	r3, r3, #5
    cc10:	4a94      	ldr	r2, [pc, #592]	; (ce64 <_usb_d_dev_out_next+0x274>)
    cc12:	4413      	add	r3, r2
    cc14:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    cc16:	78fb      	ldrb	r3, [r7, #3]
    cc18:	2b00      	cmp	r3, #0
    cc1a:	d005      	beq.n	cc28 <_usb_d_dev_out_next+0x38>
    cc1c:	69bb      	ldr	r3, [r7, #24]
    cc1e:	685b      	ldr	r3, [r3, #4]
    cc20:	f3c3 338d 	ubfx	r3, r3, #14, #14
    cc24:	b29b      	uxth	r3, r3
    cc26:	e000      	b.n	cc2a <_usb_d_dev_out_next+0x3a>
    cc28:	2300      	movs	r3, #0
    cc2a:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    cc2c:	78fb      	ldrb	r3, [r7, #3]
    cc2e:	2b00      	cmp	r3, #0
    cc30:	d005      	beq.n	cc3e <_usb_d_dev_out_next+0x4e>
    cc32:	69bb      	ldr	r3, [r7, #24]
    cc34:	685b      	ldr	r3, [r3, #4]
    cc36:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cc3a:	b29b      	uxth	r3, r3
    cc3c:	e000      	b.n	cc40 <_usb_d_dev_out_next+0x50>
    cc3e:	2300      	movs	r3, #0
    cc40:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    cc42:	687b      	ldr	r3, [r7, #4]
    cc44:	8a1b      	ldrh	r3, [r3, #16]
    cc46:	f240 32ff 	movw	r2, #1023	; 0x3ff
    cc4a:	4293      	cmp	r3, r2
    cc4c:	d004      	beq.n	cc58 <_usb_d_dev_out_next+0x68>
    cc4e:	687b      	ldr	r3, [r7, #4]
    cc50:	8a1b      	ldrh	r3, [r3, #16]
    cc52:	3b01      	subs	r3, #1
    cc54:	b29b      	uxth	r3, r3
    cc56:	e001      	b.n	cc5c <_usb_d_dev_out_next+0x6c>
    cc58:	f240 33ff 	movw	r3, #1023	; 0x3ff
    cc5c:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    cc5e:	8aba      	ldrh	r2, [r7, #20]
    cc60:	8a7b      	ldrh	r3, [r7, #18]
    cc62:	4013      	ands	r3, r2
    cc64:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    cc66:	687b      	ldr	r3, [r7, #4]
    cc68:	7cdb      	ldrb	r3, [r3, #19]
    cc6a:	f003 0307 	and.w	r3, r3, #7
    cc6e:	b2db      	uxtb	r3, r3
    cc70:	2b01      	cmp	r3, #1
    cc72:	bf0c      	ite	eq
    cc74:	2301      	moveq	r3, #1
    cc76:	2300      	movne	r3, #0
    cc78:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    cc7a:	78fb      	ldrb	r3, [r7, #3]
    cc7c:	2b00      	cmp	r3, #0
    cc7e:	d004      	beq.n	cc8a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    cc80:	7ffb      	ldrb	r3, [r7, #31]
    cc82:	2100      	movs	r1, #0
    cc84:	4618      	mov	r0, r3
    cc86:	4b78      	ldr	r3, [pc, #480]	; (ce68 <_usb_d_dev_out_next+0x278>)
    cc88:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    cc8a:	687b      	ldr	r3, [r7, #4]
    cc8c:	7cdb      	ldrb	r3, [r3, #19]
    cc8e:	f003 0320 	and.w	r3, r3, #32
    cc92:	b2db      	uxtb	r3, r3
    cc94:	2b00      	cmp	r3, #0
    cc96:	d01c      	beq.n	ccd2 <_usb_d_dev_out_next+0xe2>
    cc98:	687b      	ldr	r3, [r7, #4]
    cc9a:	685b      	ldr	r3, [r3, #4]
    cc9c:	2b00      	cmp	r3, #0
    cc9e:	d018      	beq.n	ccd2 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    cca0:	687b      	ldr	r3, [r7, #4]
    cca2:	685b      	ldr	r3, [r3, #4]
    cca4:	b29a      	uxth	r2, r3
    cca6:	687b      	ldr	r3, [r7, #4]
    cca8:	689b      	ldr	r3, [r3, #8]
    ccaa:	b29b      	uxth	r3, r3
    ccac:	1ad3      	subs	r3, r2, r3
    ccae:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    ccb0:	687b      	ldr	r3, [r7, #4]
    ccb2:	681a      	ldr	r2, [r3, #0]
    ccb4:	687b      	ldr	r3, [r7, #4]
    ccb6:	689b      	ldr	r3, [r3, #8]
    ccb8:	18d0      	adds	r0, r2, r3
    ccba:	687b      	ldr	r3, [r7, #4]
    ccbc:	68d9      	ldr	r1, [r3, #12]
    ccbe:	89ba      	ldrh	r2, [r7, #12]
    ccc0:	8a3b      	ldrh	r3, [r7, #16]
    ccc2:	429a      	cmp	r2, r3
    ccc4:	d901      	bls.n	ccca <_usb_d_dev_out_next+0xda>
    ccc6:	8a3b      	ldrh	r3, [r7, #16]
    ccc8:	e000      	b.n	cccc <_usb_d_dev_out_next+0xdc>
    ccca:	89bb      	ldrh	r3, [r7, #12]
    cccc:	461a      	mov	r2, r3
    ccce:	4b67      	ldr	r3, [pc, #412]	; (ce6c <_usb_d_dev_out_next+0x27c>)
    ccd0:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    ccd2:	687b      	ldr	r3, [r7, #4]
    ccd4:	685b      	ldr	r3, [r3, #4]
    ccd6:	2b00      	cmp	r3, #0
    ccd8:	d121      	bne.n	cd1e <_usb_d_dev_out_next+0x12e>
    ccda:	687b      	ldr	r3, [r7, #4]
    ccdc:	7cdb      	ldrb	r3, [r3, #19]
    ccde:	f003 0310 	and.w	r3, r3, #16
    cce2:	b2db      	uxtb	r3, r3
    cce4:	2b00      	cmp	r3, #0
    cce6:	d01a      	beq.n	cd1e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    cce8:	687a      	ldr	r2, [r7, #4]
    ccea:	7cd3      	ldrb	r3, [r2, #19]
    ccec:	f36f 1304 	bfc	r3, #4, #1
    ccf0:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    ccf2:	687a      	ldr	r2, [r7, #4]
    ccf4:	7cd3      	ldrb	r3, [r2, #19]
    ccf6:	f043 0320 	orr.w	r3, r3, #32
    ccfa:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ccfc:	687b      	ldr	r3, [r7, #4]
    ccfe:	68db      	ldr	r3, [r3, #12]
    cd00:	461a      	mov	r2, r3
    cd02:	7ffb      	ldrb	r3, [r7, #31]
    cd04:	2100      	movs	r1, #0
    cd06:	4618      	mov	r0, r3
    cd08:	4b59      	ldr	r3, [pc, #356]	; (ce70 <_usb_d_dev_out_next+0x280>)
    cd0a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    cd0c:	687b      	ldr	r3, [r7, #4]
    cd0e:	8a1b      	ldrh	r3, [r3, #16]
    cd10:	461a      	mov	r2, r3
    cd12:	7ff8      	ldrb	r0, [r7, #31]
    cd14:	2300      	movs	r3, #0
    cd16:	2100      	movs	r1, #0
    cd18:	4c56      	ldr	r4, [pc, #344]	; (ce74 <_usb_d_dev_out_next+0x284>)
    cd1a:	47a0      	blx	r4
		goto _out_rx_exec;
    cd1c:	e090      	b.n	ce40 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    cd1e:	78fb      	ldrb	r3, [r7, #3]
    cd20:	2b00      	cmp	r3, #0
    cd22:	d010      	beq.n	cd46 <_usb_d_dev_out_next+0x156>
    cd24:	687b      	ldr	r3, [r7, #4]
    cd26:	8a1b      	ldrh	r3, [r3, #16]
    cd28:	8a3a      	ldrh	r2, [r7, #16]
    cd2a:	429a      	cmp	r2, r3
    cd2c:	d20b      	bcs.n	cd46 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    cd2e:	687a      	ldr	r2, [r7, #4]
    cd30:	7cd3      	ldrb	r3, [r2, #19]
    cd32:	f36f 1304 	bfc	r3, #4, #1
    cd36:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    cd38:	687b      	ldr	r3, [r7, #4]
    cd3a:	689a      	ldr	r2, [r3, #8]
    cd3c:	8abb      	ldrh	r3, [r7, #20]
    cd3e:	441a      	add	r2, r3
    cd40:	687b      	ldr	r3, [r7, #4]
    cd42:	609a      	str	r2, [r3, #8]
    cd44:	e05c      	b.n	ce00 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    cd46:	687b      	ldr	r3, [r7, #4]
    cd48:	689a      	ldr	r2, [r3, #8]
    cd4a:	8afb      	ldrh	r3, [r7, #22]
    cd4c:	441a      	add	r2, r3
    cd4e:	687b      	ldr	r3, [r7, #4]
    cd50:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    cd52:	687b      	ldr	r3, [r7, #4]
    cd54:	689a      	ldr	r2, [r3, #8]
    cd56:	687b      	ldr	r3, [r7, #4]
    cd58:	685b      	ldr	r3, [r3, #4]
    cd5a:	429a      	cmp	r2, r3
    cd5c:	d250      	bcs.n	ce00 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    cd5e:	687b      	ldr	r3, [r7, #4]
    cd60:	685b      	ldr	r3, [r3, #4]
    cd62:	b29a      	uxth	r2, r3
    cd64:	687b      	ldr	r3, [r7, #4]
    cd66:	689b      	ldr	r3, [r3, #8]
    cd68:	b29b      	uxth	r3, r3
    cd6a:	1ad3      	subs	r3, r2, r3
    cd6c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    cd6e:	687b      	ldr	r3, [r7, #4]
    cd70:	7cdb      	ldrb	r3, [r3, #19]
    cd72:	f003 0320 	and.w	r3, r3, #32
    cd76:	b2db      	uxtb	r3, r3
    cd78:	2b00      	cmp	r3, #0
    cd7a:	d010      	beq.n	cd9e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    cd7c:	687b      	ldr	r3, [r7, #4]
    cd7e:	8a1b      	ldrh	r3, [r3, #16]
    cd80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    cd82:	429a      	cmp	r2, r3
    cd84:	d902      	bls.n	cd8c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    cd86:	687b      	ldr	r3, [r7, #4]
    cd88:	8a1b      	ldrh	r3, [r3, #16]
    cd8a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    cd8c:	687b      	ldr	r3, [r7, #4]
    cd8e:	68db      	ldr	r3, [r3, #12]
    cd90:	461a      	mov	r2, r3
    cd92:	7ffb      	ldrb	r3, [r7, #31]
    cd94:	2100      	movs	r1, #0
    cd96:	4618      	mov	r0, r3
    cd98:	4b35      	ldr	r3, [pc, #212]	; (ce70 <_usb_d_dev_out_next+0x280>)
    cd9a:	4798      	blx	r3
    cd9c:	e029      	b.n	cdf2 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    cd9e:	687b      	ldr	r3, [r7, #4]
    cda0:	8a1b      	ldrh	r3, [r3, #16]
    cda2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    cda4:	429a      	cmp	r2, r3
    cda6:	d90f      	bls.n	cdc8 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    cda8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    cdaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    cdae:	d903      	bls.n	cdb8 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    cdb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    cdb4:	84fb      	strh	r3, [r7, #38]	; 0x26
    cdb6:	e011      	b.n	cddc <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    cdb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    cdba:	8a7b      	ldrh	r3, [r7, #18]
    cdbc:	4013      	ands	r3, r2
    cdbe:	b29b      	uxth	r3, r3
    cdc0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    cdc2:	1ad3      	subs	r3, r2, r3
    cdc4:	84fb      	strh	r3, [r7, #38]	; 0x26
    cdc6:	e009      	b.n	cddc <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    cdc8:	687b      	ldr	r3, [r7, #4]
    cdca:	8a1b      	ldrh	r3, [r3, #16]
    cdcc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    cdce:	429a      	cmp	r2, r3
    cdd0:	d204      	bcs.n	cddc <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    cdd2:	687a      	ldr	r2, [r7, #4]
    cdd4:	7cd3      	ldrb	r3, [r2, #19]
    cdd6:	f043 0320 	orr.w	r3, r3, #32
    cdda:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    cddc:	687b      	ldr	r3, [r7, #4]
    cdde:	681a      	ldr	r2, [r3, #0]
    cde0:	687b      	ldr	r3, [r7, #4]
    cde2:	689b      	ldr	r3, [r3, #8]
    cde4:	4413      	add	r3, r2
    cde6:	461a      	mov	r2, r3
    cde8:	7ffb      	ldrb	r3, [r7, #31]
    cdea:	2100      	movs	r1, #0
    cdec:	4618      	mov	r0, r3
    cdee:	4b20      	ldr	r3, [pc, #128]	; (ce70 <_usb_d_dev_out_next+0x280>)
    cdf0:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    cdf2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    cdf4:	7ff8      	ldrb	r0, [r7, #31]
    cdf6:	2300      	movs	r3, #0
    cdf8:	2100      	movs	r1, #0
    cdfa:	4c1e      	ldr	r4, [pc, #120]	; (ce74 <_usb_d_dev_out_next+0x284>)
    cdfc:	47a0      	blx	r4
			goto _out_rx_exec;
    cdfe:	e01f      	b.n	ce40 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    ce00:	7bfb      	ldrb	r3, [r7, #15]
    ce02:	2b00      	cmp	r3, #0
    ce04:	d006      	beq.n	ce14 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    ce06:	7ffb      	ldrb	r3, [r7, #31]
    ce08:	222d      	movs	r2, #45	; 0x2d
    ce0a:	4619      	mov	r1, r3
    ce0c:	6a38      	ldr	r0, [r7, #32]
    ce0e:	4b1a      	ldr	r3, [pc, #104]	; (ce78 <_usb_d_dev_out_next+0x288>)
    ce10:	4798      	blx	r3
    ce12:	e005      	b.n	ce20 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    ce14:	7ffb      	ldrb	r3, [r7, #31]
    ce16:	2225      	movs	r2, #37	; 0x25
    ce18:	4619      	mov	r1, r3
    ce1a:	6a38      	ldr	r0, [r7, #32]
    ce1c:	4b16      	ldr	r3, [pc, #88]	; (ce78 <_usb_d_dev_out_next+0x288>)
    ce1e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    ce20:	7ffb      	ldrb	r3, [r7, #31]
    ce22:	2b00      	cmp	r3, #0
    ce24:	d107      	bne.n	ce36 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ce26:	687b      	ldr	r3, [r7, #4]
    ce28:	68db      	ldr	r3, [r3, #12]
    ce2a:	461a      	mov	r2, r3
    ce2c:	7ffb      	ldrb	r3, [r7, #31]
    ce2e:	2100      	movs	r1, #0
    ce30:	4618      	mov	r0, r3
    ce32:	4b0f      	ldr	r3, [pc, #60]	; (ce70 <_usb_d_dev_out_next+0x280>)
    ce34:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    ce36:	2100      	movs	r1, #0
    ce38:	6878      	ldr	r0, [r7, #4]
    ce3a:	4b10      	ldr	r3, [pc, #64]	; (ce7c <_usb_d_dev_out_next+0x28c>)
    ce3c:	4798      	blx	r3
	return;
    ce3e:	e031      	b.n	cea4 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    ce40:	78fb      	ldrb	r3, [r7, #3]
    ce42:	f083 0301 	eor.w	r3, r3, #1
    ce46:	b2db      	uxtb	r3, r3
    ce48:	2b00      	cmp	r3, #0
    ce4a:	d025      	beq.n	ce98 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    ce4c:	7bfb      	ldrb	r3, [r7, #15]
    ce4e:	2b00      	cmp	r3, #0
    ce50:	d018      	beq.n	ce84 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    ce52:	7ffb      	ldrb	r3, [r7, #31]
    ce54:	2101      	movs	r1, #1
    ce56:	4618      	mov	r0, r3
    ce58:	4b09      	ldr	r3, [pc, #36]	; (ce80 <_usb_d_dev_out_next+0x290>)
    ce5a:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    ce5c:	232d      	movs	r3, #45	; 0x2d
    ce5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    ce62:	e012      	b.n	ce8a <_usb_d_dev_out_next+0x29a>
    ce64:	200032b4 	.word	0x200032b4
    ce68:	0000c3d1 	.word	0x0000c3d1
    ce6c:	000177d9 	.word	0x000177d9
    ce70:	0000c3fd 	.word	0x0000c3fd
    ce74:	0000c585 	.word	0x0000c585
    ce78:	0000bcdd 	.word	0x0000bcdd
    ce7c:	0000dd01 	.word	0x0000dd01
    ce80:	0000c5c5 	.word	0x0000c5c5
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    ce84:	2325      	movs	r3, #37	; 0x25
    ce86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    ce8a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    ce8e:	7ffb      	ldrb	r3, [r7, #31]
    ce90:	4619      	mov	r1, r3
    ce92:	6a38      	ldr	r0, [r7, #32]
    ce94:	4b05      	ldr	r3, [pc, #20]	; (ceac <_usb_d_dev_out_next+0x2bc>)
    ce96:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    ce98:	7ffb      	ldrb	r3, [r7, #31]
    ce9a:	2201      	movs	r2, #1
    ce9c:	2100      	movs	r1, #0
    ce9e:	4618      	mov	r0, r3
    cea0:	4b03      	ldr	r3, [pc, #12]	; (ceb0 <_usb_d_dev_out_next+0x2c0>)
    cea2:	4798      	blx	r3
}
    cea4:	372c      	adds	r7, #44	; 0x2c
    cea6:	46bd      	mov	sp, r7
    cea8:	bd90      	pop	{r4, r7, pc}
    ceaa:	bf00      	nop
    ceac:	0000bcb1 	.word	0x0000bcb1
    ceb0:	0000c655 	.word	0x0000c655

0000ceb4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    ceb4:	b580      	push	{r7, lr}
    ceb6:	b084      	sub	sp, #16
    ceb8:	af00      	add	r7, sp, #0
    ceba:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    cebc:	687b      	ldr	r3, [r7, #4]
    cebe:	7c9b      	ldrb	r3, [r3, #18]
    cec0:	f003 030f 	and.w	r3, r3, #15
    cec4:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    cec6:	687b      	ldr	r3, [r7, #4]
    cec8:	7cdb      	ldrb	r3, [r3, #19]
    ceca:	f003 0307 	and.w	r3, r3, #7
    cece:	b2db      	uxtb	r3, r3
    ced0:	2b01      	cmp	r3, #1
    ced2:	bf0c      	ite	eq
    ced4:	2301      	moveq	r3, #1
    ced6:	2300      	movne	r3, #0
    ced8:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    ceda:	7bbb      	ldrb	r3, [r7, #14]
    cedc:	f083 0301 	eor.w	r3, r3, #1
    cee0:	b2db      	uxtb	r3, r3
    cee2:	2b00      	cmp	r3, #0
    cee4:	d008      	beq.n	cef8 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    cee6:	7bfb      	ldrb	r3, [r7, #15]
    cee8:	4618      	mov	r0, r3
    ceea:	4b20      	ldr	r3, [pc, #128]	; (cf6c <_usb_d_dev_handle_setup+0xb8>)
    ceec:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    ceee:	7bfb      	ldrb	r3, [r7, #15]
    cef0:	4618      	mov	r0, r3
    cef2:	4b1f      	ldr	r3, [pc, #124]	; (cf70 <_usb_d_dev_handle_setup+0xbc>)
    cef4:	4798      	blx	r3
		return;
    cef6:	e036      	b.n	cf66 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    cef8:	687b      	ldr	r3, [r7, #4]
    cefa:	7cdb      	ldrb	r3, [r3, #19]
    cefc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cf00:	b2db      	uxtb	r3, r3
    cf02:	2b00      	cmp	r3, #0
    cf04:	d010      	beq.n	cf28 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    cf06:	687a      	ldr	r2, [r7, #4]
    cf08:	7cd3      	ldrb	r3, [r2, #19]
    cf0a:	f36f 1386 	bfc	r3, #6, #1
    cf0e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    cf10:	7bfb      	ldrb	r3, [r7, #15]
    cf12:	2200      	movs	r2, #0
    cf14:	2101      	movs	r1, #1
    cf16:	4618      	mov	r0, r3
    cf18:	4b16      	ldr	r3, [pc, #88]	; (cf74 <_usb_d_dev_handle_setup+0xc0>)
    cf1a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    cf1c:	7bfb      	ldrb	r3, [r7, #15]
    cf1e:	2200      	movs	r2, #0
    cf20:	2100      	movs	r1, #0
    cf22:	4618      	mov	r0, r3
    cf24:	4b14      	ldr	r3, [pc, #80]	; (cf78 <_usb_d_dev_handle_setup+0xc4>)
    cf26:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    cf28:	687a      	ldr	r2, [r7, #4]
    cf2a:	7cd3      	ldrb	r3, [r2, #19]
    cf2c:	f36f 03c3 	bfc	r3, #3, #1
    cf30:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    cf32:	7bfb      	ldrb	r3, [r7, #15]
    cf34:	2100      	movs	r1, #0
    cf36:	4618      	mov	r0, r3
    cf38:	4b10      	ldr	r3, [pc, #64]	; (cf7c <_usb_d_dev_handle_setup+0xc8>)
    cf3a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    cf3c:	7bfb      	ldrb	r3, [r7, #15]
    cf3e:	2101      	movs	r1, #1
    cf40:	4618      	mov	r0, r3
    cf42:	4b0e      	ldr	r3, [pc, #56]	; (cf7c <_usb_d_dev_handle_setup+0xc8>)
    cf44:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    cf46:	7bfb      	ldrb	r3, [r7, #15]
    cf48:	216f      	movs	r1, #111	; 0x6f
    cf4a:	4618      	mov	r0, r3
    cf4c:	4b0c      	ldr	r3, [pc, #48]	; (cf80 <_usb_d_dev_handle_setup+0xcc>)
    cf4e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    cf50:	7bfb      	ldrb	r3, [r7, #15]
    cf52:	216f      	movs	r1, #111	; 0x6f
    cf54:	4618      	mov	r0, r3
    cf56:	4b0b      	ldr	r3, [pc, #44]	; (cf84 <_usb_d_dev_handle_setup+0xd0>)
    cf58:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    cf5a:	4b0b      	ldr	r3, [pc, #44]	; (cf88 <_usb_d_dev_handle_setup+0xd4>)
    cf5c:	689b      	ldr	r3, [r3, #8]
    cf5e:	687a      	ldr	r2, [r7, #4]
    cf60:	7c92      	ldrb	r2, [r2, #18]
    cf62:	4610      	mov	r0, r2
    cf64:	4798      	blx	r3
}
    cf66:	3710      	adds	r7, #16
    cf68:	46bd      	mov	sp, r7
    cf6a:	bd80      	pop	{r7, pc}
    cf6c:	0000c359 	.word	0x0000c359
    cf70:	0000c305 	.word	0x0000c305
    cf74:	0000c5fd 	.word	0x0000c5fd
    cf78:	0000c655 	.word	0x0000c655
    cf7c:	0000c5c5 	.word	0x0000c5c5
    cf80:	0000c105 	.word	0x0000c105
    cf84:	0000c155 	.word	0x0000c155
    cf88:	200031ec 	.word	0x200031ec

0000cf8c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    cf8c:	b580      	push	{r7, lr}
    cf8e:	b084      	sub	sp, #16
    cf90:	af00      	add	r7, sp, #0
    cf92:	6078      	str	r0, [r7, #4]
    cf94:	460b      	mov	r3, r1
    cf96:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cf98:	687b      	ldr	r3, [r7, #4]
    cf9a:	7c9b      	ldrb	r3, [r3, #18]
    cf9c:	f003 030f 	and.w	r3, r3, #15
    cfa0:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    cfa2:	78f9      	ldrb	r1, [r7, #3]
    cfa4:	7bfb      	ldrb	r3, [r7, #15]
    cfa6:	2200      	movs	r2, #0
    cfa8:	4618      	mov	r0, r3
    cfaa:	4b07      	ldr	r3, [pc, #28]	; (cfc8 <_usb_d_dev_handle_stall+0x3c>)
    cfac:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    cfae:	4b07      	ldr	r3, [pc, #28]	; (cfcc <_usb_d_dev_handle_stall+0x40>)
    cfb0:	691b      	ldr	r3, [r3, #16]
    cfb2:	687a      	ldr	r2, [r7, #4]
    cfb4:	7c90      	ldrb	r0, [r2, #18]
    cfb6:	687a      	ldr	r2, [r7, #4]
    cfb8:	6892      	ldr	r2, [r2, #8]
    cfba:	2101      	movs	r1, #1
    cfbc:	4798      	blx	r3
}
    cfbe:	bf00      	nop
    cfc0:	3710      	adds	r7, #16
    cfc2:	46bd      	mov	sp, r7
    cfc4:	bd80      	pop	{r7, pc}
    cfc6:	bf00      	nop
    cfc8:	0000c2b9 	.word	0x0000c2b9
    cfcc:	200031ec 	.word	0x200031ec

0000cfd0 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    cfd0:	b580      	push	{r7, lr}
    cfd2:	b088      	sub	sp, #32
    cfd4:	af00      	add	r7, sp, #0
    cfd6:	6078      	str	r0, [r7, #4]
    cfd8:	460b      	mov	r3, r1
    cfda:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    cfdc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cfe0:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    cfe2:	687b      	ldr	r3, [r7, #4]
    cfe4:	7c9b      	ldrb	r3, [r3, #18]
    cfe6:	f003 030f 	and.w	r3, r3, #15
    cfea:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    cfec:	4b61      	ldr	r3, [pc, #388]	; (d174 <_usb_d_dev_handle_trfail+0x1a4>)
    cfee:	881b      	ldrh	r3, [r3, #0]
    cff0:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    cff2:	7efb      	ldrb	r3, [r7, #27]
    cff4:	015b      	lsls	r3, r3, #5
    cff6:	4a60      	ldr	r2, [pc, #384]	; (d178 <_usb_d_dev_handle_trfail+0x1a8>)
    cff8:	4413      	add	r3, r2
    cffa:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    cffc:	78fb      	ldrb	r3, [r7, #3]
    cffe:	2b00      	cmp	r3, #0
    d000:	d006      	beq.n	d010 <_usb_d_dev_handle_trfail+0x40>
    d002:	7efb      	ldrb	r3, [r7, #27]
    d004:	4619      	mov	r1, r3
    d006:	69f8      	ldr	r0, [r7, #28]
    d008:	4b5c      	ldr	r3, [pc, #368]	; (d17c <_usb_d_dev_handle_trfail+0x1ac>)
    d00a:	4798      	blx	r3
    d00c:	4603      	mov	r3, r0
    d00e:	e005      	b.n	d01c <_usb_d_dev_handle_trfail+0x4c>
    d010:	7efb      	ldrb	r3, [r7, #27]
    d012:	4619      	mov	r1, r3
    d014:	69f8      	ldr	r0, [r7, #28]
    d016:	4b5a      	ldr	r3, [pc, #360]	; (d180 <_usb_d_dev_handle_trfail+0x1b0>)
    d018:	4798      	blx	r3
    d01a:	4603      	mov	r3, r0
    d01c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    d01e:	687b      	ldr	r3, [r7, #4]
    d020:	7cdb      	ldrb	r3, [r3, #19]
    d022:	f003 0307 	and.w	r3, r3, #7
    d026:	b2db      	uxtb	r3, r3
    d028:	2b01      	cmp	r3, #1
    d02a:	bf0c      	ite	eq
    d02c:	2301      	moveq	r3, #1
    d02e:	2300      	movne	r3, #0
    d030:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    d032:	78fb      	ldrb	r3, [r7, #3]
    d034:	011b      	lsls	r3, r3, #4
    d036:	697a      	ldr	r2, [r7, #20]
    d038:	4413      	add	r3, r2
    d03a:	7a9b      	ldrb	r3, [r3, #10]
    d03c:	b2db      	uxtb	r3, r3
    d03e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    d040:	7cfb      	ldrb	r3, [r7, #19]
    d042:	2b02      	cmp	r3, #2
    d044:	d12f      	bne.n	d0a6 <_usb_d_dev_handle_trfail+0xd6>
    d046:	7b3b      	ldrb	r3, [r7, #12]
    d048:	f003 0301 	and.w	r3, r3, #1
    d04c:	b2db      	uxtb	r3, r3
    d04e:	2b00      	cmp	r3, #0
    d050:	d029      	beq.n	d0a6 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    d052:	78fb      	ldrb	r3, [r7, #3]
    d054:	011b      	lsls	r3, r3, #4
    d056:	697a      	ldr	r2, [r7, #20]
    d058:	441a      	add	r2, r3
    d05a:	7a93      	ldrb	r3, [r2, #10]
    d05c:	f36f 0300 	bfc	r3, #0, #1
    d060:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    d062:	78fb      	ldrb	r3, [r7, #3]
    d064:	f107 0220 	add.w	r2, r7, #32
    d068:	4413      	add	r3, r2
    d06a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    d06e:	7efb      	ldrb	r3, [r7, #27]
    d070:	4619      	mov	r1, r3
    d072:	69f8      	ldr	r0, [r7, #28]
    d074:	4b43      	ldr	r3, [pc, #268]	; (d184 <_usb_d_dev_handle_trfail+0x1b4>)
    d076:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    d078:	78fb      	ldrb	r3, [r7, #3]
    d07a:	f107 0220 	add.w	r2, r7, #32
    d07e:	4413      	add	r3, r2
    d080:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    d084:	7efb      	ldrb	r3, [r7, #27]
    d086:	4619      	mov	r1, r3
    d088:	69f8      	ldr	r0, [r7, #28]
    d08a:	4b3f      	ldr	r3, [pc, #252]	; (d188 <_usb_d_dev_handle_trfail+0x1b8>)
    d08c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    d08e:	78fb      	ldrb	r3, [r7, #3]
    d090:	2b00      	cmp	r3, #0
    d092:	bf14      	ite	ne
    d094:	2301      	movne	r3, #1
    d096:	2300      	moveq	r3, #0
    d098:	b2db      	uxtb	r3, r3
    d09a:	2204      	movs	r2, #4
    d09c:	4619      	mov	r1, r3
    d09e:	6878      	ldr	r0, [r7, #4]
    d0a0:	4b3a      	ldr	r3, [pc, #232]	; (d18c <_usb_d_dev_handle_trfail+0x1bc>)
    d0a2:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    d0a4:	e062      	b.n	d16c <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    d0a6:	7b3b      	ldrb	r3, [r7, #12]
    d0a8:	f003 0302 	and.w	r3, r3, #2
    d0ac:	b2db      	uxtb	r3, r3
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	d040      	beq.n	d134 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    d0b2:	78fb      	ldrb	r3, [r7, #3]
    d0b4:	011b      	lsls	r3, r3, #4
    d0b6:	697a      	ldr	r2, [r7, #20]
    d0b8:	441a      	add	r2, r3
    d0ba:	7a93      	ldrb	r3, [r2, #10]
    d0bc:	f36f 0341 	bfc	r3, #1, #1
    d0c0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    d0c2:	78fb      	ldrb	r3, [r7, #3]
    d0c4:	f107 0220 	add.w	r2, r7, #32
    d0c8:	4413      	add	r3, r2
    d0ca:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    d0ce:	7efb      	ldrb	r3, [r7, #27]
    d0d0:	4619      	mov	r1, r3
    d0d2:	69f8      	ldr	r0, [r7, #28]
    d0d4:	4b2b      	ldr	r3, [pc, #172]	; (d184 <_usb_d_dev_handle_trfail+0x1b4>)
    d0d6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    d0d8:	78fb      	ldrb	r3, [r7, #3]
    d0da:	f107 0220 	add.w	r2, r7, #32
    d0de:	4413      	add	r3, r2
    d0e0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    d0e4:	7efb      	ldrb	r3, [r7, #27]
    d0e6:	4619      	mov	r1, r3
    d0e8:	69f8      	ldr	r0, [r7, #28]
    d0ea:	4b27      	ldr	r3, [pc, #156]	; (d188 <_usb_d_dev_handle_trfail+0x1b8>)
    d0ec:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    d0ee:	7cbb      	ldrb	r3, [r7, #18]
    d0f0:	2b00      	cmp	r3, #0
    d0f2:	d03b      	beq.n	d16c <_usb_d_dev_handle_trfail+0x19c>
    d0f4:	687b      	ldr	r3, [r7, #4]
    d0f6:	7cdb      	ldrb	r3, [r3, #19]
    d0f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d0fc:	b2db      	uxtb	r3, r3
    d0fe:	2b00      	cmp	r3, #0
    d100:	d034      	beq.n	d16c <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    d102:	687b      	ldr	r3, [r7, #4]
    d104:	7cdb      	ldrb	r3, [r3, #19]
    d106:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    d10a:	b2db      	uxtb	r3, r3
    d10c:	461a      	mov	r2, r3
    d10e:	78fb      	ldrb	r3, [r7, #3]
    d110:	4293      	cmp	r3, r2
    d112:	d02b      	beq.n	d16c <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    d114:	687b      	ldr	r3, [r7, #4]
    d116:	7cdb      	ldrb	r3, [r3, #19]
    d118:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    d11c:	b2db      	uxtb	r3, r3
    d11e:	2b00      	cmp	r3, #0
    d120:	bf14      	ite	ne
    d122:	2301      	movne	r3, #1
    d124:	2300      	moveq	r3, #0
    d126:	b2db      	uxtb	r3, r3
    d128:	2200      	movs	r2, #0
    d12a:	4619      	mov	r1, r3
    d12c:	6878      	ldr	r0, [r7, #4]
    d12e:	4b17      	ldr	r3, [pc, #92]	; (d18c <_usb_d_dev_handle_trfail+0x1bc>)
    d130:	4798      	blx	r3
}
    d132:	e01b      	b.n	d16c <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    d134:	78fa      	ldrb	r2, [r7, #3]
    d136:	7efb      	ldrb	r3, [r7, #27]
    d138:	4611      	mov	r1, r2
    d13a:	4618      	mov	r0, r3
    d13c:	4b14      	ldr	r3, [pc, #80]	; (d190 <_usb_d_dev_handle_trfail+0x1c0>)
    d13e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    d140:	78fb      	ldrb	r3, [r7, #3]
    d142:	f107 0220 	add.w	r2, r7, #32
    d146:	4413      	add	r3, r2
    d148:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    d14c:	7efb      	ldrb	r3, [r7, #27]
    d14e:	4619      	mov	r1, r3
    d150:	69f8      	ldr	r0, [r7, #28]
    d152:	4b0c      	ldr	r3, [pc, #48]	; (d184 <_usb_d_dev_handle_trfail+0x1b4>)
    d154:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    d156:	78fb      	ldrb	r3, [r7, #3]
    d158:	f107 0220 	add.w	r2, r7, #32
    d15c:	4413      	add	r3, r2
    d15e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    d162:	7efb      	ldrb	r3, [r7, #27]
    d164:	4619      	mov	r1, r3
    d166:	69f8      	ldr	r0, [r7, #28]
    d168:	4b07      	ldr	r3, [pc, #28]	; (d188 <_usb_d_dev_handle_trfail+0x1b8>)
    d16a:	4798      	blx	r3
}
    d16c:	bf00      	nop
    d16e:	3720      	adds	r7, #32
    d170:	46bd      	mov	sp, r7
    d172:	bd80      	pop	{r7, pc}
    d174:	00018724 	.word	0x00018724
    d178:	200032b4 	.word	0x200032b4
    d17c:	0000bd39 	.word	0x0000bd39
    d180:	0000bd09 	.word	0x0000bd09
    d184:	0000bbdd 	.word	0x0000bbdd
    d188:	0000bcdd 	.word	0x0000bcdd
    d18c:	0000dd49 	.word	0x0000dd49
    d190:	0000c5c5 	.word	0x0000c5c5

0000d194 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    d194:	b580      	push	{r7, lr}
    d196:	b082      	sub	sp, #8
    d198:	af00      	add	r7, sp, #0
    d19a:	6078      	str	r0, [r7, #4]
    d19c:	460b      	mov	r3, r1
    d19e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    d1a0:	78fb      	ldrb	r3, [r7, #3]
    d1a2:	f003 0310 	and.w	r3, r3, #16
    d1a6:	2b00      	cmp	r3, #0
    d1a8:	d003      	beq.n	d1b2 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    d1aa:	6878      	ldr	r0, [r7, #4]
    d1ac:	4b0c      	ldr	r3, [pc, #48]	; (d1e0 <_usb_d_dev_trans_setup_isr+0x4c>)
    d1ae:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    d1b0:	e012      	b.n	d1d8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    d1b2:	78fb      	ldrb	r3, [r7, #3]
    d1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d1b8:	2b00      	cmp	r3, #0
    d1ba:	d004      	beq.n	d1c6 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    d1bc:	2101      	movs	r1, #1
    d1be:	6878      	ldr	r0, [r7, #4]
    d1c0:	4b08      	ldr	r3, [pc, #32]	; (d1e4 <_usb_d_dev_trans_setup_isr+0x50>)
    d1c2:	4798      	blx	r3
}
    d1c4:	e008      	b.n	d1d8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    d1c6:	78fb      	ldrb	r3, [r7, #3]
    d1c8:	f003 0320 	and.w	r3, r3, #32
    d1cc:	2b00      	cmp	r3, #0
    d1ce:	d003      	beq.n	d1d8 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    d1d0:	2100      	movs	r1, #0
    d1d2:	6878      	ldr	r0, [r7, #4]
    d1d4:	4b03      	ldr	r3, [pc, #12]	; (d1e4 <_usb_d_dev_trans_setup_isr+0x50>)
    d1d6:	4798      	blx	r3
}
    d1d8:	bf00      	nop
    d1da:	3708      	adds	r7, #8
    d1dc:	46bd      	mov	sp, r7
    d1de:	bd80      	pop	{r7, pc}
    d1e0:	0000ceb5 	.word	0x0000ceb5
    d1e4:	0000cf8d 	.word	0x0000cf8d

0000d1e8 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    d1e8:	b580      	push	{r7, lr}
    d1ea:	b082      	sub	sp, #8
    d1ec:	af00      	add	r7, sp, #0
    d1ee:	6078      	str	r0, [r7, #4]
    d1f0:	460b      	mov	r3, r1
    d1f2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    d1f4:	78fb      	ldrb	r3, [r7, #3]
    d1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d1fa:	2b00      	cmp	r3, #0
    d1fc:	d004      	beq.n	d208 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    d1fe:	2101      	movs	r1, #1
    d200:	6878      	ldr	r0, [r7, #4]
    d202:	4b1a      	ldr	r3, [pc, #104]	; (d26c <_usb_d_dev_trans_in_isr+0x84>)
    d204:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    d206:	e02c      	b.n	d262 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    d208:	78fb      	ldrb	r3, [r7, #3]
    d20a:	f003 0308 	and.w	r3, r3, #8
    d20e:	2b00      	cmp	r3, #0
    d210:	d004      	beq.n	d21c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    d212:	2101      	movs	r1, #1
    d214:	6878      	ldr	r0, [r7, #4]
    d216:	4b16      	ldr	r3, [pc, #88]	; (d270 <_usb_d_dev_trans_in_isr+0x88>)
    d218:	4798      	blx	r3
}
    d21a:	e022      	b.n	d262 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    d21c:	78fb      	ldrb	r3, [r7, #3]
    d21e:	f003 0302 	and.w	r3, r3, #2
    d222:	2b00      	cmp	r3, #0
    d224:	d004      	beq.n	d230 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    d226:	2101      	movs	r1, #1
    d228:	6878      	ldr	r0, [r7, #4]
    d22a:	4b12      	ldr	r3, [pc, #72]	; (d274 <_usb_d_dev_trans_in_isr+0x8c>)
    d22c:	4798      	blx	r3
}
    d22e:	e018      	b.n	d262 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    d230:	687b      	ldr	r3, [r7, #4]
    d232:	7cdb      	ldrb	r3, [r3, #19]
    d234:	f003 0307 	and.w	r3, r3, #7
    d238:	b2db      	uxtb	r3, r3
    d23a:	2b01      	cmp	r3, #1
    d23c:	d111      	bne.n	d262 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    d23e:	78fb      	ldrb	r3, [r7, #3]
    d240:	f003 0304 	and.w	r3, r3, #4
    d244:	2b00      	cmp	r3, #0
    d246:	d004      	beq.n	d252 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    d248:	2100      	movs	r1, #0
    d24a:	6878      	ldr	r0, [r7, #4]
    d24c:	4b08      	ldr	r3, [pc, #32]	; (d270 <_usb_d_dev_trans_in_isr+0x88>)
    d24e:	4798      	blx	r3
}
    d250:	e007      	b.n	d262 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    d252:	78fb      	ldrb	r3, [r7, #3]
    d254:	f003 0310 	and.w	r3, r3, #16
    d258:	2b00      	cmp	r3, #0
    d25a:	d002      	beq.n	d262 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    d25c:	6878      	ldr	r0, [r7, #4]
    d25e:	4b06      	ldr	r3, [pc, #24]	; (d278 <_usb_d_dev_trans_in_isr+0x90>)
    d260:	4798      	blx	r3
}
    d262:	bf00      	nop
    d264:	3708      	adds	r7, #8
    d266:	46bd      	mov	sp, r7
    d268:	bd80      	pop	{r7, pc}
    d26a:	bf00      	nop
    d26c:	0000cf8d 	.word	0x0000cf8d
    d270:	0000cfd1 	.word	0x0000cfd1
    d274:	0000c9d9 	.word	0x0000c9d9
    d278:	0000ceb5 	.word	0x0000ceb5

0000d27c <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    d27c:	b580      	push	{r7, lr}
    d27e:	b082      	sub	sp, #8
    d280:	af00      	add	r7, sp, #0
    d282:	6078      	str	r0, [r7, #4]
    d284:	460b      	mov	r3, r1
    d286:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    d288:	78fb      	ldrb	r3, [r7, #3]
    d28a:	f003 0320 	and.w	r3, r3, #32
    d28e:	2b00      	cmp	r3, #0
    d290:	d004      	beq.n	d29c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    d292:	2100      	movs	r1, #0
    d294:	6878      	ldr	r0, [r7, #4]
    d296:	4b1a      	ldr	r3, [pc, #104]	; (d300 <_usb_d_dev_trans_out_isr+0x84>)
    d298:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    d29a:	e02c      	b.n	d2f6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    d29c:	78fb      	ldrb	r3, [r7, #3]
    d29e:	f003 0304 	and.w	r3, r3, #4
    d2a2:	2b00      	cmp	r3, #0
    d2a4:	d004      	beq.n	d2b0 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    d2a6:	2100      	movs	r1, #0
    d2a8:	6878      	ldr	r0, [r7, #4]
    d2aa:	4b16      	ldr	r3, [pc, #88]	; (d304 <_usb_d_dev_trans_out_isr+0x88>)
    d2ac:	4798      	blx	r3
}
    d2ae:	e022      	b.n	d2f6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    d2b0:	78fb      	ldrb	r3, [r7, #3]
    d2b2:	f003 0301 	and.w	r3, r3, #1
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	d004      	beq.n	d2c4 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    d2ba:	2101      	movs	r1, #1
    d2bc:	6878      	ldr	r0, [r7, #4]
    d2be:	4b12      	ldr	r3, [pc, #72]	; (d308 <_usb_d_dev_trans_out_isr+0x8c>)
    d2c0:	4798      	blx	r3
}
    d2c2:	e018      	b.n	d2f6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    d2c4:	687b      	ldr	r3, [r7, #4]
    d2c6:	7cdb      	ldrb	r3, [r3, #19]
    d2c8:	f003 0307 	and.w	r3, r3, #7
    d2cc:	b2db      	uxtb	r3, r3
    d2ce:	2b01      	cmp	r3, #1
    d2d0:	d111      	bne.n	d2f6 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    d2d2:	78fb      	ldrb	r3, [r7, #3]
    d2d4:	f003 0308 	and.w	r3, r3, #8
    d2d8:	2b00      	cmp	r3, #0
    d2da:	d004      	beq.n	d2e6 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    d2dc:	2101      	movs	r1, #1
    d2de:	6878      	ldr	r0, [r7, #4]
    d2e0:	4b08      	ldr	r3, [pc, #32]	; (d304 <_usb_d_dev_trans_out_isr+0x88>)
    d2e2:	4798      	blx	r3
}
    d2e4:	e007      	b.n	d2f6 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    d2e6:	78fb      	ldrb	r3, [r7, #3]
    d2e8:	f003 0310 	and.w	r3, r3, #16
    d2ec:	2b00      	cmp	r3, #0
    d2ee:	d002      	beq.n	d2f6 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    d2f0:	6878      	ldr	r0, [r7, #4]
    d2f2:	4b06      	ldr	r3, [pc, #24]	; (d30c <_usb_d_dev_trans_out_isr+0x90>)
    d2f4:	4798      	blx	r3
}
    d2f6:	bf00      	nop
    d2f8:	3708      	adds	r7, #8
    d2fa:	46bd      	mov	sp, r7
    d2fc:	bd80      	pop	{r7, pc}
    d2fe:	bf00      	nop
    d300:	0000cf8d 	.word	0x0000cf8d
    d304:	0000cfd1 	.word	0x0000cfd1
    d308:	0000cbf1 	.word	0x0000cbf1
    d30c:	0000ceb5 	.word	0x0000ceb5

0000d310 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    d310:	b580      	push	{r7, lr}
    d312:	b084      	sub	sp, #16
    d314:	af00      	add	r7, sp, #0
    d316:	6078      	str	r0, [r7, #4]
    d318:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    d31a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d31e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d320:	683b      	ldr	r3, [r7, #0]
    d322:	7c9b      	ldrb	r3, [r3, #18]
    d324:	f003 030f 	and.w	r3, r3, #15
    d328:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    d32a:	7afb      	ldrb	r3, [r7, #11]
    d32c:	2201      	movs	r2, #1
    d32e:	409a      	lsls	r2, r3
    d330:	687b      	ldr	r3, [r7, #4]
    d332:	4013      	ands	r3, r2
    d334:	2b00      	cmp	r3, #0
    d336:	d03d      	beq.n	d3b4 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    d338:	7afb      	ldrb	r3, [r7, #11]
    d33a:	68fa      	ldr	r2, [r7, #12]
    d33c:	3308      	adds	r3, #8
    d33e:	015b      	lsls	r3, r3, #5
    d340:	4413      	add	r3, r2
    d342:	3307      	adds	r3, #7
    d344:	781b      	ldrb	r3, [r3, #0]
    d346:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    d348:	7afb      	ldrb	r3, [r7, #11]
    d34a:	68fa      	ldr	r2, [r7, #12]
    d34c:	015b      	lsls	r3, r3, #5
    d34e:	4413      	add	r3, r2
    d350:	f203 1309 	addw	r3, r3, #265	; 0x109
    d354:	781b      	ldrb	r3, [r3, #0]
    d356:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    d358:	7aba      	ldrb	r2, [r7, #10]
    d35a:	7a7b      	ldrb	r3, [r7, #9]
    d35c:	4013      	ands	r3, r2
    d35e:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    d360:	7abb      	ldrb	r3, [r7, #10]
    d362:	2b00      	cmp	r3, #0
    d364:	d027      	beq.n	d3b6 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    d366:	683b      	ldr	r3, [r7, #0]
    d368:	7cdb      	ldrb	r3, [r3, #19]
    d36a:	f003 0307 	and.w	r3, r3, #7
    d36e:	b2db      	uxtb	r3, r3
    d370:	2b01      	cmp	r3, #1
    d372:	d10c      	bne.n	d38e <_usb_d_dev_handle_eps+0x7e>
    d374:	683b      	ldr	r3, [r7, #0]
    d376:	7cdb      	ldrb	r3, [r3, #19]
    d378:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d37c:	b2db      	uxtb	r3, r3
    d37e:	2b00      	cmp	r3, #0
    d380:	d105      	bne.n	d38e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    d382:	7abb      	ldrb	r3, [r7, #10]
    d384:	4619      	mov	r1, r3
    d386:	6838      	ldr	r0, [r7, #0]
    d388:	4b0c      	ldr	r3, [pc, #48]	; (d3bc <_usb_d_dev_handle_eps+0xac>)
    d38a:	4798      	blx	r3
    d38c:	e013      	b.n	d3b6 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    d38e:	683b      	ldr	r3, [r7, #0]
    d390:	7cdb      	ldrb	r3, [r3, #19]
    d392:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    d396:	b2db      	uxtb	r3, r3
    d398:	2b00      	cmp	r3, #0
    d39a:	d005      	beq.n	d3a8 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    d39c:	7abb      	ldrb	r3, [r7, #10]
    d39e:	4619      	mov	r1, r3
    d3a0:	6838      	ldr	r0, [r7, #0]
    d3a2:	4b07      	ldr	r3, [pc, #28]	; (d3c0 <_usb_d_dev_handle_eps+0xb0>)
    d3a4:	4798      	blx	r3
    d3a6:	e006      	b.n	d3b6 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    d3a8:	7abb      	ldrb	r3, [r7, #10]
    d3aa:	4619      	mov	r1, r3
    d3ac:	6838      	ldr	r0, [r7, #0]
    d3ae:	4b05      	ldr	r3, [pc, #20]	; (d3c4 <_usb_d_dev_handle_eps+0xb4>)
    d3b0:	4798      	blx	r3
    d3b2:	e000      	b.n	d3b6 <_usb_d_dev_handle_eps+0xa6>
		return;
    d3b4:	bf00      	nop
		}
	}
}
    d3b6:	3710      	adds	r7, #16
    d3b8:	46bd      	mov	sp, r7
    d3ba:	bd80      	pop	{r7, pc}
    d3bc:	0000d195 	.word	0x0000d195
    d3c0:	0000d1e9 	.word	0x0000d1e9
    d3c4:	0000d27d 	.word	0x0000d27d

0000d3c8 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    d3c8:	b580      	push	{r7, lr}
    d3ca:	b084      	sub	sp, #16
    d3cc:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    d3ce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d3d2:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    d3d4:	68bb      	ldr	r3, [r7, #8]
    d3d6:	8c1b      	ldrh	r3, [r3, #32]
    d3d8:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    d3da:	88fb      	ldrh	r3, [r7, #6]
    d3dc:	2b00      	cmp	r3, #0
    d3de:	d104      	bne.n	d3ea <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    d3e0:	4b13      	ldr	r3, [pc, #76]	; (d430 <_usb_d_dev_handler+0x68>)
    d3e2:	4798      	blx	r3
    d3e4:	4603      	mov	r3, r0
    d3e6:	2b00      	cmp	r3, #0
    d3e8:	d11e      	bne.n	d428 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    d3ea:	2300      	movs	r3, #0
    d3ec:	73fb      	strb	r3, [r7, #15]
    d3ee:	e017      	b.n	d420 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    d3f0:	7bfa      	ldrb	r2, [r7, #15]
    d3f2:	4613      	mov	r3, r2
    d3f4:	009b      	lsls	r3, r3, #2
    d3f6:	4413      	add	r3, r2
    d3f8:	009b      	lsls	r3, r3, #2
    d3fa:	3310      	adds	r3, #16
    d3fc:	4a0d      	ldr	r2, [pc, #52]	; (d434 <_usb_d_dev_handler+0x6c>)
    d3fe:	4413      	add	r3, r2
    d400:	3304      	adds	r3, #4
    d402:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    d404:	683b      	ldr	r3, [r7, #0]
    d406:	7c9b      	ldrb	r3, [r3, #18]
    d408:	2bff      	cmp	r3, #255	; 0xff
    d40a:	d005      	beq.n	d418 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    d40c:	88fb      	ldrh	r3, [r7, #6]
    d40e:	6839      	ldr	r1, [r7, #0]
    d410:	4618      	mov	r0, r3
    d412:	4b09      	ldr	r3, [pc, #36]	; (d438 <_usb_d_dev_handler+0x70>)
    d414:	4798      	blx	r3
    d416:	e000      	b.n	d41a <_usb_d_dev_handler+0x52>
			continue;
    d418:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    d41a:	7bfb      	ldrb	r3, [r7, #15]
    d41c:	3301      	adds	r3, #1
    d41e:	73fb      	strb	r3, [r7, #15]
    d420:	7bfb      	ldrb	r3, [r7, #15]
    d422:	2b08      	cmp	r3, #8
    d424:	d9e4      	bls.n	d3f0 <_usb_d_dev_handler+0x28>
    d426:	e000      	b.n	d42a <_usb_d_dev_handler+0x62>
			return;
    d428:	bf00      	nop
	}
}
    d42a:	3710      	adds	r7, #16
    d42c:	46bd      	mov	sp, r7
    d42e:	bd80      	pop	{r7, pc}
    d430:	0000c921 	.word	0x0000c921
    d434:	200031ec 	.word	0x200031ec
    d438:	0000d311 	.word	0x0000d311

0000d43c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    d43c:	b580      	push	{r7, lr}
    d43e:	b082      	sub	sp, #8
    d440:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    d442:	2300      	movs	r3, #0
    d444:	71fb      	strb	r3, [r7, #7]
    d446:	e023      	b.n	d490 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    d448:	79fa      	ldrb	r2, [r7, #7]
    d44a:	4613      	mov	r3, r2
    d44c:	009b      	lsls	r3, r3, #2
    d44e:	4413      	add	r3, r2
    d450:	009b      	lsls	r3, r3, #2
    d452:	3310      	adds	r3, #16
    d454:	4a14      	ldr	r2, [pc, #80]	; (d4a8 <_usb_d_dev_reset_epts+0x6c>)
    d456:	4413      	add	r3, r2
    d458:	3304      	adds	r3, #4
    d45a:	2103      	movs	r1, #3
    d45c:	4618      	mov	r0, r3
    d45e:	4b13      	ldr	r3, [pc, #76]	; (d4ac <_usb_d_dev_reset_epts+0x70>)
    d460:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    d462:	79fa      	ldrb	r2, [r7, #7]
    d464:	4910      	ldr	r1, [pc, #64]	; (d4a8 <_usb_d_dev_reset_epts+0x6c>)
    d466:	4613      	mov	r3, r2
    d468:	009b      	lsls	r3, r3, #2
    d46a:	4413      	add	r3, r2
    d46c:	009b      	lsls	r3, r3, #2
    d46e:	440b      	add	r3, r1
    d470:	3326      	adds	r3, #38	; 0x26
    d472:	22ff      	movs	r2, #255	; 0xff
    d474:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    d476:	79fa      	ldrb	r2, [r7, #7]
    d478:	490b      	ldr	r1, [pc, #44]	; (d4a8 <_usb_d_dev_reset_epts+0x6c>)
    d47a:	4613      	mov	r3, r2
    d47c:	009b      	lsls	r3, r3, #2
    d47e:	4413      	add	r3, r2
    d480:	009b      	lsls	r3, r3, #2
    d482:	440b      	add	r3, r1
    d484:	3327      	adds	r3, #39	; 0x27
    d486:	2200      	movs	r2, #0
    d488:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    d48a:	79fb      	ldrb	r3, [r7, #7]
    d48c:	3301      	adds	r3, #1
    d48e:	71fb      	strb	r3, [r7, #7]
    d490:	79fb      	ldrb	r3, [r7, #7]
    d492:	2b08      	cmp	r3, #8
    d494:	d9d8      	bls.n	d448 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    d496:	22a0      	movs	r2, #160	; 0xa0
    d498:	2100      	movs	r1, #0
    d49a:	4805      	ldr	r0, [pc, #20]	; (d4b0 <_usb_d_dev_reset_epts+0x74>)
    d49c:	4b05      	ldr	r3, [pc, #20]	; (d4b4 <_usb_d_dev_reset_epts+0x78>)
    d49e:	4798      	blx	r3
}
    d4a0:	bf00      	nop
    d4a2:	3708      	adds	r7, #8
    d4a4:	46bd      	mov	sp, r7
    d4a6:	bd80      	pop	{r7, pc}
    d4a8:	200031ec 	.word	0x200031ec
    d4ac:	0000dd01 	.word	0x0000dd01
    d4b0:	200032b4 	.word	0x200032b4
    d4b4:	0001790d 	.word	0x0001790d

0000d4b8 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    d4b8:	b580      	push	{r7, lr}
    d4ba:	b084      	sub	sp, #16
    d4bc:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    d4be:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d4c2:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    d4c4:	2301      	movs	r3, #1
    d4c6:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    d4c8:	2304      	movs	r3, #4
    d4ca:	713b      	strb	r3, [r7, #4]
    d4cc:	2300      	movs	r3, #0
    d4ce:	717b      	strb	r3, [r7, #5]
    d4d0:	2300      	movs	r3, #0
    d4d2:	71bb      	strb	r3, [r7, #6]
    d4d4:	2300      	movs	r3, #0
    d4d6:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    d4d8:	2101      	movs	r1, #1
    d4da:	68f8      	ldr	r0, [r7, #12]
    d4dc:	4b26      	ldr	r3, [pc, #152]	; (d578 <_usb_d_dev_init+0xc0>)
    d4de:	4798      	blx	r3
    d4e0:	4603      	mov	r3, r0
    d4e2:	f083 0301 	eor.w	r3, r3, #1
    d4e6:	b2db      	uxtb	r3, r3
    d4e8:	2b00      	cmp	r3, #0
    d4ea:	d011      	beq.n	d510 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    d4ec:	2102      	movs	r1, #2
    d4ee:	68f8      	ldr	r0, [r7, #12]
    d4f0:	4b22      	ldr	r3, [pc, #136]	; (d57c <_usb_d_dev_init+0xc4>)
    d4f2:	4798      	blx	r3
    d4f4:	4603      	mov	r3, r0
    d4f6:	2b00      	cmp	r3, #0
    d4f8:	d006      	beq.n	d508 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    d4fa:	68f8      	ldr	r0, [r7, #12]
    d4fc:	4b20      	ldr	r3, [pc, #128]	; (d580 <_usb_d_dev_init+0xc8>)
    d4fe:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    d500:	2102      	movs	r1, #2
    d502:	68f8      	ldr	r0, [r7, #12]
    d504:	4b1f      	ldr	r3, [pc, #124]	; (d584 <_usb_d_dev_init+0xcc>)
    d506:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    d508:	2101      	movs	r1, #1
    d50a:	68f8      	ldr	r0, [r7, #12]
    d50c:	4b1e      	ldr	r3, [pc, #120]	; (d588 <_usb_d_dev_init+0xd0>)
    d50e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    d510:	2101      	movs	r1, #1
    d512:	68f8      	ldr	r0, [r7, #12]
    d514:	4b1b      	ldr	r3, [pc, #108]	; (d584 <_usb_d_dev_init+0xcc>)
    d516:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    d518:	4b1c      	ldr	r3, [pc, #112]	; (d58c <_usb_d_dev_init+0xd4>)
    d51a:	4a1d      	ldr	r2, [pc, #116]	; (d590 <_usb_d_dev_init+0xd8>)
    d51c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    d51e:	4b1b      	ldr	r3, [pc, #108]	; (d58c <_usb_d_dev_init+0xd4>)
    d520:	4a1b      	ldr	r2, [pc, #108]	; (d590 <_usb_d_dev_init+0xd8>)
    d522:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    d524:	4b19      	ldr	r3, [pc, #100]	; (d58c <_usb_d_dev_init+0xd4>)
    d526:	4a1a      	ldr	r2, [pc, #104]	; (d590 <_usb_d_dev_init+0xd8>)
    d528:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    d52a:	4b18      	ldr	r3, [pc, #96]	; (d58c <_usb_d_dev_init+0xd4>)
    d52c:	4a18      	ldr	r2, [pc, #96]	; (d590 <_usb_d_dev_init+0xd8>)
    d52e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    d530:	4b16      	ldr	r3, [pc, #88]	; (d58c <_usb_d_dev_init+0xd4>)
    d532:	4a17      	ldr	r2, [pc, #92]	; (d590 <_usb_d_dev_init+0xd8>)
    d534:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    d536:	4b17      	ldr	r3, [pc, #92]	; (d594 <_usb_d_dev_init+0xdc>)
    d538:	4798      	blx	r3

	_usb_load_calib();
    d53a:	4b17      	ldr	r3, [pc, #92]	; (d598 <_usb_d_dev_init+0xe0>)
    d53c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    d53e:	2104      	movs	r1, #4
    d540:	68f8      	ldr	r0, [r7, #12]
    d542:	4b11      	ldr	r3, [pc, #68]	; (d588 <_usb_d_dev_init+0xd0>)
    d544:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    d546:	4b15      	ldr	r3, [pc, #84]	; (d59c <_usb_d_dev_init+0xe4>)
    d548:	4619      	mov	r1, r3
    d54a:	68f8      	ldr	r0, [r7, #12]
    d54c:	4b14      	ldr	r3, [pc, #80]	; (d5a0 <_usb_d_dev_init+0xe8>)
    d54e:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    d550:	7afb      	ldrb	r3, [r7, #11]
    d552:	f107 0210 	add.w	r2, r7, #16
    d556:	4413      	add	r3, r2
    d558:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    d55c:	f043 0301 	orr.w	r3, r3, #1
    d560:	b2db      	uxtb	r3, r3
    d562:	b29b      	uxth	r3, r3
    d564:	4619      	mov	r1, r3
    d566:	68f8      	ldr	r0, [r7, #12]
    d568:	4b0e      	ldr	r3, [pc, #56]	; (d5a4 <_usb_d_dev_init+0xec>)
    d56a:	4798      	blx	r3

	return ERR_NONE;
    d56c:	2300      	movs	r3, #0
}
    d56e:	4618      	mov	r0, r3
    d570:	3710      	adds	r7, #16
    d572:	46bd      	mov	sp, r7
    d574:	bd80      	pop	{r7, pc}
    d576:	bf00      	nop
    d578:	0000bb51 	.word	0x0000bb51
    d57c:	0000bea1 	.word	0x0000bea1
    d580:	0000be75 	.word	0x0000be75
    d584:	0000bb27 	.word	0x0000bb27
    d588:	0000bed1 	.word	0x0000bed1
    d58c:	200031ec 	.word	0x200031ec
    d590:	0000bf99 	.word	0x0000bf99
    d594:	0000d43d 	.word	0x0000d43d
    d598:	0000bfb1 	.word	0x0000bfb1
    d59c:	200032b4 	.word	0x200032b4
    d5a0:	0000bf7d 	.word	0x0000bf7d
    d5a4:	0000bf41 	.word	0x0000bf41

0000d5a8 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    d5a8:	b580      	push	{r7, lr}
    d5aa:	b082      	sub	sp, #8
    d5ac:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    d5ae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d5b2:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    d5b4:	2103      	movs	r1, #3
    d5b6:	6878      	ldr	r0, [r7, #4]
    d5b8:	4b17      	ldr	r3, [pc, #92]	; (d618 <_usb_d_dev_enable+0x70>)
    d5ba:	4798      	blx	r3
    d5bc:	4603      	mov	r3, r0
    d5be:	2b00      	cmp	r3, #0
    d5c0:	d002      	beq.n	d5c8 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    d5c2:	f06f 0310 	mvn.w	r3, #16
    d5c6:	e023      	b.n	d610 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    d5c8:	6878      	ldr	r0, [r7, #4]
    d5ca:	4b14      	ldr	r3, [pc, #80]	; (d61c <_usb_d_dev_enable+0x74>)
    d5cc:	4798      	blx	r3
    d5ce:	4603      	mov	r3, r0
    d5d0:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    d5d2:	78fb      	ldrb	r3, [r7, #3]
    d5d4:	f003 0302 	and.w	r3, r3, #2
    d5d8:	2b00      	cmp	r3, #0
    d5da:	d107      	bne.n	d5ec <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    d5dc:	78fb      	ldrb	r3, [r7, #3]
    d5de:	f043 0302 	orr.w	r3, r3, #2
    d5e2:	b2db      	uxtb	r3, r3
    d5e4:	4619      	mov	r1, r3
    d5e6:	6878      	ldr	r0, [r7, #4]
    d5e8:	4b0d      	ldr	r3, [pc, #52]	; (d620 <_usb_d_dev_enable+0x78>)
    d5ea:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    d5ec:	2050      	movs	r0, #80	; 0x50
    d5ee:	4b0d      	ldr	r3, [pc, #52]	; (d624 <_usb_d_dev_enable+0x7c>)
    d5f0:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    d5f2:	2051      	movs	r0, #81	; 0x51
    d5f4:	4b0b      	ldr	r3, [pc, #44]	; (d624 <_usb_d_dev_enable+0x7c>)
    d5f6:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    d5f8:	2052      	movs	r0, #82	; 0x52
    d5fa:	4b0a      	ldr	r3, [pc, #40]	; (d624 <_usb_d_dev_enable+0x7c>)
    d5fc:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    d5fe:	2053      	movs	r0, #83	; 0x53
    d600:	4b08      	ldr	r3, [pc, #32]	; (d624 <_usb_d_dev_enable+0x7c>)
    d602:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    d604:	f240 218d 	movw	r1, #653	; 0x28d
    d608:	6878      	ldr	r0, [r7, #4]
    d60a:	4b07      	ldr	r3, [pc, #28]	; (d628 <_usb_d_dev_enable+0x80>)
    d60c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    d60e:	2300      	movs	r3, #0
}
    d610:	4618      	mov	r0, r3
    d612:	3708      	adds	r7, #8
    d614:	46bd      	mov	sp, r7
    d616:	bd80      	pop	{r7, pc}
    d618:	0000be4b 	.word	0x0000be4b
    d61c:	0000bef9 	.word	0x0000bef9
    d620:	0000bed1 	.word	0x0000bed1
    d624:	0000ba5d 	.word	0x0000ba5d
    d628:	0000bdf5 	.word	0x0000bdf5

0000d62c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    d62c:	b580      	push	{r7, lr}
    d62e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    d630:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d634:	4b01      	ldr	r3, [pc, #4]	; (d63c <_usb_d_dev_attach+0x10>)
    d636:	4798      	blx	r3
}
    d638:	bf00      	nop
    d63a:	bd80      	pop	{r7, pc}
    d63c:	0000bf1d 	.word	0x0000bf1d

0000d640 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    d640:	b580      	push	{r7, lr}
    d642:	b082      	sub	sp, #8
    d644:	af00      	add	r7, sp, #0
    d646:	4603      	mov	r3, r0
    d648:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    d64a:	79fb      	ldrb	r3, [r7, #7]
    d64c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d650:	b2db      	uxtb	r3, r3
    d652:	4619      	mov	r1, r3
    d654:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d658:	4b02      	ldr	r3, [pc, #8]	; (d664 <_usb_d_dev_set_address+0x24>)
    d65a:	4798      	blx	r3
}
    d65c:	bf00      	nop
    d65e:	3708      	adds	r7, #8
    d660:	46bd      	mov	sp, r7
    d662:	bd80      	pop	{r7, pc}
    d664:	0000bf5f 	.word	0x0000bf5f

0000d668 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    d668:	b590      	push	{r4, r7, lr}
    d66a:	b085      	sub	sp, #20
    d66c:	af00      	add	r7, sp, #0
    d66e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    d670:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d674:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d676:	687b      	ldr	r3, [r7, #4]
    d678:	7c9b      	ldrb	r3, [r3, #18]
    d67a:	f003 030f 	and.w	r3, r3, #15
    d67e:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    d680:	687b      	ldr	r3, [r7, #4]
    d682:	68db      	ldr	r3, [r3, #12]
    d684:	461a      	mov	r2, r3
    d686:	7afb      	ldrb	r3, [r7, #11]
    d688:	2100      	movs	r1, #0
    d68a:	4618      	mov	r0, r3
    d68c:	4b0f      	ldr	r3, [pc, #60]	; (d6cc <_usb_d_dev_trans_setup+0x64>)
    d68e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    d690:	687b      	ldr	r3, [r7, #4]
    d692:	8a1b      	ldrh	r3, [r3, #16]
    d694:	461a      	mov	r2, r3
    d696:	7af8      	ldrb	r0, [r7, #11]
    d698:	2300      	movs	r3, #0
    d69a:	2100      	movs	r1, #0
    d69c:	4c0c      	ldr	r4, [pc, #48]	; (d6d0 <_usb_d_dev_trans_setup+0x68>)
    d69e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    d6a0:	7afb      	ldrb	r3, [r7, #11]
    d6a2:	22b0      	movs	r2, #176	; 0xb0
    d6a4:	4619      	mov	r1, r3
    d6a6:	68f8      	ldr	r0, [r7, #12]
    d6a8:	4b0a      	ldr	r3, [pc, #40]	; (d6d4 <_usb_d_dev_trans_setup+0x6c>)
    d6aa:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    d6ac:	7afb      	ldrb	r3, [r7, #11]
    d6ae:	2200      	movs	r2, #0
    d6b0:	2100      	movs	r1, #0
    d6b2:	4618      	mov	r0, r3
    d6b4:	4b08      	ldr	r3, [pc, #32]	; (d6d8 <_usb_d_dev_trans_setup+0x70>)
    d6b6:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    d6b8:	7afb      	ldrb	r3, [r7, #11]
    d6ba:	2210      	movs	r2, #16
    d6bc:	4619      	mov	r1, r3
    d6be:	68f8      	ldr	r0, [r7, #12]
    d6c0:	4b06      	ldr	r3, [pc, #24]	; (d6dc <_usb_d_dev_trans_setup+0x74>)
    d6c2:	4798      	blx	r3
}
    d6c4:	bf00      	nop
    d6c6:	3714      	adds	r7, #20
    d6c8:	46bd      	mov	sp, r7
    d6ca:	bd90      	pop	{r4, r7, pc}
    d6cc:	0000c3fd 	.word	0x0000c3fd
    d6d0:	0000c585 	.word	0x0000c585
    d6d4:	0000bc5d 	.word	0x0000bc5d
    d6d8:	0000c655 	.word	0x0000c655
    d6dc:	0000bcb1 	.word	0x0000bcb1

0000d6e0 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    d6e0:	b580      	push	{r7, lr}
    d6e2:	b088      	sub	sp, #32
    d6e4:	af00      	add	r7, sp, #0
    d6e6:	4603      	mov	r3, r0
    d6e8:	71fb      	strb	r3, [r7, #7]
    d6ea:	460b      	mov	r3, r1
    d6ec:	71bb      	strb	r3, [r7, #6]
    d6ee:	4613      	mov	r3, r2
    d6f0:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    d6f2:	79fb      	ldrb	r3, [r7, #7]
    d6f4:	f003 030f 	and.w	r3, r3, #15
    d6f8:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    d6fa:	79fb      	ldrb	r3, [r7, #7]
    d6fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d700:	2b00      	cmp	r3, #0
    d702:	bf14      	ite	ne
    d704:	2301      	movne	r3, #1
    d706:	2300      	moveq	r3, #0
    d708:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d70a:	7fba      	ldrb	r2, [r7, #30]
    d70c:	7ffb      	ldrb	r3, [r7, #31]
    d70e:	4611      	mov	r1, r2
    d710:	4618      	mov	r0, r3
    d712:	4b3e      	ldr	r3, [pc, #248]	; (d80c <_usb_d_dev_ep_init+0x12c>)
    d714:	4798      	blx	r3
    d716:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    d718:	79bb      	ldrb	r3, [r7, #6]
    d71a:	f003 0303 	and.w	r3, r3, #3
    d71e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    d720:	7ffa      	ldrb	r2, [r7, #31]
    d722:	4613      	mov	r3, r2
    d724:	005b      	lsls	r3, r3, #1
    d726:	4413      	add	r3, r2
    d728:	009b      	lsls	r3, r3, #2
    d72a:	4a39      	ldr	r2, [pc, #228]	; (d810 <_usb_d_dev_ep_init+0x130>)
    d72c:	4413      	add	r3, r2
    d72e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    d730:	7ffb      	ldrb	r3, [r7, #31]
    d732:	2b04      	cmp	r3, #4
    d734:	d902      	bls.n	d73c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    d736:	f06f 0311 	mvn.w	r3, #17
    d73a:	e063      	b.n	d804 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    d73c:	69bb      	ldr	r3, [r7, #24]
    d73e:	7c9b      	ldrb	r3, [r3, #18]
    d740:	2bff      	cmp	r3, #255	; 0xff
    d742:	d002      	beq.n	d74a <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    d744:	f06f 0313 	mvn.w	r3, #19
    d748:	e05c      	b.n	d804 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    d74a:	7dfb      	ldrb	r3, [r7, #23]
    d74c:	2b00      	cmp	r3, #0
    d74e:	d11f      	bne.n	d790 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    d750:	7fbb      	ldrb	r3, [r7, #30]
    d752:	2b00      	cmp	r3, #0
    d754:	bf14      	ite	ne
    d756:	2301      	movne	r3, #1
    d758:	2300      	moveq	r3, #0
    d75a:	b2db      	uxtb	r3, r3
    d75c:	f083 0301 	eor.w	r3, r3, #1
    d760:	b2db      	uxtb	r3, r3
    d762:	f003 0301 	and.w	r3, r3, #1
    d766:	b2da      	uxtb	r2, r3
    d768:	7ffb      	ldrb	r3, [r7, #31]
    d76a:	4611      	mov	r1, r2
    d76c:	4618      	mov	r0, r3
    d76e:	4b27      	ldr	r3, [pc, #156]	; (d80c <_usb_d_dev_ep_init+0x12c>)
    d770:	4798      	blx	r3
    d772:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    d774:	68fb      	ldr	r3, [r7, #12]
    d776:	7c9b      	ldrb	r3, [r3, #18]
    d778:	2bff      	cmp	r3, #255	; 0xff
    d77a:	d002      	beq.n	d782 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    d77c:	f06f 0313 	mvn.w	r3, #19
    d780:	e040      	b.n	d804 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    d782:	693b      	ldr	r3, [r7, #16]
    d784:	681b      	ldr	r3, [r3, #0]
    d786:	2b00      	cmp	r3, #0
    d788:	d102      	bne.n	d790 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    d78a:	f06f 0312 	mvn.w	r3, #18
    d78e:	e039      	b.n	d804 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    d790:	7fbb      	ldrb	r3, [r7, #30]
    d792:	2b00      	cmp	r3, #0
    d794:	d007      	beq.n	d7a6 <_usb_d_dev_ep_init+0xc6>
    d796:	693b      	ldr	r3, [r7, #16]
    d798:	685b      	ldr	r3, [r3, #4]
    d79a:	2b00      	cmp	r3, #0
    d79c:	bf14      	ite	ne
    d79e:	2301      	movne	r3, #1
    d7a0:	2300      	moveq	r3, #0
    d7a2:	b2db      	uxtb	r3, r3
    d7a4:	e006      	b.n	d7b4 <_usb_d_dev_ep_init+0xd4>
    d7a6:	693b      	ldr	r3, [r7, #16]
    d7a8:	681b      	ldr	r3, [r3, #0]
    d7aa:	2b00      	cmp	r3, #0
    d7ac:	bf14      	ite	ne
    d7ae:	2301      	movne	r3, #1
    d7b0:	2300      	moveq	r3, #0
    d7b2:	b2db      	uxtb	r3, r3
    d7b4:	2b00      	cmp	r3, #0
    d7b6:	d00f      	beq.n	d7d8 <_usb_d_dev_ep_init+0xf8>
    d7b8:	7fbb      	ldrb	r3, [r7, #30]
    d7ba:	2b00      	cmp	r3, #0
    d7bc:	d003      	beq.n	d7c6 <_usb_d_dev_ep_init+0xe6>
    d7be:	693b      	ldr	r3, [r7, #16]
    d7c0:	895b      	ldrh	r3, [r3, #10]
    d7c2:	461a      	mov	r2, r3
    d7c4:	e002      	b.n	d7cc <_usb_d_dev_ep_init+0xec>
    d7c6:	693b      	ldr	r3, [r7, #16]
    d7c8:	891b      	ldrh	r3, [r3, #8]
    d7ca:	461a      	mov	r2, r3
    d7cc:	88bb      	ldrh	r3, [r7, #4]
    d7ce:	429a      	cmp	r2, r3
    d7d0:	da02      	bge.n	d7d8 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    d7d2:	f06f 0312 	mvn.w	r3, #18
    d7d6:	e015      	b.n	d804 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    d7d8:	7fbb      	ldrb	r3, [r7, #30]
    d7da:	2b00      	cmp	r3, #0
    d7dc:	d002      	beq.n	d7e4 <_usb_d_dev_ep_init+0x104>
    d7de:	693b      	ldr	r3, [r7, #16]
    d7e0:	685b      	ldr	r3, [r3, #4]
    d7e2:	e001      	b.n	d7e8 <_usb_d_dev_ep_init+0x108>
    d7e4:	693b      	ldr	r3, [r7, #16]
    d7e6:	681b      	ldr	r3, [r3, #0]
    d7e8:	69ba      	ldr	r2, [r7, #24]
    d7ea:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    d7ec:	69bb      	ldr	r3, [r7, #24]
    d7ee:	88ba      	ldrh	r2, [r7, #4]
    d7f0:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    d7f2:	7dfb      	ldrb	r3, [r7, #23]
    d7f4:	3301      	adds	r3, #1
    d7f6:	b2da      	uxtb	r2, r3
    d7f8:	69bb      	ldr	r3, [r7, #24]
    d7fa:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    d7fc:	69bb      	ldr	r3, [r7, #24]
    d7fe:	79fa      	ldrb	r2, [r7, #7]
    d800:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    d802:	2300      	movs	r3, #0
}
    d804:	4618      	mov	r0, r3
    d806:	3720      	adds	r7, #32
    d808:	46bd      	mov	sp, r7
    d80a:	bd80      	pop	{r7, pc}
    d80c:	0000c711 	.word	0x0000c711
    d810:	000186e8 	.word	0x000186e8

0000d814 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    d814:	b580      	push	{r7, lr}
    d816:	b086      	sub	sp, #24
    d818:	af00      	add	r7, sp, #0
    d81a:	4603      	mov	r3, r0
    d81c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    d81e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d822:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    d824:	79fb      	ldrb	r3, [r7, #7]
    d826:	f003 030f 	and.w	r3, r3, #15
    d82a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    d82c:	79fb      	ldrb	r3, [r7, #7]
    d82e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d832:	2b00      	cmp	r3, #0
    d834:	bf14      	ite	ne
    d836:	2301      	movne	r3, #1
    d838:	2300      	moveq	r3, #0
    d83a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d83c:	7cba      	ldrb	r2, [r7, #18]
    d83e:	7cfb      	ldrb	r3, [r7, #19]
    d840:	4611      	mov	r1, r2
    d842:	4618      	mov	r0, r3
    d844:	4b2a      	ldr	r3, [pc, #168]	; (d8f0 <_usb_d_dev_ep_deinit+0xdc>)
    d846:	4798      	blx	r3
    d848:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    d84a:	7cfb      	ldrb	r3, [r7, #19]
    d84c:	2b04      	cmp	r3, #4
    d84e:	d84a      	bhi.n	d8e6 <_usb_d_dev_ep_deinit+0xd2>
    d850:	68fb      	ldr	r3, [r7, #12]
    d852:	7c9b      	ldrb	r3, [r3, #18]
    d854:	2bff      	cmp	r3, #255	; 0xff
    d856:	d046      	beq.n	d8e6 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    d858:	7cbb      	ldrb	r3, [r7, #18]
    d85a:	2203      	movs	r2, #3
    d85c:	4619      	mov	r1, r3
    d85e:	68f8      	ldr	r0, [r7, #12]
    d860:	4b24      	ldr	r3, [pc, #144]	; (d8f4 <_usb_d_dev_ep_deinit+0xe0>)
    d862:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    d864:	68fb      	ldr	r3, [r7, #12]
    d866:	7cdb      	ldrb	r3, [r3, #19]
    d868:	f003 0307 	and.w	r3, r3, #7
    d86c:	b2db      	uxtb	r3, r3
    d86e:	2b01      	cmp	r3, #1
    d870:	d107      	bne.n	d882 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    d872:	79fb      	ldrb	r3, [r7, #7]
    d874:	697a      	ldr	r2, [r7, #20]
    d876:	3308      	adds	r3, #8
    d878:	015b      	lsls	r3, r3, #5
    d87a:	4413      	add	r3, r2
    d87c:	2200      	movs	r2, #0
    d87e:	701a      	strb	r2, [r3, #0]
    d880:	e02a      	b.n	d8d8 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    d882:	f997 3007 	ldrsb.w	r3, [r7, #7]
    d886:	2b00      	cmp	r3, #0
    d888:	da15      	bge.n	d8b6 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    d88a:	79fb      	ldrb	r3, [r7, #7]
    d88c:	f003 030f 	and.w	r3, r3, #15
    d890:	79fa      	ldrb	r2, [r7, #7]
    d892:	f002 020f 	and.w	r2, r2, #15
    d896:	6979      	ldr	r1, [r7, #20]
    d898:	3208      	adds	r2, #8
    d89a:	0152      	lsls	r2, r2, #5
    d89c:	440a      	add	r2, r1
    d89e:	7812      	ldrb	r2, [r2, #0]
    d8a0:	b2d2      	uxtb	r2, r2
    d8a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    d8a6:	b2d1      	uxtb	r1, r2
    d8a8:	697a      	ldr	r2, [r7, #20]
    d8aa:	3308      	adds	r3, #8
    d8ac:	015b      	lsls	r3, r3, #5
    d8ae:	4413      	add	r3, r2
    d8b0:	460a      	mov	r2, r1
    d8b2:	701a      	strb	r2, [r3, #0]
    d8b4:	e010      	b.n	d8d8 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    d8b6:	79fb      	ldrb	r3, [r7, #7]
    d8b8:	79fa      	ldrb	r2, [r7, #7]
    d8ba:	6979      	ldr	r1, [r7, #20]
    d8bc:	3208      	adds	r2, #8
    d8be:	0152      	lsls	r2, r2, #5
    d8c0:	440a      	add	r2, r1
    d8c2:	7812      	ldrb	r2, [r2, #0]
    d8c4:	b2d2      	uxtb	r2, r2
    d8c6:	f022 0207 	bic.w	r2, r2, #7
    d8ca:	b2d1      	uxtb	r1, r2
    d8cc:	697a      	ldr	r2, [r7, #20]
    d8ce:	3308      	adds	r3, #8
    d8d0:	015b      	lsls	r3, r3, #5
    d8d2:	4413      	add	r3, r2
    d8d4:	460a      	mov	r2, r1
    d8d6:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    d8d8:	68fb      	ldr	r3, [r7, #12]
    d8da:	2200      	movs	r2, #0
    d8dc:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    d8de:	68fb      	ldr	r3, [r7, #12]
    d8e0:	22ff      	movs	r2, #255	; 0xff
    d8e2:	749a      	strb	r2, [r3, #18]
    d8e4:	e000      	b.n	d8e8 <_usb_d_dev_ep_deinit+0xd4>
		return;
    d8e6:	bf00      	nop
}
    d8e8:	3718      	adds	r7, #24
    d8ea:	46bd      	mov	sp, r7
    d8ec:	bd80      	pop	{r7, pc}
    d8ee:	bf00      	nop
    d8f0:	0000c711 	.word	0x0000c711
    d8f4:	0000dd49 	.word	0x0000dd49

0000d8f8 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    d8f8:	b5b0      	push	{r4, r5, r7, lr}
    d8fa:	b088      	sub	sp, #32
    d8fc:	af00      	add	r7, sp, #0
    d8fe:	4603      	mov	r3, r0
    d900:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    d902:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d906:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    d908:	79fb      	ldrb	r3, [r7, #7]
    d90a:	f003 030f 	and.w	r3, r3, #15
    d90e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    d910:	79fb      	ldrb	r3, [r7, #7]
    d912:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d916:	2b00      	cmp	r3, #0
    d918:	bf14      	ite	ne
    d91a:	2301      	movne	r3, #1
    d91c:	2300      	moveq	r3, #0
    d91e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    d920:	7eba      	ldrb	r2, [r7, #26]
    d922:	7efb      	ldrb	r3, [r7, #27]
    d924:	4611      	mov	r1, r2
    d926:	4618      	mov	r0, r3
    d928:	4b70      	ldr	r3, [pc, #448]	; (daec <_usb_d_dev_ep_enable+0x1f4>)
    d92a:	4798      	blx	r3
    d92c:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    d92e:	7efb      	ldrb	r3, [r7, #27]
    d930:	4619      	mov	r1, r3
    d932:	69f8      	ldr	r0, [r7, #28]
    d934:	4b6e      	ldr	r3, [pc, #440]	; (daf0 <_usb_d_dev_ep_enable+0x1f8>)
    d936:	4798      	blx	r3
    d938:	4603      	mov	r3, r0
    d93a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    d93c:	7efb      	ldrb	r3, [r7, #27]
    d93e:	2b04      	cmp	r3, #4
    d940:	d803      	bhi.n	d94a <_usb_d_dev_ep_enable+0x52>
    d942:	697b      	ldr	r3, [r7, #20]
    d944:	7c9b      	ldrb	r3, [r3, #18]
    d946:	2bff      	cmp	r3, #255	; 0xff
    d948:	d102      	bne.n	d950 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    d94a:	f06f 0311 	mvn.w	r3, #17
    d94e:	e0c8      	b.n	dae2 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    d950:	7efb      	ldrb	r3, [r7, #27]
    d952:	015b      	lsls	r3, r3, #5
    d954:	4a67      	ldr	r2, [pc, #412]	; (daf4 <_usb_d_dev_ep_enable+0x1fc>)
    d956:	4413      	add	r3, r2
    d958:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    d95a:	697b      	ldr	r3, [r7, #20]
    d95c:	7cdb      	ldrb	r3, [r3, #19]
    d95e:	f003 0307 	and.w	r3, r3, #7
    d962:	b2db      	uxtb	r3, r3
    d964:	2b01      	cmp	r3, #1
    d966:	d14b      	bne.n	da00 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    d968:	7cfb      	ldrb	r3, [r7, #19]
    d96a:	f003 0377 	and.w	r3, r3, #119	; 0x77
    d96e:	2b00      	cmp	r3, #0
    d970:	d002      	beq.n	d978 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    d972:	f06f 0313 	mvn.w	r3, #19
    d976:	e0b4      	b.n	dae2 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    d978:	7efb      	ldrb	r3, [r7, #27]
    d97a:	2211      	movs	r2, #17
    d97c:	4619      	mov	r1, r3
    d97e:	69f8      	ldr	r0, [r7, #28]
    d980:	4b5d      	ldr	r3, [pc, #372]	; (daf8 <_usb_d_dev_ep_enable+0x200>)
    d982:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d984:	697b      	ldr	r3, [r7, #20]
    d986:	8a1b      	ldrh	r3, [r3, #16]
    d988:	039b      	lsls	r3, r3, #14
    d98a:	4c5c      	ldr	r4, [pc, #368]	; (dafc <_usb_d_dev_ep_enable+0x204>)
    d98c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d98e:	697b      	ldr	r3, [r7, #20]
    d990:	8a1b      	ldrh	r3, [r3, #16]
    d992:	4618      	mov	r0, r3
    d994:	4b5a      	ldr	r3, [pc, #360]	; (db00 <_usb_d_dev_ep_enable+0x208>)
    d996:	4798      	blx	r3
    d998:	4603      	mov	r3, r0
    d99a:	071b      	lsls	r3, r3, #28
    d99c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d9a0:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d9a4:	68fb      	ldr	r3, [r7, #12]
    d9a6:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    d9a8:	68fb      	ldr	r3, [r7, #12]
    d9aa:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d9ae:	697b      	ldr	r3, [r7, #20]
    d9b0:	8a1b      	ldrh	r3, [r3, #16]
    d9b2:	f3c3 050d 	ubfx	r5, r3, #0, #14
    d9b6:	697b      	ldr	r3, [r7, #20]
    d9b8:	8a1b      	ldrh	r3, [r3, #16]
    d9ba:	4618      	mov	r0, r3
    d9bc:	4b50      	ldr	r3, [pc, #320]	; (db00 <_usb_d_dev_ep_enable+0x208>)
    d9be:	4798      	blx	r3
    d9c0:	4603      	mov	r3, r0
    d9c2:	071b      	lsls	r3, r3, #28
    d9c4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d9c8:	432b      	orrs	r3, r5
    d9ca:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    d9cc:	7efb      	ldrb	r3, [r7, #27]
    d9ce:	2200      	movs	r2, #0
    d9d0:	2100      	movs	r1, #0
    d9d2:	4618      	mov	r0, r3
    d9d4:	4b4b      	ldr	r3, [pc, #300]	; (db04 <_usb_d_dev_ep_enable+0x20c>)
    d9d6:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    d9d8:	7efb      	ldrb	r3, [r7, #27]
    d9da:	2200      	movs	r2, #0
    d9dc:	2101      	movs	r1, #1
    d9de:	4618      	mov	r0, r3
    d9e0:	4b49      	ldr	r3, [pc, #292]	; (db08 <_usb_d_dev_ep_enable+0x210>)
    d9e2:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    d9e4:	7efb      	ldrb	r3, [r7, #27]
    d9e6:	2100      	movs	r1, #0
    d9e8:	4618      	mov	r0, r3
    d9ea:	4b48      	ldr	r3, [pc, #288]	; (db0c <_usb_d_dev_ep_enable+0x214>)
    d9ec:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    d9ee:	7efb      	ldrb	r3, [r7, #27]
    d9f0:	2101      	movs	r1, #1
    d9f2:	4618      	mov	r0, r3
    d9f4:	4b45      	ldr	r3, [pc, #276]	; (db0c <_usb_d_dev_ep_enable+0x214>)
    d9f6:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    d9f8:	6978      	ldr	r0, [r7, #20]
    d9fa:	4b45      	ldr	r3, [pc, #276]	; (db10 <_usb_d_dev_ep_enable+0x218>)
    d9fc:	4798      	blx	r3
    d9fe:	e06f      	b.n	dae0 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    da00:	7ebb      	ldrb	r3, [r7, #26]
    da02:	2b00      	cmp	r3, #0
    da04:	d038      	beq.n	da78 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    da06:	7cfb      	ldrb	r3, [r7, #19]
    da08:	f003 0370 	and.w	r3, r3, #112	; 0x70
    da0c:	2b00      	cmp	r3, #0
    da0e:	d002      	beq.n	da16 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    da10:	f06f 0313 	mvn.w	r3, #19
    da14:	e065      	b.n	dae2 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    da16:	697b      	ldr	r3, [r7, #20]
    da18:	7cdb      	ldrb	r3, [r3, #19]
    da1a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    da1e:	b2db      	uxtb	r3, r3
    da20:	011b      	lsls	r3, r3, #4
    da22:	b2db      	uxtb	r3, r3
    da24:	f003 0370 	and.w	r3, r3, #112	; 0x70
    da28:	b2da      	uxtb	r2, r3
    da2a:	7cfb      	ldrb	r3, [r7, #19]
    da2c:	4313      	orrs	r3, r2
    da2e:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    da30:	7cfa      	ldrb	r2, [r7, #19]
    da32:	7efb      	ldrb	r3, [r7, #27]
    da34:	4619      	mov	r1, r3
    da36:	69f8      	ldr	r0, [r7, #28]
    da38:	4b2f      	ldr	r3, [pc, #188]	; (daf8 <_usb_d_dev_ep_enable+0x200>)
    da3a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    da3c:	68fb      	ldr	r3, [r7, #12]
    da3e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    da42:	697b      	ldr	r3, [r7, #20]
    da44:	8a1b      	ldrh	r3, [r3, #16]
    da46:	f3c3 050d 	ubfx	r5, r3, #0, #14
    da4a:	697b      	ldr	r3, [r7, #20]
    da4c:	8a1b      	ldrh	r3, [r3, #16]
    da4e:	4618      	mov	r0, r3
    da50:	4b2b      	ldr	r3, [pc, #172]	; (db00 <_usb_d_dev_ep_enable+0x208>)
    da52:	4798      	blx	r3
    da54:	4603      	mov	r3, r0
    da56:	071b      	lsls	r3, r3, #28
    da58:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    da5c:	432b      	orrs	r3, r5
    da5e:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    da60:	7efb      	ldrb	r3, [r7, #27]
    da62:	2200      	movs	r2, #0
    da64:	2101      	movs	r1, #1
    da66:	4618      	mov	r0, r3
    da68:	4b27      	ldr	r3, [pc, #156]	; (db08 <_usb_d_dev_ep_enable+0x210>)
    da6a:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    da6c:	7efb      	ldrb	r3, [r7, #27]
    da6e:	2101      	movs	r1, #1
    da70:	4618      	mov	r0, r3
    da72:	4b26      	ldr	r3, [pc, #152]	; (db0c <_usb_d_dev_ep_enable+0x214>)
    da74:	4798      	blx	r3
    da76:	e033      	b.n	dae0 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    da78:	7cfb      	ldrb	r3, [r7, #19]
    da7a:	f003 0307 	and.w	r3, r3, #7
    da7e:	2b00      	cmp	r3, #0
    da80:	d002      	beq.n	da88 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    da82:	f06f 0313 	mvn.w	r3, #19
    da86:	e02c      	b.n	dae2 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    da88:	697b      	ldr	r3, [r7, #20]
    da8a:	7cdb      	ldrb	r3, [r3, #19]
    da8c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    da90:	b2db      	uxtb	r3, r3
    da92:	461a      	mov	r2, r3
    da94:	7cfb      	ldrb	r3, [r7, #19]
    da96:	4313      	orrs	r3, r2
    da98:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    da9a:	7cfa      	ldrb	r2, [r7, #19]
    da9c:	7efb      	ldrb	r3, [r7, #27]
    da9e:	4619      	mov	r1, r3
    daa0:	69f8      	ldr	r0, [r7, #28]
    daa2:	4b15      	ldr	r3, [pc, #84]	; (daf8 <_usb_d_dev_ep_enable+0x200>)
    daa4:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    daa6:	697b      	ldr	r3, [r7, #20]
    daa8:	8a1b      	ldrh	r3, [r3, #16]
    daaa:	039b      	lsls	r3, r3, #14
    daac:	4c13      	ldr	r4, [pc, #76]	; (dafc <_usb_d_dev_ep_enable+0x204>)
    daae:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    dab0:	697b      	ldr	r3, [r7, #20]
    dab2:	8a1b      	ldrh	r3, [r3, #16]
    dab4:	4618      	mov	r0, r3
    dab6:	4b12      	ldr	r3, [pc, #72]	; (db00 <_usb_d_dev_ep_enable+0x208>)
    dab8:	4798      	blx	r3
    daba:	4603      	mov	r3, r0
    dabc:	071b      	lsls	r3, r3, #28
    dabe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    dac2:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    dac6:	68fb      	ldr	r3, [r7, #12]
    dac8:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    daca:	7efb      	ldrb	r3, [r7, #27]
    dacc:	2200      	movs	r2, #0
    dace:	2100      	movs	r1, #0
    dad0:	4618      	mov	r0, r3
    dad2:	4b0c      	ldr	r3, [pc, #48]	; (db04 <_usb_d_dev_ep_enable+0x20c>)
    dad4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    dad6:	7efb      	ldrb	r3, [r7, #27]
    dad8:	2100      	movs	r1, #0
    dada:	4618      	mov	r0, r3
    dadc:	4b0b      	ldr	r3, [pc, #44]	; (db0c <_usb_d_dev_ep_enable+0x214>)
    dade:	4798      	blx	r3
	}

	return USB_OK;
    dae0:	2300      	movs	r3, #0
}
    dae2:	4618      	mov	r0, r3
    dae4:	3720      	adds	r7, #32
    dae6:	46bd      	mov	sp, r7
    dae8:	bdb0      	pop	{r4, r5, r7, pc}
    daea:	bf00      	nop
    daec:	0000c711 	.word	0x0000c711
    daf0:	0000bd97 	.word	0x0000bd97
    daf4:	200032b4 	.word	0x200032b4
    daf8:	0000bd6d 	.word	0x0000bd6d
    dafc:	0fffc000 	.word	0x0fffc000
    db00:	0000c6ad 	.word	0x0000c6ad
    db04:	0000c655 	.word	0x0000c655
    db08:	0000c5fd 	.word	0x0000c5fd
    db0c:	0000c5c5 	.word	0x0000c5c5
    db10:	0000d669 	.word	0x0000d669

0000db14 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    db14:	b580      	push	{r7, lr}
    db16:	b084      	sub	sp, #16
    db18:	af00      	add	r7, sp, #0
    db1a:	6078      	str	r0, [r7, #4]
    db1c:	460b      	mov	r3, r1
    db1e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    db20:	687b      	ldr	r3, [r7, #4]
    db22:	7c9b      	ldrb	r3, [r3, #18]
    db24:	f003 030f 	and.w	r3, r3, #15
    db28:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    db2a:	78fa      	ldrb	r2, [r7, #3]
    db2c:	7bfb      	ldrb	r3, [r7, #15]
    db2e:	4611      	mov	r1, r2
    db30:	4618      	mov	r0, r3
    db32:	4b03      	ldr	r3, [pc, #12]	; (db40 <_usb_d_dev_ep_stall_get+0x2c>)
    db34:	4798      	blx	r3
    db36:	4603      	mov	r3, r0
}
    db38:	4618      	mov	r0, r3
    db3a:	3710      	adds	r7, #16
    db3c:	46bd      	mov	sp, r7
    db3e:	bd80      	pop	{r7, pc}
    db40:	0000c205 	.word	0x0000c205

0000db44 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    db44:	b580      	push	{r7, lr}
    db46:	b084      	sub	sp, #16
    db48:	af00      	add	r7, sp, #0
    db4a:	6078      	str	r0, [r7, #4]
    db4c:	460b      	mov	r3, r1
    db4e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    db50:	687b      	ldr	r3, [r7, #4]
    db52:	7c9b      	ldrb	r3, [r3, #18]
    db54:	f003 030f 	and.w	r3, r3, #15
    db58:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    db5a:	78f9      	ldrb	r1, [r7, #3]
    db5c:	7bfb      	ldrb	r3, [r7, #15]
    db5e:	2201      	movs	r2, #1
    db60:	4618      	mov	r0, r3
    db62:	4b0a      	ldr	r3, [pc, #40]	; (db8c <_usb_d_dev_ep_stall_set+0x48>)
    db64:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    db66:	78fb      	ldrb	r3, [r7, #3]
    db68:	2220      	movs	r2, #32
    db6a:	409a      	lsls	r2, r3
    db6c:	7bfb      	ldrb	r3, [r7, #15]
    db6e:	4611      	mov	r1, r2
    db70:	4618      	mov	r0, r3
    db72:	4b07      	ldr	r3, [pc, #28]	; (db90 <_usb_d_dev_ep_stall_set+0x4c>)
    db74:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    db76:	687a      	ldr	r2, [r7, #4]
    db78:	7cd3      	ldrb	r3, [r2, #19]
    db7a:	f043 0308 	orr.w	r3, r3, #8
    db7e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    db80:	2300      	movs	r3, #0
}
    db82:	4618      	mov	r0, r3
    db84:	3710      	adds	r7, #16
    db86:	46bd      	mov	sp, r7
    db88:	bd80      	pop	{r7, pc}
    db8a:	bf00      	nop
    db8c:	0000c1ad 	.word	0x0000c1ad
    db90:	0000c12d 	.word	0x0000c12d

0000db94 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    db94:	b580      	push	{r7, lr}
    db96:	b084      	sub	sp, #16
    db98:	af00      	add	r7, sp, #0
    db9a:	6078      	str	r0, [r7, #4]
    db9c:	460b      	mov	r3, r1
    db9e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    dba0:	687b      	ldr	r3, [r7, #4]
    dba2:	7c9b      	ldrb	r3, [r3, #18]
    dba4:	f003 030f 	and.w	r3, r3, #15
    dba8:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    dbaa:	78fa      	ldrb	r2, [r7, #3]
    dbac:	7bfb      	ldrb	r3, [r7, #15]
    dbae:	4611      	mov	r1, r2
    dbb0:	4618      	mov	r0, r3
    dbb2:	4b28      	ldr	r3, [pc, #160]	; (dc54 <_usb_d_dev_ep_stall_clr+0xc0>)
    dbb4:	4798      	blx	r3
    dbb6:	4603      	mov	r3, r0
    dbb8:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    dbba:	7bbb      	ldrb	r3, [r7, #14]
    dbbc:	f083 0301 	eor.w	r3, r3, #1
    dbc0:	b2db      	uxtb	r3, r3
    dbc2:	2b00      	cmp	r3, #0
    dbc4:	d001      	beq.n	dbca <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    dbc6:	2300      	movs	r3, #0
    dbc8:	e040      	b.n	dc4c <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    dbca:	78f9      	ldrb	r1, [r7, #3]
    dbcc:	7bfb      	ldrb	r3, [r7, #15]
    dbce:	2200      	movs	r2, #0
    dbd0:	4618      	mov	r0, r3
    dbd2:	4b21      	ldr	r3, [pc, #132]	; (dc58 <_usb_d_dev_ep_stall_clr+0xc4>)
    dbd4:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    dbd6:	78fb      	ldrb	r3, [r7, #3]
    dbd8:	2220      	movs	r2, #32
    dbda:	409a      	lsls	r2, r3
    dbdc:	7bfb      	ldrb	r3, [r7, #15]
    dbde:	4611      	mov	r1, r2
    dbe0:	4618      	mov	r0, r3
    dbe2:	4b1e      	ldr	r3, [pc, #120]	; (dc5c <_usb_d_dev_ep_stall_clr+0xc8>)
    dbe4:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    dbe6:	78fa      	ldrb	r2, [r7, #3]
    dbe8:	7bfb      	ldrb	r3, [r7, #15]
    dbea:	4611      	mov	r1, r2
    dbec:	4618      	mov	r0, r3
    dbee:	4b1c      	ldr	r3, [pc, #112]	; (dc60 <_usb_d_dev_ep_stall_clr+0xcc>)
    dbf0:	4798      	blx	r3
    dbf2:	4603      	mov	r3, r0
    dbf4:	2b00      	cmp	r3, #0
    dbf6:	d00b      	beq.n	dc10 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    dbf8:	78fa      	ldrb	r2, [r7, #3]
    dbfa:	7bfb      	ldrb	r3, [r7, #15]
    dbfc:	4611      	mov	r1, r2
    dbfe:	4618      	mov	r0, r3
    dc00:	4b18      	ldr	r3, [pc, #96]	; (dc64 <_usb_d_dev_ep_stall_clr+0xd0>)
    dc02:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    dc04:	78f9      	ldrb	r1, [r7, #3]
    dc06:	7bfb      	ldrb	r3, [r7, #15]
    dc08:	2200      	movs	r2, #0
    dc0a:	4618      	mov	r0, r3
    dc0c:	4b16      	ldr	r3, [pc, #88]	; (dc68 <_usb_d_dev_ep_stall_clr+0xd4>)
    dc0e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    dc10:	687b      	ldr	r3, [r7, #4]
    dc12:	7cdb      	ldrb	r3, [r3, #19]
    dc14:	f003 0307 	and.w	r3, r3, #7
    dc18:	b2db      	uxtb	r3, r3
    dc1a:	2b01      	cmp	r3, #1
    dc1c:	d110      	bne.n	dc40 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    dc1e:	7bfb      	ldrb	r3, [r7, #15]
    dc20:	4619      	mov	r1, r3
    dc22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dc26:	4b11      	ldr	r3, [pc, #68]	; (dc6c <_usb_d_dev_ep_stall_clr+0xd8>)
    dc28:	4798      	blx	r3
    dc2a:	4603      	mov	r3, r0
    dc2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    dc30:	2b00      	cmp	r3, #0
    dc32:	d10a      	bne.n	dc4a <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    dc34:	687a      	ldr	r2, [r7, #4]
    dc36:	7cd3      	ldrb	r3, [r2, #19]
    dc38:	f36f 03c3 	bfc	r3, #3, #1
    dc3c:	74d3      	strb	r3, [r2, #19]
    dc3e:	e004      	b.n	dc4a <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    dc40:	687a      	ldr	r2, [r7, #4]
    dc42:	7cd3      	ldrb	r3, [r2, #19]
    dc44:	f36f 03c3 	bfc	r3, #3, #1
    dc48:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    dc4a:	2300      	movs	r3, #0
}
    dc4c:	4618      	mov	r0, r3
    dc4e:	3710      	adds	r7, #16
    dc50:	46bd      	mov	sp, r7
    dc52:	bd80      	pop	{r7, pc}
    dc54:	0000c205 	.word	0x0000c205
    dc58:	0000c1ad 	.word	0x0000c1ad
    dc5c:	0000c155 	.word	0x0000c155
    dc60:	0000c249 	.word	0x0000c249
    dc64:	0000c28d 	.word	0x0000c28d
    dc68:	0000c379 	.word	0x0000c379
    dc6c:	0000bc35 	.word	0x0000bc35

0000dc70 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    dc70:	b580      	push	{r7, lr}
    dc72:	b086      	sub	sp, #24
    dc74:	af00      	add	r7, sp, #0
    dc76:	4603      	mov	r3, r0
    dc78:	460a      	mov	r2, r1
    dc7a:	71fb      	strb	r3, [r7, #7]
    dc7c:	4613      	mov	r3, r2
    dc7e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    dc80:	79fb      	ldrb	r3, [r7, #7]
    dc82:	f003 030f 	and.w	r3, r3, #15
    dc86:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    dc88:	79fb      	ldrb	r3, [r7, #7]
    dc8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    dc8e:	2b00      	cmp	r3, #0
    dc90:	bf14      	ite	ne
    dc92:	2301      	movne	r3, #1
    dc94:	2300      	moveq	r3, #0
    dc96:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    dc98:	7cba      	ldrb	r2, [r7, #18]
    dc9a:	7cfb      	ldrb	r3, [r7, #19]
    dc9c:	4611      	mov	r1, r2
    dc9e:	4618      	mov	r0, r3
    dca0:	4b13      	ldr	r3, [pc, #76]	; (dcf0 <_usb_d_dev_ep_stall+0x80>)
    dca2:	4798      	blx	r3
    dca4:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    dca6:	7cfb      	ldrb	r3, [r7, #19]
    dca8:	2b04      	cmp	r3, #4
    dcaa:	d902      	bls.n	dcb2 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    dcac:	f06f 0311 	mvn.w	r3, #17
    dcb0:	e01a      	b.n	dce8 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    dcb2:	79bb      	ldrb	r3, [r7, #6]
    dcb4:	2b01      	cmp	r3, #1
    dcb6:	d106      	bne.n	dcc6 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    dcb8:	7cbb      	ldrb	r3, [r7, #18]
    dcba:	4619      	mov	r1, r3
    dcbc:	68f8      	ldr	r0, [r7, #12]
    dcbe:	4b0d      	ldr	r3, [pc, #52]	; (dcf4 <_usb_d_dev_ep_stall+0x84>)
    dcc0:	4798      	blx	r3
    dcc2:	6178      	str	r0, [r7, #20]
    dcc4:	e00f      	b.n	dce6 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    dcc6:	79bb      	ldrb	r3, [r7, #6]
    dcc8:	2b00      	cmp	r3, #0
    dcca:	d106      	bne.n	dcda <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    dccc:	7cbb      	ldrb	r3, [r7, #18]
    dcce:	4619      	mov	r1, r3
    dcd0:	68f8      	ldr	r0, [r7, #12]
    dcd2:	4b09      	ldr	r3, [pc, #36]	; (dcf8 <_usb_d_dev_ep_stall+0x88>)
    dcd4:	4798      	blx	r3
    dcd6:	6178      	str	r0, [r7, #20]
    dcd8:	e005      	b.n	dce6 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    dcda:	7cbb      	ldrb	r3, [r7, #18]
    dcdc:	4619      	mov	r1, r3
    dcde:	68f8      	ldr	r0, [r7, #12]
    dce0:	4b06      	ldr	r3, [pc, #24]	; (dcfc <_usb_d_dev_ep_stall+0x8c>)
    dce2:	4798      	blx	r3
    dce4:	6178      	str	r0, [r7, #20]
	}
	return rc;
    dce6:	697b      	ldr	r3, [r7, #20]
}
    dce8:	4618      	mov	r0, r3
    dcea:	3718      	adds	r7, #24
    dcec:	46bd      	mov	sp, r7
    dcee:	bd80      	pop	{r7, pc}
    dcf0:	0000c711 	.word	0x0000c711
    dcf4:	0000db45 	.word	0x0000db45
    dcf8:	0000db95 	.word	0x0000db95
    dcfc:	0000db15 	.word	0x0000db15

0000dd00 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    dd00:	b580      	push	{r7, lr}
    dd02:	b082      	sub	sp, #8
    dd04:	af00      	add	r7, sp, #0
    dd06:	6078      	str	r0, [r7, #4]
    dd08:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    dd0a:	687b      	ldr	r3, [r7, #4]
    dd0c:	7c9b      	ldrb	r3, [r3, #18]
    dd0e:	2bff      	cmp	r3, #255	; 0xff
    dd10:	d014      	beq.n	dd3c <_usb_d_dev_trans_done+0x3c>
    dd12:	687b      	ldr	r3, [r7, #4]
    dd14:	7cdb      	ldrb	r3, [r3, #19]
    dd16:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dd1a:	b2db      	uxtb	r3, r3
    dd1c:	2b00      	cmp	r3, #0
    dd1e:	d00d      	beq.n	dd3c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    dd20:	687a      	ldr	r2, [r7, #4]
    dd22:	7cd3      	ldrb	r3, [r2, #19]
    dd24:	f36f 1386 	bfc	r3, #6, #1
    dd28:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    dd2a:	4b06      	ldr	r3, [pc, #24]	; (dd44 <_usb_d_dev_trans_done+0x44>)
    dd2c:	691b      	ldr	r3, [r3, #16]
    dd2e:	687a      	ldr	r2, [r7, #4]
    dd30:	7c90      	ldrb	r0, [r2, #18]
    dd32:	687a      	ldr	r2, [r7, #4]
    dd34:	6892      	ldr	r2, [r2, #8]
    dd36:	6839      	ldr	r1, [r7, #0]
    dd38:	4798      	blx	r3
    dd3a:	e000      	b.n	dd3e <_usb_d_dev_trans_done+0x3e>
		return;
    dd3c:	bf00      	nop
}
    dd3e:	3708      	adds	r7, #8
    dd40:	46bd      	mov	sp, r7
    dd42:	bd80      	pop	{r7, pc}
    dd44:	200031ec 	.word	0x200031ec

0000dd48 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    dd48:	b580      	push	{r7, lr}
    dd4a:	b086      	sub	sp, #24
    dd4c:	af00      	add	r7, sp, #0
    dd4e:	60f8      	str	r0, [r7, #12]
    dd50:	460b      	mov	r3, r1
    dd52:	607a      	str	r2, [r7, #4]
    dd54:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    dd56:	68fb      	ldr	r3, [r7, #12]
    dd58:	7c9b      	ldrb	r3, [r3, #18]
    dd5a:	f003 030f 	and.w	r3, r3, #15
    dd5e:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    dd60:	4b1f      	ldr	r3, [pc, #124]	; (dde0 <_usb_d_dev_trans_stop+0x98>)
    dd62:	881b      	ldrh	r3, [r3, #0]
    dd64:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    dd66:	68fb      	ldr	r3, [r7, #12]
    dd68:	7c9b      	ldrb	r3, [r3, #18]
    dd6a:	2bff      	cmp	r3, #255	; 0xff
    dd6c:	d033      	beq.n	ddd6 <_usb_d_dev_trans_stop+0x8e>
    dd6e:	68fb      	ldr	r3, [r7, #12]
    dd70:	7cdb      	ldrb	r3, [r3, #19]
    dd72:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dd76:	b2db      	uxtb	r3, r3
    dd78:	2b00      	cmp	r3, #0
    dd7a:	d02c      	beq.n	ddd6 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    dd7c:	7afb      	ldrb	r3, [r7, #11]
    dd7e:	2b00      	cmp	r3, #0
    dd80:	d006      	beq.n	dd90 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    dd82:	7dfb      	ldrb	r3, [r7, #23]
    dd84:	2200      	movs	r2, #0
    dd86:	2101      	movs	r1, #1
    dd88:	4618      	mov	r0, r3
    dd8a:	4b16      	ldr	r3, [pc, #88]	; (dde4 <_usb_d_dev_trans_stop+0x9c>)
    dd8c:	4798      	blx	r3
    dd8e:	e005      	b.n	dd9c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    dd90:	7dfb      	ldrb	r3, [r7, #23]
    dd92:	2200      	movs	r2, #0
    dd94:	2100      	movs	r1, #0
    dd96:	4618      	mov	r0, r3
    dd98:	4b13      	ldr	r3, [pc, #76]	; (dde8 <_usb_d_dev_trans_stop+0xa0>)
    dd9a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    dd9c:	7afb      	ldrb	r3, [r7, #11]
    dd9e:	f107 0218 	add.w	r2, r7, #24
    dda2:	4413      	add	r3, r2
    dda4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    dda8:	461a      	mov	r2, r3
    ddaa:	7dfb      	ldrb	r3, [r7, #23]
    ddac:	4611      	mov	r1, r2
    ddae:	4618      	mov	r0, r3
    ddb0:	4b0e      	ldr	r3, [pc, #56]	; (ddec <_usb_d_dev_trans_stop+0xa4>)
    ddb2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    ddb4:	7afb      	ldrb	r3, [r7, #11]
    ddb6:	f107 0218 	add.w	r2, r7, #24
    ddba:	4413      	add	r3, r2
    ddbc:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    ddc0:	461a      	mov	r2, r3
    ddc2:	7dfb      	ldrb	r3, [r7, #23]
    ddc4:	4611      	mov	r1, r2
    ddc6:	4618      	mov	r0, r3
    ddc8:	4b09      	ldr	r3, [pc, #36]	; (ddf0 <_usb_d_dev_trans_stop+0xa8>)
    ddca:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    ddcc:	6879      	ldr	r1, [r7, #4]
    ddce:	68f8      	ldr	r0, [r7, #12]
    ddd0:	4b08      	ldr	r3, [pc, #32]	; (ddf4 <_usb_d_dev_trans_stop+0xac>)
    ddd2:	4798      	blx	r3
    ddd4:	e000      	b.n	ddd8 <_usb_d_dev_trans_stop+0x90>
		return;
    ddd6:	bf00      	nop
}
    ddd8:	3718      	adds	r7, #24
    ddda:	46bd      	mov	sp, r7
    dddc:	bd80      	pop	{r7, pc}
    ddde:	bf00      	nop
    dde0:	00018728 	.word	0x00018728
    dde4:	0000c5fd 	.word	0x0000c5fd
    dde8:	0000c655 	.word	0x0000c655
    ddec:	0000c105 	.word	0x0000c105
    ddf0:	0000c155 	.word	0x0000c155
    ddf4:	0000dd01 	.word	0x0000dd01

0000ddf8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    ddf8:	b580      	push	{r7, lr}
    ddfa:	b086      	sub	sp, #24
    ddfc:	af00      	add	r7, sp, #0
    ddfe:	4603      	mov	r3, r0
    de00:	6039      	str	r1, [r7, #0]
    de02:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    de04:	79fb      	ldrb	r3, [r7, #7]
    de06:	f003 030f 	and.w	r3, r3, #15
    de0a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    de0c:	7dfb      	ldrb	r3, [r7, #23]
    de0e:	015b      	lsls	r3, r3, #5
    de10:	4a1e      	ldr	r2, [pc, #120]	; (de8c <_usb_d_dev_ep_read_req+0x94>)
    de12:	4413      	add	r3, r2
    de14:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    de16:	693b      	ldr	r3, [r7, #16]
    de18:	681b      	ldr	r3, [r3, #0]
    de1a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    de1c:	693b      	ldr	r3, [r7, #16]
    de1e:	685b      	ldr	r3, [r3, #4]
    de20:	f3c3 030d 	ubfx	r3, r3, #0, #14
    de24:	b29b      	uxth	r3, r3
    de26:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    de28:	7dfb      	ldrb	r3, [r7, #23]
    de2a:	2b04      	cmp	r3, #4
    de2c:	d802      	bhi.n	de34 <_usb_d_dev_ep_read_req+0x3c>
    de2e:	683b      	ldr	r3, [r7, #0]
    de30:	2b00      	cmp	r3, #0
    de32:	d102      	bne.n	de3a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    de34:	f06f 0311 	mvn.w	r3, #17
    de38:	e023      	b.n	de82 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    de3a:	7dfb      	ldrb	r3, [r7, #23]
    de3c:	4618      	mov	r0, r3
    de3e:	4b14      	ldr	r3, [pc, #80]	; (de90 <_usb_d_dev_ep_read_req+0x98>)
    de40:	4798      	blx	r3
    de42:	4603      	mov	r3, r0
    de44:	f083 0301 	eor.w	r3, r3, #1
    de48:	b2db      	uxtb	r3, r3
    de4a:	2b00      	cmp	r3, #0
    de4c:	d002      	beq.n	de54 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    de4e:	f06f 0312 	mvn.w	r3, #18
    de52:	e016      	b.n	de82 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    de54:	7dfb      	ldrb	r3, [r7, #23]
    de56:	4618      	mov	r0, r3
    de58:	4b0e      	ldr	r3, [pc, #56]	; (de94 <_usb_d_dev_ep_read_req+0x9c>)
    de5a:	4798      	blx	r3
    de5c:	4603      	mov	r3, r0
    de5e:	f083 0301 	eor.w	r3, r3, #1
    de62:	b2db      	uxtb	r3, r3
    de64:	2b00      	cmp	r3, #0
    de66:	d001      	beq.n	de6c <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    de68:	2300      	movs	r3, #0
    de6a:	e00a      	b.n	de82 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    de6c:	68fb      	ldr	r3, [r7, #12]
    de6e:	2208      	movs	r2, #8
    de70:	4619      	mov	r1, r3
    de72:	6838      	ldr	r0, [r7, #0]
    de74:	4b08      	ldr	r3, [pc, #32]	; (de98 <_usb_d_dev_ep_read_req+0xa0>)
    de76:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    de78:	7dfb      	ldrb	r3, [r7, #23]
    de7a:	4618      	mov	r0, r3
    de7c:	4b07      	ldr	r3, [pc, #28]	; (de9c <_usb_d_dev_ep_read_req+0xa4>)
    de7e:	4798      	blx	r3

	return bytes;
    de80:	897b      	ldrh	r3, [r7, #10]
}
    de82:	4618      	mov	r0, r3
    de84:	3718      	adds	r7, #24
    de86:	46bd      	mov	sp, r7
    de88:	bd80      	pop	{r7, pc}
    de8a:	bf00      	nop
    de8c:	200032b4 	.word	0x200032b4
    de90:	0000c17d 	.word	0x0000c17d
    de94:	0000c329 	.word	0x0000c329
    de98:	000177d9 	.word	0x000177d9
    de9c:	0000c359 	.word	0x0000c359

0000dea0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    dea0:	b580      	push	{r7, lr}
    dea2:	b086      	sub	sp, #24
    dea4:	af00      	add	r7, sp, #0
    dea6:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    dea8:	687b      	ldr	r3, [r7, #4]
    deaa:	7a1b      	ldrb	r3, [r3, #8]
    deac:	f003 030f 	and.w	r3, r3, #15
    deb0:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    deb2:	687b      	ldr	r3, [r7, #4]
    deb4:	7a1b      	ldrb	r3, [r3, #8]
    deb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    deba:	2b00      	cmp	r3, #0
    debc:	bf14      	ite	ne
    debe:	2301      	movne	r3, #1
    dec0:	2300      	moveq	r3, #0
    dec2:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    dec4:	7d7a      	ldrb	r2, [r7, #21]
    dec6:	7dbb      	ldrb	r3, [r7, #22]
    dec8:	4611      	mov	r1, r2
    deca:	4618      	mov	r0, r3
    decc:	4b5f      	ldr	r3, [pc, #380]	; (e04c <_usb_d_dev_ep_trans+0x1ac>)
    dece:	4798      	blx	r3
    ded0:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ded2:	693b      	ldr	r3, [r7, #16]
    ded4:	8a1b      	ldrh	r3, [r3, #16]
    ded6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    deda:	4293      	cmp	r3, r2
    dedc:	d004      	beq.n	dee8 <_usb_d_dev_ep_trans+0x48>
    dede:	693b      	ldr	r3, [r7, #16]
    dee0:	8a1b      	ldrh	r3, [r3, #16]
    dee2:	3b01      	subs	r3, #1
    dee4:	b29b      	uxth	r3, r3
    dee6:	e001      	b.n	deec <_usb_d_dev_ep_trans+0x4c>
    dee8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    deec:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    deee:	687b      	ldr	r3, [r7, #4]
    def0:	685a      	ldr	r2, [r3, #4]
    def2:	89fb      	ldrh	r3, [r7, #14]
    def4:	4013      	ands	r3, r2
    def6:	2b00      	cmp	r3, #0
    def8:	bf14      	ite	ne
    defa:	2301      	movne	r3, #1
    defc:	2300      	moveq	r3, #0
    defe:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    df00:	2300      	movs	r3, #0
    df02:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    df04:	7dbb      	ldrb	r3, [r7, #22]
    df06:	2b04      	cmp	r3, #4
    df08:	d902      	bls.n	df10 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    df0a:	f06f 0311 	mvn.w	r3, #17
    df0e:	e098      	b.n	e042 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    df10:	687b      	ldr	r3, [r7, #4]
    df12:	681b      	ldr	r3, [r3, #0]
    df14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    df18:	d31a      	bcc.n	df50 <_usb_d_dev_ep_trans+0xb0>
    df1a:	687b      	ldr	r3, [r7, #4]
    df1c:	681b      	ldr	r3, [r3, #0]
    df1e:	461a      	mov	r2, r3
    df20:	687b      	ldr	r3, [r7, #4]
    df22:	685b      	ldr	r3, [r3, #4]
    df24:	4413      	add	r3, r2
    df26:	4a4a      	ldr	r2, [pc, #296]	; (e050 <_usb_d_dev_ep_trans+0x1b0>)
    df28:	4293      	cmp	r3, r2
    df2a:	d811      	bhi.n	df50 <_usb_d_dev_ep_trans+0xb0>
    df2c:	687b      	ldr	r3, [r7, #4]
    df2e:	681b      	ldr	r3, [r3, #0]
    df30:	f003 0303 	and.w	r3, r3, #3
    df34:	2b00      	cmp	r3, #0
    df36:	d10b      	bne.n	df50 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    df38:	7d7b      	ldrb	r3, [r7, #21]
    df3a:	f083 0301 	eor.w	r3, r3, #1
    df3e:	b2db      	uxtb	r3, r3
    df40:	2b00      	cmp	r3, #0
    df42:	d00e      	beq.n	df62 <_usb_d_dev_ep_trans+0xc2>
    df44:	687b      	ldr	r3, [r7, #4]
    df46:	685b      	ldr	r3, [r3, #4]
    df48:	693a      	ldr	r2, [r7, #16]
    df4a:	8a12      	ldrh	r2, [r2, #16]
    df4c:	4293      	cmp	r3, r2
    df4e:	d208      	bcs.n	df62 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    df50:	693b      	ldr	r3, [r7, #16]
    df52:	68db      	ldr	r3, [r3, #12]
    df54:	2b00      	cmp	r3, #0
    df56:	d102      	bne.n	df5e <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    df58:	f06f 0312 	mvn.w	r3, #18
    df5c:	e071      	b.n	e042 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    df5e:	2301      	movs	r3, #1
    df60:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    df62:	7d7b      	ldrb	r3, [r7, #21]
    df64:	f083 0301 	eor.w	r3, r3, #1
    df68:	b2db      	uxtb	r3, r3
    df6a:	2b00      	cmp	r3, #0
    df6c:	d009      	beq.n	df82 <_usb_d_dev_ep_trans+0xe2>
    df6e:	7b7b      	ldrb	r3, [r7, #13]
    df70:	2b00      	cmp	r3, #0
    df72:	d006      	beq.n	df82 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    df74:	693b      	ldr	r3, [r7, #16]
    df76:	68db      	ldr	r3, [r3, #12]
    df78:	2b00      	cmp	r3, #0
    df7a:	d102      	bne.n	df82 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    df7c:	f06f 0311 	mvn.w	r3, #17
    df80:	e05f      	b.n	e042 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    df82:	693b      	ldr	r3, [r7, #16]
    df84:	7cdb      	ldrb	r3, [r3, #19]
    df86:	f003 0308 	and.w	r3, r3, #8
    df8a:	b2db      	uxtb	r3, r3
    df8c:	2b00      	cmp	r3, #0
    df8e:	d001      	beq.n	df94 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    df90:	2302      	movs	r3, #2
    df92:	e056      	b.n	e042 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    df94:	f107 0308 	add.w	r3, r7, #8
    df98:	4618      	mov	r0, r3
    df9a:	4b2e      	ldr	r3, [pc, #184]	; (e054 <_usb_d_dev_ep_trans+0x1b4>)
    df9c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    df9e:	693b      	ldr	r3, [r7, #16]
    dfa0:	7cdb      	ldrb	r3, [r3, #19]
    dfa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dfa6:	b2db      	uxtb	r3, r3
    dfa8:	2b00      	cmp	r3, #0
    dfaa:	d006      	beq.n	dfba <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    dfac:	f107 0308 	add.w	r3, r7, #8
    dfb0:	4618      	mov	r0, r3
    dfb2:	4b29      	ldr	r3, [pc, #164]	; (e058 <_usb_d_dev_ep_trans+0x1b8>)
    dfb4:	4798      	blx	r3
		return USB_BUSY;
    dfb6:	2301      	movs	r3, #1
    dfb8:	e043      	b.n	e042 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    dfba:	693a      	ldr	r2, [r7, #16]
    dfbc:	7cd3      	ldrb	r3, [r2, #19]
    dfbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dfc2:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    dfc4:	f107 0308 	add.w	r3, r7, #8
    dfc8:	4618      	mov	r0, r3
    dfca:	4b23      	ldr	r3, [pc, #140]	; (e058 <_usb_d_dev_ep_trans+0x1b8>)
    dfcc:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    dfce:	687b      	ldr	r3, [r7, #4]
    dfd0:	681a      	ldr	r2, [r3, #0]
    dfd2:	693b      	ldr	r3, [r7, #16]
    dfd4:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    dfd6:	687b      	ldr	r3, [r7, #4]
    dfd8:	685a      	ldr	r2, [r3, #4]
    dfda:	693b      	ldr	r3, [r7, #16]
    dfdc:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    dfde:	693b      	ldr	r3, [r7, #16]
    dfe0:	2200      	movs	r2, #0
    dfe2:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    dfe4:	693a      	ldr	r2, [r7, #16]
    dfe6:	7cd3      	ldrb	r3, [r2, #19]
    dfe8:	7d79      	ldrb	r1, [r7, #21]
    dfea:	f361 13c7 	bfi	r3, r1, #7, #1
    dfee:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    dff0:	693a      	ldr	r2, [r7, #16]
    dff2:	7cd3      	ldrb	r3, [r2, #19]
    dff4:	7df9      	ldrb	r1, [r7, #23]
    dff6:	f361 1345 	bfi	r3, r1, #5, #1
    dffa:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    dffc:	687b      	ldr	r3, [r7, #4]
    dffe:	7a5b      	ldrb	r3, [r3, #9]
    e000:	2b00      	cmp	r3, #0
    e002:	d007      	beq.n	e014 <_usb_d_dev_ep_trans+0x174>
    e004:	7b7b      	ldrb	r3, [r7, #13]
    e006:	f083 0301 	eor.w	r3, r3, #1
    e00a:	b2db      	uxtb	r3, r3
    e00c:	2b00      	cmp	r3, #0
    e00e:	d001      	beq.n	e014 <_usb_d_dev_ep_trans+0x174>
    e010:	2301      	movs	r3, #1
    e012:	e000      	b.n	e016 <_usb_d_dev_ep_trans+0x176>
    e014:	2300      	movs	r3, #0
    e016:	b2db      	uxtb	r3, r3
    e018:	f003 0301 	and.w	r3, r3, #1
    e01c:	b2d9      	uxtb	r1, r3
    e01e:	693a      	ldr	r2, [r7, #16]
    e020:	7cd3      	ldrb	r3, [r2, #19]
    e022:	f361 1304 	bfi	r3, r1, #4, #1
    e026:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    e028:	7d7b      	ldrb	r3, [r7, #21]
    e02a:	2b00      	cmp	r3, #0
    e02c:	d004      	beq.n	e038 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    e02e:	2100      	movs	r1, #0
    e030:	6938      	ldr	r0, [r7, #16]
    e032:	4b0a      	ldr	r3, [pc, #40]	; (e05c <_usb_d_dev_ep_trans+0x1bc>)
    e034:	4798      	blx	r3
    e036:	e003      	b.n	e040 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    e038:	2100      	movs	r1, #0
    e03a:	6938      	ldr	r0, [r7, #16]
    e03c:	4b08      	ldr	r3, [pc, #32]	; (e060 <_usb_d_dev_ep_trans+0x1c0>)
    e03e:	4798      	blx	r3
	}

	return ERR_NONE;
    e040:	2300      	movs	r3, #0
}
    e042:	4618      	mov	r0, r3
    e044:	3718      	adds	r7, #24
    e046:	46bd      	mov	sp, r7
    e048:	bd80      	pop	{r7, pc}
    e04a:	bf00      	nop
    e04c:	0000c711 	.word	0x0000c711
    e050:	20041fff 	.word	0x20041fff
    e054:	0000e86d 	.word	0x0000e86d
    e058:	0000e893 	.word	0x0000e893
    e05c:	0000c9d9 	.word	0x0000c9d9
    e060:	0000cbf1 	.word	0x0000cbf1

0000e064 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    e064:	b580      	push	{r7, lr}
    e066:	b084      	sub	sp, #16
    e068:	af00      	add	r7, sp, #0
    e06a:	4603      	mov	r3, r0
    e06c:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    e06e:	79fb      	ldrb	r3, [r7, #7]
    e070:	f003 030f 	and.w	r3, r3, #15
    e074:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    e076:	79fb      	ldrb	r3, [r7, #7]
    e078:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e07c:	2b00      	cmp	r3, #0
    e07e:	bf14      	ite	ne
    e080:	2301      	movne	r3, #1
    e082:	2300      	moveq	r3, #0
    e084:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    e086:	7bba      	ldrb	r2, [r7, #14]
    e088:	7bfb      	ldrb	r3, [r7, #15]
    e08a:	4611      	mov	r1, r2
    e08c:	4618      	mov	r0, r3
    e08e:	4b08      	ldr	r3, [pc, #32]	; (e0b0 <_usb_d_dev_ep_abort+0x4c>)
    e090:	4798      	blx	r3
    e092:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    e094:	7bfb      	ldrb	r3, [r7, #15]
    e096:	2b04      	cmp	r3, #4
    e098:	d806      	bhi.n	e0a8 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    e09a:	7bbb      	ldrb	r3, [r7, #14]
    e09c:	2202      	movs	r2, #2
    e09e:	4619      	mov	r1, r3
    e0a0:	68b8      	ldr	r0, [r7, #8]
    e0a2:	4b04      	ldr	r3, [pc, #16]	; (e0b4 <_usb_d_dev_ep_abort+0x50>)
    e0a4:	4798      	blx	r3
    e0a6:	e000      	b.n	e0aa <_usb_d_dev_ep_abort+0x46>
		return;
    e0a8:	bf00      	nop
}
    e0aa:	3710      	adds	r7, #16
    e0ac:	46bd      	mov	sp, r7
    e0ae:	bd80      	pop	{r7, pc}
    e0b0:	0000c711 	.word	0x0000c711
    e0b4:	0000dd49 	.word	0x0000dd49

0000e0b8 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    e0b8:	b480      	push	{r7}
    e0ba:	b085      	sub	sp, #20
    e0bc:	af00      	add	r7, sp, #0
    e0be:	4603      	mov	r3, r0
    e0c0:	6039      	str	r1, [r7, #0]
    e0c2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    e0c4:	683b      	ldr	r3, [r7, #0]
    e0c6:	2b00      	cmp	r3, #0
    e0c8:	d001      	beq.n	e0ce <_usb_d_dev_register_callback+0x16>
    e0ca:	683b      	ldr	r3, [r7, #0]
    e0cc:	e000      	b.n	e0d0 <_usb_d_dev_register_callback+0x18>
    e0ce:	4b0a      	ldr	r3, [pc, #40]	; (e0f8 <_usb_d_dev_register_callback+0x40>)
    e0d0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    e0d2:	79fb      	ldrb	r3, [r7, #7]
    e0d4:	2b01      	cmp	r3, #1
    e0d6:	d103      	bne.n	e0e0 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    e0d8:	4a08      	ldr	r2, [pc, #32]	; (e0fc <_usb_d_dev_register_callback+0x44>)
    e0da:	68fb      	ldr	r3, [r7, #12]
    e0dc:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    e0de:	e005      	b.n	e0ec <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    e0e0:	79fb      	ldrb	r3, [r7, #7]
    e0e2:	2b00      	cmp	r3, #0
    e0e4:	d102      	bne.n	e0ec <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    e0e6:	4a05      	ldr	r2, [pc, #20]	; (e0fc <_usb_d_dev_register_callback+0x44>)
    e0e8:	68fb      	ldr	r3, [r7, #12]
    e0ea:	6013      	str	r3, [r2, #0]
}
    e0ec:	bf00      	nop
    e0ee:	3714      	adds	r7, #20
    e0f0:	46bd      	mov	sp, r7
    e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0f6:	4770      	bx	lr
    e0f8:	0000bf99 	.word	0x0000bf99
    e0fc:	200031ec 	.word	0x200031ec

0000e100 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    e100:	b480      	push	{r7}
    e102:	b085      	sub	sp, #20
    e104:	af00      	add	r7, sp, #0
    e106:	4603      	mov	r3, r0
    e108:	6039      	str	r1, [r7, #0]
    e10a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    e10c:	683b      	ldr	r3, [r7, #0]
    e10e:	2b00      	cmp	r3, #0
    e110:	d001      	beq.n	e116 <_usb_d_dev_register_ep_callback+0x16>
    e112:	683b      	ldr	r3, [r7, #0]
    e114:	e000      	b.n	e118 <_usb_d_dev_register_ep_callback+0x18>
    e116:	4b0e      	ldr	r3, [pc, #56]	; (e150 <_usb_d_dev_register_ep_callback+0x50>)
    e118:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    e11a:	79fb      	ldrb	r3, [r7, #7]
    e11c:	2b00      	cmp	r3, #0
    e11e:	d103      	bne.n	e128 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    e120:	4a0c      	ldr	r2, [pc, #48]	; (e154 <_usb_d_dev_register_ep_callback+0x54>)
    e122:	68fb      	ldr	r3, [r7, #12]
    e124:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    e126:	e00c      	b.n	e142 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    e128:	79fb      	ldrb	r3, [r7, #7]
    e12a:	2b01      	cmp	r3, #1
    e12c:	d103      	bne.n	e136 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    e12e:	4a09      	ldr	r2, [pc, #36]	; (e154 <_usb_d_dev_register_ep_callback+0x54>)
    e130:	68fb      	ldr	r3, [r7, #12]
    e132:	60d3      	str	r3, [r2, #12]
}
    e134:	e005      	b.n	e142 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    e136:	79fb      	ldrb	r3, [r7, #7]
    e138:	2b02      	cmp	r3, #2
    e13a:	d102      	bne.n	e142 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    e13c:	4a05      	ldr	r2, [pc, #20]	; (e154 <_usb_d_dev_register_ep_callback+0x54>)
    e13e:	68fb      	ldr	r3, [r7, #12]
    e140:	6113      	str	r3, [r2, #16]
}
    e142:	bf00      	nop
    e144:	3714      	adds	r7, #20
    e146:	46bd      	mov	sp, r7
    e148:	f85d 7b04 	ldr.w	r7, [sp], #4
    e14c:	4770      	bx	lr
    e14e:	bf00      	nop
    e150:	0000bf99 	.word	0x0000bf99
    e154:	200031ec 	.word	0x200031ec

0000e158 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    e158:	b580      	push	{r7, lr}
    e15a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    e15c:	4b01      	ldr	r3, [pc, #4]	; (e164 <USB_0_Handler+0xc>)
    e15e:	4798      	blx	r3
}
    e160:	bf00      	nop
    e162:	bd80      	pop	{r7, pc}
    e164:	0000d3c9 	.word	0x0000d3c9

0000e168 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    e168:	b580      	push	{r7, lr}
    e16a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    e16c:	4b01      	ldr	r3, [pc, #4]	; (e174 <USB_1_Handler+0xc>)
    e16e:	4798      	blx	r3
}
    e170:	bf00      	nop
    e172:	bd80      	pop	{r7, pc}
    e174:	0000d3c9 	.word	0x0000d3c9

0000e178 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    e178:	b580      	push	{r7, lr}
    e17a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    e17c:	4b01      	ldr	r3, [pc, #4]	; (e184 <USB_2_Handler+0xc>)
    e17e:	4798      	blx	r3
}
    e180:	bf00      	nop
    e182:	bd80      	pop	{r7, pc}
    e184:	0000d3c9 	.word	0x0000d3c9

0000e188 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    e188:	b580      	push	{r7, lr}
    e18a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    e18c:	4b01      	ldr	r3, [pc, #4]	; (e194 <USB_3_Handler+0xc>)
    e18e:	4798      	blx	r3
}
    e190:	bf00      	nop
    e192:	bd80      	pop	{r7, pc}
    e194:	0000d3c9 	.word	0x0000d3c9

0000e198 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    e198:	b480      	push	{r7}
    e19a:	b083      	sub	sp, #12
    e19c:	af00      	add	r7, sp, #0
    e19e:	6078      	str	r0, [r7, #4]
    e1a0:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    e1a2:	bf00      	nop
    e1a4:	687b      	ldr	r3, [r7, #4]
    e1a6:	689a      	ldr	r2, [r3, #8]
    e1a8:	683b      	ldr	r3, [r7, #0]
    e1aa:	4013      	ands	r3, r2
    e1ac:	2b00      	cmp	r3, #0
    e1ae:	d1f9      	bne.n	e1a4 <hri_wdt_wait_for_sync+0xc>
	};
}
    e1b0:	bf00      	nop
    e1b2:	370c      	adds	r7, #12
    e1b4:	46bd      	mov	sp, r7
    e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1ba:	4770      	bx	lr

0000e1bc <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    e1bc:	b580      	push	{r7, lr}
    e1be:	b084      	sub	sp, #16
    e1c0:	af00      	add	r7, sp, #0
    e1c2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    e1c4:	210e      	movs	r1, #14
    e1c6:	6878      	ldr	r0, [r7, #4]
    e1c8:	4b0a      	ldr	r3, [pc, #40]	; (e1f4 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    e1ca:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    e1cc:	687b      	ldr	r3, [r7, #4]
    e1ce:	781b      	ldrb	r3, [r3, #0]
    e1d0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    e1d2:	7bfb      	ldrb	r3, [r7, #15]
    e1d4:	085b      	lsrs	r3, r3, #1
    e1d6:	b2db      	uxtb	r3, r3
    e1d8:	f003 0301 	and.w	r3, r3, #1
    e1dc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    e1de:	7bfb      	ldrb	r3, [r7, #15]
    e1e0:	2b00      	cmp	r3, #0
    e1e2:	bf14      	ite	ne
    e1e4:	2301      	movne	r3, #1
    e1e6:	2300      	moveq	r3, #0
    e1e8:	b2db      	uxtb	r3, r3
}
    e1ea:	4618      	mov	r0, r3
    e1ec:	3710      	adds	r7, #16
    e1ee:	46bd      	mov	sp, r7
    e1f0:	bd80      	pop	{r7, pc}
    e1f2:	bf00      	nop
    e1f4:	0000e199 	.word	0x0000e199

0000e1f8 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    e1f8:	b580      	push	{r7, lr}
    e1fa:	b082      	sub	sp, #8
    e1fc:	af00      	add	r7, sp, #0
    e1fe:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    e200:	687b      	ldr	r3, [r7, #4]
    e202:	781b      	ldrb	r3, [r3, #0]
    e204:	b2db      	uxtb	r3, r3
    e206:	f023 0304 	bic.w	r3, r3, #4
    e20a:	b2da      	uxtb	r2, r3
    e20c:	687b      	ldr	r3, [r7, #4]
    e20e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    e210:	210e      	movs	r1, #14
    e212:	6878      	ldr	r0, [r7, #4]
    e214:	4b02      	ldr	r3, [pc, #8]	; (e220 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    e216:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    e218:	bf00      	nop
    e21a:	3708      	adds	r7, #8
    e21c:	46bd      	mov	sp, r7
    e21e:	bd80      	pop	{r7, pc}
    e220:	0000e199 	.word	0x0000e199

0000e224 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    e224:	b580      	push	{r7, lr}
    e226:	b084      	sub	sp, #16
    e228:	af00      	add	r7, sp, #0
    e22a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    e22c:	210e      	movs	r1, #14
    e22e:	6878      	ldr	r0, [r7, #4]
    e230:	4b08      	ldr	r3, [pc, #32]	; (e254 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    e232:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    e234:	687b      	ldr	r3, [r7, #4]
    e236:	781b      	ldrb	r3, [r3, #0]
    e238:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    e23a:	7bfb      	ldrb	r3, [r7, #15]
    e23c:	09db      	lsrs	r3, r3, #7
    e23e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    e240:	7bfb      	ldrb	r3, [r7, #15]
    e242:	2b00      	cmp	r3, #0
    e244:	bf14      	ite	ne
    e246:	2301      	movne	r3, #1
    e248:	2300      	moveq	r3, #0
    e24a:	b2db      	uxtb	r3, r3
}
    e24c:	4618      	mov	r0, r3
    e24e:	3710      	adds	r7, #16
    e250:	46bd      	mov	sp, r7
    e252:	bd80      	pop	{r7, pc}
    e254:	0000e199 	.word	0x0000e199

0000e258 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    e258:	b480      	push	{r7}
    e25a:	b085      	sub	sp, #20
    e25c:	af00      	add	r7, sp, #0
    e25e:	6078      	str	r0, [r7, #4]
    e260:	460b      	mov	r3, r1
    e262:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    e264:	687b      	ldr	r3, [r7, #4]
    e266:	785b      	ldrb	r3, [r3, #1]
    e268:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    e26a:	7bfb      	ldrb	r3, [r7, #15]
    e26c:	f023 030f 	bic.w	r3, r3, #15
    e270:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    e272:	78fb      	ldrb	r3, [r7, #3]
    e274:	f003 030f 	and.w	r3, r3, #15
    e278:	b2da      	uxtb	r2, r3
    e27a:	7bfb      	ldrb	r3, [r7, #15]
    e27c:	4313      	orrs	r3, r2
    e27e:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    e280:	687b      	ldr	r3, [r7, #4]
    e282:	7bfa      	ldrb	r2, [r7, #15]
    e284:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    e286:	bf00      	nop
    e288:	3714      	adds	r7, #20
    e28a:	46bd      	mov	sp, r7
    e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e290:	4770      	bx	lr
	...

0000e294 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    e294:	b580      	push	{r7, lr}
    e296:	b082      	sub	sp, #8
    e298:	af00      	add	r7, sp, #0
    e29a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    e29c:	687b      	ldr	r3, [r7, #4]
    e29e:	2b00      	cmp	r3, #0
    e2a0:	d005      	beq.n	e2ae <_wdt_init+0x1a>
    e2a2:	687b      	ldr	r3, [r7, #4]
    e2a4:	681b      	ldr	r3, [r3, #0]
    e2a6:	2b00      	cmp	r3, #0
    e2a8:	d001      	beq.n	e2ae <_wdt_init+0x1a>
    e2aa:	2301      	movs	r3, #1
    e2ac:	e000      	b.n	e2b0 <_wdt_init+0x1c>
    e2ae:	2300      	movs	r3, #0
    e2b0:	f003 0301 	and.w	r3, r3, #1
    e2b4:	b2db      	uxtb	r3, r3
    e2b6:	2250      	movs	r2, #80	; 0x50
    e2b8:	4913      	ldr	r1, [pc, #76]	; (e308 <_wdt_init+0x74>)
    e2ba:	4618      	mov	r0, r3
    e2bc:	4b13      	ldr	r3, [pc, #76]	; (e30c <_wdt_init+0x78>)
    e2be:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    e2c0:	687b      	ldr	r3, [r7, #4]
    e2c2:	681b      	ldr	r3, [r3, #0]
    e2c4:	4618      	mov	r0, r3
    e2c6:	4b12      	ldr	r3, [pc, #72]	; (e310 <_wdt_init+0x7c>)
    e2c8:	4798      	blx	r3
    e2ca:	4603      	mov	r3, r0
    e2cc:	2b00      	cmp	r3, #0
    e2ce:	d107      	bne.n	e2e0 <_wdt_init+0x4c>
    e2d0:	687b      	ldr	r3, [r7, #4]
    e2d2:	681b      	ldr	r3, [r3, #0]
    e2d4:	4618      	mov	r0, r3
    e2d6:	4b0f      	ldr	r3, [pc, #60]	; (e314 <_wdt_init+0x80>)
    e2d8:	4798      	blx	r3
    e2da:	4603      	mov	r3, r0
    e2dc:	2b00      	cmp	r3, #0
    e2de:	d002      	beq.n	e2e6 <_wdt_init+0x52>
		return ERR_DENIED;
    e2e0:	f06f 0310 	mvn.w	r3, #16
    e2e4:	e00b      	b.n	e2fe <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    e2e6:	687b      	ldr	r3, [r7, #4]
    e2e8:	681b      	ldr	r3, [r3, #0]
    e2ea:	4618      	mov	r0, r3
    e2ec:	4b0a      	ldr	r3, [pc, #40]	; (e318 <_wdt_init+0x84>)
    e2ee:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    e2f0:	687b      	ldr	r3, [r7, #4]
    e2f2:	681b      	ldr	r3, [r3, #0]
    e2f4:	210b      	movs	r1, #11
    e2f6:	4618      	mov	r0, r3
    e2f8:	4b08      	ldr	r3, [pc, #32]	; (e31c <_wdt_init+0x88>)
    e2fa:	4798      	blx	r3
	}

	return ERR_NONE;
    e2fc:	2300      	movs	r3, #0
}
    e2fe:	4618      	mov	r0, r3
    e300:	3708      	adds	r7, #8
    e302:	46bd      	mov	sp, r7
    e304:	bd80      	pop	{r7, pc}
    e306:	bf00      	nop
    e308:	0001872c 	.word	0x0001872c
    e30c:	000065d9 	.word	0x000065d9
    e310:	0000e225 	.word	0x0000e225
    e314:	0000e1bd 	.word	0x0000e1bd
    e318:	0000e1f9 	.word	0x0000e1f9
    e31c:	0000e259 	.word	0x0000e259

0000e320 <hri_port_set_DIR_reg>:
{
    e320:	b480      	push	{r7}
    e322:	b085      	sub	sp, #20
    e324:	af00      	add	r7, sp, #0
    e326:	60f8      	str	r0, [r7, #12]
    e328:	460b      	mov	r3, r1
    e32a:	607a      	str	r2, [r7, #4]
    e32c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    e32e:	7afb      	ldrb	r3, [r7, #11]
    e330:	68fa      	ldr	r2, [r7, #12]
    e332:	01db      	lsls	r3, r3, #7
    e334:	4413      	add	r3, r2
    e336:	3308      	adds	r3, #8
    e338:	687a      	ldr	r2, [r7, #4]
    e33a:	601a      	str	r2, [r3, #0]
}
    e33c:	bf00      	nop
    e33e:	3714      	adds	r7, #20
    e340:	46bd      	mov	sp, r7
    e342:	f85d 7b04 	ldr.w	r7, [sp], #4
    e346:	4770      	bx	lr

0000e348 <hri_port_clear_DIR_reg>:
{
    e348:	b480      	push	{r7}
    e34a:	b085      	sub	sp, #20
    e34c:	af00      	add	r7, sp, #0
    e34e:	60f8      	str	r0, [r7, #12]
    e350:	460b      	mov	r3, r1
    e352:	607a      	str	r2, [r7, #4]
    e354:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    e356:	7afb      	ldrb	r3, [r7, #11]
    e358:	68fa      	ldr	r2, [r7, #12]
    e35a:	01db      	lsls	r3, r3, #7
    e35c:	4413      	add	r3, r2
    e35e:	3304      	adds	r3, #4
    e360:	687a      	ldr	r2, [r7, #4]
    e362:	601a      	str	r2, [r3, #0]
}
    e364:	bf00      	nop
    e366:	3714      	adds	r7, #20
    e368:	46bd      	mov	sp, r7
    e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e36e:	4770      	bx	lr

0000e370 <hri_port_set_OUT_reg>:
{
    e370:	b480      	push	{r7}
    e372:	b085      	sub	sp, #20
    e374:	af00      	add	r7, sp, #0
    e376:	60f8      	str	r0, [r7, #12]
    e378:	460b      	mov	r3, r1
    e37a:	607a      	str	r2, [r7, #4]
    e37c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    e37e:	7afb      	ldrb	r3, [r7, #11]
    e380:	68fa      	ldr	r2, [r7, #12]
    e382:	01db      	lsls	r3, r3, #7
    e384:	4413      	add	r3, r2
    e386:	3318      	adds	r3, #24
    e388:	687a      	ldr	r2, [r7, #4]
    e38a:	601a      	str	r2, [r3, #0]
}
    e38c:	bf00      	nop
    e38e:	3714      	adds	r7, #20
    e390:	46bd      	mov	sp, r7
    e392:	f85d 7b04 	ldr.w	r7, [sp], #4
    e396:	4770      	bx	lr

0000e398 <hri_port_clear_OUT_reg>:
{
    e398:	b480      	push	{r7}
    e39a:	b085      	sub	sp, #20
    e39c:	af00      	add	r7, sp, #0
    e39e:	60f8      	str	r0, [r7, #12]
    e3a0:	460b      	mov	r3, r1
    e3a2:	607a      	str	r2, [r7, #4]
    e3a4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    e3a6:	7afb      	ldrb	r3, [r7, #11]
    e3a8:	68fa      	ldr	r2, [r7, #12]
    e3aa:	01db      	lsls	r3, r3, #7
    e3ac:	4413      	add	r3, r2
    e3ae:	3314      	adds	r3, #20
    e3b0:	687a      	ldr	r2, [r7, #4]
    e3b2:	601a      	str	r2, [r3, #0]
}
    e3b4:	bf00      	nop
    e3b6:	3714      	adds	r7, #20
    e3b8:	46bd      	mov	sp, r7
    e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    e3be:	4770      	bx	lr

0000e3c0 <hri_port_write_PMUX_PMUXE_bf>:
{
    e3c0:	b480      	push	{r7}
    e3c2:	b085      	sub	sp, #20
    e3c4:	af00      	add	r7, sp, #0
    e3c6:	6078      	str	r0, [r7, #4]
    e3c8:	4608      	mov	r0, r1
    e3ca:	4611      	mov	r1, r2
    e3cc:	461a      	mov	r2, r3
    e3ce:	4603      	mov	r3, r0
    e3d0:	70fb      	strb	r3, [r7, #3]
    e3d2:	460b      	mov	r3, r1
    e3d4:	70bb      	strb	r3, [r7, #2]
    e3d6:	4613      	mov	r3, r2
    e3d8:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    e3da:	78fa      	ldrb	r2, [r7, #3]
    e3dc:	78bb      	ldrb	r3, [r7, #2]
    e3de:	6879      	ldr	r1, [r7, #4]
    e3e0:	01d2      	lsls	r2, r2, #7
    e3e2:	440a      	add	r2, r1
    e3e4:	4413      	add	r3, r2
    e3e6:	3330      	adds	r3, #48	; 0x30
    e3e8:	781b      	ldrb	r3, [r3, #0]
    e3ea:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    e3ec:	7bfb      	ldrb	r3, [r7, #15]
    e3ee:	f023 030f 	bic.w	r3, r3, #15
    e3f2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    e3f4:	787b      	ldrb	r3, [r7, #1]
    e3f6:	f003 030f 	and.w	r3, r3, #15
    e3fa:	b2da      	uxtb	r2, r3
    e3fc:	7bfb      	ldrb	r3, [r7, #15]
    e3fe:	4313      	orrs	r3, r2
    e400:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    e402:	78fa      	ldrb	r2, [r7, #3]
    e404:	78bb      	ldrb	r3, [r7, #2]
    e406:	6879      	ldr	r1, [r7, #4]
    e408:	01d2      	lsls	r2, r2, #7
    e40a:	440a      	add	r2, r1
    e40c:	4413      	add	r3, r2
    e40e:	3330      	adds	r3, #48	; 0x30
    e410:	7bfa      	ldrb	r2, [r7, #15]
    e412:	701a      	strb	r2, [r3, #0]
}
    e414:	bf00      	nop
    e416:	3714      	adds	r7, #20
    e418:	46bd      	mov	sp, r7
    e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e41e:	4770      	bx	lr

0000e420 <hri_port_write_PMUX_PMUXO_bf>:
{
    e420:	b480      	push	{r7}
    e422:	b085      	sub	sp, #20
    e424:	af00      	add	r7, sp, #0
    e426:	6078      	str	r0, [r7, #4]
    e428:	4608      	mov	r0, r1
    e42a:	4611      	mov	r1, r2
    e42c:	461a      	mov	r2, r3
    e42e:	4603      	mov	r3, r0
    e430:	70fb      	strb	r3, [r7, #3]
    e432:	460b      	mov	r3, r1
    e434:	70bb      	strb	r3, [r7, #2]
    e436:	4613      	mov	r3, r2
    e438:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    e43a:	78fa      	ldrb	r2, [r7, #3]
    e43c:	78bb      	ldrb	r3, [r7, #2]
    e43e:	6879      	ldr	r1, [r7, #4]
    e440:	01d2      	lsls	r2, r2, #7
    e442:	440a      	add	r2, r1
    e444:	4413      	add	r3, r2
    e446:	3330      	adds	r3, #48	; 0x30
    e448:	781b      	ldrb	r3, [r3, #0]
    e44a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    e44c:	7bfb      	ldrb	r3, [r7, #15]
    e44e:	f003 030f 	and.w	r3, r3, #15
    e452:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    e454:	787b      	ldrb	r3, [r7, #1]
    e456:	011b      	lsls	r3, r3, #4
    e458:	b2da      	uxtb	r2, r3
    e45a:	7bfb      	ldrb	r3, [r7, #15]
    e45c:	4313      	orrs	r3, r2
    e45e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    e460:	78fa      	ldrb	r2, [r7, #3]
    e462:	78bb      	ldrb	r3, [r7, #2]
    e464:	6879      	ldr	r1, [r7, #4]
    e466:	01d2      	lsls	r2, r2, #7
    e468:	440a      	add	r2, r1
    e46a:	4413      	add	r3, r2
    e46c:	3330      	adds	r3, #48	; 0x30
    e46e:	7bfa      	ldrb	r2, [r7, #15]
    e470:	701a      	strb	r2, [r3, #0]
}
    e472:	bf00      	nop
    e474:	3714      	adds	r7, #20
    e476:	46bd      	mov	sp, r7
    e478:	f85d 7b04 	ldr.w	r7, [sp], #4
    e47c:	4770      	bx	lr

0000e47e <hri_port_write_PINCFG_PMUXEN_bit>:
{
    e47e:	b480      	push	{r7}
    e480:	b085      	sub	sp, #20
    e482:	af00      	add	r7, sp, #0
    e484:	6078      	str	r0, [r7, #4]
    e486:	4608      	mov	r0, r1
    e488:	4611      	mov	r1, r2
    e48a:	461a      	mov	r2, r3
    e48c:	4603      	mov	r3, r0
    e48e:	70fb      	strb	r3, [r7, #3]
    e490:	460b      	mov	r3, r1
    e492:	70bb      	strb	r3, [r7, #2]
    e494:	4613      	mov	r3, r2
    e496:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    e498:	78fa      	ldrb	r2, [r7, #3]
    e49a:	78bb      	ldrb	r3, [r7, #2]
    e49c:	6879      	ldr	r1, [r7, #4]
    e49e:	01d2      	lsls	r2, r2, #7
    e4a0:	440a      	add	r2, r1
    e4a2:	4413      	add	r3, r2
    e4a4:	3340      	adds	r3, #64	; 0x40
    e4a6:	781b      	ldrb	r3, [r3, #0]
    e4a8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    e4aa:	7bfb      	ldrb	r3, [r7, #15]
    e4ac:	f023 0301 	bic.w	r3, r3, #1
    e4b0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    e4b2:	787a      	ldrb	r2, [r7, #1]
    e4b4:	7bfb      	ldrb	r3, [r7, #15]
    e4b6:	4313      	orrs	r3, r2
    e4b8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    e4ba:	78fa      	ldrb	r2, [r7, #3]
    e4bc:	78bb      	ldrb	r3, [r7, #2]
    e4be:	6879      	ldr	r1, [r7, #4]
    e4c0:	01d2      	lsls	r2, r2, #7
    e4c2:	440a      	add	r2, r1
    e4c4:	4413      	add	r3, r2
    e4c6:	3340      	adds	r3, #64	; 0x40
    e4c8:	7bfa      	ldrb	r2, [r7, #15]
    e4ca:	701a      	strb	r2, [r3, #0]
}
    e4cc:	bf00      	nop
    e4ce:	3714      	adds	r7, #20
    e4d0:	46bd      	mov	sp, r7
    e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e4d6:	4770      	bx	lr

0000e4d8 <hri_port_write_WRCONFIG_reg>:
{
    e4d8:	b480      	push	{r7}
    e4da:	b085      	sub	sp, #20
    e4dc:	af00      	add	r7, sp, #0
    e4de:	60f8      	str	r0, [r7, #12]
    e4e0:	460b      	mov	r3, r1
    e4e2:	607a      	str	r2, [r7, #4]
    e4e4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    e4e6:	7afb      	ldrb	r3, [r7, #11]
    e4e8:	68fa      	ldr	r2, [r7, #12]
    e4ea:	01db      	lsls	r3, r3, #7
    e4ec:	4413      	add	r3, r2
    e4ee:	3328      	adds	r3, #40	; 0x28
    e4f0:	687a      	ldr	r2, [r7, #4]
    e4f2:	601a      	str	r2, [r3, #0]
}
    e4f4:	bf00      	nop
    e4f6:	3714      	adds	r7, #20
    e4f8:	46bd      	mov	sp, r7
    e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    e4fe:	4770      	bx	lr

0000e500 <_gpio_set_direction>:
{
    e500:	b580      	push	{r7, lr}
    e502:	b082      	sub	sp, #8
    e504:	af00      	add	r7, sp, #0
    e506:	4603      	mov	r3, r0
    e508:	6039      	str	r1, [r7, #0]
    e50a:	71fb      	strb	r3, [r7, #7]
    e50c:	4613      	mov	r3, r2
    e50e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    e510:	79bb      	ldrb	r3, [r7, #6]
    e512:	2b01      	cmp	r3, #1
    e514:	d01c      	beq.n	e550 <_gpio_set_direction+0x50>
    e516:	2b02      	cmp	r3, #2
    e518:	d037      	beq.n	e58a <_gpio_set_direction+0x8a>
    e51a:	2b00      	cmp	r3, #0
    e51c:	d14e      	bne.n	e5bc <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    e51e:	79fb      	ldrb	r3, [r7, #7]
    e520:	683a      	ldr	r2, [r7, #0]
    e522:	4619      	mov	r1, r3
    e524:	482a      	ldr	r0, [pc, #168]	; (e5d0 <_gpio_set_direction+0xd0>)
    e526:	4b2b      	ldr	r3, [pc, #172]	; (e5d4 <_gpio_set_direction+0xd4>)
    e528:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    e52a:	683b      	ldr	r3, [r7, #0]
    e52c:	b29b      	uxth	r3, r3
    e52e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e532:	79fb      	ldrb	r3, [r7, #7]
    e534:	4619      	mov	r1, r3
    e536:	4826      	ldr	r0, [pc, #152]	; (e5d0 <_gpio_set_direction+0xd0>)
    e538:	4b27      	ldr	r3, [pc, #156]	; (e5d8 <_gpio_set_direction+0xd8>)
    e53a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    e53c:	683b      	ldr	r3, [r7, #0]
    e53e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    e540:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    e544:	79fb      	ldrb	r3, [r7, #7]
    e546:	4619      	mov	r1, r3
    e548:	4821      	ldr	r0, [pc, #132]	; (e5d0 <_gpio_set_direction+0xd0>)
    e54a:	4b23      	ldr	r3, [pc, #140]	; (e5d8 <_gpio_set_direction+0xd8>)
    e54c:	4798      	blx	r3
		break;
    e54e:	e03a      	b.n	e5c6 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    e550:	79fb      	ldrb	r3, [r7, #7]
    e552:	683a      	ldr	r2, [r7, #0]
    e554:	4619      	mov	r1, r3
    e556:	481e      	ldr	r0, [pc, #120]	; (e5d0 <_gpio_set_direction+0xd0>)
    e558:	4b1e      	ldr	r3, [pc, #120]	; (e5d4 <_gpio_set_direction+0xd4>)
    e55a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    e55c:	683b      	ldr	r3, [r7, #0]
    e55e:	b29b      	uxth	r3, r3
    e560:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    e564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    e568:	79f9      	ldrb	r1, [r7, #7]
    e56a:	461a      	mov	r2, r3
    e56c:	4818      	ldr	r0, [pc, #96]	; (e5d0 <_gpio_set_direction+0xd0>)
    e56e:	4b1a      	ldr	r3, [pc, #104]	; (e5d8 <_gpio_set_direction+0xd8>)
    e570:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    e572:	683b      	ldr	r3, [r7, #0]
    e574:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    e576:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    e57a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    e57e:	79f9      	ldrb	r1, [r7, #7]
    e580:	461a      	mov	r2, r3
    e582:	4813      	ldr	r0, [pc, #76]	; (e5d0 <_gpio_set_direction+0xd0>)
    e584:	4b14      	ldr	r3, [pc, #80]	; (e5d8 <_gpio_set_direction+0xd8>)
    e586:	4798      	blx	r3
		break;
    e588:	e01d      	b.n	e5c6 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    e58a:	79fb      	ldrb	r3, [r7, #7]
    e58c:	683a      	ldr	r2, [r7, #0]
    e58e:	4619      	mov	r1, r3
    e590:	480f      	ldr	r0, [pc, #60]	; (e5d0 <_gpio_set_direction+0xd0>)
    e592:	4b12      	ldr	r3, [pc, #72]	; (e5dc <_gpio_set_direction+0xdc>)
    e594:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    e596:	683b      	ldr	r3, [r7, #0]
    e598:	b29b      	uxth	r3, r3
    e59a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e59e:	79fb      	ldrb	r3, [r7, #7]
    e5a0:	4619      	mov	r1, r3
    e5a2:	480b      	ldr	r0, [pc, #44]	; (e5d0 <_gpio_set_direction+0xd0>)
    e5a4:	4b0c      	ldr	r3, [pc, #48]	; (e5d8 <_gpio_set_direction+0xd8>)
    e5a6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    e5a8:	683b      	ldr	r3, [r7, #0]
    e5aa:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    e5ac:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    e5b0:	79fb      	ldrb	r3, [r7, #7]
    e5b2:	4619      	mov	r1, r3
    e5b4:	4806      	ldr	r0, [pc, #24]	; (e5d0 <_gpio_set_direction+0xd0>)
    e5b6:	4b08      	ldr	r3, [pc, #32]	; (e5d8 <_gpio_set_direction+0xd8>)
    e5b8:	4798      	blx	r3
		break;
    e5ba:	e004      	b.n	e5c6 <_gpio_set_direction+0xc6>
		ASSERT(false);
    e5bc:	2246      	movs	r2, #70	; 0x46
    e5be:	4908      	ldr	r1, [pc, #32]	; (e5e0 <_gpio_set_direction+0xe0>)
    e5c0:	2000      	movs	r0, #0
    e5c2:	4b08      	ldr	r3, [pc, #32]	; (e5e4 <_gpio_set_direction+0xe4>)
    e5c4:	4798      	blx	r3
}
    e5c6:	bf00      	nop
    e5c8:	3708      	adds	r7, #8
    e5ca:	46bd      	mov	sp, r7
    e5cc:	bd80      	pop	{r7, pc}
    e5ce:	bf00      	nop
    e5d0:	41008000 	.word	0x41008000
    e5d4:	0000e349 	.word	0x0000e349
    e5d8:	0000e4d9 	.word	0x0000e4d9
    e5dc:	0000e321 	.word	0x0000e321
    e5e0:	00018744 	.word	0x00018744
    e5e4:	000065d9 	.word	0x000065d9

0000e5e8 <_gpio_set_level>:
{
    e5e8:	b580      	push	{r7, lr}
    e5ea:	b082      	sub	sp, #8
    e5ec:	af00      	add	r7, sp, #0
    e5ee:	4603      	mov	r3, r0
    e5f0:	6039      	str	r1, [r7, #0]
    e5f2:	71fb      	strb	r3, [r7, #7]
    e5f4:	4613      	mov	r3, r2
    e5f6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    e5f8:	79bb      	ldrb	r3, [r7, #6]
    e5fa:	2b00      	cmp	r3, #0
    e5fc:	d006      	beq.n	e60c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    e5fe:	79fb      	ldrb	r3, [r7, #7]
    e600:	683a      	ldr	r2, [r7, #0]
    e602:	4619      	mov	r1, r3
    e604:	4806      	ldr	r0, [pc, #24]	; (e620 <_gpio_set_level+0x38>)
    e606:	4b07      	ldr	r3, [pc, #28]	; (e624 <_gpio_set_level+0x3c>)
    e608:	4798      	blx	r3
}
    e60a:	e005      	b.n	e618 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e60c:	79fb      	ldrb	r3, [r7, #7]
    e60e:	683a      	ldr	r2, [r7, #0]
    e610:	4619      	mov	r1, r3
    e612:	4803      	ldr	r0, [pc, #12]	; (e620 <_gpio_set_level+0x38>)
    e614:	4b04      	ldr	r3, [pc, #16]	; (e628 <_gpio_set_level+0x40>)
    e616:	4798      	blx	r3
}
    e618:	bf00      	nop
    e61a:	3708      	adds	r7, #8
    e61c:	46bd      	mov	sp, r7
    e61e:	bd80      	pop	{r7, pc}
    e620:	41008000 	.word	0x41008000
    e624:	0000e371 	.word	0x0000e371
    e628:	0000e399 	.word	0x0000e399

0000e62c <_gpio_set_pin_function>:
{
    e62c:	b590      	push	{r4, r7, lr}
    e62e:	b085      	sub	sp, #20
    e630:	af00      	add	r7, sp, #0
    e632:	6078      	str	r0, [r7, #4]
    e634:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    e636:	687b      	ldr	r3, [r7, #4]
    e638:	095b      	lsrs	r3, r3, #5
    e63a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    e63c:	687b      	ldr	r3, [r7, #4]
    e63e:	b2db      	uxtb	r3, r3
    e640:	f003 031f 	and.w	r3, r3, #31
    e644:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    e646:	683b      	ldr	r3, [r7, #0]
    e648:	f1b3 3fff 	cmp.w	r3, #4294967295
    e64c:	d106      	bne.n	e65c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    e64e:	7bba      	ldrb	r2, [r7, #14]
    e650:	7bf9      	ldrb	r1, [r7, #15]
    e652:	2300      	movs	r3, #0
    e654:	4812      	ldr	r0, [pc, #72]	; (e6a0 <_gpio_set_pin_function+0x74>)
    e656:	4c13      	ldr	r4, [pc, #76]	; (e6a4 <_gpio_set_pin_function+0x78>)
    e658:	47a0      	blx	r4
}
    e65a:	e01d      	b.n	e698 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    e65c:	7bba      	ldrb	r2, [r7, #14]
    e65e:	7bf9      	ldrb	r1, [r7, #15]
    e660:	2301      	movs	r3, #1
    e662:	480f      	ldr	r0, [pc, #60]	; (e6a0 <_gpio_set_pin_function+0x74>)
    e664:	4c0f      	ldr	r4, [pc, #60]	; (e6a4 <_gpio_set_pin_function+0x78>)
    e666:	47a0      	blx	r4
		if (pin & 1) {
    e668:	7bbb      	ldrb	r3, [r7, #14]
    e66a:	f003 0301 	and.w	r3, r3, #1
    e66e:	2b00      	cmp	r3, #0
    e670:	d009      	beq.n	e686 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    e672:	7bbb      	ldrb	r3, [r7, #14]
    e674:	085b      	lsrs	r3, r3, #1
    e676:	b2da      	uxtb	r2, r3
    e678:	683b      	ldr	r3, [r7, #0]
    e67a:	b2db      	uxtb	r3, r3
    e67c:	7bf9      	ldrb	r1, [r7, #15]
    e67e:	4808      	ldr	r0, [pc, #32]	; (e6a0 <_gpio_set_pin_function+0x74>)
    e680:	4c09      	ldr	r4, [pc, #36]	; (e6a8 <_gpio_set_pin_function+0x7c>)
    e682:	47a0      	blx	r4
}
    e684:	e008      	b.n	e698 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    e686:	7bbb      	ldrb	r3, [r7, #14]
    e688:	085b      	lsrs	r3, r3, #1
    e68a:	b2da      	uxtb	r2, r3
    e68c:	683b      	ldr	r3, [r7, #0]
    e68e:	b2db      	uxtb	r3, r3
    e690:	7bf9      	ldrb	r1, [r7, #15]
    e692:	4803      	ldr	r0, [pc, #12]	; (e6a0 <_gpio_set_pin_function+0x74>)
    e694:	4c05      	ldr	r4, [pc, #20]	; (e6ac <_gpio_set_pin_function+0x80>)
    e696:	47a0      	blx	r4
}
    e698:	bf00      	nop
    e69a:	3714      	adds	r7, #20
    e69c:	46bd      	mov	sp, r7
    e69e:	bd90      	pop	{r4, r7, pc}
    e6a0:	41008000 	.word	0x41008000
    e6a4:	0000e47f 	.word	0x0000e47f
    e6a8:	0000e421 	.word	0x0000e421
    e6ac:	0000e3c1 	.word	0x0000e3c1

0000e6b0 <gpio_set_pin_function>:
{
    e6b0:	b580      	push	{r7, lr}
    e6b2:	b082      	sub	sp, #8
    e6b4:	af00      	add	r7, sp, #0
    e6b6:	6078      	str	r0, [r7, #4]
    e6b8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    e6ba:	6839      	ldr	r1, [r7, #0]
    e6bc:	6878      	ldr	r0, [r7, #4]
    e6be:	4b03      	ldr	r3, [pc, #12]	; (e6cc <gpio_set_pin_function+0x1c>)
    e6c0:	4798      	blx	r3
}
    e6c2:	bf00      	nop
    e6c4:	3708      	adds	r7, #8
    e6c6:	46bd      	mov	sp, r7
    e6c8:	bd80      	pop	{r7, pc}
    e6ca:	bf00      	nop
    e6cc:	0000e62d 	.word	0x0000e62d

0000e6d0 <gpio_set_pin_direction>:
{
    e6d0:	b580      	push	{r7, lr}
    e6d2:	b082      	sub	sp, #8
    e6d4:	af00      	add	r7, sp, #0
    e6d6:	4603      	mov	r3, r0
    e6d8:	460a      	mov	r2, r1
    e6da:	71fb      	strb	r3, [r7, #7]
    e6dc:	4613      	mov	r3, r2
    e6de:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    e6e0:	79fb      	ldrb	r3, [r7, #7]
    e6e2:	095b      	lsrs	r3, r3, #5
    e6e4:	b2d8      	uxtb	r0, r3
    e6e6:	79fb      	ldrb	r3, [r7, #7]
    e6e8:	f003 031f 	and.w	r3, r3, #31
    e6ec:	2201      	movs	r2, #1
    e6ee:	fa02 f303 	lsl.w	r3, r2, r3
    e6f2:	79ba      	ldrb	r2, [r7, #6]
    e6f4:	4619      	mov	r1, r3
    e6f6:	4b03      	ldr	r3, [pc, #12]	; (e704 <gpio_set_pin_direction+0x34>)
    e6f8:	4798      	blx	r3
}
    e6fa:	bf00      	nop
    e6fc:	3708      	adds	r7, #8
    e6fe:	46bd      	mov	sp, r7
    e700:	bd80      	pop	{r7, pc}
    e702:	bf00      	nop
    e704:	0000e501 	.word	0x0000e501

0000e708 <gpio_set_pin_level>:
{
    e708:	b580      	push	{r7, lr}
    e70a:	b082      	sub	sp, #8
    e70c:	af00      	add	r7, sp, #0
    e70e:	4603      	mov	r3, r0
    e710:	460a      	mov	r2, r1
    e712:	71fb      	strb	r3, [r7, #7]
    e714:	4613      	mov	r3, r2
    e716:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e718:	79fb      	ldrb	r3, [r7, #7]
    e71a:	095b      	lsrs	r3, r3, #5
    e71c:	b2d8      	uxtb	r0, r3
    e71e:	79fb      	ldrb	r3, [r7, #7]
    e720:	f003 031f 	and.w	r3, r3, #31
    e724:	2201      	movs	r2, #1
    e726:	fa02 f303 	lsl.w	r3, r2, r3
    e72a:	79ba      	ldrb	r2, [r7, #6]
    e72c:	4619      	mov	r1, r3
    e72e:	4b03      	ldr	r3, [pc, #12]	; (e73c <gpio_set_pin_level+0x34>)
    e730:	4798      	blx	r3
}
    e732:	bf00      	nop
    e734:	3708      	adds	r7, #8
    e736:	46bd      	mov	sp, r7
    e738:	bd80      	pop	{r7, pc}
    e73a:	bf00      	nop
    e73c:	0000e5e9 	.word	0x0000e5e9

0000e740 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    e740:	b580      	push	{r7, lr}
    e742:	b082      	sub	sp, #8
    e744:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    e746:	2100      	movs	r1, #0
    e748:	2008      	movs	r0, #8
    e74a:	4b24      	ldr	r3, [pc, #144]	; (e7dc <QSPI_N25Q256_exit_xip+0x9c>)
    e74c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    e74e:	2100      	movs	r1, #0
    e750:	202b      	movs	r0, #43	; 0x2b
    e752:	4b22      	ldr	r3, [pc, #136]	; (e7dc <QSPI_N25Q256_exit_xip+0x9c>)
    e754:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    e756:	2100      	movs	r1, #0
    e758:	202a      	movs	r0, #42	; 0x2a
    e75a:	4b20      	ldr	r3, [pc, #128]	; (e7dc <QSPI_N25Q256_exit_xip+0x9c>)
    e75c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    e75e:	2102      	movs	r1, #2
    e760:	2008      	movs	r0, #8
    e762:	4b1f      	ldr	r3, [pc, #124]	; (e7e0 <QSPI_N25Q256_exit_xip+0xa0>)
    e764:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    e766:	2102      	movs	r1, #2
    e768:	202b      	movs	r0, #43	; 0x2b
    e76a:	4b1d      	ldr	r3, [pc, #116]	; (e7e0 <QSPI_N25Q256_exit_xip+0xa0>)
    e76c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    e76e:	2102      	movs	r1, #2
    e770:	202a      	movs	r0, #42	; 0x2a
    e772:	4b1b      	ldr	r3, [pc, #108]	; (e7e0 <QSPI_N25Q256_exit_xip+0xa0>)
    e774:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    e776:	2101      	movs	r1, #1
    e778:	2008      	movs	r0, #8
    e77a:	4b1a      	ldr	r3, [pc, #104]	; (e7e4 <QSPI_N25Q256_exit_xip+0xa4>)
    e77c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    e77e:	2100      	movs	r1, #0
    e780:	202b      	movs	r0, #43	; 0x2b
    e782:	4b18      	ldr	r3, [pc, #96]	; (e7e4 <QSPI_N25Q256_exit_xip+0xa4>)
    e784:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    e786:	2100      	movs	r1, #0
    e788:	202a      	movs	r0, #42	; 0x2a
    e78a:	4b16      	ldr	r3, [pc, #88]	; (e7e4 <QSPI_N25Q256_exit_xip+0xa4>)
    e78c:	4798      	blx	r3

	delay_us(1);
    e78e:	2001      	movs	r0, #1
    e790:	4b15      	ldr	r3, [pc, #84]	; (e7e8 <QSPI_N25Q256_exit_xip+0xa8>)
    e792:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    e794:	2300      	movs	r3, #0
    e796:	607b      	str	r3, [r7, #4]
    e798:	e010      	b.n	e7bc <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    e79a:	2101      	movs	r1, #1
    e79c:	202a      	movs	r0, #42	; 0x2a
    e79e:	4b11      	ldr	r3, [pc, #68]	; (e7e4 <QSPI_N25Q256_exit_xip+0xa4>)
    e7a0:	4798      	blx	r3
		delay_us(1);
    e7a2:	2001      	movs	r0, #1
    e7a4:	4b10      	ldr	r3, [pc, #64]	; (e7e8 <QSPI_N25Q256_exit_xip+0xa8>)
    e7a6:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    e7a8:	2100      	movs	r1, #0
    e7aa:	202a      	movs	r0, #42	; 0x2a
    e7ac:	4b0d      	ldr	r3, [pc, #52]	; (e7e4 <QSPI_N25Q256_exit_xip+0xa4>)
    e7ae:	4798      	blx	r3
		delay_us(1);
    e7b0:	2001      	movs	r0, #1
    e7b2:	4b0d      	ldr	r3, [pc, #52]	; (e7e8 <QSPI_N25Q256_exit_xip+0xa8>)
    e7b4:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    e7b6:	687b      	ldr	r3, [r7, #4]
    e7b8:	3301      	adds	r3, #1
    e7ba:	607b      	str	r3, [r7, #4]
    e7bc:	687b      	ldr	r3, [r7, #4]
    e7be:	2b06      	cmp	r3, #6
    e7c0:	ddeb      	ble.n	e79a <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    e7c2:	2101      	movs	r1, #1
    e7c4:	202b      	movs	r0, #43	; 0x2b
    e7c6:	4b07      	ldr	r3, [pc, #28]	; (e7e4 <QSPI_N25Q256_exit_xip+0xa4>)
    e7c8:	4798      	blx	r3
	delay_us(1);
    e7ca:	2001      	movs	r0, #1
    e7cc:	4b06      	ldr	r3, [pc, #24]	; (e7e8 <QSPI_N25Q256_exit_xip+0xa8>)
    e7ce:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    e7d0:	4b06      	ldr	r3, [pc, #24]	; (e7ec <QSPI_N25Q256_exit_xip+0xac>)
    e7d2:	4798      	blx	r3
}
    e7d4:	bf00      	nop
    e7d6:	3708      	adds	r7, #8
    e7d8:	46bd      	mov	sp, r7
    e7da:	bd80      	pop	{r7, pc}
    e7dc:	0000e6b1 	.word	0x0000e6b1
    e7e0:	0000e6d1 	.word	0x0000e6d1
    e7e4:	0000e709 	.word	0x0000e709
    e7e8:	00004a31 	.word	0x00004a31
    e7ec:	000038f9 	.word	0x000038f9

0000e7f0 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    e7f0:	b598      	push	{r3, r4, r7, lr}
    e7f2:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    e7f4:	4806      	ldr	r0, [pc, #24]	; (e810 <spi_nor_flash_init+0x20>)
    e7f6:	4b07      	ldr	r3, [pc, #28]	; (e814 <spi_nor_flash_init+0x24>)
    e7f8:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    e7fa:	2300      	movs	r3, #0
    e7fc:	4a06      	ldr	r2, [pc, #24]	; (e818 <spi_nor_flash_init+0x28>)
    e7fe:	4904      	ldr	r1, [pc, #16]	; (e810 <spi_nor_flash_init+0x20>)
    e800:	4806      	ldr	r0, [pc, #24]	; (e81c <spi_nor_flash_init+0x2c>)
    e802:	4c07      	ldr	r4, [pc, #28]	; (e820 <spi_nor_flash_init+0x30>)
    e804:	47a0      	blx	r4
    e806:	4602      	mov	r2, r0
    e808:	4b06      	ldr	r3, [pc, #24]	; (e824 <spi_nor_flash_init+0x34>)
    e80a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    e80c:	bf00      	nop
    e80e:	bd98      	pop	{r3, r4, r7, pc}
    e810:	20004fcc 	.word	0x20004fcc
    e814:	00005101 	.word	0x00005101
    e818:	0000e741 	.word	0x0000e741
    e81c:	20003354 	.word	0x20003354
    e820:	0000ec5d 	.word	0x0000ec5d
    e824:	200051d8 	.word	0x200051d8

0000e828 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    e828:	b580      	push	{r7, lr}
    e82a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    e82c:	4805      	ldr	r0, [pc, #20]	; (e844 <cdc_device_acm_init+0x1c>)
    e82e:	4b06      	ldr	r3, [pc, #24]	; (e848 <cdc_device_acm_init+0x20>)
    e830:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    e832:	4b06      	ldr	r3, [pc, #24]	; (e84c <cdc_device_acm_init+0x24>)
    e834:	4798      	blx	r3

	usbdc_start(single_desc);
    e836:	4806      	ldr	r0, [pc, #24]	; (e850 <cdc_device_acm_init+0x28>)
    e838:	4b06      	ldr	r3, [pc, #24]	; (e854 <cdc_device_acm_init+0x2c>)
    e83a:	4798      	blx	r3
	usbdc_attach();
    e83c:	4b06      	ldr	r3, [pc, #24]	; (e858 <cdc_device_acm_init+0x30>)
    e83e:	4798      	blx	r3
}
    e840:	bf00      	nop
    e842:	bd80      	pop	{r7, pc}
    e844:	200033a4 	.word	0x200033a4
    e848:	00010385 	.word	0x00010385
    e84c:	0000f5fd 	.word	0x0000f5fd
    e850:	20000190 	.word	0x20000190
    e854:	00010421 	.word	0x00010421
    e858:	00010471 	.word	0x00010471

0000e85c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    e85c:	b580      	push	{r7, lr}
    e85e:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    e860:	4b01      	ldr	r3, [pc, #4]	; (e868 <usb_init+0xc>)
    e862:	4798      	blx	r3
}
    e864:	bf00      	nop
    e866:	bd80      	pop	{r7, pc}
    e868:	0000e829 	.word	0x0000e829

0000e86c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    e86c:	b480      	push	{r7}
    e86e:	b085      	sub	sp, #20
    e870:	af00      	add	r7, sp, #0
    e872:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e874:	f3ef 8310 	mrs	r3, PRIMASK
    e878:	60fb      	str	r3, [r7, #12]
  return(result);
    e87a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    e87c:	687b      	ldr	r3, [r7, #4]
    e87e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    e880:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e882:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    e886:	bf00      	nop
    e888:	3714      	adds	r7, #20
    e88a:	46bd      	mov	sp, r7
    e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e890:	4770      	bx	lr

0000e892 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    e892:	b480      	push	{r7}
    e894:	b085      	sub	sp, #20
    e896:	af00      	add	r7, sp, #0
    e898:	6078      	str	r0, [r7, #4]
    e89a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    e89e:	687b      	ldr	r3, [r7, #4]
    e8a0:	681b      	ldr	r3, [r3, #0]
    e8a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e8a4:	68fb      	ldr	r3, [r7, #12]
    e8a6:	f383 8810 	msr	PRIMASK, r3
}
    e8aa:	bf00      	nop
    e8ac:	3714      	adds	r7, #20
    e8ae:	46bd      	mov	sp, r7
    e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e8b4:	4770      	bx	lr
	...

0000e8b8 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    e8b8:	b580      	push	{r7, lr}
    e8ba:	b08c      	sub	sp, #48	; 0x30
    e8bc:	af00      	add	r7, sp, #0
    e8be:	6078      	str	r0, [r7, #4]
    e8c0:	460b      	mov	r3, r1
    e8c2:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e8c4:	687b      	ldr	r3, [r7, #4]
    e8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e8c8:	687b      	ldr	r3, [r7, #4]
    e8ca:	681b      	ldr	r3, [r3, #0]
    e8cc:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    e8ce:	f107 030c 	add.w	r3, r7, #12
    e8d2:	2200      	movs	r2, #0
    e8d4:	601a      	str	r2, [r3, #0]
    e8d6:	605a      	str	r2, [r3, #4]
    e8d8:	609a      	str	r2, [r3, #8]
    e8da:	60da      	str	r2, [r3, #12]
    e8dc:	611a      	str	r2, [r3, #16]
    e8de:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    e8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e8e2:	7b1b      	ldrb	r3, [r3, #12]
    e8e4:	2b00      	cmp	r3, #0
    e8e6:	d001      	beq.n	e8ec <n25q256a_xip_confirm+0x34>
    e8e8:	2206      	movs	r2, #6
    e8ea:	e000      	b.n	e8ee <n25q256a_xip_confirm+0x36>
    e8ec:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    e8ee:	7b3b      	ldrb	r3, [r7, #12]
    e8f0:	f362 0302 	bfi	r3, r2, #0, #3
    e8f4:	733b      	strb	r3, [r7, #12]
    e8f6:	7b3b      	ldrb	r3, [r7, #12]
    e8f8:	f043 0310 	orr.w	r3, r3, #16
    e8fc:	733b      	strb	r3, [r7, #12]
    e8fe:	7b3b      	ldrb	r3, [r7, #12]
    e900:	f043 0320 	orr.w	r3, r3, #32
    e904:	733b      	strb	r3, [r7, #12]
    e906:	7b3b      	ldrb	r3, [r7, #12]
    e908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e90c:	733b      	strb	r3, [r7, #12]
    e90e:	7b3b      	ldrb	r3, [r7, #12]
    e910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e914:	733b      	strb	r3, [r7, #12]
    e916:	7b7b      	ldrb	r3, [r7, #13]
    e918:	f043 0303 	orr.w	r3, r3, #3
    e91c:	737b      	strb	r3, [r7, #13]
    e91e:	7b7b      	ldrb	r3, [r7, #13]
    e920:	2201      	movs	r2, #1
    e922:	f362 1305 	bfi	r3, r2, #4, #2
    e926:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    e928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e92a:	7b1b      	ldrb	r3, [r3, #12]
    e92c:	2b00      	cmp	r3, #0
    e92e:	d001      	beq.n	e934 <n25q256a_xip_confirm+0x7c>
    e930:	2208      	movs	r2, #8
    e932:	e000      	b.n	e936 <n25q256a_xip_confirm+0x7e>
    e934:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    e936:	7bbb      	ldrb	r3, [r7, #14]
    e938:	f362 0304 	bfi	r3, r2, #0, #5
    e93c:	73bb      	strb	r3, [r7, #14]
    e93e:	230b      	movs	r3, #11
    e940:	743b      	strb	r3, [r7, #16]
    e942:	78fb      	ldrb	r3, [r7, #3]
    e944:	2b00      	cmp	r3, #0
    e946:	d001      	beq.n	e94c <n25q256a_xip_confirm+0x94>
    e948:	2300      	movs	r3, #0
    e94a:	e000      	b.n	e94e <n25q256a_xip_confirm+0x96>
    e94c:	23ff      	movs	r3, #255	; 0xff
    e94e:	747b      	strb	r3, [r7, #17]
    e950:	2301      	movs	r3, #1
    e952:	61bb      	str	r3, [r7, #24]
    e954:	f107 0327 	add.w	r3, r7, #39	; 0x27
    e958:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    e95a:	f107 030c 	add.w	r3, r7, #12
    e95e:	4619      	mov	r1, r3
    e960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e962:	4b07      	ldr	r3, [pc, #28]	; (e980 <n25q256a_xip_confirm+0xc8>)
    e964:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    e966:	78fb      	ldrb	r3, [r7, #3]
    e968:	2b00      	cmp	r3, #0
    e96a:	d001      	beq.n	e970 <n25q256a_xip_confirm+0xb8>
    e96c:	2202      	movs	r2, #2
    e96e:	e000      	b.n	e972 <n25q256a_xip_confirm+0xba>
    e970:	2201      	movs	r2, #1
    e972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e974:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    e976:	2300      	movs	r3, #0
}
    e978:	4618      	mov	r0, r3
    e97a:	3730      	adds	r7, #48	; 0x30
    e97c:	46bd      	mov	sp, r7
    e97e:	bd80      	pop	{r7, pc}
    e980:	00005179 	.word	0x00005179

0000e984 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    e984:	b580      	push	{r7, lr}
    e986:	b08c      	sub	sp, #48	; 0x30
    e988:	af00      	add	r7, sp, #0
    e98a:	6078      	str	r0, [r7, #4]
    e98c:	460b      	mov	r3, r1
    e98e:	70fb      	strb	r3, [r7, #3]
    e990:	4613      	mov	r3, r2
    e992:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    e994:	2300      	movs	r3, #0
    e996:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    e998:	687b      	ldr	r3, [r7, #4]
    e99a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    e99c:	687b      	ldr	r3, [r7, #4]
    e99e:	681b      	ldr	r3, [r3, #0]
    e9a0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    e9a2:	f107 030c 	add.w	r3, r7, #12
    e9a6:	2200      	movs	r2, #0
    e9a8:	601a      	str	r2, [r3, #0]
    e9aa:	605a      	str	r2, [r3, #4]
    e9ac:	609a      	str	r2, [r3, #8]
    e9ae:	60da      	str	r2, [r3, #12]
    e9b0:	611a      	str	r2, [r3, #16]
    e9b2:	615a      	str	r2, [r3, #20]
    e9b4:	78fb      	ldrb	r3, [r7, #3]
    e9b6:	f003 0307 	and.w	r3, r3, #7
    e9ba:	b2da      	uxtb	r2, r3
    e9bc:	7b3b      	ldrb	r3, [r7, #12]
    e9be:	f362 0302 	bfi	r3, r2, #0, #3
    e9c2:	733b      	strb	r3, [r7, #12]
    e9c4:	7b3b      	ldrb	r3, [r7, #12]
    e9c6:	f043 0310 	orr.w	r3, r3, #16
    e9ca:	733b      	strb	r3, [r7, #12]
    e9cc:	7b3b      	ldrb	r3, [r7, #12]
    e9ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e9d2:	733b      	strb	r3, [r7, #12]
    e9d4:	78bb      	ldrb	r3, [r7, #2]
    e9d6:	743b      	strb	r3, [r7, #16]
    e9d8:	2301      	movs	r3, #1
    e9da:	61bb      	str	r3, [r7, #24]
    e9dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
    e9e0:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    e9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e9e4:	7b5b      	ldrb	r3, [r3, #13]
    e9e6:	2b00      	cmp	r3, #0
    e9e8:	d003      	beq.n	e9f2 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    e9ea:	2100      	movs	r1, #0
    e9ec:	6878      	ldr	r0, [r7, #4]
    e9ee:	4b0a      	ldr	r3, [pc, #40]	; (ea18 <n25q256a_read_reg+0x94>)
    e9f0:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    e9f2:	f107 030c 	add.w	r3, r7, #12
    e9f6:	4619      	mov	r1, r3
    e9f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e9fa:	4b08      	ldr	r3, [pc, #32]	; (ea1c <n25q256a_read_reg+0x98>)
    e9fc:	4798      	blx	r3
	if (n25q->xip_mode) {
    e9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ea00:	7b5b      	ldrb	r3, [r3, #13]
    ea02:	2b00      	cmp	r3, #0
    ea04:	d003      	beq.n	ea0e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    ea06:	2101      	movs	r1, #1
    ea08:	6878      	ldr	r0, [r7, #4]
    ea0a:	4b03      	ldr	r3, [pc, #12]	; (ea18 <n25q256a_read_reg+0x94>)
    ea0c:	4798      	blx	r3
	}
	return status;
    ea0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ea10:	4618      	mov	r0, r3
    ea12:	3730      	adds	r7, #48	; 0x30
    ea14:	46bd      	mov	sp, r7
    ea16:	bd80      	pop	{r7, pc}
    ea18:	0000e8b9 	.word	0x0000e8b9
    ea1c:	00005179 	.word	0x00005179

0000ea20 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    ea20:	b580      	push	{r7, lr}
    ea22:	b08c      	sub	sp, #48	; 0x30
    ea24:	af00      	add	r7, sp, #0
    ea26:	60f8      	str	r0, [r7, #12]
    ea28:	607b      	str	r3, [r7, #4]
    ea2a:	460b      	mov	r3, r1
    ea2c:	72fb      	strb	r3, [r7, #11]
    ea2e:	4613      	mov	r3, r2
    ea30:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ea32:	68fb      	ldr	r3, [r7, #12]
    ea34:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ea36:	68fb      	ldr	r3, [r7, #12]
    ea38:	681b      	ldr	r3, [r3, #0]
    ea3a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    ea3c:	f107 0310 	add.w	r3, r7, #16
    ea40:	2200      	movs	r2, #0
    ea42:	601a      	str	r2, [r3, #0]
    ea44:	605a      	str	r2, [r3, #4]
    ea46:	609a      	str	r2, [r3, #8]
    ea48:	60da      	str	r2, [r3, #12]
    ea4a:	611a      	str	r2, [r3, #16]
    ea4c:	615a      	str	r2, [r3, #20]
    ea4e:	7afb      	ldrb	r3, [r7, #11]
    ea50:	f003 0307 	and.w	r3, r3, #7
    ea54:	b2da      	uxtb	r2, r3
    ea56:	7c3b      	ldrb	r3, [r7, #16]
    ea58:	f362 0302 	bfi	r3, r2, #0, #3
    ea5c:	743b      	strb	r3, [r7, #16]
    ea5e:	7c3b      	ldrb	r3, [r7, #16]
    ea60:	f043 0310 	orr.w	r3, r3, #16
    ea64:	743b      	strb	r3, [r7, #16]
    ea66:	7c3b      	ldrb	r3, [r7, #16]
    ea68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ea6c:	743b      	strb	r3, [r7, #16]
    ea6e:	7c7b      	ldrb	r3, [r7, #17]
    ea70:	2202      	movs	r2, #2
    ea72:	f362 1305 	bfi	r3, r2, #4, #2
    ea76:	747b      	strb	r3, [r7, #17]
    ea78:	7abb      	ldrb	r3, [r7, #10]
    ea7a:	753b      	strb	r3, [r7, #20]
    ea7c:	2301      	movs	r3, #1
    ea7e:	61fb      	str	r3, [r7, #28]
    ea80:	1d3b      	adds	r3, r7, #4
    ea82:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    ea84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ea86:	7b5b      	ldrb	r3, [r3, #13]
    ea88:	2b00      	cmp	r3, #0
    ea8a:	d003      	beq.n	ea94 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    ea8c:	2100      	movs	r1, #0
    ea8e:	68f8      	ldr	r0, [r7, #12]
    ea90:	4b09      	ldr	r3, [pc, #36]	; (eab8 <n25q256a_write_reg+0x98>)
    ea92:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    ea94:	f107 0310 	add.w	r3, r7, #16
    ea98:	4619      	mov	r1, r3
    ea9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ea9c:	4b07      	ldr	r3, [pc, #28]	; (eabc <n25q256a_write_reg+0x9c>)
    ea9e:	4798      	blx	r3
	if (n25q->xip_mode) {
    eaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eaa2:	7b5b      	ldrb	r3, [r3, #13]
    eaa4:	2b00      	cmp	r3, #0
    eaa6:	d003      	beq.n	eab0 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    eaa8:	2101      	movs	r1, #1
    eaaa:	68f8      	ldr	r0, [r7, #12]
    eaac:	4b02      	ldr	r3, [pc, #8]	; (eab8 <n25q256a_write_reg+0x98>)
    eaae:	4798      	blx	r3
	}
}
    eab0:	bf00      	nop
    eab2:	3730      	adds	r7, #48	; 0x30
    eab4:	46bd      	mov	sp, r7
    eab6:	bd80      	pop	{r7, pc}
    eab8:	0000e8b9 	.word	0x0000e8b9
    eabc:	00005179 	.word	0x00005179

0000eac0 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    eac0:	b580      	push	{r7, lr}
    eac2:	b090      	sub	sp, #64	; 0x40
    eac4:	af00      	add	r7, sp, #0
    eac6:	6078      	str	r0, [r7, #4]
    eac8:	460b      	mov	r3, r1
    eaca:	70fb      	strb	r3, [r7, #3]
    eacc:	4613      	mov	r3, r2
    eace:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ead0:	687b      	ldr	r3, [r7, #4]
    ead2:	681b      	ldr	r3, [r3, #0]
    ead4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    ead6:	78bb      	ldrb	r3, [r7, #2]
    ead8:	2b00      	cmp	r3, #0
    eada:	d001      	beq.n	eae0 <n25q256a_write_enable+0x20>
    eadc:	2306      	movs	r3, #6
    eade:	e000      	b.n	eae2 <n25q256a_write_enable+0x22>
    eae0:	2304      	movs	r3, #4
    eae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    eae6:	f107 0320 	add.w	r3, r7, #32
    eaea:	2200      	movs	r2, #0
    eaec:	601a      	str	r2, [r3, #0]
    eaee:	605a      	str	r2, [r3, #4]
    eaf0:	609a      	str	r2, [r3, #8]
    eaf2:	60da      	str	r2, [r3, #12]
    eaf4:	611a      	str	r2, [r3, #16]
    eaf6:	615a      	str	r2, [r3, #20]
    eaf8:	78fb      	ldrb	r3, [r7, #3]
    eafa:	f003 0307 	and.w	r3, r3, #7
    eafe:	b2da      	uxtb	r2, r3
    eb00:	f897 3020 	ldrb.w	r3, [r7, #32]
    eb04:	f362 0302 	bfi	r3, r2, #0, #3
    eb08:	f887 3020 	strb.w	r3, [r7, #32]
    eb0c:	f897 3020 	ldrb.w	r3, [r7, #32]
    eb10:	f043 0310 	orr.w	r3, r3, #16
    eb14:	f887 3020 	strb.w	r3, [r7, #32]
    eb18:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    eb1c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    eb20:	f107 0308 	add.w	r3, r7, #8
    eb24:	2200      	movs	r2, #0
    eb26:	601a      	str	r2, [r3, #0]
    eb28:	605a      	str	r2, [r3, #4]
    eb2a:	609a      	str	r2, [r3, #8]
    eb2c:	60da      	str	r2, [r3, #12]
    eb2e:	611a      	str	r2, [r3, #16]
    eb30:	615a      	str	r2, [r3, #20]
    eb32:	78fb      	ldrb	r3, [r7, #3]
    eb34:	f003 0307 	and.w	r3, r3, #7
    eb38:	b2da      	uxtb	r2, r3
    eb3a:	7a3b      	ldrb	r3, [r7, #8]
    eb3c:	f362 0302 	bfi	r3, r2, #0, #3
    eb40:	723b      	strb	r3, [r7, #8]
    eb42:	7a3b      	ldrb	r3, [r7, #8]
    eb44:	f043 0310 	orr.w	r3, r3, #16
    eb48:	723b      	strb	r3, [r7, #8]
    eb4a:	7a3b      	ldrb	r3, [r7, #8]
    eb4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    eb50:	723b      	strb	r3, [r7, #8]
    eb52:	2305      	movs	r3, #5
    eb54:	733b      	strb	r3, [r7, #12]
    eb56:	2301      	movs	r3, #1
    eb58:	617b      	str	r3, [r7, #20]
    eb5a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    eb5e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    eb60:	f107 0320 	add.w	r3, r7, #32
    eb64:	4619      	mov	r1, r3
    eb66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    eb68:	4b08      	ldr	r3, [pc, #32]	; (eb8c <n25q256a_write_enable+0xcc>)
    eb6a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    eb6c:	f107 0308 	add.w	r3, r7, #8
    eb70:	4619      	mov	r1, r3
    eb72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    eb74:	4b05      	ldr	r3, [pc, #20]	; (eb8c <n25q256a_write_enable+0xcc>)
    eb76:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    eb78:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    eb7c:	f003 0302 	and.w	r3, r3, #2
    eb80:	2b00      	cmp	r3, #0
    eb82:	d0ed      	beq.n	eb60 <n25q256a_write_enable+0xa0>
}
    eb84:	bf00      	nop
    eb86:	3740      	adds	r7, #64	; 0x40
    eb88:	46bd      	mov	sp, r7
    eb8a:	bd80      	pop	{r7, pc}
    eb8c:	00005179 	.word	0x00005179

0000eb90 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    eb90:	b590      	push	{r4, r7, lr}
    eb92:	b087      	sub	sp, #28
    eb94:	af00      	add	r7, sp, #0
    eb96:	6078      	str	r0, [r7, #4]
    eb98:	460b      	mov	r3, r1
    eb9a:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    eb9c:	687b      	ldr	r3, [r7, #4]
    eb9e:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    eba0:	68fb      	ldr	r3, [r7, #12]
    eba2:	7b1b      	ldrb	r3, [r3, #12]
    eba4:	2b00      	cmp	r3, #0
    eba6:	d001      	beq.n	ebac <n25q256a_switch_mode+0x1c>
    eba8:	2306      	movs	r3, #6
    ebaa:	e000      	b.n	ebae <n25q256a_switch_mode+0x1e>
    ebac:	2300      	movs	r3, #0
    ebae:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    ebb0:	7afb      	ldrb	r3, [r7, #11]
    ebb2:	2265      	movs	r2, #101	; 0x65
    ebb4:	4619      	mov	r1, r3
    ebb6:	6878      	ldr	r0, [r7, #4]
    ebb8:	4b25      	ldr	r3, [pc, #148]	; (ec50 <n25q256a_switch_mode+0xc0>)
    ebba:	4798      	blx	r3
    ebbc:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    ebbe:	2300      	movs	r3, #0
    ebc0:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    ebc2:	68fb      	ldr	r3, [r7, #12]
    ebc4:	7b1b      	ldrb	r3, [r3, #12]
    ebc6:	78fa      	ldrb	r2, [r7, #3]
    ebc8:	429a      	cmp	r2, r3
    ebca:	d03d      	beq.n	ec48 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    ebcc:	78fb      	ldrb	r3, [r7, #3]
    ebce:	2b00      	cmp	r3, #0
    ebd0:	d00b      	beq.n	ebea <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    ebd2:	697b      	ldr	r3, [r7, #20]
    ebd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ebd8:	2b00      	cmp	r3, #0
    ebda:	d011      	beq.n	ec00 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    ebdc:	697b      	ldr	r3, [r7, #20]
    ebde:	f003 031f 	and.w	r3, r3, #31
    ebe2:	617b      	str	r3, [r7, #20]
			modify = 1;
    ebe4:	2301      	movs	r3, #1
    ebe6:	74fb      	strb	r3, [r7, #19]
    ebe8:	e00a      	b.n	ec00 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    ebea:	697b      	ldr	r3, [r7, #20]
    ebec:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ebf0:	2b00      	cmp	r3, #0
    ebf2:	d105      	bne.n	ec00 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    ebf4:	697b      	ldr	r3, [r7, #20]
    ebf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    ebfa:	617b      	str	r3, [r7, #20]
			modify = 1;
    ebfc:	2301      	movs	r3, #1
    ebfe:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    ec00:	7cfb      	ldrb	r3, [r7, #19]
    ec02:	2b00      	cmp	r3, #0
    ec04:	d021      	beq.n	ec4a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    ec06:	68fb      	ldr	r3, [r7, #12]
    ec08:	78fa      	ldrb	r2, [r7, #3]
    ec0a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    ec0c:	7afb      	ldrb	r3, [r7, #11]
    ec0e:	2201      	movs	r2, #1
    ec10:	4619      	mov	r1, r3
    ec12:	6878      	ldr	r0, [r7, #4]
    ec14:	4b0f      	ldr	r3, [pc, #60]	; (ec54 <n25q256a_switch_mode+0xc4>)
    ec16:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    ec18:	7af9      	ldrb	r1, [r7, #11]
    ec1a:	697b      	ldr	r3, [r7, #20]
    ec1c:	2261      	movs	r2, #97	; 0x61
    ec1e:	6878      	ldr	r0, [r7, #4]
    ec20:	4c0d      	ldr	r4, [pc, #52]	; (ec58 <n25q256a_switch_mode+0xc8>)
    ec22:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ec24:	78fb      	ldrb	r3, [r7, #3]
    ec26:	2b00      	cmp	r3, #0
    ec28:	d001      	beq.n	ec2e <n25q256a_switch_mode+0x9e>
    ec2a:	2306      	movs	r3, #6
    ec2c:	e000      	b.n	ec30 <n25q256a_switch_mode+0xa0>
    ec2e:	2300      	movs	r3, #0
    ec30:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    ec32:	7afb      	ldrb	r3, [r7, #11]
    ec34:	2265      	movs	r2, #101	; 0x65
    ec36:	4619      	mov	r1, r3
    ec38:	6878      	ldr	r0, [r7, #4]
    ec3a:	4b05      	ldr	r3, [pc, #20]	; (ec50 <n25q256a_switch_mode+0xc0>)
    ec3c:	4798      	blx	r3
    ec3e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    ec40:	68fb      	ldr	r3, [r7, #12]
    ec42:	78fa      	ldrb	r2, [r7, #3]
    ec44:	731a      	strb	r2, [r3, #12]
    ec46:	e000      	b.n	ec4a <n25q256a_switch_mode+0xba>
		return;
    ec48:	bf00      	nop
	}
}
    ec4a:	371c      	adds	r7, #28
    ec4c:	46bd      	mov	sp, r7
    ec4e:	bd90      	pop	{r4, r7, pc}
    ec50:	0000e985 	.word	0x0000e985
    ec54:	0000eac1 	.word	0x0000eac1
    ec58:	0000ea21 	.word	0x0000ea21

0000ec5c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    ec5c:	b580      	push	{r7, lr}
    ec5e:	b086      	sub	sp, #24
    ec60:	af00      	add	r7, sp, #0
    ec62:	60f8      	str	r0, [r7, #12]
    ec64:	60b9      	str	r1, [r7, #8]
    ec66:	607a      	str	r2, [r7, #4]
    ec68:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    ec6a:	68fb      	ldr	r3, [r7, #12]
    ec6c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    ec6e:	4a0c      	ldr	r2, [pc, #48]	; (eca0 <n25q256a_construct+0x44>)
    ec70:	68b9      	ldr	r1, [r7, #8]
    ec72:	68f8      	ldr	r0, [r7, #12]
    ec74:	4b0b      	ldr	r3, [pc, #44]	; (eca4 <n25q256a_construct+0x48>)
    ec76:	4798      	blx	r3
	n25q->quad_mode    = 0;
    ec78:	697b      	ldr	r3, [r7, #20]
    ec7a:	2200      	movs	r2, #0
    ec7c:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    ec7e:	697b      	ldr	r3, [r7, #20]
    ec80:	2200      	movs	r2, #0
    ec82:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    ec84:	697b      	ldr	r3, [r7, #20]
    ec86:	687a      	ldr	r2, [r7, #4]
    ec88:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    ec8a:	78fb      	ldrb	r3, [r7, #3]
    ec8c:	4619      	mov	r1, r3
    ec8e:	68f8      	ldr	r0, [r7, #12]
    ec90:	4b05      	ldr	r3, [pc, #20]	; (eca8 <n25q256a_construct+0x4c>)
    ec92:	4798      	blx	r3
	return me;
    ec94:	68fb      	ldr	r3, [r7, #12]
}
    ec96:	4618      	mov	r0, r3
    ec98:	3718      	adds	r7, #24
    ec9a:	46bd      	mov	sp, r7
    ec9c:	bd80      	pop	{r7, pc}
    ec9e:	bf00      	nop
    eca0:	00018760 	.word	0x00018760
    eca4:	0000f139 	.word	0x0000f139
    eca8:	0000eb91 	.word	0x0000eb91

0000ecac <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ecac:	b580      	push	{r7, lr}
    ecae:	b08c      	sub	sp, #48	; 0x30
    ecb0:	af00      	add	r7, sp, #0
    ecb2:	60f8      	str	r0, [r7, #12]
    ecb4:	60b9      	str	r1, [r7, #8]
    ecb6:	607a      	str	r2, [r7, #4]
    ecb8:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ecba:	68fb      	ldr	r3, [r7, #12]
    ecbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ecbe:	68fb      	ldr	r3, [r7, #12]
    ecc0:	681b      	ldr	r3, [r3, #0]
    ecc2:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    ecc4:	f107 0310 	add.w	r3, r7, #16
    ecc8:	2200      	movs	r2, #0
    ecca:	601a      	str	r2, [r3, #0]
    eccc:	605a      	str	r2, [r3, #4]
    ecce:	609a      	str	r2, [r3, #8]
    ecd0:	60da      	str	r2, [r3, #12]
    ecd2:	611a      	str	r2, [r3, #16]
    ecd4:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ecd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ecd8:	7b1b      	ldrb	r3, [r3, #12]
    ecda:	2b00      	cmp	r3, #0
    ecdc:	d001      	beq.n	ece2 <n25q256a_read+0x36>
    ecde:	2206      	movs	r2, #6
    ece0:	e000      	b.n	ece4 <n25q256a_read+0x38>
    ece2:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    ece4:	7c3b      	ldrb	r3, [r7, #16]
    ece6:	f362 0302 	bfi	r3, r2, #0, #3
    ecea:	743b      	strb	r3, [r7, #16]
    ecec:	7c3b      	ldrb	r3, [r7, #16]
    ecee:	f043 0310 	orr.w	r3, r3, #16
    ecf2:	743b      	strb	r3, [r7, #16]
    ecf4:	7c3b      	ldrb	r3, [r7, #16]
    ecf6:	f043 0320 	orr.w	r3, r3, #32
    ecfa:	743b      	strb	r3, [r7, #16]
    ecfc:	7c3b      	ldrb	r3, [r7, #16]
    ecfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ed02:	743b      	strb	r3, [r7, #16]
    ed04:	7c7b      	ldrb	r3, [r7, #17]
    ed06:	2201      	movs	r2, #1
    ed08:	f362 1305 	bfi	r3, r2, #4, #2
    ed0c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    ed0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed10:	7b1b      	ldrb	r3, [r3, #12]
    ed12:	2b00      	cmp	r3, #0
    ed14:	d001      	beq.n	ed1a <n25q256a_read+0x6e>
    ed16:	220a      	movs	r2, #10
    ed18:	e000      	b.n	ed1c <n25q256a_read+0x70>
    ed1a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    ed1c:	7cbb      	ldrb	r3, [r7, #18]
    ed1e:	f362 0304 	bfi	r3, r2, #0, #5
    ed22:	74bb      	strb	r3, [r7, #18]
    ed24:	230b      	movs	r3, #11
    ed26:	753b      	strb	r3, [r7, #20]
    ed28:	687b      	ldr	r3, [r7, #4]
    ed2a:	61bb      	str	r3, [r7, #24]
    ed2c:	683b      	ldr	r3, [r7, #0]
    ed2e:	61fb      	str	r3, [r7, #28]
    ed30:	68bb      	ldr	r3, [r7, #8]
    ed32:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    ed34:	f107 0310 	add.w	r3, r7, #16
    ed38:	4619      	mov	r1, r3
    ed3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ed3c:	4b03      	ldr	r3, [pc, #12]	; (ed4c <n25q256a_read+0xa0>)
    ed3e:	4798      	blx	r3
	return ERR_NONE;
    ed40:	2300      	movs	r3, #0
}
    ed42:	4618      	mov	r0, r3
    ed44:	3730      	adds	r7, #48	; 0x30
    ed46:	46bd      	mov	sp, r7
    ed48:	bd80      	pop	{r7, pc}
    ed4a:	bf00      	nop
    ed4c:	00005179 	.word	0x00005179

0000ed50 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ed50:	b580      	push	{r7, lr}
    ed52:	b08c      	sub	sp, #48	; 0x30
    ed54:	af00      	add	r7, sp, #0
    ed56:	60f8      	str	r0, [r7, #12]
    ed58:	60b9      	str	r1, [r7, #8]
    ed5a:	607a      	str	r2, [r7, #4]
    ed5c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ed5e:	68fb      	ldr	r3, [r7, #12]
    ed60:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ed62:	68fb      	ldr	r3, [r7, #12]
    ed64:	681b      	ldr	r3, [r3, #0]
    ed66:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ed68:	f107 0310 	add.w	r3, r7, #16
    ed6c:	2200      	movs	r2, #0
    ed6e:	601a      	str	r2, [r3, #0]
    ed70:	605a      	str	r2, [r3, #4]
    ed72:	609a      	str	r2, [r3, #8]
    ed74:	60da      	str	r2, [r3, #12]
    ed76:	611a      	str	r2, [r3, #16]
    ed78:	615a      	str	r2, [r3, #20]
    ed7a:	7c3b      	ldrb	r3, [r7, #16]
    ed7c:	f043 0310 	orr.w	r3, r3, #16
    ed80:	743b      	strb	r3, [r7, #16]
    ed82:	7c3b      	ldrb	r3, [r7, #16]
    ed84:	f043 0320 	orr.w	r3, r3, #32
    ed88:	743b      	strb	r3, [r7, #16]
    ed8a:	7c3b      	ldrb	r3, [r7, #16]
    ed8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ed90:	743b      	strb	r3, [r7, #16]
    ed92:	7c7b      	ldrb	r3, [r7, #17]
    ed94:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ed98:	747b      	strb	r3, [r7, #17]
    ed9a:	2302      	movs	r3, #2
    ed9c:	753b      	strb	r3, [r7, #20]
    ed9e:	687b      	ldr	r3, [r7, #4]
    eda0:	61bb      	str	r3, [r7, #24]
    eda2:	683b      	ldr	r3, [r7, #0]
    eda4:	61fb      	str	r3, [r7, #28]
    eda6:	68bb      	ldr	r3, [r7, #8]
    eda8:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    edaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    edac:	7b1b      	ldrb	r3, [r3, #12]
    edae:	2b00      	cmp	r3, #0
    edb0:	d001      	beq.n	edb6 <n25q256a_write+0x66>
    edb2:	2206      	movs	r2, #6
    edb4:	e000      	b.n	edb8 <n25q256a_write+0x68>
    edb6:	2200      	movs	r2, #0
    edb8:	7c3b      	ldrb	r3, [r7, #16]
    edba:	f362 0302 	bfi	r3, r2, #0, #3
    edbe:	743b      	strb	r3, [r7, #16]
	while (length) {
    edc0:	e035      	b.n	ee2e <n25q256a_write+0xde>
		cmd.address = address;
    edc2:	687b      	ldr	r3, [r7, #4]
    edc4:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    edc6:	683b      	ldr	r3, [r7, #0]
    edc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    edcc:	d802      	bhi.n	edd4 <n25q256a_write+0x84>
			cmd.buf_len = length;
    edce:	683b      	ldr	r3, [r7, #0]
    edd0:	61fb      	str	r3, [r7, #28]
    edd2:	e002      	b.n	edda <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    edd4:	f44f 7380 	mov.w	r3, #256	; 0x100
    edd8:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    edda:	7c3b      	ldrb	r3, [r7, #16]
    eddc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ede0:	b2db      	uxtb	r3, r3
    ede2:	2201      	movs	r2, #1
    ede4:	4619      	mov	r1, r3
    ede6:	68f8      	ldr	r0, [r7, #12]
    ede8:	4b19      	ldr	r3, [pc, #100]	; (ee50 <n25q256a_write+0x100>)
    edea:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    edec:	f107 0310 	add.w	r3, r7, #16
    edf0:	4619      	mov	r1, r3
    edf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    edf4:	4b17      	ldr	r3, [pc, #92]	; (ee54 <n25q256a_write+0x104>)
    edf6:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    edf8:	bf00      	nop
    edfa:	7c3b      	ldrb	r3, [r7, #16]
    edfc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ee00:	b2db      	uxtb	r3, r3
    ee02:	2270      	movs	r2, #112	; 0x70
    ee04:	4619      	mov	r1, r3
    ee06:	68f8      	ldr	r0, [r7, #12]
    ee08:	4b13      	ldr	r3, [pc, #76]	; (ee58 <n25q256a_write+0x108>)
    ee0a:	4798      	blx	r3
    ee0c:	4603      	mov	r3, r0
    ee0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ee12:	2b00      	cmp	r3, #0
    ee14:	d0f1      	beq.n	edfa <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    ee16:	6a3a      	ldr	r2, [r7, #32]
    ee18:	69fb      	ldr	r3, [r7, #28]
    ee1a:	4413      	add	r3, r2
    ee1c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    ee1e:	69fb      	ldr	r3, [r7, #28]
    ee20:	683a      	ldr	r2, [r7, #0]
    ee22:	1ad3      	subs	r3, r2, r3
    ee24:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    ee26:	69fb      	ldr	r3, [r7, #28]
    ee28:	687a      	ldr	r2, [r7, #4]
    ee2a:	4413      	add	r3, r2
    ee2c:	607b      	str	r3, [r7, #4]
	while (length) {
    ee2e:	683b      	ldr	r3, [r7, #0]
    ee30:	2b00      	cmp	r3, #0
    ee32:	d1c6      	bne.n	edc2 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    ee34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ee36:	7b5b      	ldrb	r3, [r3, #13]
    ee38:	2b00      	cmp	r3, #0
    ee3a:	d003      	beq.n	ee44 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    ee3c:	2101      	movs	r1, #1
    ee3e:	68f8      	ldr	r0, [r7, #12]
    ee40:	4b06      	ldr	r3, [pc, #24]	; (ee5c <n25q256a_write+0x10c>)
    ee42:	4798      	blx	r3
	}
	return ERR_NONE;
    ee44:	2300      	movs	r3, #0
}
    ee46:	4618      	mov	r0, r3
    ee48:	3730      	adds	r7, #48	; 0x30
    ee4a:	46bd      	mov	sp, r7
    ee4c:	bd80      	pop	{r7, pc}
    ee4e:	bf00      	nop
    ee50:	0000eac1 	.word	0x0000eac1
    ee54:	00005179 	.word	0x00005179
    ee58:	0000e985 	.word	0x0000e985
    ee5c:	0000e8b9 	.word	0x0000e8b9

0000ee60 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    ee60:	b580      	push	{r7, lr}
    ee62:	b090      	sub	sp, #64	; 0x40
    ee64:	af00      	add	r7, sp, #0
    ee66:	60f8      	str	r0, [r7, #12]
    ee68:	60b9      	str	r1, [r7, #8]
    ee6a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ee6c:	68fb      	ldr	r3, [r7, #12]
    ee6e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ee70:	68fb      	ldr	r3, [r7, #12]
    ee72:	681b      	ldr	r3, [r3, #0]
    ee74:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    ee76:	f107 0314 	add.w	r3, r7, #20
    ee7a:	2200      	movs	r2, #0
    ee7c:	601a      	str	r2, [r3, #0]
    ee7e:	605a      	str	r2, [r3, #4]
    ee80:	609a      	str	r2, [r3, #8]
    ee82:	60da      	str	r2, [r3, #12]
    ee84:	611a      	str	r2, [r3, #16]
    ee86:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ee88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ee8a:	7b1b      	ldrb	r3, [r3, #12]
    ee8c:	2b00      	cmp	r3, #0
    ee8e:	d001      	beq.n	ee94 <n25q256a_erase+0x34>
    ee90:	2206      	movs	r2, #6
    ee92:	e000      	b.n	ee96 <n25q256a_erase+0x36>
    ee94:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    ee96:	7d3b      	ldrb	r3, [r7, #20]
    ee98:	f362 0302 	bfi	r3, r2, #0, #3
    ee9c:	753b      	strb	r3, [r7, #20]
    ee9e:	7d3b      	ldrb	r3, [r7, #20]
    eea0:	f043 0310 	orr.w	r3, r3, #16
    eea4:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    eea6:	687b      	ldr	r3, [r7, #4]
    eea8:	4a56      	ldr	r2, [pc, #344]	; (f004 <n25q256a_erase+0x1a4>)
    eeaa:	4293      	cmp	r3, r2
    eeac:	bf94      	ite	ls
    eeae:	2301      	movls	r3, #1
    eeb0:	2300      	movhi	r3, #0
    eeb2:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    eeb4:	7d3b      	ldrb	r3, [r7, #20]
    eeb6:	f362 1345 	bfi	r3, r2, #5, #1
    eeba:	753b      	strb	r3, [r7, #20]
    eebc:	7d7b      	ldrb	r3, [r7, #21]
    eebe:	2202      	movs	r2, #2
    eec0:	f362 1305 	bfi	r3, r2, #4, #2
    eec4:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    eec6:	68bb      	ldr	r3, [r7, #8]
    eec8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    eeca:	687b      	ldr	r3, [r7, #4]
    eecc:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    eece:	2300      	movs	r3, #0
    eed0:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    eed2:	687b      	ldr	r3, [r7, #4]
    eed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    eed8:	2b00      	cmp	r3, #0
    eeda:	d104      	bne.n	eee6 <n25q256a_erase+0x86>
    eedc:	68bb      	ldr	r3, [r7, #8]
    eede:	f3c3 030b 	ubfx	r3, r3, #0, #12
    eee2:	2b00      	cmp	r3, #0
    eee4:	d002      	beq.n	eeec <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    eee6:	f06f 030c 	mvn.w	r3, #12
    eeea:	e087      	b.n	effc <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    eeec:	687b      	ldr	r3, [r7, #4]
    eeee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    eef2:	d368      	bcc.n	efc6 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    eef4:	23c7      	movs	r3, #199	; 0xc7
    eef6:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    eef8:	7d3b      	ldrb	r3, [r7, #20]
    eefa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    eefe:	b2db      	uxtb	r3, r3
    ef00:	2201      	movs	r2, #1
    ef02:	4619      	mov	r1, r3
    ef04:	68f8      	ldr	r0, [r7, #12]
    ef06:	4b40      	ldr	r3, [pc, #256]	; (f008 <n25q256a_erase+0x1a8>)
    ef08:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    ef0a:	f107 0314 	add.w	r3, r7, #20
    ef0e:	4619      	mov	r1, r3
    ef10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ef12:	4b3e      	ldr	r3, [pc, #248]	; (f00c <n25q256a_erase+0x1ac>)
    ef14:	4798      	blx	r3
    ef16:	e059      	b.n	efcc <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    ef18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ef1a:	b29b      	uxth	r3, r3
    ef1c:	2b00      	cmp	r3, #0
    ef1e:	d11f      	bne.n	ef60 <n25q256a_erase+0x100>
    ef20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ef22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ef26:	d31b      	bcc.n	ef60 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    ef28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ef2a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    ef2c:	23d8      	movs	r3, #216	; 0xd8
    ef2e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ef30:	7d3b      	ldrb	r3, [r7, #20]
    ef32:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ef36:	b2db      	uxtb	r3, r3
    ef38:	2201      	movs	r2, #1
    ef3a:	4619      	mov	r1, r3
    ef3c:	68f8      	ldr	r0, [r7, #12]
    ef3e:	4b32      	ldr	r3, [pc, #200]	; (f008 <n25q256a_erase+0x1a8>)
    ef40:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ef42:	f107 0314 	add.w	r3, r7, #20
    ef46:	4619      	mov	r1, r3
    ef48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ef4a:	4b30      	ldr	r3, [pc, #192]	; (f00c <n25q256a_erase+0x1ac>)
    ef4c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    ef4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ef50:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ef54:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    ef56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ef58:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    ef5c:	63bb      	str	r3, [r7, #56]	; 0x38
    ef5e:	e023      	b.n	efa8 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    ef60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ef62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    ef66:	d31b      	bcc.n	efa0 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    ef68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ef6a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    ef6c:	2320      	movs	r3, #32
    ef6e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ef70:	7d3b      	ldrb	r3, [r7, #20]
    ef72:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ef76:	b2db      	uxtb	r3, r3
    ef78:	2201      	movs	r2, #1
    ef7a:	4619      	mov	r1, r3
    ef7c:	68f8      	ldr	r0, [r7, #12]
    ef7e:	4b22      	ldr	r3, [pc, #136]	; (f008 <n25q256a_erase+0x1a8>)
    ef80:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ef82:	f107 0314 	add.w	r3, r7, #20
    ef86:	4619      	mov	r1, r3
    ef88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ef8a:	4b20      	ldr	r3, [pc, #128]	; (f00c <n25q256a_erase+0x1ac>)
    ef8c:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    ef8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ef90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    ef94:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    ef96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ef98:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    ef9c:	63bb      	str	r3, [r7, #56]	; 0x38
    ef9e:	e003      	b.n	efa8 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    efa0:	f06f 030c 	mvn.w	r3, #12
    efa4:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    efa6:	e011      	b.n	efcc <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    efa8:	bf00      	nop
    efaa:	7d3b      	ldrb	r3, [r7, #20]
    efac:	f3c3 0302 	ubfx	r3, r3, #0, #3
    efb0:	b2db      	uxtb	r3, r3
    efb2:	2270      	movs	r2, #112	; 0x70
    efb4:	4619      	mov	r1, r3
    efb6:	68f8      	ldr	r0, [r7, #12]
    efb8:	4b15      	ldr	r3, [pc, #84]	; (f010 <n25q256a_erase+0x1b0>)
    efba:	4798      	blx	r3
    efbc:	4603      	mov	r3, r0
    efbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    efc2:	2b00      	cmp	r3, #0
    efc4:	d0f1      	beq.n	efaa <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    efc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    efc8:	2b00      	cmp	r3, #0
    efca:	d1a5      	bne.n	ef18 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    efcc:	bf00      	nop
    efce:	7d3b      	ldrb	r3, [r7, #20]
    efd0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    efd4:	b2db      	uxtb	r3, r3
    efd6:	2270      	movs	r2, #112	; 0x70
    efd8:	4619      	mov	r1, r3
    efda:	68f8      	ldr	r0, [r7, #12]
    efdc:	4b0c      	ldr	r3, [pc, #48]	; (f010 <n25q256a_erase+0x1b0>)
    efde:	4798      	blx	r3
    efe0:	4603      	mov	r3, r0
    efe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    efe6:	2b00      	cmp	r3, #0
    efe8:	d0f1      	beq.n	efce <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    efea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    efec:	7b5b      	ldrb	r3, [r3, #13]
    efee:	2b00      	cmp	r3, #0
    eff0:	d003      	beq.n	effa <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    eff2:	2101      	movs	r1, #1
    eff4:	68f8      	ldr	r0, [r7, #12]
    eff6:	4b07      	ldr	r3, [pc, #28]	; (f014 <n25q256a_erase+0x1b4>)
    eff8:	4798      	blx	r3
	}
	return rc;
    effa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    effc:	4618      	mov	r0, r3
    effe:	3740      	adds	r7, #64	; 0x40
    f000:	46bd      	mov	sp, r7
    f002:	bd80      	pop	{r7, pc}
    f004:	001fffff 	.word	0x001fffff
    f008:	0000eac1 	.word	0x0000eac1
    f00c:	00005179 	.word	0x00005179
    f010:	0000e985 	.word	0x0000e985
    f014:	0000e8b9 	.word	0x0000e8b9

0000f018 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    f018:	b590      	push	{r4, r7, lr}
    f01a:	b085      	sub	sp, #20
    f01c:	af00      	add	r7, sp, #0
    f01e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    f020:	687b      	ldr	r3, [r7, #4]
    f022:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    f024:	68fb      	ldr	r3, [r7, #12]
    f026:	7b1b      	ldrb	r3, [r3, #12]
    f028:	2b00      	cmp	r3, #0
    f02a:	d001      	beq.n	f030 <n25q256a_enable_xip+0x18>
    f02c:	2306      	movs	r3, #6
    f02e:	e000      	b.n	f032 <n25q256a_enable_xip+0x1a>
    f030:	2300      	movs	r3, #0
    f032:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    f034:	68fb      	ldr	r3, [r7, #12]
    f036:	7b5b      	ldrb	r3, [r3, #13]
    f038:	2b00      	cmp	r3, #0
    f03a:	d129      	bne.n	f090 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    f03c:	7afb      	ldrb	r3, [r7, #11]
    f03e:	2285      	movs	r2, #133	; 0x85
    f040:	4619      	mov	r1, r3
    f042:	6878      	ldr	r0, [r7, #4]
    f044:	4b15      	ldr	r3, [pc, #84]	; (f09c <n25q256a_enable_xip+0x84>)
    f046:	4798      	blx	r3
    f048:	4603      	mov	r3, r0
    f04a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    f04c:	7abb      	ldrb	r3, [r7, #10]
    f04e:	f003 0308 	and.w	r3, r3, #8
    f052:	2b00      	cmp	r3, #0
    f054:	d015      	beq.n	f082 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    f056:	7abb      	ldrb	r3, [r7, #10]
    f058:	f023 0308 	bic.w	r3, r3, #8
    f05c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    f05e:	7abb      	ldrb	r3, [r7, #10]
    f060:	7af9      	ldrb	r1, [r7, #11]
    f062:	2281      	movs	r2, #129	; 0x81
    f064:	6878      	ldr	r0, [r7, #4]
    f066:	4c0e      	ldr	r4, [pc, #56]	; (f0a0 <n25q256a_enable_xip+0x88>)
    f068:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    f06a:	bf00      	nop
    f06c:	7afb      	ldrb	r3, [r7, #11]
    f06e:	2270      	movs	r2, #112	; 0x70
    f070:	4619      	mov	r1, r3
    f072:	6878      	ldr	r0, [r7, #4]
    f074:	4b09      	ldr	r3, [pc, #36]	; (f09c <n25q256a_enable_xip+0x84>)
    f076:	4798      	blx	r3
    f078:	4603      	mov	r3, r0
    f07a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f07e:	2b00      	cmp	r3, #0
    f080:	d0f4      	beq.n	f06c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    f082:	68fb      	ldr	r3, [r7, #12]
    f084:	2201      	movs	r2, #1
    f086:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    f088:	2101      	movs	r1, #1
    f08a:	6878      	ldr	r0, [r7, #4]
    f08c:	4b05      	ldr	r3, [pc, #20]	; (f0a4 <n25q256a_enable_xip+0x8c>)
    f08e:	4798      	blx	r3
	}
	return ERR_NONE;
    f090:	2300      	movs	r3, #0
}
    f092:	4618      	mov	r0, r3
    f094:	3714      	adds	r7, #20
    f096:	46bd      	mov	sp, r7
    f098:	bd90      	pop	{r4, r7, pc}
    f09a:	bf00      	nop
    f09c:	0000e985 	.word	0x0000e985
    f0a0:	0000ea21 	.word	0x0000ea21
    f0a4:	0000e8b9 	.word	0x0000e8b9

0000f0a8 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    f0a8:	b580      	push	{r7, lr}
    f0aa:	b086      	sub	sp, #24
    f0ac:	af00      	add	r7, sp, #0
    f0ae:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f0b0:	687b      	ldr	r3, [r7, #4]
    f0b2:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f0b4:	687b      	ldr	r3, [r7, #4]
    f0b6:	681b      	ldr	r3, [r3, #0]
    f0b8:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    f0ba:	697b      	ldr	r3, [r7, #20]
    f0bc:	7b1b      	ldrb	r3, [r3, #12]
    f0be:	2b00      	cmp	r3, #0
    f0c0:	d001      	beq.n	f0c6 <n25q256a_disable_xip+0x1e>
    f0c2:	2306      	movs	r3, #6
    f0c4:	e000      	b.n	f0c8 <n25q256a_disable_xip+0x20>
    f0c6:	2300      	movs	r3, #0
    f0c8:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    f0ca:	2100      	movs	r1, #0
    f0cc:	6878      	ldr	r0, [r7, #4]
    f0ce:	4b15      	ldr	r3, [pc, #84]	; (f124 <n25q256a_disable_xip+0x7c>)
    f0d0:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    f0d2:	7bfb      	ldrb	r3, [r7, #15]
    f0d4:	2285      	movs	r2, #133	; 0x85
    f0d6:	4619      	mov	r1, r3
    f0d8:	6878      	ldr	r0, [r7, #4]
    f0da:	4b13      	ldr	r3, [pc, #76]	; (f128 <n25q256a_disable_xip+0x80>)
    f0dc:	4798      	blx	r3
    f0de:	4603      	mov	r3, r0
    f0e0:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    f0e2:	7bbb      	ldrb	r3, [r7, #14]
    f0e4:	f003 0308 	and.w	r3, r3, #8
    f0e8:	2b00      	cmp	r3, #0
    f0ea:	d113      	bne.n	f114 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    f0ec:	697b      	ldr	r3, [r7, #20]
    f0ee:	689b      	ldr	r3, [r3, #8]
    f0f0:	2b00      	cmp	r3, #0
    f0f2:	d00f      	beq.n	f114 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    f0f4:	693b      	ldr	r3, [r7, #16]
    f0f6:	681b      	ldr	r3, [r3, #0]
    f0f8:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    f0fa:	6938      	ldr	r0, [r7, #16]
    f0fc:	4b0b      	ldr	r3, [pc, #44]	; (f12c <n25q256a_disable_xip+0x84>)
    f0fe:	4798      	blx	r3
			n25q->pin_exit_xip();
    f100:	697b      	ldr	r3, [r7, #20]
    f102:	689b      	ldr	r3, [r3, #8]
    f104:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    f106:	68b9      	ldr	r1, [r7, #8]
    f108:	6938      	ldr	r0, [r7, #16]
    f10a:	4b09      	ldr	r3, [pc, #36]	; (f130 <n25q256a_disable_xip+0x88>)
    f10c:	4798      	blx	r3
			qspi_sync_enable(descr);
    f10e:	6938      	ldr	r0, [r7, #16]
    f110:	4b08      	ldr	r3, [pc, #32]	; (f134 <n25q256a_disable_xip+0x8c>)
    f112:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    f114:	697b      	ldr	r3, [r7, #20]
    f116:	2200      	movs	r2, #0
    f118:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    f11a:	2300      	movs	r3, #0
}
    f11c:	4618      	mov	r0, r3
    f11e:	3718      	adds	r7, #24
    f120:	46bd      	mov	sp, r7
    f122:	bd80      	pop	{r7, pc}
    f124:	0000e8b9 	.word	0x0000e8b9
    f128:	0000e985 	.word	0x0000e985
    f12c:	0000513d 	.word	0x0000513d
    f130:	000050b5 	.word	0x000050b5
    f134:	00005101 	.word	0x00005101

0000f138 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    f138:	b480      	push	{r7}
    f13a:	b085      	sub	sp, #20
    f13c:	af00      	add	r7, sp, #0
    f13e:	60f8      	str	r0, [r7, #12]
    f140:	60b9      	str	r1, [r7, #8]
    f142:	607a      	str	r2, [r7, #4]
	me->io        = io;
    f144:	68fb      	ldr	r3, [r7, #12]
    f146:	68ba      	ldr	r2, [r7, #8]
    f148:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    f14a:	68fb      	ldr	r3, [r7, #12]
    f14c:	687a      	ldr	r2, [r7, #4]
    f14e:	605a      	str	r2, [r3, #4]

	return me;
    f150:	68fb      	ldr	r3, [r7, #12]
}
    f152:	4618      	mov	r0, r3
    f154:	3714      	adds	r7, #20
    f156:	46bd      	mov	sp, r7
    f158:	f85d 7b04 	ldr.w	r7, [sp], #4
    f15c:	4770      	bx	lr

0000f15e <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    f15e:	b480      	push	{r7}
    f160:	b083      	sub	sp, #12
    f162:	af00      	add	r7, sp, #0
    f164:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    f166:	687b      	ldr	r3, [r7, #4]
    f168:	781b      	ldrb	r3, [r3, #0]
    f16a:	b29a      	uxth	r2, r3
    f16c:	687b      	ldr	r3, [r7, #4]
    f16e:	3301      	adds	r3, #1
    f170:	781b      	ldrb	r3, [r3, #0]
    f172:	b29b      	uxth	r3, r3
    f174:	021b      	lsls	r3, r3, #8
    f176:	b29b      	uxth	r3, r3
    f178:	4413      	add	r3, r2
    f17a:	b29b      	uxth	r3, r3
}
    f17c:	4618      	mov	r0, r3
    f17e:	370c      	adds	r7, #12
    f180:	46bd      	mov	sp, r7
    f182:	f85d 7b04 	ldr.w	r7, [sp], #4
    f186:	4770      	bx	lr

0000f188 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    f188:	b480      	push	{r7}
    f18a:	b083      	sub	sp, #12
    f18c:	af00      	add	r7, sp, #0
    f18e:	6078      	str	r0, [r7, #4]
	return desc[0];
    f190:	687b      	ldr	r3, [r7, #4]
    f192:	781b      	ldrb	r3, [r3, #0]
}
    f194:	4618      	mov	r0, r3
    f196:	370c      	adds	r7, #12
    f198:	46bd      	mov	sp, r7
    f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
    f19e:	4770      	bx	lr

0000f1a0 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    f1a0:	b580      	push	{r7, lr}
    f1a2:	b082      	sub	sp, #8
    f1a4:	af00      	add	r7, sp, #0
    f1a6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    f1a8:	6878      	ldr	r0, [r7, #4]
    f1aa:	4b05      	ldr	r3, [pc, #20]	; (f1c0 <usb_desc_next+0x20>)
    f1ac:	4798      	blx	r3
    f1ae:	4603      	mov	r3, r0
    f1b0:	461a      	mov	r2, r3
    f1b2:	687b      	ldr	r3, [r7, #4]
    f1b4:	4413      	add	r3, r2
}
    f1b6:	4618      	mov	r0, r3
    f1b8:	3708      	adds	r7, #8
    f1ba:	46bd      	mov	sp, r7
    f1bc:	bd80      	pop	{r7, pc}
    f1be:	bf00      	nop
    f1c0:	0000f189 	.word	0x0000f189

0000f1c4 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    f1c4:	b580      	push	{r7, lr}
    f1c6:	b08c      	sub	sp, #48	; 0x30
    f1c8:	af00      	add	r7, sp, #0
    f1ca:	6078      	str	r0, [r7, #4]
    f1cc:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    f1ce:	687b      	ldr	r3, [r7, #4]
    f1d0:	689b      	ldr	r3, [r3, #8]
    f1d2:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    f1d4:	683b      	ldr	r3, [r7, #0]
    f1d6:	681b      	ldr	r3, [r3, #0]
    f1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    f1da:	2300      	movs	r3, #0
    f1dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f1e0:	e08f      	b.n	f302 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    f1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f1e4:	2b00      	cmp	r3, #0
    f1e6:	d102      	bne.n	f1ee <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    f1e8:	f06f 0309 	mvn.w	r3, #9
    f1ec:	e092      	b.n	f314 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    f1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f1f0:	789b      	ldrb	r3, [r3, #2]
    f1f2:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    f1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f1f6:	795b      	ldrb	r3, [r3, #5]
    f1f8:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    f1fa:	7c7b      	ldrb	r3, [r7, #17]
    f1fc:	2b02      	cmp	r3, #2
    f1fe:	d002      	beq.n	f206 <cdcdf_acm_enable+0x42>
    f200:	7c7b      	ldrb	r3, [r7, #17]
    f202:	2b0a      	cmp	r3, #10
    f204:	d121      	bne.n	f24a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    f206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f20a:	6a3a      	ldr	r2, [r7, #32]
    f20c:	5cd2      	ldrb	r2, [r2, r3]
    f20e:	7bbb      	ldrb	r3, [r7, #14]
    f210:	429a      	cmp	r2, r3
    f212:	d102      	bne.n	f21a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    f214:	f06f 0311 	mvn.w	r3, #17
    f218:	e07c      	b.n	f314 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    f21a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f21e:	6a3a      	ldr	r2, [r7, #32]
    f220:	5cd3      	ldrb	r3, [r2, r3]
    f222:	2bff      	cmp	r3, #255	; 0xff
    f224:	d002      	beq.n	f22c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    f226:	f06f 031b 	mvn.w	r3, #27
    f22a:	e073      	b.n	f314 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    f22c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f230:	7bb9      	ldrb	r1, [r7, #14]
    f232:	6a3a      	ldr	r2, [r7, #32]
    f234:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    f236:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    f238:	683b      	ldr	r3, [r7, #0]
    f23a:	685b      	ldr	r3, [r3, #4]
    f23c:	2205      	movs	r2, #5
    f23e:	4619      	mov	r1, r3
    f240:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    f242:	4b36      	ldr	r3, [pc, #216]	; (f31c <cdcdf_acm_enable+0x158>)
    f244:	4798      	blx	r3
    f246:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    f248:	e047      	b.n	f2da <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    f24a:	f06f 0309 	mvn.w	r3, #9
    f24e:	e061      	b.n	f314 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    f250:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f252:	789b      	ldrb	r3, [r3, #2]
    f254:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    f256:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f258:	78db      	ldrb	r3, [r3, #3]
    f25a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    f25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f25e:	3304      	adds	r3, #4
    f260:	4618      	mov	r0, r3
    f262:	4b2f      	ldr	r3, [pc, #188]	; (f320 <cdcdf_acm_enable+0x15c>)
    f264:	4798      	blx	r3
    f266:	4603      	mov	r3, r0
    f268:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    f26a:	7ebb      	ldrb	r3, [r7, #26]
    f26c:	7ef9      	ldrb	r1, [r7, #27]
    f26e:	8bba      	ldrh	r2, [r7, #28]
    f270:	4618      	mov	r0, r3
    f272:	4b2c      	ldr	r3, [pc, #176]	; (f324 <cdcdf_acm_enable+0x160>)
    f274:	4798      	blx	r3
    f276:	4603      	mov	r3, r0
    f278:	2b00      	cmp	r3, #0
    f27a:	d002      	beq.n	f282 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    f27c:	f06f 0313 	mvn.w	r3, #19
    f280:	e048      	b.n	f314 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    f282:	7ebb      	ldrb	r3, [r7, #26]
    f284:	b25b      	sxtb	r3, r3
    f286:	2b00      	cmp	r3, #0
    f288:	da0f      	bge.n	f2aa <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    f28a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f28e:	7eb9      	ldrb	r1, [r7, #26]
    f290:	6a3a      	ldr	r2, [r7, #32]
    f292:	4413      	add	r3, r2
    f294:	460a      	mov	r2, r1
    f296:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    f298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f29c:	6a3a      	ldr	r2, [r7, #32]
    f29e:	4413      	add	r3, r2
    f2a0:	789b      	ldrb	r3, [r3, #2]
    f2a2:	4618      	mov	r0, r3
    f2a4:	4b20      	ldr	r3, [pc, #128]	; (f328 <cdcdf_acm_enable+0x164>)
    f2a6:	4798      	blx	r3
    f2a8:	e007      	b.n	f2ba <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    f2aa:	7eba      	ldrb	r2, [r7, #26]
    f2ac:	6a3b      	ldr	r3, [r7, #32]
    f2ae:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    f2b0:	6a3b      	ldr	r3, [r7, #32]
    f2b2:	791b      	ldrb	r3, [r3, #4]
    f2b4:	4618      	mov	r0, r3
    f2b6:	4b1c      	ldr	r3, [pc, #112]	; (f328 <cdcdf_acm_enable+0x164>)
    f2b8:	4798      	blx	r3
			}
			desc->sod = ep;
    f2ba:	683b      	ldr	r3, [r7, #0]
    f2bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f2be:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    f2c0:	683b      	ldr	r3, [r7, #0]
    f2c2:	681b      	ldr	r3, [r3, #0]
    f2c4:	4618      	mov	r0, r3
    f2c6:	4b19      	ldr	r3, [pc, #100]	; (f32c <cdcdf_acm_enable+0x168>)
    f2c8:	4798      	blx	r3
    f2ca:	4602      	mov	r2, r0
    f2cc:	683b      	ldr	r3, [r7, #0]
    f2ce:	685b      	ldr	r3, [r3, #4]
    f2d0:	4619      	mov	r1, r3
    f2d2:	4610      	mov	r0, r2
    f2d4:	4b16      	ldr	r3, [pc, #88]	; (f330 <cdcdf_acm_enable+0x16c>)
    f2d6:	4798      	blx	r3
    f2d8:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    f2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f2dc:	2b00      	cmp	r3, #0
    f2de:	d1b7      	bne.n	f250 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    f2e0:	683b      	ldr	r3, [r7, #0]
    f2e2:	681b      	ldr	r3, [r3, #0]
    f2e4:	4618      	mov	r0, r3
    f2e6:	4b11      	ldr	r3, [pc, #68]	; (f32c <cdcdf_acm_enable+0x168>)
    f2e8:	4798      	blx	r3
    f2ea:	683b      	ldr	r3, [r7, #0]
    f2ec:	685b      	ldr	r3, [r3, #4]
    f2ee:	2204      	movs	r2, #4
    f2f0:	4619      	mov	r1, r3
    f2f2:	4b0a      	ldr	r3, [pc, #40]	; (f31c <cdcdf_acm_enable+0x158>)
    f2f4:	4798      	blx	r3
    f2f6:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    f2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f2fc:	3301      	adds	r3, #1
    f2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f306:	2b01      	cmp	r3, #1
    f308:	f67f af6b 	bls.w	f1e2 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    f30c:	4b09      	ldr	r3, [pc, #36]	; (f334 <cdcdf_acm_enable+0x170>)
    f30e:	2201      	movs	r2, #1
    f310:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    f312:	2300      	movs	r3, #0
}
    f314:	4618      	mov	r0, r3
    f316:	3730      	adds	r7, #48	; 0x30
    f318:	46bd      	mov	sp, r7
    f31a:	bd80      	pop	{r7, pc}
    f31c:	00010585 	.word	0x00010585
    f320:	0000f15f 	.word	0x0000f15f
    f324:	0000616d 	.word	0x0000616d
    f328:	00006259 	.word	0x00006259
    f32c:	0000f1a1 	.word	0x0000f1a1
    f330:	000105e1 	.word	0x000105e1
    f334:	200033f0 	.word	0x200033f0

0000f338 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    f338:	b580      	push	{r7, lr}
    f33a:	b088      	sub	sp, #32
    f33c:	af00      	add	r7, sp, #0
    f33e:	6078      	str	r0, [r7, #4]
    f340:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    f342:	687b      	ldr	r3, [r7, #4]
    f344:	689b      	ldr	r3, [r3, #8]
    f346:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    f348:	683b      	ldr	r3, [r7, #0]
    f34a:	2b00      	cmp	r3, #0
    f34c:	d00c      	beq.n	f368 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    f34e:	683b      	ldr	r3, [r7, #0]
    f350:	681b      	ldr	r3, [r3, #0]
    f352:	795b      	ldrb	r3, [r3, #5]
    f354:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    f356:	7c7b      	ldrb	r3, [r7, #17]
    f358:	2b02      	cmp	r3, #2
    f35a:	d005      	beq.n	f368 <cdcdf_acm_disable+0x30>
    f35c:	7c7b      	ldrb	r3, [r7, #17]
    f35e:	2b0a      	cmp	r3, #10
    f360:	d002      	beq.n	f368 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    f362:	f06f 0309 	mvn.w	r3, #9
    f366:	e035      	b.n	f3d4 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    f368:	2300      	movs	r3, #0
    f36a:	77fb      	strb	r3, [r7, #31]
    f36c:	e01f      	b.n	f3ae <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    f36e:	7ffb      	ldrb	r3, [r7, #31]
    f370:	69ba      	ldr	r2, [r7, #24]
    f372:	5cd3      	ldrb	r3, [r2, r3]
    f374:	2bff      	cmp	r3, #255	; 0xff
    f376:	d016      	beq.n	f3a6 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    f378:	7ffb      	ldrb	r3, [r7, #31]
    f37a:	69ba      	ldr	r2, [r7, #24]
    f37c:	21ff      	movs	r1, #255	; 0xff
    f37e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    f380:	7ffb      	ldrb	r3, [r7, #31]
    f382:	69ba      	ldr	r2, [r7, #24]
    f384:	4413      	add	r3, r2
    f386:	789b      	ldrb	r3, [r3, #2]
    f388:	2bff      	cmp	r3, #255	; 0xff
    f38a:	d00d      	beq.n	f3a8 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    f38c:	7ffb      	ldrb	r3, [r7, #31]
    f38e:	69ba      	ldr	r2, [r7, #24]
    f390:	4413      	add	r3, r2
    f392:	789b      	ldrb	r3, [r3, #2]
    f394:	4618      	mov	r0, r3
    f396:	4b11      	ldr	r3, [pc, #68]	; (f3dc <cdcdf_acm_disable+0xa4>)
    f398:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    f39a:	7ffb      	ldrb	r3, [r7, #31]
    f39c:	69ba      	ldr	r2, [r7, #24]
    f39e:	4413      	add	r3, r2
    f3a0:	22ff      	movs	r2, #255	; 0xff
    f3a2:	709a      	strb	r2, [r3, #2]
    f3a4:	e000      	b.n	f3a8 <cdcdf_acm_disable+0x70>
			continue;
    f3a6:	bf00      	nop
	for (i = 0; i < 2; i++) {
    f3a8:	7ffb      	ldrb	r3, [r7, #31]
    f3aa:	3301      	adds	r3, #1
    f3ac:	77fb      	strb	r3, [r7, #31]
    f3ae:	7ffb      	ldrb	r3, [r7, #31]
    f3b0:	2b01      	cmp	r3, #1
    f3b2:	d9dc      	bls.n	f36e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    f3b4:	69bb      	ldr	r3, [r7, #24]
    f3b6:	791b      	ldrb	r3, [r3, #4]
    f3b8:	2bff      	cmp	r3, #255	; 0xff
    f3ba:	d007      	beq.n	f3cc <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    f3bc:	69bb      	ldr	r3, [r7, #24]
    f3be:	791b      	ldrb	r3, [r3, #4]
    f3c0:	4618      	mov	r0, r3
    f3c2:	4b06      	ldr	r3, [pc, #24]	; (f3dc <cdcdf_acm_disable+0xa4>)
    f3c4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    f3c6:	69bb      	ldr	r3, [r7, #24]
    f3c8:	22ff      	movs	r2, #255	; 0xff
    f3ca:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    f3cc:	4b04      	ldr	r3, [pc, #16]	; (f3e0 <cdcdf_acm_disable+0xa8>)
    f3ce:	2200      	movs	r2, #0
    f3d0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    f3d2:	2300      	movs	r3, #0
}
    f3d4:	4618      	mov	r0, r3
    f3d6:	3720      	adds	r7, #32
    f3d8:	46bd      	mov	sp, r7
    f3da:	bd80      	pop	{r7, pc}
    f3dc:	00006209 	.word	0x00006209
    f3e0:	200033f0 	.word	0x200033f0

0000f3e4 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    f3e4:	b580      	push	{r7, lr}
    f3e6:	b084      	sub	sp, #16
    f3e8:	af00      	add	r7, sp, #0
    f3ea:	60f8      	str	r0, [r7, #12]
    f3ec:	460b      	mov	r3, r1
    f3ee:	607a      	str	r2, [r7, #4]
    f3f0:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    f3f2:	7afb      	ldrb	r3, [r7, #11]
    f3f4:	2b01      	cmp	r3, #1
    f3f6:	d009      	beq.n	f40c <cdcdf_acm_ctrl+0x28>
    f3f8:	2b02      	cmp	r3, #2
    f3fa:	d00d      	beq.n	f418 <cdcdf_acm_ctrl+0x34>
    f3fc:	2b00      	cmp	r3, #0
    f3fe:	d10e      	bne.n	f41e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    f400:	6879      	ldr	r1, [r7, #4]
    f402:	68f8      	ldr	r0, [r7, #12]
    f404:	4b09      	ldr	r3, [pc, #36]	; (f42c <cdcdf_acm_ctrl+0x48>)
    f406:	4798      	blx	r3
    f408:	4603      	mov	r3, r0
    f40a:	e00a      	b.n	f422 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    f40c:	6879      	ldr	r1, [r7, #4]
    f40e:	68f8      	ldr	r0, [r7, #12]
    f410:	4b07      	ldr	r3, [pc, #28]	; (f430 <cdcdf_acm_ctrl+0x4c>)
    f412:	4798      	blx	r3
    f414:	4603      	mov	r3, r0
    f416:	e004      	b.n	f422 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    f418:	f06f 031a 	mvn.w	r3, #26
    f41c:	e001      	b.n	f422 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    f41e:	f06f 030c 	mvn.w	r3, #12
	}
}
    f422:	4618      	mov	r0, r3
    f424:	3710      	adds	r7, #16
    f426:	46bd      	mov	sp, r7
    f428:	bd80      	pop	{r7, pc}
    f42a:	bf00      	nop
    f42c:	0000f1c5 	.word	0x0000f1c5
    f430:	0000f339 	.word	0x0000f339

0000f434 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f434:	b590      	push	{r4, r7, lr}
    f436:	b087      	sub	sp, #28
    f438:	af00      	add	r7, sp, #0
    f43a:	4603      	mov	r3, r0
    f43c:	6039      	str	r1, [r7, #0]
    f43e:	71fb      	strb	r3, [r7, #7]
    f440:	4613      	mov	r3, r2
    f442:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    f444:	683b      	ldr	r3, [r7, #0]
    f446:	799a      	ldrb	r2, [r3, #6]
    f448:	79db      	ldrb	r3, [r3, #7]
    f44a:	021b      	lsls	r3, r3, #8
    f44c:	4313      	orrs	r3, r2
    f44e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    f450:	4b2b      	ldr	r3, [pc, #172]	; (f500 <cdcdf_acm_set_req+0xcc>)
    f452:	4798      	blx	r3
    f454:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    f456:	683b      	ldr	r3, [r7, #0]
    f458:	785b      	ldrb	r3, [r3, #1]
    f45a:	2b20      	cmp	r3, #32
    f45c:	d002      	beq.n	f464 <cdcdf_acm_set_req+0x30>
    f45e:	2b22      	cmp	r3, #34	; 0x22
    f460:	d034      	beq.n	f4cc <cdcdf_acm_set_req+0x98>
    f462:	e046      	b.n	f4f2 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    f464:	8afb      	ldrh	r3, [r7, #22]
    f466:	2b07      	cmp	r3, #7
    f468:	d002      	beq.n	f470 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    f46a:	f04f 33ff 	mov.w	r3, #4294967295
    f46e:	e042      	b.n	f4f6 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    f470:	79bb      	ldrb	r3, [r7, #6]
    f472:	2b00      	cmp	r3, #0
    f474:	d107      	bne.n	f486 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    f476:	8afa      	ldrh	r2, [r7, #22]
    f478:	79f8      	ldrb	r0, [r7, #7]
    f47a:	2300      	movs	r3, #0
    f47c:	6939      	ldr	r1, [r7, #16]
    f47e:	4c21      	ldr	r4, [pc, #132]	; (f504 <cdcdf_acm_set_req+0xd0>)
    f480:	47a0      	blx	r4
    f482:	4603      	mov	r3, r0
    f484:	e037      	b.n	f4f6 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    f486:	693a      	ldr	r2, [r7, #16]
    f488:	f107 0308 	add.w	r3, r7, #8
    f48c:	6810      	ldr	r0, [r2, #0]
    f48e:	6018      	str	r0, [r3, #0]
    f490:	8891      	ldrh	r1, [r2, #4]
    f492:	7992      	ldrb	r2, [r2, #6]
    f494:	8099      	strh	r1, [r3, #4]
    f496:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    f498:	4b1b      	ldr	r3, [pc, #108]	; (f508 <cdcdf_acm_set_req+0xd4>)
    f49a:	681b      	ldr	r3, [r3, #0]
    f49c:	2b00      	cmp	r3, #0
    f49e:	d008      	beq.n	f4b2 <cdcdf_acm_set_req+0x7e>
    f4a0:	4b19      	ldr	r3, [pc, #100]	; (f508 <cdcdf_acm_set_req+0xd4>)
    f4a2:	681b      	ldr	r3, [r3, #0]
    f4a4:	f107 0208 	add.w	r2, r7, #8
    f4a8:	4610      	mov	r0, r2
    f4aa:	4798      	blx	r3
    f4ac:	4603      	mov	r3, r0
    f4ae:	2b00      	cmp	r3, #0
    f4b0:	d00a      	beq.n	f4c8 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    f4b2:	4b16      	ldr	r3, [pc, #88]	; (f50c <cdcdf_acm_set_req+0xd8>)
    f4b4:	f107 0208 	add.w	r2, r7, #8
    f4b8:	e892 0003 	ldmia.w	r2, {r0, r1}
    f4bc:	6018      	str	r0, [r3, #0]
    f4be:	3304      	adds	r3, #4
    f4c0:	8019      	strh	r1, [r3, #0]
    f4c2:	3302      	adds	r3, #2
    f4c4:	0c0a      	lsrs	r2, r1, #16
    f4c6:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    f4c8:	2300      	movs	r3, #0
    f4ca:	e014      	b.n	f4f6 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    f4cc:	2300      	movs	r3, #0
    f4ce:	2200      	movs	r2, #0
    f4d0:	2100      	movs	r1, #0
    f4d2:	2000      	movs	r0, #0
    f4d4:	4c0b      	ldr	r4, [pc, #44]	; (f504 <cdcdf_acm_set_req+0xd0>)
    f4d6:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    f4d8:	4b0d      	ldr	r3, [pc, #52]	; (f510 <cdcdf_acm_set_req+0xdc>)
    f4da:	681b      	ldr	r3, [r3, #0]
    f4dc:	2b00      	cmp	r3, #0
    f4de:	d006      	beq.n	f4ee <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    f4e0:	4b0b      	ldr	r3, [pc, #44]	; (f510 <cdcdf_acm_set_req+0xdc>)
    f4e2:	681b      	ldr	r3, [r3, #0]
    f4e4:	683a      	ldr	r2, [r7, #0]
    f4e6:	8852      	ldrh	r2, [r2, #2]
    f4e8:	b292      	uxth	r2, r2
    f4ea:	4610      	mov	r0, r2
    f4ec:	4798      	blx	r3
		}
		return ERR_NONE;
    f4ee:	2300      	movs	r3, #0
    f4f0:	e001      	b.n	f4f6 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    f4f2:	f06f 030c 	mvn.w	r3, #12
	}
}
    f4f6:	4618      	mov	r0, r3
    f4f8:	371c      	adds	r7, #28
    f4fa:	46bd      	mov	sp, r7
    f4fc:	bd90      	pop	{r4, r7, pc}
    f4fe:	bf00      	nop
    f500:	00010481 	.word	0x00010481
    f504:	000102f5 	.word	0x000102f5
    f508:	20003404 	.word	0x20003404
    f50c:	200033f8 	.word	0x200033f8
    f510:	20003400 	.word	0x20003400

0000f514 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f514:	b590      	push	{r4, r7, lr}
    f516:	b085      	sub	sp, #20
    f518:	af00      	add	r7, sp, #0
    f51a:	4603      	mov	r3, r0
    f51c:	6039      	str	r1, [r7, #0]
    f51e:	71fb      	strb	r3, [r7, #7]
    f520:	4613      	mov	r3, r2
    f522:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    f524:	683b      	ldr	r3, [r7, #0]
    f526:	799a      	ldrb	r2, [r3, #6]
    f528:	79db      	ldrb	r3, [r3, #7]
    f52a:	021b      	lsls	r3, r3, #8
    f52c:	4313      	orrs	r3, r2
    f52e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    f530:	79bb      	ldrb	r3, [r7, #6]
    f532:	2b01      	cmp	r3, #1
    f534:	d101      	bne.n	f53a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    f536:	2300      	movs	r3, #0
    f538:	e013      	b.n	f562 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    f53a:	683b      	ldr	r3, [r7, #0]
    f53c:	785b      	ldrb	r3, [r3, #1]
    f53e:	2b21      	cmp	r3, #33	; 0x21
    f540:	d10d      	bne.n	f55e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    f542:	89fb      	ldrh	r3, [r7, #14]
    f544:	2b07      	cmp	r3, #7
    f546:	d002      	beq.n	f54e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    f548:	f04f 33ff 	mov.w	r3, #4294967295
    f54c:	e009      	b.n	f562 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    f54e:	89fa      	ldrh	r2, [r7, #14]
    f550:	79f8      	ldrb	r0, [r7, #7]
    f552:	2300      	movs	r3, #0
    f554:	4905      	ldr	r1, [pc, #20]	; (f56c <cdcdf_acm_get_req+0x58>)
    f556:	4c06      	ldr	r4, [pc, #24]	; (f570 <cdcdf_acm_get_req+0x5c>)
    f558:	47a0      	blx	r4
    f55a:	4603      	mov	r3, r0
    f55c:	e001      	b.n	f562 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    f55e:	f06f 030c 	mvn.w	r3, #12
	}
}
    f562:	4618      	mov	r0, r3
    f564:	3714      	adds	r7, #20
    f566:	46bd      	mov	sp, r7
    f568:	bd90      	pop	{r4, r7, pc}
    f56a:	bf00      	nop
    f56c:	200033f8 	.word	0x200033f8
    f570:	000102f5 	.word	0x000102f5

0000f574 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f574:	b580      	push	{r7, lr}
    f576:	b082      	sub	sp, #8
    f578:	af00      	add	r7, sp, #0
    f57a:	4603      	mov	r3, r0
    f57c:	6039      	str	r1, [r7, #0]
    f57e:	71fb      	strb	r3, [r7, #7]
    f580:	4613      	mov	r3, r2
    f582:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    f584:	683b      	ldr	r3, [r7, #0]
    f586:	781b      	ldrb	r3, [r3, #0]
    f588:	095b      	lsrs	r3, r3, #5
    f58a:	b2db      	uxtb	r3, r3
    f58c:	f003 0303 	and.w	r3, r3, #3
    f590:	2b01      	cmp	r3, #1
    f592:	d002      	beq.n	f59a <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    f594:	f06f 0309 	mvn.w	r3, #9
    f598:	e026      	b.n	f5e8 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    f59a:	683b      	ldr	r3, [r7, #0]
    f59c:	889b      	ldrh	r3, [r3, #4]
    f59e:	b29a      	uxth	r2, r3
    f5a0:	4b13      	ldr	r3, [pc, #76]	; (f5f0 <cdcdf_acm_req+0x7c>)
    f5a2:	781b      	ldrb	r3, [r3, #0]
    f5a4:	b29b      	uxth	r3, r3
    f5a6:	429a      	cmp	r2, r3
    f5a8:	d007      	beq.n	f5ba <cdcdf_acm_req+0x46>
    f5aa:	683b      	ldr	r3, [r7, #0]
    f5ac:	889b      	ldrh	r3, [r3, #4]
    f5ae:	b29a      	uxth	r2, r3
    f5b0:	4b0f      	ldr	r3, [pc, #60]	; (f5f0 <cdcdf_acm_req+0x7c>)
    f5b2:	785b      	ldrb	r3, [r3, #1]
    f5b4:	b29b      	uxth	r3, r3
    f5b6:	429a      	cmp	r2, r3
    f5b8:	d114      	bne.n	f5e4 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    f5ba:	683b      	ldr	r3, [r7, #0]
    f5bc:	781b      	ldrb	r3, [r3, #0]
    f5be:	b25b      	sxtb	r3, r3
    f5c0:	2b00      	cmp	r3, #0
    f5c2:	da07      	bge.n	f5d4 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    f5c4:	79ba      	ldrb	r2, [r7, #6]
    f5c6:	79fb      	ldrb	r3, [r7, #7]
    f5c8:	6839      	ldr	r1, [r7, #0]
    f5ca:	4618      	mov	r0, r3
    f5cc:	4b09      	ldr	r3, [pc, #36]	; (f5f4 <cdcdf_acm_req+0x80>)
    f5ce:	4798      	blx	r3
    f5d0:	4603      	mov	r3, r0
    f5d2:	e009      	b.n	f5e8 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    f5d4:	79ba      	ldrb	r2, [r7, #6]
    f5d6:	79fb      	ldrb	r3, [r7, #7]
    f5d8:	6839      	ldr	r1, [r7, #0]
    f5da:	4618      	mov	r0, r3
    f5dc:	4b06      	ldr	r3, [pc, #24]	; (f5f8 <cdcdf_acm_req+0x84>)
    f5de:	4798      	blx	r3
    f5e0:	4603      	mov	r3, r0
    f5e2:	e001      	b.n	f5e8 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    f5e4:	f06f 0309 	mvn.w	r3, #9
	}
}
    f5e8:	4618      	mov	r0, r3
    f5ea:	3708      	adds	r7, #8
    f5ec:	46bd      	mov	sp, r7
    f5ee:	bd80      	pop	{r7, pc}
    f5f0:	200033f0 	.word	0x200033f0
    f5f4:	0000f515 	.word	0x0000f515
    f5f8:	0000f435 	.word	0x0000f435

0000f5fc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    f5fc:	b580      	push	{r7, lr}
    f5fe:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    f600:	4b0b      	ldr	r3, [pc, #44]	; (f630 <cdcdf_acm_init+0x34>)
    f602:	4798      	blx	r3
    f604:	4603      	mov	r3, r0
    f606:	2b01      	cmp	r3, #1
    f608:	d902      	bls.n	f610 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    f60a:	f06f 0310 	mvn.w	r3, #16
    f60e:	e00d      	b.n	f62c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    f610:	4b08      	ldr	r3, [pc, #32]	; (f634 <cdcdf_acm_init+0x38>)
    f612:	4a09      	ldr	r2, [pc, #36]	; (f638 <cdcdf_acm_init+0x3c>)
    f614:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    f616:	4b07      	ldr	r3, [pc, #28]	; (f634 <cdcdf_acm_init+0x38>)
    f618:	4a08      	ldr	r2, [pc, #32]	; (f63c <cdcdf_acm_init+0x40>)
    f61a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    f61c:	4805      	ldr	r0, [pc, #20]	; (f634 <cdcdf_acm_init+0x38>)
    f61e:	4b08      	ldr	r3, [pc, #32]	; (f640 <cdcdf_acm_init+0x44>)
    f620:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    f622:	4908      	ldr	r1, [pc, #32]	; (f644 <cdcdf_acm_init+0x48>)
    f624:	2001      	movs	r0, #1
    f626:	4b08      	ldr	r3, [pc, #32]	; (f648 <cdcdf_acm_init+0x4c>)
    f628:	4798      	blx	r3
	return ERR_NONE;
    f62a:	2300      	movs	r3, #0
}
    f62c:	4618      	mov	r0, r3
    f62e:	bd80      	pop	{r7, pc}
    f630:	00010499 	.word	0x00010499
    f634:	200033e4 	.word	0x200033e4
    f638:	0000f3e5 	.word	0x0000f3e5
    f63c:	200033f0 	.word	0x200033f0
    f640:	00010401 	.word	0x00010401
    f644:	20000198 	.word	0x20000198
    f648:	00010331 	.word	0x00010331

0000f64c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    f64c:	b590      	push	{r4, r7, lr}
    f64e:	b083      	sub	sp, #12
    f650:	af00      	add	r7, sp, #0
    f652:	6078      	str	r0, [r7, #4]
    f654:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    f656:	4b0b      	ldr	r3, [pc, #44]	; (f684 <cdcdf_acm_read+0x38>)
    f658:	4798      	blx	r3
    f65a:	4603      	mov	r3, r0
    f65c:	f083 0301 	eor.w	r3, r3, #1
    f660:	b2db      	uxtb	r3, r3
    f662:	2b00      	cmp	r3, #0
    f664:	d002      	beq.n	f66c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    f666:	f06f 0310 	mvn.w	r3, #16
    f66a:	e007      	b.n	f67c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    f66c:	4b06      	ldr	r3, [pc, #24]	; (f688 <cdcdf_acm_read+0x3c>)
    f66e:	7918      	ldrb	r0, [r3, #4]
    f670:	2300      	movs	r3, #0
    f672:	683a      	ldr	r2, [r7, #0]
    f674:	6879      	ldr	r1, [r7, #4]
    f676:	4c05      	ldr	r4, [pc, #20]	; (f68c <cdcdf_acm_read+0x40>)
    f678:	47a0      	blx	r4
    f67a:	4603      	mov	r3, r0
}
    f67c:	4618      	mov	r0, r3
    f67e:	370c      	adds	r7, #12
    f680:	46bd      	mov	sp, r7
    f682:	bd90      	pop	{r4, r7, pc}
    f684:	0000f771 	.word	0x0000f771
    f688:	200033f0 	.word	0x200033f0
    f68c:	000102f5 	.word	0x000102f5

0000f690 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    f690:	b590      	push	{r4, r7, lr}
    f692:	b083      	sub	sp, #12
    f694:	af00      	add	r7, sp, #0
    f696:	6078      	str	r0, [r7, #4]
    f698:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    f69a:	4b0b      	ldr	r3, [pc, #44]	; (f6c8 <cdcdf_acm_write+0x38>)
    f69c:	4798      	blx	r3
    f69e:	4603      	mov	r3, r0
    f6a0:	f083 0301 	eor.w	r3, r3, #1
    f6a4:	b2db      	uxtb	r3, r3
    f6a6:	2b00      	cmp	r3, #0
    f6a8:	d002      	beq.n	f6b0 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    f6aa:	f06f 0310 	mvn.w	r3, #16
    f6ae:	e007      	b.n	f6c0 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    f6b0:	4b06      	ldr	r3, [pc, #24]	; (f6cc <cdcdf_acm_write+0x3c>)
    f6b2:	78d8      	ldrb	r0, [r3, #3]
    f6b4:	2301      	movs	r3, #1
    f6b6:	683a      	ldr	r2, [r7, #0]
    f6b8:	6879      	ldr	r1, [r7, #4]
    f6ba:	4c05      	ldr	r4, [pc, #20]	; (f6d0 <cdcdf_acm_write+0x40>)
    f6bc:	47a0      	blx	r4
    f6be:	4603      	mov	r3, r0
}
    f6c0:	4618      	mov	r0, r3
    f6c2:	370c      	adds	r7, #12
    f6c4:	46bd      	mov	sp, r7
    f6c6:	bd90      	pop	{r4, r7, pc}
    f6c8:	0000f771 	.word	0x0000f771
    f6cc:	200033f0 	.word	0x200033f0
    f6d0:	000102f5 	.word	0x000102f5

0000f6d4 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    f6d4:	b580      	push	{r7, lr}
    f6d6:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    f6d8:	4b05      	ldr	r3, [pc, #20]	; (f6f0 <cdcdf_acm_stop_xfer+0x1c>)
    f6da:	78db      	ldrb	r3, [r3, #3]
    f6dc:	4618      	mov	r0, r3
    f6de:	4b05      	ldr	r3, [pc, #20]	; (f6f4 <cdcdf_acm_stop_xfer+0x20>)
    f6e0:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    f6e2:	4b03      	ldr	r3, [pc, #12]	; (f6f0 <cdcdf_acm_stop_xfer+0x1c>)
    f6e4:	791b      	ldrb	r3, [r3, #4]
    f6e6:	4618      	mov	r0, r3
    f6e8:	4b02      	ldr	r3, [pc, #8]	; (f6f4 <cdcdf_acm_stop_xfer+0x20>)
    f6ea:	4798      	blx	r3
}
    f6ec:	bf00      	nop
    f6ee:	bd80      	pop	{r7, pc}
    f6f0:	200033f0 	.word	0x200033f0
    f6f4:	00006431 	.word	0x00006431

0000f6f8 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    f6f8:	b580      	push	{r7, lr}
    f6fa:	b082      	sub	sp, #8
    f6fc:	af00      	add	r7, sp, #0
    f6fe:	4603      	mov	r3, r0
    f700:	6039      	str	r1, [r7, #0]
    f702:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    f704:	79fb      	ldrb	r3, [r7, #7]
    f706:	2b03      	cmp	r3, #3
    f708:	d822      	bhi.n	f750 <cdcdf_acm_register_callback+0x58>
    f70a:	a201      	add	r2, pc, #4	; (adr r2, f710 <cdcdf_acm_register_callback+0x18>)
    f70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f710:	0000f721 	.word	0x0000f721
    f714:	0000f731 	.word	0x0000f731
    f718:	0000f741 	.word	0x0000f741
    f71c:	0000f749 	.word	0x0000f749
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    f720:	4b0f      	ldr	r3, [pc, #60]	; (f760 <cdcdf_acm_register_callback+0x68>)
    f722:	791b      	ldrb	r3, [r3, #4]
    f724:	683a      	ldr	r2, [r7, #0]
    f726:	2102      	movs	r1, #2
    f728:	4618      	mov	r0, r3
    f72a:	4b0e      	ldr	r3, [pc, #56]	; (f764 <cdcdf_acm_register_callback+0x6c>)
    f72c:	4798      	blx	r3
		break;
    f72e:	e012      	b.n	f756 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    f730:	4b0b      	ldr	r3, [pc, #44]	; (f760 <cdcdf_acm_register_callback+0x68>)
    f732:	78db      	ldrb	r3, [r3, #3]
    f734:	683a      	ldr	r2, [r7, #0]
    f736:	2102      	movs	r1, #2
    f738:	4618      	mov	r0, r3
    f73a:	4b0a      	ldr	r3, [pc, #40]	; (f764 <cdcdf_acm_register_callback+0x6c>)
    f73c:	4798      	blx	r3
		break;
    f73e:	e00a      	b.n	f756 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    f740:	4a09      	ldr	r2, [pc, #36]	; (f768 <cdcdf_acm_register_callback+0x70>)
    f742:	683b      	ldr	r3, [r7, #0]
    f744:	6013      	str	r3, [r2, #0]
		break;
    f746:	e006      	b.n	f756 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    f748:	4a08      	ldr	r2, [pc, #32]	; (f76c <cdcdf_acm_register_callback+0x74>)
    f74a:	683b      	ldr	r3, [r7, #0]
    f74c:	6013      	str	r3, [r2, #0]
		break;
    f74e:	e002      	b.n	f756 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    f750:	f06f 030c 	mvn.w	r3, #12
    f754:	e000      	b.n	f758 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    f756:	2300      	movs	r3, #0
}
    f758:	4618      	mov	r0, r3
    f75a:	3708      	adds	r7, #8
    f75c:	46bd      	mov	sp, r7
    f75e:	bd80      	pop	{r7, pc}
    f760:	200033f0 	.word	0x200033f0
    f764:	0000655d 	.word	0x0000655d
    f768:	20003404 	.word	0x20003404
    f76c:	20003400 	.word	0x20003400

0000f770 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    f770:	b480      	push	{r7}
    f772:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    f774:	4b03      	ldr	r3, [pc, #12]	; (f784 <cdcdf_acm_is_enabled+0x14>)
    f776:	795b      	ldrb	r3, [r3, #5]
}
    f778:	4618      	mov	r0, r3
    f77a:	46bd      	mov	sp, r7
    f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
    f780:	4770      	bx	lr
    f782:	bf00      	nop
    f784:	200033f0 	.word	0x200033f0

0000f788 <usb_get_u16>:
{
    f788:	b480      	push	{r7}
    f78a:	b083      	sub	sp, #12
    f78c:	af00      	add	r7, sp, #0
    f78e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    f790:	687b      	ldr	r3, [r7, #4]
    f792:	781b      	ldrb	r3, [r3, #0]
    f794:	b29a      	uxth	r2, r3
    f796:	687b      	ldr	r3, [r7, #4]
    f798:	3301      	adds	r3, #1
    f79a:	781b      	ldrb	r3, [r3, #0]
    f79c:	b29b      	uxth	r3, r3
    f79e:	021b      	lsls	r3, r3, #8
    f7a0:	b29b      	uxth	r3, r3
    f7a2:	4413      	add	r3, r2
    f7a4:	b29b      	uxth	r3, r3
}
    f7a6:	4618      	mov	r0, r3
    f7a8:	370c      	adds	r7, #12
    f7aa:	46bd      	mov	sp, r7
    f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    f7b0:	4770      	bx	lr

0000f7b2 <usb_desc_len>:
{
    f7b2:	b480      	push	{r7}
    f7b4:	b083      	sub	sp, #12
    f7b6:	af00      	add	r7, sp, #0
    f7b8:	6078      	str	r0, [r7, #4]
	return desc[0];
    f7ba:	687b      	ldr	r3, [r7, #4]
    f7bc:	781b      	ldrb	r3, [r3, #0]
}
    f7be:	4618      	mov	r0, r3
    f7c0:	370c      	adds	r7, #12
    f7c2:	46bd      	mov	sp, r7
    f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    f7c8:	4770      	bx	lr
	...

0000f7cc <usb_desc_next>:
{
    f7cc:	b580      	push	{r7, lr}
    f7ce:	b082      	sub	sp, #8
    f7d0:	af00      	add	r7, sp, #0
    f7d2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    f7d4:	6878      	ldr	r0, [r7, #4]
    f7d6:	4b05      	ldr	r3, [pc, #20]	; (f7ec <usb_desc_next+0x20>)
    f7d8:	4798      	blx	r3
    f7da:	4603      	mov	r3, r0
    f7dc:	461a      	mov	r2, r3
    f7de:	687b      	ldr	r3, [r7, #4]
    f7e0:	4413      	add	r3, r2
}
    f7e2:	4618      	mov	r0, r3
    f7e4:	3708      	adds	r7, #8
    f7e6:	46bd      	mov	sp, r7
    f7e8:	bd80      	pop	{r7, pc}
    f7ea:	bf00      	nop
    f7ec:	0000f7b3 	.word	0x0000f7b3

0000f7f0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    f7f0:	b580      	push	{r7, lr}
    f7f2:	b082      	sub	sp, #8
    f7f4:	af00      	add	r7, sp, #0
    f7f6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    f7f8:	687b      	ldr	r3, [r7, #4]
    f7fa:	3302      	adds	r3, #2
    f7fc:	4618      	mov	r0, r3
    f7fe:	4b03      	ldr	r3, [pc, #12]	; (f80c <usb_cfg_desc_total_len+0x1c>)
    f800:	4798      	blx	r3
    f802:	4603      	mov	r3, r0
}
    f804:	4618      	mov	r0, r3
    f806:	3708      	adds	r7, #8
    f808:	46bd      	mov	sp, r7
    f80a:	bd80      	pop	{r7, pc}
    f80c:	0000f789 	.word	0x0000f789

0000f810 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    f810:	b590      	push	{r4, r7, lr}
    f812:	b085      	sub	sp, #20
    f814:	af00      	add	r7, sp, #0
    f816:	4603      	mov	r3, r0
    f818:	6039      	str	r1, [r7, #0]
    f81a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    f81c:	2300      	movs	r3, #0
    f81e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    f820:	683b      	ldr	r3, [r7, #0]
    f822:	799a      	ldrb	r2, [r3, #6]
    f824:	79db      	ldrb	r3, [r3, #7]
    f826:	021b      	lsls	r3, r3, #8
    f828:	4313      	orrs	r3, r2
    f82a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    f82c:	897b      	ldrh	r3, [r7, #10]
    f82e:	2b12      	cmp	r3, #18
    f830:	d901      	bls.n	f836 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    f832:	2312      	movs	r3, #18
    f834:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    f836:	68fb      	ldr	r3, [r7, #12]
    f838:	2b00      	cmp	r3, #0
    f83a:	d10a      	bne.n	f852 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    f83c:	4b0f      	ldr	r3, [pc, #60]	; (f87c <usbdc_get_dev_desc+0x6c>)
    f83e:	681b      	ldr	r3, [r3, #0]
    f840:	6818      	ldr	r0, [r3, #0]
    f842:	4b0e      	ldr	r3, [pc, #56]	; (f87c <usbdc_get_dev_desc+0x6c>)
    f844:	681b      	ldr	r3, [r3, #0]
    f846:	685b      	ldr	r3, [r3, #4]
    f848:	2201      	movs	r2, #1
    f84a:	4619      	mov	r1, r3
    f84c:	4b0c      	ldr	r3, [pc, #48]	; (f880 <usbdc_get_dev_desc+0x70>)
    f84e:	4798      	blx	r3
    f850:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    f852:	68fb      	ldr	r3, [r7, #12]
    f854:	2b00      	cmp	r3, #0
    f856:	d101      	bne.n	f85c <usbdc_get_dev_desc+0x4c>
		return false;
    f858:	2300      	movs	r3, #0
    f85a:	e00b      	b.n	f874 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    f85c:	897a      	ldrh	r2, [r7, #10]
    f85e:	79f8      	ldrb	r0, [r7, #7]
    f860:	2300      	movs	r3, #0
    f862:	68f9      	ldr	r1, [r7, #12]
    f864:	4c07      	ldr	r4, [pc, #28]	; (f884 <usbdc_get_dev_desc+0x74>)
    f866:	47a0      	blx	r4
    f868:	4603      	mov	r3, r0
    f86a:	2b00      	cmp	r3, #0
    f86c:	d001      	beq.n	f872 <usbdc_get_dev_desc+0x62>
		return false;
    f86e:	2300      	movs	r3, #0
    f870:	e000      	b.n	f874 <usbdc_get_dev_desc+0x64>
	}
	return true;
    f872:	2301      	movs	r3, #1
}
    f874:	4618      	mov	r0, r3
    f876:	3714      	adds	r7, #20
    f878:	46bd      	mov	sp, r7
    f87a:	bd90      	pop	{r4, r7, pc}
    f87c:	20003408 	.word	0x20003408
    f880:	00010585 	.word	0x00010585
    f884:	000102f5 	.word	0x000102f5

0000f888 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    f888:	b590      	push	{r4, r7, lr}
    f88a:	b087      	sub	sp, #28
    f88c:	af00      	add	r7, sp, #0
    f88e:	4603      	mov	r3, r0
    f890:	6039      	str	r1, [r7, #0]
    f892:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    f894:	2300      	movs	r3, #0
    f896:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    f898:	683b      	ldr	r3, [r7, #0]
    f89a:	799a      	ldrb	r2, [r3, #6]
    f89c:	79db      	ldrb	r3, [r3, #7]
    f89e:	021b      	lsls	r3, r3, #8
    f8a0:	4313      	orrs	r3, r2
    f8a2:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    f8a4:	683b      	ldr	r3, [r7, #0]
    f8a6:	885b      	ldrh	r3, [r3, #2]
    f8a8:	b29b      	uxth	r3, r3
    f8aa:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    f8ac:	8a7a      	ldrh	r2, [r7, #18]
    f8ae:	4b1e      	ldr	r3, [pc, #120]	; (f928 <usbdc_get_cfg_desc+0xa0>)
    f8b0:	7f1b      	ldrb	r3, [r3, #28]
    f8b2:	3b01      	subs	r3, #1
    f8b4:	4013      	ands	r3, r2
    f8b6:	2b00      	cmp	r3, #0
    f8b8:	bf0c      	ite	eq
    f8ba:	2301      	moveq	r3, #1
    f8bc:	2300      	movne	r3, #0
    f8be:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    f8c0:	697b      	ldr	r3, [r7, #20]
    f8c2:	2b00      	cmp	r3, #0
    f8c4:	d10c      	bne.n	f8e0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    f8c6:	4b18      	ldr	r3, [pc, #96]	; (f928 <usbdc_get_cfg_desc+0xa0>)
    f8c8:	681b      	ldr	r3, [r3, #0]
    f8ca:	6818      	ldr	r0, [r3, #0]
    f8cc:	4b16      	ldr	r3, [pc, #88]	; (f928 <usbdc_get_cfg_desc+0xa0>)
    f8ce:	681b      	ldr	r3, [r3, #0]
    f8d0:	6859      	ldr	r1, [r3, #4]
    f8d2:	7c3b      	ldrb	r3, [r7, #16]
    f8d4:	3301      	adds	r3, #1
    f8d6:	b2db      	uxtb	r3, r3
    f8d8:	461a      	mov	r2, r3
    f8da:	4b14      	ldr	r3, [pc, #80]	; (f92c <usbdc_get_cfg_desc+0xa4>)
    f8dc:	4798      	blx	r3
    f8de:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    f8e0:	697b      	ldr	r3, [r7, #20]
    f8e2:	2b00      	cmp	r3, #0
    f8e4:	d101      	bne.n	f8ea <usbdc_get_cfg_desc+0x62>
		return false;
    f8e6:	2300      	movs	r3, #0
    f8e8:	e019      	b.n	f91e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    f8ea:	6978      	ldr	r0, [r7, #20]
    f8ec:	4b10      	ldr	r3, [pc, #64]	; (f930 <usbdc_get_cfg_desc+0xa8>)
    f8ee:	4798      	blx	r3
    f8f0:	4603      	mov	r3, r0
    f8f2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    f8f4:	8a7a      	ldrh	r2, [r7, #18]
    f8f6:	89fb      	ldrh	r3, [r7, #14]
    f8f8:	429a      	cmp	r2, r3
    f8fa:	d802      	bhi.n	f902 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    f8fc:	2300      	movs	r3, #0
    f8fe:	747b      	strb	r3, [r7, #17]
    f900:	e001      	b.n	f906 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    f902:	89fb      	ldrh	r3, [r7, #14]
    f904:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    f906:	8a7a      	ldrh	r2, [r7, #18]
    f908:	7c7b      	ldrb	r3, [r7, #17]
    f90a:	79f8      	ldrb	r0, [r7, #7]
    f90c:	6979      	ldr	r1, [r7, #20]
    f90e:	4c09      	ldr	r4, [pc, #36]	; (f934 <usbdc_get_cfg_desc+0xac>)
    f910:	47a0      	blx	r4
    f912:	4603      	mov	r3, r0
    f914:	2b00      	cmp	r3, #0
    f916:	d001      	beq.n	f91c <usbdc_get_cfg_desc+0x94>
		return false;
    f918:	2300      	movs	r3, #0
    f91a:	e000      	b.n	f91e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    f91c:	2301      	movs	r3, #1
}
    f91e:	4618      	mov	r0, r3
    f920:	371c      	adds	r7, #28
    f922:	46bd      	mov	sp, r7
    f924:	bd90      	pop	{r4, r7, pc}
    f926:	bf00      	nop
    f928:	20003408 	.word	0x20003408
    f92c:	00010645 	.word	0x00010645
    f930:	0000f7f1 	.word	0x0000f7f1
    f934:	000102f5 	.word	0x000102f5

0000f938 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    f938:	b590      	push	{r4, r7, lr}
    f93a:	b085      	sub	sp, #20
    f93c:	af00      	add	r7, sp, #0
    f93e:	4603      	mov	r3, r0
    f940:	6039      	str	r1, [r7, #0]
    f942:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    f944:	683b      	ldr	r3, [r7, #0]
    f946:	799a      	ldrb	r2, [r3, #6]
    f948:	79db      	ldrb	r3, [r3, #7]
    f94a:	021b      	lsls	r3, r3, #8
    f94c:	4313      	orrs	r3, r2
    f94e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    f950:	683b      	ldr	r3, [r7, #0]
    f952:	885b      	ldrh	r3, [r3, #2]
    f954:	b29b      	uxth	r3, r3
    f956:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    f958:	89fa      	ldrh	r2, [r7, #14]
    f95a:	4b1a      	ldr	r3, [pc, #104]	; (f9c4 <usbdc_get_str_desc+0x8c>)
    f95c:	7f1b      	ldrb	r3, [r3, #28]
    f95e:	3b01      	subs	r3, #1
    f960:	4013      	ands	r3, r2
    f962:	2b00      	cmp	r3, #0
    f964:	bf0c      	ite	eq
    f966:	2301      	moveq	r3, #1
    f968:	2300      	movne	r3, #0
    f96a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    f96c:	4b15      	ldr	r3, [pc, #84]	; (f9c4 <usbdc_get_str_desc+0x8c>)
    f96e:	681b      	ldr	r3, [r3, #0]
    f970:	6818      	ldr	r0, [r3, #0]
    f972:	4b14      	ldr	r3, [pc, #80]	; (f9c4 <usbdc_get_str_desc+0x8c>)
    f974:	681b      	ldr	r3, [r3, #0]
    f976:	685b      	ldr	r3, [r3, #4]
    f978:	7b3a      	ldrb	r2, [r7, #12]
    f97a:	4619      	mov	r1, r3
    f97c:	4b12      	ldr	r3, [pc, #72]	; (f9c8 <usbdc_get_str_desc+0x90>)
    f97e:	4798      	blx	r3
    f980:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    f982:	68bb      	ldr	r3, [r7, #8]
    f984:	2b00      	cmp	r3, #0
    f986:	d101      	bne.n	f98c <usbdc_get_str_desc+0x54>
		return false;
    f988:	2300      	movs	r3, #0
    f98a:	e017      	b.n	f9bc <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    f98c:	68bb      	ldr	r3, [r7, #8]
    f98e:	781b      	ldrb	r3, [r3, #0]
    f990:	b29b      	uxth	r3, r3
    f992:	89fa      	ldrh	r2, [r7, #14]
    f994:	429a      	cmp	r2, r3
    f996:	d802      	bhi.n	f99e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    f998:	2300      	movs	r3, #0
    f99a:	737b      	strb	r3, [r7, #13]
    f99c:	e002      	b.n	f9a4 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    f99e:	68bb      	ldr	r3, [r7, #8]
    f9a0:	781b      	ldrb	r3, [r3, #0]
    f9a2:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    f9a4:	89fa      	ldrh	r2, [r7, #14]
    f9a6:	7b7b      	ldrb	r3, [r7, #13]
    f9a8:	79f8      	ldrb	r0, [r7, #7]
    f9aa:	68b9      	ldr	r1, [r7, #8]
    f9ac:	4c07      	ldr	r4, [pc, #28]	; (f9cc <usbdc_get_str_desc+0x94>)
    f9ae:	47a0      	blx	r4
    f9b0:	4603      	mov	r3, r0
    f9b2:	2b00      	cmp	r3, #0
    f9b4:	d001      	beq.n	f9ba <usbdc_get_str_desc+0x82>
		return false;
    f9b6:	2300      	movs	r3, #0
    f9b8:	e000      	b.n	f9bc <usbdc_get_str_desc+0x84>
	}
	return true;
    f9ba:	2301      	movs	r3, #1
}
    f9bc:	4618      	mov	r0, r3
    f9be:	3714      	adds	r7, #20
    f9c0:	46bd      	mov	sp, r7
    f9c2:	bd90      	pop	{r4, r7, pc}
    f9c4:	20003408 	.word	0x20003408
    f9c8:	000106bd 	.word	0x000106bd
    f9cc:	000102f5 	.word	0x000102f5

0000f9d0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    f9d0:	b580      	push	{r7, lr}
    f9d2:	b084      	sub	sp, #16
    f9d4:	af00      	add	r7, sp, #0
    f9d6:	4603      	mov	r3, r0
    f9d8:	6039      	str	r1, [r7, #0]
    f9da:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    f9dc:	683b      	ldr	r3, [r7, #0]
    f9de:	885b      	ldrh	r3, [r3, #2]
    f9e0:	b29b      	uxth	r3, r3
    f9e2:	0a1b      	lsrs	r3, r3, #8
    f9e4:	b29b      	uxth	r3, r3
    f9e6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    f9e8:	7bfb      	ldrb	r3, [r7, #15]
    f9ea:	2b02      	cmp	r3, #2
    f9ec:	d00d      	beq.n	fa0a <usbdc_get_desc_req+0x3a>
    f9ee:	2b03      	cmp	r3, #3
    f9f0:	d012      	beq.n	fa18 <usbdc_get_desc_req+0x48>
    f9f2:	2b01      	cmp	r3, #1
    f9f4:	d002      	beq.n	f9fc <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    f9f6:	bf00      	nop
	}
	return false;
    f9f8:	2300      	movs	r3, #0
    f9fa:	e013      	b.n	fa24 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    f9fc:	79fb      	ldrb	r3, [r7, #7]
    f9fe:	6839      	ldr	r1, [r7, #0]
    fa00:	4618      	mov	r0, r3
    fa02:	4b0a      	ldr	r3, [pc, #40]	; (fa2c <usbdc_get_desc_req+0x5c>)
    fa04:	4798      	blx	r3
    fa06:	4603      	mov	r3, r0
    fa08:	e00c      	b.n	fa24 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    fa0a:	79fb      	ldrb	r3, [r7, #7]
    fa0c:	6839      	ldr	r1, [r7, #0]
    fa0e:	4618      	mov	r0, r3
    fa10:	4b07      	ldr	r3, [pc, #28]	; (fa30 <usbdc_get_desc_req+0x60>)
    fa12:	4798      	blx	r3
    fa14:	4603      	mov	r3, r0
    fa16:	e005      	b.n	fa24 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    fa18:	79fb      	ldrb	r3, [r7, #7]
    fa1a:	6839      	ldr	r1, [r7, #0]
    fa1c:	4618      	mov	r0, r3
    fa1e:	4b05      	ldr	r3, [pc, #20]	; (fa34 <usbdc_get_desc_req+0x64>)
    fa20:	4798      	blx	r3
    fa22:	4603      	mov	r3, r0
}
    fa24:	4618      	mov	r0, r3
    fa26:	3710      	adds	r7, #16
    fa28:	46bd      	mov	sp, r7
    fa2a:	bd80      	pop	{r7, pc}
    fa2c:	0000f811 	.word	0x0000f811
    fa30:	0000f889 	.word	0x0000f889
    fa34:	0000f939 	.word	0x0000f939

0000fa38 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    fa38:	b590      	push	{r4, r7, lr}
    fa3a:	b085      	sub	sp, #20
    fa3c:	af00      	add	r7, sp, #0
    fa3e:	4603      	mov	r3, r0
    fa40:	6039      	str	r1, [r7, #0]
    fa42:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    fa44:	683b      	ldr	r3, [r7, #0]
    fa46:	781b      	ldrb	r3, [r3, #0]
    fa48:	f003 031f 	and.w	r3, r3, #31
    fa4c:	2b00      	cmp	r3, #0
    fa4e:	db1b      	blt.n	fa88 <usbdc_get_status_req+0x50>
    fa50:	2b01      	cmp	r3, #1
    fa52:	dd02      	ble.n	fa5a <usbdc_get_status_req+0x22>
    fa54:	2b02      	cmp	r3, #2
    fa56:	d003      	beq.n	fa60 <usbdc_get_status_req+0x28>
    fa58:	e016      	b.n	fa88 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    fa5a:	2300      	movs	r3, #0
    fa5c:	60fb      	str	r3, [r7, #12]
		break;
    fa5e:	e015      	b.n	fa8c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    fa60:	683b      	ldr	r3, [r7, #0]
    fa62:	889b      	ldrh	r3, [r3, #4]
    fa64:	b29b      	uxth	r3, r3
    fa66:	b2db      	uxtb	r3, r3
    fa68:	2102      	movs	r1, #2
    fa6a:	4618      	mov	r0, r3
    fa6c:	4b0f      	ldr	r3, [pc, #60]	; (faac <usbdc_get_status_req+0x74>)
    fa6e:	4798      	blx	r3
    fa70:	4603      	mov	r3, r0
    fa72:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    fa74:	68fb      	ldr	r3, [r7, #12]
    fa76:	2b00      	cmp	r3, #0
    fa78:	da01      	bge.n	fa7e <usbdc_get_status_req+0x46>
			return false;
    fa7a:	2300      	movs	r3, #0
    fa7c:	e012      	b.n	faa4 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    fa7e:	68fb      	ldr	r3, [r7, #12]
    fa80:	f003 0301 	and.w	r3, r3, #1
    fa84:	60fb      	str	r3, [r7, #12]
		break;
    fa86:	e001      	b.n	fa8c <usbdc_get_status_req+0x54>
	default:
		return false;
    fa88:	2300      	movs	r3, #0
    fa8a:	e00b      	b.n	faa4 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    fa8c:	4b08      	ldr	r3, [pc, #32]	; (fab0 <usbdc_get_status_req+0x78>)
    fa8e:	695b      	ldr	r3, [r3, #20]
    fa90:	89ba      	ldrh	r2, [r7, #12]
    fa92:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    fa94:	4b06      	ldr	r3, [pc, #24]	; (fab0 <usbdc_get_status_req+0x78>)
    fa96:	6959      	ldr	r1, [r3, #20]
    fa98:	79f8      	ldrb	r0, [r7, #7]
    fa9a:	2300      	movs	r3, #0
    fa9c:	2202      	movs	r2, #2
    fa9e:	4c05      	ldr	r4, [pc, #20]	; (fab4 <usbdc_get_status_req+0x7c>)
    faa0:	47a0      	blx	r4
	return true;
    faa2:	2301      	movs	r3, #1
}
    faa4:	4618      	mov	r0, r3
    faa6:	3714      	adds	r7, #20
    faa8:	46bd      	mov	sp, r7
    faaa:	bd90      	pop	{r4, r7, pc}
    faac:	00006509 	.word	0x00006509
    fab0:	20003408 	.word	0x20003408
    fab4:	000102f5 	.word	0x000102f5

0000fab8 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    fab8:	b590      	push	{r4, r7, lr}
    faba:	b085      	sub	sp, #20
    fabc:	af00      	add	r7, sp, #0
    fabe:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    fac0:	4b1f      	ldr	r3, [pc, #124]	; (fb40 <usbdc_get_interface+0x88>)
    fac2:	691b      	ldr	r3, [r3, #16]
    fac4:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    fac6:	4b1e      	ldr	r3, [pc, #120]	; (fb40 <usbdc_get_interface+0x88>)
    fac8:	7f5b      	ldrb	r3, [r3, #29]
    faca:	461a      	mov	r2, r3
    facc:	687b      	ldr	r3, [r7, #4]
    face:	889b      	ldrh	r3, [r3, #4]
    fad0:	b29b      	uxth	r3, r3
    fad2:	fa42 f303 	asr.w	r3, r2, r3
    fad6:	f003 0301 	and.w	r3, r3, #1
    fada:	2b00      	cmp	r3, #0
    fadc:	d128      	bne.n	fb30 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    fade:	4b18      	ldr	r3, [pc, #96]	; (fb40 <usbdc_get_interface+0x88>)
    fae0:	695b      	ldr	r3, [r3, #20]
    fae2:	2200      	movs	r2, #0
    fae4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    fae6:	4b16      	ldr	r3, [pc, #88]	; (fb40 <usbdc_get_interface+0x88>)
    fae8:	6959      	ldr	r1, [r3, #20]
    faea:	2300      	movs	r3, #0
    faec:	2201      	movs	r2, #1
    faee:	2000      	movs	r0, #0
    faf0:	4c14      	ldr	r4, [pc, #80]	; (fb44 <usbdc_get_interface+0x8c>)
    faf2:	47a0      	blx	r4
		return true;
    faf4:	2301      	movs	r3, #1
    faf6:	e01f      	b.n	fb38 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    faf8:	68fb      	ldr	r3, [r7, #12]
    fafa:	685b      	ldr	r3, [r3, #4]
    fafc:	687a      	ldr	r2, [r7, #4]
    fafe:	2102      	movs	r1, #2
    fb00:	68f8      	ldr	r0, [r7, #12]
    fb02:	4798      	blx	r3
    fb04:	60b8      	str	r0, [r7, #8]
    fb06:	68bb      	ldr	r3, [r7, #8]
    fb08:	2b00      	cmp	r3, #0
    fb0a:	da03      	bge.n	fb14 <usbdc_get_interface+0x5c>
			func = func->next;
    fb0c:	68fb      	ldr	r3, [r7, #12]
    fb0e:	681b      	ldr	r3, [r3, #0]
    fb10:	60fb      	str	r3, [r7, #12]
    fb12:	e00d      	b.n	fb30 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    fb14:	4b0a      	ldr	r3, [pc, #40]	; (fb40 <usbdc_get_interface+0x88>)
    fb16:	695b      	ldr	r3, [r3, #20]
    fb18:	68ba      	ldr	r2, [r7, #8]
    fb1a:	b2d2      	uxtb	r2, r2
    fb1c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    fb1e:	4b08      	ldr	r3, [pc, #32]	; (fb40 <usbdc_get_interface+0x88>)
    fb20:	6959      	ldr	r1, [r3, #20]
    fb22:	2300      	movs	r3, #0
    fb24:	2201      	movs	r2, #1
    fb26:	2000      	movs	r0, #0
    fb28:	4c06      	ldr	r4, [pc, #24]	; (fb44 <usbdc_get_interface+0x8c>)
    fb2a:	47a0      	blx	r4
			return true;
    fb2c:	2301      	movs	r3, #1
    fb2e:	e003      	b.n	fb38 <usbdc_get_interface+0x80>
	while (NULL != func) {
    fb30:	68fb      	ldr	r3, [r7, #12]
    fb32:	2b00      	cmp	r3, #0
    fb34:	d1e0      	bne.n	faf8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    fb36:	2300      	movs	r3, #0
}
    fb38:	4618      	mov	r0, r3
    fb3a:	3714      	adds	r7, #20
    fb3c:	46bd      	mov	sp, r7
    fb3e:	bd90      	pop	{r4, r7, pc}
    fb40:	20003408 	.word	0x20003408
    fb44:	000102f5 	.word	0x000102f5

0000fb48 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    fb48:	b590      	push	{r4, r7, lr}
    fb4a:	b083      	sub	sp, #12
    fb4c:	af00      	add	r7, sp, #0
    fb4e:	4603      	mov	r3, r0
    fb50:	6039      	str	r1, [r7, #0]
    fb52:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    fb54:	683b      	ldr	r3, [r7, #0]
    fb56:	785b      	ldrb	r3, [r3, #1]
    fb58:	2b0a      	cmp	r3, #10
    fb5a:	d83a      	bhi.n	fbd2 <usbdc_get_req+0x8a>
    fb5c:	a201      	add	r2, pc, #4	; (adr r2, fb64 <usbdc_get_req+0x1c>)
    fb5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fb62:	bf00      	nop
    fb64:	0000fbbb 	.word	0x0000fbbb
    fb68:	0000fbd3 	.word	0x0000fbd3
    fb6c:	0000fbd3 	.word	0x0000fbd3
    fb70:	0000fbd3 	.word	0x0000fbd3
    fb74:	0000fbd3 	.word	0x0000fbd3
    fb78:	0000fbd3 	.word	0x0000fbd3
    fb7c:	0000fb91 	.word	0x0000fb91
    fb80:	0000fbd3 	.word	0x0000fbd3
    fb84:	0000fb9f 	.word	0x0000fb9f
    fb88:	0000fbd3 	.word	0x0000fbd3
    fb8c:	0000fbc9 	.word	0x0000fbc9
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    fb90:	79fb      	ldrb	r3, [r7, #7]
    fb92:	6839      	ldr	r1, [r7, #0]
    fb94:	4618      	mov	r0, r3
    fb96:	4b11      	ldr	r3, [pc, #68]	; (fbdc <usbdc_get_req+0x94>)
    fb98:	4798      	blx	r3
    fb9a:	4603      	mov	r3, r0
    fb9c:	e01a      	b.n	fbd4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    fb9e:	4b10      	ldr	r3, [pc, #64]	; (fbe0 <usbdc_get_req+0x98>)
    fba0:	695b      	ldr	r3, [r3, #20]
    fba2:	4a0f      	ldr	r2, [pc, #60]	; (fbe0 <usbdc_get_req+0x98>)
    fba4:	7ed2      	ldrb	r2, [r2, #27]
    fba6:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    fba8:	4b0d      	ldr	r3, [pc, #52]	; (fbe0 <usbdc_get_req+0x98>)
    fbaa:	6959      	ldr	r1, [r3, #20]
    fbac:	79f8      	ldrb	r0, [r7, #7]
    fbae:	2300      	movs	r3, #0
    fbb0:	2201      	movs	r2, #1
    fbb2:	4c0c      	ldr	r4, [pc, #48]	; (fbe4 <usbdc_get_req+0x9c>)
    fbb4:	47a0      	blx	r4
		return true;
    fbb6:	2301      	movs	r3, #1
    fbb8:	e00c      	b.n	fbd4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    fbba:	79fb      	ldrb	r3, [r7, #7]
    fbbc:	6839      	ldr	r1, [r7, #0]
    fbbe:	4618      	mov	r0, r3
    fbc0:	4b09      	ldr	r3, [pc, #36]	; (fbe8 <usbdc_get_req+0xa0>)
    fbc2:	4798      	blx	r3
    fbc4:	4603      	mov	r3, r0
    fbc6:	e005      	b.n	fbd4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    fbc8:	6838      	ldr	r0, [r7, #0]
    fbca:	4b08      	ldr	r3, [pc, #32]	; (fbec <usbdc_get_req+0xa4>)
    fbcc:	4798      	blx	r3
    fbce:	4603      	mov	r3, r0
    fbd0:	e000      	b.n	fbd4 <usbdc_get_req+0x8c>
	default:
		return false;
    fbd2:	2300      	movs	r3, #0
	}
}
    fbd4:	4618      	mov	r0, r3
    fbd6:	370c      	adds	r7, #12
    fbd8:	46bd      	mov	sp, r7
    fbda:	bd90      	pop	{r4, r7, pc}
    fbdc:	0000f9d1 	.word	0x0000f9d1
    fbe0:	20003408 	.word	0x20003408
    fbe4:	000102f5 	.word	0x000102f5
    fbe8:	0000fa39 	.word	0x0000fa39
    fbec:	0000fab9 	.word	0x0000fab9

0000fbf0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    fbf0:	b590      	push	{r4, r7, lr}
    fbf2:	b083      	sub	sp, #12
    fbf4:	af00      	add	r7, sp, #0
    fbf6:	4603      	mov	r3, r0
    fbf8:	6039      	str	r1, [r7, #0]
    fbfa:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    fbfc:	683b      	ldr	r3, [r7, #0]
    fbfe:	781b      	ldrb	r3, [r3, #0]
    fc00:	f003 031f 	and.w	r3, r3, #31
    fc04:	2b02      	cmp	r3, #2
    fc06:	d116      	bne.n	fc36 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    fc08:	683b      	ldr	r3, [r7, #0]
    fc0a:	88db      	ldrh	r3, [r3, #6]
    fc0c:	b29b      	uxth	r3, r3
    fc0e:	2b00      	cmp	r3, #0
    fc10:	d001      	beq.n	fc16 <usbdc_clear_ftr_req+0x26>
			return false;
    fc12:	2300      	movs	r3, #0
    fc14:	e010      	b.n	fc38 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    fc16:	683b      	ldr	r3, [r7, #0]
    fc18:	889b      	ldrh	r3, [r3, #4]
    fc1a:	b29b      	uxth	r3, r3
    fc1c:	b2db      	uxtb	r3, r3
    fc1e:	2100      	movs	r1, #0
    fc20:	4618      	mov	r0, r3
    fc22:	4b07      	ldr	r3, [pc, #28]	; (fc40 <usbdc_clear_ftr_req+0x50>)
    fc24:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    fc26:	79f8      	ldrb	r0, [r7, #7]
    fc28:	2301      	movs	r3, #1
    fc2a:	2200      	movs	r2, #0
    fc2c:	2100      	movs	r1, #0
    fc2e:	4c05      	ldr	r4, [pc, #20]	; (fc44 <usbdc_clear_ftr_req+0x54>)
    fc30:	47a0      	blx	r4
		return true;
    fc32:	2301      	movs	r3, #1
    fc34:	e000      	b.n	fc38 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    fc36:	2300      	movs	r3, #0
	}
}
    fc38:	4618      	mov	r0, r3
    fc3a:	370c      	adds	r7, #12
    fc3c:	46bd      	mov	sp, r7
    fc3e:	bd90      	pop	{r4, r7, pc}
    fc40:	00006509 	.word	0x00006509
    fc44:	000102f5 	.word	0x000102f5

0000fc48 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    fc48:	b590      	push	{r4, r7, lr}
    fc4a:	b083      	sub	sp, #12
    fc4c:	af00      	add	r7, sp, #0
    fc4e:	4603      	mov	r3, r0
    fc50:	6039      	str	r1, [r7, #0]
    fc52:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    fc54:	683b      	ldr	r3, [r7, #0]
    fc56:	781b      	ldrb	r3, [r3, #0]
    fc58:	f003 031f 	and.w	r3, r3, #31
    fc5c:	2b02      	cmp	r3, #2
    fc5e:	d116      	bne.n	fc8e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    fc60:	683b      	ldr	r3, [r7, #0]
    fc62:	88db      	ldrh	r3, [r3, #6]
    fc64:	b29b      	uxth	r3, r3
    fc66:	2b00      	cmp	r3, #0
    fc68:	d001      	beq.n	fc6e <usbdc_set_ftr_req+0x26>
			return false;
    fc6a:	2300      	movs	r3, #0
    fc6c:	e010      	b.n	fc90 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    fc6e:	683b      	ldr	r3, [r7, #0]
    fc70:	889b      	ldrh	r3, [r3, #4]
    fc72:	b29b      	uxth	r3, r3
    fc74:	b2db      	uxtb	r3, r3
    fc76:	2101      	movs	r1, #1
    fc78:	4618      	mov	r0, r3
    fc7a:	4b07      	ldr	r3, [pc, #28]	; (fc98 <usbdc_set_ftr_req+0x50>)
    fc7c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    fc7e:	79f8      	ldrb	r0, [r7, #7]
    fc80:	2301      	movs	r3, #1
    fc82:	2200      	movs	r2, #0
    fc84:	2100      	movs	r1, #0
    fc86:	4c05      	ldr	r4, [pc, #20]	; (fc9c <usbdc_set_ftr_req+0x54>)
    fc88:	47a0      	blx	r4
		return true;
    fc8a:	2301      	movs	r3, #1
    fc8c:	e000      	b.n	fc90 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    fc8e:	2300      	movs	r3, #0
	}
}
    fc90:	4618      	mov	r0, r3
    fc92:	370c      	adds	r7, #12
    fc94:	46bd      	mov	sp, r7
    fc96:	bd90      	pop	{r4, r7, pc}
    fc98:	00006509 	.word	0x00006509
    fc9c:	000102f5 	.word	0x000102f5

0000fca0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    fca0:	b580      	push	{r7, lr}
    fca2:	b082      	sub	sp, #8
    fca4:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    fca6:	4b0a      	ldr	r3, [pc, #40]	; (fcd0 <usbdc_unconfig+0x30>)
    fca8:	691b      	ldr	r3, [r3, #16]
    fcaa:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    fcac:	e008      	b.n	fcc0 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    fcae:	687b      	ldr	r3, [r7, #4]
    fcb0:	685b      	ldr	r3, [r3, #4]
    fcb2:	2200      	movs	r2, #0
    fcb4:	2101      	movs	r1, #1
    fcb6:	6878      	ldr	r0, [r7, #4]
    fcb8:	4798      	blx	r3
		func = func->next;
    fcba:	687b      	ldr	r3, [r7, #4]
    fcbc:	681b      	ldr	r3, [r3, #0]
    fcbe:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    fcc0:	687b      	ldr	r3, [r7, #4]
    fcc2:	2b00      	cmp	r3, #0
    fcc4:	d1f3      	bne.n	fcae <usbdc_unconfig+0xe>
	}
}
    fcc6:	bf00      	nop
    fcc8:	3708      	adds	r7, #8
    fcca:	46bd      	mov	sp, r7
    fccc:	bd80      	pop	{r7, pc}
    fcce:	bf00      	nop
    fcd0:	20003408 	.word	0x20003408

0000fcd4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    fcd4:	b580      	push	{r7, lr}
    fcd6:	b088      	sub	sp, #32
    fcd8:	af00      	add	r7, sp, #0
    fcda:	4603      	mov	r3, r0
    fcdc:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    fcde:	2300      	movs	r3, #0
    fce0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    fce2:	23ff      	movs	r3, #255	; 0xff
    fce4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    fce6:	79fb      	ldrb	r3, [r7, #7]
    fce8:	2b00      	cmp	r3, #0
    fcea:	d103      	bne.n	fcf4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    fcec:	4b2e      	ldr	r3, [pc, #184]	; (fda8 <usbdc_set_config+0xd4>)
    fcee:	4798      	blx	r3
		return true;
    fcf0:	2301      	movs	r3, #1
    fcf2:	e055      	b.n	fda0 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    fcf4:	69bb      	ldr	r3, [r7, #24]
    fcf6:	2b00      	cmp	r3, #0
    fcf8:	d10a      	bne.n	fd10 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    fcfa:	4b2c      	ldr	r3, [pc, #176]	; (fdac <usbdc_set_config+0xd8>)
    fcfc:	681b      	ldr	r3, [r3, #0]
    fcfe:	6818      	ldr	r0, [r3, #0]
    fd00:	4b2a      	ldr	r3, [pc, #168]	; (fdac <usbdc_set_config+0xd8>)
    fd02:	681b      	ldr	r3, [r3, #0]
    fd04:	685b      	ldr	r3, [r3, #4]
    fd06:	79fa      	ldrb	r2, [r7, #7]
    fd08:	4619      	mov	r1, r3
    fd0a:	4b29      	ldr	r3, [pc, #164]	; (fdb0 <usbdc_set_config+0xdc>)
    fd0c:	4798      	blx	r3
    fd0e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    fd10:	69bb      	ldr	r3, [r7, #24]
    fd12:	2b00      	cmp	r3, #0
    fd14:	d101      	bne.n	fd1a <usbdc_set_config+0x46>
		return false;
    fd16:	2300      	movs	r3, #0
    fd18:	e042      	b.n	fda0 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    fd1a:	69b8      	ldr	r0, [r7, #24]
    fd1c:	4b25      	ldr	r3, [pc, #148]	; (fdb4 <usbdc_set_config+0xe0>)
    fd1e:	4798      	blx	r3
    fd20:	4603      	mov	r3, r0
    fd22:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    fd24:	8abb      	ldrh	r3, [r7, #20]
    fd26:	69ba      	ldr	r2, [r7, #24]
    fd28:	4413      	add	r3, r2
    fd2a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    fd2c:	693b      	ldr	r3, [r7, #16]
    fd2e:	2204      	movs	r2, #4
    fd30:	4619      	mov	r1, r3
    fd32:	69b8      	ldr	r0, [r7, #24]
    fd34:	4b20      	ldr	r3, [pc, #128]	; (fdb8 <usbdc_set_config+0xe4>)
    fd36:	4798      	blx	r3
    fd38:	4603      	mov	r3, r0
    fd3a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    fd3c:	e02c      	b.n	fd98 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    fd3e:	68fb      	ldr	r3, [r7, #12]
    fd40:	3302      	adds	r3, #2
    fd42:	781b      	ldrb	r3, [r3, #0]
    fd44:	7dfa      	ldrb	r2, [r7, #23]
    fd46:	429a      	cmp	r2, r3
    fd48:	d018      	beq.n	fd7c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    fd4a:	68fb      	ldr	r3, [r7, #12]
    fd4c:	789b      	ldrb	r3, [r3, #2]
    fd4e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    fd50:	4b16      	ldr	r3, [pc, #88]	; (fdac <usbdc_set_config+0xd8>)
    fd52:	691b      	ldr	r3, [r3, #16]
    fd54:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    fd56:	e00c      	b.n	fd72 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    fd58:	69fb      	ldr	r3, [r7, #28]
    fd5a:	685b      	ldr	r3, [r3, #4]
    fd5c:	f107 020c 	add.w	r2, r7, #12
    fd60:	2100      	movs	r1, #0
    fd62:	69f8      	ldr	r0, [r7, #28]
    fd64:	4798      	blx	r3
    fd66:	4603      	mov	r3, r0
    fd68:	2b00      	cmp	r3, #0
    fd6a:	d006      	beq.n	fd7a <usbdc_set_config+0xa6>
					func = func->next;
    fd6c:	69fb      	ldr	r3, [r7, #28]
    fd6e:	681b      	ldr	r3, [r3, #0]
    fd70:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    fd72:	69fb      	ldr	r3, [r7, #28]
    fd74:	2b00      	cmp	r3, #0
    fd76:	d1ef      	bne.n	fd58 <usbdc_set_config+0x84>
    fd78:	e000      	b.n	fd7c <usbdc_set_config+0xa8>
				} else {
					break;
    fd7a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    fd7c:	68fb      	ldr	r3, [r7, #12]
    fd7e:	4618      	mov	r0, r3
    fd80:	4b0e      	ldr	r3, [pc, #56]	; (fdbc <usbdc_set_config+0xe8>)
    fd82:	4798      	blx	r3
    fd84:	4603      	mov	r3, r0
    fd86:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    fd88:	68fb      	ldr	r3, [r7, #12]
    fd8a:	6939      	ldr	r1, [r7, #16]
    fd8c:	2204      	movs	r2, #4
    fd8e:	4618      	mov	r0, r3
    fd90:	4b09      	ldr	r3, [pc, #36]	; (fdb8 <usbdc_set_config+0xe4>)
    fd92:	4798      	blx	r3
    fd94:	4603      	mov	r3, r0
    fd96:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    fd98:	68fb      	ldr	r3, [r7, #12]
    fd9a:	2b00      	cmp	r3, #0
    fd9c:	d1cf      	bne.n	fd3e <usbdc_set_config+0x6a>
	}
	return true;
    fd9e:	2301      	movs	r3, #1
}
    fda0:	4618      	mov	r0, r3
    fda2:	3720      	adds	r7, #32
    fda4:	46bd      	mov	sp, r7
    fda6:	bd80      	pop	{r7, pc}
    fda8:	0000fca1 	.word	0x0000fca1
    fdac:	20003408 	.word	0x20003408
    fdb0:	00010645 	.word	0x00010645
    fdb4:	0000f7f1 	.word	0x0000f7f1
    fdb8:	00010585 	.word	0x00010585
    fdbc:	0000f7cd 	.word	0x0000f7cd

0000fdc0 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    fdc0:	b580      	push	{r7, lr}
    fdc2:	b082      	sub	sp, #8
    fdc4:	af00      	add	r7, sp, #0
    fdc6:	4603      	mov	r3, r0
    fdc8:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    fdca:	79fb      	ldrb	r3, [r7, #7]
    fdcc:	4618      	mov	r0, r3
    fdce:	4b03      	ldr	r3, [pc, #12]	; (fddc <usbdc_set_address+0x1c>)
    fdd0:	4798      	blx	r3
}
    fdd2:	bf00      	nop
    fdd4:	3708      	adds	r7, #8
    fdd6:	46bd      	mov	sp, r7
    fdd8:	bd80      	pop	{r7, pc}
    fdda:	bf00      	nop
    fddc:	00006125 	.word	0x00006125

0000fde0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    fde0:	b590      	push	{r4, r7, lr}
    fde2:	b087      	sub	sp, #28
    fde4:	af00      	add	r7, sp, #0
    fde6:	4603      	mov	r3, r0
    fde8:	460a      	mov	r2, r1
    fdea:	80fb      	strh	r3, [r7, #6]
    fdec:	4613      	mov	r3, r2
    fdee:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    fdf0:	2300      	movs	r3, #0
    fdf2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    fdf4:	693b      	ldr	r3, [r7, #16]
    fdf6:	2b00      	cmp	r3, #0
    fdf8:	d10b      	bne.n	fe12 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    fdfa:	4b43      	ldr	r3, [pc, #268]	; (ff08 <usbdc_set_interface+0x128>)
    fdfc:	681b      	ldr	r3, [r3, #0]
    fdfe:	6818      	ldr	r0, [r3, #0]
    fe00:	4b41      	ldr	r3, [pc, #260]	; (ff08 <usbdc_set_interface+0x128>)
    fe02:	681b      	ldr	r3, [r3, #0]
    fe04:	6859      	ldr	r1, [r3, #4]
    fe06:	4b40      	ldr	r3, [pc, #256]	; (ff08 <usbdc_set_interface+0x128>)
    fe08:	7edb      	ldrb	r3, [r3, #27]
    fe0a:	461a      	mov	r2, r3
    fe0c:	4b3f      	ldr	r3, [pc, #252]	; (ff0c <usbdc_set_interface+0x12c>)
    fe0e:	4798      	blx	r3
    fe10:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    fe12:	693b      	ldr	r3, [r7, #16]
    fe14:	2b00      	cmp	r3, #0
    fe16:	d101      	bne.n	fe1c <usbdc_set_interface+0x3c>
		return false;
    fe18:	2300      	movs	r3, #0
    fe1a:	e071      	b.n	ff00 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    fe1c:	693b      	ldr	r3, [r7, #16]
    fe1e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    fe20:	6938      	ldr	r0, [r7, #16]
    fe22:	4b3b      	ldr	r3, [pc, #236]	; (ff10 <usbdc_set_interface+0x130>)
    fe24:	4798      	blx	r3
    fe26:	4603      	mov	r3, r0
    fe28:	461a      	mov	r2, r3
    fe2a:	693b      	ldr	r3, [r7, #16]
    fe2c:	4413      	add	r3, r2
    fe2e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    fe30:	68bb      	ldr	r3, [r7, #8]
    fe32:	68f9      	ldr	r1, [r7, #12]
    fe34:	2204      	movs	r2, #4
    fe36:	4618      	mov	r0, r3
    fe38:	4b36      	ldr	r3, [pc, #216]	; (ff14 <usbdc_set_interface+0x134>)
    fe3a:	4798      	blx	r3
    fe3c:	6138      	str	r0, [r7, #16]
    fe3e:	693b      	ldr	r3, [r7, #16]
    fe40:	2b00      	cmp	r3, #0
    fe42:	d113      	bne.n	fe6c <usbdc_set_interface+0x8c>
		return false;
    fe44:	2300      	movs	r3, #0
    fe46:	e05b      	b.n	ff00 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    fe48:	68bb      	ldr	r3, [r7, #8]
    fe4a:	4618      	mov	r0, r3
    fe4c:	4b32      	ldr	r3, [pc, #200]	; (ff18 <usbdc_set_interface+0x138>)
    fe4e:	4798      	blx	r3
    fe50:	4603      	mov	r3, r0
    fe52:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    fe54:	68bb      	ldr	r3, [r7, #8]
    fe56:	68f9      	ldr	r1, [r7, #12]
    fe58:	2204      	movs	r2, #4
    fe5a:	4618      	mov	r0, r3
    fe5c:	4b2d      	ldr	r3, [pc, #180]	; (ff14 <usbdc_set_interface+0x134>)
    fe5e:	4798      	blx	r3
    fe60:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    fe62:	693b      	ldr	r3, [r7, #16]
    fe64:	2b00      	cmp	r3, #0
    fe66:	d101      	bne.n	fe6c <usbdc_set_interface+0x8c>
			return false;
    fe68:	2300      	movs	r3, #0
    fe6a:	e049      	b.n	ff00 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    fe6c:	693b      	ldr	r3, [r7, #16]
    fe6e:	3302      	adds	r3, #2
    fe70:	781b      	ldrb	r3, [r3, #0]
    fe72:	b29b      	uxth	r3, r3
    fe74:	88ba      	ldrh	r2, [r7, #4]
    fe76:	429a      	cmp	r2, r3
    fe78:	d1e6      	bne.n	fe48 <usbdc_set_interface+0x68>
    fe7a:	693b      	ldr	r3, [r7, #16]
    fe7c:	3303      	adds	r3, #3
    fe7e:	781b      	ldrb	r3, [r3, #0]
    fe80:	b29b      	uxth	r3, r3
    fe82:	88fa      	ldrh	r2, [r7, #6]
    fe84:	429a      	cmp	r2, r3
    fe86:	d1df      	bne.n	fe48 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    fe88:	693b      	ldr	r3, [r7, #16]
    fe8a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    fe8c:	4b1e      	ldr	r3, [pc, #120]	; (ff08 <usbdc_set_interface+0x128>)
    fe8e:	691b      	ldr	r3, [r3, #16]
    fe90:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    fe92:	e031      	b.n	fef8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    fe94:	697b      	ldr	r3, [r7, #20]
    fe96:	685b      	ldr	r3, [r3, #4]
    fe98:	f107 0208 	add.w	r2, r7, #8
    fe9c:	2101      	movs	r1, #1
    fe9e:	6978      	ldr	r0, [r7, #20]
    fea0:	4798      	blx	r3
    fea2:	4603      	mov	r3, r0
    fea4:	2b00      	cmp	r3, #0
    fea6:	d003      	beq.n	feb0 <usbdc_set_interface+0xd0>
			func = func->next;
    fea8:	697b      	ldr	r3, [r7, #20]
    feaa:	681b      	ldr	r3, [r3, #0]
    feac:	617b      	str	r3, [r7, #20]
    feae:	e023      	b.n	fef8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    feb0:	697b      	ldr	r3, [r7, #20]
    feb2:	685b      	ldr	r3, [r3, #4]
    feb4:	f107 0208 	add.w	r2, r7, #8
    feb8:	2100      	movs	r1, #0
    feba:	6978      	ldr	r0, [r7, #20]
    febc:	4798      	blx	r3
    febe:	4603      	mov	r3, r0
    fec0:	2b00      	cmp	r3, #0
    fec2:	d117      	bne.n	fef4 <usbdc_set_interface+0x114>
			if (alt_set) {
    fec4:	88fb      	ldrh	r3, [r7, #6]
    fec6:	2b00      	cmp	r3, #0
    fec8:	d00c      	beq.n	fee4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    feca:	4b0f      	ldr	r3, [pc, #60]	; (ff08 <usbdc_set_interface+0x128>)
    fecc:	7f5b      	ldrb	r3, [r3, #29]
    fece:	b25a      	sxtb	r2, r3
    fed0:	88bb      	ldrh	r3, [r7, #4]
    fed2:	2101      	movs	r1, #1
    fed4:	fa01 f303 	lsl.w	r3, r1, r3
    fed8:	b25b      	sxtb	r3, r3
    feda:	4313      	orrs	r3, r2
    fedc:	b25b      	sxtb	r3, r3
    fede:	b2da      	uxtb	r2, r3
    fee0:	4b09      	ldr	r3, [pc, #36]	; (ff08 <usbdc_set_interface+0x128>)
    fee2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    fee4:	2300      	movs	r3, #0
    fee6:	2200      	movs	r2, #0
    fee8:	2100      	movs	r1, #0
    feea:	2000      	movs	r0, #0
    feec:	4c0b      	ldr	r4, [pc, #44]	; (ff1c <usbdc_set_interface+0x13c>)
    feee:	47a0      	blx	r4
			return true;
    fef0:	2301      	movs	r3, #1
    fef2:	e005      	b.n	ff00 <usbdc_set_interface+0x120>
		} else {
			return false;
    fef4:	2300      	movs	r3, #0
    fef6:	e003      	b.n	ff00 <usbdc_set_interface+0x120>
	while (NULL != func) {
    fef8:	697b      	ldr	r3, [r7, #20]
    fefa:	2b00      	cmp	r3, #0
    fefc:	d1ca      	bne.n	fe94 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    fefe:	2300      	movs	r3, #0
}
    ff00:	4618      	mov	r0, r3
    ff02:	371c      	adds	r7, #28
    ff04:	46bd      	mov	sp, r7
    ff06:	bd90      	pop	{r4, r7, pc}
    ff08:	20003408 	.word	0x20003408
    ff0c:	00010645 	.word	0x00010645
    ff10:	0000f7f1 	.word	0x0000f7f1
    ff14:	00010585 	.word	0x00010585
    ff18:	0000f7cd 	.word	0x0000f7cd
    ff1c:	000102f5 	.word	0x000102f5

0000ff20 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    ff20:	b590      	push	{r4, r7, lr}
    ff22:	b083      	sub	sp, #12
    ff24:	af00      	add	r7, sp, #0
    ff26:	4603      	mov	r3, r0
    ff28:	6039      	str	r1, [r7, #0]
    ff2a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    ff2c:	683b      	ldr	r3, [r7, #0]
    ff2e:	785b      	ldrb	r3, [r3, #1]
    ff30:	3b01      	subs	r3, #1
    ff32:	2b0a      	cmp	r3, #10
    ff34:	d85b      	bhi.n	ffee <usbdc_set_req+0xce>
    ff36:	a201      	add	r2, pc, #4	; (adr r2, ff3c <usbdc_set_req+0x1c>)
    ff38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ff3c:	0000ffbb 	.word	0x0000ffbb
    ff40:	0000ffef 	.word	0x0000ffef
    ff44:	0000ffc9 	.word	0x0000ffc9
    ff48:	0000ffef 	.word	0x0000ffef
    ff4c:	0000ff69 	.word	0x0000ff69
    ff50:	0000ffef 	.word	0x0000ffef
    ff54:	0000ffef 	.word	0x0000ffef
    ff58:	0000ffef 	.word	0x0000ffef
    ff5c:	0000ff83 	.word	0x0000ff83
    ff60:	0000ffef 	.word	0x0000ffef
    ff64:	0000ffd7 	.word	0x0000ffd7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    ff68:	79f8      	ldrb	r0, [r7, #7]
    ff6a:	2301      	movs	r3, #1
    ff6c:	2200      	movs	r2, #0
    ff6e:	2100      	movs	r1, #0
    ff70:	4c21      	ldr	r4, [pc, #132]	; (fff8 <usbdc_set_req+0xd8>)
    ff72:	47a0      	blx	r4
    ff74:	4603      	mov	r3, r0
    ff76:	2b00      	cmp	r3, #0
    ff78:	bf0c      	ite	eq
    ff7a:	2301      	moveq	r3, #1
    ff7c:	2300      	movne	r3, #0
    ff7e:	b2db      	uxtb	r3, r3
    ff80:	e036      	b.n	fff0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    ff82:	683b      	ldr	r3, [r7, #0]
    ff84:	885b      	ldrh	r3, [r3, #2]
    ff86:	b29b      	uxth	r3, r3
    ff88:	b2db      	uxtb	r3, r3
    ff8a:	4618      	mov	r0, r3
    ff8c:	4b1b      	ldr	r3, [pc, #108]	; (fffc <usbdc_set_req+0xdc>)
    ff8e:	4798      	blx	r3
    ff90:	4603      	mov	r3, r0
    ff92:	f083 0301 	eor.w	r3, r3, #1
    ff96:	b2db      	uxtb	r3, r3
    ff98:	2b00      	cmp	r3, #0
    ff9a:	d001      	beq.n	ffa0 <usbdc_set_req+0x80>
			return false;
    ff9c:	2300      	movs	r3, #0
    ff9e:	e027      	b.n	fff0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    ffa0:	79f8      	ldrb	r0, [r7, #7]
    ffa2:	2301      	movs	r3, #1
    ffa4:	2200      	movs	r2, #0
    ffa6:	2100      	movs	r1, #0
    ffa8:	4c13      	ldr	r4, [pc, #76]	; (fff8 <usbdc_set_req+0xd8>)
    ffaa:	47a0      	blx	r4
    ffac:	4603      	mov	r3, r0
    ffae:	2b00      	cmp	r3, #0
    ffb0:	bf0c      	ite	eq
    ffb2:	2301      	moveq	r3, #1
    ffb4:	2300      	movne	r3, #0
    ffb6:	b2db      	uxtb	r3, r3
    ffb8:	e01a      	b.n	fff0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    ffba:	79fb      	ldrb	r3, [r7, #7]
    ffbc:	6839      	ldr	r1, [r7, #0]
    ffbe:	4618      	mov	r0, r3
    ffc0:	4b0f      	ldr	r3, [pc, #60]	; (10000 <STACK_SIZE>)
    ffc2:	4798      	blx	r3
    ffc4:	4603      	mov	r3, r0
    ffc6:	e013      	b.n	fff0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    ffc8:	79fb      	ldrb	r3, [r7, #7]
    ffca:	6839      	ldr	r1, [r7, #0]
    ffcc:	4618      	mov	r0, r3
    ffce:	4b0d      	ldr	r3, [pc, #52]	; (10004 <STACK_SIZE+0x4>)
    ffd0:	4798      	blx	r3
    ffd2:	4603      	mov	r3, r0
    ffd4:	e00c      	b.n	fff0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    ffd6:	683b      	ldr	r3, [r7, #0]
    ffd8:	885b      	ldrh	r3, [r3, #2]
    ffda:	b29a      	uxth	r2, r3
    ffdc:	683b      	ldr	r3, [r7, #0]
    ffde:	889b      	ldrh	r3, [r3, #4]
    ffe0:	b29b      	uxth	r3, r3
    ffe2:	4619      	mov	r1, r3
    ffe4:	4610      	mov	r0, r2
    ffe6:	4b08      	ldr	r3, [pc, #32]	; (10008 <STACK_SIZE+0x8>)
    ffe8:	4798      	blx	r3
    ffea:	4603      	mov	r3, r0
    ffec:	e000      	b.n	fff0 <usbdc_set_req+0xd0>
	default:
		return false;
    ffee:	2300      	movs	r3, #0
	}
}
    fff0:	4618      	mov	r0, r3
    fff2:	370c      	adds	r7, #12
    fff4:	46bd      	mov	sp, r7
    fff6:	bd90      	pop	{r4, r7, pc}
    fff8:	000102f5 	.word	0x000102f5
    fffc:	0000fcd5 	.word	0x0000fcd5
   10000:	0000fbf1 	.word	0x0000fbf1
   10004:	0000fc49 	.word	0x0000fc49
   10008:	0000fde1 	.word	0x0000fde1

0001000c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
   1000c:	b580      	push	{r7, lr}
   1000e:	b082      	sub	sp, #8
   10010:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   10012:	4b0a      	ldr	r3, [pc, #40]	; (1003c <usbdc_sof_notify+0x30>)
   10014:	685b      	ldr	r3, [r3, #4]
   10016:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
   10018:	e009      	b.n	1002e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
   1001a:	687b      	ldr	r3, [r7, #4]
   1001c:	685b      	ldr	r3, [r3, #4]
   1001e:	2b00      	cmp	r3, #0
   10020:	d002      	beq.n	10028 <usbdc_sof_notify+0x1c>
			sof->cb();
   10022:	687b      	ldr	r3, [r7, #4]
   10024:	685b      	ldr	r3, [r3, #4]
   10026:	4798      	blx	r3
		}
		sof = sof->next;
   10028:	687b      	ldr	r3, [r7, #4]
   1002a:	681b      	ldr	r3, [r3, #0]
   1002c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
   1002e:	687b      	ldr	r3, [r7, #4]
   10030:	2b00      	cmp	r3, #0
   10032:	d1f2      	bne.n	1001a <usbdc_sof_notify+0xe>
	}
}
   10034:	bf00      	nop
   10036:	3708      	adds	r7, #8
   10038:	46bd      	mov	sp, r7
   1003a:	bd80      	pop	{r7, pc}
   1003c:	20003408 	.word	0x20003408

00010040 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
   10040:	b580      	push	{r7, lr}
   10042:	b084      	sub	sp, #16
   10044:	af00      	add	r7, sp, #0
   10046:	4603      	mov	r3, r0
   10048:	6039      	str	r1, [r7, #0]
   1004a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   1004c:	4b0b      	ldr	r3, [pc, #44]	; (1007c <usbdc_change_notify+0x3c>)
   1004e:	68db      	ldr	r3, [r3, #12]
   10050:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
   10052:	e00c      	b.n	1006e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
   10054:	68fb      	ldr	r3, [r7, #12]
   10056:	685b      	ldr	r3, [r3, #4]
   10058:	2b00      	cmp	r3, #0
   1005a:	d005      	beq.n	10068 <usbdc_change_notify+0x28>
			cg->cb(change, value);
   1005c:	68fb      	ldr	r3, [r7, #12]
   1005e:	685b      	ldr	r3, [r3, #4]
   10060:	79fa      	ldrb	r2, [r7, #7]
   10062:	6839      	ldr	r1, [r7, #0]
   10064:	4610      	mov	r0, r2
   10066:	4798      	blx	r3
		}
		cg = cg->next;
   10068:	68fb      	ldr	r3, [r7, #12]
   1006a:	681b      	ldr	r3, [r3, #0]
   1006c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
   1006e:	68fb      	ldr	r3, [r7, #12]
   10070:	2b00      	cmp	r3, #0
   10072:	d1ef      	bne.n	10054 <usbdc_change_notify+0x14>
	}
}
   10074:	bf00      	nop
   10076:	3710      	adds	r7, #16
   10078:	46bd      	mov	sp, r7
   1007a:	bd80      	pop	{r7, pc}
   1007c:	20003408 	.word	0x20003408

00010080 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   10080:	b580      	push	{r7, lr}
   10082:	b084      	sub	sp, #16
   10084:	af00      	add	r7, sp, #0
   10086:	4603      	mov	r3, r0
   10088:	6039      	str	r1, [r7, #0]
   1008a:	71fb      	strb	r3, [r7, #7]
   1008c:	4613      	mov	r3, r2
   1008e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   10090:	4b12      	ldr	r3, [pc, #72]	; (100dc <usbdc_request_handler+0x5c>)
   10092:	689b      	ldr	r3, [r3, #8]
   10094:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
   10096:	e019      	b.n	100cc <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
   10098:	68fb      	ldr	r3, [r7, #12]
   1009a:	685b      	ldr	r3, [r3, #4]
   1009c:	2b00      	cmp	r3, #0
   1009e:	d012      	beq.n	100c6 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
   100a0:	68fb      	ldr	r3, [r7, #12]
   100a2:	685b      	ldr	r3, [r3, #4]
   100a4:	79ba      	ldrb	r2, [r7, #6]
   100a6:	79f8      	ldrb	r0, [r7, #7]
   100a8:	6839      	ldr	r1, [r7, #0]
   100aa:	4798      	blx	r3
   100ac:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
   100ae:	68bb      	ldr	r3, [r7, #8]
   100b0:	2b00      	cmp	r3, #0
   100b2:	d101      	bne.n	100b8 <usbdc_request_handler+0x38>
				return true;
   100b4:	2301      	movs	r3, #1
   100b6:	e00d      	b.n	100d4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
   100b8:	68bb      	ldr	r3, [r7, #8]
   100ba:	f113 0f0a 	cmn.w	r3, #10
   100be:	d002      	beq.n	100c6 <usbdc_request_handler+0x46>
				return -1;
   100c0:	f04f 33ff 	mov.w	r3, #4294967295
   100c4:	e006      	b.n	100d4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
   100c6:	68fb      	ldr	r3, [r7, #12]
   100c8:	681b      	ldr	r3, [r3, #0]
   100ca:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
   100cc:	68fb      	ldr	r3, [r7, #12]
   100ce:	2b00      	cmp	r3, #0
   100d0:	d1e2      	bne.n	10098 <usbdc_request_handler+0x18>
	}
	return false;
   100d2:	2300      	movs	r3, #0
}
   100d4:	4618      	mov	r0, r3
   100d6:	3710      	adds	r7, #16
   100d8:	46bd      	mov	sp, r7
   100da:	bd80      	pop	{r7, pc}
   100dc:	20003408 	.word	0x20003408

000100e0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   100e0:	b580      	push	{r7, lr}
   100e2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
   100e4:	4b01      	ldr	r3, [pc, #4]	; (100ec <usbd_sof_cb+0xc>)
   100e6:	4798      	blx	r3
}
   100e8:	bf00      	nop
   100ea:	bd80      	pop	{r7, pc}
   100ec:	0001000d 	.word	0x0001000d

000100f0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
   100f0:	b580      	push	{r7, lr}
   100f2:	b082      	sub	sp, #8
   100f4:	af00      	add	r7, sp, #0
   100f6:	4603      	mov	r3, r0
   100f8:	6039      	str	r1, [r7, #0]
   100fa:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   100fc:	79fb      	ldrb	r3, [r7, #7]
   100fe:	2200      	movs	r2, #0
   10100:	6839      	ldr	r1, [r7, #0]
   10102:	4618      	mov	r0, r3
   10104:	4b14      	ldr	r3, [pc, #80]	; (10158 <usbdc_cb_ctl_req+0x68>)
   10106:	4798      	blx	r3
   10108:	4603      	mov	r3, r0
   1010a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1010e:	d00b      	beq.n	10128 <usbdc_cb_ctl_req+0x38>
   10110:	2b01      	cmp	r3, #1
   10112:	d007      	beq.n	10124 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
   10114:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   10116:	683b      	ldr	r3, [r7, #0]
   10118:	781b      	ldrb	r3, [r3, #0]
   1011a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   1011e:	2b00      	cmp	r3, #0
   10120:	d007      	beq.n	10132 <usbdc_cb_ctl_req+0x42>
   10122:	e003      	b.n	1012c <usbdc_cb_ctl_req+0x3c>
		return true;
   10124:	2301      	movs	r3, #1
   10126:	e013      	b.n	10150 <usbdc_cb_ctl_req+0x60>
		return false;
   10128:	2300      	movs	r3, #0
   1012a:	e011      	b.n	10150 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   1012c:	2b80      	cmp	r3, #128	; 0x80
   1012e:	d007      	beq.n	10140 <usbdc_cb_ctl_req+0x50>
   10130:	e00d      	b.n	1014e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
   10132:	79fb      	ldrb	r3, [r7, #7]
   10134:	6839      	ldr	r1, [r7, #0]
   10136:	4618      	mov	r0, r3
   10138:	4b08      	ldr	r3, [pc, #32]	; (1015c <usbdc_cb_ctl_req+0x6c>)
   1013a:	4798      	blx	r3
   1013c:	4603      	mov	r3, r0
   1013e:	e007      	b.n	10150 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
   10140:	79fb      	ldrb	r3, [r7, #7]
   10142:	6839      	ldr	r1, [r7, #0]
   10144:	4618      	mov	r0, r3
   10146:	4b06      	ldr	r3, [pc, #24]	; (10160 <usbdc_cb_ctl_req+0x70>)
   10148:	4798      	blx	r3
   1014a:	4603      	mov	r3, r0
   1014c:	e000      	b.n	10150 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
   1014e:	2300      	movs	r3, #0
	}
}
   10150:	4618      	mov	r0, r3
   10152:	3708      	adds	r7, #8
   10154:	46bd      	mov	sp, r7
   10156:	bd80      	pop	{r7, pc}
   10158:	00010081 	.word	0x00010081
   1015c:	0000ff21 	.word	0x0000ff21
   10160:	0000fb49 	.word	0x0000fb49

00010164 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
   10164:	b580      	push	{r7, lr}
   10166:	b082      	sub	sp, #8
   10168:	af00      	add	r7, sp, #0
   1016a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   1016c:	687b      	ldr	r3, [r7, #4]
   1016e:	781b      	ldrb	r3, [r3, #0]
   10170:	2b00      	cmp	r3, #0
   10172:	d135      	bne.n	101e0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
   10174:	687b      	ldr	r3, [r7, #4]
   10176:	785b      	ldrb	r3, [r3, #1]
   10178:	2b05      	cmp	r3, #5
   1017a:	d019      	beq.n	101b0 <usbdc_ctrl_status_end+0x4c>
   1017c:	2b09      	cmp	r3, #9
   1017e:	d000      	beq.n	10182 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
   10180:	e02f      	b.n	101e2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
   10182:	687b      	ldr	r3, [r7, #4]
   10184:	885b      	ldrh	r3, [r3, #2]
   10186:	b29b      	uxth	r3, r3
   10188:	b2da      	uxtb	r2, r3
   1018a:	4b17      	ldr	r3, [pc, #92]	; (101e8 <usbdc_ctrl_status_end+0x84>)
   1018c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   1018e:	687b      	ldr	r3, [r7, #4]
   10190:	885b      	ldrh	r3, [r3, #2]
   10192:	b29b      	uxth	r3, r3
   10194:	2b00      	cmp	r3, #0
   10196:	d001      	beq.n	1019c <usbdc_ctrl_status_end+0x38>
   10198:	2204      	movs	r2, #4
   1019a:	e000      	b.n	1019e <usbdc_ctrl_status_end+0x3a>
   1019c:	2203      	movs	r2, #3
   1019e:	4b12      	ldr	r3, [pc, #72]	; (101e8 <usbdc_ctrl_status_end+0x84>)
   101a0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   101a2:	4b11      	ldr	r3, [pc, #68]	; (101e8 <usbdc_ctrl_status_end+0x84>)
   101a4:	7e9b      	ldrb	r3, [r3, #26]
   101a6:	4619      	mov	r1, r3
   101a8:	2001      	movs	r0, #1
   101aa:	4b10      	ldr	r3, [pc, #64]	; (101ec <usbdc_ctrl_status_end+0x88>)
   101ac:	4798      	blx	r3
		break;
   101ae:	e018      	b.n	101e2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
   101b0:	687b      	ldr	r3, [r7, #4]
   101b2:	885b      	ldrh	r3, [r3, #2]
   101b4:	b29b      	uxth	r3, r3
   101b6:	b2db      	uxtb	r3, r3
   101b8:	4618      	mov	r0, r3
   101ba:	4b0d      	ldr	r3, [pc, #52]	; (101f0 <usbdc_ctrl_status_end+0x8c>)
   101bc:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   101be:	687b      	ldr	r3, [r7, #4]
   101c0:	885b      	ldrh	r3, [r3, #2]
   101c2:	b29b      	uxth	r3, r3
   101c4:	2b00      	cmp	r3, #0
   101c6:	d001      	beq.n	101cc <usbdc_ctrl_status_end+0x68>
   101c8:	2203      	movs	r2, #3
   101ca:	e000      	b.n	101ce <usbdc_ctrl_status_end+0x6a>
   101cc:	2202      	movs	r2, #2
   101ce:	4b06      	ldr	r3, [pc, #24]	; (101e8 <usbdc_ctrl_status_end+0x84>)
   101d0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   101d2:	4b05      	ldr	r3, [pc, #20]	; (101e8 <usbdc_ctrl_status_end+0x84>)
   101d4:	7e9b      	ldrb	r3, [r3, #26]
   101d6:	4619      	mov	r1, r3
   101d8:	2001      	movs	r0, #1
   101da:	4b04      	ldr	r3, [pc, #16]	; (101ec <usbdc_ctrl_status_end+0x88>)
   101dc:	4798      	blx	r3
		break;
   101de:	e000      	b.n	101e2 <usbdc_ctrl_status_end+0x7e>
		return;
   101e0:	bf00      	nop
	}
}
   101e2:	3708      	adds	r7, #8
   101e4:	46bd      	mov	sp, r7
   101e6:	bd80      	pop	{r7, pc}
   101e8:	20003408 	.word	0x20003408
   101ec:	00010041 	.word	0x00010041
   101f0:	0000fdc1 	.word	0x0000fdc1

000101f4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
   101f4:	b580      	push	{r7, lr}
   101f6:	b082      	sub	sp, #8
   101f8:	af00      	add	r7, sp, #0
   101fa:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   101fc:	2201      	movs	r2, #1
   101fe:	6879      	ldr	r1, [r7, #4]
   10200:	2000      	movs	r0, #0
   10202:	4b03      	ldr	r3, [pc, #12]	; (10210 <usbdc_ctrl_data_end+0x1c>)
   10204:	4798      	blx	r3
	return false;
   10206:	2300      	movs	r3, #0
}
   10208:	4618      	mov	r0, r3
   1020a:	3708      	adds	r7, #8
   1020c:	46bd      	mov	sp, r7
   1020e:	bd80      	pop	{r7, pc}
   10210:	00010081 	.word	0x00010081

00010214 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   10214:	b580      	push	{r7, lr}
   10216:	b082      	sub	sp, #8
   10218:	af00      	add	r7, sp, #0
   1021a:	4603      	mov	r3, r0
   1021c:	603a      	str	r2, [r7, #0]
   1021e:	71fb      	strb	r3, [r7, #7]
   10220:	460b      	mov	r3, r1
   10222:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
   10224:	79bb      	ldrb	r3, [r7, #6]
   10226:	2b00      	cmp	r3, #0
   10228:	d002      	beq.n	10230 <usbdc_cb_ctl_done+0x1c>
   1022a:	2b01      	cmp	r3, #1
   1022c:	d004      	beq.n	10238 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
   1022e:	e008      	b.n	10242 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
   10230:	6838      	ldr	r0, [r7, #0]
   10232:	4b06      	ldr	r3, [pc, #24]	; (1024c <usbdc_cb_ctl_done+0x38>)
   10234:	4798      	blx	r3
		break;
   10236:	e004      	b.n	10242 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
   10238:	6838      	ldr	r0, [r7, #0]
   1023a:	4b05      	ldr	r3, [pc, #20]	; (10250 <usbdc_cb_ctl_done+0x3c>)
   1023c:	4798      	blx	r3
   1023e:	4603      	mov	r3, r0
   10240:	e000      	b.n	10244 <usbdc_cb_ctl_done+0x30>
	}
	return false;
   10242:	2300      	movs	r3, #0
}
   10244:	4618      	mov	r0, r3
   10246:	3708      	adds	r7, #8
   10248:	46bd      	mov	sp, r7
   1024a:	bd80      	pop	{r7, pc}
   1024c:	00010165 	.word	0x00010165
   10250:	000101f5 	.word	0x000101f5

00010254 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   10254:	b580      	push	{r7, lr}
   10256:	af00      	add	r7, sp, #0
	usbdc_unconfig();
   10258:	4b10      	ldr	r3, [pc, #64]	; (1029c <usbdc_reset+0x48>)
   1025a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
   1025c:	4b10      	ldr	r3, [pc, #64]	; (102a0 <usbdc_reset+0x4c>)
   1025e:	2202      	movs	r2, #2
   10260:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
   10262:	4b0f      	ldr	r3, [pc, #60]	; (102a0 <usbdc_reset+0x4c>)
   10264:	2200      	movs	r2, #0
   10266:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
   10268:	4b0d      	ldr	r3, [pc, #52]	; (102a0 <usbdc_reset+0x4c>)
   1026a:	2200      	movs	r2, #0
   1026c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
   1026e:	2000      	movs	r0, #0
   10270:	4b0c      	ldr	r3, [pc, #48]	; (102a4 <usbdc_reset+0x50>)
   10272:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   10274:	4b0a      	ldr	r3, [pc, #40]	; (102a0 <usbdc_reset+0x4c>)
   10276:	7f1b      	ldrb	r3, [r3, #28]
   10278:	4618      	mov	r0, r3
   1027a:	4b0b      	ldr	r3, [pc, #44]	; (102a8 <usbdc_reset+0x54>)
   1027c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   1027e:	4a0b      	ldr	r2, [pc, #44]	; (102ac <usbdc_reset+0x58>)
   10280:	2100      	movs	r1, #0
   10282:	2000      	movs	r0, #0
   10284:	4b0a      	ldr	r3, [pc, #40]	; (102b0 <usbdc_reset+0x5c>)
   10286:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   10288:	4a0a      	ldr	r2, [pc, #40]	; (102b4 <usbdc_reset+0x60>)
   1028a:	2102      	movs	r1, #2
   1028c:	2000      	movs	r0, #0
   1028e:	4b08      	ldr	r3, [pc, #32]	; (102b0 <usbdc_reset+0x5c>)
   10290:	4798      	blx	r3
	usb_d_ep_enable(0);
   10292:	2000      	movs	r0, #0
   10294:	4b08      	ldr	r3, [pc, #32]	; (102b8 <usbdc_reset+0x64>)
   10296:	4798      	blx	r3
}
   10298:	bf00      	nop
   1029a:	bd80      	pop	{r7, pc}
   1029c:	0000fca1 	.word	0x0000fca1
   102a0:	20003408 	.word	0x20003408
   102a4:	00006209 	.word	0x00006209
   102a8:	00006145 	.word	0x00006145
   102ac:	000100f1 	.word	0x000100f1
   102b0:	0000655d 	.word	0x0000655d
   102b4:	00010215 	.word	0x00010215
   102b8:	00006259 	.word	0x00006259

000102bc <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
   102bc:	b580      	push	{r7, lr}
   102be:	b082      	sub	sp, #8
   102c0:	af00      	add	r7, sp, #0
   102c2:	4603      	mov	r3, r0
   102c4:	6039      	str	r1, [r7, #0]
   102c6:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
   102c8:	79fb      	ldrb	r3, [r7, #7]
   102ca:	2b00      	cmp	r3, #0
   102cc:	d002      	beq.n	102d4 <usbd_event_cb+0x18>
   102ce:	2b01      	cmp	r3, #1
   102d0:	d005      	beq.n	102de <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   102d2:	e007      	b.n	102e4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
   102d4:	6839      	ldr	r1, [r7, #0]
   102d6:	2000      	movs	r0, #0
   102d8:	4b04      	ldr	r3, [pc, #16]	; (102ec <usbd_event_cb+0x30>)
   102da:	4798      	blx	r3
		break;
   102dc:	e002      	b.n	102e4 <usbd_event_cb+0x28>
		usbdc_reset();
   102de:	4b04      	ldr	r3, [pc, #16]	; (102f0 <usbd_event_cb+0x34>)
   102e0:	4798      	blx	r3
		break;
   102e2:	bf00      	nop
	}
}
   102e4:	bf00      	nop
   102e6:	3708      	adds	r7, #8
   102e8:	46bd      	mov	sp, r7
   102ea:	bd80      	pop	{r7, pc}
   102ec:	00010041 	.word	0x00010041
   102f0:	00010255 	.word	0x00010255

000102f4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   102f4:	b580      	push	{r7, lr}
   102f6:	b088      	sub	sp, #32
   102f8:	af00      	add	r7, sp, #0
   102fa:	60b9      	str	r1, [r7, #8]
   102fc:	607a      	str	r2, [r7, #4]
   102fe:	461a      	mov	r2, r3
   10300:	4603      	mov	r3, r0
   10302:	73fb      	strb	r3, [r7, #15]
   10304:	4613      	mov	r3, r2
   10306:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   10308:	68bb      	ldr	r3, [r7, #8]
   1030a:	617b      	str	r3, [r7, #20]
   1030c:	687b      	ldr	r3, [r7, #4]
   1030e:	61bb      	str	r3, [r7, #24]
   10310:	7bfb      	ldrb	r3, [r7, #15]
   10312:	773b      	strb	r3, [r7, #28]
   10314:	7bbb      	ldrb	r3, [r7, #14]
   10316:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   10318:	f107 0314 	add.w	r3, r7, #20
   1031c:	4618      	mov	r0, r3
   1031e:	4b03      	ldr	r3, [pc, #12]	; (1032c <usbdc_xfer+0x38>)
   10320:	4798      	blx	r3
   10322:	4603      	mov	r3, r0
}
   10324:	4618      	mov	r0, r3
   10326:	3720      	adds	r7, #32
   10328:	46bd      	mov	sp, r7
   1032a:	bd80      	pop	{r7, pc}
   1032c:	000062c9 	.word	0x000062c9

00010330 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   10330:	b580      	push	{r7, lr}
   10332:	b082      	sub	sp, #8
   10334:	af00      	add	r7, sp, #0
   10336:	4603      	mov	r3, r0
   10338:	6039      	str	r1, [r7, #0]
   1033a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   1033c:	79fb      	ldrb	r3, [r7, #7]
   1033e:	2b01      	cmp	r3, #1
   10340:	d009      	beq.n	10356 <usbdc_register_handler+0x26>
   10342:	2b02      	cmp	r3, #2
   10344:	d00c      	beq.n	10360 <usbdc_register_handler+0x30>
   10346:	2b00      	cmp	r3, #0
   10348:	d000      	beq.n	1034c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   1034a:	e00e      	b.n	1036a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   1034c:	6839      	ldr	r1, [r7, #0]
   1034e:	4809      	ldr	r0, [pc, #36]	; (10374 <usbdc_register_handler+0x44>)
   10350:	4b09      	ldr	r3, [pc, #36]	; (10378 <usbdc_register_handler+0x48>)
   10352:	4798      	blx	r3
		break;
   10354:	e009      	b.n	1036a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   10356:	6839      	ldr	r1, [r7, #0]
   10358:	4808      	ldr	r0, [pc, #32]	; (1037c <usbdc_register_handler+0x4c>)
   1035a:	4b07      	ldr	r3, [pc, #28]	; (10378 <usbdc_register_handler+0x48>)
   1035c:	4798      	blx	r3
		break;
   1035e:	e004      	b.n	1036a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   10360:	6839      	ldr	r1, [r7, #0]
   10362:	4807      	ldr	r0, [pc, #28]	; (10380 <usbdc_register_handler+0x50>)
   10364:	4b04      	ldr	r3, [pc, #16]	; (10378 <usbdc_register_handler+0x48>)
   10366:	4798      	blx	r3
		break;
   10368:	bf00      	nop
	}
}
   1036a:	bf00      	nop
   1036c:	3708      	adds	r7, #8
   1036e:	46bd      	mov	sp, r7
   10370:	bd80      	pop	{r7, pc}
   10372:	bf00      	nop
   10374:	2000340c 	.word	0x2000340c
   10378:	000066b5 	.word	0x000066b5
   1037c:	20003410 	.word	0x20003410
   10380:	20003414 	.word	0x20003414

00010384 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   10384:	b580      	push	{r7, lr}
   10386:	b084      	sub	sp, #16
   10388:	af00      	add	r7, sp, #0
   1038a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   1038c:	687b      	ldr	r3, [r7, #4]
   1038e:	2b00      	cmp	r3, #0
   10390:	bf14      	ite	ne
   10392:	2301      	movne	r3, #1
   10394:	2300      	moveq	r3, #0
   10396:	b2db      	uxtb	r3, r3
   10398:	f240 3255 	movw	r2, #853	; 0x355
   1039c:	4910      	ldr	r1, [pc, #64]	; (103e0 <usbdc_init+0x5c>)
   1039e:	4618      	mov	r0, r3
   103a0:	4b10      	ldr	r3, [pc, #64]	; (103e4 <usbdc_init+0x60>)
   103a2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   103a4:	4b10      	ldr	r3, [pc, #64]	; (103e8 <usbdc_init+0x64>)
   103a6:	4798      	blx	r3
   103a8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   103aa:	68fb      	ldr	r3, [r7, #12]
   103ac:	2b00      	cmp	r3, #0
   103ae:	da01      	bge.n	103b4 <usbdc_init+0x30>
		return rc;
   103b0:	68fb      	ldr	r3, [r7, #12]
   103b2:	e010      	b.n	103d6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   103b4:	2220      	movs	r2, #32
   103b6:	2100      	movs	r1, #0
   103b8:	480c      	ldr	r0, [pc, #48]	; (103ec <usbdc_init+0x68>)
   103ba:	4b0d      	ldr	r3, [pc, #52]	; (103f0 <usbdc_init+0x6c>)
   103bc:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   103be:	4a0b      	ldr	r2, [pc, #44]	; (103ec <usbdc_init+0x68>)
   103c0:	687b      	ldr	r3, [r7, #4]
   103c2:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   103c4:	490b      	ldr	r1, [pc, #44]	; (103f4 <usbdc_init+0x70>)
   103c6:	2000      	movs	r0, #0
   103c8:	4b0b      	ldr	r3, [pc, #44]	; (103f8 <usbdc_init+0x74>)
   103ca:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   103cc:	490b      	ldr	r1, [pc, #44]	; (103fc <usbdc_init+0x78>)
   103ce:	2001      	movs	r0, #1
   103d0:	4b09      	ldr	r3, [pc, #36]	; (103f8 <usbdc_init+0x74>)
   103d2:	4798      	blx	r3

	return 0;
   103d4:	2300      	movs	r3, #0
}
   103d6:	4618      	mov	r0, r3
   103d8:	3710      	adds	r7, #16
   103da:	46bd      	mov	sp, r7
   103dc:	bd80      	pop	{r7, pc}
   103de:	bf00      	nop
   103e0:	00018774 	.word	0x00018774
   103e4:	000065d9 	.word	0x000065d9
   103e8:	00006031 	.word	0x00006031
   103ec:	20003408 	.word	0x20003408
   103f0:	0001790d 	.word	0x0001790d
   103f4:	000100e1 	.word	0x000100e1
   103f8:	000060dd 	.word	0x000060dd
   103fc:	000102bd 	.word	0x000102bd

00010400 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   10400:	b580      	push	{r7, lr}
   10402:	b082      	sub	sp, #8
   10404:	af00      	add	r7, sp, #0
   10406:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   10408:	6879      	ldr	r1, [r7, #4]
   1040a:	4803      	ldr	r0, [pc, #12]	; (10418 <usbdc_register_function+0x18>)
   1040c:	4b03      	ldr	r3, [pc, #12]	; (1041c <usbdc_register_function+0x1c>)
   1040e:	4798      	blx	r3
}
   10410:	bf00      	nop
   10412:	3708      	adds	r7, #8
   10414:	46bd      	mov	sp, r7
   10416:	bd80      	pop	{r7, pc}
   10418:	20003418 	.word	0x20003418
   1041c:	000066b5 	.word	0x000066b5

00010420 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   10420:	b580      	push	{r7, lr}
   10422:	b082      	sub	sp, #8
   10424:	af00      	add	r7, sp, #0
   10426:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   10428:	4b0f      	ldr	r3, [pc, #60]	; (10468 <usbdc_start+0x48>)
   1042a:	7e9b      	ldrb	r3, [r3, #26]
   1042c:	2b00      	cmp	r3, #0
   1042e:	d002      	beq.n	10436 <usbdc_start+0x16>
		return ERR_BUSY;
   10430:	f06f 0303 	mvn.w	r3, #3
   10434:	e013      	b.n	1045e <usbdc_start+0x3e>
	}

	if (desces) {
   10436:	687b      	ldr	r3, [r7, #4]
   10438:	2b00      	cmp	r3, #0
   1043a:	d00e      	beq.n	1045a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   1043c:	4a0a      	ldr	r2, [pc, #40]	; (10468 <usbdc_start+0x48>)
   1043e:	687b      	ldr	r3, [r7, #4]
   10440:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   10442:	687b      	ldr	r3, [r7, #4]
   10444:	681b      	ldr	r3, [r3, #0]
   10446:	79da      	ldrb	r2, [r3, #7]
   10448:	4b07      	ldr	r3, [pc, #28]	; (10468 <usbdc_start+0x48>)
   1044a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   1044c:	4b06      	ldr	r3, [pc, #24]	; (10468 <usbdc_start+0x48>)
   1044e:	2201      	movs	r2, #1
   10450:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   10452:	4b06      	ldr	r3, [pc, #24]	; (1046c <usbdc_start+0x4c>)
   10454:	4798      	blx	r3
	return ERR_NONE;
   10456:	2300      	movs	r3, #0
   10458:	e001      	b.n	1045e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   1045a:	f06f 0308 	mvn.w	r3, #8
}
   1045e:	4618      	mov	r0, r3
   10460:	3708      	adds	r7, #8
   10462:	46bd      	mov	sp, r7
   10464:	bd80      	pop	{r7, pc}
   10466:	bf00      	nop
   10468:	20003408 	.word	0x20003408
   1046c:	00006101 	.word	0x00006101

00010470 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   10470:	b580      	push	{r7, lr}
   10472:	af00      	add	r7, sp, #0
	usb_d_attach();
   10474:	4b01      	ldr	r3, [pc, #4]	; (1047c <usbdc_attach+0xc>)
   10476:	4798      	blx	r3
}
   10478:	bf00      	nop
   1047a:	bd80      	pop	{r7, pc}
   1047c:	00006115 	.word	0x00006115

00010480 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   10480:	b480      	push	{r7}
   10482:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   10484:	4b03      	ldr	r3, [pc, #12]	; (10494 <usbdc_get_ctrl_buffer+0x14>)
   10486:	695b      	ldr	r3, [r3, #20]
}
   10488:	4618      	mov	r0, r3
   1048a:	46bd      	mov	sp, r7
   1048c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10490:	4770      	bx	lr
   10492:	bf00      	nop
   10494:	20003408 	.word	0x20003408

00010498 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   10498:	b480      	push	{r7}
   1049a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   1049c:	4b07      	ldr	r3, [pc, #28]	; (104bc <usbdc_get_state+0x24>)
   1049e:	7e9b      	ldrb	r3, [r3, #26]
   104a0:	f003 0310 	and.w	r3, r3, #16
   104a4:	2b00      	cmp	r3, #0
   104a6:	d001      	beq.n	104ac <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   104a8:	2310      	movs	r3, #16
   104aa:	e001      	b.n	104b0 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   104ac:	4b03      	ldr	r3, [pc, #12]	; (104bc <usbdc_get_state+0x24>)
   104ae:	7e9b      	ldrb	r3, [r3, #26]
}
   104b0:	4618      	mov	r0, r3
   104b2:	46bd      	mov	sp, r7
   104b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   104b8:	4770      	bx	lr
   104ba:	bf00      	nop
   104bc:	20003408 	.word	0x20003408

000104c0 <usb_get_u16>:
{
   104c0:	b480      	push	{r7}
   104c2:	b083      	sub	sp, #12
   104c4:	af00      	add	r7, sp, #0
   104c6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   104c8:	687b      	ldr	r3, [r7, #4]
   104ca:	781b      	ldrb	r3, [r3, #0]
   104cc:	b29a      	uxth	r2, r3
   104ce:	687b      	ldr	r3, [r7, #4]
   104d0:	3301      	adds	r3, #1
   104d2:	781b      	ldrb	r3, [r3, #0]
   104d4:	b29b      	uxth	r3, r3
   104d6:	021b      	lsls	r3, r3, #8
   104d8:	b29b      	uxth	r3, r3
   104da:	4413      	add	r3, r2
   104dc:	b29b      	uxth	r3, r3
}
   104de:	4618      	mov	r0, r3
   104e0:	370c      	adds	r7, #12
   104e2:	46bd      	mov	sp, r7
   104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   104e8:	4770      	bx	lr

000104ea <usb_desc_len>:
{
   104ea:	b480      	push	{r7}
   104ec:	b083      	sub	sp, #12
   104ee:	af00      	add	r7, sp, #0
   104f0:	6078      	str	r0, [r7, #4]
	return desc[0];
   104f2:	687b      	ldr	r3, [r7, #4]
   104f4:	781b      	ldrb	r3, [r3, #0]
}
   104f6:	4618      	mov	r0, r3
   104f8:	370c      	adds	r7, #12
   104fa:	46bd      	mov	sp, r7
   104fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   10500:	4770      	bx	lr

00010502 <usb_desc_type>:
{
   10502:	b480      	push	{r7}
   10504:	b083      	sub	sp, #12
   10506:	af00      	add	r7, sp, #0
   10508:	6078      	str	r0, [r7, #4]
	return desc[1];
   1050a:	687b      	ldr	r3, [r7, #4]
   1050c:	3301      	adds	r3, #1
   1050e:	781b      	ldrb	r3, [r3, #0]
}
   10510:	4618      	mov	r0, r3
   10512:	370c      	adds	r7, #12
   10514:	46bd      	mov	sp, r7
   10516:	f85d 7b04 	ldr.w	r7, [sp], #4
   1051a:	4770      	bx	lr

0001051c <usb_desc_next>:
{
   1051c:	b580      	push	{r7, lr}
   1051e:	b082      	sub	sp, #8
   10520:	af00      	add	r7, sp, #0
   10522:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   10524:	6878      	ldr	r0, [r7, #4]
   10526:	4b05      	ldr	r3, [pc, #20]	; (1053c <usb_desc_next+0x20>)
   10528:	4798      	blx	r3
   1052a:	4603      	mov	r3, r0
   1052c:	461a      	mov	r2, r3
   1052e:	687b      	ldr	r3, [r7, #4]
   10530:	4413      	add	r3, r2
}
   10532:	4618      	mov	r0, r3
   10534:	3708      	adds	r7, #8
   10536:	46bd      	mov	sp, r7
   10538:	bd80      	pop	{r7, pc}
   1053a:	bf00      	nop
   1053c:	000104eb 	.word	0x000104eb

00010540 <usb_cfg_desc_total_len>:
{
   10540:	b580      	push	{r7, lr}
   10542:	b082      	sub	sp, #8
   10544:	af00      	add	r7, sp, #0
   10546:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   10548:	687b      	ldr	r3, [r7, #4]
   1054a:	3302      	adds	r3, #2
   1054c:	4618      	mov	r0, r3
   1054e:	4b03      	ldr	r3, [pc, #12]	; (1055c <usb_cfg_desc_total_len+0x1c>)
   10550:	4798      	blx	r3
   10552:	4603      	mov	r3, r0
}
   10554:	4618      	mov	r0, r3
   10556:	3708      	adds	r7, #8
   10558:	46bd      	mov	sp, r7
   1055a:	bd80      	pop	{r7, pc}
   1055c:	000104c1 	.word	0x000104c1

00010560 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   10560:	b580      	push	{r7, lr}
   10562:	b082      	sub	sp, #8
   10564:	af00      	add	r7, sp, #0
   10566:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   10568:	6878      	ldr	r0, [r7, #4]
   1056a:	4b05      	ldr	r3, [pc, #20]	; (10580 <usb_cfg_desc_next+0x20>)
   1056c:	4798      	blx	r3
   1056e:	4603      	mov	r3, r0
   10570:	461a      	mov	r2, r3
   10572:	687b      	ldr	r3, [r7, #4]
   10574:	4413      	add	r3, r2
}
   10576:	4618      	mov	r0, r3
   10578:	3708      	adds	r7, #8
   1057a:	46bd      	mov	sp, r7
   1057c:	bd80      	pop	{r7, pc}
   1057e:	bf00      	nop
   10580:	00010541 	.word	0x00010541

00010584 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   10584:	b580      	push	{r7, lr}
   10586:	b084      	sub	sp, #16
   10588:	af00      	add	r7, sp, #0
   1058a:	60f8      	str	r0, [r7, #12]
   1058c:	60b9      	str	r1, [r7, #8]
   1058e:	4613      	mov	r3, r2
   10590:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   10592:	e015      	b.n	105c0 <usb_find_desc+0x3c>
		_desc_len_check();
   10594:	68f8      	ldr	r0, [r7, #12]
   10596:	4b0f      	ldr	r3, [pc, #60]	; (105d4 <usb_find_desc+0x50>)
   10598:	4798      	blx	r3
   1059a:	4603      	mov	r3, r0
   1059c:	2b01      	cmp	r3, #1
   1059e:	d801      	bhi.n	105a4 <usb_find_desc+0x20>
   105a0:	2300      	movs	r3, #0
   105a2:	e012      	b.n	105ca <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   105a4:	68f8      	ldr	r0, [r7, #12]
   105a6:	4b0c      	ldr	r3, [pc, #48]	; (105d8 <usb_find_desc+0x54>)
   105a8:	4798      	blx	r3
   105aa:	4603      	mov	r3, r0
   105ac:	461a      	mov	r2, r3
   105ae:	79fb      	ldrb	r3, [r7, #7]
   105b0:	4293      	cmp	r3, r2
   105b2:	d101      	bne.n	105b8 <usb_find_desc+0x34>
			return desc;
   105b4:	68fb      	ldr	r3, [r7, #12]
   105b6:	e008      	b.n	105ca <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   105b8:	68f8      	ldr	r0, [r7, #12]
   105ba:	4b08      	ldr	r3, [pc, #32]	; (105dc <usb_find_desc+0x58>)
   105bc:	4798      	blx	r3
   105be:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   105c0:	68fa      	ldr	r2, [r7, #12]
   105c2:	68bb      	ldr	r3, [r7, #8]
   105c4:	429a      	cmp	r2, r3
   105c6:	d3e5      	bcc.n	10594 <usb_find_desc+0x10>
	}
	return NULL;
   105c8:	2300      	movs	r3, #0
}
   105ca:	4618      	mov	r0, r3
   105cc:	3710      	adds	r7, #16
   105ce:	46bd      	mov	sp, r7
   105d0:	bd80      	pop	{r7, pc}
   105d2:	bf00      	nop
   105d4:	000104eb 	.word	0x000104eb
   105d8:	00010503 	.word	0x00010503
   105dc:	0001051d 	.word	0x0001051d

000105e0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   105e0:	b580      	push	{r7, lr}
   105e2:	b082      	sub	sp, #8
   105e4:	af00      	add	r7, sp, #0
   105e6:	6078      	str	r0, [r7, #4]
   105e8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   105ea:	e019      	b.n	10620 <usb_find_ep_desc+0x40>
		_desc_len_check();
   105ec:	6878      	ldr	r0, [r7, #4]
   105ee:	4b12      	ldr	r3, [pc, #72]	; (10638 <usb_find_ep_desc+0x58>)
   105f0:	4798      	blx	r3
   105f2:	4603      	mov	r3, r0
   105f4:	2b01      	cmp	r3, #1
   105f6:	d801      	bhi.n	105fc <usb_find_ep_desc+0x1c>
   105f8:	2300      	movs	r3, #0
   105fa:	e018      	b.n	1062e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   105fc:	6878      	ldr	r0, [r7, #4]
   105fe:	4b0f      	ldr	r3, [pc, #60]	; (1063c <usb_find_ep_desc+0x5c>)
   10600:	4798      	blx	r3
   10602:	4603      	mov	r3, r0
   10604:	2b04      	cmp	r3, #4
   10606:	d010      	beq.n	1062a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   10608:	6878      	ldr	r0, [r7, #4]
   1060a:	4b0c      	ldr	r3, [pc, #48]	; (1063c <usb_find_ep_desc+0x5c>)
   1060c:	4798      	blx	r3
   1060e:	4603      	mov	r3, r0
   10610:	2b05      	cmp	r3, #5
   10612:	d101      	bne.n	10618 <usb_find_ep_desc+0x38>
			return desc;
   10614:	687b      	ldr	r3, [r7, #4]
   10616:	e00a      	b.n	1062e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   10618:	6878      	ldr	r0, [r7, #4]
   1061a:	4b09      	ldr	r3, [pc, #36]	; (10640 <usb_find_ep_desc+0x60>)
   1061c:	4798      	blx	r3
   1061e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   10620:	687a      	ldr	r2, [r7, #4]
   10622:	683b      	ldr	r3, [r7, #0]
   10624:	429a      	cmp	r2, r3
   10626:	d3e1      	bcc.n	105ec <usb_find_ep_desc+0xc>
   10628:	e000      	b.n	1062c <usb_find_ep_desc+0x4c>
			break;
   1062a:	bf00      	nop
	}
	return NULL;
   1062c:	2300      	movs	r3, #0
}
   1062e:	4618      	mov	r0, r3
   10630:	3708      	adds	r7, #8
   10632:	46bd      	mov	sp, r7
   10634:	bd80      	pop	{r7, pc}
   10636:	bf00      	nop
   10638:	000104eb 	.word	0x000104eb
   1063c:	00010503 	.word	0x00010503
   10640:	0001051d 	.word	0x0001051d

00010644 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   10644:	b580      	push	{r7, lr}
   10646:	b084      	sub	sp, #16
   10648:	af00      	add	r7, sp, #0
   1064a:	60f8      	str	r0, [r7, #12]
   1064c:	60b9      	str	r1, [r7, #8]
   1064e:	4613      	mov	r3, r2
   10650:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   10652:	2202      	movs	r2, #2
   10654:	68b9      	ldr	r1, [r7, #8]
   10656:	68f8      	ldr	r0, [r7, #12]
   10658:	4b15      	ldr	r3, [pc, #84]	; (106b0 <usb_find_cfg_desc+0x6c>)
   1065a:	4798      	blx	r3
   1065c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   1065e:	68fb      	ldr	r3, [r7, #12]
   10660:	2b00      	cmp	r3, #0
   10662:	d11a      	bne.n	1069a <usb_find_cfg_desc+0x56>
		return NULL;
   10664:	2300      	movs	r3, #0
   10666:	e01f      	b.n	106a8 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   10668:	68f8      	ldr	r0, [r7, #12]
   1066a:	4b12      	ldr	r3, [pc, #72]	; (106b4 <usb_find_cfg_desc+0x70>)
   1066c:	4798      	blx	r3
   1066e:	4603      	mov	r3, r0
   10670:	2b01      	cmp	r3, #1
   10672:	d801      	bhi.n	10678 <usb_find_cfg_desc+0x34>
   10674:	2300      	movs	r3, #0
   10676:	e017      	b.n	106a8 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   10678:	68fb      	ldr	r3, [r7, #12]
   1067a:	3301      	adds	r3, #1
   1067c:	781b      	ldrb	r3, [r3, #0]
   1067e:	2b02      	cmp	r3, #2
   10680:	d110      	bne.n	106a4 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   10682:	68fb      	ldr	r3, [r7, #12]
   10684:	3305      	adds	r3, #5
   10686:	781b      	ldrb	r3, [r3, #0]
   10688:	79fa      	ldrb	r2, [r7, #7]
   1068a:	429a      	cmp	r2, r3
   1068c:	d101      	bne.n	10692 <usb_find_cfg_desc+0x4e>
			return desc;
   1068e:	68fb      	ldr	r3, [r7, #12]
   10690:	e00a      	b.n	106a8 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   10692:	68f8      	ldr	r0, [r7, #12]
   10694:	4b08      	ldr	r3, [pc, #32]	; (106b8 <usb_find_cfg_desc+0x74>)
   10696:	4798      	blx	r3
   10698:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   1069a:	68fa      	ldr	r2, [r7, #12]
   1069c:	68bb      	ldr	r3, [r7, #8]
   1069e:	429a      	cmp	r2, r3
   106a0:	d3e2      	bcc.n	10668 <usb_find_cfg_desc+0x24>
   106a2:	e000      	b.n	106a6 <usb_find_cfg_desc+0x62>
			break;
   106a4:	bf00      	nop
	}
	return NULL;
   106a6:	2300      	movs	r3, #0
}
   106a8:	4618      	mov	r0, r3
   106aa:	3710      	adds	r7, #16
   106ac:	46bd      	mov	sp, r7
   106ae:	bd80      	pop	{r7, pc}
   106b0:	00010585 	.word	0x00010585
   106b4:	000104eb 	.word	0x000104eb
   106b8:	00010561 	.word	0x00010561

000106bc <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   106bc:	b580      	push	{r7, lr}
   106be:	b086      	sub	sp, #24
   106c0:	af00      	add	r7, sp, #0
   106c2:	60f8      	str	r0, [r7, #12]
   106c4:	60b9      	str	r1, [r7, #8]
   106c6:	4613      	mov	r3, r2
   106c8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   106ca:	2300      	movs	r3, #0
   106cc:	75fb      	strb	r3, [r7, #23]
   106ce:	e020      	b.n	10712 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   106d0:	2203      	movs	r2, #3
   106d2:	68b9      	ldr	r1, [r7, #8]
   106d4:	68f8      	ldr	r0, [r7, #12]
   106d6:	4b13      	ldr	r3, [pc, #76]	; (10724 <usb_find_str_desc+0x68>)
   106d8:	4798      	blx	r3
   106da:	60f8      	str	r0, [r7, #12]
		if (desc) {
   106dc:	68fb      	ldr	r3, [r7, #12]
   106de:	2b00      	cmp	r3, #0
   106e0:	d015      	beq.n	1070e <usb_find_str_desc+0x52>
			_desc_len_check();
   106e2:	68f8      	ldr	r0, [r7, #12]
   106e4:	4b10      	ldr	r3, [pc, #64]	; (10728 <usb_find_str_desc+0x6c>)
   106e6:	4798      	blx	r3
   106e8:	4603      	mov	r3, r0
   106ea:	2b01      	cmp	r3, #1
   106ec:	d801      	bhi.n	106f2 <usb_find_str_desc+0x36>
   106ee:	2300      	movs	r3, #0
   106f0:	e014      	b.n	1071c <usb_find_str_desc+0x60>
			if (i == str_index) {
   106f2:	7dfa      	ldrb	r2, [r7, #23]
   106f4:	79fb      	ldrb	r3, [r7, #7]
   106f6:	429a      	cmp	r2, r3
   106f8:	d101      	bne.n	106fe <usb_find_str_desc+0x42>
				return desc;
   106fa:	68fb      	ldr	r3, [r7, #12]
   106fc:	e00e      	b.n	1071c <usb_find_str_desc+0x60>
			}
			i++;
   106fe:	7dfb      	ldrb	r3, [r7, #23]
   10700:	3301      	adds	r3, #1
   10702:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   10704:	68f8      	ldr	r0, [r7, #12]
   10706:	4b09      	ldr	r3, [pc, #36]	; (1072c <usb_find_str_desc+0x70>)
   10708:	4798      	blx	r3
   1070a:	60f8      	str	r0, [r7, #12]
   1070c:	e001      	b.n	10712 <usb_find_str_desc+0x56>
		} else {
			return NULL;
   1070e:	2300      	movs	r3, #0
   10710:	e004      	b.n	1071c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   10712:	68fa      	ldr	r2, [r7, #12]
   10714:	68bb      	ldr	r3, [r7, #8]
   10716:	429a      	cmp	r2, r3
   10718:	d3da      	bcc.n	106d0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   1071a:	2300      	movs	r3, #0
}
   1071c:	4618      	mov	r0, r3
   1071e:	3718      	adds	r7, #24
   10720:	46bd      	mov	sp, r7
   10722:	bd80      	pop	{r7, pc}
   10724:	00010585 	.word	0x00010585
   10728:	000104eb 	.word	0x000104eb
   1072c:	0001051d 	.word	0x0001051d

00010730 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
   10730:	b480      	push	{r7}
   10732:	b083      	sub	sp, #12
   10734:	af00      	add	r7, sp, #0
   10736:	6078      	str	r0, [r7, #4]
   10738:	4a04      	ldr	r2, [pc, #16]	; (1074c <_ZN17ARINC_ConversionsC1Ev+0x1c>)
   1073a:	687b      	ldr	r3, [r7, #4]
   1073c:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
   1073e:	687b      	ldr	r3, [r7, #4]
   10740:	4618      	mov	r0, r3
   10742:	370c      	adds	r7, #12
   10744:	46bd      	mov	sp, r7
   10746:	bc80      	pop	{r7}
   10748:	4770      	bx	lr
   1074a:	bf00      	nop
   1074c:	00018794 	.word	0x00018794

00010750 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
   10750:	b480      	push	{r7}
   10752:	b083      	sub	sp, #12
   10754:	af00      	add	r7, sp, #0
   10756:	6078      	str	r0, [r7, #4]
   10758:	4a04      	ldr	r2, [pc, #16]	; (1076c <_ZN17ARINC_ConversionsD1Ev+0x1c>)
   1075a:	687b      	ldr	r3, [r7, #4]
   1075c:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
   1075e:	687b      	ldr	r3, [r7, #4]
   10760:	4618      	mov	r0, r3
   10762:	370c      	adds	r7, #12
   10764:	46bd      	mov	sp, r7
   10766:	bc80      	pop	{r7}
   10768:	4770      	bx	lr
   1076a:	bf00      	nop
   1076c:	00018794 	.word	0x00018794

00010770 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   10770:	b5b0      	push	{r4, r5, r7, lr}
   10772:	b082      	sub	sp, #8
   10774:	af00      	add	r7, sp, #0
   10776:	6078      	str	r0, [r7, #4]
   10778:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   1077a:	4b0a      	ldr	r3, [pc, #40]	; (107a4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   1077c:	6878      	ldr	r0, [r7, #4]
   1077e:	4798      	blx	r3
   10780:	4604      	mov	r4, r0
   10782:	460d      	mov	r5, r1
   10784:	4b07      	ldr	r3, [pc, #28]	; (107a4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   10786:	6838      	ldr	r0, [r7, #0]
   10788:	4798      	blx	r3
   1078a:	4602      	mov	r2, r0
   1078c:	460b      	mov	r3, r1
   1078e:	4620      	mov	r0, r4
   10790:	4629      	mov	r1, r5
   10792:	4c05      	ldr	r4, [pc, #20]	; (107a8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
   10794:	47a0      	blx	r4
   10796:	4603      	mov	r3, r0
   10798:	460c      	mov	r4, r1
    }
   1079a:	4618      	mov	r0, r3
   1079c:	4621      	mov	r1, r4
   1079e:	3708      	adds	r7, #8
   107a0:	46bd      	mov	sp, r7
   107a2:	bdb0      	pop	{r4, r5, r7, pc}
   107a4:	00016ec1 	.word	0x00016ec1
   107a8:	00015ad1 	.word	0x00015ad1

000107ac <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
   107ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   107b0:	b085      	sub	sp, #20
   107b2:	af00      	add	r7, sp, #0
   107b4:	6078      	str	r0, [r7, #4]
   107b6:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
   107b8:	2300      	movs	r3, #0
   107ba:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   107bc:	2300      	movs	r3, #0
   107be:	73bb      	strb	r3, [r7, #14]
   107c0:	7bbb      	ldrb	r3, [r7, #14]
   107c2:	2b02      	cmp	r3, #2
   107c4:	d86d      	bhi.n	108a2 <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
   107c6:	7bbb      	ldrb	r3, [r7, #14]
   107c8:	f1c3 0402 	rsb	r4, r3, #2
   107cc:	4b3c      	ldr	r3, [pc, #240]	; (108c0 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   107ce:	6838      	ldr	r0, [r7, #0]
   107d0:	4798      	blx	r3
   107d2:	4680      	mov	r8, r0
   107d4:	4689      	mov	r9, r1
   107d6:	7bbb      	ldrb	r3, [r7, #14]
   107d8:	f1c3 0302 	rsb	r3, r3, #2
   107dc:	4619      	mov	r1, r3
   107de:	200a      	movs	r0, #10
   107e0:	4b38      	ldr	r3, [pc, #224]	; (108c4 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   107e2:	4798      	blx	r3
   107e4:	4602      	mov	r2, r0
   107e6:	460b      	mov	r3, r1
   107e8:	4d37      	ldr	r5, [pc, #220]	; (108c8 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
   107ea:	4640      	mov	r0, r8
   107ec:	4649      	mov	r1, r9
   107ee:	47a8      	blx	r5
   107f0:	4602      	mov	r2, r0
   107f2:	460b      	mov	r3, r1
   107f4:	4611      	mov	r1, r2
   107f6:	461a      	mov	r2, r3
   107f8:	4b34      	ldr	r3, [pc, #208]	; (108cc <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   107fa:	4608      	mov	r0, r1
   107fc:	4611      	mov	r1, r2
   107fe:	4798      	blx	r3
   10800:	4603      	mov	r3, r0
   10802:	b2da      	uxtb	r2, r3
   10804:	f107 0310 	add.w	r3, r7, #16
   10808:	4423      	add	r3, r4
   1080a:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
   1080e:	7bbb      	ldrb	r3, [r7, #14]
   10810:	f1c3 0302 	rsb	r3, r3, #2
   10814:	f107 0210 	add.w	r2, r7, #16
   10818:	4413      	add	r3, r2
   1081a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1081e:	461a      	mov	r2, r3
   10820:	4b2b      	ldr	r3, [pc, #172]	; (108d0 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
   10822:	4610      	mov	r0, r2
   10824:	4798      	blx	r3
   10826:	4605      	mov	r5, r0
   10828:	460e      	mov	r6, r1
   1082a:	7bbb      	ldrb	r3, [r7, #14]
   1082c:	f1c3 0302 	rsb	r3, r3, #2
   10830:	4619      	mov	r1, r3
   10832:	200a      	movs	r0, #10
   10834:	4b23      	ldr	r3, [pc, #140]	; (108c4 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   10836:	4798      	blx	r3
   10838:	4602      	mov	r2, r0
   1083a:	460b      	mov	r3, r1
   1083c:	4c25      	ldr	r4, [pc, #148]	; (108d4 <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
   1083e:	4628      	mov	r0, r5
   10840:	4631      	mov	r1, r6
   10842:	47a0      	blx	r4
   10844:	4603      	mov	r3, r0
   10846:	460c      	mov	r4, r1
   10848:	461d      	mov	r5, r3
   1084a:	4626      	mov	r6, r4
   1084c:	4b1c      	ldr	r3, [pc, #112]	; (108c0 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   1084e:	6838      	ldr	r0, [r7, #0]
   10850:	4798      	blx	r3
   10852:	4c21      	ldr	r4, [pc, #132]	; (108d8 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
   10854:	462a      	mov	r2, r5
   10856:	4633      	mov	r3, r6
   10858:	47a0      	blx	r4
   1085a:	4603      	mov	r3, r0
   1085c:	460c      	mov	r4, r1
   1085e:	4619      	mov	r1, r3
   10860:	4622      	mov	r2, r4
   10862:	4b1a      	ldr	r3, [pc, #104]	; (108cc <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   10864:	4608      	mov	r0, r1
   10866:	4611      	mov	r1, r2
   10868:	4798      	blx	r3
   1086a:	4603      	mov	r3, r0
   1086c:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
   1086e:	7bbb      	ldrb	r3, [r7, #14]
   10870:	f1c3 0302 	rsb	r3, r3, #2
   10874:	f107 0210 	add.w	r2, r7, #16
   10878:	4413      	add	r3, r2
   1087a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1087e:	461a      	mov	r2, r3
   10880:	7bbb      	ldrb	r3, [r7, #14]
   10882:	4619      	mov	r1, r3
   10884:	009b      	lsls	r3, r3, #2
   10886:	1acb      	subs	r3, r1, r3
   10888:	3306      	adds	r3, #6
   1088a:	fa02 f303 	lsl.w	r3, r2, r3
   1088e:	b25a      	sxtb	r2, r3
   10890:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10894:	4313      	orrs	r3, r2
   10896:	b25b      	sxtb	r3, r3
   10898:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   1089a:	7bbb      	ldrb	r3, [r7, #14]
   1089c:	3301      	adds	r3, #1
   1089e:	73bb      	strb	r3, [r7, #14]
   108a0:	e78e      	b.n	107c0 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
   108a2:	687b      	ldr	r3, [r7, #4]
   108a4:	681b      	ldr	r3, [r3, #0]
   108a6:	681b      	ldr	r3, [r3, #0]
   108a8:	7bfa      	ldrb	r2, [r7, #15]
   108aa:	4611      	mov	r1, r2
   108ac:	6878      	ldr	r0, [r7, #4]
   108ae:	4798      	blx	r3
   108b0:	4603      	mov	r3, r0
   108b2:	73fb      	strb	r3, [r7, #15]
	return result;
   108b4:	7bfb      	ldrb	r3, [r7, #15]
	
}
   108b6:	4618      	mov	r0, r3
   108b8:	3714      	adds	r7, #20
   108ba:	46bd      	mov	sp, r7
   108bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   108c0:	00016ea1 	.word	0x00016ea1
   108c4:	00010771 	.word	0x00010771
   108c8:	000171e1 	.word	0x000171e1
   108cc:	000174ed 	.word	0x000174ed
   108d0:	00016ec1 	.word	0x00016ec1
   108d4:	00016f8d 	.word	0x00016f8d
   108d8:	00016c25 	.word	0x00016c25

000108dc <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
   108dc:	b480      	push	{r7}
   108de:	b085      	sub	sp, #20
   108e0:	af00      	add	r7, sp, #0
   108e2:	6078      	str	r0, [r7, #4]
   108e4:	460b      	mov	r3, r1
   108e6:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
   108e8:	2300      	movs	r3, #0
   108ea:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   108ec:	2300      	movs	r3, #0
   108ee:	60bb      	str	r3, [r7, #8]
   108f0:	68bb      	ldr	r3, [r7, #8]
   108f2:	2b07      	cmp	r3, #7
   108f4:	dc13      	bgt.n	1091e <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
   108f6:	7bfb      	ldrb	r3, [r7, #15]
   108f8:	005b      	lsls	r3, r3, #1
   108fa:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   108fc:	78fa      	ldrb	r2, [r7, #3]
   108fe:	68bb      	ldr	r3, [r7, #8]
   10900:	fa42 f303 	asr.w	r3, r2, r3
   10904:	b25b      	sxtb	r3, r3
   10906:	f003 0301 	and.w	r3, r3, #1
   1090a:	b25a      	sxtb	r2, r3
   1090c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10910:	4313      	orrs	r3, r2
   10912:	b25b      	sxtb	r3, r3
   10914:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   10916:	68bb      	ldr	r3, [r7, #8]
   10918:	3301      	adds	r3, #1
   1091a:	60bb      	str	r3, [r7, #8]
   1091c:	e7e8      	b.n	108f0 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
   1091e:	7bfb      	ldrb	r3, [r7, #15]
}
   10920:	4618      	mov	r0, r3
   10922:	3714      	adds	r7, #20
   10924:	46bd      	mov	sp, r7
   10926:	bc80      	pop	{r7}
   10928:	4770      	bx	lr

0001092a <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh>:
uint8_t ARINC_Conversions::GetIndexTXLabelarray(uint8_t l, uint8_t* arr){
   1092a:	b480      	push	{r7}
   1092c:	b085      	sub	sp, #20
   1092e:	af00      	add	r7, sp, #0
   10930:	60f8      	str	r0, [r7, #12]
   10932:	460b      	mov	r3, r1
   10934:	607a      	str	r2, [r7, #4]
   10936:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < 32; i++)
   10938:	68fb      	ldr	r3, [r7, #12]
   1093a:	2200      	movs	r2, #0
   1093c:	711a      	strb	r2, [r3, #4]
   1093e:	68fb      	ldr	r3, [r7, #12]
   10940:	791b      	ldrb	r3, [r3, #4]
   10942:	2b1f      	cmp	r3, #31
   10944:	dc12      	bgt.n	1096c <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x42>
	{
		if (arr[i]==l)
   10946:	68fb      	ldr	r3, [r7, #12]
   10948:	791b      	ldrb	r3, [r3, #4]
   1094a:	461a      	mov	r2, r3
   1094c:	687b      	ldr	r3, [r7, #4]
   1094e:	4413      	add	r3, r2
   10950:	781b      	ldrb	r3, [r3, #0]
   10952:	7afa      	ldrb	r2, [r7, #11]
   10954:	429a      	cmp	r2, r3
   10956:	d102      	bne.n	1095e <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x34>
		{
			return i;
   10958:	68fb      	ldr	r3, [r7, #12]
   1095a:	791b      	ldrb	r3, [r3, #4]
   1095c:	e007      	b.n	1096e <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x44>
	for (i = 0; i < 32; i++)
   1095e:	68fb      	ldr	r3, [r7, #12]
   10960:	791b      	ldrb	r3, [r3, #4]
   10962:	3301      	adds	r3, #1
   10964:	b2da      	uxtb	r2, r3
   10966:	68fb      	ldr	r3, [r7, #12]
   10968:	711a      	strb	r2, [r3, #4]
   1096a:	e7e8      	b.n	1093e <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x14>
		}
		
	}
	return 32;
   1096c:	2320      	movs	r3, #32
}
   1096e:	4618      	mov	r0, r3
   10970:	3714      	adds	r7, #20
   10972:	46bd      	mov	sp, r7
   10974:	bc80      	pop	{r7}
   10976:	4770      	bx	lr

00010978 <_ZN17ARINC_Conversions21PrepareSingleTXBufferEPhS0_>:

void ARINC_Conversions::PrepareSingleTXBuffer(uint8_t* buff, uint8_t* src){
   10978:	b480      	push	{r7}
   1097a:	b085      	sub	sp, #20
   1097c:	af00      	add	r7, sp, #0
   1097e:	60f8      	str	r0, [r7, #12]
   10980:	60b9      	str	r1, [r7, #8]
   10982:	607a      	str	r2, [r7, #4]

	for (i = 0; i < 4; i++)
   10984:	68fb      	ldr	r3, [r7, #12]
   10986:	2200      	movs	r2, #0
   10988:	711a      	strb	r2, [r3, #4]
   1098a:	68fb      	ldr	r3, [r7, #12]
   1098c:	791b      	ldrb	r3, [r3, #4]
   1098e:	2b03      	cmp	r3, #3
   10990:	dc14      	bgt.n	109bc <_ZN17ARINC_Conversions21PrepareSingleTXBufferEPhS0_+0x44>
	{
		buff[3-i]=src[i];
   10992:	68fb      	ldr	r3, [r7, #12]
   10994:	791b      	ldrb	r3, [r3, #4]
   10996:	f1c3 0303 	rsb	r3, r3, #3
   1099a:	461a      	mov	r2, r3
   1099c:	68bb      	ldr	r3, [r7, #8]
   1099e:	4413      	add	r3, r2
   109a0:	68fa      	ldr	r2, [r7, #12]
   109a2:	7912      	ldrb	r2, [r2, #4]
   109a4:	4611      	mov	r1, r2
   109a6:	687a      	ldr	r2, [r7, #4]
   109a8:	440a      	add	r2, r1
   109aa:	7812      	ldrb	r2, [r2, #0]
   109ac:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++)
   109ae:	68fb      	ldr	r3, [r7, #12]
   109b0:	791b      	ldrb	r3, [r3, #4]
   109b2:	3301      	adds	r3, #1
   109b4:	b2da      	uxtb	r2, r3
   109b6:	68fb      	ldr	r3, [r7, #12]
   109b8:	711a      	strb	r2, [r3, #4]
   109ba:	e7e6      	b.n	1098a <_ZN17ARINC_Conversions21PrepareSingleTXBufferEPhS0_+0x12>
	
		
	}


}
   109bc:	bf00      	nop
   109be:	3714      	adds	r7, #20
   109c0:	46bd      	mov	sp, r7
   109c2:	bc80      	pop	{r7}
   109c4:	4770      	bx	lr

000109c6 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh>:
uint32_t	ARINC_Conversions::FourBytesArray2Uint32(uint8_t* arr){
   109c6:	b480      	push	{r7}
   109c8:	b083      	sub	sp, #12
   109ca:	af00      	add	r7, sp, #0
   109cc:	6078      	str	r0, [r7, #4]
   109ce:	6039      	str	r1, [r7, #0]

		result=0;
   109d0:	687b      	ldr	r3, [r7, #4]
   109d2:	2200      	movs	r2, #0
   109d4:	609a      	str	r2, [r3, #8]
		for (i = 0; i < 4; i++)
   109d6:	687b      	ldr	r3, [r7, #4]
   109d8:	2200      	movs	r2, #0
   109da:	711a      	strb	r2, [r3, #4]
   109dc:	687b      	ldr	r3, [r7, #4]
   109de:	791b      	ldrb	r3, [r3, #4]
   109e0:	2b03      	cmp	r3, #3
   109e2:	dc18      	bgt.n	10a16 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x50>
		{
			result|=((uint32_t)arr[i])<<(3-i);
   109e4:	687b      	ldr	r3, [r7, #4]
   109e6:	689a      	ldr	r2, [r3, #8]
   109e8:	687b      	ldr	r3, [r7, #4]
   109ea:	791b      	ldrb	r3, [r3, #4]
   109ec:	4619      	mov	r1, r3
   109ee:	683b      	ldr	r3, [r7, #0]
   109f0:	440b      	add	r3, r1
   109f2:	781b      	ldrb	r3, [r3, #0]
   109f4:	4619      	mov	r1, r3
   109f6:	687b      	ldr	r3, [r7, #4]
   109f8:	791b      	ldrb	r3, [r3, #4]
   109fa:	f1c3 0303 	rsb	r3, r3, #3
   109fe:	fa01 f303 	lsl.w	r3, r1, r3
   10a02:	431a      	orrs	r2, r3
   10a04:	687b      	ldr	r3, [r7, #4]
   10a06:	609a      	str	r2, [r3, #8]
		for (i = 0; i < 4; i++)
   10a08:	687b      	ldr	r3, [r7, #4]
   10a0a:	791b      	ldrb	r3, [r3, #4]
   10a0c:	3301      	adds	r3, #1
   10a0e:	b2da      	uxtb	r2, r3
   10a10:	687b      	ldr	r3, [r7, #4]
   10a12:	711a      	strb	r2, [r3, #4]
   10a14:	e7e2      	b.n	109dc <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x16>

		}
		return result;
   10a16:	687b      	ldr	r3, [r7, #4]
   10a18:	689b      	ldr	r3, [r3, #8]
   10a1a:	4618      	mov	r0, r3
   10a1c:	370c      	adds	r7, #12
   10a1e:	46bd      	mov	sp, r7
   10a20:	bc80      	pop	{r7}
   10a22:	4770      	bx	lr

00010a24 <hri_port_toggle_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   10a24:	b480      	push	{r7}
   10a26:	b085      	sub	sp, #20
   10a28:	af00      	add	r7, sp, #0
   10a2a:	60f8      	str	r0, [r7, #12]
   10a2c:	460b      	mov	r3, r1
   10a2e:	607a      	str	r2, [r7, #4]
   10a30:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
   10a32:	7afb      	ldrb	r3, [r7, #11]
   10a34:	68fa      	ldr	r2, [r7, #12]
   10a36:	01db      	lsls	r3, r3, #7
   10a38:	4413      	add	r3, r2
   10a3a:	331c      	adds	r3, #28
   10a3c:	687a      	ldr	r2, [r7, #4]
   10a3e:	601a      	str	r2, [r3, #0]
}
   10a40:	bf00      	nop
   10a42:	3714      	adds	r7, #20
   10a44:	46bd      	mov	sp, r7
   10a46:	bc80      	pop	{r7}
   10a48:	4770      	bx	lr
	...

00010a4c <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
   10a4c:	b580      	push	{r7, lr}
   10a4e:	b082      	sub	sp, #8
   10a50:	af00      	add	r7, sp, #0
   10a52:	4603      	mov	r3, r0
   10a54:	6039      	str	r1, [r7, #0]
   10a56:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
   10a58:	79fb      	ldrb	r3, [r7, #7]
   10a5a:	683a      	ldr	r2, [r7, #0]
   10a5c:	4619      	mov	r1, r3
   10a5e:	4803      	ldr	r0, [pc, #12]	; (10a6c <_gpio_toggle_level+0x20>)
   10a60:	4b03      	ldr	r3, [pc, #12]	; (10a70 <_gpio_toggle_level+0x24>)
   10a62:	4798      	blx	r3
}
   10a64:	bf00      	nop
   10a66:	3708      	adds	r7, #8
   10a68:	46bd      	mov	sp, r7
   10a6a:	bd80      	pop	{r7, pc}
   10a6c:	41008000 	.word	0x41008000
   10a70:	00010a25 	.word	0x00010a25

00010a74 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
   10a74:	b580      	push	{r7, lr}
   10a76:	b082      	sub	sp, #8
   10a78:	af00      	add	r7, sp, #0
   10a7a:	4603      	mov	r3, r0
   10a7c:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
   10a7e:	79fb      	ldrb	r3, [r7, #7]
   10a80:	115b      	asrs	r3, r3, #5
   10a82:	b2d8      	uxtb	r0, r3
   10a84:	79fb      	ldrb	r3, [r7, #7]
   10a86:	f003 031f 	and.w	r3, r3, #31
   10a8a:	2201      	movs	r2, #1
   10a8c:	fa02 f303 	lsl.w	r3, r2, r3
   10a90:	4619      	mov	r1, r3
   10a92:	4b03      	ldr	r3, [pc, #12]	; (10aa0 <gpio_toggle_pin_level+0x2c>)
   10a94:	4798      	blx	r3
}
   10a96:	bf00      	nop
   10a98:	3708      	adds	r7, #8
   10a9a:	46bd      	mov	sp, r7
   10a9c:	bd80      	pop	{r7, pc}
   10a9e:	bf00      	nop
   10aa0:	00010a4d 	.word	0x00010a4d

00010aa4 <_ZL10blink_LED0PK10timer_task>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(const struct timer_task *const timer_task){
   10aa4:	b580      	push	{r7, lr}
   10aa6:	b082      	sub	sp, #8
   10aa8:	af00      	add	r7, sp, #0
   10aaa:	6078      	str	r0, [r7, #4]
	gpio_toggle_pin_level(LED0);
   10aac:	2052      	movs	r0, #82	; 0x52
   10aae:	4b03      	ldr	r3, [pc, #12]	; (10abc <_ZL10blink_LED0PK10timer_task+0x18>)
   10ab0:	4798      	blx	r3
}
   10ab2:	bf00      	nop
   10ab4:	3708      	adds	r7, #8
   10ab6:	46bd      	mov	sp, r7
   10ab8:	bd80      	pop	{r7, pc}
   10aba:	bf00      	nop
   10abc:	00010a75 	.word	0x00010a75

00010ac0 <_ZL9TxTimeoutPK10timer_task>:
static void TxTimeout(const struct timer_task *const timer_task){
   10ac0:	b480      	push	{r7}
   10ac2:	b083      	sub	sp, #12
   10ac4:	af00      	add	r7, sp, #0
   10ac6:	6078      	str	r0, [r7, #4]
	ptrARINCInterface->txTimeout=true;
   10ac8:	4b04      	ldr	r3, [pc, #16]	; (10adc <_ZL9TxTimeoutPK10timer_task+0x1c>)
   10aca:	681b      	ldr	r3, [r3, #0]
   10acc:	2201      	movs	r2, #1
   10ace:	749a      	strb	r2, [r3, #18]
}
   10ad0:	bf00      	nop
   10ad2:	370c      	adds	r7, #12
   10ad4:	46bd      	mov	sp, r7
   10ad6:	bc80      	pop	{r7}
   10ad8:	4770      	bx	lr
   10ada:	bf00      	nop
   10adc:	20003428 	.word	0x20003428

00010ae0 <_ZL12Receiver1Intv>:

static void Receiver1Int(void){
   10ae0:	b480      	push	{r7}
   10ae2:	af00      	add	r7, sp, #0
	ptrARINCInterface->newMessageR1=true;
   10ae4:	4b03      	ldr	r3, [pc, #12]	; (10af4 <_ZL12Receiver1Intv+0x14>)
   10ae6:	681b      	ldr	r3, [r3, #0]
   10ae8:	2201      	movs	r2, #1
   10aea:	741a      	strb	r2, [r3, #16]
}
   10aec:	bf00      	nop
   10aee:	46bd      	mov	sp, r7
   10af0:	bc80      	pop	{r7}
   10af2:	4770      	bx	lr
   10af4:	20003428 	.word	0x20003428

00010af8 <_ZN14Protocol_ClassC2Ev>:
uint32_t	rawWord;
}Datagram;



class Protocol_Class: public virtual ARINC_Conversions
   10af8:	b480      	push	{r7}
   10afa:	b083      	sub	sp, #12
   10afc:	af00      	add	r7, sp, #0
   10afe:	6078      	str	r0, [r7, #4]
   10b00:	6039      	str	r1, [r7, #0]
   10b02:	683b      	ldr	r3, [r7, #0]
   10b04:	681a      	ldr	r2, [r3, #0]
   10b06:	687b      	ldr	r3, [r7, #4]
   10b08:	601a      	str	r2, [r3, #0]
   10b0a:	687b      	ldr	r3, [r7, #4]
   10b0c:	681b      	ldr	r3, [r3, #0]
   10b0e:	3b0c      	subs	r3, #12
   10b10:	681b      	ldr	r3, [r3, #0]
   10b12:	461a      	mov	r2, r3
   10b14:	687b      	ldr	r3, [r7, #4]
   10b16:	4413      	add	r3, r2
   10b18:	683a      	ldr	r2, [r7, #0]
   10b1a:	6852      	ldr	r2, [r2, #4]
   10b1c:	601a      	str	r2, [r3, #0]
   10b1e:	687b      	ldr	r3, [r7, #4]
   10b20:	4618      	mov	r0, r3
   10b22:	370c      	adds	r7, #12
   10b24:	46bd      	mov	sp, r7
   10b26:	bc80      	pop	{r7}
   10b28:	4770      	bx	lr
	...

00010b2c <_ZN15ARINC_InterfaceC2Ev>:

// default constructor
ARINC_Interface::ARINC_Interface()
   10b2c:	b580      	push	{r7, lr}
   10b2e:	b082      	sub	sp, #8
   10b30:	af00      	add	r7, sp, #0
   10b32:	6078      	str	r0, [r7, #4]
   10b34:	6039      	str	r1, [r7, #0]
   10b36:	687a      	ldr	r2, [r7, #4]
   10b38:	683b      	ldr	r3, [r7, #0]
   10b3a:	3304      	adds	r3, #4
   10b3c:	4619      	mov	r1, r3
   10b3e:	4610      	mov	r0, r2
   10b40:	4b0e      	ldr	r3, [pc, #56]	; (10b7c <_ZN15ARINC_InterfaceC2Ev+0x50>)
   10b42:	4798      	blx	r3
   10b44:	683b      	ldr	r3, [r7, #0]
   10b46:	681a      	ldr	r2, [r3, #0]
   10b48:	687b      	ldr	r3, [r7, #4]
   10b4a:	601a      	str	r2, [r3, #0]
   10b4c:	687b      	ldr	r3, [r7, #4]
   10b4e:	681b      	ldr	r3, [r3, #0]
   10b50:	3b0c      	subs	r3, #12
   10b52:	681b      	ldr	r3, [r3, #0]
   10b54:	461a      	mov	r2, r3
   10b56:	687b      	ldr	r3, [r7, #4]
   10b58:	4413      	add	r3, r2
   10b5a:	683a      	ldr	r2, [r7, #0]
   10b5c:	68d2      	ldr	r2, [r2, #12]
   10b5e:	601a      	str	r2, [r3, #0]
   10b60:	687b      	ldr	r3, [r7, #4]
   10b62:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
   10b66:	4618      	mov	r0, r3
   10b68:	4b05      	ldr	r3, [pc, #20]	; (10b80 <_ZN15ARINC_InterfaceC2Ev+0x54>)
   10b6a:	4798      	blx	r3
{
	ptrARINCInterface=this;
   10b6c:	4a05      	ldr	r2, [pc, #20]	; (10b84 <_ZN15ARINC_InterfaceC2Ev+0x58>)
   10b6e:	687b      	ldr	r3, [r7, #4]
   10b70:	6013      	str	r3, [r2, #0]

	//converter=ptrConverter;
} //ARINC_Interface
   10b72:	687b      	ldr	r3, [r7, #4]
   10b74:	4618      	mov	r0, r3
   10b76:	3708      	adds	r7, #8
   10b78:	46bd      	mov	sp, r7
   10b7a:	bd80      	pop	{r7, pc}
   10b7c:	00010af9 	.word	0x00010af9
   10b80:	0001126d 	.word	0x0001126d
   10b84:	20003428 	.word	0x20003428

00010b88 <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
   10b88:	b580      	push	{r7, lr}
   10b8a:	b082      	sub	sp, #8
   10b8c:	af00      	add	r7, sp, #0
   10b8e:	6078      	str	r0, [r7, #4]
   10b90:	687b      	ldr	r3, [r7, #4]
   10b92:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
   10b96:	4618      	mov	r0, r3
   10b98:	4b0e      	ldr	r3, [pc, #56]	; (10bd4 <_ZN15ARINC_InterfaceC1Ev+0x4c>)
   10b9a:	4798      	blx	r3
   10b9c:	687b      	ldr	r3, [r7, #4]
   10b9e:	4a0e      	ldr	r2, [pc, #56]	; (10bd8 <_ZN15ARINC_InterfaceC1Ev+0x50>)
   10ba0:	4611      	mov	r1, r2
   10ba2:	4618      	mov	r0, r3
   10ba4:	4b0d      	ldr	r3, [pc, #52]	; (10bdc <_ZN15ARINC_InterfaceC1Ev+0x54>)
   10ba6:	4798      	blx	r3
   10ba8:	4a0d      	ldr	r2, [pc, #52]	; (10be0 <_ZN15ARINC_InterfaceC1Ev+0x58>)
   10baa:	687b      	ldr	r3, [r7, #4]
   10bac:	601a      	str	r2, [r3, #0]
   10bae:	687b      	ldr	r3, [r7, #4]
   10bb0:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
   10bb4:	4a0b      	ldr	r2, [pc, #44]	; (10be4 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
   10bb6:	601a      	str	r2, [r3, #0]
   10bb8:	687b      	ldr	r3, [r7, #4]
   10bba:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
   10bbe:	4618      	mov	r0, r3
   10bc0:	4b09      	ldr	r3, [pc, #36]	; (10be8 <_ZN15ARINC_InterfaceC1Ev+0x60>)
   10bc2:	4798      	blx	r3
	ptrARINCInterface=this;
   10bc4:	4a09      	ldr	r2, [pc, #36]	; (10bec <_ZN15ARINC_InterfaceC1Ev+0x64>)
   10bc6:	687b      	ldr	r3, [r7, #4]
   10bc8:	6013      	str	r3, [r2, #0]
} //ARINC_Interface
   10bca:	687b      	ldr	r3, [r7, #4]
   10bcc:	4618      	mov	r0, r3
   10bce:	3708      	adds	r7, #8
   10bd0:	46bd      	mov	sp, r7
   10bd2:	bd80      	pop	{r7, pc}
   10bd4:	00010731 	.word	0x00010731
   10bd8:	00019214 	.word	0x00019214
   10bdc:	00010af9 	.word	0x00010af9
   10be0:	000191ec 	.word	0x000191ec
   10be4:	00019208 	.word	0x00019208
   10be8:	0001126d 	.word	0x0001126d
   10bec:	20003428 	.word	0x20003428

00010bf0 <_ZN15ARINC_InterfaceD2Ev>:


// default destructor
ARINC_Interface::~ARINC_Interface()
   10bf0:	b580      	push	{r7, lr}
   10bf2:	b082      	sub	sp, #8
   10bf4:	af00      	add	r7, sp, #0
   10bf6:	6078      	str	r0, [r7, #4]
   10bf8:	6039      	str	r1, [r7, #0]
   10bfa:	683b      	ldr	r3, [r7, #0]
   10bfc:	681a      	ldr	r2, [r3, #0]
   10bfe:	687b      	ldr	r3, [r7, #4]
   10c00:	601a      	str	r2, [r3, #0]
   10c02:	687b      	ldr	r3, [r7, #4]
   10c04:	681b      	ldr	r3, [r3, #0]
   10c06:	3b0c      	subs	r3, #12
   10c08:	681b      	ldr	r3, [r3, #0]
   10c0a:	461a      	mov	r2, r3
   10c0c:	687b      	ldr	r3, [r7, #4]
   10c0e:	4413      	add	r3, r2
   10c10:	683a      	ldr	r2, [r7, #0]
   10c12:	68d2      	ldr	r2, [r2, #12]
   10c14:	601a      	str	r2, [r3, #0]
   10c16:	687b      	ldr	r3, [r7, #4]
   10c18:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
   10c1c:	4618      	mov	r0, r3
   10c1e:	4b07      	ldr	r3, [pc, #28]	; (10c3c <_ZN15ARINC_InterfaceD2Ev+0x4c>)
   10c20:	4798      	blx	r3
   10c22:	687a      	ldr	r2, [r7, #4]
   10c24:	683b      	ldr	r3, [r7, #0]
   10c26:	3304      	adds	r3, #4
   10c28:	4619      	mov	r1, r3
   10c2a:	4610      	mov	r0, r2
   10c2c:	4b04      	ldr	r3, [pc, #16]	; (10c40 <_ZN15ARINC_InterfaceD2Ev+0x50>)
   10c2e:	4798      	blx	r3
{
} //~ARINC_Interface
   10c30:	687b      	ldr	r3, [r7, #4]
   10c32:	4618      	mov	r0, r3
   10c34:	3708      	adds	r7, #8
   10c36:	46bd      	mov	sp, r7
   10c38:	bd80      	pop	{r7, pc}
   10c3a:	bf00      	nop
   10c3c:	0001128d 	.word	0x0001128d
   10c40:	0001195d 	.word	0x0001195d

00010c44 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
   10c44:	b580      	push	{r7, lr}
   10c46:	b082      	sub	sp, #8
   10c48:	af00      	add	r7, sp, #0
   10c4a:	6078      	str	r0, [r7, #4]
   10c4c:	4a0f      	ldr	r2, [pc, #60]	; (10c8c <_ZN15ARINC_InterfaceD1Ev+0x48>)
   10c4e:	687b      	ldr	r3, [r7, #4]
   10c50:	601a      	str	r2, [r3, #0]
   10c52:	687b      	ldr	r3, [r7, #4]
   10c54:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
   10c58:	4a0d      	ldr	r2, [pc, #52]	; (10c90 <_ZN15ARINC_InterfaceD1Ev+0x4c>)
   10c5a:	601a      	str	r2, [r3, #0]
   10c5c:	687b      	ldr	r3, [r7, #4]
   10c5e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
   10c62:	4618      	mov	r0, r3
   10c64:	4b0b      	ldr	r3, [pc, #44]	; (10c94 <_ZN15ARINC_InterfaceD1Ev+0x50>)
   10c66:	4798      	blx	r3
   10c68:	687b      	ldr	r3, [r7, #4]
   10c6a:	4a0b      	ldr	r2, [pc, #44]	; (10c98 <_ZN15ARINC_InterfaceD1Ev+0x54>)
   10c6c:	4611      	mov	r1, r2
   10c6e:	4618      	mov	r0, r3
   10c70:	4b0a      	ldr	r3, [pc, #40]	; (10c9c <_ZN15ARINC_InterfaceD1Ev+0x58>)
   10c72:	4798      	blx	r3
   10c74:	687b      	ldr	r3, [r7, #4]
   10c76:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
   10c7a:	4618      	mov	r0, r3
   10c7c:	4b08      	ldr	r3, [pc, #32]	; (10ca0 <_ZN15ARINC_InterfaceD1Ev+0x5c>)
   10c7e:	4798      	blx	r3
} //~ARINC_Interface
   10c80:	687b      	ldr	r3, [r7, #4]
   10c82:	4618      	mov	r0, r3
   10c84:	3708      	adds	r7, #8
   10c86:	46bd      	mov	sp, r7
   10c88:	bd80      	pop	{r7, pc}
   10c8a:	bf00      	nop
   10c8c:	000191ec 	.word	0x000191ec
   10c90:	00019208 	.word	0x00019208
   10c94:	0001128d 	.word	0x0001128d
   10c98:	00019214 	.word	0x00019214
   10c9c:	0001195d 	.word	0x0001195d
   10ca0:	00010751 	.word	0x00010751

00010ca4 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
   10ca4:	b580      	push	{r7, lr}
   10ca6:	b082      	sub	sp, #8
   10ca8:	af00      	add	r7, sp, #0
   10caa:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
   10cac:	6878      	ldr	r0, [r7, #4]
   10cae:	4b06      	ldr	r3, [pc, #24]	; (10cc8 <_ZN15ARINC_InterfaceD0Ev+0x24>)
   10cb0:	4798      	blx	r3
   10cb2:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   10cb6:	6878      	ldr	r0, [r7, #4]
   10cb8:	4b04      	ldr	r3, [pc, #16]	; (10ccc <_ZN15ARINC_InterfaceD0Ev+0x28>)
   10cba:	4798      	blx	r3
   10cbc:	687b      	ldr	r3, [r7, #4]
   10cbe:	4618      	mov	r0, r3
   10cc0:	3708      	adds	r7, #8
   10cc2:	46bd      	mov	sp, r7
   10cc4:	bd80      	pop	{r7, pc}
   10cc6:	bf00      	nop
   10cc8:	00010c45 	.word	0x00010c45
   10ccc:	000159b1 	.word	0x000159b1

00010cd0 <_ZN15ARINC_Interface4InitEv>:




bool	ARINC_Interface::Init(void){
   10cd0:	b590      	push	{r4, r7, lr}
   10cd2:	b083      	sub	sp, #12
   10cd4:	af00      	add	r7, sp, #0
   10cd6:	6078      	str	r0, [r7, #4]
	MessageCount=0; MessageCount1=0; MessageCount2=0;
   10cd8:	687b      	ldr	r3, [r7, #4]
   10cda:	2200      	movs	r2, #0
   10cdc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   10ce0:	687b      	ldr	r3, [r7, #4]
   10ce2:	2200      	movs	r2, #0
   10ce4:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
   10ce8:	687b      	ldr	r3, [r7, #4]
   10cea:	2200      	movs	r2, #0
   10cec:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
	BITRATE0=false;
   10cf0:	687b      	ldr	r3, [r7, #4]
   10cf2:	2200      	movs	r2, #0
   10cf4:	731a      	strb	r2, [r3, #12]
	BITRATE1=false;
   10cf6:	687b      	ldr	r3, [r7, #4]
   10cf8:	2200      	movs	r2, #0
   10cfa:	735a      	strb	r2, [r3, #13]
	BITRATE2=false;
   10cfc:	687b      	ldr	r3, [r7, #4]
   10cfe:	2200      	movs	r2, #0
   10d00:	739a      	strb	r2, [r3, #14]

	PARITY=false;
   10d02:	687b      	ldr	r3, [r7, #4]
   10d04:	2200      	movs	r2, #0
   10d06:	73da      	strb	r2, [r3, #15]
	HW_RESET();
   10d08:	6878      	ldr	r0, [r7, #4]
   10d0a:	4b52      	ldr	r3, [pc, #328]	; (10e54 <_ZN15ARINC_Interface4InitEv+0x184>)
   10d0c:	4798      	blx	r3
	statusHolt=HI3593.Init();
   10d0e:	687b      	ldr	r3, [r7, #4]
   10d10:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
   10d14:	4618      	mov	r0, r3
   10d16:	4b50      	ldr	r3, [pc, #320]	; (10e58 <_ZN15ARINC_Interface4InitEv+0x188>)
   10d18:	4798      	blx	r3
   10d1a:	4603      	mov	r3, r0
   10d1c:	461a      	mov	r2, r3
   10d1e:	687b      	ldr	r3, [r7, #4]
   10d20:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
	if (statusHolt!=TSR_Default){
   10d24:	687b      	ldr	r3, [r7, #4]
   10d26:	f893 31a3 	ldrb.w	r3, [r3, #419]	; 0x1a3
   10d2a:	2b01      	cmp	r3, #1
   10d2c:	d008      	beq.n	10d40 <_ZN15ARINC_Interface4InitEv+0x70>
		usb.println("\n\rHI-3593 failed to Initilize\n\r");
   10d2e:	494b      	ldr	r1, [pc, #300]	; (10e5c <_ZN15ARINC_Interface4InitEv+0x18c>)
   10d30:	484b      	ldr	r0, [pc, #300]	; (10e60 <_ZN15ARINC_Interface4InitEv+0x190>)
   10d32:	4b4c      	ldr	r3, [pc, #304]	; (10e64 <_ZN15ARINC_Interface4InitEv+0x194>)
   10d34:	4798      	blx	r3
		isOK=false;
   10d36:	687b      	ldr	r3, [r7, #4]
   10d38:	2200      	movs	r2, #0
   10d3a:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
   10d3e:	e06c      	b.n	10e1a <_ZN15ARINC_Interface4InitEv+0x14a>
	}else{
		isOK=true;
   10d40:	687b      	ldr	r3, [r7, #4]
   10d42:	2201      	movs	r2, #1
   10d44:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
		newMessageR1=false;
   10d48:	687b      	ldr	r3, [r7, #4]
   10d4a:	2200      	movs	r2, #0
   10d4c:	741a      	strb	r2, [r3, #16]
		newMessageR2=false;
   10d4e:	687b      	ldr	r3, [r7, #4]
   10d50:	2200      	movs	r2, #0
   10d52:	745a      	strb	r2, [r3, #17]
		BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
   10d54:	687b      	ldr	r3, [r7, #4]
   10d56:	2200      	movs	r2, #0
   10d58:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
		MessageCount=0;
   10d5c:	687b      	ldr	r3, [r7, #4]
   10d5e:	2200      	movs	r2, #0
   10d60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		ARINCLabel = 0x1D;         // Write ARINC Label
   10d64:	687b      	ldr	r3, [r7, #4]
   10d66:	221d      	movs	r2, #29
   10d68:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
		Arate=0;
   10d6c:	687b      	ldr	r3, [r7, #4]
   10d6e:	2200      	movs	r2, #0
   10d70:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
		
		(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
   10d74:	687b      	ldr	r3, [r7, #4]
   10d76:	3313      	adds	r3, #19
   10d78:	2210      	movs	r2, #16
   10d7a:	2100      	movs	r1, #0
   10d7c:	4618      	mov	r0, r3
   10d7e:	4b3a      	ldr	r3, [pc, #232]	; (10e68 <_ZN15ARINC_Interface4InitEv+0x198>)
   10d80:	4798      	blx	r3
			
		// Setup the Labels
		HI3593.initReceiver1Labels();     // initial Rec1 labels
   10d82:	687b      	ldr	r3, [r7, #4]
   10d84:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
   10d88:	4618      	mov	r0, r3
   10d8a:	4b38      	ldr	r3, [pc, #224]	; (10e6c <_ZN15ARINC_Interface4InitEv+0x19c>)
   10d8c:	4798      	blx	r3
		HI3593.initReceiver2Labels();     // initial Rec2 labels
   10d8e:	687b      	ldr	r3, [r7, #4]
   10d90:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
   10d94:	4618      	mov	r0, r3
   10d96:	4b36      	ldr	r3, [pc, #216]	; (10e70 <_ZN15ARINC_Interface4InitEv+0x1a0>)
   10d98:	4798      	blx	r3
		HI3593.MultiByteRead(REC1MEMORY, 32, LabelsArrayTX); // read in all Rec-1 labels into the passed array
   10d9a:	687b      	ldr	r3, [r7, #4]
   10d9c:	f503 70da 	add.w	r0, r3, #436	; 0x1b4
   10da0:	687b      	ldr	r3, [r7, #4]
   10da2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   10da6:	2220      	movs	r2, #32
   10da8:	2198      	movs	r1, #152	; 0x98
   10daa:	4c32      	ldr	r4, [pc, #200]	; (10e74 <_ZN15ARINC_Interface4InitEv+0x1a4>)
   10dac:	47a0      	blx	r4
		HI3593.MultiByteRead(REC2MEMORY, 32, LabelsArrayRX); // read in all Rec-2 labels into the passed array
   10dae:	687b      	ldr	r3, [r7, #4]
   10db0:	f503 70da 	add.w	r0, r3, #436	; 0x1b4
   10db4:	687b      	ldr	r3, [r7, #4]
   10db6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
   10dba:	2220      	movs	r2, #32
   10dbc:	21b8      	movs	r1, #184	; 0xb8
   10dbe:	4c2d      	ldr	r4, [pc, #180]	; (10e74 <_ZN15ARINC_Interface4InitEv+0x1a4>)
   10dc0:	47a0      	blx	r4

		Rec1Parity =0;
   10dc2:	687b      	ldr	r3, [r7, #4]
   10dc4:	2200      	movs	r2, #0
   10dc6:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
		Rec2Parity =0;
   10dca:	687b      	ldr	r3, [r7, #4]
   10dcc:	2200      	movs	r2, #0
   10dce:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af

		HI3593.W_CommandValue(REC1CR,RFLIP | PLON | LABREC | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
   10dd2:	687b      	ldr	r3, [r7, #4]
   10dd4:	f503 70da 	add.w	r0, r3, #436	; 0x1b4
   10dd8:	687b      	ldr	r3, [r7, #4]
   10dda:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
   10dde:	687b      	ldr	r3, [r7, #4]
   10de0:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   10de4:	4313      	orrs	r3, r2
   10de6:	b2db      	uxtb	r3, r3
   10de8:	f063 0379 	orn	r3, r3, #121	; 0x79
   10dec:	b2db      	uxtb	r3, r3
   10dee:	461a      	mov	r2, r3
   10df0:	2110      	movs	r1, #16
   10df2:	4b21      	ldr	r3, [pc, #132]	; (10e78 <_ZN15ARINC_Interface4InitEv+0x1a8>)
   10df4:	4798      	blx	r3
		HI3593.W_CommandValue(REC2CR,RFLIP | PLON | LABREC | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
   10df6:	687b      	ldr	r3, [r7, #4]
   10df8:	f503 70da 	add.w	r0, r3, #436	; 0x1b4
   10dfc:	687b      	ldr	r3, [r7, #4]
   10dfe:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
   10e02:	687b      	ldr	r3, [r7, #4]
   10e04:	f893 31af 	ldrb.w	r3, [r3, #431]	; 0x1af
   10e08:	4313      	orrs	r3, r2
   10e0a:	b2db      	uxtb	r3, r3
   10e0c:	f063 0379 	orn	r3, r3, #121	; 0x79
   10e10:	b2db      	uxtb	r3, r3
   10e12:	461a      	mov	r2, r3
   10e14:	2124      	movs	r1, #36	; 0x24
   10e16:	4b18      	ldr	r3, [pc, #96]	; (10e78 <_ZN15ARINC_Interface4InitEv+0x1a8>)
   10e18:	4798      	blx	r3
	}
	
	arincTimer.Init();
   10e1a:	4818      	ldr	r0, [pc, #96]	; (10e7c <_ZN15ARINC_Interface4InitEv+0x1ac>)
   10e1c:	4b18      	ldr	r3, [pc, #96]	; (10e80 <_ZN15ARINC_Interface4InitEv+0x1b0>)
   10e1e:	4798      	blx	r3
	arincTimer.add_periodic_task(FUNC_PTR(blink_LED0),1000);
   10e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10e24:	4917      	ldr	r1, [pc, #92]	; (10e84 <_ZN15ARINC_Interface4InitEv+0x1b4>)
   10e26:	4815      	ldr	r0, [pc, #84]	; (10e7c <_ZN15ARINC_Interface4InitEv+0x1ac>)
   10e28:	4b17      	ldr	r3, [pc, #92]	; (10e88 <_ZN15ARINC_Interface4InitEv+0x1b8>)
   10e2a:	4798      	blx	r3
	arincTimer.add_periodic_task(FUNC_PTR(TxTimeout),500);
   10e2c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   10e30:	4916      	ldr	r1, [pc, #88]	; (10e8c <_ZN15ARINC_Interface4InitEv+0x1bc>)
   10e32:	4812      	ldr	r0, [pc, #72]	; (10e7c <_ZN15ARINC_Interface4InitEv+0x1ac>)
   10e34:	4b14      	ldr	r3, [pc, #80]	; (10e88 <_ZN15ARINC_Interface4InitEv+0x1b8>)
   10e36:	4798      	blx	r3
	ext_irq_register(ARINCR1Int, Receiver1Int);
   10e38:	4915      	ldr	r1, [pc, #84]	; (10e90 <_ZN15ARINC_Interface4InitEv+0x1c0>)
   10e3a:	2057      	movs	r0, #87	; 0x57
   10e3c:	4b15      	ldr	r3, [pc, #84]	; (10e94 <_ZN15ARINC_Interface4InitEv+0x1c4>)
   10e3e:	4798      	blx	r3
	arincTimer.start();
   10e40:	480e      	ldr	r0, [pc, #56]	; (10e7c <_ZN15ARINC_Interface4InitEv+0x1ac>)
   10e42:	4b15      	ldr	r3, [pc, #84]	; (10e98 <_ZN15ARINC_Interface4InitEv+0x1c8>)
   10e44:	4798      	blx	r3
	//HI3893.InitPriorityLabels();
	return isOK;
   10e46:	687b      	ldr	r3, [r7, #4]
   10e48:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
}
   10e4c:	4618      	mov	r0, r3
   10e4e:	370c      	adds	r7, #12
   10e50:	46bd      	mov	sp, r7
   10e52:	bd90      	pop	{r4, r7, pc}
   10e54:	0001112d 	.word	0x0001112d
   10e58:	000112ad 	.word	0x000112ad
   10e5c:	000187d4 	.word	0x000187d4
   10e60:	20004cc4 	.word	0x20004cc4
   10e64:	00014cb9 	.word	0x00014cb9
   10e68:	0001790d 	.word	0x0001790d
   10e6c:	000114c1 	.word	0x000114c1
   10e70:	00011629 	.word	0x00011629
   10e74:	00011695 	.word	0x00011695
   10e78:	00011869 	.word	0x00011869
   10e7c:	20004ca0 	.word	0x20004ca0
   10e80:	00014305 	.word	0x00014305
   10e84:	00010aa5 	.word	0x00010aa5
   10e88:	000143e1 	.word	0x000143e1
   10e8c:	00010ac1 	.word	0x00010ac1
   10e90:	00010ae1 	.word	0x00010ae1
   10e94:	00004af9 	.word	0x00004af9
   10e98:	00014339 	.word	0x00014339

00010e9c <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
   10e9c:	b480      	push	{r7}
   10e9e:	b085      	sub	sp, #20
   10ea0:	af00      	add	r7, sp, #0
   10ea2:	6078      	str	r0, [r7, #4]
   10ea4:	460b      	mov	r3, r1
   10ea6:	70fb      	strb	r3, [r7, #3]
	uint32_t *data;
	uint8_t	j;
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   10ea8:	2300      	movs	r3, #0
   10eaa:	73fb      	strb	r3, [r7, #15]
   10eac:	7bfb      	ldrb	r3, [r7, #15]
   10eae:	2b3f      	cmp	r3, #63	; 0x3f
   10eb0:	dc1e      	bgt.n	10ef0 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x54>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
   10eb2:	687b      	ldr	r3, [r7, #4]
   10eb4:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   10eb8:	7bfb      	ldrb	r3, [r7, #15]
   10eba:	4413      	add	r3, r2
   10ebc:	b2db      	uxtb	r3, r3
   10ebe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10ec2:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
   10ec4:	7bbb      	ldrb	r3, [r7, #14]
   10ec6:	687a      	ldr	r2, [r7, #4]
   10ec8:	009b      	lsls	r3, r3, #2
   10eca:	4413      	add	r3, r2
   10ecc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   10ed0:	78fa      	ldrb	r2, [r7, #3]
   10ed2:	429a      	cmp	r2, r3
   10ed4:	d108      	bne.n	10ee8 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x4c>
		{
			data=(uint32_t*)receiverBuffer[j];
   10ed6:	7bbb      	ldrb	r3, [r7, #14]
   10ed8:	3310      	adds	r3, #16
   10eda:	009b      	lsls	r3, r3, #2
   10edc:	687a      	ldr	r2, [r7, #4]
   10ede:	4413      	add	r3, r2
   10ee0:	60bb      	str	r3, [r7, #8]
			return *data;
   10ee2:	68bb      	ldr	r3, [r7, #8]
   10ee4:	681b      	ldr	r3, [r3, #0]
   10ee6:	e004      	b.n	10ef2 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x56>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   10ee8:	7bfb      	ldrb	r3, [r7, #15]
   10eea:	3301      	adds	r3, #1
   10eec:	73fb      	strb	r3, [r7, #15]
   10eee:	e7dd      	b.n	10eac <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
		}
		
	}

	return 0;
   10ef0:	2300      	movs	r3, #0
}
   10ef2:	4618      	mov	r0, r3
   10ef4:	3714      	adds	r7, #20
   10ef6:	46bd      	mov	sp, r7
   10ef8:	bc80      	pop	{r7}
   10efa:	4770      	bx	lr

00010efc <_ZN15ARINC_Interface18TrasmitSingleLabelEv>:
uint32_t ARINC_Interface::ReadBufferLabel(int label){
	uint8_t	l=Label2Byte((uint32_t)label);
	return (uint32_t)ReadBufferLabel(l);
}
uint32_t ARINC_Interface::TrasmitSingleLabel(void){
   10efc:	b580      	push	{r7, lr}
   10efe:	b082      	sub	sp, #8
   10f00:	af00      	add	r7, sp, #0
   10f02:	6078      	str	r0, [r7, #4]
	return	TrasmitSingleLabel(DEFAULT_LABEL);
   10f04:	4904      	ldr	r1, [pc, #16]	; (10f18 <_ZN15ARINC_Interface18TrasmitSingleLabelEv+0x1c>)
   10f06:	6878      	ldr	r0, [r7, #4]
   10f08:	4b04      	ldr	r3, [pc, #16]	; (10f1c <_ZN15ARINC_Interface18TrasmitSingleLabelEv+0x20>)
   10f0a:	4798      	blx	r3
   10f0c:	4603      	mov	r3, r0
}
   10f0e:	4618      	mov	r0, r3
   10f10:	3708      	adds	r7, #8
   10f12:	46bd      	mov	sp, r7
   10f14:	bd80      	pop	{r7, pc}
   10f16:	bf00      	nop
   10f18:	1d5d21c1 	.word	0x1d5d21c1
   10f1c:	00010f21 	.word	0x00010f21

00010f20 <_ZN15ARINC_Interface18TrasmitSingleLabelEm>:

uint32_t ARINC_Interface::TrasmitSingleLabel(uint32_t l){
   10f20:	b580      	push	{r7, lr}
   10f22:	b084      	sub	sp, #16
   10f24:	af00      	add	r7, sp, #0
   10f26:	6078      	str	r0, [r7, #4]
   10f28:	6039      	str	r1, [r7, #0]
	ARINCLabel=Label2Byte(l);
   10f2a:	687b      	ldr	r3, [r7, #4]
   10f2c:	681b      	ldr	r3, [r3, #0]
   10f2e:	3b0c      	subs	r3, #12
   10f30:	681b      	ldr	r3, [r3, #0]
   10f32:	461a      	mov	r2, r3
   10f34:	687b      	ldr	r3, [r7, #4]
   10f36:	4413      	add	r3, r2
   10f38:	681b      	ldr	r3, [r3, #0]
   10f3a:	3304      	adds	r3, #4
   10f3c:	681b      	ldr	r3, [r3, #0]
   10f3e:	687a      	ldr	r2, [r7, #4]
   10f40:	6812      	ldr	r2, [r2, #0]
   10f42:	3a0c      	subs	r2, #12
   10f44:	6812      	ldr	r2, [r2, #0]
   10f46:	4611      	mov	r1, r2
   10f48:	687a      	ldr	r2, [r7, #4]
   10f4a:	440a      	add	r2, r1
   10f4c:	6839      	ldr	r1, [r7, #0]
   10f4e:	4610      	mov	r0, r2
   10f50:	4798      	blx	r3
   10f52:	4603      	mov	r3, r0
   10f54:	461a      	mov	r2, r3
   10f56:	687b      	ldr	r3, [r7, #4]
   10f58:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
	index=GetIndexTXLabelarray(l,LabelsArrayTX);
   10f5c:	687b      	ldr	r3, [r7, #4]
   10f5e:	681b      	ldr	r3, [r3, #0]
   10f60:	3b0c      	subs	r3, #12
   10f62:	681b      	ldr	r3, [r3, #0]
   10f64:	461a      	mov	r2, r3
   10f66:	687b      	ldr	r3, [r7, #4]
   10f68:	1898      	adds	r0, r3, r2
   10f6a:	683b      	ldr	r3, [r7, #0]
   10f6c:	b2d9      	uxtb	r1, r3
   10f6e:	687b      	ldr	r3, [r7, #4]
   10f70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   10f74:	461a      	mov	r2, r3
   10f76:	4b2a      	ldr	r3, [pc, #168]	; (11020 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x100>)
   10f78:	4798      	blx	r3
   10f7a:	4603      	mov	r3, r0
   10f7c:	461a      	mov	r2, r3
   10f7e:	687b      	ldr	r3, [r7, #4]
   10f80:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
	uint8_t localBuffer[4];
	memcpy(localBuffer,&transmitBuffer[index][0],4);
   10f84:	687b      	ldr	r3, [r7, #4]
   10f86:	f893 31b3 	ldrb.w	r3, [r3, #435]	; 0x1b3
   10f8a:	3330      	adds	r3, #48	; 0x30
   10f8c:	009b      	lsls	r3, r3, #2
   10f8e:	687a      	ldr	r2, [r7, #4]
   10f90:	4413      	add	r3, r2
   10f92:	681b      	ldr	r3, [r3, #0]
   10f94:	60fb      	str	r3, [r7, #12]
	PrepareSingleTXBuffer(TXBuffer,localBuffer);
   10f96:	687b      	ldr	r3, [r7, #4]
   10f98:	681b      	ldr	r3, [r3, #0]
   10f9a:	3b0c      	subs	r3, #12
   10f9c:	681b      	ldr	r3, [r3, #0]
   10f9e:	461a      	mov	r2, r3
   10fa0:	687b      	ldr	r3, [r7, #4]
   10fa2:	1898      	adds	r0, r3, r2
   10fa4:	687b      	ldr	r3, [r7, #4]
   10fa6:	3313      	adds	r3, #19
   10fa8:	f107 020c 	add.w	r2, r7, #12
   10fac:	4619      	mov	r1, r3
   10fae:	4b1d      	ldr	r3, [pc, #116]	; (11024 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x104>)
   10fb0:	4798      	blx	r3
	usb.println(" transmitting...");
   10fb2:	491d      	ldr	r1, [pc, #116]	; (11028 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x108>)
   10fb4:	481d      	ldr	r0, [pc, #116]	; (1102c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x10c>)
   10fb6:	4b1e      	ldr	r3, [pc, #120]	; (11030 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x110>)
   10fb8:	4798      	blx	r3
	cpu_irq_disable();
   10fba:	6878      	ldr	r0, [r7, #4]
   10fbc:	4b1d      	ldr	r3, [pc, #116]	; (11034 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x114>)
   10fbe:	4798      	blx	r3
	HI3593.TransmitCommandAndData(TXFIFO,TXBuffer);
   10fc0:	687b      	ldr	r3, [r7, #4]
   10fc2:	f503 70da 	add.w	r0, r3, #436	; 0x1b4
   10fc6:	687b      	ldr	r3, [r7, #4]
   10fc8:	3313      	adds	r3, #19
   10fca:	461a      	mov	r2, r3
   10fcc:	210c      	movs	r1, #12
   10fce:	4b1a      	ldr	r3, [pc, #104]	; (11038 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x118>)
   10fd0:	4798      	blx	r3
	cpu_irq_enable();
   10fd2:	6878      	ldr	r0, [r7, #4]
   10fd4:	4b19      	ldr	r3, [pc, #100]	; (1103c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x11c>)
   10fd6:	4798      	blx	r3
	usb.println(" Transmitted!");
   10fd8:	4919      	ldr	r1, [pc, #100]	; (11040 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x120>)
   10fda:	4814      	ldr	r0, [pc, #80]	; (1102c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x10c>)
   10fdc:	4b14      	ldr	r3, [pc, #80]	; (11030 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x110>)
   10fde:	4798      	blx	r3
	usb.println(">");
   10fe0:	4918      	ldr	r1, [pc, #96]	; (11044 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x124>)
   10fe2:	4812      	ldr	r0, [pc, #72]	; (1102c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x10c>)
   10fe4:	4b12      	ldr	r3, [pc, #72]	; (11030 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x110>)
   10fe6:	4798      	blx	r3
	printARINCTXData(TXBuffer);
   10fe8:	687b      	ldr	r3, [r7, #4]
   10fea:	3313      	adds	r3, #19
   10fec:	4619      	mov	r1, r3
   10fee:	6878      	ldr	r0, [r7, #4]
   10ff0:	4b15      	ldr	r3, [pc, #84]	; (11048 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x128>)
   10ff2:	4798      	blx	r3
	txTimeout=false;
   10ff4:	687b      	ldr	r3, [r7, #4]
   10ff6:	2200      	movs	r2, #0
   10ff8:	749a      	strb	r2, [r3, #18]
	return FourBytesArray2Uint32(TXBuffer);
   10ffa:	687b      	ldr	r3, [r7, #4]
   10ffc:	681b      	ldr	r3, [r3, #0]
   10ffe:	3b0c      	subs	r3, #12
   11000:	681b      	ldr	r3, [r3, #0]
   11002:	461a      	mov	r2, r3
   11004:	687b      	ldr	r3, [r7, #4]
   11006:	441a      	add	r2, r3
   11008:	687b      	ldr	r3, [r7, #4]
   1100a:	3313      	adds	r3, #19
   1100c:	4619      	mov	r1, r3
   1100e:	4610      	mov	r0, r2
   11010:	4b0e      	ldr	r3, [pc, #56]	; (1104c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x12c>)
   11012:	4798      	blx	r3
   11014:	4603      	mov	r3, r0
}
   11016:	4618      	mov	r0, r3
   11018:	3710      	adds	r7, #16
   1101a:	46bd      	mov	sp, r7
   1101c:	bd80      	pop	{r7, pc}
   1101e:	bf00      	nop
   11020:	0001092b 	.word	0x0001092b
   11024:	00010979 	.word	0x00010979
   11028:	00018830 	.word	0x00018830
   1102c:	20004cc4 	.word	0x20004cc4
   11030:	00014cb9 	.word	0x00014cb9
   11034:	00011069 	.word	0x00011069
   11038:	00011769 	.word	0x00011769
   1103c:	00011051 	.word	0x00011051
   11040:	00018844 	.word	0x00018844
   11044:	00018854 	.word	0x00018854
   11048:	000110b9 	.word	0x000110b9
   1104c:	000109c7 	.word	0x000109c7

00011050 <_ZN15ARINC_Interface14cpu_irq_enableEv>:
	usb.println("  I = Increment Message and Transmit. Explorer Mode  - ONLY!");
	usb.println("  M = Enter Custom Message. Explorer Mode  - ONLY!");
	usb.println("  ENTER= Transmit next message. Explorer Mode  - ONLY!");
}

void	ARINC_Interface::cpu_irq_enable(void){
   11050:	b480      	push	{r7}
   11052:	b083      	sub	sp, #12
   11054:	af00      	add	r7, sp, #0
   11056:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   11058:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1105c:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
   1105e:	bf00      	nop
   11060:	370c      	adds	r7, #12
   11062:	46bd      	mov	sp, r7
   11064:	bc80      	pop	{r7}
   11066:	4770      	bx	lr

00011068 <_ZN15ARINC_Interface15cpu_irq_disableEv>:
void	ARINC_Interface::cpu_irq_disable(void){
   11068:	b480      	push	{r7}
   1106a:	b083      	sub	sp, #12
   1106c:	af00      	add	r7, sp, #0
   1106e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   11070:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   11074:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
   11076:	bf00      	nop
   11078:	370c      	adds	r7, #12
   1107a:	46bd      	mov	sp, r7
   1107c:	bc80      	pop	{r7}
   1107e:	4770      	bx	lr

00011080 <_ZN15ARINC_Interface12PrintHexByteEh>:
	usb.write(&p,1);
	p=0x0D;
	usb.write(&p,1);
}
void ARINC_Interface::PrintHexByte(uint8_t c)
{
   11080:	b580      	push	{r7, lr}
   11082:	b082      	sub	sp, #8
   11084:	af00      	add	r7, sp, #0
   11086:	6078      	str	r0, [r7, #4]
   11088:	460b      	mov	r3, r1
   1108a:	70fb      	strb	r3, [r7, #3]
	usb<<"0x ";
   1108c:	4906      	ldr	r1, [pc, #24]	; (110a8 <_ZN15ARINC_Interface12PrintHexByteEh+0x28>)
   1108e:	4807      	ldr	r0, [pc, #28]	; (110ac <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   11090:	4b07      	ldr	r3, [pc, #28]	; (110b0 <_ZN15ARINC_Interface12PrintHexByteEh+0x30>)
   11092:	4798      	blx	r3
	usb.println(c,HEX);
   11094:	78fb      	ldrb	r3, [r7, #3]
   11096:	2210      	movs	r2, #16
   11098:	4619      	mov	r1, r3
   1109a:	4804      	ldr	r0, [pc, #16]	; (110ac <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   1109c:	4b05      	ldr	r3, [pc, #20]	; (110b4 <_ZN15ARINC_Interface12PrintHexByteEh+0x34>)
   1109e:	4798      	blx	r3
	
}
   110a0:	bf00      	nop
   110a2:	3708      	adds	r7, #8
   110a4:	46bd      	mov	sp, r7
   110a6:	bd80      	pop	{r7, pc}
   110a8:	00018cf4 	.word	0x00018cf4
   110ac:	20004cc4 	.word	0x20004cc4
   110b0:	00000b45 	.word	0x00000b45
   110b4:	00014ced 	.word	0x00014ced

000110b8 <_ZN15ARINC_Interface16printARINCTXDataEPh>:
		usb.println("\n\rLabels 192-255:  ");
	}
	
}

void ARINC_Interface::printARINCTXData(unsigned char *array) {
   110b8:	b580      	push	{r7, lr}
   110ba:	b084      	sub	sp, #16
   110bc:	af00      	add	r7, sp, #0
   110be:	6078      	str	r0, [r7, #4]
   110c0:	6039      	str	r1, [r7, #0]
	unsigned char i;
	
	usb.println("\n\r>TX    Data:");
   110c2:	4914      	ldr	r1, [pc, #80]	; (11114 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x5c>)
   110c4:	4814      	ldr	r0, [pc, #80]	; (11118 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   110c6:	4b15      	ldr	r3, [pc, #84]	; (1111c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   110c8:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   110ca:	2300      	movs	r3, #0
   110cc:	73fb      	strb	r3, [r7, #15]
   110ce:	7bfb      	ldrb	r3, [r7, #15]
   110d0:	2b02      	cmp	r3, #2
   110d2:	dc0b      	bgt.n	110ec <_ZN15ARINC_Interface16printARINCTXDataEPh+0x34>
		PrintHexByte(array[i]);          // Output the data
   110d4:	7bfb      	ldrb	r3, [r7, #15]
   110d6:	683a      	ldr	r2, [r7, #0]
   110d8:	4413      	add	r3, r2
   110da:	781b      	ldrb	r3, [r3, #0]
   110dc:	4619      	mov	r1, r3
   110de:	6878      	ldr	r0, [r7, #4]
   110e0:	4b0f      	ldr	r3, [pc, #60]	; (11120 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   110e2:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   110e4:	7bfb      	ldrb	r3, [r7, #15]
   110e6:	3301      	adds	r3, #1
   110e8:	73fb      	strb	r3, [r7, #15]
   110ea:	e7f0      	b.n	110ce <_ZN15ARINC_Interface16printARINCTXDataEPh+0x16>
	}
	usb.println("Label:");
   110ec:	490d      	ldr	r1, [pc, #52]	; (11124 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x6c>)
   110ee:	480a      	ldr	r0, [pc, #40]	; (11118 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   110f0:	4b0a      	ldr	r3, [pc, #40]	; (1111c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   110f2:	4798      	blx	r3
	PrintHexByte(array[3]);             // Output the label data
   110f4:	683b      	ldr	r3, [r7, #0]
   110f6:	3303      	adds	r3, #3
   110f8:	781b      	ldrb	r3, [r3, #0]
   110fa:	4619      	mov	r1, r3
   110fc:	6878      	ldr	r0, [r7, #4]
   110fe:	4b08      	ldr	r3, [pc, #32]	; (11120 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   11100:	4798      	blx	r3
	
	//crlf();
	usb.println(">");
   11102:	4909      	ldr	r1, [pc, #36]	; (11128 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x70>)
   11104:	4804      	ldr	r0, [pc, #16]	; (11118 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   11106:	4b05      	ldr	r3, [pc, #20]	; (1111c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   11108:	4798      	blx	r3
}
   1110a:	bf00      	nop
   1110c:	3710      	adds	r7, #16
   1110e:	46bd      	mov	sp, r7
   11110:	bd80      	pop	{r7, pc}
   11112:	bf00      	nop
   11114:	00018eb8 	.word	0x00018eb8
   11118:	20004cc4 	.word	0x20004cc4
   1111c:	00014cb9 	.word	0x00014cb9
   11120:	00011081 	.word	0x00011081
   11124:	00018ec8 	.word	0x00018ec8
   11128:	00018854 	.word	0x00018854

0001112c <_ZN15ARINC_Interface8HW_RESETEv>:
	//crlf();
	usb.println("\n\r");
	usb.println(">");
}

void ARINC_Interface::HW_RESET(void){
   1112c:	b580      	push	{r7, lr}
   1112e:	b082      	sub	sp, #8
   11130:	af00      	add	r7, sp, #0
   11132:	6078      	str	r0, [r7, #4]
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
   11134:	2001      	movs	r0, #1
   11136:	4b03      	ldr	r3, [pc, #12]	; (11144 <_ZN15ARINC_Interface8HW_RESETEv+0x18>)
   11138:	4798      	blx	r3
	//gpio_set_pin_level(MR,false);
}
   1113a:	bf00      	nop
   1113c:	3708      	adds	r7, #8
   1113e:	46bd      	mov	sp, r7
   11140:	bd80      	pop	{r7, pc}
   11142:	bf00      	nop
   11144:	00004a31 	.word	0x00004a31

00011148 <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

   11148:	b580      	push	{r7, lr}
   1114a:	b082      	sub	sp, #8
   1114c:	af00      	add	r7, sp, #0
   1114e:	6078      	str	r0, [r7, #4]
   11150:	6039      	str	r1, [r7, #0]
   11152:	687b      	ldr	r3, [r7, #4]
   11154:	2b01      	cmp	r3, #1
   11156:	d10c      	bne.n	11172 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   11158:	683b      	ldr	r3, [r7, #0]
   1115a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1115e:	4293      	cmp	r3, r2
   11160:	d107      	bne.n	11172 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   11162:	4806      	ldr	r0, [pc, #24]	; (1117c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11164:	4b06      	ldr	r3, [pc, #24]	; (11180 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11166:	4798      	blx	r3
   11168:	4a06      	ldr	r2, [pc, #24]	; (11184 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1116a:	4907      	ldr	r1, [pc, #28]	; (11188 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1116c:	4803      	ldr	r0, [pc, #12]	; (1117c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1116e:	4b07      	ldr	r3, [pc, #28]	; (1118c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   11170:	4798      	blx	r3
   11172:	bf00      	nop
   11174:	3708      	adds	r7, #8
   11176:	46bd      	mov	sp, r7
   11178:	bd80      	pop	{r7, pc}
   1117a:	bf00      	nop
   1117c:	2000342c 	.word	0x2000342c
   11180:	00010b89 	.word	0x00010b89
   11184:	20000000 	.word	0x20000000
   11188:	00010c45 	.word	0x00010c45
   1118c:	000159a5 	.word	0x000159a5

00011190 <_GLOBAL__sub_I_HexSymbols>:
   11190:	b580      	push	{r7, lr}
   11192:	af00      	add	r7, sp, #0
   11194:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11198:	2001      	movs	r0, #1
   1119a:	4b01      	ldr	r3, [pc, #4]	; (111a0 <_GLOBAL__sub_I_HexSymbols+0x10>)
   1119c:	4798      	blx	r3
   1119e:	bd80      	pop	{r7, pc}
   111a0:	00011149 	.word	0x00011149

000111a4 <hri_port_set_OUT_reg>:
{
   111a4:	b480      	push	{r7}
   111a6:	b085      	sub	sp, #20
   111a8:	af00      	add	r7, sp, #0
   111aa:	60f8      	str	r0, [r7, #12]
   111ac:	460b      	mov	r3, r1
   111ae:	607a      	str	r2, [r7, #4]
   111b0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   111b2:	7afb      	ldrb	r3, [r7, #11]
   111b4:	68fa      	ldr	r2, [r7, #12]
   111b6:	01db      	lsls	r3, r3, #7
   111b8:	4413      	add	r3, r2
   111ba:	3318      	adds	r3, #24
   111bc:	687a      	ldr	r2, [r7, #4]
   111be:	601a      	str	r2, [r3, #0]
}
   111c0:	bf00      	nop
   111c2:	3714      	adds	r7, #20
   111c4:	46bd      	mov	sp, r7
   111c6:	bc80      	pop	{r7}
   111c8:	4770      	bx	lr

000111ca <hri_port_clear_OUT_reg>:
{
   111ca:	b480      	push	{r7}
   111cc:	b085      	sub	sp, #20
   111ce:	af00      	add	r7, sp, #0
   111d0:	60f8      	str	r0, [r7, #12]
   111d2:	460b      	mov	r3, r1
   111d4:	607a      	str	r2, [r7, #4]
   111d6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   111d8:	7afb      	ldrb	r3, [r7, #11]
   111da:	68fa      	ldr	r2, [r7, #12]
   111dc:	01db      	lsls	r3, r3, #7
   111de:	4413      	add	r3, r2
   111e0:	3314      	adds	r3, #20
   111e2:	687a      	ldr	r2, [r7, #4]
   111e4:	601a      	str	r2, [r3, #0]
}
   111e6:	bf00      	nop
   111e8:	3714      	adds	r7, #20
   111ea:	46bd      	mov	sp, r7
   111ec:	bc80      	pop	{r7}
   111ee:	4770      	bx	lr

000111f0 <_gpio_set_level>:
{
   111f0:	b580      	push	{r7, lr}
   111f2:	b082      	sub	sp, #8
   111f4:	af00      	add	r7, sp, #0
   111f6:	4603      	mov	r3, r0
   111f8:	6039      	str	r1, [r7, #0]
   111fa:	71fb      	strb	r3, [r7, #7]
   111fc:	4613      	mov	r3, r2
   111fe:	71bb      	strb	r3, [r7, #6]
	if (level) {
   11200:	79bb      	ldrb	r3, [r7, #6]
   11202:	2b00      	cmp	r3, #0
   11204:	d006      	beq.n	11214 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   11206:	79fb      	ldrb	r3, [r7, #7]
   11208:	683a      	ldr	r2, [r7, #0]
   1120a:	4619      	mov	r1, r3
   1120c:	4806      	ldr	r0, [pc, #24]	; (11228 <_gpio_set_level+0x38>)
   1120e:	4b07      	ldr	r3, [pc, #28]	; (1122c <_gpio_set_level+0x3c>)
   11210:	4798      	blx	r3
}
   11212:	e005      	b.n	11220 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   11214:	79fb      	ldrb	r3, [r7, #7]
   11216:	683a      	ldr	r2, [r7, #0]
   11218:	4619      	mov	r1, r3
   1121a:	4803      	ldr	r0, [pc, #12]	; (11228 <_gpio_set_level+0x38>)
   1121c:	4b04      	ldr	r3, [pc, #16]	; (11230 <_gpio_set_level+0x40>)
   1121e:	4798      	blx	r3
}
   11220:	bf00      	nop
   11222:	3708      	adds	r7, #8
   11224:	46bd      	mov	sp, r7
   11226:	bd80      	pop	{r7, pc}
   11228:	41008000 	.word	0x41008000
   1122c:	000111a5 	.word	0x000111a5
   11230:	000111cb 	.word	0x000111cb

00011234 <gpio_set_pin_level>:
{
   11234:	b580      	push	{r7, lr}
   11236:	b082      	sub	sp, #8
   11238:	af00      	add	r7, sp, #0
   1123a:	4603      	mov	r3, r0
   1123c:	460a      	mov	r2, r1
   1123e:	71fb      	strb	r3, [r7, #7]
   11240:	4613      	mov	r3, r2
   11242:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   11244:	79fb      	ldrb	r3, [r7, #7]
   11246:	115b      	asrs	r3, r3, #5
   11248:	b2d8      	uxtb	r0, r3
   1124a:	79fb      	ldrb	r3, [r7, #7]
   1124c:	f003 031f 	and.w	r3, r3, #31
   11250:	2201      	movs	r2, #1
   11252:	fa02 f303 	lsl.w	r3, r2, r3
   11256:	79ba      	ldrb	r2, [r7, #6]
   11258:	4619      	mov	r1, r3
   1125a:	4b03      	ldr	r3, [pc, #12]	; (11268 <gpio_set_pin_level+0x34>)
   1125c:	4798      	blx	r3
}
   1125e:	bf00      	nop
   11260:	3708      	adds	r7, #8
   11262:	46bd      	mov	sp, r7
   11264:	bd80      	pop	{r7, pc}
   11266:	bf00      	nop
   11268:	000111f1 	.word	0x000111f1

0001126c <_ZN15Holt_3593_ClassC1Ev>:


#include "Holt_3593_Class.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
   1126c:	b580      	push	{r7, lr}
   1126e:	b082      	sub	sp, #8
   11270:	af00      	add	r7, sp, #0
   11272:	6078      	str	r0, [r7, #4]
   11274:	687b      	ldr	r3, [r7, #4]
   11276:	4618      	mov	r0, r3
   11278:	4b03      	ldr	r3, [pc, #12]	; (11288 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
   1127a:	4798      	blx	r3
{
} //Holt_3593_Class
   1127c:	687b      	ldr	r3, [r7, #4]
   1127e:	4618      	mov	r0, r3
   11280:	3708      	adds	r7, #8
   11282:	46bd      	mov	sp, r7
   11284:	bd80      	pop	{r7, pc}
   11286:	bf00      	nop
   11288:	000128a1 	.word	0x000128a1

0001128c <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
   1128c:	b580      	push	{r7, lr}
   1128e:	b082      	sub	sp, #8
   11290:	af00      	add	r7, sp, #0
   11292:	6078      	str	r0, [r7, #4]
   11294:	687b      	ldr	r3, [r7, #4]
   11296:	4618      	mov	r0, r3
   11298:	4b03      	ldr	r3, [pc, #12]	; (112a8 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
   1129a:	4798      	blx	r3
{
} //~Holt_3593_Class
   1129c:	687b      	ldr	r3, [r7, #4]
   1129e:	4618      	mov	r0, r3
   112a0:	3708      	adds	r7, #8
   112a2:	46bd      	mov	sp, r7
   112a4:	bd80      	pop	{r7, pc}
   112a6:	bf00      	nop
   112a8:	000128c1 	.word	0x000128c1

000112ac <_ZN15Holt_3593_Class4InitEv>:

// Priority Label-1 Table     
unsigned char LabelPriority2 [3];

  
 uint8_t	Holt_3593_Class::Init(void){
   112ac:	b590      	push	{r4, r7, lr}
   112ae:	b089      	sub	sp, #36	; 0x24
   112b0:	af02      	add	r7, sp, #8
   112b2:	6078      	str	r0, [r7, #4]
	 
	 spi.SetDescriptor(&SPI_HI3593);
   112b4:	687b      	ldr	r3, [r7, #4]
   112b6:	492d      	ldr	r1, [pc, #180]	; (1136c <_ZN15Holt_3593_Class4InitEv+0xc0>)
   112b8:	4618      	mov	r0, r3
   112ba:	4b2d      	ldr	r3, [pc, #180]	; (11370 <_ZN15Holt_3593_Class4InitEv+0xc4>)
   112bc:	4798      	blx	r3
	  spi.init();
   112be:	687b      	ldr	r3, [r7, #4]
   112c0:	4618      	mov	r0, r3
   112c2:	4b2c      	ldr	r3, [pc, #176]	; (11374 <_ZN15Holt_3593_Class4InitEv+0xc8>)
   112c4:	4798      	blx	r3
	 uint8_t	status=	Init3593(ACLKDIV,  // ARINC clock divisor
	 TMODE,    // Transmit mode. Set for "send as soon as possible"
	 SELFTEST_OFF, // Selftest defined by Mode switches
	 BITRATE,    // Arinc speed and if Parity is enabled by the switch
	 TFLIP );
   112c6:	2340      	movs	r3, #64	; 0x40
   112c8:	9301      	str	r3, [sp, #4]
   112ca:	2300      	movs	r3, #0
   112cc:	9300      	str	r3, [sp, #0]
   112ce:	2300      	movs	r3, #0
   112d0:	2201      	movs	r2, #1
   112d2:	2104      	movs	r1, #4
   112d4:	6878      	ldr	r0, [r7, #4]
   112d6:	4c28      	ldr	r4, [pc, #160]	; (11378 <_ZN15Holt_3593_Class4InitEv+0xcc>)
   112d8:	47a0      	blx	r4
   112da:	4603      	mov	r3, r0
   112dc:	73fb      	strb	r3, [r7, #15]

	for (int i=0;i<32;i++)
   112de:	2300      	movs	r3, #0
   112e0:	617b      	str	r3, [r7, #20]
   112e2:	697b      	ldr	r3, [r7, #20]
   112e4:	2b1f      	cmp	r3, #31
   112e6:	dc1b      	bgt.n	11320 <_ZN15Holt_3593_Class4InitEv+0x74>
	{
		LabelArray_2[i]=FlipByte(LabelArray_1[i]);
   112e8:	4a24      	ldr	r2, [pc, #144]	; (1137c <_ZN15Holt_3593_Class4InitEv+0xd0>)
   112ea:	697b      	ldr	r3, [r7, #20]
   112ec:	4413      	add	r3, r2
   112ee:	781b      	ldrb	r3, [r3, #0]
   112f0:	4619      	mov	r1, r3
   112f2:	6878      	ldr	r0, [r7, #4]
   112f4:	4b22      	ldr	r3, [pc, #136]	; (11380 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   112f6:	4798      	blx	r3
   112f8:	4603      	mov	r3, r0
   112fa:	4619      	mov	r1, r3
   112fc:	4a21      	ldr	r2, [pc, #132]	; (11384 <_ZN15Holt_3593_Class4InitEv+0xd8>)
   112fe:	697b      	ldr	r3, [r7, #20]
   11300:	4413      	add	r3, r2
   11302:	460a      	mov	r2, r1
   11304:	701a      	strb	r2, [r3, #0]
		LabelArray_1[i]=LabelArray_2[i];
   11306:	4a1f      	ldr	r2, [pc, #124]	; (11384 <_ZN15Holt_3593_Class4InitEv+0xd8>)
   11308:	697b      	ldr	r3, [r7, #20]
   1130a:	4413      	add	r3, r2
   1130c:	7819      	ldrb	r1, [r3, #0]
   1130e:	4a1b      	ldr	r2, [pc, #108]	; (1137c <_ZN15Holt_3593_Class4InitEv+0xd0>)
   11310:	697b      	ldr	r3, [r7, #20]
   11312:	4413      	add	r3, r2
   11314:	460a      	mov	r2, r1
   11316:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<32;i++)
   11318:	697b      	ldr	r3, [r7, #20]
   1131a:	3301      	adds	r3, #1
   1131c:	617b      	str	r3, [r7, #20]
   1131e:	e7e0      	b.n	112e2 <_ZN15Holt_3593_Class4InitEv+0x36>
	}
	for (int i=0;i<3;i++)
   11320:	2300      	movs	r3, #0
   11322:	613b      	str	r3, [r7, #16]
   11324:	693b      	ldr	r3, [r7, #16]
   11326:	2b02      	cmp	r3, #2
   11328:	dc1b      	bgt.n	11362 <_ZN15Holt_3593_Class4InitEv+0xb6>
	{
		LabelPriority2[i]=FlipByte(LabelPriority1[i]);
   1132a:	4a17      	ldr	r2, [pc, #92]	; (11388 <_ZN15Holt_3593_Class4InitEv+0xdc>)
   1132c:	693b      	ldr	r3, [r7, #16]
   1132e:	4413      	add	r3, r2
   11330:	781b      	ldrb	r3, [r3, #0]
   11332:	4619      	mov	r1, r3
   11334:	6878      	ldr	r0, [r7, #4]
   11336:	4b12      	ldr	r3, [pc, #72]	; (11380 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   11338:	4798      	blx	r3
   1133a:	4603      	mov	r3, r0
   1133c:	4619      	mov	r1, r3
   1133e:	4a13      	ldr	r2, [pc, #76]	; (1138c <_ZN15Holt_3593_Class4InitEv+0xe0>)
   11340:	693b      	ldr	r3, [r7, #16]
   11342:	4413      	add	r3, r2
   11344:	460a      	mov	r2, r1
   11346:	701a      	strb	r2, [r3, #0]
		LabelPriority1[i]=LabelPriority2[i];
   11348:	4a10      	ldr	r2, [pc, #64]	; (1138c <_ZN15Holt_3593_Class4InitEv+0xe0>)
   1134a:	693b      	ldr	r3, [r7, #16]
   1134c:	4413      	add	r3, r2
   1134e:	7819      	ldrb	r1, [r3, #0]
   11350:	4a0d      	ldr	r2, [pc, #52]	; (11388 <_ZN15Holt_3593_Class4InitEv+0xdc>)
   11352:	693b      	ldr	r3, [r7, #16]
   11354:	4413      	add	r3, r2
   11356:	460a      	mov	r2, r1
   11358:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<3;i++)
   1135a:	693b      	ldr	r3, [r7, #16]
   1135c:	3301      	adds	r3, #1
   1135e:	613b      	str	r3, [r7, #16]
   11360:	e7e0      	b.n	11324 <_ZN15Holt_3593_Class4InitEv+0x78>
	}
	return	status;
   11362:	7bfb      	ldrb	r3, [r7, #15]
 } 
   11364:	4618      	mov	r0, r3
   11366:	371c      	adds	r7, #28
   11368:	46bd      	mov	sp, r7
   1136a:	bd90      	pop	{r4, r7, pc}
   1136c:	20004f50 	.word	0x20004f50
   11370:	0001290d 	.word	0x0001290d
   11374:	000128d5 	.word	0x000128d5
   11378:	00011391 	.word	0x00011391
   1137c:	200001a0 	.word	0x200001a0
   11380:	0001152d 	.word	0x0001152d
   11384:	20003718 	.word	0x20003718
   11388:	200001c0 	.word	0x200001c0
   1138c:	20003738 	.word	0x20003738

00011390 <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 
 // ------------------------------------------------------------------
 // Initialize the HI-3593
 // ------------------------------------------------------------------
 uint8_t Holt_3593_Class::Init3593(uint8_t AclkDiv, uint8_t tmode, uint8_t selftest, uint8_t arate, uint8_t tflip )
 {
   11390:	b580      	push	{r7, lr}
   11392:	b084      	sub	sp, #16
   11394:	af00      	add	r7, sp, #0
   11396:	6078      	str	r0, [r7, #4]
   11398:	4608      	mov	r0, r1
   1139a:	4611      	mov	r1, r2
   1139c:	461a      	mov	r2, r3
   1139e:	4603      	mov	r3, r0
   113a0:	70fb      	strb	r3, [r7, #3]
   113a2:	460b      	mov	r3, r1
   113a4:	70bb      	strb	r3, [r7, #2]
   113a6:	4613      	mov	r3, r2
   113a8:	707b      	strb	r3, [r7, #1]
	 unsigned char cmd=0;
   113aa:	2300      	movs	r3, #0
   113ac:	73fb      	strb	r3, [r7, #15]
	 
	 W_Command(RESETCMD);                // Reset the HI-3593
   113ae:	2104      	movs	r1, #4
   113b0:	6878      	ldr	r0, [r7, #4]
   113b2:	4b18      	ldr	r3, [pc, #96]	; (11414 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x84>)
   113b4:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
   113b6:	78fb      	ldrb	r3, [r7, #3]
   113b8:	461a      	mov	r2, r3
   113ba:	2138      	movs	r1, #56	; 0x38
   113bc:	6878      	ldr	r0, [r7, #4]
   113be:	4b16      	ldr	r3, [pc, #88]	; (11418 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   113c0:	4798      	blx	r3
	 cmd =  arate;
   113c2:	7e3b      	ldrb	r3, [r7, #24]
   113c4:	73fb      	strb	r3, [r7, #15]
	 cmd |= selftest << 4;
   113c6:	787b      	ldrb	r3, [r7, #1]
   113c8:	011b      	lsls	r3, r3, #4
   113ca:	b25a      	sxtb	r2, r3
   113cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
   113d0:	4313      	orrs	r3, r2
   113d2:	b25b      	sxtb	r3, r3
   113d4:	73fb      	strb	r3, [r7, #15]
	 cmd |= tmode << 5;
   113d6:	78bb      	ldrb	r3, [r7, #2]
   113d8:	015b      	lsls	r3, r3, #5
   113da:	b25a      	sxtb	r2, r3
   113dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
   113e0:	4313      	orrs	r3, r2
   113e2:	b25b      	sxtb	r3, r3
   113e4:	73fb      	strb	r3, [r7, #15]
	 cmd |= tflip << 6;                  // TFLIP on
   113e6:	7f3b      	ldrb	r3, [r7, #28]
   113e8:	019b      	lsls	r3, r3, #6
   113ea:	b25a      	sxtb	r2, r3
   113ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
   113f0:	4313      	orrs	r3, r2
   113f2:	b25b      	sxtb	r3, r3
   113f4:	73fb      	strb	r3, [r7, #15]
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
   113f6:	7bfb      	ldrb	r3, [r7, #15]
   113f8:	461a      	mov	r2, r3
   113fa:	2108      	movs	r1, #8
   113fc:	6878      	ldr	r0, [r7, #4]
   113fe:	4b06      	ldr	r3, [pc, #24]	; (11418 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   11400:	4798      	blx	r3
	 return R_Register (R_TSR);
   11402:	2180      	movs	r1, #128	; 0x80
   11404:	6878      	ldr	r0, [r7, #4]
   11406:	4b05      	ldr	r3, [pc, #20]	; (1141c <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x8c>)
   11408:	4798      	blx	r3
   1140a:	4603      	mov	r3, r0
	 
	 
 }
   1140c:	4618      	mov	r0, r3
   1140e:	3710      	adds	r7, #16
   11410:	46bd      	mov	sp, r7
   11412:	bd80      	pop	{r7, pc}
   11414:	00011815 	.word	0x00011815
   11418:	00011869 	.word	0x00011869
   1141c:	000118dd 	.word	0x000118dd

00011420 <_ZN15Holt_3593_Class4openEv>:
 
 void Holt_3593_Class::open(){
   11420:	b580      	push	{r7, lr}
   11422:	b082      	sub	sp, #8
   11424:	af00      	add	r7, sp, #0
   11426:	6078      	str	r0, [r7, #4]
	 	spi.enable();
   11428:	687b      	ldr	r3, [r7, #4]
   1142a:	4618      	mov	r0, r3
   1142c:	4b04      	ldr	r3, [pc, #16]	; (11440 <_ZN15Holt_3593_Class4openEv+0x20>)
   1142e:	4798      	blx	r3
		 SS_Low();
   11430:	6878      	ldr	r0, [r7, #4]
   11432:	4b04      	ldr	r3, [pc, #16]	; (11444 <_ZN15Holt_3593_Class4openEv+0x24>)
   11434:	4798      	blx	r3
 }
   11436:	bf00      	nop
   11438:	3708      	adds	r7, #8
   1143a:	46bd      	mov	sp, r7
   1143c:	bd80      	pop	{r7, pc}
   1143e:	bf00      	nop
   11440:	00012931 	.word	0x00012931
   11444:	00011925 	.word	0x00011925

00011448 <_ZN15Holt_3593_Class5closeEv>:
  void Holt_3593_Class::close(){
   11448:	b580      	push	{r7, lr}
   1144a:	b082      	sub	sp, #8
   1144c:	af00      	add	r7, sp, #0
   1144e:	6078      	str	r0, [r7, #4]
	    SS_High();
   11450:	6878      	ldr	r0, [r7, #4]
   11452:	4b05      	ldr	r3, [pc, #20]	; (11468 <_ZN15Holt_3593_Class5closeEv+0x20>)
   11454:	4798      	blx	r3
	  spi.disable();
   11456:	687b      	ldr	r3, [r7, #4]
   11458:	4618      	mov	r0, r3
   1145a:	4b04      	ldr	r3, [pc, #16]	; (1146c <_ZN15Holt_3593_Class5closeEv+0x24>)
   1145c:	4798      	blx	r3
	
  }
   1145e:	bf00      	nop
   11460:	3708      	adds	r7, #8
   11462:	46bd      	mov	sp, r7
   11464:	bd80      	pop	{r7, pc}
   11466:	bf00      	nop
   11468:	00011941 	.word	0x00011941
   1146c:	000129f5 	.word	0x000129f5

00011470 <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
 
// ------------------------------------------------------------------
//  SPI function to load 8 bits of label data
// ------------------------------------------------------------------   
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
   11470:	b580      	push	{r7, lr}
   11472:	b084      	sub	sp, #16
   11474:	af00      	add	r7, sp, #0
   11476:	6078      	str	r0, [r7, #4]
   11478:	460b      	mov	r3, r1
   1147a:	70fb      	strb	r3, [r7, #3]
   1147c:	4613      	mov	r3, r2
   1147e:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;    
 // rxbyte = Get_Byte();         // clear SPI status register
  uint8_t	p(txbyte);
   11480:	78fb      	ldrb	r3, [r7, #3]
   11482:	73fb      	strb	r3, [r7, #15]
  Send_Byte(p)    ;   // write Data Register to begin transfer  
   11484:	7bfb      	ldrb	r3, [r7, #15]
   11486:	4619      	mov	r1, r3
   11488:	6878      	ldr	r0, [r7, #4]
   1148a:	4b0b      	ldr	r3, [pc, #44]	; (114b8 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x48>)
   1148c:	4798      	blx	r3
	  
  if (return_when_done) {  // optional wait for SPIF flag
   1148e:	78bb      	ldrb	r3, [r7, #2]
   11490:	2b00      	cmp	r3, #0
   11492:	d00a      	beq.n	114aa <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    while (!spi.isSPIReady());     
   11494:	687b      	ldr	r3, [r7, #4]
   11496:	4618      	mov	r0, r3
   11498:	4b08      	ldr	r3, [pc, #32]	; (114bc <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x4c>)
   1149a:	4798      	blx	r3
   1149c:	4603      	mov	r3, r0
   1149e:	f083 0301 	eor.w	r3, r3, #1
   114a2:	b2db      	uxtb	r3, r3
   114a4:	2b00      	cmp	r3, #0
   114a6:	d000      	beq.n	114aa <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
   114a8:	e7f4      	b.n	11494 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x24>
  }
  return rxbyte = txbyte;
   114aa:	78fb      	ldrb	r3, [r7, #3]
   114ac:	73bb      	strb	r3, [r7, #14]
   114ae:	7bbb      	ldrb	r3, [r7, #14]
  
}
   114b0:	4618      	mov	r0, r3
   114b2:	3710      	adds	r7, #16
   114b4:	46bd      	mov	sp, r7
   114b6:	bd80      	pop	{r7, pc}
   114b8:	0001157d 	.word	0x0001157d
   114bc:	00012a15 	.word	0x00012a15

000114c0 <_ZN15Holt_3593_Class19initReceiver1LabelsEv>:

// ------------------------------------------------------------------
//  Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------                              */
void Holt_3593_Class::initReceiver1Labels(void)
{
   114c0:	b580      	push	{r7, lr}
   114c2:	b084      	sub	sp, #16
   114c4:	af00      	add	r7, sp, #0
   114c6:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
  open();
   114c8:	6878      	ldr	r0, [r7, #4]
   114ca:	4b14      	ldr	r3, [pc, #80]	; (1151c <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x5c>)
   114cc:	4798      	blx	r3

  dummy = txrx8bits_8(0x14,1);  
   114ce:	2201      	movs	r2, #1
   114d0:	2114      	movs	r1, #20
   114d2:	6878      	ldr	r0, [r7, #4]
   114d4:	4b12      	ldr	r3, [pc, #72]	; (11520 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x60>)
   114d6:	4798      	blx	r3
   114d8:	4603      	mov	r3, r0
   114da:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   114dc:	231f      	movs	r3, #31
   114de:	73fb      	strb	r3, [r7, #15]
   114e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
   114e4:	2b00      	cmp	r3, #0
   114e6:	db11      	blt.n	1150c <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_1[i],1);       
   114e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
   114ec:	4a0d      	ldr	r2, [pc, #52]	; (11524 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x64>)
   114ee:	5cd3      	ldrb	r3, [r2, r3]
   114f0:	2201      	movs	r2, #1
   114f2:	4619      	mov	r1, r3
   114f4:	6878      	ldr	r0, [r7, #4]
   114f6:	4b0a      	ldr	r3, [pc, #40]	; (11520 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x60>)
   114f8:	4798      	blx	r3
   114fa:	4603      	mov	r3, r0
   114fc:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   114fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11502:	b2db      	uxtb	r3, r3
   11504:	3b01      	subs	r3, #1
   11506:	b2db      	uxtb	r3, r3
   11508:	73fb      	strb	r3, [r7, #15]
   1150a:	e7e9      	b.n	114e0 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x20>
  }    
 	  
	close();
   1150c:	6878      	ldr	r0, [r7, #4]
   1150e:	4b06      	ldr	r3, [pc, #24]	; (11528 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x68>)
   11510:	4798      	blx	r3
}
   11512:	bf00      	nop
   11514:	3710      	adds	r7, #16
   11516:	46bd      	mov	sp, r7
   11518:	bd80      	pop	{r7, pc}
   1151a:	bf00      	nop
   1151c:	00011421 	.word	0x00011421
   11520:	00011471 	.word	0x00011471
   11524:	200001a0 	.word	0x200001a0
   11528:	00011449 	.word	0x00011449

0001152c <_ZN15Holt_3593_Class8FlipByteEh>:
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
}

unsigned char Holt_3593_Class::FlipByte(unsigned char byte){
   1152c:	b480      	push	{r7}
   1152e:	b085      	sub	sp, #20
   11530:	af00      	add	r7, sp, #0
   11532:	6078      	str	r0, [r7, #4]
   11534:	460b      	mov	r3, r1
   11536:	70fb      	strb	r3, [r7, #3]
	unsigned char rev=0;
   11538:	2300      	movs	r3, #0
   1153a:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   1153c:	2300      	movs	r3, #0
   1153e:	60bb      	str	r3, [r7, #8]
   11540:	68bb      	ldr	r3, [r7, #8]
   11542:	2b07      	cmp	r3, #7
   11544:	dc13      	bgt.n	1156e <_ZN15Holt_3593_Class8FlipByteEh+0x42>
	{
		rev=rev<<1;
   11546:	7bfb      	ldrb	r3, [r7, #15]
   11548:	005b      	lsls	r3, r3, #1
   1154a:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   1154c:	78fa      	ldrb	r2, [r7, #3]
   1154e:	68bb      	ldr	r3, [r7, #8]
   11550:	fa42 f303 	asr.w	r3, r2, r3
   11554:	b25b      	sxtb	r3, r3
   11556:	f003 0301 	and.w	r3, r3, #1
   1155a:	b25a      	sxtb	r2, r3
   1155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11560:	4313      	orrs	r3, r2
   11562:	b25b      	sxtb	r3, r3
   11564:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   11566:	68bb      	ldr	r3, [r7, #8]
   11568:	3301      	adds	r3, #1
   1156a:	60bb      	str	r3, [r7, #8]
   1156c:	e7e8      	b.n	11540 <_ZN15Holt_3593_Class8FlipByteEh+0x14>
	}
	return rev;
   1156e:	7bfb      	ldrb	r3, [r7, #15]
}
   11570:	4618      	mov	r0, r3
   11572:	3714      	adds	r7, #20
   11574:	46bd      	mov	sp, r7
   11576:	bc80      	pop	{r7}
   11578:	4770      	bx	lr
	...

0001157c <_ZN15Holt_3593_Class9Send_ByteEh>:

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
   1157c:	b580      	push	{r7, lr}
   1157e:	b082      	sub	sp, #8
   11580:	af00      	add	r7, sp, #0
   11582:	6078      	str	r0, [r7, #4]
   11584:	460b      	mov	r3, r1
   11586:	70fb      	strb	r3, [r7, #3]
	while (!spi.isSPIReady()); 
   11588:	687b      	ldr	r3, [r7, #4]
   1158a:	4618      	mov	r0, r3
   1158c:	4b0f      	ldr	r3, [pc, #60]	; (115cc <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   1158e:	4798      	blx	r3
   11590:	4603      	mov	r3, r0
   11592:	f083 0301 	eor.w	r3, r3, #1
   11596:	b2db      	uxtb	r3, r3
   11598:	2b00      	cmp	r3, #0
   1159a:	d000      	beq.n	1159e <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
   1159c:	e7f4      	b.n	11588 <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi.write(&byte,1);
   1159e:	687b      	ldr	r3, [r7, #4]
   115a0:	1cf9      	adds	r1, r7, #3
   115a2:	2201      	movs	r2, #1
   115a4:	4618      	mov	r0, r3
   115a6:	4b0a      	ldr	r3, [pc, #40]	; (115d0 <_ZN15Holt_3593_Class9Send_ByteEh+0x54>)
   115a8:	4798      	blx	r3
	while (!spi.isSPIReady());  
   115aa:	687b      	ldr	r3, [r7, #4]
   115ac:	4618      	mov	r0, r3
   115ae:	4b07      	ldr	r3, [pc, #28]	; (115cc <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   115b0:	4798      	blx	r3
   115b2:	4603      	mov	r3, r0
   115b4:	f083 0301 	eor.w	r3, r3, #1
   115b8:	b2db      	uxtb	r3, r3
   115ba:	2b00      	cmp	r3, #0
   115bc:	d000      	beq.n	115c0 <_ZN15Holt_3593_Class9Send_ByteEh+0x44>
   115be:	e7f4      	b.n	115aa <_ZN15Holt_3593_Class9Send_ByteEh+0x2e>
	return byte;
   115c0:	78fb      	ldrb	r3, [r7, #3]
}
   115c2:	4618      	mov	r0, r3
   115c4:	3708      	adds	r7, #8
   115c6:	46bd      	mov	sp, r7
   115c8:	bd80      	pop	{r7, pc}
   115ca:	bf00      	nop
   115cc:	00012a15 	.word	0x00012a15
   115d0:	0001296d 	.word	0x0001296d

000115d4 <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
   115d4:	b580      	push	{r7, lr}
   115d6:	b084      	sub	sp, #16
   115d8:	af00      	add	r7, sp, #0
   115da:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	
	while (!spi.isSPIReady());
   115dc:	687b      	ldr	r3, [r7, #4]
   115de:	4618      	mov	r0, r3
   115e0:	4b0f      	ldr	r3, [pc, #60]	; (11620 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   115e2:	4798      	blx	r3
   115e4:	4603      	mov	r3, r0
   115e6:	f083 0301 	eor.w	r3, r3, #1
   115ea:	b2db      	uxtb	r3, r3
   115ec:	2b00      	cmp	r3, #0
   115ee:	d000      	beq.n	115f2 <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>
   115f0:	e7f4      	b.n	115dc <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi.read(&byte,1);
   115f2:	687b      	ldr	r3, [r7, #4]
   115f4:	f107 010f 	add.w	r1, r7, #15
   115f8:	2201      	movs	r2, #1
   115fa:	4618      	mov	r0, r3
   115fc:	4b09      	ldr	r3, [pc, #36]	; (11624 <_ZN15Holt_3593_Class8Get_ByteEv+0x50>)
   115fe:	4798      	blx	r3
	while (!spi.isSPIReady());
   11600:	687b      	ldr	r3, [r7, #4]
   11602:	4618      	mov	r0, r3
   11604:	4b06      	ldr	r3, [pc, #24]	; (11620 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   11606:	4798      	blx	r3
   11608:	4603      	mov	r3, r0
   1160a:	f083 0301 	eor.w	r3, r3, #1
   1160e:	b2db      	uxtb	r3, r3
   11610:	2b00      	cmp	r3, #0
   11612:	d000      	beq.n	11616 <_ZN15Holt_3593_Class8Get_ByteEv+0x42>
   11614:	e7f4      	b.n	11600 <_ZN15Holt_3593_Class8Get_ByteEv+0x2c>


	
	return byte;
   11616:	7bfb      	ldrb	r3, [r7, #15]
}	
   11618:	4618      	mov	r0, r3
   1161a:	3710      	adds	r7, #16
   1161c:	46bd      	mov	sp, r7
   1161e:	bd80      	pop	{r7, pc}
   11620:	00012a15 	.word	0x00012a15
   11624:	000129b1 	.word	0x000129b1

00011628 <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
   11628:	b580      	push	{r7, lr}
   1162a:	b084      	sub	sp, #16
   1162c:	af00      	add	r7, sp, #0
   1162e:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
   11630:	6878      	ldr	r0, [r7, #4]
   11632:	4b14      	ldr	r3, [pc, #80]	; (11684 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x5c>)
   11634:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
   11636:	2201      	movs	r2, #1
   11638:	2128      	movs	r1, #40	; 0x28
   1163a:	6878      	ldr	r0, [r7, #4]
   1163c:	4b12      	ldr	r3, [pc, #72]	; (11688 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   1163e:	4798      	blx	r3
   11640:	4603      	mov	r3, r0
   11642:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   11644:	231f      	movs	r3, #31
   11646:	73fb      	strb	r3, [r7, #15]
   11648:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1164c:	2b00      	cmp	r3, #0
   1164e:	db11      	blt.n	11674 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
   11650:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11654:	4a0d      	ldr	r2, [pc, #52]	; (1168c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x64>)
   11656:	5cd3      	ldrb	r3, [r2, r3]
   11658:	2201      	movs	r2, #1
   1165a:	4619      	mov	r1, r3
   1165c:	6878      	ldr	r0, [r7, #4]
   1165e:	4b0a      	ldr	r3, [pc, #40]	; (11688 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   11660:	4798      	blx	r3
   11662:	4603      	mov	r3, r0
   11664:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   11666:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1166a:	b2db      	uxtb	r3, r3
   1166c:	3b01      	subs	r3, #1
   1166e:	b2db      	uxtb	r3, r3
   11670:	73fb      	strb	r3, [r7, #15]
   11672:	e7e9      	b.n	11648 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x20>
  }    
 	  
	close();
   11674:	6878      	ldr	r0, [r7, #4]
   11676:	4b06      	ldr	r3, [pc, #24]	; (11690 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x68>)
   11678:	4798      	blx	r3
}
   1167a:	bf00      	nop
   1167c:	3710      	adds	r7, #16
   1167e:	46bd      	mov	sp, r7
   11680:	bd80      	pop	{r7, pc}
   11682:	bf00      	nop
   11684:	00011421 	.word	0x00011421
   11688:	00011471 	.word	0x00011471
   1168c:	20003718 	.word	0x20003718
   11690:	00011449 	.word	0x00011449

00011694 <_ZN15Holt_3593_Class13MultiByteReadEhhPh>:
//          count=number of bytes to read
//
// Output:  *passedArray = pointer to the array that gets loaded
// ------------------------------------------------------
void Holt_3593_Class::MultiByteRead(uint8_t ReadCommand, uint8_t count, unsigned char *passedArray)
{
   11694:	b580      	push	{r7, lr}
   11696:	b086      	sub	sp, #24
   11698:	af00      	add	r7, sp, #0
   1169a:	60f8      	str	r0, [r7, #12]
   1169c:	607b      	str	r3, [r7, #4]
   1169e:	460b      	mov	r3, r1
   116a0:	72fb      	strb	r3, [r7, #11]
   116a2:	4613      	mov	r3, r2
   116a4:	72bb      	strb	r3, [r7, #10]
   uint8_t dummy, ByteCount;
   open();
   116a6:	68f8      	ldr	r0, [r7, #12]
   116a8:	4b16      	ldr	r3, [pc, #88]	; (11704 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x70>)
   116aa:	4798      	blx	r3
   //dummy = Get_Byte();                  // clear SPI status register    
   Send_Byte(ReadCommand);
   116ac:	7afb      	ldrb	r3, [r7, #11]
   116ae:	4619      	mov	r1, r3
   116b0:	68f8      	ldr	r0, [r7, #12]
   116b2:	4b15      	ldr	r3, [pc, #84]	; (11708 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x74>)
   116b4:	4798      	blx	r3
     
   while (!spi.isSPIReady());            // wait for SPIF flag assertion    
   116b6:	68fb      	ldr	r3, [r7, #12]
   116b8:	4618      	mov	r0, r3
   116ba:	4b14      	ldr	r3, [pc, #80]	; (1170c <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x78>)
   116bc:	4798      	blx	r3
   116be:	4603      	mov	r3, r0
   116c0:	f083 0301 	eor.w	r3, r3, #1
   116c4:	b2db      	uxtb	r3, r3
   116c6:	2b00      	cmp	r3, #0
   116c8:	d000      	beq.n	116cc <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x38>
   116ca:	e7f4      	b.n	116b6 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x22>
  // dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   116cc:	2300      	movs	r3, #0
   116ce:	75fb      	strb	r3, [r7, #23]
   116d0:	7dfa      	ldrb	r2, [r7, #23]
   116d2:	7abb      	ldrb	r3, [r7, #10]
   116d4:	429a      	cmp	r2, r3
   116d6:	da0d      	bge.n	116f4 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x60>
      dummy =Get_Byte(); 
   116d8:	68f8      	ldr	r0, [r7, #12]
   116da:	4b0d      	ldr	r3, [pc, #52]	; (11710 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x7c>)
   116dc:	4798      	blx	r3
   116de:	4603      	mov	r3, r0
   116e0:	75bb      	strb	r3, [r7, #22]
      passedArray[ByteCount] = dummy; 
   116e2:	7dfb      	ldrb	r3, [r7, #23]
   116e4:	687a      	ldr	r2, [r7, #4]
   116e6:	4413      	add	r3, r2
   116e8:	7dba      	ldrb	r2, [r7, #22]
   116ea:	701a      	strb	r2, [r3, #0]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   116ec:	7dfb      	ldrb	r3, [r7, #23]
   116ee:	3301      	adds	r3, #1
   116f0:	75fb      	strb	r3, [r7, #23]
   116f2:	e7ed      	b.n	116d0 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x3c>
     }

  close();
   116f4:	68f8      	ldr	r0, [r7, #12]
   116f6:	4b07      	ldr	r3, [pc, #28]	; (11714 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x80>)
   116f8:	4798      	blx	r3
  
}
   116fa:	bf00      	nop
   116fc:	3718      	adds	r7, #24
   116fe:	46bd      	mov	sp, r7
   11700:	bd80      	pop	{r7, pc}
   11702:	bf00      	nop
   11704:	00011421 	.word	0x00011421
   11708:	0001157d 	.word	0x0001157d
   1170c:	00012a15 	.word	0x00012a15
   11710:	000115d5 	.word	0x000115d5
   11714:	00011449 	.word	0x00011449

00011718 <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
   11718:	b580      	push	{r7, lr}
   1171a:	b084      	sub	sp, #16
   1171c:	af00      	add	r7, sp, #0
   1171e:	6078      	str	r0, [r7, #4]
   11720:	460b      	mov	r3, r1
   11722:	70fb      	strb	r3, [r7, #3]
   11724:	4613      	mov	r3, r2
   11726:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
   11728:	78fb      	ldrb	r3, [r7, #3]
   1172a:	73fb      	strb	r3, [r7, #15]
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
   1172c:	7bfb      	ldrb	r3, [r7, #15]
   1172e:	4619      	mov	r1, r3
   11730:	6878      	ldr	r0, [r7, #4]
   11732:	4b0b      	ldr	r3, [pc, #44]	; (11760 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x48>)
   11734:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
   11736:	78bb      	ldrb	r3, [r7, #2]
   11738:	2b00      	cmp	r3, #0
   1173a:	d00a      	beq.n	11752 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
		while (!spi.isSPIReady());      
   1173c:	687b      	ldr	r3, [r7, #4]
   1173e:	4618      	mov	r0, r3
   11740:	4b08      	ldr	r3, [pc, #32]	; (11764 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x4c>)
   11742:	4798      	blx	r3
   11744:	4603      	mov	r3, r0
   11746:	f083 0301 	eor.w	r3, r3, #1
   1174a:	b2db      	uxtb	r3, r3
   1174c:	2b00      	cmp	r3, #0
   1174e:	d000      	beq.n	11752 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
   11750:	e7f4      	b.n	1173c <_ZN15Holt_3593_Class9txrx8bitsEhh+0x24>
    }

  rxbyte = txbyte;  // get received data byte from Data Register
   11752:	78fb      	ldrb	r3, [r7, #3]
   11754:	73bb      	strb	r3, [r7, #14]

  return rxbyte;
   11756:	7bbb      	ldrb	r3, [r7, #14]
  
 }
   11758:	4618      	mov	r0, r3
   1175a:	3710      	adds	r7, #16
   1175c:	46bd      	mov	sp, r7
   1175e:	bd80      	pop	{r7, pc}
   11760:	0001157d 	.word	0x0001157d
   11764:	00012a15 	.word	0x00012a15

00011768 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh>:
// ------------------------------------------------------------------
// Transmits the Message Command and data contained in the passed array pointer
// Transmit the 0x0C Opcode command + 4 bytes of ARINC data per Figure 1, pg 8 of the data sheet
// ------------------------------------------------------------------
 void Holt_3593_Class::TransmitCommandAndData(uint8_t cmd, uint8_t *TXBuffer)
 {              
   11768:	b580      	push	{r7, lr}
   1176a:	b084      	sub	sp, #16
   1176c:	af00      	add	r7, sp, #0
   1176e:	60f8      	str	r0, [r7, #12]
   11770:	460b      	mov	r3, r1
   11772:	607a      	str	r2, [r7, #4]
   11774:	72fb      	strb	r3, [r7, #11]
 uint8_t static ByteCount,dummy,transmitCount;
 
	open();
   11776:	68f8      	ldr	r0, [r7, #12]
   11778:	4b20      	ldr	r3, [pc, #128]	; (117fc <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x94>)
   1177a:	4798      	blx	r3
   
   transmitCount=4;                                // Standard messages are 4 bytes
   1177c:	4b20      	ldr	r3, [pc, #128]	; (11800 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   1177e:	2204      	movs	r2, #4
   11780:	701a      	strb	r2, [r3, #0]
   if(cmd==W_PL1Match || cmd==W_PL2Match)          // if writing PL Match registers send only 3 bytes
   11782:	7afb      	ldrb	r3, [r7, #11]
   11784:	2b18      	cmp	r3, #24
   11786:	d002      	beq.n	1178e <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x26>
   11788:	7afb      	ldrb	r3, [r7, #11]
   1178a:	2b2c      	cmp	r3, #44	; 0x2c
   1178c:	d105      	bne.n	1179a <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x32>
      transmitCount--;
   1178e:	4b1c      	ldr	r3, [pc, #112]	; (11800 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   11790:	781b      	ldrb	r3, [r3, #0]
   11792:	3b01      	subs	r3, #1
   11794:	b2da      	uxtb	r2, r3
   11796:	4b1a      	ldr	r3, [pc, #104]	; (11800 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   11798:	701a      	strb	r2, [r3, #0]
   
   dummy = txrx8bits(cmd, 1);      // Transmit the whole message, ignore return values 
   1179a:	7afb      	ldrb	r3, [r7, #11]
   1179c:	2201      	movs	r2, #1
   1179e:	4619      	mov	r1, r3
   117a0:	68f8      	ldr	r0, [r7, #12]
   117a2:	4b18      	ldr	r3, [pc, #96]	; (11804 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   117a4:	4798      	blx	r3
   117a6:	4603      	mov	r3, r0
   117a8:	461a      	mov	r2, r3
   117aa:	4b17      	ldr	r3, [pc, #92]	; (11808 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   117ac:	701a      	strb	r2, [r3, #0]

   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   117ae:	4b17      	ldr	r3, [pc, #92]	; (1180c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   117b0:	2200      	movs	r2, #0
   117b2:	701a      	strb	r2, [r3, #0]
   117b4:	4b15      	ldr	r3, [pc, #84]	; (1180c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   117b6:	781b      	ldrb	r3, [r3, #0]
   117b8:	461a      	mov	r2, r3
   117ba:	4b11      	ldr	r3, [pc, #68]	; (11800 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   117bc:	781b      	ldrb	r3, [r3, #0]
   117be:	429a      	cmp	r2, r3
   117c0:	da15      	bge.n	117ee <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x86>
      {              
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
   117c2:	4b12      	ldr	r3, [pc, #72]	; (1180c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   117c4:	781b      	ldrb	r3, [r3, #0]
   117c6:	461a      	mov	r2, r3
   117c8:	687b      	ldr	r3, [r7, #4]
   117ca:	4413      	add	r3, r2
   117cc:	781b      	ldrb	r3, [r3, #0]
   117ce:	2201      	movs	r2, #1
   117d0:	4619      	mov	r1, r3
   117d2:	68f8      	ldr	r0, [r7, #12]
   117d4:	4b0b      	ldr	r3, [pc, #44]	; (11804 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   117d6:	4798      	blx	r3
   117d8:	4603      	mov	r3, r0
   117da:	461a      	mov	r2, r3
   117dc:	4b0a      	ldr	r3, [pc, #40]	; (11808 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   117de:	701a      	strb	r2, [r3, #0]
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   117e0:	4b0a      	ldr	r3, [pc, #40]	; (1180c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   117e2:	781b      	ldrb	r3, [r3, #0]
   117e4:	3301      	adds	r3, #1
   117e6:	b2da      	uxtb	r2, r3
   117e8:	4b08      	ldr	r3, [pc, #32]	; (1180c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   117ea:	701a      	strb	r2, [r3, #0]
   117ec:	e7e2      	b.n	117b4 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x4c>
      }   
 close();
   117ee:	68f8      	ldr	r0, [r7, #12]
   117f0:	4b07      	ldr	r3, [pc, #28]	; (11810 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa8>)
   117f2:	4798      	blx	r3
}
   117f4:	bf00      	nop
   117f6:	3710      	adds	r7, #16
   117f8:	46bd      	mov	sp, r7
   117fa:	bd80      	pop	{r7, pc}
   117fc:	00011421 	.word	0x00011421
   11800:	2000373d 	.word	0x2000373d
   11804:	00011719 	.word	0x00011719
   11808:	2000373c 	.word	0x2000373c
   1180c:	2000373b 	.word	0x2000373b
   11810:	00011449 	.word	0x00011449

00011814 <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
   11814:	b580      	push	{r7, lr}
   11816:	b084      	sub	sp, #16
   11818:	af00      	add	r7, sp, #0
   1181a:	6078      	str	r0, [r7, #4]
   1181c:	460b      	mov	r3, r1
   1181e:	70fb      	strb	r3, [r7, #3]

 	  uint8_t p(cmd); 
   11820:	78fb      	ldrb	r3, [r7, #3]
   11822:	73fb      	strb	r3, [r7, #15]
  open();
   11824:	6878      	ldr	r0, [r7, #4]
   11826:	4b0c      	ldr	r3, [pc, #48]	; (11858 <_ZN15Holt_3593_Class9W_CommandEc+0x44>)
   11828:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
   1182a:	7bfb      	ldrb	r3, [r7, #15]
   1182c:	4619      	mov	r1, r3
   1182e:	6878      	ldr	r0, [r7, #4]
   11830:	4b0a      	ldr	r3, [pc, #40]	; (1185c <_ZN15Holt_3593_Class9W_CommandEc+0x48>)
   11832:	4798      	blx	r3
  while (!spi.isSPIReady()) {;}      // Wait for data to come back in.
   11834:	687b      	ldr	r3, [r7, #4]
   11836:	4618      	mov	r0, r3
   11838:	4b09      	ldr	r3, [pc, #36]	; (11860 <_ZN15Holt_3593_Class9W_CommandEc+0x4c>)
   1183a:	4798      	blx	r3
   1183c:	4603      	mov	r3, r0
   1183e:	f083 0301 	eor.w	r3, r3, #1
   11842:	b2db      	uxtb	r3, r3
   11844:	2b00      	cmp	r3, #0
   11846:	d000      	beq.n	1184a <_ZN15Holt_3593_Class9W_CommandEc+0x36>
   11848:	e7f4      	b.n	11834 <_ZN15Holt_3593_Class9W_CommandEc+0x20>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
   1184a:	6878      	ldr	r0, [r7, #4]
   1184c:	4b05      	ldr	r3, [pc, #20]	; (11864 <_ZN15Holt_3593_Class9W_CommandEc+0x50>)
   1184e:	4798      	blx	r3
}
   11850:	bf00      	nop
   11852:	3710      	adds	r7, #16
   11854:	46bd      	mov	sp, r7
   11856:	bd80      	pop	{r7, pc}
   11858:	00011421 	.word	0x00011421
   1185c:	0001157d 	.word	0x0001157d
   11860:	00012a15 	.word	0x00012a15
   11864:	00011449 	.word	0x00011449

00011868 <_ZN15Holt_3593_Class14W_CommandValueEhh>:

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
   11868:	b580      	push	{r7, lr}
   1186a:	b082      	sub	sp, #8
   1186c:	af00      	add	r7, sp, #0
   1186e:	6078      	str	r0, [r7, #4]
   11870:	460b      	mov	r3, r1
   11872:	70fb      	strb	r3, [r7, #3]
   11874:	4613      	mov	r3, r2
   11876:	70bb      	strb	r3, [r7, #2]

  	
  open();                             // assert the SPI0 /SS strobe
   11878:	6878      	ldr	r0, [r7, #4]
   1187a:	4b14      	ldr	r3, [pc, #80]	; (118cc <_ZN15Holt_3593_Class14W_CommandValueEhh+0x64>)
   1187c:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
   1187e:	78fb      	ldrb	r3, [r7, #3]
   11880:	4619      	mov	r1, r3
   11882:	6878      	ldr	r0, [r7, #4]
   11884:	4b12      	ldr	r3, [pc, #72]	; (118d0 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   11886:	4798      	blx	r3
  while (!spi.isSPIReady());    
   11888:	687b      	ldr	r3, [r7, #4]
   1188a:	4618      	mov	r0, r3
   1188c:	4b11      	ldr	r3, [pc, #68]	; (118d4 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   1188e:	4798      	blx	r3
   11890:	4603      	mov	r3, r0
   11892:	f083 0301 	eor.w	r3, r3, #1
   11896:	b2db      	uxtb	r3, r3
   11898:	2b00      	cmp	r3, #0
   1189a:	d000      	beq.n	1189e <_ZN15Holt_3593_Class14W_CommandValueEhh+0x36>
   1189c:	e7f4      	b.n	11888 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x20>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
   1189e:	78bb      	ldrb	r3, [r7, #2]
   118a0:	4619      	mov	r1, r3
   118a2:	6878      	ldr	r0, [r7, #4]
   118a4:	4b0a      	ldr	r3, [pc, #40]	; (118d0 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   118a6:	4798      	blx	r3
  while (!spi.isSPIReady());    
   118a8:	687b      	ldr	r3, [r7, #4]
   118aa:	4618      	mov	r0, r3
   118ac:	4b09      	ldr	r3, [pc, #36]	; (118d4 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   118ae:	4798      	blx	r3
   118b0:	4603      	mov	r3, r0
   118b2:	f083 0301 	eor.w	r3, r3, #1
   118b6:	b2db      	uxtb	r3, r3
   118b8:	2b00      	cmp	r3, #0
   118ba:	d000      	beq.n	118be <_ZN15Holt_3593_Class14W_CommandValueEhh+0x56>
   118bc:	e7f4      	b.n	118a8 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
   118be:	6878      	ldr	r0, [r7, #4]
   118c0:	4b05      	ldr	r3, [pc, #20]	; (118d8 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x70>)
   118c2:	4798      	blx	r3
}
   118c4:	bf00      	nop
   118c6:	3708      	adds	r7, #8
   118c8:	46bd      	mov	sp, r7
   118ca:	bd80      	pop	{r7, pc}
   118cc:	00011421 	.word	0x00011421
   118d0:	0001157d 	.word	0x0001157d
   118d4:	00012a15 	.word	0x00012a15
   118d8:	00011449 	.word	0x00011449

000118dc <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
   118dc:	b580      	push	{r7, lr}
   118de:	b084      	sub	sp, #16
   118e0:	af00      	add	r7, sp, #0
   118e2:	6078      	str	r0, [r7, #4]
   118e4:	460b      	mov	r3, r1
   118e6:	70fb      	strb	r3, [r7, #3]
  unsigned char R_Reg;
	
  open();
   118e8:	6878      	ldr	r0, [r7, #4]
   118ea:	4b0a      	ldr	r3, [pc, #40]	; (11914 <_ZN15Holt_3593_Class10R_RegisterEc+0x38>)
   118ec:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
   118ee:	78fb      	ldrb	r3, [r7, #3]
   118f0:	2201      	movs	r2, #1
   118f2:	4619      	mov	r1, r3
   118f4:	6878      	ldr	r0, [r7, #4]
   118f6:	4b08      	ldr	r3, [pc, #32]	; (11918 <_ZN15Holt_3593_Class10R_RegisterEc+0x3c>)
   118f8:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
   118fa:	6878      	ldr	r0, [r7, #4]
   118fc:	4b07      	ldr	r3, [pc, #28]	; (1191c <_ZN15Holt_3593_Class10R_RegisterEc+0x40>)
   118fe:	4798      	blx	r3
   11900:	4603      	mov	r3, r0
   11902:	73fb      	strb	r3, [r7, #15]
         
  close();
   11904:	6878      	ldr	r0, [r7, #4]
   11906:	4b06      	ldr	r3, [pc, #24]	; (11920 <_ZN15Holt_3593_Class10R_RegisterEc+0x44>)
   11908:	4798      	blx	r3
  return R_Reg;
   1190a:	7bfb      	ldrb	r3, [r7, #15]
}
   1190c:	4618      	mov	r0, r3
   1190e:	3710      	adds	r7, #16
   11910:	46bd      	mov	sp, r7
   11912:	bd80      	pop	{r7, pc}
   11914:	00011421 	.word	0x00011421
   11918:	00011719 	.word	0x00011719
   1191c:	000115d5 	.word	0x000115d5
   11920:	00011449 	.word	0x00011449

00011924 <_ZN15Holt_3593_Class6SS_LowEv>:
  //--------------------------------------------    
	open();                             // assert the SPI0 /SS strobe
  } 

void Holt_3593_Class::SS_Low(void)
{
   11924:	b580      	push	{r7, lr}
   11926:	b082      	sub	sp, #8
   11928:	af00      	add	r7, sp, #0
   1192a:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);
   1192c:	2100      	movs	r1, #0
   1192e:	204e      	movs	r0, #78	; 0x4e
   11930:	4b02      	ldr	r3, [pc, #8]	; (1193c <_ZN15Holt_3593_Class6SS_LowEv+0x18>)
   11932:	4798      	blx	r3
}
   11934:	bf00      	nop
   11936:	3708      	adds	r7, #8
   11938:	46bd      	mov	sp, r7
   1193a:	bd80      	pop	{r7, pc}
   1193c:	00011235 	.word	0x00011235

00011940 <_ZN15Holt_3593_Class7SS_HighEv>:
void Holt_3593_Class::SS_High(void)
{
   11940:	b580      	push	{r7, lr}
   11942:	b082      	sub	sp, #8
   11944:	af00      	add	r7, sp, #0
   11946:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
   11948:	2101      	movs	r1, #1
   1194a:	204e      	movs	r0, #78	; 0x4e
   1194c:	4b02      	ldr	r3, [pc, #8]	; (11958 <_ZN15Holt_3593_Class7SS_HighEv+0x18>)
   1194e:	4798      	blx	r3
}
   11950:	bf00      	nop
   11952:	3708      	adds	r7, #8
   11954:	46bd      	mov	sp, r7
   11956:	bd80      	pop	{r7, pc}
   11958:	00011235 	.word	0x00011235

0001195c <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
   1195c:	b480      	push	{r7}
   1195e:	b083      	sub	sp, #12
   11960:	af00      	add	r7, sp, #0
   11962:	6078      	str	r0, [r7, #4]
   11964:	6039      	str	r1, [r7, #0]
   11966:	683b      	ldr	r3, [r7, #0]
   11968:	681a      	ldr	r2, [r3, #0]
   1196a:	687b      	ldr	r3, [r7, #4]
   1196c:	601a      	str	r2, [r3, #0]
   1196e:	687b      	ldr	r3, [r7, #4]
   11970:	681b      	ldr	r3, [r3, #0]
   11972:	3b0c      	subs	r3, #12
   11974:	681b      	ldr	r3, [r3, #0]
   11976:	461a      	mov	r2, r3
   11978:	687b      	ldr	r3, [r7, #4]
   1197a:	4413      	add	r3, r2
   1197c:	683a      	ldr	r2, [r7, #0]
   1197e:	6852      	ldr	r2, [r2, #4]
   11980:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
   11982:	687b      	ldr	r3, [r7, #4]
   11984:	4618      	mov	r0, r3
   11986:	370c      	adds	r7, #12
   11988:	46bd      	mov	sp, r7
   1198a:	bc80      	pop	{r7}
   1198c:	4770      	bx	lr

0001198e <_ZN14Protocol_Class13GetActiveLineEv>:

uint8_t	Protocol_Class::GetActiveLine(void){
   1198e:	b590      	push	{r4, r7, lr}
   11990:	b085      	sub	sp, #20
   11992:	af00      	add	r7, sp, #0
   11994:	6078      	str	r0, [r7, #4]
	uint32_t	data=ReadBufferLabel(Label2Byte(270));
   11996:	687b      	ldr	r3, [r7, #4]
   11998:	681b      	ldr	r3, [r3, #0]
   1199a:	3308      	adds	r3, #8
   1199c:	681c      	ldr	r4, [r3, #0]
   1199e:	687b      	ldr	r3, [r7, #4]
   119a0:	681b      	ldr	r3, [r3, #0]
   119a2:	3b0c      	subs	r3, #12
   119a4:	681b      	ldr	r3, [r3, #0]
   119a6:	461a      	mov	r2, r3
   119a8:	687b      	ldr	r3, [r7, #4]
   119aa:	4413      	add	r3, r2
   119ac:	681b      	ldr	r3, [r3, #0]
   119ae:	3304      	adds	r3, #4
   119b0:	681b      	ldr	r3, [r3, #0]
   119b2:	687a      	ldr	r2, [r7, #4]
   119b4:	6812      	ldr	r2, [r2, #0]
   119b6:	3a0c      	subs	r2, #12
   119b8:	6812      	ldr	r2, [r2, #0]
   119ba:	4611      	mov	r1, r2
   119bc:	687a      	ldr	r2, [r7, #4]
   119be:	440a      	add	r2, r1
   119c0:	f44f 7187 	mov.w	r1, #270	; 0x10e
   119c4:	4610      	mov	r0, r2
   119c6:	4798      	blx	r3
   119c8:	4603      	mov	r3, r0
   119ca:	4619      	mov	r1, r3
   119cc:	6878      	ldr	r0, [r7, #4]
   119ce:	47a0      	blx	r4
   119d0:	60f8      	str	r0, [r7, #12]
	uint8_t	key=uint8_t((data&0xc0000)>>18);
   119d2:	68fb      	ldr	r3, [r7, #12]
   119d4:	0c9b      	lsrs	r3, r3, #18
   119d6:	b2db      	uxtb	r3, r3
   119d8:	f003 0303 	and.w	r3, r3, #3
   119dc:	72fb      	strb	r3, [r7, #11]

	return key;
   119de:	7afb      	ldrb	r3, [r7, #11]
}
   119e0:	4618      	mov	r0, r3
   119e2:	3714      	adds	r7, #20
   119e4:	46bd      	mov	sp, r7
   119e6:	bd90      	pop	{r4, r7, pc}

000119e8 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   119e8:	b480      	push	{r7}
   119ea:	b083      	sub	sp, #12
   119ec:	af00      	add	r7, sp, #0
   119ee:	6078      	str	r0, [r7, #4]
    return (void *)0;
   119f0:	2300      	movs	r3, #0
	}
   119f2:	4618      	mov	r0, r3
   119f4:	370c      	adds	r7, #12
   119f6:	46bd      	mov	sp, r7
   119f8:	bc80      	pop	{r7}
   119fa:	4770      	bx	lr

000119fc <free>:
//............................................................................
extern "C" void free(void *)
	{
   119fc:	b480      	push	{r7}
   119fe:	b083      	sub	sp, #12
   11a00:	af00      	add	r7, sp, #0
   11a02:	6078      	str	r0, [r7, #4]
	}
   11a04:	bf00      	nop
   11a06:	370c      	adds	r7, #12
   11a08:	46bd      	mov	sp, r7
   11a0a:	bc80      	pop	{r7}
   11a0c:	4770      	bx	lr

00011a0e <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   11a0e:	b480      	push	{r7}
   11a10:	af00      	add	r7, sp, #0
		}
   11a12:	bf00      	nop
   11a14:	46bd      	mov	sp, r7
   11a16:	bc80      	pop	{r7}
   11a18:	4770      	bx	lr
	...

00011a1c <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
   11a1c:	b580      	push	{r7, lr}
   11a1e:	b082      	sub	sp, #8
   11a20:	af00      	add	r7, sp, #0
   11a22:	6078      	str	r0, [r7, #4]
	free(p);
   11a24:	6878      	ldr	r0, [r7, #4]
   11a26:	4b03      	ldr	r3, [pc, #12]	; (11a34 <_ZdlPv+0x18>)
   11a28:	4798      	blx	r3
	}
   11a2a:	bf00      	nop
   11a2c:	3708      	adds	r7, #8
   11a2e:	46bd      	mov	sp, r7
   11a30:	bd80      	pop	{r7, pc}
   11a32:	bf00      	nop
   11a34:	000119fd 	.word	0x000119fd

00011a38 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
   11a38:	b480      	push	{r7}
   11a3a:	b083      	sub	sp, #12
   11a3c:	af00      	add	r7, sp, #0
   11a3e:	6078      	str	r0, [r7, #4]
   11a40:	687b      	ldr	r3, [r7, #4]
   11a42:	4618      	mov	r0, r3
   11a44:	370c      	adds	r7, #12
   11a46:	46bd      	mov	sp, r7
   11a48:	bc80      	pop	{r7}
   11a4a:	4770      	bx	lr

00011a4c <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
   11a4c:	b480      	push	{r7}
   11a4e:	b083      	sub	sp, #12
   11a50:	af00      	add	r7, sp, #0
   11a52:	6078      	str	r0, [r7, #4]
   11a54:	687b      	ldr	r3, [r7, #4]
   11a56:	4618      	mov	r0, r3
   11a58:	370c      	adds	r7, #12
   11a5a:	46bd      	mov	sp, r7
   11a5c:	bc80      	pop	{r7}
   11a5e:	4770      	bx	lr

00011a60 <_ZN11Diagnostics12troubleshootEhb>:
#include "diagnostics.h"
#include "CDC_Class.h"


//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
   11a60:	b580      	push	{r7, lr}
   11a62:	b084      	sub	sp, #16
   11a64:	af00      	add	r7, sp, #0
   11a66:	6078      	str	r0, [r7, #4]
   11a68:	460b      	mov	r3, r1
   11a6a:	70fb      	strb	r3, [r7, #3]
   11a6c:	4613      	mov	r3, r2
   11a6e:	70bb      	strb	r3, [r7, #2]
  bool _printoverride;
  errorcode = _code;
   11a70:	687b      	ldr	r3, [r7, #4]
   11a72:	78fa      	ldrb	r2, [r7, #3]
   11a74:	701a      	strb	r2, [r3, #0]
  _printoverride = true;
#elif defined (RUNDIAGNOSTIC) && defined (ARDUINO_ARCH_AVR)
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
   11a76:	78bb      	ldrb	r3, [r7, #2]
   11a78:	73fb      	strb	r3, [r7, #15]
#endif
  if (_printoverride) {
   11a7a:	7bfb      	ldrb	r3, [r7, #15]
   11a7c:	2b00      	cmp	r3, #0
   11a7e:	f000 80ba 	beq.w	11bf6 <_ZN11Diagnostics12troubleshootEhb+0x196>
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
   11a82:	78fb      	ldrb	r3, [r7, #3]
   11a84:	2b14      	cmp	r3, #20
   11a86:	f200 80a2 	bhi.w	11bce <_ZN11Diagnostics12troubleshootEhb+0x16e>
   11a8a:	a201      	add	r2, pc, #4	; (adr r2, 11a90 <_ZN11Diagnostics12troubleshootEhb+0x30>)
   11a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11a90:	00011ae5 	.word	0x00011ae5
   11a94:	00011af9 	.word	0x00011af9
   11a98:	00011b03 	.word	0x00011b03
   11a9c:	00011b0d 	.word	0x00011b0d
   11aa0:	00011b17 	.word	0x00011b17
   11aa4:	00011b29 	.word	0x00011b29
   11aa8:	00011b33 	.word	0x00011b33
   11aac:	00011b45 	.word	0x00011b45
   11ab0:	00011b57 	.word	0x00011b57
   11ab4:	00011b6b 	.word	0x00011b6b
   11ab8:	00011b75 	.word	0x00011b75
   11abc:	00011aef 	.word	0x00011aef
   11ac0:	00011b61 	.word	0x00011b61
   11ac4:	00011b7f 	.word	0x00011b7f
   11ac8:	00011b89 	.word	0x00011b89
   11acc:	00011b93 	.word	0x00011b93
   11ad0:	00011b9d 	.word	0x00011b9d
   11ad4:	00011ba7 	.word	0x00011ba7
   11ad8:	00011bb1 	.word	0x00011bb1
   11adc:	00011bbb 	.word	0x00011bbb
   11ae0:	00011bc5 	.word	0x00011bc5
      case SUCCESS:
      usb.println(F("Function executed successfully"));
   11ae4:	4946      	ldr	r1, [pc, #280]	; (11c00 <_ZN11Diagnostics12troubleshootEhb+0x1a0>)
   11ae6:	4847      	ldr	r0, [pc, #284]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11ae8:	4b47      	ldr	r3, [pc, #284]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11aea:	4798      	blx	r3
      break;
   11aec:	e074      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NORESPONSE:
      usb.println(F("Check your wiring. Flash chip is non-responsive."));
   11aee:	4947      	ldr	r1, [pc, #284]	; (11c0c <_ZN11Diagnostics12troubleshootEhb+0x1ac>)
   11af0:	4844      	ldr	r0, [pc, #272]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11af2:	4b45      	ldr	r3, [pc, #276]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11af4:	4798      	blx	r3
      break;
   11af6:	e06f      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CALLBEGIN:
      usb.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
   11af8:	4945      	ldr	r1, [pc, #276]	; (11c10 <_ZN11Diagnostics12troubleshootEhb+0x1b0>)
   11afa:	4842      	ldr	r0, [pc, #264]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11afc:	4b42      	ldr	r3, [pc, #264]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11afe:	4798      	blx	r3
      break;
   11b00:	e06a      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCHIP:
      usb.println(F("Unable to identify chip. Are you sure this chip is supported?"));
   11b02:	4944      	ldr	r1, [pc, #272]	; (11c14 <_ZN11Diagnostics12troubleshootEhb+0x1b4>)
   11b04:	483f      	ldr	r0, [pc, #252]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b06:	4b40      	ldr	r3, [pc, #256]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b08:	4798      	blx	r3
      //usb.println(F("Chip details:"));
      //TODO: Insert a diagnostics subroutine here.
      break;
   11b0a:	e065      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCAP:
      usb.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
   11b0c:	4942      	ldr	r1, [pc, #264]	; (11c18 <_ZN11Diagnostics12troubleshootEhb+0x1b8>)
   11b0e:	483d      	ldr	r0, [pc, #244]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b10:	4b3d      	ldr	r3, [pc, #244]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b12:	4798      	blx	r3
      break;
   11b14:	e060      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPBUSY:
      usb.println(F("Chip is busy."));
   11b16:	4941      	ldr	r1, [pc, #260]	; (11c1c <_ZN11Diagnostics12troubleshootEhb+0x1bc>)
   11b18:	483a      	ldr	r0, [pc, #232]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b1a:	4b3b      	ldr	r3, [pc, #236]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b1c:	4798      	blx	r3
      usb.println(F("Make sure all pins have been connected properly"));
   11b1e:	4940      	ldr	r1, [pc, #256]	; (11c20 <_ZN11Diagnostics12troubleshootEhb+0x1c0>)
   11b20:	4838      	ldr	r0, [pc, #224]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b22:	4b39      	ldr	r3, [pc, #228]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b24:	4798      	blx	r3
      break;
   11b26:	e057      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case OUTOFBOUNDS:
      usb.println(F("Page overflow has been disabled and the address called exceeds the memory"));
   11b28:	493e      	ldr	r1, [pc, #248]	; (11c24 <_ZN11Diagnostics12troubleshootEhb+0x1c4>)
   11b2a:	4836      	ldr	r0, [pc, #216]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b2c:	4b36      	ldr	r3, [pc, #216]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b2e:	4798      	blx	r3
      break;
   11b30:	e052      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CANTENWRITE:
      usb.println(F("Unable to Enable Writing to chip."));
   11b32:	493d      	ldr	r1, [pc, #244]	; (11c28 <_ZN11Diagnostics12troubleshootEhb+0x1c8>)
   11b34:	4833      	ldr	r0, [pc, #204]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b36:	4b34      	ldr	r3, [pc, #208]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b38:	4798      	blx	r3
      usb.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
   11b3a:	493c      	ldr	r1, [pc, #240]	; (11c2c <_ZN11Diagnostics12troubleshootEhb+0x1cc>)
   11b3c:	4831      	ldr	r0, [pc, #196]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b3e:	4b32      	ldr	r3, [pc, #200]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b40:	4798      	blx	r3
      break;
   11b42:	e049      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case PREVWRITTEN:
      usb.println(F("This sector already contains data."));
   11b44:	493a      	ldr	r1, [pc, #232]	; (11c30 <_ZN11Diagnostics12troubleshootEhb+0x1d0>)
   11b46:	482f      	ldr	r0, [pc, #188]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b48:	4b2f      	ldr	r3, [pc, #188]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b4a:	4798      	blx	r3
      usb.println(F("Please make sure the sectors being written to are erased."));
   11b4c:	4939      	ldr	r1, [pc, #228]	; (11c34 <_ZN11Diagnostics12troubleshootEhb+0x1d4>)
   11b4e:	482d      	ldr	r0, [pc, #180]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b50:	4b2d      	ldr	r3, [pc, #180]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b52:	4798      	blx	r3
      break;
   11b54:	e040      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case LOWRAM:
      usb.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
   11b56:	4938      	ldr	r1, [pc, #224]	; (11c38 <_ZN11Diagnostics12troubleshootEhb+0x1d8>)
   11b58:	482a      	ldr	r0, [pc, #168]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b5a:	4b2b      	ldr	r3, [pc, #172]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b5c:	4798      	blx	r3
      /*#if defined (ARDUINO_ARCH_SAM)
        usb.print(F("Current Free SRAM: "));
        usb.println(freeRAM());
      #endif*/
      break;
   11b5e:	e03b      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNSUPPORTEDFUNC:
      usb.println(F("This function is not supported by the flash memory hardware."));
   11b60:	4936      	ldr	r1, [pc, #216]	; (11c3c <_ZN11Diagnostics12troubleshootEhb+0x1dc>)
   11b62:	4828      	ldr	r0, [pc, #160]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b64:	4b28      	ldr	r3, [pc, #160]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b66:	4798      	blx	r3
      break;
   11b68:	e036      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case SYSSUSPEND:
      usb.println(F("Unable to suspend/resume operation."));
   11b6a:	4935      	ldr	r1, [pc, #212]	; (11c40 <_ZN11Diagnostics12troubleshootEhb+0x1e0>)
   11b6c:	4825      	ldr	r0, [pc, #148]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b6e:	4b26      	ldr	r3, [pc, #152]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b70:	4798      	blx	r3
      break;
   11b72:	e031      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case ERRORCHKFAIL:
      usb.println(F("Write Function has failed errorcheck."));
   11b74:	4933      	ldr	r1, [pc, #204]	; (11c44 <_ZN11Diagnostics12troubleshootEhb+0x1e4>)
   11b76:	4823      	ldr	r0, [pc, #140]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b78:	4b23      	ldr	r3, [pc, #140]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b7a:	4798      	blx	r3
      break;
   11b7c:	e02c      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO4BYTE:
      usb.println(F("Unable to enable 4-byte addressing."));
   11b7e:	4932      	ldr	r1, [pc, #200]	; (11c48 <_ZN11Diagnostics12troubleshootEhb+0x1e8>)
   11b80:	4820      	ldr	r0, [pc, #128]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b82:	4b21      	ldr	r3, [pc, #132]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b84:	4798      	blx	r3
      break;
   11b86:	e027      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO3BYTE:
      usb.println(F("Unable to disable 4-byte addressing."));
   11b88:	4930      	ldr	r1, [pc, #192]	; (11c4c <_ZN11Diagnostics12troubleshootEhb+0x1ec>)
   11b8a:	481e      	ldr	r0, [pc, #120]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b8c:	4b1e      	ldr	r3, [pc, #120]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b8e:	4798      	blx	r3
      break;
   11b90:	e022      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPISPOWEREDDOWN:
      usb.println(F("The chip is currently powered down."));
   11b92:	492f      	ldr	r1, [pc, #188]	; (11c50 <_ZN11Diagnostics12troubleshootEhb+0x1f0>)
   11b94:	481b      	ldr	r0, [pc, #108]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11b96:	4b1c      	ldr	r3, [pc, #112]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11b98:	4798      	blx	r3
      break;
   11b9a:	e01d      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDP:
      usb.println(F("The Flash chip does not support SFDP."));
   11b9c:	492d      	ldr	r1, [pc, #180]	; (11c54 <_ZN11Diagnostics12troubleshootEhb+0x1f4>)
   11b9e:	4819      	ldr	r0, [pc, #100]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11ba0:	4b19      	ldr	r3, [pc, #100]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11ba2:	4798      	blx	r3
      break;
   11ba4:	e018      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASEPARAM:
      usb.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
   11ba6:	492c      	ldr	r1, [pc, #176]	; (11c58 <_ZN11Diagnostics12troubleshootEhb+0x1f8>)
   11ba8:	4816      	ldr	r0, [pc, #88]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11baa:	4b17      	ldr	r3, [pc, #92]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11bac:	4798      	blx	r3
      break;
   11bae:	e013      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASETIME:
      usb.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
   11bb0:	492a      	ldr	r1, [pc, #168]	; (11c5c <_ZN11Diagnostics12troubleshootEhb+0x1fc>)
   11bb2:	4814      	ldr	r0, [pc, #80]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11bb4:	4b14      	ldr	r3, [pc, #80]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11bb6:	4798      	blx	r3
      break;
   11bb8:	e00e      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPPROGRAMTIMEPARAM:
      usb.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
   11bba:	4929      	ldr	r1, [pc, #164]	; (11c60 <_ZN11Diagnostics12troubleshootEhb+0x200>)
   11bbc:	4811      	ldr	r0, [pc, #68]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11bbe:	4b12      	ldr	r3, [pc, #72]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11bc0:	4798      	blx	r3
      break;
   11bc2:	e009      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOCHIPSELECTDECLARED:
      usb.println(F("No Chip Select pin defined in the custom SPI Array."));
   11bc4:	4927      	ldr	r1, [pc, #156]	; (11c64 <_ZN11Diagnostics12troubleshootEhb+0x204>)
   11bc6:	480f      	ldr	r0, [pc, #60]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11bc8:	4b0f      	ldr	r3, [pc, #60]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11bca:	4798      	blx	r3
      break;
   11bcc:	e004      	b.n	11bd8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      default:
      usb.println(F("Unknown error"));
   11bce:	4926      	ldr	r1, [pc, #152]	; (11c68 <_ZN11Diagnostics12troubleshootEhb+0x208>)
   11bd0:	480c      	ldr	r0, [pc, #48]	; (11c04 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11bd2:	4b0d      	ldr	r3, [pc, #52]	; (11c08 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11bd4:	4798      	blx	r3
      break;
   11bd6:	bf00      	nop
    }
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
   11bd8:	78fb      	ldrb	r3, [r7, #3]
   11bda:	2b0a      	cmp	r3, #10
   11bdc:	d008      	beq.n	11bf0 <_ZN11Diagnostics12troubleshootEhb+0x190>
   11bde:	78fb      	ldrb	r3, [r7, #3]
   11be0:	2b06      	cmp	r3, #6
   11be2:	d005      	beq.n	11bf0 <_ZN11Diagnostics12troubleshootEhb+0x190>
   11be4:	78fb      	ldrb	r3, [r7, #3]
   11be6:	2b02      	cmp	r3, #2
   11be8:	d002      	beq.n	11bf0 <_ZN11Diagnostics12troubleshootEhb+0x190>
   11bea:	78fb      	ldrb	r3, [r7, #3]
   11bec:	2b0b      	cmp	r3, #11
   11bee:	d102      	bne.n	11bf6 <_ZN11Diagnostics12troubleshootEhb+0x196>
      _printSupportLink();
   11bf0:	6878      	ldr	r0, [r7, #4]
   11bf2:	4b1e      	ldr	r3, [pc, #120]	; (11c6c <_ZN11Diagnostics12troubleshootEhb+0x20c>)
   11bf4:	4798      	blx	r3
    }
  #endif
  }
}
   11bf6:	bf00      	nop
   11bf8:	3710      	adds	r7, #16
   11bfa:	46bd      	mov	sp, r7
   11bfc:	bd80      	pop	{r7, pc}
   11bfe:	bf00      	nop
   11c00:	00019250 	.word	0x00019250
   11c04:	20004cc4 	.word	0x20004cc4
   11c08:	00014c61 	.word	0x00014c61
   11c0c:	00019270 	.word	0x00019270
   11c10:	000192a4 	.word	0x000192a4
   11c14:	000192e4 	.word	0x000192e4
   11c18:	00019324 	.word	0x00019324
   11c1c:	000193bc 	.word	0x000193bc
   11c20:	000193cc 	.word	0x000193cc
   11c24:	000193fc 	.word	0x000193fc
   11c28:	00019448 	.word	0x00019448
   11c2c:	0001946c 	.word	0x0001946c
   11c30:	000194b0 	.word	0x000194b0
   11c34:	000194d4 	.word	0x000194d4
   11c38:	00019510 	.word	0x00019510
   11c3c:	00019560 	.word	0x00019560
   11c40:	000195a0 	.word	0x000195a0
   11c44:	000195c4 	.word	0x000195c4
   11c48:	000195ec 	.word	0x000195ec
   11c4c:	00019610 	.word	0x00019610
   11c50:	00019638 	.word	0x00019638
   11c54:	0001965c 	.word	0x0001965c
   11c58:	00019684 	.word	0x00019684
   11c5c:	000196d0 	.word	0x000196d0
   11c60:	00019720 	.word	0x00019720
   11c64:	00019770 	.word	0x00019770
   11c68:	000197a4 	.word	0x000197a4
   11c6c:	00011c71 	.word	0x00011c71

00011c70 <_ZN11Diagnostics17_printSupportLinkEv>:
		usb.print(F("0"));
	}
	usb.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
   11c70:	b580      	push	{r7, lr}
   11c72:	b082      	sub	sp, #8
   11c74:	af00      	add	r7, sp, #0
   11c76:	6078      	str	r0, [r7, #4]
	usb.print(F("If this does not help resolve/clarify this issue, "));
   11c78:	4905      	ldr	r1, [pc, #20]	; (11c90 <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
   11c7a:	4806      	ldr	r0, [pc, #24]	; (11c94 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   11c7c:	4b06      	ldr	r3, [pc, #24]	; (11c98 <_ZN11Diagnostics17_printSupportLinkEv+0x28>)
   11c7e:	4798      	blx	r3
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
   11c80:	4906      	ldr	r1, [pc, #24]	; (11c9c <_ZN11Diagnostics17_printSupportLinkEv+0x2c>)
   11c82:	4804      	ldr	r0, [pc, #16]	; (11c94 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   11c84:	4b06      	ldr	r3, [pc, #24]	; (11ca0 <_ZN11Diagnostics17_printSupportLinkEv+0x30>)
   11c86:	4798      	blx	r3
}
   11c88:	bf00      	nop
   11c8a:	3708      	adds	r7, #8
   11c8c:	46bd      	mov	sp, r7
   11c8e:	bd80      	pop	{r7, pc}
   11c90:	000197c8 	.word	0x000197c8
   11c94:	20004cc4 	.word	0x20004cc4
   11c98:	00014b91 	.word	0x00014b91
   11c9c:	000197fc 	.word	0x000197fc
   11ca0:	00014c61 	.word	0x00014c61

00011ca4 <_Z41__static_initialization_and_destruction_0ii>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
   11ca4:	b580      	push	{r7, lr}
   11ca6:	b082      	sub	sp, #8
   11ca8:	af00      	add	r7, sp, #0
   11caa:	6078      	str	r0, [r7, #4]
   11cac:	6039      	str	r1, [r7, #0]
   11cae:	687b      	ldr	r3, [r7, #4]
   11cb0:	2b01      	cmp	r3, #1
   11cb2:	d10c      	bne.n	11cce <_Z41__static_initialization_and_destruction_0ii+0x2a>
   11cb4:	683b      	ldr	r3, [r7, #0]
   11cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11cba:	4293      	cmp	r3, r2
   11cbc:	d107      	bne.n	11cce <_Z41__static_initialization_and_destruction_0ii+0x2a>
   11cbe:	4806      	ldr	r0, [pc, #24]	; (11cd8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11cc0:	4b06      	ldr	r3, [pc, #24]	; (11cdc <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11cc2:	4798      	blx	r3
   11cc4:	4a06      	ldr	r2, [pc, #24]	; (11ce0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11cc6:	4907      	ldr	r1, [pc, #28]	; (11ce4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   11cc8:	4803      	ldr	r0, [pc, #12]	; (11cd8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11cca:	4b07      	ldr	r3, [pc, #28]	; (11ce8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   11ccc:	4798      	blx	r3
   11cce:	bf00      	nop
   11cd0:	3708      	adds	r7, #8
   11cd2:	46bd      	mov	sp, r7
   11cd4:	bd80      	pop	{r7, pc}
   11cd6:	bf00      	nop
   11cd8:	20003740 	.word	0x20003740
   11cdc:	00011a39 	.word	0x00011a39
   11ce0:	20000000 	.word	0x20000000
   11ce4:	00011a4d 	.word	0x00011a4d
   11ce8:	000159a5 	.word	0x000159a5

00011cec <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
   11cec:	b580      	push	{r7, lr}
   11cee:	af00      	add	r7, sp, #0
   11cf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11cf4:	2001      	movs	r0, #1
   11cf6:	4b01      	ldr	r3, [pc, #4]	; (11cfc <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
   11cf8:	4798      	blx	r3
   11cfa:	bd80      	pop	{r7, pc}
   11cfc:	00011ca5 	.word	0x00011ca5

00011d00 <_ZL14EventTimerTaskPK10timer_task>:
#define CHECK_EVENT_PERIOD 50
#endif
const tick_t	forever = 0x7fffffff;
EventHandler_Class	*ptrEventHandlerClass;

static void	EventTimerTask(const struct timer_task *const timer_task){
   11d00:	b480      	push	{r7}
   11d02:	b083      	sub	sp, #12
   11d04:	af00      	add	r7, sp, #0
   11d06:	6078      	str	r0, [r7, #4]
	ptrEventHandlerClass->eventTimeout=true;
   11d08:	4b04      	ldr	r3, [pc, #16]	; (11d1c <_ZL14EventTimerTaskPK10timer_task+0x1c>)
   11d0a:	681b      	ldr	r3, [r3, #0]
   11d0c:	2201      	movs	r2, #1
   11d0e:	701a      	strb	r2, [r3, #0]
}
   11d10:	bf00      	nop
   11d12:	370c      	adds	r7, #12
   11d14:	46bd      	mov	sp, r7
   11d16:	bc80      	pop	{r7}
   11d18:	4770      	bx	lr
   11d1a:	bf00      	nop
   11d1c:	2000474c 	.word	0x2000474c

00011d20 <_ZN18EventHandler_ClassC1Ev>:


// default constructor
EventHandler_Class::EventHandler_Class()
   11d20:	b480      	push	{r7}
   11d22:	b083      	sub	sp, #12
   11d24:	af00      	add	r7, sp, #0
   11d26:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   11d28:	4a04      	ldr	r2, [pc, #16]	; (11d3c <_ZN18EventHandler_ClassC1Ev+0x1c>)
   11d2a:	687b      	ldr	r3, [r7, #4]
   11d2c:	6013      	str	r3, [r2, #0]
} //EventHandler_Class
   11d2e:	687b      	ldr	r3, [r7, #4]
   11d30:	4618      	mov	r0, r3
   11d32:	370c      	adds	r7, #12
   11d34:	46bd      	mov	sp, r7
   11d36:	bc80      	pop	{r7}
   11d38:	4770      	bx	lr
   11d3a:	bf00      	nop
   11d3c:	2000474c 	.word	0x2000474c

00011d40 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
   11d40:	b480      	push	{r7}
   11d42:	b083      	sub	sp, #12
   11d44:	af00      	add	r7, sp, #0
   11d46:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   11d48:	4a04      	ldr	r2, [pc, #16]	; (11d5c <_ZN18EventHandler_ClassD1Ev+0x1c>)
   11d4a:	687b      	ldr	r3, [r7, #4]
   11d4c:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
   11d4e:	687b      	ldr	r3, [r7, #4]
   11d50:	4618      	mov	r0, r3
   11d52:	370c      	adds	r7, #12
   11d54:	46bd      	mov	sp, r7
   11d56:	bc80      	pop	{r7}
   11d58:	4770      	bx	lr
   11d5a:	bf00      	nop
   11d5c:	2000474c 	.word	0x2000474c

00011d60 <_ZN18EventHandler_Class12WaitForEventER5eventttl>:
		usb<< "initializeEvents: event #" << i << " == " << (void*)&eventStorage[i] << ", next == " << (void*)eventStorage[i].next << newline;
	}

	#endif
}
bool	EventHandler_Class::WaitForEvent(event& e, uint16 eventClass, uint16 eventType, tick_t timeout){
   11d60:	b590      	push	{r4, r7, lr}
   11d62:	b087      	sub	sp, #28
   11d64:	af02      	add	r7, sp, #8
   11d66:	60f8      	str	r0, [r7, #12]
   11d68:	60b9      	str	r1, [r7, #8]
   11d6a:	4611      	mov	r1, r2
   11d6c:	461a      	mov	r2, r3
   11d6e:	460b      	mov	r3, r1
   11d70:	80fb      	strh	r3, [r7, #6]
   11d72:	4613      	mov	r3, r2
   11d74:	80bb      	strh	r3, [r7, #4]
	return	WaitForEvent(e,(EventClass)eventClass,(EventType)eventType,timeout);
   11d76:	88b9      	ldrh	r1, [r7, #4]
   11d78:	88fa      	ldrh	r2, [r7, #6]
   11d7a:	6a3b      	ldr	r3, [r7, #32]
   11d7c:	9300      	str	r3, [sp, #0]
   11d7e:	460b      	mov	r3, r1
   11d80:	68b9      	ldr	r1, [r7, #8]
   11d82:	68f8      	ldr	r0, [r7, #12]
   11d84:	4c03      	ldr	r4, [pc, #12]	; (11d94 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x34>)
   11d86:	47a0      	blx	r4
   11d88:	4603      	mov	r3, r0
}
   11d8a:	4618      	mov	r0, r3
   11d8c:	3714      	adds	r7, #20
   11d8e:	46bd      	mov	sp, r7
   11d90:	bd90      	pop	{r4, r7, pc}
   11d92:	bf00      	nop
   11d94:	00011d99 	.word	0x00011d99

00011d98 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel>:

bool	EventHandler_Class::WaitForEvent(event& e, EventClass eventClass, EventType eventType, tick_t timeout)
{
   11d98:	b590      	push	{r4, r7, lr}
   11d9a:	b08b      	sub	sp, #44	; 0x2c
   11d9c:	af00      	add	r7, sp, #0
   11d9e:	60f8      	str	r0, [r7, #12]
   11da0:	60b9      	str	r1, [r7, #8]
   11da2:	4611      	mov	r1, r2
   11da4:	461a      	mov	r2, r3
   11da6:	460b      	mov	r3, r1
   11da8:	80fb      	strh	r3, [r7, #6]
   11daa:	4613      	mov	r3, r2
   11dac:	80bb      	strh	r3, [r7, #4]
	bool	result(false);
   11dae:	2300      	movs	r3, #0
   11db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	event*	queue;
	event*	queuePrev(NULL);
   11db4:	2300      	movs	r3, #0
   11db6:	61fb      	str	r3, [r7, #28]
	
	
	e.eventClass = eventClass;
   11db8:	68bb      	ldr	r3, [r7, #8]
   11dba:	88fa      	ldrh	r2, [r7, #6]
   11dbc:	801a      	strh	r2, [r3, #0]
	e.eventType = eventType;
   11dbe:	68bb      	ldr	r3, [r7, #8]
   11dc0:	88ba      	ldrh	r2, [r7, #4]
   11dc2:	805a      	strh	r2, [r3, #2]

	tick_t	timeoutTime;
	
	if (timeout != forever)
   11dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11dc6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   11dca:	4293      	cmp	r3, r2
   11dcc:	d007      	beq.n	11dde <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x46>
	timeoutTime = (eventTimer.Get_ticks() + timeout);
   11dce:	4853      	ldr	r0, [pc, #332]	; (11f1c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11dd0:	4b53      	ldr	r3, [pc, #332]	; (11f20 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   11dd2:	4798      	blx	r3
   11dd4:	4602      	mov	r2, r0
   11dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11dd8:	4413      	add	r3, r2
   11dda:	61bb      	str	r3, [r7, #24]
   11ddc:	e002      	b.n	11de4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
	else
	timeoutTime = forever;
   11dde:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   11de2:	61bb      	str	r3, [r7, #24]

	while (!result && (eventTimer.Get_ticks() < timeoutTime))
   11de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11de8:	f083 0301 	eor.w	r3, r3, #1
   11dec:	b2db      	uxtb	r3, r3
   11dee:	2b00      	cmp	r3, #0
   11df0:	d008      	beq.n	11e04 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6c>
   11df2:	484a      	ldr	r0, [pc, #296]	; (11f1c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11df4:	4b4a      	ldr	r3, [pc, #296]	; (11f20 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   11df6:	4798      	blx	r3
   11df8:	4602      	mov	r2, r0
   11dfa:	69bb      	ldr	r3, [r7, #24]
   11dfc:	429a      	cmp	r2, r3
   11dfe:	d201      	bcs.n	11e04 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6c>
   11e00:	2301      	movs	r3, #1
   11e02:	e000      	b.n	11e06 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6e>
   11e04:	2300      	movs	r3, #0
   11e06:	2b00      	cmp	r3, #0
   11e08:	f000 8081 	beq.w	11f0e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x176>
	{
		if (eventHandler)
   11e0c:	68fb      	ldr	r3, [r7, #12]
   11e0e:	685b      	ldr	r3, [r3, #4]
   11e10:	2b00      	cmp	r3, #0
   11e12:	d002      	beq.n	11e1a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x82>
		{
			eventHandler();
   11e14:	68fb      	ldr	r3, [r7, #12]
   11e16:	685b      	ldr	r3, [r3, #4]
   11e18:	4798      	blx	r3
		}

		queue = (event*)mainThreadEventQueue;
   11e1a:	4b42      	ldr	r3, [pc, #264]	; (11f24 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x18c>)
   11e1c:	681b      	ldr	r3, [r3, #0]
   11e1e:	623b      	str	r3, [r7, #32]

		while (queue)
   11e20:	6a3b      	ldr	r3, [r7, #32]
   11e22:	2b00      	cmp	r3, #0
   11e24:	d041      	beq.n	11eaa <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x112>
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
		
			#endif
			if (
			((e.eventClass == kAnyEventClass) ||
   11e26:	68bb      	ldr	r3, [r7, #8]
   11e28:	881b      	ldrh	r3, [r3, #0]
			if (
   11e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11e2e:	4293      	cmp	r3, r2
   11e30:	d005      	beq.n	11e3e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xa6>
			(queue->eventClass == e.eventClass))
   11e32:	6a3b      	ldr	r3, [r7, #32]
   11e34:	881a      	ldrh	r2, [r3, #0]
   11e36:	68bb      	ldr	r3, [r7, #8]
   11e38:	881b      	ldrh	r3, [r3, #0]
			((e.eventClass == kAnyEventClass) ||
   11e3a:	429a      	cmp	r2, r3
   11e3c:	d12f      	bne.n	11e9e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x106>
			&&
			((e.eventType == kAnyEventType) ||
   11e3e:	68bb      	ldr	r3, [r7, #8]
   11e40:	885b      	ldrh	r3, [r3, #2]
			&&
   11e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11e46:	4293      	cmp	r3, r2
   11e48:	d005      	beq.n	11e56 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xbe>
			(queue->eventType == e.eventType))
   11e4a:	6a3b      	ldr	r3, [r7, #32]
   11e4c:	885a      	ldrh	r2, [r3, #2]
   11e4e:	68bb      	ldr	r3, [r7, #8]
   11e50:	885b      	ldrh	r3, [r3, #2]
			((e.eventType == kAnyEventType) ||
   11e52:	429a      	cmp	r2, r3
   11e54:	d123      	bne.n	11e9e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x106>
			)
			{
				if (queuePrev)
   11e56:	69fb      	ldr	r3, [r7, #28]
   11e58:	2b00      	cmp	r3, #0
   11e5a:	d004      	beq.n	11e66 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xce>
				{
					queuePrev->next = queue->next;
   11e5c:	6a3b      	ldr	r3, [r7, #32]
   11e5e:	68da      	ldr	r2, [r3, #12]
   11e60:	69fb      	ldr	r3, [r7, #28]
   11e62:	60da      	str	r2, [r3, #12]
   11e64:	e003      	b.n	11e6e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xd6>
				}
				else
				{
					mainThreadEventQueue = queue->next;
   11e66:	6a3b      	ldr	r3, [r7, #32]
   11e68:	68db      	ldr	r3, [r3, #12]
   11e6a:	4a2e      	ldr	r2, [pc, #184]	; (11f24 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x18c>)
   11e6c:	6013      	str	r3, [r2, #0]
				}
				
				e = *queue;
   11e6e:	68ba      	ldr	r2, [r7, #8]
   11e70:	6a3b      	ldr	r3, [r7, #32]
   11e72:	4614      	mov	r4, r2
   11e74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11e76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				queue->next = eventQueue;
   11e7a:	4b2b      	ldr	r3, [pc, #172]	; (11f28 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x190>)
   11e7c:	681a      	ldr	r2, [r3, #0]
   11e7e:	6a3b      	ldr	r3, [r7, #32]
   11e80:	60da      	str	r2, [r3, #12]
				eventQueue = queue;
   11e82:	4a29      	ldr	r2, [pc, #164]	; (11f28 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x190>)
   11e84:	6a3b      	ldr	r3, [r7, #32]
   11e86:	6013      	str	r3, [r2, #0]
				
				eventsInUse--;
   11e88:	68fb      	ldr	r3, [r7, #12]
   11e8a:	689b      	ldr	r3, [r3, #8]
   11e8c:	1e5a      	subs	r2, r3, #1
   11e8e:	68fb      	ldr	r3, [r7, #12]
   11e90:	609a      	str	r2, [r3, #8]

				queue = NULL;
   11e92:	2300      	movs	r3, #0
   11e94:	623b      	str	r3, [r7, #32]
				result = true;
   11e96:	2301      	movs	r3, #1
   11e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   11e9c:	e004      	b.n	11ea8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x110>
			}
			else
			{
				queuePrev = queue;
   11e9e:	6a3b      	ldr	r3, [r7, #32]
   11ea0:	61fb      	str	r3, [r7, #28]
				queue = queue->next;
   11ea2:	6a3b      	ldr	r3, [r7, #32]
   11ea4:	68db      	ldr	r3, [r3, #12]
   11ea6:	623b      	str	r3, [r7, #32]
		while (queue)
   11ea8:	e7ba      	b.n	11e20 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x88>
			}
		}

		if (result)
   11eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11eae:	2b00      	cmp	r3, #0
   11eb0:	d198      	bne.n	11de4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
		
			#endif
		}
		else
		{
			tick_t	timeRemaining(timeoutTime - eventTimer.Get_ticks());
   11eb2:	69bc      	ldr	r4, [r7, #24]
   11eb4:	4819      	ldr	r0, [pc, #100]	; (11f1c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11eb6:	4b1a      	ldr	r3, [pc, #104]	; (11f20 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   11eb8:	4798      	blx	r3
   11eba:	4603      	mov	r3, r0
   11ebc:	1ae3      	subs	r3, r4, r3
   11ebe:	617b      	str	r3, [r7, #20]
			eventTimeout=false;
   11ec0:	68fb      	ldr	r3, [r7, #12]
   11ec2:	2200      	movs	r2, #0
   11ec4:	701a      	strb	r2, [r3, #0]
			if (timeRemaining > CHECK_EVENT_PERIOD){
   11ec6:	697b      	ldr	r3, [r7, #20]
   11ec8:	2b32      	cmp	r3, #50	; 0x32
   11eca:	dd05      	ble.n	11ed8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x140>
				eventTimer.add_oneShot_task((FUNC_PTR)EventTimerTask,CHECK_EVENT_PERIOD);
   11ecc:	2232      	movs	r2, #50	; 0x32
   11ece:	4917      	ldr	r1, [pc, #92]	; (11f2c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x194>)
   11ed0:	4812      	ldr	r0, [pc, #72]	; (11f1c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11ed2:	4b17      	ldr	r3, [pc, #92]	; (11f30 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x198>)
   11ed4:	4798      	blx	r3
   11ed6:	e00d      	b.n	11ef4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x15c>
			}else if (timeRemaining > 0){
   11ed8:	697b      	ldr	r3, [r7, #20]
   11eda:	2b00      	cmp	r3, #0
   11edc:	dd0a      	ble.n	11ef4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x15c>
				eventTimer.add_oneShot_task((FUNC_PTR)EventTimerTask,timeoutTime - eventTimer.Get_ticks());
   11ede:	69bc      	ldr	r4, [r7, #24]
   11ee0:	480e      	ldr	r0, [pc, #56]	; (11f1c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11ee2:	4b0f      	ldr	r3, [pc, #60]	; (11f20 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   11ee4:	4798      	blx	r3
   11ee6:	4603      	mov	r3, r0
   11ee8:	1ae3      	subs	r3, r4, r3
   11eea:	461a      	mov	r2, r3
   11eec:	490f      	ldr	r1, [pc, #60]	; (11f2c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x194>)
   11eee:	480b      	ldr	r0, [pc, #44]	; (11f1c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11ef0:	4b0f      	ldr	r3, [pc, #60]	; (11f30 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x198>)
   11ef2:	4798      	blx	r3
			}
			eventTimer.start();
   11ef4:	4809      	ldr	r0, [pc, #36]	; (11f1c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11ef6:	4b0f      	ldr	r3, [pc, #60]	; (11f34 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x19c>)
   11ef8:	4798      	blx	r3
			while (!eventTimeout);
   11efa:	68fb      	ldr	r3, [r7, #12]
   11efc:	781b      	ldrb	r3, [r3, #0]
   11efe:	b2db      	uxtb	r3, r3
   11f00:	f083 0301 	eor.w	r3, r3, #1
   11f04:	b2db      	uxtb	r3, r3
   11f06:	2b00      	cmp	r3, #0
   11f08:	f43f af6c 	beq.w	11de4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
   11f0c:	e7f5      	b.n	11efa <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x162>
		
		}
	}

	return result;
   11f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
   11f12:	4618      	mov	r0, r3
   11f14:	372c      	adds	r7, #44	; 0x2c
   11f16:	46bd      	mov	sp, r7
   11f18:	bd90      	pop	{r4, r7, pc}
   11f1a:	bf00      	nop
   11f1c:	20004c40 	.word	0x20004c40
   11f20:	00014441 	.word	0x00014441
   11f24:	20004748 	.word	0x20004748
   11f28:	20004744 	.word	0x20004744
   11f2c:	00011d01 	.word	0x00011d01
   11f30:	00014409 	.word	0x00014409
   11f34:	00014339 	.word	0x00014339

00011f38 <_ZN18EventHandler_Class13SendEventSelfERK5event>:
{
	SendEventSelf(e);
}

void EventHandler_Class::SendEventSelf(const event& e)
{
   11f38:	b580      	push	{r7, lr}
   11f3a:	b084      	sub	sp, #16
   11f3c:	af00      	add	r7, sp, #0
   11f3e:	6078      	str	r0, [r7, #4]
   11f40:	6039      	str	r1, [r7, #0]
	usb << "send event:\r";
	usb << "     class:   " << (uint16)e.eventClass << newline;
	usb << "     type:    " << (uint16)e.eventType << newline;
	
	#endif
	event*	theEvent(eventQueue);
   11f42:	4b22      	ldr	r3, [pc, #136]	; (11fcc <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   11f44:	681b      	ldr	r3, [r3, #0]
   11f46:	60bb      	str	r3, [r7, #8]
	
	if (theEvent)
   11f48:	68bb      	ldr	r3, [r7, #8]
   11f4a:	2b00      	cmp	r3, #0
   11f4c:	d035      	beq.n	11fba <_ZN18EventHandler_Class13SendEventSelfERK5event+0x82>
	{
		eventQueue = eventQueue->next;
   11f4e:	4b1f      	ldr	r3, [pc, #124]	; (11fcc <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   11f50:	681b      	ldr	r3, [r3, #0]
   11f52:	68db      	ldr	r3, [r3, #12]
   11f54:	4a1d      	ldr	r2, [pc, #116]	; (11fcc <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   11f56:	6013      	str	r3, [r2, #0]
		theEvent->next = NULL;
   11f58:	68bb      	ldr	r3, [r7, #8]
   11f5a:	2200      	movs	r2, #0
   11f5c:	60da      	str	r2, [r3, #12]
		eventsInUse++;
   11f5e:	687b      	ldr	r3, [r7, #4]
   11f60:	689b      	ldr	r3, [r3, #8]
   11f62:	1c5a      	adds	r2, r3, #1
   11f64:	687b      	ldr	r3, [r7, #4]
   11f66:	609a      	str	r2, [r3, #8]

		event*	threadQueue((event*)mainThreadEventQueue);
   11f68:	4b19      	ldr	r3, [pc, #100]	; (11fd0 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>)
   11f6a:	681b      	ldr	r3, [r3, #0]
   11f6c:	60fb      	str	r3, [r7, #12]
		if (threadQueue == NULL)
   11f6e:	68fb      	ldr	r3, [r7, #12]
   11f70:	2b00      	cmp	r3, #0
   11f72:	d103      	bne.n	11f7c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
		mainThreadEventQueue = theEvent;
   11f74:	4a16      	ldr	r2, [pc, #88]	; (11fd0 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>)
   11f76:	68bb      	ldr	r3, [r7, #8]
   11f78:	6013      	str	r3, [r2, #0]
   11f7a:	e00a      	b.n	11f92 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
		else
		{
			while (threadQueue->next)
   11f7c:	68fb      	ldr	r3, [r7, #12]
   11f7e:	68db      	ldr	r3, [r3, #12]
   11f80:	2b00      	cmp	r3, #0
   11f82:	d003      	beq.n	11f8c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x54>
			threadQueue = threadQueue->next;
   11f84:	68fb      	ldr	r3, [r7, #12]
   11f86:	68db      	ldr	r3, [r3, #12]
   11f88:	60fb      	str	r3, [r7, #12]
			while (threadQueue->next)
   11f8a:	e7f7      	b.n	11f7c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
			threadQueue->next = theEvent;
   11f8c:	68fb      	ldr	r3, [r7, #12]
   11f8e:	68ba      	ldr	r2, [r7, #8]
   11f90:	60da      	str	r2, [r3, #12]
			usb << "eventsInUsePeak => " << eventsInUsePeak << newline;
			
		}
		#endif

		(*theEvent).eventClass = e.eventClass;
   11f92:	683b      	ldr	r3, [r7, #0]
   11f94:	881a      	ldrh	r2, [r3, #0]
   11f96:	68bb      	ldr	r3, [r7, #8]
   11f98:	801a      	strh	r2, [r3, #0]
		(*theEvent).eventType = e.eventType;
   11f9a:	683b      	ldr	r3, [r7, #0]
   11f9c:	885a      	ldrh	r2, [r3, #2]
   11f9e:	68bb      	ldr	r3, [r7, #8]
   11fa0:	805a      	strh	r2, [r3, #2]
		(*theEvent).data = e.data;
   11fa2:	68bb      	ldr	r3, [r7, #8]
   11fa4:	683a      	ldr	r2, [r7, #0]
   11fa6:	6892      	ldr	r2, [r2, #8]
   11fa8:	609a      	str	r2, [r3, #8]
		(*theEvent).timestamp = eventTimer.Get_ticks();
   11faa:	480a      	ldr	r0, [pc, #40]	; (11fd4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x9c>)
   11fac:	4b0a      	ldr	r3, [pc, #40]	; (11fd8 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa0>)
   11fae:	4798      	blx	r3
   11fb0:	4603      	mov	r3, r0
   11fb2:	461a      	mov	r2, r3
   11fb4:	68bb      	ldr	r3, [r7, #8]
   11fb6:	605a      	str	r2, [r3, #4]
		usb << "     type:    " << (uint16)e.eventType << newline;
		
		#endif
		eventQueueUnderflow++;
	}
}
   11fb8:	e004      	b.n	11fc4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x8c>
		eventQueueUnderflow++;
   11fba:	687b      	ldr	r3, [r7, #4]
   11fbc:	699b      	ldr	r3, [r3, #24]
   11fbe:	1c5a      	adds	r2, r3, #1
   11fc0:	687b      	ldr	r3, [r7, #4]
   11fc2:	619a      	str	r2, [r3, #24]
}
   11fc4:	bf00      	nop
   11fc6:	3710      	adds	r7, #16
   11fc8:	46bd      	mov	sp, r7
   11fca:	bd80      	pop	{r7, pc}
   11fcc:	20004744 	.word	0x20004744
   11fd0:	20004748 	.word	0x20004748
   11fd4:	20004c40 	.word	0x20004c40
   11fd8:	00014441 	.word	0x00014441

00011fdc <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData>:
	
	SendEventSelf(theEvent);
}

void EventHandler_Class::SendErrorSelf(uint16_t et,const eventData& data)
{
   11fdc:	b580      	push	{r7, lr}
   11fde:	b088      	sub	sp, #32
   11fe0:	af00      	add	r7, sp, #0
   11fe2:	60f8      	str	r0, [r7, #12]
   11fe4:	460b      	mov	r3, r1
   11fe6:	607a      	str	r2, [r7, #4]
   11fe8:	817b      	strh	r3, [r7, #10]
	event		theEvent;
   11fea:	f107 0310 	add.w	r3, r7, #16
   11fee:	4618      	mov	r0, r3
   11ff0:	4b09      	ldr	r3, [pc, #36]	; (12018 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x3c>)
   11ff2:	4798      	blx	r3
	theEvent.eventClass = kErrorEventClass;
   11ff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11ff8:	823b      	strh	r3, [r7, #16]
	theEvent.eventType =(EventType)et ;
   11ffa:	897b      	ldrh	r3, [r7, #10]
   11ffc:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   11ffe:	687b      	ldr	r3, [r7, #4]
   12000:	681b      	ldr	r3, [r3, #0]
   12002:	61bb      	str	r3, [r7, #24]
	SendEventSelf(theEvent);
   12004:	f107 0310 	add.w	r3, r7, #16
   12008:	4619      	mov	r1, r3
   1200a:	68f8      	ldr	r0, [r7, #12]
   1200c:	4b03      	ldr	r3, [pc, #12]	; (1201c <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x40>)
   1200e:	4798      	blx	r3
}
   12010:	bf00      	nop
   12012:	3720      	adds	r7, #32
   12014:	46bd      	mov	sp, r7
   12016:	bd80      	pop	{r7, pc}
   12018:	0000207d 	.word	0x0000207d
   1201c:	00011f39 	.word	0x00011f39

00012020 <_ZN18EventHandler_Class10CheckEventEv>:
uint32_t EventHandler_Class::CheckEvent(void)
{
   12020:	b580      	push	{r7, lr}
   12022:	b08a      	sub	sp, #40	; 0x28
   12024:	af00      	add	r7, sp, #0
   12026:	6078      	str	r0, [r7, #4]
	
	float	temperatureSMPST = 0.0;	//stores temp value for fan off function
   12028:	f04f 0300 	mov.w	r3, #0
   1202c:	627b      	str	r3, [r7, #36]	; 0x24
	float 	temperatureExhaust = 0.0;
   1202e:	f04f 0300 	mov.w	r3, #0
   12032:	623b      	str	r3, [r7, #32]
	float	temperatureMagnetron = 0.0;
   12034:	f04f 0300 	mov.w	r3, #0
   12038:	61fb      	str	r3, [r7, #28]

	
	#if __DEBUG__ > 4
	usb<< "checkEvent" << newline;
	#endif
	event	e;
   1203a:	f107 030c 	add.w	r3, r7, #12
   1203e:	4618      	mov	r0, r3
   12040:	4b03      	ldr	r3, [pc, #12]	; (12050 <_ZN18EventHandler_Class10CheckEventEv+0x30>)
   12042:	4798      	blx	r3
	//Alive beacon function: i2cAlive is reset by a successful coreI2Cread to true and checked here.
	//If coreI2Cread was unsuccessful I2C is reseted



	return	(uint32_t)eventsInUse;
   12044:	687b      	ldr	r3, [r7, #4]
   12046:	689b      	ldr	r3, [r3, #8]
	
}
   12048:	4618      	mov	r0, r3
   1204a:	3728      	adds	r7, #40	; 0x28
   1204c:	46bd      	mov	sp, r7
   1204e:	bd80      	pop	{r7, pc}
   12050:	0000207d 	.word	0x0000207d

00012054 <_Z41__static_initialization_and_destruction_0ii>:


   12054:	b5b0      	push	{r4, r5, r7, lr}
   12056:	b082      	sub	sp, #8
   12058:	af00      	add	r7, sp, #0
   1205a:	6078      	str	r0, [r7, #4]
   1205c:	6039      	str	r1, [r7, #0]
   1205e:	687b      	ldr	r3, [r7, #4]
   12060:	2b01      	cmp	r3, #1
   12062:	d117      	bne.n	12094 <_Z41__static_initialization_and_destruction_0ii+0x40>
   12064:	683b      	ldr	r3, [r7, #0]
   12066:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1206a:	4293      	cmp	r3, r2
   1206c:	d112      	bne.n	12094 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
   1206e:	4b0b      	ldr	r3, [pc, #44]	; (1209c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   12070:	24ff      	movs	r4, #255	; 0xff
   12072:	461d      	mov	r5, r3
   12074:	2c00      	cmp	r4, #0
   12076:	db05      	blt.n	12084 <_Z41__static_initialization_and_destruction_0ii+0x30>
   12078:	4628      	mov	r0, r5
   1207a:	4b09      	ldr	r3, [pc, #36]	; (120a0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   1207c:	4798      	blx	r3
   1207e:	3510      	adds	r5, #16
   12080:	3c01      	subs	r4, #1
   12082:	e7f7      	b.n	12074 <_Z41__static_initialization_and_destruction_0ii+0x20>
   12084:	4807      	ldr	r0, [pc, #28]	; (120a4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   12086:	4b08      	ldr	r3, [pc, #32]	; (120a8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   12088:	4798      	blx	r3
   1208a:	4a08      	ldr	r2, [pc, #32]	; (120ac <_Z41__static_initialization_and_destruction_0ii+0x58>)
   1208c:	4908      	ldr	r1, [pc, #32]	; (120b0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1208e:	4805      	ldr	r0, [pc, #20]	; (120a4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   12090:	4b08      	ldr	r3, [pc, #32]	; (120b4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   12092:	4798      	blx	r3
   12094:	bf00      	nop
   12096:	3708      	adds	r7, #8
   12098:	46bd      	mov	sp, r7
   1209a:	bdb0      	pop	{r4, r5, r7, pc}
   1209c:	20003744 	.word	0x20003744
   120a0:	0000207d 	.word	0x0000207d
   120a4:	2000475c 	.word	0x2000475c
   120a8:	00011d21 	.word	0x00011d21
   120ac:	20000000 	.word	0x20000000
   120b0:	00011d41 	.word	0x00011d41
   120b4:	000159a5 	.word	0x000159a5

000120b8 <_GLOBAL__sub_I_maxEventCount>:
   120b8:	b580      	push	{r7, lr}
   120ba:	af00      	add	r7, sp, #0
   120bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   120c0:	2001      	movs	r0, #1
   120c2:	4b01      	ldr	r3, [pc, #4]	; (120c8 <_GLOBAL__sub_I_maxEventCount+0x10>)
   120c4:	4798      	blx	r3
   120c6:	bd80      	pop	{r7, pc}
   120c8:	00012055 	.word	0x00012055

000120cc <_ZL13MCPHadChangedv>:



MCP23017_Class	*ptrMCP23017Class;

static void	MCPHadChanged(void){
   120cc:	b480      	push	{r7}
   120ce:	af00      	add	r7, sp, #0
	
			ptrMCP23017Class->hasChanged=true;
   120d0:	4b03      	ldr	r3, [pc, #12]	; (120e0 <_ZL13MCPHadChangedv+0x14>)
   120d2:	681b      	ldr	r3, [r3, #0]
   120d4:	2201      	movs	r2, #1
   120d6:	705a      	strb	r2, [r3, #1]

}
   120d8:	bf00      	nop
   120da:	46bd      	mov	sp, r7
   120dc:	bc80      	pop	{r7}
   120de:	4770      	bx	lr
   120e0:	20004778 	.word	0x20004778

000120e4 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc>:

MCP23017_Class::MCP23017_Class()
{
	ptrMCP23017Class=this;
} //AT24MAC_Class
MCP23017_Class::MCP23017_Class(i2c_m_async_desc *i2c)
   120e4:	b580      	push	{r7, lr}
   120e6:	b082      	sub	sp, #8
   120e8:	af00      	add	r7, sp, #0
   120ea:	6078      	str	r0, [r7, #4]
   120ec:	6039      	str	r1, [r7, #0]
   120ee:	687b      	ldr	r3, [r7, #4]
   120f0:	3304      	adds	r3, #4
   120f2:	4618      	mov	r0, r3
   120f4:	4b06      	ldr	r3, [pc, #24]	; (12110 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x2c>)
   120f6:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
   120f8:	687b      	ldr	r3, [r7, #4]
   120fa:	683a      	ldr	r2, [r7, #0]
   120fc:	635a      	str	r2, [r3, #52]	; 0x34
	ptrMCP23017Class=this;
   120fe:	4a05      	ldr	r2, [pc, #20]	; (12114 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x30>)
   12100:	687b      	ldr	r3, [r7, #4]
   12102:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
   12104:	687b      	ldr	r3, [r7, #4]
   12106:	4618      	mov	r0, r3
   12108:	3708      	adds	r7, #8
   1210a:	46bd      	mov	sp, r7
   1210c:	bd80      	pop	{r7, pc}
   1210e:	bf00      	nop
   12110:	0001544d 	.word	0x0001544d
   12114:	20004778 	.word	0x20004778

00012118 <_ZN14MCP23017_ClassD1Ev>:

// default destructor
MCP23017_Class::~MCP23017_Class()
   12118:	b580      	push	{r7, lr}
   1211a:	b082      	sub	sp, #8
   1211c:	af00      	add	r7, sp, #0
   1211e:	6078      	str	r0, [r7, #4]
   12120:	687b      	ldr	r3, [r7, #4]
   12122:	3304      	adds	r3, #4
   12124:	4618      	mov	r0, r3
   12126:	4b03      	ldr	r3, [pc, #12]	; (12134 <_ZN14MCP23017_ClassD1Ev+0x1c>)
   12128:	4798      	blx	r3
{
} //~AT24MAC_Class
   1212a:	687b      	ldr	r3, [r7, #4]
   1212c:	4618      	mov	r0, r3
   1212e:	3708      	adds	r7, #8
   12130:	46bd      	mov	sp, r7
   12132:	bd80      	pop	{r7, pc}
   12134:	00015485 	.word	0x00015485

00012138 <_ZN14MCP23017_Class4InitEh>:

void MCP23017_Class::Init(uint8_t addr) {
   12138:	b580      	push	{r7, lr}
   1213a:	b082      	sub	sp, #8
   1213c:	af00      	add	r7, sp, #0
   1213e:	6078      	str	r0, [r7, #4]
   12140:	460b      	mov	r3, r1
   12142:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	78fa      	ldrb	r2, [r7, #3]
   12148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	i2ca.Set_descriptor(ptrI2CDescr);
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	1d1a      	adds	r2, r3, #4
   12150:	687b      	ldr	r3, [r7, #4]
   12152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12154:	4619      	mov	r1, r3
   12156:	4610      	mov	r0, r2
   12158:	4b0c      	ldr	r3, [pc, #48]	; (1218c <_ZN14MCP23017_Class4InitEh+0x54>)
   1215a:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
   1215c:	687b      	ldr	r3, [r7, #4]
   1215e:	3304      	adds	r3, #4
   12160:	78fa      	ldrb	r2, [r7, #3]
   12162:	4611      	mov	r1, r2
   12164:	4618      	mov	r0, r3
   12166:	4b0a      	ldr	r3, [pc, #40]	; (12190 <_ZN14MCP23017_Class4InitEh+0x58>)
   12168:	4798      	blx	r3
   1216a:	4603      	mov	r3, r0
   1216c:	2b00      	cmp	r3, #0
   1216e:	bf0c      	ite	eq
   12170:	2301      	moveq	r3, #1
   12172:	2300      	movne	r3, #0
   12174:	b2da      	uxtb	r2, r3
   12176:	687b      	ldr	r3, [r7, #4]
   12178:	701a      	strb	r2, [r3, #0]
	ext_irq_register(PIN_PA04,FUNC_PTR(MCPHadChanged));
   1217a:	4906      	ldr	r1, [pc, #24]	; (12194 <_ZN14MCP23017_Class4InitEh+0x5c>)
   1217c:	2004      	movs	r0, #4
   1217e:	4b06      	ldr	r3, [pc, #24]	; (12198 <_ZN14MCP23017_Class4InitEh+0x60>)
   12180:	4798      	blx	r3
}
   12182:	bf00      	nop
   12184:	3708      	adds	r7, #8
   12186:	46bd      	mov	sp, r7
   12188:	bd80      	pop	{r7, pc}
   1218a:	bf00      	nop
   1218c:	000154a5 	.word	0x000154a5
   12190:	0001557d 	.word	0x0001557d
   12194:	000120cd 	.word	0x000120cd
   12198:	00004af9 	.word	0x00004af9

0001219c <_ZN14MCP23017_Class4InitEv>:
}

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
bool MCP23017_Class::Init(void) {
   1219c:	b580      	push	{r7, lr}
   1219e:	b082      	sub	sp, #8
   121a0:	af00      	add	r7, sp, #0
   121a2:	6078      	str	r0, [r7, #4]
    Init((uint8_t)MCP23017_ADDRESS);
   121a4:	2127      	movs	r1, #39	; 0x27
   121a6:	6878      	ldr	r0, [r7, #4]
   121a8:	4b04      	ldr	r3, [pc, #16]	; (121bc <_ZN14MCP23017_Class4InitEv+0x20>)
   121aa:	4798      	blx	r3
	return	SelfTest();	
   121ac:	6878      	ldr	r0, [r7, #4]
   121ae:	4b04      	ldr	r3, [pc, #16]	; (121c0 <_ZN14MCP23017_Class4InitEv+0x24>)
   121b0:	4798      	blx	r3
   121b2:	4603      	mov	r3, r0
}
   121b4:	4618      	mov	r0, r3
   121b6:	3708      	adds	r7, #8
   121b8:	46bd      	mov	sp, r7
   121ba:	bd80      	pop	{r7, pc}
   121bc:	00012139 	.word	0x00012139
   121c0:	000122f5 	.word	0x000122f5

000121c4 <_ZN14MCP23017_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23017_Class::readRegister(uint8_t addr){
   121c4:	b580      	push	{r7, lr}
   121c6:	b082      	sub	sp, #8
   121c8:	af00      	add	r7, sp, #0
   121ca:	6078      	str	r0, [r7, #4]
   121cc:	460b      	mov	r3, r1
   121ce:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
   121d0:	687b      	ldr	r3, [r7, #4]
   121d2:	3304      	adds	r3, #4
   121d4:	1cf9      	adds	r1, r7, #3
   121d6:	2201      	movs	r2, #1
   121d8:	4618      	mov	r0, r3
   121da:	4b11      	ldr	r3, [pc, #68]	; (12220 <_ZN14MCP23017_Class12readRegisterEh+0x5c>)
   121dc:	4798      	blx	r3
	while(!i2ca.txReady);
   121de:	687b      	ldr	r3, [r7, #4]
   121e0:	7d1b      	ldrb	r3, [r3, #20]
   121e2:	b2db      	uxtb	r3, r3
   121e4:	f083 0301 	eor.w	r3, r3, #1
   121e8:	b2db      	uxtb	r3, r3
   121ea:	2b00      	cmp	r3, #0
   121ec:	d000      	beq.n	121f0 <_ZN14MCP23017_Class12readRegisterEh+0x2c>
   121ee:	e7f6      	b.n	121de <_ZN14MCP23017_Class12readRegisterEh+0x1a>
	i2ca.Read(&registerValue,1);
   121f0:	687b      	ldr	r3, [r7, #4]
   121f2:	1d18      	adds	r0, r3, #4
   121f4:	687b      	ldr	r3, [r7, #4]
   121f6:	3339      	adds	r3, #57	; 0x39
   121f8:	2201      	movs	r2, #1
   121fa:	4619      	mov	r1, r3
   121fc:	4b09      	ldr	r3, [pc, #36]	; (12224 <_ZN14MCP23017_Class12readRegisterEh+0x60>)
   121fe:	4798      	blx	r3
	while(!i2ca.rxReady);
   12200:	687b      	ldr	r3, [r7, #4]
   12202:	7d5b      	ldrb	r3, [r3, #21]
   12204:	b2db      	uxtb	r3, r3
   12206:	f083 0301 	eor.w	r3, r3, #1
   1220a:	b2db      	uxtb	r3, r3
   1220c:	2b00      	cmp	r3, #0
   1220e:	d000      	beq.n	12212 <_ZN14MCP23017_Class12readRegisterEh+0x4e>
   12210:	e7f6      	b.n	12200 <_ZN14MCP23017_Class12readRegisterEh+0x3c>
	return registerValue;
   12212:	687b      	ldr	r3, [r7, #4]
   12214:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
}
   12218:	4618      	mov	r0, r3
   1221a:	3708      	adds	r7, #8
   1221c:	46bd      	mov	sp, r7
   1221e:	bd80      	pop	{r7, pc}
   12220:	000155c5 	.word	0x000155c5
   12224:	00015609 	.word	0x00015609

00012228 <_ZN14MCP23017_Class8readGPIOEh>:

/**
 * Read a single port, A or B, and return its current 8 bit value.
 * Parameter b should be 0 for GPIOA, and 1 for GPIOB.
 */
uint8_t MCP23017_Class::readGPIO(uint8_t b) {
   12228:	b580      	push	{r7, lr}
   1222a:	b082      	sub	sp, #8
   1222c:	af00      	add	r7, sp, #0
   1222e:	6078      	str	r0, [r7, #4]
   12230:	460b      	mov	r3, r1
   12232:	70fb      	strb	r3, [r7, #3]

	if (b == 0){
   12234:	78fb      	ldrb	r3, [r7, #3]
   12236:	2b00      	cmp	r3, #0
   12238:	d10c      	bne.n	12254 <_ZN14MCP23017_Class8readGPIOEh+0x2c>
		regAddress=MCP23017_GPIOA;
   1223a:	687b      	ldr	r3, [r7, #4]
   1223c:	2212      	movs	r2, #18
   1223e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		i2ca.Write(&regAddress,1);
   12242:	687b      	ldr	r3, [r7, #4]
   12244:	1d18      	adds	r0, r3, #4
   12246:	687b      	ldr	r3, [r7, #4]
   12248:	333a      	adds	r3, #58	; 0x3a
   1224a:	2201      	movs	r2, #1
   1224c:	4619      	mov	r1, r3
   1224e:	4b18      	ldr	r3, [pc, #96]	; (122b0 <_ZN14MCP23017_Class8readGPIOEh+0x88>)
   12250:	4798      	blx	r3
   12252:	e00b      	b.n	1226c <_ZN14MCP23017_Class8readGPIOEh+0x44>
	}else {
		regAddress=MCP23017_GPIOB;
   12254:	687b      	ldr	r3, [r7, #4]
   12256:	2213      	movs	r2, #19
   12258:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		i2ca.Write(&regAddress,1);
   1225c:	687b      	ldr	r3, [r7, #4]
   1225e:	1d18      	adds	r0, r3, #4
   12260:	687b      	ldr	r3, [r7, #4]
   12262:	333a      	adds	r3, #58	; 0x3a
   12264:	2201      	movs	r2, #1
   12266:	4619      	mov	r1, r3
   12268:	4b11      	ldr	r3, [pc, #68]	; (122b0 <_ZN14MCP23017_Class8readGPIOEh+0x88>)
   1226a:	4798      	blx	r3
	}


		while(!i2ca.txReady);
   1226c:	687b      	ldr	r3, [r7, #4]
   1226e:	7d1b      	ldrb	r3, [r3, #20]
   12270:	b2db      	uxtb	r3, r3
   12272:	f083 0301 	eor.w	r3, r3, #1
   12276:	b2db      	uxtb	r3, r3
   12278:	2b00      	cmp	r3, #0
   1227a:	d000      	beq.n	1227e <_ZN14MCP23017_Class8readGPIOEh+0x56>
   1227c:	e7f6      	b.n	1226c <_ZN14MCP23017_Class8readGPIOEh+0x44>
		i2ca.Read(&registerValue,1);
   1227e:	687b      	ldr	r3, [r7, #4]
   12280:	1d18      	adds	r0, r3, #4
   12282:	687b      	ldr	r3, [r7, #4]
   12284:	3339      	adds	r3, #57	; 0x39
   12286:	2201      	movs	r2, #1
   12288:	4619      	mov	r1, r3
   1228a:	4b0a      	ldr	r3, [pc, #40]	; (122b4 <_ZN14MCP23017_Class8readGPIOEh+0x8c>)
   1228c:	4798      	blx	r3
		while(!i2ca.rxReady);
   1228e:	687b      	ldr	r3, [r7, #4]
   12290:	7d5b      	ldrb	r3, [r3, #21]
   12292:	b2db      	uxtb	r3, r3
   12294:	f083 0301 	eor.w	r3, r3, #1
   12298:	b2db      	uxtb	r3, r3
   1229a:	2b00      	cmp	r3, #0
   1229c:	d000      	beq.n	122a0 <_ZN14MCP23017_Class8readGPIOEh+0x78>
   1229e:	e7f6      	b.n	1228e <_ZN14MCP23017_Class8readGPIOEh+0x66>
		return	registerValue;
   122a0:	687b      	ldr	r3, [r7, #4]
   122a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
}
   122a6:	4618      	mov	r0, r3
   122a8:	3708      	adds	r7, #8
   122aa:	46bd      	mov	sp, r7
   122ac:	bd80      	pop	{r7, pc}
   122ae:	bf00      	nop
   122b0:	000155c5 	.word	0x000155c5
   122b4:	00015609 	.word	0x00015609

000122b8 <_ZN14MCP23017_Class9SavePortsEv>:
	for(int i=0;i<8;i++) if (bitRead(intf,i)) return i+8;

	return MCP23017_INT_ERR;

}
uint8_t	MCP23017_Class::SavePorts(void){
   122b8:	b580      	push	{r7, lr}
   122ba:	b082      	sub	sp, #8
   122bc:	af00      	add	r7, sp, #0
   122be:	6078      	str	r0, [r7, #4]
	portA=readGPIO(0);
   122c0:	2100      	movs	r1, #0
   122c2:	6878      	ldr	r0, [r7, #4]
   122c4:	4b0a      	ldr	r3, [pc, #40]	; (122f0 <_ZN14MCP23017_Class9SavePortsEv+0x38>)
   122c6:	4798      	blx	r3
   122c8:	4603      	mov	r3, r0
   122ca:	461a      	mov	r2, r3
   122cc:	687b      	ldr	r3, [r7, #4]
   122ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	portB=readGPIO(1);
   122d2:	2101      	movs	r1, #1
   122d4:	6878      	ldr	r0, [r7, #4]
   122d6:	4b06      	ldr	r3, [pc, #24]	; (122f0 <_ZN14MCP23017_Class9SavePortsEv+0x38>)
   122d8:	4798      	blx	r3
   122da:	4603      	mov	r3, r0
   122dc:	461a      	mov	r2, r3
   122de:	687b      	ldr	r3, [r7, #4]
   122e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   122e4:	bf00      	nop
   122e6:	4618      	mov	r0, r3
   122e8:	3708      	adds	r7, #8
   122ea:	46bd      	mov	sp, r7
   122ec:	bd80      	pop	{r7, pc}
   122ee:	bf00      	nop
   122f0:	00012229 	.word	0x00012229

000122f4 <_ZN14MCP23017_Class8SelfTestEv>:
		return (readRegister(intcapreg)>>bit) & (0x01);
	}

	return MCP23017_INT_ERR;
}
bool	MCP23017_Class::SelfTest(void){
   122f4:	b580      	push	{r7, lr}
   122f6:	b082      	sub	sp, #8
   122f8:	af00      	add	r7, sp, #0
   122fa:	6078      	str	r0, [r7, #4]
	controlRegisterA=readRegister(MCP23017_IOCONA);
   122fc:	210a      	movs	r1, #10
   122fe:	6878      	ldr	r0, [r7, #4]
   12300:	4b13      	ldr	r3, [pc, #76]	; (12350 <_ZN14MCP23017_Class8SelfTestEv+0x5c>)
   12302:	4798      	blx	r3
   12304:	4603      	mov	r3, r0
   12306:	461a      	mov	r2, r3
   12308:	687b      	ldr	r3, [r7, #4]
   1230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	controlRegisterB=readRegister(MCP23017_IOCONB);
   1230e:	210b      	movs	r1, #11
   12310:	6878      	ldr	r0, [r7, #4]
   12312:	4b0f      	ldr	r3, [pc, #60]	; (12350 <_ZN14MCP23017_Class8SelfTestEv+0x5c>)
   12314:	4798      	blx	r3
   12316:	4603      	mov	r3, r0
   12318:	461a      	mov	r2, r3
   1231a:	687b      	ldr	r3, [r7, #4]
   1231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	if (controlRegisterA==controlRegisterB)
   12320:	687b      	ldr	r3, [r7, #4]
   12322:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   12326:	687b      	ldr	r3, [r7, #4]
   12328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1232c:	429a      	cmp	r2, r3
   1232e:	d104      	bne.n	1233a <_ZN14MCP23017_Class8SelfTestEv+0x46>
		{
			isOK=true;
		} 
		else
		{
			isOK=false;
   12330:	687b      	ldr	r3, [r7, #4]
   12332:	2200      	movs	r2, #0
   12334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   12338:	e003      	b.n	12342 <_ZN14MCP23017_Class8SelfTestEv+0x4e>
		}
	} 
	else
	{
		isOK=false;
   1233a:	687b      	ldr	r3, [r7, #4]
   1233c:	2200      	movs	r2, #0
   1233e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}
	return isOK;
   12342:	687b      	ldr	r3, [r7, #4]
   12344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
}
   12348:	4618      	mov	r0, r3
   1234a:	3708      	adds	r7, #8
   1234c:	46bd      	mov	sp, r7
   1234e:	bd80      	pop	{r7, pc}
   12350:	000121c5 	.word	0x000121c5

00012354 <_Z41__static_initialization_and_destruction_0ii>:
   12354:	b580      	push	{r7, lr}
   12356:	b082      	sub	sp, #8
   12358:	af00      	add	r7, sp, #0
   1235a:	6078      	str	r0, [r7, #4]
   1235c:	6039      	str	r1, [r7, #0]
   1235e:	687b      	ldr	r3, [r7, #4]
   12360:	2b01      	cmp	r3, #1
   12362:	d10d      	bne.n	12380 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   12364:	683b      	ldr	r3, [r7, #0]
   12366:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1236a:	4293      	cmp	r3, r2
   1236c:	d108      	bne.n	12380 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1236e:	4906      	ldr	r1, [pc, #24]	; (12388 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12370:	4806      	ldr	r0, [pc, #24]	; (1238c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12372:	4b07      	ldr	r3, [pc, #28]	; (12390 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   12374:	4798      	blx	r3
   12376:	4a07      	ldr	r2, [pc, #28]	; (12394 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12378:	4907      	ldr	r1, [pc, #28]	; (12398 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1237a:	4804      	ldr	r0, [pc, #16]	; (1238c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1237c:	4b07      	ldr	r3, [pc, #28]	; (1239c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1237e:	4798      	blx	r3
   12380:	bf00      	nop
   12382:	3708      	adds	r7, #8
   12384:	46bd      	mov	sp, r7
   12386:	bd80      	pop	{r7, pc}
   12388:	20005084 	.word	0x20005084
   1238c:	2000477c 	.word	0x2000477c
   12390:	000120e5 	.word	0x000120e5
   12394:	20000000 	.word	0x20000000
   12398:	00012119 	.word	0x00012119
   1239c:	000159a5 	.word	0x000159a5

000123a0 <_GLOBAL__sub_I_ptrMCP23017Class>:
   123a0:	b580      	push	{r7, lr}
   123a2:	af00      	add	r7, sp, #0
   123a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   123a8:	2001      	movs	r0, #1
   123aa:	4b01      	ldr	r3, [pc, #4]	; (123b0 <_GLOBAL__sub_I_ptrMCP23017Class+0x10>)
   123ac:	4798      	blx	r3
   123ae:	bd80      	pop	{r7, pc}
   123b0:	00012355 	.word	0x00012355

000123b4 <_ZN13LTC2983_ClassD1Ev>:
LTC2983_Class::LTC2983_Class()
{
} //LTC2983_Class

// default destructor
LTC2983_Class::~LTC2983_Class()
   123b4:	b580      	push	{r7, lr}
   123b6:	b082      	sub	sp, #8
   123b8:	af00      	add	r7, sp, #0
   123ba:	6078      	str	r0, [r7, #4]
   123bc:	687b      	ldr	r3, [r7, #4]
   123be:	4618      	mov	r0, r3
   123c0:	4b03      	ldr	r3, [pc, #12]	; (123d0 <_ZN13LTC2983_ClassD1Ev+0x1c>)
   123c2:	4798      	blx	r3
{
} //~LTC2983_Class
   123c4:	687b      	ldr	r3, [r7, #4]
   123c6:	4618      	mov	r0, r3
   123c8:	3708      	adds	r7, #8
   123ca:	46bd      	mov	sp, r7
   123cc:	bd80      	pop	{r7, pc}
   123ce:	bf00      	nop
   123d0:	0001266d 	.word	0x0001266d

000123d4 <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor>:

LTC2983_Class::LTC2983_Class(spi_m_async_descriptor *SPI_LTC){
   123d4:	b580      	push	{r7, lr}
   123d6:	b082      	sub	sp, #8
   123d8:	af00      	add	r7, sp, #0
   123da:	6078      	str	r0, [r7, #4]
   123dc:	6039      	str	r1, [r7, #0]
   123de:	687b      	ldr	r3, [r7, #4]
   123e0:	4618      	mov	r0, r3
   123e2:	4b06      	ldr	r3, [pc, #24]	; (123fc <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor+0x28>)
   123e4:	4798      	blx	r3
	ptrLTCClass=this;
   123e6:	4a06      	ldr	r2, [pc, #24]	; (12400 <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor+0x2c>)
   123e8:	687b      	ldr	r3, [r7, #4]
   123ea:	6013      	str	r3, [r2, #0]
	SPIA=SPI_LTC;
   123ec:	687b      	ldr	r3, [r7, #4]
   123ee:	683a      	ldr	r2, [r7, #0]
   123f0:	615a      	str	r2, [r3, #20]
	};
   123f2:	687b      	ldr	r3, [r7, #4]
   123f4:	4618      	mov	r0, r3
   123f6:	3708      	adds	r7, #8
   123f8:	46bd      	mov	sp, r7
   123fa:	bd80      	pop	{r7, pc}
   123fc:	0001264d 	.word	0x0001264d
   12400:	200047c0 	.word	0x200047c0

00012404 <_ZN13LTC2983_Class16SaveChannelValueEh>:

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}
uint32_t	LTC2983_Class::SaveChannelValue(uint8_t ch){
   12404:	b590      	push	{r4, r7, lr}
   12406:	b085      	sub	sp, #20
   12408:	af02      	add	r7, sp, #8
   1240a:	6078      	str	r0, [r7, #4]
   1240c:	460b      	mov	r3, r1
   1240e:	70fb      	strb	r3, [r7, #3]
		start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, ch);
   12410:	78fb      	ldrb	r3, [r7, #3]
   12412:	461a      	mov	r2, r3
   12414:	2110      	movs	r1, #16
   12416:	6878      	ldr	r0, [r7, #4]
   12418:	4b11      	ldr	r3, [pc, #68]	; (12460 <_ZN13LTC2983_Class16SaveChannelValueEh+0x5c>)
   1241a:	4798      	blx	r3
   1241c:	4603      	mov	r3, r0
   1241e:	461a      	mov	r2, r3
   12420:	687b      	ldr	r3, [r7, #4]
   12422:	869a      	strh	r2, [r3, #52]	; 0x34
		raw_data = transfer_four_bytes(CHIP_SELECT, READ_FROM_RAM, start_address, 0);
   12424:	687b      	ldr	r3, [r7, #4]
   12426:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   12428:	2300      	movs	r3, #0
   1242a:	9300      	str	r3, [sp, #0]
   1242c:	4613      	mov	r3, r2
   1242e:	2203      	movs	r2, #3
   12430:	213d      	movs	r1, #61	; 0x3d
   12432:	6878      	ldr	r0, [r7, #4]
   12434:	4c0b      	ldr	r4, [pc, #44]	; (12464 <_ZN13LTC2983_Class16SaveChannelValueEh+0x60>)
   12436:	47a0      	blx	r4
   12438:	4602      	mov	r2, r0
   1243a:	687b      	ldr	r3, [r7, #4]
   1243c:	629a      	str	r2, [r3, #40]	; 0x28
		channelsRawData[ch]=raw_data;
   1243e:	78fc      	ldrb	r4, [r7, #3]
   12440:	687b      	ldr	r3, [r7, #4]
   12442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12444:	4b08      	ldr	r3, [pc, #32]	; (12468 <_ZN13LTC2983_Class16SaveChannelValueEh+0x64>)
   12446:	4610      	mov	r0, r2
   12448:	4798      	blx	r3
   1244a:	4601      	mov	r1, r0
   1244c:	687b      	ldr	r3, [r7, #4]
   1244e:	1da2      	adds	r2, r4, #6
   12450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return	raw_data;
   12454:	687b      	ldr	r3, [r7, #4]
   12456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
   12458:	4618      	mov	r0, r3
   1245a:	370c      	adds	r7, #12
   1245c:	46bd      	mov	sp, r7
   1245e:	bd90      	pop	{r4, r7, pc}
   12460:	000124f9 	.word	0x000124f9
   12464:	0001246d 	.word	0x0001246d
   12468:	00017699 	.word	0x00017699

0001246c <_ZN13LTC2983_Class19transfer_four_bytesEhhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint8_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   1246c:	b590      	push	{r4, r7, lr}
   1246e:	b08b      	sub	sp, #44	; 0x2c
   12470:	af02      	add	r7, sp, #8
   12472:	6078      	str	r0, [r7, #4]
   12474:	4608      	mov	r0, r1
   12476:	4611      	mov	r1, r2
   12478:	461a      	mov	r2, r3
   1247a:	4603      	mov	r3, r0
   1247c:	70fb      	strb	r3, [r7, #3]
   1247e:	460b      	mov	r3, r1
   12480:	70bb      	strb	r3, [r7, #2]
   12482:	4613      	mov	r3, r2
   12484:	803b      	strh	r3, [r7, #0]
	uint32_t output_data;
	volatile uint8_t tx[7], rx[7];

	tx[0] = ram_read_or_write;
   12486:	78bb      	ldrb	r3, [r7, #2]
   12488:	753b      	strb	r3, [r7, #20]
	tx[1] = highByte(start_address);
   1248a:	883b      	ldrh	r3, [r7, #0]
   1248c:	121b      	asrs	r3, r3, #8
   1248e:	b2db      	uxtb	r3, r3
   12490:	757b      	strb	r3, [r7, #21]
	tx[2] = lowByte(start_address);
   12492:	883b      	ldrh	r3, [r7, #0]
   12494:	b2db      	uxtb	r3, r3
   12496:	75bb      	strb	r3, [r7, #22]
	tx[3] = (uint8_t)(input_data >> 24);
   12498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1249a:	0e1b      	lsrs	r3, r3, #24
   1249c:	b2db      	uxtb	r3, r3
   1249e:	75fb      	strb	r3, [r7, #23]
	tx[4] = (uint8_t)(input_data >> 16);
   124a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   124a2:	0c1b      	lsrs	r3, r3, #16
   124a4:	b2db      	uxtb	r3, r3
   124a6:	763b      	strb	r3, [r7, #24]
	tx[5] = (uint8_t)(input_data >> 8);
   124a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   124aa:	0a1b      	lsrs	r3, r3, #8
   124ac:	b2db      	uxtb	r3, r3
   124ae:	767b      	strb	r3, [r7, #25]
	tx[6] = (uint8_t) input_data;
   124b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   124b2:	b2db      	uxtb	r3, r3
   124b4:	76bb      	strb	r3, [r7, #26]

	spiLT.spi_transfer_block(chip_select,(uint8_t*)tx,(uint8_t*)rx, 7);
   124b6:	6878      	ldr	r0, [r7, #4]
   124b8:	f107 040c 	add.w	r4, r7, #12
   124bc:	f107 0214 	add.w	r2, r7, #20
   124c0:	78f9      	ldrb	r1, [r7, #3]
   124c2:	2307      	movs	r3, #7
   124c4:	9300      	str	r3, [sp, #0]
   124c6:	4623      	mov	r3, r4
   124c8:	4c0a      	ldr	r4, [pc, #40]	; (124f4 <_ZN13LTC2983_Class19transfer_four_bytesEhhtm+0x88>)
   124ca:	47a0      	blx	r4

	output_data = (uint32_t) rx[3] << 24 |
   124cc:	7bfb      	ldrb	r3, [r7, #15]
   124ce:	b2db      	uxtb	r3, r3
   124d0:	061a      	lsls	r2, r3, #24
	(uint32_t) rx[4] << 16 |
   124d2:	7c3b      	ldrb	r3, [r7, #16]
   124d4:	b2db      	uxtb	r3, r3
   124d6:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx[3] << 24 |
   124d8:	431a      	orrs	r2, r3
	(uint32_t) rx[5] << 8  |
   124da:	7c7b      	ldrb	r3, [r7, #17]
   124dc:	b2db      	uxtb	r3, r3
   124de:	021b      	lsls	r3, r3, #8
	(uint32_t) rx[4] << 16 |
   124e0:	4313      	orrs	r3, r2
	(uint32_t) rx[6];
   124e2:	7cba      	ldrb	r2, [r7, #18]
   124e4:	b2d2      	uxtb	r2, r2
	output_data = (uint32_t) rx[3] << 24 |
   124e6:	4313      	orrs	r3, r2
   124e8:	61fb      	str	r3, [r7, #28]

	return output_data;
   124ea:	69fb      	ldr	r3, [r7, #28]
}
   124ec:	4618      	mov	r0, r3
   124ee:	3724      	adds	r7, #36	; 0x24
   124f0:	46bd      	mov	sp, r7
   124f2:	bd90      	pop	{r4, r7, pc}
   124f4:	00012681 	.word	0x00012681

000124f8 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   124f8:	b480      	push	{r7}
   124fa:	b083      	sub	sp, #12
   124fc:	af00      	add	r7, sp, #0
   124fe:	6078      	str	r0, [r7, #4]
   12500:	460b      	mov	r3, r1
   12502:	807b      	strh	r3, [r7, #2]
   12504:	4613      	mov	r3, r2
   12506:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   12508:	787b      	ldrb	r3, [r7, #1]
   1250a:	3b01      	subs	r3, #1
   1250c:	b29b      	uxth	r3, r3
   1250e:	009b      	lsls	r3, r3, #2
   12510:	b29a      	uxth	r2, r3
   12512:	887b      	ldrh	r3, [r7, #2]
   12514:	4413      	add	r3, r2
   12516:	b29b      	uxth	r3, r3
}
   12518:	4618      	mov	r0, r3
   1251a:	370c      	adds	r7, #12
   1251c:	46bd      	mov	sp, r7
   1251e:	bc80      	pop	{r7}
   12520:	4770      	bx	lr
	...

00012524 <_Z41__static_initialization_and_destruction_0ii>:
	}
	isOK=process_finished==1?true:false;
	return	isOK;
	}

LTC2983_Class	temperatures(&SPI_TEMP);
   12524:	b580      	push	{r7, lr}
   12526:	b082      	sub	sp, #8
   12528:	af00      	add	r7, sp, #0
   1252a:	6078      	str	r0, [r7, #4]
   1252c:	6039      	str	r1, [r7, #0]
   1252e:	687b      	ldr	r3, [r7, #4]
   12530:	2b01      	cmp	r3, #1
   12532:	d10d      	bne.n	12550 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   12534:	683b      	ldr	r3, [r7, #0]
   12536:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1253a:	4293      	cmp	r3, r2
   1253c:	d108      	bne.n	12550 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1253e:	4906      	ldr	r1, [pc, #24]	; (12558 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12540:	4806      	ldr	r0, [pc, #24]	; (1255c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12542:	4b07      	ldr	r3, [pc, #28]	; (12560 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   12544:	4798      	blx	r3
   12546:	4a07      	ldr	r2, [pc, #28]	; (12564 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12548:	4907      	ldr	r1, [pc, #28]	; (12568 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1254a:	4804      	ldr	r0, [pc, #16]	; (1255c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1254c:	4b07      	ldr	r3, [pc, #28]	; (1256c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1254e:	4798      	blx	r3
   12550:	bf00      	nop
   12552:	3708      	adds	r7, #8
   12554:	46bd      	mov	sp, r7
   12556:	bd80      	pop	{r7, pc}
   12558:	20004f68 	.word	0x20004f68
   1255c:	200047c4 	.word	0x200047c4
   12560:	000123d5 	.word	0x000123d5
   12564:	20000000 	.word	0x20000000
   12568:	000123b5 	.word	0x000123b5
   1256c:	000159a5 	.word	0x000159a5

00012570 <_GLOBAL__sub_I_ptrLTCClass>:
   12570:	b580      	push	{r7, lr}
   12572:	af00      	add	r7, sp, #0
   12574:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12578:	2001      	movs	r0, #1
   1257a:	4b01      	ldr	r3, [pc, #4]	; (12580 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
   1257c:	4798      	blx	r3
   1257e:	bd80      	pop	{r7, pc}
   12580:	00012525 	.word	0x00012525

00012584 <hri_port_set_OUT_reg>:
{
   12584:	b480      	push	{r7}
   12586:	b085      	sub	sp, #20
   12588:	af00      	add	r7, sp, #0
   1258a:	60f8      	str	r0, [r7, #12]
   1258c:	460b      	mov	r3, r1
   1258e:	607a      	str	r2, [r7, #4]
   12590:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   12592:	7afb      	ldrb	r3, [r7, #11]
   12594:	68fa      	ldr	r2, [r7, #12]
   12596:	01db      	lsls	r3, r3, #7
   12598:	4413      	add	r3, r2
   1259a:	3318      	adds	r3, #24
   1259c:	687a      	ldr	r2, [r7, #4]
   1259e:	601a      	str	r2, [r3, #0]
}
   125a0:	bf00      	nop
   125a2:	3714      	adds	r7, #20
   125a4:	46bd      	mov	sp, r7
   125a6:	bc80      	pop	{r7}
   125a8:	4770      	bx	lr

000125aa <hri_port_clear_OUT_reg>:
{
   125aa:	b480      	push	{r7}
   125ac:	b085      	sub	sp, #20
   125ae:	af00      	add	r7, sp, #0
   125b0:	60f8      	str	r0, [r7, #12]
   125b2:	460b      	mov	r3, r1
   125b4:	607a      	str	r2, [r7, #4]
   125b6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   125b8:	7afb      	ldrb	r3, [r7, #11]
   125ba:	68fa      	ldr	r2, [r7, #12]
   125bc:	01db      	lsls	r3, r3, #7
   125be:	4413      	add	r3, r2
   125c0:	3314      	adds	r3, #20
   125c2:	687a      	ldr	r2, [r7, #4]
   125c4:	601a      	str	r2, [r3, #0]
}
   125c6:	bf00      	nop
   125c8:	3714      	adds	r7, #20
   125ca:	46bd      	mov	sp, r7
   125cc:	bc80      	pop	{r7}
   125ce:	4770      	bx	lr

000125d0 <_gpio_set_level>:
{
   125d0:	b580      	push	{r7, lr}
   125d2:	b082      	sub	sp, #8
   125d4:	af00      	add	r7, sp, #0
   125d6:	4603      	mov	r3, r0
   125d8:	6039      	str	r1, [r7, #0]
   125da:	71fb      	strb	r3, [r7, #7]
   125dc:	4613      	mov	r3, r2
   125de:	71bb      	strb	r3, [r7, #6]
	if (level) {
   125e0:	79bb      	ldrb	r3, [r7, #6]
   125e2:	2b00      	cmp	r3, #0
   125e4:	d006      	beq.n	125f4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   125e6:	79fb      	ldrb	r3, [r7, #7]
   125e8:	683a      	ldr	r2, [r7, #0]
   125ea:	4619      	mov	r1, r3
   125ec:	4806      	ldr	r0, [pc, #24]	; (12608 <_gpio_set_level+0x38>)
   125ee:	4b07      	ldr	r3, [pc, #28]	; (1260c <_gpio_set_level+0x3c>)
   125f0:	4798      	blx	r3
}
   125f2:	e005      	b.n	12600 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   125f4:	79fb      	ldrb	r3, [r7, #7]
   125f6:	683a      	ldr	r2, [r7, #0]
   125f8:	4619      	mov	r1, r3
   125fa:	4803      	ldr	r0, [pc, #12]	; (12608 <_gpio_set_level+0x38>)
   125fc:	4b04      	ldr	r3, [pc, #16]	; (12610 <_gpio_set_level+0x40>)
   125fe:	4798      	blx	r3
}
   12600:	bf00      	nop
   12602:	3708      	adds	r7, #8
   12604:	46bd      	mov	sp, r7
   12606:	bd80      	pop	{r7, pc}
   12608:	41008000 	.word	0x41008000
   1260c:	00012585 	.word	0x00012585
   12610:	000125ab 	.word	0x000125ab

00012614 <gpio_set_pin_level>:
{
   12614:	b580      	push	{r7, lr}
   12616:	b082      	sub	sp, #8
   12618:	af00      	add	r7, sp, #0
   1261a:	4603      	mov	r3, r0
   1261c:	460a      	mov	r2, r1
   1261e:	71fb      	strb	r3, [r7, #7]
   12620:	4613      	mov	r3, r2
   12622:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   12624:	79fb      	ldrb	r3, [r7, #7]
   12626:	115b      	asrs	r3, r3, #5
   12628:	b2d8      	uxtb	r0, r3
   1262a:	79fb      	ldrb	r3, [r7, #7]
   1262c:	f003 031f 	and.w	r3, r3, #31
   12630:	2201      	movs	r2, #1
   12632:	fa02 f303 	lsl.w	r3, r2, r3
   12636:	79ba      	ldrb	r2, [r7, #6]
   12638:	4619      	mov	r1, r3
   1263a:	4b03      	ldr	r3, [pc, #12]	; (12648 <gpio_set_pin_level+0x34>)
   1263c:	4798      	blx	r3
}
   1263e:	bf00      	nop
   12640:	3708      	adds	r7, #8
   12642:	46bd      	mov	sp, r7
   12644:	bd80      	pop	{r7, pc}
   12646:	bf00      	nop
   12648:	000125d1 	.word	0x000125d1

0001264c <_ZN6LT_SPIC1Ev>:

SPI_Asyn_Class LT_SPI::spiTemp;


// default constructor
LT_SPI::LT_SPI()
   1264c:	b480      	push	{r7}
   1264e:	b083      	sub	sp, #12
   12650:	af00      	add	r7, sp, #0
   12652:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   12654:	4a04      	ldr	r2, [pc, #16]	; (12668 <_ZN6LT_SPIC1Ev+0x1c>)
   12656:	687b      	ldr	r3, [r7, #4]
   12658:	6013      	str	r3, [r2, #0]
} //LT_SPI
   1265a:	687b      	ldr	r3, [r7, #4]
   1265c:	4618      	mov	r0, r3
   1265e:	370c      	adds	r7, #12
   12660:	46bd      	mov	sp, r7
   12662:	bc80      	pop	{r7}
   12664:	4770      	bx	lr
   12666:	bf00      	nop
   12668:	200047fc 	.word	0x200047fc

0001266c <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   1266c:	b480      	push	{r7}
   1266e:	b083      	sub	sp, #12
   12670:	af00      	add	r7, sp, #0
   12672:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   12674:	687b      	ldr	r3, [r7, #4]
   12676:	4618      	mov	r0, r3
   12678:	370c      	adds	r7, #12
   1267a:	46bd      	mov	sp, r7
   1267c:	bc80      	pop	{r7}
   1267e:	4770      	bx	lr

00012680 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint8_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   12680:	b580      	push	{r7, lr}
   12682:	b086      	sub	sp, #24
   12684:	af00      	add	r7, sp, #0
   12686:	60f8      	str	r0, [r7, #12]
   12688:	607a      	str	r2, [r7, #4]
   1268a:	603b      	str	r3, [r7, #0]
   1268c:	460b      	mov	r3, r1
   1268e:	72fb      	strb	r3, [r7, #11]
	uint8_t rOrw=*tx;
   12690:	687b      	ldr	r3, [r7, #4]
   12692:	781b      	ldrb	r3, [r3, #0]
   12694:	75bb      	strb	r3, [r7, #22]
	gpio_set_pin_level(cs_pin,false)  ;               //! 1) Pull CS low
   12696:	7afb      	ldrb	r3, [r7, #11]
   12698:	2100      	movs	r1, #0
   1269a:	4618      	mov	r0, r3
   1269c:	4b31      	ldr	r3, [pc, #196]	; (12764 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe4>)
   1269e:	4798      	blx	r3
	
	switch(rOrw){
   126a0:	7dbb      	ldrb	r3, [r7, #22]
   126a2:	2b02      	cmp	r3, #2
   126a4:	d002      	beq.n	126ac <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x2c>
   126a6:	2b03      	cmp	r3, #3
   126a8:	d010      	beq.n	126cc <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x4c>
   126aa:	e038      	b.n	1271e <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x9e>
		case WRITE_TO_RAM:
			spiTemp.write(tx,length);				//! 2) Read byte and send byte
   126ac:	f897 3020 	ldrb.w	r3, [r7, #32]
   126b0:	461a      	mov	r2, r3
   126b2:	6879      	ldr	r1, [r7, #4]
   126b4:	482c      	ldr	r0, [pc, #176]	; (12768 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   126b6:	4b2d      	ldr	r3, [pc, #180]	; (1276c <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xec>)
   126b8:	4798      	blx	r3
			while(!spiTemp.xferDone);
   126ba:	4b2b      	ldr	r3, [pc, #172]	; (12768 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   126bc:	781b      	ldrb	r3, [r3, #0]
   126be:	b2db      	uxtb	r3, r3
   126c0:	f083 0301 	eor.w	r3, r3, #1
   126c4:	b2db      	uxtb	r3, r3
   126c6:	2b00      	cmp	r3, #0
   126c8:	d042      	beq.n	12750 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xd0>
   126ca:	e7f6      	b.n	126ba <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x3a>
			break;
		case READ_FROM_RAM:
			spiTemp.write(tx,3); 
   126cc:	2203      	movs	r2, #3
   126ce:	6879      	ldr	r1, [r7, #4]
   126d0:	4825      	ldr	r0, [pc, #148]	; (12768 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   126d2:	4b26      	ldr	r3, [pc, #152]	; (1276c <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xec>)
   126d4:	4798      	blx	r3
			//while(!spiTemp.xferDone);
			if (length>4)
   126d6:	f897 3020 	ldrb.w	r3, [r7, #32]
   126da:	2b04      	cmp	r3, #4
   126dc:	dd19      	ble.n	12712 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x92>
			{
				for (uint8_t i=0;i<length;i++)
   126de:	2300      	movs	r3, #0
   126e0:	75fb      	strb	r3, [r7, #23]
   126e2:	7dfa      	ldrb	r2, [r7, #23]
   126e4:	f897 3020 	ldrb.w	r3, [r7, #32]
   126e8:	429a      	cmp	r2, r3
   126ea:	da0b      	bge.n	12704 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x84>
				{
					//spiTemp.write(tx,1); tx++;
					//while(!spiTemp.xferDone);
					spiTemp.read(rx,1); rx++;
   126ec:	2201      	movs	r2, #1
   126ee:	6839      	ldr	r1, [r7, #0]
   126f0:	481d      	ldr	r0, [pc, #116]	; (12768 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   126f2:	4b1f      	ldr	r3, [pc, #124]	; (12770 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xf0>)
   126f4:	4798      	blx	r3
   126f6:	683b      	ldr	r3, [r7, #0]
   126f8:	3301      	adds	r3, #1
   126fa:	603b      	str	r3, [r7, #0]
				for (uint8_t i=0;i<length;i++)
   126fc:	7dfb      	ldrb	r3, [r7, #23]
   126fe:	3301      	adds	r3, #1
   12700:	75fb      	strb	r3, [r7, #23]
   12702:	e7ee      	b.n	126e2 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x62>
							
				}
				rx-=length;
   12704:	f897 3020 	ldrb.w	r3, [r7, #32]
   12708:	425b      	negs	r3, r3
   1270a:	683a      	ldr	r2, [r7, #0]
   1270c:	4413      	add	r3, r2
   1270e:	603b      	str	r3, [r7, #0]
			else
			{
				spiTemp.read(rx,1);
			}
	
			break;
   12710:	e01f      	b.n	12752 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xd2>
				spiTemp.read(rx,1);
   12712:	2201      	movs	r2, #1
   12714:	6839      	ldr	r1, [r7, #0]
   12716:	4814      	ldr	r0, [pc, #80]	; (12768 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   12718:	4b15      	ldr	r3, [pc, #84]	; (12770 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xf0>)
   1271a:	4798      	blx	r3
			break;
   1271c:	e019      	b.n	12752 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xd2>
		default:
			spiTemp.write(tx,length);             //! 2) Read byte and send byte
   1271e:	f897 3020 	ldrb.w	r3, [r7, #32]
   12722:	461a      	mov	r2, r3
   12724:	6879      	ldr	r1, [r7, #4]
   12726:	4810      	ldr	r0, [pc, #64]	; (12768 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   12728:	4b10      	ldr	r3, [pc, #64]	; (1276c <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xec>)
   1272a:	4798      	blx	r3
			while(!spiTemp.xferDone);
   1272c:	4b0e      	ldr	r3, [pc, #56]	; (12768 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   1272e:	781b      	ldrb	r3, [r3, #0]
   12730:	b2db      	uxtb	r3, r3
   12732:	f083 0301 	eor.w	r3, r3, #1
   12736:	b2db      	uxtb	r3, r3
   12738:	2b00      	cmp	r3, #0
   1273a:	d000      	beq.n	1273e <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xbe>
   1273c:	e7f6      	b.n	1272c <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xac>
			spiTemp.read(rx,length-3);
   1273e:	f897 3020 	ldrb.w	r3, [r7, #32]
   12742:	3b03      	subs	r3, #3
   12744:	461a      	mov	r2, r3
   12746:	6839      	ldr	r1, [r7, #0]
   12748:	4807      	ldr	r0, [pc, #28]	; (12768 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
   1274a:	4b09      	ldr	r3, [pc, #36]	; (12770 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xf0>)
   1274c:	4798      	blx	r3
			break;
   1274e:	e000      	b.n	12752 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xd2>
			break;
   12750:	bf00      	nop


	


	gpio_set_pin_level(cs_pin,true)   ;              //! 3) Pull CS high
   12752:	7afb      	ldrb	r3, [r7, #11]
   12754:	2101      	movs	r1, #1
   12756:	4618      	mov	r0, r3
   12758:	4b02      	ldr	r3, [pc, #8]	; (12764 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe4>)
   1275a:	4798      	blx	r3
}
   1275c:	bf00      	nop
   1275e:	3718      	adds	r7, #24
   12760:	46bd      	mov	sp, r7
   12762:	bd80      	pop	{r7, pc}
   12764:	00012615 	.word	0x00012615
   12768:	20004800 	.word	0x20004800
   1276c:	00012805 	.word	0x00012805
   12770:	00012849 	.word	0x00012849

00012774 <_Z41__static_initialization_and_destruction_0ii>:
{
	uint8_t rx;
	spiTemp.read(&rx,1);
	return	(int8_t)rx;

}
   12774:	b580      	push	{r7, lr}
   12776:	b082      	sub	sp, #8
   12778:	af00      	add	r7, sp, #0
   1277a:	6078      	str	r0, [r7, #4]
   1277c:	6039      	str	r1, [r7, #0]
   1277e:	687b      	ldr	r3, [r7, #4]
   12780:	2b01      	cmp	r3, #1
   12782:	d10c      	bne.n	1279e <_Z41__static_initialization_and_destruction_0ii+0x2a>
   12784:	683b      	ldr	r3, [r7, #0]
   12786:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1278a:	4293      	cmp	r3, r2
   1278c:	d107      	bne.n	1279e <_Z41__static_initialization_and_destruction_0ii+0x2a>
SPI_Asyn_Class LT_SPI::spiTemp;
   1278e:	4806      	ldr	r0, [pc, #24]	; (127a8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12790:	4b06      	ldr	r3, [pc, #24]	; (127ac <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12792:	4798      	blx	r3
   12794:	4a06      	ldr	r2, [pc, #24]	; (127b0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   12796:	4907      	ldr	r1, [pc, #28]	; (127b4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12798:	4803      	ldr	r0, [pc, #12]	; (127a8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1279a:	4b07      	ldr	r3, [pc, #28]	; (127b8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1279c:	4798      	blx	r3
}
   1279e:	bf00      	nop
   127a0:	3708      	adds	r7, #8
   127a2:	46bd      	mov	sp, r7
   127a4:	bd80      	pop	{r7, pc}
   127a6:	bf00      	nop
   127a8:	20004800 	.word	0x20004800
   127ac:	000127d1 	.word	0x000127d1
   127b0:	20000000 	.word	0x20000000
   127b4:	000127f1 	.word	0x000127f1
   127b8:	000159a5 	.word	0x000159a5

000127bc <_GLOBAL__sub_I_ptrLTSPIClass>:
   127bc:	b580      	push	{r7, lr}
   127be:	af00      	add	r7, sp, #0
   127c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   127c4:	2001      	movs	r0, #1
   127c6:	4b01      	ldr	r3, [pc, #4]	; (127cc <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   127c8:	4798      	blx	r3
   127ca:	bd80      	pop	{r7, pc}
   127cc:	00012775 	.word	0x00012775

000127d0 <_ZN14SPI_Asyn_ClassC1Ev>:
SPI_Asyn_Class::SPI_Asyn_Class(spi_m_async_descriptor *spi)
{
	SPIA=spi;
	ptrSPIAClass=this;
} //SPI_Asyn_Class
SPI_Asyn_Class::SPI_Asyn_Class()
   127d0:	b480      	push	{r7}
   127d2:	b083      	sub	sp, #12
   127d4:	af00      	add	r7, sp, #0
   127d6:	6078      	str	r0, [r7, #4]
{
	ptrSPIAClass=this;
   127d8:	4a04      	ldr	r2, [pc, #16]	; (127ec <_ZN14SPI_Asyn_ClassC1Ev+0x1c>)
   127da:	687b      	ldr	r3, [r7, #4]
   127dc:	6013      	str	r3, [r2, #0]
} //SPI_Asyn_Class
   127de:	687b      	ldr	r3, [r7, #4]
   127e0:	4618      	mov	r0, r3
   127e2:	370c      	adds	r7, #12
   127e4:	46bd      	mov	sp, r7
   127e6:	bc80      	pop	{r7}
   127e8:	4770      	bx	lr
   127ea:	bf00      	nop
   127ec:	20004820 	.word	0x20004820

000127f0 <_ZN14SPI_Asyn_ClassD1Ev>:

// default destructor
SPI_Asyn_Class::~SPI_Asyn_Class()
   127f0:	b480      	push	{r7}
   127f2:	b083      	sub	sp, #12
   127f4:	af00      	add	r7, sp, #0
   127f6:	6078      	str	r0, [r7, #4]
{
} //~SPI_Asyn_Class
   127f8:	687b      	ldr	r3, [r7, #4]
   127fa:	4618      	mov	r0, r3
   127fc:	370c      	adds	r7, #12
   127fe:	46bd      	mov	sp, r7
   12800:	bc80      	pop	{r7}
   12802:	4770      	bx	lr

00012804 <_ZN14SPI_Asyn_Class5writeEPKhl>:
	xferDone=true;

	return 0;
}

int32_t  SPI_Asyn_Class::write(const uint8_t * p, int32_t n){
   12804:	b580      	push	{r7, lr}
   12806:	b086      	sub	sp, #24
   12808:	af00      	add	r7, sp, #0
   1280a:	60f8      	str	r0, [r7, #12]
   1280c:	60b9      	str	r1, [r7, #8]
   1280e:	607a      	str	r2, [r7, #4]

	while(!xferDone);
   12810:	68fb      	ldr	r3, [r7, #12]
   12812:	781b      	ldrb	r3, [r3, #0]
   12814:	b2db      	uxtb	r3, r3
   12816:	f083 0301 	eor.w	r3, r3, #1
   1281a:	b2db      	uxtb	r3, r3
   1281c:	2b00      	cmp	r3, #0
   1281e:	d000      	beq.n	12822 <_ZN14SPI_Asyn_Class5writeEPKhl+0x1e>
   12820:	e7f6      	b.n	12810 <_ZN14SPI_Asyn_Class5writeEPKhl+0xc>
	xferDone=false;
   12822:	68fb      	ldr	r3, [r7, #12]
   12824:	2200      	movs	r2, #0
   12826:	701a      	strb	r2, [r3, #0]
	int32_t w= io_write(spio,p,(uint16_t)n);
   12828:	68fb      	ldr	r3, [r7, #12]
   1282a:	691b      	ldr	r3, [r3, #16]
   1282c:	687a      	ldr	r2, [r7, #4]
   1282e:	b292      	uxth	r2, r2
   12830:	68b9      	ldr	r1, [r7, #8]
   12832:	4618      	mov	r0, r3
   12834:	4b03      	ldr	r3, [pc, #12]	; (12844 <_ZN14SPI_Asyn_Class5writeEPKhl+0x40>)
   12836:	4798      	blx	r3
   12838:	6178      	str	r0, [r7, #20]
	 return w;
   1283a:	697b      	ldr	r3, [r7, #20]
	
}
   1283c:	4618      	mov	r0, r3
   1283e:	3718      	adds	r7, #24
   12840:	46bd      	mov	sp, r7
   12842:	bd80      	pop	{r7, pc}
   12844:	00015905 	.word	0x00015905

00012848 <_ZN14SPI_Asyn_Class4readEPhl>:
int32_t  SPI_Asyn_Class::read(uint8_t * p, int32_t n){
   12848:	b580      	push	{r7, lr}
   1284a:	b086      	sub	sp, #24
   1284c:	af00      	add	r7, sp, #0
   1284e:	60f8      	str	r0, [r7, #12]
   12850:	60b9      	str	r1, [r7, #8]
   12852:	607a      	str	r2, [r7, #4]
	while(!xferDone);
   12854:	68fb      	ldr	r3, [r7, #12]
   12856:	781b      	ldrb	r3, [r3, #0]
   12858:	b2db      	uxtb	r3, r3
   1285a:	f083 0301 	eor.w	r3, r3, #1
   1285e:	b2db      	uxtb	r3, r3
   12860:	2b00      	cmp	r3, #0
   12862:	d000      	beq.n	12866 <_ZN14SPI_Asyn_Class4readEPhl+0x1e>
   12864:	e7f6      	b.n	12854 <_ZN14SPI_Asyn_Class4readEPhl+0xc>
	xferDone=false;
   12866:	68fb      	ldr	r3, [r7, #12]
   12868:	2200      	movs	r2, #0
   1286a:	701a      	strb	r2, [r3, #0]
	int32_t r=io_read(spio,p,(uint16_t)n);
   1286c:	68fb      	ldr	r3, [r7, #12]
   1286e:	691b      	ldr	r3, [r3, #16]
   12870:	687a      	ldr	r2, [r7, #4]
   12872:	b292      	uxth	r2, r2
   12874:	68b9      	ldr	r1, [r7, #8]
   12876:	4618      	mov	r0, r3
   12878:	4b08      	ldr	r3, [pc, #32]	; (1289c <_ZN14SPI_Asyn_Class4readEPhl+0x54>)
   1287a:	4798      	blx	r3
   1287c:	6178      	str	r0, [r7, #20]
	while((!xferDone));
   1287e:	68fb      	ldr	r3, [r7, #12]
   12880:	781b      	ldrb	r3, [r3, #0]
   12882:	b2db      	uxtb	r3, r3
   12884:	f083 0301 	eor.w	r3, r3, #1
   12888:	b2db      	uxtb	r3, r3
   1288a:	2b00      	cmp	r3, #0
   1288c:	d000      	beq.n	12890 <_ZN14SPI_Asyn_Class4readEPhl+0x48>
   1288e:	e7f6      	b.n	1287e <_ZN14SPI_Asyn_Class4readEPhl+0x36>
	return  r;
   12890:	697b      	ldr	r3, [r7, #20]
}
   12892:	4618      	mov	r0, r3
   12894:	3718      	adds	r7, #24
   12896:	46bd      	mov	sp, r7
   12898:	bd80      	pop	{r7, pc}
   1289a:	bf00      	nop
   1289c:	00015955 	.word	0x00015955

000128a0 <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   128a0:	b480      	push	{r7}
   128a2:	b083      	sub	sp, #12
   128a4:	af00      	add	r7, sp, #0
   128a6:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   128a8:	4a04      	ldr	r2, [pc, #16]	; (128bc <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   128ae:	687b      	ldr	r3, [r7, #4]
   128b0:	4618      	mov	r0, r3
   128b2:	370c      	adds	r7, #12
   128b4:	46bd      	mov	sp, r7
   128b6:	bc80      	pop	{r7}
   128b8:	4770      	bx	lr
   128ba:	bf00      	nop
   128bc:	20004824 	.word	0x20004824

000128c0 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   128c0:	b480      	push	{r7}
   128c2:	b083      	sub	sp, #12
   128c4:	af00      	add	r7, sp, #0
   128c6:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   128c8:	687b      	ldr	r3, [r7, #4]
   128ca:	4618      	mov	r0, r3
   128cc:	370c      	adds	r7, #12
   128ce:	46bd      	mov	sp, r7
   128d0:	bc80      	pop	{r7}
   128d2:	4770      	bx	lr

000128d4 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   128d4:	b580      	push	{r7, lr}
   128d6:	b082      	sub	sp, #8
   128d8:	af00      	add	r7, sp, #0
   128da:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   128dc:	687b      	ldr	r3, [r7, #4]
   128de:	685a      	ldr	r2, [r3, #4]
   128e0:	687b      	ldr	r3, [r7, #4]
   128e2:	3308      	adds	r3, #8
   128e4:	4619      	mov	r1, r3
   128e6:	4610      	mov	r0, r2
   128e8:	4b06      	ldr	r3, [pc, #24]	; (12904 <_ZN13SPI_Syn_Class4initEv+0x30>)
   128ea:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	685b      	ldr	r3, [r3, #4]
   128f0:	4618      	mov	r0, r3
   128f2:	4b05      	ldr	r3, [pc, #20]	; (12908 <_ZN13SPI_Syn_Class4initEv+0x34>)
   128f4:	4798      	blx	r3
	
	ready=true;
   128f6:	687b      	ldr	r3, [r7, #4]
   128f8:	2201      	movs	r2, #1
   128fa:	701a      	strb	r2, [r3, #0]
	
}
   128fc:	bf00      	nop
   128fe:	3708      	adds	r7, #8
   12900:	46bd      	mov	sp, r7
   12902:	bd80      	pop	{r7, pc}
   12904:	0000579d 	.word	0x0000579d
   12908:	00005611 	.word	0x00005611

0001290c <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   1290c:	b480      	push	{r7}
   1290e:	b083      	sub	sp, #12
   12910:	af00      	add	r7, sp, #0
   12912:	6078      	str	r0, [r7, #4]
   12914:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   12916:	4a05      	ldr	r2, [pc, #20]	; (1292c <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   12918:	687b      	ldr	r3, [r7, #4]
   1291a:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   1291c:	687b      	ldr	r3, [r7, #4]
   1291e:	683a      	ldr	r2, [r7, #0]
   12920:	605a      	str	r2, [r3, #4]
}
   12922:	bf00      	nop
   12924:	370c      	adds	r7, #12
   12926:	46bd      	mov	sp, r7
   12928:	bc80      	pop	{r7}
   1292a:	4770      	bx	lr
   1292c:	20004824 	.word	0x20004824

00012930 <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
   12930:	b580      	push	{r7, lr}
   12932:	b082      	sub	sp, #8
   12934:	af00      	add	r7, sp, #0
   12936:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   12938:	687b      	ldr	r3, [r7, #4]
   1293a:	685a      	ldr	r2, [r3, #4]
   1293c:	687b      	ldr	r3, [r7, #4]
   1293e:	3308      	adds	r3, #8
   12940:	4619      	mov	r1, r3
   12942:	4610      	mov	r0, r2
   12944:	4b07      	ldr	r3, [pc, #28]	; (12964 <_ZN13SPI_Syn_Class6enableEv+0x34>)
   12946:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   12948:	687b      	ldr	r3, [r7, #4]
   1294a:	685b      	ldr	r3, [r3, #4]
   1294c:	4618      	mov	r0, r3
   1294e:	4b06      	ldr	r3, [pc, #24]	; (12968 <_ZN13SPI_Syn_Class6enableEv+0x38>)
   12950:	4798      	blx	r3
	ready=true;
   12952:	687b      	ldr	r3, [r7, #4]
   12954:	2201      	movs	r2, #1
   12956:	701a      	strb	r2, [r3, #0]
	return 0;
   12958:	2300      	movs	r3, #0
}
   1295a:	4618      	mov	r0, r3
   1295c:	3708      	adds	r7, #8
   1295e:	46bd      	mov	sp, r7
   12960:	bd80      	pop	{r7, pc}
   12962:	bf00      	nop
   12964:	0000579d 	.word	0x0000579d
   12968:	00005611 	.word	0x00005611

0001296c <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
   1296c:	b580      	push	{r7, lr}
   1296e:	b086      	sub	sp, #24
   12970:	af00      	add	r7, sp, #0
   12972:	60f8      	str	r0, [r7, #12]
   12974:	60b9      	str	r1, [r7, #8]
   12976:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   12978:	68fb      	ldr	r3, [r7, #12]
   1297a:	2201      	movs	r2, #1
   1297c:	741a      	strb	r2, [r3, #16]
	w= io_write(spio,p,(uint16_t)n);
   1297e:	68fb      	ldr	r3, [r7, #12]
   12980:	689b      	ldr	r3, [r3, #8]
   12982:	687a      	ldr	r2, [r7, #4]
   12984:	b292      	uxth	r2, r2
   12986:	68b9      	ldr	r1, [r7, #8]
   12988:	4618      	mov	r0, r3
   1298a:	4b08      	ldr	r3, [pc, #32]	; (129ac <_ZN13SPI_Syn_Class5writeEPKhl+0x40>)
   1298c:	4798      	blx	r3
   1298e:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   12990:	697b      	ldr	r3, [r7, #20]
   12992:	2b00      	cmp	r3, #0
   12994:	bf14      	ite	ne
   12996:	2301      	movne	r3, #1
   12998:	2300      	moveq	r3, #0
   1299a:	b2da      	uxtb	r2, r3
   1299c:	68fb      	ldr	r3, [r7, #12]
   1299e:	741a      	strb	r2, [r3, #16]
	 return w;
   129a0:	697b      	ldr	r3, [r7, #20]
	
}
   129a2:	4618      	mov	r0, r3
   129a4:	3718      	adds	r7, #24
   129a6:	46bd      	mov	sp, r7
   129a8:	bd80      	pop	{r7, pc}
   129aa:	bf00      	nop
   129ac:	00015905 	.word	0x00015905

000129b0 <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
   129b0:	b580      	push	{r7, lr}
   129b2:	b086      	sub	sp, #24
   129b4:	af00      	add	r7, sp, #0
   129b6:	60f8      	str	r0, [r7, #12]
   129b8:	60b9      	str	r1, [r7, #8]
   129ba:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   129bc:	68fb      	ldr	r3, [r7, #12]
   129be:	2201      	movs	r2, #1
   129c0:	745a      	strb	r2, [r3, #17]
	r=io_read(spio,p,(uint16_t)n);
   129c2:	68fb      	ldr	r3, [r7, #12]
   129c4:	689b      	ldr	r3, [r3, #8]
   129c6:	687a      	ldr	r2, [r7, #4]
   129c8:	b292      	uxth	r2, r2
   129ca:	68b9      	ldr	r1, [r7, #8]
   129cc:	4618      	mov	r0, r3
   129ce:	4b08      	ldr	r3, [pc, #32]	; (129f0 <_ZN13SPI_Syn_Class4readEPhl+0x40>)
   129d0:	4798      	blx	r3
   129d2:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   129d4:	697b      	ldr	r3, [r7, #20]
   129d6:	2b00      	cmp	r3, #0
   129d8:	bf14      	ite	ne
   129da:	2301      	movne	r3, #1
   129dc:	2300      	moveq	r3, #0
   129de:	b2da      	uxtb	r2, r3
   129e0:	68fb      	ldr	r3, [r7, #12]
   129e2:	745a      	strb	r2, [r3, #17]
	return  r;
   129e4:	697b      	ldr	r3, [r7, #20]
}
   129e6:	4618      	mov	r0, r3
   129e8:	3718      	adds	r7, #24
   129ea:	46bd      	mov	sp, r7
   129ec:	bd80      	pop	{r7, pc}
   129ee:	bf00      	nop
   129f0:	00015955 	.word	0x00015955

000129f4 <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
   129f4:	b580      	push	{r7, lr}
   129f6:	b082      	sub	sp, #8
   129f8:	af00      	add	r7, sp, #0
   129fa:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   129fc:	687b      	ldr	r3, [r7, #4]
   129fe:	685b      	ldr	r3, [r3, #4]
   12a00:	4618      	mov	r0, r3
   12a02:	4b03      	ldr	r3, [pc, #12]	; (12a10 <_ZN13SPI_Syn_Class7disableEv+0x1c>)
   12a04:	4798      	blx	r3
	
}
   12a06:	bf00      	nop
   12a08:	3708      	adds	r7, #8
   12a0a:	46bd      	mov	sp, r7
   12a0c:	bd80      	pop	{r7, pc}
   12a0e:	bf00      	nop
   12a10:	0000564d 	.word	0x0000564d

00012a14 <_ZN13SPI_Syn_Class10isSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::isSPIReady(void){
   12a14:	b480      	push	{r7}
   12a16:	b083      	sub	sp, #12
   12a18:	af00      	add	r7, sp, #0
   12a1a:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
   12a1c:	687b      	ldr	r3, [r7, #4]
   12a1e:	7c5b      	ldrb	r3, [r3, #17]
   12a20:	b2db      	uxtb	r3, r3
   12a22:	2b00      	cmp	r3, #0
   12a24:	d103      	bne.n	12a2e <_ZN13SPI_Syn_Class10isSPIReadyEv+0x1a>
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	7c1b      	ldrb	r3, [r3, #16]
   12a2a:	b2db      	uxtb	r3, r3
   12a2c:	2b00      	cmp	r3, #0
   12a2e:	687b      	ldr	r3, [r7, #4]
   12a30:	2201      	movs	r2, #1
   12a32:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
   12a34:	687b      	ldr	r3, [r7, #4]
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	b2db      	uxtb	r3, r3
   12a3a:	2b00      	cmp	r3, #0
   12a3c:	d001      	beq.n	12a42 <_ZN13SPI_Syn_Class10isSPIReadyEv+0x2e>
	{
		
		return true;
   12a3e:	2301      	movs	r3, #1
   12a40:	e000      	b.n	12a44 <_ZN13SPI_Syn_Class10isSPIReadyEv+0x30>
	} 
	else
	{
		return false;
   12a42:	2300      	movs	r3, #0
	}
	return ready;
	
}
   12a44:	4618      	mov	r0, r3
   12a46:	370c      	adds	r7, #12
   12a48:	46bd      	mov	sp, r7
   12a4a:	bc80      	pop	{r7}
   12a4c:	4770      	bx	lr
	...

00012a50 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
   12a50:	b580      	push	{r7, lr}
   12a52:	b082      	sub	sp, #8
   12a54:	af00      	add	r7, sp, #0
   12a56:	6078      	str	r0, [r7, #4]
   12a58:	6039      	str	r1, [r7, #0]
   12a5a:	687b      	ldr	r3, [r7, #4]
   12a5c:	3304      	adds	r3, #4
   12a5e:	4618      	mov	r0, r3
   12a60:	4b06      	ldr	r3, [pc, #24]	; (12a7c <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
   12a62:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
   12a64:	687b      	ldr	r3, [r7, #4]
   12a66:	683a      	ldr	r2, [r7, #0]
   12a68:	635a      	str	r2, [r3, #52]	; 0x34
	ptrAT24MACClass=this;
   12a6a:	4a05      	ldr	r2, [pc, #20]	; (12a80 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
   12a6c:	687b      	ldr	r3, [r7, #4]
   12a6e:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
   12a70:	687b      	ldr	r3, [r7, #4]
   12a72:	4618      	mov	r0, r3
   12a74:	3708      	adds	r7, #8
   12a76:	46bd      	mov	sp, r7
   12a78:	bd80      	pop	{r7, pc}
   12a7a:	bf00      	nop
   12a7c:	0001544d 	.word	0x0001544d
   12a80:	20004828 	.word	0x20004828

00012a84 <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
   12a84:	b580      	push	{r7, lr}
   12a86:	b082      	sub	sp, #8
   12a88:	af00      	add	r7, sp, #0
   12a8a:	6078      	str	r0, [r7, #4]
   12a8c:	687b      	ldr	r3, [r7, #4]
   12a8e:	3304      	adds	r3, #4
   12a90:	4618      	mov	r0, r3
   12a92:	4b03      	ldr	r3, [pc, #12]	; (12aa0 <_ZN13AT24MAC_ClassD1Ev+0x1c>)
   12a94:	4798      	blx	r3
{
} //~AT24MAC_Class
   12a96:	687b      	ldr	r3, [r7, #4]
   12a98:	4618      	mov	r0, r3
   12a9a:	3708      	adds	r7, #8
   12a9c:	46bd      	mov	sp, r7
   12a9e:	bd80      	pop	{r7, pc}
   12aa0:	00015485 	.word	0x00015485

00012aa4 <_ZN13AT24MAC_Class4InitEv>:


bool AT24MAC_Class::Init(void){
   12aa4:	b580      	push	{r7, lr}
   12aa6:	b082      	sub	sp, #8
   12aa8:	af00      	add	r7, sp, #0
   12aaa:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
   12aac:	2156      	movs	r1, #86	; 0x56
   12aae:	6878      	ldr	r0, [r7, #4]
   12ab0:	4b04      	ldr	r3, [pc, #16]	; (12ac4 <_ZN13AT24MAC_Class4InitEv+0x20>)
   12ab2:	4798      	blx	r3
	return SelfTest();
   12ab4:	6878      	ldr	r0, [r7, #4]
   12ab6:	4b04      	ldr	r3, [pc, #16]	; (12ac8 <_ZN13AT24MAC_Class4InitEv+0x24>)
   12ab8:	4798      	blx	r3
   12aba:	4603      	mov	r3, r0
}
   12abc:	4618      	mov	r0, r3
   12abe:	3708      	adds	r7, #8
   12ac0:	46bd      	mov	sp, r7
   12ac2:	bd80      	pop	{r7, pc}
   12ac4:	00012acd 	.word	0x00012acd
   12ac8:	00012db1 	.word	0x00012db1

00012acc <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
   12acc:	b580      	push	{r7, lr}
   12ace:	b082      	sub	sp, #8
   12ad0:	af00      	add	r7, sp, #0
   12ad2:	6078      	str	r0, [r7, #4]
   12ad4:	460b      	mov	r3, r1
   12ad6:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   12ad8:	687b      	ldr	r3, [r7, #4]
   12ada:	78fa      	ldrb	r2, [r7, #3]
   12adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	i2ca.Set_descriptor(ptrI2CDescr);
   12ae0:	687b      	ldr	r3, [r7, #4]
   12ae2:	1d1a      	adds	r2, r3, #4
   12ae4:	687b      	ldr	r3, [r7, #4]
   12ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12ae8:	4619      	mov	r1, r3
   12aea:	4610      	mov	r0, r2
   12aec:	4b0a      	ldr	r3, [pc, #40]	; (12b18 <_ZN13AT24MAC_Class4InitEh+0x4c>)
   12aee:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
   12af0:	687b      	ldr	r3, [r7, #4]
   12af2:	3304      	adds	r3, #4
   12af4:	78fa      	ldrb	r2, [r7, #3]
   12af6:	4611      	mov	r1, r2
   12af8:	4618      	mov	r0, r3
   12afa:	4b08      	ldr	r3, [pc, #32]	; (12b1c <_ZN13AT24MAC_Class4InitEh+0x50>)
   12afc:	4798      	blx	r3
   12afe:	4603      	mov	r3, r0
   12b00:	2b00      	cmp	r3, #0
   12b02:	bf0c      	ite	eq
   12b04:	2301      	moveq	r3, #1
   12b06:	2300      	movne	r3, #0
   12b08:	b2da      	uxtb	r2, r3
   12b0a:	687b      	ldr	r3, [r7, #4]
   12b0c:	701a      	strb	r2, [r3, #0]
}
   12b0e:	bf00      	nop
   12b10:	3708      	adds	r7, #8
   12b12:	46bd      	mov	sp, r7
   12b14:	bd80      	pop	{r7, pc}
   12b16:	bf00      	nop
   12b18:	000154a5 	.word	0x000154a5
   12b1c:	0001557d 	.word	0x0001557d

00012b20 <_ZN13AT24MAC_Class10Write_byteEhh>:


int32_t AT24MAC_Class::Write_byte(uint8_t addr, uint8_t value){
   12b20:	b580      	push	{r7, lr}
   12b22:	b084      	sub	sp, #16
   12b24:	af00      	add	r7, sp, #0
   12b26:	6078      	str	r0, [r7, #4]
   12b28:	460b      	mov	r3, r1
   12b2a:	70fb      	strb	r3, [r7, #3]
   12b2c:	4613      	mov	r3, r2
   12b2e:	70bb      	strb	r3, [r7, #2]
	
	isReady=false;
   12b30:	687b      	ldr	r3, [r7, #4]
   12b32:	2200      	movs	r2, #0
   12b34:	701a      	strb	r2, [r3, #0]
	uint8_t array[2];
	array[0]=addr;
   12b36:	78fb      	ldrb	r3, [r7, #3]
   12b38:	723b      	strb	r3, [r7, #8]
	array[1]=value;
   12b3a:	78bb      	ldrb	r3, [r7, #2]
   12b3c:	727b      	strb	r3, [r7, #9]
	uint32_t w= i2ca.Write(array,2);
   12b3e:	687b      	ldr	r3, [r7, #4]
   12b40:	3304      	adds	r3, #4
   12b42:	f107 0108 	add.w	r1, r7, #8
   12b46:	2202      	movs	r2, #2
   12b48:	4618      	mov	r0, r3
   12b4a:	4b09      	ldr	r3, [pc, #36]	; (12b70 <_ZN13AT24MAC_Class10Write_byteEhh+0x50>)
   12b4c:	4798      	blx	r3
   12b4e:	4603      	mov	r3, r0
   12b50:	60fb      	str	r3, [r7, #12]
	while(!i2ca.txReady);
   12b52:	687b      	ldr	r3, [r7, #4]
   12b54:	7d1b      	ldrb	r3, [r3, #20]
   12b56:	b2db      	uxtb	r3, r3
   12b58:	f083 0301 	eor.w	r3, r3, #1
   12b5c:	b2db      	uxtb	r3, r3
   12b5e:	2b00      	cmp	r3, #0
   12b60:	d000      	beq.n	12b64 <_ZN13AT24MAC_Class10Write_byteEhh+0x44>
   12b62:	e7f6      	b.n	12b52 <_ZN13AT24MAC_Class10Write_byteEhh+0x32>
	return	w;
   12b64:	68fb      	ldr	r3, [r7, #12]
}
   12b66:	4618      	mov	r0, r3
   12b68:	3710      	adds	r7, #16
   12b6a:	46bd      	mov	sp, r7
   12b6c:	bd80      	pop	{r7, pc}
   12b6e:	bf00      	nop
   12b70:	000155c5 	.word	0x000155c5

00012b74 <_ZN13AT24MAC_Class12WriteAddressEPhhh>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint8_t addr, uint8_t size){
   12b74:	b580      	push	{r7, lr}
   12b76:	b086      	sub	sp, #24
   12b78:	af00      	add	r7, sp, #0
   12b7a:	60f8      	str	r0, [r7, #12]
   12b7c:	60b9      	str	r1, [r7, #8]
   12b7e:	4611      	mov	r1, r2
   12b80:	461a      	mov	r2, r3
   12b82:	460b      	mov	r3, r1
   12b84:	71fb      	strb	r3, [r7, #7]
   12b86:	4613      	mov	r3, r2
   12b88:	71bb      	strb	r3, [r7, #6]
	uint32_t w;
	for (int i = 0; i < size; i++)
   12b8a:	2300      	movs	r3, #0
   12b8c:	613b      	str	r3, [r7, #16]
   12b8e:	79ba      	ldrb	r2, [r7, #6]
   12b90:	693b      	ldr	r3, [r7, #16]
   12b92:	429a      	cmp	r2, r3
   12b94:	dd2a      	ble.n	12bec <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x78>
	{
		while(!IsReady());
   12b96:	68f8      	ldr	r0, [r7, #12]
   12b98:	4b17      	ldr	r3, [pc, #92]	; (12bf8 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x84>)
   12b9a:	4798      	blx	r3
   12b9c:	4603      	mov	r3, r0
   12b9e:	f083 0301 	eor.w	r3, r3, #1
   12ba2:	b2db      	uxtb	r3, r3
   12ba4:	2b00      	cmp	r3, #0
   12ba6:	d000      	beq.n	12baa <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x36>
   12ba8:	e7f5      	b.n	12b96 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x22>
		w=Write_byte(addr+i,*p);
   12baa:	693b      	ldr	r3, [r7, #16]
   12bac:	b2da      	uxtb	r2, r3
   12bae:	79fb      	ldrb	r3, [r7, #7]
   12bb0:	4413      	add	r3, r2
   12bb2:	b2d9      	uxtb	r1, r3
   12bb4:	68bb      	ldr	r3, [r7, #8]
   12bb6:	781b      	ldrb	r3, [r3, #0]
   12bb8:	461a      	mov	r2, r3
   12bba:	68f8      	ldr	r0, [r7, #12]
   12bbc:	4b0f      	ldr	r3, [pc, #60]	; (12bfc <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x88>)
   12bbe:	4798      	blx	r3
   12bc0:	4603      	mov	r3, r0
   12bc2:	617b      	str	r3, [r7, #20]
		p++;
   12bc4:	68bb      	ldr	r3, [r7, #8]
   12bc6:	3301      	adds	r3, #1
   12bc8:	60bb      	str	r3, [r7, #8]
		delay_ms(2);
   12bca:	2002      	movs	r0, #2
   12bcc:	4b0c      	ldr	r3, [pc, #48]	; (12c00 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x8c>)
   12bce:	4798      	blx	r3
		while(!AcknolledgePolling());
   12bd0:	68f8      	ldr	r0, [r7, #12]
   12bd2:	4b0c      	ldr	r3, [pc, #48]	; (12c04 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x90>)
   12bd4:	4798      	blx	r3
   12bd6:	4603      	mov	r3, r0
   12bd8:	f083 0301 	eor.w	r3, r3, #1
   12bdc:	b2db      	uxtb	r3, r3
   12bde:	2b00      	cmp	r3, #0
   12be0:	d000      	beq.n	12be4 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x70>
   12be2:	e7f5      	b.n	12bd0 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x5c>
	for (int i = 0; i < size; i++)
   12be4:	693b      	ldr	r3, [r7, #16]
   12be6:	3301      	adds	r3, #1
   12be8:	613b      	str	r3, [r7, #16]
   12bea:	e7d0      	b.n	12b8e <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x1a>
// 		array[i]=value;
// 		p++;
// 	}
// 	w= i2ca.Write(array,1+size);
// 	while(!i2ca.txReady);
	return	w;
   12bec:	697b      	ldr	r3, [r7, #20]
}
   12bee:	4618      	mov	r0, r3
   12bf0:	3718      	adds	r7, #24
   12bf2:	46bd      	mov	sp, r7
   12bf4:	bd80      	pop	{r7, pc}
   12bf6:	bf00      	nop
   12bf8:	00012ea9 	.word	0x00012ea9
   12bfc:	00012b21 	.word	0x00012b21
   12c00:	00004a65 	.word	0x00004a65
   12c04:	00012d79 	.word	0x00012d79

00012c08 <_ZN13AT24MAC_Class12WriteAddressEPhth>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint16_t addr, uint8_t size){
   12c08:	b590      	push	{r4, r7, lr}
   12c0a:	b087      	sub	sp, #28
   12c0c:	af00      	add	r7, sp, #0
   12c0e:	60f8      	str	r0, [r7, #12]
   12c10:	60b9      	str	r1, [r7, #8]
   12c12:	4611      	mov	r1, r2
   12c14:	461a      	mov	r2, r3
   12c16:	460b      	mov	r3, r1
   12c18:	80fb      	strh	r3, [r7, #6]
   12c1a:	4613      	mov	r3, r2
   12c1c:	717b      	strb	r3, [r7, #5]
	

	uint8_t add=(uint8_t)(0xff&addr);
   12c1e:	88fb      	ldrh	r3, [r7, #6]
   12c20:	75fb      	strb	r3, [r7, #23]
	return	WriteAddress(p,add,size);
   12c22:	797b      	ldrb	r3, [r7, #5]
   12c24:	7dfa      	ldrb	r2, [r7, #23]
   12c26:	68b9      	ldr	r1, [r7, #8]
   12c28:	68f8      	ldr	r0, [r7, #12]
   12c2a:	4c03      	ldr	r4, [pc, #12]	; (12c38 <_ZN13AT24MAC_Class12WriteAddressEPhth+0x30>)
   12c2c:	47a0      	blx	r4
   12c2e:	4603      	mov	r3, r0
}
   12c30:	4618      	mov	r0, r3
   12c32:	371c      	adds	r7, #28
   12c34:	46bd      	mov	sp, r7
   12c36:	bd90      	pop	{r4, r7, pc}
   12c38:	00012b75 	.word	0x00012b75

00012c3c <_ZN13AT24MAC_Class9Read_byteEh>:
	}
	//uint8_t cmd=(uint8_t)AT24MAC_WRITE_CMD;
	return i2ca.Write(frame,17);
}

uint8_t AT24MAC_Class::Read_byte(uint8_t addr){
   12c3c:	b580      	push	{r7, lr}
   12c3e:	b084      	sub	sp, #16
   12c40:	af00      	add	r7, sp, #0
   12c42:	6078      	str	r0, [r7, #4]
   12c44:	460b      	mov	r3, r1
   12c46:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
   12c48:	687b      	ldr	r3, [r7, #4]
   12c4a:	3304      	adds	r3, #4
   12c4c:	1cf9      	adds	r1, r7, #3
   12c4e:	2201      	movs	r2, #1
   12c50:	4618      	mov	r0, r3
   12c52:	4b10      	ldr	r3, [pc, #64]	; (12c94 <_ZN13AT24MAC_Class9Read_byteEh+0x58>)
   12c54:	4798      	blx	r3
	while(!i2ca.txReady);
   12c56:	687b      	ldr	r3, [r7, #4]
   12c58:	7d1b      	ldrb	r3, [r3, #20]
   12c5a:	b2db      	uxtb	r3, r3
   12c5c:	f083 0301 	eor.w	r3, r3, #1
   12c60:	b2db      	uxtb	r3, r3
   12c62:	2b00      	cmp	r3, #0
   12c64:	d000      	beq.n	12c68 <_ZN13AT24MAC_Class9Read_byteEh+0x2c>
   12c66:	e7f6      	b.n	12c56 <_ZN13AT24MAC_Class9Read_byteEh+0x1a>
	i2ca.Read(&value,1);
   12c68:	687b      	ldr	r3, [r7, #4]
   12c6a:	3304      	adds	r3, #4
   12c6c:	f107 010f 	add.w	r1, r7, #15
   12c70:	2201      	movs	r2, #1
   12c72:	4618      	mov	r0, r3
   12c74:	4b08      	ldr	r3, [pc, #32]	; (12c98 <_ZN13AT24MAC_Class9Read_byteEh+0x5c>)
   12c76:	4798      	blx	r3
	while(!i2ca.rxReady);
   12c78:	687b      	ldr	r3, [r7, #4]
   12c7a:	7d5b      	ldrb	r3, [r3, #21]
   12c7c:	b2db      	uxtb	r3, r3
   12c7e:	f083 0301 	eor.w	r3, r3, #1
   12c82:	b2db      	uxtb	r3, r3
   12c84:	2b00      	cmp	r3, #0
   12c86:	d000      	beq.n	12c8a <_ZN13AT24MAC_Class9Read_byteEh+0x4e>
   12c88:	e7f6      	b.n	12c78 <_ZN13AT24MAC_Class9Read_byteEh+0x3c>
	return value;
   12c8a:	7bfb      	ldrb	r3, [r7, #15]
}
   12c8c:	4618      	mov	r0, r3
   12c8e:	3710      	adds	r7, #16
   12c90:	46bd      	mov	sp, r7
   12c92:	bd80      	pop	{r7, pc}
   12c94:	000155c5 	.word	0x000155c5
   12c98:	00015609 	.word	0x00015609

00012c9c <_ZN13AT24MAC_Class11ReadAddressEPhhh>:

uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint8_t addr, uint8_t size){
   12c9c:	b580      	push	{r7, lr}
   12c9e:	b086      	sub	sp, #24
   12ca0:	af00      	add	r7, sp, #0
   12ca2:	60f8      	str	r0, [r7, #12]
   12ca4:	60b9      	str	r1, [r7, #8]
   12ca6:	4611      	mov	r1, r2
   12ca8:	461a      	mov	r2, r3
   12caa:	460b      	mov	r3, r1
   12cac:	71fb      	strb	r3, [r7, #7]
   12cae:	4613      	mov	r3, r2
   12cb0:	71bb      	strb	r3, [r7, #6]
	
	uint32_t r;
	uint8_t	value;
	i2ca.Write(&addr,1);
   12cb2:	68fb      	ldr	r3, [r7, #12]
   12cb4:	3304      	adds	r3, #4
   12cb6:	1df9      	adds	r1, r7, #7
   12cb8:	2201      	movs	r2, #1
   12cba:	4618      	mov	r0, r3
   12cbc:	4b11      	ldr	r3, [pc, #68]	; (12d04 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x68>)
   12cbe:	4798      	blx	r3
	while(!i2ca.txReady);
   12cc0:	68fb      	ldr	r3, [r7, #12]
   12cc2:	7d1b      	ldrb	r3, [r3, #20]
   12cc4:	b2db      	uxtb	r3, r3
   12cc6:	f083 0301 	eor.w	r3, r3, #1
   12cca:	b2db      	uxtb	r3, r3
   12ccc:	2b00      	cmp	r3, #0
   12cce:	d000      	beq.n	12cd2 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x36>
   12cd0:	e7f6      	b.n	12cc0 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x24>
	r= i2ca.Read(p,size);
   12cd2:	68fb      	ldr	r3, [r7, #12]
   12cd4:	3304      	adds	r3, #4
   12cd6:	79ba      	ldrb	r2, [r7, #6]
   12cd8:	b292      	uxth	r2, r2
   12cda:	68b9      	ldr	r1, [r7, #8]
   12cdc:	4618      	mov	r0, r3
   12cde:	4b0a      	ldr	r3, [pc, #40]	; (12d08 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x6c>)
   12ce0:	4798      	blx	r3
   12ce2:	4603      	mov	r3, r0
   12ce4:	617b      	str	r3, [r7, #20]
	while(!i2ca.rxReady);
   12ce6:	68fb      	ldr	r3, [r7, #12]
   12ce8:	7d5b      	ldrb	r3, [r3, #21]
   12cea:	b2db      	uxtb	r3, r3
   12cec:	f083 0301 	eor.w	r3, r3, #1
   12cf0:	b2db      	uxtb	r3, r3
   12cf2:	2b00      	cmp	r3, #0
   12cf4:	d000      	beq.n	12cf8 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x5c>
   12cf6:	e7f6      	b.n	12ce6 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x4a>
			localAddress+=localSize;
		}
	}
	*/
	
	return r;
   12cf8:	697b      	ldr	r3, [r7, #20]
}
   12cfa:	4618      	mov	r0, r3
   12cfc:	3718      	adds	r7, #24
   12cfe:	46bd      	mov	sp, r7
   12d00:	bd80      	pop	{r7, pc}
   12d02:	bf00      	nop
   12d04:	000155c5 	.word	0x000155c5
   12d08:	00015609 	.word	0x00015609

00012d0c <_ZN13AT24MAC_Class11ReadAddressEPhth>:
uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint16_t addr, uint8_t size){
   12d0c:	b590      	push	{r4, r7, lr}
   12d0e:	b087      	sub	sp, #28
   12d10:	af00      	add	r7, sp, #0
   12d12:	60f8      	str	r0, [r7, #12]
   12d14:	60b9      	str	r1, [r7, #8]
   12d16:	4611      	mov	r1, r2
   12d18:	461a      	mov	r2, r3
   12d1a:	460b      	mov	r3, r1
   12d1c:	80fb      	strh	r3, [r7, #6]
   12d1e:	4613      	mov	r3, r2
   12d20:	717b      	strb	r3, [r7, #5]
	uint8_t add=(uint8_t)(0xff&addr);
   12d22:	88fb      	ldrh	r3, [r7, #6]
   12d24:	75fb      	strb	r3, [r7, #23]
	
	return ReadAddress(p,add,size);
   12d26:	797b      	ldrb	r3, [r7, #5]
   12d28:	7dfa      	ldrb	r2, [r7, #23]
   12d2a:	68b9      	ldr	r1, [r7, #8]
   12d2c:	68f8      	ldr	r0, [r7, #12]
   12d2e:	4c03      	ldr	r4, [pc, #12]	; (12d3c <_ZN13AT24MAC_Class11ReadAddressEPhth+0x30>)
   12d30:	47a0      	blx	r4
   12d32:	4603      	mov	r3, r0
}
   12d34:	4618      	mov	r0, r3
   12d36:	371c      	adds	r7, #28
   12d38:	46bd      	mov	sp, r7
   12d3a:	bd90      	pop	{r4, r7, pc}
   12d3c:	00012c9d 	.word	0x00012c9d

00012d40 <_ZN13AT24MAC_Class14GetAcknowledgeEv>:
bool	AT24MAC_Class::GetAcknowledge(void){
   12d40:	b580      	push	{r7, lr}
   12d42:	b082      	sub	sp, #8
   12d44:	af00      	add	r7, sp, #0
   12d46:	6078      	str	r0, [r7, #4]
	byte=Read_byte(0);
   12d48:	2100      	movs	r1, #0
   12d4a:	6878      	ldr	r0, [r7, #4]
   12d4c:	4b09      	ldr	r3, [pc, #36]	; (12d74 <_ZN13AT24MAC_Class14GetAcknowledgeEv+0x34>)
   12d4e:	4798      	blx	r3
   12d50:	4603      	mov	r3, r0
   12d52:	461a      	mov	r2, r3
   12d54:	687b      	ldr	r3, [r7, #4]
   12d56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	return	byte>0;
   12d5a:	687b      	ldr	r3, [r7, #4]
   12d5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   12d60:	2b00      	cmp	r3, #0
   12d62:	bfcc      	ite	gt
   12d64:	2301      	movgt	r3, #1
   12d66:	2300      	movle	r3, #0
   12d68:	b2db      	uxtb	r3, r3
}
   12d6a:	4618      	mov	r0, r3
   12d6c:	3708      	adds	r7, #8
   12d6e:	46bd      	mov	sp, r7
   12d70:	bd80      	pop	{r7, pc}
   12d72:	bf00      	nop
   12d74:	00012c3d 	.word	0x00012c3d

00012d78 <_ZN13AT24MAC_Class18AcknolledgePollingEv>:
bool AT24MAC_Class::AcknolledgePolling(void){
   12d78:	b580      	push	{r7, lr}
   12d7a:	b082      	sub	sp, #8
   12d7c:	af00      	add	r7, sp, #0
   12d7e:	6078      	str	r0, [r7, #4]
	do 
	{
		GetAcknowledge();
   12d80:	6878      	ldr	r0, [r7, #4]
   12d82:	4b09      	ldr	r3, [pc, #36]	; (12da8 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x30>)
   12d84:	4798      	blx	r3
	} while (!IsReady());
   12d86:	6878      	ldr	r0, [r7, #4]
   12d88:	4b08      	ldr	r3, [pc, #32]	; (12dac <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x34>)
   12d8a:	4798      	blx	r3
   12d8c:	4603      	mov	r3, r0
	do 
   12d8e:	f083 0301 	eor.w	r3, r3, #1
   12d92:	b2db      	uxtb	r3, r3
   12d94:	2b00      	cmp	r3, #0
   12d96:	d000      	beq.n	12d9a <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x22>
   12d98:	e7f2      	b.n	12d80 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x8>
	return isReady;
   12d9a:	687b      	ldr	r3, [r7, #4]
   12d9c:	781b      	ldrb	r3, [r3, #0]
   12d9e:	b2db      	uxtb	r3, r3
}
   12da0:	4618      	mov	r0, r3
   12da2:	3708      	adds	r7, #8
   12da4:	46bd      	mov	sp, r7
   12da6:	bd80      	pop	{r7, pc}
   12da8:	00012d41 	.word	0x00012d41
   12dac:	00012ea9 	.word	0x00012ea9

00012db0 <_ZN13AT24MAC_Class8SelfTestEv>:

bool	AT24MAC_Class::SelfTest(void){
   12db0:	b590      	push	{r4, r7, lr}
   12db2:	b085      	sub	sp, #20
   12db4:	af00      	add	r7, sp, #0
   12db6:	6078      	str	r0, [r7, #4]
	currentAddress=AT24MAC_MEMORY_SIZE-AT24MAC_BUFFER_SIZE*2;
   12db8:	687b      	ldr	r3, [r7, #4]
   12dba:	22e0      	movs	r2, #224	; 0xe0
   12dbc:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   12dc0:	2300      	movs	r3, #0
   12dc2:	60fb      	str	r3, [r7, #12]
   12dc4:	68fb      	ldr	r3, [r7, #12]
   12dc6:	2b0f      	cmp	r3, #15
   12dc8:	dc18      	bgt.n	12dfc <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
		tx_buffer[i] = (uint8_t)rand();
   12dca:	4b33      	ldr	r3, [pc, #204]	; (12e98 <_ZN13AT24MAC_Class8SelfTestEv+0xe8>)
   12dcc:	4798      	blx	r3
   12dce:	4603      	mov	r3, r0
   12dd0:	b2d9      	uxtb	r1, r3
   12dd2:	687a      	ldr	r2, [r7, #4]
   12dd4:	68fb      	ldr	r3, [r7, #12]
   12dd6:	4413      	add	r3, r2
   12dd8:	333a      	adds	r3, #58	; 0x3a
   12dda:	460a      	mov	r2, r1
   12ddc:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = (uint8_t)(AT24MAC_BUFFER_SIZE-i);
   12dde:	68fb      	ldr	r3, [r7, #12]
   12de0:	b2db      	uxtb	r3, r3
   12de2:	f1c3 0310 	rsb	r3, r3, #16
   12de6:	b2d9      	uxtb	r1, r3
   12de8:	687a      	ldr	r2, [r7, #4]
   12dea:	68fb      	ldr	r3, [r7, #12]
   12dec:	4413      	add	r3, r2
   12dee:	334a      	adds	r3, #74	; 0x4a
   12df0:	460a      	mov	r2, r1
   12df2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   12df4:	68fb      	ldr	r3, [r7, #12]
   12df6:	3301      	adds	r3, #1
   12df8:	60fb      	str	r3, [r7, #12]
   12dfa:	e7e3      	b.n	12dc4 <_ZN13AT24MAC_Class8SelfTestEv+0x14>
	}

	while(!IsReady());
   12dfc:	6878      	ldr	r0, [r7, #4]
   12dfe:	4b27      	ldr	r3, [pc, #156]	; (12e9c <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   12e00:	4798      	blx	r3
   12e02:	4603      	mov	r3, r0
   12e04:	f083 0301 	eor.w	r3, r3, #1
   12e08:	b2db      	uxtb	r3, r3
   12e0a:	2b00      	cmp	r3, #0
   12e0c:	d000      	beq.n	12e10 <_ZN13AT24MAC_Class8SelfTestEv+0x60>
   12e0e:	e7f5      	b.n	12dfc <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
	WriteAddress(tx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   12e10:	687b      	ldr	r3, [r7, #4]
   12e12:	f103 013a 	add.w	r1, r3, #58	; 0x3a
   12e16:	687b      	ldr	r3, [r7, #4]
   12e18:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
   12e1c:	2310      	movs	r3, #16
   12e1e:	6878      	ldr	r0, [r7, #4]
   12e20:	4c1f      	ldr	r4, [pc, #124]	; (12ea0 <_ZN13AT24MAC_Class8SelfTestEv+0xf0>)
   12e22:	47a0      	blx	r4
	while(!IsReady());
   12e24:	6878      	ldr	r0, [r7, #4]
   12e26:	4b1d      	ldr	r3, [pc, #116]	; (12e9c <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   12e28:	4798      	blx	r3
   12e2a:	4603      	mov	r3, r0
   12e2c:	f083 0301 	eor.w	r3, r3, #1
   12e30:	b2db      	uxtb	r3, r3
   12e32:	2b00      	cmp	r3, #0
   12e34:	d000      	beq.n	12e38 <_ZN13AT24MAC_Class8SelfTestEv+0x88>
   12e36:	e7f5      	b.n	12e24 <_ZN13AT24MAC_Class8SelfTestEv+0x74>
	ReadAddress(rx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   12e38:	687b      	ldr	r3, [r7, #4]
   12e3a:	f103 014a 	add.w	r1, r3, #74	; 0x4a
   12e3e:	687b      	ldr	r3, [r7, #4]
   12e40:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
   12e44:	2310      	movs	r3, #16
   12e46:	6878      	ldr	r0, [r7, #4]
   12e48:	4c16      	ldr	r4, [pc, #88]	; (12ea4 <_ZN13AT24MAC_Class8SelfTestEv+0xf4>)
   12e4a:	47a0      	blx	r4
	isOK = true;
   12e4c:	687b      	ldr	r3, [r7, #4]
   12e4e:	2201      	movs	r2, #1
   12e50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   12e54:	2300      	movs	r3, #0
   12e56:	60bb      	str	r3, [r7, #8]
   12e58:	68bb      	ldr	r3, [r7, #8]
   12e5a:	2b0f      	cmp	r3, #15
   12e5c:	dc14      	bgt.n	12e88 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
		if (tx_buffer[i] != rx_buffer[i]) {
   12e5e:	687a      	ldr	r2, [r7, #4]
   12e60:	68bb      	ldr	r3, [r7, #8]
   12e62:	4413      	add	r3, r2
   12e64:	333a      	adds	r3, #58	; 0x3a
   12e66:	781a      	ldrb	r2, [r3, #0]
   12e68:	6879      	ldr	r1, [r7, #4]
   12e6a:	68bb      	ldr	r3, [r7, #8]
   12e6c:	440b      	add	r3, r1
   12e6e:	334a      	adds	r3, #74	; 0x4a
   12e70:	781b      	ldrb	r3, [r3, #0]
   12e72:	429a      	cmp	r2, r3
   12e74:	d004      	beq.n	12e80 <_ZN13AT24MAC_Class8SelfTestEv+0xd0>
			isOK = false;
   12e76:	687b      	ldr	r3, [r7, #4]
   12e78:	2200      	movs	r2, #0
   12e7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
// 			usb.print("EEPROM verification failed. Address: ");
// 			usb.print(addr,HEX);
// 			usb<<" bit :"<<i<<NEWLINE;
			//flashAddress=0;
			
			break;
   12e7e:	e003      	b.n	12e88 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   12e80:	68bb      	ldr	r3, [r7, #8]
   12e82:	3301      	adds	r3, #1
   12e84:	60bb      	str	r3, [r7, #8]
   12e86:	e7e7      	b.n	12e58 <_ZN13AT24MAC_Class8SelfTestEv+0xa8>
		}
		
	}
	return isOK;
   12e88:	687b      	ldr	r3, [r7, #4]
   12e8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
}
   12e8e:	4618      	mov	r0, r3
   12e90:	3714      	adds	r7, #20
   12e92:	46bd      	mov	sp, r7
   12e94:	bd90      	pop	{r4, r7, pc}
   12e96:	bf00      	nop
   12e98:	000179a9 	.word	0x000179a9
   12e9c:	00012ea9 	.word	0x00012ea9
   12ea0:	00012b75 	.word	0x00012b75
   12ea4:	00012c9d 	.word	0x00012c9d

00012ea8 <_ZN13AT24MAC_Class7IsReadyEv>:


bool AT24MAC_Class::IsReady(void){
   12ea8:	b480      	push	{r7}
   12eaa:	b083      	sub	sp, #12
   12eac:	af00      	add	r7, sp, #0
   12eae:	6078      	str	r0, [r7, #4]

	if (i2ca.txReady && i2ca.rxReady)
   12eb0:	687b      	ldr	r3, [r7, #4]
   12eb2:	7d1b      	ldrb	r3, [r3, #20]
   12eb4:	b2db      	uxtb	r3, r3
   12eb6:	2b00      	cmp	r3, #0
   12eb8:	d006      	beq.n	12ec8 <_ZN13AT24MAC_Class7IsReadyEv+0x20>
   12eba:	687b      	ldr	r3, [r7, #4]
   12ebc:	7d5b      	ldrb	r3, [r3, #21]
   12ebe:	b2db      	uxtb	r3, r3
   12ec0:	2b00      	cmp	r3, #0
   12ec2:	d001      	beq.n	12ec8 <_ZN13AT24MAC_Class7IsReadyEv+0x20>
   12ec4:	2301      	movs	r3, #1
   12ec6:	e000      	b.n	12eca <_ZN13AT24MAC_Class7IsReadyEv+0x22>
   12ec8:	2300      	movs	r3, #0
   12eca:	2b00      	cmp	r3, #0
   12ecc:	d003      	beq.n	12ed6 <_ZN13AT24MAC_Class7IsReadyEv+0x2e>
	{
		isReady=true;
   12ece:	687b      	ldr	r3, [r7, #4]
   12ed0:	2201      	movs	r2, #1
   12ed2:	701a      	strb	r2, [r3, #0]
   12ed4:	e002      	b.n	12edc <_ZN13AT24MAC_Class7IsReadyEv+0x34>
	}
	else
	{
		isReady=false;
   12ed6:	687b      	ldr	r3, [r7, #4]
   12ed8:	2200      	movs	r2, #0
   12eda:	701a      	strb	r2, [r3, #0]
	}
	return isReady;	
   12edc:	687b      	ldr	r3, [r7, #4]
   12ede:	781b      	ldrb	r3, [r3, #0]
   12ee0:	b2db      	uxtb	r3, r3
}
   12ee2:	4618      	mov	r0, r3
   12ee4:	370c      	adds	r7, #12
   12ee6:	46bd      	mov	sp, r7
   12ee8:	bc80      	pop	{r7}
   12eea:	4770      	bx	lr

00012eec <_Z41__static_initialization_and_destruction_0ii>:

   12eec:	b580      	push	{r7, lr}
   12eee:	b082      	sub	sp, #8
   12ef0:	af00      	add	r7, sp, #0
   12ef2:	6078      	str	r0, [r7, #4]
   12ef4:	6039      	str	r1, [r7, #0]
   12ef6:	687b      	ldr	r3, [r7, #4]
   12ef8:	2b01      	cmp	r3, #1
   12efa:	d10d      	bne.n	12f18 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   12efc:	683b      	ldr	r3, [r7, #0]
   12efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12f02:	4293      	cmp	r3, r2
   12f04:	d108      	bne.n	12f18 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   12f06:	4906      	ldr	r1, [pc, #24]	; (12f20 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12f08:	4806      	ldr	r0, [pc, #24]	; (12f24 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12f0a:	4b07      	ldr	r3, [pc, #28]	; (12f28 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   12f0c:	4798      	blx	r3
   12f0e:	4a07      	ldr	r2, [pc, #28]	; (12f2c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12f10:	4907      	ldr	r1, [pc, #28]	; (12f30 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   12f12:	4804      	ldr	r0, [pc, #16]	; (12f24 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12f14:	4b07      	ldr	r3, [pc, #28]	; (12f34 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   12f16:	4798      	blx	r3
   12f18:	bf00      	nop
   12f1a:	3708      	adds	r7, #8
   12f1c:	46bd      	mov	sp, r7
   12f1e:	bd80      	pop	{r7, pc}
   12f20:	200050e0 	.word	0x200050e0
   12f24:	20004830 	.word	0x20004830
   12f28:	00012a51 	.word	0x00012a51
   12f2c:	20000000 	.word	0x20000000
   12f30:	00012a85 	.word	0x00012a85
   12f34:	000159a5 	.word	0x000159a5

00012f38 <_GLOBAL__sub_I_ptrAT24MACClass>:
   12f38:	b580      	push	{r7, lr}
   12f3a:	af00      	add	r7, sp, #0
   12f3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12f40:	2001      	movs	r0, #1
   12f42:	4b01      	ldr	r3, [pc, #4]	; (12f48 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
   12f44:	4798      	blx	r3
   12f46:	bd80      	pop	{r7, pc}
   12f48:	00012eed 	.word	0x00012eed

00012f4c <hri_port_set_DIR_reg>:
{
   12f4c:	b480      	push	{r7}
   12f4e:	b085      	sub	sp, #20
   12f50:	af00      	add	r7, sp, #0
   12f52:	60f8      	str	r0, [r7, #12]
   12f54:	460b      	mov	r3, r1
   12f56:	607a      	str	r2, [r7, #4]
   12f58:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   12f5a:	7afb      	ldrb	r3, [r7, #11]
   12f5c:	68fa      	ldr	r2, [r7, #12]
   12f5e:	01db      	lsls	r3, r3, #7
   12f60:	4413      	add	r3, r2
   12f62:	3308      	adds	r3, #8
   12f64:	687a      	ldr	r2, [r7, #4]
   12f66:	601a      	str	r2, [r3, #0]
}
   12f68:	bf00      	nop
   12f6a:	3714      	adds	r7, #20
   12f6c:	46bd      	mov	sp, r7
   12f6e:	bc80      	pop	{r7}
   12f70:	4770      	bx	lr

00012f72 <hri_port_clear_DIR_reg>:
{
   12f72:	b480      	push	{r7}
   12f74:	b085      	sub	sp, #20
   12f76:	af00      	add	r7, sp, #0
   12f78:	60f8      	str	r0, [r7, #12]
   12f7a:	460b      	mov	r3, r1
   12f7c:	607a      	str	r2, [r7, #4]
   12f7e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   12f80:	7afb      	ldrb	r3, [r7, #11]
   12f82:	68fa      	ldr	r2, [r7, #12]
   12f84:	01db      	lsls	r3, r3, #7
   12f86:	4413      	add	r3, r2
   12f88:	3304      	adds	r3, #4
   12f8a:	687a      	ldr	r2, [r7, #4]
   12f8c:	601a      	str	r2, [r3, #0]
}
   12f8e:	bf00      	nop
   12f90:	3714      	adds	r7, #20
   12f92:	46bd      	mov	sp, r7
   12f94:	bc80      	pop	{r7}
   12f96:	4770      	bx	lr

00012f98 <hri_port_set_OUT_reg>:
{
   12f98:	b480      	push	{r7}
   12f9a:	b085      	sub	sp, #20
   12f9c:	af00      	add	r7, sp, #0
   12f9e:	60f8      	str	r0, [r7, #12]
   12fa0:	460b      	mov	r3, r1
   12fa2:	607a      	str	r2, [r7, #4]
   12fa4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   12fa6:	7afb      	ldrb	r3, [r7, #11]
   12fa8:	68fa      	ldr	r2, [r7, #12]
   12faa:	01db      	lsls	r3, r3, #7
   12fac:	4413      	add	r3, r2
   12fae:	3318      	adds	r3, #24
   12fb0:	687a      	ldr	r2, [r7, #4]
   12fb2:	601a      	str	r2, [r3, #0]
}
   12fb4:	bf00      	nop
   12fb6:	3714      	adds	r7, #20
   12fb8:	46bd      	mov	sp, r7
   12fba:	bc80      	pop	{r7}
   12fbc:	4770      	bx	lr

00012fbe <hri_port_clear_OUT_reg>:
{
   12fbe:	b480      	push	{r7}
   12fc0:	b085      	sub	sp, #20
   12fc2:	af00      	add	r7, sp, #0
   12fc4:	60f8      	str	r0, [r7, #12]
   12fc6:	460b      	mov	r3, r1
   12fc8:	607a      	str	r2, [r7, #4]
   12fca:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   12fcc:	7afb      	ldrb	r3, [r7, #11]
   12fce:	68fa      	ldr	r2, [r7, #12]
   12fd0:	01db      	lsls	r3, r3, #7
   12fd2:	4413      	add	r3, r2
   12fd4:	3314      	adds	r3, #20
   12fd6:	687a      	ldr	r2, [r7, #4]
   12fd8:	601a      	str	r2, [r3, #0]
}
   12fda:	bf00      	nop
   12fdc:	3714      	adds	r7, #20
   12fde:	46bd      	mov	sp, r7
   12fe0:	bc80      	pop	{r7}
   12fe2:	4770      	bx	lr

00012fe4 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   12fe4:	b480      	push	{r7}
   12fe6:	b085      	sub	sp, #20
   12fe8:	af00      	add	r7, sp, #0
   12fea:	6078      	str	r0, [r7, #4]
   12fec:	4608      	mov	r0, r1
   12fee:	4611      	mov	r1, r2
   12ff0:	461a      	mov	r2, r3
   12ff2:	4603      	mov	r3, r0
   12ff4:	70fb      	strb	r3, [r7, #3]
   12ff6:	460b      	mov	r3, r1
   12ff8:	70bb      	strb	r3, [r7, #2]
   12ffa:	4613      	mov	r3, r2
   12ffc:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   12ffe:	78fa      	ldrb	r2, [r7, #3]
   13000:	78bb      	ldrb	r3, [r7, #2]
   13002:	6879      	ldr	r1, [r7, #4]
   13004:	01d2      	lsls	r2, r2, #7
   13006:	440a      	add	r2, r1
   13008:	4413      	add	r3, r2
   1300a:	3330      	adds	r3, #48	; 0x30
   1300c:	781b      	ldrb	r3, [r3, #0]
   1300e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   13010:	7bfb      	ldrb	r3, [r7, #15]
   13012:	f023 030f 	bic.w	r3, r3, #15
   13016:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   13018:	787b      	ldrb	r3, [r7, #1]
   1301a:	f003 030f 	and.w	r3, r3, #15
   1301e:	b2da      	uxtb	r2, r3
   13020:	7bfb      	ldrb	r3, [r7, #15]
   13022:	4313      	orrs	r3, r2
   13024:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   13026:	78fa      	ldrb	r2, [r7, #3]
   13028:	78bb      	ldrb	r3, [r7, #2]
   1302a:	6879      	ldr	r1, [r7, #4]
   1302c:	01d2      	lsls	r2, r2, #7
   1302e:	440a      	add	r2, r1
   13030:	4413      	add	r3, r2
   13032:	3330      	adds	r3, #48	; 0x30
   13034:	7bfa      	ldrb	r2, [r7, #15]
   13036:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   13038:	bf00      	nop
   1303a:	3714      	adds	r7, #20
   1303c:	46bd      	mov	sp, r7
   1303e:	bc80      	pop	{r7}
   13040:	4770      	bx	lr

00013042 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   13042:	b480      	push	{r7}
   13044:	b085      	sub	sp, #20
   13046:	af00      	add	r7, sp, #0
   13048:	6078      	str	r0, [r7, #4]
   1304a:	4608      	mov	r0, r1
   1304c:	4611      	mov	r1, r2
   1304e:	461a      	mov	r2, r3
   13050:	4603      	mov	r3, r0
   13052:	70fb      	strb	r3, [r7, #3]
   13054:	460b      	mov	r3, r1
   13056:	70bb      	strb	r3, [r7, #2]
   13058:	4613      	mov	r3, r2
   1305a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   1305c:	78fa      	ldrb	r2, [r7, #3]
   1305e:	78bb      	ldrb	r3, [r7, #2]
   13060:	6879      	ldr	r1, [r7, #4]
   13062:	01d2      	lsls	r2, r2, #7
   13064:	440a      	add	r2, r1
   13066:	4413      	add	r3, r2
   13068:	3330      	adds	r3, #48	; 0x30
   1306a:	781b      	ldrb	r3, [r3, #0]
   1306c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   1306e:	7bfb      	ldrb	r3, [r7, #15]
   13070:	f003 030f 	and.w	r3, r3, #15
   13074:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   13076:	787b      	ldrb	r3, [r7, #1]
   13078:	011b      	lsls	r3, r3, #4
   1307a:	b2da      	uxtb	r2, r3
   1307c:	7bfb      	ldrb	r3, [r7, #15]
   1307e:	4313      	orrs	r3, r2
   13080:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   13082:	78fa      	ldrb	r2, [r7, #3]
   13084:	78bb      	ldrb	r3, [r7, #2]
   13086:	6879      	ldr	r1, [r7, #4]
   13088:	01d2      	lsls	r2, r2, #7
   1308a:	440a      	add	r2, r1
   1308c:	4413      	add	r3, r2
   1308e:	3330      	adds	r3, #48	; 0x30
   13090:	7bfa      	ldrb	r2, [r7, #15]
   13092:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   13094:	bf00      	nop
   13096:	3714      	adds	r7, #20
   13098:	46bd      	mov	sp, r7
   1309a:	bc80      	pop	{r7}
   1309c:	4770      	bx	lr

0001309e <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   1309e:	b480      	push	{r7}
   130a0:	b085      	sub	sp, #20
   130a2:	af00      	add	r7, sp, #0
   130a4:	6078      	str	r0, [r7, #4]
   130a6:	4608      	mov	r0, r1
   130a8:	4611      	mov	r1, r2
   130aa:	461a      	mov	r2, r3
   130ac:	4603      	mov	r3, r0
   130ae:	70fb      	strb	r3, [r7, #3]
   130b0:	460b      	mov	r3, r1
   130b2:	70bb      	strb	r3, [r7, #2]
   130b4:	4613      	mov	r3, r2
   130b6:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   130b8:	78fa      	ldrb	r2, [r7, #3]
   130ba:	78bb      	ldrb	r3, [r7, #2]
   130bc:	6879      	ldr	r1, [r7, #4]
   130be:	01d2      	lsls	r2, r2, #7
   130c0:	440a      	add	r2, r1
   130c2:	4413      	add	r3, r2
   130c4:	3340      	adds	r3, #64	; 0x40
   130c6:	781b      	ldrb	r3, [r3, #0]
   130c8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   130ca:	7bfb      	ldrb	r3, [r7, #15]
   130cc:	f023 0301 	bic.w	r3, r3, #1
   130d0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   130d2:	787a      	ldrb	r2, [r7, #1]
   130d4:	7bfb      	ldrb	r3, [r7, #15]
   130d6:	4313      	orrs	r3, r2
   130d8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   130da:	78fa      	ldrb	r2, [r7, #3]
   130dc:	78bb      	ldrb	r3, [r7, #2]
   130de:	6879      	ldr	r1, [r7, #4]
   130e0:	01d2      	lsls	r2, r2, #7
   130e2:	440a      	add	r2, r1
   130e4:	4413      	add	r3, r2
   130e6:	3340      	adds	r3, #64	; 0x40
   130e8:	7bfa      	ldrb	r2, [r7, #15]
   130ea:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   130ec:	bf00      	nop
   130ee:	3714      	adds	r7, #20
   130f0:	46bd      	mov	sp, r7
   130f2:	bc80      	pop	{r7}
   130f4:	4770      	bx	lr

000130f6 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   130f6:	b480      	push	{r7}
   130f8:	b085      	sub	sp, #20
   130fa:	af00      	add	r7, sp, #0
   130fc:	60f8      	str	r0, [r7, #12]
   130fe:	460b      	mov	r3, r1
   13100:	607a      	str	r2, [r7, #4]
   13102:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   13104:	7afb      	ldrb	r3, [r7, #11]
   13106:	68fa      	ldr	r2, [r7, #12]
   13108:	01db      	lsls	r3, r3, #7
   1310a:	4413      	add	r3, r2
   1310c:	3328      	adds	r3, #40	; 0x28
   1310e:	687a      	ldr	r2, [r7, #4]
   13110:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   13112:	bf00      	nop
   13114:	3714      	adds	r7, #20
   13116:	46bd      	mov	sp, r7
   13118:	bc80      	pop	{r7}
   1311a:	4770      	bx	lr

0001311c <_gpio_set_direction>:
{
   1311c:	b580      	push	{r7, lr}
   1311e:	b082      	sub	sp, #8
   13120:	af00      	add	r7, sp, #0
   13122:	4603      	mov	r3, r0
   13124:	6039      	str	r1, [r7, #0]
   13126:	71fb      	strb	r3, [r7, #7]
   13128:	4613      	mov	r3, r2
   1312a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   1312c:	79bb      	ldrb	r3, [r7, #6]
   1312e:	2b01      	cmp	r3, #1
   13130:	d01c      	beq.n	1316c <_gpio_set_direction+0x50>
   13132:	2b02      	cmp	r3, #2
   13134:	d037      	beq.n	131a6 <_gpio_set_direction+0x8a>
   13136:	2b00      	cmp	r3, #0
   13138:	d14e      	bne.n	131d8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   1313a:	79fb      	ldrb	r3, [r7, #7]
   1313c:	683a      	ldr	r2, [r7, #0]
   1313e:	4619      	mov	r1, r3
   13140:	482a      	ldr	r0, [pc, #168]	; (131ec <_gpio_set_direction+0xd0>)
   13142:	4b2b      	ldr	r3, [pc, #172]	; (131f0 <_gpio_set_direction+0xd4>)
   13144:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   13146:	683b      	ldr	r3, [r7, #0]
   13148:	b29b      	uxth	r3, r3
   1314a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   1314e:	79fb      	ldrb	r3, [r7, #7]
   13150:	4619      	mov	r1, r3
   13152:	4826      	ldr	r0, [pc, #152]	; (131ec <_gpio_set_direction+0xd0>)
   13154:	4b27      	ldr	r3, [pc, #156]	; (131f4 <_gpio_set_direction+0xd8>)
   13156:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   13158:	683b      	ldr	r3, [r7, #0]
   1315a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   1315c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   13160:	79fb      	ldrb	r3, [r7, #7]
   13162:	4619      	mov	r1, r3
   13164:	4821      	ldr	r0, [pc, #132]	; (131ec <_gpio_set_direction+0xd0>)
   13166:	4b23      	ldr	r3, [pc, #140]	; (131f4 <_gpio_set_direction+0xd8>)
   13168:	4798      	blx	r3
		break;
   1316a:	e03a      	b.n	131e2 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   1316c:	79fb      	ldrb	r3, [r7, #7]
   1316e:	683a      	ldr	r2, [r7, #0]
   13170:	4619      	mov	r1, r3
   13172:	481e      	ldr	r0, [pc, #120]	; (131ec <_gpio_set_direction+0xd0>)
   13174:	4b1e      	ldr	r3, [pc, #120]	; (131f0 <_gpio_set_direction+0xd4>)
   13176:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   13178:	683b      	ldr	r3, [r7, #0]
   1317a:	b29b      	uxth	r3, r3
   1317c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   13180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13184:	79f9      	ldrb	r1, [r7, #7]
   13186:	461a      	mov	r2, r3
   13188:	4818      	ldr	r0, [pc, #96]	; (131ec <_gpio_set_direction+0xd0>)
   1318a:	4b1a      	ldr	r3, [pc, #104]	; (131f4 <_gpio_set_direction+0xd8>)
   1318c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   1318e:	683b      	ldr	r3, [r7, #0]
   13190:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   13192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   13196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   1319a:	79f9      	ldrb	r1, [r7, #7]
   1319c:	461a      	mov	r2, r3
   1319e:	4813      	ldr	r0, [pc, #76]	; (131ec <_gpio_set_direction+0xd0>)
   131a0:	4b14      	ldr	r3, [pc, #80]	; (131f4 <_gpio_set_direction+0xd8>)
   131a2:	4798      	blx	r3
		break;
   131a4:	e01d      	b.n	131e2 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   131a6:	79fb      	ldrb	r3, [r7, #7]
   131a8:	683a      	ldr	r2, [r7, #0]
   131aa:	4619      	mov	r1, r3
   131ac:	480f      	ldr	r0, [pc, #60]	; (131ec <_gpio_set_direction+0xd0>)
   131ae:	4b12      	ldr	r3, [pc, #72]	; (131f8 <_gpio_set_direction+0xdc>)
   131b0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   131b2:	683b      	ldr	r3, [r7, #0]
   131b4:	b29b      	uxth	r3, r3
   131b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   131ba:	79fb      	ldrb	r3, [r7, #7]
   131bc:	4619      	mov	r1, r3
   131be:	480b      	ldr	r0, [pc, #44]	; (131ec <_gpio_set_direction+0xd0>)
   131c0:	4b0c      	ldr	r3, [pc, #48]	; (131f4 <_gpio_set_direction+0xd8>)
   131c2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   131c4:	683b      	ldr	r3, [r7, #0]
   131c6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   131c8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   131cc:	79fb      	ldrb	r3, [r7, #7]
   131ce:	4619      	mov	r1, r3
   131d0:	4806      	ldr	r0, [pc, #24]	; (131ec <_gpio_set_direction+0xd0>)
   131d2:	4b08      	ldr	r3, [pc, #32]	; (131f4 <_gpio_set_direction+0xd8>)
   131d4:	4798      	blx	r3
		break;
   131d6:	e004      	b.n	131e2 <_gpio_set_direction+0xc6>
		ASSERT(false);
   131d8:	2246      	movs	r2, #70	; 0x46
   131da:	4908      	ldr	r1, [pc, #32]	; (131fc <_gpio_set_direction+0xe0>)
   131dc:	2000      	movs	r0, #0
   131de:	4b08      	ldr	r3, [pc, #32]	; (13200 <_gpio_set_direction+0xe4>)
   131e0:	4798      	blx	r3
}
   131e2:	bf00      	nop
   131e4:	3708      	adds	r7, #8
   131e6:	46bd      	mov	sp, r7
   131e8:	bd80      	pop	{r7, pc}
   131ea:	bf00      	nop
   131ec:	41008000 	.word	0x41008000
   131f0:	00012f73 	.word	0x00012f73
   131f4:	000130f7 	.word	0x000130f7
   131f8:	00012f4d 	.word	0x00012f4d
   131fc:	00019894 	.word	0x00019894
   13200:	000065d9 	.word	0x000065d9

00013204 <_gpio_set_level>:
{
   13204:	b580      	push	{r7, lr}
   13206:	b082      	sub	sp, #8
   13208:	af00      	add	r7, sp, #0
   1320a:	4603      	mov	r3, r0
   1320c:	6039      	str	r1, [r7, #0]
   1320e:	71fb      	strb	r3, [r7, #7]
   13210:	4613      	mov	r3, r2
   13212:	71bb      	strb	r3, [r7, #6]
	if (level) {
   13214:	79bb      	ldrb	r3, [r7, #6]
   13216:	2b00      	cmp	r3, #0
   13218:	d006      	beq.n	13228 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   1321a:	79fb      	ldrb	r3, [r7, #7]
   1321c:	683a      	ldr	r2, [r7, #0]
   1321e:	4619      	mov	r1, r3
   13220:	4806      	ldr	r0, [pc, #24]	; (1323c <_gpio_set_level+0x38>)
   13222:	4b07      	ldr	r3, [pc, #28]	; (13240 <_gpio_set_level+0x3c>)
   13224:	4798      	blx	r3
}
   13226:	e005      	b.n	13234 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   13228:	79fb      	ldrb	r3, [r7, #7]
   1322a:	683a      	ldr	r2, [r7, #0]
   1322c:	4619      	mov	r1, r3
   1322e:	4803      	ldr	r0, [pc, #12]	; (1323c <_gpio_set_level+0x38>)
   13230:	4b04      	ldr	r3, [pc, #16]	; (13244 <_gpio_set_level+0x40>)
   13232:	4798      	blx	r3
}
   13234:	bf00      	nop
   13236:	3708      	adds	r7, #8
   13238:	46bd      	mov	sp, r7
   1323a:	bd80      	pop	{r7, pc}
   1323c:	41008000 	.word	0x41008000
   13240:	00012f99 	.word	0x00012f99
   13244:	00012fbf 	.word	0x00012fbf

00013248 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   13248:	b590      	push	{r4, r7, lr}
   1324a:	b085      	sub	sp, #20
   1324c:	af00      	add	r7, sp, #0
   1324e:	6078      	str	r0, [r7, #4]
   13250:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	095b      	lsrs	r3, r3, #5
   13256:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   13258:	687b      	ldr	r3, [r7, #4]
   1325a:	b2db      	uxtb	r3, r3
   1325c:	f003 031f 	and.w	r3, r3, #31
   13260:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   13262:	683b      	ldr	r3, [r7, #0]
   13264:	f1b3 3fff 	cmp.w	r3, #4294967295
   13268:	d106      	bne.n	13278 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   1326a:	7bba      	ldrb	r2, [r7, #14]
   1326c:	7bf9      	ldrb	r1, [r7, #15]
   1326e:	2300      	movs	r3, #0
   13270:	4812      	ldr	r0, [pc, #72]	; (132bc <_gpio_set_pin_function+0x74>)
   13272:	4c13      	ldr	r4, [pc, #76]	; (132c0 <_gpio_set_pin_function+0x78>)
   13274:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   13276:	e01d      	b.n	132b4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   13278:	7bba      	ldrb	r2, [r7, #14]
   1327a:	7bf9      	ldrb	r1, [r7, #15]
   1327c:	2301      	movs	r3, #1
   1327e:	480f      	ldr	r0, [pc, #60]	; (132bc <_gpio_set_pin_function+0x74>)
   13280:	4c0f      	ldr	r4, [pc, #60]	; (132c0 <_gpio_set_pin_function+0x78>)
   13282:	47a0      	blx	r4
		if (pin & 1) {
   13284:	7bbb      	ldrb	r3, [r7, #14]
   13286:	f003 0301 	and.w	r3, r3, #1
   1328a:	2b00      	cmp	r3, #0
   1328c:	d009      	beq.n	132a2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   1328e:	7bbb      	ldrb	r3, [r7, #14]
   13290:	105b      	asrs	r3, r3, #1
   13292:	b2da      	uxtb	r2, r3
   13294:	683b      	ldr	r3, [r7, #0]
   13296:	b2db      	uxtb	r3, r3
   13298:	7bf9      	ldrb	r1, [r7, #15]
   1329a:	4808      	ldr	r0, [pc, #32]	; (132bc <_gpio_set_pin_function+0x74>)
   1329c:	4c09      	ldr	r4, [pc, #36]	; (132c4 <_gpio_set_pin_function+0x7c>)
   1329e:	47a0      	blx	r4
}
   132a0:	e008      	b.n	132b4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   132a2:	7bbb      	ldrb	r3, [r7, #14]
   132a4:	105b      	asrs	r3, r3, #1
   132a6:	b2da      	uxtb	r2, r3
   132a8:	683b      	ldr	r3, [r7, #0]
   132aa:	b2db      	uxtb	r3, r3
   132ac:	7bf9      	ldrb	r1, [r7, #15]
   132ae:	4803      	ldr	r0, [pc, #12]	; (132bc <_gpio_set_pin_function+0x74>)
   132b0:	4c05      	ldr	r4, [pc, #20]	; (132c8 <_gpio_set_pin_function+0x80>)
   132b2:	47a0      	blx	r4
}
   132b4:	bf00      	nop
   132b6:	3714      	adds	r7, #20
   132b8:	46bd      	mov	sp, r7
   132ba:	bd90      	pop	{r4, r7, pc}
   132bc:	41008000 	.word	0x41008000
   132c0:	0001309f 	.word	0x0001309f
   132c4:	00013043 	.word	0x00013043
   132c8:	00012fe5 	.word	0x00012fe5

000132cc <gpio_set_pin_function>:
{
   132cc:	b580      	push	{r7, lr}
   132ce:	b082      	sub	sp, #8
   132d0:	af00      	add	r7, sp, #0
   132d2:	6078      	str	r0, [r7, #4]
   132d4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   132d6:	6839      	ldr	r1, [r7, #0]
   132d8:	6878      	ldr	r0, [r7, #4]
   132da:	4b03      	ldr	r3, [pc, #12]	; (132e8 <gpio_set_pin_function+0x1c>)
   132dc:	4798      	blx	r3
}
   132de:	bf00      	nop
   132e0:	3708      	adds	r7, #8
   132e2:	46bd      	mov	sp, r7
   132e4:	bd80      	pop	{r7, pc}
   132e6:	bf00      	nop
   132e8:	00013249 	.word	0x00013249

000132ec <gpio_set_pin_direction>:
{
   132ec:	b580      	push	{r7, lr}
   132ee:	b082      	sub	sp, #8
   132f0:	af00      	add	r7, sp, #0
   132f2:	4603      	mov	r3, r0
   132f4:	460a      	mov	r2, r1
   132f6:	71fb      	strb	r3, [r7, #7]
   132f8:	4613      	mov	r3, r2
   132fa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   132fc:	79fb      	ldrb	r3, [r7, #7]
   132fe:	115b      	asrs	r3, r3, #5
   13300:	b2d8      	uxtb	r0, r3
   13302:	79fb      	ldrb	r3, [r7, #7]
   13304:	f003 031f 	and.w	r3, r3, #31
   13308:	2201      	movs	r2, #1
   1330a:	fa02 f303 	lsl.w	r3, r2, r3
   1330e:	79ba      	ldrb	r2, [r7, #6]
   13310:	4619      	mov	r1, r3
   13312:	4b03      	ldr	r3, [pc, #12]	; (13320 <gpio_set_pin_direction+0x34>)
   13314:	4798      	blx	r3
}
   13316:	bf00      	nop
   13318:	3708      	adds	r7, #8
   1331a:	46bd      	mov	sp, r7
   1331c:	bd80      	pop	{r7, pc}
   1331e:	bf00      	nop
   13320:	0001311d 	.word	0x0001311d

00013324 <gpio_set_pin_level>:
{
   13324:	b580      	push	{r7, lr}
   13326:	b082      	sub	sp, #8
   13328:	af00      	add	r7, sp, #0
   1332a:	4603      	mov	r3, r0
   1332c:	460a      	mov	r2, r1
   1332e:	71fb      	strb	r3, [r7, #7]
   13330:	4613      	mov	r3, r2
   13332:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   13334:	79fb      	ldrb	r3, [r7, #7]
   13336:	115b      	asrs	r3, r3, #5
   13338:	b2d8      	uxtb	r0, r3
   1333a:	79fb      	ldrb	r3, [r7, #7]
   1333c:	f003 031f 	and.w	r3, r3, #31
   13340:	2201      	movs	r2, #1
   13342:	fa02 f303 	lsl.w	r3, r2, r3
   13346:	79ba      	ldrb	r2, [r7, #6]
   13348:	4619      	mov	r1, r3
   1334a:	4b03      	ldr	r3, [pc, #12]	; (13358 <gpio_set_pin_level+0x34>)
   1334c:	4798      	blx	r3
}
   1334e:	bf00      	nop
   13350:	3708      	adds	r7, #8
   13352:	46bd      	mov	sp, r7
   13354:	bd80      	pop	{r7, pc}
   13356:	bf00      	nop
   13358:	00013205 	.word	0x00013205

0001335c <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   1335c:	b580      	push	{r7, lr}
   1335e:	b082      	sub	sp, #8
   13360:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   13362:	2100      	movs	r1, #0
   13364:	2008      	movs	r0, #8
   13366:	4b24      	ldr	r3, [pc, #144]	; (133f8 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   13368:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   1336a:	2100      	movs	r1, #0
   1336c:	202b      	movs	r0, #43	; 0x2b
   1336e:	4b22      	ldr	r3, [pc, #136]	; (133f8 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   13370:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   13372:	2100      	movs	r1, #0
   13374:	202a      	movs	r0, #42	; 0x2a
   13376:	4b20      	ldr	r3, [pc, #128]	; (133f8 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   13378:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   1337a:	2102      	movs	r1, #2
   1337c:	2008      	movs	r0, #8
   1337e:	4b1f      	ldr	r3, [pc, #124]	; (133fc <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   13380:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   13382:	2102      	movs	r1, #2
   13384:	202b      	movs	r0, #43	; 0x2b
   13386:	4b1d      	ldr	r3, [pc, #116]	; (133fc <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   13388:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   1338a:	2102      	movs	r1, #2
   1338c:	202a      	movs	r0, #42	; 0x2a
   1338e:	4b1b      	ldr	r3, [pc, #108]	; (133fc <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   13390:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   13392:	2101      	movs	r1, #1
   13394:	2008      	movs	r0, #8
   13396:	4b1a      	ldr	r3, [pc, #104]	; (13400 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   13398:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   1339a:	2100      	movs	r1, #0
   1339c:	202b      	movs	r0, #43	; 0x2b
   1339e:	4b18      	ldr	r3, [pc, #96]	; (13400 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   133a0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   133a2:	2100      	movs	r1, #0
   133a4:	202a      	movs	r0, #42	; 0x2a
   133a6:	4b16      	ldr	r3, [pc, #88]	; (13400 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   133a8:	4798      	blx	r3

	delay_us(1);
   133aa:	2001      	movs	r0, #1
   133ac:	4b15      	ldr	r3, [pc, #84]	; (13404 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   133ae:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   133b0:	2300      	movs	r3, #0
   133b2:	607b      	str	r3, [r7, #4]
   133b4:	687b      	ldr	r3, [r7, #4]
   133b6:	2b06      	cmp	r3, #6
   133b8:	dc11      	bgt.n	133de <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   133ba:	2101      	movs	r1, #1
   133bc:	202a      	movs	r0, #42	; 0x2a
   133be:	4b10      	ldr	r3, [pc, #64]	; (13400 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   133c0:	4798      	blx	r3
		delay_us(1);
   133c2:	2001      	movs	r0, #1
   133c4:	4b0f      	ldr	r3, [pc, #60]	; (13404 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   133c6:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   133c8:	2100      	movs	r1, #0
   133ca:	202a      	movs	r0, #42	; 0x2a
   133cc:	4b0c      	ldr	r3, [pc, #48]	; (13400 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   133ce:	4798      	blx	r3
		delay_us(1);
   133d0:	2001      	movs	r0, #1
   133d2:	4b0c      	ldr	r3, [pc, #48]	; (13404 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   133d4:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   133d6:	687b      	ldr	r3, [r7, #4]
   133d8:	3301      	adds	r3, #1
   133da:	607b      	str	r3, [r7, #4]
   133dc:	e7ea      	b.n	133b4 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   133de:	2101      	movs	r1, #1
   133e0:	202b      	movs	r0, #43	; 0x2b
   133e2:	4b07      	ldr	r3, [pc, #28]	; (13400 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   133e4:	4798      	blx	r3
	delay_us(1);
   133e6:	2001      	movs	r0, #1
   133e8:	4b06      	ldr	r3, [pc, #24]	; (13404 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   133ea:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   133ec:	4b06      	ldr	r3, [pc, #24]	; (13408 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   133ee:	4798      	blx	r3
}
   133f0:	bf00      	nop
   133f2:	3708      	adds	r7, #8
   133f4:	46bd      	mov	sp, r7
   133f6:	bd80      	pop	{r7, pc}
   133f8:	000132cd 	.word	0x000132cd
   133fc:	000132ed 	.word	0x000132ed
   13400:	00013325 	.word	0x00013325
   13404:	00004a31 	.word	0x00004a31
   13408:	000038f9 	.word	0x000038f9

0001340c <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   1340c:	b480      	push	{r7}
   1340e:	b083      	sub	sp, #12
   13410:	af00      	add	r7, sp, #0
   13412:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   13414:	687b      	ldr	r3, [r7, #4]
   13416:	4618      	mov	r0, r3
   13418:	370c      	adds	r7, #12
   1341a:	46bd      	mov	sp, r7
   1341c:	bc80      	pop	{r7}
   1341e:	4770      	bx	lr

00013420 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   13420:	b480      	push	{r7}
   13422:	b083      	sub	sp, #12
   13424:	af00      	add	r7, sp, #0
   13426:	6078      	str	r0, [r7, #4]
   13428:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   1342a:	687b      	ldr	r3, [r7, #4]
   1342c:	683a      	ldr	r2, [r7, #0]
   1342e:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   13430:	687b      	ldr	r3, [r7, #4]
   13432:	4a04      	ldr	r2, [pc, #16]	; (13444 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   13434:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   13438:	687b      	ldr	r3, [r7, #4]
   1343a:	4618      	mov	r0, r3
   1343c:	370c      	adds	r7, #12
   1343e:	46bd      	mov	sp, r7
   13440:	bc80      	pop	{r7}
   13442:	4770      	bx	lr
   13444:	001fff00 	.word	0x001fff00

00013448 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   13448:	b480      	push	{r7}
   1344a:	b083      	sub	sp, #12
   1344c:	af00      	add	r7, sp, #0
   1344e:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   13450:	687b      	ldr	r3, [r7, #4]
   13452:	4618      	mov	r0, r3
   13454:	370c      	adds	r7, #12
   13456:	46bd      	mov	sp, r7
   13458:	bc80      	pop	{r7}
   1345a:	4770      	bx	lr

0001345c <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   1345c:	b580      	push	{r7, lr}
   1345e:	b082      	sub	sp, #8
   13460:	af00      	add	r7, sp, #0
   13462:	6078      	str	r0, [r7, #4]
	xferDone=false;
   13464:	687b      	ldr	r3, [r7, #4]
   13466:	2200      	movs	r2, #0
   13468:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   1346a:	6878      	ldr	r0, [r7, #4]
   1346c:	4b04      	ldr	r3, [pc, #16]	; (13480 <_ZN13N25Q256_Class4InitEv+0x24>)
   1346e:	4798      	blx	r3
	return SelfTest();
   13470:	6878      	ldr	r0, [r7, #4]
   13472:	4b04      	ldr	r3, [pc, #16]	; (13484 <_ZN13N25Q256_Class4InitEv+0x28>)
   13474:	4798      	blx	r3
   13476:	4603      	mov	r3, r0
}
   13478:	4618      	mov	r0, r3
   1347a:	3708      	adds	r7, #8
   1347c:	46bd      	mov	sp, r7
   1347e:	bd80      	pop	{r7, pc}
   13480:	00013489 	.word	0x00013489
   13484:	0001363d 	.word	0x0001363d

00013488 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   13488:	b590      	push	{r4, r7, lr}
   1348a:	b083      	sub	sp, #12
   1348c:	af00      	add	r7, sp, #0
   1348e:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   13490:	687b      	ldr	r3, [r7, #4]
   13492:	685b      	ldr	r3, [r3, #4]
   13494:	4618      	mov	r0, r3
   13496:	4b08      	ldr	r3, [pc, #32]	; (134b8 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   13498:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   1349e:	2300      	movs	r3, #0
   134a0:	4a06      	ldr	r2, [pc, #24]	; (134bc <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   134a2:	4807      	ldr	r0, [pc, #28]	; (134c0 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   134a4:	4c07      	ldr	r4, [pc, #28]	; (134c4 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   134a6:	47a0      	blx	r4
   134a8:	4602      	mov	r2, r0
   134aa:	687b      	ldr	r3, [r7, #4]
   134ac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   134b0:	bf00      	nop
   134b2:	370c      	adds	r7, #12
   134b4:	46bd      	mov	sp, r7
   134b6:	bd90      	pop	{r4, r7, pc}
   134b8:	00005101 	.word	0x00005101
   134bc:	0001335d 	.word	0x0001335d
   134c0:	20004894 	.word	0x20004894
   134c4:	0000ec5d 	.word	0x0000ec5d

000134c8 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   134c8:	b580      	push	{r7, lr}
   134ca:	b084      	sub	sp, #16
   134cc:	af00      	add	r7, sp, #0
   134ce:	6078      	str	r0, [r7, #4]
   134d0:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   134d8:	685b      	ldr	r3, [r3, #4]
   134da:	689b      	ldr	r3, [r3, #8]
   134dc:	687a      	ldr	r2, [r7, #4]
   134de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   134e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   134e6:	6839      	ldr	r1, [r7, #0]
   134e8:	4798      	blx	r3
   134ea:	4603      	mov	r3, r0
   134ec:	60fb      	str	r3, [r7, #12]
	return	e;
   134ee:	68fb      	ldr	r3, [r7, #12]
}
   134f0:	4618      	mov	r0, r3
   134f2:	3710      	adds	r7, #16
   134f4:	46bd      	mov	sp, r7
   134f6:	bd80      	pop	{r7, pc}

000134f8 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   134f8:	b590      	push	{r4, r7, lr}
   134fa:	b087      	sub	sp, #28
   134fc:	af00      	add	r7, sp, #0
   134fe:	60f8      	str	r0, [r7, #12]
   13500:	60b9      	str	r1, [r7, #8]
   13502:	607a      	str	r2, [r7, #4]
   13504:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   13506:	68fb      	ldr	r3, [r7, #12]
   13508:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1350c:	685b      	ldr	r3, [r3, #4]
   1350e:	685c      	ldr	r4, [r3, #4]
   13510:	68fb      	ldr	r3, [r7, #12]
   13512:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   13516:	683b      	ldr	r3, [r7, #0]
   13518:	687a      	ldr	r2, [r7, #4]
   1351a:	68b9      	ldr	r1, [r7, #8]
   1351c:	47a0      	blx	r4
   1351e:	4603      	mov	r3, r0
   13520:	617b      	str	r3, [r7, #20]
	return	w;
   13522:	697b      	ldr	r3, [r7, #20]
}
   13524:	4618      	mov	r0, r3
   13526:	371c      	adds	r7, #28
   13528:	46bd      	mov	sp, r7
   1352a:	bd90      	pop	{r4, r7, pc}

0001352c <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   1352c:	b590      	push	{r4, r7, lr}
   1352e:	b087      	sub	sp, #28
   13530:	af00      	add	r7, sp, #0
   13532:	60f8      	str	r0, [r7, #12]
   13534:	60b9      	str	r1, [r7, #8]
   13536:	607a      	str	r2, [r7, #4]
   13538:	603b      	str	r3, [r7, #0]
	xferDone=false;
   1353a:	68fb      	ldr	r3, [r7, #12]
   1353c:	2200      	movs	r2, #0
   1353e:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   13540:	68fb      	ldr	r3, [r7, #12]
   13542:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   13546:	685b      	ldr	r3, [r3, #4]
   13548:	681c      	ldr	r4, [r3, #0]
   1354a:	68fb      	ldr	r3, [r7, #12]
   1354c:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   13550:	683b      	ldr	r3, [r7, #0]
   13552:	687a      	ldr	r2, [r7, #4]
   13554:	68b9      	ldr	r1, [r7, #8]
   13556:	47a0      	blx	r4
   13558:	4603      	mov	r3, r0
   1355a:	617b      	str	r3, [r7, #20]
	return	r;
   1355c:	697b      	ldr	r3, [r7, #20]
}
   1355e:	4618      	mov	r0, r3
   13560:	371c      	adds	r7, #28
   13562:	46bd      	mov	sp, r7
   13564:	bd90      	pop	{r4, r7, pc}
	...

00013568 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   13568:	b580      	push	{r7, lr}
   1356a:	b082      	sub	sp, #8
   1356c:	af00      	add	r7, sp, #0
   1356e:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   13570:	687a      	ldr	r2, [r7, #4]
   13572:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   13576:	f043 0310 	orr.w	r3, r3, #16
   1357a:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   1357e:	687a      	ldr	r2, [r7, #4]
   13580:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   13584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13588:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   1358c:	687a      	ldr	r2, [r7, #4]
   1358e:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   13592:	f36f 1305 	bfc	r3, #4, #2
   13596:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   1359a:	687b      	ldr	r3, [r7, #4]
   1359c:	2205      	movs	r2, #5
   1359e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   135a2:	687b      	ldr	r3, [r7, #4]
   135a4:	2201      	movs	r2, #1
   135a6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   135aa:	687b      	ldr	r3, [r7, #4]
   135ac:	f203 2212 	addw	r2, r3, #530	; 0x212
   135b0:	687b      	ldr	r3, [r7, #4]
   135b2:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   135b6:	687b      	ldr	r3, [r7, #4]
   135b8:	685a      	ldr	r2, [r3, #4]
   135ba:	687b      	ldr	r3, [r7, #4]
   135bc:	f503 7305 	add.w	r3, r3, #532	; 0x214
   135c0:	4619      	mov	r1, r3
   135c2:	4610      	mov	r0, r2
   135c4:	4b04      	ldr	r3, [pc, #16]	; (135d8 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   135c6:	4798      	blx	r3
		return status;
   135c8:	687b      	ldr	r3, [r7, #4]
   135ca:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   135ce:	4618      	mov	r0, r3
   135d0:	3708      	adds	r7, #8
   135d2:	46bd      	mov	sp, r7
   135d4:	bd80      	pop	{r7, pc}
   135d6:	bf00      	nop
   135d8:	00005179 	.word	0x00005179

000135dc <_ZN13N25Q256_Class17GetMemoryCapacityEv>:
uint32_t	N25Q256_Class::GetMemoryCapacity(){
   135dc:	b480      	push	{r7}
   135de:	b083      	sub	sp, #12
   135e0:	af00      	add	r7, sp, #0
   135e2:	6078      	str	r0, [r7, #4]
	return	memoryCapacity;
   135e4:	687b      	ldr	r3, [r7, #4]
   135e6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
}
   135ea:	4618      	mov	r0, r3
   135ec:	370c      	adds	r7, #12
   135ee:	46bd      	mov	sp, r7
   135f0:	bc80      	pop	{r7}
   135f2:	4770      	bx	lr

000135f4 <_ZN13N25Q256_Class10WaitOnBusyEv>:
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   135f4:	b580      	push	{r7, lr}
   135f6:	b082      	sub	sp, #8
   135f8:	af00      	add	r7, sp, #0
   135fa:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   135fc:	6878      	ldr	r0, [r7, #4]
   135fe:	4b0e      	ldr	r3, [pc, #56]	; (13638 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   13600:	4798      	blx	r3
   13602:	4603      	mov	r3, r0
   13604:	461a      	mov	r2, r3
   13606:	687b      	ldr	r3, [r7, #4]
   13608:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   1360c:	687b      	ldr	r3, [r7, #4]
   1360e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   13612:	f003 0301 	and.w	r3, r3, #1
   13616:	2b00      	cmp	r3, #0
   13618:	d000      	beq.n	1361c <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   1361a:	e7ef      	b.n	135fc <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   1361c:	687b      	ldr	r3, [r7, #4]
   1361e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   13622:	f003 0301 	and.w	r3, r3, #1
   13626:	2b00      	cmp	r3, #0
   13628:	bf0c      	ite	eq
   1362a:	2301      	moveq	r3, #1
   1362c:	2300      	movne	r3, #0
   1362e:	b2db      	uxtb	r3, r3
}
   13630:	4618      	mov	r0, r3
   13632:	3708      	adds	r7, #8
   13634:	46bd      	mov	sp, r7
   13636:	bd80      	pop	{r7, pc}
   13638:	00013569 	.word	0x00013569

0001363c <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   1363c:	b590      	push	{r4, r7, lr}
   1363e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   13642:	b085      	sub	sp, #20
   13644:	af00      	add	r7, sp, #0
   13646:	f107 0310 	add.w	r3, r7, #16
   1364a:	3b0c      	subs	r3, #12
   1364c:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   1364e:	f107 0310 	add.w	r3, r7, #16
   13652:	3b0c      	subs	r3, #12
   13654:	681b      	ldr	r3, [r3, #0]
   13656:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1365a:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   1365e:	f107 0310 	add.w	r3, r7, #16
   13662:	3b0c      	subs	r3, #12
   13664:	681b      	ldr	r3, [r3, #0]
   13666:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1366a:	f107 0110 	add.w	r1, r7, #16
   1366e:	3904      	subs	r1, #4
   13670:	f107 0010 	add.w	r0, r7, #16
   13674:	380c      	subs	r0, #12
   13676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1367a:	6800      	ldr	r0, [r0, #0]
   1367c:	4c4b      	ldr	r4, [pc, #300]	; (137ac <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   1367e:	47a0      	blx	r4
	WaitOnBusy();
   13680:	f107 0310 	add.w	r3, r7, #16
   13684:	3b0c      	subs	r3, #12
   13686:	6818      	ldr	r0, [r3, #0]
   13688:	4b49      	ldr	r3, [pc, #292]	; (137b0 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   1368a:	4798      	blx	r3
	Erase(currentAddress);
   1368c:	f107 0310 	add.w	r3, r7, #16
   13690:	3b0c      	subs	r3, #12
   13692:	681b      	ldr	r3, [r3, #0]
   13694:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   13698:	f107 0310 	add.w	r3, r7, #16
   1369c:	3b0c      	subs	r3, #12
   1369e:	4611      	mov	r1, r2
   136a0:	6818      	ldr	r0, [r3, #0]
   136a2:	4b44      	ldr	r3, [pc, #272]	; (137b4 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   136a4:	4798      	blx	r3
	WaitOnBusy();
   136a6:	f107 0310 	add.w	r3, r7, #16
   136aa:	3b0c      	subs	r3, #12
   136ac:	6818      	ldr	r0, [r3, #0]
   136ae:	4b40      	ldr	r3, [pc, #256]	; (137b0 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   136b0:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   136b2:	f107 0310 	add.w	r3, r7, #16
   136b6:	3b0c      	subs	r3, #12
   136b8:	681b      	ldr	r3, [r3, #0]
   136ba:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   136be:	f107 0110 	add.w	r1, r7, #16
   136c2:	3904      	subs	r1, #4
   136c4:	f107 0010 	add.w	r0, r7, #16
   136c8:	380c      	subs	r0, #12
   136ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   136ce:	6800      	ldr	r0, [r0, #0]
   136d0:	4c39      	ldr	r4, [pc, #228]	; (137b8 <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   136d2:	47a0      	blx	r4
	WaitOnBusy();
   136d4:	f107 0310 	add.w	r3, r7, #16
   136d8:	3b0c      	subs	r3, #12
   136da:	6818      	ldr	r0, [r3, #0]
   136dc:	4b34      	ldr	r3, [pc, #208]	; (137b0 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   136de:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   136e0:	f107 0310 	add.w	r3, r7, #16
   136e4:	3b0c      	subs	r3, #12
   136e6:	681b      	ldr	r3, [r3, #0]
   136e8:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   136ec:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   136f0:	f101 0110 	add.w	r1, r1, #16
   136f4:	3904      	subs	r1, #4
   136f6:	f107 0010 	add.w	r0, r7, #16
   136fa:	380c      	subs	r0, #12
   136fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   13700:	6800      	ldr	r0, [r0, #0]
   13702:	4c2a      	ldr	r4, [pc, #168]	; (137ac <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   13704:	47a0      	blx	r4
	WaitOnBusy();
   13706:	f107 0310 	add.w	r3, r7, #16
   1370a:	3b0c      	subs	r3, #12
   1370c:	6818      	ldr	r0, [r3, #0]
   1370e:	4b28      	ldr	r3, [pc, #160]	; (137b0 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   13710:	4798      	blx	r3
	isOK	 = true;
   13712:	f107 0310 	add.w	r3, r7, #16
   13716:	3b0c      	subs	r3, #12
   13718:	681b      	ldr	r3, [r3, #0]
   1371a:	2201      	movs	r2, #1
   1371c:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   13720:	2300      	movs	r3, #0
   13722:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   13726:	f102 020c 	add.w	r2, r2, #12
   1372a:	6013      	str	r3, [r2, #0]
   1372c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   13730:	f103 030c 	add.w	r3, r3, #12
   13734:	681b      	ldr	r3, [r3, #0]
   13736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1373a:	da2b      	bge.n	13794 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   1373c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   13740:	f103 0310 	add.w	r3, r3, #16
   13744:	3b04      	subs	r3, #4
   13746:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1374a:	f102 020c 	add.w	r2, r2, #12
   1374e:	6812      	ldr	r2, [r2, #0]
   13750:	4413      	add	r3, r2
   13752:	781a      	ldrb	r2, [r3, #0]
   13754:	f107 0310 	add.w	r3, r7, #16
   13758:	3b04      	subs	r3, #4
   1375a:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   1375e:	f101 010c 	add.w	r1, r1, #12
   13762:	6809      	ldr	r1, [r1, #0]
   13764:	440b      	add	r3, r1
   13766:	781b      	ldrb	r3, [r3, #0]
   13768:	429a      	cmp	r2, r3
   1376a:	d007      	beq.n	1377c <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   1376c:	f107 0310 	add.w	r3, r7, #16
   13770:	3b0c      	subs	r3, #12
   13772:	681b      	ldr	r3, [r3, #0]
   13774:	2200      	movs	r2, #0
   13776:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   1377a:	e00b      	b.n	13794 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   1377c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   13780:	f103 030c 	add.w	r3, r3, #12
   13784:	681b      	ldr	r3, [r3, #0]
   13786:	3301      	adds	r3, #1
   13788:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1378c:	f102 020c 	add.w	r2, r2, #12
   13790:	6013      	str	r3, [r2, #0]
   13792:	e7cb      	b.n	1372c <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   13794:	f107 0310 	add.w	r3, r7, #16
   13798:	3b0c      	subs	r3, #12
   1379a:	681b      	ldr	r3, [r3, #0]
   1379c:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   137a0:	4618      	mov	r0, r3
   137a2:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   137a6:	3714      	adds	r7, #20
   137a8:	46bd      	mov	sp, r7
   137aa:	bd90      	pop	{r4, r7, pc}
   137ac:	0001352d 	.word	0x0001352d
   137b0:	000135f5 	.word	0x000135f5
   137b4:	000134c9 	.word	0x000134c9
   137b8:	000134f9 	.word	0x000134f9

000137bc <_Z41__static_initialization_and_destruction_0ii>:
   137bc:	b580      	push	{r7, lr}
   137be:	b082      	sub	sp, #8
   137c0:	af00      	add	r7, sp, #0
   137c2:	6078      	str	r0, [r7, #4]
   137c4:	6039      	str	r1, [r7, #0]
   137c6:	687b      	ldr	r3, [r7, #4]
   137c8:	2b01      	cmp	r3, #1
   137ca:	d10d      	bne.n	137e8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   137cc:	683b      	ldr	r3, [r7, #0]
   137ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   137d2:	4293      	cmp	r3, r2
   137d4:	d108      	bne.n	137e8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   137d6:	4906      	ldr	r1, [pc, #24]	; (137f0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   137d8:	4806      	ldr	r0, [pc, #24]	; (137f4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   137da:	4b07      	ldr	r3, [pc, #28]	; (137f8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   137dc:	4798      	blx	r3
   137de:	4a07      	ldr	r2, [pc, #28]	; (137fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
   137e0:	4907      	ldr	r1, [pc, #28]	; (13800 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   137e2:	4804      	ldr	r0, [pc, #16]	; (137f4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   137e4:	4b07      	ldr	r3, [pc, #28]	; (13804 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   137e6:	4798      	blx	r3
   137e8:	bf00      	nop
   137ea:	3708      	adds	r7, #8
   137ec:	46bd      	mov	sp, r7
   137ee:	bd80      	pop	{r7, pc}
   137f0:	20004fcc 	.word	0x20004fcc
   137f4:	200048a4 	.word	0x200048a4
   137f8:	00013421 	.word	0x00013421
   137fc:	20000000 	.word	0x20000000
   13800:	00013449 	.word	0x00013449
   13804:	000159a5 	.word	0x000159a5

00013808 <_GLOBAL__sub_I_ptrN25Q256Class>:
   13808:	b580      	push	{r7, lr}
   1380a:	af00      	add	r7, sp, #0
   1380c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13810:	2001      	movs	r0, #1
   13812:	4b01      	ldr	r3, [pc, #4]	; (13818 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   13814:	4798      	blx	r3
   13816:	bd80      	pop	{r7, pc}
   13818:	000137bd 	.word	0x000137bd

0001381c <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   1381c:	b580      	push	{r7, lr}
   1381e:	b082      	sub	sp, #8
   13820:	af00      	add	r7, sp, #0
   13822:	6078      	str	r0, [r7, #4]
   13824:	687b      	ldr	r3, [r7, #4]
   13826:	4618      	mov	r0, r3
   13828:	4b06      	ldr	r3, [pc, #24]	; (13844 <_ZN14Calendar_ClassC1Ev+0x28>)
   1382a:	4798      	blx	r3
   1382c:	4a06      	ldr	r2, [pc, #24]	; (13848 <_ZN14Calendar_ClassC1Ev+0x2c>)
   1382e:	687b      	ldr	r3, [r7, #4]
   13830:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   13832:	4a06      	ldr	r2, [pc, #24]	; (1384c <_ZN14Calendar_ClassC1Ev+0x30>)
   13834:	687b      	ldr	r3, [r7, #4]
   13836:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   13838:	687b      	ldr	r3, [r7, #4]
   1383a:	4618      	mov	r0, r3
   1383c:	3708      	adds	r7, #8
   1383e:	46bd      	mov	sp, r7
   13840:	bd80      	pop	{r7, pc}
   13842:	bf00      	nop
   13844:	00013f69 	.word	0x00013f69
   13848:	000198d4 	.word	0x000198d4
   1384c:	20004ad8 	.word	0x20004ad8

00013850 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   13850:	b580      	push	{r7, lr}
   13852:	b082      	sub	sp, #8
   13854:	af00      	add	r7, sp, #0
   13856:	6078      	str	r0, [r7, #4]
   13858:	6039      	str	r1, [r7, #0]
   1385a:	687b      	ldr	r3, [r7, #4]
   1385c:	4618      	mov	r0, r3
   1385e:	4b08      	ldr	r3, [pc, #32]	; (13880 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   13860:	4798      	blx	r3
   13862:	4a08      	ldr	r2, [pc, #32]	; (13884 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   13864:	687b      	ldr	r3, [r7, #4]
   13866:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   13868:	687b      	ldr	r3, [r7, #4]
   1386a:	683a      	ldr	r2, [r7, #0]
   1386c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
   13870:	4a05      	ldr	r2, [pc, #20]	; (13888 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   13872:	687b      	ldr	r3, [r7, #4]
   13874:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   13876:	687b      	ldr	r3, [r7, #4]
   13878:	4618      	mov	r0, r3
   1387a:	3708      	adds	r7, #8
   1387c:	46bd      	mov	sp, r7
   1387e:	bd80      	pop	{r7, pc}
   13880:	00013f69 	.word	0x00013f69
   13884:	000198d4 	.word	0x000198d4
   13888:	20004ad8 	.word	0x20004ad8

0001388c <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   1388c:	b580      	push	{r7, lr}
   1388e:	b082      	sub	sp, #8
   13890:	af00      	add	r7, sp, #0
   13892:	6078      	str	r0, [r7, #4]
   13894:	4a05      	ldr	r2, [pc, #20]	; (138ac <_ZN14Calendar_ClassD1Ev+0x20>)
   13896:	687b      	ldr	r3, [r7, #4]
   13898:	601a      	str	r2, [r3, #0]
   1389a:	687b      	ldr	r3, [r7, #4]
   1389c:	4618      	mov	r0, r3
   1389e:	4b04      	ldr	r3, [pc, #16]	; (138b0 <_ZN14Calendar_ClassD1Ev+0x24>)
   138a0:	4798      	blx	r3
{
} //~Calendar_Class
   138a2:	687b      	ldr	r3, [r7, #4]
   138a4:	4618      	mov	r0, r3
   138a6:	3708      	adds	r7, #8
   138a8:	46bd      	mov	sp, r7
   138aa:	bd80      	pop	{r7, pc}
   138ac:	000198d4 	.word	0x000198d4
   138b0:	00013f89 	.word	0x00013f89

000138b4 <_ZN14Calendar_Class4InitEv>:

void	Calendar_Class::Init(void){
   138b4:	b580      	push	{r7, lr}
   138b6:	b082      	sub	sp, #8
   138b8:	af00      	add	r7, sp, #0
   138ba:	6078      	str	r0, [r7, #4]
	ptrMemory=&eeprom;
   138bc:	687b      	ldr	r3, [r7, #4]
   138be:	4a50      	ldr	r2, [pc, #320]	; (13a00 <_ZN14Calendar_Class4InitEv+0x14c>)
   138c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	calendar_enable(ptrCalendar);
   138c4:	687b      	ldr	r3, [r7, #4]
   138c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   138ca:	4618      	mov	r0, r3
   138cc:	4b4d      	ldr	r3, [pc, #308]	; (13a04 <_ZN14Calendar_Class4InitEv+0x150>)
   138ce:	4798      	blx	r3
	
	InitMaxDate();
   138d0:	6878      	ldr	r0, [r7, #4]
   138d2:	4b4d      	ldr	r3, [pc, #308]	; (13a08 <_ZN14Calendar_Class4InitEv+0x154>)
   138d4:	4798      	blx	r3
	
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	ReadLastDateTime();
   138d6:	687b      	ldr	r3, [r7, #4]
   138d8:	4618      	mov	r0, r3
   138da:	4b4c      	ldr	r3, [pc, #304]	; (13a0c <_ZN14Calendar_Class4InitEv+0x158>)
   138dc:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   138de:	687b      	ldr	r3, [r7, #4]
   138e0:	681b      	ldr	r3, [r3, #0]
   138e2:	3304      	adds	r3, #4
   138e4:	681b      	ldr	r3, [r3, #0]
   138e6:	687a      	ldr	r2, [r7, #4]
   138e8:	3260      	adds	r2, #96	; 0x60
   138ea:	4611      	mov	r1, r2
   138ec:	6878      	ldr	r0, [r7, #4]
   138ee:	4798      	blx	r3
   138f0:	4602      	mov	r2, r0
   138f2:	687b      	ldr	r3, [r7, #4]
   138f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   138f8:	687b      	ldr	r3, [r7, #4]
   138fa:	681b      	ldr	r3, [r3, #0]
   138fc:	3304      	adds	r3, #4
   138fe:	681b      	ldr	r3, [r3, #0]
   13900:	687a      	ldr	r2, [r7, #4]
   13902:	326c      	adds	r2, #108	; 0x6c
   13904:	4611      	mov	r1, r2
   13906:	6878      	ldr	r0, [r7, #4]
   13908:	4798      	blx	r3
   1390a:	4602      	mov	r2, r0
   1390c:	687b      	ldr	r3, [r7, #4]
   1390e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   13912:	687b      	ldr	r3, [r7, #4]
   13914:	681b      	ldr	r3, [r3, #0]
   13916:	3304      	adds	r3, #4
   13918:	681b      	ldr	r3, [r3, #0]
   1391a:	687a      	ldr	r2, [r7, #4]
   1391c:	327c      	adds	r2, #124	; 0x7c
   1391e:	4611      	mov	r1, r2
   13920:	6878      	ldr	r0, [r7, #4]
   13922:	4798      	blx	r3
   13924:	4602      	mov	r2, r0
   13926:	687b      	ldr	r3, [r7, #4]
   13928:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   1392c:	687b      	ldr	r3, [r7, #4]
   1392e:	681b      	ldr	r3, [r3, #0]
   13930:	3304      	adds	r3, #4
   13932:	681b      	ldr	r3, [r3, #0]
   13934:	687a      	ldr	r2, [r7, #4]
   13936:	3284      	adds	r2, #132	; 0x84
   13938:	4611      	mov	r1, r2
   1393a:	6878      	ldr	r0, [r7, #4]
   1393c:	4798      	blx	r3
   1393e:	4602      	mov	r2, r0
   13940:	687b      	ldr	r3, [r7, #4]
   13942:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   13944:	6878      	ldr	r0, [r7, #4]
   13946:	4b32      	ldr	r3, [pc, #200]	; (13a10 <_ZN14Calendar_Class4InitEv+0x15c>)
   13948:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   1394a:	687b      	ldr	r3, [r7, #4]
   1394c:	681b      	ldr	r3, [r3, #0]
   1394e:	3304      	adds	r3, #4
   13950:	681b      	ldr	r3, [r3, #0]
   13952:	687a      	ldr	r2, [r7, #4]
   13954:	3274      	adds	r2, #116	; 0x74
   13956:	4611      	mov	r1, r2
   13958:	6878      	ldr	r0, [r7, #4]
   1395a:	4798      	blx	r3
   1395c:	4602      	mov	r2, r0
   1395e:	687b      	ldr	r3, [r7, #4]
   13960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   13964:	687b      	ldr	r3, [r7, #4]
   13966:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1396a:	687b      	ldr	r3, [r7, #4]
   1396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   13970:	429a      	cmp	r2, r3
   13972:	d80e      	bhi.n	13992 <_ZN14Calendar_Class4InitEv+0xde>
   13974:	687b      	ldr	r3, [r7, #4]
   13976:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1397a:	687b      	ldr	r3, [r7, #4]
   1397c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   13980:	429a      	cmp	r2, r3
   13982:	d006      	beq.n	13992 <_ZN14Calendar_Class4InitEv+0xde>
   13984:	687b      	ldr	r3, [r7, #4]
   13986:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1398a:	687b      	ldr	r3, [r7, #4]
   1398c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1398e:	429a      	cmp	r2, r3
   13990:	d106      	bne.n	139a0 <_ZN14Calendar_Class4InitEv+0xec>
	{
		SetDateTime(&compilationDateTime);
   13992:	687b      	ldr	r3, [r7, #4]
   13994:	3374      	adds	r3, #116	; 0x74
   13996:	4619      	mov	r1, r3
   13998:	6878      	ldr	r0, [r7, #4]
   1399a:	4b1e      	ldr	r3, [pc, #120]	; (13a14 <_ZN14Calendar_Class4InitEv+0x160>)
   1399c:	4798      	blx	r3
   1399e:	e022      	b.n	139e6 <_ZN14Calendar_Class4InitEv+0x132>
	}
	else
	{
		if (lastTimestamp<currentTimestamp)
   139a0:	687b      	ldr	r3, [r7, #4]
   139a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   139a6:	687b      	ldr	r3, [r7, #4]
   139a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   139ac:	429a      	cmp	r2, r3
   139ae:	d206      	bcs.n	139be <_ZN14Calendar_Class4InitEv+0x10a>
		{
			SetDateTime(&compilationDateTime);
   139b0:	687b      	ldr	r3, [r7, #4]
   139b2:	3374      	adds	r3, #116	; 0x74
   139b4:	4619      	mov	r1, r3
   139b6:	6878      	ldr	r0, [r7, #4]
   139b8:	4b16      	ldr	r3, [pc, #88]	; (13a14 <_ZN14Calendar_Class4InitEv+0x160>)
   139ba:	4798      	blx	r3
   139bc:	e013      	b.n	139e6 <_ZN14Calendar_Class4InitEv+0x132>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   139be:	687b      	ldr	r3, [r7, #4]
   139c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   139c4:	687b      	ldr	r3, [r7, #4]
   139c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   139c8:	429a      	cmp	r2, r3
   139ca:	d106      	bne.n	139da <_ZN14Calendar_Class4InitEv+0x126>
			{
				SetDateTime(&compilationDateTime);
   139cc:	687b      	ldr	r3, [r7, #4]
   139ce:	3374      	adds	r3, #116	; 0x74
   139d0:	4619      	mov	r1, r3
   139d2:	6878      	ldr	r0, [r7, #4]
   139d4:	4b0f      	ldr	r3, [pc, #60]	; (13a14 <_ZN14Calendar_Class4InitEv+0x160>)
   139d6:	4798      	blx	r3
   139d8:	e005      	b.n	139e6 <_ZN14Calendar_Class4InitEv+0x132>
			} 
			else
			{
				SetDateTime(&lastDateTime);
   139da:	687b      	ldr	r3, [r7, #4]
   139dc:	3360      	adds	r3, #96	; 0x60
   139de:	4619      	mov	r1, r3
   139e0:	6878      	ldr	r0, [r7, #4]
   139e2:	4b0c      	ldr	r3, [pc, #48]	; (13a14 <_ZN14Calendar_Class4InitEv+0x160>)
   139e4:	4798      	blx	r3
			}
		
		}
	}
	enlapsedTime=false;
   139e6:	687b      	ldr	r3, [r7, #4]
   139e8:	2200      	movs	r2, #0
   139ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SaveCurrentDateTime();
   139ee:	687b      	ldr	r3, [r7, #4]
   139f0:	4618      	mov	r0, r3
   139f2:	4b09      	ldr	r3, [pc, #36]	; (13a18 <_ZN14Calendar_Class4InitEv+0x164>)
   139f4:	4798      	blx	r3
	
}
   139f6:	bf00      	nop
   139f8:	3708      	adds	r7, #8
   139fa:	46bd      	mov	sp, r7
   139fc:	bd80      	pop	{r7, pc}
   139fe:	bf00      	nop
   13a00:	20004830 	.word	0x20004830
   13a04:	000046bd 	.word	0x000046bd
   13a08:	00013a1d 	.word	0x00013a1d
   13a0c:	0001423d 	.word	0x0001423d
   13a10:	00013ac3 	.word	0x00013ac3
   13a14:	00013cb9 	.word	0x00013cb9
   13a18:	000141cd 	.word	0x000141cd

00013a1c <_ZN14Calendar_Class11InitMaxDateEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitMaxDate(void){
   13a1c:	b480      	push	{r7}
   13a1e:	b083      	sub	sp, #12
   13a20:	af00      	add	r7, sp, #0
   13a22:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   13a24:	687b      	ldr	r3, [r7, #4]
   13a26:	f640 0202 	movw	r2, #2050	; 0x802
   13a2a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   13a2e:	687b      	ldr	r3, [r7, #4]
   13a30:	220c      	movs	r2, #12
   13a32:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   13a36:	687b      	ldr	r3, [r7, #4]
   13a38:	221f      	movs	r2, #31
   13a3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   13a3e:	687b      	ldr	r3, [r7, #4]
   13a40:	220c      	movs	r2, #12
   13a42:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   13a46:	687b      	ldr	r3, [r7, #4]
   13a48:	223b      	movs	r2, #59	; 0x3b
   13a4a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   13a4e:	687b      	ldr	r3, [r7, #4]
   13a50:	223b      	movs	r2, #59	; 0x3b
   13a52:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   13a56:	687b      	ldr	r3, [r7, #4]
   13a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13a5c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   13a60:	687b      	ldr	r3, [r7, #4]
   13a62:	22ff      	movs	r2, #255	; 0xff
   13a64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   13a68:	687b      	ldr	r3, [r7, #4]
   13a6a:	22ff      	movs	r2, #255	; 0xff
   13a6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   13a70:	687b      	ldr	r3, [r7, #4]
   13a72:	22ff      	movs	r2, #255	; 0xff
   13a74:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   13a78:	687b      	ldr	r3, [r7, #4]
   13a7a:	22ff      	movs	r2, #255	; 0xff
   13a7c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   13a80:	687b      	ldr	r3, [r7, #4]
   13a82:	22ff      	movs	r2, #255	; 0xff
   13a84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   13a88:	687b      	ldr	r3, [r7, #4]
   13a8a:	2200      	movs	r2, #0
   13a8c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   13a90:	687b      	ldr	r3, [r7, #4]
   13a92:	2200      	movs	r2, #0
   13a94:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   13a98:	687b      	ldr	r3, [r7, #4]
   13a9a:	2200      	movs	r2, #0
   13a9c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   13aa0:	687b      	ldr	r3, [r7, #4]
   13aa2:	2200      	movs	r2, #0
   13aa4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   13aa8:	687b      	ldr	r3, [r7, #4]
   13aaa:	2200      	movs	r2, #0
   13aac:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   13ab0:	687b      	ldr	r3, [r7, #4]
   13ab2:	2200      	movs	r2, #0
   13ab4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   13ab8:	bf00      	nop
   13aba:	370c      	adds	r7, #12
   13abc:	46bd      	mov	sp, r7
   13abe:	bc80      	pop	{r7}
   13ac0:	4770      	bx	lr

00013ac2 <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   13ac2:	b480      	push	{r7}
   13ac4:	b083      	sub	sp, #12
   13ac6:	af00      	add	r7, sp, #0
   13ac8:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   13aca:	2332      	movs	r3, #50	; 0x32
   13acc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13ad0:	4613      	mov	r3, r2
   13ad2:	009b      	lsls	r3, r3, #2
   13ad4:	4413      	add	r3, r2
   13ad6:	005b      	lsls	r3, r3, #1
   13ad8:	461a      	mov	r2, r3
   13ada:	2330      	movs	r3, #48	; 0x30
   13adc:	3b30      	subs	r3, #48	; 0x30
   13ade:	441a      	add	r2, r3
   13ae0:	4613      	mov	r3, r2
   13ae2:	009b      	lsls	r3, r3, #2
   13ae4:	4413      	add	r3, r2
   13ae6:	005b      	lsls	r3, r3, #1
   13ae8:	461a      	mov	r2, r3
   13aea:	2332      	movs	r3, #50	; 0x32
   13aec:	3b30      	subs	r3, #48	; 0x30
   13aee:	4413      	add	r3, r2
   13af0:	b29b      	uxth	r3, r3
   13af2:	461a      	mov	r2, r3
   13af4:	0092      	lsls	r2, r2, #2
   13af6:	4413      	add	r3, r2
   13af8:	005b      	lsls	r3, r3, #1
   13afa:	b29a      	uxth	r2, r3
   13afc:	2330      	movs	r3, #48	; 0x30
   13afe:	b29b      	uxth	r3, r3
   13b00:	4413      	add	r3, r2
   13b02:	b29b      	uxth	r3, r3
   13b04:	3b30      	subs	r3, #48	; 0x30
   13b06:	b29a      	uxth	r2, r3
   13b08:	687b      	ldr	r3, [r7, #4]
   13b0a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   13b0e:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13b10:	2b6e      	cmp	r3, #110	; 0x6e
   13b12:	d106      	bne.n	13b22 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   13b14:	2363      	movs	r3, #99	; 0x63
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13b16:	2b61      	cmp	r3, #97	; 0x61
   13b18:	d101      	bne.n	13b1e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   13b1a:	2301      	movs	r3, #1
   13b1c:	e02f      	b.n	13b7e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   13b1e:	2306      	movs	r3, #6
   13b20:	e02d      	b.n	13b7e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   13b22:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13b24:	2b62      	cmp	r3, #98	; 0x62
   13b26:	d029      	beq.n	13b7c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   13b28:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13b2a:	2b72      	cmp	r3, #114	; 0x72
   13b2c:	d106      	bne.n	13b3c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   13b2e:	234f      	movs	r3, #79	; 0x4f
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13b30:	2b4d      	cmp	r3, #77	; 0x4d
   13b32:	d101      	bne.n	13b38 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   13b34:	2303      	movs	r3, #3
   13b36:	e022      	b.n	13b7e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   13b38:	2304      	movs	r3, #4
   13b3a:	e020      	b.n	13b7e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   13b3c:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13b3e:	2b79      	cmp	r3, #121	; 0x79
   13b40:	d01a      	beq.n	13b78 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   13b42:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13b44:	2b6c      	cmp	r3, #108	; 0x6c
   13b46:	d015      	beq.n	13b74 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   13b48:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13b4a:	2b67      	cmp	r3, #103	; 0x67
   13b4c:	d010      	beq.n	13b70 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   13b4e:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13b50:	2b70      	cmp	r3, #112	; 0x70
   13b52:	d00b      	beq.n	13b6c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   13b54:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13b56:	2b74      	cmp	r3, #116	; 0x74
   13b58:	d006      	beq.n	13b68 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   13b5a:	2374      	movs	r3, #116	; 0x74
   13b5c:	2b76      	cmp	r3, #118	; 0x76
   13b5e:	d101      	bne.n	13b64 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   13b60:	230b      	movs	r3, #11
   13b62:	e00c      	b.n	13b7e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   13b64:	230c      	movs	r3, #12
   13b66:	e00a      	b.n	13b7e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   13b68:	230a      	movs	r3, #10
   13b6a:	e008      	b.n	13b7e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   13b6c:	2309      	movs	r3, #9
   13b6e:	e006      	b.n	13b7e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   13b70:	2308      	movs	r3, #8
   13b72:	e004      	b.n	13b7e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   13b74:	2307      	movs	r3, #7
   13b76:	e002      	b.n	13b7e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   13b78:	2305      	movs	r3, #5
   13b7a:	e000      	b.n	13b7e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   13b7c:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   13b7e:	687a      	ldr	r2, [r7, #4]
   13b80:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   13b84:	2320      	movs	r3, #32
   13b86:	2b20      	cmp	r3, #32
   13b88:	d008      	beq.n	13b9c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   13b8a:	2320      	movs	r3, #32
   13b8c:	3b30      	subs	r3, #48	; 0x30
   13b8e:	b2db      	uxtb	r3, r3
   13b90:	461a      	mov	r2, r3
   13b92:	0092      	lsls	r2, r2, #2
   13b94:	4413      	add	r3, r2
   13b96:	005b      	lsls	r3, r3, #1
   13b98:	b2db      	uxtb	r3, r3
   13b9a:	e000      	b.n	13b9e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   13b9c:	2300      	movs	r3, #0
   13b9e:	2231      	movs	r2, #49	; 0x31
   13ba0:	4413      	add	r3, r2
   13ba2:	b2db      	uxtb	r3, r3
   13ba4:	3b30      	subs	r3, #48	; 0x30
   13ba6:	b2da      	uxtb	r2, r3
   13ba8:	687b      	ldr	r3, [r7, #4]
   13baa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   13bae:	2331      	movs	r3, #49	; 0x31
   13bb0:	3b30      	subs	r3, #48	; 0x30
   13bb2:	b2db      	uxtb	r3, r3
   13bb4:	461a      	mov	r2, r3
   13bb6:	0092      	lsls	r2, r2, #2
   13bb8:	4413      	add	r3, r2
   13bba:	005b      	lsls	r3, r3, #1
   13bbc:	b2db      	uxtb	r3, r3
   13bbe:	2239      	movs	r2, #57	; 0x39
   13bc0:	4413      	add	r3, r2
   13bc2:	b2db      	uxtb	r3, r3
   13bc4:	3b30      	subs	r3, #48	; 0x30
   13bc6:	b2da      	uxtb	r2, r3
   13bc8:	687b      	ldr	r3, [r7, #4]
   13bca:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   13bce:	2335      	movs	r3, #53	; 0x35
   13bd0:	3b30      	subs	r3, #48	; 0x30
   13bd2:	b2db      	uxtb	r3, r3
   13bd4:	461a      	mov	r2, r3
   13bd6:	0092      	lsls	r2, r2, #2
   13bd8:	4413      	add	r3, r2
   13bda:	005b      	lsls	r3, r3, #1
   13bdc:	b2db      	uxtb	r3, r3
   13bde:	2234      	movs	r2, #52	; 0x34
   13be0:	4413      	add	r3, r2
   13be2:	b2db      	uxtb	r3, r3
   13be4:	3b30      	subs	r3, #48	; 0x30
   13be6:	b2da      	uxtb	r2, r3
   13be8:	687b      	ldr	r3, [r7, #4]
   13bea:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   13bee:	2334      	movs	r3, #52	; 0x34
   13bf0:	3b30      	subs	r3, #48	; 0x30
   13bf2:	b2db      	uxtb	r3, r3
   13bf4:	461a      	mov	r2, r3
   13bf6:	0092      	lsls	r2, r2, #2
   13bf8:	4413      	add	r3, r2
   13bfa:	005b      	lsls	r3, r3, #1
   13bfc:	b2db      	uxtb	r3, r3
   13bfe:	2238      	movs	r2, #56	; 0x38
   13c00:	4413      	add	r3, r2
   13c02:	b2db      	uxtb	r3, r3
   13c04:	3b30      	subs	r3, #48	; 0x30
   13c06:	b2da      	uxtb	r2, r3
   13c08:	687b      	ldr	r3, [r7, #4]
   13c0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
   13c0e:	bf00      	nop
   13c10:	370c      	adds	r7, #12
   13c12:	46bd      	mov	sp, r7
   13c14:	bc80      	pop	{r7}
   13c16:	4770      	bx	lr

00013c18 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   13c18:	b580      	push	{r7, lr}
   13c1a:	b082      	sub	sp, #8
   13c1c:	af00      	add	r7, sp, #0
   13c1e:	6078      	str	r0, [r7, #4]
   13c20:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   13c22:	687b      	ldr	r3, [r7, #4]
   13c24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   13c28:	6839      	ldr	r1, [r7, #0]
   13c2a:	4618      	mov	r0, r3
   13c2c:	4b03      	ldr	r3, [pc, #12]	; (13c3c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   13c2e:	4798      	blx	r3
   13c30:	4603      	mov	r3, r0
}
   13c32:	4618      	mov	r0, r3
   13c34:	3708      	adds	r7, #8
   13c36:	46bd      	mov	sp, r7
   13c38:	bd80      	pop	{r7, pc}
   13c3a:	bf00      	nop
   13c3c:	0000480d 	.word	0x0000480d

00013c40 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   13c40:	b480      	push	{r7}
   13c42:	b083      	sub	sp, #12
   13c44:	af00      	add	r7, sp, #0
   13c46:	6078      	str	r0, [r7, #4]
   13c48:	460b      	mov	r3, r1
   13c4a:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   13c4c:	887b      	ldrh	r3, [r7, #2]
   13c4e:	f003 0303 	and.w	r3, r3, #3
   13c52:	2b00      	cmp	r3, #0
   13c54:	d001      	beq.n	13c5a <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   13c56:	2300      	movs	r3, #0
   13c58:	e000      	b.n	13c5c <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   13c5a:	2301      	movs	r3, #1
	}
}
   13c5c:	4618      	mov	r0, r3
   13c5e:	370c      	adds	r7, #12
   13c60:	46bd      	mov	sp, r7
   13c62:	bc80      	pop	{r7}
   13c64:	4770      	bx	lr
	...

00013c68 <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   13c68:	b580      	push	{r7, lr}
   13c6a:	b082      	sub	sp, #8
   13c6c:	af00      	add	r7, sp, #0
   13c6e:	6078      	str	r0, [r7, #4]
   13c70:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   13c72:	687b      	ldr	r3, [r7, #4]
   13c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   13c78:	6839      	ldr	r1, [r7, #0]
   13c7a:	4618      	mov	r0, r3
   13c7c:	4b03      	ldr	r3, [pc, #12]	; (13c8c <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   13c7e:	4798      	blx	r3
   13c80:	4603      	mov	r3, r0
}
   13c82:	4618      	mov	r0, r3
   13c84:	3708      	adds	r7, #8
   13c86:	46bd      	mov	sp, r7
   13c88:	bd80      	pop	{r7, pc}
   13c8a:	bf00      	nop
   13c8c:	000046fd 	.word	0x000046fd

00013c90 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   13c90:	b580      	push	{r7, lr}
   13c92:	b082      	sub	sp, #8
   13c94:	af00      	add	r7, sp, #0
   13c96:	6078      	str	r0, [r7, #4]
   13c98:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   13c9a:	687b      	ldr	r3, [r7, #4]
   13c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   13ca0:	6839      	ldr	r1, [r7, #0]
   13ca2:	4618      	mov	r0, r3
   13ca4:	4b03      	ldr	r3, [pc, #12]	; (13cb4 <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   13ca6:	4798      	blx	r3
   13ca8:	4603      	mov	r3, r0
}
   13caa:	4618      	mov	r0, r3
   13cac:	3708      	adds	r7, #8
   13cae:	46bd      	mov	sp, r7
   13cb0:	bd80      	pop	{r7, pc}
   13cb2:	bf00      	nop
   13cb4:	00004785 	.word	0x00004785

00013cb8 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   13cb8:	b580      	push	{r7, lr}
   13cba:	b084      	sub	sp, #16
   13cbc:	af00      	add	r7, sp, #0
   13cbe:	6078      	str	r0, [r7, #4]
   13cc0:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   13cc2:	683a      	ldr	r2, [r7, #0]
   13cc4:	f107 030c 	add.w	r3, r7, #12
   13cc8:	3204      	adds	r2, #4
   13cca:	6810      	ldr	r0, [r2, #0]
   13ccc:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   13cce:	f107 030c 	add.w	r3, r7, #12
   13cd2:	4619      	mov	r1, r3
   13cd4:	6878      	ldr	r0, [r7, #4]
   13cd6:	4b0a      	ldr	r3, [pc, #40]	; (13d00 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   13cd8:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   13cda:	683a      	ldr	r2, [r7, #0]
   13cdc:	f107 0308 	add.w	r3, r7, #8
   13ce0:	8811      	ldrh	r1, [r2, #0]
   13ce2:	7892      	ldrb	r2, [r2, #2]
   13ce4:	8019      	strh	r1, [r3, #0]
   13ce6:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   13ce8:	f107 0308 	add.w	r3, r7, #8
   13cec:	4619      	mov	r1, r3
   13cee:	6878      	ldr	r0, [r7, #4]
   13cf0:	4b04      	ldr	r3, [pc, #16]	; (13d04 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   13cf2:	4798      	blx	r3
   13cf4:	4603      	mov	r3, r0
			
}
   13cf6:	4618      	mov	r0, r3
   13cf8:	3710      	adds	r7, #16
   13cfa:	46bd      	mov	sp, r7
   13cfc:	bd80      	pop	{r7, pc}
   13cfe:	bf00      	nop
   13d00:	00013c91 	.word	0x00013c91
   13d04:	00013c69 	.word	0x00013c69

00013d08 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   13d08:	b580      	push	{r7, lr}
   13d0a:	b086      	sub	sp, #24
   13d0c:	af00      	add	r7, sp, #0
   13d0e:	6078      	str	r0, [r7, #4]
   13d10:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   13d12:	2300      	movs	r3, #0
   13d14:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   13d16:	2300      	movs	r3, #0
   13d18:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   13d1a:	683b      	ldr	r3, [r7, #0]
   13d1c:	88db      	ldrh	r3, [r3, #6]
   13d1e:	b2da      	uxtb	r2, r3
   13d20:	687b      	ldr	r3, [r7, #4]
   13d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   13d26:	699b      	ldr	r3, [r3, #24]
   13d28:	b2db      	uxtb	r3, r3
   13d2a:	1ad3      	subs	r3, r2, r3
   13d2c:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   13d2e:	683b      	ldr	r3, [r7, #0]
   13d30:	795b      	ldrb	r3, [r3, #5]
   13d32:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   13d34:	683b      	ldr	r3, [r7, #0]
   13d36:	791b      	ldrb	r3, [r3, #4]
   13d38:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   13d3a:	683b      	ldr	r3, [r7, #0]
   13d3c:	789b      	ldrb	r3, [r3, #2]
   13d3e:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   13d40:	683b      	ldr	r3, [r7, #0]
   13d42:	785b      	ldrb	r3, [r3, #1]
   13d44:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   13d46:	683b      	ldr	r3, [r7, #0]
   13d48:	781b      	ldrb	r3, [r3, #0]
   13d4a:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   13d4c:	2300      	movs	r3, #0
   13d4e:	613b      	str	r3, [r7, #16]
   13d50:	7bfa      	ldrb	r2, [r7, #15]
   13d52:	693b      	ldr	r3, [r7, #16]
   13d54:	429a      	cmp	r2, r3
   13d56:	d91e      	bls.n	13d96 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   13d58:	687b      	ldr	r3, [r7, #4]
   13d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   13d5e:	699b      	ldr	r3, [r3, #24]
   13d60:	b29a      	uxth	r2, r3
   13d62:	693b      	ldr	r3, [r7, #16]
   13d64:	b29b      	uxth	r3, r3
   13d66:	4413      	add	r3, r2
   13d68:	b29b      	uxth	r3, r3
   13d6a:	4619      	mov	r1, r3
   13d6c:	6878      	ldr	r0, [r7, #4]
   13d6e:	4b27      	ldr	r3, [pc, #156]	; (13e0c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   13d70:	4798      	blx	r3
   13d72:	4603      	mov	r3, r0
   13d74:	2b00      	cmp	r3, #0
   13d76:	d006      	beq.n	13d86 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   13d78:	697b      	ldr	r3, [r7, #20]
   13d7a:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   13d7e:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   13d82:	617b      	str	r3, [r7, #20]
   13d84:	e003      	b.n	13d8e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   13d86:	697a      	ldr	r2, [r7, #20]
   13d88:	4b21      	ldr	r3, [pc, #132]	; (13e10 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   13d8a:	4413      	add	r3, r2
   13d8c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   13d8e:	693b      	ldr	r3, [r7, #16]
   13d90:	3301      	adds	r3, #1
   13d92:	613b      	str	r3, [r7, #16]
   13d94:	e7dc      	b.n	13d50 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   13d96:	2301      	movs	r3, #1
   13d98:	613b      	str	r3, [r7, #16]
   13d9a:	7bba      	ldrb	r2, [r7, #14]
   13d9c:	693b      	ldr	r3, [r7, #16]
   13d9e:	429a      	cmp	r2, r3
   13da0:	d910      	bls.n	13dc4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   13da2:	683b      	ldr	r3, [r7, #0]
   13da4:	88db      	ldrh	r3, [r3, #6]
   13da6:	4619      	mov	r1, r3
   13da8:	693b      	ldr	r3, [r7, #16]
   13daa:	b2db      	uxtb	r3, r3
   13dac:	461a      	mov	r2, r3
   13dae:	6878      	ldr	r0, [r7, #4]
   13db0:	4b18      	ldr	r3, [pc, #96]	; (13e14 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   13db2:	4798      	blx	r3
   13db4:	4602      	mov	r2, r0
   13db6:	697b      	ldr	r3, [r7, #20]
   13db8:	4413      	add	r3, r2
   13dba:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   13dbc:	693b      	ldr	r3, [r7, #16]
   13dbe:	3301      	adds	r3, #1
   13dc0:	613b      	str	r3, [r7, #16]
   13dc2:	e7ea      	b.n	13d9a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   13dc4:	7b7b      	ldrb	r3, [r7, #13]
   13dc6:	3b01      	subs	r3, #1
   13dc8:	4a13      	ldr	r2, [pc, #76]	; (13e18 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   13dca:	fb02 f303 	mul.w	r3, r2, r3
   13dce:	461a      	mov	r2, r3
   13dd0:	697b      	ldr	r3, [r7, #20]
   13dd2:	4413      	add	r3, r2
   13dd4:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   13dd6:	7b3b      	ldrb	r3, [r7, #12]
   13dd8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   13ddc:	fb02 f303 	mul.w	r3, r2, r3
   13de0:	461a      	mov	r2, r3
   13de2:	697b      	ldr	r3, [r7, #20]
   13de4:	4413      	add	r3, r2
   13de6:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   13de8:	7afa      	ldrb	r2, [r7, #11]
   13dea:	4613      	mov	r3, r2
   13dec:	011b      	lsls	r3, r3, #4
   13dee:	1a9b      	subs	r3, r3, r2
   13df0:	009b      	lsls	r3, r3, #2
   13df2:	461a      	mov	r2, r3
   13df4:	697b      	ldr	r3, [r7, #20]
   13df6:	4413      	add	r3, r2
   13df8:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   13dfa:	7abb      	ldrb	r3, [r7, #10]
   13dfc:	697a      	ldr	r2, [r7, #20]
   13dfe:	4413      	add	r3, r2
   13e00:	617b      	str	r3, [r7, #20]

	return tmp;
   13e02:	697b      	ldr	r3, [r7, #20]
}
   13e04:	4618      	mov	r0, r3
   13e06:	3718      	adds	r7, #24
   13e08:	46bd      	mov	sp, r7
   13e0a:	bd80      	pop	{r7, pc}
   13e0c:	00013c41 	.word	0x00013c41
   13e10:	01e13380 	.word	0x01e13380
   13e14:	00013e1d 	.word	0x00013e1d
   13e18:	00015180 	.word	0x00015180

00013e1c <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   13e1c:	b580      	push	{r7, lr}
   13e1e:	b086      	sub	sp, #24
   13e20:	af00      	add	r7, sp, #0
   13e22:	60f8      	str	r0, [r7, #12]
   13e24:	60b9      	str	r1, [r7, #8]
   13e26:	4613      	mov	r3, r2
   13e28:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   13e2a:	2300      	movs	r3, #0
   13e2c:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   13e2e:	68bb      	ldr	r3, [r7, #8]
   13e30:	b29b      	uxth	r3, r3
   13e32:	4619      	mov	r1, r3
   13e34:	68f8      	ldr	r0, [r7, #12]
   13e36:	4b2f      	ldr	r3, [pc, #188]	; (13ef4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   13e38:	4798      	blx	r3
   13e3a:	4603      	mov	r3, r0
   13e3c:	2b00      	cmp	r3, #0
   13e3e:	d028      	beq.n	13e92 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   13e40:	79fb      	ldrb	r3, [r7, #7]
   13e42:	3b01      	subs	r3, #1
   13e44:	2b0b      	cmp	r3, #11
   13e46:	d84c      	bhi.n	13ee2 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   13e48:	a201      	add	r2, pc, #4	; (adr r2, 13e50 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   13e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13e4e:	bf00      	nop
   13e50:	00013e81 	.word	0x00013e81
   13e54:	00013e87 	.word	0x00013e87
   13e58:	00013e81 	.word	0x00013e81
   13e5c:	00013e8d 	.word	0x00013e8d
   13e60:	00013e81 	.word	0x00013e81
   13e64:	00013e8d 	.word	0x00013e8d
   13e68:	00013e81 	.word	0x00013e81
   13e6c:	00013e81 	.word	0x00013e81
   13e70:	00013e8d 	.word	0x00013e8d
   13e74:	00013e81 	.word	0x00013e81
   13e78:	00013e8d 	.word	0x00013e8d
   13e7c:	00013e81 	.word	0x00013e81
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   13e80:	4b1d      	ldr	r3, [pc, #116]	; (13ef8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   13e82:	617b      	str	r3, [r7, #20]
			break;
   13e84:	e030      	b.n	13ee8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   13e86:	4b1d      	ldr	r3, [pc, #116]	; (13efc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   13e88:	617b      	str	r3, [r7, #20]
			break;
   13e8a:	e02d      	b.n	13ee8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   13e8c:	4b1c      	ldr	r3, [pc, #112]	; (13f00 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   13e8e:	617b      	str	r3, [r7, #20]
			break;
   13e90:	e02a      	b.n	13ee8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   13e92:	79fb      	ldrb	r3, [r7, #7]
   13e94:	3b01      	subs	r3, #1
   13e96:	2b0b      	cmp	r3, #11
   13e98:	d825      	bhi.n	13ee6 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   13e9a:	a201      	add	r2, pc, #4	; (adr r2, 13ea0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   13e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13ea0:	00013ed1 	.word	0x00013ed1
   13ea4:	00013ed7 	.word	0x00013ed7
   13ea8:	00013ed1 	.word	0x00013ed1
   13eac:	00013edd 	.word	0x00013edd
   13eb0:	00013ed1 	.word	0x00013ed1
   13eb4:	00013edd 	.word	0x00013edd
   13eb8:	00013ed1 	.word	0x00013ed1
   13ebc:	00013ed1 	.word	0x00013ed1
   13ec0:	00013edd 	.word	0x00013edd
   13ec4:	00013ed1 	.word	0x00013ed1
   13ec8:	00013edd 	.word	0x00013edd
   13ecc:	00013ed1 	.word	0x00013ed1
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   13ed0:	4b09      	ldr	r3, [pc, #36]	; (13ef8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   13ed2:	617b      	str	r3, [r7, #20]
			break;
   13ed4:	e008      	b.n	13ee8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   13ed6:	4b0b      	ldr	r3, [pc, #44]	; (13f04 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   13ed8:	617b      	str	r3, [r7, #20]
			break;
   13eda:	e005      	b.n	13ee8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   13edc:	4b08      	ldr	r3, [pc, #32]	; (13f00 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   13ede:	617b      	str	r3, [r7, #20]
			break;
   13ee0:	e002      	b.n	13ee8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   13ee2:	bf00      	nop
   13ee4:	e000      	b.n	13ee8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   13ee6:	bf00      	nop
		}
	}

	return sec_in_month;
   13ee8:	697b      	ldr	r3, [r7, #20]
}
   13eea:	4618      	mov	r0, r3
   13eec:	3718      	adds	r7, #24
   13eee:	46bd      	mov	sp, r7
   13ef0:	bd80      	pop	{r7, pc}
   13ef2:	bf00      	nop
   13ef4:	00013c41 	.word	0x00013c41
   13ef8:	0028de80 	.word	0x0028de80
   13efc:	00263b80 	.word	0x00263b80
   13f00:	00278d00 	.word	0x00278d00
   13f04:	0024ea00 	.word	0x0024ea00

00013f08 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.min   = tmp_minutes;
	dt->time.sec   = tmp;

	return ERR_NONE;
}
   13f08:	b580      	push	{r7, lr}
   13f0a:	b082      	sub	sp, #8
   13f0c:	af00      	add	r7, sp, #0
   13f0e:	6078      	str	r0, [r7, #4]
   13f10:	6039      	str	r1, [r7, #0]
   13f12:	687b      	ldr	r3, [r7, #4]
   13f14:	2b01      	cmp	r3, #1
   13f16:	d10d      	bne.n	13f34 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13f18:	683b      	ldr	r3, [r7, #0]
   13f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13f1e:	4293      	cmp	r3, r2
   13f20:	d108      	bne.n	13f34 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13f22:	4906      	ldr	r1, [pc, #24]	; (13f3c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13f24:	4806      	ldr	r0, [pc, #24]	; (13f40 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13f26:	4b07      	ldr	r3, [pc, #28]	; (13f44 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13f28:	4798      	blx	r3
   13f2a:	4a07      	ldr	r2, [pc, #28]	; (13f48 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13f2c:	4907      	ldr	r1, [pc, #28]	; (13f4c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13f2e:	4804      	ldr	r0, [pc, #16]	; (13f40 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13f30:	4b07      	ldr	r3, [pc, #28]	; (13f50 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   13f32:	4798      	blx	r3
   13f34:	bf00      	nop
   13f36:	3708      	adds	r7, #8
   13f38:	46bd      	mov	sp, r7
   13f3a:	bd80      	pop	{r7, pc}
   13f3c:	20005120 	.word	0x20005120
   13f40:	20004ae0 	.word	0x20004ae0
   13f44:	00013851 	.word	0x00013851
   13f48:	20000000 	.word	0x20000000
   13f4c:	0001388d 	.word	0x0001388d
   13f50:	000159a5 	.word	0x000159a5

00013f54 <_GLOBAL__sub_I_ptrCalendarClass>:
   13f54:	b580      	push	{r7, lr}
   13f56:	af00      	add	r7, sp, #0
   13f58:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13f5c:	2001      	movs	r0, #1
   13f5e:	4b01      	ldr	r3, [pc, #4]	; (13f64 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   13f60:	4798      	blx	r3
   13f62:	bd80      	pop	{r7, pc}
   13f64:	00013f09 	.word	0x00013f09

00013f68 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   13f68:	b480      	push	{r7}
   13f6a:	b083      	sub	sp, #12
   13f6c:	af00      	add	r7, sp, #0
   13f6e:	6078      	str	r0, [r7, #4]
   13f70:	4a04      	ldr	r2, [pc, #16]	; (13f84 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   13f72:	687b      	ldr	r3, [r7, #4]
   13f74:	601a      	str	r2, [r3, #0]
{
} //~D
   13f76:	687b      	ldr	r3, [r7, #4]
   13f78:	4618      	mov	r0, r3
   13f7a:	370c      	adds	r7, #12
   13f7c:	46bd      	mov	sp, r7
   13f7e:	bc80      	pop	{r7}
   13f80:	4770      	bx	lr
   13f82:	bf00      	nop
   13f84:	000198e4 	.word	0x000198e4

00013f88 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   13f88:	b480      	push	{r7}
   13f8a:	b083      	sub	sp, #12
   13f8c:	af00      	add	r7, sp, #0
   13f8e:	6078      	str	r0, [r7, #4]
   13f90:	4a04      	ldr	r2, [pc, #16]	; (13fa4 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   13f92:	687b      	ldr	r3, [r7, #4]
   13f94:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   13f96:	687b      	ldr	r3, [r7, #4]
   13f98:	4618      	mov	r0, r3
   13f9a:	370c      	adds	r7, #12
   13f9c:	46bd      	mov	sp, r7
   13f9e:	bc80      	pop	{r7}
   13fa0:	4770      	bx	lr
   13fa2:	bf00      	nop
   13fa4:	000198e4 	.word	0x000198e4

00013fa8 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv>:

tick_t	DateTimeLog_Class::GetPowerInterrupTime(void){
   13fa8:	b590      	push	{r4, r7, lr}
   13faa:	b085      	sub	sp, #20
   13fac:	af00      	add	r7, sp, #0
   13fae:	6078      	str	r0, [r7, #4]

	GetDateTime(&dateTime);
   13fb0:	687b      	ldr	r3, [r7, #4]
   13fb2:	681b      	ldr	r3, [r3, #0]
   13fb4:	681b      	ldr	r3, [r3, #0]
   13fb6:	687a      	ldr	r2, [r7, #4]
   13fb8:	3226      	adds	r2, #38	; 0x26
   13fba:	4611      	mov	r1, r2
   13fbc:	6878      	ldr	r0, [r7, #4]
   13fbe:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&dateTime);
   13fc0:	687b      	ldr	r3, [r7, #4]
   13fc2:	681b      	ldr	r3, [r3, #0]
   13fc4:	3304      	adds	r3, #4
   13fc6:	681b      	ldr	r3, [r3, #0]
   13fc8:	687a      	ldr	r2, [r7, #4]
   13fca:	3226      	adds	r2, #38	; 0x26
   13fcc:	4611      	mov	r1, r2
   13fce:	6878      	ldr	r0, [r7, #4]
   13fd0:	4798      	blx	r3
   13fd2:	4602      	mov	r2, r0
   13fd4:	687b      	ldr	r3, [r7, #4]
   13fd6:	609a      	str	r2, [r3, #8]
	ReadLastDateTime();
   13fd8:	6878      	ldr	r0, [r7, #4]
   13fda:	4b1a      	ldr	r3, [pc, #104]	; (14044 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x9c>)
   13fdc:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   13fde:	687b      	ldr	r3, [r7, #4]
   13fe0:	681b      	ldr	r3, [r3, #0]
   13fe2:	3304      	adds	r3, #4
   13fe4:	681b      	ldr	r3, [r3, #0]
   13fe6:	687a      	ldr	r2, [r7, #4]
   13fe8:	322e      	adds	r2, #46	; 0x2e
   13fea:	4611      	mov	r1, r2
   13fec:	6878      	ldr	r0, [r7, #4]
   13fee:	4798      	blx	r3
   13ff0:	4602      	mov	r2, r0
   13ff2:	687b      	ldr	r3, [r7, #4]
   13ff4:	60da      	str	r2, [r3, #12]
	tick_t diferencia;
	if (lastTimestamp==calendar.nullTimestamp)
   13ff6:	687b      	ldr	r3, [r7, #4]
   13ff8:	68da      	ldr	r2, [r3, #12]
   13ffa:	4b13      	ldr	r3, [pc, #76]	; (14048 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa0>)
   13ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   13ffe:	429a      	cmp	r2, r3
   14000:	d103      	bne.n	1400a <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x62>
	{
		diferencia=UPDATE_TIME_MAX*2;
   14002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14006:	60fb      	str	r3, [r7, #12]
   14008:	e016      	b.n	14038 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x90>
	} 
	else
	{
		timeDifference=difftime((time_t)currentTimestamp,(time_t)lastTimestamp);
   1400a:	687b      	ldr	r3, [r7, #4]
   1400c:	689b      	ldr	r3, [r3, #8]
   1400e:	461a      	mov	r2, r3
   14010:	687b      	ldr	r3, [r7, #4]
   14012:	68db      	ldr	r3, [r3, #12]
   14014:	4619      	mov	r1, r3
   14016:	4610      	mov	r0, r2
   14018:	4b0c      	ldr	r3, [pc, #48]	; (1404c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa4>)
   1401a:	4798      	blx	r3
   1401c:	4603      	mov	r3, r0
   1401e:	460c      	mov	r4, r1
   14020:	687a      	ldr	r2, [r7, #4]
   14022:	e9c2 3406 	strd	r3, r4, [r2, #24]
		diferencia=(uint32_t)timeDifference;
   14026:	687b      	ldr	r3, [r7, #4]
   14028:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
   1402c:	4a08      	ldr	r2, [pc, #32]	; (14050 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa8>)
   1402e:	4618      	mov	r0, r3
   14030:	4621      	mov	r1, r4
   14032:	4790      	blx	r2
   14034:	4603      	mov	r3, r0
   14036:	60fb      	str	r3, [r7, #12]
	}

	return	diferencia;
   14038:	68fb      	ldr	r3, [r7, #12]
}
   1403a:	4618      	mov	r0, r3
   1403c:	3714      	adds	r7, #20
   1403e:	46bd      	mov	sp, r7
   14040:	bd90      	pop	{r4, r7, pc}
   14042:	bf00      	nop
   14044:	0001423d 	.word	0x0001423d
   14048:	20004ae0 	.word	0x20004ae0
   1404c:	00017755 	.word	0x00017755
   14050:	000174ed 	.word	0x000174ed

00014054 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    abs(_Tp __x)
   14054:	b5b0      	push	{r4, r5, r7, lr}
   14056:	b082      	sub	sp, #8
   14058:	af00      	add	r7, sp, #0
   1405a:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
   1405c:	4b07      	ldr	r3, [pc, #28]	; (1407c <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
   1405e:	6878      	ldr	r0, [r7, #4]
   14060:	4798      	blx	r3
   14062:	4602      	mov	r2, r0
   14064:	460b      	mov	r3, r1
   14066:	4614      	mov	r4, r2
   14068:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   1406c:	4623      	mov	r3, r4
   1406e:	462c      	mov	r4, r5
   14070:	4618      	mov	r0, r3
   14072:	4621      	mov	r1, r4
   14074:	3708      	adds	r7, #8
   14076:	46bd      	mov	sp, r7
   14078:	bdb0      	pop	{r4, r5, r7, pc}
   1407a:	bf00      	nop
   1407c:	00016ec1 	.word	0x00016ec1

00014080 <_ZN17DateTimeLog_Class14WasInterruptedEv>:

bool	DateTimeLog_Class::WasInterrupted(void){
   14080:	b5b0      	push	{r4, r5, r7, lr}
   14082:	b082      	sub	sp, #8
   14084:	af00      	add	r7, sp, #0
   14086:	6078      	str	r0, [r7, #4]
	
	if (abs(GetPowerInterrupTime()-UPDATE_TIME_MAX)>UPDATE_ERROR)
   14088:	6878      	ldr	r0, [r7, #4]
   1408a:	4b12      	ldr	r3, [pc, #72]	; (140d4 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x54>)
   1408c:	4798      	blx	r3
   1408e:	4603      	mov	r3, r0
   14090:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   14094:	4618      	mov	r0, r3
   14096:	4b10      	ldr	r3, [pc, #64]	; (140d8 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x58>)
   14098:	4798      	blx	r3
   1409a:	2301      	movs	r3, #1
   1409c:	461d      	mov	r5, r3
   1409e:	4c0f      	ldr	r4, [pc, #60]	; (140dc <_ZN17DateTimeLog_Class14WasInterruptedEv+0x5c>)
   140a0:	f04f 0200 	mov.w	r2, #0
   140a4:	4b0e      	ldr	r3, [pc, #56]	; (140e0 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x60>)
   140a6:	47a0      	blx	r4
   140a8:	4603      	mov	r3, r0
   140aa:	2b00      	cmp	r3, #0
   140ac:	d101      	bne.n	140b2 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x32>
   140ae:	2300      	movs	r3, #0
   140b0:	461d      	mov	r5, r3
   140b2:	b2eb      	uxtb	r3, r5
   140b4:	2b00      	cmp	r3, #0
   140b6:	d003      	beq.n	140c0 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x40>
	{
		powerInterrupt=true;
   140b8:	687b      	ldr	r3, [r7, #4]
   140ba:	2201      	movs	r2, #1
   140bc:	711a      	strb	r2, [r3, #4]
   140be:	e002      	b.n	140c6 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x46>
	} 
	else
	{
		powerInterrupt=false;
   140c0:	687b      	ldr	r3, [r7, #4]
   140c2:	2200      	movs	r2, #0
   140c4:	711a      	strb	r2, [r3, #4]
	}
	return	powerInterrupt;
   140c6:	687b      	ldr	r3, [r7, #4]
   140c8:	791b      	ldrb	r3, [r3, #4]
   140ca:	b2db      	uxtb	r3, r3
}
   140cc:	4618      	mov	r0, r3
   140ce:	3708      	adds	r7, #8
   140d0:	46bd      	mov	sp, r7
   140d2:	bdb0      	pop	{r4, r5, r7, pc}
   140d4:	00013fa9 	.word	0x00013fa9
   140d8:	00014055 	.word	0x00014055
   140dc:	000174ad 	.word	0x000174ad
   140e0:	40490000 	.word	0x40490000

000140e4 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv>:

uint32_t	DateTimeLog_Class::IncrementMemoryStack(){
   140e4:	b590      	push	{r4, r7, lr}
   140e6:	b085      	sub	sp, #20
   140e8:	af00      	add	r7, sp, #0
   140ea:	6078      	str	r0, [r7, #4]
	
	uint32_t r=	eeprom.ReadAddress((uint8_t*)&stackValue,stackAdress,1);
   140ec:	687b      	ldr	r3, [r7, #4]
   140ee:	f103 0122 	add.w	r1, r3, #34	; 0x22
   140f2:	687b      	ldr	r3, [r7, #4]
   140f4:	8c1a      	ldrh	r2, [r3, #32]
   140f6:	2301      	movs	r3, #1
   140f8:	480c      	ldr	r0, [pc, #48]	; (1412c <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   140fa:	4c0d      	ldr	r4, [pc, #52]	; (14130 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x4c>)
   140fc:	47a0      	blx	r4
   140fe:	60f8      	str	r0, [r7, #12]
	stackValue=(uint16_t)RollStack();
   14100:	6878      	ldr	r0, [r7, #4]
   14102:	4b0c      	ldr	r3, [pc, #48]	; (14134 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x50>)
   14104:	4798      	blx	r3
   14106:	4603      	mov	r3, r0
   14108:	b29a      	uxth	r2, r3
   1410a:	687b      	ldr	r3, [r7, #4]
   1410c:	845a      	strh	r2, [r3, #34]	; 0x22
	r=	eeprom.WriteAddress((uint8_t*)&stackValue,stackAdress,1);
   1410e:	687b      	ldr	r3, [r7, #4]
   14110:	f103 0122 	add.w	r1, r3, #34	; 0x22
   14114:	687b      	ldr	r3, [r7, #4]
   14116:	8c1a      	ldrh	r2, [r3, #32]
   14118:	2301      	movs	r3, #1
   1411a:	4804      	ldr	r0, [pc, #16]	; (1412c <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   1411c:	4c06      	ldr	r4, [pc, #24]	; (14138 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x54>)
   1411e:	47a0      	blx	r4
   14120:	60f8      	str	r0, [r7, #12]
	return r;
   14122:	68fb      	ldr	r3, [r7, #12]
}
   14124:	4618      	mov	r0, r3
   14126:	3714      	adds	r7, #20
   14128:	46bd      	mov	sp, r7
   1412a:	bd90      	pop	{r4, r7, pc}
   1412c:	20004830 	.word	0x20004830
   14130:	00012d0d 	.word	0x00012d0d
   14134:	0001413d 	.word	0x0001413d
   14138:	00012c09 	.word	0x00012c09

0001413c <_ZN17DateTimeLog_Class9RollStackEv>:
 uint8_t DateTimeLog_Class::RollStack(void)
 {
   1413c:	b480      	push	{r7}
   1413e:	b083      	sub	sp, #12
   14140:	af00      	add	r7, sp, #0
   14142:	6078      	str	r0, [r7, #4]
	 return (uint8_t)(stackValue +1 ) % AT24MAC_BUFFER_SIZE;
   14144:	687b      	ldr	r3, [r7, #4]
   14146:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   14148:	b2db      	uxtb	r3, r3
   1414a:	3301      	adds	r3, #1
   1414c:	b2db      	uxtb	r3, r3
   1414e:	f003 030f 	and.w	r3, r3, #15
   14152:	b2db      	uxtb	r3, r3
 }
   14154:	4618      	mov	r0, r3
   14156:	370c      	adds	r7, #12
   14158:	46bd      	mov	sp, r7
   1415a:	bc80      	pop	{r7}
   1415c:	4770      	bx	lr
	...

00014160 <_ZN17DateTimeLog_Class14ReadStackValueEv>:
 
 uint8_t	DateTimeLog_Class::ReadStackValue(void){
   14160:	b590      	push	{r4, r7, lr}
   14162:	b085      	sub	sp, #20
   14164:	af00      	add	r7, sp, #0
   14166:	6078      	str	r0, [r7, #4]
	 uint8_t s;
	eeprom.ReadAddress(&s,stackAdress,1);
   14168:	687b      	ldr	r3, [r7, #4]
   1416a:	8c1a      	ldrh	r2, [r3, #32]
   1416c:	f107 010f 	add.w	r1, r7, #15
   14170:	2301      	movs	r3, #1
   14172:	4804      	ldr	r0, [pc, #16]	; (14184 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x24>)
   14174:	4c04      	ldr	r4, [pc, #16]	; (14188 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x28>)
   14176:	47a0      	blx	r4
	 return	s;
   14178:	7bfb      	ldrb	r3, [r7, #15]
 }
   1417a:	4618      	mov	r0, r3
   1417c:	3714      	adds	r7, #20
   1417e:	46bd      	mov	sp, r7
   14180:	bd90      	pop	{r4, r7, pc}
   14182:	bf00      	nop
   14184:	20004830 	.word	0x20004830
   14188:	00012d0d 	.word	0x00012d0d

0001418c <_ZN17DateTimeLog_Class23SetCalendarStackAddressEm>:
 
 uint16_t	DateTimeLog_Class::SetCalendarStackAddress(uint32_t add){
   1418c:	b480      	push	{r7}
   1418e:	b083      	sub	sp, #12
   14190:	af00      	add	r7, sp, #0
   14192:	6078      	str	r0, [r7, #4]
   14194:	6039      	str	r1, [r7, #0]
	 stackAdress=(uint16_t)(add&0xffff);
   14196:	683b      	ldr	r3, [r7, #0]
   14198:	b29a      	uxth	r2, r3
   1419a:	687b      	ldr	r3, [r7, #4]
   1419c:	841a      	strh	r2, [r3, #32]
	 return	stackAdress;
   1419e:	687b      	ldr	r3, [r7, #4]
   141a0:	8c1b      	ldrh	r3, [r3, #32]
 }
   141a2:	4618      	mov	r0, r3
   141a4:	370c      	adds	r7, #12
   141a6:	46bd      	mov	sp, r7
   141a8:	bc80      	pop	{r7}
   141aa:	4770      	bx	lr

000141ac <_ZN17DateTimeLog_Class18SetCalendarAddressEm>:
uint16_t	DateTimeLog_Class::SetCalendarAddress(uint32_t add){
   141ac:	b480      	push	{r7}
   141ae:	b083      	sub	sp, #12
   141b0:	af00      	add	r7, sp, #0
   141b2:	6078      	str	r0, [r7, #4]
   141b4:	6039      	str	r1, [r7, #0]
	dataTimeLogsAddress=(uint16_t)(add&0xffff);
   141b6:	683b      	ldr	r3, [r7, #0]
   141b8:	b29a      	uxth	r2, r3
   141ba:	687b      	ldr	r3, [r7, #4]
   141bc:	849a      	strh	r2, [r3, #36]	; 0x24
	return	dataTimeLogsAddress;
   141be:	687b      	ldr	r3, [r7, #4]
   141c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
   141c2:	4618      	mov	r0, r3
   141c4:	370c      	adds	r7, #12
   141c6:	46bd      	mov	sp, r7
   141c8:	bc80      	pop	{r7}
   141ca:	4770      	bx	lr

000141cc <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv>:
uint32_t	DateTimeLog_Class::SaveCurrentDateTime(void){
   141cc:	b590      	push	{r4, r7, lr}
   141ce:	b085      	sub	sp, #20
   141d0:	af00      	add	r7, sp, #0
   141d2:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   141d4:	6878      	ldr	r0, [r7, #4]
   141d6:	4b15      	ldr	r3, [pc, #84]	; (1422c <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x60>)
   141d8:	4798      	blx	r3
   141da:	4603      	mov	r3, r0
   141dc:	b29a      	uxth	r2, r3
   141de:	687b      	ldr	r3, [r7, #4]
   141e0:	845a      	strh	r2, [r3, #34]	; 0x22
	GetDateTime(&dateTime);
   141e2:	687b      	ldr	r3, [r7, #4]
   141e4:	681b      	ldr	r3, [r3, #0]
   141e6:	681b      	ldr	r3, [r3, #0]
   141e8:	687a      	ldr	r2, [r7, #4]
   141ea:	3226      	adds	r2, #38	; 0x26
   141ec:	4611      	mov	r1, r2
   141ee:	6878      	ldr	r0, [r7, #4]
   141f0:	4798      	blx	r3
	handler=(PTR_DATE_TIME)(&dateTime);
   141f2:	687b      	ldr	r3, [r7, #4]
   141f4:	3326      	adds	r3, #38	; 0x26
   141f6:	461a      	mov	r2, r3
   141f8:	687b      	ldr	r3, [r7, #4]
   141fa:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t	w= eeprom.WriteAddress((uint8_t*)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   141fc:	687b      	ldr	r3, [r7, #4]
   141fe:	6b99      	ldr	r1, [r3, #56]	; 0x38
   14200:	687b      	ldr	r3, [r7, #4]
   14202:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   14204:	b2da      	uxtb	r2, r3
   14206:	687b      	ldr	r3, [r7, #4]
   14208:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   1420a:	b2db      	uxtb	r3, r3
   1420c:	4413      	add	r3, r2
   1420e:	b2da      	uxtb	r2, r3
   14210:	2308      	movs	r3, #8
   14212:	4807      	ldr	r0, [pc, #28]	; (14230 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x64>)
   14214:	4c07      	ldr	r4, [pc, #28]	; (14234 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x68>)
   14216:	47a0      	blx	r4
   14218:	60f8      	str	r0, [r7, #12]
	IncrementMemoryStack();
   1421a:	6878      	ldr	r0, [r7, #4]
   1421c:	4b06      	ldr	r3, [pc, #24]	; (14238 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x6c>)
   1421e:	4798      	blx	r3
	return	w;
   14220:	68fb      	ldr	r3, [r7, #12]
}
   14222:	4618      	mov	r0, r3
   14224:	3714      	adds	r7, #20
   14226:	46bd      	mov	sp, r7
   14228:	bd90      	pop	{r4, r7, pc}
   1422a:	bf00      	nop
   1422c:	00014161 	.word	0x00014161
   14230:	20004830 	.word	0x20004830
   14234:	00012b75 	.word	0x00012b75
   14238:	000140e5 	.word	0x000140e5

0001423c <_ZN17DateTimeLog_Class16ReadLastDateTimeEv>:

uint32_t	DateTimeLog_Class::ReadLastDateTime(void){
   1423c:	b590      	push	{r4, r7, lr}
   1423e:	b085      	sub	sp, #20
   14240:	af00      	add	r7, sp, #0
   14242:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   14244:	6878      	ldr	r0, [r7, #4]
   14246:	4b0f      	ldr	r3, [pc, #60]	; (14284 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x48>)
   14248:	4798      	blx	r3
   1424a:	4603      	mov	r3, r0
   1424c:	b29a      	uxth	r2, r3
   1424e:	687b      	ldr	r3, [r7, #4]
   14250:	845a      	strh	r2, [r3, #34]	; 0x22
	handler=(PTR_DATE_TIME)(&lastDateTime);
   14252:	687b      	ldr	r3, [r7, #4]
   14254:	332e      	adds	r3, #46	; 0x2e
   14256:	461a      	mov	r2, r3
   14258:	687b      	ldr	r3, [r7, #4]
   1425a:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t r=	eeprom.ReadAddress((uint8_t *)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   1425c:	687b      	ldr	r3, [r7, #4]
   1425e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   14260:	687b      	ldr	r3, [r7, #4]
   14262:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   14264:	b2da      	uxtb	r2, r3
   14266:	687b      	ldr	r3, [r7, #4]
   14268:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   1426a:	b2db      	uxtb	r3, r3
   1426c:	4413      	add	r3, r2
   1426e:	b2da      	uxtb	r2, r3
   14270:	2308      	movs	r3, #8
   14272:	4805      	ldr	r0, [pc, #20]	; (14288 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x4c>)
   14274:	4c05      	ldr	r4, [pc, #20]	; (1428c <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x50>)
   14276:	47a0      	blx	r4
   14278:	60f8      	str	r0, [r7, #12]
	return	r;
   1427a:	68fb      	ldr	r3, [r7, #12]
}
   1427c:	4618      	mov	r0, r3
   1427e:	3714      	adds	r7, #20
   14280:	46bd      	mov	sp, r7
   14282:	bd90      	pop	{r4, r7, pc}
   14284:	00014161 	.word	0x00014161
   14288:	20004830 	.word	0x20004830
   1428c:	00012c9d 	.word	0x00012c9d

00014290 <_ZL10CountTicksPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerClass->handler();
}
static void CountTicks(const struct timer_task *const timer_task)
{
   14290:	b480      	push	{r7}
   14292:	b083      	sub	sp, #12
   14294:	af00      	add	r7, sp, #0
   14296:	6078      	str	r0, [r7, #4]
	ptrTimerClass->ticks++;
   14298:	4b04      	ldr	r3, [pc, #16]	; (142ac <_ZL10CountTicksPK10timer_task+0x1c>)
   1429a:	681b      	ldr	r3, [r3, #0]
   1429c:	689a      	ldr	r2, [r3, #8]
   1429e:	3201      	adds	r2, #1
   142a0:	609a      	str	r2, [r3, #8]
}
   142a2:	bf00      	nop
   142a4:	370c      	adds	r7, #12
   142a6:	46bd      	mov	sp, r7
   142a8:	bc80      	pop	{r7}
   142aa:	4770      	bx	lr
   142ac:	20004b88 	.word	0x20004b88

000142b0 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   142b0:	b480      	push	{r7}
   142b2:	b083      	sub	sp, #12
   142b4:	af00      	add	r7, sp, #0
   142b6:	6078      	str	r0, [r7, #4]
   142b8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   142ba:	687b      	ldr	r3, [r7, #4]
   142bc:	683a      	ldr	r2, [r7, #0]
   142be:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
   142c0:	4a07      	ldr	r2, [pc, #28]	; (142e0 <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
   142c2:	687b      	ldr	r3, [r7, #4]
   142c4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   142c6:	687b      	ldr	r3, [r7, #4]
   142c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   142cc:	615a      	str	r2, [r3, #20]
	task=&countTicks;
   142ce:	687b      	ldr	r3, [r7, #4]
   142d0:	4a04      	ldr	r2, [pc, #16]	; (142e4 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
   142d2:	619a      	str	r2, [r3, #24]
	//task->cb=task_cb;
} //Timer_Class
   142d4:	687b      	ldr	r3, [r7, #4]
   142d6:	4618      	mov	r0, r3
   142d8:	370c      	adds	r7, #12
   142da:	46bd      	mov	sp, r7
   142dc:	bc80      	pop	{r7}
   142de:	4770      	bx	lr
   142e0:	20004b88 	.word	0x20004b88
   142e4:	20004c2c 	.word	0x20004c2c

000142e8 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   142e8:	b480      	push	{r7}
   142ea:	b083      	sub	sp, #12
   142ec:	af00      	add	r7, sp, #0
   142ee:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   142f0:	687b      	ldr	r3, [r7, #4]
   142f2:	2200      	movs	r2, #0
   142f4:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   142f6:	687b      	ldr	r3, [r7, #4]
   142f8:	4618      	mov	r0, r3
   142fa:	370c      	adds	r7, #12
   142fc:	46bd      	mov	sp, r7
   142fe:	bc80      	pop	{r7}
   14300:	4770      	bx	lr
	...

00014304 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
void Timer_Class::Init(void){
   14304:	b580      	push	{r7, lr}
   14306:	b082      	sub	sp, #8
   14308:	af00      	add	r7, sp, #0
   1430a:	6078      	str	r0, [r7, #4]
	ticks=0;
   1430c:	687b      	ldr	r3, [r7, #4]
   1430e:	2200      	movs	r2, #0
   14310:	609a      	str	r2, [r3, #8]
	add_periodic_task(FUNC_PTR(CountTicks),1);
   14312:	2201      	movs	r2, #1
   14314:	4905      	ldr	r1, [pc, #20]	; (1432c <_ZN11Timer_Class4InitEv+0x28>)
   14316:	6878      	ldr	r0, [r7, #4]
   14318:	4b05      	ldr	r3, [pc, #20]	; (14330 <_ZN11Timer_Class4InitEv+0x2c>)
   1431a:	4798      	blx	r3
	start();
   1431c:	6878      	ldr	r0, [r7, #4]
   1431e:	4b05      	ldr	r3, [pc, #20]	; (14334 <_ZN11Timer_Class4InitEv+0x30>)
   14320:	4798      	blx	r3
}
   14322:	bf00      	nop
   14324:	3708      	adds	r7, #8
   14326:	46bd      	mov	sp, r7
   14328:	bd80      	pop	{r7, pc}
   1432a:	bf00      	nop
   1432c:	00014291 	.word	0x00014291
   14330:	000143e1 	.word	0x000143e1
   14334:	00014339 	.word	0x00014339

00014338 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
   14338:	b580      	push	{r7, lr}
   1433a:	b084      	sub	sp, #16
   1433c:	af00      	add	r7, sp, #0
   1433e:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   14340:	687b      	ldr	r3, [r7, #4]
   14342:	68db      	ldr	r3, [r3, #12]
   14344:	4618      	mov	r0, r3
   14346:	4b04      	ldr	r3, [pc, #16]	; (14358 <_ZN11Timer_Class5startEv+0x20>)
   14348:	4798      	blx	r3
   1434a:	60f8      	str	r0, [r7, #12]
	return status;
   1434c:	68fb      	ldr	r3, [r7, #12]
	
}
   1434e:	4618      	mov	r0, r3
   14350:	3710      	adds	r7, #16
   14352:	46bd      	mov	sp, r7
   14354:	bd80      	pop	{r7, pc}
   14356:	bf00      	nop
   14358:	00005881 	.word	0x00005881

0001435c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   1435c:	b580      	push	{r7, lr}
   1435e:	b086      	sub	sp, #24
   14360:	af00      	add	r7, sp, #0
   14362:	60f8      	str	r0, [r7, #12]
   14364:	60b9      	str	r1, [r7, #8]
   14366:	607a      	str	r2, [r7, #4]
   14368:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   1436a:	68f8      	ldr	r0, [r7, #12]
   1436c:	4b0d      	ldr	r3, [pc, #52]	; (143a4 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   1436e:	4798      	blx	r3
	task->interval = interval;
   14370:	68fb      	ldr	r3, [r7, #12]
   14372:	699b      	ldr	r3, [r3, #24]
   14374:	687a      	ldr	r2, [r7, #4]
   14376:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   14378:	68fb      	ldr	r3, [r7, #12]
   1437a:	699b      	ldr	r3, [r3, #24]
   1437c:	68ba      	ldr	r2, [r7, #8]
   1437e:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   14380:	68fb      	ldr	r3, [r7, #12]
   14382:	699b      	ldr	r3, [r3, #24]
   14384:	78fa      	ldrb	r2, [r7, #3]
   14386:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   14388:	68fb      	ldr	r3, [r7, #12]
   1438a:	68da      	ldr	r2, [r3, #12]
   1438c:	68fb      	ldr	r3, [r7, #12]
   1438e:	699b      	ldr	r3, [r3, #24]
   14390:	4619      	mov	r1, r3
   14392:	4610      	mov	r0, r2
   14394:	4b04      	ldr	r3, [pc, #16]	; (143a8 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   14396:	4798      	blx	r3
   14398:	6178      	str	r0, [r7, #20]
	
	return status;
   1439a:	697b      	ldr	r3, [r7, #20]
}
   1439c:	4618      	mov	r0, r3
   1439e:	3718      	adds	r7, #24
   143a0:	46bd      	mov	sp, r7
   143a2:	bd80      	pop	{r7, pc}
   143a4:	00014459 	.word	0x00014459
   143a8:	00005931 	.word	0x00005931

000143ac <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
   143ac:	b580      	push	{r7, lr}
   143ae:	b084      	sub	sp, #16
   143b0:	af00      	add	r7, sp, #0
   143b2:	60f8      	str	r0, [r7, #12]
   143b4:	60b9      	str	r1, [r7, #8]
   143b6:	607a      	str	r2, [r7, #4]
	 add_periodic_task(func,interval);
   143b8:	687a      	ldr	r2, [r7, #4]
   143ba:	68b9      	ldr	r1, [r7, #8]
   143bc:	68f8      	ldr	r0, [r7, #12]
   143be:	4b06      	ldr	r3, [pc, #24]	; (143d8 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x2c>)
   143c0:	4798      	blx	r3
	 return timer_start(timer_descr);
   143c2:	68fb      	ldr	r3, [r7, #12]
   143c4:	68db      	ldr	r3, [r3, #12]
   143c6:	4618      	mov	r0, r3
   143c8:	4b04      	ldr	r3, [pc, #16]	; (143dc <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x30>)
   143ca:	4798      	blx	r3
   143cc:	4603      	mov	r3, r0
}
   143ce:	4618      	mov	r0, r3
   143d0:	3710      	adds	r7, #16
   143d2:	46bd      	mov	sp, r7
   143d4:	bd80      	pop	{r7, pc}
   143d6:	bf00      	nop
   143d8:	000143e1 	.word	0x000143e1
   143dc:	00005881 	.word	0x00005881

000143e0 <_ZN11Timer_Class17add_periodic_taskEPFvvEm>:
int32_t Timer_Class::add_periodic_task(FUNC_PTR func,uint32_t interval){
   143e0:	b590      	push	{r4, r7, lr}
   143e2:	b087      	sub	sp, #28
   143e4:	af00      	add	r7, sp, #0
   143e6:	60f8      	str	r0, [r7, #12]
   143e8:	60b9      	str	r1, [r7, #8]
   143ea:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   143ec:	2301      	movs	r3, #1
   143ee:	687a      	ldr	r2, [r7, #4]
   143f0:	68b9      	ldr	r1, [r7, #8]
   143f2:	68f8      	ldr	r0, [r7, #12]
   143f4:	4c03      	ldr	r4, [pc, #12]	; (14404 <_ZN11Timer_Class17add_periodic_taskEPFvvEm+0x24>)
   143f6:	47a0      	blx	r4
   143f8:	6178      	str	r0, [r7, #20]
		return status;
   143fa:	697b      	ldr	r3, [r7, #20]
}
   143fc:	4618      	mov	r0, r3
   143fe:	371c      	adds	r7, #28
   14400:	46bd      	mov	sp, r7
   14402:	bd90      	pop	{r4, r7, pc}
   14404:	0001435d 	.word	0x0001435d

00014408 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm>:
int32_t Timer_Class::add_oneShot_task(FUNC_PTR func,uint32_t interval){
   14408:	b590      	push	{r4, r7, lr}
   1440a:	b087      	sub	sp, #28
   1440c:	af00      	add	r7, sp, #0
   1440e:	60f8      	str	r0, [r7, #12]
   14410:	60b9      	str	r1, [r7, #8]
   14412:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   14414:	2300      	movs	r3, #0
   14416:	687a      	ldr	r2, [r7, #4]
   14418:	68b9      	ldr	r1, [r7, #8]
   1441a:	68f8      	ldr	r0, [r7, #12]
   1441c:	4c06      	ldr	r4, [pc, #24]	; (14438 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm+0x30>)
   1441e:	47a0      	blx	r4
   14420:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   14422:	68fb      	ldr	r3, [r7, #12]
   14424:	68db      	ldr	r3, [r3, #12]
   14426:	4618      	mov	r0, r3
   14428:	4b04      	ldr	r3, [pc, #16]	; (1443c <_ZN11Timer_Class16add_oneShot_taskEPFvvEm+0x34>)
   1442a:	4798      	blx	r3
   1442c:	6178      	str	r0, [r7, #20]
	return status;
   1442e:	697b      	ldr	r3, [r7, #20]
}
   14430:	4618      	mov	r0, r3
   14432:	371c      	adds	r7, #28
   14434:	46bd      	mov	sp, r7
   14436:	bd90      	pop	{r4, r7, pc}
   14438:	0001435d 	.word	0x0001435d
   1443c:	00005881 	.word	0x00005881

00014440 <_ZN11Timer_Class9Get_ticksEv>:
	task->cb=NULL;
}



uint32_t	Timer_Class::Get_ticks(void){
   14440:	b480      	push	{r7}
   14442:	b083      	sub	sp, #12
   14444:	af00      	add	r7, sp, #0
   14446:	6078      	str	r0, [r7, #4]
	
		return ticks;
   14448:	687b      	ldr	r3, [r7, #4]
   1444a:	689b      	ldr	r3, [r3, #8]
}
   1444c:	4618      	mov	r0, r3
   1444e:	370c      	adds	r7, #12
   14450:	46bd      	mov	sp, r7
   14452:	bc80      	pop	{r7}
   14454:	4770      	bx	lr
	...

00014458 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}
void	Timer_Class::ChooseAvailableTimerTask(void){
   14458:	b480      	push	{r7}
   1445a:	b083      	sub	sp, #12
   1445c:	af00      	add	r7, sp, #0
   1445e:	6078      	str	r0, [r7, #4]
	for (i = 0; i < TASK_NUMBER; i++)
   14460:	687b      	ldr	r3, [r7, #4]
   14462:	2200      	movs	r2, #0
   14464:	771a      	strb	r2, [r3, #28]
   14466:	687b      	ldr	r3, [r7, #4]
   14468:	7f1b      	ldrb	r3, [r3, #28]
   1446a:	2b07      	cmp	r3, #7
   1446c:	dc1f      	bgt.n	144ae <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x56>
	{
		if (taskArray[i].cb==NULL)
   1446e:	687b      	ldr	r3, [r7, #4]
   14470:	7f1b      	ldrb	r3, [r3, #28]
   14472:	4619      	mov	r1, r3
   14474:	4a11      	ldr	r2, [pc, #68]	; (144bc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x64>)
   14476:	460b      	mov	r3, r1
   14478:	009b      	lsls	r3, r3, #2
   1447a:	440b      	add	r3, r1
   1447c:	009b      	lsls	r3, r3, #2
   1447e:	4413      	add	r3, r2
   14480:	330c      	adds	r3, #12
   14482:	681b      	ldr	r3, [r3, #0]
   14484:	2b00      	cmp	r3, #0
   14486:	d10b      	bne.n	144a0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x48>
		{
			
			task=&taskArray[i];
   14488:	687b      	ldr	r3, [r7, #4]
   1448a:	7f1b      	ldrb	r3, [r3, #28]
   1448c:	461a      	mov	r2, r3
   1448e:	4613      	mov	r3, r2
   14490:	009b      	lsls	r3, r3, #2
   14492:	4413      	add	r3, r2
   14494:	009b      	lsls	r3, r3, #2
   14496:	4a09      	ldr	r2, [pc, #36]	; (144bc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x64>)
   14498:	441a      	add	r2, r3
   1449a:	687b      	ldr	r3, [r7, #4]
   1449c:	619a      	str	r2, [r3, #24]
			return;
   1449e:	e009      	b.n	144b4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < TASK_NUMBER; i++)
   144a0:	687b      	ldr	r3, [r7, #4]
   144a2:	7f1b      	ldrb	r3, [r3, #28]
   144a4:	3301      	adds	r3, #1
   144a6:	b2da      	uxtb	r2, r3
   144a8:	687b      	ldr	r3, [r7, #4]
   144aa:	771a      	strb	r2, [r3, #28]
   144ac:	e7db      	b.n	14466 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xe>
			
		}
	}
	task=&taskArray[0];
   144ae:	687b      	ldr	r3, [r7, #4]
   144b0:	4a02      	ldr	r2, [pc, #8]	; (144bc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x64>)
   144b2:	619a      	str	r2, [r3, #24]

}
   144b4:	370c      	adds	r7, #12
   144b6:	46bd      	mov	sp, r7
   144b8:	bc80      	pop	{r7}
   144ba:	4770      	bx	lr
   144bc:	20004b8c 	.word	0x20004b8c

000144c0 <_Z41__static_initialization_and_destruction_0ii>:
}

Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
   144c0:	b580      	push	{r7, lr}
   144c2:	b082      	sub	sp, #8
   144c4:	af00      	add	r7, sp, #0
   144c6:	6078      	str	r0, [r7, #4]
   144c8:	6039      	str	r1, [r7, #0]
   144ca:	687b      	ldr	r3, [r7, #4]
   144cc:	2b01      	cmp	r3, #1
   144ce:	d128      	bne.n	14522 <_Z41__static_initialization_and_destruction_0ii+0x62>
   144d0:	683b      	ldr	r3, [r7, #0]
   144d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   144d6:	4293      	cmp	r3, r2
   144d8:	d123      	bne.n	14522 <_Z41__static_initialization_and_destruction_0ii+0x62>
Timer_Class eventTimer(&TIMER_EVENT);
   144da:	4914      	ldr	r1, [pc, #80]	; (1452c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   144dc:	4814      	ldr	r0, [pc, #80]	; (14530 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   144de:	4b15      	ldr	r3, [pc, #84]	; (14534 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   144e0:	4798      	blx	r3
   144e2:	4a15      	ldr	r2, [pc, #84]	; (14538 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   144e4:	4915      	ldr	r1, [pc, #84]	; (1453c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   144e6:	4812      	ldr	r0, [pc, #72]	; (14530 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   144e8:	4b15      	ldr	r3, [pc, #84]	; (14540 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   144ea:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
   144ec:	4915      	ldr	r1, [pc, #84]	; (14544 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   144ee:	4816      	ldr	r0, [pc, #88]	; (14548 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   144f0:	4b10      	ldr	r3, [pc, #64]	; (14534 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   144f2:	4798      	blx	r3
   144f4:	4a10      	ldr	r2, [pc, #64]	; (14538 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   144f6:	4911      	ldr	r1, [pc, #68]	; (1453c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   144f8:	4813      	ldr	r0, [pc, #76]	; (14548 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   144fa:	4b11      	ldr	r3, [pc, #68]	; (14540 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   144fc:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
   144fe:	4913      	ldr	r1, [pc, #76]	; (1454c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   14500:	4813      	ldr	r0, [pc, #76]	; (14550 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   14502:	4b0c      	ldr	r3, [pc, #48]	; (14534 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   14504:	4798      	blx	r3
   14506:	4a0c      	ldr	r2, [pc, #48]	; (14538 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   14508:	490c      	ldr	r1, [pc, #48]	; (1453c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   1450a:	4811      	ldr	r0, [pc, #68]	; (14550 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   1450c:	4b0c      	ldr	r3, [pc, #48]	; (14540 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   1450e:	4798      	blx	r3
   14510:	4910      	ldr	r1, [pc, #64]	; (14554 <_Z41__static_initialization_and_destruction_0ii+0x94>)
   14512:	4811      	ldr	r0, [pc, #68]	; (14558 <_Z41__static_initialization_and_destruction_0ii+0x98>)
   14514:	4b07      	ldr	r3, [pc, #28]	; (14534 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   14516:	4798      	blx	r3
   14518:	4a07      	ldr	r2, [pc, #28]	; (14538 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   1451a:	4908      	ldr	r1, [pc, #32]	; (1453c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   1451c:	480e      	ldr	r0, [pc, #56]	; (14558 <_Z41__static_initialization_and_destruction_0ii+0x98>)
   1451e:	4b08      	ldr	r3, [pc, #32]	; (14540 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   14520:	4798      	blx	r3
   14522:	bf00      	nop
   14524:	3708      	adds	r7, #8
   14526:	46bd      	mov	sp, r7
   14528:	bd80      	pop	{r7, pc}
   1452a:	bf00      	nop
   1452c:	20004fd0 	.word	0x20004fd0
   14530:	20004c40 	.word	0x20004c40
   14534:	000142b1 	.word	0x000142b1
   14538:	20000000 	.word	0x20000000
   1453c:	000142e9 	.word	0x000142e9
   14540:	000159a5 	.word	0x000159a5
   14544:	200050c4 	.word	0x200050c4
   14548:	20004c60 	.word	0x20004c60
   1454c:	20004fec 	.word	0x20004fec
   14550:	20004c80 	.word	0x20004c80
   14554:	2000504c 	.word	0x2000504c
   14558:	20004ca0 	.word	0x20004ca0

0001455c <_GLOBAL__sub_I_ptrTimerClass>:
   1455c:	b580      	push	{r7, lr}
   1455e:	af00      	add	r7, sp, #0
   14560:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14564:	2001      	movs	r0, #1
   14566:	4b01      	ldr	r3, [pc, #4]	; (1456c <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   14568:	4798      	blx	r3
   1456a:	bd80      	pop	{r7, pc}
   1456c:	000144c1 	.word	0x000144c1

00014570 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   14570:	b480      	push	{r7}
   14572:	b083      	sub	sp, #12
   14574:	af00      	add	r7, sp, #0
   14576:	6078      	str	r0, [r7, #4]
   14578:	4a05      	ldr	r2, [pc, #20]	; (14590 <_ZN5PrintC1Ev+0x20>)
   1457a:	687b      	ldr	r3, [r7, #4]
   1457c:	601a      	str	r2, [r3, #0]
   1457e:	687b      	ldr	r3, [r7, #4]
   14580:	2200      	movs	r2, #0
   14582:	605a      	str	r2, [r3, #4]
   14584:	687b      	ldr	r3, [r7, #4]
   14586:	4618      	mov	r0, r3
   14588:	370c      	adds	r7, #12
   1458a:	46bd      	mov	sp, r7
   1458c:	bc80      	pop	{r7}
   1458e:	4770      	bx	lr
   14590:	00019960 	.word	0x00019960

00014594 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   14594:	b480      	push	{r7}
   14596:	b083      	sub	sp, #12
   14598:	af00      	add	r7, sp, #0
   1459a:	6078      	str	r0, [r7, #4]
   1459c:	2300      	movs	r3, #0
   1459e:	4618      	mov	r0, r3
   145a0:	370c      	adds	r7, #12
   145a2:	46bd      	mov	sp, r7
   145a4:	bc80      	pop	{r7}
   145a6:	4770      	bx	lr

000145a8 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   145a8:	b480      	push	{r7}
   145aa:	b083      	sub	sp, #12
   145ac:	af00      	add	r7, sp, #0
   145ae:	6078      	str	r0, [r7, #4]
   145b0:	bf00      	nop
   145b2:	370c      	adds	r7, #12
   145b4:	46bd      	mov	sp, r7
   145b6:	bc80      	pop	{r7}
   145b8:	4770      	bx	lr
	...

000145bc <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   145bc:	b580      	push	{r7, lr}
   145be:	b082      	sub	sp, #8
   145c0:	af00      	add	r7, sp, #0
   145c2:	6078      	str	r0, [r7, #4]
   145c4:	687b      	ldr	r3, [r7, #4]
   145c6:	4618      	mov	r0, r3
   145c8:	4b06      	ldr	r3, [pc, #24]	; (145e4 <_ZN6StreamC1Ev+0x28>)
   145ca:	4798      	blx	r3
   145cc:	4a06      	ldr	r2, [pc, #24]	; (145e8 <_ZN6StreamC1Ev+0x2c>)
   145ce:	687b      	ldr	r3, [r7, #4]
   145d0:	601a      	str	r2, [r3, #0]
   145d2:	687b      	ldr	r3, [r7, #4]
   145d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   145d8:	609a      	str	r2, [r3, #8]
   145da:	687b      	ldr	r3, [r7, #4]
   145dc:	4618      	mov	r0, r3
   145de:	3708      	adds	r7, #8
   145e0:	46bd      	mov	sp, r7
   145e2:	bd80      	pop	{r7, pc}
   145e4:	00014571 	.word	0x00014571
   145e8:	00019924 	.word	0x00019924

000145ec <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
   145ec:	b480      	push	{r7}
   145ee:	b083      	sub	sp, #12
   145f0:	af00      	add	r7, sp, #0
   145f2:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
   145f4:	4b06      	ldr	r3, [pc, #24]	; (14610 <_ZL10USBTimeoutPK10timer_task+0x24>)
   145f6:	681b      	ldr	r3, [r3, #0]
   145f8:	2201      	movs	r2, #1
   145fa:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
   145fc:	4b04      	ldr	r3, [pc, #16]	; (14610 <_ZL10USBTimeoutPK10timer_task+0x24>)
   145fe:	681b      	ldr	r3, [r3, #0]
   14600:	2200      	movs	r2, #0
   14602:	741a      	strb	r2, [r3, #16]
	
}
   14604:	bf00      	nop
   14606:	370c      	adds	r7, #12
   14608:	46bd      	mov	sp, r7
   1460a:	bc80      	pop	{r7}
   1460c:	4770      	bx	lr
   1460e:	bf00      	nop
   14610:	20004cc0 	.word	0x20004cc0

00014614 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   14614:	b480      	push	{r7}
   14616:	b083      	sub	sp, #12
   14618:	af00      	add	r7, sp, #0
   1461a:	4603      	mov	r3, r0
   1461c:	603a      	str	r2, [r7, #0]
   1461e:	71fb      	strb	r3, [r7, #7]
   14620:	460b      	mov	r3, r1
   14622:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   14624:	4b08      	ldr	r3, [pc, #32]	; (14648 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   14626:	681b      	ldr	r3, [r3, #0]
   14628:	2201      	movs	r2, #1
   1462a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
   1462c:	4b06      	ldr	r3, [pc, #24]	; (14648 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   1462e:	681b      	ldr	r3, [r3, #0]
   14630:	2201      	movs	r2, #1
   14632:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   14634:	4b04      	ldr	r3, [pc, #16]	; (14648 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   14636:	681b      	ldr	r3, [r3, #0]
   14638:	2201      	movs	r2, #1
   1463a:	741a      	strb	r2, [r3, #16]


	return false;
   1463c:	2300      	movs	r3, #0
}
   1463e:	4618      	mov	r0, r3
   14640:	370c      	adds	r7, #12
   14642:	46bd      	mov	sp, r7
   14644:	bc80      	pop	{r7}
   14646:	4770      	bx	lr
   14648:	20004cc0 	.word	0x20004cc0

0001464c <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   1464c:	b480      	push	{r7}
   1464e:	b083      	sub	sp, #12
   14650:	af00      	add	r7, sp, #0
   14652:	4603      	mov	r3, r0
   14654:	603a      	str	r2, [r7, #0]
   14656:	71fb      	strb	r3, [r7, #7]
   14658:	460b      	mov	r3, r1
   1465a:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   1465c:	4b08      	ldr	r3, [pc, #32]	; (14680 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1465e:	681b      	ldr	r3, [r3, #0]
   14660:	2201      	movs	r2, #1
   14662:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
   14664:	4b06      	ldr	r3, [pc, #24]	; (14680 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   14666:	681b      	ldr	r3, [r3, #0]
   14668:	2201      	movs	r2, #1
   1466a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   1466c:	4b04      	ldr	r3, [pc, #16]	; (14680 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1466e:	681b      	ldr	r3, [r3, #0]
   14670:	2201      	movs	r2, #1
   14672:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   14674:	2300      	movs	r3, #0
}
   14676:	4618      	mov	r0, r3
   14678:	370c      	adds	r7, #12
   1467a:	46bd      	mov	sp, r7
   1467c:	bc80      	pop	{r7}
   1467e:	4770      	bx	lr
   14680:	20004cc0 	.word	0x20004cc0

00014684 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   14684:	b580      	push	{r7, lr}
   14686:	b082      	sub	sp, #8
   14688:	af00      	add	r7, sp, #0
   1468a:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   1468c:	793b      	ldrb	r3, [r7, #4]
   1468e:	f003 0301 	and.w	r3, r3, #1
   14692:	b2db      	uxtb	r3, r3
   14694:	2b00      	cmp	r3, #0
   14696:	d013      	beq.n	146c0 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   14698:	490c      	ldr	r1, [pc, #48]	; (146cc <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   1469a:	2000      	movs	r0, #0
   1469c:	4b0c      	ldr	r3, [pc, #48]	; (146d0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   1469e:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   146a0:	490c      	ldr	r1, [pc, #48]	; (146d4 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   146a2:	2001      	movs	r0, #1
   146a4:	4b0a      	ldr	r3, [pc, #40]	; (146d0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   146a6:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   146a8:	4b0b      	ldr	r3, [pc, #44]	; (146d8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   146aa:	681b      	ldr	r3, [r3, #0]
   146ac:	2201      	movs	r2, #1
   146ae:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   146b0:	4b09      	ldr	r3, [pc, #36]	; (146d8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   146b2:	681b      	ldr	r3, [r3, #0]
   146b4:	2201      	movs	r2, #1
   146b6:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
   146b8:	4b07      	ldr	r3, [pc, #28]	; (146d8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   146ba:	681b      	ldr	r3, [r3, #0]
   146bc:	2201      	movs	r2, #1
   146be:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   146c0:	2300      	movs	r3, #0
}
   146c2:	4618      	mov	r0, r3
   146c4:	3708      	adds	r7, #8
   146c6:	46bd      	mov	sp, r7
   146c8:	bd80      	pop	{r7, pc}
   146ca:	bf00      	nop
   146cc:	00014615 	.word	0x00014615
   146d0:	0000f6f9 	.word	0x0000f6f9
   146d4:	0001464d 	.word	0x0001464d
   146d8:	20004cc0 	.word	0x20004cc0

000146dc <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   146dc:	b580      	push	{r7, lr}
   146de:	b082      	sub	sp, #8
   146e0:	af00      	add	r7, sp, #0
   146e2:	6078      	str	r0, [r7, #4]
   146e4:	687b      	ldr	r3, [r7, #4]
   146e6:	4618      	mov	r0, r3
   146e8:	4b0a      	ldr	r3, [pc, #40]	; (14714 <_ZN9CDC_ClassC1Ev+0x38>)
   146ea:	4798      	blx	r3
   146ec:	687b      	ldr	r3, [r7, #4]
   146ee:	3310      	adds	r3, #16
   146f0:	4618      	mov	r0, r3
   146f2:	4b09      	ldr	r3, [pc, #36]	; (14718 <_ZN9CDC_ClassC1Ev+0x3c>)
   146f4:	4798      	blx	r3
   146f6:	4a09      	ldr	r2, [pc, #36]	; (1471c <_ZN9CDC_ClassC1Ev+0x40>)
   146f8:	687b      	ldr	r3, [r7, #4]
   146fa:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   146fc:	687b      	ldr	r3, [r7, #4]
   146fe:	f04f 32ff 	mov.w	r2, #4294967295
   14702:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   14704:	4a06      	ldr	r2, [pc, #24]	; (14720 <_ZN9CDC_ClassC1Ev+0x44>)
   14706:	687b      	ldr	r3, [r7, #4]
   14708:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   1470a:	687b      	ldr	r3, [r7, #4]
   1470c:	4618      	mov	r0, r3
   1470e:	3708      	adds	r7, #8
   14710:	46bd      	mov	sp, r7
   14712:	bd80      	pop	{r7, pc}
   14714:	000145bd 	.word	0x000145bd
   14718:	00014f25 	.word	0x00014f25
   1471c:	000198f4 	.word	0x000198f4
   14720:	20004cc0 	.word	0x20004cc0

00014724 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   14724:	b580      	push	{r7, lr}
   14726:	b082      	sub	sp, #8
   14728:	af00      	add	r7, sp, #0
   1472a:	6078      	str	r0, [r7, #4]
   1472c:	4a06      	ldr	r2, [pc, #24]	; (14748 <_ZN9CDC_ClassD1Ev+0x24>)
   1472e:	687b      	ldr	r3, [r7, #4]
   14730:	601a      	str	r2, [r3, #0]
   14732:	687b      	ldr	r3, [r7, #4]
   14734:	3310      	adds	r3, #16
   14736:	4618      	mov	r0, r3
   14738:	4b04      	ldr	r3, [pc, #16]	; (1474c <_ZN9CDC_ClassD1Ev+0x28>)
   1473a:	4798      	blx	r3
{
} //~CDC_Class
   1473c:	687b      	ldr	r3, [r7, #4]
   1473e:	4618      	mov	r0, r3
   14740:	3708      	adds	r7, #8
   14742:	46bd      	mov	sp, r7
   14744:	bd80      	pop	{r7, pc}
   14746:	bf00      	nop
   14748:	000198f4 	.word	0x000198f4
   1474c:	00014f45 	.word	0x00014f45

00014750 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   14750:	b580      	push	{r7, lr}
   14752:	b082      	sub	sp, #8
   14754:	af00      	add	r7, sp, #0
   14756:	6078      	str	r0, [r7, #4]
	
	OnInit();
   14758:	687b      	ldr	r3, [r7, #4]
   1475a:	3310      	adds	r3, #16
   1475c:	4618      	mov	r0, r3
   1475e:	4b07      	ldr	r3, [pc, #28]	; (1477c <_ZN9CDC_Class4InitEv+0x2c>)
   14760:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   14762:	4907      	ldr	r1, [pc, #28]	; (14780 <_ZN9CDC_Class4InitEv+0x30>)
   14764:	2003      	movs	r0, #3
   14766:	4b07      	ldr	r3, [pc, #28]	; (14784 <_ZN9CDC_Class4InitEv+0x34>)
   14768:	4798      	blx	r3
	
		
	if (connected)
   1476a:	687b      	ldr	r3, [r7, #4]
   1476c:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(200);
   1476e:	20c8      	movs	r0, #200	; 0xc8
   14770:	4b05      	ldr	r3, [pc, #20]	; (14788 <_ZN9CDC_Class4InitEv+0x38>)
   14772:	4798      	blx	r3

}
   14774:	bf00      	nop
   14776:	3708      	adds	r7, #8
   14778:	46bd      	mov	sp, r7
   1477a:	bd80      	pop	{r7, pc}
   1477c:	00014f59 	.word	0x00014f59
   14780:	00014685 	.word	0x00014685
   14784:	0000f6f9 	.word	0x0000f6f9
   14788:	00004a65 	.word	0x00004a65

0001478c <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   1478c:	b580      	push	{r7, lr}
   1478e:	b082      	sub	sp, #8
   14790:	af00      	add	r7, sp, #0
   14792:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   14794:	4b03      	ldr	r3, [pc, #12]	; (147a4 <_ZN9CDC_Class9IsEnabledEv+0x18>)
   14796:	4798      	blx	r3
   14798:	4603      	mov	r3, r0
	
}
   1479a:	4618      	mov	r0, r3
   1479c:	3708      	adds	r7, #8
   1479e:	46bd      	mov	sp, r7
   147a0:	bd80      	pop	{r7, pc}
   147a2:	bf00      	nop
   147a4:	0000f771 	.word	0x0000f771

000147a8 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   147a8:	b580      	push	{r7, lr}
   147aa:	b084      	sub	sp, #16
   147ac:	af00      	add	r7, sp, #0
   147ae:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   147b0:	687b      	ldr	r3, [r7, #4]
   147b2:	699b      	ldr	r3, [r3, #24]
   147b4:	f1b3 3fff 	cmp.w	r3, #4294967295
   147b8:	bf14      	ite	ne
   147ba:	2301      	movne	r3, #1
   147bc:	2300      	moveq	r3, #0
   147be:	b2db      	uxtb	r3, r3
   147c0:	2b00      	cmp	r3, #0
   147c2:	d002      	beq.n	147ca <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   147c4:	687b      	ldr	r3, [r7, #4]
   147c6:	699b      	ldr	r3, [r3, #24]
   147c8:	e011      	b.n	147ee <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   147ca:	687b      	ldr	r3, [r7, #4]
   147cc:	681b      	ldr	r3, [r3, #0]
   147ce:	331c      	adds	r3, #28
   147d0:	681b      	ldr	r3, [r3, #0]
   147d2:	f107 010f 	add.w	r1, r7, #15
   147d6:	2201      	movs	r2, #1
   147d8:	6878      	ldr	r0, [r7, #4]
   147da:	4798      	blx	r3
   147dc:	4602      	mov	r2, r0
   147de:	687b      	ldr	r3, [r7, #4]
   147e0:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   147e2:	7bfb      	ldrb	r3, [r7, #15]
   147e4:	461a      	mov	r2, r3
   147e6:	687b      	ldr	r3, [r7, #4]
   147e8:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   147ea:	687b      	ldr	r3, [r7, #4]
   147ec:	699b      	ldr	r3, [r3, #24]
}
   147ee:	4618      	mov	r0, r3
   147f0:	3710      	adds	r7, #16
   147f2:	46bd      	mov	sp, r7
   147f4:	bd80      	pop	{r7, pc}
	...

000147f8 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   147f8:	b580      	push	{r7, lr}
   147fa:	b086      	sub	sp, #24
   147fc:	af00      	add	r7, sp, #0
   147fe:	60f8      	str	r0, [r7, #12]
   14800:	60b9      	str	r1, [r7, #8]
   14802:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
   14804:	68fb      	ldr	r3, [r7, #12]
   14806:	7c1b      	ldrb	r3, [r3, #16]
   14808:	b2db      	uxtb	r3, r3
   1480a:	2b00      	cmp	r3, #0
   1480c:	d02e      	beq.n	1486c <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   1480e:	687a      	ldr	r2, [r7, #4]
   14810:	4613      	mov	r3, r2
   14812:	009b      	lsls	r3, r3, #2
   14814:	4413      	add	r3, r2
   14816:	005b      	lsls	r3, r3, #1
   14818:	461a      	mov	r2, r3
   1481a:	4918      	ldr	r1, [pc, #96]	; (1487c <_ZN9CDC_Class8readDataEPvl+0x84>)
   1481c:	4818      	ldr	r0, [pc, #96]	; (14880 <_ZN9CDC_Class8readDataEPvl+0x88>)
   1481e:	4b19      	ldr	r3, [pc, #100]	; (14884 <_ZN9CDC_Class8readDataEPvl+0x8c>)
   14820:	4798      	blx	r3
		rxReady=false;
   14822:	68fb      	ldr	r3, [r7, #12]
   14824:	2200      	movs	r2, #0
   14826:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
   14828:	687b      	ldr	r3, [r7, #4]
   1482a:	4619      	mov	r1, r3
   1482c:	68b8      	ldr	r0, [r7, #8]
   1482e:	4b16      	ldr	r3, [pc, #88]	; (14888 <_ZN9CDC_Class8readDataEPvl+0x90>)
   14830:	4798      	blx	r3
   14832:	4603      	mov	r3, r0
   14834:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
   14836:	68fb      	ldr	r3, [r7, #12]
   14838:	7d5b      	ldrb	r3, [r3, #21]
   1483a:	b2db      	uxtb	r3, r3
   1483c:	f083 0301 	eor.w	r3, r3, #1
   14840:	b2db      	uxtb	r3, r3
   14842:	2b00      	cmp	r3, #0
   14844:	d006      	beq.n	14854 <_ZN9CDC_Class8readDataEPvl+0x5c>
   14846:	68fb      	ldr	r3, [r7, #12]
   14848:	7c1b      	ldrb	r3, [r3, #16]
   1484a:	b2db      	uxtb	r3, r3
   1484c:	2b00      	cmp	r3, #0
   1484e:	d001      	beq.n	14854 <_ZN9CDC_Class8readDataEPvl+0x5c>
   14850:	2301      	movs	r3, #1
   14852:	e000      	b.n	14856 <_ZN9CDC_Class8readDataEPvl+0x5e>
   14854:	2300      	movs	r3, #0
   14856:	2b00      	cmp	r3, #0
   14858:	d000      	beq.n	1485c <_ZN9CDC_Class8readDataEPvl+0x64>
   1485a:	e7ec      	b.n	14836 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
   1485c:	4808      	ldr	r0, [pc, #32]	; (14880 <_ZN9CDC_Class8readDataEPvl+0x88>)
   1485e:	4b0b      	ldr	r3, [pc, #44]	; (1488c <_ZN9CDC_Class8readDataEPvl+0x94>)
   14860:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   14862:	4906      	ldr	r1, [pc, #24]	; (1487c <_ZN9CDC_Class8readDataEPvl+0x84>)
   14864:	4806      	ldr	r0, [pc, #24]	; (14880 <_ZN9CDC_Class8readDataEPvl+0x88>)
   14866:	4b0a      	ldr	r3, [pc, #40]	; (14890 <_ZN9CDC_Class8readDataEPvl+0x98>)
   14868:	4798      	blx	r3
   1486a:	e001      	b.n	14870 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
   1486c:	2300      	movs	r3, #0
   1486e:	75fb      	strb	r3, [r7, #23]
	}

	return r;
   14870:	7dfb      	ldrb	r3, [r7, #23]
}
   14872:	4618      	mov	r0, r3
   14874:	3718      	adds	r7, #24
   14876:	46bd      	mov	sp, r7
   14878:	bd80      	pop	{r7, pc}
   1487a:	bf00      	nop
   1487c:	000145ed 	.word	0x000145ed
   14880:	20004dcc 	.word	0x20004dcc
   14884:	00015185 	.word	0x00015185
   14888:	0000f64d 	.word	0x0000f64d
   1488c:	000150a5 	.word	0x000150a5
   14890:	000151e9 	.word	0x000151e9

00014894 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
   14894:	b580      	push	{r7, lr}
   14896:	b086      	sub	sp, #24
   14898:	af00      	add	r7, sp, #0
   1489a:	60f8      	str	r0, [r7, #12]
   1489c:	60b9      	str	r1, [r7, #8]
   1489e:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
   148a0:	68fb      	ldr	r3, [r7, #12]
   148a2:	2200      	movs	r2, #0
   148a4:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   148a6:	687b      	ldr	r3, [r7, #4]
   148a8:	4619      	mov	r1, r3
   148aa:	68b8      	ldr	r0, [r7, #8]
   148ac:	4b04      	ldr	r3, [pc, #16]	; (148c0 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
   148ae:	4798      	blx	r3
   148b0:	4603      	mov	r3, r0
   148b2:	617b      	str	r3, [r7, #20]
	return r;
   148b4:	697b      	ldr	r3, [r7, #20]
}
   148b6:	4618      	mov	r0, r3
   148b8:	3718      	adds	r7, #24
   148ba:	46bd      	mov	sp, r7
   148bc:	bd80      	pop	{r7, pc}
   148be:	bf00      	nop
   148c0:	0000f64d 	.word	0x0000f64d

000148c4 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   148c4:	b580      	push	{r7, lr}
   148c6:	b084      	sub	sp, #16
   148c8:	af00      	add	r7, sp, #0
   148ca:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   148cc:	687b      	ldr	r3, [r7, #4]
   148ce:	2200      	movs	r2, #0
   148d0:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   148d2:	f107 030f 	add.w	r3, r7, #15
   148d6:	2101      	movs	r1, #1
   148d8:	4618      	mov	r0, r3
   148da:	4b08      	ldr	r3, [pc, #32]	; (148fc <_ZN9CDC_Class4readEv+0x38>)
   148dc:	4798      	blx	r3
	while(!rxReady);
   148de:	687b      	ldr	r3, [r7, #4]
   148e0:	7d5b      	ldrb	r3, [r3, #21]
   148e2:	b2db      	uxtb	r3, r3
   148e4:	f083 0301 	eor.w	r3, r3, #1
   148e8:	b2db      	uxtb	r3, r3
   148ea:	2b00      	cmp	r3, #0
   148ec:	d000      	beq.n	148f0 <_ZN9CDC_Class4readEv+0x2c>
   148ee:	e7f6      	b.n	148de <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   148f0:	7bfb      	ldrb	r3, [r7, #15]
}
   148f2:	4618      	mov	r0, r3
   148f4:	3710      	adds	r7, #16
   148f6:	46bd      	mov	sp, r7
   148f8:	bd80      	pop	{r7, pc}
   148fa:	bf00      	nop
   148fc:	0000f64d 	.word	0x0000f64d

00014900 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
   14900:	b580      	push	{r7, lr}
   14902:	b082      	sub	sp, #8
   14904:	af00      	add	r7, sp, #0
   14906:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   14908:	687b      	ldr	r3, [r7, #4]
   1490a:	331c      	adds	r3, #28
   1490c:	2140      	movs	r1, #64	; 0x40
   1490e:	4618      	mov	r0, r3
   14910:	4b02      	ldr	r3, [pc, #8]	; (1491c <_ZN9CDC_Class5flushEv+0x1c>)
   14912:	4798      	blx	r3
}
   14914:	bf00      	nop
   14916:	3708      	adds	r7, #8
   14918:	46bd      	mov	sp, r7
   1491a:	bd80      	pop	{r7, pc}
   1491c:	0000f691 	.word	0x0000f691

00014920 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   14920:	b580      	push	{r7, lr}
   14922:	b082      	sub	sp, #8
   14924:	af00      	add	r7, sp, #0
   14926:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   14928:	4b02      	ldr	r3, [pc, #8]	; (14934 <_ZN9CDC_Class5clearEv+0x14>)
   1492a:	4798      	blx	r3
}
   1492c:	bf00      	nop
   1492e:	3708      	adds	r7, #8
   14930:	46bd      	mov	sp, r7
   14932:	bd80      	pop	{r7, pc}
   14934:	0000f6d5 	.word	0x0000f6d5

00014938 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   14938:	b580      	push	{r7, lr}
   1493a:	b082      	sub	sp, #8
   1493c:	af00      	add	r7, sp, #0
   1493e:	6078      	str	r0, [r7, #4]
   14940:	460b      	mov	r3, r1
   14942:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
   14944:	687b      	ldr	r3, [r7, #4]
   14946:	7d1b      	ldrb	r3, [r3, #20]
   14948:	b2db      	uxtb	r3, r3
   1494a:	f083 0301 	eor.w	r3, r3, #1
   1494e:	b2db      	uxtb	r3, r3
   14950:	2b00      	cmp	r3, #0
   14952:	d000      	beq.n	14956 <_ZN9CDC_Class5writeEh+0x1e>
   14954:	e7f6      	b.n	14944 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
   14956:	687b      	ldr	r3, [r7, #4]
   14958:	681b      	ldr	r3, [r3, #0]
   1495a:	3324      	adds	r3, #36	; 0x24
   1495c:	681b      	ldr	r3, [r3, #0]
   1495e:	1cf9      	adds	r1, r7, #3
   14960:	2201      	movs	r2, #1
   14962:	6878      	ldr	r0, [r7, #4]
   14964:	4798      	blx	r3
   14966:	4603      	mov	r3, r0
}
   14968:	4618      	mov	r0, r3
   1496a:	3708      	adds	r7, #8
   1496c:	46bd      	mov	sp, r7
   1496e:	bd80      	pop	{r7, pc}

00014970 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   14970:	b580      	push	{r7, lr}
   14972:	b086      	sub	sp, #24
   14974:	af00      	add	r7, sp, #0
   14976:	60f8      	str	r0, [r7, #12]
   14978:	60b9      	str	r1, [r7, #8]
   1497a:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
   1497c:	68fb      	ldr	r3, [r7, #12]
   1497e:	7c1b      	ldrb	r3, [r3, #16]
   14980:	b2db      	uxtb	r3, r3
   14982:	2b00      	cmp	r3, #0
   14984:	d02f      	beq.n	149e6 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   14986:	687a      	ldr	r2, [r7, #4]
   14988:	4613      	mov	r3, r2
   1498a:	009b      	lsls	r3, r3, #2
   1498c:	4413      	add	r3, r2
   1498e:	005b      	lsls	r3, r3, #1
   14990:	461a      	mov	r2, r3
   14992:	4917      	ldr	r1, [pc, #92]	; (149f0 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   14994:	4817      	ldr	r0, [pc, #92]	; (149f4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   14996:	4b18      	ldr	r3, [pc, #96]	; (149f8 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
   14998:	4798      	blx	r3
		txReady=false;
   1499a:	68fb      	ldr	r3, [r7, #12]
   1499c:	2200      	movs	r2, #0
   1499e:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   149a0:	687b      	ldr	r3, [r7, #4]
   149a2:	4619      	mov	r1, r3
   149a4:	68b8      	ldr	r0, [r7, #8]
   149a6:	4b15      	ldr	r3, [pc, #84]	; (149fc <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
   149a8:	4798      	blx	r3
   149aa:	4603      	mov	r3, r0
   149ac:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
   149ae:	68fb      	ldr	r3, [r7, #12]
   149b0:	7d1b      	ldrb	r3, [r3, #20]
   149b2:	b2db      	uxtb	r3, r3
   149b4:	f083 0301 	eor.w	r3, r3, #1
   149b8:	b2db      	uxtb	r3, r3
   149ba:	2b00      	cmp	r3, #0
   149bc:	d006      	beq.n	149cc <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   149be:	68fb      	ldr	r3, [r7, #12]
   149c0:	7c1b      	ldrb	r3, [r3, #16]
   149c2:	b2db      	uxtb	r3, r3
   149c4:	2b00      	cmp	r3, #0
   149c6:	d001      	beq.n	149cc <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   149c8:	2301      	movs	r3, #1
   149ca:	e000      	b.n	149ce <_ZN9CDC_Class9writeDataEPKvl+0x5e>
   149cc:	2300      	movs	r3, #0
   149ce:	2b00      	cmp	r3, #0
   149d0:	d000      	beq.n	149d4 <_ZN9CDC_Class9writeDataEPKvl+0x64>
   149d2:	e7ec      	b.n	149ae <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
   149d4:	4807      	ldr	r0, [pc, #28]	; (149f4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   149d6:	4b0a      	ldr	r3, [pc, #40]	; (14a00 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
   149d8:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   149da:	4905      	ldr	r1, [pc, #20]	; (149f0 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   149dc:	4805      	ldr	r0, [pc, #20]	; (149f4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   149de:	4b09      	ldr	r3, [pc, #36]	; (14a04 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
   149e0:	4798      	blx	r3
		return r;
   149e2:	697b      	ldr	r3, [r7, #20]
   149e4:	e000      	b.n	149e8 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
   149e6:	2300      	movs	r3, #0
	}
	

}
   149e8:	4618      	mov	r0, r3
   149ea:	3718      	adds	r7, #24
   149ec:	46bd      	mov	sp, r7
   149ee:	bd80      	pop	{r7, pc}
   149f0:	000145ed 	.word	0x000145ed
   149f4:	20004dcc 	.word	0x20004dcc
   149f8:	00015185 	.word	0x00015185
   149fc:	0000f691 	.word	0x0000f691
   14a00:	000150a5 	.word	0x000150a5
   14a04:	000151e9 	.word	0x000151e9

00014a08 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   14a08:	b580      	push	{r7, lr}
   14a0a:	b086      	sub	sp, #24
   14a0c:	af00      	add	r7, sp, #0
   14a0e:	60f8      	str	r0, [r7, #12]
   14a10:	60b9      	str	r1, [r7, #8]
   14a12:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   14a14:	68fb      	ldr	r3, [r7, #12]
   14a16:	2200      	movs	r2, #0
   14a18:	751a      	strb	r2, [r3, #20]

 	if (connected){
   14a1a:	68fb      	ldr	r3, [r7, #12]
   14a1c:	7c1b      	ldrb	r3, [r3, #16]
   14a1e:	b2db      	uxtb	r3, r3
   14a20:	2b00      	cmp	r3, #0
   14a22:	d02a      	beq.n	14a7a <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   14a24:	687a      	ldr	r2, [r7, #4]
   14a26:	4613      	mov	r3, r2
   14a28:	009b      	lsls	r3, r3, #2
   14a2a:	4413      	add	r3, r2
   14a2c:	005b      	lsls	r3, r3, #1
   14a2e:	461a      	mov	r2, r3
   14a30:	4915      	ldr	r1, [pc, #84]	; (14a88 <_ZN9CDC_Class5writeEPKhj+0x80>)
   14a32:	4816      	ldr	r0, [pc, #88]	; (14a8c <_ZN9CDC_Class5writeEPKhj+0x84>)
   14a34:	4b16      	ldr	r3, [pc, #88]	; (14a90 <_ZN9CDC_Class5writeEPKhj+0x88>)
   14a36:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   14a38:	6879      	ldr	r1, [r7, #4]
   14a3a:	68b8      	ldr	r0, [r7, #8]
   14a3c:	4b15      	ldr	r3, [pc, #84]	; (14a94 <_ZN9CDC_Class5writeEPKhj+0x8c>)
   14a3e:	4798      	blx	r3
   14a40:	4603      	mov	r3, r0
   14a42:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
   14a44:	68fb      	ldr	r3, [r7, #12]
   14a46:	7d1b      	ldrb	r3, [r3, #20]
   14a48:	b2db      	uxtb	r3, r3
   14a4a:	f083 0301 	eor.w	r3, r3, #1
   14a4e:	b2db      	uxtb	r3, r3
   14a50:	2b00      	cmp	r3, #0
   14a52:	d006      	beq.n	14a62 <_ZN9CDC_Class5writeEPKhj+0x5a>
   14a54:	68fb      	ldr	r3, [r7, #12]
   14a56:	7c1b      	ldrb	r3, [r3, #16]
   14a58:	b2db      	uxtb	r3, r3
   14a5a:	2b00      	cmp	r3, #0
   14a5c:	d001      	beq.n	14a62 <_ZN9CDC_Class5writeEPKhj+0x5a>
   14a5e:	2301      	movs	r3, #1
   14a60:	e000      	b.n	14a64 <_ZN9CDC_Class5writeEPKhj+0x5c>
   14a62:	2300      	movs	r3, #0
   14a64:	2b00      	cmp	r3, #0
   14a66:	d000      	beq.n	14a6a <_ZN9CDC_Class5writeEPKhj+0x62>
   14a68:	e7ec      	b.n	14a44 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
   14a6a:	4808      	ldr	r0, [pc, #32]	; (14a8c <_ZN9CDC_Class5writeEPKhj+0x84>)
   14a6c:	4b0a      	ldr	r3, [pc, #40]	; (14a98 <_ZN9CDC_Class5writeEPKhj+0x90>)
   14a6e:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   14a70:	4905      	ldr	r1, [pc, #20]	; (14a88 <_ZN9CDC_Class5writeEPKhj+0x80>)
   14a72:	4806      	ldr	r0, [pc, #24]	; (14a8c <_ZN9CDC_Class5writeEPKhj+0x84>)
   14a74:	4b09      	ldr	r3, [pc, #36]	; (14a9c <_ZN9CDC_Class5writeEPKhj+0x94>)
   14a76:	4798      	blx	r3
   14a78:	e001      	b.n	14a7e <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
   14a7a:	2300      	movs	r3, #0
   14a7c:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   14a7e:	697b      	ldr	r3, [r7, #20]
}
   14a80:	4618      	mov	r0, r3
   14a82:	3718      	adds	r7, #24
   14a84:	46bd      	mov	sp, r7
   14a86:	bd80      	pop	{r7, pc}
   14a88:	000145ed 	.word	0x000145ed
   14a8c:	20004dcc 	.word	0x20004dcc
   14a90:	00015185 	.word	0x00015185
   14a94:	0000f691 	.word	0x0000f691
   14a98:	000150a5 	.word	0x000150a5
   14a9c:	000151e9 	.word	0x000151e9

00014aa0 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   14aa0:	b480      	push	{r7}
   14aa2:	b083      	sub	sp, #12
   14aa4:	af00      	add	r7, sp, #0
   14aa6:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   14aa8:	687b      	ldr	r3, [r7, #4]
   14aaa:	7d5b      	ldrb	r3, [r3, #21]
   14aac:	b2db      	uxtb	r3, r3
   14aae:	2b00      	cmp	r3, #0
   14ab0:	d006      	beq.n	14ac0 <_ZN9CDC_Class9availableEv+0x20>
   14ab2:	687b      	ldr	r3, [r7, #4]
   14ab4:	7d1b      	ldrb	r3, [r3, #20]
   14ab6:	b2db      	uxtb	r3, r3
   14ab8:	2b00      	cmp	r3, #0
   14aba:	d001      	beq.n	14ac0 <_ZN9CDC_Class9availableEv+0x20>
   14abc:	2301      	movs	r3, #1
   14abe:	e000      	b.n	14ac2 <_ZN9CDC_Class9availableEv+0x22>
   14ac0:	2300      	movs	r3, #0
   14ac2:	2b00      	cmp	r3, #0
   14ac4:	d001      	beq.n	14aca <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   14ac6:	2301      	movs	r3, #1
   14ac8:	e000      	b.n	14acc <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   14aca:	2300      	movs	r3, #0
	}
	
}
   14acc:	4618      	mov	r0, r3
   14ace:	370c      	adds	r7, #12
   14ad0:	46bd      	mov	sp, r7
   14ad2:	bc80      	pop	{r7}
   14ad4:	4770      	bx	lr
	...

00014ad8 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   14ad8:	b580      	push	{r7, lr}
   14ada:	b082      	sub	sp, #8
   14adc:	af00      	add	r7, sp, #0
   14ade:	6078      	str	r0, [r7, #4]
   14ae0:	6039      	str	r1, [r7, #0]
   14ae2:	687b      	ldr	r3, [r7, #4]
   14ae4:	2b01      	cmp	r3, #1
   14ae6:	d10c      	bne.n	14b02 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   14ae8:	683b      	ldr	r3, [r7, #0]
   14aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14aee:	4293      	cmp	r3, r2
   14af0:	d107      	bne.n	14b02 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   14af2:	4806      	ldr	r0, [pc, #24]	; (14b0c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   14af4:	4b06      	ldr	r3, [pc, #24]	; (14b10 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   14af6:	4798      	blx	r3
   14af8:	4a06      	ldr	r2, [pc, #24]	; (14b14 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   14afa:	4907      	ldr	r1, [pc, #28]	; (14b18 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   14afc:	4803      	ldr	r0, [pc, #12]	; (14b0c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   14afe:	4b07      	ldr	r3, [pc, #28]	; (14b1c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   14b00:	4798      	blx	r3
   14b02:	bf00      	nop
   14b04:	3708      	adds	r7, #8
   14b06:	46bd      	mov	sp, r7
   14b08:	bd80      	pop	{r7, pc}
   14b0a:	bf00      	nop
   14b0c:	20004cc4 	.word	0x20004cc4
   14b10:	000146dd 	.word	0x000146dd
   14b14:	20000000 	.word	0x20000000
   14b18:	00014725 	.word	0x00014725
   14b1c:	000159a5 	.word	0x000159a5

00014b20 <_GLOBAL__sub_I_ptrCDCClass>:
   14b20:	b580      	push	{r7, lr}
   14b22:	af00      	add	r7, sp, #0
   14b24:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14b28:	2001      	movs	r0, #1
   14b2a:	4b01      	ldr	r3, [pc, #4]	; (14b30 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   14b2c:	4798      	blx	r3
   14b2e:	bd80      	pop	{r7, pc}
   14b30:	00014ad9 	.word	0x00014ad9

00014b34 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   14b34:	b580      	push	{r7, lr}
   14b36:	b086      	sub	sp, #24
   14b38:	af00      	add	r7, sp, #0
   14b3a:	60f8      	str	r0, [r7, #12]
   14b3c:	60b9      	str	r1, [r7, #8]
   14b3e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   14b40:	2300      	movs	r3, #0
   14b42:	617b      	str	r3, [r7, #20]
  while (size--) {
   14b44:	687b      	ldr	r3, [r7, #4]
   14b46:	1e5a      	subs	r2, r3, #1
   14b48:	607a      	str	r2, [r7, #4]
   14b4a:	2b00      	cmp	r3, #0
   14b4c:	bf14      	ite	ne
   14b4e:	2301      	movne	r3, #1
   14b50:	2300      	moveq	r3, #0
   14b52:	b2db      	uxtb	r3, r3
   14b54:	2b00      	cmp	r3, #0
   14b56:	d016      	beq.n	14b86 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   14b58:	68fb      	ldr	r3, [r7, #12]
   14b5a:	681b      	ldr	r3, [r3, #0]
   14b5c:	681a      	ldr	r2, [r3, #0]
   14b5e:	68bb      	ldr	r3, [r7, #8]
   14b60:	1c59      	adds	r1, r3, #1
   14b62:	60b9      	str	r1, [r7, #8]
   14b64:	781b      	ldrb	r3, [r3, #0]
   14b66:	4619      	mov	r1, r3
   14b68:	68f8      	ldr	r0, [r7, #12]
   14b6a:	4790      	blx	r2
   14b6c:	4603      	mov	r3, r0
   14b6e:	2b00      	cmp	r3, #0
   14b70:	bf14      	ite	ne
   14b72:	2301      	movne	r3, #1
   14b74:	2300      	moveq	r3, #0
   14b76:	b2db      	uxtb	r3, r3
   14b78:	2b00      	cmp	r3, #0
   14b7a:	d003      	beq.n	14b84 <_ZN5Print5writeEPKhj+0x50>
   14b7c:	697b      	ldr	r3, [r7, #20]
   14b7e:	3301      	adds	r3, #1
   14b80:	617b      	str	r3, [r7, #20]
  while (size--) {
   14b82:	e7df      	b.n	14b44 <_ZN5Print5writeEPKhj+0x10>
    else break;
   14b84:	bf00      	nop
  }
  return n;
   14b86:	697b      	ldr	r3, [r7, #20]
}
   14b88:	4618      	mov	r0, r3
   14b8a:	3718      	adds	r7, #24
   14b8c:	46bd      	mov	sp, r7
   14b8e:	bd80      	pop	{r7, pc}

00014b90 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
   14b90:	b580      	push	{r7, lr}
   14b92:	b082      	sub	sp, #8
   14b94:	af00      	add	r7, sp, #0
   14b96:	6078      	str	r0, [r7, #4]
   14b98:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
   14b9a:	6839      	ldr	r1, [r7, #0]
   14b9c:	6878      	ldr	r0, [r7, #4]
   14b9e:	4b03      	ldr	r3, [pc, #12]	; (14bac <_ZN5Print5printEPK19__FlashStringHelper+0x1c>)
   14ba0:	4798      	blx	r3
   14ba2:	4603      	mov	r3, r0
}
   14ba4:	4618      	mov	r0, r3
   14ba6:	3708      	adds	r7, #8
   14ba8:	46bd      	mov	sp, r7
   14baa:	bd80      	pop	{r7, pc}
   14bac:	00014bb1 	.word	0x00014bb1

00014bb0 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
   14bb0:	b580      	push	{r7, lr}
   14bb2:	b082      	sub	sp, #8
   14bb4:	af00      	add	r7, sp, #0
   14bb6:	6078      	str	r0, [r7, #4]
   14bb8:	6039      	str	r1, [r7, #0]
  return write(str);
   14bba:	6839      	ldr	r1, [r7, #0]
   14bbc:	6878      	ldr	r0, [r7, #4]
   14bbe:	4b03      	ldr	r3, [pc, #12]	; (14bcc <_ZN5Print5printEPKc+0x1c>)
   14bc0:	4798      	blx	r3
   14bc2:	4603      	mov	r3, r0
}
   14bc4:	4618      	mov	r0, r3
   14bc6:	3708      	adds	r7, #8
   14bc8:	46bd      	mov	sp, r7
   14bca:	bd80      	pop	{r7, pc}
   14bcc:	000020bd 	.word	0x000020bd

00014bd0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
   14bd0:	b580      	push	{r7, lr}
   14bd2:	b082      	sub	sp, #8
   14bd4:	af00      	add	r7, sp, #0
   14bd6:	6078      	str	r0, [r7, #4]
   14bd8:	460b      	mov	r3, r1
   14bda:	70fb      	strb	r3, [r7, #3]
  return write(c);
   14bdc:	687b      	ldr	r3, [r7, #4]
   14bde:	681b      	ldr	r3, [r3, #0]
   14be0:	681b      	ldr	r3, [r3, #0]
   14be2:	78fa      	ldrb	r2, [r7, #3]
   14be4:	4611      	mov	r1, r2
   14be6:	6878      	ldr	r0, [r7, #4]
   14be8:	4798      	blx	r3
   14bea:	4603      	mov	r3, r0
}
   14bec:	4618      	mov	r0, r3
   14bee:	3708      	adds	r7, #8
   14bf0:	46bd      	mov	sp, r7
   14bf2:	bd80      	pop	{r7, pc}

00014bf4 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
   14bf4:	b580      	push	{r7, lr}
   14bf6:	b084      	sub	sp, #16
   14bf8:	af00      	add	r7, sp, #0
   14bfa:	60f8      	str	r0, [r7, #12]
   14bfc:	460b      	mov	r3, r1
   14bfe:	607a      	str	r2, [r7, #4]
   14c00:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
   14c02:	7afb      	ldrb	r3, [r7, #11]
   14c04:	687a      	ldr	r2, [r7, #4]
   14c06:	4619      	mov	r1, r3
   14c08:	68f8      	ldr	r0, [r7, #12]
   14c0a:	4b03      	ldr	r3, [pc, #12]	; (14c18 <_ZN5Print5printEhi+0x24>)
   14c0c:	4798      	blx	r3
   14c0e:	4603      	mov	r3, r0
}
   14c10:	4618      	mov	r0, r3
   14c12:	3710      	adds	r7, #16
   14c14:	46bd      	mov	sp, r7
   14c16:	bd80      	pop	{r7, pc}
   14c18:	00014c1d 	.word	0x00014c1d

00014c1c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   14c1c:	b580      	push	{r7, lr}
   14c1e:	b084      	sub	sp, #16
   14c20:	af00      	add	r7, sp, #0
   14c22:	60f8      	str	r0, [r7, #12]
   14c24:	60b9      	str	r1, [r7, #8]
   14c26:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
   14c28:	687b      	ldr	r3, [r7, #4]
   14c2a:	2b00      	cmp	r3, #0
   14c2c:	d109      	bne.n	14c42 <_ZN5Print5printEmi+0x26>
   14c2e:	68fb      	ldr	r3, [r7, #12]
   14c30:	681b      	ldr	r3, [r3, #0]
   14c32:	681b      	ldr	r3, [r3, #0]
   14c34:	68ba      	ldr	r2, [r7, #8]
   14c36:	b2d2      	uxtb	r2, r2
   14c38:	4611      	mov	r1, r2
   14c3a:	68f8      	ldr	r0, [r7, #12]
   14c3c:	4798      	blx	r3
   14c3e:	4603      	mov	r3, r0
   14c40:	e007      	b.n	14c52 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
   14c42:	687b      	ldr	r3, [r7, #4]
   14c44:	b2db      	uxtb	r3, r3
   14c46:	461a      	mov	r2, r3
   14c48:	68b9      	ldr	r1, [r7, #8]
   14c4a:	68f8      	ldr	r0, [r7, #12]
   14c4c:	4b03      	ldr	r3, [pc, #12]	; (14c5c <_ZN5Print5printEmi+0x40>)
   14c4e:	4798      	blx	r3
   14c50:	4603      	mov	r3, r0
}
   14c52:	4618      	mov	r0, r3
   14c54:	3710      	adds	r7, #16
   14c56:	46bd      	mov	sp, r7
   14c58:	bd80      	pop	{r7, pc}
   14c5a:	bf00      	nop
   14c5c:	00014d29 	.word	0x00014d29

00014c60 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
   14c60:	b580      	push	{r7, lr}
   14c62:	b084      	sub	sp, #16
   14c64:	af00      	add	r7, sp, #0
   14c66:	6078      	str	r0, [r7, #4]
   14c68:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
   14c6a:	6839      	ldr	r1, [r7, #0]
   14c6c:	6878      	ldr	r0, [r7, #4]
   14c6e:	4b07      	ldr	r3, [pc, #28]	; (14c8c <_ZN5Print7printlnEPK19__FlashStringHelper+0x2c>)
   14c70:	4798      	blx	r3
   14c72:	60f8      	str	r0, [r7, #12]
  n += println();
   14c74:	6878      	ldr	r0, [r7, #4]
   14c76:	4b06      	ldr	r3, [pc, #24]	; (14c90 <_ZN5Print7printlnEPK19__FlashStringHelper+0x30>)
   14c78:	4798      	blx	r3
   14c7a:	4602      	mov	r2, r0
   14c7c:	68fb      	ldr	r3, [r7, #12]
   14c7e:	4413      	add	r3, r2
   14c80:	60fb      	str	r3, [r7, #12]
  return n;
   14c82:	68fb      	ldr	r3, [r7, #12]
}
   14c84:	4618      	mov	r0, r3
   14c86:	3710      	adds	r7, #16
   14c88:	46bd      	mov	sp, r7
   14c8a:	bd80      	pop	{r7, pc}
   14c8c:	00014b91 	.word	0x00014b91
   14c90:	00014c95 	.word	0x00014c95

00014c94 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   14c94:	b580      	push	{r7, lr}
   14c96:	b082      	sub	sp, #8
   14c98:	af00      	add	r7, sp, #0
   14c9a:	6078      	str	r0, [r7, #4]
  return write("\r\n");
   14c9c:	4904      	ldr	r1, [pc, #16]	; (14cb0 <_ZN5Print7printlnEv+0x1c>)
   14c9e:	6878      	ldr	r0, [r7, #4]
   14ca0:	4b04      	ldr	r3, [pc, #16]	; (14cb4 <_ZN5Print7printlnEv+0x20>)
   14ca2:	4798      	blx	r3
   14ca4:	4603      	mov	r3, r0
}
   14ca6:	4618      	mov	r0, r3
   14ca8:	3708      	adds	r7, #8
   14caa:	46bd      	mov	sp, r7
   14cac:	bd80      	pop	{r7, pc}
   14cae:	bf00      	nop
   14cb0:	00019948 	.word	0x00019948
   14cb4:	000020bd 	.word	0x000020bd

00014cb8 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
   14cb8:	b580      	push	{r7, lr}
   14cba:	b084      	sub	sp, #16
   14cbc:	af00      	add	r7, sp, #0
   14cbe:	6078      	str	r0, [r7, #4]
   14cc0:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
   14cc2:	6839      	ldr	r1, [r7, #0]
   14cc4:	6878      	ldr	r0, [r7, #4]
   14cc6:	4b07      	ldr	r3, [pc, #28]	; (14ce4 <_ZN5Print7printlnEPKc+0x2c>)
   14cc8:	4798      	blx	r3
   14cca:	60f8      	str	r0, [r7, #12]
  n += println();
   14ccc:	6878      	ldr	r0, [r7, #4]
   14cce:	4b06      	ldr	r3, [pc, #24]	; (14ce8 <_ZN5Print7printlnEPKc+0x30>)
   14cd0:	4798      	blx	r3
   14cd2:	4602      	mov	r2, r0
   14cd4:	68fb      	ldr	r3, [r7, #12]
   14cd6:	4413      	add	r3, r2
   14cd8:	60fb      	str	r3, [r7, #12]
  return n;
   14cda:	68fb      	ldr	r3, [r7, #12]
}
   14cdc:	4618      	mov	r0, r3
   14cde:	3710      	adds	r7, #16
   14ce0:	46bd      	mov	sp, r7
   14ce2:	bd80      	pop	{r7, pc}
   14ce4:	00014bb1 	.word	0x00014bb1
   14ce8:	00014c95 	.word	0x00014c95

00014cec <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   14cec:	b580      	push	{r7, lr}
   14cee:	b086      	sub	sp, #24
   14cf0:	af00      	add	r7, sp, #0
   14cf2:	60f8      	str	r0, [r7, #12]
   14cf4:	460b      	mov	r3, r1
   14cf6:	607a      	str	r2, [r7, #4]
   14cf8:	72fb      	strb	r3, [r7, #11]
  size_t n = print(b, base);
   14cfa:	7afb      	ldrb	r3, [r7, #11]
   14cfc:	687a      	ldr	r2, [r7, #4]
   14cfe:	4619      	mov	r1, r3
   14d00:	68f8      	ldr	r0, [r7, #12]
   14d02:	4b07      	ldr	r3, [pc, #28]	; (14d20 <_ZN5Print7printlnEhi+0x34>)
   14d04:	4798      	blx	r3
   14d06:	6178      	str	r0, [r7, #20]
  n += println();
   14d08:	68f8      	ldr	r0, [r7, #12]
   14d0a:	4b06      	ldr	r3, [pc, #24]	; (14d24 <_ZN5Print7printlnEhi+0x38>)
   14d0c:	4798      	blx	r3
   14d0e:	4602      	mov	r2, r0
   14d10:	697b      	ldr	r3, [r7, #20]
   14d12:	4413      	add	r3, r2
   14d14:	617b      	str	r3, [r7, #20]
  return n;
   14d16:	697b      	ldr	r3, [r7, #20]
}
   14d18:	4618      	mov	r0, r3
   14d1a:	3718      	adds	r7, #24
   14d1c:	46bd      	mov	sp, r7
   14d1e:	bd80      	pop	{r7, pc}
   14d20:	00014bf5 	.word	0x00014bf5
   14d24:	00014c95 	.word	0x00014c95

00014d28 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   14d28:	b580      	push	{r7, lr}
   14d2a:	b08e      	sub	sp, #56	; 0x38
   14d2c:	af00      	add	r7, sp, #0
   14d2e:	60f8      	str	r0, [r7, #12]
   14d30:	60b9      	str	r1, [r7, #8]
   14d32:	4613      	mov	r3, r2
   14d34:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
   14d36:	f107 0310 	add.w	r3, r7, #16
   14d3a:	3320      	adds	r3, #32
   14d3c:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
   14d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14d40:	2200      	movs	r2, #0
   14d42:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   14d44:	79fb      	ldrb	r3, [r7, #7]
   14d46:	2b01      	cmp	r3, #1
   14d48:	dc01      	bgt.n	14d4e <_ZN5Print11printNumberEmh+0x26>
   14d4a:	230a      	movs	r3, #10
   14d4c:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
   14d4e:	79fa      	ldrb	r2, [r7, #7]
   14d50:	68bb      	ldr	r3, [r7, #8]
   14d52:	fbb3 f1f2 	udiv	r1, r3, r2
   14d56:	fb02 f201 	mul.w	r2, r2, r1
   14d5a:	1a9b      	subs	r3, r3, r2
   14d5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
   14d60:	79fb      	ldrb	r3, [r7, #7]
   14d62:	68ba      	ldr	r2, [r7, #8]
   14d64:	fbb2 f3f3 	udiv	r3, r2, r3
   14d68:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   14d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14d6c:	3b01      	subs	r3, #1
   14d6e:	637b      	str	r3, [r7, #52]	; 0x34
   14d70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   14d74:	2b09      	cmp	r3, #9
   14d76:	dc04      	bgt.n	14d82 <_ZN5Print11printNumberEmh+0x5a>
   14d78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   14d7c:	3330      	adds	r3, #48	; 0x30
   14d7e:	b2db      	uxtb	r3, r3
   14d80:	e003      	b.n	14d8a <_ZN5Print11printNumberEmh+0x62>
   14d82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   14d86:	3337      	adds	r3, #55	; 0x37
   14d88:	b2db      	uxtb	r3, r3
   14d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14d8c:	7013      	strb	r3, [r2, #0]
  } while(n);
   14d8e:	68bb      	ldr	r3, [r7, #8]
   14d90:	2b00      	cmp	r3, #0
   14d92:	d000      	beq.n	14d96 <_ZN5Print11printNumberEmh+0x6e>
  do {
   14d94:	e7db      	b.n	14d4e <_ZN5Print11printNumberEmh+0x26>

  return write(str);
   14d96:	6b79      	ldr	r1, [r7, #52]	; 0x34
   14d98:	68f8      	ldr	r0, [r7, #12]
   14d9a:	4b03      	ldr	r3, [pc, #12]	; (14da8 <_ZN5Print11printNumberEmh+0x80>)
   14d9c:	4798      	blx	r3
   14d9e:	4603      	mov	r3, r0
}
   14da0:	4618      	mov	r0, r3
   14da2:	3738      	adds	r7, #56	; 0x38
   14da4:	46bd      	mov	sp, r7
   14da6:	bd80      	pop	{r7, pc}
   14da8:	000020bd 	.word	0x000020bd

00014dac <hri_port_read_DIR_reg>:
{
   14dac:	b480      	push	{r7}
   14dae:	b083      	sub	sp, #12
   14db0:	af00      	add	r7, sp, #0
   14db2:	6078      	str	r0, [r7, #4]
   14db4:	460b      	mov	r3, r1
   14db6:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   14db8:	78fb      	ldrb	r3, [r7, #3]
   14dba:	687a      	ldr	r2, [r7, #4]
   14dbc:	01db      	lsls	r3, r3, #7
   14dbe:	4413      	add	r3, r2
   14dc0:	681b      	ldr	r3, [r3, #0]
}
   14dc2:	4618      	mov	r0, r3
   14dc4:	370c      	adds	r7, #12
   14dc6:	46bd      	mov	sp, r7
   14dc8:	bc80      	pop	{r7}
   14dca:	4770      	bx	lr

00014dcc <hri_port_read_OUT_reg>:
{
   14dcc:	b480      	push	{r7}
   14dce:	b083      	sub	sp, #12
   14dd0:	af00      	add	r7, sp, #0
   14dd2:	6078      	str	r0, [r7, #4]
   14dd4:	460b      	mov	r3, r1
   14dd6:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   14dd8:	78fb      	ldrb	r3, [r7, #3]
   14dda:	687a      	ldr	r2, [r7, #4]
   14ddc:	01db      	lsls	r3, r3, #7
   14dde:	4413      	add	r3, r2
   14de0:	3310      	adds	r3, #16
   14de2:	681b      	ldr	r3, [r3, #0]
}
   14de4:	4618      	mov	r0, r3
   14de6:	370c      	adds	r7, #12
   14de8:	46bd      	mov	sp, r7
   14dea:	bc80      	pop	{r7}
   14dec:	4770      	bx	lr

00014dee <hri_port_read_IN_reg>:
{
   14dee:	b480      	push	{r7}
   14df0:	b083      	sub	sp, #12
   14df2:	af00      	add	r7, sp, #0
   14df4:	6078      	str	r0, [r7, #4]
   14df6:	460b      	mov	r3, r1
   14df8:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   14dfa:	78fb      	ldrb	r3, [r7, #3]
   14dfc:	687a      	ldr	r2, [r7, #4]
   14dfe:	01db      	lsls	r3, r3, #7
   14e00:	4413      	add	r3, r2
   14e02:	3320      	adds	r3, #32
   14e04:	681b      	ldr	r3, [r3, #0]
}
   14e06:	4618      	mov	r0, r3
   14e08:	370c      	adds	r7, #12
   14e0a:	46bd      	mov	sp, r7
   14e0c:	bc80      	pop	{r7}
   14e0e:	4770      	bx	lr

00014e10 <_gpio_get_level>:
{
   14e10:	b580      	push	{r7, lr}
   14e12:	b086      	sub	sp, #24
   14e14:	af00      	add	r7, sp, #0
   14e16:	4603      	mov	r3, r0
   14e18:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
   14e1a:	f107 030c 	add.w	r3, r7, #12
   14e1e:	4618      	mov	r0, r3
   14e20:	4b13      	ldr	r3, [pc, #76]	; (14e70 <_gpio_get_level+0x60>)
   14e22:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   14e24:	79fb      	ldrb	r3, [r7, #7]
   14e26:	4619      	mov	r1, r3
   14e28:	4812      	ldr	r0, [pc, #72]	; (14e74 <_gpio_get_level+0x64>)
   14e2a:	4b13      	ldr	r3, [pc, #76]	; (14e78 <_gpio_get_level+0x68>)
   14e2c:	4798      	blx	r3
   14e2e:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   14e30:	79fb      	ldrb	r3, [r7, #7]
   14e32:	4619      	mov	r1, r3
   14e34:	480f      	ldr	r0, [pc, #60]	; (14e74 <_gpio_get_level+0x64>)
   14e36:	4b11      	ldr	r3, [pc, #68]	; (14e7c <_gpio_get_level+0x6c>)
   14e38:	4798      	blx	r3
   14e3a:	4602      	mov	r2, r0
   14e3c:	697b      	ldr	r3, [r7, #20]
   14e3e:	43db      	mvns	r3, r3
   14e40:	4013      	ands	r3, r2
   14e42:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   14e44:	79fb      	ldrb	r3, [r7, #7]
   14e46:	4619      	mov	r1, r3
   14e48:	480a      	ldr	r0, [pc, #40]	; (14e74 <_gpio_get_level+0x64>)
   14e4a:	4b0d      	ldr	r3, [pc, #52]	; (14e80 <_gpio_get_level+0x70>)
   14e4c:	4798      	blx	r3
   14e4e:	4602      	mov	r2, r0
   14e50:	697b      	ldr	r3, [r7, #20]
   14e52:	4013      	ands	r3, r2
   14e54:	693a      	ldr	r2, [r7, #16]
   14e56:	4313      	orrs	r3, r2
   14e58:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
   14e5a:	f107 030c 	add.w	r3, r7, #12
   14e5e:	4618      	mov	r0, r3
   14e60:	4b08      	ldr	r3, [pc, #32]	; (14e84 <_gpio_get_level+0x74>)
   14e62:	4798      	blx	r3
	return tmp;
   14e64:	693b      	ldr	r3, [r7, #16]
}
   14e66:	4618      	mov	r0, r3
   14e68:	3718      	adds	r7, #24
   14e6a:	46bd      	mov	sp, r7
   14e6c:	bd80      	pop	{r7, pc}
   14e6e:	bf00      	nop
   14e70:	0000e86d 	.word	0x0000e86d
   14e74:	41008000 	.word	0x41008000
   14e78:	00014dad 	.word	0x00014dad
   14e7c:	00014def 	.word	0x00014def
   14e80:	00014dcd 	.word	0x00014dcd
   14e84:	0000e893 	.word	0x0000e893

00014e88 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   14e88:	b580      	push	{r7, lr}
   14e8a:	b082      	sub	sp, #8
   14e8c:	af00      	add	r7, sp, #0
   14e8e:	4603      	mov	r3, r0
   14e90:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   14e92:	79fb      	ldrb	r3, [r7, #7]
   14e94:	115b      	asrs	r3, r3, #5
   14e96:	b2db      	uxtb	r3, r3
   14e98:	4618      	mov	r0, r3
   14e9a:	4b09      	ldr	r3, [pc, #36]	; (14ec0 <gpio_get_pin_level+0x38>)
   14e9c:	4798      	blx	r3
   14e9e:	4601      	mov	r1, r0
   14ea0:	79fb      	ldrb	r3, [r7, #7]
   14ea2:	f003 031f 	and.w	r3, r3, #31
   14ea6:	2201      	movs	r2, #1
   14ea8:	fa02 f303 	lsl.w	r3, r2, r3
   14eac:	400b      	ands	r3, r1
   14eae:	2b00      	cmp	r3, #0
   14eb0:	bf14      	ite	ne
   14eb2:	2301      	movne	r3, #1
   14eb4:	2300      	moveq	r3, #0
   14eb6:	b2db      	uxtb	r3, r3
}
   14eb8:	4618      	mov	r0, r3
   14eba:	3708      	adds	r7, #8
   14ebc:	46bd      	mov	sp, r7
   14ebe:	bd80      	pop	{r7, pc}
   14ec0:	00014e11 	.word	0x00014e11

00014ec4 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   14ec4:	b480      	push	{r7}
   14ec6:	b083      	sub	sp, #12
   14ec8:	af00      	add	r7, sp, #0
   14eca:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   14ecc:	4b06      	ldr	r3, [pc, #24]	; (14ee8 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   14ece:	681b      	ldr	r3, [r3, #0]
   14ed0:	2201      	movs	r2, #1
   14ed2:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
   14ed4:	4b04      	ldr	r3, [pc, #16]	; (14ee8 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   14ed6:	681b      	ldr	r3, [r3, #0]
   14ed8:	2200      	movs	r2, #0
   14eda:	705a      	strb	r2, [r3, #1]
}
   14edc:	bf00      	nop
   14ede:	370c      	adds	r7, #12
   14ee0:	46bd      	mov	sp, r7
   14ee2:	bc80      	pop	{r7}
   14ee4:	4770      	bx	lr
   14ee6:	bf00      	nop
   14ee8:	20004d24 	.word	0x20004d24

00014eec <_ZL10USBPluggedv>:

static void USBPlugged(void){
   14eec:	b580      	push	{r7, lr}
   14eee:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
   14ef0:	2040      	movs	r0, #64	; 0x40
   14ef2:	4b0a      	ldr	r3, [pc, #40]	; (14f1c <_ZL10USBPluggedv+0x30>)
   14ef4:	4798      	blx	r3
   14ef6:	4603      	mov	r3, r0
   14ef8:	2b00      	cmp	r3, #0
   14efa:	d004      	beq.n	14f06 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
   14efc:	4b08      	ldr	r3, [pc, #32]	; (14f20 <_ZL10USBPluggedv+0x34>)
   14efe:	681b      	ldr	r3, [r3, #0]
   14f00:	2201      	movs	r2, #1
   14f02:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
   14f04:	e007      	b.n	14f16 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
   14f06:	4b06      	ldr	r3, [pc, #24]	; (14f20 <_ZL10USBPluggedv+0x34>)
   14f08:	681b      	ldr	r3, [r3, #0]
   14f0a:	2200      	movs	r2, #0
   14f0c:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
   14f0e:	4b04      	ldr	r3, [pc, #16]	; (14f20 <_ZL10USBPluggedv+0x34>)
   14f10:	681b      	ldr	r3, [r3, #0]
   14f12:	2200      	movs	r2, #0
   14f14:	701a      	strb	r2, [r3, #0]
}
   14f16:	bf00      	nop
   14f18:	bd80      	pop	{r7, pc}
   14f1a:	bf00      	nop
   14f1c:	00014e89 	.word	0x00014e89
   14f20:	20004d24 	.word	0x20004d24

00014f24 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   14f24:	b480      	push	{r7}
   14f26:	b083      	sub	sp, #12
   14f28:	af00      	add	r7, sp, #0
   14f2a:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   14f2c:	4a04      	ldr	r2, [pc, #16]	; (14f40 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   14f2e:	687b      	ldr	r3, [r7, #4]
   14f30:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
   14f32:	687b      	ldr	r3, [r7, #4]
   14f34:	4618      	mov	r0, r3
   14f36:	370c      	adds	r7, #12
   14f38:	46bd      	mov	sp, r7
   14f3a:	bc80      	pop	{r7}
   14f3c:	4770      	bx	lr
   14f3e:	bf00      	nop
   14f40:	20004d24 	.word	0x20004d24

00014f44 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   14f44:	b480      	push	{r7}
   14f46:	b083      	sub	sp, #12
   14f48:	af00      	add	r7, sp, #0
   14f4a:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   14f4c:	687b      	ldr	r3, [r7, #4]
   14f4e:	4618      	mov	r0, r3
   14f50:	370c      	adds	r7, #12
   14f52:	46bd      	mov	sp, r7
   14f54:	bc80      	pop	{r7}
   14f56:	4770      	bx	lr

00014f58 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   14f58:	b580      	push	{r7, lr}
   14f5a:	b082      	sub	sp, #8
   14f5c:	af00      	add	r7, sp, #0
   14f5e:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
   14f60:	491e      	ldr	r1, [pc, #120]	; (14fdc <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   14f62:	2040      	movs	r0, #64	; 0x40
   14f64:	4b1e      	ldr	r3, [pc, #120]	; (14fe0 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   14f66:	4798      	blx	r3
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   14f68:	2040      	movs	r0, #64	; 0x40
   14f6a:	4b1e      	ldr	r3, [pc, #120]	; (14fe4 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   14f6c:	4798      	blx	r3
   14f6e:	4603      	mov	r3, r0
   14f70:	461a      	mov	r2, r3
   14f72:	687b      	ldr	r3, [r7, #4]
   14f74:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   14f76:	687b      	ldr	r3, [r7, #4]
   14f78:	78db      	ldrb	r3, [r3, #3]
   14f7a:	2b00      	cmp	r3, #0
   14f7c:	d024      	beq.n	14fc8 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
   14f7e:	687b      	ldr	r3, [r7, #4]
   14f80:	2200      	movs	r2, #0
   14f82:	709a      	strb	r2, [r3, #2]
			plugged=true;
   14f84:	687b      	ldr	r3, [r7, #4]
   14f86:	2201      	movs	r2, #1
   14f88:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   14f8a:	f44f 7216 	mov.w	r2, #600	; 0x258
   14f8e:	4916      	ldr	r1, [pc, #88]	; (14fe8 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   14f90:	4816      	ldr	r0, [pc, #88]	; (14fec <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   14f92:	4b17      	ldr	r3, [pc, #92]	; (14ff0 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   14f94:	4798      	blx	r3
			usbTerminalTimer.Start();
   14f96:	4815      	ldr	r0, [pc, #84]	; (14fec <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   14f98:	4b16      	ldr	r3, [pc, #88]	; (14ff4 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
   14f9a:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   14f9c:	4816      	ldr	r0, [pc, #88]	; (14ff8 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
   14f9e:	4b17      	ldr	r3, [pc, #92]	; (14ffc <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
   14fa0:	4798      	blx	r3
   14fa2:	4603      	mov	r3, r0
   14fa4:	f083 0301 	eor.w	r3, r3, #1
   14fa8:	b2db      	uxtb	r3, r3
   14faa:	2b00      	cmp	r3, #0
   14fac:	d008      	beq.n	14fc0 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
   14fae:	687b      	ldr	r3, [r7, #4]
   14fb0:	789b      	ldrb	r3, [r3, #2]
   14fb2:	b2db      	uxtb	r3, r3
   14fb4:	2b00      	cmp	r3, #0
   14fb6:	d0f1      	beq.n	14f9c <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
   14fb8:	687b      	ldr	r3, [r7, #4]
   14fba:	2200      	movs	r2, #0
   14fbc:	701a      	strb	r2, [r3, #0]
					return;
   14fbe:	e009      	b.n	14fd4 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   14fc0:	480a      	ldr	r0, [pc, #40]	; (14fec <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   14fc2:	4b0f      	ldr	r3, [pc, #60]	; (15000 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
   14fc4:	4798      	blx	r3
   14fc6:	e005      	b.n	14fd4 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
   14fc8:	687b      	ldr	r3, [r7, #4]
   14fca:	2200      	movs	r2, #0
   14fcc:	701a      	strb	r2, [r3, #0]
			plugged=false;
   14fce:	687b      	ldr	r3, [r7, #4]
   14fd0:	2200      	movs	r2, #0
   14fd2:	705a      	strb	r2, [r3, #1]
		}
		
}
   14fd4:	3708      	adds	r7, #8
   14fd6:	46bd      	mov	sp, r7
   14fd8:	bd80      	pop	{r7, pc}
   14fda:	bf00      	nop
   14fdc:	00014eed 	.word	0x00014eed
   14fe0:	00004af9 	.word	0x00004af9
   14fe4:	00014e89 	.word	0x00014e89
   14fe8:	00014ec5 	.word	0x00014ec5
   14fec:	20004dcc 	.word	0x20004dcc
   14ff0:	0001515d 	.word	0x0001515d
   14ff4:	00015081 	.word	0x00015081
   14ff8:	20004cc4 	.word	0x20004cc4
   14ffc:	0001478d 	.word	0x0001478d
   15000:	000150a5 	.word	0x000150a5

00015004 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   15004:	b580      	push	{r7, lr}
   15006:	b082      	sub	sp, #8
   15008:	af00      	add	r7, sp, #0
   1500a:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
   1500c:	4b04      	ldr	r3, [pc, #16]	; (15020 <_ZL7task_cbPK10timer_task+0x1c>)
   1500e:	681b      	ldr	r3, [r3, #0]
   15010:	4618      	mov	r0, r3
   15012:	4b04      	ldr	r3, [pc, #16]	; (15024 <_ZL7task_cbPK10timer_task+0x20>)
   15014:	4798      	blx	r3
}
   15016:	bf00      	nop
   15018:	3708      	adds	r7, #8
   1501a:	46bd      	mov	sp, r7
   1501c:	bd80      	pop	{r7, pc}
   1501e:	bf00      	nop
   15020:	20004d28 	.word	0x20004d28
   15024:	000150cd 	.word	0x000150cd

00015028 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
   15028:	b480      	push	{r7}
   1502a:	b083      	sub	sp, #12
   1502c:	af00      	add	r7, sp, #0
   1502e:	6078      	str	r0, [r7, #4]
   15030:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   15032:	687b      	ldr	r3, [r7, #4]
   15034:	683a      	ldr	r2, [r7, #0]
   15036:	60da      	str	r2, [r3, #12]
	ptrTimerSerialClass=this;
   15038:	4a08      	ldr	r2, [pc, #32]	; (1505c <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
   1503a:	687b      	ldr	r3, [r7, #4]
   1503c:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   1503e:	687b      	ldr	r3, [r7, #4]
   15040:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15044:	615a      	str	r2, [r3, #20]
	task->cb=task_cb;
   15046:	687b      	ldr	r3, [r7, #4]
   15048:	689b      	ldr	r3, [r3, #8]
   1504a:	4a05      	ldr	r2, [pc, #20]	; (15060 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
   1504c:	60da      	str	r2, [r3, #12]
} //Timer_Class
   1504e:	687b      	ldr	r3, [r7, #4]
   15050:	4618      	mov	r0, r3
   15052:	370c      	adds	r7, #12
   15054:	46bd      	mov	sp, r7
   15056:	bc80      	pop	{r7}
   15058:	4770      	bx	lr
   1505a:	bf00      	nop
   1505c:	20004d28 	.word	0x20004d28
   15060:	00015005 	.word	0x00015005

00015064 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
   15064:	b480      	push	{r7}
   15066:	b083      	sub	sp, #12
   15068:	af00      	add	r7, sp, #0
   1506a:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   1506c:	687b      	ldr	r3, [r7, #4]
   1506e:	2200      	movs	r2, #0
   15070:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   15072:	687b      	ldr	r3, [r7, #4]
   15074:	4618      	mov	r0, r3
   15076:	370c      	adds	r7, #12
   15078:	46bd      	mov	sp, r7
   1507a:	bc80      	pop	{r7}
   1507c:	4770      	bx	lr
	...

00015080 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
   15080:	b580      	push	{r7, lr}
   15082:	b084      	sub	sp, #16
   15084:	af00      	add	r7, sp, #0
   15086:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   15088:	687b      	ldr	r3, [r7, #4]
   1508a:	68db      	ldr	r3, [r3, #12]
   1508c:	4618      	mov	r0, r3
   1508e:	4b04      	ldr	r3, [pc, #16]	; (150a0 <_ZN17TimerSerial_Class5StartEv+0x20>)
   15090:	4798      	blx	r3
   15092:	60f8      	str	r0, [r7, #12]
	return status;
   15094:	68fb      	ldr	r3, [r7, #12]
	
}
   15096:	4618      	mov	r0, r3
   15098:	3710      	adds	r7, #16
   1509a:	46bd      	mov	sp, r7
   1509c:	bd80      	pop	{r7, pc}
   1509e:	bf00      	nop
   150a0:	00005881 	.word	0x00005881

000150a4 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
   150a4:	b580      	push	{r7, lr}
   150a6:	b084      	sub	sp, #16
   150a8:	af00      	add	r7, sp, #0
   150aa:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   150ac:	687b      	ldr	r3, [r7, #4]
   150ae:	68db      	ldr	r3, [r3, #12]
   150b0:	4618      	mov	r0, r3
   150b2:	4b05      	ldr	r3, [pc, #20]	; (150c8 <_ZN17TimerSerial_Class4StopEv+0x24>)
   150b4:	4798      	blx	r3
   150b6:	60f8      	str	r0, [r7, #12]
	timeout=0;
   150b8:	687b      	ldr	r3, [r7, #4]
   150ba:	2200      	movs	r2, #0
   150bc:	705a      	strb	r2, [r3, #1]
	return status;
   150be:	68fb      	ldr	r3, [r7, #12]
}
   150c0:	4618      	mov	r0, r3
   150c2:	3710      	adds	r7, #16
   150c4:	46bd      	mov	sp, r7
   150c6:	bd80      	pop	{r7, pc}
   150c8:	000058d5 	.word	0x000058d5

000150cc <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
   150cc:	b480      	push	{r7}
   150ce:	b083      	sub	sp, #12
   150d0:	af00      	add	r7, sp, #0
   150d2:	6078      	str	r0, [r7, #4]
	timeout=1;
   150d4:	687b      	ldr	r3, [r7, #4]
   150d6:	2201      	movs	r2, #1
   150d8:	705a      	strb	r2, [r3, #1]
}
   150da:	bf00      	nop
   150dc:	370c      	adds	r7, #12
   150de:	46bd      	mov	sp, r7
   150e0:	bc80      	pop	{r7}
   150e2:	4770      	bx	lr

000150e4 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   150e4:	b580      	push	{r7, lr}
   150e6:	b086      	sub	sp, #24
   150e8:	af00      	add	r7, sp, #0
   150ea:	60f8      	str	r0, [r7, #12]
   150ec:	60b9      	str	r1, [r7, #8]
   150ee:	607a      	str	r2, [r7, #4]
   150f0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   150f2:	68f8      	ldr	r0, [r7, #12]
   150f4:	4b0d      	ldr	r3, [pc, #52]	; (1512c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   150f6:	4798      	blx	r3
	task->interval = interval;
   150f8:	68fb      	ldr	r3, [r7, #12]
   150fa:	689b      	ldr	r3, [r3, #8]
   150fc:	687a      	ldr	r2, [r7, #4]
   150fe:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   15100:	68fb      	ldr	r3, [r7, #12]
   15102:	689b      	ldr	r3, [r3, #8]
   15104:	68ba      	ldr	r2, [r7, #8]
   15106:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   15108:	68fb      	ldr	r3, [r7, #12]
   1510a:	689b      	ldr	r3, [r3, #8]
   1510c:	78fa      	ldrb	r2, [r7, #3]
   1510e:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   15110:	68fb      	ldr	r3, [r7, #12]
   15112:	68da      	ldr	r2, [r3, #12]
   15114:	68fb      	ldr	r3, [r7, #12]
   15116:	689b      	ldr	r3, [r3, #8]
   15118:	4619      	mov	r1, r3
   1511a:	4610      	mov	r0, r2
   1511c:	4b04      	ldr	r3, [pc, #16]	; (15130 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   1511e:	4798      	blx	r3
   15120:	6178      	str	r0, [r7, #20]
	
	return status;
   15122:	697b      	ldr	r3, [r7, #20]
}
   15124:	4618      	mov	r0, r3
   15126:	3718      	adds	r7, #24
   15128:	46bd      	mov	sp, r7
   1512a:	bd80      	pop	{r7, pc}
   1512c:	00015241 	.word	0x00015241
   15130:	00005931 	.word	0x00005931

00015134 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   15134:	b590      	push	{r4, r7, lr}
   15136:	b087      	sub	sp, #28
   15138:	af00      	add	r7, sp, #0
   1513a:	60f8      	str	r0, [r7, #12]
   1513c:	60b9      	str	r1, [r7, #8]
   1513e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   15140:	2301      	movs	r3, #1
   15142:	687a      	ldr	r2, [r7, #4]
   15144:	68b9      	ldr	r1, [r7, #8]
   15146:	68f8      	ldr	r0, [r7, #12]
   15148:	4c03      	ldr	r4, [pc, #12]	; (15158 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
   1514a:	47a0      	blx	r4
   1514c:	6178      	str	r0, [r7, #20]
		return status;
   1514e:	697b      	ldr	r3, [r7, #20]
}
   15150:	4618      	mov	r0, r3
   15152:	371c      	adds	r7, #28
   15154:	46bd      	mov	sp, r7
   15156:	bd90      	pop	{r4, r7, pc}
   15158:	000150e5 	.word	0x000150e5

0001515c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
   1515c:	b590      	push	{r4, r7, lr}
   1515e:	b087      	sub	sp, #28
   15160:	af00      	add	r7, sp, #0
   15162:	60f8      	str	r0, [r7, #12]
   15164:	60b9      	str	r1, [r7, #8]
   15166:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   15168:	2300      	movs	r3, #0
   1516a:	687a      	ldr	r2, [r7, #4]
   1516c:	68b9      	ldr	r1, [r7, #8]
   1516e:	68f8      	ldr	r0, [r7, #12]
   15170:	4c03      	ldr	r4, [pc, #12]	; (15180 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
   15172:	47a0      	blx	r4
   15174:	6178      	str	r0, [r7, #20]
	return status;
   15176:	697b      	ldr	r3, [r7, #20]
}
   15178:	4618      	mov	r0, r3
   1517a:	371c      	adds	r7, #28
   1517c:	46bd      	mov	sp, r7
   1517e:	bd90      	pop	{r4, r7, pc}
   15180:	000150e5 	.word	0x000150e5

00015184 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   15184:	b590      	push	{r4, r7, lr}
   15186:	b087      	sub	sp, #28
   15188:	af00      	add	r7, sp, #0
   1518a:	60f8      	str	r0, [r7, #12]
   1518c:	60b9      	str	r1, [r7, #8]
   1518e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   15190:	2300      	movs	r3, #0
   15192:	687a      	ldr	r2, [r7, #4]
   15194:	68b9      	ldr	r1, [r7, #8]
   15196:	68f8      	ldr	r0, [r7, #12]
   15198:	4c06      	ldr	r4, [pc, #24]	; (151b4 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
   1519a:	47a0      	blx	r4
   1519c:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   1519e:	68fb      	ldr	r3, [r7, #12]
   151a0:	68db      	ldr	r3, [r3, #12]
   151a2:	4618      	mov	r0, r3
   151a4:	4b04      	ldr	r3, [pc, #16]	; (151b8 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
   151a6:	4798      	blx	r3
   151a8:	6178      	str	r0, [r7, #20]
	return status;
   151aa:	697b      	ldr	r3, [r7, #20]
}
   151ac:	4618      	mov	r0, r3
   151ae:	371c      	adds	r7, #28
   151b0:	46bd      	mov	sp, r7
   151b2:	bd90      	pop	{r4, r7, pc}
   151b4:	000150e5 	.word	0x000150e5
   151b8:	00005881 	.word	0x00005881

000151bc <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
   151bc:	b580      	push	{r7, lr}
   151be:	b082      	sub	sp, #8
   151c0:	af00      	add	r7, sp, #0
   151c2:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
   151c4:	687b      	ldr	r3, [r7, #4]
   151c6:	68da      	ldr	r2, [r3, #12]
   151c8:	687b      	ldr	r3, [r7, #4]
   151ca:	689b      	ldr	r3, [r3, #8]
   151cc:	4619      	mov	r1, r3
   151ce:	4610      	mov	r0, r2
   151d0:	4b04      	ldr	r3, [pc, #16]	; (151e4 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
   151d2:	4798      	blx	r3
	task->cb=NULL;
   151d4:	687b      	ldr	r3, [r7, #4]
   151d6:	689b      	ldr	r3, [r3, #8]
   151d8:	2200      	movs	r2, #0
   151da:	60da      	str	r2, [r3, #12]
}
   151dc:	bf00      	nop
   151de:	3708      	adds	r7, #8
   151e0:	46bd      	mov	sp, r7
   151e2:	bd80      	pop	{r7, pc}
   151e4:	00005a29 	.word	0x00005a29

000151e8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
   151e8:	b580      	push	{r7, lr}
   151ea:	b082      	sub	sp, #8
   151ec:	af00      	add	r7, sp, #0
   151ee:	6078      	str	r0, [r7, #4]
   151f0:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   151f2:	6839      	ldr	r1, [r7, #0]
   151f4:	6878      	ldr	r0, [r7, #4]
   151f6:	4b0f      	ldr	r3, [pc, #60]	; (15234 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
   151f8:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   151fa:	687b      	ldr	r3, [r7, #4]
   151fc:	68db      	ldr	r3, [r3, #12]
   151fe:	f103 0214 	add.w	r2, r3, #20
   15202:	687b      	ldr	r3, [r7, #4]
   15204:	689b      	ldr	r3, [r3, #8]
   15206:	4619      	mov	r1, r3
   15208:	4610      	mov	r0, r2
   1520a:	4b0b      	ldr	r3, [pc, #44]	; (15238 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
   1520c:	4798      	blx	r3
   1520e:	4603      	mov	r3, r0
   15210:	2b00      	cmp	r3, #0
   15212:	d007      	beq.n	15224 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   15214:	687b      	ldr	r3, [r7, #4]
   15216:	68da      	ldr	r2, [r3, #12]
   15218:	687b      	ldr	r3, [r7, #4]
   1521a:	689b      	ldr	r3, [r3, #8]
   1521c:	4619      	mov	r1, r3
   1521e:	4610      	mov	r0, r2
   15220:	4b06      	ldr	r3, [pc, #24]	; (1523c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
   15222:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   15224:	687b      	ldr	r3, [r7, #4]
   15226:	689b      	ldr	r3, [r3, #8]
   15228:	2200      	movs	r2, #0
   1522a:	60da      	str	r2, [r3, #12]
}
   1522c:	bf00      	nop
   1522e:	3708      	adds	r7, #8
   15230:	46bd      	mov	sp, r7
   15232:	bd80      	pop	{r7, pc}
   15234:	000152a9 	.word	0x000152a9
   15238:	00006601 	.word	0x00006601
   1523c:	00005a29 	.word	0x00005a29

00015240 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
   15240:	b480      	push	{r7}
   15242:	b083      	sub	sp, #12
   15244:	af00      	add	r7, sp, #0
   15246:	6078      	str	r0, [r7, #4]
	for (i = 0; i < TASK_NUMBER; i++)
   15248:	687b      	ldr	r3, [r7, #4]
   1524a:	2200      	movs	r2, #0
   1524c:	771a      	strb	r2, [r3, #28]
   1524e:	687b      	ldr	r3, [r7, #4]
   15250:	7f1b      	ldrb	r3, [r3, #28]
   15252:	2b07      	cmp	r3, #7
   15254:	dc1f      	bgt.n	15296 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x56>
	{
			if (taskArray[i].cb==NULL)
   15256:	687b      	ldr	r3, [r7, #4]
   15258:	7f1b      	ldrb	r3, [r3, #28]
   1525a:	4619      	mov	r1, r3
   1525c:	4a11      	ldr	r2, [pc, #68]	; (152a4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
   1525e:	460b      	mov	r3, r1
   15260:	009b      	lsls	r3, r3, #2
   15262:	440b      	add	r3, r1
   15264:	009b      	lsls	r3, r3, #2
   15266:	4413      	add	r3, r2
   15268:	330c      	adds	r3, #12
   1526a:	681b      	ldr	r3, [r3, #0]
   1526c:	2b00      	cmp	r3, #0
   1526e:	d10b      	bne.n	15288 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x48>
			{
				
				task=&taskArray[i];
   15270:	687b      	ldr	r3, [r7, #4]
   15272:	7f1b      	ldrb	r3, [r3, #28]
   15274:	461a      	mov	r2, r3
   15276:	4613      	mov	r3, r2
   15278:	009b      	lsls	r3, r3, #2
   1527a:	4413      	add	r3, r2
   1527c:	009b      	lsls	r3, r3, #2
   1527e:	4a09      	ldr	r2, [pc, #36]	; (152a4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
   15280:	441a      	add	r2, r3
   15282:	687b      	ldr	r3, [r7, #4]
   15284:	609a      	str	r2, [r3, #8]
			return;
   15286:	e009      	b.n	1529c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < TASK_NUMBER; i++)
   15288:	687b      	ldr	r3, [r7, #4]
   1528a:	7f1b      	ldrb	r3, [r3, #28]
   1528c:	3301      	adds	r3, #1
   1528e:	b2da      	uxtb	r2, r3
   15290:	687b      	ldr	r3, [r7, #4]
   15292:	771a      	strb	r2, [r3, #28]
   15294:	e7db      	b.n	1524e <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xe>
				
			}
	}
	task=&taskArray[0];
   15296:	687b      	ldr	r3, [r7, #4]
   15298:	4a02      	ldr	r2, [pc, #8]	; (152a4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
   1529a:	609a      	str	r2, [r3, #8]

}
   1529c:	370c      	adds	r7, #12
   1529e:	46bd      	mov	sp, r7
   152a0:	bc80      	pop	{r7}
   152a2:	4770      	bx	lr
   152a4:	20004d2c 	.word	0x20004d2c

000152a8 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
   152a8:	b480      	push	{r7}
   152aa:	b083      	sub	sp, #12
   152ac:	af00      	add	r7, sp, #0
   152ae:	6078      	str	r0, [r7, #4]
   152b0:	6039      	str	r1, [r7, #0]
	for (i = 0; i < TASK_NUMBER; i++)
   152b2:	687b      	ldr	r3, [r7, #4]
   152b4:	2200      	movs	r2, #0
   152b6:	771a      	strb	r2, [r3, #28]
   152b8:	687b      	ldr	r3, [r7, #4]
   152ba:	7f1b      	ldrb	r3, [r3, #28]
   152bc:	2b07      	cmp	r3, #7
   152be:	dc20      	bgt.n	15302 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	{
		if (taskArray[i].cb==(timer_cb_t)func)
   152c0:	687b      	ldr	r3, [r7, #4]
   152c2:	7f1b      	ldrb	r3, [r3, #28]
   152c4:	4619      	mov	r1, r3
   152c6:	4a11      	ldr	r2, [pc, #68]	; (1530c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
   152c8:	460b      	mov	r3, r1
   152ca:	009b      	lsls	r3, r3, #2
   152cc:	440b      	add	r3, r1
   152ce:	009b      	lsls	r3, r3, #2
   152d0:	4413      	add	r3, r2
   152d2:	330c      	adds	r3, #12
   152d4:	681a      	ldr	r2, [r3, #0]
   152d6:	683b      	ldr	r3, [r7, #0]
   152d8:	429a      	cmp	r2, r3
   152da:	d10b      	bne.n	152f4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4c>
		{
			
			task=&taskArray[i];
   152dc:	687b      	ldr	r3, [r7, #4]
   152de:	7f1b      	ldrb	r3, [r3, #28]
   152e0:	461a      	mov	r2, r3
   152e2:	4613      	mov	r3, r2
   152e4:	009b      	lsls	r3, r3, #2
   152e6:	4413      	add	r3, r2
   152e8:	009b      	lsls	r3, r3, #2
   152ea:	4a08      	ldr	r2, [pc, #32]	; (1530c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
   152ec:	441a      	add	r2, r3
   152ee:	687b      	ldr	r3, [r7, #4]
   152f0:	609a      	str	r2, [r3, #8]
			return;
   152f2:	e006      	b.n	15302 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	for (i = 0; i < TASK_NUMBER; i++)
   152f4:	687b      	ldr	r3, [r7, #4]
   152f6:	7f1b      	ldrb	r3, [r3, #28]
   152f8:	3301      	adds	r3, #1
   152fa:	b2da      	uxtb	r2, r3
   152fc:	687b      	ldr	r3, [r7, #4]
   152fe:	771a      	strb	r2, [r3, #28]
   15300:	e7da      	b.n	152b8 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x10>
			
		}
	}


}
   15302:	370c      	adds	r7, #12
   15304:	46bd      	mov	sp, r7
   15306:	bc80      	pop	{r7}
   15308:	4770      	bx	lr
   1530a:	bf00      	nop
   1530c:	20004d2c 	.word	0x20004d2c

00015310 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   15310:	b580      	push	{r7, lr}
   15312:	b082      	sub	sp, #8
   15314:	af00      	add	r7, sp, #0
   15316:	6078      	str	r0, [r7, #4]
   15318:	6039      	str	r1, [r7, #0]
   1531a:	687b      	ldr	r3, [r7, #4]
   1531c:	2b01      	cmp	r3, #1
   1531e:	d116      	bne.n	1534e <_Z41__static_initialization_and_destruction_0ii+0x3e>
   15320:	683b      	ldr	r3, [r7, #0]
   15322:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15326:	4293      	cmp	r3, r2
   15328:	d111      	bne.n	1534e <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
   1532a:	490b      	ldr	r1, [pc, #44]	; (15358 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1532c:	480b      	ldr	r0, [pc, #44]	; (1535c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   1532e:	4b0c      	ldr	r3, [pc, #48]	; (15360 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   15330:	4798      	blx	r3
   15332:	4a0c      	ldr	r2, [pc, #48]	; (15364 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15334:	490c      	ldr	r1, [pc, #48]	; (15368 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   15336:	4809      	ldr	r0, [pc, #36]	; (1535c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15338:	4b0c      	ldr	r3, [pc, #48]	; (1536c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1533a:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   1533c:	490c      	ldr	r1, [pc, #48]	; (15370 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   1533e:	480d      	ldr	r0, [pc, #52]	; (15374 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   15340:	4b07      	ldr	r3, [pc, #28]	; (15360 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   15342:	4798      	blx	r3
   15344:	4a07      	ldr	r2, [pc, #28]	; (15364 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15346:	4908      	ldr	r1, [pc, #32]	; (15368 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   15348:	480a      	ldr	r0, [pc, #40]	; (15374 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   1534a:	4b08      	ldr	r3, [pc, #32]	; (1536c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1534c:	4798      	blx	r3
   1534e:	bf00      	nop
   15350:	3708      	adds	r7, #8
   15352:	46bd      	mov	sp, r7
   15354:	bd80      	pop	{r7, pc}
   15356:	bf00      	nop
   15358:	20005068 	.word	0x20005068
   1535c:	20004dcc 	.word	0x20004dcc
   15360:	00015029 	.word	0x00015029
   15364:	20000000 	.word	0x20000000
   15368:	00015065 	.word	0x00015065
   1536c:	000159a5 	.word	0x000159a5
   15370:	20004fb0 	.word	0x20004fb0
   15374:	20004dec 	.word	0x20004dec

00015378 <_GLOBAL__sub_I_ptrTimerSerialClass>:
   15378:	b580      	push	{r7, lr}
   1537a:	af00      	add	r7, sp, #0
   1537c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15380:	2001      	movs	r0, #1
   15382:	4b01      	ldr	r3, [pc, #4]	; (15388 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
   15384:	4798      	blx	r3
   15386:	bd80      	pop	{r7, pc}
   15388:	00015311 	.word	0x00015311

0001538c <_ZL23GetRelativeClassPointerP16i2c_m_async_desc>:

I2C_Asyn_Class	*ptrI2C_Asyn_Class=NULL;
//static list_descriptor i2cList=NULL;
//i2cList=NULL;
list_descriptor i2cList;
static void GetRelativeClassPointer(i2c_m_async_desc*  i2c){
   1538c:	b580      	push	{r7, lr}
   1538e:	b084      	sub	sp, #16
   15390:	af00      	add	r7, sp, #0
   15392:	6078      	str	r0, [r7, #4]
	uint32_t  *ptr=(uint32_t*)ptrI2C_Asyn_Class->GetClassPointer(i2c);;
   15394:	4b08      	ldr	r3, [pc, #32]	; (153b8 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   15396:	681b      	ldr	r3, [r3, #0]
   15398:	6879      	ldr	r1, [r7, #4]
   1539a:	4618      	mov	r0, r3
   1539c:	4b07      	ldr	r3, [pc, #28]	; (153bc <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x30>)
   1539e:	4798      	blx	r3
   153a0:	4603      	mov	r3, r0
   153a2:	60fb      	str	r3, [r7, #12]
	I2C_Asyn_Class	*ptrClass=(I2C_Asyn_Class*)ptr;
   153a4:	68fb      	ldr	r3, [r7, #12]
   153a6:	60bb      	str	r3, [r7, #8]
	ptrI2C_Asyn_Class=ptrClass;
   153a8:	4a03      	ldr	r2, [pc, #12]	; (153b8 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   153aa:	68bb      	ldr	r3, [r7, #8]
   153ac:	6013      	str	r3, [r2, #0]
}
   153ae:	bf00      	nop
   153b0:	3710      	adds	r7, #16
   153b2:	46bd      	mov	sp, r7
   153b4:	bd80      	pop	{r7, pc}
   153b6:	bf00      	nop
   153b8:	20004e0c 	.word	0x20004e0c
   153bc:	00015769 	.word	0x00015769

000153c0 <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
   153c0:	b580      	push	{r7, lr}
   153c2:	b082      	sub	sp, #8
   153c4:	af00      	add	r7, sp, #0
   153c6:	6078      	str	r0, [r7, #4]
	
	GetRelativeClassPointer(i2c);
   153c8:	6878      	ldr	r0, [r7, #4]
   153ca:	4b05      	ldr	r3, [pc, #20]	; (153e0 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x20>)
   153cc:	4798      	blx	r3
	ptrI2C_Asyn_Class->txReady=true;
   153ce:	4b05      	ldr	r3, [pc, #20]	; (153e4 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x24>)
   153d0:	681b      	ldr	r3, [r3, #0]
   153d2:	2201      	movs	r2, #1
   153d4:	741a      	strb	r2, [r3, #16]


}
   153d6:	bf00      	nop
   153d8:	3708      	adds	r7, #8
   153da:	46bd      	mov	sp, r7
   153dc:	bd80      	pop	{r7, pc}
   153de:	bf00      	nop
   153e0:	0001538d 	.word	0x0001538d
   153e4:	20004e0c 	.word	0x20004e0c

000153e8 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
   153e8:	b580      	push	{r7, lr}
   153ea:	b082      	sub	sp, #8
   153ec:	af00      	add	r7, sp, #0
   153ee:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   153f0:	6878      	ldr	r0, [r7, #4]
   153f2:	4b05      	ldr	r3, [pc, #20]	; (15408 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x20>)
   153f4:	4798      	blx	r3
	ptrI2C_Asyn_Class->rxReady=true;
   153f6:	4b05      	ldr	r3, [pc, #20]	; (1540c <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x24>)
   153f8:	681b      	ldr	r3, [r3, #0]
   153fa:	2201      	movs	r2, #1
   153fc:	745a      	strb	r2, [r3, #17]
}
   153fe:	bf00      	nop
   15400:	3708      	adds	r7, #8
   15402:	46bd      	mov	sp, r7
   15404:	bd80      	pop	{r7, pc}
   15406:	bf00      	nop
   15408:	0001538d 	.word	0x0001538d
   1540c:	20004e0c 	.word	0x20004e0c

00015410 <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
   15410:	b580      	push	{r7, lr}
   15412:	b082      	sub	sp, #8
   15414:	af00      	add	r7, sp, #0
   15416:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   15418:	6878      	ldr	r0, [r7, #4]
   1541a:	4b09      	ldr	r3, [pc, #36]	; (15440 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
   1541c:	4798      	blx	r3
		ptrI2C_Asyn_Class->Clear_ack();
   1541e:	4b09      	ldr	r3, [pc, #36]	; (15444 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   15420:	681b      	ldr	r3, [r3, #0]
   15422:	4618      	mov	r0, r3
   15424:	4b08      	ldr	r3, [pc, #32]	; (15448 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x38>)
   15426:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
   15428:	4b06      	ldr	r3, [pc, #24]	; (15444 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   1542a:	681b      	ldr	r3, [r3, #0]
   1542c:	2201      	movs	r2, #1
   1542e:	741a      	strb	r2, [r3, #16]
		ptrI2C_Asyn_Class->rxReady=true;
   15430:	4b04      	ldr	r3, [pc, #16]	; (15444 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   15432:	681b      	ldr	r3, [r3, #0]
   15434:	2201      	movs	r2, #1
   15436:	745a      	strb	r2, [r3, #17]
 }
   15438:	bf00      	nop
   1543a:	3708      	adds	r7, #8
   1543c:	46bd      	mov	sp, r7
   1543e:	bd80      	pop	{r7, pc}
   15440:	0001538d 	.word	0x0001538d
   15444:	20004e0c 	.word	0x20004e0c
   15448:	0001564d 	.word	0x0001564d

0001544c <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
   1544c:	b580      	push	{r7, lr}
   1544e:	b082      	sub	sp, #8
   15450:	af00      	add	r7, sp, #0
   15452:	6078      	str	r0, [r7, #4]
   15454:	687b      	ldr	r3, [r7, #4]
   15456:	4618      	mov	r0, r3
   15458:	4b07      	ldr	r3, [pc, #28]	; (15478 <_ZN14I2C_Asyn_ClassC1Ev+0x2c>)
   1545a:	4798      	blx	r3
{
	ptrI2CAsynDescr=&I2C_EXPANDER;
   1545c:	687b      	ldr	r3, [r7, #4]
   1545e:	4a07      	ldr	r2, [pc, #28]	; (1547c <_ZN14I2C_Asyn_ClassC1Ev+0x30>)
   15460:	61da      	str	r2, [r3, #28]
	ptrClass=this;
   15462:	687b      	ldr	r3, [r7, #4]
   15464:	687a      	ldr	r2, [r7, #4]
   15466:	615a      	str	r2, [r3, #20]
	ptrI2C_Asyn_Class=this;
   15468:	4a05      	ldr	r2, [pc, #20]	; (15480 <_ZN14I2C_Asyn_ClassC1Ev+0x34>)
   1546a:	687b      	ldr	r3, [r7, #4]
   1546c:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
   1546e:	687b      	ldr	r3, [r7, #4]
   15470:	4618      	mov	r0, r3
   15472:	3708      	adds	r7, #8
   15474:	46bd      	mov	sp, r7
   15476:	bd80      	pop	{r7, pc}
   15478:	00015681 	.word	0x00015681
   1547c:	20005084 	.word	0x20005084
   15480:	20004e0c 	.word	0x20004e0c

00015484 <_ZN14I2C_Asyn_ClassD1Ev>:
	ptrClass=this;
	ptrI2C_Asyn_Class=this;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
   15484:	b580      	push	{r7, lr}
   15486:	b082      	sub	sp, #8
   15488:	af00      	add	r7, sp, #0
   1548a:	6078      	str	r0, [r7, #4]
   1548c:	687b      	ldr	r3, [r7, #4]
   1548e:	4618      	mov	r0, r3
   15490:	4b03      	ldr	r3, [pc, #12]	; (154a0 <_ZN14I2C_Asyn_ClassD1Ev+0x1c>)
   15492:	4798      	blx	r3
{

} //~I2C_Asyn_Class
   15494:	687b      	ldr	r3, [r7, #4]
   15496:	4618      	mov	r0, r3
   15498:	3708      	adds	r7, #8
   1549a:	46bd      	mov	sp, r7
   1549c:	bd80      	pop	{r7, pc}
   1549e:	bf00      	nop
   154a0:	000156a1 	.word	0x000156a1

000154a4 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
   154a4:	b480      	push	{r7}
   154a6:	b083      	sub	sp, #12
   154a8:	af00      	add	r7, sp, #0
   154aa:	6078      	str	r0, [r7, #4]
   154ac:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
   154ae:	687b      	ldr	r3, [r7, #4]
   154b0:	683a      	ldr	r2, [r7, #0]
   154b2:	61da      	str	r2, [r3, #28]
	ptrClass=this;
   154b4:	687b      	ldr	r3, [r7, #4]
   154b6:	687a      	ldr	r2, [r7, #4]
   154b8:	615a      	str	r2, [r3, #20]
	ptrI2C_Asyn_Class=this;
   154ba:	4a04      	ldr	r2, [pc, #16]	; (154cc <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x28>)
   154bc:	687b      	ldr	r3, [r7, #4]
   154be:	6013      	str	r3, [r2, #0]
}
   154c0:	bf00      	nop
   154c2:	370c      	adds	r7, #12
   154c4:	46bd      	mov	sp, r7
   154c6:	bc80      	pop	{r7}
   154c8:	4770      	bx	lr
   154ca:	bf00      	nop
   154cc:	20004e0c 	.word	0x20004e0c

000154d0 <_ZN14I2C_Asyn_Class4InitEv>:

uint8_t	I2C_Asyn_Class::Init(void){
   154d0:	b580      	push	{r7, lr}
   154d2:	b084      	sub	sp, #16
   154d4:	af00      	add	r7, sp, #0
   154d6:	6078      	str	r0, [r7, #4]
	

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
   154d8:	687b      	ldr	r3, [r7, #4]
   154da:	69da      	ldr	r2, [r3, #28]
   154dc:	687b      	ldr	r3, [r7, #4]
   154de:	3318      	adds	r3, #24
   154e0:	4619      	mov	r1, r3
   154e2:	4610      	mov	r0, r2
   154e4:	4b1e      	ldr	r3, [pc, #120]	; (15560 <_ZN14I2C_Asyn_Class4InitEv+0x90>)
   154e6:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
   154e8:	687b      	ldr	r3, [r7, #4]
   154ea:	69db      	ldr	r3, [r3, #28]
   154ec:	4618      	mov	r0, r3
   154ee:	4b1d      	ldr	r3, [pc, #116]	; (15564 <_ZN14I2C_Asyn_Class4InitEv+0x94>)
   154f0:	4798      	blx	r3
   154f2:	4603      	mov	r3, r0
   154f4:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
   154f6:	687b      	ldr	r3, [r7, #4]
   154f8:	69db      	ldr	r3, [r3, #28]
   154fa:	4a1b      	ldr	r2, [pc, #108]	; (15568 <_ZN14I2C_Asyn_Class4InitEv+0x98>)
   154fc:	2101      	movs	r1, #1
   154fe:	4618      	mov	r0, r3
   15500:	4b1a      	ldr	r3, [pc, #104]	; (1556c <_ZN14I2C_Asyn_Class4InitEv+0x9c>)
   15502:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
   15504:	687b      	ldr	r3, [r7, #4]
   15506:	69db      	ldr	r3, [r3, #28]
   15508:	4a19      	ldr	r2, [pc, #100]	; (15570 <_ZN14I2C_Asyn_Class4InitEv+0xa0>)
   1550a:	2102      	movs	r1, #2
   1550c:	4618      	mov	r0, r3
   1550e:	4b17      	ldr	r3, [pc, #92]	; (1556c <_ZN14I2C_Asyn_Class4InitEv+0x9c>)
   15510:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
   15512:	687b      	ldr	r3, [r7, #4]
   15514:	69db      	ldr	r3, [r3, #28]
   15516:	4a17      	ldr	r2, [pc, #92]	; (15574 <_ZN14I2C_Asyn_Class4InitEv+0xa4>)
   15518:	2100      	movs	r1, #0
   1551a:	4618      	mov	r0, r3
   1551c:	4b13      	ldr	r3, [pc, #76]	; (1556c <_ZN14I2C_Asyn_Class4InitEv+0x9c>)
   1551e:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	coupleKey.ptrI2CAsynClass=(uint32_t)ptrClass;
   15520:	687b      	ldr	r3, [r7, #4]
   15522:	695b      	ldr	r3, [r3, #20]
   15524:	461a      	mov	r2, r3
   15526:	687b      	ldr	r3, [r7, #4]
   15528:	62da      	str	r2, [r3, #44]	; 0x2c
	coupleKey.i2cDescr=ptrI2CAsynDescr;
   1552a:	687b      	ldr	r3, [r7, #4]
   1552c:	69da      	ldr	r2, [r3, #28]
   1552e:	687b      	ldr	r3, [r7, #4]
   15530:	629a      	str	r2, [r3, #40]	; 0x28
	coupleKey.dummy=(uint32_t)ptrClass;
   15532:	687b      	ldr	r3, [r7, #4]
   15534:	695b      	ldr	r3, [r3, #20]
   15536:	461a      	mov	r2, r3
   15538:	687b      	ldr	r3, [r7, #4]
   1553a:	625a      	str	r2, [r3, #36]	; 0x24
	AddI2CObject(coupleKey);
   1553c:	687a      	ldr	r2, [r7, #4]
   1553e:	687b      	ldr	r3, [r7, #4]
   15540:	3324      	adds	r3, #36	; 0x24
   15542:	4619      	mov	r1, r3
   15544:	4610      	mov	r0, r2
   15546:	4b0c      	ldr	r3, [pc, #48]	; (15578 <_ZN14I2C_Asyn_Class4InitEv+0xa8>)
   15548:	4798      	blx	r3
	txReady=true;
   1554a:	687b      	ldr	r3, [r7, #4]
   1554c:	2201      	movs	r2, #1
   1554e:	741a      	strb	r2, [r3, #16]
	rxReady=true;
   15550:	687b      	ldr	r3, [r7, #4]
   15552:	2201      	movs	r2, #1
   15554:	745a      	strb	r2, [r3, #17]
	return ena;
   15556:	7bfb      	ldrb	r3, [r7, #15]
	
}
   15558:	4618      	mov	r0, r3
   1555a:	3710      	adds	r7, #16
   1555c:	46bd      	mov	sp, r7
   1555e:	bd80      	pop	{r7, pc}
   15560:	00004f93 	.word	0x00004f93
   15564:	00004ea5 	.word	0x00004ea5
   15568:	000153c1 	.word	0x000153c1
   1556c:	00004f4b 	.word	0x00004f4b
   15570:	000153e9 	.word	0x000153e9
   15574:	00015411 	.word	0x00015411
   15578:	000156b5 	.word	0x000156b5

0001557c <_ZN14I2C_Asyn_Class4InitEh>:
uint8_t	I2C_Asyn_Class::Init(uint8_t add){
   1557c:	b580      	push	{r7, lr}
   1557e:	b084      	sub	sp, #16
   15580:	af00      	add	r7, sp, #0
   15582:	6078      	str	r0, [r7, #4]
   15584:	460b      	mov	r3, r1
   15586:	70fb      	strb	r3, [r7, #3]
	uint8_t ena=Init();
   15588:	6878      	ldr	r0, [r7, #4]
   1558a:	4b0c      	ldr	r3, [pc, #48]	; (155bc <_ZN14I2C_Asyn_Class4InitEh+0x40>)
   1558c:	4798      	blx	r3
   1558e:	4603      	mov	r3, r0
   15590:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
   15592:	687b      	ldr	r3, [r7, #4]
   15594:	69db      	ldr	r3, [r3, #28]
   15596:	78fa      	ldrb	r2, [r7, #3]
   15598:	b211      	sxth	r1, r2
   1559a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1559e:	4618      	mov	r0, r3
   155a0:	4b07      	ldr	r3, [pc, #28]	; (155c0 <_ZN14I2C_Asyn_Class4InitEh+0x44>)
   155a2:	4798      	blx	r3
	txReady=true;
   155a4:	687b      	ldr	r3, [r7, #4]
   155a6:	2201      	movs	r2, #1
   155a8:	741a      	strb	r2, [r3, #16]
	rxReady=true;
   155aa:	687b      	ldr	r3, [r7, #4]
   155ac:	2201      	movs	r2, #1
   155ae:	745a      	strb	r2, [r3, #17]
	return ena;
   155b0:	7bfb      	ldrb	r3, [r7, #15]
}
   155b2:	4618      	mov	r0, r3
   155b4:	3710      	adds	r7, #16
   155b6:	46bd      	mov	sp, r7
   155b8:	bd80      	pop	{r7, pc}
   155ba:	bf00      	nop
   155bc:	000154d1 	.word	0x000154d1
   155c0:	00004f11 	.word	0x00004f11

000155c4 <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
   155c4:	b580      	push	{r7, lr}
   155c6:	b084      	sub	sp, #16
   155c8:	af00      	add	r7, sp, #0
   155ca:	60f8      	str	r0, [r7, #12]
   155cc:	60b9      	str	r1, [r7, #8]
   155ce:	4613      	mov	r3, r2
   155d0:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
   155d2:	68fb      	ldr	r3, [r7, #12]
   155d4:	7c1b      	ldrb	r3, [r3, #16]
   155d6:	b2db      	uxtb	r3, r3
   155d8:	f083 0301 	eor.w	r3, r3, #1
   155dc:	b2db      	uxtb	r3, r3
   155de:	2b00      	cmp	r3, #0
   155e0:	d000      	beq.n	155e4 <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
   155e2:	e7f6      	b.n	155d2 <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
   155e4:	68fb      	ldr	r3, [r7, #12]
   155e6:	2200      	movs	r2, #0
   155e8:	741a      	strb	r2, [r3, #16]
	return io_write(I2C_io, buffer, lenght);
   155ea:	68fb      	ldr	r3, [r7, #12]
   155ec:	699b      	ldr	r3, [r3, #24]
   155ee:	88fa      	ldrh	r2, [r7, #6]
   155f0:	68b9      	ldr	r1, [r7, #8]
   155f2:	4618      	mov	r0, r3
   155f4:	4b03      	ldr	r3, [pc, #12]	; (15604 <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
   155f6:	4798      	blx	r3
   155f8:	4603      	mov	r3, r0
}
   155fa:	4618      	mov	r0, r3
   155fc:	3710      	adds	r7, #16
   155fe:	46bd      	mov	sp, r7
   15600:	bd80      	pop	{r7, pc}
   15602:	bf00      	nop
   15604:	00015905 	.word	0x00015905

00015608 <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
   15608:	b580      	push	{r7, lr}
   1560a:	b084      	sub	sp, #16
   1560c:	af00      	add	r7, sp, #0
   1560e:	60f8      	str	r0, [r7, #12]
   15610:	60b9      	str	r1, [r7, #8]
   15612:	4613      	mov	r3, r2
   15614:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
   15616:	68fb      	ldr	r3, [r7, #12]
   15618:	7c5b      	ldrb	r3, [r3, #17]
   1561a:	b2db      	uxtb	r3, r3
   1561c:	f083 0301 	eor.w	r3, r3, #1
   15620:	b2db      	uxtb	r3, r3
   15622:	2b00      	cmp	r3, #0
   15624:	d000      	beq.n	15628 <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
   15626:	e7f6      	b.n	15616 <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
   15628:	68fb      	ldr	r3, [r7, #12]
   1562a:	2200      	movs	r2, #0
   1562c:	745a      	strb	r2, [r3, #17]
		return io_read(I2C_io, buffer, lenght);
   1562e:	68fb      	ldr	r3, [r7, #12]
   15630:	699b      	ldr	r3, [r3, #24]
   15632:	88fa      	ldrh	r2, [r7, #6]
   15634:	68b9      	ldr	r1, [r7, #8]
   15636:	4618      	mov	r0, r3
   15638:	4b03      	ldr	r3, [pc, #12]	; (15648 <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
   1563a:	4798      	blx	r3
   1563c:	4603      	mov	r3, r0
}
   1563e:	4618      	mov	r0, r3
   15640:	3710      	adds	r7, #16
   15642:	46bd      	mov	sp, r7
   15644:	bd80      	pop	{r7, pc}
   15646:	bf00      	nop
   15648:	00015955 	.word	0x00015955

0001564c <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
   1564c:	b480      	push	{r7}
   1564e:	b083      	sub	sp, #12
   15650:	af00      	add	r7, sp, #0
   15652:	6078      	str	r0, [r7, #4]
	 ack=false;
   15654:	687b      	ldr	r3, [r7, #4]
   15656:	2200      	movs	r2, #0
   15658:	749a      	strb	r2, [r3, #18]
	 return ack;
   1565a:	687b      	ldr	r3, [r7, #4]
   1565c:	7c9b      	ldrb	r3, [r3, #18]
   1565e:	b2db      	uxtb	r3, r3
   15660:	4618      	mov	r0, r3
   15662:	370c      	adds	r7, #12
   15664:	46bd      	mov	sp, r7
   15666:	bc80      	pop	{r7}
   15668:	4770      	bx	lr

0001566a <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
   1566a:	b480      	push	{r7}
   1566c:	b083      	sub	sp, #12
   1566e:	af00      	add	r7, sp, #0
   15670:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
   15672:	687b      	ldr	r3, [r7, #4]
   15674:	681b      	ldr	r3, [r3, #0]
}
   15676:	4618      	mov	r0, r3
   15678:	370c      	adds	r7, #12
   1567a:	46bd      	mov	sp, r7
   1567c:	bc80      	pop	{r7}
   1567e:	4770      	bx	lr

00015680 <_ZN14I2C_ObjectListC1Ev>:

#include "I2C_ObjectList.h"
#include "I2C_Asyn_Class.h"

// default constructor
I2C_ObjectList::I2C_ObjectList()
   15680:	b480      	push	{r7}
   15682:	b083      	sub	sp, #12
   15684:	af00      	add	r7, sp, #0
   15686:	6078      	str	r0, [r7, #4]
{
	objList=&i2cList;
   15688:	687b      	ldr	r3, [r7, #4]
   1568a:	4a04      	ldr	r2, [pc, #16]	; (1569c <_ZN14I2C_ObjectListC1Ev+0x1c>)
   1568c:	60da      	str	r2, [r3, #12]
} //I2C_ObjectList
   1568e:	687b      	ldr	r3, [r7, #4]
   15690:	4618      	mov	r0, r3
   15692:	370c      	adds	r7, #12
   15694:	46bd      	mov	sp, r7
   15696:	bc80      	pop	{r7}
   15698:	4770      	bx	lr
   1569a:	bf00      	nop
   1569c:	20004e10 	.word	0x20004e10

000156a0 <_ZN14I2C_ObjectListD1Ev>:

// default destructor
I2C_ObjectList::~I2C_ObjectList()
   156a0:	b480      	push	{r7}
   156a2:	b083      	sub	sp, #12
   156a4:	af00      	add	r7, sp, #0
   156a6:	6078      	str	r0, [r7, #4]
{
} //~I2C_ObjectList
   156a8:	687b      	ldr	r3, [r7, #4]
   156aa:	4618      	mov	r0, r3
   156ac:	370c      	adds	r7, #12
   156ae:	46bd      	mov	sp, r7
   156b0:	bc80      	pop	{r7}
   156b2:	4770      	bx	lr

000156b4 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor>:

int I2C_ObjectList::AddI2CObject(I2CPointerAndDescriptor& ck ){
   156b4:	b580      	push	{r7, lr}
   156b6:	b082      	sub	sp, #8
   156b8:	af00      	add	r7, sp, #0
   156ba:	6078      	str	r0, [r7, #4]
   156bc:	6039      	str	r1, [r7, #0]
	
		ASSERT((objList)&&(&ck));
   156be:	687b      	ldr	r3, [r7, #4]
   156c0:	68db      	ldr	r3, [r3, #12]
   156c2:	2b00      	cmp	r3, #0
   156c4:	d004      	beq.n	156d0 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   156c6:	683b      	ldr	r3, [r7, #0]
   156c8:	2b00      	cmp	r3, #0
   156ca:	d001      	beq.n	156d0 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   156cc:	2301      	movs	r3, #1
   156ce:	e000      	b.n	156d2 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1e>
   156d0:	2300      	movs	r3, #0
   156d2:	2219      	movs	r2, #25
   156d4:	4910      	ldr	r1, [pc, #64]	; (15718 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   156d6:	4618      	mov	r0, r3
   156d8:	4b10      	ldr	r3, [pc, #64]	; (1571c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   156da:	4798      	blx	r3
		if (is_list_element(objList,&ck)) {
   156dc:	687b      	ldr	r3, [r7, #4]
   156de:	68db      	ldr	r3, [r3, #12]
   156e0:	6839      	ldr	r1, [r7, #0]
   156e2:	4618      	mov	r0, r3
   156e4:	4b0e      	ldr	r3, [pc, #56]	; (15720 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x6c>)
   156e6:	4798      	blx	r3
   156e8:	4603      	mov	r3, r0
   156ea:	2b00      	cmp	r3, #0
   156ec:	d007      	beq.n	156fe <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x4a>

			ASSERT(false);
   156ee:	221c      	movs	r2, #28
   156f0:	4909      	ldr	r1, [pc, #36]	; (15718 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   156f2:	2000      	movs	r0, #0
   156f4:	4b09      	ldr	r3, [pc, #36]	; (1571c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   156f6:	4798      	blx	r3
			return ERR_ALREADY_INITIALIZED;
   156f8:	f06f 0311 	mvn.w	r3, #17
   156fc:	e007      	b.n	1570e <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x5a>
		}
		AddObject(objList,&ck);
   156fe:	687b      	ldr	r3, [r7, #4]
   15700:	68db      	ldr	r3, [r3, #12]
   15702:	683a      	ldr	r2, [r7, #0]
   15704:	4619      	mov	r1, r3
   15706:	6878      	ldr	r0, [r7, #4]
   15708:	4b06      	ldr	r3, [pc, #24]	; (15724 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x70>)
   1570a:	4798      	blx	r3
		return ERR_NONE;
   1570c:	2300      	movs	r3, #0
}
   1570e:	4618      	mov	r0, r3
   15710:	3708      	adds	r7, #8
   15712:	46bd      	mov	sp, r7
   15714:	bd80      	pop	{r7, pc}
   15716:	bf00      	nop
   15718:	00019970 	.word	0x00019970
   1571c:	000065d9 	.word	0x000065d9
   15720:	00006601 	.word	0x00006601
   15724:	00015729 	.word	0x00015729

00015728 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor>:
		coupleKey.i2cDescr=ptrI2C;
		ck=coupleKey;
			
}

void I2C_ObjectList::AddObject(list_descriptor *list,I2CPointerAndDescriptor* nck){
   15728:	b580      	push	{r7, lr}
   1572a:	b086      	sub	sp, #24
   1572c:	af00      	add	r7, sp, #0
   1572e:	60f8      	str	r0, [r7, #12]
   15730:	60b9      	str	r1, [r7, #8]
   15732:	607a      	str	r2, [r7, #4]
		I2CPointerAndDescriptor *it, *head = (I2CPointerAndDescriptor *)list_get_head(list);
   15734:	68b8      	ldr	r0, [r7, #8]
   15736:	4b09      	ldr	r3, [pc, #36]	; (1575c <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x34>)
   15738:	4798      	blx	r3
   1573a:	6178      	str	r0, [r7, #20]

		if (!head) {
   1573c:	697b      	ldr	r3, [r7, #20]
   1573e:	2b00      	cmp	r3, #0
   15740:	d104      	bne.n	1574c <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x24>
			list_insert_as_head(list, nck);
   15742:	6879      	ldr	r1, [r7, #4]
   15744:	68b8      	ldr	r0, [r7, #8]
   15746:	4b06      	ldr	r3, [pc, #24]	; (15760 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x38>)
   15748:	4798      	blx	r3
			return;
   1574a:	e003      	b.n	15754 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x2c>
		}else{
			list_insert_at_end(list,nck);
   1574c:	6879      	ldr	r1, [r7, #4]
   1574e:	68b8      	ldr	r0, [r7, #8]
   15750:	4b04      	ldr	r3, [pc, #16]	; (15764 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x3c>)
   15752:	4798      	blx	r3
		}
}
   15754:	3718      	adds	r7, #24
   15756:	46bd      	mov	sp, r7
   15758:	bd80      	pop	{r7, pc}
   1575a:	bf00      	nop
   1575c:	0001566b 	.word	0x0001566b
   15760:	00006639 	.word	0x00006639
   15764:	000066b5 	.word	0x000066b5

00015768 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc>:

uint32_t I2C_ObjectList::GetClassPointer(i2c_m_async_desc*	i2cDescr){
   15768:	b480      	push	{r7}
   1576a:	b087      	sub	sp, #28
   1576c:	af00      	add	r7, sp, #0
   1576e:	6078      	str	r0, [r7, #4]
   15770:	6039      	str	r1, [r7, #0]
		struct list_element *it;
		//I2CPointerAndDescriptor *it;
		I2CPointerAndDescriptor *k;
		uint32_t ptr;
		for (it = objList->head; it; it = it->next) {
   15772:	687b      	ldr	r3, [r7, #4]
   15774:	68db      	ldr	r3, [r3, #12]
   15776:	681b      	ldr	r3, [r3, #0]
   15778:	617b      	str	r3, [r7, #20]
   1577a:	697b      	ldr	r3, [r7, #20]
   1577c:	2b00      	cmp	r3, #0
   1577e:	d00f      	beq.n	157a0 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x38>
			k=(I2CPointerAndDescriptor*)it;
   15780:	697b      	ldr	r3, [r7, #20]
   15782:	613b      	str	r3, [r7, #16]
			
			if (k->i2cDescr== i2cDescr){
   15784:	693b      	ldr	r3, [r7, #16]
   15786:	685a      	ldr	r2, [r3, #4]
   15788:	683b      	ldr	r3, [r7, #0]
   1578a:	429a      	cmp	r2, r3
   1578c:	d104      	bne.n	15798 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x30>
				ptr=k->ptrI2CAsynClass;
   1578e:	693b      	ldr	r3, [r7, #16]
   15790:	689b      	ldr	r3, [r3, #8]
   15792:	60fb      	str	r3, [r7, #12]
				return ptr;
   15794:	68fb      	ldr	r3, [r7, #12]
   15796:	e004      	b.n	157a2 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x3a>
		for (it = objList->head; it; it = it->next) {
   15798:	697b      	ldr	r3, [r7, #20]
   1579a:	681b      	ldr	r3, [r3, #0]
   1579c:	617b      	str	r3, [r7, #20]
   1579e:	e7ec      	b.n	1577a <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x12>
			}
		}

		return 0;
   157a0:	2300      	movs	r3, #0
   157a2:	4618      	mov	r0, r3
   157a4:	371c      	adds	r7, #28
   157a6:	46bd      	mov	sp, r7
   157a8:	bc80      	pop	{r7}
   157aa:	4770      	bx	lr

000157ac <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
   157ac:	4b02      	ldr	r3, [pc, #8]	; (157b8 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
   157ae:	681a      	ldr	r2, [r3, #0]
   157b0:	6813      	ldr	r3, [r2, #0]
   157b2:	3301      	adds	r3, #1
   157b4:	6013      	str	r3, [r2, #0]
   157b6:	4770      	bx	lr
   157b8:	20004e14 	.word	0x20004e14

000157bc <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
   157bc:	4b02      	ldr	r3, [pc, #8]	; (157c8 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
   157be:	681b      	ldr	r3, [r3, #0]
   157c0:	2200      	movs	r2, #0
   157c2:	711a      	strb	r2, [r3, #4]
   157c4:	4770      	bx	lr
   157c6:	bf00      	nop
   157c8:	20004e14 	.word	0x20004e14

000157cc <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
   157cc:	b538      	push	{r3, r4, r5, lr}
   157ce:	4604      	mov	r4, r0
{
	ticks=0;
   157d0:	2300      	movs	r3, #0
   157d2:	6003      	str	r3, [r0, #0]
	interfaceTimer.Stop();
   157d4:	4d04      	ldr	r5, [pc, #16]	; (157e8 <_ZN16Maintenance_ToolD1Ev+0x1c>)
   157d6:	4628      	mov	r0, r5
   157d8:	4b04      	ldr	r3, [pc, #16]	; (157ec <_ZN16Maintenance_ToolD1Ev+0x20>)
   157da:	4798      	blx	r3
	interfaceTimer.Remove_task();
   157dc:	4628      	mov	r0, r5
   157de:	4b04      	ldr	r3, [pc, #16]	; (157f0 <_ZN16Maintenance_ToolD1Ev+0x24>)
   157e0:	4798      	blx	r3
	
} //~Maintenance_Tool
   157e2:	4620      	mov	r0, r4
   157e4:	bd38      	pop	{r3, r4, r5, pc}
   157e6:	bf00      	nop
   157e8:	20004dec 	.word	0x20004dec
   157ec:	000150a5 	.word	0x000150a5
   157f0:	000151bd 	.word	0x000151bd

000157f4 <_ZN16Maintenance_ToolC1Ev>:
	ptrMaintenanceTool=this;
   157f4:	4a04      	ldr	r2, [pc, #16]	; (15808 <_ZN16Maintenance_ToolC1Ev+0x14>)
   157f6:	6010      	str	r0, [r2, #0]
	maintenanceIsConnected = false;
   157f8:	2200      	movs	r2, #0
   157fa:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
	nextMaintenanceSyncTime = 0;
   157fe:	6482      	str	r2, [r0, #72]	; 0x48
	nextMaintenanceUsageTimerSyncTime = 0;
   15800:	64c2      	str	r2, [r0, #76]	; 0x4c
	ticks=0;
   15802:	6002      	str	r2, [r0, #0]
} //Maintenance_Tool
   15804:	4770      	bx	lr
   15806:	bf00      	nop
   15808:	20004e14 	.word	0x20004e14

0001580c <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
   1580c:	b510      	push	{r4, lr}
		maintenanceIsConnected = isConnected;
   1580e:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
		if (isConnected)
   15812:	b919      	cbnz	r1, 1581c <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
   15814:	4808      	ldr	r0, [pc, #32]	; (15838 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   15816:	4b09      	ldr	r3, [pc, #36]	; (1583c <_ZN16Maintenance_Tool12setConnectedEb+0x30>)
   15818:	4798      	blx	r3
   1581a:	bd10      	pop	{r4, pc}
			interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
   1581c:	4c06      	ldr	r4, [pc, #24]	; (15838 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   1581e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15822:	4907      	ldr	r1, [pc, #28]	; (15840 <_ZN16Maintenance_Tool12setConnectedEb+0x34>)
   15824:	4620      	mov	r0, r4
   15826:	4b07      	ldr	r3, [pc, #28]	; (15844 <_ZN16Maintenance_Tool12setConnectedEb+0x38>)
   15828:	4798      	blx	r3
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
   1582a:	f64e 2260 	movw	r2, #60000	; 0xea60
   1582e:	4906      	ldr	r1, [pc, #24]	; (15848 <_ZN16Maintenance_Tool12setConnectedEb+0x3c>)
   15830:	4620      	mov	r0, r4
   15832:	4b06      	ldr	r3, [pc, #24]	; (1584c <_ZN16Maintenance_Tool12setConnectedEb+0x40>)
   15834:	4798      	blx	r3
   15836:	bd10      	pop	{r4, pc}
   15838:	20004dec 	.word	0x20004dec
   1583c:	000150a5 	.word	0x000150a5
   15840:	000157ad 	.word	0x000157ad
   15844:	00015135 	.word	0x00015135
   15848:	000157bd 	.word	0x000157bd
   1584c:	00015185 	.word	0x00015185

00015850 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
   15850:	b510      	push	{r4, lr}
   15852:	4604      	mov	r4, r0
	result=false;
   15854:	2300      	movs	r3, #0
   15856:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	magic=0;
   1585a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
	if (gotAccess==true)
   1585e:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
   15862:	b12b      	cbz	r3, 15870 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
   15864:	2301      	movs	r3, #1
   15866:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	return	result;
   1586a:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
}
   1586e:	bd10      	pop	{r4, pc}
		if (usb.connected)
   15870:	4b15      	ldr	r3, [pc, #84]	; (158c8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   15872:	7c1b      	ldrb	r3, [r3, #16]
   15874:	2b00      	cmp	r3, #0
   15876:	d0f8      	beq.n	1586a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
			if (usb.rxReady)
   15878:	4b13      	ldr	r3, [pc, #76]	; (158c8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   1587a:	7d5b      	ldrb	r3, [r3, #21]
   1587c:	b18b      	cbz	r3, 158a2 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x52>
   1587e:	1d43      	adds	r3, r0, #5
   15880:	3009      	adds	r0, #9
   15882:	2200      	movs	r2, #0
					magic|= localBuffer[i];
   15884:	f813 1b01 	ldrb.w	r1, [r3], #1
   15888:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
				for (int i = 0; i < 4; i++)
   1588c:	4283      	cmp	r3, r0
   1588e:	d1f9      	bne.n	15884 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x34>
   15890:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
				xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
   15894:	4b0d      	ldr	r3, [pc, #52]	; (158cc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
   15896:	ea82 0103 	eor.w	r1, r2, r3
   1589a:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
				if (xorResult==0)
   1589e:	429a      	cmp	r2, r3
   158a0:	d005      	beq.n	158ae <_ZN16Maintenance_Tool14IsAppConnectedEv+0x5e>
			usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   158a2:	2240      	movs	r2, #64	; 0x40
   158a4:	1d61      	adds	r1, r4, #5
   158a6:	4808      	ldr	r0, [pc, #32]	; (158c8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   158a8:	4b09      	ldr	r3, [pc, #36]	; (158d0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
   158aa:	4798      	blx	r3
   158ac:	e7dd      	b.n	1586a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
					gotAccess=true;
   158ae:	2101      	movs	r1, #1
   158b0:	f884 10f9 	strb.w	r1, [r4, #249]	; 0xf9
					result=true;
   158b4:	f884 10f8 	strb.w	r1, [r4, #248]	; 0xf8
					is_MTPC_Beaming=true;
   158b8:	7121      	strb	r1, [r4, #4]
					setConnected(true);
   158ba:	4620      	mov	r0, r4
   158bc:	4b05      	ldr	r3, [pc, #20]	; (158d4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
   158be:	4798      	blx	r3
					return	result;
   158c0:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
   158c4:	bd10      	pop	{r4, pc}
   158c6:	bf00      	nop
   158c8:	20004cc4 	.word	0x20004cc4
   158cc:	61626364 	.word	0x61626364
   158d0:	00014895 	.word	0x00014895
   158d4:	0001580d 	.word	0x0001580d

000158d8 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
	}

}
   158d8:	b510      	push	{r4, lr}
   158da:	4c05      	ldr	r4, [pc, #20]	; (158f0 <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
   158dc:	4620      	mov	r0, r4
   158de:	4b05      	ldr	r3, [pc, #20]	; (158f4 <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
   158e0:	4798      	blx	r3
   158e2:	4a05      	ldr	r2, [pc, #20]	; (158f8 <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
   158e4:	4905      	ldr	r1, [pc, #20]	; (158fc <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
   158e6:	4620      	mov	r0, r4
   158e8:	4b05      	ldr	r3, [pc, #20]	; (15900 <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
   158ea:	4798      	blx	r3
   158ec:	bd10      	pop	{r4, pc}
   158ee:	bf00      	nop
   158f0:	20004e18 	.word	0x20004e18
   158f4:	000157f5 	.word	0x000157f5
   158f8:	20000000 	.word	0x20000000
   158fc:	000157cd 	.word	0x000157cd
   15900:	000159a5 	.word	0x000159a5

00015904 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   15904:	b580      	push	{r7, lr}
   15906:	b084      	sub	sp, #16
   15908:	af00      	add	r7, sp, #0
   1590a:	60f8      	str	r0, [r7, #12]
   1590c:	60b9      	str	r1, [r7, #8]
   1590e:	4613      	mov	r3, r2
   15910:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   15912:	68fb      	ldr	r3, [r7, #12]
   15914:	2b00      	cmp	r3, #0
   15916:	d004      	beq.n	15922 <io_write+0x1e>
   15918:	68bb      	ldr	r3, [r7, #8]
   1591a:	2b00      	cmp	r3, #0
   1591c:	d001      	beq.n	15922 <io_write+0x1e>
   1591e:	2301      	movs	r3, #1
   15920:	e000      	b.n	15924 <io_write+0x20>
   15922:	2300      	movs	r3, #0
   15924:	f003 0301 	and.w	r3, r3, #1
   15928:	b2db      	uxtb	r3, r3
   1592a:	2234      	movs	r2, #52	; 0x34
   1592c:	4907      	ldr	r1, [pc, #28]	; (1594c <io_write+0x48>)
   1592e:	4618      	mov	r0, r3
   15930:	4b07      	ldr	r3, [pc, #28]	; (15950 <io_write+0x4c>)
   15932:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   15934:	68fb      	ldr	r3, [r7, #12]
   15936:	681b      	ldr	r3, [r3, #0]
   15938:	88fa      	ldrh	r2, [r7, #6]
   1593a:	68b9      	ldr	r1, [r7, #8]
   1593c:	68f8      	ldr	r0, [r7, #12]
   1593e:	4798      	blx	r3
   15940:	4603      	mov	r3, r0
}
   15942:	4618      	mov	r0, r3
   15944:	3710      	adds	r7, #16
   15946:	46bd      	mov	sp, r7
   15948:	bd80      	pop	{r7, pc}
   1594a:	bf00      	nop
   1594c:	0001998c 	.word	0x0001998c
   15950:	000065d9 	.word	0x000065d9

00015954 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   15954:	b580      	push	{r7, lr}
   15956:	b084      	sub	sp, #16
   15958:	af00      	add	r7, sp, #0
   1595a:	60f8      	str	r0, [r7, #12]
   1595c:	60b9      	str	r1, [r7, #8]
   1595e:	4613      	mov	r3, r2
   15960:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   15962:	68fb      	ldr	r3, [r7, #12]
   15964:	2b00      	cmp	r3, #0
   15966:	d004      	beq.n	15972 <io_read+0x1e>
   15968:	68bb      	ldr	r3, [r7, #8]
   1596a:	2b00      	cmp	r3, #0
   1596c:	d001      	beq.n	15972 <io_read+0x1e>
   1596e:	2301      	movs	r3, #1
   15970:	e000      	b.n	15974 <io_read+0x20>
   15972:	2300      	movs	r3, #0
   15974:	f003 0301 	and.w	r3, r3, #1
   15978:	b2db      	uxtb	r3, r3
   1597a:	223d      	movs	r2, #61	; 0x3d
   1597c:	4907      	ldr	r1, [pc, #28]	; (1599c <io_read+0x48>)
   1597e:	4618      	mov	r0, r3
   15980:	4b07      	ldr	r3, [pc, #28]	; (159a0 <io_read+0x4c>)
   15982:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   15984:	68fb      	ldr	r3, [r7, #12]
   15986:	685b      	ldr	r3, [r3, #4]
   15988:	88fa      	ldrh	r2, [r7, #6]
   1598a:	68b9      	ldr	r1, [r7, #8]
   1598c:	68f8      	ldr	r0, [r7, #12]
   1598e:	4798      	blx	r3
   15990:	4603      	mov	r3, r0
}
   15992:	4618      	mov	r0, r3
   15994:	3710      	adds	r7, #16
   15996:	46bd      	mov	sp, r7
   15998:	bd80      	pop	{r7, pc}
   1599a:	bf00      	nop
   1599c:	0001998c 	.word	0x0001998c
   159a0:	000065d9 	.word	0x000065d9

000159a4 <__aeabi_atexit>:
   159a4:	460b      	mov	r3, r1
   159a6:	4601      	mov	r1, r0
   159a8:	4618      	mov	r0, r3
   159aa:	f001 becd 	b.w	17748 <__cxa_atexit>
   159ae:	bf00      	nop

000159b0 <_ZdlPvj>:
   159b0:	f7fc b834 	b.w	11a1c <_ZdlPv>
   159b4:	0000      	movs	r0, r0
	...

000159b8 <floor>:
   159b8:	f3c1 520a 	ubfx	r2, r1, #20, #11
   159bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   159c0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   159c4:	2e13      	cmp	r6, #19
   159c6:	460b      	mov	r3, r1
   159c8:	460d      	mov	r5, r1
   159ca:	4604      	mov	r4, r0
   159cc:	4688      	mov	r8, r1
   159ce:	4607      	mov	r7, r0
   159d0:	dc1d      	bgt.n	15a0e <floor+0x56>
   159d2:	2e00      	cmp	r6, #0
   159d4:	db40      	blt.n	15a58 <floor+0xa0>
   159d6:	4a3c      	ldr	r2, [pc, #240]	; (15ac8 <floor+0x110>)
   159d8:	fa42 f906 	asr.w	r9, r2, r6
   159dc:	ea01 0209 	and.w	r2, r1, r9
   159e0:	4302      	orrs	r2, r0
   159e2:	4686      	mov	lr, r0
   159e4:	d018      	beq.n	15a18 <floor+0x60>
   159e6:	a336      	add	r3, pc, #216	; (adr r3, 15ac0 <floor+0x108>)
   159e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   159ec:	f001 f91c 	bl	16c28 <__adddf3>
   159f0:	2200      	movs	r2, #0
   159f2:	2300      	movs	r3, #0
   159f4:	f001 fd5a 	bl	174ac <__aeabi_dcmpgt>
   159f8:	b120      	cbz	r0, 15a04 <floor+0x4c>
   159fa:	2d00      	cmp	r5, #0
   159fc:	db42      	blt.n	15a84 <floor+0xcc>
   159fe:	ea28 0509 	bic.w	r5, r8, r9
   15a02:	2700      	movs	r7, #0
   15a04:	463c      	mov	r4, r7
   15a06:	4629      	mov	r1, r5
   15a08:	4620      	mov	r0, r4
   15a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15a0e:	2e33      	cmp	r6, #51	; 0x33
   15a10:	dd06      	ble.n	15a20 <floor+0x68>
   15a12:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   15a16:	d02f      	beq.n	15a78 <floor+0xc0>
   15a18:	4619      	mov	r1, r3
   15a1a:	4620      	mov	r0, r4
   15a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15a20:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   15a24:	f04f 39ff 	mov.w	r9, #4294967295
   15a28:	fa29 f902 	lsr.w	r9, r9, r2
   15a2c:	ea10 0f09 	tst.w	r0, r9
   15a30:	d0f2      	beq.n	15a18 <floor+0x60>
   15a32:	a323      	add	r3, pc, #140	; (adr r3, 15ac0 <floor+0x108>)
   15a34:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a38:	f001 f8f6 	bl	16c28 <__adddf3>
   15a3c:	2200      	movs	r2, #0
   15a3e:	2300      	movs	r3, #0
   15a40:	f001 fd34 	bl	174ac <__aeabi_dcmpgt>
   15a44:	2800      	cmp	r0, #0
   15a46:	d0dd      	beq.n	15a04 <floor+0x4c>
   15a48:	2d00      	cmp	r5, #0
   15a4a:	db21      	blt.n	15a90 <floor+0xd8>
   15a4c:	4645      	mov	r5, r8
   15a4e:	ea27 0709 	bic.w	r7, r7, r9
   15a52:	463c      	mov	r4, r7
   15a54:	4629      	mov	r1, r5
   15a56:	e7d7      	b.n	15a08 <floor+0x50>
   15a58:	a319      	add	r3, pc, #100	; (adr r3, 15ac0 <floor+0x108>)
   15a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a5e:	f001 f8e3 	bl	16c28 <__adddf3>
   15a62:	2200      	movs	r2, #0
   15a64:	2300      	movs	r3, #0
   15a66:	f001 fd21 	bl	174ac <__aeabi_dcmpgt>
   15a6a:	2800      	cmp	r0, #0
   15a6c:	d0ca      	beq.n	15a04 <floor+0x4c>
   15a6e:	2d00      	cmp	r5, #0
   15a70:	db19      	blt.n	15aa6 <floor+0xee>
   15a72:	2700      	movs	r7, #0
   15a74:	463d      	mov	r5, r7
   15a76:	e7c5      	b.n	15a04 <floor+0x4c>
   15a78:	4602      	mov	r2, r0
   15a7a:	460b      	mov	r3, r1
   15a7c:	f001 f8d4 	bl	16c28 <__adddf3>
   15a80:	4604      	mov	r4, r0
   15a82:	e7ca      	b.n	15a1a <floor+0x62>
   15a84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   15a88:	fa43 f606 	asr.w	r6, r3, r6
   15a8c:	44b0      	add	r8, r6
   15a8e:	e7b6      	b.n	159fe <floor+0x46>
   15a90:	2e14      	cmp	r6, #20
   15a92:	d010      	beq.n	15ab6 <floor+0xfe>
   15a94:	2301      	movs	r3, #1
   15a96:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   15a9a:	fa03 f606 	lsl.w	r6, r3, r6
   15a9e:	1937      	adds	r7, r6, r4
   15aa0:	bf28      	it	cs
   15aa2:	4498      	addcs	r8, r3
   15aa4:	e7d2      	b.n	15a4c <floor+0x94>
   15aa6:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   15aaa:	4b08      	ldr	r3, [pc, #32]	; (15acc <floor+0x114>)
   15aac:	4322      	orrs	r2, r4
   15aae:	bf18      	it	ne
   15ab0:	461d      	movne	r5, r3
   15ab2:	2700      	movs	r7, #0
   15ab4:	e7a6      	b.n	15a04 <floor+0x4c>
   15ab6:	f105 0801 	add.w	r8, r5, #1
   15aba:	e7c7      	b.n	15a4c <floor+0x94>
   15abc:	f3af 8000 	nop.w
   15ac0:	8800759c 	.word	0x8800759c
   15ac4:	7e37e43c 	.word	0x7e37e43c
   15ac8:	000fffff 	.word	0x000fffff
   15acc:	bff00000 	.word	0xbff00000

00015ad0 <pow>:
   15ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ad4:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 15dc8 <pow+0x2f8>
   15ad8:	b08d      	sub	sp, #52	; 0x34
   15ada:	4606      	mov	r6, r0
   15adc:	460f      	mov	r7, r1
   15ade:	4614      	mov	r4, r2
   15ae0:	461d      	mov	r5, r3
   15ae2:	f000 f975 	bl	15dd0 <__ieee754_pow>
   15ae6:	f999 8000 	ldrsb.w	r8, [r9]
   15aea:	f1b8 3fff 	cmp.w	r8, #4294967295
   15aee:	e9cd 0100 	strd	r0, r1, [sp]
   15af2:	d036      	beq.n	15b62 <pow+0x92>
   15af4:	4622      	mov	r2, r4
   15af6:	462b      	mov	r3, r5
   15af8:	4620      	mov	r0, r4
   15afa:	4629      	mov	r1, r5
   15afc:	f001 fce0 	bl	174c0 <__aeabi_dcmpun>
   15b00:	4683      	mov	fp, r0
   15b02:	bb70      	cbnz	r0, 15b62 <pow+0x92>
   15b04:	4632      	mov	r2, r6
   15b06:	463b      	mov	r3, r7
   15b08:	4630      	mov	r0, r6
   15b0a:	4639      	mov	r1, r7
   15b0c:	f001 fcd8 	bl	174c0 <__aeabi_dcmpun>
   15b10:	2200      	movs	r2, #0
   15b12:	4682      	mov	sl, r0
   15b14:	2300      	movs	r3, #0
   15b16:	2800      	cmp	r0, #0
   15b18:	f040 80a0 	bne.w	15c5c <pow+0x18c>
   15b1c:	4630      	mov	r0, r6
   15b1e:	4639      	mov	r1, r7
   15b20:	f001 fc9c 	bl	1745c <__aeabi_dcmpeq>
   15b24:	b310      	cbz	r0, 15b6c <pow+0x9c>
   15b26:	2200      	movs	r2, #0
   15b28:	2300      	movs	r3, #0
   15b2a:	4620      	mov	r0, r4
   15b2c:	4629      	mov	r1, r5
   15b2e:	f001 fc95 	bl	1745c <__aeabi_dcmpeq>
   15b32:	4683      	mov	fp, r0
   15b34:	2800      	cmp	r0, #0
   15b36:	d06a      	beq.n	15c0e <pow+0x13e>
   15b38:	2201      	movs	r2, #1
   15b3a:	4b9c      	ldr	r3, [pc, #624]	; (15dac <pow+0x2dc>)
   15b3c:	9202      	str	r2, [sp, #8]
   15b3e:	2100      	movs	r1, #0
   15b40:	2200      	movs	r2, #0
   15b42:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   15b46:	e9cd 6704 	strd	r6, r7, [sp, #16]
   15b4a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   15b4e:	e9cd 1208 	strd	r1, r2, [sp, #32]
   15b52:	9303      	str	r3, [sp, #12]
   15b54:	f1b8 0f00 	cmp.w	r8, #0
   15b58:	d045      	beq.n	15be6 <pow+0x116>
   15b5a:	4c95      	ldr	r4, [pc, #596]	; (15db0 <pow+0x2e0>)
   15b5c:	2300      	movs	r3, #0
   15b5e:	e9cd 3400 	strd	r3, r4, [sp]
   15b62:	e9dd 0100 	ldrd	r0, r1, [sp]
   15b66:	b00d      	add	sp, #52	; 0x34
   15b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
   15b70:	f000 ff34 	bl	169dc <finite>
   15b74:	4680      	mov	r8, r0
   15b76:	2800      	cmp	r0, #0
   15b78:	f000 808b 	beq.w	15c92 <pow+0x1c2>
   15b7c:	f04f 0a00 	mov.w	sl, #0
   15b80:	f04f 0b00 	mov.w	fp, #0
   15b84:	4652      	mov	r2, sl
   15b86:	465b      	mov	r3, fp
   15b88:	e9dd 0100 	ldrd	r0, r1, [sp]
   15b8c:	f001 fc66 	bl	1745c <__aeabi_dcmpeq>
   15b90:	2800      	cmp	r0, #0
   15b92:	d0e6      	beq.n	15b62 <pow+0x92>
   15b94:	4630      	mov	r0, r6
   15b96:	4639      	mov	r1, r7
   15b98:	f000 ff20 	bl	169dc <finite>
   15b9c:	2800      	cmp	r0, #0
   15b9e:	d0e0      	beq.n	15b62 <pow+0x92>
   15ba0:	4620      	mov	r0, r4
   15ba2:	4629      	mov	r1, r5
   15ba4:	f000 ff1a 	bl	169dc <finite>
   15ba8:	2800      	cmp	r0, #0
   15baa:	d0da      	beq.n	15b62 <pow+0x92>
   15bac:	f999 3000 	ldrsb.w	r3, [r9]
   15bb0:	4a7e      	ldr	r2, [pc, #504]	; (15dac <pow+0x2dc>)
   15bb2:	9203      	str	r2, [sp, #12]
   15bb4:	2104      	movs	r1, #4
   15bb6:	2200      	movs	r2, #0
   15bb8:	2b02      	cmp	r3, #2
   15bba:	e9cd 6704 	strd	r6, r7, [sp, #16]
   15bbe:	e9cd 4506 	strd	r4, r5, [sp, #24]
   15bc2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   15bc6:	9102      	str	r1, [sp, #8]
   15bc8:	920a      	str	r2, [sp, #40]	; 0x28
   15bca:	d003      	beq.n	15bd4 <pow+0x104>
   15bcc:	a802      	add	r0, sp, #8
   15bce:	f000 ff0b 	bl	169e8 <matherr>
   15bd2:	b968      	cbnz	r0, 15bf0 <pow+0x120>
   15bd4:	f001 fdc4 	bl	17760 <__errno>
   15bd8:	2322      	movs	r3, #34	; 0x22
   15bda:	6003      	str	r3, [r0, #0]
   15bdc:	e008      	b.n	15bf0 <pow+0x120>
   15bde:	2300      	movs	r3, #0
   15be0:	2400      	movs	r4, #0
   15be2:	e9cd 3408 	strd	r3, r4, [sp, #32]
   15be6:	a802      	add	r0, sp, #8
   15be8:	f000 fefe 	bl	169e8 <matherr>
   15bec:	2800      	cmp	r0, #0
   15bee:	d030      	beq.n	15c52 <pow+0x182>
   15bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15bf2:	b11b      	cbz	r3, 15bfc <pow+0x12c>
   15bf4:	f001 fdb4 	bl	17760 <__errno>
   15bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15bfa:	6003      	str	r3, [r0, #0]
   15bfc:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   15c00:	e9cd 3400 	strd	r3, r4, [sp]
   15c04:	e9dd 0100 	ldrd	r0, r1, [sp]
   15c08:	b00d      	add	sp, #52	; 0x34
   15c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c0e:	4620      	mov	r0, r4
   15c10:	4629      	mov	r1, r5
   15c12:	f000 fee3 	bl	169dc <finite>
   15c16:	2800      	cmp	r0, #0
   15c18:	d0a3      	beq.n	15b62 <pow+0x92>
   15c1a:	2200      	movs	r2, #0
   15c1c:	2300      	movs	r3, #0
   15c1e:	4620      	mov	r0, r4
   15c20:	4629      	mov	r1, r5
   15c22:	f001 fc25 	bl	17470 <__aeabi_dcmplt>
   15c26:	2800      	cmp	r0, #0
   15c28:	d09b      	beq.n	15b62 <pow+0x92>
   15c2a:	f999 3000 	ldrsb.w	r3, [r9]
   15c2e:	4a5f      	ldr	r2, [pc, #380]	; (15dac <pow+0x2dc>)
   15c30:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   15c34:	2101      	movs	r1, #1
   15c36:	e9cd 6704 	strd	r6, r7, [sp, #16]
   15c3a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   15c3e:	9102      	str	r1, [sp, #8]
   15c40:	9203      	str	r2, [sp, #12]
   15c42:	2b00      	cmp	r3, #0
   15c44:	d0cb      	beq.n	15bde <pow+0x10e>
   15c46:	495b      	ldr	r1, [pc, #364]	; (15db4 <pow+0x2e4>)
   15c48:	2000      	movs	r0, #0
   15c4a:	2b02      	cmp	r3, #2
   15c4c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   15c50:	d1c9      	bne.n	15be6 <pow+0x116>
   15c52:	f001 fd85 	bl	17760 <__errno>
   15c56:	2321      	movs	r3, #33	; 0x21
   15c58:	6003      	str	r3, [r0, #0]
   15c5a:	e7c9      	b.n	15bf0 <pow+0x120>
   15c5c:	4620      	mov	r0, r4
   15c5e:	4629      	mov	r1, r5
   15c60:	f001 fbfc 	bl	1745c <__aeabi_dcmpeq>
   15c64:	2800      	cmp	r0, #0
   15c66:	f43f af7c 	beq.w	15b62 <pow+0x92>
   15c6a:	4b51      	ldr	r3, [pc, #324]	; (15db0 <pow+0x2e0>)
   15c6c:	494f      	ldr	r1, [pc, #316]	; (15dac <pow+0x2dc>)
   15c6e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   15c72:	2001      	movs	r0, #1
   15c74:	2200      	movs	r2, #0
   15c76:	f1b8 0f02 	cmp.w	r8, #2
   15c7a:	e9cd 6704 	strd	r6, r7, [sp, #16]
   15c7e:	e9cd 4506 	strd	r4, r5, [sp, #24]
   15c82:	9002      	str	r0, [sp, #8]
   15c84:	9103      	str	r1, [sp, #12]
   15c86:	e9cd 2308 	strd	r2, r3, [sp, #32]
   15c8a:	d1ac      	bne.n	15be6 <pow+0x116>
   15c8c:	e9cd 2300 	strd	r2, r3, [sp]
   15c90:	e767      	b.n	15b62 <pow+0x92>
   15c92:	4630      	mov	r0, r6
   15c94:	4639      	mov	r1, r7
   15c96:	f000 fea1 	bl	169dc <finite>
   15c9a:	2800      	cmp	r0, #0
   15c9c:	f43f af6e 	beq.w	15b7c <pow+0xac>
   15ca0:	4620      	mov	r0, r4
   15ca2:	4629      	mov	r1, r5
   15ca4:	f000 fe9a 	bl	169dc <finite>
   15ca8:	2800      	cmp	r0, #0
   15caa:	f43f af67 	beq.w	15b7c <pow+0xac>
   15cae:	e9dd 2300 	ldrd	r2, r3, [sp]
   15cb2:	4610      	mov	r0, r2
   15cb4:	4619      	mov	r1, r3
   15cb6:	f001 fc03 	bl	174c0 <__aeabi_dcmpun>
   15cba:	2800      	cmp	r0, #0
   15cbc:	d158      	bne.n	15d70 <pow+0x2a0>
   15cbe:	2303      	movs	r3, #3
   15cc0:	f999 8000 	ldrsb.w	r8, [r9]
   15cc4:	9302      	str	r3, [sp, #8]
   15cc6:	4b39      	ldr	r3, [pc, #228]	; (15dac <pow+0x2dc>)
   15cc8:	900a      	str	r0, [sp, #40]	; 0x28
   15cca:	9303      	str	r3, [sp, #12]
   15ccc:	e9cd 6704 	strd	r6, r7, [sp, #16]
   15cd0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   15cd4:	2200      	movs	r2, #0
   15cd6:	2300      	movs	r3, #0
   15cd8:	4630      	mov	r0, r6
   15cda:	4639      	mov	r1, r7
   15cdc:	f1b8 0f00 	cmp.w	r8, #0
   15ce0:	d126      	bne.n	15d30 <pow+0x260>
   15ce2:	4f35      	ldr	r7, [pc, #212]	; (15db8 <pow+0x2e8>)
   15ce4:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   15ce8:	e9cd 6708 	strd	r6, r7, [sp, #32]
   15cec:	f001 fbc0 	bl	17470 <__aeabi_dcmplt>
   15cf0:	2800      	cmp	r0, #0
   15cf2:	f43f af6b 	beq.w	15bcc <pow+0xfc>
   15cf6:	2200      	movs	r2, #0
   15cf8:	4b30      	ldr	r3, [pc, #192]	; (15dbc <pow+0x2ec>)
   15cfa:	4620      	mov	r0, r4
   15cfc:	4629      	mov	r1, r5
   15cfe:	f001 f945 	bl	16f8c <__aeabi_dmul>
   15d02:	4604      	mov	r4, r0
   15d04:	460d      	mov	r5, r1
   15d06:	f000 fe77 	bl	169f8 <rint>
   15d0a:	4602      	mov	r2, r0
   15d0c:	460b      	mov	r3, r1
   15d0e:	4620      	mov	r0, r4
   15d10:	4629      	mov	r1, r5
   15d12:	f001 fba3 	bl	1745c <__aeabi_dcmpeq>
   15d16:	bb40      	cbnz	r0, 15d6a <pow+0x29a>
   15d18:	4b29      	ldr	r3, [pc, #164]	; (15dc0 <pow+0x2f0>)
   15d1a:	f999 8000 	ldrsb.w	r8, [r9]
   15d1e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   15d22:	e9cd 2308 	strd	r2, r3, [sp, #32]
   15d26:	f1b8 0f02 	cmp.w	r8, #2
   15d2a:	f47f af4f 	bne.w	15bcc <pow+0xfc>
   15d2e:	e751      	b.n	15bd4 <pow+0x104>
   15d30:	4f24      	ldr	r7, [pc, #144]	; (15dc4 <pow+0x2f4>)
   15d32:	2600      	movs	r6, #0
   15d34:	e9cd 6708 	strd	r6, r7, [sp, #32]
   15d38:	f001 fb9a 	bl	17470 <__aeabi_dcmplt>
   15d3c:	2800      	cmp	r0, #0
   15d3e:	d0f2      	beq.n	15d26 <pow+0x256>
   15d40:	2200      	movs	r2, #0
   15d42:	4b1e      	ldr	r3, [pc, #120]	; (15dbc <pow+0x2ec>)
   15d44:	4620      	mov	r0, r4
   15d46:	4629      	mov	r1, r5
   15d48:	f001 f920 	bl	16f8c <__aeabi_dmul>
   15d4c:	4604      	mov	r4, r0
   15d4e:	460d      	mov	r5, r1
   15d50:	f000 fe52 	bl	169f8 <rint>
   15d54:	4602      	mov	r2, r0
   15d56:	460b      	mov	r3, r1
   15d58:	4620      	mov	r0, r4
   15d5a:	4629      	mov	r1, r5
   15d5c:	f001 fb7e 	bl	1745c <__aeabi_dcmpeq>
   15d60:	b918      	cbnz	r0, 15d6a <pow+0x29a>
   15d62:	4b14      	ldr	r3, [pc, #80]	; (15db4 <pow+0x2e4>)
   15d64:	2200      	movs	r2, #0
   15d66:	e9cd 2308 	strd	r2, r3, [sp, #32]
   15d6a:	f999 8000 	ldrsb.w	r8, [r9]
   15d6e:	e7da      	b.n	15d26 <pow+0x256>
   15d70:	f999 9000 	ldrsb.w	r9, [r9]
   15d74:	4b0d      	ldr	r3, [pc, #52]	; (15dac <pow+0x2dc>)
   15d76:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   15d7a:	2201      	movs	r2, #1
   15d7c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   15d80:	e9cd 4506 	strd	r4, r5, [sp, #24]
   15d84:	9202      	str	r2, [sp, #8]
   15d86:	9303      	str	r3, [sp, #12]
   15d88:	f1b9 0f00 	cmp.w	r9, #0
   15d8c:	f43f af27 	beq.w	15bde <pow+0x10e>
   15d90:	2200      	movs	r2, #0
   15d92:	2300      	movs	r3, #0
   15d94:	4610      	mov	r0, r2
   15d96:	4619      	mov	r1, r3
   15d98:	f001 fa22 	bl	171e0 <__aeabi_ddiv>
   15d9c:	f1b9 0f02 	cmp.w	r9, #2
   15da0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   15da4:	f43f af55 	beq.w	15c52 <pow+0x182>
   15da8:	e71d      	b.n	15be6 <pow+0x116>
   15daa:	bf00      	nop
   15dac:	000199a0 	.word	0x000199a0
   15db0:	3ff00000 	.word	0x3ff00000
   15db4:	fff00000 	.word	0xfff00000
   15db8:	47efffff 	.word	0x47efffff
   15dbc:	3fe00000 	.word	0x3fe00000
   15dc0:	c7efffff 	.word	0xc7efffff
   15dc4:	7ff00000 	.word	0x7ff00000
   15dc8:	200001c3 	.word	0x200001c3
   15dcc:	00000000 	.word	0x00000000

00015dd0 <__ieee754_pow>:
   15dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dd4:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   15dd8:	ea57 0402 	orrs.w	r4, r7, r2
   15ddc:	b093      	sub	sp, #76	; 0x4c
   15dde:	d037      	beq.n	15e50 <__ieee754_pow+0x80>
   15de0:	4c67      	ldr	r4, [pc, #412]	; (15f80 <__ieee754_pow+0x1b0>)
   15de2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   15de6:	42a6      	cmp	r6, r4
   15de8:	4683      	mov	fp, r0
   15dea:	460d      	mov	r5, r1
   15dec:	dc29      	bgt.n	15e42 <__ieee754_pow+0x72>
   15dee:	469a      	mov	sl, r3
   15df0:	4696      	mov	lr, r2
   15df2:	d025      	beq.n	15e40 <__ieee754_pow+0x70>
   15df4:	42a7      	cmp	r7, r4
   15df6:	dc24      	bgt.n	15e42 <__ieee754_pow+0x72>
   15df8:	4c61      	ldr	r4, [pc, #388]	; (15f80 <__ieee754_pow+0x1b0>)
   15dfa:	42a7      	cmp	r7, r4
   15dfc:	d079      	beq.n	15ef2 <__ieee754_pow+0x122>
   15dfe:	2d00      	cmp	r5, #0
   15e00:	4689      	mov	r9, r1
   15e02:	4680      	mov	r8, r0
   15e04:	e9cd 2300 	strd	r2, r3, [sp]
   15e08:	db77      	blt.n	15efa <__ieee754_pow+0x12a>
   15e0a:	2400      	movs	r4, #0
   15e0c:	f1be 0f00 	cmp.w	lr, #0
   15e10:	d12c      	bne.n	15e6c <__ieee754_pow+0x9c>
   15e12:	4b5b      	ldr	r3, [pc, #364]	; (15f80 <__ieee754_pow+0x1b0>)
   15e14:	429f      	cmp	r7, r3
   15e16:	f000 808b 	beq.w	15f30 <__ieee754_pow+0x160>
   15e1a:	4b5a      	ldr	r3, [pc, #360]	; (15f84 <__ieee754_pow+0x1b4>)
   15e1c:	429f      	cmp	r7, r3
   15e1e:	d061      	beq.n	15ee4 <__ieee754_pow+0x114>
   15e20:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
   15e24:	f000 83ba 	beq.w	1659c <__ieee754_pow+0x7cc>
   15e28:	4b57      	ldr	r3, [pc, #348]	; (15f88 <__ieee754_pow+0x1b8>)
   15e2a:	459a      	cmp	sl, r3
   15e2c:	d11e      	bne.n	15e6c <__ieee754_pow+0x9c>
   15e2e:	2d00      	cmp	r5, #0
   15e30:	db1c      	blt.n	15e6c <__ieee754_pow+0x9c>
   15e32:	4640      	mov	r0, r8
   15e34:	4649      	mov	r1, r9
   15e36:	b013      	add	sp, #76	; 0x4c
   15e38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e3c:	f000 bd0e 	b.w	1685c <__ieee754_sqrt>
   15e40:	b158      	cbz	r0, 15e5a <__ieee754_pow+0x8a>
   15e42:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   15e46:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   15e4a:	ea56 030b 	orrs.w	r3, r6, fp
   15e4e:	d106      	bne.n	15e5e <__ieee754_pow+0x8e>
   15e50:	494c      	ldr	r1, [pc, #304]	; (15f84 <__ieee754_pow+0x1b4>)
   15e52:	2000      	movs	r0, #0
   15e54:	b013      	add	sp, #76	; 0x4c
   15e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e5a:	42b7      	cmp	r7, r6
   15e5c:	ddcc      	ble.n	15df8 <__ieee754_pow+0x28>
   15e5e:	484b      	ldr	r0, [pc, #300]	; (15f8c <__ieee754_pow+0x1bc>)
   15e60:	b013      	add	sp, #76	; 0x4c
   15e62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e66:	f000 bdc1 	b.w	169ec <nan>
   15e6a:	2400      	movs	r4, #0
   15e6c:	4640      	mov	r0, r8
   15e6e:	4649      	mov	r1, r9
   15e70:	f000 fdb0 	bl	169d4 <fabs>
   15e74:	f1bb 0f00 	cmp.w	fp, #0
   15e78:	d119      	bne.n	15eae <__ieee754_pow+0xde>
   15e7a:	b126      	cbz	r6, 15e86 <__ieee754_pow+0xb6>
   15e7c:	4b41      	ldr	r3, [pc, #260]	; (15f84 <__ieee754_pow+0x1b4>)
   15e7e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   15e82:	429a      	cmp	r2, r3
   15e84:	d113      	bne.n	15eae <__ieee754_pow+0xde>
   15e86:	f1ba 0f00 	cmp.w	sl, #0
   15e8a:	f2c0 83bc 	blt.w	16606 <__ieee754_pow+0x836>
   15e8e:	2d00      	cmp	r5, #0
   15e90:	dae0      	bge.n	15e54 <__ieee754_pow+0x84>
   15e92:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   15e96:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   15e9a:	ea56 0304 	orrs.w	r3, r6, r4
   15e9e:	f000 848f 	beq.w	167c0 <__ieee754_pow+0x9f0>
   15ea2:	2c01      	cmp	r4, #1
   15ea4:	d1d6      	bne.n	15e54 <__ieee754_pow+0x84>
   15ea6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   15eaa:	4619      	mov	r1, r3
   15eac:	e7d2      	b.n	15e54 <__ieee754_pow+0x84>
   15eae:	0fed      	lsrs	r5, r5, #31
   15eb0:	3d01      	subs	r5, #1
   15eb2:	ea54 0305 	orrs.w	r3, r4, r5
   15eb6:	d04e      	beq.n	15f56 <__ieee754_pow+0x186>
   15eb8:	4b35      	ldr	r3, [pc, #212]	; (15f90 <__ieee754_pow+0x1c0>)
   15eba:	429f      	cmp	r7, r3
   15ebc:	dd6e      	ble.n	15f9c <__ieee754_pow+0x1cc>
   15ebe:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   15ec2:	429f      	cmp	r7, r3
   15ec4:	f340 83e8 	ble.w	16698 <__ieee754_pow+0x8c8>
   15ec8:	4b32      	ldr	r3, [pc, #200]	; (15f94 <__ieee754_pow+0x1c4>)
   15eca:	429e      	cmp	r6, r3
   15ecc:	dd4e      	ble.n	15f6c <__ieee754_pow+0x19c>
   15ece:	f1ba 0f00 	cmp.w	sl, #0
   15ed2:	dd4e      	ble.n	15f72 <__ieee754_pow+0x1a2>
   15ed4:	a328      	add	r3, pc, #160	; (adr r3, 15f78 <__ieee754_pow+0x1a8>)
   15ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15eda:	4610      	mov	r0, r2
   15edc:	4619      	mov	r1, r3
   15ede:	f001 f855 	bl	16f8c <__aeabi_dmul>
   15ee2:	e7b7      	b.n	15e54 <__ieee754_pow+0x84>
   15ee4:	f1ba 0f00 	cmp.w	sl, #0
   15ee8:	f2c0 843c 	blt.w	16764 <__ieee754_pow+0x994>
   15eec:	4640      	mov	r0, r8
   15eee:	4649      	mov	r1, r9
   15ef0:	e7b0      	b.n	15e54 <__ieee754_pow+0x84>
   15ef2:	f1be 0f00 	cmp.w	lr, #0
   15ef6:	d082      	beq.n	15dfe <__ieee754_pow+0x2e>
   15ef8:	e7a3      	b.n	15e42 <__ieee754_pow+0x72>
   15efa:	4b27      	ldr	r3, [pc, #156]	; (15f98 <__ieee754_pow+0x1c8>)
   15efc:	429f      	cmp	r7, r3
   15efe:	dc28      	bgt.n	15f52 <__ieee754_pow+0x182>
   15f00:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   15f04:	429f      	cmp	r7, r3
   15f06:	dd80      	ble.n	15e0a <__ieee754_pow+0x3a>
   15f08:	153b      	asrs	r3, r7, #20
   15f0a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   15f0e:	2b14      	cmp	r3, #20
   15f10:	f340 843e 	ble.w	16790 <__ieee754_pow+0x9c0>
   15f14:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   15f18:	fa2e f203 	lsr.w	r2, lr, r3
   15f1c:	fa02 f303 	lsl.w	r3, r2, r3
   15f20:	459e      	cmp	lr, r3
   15f22:	f47f af72 	bne.w	15e0a <__ieee754_pow+0x3a>
   15f26:	f002 0201 	and.w	r2, r2, #1
   15f2a:	f1c2 0402 	rsb	r4, r2, #2
   15f2e:	e76d      	b.n	15e0c <__ieee754_pow+0x3c>
   15f30:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   15f34:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   15f38:	ea53 030b 	orrs.w	r3, r3, fp
   15f3c:	d088      	beq.n	15e50 <__ieee754_pow+0x80>
   15f3e:	4b15      	ldr	r3, [pc, #84]	; (15f94 <__ieee754_pow+0x1c4>)
   15f40:	429e      	cmp	r6, r3
   15f42:	f340 8332 	ble.w	165aa <__ieee754_pow+0x7da>
   15f46:	f1ba 0f00 	cmp.w	sl, #0
   15f4a:	db12      	blt.n	15f72 <__ieee754_pow+0x1a2>
   15f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
   15f50:	e780      	b.n	15e54 <__ieee754_pow+0x84>
   15f52:	2402      	movs	r4, #2
   15f54:	e75a      	b.n	15e0c <__ieee754_pow+0x3c>
   15f56:	4642      	mov	r2, r8
   15f58:	464b      	mov	r3, r9
   15f5a:	4640      	mov	r0, r8
   15f5c:	4649      	mov	r1, r9
   15f5e:	f000 fe61 	bl	16c24 <__aeabi_dsub>
   15f62:	4602      	mov	r2, r0
   15f64:	460b      	mov	r3, r1
   15f66:	f001 f93b 	bl	171e0 <__aeabi_ddiv>
   15f6a:	e773      	b.n	15e54 <__ieee754_pow+0x84>
   15f6c:	f1ba 0f00 	cmp.w	sl, #0
   15f70:	dbb0      	blt.n	15ed4 <__ieee754_pow+0x104>
   15f72:	2000      	movs	r0, #0
   15f74:	2100      	movs	r1, #0
   15f76:	e76d      	b.n	15e54 <__ieee754_pow+0x84>
   15f78:	8800759c 	.word	0x8800759c
   15f7c:	7e37e43c 	.word	0x7e37e43c
   15f80:	7ff00000 	.word	0x7ff00000
   15f84:	3ff00000 	.word	0x3ff00000
   15f88:	3fe00000 	.word	0x3fe00000
   15f8c:	000199a4 	.word	0x000199a4
   15f90:	41e00000 	.word	0x41e00000
   15f94:	3fefffff 	.word	0x3fefffff
   15f98:	433fffff 	.word	0x433fffff
   15f9c:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   15fa0:	f04f 0200 	mov.w	r2, #0
   15fa4:	da05      	bge.n	15fb2 <__ieee754_pow+0x1e2>
   15fa6:	4bd4      	ldr	r3, [pc, #848]	; (162f8 <__ieee754_pow+0x528>)
   15fa8:	f000 fff0 	bl	16f8c <__aeabi_dmul>
   15fac:	f06f 0234 	mvn.w	r2, #52	; 0x34
   15fb0:	460e      	mov	r6, r1
   15fb2:	1533      	asrs	r3, r6, #20
   15fb4:	4fd1      	ldr	r7, [pc, #836]	; (162fc <__ieee754_pow+0x52c>)
   15fb6:	f3c6 0613 	ubfx	r6, r6, #0, #20
   15fba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   15fbe:	4413      	add	r3, r2
   15fc0:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   15fc4:	42be      	cmp	r6, r7
   15fc6:	461a      	mov	r2, r3
   15fc8:	930d      	str	r3, [sp, #52]	; 0x34
   15fca:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   15fce:	f340 8321 	ble.w	16614 <__ieee754_pow+0x844>
   15fd2:	4bcb      	ldr	r3, [pc, #812]	; (16300 <__ieee754_pow+0x530>)
   15fd4:	429e      	cmp	r6, r3
   15fd6:	f340 83fd 	ble.w	167d4 <__ieee754_pow+0xa04>
   15fda:	4613      	mov	r3, r2
   15fdc:	3301      	adds	r3, #1
   15fde:	930d      	str	r3, [sp, #52]	; 0x34
   15fe0:	4bc8      	ldr	r3, [pc, #800]	; (16304 <__ieee754_pow+0x534>)
   15fe2:	2200      	movs	r2, #0
   15fe4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   15fe8:	2700      	movs	r7, #0
   15fea:	2600      	movs	r6, #0
   15fec:	e9cd 6708 	strd	r6, r7, [sp, #32]
   15ff0:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   15ff4:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   15ff8:	2700      	movs	r7, #0
   15ffa:	4602      	mov	r2, r0
   15ffc:	4653      	mov	r3, sl
   15ffe:	4651      	mov	r1, sl
   16000:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   16004:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   16008:	f000 fe0c 	bl	16c24 <__aeabi_dsub>
   1600c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   16010:	4680      	mov	r8, r0
   16012:	4689      	mov	r9, r1
   16014:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   16018:	f000 fe06 	bl	16c28 <__adddf3>
   1601c:	4602      	mov	r2, r0
   1601e:	460b      	mov	r3, r1
   16020:	2000      	movs	r0, #0
   16022:	49b8      	ldr	r1, [pc, #736]	; (16304 <__ieee754_pow+0x534>)
   16024:	f001 f8dc 	bl	171e0 <__aeabi_ddiv>
   16028:	460a      	mov	r2, r1
   1602a:	4601      	mov	r1, r0
   1602c:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   16030:	4613      	mov	r3, r2
   16032:	4649      	mov	r1, r9
   16034:	4602      	mov	r2, r0
   16036:	4640      	mov	r0, r8
   16038:	f000 ffa8 	bl	16f8c <__aeabi_dmul>
   1603c:	ea4f 036a 	mov.w	r3, sl, asr #1
   16040:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   16044:	468c      	mov	ip, r1
   16046:	4683      	mov	fp, r0
   16048:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   1604c:	e9cd bc04 	strd	fp, ip, [sp, #16]
   16050:	46da      	mov	sl, fp
   16052:	468b      	mov	fp, r1
   16054:	19d9      	adds	r1, r3, r7
   16056:	2300      	movs	r3, #0
   16058:	e9cd ab02 	strd	sl, fp, [sp, #8]
   1605c:	9302      	str	r3, [sp, #8]
   1605e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   16062:	2000      	movs	r0, #0
   16064:	4606      	mov	r6, r0
   16066:	460f      	mov	r7, r1
   16068:	4602      	mov	r2, r0
   1606a:	460b      	mov	r3, r1
   1606c:	4650      	mov	r0, sl
   1606e:	4659      	mov	r1, fp
   16070:	f000 ff8c 	bl	16f8c <__aeabi_dmul>
   16074:	4602      	mov	r2, r0
   16076:	460b      	mov	r3, r1
   16078:	4640      	mov	r0, r8
   1607a:	4649      	mov	r1, r9
   1607c:	f000 fdd2 	bl	16c24 <__aeabi_dsub>
   16080:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   16084:	4680      	mov	r8, r0
   16086:	4689      	mov	r9, r1
   16088:	4630      	mov	r0, r6
   1608a:	4639      	mov	r1, r7
   1608c:	f000 fdca 	bl	16c24 <__aeabi_dsub>
   16090:	4602      	mov	r2, r0
   16092:	460b      	mov	r3, r1
   16094:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   16098:	f000 fdc4 	bl	16c24 <__aeabi_dsub>
   1609c:	4652      	mov	r2, sl
   1609e:	465b      	mov	r3, fp
   160a0:	f000 ff74 	bl	16f8c <__aeabi_dmul>
   160a4:	4602      	mov	r2, r0
   160a6:	460b      	mov	r3, r1
   160a8:	4640      	mov	r0, r8
   160aa:	4649      	mov	r1, r9
   160ac:	f000 fdba 	bl	16c24 <__aeabi_dsub>
   160b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   160b4:	f000 ff6a 	bl	16f8c <__aeabi_dmul>
   160b8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   160bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
   160c0:	4632      	mov	r2, r6
   160c2:	463b      	mov	r3, r7
   160c4:	4630      	mov	r0, r6
   160c6:	4639      	mov	r1, r7
   160c8:	f000 ff60 	bl	16f8c <__aeabi_dmul>
   160cc:	a378      	add	r3, pc, #480	; (adr r3, 162b0 <__ieee754_pow+0x4e0>)
   160ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   160d2:	4606      	mov	r6, r0
   160d4:	460f      	mov	r7, r1
   160d6:	f000 ff59 	bl	16f8c <__aeabi_dmul>
   160da:	a377      	add	r3, pc, #476	; (adr r3, 162b8 <__ieee754_pow+0x4e8>)
   160dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   160e0:	f000 fda2 	bl	16c28 <__adddf3>
   160e4:	4632      	mov	r2, r6
   160e6:	463b      	mov	r3, r7
   160e8:	f000 ff50 	bl	16f8c <__aeabi_dmul>
   160ec:	a374      	add	r3, pc, #464	; (adr r3, 162c0 <__ieee754_pow+0x4f0>)
   160ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   160f2:	f000 fd99 	bl	16c28 <__adddf3>
   160f6:	4632      	mov	r2, r6
   160f8:	463b      	mov	r3, r7
   160fa:	f000 ff47 	bl	16f8c <__aeabi_dmul>
   160fe:	a372      	add	r3, pc, #456	; (adr r3, 162c8 <__ieee754_pow+0x4f8>)
   16100:	e9d3 2300 	ldrd	r2, r3, [r3]
   16104:	f000 fd90 	bl	16c28 <__adddf3>
   16108:	4632      	mov	r2, r6
   1610a:	463b      	mov	r3, r7
   1610c:	f000 ff3e 	bl	16f8c <__aeabi_dmul>
   16110:	a36f      	add	r3, pc, #444	; (adr r3, 162d0 <__ieee754_pow+0x500>)
   16112:	e9d3 2300 	ldrd	r2, r3, [r3]
   16116:	f000 fd87 	bl	16c28 <__adddf3>
   1611a:	4632      	mov	r2, r6
   1611c:	463b      	mov	r3, r7
   1611e:	f000 ff35 	bl	16f8c <__aeabi_dmul>
   16122:	a36d      	add	r3, pc, #436	; (adr r3, 162d8 <__ieee754_pow+0x508>)
   16124:	e9d3 2300 	ldrd	r2, r3, [r3]
   16128:	f000 fd7e 	bl	16c28 <__adddf3>
   1612c:	4632      	mov	r2, r6
   1612e:	4680      	mov	r8, r0
   16130:	4689      	mov	r9, r1
   16132:	463b      	mov	r3, r7
   16134:	4630      	mov	r0, r6
   16136:	4639      	mov	r1, r7
   16138:	f000 ff28 	bl	16f8c <__aeabi_dmul>
   1613c:	4602      	mov	r2, r0
   1613e:	460b      	mov	r3, r1
   16140:	4640      	mov	r0, r8
   16142:	4649      	mov	r1, r9
   16144:	f000 ff22 	bl	16f8c <__aeabi_dmul>
   16148:	4652      	mov	r2, sl
   1614a:	4606      	mov	r6, r0
   1614c:	460f      	mov	r7, r1
   1614e:	465b      	mov	r3, fp
   16150:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   16154:	f000 fd68 	bl	16c28 <__adddf3>
   16158:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1615c:	f000 ff16 	bl	16f8c <__aeabi_dmul>
   16160:	4632      	mov	r2, r6
   16162:	463b      	mov	r3, r7
   16164:	f000 fd60 	bl	16c28 <__adddf3>
   16168:	4652      	mov	r2, sl
   1616a:	4680      	mov	r8, r0
   1616c:	4689      	mov	r9, r1
   1616e:	465b      	mov	r3, fp
   16170:	4650      	mov	r0, sl
   16172:	4659      	mov	r1, fp
   16174:	f000 ff0a 	bl	16f8c <__aeabi_dmul>
   16178:	2200      	movs	r2, #0
   1617a:	4b63      	ldr	r3, [pc, #396]	; (16308 <__ieee754_pow+0x538>)
   1617c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   16180:	f000 fd52 	bl	16c28 <__adddf3>
   16184:	4642      	mov	r2, r8
   16186:	464b      	mov	r3, r9
   16188:	f000 fd4e 	bl	16c28 <__adddf3>
   1618c:	9802      	ldr	r0, [sp, #8]
   1618e:	460f      	mov	r7, r1
   16190:	4606      	mov	r6, r0
   16192:	4632      	mov	r2, r6
   16194:	463b      	mov	r3, r7
   16196:	4650      	mov	r0, sl
   16198:	4659      	mov	r1, fp
   1619a:	f000 fef7 	bl	16f8c <__aeabi_dmul>
   1619e:	2200      	movs	r2, #0
   161a0:	4682      	mov	sl, r0
   161a2:	468b      	mov	fp, r1
   161a4:	4b58      	ldr	r3, [pc, #352]	; (16308 <__ieee754_pow+0x538>)
   161a6:	4630      	mov	r0, r6
   161a8:	4639      	mov	r1, r7
   161aa:	f000 fd3b 	bl	16c24 <__aeabi_dsub>
   161ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   161b2:	f000 fd37 	bl	16c24 <__aeabi_dsub>
   161b6:	4602      	mov	r2, r0
   161b8:	460b      	mov	r3, r1
   161ba:	4640      	mov	r0, r8
   161bc:	4649      	mov	r1, r9
   161be:	f000 fd31 	bl	16c24 <__aeabi_dsub>
   161c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   161c6:	f000 fee1 	bl	16f8c <__aeabi_dmul>
   161ca:	4632      	mov	r2, r6
   161cc:	4680      	mov	r8, r0
   161ce:	4689      	mov	r9, r1
   161d0:	463b      	mov	r3, r7
   161d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   161d6:	f000 fed9 	bl	16f8c <__aeabi_dmul>
   161da:	4602      	mov	r2, r0
   161dc:	460b      	mov	r3, r1
   161de:	4640      	mov	r0, r8
   161e0:	4649      	mov	r1, r9
   161e2:	f000 fd21 	bl	16c28 <__adddf3>
   161e6:	4680      	mov	r8, r0
   161e8:	4689      	mov	r9, r1
   161ea:	4602      	mov	r2, r0
   161ec:	460b      	mov	r3, r1
   161ee:	4650      	mov	r0, sl
   161f0:	4659      	mov	r1, fp
   161f2:	e9cd ab04 	strd	sl, fp, [sp, #16]
   161f6:	f000 fd17 	bl	16c28 <__adddf3>
   161fa:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   161fe:	a338      	add	r3, pc, #224	; (adr r3, 162e0 <__ieee754_pow+0x510>)
   16200:	e9d3 2300 	ldrd	r2, r3, [r3]
   16204:	4650      	mov	r0, sl
   16206:	460f      	mov	r7, r1
   16208:	f000 fec0 	bl	16f8c <__aeabi_dmul>
   1620c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   16210:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16214:	4639      	mov	r1, r7
   16216:	4650      	mov	r0, sl
   16218:	f000 fd04 	bl	16c24 <__aeabi_dsub>
   1621c:	4602      	mov	r2, r0
   1621e:	460b      	mov	r3, r1
   16220:	4640      	mov	r0, r8
   16222:	4649      	mov	r1, r9
   16224:	f000 fcfe 	bl	16c24 <__aeabi_dsub>
   16228:	a32f      	add	r3, pc, #188	; (adr r3, 162e8 <__ieee754_pow+0x518>)
   1622a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1622e:	f000 fead 	bl	16f8c <__aeabi_dmul>
   16232:	a32f      	add	r3, pc, #188	; (adr r3, 162f0 <__ieee754_pow+0x520>)
   16234:	e9d3 2300 	ldrd	r2, r3, [r3]
   16238:	4680      	mov	r8, r0
   1623a:	4689      	mov	r9, r1
   1623c:	4650      	mov	r0, sl
   1623e:	4639      	mov	r1, r7
   16240:	f000 fea4 	bl	16f8c <__aeabi_dmul>
   16244:	4602      	mov	r2, r0
   16246:	460b      	mov	r3, r1
   16248:	4640      	mov	r0, r8
   1624a:	4649      	mov	r1, r9
   1624c:	f000 fcec 	bl	16c28 <__adddf3>
   16250:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   16254:	f000 fce8 	bl	16c28 <__adddf3>
   16258:	4680      	mov	r8, r0
   1625a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1625c:	4689      	mov	r9, r1
   1625e:	f000 fe2f 	bl	16ec0 <__aeabi_i2d>
   16262:	4642      	mov	r2, r8
   16264:	4606      	mov	r6, r0
   16266:	460f      	mov	r7, r1
   16268:	464b      	mov	r3, r9
   1626a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1626e:	f000 fcdb 	bl	16c28 <__adddf3>
   16272:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   16276:	f000 fcd7 	bl	16c28 <__adddf3>
   1627a:	4632      	mov	r2, r6
   1627c:	463b      	mov	r3, r7
   1627e:	f000 fcd3 	bl	16c28 <__adddf3>
   16282:	4632      	mov	r2, r6
   16284:	463b      	mov	r3, r7
   16286:	4650      	mov	r0, sl
   16288:	468b      	mov	fp, r1
   1628a:	f000 fccb 	bl	16c24 <__aeabi_dsub>
   1628e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   16292:	f000 fcc7 	bl	16c24 <__aeabi_dsub>
   16296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1629a:	f000 fcc3 	bl	16c24 <__aeabi_dsub>
   1629e:	4602      	mov	r2, r0
   162a0:	460b      	mov	r3, r1
   162a2:	4640      	mov	r0, r8
   162a4:	4649      	mov	r1, r9
   162a6:	f000 fcbd 	bl	16c24 <__aeabi_dsub>
   162aa:	4680      	mov	r8, r0
   162ac:	e02e      	b.n	1630c <__ieee754_pow+0x53c>
   162ae:	bf00      	nop
   162b0:	4a454eef 	.word	0x4a454eef
   162b4:	3fca7e28 	.word	0x3fca7e28
   162b8:	93c9db65 	.word	0x93c9db65
   162bc:	3fcd864a 	.word	0x3fcd864a
   162c0:	a91d4101 	.word	0xa91d4101
   162c4:	3fd17460 	.word	0x3fd17460
   162c8:	518f264d 	.word	0x518f264d
   162cc:	3fd55555 	.word	0x3fd55555
   162d0:	db6fabff 	.word	0xdb6fabff
   162d4:	3fdb6db6 	.word	0x3fdb6db6
   162d8:	33333303 	.word	0x33333303
   162dc:	3fe33333 	.word	0x3fe33333
   162e0:	e0000000 	.word	0xe0000000
   162e4:	3feec709 	.word	0x3feec709
   162e8:	dc3a03fd 	.word	0xdc3a03fd
   162ec:	3feec709 	.word	0x3feec709
   162f0:	145b01f5 	.word	0x145b01f5
   162f4:	be3e2fe0 	.word	0xbe3e2fe0
   162f8:	43400000 	.word	0x43400000
   162fc:	0003988e 	.word	0x0003988e
   16300:	000bb679 	.word	0x000bb679
   16304:	3ff00000 	.word	0x3ff00000
   16308:	40080000 	.word	0x40080000
   1630c:	4689      	mov	r9, r1
   1630e:	3c01      	subs	r4, #1
   16310:	ea54 0305 	orrs.w	r3, r4, r5
   16314:	e9dd 0100 	ldrd	r0, r1, [sp]
   16318:	bf14      	ite	ne
   1631a:	4cd9      	ldrne	r4, [pc, #868]	; (16680 <__ieee754_pow+0x8b0>)
   1631c:	4cd9      	ldreq	r4, [pc, #868]	; (16684 <__ieee754_pow+0x8b4>)
   1631e:	2300      	movs	r3, #0
   16320:	e9cd 3404 	strd	r3, r4, [sp, #16]
   16324:	4603      	mov	r3, r0
   16326:	460c      	mov	r4, r1
   16328:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1632c:	2300      	movs	r3, #0
   1632e:	9302      	str	r3, [sp, #8]
   16330:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   16334:	4622      	mov	r2, r4
   16336:	462b      	mov	r3, r5
   16338:	f000 fc74 	bl	16c24 <__aeabi_dsub>
   1633c:	4652      	mov	r2, sl
   1633e:	465b      	mov	r3, fp
   16340:	f000 fe24 	bl	16f8c <__aeabi_dmul>
   16344:	e9dd 2300 	ldrd	r2, r3, [sp]
   16348:	4606      	mov	r6, r0
   1634a:	460f      	mov	r7, r1
   1634c:	4640      	mov	r0, r8
   1634e:	4649      	mov	r1, r9
   16350:	f000 fe1c 	bl	16f8c <__aeabi_dmul>
   16354:	4602      	mov	r2, r0
   16356:	460b      	mov	r3, r1
   16358:	4630      	mov	r0, r6
   1635a:	4639      	mov	r1, r7
   1635c:	f000 fc64 	bl	16c28 <__adddf3>
   16360:	4622      	mov	r2, r4
   16362:	4680      	mov	r8, r0
   16364:	4689      	mov	r9, r1
   16366:	462b      	mov	r3, r5
   16368:	4650      	mov	r0, sl
   1636a:	4659      	mov	r1, fp
   1636c:	e9cd 8900 	strd	r8, r9, [sp]
   16370:	f000 fe0c 	bl	16f8c <__aeabi_dmul>
   16374:	460b      	mov	r3, r1
   16376:	4602      	mov	r2, r0
   16378:	4606      	mov	r6, r0
   1637a:	460f      	mov	r7, r1
   1637c:	4640      	mov	r0, r8
   1637e:	4649      	mov	r1, r9
   16380:	f000 fc52 	bl	16c28 <__adddf3>
   16384:	4bc0      	ldr	r3, [pc, #768]	; (16688 <__ieee754_pow+0x8b8>)
   16386:	4299      	cmp	r1, r3
   16388:	4604      	mov	r4, r0
   1638a:	460d      	mov	r5, r1
   1638c:	468a      	mov	sl, r1
   1638e:	f340 8116 	ble.w	165be <__ieee754_pow+0x7ee>
   16392:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   16396:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   1639a:	4303      	orrs	r3, r0
   1639c:	f040 81ea 	bne.w	16774 <__ieee754_pow+0x9a4>
   163a0:	a3a3      	add	r3, pc, #652	; (adr r3, 16630 <__ieee754_pow+0x860>)
   163a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   163a6:	e9dd 0100 	ldrd	r0, r1, [sp]
   163aa:	f000 fc3d 	bl	16c28 <__adddf3>
   163ae:	4632      	mov	r2, r6
   163b0:	4680      	mov	r8, r0
   163b2:	4689      	mov	r9, r1
   163b4:	463b      	mov	r3, r7
   163b6:	4620      	mov	r0, r4
   163b8:	4629      	mov	r1, r5
   163ba:	f000 fc33 	bl	16c24 <__aeabi_dsub>
   163be:	4602      	mov	r2, r0
   163c0:	460b      	mov	r3, r1
   163c2:	4640      	mov	r0, r8
   163c4:	4649      	mov	r1, r9
   163c6:	f001 f871 	bl	174ac <__aeabi_dcmpgt>
   163ca:	2800      	cmp	r0, #0
   163cc:	f040 81d2 	bne.w	16774 <__ieee754_pow+0x9a4>
   163d0:	46a8      	mov	r8, r5
   163d2:	ea4f 5328 	mov.w	r3, r8, asr #20
   163d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   163da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   163de:	fa42 f303 	asr.w	r3, r2, r3
   163e2:	4453      	add	r3, sl
   163e4:	f3c3 520a 	ubfx	r2, r3, #20, #11
   163e8:	4da8      	ldr	r5, [pc, #672]	; (1668c <__ieee754_pow+0x8bc>)
   163ea:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   163ee:	4115      	asrs	r5, r2
   163f0:	f3c3 0413 	ubfx	r4, r3, #0, #20
   163f4:	ea23 0105 	bic.w	r1, r3, r5
   163f8:	2000      	movs	r0, #0
   163fa:	f1c2 0b14 	rsb	fp, r2, #20
   163fe:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   16402:	f1ba 0f00 	cmp.w	sl, #0
   16406:	4602      	mov	r2, r0
   16408:	460b      	mov	r3, r1
   1640a:	fa44 fb0b 	asr.w	fp, r4, fp
   1640e:	4630      	mov	r0, r6
   16410:	4639      	mov	r1, r7
   16412:	bfb8      	it	lt
   16414:	f1cb 0b00 	rsblt	fp, fp, #0
   16418:	f000 fc04 	bl	16c24 <__aeabi_dsub>
   1641c:	4602      	mov	r2, r0
   1641e:	460b      	mov	r3, r1
   16420:	4606      	mov	r6, r0
   16422:	460f      	mov	r7, r1
   16424:	e9dd 0100 	ldrd	r0, r1, [sp]
   16428:	f000 fbfe 	bl	16c28 <__adddf3>
   1642c:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   16430:	460d      	mov	r5, r1
   16432:	2400      	movs	r4, #0
   16434:	a380      	add	r3, pc, #512	; (adr r3, 16638 <__ieee754_pow+0x868>)
   16436:	e9d3 2300 	ldrd	r2, r3, [r3]
   1643a:	4620      	mov	r0, r4
   1643c:	4629      	mov	r1, r5
   1643e:	f000 fda5 	bl	16f8c <__aeabi_dmul>
   16442:	4632      	mov	r2, r6
   16444:	4680      	mov	r8, r0
   16446:	4689      	mov	r9, r1
   16448:	463b      	mov	r3, r7
   1644a:	4620      	mov	r0, r4
   1644c:	4629      	mov	r1, r5
   1644e:	f000 fbe9 	bl	16c24 <__aeabi_dsub>
   16452:	4602      	mov	r2, r0
   16454:	460b      	mov	r3, r1
   16456:	e9dd 0100 	ldrd	r0, r1, [sp]
   1645a:	f000 fbe3 	bl	16c24 <__aeabi_dsub>
   1645e:	a378      	add	r3, pc, #480	; (adr r3, 16640 <__ieee754_pow+0x870>)
   16460:	e9d3 2300 	ldrd	r2, r3, [r3]
   16464:	f000 fd92 	bl	16f8c <__aeabi_dmul>
   16468:	a377      	add	r3, pc, #476	; (adr r3, 16648 <__ieee754_pow+0x878>)
   1646a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1646e:	4606      	mov	r6, r0
   16470:	460f      	mov	r7, r1
   16472:	4620      	mov	r0, r4
   16474:	4629      	mov	r1, r5
   16476:	f000 fd89 	bl	16f8c <__aeabi_dmul>
   1647a:	4602      	mov	r2, r0
   1647c:	460b      	mov	r3, r1
   1647e:	4630      	mov	r0, r6
   16480:	4639      	mov	r1, r7
   16482:	f000 fbd1 	bl	16c28 <__adddf3>
   16486:	4606      	mov	r6, r0
   16488:	460f      	mov	r7, r1
   1648a:	4602      	mov	r2, r0
   1648c:	460b      	mov	r3, r1
   1648e:	4640      	mov	r0, r8
   16490:	4649      	mov	r1, r9
   16492:	f000 fbc9 	bl	16c28 <__adddf3>
   16496:	4642      	mov	r2, r8
   16498:	464b      	mov	r3, r9
   1649a:	4604      	mov	r4, r0
   1649c:	460d      	mov	r5, r1
   1649e:	f000 fbc1 	bl	16c24 <__aeabi_dsub>
   164a2:	4602      	mov	r2, r0
   164a4:	460b      	mov	r3, r1
   164a6:	4630      	mov	r0, r6
   164a8:	4639      	mov	r1, r7
   164aa:	f000 fbbb 	bl	16c24 <__aeabi_dsub>
   164ae:	4622      	mov	r2, r4
   164b0:	4680      	mov	r8, r0
   164b2:	4689      	mov	r9, r1
   164b4:	462b      	mov	r3, r5
   164b6:	4620      	mov	r0, r4
   164b8:	4629      	mov	r1, r5
   164ba:	f000 fd67 	bl	16f8c <__aeabi_dmul>
   164be:	a364      	add	r3, pc, #400	; (adr r3, 16650 <__ieee754_pow+0x880>)
   164c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   164c4:	4606      	mov	r6, r0
   164c6:	460f      	mov	r7, r1
   164c8:	f000 fd60 	bl	16f8c <__aeabi_dmul>
   164cc:	a362      	add	r3, pc, #392	; (adr r3, 16658 <__ieee754_pow+0x888>)
   164ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   164d2:	f000 fba7 	bl	16c24 <__aeabi_dsub>
   164d6:	4632      	mov	r2, r6
   164d8:	463b      	mov	r3, r7
   164da:	f000 fd57 	bl	16f8c <__aeabi_dmul>
   164de:	a360      	add	r3, pc, #384	; (adr r3, 16660 <__ieee754_pow+0x890>)
   164e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   164e4:	f000 fba0 	bl	16c28 <__adddf3>
   164e8:	4632      	mov	r2, r6
   164ea:	463b      	mov	r3, r7
   164ec:	f000 fd4e 	bl	16f8c <__aeabi_dmul>
   164f0:	a35d      	add	r3, pc, #372	; (adr r3, 16668 <__ieee754_pow+0x898>)
   164f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   164f6:	f000 fb95 	bl	16c24 <__aeabi_dsub>
   164fa:	4632      	mov	r2, r6
   164fc:	463b      	mov	r3, r7
   164fe:	f000 fd45 	bl	16f8c <__aeabi_dmul>
   16502:	a35b      	add	r3, pc, #364	; (adr r3, 16670 <__ieee754_pow+0x8a0>)
   16504:	e9d3 2300 	ldrd	r2, r3, [r3]
   16508:	f000 fb8e 	bl	16c28 <__adddf3>
   1650c:	4632      	mov	r2, r6
   1650e:	463b      	mov	r3, r7
   16510:	f000 fd3c 	bl	16f8c <__aeabi_dmul>
   16514:	4602      	mov	r2, r0
   16516:	460b      	mov	r3, r1
   16518:	4620      	mov	r0, r4
   1651a:	4629      	mov	r1, r5
   1651c:	f000 fb82 	bl	16c24 <__aeabi_dsub>
   16520:	4606      	mov	r6, r0
   16522:	460f      	mov	r7, r1
   16524:	4602      	mov	r2, r0
   16526:	460b      	mov	r3, r1
   16528:	4620      	mov	r0, r4
   1652a:	4629      	mov	r1, r5
   1652c:	f000 fd2e 	bl	16f8c <__aeabi_dmul>
   16530:	2200      	movs	r2, #0
   16532:	e9cd 0100 	strd	r0, r1, [sp]
   16536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1653a:	4630      	mov	r0, r6
   1653c:	4639      	mov	r1, r7
   1653e:	f000 fb71 	bl	16c24 <__aeabi_dsub>
   16542:	4602      	mov	r2, r0
   16544:	460b      	mov	r3, r1
   16546:	e9dd 0100 	ldrd	r0, r1, [sp]
   1654a:	f000 fe49 	bl	171e0 <__aeabi_ddiv>
   1654e:	4642      	mov	r2, r8
   16550:	4606      	mov	r6, r0
   16552:	460f      	mov	r7, r1
   16554:	464b      	mov	r3, r9
   16556:	4620      	mov	r0, r4
   16558:	4629      	mov	r1, r5
   1655a:	f000 fd17 	bl	16f8c <__aeabi_dmul>
   1655e:	4642      	mov	r2, r8
   16560:	464b      	mov	r3, r9
   16562:	f000 fb61 	bl	16c28 <__adddf3>
   16566:	4602      	mov	r2, r0
   16568:	460b      	mov	r3, r1
   1656a:	4630      	mov	r0, r6
   1656c:	4639      	mov	r1, r7
   1656e:	f000 fb59 	bl	16c24 <__aeabi_dsub>
   16572:	4622      	mov	r2, r4
   16574:	462b      	mov	r3, r5
   16576:	f000 fb55 	bl	16c24 <__aeabi_dsub>
   1657a:	4602      	mov	r2, r0
   1657c:	460b      	mov	r3, r1
   1657e:	2000      	movs	r0, #0
   16580:	493f      	ldr	r1, [pc, #252]	; (16680 <__ieee754_pow+0x8b0>)
   16582:	f000 fb4f 	bl	16c24 <__aeabi_dsub>
   16586:	448a      	add	sl, r1
   16588:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   1658c:	f2c0 8133 	blt.w	167f6 <__ieee754_pow+0xa26>
   16590:	4651      	mov	r1, sl
   16592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   16596:	f000 fcf9 	bl	16f8c <__aeabi_dmul>
   1659a:	e45b      	b.n	15e54 <__ieee754_pow+0x84>
   1659c:	4642      	mov	r2, r8
   1659e:	4640      	mov	r0, r8
   165a0:	464b      	mov	r3, r9
   165a2:	4649      	mov	r1, r9
   165a4:	f000 fcf2 	bl	16f8c <__aeabi_dmul>
   165a8:	e454      	b.n	15e54 <__ieee754_pow+0x84>
   165aa:	f1ba 0f00 	cmp.w	sl, #0
   165ae:	f6bf ace0 	bge.w	15f72 <__ieee754_pow+0x1a2>
   165b2:	e9dd 3400 	ldrd	r3, r4, [sp]
   165b6:	4618      	mov	r0, r3
   165b8:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   165bc:	e44a      	b.n	15e54 <__ieee754_pow+0x84>
   165be:	4b34      	ldr	r3, [pc, #208]	; (16690 <__ieee754_pow+0x8c0>)
   165c0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   165c4:	4598      	cmp	r8, r3
   165c6:	f340 80f2 	ble.w	167ae <__ieee754_pow+0x9de>
   165ca:	4b32      	ldr	r3, [pc, #200]	; (16694 <__ieee754_pow+0x8c4>)
   165cc:	440b      	add	r3, r1
   165ce:	4303      	orrs	r3, r0
   165d0:	d10c      	bne.n	165ec <__ieee754_pow+0x81c>
   165d2:	4632      	mov	r2, r6
   165d4:	463b      	mov	r3, r7
   165d6:	f000 fb25 	bl	16c24 <__aeabi_dsub>
   165da:	4602      	mov	r2, r0
   165dc:	460b      	mov	r3, r1
   165de:	e9dd 0100 	ldrd	r0, r1, [sp]
   165e2:	f000 ff4f 	bl	17484 <__aeabi_dcmple>
   165e6:	2800      	cmp	r0, #0
   165e8:	f43f aef3 	beq.w	163d2 <__ieee754_pow+0x602>
   165ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   165f0:	a321      	add	r3, pc, #132	; (adr r3, 16678 <__ieee754_pow+0x8a8>)
   165f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   165f6:	f000 fcc9 	bl	16f8c <__aeabi_dmul>
   165fa:	a31f      	add	r3, pc, #124	; (adr r3, 16678 <__ieee754_pow+0x8a8>)
   165fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   16600:	f000 fcc4 	bl	16f8c <__aeabi_dmul>
   16604:	e426      	b.n	15e54 <__ieee754_pow+0x84>
   16606:	4602      	mov	r2, r0
   16608:	460b      	mov	r3, r1
   1660a:	2000      	movs	r0, #0
   1660c:	491c      	ldr	r1, [pc, #112]	; (16680 <__ieee754_pow+0x8b0>)
   1660e:	f000 fde7 	bl	171e0 <__aeabi_ddiv>
   16612:	e43c      	b.n	15e8e <__ieee754_pow+0xbe>
   16614:	2200      	movs	r2, #0
   16616:	2300      	movs	r3, #0
   16618:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1661c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   16620:	4b17      	ldr	r3, [pc, #92]	; (16680 <__ieee754_pow+0x8b0>)
   16622:	2200      	movs	r2, #0
   16624:	2700      	movs	r7, #0
   16626:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1662a:	e4e6      	b.n	15ffa <__ieee754_pow+0x22a>
   1662c:	f3af 8000 	nop.w
   16630:	652b82fe 	.word	0x652b82fe
   16634:	3c971547 	.word	0x3c971547
   16638:	00000000 	.word	0x00000000
   1663c:	3fe62e43 	.word	0x3fe62e43
   16640:	fefa39ef 	.word	0xfefa39ef
   16644:	3fe62e42 	.word	0x3fe62e42
   16648:	0ca86c39 	.word	0x0ca86c39
   1664c:	be205c61 	.word	0xbe205c61
   16650:	72bea4d0 	.word	0x72bea4d0
   16654:	3e663769 	.word	0x3e663769
   16658:	c5d26bf1 	.word	0xc5d26bf1
   1665c:	3ebbbd41 	.word	0x3ebbbd41
   16660:	af25de2c 	.word	0xaf25de2c
   16664:	3f11566a 	.word	0x3f11566a
   16668:	16bebd93 	.word	0x16bebd93
   1666c:	3f66c16c 	.word	0x3f66c16c
   16670:	5555553e 	.word	0x5555553e
   16674:	3fc55555 	.word	0x3fc55555
   16678:	c2f8f359 	.word	0xc2f8f359
   1667c:	01a56e1f 	.word	0x01a56e1f
   16680:	3ff00000 	.word	0x3ff00000
   16684:	bff00000 	.word	0xbff00000
   16688:	408fffff 	.word	0x408fffff
   1668c:	000fffff 	.word	0x000fffff
   16690:	4090cbff 	.word	0x4090cbff
   16694:	3f6f3400 	.word	0x3f6f3400
   16698:	4b6b      	ldr	r3, [pc, #428]	; (16848 <__ieee754_pow+0xa78>)
   1669a:	429e      	cmp	r6, r3
   1669c:	f77f ac66 	ble.w	15f6c <__ieee754_pow+0x19c>
   166a0:	4b6a      	ldr	r3, [pc, #424]	; (1684c <__ieee754_pow+0xa7c>)
   166a2:	429e      	cmp	r6, r3
   166a4:	f73f ac13 	bgt.w	15ece <__ieee754_pow+0xfe>
   166a8:	2200      	movs	r2, #0
   166aa:	4b68      	ldr	r3, [pc, #416]	; (1684c <__ieee754_pow+0xa7c>)
   166ac:	f000 faba 	bl	16c24 <__aeabi_dsub>
   166b0:	a357      	add	r3, pc, #348	; (adr r3, 16810 <__ieee754_pow+0xa40>)
   166b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   166b6:	4606      	mov	r6, r0
   166b8:	460f      	mov	r7, r1
   166ba:	f000 fc67 	bl	16f8c <__aeabi_dmul>
   166be:	a356      	add	r3, pc, #344	; (adr r3, 16818 <__ieee754_pow+0xa48>)
   166c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   166c4:	4680      	mov	r8, r0
   166c6:	4689      	mov	r9, r1
   166c8:	4630      	mov	r0, r6
   166ca:	4639      	mov	r1, r7
   166cc:	f000 fc5e 	bl	16f8c <__aeabi_dmul>
   166d0:	2200      	movs	r2, #0
   166d2:	4682      	mov	sl, r0
   166d4:	468b      	mov	fp, r1
   166d6:	4b5e      	ldr	r3, [pc, #376]	; (16850 <__ieee754_pow+0xa80>)
   166d8:	4630      	mov	r0, r6
   166da:	4639      	mov	r1, r7
   166dc:	f000 fc56 	bl	16f8c <__aeabi_dmul>
   166e0:	4602      	mov	r2, r0
   166e2:	460b      	mov	r3, r1
   166e4:	a14e      	add	r1, pc, #312	; (adr r1, 16820 <__ieee754_pow+0xa50>)
   166e6:	e9d1 0100 	ldrd	r0, r1, [r1]
   166ea:	f000 fa9b 	bl	16c24 <__aeabi_dsub>
   166ee:	4632      	mov	r2, r6
   166f0:	463b      	mov	r3, r7
   166f2:	f000 fc4b 	bl	16f8c <__aeabi_dmul>
   166f6:	4602      	mov	r2, r0
   166f8:	460b      	mov	r3, r1
   166fa:	2000      	movs	r0, #0
   166fc:	4955      	ldr	r1, [pc, #340]	; (16854 <__ieee754_pow+0xa84>)
   166fe:	f000 fa91 	bl	16c24 <__aeabi_dsub>
   16702:	4632      	mov	r2, r6
   16704:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16708:	463b      	mov	r3, r7
   1670a:	4630      	mov	r0, r6
   1670c:	4639      	mov	r1, r7
   1670e:	f000 fc3d 	bl	16f8c <__aeabi_dmul>
   16712:	4602      	mov	r2, r0
   16714:	460b      	mov	r3, r1
   16716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1671a:	f000 fc37 	bl	16f8c <__aeabi_dmul>
   1671e:	a342      	add	r3, pc, #264	; (adr r3, 16828 <__ieee754_pow+0xa58>)
   16720:	e9d3 2300 	ldrd	r2, r3, [r3]
   16724:	f000 fc32 	bl	16f8c <__aeabi_dmul>
   16728:	4602      	mov	r2, r0
   1672a:	460b      	mov	r3, r1
   1672c:	4650      	mov	r0, sl
   1672e:	4659      	mov	r1, fp
   16730:	f000 fa78 	bl	16c24 <__aeabi_dsub>
   16734:	4602      	mov	r2, r0
   16736:	460b      	mov	r3, r1
   16738:	4606      	mov	r6, r0
   1673a:	460f      	mov	r7, r1
   1673c:	4640      	mov	r0, r8
   1673e:	4649      	mov	r1, r9
   16740:	f000 fa72 	bl	16c28 <__adddf3>
   16744:	4642      	mov	r2, r8
   16746:	464b      	mov	r3, r9
   16748:	2000      	movs	r0, #0
   1674a:	4682      	mov	sl, r0
   1674c:	468b      	mov	fp, r1
   1674e:	f000 fa69 	bl	16c24 <__aeabi_dsub>
   16752:	4602      	mov	r2, r0
   16754:	460b      	mov	r3, r1
   16756:	4630      	mov	r0, r6
   16758:	4639      	mov	r1, r7
   1675a:	f000 fa63 	bl	16c24 <__aeabi_dsub>
   1675e:	4680      	mov	r8, r0
   16760:	4689      	mov	r9, r1
   16762:	e5d4      	b.n	1630e <__ieee754_pow+0x53e>
   16764:	4642      	mov	r2, r8
   16766:	464b      	mov	r3, r9
   16768:	2000      	movs	r0, #0
   1676a:	4938      	ldr	r1, [pc, #224]	; (1684c <__ieee754_pow+0xa7c>)
   1676c:	f000 fd38 	bl	171e0 <__aeabi_ddiv>
   16770:	f7ff bb70 	b.w	15e54 <__ieee754_pow+0x84>
   16774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   16778:	a32d      	add	r3, pc, #180	; (adr r3, 16830 <__ieee754_pow+0xa60>)
   1677a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1677e:	f000 fc05 	bl	16f8c <__aeabi_dmul>
   16782:	a32b      	add	r3, pc, #172	; (adr r3, 16830 <__ieee754_pow+0xa60>)
   16784:	e9d3 2300 	ldrd	r2, r3, [r3]
   16788:	f000 fc00 	bl	16f8c <__aeabi_dmul>
   1678c:	f7ff bb62 	b.w	15e54 <__ieee754_pow+0x84>
   16790:	f1be 0f00 	cmp.w	lr, #0
   16794:	f47f ab69 	bne.w	15e6a <__ieee754_pow+0x9a>
   16798:	f1c3 0314 	rsb	r3, r3, #20
   1679c:	fa47 f203 	asr.w	r2, r7, r3
   167a0:	fa02 f303 	lsl.w	r3, r2, r3
   167a4:	429f      	cmp	r7, r3
   167a6:	d02a      	beq.n	167fe <__ieee754_pow+0xa2e>
   167a8:	4674      	mov	r4, lr
   167aa:	f7ff bb36 	b.w	15e1a <__ieee754_pow+0x4a>
   167ae:	4b29      	ldr	r3, [pc, #164]	; (16854 <__ieee754_pow+0xa84>)
   167b0:	4598      	cmp	r8, r3
   167b2:	f73f ae0e 	bgt.w	163d2 <__ieee754_pow+0x602>
   167b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   167ba:	4692      	mov	sl, r2
   167bc:	4693      	mov	fp, r2
   167be:	e638      	b.n	16432 <__ieee754_pow+0x662>
   167c0:	4602      	mov	r2, r0
   167c2:	460b      	mov	r3, r1
   167c4:	f000 fa2e 	bl	16c24 <__aeabi_dsub>
   167c8:	4602      	mov	r2, r0
   167ca:	460b      	mov	r3, r1
   167cc:	f000 fd08 	bl	171e0 <__aeabi_ddiv>
   167d0:	f7ff bb40 	b.w	15e54 <__ieee754_pow+0x84>
   167d4:	a318      	add	r3, pc, #96	; (adr r3, 16838 <__ieee754_pow+0xa68>)
   167d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   167da:	e9cd 2308 	strd	r2, r3, [sp, #32]
   167de:	a318      	add	r3, pc, #96	; (adr r3, 16840 <__ieee754_pow+0xa70>)
   167e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   167e4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   167e8:	4b1b      	ldr	r3, [pc, #108]	; (16858 <__ieee754_pow+0xa88>)
   167ea:	2200      	movs	r2, #0
   167ec:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   167f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   167f4:	e401      	b.n	15ffa <__ieee754_pow+0x22a>
   167f6:	465a      	mov	r2, fp
   167f8:	f000 f98a 	bl	16b10 <scalbn>
   167fc:	e6c9      	b.n	16592 <__ieee754_pow+0x7c2>
   167fe:	f002 0201 	and.w	r2, r2, #1
   16802:	f1c2 0402 	rsb	r4, r2, #2
   16806:	f7ff bb08 	b.w	15e1a <__ieee754_pow+0x4a>
   1680a:	bf00      	nop
   1680c:	f3af 8000 	nop.w
   16810:	60000000 	.word	0x60000000
   16814:	3ff71547 	.word	0x3ff71547
   16818:	f85ddf44 	.word	0xf85ddf44
   1681c:	3e54ae0b 	.word	0x3e54ae0b
   16820:	55555555 	.word	0x55555555
   16824:	3fd55555 	.word	0x3fd55555
   16828:	652b82fe 	.word	0x652b82fe
   1682c:	3ff71547 	.word	0x3ff71547
   16830:	8800759c 	.word	0x8800759c
   16834:	7e37e43c 	.word	0x7e37e43c
   16838:	40000000 	.word	0x40000000
   1683c:	3fe2b803 	.word	0x3fe2b803
   16840:	43cfd006 	.word	0x43cfd006
   16844:	3e4cfdeb 	.word	0x3e4cfdeb
   16848:	3feffffe 	.word	0x3feffffe
   1684c:	3ff00000 	.word	0x3ff00000
   16850:	3fd00000 	.word	0x3fd00000
   16854:	3fe00000 	.word	0x3fe00000
   16858:	3ff80000 	.word	0x3ff80000

0001685c <__ieee754_sqrt>:
   1685c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16860:	4f5b      	ldr	r7, [pc, #364]	; (169d0 <__ieee754_sqrt+0x174>)
   16862:	438f      	bics	r7, r1
   16864:	4605      	mov	r5, r0
   16866:	460c      	mov	r4, r1
   16868:	f000 8092 	beq.w	16990 <__ieee754_sqrt+0x134>
   1686c:	2900      	cmp	r1, #0
   1686e:	460b      	mov	r3, r1
   16870:	4602      	mov	r2, r0
   16872:	dd6f      	ble.n	16954 <__ieee754_sqrt+0xf8>
   16874:	150f      	asrs	r7, r1, #20
   16876:	d07b      	beq.n	16970 <__ieee754_sqrt+0x114>
   16878:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   1687c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   16880:	07f8      	lsls	r0, r7, #31
   16882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   16886:	d45c      	bmi.n	16942 <__ieee754_sqrt+0xe6>
   16888:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   1688c:	2600      	movs	r6, #0
   1688e:	440b      	add	r3, r1
   16890:	107f      	asrs	r7, r7, #1
   16892:	0052      	lsls	r2, r2, #1
   16894:	46b6      	mov	lr, r6
   16896:	2016      	movs	r0, #22
   16898:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   1689c:	eb0e 0401 	add.w	r4, lr, r1
   168a0:	429c      	cmp	r4, r3
   168a2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   168a6:	ea4f 0242 	mov.w	r2, r2, lsl #1
   168aa:	dc03      	bgt.n	168b4 <__ieee754_sqrt+0x58>
   168ac:	1b1b      	subs	r3, r3, r4
   168ae:	eb04 0e01 	add.w	lr, r4, r1
   168b2:	440e      	add	r6, r1
   168b4:	3801      	subs	r0, #1
   168b6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   168ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
   168be:	d1ed      	bne.n	1689c <__ieee754_sqrt+0x40>
   168c0:	4684      	mov	ip, r0
   168c2:	2420      	movs	r4, #32
   168c4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   168c8:	e009      	b.n	168de <__ieee754_sqrt+0x82>
   168ca:	d020      	beq.n	1690e <__ieee754_sqrt+0xb2>
   168cc:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   168d0:	3c01      	subs	r4, #1
   168d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
   168d6:	442b      	add	r3, r5
   168d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
   168dc:	d020      	beq.n	16920 <__ieee754_sqrt+0xc4>
   168de:	4573      	cmp	r3, lr
   168e0:	eb01 050c 	add.w	r5, r1, ip
   168e4:	ddf1      	ble.n	168ca <__ieee754_sqrt+0x6e>
   168e6:	2d00      	cmp	r5, #0
   168e8:	eb05 0c01 	add.w	ip, r5, r1
   168ec:	db09      	blt.n	16902 <__ieee754_sqrt+0xa6>
   168ee:	46f0      	mov	r8, lr
   168f0:	4295      	cmp	r5, r2
   168f2:	eba3 030e 	sub.w	r3, r3, lr
   168f6:	d900      	bls.n	168fa <__ieee754_sqrt+0x9e>
   168f8:	3b01      	subs	r3, #1
   168fa:	1b52      	subs	r2, r2, r5
   168fc:	4408      	add	r0, r1
   168fe:	46c6      	mov	lr, r8
   16900:	e7e4      	b.n	168cc <__ieee754_sqrt+0x70>
   16902:	f1bc 0f00 	cmp.w	ip, #0
   16906:	dbf2      	blt.n	168ee <__ieee754_sqrt+0x92>
   16908:	f10e 0801 	add.w	r8, lr, #1
   1690c:	e7f0      	b.n	168f0 <__ieee754_sqrt+0x94>
   1690e:	4295      	cmp	r5, r2
   16910:	d8dc      	bhi.n	168cc <__ieee754_sqrt+0x70>
   16912:	2d00      	cmp	r5, #0
   16914:	eb05 0c01 	add.w	ip, r5, r1
   16918:	db44      	blt.n	169a4 <__ieee754_sqrt+0x148>
   1691a:	4698      	mov	r8, r3
   1691c:	2300      	movs	r3, #0
   1691e:	e7ec      	b.n	168fa <__ieee754_sqrt+0x9e>
   16920:	4313      	orrs	r3, r2
   16922:	d113      	bne.n	1694c <__ieee754_sqrt+0xf0>
   16924:	0840      	lsrs	r0, r0, #1
   16926:	1073      	asrs	r3, r6, #1
   16928:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   1692c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   16930:	07f2      	lsls	r2, r6, #31
   16932:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   16936:	bf48      	it	mi
   16938:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   1693c:	4649      	mov	r1, r9
   1693e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16942:	005b      	lsls	r3, r3, #1
   16944:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   16948:	0052      	lsls	r2, r2, #1
   1694a:	e79d      	b.n	16888 <__ieee754_sqrt+0x2c>
   1694c:	1c41      	adds	r1, r0, #1
   1694e:	d02d      	beq.n	169ac <__ieee754_sqrt+0x150>
   16950:	3001      	adds	r0, #1
   16952:	e7e7      	b.n	16924 <__ieee754_sqrt+0xc8>
   16954:	4606      	mov	r6, r0
   16956:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   1695a:	433e      	orrs	r6, r7
   1695c:	d0ef      	beq.n	1693e <__ieee754_sqrt+0xe2>
   1695e:	bb69      	cbnz	r1, 169bc <__ieee754_sqrt+0x160>
   16960:	460f      	mov	r7, r1
   16962:	0ad3      	lsrs	r3, r2, #11
   16964:	3f15      	subs	r7, #21
   16966:	0552      	lsls	r2, r2, #21
   16968:	2b00      	cmp	r3, #0
   1696a:	d0fa      	beq.n	16962 <__ieee754_sqrt+0x106>
   1696c:	02de      	lsls	r6, r3, #11
   1696e:	d420      	bmi.n	169b2 <__ieee754_sqrt+0x156>
   16970:	2400      	movs	r4, #0
   16972:	e000      	b.n	16976 <__ieee754_sqrt+0x11a>
   16974:	4604      	mov	r4, r0
   16976:	005b      	lsls	r3, r3, #1
   16978:	02dd      	lsls	r5, r3, #11
   1697a:	f104 0001 	add.w	r0, r4, #1
   1697e:	d5f9      	bpl.n	16974 <__ieee754_sqrt+0x118>
   16980:	f1c0 0120 	rsb	r1, r0, #32
   16984:	fa22 f101 	lsr.w	r1, r2, r1
   16988:	430b      	orrs	r3, r1
   1698a:	1b3f      	subs	r7, r7, r4
   1698c:	4082      	lsls	r2, r0
   1698e:	e773      	b.n	16878 <__ieee754_sqrt+0x1c>
   16990:	4602      	mov	r2, r0
   16992:	460b      	mov	r3, r1
   16994:	f000 fafa 	bl	16f8c <__aeabi_dmul>
   16998:	462a      	mov	r2, r5
   1699a:	4623      	mov	r3, r4
   1699c:	f000 f944 	bl	16c28 <__adddf3>
   169a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   169a4:	f1bc 0f00 	cmp.w	ip, #0
   169a8:	daae      	bge.n	16908 <__ieee754_sqrt+0xac>
   169aa:	e7b6      	b.n	1691a <__ieee754_sqrt+0xbe>
   169ac:	3601      	adds	r6, #1
   169ae:	4620      	mov	r0, r4
   169b0:	e7b9      	b.n	16926 <__ieee754_sqrt+0xca>
   169b2:	2000      	movs	r0, #0
   169b4:	2120      	movs	r1, #32
   169b6:	f04f 34ff 	mov.w	r4, #4294967295
   169ba:	e7e3      	b.n	16984 <__ieee754_sqrt+0x128>
   169bc:	4602      	mov	r2, r0
   169be:	460b      	mov	r3, r1
   169c0:	f000 f930 	bl	16c24 <__aeabi_dsub>
   169c4:	4602      	mov	r2, r0
   169c6:	460b      	mov	r3, r1
   169c8:	f000 fc0a 	bl	171e0 <__aeabi_ddiv>
   169cc:	e7b7      	b.n	1693e <__ieee754_sqrt+0xe2>
   169ce:	bf00      	nop
   169d0:	7ff00000 	.word	0x7ff00000

000169d4 <fabs>:
   169d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   169d8:	4770      	bx	lr
   169da:	bf00      	nop

000169dc <finite>:
   169dc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   169e0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   169e4:	0fc0      	lsrs	r0, r0, #31
   169e6:	4770      	bx	lr

000169e8 <matherr>:
   169e8:	2000      	movs	r0, #0
   169ea:	4770      	bx	lr

000169ec <nan>:
   169ec:	2000      	movs	r0, #0
   169ee:	4901      	ldr	r1, [pc, #4]	; (169f4 <nan+0x8>)
   169f0:	4770      	bx	lr
   169f2:	bf00      	nop
   169f4:	7ff80000 	.word	0x7ff80000

000169f8 <rint>:
   169f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   169fa:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   169fe:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   16a02:	2e13      	cmp	r6, #19
   16a04:	b083      	sub	sp, #12
   16a06:	4602      	mov	r2, r0
   16a08:	460b      	mov	r3, r1
   16a0a:	460c      	mov	r4, r1
   16a0c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   16a10:	4607      	mov	r7, r0
   16a12:	dc2e      	bgt.n	16a72 <rint+0x7a>
   16a14:	2e00      	cmp	r6, #0
   16a16:	db49      	blt.n	16aac <rint+0xb4>
   16a18:	493a      	ldr	r1, [pc, #232]	; (16b04 <rint+0x10c>)
   16a1a:	4131      	asrs	r1, r6
   16a1c:	ea03 0001 	and.w	r0, r3, r1
   16a20:	4310      	orrs	r0, r2
   16a22:	d02b      	beq.n	16a7c <rint+0x84>
   16a24:	0849      	lsrs	r1, r1, #1
   16a26:	400b      	ands	r3, r1
   16a28:	ea53 0702 	orrs.w	r7, r3, r2
   16a2c:	d00c      	beq.n	16a48 <rint+0x50>
   16a2e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   16a32:	2e13      	cmp	r6, #19
   16a34:	ea24 0101 	bic.w	r1, r4, r1
   16a38:	fa43 f406 	asr.w	r4, r3, r6
   16a3c:	ea44 0401 	orr.w	r4, r4, r1
   16a40:	bf0c      	ite	eq
   16a42:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   16a46:	2700      	movne	r7, #0
   16a48:	4b2f      	ldr	r3, [pc, #188]	; (16b08 <rint+0x110>)
   16a4a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   16a4e:	4621      	mov	r1, r4
   16a50:	e9d5 4500 	ldrd	r4, r5, [r5]
   16a54:	4638      	mov	r0, r7
   16a56:	4622      	mov	r2, r4
   16a58:	462b      	mov	r3, r5
   16a5a:	f000 f8e5 	bl	16c28 <__adddf3>
   16a5e:	e9cd 0100 	strd	r0, r1, [sp]
   16a62:	4622      	mov	r2, r4
   16a64:	462b      	mov	r3, r5
   16a66:	e9dd 0100 	ldrd	r0, r1, [sp]
   16a6a:	f000 f8db 	bl	16c24 <__aeabi_dsub>
   16a6e:	b003      	add	sp, #12
   16a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16a72:	2e33      	cmp	r6, #51	; 0x33
   16a74:	dd06      	ble.n	16a84 <rint+0x8c>
   16a76:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   16a7a:	d040      	beq.n	16afe <rint+0x106>
   16a7c:	4610      	mov	r0, r2
   16a7e:	4619      	mov	r1, r3
   16a80:	b003      	add	sp, #12
   16a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16a84:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   16a88:	f04f 31ff 	mov.w	r1, #4294967295
   16a8c:	fa21 f10e 	lsr.w	r1, r1, lr
   16a90:	4208      	tst	r0, r1
   16a92:	d0f3      	beq.n	16a7c <rint+0x84>
   16a94:	0849      	lsrs	r1, r1, #1
   16a96:	4208      	tst	r0, r1
   16a98:	d0d6      	beq.n	16a48 <rint+0x50>
   16a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16a9e:	ea20 0101 	bic.w	r1, r0, r1
   16aa2:	fa43 fe0e 	asr.w	lr, r3, lr
   16aa6:	ea4e 0701 	orr.w	r7, lr, r1
   16aaa:	e7cd      	b.n	16a48 <rint+0x50>
   16aac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   16ab0:	4301      	orrs	r1, r0
   16ab2:	d0e3      	beq.n	16a7c <rint+0x84>
   16ab4:	f3c3 0113 	ubfx	r1, r3, #0, #20
   16ab8:	4e13      	ldr	r6, [pc, #76]	; (16b08 <rint+0x110>)
   16aba:	4301      	orrs	r1, r0
   16abc:	f1c1 0c00 	rsb	ip, r1, #0
   16ac0:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   16ac4:	e9d6 6700 	ldrd	r6, r7, [r6]
   16ac8:	ea4c 0c01 	orr.w	ip, ip, r1
   16acc:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   16ad0:	0c5c      	lsrs	r4, r3, #17
   16ad2:	0464      	lsls	r4, r4, #17
   16ad4:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   16ad8:	ea43 0104 	orr.w	r1, r3, r4
   16adc:	4632      	mov	r2, r6
   16ade:	463b      	mov	r3, r7
   16ae0:	f000 f8a2 	bl	16c28 <__adddf3>
   16ae4:	e9cd 0100 	strd	r0, r1, [sp]
   16ae8:	4632      	mov	r2, r6
   16aea:	463b      	mov	r3, r7
   16aec:	e9dd 0100 	ldrd	r0, r1, [sp]
   16af0:	f000 f898 	bl	16c24 <__aeabi_dsub>
   16af4:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   16af8:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   16afc:	e7c0      	b.n	16a80 <rint+0x88>
   16afe:	f000 f893 	bl	16c28 <__adddf3>
   16b02:	e7bd      	b.n	16a80 <rint+0x88>
   16b04:	000fffff 	.word	0x000fffff
   16b08:	000199a8 	.word	0x000199a8
   16b0c:	00000000 	.word	0x00000000

00016b10 <scalbn>:
   16b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b12:	f3c1 560a 	ubfx	r6, r1, #20, #11
   16b16:	4604      	mov	r4, r0
   16b18:	460d      	mov	r5, r1
   16b1a:	460b      	mov	r3, r1
   16b1c:	4617      	mov	r7, r2
   16b1e:	bb0e      	cbnz	r6, 16b64 <scalbn+0x54>
   16b20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   16b24:	4303      	orrs	r3, r0
   16b26:	4686      	mov	lr, r0
   16b28:	d025      	beq.n	16b76 <scalbn+0x66>
   16b2a:	2200      	movs	r2, #0
   16b2c:	4b34      	ldr	r3, [pc, #208]	; (16c00 <scalbn+0xf0>)
   16b2e:	f000 fa2d 	bl	16f8c <__aeabi_dmul>
   16b32:	4a34      	ldr	r2, [pc, #208]	; (16c04 <scalbn+0xf4>)
   16b34:	4297      	cmp	r7, r2
   16b36:	4604      	mov	r4, r0
   16b38:	460d      	mov	r5, r1
   16b3a:	460b      	mov	r3, r1
   16b3c:	db2a      	blt.n	16b94 <scalbn+0x84>
   16b3e:	f3c1 560a 	ubfx	r6, r1, #20, #11
   16b42:	3e36      	subs	r6, #54	; 0x36
   16b44:	443e      	add	r6, r7
   16b46:	f240 72fe 	movw	r2, #2046	; 0x7fe
   16b4a:	4296      	cmp	r6, r2
   16b4c:	dc28      	bgt.n	16ba0 <scalbn+0x90>
   16b4e:	2e00      	cmp	r6, #0
   16b50:	dd12      	ble.n	16b78 <scalbn+0x68>
   16b52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   16b56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   16b5a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   16b5e:	4620      	mov	r0, r4
   16b60:	4629      	mov	r1, r5
   16b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b64:	f240 72ff 	movw	r2, #2047	; 0x7ff
   16b68:	4296      	cmp	r6, r2
   16b6a:	d1eb      	bne.n	16b44 <scalbn+0x34>
   16b6c:	4602      	mov	r2, r0
   16b6e:	460b      	mov	r3, r1
   16b70:	f000 f85a 	bl	16c28 <__adddf3>
   16b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b78:	f116 0f35 	cmn.w	r6, #53	; 0x35
   16b7c:	da1d      	bge.n	16bba <scalbn+0xaa>
   16b7e:	f24c 3350 	movw	r3, #50000	; 0xc350
   16b82:	429f      	cmp	r7, r3
   16b84:	4622      	mov	r2, r4
   16b86:	462b      	mov	r3, r5
   16b88:	dc25      	bgt.n	16bd6 <scalbn+0xc6>
   16b8a:	a119      	add	r1, pc, #100	; (adr r1, 16bf0 <scalbn+0xe0>)
   16b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
   16b90:	f000 f83c 	bl	16c0c <copysign>
   16b94:	a316      	add	r3, pc, #88	; (adr r3, 16bf0 <scalbn+0xe0>)
   16b96:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b9a:	f000 f9f7 	bl	16f8c <__aeabi_dmul>
   16b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16ba0:	4622      	mov	r2, r4
   16ba2:	462b      	mov	r3, r5
   16ba4:	a114      	add	r1, pc, #80	; (adr r1, 16bf8 <scalbn+0xe8>)
   16ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
   16baa:	f000 f82f 	bl	16c0c <copysign>
   16bae:	a312      	add	r3, pc, #72	; (adr r3, 16bf8 <scalbn+0xe8>)
   16bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   16bb4:	f000 f9ea 	bl	16f8c <__aeabi_dmul>
   16bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16bba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   16bbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   16bc2:	3636      	adds	r6, #54	; 0x36
   16bc4:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   16bc8:	4620      	mov	r0, r4
   16bca:	4629      	mov	r1, r5
   16bcc:	2200      	movs	r2, #0
   16bce:	4b0e      	ldr	r3, [pc, #56]	; (16c08 <scalbn+0xf8>)
   16bd0:	f000 f9dc 	bl	16f8c <__aeabi_dmul>
   16bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16bd6:	a108      	add	r1, pc, #32	; (adr r1, 16bf8 <scalbn+0xe8>)
   16bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
   16bdc:	f000 f816 	bl	16c0c <copysign>
   16be0:	a305      	add	r3, pc, #20	; (adr r3, 16bf8 <scalbn+0xe8>)
   16be2:	e9d3 2300 	ldrd	r2, r3, [r3]
   16be6:	f000 f9d1 	bl	16f8c <__aeabi_dmul>
   16bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16bec:	f3af 8000 	nop.w
   16bf0:	c2f8f359 	.word	0xc2f8f359
   16bf4:	01a56e1f 	.word	0x01a56e1f
   16bf8:	8800759c 	.word	0x8800759c
   16bfc:	7e37e43c 	.word	0x7e37e43c
   16c00:	43500000 	.word	0x43500000
   16c04:	ffff3cb0 	.word	0xffff3cb0
   16c08:	3c900000 	.word	0x3c900000

00016c0c <copysign>:
   16c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   16c10:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   16c14:	ea42 0103 	orr.w	r1, r2, r3
   16c18:	4770      	bx	lr
   16c1a:	bf00      	nop

00016c1c <__aeabi_drsub>:
   16c1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   16c20:	e002      	b.n	16c28 <__adddf3>
   16c22:	bf00      	nop

00016c24 <__aeabi_dsub>:
   16c24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00016c28 <__adddf3>:
   16c28:	b530      	push	{r4, r5, lr}
   16c2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   16c2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   16c32:	ea94 0f05 	teq	r4, r5
   16c36:	bf08      	it	eq
   16c38:	ea90 0f02 	teqeq	r0, r2
   16c3c:	bf1f      	itttt	ne
   16c3e:	ea54 0c00 	orrsne.w	ip, r4, r0
   16c42:	ea55 0c02 	orrsne.w	ip, r5, r2
   16c46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   16c4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   16c4e:	f000 80e2 	beq.w	16e16 <__adddf3+0x1ee>
   16c52:	ea4f 5454 	mov.w	r4, r4, lsr #21
   16c56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   16c5a:	bfb8      	it	lt
   16c5c:	426d      	neglt	r5, r5
   16c5e:	dd0c      	ble.n	16c7a <__adddf3+0x52>
   16c60:	442c      	add	r4, r5
   16c62:	ea80 0202 	eor.w	r2, r0, r2
   16c66:	ea81 0303 	eor.w	r3, r1, r3
   16c6a:	ea82 0000 	eor.w	r0, r2, r0
   16c6e:	ea83 0101 	eor.w	r1, r3, r1
   16c72:	ea80 0202 	eor.w	r2, r0, r2
   16c76:	ea81 0303 	eor.w	r3, r1, r3
   16c7a:	2d36      	cmp	r5, #54	; 0x36
   16c7c:	bf88      	it	hi
   16c7e:	bd30      	pophi	{r4, r5, pc}
   16c80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   16c84:	ea4f 3101 	mov.w	r1, r1, lsl #12
   16c88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   16c8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   16c90:	d002      	beq.n	16c98 <__adddf3+0x70>
   16c92:	4240      	negs	r0, r0
   16c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   16c98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   16c9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   16ca0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   16ca4:	d002      	beq.n	16cac <__adddf3+0x84>
   16ca6:	4252      	negs	r2, r2
   16ca8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   16cac:	ea94 0f05 	teq	r4, r5
   16cb0:	f000 80a7 	beq.w	16e02 <__adddf3+0x1da>
   16cb4:	f1a4 0401 	sub.w	r4, r4, #1
   16cb8:	f1d5 0e20 	rsbs	lr, r5, #32
   16cbc:	db0d      	blt.n	16cda <__adddf3+0xb2>
   16cbe:	fa02 fc0e 	lsl.w	ip, r2, lr
   16cc2:	fa22 f205 	lsr.w	r2, r2, r5
   16cc6:	1880      	adds	r0, r0, r2
   16cc8:	f141 0100 	adc.w	r1, r1, #0
   16ccc:	fa03 f20e 	lsl.w	r2, r3, lr
   16cd0:	1880      	adds	r0, r0, r2
   16cd2:	fa43 f305 	asr.w	r3, r3, r5
   16cd6:	4159      	adcs	r1, r3
   16cd8:	e00e      	b.n	16cf8 <__adddf3+0xd0>
   16cda:	f1a5 0520 	sub.w	r5, r5, #32
   16cde:	f10e 0e20 	add.w	lr, lr, #32
   16ce2:	2a01      	cmp	r2, #1
   16ce4:	fa03 fc0e 	lsl.w	ip, r3, lr
   16ce8:	bf28      	it	cs
   16cea:	f04c 0c02 	orrcs.w	ip, ip, #2
   16cee:	fa43 f305 	asr.w	r3, r3, r5
   16cf2:	18c0      	adds	r0, r0, r3
   16cf4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   16cf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   16cfc:	d507      	bpl.n	16d0e <__adddf3+0xe6>
   16cfe:	f04f 0e00 	mov.w	lr, #0
   16d02:	f1dc 0c00 	rsbs	ip, ip, #0
   16d06:	eb7e 0000 	sbcs.w	r0, lr, r0
   16d0a:	eb6e 0101 	sbc.w	r1, lr, r1
   16d0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   16d12:	d31b      	bcc.n	16d4c <__adddf3+0x124>
   16d14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   16d18:	d30c      	bcc.n	16d34 <__adddf3+0x10c>
   16d1a:	0849      	lsrs	r1, r1, #1
   16d1c:	ea5f 0030 	movs.w	r0, r0, rrx
   16d20:	ea4f 0c3c 	mov.w	ip, ip, rrx
   16d24:	f104 0401 	add.w	r4, r4, #1
   16d28:	ea4f 5244 	mov.w	r2, r4, lsl #21
   16d2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   16d30:	f080 809a 	bcs.w	16e68 <__adddf3+0x240>
   16d34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   16d38:	bf08      	it	eq
   16d3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   16d3e:	f150 0000 	adcs.w	r0, r0, #0
   16d42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   16d46:	ea41 0105 	orr.w	r1, r1, r5
   16d4a:	bd30      	pop	{r4, r5, pc}
   16d4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   16d50:	4140      	adcs	r0, r0
   16d52:	eb41 0101 	adc.w	r1, r1, r1
   16d56:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   16d5a:	f1a4 0401 	sub.w	r4, r4, #1
   16d5e:	d1e9      	bne.n	16d34 <__adddf3+0x10c>
   16d60:	f091 0f00 	teq	r1, #0
   16d64:	bf04      	itt	eq
   16d66:	4601      	moveq	r1, r0
   16d68:	2000      	moveq	r0, #0
   16d6a:	fab1 f381 	clz	r3, r1
   16d6e:	bf08      	it	eq
   16d70:	3320      	addeq	r3, #32
   16d72:	f1a3 030b 	sub.w	r3, r3, #11
   16d76:	f1b3 0220 	subs.w	r2, r3, #32
   16d7a:	da0c      	bge.n	16d96 <__adddf3+0x16e>
   16d7c:	320c      	adds	r2, #12
   16d7e:	dd08      	ble.n	16d92 <__adddf3+0x16a>
   16d80:	f102 0c14 	add.w	ip, r2, #20
   16d84:	f1c2 020c 	rsb	r2, r2, #12
   16d88:	fa01 f00c 	lsl.w	r0, r1, ip
   16d8c:	fa21 f102 	lsr.w	r1, r1, r2
   16d90:	e00c      	b.n	16dac <__adddf3+0x184>
   16d92:	f102 0214 	add.w	r2, r2, #20
   16d96:	bfd8      	it	le
   16d98:	f1c2 0c20 	rsble	ip, r2, #32
   16d9c:	fa01 f102 	lsl.w	r1, r1, r2
   16da0:	fa20 fc0c 	lsr.w	ip, r0, ip
   16da4:	bfdc      	itt	le
   16da6:	ea41 010c 	orrle.w	r1, r1, ip
   16daa:	4090      	lslle	r0, r2
   16dac:	1ae4      	subs	r4, r4, r3
   16dae:	bfa2      	ittt	ge
   16db0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   16db4:	4329      	orrge	r1, r5
   16db6:	bd30      	popge	{r4, r5, pc}
   16db8:	ea6f 0404 	mvn.w	r4, r4
   16dbc:	3c1f      	subs	r4, #31
   16dbe:	da1c      	bge.n	16dfa <__adddf3+0x1d2>
   16dc0:	340c      	adds	r4, #12
   16dc2:	dc0e      	bgt.n	16de2 <__adddf3+0x1ba>
   16dc4:	f104 0414 	add.w	r4, r4, #20
   16dc8:	f1c4 0220 	rsb	r2, r4, #32
   16dcc:	fa20 f004 	lsr.w	r0, r0, r4
   16dd0:	fa01 f302 	lsl.w	r3, r1, r2
   16dd4:	ea40 0003 	orr.w	r0, r0, r3
   16dd8:	fa21 f304 	lsr.w	r3, r1, r4
   16ddc:	ea45 0103 	orr.w	r1, r5, r3
   16de0:	bd30      	pop	{r4, r5, pc}
   16de2:	f1c4 040c 	rsb	r4, r4, #12
   16de6:	f1c4 0220 	rsb	r2, r4, #32
   16dea:	fa20 f002 	lsr.w	r0, r0, r2
   16dee:	fa01 f304 	lsl.w	r3, r1, r4
   16df2:	ea40 0003 	orr.w	r0, r0, r3
   16df6:	4629      	mov	r1, r5
   16df8:	bd30      	pop	{r4, r5, pc}
   16dfa:	fa21 f004 	lsr.w	r0, r1, r4
   16dfe:	4629      	mov	r1, r5
   16e00:	bd30      	pop	{r4, r5, pc}
   16e02:	f094 0f00 	teq	r4, #0
   16e06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   16e0a:	bf06      	itte	eq
   16e0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   16e10:	3401      	addeq	r4, #1
   16e12:	3d01      	subne	r5, #1
   16e14:	e74e      	b.n	16cb4 <__adddf3+0x8c>
   16e16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   16e1a:	bf18      	it	ne
   16e1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   16e20:	d029      	beq.n	16e76 <__adddf3+0x24e>
   16e22:	ea94 0f05 	teq	r4, r5
   16e26:	bf08      	it	eq
   16e28:	ea90 0f02 	teqeq	r0, r2
   16e2c:	d005      	beq.n	16e3a <__adddf3+0x212>
   16e2e:	ea54 0c00 	orrs.w	ip, r4, r0
   16e32:	bf04      	itt	eq
   16e34:	4619      	moveq	r1, r3
   16e36:	4610      	moveq	r0, r2
   16e38:	bd30      	pop	{r4, r5, pc}
   16e3a:	ea91 0f03 	teq	r1, r3
   16e3e:	bf1e      	ittt	ne
   16e40:	2100      	movne	r1, #0
   16e42:	2000      	movne	r0, #0
   16e44:	bd30      	popne	{r4, r5, pc}
   16e46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   16e4a:	d105      	bne.n	16e58 <__adddf3+0x230>
   16e4c:	0040      	lsls	r0, r0, #1
   16e4e:	4149      	adcs	r1, r1
   16e50:	bf28      	it	cs
   16e52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   16e56:	bd30      	pop	{r4, r5, pc}
   16e58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   16e5c:	bf3c      	itt	cc
   16e5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   16e62:	bd30      	popcc	{r4, r5, pc}
   16e64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   16e68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   16e6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   16e70:	f04f 0000 	mov.w	r0, #0
   16e74:	bd30      	pop	{r4, r5, pc}
   16e76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   16e7a:	bf1a      	itte	ne
   16e7c:	4619      	movne	r1, r3
   16e7e:	4610      	movne	r0, r2
   16e80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   16e84:	bf1c      	itt	ne
   16e86:	460b      	movne	r3, r1
   16e88:	4602      	movne	r2, r0
   16e8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   16e8e:	bf06      	itte	eq
   16e90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   16e94:	ea91 0f03 	teqeq	r1, r3
   16e98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   16e9c:	bd30      	pop	{r4, r5, pc}
   16e9e:	bf00      	nop

00016ea0 <__aeabi_ui2d>:
   16ea0:	f090 0f00 	teq	r0, #0
   16ea4:	bf04      	itt	eq
   16ea6:	2100      	moveq	r1, #0
   16ea8:	4770      	bxeq	lr
   16eaa:	b530      	push	{r4, r5, lr}
   16eac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   16eb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   16eb4:	f04f 0500 	mov.w	r5, #0
   16eb8:	f04f 0100 	mov.w	r1, #0
   16ebc:	e750      	b.n	16d60 <__adddf3+0x138>
   16ebe:	bf00      	nop

00016ec0 <__aeabi_i2d>:
   16ec0:	f090 0f00 	teq	r0, #0
   16ec4:	bf04      	itt	eq
   16ec6:	2100      	moveq	r1, #0
   16ec8:	4770      	bxeq	lr
   16eca:	b530      	push	{r4, r5, lr}
   16ecc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   16ed0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   16ed4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   16ed8:	bf48      	it	mi
   16eda:	4240      	negmi	r0, r0
   16edc:	f04f 0100 	mov.w	r1, #0
   16ee0:	e73e      	b.n	16d60 <__adddf3+0x138>
   16ee2:	bf00      	nop

00016ee4 <__aeabi_f2d>:
   16ee4:	0042      	lsls	r2, r0, #1
   16ee6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   16eea:	ea4f 0131 	mov.w	r1, r1, rrx
   16eee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   16ef2:	bf1f      	itttt	ne
   16ef4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   16ef8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   16efc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   16f00:	4770      	bxne	lr
   16f02:	f092 0f00 	teq	r2, #0
   16f06:	bf14      	ite	ne
   16f08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   16f0c:	4770      	bxeq	lr
   16f0e:	b530      	push	{r4, r5, lr}
   16f10:	f44f 7460 	mov.w	r4, #896	; 0x380
   16f14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   16f18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   16f1c:	e720      	b.n	16d60 <__adddf3+0x138>
   16f1e:	bf00      	nop

00016f20 <__aeabi_ul2d>:
   16f20:	ea50 0201 	orrs.w	r2, r0, r1
   16f24:	bf08      	it	eq
   16f26:	4770      	bxeq	lr
   16f28:	b530      	push	{r4, r5, lr}
   16f2a:	f04f 0500 	mov.w	r5, #0
   16f2e:	e00a      	b.n	16f46 <__aeabi_l2d+0x16>

00016f30 <__aeabi_l2d>:
   16f30:	ea50 0201 	orrs.w	r2, r0, r1
   16f34:	bf08      	it	eq
   16f36:	4770      	bxeq	lr
   16f38:	b530      	push	{r4, r5, lr}
   16f3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   16f3e:	d502      	bpl.n	16f46 <__aeabi_l2d+0x16>
   16f40:	4240      	negs	r0, r0
   16f42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   16f46:	f44f 6480 	mov.w	r4, #1024	; 0x400
   16f4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   16f4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   16f52:	f43f aedc 	beq.w	16d0e <__adddf3+0xe6>
   16f56:	f04f 0203 	mov.w	r2, #3
   16f5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   16f5e:	bf18      	it	ne
   16f60:	3203      	addne	r2, #3
   16f62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   16f66:	bf18      	it	ne
   16f68:	3203      	addne	r2, #3
   16f6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   16f6e:	f1c2 0320 	rsb	r3, r2, #32
   16f72:	fa00 fc03 	lsl.w	ip, r0, r3
   16f76:	fa20 f002 	lsr.w	r0, r0, r2
   16f7a:	fa01 fe03 	lsl.w	lr, r1, r3
   16f7e:	ea40 000e 	orr.w	r0, r0, lr
   16f82:	fa21 f102 	lsr.w	r1, r1, r2
   16f86:	4414      	add	r4, r2
   16f88:	e6c1      	b.n	16d0e <__adddf3+0xe6>
   16f8a:	bf00      	nop

00016f8c <__aeabi_dmul>:
   16f8c:	b570      	push	{r4, r5, r6, lr}
   16f8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   16f92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   16f96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   16f9a:	bf1d      	ittte	ne
   16f9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   16fa0:	ea94 0f0c 	teqne	r4, ip
   16fa4:	ea95 0f0c 	teqne	r5, ip
   16fa8:	f000 f8de 	bleq	17168 <__aeabi_dmul+0x1dc>
   16fac:	442c      	add	r4, r5
   16fae:	ea81 0603 	eor.w	r6, r1, r3
   16fb2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   16fb6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   16fba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   16fbe:	bf18      	it	ne
   16fc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   16fc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   16fcc:	d038      	beq.n	17040 <__aeabi_dmul+0xb4>
   16fce:	fba0 ce02 	umull	ip, lr, r0, r2
   16fd2:	f04f 0500 	mov.w	r5, #0
   16fd6:	fbe1 e502 	umlal	lr, r5, r1, r2
   16fda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   16fde:	fbe0 e503 	umlal	lr, r5, r0, r3
   16fe2:	f04f 0600 	mov.w	r6, #0
   16fe6:	fbe1 5603 	umlal	r5, r6, r1, r3
   16fea:	f09c 0f00 	teq	ip, #0
   16fee:	bf18      	it	ne
   16ff0:	f04e 0e01 	orrne.w	lr, lr, #1
   16ff4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   16ff8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   16ffc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17000:	d204      	bcs.n	1700c <__aeabi_dmul+0x80>
   17002:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17006:	416d      	adcs	r5, r5
   17008:	eb46 0606 	adc.w	r6, r6, r6
   1700c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17010:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17014:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17018:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1701c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17020:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17024:	bf88      	it	hi
   17026:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1702a:	d81e      	bhi.n	1706a <__aeabi_dmul+0xde>
   1702c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17030:	bf08      	it	eq
   17032:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17036:	f150 0000 	adcs.w	r0, r0, #0
   1703a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1703e:	bd70      	pop	{r4, r5, r6, pc}
   17040:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17044:	ea46 0101 	orr.w	r1, r6, r1
   17048:	ea40 0002 	orr.w	r0, r0, r2
   1704c:	ea81 0103 	eor.w	r1, r1, r3
   17050:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17054:	bfc2      	ittt	gt
   17056:	ebd4 050c 	rsbsgt	r5, r4, ip
   1705a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1705e:	bd70      	popgt	{r4, r5, r6, pc}
   17060:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17064:	f04f 0e00 	mov.w	lr, #0
   17068:	3c01      	subs	r4, #1
   1706a:	f300 80ab 	bgt.w	171c4 <__aeabi_dmul+0x238>
   1706e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17072:	bfde      	ittt	le
   17074:	2000      	movle	r0, #0
   17076:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1707a:	bd70      	pople	{r4, r5, r6, pc}
   1707c:	f1c4 0400 	rsb	r4, r4, #0
   17080:	3c20      	subs	r4, #32
   17082:	da35      	bge.n	170f0 <__aeabi_dmul+0x164>
   17084:	340c      	adds	r4, #12
   17086:	dc1b      	bgt.n	170c0 <__aeabi_dmul+0x134>
   17088:	f104 0414 	add.w	r4, r4, #20
   1708c:	f1c4 0520 	rsb	r5, r4, #32
   17090:	fa00 f305 	lsl.w	r3, r0, r5
   17094:	fa20 f004 	lsr.w	r0, r0, r4
   17098:	fa01 f205 	lsl.w	r2, r1, r5
   1709c:	ea40 0002 	orr.w	r0, r0, r2
   170a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   170a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   170a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   170ac:	fa21 f604 	lsr.w	r6, r1, r4
   170b0:	eb42 0106 	adc.w	r1, r2, r6
   170b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   170b8:	bf08      	it	eq
   170ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   170be:	bd70      	pop	{r4, r5, r6, pc}
   170c0:	f1c4 040c 	rsb	r4, r4, #12
   170c4:	f1c4 0520 	rsb	r5, r4, #32
   170c8:	fa00 f304 	lsl.w	r3, r0, r4
   170cc:	fa20 f005 	lsr.w	r0, r0, r5
   170d0:	fa01 f204 	lsl.w	r2, r1, r4
   170d4:	ea40 0002 	orr.w	r0, r0, r2
   170d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   170dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   170e0:	f141 0100 	adc.w	r1, r1, #0
   170e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   170e8:	bf08      	it	eq
   170ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   170ee:	bd70      	pop	{r4, r5, r6, pc}
   170f0:	f1c4 0520 	rsb	r5, r4, #32
   170f4:	fa00 f205 	lsl.w	r2, r0, r5
   170f8:	ea4e 0e02 	orr.w	lr, lr, r2
   170fc:	fa20 f304 	lsr.w	r3, r0, r4
   17100:	fa01 f205 	lsl.w	r2, r1, r5
   17104:	ea43 0302 	orr.w	r3, r3, r2
   17108:	fa21 f004 	lsr.w	r0, r1, r4
   1710c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17110:	fa21 f204 	lsr.w	r2, r1, r4
   17114:	ea20 0002 	bic.w	r0, r0, r2
   17118:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1711c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17120:	bf08      	it	eq
   17122:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17126:	bd70      	pop	{r4, r5, r6, pc}
   17128:	f094 0f00 	teq	r4, #0
   1712c:	d10f      	bne.n	1714e <__aeabi_dmul+0x1c2>
   1712e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17132:	0040      	lsls	r0, r0, #1
   17134:	eb41 0101 	adc.w	r1, r1, r1
   17138:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1713c:	bf08      	it	eq
   1713e:	3c01      	subeq	r4, #1
   17140:	d0f7      	beq.n	17132 <__aeabi_dmul+0x1a6>
   17142:	ea41 0106 	orr.w	r1, r1, r6
   17146:	f095 0f00 	teq	r5, #0
   1714a:	bf18      	it	ne
   1714c:	4770      	bxne	lr
   1714e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17152:	0052      	lsls	r2, r2, #1
   17154:	eb43 0303 	adc.w	r3, r3, r3
   17158:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1715c:	bf08      	it	eq
   1715e:	3d01      	subeq	r5, #1
   17160:	d0f7      	beq.n	17152 <__aeabi_dmul+0x1c6>
   17162:	ea43 0306 	orr.w	r3, r3, r6
   17166:	4770      	bx	lr
   17168:	ea94 0f0c 	teq	r4, ip
   1716c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17170:	bf18      	it	ne
   17172:	ea95 0f0c 	teqne	r5, ip
   17176:	d00c      	beq.n	17192 <__aeabi_dmul+0x206>
   17178:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1717c:	bf18      	it	ne
   1717e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17182:	d1d1      	bne.n	17128 <__aeabi_dmul+0x19c>
   17184:	ea81 0103 	eor.w	r1, r1, r3
   17188:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1718c:	f04f 0000 	mov.w	r0, #0
   17190:	bd70      	pop	{r4, r5, r6, pc}
   17192:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17196:	bf06      	itte	eq
   17198:	4610      	moveq	r0, r2
   1719a:	4619      	moveq	r1, r3
   1719c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   171a0:	d019      	beq.n	171d6 <__aeabi_dmul+0x24a>
   171a2:	ea94 0f0c 	teq	r4, ip
   171a6:	d102      	bne.n	171ae <__aeabi_dmul+0x222>
   171a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   171ac:	d113      	bne.n	171d6 <__aeabi_dmul+0x24a>
   171ae:	ea95 0f0c 	teq	r5, ip
   171b2:	d105      	bne.n	171c0 <__aeabi_dmul+0x234>
   171b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   171b8:	bf1c      	itt	ne
   171ba:	4610      	movne	r0, r2
   171bc:	4619      	movne	r1, r3
   171be:	d10a      	bne.n	171d6 <__aeabi_dmul+0x24a>
   171c0:	ea81 0103 	eor.w	r1, r1, r3
   171c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   171c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   171cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   171d0:	f04f 0000 	mov.w	r0, #0
   171d4:	bd70      	pop	{r4, r5, r6, pc}
   171d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   171da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   171de:	bd70      	pop	{r4, r5, r6, pc}

000171e0 <__aeabi_ddiv>:
   171e0:	b570      	push	{r4, r5, r6, lr}
   171e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   171e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   171ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   171ee:	bf1d      	ittte	ne
   171f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   171f4:	ea94 0f0c 	teqne	r4, ip
   171f8:	ea95 0f0c 	teqne	r5, ip
   171fc:	f000 f8a7 	bleq	1734e <__aeabi_ddiv+0x16e>
   17200:	eba4 0405 	sub.w	r4, r4, r5
   17204:	ea81 0e03 	eor.w	lr, r1, r3
   17208:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1720c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17210:	f000 8088 	beq.w	17324 <__aeabi_ddiv+0x144>
   17214:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17218:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1721c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17220:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17224:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17228:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1722c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17230:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17234:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17238:	429d      	cmp	r5, r3
   1723a:	bf08      	it	eq
   1723c:	4296      	cmpeq	r6, r2
   1723e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17242:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17246:	d202      	bcs.n	1724e <__aeabi_ddiv+0x6e>
   17248:	085b      	lsrs	r3, r3, #1
   1724a:	ea4f 0232 	mov.w	r2, r2, rrx
   1724e:	1ab6      	subs	r6, r6, r2
   17250:	eb65 0503 	sbc.w	r5, r5, r3
   17254:	085b      	lsrs	r3, r3, #1
   17256:	ea4f 0232 	mov.w	r2, r2, rrx
   1725a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1725e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17262:	ebb6 0e02 	subs.w	lr, r6, r2
   17266:	eb75 0e03 	sbcs.w	lr, r5, r3
   1726a:	bf22      	ittt	cs
   1726c:	1ab6      	subcs	r6, r6, r2
   1726e:	4675      	movcs	r5, lr
   17270:	ea40 000c 	orrcs.w	r0, r0, ip
   17274:	085b      	lsrs	r3, r3, #1
   17276:	ea4f 0232 	mov.w	r2, r2, rrx
   1727a:	ebb6 0e02 	subs.w	lr, r6, r2
   1727e:	eb75 0e03 	sbcs.w	lr, r5, r3
   17282:	bf22      	ittt	cs
   17284:	1ab6      	subcs	r6, r6, r2
   17286:	4675      	movcs	r5, lr
   17288:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1728c:	085b      	lsrs	r3, r3, #1
   1728e:	ea4f 0232 	mov.w	r2, r2, rrx
   17292:	ebb6 0e02 	subs.w	lr, r6, r2
   17296:	eb75 0e03 	sbcs.w	lr, r5, r3
   1729a:	bf22      	ittt	cs
   1729c:	1ab6      	subcs	r6, r6, r2
   1729e:	4675      	movcs	r5, lr
   172a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   172a4:	085b      	lsrs	r3, r3, #1
   172a6:	ea4f 0232 	mov.w	r2, r2, rrx
   172aa:	ebb6 0e02 	subs.w	lr, r6, r2
   172ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   172b2:	bf22      	ittt	cs
   172b4:	1ab6      	subcs	r6, r6, r2
   172b6:	4675      	movcs	r5, lr
   172b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   172bc:	ea55 0e06 	orrs.w	lr, r5, r6
   172c0:	d018      	beq.n	172f4 <__aeabi_ddiv+0x114>
   172c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   172c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   172ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
   172ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   172d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   172d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   172da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   172de:	d1c0      	bne.n	17262 <__aeabi_ddiv+0x82>
   172e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   172e4:	d10b      	bne.n	172fe <__aeabi_ddiv+0x11e>
   172e6:	ea41 0100 	orr.w	r1, r1, r0
   172ea:	f04f 0000 	mov.w	r0, #0
   172ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   172f2:	e7b6      	b.n	17262 <__aeabi_ddiv+0x82>
   172f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   172f8:	bf04      	itt	eq
   172fa:	4301      	orreq	r1, r0
   172fc:	2000      	moveq	r0, #0
   172fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17302:	bf88      	it	hi
   17304:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17308:	f63f aeaf 	bhi.w	1706a <__aeabi_dmul+0xde>
   1730c:	ebb5 0c03 	subs.w	ip, r5, r3
   17310:	bf04      	itt	eq
   17312:	ebb6 0c02 	subseq.w	ip, r6, r2
   17316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1731a:	f150 0000 	adcs.w	r0, r0, #0
   1731e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17322:	bd70      	pop	{r4, r5, r6, pc}
   17324:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17328:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1732c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17330:	bfc2      	ittt	gt
   17332:	ebd4 050c 	rsbsgt	r5, r4, ip
   17336:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1733a:	bd70      	popgt	{r4, r5, r6, pc}
   1733c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17340:	f04f 0e00 	mov.w	lr, #0
   17344:	3c01      	subs	r4, #1
   17346:	e690      	b.n	1706a <__aeabi_dmul+0xde>
   17348:	ea45 0e06 	orr.w	lr, r5, r6
   1734c:	e68d      	b.n	1706a <__aeabi_dmul+0xde>
   1734e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17352:	ea94 0f0c 	teq	r4, ip
   17356:	bf08      	it	eq
   17358:	ea95 0f0c 	teqeq	r5, ip
   1735c:	f43f af3b 	beq.w	171d6 <__aeabi_dmul+0x24a>
   17360:	ea94 0f0c 	teq	r4, ip
   17364:	d10a      	bne.n	1737c <__aeabi_ddiv+0x19c>
   17366:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1736a:	f47f af34 	bne.w	171d6 <__aeabi_dmul+0x24a>
   1736e:	ea95 0f0c 	teq	r5, ip
   17372:	f47f af25 	bne.w	171c0 <__aeabi_dmul+0x234>
   17376:	4610      	mov	r0, r2
   17378:	4619      	mov	r1, r3
   1737a:	e72c      	b.n	171d6 <__aeabi_dmul+0x24a>
   1737c:	ea95 0f0c 	teq	r5, ip
   17380:	d106      	bne.n	17390 <__aeabi_ddiv+0x1b0>
   17382:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17386:	f43f aefd 	beq.w	17184 <__aeabi_dmul+0x1f8>
   1738a:	4610      	mov	r0, r2
   1738c:	4619      	mov	r1, r3
   1738e:	e722      	b.n	171d6 <__aeabi_dmul+0x24a>
   17390:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17394:	bf18      	it	ne
   17396:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1739a:	f47f aec5 	bne.w	17128 <__aeabi_dmul+0x19c>
   1739e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   173a2:	f47f af0d 	bne.w	171c0 <__aeabi_dmul+0x234>
   173a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   173aa:	f47f aeeb 	bne.w	17184 <__aeabi_dmul+0x1f8>
   173ae:	e712      	b.n	171d6 <__aeabi_dmul+0x24a>

000173b0 <__gedf2>:
   173b0:	f04f 3cff 	mov.w	ip, #4294967295
   173b4:	e006      	b.n	173c4 <__cmpdf2+0x4>
   173b6:	bf00      	nop

000173b8 <__ledf2>:
   173b8:	f04f 0c01 	mov.w	ip, #1
   173bc:	e002      	b.n	173c4 <__cmpdf2+0x4>
   173be:	bf00      	nop

000173c0 <__cmpdf2>:
   173c0:	f04f 0c01 	mov.w	ip, #1
   173c4:	f84d cd04 	str.w	ip, [sp, #-4]!
   173c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   173cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   173d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   173d4:	bf18      	it	ne
   173d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   173da:	d01b      	beq.n	17414 <__cmpdf2+0x54>
   173dc:	b001      	add	sp, #4
   173de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   173e2:	bf0c      	ite	eq
   173e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   173e8:	ea91 0f03 	teqne	r1, r3
   173ec:	bf02      	ittt	eq
   173ee:	ea90 0f02 	teqeq	r0, r2
   173f2:	2000      	moveq	r0, #0
   173f4:	4770      	bxeq	lr
   173f6:	f110 0f00 	cmn.w	r0, #0
   173fa:	ea91 0f03 	teq	r1, r3
   173fe:	bf58      	it	pl
   17400:	4299      	cmppl	r1, r3
   17402:	bf08      	it	eq
   17404:	4290      	cmpeq	r0, r2
   17406:	bf2c      	ite	cs
   17408:	17d8      	asrcs	r0, r3, #31
   1740a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1740e:	f040 0001 	orr.w	r0, r0, #1
   17412:	4770      	bx	lr
   17414:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17418:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1741c:	d102      	bne.n	17424 <__cmpdf2+0x64>
   1741e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17422:	d107      	bne.n	17434 <__cmpdf2+0x74>
   17424:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17428:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1742c:	d1d6      	bne.n	173dc <__cmpdf2+0x1c>
   1742e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17432:	d0d3      	beq.n	173dc <__cmpdf2+0x1c>
   17434:	f85d 0b04 	ldr.w	r0, [sp], #4
   17438:	4770      	bx	lr
   1743a:	bf00      	nop

0001743c <__aeabi_cdrcmple>:
   1743c:	4684      	mov	ip, r0
   1743e:	4610      	mov	r0, r2
   17440:	4662      	mov	r2, ip
   17442:	468c      	mov	ip, r1
   17444:	4619      	mov	r1, r3
   17446:	4663      	mov	r3, ip
   17448:	e000      	b.n	1744c <__aeabi_cdcmpeq>
   1744a:	bf00      	nop

0001744c <__aeabi_cdcmpeq>:
   1744c:	b501      	push	{r0, lr}
   1744e:	f7ff ffb7 	bl	173c0 <__cmpdf2>
   17452:	2800      	cmp	r0, #0
   17454:	bf48      	it	mi
   17456:	f110 0f00 	cmnmi.w	r0, #0
   1745a:	bd01      	pop	{r0, pc}

0001745c <__aeabi_dcmpeq>:
   1745c:	f84d ed08 	str.w	lr, [sp, #-8]!
   17460:	f7ff fff4 	bl	1744c <__aeabi_cdcmpeq>
   17464:	bf0c      	ite	eq
   17466:	2001      	moveq	r0, #1
   17468:	2000      	movne	r0, #0
   1746a:	f85d fb08 	ldr.w	pc, [sp], #8
   1746e:	bf00      	nop

00017470 <__aeabi_dcmplt>:
   17470:	f84d ed08 	str.w	lr, [sp, #-8]!
   17474:	f7ff ffea 	bl	1744c <__aeabi_cdcmpeq>
   17478:	bf34      	ite	cc
   1747a:	2001      	movcc	r0, #1
   1747c:	2000      	movcs	r0, #0
   1747e:	f85d fb08 	ldr.w	pc, [sp], #8
   17482:	bf00      	nop

00017484 <__aeabi_dcmple>:
   17484:	f84d ed08 	str.w	lr, [sp, #-8]!
   17488:	f7ff ffe0 	bl	1744c <__aeabi_cdcmpeq>
   1748c:	bf94      	ite	ls
   1748e:	2001      	movls	r0, #1
   17490:	2000      	movhi	r0, #0
   17492:	f85d fb08 	ldr.w	pc, [sp], #8
   17496:	bf00      	nop

00017498 <__aeabi_dcmpge>:
   17498:	f84d ed08 	str.w	lr, [sp, #-8]!
   1749c:	f7ff ffce 	bl	1743c <__aeabi_cdrcmple>
   174a0:	bf94      	ite	ls
   174a2:	2001      	movls	r0, #1
   174a4:	2000      	movhi	r0, #0
   174a6:	f85d fb08 	ldr.w	pc, [sp], #8
   174aa:	bf00      	nop

000174ac <__aeabi_dcmpgt>:
   174ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   174b0:	f7ff ffc4 	bl	1743c <__aeabi_cdrcmple>
   174b4:	bf34      	ite	cc
   174b6:	2001      	movcc	r0, #1
   174b8:	2000      	movcs	r0, #0
   174ba:	f85d fb08 	ldr.w	pc, [sp], #8
   174be:	bf00      	nop

000174c0 <__aeabi_dcmpun>:
   174c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   174c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   174c8:	d102      	bne.n	174d0 <__aeabi_dcmpun+0x10>
   174ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   174ce:	d10a      	bne.n	174e6 <__aeabi_dcmpun+0x26>
   174d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   174d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   174d8:	d102      	bne.n	174e0 <__aeabi_dcmpun+0x20>
   174da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   174de:	d102      	bne.n	174e6 <__aeabi_dcmpun+0x26>
   174e0:	f04f 0000 	mov.w	r0, #0
   174e4:	4770      	bx	lr
   174e6:	f04f 0001 	mov.w	r0, #1
   174ea:	4770      	bx	lr

000174ec <__aeabi_d2uiz>:
   174ec:	004a      	lsls	r2, r1, #1
   174ee:	d211      	bcs.n	17514 <__aeabi_d2uiz+0x28>
   174f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   174f4:	d211      	bcs.n	1751a <__aeabi_d2uiz+0x2e>
   174f6:	d50d      	bpl.n	17514 <__aeabi_d2uiz+0x28>
   174f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   174fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17500:	d40e      	bmi.n	17520 <__aeabi_d2uiz+0x34>
   17502:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1750a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1750e:	fa23 f002 	lsr.w	r0, r3, r2
   17512:	4770      	bx	lr
   17514:	f04f 0000 	mov.w	r0, #0
   17518:	4770      	bx	lr
   1751a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1751e:	d102      	bne.n	17526 <__aeabi_d2uiz+0x3a>
   17520:	f04f 30ff 	mov.w	r0, #4294967295
   17524:	4770      	bx	lr
   17526:	f04f 0000 	mov.w	r0, #0
   1752a:	4770      	bx	lr

0001752c <__aeabi_frsub>:
   1752c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   17530:	e002      	b.n	17538 <__addsf3>
   17532:	bf00      	nop

00017534 <__aeabi_fsub>:
   17534:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00017538 <__addsf3>:
   17538:	0042      	lsls	r2, r0, #1
   1753a:	bf1f      	itttt	ne
   1753c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   17540:	ea92 0f03 	teqne	r2, r3
   17544:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   17548:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1754c:	d06a      	beq.n	17624 <__addsf3+0xec>
   1754e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   17552:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   17556:	bfc1      	itttt	gt
   17558:	18d2      	addgt	r2, r2, r3
   1755a:	4041      	eorgt	r1, r0
   1755c:	4048      	eorgt	r0, r1
   1755e:	4041      	eorgt	r1, r0
   17560:	bfb8      	it	lt
   17562:	425b      	neglt	r3, r3
   17564:	2b19      	cmp	r3, #25
   17566:	bf88      	it	hi
   17568:	4770      	bxhi	lr
   1756a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1756e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17572:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17576:	bf18      	it	ne
   17578:	4240      	negne	r0, r0
   1757a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1757e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   17582:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   17586:	bf18      	it	ne
   17588:	4249      	negne	r1, r1
   1758a:	ea92 0f03 	teq	r2, r3
   1758e:	d03f      	beq.n	17610 <__addsf3+0xd8>
   17590:	f1a2 0201 	sub.w	r2, r2, #1
   17594:	fa41 fc03 	asr.w	ip, r1, r3
   17598:	eb10 000c 	adds.w	r0, r0, ip
   1759c:	f1c3 0320 	rsb	r3, r3, #32
   175a0:	fa01 f103 	lsl.w	r1, r1, r3
   175a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   175a8:	d502      	bpl.n	175b0 <__addsf3+0x78>
   175aa:	4249      	negs	r1, r1
   175ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   175b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   175b4:	d313      	bcc.n	175de <__addsf3+0xa6>
   175b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   175ba:	d306      	bcc.n	175ca <__addsf3+0x92>
   175bc:	0840      	lsrs	r0, r0, #1
   175be:	ea4f 0131 	mov.w	r1, r1, rrx
   175c2:	f102 0201 	add.w	r2, r2, #1
   175c6:	2afe      	cmp	r2, #254	; 0xfe
   175c8:	d251      	bcs.n	1766e <__addsf3+0x136>
   175ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   175ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   175d2:	bf08      	it	eq
   175d4:	f020 0001 	biceq.w	r0, r0, #1
   175d8:	ea40 0003 	orr.w	r0, r0, r3
   175dc:	4770      	bx	lr
   175de:	0049      	lsls	r1, r1, #1
   175e0:	eb40 0000 	adc.w	r0, r0, r0
   175e4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   175e8:	f1a2 0201 	sub.w	r2, r2, #1
   175ec:	d1ed      	bne.n	175ca <__addsf3+0x92>
   175ee:	fab0 fc80 	clz	ip, r0
   175f2:	f1ac 0c08 	sub.w	ip, ip, #8
   175f6:	ebb2 020c 	subs.w	r2, r2, ip
   175fa:	fa00 f00c 	lsl.w	r0, r0, ip
   175fe:	bfaa      	itet	ge
   17600:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   17604:	4252      	neglt	r2, r2
   17606:	4318      	orrge	r0, r3
   17608:	bfbc      	itt	lt
   1760a:	40d0      	lsrlt	r0, r2
   1760c:	4318      	orrlt	r0, r3
   1760e:	4770      	bx	lr
   17610:	f092 0f00 	teq	r2, #0
   17614:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   17618:	bf06      	itte	eq
   1761a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1761e:	3201      	addeq	r2, #1
   17620:	3b01      	subne	r3, #1
   17622:	e7b5      	b.n	17590 <__addsf3+0x58>
   17624:	ea4f 0341 	mov.w	r3, r1, lsl #1
   17628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1762c:	bf18      	it	ne
   1762e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   17632:	d021      	beq.n	17678 <__addsf3+0x140>
   17634:	ea92 0f03 	teq	r2, r3
   17638:	d004      	beq.n	17644 <__addsf3+0x10c>
   1763a:	f092 0f00 	teq	r2, #0
   1763e:	bf08      	it	eq
   17640:	4608      	moveq	r0, r1
   17642:	4770      	bx	lr
   17644:	ea90 0f01 	teq	r0, r1
   17648:	bf1c      	itt	ne
   1764a:	2000      	movne	r0, #0
   1764c:	4770      	bxne	lr
   1764e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   17652:	d104      	bne.n	1765e <__addsf3+0x126>
   17654:	0040      	lsls	r0, r0, #1
   17656:	bf28      	it	cs
   17658:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1765c:	4770      	bx	lr
   1765e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   17662:	bf3c      	itt	cc
   17664:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   17668:	4770      	bxcc	lr
   1766a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1766e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   17672:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17676:	4770      	bx	lr
   17678:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1767c:	bf16      	itet	ne
   1767e:	4608      	movne	r0, r1
   17680:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   17684:	4601      	movne	r1, r0
   17686:	0242      	lsls	r2, r0, #9
   17688:	bf06      	itte	eq
   1768a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1768e:	ea90 0f01 	teqeq	r0, r1
   17692:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   17696:	4770      	bx	lr

00017698 <__aeabi_ui2f>:
   17698:	f04f 0300 	mov.w	r3, #0
   1769c:	e004      	b.n	176a8 <__aeabi_i2f+0x8>
   1769e:	bf00      	nop

000176a0 <__aeabi_i2f>:
   176a0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   176a4:	bf48      	it	mi
   176a6:	4240      	negmi	r0, r0
   176a8:	ea5f 0c00 	movs.w	ip, r0
   176ac:	bf08      	it	eq
   176ae:	4770      	bxeq	lr
   176b0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   176b4:	4601      	mov	r1, r0
   176b6:	f04f 0000 	mov.w	r0, #0
   176ba:	e01c      	b.n	176f6 <__aeabi_l2f+0x2a>

000176bc <__aeabi_ul2f>:
   176bc:	ea50 0201 	orrs.w	r2, r0, r1
   176c0:	bf08      	it	eq
   176c2:	4770      	bxeq	lr
   176c4:	f04f 0300 	mov.w	r3, #0
   176c8:	e00a      	b.n	176e0 <__aeabi_l2f+0x14>
   176ca:	bf00      	nop

000176cc <__aeabi_l2f>:
   176cc:	ea50 0201 	orrs.w	r2, r0, r1
   176d0:	bf08      	it	eq
   176d2:	4770      	bxeq	lr
   176d4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   176d8:	d502      	bpl.n	176e0 <__aeabi_l2f+0x14>
   176da:	4240      	negs	r0, r0
   176dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   176e0:	ea5f 0c01 	movs.w	ip, r1
   176e4:	bf02      	ittt	eq
   176e6:	4684      	moveq	ip, r0
   176e8:	4601      	moveq	r1, r0
   176ea:	2000      	moveq	r0, #0
   176ec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   176f0:	bf08      	it	eq
   176f2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   176f6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   176fa:	fabc f28c 	clz	r2, ip
   176fe:	3a08      	subs	r2, #8
   17700:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   17704:	db10      	blt.n	17728 <__aeabi_l2f+0x5c>
   17706:	fa01 fc02 	lsl.w	ip, r1, r2
   1770a:	4463      	add	r3, ip
   1770c:	fa00 fc02 	lsl.w	ip, r0, r2
   17710:	f1c2 0220 	rsb	r2, r2, #32
   17714:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17718:	fa20 f202 	lsr.w	r2, r0, r2
   1771c:	eb43 0002 	adc.w	r0, r3, r2
   17720:	bf08      	it	eq
   17722:	f020 0001 	biceq.w	r0, r0, #1
   17726:	4770      	bx	lr
   17728:	f102 0220 	add.w	r2, r2, #32
   1772c:	fa01 fc02 	lsl.w	ip, r1, r2
   17730:	f1c2 0220 	rsb	r2, r2, #32
   17734:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   17738:	fa21 f202 	lsr.w	r2, r1, r2
   1773c:	eb43 0002 	adc.w	r0, r3, r2
   17740:	bf08      	it	eq
   17742:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   17746:	4770      	bx	lr

00017748 <__cxa_atexit>:
   17748:	4613      	mov	r3, r2
   1774a:	460a      	mov	r2, r1
   1774c:	4601      	mov	r1, r0
   1774e:	2002      	movs	r0, #2
   17750:	f000 b9c4 	b.w	17adc <__register_exitproc>

00017754 <difftime>:
   17754:	b508      	push	{r3, lr}
   17756:	1a40      	subs	r0, r0, r1
   17758:	f7ff fbb2 	bl	16ec0 <__aeabi_i2d>
   1775c:	bd08      	pop	{r3, pc}
   1775e:	bf00      	nop

00017760 <__errno>:
   17760:	4b01      	ldr	r3, [pc, #4]	; (17768 <__errno+0x8>)
   17762:	6818      	ldr	r0, [r3, #0]
   17764:	4770      	bx	lr
   17766:	bf00      	nop
   17768:	200001c4 	.word	0x200001c4

0001776c <ffs>:
   1776c:	b140      	cbz	r0, 17780 <ffs+0x14>
   1776e:	2300      	movs	r3, #0
   17770:	fa40 f103 	asr.w	r1, r0, r3
   17774:	1c5a      	adds	r2, r3, #1
   17776:	07c9      	lsls	r1, r1, #31
   17778:	4613      	mov	r3, r2
   1777a:	d5f9      	bpl.n	17770 <ffs+0x4>
   1777c:	4610      	mov	r0, r2
   1777e:	4770      	bx	lr
   17780:	4602      	mov	r2, r0
   17782:	4610      	mov	r0, r2
   17784:	4770      	bx	lr
   17786:	bf00      	nop

00017788 <__libc_init_array>:
   17788:	b570      	push	{r4, r5, r6, lr}
   1778a:	4e0f      	ldr	r6, [pc, #60]	; (177c8 <__libc_init_array+0x40>)
   1778c:	4d0f      	ldr	r5, [pc, #60]	; (177cc <__libc_init_array+0x44>)
   1778e:	1b76      	subs	r6, r6, r5
   17790:	10b6      	asrs	r6, r6, #2
   17792:	bf18      	it	ne
   17794:	2400      	movne	r4, #0
   17796:	d005      	beq.n	177a4 <__libc_init_array+0x1c>
   17798:	3401      	adds	r4, #1
   1779a:	f855 3b04 	ldr.w	r3, [r5], #4
   1779e:	4798      	blx	r3
   177a0:	42a6      	cmp	r6, r4
   177a2:	d1f9      	bne.n	17798 <__libc_init_array+0x10>
   177a4:	4e0a      	ldr	r6, [pc, #40]	; (177d0 <__libc_init_array+0x48>)
   177a6:	4d0b      	ldr	r5, [pc, #44]	; (177d4 <__libc_init_array+0x4c>)
   177a8:	1b76      	subs	r6, r6, r5
   177aa:	f002 f907 	bl	199bc <_init>
   177ae:	10b6      	asrs	r6, r6, #2
   177b0:	bf18      	it	ne
   177b2:	2400      	movne	r4, #0
   177b4:	d006      	beq.n	177c4 <__libc_init_array+0x3c>
   177b6:	3401      	adds	r4, #1
   177b8:	f855 3b04 	ldr.w	r3, [r5], #4
   177bc:	4798      	blx	r3
   177be:	42a6      	cmp	r6, r4
   177c0:	d1f9      	bne.n	177b6 <__libc_init_array+0x2e>
   177c2:	bd70      	pop	{r4, r5, r6, pc}
   177c4:	bd70      	pop	{r4, r5, r6, pc}
   177c6:	bf00      	nop
   177c8:	000199c8 	.word	0x000199c8
   177cc:	000199c8 	.word	0x000199c8
   177d0:	00019a28 	.word	0x00019a28
   177d4:	000199c8 	.word	0x000199c8

000177d8 <memcpy>:
   177d8:	4684      	mov	ip, r0
   177da:	ea41 0300 	orr.w	r3, r1, r0
   177de:	f013 0303 	ands.w	r3, r3, #3
   177e2:	d16d      	bne.n	178c0 <memcpy+0xe8>
   177e4:	3a40      	subs	r2, #64	; 0x40
   177e6:	d341      	bcc.n	1786c <memcpy+0x94>
   177e8:	f851 3b04 	ldr.w	r3, [r1], #4
   177ec:	f840 3b04 	str.w	r3, [r0], #4
   177f0:	f851 3b04 	ldr.w	r3, [r1], #4
   177f4:	f840 3b04 	str.w	r3, [r0], #4
   177f8:	f851 3b04 	ldr.w	r3, [r1], #4
   177fc:	f840 3b04 	str.w	r3, [r0], #4
   17800:	f851 3b04 	ldr.w	r3, [r1], #4
   17804:	f840 3b04 	str.w	r3, [r0], #4
   17808:	f851 3b04 	ldr.w	r3, [r1], #4
   1780c:	f840 3b04 	str.w	r3, [r0], #4
   17810:	f851 3b04 	ldr.w	r3, [r1], #4
   17814:	f840 3b04 	str.w	r3, [r0], #4
   17818:	f851 3b04 	ldr.w	r3, [r1], #4
   1781c:	f840 3b04 	str.w	r3, [r0], #4
   17820:	f851 3b04 	ldr.w	r3, [r1], #4
   17824:	f840 3b04 	str.w	r3, [r0], #4
   17828:	f851 3b04 	ldr.w	r3, [r1], #4
   1782c:	f840 3b04 	str.w	r3, [r0], #4
   17830:	f851 3b04 	ldr.w	r3, [r1], #4
   17834:	f840 3b04 	str.w	r3, [r0], #4
   17838:	f851 3b04 	ldr.w	r3, [r1], #4
   1783c:	f840 3b04 	str.w	r3, [r0], #4
   17840:	f851 3b04 	ldr.w	r3, [r1], #4
   17844:	f840 3b04 	str.w	r3, [r0], #4
   17848:	f851 3b04 	ldr.w	r3, [r1], #4
   1784c:	f840 3b04 	str.w	r3, [r0], #4
   17850:	f851 3b04 	ldr.w	r3, [r1], #4
   17854:	f840 3b04 	str.w	r3, [r0], #4
   17858:	f851 3b04 	ldr.w	r3, [r1], #4
   1785c:	f840 3b04 	str.w	r3, [r0], #4
   17860:	f851 3b04 	ldr.w	r3, [r1], #4
   17864:	f840 3b04 	str.w	r3, [r0], #4
   17868:	3a40      	subs	r2, #64	; 0x40
   1786a:	d2bd      	bcs.n	177e8 <memcpy+0x10>
   1786c:	3230      	adds	r2, #48	; 0x30
   1786e:	d311      	bcc.n	17894 <memcpy+0xbc>
   17870:	f851 3b04 	ldr.w	r3, [r1], #4
   17874:	f840 3b04 	str.w	r3, [r0], #4
   17878:	f851 3b04 	ldr.w	r3, [r1], #4
   1787c:	f840 3b04 	str.w	r3, [r0], #4
   17880:	f851 3b04 	ldr.w	r3, [r1], #4
   17884:	f840 3b04 	str.w	r3, [r0], #4
   17888:	f851 3b04 	ldr.w	r3, [r1], #4
   1788c:	f840 3b04 	str.w	r3, [r0], #4
   17890:	3a10      	subs	r2, #16
   17892:	d2ed      	bcs.n	17870 <memcpy+0x98>
   17894:	320c      	adds	r2, #12
   17896:	d305      	bcc.n	178a4 <memcpy+0xcc>
   17898:	f851 3b04 	ldr.w	r3, [r1], #4
   1789c:	f840 3b04 	str.w	r3, [r0], #4
   178a0:	3a04      	subs	r2, #4
   178a2:	d2f9      	bcs.n	17898 <memcpy+0xc0>
   178a4:	3204      	adds	r2, #4
   178a6:	d008      	beq.n	178ba <memcpy+0xe2>
   178a8:	07d2      	lsls	r2, r2, #31
   178aa:	bf1c      	itt	ne
   178ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
   178b0:	f800 3b01 	strbne.w	r3, [r0], #1
   178b4:	d301      	bcc.n	178ba <memcpy+0xe2>
   178b6:	880b      	ldrh	r3, [r1, #0]
   178b8:	8003      	strh	r3, [r0, #0]
   178ba:	4660      	mov	r0, ip
   178bc:	4770      	bx	lr
   178be:	bf00      	nop
   178c0:	2a08      	cmp	r2, #8
   178c2:	d313      	bcc.n	178ec <memcpy+0x114>
   178c4:	078b      	lsls	r3, r1, #30
   178c6:	d08d      	beq.n	177e4 <memcpy+0xc>
   178c8:	f010 0303 	ands.w	r3, r0, #3
   178cc:	d08a      	beq.n	177e4 <memcpy+0xc>
   178ce:	f1c3 0304 	rsb	r3, r3, #4
   178d2:	1ad2      	subs	r2, r2, r3
   178d4:	07db      	lsls	r3, r3, #31
   178d6:	bf1c      	itt	ne
   178d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   178dc:	f800 3b01 	strbne.w	r3, [r0], #1
   178e0:	d380      	bcc.n	177e4 <memcpy+0xc>
   178e2:	f831 3b02 	ldrh.w	r3, [r1], #2
   178e6:	f820 3b02 	strh.w	r3, [r0], #2
   178ea:	e77b      	b.n	177e4 <memcpy+0xc>
   178ec:	3a04      	subs	r2, #4
   178ee:	d3d9      	bcc.n	178a4 <memcpy+0xcc>
   178f0:	3a01      	subs	r2, #1
   178f2:	f811 3b01 	ldrb.w	r3, [r1], #1
   178f6:	f800 3b01 	strb.w	r3, [r0], #1
   178fa:	d2f9      	bcs.n	178f0 <memcpy+0x118>
   178fc:	780b      	ldrb	r3, [r1, #0]
   178fe:	7003      	strb	r3, [r0, #0]
   17900:	784b      	ldrb	r3, [r1, #1]
   17902:	7043      	strb	r3, [r0, #1]
   17904:	788b      	ldrb	r3, [r1, #2]
   17906:	7083      	strb	r3, [r0, #2]
   17908:	4660      	mov	r0, ip
   1790a:	4770      	bx	lr

0001790c <memset>:
   1790c:	b470      	push	{r4, r5, r6}
   1790e:	0786      	lsls	r6, r0, #30
   17910:	d046      	beq.n	179a0 <memset+0x94>
   17912:	1e54      	subs	r4, r2, #1
   17914:	2a00      	cmp	r2, #0
   17916:	d041      	beq.n	1799c <memset+0x90>
   17918:	b2ca      	uxtb	r2, r1
   1791a:	4603      	mov	r3, r0
   1791c:	e002      	b.n	17924 <memset+0x18>
   1791e:	f114 34ff 	adds.w	r4, r4, #4294967295
   17922:	d33b      	bcc.n	1799c <memset+0x90>
   17924:	f803 2b01 	strb.w	r2, [r3], #1
   17928:	079d      	lsls	r5, r3, #30
   1792a:	d1f8      	bne.n	1791e <memset+0x12>
   1792c:	2c03      	cmp	r4, #3
   1792e:	d92e      	bls.n	1798e <memset+0x82>
   17930:	b2cd      	uxtb	r5, r1
   17932:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   17936:	2c0f      	cmp	r4, #15
   17938:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1793c:	d919      	bls.n	17972 <memset+0x66>
   1793e:	f103 0210 	add.w	r2, r3, #16
   17942:	4626      	mov	r6, r4
   17944:	3e10      	subs	r6, #16
   17946:	2e0f      	cmp	r6, #15
   17948:	f842 5c10 	str.w	r5, [r2, #-16]
   1794c:	f842 5c0c 	str.w	r5, [r2, #-12]
   17950:	f842 5c08 	str.w	r5, [r2, #-8]
   17954:	f842 5c04 	str.w	r5, [r2, #-4]
   17958:	f102 0210 	add.w	r2, r2, #16
   1795c:	d8f2      	bhi.n	17944 <memset+0x38>
   1795e:	f1a4 0210 	sub.w	r2, r4, #16
   17962:	f022 020f 	bic.w	r2, r2, #15
   17966:	f004 040f 	and.w	r4, r4, #15
   1796a:	3210      	adds	r2, #16
   1796c:	2c03      	cmp	r4, #3
   1796e:	4413      	add	r3, r2
   17970:	d90d      	bls.n	1798e <memset+0x82>
   17972:	461e      	mov	r6, r3
   17974:	4622      	mov	r2, r4
   17976:	3a04      	subs	r2, #4
   17978:	2a03      	cmp	r2, #3
   1797a:	f846 5b04 	str.w	r5, [r6], #4
   1797e:	d8fa      	bhi.n	17976 <memset+0x6a>
   17980:	1f22      	subs	r2, r4, #4
   17982:	f022 0203 	bic.w	r2, r2, #3
   17986:	3204      	adds	r2, #4
   17988:	4413      	add	r3, r2
   1798a:	f004 0403 	and.w	r4, r4, #3
   1798e:	b12c      	cbz	r4, 1799c <memset+0x90>
   17990:	b2c9      	uxtb	r1, r1
   17992:	441c      	add	r4, r3
   17994:	f803 1b01 	strb.w	r1, [r3], #1
   17998:	429c      	cmp	r4, r3
   1799a:	d1fb      	bne.n	17994 <memset+0x88>
   1799c:	bc70      	pop	{r4, r5, r6}
   1799e:	4770      	bx	lr
   179a0:	4614      	mov	r4, r2
   179a2:	4603      	mov	r3, r0
   179a4:	e7c2      	b.n	1792c <memset+0x20>
   179a6:	bf00      	nop

000179a8 <rand>:
   179a8:	b410      	push	{r4}
   179aa:	4b0c      	ldr	r3, [pc, #48]	; (179dc <rand+0x34>)
   179ac:	480c      	ldr	r0, [pc, #48]	; (179e0 <rand+0x38>)
   179ae:	6819      	ldr	r1, [r3, #0]
   179b0:	4c0c      	ldr	r4, [pc, #48]	; (179e4 <rand+0x3c>)
   179b2:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   179b6:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   179ba:	fb00 f002 	mul.w	r0, r0, r2
   179be:	fb04 0003 	mla	r0, r4, r3, r0
   179c2:	fba2 2304 	umull	r2, r3, r2, r4
   179c6:	4403      	add	r3, r0
   179c8:	3201      	adds	r2, #1
   179ca:	f143 0300 	adc.w	r3, r3, #0
   179ce:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   179d2:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   179d6:	bc10      	pop	{r4}
   179d8:	4770      	bx	lr
   179da:	bf00      	nop
   179dc:	200001c4 	.word	0x200001c4
   179e0:	5851f42d 	.word	0x5851f42d
   179e4:	4c957f2d 	.word	0x4c957f2d
	...

00017a00 <strlen>:
   17a00:	f890 f000 	pld	[r0]
   17a04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   17a08:	f020 0107 	bic.w	r1, r0, #7
   17a0c:	f06f 0c00 	mvn.w	ip, #0
   17a10:	f010 0407 	ands.w	r4, r0, #7
   17a14:	f891 f020 	pld	[r1, #32]
   17a18:	f040 8049 	bne.w	17aae <strlen+0xae>
   17a1c:	f04f 0400 	mov.w	r4, #0
   17a20:	f06f 0007 	mvn.w	r0, #7
   17a24:	e9d1 2300 	ldrd	r2, r3, [r1]
   17a28:	f891 f040 	pld	[r1, #64]	; 0x40
   17a2c:	f100 0008 	add.w	r0, r0, #8
   17a30:	fa82 f24c 	uadd8	r2, r2, ip
   17a34:	faa4 f28c 	sel	r2, r4, ip
   17a38:	fa83 f34c 	uadd8	r3, r3, ip
   17a3c:	faa2 f38c 	sel	r3, r2, ip
   17a40:	bb4b      	cbnz	r3, 17a96 <strlen+0x96>
   17a42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   17a46:	fa82 f24c 	uadd8	r2, r2, ip
   17a4a:	f100 0008 	add.w	r0, r0, #8
   17a4e:	faa4 f28c 	sel	r2, r4, ip
   17a52:	fa83 f34c 	uadd8	r3, r3, ip
   17a56:	faa2 f38c 	sel	r3, r2, ip
   17a5a:	b9e3      	cbnz	r3, 17a96 <strlen+0x96>
   17a5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   17a60:	fa82 f24c 	uadd8	r2, r2, ip
   17a64:	f100 0008 	add.w	r0, r0, #8
   17a68:	faa4 f28c 	sel	r2, r4, ip
   17a6c:	fa83 f34c 	uadd8	r3, r3, ip
   17a70:	faa2 f38c 	sel	r3, r2, ip
   17a74:	b97b      	cbnz	r3, 17a96 <strlen+0x96>
   17a76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   17a7a:	f101 0120 	add.w	r1, r1, #32
   17a7e:	fa82 f24c 	uadd8	r2, r2, ip
   17a82:	f100 0008 	add.w	r0, r0, #8
   17a86:	faa4 f28c 	sel	r2, r4, ip
   17a8a:	fa83 f34c 	uadd8	r3, r3, ip
   17a8e:	faa2 f38c 	sel	r3, r2, ip
   17a92:	2b00      	cmp	r3, #0
   17a94:	d0c6      	beq.n	17a24 <strlen+0x24>
   17a96:	2a00      	cmp	r2, #0
   17a98:	bf04      	itt	eq
   17a9a:	3004      	addeq	r0, #4
   17a9c:	461a      	moveq	r2, r3
   17a9e:	ba12      	rev	r2, r2
   17aa0:	fab2 f282 	clz	r2, r2
   17aa4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   17aa8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   17aac:	4770      	bx	lr
   17aae:	e9d1 2300 	ldrd	r2, r3, [r1]
   17ab2:	f004 0503 	and.w	r5, r4, #3
   17ab6:	f1c4 0000 	rsb	r0, r4, #0
   17aba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   17abe:	f014 0f04 	tst.w	r4, #4
   17ac2:	f891 f040 	pld	[r1, #64]	; 0x40
   17ac6:	fa0c f505 	lsl.w	r5, ip, r5
   17aca:	ea62 0205 	orn	r2, r2, r5
   17ace:	bf1c      	itt	ne
   17ad0:	ea63 0305 	ornne	r3, r3, r5
   17ad4:	4662      	movne	r2, ip
   17ad6:	f04f 0400 	mov.w	r4, #0
   17ada:	e7a9      	b.n	17a30 <strlen+0x30>

00017adc <__register_exitproc>:
   17adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17ae0:	4d2c      	ldr	r5, [pc, #176]	; (17b94 <__register_exitproc+0xb8>)
   17ae2:	4606      	mov	r6, r0
   17ae4:	6828      	ldr	r0, [r5, #0]
   17ae6:	4698      	mov	r8, r3
   17ae8:	460f      	mov	r7, r1
   17aea:	4691      	mov	r9, r2
   17aec:	f000 f882 	bl	17bf4 <__retarget_lock_acquire_recursive>
   17af0:	4b29      	ldr	r3, [pc, #164]	; (17b98 <__register_exitproc+0xbc>)
   17af2:	681c      	ldr	r4, [r3, #0]
   17af4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   17af8:	2b00      	cmp	r3, #0
   17afa:	d03e      	beq.n	17b7a <__register_exitproc+0x9e>
   17afc:	685a      	ldr	r2, [r3, #4]
   17afe:	2a1f      	cmp	r2, #31
   17b00:	dc1c      	bgt.n	17b3c <__register_exitproc+0x60>
   17b02:	f102 0e01 	add.w	lr, r2, #1
   17b06:	b176      	cbz	r6, 17b26 <__register_exitproc+0x4a>
   17b08:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   17b0c:	2401      	movs	r4, #1
   17b0e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   17b12:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   17b16:	4094      	lsls	r4, r2
   17b18:	4320      	orrs	r0, r4
   17b1a:	2e02      	cmp	r6, #2
   17b1c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   17b20:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   17b24:	d023      	beq.n	17b6e <__register_exitproc+0x92>
   17b26:	3202      	adds	r2, #2
   17b28:	f8c3 e004 	str.w	lr, [r3, #4]
   17b2c:	6828      	ldr	r0, [r5, #0]
   17b2e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   17b32:	f000 f861 	bl	17bf8 <__retarget_lock_release_recursive>
   17b36:	2000      	movs	r0, #0
   17b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17b3c:	4b17      	ldr	r3, [pc, #92]	; (17b9c <__register_exitproc+0xc0>)
   17b3e:	b30b      	cbz	r3, 17b84 <__register_exitproc+0xa8>
   17b40:	f44f 70c8 	mov.w	r0, #400	; 0x190
   17b44:	f7f9 ff50 	bl	119e8 <malloc>
   17b48:	4603      	mov	r3, r0
   17b4a:	b1d8      	cbz	r0, 17b84 <__register_exitproc+0xa8>
   17b4c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   17b50:	6002      	str	r2, [r0, #0]
   17b52:	2100      	movs	r1, #0
   17b54:	6041      	str	r1, [r0, #4]
   17b56:	460a      	mov	r2, r1
   17b58:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   17b5c:	f04f 0e01 	mov.w	lr, #1
   17b60:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   17b64:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   17b68:	2e00      	cmp	r6, #0
   17b6a:	d0dc      	beq.n	17b26 <__register_exitproc+0x4a>
   17b6c:	e7cc      	b.n	17b08 <__register_exitproc+0x2c>
   17b6e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   17b72:	430c      	orrs	r4, r1
   17b74:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   17b78:	e7d5      	b.n	17b26 <__register_exitproc+0x4a>
   17b7a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   17b7e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   17b82:	e7bb      	b.n	17afc <__register_exitproc+0x20>
   17b84:	6828      	ldr	r0, [r5, #0]
   17b86:	f000 f837 	bl	17bf8 <__retarget_lock_release_recursive>
   17b8a:	f04f 30ff 	mov.w	r0, #4294967295
   17b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17b92:	bf00      	nop
   17b94:	200005f0 	.word	0x200005f0
   17b98:	000199b8 	.word	0x000199b8
   17b9c:	000119e9 	.word	0x000119e9

00017ba0 <register_fini>:
   17ba0:	4b02      	ldr	r3, [pc, #8]	; (17bac <register_fini+0xc>)
   17ba2:	b113      	cbz	r3, 17baa <register_fini+0xa>
   17ba4:	4802      	ldr	r0, [pc, #8]	; (17bb0 <register_fini+0x10>)
   17ba6:	f000 b805 	b.w	17bb4 <atexit>
   17baa:	4770      	bx	lr
   17bac:	00000000 	.word	0x00000000
   17bb0:	00017bc1 	.word	0x00017bc1

00017bb4 <atexit>:
   17bb4:	2300      	movs	r3, #0
   17bb6:	4601      	mov	r1, r0
   17bb8:	461a      	mov	r2, r3
   17bba:	4618      	mov	r0, r3
   17bbc:	f7ff bf8e 	b.w	17adc <__register_exitproc>

00017bc0 <__libc_fini_array>:
   17bc0:	b538      	push	{r3, r4, r5, lr}
   17bc2:	4c0a      	ldr	r4, [pc, #40]	; (17bec <__libc_fini_array+0x2c>)
   17bc4:	4d0a      	ldr	r5, [pc, #40]	; (17bf0 <__libc_fini_array+0x30>)
   17bc6:	1b64      	subs	r4, r4, r5
   17bc8:	10a4      	asrs	r4, r4, #2
   17bca:	d00a      	beq.n	17be2 <__libc_fini_array+0x22>
   17bcc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   17bd0:	3b01      	subs	r3, #1
   17bd2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   17bd6:	3c01      	subs	r4, #1
   17bd8:	f855 3904 	ldr.w	r3, [r5], #-4
   17bdc:	4798      	blx	r3
   17bde:	2c00      	cmp	r4, #0
   17be0:	d1f9      	bne.n	17bd6 <__libc_fini_array+0x16>
   17be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17be6:	f001 bf1f 	b.w	19a28 <_fini>
   17bea:	bf00      	nop
   17bec:	00019a38 	.word	0x00019a38
   17bf0:	00019a34 	.word	0x00019a34

00017bf4 <__retarget_lock_acquire_recursive>:
   17bf4:	4770      	bx	lr
   17bf6:	bf00      	nop

00017bf8 <__retarget_lock_release_recursive>:
   17bf8:	4770      	bx	lr
   17bfa:	bf00      	nop
   17bfc:	2e2f2e2e 	.word	0x2e2f2e2e
   17c00:	2e2e2f2e 	.word	0x2e2e2f2e
   17c04:	554c412f 	.word	0x554c412f
   17c08:	6972445f 	.word	0x6972445f
   17c0c:	2f726576 	.word	0x2f726576
   17c10:	5f554c41 	.word	0x5f554c41
   17c14:	76697244 	.word	0x76697244
   17c18:	682f7265 	.word	0x682f7265
   17c1c:	692f6c61 	.word	0x692f6c61
   17c20:	756c636e 	.word	0x756c636e
   17c24:	682f6564 	.word	0x682f6564
   17c28:	775f6c61 	.word	0x775f6c61
   17c2c:	682e7464 	.word	0x682e7464
   17c30:	00000000 	.word	0x00000000
   17c34:	656c6553 	.word	0x656c6553
   17c38:	64657463 	.word	0x64657463
   17c3c:	6e696c20 	.word	0x6e696c20
   17c40:	00003a65 	.word	0x00003a65
   17c44:	00000a0d 	.word	0x00000a0d
   17c48:	2a2a2a2a 	.word	0x2a2a2a2a
   17c4c:	66694c20 	.word	0x66694c20
   17c50:	75502065 	.word	0x75502065
   17c54:	2065736c 	.word	0x2065736c
   17c58:	69746341 	.word	0x69746341
   17c5c:	65746176 	.word	0x65746176
   17c60:	2a2a2a64 	.word	0x2a2a2a64
   17c64:	0000002a 	.word	0x0000002a

00017c68 <_ZTV10AMMC_Class>:
   17c68:	000002e4 00000000 00000000 000007e9     ................
   17c78:	00000839 00010e9d 00000000 00000000     9...............
   17c88:	fffffd1c 00000000 000108dd 000107ad     ................

00017c98 <_ZTT10AMMC_Class>:
   17c98:	00017c74 00017cbc 00017cec 00017d08     t|...|...|...}..
   17ca8:	00017cd8 00017c90                       .|...|..

00017cb0 <_ZTC10AMMC_Class0_15ARINC_Interface>:
   17cb0:	000002e4 00000000 00000000 00000000     ................
   17cc0:	00000000 00010e9d 00000000 00000000     ................
   17cd0:	fffffd1c 00000000 000108dd 000107ad     ................

00017ce0 <_ZTC10AMMC_Class0_14Protocol_Class>:
   17ce0:	000002e4 00000000 00000000 00000000     ................
   17cf0:	00000000 00011a0f 00000000 00000000     ................
   17d00:	fffffd1c 00000000 000108dd 000107ad     ................

00017d10 <factoryDefaultsConfiguration>:
   17d10:	000000ac 00000004 0000070c 00000000     ................
   17d20:	00000000 00000001 000003e8 000003e8     ................
   17d30:	000003e8 00000000 00000000 00000000     ................
   17d40:	3e051eb8 c4128000 42aa0000 42700000     ...>.......B..pB
   17d50:	3e051eb8 c4128000 42960000 42480000     ...>.......B..HB
   17d60:	3de147ae 3e0f5c29 3e2e147b c3f68000     .G.=)\.>{..>....
   17d70:	c424c000 c444c000 43200000 42f00000     ..$...D... C...B
   17d80:	425c0000 444f8000 428c0000 43200000     ..\B..OD...B.. C
   17d90:	bc9ba5e3 41780000 3fbae148 42a00000     ......xAH..?...B
   17da0:	41200000 41200000 00000014 00000078     .. A.. A....x...
   17db0:	be23d70a 41d00000 00000078              ..#....Ax...

00017dbc <factoryDefaultsCycles>:
   17dbc:	000001c0 00000005 0000000c 00000024     ............$...
   17dcc:	756e614d 00006c61 00000000 00000000     Manual..........
   17ddc:	00000000 00000001 00000258 0000000f     ........X.......
   17dec:	000004b0 63697551 7453206b 00747261     ....Quick Start.
	...
   17e04:	00000001 00000258 0000001e 0000012c     ....X.......,...
   17e14:	2030332b 73636573 00000000 00000000     +30 secs........
   17e24:	00000000 00000001 000000f0 0000001e     ................
   17e34:	0000001e 73657250 31207465 00000000     ....Preset 1....
	...
   17e5c:	73657250 32207465 00000000 00000000     Preset 2........
	...
   17e80:	73657250 33207465 00000000 00000000     Preset 3........
	...
   17ea4:	73657250 34207465 00000000 00000000     Preset 4........
	...
   17ec8:	73657250 35207465 00000000 00000000     Preset 5........
	...
   17eec:	73657250 36207465 00000000 00000000     Preset 6........
	...
   17f10:	73657250 37207465 00000000 00000000     Preset 7........
	...
   17f34:	73657250 38207465 00000000 00000000     Preset 8........
	...
   17f58:	73657250 39207465 00000000 00000000     Preset 9........
	...
   17f7c:	65736552 00000074 74696e49 696c6169     Reset...Initiali
   17f8c:	0000657a 75736552 0000656d 6e617453     ze..Resume..Stan
   17f9c:	4f796264 00004646 70657250 53657261     dbyOFF..PrepareS
   17fac:	646e6174 4e4f7962 00000000 6e617453     tandbyON....Stan
   17fbc:	4f796264 0000004e 6e617453 52796264     dbyON...StandbyR
   17fcc:	79646165 00000000 616c6544 00646579     eady....Delayed.
   17fdc:	65746e49 70757272 00646574 00004e4f     Interrupted.ON..
   17fec:	706f7453 50646570 65636f72 00007373     StoppedProcess..
   17ffc:	61656c43 0070756e 696e6946 64656873     Cleanup.Finished
   1800c:	00000000 7065654b 00746f48 666c6553     ....KeepHot.Self
   1801c:	746f7250 00746365 6f727245 00000072     Protect.Error...
   1802c:	6e69614d 616e6574 0065636e 55494d48     Maintenance.HMIU
   1803c:	74616470 00000065 6d726946 65726177     pdate...Firmware
   1804c:	61647055 00006574 72727543 20746e65     Update..Current 
   1805c:	74617453 00000065 6c637943 75442065     State...Cycle Du
   1806c:	69746172 00006e6f 616d6552 6e696e69     ration..Remainin
   1807c:	69542067 0000656d 67726154 50207465     g Time..Target P
   1808c:	7265776f 00000000 00776f4e 6967614d     ower....Now.Magi
   1809c:	00000063 00203a20 00007830 00000a0d     c... : .0x......

000180ac <_ZTV17ConfigState_Class>:
	...
   180b4:	00011a0f                                ....

000180b8 <_ZTV14DateTime_Class>:
	...
   180c0:	00013c19 00013d09 49505351 6f725020     .<...=..QSPI Pro
   180d0:	6d617267 61745320 64657472 00000d0a     gram Started....
   180e0:	73616c46 61642068 76206174 66697265     Flash data verif
   180f0:	74616369 206e6f69 6c696166 0a2e6465     ication failed..
   18100:	0000000d 74696220 00003a20 00000a0d     .... bit :......
   18110:	74697257 202d2065 64616552 20736920     Write - Read is 
   18120:	63637573 66737365 69206c75 5351206e     successful in QS
   18130:	46204950 6873616c 6d656d20 2079726f     PI Flash memory 
   18140:	00000000 202a2a2a 72617453 20705574     ....*** StartUp 
   18150:	6f676c41 68746972 206e656d 74736554     Algorithmen Test
   18160:	2a2a2a20 00000000 202a2a2a 65746144      ***....*** Date
   18170:	0020203a 2074634f 32203120 00303230     :  .Oct  1 2020.
   18180:	6d695420 00203a65 353a3931 39333a35      Time: .19:55:39
   18190:	00000000 202a2a2a 20554c41 74696e69     ....*** ALU init
   181a0:	65746169 2a2a2064 0000002a 69746341     iated ***...Acti
   181b0:	6c206576 3a656e69 00000020 73616c46     ve line: ...Flas
   181c0:	654d2068 79726f6d 6c655320 73655466     h Memory SelfTes
   181d0:	41502074 44455353 00000000 00000a0d     t PASSED........
   181e0:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   181f0:	73655466 41462074 44454c49 00000000     fTest FAILED....
   18200:	52504545 4d204d4f 726f6d65 65532079     EEPROM Memory Se
   18210:	6554666c 50207473 45535341 00000044     lfTest PASSED...
   18220:	52504545 4d204d4f 726f6d65 65532079     EEPROM Memory Se
   18230:	6554666c 46207473 454c4941 00000044     lfTest FAILED...
   18240:	20726941 646e6f43 6f697469 676e696e     Air Conditioning
   18250:	73795320 206d6574 7265704f 6e697461      System Operatin
   18260:	00000067 00000a0d 20726941 646e6f43     g.......Air Cond
   18270:	6f697469 676e696e 73795320 206d6574     itioning System 
   18280:	72617453 00646574 646e6168 4147656c     Started.handleGA
   18290:	76454e49 20746e65 65636572 64657669     INEvent received
   182a0:	7773203a 68637469 20676e69 6d6f7266     : switching from
   182b0:	00000020 206f7420 00000000 6c662820      ... to .... (fl
   182c0:	20736761 00203d3d 646e6168 7453656c     ags == .handleSt
   182d0:	49657461 6974696e 7a696c61 66203a65     ateInitialize: f
   182e0:	7367616c 203d3d20 00007830 646e6168     lags == 0x..hand
   182f0:	7453656c 49657461 6974696e 7a696c61     leStateInitializ
   18300:	00000065 646e6168 7453656c 53657461     e...handleStateS
   18310:	646e6174 464f7962 00000046 646e6168     tandbyOFF...hand
   18320:	7453656c 50657461 61706572 74536572     leStatePrepareSt
   18330:	62646e61 004e4f79 20726941 646e6f43     andbyON.Air Cond
   18340:	6f697469 676e696e 73795320 206d6574     itioning System 
   18350:	706f7453 00646570                       Stopped.

00018358 <_ZTV12States_Class>:
	...
   18360:	00002d21 682f2e2e 702f6c70 2f74726f     !-..../hpl/port/
   18370:	5f6c7068 6f697067 7361625f 00682e65     hpl_gpio_base.h.
   18380:	682f2e2e 692f6c61 756c636e 682f6564     ../hal/include/h
   18390:	775f6c61 682e7464 00000000 682f2e2e     al_wdt.h....../h
   183a0:	732f6c61 682f6372 635f6c61 6e656c61     al/src/hal_calen
   183b0:	2e726164 00000063 682f2e2e 732f6c61     dar.c...../hal/s
   183c0:	682f6372 635f6c61 615f6e61 636e7973     rc/hal_can_async
   183d0:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   183e0:	635f6c61 735f6372 2e636e79 00000063     al_crc_sync.c...
   183f0:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   18400:	6d5f6332 7973615f 632e636e 00000000     2c_m_async.c....
   18410:	682f2e2e 732f6c61 682f6372 705f6c61     ../hal/src/hal_p
   18420:	632e6d77 00000000 682f2e2e 732f6c61     wm.c....../hal/s
   18430:	682f6372 715f6c61 5f697073 636e7973     rc/hal_qspi_sync
   18440:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   18450:	735f6c61 6d5f6970 7973615f 632e636e     al_spi_m_async.c
   18460:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   18470:	735f6c61 6d5f6970 6e79735f 00632e63     al_spi_m_sync.c.
   18480:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
   18490:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
   184a0:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   184b0:	2e747369 00000063                       ist.c...

000184b8 <_map>:
   184b8:	00000000 00000040 00000004 00000004     ....@...........
   184c8:	00000005 00000005 00000006 00000056     ............V...
   184d8:	00000007 00000057 682f2e2e 652f6c70     ....W...../hpl/e
   184e8:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

000184f8 <user_mux_confs>:
   184f8:	00000100 00000000 00000000 00000000     ................
	...

0001853c <channel_confs>:
   1853c:	0000065e 00000000 00000000 00000000     ^...............
	...

0001857c <interrupt_cfg>:
	...
   185fc:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
   1860c:	632e6361 00000000 682f2e2e 712f6c70     ac.c....../hpl/q
   1861c:	2f697073 5f6c7068 69707371 0000632e     spi/hpl_qspi.c..
   1862c:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
   1863c:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
   1864c:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   1865c:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
   1866c:	41014000 43000000 43000400 43000800     .@.A...C...C...C
   1867c:	43000c00                                ...C

00018680 <sercomspi_regs>:
   18680:	0020008c 00020000 00000000 01ff0063     .. .........c...
   18690:	20000c01 02000000 00000000 ff00fe00     ... ............
   186a0:	000c0401 00000030 00000002 00ef0000     ....0...........
   186b0:	000601ff 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   186c0:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   186d0:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   186e0:	43001400 43001800                       ...C...C

000186e8 <_usb_ep_cfgs>:
   186e8:	20002fac 00000000 00000040 20002fec     ./. ....@..../. 
   186f8:	2000302c 00400040 2000306c 200030ac     ,0. @.@.l0. .0. 
   18708:	00400040 200030ec 2000312c 00400040     @.@..0. ,1. @.@.
   18718:	2000316c 200031ac 00400040 00000804     l1. .1. @.@.....
   18728:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   18738:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   18748:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   18758:	7361625f 00682e65                       _base.h.

00018760 <n25q256a_interface>:
   18760:	0000ecad 0000ed51 0000ee61 0000f019     ....Q...a.......
   18770:	0000f0a9 752f2e2e 642f6273 63697665     ....../usb/devic
   18780:	73752f65 2e636462 00000063              e/usbdc.c...

0001878c <_ZTV17ARINC_Conversions>:
	...
   18794:	000108dd 000107ad                       ........

0001879c <_ZL5Mesg1>:
   1879c:	4e495241 614c2043 3a6c6562 00000020     ARINC Label: ...

000187ac <_ZL5Mesg2>:
   187ac:	61746144 0000203a                       Data: ..

000187b4 <_ZL10HexToAscii>:
   187b4:	33323130 37363534 42413938 46454443     0123456789ABCDEF

000187c4 <_ZL11HistoryMesg>:
   187c4:	74736948 2079726f 4f464946 0000203a     History FIFO: ..
   187d4:	49480d0a 3935332d 61662033 64656c69     ..HI-3593 failed
   187e4:	206f7420 74696e49 7a696c69 000d0a65      to Initilize...
   187f4:	2d0a0d0a 68202d2d 41203273 434e4952     ...--- hs2 ARINC
   18804:	746e4920 61667265 20206563 2d2d2d2d      Interface  ----
   18814:	00000d0a 2d2d0a72 6f67212d 656d2074     ....r.---!got me
   18824:	67617373 2d2d2165 00002d2d 61727420     ssage!----.. tra
   18834:	696d736e 6e697474 2e2e2e67 00000000     nsmitting.......
   18844:	61725420 696d736e 64657474 00000021      Transmitted!...
   18854:	0000003e 72540d0a 6d736e61 26207469     >.....Transmit &
   18864:	63655220 65766965 74695720 614c2068      Receive With La
   18874:	736c6562 646f4d20 000d0a65 45530d0a     bels Mode.....SE
   18884:	542d464c 2c545345 746e4920 616e7265     LF-TEST, Interna
   18894:	6944206c 61746967 6f4c206c 622d706f     l Digital Loop-b
   188a4:	2c6b6361 206f4e20 61746164 20736920     ack, No data is 
   188b4:	6e617274 74696d73 20646574 65747865     transmitted exte
   188c4:	6c616e72 0d0a796c 00000000 6f200d0a     rnally........ o
   188d4:	6154206e 20656c62 6562616c 6120736c     n Table labels a
   188e4:	45206572 6c62616e 00006465 500a0d0a     re Enabled.....P
   188f4:	73736572 2d575320 6f742031 61747320     ress SW-1 to sta
   18904:	69207472 6974696e 796c6c61 000a0d0a     rt initially....
   18914:	202d2d2d 74747542 43206e6f 616d6d6f     --- Button Comma
   18924:	2073646e 0a2d2d2d 0000000d 70532020     nds ---.....  Sp
   18934:	20656361 20726142 44206f74 6c707369     ace Bar to Displ
   18944:	53207961 75746174 6e612073 6f432064     ay Status and Co
   18954:	6f72746e 6552206c 74736967 0a737265     ntrol Registers.
   18964:	0000000d 20702020 50206f74 65737561     ....  p to Pause
   18974:	00000d0a 206d2020 44206f74 6c707369     ....  m to Displ
   18984:	4c207961 6c656261 6d654d20 0079726f     ay Label Memory.
   18994:	003e0d0a 72540d0a 6d736e61 69747469     ..>...Transmitti
   189a4:	0d0a676e 0000003e 49480d0a 3935332d     ng..>.....HI-359
   189b4:	74532033 73757461 6f43202c 6f72746e     3 Status, Contro
   189c4:	6552206c 74736967 0d737265 0000000a     l Registers.....
   189d4:	20090d0a 2a2a2a20 50202a2a 73736572     ...  ***** Press
   189e4:	70732020 62656361 74207261 6f63206f       spacebar to co
   189f4:	6e69746e 2a206575 2a2a2a2a 0000002a     ntinue ******...
   18a04:	540d0a0a 736e6172 2074696d 73756150     ...Transmit Paus
   18a14:	0d0a6465 00000000 72500d0a 20737365     ed........Press 
   18a24:	44454c4f 5455425f 2d4e4f54 6f742032     OLED_BUTTON-2 to
   18a34:	61727420 696d736e 6e6f2074 72662065      transmit one fr
   18a44:	20656d61 20646e61 73756170 000d0a65     ame and pause...
   18a54:	72500d0a 20737365 44454c4f 5455425f     ..Press OLED_BUT
   18a64:	2d4e4f54 6f742033 73655220 0a656d75     TON-3 to Resume.
   18a74:	0000000d 72540d0a 6d736e61 65747469     ......Transmitte
   18a84:	65522072 656d7573 2e2e2e64 00000d0a     r Resumed.......
   18a94:	65520d0a 76696563 31207265 62614c20     ..Receiver 1 Lab
   18aa4:	0a736c65 0000000d 65520d0a 76696563     els.......Receiv
   18ab4:	32207265 62614c20 0a736c65 0000000d     er 2 Labels.....
   18ac4:	72540d0a 6d736e61 26207469 63655220     ..Transmit & Rec
   18ad4:	65766965 68634520 6f4d206f 0d0a6564     eive Echo Mode..
   18ae4:	00000000 6c530d0a 5320776f 64656570     ......Slow Speed
   18af4:	00000000 61460d0a 53207473 64656570     ......Fast Speed
   18b04:	00000000 72540d0a 6d736e61 65747469     ......Transmitte
   18b14:	61502072 79746972 616e4520 64656c62     r Parity Enabled
   18b24:	00000000 49480d0a 3935332d 61662033     ......HI-3593 fa
   18b34:	64656c69 206f7420 74696e69 7a696c69     iled to initiliz
   18b44:	000d0a65 61540d0a 20656c62 6562616c     e.....Table labe
   18b54:	6120736c 45206572 6c62616e 00006465     ls are Enabled..
   18b64:	2d0a0d0a 43202d2d 6f736e6f 4320656c     ...--- Console C
   18b74:	616d6d6f 2073646e 706c6548 2d2d2d20     ommands Help ---
   18b84:	00000000 20502020 6150203d 79746972     ....  P = Parity
   18b94:	676f5420 20656c67 6f2f6e6f 00006666      Toggle on/off..
   18ba4:	20542020 4654203d 2050494c 676f5420       T = TFLIP  Tog
   18bb4:	20656c67 6f2f6e6f 00006666 20522020     gle on/off..  R 
   18bc4:	4652203d 2050494c 676f5420 20656c67     = RFLIP  Toggle 
   18bd4:	6f2f6e6f 00006666 20532020 4453203d     on/off..  S = SD
   18be4:	202c4e4f 2c394453 31445320 6f542030     ON, SD9, SD10 To
   18bf4:	656c6767 2f6e6f20 0066666f 20482020     ggle on/off.  H 
   18c04:	6854203d 48207369 20706c65 65676150     = This Help Page
   18c14:	00000000 70532020 20656361 20726142     ....  Space Bar 
   18c24:	6944203d 616c7073 74532079 73757461     = Display Status
   18c34:	646e6120 6e6f4320 6c6f7274 67657220      and Control reg
   18c44:	00000073 20492020 6e49203d 6d657263     s...  I = Increm
   18c54:	20746e65 7373654d 20656761 20646e61     ent Message and 
   18c64:	6e617254 74696d73 7845202e 726f6c70     Transmit. Explor
   18c74:	4d207265 2065646f 4f202d20 21594c4e     er Mode  - ONLY!
   18c84:	00000000 204d2020 6e45203d 20726574     ....  M = Enter 
   18c94:	74737543 4d206d6f 61737365 202e6567     Custom Message. 
   18ca4:	6c707845 7265726f 646f4d20 2d202065     Explorer Mode  -
   18cb4:	4c4e4f20 00002159 4e452020 3d524554      ONLY!..  ENTER=
   18cc4:	61725420 696d736e 656e2074 6d207478      Transmit next m
   18cd4:	61737365 202e6567 6c707845 7265726f     essage. Explorer
   18ce4:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
   18cf4:	00207830 30307826 00002030 50205854     0x .&x000 ..TX P
   18d04:	74697261 4e4f2079 003e0d0a 50205854     arity ON..>.TX P
   18d14:	74697261 464f2079 3e0d0a46 00000000     arity OFF..>....
   18d24:	494c4654 65532050 3e0d0a74 00000000     TFLIP Set..>....
   18d34:	494c4654 6c432050 65726165 3e0d0a64     TFLIP Cleared..>
   18d44:	00000000 2d434552 46522031 2050494c     ....REC-1 RFLIP 
   18d54:	0a746553 00003e0d 2d434552 46522031     Set..>..REC-1 RF
   18d64:	2050494c 61656c43 0a646572 00003e0d     LIP Cleared..>..
   18d74:	2d434552 46522032 2050494c 0a746553     REC-2 RFLIP Set.
   18d84:	00003e0d 2d434552 46522032 2050494c     .>..REC-2 RFLIP 
   18d94:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
   18da4:	44532031 532c4e4f 61203944 5320646e     1 SDON,SD9 and S
   18db4:	20303144 0a746553 00003e0d 2d434552     D10 Set..>..REC-
   18dc4:	44532031 532c4e4f 61203944 5320646e     1 SDON,SD9 and S
   18dd4:	20303144 61656c43 0a646572 00003e0d     D10 Cleared..>..
   18de4:	2d434552 44532032 532c4e4f 61203944     REC-2 SDON,SD9 a
   18df4:	5320646e 20303144 0a746553 00003e0d     nd SD10 Set..>..
   18e04:	2d434552 44532032 532c4e4f 61203944     REC-2 SDON,SD9 a
   18e14:	5320646e 20303144 61656c43 0a646572     nd SD10 Cleared.
   18e24:	00003e0d 500a0d0a 73736572 61705320     .>.....Press Spa
   18e34:	42206563 6f207261 57532072 7420342d     ce Bar or SW-4 t
   18e44:	6572206f 656d7573 00000000 6562614c     o resume....Labe
   18e54:	2020736c 202d2030 203a3336 00000020     ls  0 - 63:  ...
   18e64:	00000020 614c0d0a 736c6562 34362020      .....Labels  64
   18e74:	3732312d 0020203a 614c0d0a 736c6562     -127:  ...Labels
   18e84:	38323120 3139312d 0020203a 614c0d0a      128-191:  ...La
   18e94:	736c6562 32393120 3535322d 0020203a     bels 192-255:  .
   18ea4:	614c0d0a 736c6562 20302020 3336202d     ..Labels  0 - 63
   18eb4:	0020203a 543e0d0a 20202058 74614420     :  ...>TX    Dat
   18ec4:	00003a61 6562614c 00003a6c 2d636552     a:..Label:..Rec-
   18ed4:	61442031 003a6174 2d314c50 61442031     1 Data:.PL1-1 Da
   18ee4:	003a6174 6374614d 00003a68 2d314c50     ta:.Match:..PL1-
   18ef4:	61442032 003a6174 2d314c50 61442033     2 Data:.PL1-3 Da
   18f04:	003a6174 2d636552 61442032 003a6174     ta:.Rec-2 Data:.
   18f14:	2d324c50 61442031 003a6174 2d324c50     PL2-1 Data:.PL2-
   18f24:	61442032 003a6174 2d324c50 61442033     2 Data:.PL2-3 Da
   18f34:	003a6174 00000d0a 78450d0a 726f6c70     ta:.......Explor
   18f44:	4d207265 0a65646f 0000000d 6c200d0a     er Mode....... l
   18f54:	6c656261 61542073 20656c62 45207369     abels Table is E
   18f64:	6c62616e 00006465 2d0a0d0a 42202d2d     nabled.....--- B
   18f74:	6f747475 6f43206e 6e616d6d 2d207364     utton Commands -
   18f84:	00002d2d 20200d0a 63617073 72616265     --....  spacebar
   18f94:	206f7420 70736944 2079616c 74617453      to Display Stat
   18fa4:	61207375 4320646e 72746e6f 52206c6f     us and Control R
   18fb4:	73696765 73726574 00000000 20200d0a     egisters......  
   18fc4:	44454c4f 5455422d 324e4f54 61727420     OLED-BUTTON2 tra
   18fd4:	696d736e 6e6f2074 656d2065 67617373     nsmit one messag
   18fe4:	72662065 74206d6f 736e6172 2074696d     e from transmit 
   18ff4:	66667562 00007265 20200d0a 6f74204c     buffer....  L to
   19004:	69725020 4c20746e 6c656261 6d654d20      Print Label Mem
   19014:	0a79726f 0000000d 72500d0a 20737365     ory.......Press 
   19024:	45544e45 6f742052 61725420 696d736e     ENTER to Transmi
   19034:	726f2074 65737520 65687420 294d2820     t or use the (M)
   19044:	6d6f6320 646e616d 206f7420 65746e65      command to ente
   19054:	20612072 74737563 6d206d6f 61737365     r a custom messa
   19064:	00006567 73657250 57532073 726f2034     ge..Press SW4 or
   19074:	61707320 61626563 6f742072 6e6f6320      spacebar to con
   19084:	756e6974 00000065 73657250 70732073     tinue...Press sp
   19094:	62656361 74207261 6f63206f 6e69746e     acebar to contin
   190a4:	00006575 433e0d0a 616d6d6f 4d20646e     ue....>Command M
   190b4:	00000000 6e450d0a 20726574 79622033     ......Enter 3 by
   190c4:	20736574 414c202b 204c4542 54206f74     tes + LABEL to T
   190d4:	736e6172 2074696d 6c6c6f66 6465776f     ransmit followed
   190e4:	20796220 45544e45 000d0a52 6f540d0a      by ENTER.....To
   190f4:	61725420 696d736e 65202c74 7265746e      Transmit, enter
   19104:	62203320 73657479 6c6f6620 65776f6c      3 bytes followe
   19114:	79622064 4c206120 6c656261 74796220     d by a Label byt
   19124:	6f662065 776f6c6c 62206465 4e452079     e followed by EN
   19134:	0a524554 0000000d 6d726f46 203a7461     TER.....Format: 
   19144:	73746942 322d3233 42202c35 32737469     Bits32-25, Bits2
   19154:	37312d34 6942202c 36317374 202c392d     4-17, Bits16-9, 
   19164:	4542414c 3a0d0a4c 00000000 6d617845     LABEL..:....Exam
   19174:	3a656c70 20313020 34203332 37362035     ple: 01 23 45 67
   19184:	544e4520 0d0a5245 0000003a 65725020      ENTER..:... Pre
   19194:	52207373 52555445 0000004e 61725420     ss RETURN... Tra
   191a4:	696d736e 676e6974 002e2e2e 61725420     nsmiting.... Tra
   191b4:	696d736e 21646574 00000000 6d6d6f43     nsmited!....Comm
   191c4:	20646e61 49203a49 6572636e 746e656d     and I: Increment
   191d4:	74616420 3e0d0a61 00000000               data..>....

000191e0 <_ZTV15ARINC_Interface>:
   191e0:	000002e0 00000000 00000000 00010c45     ............E...
   191f0:	00010ca5 00010e9d 00000000 00000000     ................
   19200:	fffffd20 00000000 000108dd 000107ad      ...............

00019210 <_ZTT15ARINC_Interface>:
   19210:	000191ec 0001922c 00019248 00019208     ....,...H.......

00019220 <_ZTC15ARINC_Interface0_14Protocol_Class>:
   19220:	000002e0 00000000 00000000 00000000     ................
   19230:	00000000 00011a0f 00000000 00000000     ................
   19240:	fffffd20 00000000 000108dd 000107ad      ...............
   19250:	636e7546 6e6f6974 65786520 65747563     Function execute
   19260:	75732064 73656363 6c756673 0000796c     d successfully..
   19270:	63656843 6f79206b 77207275 6e697269     Check your wirin
   19280:	46202e67 6873616c 69686320 73692070     g. Flash chip is
   19290:	6e6f6e20 7365722d 736e6f70 2e657669      non-responsive.
   192a0:	00000000 6e6f632a 75727473 726f7463     ....*constructor
   192b0:	5f666f5f 696f6863 2e2a6563 69676562     _of_choice*.begi
   192c0:	2029286e 20736177 20746f6e 6c6c6163     n() was not call
   192d0:	69206465 6f76206e 73206469 70757465     ed in void setup
   192e0:	00002928 62616e55 7420656c 6469206f     ()..Unable to id
   192f0:	69746e65 63207966 2e706968 65724120     entify chip. Are
   19300:	756f7920 72757320 68742065 63207369      you sure this c
   19310:	20706968 73207369 6f707075 64657472     hip is supported
   19320:	0000003f 62616e55 7420656c 6469206f     ?...Unable to id
   19330:	69746e65 63207966 63617061 2e797469     entify capacity.
   19340:	20734920 73696874 69686320 666f2070      Is this chip of
   19350:	69636966 796c6c61 70757320 74726f70     ficially support
   19360:	203f6465 6e206649 202c746f 61656c70     ed? If not, plea
   19370:	64206573 6e696665 20612065 50414360     se define a `CAP
   19380:	54494341 63206059 74736e6f 20746e61     ACITY` constant 
   19390:	20646e61 6c636e69 20656475 69207469     and include it i
   193a0:	6c66206e 2e687361 69676562 4143286e     n flash.begin(CA
   193b0:	49434150 2e295954 00000000 70696843     PACITY).....Chip
   193c0:	20736920 79737562 0000002e 656b614d      is busy....Make
   193d0:	72757320 6c612065 6970206c 6820736e      sure all pins h
   193e0:	20657661 6e656562 6e6f6320 7463656e     ave been connect
   193f0:	70206465 65706f72 00796c72 65676150     ed properly.Page
   19400:	65766f20 6f6c6672 61682077 65622073      overflow has be
   19410:	64206e65 62617369 2064656c 20646e61     en disabled and 
   19420:	20656874 72646461 20737365 6c6c6163     the address call
   19430:	65206465 65656378 74207364 6d206568     ed exceeds the m
   19440:	726f6d65 00000079 62616e55 7420656c     emory...Unable t
   19450:	6e45206f 656c6261 69725720 676e6974     o Enable Writing
   19460:	206f7420 70696863 0000002e 61656c50      to chip....Plea
   19470:	6d206573 20656b61 65727573 65687420     se make sure the
   19480:	4c4f4820 20262044 54495257 4f525045      HOLD & WRITEPRO
   19490:	54434554 6e697020 72612073 75702065     TECT pins are pu
   194a0:	64656c6c 20707520 56206f74 00004343     lled up to VCC..
   194b0:	73696854 63657320 20726f74 65726c61     This sector alre
   194c0:	20796461 746e6f63 736e6961 74616420     ady contains dat
   194d0:	00002e61 61656c50 6d206573 20656b61     a...Please make 
   194e0:	65727573 65687420 63657320 73726f74     sure the sectors
   194f0:	69656220 7720676e 74746972 74206e65      being written t
   19500:	7261206f 72652065 64657361 0000002e     o are erased....
   19510:	20756f59 20657261 6e6e7572 20676e69     You are running 
   19520:	20776f6c 53206e6f 2e4d4152 656c5020     low on SRAM. Ple
   19530:	20657361 6974706f 6573696d 756f7920     ase optimise you
   19540:	72702072 6172676f 6f66206d 65622072     r program for be
   19550:	72657474 4d415220 61737520 00006567     tter RAM usage..
   19560:	73696854 6e756620 6f697463 7369206e     This function is
   19570:	746f6e20 70757320 74726f70 62206465      not supported b
   19580:	68742079 6c662065 20687361 6f6d656d     y the flash memo
   19590:	68207972 77647261 2e657261 00000000     ry hardware.....
   195a0:	62616e55 7420656c 7573206f 6e657073     Unable to suspen
   195b0:	65722f64 656d7573 65706f20 69746172     d/resume operati
   195c0:	002e6e6f 74697257 75462065 6974636e     on..Write Functi
   195d0:	68206e6f 66207361 656c6961 72652064     on has failed er
   195e0:	63726f72 6b636568 0000002e 62616e55     rorcheck....Unab
   195f0:	7420656c 6e65206f 656c6261 622d3420     le to enable 4-b
   19600:	20657479 72646461 69737365 002e676e     yte addressing..
   19610:	62616e55 7420656c 6964206f 6c626173     Unable to disabl
   19620:	2d342065 65747962 64646120 73736572     e 4-byte address
   19630:	2e676e69 00000000 20656854 70696863     ing.....The chip
   19640:	20736920 72727563 6c746e65 6f702079      is currently po
   19650:	65726577 6f642064 002e6e77 20656854     wered down..The 
   19660:	73616c46 68632068 64207069 2073656f     Flash chip does 
   19670:	20746f6e 70707573 2074726f 50444653     not support SFDP
   19680:	0000002e 62616e55 7420656c 6572206f     ....Unable to re
   19690:	45206461 65736172 72615020 74656d61     ad Erase Paramet
   196a0:	20737265 6d6f7266 69686320 52202e70     ers from chip. R
   196b0:	72657665 676e6974 206f7420 7262696c     everting to libr
   196c0:	20797261 61666564 73746c75 0000002e     ary defaults....
   196d0:	62616e55 7420656c 6572206f 65206461     Unable to read e
   196e0:	65736172 6d697420 66207365 206d6f72     rase times from 
   196f0:	73616c66 656d2068 79726f6d 6552202e     flash memory. Re
   19700:	74726576 20676e69 6c206f74 61726269     verting to libra
   19710:	64207972 75616665 2e73746c 00000000     ry defaults.....
   19720:	62616e55 7420656c 6572206f 70206461     Unable to read p
   19730:	72676f72 74206d61 73656d69 6f726620     rogram times fro
   19740:	6c66206d 20687361 6f6d656d 202e7972     m flash memory. 
   19750:	65766552 6e697472 6f742067 62696c20     Reverting to lib
   19760:	79726172 66656420 746c7561 00002e73     rary defaults...
   19770:	43206f4e 20706968 656c6553 70207463     No Chip Select p
   19780:	64206e69 6e696665 69206465 6874206e     in defined in th
   19790:	75632065 6d6f7473 49505320 72724120     e custom SPI Arr
   197a0:	002e7961 6e6b6e55 206e776f 6f727265     ay..Unknown erro
   197b0:	00000072 6f727245 6f632072 203a6564     r...Error code: 
   197c0:	00007830 00000030 74206649 20736968     0x..0...If this 
   197d0:	73656f64 746f6e20 6c656820 65722070     does not help re
   197e0:	766c6f73 6c632f65 66697261 68742079     solve/clarify th
   197f0:	69207369 65757373 0000202c 61656c70     is issue, ..plea
   19800:	72206573 65736961 206e6120 75737369     se raise an issu
   19810:	74612065 74746820 2f2f3a70 2e777777     e at http://www.
   19820:	2d327368 69676e65 7265656e 2e676e69     hs2-engineering.
   19830:	692f6564 7865646e 7068702e 6e6f632f     de/index.php/con
   19840:	74636174 6d74682e 6977206c 74206874     tact.html with t
   19850:	64206568 69617465 6f20736c 68772066     he details of wh
   19860:	79207461 2072756f 65726577 696f6420     at your were doi
   19870:	7720676e 206e6568 73696874 72726520     ng when this err
   19880:	6f20726f 72756363 00646572              or occurred.

0001988c <maxEventCount>:
   1988c:	01000010                                         ..

0001988e <sizeOfEventQueue>:
   1988e:	ffff0100                                         ..

00019890 <forever>:
   19890:	7fffffff 2e2f2e2e 2e2e2f2e 554c412f     ....../../../ALU
   198a0:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
   198b0:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
   198c0:	6f697067 7361625f 00682e65              gpio_base.h.

000198cc <_ZTV14Calendar_Class>:
	...
   198d4:	00013c19 00013d09                       .<...=..

000198dc <_ZTV17DateTimeLog_Class>:
	...
   198e4:	00011a0f 00011a0f                       ........

000198ec <_ZTV9CDC_Class>:
	...
   198f4:	00014939 00014a09 00014595 00014901     9I...J...E...I..
   19904:	00014aa1 000148c5 000147a9 000147f9     .J...H...G...G..
   19914:	00014921 00014971                       !I..qI..

0001991c <_ZTV6Stream>:
	...
   19924:	00011a0f 00014b35 00014595 000145a9     ....5K...E...E..
   19934:	00011a0f 00011a0f 00011a0f 2e257830     ............0x%.
   19944:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   19954:	0066766f                                ovf.

00019958 <_ZTV5Print>:
	...
   19960:	00011a0f 00014b35 00014595 000145a9     ....5K...E...E..
   19970:	492f2e2e 492f4332 4f5f4332 63656a62     ../I2C/I2C_Objec
   19980:	73694c74 70632e74 00000070 682f2e2e     tList.cpp...../h
   19990:	732f6c61 682f6372 695f6c61 00632e6f     al/src/hal_io.c.
   199a0:	00776f70 00000000                       pow.....

000199a8 <TWO52>:
   199a8:	00000000 43300000 00000000 c3300000     ......0C......0.

000199b8 <_global_impure_ptr>:
   199b8:	200001c8                                ... 

000199bc <_init>:
   199bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   199be:	bf00      	nop
   199c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   199c2:	bc08      	pop	{r3}
   199c4:	469e      	mov	lr, r3
   199c6:	4770      	bx	lr

000199c8 <__init_array_start>:
   199c8:	00017ba1 	.word	0x00017ba1

000199cc <__frame_dummy_init_array_entry>:
   199cc:	00000289 00000785 000008c1 0000095d     ............]...
   199dc:	00000e31 000010e9 00001329 00001949     1.......)...I...
   199ec:	00001d6d 00002ea5 00011191 00011ced     m...............
   199fc:	000120b9 000123a1 00012571 000127bd     . ...#..q%...'..
   19a0c:	00012f39 00013809 00013f55 0001455d     9/...8..U?..]E..
   19a1c:	00014b21 00015379 000158d9              !K..yS...X..

00019a28 <_fini>:
   19a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a2a:	bf00      	nop
   19a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19a2e:	bc08      	pop	{r3}
   19a30:	469e      	mov	lr, r3
   19a32:	4770      	bx	lr

00019a34 <__fini_array_start>:
   19a34:	00000265 	.word	0x00000265
